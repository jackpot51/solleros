     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> %define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> %define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> %define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define font.unicode
    29                              <1> ;Include a unicode font. Disable to use an ascii font
    30                              <1> 	
    31                              <1> %define hardware.automatic
    32                              <1> ;Automatically load the sound and network drivers.
    33                              <1> 
    34                              <1> %define threads.included
    35                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    36                              <1> 
    37                              <1> %define exceptions.included
    38                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    39                              <1> 
    40                              <1> ;%define disk.protected
    41                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    42                              <1> 
    43                              <1> %define disk.real
    44                              <1> ;Use real mode for disk access-this gives greater compatibility
    45                              <1> 
    46                              <1> %define sound.included
    47                              <1> ;This includes the sound drivers
    48                              <1> 
    49                              <1> ;%define network.included
    50                              <1> ;This includes the network stack
    51                              <1> 
    52                              <1> ;%define rtl8169.included
    53                              <1> ;This includes the RTL8169 drivers
    54                              <1> 
    55                              <1> ;%define rtl8139.included
    56                              <1> ;This includes the RTL8139 drivers
    57                              <1> 
    58                              <1> ;%define ne2000.included
    59                              <1> ;This includes the ne2000 drivers
    60                              <1> 
    61                              <1> ;%define i8254x.included
    62                              <1> ;This includes the Intel 8254x drivers
    63                              <1> 
    64                              <1> ;%define sector.debug
    65                              <1> ;Dump the contents of the first sector of SollerOS
    66                              <1> 
    67                              <1> ;%define dos.compatible
    68                              <1> ;Make the kernel loadable by dos.
    69                              <1> 
    70                              <1> ;%define system.simple
    71                              <1> ;The smallest possible system, overrides all options
    72                              <1> 
    73                              <1> ;FIX DEPENDANCIES
    74                              <1> %ifdef system.simple
    75                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef dos.compatible
    79                              <1> 	%define UNDEFALL
    80                              <1> %endif
    81                              <1> %ifdef UNDEFALL
    82                              <1> 	%undef io.serial
    83                              <1> 	%undef disk.real
    84                              <1> 	%undef gui.included
    85                              <1> 	%undef gui.alphablending
    86                              <1> 	%undef gui.background
    87                              <1> 	%undef terminal.vsync
    88                              <1> 	%undef font.unicode
    89                              <1> 	%undef hardware.automatic
    90                              <1> 	%undef threads.included
    91                              <1> 	%undef exceptions.included
    92                              <1> 	%undef disk.protected
    93                              <1> 	%undef sound.included
    94                              <1> 	%undef network.included
    95                              <1> 	%undef rtl8139.included
    96                              <1> 	%undef rtl8169.included
    97                              <1> 	%undef ne2000.included
    98                              <1> 	%undef i8254x.included
    99                              <1> 	%undef sector.debug
   100                              <1> 	%undef UNDEFALL
   101                              <1> %endif
   102                              <1> %ifdef system.simple
   103                              <1> 	%define io.serial "1"
   104                              <1> 	%define disk.real
   105                              <1> %endif
   106                              <1> %ifdef gui.included
   107                              <1> 	%undef io.serial
   108                              <1> %else
   109                              <1> 	%undef gui.alphablending
   110                              <1> 	%undef gui.background
   111                              <1> %endif
   112                              <1> %ifdef network.included
   113                              <1> %else
   114                              <1> 	%undef i8254x.included
   115                              <1> 	%undef ne2000.included
   116                              <1> 	%undef rtl8139.included
   117                              <1> 	%undef rtl8169.included
   118                              <1> %endif
   119                              <1> %ifdef disk.protected
   120                              <1> 	%undef disk.real
   121                              <1> %else
   122                              <1> 	%ifdef disk.real
   123                              <1> 	%else
   124                              <1> 		%define disk.none
   125                              <1> 	%endif
   126                              <1> %endif
   127                                  [ORG 0x100]
   128                                  	%include "source/signature.asm"
   129                              <1> header:
   130 00000000 EB12                <1> 	jmp short boot
   131                              <1> signature:
   132 00000002 536F6C6C65724F5320- <1> db "SollerOS ",0 ;Operating system name
   133 0000000B 00                  <1>
   134 0000000C 18010000            <1> dd 280	;version number
   135                              <1> signatureend:
   136 00000010 008E0300                	dd bsscopy - header ;size of kernel data on disk
   137                                  [BITS 16]
   138                                      %include "source/boot.asm"
   139                              <1> boot:
   140 00000014 8CC8                <1> 	mov ax, cs
   141 00000016 8ED8                <1> 	mov ds, ax
   142 00000018 8EC0                <1> 	mov es, ax
   143 0000001A 8ED0                <1> 	mov ss, ax
   144 0000001C 0F31                <1> 	rdtsc
   145 0000001E 66A3[DF89]          <1> 	mov [initialtsc], eax
   146 00000022 668916[E389]        <1> 	mov [initialtsc + 4], edx
   147 00000027 66A3[E789]          <1> 	mov [lasttsc], eax
   148 0000002B 668916[EB89]        <1> 	mov [lasttsc + 4], edx
   149 00000030 880E[DA89]          <1> 	mov [DriveNumber], cl
   150 00000034 66891E[DB89]        <1> 	mov [lbaad], ebx
   151                              <1> %ifdef io.serial
   152                              <1> 	call getmemorysize
   153                              <1> 	mov si, serialmsg
   154                              <1> 	call printrm
   155                              <1> 	jmp pmode
   156                              <1> serialmsg: db 10,13,"SollerOS: Using serial port ",io.serial," for I/O.",0
   157                              <1> %else
   158 00000039 E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   159 0000003C E95400              <1> 	jmp pmode
   160                              <1> %endif
   161                              <1> 	
   162                              <1> vgaset:
   163 0000003F B81200              <1> 	mov ax, 12h
   164 00000042 31DB                <1> 	xor bx, bx
   165 00000044 CD10                <1> 	int 10h
   166 00000046 C606[D989]00        <1> 	mov byte [guion], 0
   167 0000004B E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   168 0000004E C3                  <1> 	ret
   169                              <1> 
   170                              <1> getmemorysize:
   171 0000004F BF[EF89]            <1> 	mov di, memlistbuf
   172 00000052 6631DB              <1> 	xor ebx, ebx
   173                              <1> getmemsizeloop:
   174 00000055 66B820E80000        <1> 	mov eax, 0xE820
   175 0000005B 66BA50414D53        <1> 	mov edx, 0x0534D4150
   176 00000061 66B918000000        <1> 	mov ecx, 24
   177 00000067 CD15                <1> 	int 0x15
   178 00000069 81C71800            <1> 	add di, 24
   179 0000006D 81FF[2F8C]          <1> 	cmp di, memlistend
   180 00000071 7305                <1> 	jae nomoregetmemsize
   181 00000073 6685DB              <1> 	test ebx, ebx
   182 00000076 75DD                <1> 	jnz getmemsizeloop
   183                              <1> nomoregetmemsize:
   184 00000078 81EF[EF89]          <1> 	sub di, memlistbuf
   185 0000007C 893E[2F8C]          <1> 	mov [memlistend], di
   186 00000080 C3                  <1> 	ret
   187                              <1> 	
   188                              <1> printrm:			; 'si' comes in with string address
   189 00000081 BB0700              <1>     mov bx,07		; write to display
   190 00000084 B40E                <1>     mov ah,0Eh		; screen function
   191 00000086 8A04                <1>    .lp:    mov al,[si]         ; get next character
   192 00000088 84C0                <1>     test al,al		; look for terminator 
   193 0000008A 7406                <1>     jz .done	; zero byte at end of string
   194 0000008C CD10                <1>     int 10h		; write character to screen.    
   195 0000008E 46                  <1> 	inc si	     	; move to next character
   196 0000008F E9F4FF              <1>     jmp .lp		; loop
   197 00000092 C3                  <1> .done: ret
   198                                      %include "source/pmode.asm"
   199                              <1> [BITS 16]
   200                              <1> 
   201                              <1> pmode:
   202 00000093 6631C0              <1> 	xor eax, eax
   203 00000096 6631DB              <1> 	xor ebx, ebx
   204 00000099 6631C9              <1> 	xor ecx, ecx
   205 0000009C 6631D2              <1> 	xor edx, edx
   206 0000009F 6631F6              <1> 	xor esi, esi
   207 000000A2 6631FF              <1> 	xor edi, edi
   208 000000A5 BA9200              <1> 	mov dx, 0x92
   209 000000A8 EC                  <1> 	in al, dx	;A20
   210 000000A9 0C02                <1> 	or al, 2
   211 000000AB EE                  <1> 	out dx, al
   212 000000AC 8CCB                <1> 	mov bx,cs		; EBX=segment
   213 000000AE 66C1E304            <1> 	shl ebx,4		;	<< 4
   214 000000B2 6689D8              <1> 	mov eax, ebx		; EAX=linear address of segment base
   215 000000B5 A3[B203]            <1> 	mov [gdt2 + 2],ax
   216 000000B8 A3[BA03]            <1> 	mov [gdt3 + 2],ax
   217 000000BB 66C1E810            <1> 	shr eax,16
   218 000000BF A2[B403]            <1> 	mov [gdt2 + 4],al
   219 000000C2 A2[BC03]            <1> 	mov [gdt3 + 4],al
   220 000000C5 8826[B703]          <1> 	mov [gdt2 + 7],ah
   221 000000C9 8826[BF03]          <1> 	mov [gdt3 + 7],ah
   222                              <1> 
   223 000000CD 66B8[008E0300]      <1> 	mov eax, initialstack
   224 000000D3 660306[4F02]        <1> 	add eax, [newcodecache]
   225 000000D8 A3[AA03]            <1> 	mov [gdts + 2],ax
   226 000000DB 66C1E810            <1> 	shr eax, 16
   227 000000DF A2[AC03]            <1> 	mov [gdts + 4],al
   228 000000E2 8826[AF03]          <1> 	mov [gdts + 7], ah
   229                              <1> 	
   230 000000E6 66A1[4F02]          <1> 	mov eax, [newcodecache]
   231 000000EA A3[C203]            <1> 	mov [gdt4 + 2],ax
   232 000000ED A3[CA03]            <1> 	mov [gdt5 + 2],ax
   233 000000F0 A3[D203]            <1> 	mov [gdtv8086 + 2], ax
   234 000000F3 A3[DA03]            <1> 	mov [gdtv80862 + 2], ax
   235 000000F6 66C1E810            <1> 	shr eax,16
   236 000000FA A2[C403]            <1> 	mov [gdt4 + 4],al
   237 000000FD A2[CC03]            <1> 	mov [gdt5 + 4],al
   238 00000100 A2[D403]            <1> 	mov [gdtv8086 + 4],al
   239 00000103 A2[DC03]            <1> 	mov [gdtv80862 + 4],al
   240 00000106 8826[C703]          <1> 	mov [gdt4 + 7],ah
   241 0000010A 8826[CF03]          <1> 	mov [gdt5 + 7],ah
   242 0000010E 8826[D703]          <1> 	mov [gdtv8086 + 7],ah
   243 00000112 8826[DF03]          <1> 	mov [gdtv80862 + 7],ah
   244                              <1> 	
   245 00000116 66B800004000        <1> 	mov eax, dosprogloc
   246 0000011C 660306[4F02]        <1> 	add eax, [newcodecache]
   247 00000121 A3[E203]            <1> 	mov [gdtdos + 2],ax
   248 00000124 A3[EA03]            <1> 	mov [gdtdos2 + 2],ax
   249 00000127 66C1E810            <1> 	shr eax,16
   250 0000012B A2[E403]            <1> 	mov [gdtdos + 4],al
   251 0000012E A2[EC03]            <1> 	mov [gdtdos2 + 4],al
   252 00000131 8826[E703]          <1> 	mov [gdtdos + 7],ah
   253 00000135 8826[EF03]          <1> 	mov [gdtdos2 + 7],ah
   254                              <1> 	
   255                              <1> ; fix up gdt and idt
   256 00000139 67668D83[98030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   257 00000141 66A3[8E03]          <1> 	mov [gdtr + 2],eax
   258 00000145 67668D83[F0030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   259 0000014D 66A3[9403]          <1> 	mov [idtr + 2],eax
   260 00000151 FA                  <1> 	cli
   261 00000152 0F0116[8C03]        <1> 	lgdt [gdtr]
   262 00000157 0F011E[9203]        <1> 	lidt [idtr]
   263 0000015C 6631DB              <1> 	xor ebx, ebx
   264 0000015F 8CDB                <1> 	mov bx, ds
   265 00000161 66891E[4B02]        <1> 	mov [basecache], ebx
   266 00000166 0F20C0              <1> 	mov eax,cr0
   267 00000169 0C01                <1> 	or al,1
   268 0000016B 0F22C0              <1> 	mov cr0,eax
   269 0000016E EA[7301]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   270                              <1> [BITS 32]
   271                              <1> do_pm:
   272 00000173 31C0                <1> 	xor eax, eax
   273 00000175 66B82000            <1> 	mov ax, SYS_DATA_SEL
   274 00000179 8ED8                <1> 	mov ds, ax
   275 0000017B 8EC0                <1> 	mov es, ax
   276 0000017D 8EE0                <1> 	mov fs, ax
   277 0000017F 66B83000            <1> 	mov ax, NEW_DATA_SEL
   278 00000183 8EE8                <1> 	mov gs, ax
   279                              <1> 	
   280                              <1> copykernel:
   281 00000185 648B06              <1> 	mov eax, [fs:esi]
   282 00000188 658906              <1> 	mov [gs:esi], eax
   283 0000018B 81C604000000        <1> 	add esi, 4
   284 00000191 81FE[008E0300]      <1> 	cmp esi, bsscopy
   285 00000197 72EC                <1> 	jb copykernel
   286 00000199 EA[A0010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   287                              <1> 	
   288                              <1> done_copy:
   289 000001A0 66B83000            <1> 	mov ax, NEW_DATA_SEL	;these MUST be setup AFTER the kernel switches places!!!
   290 000001A4 8ED8                <1> 	mov ds, ax
   291 000001A6 8EC0                <1> 	mov es, ax
   292 000001A8 8EE0                <1> 	mov fs, ax
   293                              <1> 	;mov ax, STACK_SEL
   294 000001AA 8ED0                <1> 	mov ss, ax
   295 000001AC BC[00AE0300]        <1> 	mov esp, stackend
   296 000001B1 66B82000            <1> 	mov ax, SYS_DATA_SEL
   297 000001B5 8EE8                <1> 	mov gs, ax
   298                              <1> 	
   299 000001B7 E8BE620000          <1> 	call initialize	;initialize drivers
   300                              <1> 	
   301 000001BC A1[4F020000]        <1> 	mov eax, [newcodecache]
   302 000001C1 C1E804              <1> 	shr eax, 4
   303 000001C4 A3[4B020000]        <1> 	mov [basecache], eax
   304                              <1> 	
   305 000001C9 BE[3CB64D00]        <1> 	mov esi, bssend
   306 000001CE 31C0                <1> 	xor eax, eax
   307                              <1> clearkernelbuffers:
   308 000001D0 8906                <1> 	mov [esi], eax
   309 000001D2 81EE04000000        <1> 	sub esi, 4
   310 000001D8 81FE[008E0300]      <1> 	cmp esi, bsscopy
   311 000001DE 77F0                <1> 	ja clearkernelbuffers
   312 000001E0 FB                  <1> 	sti
   313                              <1> 
   314                              <1> getmemoryspace:
   315 000001E1 BE[EF890000]        <1> 	mov esi, memlistbuf
   316 000001E6 31FF                <1> 	xor edi, edi
   317 000001E8 668B3D[2F8C0000]    <1> 	mov di, [memlistend]
   318 000001EF 01F7                <1> 	add edi, esi
   319 000001F1 31C0                <1> 	xor eax, eax
   320                              <1> memoryspaceaddition:
   321 000001F3 39FE                <1> 	cmp esi, edi
   322 000001F5 7325                <1> 	jae finishedmemspacecalc
   323 000001F7 81C608000000        <1> 	add esi, 8
   324 000001FD 8B0E                <1> 	mov ecx, [esi]
   325 000001FF 81C608000000        <1> 	add esi, 8
   326 00000205 8B1E                <1> 	mov ebx, [esi]
   327 00000207 81C608000000        <1> 	add esi, 8
   328 0000020D 81FB01000000        <1> 	cmp ebx, 1
   329 00000213 75DE                <1> 	jne memoryspaceaddition
   330 00000215 01C8                <1> 	add eax, ecx
   331 00000217 E9D7FFFFFF          <1> 	jmp memoryspaceaddition
   332                              <1> finishedmemspacecalc:
   333 0000021C A3[60020000]        <1> 	mov [memoryspace], eax
   334                              <1> %ifdef gui.included
   335 00000221 803D[D9890000]00    <1> 	cmp byte [guion], 0
   336 00000228 741C                <1> 	je normalstartup
   337 0000022A 8B1D[4B020000]      <1> 	mov ebx, [basecache]
   338 00000230 C1E304              <1> 	shl ebx, 4
   339 00000233 8B3D[25580000]      <1> 	mov edi, [physbaseptr]
   340 00000239 29DF                <1> 	sub edi, ebx
   341 0000023B 893D[25580000]      <1> 	mov [physbaseptr], edi
   342 00000241 E94D680000          <1> 	jmp guiboot
   343                              <1> %endif
   344                              <1> normalstartup:
   345 00000246 E961290000          <1> 	jmp os
   346                              <1> 	
   347 0000024B 00000000            <1> basecache dd 0
   348 0000024F 00001000            <1> newcodecache dd 0x100000
   349                              <1> 
   350 00000253 00                  <1> testingcpuspeed db 0
   351 00000254 00000000            <1> cpuspeedperint dd 0
   352 00000258 0000000000000000    <1> cpuclocksperint dd 0,0
   353 00000260 00000000            <1> memoryspace dd 0
   354 00000264 7D0A                <1> pitdiv dw 2685
   355 00000266 2E562200            <1> timeinterval dd 2250286
   356                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   357                              <1> ;for the pit, note that div=1 gives 838.09ns, the clock runs at 1.193182 MHz
   358                              <1> ;div=451 is 377981.0004, div=902 is 755962.0008,
   359                              <1> ;div=2685 is 2250286.00004ns, div=5370 is 4500572.00007ns
   360                              <1> ;div=55483 is 46500044.000006ns
   361                              <1> ;use one of those values for the minimum error
   362                              <1> 
   363 0000026A 00                  <1> ticks db 0
   364 0000026B 00000000            <1> timeseconds dd 0
   365 0000026F 00000000            <1> timenanoseconds dd 0
   366 00000273 00                  <1> soundon db 0
   367 00000274 0000                <1> soundrepititions dw 0
   368 00000276 00000000            <1> soundpos dd 0
   369 0000027A 00000000            <1> soundendpos dd 0
   370                              <1> 
   371                              <1> cpuspeedend:
   372 0000027E C605[53020000]00    <1> 	mov byte [testingcpuspeed], 0
   373 00000285 A3[54020000]        <1> 	mov [cpuspeedperint], eax
   374 0000028A B8[87510000]        <1> 	mov eax, cpuspeedloopend
   375 0000028F 890424              <1> 	mov [esp], eax
   376 00000292 E9E5000000          <1> 	jmp handled
   377                              <1> 
   378                              <1> pitinterrupt: ;this controls threading
   379 00000297 803D[53020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   380 0000029E 74DE                <1> 	je cpuspeedend
   381                              <1> 
   382 000002A0 E8B1000000          <1> 	call timekeeper ;this updates the internal time
   383                              <1> 	
   384 000002A5 803D[73020000]01    <1> 	cmp byte [soundon], 1
   385 000002AC 0F8457590000        <1> 	je near PCSpeakerRAW
   386                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   387                              <1> %ifdef threads.included
   388 000002B2 803D[8E6A0000]01    <1> 	cmp byte [threadson], 1
   389 000002B9 0F8471670000        <1> 	je near threadswitch
   390                              <1> %endif
   391                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   392 000002BF 803D[8E6A0000]00    <1> 	cmp byte [threadson], 0
   393 000002C6 0F84B0000000        <1> 	je near handled
   394                              <1> %ifdef io.serial
   395                              <1> 	jmp handled
   396                              <1> %else
   397                              <1> 	;inc byte [ticks] ;every 256 ticks, check for keys
   398                              <1> 	;jnz near handled
   399                              <1> 	
   400 000002CC 60                  <1> 	pusha
   401 000002CD E464                <1> 	in al, 64h
   402 000002CF A820                <1> 	test al, 20h
   403 000002D1 0F85A4000000        <1> 	jnz near handled2
   404 000002D7 E460                <1> 	in al, 60h
   405 000002D9 3C01                <1> 	cmp al, 1		;escape
   406 000002DB 7405                <1> 	je userint
   407 000002DD E999000000          <1> 	jmp handled2
   408                              <1> ;	cmp al, 0x57
   409                              <1> ;	jne near handled2
   410                              <1> ;pauseint:	;F11 pauses
   411                              <1> ;	in al, 64h
   412                              <1> ;	test al, 20h
   413                              <1> ;	jnz pauseint
   414                              <1> ;	in al, 60h
   415                              <1> ;	cmp al, 0xD7
   416                              <1> ;	jne pauseint
   417                              <1> ;	mov esi, pausemsg
   418                              <1> ;	call print
   419                              <1> ;pauselp:
   420                              <1> ;	in al, 64h
   421                              <1> ;	test al, 20h
   422                              <1> ;	jnz pauselp
   423                              <1> ;	in al, 60h
   424                              <1> ;	cmp al, 0x57
   425                              <1> ;	je near handled2
   426                              <1> ;	jmp pauselp
   427                              <1> ;pausemsg db "Paused",10,0
   428                              <1> userint:
   429 000002E2 31C0                <1> 	xor eax, eax
   430 000002E4 3905[04AE0300]      <1> 	cmp [sigtable], eax
   431 000002EA 7410                <1> 	je .nosighook
   432 000002EC 8B1D[04AE0300]      <1> 	mov ebx, [sigtable]
   433 000002F2 895C2420            <1> 	mov [esp + 32], ebx
   434                              <1> ;	mov [sigtable], eax
   435 000002F6 B020                <1> 	mov al, 0x20
   436 000002F8 E620                <1> 	out 0x20, al
   437 000002FA 61                  <1> 	popa
   438 000002FB CF                  <1> 	iret
   439                              <1> .nosighook:
   440                              <1> 		;UNMASK ALL INTS
   441 000002FC E621                <1> 	out 0x21, al
   442 000002FE E6A1                <1> 	out 0xA1, al
   443 00000300 B020                <1> 	mov al, 0x20
   444 00000302 E6A0                <1> 	out 0xA0, al
   445 00000304 E620                <1> 	out 0x20, al
   446                              <1> 		;RESET PIT DIVISOR
   447 00000306 66A1[64020000]      <1> 	mov ax, [pitdiv]
   448 0000030C E640                <1> 	out 0x40, al
   449 0000030E 66C1C008            <1> 	rol ax, 8
   450 00000312 E640                <1> 	out 0x40, al
   451                              <1> 		;RESET PIC
   452 00000314 B020                <1> 	mov al, 0x20
   453 00000316 E620                <1> 	out 0x20, al
   454 00000318 61                  <1> 	popa
   455 00000319 CC                  <1> 	int3
   456 0000031A 5D                  <1> 	pop ebp
   457 0000031B 5D                  <1> 	pop ebp
   458 0000031C 9D                  <1> 	popf
   459 0000031D BC[00AE0300]        <1> 	mov esp, stackend ;reset stack
   460 00000322 E9E5290000          <1> 	jmp returnfromexp
   461                              <1> %endif
   462 00000327 0A                  <1> rtcrate db 10
   463                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   464                              <1> %ifdef io.serial
   465                              <1> %else
   466                              <1> %ifdef terminal.vsync
   467 00000328 803D[23290000]00    <1> 	cmp byte [termcopyneeded], 0
   468 0000032F 7405                <1> 	je .nocopy
   469 00000331 E8F6250000          <1> 	call newtermcopy
   470                              <1> .nocopy:
   471 00000336 50                  <1> 	push eax
   472 00000337 B00C                <1> 	mov al, 0xC
   473 00000339 E670                <1> 	out 0x70, al
   474 0000033B E471                <1> 	in al, 0x71
   475 0000033D 58                  <1> 	pop eax
   476                              <1> %endif
   477                              <1> %endif
   478 0000033E E940000000          <1> 	jmp handledboth
   479                              <1> %ifdef rtl8139.included
   480                              <1> nextpacket dd rbuffstart
   481                              <1> rtl8139.irq:
   482                              <1> 	pusha
   483                              <1> 	mov dx, [rtl8139.basenicaddr]
   484                              <1> 	add dx, rtl8139.ISR
   485                              <1> 	xor eax, eax
   486                              <1> 	in ax, dx
   487                              <1> 	out dx, ax
   488                              <1> 	test ax, 1
   489                              <1> 	jz  near .norec
   490                              <1> 	mov esi, packetrecvmsg
   491                              <1> 	call print
   492                              <1> 	mov esi, [nextpacket]
   493                              <1> 	cmp esi, rbuffend
   494                              <1> 	jb .goodesi
   495                              <1> 	mov esi, rbuffstart
   496                              <1> .goodesi:
   497                              <1> 	mov ecx, esi
   498                              <1> 	sub ecx, rbuffstart
   499                              <1> 	call showhex
   500                              <1> 	mov ecx, [esi]
   501                              <1> 	test ecx, 1
   502                              <1> 	jz .notgood
   503                              <1> 	call showhex
   504                              <1> 	add esi, 4
   505                              <1> 	xor edi, edi
   506                              <1> 	mov di, [esi - 2]
   507                              <1> 	mov ecx, edi
   508                              <1> 	add edi, esi
   509                              <1> 	sub ecx, 4
   510                              <1> 	call showdec
   511                              <1> 
   512                              <1> 	mov ecx, edi
   513                              <1> 	sub ecx, rbuffstart
   514                              <1> 	add ecx, 3
   515                              <1> 	shr ecx, 2
   516                              <1> 	shl ecx, 2
   517                              <1> 	call showhex
   518                              <1> .notgood	
   519                              <1> 	mov  dx, [rtl8139.basenicaddr]
   520                              <1> 	add dx, rtl8139.CBR
   521                              <1> 	xor eax, eax
   522                              <1> 	in ax, dx
   523                              <1> 	mov ecx, eax
   524                              <1> 	call showhex
   525                              <1> 	
   526                              <1> 	mov dx, [rtl8139.basenicaddr]
   527                              <1> 	add dx, rtl8139.CAPR
   528                              <1> 	out dx, ax
   529                              <1> 	
   530                              <1> 	add eax, rbuffstart
   531                              <1> 	mov [nextpacket], eax
   532                              <1> 	
   533                              <1> ;	int3
   534                              <1> ;.lp:
   535                              <1> ;	mov cl, [esi]
   536                              <1> ;	call showhexsmall
   537                              <1> ;	inc esi
   538                              <1> ;	cmp esi, [nextpacket]
   539                              <1> ;	jb .lp
   540                              <1> ;	mov ecx, [esi]
   541                              <1> ;	call showhex
   542                              <1> ;	call printline
   543                              <1> .norec:
   544                              <1> 	popa
   545                              <1> 	jmp handledboth
   546                              <1> packetrecvmsg db 10,"Packet: ",0
   547                              <1> %endif
   548                              <1> %ifdef sound.included
   549                              <1> sblaster.irq:
   550 00000343 60                  <1> 	pusha
   551 00000344 803D[F95E0000]01    <1> 	cmp byte [SoundBlaster], 1
   552 0000034B 0F84A2590000        <1> 	je near sblaster.cont
   553 00000351 E925000000          <1> 	jmp handled2
   554                              <1> %endif
   555                              <1> 	
   556                              <1> timekeeper:
   557 00000356 50                  <1> 	push eax
   558 00000357 A1[6F020000]        <1> 	mov eax, [timenanoseconds]
   559 0000035C 0305[66020000]      <1> 	add eax, [timeinterval]
   560 00000362 3D00CA9A3B          <1> 	cmp eax, 1000000000
   561 00000367 720B                <1> 	jb nonanosecondrollover
   562 00000369 FF05[6B020000]      <1> 	inc dword [timeseconds]
   563 0000036F 2D00CA9A3B          <1> 	sub eax, 1000000000
   564                              <1> 	%ifdef gui.time
   565                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   566                              <1> 		cmp byte [guion], 1
   567                              <1> 		jne nonanosecondrollover
   568                              <1> 		cmp dword [dragging], 0
   569                              <1> 		jne nonanosecondrollover
   570                              <1> 		pusha
   571                              <1> 		call guitime
   572                              <1> 		popa
   573                              <1> 	%endif
   574                              <1> nonanosecondrollover:
   575 00000374 A3[6F020000]        <1> 	mov [timenanoseconds], eax
   576 00000379 58                  <1> 	pop eax
   577 0000037A C3                  <1> 	ret
   578                              <1> 	
   579                              <1> handled2:
   580 0000037B 61                  <1> 	popa
   581                              <1> handled:
   582 0000037C 50                  <1> 	push eax
   583 0000037D B020                <1> 	mov al, 0x20
   584 0000037F E620                <1> 	out 0x20, al
   585 00000381 58                  <1> 	pop eax
   586 00000382 CF                  <1> 	iret
   587                              <1> handledboth:
   588 00000383 50                  <1> 	push eax
   589 00000384 B020                <1> 	mov al, 0x20
   590 00000386 E6A0                <1> 	out 0xA0, al
   591 00000388 E620                <1> 	out 0x20, al
   592 0000038A 58                  <1> 	pop eax
   593 0000038B CF                  <1> 	iret
   594                              <1> 	
   595                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   596 0000038C 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   597 0000038E 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   598                              <1> 
   599 00000392 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   600 00000394 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   601                              <1> 
   602                              <1> 
   603 00000398 0000                <1> gdt:	dw 0			; limit 15:0
   604 0000039A 0000                <1> 	dw 0			; base 15:0
   605 0000039C 00                  <1> 	db 0			; base 23:16
   606 0000039D 00                  <1> 	db 0			; type
   607 0000039E 00                  <1> 	db 0			; limit 19:16, flags
   608 0000039F 00                  <1> 	db 0			; base 31:24
   609                              <1> ; linear data segment descriptor
   610                              <1> LINEAR_SEL	equ	$-gdt
   611 000003A0 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   612 000003A2 0000                <1> 	dw 0			; base for this one is always 0
   613 000003A4 00                  <1> 	db 0
   614 000003A5 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   615 000003A6 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   616 000003A7 00                  <1> 	db 0
   617                              <1> STACK_SEL	equ $-gdt
   618 000003A8 0200                <1> gdts:	dw 2;(stackend)/4096
   619 000003AA 0000                <1> 	dw 0
   620 000003AC 00                  <1> 	db 0
   621 000003AD 92                  <1> 	db 0x92
   622 000003AE CF                  <1> 	db 0xCF
   623 000003AF 00                  <1> 	db 0
   624                              <1> ; code segment descriptor
   625                              <1> SYS_CODE_SEL	equ	$-gdt
   626 000003B0 FFFF                <1> gdt2:	dw 0xFFFF
   627 000003B2 0000                <1> 	dw 0			; (base gets set above)
   628 000003B4 00                  <1> 	db 0
   629 000003B5 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   630 000003B6 CF                  <1> 	db 0xCF
   631 000003B7 00                  <1> 	db 0
   632                              <1> ; data segment descriptor
   633                              <1> SYS_DATA_SEL	equ	$-gdt
   634 000003B8 FFFF                <1> gdt3:	dw 0xFFFF
   635 000003BA 0000                <1> 	dw 0			; (base gets set above)
   636 000003BC 00                  <1> 	db 0
   637 000003BD 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   638 000003BE CF                  <1> 	db 0xCF
   639 000003BF 00                  <1> 	db 0
   640                              <1> NEW_CODE_SEL	equ	$-gdt
   641 000003C0 FFFF                <1> gdt4:	dw 0xFFFF
   642 000003C2 0000                <1> 	dw 0			; (base gets set above)
   643 000003C4 00                  <1> 	db 0
   644 000003C5 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   645 000003C6 CF                  <1> 	db 0xCF
   646 000003C7 00                  <1> 	db 0
   647                              <1> ; data segment descriptor
   648                              <1> NEW_DATA_SEL	equ	$-gdt
   649 000003C8 FFFF                <1> gdt5:	dw 0xFFFF
   650 000003CA 0000                <1> 	dw 0			; (base gets set above)
   651 000003CC 00                  <1> 	db 0
   652 000003CD 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   653 000003CE CF                  <1> 	db 0xCF
   654 000003CF 00                  <1> 	db 0
   655                              <1> V8086_CODE_SEL	equ $-gdt
   656 000003D0 FFFF                <1> gdtv8086: dw 0xFFFF
   657 000003D2 0000                <1> 	dw 0
   658 000003D4 00                  <1> 	db 0
   659 000003D5 9A                  <1> 	db 0x9A
   660 000003D6 8F                  <1> 	db 0x8F
   661 000003D7 00                  <1> 	db 0
   662                              <1> V8086_DATA_SEL	equ $-gdt
   663 000003D8 FFFF                <1> gdtv80862: dw 0xFFFF
   664 000003DA 0000                <1> 	dw 0
   665 000003DC 00                  <1> 	db 0
   666 000003DD 92                  <1> 	db 0x92
   667 000003DE 8F                  <1> 	db 0x8F
   668 000003DF 00                  <1> 	db 0
   669                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   670 000003E0 0001                <1> gdtdos:	dw 256	;give it 1 MB
   671 000003E2 0000                <1> 	dw 0
   672 000003E4 00                  <1> 	db 0
   673 000003E5 9A                  <1> 	db 0x9A
   674 000003E6 8F                  <1> 	db 0x8F ;16 bit
   675 000003E7 00                  <1> 	db 0
   676                              <1> DOS_DATA_SEL 	equ $-gdt
   677 000003E8 0001                <1> gdtdos2:	dw 256
   678 000003EA 0000                <1> 	dw 0
   679 000003EC 00                  <1> 	db 0
   680 000003ED 92                  <1> 	db 0x92
   681 000003EE 8F                  <1> 	db 0x8F ;16 bit
   682 000003EF 00                  <1> 	db 0
   683                              <1> gdt_end:
   684                              <1> 
   685                              <1> ;	interrupt descriptor table (IDT)
   686                              <1> ; 32 reserved interrupts:
   687                              <1> idt:	
   688                              <1> %assign i 0
   689                              <1> %rep    8
   690                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   691                              <1> %assign i i+1
   692                              <1> %endrep
   693 000003F0 [080D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   694                              <2> %assign i i+1
   695 000003F8 [140D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   696                              <2> %assign i i+1
   697 00000400 [200D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   698                              <2> %assign i i+1
   699 00000408 [2C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   700                              <2> %assign i i+1
   701 00000410 [380D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   702                              <2> %assign i i+1
   703 00000418 [440D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   704                              <2> %assign i i+1
   705 00000420 [500D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   706                              <2> %assign i i+1
   707 00000428 [5C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   708                              <2> %assign i i+1
   709 00000430 [680D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   710                              <1> %assign i 9
   711                              <1> %rep    23
   712                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   713                              <1> %assign i i+1
   714                              <1> %endrep
   715 00000438 [740D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i i+1
   717 00000440 [800D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i i+1
   719 00000448 [8C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i i+1
   721 00000450 [980D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i i+1
   723 00000458 [A40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i i+1
   725 00000460 [B00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i i+1
   727 00000468 [BC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i i+1
   729 00000470 [C80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i i+1
   731 00000478 [D40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i i+1
   733 00000480 [E00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i i+1
   735 00000488 [EC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i i+1
   737 00000490 [F80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i i+1
   739 00000498 [040E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   740                              <2> %assign i i+1
   741 000004A0 [100E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   742                              <2> %assign i i+1
   743 000004A8 [1C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   744                              <2> %assign i i+1
   745 000004B0 [280E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   746                              <2> %assign i i+1
   747 000004B8 [340E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   748                              <2> %assign i i+1
   749 000004C0 [400E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   750                              <2> %assign i i+1
   751 000004C8 [4C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   752                              <2> %assign i i+1
   753 000004D0 [580E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   754                              <2> %assign i i+1
   755 000004D8 [640E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   756                              <2> %assign i i+1
   757 000004E0 [700E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   758                              <2> %assign i i+1
   759 000004E8 [7C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   760                              <2> %assign i i+1
   761 000004F0 [622A]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0 ;dos ints
   762 000004F8 [662A]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   763                              <1> %assign i 0x22
   764                              <1> %rep 14
   765                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   766                              <1> %assign i +1
   767                              <1> %endrep
   768 00000500 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 00000508 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772 00000510 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   773                              <2> %assign i +1
   774 00000518 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   775                              <2> %assign i +1
   776 00000520 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   777                              <2> %assign i +1
   778 00000528 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   779                              <2> %assign i +1
   780 00000530 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   781                              <2> %assign i +1
   782 00000538 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   783                              <2> %assign i +1
   784 00000540 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   785                              <2> %assign i +1
   786 00000548 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   787                              <2> %assign i +1
   788 00000550 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   789                              <2> %assign i +1
   790 00000558 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   791                              <2> %assign i +1
   792 00000560 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   793                              <2> %assign i +1
   794 00000568 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   795                              <2> %assign i +1
   796                              <1> ;INT 30h for os use and 3rd party use:
   797 00000570 [0A1C]2800008E0000  <1> 		dw int30h,NEW_CODE_SEL,0x8E00,0
   798                              <1> %assign i 0x31
   799                              <1> %rep 15
   800                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   801                              <1> %assign i +1
   802                              <1> %endrep
   803 00000578 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   804                              <2> %assign i +1
   805 00000580 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   806                              <2> %assign i +1
   807 00000588 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   808                              <2> %assign i +1
   809 00000590 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   810                              <2> %assign i +1
   811 00000598 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   812                              <2> %assign i +1
   813 000005A0 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   814                              <2> %assign i +1
   815 000005A8 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   816                              <2> %assign i +1
   817 000005B0 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   818                              <2> %assign i +1
   819 000005B8 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   820                              <2> %assign i +1
   821 000005C0 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   822                              <2> %assign i +1
   823 000005C8 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   824                              <2> %assign i +1
   825 000005D0 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   826                              <2> %assign i +1
   827 000005D8 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   828                              <2> %assign i +1
   829 000005E0 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   830                              <2> %assign i +1
   831 000005E8 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   832                              <2> %assign i +1
   833                              <1> ;and here we are at 0x40
   834                              <1> ;here are all the irq's
   835 000005F0 [9702]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   836 000005F8 [7C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   837 00000600 [7C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   838 00000608 [7C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   839 00000610 [7C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   840                              <1> 	%ifdef sound.included
   841 00000618 [4303]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   842                              <1> 	%else
   843                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   844                              <1> 	%endif
   845 00000620 [7C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   846 00000628 [7C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   847 00000630 [2803]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   848 00000638 [8303]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   849 00000640 [8303]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   850                              <1> 	%ifdef rtl8139.included
   851                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   852                              <1> 	%else
   853 00000648 [8303]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   854                              <1> 	%endif
   855 00000650 [8303]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   856 00000658 [8303]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   857 00000660 [8303]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   858 00000668 [8303]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   859                              <1> ;This brings me up to 0x50
   860                              <1> %assign i 0x50
   861                              <1> %rep 176
   862                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   863                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   864                              <1> %assign i +1
   865                              <1> %endrep
   866 00000670 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 00000678 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 00000680 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 00000688 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 00000690 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 00000698 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 000006A0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 000006A8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 000006B0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 000006B8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 000006C0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 000006C8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 000006D0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 000006D8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 000006E0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 000006E8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 000006F0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 000006F8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 00000700 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 00000708 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 00000710 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 00000718 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 00000720 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 00000728 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 00000730 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 00000738 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 00000740 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 00000748 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 00000750 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 00000758 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 00000760 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 00000768 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 00000770 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 00000778 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 00000780 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 00000788 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 00000790 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 00000798 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 000007A0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 000007A8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 000007B0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 000007B8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 000007C0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 000007C8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 000007D0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 000007D8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 000007E0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 000007E8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 000007F0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 000007F8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 00000800 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 00000808 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 00000810 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 00000818 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000820 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 00000828 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 00000830 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 00000838 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 00000840 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 00000848 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 00000850 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 00000858 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 00000860 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 00000868 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 00000870 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 00000878 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 00000880 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 00000888 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 00000890 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 00000898 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 000008A0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 000008A8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 000008B0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 000008B8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 000008C0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 000008C8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 000008D0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 000008D8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 000008E0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 000008E8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 000008F0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 000008F8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000900 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 00000908 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 00000910 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 00000918 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000920 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 00000928 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 00000930 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 00000938 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 00000940 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 00000948 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 00000950 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 00000958 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 00000960 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 00000968 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 00000970 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 00000978 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 00000980 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 00000988 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 00000990 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 00000998 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 000009A0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 000009A8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 000009B0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 000009B8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 000009C0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 000009C8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 000009D0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 000009D8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 000009E0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 000009E8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 000009F0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 000009F8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000A00 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000A08 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000A10 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000A18 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000A20 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000A28 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000A30 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000A38 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000A40 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000A48 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000A50 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000A58 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000A60 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000A68 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000A70 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000A78 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000A80 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000A88 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000A90 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000A98 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000AA0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000AA8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000AB0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000AB8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000AC0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000AC8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286 00000AD0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1287                              <2> 
  1288                              <2> %assign i +1
  1289 00000AD8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1290                              <2> 
  1291                              <2> %assign i +1
  1292 00000AE0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1293                              <2> 
  1294                              <2> %assign i +1
  1295 00000AE8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1296                              <2> 
  1297                              <2> %assign i +1
  1298 00000AF0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1299                              <2> 
  1300                              <2> %assign i +1
  1301 00000AF8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1302                              <2> 
  1303                              <2> %assign i +1
  1304 00000B00 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1305                              <2> 
  1306                              <2> %assign i +1
  1307 00000B08 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1308                              <2> 
  1309                              <2> %assign i +1
  1310 00000B10 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1311                              <2> 
  1312                              <2> %assign i +1
  1313 00000B18 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1314                              <2> 
  1315                              <2> %assign i +1
  1316 00000B20 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1317                              <2> 
  1318                              <2> %assign i +1
  1319 00000B28 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1320                              <2> 
  1321                              <2> %assign i +1
  1322 00000B30 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1323                              <2> 
  1324                              <2> %assign i +1
  1325 00000B38 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1326                              <2> 
  1327                              <2> %assign i +1
  1328 00000B40 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1329                              <2> 
  1330                              <2> %assign i +1
  1331 00000B48 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1332                              <2> 
  1333                              <2> %assign i +1
  1334 00000B50 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1335                              <2> 
  1336                              <2> %assign i +1
  1337 00000B58 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1338                              <2> 
  1339                              <2> %assign i +1
  1340 00000B60 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1341                              <2> 
  1342                              <2> %assign i +1
  1343 00000B68 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1344                              <2> 
  1345                              <2> %assign i +1
  1346 00000B70 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1347                              <2> 
  1348                              <2> %assign i +1
  1349 00000B78 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1350                              <2> 
  1351                              <2> %assign i +1
  1352 00000B80 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1353                              <2> 
  1354                              <2> %assign i +1
  1355 00000B88 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1356                              <2> 
  1357                              <2> %assign i +1
  1358 00000B90 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1359                              <2> 
  1360                              <2> %assign i +1
  1361 00000B98 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1362                              <2> 
  1363                              <2> %assign i +1
  1364 00000BA0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1365                              <2> 
  1366                              <2> %assign i +1
  1367 00000BA8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1368                              <2> 
  1369                              <2> %assign i +1
  1370 00000BB0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1371                              <2> 
  1372                              <2> %assign i +1
  1373 00000BB8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1374                              <2> 
  1375                              <2> %assign i +1
  1376 00000BC0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1377                              <2> 
  1378                              <2> %assign i +1
  1379 00000BC8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1380                              <2> 
  1381                              <2> %assign i +1
  1382 00000BD0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1383                              <2> 
  1384                              <2> %assign i +1
  1385 00000BD8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1386                              <2> 
  1387                              <2> %assign i +1
  1388 00000BE0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1389                              <2> 
  1390                              <2> %assign i +1
  1391 00000BE8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1392                              <2> 
  1393                              <2> %assign i +1
  1394                              <1> idt_end:
  1395                                  	%include "source/realmode.asm"
  1396                              <1> realmode:	;make sure the real mode program's address is in realmodeptr
  1397                              <1> 
  1398 00000BF0 FA                  <1> 	cli
  1399 00000BF1 A3[FE0C0000]        <1> 	mov [realmodeeax], eax
  1400 00000BF6 891D[FA0C0000]      <1> 	mov [realmodeebx], ebx
  1401 00000BFC 8925[EC0C0000]      <1> 	mov [pmodeesp], esp
  1402                              <1> 
  1403 00000C02 BB[F60C0000]        <1> 	mov ebx, cr0old
  1404                              <1> rmcopytofirstmbyte:
  1405 00000C07 8B03                <1> 	mov eax, [ebx]
  1406 00000C09 658903              <1> 	mov [gs:ebx], eax
  1407 00000C0C 81C304000000        <1> 	add ebx, 4
  1408 00000C12 81FB[020D0000]      <1> 	cmp ebx, realmodeptr
  1409 00000C18 76ED                <1> 	jbe rmcopytofirstmbyte
  1410                              <1> 
  1411 00000C1A EA[210C0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1412                              <1> 
  1413                              <1> [BITS 16]
  1414                              <1> protected16bit:
  1415 00000C21 B84000              <1> 	mov ax, V8086_DATA_SEL
  1416 00000C24 8ED8                <1> 	mov ds, ax
  1417 00000C26 8EC0                <1> 	mov es, ax
  1418 00000C28 8EE0                <1> 	mov fs, ax
  1419 00000C2A 8EE8                <1> 	mov gs, ax
  1420 00000C2C 8ED0                <1> 	mov ss, ax
  1421 00000C2E 66BC[00AE0300]      <1> 	mov esp, stackend
  1422 00000C34 0F20C0              <1> 	mov eax, cr0
  1423 00000C37 66A3[F60C]          <1> 	mov [cr0old], eax
  1424 00000C3B 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1425 00000C41 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1426 00000C44 EA[490C]0010        <1> 	jmp 0x1000:inrealmode
  1427                              <1> 
  1428                              <1> inrealmode:
  1429 00000C49 8CC8                <1> 	mov ax, cs
  1430 00000C4B 8ED8                <1> 	mov ds, ax
  1431 00000C4D 8EC0                <1> 	mov es, ax
  1432 00000C4F 8EE0                <1> 	mov fs, ax
  1433 00000C51 8EE8                <1> 	mov gs, ax
  1434 00000C53 8ED0                <1> 	mov ss, ax
  1435 00000C55 BC[00AE]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1436                              <1> 	
  1437 00000C58 B011                <1> 	mov al, 0x11
  1438 00000C5A E620                <1> 	out 0x20, al
  1439 00000C5C E6A0                <1> 	out 0xA0, al
  1440 00000C5E B008                <1> 	mov al, 0x8		;interrupt for master
  1441 00000C60 E621                <1> 	out 0x21, al
  1442 00000C62 B070                <1> 	mov al, 0x70	;interrupt for slave
  1443 00000C64 E6A1                <1> 	out 0xA1, al
  1444 00000C66 B004                <1> 	mov al, 4
  1445 00000C68 E621                <1> 	out 0x21, al
  1446 00000C6A B002                <1> 	mov al, 2
  1447 00000C6C E6A1                <1> 	out 0xA1, al
  1448 00000C6E B001                <1> 	mov al, 0x1
  1449 00000C70 E621                <1> 	out 0x21, al
  1450 00000C72 B001                <1> 	mov al, 0x1
  1451 00000C74 E6A1                <1> 	out 0xA1, al
  1452                              <1> 	
  1453 00000C76 0F011E[F00C]        <1> 	lidt [idt_real]
  1454 00000C7B FB                  <1> 	sti
  1455                              <1> 
  1456 00000C7C 66A1[FE0C]          <1> 	mov eax, [realmodeeax]
  1457 00000C80 668B1E[FA0C]        <1> 	mov ebx, [realmodeebx]
  1458                              <1> 
  1459 00000C85 FF16[020D]          <1> 	call word [realmodeptr] ;call the real mode program here
  1460                              <1> 
  1461 00000C89 66A3[FE0C]          <1> 	mov [realmodeeax], eax
  1462 00000C8D 66891E[FA0C]        <1> 	mov [realmodeebx], ebx
  1463                              <1> 
  1464 00000C92 FA                  <1> 	cli
  1465 00000C93 0F0116[8C03]        <1> 	lgdt [gdtr]
  1466 00000C98 0F011E[9203]        <1> 	lidt [idtr]
  1467 00000C9D 0F20C0              <1> 	mov eax, cr0
  1468 00000CA0 0C01                <1> 	or al, 1
  1469 00000CA2 0F22C0              <1> 	mov cr0,eax
  1470 00000CA5 EA[AA0C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1471                              <1> 
  1472                              <1> [BITS 32]
  1473                              <1> returntopmode:
  1474 00000CAA 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1475 00000CAE 8ED8                <1> 	mov ds, ax
  1476 00000CB0 8EC0                <1> 	mov es, ax
  1477 00000CB2 8EE0                <1> 	mov fs, ax
  1478 00000CB4 8ED0                <1> 	mov ss, ax
  1479 00000CB6 8B25[EC0C0000]      <1> 	mov esp, [pmodeesp]
  1480 00000CBC 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1481 00000CC0 8EE8                <1> 	mov gs, ax
  1482                              <1> 
  1483 00000CC2 BB[F60C0000]        <1> 	mov ebx, cr0old
  1484                              <1> rmcopyfromfirstmbyte:
  1485 00000CC7 658B03              <1> 	mov eax, [gs:ebx]
  1486 00000CCA 8903                <1> 	mov [ebx], eax
  1487 00000CCC 81C304000000        <1> 	add ebx, 4
  1488 00000CD2 81FB[020D0000]      <1> 	cmp ebx, realmodeptr
  1489 00000CD8 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1490                              <1> 
  1491 00000CDA E8DE570000          <1> 	call initialize.pic ;reset irq's and masks
  1492 00000CDF FB                  <1> 	sti
  1493 00000CE0 A1[FE0C0000]        <1> 	mov eax, [realmodeeax]
  1494 00000CE5 8B1D[FA0C0000]      <1> 	mov ebx, [realmodeebx]
  1495 00000CEB C3                  <1> 	ret
  1496                              <1> 	
  1497 00000CEC 00000000            <1> pmodeesp dd 0
  1498                              <1> idt_real:
  1499 00000CF0 FF03                <1> 	dw 0x3FF
  1500 00000CF2 00000000            <1> 	dd 0
  1501 00000CF6 00000000            <1> cr0old dd 0
  1502 00000CFA 00000000            <1> realmodeebx dd 0
  1503 00000CFE 00000000            <1> realmodeeax dd 0
  1504 00000D02 0000                <1> realmodeptr dw 0
  1505 00000D04 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1506                                  [BITS 32]
  1507                                      %include "source/exception.asm"
  1508                              <1> %ifdef exceptions.included
  1509                              <1> unhand:	
  1510                              <1> 	%assign i 0
  1511                              <1> 	%rep 32
  1512                              <1> 	mov byte [intprob], i
  1513                              <1> 	jmp unhand2
  1514                              <1> 	%assign i i+1
  1515                              <1> 	%endrep
  1516 00000D08 C605[C3110000]00    <2>  mov byte [intprob], i
  1517 00000D0F E974010000          <2>  jmp unhand2
  1518                              <2>  %assign i i+1
  1519 00000D14 C605[C3110000]01    <2>  mov byte [intprob], i
  1520 00000D1B E968010000          <2>  jmp unhand2
  1521                              <2>  %assign i i+1
  1522 00000D20 C605[C3110000]02    <2>  mov byte [intprob], i
  1523 00000D27 E95C010000          <2>  jmp unhand2
  1524                              <2>  %assign i i+1
  1525 00000D2C C605[C3110000]03    <2>  mov byte [intprob], i
  1526 00000D33 E950010000          <2>  jmp unhand2
  1527                              <2>  %assign i i+1
  1528 00000D38 C605[C3110000]04    <2>  mov byte [intprob], i
  1529 00000D3F E944010000          <2>  jmp unhand2
  1530                              <2>  %assign i i+1
  1531 00000D44 C605[C3110000]05    <2>  mov byte [intprob], i
  1532 00000D4B E938010000          <2>  jmp unhand2
  1533                              <2>  %assign i i+1
  1534 00000D50 C605[C3110000]06    <2>  mov byte [intprob], i
  1535 00000D57 E92C010000          <2>  jmp unhand2
  1536                              <2>  %assign i i+1
  1537 00000D5C C605[C3110000]07    <2>  mov byte [intprob], i
  1538 00000D63 E920010000          <2>  jmp unhand2
  1539                              <2>  %assign i i+1
  1540 00000D68 C605[C3110000]08    <2>  mov byte [intprob], i
  1541 00000D6F E914010000          <2>  jmp unhand2
  1542                              <2>  %assign i i+1
  1543 00000D74 C605[C3110000]09    <2>  mov byte [intprob], i
  1544 00000D7B E908010000          <2>  jmp unhand2
  1545                              <2>  %assign i i+1
  1546 00000D80 C605[C3110000]0A    <2>  mov byte [intprob], i
  1547 00000D87 E9FC000000          <2>  jmp unhand2
  1548                              <2>  %assign i i+1
  1549 00000D8C C605[C3110000]0B    <2>  mov byte [intprob], i
  1550 00000D93 E9F0000000          <2>  jmp unhand2
  1551                              <2>  %assign i i+1
  1552 00000D98 C605[C3110000]0C    <2>  mov byte [intprob], i
  1553 00000D9F E9E4000000          <2>  jmp unhand2
  1554                              <2>  %assign i i+1
  1555 00000DA4 C605[C3110000]0D    <2>  mov byte [intprob], i
  1556 00000DAB E9D8000000          <2>  jmp unhand2
  1557                              <2>  %assign i i+1
  1558 00000DB0 C605[C3110000]0E    <2>  mov byte [intprob], i
  1559 00000DB7 E9CC000000          <2>  jmp unhand2
  1560                              <2>  %assign i i+1
  1561 00000DBC C605[C3110000]0F    <2>  mov byte [intprob], i
  1562 00000DC3 E9C0000000          <2>  jmp unhand2
  1563                              <2>  %assign i i+1
  1564 00000DC8 C605[C3110000]10    <2>  mov byte [intprob], i
  1565 00000DCF E9B4000000          <2>  jmp unhand2
  1566                              <2>  %assign i i+1
  1567 00000DD4 C605[C3110000]11    <2>  mov byte [intprob], i
  1568 00000DDB E9A8000000          <2>  jmp unhand2
  1569                              <2>  %assign i i+1
  1570 00000DE0 C605[C3110000]12    <2>  mov byte [intprob], i
  1571 00000DE7 E99C000000          <2>  jmp unhand2
  1572                              <2>  %assign i i+1
  1573 00000DEC C605[C3110000]13    <2>  mov byte [intprob], i
  1574 00000DF3 E990000000          <2>  jmp unhand2
  1575                              <2>  %assign i i+1
  1576 00000DF8 C605[C3110000]14    <2>  mov byte [intprob], i
  1577 00000DFF E984000000          <2>  jmp unhand2
  1578                              <2>  %assign i i+1
  1579 00000E04 C605[C3110000]15    <2>  mov byte [intprob], i
  1580 00000E0B E978000000          <2>  jmp unhand2
  1581                              <2>  %assign i i+1
  1582 00000E10 C605[C3110000]16    <2>  mov byte [intprob], i
  1583 00000E17 E96C000000          <2>  jmp unhand2
  1584                              <2>  %assign i i+1
  1585 00000E1C C605[C3110000]17    <2>  mov byte [intprob], i
  1586 00000E23 E960000000          <2>  jmp unhand2
  1587                              <2>  %assign i i+1
  1588 00000E28 C605[C3110000]18    <2>  mov byte [intprob], i
  1589 00000E2F E954000000          <2>  jmp unhand2
  1590                              <2>  %assign i i+1
  1591 00000E34 C605[C3110000]19    <2>  mov byte [intprob], i
  1592 00000E3B E948000000          <2>  jmp unhand2
  1593                              <2>  %assign i i+1
  1594 00000E40 C605[C3110000]1A    <2>  mov byte [intprob], i
  1595 00000E47 E93C000000          <2>  jmp unhand2
  1596                              <2>  %assign i i+1
  1597 00000E4C C605[C3110000]1B    <2>  mov byte [intprob], i
  1598 00000E53 E930000000          <2>  jmp unhand2
  1599                              <2>  %assign i i+1
  1600 00000E58 C605[C3110000]1C    <2>  mov byte [intprob], i
  1601 00000E5F E924000000          <2>  jmp unhand2
  1602                              <2>  %assign i i+1
  1603 00000E64 C605[C3110000]1D    <2>  mov byte [intprob], i
  1604 00000E6B E918000000          <2>  jmp unhand2
  1605                              <2>  %assign i i+1
  1606 00000E70 C605[C3110000]1E    <2>  mov byte [intprob], i
  1607 00000E77 E90C000000          <2>  jmp unhand2
  1608                              <2>  %assign i i+1
  1609 00000E7C C605[C3110000]1F    <2>  mov byte [intprob], i
  1610 00000E83 E900000000          <2>  jmp unhand2
  1611                              <2>  %assign i i+1
  1612                              <1> unhand2:
  1613 00000E88 FA                  <1> 	cli
  1614 00000E89 1E                  <1> 	push ds
  1615 00000E8A 06                  <1> 	push es
  1616 00000E8B 0FA0                <1> 	push fs
  1617 00000E8D 0FA8                <1> 	push gs
  1618 00000E8F 16                  <1> 	push ss
  1619 00000E90 60                  <1> 	pushad
  1620                              <1> %ifdef gui.included
  1621 00000E91 803D[D9890000]00    <1> 	cmp byte [guion], 0
  1622 00000E98 0F8432000000        <1> 	je near noguiunhandstuff
  1623 00000E9E 66C705[BD110000]08- <1> 	mov word [locunhandy], 8
  1624 00000EA6 00                  <1>
  1625 00000EA7 66C705[BF110000]08- <1> 	mov word [locunhandx], 8
  1626 00000EAF 00                  <1>
  1627 00000EB0 668B1D[FE710000]    <1> 	mov bx, [background]
  1628 00000EB7 66891D[C1110000]    <1> 	mov [backgroundcache], bx
  1629 00000EBE C605[01590000]01    <1> 	mov byte [mousedisabled],1
  1630 00000EC5 66BB00F8            <1> 	mov bx, 1111100000000000b
  1631 00000EC9 66891D[FE710000]    <1> 	mov [background], bx
  1632                              <1> noguiunhandstuff:
  1633                              <1> %endif
  1634 00000ED0 89E6                <1> 	mov esi, esp
  1635 00000ED2 8935[B1110000]      <1> 	mov [espfirst], esi
  1636 00000ED8 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1637 00000EDE 8935[AD110000]      <1> 	mov [esploc], esi
  1638 00000EE4 BE[D2110000]        <1> 	mov esi, unhandmsg
  1639 00000EE9 8935[B5110000]      <1> 	mov [esiloc], esi
  1640 00000EEF 31C9                <1> 	xor ecx, ecx
  1641 00000EF1 8A0D[C3110000]      <1> 	mov cl, [intprob]
  1642 00000EF7 BB[A1150000]        <1> 	mov ebx, errortypes
  1643 00000EFC C1E102              <1> 	shl ecx, 2
  1644 00000EFF 01CB                <1> 	add ebx, ecx
  1645 00000F01 81FB[E1150000]      <1> 	cmp ebx, errortypesend
  1646 00000F07 7205                <1> 	jb gooderrortype
  1647 00000F09 BB[E1150000]        <1> 	mov ebx, errortypesend
  1648                              <1> gooderrortype:
  1649 00000F0E 8B33                <1> 	mov esi, [ebx]
  1650                              <1> %ifdef gui.included
  1651 00000F10 803D[D9890000]00    <1> 	cmp byte [guion], 0
  1652 00000F17 0F842D000000        <1> 	je near errortext
  1653 00000F1D 668B0D[BD110000]    <1> 	mov cx, [locunhandy]
  1654 00000F24 668B15[BF110000]    <1> 	mov dx, [locunhandx]
  1655 00000F2B 66B80100            <1> 	mov ax, 1
  1656 00000F2F 6631DB              <1> 	xor bx, bx
  1657 00000F32 E836690000          <1> 	call showstring2
  1658 00000F37 66890D[BD110000]    <1> 	mov [locunhandy], cx
  1659 00000F3E 668915[BF110000]    <1> 	mov [locunhandx], dx
  1660 00000F45 E905000000          <1> 	jmp errortextdone
  1661                              <1> %endif
  1662                              <1> errortext:
  1663 00000F4A E8160E0000          <1> 	call print		;get the error message and print it
  1664                              <1> errortextdone:
  1665 00000F4F 31C9                <1> 	xor ecx, ecx
  1666 00000F51 8A0D[C3110000]      <1> 	mov cl, [intprob]
  1667 00000F57 E8EA010000          <1> 	call expdump
  1668                              <1> dumpstack:
  1669 00000F5C 8B35[AD110000]      <1> 	mov esi, [esploc]
  1670 00000F62 39E6                <1> 	cmp esi, esp
  1671 00000F64 7219                <1> 	jb donedump
  1672 00000F66 368B0E              <1> 	mov ecx, [ss:esi]
  1673 00000F69 81EE04000000        <1> 	sub esi, 4
  1674 00000F6F 8935[AD110000]      <1> 	mov [esploc], esi
  1675 00000F75 E8CC010000          <1> 	call expdump
  1676 00000F7A E9DDFFFFFF          <1> 	jmp dumpstack
  1677                              <1> donedump:
  1678 00000F7F 0F20C1              <1> 	mov ecx, cr0
  1679 00000F82 E8BF010000          <1> 	call expdump
  1680 00000F87 0F20D1              <1> 	mov ecx, cr2
  1681 00000F8A E8B7010000          <1> 	call expdump
  1682 00000F8F 0F20D9              <1> 	mov ecx, cr3
  1683 00000F92 E8AF010000          <1> 	call expdump
  1684 00000F97 0F20E1              <1> 	mov ecx, cr4
  1685 00000F9A E8A7010000          <1> 	call expdump
  1686 00000F9F 0F00C9              <1> 	str ecx
  1687 00000FA2 E89F010000          <1> 	call expdump
  1688 00000FA7 0F010D[CC110000]    <1> 	sidt [igdtcache]
  1689 00000FAE 8B0D[CE110000]      <1> 	mov ecx, [igdtcache + 2]
  1690 00000FB4 E88D010000          <1> 	call expdump
  1691 00000FB9 0F0105[CC110000]    <1> 	sgdt [igdtcache]
  1692 00000FC0 8B0D[CE110000]      <1> 	mov ecx, [igdtcache + 2]
  1693 00000FC6 E87B010000          <1> 	call expdump
  1694 00000FCB 0F00C1              <1> 	sldt ecx
  1695 00000FCE E873010000          <1> 	call expdump
  1696 00000FD3 8B35[AD110000]      <1> 	mov esi, [esploc]
  1697 00000FD9 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1698 00000FDE 81C710000000        <1> 	add edi, 16
  1699 00000FE4 893D[C8110000]      <1> 	mov [codelocend], edi
  1700 00000FEA 81EF20000000        <1> 	sub edi, 32
  1701                              <1> dumpcodeloop:
  1702 00000FF0 893D[C4110000]      <1> 	mov [codeloc], edi
  1703 00000FF6 8B0F                <1> 	mov ecx, [edi]
  1704 00000FF8 E849010000          <1> 	call expdump
  1705 00000FFD 8B3D[C4110000]      <1> 	mov edi, [codeloc]
  1706 00001003 81C704000000        <1> 	add edi, 4
  1707 00001009 3B3D[C8110000]      <1> 	cmp edi, [codelocend]
  1708 0000100F 72DF                <1> 	jb dumpcodeloop
  1709 00001011 BE[D7100000]        <1> 	mov esi, backtoosmsg
  1710                              <1> %ifdef gui.included
  1711 00001016 803D[D9890000]00    <1> 	cmp byte [guion], 0
  1712 0000101D 741F                <1> 	je backtomsg
  1713                              <1> guibacktomsg:
  1714 0000101F 668B15[BF110000]    <1> 	mov dx, [locunhandx]
  1715 00001026 668B0D[BD110000]    <1> 	mov cx, [locunhandy]
  1716 0000102D 66B80100            <1> 	mov ax, 1
  1717 00001031 6631DB              <1> 	xor bx, bx
  1718 00001034 E834680000          <1> 	call showstring2
  1719 00001039 E905000000          <1> 	jmp backtomsgdone
  1720                              <1> backtomsg:
  1721                              <1> %endif
  1722 0000103E E8220D0000          <1> 	call print
  1723                              <1> backtomsgdone:
  1724 00001043 30C0                <1> 	xor al, al
  1725 00001045 E839130000          <1> 	call rdcharint
  1726 0000104A 803D[C3110000]03    <1> 	cmp byte [intprob], 3
  1727 00001051 7541                <1> 	jne nodebugint
  1728                              <1> %ifdef gui.included
  1729 00001053 803D[D9890000]00    <1> 	cmp byte [guion], 0
  1730 0000105A 7427                <1> 	je nodebuggui
  1731 0000105C 668B1D[C1110000]    <1> 	mov bx, [backgroundcache]
  1732 00001063 66891D[FE710000]    <1> 	mov [background], bx
  1733 0000106A 6631DB              <1> 	xor bx, bx
  1734 0000106D C605[01590000]00    <1> 	mov byte [mousedisabled], 0
  1735 00001074 E8F6600000          <1> 	call guiclear
  1736 00001079 E884610000          <1> 	call reloadallgraphics
  1737 0000107E E898180000          <1> 	call termcopy
  1738                              <1> nodebuggui:
  1739                              <1> %endif
  1740 00001083 8B35[B1110000]      <1> 	mov esi, [espfirst]
  1741 00001089 89F4                <1> 	mov esp, esi
  1742 0000108B 61                  <1> 	popad
  1743 0000108C 17                  <1> 	pop ss
  1744 0000108D 0FA9                <1> 	pop gs
  1745 0000108F 0FA1                <1> 	pop fs
  1746 00001091 07                  <1> 	pop es
  1747 00001092 1F                  <1> 	pop ds
  1748 00001093 CF                  <1> 	iret
  1749                              <1> nodebugint:
  1750 00001094 61                  <1> 	popad
  1751 00001095 17                  <1> 	pop ss
  1752 00001096 0FA9                <1> 	pop gs
  1753 00001098 0FA1                <1> 	pop fs
  1754 0000109A 07                  <1> 	pop es
  1755 0000109B 1F                  <1> 	pop ds
  1756 0000109C 81C408000000        <1> 	add esp, 8
  1757                              <1> ;	popf ;pop the cs segment selector into eflags
  1758                              <1> ;	popf ;then pop the flags
  1759                              <1> %ifdef gui.included
  1760 000010A2 803D[D9890000]00    <1> 	cmp byte [guion], 0
  1761 000010A9 7427                <1> 	je returnunhandgui
  1762 000010AB 668B1D[C1110000]    <1> 	mov bx, [backgroundcache]
  1763 000010B2 66891D[FE710000]    <1> 	mov [background], bx
  1764 000010B9 6631DB              <1> 	xor bx, bx
  1765 000010BC C605[01590000]00    <1> 	mov byte [mousedisabled], 0
  1766 000010C3 E8A7600000          <1> 	call guiclear
  1767 000010C8 E835610000          <1> 	call reloadallgraphics
  1768 000010CD E849180000          <1> 	call termcopy
  1769                              <1> %endif
  1770                              <1> returnunhandgui:
  1771 000010D2 E9A71C0000          <1> 	jmp nwcmd
  1772 000010D7 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1773 000010E0 737420616E79207072- <1>
  1774 000010E9 6F626C656D7320696E- <1>
  1775 000010F2 207468652049737375- <1>
  1776 000010FB 65732073656374696F- <1>
  1777 00001104 6E20617420736F6C6C- <1>
  1778 0000110D 65726F732E676F6F67- <1>
  1779 00001116 6C65636F64652E636F- <1>
  1780 0000111F 6D0A                <1>
  1781 00001121 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1782 0000112A 206B657920746F2072- <1>
  1783 00001133 657475726E20746F20- <1>
  1784 0000113C 536F6C6C65724F530A- <1>
  1785 00001145 00                  <1>
  1786                              <1> expdump:
  1787 00001146 8B35[B5110000]      <1> 	mov esi, [esiloc]
  1788 0000114C 89F7                <1> 	mov edi, esi
  1789 0000114E 81C70F000000        <1> 	add edi, 15
  1790 00001154 81C604000000        <1> 	add esi, 4
  1791 0000115A 893D[B5110000]      <1> 	mov [esiloc], edi
  1792 00001160 81EF03000000        <1> 	sub edi, 3
  1793 00001166 E8AB200000          <1> 	call converthex
  1794 0000116B 81EE04000000        <1> 	sub esi, 4
  1795                              <1> %ifdef gui.included
  1796 00001171 803D[D9890000]00    <1> 	cmp byte [guion], 0
  1797 00001178 0F8429000000        <1> 	je near expdumptext
  1798 0000117E 668B0D[BD110000]    <1> 	mov cx, [locunhandy]
  1799 00001185 668B15[BF110000]    <1> 	mov dx, [locunhandx]
  1800 0000118C 66B80100            <1> 	mov ax, 1
  1801 00001190 6631DB              <1> 	xor bx, bx
  1802 00001193 E8D5660000          <1> 	call showstring2
  1803 00001198 66890D[BD110000]    <1> 	mov [locunhandy], cx
  1804 0000119F 668915[BF110000]    <1> 	mov [locunhandx], dx
  1805 000011A6 C3                  <1> 	ret
  1806                              <1> %endif
  1807                              <1> expdumptext:
  1808 000011A7 E8B90B0000          <1> 	call print
  1809 000011AC C3                  <1> 	ret
  1810 000011AD 00000000            <1> esploc dd 0
  1811 000011B1 00000000            <1> espfirst dd 0
  1812 000011B5 00000000            <1> esiloc dd 0
  1813 000011B9 00000000            <1> esiregbuf dd 0
  1814 000011BD 0100                <1> locunhandy dw 1
  1815 000011BF 0100                <1> locunhandx dw 1
  1816 000011C1 0000                <1> backgroundcache dw 0
  1817 000011C3 00                  <1> intprob db 0
  1818 000011C4 00000000            <1> codeloc dd 0
  1819 000011C8 00000000            <1> codelocend dd 0
  1820 000011CC 000000000000        <1> igdtcache dw 0,0,0
  1821                              <1> 	unhandmsg:	
  1822 000011D2 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1823 000011DB 303030FF0A00        <1>
  1824                              <1> unhndrg:
  1825 000011E1 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;this dumps the stack before the stack frame in question
  1826 000011EA 303030202000<rept>  <1>
  1827 0000124A FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1828 00001253 303030FF0A00        <1>
  1829 00001259 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1830 00001262 303030202000<rept>  <1>
  1831 000012C2 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1832 000012CB 303030FF0A00        <1>
  1833 000012D1 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1834 000012DA 303030202000<rept>  <1>
  1835 0000133A FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1836 00001343 303030FF0A00        <1>
  1837 00001349 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1838 00001352 303030202000<rept>  <1>
  1839 000013B2 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1840 000013BB 303030FF0A00        <1>
  1841                              <1> unhandregs:
  1842 000013C1 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1843 000013CA 303030202000        <1>
  1844 000013D0 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1845 000013D9 303030202000        <1>
  1846 000013DF 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1847 000013E8 303030FF0A00        <1>
  1848 000013EE 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1849 000013F7 303030202000        <1>
  1850 000013FD 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1851 00001406 303030202000        <1>
  1852 0000140C 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1853 00001415 303030202000        <1>
  1854 0000141B 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1855 00001424 303030202000        <1>
  1856 0000142A 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1857 00001433 303030FF0A00        <1>
  1858 00001439 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1859 00001442 303030202000        <1>
  1860 00001448 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1861 00001451 303030202000        <1>
  1862 00001457 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1863 00001460 303030202000        <1>
  1864 00001466 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1865 0000146F 303030FF0A00        <1>
  1866 00001475 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1867 0000147E 303030202000        <1>
  1868 00001484 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1869 0000148D 303030202000        <1>
  1870 00001493 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1871 0000149C 303030202000        <1>
  1872 000014A2 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1873 000014AB 303030FF0A00        <1>
  1874 000014B1 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1875 000014BA 303030202000        <1>
  1876 000014C0 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1877 000014C9 303030202000        <1>
  1878 000014CF 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1879 000014D8 303030202000        <1>
  1880 000014DE 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1881 000014E7 303030FF0A00        <1>
  1882 000014ED 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1883 000014F6 303030202000        <1>
  1884 000014FC 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1885 00001505 303030202000        <1>
  1886 0000150B 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1887 00001514 303030202000        <1>
  1888 0000151A 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1889 00001523 303030FF0A00        <1>
  1890 00001529 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;this dumps the code before and after the interrupt in question
  1891 00001532 303030202000<rept>  <1>
  1892 00001547 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1893 00001550 30303020FF00        <1>
  1894 00001556 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1895 0000155F 3030305D2000        <1>
  1896 00001565 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1897 0000156E 303030202000<rept>  <1>
  1898 00001592 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1899 0000159B 303030FF0A00        <1>
  1900                              <1> unhandmsgend:
  1901                              <1> 
  1902                              <1> errortypes:
  1903 000015A1 [E5150000]          <1> 			dd err0
  1904 000015A5 [4E160000]          <1> 			dd err1
  1905 000015A9 [AF160000]          <1> 			dd err2
  1906 000015AD [04170000]          <1> 			dd err3
  1907 000015B1 [68170000]          <1> 			dd err4
  1908 000015B5 [BA170000]          <1> 			dd err5
  1909 000015B9 [24180000]          <1> 			dd err6
  1910 000015BD [8C180000]          <1> 			dd err7
  1911 000015C1 [D6180000]          <1> 			dd err8
  1912 000015C5 [33190000]          <1> 			dd err9
  1913 000015C9 [8C190000]          <1> 			dd err10
  1914 000015CD [D7190000]          <1> 			dd err11
  1915 000015D1 [271A0000]          <1> 			dd err12
  1916 000015D5 [801A0000]          <1> 			dd err13
  1917 000015D9 [E31A0000]          <1> 			dd err14
  1918 000015DD [1F1B0000]          <1> 			dd err15
  1919                              <1> errortypesend:
  1920 000015E1 [AB1B0000]          <1> 			dd unknownerror
  1921                              <1> 			
  1922 000015E5 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1923 000015EE 6279207A65726F3A0A  <1>
  1924 000015F7 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1925 00001600 6C79206C696D2061C3- <1>
  1926 00001609 B778203D20E2889E20- <1>
  1927 00001612 7768656E2061206973- <1>
  1928 0000161B 20616E79207265616C- <1>
  1929 00001624 206E756D6265722E20- <1>
  1930 0000162D 486170707920456173- <1>
  1931 00001636 746572210A          <1>
  1932 0000163B 202020202020202020- <1> 		db "            x→0",10,0
  1933 00001644 20202078E28692300A- <1>
  1934 0000164D 00                  <1>
  1935                              <1> 		
  1936 0000164E 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1937 00001657 65702F427265616B70- <1>
  1938 00001660 6F696E743A0A        <1>
  1939 00001666 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1940 0000166F 696E74206661756C74- <1>
  1941 00001678 2C20627265616B706F- <1>
  1942 00001681 696E7420747261702C- <1>
  1943 0000168A 206F722073696E676C- <1>
  1944 00001693 652D73746570207472- <1>
  1945 0000169C 617020776173207472- <1>
  1946 000016A5 696767657265642E0A- <1>
  1947 000016AE 00                  <1>
  1948                              <1> 		
  1949 000016AF 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1950 000016B8 6C6520696E74657272- <1>
  1951 000016C1 7570743A0A          <1>
  1952 000016C6 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1953 000016CF 6520696E7465727275- <1>
  1954 000016D8 707420776173207472- <1>
  1955 000016E1 696767657265642074- <1>
  1956 000016EA 68617420636F756C64- <1>
  1957 000016F3 206E6F74206265206D- <1>
  1958 000016FC 61736B65642E0A00    <1>
  1959                              <1> 		
  1960 00001704 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1961 0000170D 743A0A              <1>
  1962 00001710 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1963 00001719 727275707420697320- <1>
  1964 00001722 7573656420696E2070- <1>
  1965 0000172B 726F6772616D732074- <1>
  1966 00001734 6F2073686F77207468- <1>
  1967 0000173D 6520737461636B2061- <1>
  1968 00001746 6E6420726567697374- <1>
  1969 0000174F 65727320616E642063- <1>
  1970 00001758 616E2062650A        <1>
  1971 0000175E 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1972 00001767 00                  <1>
  1973                              <1> 		
  1974 00001768 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1975 00001771 0A                  <1>
  1976 00001772 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1977 0000177B 73736F722072616E20- <1>
  1978 00001784 696E746F20616E2049- <1>
  1979 0000178D 4E544F20696E737472- <1>
  1980 00001796 756374696F6E207769- <1>
  1981 0000179F 746820746865206F76- <1>
  1982 000017A8 6572666C6F7720666C- <1>
  1983 000017B1 6167207365742E0A00  <1>
  1984                              <1> 		
  1985 000017BA 426F756E6473206368- <1> err5	db "Bounds check:",10
  1986 000017C3 65636B3A0A          <1>
  1987 000017C8 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1988 000017D1 73736F72207265626F- <1>
  1989 000017DA 756E6465642066726F- <1>
  1990 000017E3 6D206120424F554E44- <1>
  1991 000017EC 20696E737472756374- <1>
  1992 000017F5 696F6E2072756E206F- <1>
  1993 000017FE 6E20616E206F706572- <1>
  1994 00001807 616E64207468617420- <1>
  1995 00001810 776173206F75740A    <1>
  1996 00001818 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1997 00001821 2E0A00              <1>
  1998                              <1> 		
  1999 00001824 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  2000 0000182D 70636F64653A0A      <1>
  2001 00001834 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  2002 0000183D 73736F722068617320- <1>
  2003 00001846 6E6F20696465612077- <1>
  2004 0000184F 686174206974207761- <1>
  2005 00001858 7320747279696E6720- <1>
  2006 00001861 746F20657865637574- <1>
  2007 0000186A 652E20446F6E277420- <1>
  2008 00001873 72756E205353453420- <1>
  2009 0000187C 636F64650A          <1>
  2010 00001881 6F6E20343836277321- <1> 		db "on 486's!",10,0
  2011 0000188A 0A00                <1>
  2012                              <1> 		
  2013 0000188C 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  2014 00001895 6F72206E6F74206176- <1>
  2015 0000189E 61696C61626C653A0A  <1>
  2016 000018A7 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  2017 000018B0 206B6E6F7720746865- <1>
  2018 000018B9 7920646F6E2774206D- <1>
  2019 000018C2 616B652074686F7365- <1>
  2020 000018CB 20616E796D6F726521- <1>
  2021 000018D4 0A00                <1>
  2022                              <1> 		
  2023 000018D6 446F75626C65206661- <1> err8	db "Double fault:",10
  2024 000018DF 756C743A0A          <1>
  2025 000018E4 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  2026 000018ED 74696F6E2068616E64- <1>
  2027 000018F6 6C657220636F756C64- <1>
  2028 000018FF 206E6F742068616E64- <1>
  2029 00001908 6C6520746861742069- <1>
  2030 00001911 7420636F756C64206E- <1>
  2031 0000191A 6F742068616E646C65- <1>
  2032 00001923 20616E206578636570- <1>
  2033 0000192C 74696F6E2E0A00      <1>
  2034                              <1> 		
  2035 00001933 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  2036 0000193C 6F72207365676D656E- <1>
  2037 00001945 74206F76657272756E- <1>
  2038 0000194E 3A0A00              <1>
  2039 00001951 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  2040 0000195A 722068617070656E73- <1>
  2041 00001963 20696E206D6F646572- <1>
  2042 0000196C 6E20636F6D70757465- <1>
  2043 00001975 72732C20616E64206E- <1>
  2044 0000197E 657665722073686F75- <1>
  2045 00001987 6C642E0A00          <1>
  2046                              <1> 
  2047 0000198C 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  2048 00001995 53533A0A            <1>
  2049 00001999 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  2050 000019A2 686174207761732073- <1>
  2051 000019AB 776974636865642074- <1>
  2052 000019B4 6F20697320696E7661- <1>
  2053 000019BD 6C69642E204E6F7468- <1>
  2054 000019C6 696E672066756E6E79- <1>
  2055 000019CF 20686572652E0A00    <1>
  2056                              <1> 		
  2057 000019D7 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2058 000019E0 6F742070726573656E- <1>
  2059 000019E9 743A0A              <1>
  2060 000019EC 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2061 000019F5 6E7420626974206F66- <1>
  2062 000019FE 20746865207365676D- <1>
  2063 00001A07 656E74206465736372- <1>
  2064 00001A10 6970746F7220697320- <1>
  2065 00001A19 73657420746F207A65- <1>
  2066 00001A22 726F2E0A00          <1>
  2067                              <1> 		
  2068 00001A27 537461636B20657863- <1> err12	db "Stack exception:",10
  2069 00001A30 657074696F6E3A0A    <1>
  2070 00001A38 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2071 00001A41 7363726970746F7220- <1>
  2072 00001A4A 697320696E76616C69- <1>
  2073 00001A53 64206F72206E6F7420- <1>
  2074 00001A5C 70726573656E74206F- <1>
  2075 00001A65 7220697473206C696D- <1>
  2076 00001A6E 697420697320746F6F- <1>
  2077 00001A77 20736D616C6C2E0A00  <1>
  2078                              <1> 		
  2079 00001A80 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2080 00001A89 726F74656374696F6E- <1>
  2081 00001A92 2076696F6C6174696F- <1>
  2082 00001A9B 6E3A0A              <1>
  2083 00001A9E 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2084 00001AA7 746564207468652063- <1>
  2085 00001AB0 6F6D70757465722E20- <1>
  2086 00001AB9 537465702061776179- <1>
  2087 00001AC2 20736C6F776C792E20- <1>
  2088 00001ACB 546865204642492069- <1>
  2089 00001AD4 73206F6E2069747320- <1>
  2090 00001ADD 7761792E0A00        <1>
  2091                              <1> 		
  2092 00001AE3 50616765206661756C- <1> err14	db "Page fault:",10
  2093 00001AEC 743A0A              <1>
  2094 00001AEF 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2095 00001AF8 746861742077617320- <1>
  2096 00001B01 726571756573746564- <1>
  2097 00001B0A 20776173206E6F7420- <1>
  2098 00001B13 617661696C61626C65- <1>
  2099 00001B1C 2E0A00              <1>
  2100                              <1> 		
  2101 00001B1F 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2102 00001B28 666F7220506C616E20- <1>
  2103 00001B31 523A0A              <1>
  2104 00001B34 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2105 00001B3D 727275707420697320- <1>
  2106 00001B46 726573657276656420- <1>
  2107 00001B4F 666F72207573616765- <1>
  2108 00001B58 206F6E6C7920627920- <1>
  2109 00001B61 746865206D696C6974- <1>
  2110 00001B6A 617279207768656E20- <1>
  2111 00001B73 6974206973206E6563- <1>
  2112 00001B7C 6573736172790A      <1>
  2113 00001B83 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'état.",10,0
  2114 00001B8C 746520612066756C6C- <1>
  2115 00001B95 2D7363616C6520636F- <1>
  2116 00001B9E 7570206427C3A97461- <1>
  2117 00001BA7 742E0A00            <1>
  2118                              <1> 		
  2119 00001BAB 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2120 00001BB4 68656C6C206A757374- <1>
  2121 00001BBD 2068617070656E6564- <1>
  2122 00001BC6 3F2049732065766572- <1>
  2123 00001BCF 796F6E65206F6B6179- <1>
  2124 00001BD8 3F2048617264206472- <1>
  2125 00001BE1 6976653F2056696465- <1>
  2126 00001BEA 6F20636172643F0A    <1>
  2127 00001BF2 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2128 00001BFB 726520796F75207468- <1>
  2129 00001C04 6572653F0A00        <1>
  2130                              <1> %else
  2131                              <1> unhand:	
  2132                              <1> 	%assign i 0
  2133                              <1> 	%rep 32
  2134                              <1> 	mov byte [intprob], i
  2135                              <1> 	jmp unhand2
  2136                              <1> 	%assign i i+1
  2137                              <1> 	%endrep
  2138                              <1> unhand2:
  2139                              <1> 	cmp byte [intprob], 3
  2140                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2141                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2142                              <1> 					;CD is the machine instruction for interrupt
  2143                              <1> 					;DEAD shows that the program died because of the int
  2144                              <1> 	mov bl, [intprob]
  2145                              <1> 	jmp exitprog
  2146                              <1> intprob db 0
  2147                              <1> %endif
  2148                                      %include "source/ints.asm"
  2149                              <1> int30h:	;for great justice
  2150 00001C0A 80FC00              <1> 	cmp ah, 0
  2151 00001C0D 0F849A000000        <1> 	je near exitprog   ;kills app
  2152 00001C13 80FC01              <1> 	cmp ah, 1
  2153 00001C16 0F8419010000        <1> 	je near prntstr  ;print string
  2154 00001C1C 80FC02              <1> 	cmp ah, 2
  2155 00001C1F 0F84C2010000        <1> 	je near readstr	;read string
  2156 00001C25 80FC03              <1> 	cmp ah, 3
  2157 00001C28 0F84E2010000        <1> 	je near clearscrn	;clear screen
  2158 00001C2E 80FC04              <1> 	cmp ah, 4
  2159 00001C31 0F8457020000        <1> 	je near prntreadstr	;read and print string
  2160 00001C37 80FC05              <1> 	cmp ah, 5
  2161 00001C3A 0F8437070000        <1> 	je near readchar	;get char
  2162 00001C40 80FC06              <1> 	cmp ah, 6
  2163 00001C43 0F849E070000        <1> 	je near prntchar	;print char
  2164 00001C49 80FC07              <1> 	cmp ah, 7
  2165 00001C4C 0F84BD090000        <1> 	je near openfile	;read file
  2166                              <1> ;	cmp ah, 8
  2167                              <1> ;	je near closefile	;close file
  2168 00001C52 80FC09              <1> 	cmp ah, 9
  2169 00001C55 0F84BE090000        <1> 	je near num2str	;convert number to string
  2170 00001C5B 80FC0A              <1> 	cmp ah, 10
  2171 00001C5E 0F84CD090000        <1> 	je near str2num	;convert string to number
  2172                              <1> %ifdef threads.included
  2173 00001C64 80FC0B              <1> 	cmp ah, 11
  2174 00001C67 0F84D0090000        <1> 	je near forkthread	;create thread
  2175                              <1> %endif
  2176 00001C6D 80FC0C              <1> 	cmp ah, 12
  2177 00001C70 0F849E0A0000        <1> 	je near gettime	;get time
  2178 00001C76 80FC0D              <1> 	cmp ah, 13
  2179 00001C79 0F84AA0A0000        <1> 	je near settime	;set time
  2180 00001C7F 80FC0E              <1> 	cmp ah, 14
  2181 00001C82 0F84B10A0000        <1> 	je near runcmd	;run program
  2182 00001C88 80FC0F              <1> 	cmp ah, 15
  2183 00001C8B 0F84BD0A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2184 00001C91 80FC10              <1> 	cmp ah, 16
  2185 00001C94 0F84E20A0000        <1> 	je near hooksig	;hook code to a signal
  2186                              <1> %ifdef gui.included
  2187 00001C9A 80FC11              <1> 	cmp ah, 17
  2188 00001C9D 0F84E90A0000        <1> 	je near guiint	;GUI operations
  2189                              <1> %endif
  2190                              <1> %ifdef sound.included
  2191 00001CA3 80FC12              <1> 	cmp ah, 18
  2192 00001CA6 0F846A0C0000        <1> 	je near soundint	;sound operations
  2193                              <1> %endif
  2194                              <1> %ifdef network.included
  2195                              <1> 	cmp ah, 19
  2196                              <1> 	je near netint	;networking operations
  2197                              <1> %endif
  2198 00001CAC CF                  <1> 	iret
  2199                              <1> 
  2200                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2201                              <2> exitprog:
  2202 00001CAD 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2203 00001CB1 8ED8                <2> 	mov ds, ax
  2204 00001CB3 8EC0                <2> 	mov es, ax
  2205 00001CB5 8EE0                <2> 	mov fs, ax
  2206 00001CB7 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2207 00001CBB 8EE8                <2> 	mov gs, ax
  2208 00001CBD C705[8F6A0000]0000- <2> 	mov dword [currentthread], 0
  2209 00001CC5 0000                <2>
  2210 00001CC7 C705[8A6A0000]0400- <2> 	mov dword [lastthread], 4
  2211 00001CCF 0000                <2>
  2212 00001CD1 C605[8E6A0000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2213 00001CD8 8B25[08B20300]      <2> 	mov esp, [previousstack] ;and this
  2214 00001CDE 81FB00000000        <2> 	cmp ebx, 0
  2215 00001CE4 0F8501000000        <2> 	jne near .error
  2216 00001CEA C3                  <2> 	ret
  2217                              <2> .error:
  2218 00001CEB 89D9                <2> 	mov ecx, ebx
  2219 00001CED B006                <2> 	mov al, 6
  2220 00001CEF A2[77320000]        <2> 	mov [firsthexshown], al
  2221 00001CF4 51                  <2> 	push ecx
  2222 00001CF5 BE[101D0000]        <2> 	mov esi, .msg1
  2223 00001CFA E855000000          <2> 	call printhighlight
  2224 00001CFF 59                  <2> 	pop ecx
  2225 00001D00 E887150000          <2> 	call showhex
  2226 00001D05 BE[251D0000]        <2> 	mov esi, .msg2
  2227 00001D0A E845000000          <2> 	call printhighlight
  2228 00001D0F C3                  <2> 	ret
  2229                              <2> 	
  2230 00001D10 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2231 00001D19 7461747573206F6620- <2>
  2232 00001D22 307800              <2>
  2233 00001D25 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2234 00001D2E 726E65642E0A00      <2>
  2235                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2236                              <2> prntstr:
  2237 00001D35 30E4                <2> xor ah, ah
  2238 00001D37 E830000000          <2> call printint
  2239 00001D3C E971E5FFFF          <2> jmp timerinterrupt
  2240                              <2> 
  2241                              <2> 	printquiet:
  2242 00001D41 6631C0              <2> 		xor ax, ax
  2243 00001D44 66A3[E51D0000]      <2> 		mov [endkeyprint], ax
  2244 00001D4A 66BB0700            <2> 		mov bx, 7
  2245 00001D4E E832000000          <2> 		call printint.b
  2246 00001D53 C3                  <2> 		ret
  2247                              <2> 
  2248                              <2> 	printhighlight:
  2249 00001D54 6631C0              <2> 		xor ax, ax
  2250 00001D57 66BBF000            <2> 		mov bx, 0xF0
  2251 00001D5B E90C000000          <2> 		jmp printint
  2252                              <2> 
  2253                              <2> 	printline:
  2254 00001D60 BE[B4890000]        <2> 		mov esi, line
  2255                              <2>     print:
  2256 00001D65 6631C0              <2> 		xor ax, ax
  2257 00001D68 66BB0700            <2> 		mov bx, 7
  2258                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2259 00001D6C 56                  <2> 		push esi
  2260 00001D6D 66A3[E51D0000]      <2> 		mov [endkeyprint], ax
  2261 00001D73 E80D000000          <2> 		call .b
  2262 00001D78 89F1                <2> 		mov ecx, esi
  2263 00001D7A 5F                  <2> 		pop edi
  2264 00001D7B 29F9                <2> 		sub ecx, edi
  2265 00001D7D 51                  <2> 		push ecx
  2266 00001D7E E8980B0000          <2> 		call termcopy
  2267 00001D83 59                  <2> 		pop ecx
  2268 00001D84 C3                  <2> 		ret
  2269                              <2> 	.b:	
  2270 00001D85 53                  <2> 		push ebx
  2271 00001D86 31C0                <2> 		xor eax, eax
  2272 00001D88 8A06                <2> 		mov al, [esi]
  2273 00001D8A 3CFF                <2> 		cmp al, 0xFF
  2274 00001D8C 7506                <2> 		jne .notnull
  2275 00001D8E 5B                  <2> 		pop ebx
  2276 00001D8F E94A000000          <2> 		jmp .noprint
  2277                              <2> 	.notnull:
  2278 00001D94 3CC0                <2> 		cmp al, 0xC0
  2279 00001D96 7231                <2> 		jb .doneutf
  2280 00001D98 3CE0                <2> 		cmp al, 0xE0
  2281 00001D9A 721A                <2> 		jb .two
  2282 00001D9C 46                  <2> 		inc esi
  2283 00001D9D 8A2E                <2> 		mov ch, [esi]
  2284 00001D9F 46                  <2> 		inc esi
  2285 00001DA0 8A0E                <2> 		mov cl, [esi]
  2286 00001DA2 C0E004              <2> 		shl al, 4
  2287 00001DA5 C0E102              <2> 		shl cl, 2
  2288 00001DA8 66C1E902            <2> 		shr cx, 2
  2289 00001DAC 08C5                <2> 		or ch, al
  2290 00001DAE 6689C8              <2> 		mov ax, cx
  2291 00001DB1 E913000000          <2> 		jmp .doneutf
  2292                              <2> 	.two:
  2293 00001DB6 8A2E                <2> 		mov ch, [esi]
  2294 00001DB8 46                  <2> 		inc esi
  2295 00001DB9 8A0E                <2> 		mov cl, [esi]
  2296 00001DBB 66C1E102            <2> 		shl cx, 2
  2297 00001DBF C0ED02              <2> 		shr ch, 2
  2298 00001DC2 66C1E902            <2> 		shr cx, 2
  2299 00001DC6 6689C8              <2> 		mov ax, cx
  2300                              <2> 	.doneutf:
  2301 00001DC9 5B                  <2> 		pop ebx
  2302 00001DCA 663B05[E51D0000]    <2> 		cmp ax, [endkeyprint]
  2303 00001DD1 7411                <2> 		je .done
  2304 00001DD3 663DFFFE            <2> 		cmp ax, 0xFEFF
  2305 00001DD7 7405                <2> 		je .noprint
  2306 00001DD9 E836060000          <2> 		call prcharq
  2307                              <2> 	.noprint:
  2308 00001DDE 46                  <2> 		inc esi
  2309 00001DDF E9A1FFFFFF          <2> 		jmp .b
  2310                              <2> 	.done:
  2311 00001DE4 C3                  <2> 		ret
  2312                              <2> 
  2313 00001DE5 0000                <2> endkeyprint dw 0
  2314                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2315                              <2> readstr:
  2316 00001DE7 E805000000          <2> call readint
  2317 00001DEC E9C1E4FFFF          <2> jmp timerinterrupt
  2318                              <2> 
  2319                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2320 00001DF1 89C3                <2> 		mov ebx, eax
  2321                              <2> 	.b:
  2322 00001DF3 53                  <2> 		push ebx
  2323 00001DF4 57                  <2> 		push edi
  2324 00001DF5 56                  <2> 		push esi
  2325 00001DF6 30C0                <2> 		xor al, al
  2326 00001DF8 E886050000          <2> 		call rdcharint
  2327 00001DFD 5E                  <2> 		pop esi
  2328 00001DFE 8806                <2> 		mov [esi], al
  2329 00001E00 46                  <2> 		inc esi
  2330 00001E01 5F                  <2> 		pop edi
  2331 00001E02 5B                  <2> 		pop ebx
  2332 00001E03 39FE                <2> 		cmp esi, edi
  2333 00001E05 7304                <2> 		jae .done
  2334 00001E07 38D8                <2> 		cmp al, bl
  2335 00001E09 75E8                <2> 		jne .b
  2336                              <2> 	.done:
  2337 00001E0B 4E                  <2> 		dec esi
  2338 00001E0C C60600              <2> 		mov byte [esi], 0
  2339 00001E0F C3                  <2> 		ret
  2340                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2341                              <2> clearscrn:
  2342 00001E10 E805000000          <2> call clear
  2343 00001E15 E998E4FFFF          <2> jmp timerinterrupt
  2344                              <2> %ifdef io.serial
  2345                              <2> clear:
  2346                              <2> 	mov esi, .str
  2347                              <2> 	call print
  2348                              <2> 	ret
  2349                              <2> .str db 27,"[2J",27,"[f",0
  2350                              <2> %else
  2351                              <2> clear:
  2352 00001E1A 668B0D[09260000]    <2> 		mov cx, [charxy]
  2353 00001E21 BF[9CE32B00]        <2> 		mov edi, videobuf
  2354 00001E26 31C0                <2> 		xor eax, eax
  2355 00001E28 A3[FF250000]        <2> 		mov [linebeginpos], eax
  2356 00001E2D A3[03260000]        <2> 		mov [videobufpos], eax
  2357 00001E32 6631D2              <2> 		xor dx, dx
  2358 00001E35 66A3[07260000]      <2> 		mov [charpos], ax
  2359 00001E3B 66B80700            <2> 		mov ax, 7
  2360 00001E3F C1E010              <2> 		shl eax, 16
  2361                              <2> 	clearb:
  2362 00001E42 8907                <2> 		mov [edi], eax
  2363 00001E44 81C704000000        <2> 		add edi, 4
  2364 00001E4A FEC9                <2> 		dec cl
  2365 00001E4C 80F900              <2> 		cmp cl, 0
  2366 00001E4F 75F1                <2> 		jne clearb
  2367 00001E51 8A0D[09260000]      <2> 		mov cl, [charxy]
  2368 00001E57 FECD                <2> 		dec ch
  2369 00001E59 80FD00              <2> 		cmp ch, 0
  2370 00001E5C 75E4                <2> 		jne clearb
  2371                              <2> 	cleardouble:
  2372 00001E5E BF[E4B82C00]        <2> 		mov edi, videobuf2
  2373 00001E63 668B0D[09260000]    <2> 		mov cx, [charxy]
  2374 00001E6A 31C0                <2> 		xor eax, eax
  2375                              <2> 	clearc:
  2376 00001E6C 8907                <2> 		mov [edi], eax
  2377 00001E6E 81C704000000        <2> 		add edi, 4
  2378 00001E74 FEC9                <2> 		dec cl
  2379 00001E76 80F900              <2> 		cmp cl, 0
  2380 00001E79 75F1                <2> 		jne clearc
  2381 00001E7B 8A0D[09260000]      <2> 		mov cl, [charxy]
  2382 00001E81 FECD                <2> 		dec ch
  2383 00001E83 80FD00              <2> 		cmp ch, 0
  2384 00001E86 75E4                <2> 		jne clearc
  2385 00001E88 E88E0A0000          <2> 		call termcopy
  2386 00001E8D C3                  <2> 		ret
  2387                              <2> %endif
  2388                              <2> 		
  2389                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2390                              <2> prntreadstr:
  2391 00001E8E E80B000000          <2> call rdprint
  2392 00001E93 E91AE4FFFF          <2> jmp timerinterrupt
  2393                              <2> 
  2394                              <2> readline:
  2395 00001E98 B00A                <2>   mov al, 10
  2396 00001E9A 66BB0700            <2>   mov bx, 7
  2397                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2398 00001E9E E80F000000          <2> 	call rdprintdos
  2399 00001EA3 50                  <2> 	push eax
  2400 00001EA4 A0[62230000]        <2> 	mov al, [endkeyrdpr]
  2401 00001EA9 30E4                <2> 	xor ah, ah
  2402 00001EAB E84D050000          <2> 	call prcharint
  2403 00001EB0 58                  <2> 	pop eax
  2404 00001EB1 C3                  <2> 	ret
  2405                              <2> 
  2406                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2407 00001EB2 8935[6C230000]      <2> 		mov [buftxtloc], esi
  2408 00001EB8 A2[62230000]        <2> 		mov [endkeyrdpr], al
  2409 00001EBD 66891D[64230000]    <2> 		mov [modkeyrdpr], bx
  2410 00001EC4 8935[66230000]      <2> 		mov [firstesirdpr], esi
  2411 00001ECA 893D[70230000]      <2> 		mov [endbufferrdpr], edi
  2412 00001ED0 8B3D[388E2D00]      <2> 		mov edi, [commandsentered]
  2413 00001ED6 893D[348E2D00]      <2> 		mov [commandlistentries], edi
  2414                              <2> 	rdprintb:
  2415 00001EDC 56                  <2> 		push esi
  2416 00001EDD B001                <2> 		mov al, 1
  2417 00001EDF E89F040000          <2> 		call rdcharint
  2418 00001EE4 8A25[E3230000]      <2> 		mov ah, [lastkey + 2]
  2419 00001EEA 88E1                <2> 		mov cl, ah
  2420 00001EEC 5E                  <2> 		pop esi
  2421                              <2> %ifdef io.serial
  2422                              <2> 		cmp ah, 0x41
  2423                              <2> 		je near rdprup
  2424                              <2> 		cmp ah, 0x42
  2425                              <2> 		je near rdprdown
  2426                              <2> 		cmp ah, 0x43
  2427                              <2> 		je near rdprright
  2428                              <2> 		cmp ah, 0x44
  2429                              <2> 		je near rdprleft
  2430                              <2> 		cmp ah, 0x31
  2431                              <2> 		je near rdprhome
  2432                              <2> 		cmp ah, 0x48
  2433                              <2> 		je near rdprhome
  2434                              <2> 		cmp ah, 0x46
  2435                              <2> 		je near rdprend
  2436                              <2> 		cmp ah, 0x33
  2437                              <2> 		je near rdprdel
  2438                              <2> 		cmp ah, 0x34
  2439                              <2> 		je near rdprend
  2440                              <2> %else
  2441 00001EED 803D[FA5E0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2442 00001EF4 753F                <2> 		jne notspecialrdprnt
  2443 00001EF6 80FC53              <2> 		cmp ah, 0x53
  2444 00001EF9 0F84C9030000        <2> 		je near rdprdel
  2445 00001EFF 80FC47              <2> 		cmp ah, 0x47
  2446 00001F02 0F8481010000        <2> 		je near rdprhome
  2447 00001F08 80FC4F              <2> 		cmp ah, 0x4F
  2448 00001F0B 0F849A010000        <2> 		je near rdprend
  2449 00001F11 80FC50              <2> 		cmp ah, 0x50
  2450 00001F14 0F8430020000        <2> 		je near rdprdown
  2451 00001F1A 80FC4D              <2> 		cmp ah, 0x4D
  2452 00001F1D 0F84CA010000        <2> 		je near rdprright
  2453 00001F23 80FC4B              <2> 		cmp ah, 0x4B
  2454 00001F26 0F849F010000        <2> 		je near rdprleft
  2455 00001F2C 80FC48              <2> 		cmp ah, 0x48
  2456 00001F2F 0F8458020000        <2> 		je near rdprup
  2457                              <2> 	notspecialrdprnt:
  2458                              <2> %endif
  2459 00001F35 66A1[E1230000]      <2> 		mov ax, [lastkey]
  2460 00001F3B 663D0800            <2> 		cmp ax, 8
  2461 00001F3F 0F84B8030000        <2> 		je near rdprbscheck
  2462 00001F45 663D0000            <2> 		cmp ax, 0
  2463 00001F49 7491                <2> 		je rdprintb
  2464 00001F4B 80F900              <2> 		cmp cl, 0
  2465 00001F4E 748C                <2> 		je rdprintb
  2466 00001F50 663D8000            <2> 		cmp ax, 0x80
  2467 00001F54 7257                <2> 		jb .normal
  2468 00001F56 663D0008            <2> 		cmp ax, 0x800
  2469 00001F5A 7321                <2> 		jae .three
  2470 00001F5C 46                  <2> 		inc esi
  2471 00001F5D 3B35[70230000]      <2> 		cmp esi, [endbufferrdpr]
  2472 00001F63 0F83DA000000        <2> 		jae near donerdprinc
  2473 00001F69 66C1E002            <2> 		shl ax, 2
  2474 00001F6D C0E802              <2> 		shr al, 2
  2475 00001F70 0C80                <2> 		or al, 10000000b
  2476 00001F72 80CCC0              <2> 		or ah, 11000000b
  2477 00001F75 8866FF              <2> 		mov [esi - 1], ah
  2478 00001F78 E930000000          <2> 		jmp .normal
  2479                              <2> .three:	
  2480 00001F7D 81C602000000        <2> 		add esi, 2
  2481 00001F83 3B35[70230000]      <2> 		cmp esi, [endbufferrdpr]
  2482 00001F89 0F83B4000000        <2> 		jae near donerdprinc
  2483 00001F8F 88E1                <2> 		mov cl, ah
  2484 00001F91 C0E904              <2> 		shr cl, 4
  2485 00001F94 80C9E0              <2> 		or cl, 11100000b
  2486 00001F97 884EFE              <2> 		mov [esi - 2], cl
  2487 00001F9A 66C1E004            <2> 		shl ax, 4
  2488 00001F9E 66C1E802            <2> 		shr ax, 2
  2489 00001FA2 80CC80              <2> 		or ah, 10000000b
  2490 00001FA5 C0E802              <2> 		shr al, 2
  2491 00001FA8 0C80                <2> 		or al, 10000000b
  2492 00001FAA 8866FF              <2> 		mov [esi - 1], ah
  2493                              <2> .normal:
  2494 00001FAD 8806                <2> 		mov [esi], al
  2495 00001FAF 46                  <2> 		inc esi
  2496 00001FB0 66A1[E1230000]      <2> 		mov ax, [lastkey]
  2497                              <2> 	bscheckequal:
  2498 00001FB6 668B1D[64230000]    <2> 		mov bx, [modkeyrdpr]
  2499 00001FBD 803D[6B230000]00    <2> 		cmp byte [txtmask], 0
  2500 00001FC4 7407                <2> 		je nomasktxt
  2501 00001FC6 30E4                <2> 		xor ah, ah
  2502 00001FC8 A0[6B230000]        <2> 		mov al, [txtmask]
  2503                              <2> 	nomasktxt:
  2504 00001FCD 56                  <2> 		push esi
  2505 00001FCE 66A3[60230000]      <2> 		mov [axcache], ax
  2506 00001FD4 668B1D[62230000]    <2> 		mov bx, [endkeyrdpr]
  2507 00001FDB 6639D8              <2> 		cmp ax, bx
  2508 00001FDE 7432                <2> 		je nobackprintbuftxt2
  2509 00001FE0 E818040000          <2> 		call prcharint
  2510 00001FE5 BE[88C40300]        <2> 		mov esi, buftxt2
  2511 00001FEA E852FDFFFF          <2> 		call printquiet
  2512 00001FEF 66B82000            <2> 		mov ax, " "
  2513 00001FF3 E81C040000          <2> 		call prcharq
  2514 00001FF8 66B80800            <2> 		mov ax, 8
  2515 00001FFC 81FE[88C40300]      <2> 		cmp esi, buftxt2
  2516 00002002 740E                <2> 		je nobackprintbuftxt2
  2517                              <2> 	backprintbuftxt2:
  2518 00002004 E80B040000          <2> 		call prcharq
  2519 00002009 4E                  <2> 		dec esi
  2520 0000200A 81FE[88C40300]      <2> 		cmp esi, buftxt2
  2521 00002010 77F2                <2> 		ja backprintbuftxt2
  2522                              <2> 	nobackprintbuftxt2:
  2523 00002012 663D0A00            <2> 		cmp ax, 10
  2524 00002016 7405                <2> 		je nonobackprint
  2525 00002018 E8E0030000          <2> 		call prcharint
  2526                              <2> 	nonobackprint:
  2527 0000201D 5E                  <2> 		pop esi
  2528 0000201E 3B35[70230000]      <2> 		cmp esi, [endbufferrdpr]
  2529 00002024 0F8319000000        <2> 		jae near donerdprinc
  2530 0000202A 66A1[60230000]      <2> 		mov ax, [axcache]
  2531 00002030 8A25[62230000]      <2> 		mov ah, [endkeyrdpr]
  2532 00002036 38E0                <2> 		cmp al, ah
  2533 00002038 0F859EFEFFFF        <2> 		jne rdprintb
  2534 0000203E E901000000          <2> 		jmp donerdprint
  2535                              <2> 	donerdprinc:
  2536 00002043 46                  <2> 		inc esi
  2537                              <2> 	donerdprint:
  2538 00002044 4E                  <2> 		dec esi
  2539 00002045 BF[88C40300]        <2> 		mov edi, buftxt2
  2540                              <2> 	copylaterstuff:
  2541 0000204A 8A07                <2> 		mov al, [edi]
  2542 0000204C 3C00                <2> 		cmp al, 0
  2543 0000204E 7409                <2> 		je nocopylaterstuff
  2544 00002050 8806                <2> 		mov [esi], al
  2545 00002052 47                  <2> 		inc edi
  2546 00002053 46                  <2> 		inc esi
  2547 00002054 E9F1FFFFFF          <2> 		jmp copylaterstuff
  2548                              <2> 	nocopylaterstuff:
  2549 00002059 C60600              <2> 		mov byte [esi], 0
  2550 0000205C E80B000000          <2> 		call clearbuftxt2
  2551 00002061 89F1                <2> 		mov ecx, esi
  2552 00002063 8B3D[66230000]      <2> 		mov edi, [firstesirdpr]
  2553 00002069 29F9                <2> 		sub ecx, edi
  2554 0000206B C3                  <2> 		ret
  2555                              <2> 	
  2556                              <2> 	clearbuftxt2:
  2557 0000206C 30C0                <2> 		xor al, al
  2558 0000206E BF[88C40300]        <2> 		mov edi, buftxt2
  2559                              <2> 	clearbuftxt2lp:
  2560 00002073 8807                <2> 		mov [edi], al
  2561 00002075 47                  <2> 		inc edi
  2562 00002076 81FF[88C80300]      <2> 		cmp edi, buftxt
  2563 0000207C 75F5                <2> 		jne clearbuftxt2lp
  2564 0000207E C3                  <2> 		ret
  2565                              <2> 	
  2566                              <2> 	rdprintb2:
  2567 0000207F E897080000          <2> 		call termcopy
  2568 00002084 E953FEFFFF          <2> 		jmp rdprintb
  2569                              <2> 	
  2570                              <2> 	rdprhome:
  2571 00002089 3B35[6C230000]      <2> 		cmp esi, [buftxtloc]
  2572 0000208F 0F84EAFFFFFF        <2> 		je near rdprintb2
  2573 00002095 BF[88C40300]        <2> 		mov edi, buftxt2
  2574 0000209A 8A07                <2> 		mov al, [edi]
  2575 0000209C E88E020000          <2> 		call shiftbuftxt2
  2576 000020A1 E86E030000          <2> 		call prcharq
  2577 000020A6 E9DEFFFFFF          <2> 		jmp rdprhome
  2578                              <2> 		
  2579                              <2> 	rdprend:
  2580 000020AB BF[88C40300]        <2> 		mov edi, buftxt2
  2581 000020B0 8A07                <2> 		mov al, [edi]
  2582 000020B2 3C00                <2> 		cmp al, 0
  2583 000020B4 0F84C5FFFFFF        <2> 		je near rdprintb2
  2584 000020BA 8806                <2> 		mov [esi], al
  2585 000020BC E84C000000          <2> 		call shiftbuftxt2lft
  2586 000020C1 E84E030000          <2> 		call prcharq
  2587 000020C6 E9E0FFFFFF          <2> 		jmp rdprend
  2588                              <2> 	
  2589                              <2> 	rdprleft:
  2590 000020CB 3B35[6C230000]      <2> 		cmp esi, [buftxtloc]
  2591 000020D1 0F8405FEFFFF        <2> 		je near rdprintb
  2592 000020D7 BF[88C40300]        <2> 		mov edi, buftxt2
  2593 000020DC 8A07                <2> 		mov al, [edi]
  2594 000020DE E84C020000          <2> 		call shiftbuftxt2
  2595 000020E3 E815030000          <2> 		call prcharint
  2596 000020E8 E9EFFDFFFF          <2> 		jmp rdprintb
  2597                              <2> 		
  2598                              <2> 	rdprright:
  2599 000020ED BF[88C40300]        <2> 		mov edi, buftxt2
  2600 000020F2 8A07                <2> 		mov al, [edi]
  2601 000020F4 3C00                <2> 		cmp al, 0
  2602 000020F6 0F84E0FDFFFF        <2> 		je near rdprintb
  2603 000020FC 8806                <2> 		mov [esi], al
  2604 000020FE E80A000000          <2> 		call shiftbuftxt2lft
  2605 00002103 E8F5020000          <2> 		call prcharint
  2606 00002108 E9CFFDFFFF          <2> 		jmp rdprintb
  2607                              <2> 		
  2608                              <2> 	shiftbuftxt2lft:
  2609 0000210D 55                  <2> 		push ebp
  2610 0000210E 89FD                <2> 		mov ebp, edi
  2611                              <2> 	.lp:
  2612 00002110 3C00                <2> 		cmp al, 0
  2613 00002112 740B                <2> 		je noshiftbuftxt2lft
  2614 00002114 47                  <2> 		inc edi
  2615 00002115 8A07                <2> 		mov al, [edi]
  2616 00002117 8847FF              <2> 		mov [edi - 1], al
  2617 0000211A E9F1FFFFFF          <2> 		jmp .lp
  2618                              <2> 	noshiftbuftxt2lft:
  2619 0000211F 8A4500              <2> 		mov al, [ebp]
  2620 00002122 5D                  <2> 		pop ebp
  2621 00002123 3CC0                <2> 		cmp al, 0xC0
  2622 00002125 7304                <2> 		jae .nofix
  2623 00002127 3C80                <2> 		cmp al, 0x80
  2624 00002129 73E2                <2> 		jae shiftbuftxt2lft
  2625                              <2> 	.nofix:
  2626 0000212B 8A06                <2> 		mov al, [esi]
  2627 0000212D 30E4                <2> 		xor ah, ah
  2628 0000212F 46                  <2> 		inc esi
  2629 00002130 668B1D[64230000]    <2> 		mov bx, [modkeyrdpr]
  2630 00002137 C3                  <2> 		ret
  2631                              <2> 		
  2632                              <2> 	rdprdownbck:
  2633 00002138 FECC                <2> 		dec ah
  2634 0000213A 8825[6A230000]      <2> 		mov [commandedit], ah
  2635 00002140 E890000000          <2> 		call rdprbckspc
  2636 00002145 E992FDFFFF          <2> 		jmp rdprintb
  2637                              <2> 	
  2638                              <2> 	rdprdown:
  2639 0000214A 8A25[6A230000]      <2> 		mov ah, [commandedit]
  2640 00002150 80FC01              <2> 		cmp ah, 1
  2641 00002153 0F8683FDFFFF        <2> 		jbe near rdprintb
  2642 00002159 8B3D[388E2D00]      <2> 		mov edi, [commandsentered]
  2643 0000215F 3B3D[348E2D00]      <2> 		cmp edi, [commandlistentries]
  2644 00002165 7618                <2> 		jbe .nofix
  2645 00002167 8105[348E2D00]0200- <2> 		add dword [commandlistentries], 2
  2646 0000216F 0000                <2>
  2647 00002171 3B3D[348E2D00]      <2> 		cmp edi, [commandlistentries]
  2648 00002177 7706                <2> 		ja .nofix
  2649 00002179 893D[348E2D00]      <2> 		mov [commandlistentries], edi
  2650                              <2> 	.nofix:
  2651 0000217F 80FC02              <2> 		cmp ah, 2
  2652 00002182 74B4                <2> 		je rdprdownbck
  2653 00002184 80EC02              <2> 		sub ah, 2
  2654 00002187 8825[6A230000]      <2> 		mov [commandedit], ah
  2655                              <2> 		
  2656                              <2> 	rdprup:
  2657 0000218D 3805[6A230000]      <2> 		cmp [commandedit], al
  2658 00002193 0F8443FDFFFF        <2> 		je near rdprintb
  2659 00002199 813D[348E2D00]0000- <2> 		cmp dword [commandlistentries], 0
  2660 000021A1 0000                <2>
  2661 000021A3 0F8433FDFFFF        <2> 		je near rdprintb
  2662 000021A9 FF0D[348E2D00]      <2> 		dec dword [commandlistentries]
  2663                              <2> 	.lp:
  2664 000021AF BF[88C40300]        <2> 		mov edi, buftxt2
  2665 000021B4 8A07                <2> 		mov al, [edi]
  2666 000021B6 3C00                <2> 		cmp al, 0
  2667 000021B8 7411                <2> 		je .start
  2668 000021BA 8806                <2> 		mov [esi], al
  2669 000021BC E84CFFFFFF          <2> 		call shiftbuftxt2lft
  2670 000021C1 E84E020000          <2> 		call prcharq
  2671 000021C6 E9E4FFFFFF          <2> 		jmp .lp
  2672                              <2> 	.start:
  2673 000021CB E805000000          <2> 		call rdprbckspc
  2674 000021D0 E94B000000          <2> 		jmp getcurrentcommandstr
  2675                              <2> 	rdprbckspc:
  2676 000021D5 3B35[6C230000]      <2> 		cmp esi, [buftxtloc]
  2677 000021DB 7435                <2> 		je nordprupbck
  2678                              <2> 	rdprupbckspclp:
  2679 000021DD 66B80800            <2> 		mov ax, 8
  2680 000021E1 668B1D[64230000]    <2> 		mov bx, [modkeyrdpr]
  2681 000021E8 E827020000          <2> 		call prcharq
  2682 000021ED 66B82000            <2> 		mov ax, ' '
  2683 000021F1 E81E020000          <2> 		call prcharq
  2684 000021F6 66B80800            <2> 		mov ax, 8
  2685 000021FA E815020000          <2> 		call prcharq
  2686 000021FF 4E                  <2> 		dec esi
  2687 00002200 3B35[6C230000]      <2> 		cmp esi, [buftxtloc]
  2688 00002206 7405                <2> 		je nordprupbck2
  2689 00002208 E9D0FFFFFF          <2> 		jmp rdprupbckspclp
  2690                              <2> 	nordprupbck2:
  2691 0000220D E809070000          <2> 		call termcopy
  2692                              <2> 	nordprupbck:
  2693 00002212 8B3D[308E2D00]      <2> 		mov edi, [commandbufpos]
  2694 00002218 81C7[3C8E2D00]      <2> 		add edi, commandbuf
  2695 0000221E 4F                  <2> 		dec edi
  2696 0000221F C3                  <2> 		ret
  2697                              <2> 	getcurrentcommandstr:
  2698 00002220 8A25[6A230000]      <2> 		mov ah, [commandedit]
  2699 00002226 FE05[6A230000]      <2> 		inc byte [commandedit]
  2700                              <2> 	getccmdlp:
  2701 0000222C 4F                  <2> 		dec edi
  2702 0000222D 8A07                <2> 		mov al, [edi]
  2703 0000222F 81FF[3C8E2D00]      <2> 		cmp edi, commandbuf
  2704 00002235 7231                <2> 		jb getcmdresetcommandbuf
  2705 00002237 81EF[3C8E2D00]      <2> 		sub edi, commandbuf
  2706 0000223D 3B3D[308E2D00]      <2> 		cmp edi, [commandbufpos]
  2707 00002243 0F8493FCFFFF        <2> 		je near rdprintb
  2708 00002249 81C7[3C8E2D00]      <2> 		add edi, commandbuf
  2709 0000224F 3C00                <2> 		cmp al, 0
  2710 00002251 75D9                <2> 		jne getccmdlp
  2711 00002253 FECC                <2> 		dec ah
  2712 00002255 80FC00              <2> 		cmp ah, 0
  2713 00002258 77D2                <2> 		ja getccmdlp
  2714 0000225A 47                  <2> 		inc edi
  2715 0000225B 81FF[3C9E2D00]      <2> 		cmp edi, commandbufend
  2716 00002261 7710                <2> 		ja fixcmdbufb4morerdpr
  2717 00002263 E918000000          <2> 		jmp morerdprup
  2718                              <2> 	getcmdresetcommandbuf:
  2719 00002268 BF[3C9E2D00]        <2> 		mov edi, commandbufend
  2720 0000226D 47                  <2> 		inc edi
  2721 0000226E E9B9FFFFFF          <2> 		jmp getccmdlp
  2722                              <2> 	fixcmdbufb4morerdpr:
  2723 00002273 4F                  <2> 		dec edi
  2724 00002274 81EF[3C9E2D00]      <2> 		sub edi, commandbufend
  2725 0000227A 81C7[3C8E2D00]      <2> 		add edi, commandbuf
  2726                              <2> 	morerdprup:
  2727 00002280 8A07                <2> 		mov al, [edi]
  2728 00002282 47                  <2> 		inc edi
  2729 00002283 81EF[3C8E2D00]      <2> 		sub edi, commandbuf
  2730 00002289 3C00                <2> 		cmp al, 0
  2731 0000228B 0F84EEFDFFFF        <2> 		je near rdprintb2
  2732 00002291 3B3D[308E2D00]      <2> 		cmp edi, [commandbufpos]
  2733 00002297 0F83E2FDFFFF        <2> 		jae near rdprintb2
  2734 0000229D 81C7[3C8E2D00]      <2> 		add edi, commandbuf
  2735 000022A3 8806                <2> 		mov [esi], al
  2736 000022A5 46                  <2> 		inc esi
  2737 000022A6 57                  <2> 		push edi
  2738 000022A7 668B1D[64230000]    <2> 		mov bx, [modkeyrdpr]
  2739 000022AE 30E4                <2> 		xor ah, ah
  2740 000022B0 E85F010000          <2> 		call prcharq
  2741 000022B5 5F                  <2> 		pop edi
  2742 000022B6 81FF[3C9E2D00]      <2> 		cmp edi, commandbufend
  2743 000022BC 76C2                <2> 		jbe morerdprup
  2744 000022BE BF[3C8E2D00]        <2> 		mov edi, commandbuf
  2745 000022C3 E9B8FFFFFF          <2> 		jmp morerdprup
  2746                              <2> 
  2747                              <2> 	rdprdel:
  2748 000022C8 BF[88C40300]        <2> 		mov edi, buftxt2
  2749 000022CD 8A07                <2> 		mov al, [edi]
  2750 000022CF 3C00                <2> 		cmp al, 0
  2751 000022D1 0F8405FCFFFF        <2> 		je near rdprintb
  2752 000022D7 8806                <2> 		mov [esi], al
  2753 000022D9 3C80                <2> 		cmp al, 0x80
  2754 000022DB 7216                <2> 		jb .fn
  2755                              <2> 	.lp:
  2756 000022DD 46                  <2> 		inc esi
  2757 000022DE 47                  <2> 		inc edi
  2758 000022DF 8A07                <2> 		mov al, [edi]
  2759 000022E1 3C00                <2> 		cmp al, 0
  2760 000022E3 0F84F3FBFFFF        <2> 		je near rdprintb
  2761 000022E9 8806                <2> 		mov [esi], al
  2762 000022EB 3C80                <2> 		cmp al, 0x80
  2763 000022ED 7204                <2> 		jb .fn
  2764 000022EF 3CC0                <2> 		cmp al, 0xC0
  2765 000022F1 72EA                <2> 		jb .lp
  2766                              <2> 	.fn:
  2767 000022F3 E815FEFFFF          <2> 		call shiftbuftxt2lft
  2768 000022F8 E817010000          <2> 		call prcharq
  2769                              <2> 		
  2770                              <2> 	rdprbscheck:
  2771 000022FD 3B35[66230000]      <2> 		cmp esi, [firstesirdpr]
  2772 00002303 0F86D3FBFFFF        <2> 		jbe near rdprintb
  2773                              <2> 	goodbscheck:
  2774 00002309 4E                  <2> 		dec esi
  2775 0000230A 8A46FF              <2> 		mov al, [esi - 1]
  2776 0000230D C60600              <2> 		mov byte [esi], 0
  2777 00002310 3CC0                <2> 		cmp al, 0xC0
  2778 00002312 7309                <2> 		jae .onemore
  2779 00002314 3C80                <2> 		cmp al, 0x80
  2780 00002316 73F1                <2> 		jae goodbscheck
  2781 00002318 E904000000          <2> 		jmp .nomore
  2782                              <2> 	.onemore:
  2783 0000231D 4E                  <2> 		dec esi
  2784 0000231E C60600              <2> 		mov byte [esi], 0		
  2785                              <2> 	.nomore:
  2786 00002321 668B1D[64230000]    <2> 		mov bx, [modkeyrdpr]
  2787 00002328 B008                <2> 		mov al, 8
  2788 0000232A E987FCFFFF          <2> 		jmp bscheckequal
  2789                              <2> 		
  2790                              <2> 	shiftbuftxt2:
  2791 0000232F 55                  <2> 		push ebp
  2792 00002330 89FD                <2> 		mov ebp, edi
  2793                              <2> 	.lp:
  2794 00002332 3C00                <2> 		cmp al, 0
  2795 00002334 740C                <2> 		je noshiftbuftxt2
  2796 00002336 47                  <2> 		inc edi
  2797 00002337 8A27                <2> 		mov ah, [edi]
  2798 00002339 8807                <2> 		mov [edi], al
  2799 0000233B 88E0                <2> 		mov al, ah
  2800 0000233D E9F0FFFFFF          <2> 		jmp .lp
  2801                              <2> 	noshiftbuftxt2:
  2802 00002342 8A4500              <2> 		mov al, [ebp]
  2803 00002345 5D                  <2> 		pop ebp
  2804 00002346 3CC0                <2> 		cmp al, 0xC0
  2805 00002348 7304                <2> 		jae .nofix
  2806 0000234A 3C80                <2> 		cmp al, 0x80
  2807 0000234C 73E1                <2> 		jae shiftbuftxt2
  2808                              <2> 	.nofix:
  2809 0000234E BF[88C40300]        <2> 		mov edi, buftxt2
  2810 00002353 4E                  <2> 		dec esi
  2811 00002354 8A06                <2> 		mov al, [esi]
  2812 00002356 8807                <2> 		mov [edi], al
  2813 00002358 C60600              <2> 		mov byte [esi], 0
  2814 0000235B 66B80800            <2> 		mov ax, 8
  2815 0000235F C3                  <2> 		ret
  2816                              <2> 		
  2817 00002360 0000                <2> axcache dw 0
  2818 00002362 0000                <2> endkeyrdpr dw 0
  2819 00002364 0000                <2> modkeyrdpr dw 0
  2820 00002366 00000000            <2> firstesirdpr dd 0
  2821 0000236A 00                  <2> commandedit db 0
  2822 0000236B 00                  <2> txtmask db 0
  2823 0000236C 00000000            <2> buftxtloc dd 0
  2824 00002370 00000000            <2> endbufferrdpr dd 0
  2825 00002374 082000              <2> backcursor db 8," ",0
  2826                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2827                              <2> readchar:
  2828 00002377 E807000000          <2> 	call rdcharint
  2829 0000237C E931DFFFFF          <2> 	jmp timerinterrupt
  2830                              <2> getchar:
  2831 00002381 30C0                <2> 	xor al, al
  2832                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2833 00002383 66C705[E5230000]01- <2> 		mov word [trans], 1
  2834 0000238B 00                  <2>
  2835 0000238C 3C00                <2> 		cmp al, 0
  2836 0000238E 7509                <2> 		jne transcheck
  2837 00002390 66C705[E5230000]00- <2> 		mov word [trans], 0
  2838 00002398 00                  <2>
  2839                              <2> 	transcheck:
  2840                              <2> 	%ifdef io.serial
  2841                              <2> 		call serial.receive
  2842                              <2> 		xor ah, ah
  2843                              <2> 		cmp al, 13
  2844                              <2> 		je rdenter
  2845                              <2> 	%else
  2846 00002399 E8803B0000          <2> 		call getkey
  2847 0000239E 66A1[E3230000]      <2> 		mov ax, [lastkey + 2]
  2848 000023A4 663D1C00            <2> 		cmp ax, 0x1C
  2849 000023A8 7425                <2> 		je rdenter
  2850                              <2> 	%endif
  2851 000023AA 66A1[E1230000]      <2> 		mov ax, [lastkey]
  2852 000023B0 668B1D[E5230000]    <2> 		mov bx, [trans]
  2853 000023B7 803D[FA5E0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2854 000023BE 7500                <2> 		jne nospecialtrans
  2855                              <2> 	nospecialtrans:
  2856 000023C0 6609C3              <2> 		or bx, ax
  2857 000023C3 6681FB0000          <2> 		cmp bx, 0
  2858 000023C8 74CF                <2> 		je transcheck
  2859 000023CA E90C000000          <2> 		jmp rdend
  2860                              <2> 	rdenter:
  2861 000023CF C1E010              <2> 		shl eax, 16
  2862 000023D2 66B80A00            <2> 		mov ax, 10
  2863 000023D6 A3[E1230000]        <2> 		mov [lastkey], eax
  2864                              <2> 	rdend:
  2865 000023DB A1[E1230000]        <2> 		mov eax, [lastkey]
  2866 000023E0 C3                  <2> 		ret
  2867                              <2> 		
  2868 000023E1 00000000            <2> lastkey dd 0
  2869 000023E5 0000                <2> trans dw 0
  2870                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2871                              <2> prntchar:
  2872 000023E7 30E4                <2> 	xor ah, ah ;this kills unicode from the outside unfortunately
  2873                              <2> %ifdef io.serial
  2874                              <2> 	call prcharint
  2875                              <2> 	jmp timerinterrupt
  2876                              <2> prcharint:	
  2877                              <2> prcharq:
  2878                              <2> 	call serial.send
  2879                              <2> 	ret
  2880                              <2> %else
  2881 000023E9 38FB                <2> cmp bl, bh
  2882 000023EB 740A                <2> je prchar.notimer
  2883 000023ED E80B000000          <2> call prcharint
  2884 000023F2 E9BBDEFFFF          <2> jmp timerinterrupt
  2885                              <2> prchar.notimer:
  2886 000023F7 E818000000          <2> 	call prcharq
  2887 000023FC CF                  <2> 	iret
  2888                              <2> 	
  2889                              <2> prcharint:	;print char, char in ax, modifier in bx, if ecx is eax then termcopy will not happen, will run termcopy if called as is
  2890 000023FD 663DFFFE            <2> 	cmp ax, 0xFEFF
  2891 00002401 740E                <2> 	je .ret
  2892 00002403 39C1                <2> 	cmp ecx, eax
  2893 00002405 740D                <2> 	je prcharq
  2894 00002407 E808000000          <2> 	call prcharq
  2895 0000240C E80A050000          <2> 	call termcopy
  2896                              <2> .ret:
  2897 00002411 C3                  <2> 	ret
  2898 00002412 00                  <2> termguion db 0
  2899 00002413 00                  <2> termcopyon db 0
  2900                              <2> prcharq:
  2901 00002414 C1E310              <2> 	shl ebx, 16
  2902 00002417 6689C3              <2> 	mov bx, ax
  2903 0000241A 89D8                <2> 	mov eax, ebx
  2904 0000241C A3[0B260000]        <2> 	mov [charbuf], eax
  2905 00002421 8B1D[03260000]      <2> 	mov ebx, [videobufpos]
  2906 00002427 BF[9CE32B00]        <2> 	mov edi, videobuf
  2907 0000242C 01DF                <2> 	add edi, ebx
  2908 0000242E A1[28290000]        <2> 	mov eax, [removedvideo]
  2909 00002433 8907                <2> 	mov [edi], eax
  2910 00002435 A1[0B260000]        <2> 	mov eax, [charbuf]
  2911 0000243A 31D2                <2> 	xor edx, edx
  2912 0000243C 668B15[07260000]    <2> 	mov dx, [charpos]
  2913 00002443 31C9                <2> 	xor ecx, ecx
  2914 00002445 668B0D[09260000]    <2> 	mov cx, [charxy]
  2915 0000244C 663D0900            <2> 	cmp ax, 9
  2916 00002450 0F8472000000        <2> 	je near prtab
  2917 00002456 663D0D00            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2918 0000245A 0F8498000000        <2> 	je near prcr
  2919 00002460 663D0A00            <2> 	cmp ax, 10
  2920 00002464 0F84E7000000        <2> 	je near prnlcr
  2921 0000246A 663D0800            <2> 	cmp ax, 8
  2922 0000246E 0F8498000000        <2> 	je near prbs
  2923 00002474 663D0030            <2> 	cmp ax, (fontend - fonts)/16
  2924 00002478 0F8341000000        <2> 	jae near prnofont
  2925                              <2> donepr:
  2926 0000247E 8907                <2> 	mov [edi], eax
  2927 00002480 81C704000000        <2> 	add edi, 4
  2928 00002486 FEC2                <2> 	inc dl
  2929                              <2> donecrnl:
  2930 00002488 38CA                <2> 	cmp dl, cl
  2931 0000248A 0F83E5000000        <2> 	jae near preol
  2932                              <2> doneeol:
  2933 00002490 38EE                <2> 	cmp dh, ch
  2934 00002492 0F83FA000000        <2> 	jae near prscr	
  2935                              <2> donescr:
  2936 00002498 89FB                <2> 	mov ebx, edi
  2937 0000249A 8B07                <2> 	mov eax, [edi]
  2938 0000249C A3[28290000]        <2> 	mov [removedvideo], eax
  2939 000024A1 81EB[9CE32B00]      <2> 	sub ebx, videobuf
  2940 000024A7 891D[03260000]      <2> 	mov [videobufpos], ebx
  2941 000024AD 668915[07260000]    <2> 	mov [charpos], dx
  2942 000024B4 A1[0B260000]        <2> 	mov eax, [charbuf]
  2943 000024B9 89C3                <2> 	mov ebx, eax
  2944 000024BB C1EB10              <2> 	shr ebx, 16
  2945 000024BE C3                  <2> 	ret
  2946                              <2> 	
  2947                              <2> 	prnofont:
  2948 000024BF 66B80200            <2> 		mov ax, 2
  2949 000024C3 E9B6FFFFFF          <2> 		jmp donepr
  2950                              <2> 	prtab:
  2951 000024C8 8B1D[FF250000]      <2> 		mov ebx, [linebeginpos]
  2952 000024CE 81EF[9CE32B00]      <2> 		sub edi, videobuf
  2953 000024D4 29DF                <2> 		sub edi, ebx
  2954 000024D6 C1EF05              <2> 		shr edi, 5
  2955 000024D9 C1E705              <2> 		shl edi, 5
  2956 000024DC 81C720000000        <2> 		add edi, 32
  2957 000024E2 C0EA03              <2> 		shr dl, 3
  2958 000024E5 C0E203              <2> 		shl dl, 3
  2959 000024E8 80C208              <2> 		add dl, 8
  2960 000024EB 81C7[9CE32B00]      <2> 		add edi, videobuf
  2961 000024F1 01DF                <2> 		add edi, ebx
  2962 000024F3 E990FFFFFF          <2> 		jmp donecrnl
  2963                              <2> 	
  2964                              <2> 	prcr:
  2965 000024F8 30D2                <2> 		xor dl, dl
  2966 000024FA BF[9CE32B00]        <2> 		mov edi, videobuf
  2967 000024FF 8B1D[FF250000]      <2> 		mov ebx, [linebeginpos]
  2968 00002505 01DF                <2> 		add edi, ebx
  2969 00002507 E97CFFFFFF          <2> 		jmp donecrnl
  2970                              <2> 			
  2971                              <2> 	prbs:
  2972 0000250C 8B1D[FF250000]      <2> 		mov ebx, [linebeginpos]
  2973 00002512 80FA00              <2> 		cmp dl, 0
  2974 00002515 7415                <2> 		je prbackline
  2975                              <2> 	prnobmr:
  2976 00002517 891D[FF250000]      <2> 		mov [linebeginpos], ebx
  2977 0000251D FECA                <2> 		dec dl
  2978 0000251F 31C0                <2> 		xor eax, eax
  2979 00002521 81EF04000000        <2> 		sub edi, 4
  2980 00002527 E95CFFFFFF          <2> 		jmp donecrnl
  2981                              <2> 	prbackline:
  2982 0000252C 6631DB              <2> 		xor bx, bx
  2983 0000252F 88CA                <2> 		mov dl, cl
  2984 00002531 80FE00              <2> 		cmp dh, 0
  2985 00002534 74E1                <2> 		je prnobmr
  2986 00002536 8B1D[FF250000]      <2> 		mov ebx, [linebeginpos]
  2987 0000253C 6651                <2> 		push cx
  2988 0000253E 31C9                <2> 		xor ecx, ecx
  2989 00002540 8A0C24              <2> 		mov cl, [esp]
  2990 00002543 C1E102              <2> 		shl ecx, 2
  2991 00002546 29CB                <2> 		sub ebx, ecx
  2992 00002548 6659                <2> 		pop cx
  2993 0000254A FECE                <2> 		dec dh
  2994 0000254C E9C6FFFFFF          <2> 		jmp prnobmr
  2995                              <2> 		
  2996                              <2> 	prnlcr:
  2997 00002551 FEC6                <2> 		inc dh
  2998 00002553 31DB                <2> 		xor ebx, ebx
  2999 00002555 30D2                <2> 		xor dl, dl
  3000 00002557 88CB                <2> 		mov bl, cl
  3001 00002559 66C1E302            <2> 		shl bx, 2
  3002 0000255D BF[9CE32B00]        <2> 		mov edi, videobuf
  3003 00002562 031D[FF250000]      <2> 		add ebx, [linebeginpos]
  3004 00002568 891D[FF250000]      <2> 		mov [linebeginpos], ebx
  3005 0000256E 01DF                <2> 		add edi, ebx
  3006 00002570 E913FFFFFF          <2> 		jmp donecrnl
  3007                              <2> 		
  3008                              <2> 	preol:
  3009 00002575 30D2                <2> 		xor dl, dl
  3010 00002577 FEC6                <2> 		inc dh
  3011 00002579 31DB                <2> 		xor ebx, ebx
  3012 0000257B 88CB                <2> 		mov bl, cl
  3013 0000257D 66C1E302            <2> 		shl bx, 2
  3014 00002581 031D[FF250000]      <2> 		add ebx, [linebeginpos]
  3015 00002587 891D[FF250000]      <2> 		mov [linebeginpos], ebx
  3016 0000258D E9FEFEFFFF          <2> 		jmp doneeol
  3017                              <2> 	prscr:
  3018 00002592 FECE                <2> 		dec dh
  3019 00002594 BF[9CE32B00]        <2> 		mov edi, videobuf
  3020 00002599 31DB                <2> 		xor ebx, ebx
  3021 0000259B 88CB                <2> 		mov bl, cl
  3022 0000259D 66C1E302            <2> 		shl bx, 2
  3023 000025A1 01FB                <2> 		add ebx, edi
  3024                              <2> 	intscrollloop:
  3025 000025A3 8B03                <2> 		mov eax, [ebx]
  3026 000025A5 8907                <2> 		mov [edi], eax
  3027 000025A7 81C704000000        <2> 		add edi, 4
  3028 000025AD 81C304000000        <2> 		add ebx, 4
  3029 000025B3 FEC9                <2> 		dec cl
  3030 000025B5 80F900              <2> 		cmp cl, 0
  3031 000025B8 75E9                <2> 		jne intscrollloop
  3032 000025BA 8A0D[09260000]      <2> 		mov cl, [charxy]
  3033 000025C0 FECD                <2> 		dec ch
  3034 000025C2 80FD01              <2> 		cmp ch, 1
  3035 000025C5 77DC                <2> 		ja intscrollloop
  3036 000025C7 31C0                <2> 		xor eax, eax
  3037 000025C9 81EF[9CE32B00]      <2> 		sub edi, videobuf
  3038 000025CF 893D[FF250000]      <2> 		mov [linebeginpos], edi
  3039 000025D5 81C7[9CE32B00]      <2> 		add edi, videobuf
  3040 000025DB 89FB                <2> 		mov ebx, edi
  3041                              <2> 	intloopclear:
  3042 000025DD 8903                <2> 		mov [ebx], eax
  3043 000025DF 81C304000000        <2> 		add ebx, 4
  3044 000025E5 FEC9                <2> 		dec cl
  3045 000025E7 80F900              <2> 		cmp cl, 0
  3046 000025EA 75F1                <2> 		jne intloopclear
  3047 000025EC FECD                <2> 		dec ch
  3048 000025EE 80FD00              <2> 		cmp ch, 0
  3049 000025F1 75EA                <2> 		jne intloopclear
  3050 000025F3 668B0D[09260000]    <2> 		mov cx, [charxy]
  3051 000025FA E999FEFFFF          <2> 		jmp donescr
  3052                              <2> 		
  3053 000025FF 00000000            <2> linebeginpos dd 0
  3054 00002603 00000000            <2> videobufpos: dd 0
  3055 00002607 0000                <2> charpos db 0,0
  3056 00002609 501E                <2> charxy db 80,30
  3057 0000260B 00000000            <2> charbuf dd 0
  3058                              <2> %endif
  3059                              <1> 	%include 'source/interrupts/7_openfile.asm'
  3060                              <2> openfile:
  3061 0000260F E8B7420000          <2> 	call loadfile
  3062 00002614 E999DCFFFF          <2> 	jmp timerinterrupt
  3063                              <1> 	%include 'source/interrupts/9_num2str.asm'
  3064                              <2> num2str:
  3065 00002619 3C00                <2> 	cmp al, 0
  3066 0000261B 750A                <2> 	jne num2strb
  3067 0000261D E8250D0000          <2> 	call showdec
  3068 00002622 E98BDCFFFF          <2> 	jmp timerinterrupt
  3069                              <2> num2strb:
  3070 00002627 E8600C0000          <2> 	call showhex
  3071 0000262C E981DCFFFF          <2> 	jmp timerinterrupt
  3072                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3073                              <2> str2num:
  3074 00002631 89F7                <2> 	mov edi, esi
  3075 00002633 E8ED0D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3076 00002638 E975DCFFFF          <2> 	jmp timerinterrupt
  3077                              <2> 	
  3078                              <1> %ifdef threads.included
  3079                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3080                              <2> forkthread:
  3081                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  3082                              <2> 			;returns the PID of the new fork in ebx
  3083                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  3084 0000263D FA                  <2> 	cli
  3085 0000263E 60                  <2> 	pushad
  3086 0000263F 8925[0C270000]      <2> 	mov [.espold], esp
  3087 00002645 C605[8E6A0000]01    <2> 	mov byte [threadson], 1
  3088 0000264C 8B1D[8F6A0000]      <2> 	mov ebx, [currentthread]
  3089 00002652 C1E302              <2> 	shl ebx, 2
  3090 00002655 89A3[3C9E2D00]      <2> 	mov [threadlist + ebx], esp
  3091 0000265B C1EB02              <2> 	shr ebx, 2
  3092 0000265E 81FB00000000        <2> 	cmp ebx, 0
  3093 00002664 750C                <2> 	jne .simplestack
  3094 00002666 BB[00AE0300]        <2> 	mov ebx, stackend
  3095 0000266B 29E3                <2> 	sub ebx, esp
  3096 0000266D E90B000000          <2> 	jmp .stackcalcdone
  3097                              <2> .simplestack:
  3098 00002672 C1E30A              <2> 	shl ebx, 10
  3099 00002675 81C3[3CB62D00]      <2> 	add ebx, stack1
  3100 0000267B 29E3                <2> 	sub ebx, esp
  3101                              <2> .stackcalcdone:
  3102 0000267D 29DC                <2> 	sub esp, ebx
  3103 0000267F 81C4[3CB62D00]      <2> 	add esp, stack1
  3104 00002685 8B1D[8A6A0000]      <2> 	mov ebx, [lastthread]
  3105 0000268B C1E308              <2> 	shl ebx, 8
  3106 0000268E 01DC                <2> 	add esp, ebx
  3107 00002690 891D[10270000]      <2> 	mov [.stackend], ebx
  3108                              <2> 
  3109 00002696 89E5                <2> 	mov ebp, esp
  3110 00002698 8B25[0C270000]      <2> 	mov esp, [.espold]
  3111                              <2> 
  3112 0000269E C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3113 000026A1 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3114                              <2> 
  3115 000026A5 31DB                <2> 	xor ebx, ebx
  3116                              <2> .stackcopy:
  3117 000026A7 668B041C            <2> 	mov ax, [esp + ebx]
  3118 000026AB 6689441D00          <2> 	mov [ebp + ebx], ax
  3119 000026B0 81C302000000        <2> 	add ebx, 2
  3120 000026B6 3B1D[10270000]      <2> 	cmp ebx, [.stackend]
  3121 000026BC 72E9                <2> 	jb .stackcopy
  3122                              <2> 
  3123 000026BE 31C0                <2> 	xor eax, eax
  3124 000026C0 668CC8              <2> 	mov ax, cs
  3125 000026C3 89C2                <2> 	mov edx, eax
  3126 000026C5 8B4C2428            <2> 	mov ecx, [esp + 40]
  3127 000026C9 81C900020000        <2> 	or ecx, 0x200
  3128                              <2> 	
  3129 000026CF 81FE00000000        <2> 	cmp esi, 0
  3130 000026D5 7504                <2> 	jne .nochangestack
  3131 000026D7 8B742420            <2> 	mov esi, [esp + 32]
  3132                              <2> .nochangestack:
  3133 000026DB 89F0                <2> 	mov eax, esi
  3134 000026DD 89EC                <2> 	mov esp, ebp
  3135                              <2> 
  3136 000026DF 89442420            <2> 	mov [esp + 32], eax
  3137 000026E3 89542424            <2> 	mov [esp + 36], edx
  3138 000026E7 894C2428            <2> 	mov [esp + 40], ecx
  3139                              <2> 
  3140 000026EB 8B1D[8A6A0000]      <2> 	mov ebx, [lastthread]
  3141 000026F1 89A3[3C9E2D00]      <2> 	mov [threadlist + ebx], esp
  3142 000026F7 81C304000000        <2> 	add ebx, 4
  3143 000026FD 891D[8A6A0000]      <2> 	mov [lastthread], ebx
  3144 00002703 8B25[0C270000]      <2> 	mov esp, [.espold]
  3145 00002709 61                  <2> 	popad
  3146 0000270A FB                  <2> 	sti
  3147 0000270B CF                  <2> 	iret
  3148                              <2> 
  3149 0000270C 00000000            <2> .espold dd 0
  3150 00002710 00000000            <2> .stackend dd 0
  3151                              <1> %endif
  3152                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3153                              <2> gettime:
  3154 00002714 A1[6B020000]        <2> 	mov eax, [timeseconds]
  3155 00002719 8B1D[6F020000]      <2> 	mov ebx, [timenanoseconds]
  3156 0000271F 89D9                <2> 	mov ecx, ebx
  3157 00002721 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3158 00002724 E989DBFFFF          <2> 	jmp timerinterrupt
  3159                              <1> 	%include 'source/interrupts/13_settime.asm'
  3160                              <2> settime:
  3161 00002729 A3[6B020000]        <2> 	mov [timeseconds], eax
  3162 0000272E 891D[6F020000]      <2> 	mov [timenanoseconds], ebx
  3163 00002734 E979DBFFFF          <2> 	jmp timerinterrupt
  3164                              <2> 	
  3165                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3166                              <2> runcmd:
  3167 00002739 BF[88C80300]        <2> 	mov edi, buftxt
  3168                              <2> cpcmd:
  3169 0000273E 8A06                <2> 	mov al, [esi]
  3170 00002740 8807                <2> 	mov [edi], al
  3171 00002742 46                  <2> 	inc esi
  3172 00002743 47                  <2> 	inc edi
  3173 00002744 3C00                <2> 	cmp al, 0
  3174 00002746 75F6                <2> 	jne cpcmd
  3175 00002748 E81A080000          <2> 	call run
  3176 0000274D CF                  <2> 	iret
  3177                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3178                              <2> proginfo:
  3179                              <2> 	;mov ebx, variables
  3180 0000274E 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  3181 00002754 89F7                <2> 	mov edi, esi
  3182 00002756 31C9                <2> 	xor ecx, ecx
  3183                              <2> getcommandzeroes:
  3184 00002758 8A07                <2> 	mov al, [edi]
  3185 0000275A 47                  <2> 	inc edi
  3186 0000275B 3C3B                <2> 	cmp al, ';'
  3187 0000275D 740E                <2> 	je nomorezeroes
  3188 0000275F 3C00                <2> 	cmp al, 0
  3189 00002761 740A                <2> 	je nomorezeroes
  3190 00002763 3C20                <2> 	cmp al, ' '
  3191 00002765 75F1                <2> 	jne getcommandzeroes
  3192 00002767 41                  <2> 	inc ecx
  3193 00002768 E9EBFFFFFF          <2> 	jmp getcommandzeroes
  3194                              <2> nomorezeroes:
  3195 0000276D 41                  <2> 	inc ecx
  3196 0000276E 4F                  <2> 	dec edi
  3197 0000276F 8B1D[14B40300]      <2> 	mov ebx, [uid]
  3198 00002775 8B15[8F6A0000]      <2> 	mov edx, [currentthread]
  3199 0000277B CF                  <2> 	iret
  3200                              <2> 	
  3201                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3202                              <2> hooksig: ;hook code in ESI to signal in AL
  3203 0000277C 3C00                <2> 	cmp al, 0
  3204 0000277E 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3205                              <2> ;	xor ebx, ebx
  3206                              <2> ;	mov bl, al
  3207                              <2> ;	shl bl, 2
  3208 00002780 BF[04AE0300]        <2> 	mov edi, sigtable
  3209 00002785 8937                <2> 	mov [edi], esi
  3210                              <2> .quit:
  3211 00002787 E926DBFFFF          <2> 	jmp timerinterrupt
  3212                              <1> %ifdef gui.included
  3213                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3214                              <2> guiint:
  3215 0000278C 3CFD                <2> 	cmp al, 253
  3216 0000278E 0F8491000000        <2> 	je near .getinfo
  3217 00002794 803D[D9890000]01    <2> 	cmp byte [guion], 1
  3218 0000279B 0F8550000000        <2> 	jne near .nogui
  3219 000027A1 3C00                <2> 	cmp al, 0
  3220 000027A3 0F844D000000        <2> 	je near .clear
  3221 000027A9 3C01                <2> 	cmp al, 1
  3222 000027AB 0F84E4000000        <2> 	je near .putpixel
  3223 000027B1 3C02                <2> 	cmp al, 2
  3224 000027B3 0F84E9000000        <2> 	je near .drawtext
  3225 000027B9 3C03                <2> 	cmp al, 3
  3226 000027BB 0F84FC000000        <2> 	je near .drawline
  3227 000027C1 3C04                <2> 	cmp al, 4
  3228 000027C3 0F8407010000        <2> 	je near .drawcircle
  3229 000027C9 3C05                <2> 	cmp al, 5
  3230 000027CB 0F840F010000        <2> 	je near .fillcircle
  3231 000027D1 3C06                <2> 	cmp al, 6
  3232 000027D3 0F8417010000        <2> 	je near .drawsquare
  3233 000027D9 3C07                <2> 	cmp al, 7
  3234 000027DB 0F8422010000        <2> 	je near .fillsquare
  3235 000027E1 3CFE                <2> 	cmp al, 254
  3236 000027E3 0F8464000000        <2> 	je near .setinfo
  3237 000027E9 3CFF                <2> 	cmp al, 255
  3238 000027EB 0F8461000000        <2> 	je near .reset
  3239                              <2> .nogui:
  3240 000027F1 E9BCDAFFFF          <2> 	jmp timerinterrupt
  3241                              <2> 
  3242                              <2> .clear:		;color in bx
  3243 000027F6 66891D[FE710000]    <2> 	mov [background], bx
  3244                              <2> %ifdef gui.background
  3245 000027FD 8B1D[D0710000]      <2> 	mov ebx, [backgroundimage]
  3246 00002803 81FB00000000        <2> 	cmp ebx, 0
  3247 00002809 7410                <2> 	je .clearit
  3248 0000280B C705[D0710000]0000- <2> 	mov dword [backgroundimage], 0
  3249 00002813 0000                <2>
  3250 00002815 891D[91280000]      <2> 	mov [.bgi], ebx
  3251                              <2> .clearit:
  3252                              <2> %endif
  3253 0000281B E84F490000          <2> 	call guiclear
  3254 00002820 E98DDAFFFF          <2> 	jmp timerinterrupt
  3255                              <2> 	
  3256                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3257 00002825 31DB                <2> 	xor ebx, ebx
  3258 00002827 31C9                <2> 	xor ecx, ecx
  3259 00002829 31D2                <2> 	xor edx, edx
  3260 0000282B 381D[D9890000]      <2> 	cmp [guion], bl
  3261 00002831 74BE                <2> 	je .nogui
  3262 00002833 668B1D[FE710000]    <2> 	mov bx, [background]
  3263 0000283A 668B15[0F580000]    <2> 	mov dx, [resolutionx]
  3264 00002841 668B0D[11580000]    <2> 	mov cx, [resolutiony]
  3265 00002848 E965DAFFFF          <2> 	jmp timerinterrupt
  3266                              <2> 	
  3267                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3268 0000284D E960DAFFFF          <2> 	jmp timerinterrupt
  3269                              <2> .reset:		;resets the screen to the original settings
  3270 00002852 66BBCF7B            <2> 	mov bx, background.original
  3271 00002856 66891D[FE710000]    <2> 	mov [background], bx
  3272 0000285D 66BBFFFF            <2> 	mov bx, 0xFFFF
  3273 00002861 66891D[E0780000]    <2> 	mov [colorfont2], bx
  3274                              <2> %ifdef gui.background
  3275 00002868 8B1D[D0710000]      <2> 	mov ebx, [backgroundimage]
  3276 0000286E 81FB00000000        <2> 	cmp ebx, 0
  3277 00002874 750C                <2> 	jne .resetit
  3278 00002876 8B1D[91280000]      <2> 	mov ebx, [.bgi]
  3279 0000287C 891D[D0710000]      <2> 	mov [backgroundimage], ebx
  3280                              <2> .resetit:
  3281                              <2> %endif
  3282 00002882 E8E8480000          <2> 	call guiclear
  3283 00002887 E876490000          <2> 	call reloadallgraphics
  3284 0000288C E921DAFFFF          <2> 	jmp timerinterrupt
  3285                              <2> 
  3286                              <2> %ifdef gui.background
  3287 00002891 00000000            <2> 	.bgi dd 0
  3288                              <2> %endif
  3289                              <2> 	
  3290                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3291 00002895 6689DE              <2> 	mov si, bx
  3292 00002898 E86C600000          <2> 	call putpixel
  3293 0000289D E910DAFFFF          <2> 	jmp timerinterrupt
  3294                              <2> 
  3295                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3296 000028A2 66D1E2              <2> 	shl dx, 1
  3297 000028A5 66891D[E0780000]    <2> 	mov [colorfont2], bx
  3298 000028AC 66893D[FE710000]    <2> 	mov [background], di
  3299 000028B3 E8B54F0000          <2> 	call showstring2
  3300 000028B8 E9F5D9FFFF          <2> 	jmp timerinterrupt
  3301                              <2> 
  3302                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3303 000028BD 6689F0              <2> 	mov ax, si
  3304 000028C0 6689DE              <2> 	mov si, bx
  3305 000028C3 6689FB              <2> 	mov bx, di
  3306 000028C6 E878470000          <2> 	call drawline
  3307 000028CB E9E2D9FFFF          <2> 	jmp timerinterrupt
  3308                              <2> 
  3309                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3310 000028D0 6689F0              <2> 	mov ax, si
  3311 000028D3 6689DE              <2> 	mov si, bx
  3312 000028D6 E8AD420000          <2> 	call drawcircle
  3313 000028DB E9D2D9FFFF          <2> 	jmp timerinterrupt
  3314                              <2> 
  3315                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3316 000028E0 6689F0              <2> 	mov ax, si
  3317 000028E3 6689DE              <2> 	mov si, bx
  3318 000028E6 E8AF430000          <2> 	call fillcircle
  3319 000028EB E9C2D9FFFF          <2> 	jmp timerinterrupt
  3320                              <2> 	
  3321                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3322 000028F0 6689F0              <2> 	mov ax, si
  3323 000028F3 6689DE              <2> 	mov si, bx
  3324 000028F6 6689FB              <2> 	mov bx, di
  3325 000028F9 E8E3490000          <2> 	call drawsquare
  3326 000028FE E9AFD9FFFF          <2> 	jmp timerinterrupt
  3327                              <2> 
  3328                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3329 00002903 6689F0              <2> 	mov ax, si
  3330 00002906 6689DE              <2> 	mov si, bx
  3331 00002909 6689FB              <2> 	mov bx, di
  3332 0000290C E8484A0000          <2> 	call fillsquare
  3333 00002911 E99CD9FFFF          <2> 	jmp timerinterrupt
  3334                              <1> %endif
  3335                              <1> %ifdef sound.included
  3336                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3337                              <2> soundint:
  3338 00002916 E997D9FFFF          <2> 	jmp timerinterrupt
  3339                              <1> %endif
  3340                              <1> %ifdef network.included
  3341                              <1> 	%include 'source/interrupts/19_netint.asm'
  3342                              <1> %endif
  3343                              <1> 
  3344                              <1> termcopy:
  3345                              <1> %ifdef io.serial
  3346                              <1> 	ret
  3347                              <1> %else
  3348                              <1> %ifdef terminal.vsync
  3349 0000291B C605[23290000]01    <1> 	mov byte [termcopyneeded], 1
  3350 00002922 C3                  <1> 	ret
  3351                              <1> %else
  3352                              <1> 	call newtermcopy
  3353                              <1> 	ret
  3354                              <1> %endif
  3355 00002923 00                  <1> 	termcopyneeded db 0
  3356 00002924 00000000            <1> 	termcursorpos dd 0
  3357 00002928 00000000            <1> 	removedvideo dd 0
  3358                              <1> newtermcopy:
  3359 0000292C 60                  <1> 	pusha
  3360 0000292D BF[9CE32B00]        <1> 	mov edi, videobuf
  3361 00002932 31DB                <1> 	xor ebx, ebx
  3362 00002934 881D[23290000]      <1> 	mov [termcopyneeded], bl
  3363 0000293A 8B1D[03260000]      <1> 	mov ebx, [videobufpos]
  3364 00002940 01DF                <1> 	add edi, ebx
  3365 00002942 893D[24290000]      <1> 	mov [termcursorpos], edi
  3366 00002948 E8E2000000          <1> 	call switchtermcursor
  3367 0000294D 803D[D9890000]00    <1> 	cmp byte [guion], 0
  3368 00002954 0F8420000000        <1> 	je near nowincopy
  3369                              <1> %ifdef gui.included
  3370 0000295A C605[EF800000]00    <1> 	mov byte [mouseselecton], 0
  3371 00002961 C605[13240000]01    <1> 	mov byte [termcopyon], 1
  3372 00002968 803D[12240000]01    <1> 	cmp byte [termguion], 1
  3373 0000296F 0F8465540000        <1> 	je near windowvideocopy
  3374                              <1> %endif
  3375 00002975 E9AE000000          <1> 	jmp nocopytermatall
  3376                              <1> nowincopy:
  3377 0000297A BE00000A00          <1> 	mov esi, 0xA0000
  3378 0000297F A1[4B020000]        <1> 	mov eax, [basecache]
  3379 00002984 C1E004              <1> 	shl eax, 4
  3380 00002987 29C6                <1> 	sub esi, eax
  3381 00002989 BF[9CE32B00]        <1> 	mov edi, videobuf
  3382 0000298E 31C9                <1> 	xor ecx, ecx
  3383 00002990 668B0D[09260000]    <1> 	mov cx, [charxy]
  3384                              <1> nowincopy2:
  3385 00002997 8B07                <1> 	mov eax, [edi]
  3386 00002999 81C748D50000        <1> 	add edi, (videobuf2 - videobuf)
  3387 0000299F 8B1F                <1> 	mov ebx, [edi]
  3388 000029A1 8907                <1> 	mov [edi], eax
  3389 000029A3 81EF48D50000        <1> 	sub edi, (videobuf2 - videobuf)
  3390 000029A9 81C702000000        <1> 	add edi, 2
  3391 000029AF 39D8                <1> 	cmp eax, ebx
  3392 000029B1 744B                <1> 	je nopresentwinfont
  3393 000029B3 81EF02000000        <1> 	sub edi, 2
  3394 000029B9 BD[338C0000]        <1> 	mov ebp, fonts
  3395 000029BE 31C0                <1> 	xor eax, eax
  3396 000029C0 668B07              <1> 	mov ax, [edi]
  3397 000029C3 C1E004              <1> 	shl eax, 4
  3398 000029C6 01C5                <1> 	add ebp, eax
  3399 000029C8 81C702000000        <1> 	add edi, 2
  3400 000029CE 668B1F              <1> 	mov bx, [edi]
  3401 000029D1 31D2                <1> 	xor edx, edx
  3402 000029D3 8A15[09260000]      <1> 	mov dl, [charxy]
  3403 000029D9 C1C110              <1> 	rol ecx, 16
  3404 000029DC B110                <1> 	mov cl, 16
  3405                              <1> nowinfont:
  3406 000029DE 8A4500              <1> 	mov al, [ebp]
  3407 000029E1 D0C8                <1> 	ror al, 1
  3408 000029E3 80FB80              <1> 	cmp bl, 0x80
  3409 000029E6 7202                <1> 	jb notnotfont
  3410 000029E8 F6D0                <1> 	not al
  3411                              <1> notnotfont:
  3412 000029EA 8806                <1> 	mov [esi], al
  3413 000029EC 01D6                <1> 	add esi, edx
  3414 000029EE 45                  <1> 	inc ebp
  3415 000029EF FEC9                <1> 	dec cl
  3416 000029F1 80F900              <1> 	cmp cl, 0
  3417 000029F4 75E8                <1> 	jne nowinfont
  3418 000029F6 C1E204              <1> 	shl edx, 4
  3419 000029F9 29D6                <1> 	sub esi, edx
  3420 000029FB C1C110              <1> 	rol ecx, 16
  3421                              <1> nopresentwinfont:
  3422 000029FE 81C702000000        <1> 	add edi, 2
  3423 00002A04 46                  <1> 	inc esi
  3424 00002A05 FEC9                <1> 	dec cl
  3425 00002A07 80F900              <1> 	cmp cl, 0
  3426 00002A0A 758B                <1> 	jne nowincopy2
  3427 00002A0C 8A0D[09260000]      <1> 	mov cl, [charxy]
  3428 00002A12 31D2                <1> 	xor edx, edx
  3429 00002A14 88CA                <1> 	mov dl, cl
  3430 00002A16 29D6                <1> 	sub esi, edx
  3431 00002A18 C1E204              <1> 	shl edx, 4
  3432 00002A1B 01D6                <1> 	add esi, edx
  3433 00002A1D FECD                <1> 	dec ch
  3434 00002A1F 80FD00              <1> 	cmp ch, 0
  3435 00002A22 0F856FFFFFFF        <1> 	jne nowincopy2
  3436                              <1> nocopytermatall:
  3437 00002A28 E802000000          <1> 	call switchtermcursor
  3438 00002A2D 61                  <1> 	popa
  3439 00002A2E C3                  <1> 	ret
  3440                              <1> 	
  3441                              <1> switchtermcursor:
  3442 00002A2F 8B3D[24290000]      <1> 	mov edi, [termcursorpos]
  3443 00002A35 668B4702            <1> 	mov ax, [edi + 2]
  3444 00002A39 668B1F              <1> 	mov bx, [edi]
  3445 00002A3C 663D8000            <1> 	cmp ax, 0x80
  3446 00002A40 7209                <1> 	jb movlargecursorterm
  3447 00002A42 66B80700            <1> 	mov ax, 7
  3448 00002A46 E904000000          <1> 	jmp movedcursorterm
  3449                              <1> movlargecursorterm:
  3450 00002A4B 66B8F000            <1> 	mov ax, 0xF0
  3451                              <1> movedcursorterm:
  3452 00002A4F 66894702            <1> 	mov [edi + 2], ax
  3453 00002A53 6681FB0000          <1> 	cmp bx, 0
  3454 00002A58 7507                <1> 	jne fixednocursorterm
  3455 00002A5A 66BB2000            <1> 	mov bx, ' '
  3456 00002A5E 66891F              <1> 	mov [edi], bx
  3457                              <1> fixednocursorterm:
  3458 00002A61 C3                  <1> 	ret
  3459                              <1> %endif
  3460                                      %include "source/dosints.asm"
  3461                              <1> int20h:
  3462 00002A62 66B8004C            <1> mov ax, 0x4C00
  3463                              <1> int21h:
  3464                              <1> dostosolleros:
  3465 00002A66 6650                <1> 	push ax
  3466 00002A68 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3467 00002A6C 8ED8                <1> 	mov ds, ax
  3468 00002A6E 8EC0                <1> 	mov es, ax
  3469 00002A70 8EE0                <1> 	mov fs, ax
  3470 00002A72 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3471 00002A76 8EE8                <1> 	mov gs, ax
  3472 00002A78 6658                <1> 	pop ax
  3473 00002A7A 9C                  <1> 	pushf
  3474 00002A7B 60                  <1> 	pusha
  3475 00002A7C 80FC01              <1> 	cmp ah, 1
  3476 00002A7F 0F8449000000        <1> 	je near dosgchar
  3477 00002A85 80FC02              <1> 	cmp ah, 2
  3478 00002A88 0F844A000000        <1> 	je near doswchar
  3479 00002A8E 80FC09              <1> 	cmp ah, 9
  3480 00002A91 0F8451000000        <1> 	je near dosprintstr
  3481 00002A97 80FC0A              <1> 	cmp ah, 0xA
  3482 00002A9A 0F8463000000        <1> 	je near dosgetstr
  3483 00002AA0 80FC2B              <1> 	cmp ah, 0x2B
  3484 00002AA3 0F84A2000000        <1> 	je near dosgetdate
  3485 00002AA9 80FC2C              <1> 	cmp ah, 0x2C
  3486 00002AAC 0F84BC000000        <1> 	je near dosgettime
  3487 00002AB2 80FC4C              <1> 	cmp ah, 0x4C
  3488 00002AB5 0F84D1000000        <1> 	je near dosexit
  3489                              <1> backtodos:
  3490 00002ABB 61                  <1> 	popa
  3491 00002ABC 9D                  <1> 	popf
  3492 00002ABD 6650                <1> 	push ax
  3493 00002ABF 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3494 00002AC3 8ED8                <1> 	mov ds, ax
  3495 00002AC5 8EC0                <1> 	mov es, ax
  3496 00002AC7 8EE0                <1> 	mov fs, ax
  3497 00002AC9 8EE8                <1> 	mov gs, ax
  3498 00002ACB 6658                <1> 	pop ax
  3499 00002ACD CF                  <1> 	iret
  3500                              <1> 
  3501                              <1> dosgchar:
  3502 00002ACE E8AEF8FFFF          <1> 	call getchar
  3503 00002AD3 E9E3FFFFFF          <1> 	jmp backtodos
  3504                              <1> 	
  3505                              <1> doswchar:
  3506 00002AD8 88D0                <1> 	mov al, dl
  3507 00002ADA 30E4                <1> 	xor ah, ah
  3508 00002ADC B307                <1> 	mov bl, 7
  3509 00002ADE E81AF9FFFF          <1> 	call prcharint
  3510 00002AE3 E9D3FFFFFF          <1> 	jmp backtodos
  3511                              <1> 	
  3512                              <1> dosprintstr:
  3513 00002AE8 31F6                <1> 	xor esi, esi
  3514 00002AEA 6689D6              <1> 	mov si, dx
  3515 00002AED 81C600004000        <1> 	add esi, dosprogloc
  3516 00002AF3 66B82400            <1> 	mov ax, "$"
  3517 00002AF7 B307                <1> 	mov bl, 7
  3518 00002AF9 E86EF2FFFF          <1> 	call printint
  3519 00002AFE E9B8FFFFFF          <1> 	jmp backtodos
  3520                              <1> 	
  3521                              <1> dosgetstr:
  3522 00002B03 31F6                <1> 	xor esi, esi
  3523 00002B05 6689D6              <1> 	mov si, dx
  3524 00002B08 81C600004000        <1> 	add esi, dosprogloc
  3525 00002B0E B900000000          <1> 	mov ecx, 0
  3526 00002B13 8A0E                <1> 	mov cl, [esi]
  3527 00002B15 81C602000000        <1> 	add esi, 2
  3528 00002B1B 89F7                <1> 	mov edi, esi
  3529 00002B1D 8935[472B0000]      <1> 	mov [stringstart], esi
  3530 00002B23 01CF                <1> 	add edi, ecx
  3531 00002B25 B00A                <1> 	mov al, 10
  3532 00002B27 B307                <1> 	mov bl, 7
  3533 00002B29 E884F3FFFF          <1> 	call rdprintdos
  3534 00002B2E 89F1                <1> 	mov ecx, esi
  3535 00002B30 2B0D[472B0000]      <1> 	sub ecx, [stringstart]
  3536 00002B36 8B35[472B0000]      <1> 	mov esi, [stringstart]
  3537 00002B3C 884EFF              <1> 	mov [esi - 1], cl
  3538 00002B3F 884EFE              <1> 	mov [esi - 2], cl
  3539 00002B42 E974FFFFFF          <1> 	jmp backtodos
  3540 00002B47 00000000            <1> stringstart dd 0
  3541                              <1> 
  3542                              <1> dosgetdate:
  3543 00002B4B E867160000          <1> 	call time
  3544 00002B50 8A0D[CE440000]      <1> 	mov cl, [RTCtimeYear]
  3545 00002B56 B500                <1> 	mov ch, 0
  3546 00002B58 6681C1D007          <1> 	add cx, 2000
  3547 00002B5D 8A35[CD440000]      <1> 	mov dh, [RTCtimeMonth]
  3548 00002B63 8A15[CC440000]      <1> 	mov dl, [RTCtimeDay]
  3549 00002B69 E94DFFFFFF          <1> 	jmp backtodos
  3550                              <1> 
  3551                              <1> dosgettime:
  3552 00002B6E E844160000          <1> 	call time
  3553 00002B73 8A2D[CB440000]      <1> 	mov ch, [RTCtimeHour]
  3554 00002B79 8A0D[CA440000]      <1> 	mov cl, [RTCtimeMinute]
  3555 00002B7F 8A35[C9440000]      <1> 	mov dh, [RTCtimeSecond]
  3556 00002B85 B200                <1> 	mov dl, 0
  3557 00002B87 E92FFFFFFF          <1> 	jmp backtodos
  3558                              <1> 	
  3559                              <1> dosexit:
  3560 00002B8C BE[B4890000]        <1> 	mov esi, line
  3561 00002B91 E8CFF1FFFF          <1> 	call print
  3562 00002B96 61                  <1> 	popa
  3563 00002B97 9D                  <1> 	popf
  3564 00002B98 8B25[08B20300]      <1> 	mov esp, [previousstack]
  3565 00002B9E 31DB                <1> 	xor ebx, ebx
  3566 00002BA0 88C3                <1> 	mov bl, al
  3567 00002BA2 80FB00              <1> 	cmp bl, 0
  3568 00002BA5 0F8540F1FFFF        <1> 	jne near exitprog.error
  3569 00002BAB C3                  <1> 	ret
  3570                                      %include "source/shush.asm"
  3571                              <1> os:
  3572                              <1> setdefenv:
  3573 00002BAC C605[14B20300]2F    <1> 	mov byte [currentfolder], '/'
  3574 00002BB3 C705[10B20300]0100- <1> 	mov dword [currentfolderloc], 1
  3575 00002BBB 0000                <1>
  3576 00002BBD E858F2FFFF          <1> 	call clear
  3577                              <1> 	
  3578                              <1> bootfilecheck:
  3579 00002BC2 803D[18B40300]01    <1> 	cmp byte [ranboot], 1
  3580 00002BC9 0F8421000000        <1> 	je near nobootfile
  3581                              <1> 	%ifdef hardware.automatic
  3582 00002BCF E8A0380000          <1> 		call initializelater ;Initialize components that have debug messages
  3583                              <1> 	%endif
  3584                              <1> 	%ifdef disk.none
  3585                              <1> 	%else
  3586 00002BD4 BF[73890000]        <1> 		mov edi, bootfilename
  3587 00002BD9 BE00004000          <1> 		mov esi, 0x400000
  3588 00002BDE E8E83C0000          <1> 		call loadfile
  3589 00002BE3 81FA00000000        <1> 		cmp edx, 0
  3590 00002BE9 7505                <1> 		jne nobootfile
  3591 00002BEB E84E0E0000          <1> 		call progbatchfound
  3592                              <1> 	%endif
  3593                              <1> nobootfile:	
  3594 00002BF0 C605[18B40300]01    <1> 	mov byte [ranboot], 1
  3595                              <1> 
  3596 00002BF7 BE[02000000]        <1> 	mov esi, signature
  3597                              <1> .sigcopyloop:	;this prevents an odd error
  3598 00002BFC 658A06              <1> 	mov al, [gs:esi]
  3599 00002BFF 8806                <1> 	mov [esi], al
  3600 00002C01 46                  <1> 	inc esi
  3601 00002C02 81FE[10000000]      <1> 	cmp esi, signatureend
  3602 00002C08 72F2                <1> 	jb .sigcopyloop
  3603                              <1> 	
  3604 00002C0A BE[02000000]        <1> 	mov esi, signature
  3605 00002C0F E851F1FFFF          <1> 	call print
  3606 00002C14 8B0D[0C000000]      <1> 	mov ecx, [signatureend - 4]
  3607 00002C1A E828070000          <1> 	call showdec
  3608 00002C1F E83CF1FFFF          <1> 	call printline
  3609 00002C24 BE[90890000]        <1> 	mov esi, userask
  3610 00002C29 E837F1FFFF          <1> 	call print
  3611                              <1> 
  3612                              <1> usercheck:
  3613 00002C2E BE[88C80300]        <1> 	mov esi, buftxt
  3614 00002C33 BF[88CC0300]        <1> 	mov edi, buftxtend
  3615 00002C38 B00A                <1> 	mov al, 10
  3616 00002C3A E85FF2FFFF          <1> 	call rdprint
  3617 00002C3F 56                  <1> 	push esi
  3618 00002C40 BE[9A890000]        <1> 	mov esi, pwdask
  3619 00002C45 E81BF1FFFF          <1> 	call print
  3620 00002C4A 5E                  <1> 	pop esi
  3621 00002C4B 46                  <1> 	inc esi
  3622 00002C4C 8935[4D2D0000]      <1> 	mov [esipass], esi
  3623                              <1> passcheck:
  3624 00002C52 E82AF7FFFF          <1> 	call getchar
  3625 00002C57 3C0A                <1> 	cmp al, 10
  3626 00002C59 0F843E000000        <1> 	je near gotpass
  3627 00002C5F 3C08                <1> 	cmp al, 8
  3628 00002C61 0F8415000000        <1> 	je near backpass
  3629 00002C67 8806                <1> 	mov [esi], al
  3630 00002C69 46                  <1> 	inc esi
  3631 00002C6A 30E4                <1> 	xor ah, ah
  3632 00002C6C B02A                <1> 	mov al, "*"
  3633 00002C6E E88AF7FFFF          <1> 	call prcharint
  3634 00002C73 E9DAFFFFFF          <1> 	jmp passcheck
  3635 00002C78 08200800            <1> backcursor2 db 8," ",8,0
  3636                              <1> backpass:
  3637 00002C7C 3B35[4D2D0000]      <1> 	cmp esi, [esipass]
  3638 00002C82 0F84CAFFFFFF        <1> 	je near passcheck
  3639 00002C88 4E                  <1> 	dec esi
  3640 00002C89 C60600              <1> 	mov byte [esi], 0
  3641 00002C8C 56                  <1> 	push esi
  3642 00002C8D BE[782C0000]        <1> 	mov esi, backcursor2
  3643 00002C92 E8CEF0FFFF          <1> 	call print
  3644 00002C97 5E                  <1> 	pop esi
  3645 00002C98 E9B5FFFFFF          <1> 	jmp passcheck
  3646                              <1> gotpass:
  3647 00002C9D B00A                <1> 	mov al, 10
  3648 00002C9F E859F7FFFF          <1> 	call prcharint
  3649 00002CA4 30C0                <1> 	xor al, al
  3650 00002CA6 31C9                <1> 	xor ecx, ecx
  3651 00002CA8 8806                <1> 	mov [esi], al
  3652 00002CAA BB[B6890000]        <1> 	mov ebx, userlst
  3653                              <1> userfind:
  3654 00002CAF BE[88C80300]        <1> 	mov esi, buftxt
  3655 00002CB4 8A06                <1> 	mov al, [esi]
  3656 00002CB6 3C00                <1> 	cmp al, 0
  3657 00002CB8 0F84EEFEFFFF        <1> 	je near os
  3658 00002CBE 891D[512D0000]      <1> 	mov [usercache], ebx
  3659 00002CC4 E87E030000          <1> 	call tester
  3660 00002CC9 3C01                <1> 	cmp al, 1
  3661 00002CCB 7419                <1> 	je pwdtest
  3662 00002CCD 41                  <1> 	inc ecx
  3663                              <1> nxtuser:
  3664 00002CCE 8A03                <1> 	mov al, [ebx]
  3665 00002CD0 43                  <1> 	inc ebx
  3666 00002CD1 3C00                <1> 	cmp al, 0
  3667 00002CD3 75F9                <1> 	jne nxtuser
  3668 00002CD5 81FB[D9890000]      <1> 	cmp ebx, userlstend
  3669 00002CDB 0F83CBFEFFFF        <1> 	jae near os
  3670 00002CE1 E9C9FFFFFF          <1> 	jmp userfind
  3671                              <1> pwdtest:
  3672 00002CE6 46                  <1> 	inc esi
  3673 00002CE7 43                  <1> 	inc ebx
  3674 00002CE8 E85A030000          <1> 	call tester
  3675 00002CED 3C01                <1> 	cmp al, 1
  3676 00002CEF 7405                <1> 	je pwdrgt
  3677 00002CF1 E9D8FFFFFF          <1> 	jmp nxtuser
  3678                              <1> pwdrgt:
  3679 00002CF6 D1E9                <1> 	shr ecx, 1
  3680 00002CF8 890D[14B40300]      <1> 	mov [uid], ecx
  3681 00002CFE E817F1FFFF          <1> 	call clear
  3682 00002D03 31C9                <1> 	xor ecx, ecx
  3683 00002D05 41                  <1> 	inc ecx
  3684 00002D06 890D[308E2D00]      <1> 	mov [commandbufpos], ecx
  3685                              <1> returnfromexp:
  3686 00002D0C 66B90002            <1> 	mov cx, 200h
  3687 00002D10 BE[88C80300]        <1> 	mov esi, buftxt
  3688 00002D15 8935[43300000]      <1> 	mov [currentcommandloc], esi
  3689 00002D1B E825000000          <1> 	call bufclr
  3690                              <1> clearolddata:
  3691 00002D20 31C0                <1> 	xor eax, eax
  3692 00002D22 A2[19B40300]        <1> 	mov [IFON], al
  3693 00002D27 A2[1AB40300]        <1> 	mov [IFTRUE], al
  3694 00002D2C A2[82B40300]        <1> 	mov [BATCHISON], al
  3695 00002D31 A3[7EB40300]        <1> 	mov [BATCHPOS], eax
  3696 00002D36 A2[83B40300]        <1> 	mov [LOOPON], al
  3697 00002D3B A3[84B40300]        <1> 	mov [LOOPPOS], eax
  3698 00002D40 E939000000          <1> 	jmp nwcmd
  3699                              <1> bufclr:	
  3700 00002D45 30C0                <1> 	xor al, al
  3701 00002D47 8806                <1> 	mov [esi], al
  3702 00002D49 46                  <1> 	inc esi
  3703 00002D4A E2F9                <1> 	loop bufclr
  3704 00002D4C C3                  <1> 	ret
  3705                              <1> 
  3706 00002D4D 00000000            <1> esipass dd 0
  3707 00002D51 [B6890000]          <1> usercache dd userlst
  3708                              <1> 	
  3709                              <1> buftxtclear:
  3710 00002D55 30C0                <1> 	xor al, al
  3711 00002D57 BE[88C80300]        <1> 	mov esi, buftxt
  3712 00002D5C 81FE[88CC0300]      <1> clearbuftxt: cmp esi, buf2
  3713 00002D62 7314                <1> 	jae retbufclr
  3714 00002D64 8806                <1> 	mov [esi], al
  3715 00002D66 46                  <1> 	inc esi
  3716 00002D67 E9F0FFFFFF          <1> 	jmp clearbuftxt
  3717                              <1> 
  3718 00002D6C 39DE                <1> clearitbuf: cmp esi, ebx
  3719 00002D6E 7308                <1> 	jae retbufclr
  3720 00002D70 8806                <1> 	mov [esi], al
  3721 00002D72 46                  <1> 	inc esi
  3722 00002D73 E9F4FFFFFF          <1> 	jmp clearitbuf
  3723 00002D78 C3                  <1> retbufclr: ret
  3724                              <1> 
  3725 00002D79 E900000000          <1> full:	jmp nwcmd
  3726                              <1> 
  3727                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3728                              <1> nwcmd:
  3729 00002D7E FB                  <1> 	sti
  3730 00002D7F 31C0                <1> 	xor eax, eax
  3731 00002D81 3905[5F2F0000]      <1> 	cmp [nextcommandloc], eax
  3732 00002D87 7416                <1> 	je nomultiplecommand
  3733 00002D89 8B35[5F2F0000]      <1> 	mov esi, [nextcommandloc]
  3734 00002D8F 8935[632F0000]      <1> 	mov [thiscommandloc], esi
  3735 00002D95 E8D2010000          <1> 	call fixvariables
  3736 00002D9A E9DFFFFFFF          <1> 	jmp nwcmd
  3737                              <1> nomultiplecommand:
  3738 00002D9F A3[632F0000]        <1> 	mov [thiscommandloc], eax
  3739 00002DA4 3805[8E6A0000]      <1> 	cmp [threadson], al
  3740 00002DAA 7405                <1> 	je noclinwcmd
  3741 00002DAC A2[8E6A0000]        <1> 	mov [threadson], al
  3742                              <1> noclinwcmd:
  3743 00002DB1 B001                <1> 	mov al, 1
  3744 00002DB3 3805[82B40300]      <1> 	cmp [BATCHISON], al
  3745 00002DB9 7501                <1> 	jne cancel
  3746 00002DBB C3                  <1> 	ret
  3747 00002DBC 30C0                <1> cancel:	xor al, al
  3748 00002DBE A2[19B40300]        <1> 	mov [IFON], al
  3749 00002DC3 A2[82B40300]        <1> 	mov [BATCHISON], al
  3750 00002DC8 B05B                <1> 	mov al, '['
  3751 00002DCA 66BB0700            <1> 	mov bx, 7
  3752 00002DCE E841F6FFFF          <1> 	call prcharq
  3753 00002DD3 8B35[512D0000]      <1> 	mov esi, [usercache]
  3754 00002DD9 E863EFFFFF          <1> 	call printquiet
  3755 00002DDE BE[A4890000]        <1> 	mov esi, computer
  3756 00002DE3 E859EFFFFF          <1> 	call printquiet
  3757 00002DE8 BE[14B20300]        <1> 	mov esi, currentfolder
  3758 00002DED 0335[0CB20300]      <1> 	add esi, [lastfolderloc]
  3759 00002DF3 E849EFFFFF          <1> 	call printquiet
  3760 00002DF8 BE[AF890000]        <1> 	mov esi, endprompt
  3761 00002DFD E863EFFFFF          <1> 	call print
  3762 00002E02 E84EFFFFFF          <1> 	call buftxtclear
  3763 00002E07 BE[88C80300]        <1> 	mov esi, buftxt
  3764 00002E0C C605[6A230000]01    <1> 	mov byte [commandedit], 1
  3765 00002E13 B00A                <1> 	mov al, 10
  3766 00002E15 66BB0700            <1> 	mov bx, 7
  3767 00002E19 BF[88CC0300]        <1> 	mov edi, buftxtend
  3768 00002E1E E87BF0FFFF          <1> 	call rdprint
  3769 00002E23 C605[6A230000]00    <1> 	mov byte [commandedit], 0
  3770 00002E2A 803D[88C80300]00    <1> 	cmp byte [buftxt], 0
  3771 00002E31 0F8447FFFFFF        <1> 	je near nwcmd
  3772 00002E37 8B35[308E2D00]      <1> gotcmd:	mov esi, [commandbufpos]
  3773 00002E3D 8935[2C8E2D00]      <1> 	mov [lastcommandpos], esi
  3774 00002E43 FF05[388E2D00]      <1> 	inc dword [commandsentered]
  3775 00002E49 BF[88C80300]        <1> 	mov edi, buftxt
  3776 00002E4E 81C6[3C8E2D00]      <1> 	add esi, commandbuf
  3777 00002E54 81FE[3C9E2D00]      <1> 	cmp esi, commandbufend
  3778 00002E5A 7605                <1> 	jbe copycommand
  3779 00002E5C BE[3C8E2D00]        <1> 	mov esi, commandbuf
  3780                              <1> copycommand:
  3781 00002E61 8A07                <1> 	mov al, [edi]
  3782 00002E63 8806                <1> 	mov [esi], al
  3783 00002E65 47                  <1> 	inc edi
  3784 00002E66 46                  <1> 	inc esi
  3785 00002E67 3C00                <1> 	cmp al, 0
  3786 00002E69 7412                <1> 	je donecopy
  3787 00002E6B 81FE[3C9E2D00]      <1> 	cmp esi, commandbufend
  3788 00002E71 76EE                <1> 	jbe copycommand
  3789 00002E73 BE[3C8E2D00]        <1> 	mov esi, commandbuf
  3790 00002E78 E9E4FFFFFF          <1> 	jmp copycommand
  3791                              <1> donecopy:
  3792 00002E7D 81EE[3C8E2D00]      <1> 	sub esi, commandbuf
  3793 00002E83 8935[308E2D00]      <1> 	mov [commandbufpos], esi
  3794 00002E89 E8D9000000          <1> 	call run
  3795 00002E8E E9EBFEFFFF          <1> 	jmp nwcmd
  3796                              <1> 
  3797 00002E93 E8BDFEFFFF          <1> input:	call buftxtclear
  3798 00002E98 BE[88C80300]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3799 00002E9D BF[88CC0300]        <1> 	mov edi, buftxtend
  3800 00002EA2 B00A                <1> stdin:	mov al, 10
  3801 00002EA4 B307                <1> 	mov bl, 7
  3802 00002EA6 E8F3EFFFFF          <1> 	call rdprint
  3803 00002EAB C3                  <1> 	ret
  3804                              <1> 
  3805                              <1> replacevariable:
  3806 00002EAC 8A4601              <1> 	mov al, [esi + 1]
  3807 00002EAF C64601FF            <1> 	mov byte [esi + 1], 255
  3808 00002EB3 3C24                <1> 	cmp al, "$"
  3809 00002EB5 0F84B1000000        <1> 	je near fixvariables
  3810 00002EBB 884601              <1> 	mov [esi + 1], al
  3811 00002EBE 56                  <1> 	push esi
  3812 00002EBF 81EE[88C80300]      <1> 	sub esi, buftxt
  3813 00002EC5 89F7                <1> 	mov edi, esi
  3814 00002EC7 81C6[88C80300]      <1> 	add esi, buftxt
  3815 00002ECD 47                  <1> 	inc edi
  3816 00002ECE BB[88B40300]        <1> 	mov ebx, variables
  3817 00002ED3 E80C180000          <1> 	call nxtvrech
  3818 00002ED8 89F7                <1> 	mov edi, esi
  3819 00002EDA 31DB                <1> 	xor ebx, ebx
  3820 00002EDC 4E                  <1> 	dec esi
  3821                              <1> findvarname:
  3822 00002EDD 4E                  <1> 	dec esi
  3823 00002EDE 8A06                <1> 	mov al, [esi]
  3824 00002EE0 43                  <1> 	inc ebx
  3825 00002EE1 3C04                <1> 	cmp al, 4
  3826 00002EE3 75F8                <1> 	jne findvarname
  3827 00002EE5 5E                  <1> 	pop esi
  3828                              <1> replacevarloop:
  3829 00002EE6 8A07                <1> 	mov al, [edi]
  3830 00002EE8 3C00                <1> 	cmp al, 0
  3831 00002EEA 0F8416000000        <1> 	je near compressbuftxt
  3832 00002EF0 81FB00000000        <1> 	cmp ebx, 0
  3833 00002EF6 0F8419000000        <1> 	je near expandbuftxt
  3834 00002EFC 8806                <1> 	mov [esi], al
  3835 00002EFE 4B                  <1> 	dec ebx
  3836 00002EFF 46                  <1> 	inc esi
  3837 00002F00 47                  <1> 	inc edi
  3838 00002F01 E9E0FFFFFF          <1> 	jmp replacevarloop
  3839                              <1> compressbuftxt:
  3840 00002F06 8A041E              <1> 	mov al, [esi + ebx]
  3841 00002F09 8806                <1> 	mov [esi], al
  3842 00002F0B 46                  <1> 	inc esi
  3843 00002F0C 3C00                <1> 	cmp al, 0
  3844 00002F0E 75F6                <1> 	jne compressbuftxt
  3845 00002F10 E957000000          <1> 	jmp fixvariables
  3846                              <1> expandbuftxt:
  3847 00002F15 89F1                <1> 	mov ecx, esi
  3848 00002F17 8A26                <1> 	mov ah, [esi]
  3849                              <1> expandbuftxtlp:
  3850 00002F19 8A1E                <1> 	mov bl, [esi]
  3851 00002F1B 46                  <1> 	inc esi
  3852 00002F1C 8A3E                <1> 	mov bh, [esi]
  3853 00002F1E 8826                <1> 	mov [esi], ah
  3854 00002F20 88FC                <1> 	mov ah, bh
  3855 00002F22 80FB00              <1> 	cmp bl, 0
  3856 00002F25 75F2                <1> 	jne expandbuftxtlp
  3857 00002F27 89CE                <1> 	mov esi, ecx
  3858 00002F29 8806                <1> 	mov [esi], al
  3859 00002F2B 47                  <1> 	inc edi
  3860 00002F2C 8A07                <1> 	mov al, [edi]
  3861 00002F2E 3C00                <1> 	cmp al, 0
  3862 00002F30 0F8436000000        <1> 	je near fixvariables
  3863 00002F36 46                  <1> 	inc esi
  3864 00002F37 E9D9FFFFFF          <1> 	jmp expandbuftxt
  3865                              <1> multipleprogline:
  3866 00002F3C 30E4                <1> 	xor ah, ah
  3867 00002F3E 8826                <1> 	mov [esi], ah
  3868 00002F40 46                  <1> 	inc esi
  3869 00002F41 8935[5F2F0000]      <1> 	mov [nextcommandloc], esi
  3870 00002F47 E93E000000          <1> 	jmp donefixvariables
  3871                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3872 00002F4C 46                  <1> 	inc esi
  3873 00002F4D 8A06                <1> 	mov al, [esi]
  3874 00002F4F C606FF              <1> 	mov byte [esi], 255
  3875 00002F52 3C23                <1> 	cmp al, '#'
  3876 00002F54 7416                <1> 	je fixvariables
  3877 00002F56 4E                  <1> 	dec esi
  3878 00002F57 C60600              <1> 	mov byte [esi], 0
  3879 00002F5A E90D000000          <1> 	jmp fixvariables
  3880                              <1> 	
  3881 00002F5F 00000000            <1> nextcommandloc dd 0
  3882 00002F63 00000000            <1> thiscommandloc dd 0	
  3883                              <1> run:
  3884 00002F67 BE[88C80300]        <1> 	mov esi, buftxt
  3885                              <1> fixvariables:
  3886 00002F6C 46                  <1> 	inc esi
  3887 00002F6D 8A06                <1> 	mov al, [esi]
  3888 00002F6F 3C23                <1> 	cmp al, '#'	;inline comment
  3889 00002F71 74D9                <1> 	je inlinecomment
  3890 00002F73 3C24                <1> 	cmp al, '$' ;variable
  3891 00002F75 0F8431FFFFFF        <1> 	je near replacevariable
  3892 00002F7B 3C3B                <1> 	cmp al, ';' ;program list
  3893 00002F7D 74BD                <1> 	je multipleprogline
  3894 00002F7F 3C00                <1> 	cmp al, 0
  3895 00002F81 75E9                <1> 	jne fixvariables
  3896 00002F83 31C0                <1> 	xor eax, eax
  3897 00002F85 A3[5F2F0000]        <1> 	mov [nextcommandloc], eax
  3898                              <1> donefixvariables:
  3899 00002F8A 803D[8D350000]00    <1> 	cmp byte [indexdone], 0
  3900 00002F91 7505                <1> 	jne progtest
  3901 00002F93 E857050000          <1> 	call indexfiles
  3902                              <1> progtest:
  3903 00002F98 31C0                <1> 	xor eax, eax
  3904 00002F9A BB[08AE0300]        <1> 	mov ebx, fileindex
  3905 00002F9F 668B03              <1> prgnxt:	mov ax, [ebx]
  3906 00002FA2 B1FF                <1> 	mov cl, 255
  3907 00002FA4 B52C                <1> 	mov ch, 44
  3908 00002FA6 6639C8              <1> 	cmp ax, cx
  3909 00002FA9 740E                <1> 	je fndprg
  3910 00002FAB 43                  <1> 	inc ebx
  3911 00002FAC 81FB[08B20300]      <1> 	cmp ebx, fileindexend
  3912 00002FB2 7363                <1> 	jae prgnf
  3913 00002FB4 E9E6FFFFFF          <1> 	jmp prgnxt
  3914 00002FB9 81C302000000        <1> fndprg: add ebx, 2
  3915 00002FBF 31C9                <1> 	xor ecx, ecx
  3916 00002FC1 BE[88C80300]        <1> 	mov esi, buftxt
  3917 00002FC6 390D[632F0000]      <1> 	cmp [thiscommandloc], ecx
  3918 00002FCC 7406                <1> 	je noprgtstmultiple
  3919 00002FCE 8B35[632F0000]      <1> 	mov esi, [thiscommandloc]
  3920                              <1> noprgtstmultiple:
  3921 00002FD4 E8AF000000          <1> 	call cndtest
  3922 00002FD9 3C01                <1> 	cmp al, 1
  3923 00002FDB 7305                <1> 	jae prggood
  3924 00002FDD E9BDFFFFFF          <1> 	jmp prgnxt
  3925 00002FE2 81FB[08B20300]      <1> prggood: cmp ebx, fileindexend
  3926 00002FE8 7358                <1> 	jae prgdn
  3927 00002FEA 31C0                <1> 	xor eax, eax
  3928 00002FEC BE[88C80300]        <1> 	mov esi, buftxt
  3929 00002FF1 3905[632F0000]      <1> 	cmp [thiscommandloc], eax
  3930 00002FF7 7406                <1> 	je noprggoodmul
  3931 00002FF9 8B35[632F0000]      <1> 	mov esi, [thiscommandloc]
  3932                              <1> noprggoodmul:
  3933 00002FFF 8935[43300000]      <1> 	mov [currentcommandloc], esi
  3934 00003005 81C303000000        <1> 	add ebx, 3
  3935 0000300B 8B3B                <1> 	mov edi, [ebx]
  3936 0000300D C605[8E6A0000]02    <1> 	mov byte [threadson], 2
  3937 00003014 FFD7                <1> 	call edi
  3938 00003016 C3                  <1> 	ret
  3939                              <1> prgnf:	
  3940 00003017 8B35[43300000]      <1> 	mov esi, [currentcommandloc]
  3941 0000301D 8A06                <1> 	mov al, [esi]
  3942 0000301F 3C00                <1> 	cmp al, 0
  3943 00003021 741F                <1> 	je prgdn
  3944 00003023 BE[7B890000]        <1> 	mov esi, notfound1
  3945 00003028 E838EDFFFF          <1> 	call print
  3946 0000302D 8B35[43300000]      <1> 	mov esi, [currentcommandloc]
  3947 00003033 E82DEDFFFF          <1> 	call print
  3948 00003038 BE[83890000]        <1> 	mov esi, notfound2
  3949 0000303D E823EDFFFF          <1> 	call print
  3950 00003042 C3                  <1> prgdn:	ret
  3951                              <1> 
  3952 00003043 00000000            <1> currentcommandloc dd 0
  3953                              <1> 
  3954                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3955 00003047 6631C0              <1> 	xor ax, ax
  3956 0000304A 8A06                <1> retest:	mov al, [esi]
  3957 0000304C 8A23                <1> 	mov ah, [ebx]
  3958 0000304E 3C00                <1> 	cmp al, 0
  3959 00003050 740B                <1> 	je testtrue
  3960 00003052 38E0                <1> 	cmp al, ah
  3961 00003054 750F                <1> 	jne testfalse
  3962 00003056 43                  <1> 	inc ebx
  3963 00003057 46                  <1> 	inc esi
  3964 00003058 E9EDFFFFFF          <1> 	jmp retest
  3965                              <1> testtrue:
  3966 0000305D 80FC00              <1> 	cmp ah, 0
  3967 00003060 7503                <1> 	jne testfalse
  3968 00003062 B001                <1> 	mov al, 1
  3969 00003064 C3                  <1> 	ret
  3970                              <1> testfalse:
  3971 00003065 30C0                <1> 	xor al, al
  3972 00003067 C3                  <1> 	ret
  3973                              <1> 
  3974                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3975 00003068 30C0                <1> 	xor al, al
  3976                              <1> opretest:
  3977 0000306A 8A06                <1> 	mov al, [esi]
  3978 0000306C 8A23                <1> 	mov ah, [ebx]
  3979 0000306E 38E0                <1> 	cmp al, ah
  3980 00003070 7513                <1> 	jne optestfalse
  3981 00003072 80FC00              <1> 	cmp ah, 0
  3982 00003075 7407                <1> 	je optesttrue
  3983 00003077 43                  <1> 	inc ebx
  3984 00003078 46                  <1> 	inc esi
  3985 00003079 E9ECFFFFFF          <1> 	jmp opretest
  3986                              <1> optesttrue:
  3987 0000307E 3C00                <1> 	cmp al, 0
  3988 00003080 7503                <1> 	jne optestfalse
  3989 00003082 B001                <1> 	mov al, 1
  3990 00003084 C3                  <1> 	ret
  3991                              <1> optestfalse:
  3992 00003085 30C0                <1> 	xor al, al
  3993 00003087 C3                  <1> 	ret
  3994                              <1> 
  3995                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3996 00003088 30C0                <1> 	xor al, al
  3997 0000308A 8A06                <1> cndretest:	mov al, [esi]
  3998 0000308C 8A23                <1> 	mov ah, [ebx]
  3999 0000308E 38CC                <1> 	cmp ah, cl
  4000 00003090 740B                <1> 	je cndtesttrue
  4001 00003092 38E0                <1> 	cmp al, ah
  4002 00003094 750E                <1> 	jne cndtestfalse
  4003 00003096 43                  <1> 	inc ebx
  4004 00003097 46                  <1> 	inc esi
  4005 00003098 E9EDFFFFFF          <1> 	jmp cndretest
  4006                              <1> cndtesttrue:
  4007 0000309D 38C8                <1> 	cmp al, cl
  4008 0000309F 7506                <1> 	jne cndtestalmost
  4009 000030A1 B001                <1> 	mov al, 1
  4010 000030A3 C3                  <1> 	ret
  4011                              <1> cndtestfalse:
  4012 000030A4 30C0                <1> 	xor al, al
  4013 000030A6 C3                  <1> 	ret
  4014                              <1> cndtestalmost:
  4015 000030A7 B002                <1> 	mov al, 2
  4016 000030A9 C3                  <1> 	ret
  4017                              <1> 	
  4018                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  4019                              <1> 		                ;ends if array seperator is found backwards after 0
  4020                              <1> 	arnxt:	      
  4021 000030AA 88E8                <1> 		mov al, ch
  4022 000030AC 88CC                <1> 		mov ah, cl        
  4023 000030AE 663906              <1> 		cmp [esi], ax
  4024 000030B1 744E                <1> 		je ardn
  4025 000030B3 66390E              <1> 		cmp [esi], cx
  4026 000030B6 740A                <1> 		je arfnd
  4027 000030B8 46                  <1> 		inc esi
  4028 000030B9 39DE                <1> 		cmp esi, ebx
  4029 000030BB 7344                <1> 		jae ardn
  4030 000030BD E9E8FFFFFF          <1> 		jmp arnxt
  4031 000030C2 81C602000000        <1> 	arfnd: add esi, 2
  4032 000030C8 891D[02310000]      <1> 		mov [arbx], ebx
  4033 000030CE 890D[06310000]      <1> 		mov [arcx], ecx
  4034 000030D4 E88CECFFFF          <1> 		call print
  4035 000030D9 8935[08310000]      <1> 		mov [arsi], esi
  4036 000030DF E87CECFFFF          <1> 		call printline
  4037 000030E4 8B1D[02310000]      <1> 		mov ebx, [arbx]
  4038 000030EA 668B0D[06310000]    <1> 		mov cx, [arcx]
  4039 000030F1 8B35[08310000]      <1> 		mov esi, [arsi]
  4040 000030F7 46                  <1> 		inc esi
  4041 000030F8 39DE                <1> 		cmp esi, ebx
  4042 000030FA 7305                <1> 		jae ardn
  4043 000030FC E9A9FFFFFF          <1> 		jmp arnxt
  4044 00003101 C3                  <1> 	ardn:	ret
  4045 00003102 00000000            <1> arbx:	dw 0,0
  4046 00003106 0000                <1> arcx:	db 0,0
  4047 00003108 00000000            <1> arsi:	dw 0,0
  4048                              <1> 
  4049                              <1> clearbuffer:
  4050 0000310C BE[88CC0300]        <1> 	mov esi, buf2
  4051 00003111 B030                <1> 	mov al, '0'
  4052 00003113 81FE[9CCC0300]      <1> clearbuf: cmp esi, numbuf
  4053 00003119 7308                <1> 	jae doneclearbuff
  4054 0000311B 8806                <1> 	mov [esi], al
  4055 0000311D 46                  <1> 	inc esi
  4056 0000311E E9F0FFFFFF          <1> 	jmp clearbuf
  4057                              <1> doneclearbuff: 
  4058 00003123 C3                  <1> 		ret
  4059                              <1> 
  4060                              <1> convert:
  4061 00003124 4E                  <1> 	dec esi
  4062 00003125 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  4063                              <1> .lp:
  4064 00003127 89DE                <1> 	mov esi, ebx
  4065 00003129 81EE09000000        <1> 	sub esi, 9
  4066 0000312F 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  4067 00003135 720D                <1> 	jb .8
  4068 00003137 81E900CA9A3B        <1> 	sub ecx, 1000000000
  4069 0000313D FE06                <1> 	inc byte [esi]
  4070 0000313F E9E3FFFFFF          <1> 	jmp .lp
  4071 00003144 46                  <1> .8:	inc esi
  4072 00003145 81F900E1F505        <1> 	cmp ecx, 100000000
  4073 0000314B 720D                <1> 	jb .7
  4074 0000314D 81E900E1F505        <1> 	sub ecx, 100000000
  4075 00003153 FE06                <1> 	inc byte [esi]
  4076 00003155 E9CDFFFFFF          <1> 	jmp .lp
  4077 0000315A 46                  <1> .7:	inc esi
  4078 0000315B 81F980969800        <1> 	cmp ecx, 10000000
  4079 00003161 720D                <1> 	jb .6
  4080 00003163 81E980969800        <1> 	sub ecx, 10000000
  4081 00003169 FE06                <1> 	inc byte [esi]
  4082 0000316B E9B7FFFFFF          <1> 	jmp .lp
  4083 00003170 46                  <1> .6:	inc esi
  4084 00003171 81F940420F00        <1> 	cmp ecx, 1000000
  4085 00003177 720D                <1> 	jb .5
  4086 00003179 81E940420F00        <1> 	sub ecx, 1000000
  4087 0000317F FE06                <1> 	inc byte [esi]
  4088 00003181 E9A1FFFFFF          <1> 	jmp .lp
  4089 00003186 46                  <1> .5:	inc esi
  4090 00003187 81F9A0860100        <1> 	cmp ecx, 100000
  4091 0000318D 720D                <1> 	jb .4
  4092 0000318F 81E9A0860100        <1> 	sub ecx, 100000
  4093 00003195 FE06                <1> 	inc byte [esi]
  4094 00003197 E98BFFFFFF          <1> 	jmp .lp
  4095 0000319C 46                  <1> .4:	inc esi
  4096 0000319D 81F910270000        <1> 	cmp ecx, 10000
  4097 000031A3 720D                <1> 	jb .3
  4098 000031A5 81E910270000        <1> 	sub ecx, 10000
  4099 000031AB FE06                <1> 	inc byte [esi]
  4100 000031AD E975FFFFFF          <1> 	jmp .lp
  4101 000031B2 46                  <1> .3:	inc esi
  4102 000031B3 81F9E8030000        <1> 	cmp ecx, 1000
  4103 000031B9 720D                <1> 	jb .2
  4104 000031BB 81E9E8030000        <1> 	sub ecx, 1000
  4105 000031C1 FE06                <1> 	inc byte [esi]
  4106 000031C3 E95FFFFFFF          <1> 	jmp .lp
  4107 000031C8 46                  <1> .2:	inc esi
  4108 000031C9 81F964000000        <1> 	cmp ecx, 100
  4109 000031CF 720D                <1> 	jb .1
  4110 000031D1 81E964000000        <1> 	sub ecx, 100
  4111 000031D7 FE06                <1> 	inc byte [esi]
  4112 000031D9 E949FFFFFF          <1> 	jmp .lp
  4113 000031DE 46                  <1> .1:	inc esi
  4114 000031DF 81F90A000000        <1> 	cmp ecx, 10
  4115 000031E5 720D                <1> 	jb .0
  4116 000031E7 81E90A000000        <1> 	sub ecx, 10
  4117 000031ED FE06                <1> 	inc byte [esi]
  4118 000031EF E933FFFFFF          <1> 	jmp .lp
  4119 000031F4 46                  <1> .0:	inc esi
  4120 000031F5 81F901000000        <1> 	cmp ecx, 1
  4121 000031FB 720D                <1> 	jb .dn
  4122 000031FD 81E901000000        <1> 	sub ecx, 1
  4123 00003203 FE06                <1> 	inc byte [esi]
  4124 00003205 E91DFFFFFF          <1> 	jmp .lp
  4125                              <1> .dn:
  4126 0000320A C3                  <1> 	ret
  4127                              <1> 
  4128                              <1> 	
  4129                              <1> 
  4130 0000320B 00<rept>            <1> hexnumber times 8 db 0
  4131 00003213 202000              <1> hexnumberend db "  ",0
  4132                              <1> 
  4133                              <1> converthex:
  4134                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  4135 00003216 56                  <1> 	push esi
  4136 00003217 B030                <1> 	mov al, "0"
  4137 00003219 39FE                <1> .clearlp: cmp esi, edi
  4138 0000321B 7308                <1> 	jae .doneclear
  4139 0000321D 8806                <1> 	mov [esi], al
  4140 0000321F 46                  <1> 	inc esi
  4141 00003220 E9F4FFFFFF          <1> 	jmp .clearlp
  4142                              <1> .doneclear:
  4143 00003225 81EE02000000        <1> 	sub esi, 2
  4144 0000322B 89C8                <1> 	mov eax, ecx
  4145                              <1> .loop:
  4146 0000322D 30FF                <1> 	xor bh, bh
  4147 0000322F 88C3                <1> 	mov bl, al
  4148 00003231 66C1E304            <1> 	shl bx, 4
  4149 00003235 C0EB04              <1> 	shr bl, 4
  4150 00003238 86DF                <1> 	xchg bl, bh ;they are backwards
  4151 0000323A 80C330              <1> 	add bl, 48
  4152 0000323D 80FB39              <1> 	cmp bl, "9"
  4153 00003240 7609                <1> 	jbe .goodbl
  4154 00003242 80EB30              <1> 	sub bl, 48
  4155 00003245 80EB0A              <1> 	sub bl, 0xA
  4156 00003248 80C341              <1> 	add bl, "A"
  4157                              <1> .goodbl:
  4158 0000324B 80C730              <1> 	add bh, 48
  4159 0000324E 80FF39              <1> 	cmp bh, "9"
  4160 00003251 7609                <1> 	jbe .goodbh
  4161 00003253 80EF30              <1> 	sub bh, 48
  4162 00003256 80EF0A              <1> 	sub bh, 0xA
  4163 00003259 80C741              <1> 	add bh, "A"
  4164                              <1> .goodbh:
  4165 0000325C C1E808              <1> 	shr eax, 8
  4166 0000325F 66891E              <1> 	mov [esi], bx
  4167 00003262 81EE02000000        <1> 	sub esi, 2
  4168 00003268 3B3424              <1> 	cmp esi, [esp]
  4169 0000326B 7207                <1> 	jb .done
  4170 0000326D 3D00000000          <1> 	cmp eax, 0
  4171 00003272 75B9                <1> 	jne .loop
  4172                              <1> .done:
  4173 00003274 5E                  <1> 	pop esi
  4174 00003275 C3                  <1> 	ret
  4175                              <1> 	
  4176                              <1> 	
  4177 00003276 00                  <1> smallhex db 0
  4178 00003277 01                  <1> firsthexshown db 1
  4179                              <1> showhexsmall:
  4180 00003278 C605[76320000]01    <1> 	mov byte [smallhex], 1
  4181 0000327F E808000000          <1> 	call showhex
  4182 00003284 C605[76320000]00    <1> 	mov byte [smallhex], 0
  4183 0000328B C3                  <1> 	ret
  4184                              <1> showhex:
  4185 0000328C 60                  <1> 	pusha
  4186 0000328D BE[0B320000]        <1> 	mov esi, hexnumber
  4187 00003292 BF[13320000]        <1> 	mov edi, hexnumberend
  4188 00003297 E87AFFFFFF          <1> 	call converthex
  4189 0000329C 803D[77320000]01    <1> 	cmp byte [firsthexshown], 1
  4190 000032A3 7503                <1> 	jne .show
  4191 000032A5 6631D2              <1> 	xor dx, dx
  4192                              <1> .show:
  4193 000032A8 803D[77320000]03    <1> 	cmp byte [firsthexshown], 3
  4194 000032AF 7505                <1> 	jne .nonewhexline
  4195 000032B1 E8AAEAFFFF          <1> 	call printline
  4196                              <1> .nonewhexline:
  4197 000032B6 803D[77320000]04    <1> 	cmp byte [firsthexshown], 4
  4198 000032BD 7522                <1> 	jne .notab
  4199 000032BF B1A0                <1> 	mov cl, 160
  4200 000032C1 28D1                <1> 	sub cl, dl
  4201 000032C3 C0E905              <1> 	shr cl, 5
  4202 000032C6 C0E105              <1> 	shl cl, 5
  4203 000032C9 80F900              <1> 	cmp cl, 0
  4204 000032CC 750A                <1> 	jne .nonewline
  4205 000032CE E88DEAFFFF          <1> 	call printline
  4206 000032D3 E909000000          <1> 	jmp .notab
  4207                              <1> .nonewline:
  4208 000032D8 80C20F              <1> 	add dl, 15
  4209 000032DB C0EA04              <1> 	shr dl, 4
  4210 000032DE C0E204              <1> 	shl dl, 4
  4211                              <1> .notab:
  4212 000032E1 BE[0B320000]        <1> 	mov esi, hexnumber
  4213 000032E6 803D[76320000]01    <1> 	cmp byte [smallhex],1
  4214 000032ED 7506                <1> 	jne .nosmall
  4215 000032EF 81C606000000        <1> 	add esi, 6
  4216                              <1> .nosmall:
  4217 000032F5 803D[77320000]05    <1> 	cmp byte [firsthexshown], 5
  4218 000032FC 750A                <1> 	jne .noquiet
  4219 000032FE E83EEAFFFF          <1> 	call printquiet
  4220 00003303 E918000000          <1> 	jmp .donequiet
  4221                              <1> .noquiet:
  4222 00003308 803D[77320000]06    <1> 	cmp byte [firsthexshown], 6
  4223 0000330F 750A                <1> 	jne .normal
  4224 00003311 E83EEAFFFF          <1> 	call printhighlight
  4225 00003316 E905000000          <1> 	jmp .donequiet
  4226                              <1> .normal:
  4227 0000331B E845EAFFFF          <1> 	call print
  4228                              <1> .donequiet:
  4229 00003320 803D[77320000]02    <1> 	cmp byte [firsthexshown], 2
  4230 00003327 7505                <1> 	jne .shown
  4231 00003329 E832EAFFFF          <1> 	call printline
  4232                              <1> .shown:
  4233 0000332E C605[77320000]00    <1> 	mov byte [firsthexshown], 0
  4234 00003335 61                  <1> 	popa
  4235 00003336 C3                  <1> 	ret
  4236                              <1> 
  4237                              <1> 
  4238 00003337 303030303030303030- <1> decnumber db "00000000000000"
  4239 00003340 3030303030          <1>
  4240 00003345 2000                <1> decnumberend: db " ",0
  4241                              <1> 
  4242                              <1> showdec: ;same as showhex, just uses decimal conversion
  4243 00003347 60                  <1> 	pusha
  4244 00003348 BF[37330000]        <1> 	mov edi, decnumber
  4245 0000334D BE[45330000]        <1> 	mov esi, decnumberend
  4246                              <1> .clear:
  4247 00003352 C60730              <1> 	mov byte [edi], '0'
  4248 00003355 47                  <1> 	inc edi
  4249 00003356 39F7                <1> 	cmp edi, esi
  4250 00003358 72F8                <1> 	jb .clear
  4251 0000335A BF[37330000]        <1> 	mov edi, decnumber
  4252 0000335F E8C0FDFFFF          <1> 	call convert
  4253 00003364 803D[77320000]01    <1> 	cmp byte [firsthexshown], 1
  4254 0000336B 7503                <1> 	jne .show
  4255 0000336D 6631D2              <1> 	xor dx, dx
  4256                              <1> .show:
  4257 00003370 803D[77320000]03    <1> 	cmp byte [firsthexshown], 3
  4258 00003377 7505                <1> 	jne .nonewdecline
  4259 00003379 E8E2E9FFFF          <1> 	call printline
  4260                              <1> .nonewdecline:
  4261 0000337E 803D[77320000]04    <1> 	cmp byte [firsthexshown], 4
  4262 00003385 7522                <1> 	jne .notab
  4263 00003387 B1A0                <1> 	mov cl, 160
  4264 00003389 28D1                <1> 	sub cl, dl
  4265 0000338B C0E905              <1> 	shr cl, 5
  4266 0000338E C0E105              <1> 	shl cl, 5
  4267 00003391 80F900              <1> 	cmp cl, 0
  4268 00003394 750A                <1> 	jne .nonewline
  4269 00003396 E8C5E9FFFF          <1> 	call printline
  4270 0000339B E909000000          <1> 	jmp .notab
  4271                              <1> .nonewline:
  4272 000033A0 80C20F              <1> 	add dl, 15
  4273 000033A3 C0EA04              <1> 	shr dl, 4
  4274 000033A6 C0E204              <1> 	shl dl, 4
  4275                              <1> .notab:
  4276 000033A9 BE[37330000]        <1> 	mov esi, decnumber
  4277 000033AE 4E                  <1> 	dec esi
  4278                              <1> .sifind:
  4279 000033AF 46                  <1> 	inc esi
  4280 000033B0 81FE[44330000]      <1> 	cmp esi, decnumberend - 1
  4281 000033B6 7305                <1> 	jae .nosifind
  4282 000033B8 803E30              <1> 	cmp byte [esi], '0'
  4283 000033BB 74F2                <1> 	je .sifind
  4284                              <1> .nosifind:
  4285 000033BD E8A3E9FFFF          <1> 	call print
  4286 000033C2 803D[77320000]02    <1> 	cmp byte [firsthexshown], 2
  4287 000033C9 7505                <1> 	jne .shown
  4288 000033CB E890E9FFFF          <1> 	call printline
  4289                              <1> .shown:
  4290 000033D0 C605[77320000]00    <1> 	mov byte [firsthexshown], 0
  4291 000033D7 61                  <1> 	popa
  4292 000033D8 C3                  <1> 	ret
  4293                              <1> 	
  4294                              <1> cnvrthextxt:
  4295 000033D9 31C9                <1> 	xor ecx, ecx
  4296 000033DB 31C0                <1> 	xor eax, eax
  4297 000033DD 31D2                <1> 	xor edx, edx
  4298 000033DF 31DB                <1> 	xor ebx, ebx
  4299 000033E1 4E                  <1> 	dec esi
  4300                              <1> .end:
  4301 000033E2 46                  <1> 	inc esi
  4302 000033E3 8A06                <1> 	mov al, [esi]
  4303 000033E5 3C00                <1> 	cmp al, 0
  4304 000033E7 75F9                <1> 	jne .end
  4305                              <1> .loop:
  4306 000033E9 4E                  <1> 	dec esi
  4307 000033EA 8A06                <1> 	mov al, [esi]
  4308 000033EC 3C41                <1> 	cmp al, "A"
  4309 000033EE 7328                <1> 	jae .char
  4310 000033F0 2C30                <1> 	sub al, 48
  4311 000033F2 3C10                <1> 	cmp al, 16
  4312 000033F4 7721                <1> 	ja .done
  4313                              <1> .donechar:
  4314 000033F6 81FA00000000        <1> 	cmp edx, 0
  4315 000033FC 740E                <1> 	je .noshl
  4316 000033FE 89D3                <1> 	mov ebx, edx
  4317                              <1> .shl:
  4318 00003400 C1E004              <1> 	shl eax, 4
  4319 00003403 4B                  <1> 	dec ebx
  4320 00003404 81FB00000000        <1> 	cmp ebx, 0
  4321 0000340A 75F4                <1> 	jne .shl
  4322                              <1> .noshl:
  4323 0000340C 42                  <1> 	inc edx
  4324 0000340D 01C1                <1> 	add ecx, eax
  4325 0000340F 81FA08000000        <1> 	cmp edx, 8
  4326 00003415 72D2                <1> 	jb .loop
  4327                              <1> .done:
  4328 00003417 C3                  <1> 	ret
  4329                              <1> .char:
  4330 00003418 3C46                <1> 	cmp al, "F"
  4331 0000341A 77FB                <1> 	ja .done
  4332 0000341C 2C41                <1> 	sub al, "A"
  4333 0000341E 040A                <1> 	add al, 0xA
  4334 00003420 E9D1FFFFFF          <1> 	jmp .donechar
  4335                              <1> 	
  4336                              <1> 	
  4337                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4338 00003425 31C9                <1> 	xor ecx, ecx
  4339 00003427 31C0                <1> 	xor eax, eax
  4340 00003429 31D2                <1> 	xor edx, edx
  4341 0000342B 31DB                <1> 	xor ebx, ebx
  4342 0000342D 4E                  <1> 	dec esi
  4343                              <1> .lp:
  4344 0000342E 46                  <1> 	inc esi
  4345 0000342F 8A06                <1> 	mov al, [esi]
  4346 00003431 3C00                <1> 	cmp al, 0
  4347 00003433 75F9                <1> 	jne .lp
  4348 00003435 4E                  <1> 	dec esi
  4349 00003436 8A06                <1> 	mov al, [esi]
  4350 00003438 3C2E                <1> 	cmp al, '.'
  4351 0000343A 7506                <1> 	jne .dot
  4352 0000343C 46                  <1> 	inc esi
  4353 0000343D E9ECFFFFFF          <1> 	jmp .lp
  4354                              <1> .dot:
  4355 00003442 3C20                <1> 	cmp al, ' '
  4356 00003444 7404                <1> 	je .zero
  4357 00003446 3C30                <1> 	cmp al, '0'
  4358 00003448 7504                <1> 	jne .txtlp
  4359                              <1> .zero: 
  4360 0000344A 39FE                <1> 		cmp esi, edi
  4361 0000344C 744B                <1> 		je .done
  4362                              <1> .txtlp:
  4363 0000344E 31C0                <1> 	xor eax, eax
  4364 00003450 8A06                <1> 	mov al, [esi]
  4365 00003452 3C3D                <1> 	cmp al, '='
  4366 00003454 7443                <1> 	je .done
  4367 00003456 3C30                <1> 	cmp al, 48
  4368 00003458 723F                <1> 	jb .done
  4369 0000345A 3C3A                <1> 	cmp al, 58
  4370 0000345C 733B                <1> 	jae .done
  4371 0000345E 3C23                <1> 	cmp al, '#'
  4372 00003460 7437                <1> 	je .done
  4373 00003462 39FE                <1> 	cmp esi, edi
  4374 00003464 7233                <1> 	jb .done
  4375 00003466 81F900000000        <1> 	cmp ecx, 0
  4376 0000346C 770B                <1> 	ja .exp
  4377 0000346E 2C30                <1> .noexp:	sub al, 48
  4378 00003470 01C2                <1> 	add edx, eax
  4379 00003472 4E                  <1> 	dec esi
  4380 00003473 41                  <1> 	inc ecx
  4381 00003474 E9D5FFFFFF          <1> 	jmp .txtlp
  4382 00003479 81F900000000        <1> .exp:	cmp ecx, 0
  4383 0000347F 74ED                <1> 	je .noexp
  4384 00003481 2C30                <1> 	sub al, 48
  4385 00003483 51                  <1> 	push ecx
  4386                              <1> .expmul:
  4387 00003484 89C3                <1> 	mov ebx, eax
  4388 00003486 01D8                <1> 	add eax, ebx
  4389 00003488 C1E303              <1> 	shl ebx, 3
  4390 0000348B 01D8                <1> 	add eax, ebx
  4391 0000348D E2F5                <1> 	loop .expmul
  4392 0000348F 01C2                <1> 	add edx, eax
  4393 00003491 59                  <1> 	pop ecx
  4394 00003492 4E                  <1> 	dec esi
  4395 00003493 41                  <1> 	inc ecx
  4396 00003494 E9B5FFFFFF          <1> 	jmp .txtlp
  4397 00003499 89D1                <1> .done: mov ecx, edx
  4398 0000349B C3                  <1> 	ret
  4399                              <1> 
  4400                              <1> benchmarki: ;output number of clocks since initial value
  4401 0000349C 0F31                <1> 	rdtsc
  4402 0000349E 8B1D[DF890000]      <1> 	mov ebx, [initialtsc]
  4403 000034A4 8B0D[E3890000]      <1> 	mov ecx, [initialtsc + 4]
  4404 000034AA E90E000000          <1> 	jmp benchmarkl.calc
  4405                              <1> 
  4406                              <1> benchmarkl: ;output number of clocks since last benchmark
  4407 000034AF 0F31                <1> 	rdtsc
  4408 000034B1 8B1D[E7890000]      <1> 	mov ebx, [lasttsc]
  4409 000034B7 8B0D[EB890000]      <1> 	mov ecx, [lasttsc + 4]
  4410                              <1> .calc:
  4411 000034BD 29D8                <1> 	sub eax, ebx
  4412 000034BF 7701                <1> 	ja .noover
  4413 000034C1 4A                  <1> 	dec edx
  4414                              <1> .noover:
  4415 000034C2 29CA                <1> 	sub edx, ecx
  4416 000034C4 8B0C24              <1> 	mov ecx, [esp]
  4417 000034C7 E8C0FDFFFF          <1> 	call showhex
  4418 000034CC 89D1                <1> 	mov ecx, edx
  4419 000034CE E8B9FDFFFF          <1> 	call showhex
  4420 000034D3 89C1                <1> 	mov ecx, eax
  4421 000034D5 E8B2FDFFFF          <1> 	call showhex
  4422 000034DA E881E8FFFF          <1> 	call printline
  4423 000034DF 0F31                <1> 	rdtsc
  4424 000034E1 A3[E7890000]        <1> 	mov [lasttsc], eax
  4425 000034E6 8915[EB890000]      <1> 	mov [lasttsc + 4], edx
  4426 000034EC C3                  <1> 	ret
  4427                                      %include "source/programs.asm"
  4428 000034ED FF2C                <1> filetypes db 255,44
  4429                              <1> progstart:		;programs start here
  4430                              <1> indexfiles:
  4431 000034EF BE[EF340000]        <1> 	mov esi, progstart
  4432 000034F4 BB[08AE0300]        <1> 	mov ebx, fileindex
  4433 000034F9 BF[EF340000]        <1> 	mov edi, progstart
  4434 000034FE 81EF02000000        <1> 	sub edi, 2
  4435                              <1> indexloop:
  4436 00003504 668B0E              <1> 	mov cx, [esi]
  4437                              <1> 	indexloop2:
  4438 00003507 663B0F              <1> 		cmp cx, [edi]
  4439 0000350A 7427                <1> 		je indexloop2done
  4440 0000350C 81EF02000000        <1> 		sub edi, 2
  4441 00003512 81FF[ED340000]      <1> 		cmp edi, filetypes
  4442 00003518 73ED                <1> 		jae indexloop2
  4443 0000351A BF[EF340000]        <1> 	mov edi, progstart
  4444 0000351F 81EF02000000        <1> 	sub edi, 2
  4445 00003525 46                  <1> 	inc esi
  4446 00003526 81FE[0B540000]      <1> 	cmp esi, batchprogend
  4447 0000352C 7357                <1> 	jae indexloopdone
  4448 0000352E E9D1FFFFFF          <1> 	jmp indexloop
  4449                              <1> indexloop2done:
  4450 00003533 66890B              <1> 	mov [ebx], cx
  4451 00003536 81C302000000        <1> 	add ebx, 2
  4452 0000353C 81C602000000        <1> 	add esi, 2
  4453                              <1> 	nameindex:
  4454 00003542 8A0E                <1> 		mov cl, [esi]
  4455 00003544 80F900              <1> 		cmp cl, 0
  4456 00003547 7409                <1> 		je nameindexdone
  4457 00003549 880B                <1> 		mov [ebx], cl
  4458 0000354B 46                  <1> 		inc esi
  4459 0000354C 43                  <1> 		inc ebx
  4460 0000354D E9F0FFFFFF          <1> 		jmp nameindex
  4461                              <1> 	nameindexdone:
  4462 00003552 43                  <1> 		inc ebx
  4463 00003553 66C7030000          <1> 		mov word [ebx], 0
  4464 00003558 81C302000000        <1> 		add ebx, 2
  4465 0000355E 46                  <1> 		inc esi
  4466 0000355F 8933                <1> 		mov [ebx], esi
  4467 00003561 81C304000000        <1> 		add ebx, 4
  4468 00003567 66C7030000          <1> 		mov word [ebx], 0
  4469 0000356C 81C302000000        <1> 		add ebx, 2
  4470 00003572 81FB[08B20300]      <1> 		cmp ebx, fileindexend
  4471 00003578 730B                <1> 		jae indexloopdone
  4472 0000357A 81C601000000        <1> 		add esi, 1
  4473 00003580 E97FFFFFFF          <1> 		jmp indexloop
  4474 00003585 C605[8D350000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4475 0000358C C3                  <1> 		ret
  4476 0000358D 00                  <1> indexdone db 0
  4477                              <1> %include 'source/programs/_comment.asm' ;#
  4478 0000358E FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4479 00003592 C3                  <2> 	ret 
  4480                              <1> %include 'source/programs/_math.asm' ;!
  4481 00003593 FF2C2100            <2> db 255,44,"!",0
  4482                              <2> 	num:	
  4483 00003597 E870FBFFFF          <2> 		call clearbuffer
  4484 0000359C C605[1A380000]00    <2> 		mov byte [decimal], 0
  4485 000035A3 C605[1B380000]00    <2> 		mov byte [decimal2], 0
  4486 000035AA 8B35[43300000]      <2> 		mov esi, [currentcommandloc]
  4487 000035B0 31C0                <2> 		xor eax, eax
  4488 000035B2 31C9                <2> 		xor ecx, ecx
  4489 000035B4 31DB                <2> 		xor ebx, ebx
  4490 000035B6 8A06                <2> 	num2:	mov al, [esi]
  4491 000035B8 3C2B                <2> 		cmp al, '+'
  4492 000035BA 7416                <2> 		je operatorfound
  4493 000035BC 3C2D                <2> 		cmp al, '-'
  4494 000035BE 7412                <2> 		je operatorfound
  4495 000035C0 3C2A                <2> 		cmp al, '*'
  4496 000035C2 740E                <2> 		je operatorfound
  4497 000035C4 3C2F                <2> 		cmp al, '/'
  4498 000035C6 740A                <2> 		je operatorfound
  4499 000035C8 3C5E                <2> 		cmp al, '^'
  4500 000035CA 7406                <2> 		je operatorfound
  4501 000035CC 46                  <2> 		inc esi
  4502 000035CD 84C0                <2> 		test al, al
  4503 000035CF 75E5                <2> 		jnz num2
  4504 000035D1 C3                  <2> 		ret
  4505 000035D2 50                  <2> 	operatorfound: push eax
  4506 000035D3 30E4                <2> 		xor ah, ah
  4507 000035D5 8826                <2> 		mov [esi], ah
  4508 000035D7 89F7                <2> 		mov edi, esi
  4509 000035D9 46                  <2> 		inc esi
  4510 000035DA 8A06                <2> 		mov al, [esi]
  4511 000035DC 3C25                <2> 		cmp al, '%'
  4512 000035DE 0F845E000000        <2> 		je near resultnum1
  4513                              <2> 	varnum2: 
  4514 000035E4 57                  <2> 		push edi
  4515 000035E5 E8A6000000          <2> 		call checkdecimal
  4516 000035EA 5F                  <2> 		pop edi
  4517 000035EB E835FEFFFF          <2> 		call cnvrttxt
  4518                              <2> 	vrnm2:
  4519 000035F0 89CB                <2> 		mov ebx, ecx
  4520 000035F2 53                  <2> 		push ebx
  4521 000035F3 E814FBFFFF          <2> 		call clearbuffer
  4522 000035F8 8B35[43300000]      <2> 		mov esi, [currentcommandloc]
  4523 000035FE 89F7                <2> 		mov edi, esi
  4524 00003600 46                  <2> 		inc esi
  4525 00003601 8A06                <2> 		mov al, [esi]
  4526 00003603 3C25                <2> 		cmp al, '%'
  4527 00003605 0F844E000000        <2> 		je near resultnum2
  4528                              <2> 	varnum4: 
  4529 0000360B 57                  <2> 		push edi
  4530 0000360C E86B000000          <2> 		call checkdecimal2
  4531 00003611 5F                  <2> 		pop edi
  4532 00003612 E80EFEFFFF          <2> 		call cnvrttxt
  4533                              <2> 	vrnm4:
  4534 00003617 5B                  <2> 		pop ebx
  4535 00003618 58                  <2> 		pop eax
  4536 00003619 3C2B                <2> 		cmp al, '+'
  4537 0000361B 0F84A3000000        <2> 		je near plusnum
  4538 00003621 3C2D                <2> 		cmp al, '-'
  4539 00003623 0F84A7000000        <2> 		je near subnum
  4540 00003629 3C2A                <2> 		cmp al, '*'
  4541 0000362B 0F84AB000000        <2> 		je near mulnum
  4542 00003631 3C2F                <2> 		cmp al, '/'
  4543 00003633 0F84B9000000        <2> 		je near divnum
  4544 00003639 3C5E                <2> 		cmp al, '^'
  4545 0000363B 0F84D6000000        <2> 		je near expnum
  4546 00003641 C3                  <2> 		ret
  4547                              <2> 	resultnum1:
  4548 00003642 8A0D[1C380000]      <2> 		mov cl, [decimalresult]
  4549 00003648 880D[1A380000]      <2> 		mov [decimal], cl
  4550 0000364E 8B0D[1D380000]      <2> 		mov ecx, [result]
  4551 00003654 E997FFFFFF          <2> 		jmp vrnm2
  4552                              <2> 	resultnum2:
  4553 00003659 8A0D[1A380000]      <2> 		mov cl, [decimal]
  4554 0000365F 880D[1B380000]      <2> 		mov [decimal2], cl
  4555 00003665 8A0D[1C380000]      <2> 		mov cl, [decimalresult]
  4556 0000366B 880D[1A380000]      <2> 		mov [decimal], cl
  4557 00003671 8B0D[1D380000]      <2> 		mov ecx, [result]
  4558 00003677 E99BFFFFFF          <2> 		jmp vrnm4
  4559                              <2> 	checkdecimal2:
  4560 0000367C 8A25[1A380000]      <2> 		mov ah, [decimal]
  4561 00003682 8825[1B380000]      <2> 		mov [decimal2], ah
  4562 00003688 30E4                <2> 		xor ah, ah
  4563 0000368A 8825[1A380000]      <2> 		mov [decimal], ah
  4564                              <2> 	checkdecimal:
  4565 00003690 89F7                <2> 		mov edi, esi
  4566                              <2> 	chkdec1:
  4567 00003692 8A07                <2> 		mov al, [edi]
  4568 00003694 3C2E                <2> 		cmp al, '.'
  4569 00003696 0F840E000000        <2> 		je near fnddec
  4570 0000369C 3C00                <2> 		cmp al, 0
  4571 0000369E 0F841F000000        <2> 		je near nodecimal
  4572 000036A4 47                  <2> 		inc edi
  4573 000036A5 E9E8FFFFFF          <2> 		jmp chkdec1
  4574                              <2> 	fnddec:
  4575 000036AA 8A4701              <2> 		mov al, [edi + 1]
  4576 000036AD 8807                <2> 		mov [edi], al
  4577 000036AF 3C00                <2> 		cmp al, 0
  4578 000036B1 0F840C000000        <2> 		je near nodecimal
  4579 000036B7 FE05[1A380000]      <2> 		inc byte [decimal]
  4580 000036BD 47                  <2> 		inc edi
  4581 000036BE E9E7FFFFFF          <2> 		jmp fnddec
  4582                              <2> 	nodecimal:
  4583 000036C3 C3                  <2> 		ret
  4584                              <2> 	plusnum:
  4585 000036C4 E80F010000          <2> 		call decaddfix
  4586 000036C9 01D9                <2> 		add ecx, ebx
  4587 000036CB E98A000000          <2> 		jmp retnum
  4588                              <2> 	subnum:
  4589 000036D0 E803010000          <2> 		call decaddfix
  4590 000036D5 29D9                <2> 		sub ecx, ebx
  4591 000036D7 E97E000000          <2> 		jmp retnum
  4592                              <2> 	mulnum:
  4593 000036DC A0[1B380000]        <2> 		mov al, [decimal2]
  4594 000036E1 0005[1A380000]      <2> 		add [decimal], al
  4595 000036E7 89C8                <2> 		mov eax, ecx
  4596 000036E9 F7E3                <2> 		mul ebx
  4597 000036EB 89C1                <2> 		mov ecx, eax
  4598 000036ED E968000000          <2> 		jmp retnum
  4599                              <2> 	divnum:
  4600 000036F2 E8E1000000          <2> 		call decaddfix
  4601 000036F7 30C0                <2> 		xor al, al
  4602 000036F9 A2[1A380000]        <2> 		mov [decimal], al
  4603 000036FE 31D2                <2> 		xor edx, edx
  4604 00003700 89C8                <2> 		mov eax, ecx
  4605 00003702 81FB00000000        <2> 		cmp ebx, 0
  4606 00003708 0F844C000000        <2> 		je near retnum
  4607 0000370E F7F3                <2> 		div ebx
  4608 00003710 89C1                <2> 		mov ecx, eax
  4609 00003712 E943000000          <2> 		jmp retnum
  4610                              <2> 	expnum:
  4611 00003717 8A15[1A380000]      <2> 		mov dl, [decimal]
  4612 0000371D 8815[1B380000]      <2> 		mov [decimal2], dl
  4613 00003723 31D2                <2> 		xor edx, edx
  4614 00003725 89C8                <2> 		mov eax, ecx
  4615 00003727 89D9                <2> 		mov ecx, ebx
  4616 00003729 89C3                <2> 		mov ebx, eax
  4617 0000372B 81F900000000        <2> 		cmp ecx, 0
  4618 00003731 7422                <2> 		je noexpnum
  4619 00003733 49                  <2> 		dec ecx
  4620 00003734 81F900000000        <2> 		cmp ecx, 0
  4621 0000373A 7412                <2> 		je noexpnumlp
  4622 0000373C F7E3                <2> 	expnumlp: mul ebx
  4623 0000373E 8A15[1B380000]      <2> 		mov dl, [decimal2]
  4624 00003744 0015[1A380000]      <2> 		add [decimal], dl
  4625 0000374A 31D2                <2> 		xor edx, edx
  4626 0000374C E2EE                <2> 		loop expnumlp
  4627                              <2> 	noexpnumlp:
  4628 0000374E 89C1                <2> 		mov ecx, eax
  4629 00003750 E905000000          <2> 		jmp retnum
  4630                              <2> 	noexpnum:
  4631 00003755 B901000000          <2> 		mov ecx, 1
  4632                              <2> 	retnum: 
  4633 0000375A BE[9CCC0300]        <2> 		mov esi, numbuf
  4634 0000375F 890D[1D380000]      <2> 		mov [result], ecx
  4635 00003765 E8BAF9FFFF          <2> 		call convert
  4636 0000376A BE[9CCC0300]        <2> 		mov esi, numbuf
  4637 0000376F 8A25[1A380000]      <2> 		mov ah, [decimal]
  4638 00003775 8825[1C380000]      <2> 		mov [decimalresult], ah
  4639 0000377B 80FC00              <2> 		cmp ah, 0
  4640 0000377E 0F8425000000        <2> 		je near noputdecimal
  4641                              <2> 	putdecimal:
  4642 00003784 4E                  <2> 		dec esi
  4643 00003785 FECC                <2> 		dec ah
  4644 00003787 80FC00              <2> 		cmp ah, 0
  4645 0000378A 0F87F4FFFFFF        <2> 		ja near putdecimal
  4646 00003790 4E                  <2> 		dec esi
  4647 00003791 8A06                <2> 		mov al, [esi]
  4648 00003793 C6062E              <2> 		mov byte [esi], '.'
  4649                              <2> 	decputloop:
  4650 00003796 4E                  <2> 		dec esi
  4651 00003797 8A26                <2> 		mov ah, [esi]
  4652 00003799 8806                <2> 		mov [esi], al
  4653 0000379B 88E0                <2> 		mov al, ah
  4654 0000379D 81FE[88CC0300]      <2> 		cmp esi, buf2
  4655 000037A3 0F87EDFFFFFF        <2> 		ja near decputloop
  4656                              <2> 	noputdecimal:
  4657 000037A9 BE[88CC0300]        <2> 		mov esi, buf2
  4658 000037AE E805000000          <2> 		call chkadd
  4659 000037B3 C3                  <2> 		ret
  4660 000037B4 00000000            <2> edxnumbuf dw 0,0
  4661 000037B8 8A06                <2> 	chkadd: mov al, [esi]
  4662 000037BA 3C30                <2> 		cmp al, '0'
  4663 000037BC 750F                <2> 		jne dnadd
  4664 000037BE 46                  <2> 		inc esi
  4665 000037BF 81FE[9CCC0300]      <2> 		cmp esi, numbuf
  4666 000037C5 7405                <2> 		je dnaddm1
  4667 000037C7 E9ECFFFFFF          <2> 		jmp chkadd
  4668 000037CC 4E                  <2> 	dnaddm1: dec esi
  4669 000037CD E893E5FFFF          <2> 	dnadd:	call print
  4670 000037D2 E889E5FFFF          <2> 		call printline
  4671 000037D7 C3                  <2> 		ret
  4672                              <2> 		
  4673                              <2> 	decaddfix:
  4674 000037D8 A0[1B380000]        <2> 		mov al, [decimal2]
  4675 000037DD 8A25[1A380000]      <2> 		mov ah, [decimal]
  4676 000037E3 38E0                <2> 		cmp al, ah
  4677 000037E5 7432                <2> 		je gooddecadd
  4678 000037E7 38E0                <2> 		cmp al, ah
  4679 000037E9 721A                <2> 		jb lowdecadd
  4680                              <2> 	highdecadd:
  4681 000037EB FEC4                <2> 		inc ah
  4682 000037ED 89CA                <2> 		mov edx, ecx
  4683 000037EF C1E103              <2> 		shl ecx, 3
  4684 000037F2 01D1                <2> 		add ecx, edx
  4685 000037F4 01D1                <2> 		add ecx, edx
  4686 000037F6 38E0                <2> 		cmp al, ah
  4687 000037F8 77F1                <2> 		ja highdecadd
  4688 000037FA 8825[1A380000]      <2> 		mov [decimal], ah
  4689 00003800 E914000000          <2> 		jmp gooddecadd
  4690                              <2> 	lowdecadd:
  4691 00003805 FEC0                <2> 		inc al
  4692 00003807 89DA                <2> 		mov edx, ebx
  4693 00003809 C1E303              <2> 		shl ebx, 3
  4694 0000380C 01D3                <2> 		add ebx, edx
  4695 0000380E 01D3                <2> 		add ebx, edx
  4696 00003810 38E0                <2> 		cmp al, ah
  4697 00003812 72F1                <2> 		jb lowdecadd
  4698 00003814 A2[1A380000]        <2> 		mov [decimal], al
  4699                              <2> 	gooddecadd:
  4700 00003819 C3                  <2> 		ret
  4701                              <2> 		
  4702 0000381A 00                  <2> decimal db 0
  4703 0000381B 00                  <2> decimal2 db 0
  4704 0000381C 00                  <2> decimalresult db 0
  4705 0000381D 00000000            <2> result dd 0
  4706                              <1> %include 'source/programs/_variables.asm' ;% and $
  4707 00003821 FF2C2500            <2> db 255,44,"%",0
  4708                              <2> 	ans:
  4709 00003825 BE[88CC0300]        <2> 		mov esi, buf2
  4710 0000382A E889FFFFFF          <2> 		call chkadd
  4711 0000382F C3                  <2> 		ret
  4712                              <2> 		
  4713 00003830 FF2C2400            <2> db 255,44,"$",0
  4714 00003834 8B35[43300000]      <2> var: mov esi, [currentcommandloc]
  4715 0000383A BB[88B40300]        <2> 	mov ebx, variables
  4716 0000383F 8A06                <2> lkeq:	mov al, [esi]
  4717 00003841 3C3D                <2> 	cmp al, '='
  4718 00003843 741E                <2> 	je eqfnd	;is there an '=' sign?
  4719 00003845 3C00                <2> 	cmp al, 0
  4720 00003847 7406                <2> 	je echovars
  4721 00003849 46                  <2> 	inc esi
  4722 0000384A E9F0FFFFFF          <2> 	jmp lkeq
  4723 0000384F BE[88B40300]        <2> echovars: mov esi, variables
  4724 00003854 BB[88C40300]        <2> 	mov ebx, varend
  4725 00003859 B105                <2> 	mov cl, 5
  4726 0000385B B504                <2> 	mov ch, 4
  4727 0000385D E848F8FFFF          <2> 	call array
  4728 00003862 C3                  <2> 	ret
  4729 00003863 46                  <2> eqfnd:	inc esi
  4730 00003864 8A06                <2> 	mov al, [esi]
  4731 00003866 3C00                <2> 	cmp al, 0
  4732 00003868 7410                <2> 	je readvar
  4733 0000386A 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  4734 00003870 BB[88B40300]        <2> 	mov ebx, variables
  4735 00003875 E91C000000          <2> 	jmp seek
  4736                              <2> readvar:
  4737 0000387A B00A                <2> 	mov al, 10
  4738 0000387C 66BB0700            <2> 	mov bx, 7
  4739 00003880 C605[6A230000]00    <2> 	mov byte [commandedit], 0
  4740 00003887 BF[88CC0300]        <2> 	mov edi, buftxtend
  4741 0000388C E80DE6FFFF          <2> 	call rdprint
  4742 00003891 E99EFFFFFF          <2> 	jmp var
  4743 00003896 668B03              <2> seek:	mov ax, [ebx]
  4744 00003899 B105                <2> 	mov cl, 5
  4745 0000389B B504                <2> 	mov ch, 4
  4746 0000389D 663D0000            <2> 	cmp ax, 0
  4747 000038A1 0F846A000000        <2> 	je near save
  4748 000038A7 6639C8              <2> 	cmp ax, cx
  4749 000038AA 7406                <2> 	je skfnd
  4750 000038AC 43                  <2> 	inc ebx
  4751 000038AD E9E4FFFFFF          <2> 	jmp seek
  4752 000038B2 8B35[43300000]      <2> skfnd:	mov esi, [currentcommandloc]
  4753 000038B8 46                  <2> 	inc esi
  4754 000038B9 81C302000000        <2> 	add ebx, 2
  4755 000038BF 89DF                <2> 	mov edi, ebx
  4756 000038C1 B13D                <2> 	mov cl, '='
  4757 000038C3 E8C0F7FFFF          <2> 	call cndtest
  4758 000038C8 3C01                <2> 	cmp al, 1	
  4759 000038CA 741B                <2> 	je varfnd
  4760 000038CC 89FB                <2> 	mov ebx, edi
  4761 000038CE 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  4762 000038D4 668B03              <2> 	mov ax, [ebx]
  4763 000038D7 663D0000            <2> 	cmp ax, 0
  4764 000038DB 0F8430000000        <2> 	je near save
  4765 000038E1 43                  <2> 	inc ebx
  4766 000038E2 E9AFFFFFFF          <2> 	jmp seek
  4767 000038E7 8A03                <2> varfnd:	mov al, [ebx]
  4768 000038E9 3C04                <2> 	cmp al, 4
  4769 000038EB 7407                <2> 	je save2
  4770 000038ED 4B                  <2> 	dec ebx
  4771 000038EE 4E                  <2> 	dec esi
  4772 000038EF E9F3FFFFFF          <2> 	jmp varfnd
  4773 000038F4 4B                  <2> save2:	dec ebx
  4774 000038F5 4E                  <2> 	dec esi
  4775 000038F6 8A03                <2> 	mov al, [ebx]
  4776 000038F8 3C05                <2> 	cmp al, 5
  4777 000038FA 7405                <2> 	je remove
  4778 000038FC E9E6FFFFFF          <2> 	jmp varfnd
  4779 00003901 8A03                <2> remove: mov al, [ebx]
  4780 00003903 3C00                <2> 	cmp al, 0
  4781 00003905 748F                <2> 	je seek
  4782 00003907 30C0                <2> 	xor al, al
  4783 00003909 8803                <2> 	mov [ebx], al
  4784 0000390B 43                  <2> 	inc ebx
  4785 0000390C E9F0FFFFFF          <2> 	jmp remove	;do not need for now-need defragmentation
  4786 00003911 8B35[43300000]      <2> save:	mov esi, [currentcommandloc]
  4787 00003917 43                  <2> 	inc ebx
  4788 00003918 B005                <2> 	mov al, 5
  4789 0000391A B404                <2> 	mov ah, 4
  4790 0000391C 668903              <2> 	mov [ebx], ax
  4791 0000391F 43                  <2> 	inc ebx
  4792 00003920 43                  <2> svhere:	inc ebx
  4793 00003921 46                  <2> 	inc esi
  4794 00003922 8A06                <2> 	mov al, [esi]
  4795 00003924 3C00                <2> 	cmp al, 0
  4796 00003926 0F8456000000        <2> 	je near svdone
  4797 0000392C 3C25                <2> 	cmp al, '%'
  4798 0000392E 7407                <2> 	je ans2
  4799 00003930 8803                <2> 	mov [ebx], al	
  4800 00003932 E9E9FFFFFF          <2> 	jmp svhere
  4801 00003937 56                  <2> ans2:	push esi
  4802 00003938 BE[88CC0300]        <2> 	mov esi, buf2
  4803 0000393D E82C000000          <2> 	call ansfnd
  4804 00003942 E806000000          <2> 	call anscp
  4805 00003947 5E                  <2> 	pop esi
  4806 00003948 E9D3FFFFFF          <2> 	jmp svhere
  4807 0000394D 8A06                <2> anscp:	mov al, [esi]
  4808 0000394F 8803                <2> 	mov [ebx], al
  4809 00003951 81FE[9CCC0300]      <2> 	cmp esi, numbuf
  4810 00003957 74C7                <2> 	je svhere
  4811 00003959 3C00                <2> 	cmp al, 0
  4812 0000395B 74C3                <2> 	je svhere
  4813 0000395D 43                  <2> 	inc ebx
  4814 0000395E 46                  <2> 	inc esi
  4815 0000395F E9E9FFFFFF          <2> 	jmp anscp
  4816 00003964 5E                  <2> ansnf:	pop esi
  4817 00003965 8A06                <2> 	mov al, [esi]
  4818 00003967 8803                <2> 	mov [ebx], al
  4819 00003969 E9B2FFFFFF          <2> 	jmp svhere
  4820 0000396E 46                  <2> ansfnd:	inc esi
  4821 0000396F 81FE[9BCC0300]      <2> 	cmp esi, numbuf - 1
  4822 00003975 740A                <2> 	je fndans
  4823 00003977 8A06                <2> 	mov al, [esi]
  4824 00003979 3C00                <2> 	cmp al, 0
  4825 0000397B 74E7                <2> 	je ansnf
  4826 0000397D 3C30                <2> 	cmp al, '0'
  4827 0000397F 74ED                <2> 	je ansfnd
  4828                              <2> fndans:
  4829 00003981 C3                  <2> 	ret
  4830 00003982 30C0                <2> svdone:	xor al, al
  4831 00003984 8803                <2> 	mov [ebx], al
  4832 00003986 C3                  <2> 	ret
  4833                              <1> %include 'source/programs/_run.asm' ;./
  4834 00003987 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4835 0000398B FF2C2E2F00          <2> 	db 255,44,"./",0
  4836                              <2> rundiskprog:
  4837 00003990 8B3D[43300000]      <2> 	mov edi, [currentcommandloc]
  4838 00003996 81C702000000        <2> 	add edi, 2
  4839 0000399C BE00004000          <2> 	mov esi, 0x400000
  4840 000039A1 E8252F0000          <2> 	call loadfile
  4841 000039A6 81FA94010000        <2> 	cmp edx, 404
  4842 000039AC 746A                <2> 	je noprogfound
  4843 000039AE BB00004000          <2> 	mov ebx, 0x400000
  4844 000039B3 A1[87390000]        <2> 	mov eax, [elfstart]
  4845 000039B8 3903                <2> 	cmp [ebx], eax
  4846 000039BA 0F8437000000        <2> 	je near runelf
  4847 000039C0 66813B4558          <2> 	cmp word [ebx], "EX"
  4848 000039C5 7577                <2> 	jne progbatchfound
  4849 000039C7 81C302000000        <2> 	add ebx, 2
  4850 000039CD 8B3D[43300000]      <2> 	mov edi, [currentcommandloc]
  4851 000039D3 81C702000000        <2> 	add edi, 2
  4852                              <2> findspaceprog:
  4853 000039D9 8A07                <2> 	mov al, [edi]
  4854 000039DB 47                  <2> 	inc edi
  4855 000039DC 3C20                <2> 	cmp al, " "
  4856 000039DE 75F9                <2> 	jne findspaceprog
  4857                              <2> findnonspaceprog:
  4858 000039E0 8A07                <2> 	mov al, [edi]
  4859 000039E2 47                  <2> 	inc edi
  4860 000039E3 3C20                <2> 	cmp al, " "
  4861 000039E5 74F9                <2> 	je findnonspaceprog
  4862 000039E7 4F                  <2> 	dec edi
  4863 000039E8 8925[08B20300]      <2> 	mov [previousstack], esp
  4864 000039EE FFD3                <2> 	call ebx
  4865 000039F0 8B25[08B20300]      <2> 	mov esp, [previousstack]
  4866 000039F6 C3                  <2> 	ret
  4867                              <2> runelf:
  4868 000039F7 8B3D[43300000]      <2> 	mov edi, [currentcommandloc]
  4869 000039FD 81C702000000        <2> 	add edi, 2
  4870 00003A03 81C380000000        <2> 	add ebx, 0x80
  4871 00003A09 8925[08B20300]      <2> 	mov [previousstack], esp
  4872 00003A0F FFD3                <2> 	call ebx
  4873 00003A11 8B25[08B20300]      <2> 	mov esp, [previousstack]
  4874 00003A17 C3                  <2> 	ret
  4875                              <2> noprogfound:
  4876 00003A18 BE[7B890000]        <2> 	mov esi, notfound1
  4877 00003A1D E843E3FFFF          <2> 	call print
  4878 00003A22 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  4879 00003A28 81C602000000        <2> 	add esi, 2
  4880 00003A2E E832E3FFFF          <2> 	call print
  4881 00003A33 BE[83890000]        <2> 	mov esi, notfound2
  4882 00003A38 E828E3FFFF          <2> 	call print
  4883 00003A3D C3                  <2> 	ret
  4884                              <2> progbatchfound:
  4885 00003A3E BF00004000          <2> 		mov edi, 0x400000
  4886 00003A43 C605[82B40300]01    <2> 		mov byte [BATCHISON], 1
  4887                              <2> 	batchrunloop:
  4888 00003A4A E806F3FFFF          <2> 		call buftxtclear
  4889 00003A4F BE[88C80300]        <2> 		mov esi, buftxt
  4890 00003A54 8935[43300000]      <2> 		mov [currentcommandloc], esi
  4891                              <2> 	batchrunloop2:
  4892 00003A5A B10A                <2> 		mov cl, 10
  4893 00003A5C B50D                <2> 		mov ch, 13
  4894 00003A5E 380F                <2> 		cmp [edi], cl
  4895 00003A60 0F841C000000        <2> 		je near nxtbatchrunline
  4896 00003A66 382F                <2> 		cmp [edi], ch
  4897 00003A68 0F8414000000        <2> 		je near nxtbatchrunline
  4898 00003A6E 803F00              <2> 		cmp byte [edi], 0
  4899 00003A71 0F840B000000        <2> 		je near nxtbatchrunline
  4900 00003A77 8A07                <2> 		mov al, [edi]
  4901 00003A79 8806                <2> 		mov [esi], al
  4902 00003A7B 46                  <2> 		inc esi
  4903 00003A7C 47                  <2> 		inc edi
  4904 00003A7D E9D8FFFFFF          <2> 		jmp batchrunloop2
  4905                              <2> 	nxtbatchrunline:
  4906 00003A82 47                  <2> 		inc edi
  4907 00003A83 380F                <2> 		cmp [edi], cl
  4908 00003A85 74FB                <2> 		je nxtbatchrunline
  4909 00003A87 382F                <2> 		cmp [edi], ch
  4910 00003A89 74F7                <2> 		je nxtbatchrunline
  4911 00003A8B 893D[E93A0000]      <2> 		mov [batchedi], edi
  4912 00003A91 893D[7EB40300]      <2> 		mov [BATCHPOS], edi
  4913 00003A97 C60600              <2> 		mov byte [esi], 0
  4914 00003A9A BE[88C80300]        <2> 		mov esi, buftxt
  4915 00003A9F 803E00              <2> 		cmp byte [esi], 0
  4916 00003AA2 0F8439000000        <2> 		je near nobatchfoundrun
  4917 00003AA8 31DB                <2> 		xor ebx, ebx
  4918 00003AAA 8A1D[19B40300]      <2> 		mov bl, [IFON]
  4919 00003AB0 80FB00              <2> 		cmp bl, 0
  4920 00003AB3 0F8534000000        <2> 		jne near iftestbatch
  4921                              <2> 	doneiftest:
  4922 00003AB9 803D[C23B0000]00    <2> 		cmp byte [runnextline], 0
  4923 00003AC0 0F8405000000        <2> 		je near noruniftest
  4924 00003AC6 E89CF4FFFF          <2> 		call run
  4925                              <2> 	noruniftest:
  4926 00003ACB C605[C23B0000]01    <2> 		mov byte [runnextline], 1
  4927 00003AD2 8B3D[E93A0000]      <2> 		mov edi, [batchedi]
  4928 00003AD8 803F00              <2> 		cmp byte [edi], 0
  4929 00003ADB 0F8569FFFFFF        <2> 		jne near batchrunloop
  4930                              <2> 	nobatchfoundrun:
  4931 00003AE1 C605[82B40300]00    <2> 		mov byte [BATCHISON], 0
  4932 00003AE8 C3                  <2> 		ret
  4933                              <2> 	
  4934 00003AE9 00000000            <2> batchedi dd 0	
  4935                              <2> 	
  4936                              <2> 	iftestbatch:
  4937 00003AED BE[1AB40300]        <2> 		mov esi, IFTRUE
  4938 00003AF2 01DE                <2> 		add esi, ebx
  4939 00003AF4 803E00              <2> 		cmp byte [esi], 0
  4940 00003AF7 0F85BCFFFFFF        <2> 		jne near doneiftest
  4941 00003AFD 881D[C33B0000]      <2> 		mov [iffalsebuf], bl
  4942 00003B03 803D[83B40300]01    <2> 		cmp byte [LOOPON], 1
  4943 00003B0A 0F8513000000        <2> 		jne near fifindbatch
  4944 00003B10 E935FFFFFF          <2> 		jmp batchrunloop
  4945                              <2> 	elsetestbatch:
  4946 00003B15 C60601              <2> 		mov byte [esi], 1
  4947 00003B18 81C705000000        <2> 		add edi, 5
  4948 00003B1E E927FFFFFF          <2> 		jmp batchrunloop
  4949                              <2> 	fifindbatch:
  4950 00003B23 66B96966            <2> 		mov cx, "if"
  4951 00003B27 66B86669            <2> 		mov ax, "fi"
  4952 00003B2B 663907              <2> 		cmp [edi], ax
  4953 00003B2E 0F8424000000        <2> 		je near fifoundbatch
  4954 00003B34 66390F              <2> 		cmp [edi], cx
  4955 00003B37 0F8468000000        <2> 		je near iffoundbatch
  4956 00003B3D 803F00              <2> 		cmp byte [edi], 0
  4957 00003B40 0F8412000000        <2> 		je near fifoundbatch
  4958 00003B46 B8656C7365          <2> 		mov eax, "else"
  4959 00003B4B 3907                <2> 		cmp [edi], eax
  4960 00003B4D 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4961 00003B53 E973FFFFFF          <2> 		jmp noruniftest
  4962                              <2> 	fifoundbatch:
  4963 00003B58 81C702000000        <2> 		add edi, 2
  4964 00003B5E B00A                <2> 		mov al, 10
  4965 00003B60 3807                <2> 		cmp [edi], al
  4966 00003B62 0F840E000000        <2> 		je near goodfibatch
  4967 00003B68 803F00              <2> 		cmp byte [edi], 0
  4968 00003B6B 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4969 00003B71 E9ADFFFFFF          <2> 		jmp fifindbatch
  4970                              <2> 	goodfibatch:
  4971 00003B76 B001                <2> 		mov al, 1
  4972 00003B78 2805[19B40300]      <2> 		sub [IFON], al 
  4973 00003B7E A0[19B40300]        <2> 		mov al, [IFON]
  4974 00003B83 8A1D[C33B0000]      <2> 		mov bl, [iffalsebuf]
  4975 00003B89 38D8                <2> 		cmp al, bl
  4976 00003B8B 7796                <2> 		ja fifindbatch
  4977 00003B8D 8B35[43300000]      <2> 		mov esi, [currentcommandloc]
  4978 00003B93 81EF02000000        <2> 		sub edi, 2
  4979 00003B99 C605[C23B0000]00    <2> 		mov byte [runnextline], 0
  4980 00003BA0 E9A5FEFFFF          <2> 		jmp batchrunloop
  4981                              <2> 	iffoundbatch:
  4982 00003BA5 B020                <2> 		mov al, ' '
  4983 00003BA7 81C702000000        <2> 		add edi, 2
  4984 00003BAD 3807                <2> 		cmp [edi], al
  4985 00003BAF 0F856EFFFFFF        <2> 		jne near fifindbatch
  4986 00003BB5 B001                <2> 		mov al, 1
  4987 00003BB7 0005[19B40300]      <2> 		add [IFON], al
  4988 00003BBD E961FFFFFF          <2> 		jmp fifindbatch
  4989                              <2> 		
  4990                              <2> 		
  4991 00003BC2 01                  <2> runnextline db 1
  4992 00003BC3 00                  <2> iffalsebuf db 0
  4993 00003BC4 C3                  <2> notbatch: ret 
  4994                              <1> %ifdef network.included
  4995                              <1> 	%include 'source/programs/arp.asm'
  4996                              <1> %endif
  4997                              <1> %include 'source/programs/batch.asm'
  4998 00003BC5 FF2C626174636800    <2> db 255,44,"batch",0
  4999                              <2> 	batchst: 
  5000 00003BCD 8B3D[43300000]      <2> 		mov edi, [currentcommandloc]
  5001 00003BD3 81C706000000        <2> 		add edi, 6
  5002 00003BD9 803F00              <2> 		cmp byte [edi], 0
  5003 00003BDC 0F846D000000        <2> 		je near nonamefound
  5004 00003BE2 BE00004000          <2> 		mov esi, 0x400000
  5005 00003BE7 E8DF2C0000          <2> 		call loadfile
  5006 00003BEC 89D0                <2> 		mov eax, edx
  5007 00003BEE 3D94010000          <2> 		cmp eax, 404
  5008 00003BF3 7465                <2> 		je goodbatchname
  5009 00003BF5 BE[003C0000]        <2> 		mov esi, badbatchname
  5010 00003BFA E866E1FFFF          <2> 		call print
  5011 00003BFF C3                  <2> 		ret
  5012 00003C00 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  5013 00003C09 20616C726561647920- <2>
  5014 00003C12 657869737473210A00  <2>
  5015 00003C1B 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  5016 00003C24 746F20747970652061- <2>
  5017 00003C2D 206E616D6520616674- <2>
  5018 00003C36 65722074686520636F- <2>
  5019 00003C3F 6D6D616E642E0A00    <2>
  5020 00003C47 00000000            <2> 		esicache3 dd 0
  5021 00003C4B 00000000            <2> 		esicache2 dd 0
  5022                              <2> 	nonamefound:
  5023 00003C4F BE[1B3C0000]        <2> 		mov esi, namenotfoundbatch
  5024 00003C54 E80CE1FFFF          <2> 		call print
  5025 00003C59 C3                  <2> 		ret
  5026                              <2> 	goodbatchname:
  5027 00003C5A BE00004000          <2> 		mov esi, 0x400000
  5028                              <2> 	batchcreate:
  5029 00003C5F 8935[473C0000]      <2> 		mov [esicache3], esi
  5030 00003C65 BF00008000          <2> 		mov edi, 0x800000
  5031 00003C6A B00A                <2> 		mov al, 10
  5032 00003C6C B307                <2> 		mov bl, 7
  5033 00003C6E B404                <2> 		mov ah, 4
  5034 00003C70 CD30                <2> 		int 30h
  5035 00003C72 8935[4B3C0000]      <2> 		mov [esicache2], esi
  5036 00003C78 8A0E                <2> 		mov cl, [esi]
  5037 00003C7A 8B35[473C0000]      <2> 		mov esi, [esicache3]
  5038 00003C80 BB[B73C0000]        <2> 		mov ebx, exitword
  5039 00003C85 E8FEF3FFFF          <2> 		call cndtest
  5040 00003C8A 3C01                <2> 		cmp al, 1
  5041 00003C8C 7414                <2> 		je endbatchcreate
  5042 00003C8E 3C02                <2> 		cmp al, 2
  5043 00003C90 7410                <2> 		je endbatchcreate
  5044 00003C92 8B35[4B3C0000]      <2> 		mov esi, [esicache2]
  5045 00003C98 B00A                <2> 		mov al, 10
  5046 00003C9A 8806                <2> 		mov [esi], al
  5047 00003C9C 46                  <2> 		inc esi
  5048 00003C9D E9BDFFFFFF          <2> 		jmp batchcreate
  5049                              <2> 	endbatchcreate:
  5050 00003CA2 8B35[473C0000]      <2> 		mov esi, [esicache3]
  5051 00003CA8 31C0                <2> 		xor eax, eax
  5052 00003CAA 8806                <2> 		mov [esi], al
  5053 00003CAC BE00004000          <2> 		mov esi, 0x400000
  5054 00003CB1 E8AFE0FFFF          <2> 		call print
  5055 00003CB6 C3                  <2> 		ret
  5056                              <2> 	
  5057 00003CB7 5C7800              <2> 	exitword db "\x",0
  5058 00003CBA 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  5059 00003CC3 6F20657869742E0A00  <2>
  5060                              <1> %ifdef gui.background
  5061                              <1> 	%include 'source/programs/background.asm'
  5062 00003CCC FF2C6261636B67726F- <2> db 255,44,"background",0
  5063 00003CD5 756E6400            <2>
  5064 00003CD9 8B3D[43300000]      <2> 		mov edi, [currentcommandloc]
  5065 00003CDF 81C70B000000        <2> 		add edi, 11
  5066 00003CE5 BE00008000          <2> 		mov esi, 0x800000
  5067 00003CEA E8DC2B0000          <2> 		call loadfile
  5068 00003CEF 81FA94010000        <2> 		cmp edx, 404
  5069 00003CF5 0F84A1120000        <2> 		je near filenotfound
  5070 00003CFB BE00008000          <2> 		mov esi, 0x800000
  5071 00003D00 66813E424D          <2> 		cmp word [esi], "BM"
  5072 00003D05 7401                <2> 		je .bmpfound
  5073 00003D07 C3                  <2> 		ret
  5074                              <2> .bmpfound:
  5075 00003D08 8B3D[25580000]      <2> 		mov edi, [physbaseptr]
  5076 00003D0E 57                  <2> 		push edi
  5077 00003D0F BE[9CCE0300]        <2> 		mov esi, backgroundbuffer
  5078 00003D14 8935[D0710000]      <2> 		mov [backgroundimage], esi
  5079 00003D1A 8935[25580000]      <2> 		mov [physbaseptr], esi
  5080 00003D20 31C0                <2> 		xor eax, eax
  5081                              <2> .clearlp:
  5082 00003D22 8906                <2> 		mov [esi], eax
  5083 00003D24 81C604000000        <2> 		add esi, 4
  5084 00003D2A 81FE[9CE22B00]      <2> 		cmp esi, backgroundbufferend
  5085 00003D30 72F0                <2> 		jb .clearlp
  5086 00003D32 BE00008000          <2> 		mov esi, 0x800000
  5087 00003D37 31C9                <2> 		xor ecx, ecx
  5088 00003D39 31D2                <2> 		xor edx, edx
  5089 00003D3B 31DB                <2> 		xor ebx, ebx
  5090 00003D3D E8742D0000          <2> 		call showbmp
  5091 00003D42 5F                  <2> 		pop edi
  5092 00003D43 893D[25580000]      <2> 		mov [physbaseptr], edi
  5093 00003D49 803D[D9890000]00    <2> 		cmp byte [guion], 0
  5094 00003D50 740F                <2> 		je .noclear
  5095 00003D52 E818340000          <2> 		call guiclear
  5096 00003D57 E8B3300000          <2> 		call clearmousecursor
  5097 00003D5C E8A1340000          <2> 		call reloadallgraphics
  5098                              <2> .noclear:
  5099 00003D61 C3                  <2> 		ret
  5100                              <1> %endif
  5101                              <1> %include 'source/programs/beep.asm'
  5102 00003D62 FF2C6265657000      <2> 	db 255,44,"beep",0
  5103                              <2> beep:
  5104 00003D69 B8[8E3D0000]        <2> 	mov eax, beepstart
  5105 00003D6E A3[76020000]        <2> 	mov [soundpos], eax
  5106 00003D73 B8[923D0000]        <2> 	mov eax, beepend
  5107 00003D78 A3[7A020000]        <2> 	mov [soundendpos], eax
  5108 00003D7D C605[73020000]01    <2> 	mov byte [soundon], 1
  5109                              <2> waitforsoundendbeep:
  5110 00003D84 A0[73020000]        <2> 	mov al, [soundon]
  5111 00003D89 3C00                <2> 	cmp al, 0
  5112 00003D8B 75F7                <2> 	jne waitforsoundendbeep
  5113 00003D8D C3                  <2> 	ret
  5114                              <2> 	
  5115                              <2> beepstart:
  5116 00003D8E 3200D111            <2> 	dw 50, 4561
  5117                              <2> beepend:
  5118                              <1> %ifdef dos.compatible
  5119                              <1> %else
  5120                              <1> 	%include 'source/programs/boot.asm'
  5121 00003D92 FF2C626F6F7400      <2> db 255,44,"boot",0
  5122                              <2> quickboot:
  5123                              <2> 	;load and jump to the bootloader
  5124                              <2> 	; mov ecx, 1
  5125                              <2> 	; xor ebx, ebx
  5126                              <2> 	; mov esi, 0x400000
  5127                              <2> 	; call diskr
  5128                              <2> 	; mov ax, LINEAR_SEL
  5129                              <2> 	; mov fs, ax
  5130                              <2> 	; mov esi, 0x400000
  5131                              <2> 	; mov edi, 0x7C00
  5132                              <2> 	; xor ebx, ebx
  5133                              <2> ; .lp:
  5134                              <2> 	; mov ecx, [esi+ebx]
  5135                              <2> 	; mov [fs:edi+ebx], ecx
  5136                              <2> 	; add ebx, 4
  5137                              <2> 	; cmp ebx, 512
  5138                              <2> 	; jb .lp
  5139 00003D99 66BB[A93D]          <2> 	mov bx, bootload
  5140 00003D9D 66891D[020D0000]    <2> 	mov [realmodeptr], bx
  5141 00003DA4 E947CEFFFF          <2> 	jmp realmode
  5142                              <2> [BITS 16]
  5143                              <2> bootload:
  5144 00003DA9 B80300              <2> 	mov ax, 3
  5145 00003DAC 31DB                <2> 	xor bx, bx
  5146 00003DAE CD10                <2> 	int 10h
  5147 00003DB0 EA007C0000          <2> 	jmp 0:0x7C00
  5148                              <2> [BITS 32]
  5149                              <1> %endif
  5150                              <1> %include 'source/programs/cd.asm'
  5151 00003DB5 FF2C636400          <2> db 255,44,"cd",0
  5152                              <2> cd:
  5153 00003DBA 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  5154 00003DC0 81C603000000        <2> 	add esi, 3
  5155 00003DC6 8B3D[10B20300]      <2> 	mov edi, [currentfolderloc]
  5156 00003DCC 893D[0CB20300]      <2> 	mov [lastfolderloc], edi
  5157 00003DD2 81C7[14B20300]      <2> 	add edi, currentfolder
  5158 00003DD8 4F                  <2> 	dec edi
  5159 00003DD9 66813E2E2E          <2> 	cmp word [esi], ".."
  5160 00003DDE 742A                <2> 	je .moveup
  5161 00003DE0 47                  <2> 	inc edi
  5162                              <2> .movedown:
  5163 00003DE1 8A06                <2> 	mov al, [esi]
  5164 00003DE3 8807                <2> 	mov [edi], al
  5165 00003DE5 47                  <2> 	inc edi
  5166 00003DE6 46                  <2> 	inc esi
  5167 00003DE7 3C00                <2> 	cmp al, 0
  5168 00003DE9 740A                <2> 	je .donecd
  5169 00003DEB 81FF[14B40300]      <2> 	cmp edi, currentfolderend
  5170 00003DF1 72EE                <2> 	jb .movedown
  5171 00003DF3 30C0                <2> 	xor al, al
  5172                              <2> .donecd:
  5173 00003DF5 4F                  <2> 	dec edi
  5174 00003DF6 C6072F              <2> 	mov byte [edi], '/'
  5175 00003DF9 47                  <2> 	inc edi
  5176 00003DFA C60700              <2> 	mov byte [edi], 0
  5177 00003DFD 81EF[14B20300]      <2> 	sub edi, currentfolder
  5178 00003E03 893D[10B20300]      <2> 	mov [currentfolderloc], edi
  5179 00003E09 C3                  <2> 	ret
  5180                              <2> .moveup:
  5181 00003E0A 31C0                <2> 	xor eax, eax
  5182 00003E0C A3[0CB20300]        <2> 	mov [lastfolderloc], eax
  5183                              <2> .moveuploop:
  5184 00003E11 4F                  <2> 	dec edi
  5185 00003E12 8A07                <2> 	mov al, [edi]
  5186 00003E14 81FF[14B20300]      <2> 	cmp edi, currentfolder
  5187 00003E1A 763B                <2> 	jbe .moveupover
  5188 00003E1C 3C2F                <2> 	cmp al, '/'
  5189 00003E1E 75F1                <2> 	jne .moveuploop
  5190 00003E20 C6072F              <2> 	mov byte [edi], '/'
  5191 00003E23 47                  <2> 	inc edi
  5192 00003E24 C60700              <2> 	mov byte [edi], 0
  5193 00003E27 81EF[14B20300]      <2> 	sub edi, currentfolder
  5194 00003E2D 893D[10B20300]      <2> 	mov [currentfolderloc], edi
  5195 00003E33 81C7[14B20300]      <2> 	add edi, currentfolder
  5196 00003E39 4F                  <2> 	dec edi
  5197                              <2> .lastfolder:
  5198 00003E3A 4F                  <2> 	dec edi
  5199 00003E3B 8A07                <2> 	mov al, [edi]
  5200 00003E3D 81FF[14B20300]      <2> 	cmp edi, currentfolder
  5201 00003E43 7604                <2> 	jbe .donemoveup
  5202 00003E45 3C2F                <2> 	cmp al, '/'
  5203 00003E47 75F1                <2> 	jne .lastfolder
  5204                              <2> .donemoveup:
  5205 00003E49 47                  <2> 	inc edi
  5206 00003E4A 81EF[14B20300]      <2> 	sub edi, currentfolder
  5207 00003E50 893D[0CB20300]      <2> 	mov [lastfolderloc], edi
  5208 00003E56 C3                  <2> 	ret
  5209                              <2> .moveupover:
  5210 00003E57 BF[14B20300]        <2> 	mov edi, currentfolder
  5211 00003E5C C6072F              <2> 	mov byte [edi], '/'
  5212 00003E5F 47                  <2> 	inc edi
  5213 00003E60 C60700              <2> 	mov byte [edi], 0
  5214 00003E63 31C0                <2> 	xor eax, eax
  5215 00003E65 A3[0CB20300]        <2> 	mov [lastfolderloc], eax
  5216 00003E6A 40                  <2> 	inc eax
  5217 00003E6B A3[10B20300]        <2> 	mov [currentfolderloc], eax
  5218 00003E70 C3                  <2> 	ret
  5219                              <1> %include 'source/programs/charmap.asm'
  5220 00003E71 00                  <2> charmapnum db 0
  5221 00003E72 FF2C636861726D6170- <2> db 255,44,"charmap",0
  5222 00003E7B 00                  <2>
  5223 00003E7C 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  5224 00003E82 81C608000000        <2> 	add esi, 8
  5225 00003E88 803E00              <2> 	cmp byte [esi], 0
  5226 00003E8B 7412                <2> 	je .nospecific
  5227 00003E8D E847F5FFFF          <2> 	call cnvrthextxt
  5228 00003E92 6689C8              <2> 	mov ax, cx
  5229 00003E95 66BB0700            <2> 	mov bx, 7
  5230 00003E99 E876E5FFFF          <2> 	call prcharq
  5231 00003E9E C3                  <2> 	ret
  5232                              <2> .nospecific:
  5233 00003E9F 66BB0700            <2> 	mov bx, 7
  5234 00003EA3 66B82000            <2> 	mov ax, " "
  5235 00003EA7 C605[713E0000]00    <2> 	mov byte [charmapnum], 0
  5236 00003EAE E861E5FFFF          <2> 	call prcharq
  5237 00003EB3 E85CE5FFFF          <2> 	call prcharq
  5238 00003EB8 E857E5FFFF          <2> 	call prcharq
  5239 00003EBD E852E5FFFF          <2> 	call prcharq
  5240 00003EC2 66B83000            <2> 	mov ax, "0"
  5241                              <2> charmapnumprnt:
  5242 00003EC6 E849E5FFFF          <2> 	call prcharq
  5243 00003ECB 6640                <2> 	inc ax
  5244 00003ECD 6650                <2> 	push ax
  5245 00003ECF 66B82000            <2> 	mov ax, " "
  5246 00003ED3 E83CE5FFFF          <2> 	call prcharq
  5247 00003ED8 6658                <2> 	pop ax
  5248 00003EDA 663D3900            <2> 	cmp ax, "9"
  5249 00003EDE 76E6                <2> 	jbe charmapnumprnt
  5250 00003EE0 66B84100            <2> 	mov ax, "A"
  5251                              <2> charmapnumprnt2:
  5252 00003EE4 E82BE5FFFF          <2> 	call prcharq
  5253 00003EE9 6640                <2> 	inc ax
  5254 00003EEB 6650                <2> 	push ax
  5255 00003EED 66B82000            <2> 	mov ax, " "
  5256 00003EF1 E81EE5FFFF          <2> 	call prcharq
  5257 00003EF6 6658                <2> 	pop ax
  5258 00003EF8 663D4700            <2> 	cmp ax, "G"
  5259 00003EFC 72E6                <2> 	jb charmapnumprnt2
  5260                              <2> 	
  5261 00003EFE BE[B4890000]        <2> 	mov esi, line
  5262 00003F03 E839DEFFFF          <2> 	call printquiet
  5263 00003F08 6631C0              <2> 	xor ax, ax
  5264 00003F0B 6689C1              <2> 	mov cx, ax
  5265 00003F0E E865F3FFFF          <2> 	call showhexsmall
  5266 00003F13 E925000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5267                              <2> charmapcopy:
  5268 00003F18 6640                <2> 	inc ax
  5269 00003F1A 663D0800            <2> 	cmp ax, 8
  5270 00003F1E 741D                <2> 	je charmapnocopy
  5271 00003F20 663D0900            <2> 	cmp ax, 9
  5272 00003F24 7417                <2> 	je charmapnocopy
  5273 00003F26 663D0A00            <2> 	cmp ax, 10
  5274 00003F2A 7411                <2> 	je charmapnocopy
  5275 00003F2C 663D0D00            <2> 	cmp ax, 13
  5276 00003F30 740B                <2> 	je charmapnocopy
  5277 00003F32 663D0001            <2> 	cmp ax, 256
  5278 00003F36 744D                <2> 	je nomorecharmap
  5279 00003F38 E904000000          <2> 	jmp okchar
  5280                              <2> charmapnocopy:
  5281 00003F3D 66B82000            <2> 	mov ax, " "
  5282                              <2> okchar:
  5283 00003F41 6650                <2> 	push ax
  5284 00003F43 E8CCE4FFFF          <2> 	call prcharq
  5285 00003F48 66B82000            <2> 	mov ax, " "
  5286 00003F4C E8C3E4FFFF          <2> 	call prcharq
  5287 00003F51 6658                <2> 	pop ax
  5288                              <2> charmapcopycheck:
  5289 00003F53 FE05[713E0000]      <2> 	inc byte [charmapnum]
  5290 00003F59 803D[713E0000]10    <2> 	cmp byte [charmapnum], 16
  5291 00003F60 72B6                <2> 	jb charmapcopy
  5292 00003F62 6650                <2> 	push ax
  5293 00003F64 BE[B4890000]        <2> 	mov esi, line
  5294 00003F69 E8D3DDFFFF          <2> 	call printquiet
  5295 00003F6E 6658                <2> 	pop ax
  5296 00003F70 88C1                <2> 	mov cl, al
  5297 00003F72 FEC1                <2> 	inc cl
  5298 00003F74 E8FFF2FFFF          <2> 	call showhexsmall
  5299 00003F79 C605[713E0000]00    <2> 	mov byte [charmapnum], 0
  5300 00003F80 E993FFFFFF          <2> 	jmp charmapcopy
  5301                              <2> nomorecharmap:
  5302 00003F85 C3                  <2> 	ret
  5303                              <1> %ifdef gui.included
  5304                              <1> 	%include 'source/programs/circle.asm'
  5305 00003F86 FF2C636972636C6500  <2> db 255,44,"circle",0
  5306                              <2> circle:
  5307 00003F8F 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  5308 00003F95 81C607000000        <2> 	add esi, 7
  5309 00003F9B 66B91000            <2> 	mov cx, 16
  5310 00003F9F 30C0                <2> 	xor al, al
  5311 00003FA1 3806                <2> 	cmp [esi], al
  5312 00003FA3 7405                <2> 	je .nocmdline
  5313 00003FA5 E87BF4FFFF          <2> 	call cnvrttxt
  5314                              <2> .nocmdline:
  5315 00003FAA E80A0B0000          <2> 	call linetester.stime
  5316 00003FAF E857000000          <2> 	call fcircle.nocmdline
  5317 00003FB4 E8180B0000          <2> 	call linetester.etime
  5318 00003FB9 53                  <2> 	push ebx
  5319 00003FBA 57                  <2> 	push edi
  5320 00003FBB E8C1E3FFFF          <2> 	call getchar
  5321 00003FC0 59                  <2> 	pop ecx
  5322 00003FC1 E881F3FFFF          <2> 	call showdec
  5323 00003FC6 BE[5F4B0000]        <2> 	mov esi, linetester.msgcircle
  5324 00003FCB E871DDFFFF          <2> 	call printquiet
  5325 00003FD0 59                  <2> 	pop ecx
  5326 00003FD1 E871F3FFFF          <2> 	call showdec
  5327 00003FD6 BE[764B0000]        <2> 	mov esi, linetester.msgtime
  5328 00003FDB E861DDFFFF          <2> 	call printquiet
  5329 00003FE0 E81D320000          <2> 	call reloadallgraphics
  5330 00003FE5 C3                  <2> 	ret
  5331                              <2> 	
  5332 00003FE6 FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5333 00003FEF 00                  <2>
  5334                              <2> fcircle:	
  5335 00003FF0 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  5336 00003FF6 81C608000000        <2> 	add esi, 8
  5337 00003FFC 66B91000            <2> 	mov cx, 16
  5338 00004000 30C0                <2> 	xor al, al
  5339 00004002 3806                <2> 	cmp [esi], al
  5340 00004004 7405                <2> 	je .nocmdline
  5341 00004006 E81AF4FFFF          <2> 	call cnvrttxt
  5342                              <2> .nocmdline:
  5343 0000400B 6689C8              <2> 	mov ax, cx
  5344 0000400E 66D1E1              <2> 	shl cx, 1
  5345 00004011 6689CA              <2> 	mov dx, cx
  5346 00004014 663B15[0F580000]    <2> 	cmp dx, [resolutionx]
  5347 0000401B 731B                <2> 	jae .done
  5348 0000401D 663B0D[11580000]    <2> 	cmp cx, [resolutiony]
  5349 00004024 7312                <2> 	jae .done
  5350 00004026 668B35[71020000]    <2> 	mov si, [timenanoseconds + 2]
  5351 0000402D 31FF                <2> 	xor edi, edi
  5352 0000402F 803D[D9890000]01    <2> 	cmp byte [guion], 1
  5353 00004036 7401                <2> 	je .lp
  5354 00004038 C3                  <2> .done ret
  5355                              <2> .lp:
  5356 00004039 6629C2              <2> 	sub dx, ax
  5357 0000403C 6629C1              <2> 	sub cx, ax
  5358 0000403F 60                  <2> 	pusha
  5359 00004040 E8552C0000          <2> 	call fillcircle
  5360 00004045 61                  <2> 	popa
  5361 00004046 47                  <2> 	inc edi
  5362 00004047 660335[6F020000]    <2> 	add si, [timenanoseconds]
  5363 0000404E 6601C2              <2> 	add dx, ax
  5364 00004051 6601C2              <2> 	add dx, ax
  5365 00004054 6601C2              <2> 	add dx, ax
  5366 00004057 6601C1              <2> 	add cx, ax
  5367 0000405A 663B15[0F580000]    <2> 	cmp dx, [resolutionx]
  5368 00004061 72D6                <2> 	jb .lp
  5369 00004063 6689C2              <2> 	mov dx, ax
  5370 00004066 6601C2              <2> 	add dx, ax
  5371 00004069 6601C1              <2> 	add cx, ax
  5372 0000406C 6601C1              <2> 	add cx, ax
  5373 0000406F 663B0D[11580000]    <2> 	cmp cx, [resolutiony]
  5374 00004076 72C1                <2> 	jb .lp
  5375 00004078 C3                  <2> 	ret
  5376                              <1> %endif
  5377                              <1> %include 'source/programs/clear.asm'
  5378 00004079 FF2C636C65617200    <2> db 255,44,"clear",0
  5379 00004081 E894DDFFFF          <2> 		call clear
  5380 00004086 C3                  <2> 		ret 
  5381                              <1> %include 'source/programs/cpuid.asm'
  5382 00004087 FF2C637075696400    <2> db 255,44,"cpuid",0
  5383 0000408F 31C0                <2> 	xor eax, eax
  5384 00004091 0FA2                <2> 	cpuid
  5385 00004093 891D[E4400000]      <2> 	mov [cpuidbuf], ebx
  5386 00004099 8915[E8400000]      <2> 	mov [cpuidbuf + 4], edx
  5387 0000409F 890D[EC400000]      <2> 	mov [cpuidbuf + 8], ecx
  5388 000040A5 BE[E4400000]        <2> 	mov esi, cpuidbuf
  5389 000040AA E8B6DCFFFF          <2> 	call print
  5390 000040AF BE[B4890000]        <2> 	mov esi, line
  5391 000040B4 E8ACDCFFFF          <2> 	call print
  5392 000040B9 B801000000          <2> 	mov eax, 1
  5393 000040BE 0FA2                <2> 	cpuid
  5394 000040C0 89C1                <2> 	mov ecx, eax
  5395 000040C2 C605[77320000]02    <2> 	mov byte [firsthexshown], 2
  5396 000040C9 E8BEF1FFFF          <2> 	call showhex
  5397 000040CE B808000080          <2> 	mov eax, 0x80000008
  5398 000040D3 0FA2                <2> 	cpuid
  5399 000040D5 89C1                <2> 	mov ecx, eax
  5400 000040D7 C605[77320000]02    <2> 	mov byte [firsthexshown], 2
  5401 000040DE E8A9F1FFFF          <2> 	call showhex
  5402 000040E3 C3                  <2> 	ret
  5403                              <2> 	
  5404 000040E4 00<rept>            <2> cpuidbuf times 13 db 0
  5405                              <2> cpuidvendorend:
  5406                              <1> %include 'source/programs/date.asm'
  5407 000040F1 082E30303030303030- <2> timenscache db 8,".000000000"
  5408 000040FA 3030                <2>
  5409 000040FC 200A00              <2> timenscacheend: db " ",10,0
  5410 000040FF 00                  <2> istimeset db 0
  5411 00004100 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5412 00004109 2063757272656E7420- <2>
  5413 00004112 554E49582074696D65- <2>
  5414 0000411B 3A0A00              <2>
  5415 0000411E 00<rept>            <2> timeinputbuffer times 12 db 0
  5416 0000412A 00                  <2> timeinputbend: db 0
  5417                              <2> 
  5418 0000412B FF2C6461746500      <2> db 255,44,"date",0
  5419                              <2> 	;cmp byte [istimeset], 0
  5420                              <2> 	;jne timeisset
  5421 00004132 E880000000          <2> 	call time
  5422 00004137 E828020000          <2> 	call timeconvert	
  5423                              <2> 	; mov esi, settimemsg
  5424                              <2> 	; call print
  5425                              <2> 	; mov esi, timeinputbuffer
  5426                              <2> 	; mov edi, timeinputbend
  5427                              <2> 	; call readline
  5428                              <2> 	; mov esi, timeinputbuffer
  5429                              <2> 	; xor edi, edi
  5430                              <2> 	; call cnvrttxt
  5431 0000413C 890D[6B020000]      <2> 	mov [timeseconds], ecx
  5432                              <2> 	;xor ecx, ecx
  5433                              <2> 	;mov [timenanoseconds], ecx
  5434 00004142 C605[FF400000]01    <2> 	mov byte [istimeset], 1
  5435                              <2> timeisset:
  5436 00004149 8B0D[6B020000]      <2> 	mov ecx, [timeseconds]
  5437 0000414F E8F3F1FFFF          <2> 	call showdec
  5438                              <2> 	
  5439 00004154 8B0D[6F020000]      <2> 	mov ecx, [timenanoseconds]
  5440 0000415A BE[F1400000]        <2> 	mov esi, timenscache
  5441 0000415F C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5442 00004166 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5443 0000416D C6460A30            <2> 	mov byte [esi + 10], "0"
  5444 00004171 BE[FC400000]        <2> 	mov esi, timenscacheend
  5445 00004176 E8A9EFFFFF          <2> 	call convert
  5446 0000417B BE[F1400000]        <2> 	mov esi, timenscache
  5447 00004180 E8BCDBFFFF          <2> 	call printquiet
  5448                              <2> 	
  5449 00004185 E82D000000          <2> 	call time
  5450 0000418A BE[D2440000]        <2> 	mov esi, timeshow
  5451 0000418F E8ADDBFFFF          <2> 	call printquiet
  5452 00004194 BE[B4890000]        <2> 	mov esi, line
  5453 00004199 E8A3DBFFFF          <2> 	call printquiet
  5454 0000419E BE[DB440000]        <2> 	mov esi, dateshow
  5455 000041A3 E899DBFFFF          <2> 	call printquiet
  5456 000041A8 BE[B4890000]        <2> 	mov esi, line
  5457 000041AD E88FDBFFFF          <2> 	call printquiet
  5458 000041B2 E9BE000000          <2> 	jmp findday
  5459                              <2> time:
  5460 000041B7 E851010000          <2> 	call tstackput1
  5461 000041BC B00A                <2> 	mov al,10			;Get RTC register A
  5462 000041BE E87B010000          <2> 	call tget1
  5463 000041C3 A880                <2> 	test al,0x80			;Is update in progress?
  5464 000041C5 75F0                <2> 	jne time				; yes, wait
  5465                              <2> 
  5466 000041C7 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5467 000041C9 E870010000          <2> 	call tget1
  5468 000041CE A2[C9440000]        <2> 	mov [RTCtimeSecond],al
  5469                              <2> 
  5470 000041D3 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5471 000041D5 E864010000          <2> 	call tget1
  5472 000041DA A2[CA440000]        <2> 	mov [RTCtimeMinute],al
  5473                              <2> 
  5474 000041DF B004                <2> 	mov al,0x04			;Get hours (see notes)
  5475 000041E1 E858010000          <2> 	call tget1
  5476 000041E6 A2[CB440000]        <2> 	mov [RTCtimeHour],al
  5477                              <2> 
  5478 000041EB B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5479 000041ED E84C010000          <2> 	call tget1
  5480 000041F2 A2[CC440000]        <2> 	mov [RTCtimeDay],al
  5481                              <2> 
  5482 000041F7 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5483 000041F9 E840010000          <2> 	call tget1
  5484 000041FE 241F                <2> 	and al, 11111b
  5485 00004200 A2[CD440000]        <2> 	mov [RTCtimeMonth],al
  5486                              <2> 
  5487 00004205 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5488 00004207 E832010000          <2> 	call tget1
  5489 0000420C A2[CE440000]        <2> 	mov [RTCtimeYear],al
  5490                              <2> 	
  5491 00004211 BE[D2440000]        <2> 	mov esi, timeshow
  5492 00004216 8A2D[CB440000]      <2> 	mov ch, [RTCtimeHour]
  5493 0000421C E828010000          <2> 	call tput1
  5494 00004221 8A2D[CA440000]      <2> 	mov ch, [RTCtimeMinute]
  5495 00004227 E81D010000          <2> 	call tput1
  5496 0000422C 8A2D[C9440000]      <2> 	mov ch, [RTCtimeSecond]
  5497 00004232 E812010000          <2> 	call tput1
  5498 00004237 BE[DB440000]        <2> 	mov esi, dateshow
  5499 0000423C 8A2D[CD440000]      <2> 	mov ch, [RTCtimeMonth]
  5500 00004242 E802010000          <2> 	call tput1
  5501 00004247 8A2D[CC440000]      <2> 	mov ch, [RTCtimeDay]
  5502 0000424D E8F7000000          <2> 	call tput1
  5503 00004252 B520                <2> 	mov ch, 0x20
  5504 00004254 E8F0000000          <2> 	call tput1
  5505 00004259 4E                  <2> 	dec esi
  5506 0000425A 8A2D[CE440000]      <2> 	mov ch, [RTCtimeYear]
  5507 00004260 E8E4000000          <2> 	call tput1
  5508 00004265 E8BD000000          <2> 	call tstackget1
  5509 0000426A C3                  <2> 	ret
  5510 0000426B BE[D2440000]        <2> 	mov esi, timeshow
  5511 00004270 E8F0DAFFFF          <2> 	call print
  5512                              <2> ;get day of week
  5513                              <2> ;add these:
  5514                              <2> ;century value
  5515                              <2> ;last 2 digits of year
  5516                              <2> ;last 2 digits of year right shifted twice
  5517                              <2> ;month table value
  5518                              <2> ;day of the month
  5519                              <2> ;divide these by 7
  5520                              <2> ;the remainder is the day
  5521                              <2> findday:
  5522 00004275 31C0                <2> 	xor eax, eax
  5523                              <2> ;first convert the values from BCD to hex
  5524 00004277 A0[CC440000]        <2> 	mov al, [RTCtimeDay]
  5525 0000427C E873000000          <2> 	call converttohex
  5526 00004281 8825[CF440000]      <2> 	mov [dayhex], ah
  5527 00004287 A0[CD440000]        <2> 	mov al, [RTCtimeMonth]
  5528 0000428C E863000000          <2> 	call converttohex
  5529 00004291 8825[D0440000]      <2> 	mov [monthhex], ah
  5530 00004297 A0[CE440000]        <2> 	mov al, [RTCtimeYear]
  5531 0000429C E853000000          <2> 	call converttohex
  5532 000042A1 8825[D1440000]      <2> 	mov [yearhex], ah
  5533 000042A7 31C0                <2> 	xor eax, eax
  5534 000042A9 A0[D1440000]        <2> 	mov al, [yearhex]
  5535 000042AE C0E802              <2> 	shr al, 2
  5536 000042B1 0205[D1440000]      <2> 	add al, [yearhex]
  5537 000042B7 0506000000          <2> 	add eax, 6
  5538 000042BC 31DB                <2> 	xor ebx, ebx
  5539 000042BE 8A1D[D0440000]      <2> 	mov bl, [monthhex]
  5540 000042C4 FECB                <2> 	dec bl
  5541 000042C6 81C3[F0440000]      <2> 	add ebx, month
  5542 000042CC 31C9                <2> 	xor ecx, ecx
  5543 000042CE 8A0B                <2> 	mov cl, [ebx]
  5544 000042D0 01C8                <2> 	add eax, ecx
  5545 000042D2 8A0D[CF440000]      <2> 	mov cl, [dayhex]
  5546 000042D8 01C8                <2> 	add eax, ecx
  5547 000042DA 66BB0700            <2> 	mov bx, 7
  5548 000042DE 31D2                <2> 	xor edx, edx
  5549 000042E0 66F7F3              <2> 	div bx
  5550 000042E3 C1E202              <2> 	shl edx, 2
  5551 000042E6 81C2[FC440000]      <2> 	add edx, day
  5552 000042EC 8B32                <2> 	mov esi, [edx]
  5553 000042EE E872DAFFFF          <2> 	call print
  5554 000042F3 C3                  <2> 	ret
  5555                              <2> 	
  5556                              <2> converttohex:
  5557 000042F4 88C4                <2> 	mov ah, al
  5558 000042F6 C0E804              <2> 	shr al, 4
  5559 000042F9 C0E404              <2> 	shl ah, 4
  5560 000042FC C0EC04              <2> 	shr ah, 4
  5561 000042FF 3C00                <2> 	cmp al, 0
  5562 00004301 7409                <2> 	je noconverttohex
  5563                              <2> converttohexlp:
  5564 00004303 80C40A              <2> 	add ah, 10
  5565 00004306 FEC8                <2> 	dec al
  5566 00004308 3C00                <2> 	cmp al, 0
  5567 0000430A 75F7                <2> 	jne converttohexlp
  5568                              <2> noconverttohex:
  5569 0000430C C3                  <2> 	ret
  5570                              <2> 	
  5571                              <2> tstackput1:
  5572 0000430D 8935[C5440000]      <2> 	mov [tstack + 20], esi
  5573 00004313 BE[B1440000]        <2> 	mov esi, tstack
  5574 00004318 8906                <2> 	mov [esi], eax
  5575 0000431A 895E04              <2> 	mov [esi + 4], ebx
  5576 0000431D 894E08              <2> 	mov [esi + 8], ecx
  5577 00004320 89560C              <2> 	mov [esi + 12], edx
  5578 00004323 897E10              <2> 	mov [esi + 16], edi
  5579 00004326 C3                  <2> 	ret
  5580                              <2> 	
  5581                              <2> tstackget1:
  5582 00004327 BE[B1440000]        <2> 	mov esi, tstack
  5583 0000432C 8B06                <2> 	mov eax, [esi]
  5584 0000432E 8B5E04              <2> 	mov ebx, [esi + 4]
  5585 00004331 8B4E08              <2> 	mov ecx, [esi + 8]
  5586 00004334 8B560C              <2> 	mov edx, [esi + 12]
  5587 00004337 8B7E10              <2> 	mov edi, [esi + 16]
  5588 0000433A 8B7614              <2> 	mov esi, [esi + 20]
  5589 0000433D C3                  <2> 	ret
  5590                              <2> 	
  5591                              <2> tget1:
  5592 0000433E 66BA7000            <2> 	mov dx, 0x70
  5593 00004342 EE                  <2> 	out dx, al
  5594 00004343 6642                <2> 	inc dx
  5595 00004345 EC                  <2> 	in al, dx
  5596 00004346 664A                <2> 	dec dx
  5597 00004348 C3                  <2> 	ret
  5598                              <2> 	
  5599                              <2> tput1:
  5600 00004349 66C1E904            <2> 	shr cx, 4
  5601 0000434D B030                <2> 	mov al, 48
  5602 0000434F 00E8                <2> 	add al, ch
  5603 00004351 8806                <2> 	mov [esi], al
  5604 00004353 46                  <2> 	inc esi
  5605 00004354 B030                <2> 	mov al, 48
  5606 00004356 C0E904              <2> 	shr cl, 4
  5607 00004359 00C8                <2> 	add al, cl
  5608 0000435B 8806                <2> 	mov [esi], al
  5609 0000435D 81C602000000        <2> 	add esi, 2
  5610 00004363 C3                  <2> 	ret
  5611                              <2> 	
  5612                              <2> timeconvert: ;return time in the RTCtime stuff in ecx
  5613 00004364 31DB                <2> 	xor ebx, ebx
  5614 00004366 31C9                <2> 	xor ecx, ecx
  5615 00004368 31FF                <2> 	xor edi, edi
  5616 0000436A 31F6                <2> 	xor esi, esi
  5617                              <2> 	
  5618 0000436C A0[C9440000]        <2> 	mov al, [RTCtimeSecond]
  5619 00004371 E87EFFFFFF          <2> 	call converttohex
  5620 00004376 88E1                <2> 	mov cl, ah
  5621                              <2> 	
  5622 00004378 A0[CA440000]        <2> 	mov al, [RTCtimeMinute]
  5623 0000437D E872FFFFFF          <2> 	call converttohex
  5624 00004382 88E3                <2> 	mov bl, ah
  5625 00004384 B83C000000          <2> 	mov eax, 60
  5626 00004389 31D2                <2> 	xor edx, edx
  5627 0000438B F7E3                <2> 	mul ebx
  5628 0000438D 01C1                <2> 	add ecx, eax
  5629                              <2> 	
  5630 0000438F A0[CB440000]        <2> 	mov al, [RTCtimeHour]
  5631 00004394 E85BFFFFFF          <2> 	call converttohex
  5632 00004399 88E3                <2> 	mov bl, ah
  5633 0000439B B8100E0000          <2> 	mov eax, 3600
  5634 000043A0 31D2                <2> 	xor edx, edx
  5635 000043A2 F7E3                <2> 	mul ebx
  5636 000043A4 01C1                <2> 	add ecx, eax
  5637                              <2> 		
  5638 000043A6 31C0                <2> 	xor eax, eax
  5639 000043A8 A0[CE440000]        <2> 	mov al, [RTCtimeYear]
  5640 000043AD E842FFFFFF          <2> 	call converttohex
  5641 000043B2 6689C6              <2> 	mov si, ax
  5642 000043B5 66C1EE08            <2> 	shr si, 8
  5643 000043B9 6681FE4600          <2> 	cmp si, 70
  5644 000043BE 7705                <2> 	ja .no100
  5645 000043C0 6681C66400          <2> 	add si, 100
  5646                              <2> .no100:
  5647 000043C5 6681C66C07          <2> 	add si, 1900
  5648                              <2> 	
  5649 000043CA BB[A3440000]        <2> 	mov ebx, .month
  5650 000043CF A0[CC440000]        <2> 	mov al, [RTCtimeDay]
  5651 000043D4 E81BFFFFFF          <2> 	call converttohex
  5652 000043D9 88E0                <2> 	mov al, ah
  5653 000043DB FEC8                <2> 	dec al
  5654 000043DD 31D2                <2> 	xor edx, edx
  5655 000043DF 88C2                <2> 	mov dl, al
  5656 000043E1 A0[CD440000]        <2> 	mov al, [RTCtimeMonth]
  5657 000043E6 E809FFFFFF          <2> 	call converttohex
  5658 000043EB 88D0                <2> 	mov al, dl
  5659 000043ED 88E2                <2> 	mov dl, ah
  5660 000043EF 30E4                <2> 	xor ah, ah
  5661 000043F1 6689D5              <2> 	mov bp, dx
  5662                              <2> 	
  5663 000043F4 6689F7              <2> 	mov di, si
  5664 000043F7 66C1EF02            <2> 	shr di, 2
  5665 000043FB 66C1E702            <2> 	shl di, 2
  5666 000043FF C605[A4440000]1C    <2> 	mov byte [.month + 1], 28
  5667 00004406 6639F7              <2> 	cmp di, si
  5668 00004409 7506                <2> 	jne .nofebmod
  5669 0000440B FE05[A4440000]      <2> 	inc byte [.month + 1]
  5670                              <2> .nofebmod:
  5671 00004411 664D                <2> 	dec bp
  5672 00004413 6681FD0000          <2> 	cmp bp, 0
  5673 00004418 740A                <2> 	je .ylp
  5674 0000441A 8A13                <2> 	mov dl, [ebx]
  5675 0000441C 01D0                <2> 	add eax, edx
  5676 0000441E 43                  <2> 	inc ebx
  5677 0000441F E9EDFFFFFF          <2> 	jmp .nofebmod
  5678                              <2> 	
  5679                              <2> .ylp:
  5680 00004424 6689F7              <2> 	mov di, si
  5681 00004427 66C1EF02            <2> 	shr di, 2
  5682 0000442B 66C1E702            <2> 	shl di, 2
  5683 0000442F 81C18033E101        <2> 	add ecx, 31536000
  5684 00004435 6639F7              <2> 	cmp di, si
  5685 00004438 7506                <2> 	jne .noymod
  5686 0000443A 81C180510100        <2> 	add ecx, 86400
  5687                              <2> .noymod:
  5688 00004440 664E                <2> 	dec si
  5689 00004442 6681FEB207          <2> 	cmp si, 1970
  5690 00004447 77DB                <2> 	ja .ylp
  5691                              <2> 	
  5692 00004449 BB80510100          <2> 	mov ebx, 86400
  5693 0000444E 31D2                <2> 	xor edx, edx
  5694 00004450 F7E3                <2> 	mul ebx
  5695 00004452 01C1                <2> 	add ecx, eax
  5696                              <2> 	
  5697 00004454 31DB                <2> 	xor ebx, ebx
  5698 00004456 31D2                <2> 	xor edx, edx
  5699 00004458 B8100E0000          <2> 	mov eax, 3600
  5700 0000445D 8A3D[AF440000]      <2> 	mov bh, [timezoneh]
  5701 00004463 80FF80              <2> 	cmp bh, 128
  5702 00004466 720D                <2> 	jb .posh
  5703 00004468 28FB                <2> 	sub bl, bh
  5704 0000446A 30FF                <2> 	xor bh, bh
  5705 0000446C F7E3                <2> 	mul ebx
  5706 0000446E 01C1                <2> 	add ecx, eax
  5707 00004470 E906000000          <2> 	jmp .doneth
  5708                              <2> .posh:
  5709 00004475 86DF                <2> 	xchg bl, bh
  5710 00004477 F7E3                <2> 	mul ebx
  5711 00004479 29C1                <2> 	sub ecx, eax
  5712                              <2> .doneth:
  5713                              <2> 
  5714 0000447B 31DB                <2> 	xor ebx, ebx	
  5715 0000447D 31D2                <2> 	xor edx, edx
  5716 0000447F B83C000000          <2> 	mov eax, 60
  5717 00004484 8A3D[B0440000]      <2> 	mov bh, [timezonem]
  5718 0000448A 80FF80              <2> 	cmp bh, 128
  5719 0000448D 720D                <2> 	jb .posm
  5720 0000448F 28FB                <2> 	sub bl, bh
  5721 00004491 30FF                <2> 	xor bh, bh
  5722 00004493 F7E3                <2> 	mul ebx
  5723 00004495 01C1                <2> 	add ecx, eax
  5724 00004497 E906000000          <2> 	jmp .donetm
  5725                              <2> .posm:
  5726 0000449C 86DF                <2> 	xchg bl, bh
  5727 0000449E F7E3                <2> 	mul ebx
  5728 000044A0 29C1                <2> 	sub ecx, eax
  5729                              <2> .donetm:
  5730                              <2> 
  5731 000044A2 C3                  <2> 	ret
  5732                              <2> 	
  5733                              <2> 
  5734 000044A3 1F1C1F1E1F1E1F1F1E- <2> .month db 31,28,31,30,31,30,31,31,30,31,30,31
  5735 000044AC 1F1E1F              <2>
  5736                              <2> 
  5737 000044AF FA                  <2> 	timezoneh db -6
  5738 000044B0 00                  <2> 	timezonem db 0
  5739 000044B1 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5740 000044BA 000000000000000000- <2>
  5741 000044C3 000000000000        <2>
  5742 000044C9 00                  <2> 	RTCtimeSecond db 0
  5743 000044CA 00                  <2> 	RTCtimeMinute db 0
  5744 000044CB 00                  <2> 	RTCtimeHour db 0
  5745 000044CC 00                  <2> 	RTCtimeDay db 0
  5746 000044CD 00                  <2> 	RTCtimeMonth db 0
  5747 000044CE 00                  <2> 	RTCtimeYear db 0
  5748 000044CF 00                  <2> 	dayhex db 0
  5749 000044D0 00                  <2> 	monthhex db 0
  5750 000044D1 00                  <2> 	yearhex db 0
  5751 000044D2 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  5752 000044DB 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  5753 000044E4 302000              <2>
  5754                              <2> 	oldcentury:	;from 1700 to 1900
  5755 000044E7 040200              <2> 	db 4,2,0
  5756                              <2> 	century:	;from 2000 to 2500
  5757 000044EA 060402000604        <2> 	db 6,4,2,0,6,4
  5758                              <2> 	month:
  5759 000044F0 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5760 000044F9 000305              <2>
  5761                              <2> 	day:
  5762 000044FC [18450000]          <2> 	dd sunday
  5763 00004500 [20450000]          <2> 	dd monday
  5764 00004504 [28450000]          <2> 	dd tuesday
  5765 00004508 [31450000]          <2> 	dd wednesday
  5766 0000450C [3C450000]          <2> 	dd thursday
  5767 00004510 [46450000]          <2> 	dd friday
  5768 00004514 [4E450000]          <2> 	dd saturday
  5769                              <2> sunday:
  5770 00004518 53756E6461790A00    <2> 	db "Sunday",10,0
  5771                              <2> monday:
  5772 00004520 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5773                              <2> tuesday:
  5774 00004528 547565736461790A00  <2> 	db "Tuesday",10,0
  5775                              <2> wednesday:
  5776 00004531 5765646E6573646179- <2> 	db "Wednesday",10,0
  5777 0000453A 0A00                <2>
  5778                              <2> thursday:
  5779 0000453C 54687572736461790A- <2> 	db "Thursday",10,0
  5780 00004545 00                  <2>
  5781                              <2> friday:
  5782 00004546 4672696461790A00    <2> 	db "Friday",10,0
  5783                              <2> saturday:
  5784 0000454E 53617475726461790A- <2> 	db "Saturday",10,0
  5785 00004557 00                  <2>
  5786                              <1> %ifdef network.included
  5787                              <1> 	%include 'source/programs/dhcp.asm'
  5788                              <1> %endif
  5789                              <1> %ifdef disk.none
  5790                              <1> %else
  5791                              <1> 	%include 'source/programs/dos.asm'
  5792 00004558 FF2C646F7300        <2> db 255,44,"dos",0
  5793                              <2> dosrunner:
  5794 0000455E 8925[08B20300]      <2> 	mov [previousstack], esp
  5795 00004564 8B3D[43300000]      <2> 	mov edi, [currentcommandloc]
  5796 0000456A 81C704000000        <2> 	add edi, 4
  5797 00004570 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5798 00004575 E851230000          <2> 	call loadfile
  5799 0000457A 8B3D[43300000]      <2> 	mov edi, [currentcommandloc]
  5800 00004580 81C704000000        <2> 	add edi, 4
  5801 00004586 81FA94010000        <2> 	cmp edx, 404
  5802 0000458C 0F845E000000        <2> 	je near .noprogfound
  5803 00004592 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5804 00004597 31C9                <2> 	xor ecx, ecx
  5805                              <2> .findparams:
  5806 00004599 47                  <2> 	inc edi
  5807 0000459A 8A07                <2> 	mov al, [edi]
  5808 0000459C 3C20                <2> 	cmp al, " "
  5809 0000459E 75F9                <2> 	jne .findparams
  5810                              <2> .copyparams:
  5811 000045A0 8A07                <2> 	mov al, [edi]
  5812 000045A2 8803                <2> 	mov [ebx], al
  5813 000045A4 43                  <2> 	inc ebx
  5814 000045A5 47                  <2> 	inc edi
  5815 000045A6 41                  <2> 	inc ecx
  5816 000045A7 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5817 000045AD 7304                <2> 	jae .nomoreparams
  5818 000045AF 3C00                <2> 	cmp al, 0
  5819 000045B1 75ED                <2> 	jne .copyparams
  5820                              <2> .nomoreparams:
  5821 000045B3 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5822 000045B9 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5823 000045BD 8ED8                <2> 	mov ds, ax
  5824 000045BF 8EC0                <2> 	mov es, ax
  5825 000045C1 8EE0                <2> 	mov fs, ax
  5826 000045C3 8EE8                <2> 	mov gs, ax
  5827 000045C5 31C0                <2> 	xor eax, eax
  5828 000045C7 31DB                <2> 	xor ebx, ebx
  5829 000045C9 31C9                <2> 	xor ecx, ecx
  5830 000045CB 31D2                <2> 	xor edx, edx
  5831 000045CD 31FF                <2> 	xor edi, edi
  5832 000045CF 31F6                <2> 	xor esi, esi
  5833 000045D1 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5834 000045D8 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5835 000045DC 6689DA              <2> 	mov dx, bx
  5836 000045DF 8EC3                <2> 	mov es, bx
  5837 000045E1 8EE3                <2> 	mov fs, bx
  5838 000045E3 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5839 000045E7 8EEB                <2> 	mov gs, bx
  5840 000045E9 8B25[08B20300]      <2> 	mov esp, [previousstack]
  5841 000045EF C3                  <2> 	ret
  5842                              <2> .noprogfound:
  5843 000045F0 BE[7B890000]        <2> 	mov esi, notfound1
  5844 000045F5 E86BD7FFFF          <2> 	call print
  5845 000045FA 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  5846 00004600 81C604000000        <2> 	add esi, 4
  5847 00004606 E85AD7FFFF          <2> 	call print
  5848 0000460B BE[83890000]        <2> 	mov esi, notfound2
  5849 00004610 E850D7FFFF          <2> 	call print
  5850 00004615 C3                  <2> 	ret
  5851                              <2> 	
  5852                              <1> %endif
  5853                              <1> %include 'source/programs/dump.asm'
  5854 00004616 FF2C64756D7000      <2> db 255,44,"dump",0
  5855 0000461D 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  5856 00004623 81C605000000        <2> 	add esi, 5
  5857 00004629 31C9                <2> 	xor ecx, ecx
  5858 0000462B 66B83078            <2> 	mov ax, "0x"
  5859 0000462F 663906              <2> 	cmp [esi], ax
  5860 00004632 740A                <2> 	je dumphexin
  5861 00004634 E8ECEDFFFF          <2> 	call cnvrttxt
  5862 00004639 E910000000          <2> 	jmp dumphexnow
  5863                              <2> dumphexin:
  5864 0000463E 81C602000000        <2> 	add esi, 2
  5865 00004644 E890EDFFFF          <2> 	call cnvrthextxt
  5866 00004649 E900000000          <2> 	jmp dumphexnow
  5867                              <2> dumphexnow:
  5868 0000464E 89CF                <2> 	mov edi, ecx
  5869 00004650 89FE                <2> 	mov esi, edi
  5870 00004652 81C680030000        <2> 	add esi, 896
  5871                              <2> dumphexloop:
  5872 00004658 8B0F                <2> 	mov ecx, [edi]
  5873 0000465A C605[77320000]05    <2> 	mov byte [firsthexshown],5
  5874 00004661 E826ECFFFF          <2> 	call showhex
  5875 00004666 81C704000000        <2> 	add edi, 4
  5876 0000466C 39F7                <2> 	cmp edi, esi
  5877 0000466E 72E8                <2> 	jb dumphexloop
  5878 00004670 E8A6E2FFFF          <2> 	call termcopy
  5879 00004675 C3                  <2> 	ret 
  5880                              <1> %include 'source/programs/echo.asm'
  5881 00004676 FF2C6563686F00      <2> db 255,44,"echo",0
  5882                              <2> 	echoprog:
  5883 0000467D 8B35[43300000]      <2> 		mov esi, [currentcommandloc]
  5884 00004683 81C605000000        <2> 		add esi, 5
  5885 00004689 8A06                <2> 		mov al, [esi]
  5886 0000468B E8B1D6FFFF          <2> 		call printquiet
  5887 00004690 E8CBD6FFFF          <2> 		call printline
  5888 00004695 C3                  <2> 		ret
  5889 00004696 BB[88B40300]        <2> 	echovr:	mov ebx, variables
  5890 0000469B BF06000000          <2> 		mov edi, 6
  5891 000046A0 E83F000000          <2> 		call nxtvrech
  5892 000046A5 E95A000000          <2> 		jmp prntvr2
  5893 000046AA B13D                <2> 	echvar:	mov cl, '='
  5894 000046AC 43                  <2> 		inc ebx
  5895 000046AD 8A03                <2> 		mov al, [ebx]
  5896 000046AF 3C00                <2> 		cmp al, 0
  5897 000046B1 7431                <2> 		je nxtvrech
  5898 000046B3 3C3D                <2> 		cmp al, '='
  5899 000046B5 7422                <2> 		je nxtvrechb1
  5900 000046B7 8B35[43300000]      <2> 		mov esi, [currentcommandloc]
  5901 000046BD 01FE                <2> 		add esi, edi
  5902 000046BF E8C4E9FFFF          <2> 		call cndtest
  5903 000046C4 3C02                <2> 		cmp al, 2
  5904 000046C6 7438                <2> 		je prntvr
  5905 000046C8 3C01                <2> 		cmp al, 1
  5906 000046CA 7434                <2> 		je prntvr
  5907 000046CC 8B35[43300000]      <2> 		mov esi, [currentcommandloc]
  5908 000046D2 01FE                <2> 		add esi, edi
  5909 000046D4 E90B000000          <2> 		jmp nxtvrech
  5910                              <2> 	nxtvrechb1:
  5911 000046D9 81EB02000000        <2> 		sub ebx, 2
  5912 000046DF E9C6FFFFFF          <2> 		jmp echvar
  5913 000046E4 8A03                <2> 	nxtvrech: mov al, [ebx]
  5914 000046E6 3C05                <2> 		cmp al, 5
  5915 000046E8 740A                <2> 		je nxtvrec2
  5916 000046EA 43                  <2> 		inc ebx
  5917 000046EB 81FB[88C40300]      <2> 		cmp ebx, varend
  5918 000046F1 72F1                <2> 		jb nxtvrech
  5919 000046F3 C3                  <2> 		ret
  5920 000046F4 43                  <2> 	nxtvrec2: inc ebx
  5921 000046F5 8A03                <2> 		mov al, [ebx]
  5922 000046F7 3C04                <2> 		cmp al, 4
  5923 000046F9 74AF                <2> 		je echvar
  5924 000046FB E9E4FFFFFF          <2> 		jmp nxtvrech
  5925 00004700 43                  <2> 	prntvr: inc ebx
  5926 00004701 89DE                <2> 		mov esi, ebx
  5927 00004703 C3                  <2> 		ret
  5928 00004704 E85CD6FFFF          <2> 	prntvr2: call print
  5929 00004709 BE[B4890000]        <2> 		mov esi, line
  5930 0000470E E852D6FFFF          <2> 		call print
  5931 00004713 C3                  <2> 		ret 
  5932                              <1> %include 'source/programs/else.asm'
  5933 00004714 FF2C656C736500      <2> 	db 255,44,"else",0
  5934 0000471B 31C0                <2> elsecmd:	xor eax, eax
  5935 0000471D 3805[82B40300]      <2> 	cmp [BATCHISON], al
  5936 00004723 0F849BF4FFFF        <2> 	je near notbatch
  5937 00004729 A0[19B40300]        <2> 	mov al, [IFON]
  5938 0000472E BE[1AB40300]        <2> 	mov esi, IFTRUE
  5939 00004733 01C6                <2> 	add esi, eax
  5940 00004735 8A06                <2> 	mov al, [esi]
  5941 00004737 3401                <2> 	xor al, 1
  5942 00004739 8806                <2> 	mov [esi], al
  5943 0000473B C3                  <2> 	ret 
  5944                              <1> %include 'source/programs/exit.asm'
  5945 0000473C FF2C6578697400      <2> db 255,44,"exit",0
  5946 00004743 803D[18B40300]01    <2> 	cmp byte [ranboot], 1
  5947 0000474A 0F84BCE5FFFF        <2> 	je near returnfromexp
  5948 00004750 E99BE4FFFF          <2> 	jmp nobootfile
  5949                              <1> %include 'source/programs/fi.asm'
  5950 00004755 FF2C666900          <2> 	db 255,44,"fi",0
  5951 0000475A 30C0                <2> 	xor al, al
  5952 0000475C 3805[82B40300]      <2> 	cmp [BATCHISON], al
  5953 00004762 0F845CF4FFFF        <2> 	je near notbatch
  5954 00004768 B001                <2> fi:	mov al, 1
  5955 0000476A 2805[19B40300]      <2> 	sub [IFON],al
  5956 00004770 C3                  <2> 	ret 
  5957                              <1> %ifdef gui.included
  5958                              <1> 	%include 'source/programs/gui.asm'
  5959 00004771 FF2C67756900        <2> db 255,44,"gui",0
  5960                              <2> guiswitcher:
  5961 00004777 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  5962 0000477D 81C604000000        <2> 	add esi, 4
  5963 00004783 31C9                <2> 	xor ecx, ecx
  5964 00004785 803E00              <2> 	cmp byte [esi], 0
  5965 00004788 740A                <2> 	je .nomodepref
  5966 0000478A E84AECFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5967 0000478F E907000000          <2> 	jmp .modepref
  5968                              <2> .nomodepref:
  5969 00004794 51                  <2> 	push ecx
  5970 00004795 E880D6FFFF          <2> 	call clear
  5971 0000479A 59                  <2> 	pop ecx
  5972                              <2> .modepref:
  5973 0000479B 66C705[020D0000]-   <2> 	mov word [realmodeptr], guiswitch
  5974 000047A2 [0B54]              <2>
  5975 000047A4 E847C4FFFF          <2> 	call realmode
  5976                              <2> guiswitchret:
  5977 000047A9 65803D[D9890000]01  <2> 	cmp byte [gs:guion], 1
  5978 000047B1 7401                <2> 	je .cont
  5979 000047B3 C3                  <2> 	ret
  5980                              <2> .cont:
  5981 000047B4 BF[FD550000]        <2> 	mov edi, VBEMODEBLOCK
  5982                              <2> .loop:
  5983 000047B9 658B07              <2> 	mov eax, [gs:edi]
  5984 000047BC 8907                <2> 	mov [edi], eax
  5985 000047BE 47                  <2> 	inc edi
  5986 000047BF 81FF[01590000]      <2> 	cmp edi, VBEEND
  5987 000047C5 72F2                <2> 	jb .loop
  5988 000047C7 A1[25580000]        <2> 	mov eax, [physbaseptr]
  5989 000047CC 8B1D[4B020000]      <2> 	mov ebx, [basecache]
  5990 000047D2 C1E304              <2> 	shl ebx, 4
  5991 000047D5 29D8                <2> 	sub eax, ebx
  5992 000047D7 A3[25580000]        <2> 	mov [physbaseptr], eax
  5993 000047DC C605[12240000]00    <2> 	mov byte [termguion], 0
  5994 000047E3 BE[9CCC0300]        <2> 	mov esi, graphicstable
  5995 000047E8 30C0                <2> 	xor al, al
  5996                              <2> .clear:
  5997 000047EA 8806                <2> 	mov [esi], al
  5998 000047EC 46                  <2> 	inc esi
  5999 000047ED 81FE[9CCE0300]      <2> 	cmp esi, graphicstableend
  6000 000047F3 72F5                <2> 	jb .clear
  6001 000047F5 E8B32B0000          <2> 	call guisetup
  6002                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  6003 000047FA 668B15[0F580000]    <2> 	mov dx, [resolutionx]
  6004 00004801 668B0D[11580000]    <2> 	mov cx, [resolutiony]
  6005 00004808 6689D3              <2> 	mov bx, dx
  6006 0000480B 6689C8              <2> 	mov ax, cx
  6007 0000480E 66D1EB              <2> 	shr bx, 1
  6008 00004811 66D1E8              <2> 	shr ax, 1
  6009 00004814 6689DA              <2> 	mov dx, bx
  6010 00004817 66D1EA              <2> 	shr dx, 1
  6011 0000481A 6689C1              <2> 	mov cx, ax
  6012 0000481D 66D1E9              <2> 	shr cx, 1
  6013 00004820 6601D3              <2> 	add bx, dx
  6014 00004823 6601C8              <2> 	add ax, cx
  6015 00004826 66D1E9              <2> 	shr cx, 1
  6016 00004829 66C1EB03            <2> 	shr bx, 3
  6017 0000482D 66C1E303            <2> 	shl bx, 3
  6018 00004831 66C1E804            <2> 	shr ax, 4
  6019 00004835 66C1E004            <2> 	shl ax, 4
  6020 00004839 66891D[BA750000]    <2> 	mov [termwindow], bx
  6021 00004840 66A3[BC750000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6022 00004846 BE[BA750000]        <2> 	mov esi, termwindow
  6023 0000484B 31DB                <2> 	xor ebx, ebx
  6024 0000484D 6631C0              <2> 	xor ax, ax
  6025 00004850 E8A6320000          <2> 	call showwindow
  6026 00004855 E8A8100000          <2> 	call cursorgui
  6027 0000485A E8BBD5FFFF          <2> 	call clear
  6028 0000485F C3                  <2> 	ret
  6029                              <2> 	
  6030                              <1> %endif
  6031                              <1> %include 'source/programs/help.asm'
  6032 00004860 FF2C68656C7000      <2> db 255,44,"help",0
  6033                              <2> lscmd:	
  6034 00004867 B00D                <2> 		mov al, 13
  6035 00004869 E8A6DBFFFF          <2> 		call prcharq
  6036 0000486E BE[EF340000]        <2> 		mov esi, progstart
  6037 00004873 BB[0B540000]        <2> 		mov ebx, progend
  6038 00004878 BE[08AE0300]        <2> dir:	mov esi, fileindex
  6039 0000487D 8A06                <2> 	dirnxt:	mov al, [esi]
  6040 0000487F 30E4                <2> 		xor ah, ah
  6041 00004881 3CFF                <2> 		cmp al, 255
  6042 00004883 7418                <2> 		je dirfnd
  6043 00004885 46                  <2> 		inc esi
  6044 00004886 81FE[08B20300]      <2> 		cmp esi,  fileindexend
  6045 0000488C 7342                <2> 		jae dirdn
  6046 0000488E E9EAFFFFFF          <2> 		jmp dirnxt
  6047                              <2> 	dirfnd3:
  6048 00004893 46                  <2> 		inc esi
  6049 00004894 81FE[08B20300]      <2> 		cmp esi, fileindexend
  6050 0000489A 76E1                <2> 		jbe dirnxt
  6051 0000489C 4E                  <2> 		dec esi
  6052 0000489D 46                  <2> 	dirfnd:	inc esi
  6053 0000489E 8A06                <2> 		mov al, [esi]
  6054 000048A0 30E4                <2> 		xor ah, ah
  6055 000048A2 3C2C                <2> 		cmp al, 44
  6056 000048A4 740E                <2> 		je dirfnd2
  6057 000048A6 46                  <2> 		inc esi
  6058 000048A7 81FE[08B20300]      <2> 		cmp esi,  fileindexend
  6059 000048AD 7321                <2> 		jae dirdn
  6060 000048AF E9C9FFFFFF          <2> 		jmp dirnxt
  6061 000048B4 46                  <2> 	dirfnd2: inc esi
  6062 000048B5 E887D4FFFF          <2> 		call printquiet
  6063 000048BA 56                  <2> 		push esi
  6064 000048BB B009                <2> 		mov al, 9
  6065 000048BD E852DBFFFF          <2> 		call prcharq
  6066 000048C2 5E                  <2> 		pop esi
  6067 000048C3 81FE[08B20300]      <2> 		cmp esi,  fileindexend
  6068 000048C9 7305                <2> 		jae dirdn
  6069 000048CB E9ADFFFFFF          <2> 		jmp dirnxt
  6070 000048D0 BE[B4890000]        <2> 	dirdn:	mov esi, line
  6071 000048D5 E88BD4FFFF          <2> 			call print
  6072 000048DA C3                  <2> 			ret
  6073 000048DB 00                  <2> currentdir db 0
  6074                              <1> %include 'source/programs/if.asm'
  6075 000048DC FF2C696600          <2> 	db 255,44,"if",0
  6076 000048E1 30C0                <2> ifcmd:	xor al, al
  6077 000048E3 3805[82B40300]      <2> 	cmp [BATCHISON], al
  6078 000048E9 0F84D5F2FFFF        <2> 	je near notbatch
  6079 000048EF 8B1D[43300000]      <2> 	mov ebx, [currentcommandloc]
  6080 000048F5 81C303000000        <2> 	add ebx, 3
  6081 000048FB 89DE                <2> 	mov esi, ebx
  6082 000048FD 8A06                <2> chkeqsn: mov al, [esi]
  6083 000048FF 3C00                <2> 	cmp al, 0
  6084 00004901 0F84BDF2FFFF        <2> 	je near notbatch
  6085 00004907 3C3D                <2> 	cmp al, '='
  6086 00004909 0F8406000000        <2> 	je near chkeqdn
  6087 0000490F 46                  <2> 	inc esi
  6088 00004910 E9E8FFFFFF          <2> 	jmp chkeqsn
  6089 00004915 B000                <2> chkeqdn: mov al, 0 
  6090 00004917 8806                <2> 	mov [esi], al
  6091 00004919 46                  <2> 	inc esi
  6092 0000491A E828E7FFFF          <2> 	call tester
  6093 0000491F 3C01                <2> 	cmp al, 1
  6094 00004921 0F8405000000        <2> 	je near trueif
  6095 00004927 E91C000000          <2> 	jmp falseif
  6096 0000492C 31C0                <2> trueif:	xor eax, eax
  6097 0000492E A0[19B40300]        <2> 	mov al, [IFON]
  6098 00004933 FEC0                <2> 	inc al
  6099 00004935 A2[19B40300]        <2> 	mov [IFON], al
  6100 0000493A 30E4                <2> 	xor ah, ah
  6101 0000493C BE[1AB40300]        <2> 	mov esi, IFTRUE
  6102 00004941 01C6                <2> 	add esi, eax
  6103 00004943 B401                <2> 	mov ah, 1
  6104 00004945 8826                <2> 	mov [esi], ah
  6105 00004947 C3                  <2> 	ret 
  6106 00004948 31C0                <2> falseif: xor eax, eax
  6107 0000494A A0[19B40300]        <2> 	mov al, [IFON]
  6108 0000494F FEC0                <2> 	inc al
  6109 00004951 A2[19B40300]        <2> 	mov [IFON], al
  6110 00004956 30E4                <2> 	xor ah, ah
  6111 00004958 BE[1AB40300]        <2> 	mov esi, IFTRUE
  6112 0000495D 01C6                <2> 	add esi, eax
  6113 0000495F 30E4                <2> 	xor ah, ah
  6114 00004961 8826                <2> 	mov [esi], ah
  6115 00004963 C3                  <2> 	ret 
  6116                              <1> %ifdef network.included
  6117                              <1> 	%include 'source/programs/ipconfig.asm'
  6118                              <1> %endif
  6119                              <1> %include 'source/programs/keycode.asm'
  6120 00004964 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  6121 0000496D 00                  <2>
  6122                              <2> keycode:
  6123 0000496E 66C705[E5230000]00- <2> 	mov word [trans], 0
  6124 00004976 00                  <2>
  6125 00004977 C605[8E6A0000]00    <2> 	mov byte [threadson], 0
  6126                              <2> %ifdef io.serial
  6127                              <2> .noserial:
  6128                              <2> 	hlt
  6129                              <2> 	mov dx, [serial.address]
  6130                              <2> 	in al, dx
  6131                              <2> 	cmp al, 0
  6132                              <2> 	je .noserial
  6133                              <2> 	mov cl, al
  6134                              <2> 	call showhexsmall
  6135                              <2> 	cmp al, 0x1B
  6136                              <2> 	jne .noserial
  6137                              <2> 	in al, dx
  6138                              <2> 	mov cl, al
  6139                              <2> 	call showhexsmall
  6140                              <2> 	cmp cl, 0x5B
  6141                              <2> 	je .noserial
  6142                              <2> 	ret
  6143                              <2> %else
  6144 0000497E E89B150000          <2> 	call getkey
  6145 00004983 31C0                <2> 	xor eax, eax
  6146 00004985 31C9                <2> 	xor ecx, ecx
  6147 00004987 8A0D[FA5E0000]      <2> 	mov cl, [specialkey]
  6148 0000498D 80F900              <2> 	cmp cl, 0
  6149 00004990 0F8405000000        <2> 	je near .nospecialkeycode
  6150 00004996 E8DDE8FFFF          <2> 	call showhexsmall
  6151                              <2> .nospecialkeycode:
  6152 0000499B 668B0D[E3230000]    <2> 	mov cx, [lastkey + 2]
  6153 000049A2 E8D1E8FFFF          <2> 	call showhexsmall
  6154 000049A7 80F901              <2> 	cmp cl, 1
  6155 000049AA 75C2                <2> 	jne keycode
  6156 000049AC C3                  <2> 	ret
  6157                              <2> %endif
  6158                              <1> %ifdef gui.included
  6159                              <1> 	%include 'source/programs/line.asm'
  6160 000049AD FF2C6C696E6500      <2> db 255,44,"line",0
  6161                              <2> linetester:
  6162 000049B4 803D[D9890000]00    <2> 	cmp byte [guion], 0
  6163 000049BB 0F841B000000        <2> 	je near .done
  6164 000049C1 668B35[71020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  6165 000049C8 BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  6166 000049CD E868000000          <2> 	call .circletest
  6167 000049D2 BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  6168 000049D7 E801000000          <2> 	call .linetest
  6169                              <2> .done:
  6170 000049DC C3                  <2> 	ret
  6171                              <2> 
  6172                              <2> .linetest:
  6173 000049DD 53                  <2> 	push ebx
  6174 000049DE E8D6000000          <2> 	call .stime
  6175 000049E3 5B                  <2> 	pop ebx
  6176 000049E4 31FF                <2> 	xor edi, edi
  6177                              <2> .ltlp:
  6178 000049E6 53                  <2> 	push ebx
  6179 000049E7 E81C010000          <2> 	call .st
  6180 000049EC 66F7D6              <2> 	not si
  6181 000049EF E814010000          <2> 	call .st
  6182 000049F4 5B                  <2> 	pop ebx
  6183 000049F5 66F7D6              <2> 	not si
  6184 000049F8 660335[6F020000]    <2> 	add si, [timenanoseconds]
  6185 000049FF 4B                  <2> 	dec ebx
  6186 00004A00 81FB00000000        <2> 	cmp ebx, 0
  6187 00004A06 77DE                <2> 	ja .ltlp
  6188 00004A08 E8C4000000          <2> 	call .etime
  6189 00004A0D 53                  <2> 	push ebx	
  6190 00004A0E 57                  <2> 	push edi
  6191 00004A0F E85B270000          <2> 	call guiclear
  6192 00004A14 E8E9270000          <2> 	call reloadallgraphics
  6193 00004A19 59                  <2> 	pop ecx
  6194 00004A1A E828E9FFFF          <2> 	call showdec
  6195 00004A1F BE[4A4B0000]        <2> 	mov esi, .msg
  6196 00004A24 E83CD3FFFF          <2> 	call print
  6197 00004A29 59                  <2> 	pop ecx
  6198 00004A2A E818E9FFFF          <2> 	call showdec
  6199 00004A2F BE[764B0000]        <2> 	mov esi, .msgtime
  6200 00004A34 E82CD3FFFF          <2> 	call print
  6201 00004A39 C3                  <2> 	ret
  6202                              <2> 	
  6203                              <2> .circletest:
  6204 00004A3A 53                  <2> 	push ebx
  6205 00004A3B E879000000          <2> 	call .stime
  6206 00004A40 5B                  <2> 	pop ebx
  6207 00004A41 31FF                <2> 	xor edi, edi
  6208                              <2> .ctlp:
  6209 00004A43 53                  <2> 	push ebx
  6210 00004A44 668B0D[11580000]    <2> 	mov cx, [resolutiony]
  6211 00004A4B 66D1E9              <2> 	shr cx, 1
  6212 00004A4E 668B15[0F580000]    <2> 	mov dx, [resolutionx]
  6213 00004A55 66D1EA              <2> 	shr dx, 1
  6214 00004A58 6689C8              <2> 	mov ax, cx
  6215                              <2> .circle:
  6216 00004A5B 60                  <2> 	pusha
  6217 00004A5C E827210000          <2> 	call drawcircle
  6218 00004A61 61                  <2> 	popa
  6219 00004A62 6648                <2> 	dec ax
  6220 00004A64 47                  <2> 	inc edi
  6221 00004A65 663D0100            <2> 	cmp ax, 1
  6222 00004A69 77F0                <2> 	ja .circle
  6223 00004A6B 66F7D6              <2> 	not si
  6224                              <2> .circle2:
  6225 00004A6E 60                  <2> 	pusha
  6226 00004A6F E814210000          <2> 	call drawcircle
  6227 00004A74 61                  <2> 	popa
  6228 00004A75 47                  <2> 	inc edi
  6229 00004A76 6640                <2> 	inc ax
  6230 00004A78 6639C8              <2> 	cmp ax, cx
  6231 00004A7B 76F1                <2> 	jbe .circle2
  6232 00004A7D 5B                  <2> 	pop ebx
  6233 00004A7E 66F7D6              <2> 	not si
  6234 00004A81 660335[6F020000]    <2> 	add si, [timenanoseconds]
  6235 00004A88 4B                  <2> 	dec ebx
  6236 00004A89 81FB00000000        <2> 	cmp ebx, 0
  6237 00004A8F 77B2                <2> 	ja .ctlp
  6238 00004A91 E83B000000          <2> 	call .etime
  6239 00004A96 53                  <2> 	push ebx
  6240 00004A97 57                  <2> 	push edi
  6241 00004A98 59                  <2> 	pop ecx
  6242 00004A99 E8A9E8FFFF          <2> 	call showdec
  6243 00004A9E BE[5F4B0000]        <2> 	mov esi, .msgcircle
  6244 00004AA3 E8BDD2FFFF          <2> 	call print
  6245 00004AA8 59                  <2> 	pop ecx
  6246 00004AA9 E899E8FFFF          <2> 	call showdec
  6247 00004AAE BE[764B0000]        <2> 	mov esi, .msgtime
  6248 00004AB3 E8ADD2FFFF          <2> 	call print
  6249 00004AB8 C3                  <2> 	ret
  6250                              <2> 	
  6251                              <2> .stime:
  6252 00004AB9 F4                  <2> 	hlt
  6253 00004ABA A1[6B020000]        <2> 	mov eax, [timeseconds]
  6254 00004ABF 8B1D[6F020000]      <2> 	mov ebx, [timenanoseconds]
  6255 00004AC5 A3[854B0000]        <2> 	mov [.time], eax
  6256 00004ACA 891D[894B0000]      <2> 	mov [.time + 4], ebx
  6257 00004AD0 C3                  <2> 	ret
  6258                              <2> 	
  6259                              <2> .etime:
  6260 00004AD1 A1[6B020000]        <2> 	mov eax, [timeseconds]
  6261 00004AD6 8B1D[6F020000]      <2> 	mov ebx, [timenanoseconds]
  6262 00004ADC 8B0D[854B0000]      <2> 	mov ecx, [.time]
  6263 00004AE2 8B15[894B0000]      <2> 	mov edx, [.time + 4]
  6264 00004AE8 C1EA0A              <2> 	shr edx, 10
  6265 00004AEB C1EB0A              <2> 	shr ebx, 10
  6266 00004AEE 29C8                <2> 	sub eax, ecx
  6267 00004AF0 3D00000000          <2> 	cmp eax, 0
  6268 00004AF5 740E                <2> 	je .notclp
  6269                              <2> .tclp:
  6270 00004AF7 81C340420F00        <2> 	add ebx, 1000000
  6271 00004AFD 48                  <2> 	dec eax
  6272 00004AFE 3D00000000          <2> 	cmp eax, 0
  6273 00004B03 75F2                <2> 	jne .tclp
  6274                              <2> .notclp:
  6275 00004B05 29D3                <2> 	sub ebx, edx
  6276 00004B07 C3                  <2> 	ret
  6277                              <2> 	
  6278                              <2> .st:
  6279 00004B08 6631C0              <2> 	xor ax, ax
  6280 00004B0B 6631DB              <2> 	xor bx, bx
  6281 00004B0E 668B0D[11580000]    <2> 	mov cx, [resolutiony]
  6282 00004B15 668B15[0F580000]    <2> 	mov dx, [resolutionx]
  6283                              <2> .lp:
  6284 00004B1C 60                  <2> 	pusha
  6285 00004B1D E821250000          <2> 	call drawline
  6286 00004B22 61                  <2> 	popa
  6287                              <2> .noswitch:
  6288 00004B23 47                  <2> 	inc edi
  6289 00004B24 6643                <2> 	inc bx
  6290 00004B26 664A                <2> 	dec dx
  6291 00004B28 6681FB0000          <2> 	cmp bx, 0
  6292 00004B2D 74ED                <2> 	je .lp
  6293 00004B2F 6681FA0000          <2> 	cmp dx, 0
  6294 00004B34 75E6                <2> 	jne .lp
  6295                              <2> .lp2:
  6296 00004B36 60                  <2> 	pusha
  6297 00004B37 E807250000          <2> 	call drawline
  6298 00004B3C 61                  <2> 	popa
  6299 00004B3D 47                  <2> 	inc edi
  6300 00004B3E 6640                <2> 	inc ax
  6301 00004B40 6649                <2> 	dec cx
  6302 00004B42 6681F90000          <2> 	cmp cx, 0
  6303 00004B47 75ED                <2> 	jne .lp2
  6304 00004B49 C3                  <2> 	ret
  6305                              <2> 	
  6306 00004B4A 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  6307 00004B53 6520647261776E2069- <2>
  6308 00004B5C 6E2000              <2>
  6309 00004B5F 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  6310 00004B68 65726520647261776E- <2>
  6311 00004B71 20696E2000          <2>
  6312 00004B76 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  6313 00004B7F 6E64732E0A00        <2>
  6314 00004B85 0000000000000000    <2> .time dd 0,0	
  6315                              <1> %endif
  6316                              <1> %include 'source/programs/logout.asm'
  6317 00004B8D FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  6318 00004B96 E911E0FFFF          <2> 	jmp os
  6319                              <1> %include 'source/programs/loop.asm'
  6320 00004B9B FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  6321 00004BA2 803D[83B40300]00    <2> 	cmp byte [LOOPON], 0
  6322 00004BA9 0F8501000000        <2> 	jne near filoop
  6323 00004BAF C3                  <2> 	ret
  6324 00004BB0 8B35[84B40300]      <2> filoop: mov esi, [LOOPPOS]
  6325 00004BB6 FE0D[19B40300]      <2> 	dec byte [IFON]
  6326 00004BBC C605[83B40300]00    <2> 	mov byte [LOOPON], 0
  6327 00004BC3 8935[7EB40300]      <2> 	mov [BATCHPOS], esi
  6328 00004BC9 8935[E93A0000]      <2> 	mov [batchedi], esi
  6329 00004BCF C3                  <2> 	ret 
  6330                              <1> %ifdef disk.none
  6331                              <1> %else
  6332                              <1> 	%include 'source/programs/ls.asm'
  6333 00004BD0 FF2C6C7300          <2> db 255,44,"ls",0
  6334 00004BD5 BE[338C0300]        <2> 		mov esi, diskfileindex
  6335                              <2> 	diskindexdir:
  6336 00004BDA 803E5F              <2> 		cmp byte [esi], '_'
  6337 00004BDD 7440                <2> 		je nextdiskindexdir
  6338 00004BDF E85DD1FFFF          <2> 		call printquiet
  6339 00004BE4 56                  <2> 		push esi
  6340 00004BE5 BE[3F4C0000]        <2> 		mov esi, disktab
  6341 00004BEA E852D1FFFF          <2> 		call printquiet
  6342 00004BEF 5E                  <2> 		pop esi
  6343 00004BF0 8B4E05              <2> 		mov ecx, [esi + 5]
  6344 00004BF3 C605[77320000]05    <2> 		mov byte [firsthexshown], 5
  6345 00004BFA E848E7FFFF          <2> 		call showdec
  6346 00004BFF 56                  <2> 		push esi
  6347 00004C00 BE[B4890000]        <2> 		mov esi, line
  6348 00004C05 E837D1FFFF          <2> 		call printquiet
  6349 00004C0A 5E                  <2> 		pop esi
  6350 00004C0B 81C609000000        <2> 		add esi, 9
  6351 00004C11 81FE[298D0300]      <2> 		cmp esi, enddiskfileindex
  6352 00004C17 72C1                <2> 		jb diskindexdir
  6353 00004C19 E8FDDCFFFF          <2> 		call termcopy
  6354 00004C1E C3                  <2> 		ret
  6355                              <2> 	nextdiskindexdir:
  6356 00004C1F 46                  <2> 		inc esi
  6357 00004C20 803E00              <2> 		cmp byte [esi], 0
  6358 00004C23 75FA                <2> 		jne nextdiskindexdir
  6359 00004C25 81C609000000        <2> 		add esi, 9
  6360 00004C2B 81FE[298D0300]      <2> 		cmp esi, enddiskfileindex
  6361 00004C31 72A7                <2> 		jb diskindexdir
  6362 00004C33 E8E3DCFFFF          <2> 		call termcopy
  6363 00004C38 C3                  <2> 		ret
  6364                              <2> 		
  6365 00004C39 4469736B2000        <2> 		diskmsg db "Disk ",0
  6366 00004C3F 0D09090900          <2> 		disktab db 13,9,9,9,0
  6367                              <1> %endif
  6368                              <1> %include 'source/programs/memory.asm'
  6369 00004C44 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  6370 00004C4D BE[EF890000]        <2> 	mov esi, memlistbuf
  6371 00004C52 31FF                <2> 	xor edi, edi
  6372 00004C54 668B3D[2F8C0000]    <2> 	mov di, [memlistend]
  6373 00004C5B 01F7                <2> 	add edi, esi
  6374                              <2> printmemmap:
  6375 00004C5D 8B0E                <2> 	mov ecx, [esi]
  6376 00004C5F E828E6FFFF          <2> 	call showhex
  6377 00004C64 81C608000000        <2> 	add esi, 8
  6378 00004C6A 8B0E                <2> 	mov ecx, [esi]
  6379 00004C6C E81BE6FFFF          <2> 	call showhex
  6380 00004C71 81C608000000        <2> 	add esi, 8
  6381 00004C77 8B0E                <2> 	mov ecx, [esi]
  6382 00004C79 E80EE6FFFF          <2> 	call showhex
  6383 00004C7E 81C608000000        <2> 	add esi, 8
  6384 00004C84 57                  <2> 	push edi
  6385 00004C85 56                  <2> 	push esi
  6386 00004C86 E8D5D0FFFF          <2> 	call printline
  6387 00004C8B 5E                  <2> 	pop esi
  6388 00004C8C 5F                  <2> 	pop edi
  6389 00004C8D 39FE                <2> 	cmp esi, edi
  6390 00004C8F 72CC                <2> 	jb printmemmap
  6391 00004C91 C3                  <2> 	ret
  6392                              <2> 	
  6393                              <1> %include 'source/programs/pci.asm'
  6394 00004C92 FF2C70636900        <2> db 255,44,"pci",0
  6395 00004C98 E8F9180000          <2> 	call pcidump
  6396 00004C9D C3                  <2> 	ret 
  6397                              <1> %ifdef network.included
  6398                              <1> 	%include 'source/programs/ping.asm'
  6399                              <1> %endif
  6400                              <1> %ifdef disk.none
  6401                              <1> %else
  6402                              <1> 	%include 'source/programs/play.asm'
  6403 00004C9E FF2C706C61796100    <2> db 255,44,"playa",0
  6404 00004CA6 8B3D[43300000]      <2> 	mov edi, [currentcommandloc]
  6405 00004CAC 81C706000000        <2> 	add edi, 6
  6406 00004CB2 E835000000          <2> 	call playasync
  6407 00004CB7 C3                  <2> 	ret
  6408 00004CB8 FF2C706C61792000    <2> db 255,44,"play ",0
  6409                              <2> play:
  6410 00004CC0 8B3D[43300000]      <2> 	mov edi, [currentcommandloc]
  6411 00004CC6 81C705000000        <2> 	add edi, 5
  6412 00004CCC E81B000000          <2> 	call playasync
  6413                              <2> .waitforsound:
  6414 00004CD1 F4                  <2> 	hlt
  6415                              <2> %ifdef sound.included
  6416 00004CD2 A1[E45E0000]        <2> 	mov eax, [Length0]
  6417 00004CD7 660B05[E85E0000]    <2> 	or ax, [Length1]
  6418                              <2> %endif
  6419 00004CDE 0A05[73020000]      <2> 	or al, [soundon]
  6420 00004CE4 3D00000000          <2> 	cmp eax, 0
  6421 00004CE9 75E6                <2> 	jne .waitforsound
  6422 00004CEB C3                  <2> 	ret
  6423                              <2> playasync:
  6424 00004CEC BE0000C000          <2> 	mov esi, 0xC00000
  6425 00004CF1 E8D51B0000          <2> 	call loadfile
  6426 00004CF6 81FA94010000        <2> 	cmp edx, 404
  6427 00004CFC 743F                <2> 	je nosoundfound
  6428 00004CFE BB0000C000          <2> 	mov ebx, 0xC00000
  6429 00004D03 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6430 00004D0A 0F843F010000        <2> 	je near wave_player
  6431 00004D10 66813B534E          <2> 	cmp word [ebx], "SN"
  6432 00004D15 7526                <2> 	jne nosoundfound
  6433 00004D17 81C306000000        <2> 	add ebx, 6
  6434 00004D1D 891D[76020000]      <2> 	mov [soundpos], ebx
  6435 00004D23 035BFC              <2> 	add ebx, [ebx - 4]
  6436 00004D26 891D[7A020000]      <2> 	mov [soundendpos], ebx
  6437 00004D2C 66C705[74020000]00- <2> 	mov word [soundrepititions], 0
  6438 00004D34 00                  <2>
  6439 00004D35 C605[73020000]01    <2> 	mov byte [soundon], 1
  6440 00004D3C C3                  <2> 	ret
  6441                              <2> nosoundfound:
  6442 00004D3D BE[634D0000]        <2> 	mov esi, notfoundsound
  6443 00004D42 E81ED0FFFF          <2> 	call print
  6444 00004D47 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  6445 00004D4D 81C605000000        <2> 	add esi, 5
  6446 00004D53 E80DD0FFFF          <2> 	call print
  6447 00004D58 BE[83890000]        <2> 	mov esi, notfound2
  6448 00004D5D E803D0FFFF          <2> 	call print
  6449 00004D62 C3                  <2> 	ret
  6450 00004D63 706C61793A2000      <2> notfoundsound db "play: ",0
  6451                              <2> 
  6452                              <2> %ifdef sound.included
  6453                              <2> sbplay:
  6454 00004D6A BE0000C000          <2> 		mov esi, 0xC00000
  6455 00004D6F 89F3                <2> 		mov ebx, esi
  6456 00004D71 81C62C000000        <2> 		add esi, WAVSTART
  6457 00004D77 29F7                <2> 		sub edi, esi
  6458 00004D79 66893D[E85E0000]    <2> 		mov [Length1], di
  6459 00004D80 C1EF0F              <2> 		shr edi, 15
  6460 00004D83 893D[E45E0000]      <2> 		mov [Length0], edi
  6461 00004D89 8B4B18              <2> 		mov ecx, [ebx + 24]
  6462 00004D8C 890D[F55E0000]      <2> 		mov [Freq], ecx
  6463 00004D92 31C0                <2> 		xor eax, eax
  6464 00004D94 BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  6465 00004D99 81C22C000000        <2> 		add edx, WAVSTART
  6466 00004D9F 01D0                <2> 		add	eax, edx
  6467 00004DA1 89C6                <2> 		mov esi, eax
  6468 00004DA3 31C9                <2> 		xor ecx, ecx
  6469 00004DA5 31DB                <2> 		xor ebx, ebx
  6470 00004DA7 66891D[F25E0000]    <2> 		mov [SegLoc], bx
  6471 00004DAE 81C300000800        <2> 		add ebx, 0x80000
  6472 00004DB4 66B9FFFF            <2> 		mov cx, 0xFFFF
  6473 00004DB8 6681FF0000          <2> 		cmp di, 0
  6474 00004DBD 7520                <2> 		jne .autoinit
  6475 00004DBF 668B0D[E85E0000]    <2> 		mov cx, [Length1]
  6476 00004DC6 C605[E35E0000]01    <2> 		mov byte [OddLength], 1
  6477 00004DCD 6681F90080          <2> 		cmp cx, 32768
  6478 00004DD2 730B                <2> 		jae .autoinit
  6479 00004DD4 C605[E35E0000]00    <2> 		mov byte [OddLength], 0
  6480 00004DDB 66D1E1              <2> 		shl cx, 1
  6481 00004DDE 47                  <2> 		inc edi
  6482                              <2> .autoinit:
  6483 00004DDF 4F                  <2> 		dec edi
  6484 00004DE0 893D[E45E0000]      <2> 		mov [Length0], edi
  6485 00004DE6 66890D[E85E0000]    <2> 		mov [Length1], cx
  6486 00004DED 66D1E9              <2> 		shr cx, 1
  6487 00004DF0 6641                <2> 		inc cx
  6488 00004DF2 01C8                <2> 		add eax, ecx
  6489 00004DF4 A3[EA5E0000]        <2> 		mov [NextMemLoc], eax
  6490 00004DF9 8935[EE5E0000]      <2> 		mov	[MemLoc], esi
  6491 00004DFF E8850F0000          <2> 		call DMACopy
  6492 00004E04 31DB                <2> 		xor ebx, ebx
  6493 00004E06 668B1D[F25E0000]    <2> 		mov bx, [SegLoc]
  6494 00004E0D 31C9                <2> 		xor ecx, ecx
  6495 00004E0F 668B0D[E85E0000]    <2> 		mov cx, [Length1]
  6496 00004E16 66D1E9              <2> 		shr cx, 1
  6497 00004E19 6641                <2> 		inc cx
  6498 00004E1B 01CB                <2> 		add ebx, ecx
  6499 00004E1D 66891D[F25E0000]    <2> 		mov [SegLoc], bx
  6500 00004E24 81C300000800        <2> 		add ebx, 0x80000
  6501 00004E2A 8B35[EA5E0000]      <2> 		mov esi, [NextMemLoc]
  6502 00004E30 89F0                <2> 		mov eax, esi
  6503 00004E32 01C8                <2> 		add eax, ecx
  6504 00004E34 A3[EA5E0000]        <2> 		mov [NextMemLoc], eax
  6505 00004E39 8935[EE5E0000]      <2> 		mov	[MemLoc], esi
  6506 00004E3F E8450F0000          <2> 		call DMACopy
  6507 00004E44 E8630F0000          <2> 		call DMAPlay
  6508 00004E49 E8ED0F0000          <2> 		call PlayDSP
  6509 00004E4E C3                  <2> 		ret
  6510                              <2> WAVSTART equ 44
  6511                              <2> wave_player:
  6512 00004E4F 803D[F95E0000]01    <2> 	cmp byte [SoundBlaster], 1
  6513 00004E56 0F840EFFFFFF        <2> 	je near sbplay
  6514 00004E5C BE[674E0000]        <2> 	mov esi, nosoundblaster
  6515 00004E61 E8FFCEFFFF          <2> 	call print
  6516 00004E66 C3                  <2> 	ret
  6517                              <2> %else
  6518                              <2> 	wave_player:
  6519                              <2> 		mov esi, nosoundblaster
  6520                              <2> 		call print
  6521                              <2> 		ret
  6522                              <2> %endif
  6523 00004E67 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6524 00004E70 426C61737465722064- <2>
  6525 00004E79 657465637465642E0A- <2>
  6526 00004E82 00                  <2>
  6527                              <1> %endif
  6528                              <1> %include 'source/programs/pwd.asm'
  6529 00004E83 FF2C70776400        <2> db 255,44,"pwd",0
  6530 00004E89 BE[14B20300]        <2> 	mov esi, currentfolder
  6531 00004E8E E8AECEFFFF          <2> 	call printquiet
  6532 00004E93 E8C8CEFFFF          <2> 	call printline
  6533 00004E98 C3                  <2> 	ret
  6534                              <2> 	
  6535                              <1> %include 'source/programs/reboot.asm'
  6536 00004E99 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6537 00004EA2 0F011D[AC4E0000]    <2> 		lidt [idtreboot]
  6538 00004EA9 CD00                <2> 		int 0
  6539 00004EAB F4                  <2> 		hlt
  6540                              <2> 	
  6541 00004EAC 0000                <2> 	idtreboot dw 0
  6542 00004EAE 00000000            <2> 			  dd 0
  6543                              <2> 
  6544                              <2> 	coldboot:
  6545 00004EB2 66B84000            <2> 		MOV AX, 0040h
  6546 00004EB6 8EC0                <2> 		MOV ES, AX
  6547 00004EB8 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6548 00004EC1 00                  <2>
  6549 00004EC2 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6550 00004EC9 CF                  <2> 		IRET
  6551                              <2> 
  6552                              <2> 	warmboot:
  6553 00004ECA 66B84000            <2> 		MOV AX, 0040h
  6554 00004ECE 8EC0                <2> 		MOV ES, AX
  6555 00004ED0 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6556 00004ED9 12                  <2>
  6557 00004EDA EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6558 00004EE1 CF                  <2> 		IRET
  6559                              <2> 		
  6560                              <1> %include 'source/programs/reg.asm'
  6561 00004EE2 FF2C72656700        <2> db 255,44,"reg",0
  6562 00004EE8 CD03                <2> 	int 3
  6563 00004EEA C3                  <2> 	ret 
  6564                              <1> %ifdef disk.none
  6565                              <1> %else
  6566                              <1> 	%include 'source/programs/show.asm'
  6567 00004EEB FF2C73686F7700      <2> db 255,44,"show",0
  6568                              <2> showprog:
  6569 00004EF2 8B3D[43300000]      <2> 		mov edi, [currentcommandloc]
  6570 00004EF8 81C705000000        <2> 		add edi, 5
  6571 00004EFE BE00004000          <2> 		mov esi, 0x400000
  6572 00004F03 803F26              <2> 		cmp byte [edi], '&'
  6573 00004F06 741B                <2> 		je .nullfile
  6574 00004F08 BE00008000          <2> 		mov esi, 0x800000
  6575 00004F0D E8B9190000          <2> 		call loadfile
  6576 00004F12 81FA94010000        <2> 		cmp edx, 404
  6577 00004F18 0F847E000000        <2> 		je near filenotfound
  6578 00004F1E BE00008000          <2> 		mov esi, 0x800000
  6579                              <2> .nullfile:
  6580                              <2> %ifdef gui.included
  6581 00004F23 66813E424D          <2> 		cmp word [esi], "BM"
  6582 00004F28 740B                <2> 		je bmpfound
  6583                              <2> %endif
  6584 00004F2A E836CEFFFF          <2> 		call print
  6585 00004F2F E82CCEFFFF          <2> 		call printline
  6586 00004F34 C3                  <2> 		ret
  6587                              <2> %ifdef gui.included
  6588                              <2> bmpfound:
  6589 00004F35 803D[D9890000]00    <2> 		cmp byte [guion], 0
  6590 00004F3C 0F8428000000        <2> 		je near noguibmp
  6591 00004F42 BE00008000          <2> 		mov esi, 0x800000
  6592 00004F47 31C9                <2> 		xor ecx, ecx
  6593 00004F49 31D2                <2> 		xor edx, edx
  6594 00004F4B 31C0                <2> 		xor eax, eax
  6595 00004F4D 31DB                <2> 		xor ebx, ebx
  6596 00004F4F E8621B0000          <2> 		call showbmp
  6597 00004F54 30C0                <2> 		xor al, al
  6598 00004F56 B405                <2> 		mov ah, 5
  6599 00004F58 CD30                <2> 		int 30h
  6600 00004F5A E810220000          <2> 		call guiclear
  6601 00004F5F E8AB1E0000          <2> 		call clearmousecursor
  6602 00004F64 E899220000          <2> 		call reloadallgraphics
  6603 00004F69 C3                  <2> 		ret
  6604                              <2> noguibmp:
  6605 00004F6A BE[754F0000]        <2> 		mov esi, warnguimsg
  6606 00004F6F E8F1CDFFFF          <2> 		call print
  6607 00004F74 C3                  <2> 		ret
  6608 00004F75 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6609 00004F7E 6E6F7420626520646F- <2>
  6610 00004F87 6E6520776974686F75- <2>
  6611 00004F90 742074686520475549- <2>
  6612 00004F99 2E0A00              <2>
  6613                              <2> %endif
  6614                              <2> 
  6615                              <2> filenotfound:
  6616 00004F9C BE[CF4F0000]        <2> 		mov esi, filenf
  6617 00004FA1 E8BFCDFFFF          <2> 		call print
  6618 00004FA6 8B35[43300000]      <2> 		mov esi, [currentcommandloc]
  6619                              <2> findfilenotfoundzero:
  6620 00004FAC 8A06                <2> 		mov al, [esi]
  6621 00004FAE 46                  <2> 		inc esi
  6622 00004FAF 3C00                <2> 		cmp al, 0
  6623 00004FB1 7411                <2> 		je nofilenamenotfound
  6624 00004FB3 81FE[88CC0300]      <2> 		cmp esi, buftxtend
  6625 00004FB9 7309                <2> 		jae nofilenamenotfound
  6626 00004FBB 3C20                <2> 		cmp al, " "
  6627 00004FBD 75ED                <2> 		jne findfilenotfoundzero
  6628 00004FBF E8A1CDFFFF          <2> 		call print
  6629                              <2> nofilenamenotfound:
  6630 00004FC4 BE[DA4F0000]        <2> 		mov esi, filenf2
  6631 00004FC9 E897CDFFFF          <2> 		call print
  6632 00004FCE C3                  <2> 		ret
  6633 00004FCF 5468652066696C6520- <2> filenf db "The file ",34,0
  6634 00004FD8 2200                <2>
  6635 00004FDA 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6636 00004FE3 6F7420626520666F75- <2>
  6637 00004FEC 6E642E0A00          <2>
  6638                              <1> %endif
  6639                              <1> %include 'source/programs/shush.asm'
  6640 00004FF1 FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6641                              <2> shushprog:
  6642                              <2> %ifdef gui.included
  6643 00004FF9 803D[D9890000]00    <2> 	cmp byte [guion], 0
  6644 00005000 0F84B9000000        <2> 	je near .noswitchsize
  6645 00005006 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  6646 0000500C 81C606000000        <2> 	add esi, 6
  6647 00005012 56                  <2> 	push esi
  6648 00005013 4E                  <2> 	dec esi
  6649                              <2> .findspace:
  6650 00005014 46                  <2> 	inc esi
  6651 00005015 8A06                <2> 	mov al, [esi]
  6652 00005017 3C00                <2> 	cmp al, 0
  6653 00005019 0F84A0000000        <2> 	je near .noswitchsize
  6654 0000501F 3C58                <2> 	cmp al, "X"
  6655 00005021 7408                <2> 	je .donefind
  6656 00005023 3C78                <2> 	cmp al, "x"
  6657 00005025 7404                <2> 	je .donefind
  6658 00005027 3C20                <2> 	cmp al, " "
  6659 00005029 75E9                <2> 	jne .findspace
  6660                              <2> .donefind:
  6661 0000502B 30C0                <2> 	xor al, al
  6662 0000502D 8806                <2> 	mov [esi], al
  6663 0000502F 46                  <2> 	inc esi
  6664 00005030 89F7                <2> 	mov edi, esi
  6665 00005032 E8EEE3FFFF          <2> 	call cnvrttxt
  6666 00005037 89C8                <2> 	mov eax, ecx
  6667 00005039 5E                  <2> 	pop esi
  6668 0000503A 50                  <2> 	push eax
  6669 0000503B 89F7                <2> 	mov edi, esi
  6670 0000503D E8E3E3FFFF          <2> 	call cnvrttxt
  6671 00005042 89CB                <2> 	mov ebx, ecx
  6672 00005044 58                  <2> 	pop eax	
  6673 00005045 6681FB0000          <2> 	cmp bx, 0
  6674 0000504A 0F846F000000        <2> 	je near .noswitchsize
  6675 00005050 663D0000            <2> 	cmp ax, 0
  6676 00005054 0F8465000000        <2> 	je near .noswitchsize
  6677 0000505A 66C1E303            <2> 	shl bx, 3
  6678 0000505E 66C1E004            <2> 	shl ax, 4
  6679 00005062 663B1D[0F580000]    <2> 	cmp bx, [resolutionx]
  6680 00005069 7607                <2> 	jbe .nofixx
  6681 0000506B 668B1D[0F580000]    <2> 	mov bx, [resolutionx]
  6682                              <2> .nofixx:
  6683 00005072 66051000            <2> 	add ax, 16
  6684 00005076 663B05[11580000]    <2> 	cmp ax, [resolutiony]
  6685 0000507D 7606                <2> 	jbe .nofixy
  6686 0000507F 66A1[11580000]      <2> 	mov ax, [resolutiony]
  6687                              <2> .nofixy:
  6688 00005085 662D1000            <2> 	sub ax, 16
  6689 00005089 6631C9              <2> 	xor cx, cx
  6690 0000508C 6631D2              <2> 	xor dx, dx
  6691 0000508F 66891D[BA750000]    <2> 	mov [termwindow], bx
  6692 00005096 66A3[BC750000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6693 0000509C BE[BA750000]        <2> 	mov esi, termwindow
  6694 000050A1 31DB                <2> 	xor ebx, ebx
  6695 000050A3 6631C0              <2> 	xor ax, ax
  6696 000050A6 E8502A0000          <2> 	call showwindow
  6697 000050AB E8BF200000          <2> 	call guiclear
  6698 000050B0 E865CDFFFF          <2> 	call clear
  6699 000050B5 E848210000          <2> 	call reloadallgraphics
  6700 000050BA E84C1E0000          <2> 	call switchmousepos2
  6701                              <2> .noswitchsize:
  6702                              <2> %endif
  6703 000050BF BE[CA500000]        <2> 	mov esi, shushmsg
  6704 000050C4 E89CCCFFFF          <2> 	call print
  6705 000050C9 C3                  <2> 	ret
  6706 000050CA 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6707 000050D3 6F2074686520536F6C- <2>
  6708 000050DC 6C65724F5320486172- <2>
  6709 000050E5 646C7920556E69782D- <2>
  6710 000050EE 436F6D70617469626C- <2>
  6711 000050F7 65205368656C6C210A- <2>
  6712 00005100 00                  <2>
  6713                              <1> %include 'source/programs/system.asm'
  6714 00005101 FF2C73797374656D00  <2> 	db 255,44,"system",0
  6715 0000510A BE[1D520000]        <2> 	mov esi, kernelinfomsg
  6716 0000510F E82DCCFFFF          <2> 	call printquiet
  6717 00005114 B9[338C0300]        <2> 	mov ecx, osend
  6718 00005119 E829E2FFFF          <2> 	call showdec
  6719 0000511E BE[32520000]        <2> 	mov esi, diskbytemsg
  6720 00005123 E819CCFFFF          <2> 	call printquiet
  6721 00005128 B9[338C0300]        <2> 	mov ecx, osend
  6722 0000512D 81C1[3C9E2D00]      <2> 	add ecx, commandbufend
  6723 00005133 81E9[008E0300]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6724 00005139 E809E2FFFF          <2> 	call showdec
  6725 0000513E BE[49520000]        <2> 	mov esi, membytemsg
  6726 00005143 E8F9CBFFFF          <2> 	call printquiet
  6727 00005148 BE[AC520000]        <2> 	mov esi, endofmemmsg
  6728 0000514D E8EFCBFFFF          <2> 	call printquiet
  6729 00005152 B9[3CB64D00]        <2> 	mov ecx, bssend
  6730 00005157 E830E1FFFF          <2> 	call showhex
  6731 0000515C BE[62520000]        <2> 	mov esi, systeminfomsg
  6732 00005161 E8DBCBFFFF          <2> 	call printquiet
  6733                              <2> getcpuspeed:
  6734 00005166 B8FE000000          <2> 	mov eax, 0xFE
  6735 0000516B E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6736 0000516D B020                <2> 	mov al, 0x20
  6737 0000516F E620                <2> 	out 0x20, al
  6738 00005171 F4                  <2> 	hlt
  6739 00005172 0F31                <2> 	rdtsc
  6740 00005174 89D6                <2> 	mov esi, edx
  6741 00005176 89C7                <2> 	mov edi, eax
  6742 00005178 31C0                <2> 	xor eax, eax
  6743 0000517A C605[53020000]01    <2> 	mov byte [testingcpuspeed], 1
  6744                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6745 00005181 40                  <2> 	inc eax
  6746 00005182 E9FAFFFFFF          <2> 	jmp cpuspeedloop
  6747                              <2> cpuspeedloopend:
  6748 00005187 0F31                <2> 	rdtsc
  6749 00005189 29F8                <2> 	sub eax, edi
  6750 0000518B 29F2                <2> 	sub edx, esi
  6751 0000518D 8915[5C020000]      <2> 	mov [cpuclocksperint + 4], edx
  6752 00005193 A3[58020000]        <2> 	mov [cpuclocksperint], eax
  6753 00005198 31C0                <2> 	xor eax, eax
  6754 0000519A E621                <2> 	out 0x21, al
  6755 0000519C B020                <2> 	mov al, 0x20
  6756 0000519E E620                <2> 	out 0x20, al
  6757 000051A0 31D2                <2> 	xor edx, edx
  6758 000051A2 31C0                <2> 	xor eax, eax
  6759 000051A4 A1[54020000]        <2> 	mov eax, [cpuspeedperint]
  6760 000051A9 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6761                              <2> 				;result by 2
  6762 000051AB 8B1D[66020000]      <2> 	mov ebx, [timeinterval]
  6763 000051B1 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6764 000051B4 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6765 000051B6 89C1                <2> 	mov ecx, eax
  6766 000051B8 E88AE1FFFF          <2> 	call showdec
  6767 000051BD BE[90520000]        <2> 	mov esi, cpuspeedmsg
  6768 000051C2 E87ACBFFFF          <2> 	call printquiet
  6769 000051C7 31D2                <2> 	xor edx, edx
  6770 000051C9 A1[58020000]        <2> 	mov eax, [cpuclocksperint]
  6771 000051CE 8B15[5C020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6772 000051D4 8B1D[66020000]      <2> 	mov ebx, [timeinterval]
  6773 000051DA C1EB0A              <2> 	shr ebx, 10
  6774 000051DD F7F3                <2> 	div ebx
  6775 000051DF 89C1                <2> 	mov ecx, eax
  6776 000051E1 E861E1FFFF          <2> 	call showdec
  6777 000051E6 BE[96520000]        <2> 	mov esi, cpuclockmsg
  6778 000051EB E851CBFFFF          <2> 	call printquiet
  6779 000051F0 8B0D[60020000]      <2> 	mov ecx, [memoryspace]
  6780 000051F6 C1E914              <2> 	shr ecx, 20
  6781 000051F9 41                  <2> 	inc ecx	;the reading is one MB behind
  6782 000051FA E848E1FFFF          <2> 	call showdec
  6783 000051FF BE[9B520000]        <2> 	mov esi, memoryspacemsg
  6784 00005204 E85CCBFFFF          <2> 	call print
  6785                              <2> %ifdef sound.included
  6786 00005209 803D[F95E0000]00    <2> 	cmp byte [SoundBlaster], 0
  6787 00005210 740A                <2> 	je .nosb
  6788 00005212 BE[78520000]        <2> 	mov esi, soundblastermsg
  6789 00005217 E849CBFFFF          <2> 	call print
  6790                              <2> .nosb:
  6791                              <2> %endif
  6792 0000521C C3                  <2> 	ret
  6793                              <2> 
  6794 0000521D 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6795 00005226 666F726D6174696F6E- <2>
  6796 0000522F 3A0A00              <2>
  6797 00005232 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6798 0000523B 6B2053706163652055- <2>
  6799 00005244 7365640A00          <2>
  6800 00005249 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6801 00005252 6F7279205370616365- <2>
  6802 0000525B 20557365640A00      <2>
  6803 00005262 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6804 0000526B 6E666F726D6174696F- <2>
  6805 00005274 6E3A0A00            <2>
  6806                              <2> %ifdef sound.included
  6807 00005278 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6808 00005281 746572204465746563- <2>
  6809 0000528A 7465642E0A00        <2>
  6810                              <2> %endif
  6811 00005290 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6812 00005296 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6813 0000529B 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6814 000052A4 2053706163650A00    <2>
  6815 000052AC 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6816 000052B5 6D6F72792053706163- <2>
  6817 000052BE 653A20307800        <2>
  6818                              <1> %include 'source/programs/time.asm'
  6819 000052C4 FF2C74696D6500      <2> db 255,44,"time",0	
  6820                              <2> timer:
  6821 000052CB 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  6822 000052D1 81C604000000        <2> 	add esi, 4
  6823 000052D7 803E00              <2> 	cmp byte [esi], 0
  6824 000052DA 7477                <2> 	je .norun
  6825 000052DC 46                  <2> 	inc esi
  6826 000052DD 8B0D[6B020000]      <2> 	mov ecx, [timeseconds]
  6827 000052E3 51                  <2> 	push ecx
  6828 000052E4 8B0D[6F020000]      <2> 	mov ecx, [timenanoseconds]
  6829 000052EA 51                  <2> 	push ecx
  6830 000052EB BF[88C80300]        <2> 	mov edi, buftxt
  6831                              <2> .cpcmd:
  6832 000052F0 8A06                <2> 	mov al, [esi]
  6833 000052F2 8807                <2> 	mov [edi], al
  6834 000052F4 46                  <2> 	inc esi
  6835 000052F5 47                  <2> 	inc edi
  6836 000052F6 3C00                <2> 	cmp al, 0
  6837 000052F8 75F6                <2> 	jne .cpcmd
  6838 000052FA E868DCFFFF          <2> 	call run
  6839 000052FF 5A                  <2> 	pop edx
  6840 00005300 58                  <2> 	pop eax
  6841                              <2> 
  6842 00005301 8B0D[6B020000]      <2> 	mov ecx, [timeseconds]
  6843 00005307 29C1                <2> 	sub ecx, eax
  6844 00005309 8B1D[6F020000]      <2> 	mov ebx, [timenanoseconds]
  6845 0000530F 29D3                <2> 	sub ebx, edx
  6846 00005311 7307                <2> 	jae .nosign
  6847 00005313 81C300CA9A3B        <2> 	add ebx, 1000000000
  6848 00005319 49                  <2> 	dec ecx
  6849                              <2> .nosign:
  6850 0000531A E828E0FFFF          <2> 	call showdec
  6851                              <2> 	
  6852 0000531F 89D9                <2> 	mov ecx, ebx
  6853 00005321 BE[F1400000]        <2> 	mov esi, timenscache
  6854 00005326 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6855 0000532D C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6856 00005334 C6460A30            <2> 	mov byte [esi + 10], "0"
  6857 00005338 BE[FC400000]        <2> 	mov esi, timenscacheend
  6858 0000533D E8E2DDFFFF          <2> 	call convert
  6859 00005342 BE[F1400000]        <2> 	mov esi, timenscache
  6860 00005347 E819CAFFFF          <2> 	call print
  6861 0000534C C605[F1400000]08    <2> 	mov byte [timenscache], 8
  6862                              <2> .norun:
  6863 00005353 C3                  <2> 	ret
  6864                              <2> 	
  6865                              <1> %include 'source/programs/turnoff.asm'
  6866 00005354 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6867 0000535D 00                  <2>
  6868                              <2> 	turnoff:
  6869 0000535E 66C705[020D0000]-   <2> 			mov word [realmodeptr], shutdown
  6870 00005365 [7153]              <2>
  6871 00005367 BB[9C530000]        <2> 			mov ebx, halt
  6872 0000536C E87FB8FFFF          <2> 			call realmode
  6873                              <2> 
  6874                              <2> [BITS 16]
  6875                              <2> 		shutdown:
  6876 00005371 B453                <2> 			mov ah, 0x53
  6877 00005373 B004                <2> 			mov al, 4
  6878 00005375 31DB                <2> 			xor bx, bx
  6879 00005377 CD15                <2> 			int 0x15
  6880                              <2> 			
  6881 00005379 B453                <2> 			mov ah, 0x53
  6882 0000537B B001                <2> 			mov al, 1
  6883 0000537D 31DB                <2> 			xor bx, bx
  6884 0000537F CD15                <2> 			int 0x15
  6885                              <2> 			
  6886 00005381 B453                <2> 			mov ah, 0x53
  6887 00005383 B008                <2> 			mov al, 8
  6888 00005385 BB0100              <2> 			mov bx, 1
  6889 00005388 B90100              <2> 			mov cx, 1
  6890 0000538B CD15                <2> 			int 0x15
  6891                              <2> 			
  6892 0000538D B453                <2> 			mov ah, 0x53
  6893 0000538F B007                <2> 			mov al, 7
  6894 00005391 BB0100              <2> 			mov bx, 1
  6895 00005394 B90300              <2> 			mov cx, 3
  6896 00005397 CD15                <2> 			int 0x15
  6897 00005399 E9FDFF              <2> 			jmp $
  6898                              <2> 			[BITS 32]
  6899 0000539C E9FBFFFFFF          <2> halt: jmp $
  6900                              <1> %include 'source/programs/wait.asm'
  6901 000053A1 FF2C7761697400      <2> db 255,44,"wait",0
  6902                              <2> waitkey:
  6903 000053A8 E8D4CFFFFF          <2> 		call getchar
  6904 000053AD C3                  <2> 		ret
  6905                              <1> %include 'source/programs/while.asm'
  6906 000053AE FF2C7768696C6500    <2> db 255,44,"while",0
  6907 000053B6 30C0                <2> whilecmd:  xor al, al
  6908 000053B8 3805[82B40300]      <2> 	cmp [BATCHISON], al
  6909 000053BE 0F8400E8FFFF        <2> 	je near notbatch
  6910 000053C4 8B35[7EB40300]      <2> 	mov esi, [BATCHPOS]
  6911 000053CA 81EE02000000        <2> 	sub esi, 2
  6912 000053D0 4E                  <2> whilefnd: dec esi
  6913 000053D1 8A06                <2> 	mov al, [esi]
  6914 000053D3 3C0A                <2> 	cmp al, 10
  6915 000053D5 0F840D000000        <2> 	je near whilefnd2
  6916 000053DB 3C00                <2> 	cmp al, 0
  6917 000053DD 0F8405000000        <2> 	je near whilefnd2
  6918 000053E3 E9E8FFFFFF          <2> 	jmp whilefnd
  6919                              <2> whilefnd2:
  6920 000053E8 46                  <2> 	inc esi
  6921 000053E9 8935[84B40300]      <2> 	mov [LOOPPOS], esi
  6922 000053EF C605[83B40300]01    <2> 	mov BYTE [LOOPON], 1
  6923 000053F6 BE[88C80300]        <2> 	mov esi, buftxt
  6924 000053FB BB[88C80300]        <2> 	mov ebx, buftxt
  6925 00005400 81C306000000        <2> 	add ebx, 6
  6926 00005406 E9F2F4FFFF          <2> 	jmp chkeqsn
  6927                              <1> progend:		;programs end here	
  6928                              <1> batchprogend:
  6929                                  	%include "source/hardware.asm"
  6930                              <1> %ifdef gui.included
  6931                              <1> 	%include "source/drivers/video/vesa.asm"
  6932                              <2> [BITS 16]
  6933                              <2> guiswitch:
  6934 0000540B 81F90000            <2> 	cmp cx, 0
  6935 0000540F 750B                <2> 	jne guiswitchdefnum
  6936 00005411 B81200              <2> 	mov ax, 12h
  6937 00005414 31DB                <2> 	xor bx, bx
  6938 00005416 CD10                <2> 	int 10h
  6939 00005418 E85100              <2> 	call guiloadagain
  6940                              <2> guiswitchnocando:
  6941 0000541B C3                  <2> 	ret	;return without switching as mode number is bad
  6942                              <2> guiswitchdefnum:	;switch to a defined mode number
  6943 0000541C B8004F              <2> 	mov ax, 0x4F00
  6944 0000541F BF[FD55]            <2> 	mov di, VBEMODEBLOCK
  6945 00005422 CD10                <2> 	int 10h
  6946 00005424 BE[1F56]            <2> 	mov si, reserved
  6947 00005427 81EE0200            <2> 	sub si, 2
  6948                              <2> .loop:
  6949 0000542B 81C60200            <2> 	add si, 2
  6950 0000542F 81FE[FD56]          <2> 	cmp si, oemdata
  6951 00005433 74E6                <2> 	je guiswitchnocando
  6952 00005435 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6953 00005439 74E0                <2> 	je guiswitchnocando
  6954 0000543B 390C                <2> 	cmp [si], cx
  6955 0000543D 75EC                <2> 	jne .loop
  6956 0000543F 8936[5355]          <2> 	mov [videomodecache], si
  6957 00005443 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6958 00005447 B8014F              <2> 	mov ax, 0x4F01
  6959 0000544A BF[FD57]            <2> 	mov di, VBEMODEINFOBLOCK
  6960 0000544D 890E[5155]          <2> 	mov [vesamode], cx
  6961 00005451 CD10                <2> 	int 10h
  6962 00005453 E9DB00              <2> 	jmp selectedvesa
  6963                              <2> guiload:
  6964 00005456 BE[D555]            <2> 	mov si, bootmsg
  6965 00005459 E825AC              <2> 	call printrm
  6966 0000545C 31C0                <2> 	xor ax, ax
  6967 0000545E CD16                <2> 	int 16h
  6968 00005460 3C79                <2> 	cmp al, "y"
  6969 00005462 0F85D9AB            <2> 	jne near vgaset
  6970 00005466 BE[B389]            <2> 	mov si, crlf
  6971 00005469 E815AC              <2> 	call printrm
  6972                              <2> guiloadagain:
  6973 0000546C B8004F              <2> 	mov ax, 04F00h
  6974 0000546F BF[FD55]            <2> 	mov di, VBEMODEBLOCK
  6975 00005472 CD10                <2> 	int 10h
  6976 00005474 BE[1F56]            <2> 	mov si, reserved
  6977 00005477 81EE0200            <2> 	sub si, 2
  6978                              <2> findvideomodes:
  6979 0000547B 81C60200            <2> 	add si, 2
  6980 0000547F 8B0C                <2> 	mov cx, [si]
  6981 00005481 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6982 00005485 0F840B00            <2> 	je near nextvmode
  6983 00005489 81FE[FD56]          <2> 	cmp si, oemdata
  6984 0000548D 0F83AEAB            <2> 	jae near vgaset	;kill if no valid list is found
  6985 00005491 E9E7FF              <2> 	jmp findvideomodes 	
  6986                              <2> ;debug,shows vmodes available
  6987                              <2> nextvmode:
  6988 00005494 81EE0200            <2> 	sub si, 2
  6989 00005498 81FE[1F56]          <2> 	cmp si, reserved
  6990 0000549C 0F82CCFF            <2> 	jb near guiloadagain
  6991 000054A0 8B0C                <2> 	mov cx, [si]
  6992 000054A2 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6993 000054A6 0F84EAFF            <2> 	je near nextvmode
  6994 000054AA 81C90040            <2> 	or cx, 0x4000 		;Linear Frame Buffer
  6995 000054AE B8014F              <2> 	mov ax, 04F01h
  6996 000054B1 BF[FD57]            <2> 	mov di, VBEMODEINFOBLOCK
  6997 000054B4 890E[5155]          <2> 	mov [vesamode], cx
  6998 000054B8 CD10                <2> 	int 10h
  6999 000054BA A0[1658]            <2> 	mov al, [bitsperpixel]
  7000 000054BD 3C10                <2> 	cmp al, 16
  7001 000054BF 75D3                <2> 	jne nextvmode
  7002 000054C1 8936[5355]          <2> 	mov [videomodecache], si
  7003 000054C5 84E4                <2> 	test ah, ah
  7004 000054C7 0F842300            <2> 	jz near setvesamode
  7005 000054CB E9C6FF              <2> 	jmp nextvmode
  7006 000054CE 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  7007 000054D7 20766964656F206D6F- <2>
  7008 000054E0 6465204F4B3F28792F- <2>
  7009 000054E9 6E290D0A00          <2>
  7010                              <2> setvesamode:
  7011 000054EE 8B36[5355]          <2> 	mov si, [videomodecache]
  7012 000054F2 8B0C                <2> 	mov cx, [si]
  7013 000054F4 E86500              <2> 	call decshow
  7014 000054F7 B03A                <2> 	mov al, ':'
  7015 000054F9 E8D100              <2> 	call char
  7016 000054FC 8B0E[0F58]          <2> 	mov cx, [resolutionx]
  7017 00005500 E85900              <2> 	call decshow
  7018 00005503 B078                <2> 	mov al, "x"
  7019 00005505 E8C500              <2> 	call char
  7020 00005508 8B0E[1158]          <2> 	mov cx, [resolutiony]
  7021 0000550C E84D00              <2> 	call decshow
  7022 0000550F B040                <2> 	mov al, "@"
  7023 00005511 E8B900              <2> 	call char
  7024 00005514 31C9                <2> 	xor cx, cx
  7025 00005516 8A0E[1658]          <2> 	mov cl, [bitsperpixel]
  7026 0000551A E83F00              <2> 	call decshow
  7027 0000551D BE[CE54]            <2> 	mov si, isthisvideook
  7028 00005520 E85EAB              <2> 	call printrm
  7029 00005523 31C0                <2> 	xor ax, ax
  7030 00005525 CD16                <2> 	int 16h
  7031 00005527 8B36[5355]          <2> 	mov si, [videomodecache]
  7032 0000552B 3C79                <2> 	cmp al, "y"
  7033 0000552D 0F8563FF            <2> 	jne near nextvmode
  7034                              <2> selectedvesa:
  7035 00005531 8B16[0F58]          <2> 	mov dx, [resolutionx]
  7036 00005535 01D2                <2> 	add dx, dx
  7037 00005537 8916[FD58]          <2> 	mov [resolutionx2], dx
  7038 0000553B 31D2                <2> 	xor dx, dx
  7039 0000553D 31C9                <2> 	xor cx, cx
  7040 0000553F B8024F              <2> 	mov ax, 04F02h
  7041 00005542 8B1E[5155]          <2> 	mov bx, [vesamode]
  7042 00005546 CD10                <2> 	int 10h		;enter VESA mode
  7043 00005548 C606[D989]01        <2> 	mov byte [guion], 1
  7044 0000554D E8FFAA              <2> 	call getmemorysize;get the memory map after the video is initialized
  7045 00005550 C3                  <2> 	ret
  7046                              <2> 	
  7047 00005551 0000                <2> vesamode dw 0
  7048 00005553 0000                <2> videomodecache dw 0
  7049                              <2> 
  7050 00005555 0000000000          <2> dcnm db 0,0,0,0,0
  7051 0000555A 0000                <2> dcnmend db 0,0
  7052                              <2> 
  7053                              <2> 
  7054                              <2> decshow:
  7055 0000555C BE[5555]            <2> 	mov si, dcnm
  7056                              <2> decclear:
  7057 0000555F B030                <2> 	mov al, "0"
  7058 00005561 8804                <2> 	mov [si], al
  7059 00005563 46                  <2> 	inc si
  7060 00005564 81FE[5A55]          <2> 	cmp si, dcnmend
  7061 00005568 76F5                <2> 	jbe decclear
  7062 0000556A 4E                  <2> 	dec si
  7063 0000556B E81500              <2> 	call convertrm
  7064 0000556E BE[5555]            <2> 	mov si, dcnm
  7065                              <2> dectst:
  7066 00005571 8A04                <2> 	mov al, [si]
  7067 00005573 46                  <2> 	inc si
  7068 00005574 81FE[5A55]          <2> 	cmp si, dcnmend
  7069 00005578 7704                <2> 	ja dectstend
  7070 0000557A 3C30                <2> 	cmp al, "0"
  7071 0000557C 76F3                <2> 	jbe dectst
  7072                              <2> dectstend:
  7073 0000557E 4E                  <2> 	dec si
  7074 0000557F E8FFAA              <2> 	call printrm
  7075 00005582 C3                  <2> 	ret
  7076                              <2> 	
  7077                              <2> 	
  7078                              <2> convertrm:
  7079 00005583 4E                  <2> 	dec si
  7080 00005584 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  7081                              <2> cnvrtrm:
  7082 00005586 89DE                <2> 	mov si, bx
  7083 00005588 81EE0300            <2> 	sub si, 3
  7084 0000558C 46                  <2> ten3rm:	inc si
  7085 0000558D 81F9E803            <2> 	cmp cx, 1000
  7086 00005591 7209                <2> 	jb ten2rm
  7087 00005593 81E9E803            <2> 	sub cx, 1000
  7088 00005597 FE04                <2> 	inc byte [si]
  7089 00005599 E9EAFF              <2> 	jmp cnvrtrm
  7090 0000559C 46                  <2> ten2rm:	inc si
  7091 0000559D 81F96400            <2> 	cmp cx, 100
  7092 000055A1 7209                <2> 	jb ten1rm
  7093 000055A3 81E96400            <2> 	sub cx, 100
  7094 000055A7 FE04                <2> 	inc byte [si]
  7095 000055A9 E9DAFF              <2> 	jmp cnvrtrm
  7096 000055AC 46                  <2> ten1rm:	inc si
  7097 000055AD 81F90A00            <2> 	cmp cx, 10
  7098 000055B1 7209                <2> 	jb ten0rm
  7099 000055B3 81E90A00            <2> 	sub cx, 10
  7100 000055B7 FE04                <2> 	inc byte [si]
  7101 000055B9 E9CAFF              <2> 	jmp cnvrtrm
  7102 000055BC 46                  <2> ten0rm:	inc si
  7103 000055BD 81F90100            <2> 	cmp cx, 1
  7104 000055C1 7209                <2> 	jb tendnrm
  7105 000055C3 81E90100            <2> 	sub cx, 1
  7106 000055C7 FE04                <2> 	inc byte [si]
  7107 000055C9 E9BAFF              <2> 	jmp cnvrtrm
  7108                              <2> tendnrm:
  7109 000055CC C3                  <2> 	ret
  7110                              <2> 
  7111                              <2>     char: 		    ;char must be in al
  7112 000055CD BB0700              <2>        mov bx, 07
  7113 000055D0 B40E                <2> 	   mov ah, 0Eh
  7114 000055D2 CD10                <2> 	   int 10h
  7115 000055D4 C3                  <2> 	   ret
  7116                              <2> 
  7117 000055D5 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  7118 000055DE 20746865204755493F- <2>
  7119 000055E7 28792F6E2900        <2>
  7120                              <2> 
  7121                              <2> 
  7122                              <2> mcursor:
  7123 000055ED 01                  <2> 	db	00000001b
  7124 000055EE 81                  <2> 	db	10000001b
  7125 000055EF C1                  <2> 	db	11000001b
  7126 000055F0 E1                  <2> 	db	11100001b
  7127 000055F1 F1                  <2> 	db	11110001b
  7128 000055F2 F9                  <2> 	db	11111001b
  7129 000055F3 FD                  <2> 	db	11111101b
  7130 000055F4 FF                  <2> 	db	11111111b
  7131 000055F5 F9                  <2> 	db	11111001b
  7132 000055F6 B9                  <2> 	db	10111001b
  7133 000055F7 39                  <2> 	db	00111001b
  7134 000055F8 1C                  <2> 	db	00011100b
  7135 000055F9 1C                  <2> 	db	00011100b
  7136 000055FA 0E                  <2> 	db	00001110b
  7137 000055FB 0E                  <2> 	db	00001110b
  7138 000055FC 0C                  <2> 	db	00001100b
  7139                              <2> mcursorend:
  7140                              <2> 
  7141                              <2> 
  7142                              <2> VBEMODEBLOCK:
  7143 000055FD 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  7144 00005601 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  7145 00005603 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  7146 00005607 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  7147 0000560B 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  7148 0000560F 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  7149 00005611 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  7150 00005613 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  7151 00005617 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  7152 0000561B 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  7153 0000561F 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  7154 000056FD 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  7155                              <2> 
  7156                              <2> VBEMODEINFOBLOCK:
  7157                              <2> ;Mandatory information for all VBE revision
  7158 000057FD 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  7159 000057FF 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  7160 00005800 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  7161 00005801 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  7162 00005803 00<rept>            <2> winsize          	times  2 db 0	;Window size
  7163 00005805 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  7164 00005807 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  7165 00005809 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  7166 0000580D 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  7167                              <2> 
  7168                              <2> ;Mandatory information for VBE 1.2 and above
  7169 0000580F 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  7170 00005811 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  7171 00005813 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  7172 00005814 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  7173 00005815 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  7174 00005816 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  7175 00005817 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  7176 00005818 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  7177 00005819 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  7178 0000581A 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  7179 0000581B 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  7180                              <2> 
  7181                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  7182 0000581C 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  7183 0000581D 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  7184 0000581E 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  7185 0000581F 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  7186 00005820 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  7187 00005821 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  7188 00005822 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  7189 00005823 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  7190 00005824 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  7191                              <2> 
  7192                              <2> ;Mandatory information for VBE 2.0 and above
  7193 00005825 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  7194 00005829 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  7195 0000582D 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  7196 0000582F 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  7197                              <2> 
  7198 000058FD 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  7199                              <2> VBEEND:
  7200                              <2> [BITS 32]
  7201                              <1> 	%include "source/drivers/input/mouse.asm"
  7202 00005901 00                  <2> mousedisabled db 0
  7203                              <2> 	
  7204                              <2> 	cursorgui:
  7205 00005902 803D[6B890000]01    <2> 		cmp byte [mouseon], 1
  7206 00005909 0F8432000000        <2> 		je near mousedaemon
  7207 0000590F 803D[D9890000]00    <2> 		cmp byte [guion], 0
  7208 00005916 0F8415070000        <2> 		je near entdown
  7209                              <2> 	initmouse:
  7210 0000591C 803D[D9890000]00    <2> 		cmp byte [guion], 0
  7211 00005923 7405                <2> 		je noswmsposinit
  7212 00005925 E8E1150000          <2> 		call switchmousepos2
  7213                              <2> 	noswmsposinit:
  7214 0000592A E85D020000          <2> 	  	call PS2SET
  7215 0000592F E886020000          <2> 		call ACTMOUS
  7216 00005934 C605[6B890000]01    <2> 		mov byte [mouseon],1
  7217 0000593B E89F020000          <2> 		call GETB 	;Get the responce byte of the mouse (like: Hey i am active)
  7218                              <2> 		;call GETB
  7219                              <2> 				;if the bytes are mixed up,
  7220                              <2> 				;remove this line or add another of this line.
  7221                              <2> 	nomouse:
  7222 00005940 C3                  <2> 		ret
  7223                              <2> 		
  7224                              <2> 	mousedaemon:
  7225 00005941 803D[6B890000]01    <2> 		cmp byte [mouseon], 1
  7226 00005948 75D2                <2> 		jne initmouse
  7227 0000594A E464                <2> 		in al, 64h ; Status
  7228 0000594C A820                <2> 		test al, 20h ; PS2-Mouse?
  7229 0000594E 0F8502000000        <2> 		jnz near moused
  7230 00005954 F4                  <2> 		hlt
  7231 00005955 C3                  <2> 		ret
  7232                              <2> 	moused:
  7233 00005956 803D[01590000]01    <2> 		cmp byte [mousedisabled], 1
  7234 0000595D 74E1                <2> 		je nomouse
  7235 0000595F E87B020000          <2> 		  call GETB
  7236 00005964 88C3                <2> 		  mov  bl, al
  7237 00005966 80E301              <2> 		  and  bl, 1
  7238 00005969 881D[045C0000]      <2> 		  mov  BYTE [LBUTTON], bl
  7239 0000596F 88C3                <2> 		  mov  bl, al
  7240 00005971 80E302              <2> 		  and  bl, 2
  7241 00005974 D0EB                <2> 		  shr  bl, 1
  7242 00005976 881D[055C0000]      <2> 		  mov  BYTE [RBUTTON], bl
  7243 0000597C 88C3                <2> 		  mov  bl, al
  7244 0000597E 80E304              <2> 		  and  bl, 4
  7245 00005981 C0EB02              <2> 		  shr  bl, 2
  7246 00005984 881D[065C0000]      <2> 		  mov  BYTE [MBUTTON], bl
  7247 0000598A E850020000          <2> 		  call GETB
  7248 0000598F A2[075C0000]        <2> 		  mov  BYTE [XCOORD], al
  7249 00005994 E846020000          <2> 		  call GETB
  7250 00005999 A2[085C0000]        <2> 		  mov  BYTE [YCOORD], al
  7251                              <2> 
  7252                              <2> 	showpixelcursor:
  7253 0000599E 668B15[F35A0000]    <2> 		mov dx, [mousecursorposition]
  7254 000059A5 668B0D[F55A0000]    <2> 		mov cx, [mousecursorposition + 2]
  7255 000059AC 668915[EF5A0000]    <2> 		mov [lastmouseposition], dx
  7256 000059B3 66890D[F15A0000]    <2> 		mov [lastmouseposition + 2], cx
  7257 000059BA A0[075C0000]        <2> 		mov al, [XCOORD]
  7258 000059BF 3C80                <2> 		cmp al, 128
  7259 000059C1 730C                <2> 		jae subxcoord
  7260 000059C3 00C0                <2> 		add al, al
  7261 000059C5 30E4                <2> 		xor ah, ah
  7262 000059C7 6601C2              <2> 		add dx, ax
  7263 000059CA E90B000000          <2> 		jmp subxcoorddn
  7264                              <2> 	subxcoord:
  7265 000059CF 00C0                <2> 		add al, al
  7266 000059D1 30DB                <2> 		xor bl, bl
  7267 000059D3 28C3                <2> 		sub bl, al
  7268 000059D5 30FF                <2> 		xor bh, bh
  7269 000059D7 6629DA              <2> 		sub dx, bx
  7270                              <2> 	subxcoorddn:
  7271 000059DA 8A1D[085C0000]      <2> 		mov bl, [YCOORD]
  7272 000059E0 30C0                <2> 		xor al, al
  7273 000059E2 28D8                <2> 		sub al, bl
  7274 000059E4 3C80                <2> 		cmp al, 128
  7275 000059E6 730A                <2> 		jae subycoord
  7276 000059E8 30E4                <2> 		xor ah, ah
  7277 000059EA 6601C1              <2> 		add cx, ax
  7278 000059ED E909000000          <2> 		jmp subycoorddn
  7279                              <2> 	subycoord:
  7280 000059F2 30DB                <2> 		xor bl, bl
  7281 000059F4 28C3                <2> 		sub bl, al
  7282 000059F6 30FF                <2> 		xor bh, bh
  7283 000059F8 6629D9              <2> 		sub cx, bx
  7284                              <2> 	subycoorddn:
  7285 000059FB 6681FA204E          <2> 		cmp dx, 20000
  7286 00005A00 7603                <2> 		jbe nooriginx2
  7287 00005A02 6631D2              <2> 		xor dx, dx
  7288                              <2> 	nooriginx2:
  7289 00005A05 6681F9204E          <2> 		cmp cx, 20000
  7290 00005A0A 7603                <2> 		jbe nooriginy2
  7291 00005A0C 6631C9              <2> 		xor cx, cx
  7292                              <2> 	nooriginy2:
  7293 00005A0F 6681FA0000          <2> 		cmp dx, 0
  7294 00005A14 7415                <2> 		je nofixxcolumn2
  7295 00005A16 663B15[FD580000]    <2> 		cmp dx, [resolutionx2]
  7296 00005A1D 720C                <2> 		jb nofixxcolumn2
  7297 00005A1F 668B15[FD580000]    <2> 		mov dx, [resolutionx2]
  7298 00005A26 6681EA0200          <2> 		sub dx, 2
  7299                              <2> 	nofixxcolumn2:
  7300 00005A2B 6681F90000          <2> 		cmp cx, 0
  7301 00005A30 7415                <2> 		je nofixyrow2
  7302 00005A32 663B0D[11580000]    <2> 		cmp cx, [resolutiony]
  7303 00005A39 720C                <2> 		jb nofixyrow2
  7304 00005A3B 668B0D[11580000]    <2> 		mov cx, [resolutiony]
  7305 00005A42 6681E90100          <2> 		sub cx, 1
  7306                              <2> 	nofixyrow2:
  7307 00005A47 668915[F35A0000]    <2> 		mov [mousecursorposition], dx
  7308 00005A4E 66890D[F55A0000]    <2> 		mov [mousecursorposition + 2], cx
  7309 00005A55 803D[D9890000]00    <2> 		cmp byte [guion], 0
  7310 00005A5C 0F8495000000        <2> 		je near termmouse
  7311 00005A62 E844140000          <2> 		call switchmousepos ;use dragging code to ensure proper icon drag
  7312 00005A67 803D[045C0000]01    <2> 		cmp byte [LBUTTON], 1
  7313 00005A6E 0F848F260000        <2> 		je near clickicon
  7314 00005A74 803D[055C0000]01    <2> 		cmp byte [RBUTTON], 1
  7315 00005A7B 0F8482260000        <2> 		je near clickicon
  7316 00005A81 A0[F0800000]        <2> 		mov al, [pbutton]
  7317 00005A86 C705[F3800000]0000- <2> 		mov dword [dragging], 0
  7318 00005A8E 0000                <2>
  7319 00005A90 3C00                <2> 		cmp al, 0
  7320 00005A92 740F                <2> 		je nopreviousbutton
  7321 00005A94 E876130000          <2> 		call clearmousecursor
  7322 00005A99 E864170000          <2> 		call reloadallgraphics
  7323                              <2> 	windowtermcopyend:
  7324 00005A9E E868140000          <2> 		call switchmousepos2
  7325                              <2> 	nopreviousbutton:
  7326 00005AA3 30C0                <2> 		xor al, al
  7327 00005AA5 A2[F0800000]        <2> 		mov [pbutton], al
  7328 00005AAA A2[5A860000]        <2> 		mov [windrag], al
  7329 00005AAF A0[045C0000]        <2> 		mov al, [LBUTTON]
  7330 00005AB4 A2[F1800000]        <2> 		mov [pLBUTTON], al
  7331 00005AB9 A0[055C0000]        <2> 		mov al, [RBUTTON]
  7332 00005ABE A2[F2800000]        <2> 		mov [pRBUTTON], al
  7333 00005AC3 31D2                <2> 		xor edx, edx
  7334 00005AC5 668B15[F35A0000]    <2> 		mov dx, [mousecursorposition]
  7335 00005ACC 668B0D[F55A0000]    <2> 		mov cx, [mousecursorposition + 2]
  7336 00005AD3 66BB18C7            <2> 		mov bx, 1100011100011000b
  7337 00005AD7 66B80100            <2> 		mov ax, 1
  7338 00005ADB C605[ED800000]01    <2> 		mov byte [showcursorfonton], 1
  7339 00005AE2 E80A1E0000          <2> 		call showfontvesa
  7340 00005AE7 C605[ED800000]00    <2> 		mov byte [showcursorfonton], 0
  7341 00005AEE C3                  <2> 		ret
  7342                              <2> 
  7343 00005AEF 00000000            <2> lastmouseposition dw 0,0
  7344 00005AF3 00000000            <2> mousecursorposition dw 0,0	
  7345                              <2> 
  7346                              <2> termmouse:
  7347 00005AF7 BE[9CE32B00]        <2> 		mov esi, videobuf
  7348 00005AFC 31D2                <2> 		xor edx, edx
  7349 00005AFE 668B15[EF5A0000]    <2> 		mov dx, [lastmouseposition]
  7350 00005B05 668B0D[F15A0000]    <2> 		mov cx, [lastmouseposition + 2]
  7351 00005B0C 66A1[8A5B0000]      <2> 		mov ax, [cursorcache]
  7352 00005B12 663D0000            <2> 		cmp ax, 0
  7353 00005B16 7425                <2> 		je nocopycursorcache
  7354 00005B18 66C1E104            <2> 		shl cx, 4
  7355 00005B1C 66C1E203            <2> 		shl dx, 3
  7356 00005B20 01D6                <2> 		add esi, edx
  7357 00005B22 6631D2              <2> 		xor dx, dx
  7358 00005B25 8A15[09260000]      <2> 		mov dl, [charxy]
  7359 00005B2B 6641                <2> 		inc cx
  7360                              <2> termmousecplp1:
  7361 00005B2D 01D6                <2> 		add esi, edx
  7362 00005B2F 6649                <2> 		dec cx
  7363 00005B31 6681F90000          <2> 		cmp cx, 0
  7364 00005B36 75F5                <2> 		jne termmousecplp1
  7365 00005B38 29D6                <2> 		sub esi, edx
  7366 00005B3A 668906              <2> 		mov [esi], ax
  7367                              <2> nocopycursorcache:
  7368 00005B3D BE[9CE32B00]        <2> 		mov esi, videobuf
  7369 00005B42 31D2                <2> 		xor edx, edx
  7370 00005B44 668B15[F35A0000]    <2> 		mov dx, [mousecursorposition]
  7371 00005B4B 668B0D[F55A0000]    <2> 		mov cx, [mousecursorposition + 2]
  7372 00005B52 66C1E104            <2> 		shl cx, 4
  7373 00005B56 66C1E203            <2> 		shl dx, 3
  7374 00005B5A 01D6                <2> 		add esi, edx
  7375 00005B5C 6631D2              <2> 		xor dx, dx
  7376 00005B5F 8A15[09260000]      <2> 		mov dl, [charxy]
  7377 00005B65 6641                <2> 		inc cx
  7378                              <2> termmousecplp2:
  7379 00005B67 01D6                <2> 		add esi, edx
  7380 00005B69 6649                <2> 		dec cx
  7381 00005B6B 6681F90000          <2> 		cmp cx, 0
  7382 00005B70 75F5                <2> 		jne termmousecplp2
  7383 00005B72 29D6                <2> 		sub esi, edx
  7384 00005B74 668B06              <2> 		mov ax, [esi]
  7385 00005B77 66A3[8A5B0000]      <2> 		mov [cursorcache], ax
  7386 00005B7D B080                <2> 		mov al, 128
  7387 00005B7F B407                <2> 		mov ah, 7
  7388 00005B81 668906              <2> 		mov [esi], ax
  7389 00005B84 E892CDFFFF          <2> 		call termcopy
  7390 00005B89 C3                  <2> 		ret
  7391 00005B8A 0000                <2> cursorcache db 0,0
  7392                              <2> 
  7393                              <2> PS2SET:
  7394 00005B8C B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7395 00005B8E E664                <2>   out  0x64, al		; write to keyboardcontroller
  7396 00005B90 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7397 00005B95 C3                  <2> ret
  7398                              <2> 
  7399                              <2> CHKPRT:
  7400 00005B96 66B96400            <2>   mov  cx, 100
  7401                              <2>  .again:
  7402 00005B9A E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7403 00005B9C A802                <2>   test al, 2		; Check if input buffer is empty
  7404 00005B9E 7402                <2>   je .go
  7405 00005BA0 E2F8                <2>   loop .again
  7406                              <2>  .go:
  7407 00005BA2 C3                  <2> ret
  7408                              <2> 
  7409                              <2> WMOUS:
  7410 00005BA3 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7411 00005BA5 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7412 00005BA7 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7413 00005BAC C3                  <2> ret
  7414                              <2> 
  7415                              <2> MBUFFUL:
  7416 00005BAD 66B96400            <2>   mov cx, 100
  7417                              <2>  .mn:
  7418 00005BB1 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7419 00005BB3 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7420 00005BB5 7402                <2>   jz  .mnn
  7421 00005BB7 E2F8                <2>   loop .mn
  7422                              <2>  .mnn:
  7423 00005BB9 C3                  <2> ret
  7424                              <2> 
  7425                              <2> 
  7426                              <2> ACTMOUS:
  7427 00005BBA E8E4FFFFFF          <2>   call WMOUS
  7428 00005BBF B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7429 00005BC1 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7430 00005BC3 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7431 00005BC8 E801000000          <2>   call CHKMOUS		; check if a byte is available
  7432 00005BCD C3                  <2> ret
  7433                              <2> 
  7434                              <2> CHKMOUS:
  7435 00005BCE B300                <2>   mov  bl, 0
  7436 00005BD0 66B96400            <2>   mov cx, 100
  7437                              <2>  .vrd:
  7438 00005BD4 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7439 00005BD6 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7440 00005BD8 7504                <2>   jnz .yy
  7441 00005BDA E2F8                <2>   loop .vrd
  7442 00005BDC B301                <2>   mov  bl, 1
  7443                              <2>  .yy:
  7444 00005BDE C3                  <2> ret
  7445                              <2> 
  7446                              <2> GETB:
  7447                              <2>  .cagain:
  7448 00005BDF E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7449 00005BE4 08DB                <2>   or bl, bl
  7450 00005BE6 75F7                <2>   jnz .cagain
  7451 00005BE8 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7452 00005BEA E664                <2>   out  0x64, al		; write to keyboardcontroller
  7453 00005BEC E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7454 00005BF1 6631C0              <2>   xor  ax, ax
  7455 00005BF4 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7456 00005BF6 88C2                <2>   mov  dl, al
  7457 00005BF8 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7458 00005BFA E664                <2>   out  0x64, al		; write to keyboardcontroller
  7459 00005BFC E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7460 00005C01 88D0                <2>   mov  al, dl
  7461 00005C03 C3                  <2> ret
  7462                              <2> 
  7463 00005C04 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7464 00005C05 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7465 00005C06 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7466 00005C07 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7467 00005C08 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7468                              <1> %endif
  7469                              <1> %include "source/drivers/sound/pcspkr.asm"
  7470                              <2> ;PC Speaker Drivers
  7471                              <2> PCSpeakerRAW:
  7472 00005C09 60                  <2> 	pusha
  7473                              <2> nosoundrep:
  7474 00005C0A 8B35[76020000]      <2> 	mov esi, [soundpos]
  7475 00005C10 31C9                <2> 	xor ecx, ecx
  7476 00005C12 668B0D[74020000]    <2> 	mov cx, [soundrepititions]
  7477 00005C19 6681F90000          <2> 	cmp cx, 0
  7478 00005C1E 0F8548000000        <2> 	jne near donesetpitch
  7479 00005C24 668B0E              <2> 	mov cx, [esi]
  7480 00005C27 668B5E02            <2> 	mov bx, [esi + 2]
  7481 00005C2B 66890D[74020000]    <2> 	mov [soundrepititions], cx
  7482 00005C32 81C604000000        <2> 	add esi, 4
  7483 00005C38 8935[76020000]      <2> 	mov [soundpos], esi
  7484 00005C3E 3B35[7A020000]      <2> 	cmp esi, [soundendpos]
  7485 00005C44 7735                <2> 	ja stopsound
  7486 00005C46 66813D[74020000]00- <2> 	cmp word [soundrepititions], 0
  7487 00005C4E 00                  <2>
  7488 00005C4F 74B9                <2> 	je nosoundrep
  7489 00005C51 6681FB0000          <2> 	cmp bx, 0
  7490 00005C56 740F                <2> 	je nosoundplay
  7491 00005C58 E840000000          <2> 	call setpitch
  7492 00005C5D E849000000          <2> 	call startsound
  7493 00005C62 E905000000          <2> 	jmp donesetpitch
  7494                              <2> nosoundplay:
  7495 00005C67 E846000000          <2> 	call killsound
  7496                              <2> donesetpitch:
  7497 00005C6C 6649                <2> 	dec cx
  7498 00005C6E 66890D[74020000]    <2> 	mov [soundrepititions], cx
  7499 00005C75 61                  <2> 	popa
  7500 00005C76 E937A6FFFF          <2> 	jmp timerinterrupt
  7501                              <2> stopsound:
  7502 00005C7B 31C0                <2> 	xor eax, eax
  7503 00005C7D 66A3[74020000]      <2> 	mov [soundrepititions], ax
  7504 00005C83 A2[73020000]        <2> 	mov [soundon], al
  7505 00005C88 A3[76020000]        <2> 	mov [soundpos], eax
  7506 00005C8D A3[7A020000]        <2> 	mov [soundendpos], eax
  7507 00005C92 E81B000000          <2> 	call killsound
  7508 00005C97 61                  <2> 	popa
  7509 00005C98 E915A6FFFF          <2> 	jmp timerinterrupt
  7510                              <2> 
  7511                              <2> 
  7512                              <2> setpitch:
  7513 00005C9D B0B6                <2> 	mov al, 0xB6
  7514 00005C9F E643                <2> 	out 0x43, al
  7515 00005CA1 6689D8              <2> 	mov ax, bx
  7516 00005CA4 E642                <2> 	out 0x42, al
  7517 00005CA6 88E0                <2> 	mov al, ah
  7518 00005CA8 E642                <2> 	out 0x42, al
  7519 00005CAA C3                  <2> 	ret
  7520                              <2> startsound:
  7521 00005CAB E461                <2> 	in al, 0x61
  7522 00005CAD 0C03                <2> 	or al, 3
  7523 00005CAF E661                <2> 	out 0x61, al
  7524 00005CB1 C3                  <2> 	ret
  7525                              <2> killsound:
  7526 00005CB2 E461                <2> 	in al, 0x61
  7527 00005CB4 24FC                <2> 	and al, 0xFC
  7528 00005CB6 E661                <2> 	out 0x61, al
  7529 00005CB8 C3                  <2> 	ret
  7530                              <2> 	
  7531                              <1> %ifdef sound.included
  7532                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7533                              <2> ;Sound Blaster Drivers
  7534                              <2> sblaster:
  7535                              <2> .init:
  7536 00005CB9 E8E1010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  7537 00005CBE A2[F95E0000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  7538 00005CC3 3C00                <2> 		cmp al, 0
  7539 00005CC5 7418                <2> 		je .noinit
  7540 00005CC7 B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  7541 00005CC9 E805020000          <2> 		call WriteDSP
  7542 00005CCE B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  7543 00005CD0 E8BB010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  7544 00005CD5 BE[E05C0000]        <2> 		mov esi, .initmsg
  7545 00005CDA E886C0FFFF          <2> 		call print
  7546                              <2> .noinit:
  7547 00005CDF C3                  <2> 		ret
  7548 00005CE0 5342313620496E6974- <2> .initmsg db "SB16 Initialized.",10,0
  7549 00005CE9 69616C697A65642E0A- <2>
  7550 00005CF2 00                  <2>
  7551                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  7552 00005CF3 813D[E45E0000]0000- <2> 	cmp dword [Length0], 0
  7553 00005CFB 0000                <2>
  7554 00005CFD 0F8462000000        <2> 	je near .done
  7555 00005D03 FF0D[E45E0000]      <2> 	dec dword [Length0]
  7556 00005D09 E908000000          <2> 	jmp .notodd
  7557                              <2> .oddlength:
  7558 00005D0E 31C9                <2> 	xor ecx, ecx
  7559 00005D10 880D[E35E0000]      <2> 	mov [OddLength], cl
  7560                              <2> .notodd:
  7561 00005D16 8B35[EA5E0000]      <2> 	mov esi, [NextMemLoc]
  7562 00005D1C 31C9                <2> 	xor ecx, ecx
  7563 00005D1E 668B0D[E85E0000]    <2> 	mov cx, [Length1]
  7564 00005D25 D1E9                <2> 	shr ecx, 1
  7565 00005D27 6641                <2> 	inc cx
  7566 00005D29 31DB                <2> 	xor ebx, ebx
  7567 00005D2B 668B1D[F25E0000]    <2> 	mov bx, [SegLoc]
  7568 00005D32 6601CB              <2> 	add bx, cx
  7569 00005D35 66891D[F25E0000]    <2> 	mov [SegLoc], bx
  7570 00005D3C 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  7571 00005D42 8935[EE5E0000]      <2> 	mov [MemLoc], esi
  7572 00005D48 89C8                <2> 	mov eax, ecx
  7573 00005D4A 01F0                <2> 	add eax, esi
  7574 00005D4C A3[EA5E0000]        <2> 	mov [NextMemLoc], eax
  7575 00005D51 E833000000          <2> 	call DMACopy
  7576                              <2> 	;call DMAPlay
  7577 00005D56 E8E0000000          <2> 	call PlayDSP
  7578 00005D5B 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7579 00005D5F EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7580 00005D60 E916A6FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  7581                              <2> .done:
  7582 00005D65 803D[E35E0000]01    <2> 	cmp byte [OddLength], 1
  7583 00005D6C 74A0                <2> 	je .oddlength
  7584 00005D6E 31C0                <2> 	xor eax, eax
  7585 00005D70 66A3[E85E0000]      <2> 	mov [Length1], ax
  7586 00005D76 66B8D000            <2> 	mov ax, 0xD0
  7587 00005D7A E854010000          <2> 	call WriteDSP
  7588 00005D7F 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7589 00005D83 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7590 00005D84 E9F2A5FFFF          <2> 	jmp handled2
  7591                              <2> 	
  7592                              <2> DMACopy:
  7593 00005D89 66B80800            <2> 		mov ax, LINEAR_SEL
  7594 00005D8D 8EE0                <2> 		mov fs, ax
  7595 00005D8F C1E902              <2> 		shr ecx, 2
  7596                              <2> .loop:
  7597 00005D92 8B06                <2> 		mov eax, [esi]
  7598 00005D94 648903              <2> 		mov [fs:ebx], eax
  7599 00005D97 81C604000000        <2> 		add esi, 4
  7600 00005D9D 81C304000000        <2> 		add ebx, 4
  7601 00005DA3 E2ED                <2> 		loop .loop
  7602 00005DA5 66B83000            <2> 		mov ax, NEW_DATA_SEL
  7603 00005DA9 8EE0                <2> 		mov fs, ax
  7604 00005DAB C3                  <2> 		ret
  7605                              <2> 		
  7606                              <2> 
  7607                              <2> DMAPlay:    ;uses eax ebx edx
  7608 00005DAC C605[F45E0000]00    <2> 		mov	byte [Page1],00h
  7609                              <2> 
  7610 00005DB3 B005                <2> 		mov	al,(Channel+4)
  7611 00005DB5 66BA0A00            <2> 		mov	dx,0Ah
  7612 00005DB9 EE                  <2> 		out	dx,al
  7613 00005DBA 30C0                <2> 		xor	al,al
  7614 00005DBC 66BA0C00            <2> 		mov	dx,0Ch
  7615 00005DC0 EE                  <2> 		out	dx,al
  7616 00005DC1 B059                <2> 		mov	al,ModeReg
  7617 00005DC3 66BA0B00            <2> 		mov	dx,0Bh
  7618 00005DC7 EE                  <2> 		out	dx,al
  7619 00005DC8 B800000800          <2> 		mov	eax,0x80000
  7620 00005DCD 66BA0200            <2> 		mov	dx,AddPort
  7621 00005DD1 EE                  <2> 		out	dx,al
  7622 00005DD2 86C4                <2> 		xchg al,ah
  7623 00005DD4 EE                  <2> 		out	dx,al
  7624 00005DD5 B800000800          <2> 		mov	eax,0x80000
  7625 00005DDA 89C2                <2> 		mov	edx,eax
  7626 00005DDC 2500000100          <2> 		and	eax,65536
  7627 00005DE1 7406                <2> 		jz	MemLocN1
  7628 00005DE3 FE05[F45E0000]      <2> 		inc	byte [Page1]
  7629                              <2> MemLocN1:
  7630 00005DE9 89D0                <2> 		mov	eax,edx
  7631 00005DEB 2500000200          <2> 		and	eax,131072
  7632 00005DF0 7407                <2> 		jz	MemLocN2
  7633 00005DF2 8005[F45E0000]02    <2> 		add	byte [Page1],02
  7634                              <2> MemLocN2:
  7635 00005DF9 89D0                <2> 		mov	eax,edx
  7636 00005DFB 2500000400          <2> 		and	eax,262144
  7637 00005E00 7407                <2> 		jz	MemLocN3
  7638 00005E02 8005[F45E0000]04    <2> 		add	byte [Page1],04
  7639                              <2> MemLocN3:
  7640 00005E09 89D0                <2> 		mov	eax,edx
  7641 00005E0B 2500000800          <2> 		and	eax,524288
  7642 00005E10 7407                <2> 		jz	MemLocN4
  7643 00005E12 8005[F45E0000]08    <2> 		add	byte [Page1],08
  7644                              <2> MemLocN4:
  7645 00005E19 66BA8300            <2> 		mov	dx,PgPort
  7646 00005E1D A0[F45E0000]        <2> 		mov	al,[Page1]
  7647 00005E22 EE                  <2> 		out	dx,al
  7648 00005E23 66BA0300            <2> 		mov	dx,LenPort
  7649 00005E27 66A1[E85E0000]      <2> 		mov	ax,[Length1]
  7650 00005E2D 6648                <2> 		dec ax
  7651 00005E2F EE                  <2> 		out	dx,al
  7652 00005E30 86C4                <2> 		xchg al,ah
  7653 00005E32 EE                  <2> 		out	dx,al
  7654 00005E33 66BA0A00            <2> 		mov	dx,0Ah
  7655 00005E37 B001                <2> 		mov	al,Channel
  7656 00005E39 EE                  <2> 		out	dx,al
  7657 00005E3A C3                  <2> 		ret
  7658                              <2> 		
  7659                              <2> PlayDSP:
  7660 00005E3B B040                <2> 		mov	al,40h
  7661 00005E3D E891000000          <2> 		call WriteDSP
  7662 00005E42 31D2                <2> 		xor	edx,edx
  7663 00005E44 B840420F00          <2> 		mov	eax,1000000
  7664 00005E49 8B1D[F55E0000]      <2> 		mov	ebx,[Freq]
  7665 00005E4F 803D[E25E0000]00    <2> 		cmp byte [Stereo], 0
  7666 00005E56 7402                <2> 		je .nost
  7667 00005E58 D1E3                <2> 		shl ebx, 1
  7668                              <2> .nost:
  7669 00005E5A F7F3                <2> 		div	ebx
  7670 00005E5C 89C3                <2> 		mov	ebx,eax
  7671 00005E5E B800010000          <2> 		mov	eax,256
  7672 00005E63 29D8                <2> 		sub	eax,ebx
  7673 00005E65 E869000000          <2> 		call WriteDSP
  7674 00005E6A B014                <2> 		mov	al,14h	;write the mode
  7675 00005E6C 803D[E25E0000]00    <2> 		cmp byte [Stereo], 0
  7676 00005E73 7400                <2> 		je .nost2
  7677                              <2> 		
  7678                              <2> .nost2:
  7679 00005E75 E859000000          <2> 		call WriteDSP
  7680 00005E7A 66A1[E85E0000]      <2> 		mov	ax,[Length1]
  7681 00005E80 66D1E8              <2> 		shr ax, 1
  7682 00005E83 E84B000000          <2> 		call WriteDSP
  7683 00005E88 86C4                <2> 		xchg al,ah
  7684 00005E8A E844000000          <2> 		call WriteDSP
  7685 00005E8F C3                  <2> 		ret
  7686                              <2> 
  7687                              <2> MstrVol:    ;uses ax dx
  7688 00005E90 6650                <2> 	   push ax
  7689 00005E92 66BA2402            <2> 	   mov	dx,(BasePort+4)
  7690 00005E96 B022                <2> 	   mov	al,22h
  7691 00005E98 EE                  <2> 	   out	dx,al
  7692 00005E99 6658                <2> 	   pop	ax
  7693 00005E9B 6642                <2> 	   inc	dx
  7694 00005E9D EE                  <2> 	   out	dx,al
  7695 00005E9E C3                  <2> 	   ret
  7696                              <2> 	   
  7697                              <2> ResetDSP:   ; uses cx dx
  7698 00005E9F 66BA2602            <2> 			mov	dx,(BasePort+6)
  7699 00005EA3 B001                <2> 			mov	al,01
  7700 00005EA5 EE                  <2> 			out	dx,al
  7701 00005EA6 66B93200            <2> 			mov	cx,50
  7702 00005EAA EC                  <2> WaitIt1:	in	al,dx
  7703 00005EAB E2FD                <2> 			loop WaitIt1
  7704 00005EAD 30C0                <2> 			xor	al,al
  7705 00005EAF EE                  <2> 			out	dx,al
  7706 00005EB0 66B93200            <2> 			mov	cx,50
  7707 00005EB4 EC                  <2> WaitIt2:	in	al,dx
  7708 00005EB5 E2FD                <2> 			loop WaitIt2
  7709 00005EB7 B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  7710 00005EB9 66BA2E02            <2> 			mov	dx,(BasePort+14)
  7711 00005EBD EC                  <2> 			in	al,dx
  7712 00005EBE 2480                <2> 			and	al,80h
  7713 00005EC0 3C80                <2> 			cmp	al,80h
  7714 00005EC2 750C                <2> 			jne	ResetErr
  7715 00005EC4 66BA2A02            <2> 			mov	dx,(BasePort+10)
  7716 00005EC8 EC                  <2> 			in	al,dx
  7717 00005EC9 3CAA                <2> 			cmp	al,0AAh
  7718 00005ECB 7503                <2> 			jne	ResetErr
  7719 00005ECD B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  7720 00005ECF C3                  <2> 			ret
  7721 00005ED0 30C0                <2> ResetErr:	xor al, al
  7722 00005ED2 C3                  <2> 			ret
  7723                              <2> 
  7724                              <2> WriteDSP:   ;uses ax dx
  7725 00005ED3 6650                <2> 		push ax
  7726 00005ED5 66BA2C02            <2> 		mov	dx,(BasePort+12)
  7727 00005ED9 EC                  <2> WaitIt:	in	al,dx
  7728 00005EDA 2480                <2> 		and	al,80h
  7729 00005EDC 75FB                <2> 		jnz	WaitIt
  7730 00005EDE 6658                <2> 		pop	ax
  7731 00005EE0 EE                  <2> 		out	dx,al
  7732 00005EE1 C3                  <2> 		ret
  7733                              <2> 
  7734 00005EE2 00                  <2> Stereo db 0
  7735 00005EE3 00                  <2> OddLength db 0
  7736 00005EE4 00000000            <2> Length0 dd	0
  7737 00005EE8 0000                <2> Length1	dw  0
  7738 00005EEA 00000000            <2> NextMemLoc dd 0
  7739 00005EEE 00000000            <2> MemLoc	dd  0
  7740 00005EF2 0000                <2> SegLoc  dw 0
  7741 00005EF4 00                  <2> Page1	db  0
  7742 00005EF5 00000000            <2> Freq	dd	0
  7743                              <2> PgPort	equ 83h
  7744                              <2> AddPort	equ 02h
  7745                              <2> LenPort	equ 03h
  7746                              <2> ModeReg	equ 59h
  7747                              <2> Channel	equ 01h
  7748                              <2> BasePort	equ 220h
  7749 00005EF9 00                  <2> SoundBlaster	db 0
  7750                              <1> %endif
  7751                              <1> %ifdef io.serial
  7752                              <1> 	%include "source/drivers/input/serial.asm"
  7753                              <1> %else
  7754                              <1> 	%include "source/drivers/input/keyboard.asm"
  7755 00005EFA 00                  <2> specialkey db 0
  7756                              <2> ;charregion db 0
  7757                              <2> waitforinput:		;this is basically the idle process
  7758                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  7759                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  7760 00005EFB 6631C0              <2> 	xor ax, ax
  7761 00005EFE A0[8E6A0000]        <2> 	mov al, [threadson]
  7762 00005F03 8825[8E6A0000]      <2> 	mov [threadson], ah
  7763 00005F09 9C                  <2> 	pushf
  7764 00005F0A FB                  <2> 	sti
  7765 00005F0B F4                  <2> 	hlt
  7766 00005F0C 9D                  <2> 	popf
  7767 00005F0D A2[8E6A0000]        <2> 	mov [threadson], al
  7768 00005F12 66813D[E5230000]00- <2> 	cmp word [trans], 0
  7769 00005F1A 00                  <2>
  7770 00005F1B 7401                <2> 	je getkey
  7771 00005F1D C3                  <2> 	ret
  7772                              <2> getkey:
  7773 00005F1E 31C0                <2> 		xor eax, eax
  7774 00005F20 A2[FA5E0000]        <2> 		mov [specialkey], al
  7775 00005F25 A3[E1230000]        <2> 		mov [lastkey], eax
  7776 00005F2A E464                <2> 		in al, 64h ; Status
  7777                              <2> 	%ifdef gui.included
  7778 00005F2C A820                <2> 		test al, 20h ; PS2-Mouse?
  7779 00005F2E 0F8522FAFFFF        <2> 		jnz near moused
  7780                              <2> 	%endif
  7781 00005F34 A801                <2> 		test al, 1 
  7782 00005F36 74C3                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7783                              <2> 	calckey:
  7784 00005F38 E460                <2> 		in al, 60h
  7785 00005F3A 30E4                <2> 		xor ah, ah
  7786 00005F3C 6689C3              <2> 		mov bx, ax
  7787 00005F3F 66A3[E3230000]      <2> 		mov [lastkey + 2], ax
  7788 00005F45 BF[D4600000]        <2> 		mov edi, scancode
  7789                              <2> 	searchscan: 
  7790 00005F4A 80FB3A              <2> 		cmp bl, 3Ah
  7791 00005F4D 7314                <2> 		jae scanother
  7792 00005F4F C1E004              <2> 		shl eax, 4
  7793 00005F52 01C7                <2> 		add edi, eax
  7794 00005F54 668B07              <2> 		mov ax, [edi]
  7795 00005F57 663D0000            <2> 		cmp ax, 0
  7796 00005F5B 7406                <2> 		je scanother
  7797 00005F5D E9D0000000          <2> 		jmp scanfound
  7798 00005F62 00                  <2> uppercase db 0
  7799                              <2> scanother:
  7800 00005F63 6631C0              <2> 		xor ax, ax
  7801 00005F66 66A3[E1230000]      <2> 		mov [lastkey], ax
  7802 00005F6C 80FBE0              <2> 		cmp bl, 0E0h
  7803 00005F6F 0F8477000000        <2> 		je near getkeyspecial
  7804 00005F75 803D[FA5E0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7805 00005F7C 7525                <2> 		jne nospecialkey
  7806 00005F7E 80FB38              <2> 		cmp bl, 38h
  7807 00005F81 0F849A000000        <2> 		je near alton
  7808 00005F87 80FBB8              <2> 		cmp bl, 0B8h
  7809 00005F8A 0F8499000000        <2> 		je near altoff
  7810 00005F90 80FB1D              <2> 		cmp bl, 1Dh
  7811 00005F93 0F8478000000        <2> 		je near ctron
  7812 00005F99 80FB9D              <2> 		cmp bl, 9Dh
  7813 00005F9C 0F8477000000        <2> 		je near ctroff
  7814 00005FA2 C3                  <2> 		ret
  7815                              <2> nospecialkey:
  7816 00005FA3 80FB2A              <2> 		cmp bl, 2Ah
  7817 00005FA6 0F8455000000        <2> 		je near shifton
  7818 00005FAC 80FB36              <2> 		cmp bl, 36h
  7819 00005FAF 0F844C000000        <2> 		je near shifton
  7820 00005FB5 80FB1C              <2> 		cmp bl, 1Ch
  7821 00005FB8 0F8473000000        <2> 		je near entdown
  7822 00005FBE 80FBAA              <2> 		cmp bl, 0AAh
  7823 00005FC1 0F8442000000        <2> 		je near shiftoff
  7824 00005FC7 80FBB6              <2> 		cmp bl, 0B6h
  7825 00005FCA 0F8439000000        <2> 		je near shiftoff
  7826 00005FD0 80FB3A              <2> 		cmp bl, 3Ah
  7827 00005FD3 0F84A7000000        <2> 		je near capslock
  7828 00005FD9 80FB45              <2> 		cmp bl, 0x45
  7829 00005FDC 0F84AF000000        <2> 		je near numlock
  7830 00005FE2 80FB46              <2> 		cmp bl, 0x46
  7831 00005FE5 0F84BE000000        <2> 		je near scrolllock
  7832 00005FEB C3                  <2> 		ret
  7833                              <2> 	getkeyspecial:
  7834 00005FEC C605[FA5E0000]E0    <2> 		mov byte [specialkey], 0xE0
  7835 00005FF3 E940FFFFFF          <2> 		jmp calckey
  7836                              <2> 	shift:
  7837 00005FF8 A0[625F0000]        <2> 		mov al, [uppercase]
  7838 00005FFD 3C01                <2> 		cmp al, 1
  7839 00005FFF 7308                <2> 		jae shiftoff
  7840                              <2> 	shifton:
  7841 00006001 C605[625F0000]01    <2> 		mov byte [uppercase], 1
  7842 00006008 C3                  <2> 		ret
  7843                              <2> 	shiftoff:
  7844 00006009 C605[625F0000]00    <2> 		mov byte [uppercase], 0
  7845 00006010 C3                  <2> 		ret
  7846                              <2> 	ctron:
  7847 00006011 C605[7F600000]01    <2> 		mov byte [ctrkey], 1
  7848 00006018 C3                  <2> 		ret
  7849                              <2> 	ctroff:
  7850 00006019 C605[7F600000]00    <2> 		mov byte [ctrkey], 0
  7851 00006020 C3                  <2> 		ret
  7852                              <2> 	alton:
  7853 00006021 C605[7E600000]01    <2> 		mov byte [altkey], 1
  7854 00006028 C3                  <2> 		ret
  7855                              <2> 	altoff:
  7856 00006029 C605[7E600000]00    <2> 		mov byte [altkey], 0
  7857 00006030 C3                  <2> 		ret
  7858                              <2> 	entdown:
  7859 00006031 C3                  <2> 		ret
  7860                              <2> scanfound:
  7861 00006032 81C708000000        <2> 		add edi, 8
  7862 00006038 803D[7F600000]01    <2> 		cmp byte [ctrkey], 1
  7863 0000603F 7306                <2> 		jae ctrlin
  7864 00006041 81EF08000000        <2> 		sub edi, 8
  7865                              <2> 	ctrlin:
  7866 00006047 81C704000000        <2> 		add edi, 4
  7867 0000604D 803D[7E600000]01    <2> 		cmp byte [altkey], 1
  7868 00006054 7306                <2> 		jae altin
  7869 00006056 81EF04000000        <2> 		sub edi, 4
  7870                              <2> 	altin:
  7871 0000605C 81C702000000        <2> 		add edi, 2
  7872 00006062 803D[625F0000]01    <2> 		cmp byte [uppercase], 1
  7873 00006069 7306                <2> 		jae uppercaseon
  7874 0000606B 81EF02000000        <2> 		sub edi, 2
  7875                              <2> 	uppercaseon:
  7876 00006071 668B07              <2> 		mov ax,[edi]
  7877 00006074 66A3[E1230000]      <2> 		mov [lastkey], ax
  7878 0000607A C3                  <2> 		ret
  7879                              <2> 		
  7880 0000607B 00                  <2> keyboardstatus db 0
  7881 0000607C 00                  <2> numlockstatus db 0
  7882 0000607D 00                  <2> scrolllockstatus db 0
  7883 0000607E 00                  <2> altkey db 0
  7884 0000607F 00                  <2> ctrkey db 0
  7885                              <2> 	capslock:
  7886 00006080 8035[7B600000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7887 00006087 E835000000          <2> 		call updatekblights
  7888 0000608C E967FFFFFF          <2> 		jmp shift
  7889                              <2> 		
  7890                              <2> 	numlock:
  7891 00006091 8035[7B600000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7892 00006098 8035[7C600000]01    <2> 		xor byte [numlockstatus], 1
  7893 0000609F E81D000000          <2> 		call updatekblights
  7894 000060A4 E975FEFFFF          <2> 		jmp getkey
  7895                              <2> 	
  7896                              <2> 	scrolllock:
  7897 000060A9 8035[7B600000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7898 000060B0 8035[7D600000]01    <2> 		xor byte [scrolllockstatus], 1
  7899 000060B7 E805000000          <2> 		call updatekblights
  7900 000060BC E95DFEFFFF          <2> 		jmp getkey
  7901                              <2> 		
  7902                              <2> 	updatekblights:
  7903 000060C1 B0ED                <2> 		mov al, 0xED
  7904 000060C3 66BA6000            <2> 		mov dx, 0x60
  7905 000060C7 EE                  <2> 		out dx, al
  7906                              <2> 	chkkbdack:
  7907 000060C8 EC                  <2> 		in al, dx
  7908 000060C9 3CFA                <2> 		cmp al, 0xFA
  7909 000060CB 75FB                <2> 		jne chkkbdack
  7910 000060CD A0[7B600000]        <2> 		mov al, [keyboardstatus]
  7911 000060D2 EE                  <2> 		out dx, al
  7912 000060D3 C3                  <2> 		ret
  7913                              <2> 		
  7914                              <2> scancode:
  7915                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  7916 000060D4 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7917 000060DD 00000000000000      <2>
  7918 000060E4 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7919 000060ED 00000000000000      <2>
  7920 000060F4 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  7921 000060FD 00000000000000      <2>
  7922 00006104 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  7923 0000610D 00000000000000      <2>
  7924 00006114 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  7925 0000611D 00000000000000      <2>
  7926 00006124 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  7927 0000612D 00000000000000      <2>
  7928 00006134 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  7929 0000613D 00000000000000      <2>
  7930 00006144 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  7931 0000614D 00000000000000      <2>
  7932 00006154 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  7933 0000615D 00000000000000      <2>
  7934 00006164 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  7935 0000616D 00000000000000      <2>
  7936 00006174 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  7937 0000617D 00000000000000      <2>
  7938 00006184 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  7939 0000618D 00000000000000      <2>
  7940 00006194 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  7941 0000619D 00000000000000      <2>
  7942 000061A4 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  7943 000061AD 00000000000000      <2>
  7944 000061B4 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  7945 000061BD 00000000000000      <2>
  7946 000061C4 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7947 000061CD 00000000000000      <2>
  7948 000061D4 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  7949 000061DC 003A0039041904      <2>
  7950 000061E4 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  7951 000061ED 03000046042604      <2>
  7952 000061F4 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  7953 000061FD 03950343042304      <2>
  7954 00006204 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  7955 0000620D 03A1033A041A04      <2>
  7956 00006214 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  7957 0000621D 03A40335041504      <2>
  7958 00006224 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  7959 0000622D 03A5033D041D04      <2>
  7960 00006234 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  7961 0000623D 03980333041304      <2>
  7962 00006244 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  7963 0000624D 03990348042804      <2>
  7964 00006254 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  7965 0000625D 039F0349042904      <2>
  7966 00006264 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  7967 0000626D 03A00337041704      <2>
  7968 00006274 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  7969 0000627D 00000045042504      <2>
  7970 00006284 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  7971 0000628D 0000004A042A04      <2>
  7972 00006294 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7973 0000629D 00000000000000      <2>
  7974 000062A4 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7975 000062AD 00000000000000      <2>
  7976 000062B4 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  7977 000062BD 03910344042404      <2>
  7978 000062C4 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  7979 000062CD 03A3034B042B04      <2>
  7980 000062D4 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  7981 000062DD 03940332041204      <2>
  7982 000062E4 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  7983 000062ED 03A60330041004      <2>
  7984 000062F4 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  7985 000062FD 0393033F041F04      <2>
  7986 00006304 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  7987 0000630D 03970340042004      <2>
  7988 00006314 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  7989 0000631D 039E033E041E04      <2>
  7990 00006324 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  7991 0000632D 039A033B041B04      <2>
  7992 00006334 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  7993 0000633D 039B0334041404      <2>
  7994 00006344 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  7995 0000634D 00000036041604      <2>
  7996 00006354 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  7997 0000635D 0000004D042D04      <2>
  7998 00006364 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  7999 0000636D 00000051040104      <2>
  8000 00006374 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8001 0000637D 00000000000000      <2>
  8002 00006384 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  8003 0000638D 0000002F005C00      <2>
  8004 00006394 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  8005 0000639D 0396034F042F04      <2>
  8006 000063A4 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  8007 000063AD 03A70347042704      <2>
  8008 000063B4 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  8009 000063BD 03A80341042104      <2>
  8010 000063C4 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  8011 000063CD 03A9033C041C04      <2>
  8012 000063D4 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  8013 000063DD 03920338041804      <2>
  8014 000063E4 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  8015 000063ED 039D0342042204      <2>
  8016 000063F4 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  8017 000063FD 039C034C042C04      <2>
  8018 00006404 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  8019 0000640D 00000031041104      <2>
  8020 00006414 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  8021 0000641D 0000004E042E04      <2>
  8022 00006424 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  8023 0000642D 0000002E002C00      <2>
  8024 00006434 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8025 0000643D 00000000000000      <2>
  8026 00006444 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8027 0000644D 00000000000000      <2>
  8028 00006454 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8029 0000645D 00000000000000      <2>
  8030 00006464 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  8031 0000646D 00000000000000      <2>
  8032                              <2> noscan:
  8033                              <2> 
  8034                              <1> %endif
  8035                              <1> ;drivers will soon be handled intelligently
  8036                              <1> ;every driver's source will be scanned for a .init function
  8037                              <1> ;that will be called and if it returns 0
  8038                              <1> ;the hardware was found and the driver initialized properly
  8039                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  8040                              <1> 	%ifdef sound.included
  8041 00006474 E840F8FFFF          <1> 		call sblaster.init
  8042                              <1> 	%endif
  8043                              <1> 	%ifdef network.included
  8044                              <1> 		call network.init
  8045                              <1> 	%endif
  8046 00006479 C3                  <1> 	ret
  8047                              <1> initialize:
  8048                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  8049 0000647A E83E000000          <1> 	call .pic
  8050                              <1> %ifdef terminal.vsync
  8051 0000647F E866000000          <1> 	call .rtc
  8052                              <1> %endif
  8053 00006484 E896000000          <1> 	call .pit
  8054 00006489 E8B8000000          <1> 	call .fpu
  8055 0000648E E8C9000000          <1> 	call .sse
  8056 00006493 31C0                <1> 	xor eax, eax
  8057 00006495 31C9                <1> 	xor ecx, ecx
  8058                              <1> %ifdef io.serial
  8059                              <1> 	call serial.init
  8060                              <1> %endif
  8061 00006497 E801000000          <1> 	call .time
  8062 0000649C C3                  <1> 	ret
  8063                              <1> 	
  8064                              <1> .time:
  8065 0000649D E815DDFFFF          <1> 	call time
  8066 000064A2 E8BDDEFFFF          <1> 	call timeconvert
  8067 000064A7 890D[6B020000]      <1> 	mov [timeseconds], ecx
  8068 000064AD 31C9                <1> 	xor ecx, ecx
  8069 000064AF 890D[6F020000]      <1> 	mov [timenanoseconds], ecx
  8070 000064B5 C605[FF400000]01    <1> 	mov byte [istimeset], 1
  8071 000064BC C3                  <1> 	ret
  8072                              <1> 	
  8073                              <1> .pic:
  8074 000064BD B011                <1> 	mov al, 0x11
  8075 000064BF E620                <1> 	out 0x20, al
  8076 000064C1 E6A0                <1> 	out 0xA0, al
  8077 000064C3 B040                <1> 	mov al, 0x40	;interrupt for master
  8078 000064C5 E621                <1> 	out 0x21, al
  8079 000064C7 B048                <1> 	mov al, 0x48	;interrupt for slave
  8080 000064C9 E6A1                <1> 	out 0xA1, al
  8081 000064CB B004                <1> 	mov al, 4
  8082 000064CD E621                <1> 	out 0x21, al
  8083 000064CF B002                <1> 	mov al, 2
  8084 000064D1 E6A1                <1> 	out 0xA1, al
  8085 000064D3 B001                <1> 	mov al, 0x1
  8086 000064D5 E621                <1> 	out 0x21, al
  8087 000064D7 B001                <1> 	mov al, 0x1
  8088 000064D9 E6A1                <1> 	out 0xA1, al
  8089                              <1> 	;masks are set to zero so as not to mask
  8090 000064DB 30C0                <1> 	xor al, al
  8091 000064DD E621                <1> 	out 0x21, al
  8092 000064DF 30C0                <1> 	xor al, al
  8093 000064E1 E6A1                <1> 	out 0xA1, al
  8094 000064E3 B020                <1> 	mov al, 0x20
  8095 000064E5 E6A0                <1> 	out 0xA0, al
  8096 000064E7 E620                <1> 	out 0x20, al
  8097 000064E9 C3                  <1> 	ret
  8098                              <1> .rtc:
  8099 000064EA B008                <1> 	mov al, 0x8
  8100 000064EC 88C4                <1> 	mov ah, al
  8101 000064EE 66BA7000            <1> 	mov dx, 0x70
  8102 000064F2 EE                  <1> 	out dx, al
  8103 000064F3 6642                <1> 	inc dx
  8104 000064F5 EC                  <1> 	in al, dx
  8105 000064F6 86C4                <1> 	xchg al, ah
  8106 000064F8 664A                <1> 	dec dx
  8107 000064FA EE                  <1> 	out dx, al
  8108 000064FB 6642                <1> 	inc dx
  8109 000064FD 86C4                <1> 	xchg al, ah
  8110 000064FF 0C40                <1> 	or al, 0x40
  8111 00006501 EE                  <1> 	out dx, al
  8112                              <1> 	
  8113 00006502 B00A                <1> 	mov al, 0xA
  8114 00006504 664A                <1> 	dec dx
  8115 00006506 EE                  <1> 	out dx, al
  8116 00006507 86C4                <1> 	xchg al, ah
  8117 00006509 6642                <1> 	inc dx
  8118 0000650B EC                  <1> 	in al, dx
  8119 0000650C 24F0                <1> 	and al, 0xF0
  8120 0000650E 0A05[27030000]      <1> 	or al, [rtcrate]
  8121 00006514 86C4                <1> 	xchg al, ah
  8122 00006516 664A                <1> 	dec dx
  8123 00006518 EE                  <1> 	out dx, al
  8124 00006519 6642                <1> 	inc dx
  8125 0000651B 86C4                <1> 	xchg al, ah
  8126 0000651D EE                  <1> 	out dx, al
  8127 0000651E C3                  <1> 	ret
  8128                              <1> 	
  8129                              <1> .pit:
  8130                              <1> 	;initialize the PIT
  8131 0000651F 66A1[64020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  8132 00006525 E640                <1> 	out 0x40, al
  8133 00006527 66C1C008            <1> 	rol ax, 8
  8134 0000652B E640                <1> 	out 0x40, al
  8135                              <1> 	;enable rtc interrupt
  8136 0000652D B00B                <1> 	mov al, 0xB
  8137 0000652F E670                <1> 	out 0x70, al
  8138 00006531 66C1C008            <1> 	rol ax, 8
  8139 00006535 E471                <1> 	in al, 0x71
  8140 00006537 66C1C008            <1> 	rol ax, 8
  8141 0000653B E670                <1> 	out 0x70, al
  8142 0000653D 66C1C008            <1> 	rol ax, 8
  8143 00006541 0C40                <1> 	or al, 0x40
  8144 00006543 E671                <1> 	out 0x71, al
  8145 00006545 C3                  <1> 	ret
  8146                              <1> .fpu:
  8147                              <1> 	;And now to initialize the fpu
  8148 00006546 0F20E0              <1> 	mov eax, cr4
  8149 00006549 0D00020000          <1> 	or eax, 0x200
  8150 0000654E 0F22E0              <1> 	mov cr4, eax
  8151 00006551 B87F0B0000          <1> 	mov eax, 0xB7F
  8152 00006556 50                  <1> 	push eax
  8153 00006557 D92C24              <1> 	fldcw [esp]
  8154 0000655A 58                  <1> 	pop eax
  8155 0000655B C3                  <1> 	ret
  8156                              <1> 	
  8157                              <1> .sse:
  8158 0000655C 0F20C0              <1> 	mov eax, cr0
  8159 0000655F 24FB                <1> 	and al, 11111011b
  8160 00006561 0C02                <1> 	or al, 00000010b
  8161 00006563 0F22C0              <1> 	mov cr0, eax
  8162 00006566 0F20E0              <1> 	mov eax, cr4
  8163 00006569 660D0006            <1> 	or ax, 0000011000000000b
  8164 0000656D 0F22E0              <1> 	mov cr4, eax
  8165 00006570 C3                  <1> 	ret
  8166                                      %include "source/pci.asm"
  8167 00006571 00                  <1> pcibus		db 0
  8168 00006572 00                  <1> pcidevice	db 0
  8169 00006573 00                  <1> pcifunction	db 0
  8170 00006574 00                  <1> pciregister	db 0
  8171 00006575 00                  <1> pcireqtype	db 0
  8172 00006576 00000000            <1> pcidevid	dd 0
  8173 0000657A FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  8174                              <1> getpcimem:
  8175 0000657E B002                <1> 	mov al, 2
  8176 00006580 A2[75650000]        <1> 	mov [pcireqtype], al
  8177 00006585 E922000000          <1> 	jmp searchpci
  8178                              <1> getpciport:
  8179 0000658A B001                <1> 	mov al, 1
  8180 0000658C A2[75650000]        <1> 	mov [pcireqtype], al
  8181 00006591 E916000000          <1> 	jmp searchpci
  8182                              <1> pcidump:
  8183 00006596 31C0                <1> 	xor eax, eax
  8184 00006598 A2[73650000]        <1> 	mov [pcifunction], al
  8185 0000659D A2[71650000]        <1> 	mov [pcibus], al
  8186 000065A2 A2[72650000]        <1> 	mov [pcidevice], al
  8187 000065A7 A2[75650000]        <1> 	mov [pcireqtype], al
  8188                              <1> searchpci:		;return in ebx, start X in pciX
  8189 000065AC 30C0                <1> 	xor al, al
  8190 000065AE A2[74650000]        <1> 	mov [pciregister], al
  8191 000065B3 E823020000          <1> 	call getpciaddr
  8192 000065B8 BAF80C0000          <1> 	mov edx, 0xCF8
  8193 000065BD EF                  <1> 	out dx, eax	;request pci config
  8194 000065BE BAFC0C0000          <1> 	mov edx, 0xCFC
  8195 000065C3 ED                  <1> 	in eax, dx 	;read in pci config
  8196 000065C4 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  8197 000065C9 0F823D000000        <1> 	jb near checkpcidevice
  8198                              <1> searchpciret:
  8199                              <1> nextpcidevice:
  8200 000065CF 30C0                <1> 	xor al, al
  8201 000065D1 A2[73650000]        <1> 	mov [pcifunction], al
  8202 000065D6 A0[72650000]        <1> 	mov al, [pcidevice]
  8203 000065DB 3C1F                <1> 	cmp al, 11111b
  8204 000065DD 0F8306010000        <1> 	jae near nextpcibus
  8205 000065E3 FEC0                <1> 	inc al
  8206 000065E5 A2[72650000]        <1> 	mov [pcidevice], al
  8207 000065EA E9BDFFFFFF          <1> 	jmp searchpci
  8208 000065EF A0[73650000]        <1> 	mov al, [pcifunction]
  8209 000065F4 3C07                <1> 	cmp al, 111b
  8210 000065F6 0F83D3FFFFFF        <1> 	jae near nextpcidevice
  8211 000065FC FEC0                <1> 	inc al
  8212 000065FE A2[73650000]        <1> 	mov [pcifunction], al
  8213 00006603 E9A4FFFFFF          <1> 	jmp searchpci
  8214 00006608 00000000            <1> pcitype: db 0,0,0,0
  8215                              <1> checkpcidevice:
  8216 0000660C 31C0                <1> 	xor eax, eax
  8217 0000660E 3905[76650000]      <1> 	cmp [pcidevid], eax
  8218 00006614 0F8430000000        <1> 	je near .good
  8219 0000661A A2[74650000]        <1> 	mov [pciregister], al	;device id, vendor id
  8220 0000661F E8B7010000          <1> 	call getpciaddr
  8221 00006624 BAF80C0000          <1> 	mov edx, 0xCF8
  8222 00006629 EF                  <1> 	out dx, eax
  8223 0000662A BAFC0C0000          <1> 	mov edx, 0xCFC
  8224 0000662F ED                  <1> 	in eax, dx
  8225 00006630 2305[7A650000]      <1> 	and eax, [pcidevidmask]
  8226 00006636 8B1D[76650000]      <1> 	mov ebx, [pcidevid]
  8227 0000663C 231D[7A650000]      <1> 	and ebx, [pcidevidmask]
  8228 00006642 39D8                <1> 	cmp eax, ebx
  8229 00006644 0F8585FFFFFF        <1> 	jne near searchpciret
  8230                              <1> .good:
  8231 0000664A 30C0                <1> 	xor al, al
  8232 0000664C 3805[75650000]      <1> 	cmp [pcireqtype], al
  8233 00006652 0F842C000000        <1> 	je near dumppcidevice
  8234 00006658 B008                <1> 	mov al, 0x08
  8235 0000665A A2[74650000]        <1> 	mov [pciregister], al	;class code, subclass, revision id
  8236 0000665F E877010000          <1> 	call getpciaddr
  8237 00006664 BAF80C0000          <1> 	mov edx, 0xCF8
  8238 00006669 EF                  <1> 	out dx, eax
  8239 0000666A BAFC0C0000          <1> 	mov edx, 0xCFC
  8240 0000666F ED                  <1> 	in eax, dx
  8241 00006670 C1C008              <1> 	rol eax, 8
  8242 00006673 3A05[08660000]      <1> 	cmp al, [pcitype]
  8243 00006679 0F84A0000000        <1> 	je near foundpciaddr
  8244 0000667F E94BFFFFFF          <1> 	jmp searchpciret
  8245                              <1> dumppcidevice:
  8246 00006684 30C0                <1> 	xor al, al
  8247 00006686 A2[74650000]        <1> 	mov [pciregister], al
  8248 0000668B E84B010000          <1> 	call getpciaddr
  8249 00006690 89C1                <1> 	mov ecx, eax
  8250 00006692 C605[77320000]05    <1> 	mov byte [firsthexshown], 5
  8251 00006699 E8EECBFFFF          <1> 	call showhex
  8252                              <1> dumppcidevicelp:
  8253 0000669E A2[74650000]        <1> 	mov [pciregister], al
  8254 000066A3 E833010000          <1> 	call getpciaddr
  8255 000066A8 BAF80C0000          <1> 	mov edx, 0xCF8
  8256 000066AD EF                  <1> 	out dx, eax
  8257 000066AE BAFC0C0000          <1> 	mov edx, 0xCFC
  8258 000066B3 ED                  <1> 	in eax, dx
  8259 000066B4 89C1                <1> 	mov ecx, eax
  8260 000066B6 A0[74650000]        <1> 	mov al, [pciregister]
  8261 000066BB 0404                <1> 	add al, 4
  8262 000066BD C605[77320000]05    <1> 	mov byte [firsthexshown], 5
  8263 000066C4 E8C3CBFFFF          <1> 	call showhex
  8264 000066C9 3C3C                <1> 	cmp al, 0x3C
  8265 000066CB 72D1                <1> 	jb dumppcidevicelp
  8266                              <1> dumppcidn:
  8267                              <1> %ifdef io.serial
  8268                              <1> 	mov esi, line
  8269                              <1> 	call print
  8270                              <1> %else
  8271 000066CD 803D[07260000]00    <1> 	cmp byte [charpos], 0
  8272 000066D4 0F84F5FEFFFF        <1> 	je near searchpciret
  8273 000066DA BE[B4890000]        <1> 	mov esi, line
  8274 000066DF E881B6FFFF          <1> 	call print
  8275                              <1> %endif
  8276 000066E4 E9E6FEFFFF          <1> 	jmp searchpciret
  8277                              <1> nextpcibus:
  8278 000066E9 30C0                <1> 	xor al, al
  8279 000066EB A2[72650000]        <1> 	mov [pcidevice], al
  8280 000066F0 A0[71650000]        <1> 	mov al, [pcibus]
  8281 000066F5 3C7F                <1> 	cmp al, 1111111b
  8282 000066F7 730C                <1> 	jae donesearchpci
  8283 000066F9 FEC0                <1> 	inc al
  8284 000066FB A2[71650000]        <1> 	mov [pcibus], al
  8285 00006700 E9A7FEFFFF          <1> 	jmp searchpci
  8286                              <1> donesearchpci:
  8287 00006705 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  8288 0000670A 31D2                <1> 	xor edx, edx
  8289 0000670C 8815[08660000]      <1> 	mov [pcitype], dl
  8290 00006712 8915[76650000]      <1> 	mov [pcidevid], edx
  8291 00006718 891D[7A650000]      <1> 	mov [pcidevidmask], ebx
  8292 0000671E C3                  <1> 	ret
  8293                              <1> foundpciaddr:
  8294 0000671F B010                <1> 	mov al, 0x10
  8295 00006721 A2[74650000]        <1> 	mov [pciregister], al
  8296 00006726 803D[75650000]02    <1> 	cmp byte [pcireqtype], 2
  8297 0000672D 7443                <1> 	je findpcimemaddr
  8298                              <1> findpciioaddr:
  8299 0000672F E8A7000000          <1> 	call getpciaddr
  8300 00006734 BAF80C0000          <1> 	mov edx, 0xCF8
  8301 00006739 EF                  <1> 	out dx, eax
  8302 0000673A BAFC0C0000          <1> 	mov edx, 0xCFC
  8303 0000673F ED                  <1> 	in eax, dx
  8304 00006740 89C3                <1> 	mov ebx, eax
  8305 00006742 81E301000000        <1> 	and ebx, 1
  8306 00006748 81FB00000000        <1> 	cmp ebx, 0
  8307 0000674E 0F846E000000        <1> 	je near notpciioaddr
  8308 00006754 2D01000000          <1> 	sub eax, 1
  8309 00006759 89C2                <1> 	mov edx, eax
  8310 0000675B 31DB                <1> 	xor ebx, ebx
  8311 0000675D 4B                  <1> 	dec ebx
  8312 0000675E 891D[7A650000]      <1> 	mov [pcidevidmask], ebx
  8313 00006764 43                  <1> 	inc ebx
  8314 00006765 881D[08660000]      <1> 	mov [pcitype], bl
  8315 0000676B 891D[76650000]      <1> 	mov [pcidevid], ebx
  8316 00006771 C3                  <1> 	ret
  8317                              <1> findpcimemaddr:
  8318 00006772 E864000000          <1> 	call getpciaddr
  8319 00006777 BAF80C0000          <1> 	mov edx, 0xCF8
  8320 0000677C EF                  <1> 	out dx, eax
  8321 0000677D BAFC0C0000          <1> 	mov edx, 0xCFC
  8322 00006782 ED                  <1> 	in eax, dx
  8323 00006783 89C3                <1> 	mov ebx, eax
  8324 00006785 81E301000000        <1> 	and ebx, 1
  8325 0000678B 81FB01000000        <1> 	cmp ebx, 1
  8326 00006791 0F842B000000        <1> 	je near notpciioaddr
  8327 00006797 C1E804              <1> 	shr eax, 4
  8328 0000679A C1E004              <1> 	shl eax, 4	;remove prefetch and type
  8329 0000679D 89C2                <1> 	mov edx, eax
  8330 0000679F 50                  <1> 	push eax
  8331 000067A0 A1[4B020000]        <1> 	mov eax, [basecache]
  8332 000067A5 C1E004              <1> 	shl eax, 4
  8333 000067A8 29C2                <1> 	sub edx, eax
  8334 000067AA 58                  <1> 	pop eax
  8335 000067AB 31DB                <1> 	xor ebx, ebx
  8336 000067AD 4B                  <1> 	dec ebx
  8337 000067AE 891D[7A650000]      <1> 	mov [pcidevidmask], ebx
  8338 000067B4 43                  <1> 	inc ebx
  8339 000067B5 881D[08660000]      <1> 	mov [pcitype], bl
  8340 000067BB 891D[76650000]      <1> 	mov [pcidevid], ebx
  8341 000067C1 C3                  <1> 	ret
  8342                              <1> notpciioaddr:
  8343 000067C2 A0[74650000]        <1> 	mov al, [pciregister]
  8344 000067C7 0404                <1> 	add al, 4
  8345 000067C9 3C28                <1> 	cmp al, 0x28
  8346 000067CB 0F87FEFDFFFF        <1> 	ja near searchpciret
  8347 000067D1 A2[74650000]        <1> 	mov [pciregister], al
  8348 000067D6 E954FFFFFF          <1> 	jmp findpciioaddr
  8349                              <1> getpciaddr:		;puts it in eax and ebx
  8350 000067DB 31C0                <1> 			xor eax, eax
  8351 000067DD BB00000080          <1> 			mov ebx, 0x80000000
  8352 000067E2 A0[71650000]        <1> 			mov al, [pcibus]
  8353 000067E7 C1E010              <1> 			shl eax, 16
  8354 000067EA 01C3                <1> 			add ebx, eax
  8355 000067EC 31C0                <1> 			xor eax, eax
  8356 000067EE A0[72650000]        <1> 			mov al, [pcidevice]
  8357 000067F3 C1E00B              <1> 			shl eax, 11
  8358 000067F6 01C3                <1> 			add ebx, eax
  8359 000067F8 31C0                <1> 			xor eax, eax
  8360 000067FA A0[73650000]        <1> 			mov al, [pcifunction]
  8361 000067FF C1E008              <1> 			shl eax, 8
  8362 00006802 01C3                <1> 			add ebx, eax
  8363 00006804 31C0                <1> 			xor eax, eax
  8364 00006806 A0[74650000]        <1> 			mov al, [pciregister]
  8365 0000680B 01C3                <1> 			add ebx, eax
  8366 0000680D 89D8                <1> 			mov eax, ebx
  8367 0000680F C3                  <1> 			ret
  8368                                      %include "source/disk.asm"
  8369                              <1> %ifdef disk.real
  8370                              <1> 	%include "source/drivers/disk/realmode.asm"
  8371                              <2> diskr:
  8372                              <2> 			;sector count in cl
  8373                              <2> 			;disk number in ch
  8374                              <2> 			;48 bit address with last 32 bits in ebx
  8375                              <2> 			;buffer in esi
  8376                              <2> 			;puts end of buffer in edi and end lba address in edx
  8377 00006810 880D[37680000]      <2> 	mov [sdlength], cl
  8378 00006816 891D[38680000]      <2> 	mov [sdaddress], ebx
  8379 0000681C 8935[B9690000]      <2> 	mov [oldesireal], esi
  8380 00006822 66BE[3C68]          <2> 	mov si, readdiskreal
  8381 00006826 668935[020D0000]    <2> 	mov [realmodeptr], si
  8382 0000682D E8BEA3FFFF          <2> 	call realmode
  8383 00006832 E941000000          <2> 	jmp backfromrealread
  8384 00006837 00                  <2> sdlength db 0
  8385 00006838 00000000            <2> sdaddress dd 0
  8386                              <2> 
  8387                              <2> [BITS 16]
  8388                              <2> readdiskreal:
  8389 0000683C C706[6868]1000      <2> 	mov word [dlen], 0x10
  8390 00006842 C706[6C68]0000      <2> 	mov word [daddress], 0
  8391 00006848 C706[6E68]0001      <2> 	mov word [dsegm], 0x100
  8392 0000684E 66891E[7068]        <2> 	mov [dlbaad], ebx
  8393 00006853 880E[6A68]          <2> 	mov [dreadlen], cl
  8394                              <2> ReadHardDisk:
  8395 00006857 BE[6868]            <2> 	mov si, diskaddresspacket
  8396 0000685A 31C0                <2> 	xor ax, ax
  8397 0000685C B442                <2> 	mov ah, 0x42
  8398 0000685E 8A16[6768]          <2> 	mov dl, [dnumber]
  8399 00006862 CD13                <2> 	int 0x13
  8400 00006864 72F1                <2> 	jc ReadHardDisk
  8401 00006866 C3                  <2> 	ret
  8402                              <2> 
  8403 00006867 80                  <2> dnumber db 0x80
  8404                              <2> diskaddresspacket:
  8405 00006868 10                  <2> dlen:	db 0x10 ;size of packet
  8406 00006869 00                  <2> 		db 0
  8407 0000686A 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8408 0000686C 0000                <2> daddress:	dw 0	;address 0
  8409 0000686E 0001                <2> dsegm:		dw 0x100	;segment
  8410                              <2> 		;start with known value for hd
  8411                              <2> dlbaad:
  8412 00006870 00000000            <2> 	dd 0	;lba address
  8413 00006874 00000000            <2> 	dd 0
  8414                              <2> [BITS 32]
  8415                              <2> backfromrealread:
  8416 00006878 8B35[B9690000]      <2> 	mov esi, [oldesireal]
  8417 0000687E 8B1D[38680000]      <2> 	mov ebx, [sdaddress]
  8418 00006884 31C9                <2> 	xor ecx, ecx
  8419 00006886 8A0D[37680000]      <2> 	mov cl, [sdlength]
  8420 0000688C 01CB                <2> 	add ebx, ecx
  8421 0000688E 66B80800            <2> 	mov ax, LINEAR_SEL
  8422 00006892 8EE0                <2> 	mov fs, ax
  8423 00006894 BF00100000          <2> 	mov edi, 0x1000
  8424 00006899 B200                <2> 	mov dl, 0
  8425 0000689B D0E1                <2> 	shl cl, 1
  8426                              <2> copyfromrmodedisk:
  8427 0000689D 648A07              <2> 	mov al, [fs:edi]
  8428 000068A0 8806                <2> 	mov [esi], al
  8429 000068A2 47                  <2> 	inc edi
  8430 000068A3 46                  <2> 	inc esi
  8431 000068A4 FECA                <2> 	dec dl
  8432 000068A6 80FA00              <2> 	cmp dl, 0
  8433 000068A9 75F2                <2> 	jne copyfromrmodedisk
  8434 000068AB FEC9                <2> 	dec cl
  8435 000068AD B200                <2> 	mov dl, 0
  8436 000068AF 80F900              <2> 	cmp cl, 0
  8437 000068B2 75E9                <2> 	jne copyfromrmodedisk
  8438 000068B4 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8439 000068B8 8EE0                <2> 	mov fs, ax
  8440 000068BA 89F7                <2> 	mov edi, esi
  8441 000068BC 8B35[B9690000]      <2> 	mov esi, [oldesireal]
  8442 000068C2 89DA                <2> 	mov edx, ebx
  8443 000068C4 8B1D[38680000]      <2> 	mov ebx, [sdaddress]
  8444 000068CA C3                  <2> 	ret
  8445                              <2> 	
  8446                              <1> %else
  8447                              <1> 	%ifdef disk.protected
  8448                              <1> 		%include "source/drivers/disk/pata.asm"
  8449                              <1> 	%endif
  8450                              <1> %endif
  8451                              <1> %ifdef disk.none
  8452                              <1> loadfile:	xor edx, edx
  8453                              <1> 			cmp byte [edi], '&'
  8454                              <1> 			je .ret
  8455                              <1> 			mov edx, 404	;no files are found except &
  8456                              <1> 		.ret:
  8457                              <1> 			ret
  8458                              <1> %else
  8459                              <1> ;This loads files using the methods in the loaded driver
  8460                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8461                              <1> 			;returns with err code in edx and file end in edi
  8462 000068CB 803F00              <1> 	cmp byte [edi], 0
  8463 000068CE 0F8448000000        <1> 	je near nofileload
  8464 000068D4 89FA                <1> 	mov edx, edi
  8465 000068D6 BB[338C0300]        <1> 	mov ebx, diskfileindex
  8466                              <1> nextnamechar:
  8467 000068DB 8A07                <1> 	mov al, [edi]
  8468 000068DD 3C26                <1> 	cmp al, '&'
  8469 000068DF 7440                <1> 	je nullfile
  8470 000068E1 8A23                <1> 	mov ah, [ebx]
  8471 000068E3 47                  <1> 	inc edi
  8472 000068E4 43                  <1> 	inc ebx
  8473 000068E5 88C1                <1> 	mov cl, al
  8474 000068E7 08E1                <1> 	or cl, ah
  8475 000068E9 80F900              <1> 	cmp cl, 0
  8476 000068EC 746E                <1> 	je equalfilenames
  8477 000068EE 80F920              <1> 	cmp cl, ' '
  8478 000068F1 7469                <1> 	je equalfilenames
  8479 000068F3 3C2A                <1> 	cmp al, '*'
  8480 000068F5 742B                <1> 	je asteriskcheck
  8481 000068F7 80FC00              <1> 	cmp ah, 0
  8482 000068FA 7410                <1> 	je nextfilename
  8483 000068FC 3C00                <1> 	cmp al, 0
  8484 000068FE 7404                <1> 	je getebxzero
  8485 00006900 38E0                <1> 	cmp al, ah
  8486 00006902 74D7                <1> 	je nextnamechar
  8487                              <1> getebxzero:
  8488 00006904 8A23                <1> 	mov ah, [ebx]
  8489 00006906 43                  <1> 	inc ebx
  8490 00006907 80FC00              <1> 	cmp ah, 0
  8491 0000690A 75F8                <1> 	jne getebxzero
  8492                              <1> nextfilename:
  8493 0000690C 81C308000000        <1> 	add ebx, 8		;next descriptor
  8494 00006912 89D7                <1> 	mov edi, edx
  8495 00006914 81FB[298D0300]      <1> 	cmp ebx, enddiskfileindex
  8496 0000691A 72BF                <1> 	jb nextnamechar
  8497                              <1> nofileload:
  8498 0000691C BA94010000          <1> 	mov edx, 404	;indicate not found error
  8499                              <1> nullfile:
  8500 00006921 C3                  <1> 	ret
  8501                              <1> asteriskcheck:
  8502 00006922 4B                  <1> 	dec ebx
  8503 00006923 8A07                <1> 	mov al, [edi]
  8504 00006925 3C2A                <1> 	cmp al, '*'
  8505 00006927 74F9                <1> 	je asteriskcheck ;remove multiple asterisks
  8506 00006929 3C20                <1> 	cmp al, ' '
  8507 0000692B 7415                <1> 	je equalfilenames2
  8508 0000692D 3C00                <1> 	cmp al, 0
  8509 0000692F 7411                <1> 	je equalfilenames2
  8510                              <1> .lp:
  8511 00006931 8A23                <1> 	mov ah, [ebx]
  8512 00006933 80FC00              <1> 	cmp ah, 0
  8513 00006936 74D4                <1> 	je nextfilename
  8514 00006938 38E0                <1> 	cmp al, ah
  8515 0000693A 749F                <1> 	je nextnamechar
  8516 0000693C 43                  <1> 	inc ebx
  8517 0000693D E9EFFFFFFF          <1> 	jmp .lp
  8518                              <1> equalfilenames2:
  8519 00006942 81EB02000000        <1> 	sub ebx, 2
  8520                              <1> eqfilefind:
  8521 00006948 43                  <1> 	inc ebx
  8522 00006949 81FB[298D0300]      <1> 	cmp ebx, enddiskfileindex
  8523 0000694F 0F83C7FFFFFF        <1> 	jae near nofileload
  8524 00006955 8A03                <1> 	mov al, [ebx]
  8525 00006957 3C00                <1> 	cmp al, 0
  8526 00006959 75ED                <1> 	jne eqfilefind
  8527 0000695B 43                  <1> 	inc ebx
  8528                              <1> equalfilenames:
  8529 0000695C 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8530 0000695F 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8531 00006961 031D[DB890000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  8532 00006967 31C9                <1> 	xor ecx, ecx
  8533 00006969 88C1                <1> 	mov cl, al			;get excess number of sectors
  8534 0000696B C0E102              <1> 	shl cl, 2
  8535 0000696E C0E902              <1> 	shr cl, 2			;cut off at 64
  8536 00006971 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8537 00006973 B500                <1> 	mov ch, 0			;drive 0
  8538 00006975 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8539                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8540 00006978 A3[BD690000]        <1> 	mov [filetracks], eax
  8541 0000697D 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8542 0000697F 89DA                <1> 	mov edx, ebx
  8543 00006981 80F900              <1> 	cmp cl, 0
  8544 00006984 7405                <1> 	je copytracksforfile
  8545 00006986 E885FEFFFF          <1> 	call diskr	;take care of excess sectors
  8546                              <1> copytracksforfile:
  8547 0000698B A1[BD690000]        <1> 	mov eax, [filetracks]
  8548 00006990 3D00000000          <1> 	cmp eax, 0
  8549 00006995 741C                <1> 	je donecopyfile
  8550 00006997 48                  <1> 	dec eax
  8551 00006998 A3[BD690000]        <1> 	mov [filetracks], eax
  8552 0000699D 89D3                <1> 	mov ebx, edx	;get end lba
  8553 0000699F B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8554 000069A1 8A2D[DA890000]      <1> 	mov ch, [DriveNumber]
  8555 000069A7 89FE                <1> 	mov esi, edi	;reset buffer
  8556 000069A9 E862FEFFFF          <1> 	call diskr
  8557 000069AE E9D8FFFFFF          <1> 	jmp copytracksforfile
  8558                              <1> donecopyfile:
  8559 000069B3 BA00000000          <1> 	mov edx, 0	;no error
  8560 000069B8 C3                  <1> 	ret
  8561                              <1> 
  8562 000069B9 00000000            <1> oldesireal dd 0
  8563 000069BD 00000000            <1> filetracks dd 0
  8564 000069C1 00                  <1> lbad1 db 0
  8565 000069C2 00                  <1> lbad2 db 0
  8566 000069C3 00                  <1> lbad3 db 0
  8567 000069C4 00                  <1> lbad4 db 0
  8568 000069C5 00                  <1> lbad5 db 0
  8569 000069C6 00                  <1> lbad6 db 0
  8570 000069C7 6400                <1> segments dw 100
  8571                              <1> %endif
  8572                                      %include "source/threads.asm"
  8573                              <1> %ifdef threads.included	
  8574                              <1> nwcmdst:
  8575 000069C9 31C0                <1> 	xor eax, eax
  8576 000069CB BC[00AE0300]        <1> 	mov esp, stackend
  8577 000069D0 A2[8E6A0000]        <1> 	mov [threadson], al
  8578 000069D5 A3[8F6A0000]        <1> 	mov [currentthread], eax
  8579 000069DA 0504000000          <1> 	add eax, 4
  8580 000069DF A3[8A6A0000]        <1> 	mov [lastthread], eax
  8581 000069E4 FB                  <1> 	sti
  8582 000069E5 E994C3FFFF          <1> 	jmp nwcmd
  8583                              <1> 
  8584                              <1> nomorethreadspace:
  8585 000069EA BE[006A0000]        <1> 	mov esi, nmts
  8586 000069EF E871B3FFFF          <1> 	call print
  8587 000069F4 C605[8E6A0000]00    <1> 	mov byte [threadson], 0
  8588 000069FB E97EC3FFFF          <1> 	jmp nwcmd
  8589 00006A00 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8590 00006A09 6572666C6F770A00    <1>
  8591                              <1> 
  8592                              <1> nomorestackspace:
  8593 00006A11 BE[206A0000]        <1> 	mov esi, nmss
  8594 00006A16 E84AB3FFFF          <1> 	call print
  8595 00006A1B E9A9FFFFFF          <1> 	jmp nwcmdst
  8596 00006A20 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8597 00006A29 72666C6F770A00      <1>
  8598                              <1> 	
  8599                              <1> threadswitch:
  8600 00006A30 60                  <1> 	pushad 
  8601 00006A31 BF[3C9E2D00]        <1> 	mov edi, threadlist
  8602 00006A36 A1[8F6A0000]        <1> 	mov eax, [currentthread]
  8603 00006A3B 40                  <1> 	inc eax
  8604 00006A3C A3[8F6A0000]        <1> 	mov [currentthread], eax
  8605 00006A41 6648                <1> 	dec ax
  8606 00006A43 C1E002              <1> 	shl eax, 2
  8607 00006A46 01C7                <1> 	add edi, eax
  8608 00006A48 8927                <1> 	mov [edi], esp
  8609 00006A4A 81C704000000        <1> 	add edi, 4
  8610 00006A50 81FF[3CAE2D00]      <1> 	cmp edi, threadlistend
  8611 00006A56 0F830D000000        <1> 	jae near nookespthread
  8612 00006A5C 8B07                <1> 	mov eax, [edi]
  8613 00006A5E 3D00000000          <1> 	cmp eax, 0
  8614 00006A63 0F8519000000        <1> 	jne near okespthread
  8615                              <1> nookespthread:
  8616 00006A69 BF[3C9E2D00]        <1> 	mov edi, threadlist
  8617 00006A6E 31C0                <1> 	xor eax, eax
  8618 00006A70 A3[8F6A0000]        <1> 	mov [currentthread], eax
  8619 00006A75 8B07                <1> 	mov eax, [edi]
  8620 00006A77 3D00000000          <1> 	cmp eax, 0
  8621 00006A7C 0F8447FFFFFF        <1> 	je near nwcmdst
  8622                              <1> okespthread:
  8623 00006A82 89C4                <1> 	mov esp, eax
  8624 00006A84 B020                <1> 	mov al, 0x20
  8625 00006A86 E620                <1> 	out 0x20, al
  8626 00006A88 61                  <1> 	popad
  8627 00006A89 CF                  <1> 	iret
  8628                              <1> 
  8629                              <1> %endif
  8630 00006A8A 04000000            <1> 	lastthread dd 4
  8631 00006A8E 00                  <1> 	threadson db 0
  8632 00006A8F 00000000            <1> 	currentthread dd 0
  8633                                  %ifdef gui.included
  8634                                      %include "source/gui/gui.asm"
  8635                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8636 00006A93 31C0                <1> 	xor eax, eax
  8637 00006A95 31DB                <1> 	xor ebx, ebx
  8638 00006A97 31C9                <1> 	xor ecx, ecx
  8639 00006A99 31D2                <1> 	xor edx, edx
  8640 00006A9B E80D090000          <1> 	call guisetup
  8641                              <1> guiloop:
  8642 00006AA0 E85DEEFFFF          <1> 	call cursorgui
  8643                              <1> guistart:
  8644 00006AA5 E874F4FFFF          <1> 	call getkey
  8645 00006AAA C605[E9800000]00    <1> 	mov byte [copygui], 0
  8646 00006AB1 E9EFFFFFFF          <1> 	jmp guistart
  8647                              <1> 
  8648                              <1> %include "source/gui/bmp.asm"
  8649                              <2> showbmp:
  8650 00006AB6 668B06              <2> 	mov ax, [esi]
  8651 00006AB9 663D424D            <2> 	cmp ax, "BM"
  8652 00006ABD 0F85BB000000        <2> 	jne near endedbmp
  8653 00006AC3 8B3D[25580000]      <2> 	mov edi, [physbaseptr]
  8654 00006AC9 6689D0              <2> 	mov ax, dx
  8655 00006ACC 6689CB              <2> 	mov bx, cx
  8656 00006ACF 31C9                <2> 	xor ecx, ecx
  8657 00006AD1 31D2                <2> 	xor edx, edx
  8658 00006AD3 6689D9              <2> 	mov cx, bx
  8659 00006AD6 6689C2              <2> 	mov dx, ax
  8660 00006AD9 01D7                <2> 	add edi, edx
  8661 00006ADB 01D7                <2> 	add edi, edx
  8662 00006ADD 31D2                <2> 	xor edx, edx
  8663 00006ADF 668B15[FD580000]    <2> 	mov dx, [resolutionx2]
  8664 00006AE6 034E16              <2> 	add ecx, [esi + 22]
  8665                              <2> bmplocloop:
  8666 00006AE9 52                  <2> 	push edx
  8667 00006AEA 31C0                <2> 	xor eax, eax
  8668 00006AEC 6689D0              <2> 	mov ax, dx
  8669 00006AEF F7E1                <2> 	mul ecx
  8670 00006AF1 5A                  <2> 	pop edx
  8671 00006AF2 663B0D[11580000]    <2> 	cmp cx, [resolutiony]
  8672 00006AF9 7609                <2> 	jbe .nofixy
  8673 00006AFB 31C9                <2> 	xor ecx, ecx
  8674 00006AFD 668B0D[11580000]    <2> 	mov cx, [resolutiony]
  8675                              <2> .nofixy:
  8676 00006B04 01C7                <2> 	add edi, eax
  8677 00006B06 8B5612              <2> 	mov edx, [esi + 18]
  8678 00006B09 8B4E16              <2> 	mov ecx, [esi + 22]
  8679 00006B0C 8B460A              <2> 	mov eax, [esi + 10]
  8680 00006B0F 8B5E02              <2> 	mov ebx, [esi + 2]
  8681 00006B12 01F3                <2> 	add ebx, esi
  8682 00006B14 891D[846B0000]      <2> 	mov [bmpend], ebx
  8683 00006B1A 89D3                <2> 	mov ebx, edx
  8684 00006B1C 01C6                <2> 	add esi, eax
  8685                              <2> ldxbmp2:
  8686 00006B1E 31D2                <2> 	xor edx, edx
  8687 00006B20 668B15[0F580000]    <2> 	mov dx, [resolutionx]
  8688 00006B27 39D3                <2> 	cmp ebx, edx
  8689 00006B29 7702                <2> 	ja ldxbmp
  8690 00006B2B 89DA                <2> 	mov edx, ebx
  8691                              <2> ldxbmp:
  8692 00006B2D 668B06              <2> 	mov ax, [esi]
  8693 00006B30 668907              <2> 	mov [edi], ax
  8694 00006B33 81C702000000        <2> 	add edi, 2
  8695 00006B39 81C602000000        <2> 	add esi, 2
  8696 00006B3F 3B35[846B0000]      <2> 	cmp esi, [bmpend]
  8697 00006B45 7737                <2> 	ja endedbmp
  8698 00006B47 4A                  <2> 	dec edx
  8699 00006B48 81FA00000000        <2> 	cmp edx, 0
  8700 00006B4E 77DD                <2> 	ja ldxbmp
  8701 00006B50 31D2                <2> 	xor edx, edx
  8702 00006B52 668B15[0F580000]    <2> 	mov dx, [resolutionx]
  8703 00006B59 39D3                <2> 	cmp ebx, edx
  8704 00006B5B 7610                <2> 	jbe .notover
  8705                              <2> .over:
  8706 00006B5D 01DE                <2> 	add esi, ebx
  8707 00006B5F 01DE                <2> 	add esi, ebx
  8708 00006B61 29D6                <2> 	sub esi, edx
  8709 00006B63 29D6                <2> 	sub esi, edx
  8710 00006B65 01DF                <2> 	add edi, ebx
  8711 00006B67 01DF                <2> 	add edi, ebx
  8712 00006B69 29D7                <2> 	sub edi, edx
  8713 00006B6B 29D7                <2> 	sub edi, edx
  8714                              <2> .notover:
  8715 00006B6D 29DF                <2> 	sub edi, ebx
  8716 00006B6F 29DF                <2> 	sub edi, ebx
  8717 00006B71 29D7                <2> 	sub edi, edx
  8718 00006B73 29D7                <2> 	sub edi, edx
  8719 00006B75 49                  <2> 	dec ecx
  8720 00006B76 81F900000000        <2> 	cmp ecx, 0
  8721 00006B7C 77A0                <2> 	ja ldxbmp2
  8722                              <2> endedbmp:
  8723 00006B7E E888030000          <2> 	call switchmousepos2
  8724 00006B83 C3                  <2> 	ret
  8725                              <2> 	
  8726 00006B84 00000000            <2> 	bmpend dd 0
  8727                              <1> %include "source/gui/circle.asm"
  8728                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8729 00006B88 55                  <2> 	push ebp
  8730 00006B89 663D0000            <2> 	cmp ax, 0
  8731 00006B8D 770A                <2> 	ja .nozerocircle
  8732 00006B8F E8751D0000          <2> 	call putpixel	;the easiest circle ever
  8733 00006B94 E9F7000000          <2> 	jmp .done
  8734                              <2> .nozerocircle:
  8735 00006B99 6689F5              <2> 	mov bp, si
  8736 00006B9C 6650                <2> 	push ax
  8737 00006B9E E8A71D0000          <2> 	call getpixelmem
  8738 00006BA3 31C0                <2> 	xor eax, eax
  8739 00006BA5 6658                <2> 	pop ax
  8740 00006BA7 BE01000000          <2> 	mov esi, 1
  8741 00006BAC 29C6                <2> 	sub esi, eax
  8742 00006BAE 89C1                <2> 	mov ecx, eax
  8743 00006BB0 31C0                <2> 	xor eax, eax
  8744 00006BB2 66A1[FD580000]      <2> 	mov ax, [resolutionx2]
  8745 00006BB8 F7E1                <2> 	mul ecx
  8746 00006BBA 50                  <2> 	push eax
  8747 00006BBB 31D2                <2> 	xor edx, edx
  8748 00006BBD 01C7                <2> 	add edi, eax
  8749 00006BBF 66892F              <2> 	mov [edi], bp
  8750 00006BC2 29C7                <2> 	sub edi, eax
  8751 00006BC4 29C7                <2> 	sub edi, eax
  8752 00006BC6 66892F              <2> 	mov [edi], bp
  8753 00006BC9 01C7                <2> 	add edi, eax
  8754 00006BCB D1E1                <2> 	shl ecx, 1
  8755 00006BCD 01CF                <2> 	add edi, ecx
  8756 00006BCF 66892F              <2> 	mov [edi], bp
  8757 00006BD2 D1E1                <2> 	shl ecx, 1
  8758 00006BD4 29CF                <2> 	sub edi, ecx
  8759 00006BD6 66892F              <2> 	mov [edi], bp
  8760 00006BD9 D1E9                <2> 	shr ecx, 1
  8761 00006BDB 01CF                <2> 	add edi, ecx
  8762 00006BDD D1E9                <2> 	shr ecx, 1
  8763 00006BDF B802000000          <2> 	mov eax, 2
  8764 00006BE4 F7E1                <2> 	mul ecx
  8765 00006BE6 48                  <2> 	dec eax
  8766 00006BE7 F7D0                <2> 	not eax ;make it negative
  8767 00006BE9 A3[966C0000]        <2> 	mov [.ddF_y], eax
  8768 00006BEE 58                  <2> 	pop eax
  8769 00006BEF BB01000000          <2> 	mov ebx, 1
  8770 00006BF4 891D[926C0000]      <2> 	mov [.ddF_x], ebx
  8771 00006BFA 4B                  <2> 	dec ebx
  8772 00006BFB 31D2                <2> 	xor edx, edx
  8773 00006BFD E904000000          <2> 	jmp .lp
  8774                              <2> .lpb:
  8775 00006C02 D1EA                <2> 	shr edx, 1
  8776 00006C04 D1E9                <2> 	shr ecx, 1
  8777                              <2> .lp:	;it starts this with the center in edi
  8778                              <2> 		;color in bp
  8779                              <2> 		;ddF_x in memory
  8780                              <2> 		;x*resolutionx2 in ebx
  8781                              <2> 		;x in edx
  8782                              <2> 		;ddF_y in memory
  8783                              <2> 		;y*resolutionx2 in eax
  8784                              <2> 		;f in esi
  8785                              <2> 		;y in ecx
  8786 00006C06 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8787 00006C0C 7717                <2> 	ja	.noddF_y
  8788 00006C0E 49                  <2> 	dec ecx
  8789 00006C0F 2B05[FD580000]      <2> 	sub eax, [resolutionx2]
  8790 00006C15 8105[966C0000]0200- <2> 	add dword [.ddF_y], 2
  8791 00006C1D 0000                <2>
  8792 00006C1F 0335[966C0000]      <2> 	add esi, [.ddF_y]
  8793                              <2> .noddF_y:
  8794 00006C25 42                  <2> 	inc edx
  8795 00006C26 031D[FD580000]      <2> 	add ebx, [resolutionx2]
  8796 00006C2C 8105[926C0000]0200- <2> 	add dword [.ddF_x], 2
  8797 00006C34 0000                <2>
  8798 00006C36 0335[926C0000]      <2> 	add esi, [.ddF_x]
  8799                              <2> 
  8800 00006C3C D1E2                <2> 	shl edx, 1
  8801 00006C3E D1E1                <2> 	shl ecx, 1
  8802 00006C40 01D7                <2> 	add edi, edx
  8803 00006C42 01C7                <2> 	add edi, eax
  8804 00006C44 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  8805 00006C47 D1E2                <2> 	shl edx, 1
  8806 00006C49 29D7                <2> 	sub edi, edx
  8807 00006C4B 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8808 00006C4E D1E0                <2> 	shl eax, 1
  8809 00006C50 29C7                <2> 	sub edi, eax
  8810 00006C52 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  8811 00006C55 01D7                <2> 	add edi, edx
  8812 00006C57 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8813 00006C5A D1E8                <2> 	shr eax, 1
  8814 00006C5C D1EA                <2> 	shr edx, 1
  8815 00006C5E 01C7                <2> 	add edi, eax
  8816 00006C60 29D7                <2> 	sub edi, edx
  8817                              <2> 
  8818 00006C62 39D1                <2> 	cmp ecx, edx
  8819 00006C64 749C                <2> 	je .lpb
  8820                              <2> 
  8821 00006C66 01DF                <2> 	add edi, ebx
  8822 00006C68 01CF                <2> 	add edi, ecx
  8823 00006C6A 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8824 00006C6D D1E1                <2> 	shl ecx, 1
  8825 00006C6F 29CF                <2> 	sub edi, ecx
  8826 00006C71 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8827 00006C74 D1E3                <2> 	shl ebx, 1
  8828 00006C76 29DF                <2> 	sub edi, ebx
  8829 00006C78 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8830 00006C7B 01CF                <2> 	add edi, ecx
  8831 00006C7D 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8832 00006C80 D1EB                <2> 	shr ebx, 1
  8833 00006C82 D1E9                <2> 	shr ecx, 1
  8834 00006C84 01DF                <2> 	add edi, ebx
  8835 00006C86 29CF                <2> 	sub edi, ecx
  8836 00006C88 39CA                <2> 	cmp edx, ecx
  8837 00006C8A 0F8272FFFFFF        <2> 	jb .lpb
  8838                              <2> .done:
  8839 00006C90 5D                  <2> 	pop ebp
  8840 00006C91 C3                  <2> 	ret
  8841                              <2> 	
  8842 00006C92 00000000            <2> .ddF_x dd 0
  8843 00006C96 00000000            <2> .ddF_y dd 0
  8844                              <2> 
  8845                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  8846 00006C9A 55                  <2> 	push ebp
  8847 00006C9B 663D0000            <2> 	cmp ax, 0
  8848 00006C9F 770A                <2> 	ja .nozerocircle
  8849 00006CA1 E8631C0000          <2> 	call putpixel	;the easiest circle ever
  8850 00006CA6 E95A010000          <2> 	jmp .done
  8851                              <2> .nozerocircle:
  8852 00006CAB 6689F5              <2> 	mov bp, si
  8853 00006CAE 6650                <2> 	push ax
  8854 00006CB0 E8951C0000          <2> 	call getpixelmem
  8855 00006CB5 31C0                <2> 	xor eax, eax
  8856 00006CB7 6658                <2> 	pop ax
  8857 00006CB9 BE01000000          <2> 	mov esi, 1
  8858 00006CBE 29C6                <2> 	sub esi, eax
  8859 00006CC0 89C1                <2> 	mov ecx, eax
  8860 00006CC2 31C0                <2> 	xor eax, eax
  8861 00006CC4 66A1[FD580000]      <2> 	mov ax, [resolutionx2]
  8862 00006CCA F7E1                <2> 	mul ecx
  8863 00006CCC 50                  <2> 	push eax
  8864 00006CCD 31D2                <2> 	xor edx, edx
  8865 00006CCF 01C7                <2> 	add edi, eax
  8866 00006CD1 66892F              <2> 	mov [edi], bp
  8867 00006CD4 29C7                <2> 	sub edi, eax
  8868 00006CD6 29C7                <2> 	sub edi, eax
  8869 00006CD8 66892F              <2> 	mov [edi], bp
  8870 00006CDB 01C7                <2> 	add edi, eax
  8871 00006CDD D1E1                <2> 	shl ecx, 1
  8872 00006CDF 01CF                <2> 	add edi, ecx
  8873 00006CE1 51                  <2> 	push ecx
  8874                              <2> .s0:
  8875 00006CE2 66892F              <2> 	mov [edi], bp
  8876 00006CE5 81EF02000000        <2> 	sub edi, 2
  8877 00006CEB 49                  <2> 	dec ecx
  8878 00006CEC 81F900000000        <2> 	cmp ecx, 0
  8879 00006CF2 75EE                <2> 	jne .s0
  8880 00006CF4 66892F              <2> 	mov [edi], bp
  8881 00006CF7 59                  <2> 	pop ecx
  8882 00006CF8 01CF                <2> 	add edi, ecx
  8883 00006CFA D1E9                <2> 	shr ecx, 1
  8884 00006CFC B802000000          <2> 	mov eax, 2
  8885 00006D01 F7E1                <2> 	mul ecx
  8886 00006D03 48                  <2> 	dec eax
  8887 00006D04 F7D0                <2> 	not eax ;make it negative
  8888 00006D06 A3[0B6E0000]        <2> 	mov [.ddF_y], eax
  8889 00006D0B 58                  <2> 	pop eax
  8890 00006D0C BB01000000          <2> 	mov ebx, 1
  8891 00006D11 891D[076E0000]      <2> 	mov [.ddF_x], ebx
  8892 00006D17 4B                  <2> 	dec ebx
  8893 00006D18 31D2                <2> 	xor edx, edx
  8894 00006D1A E904000000          <2> 	jmp .lp
  8895                              <2> .lpb:
  8896 00006D1F D1EA                <2> 	shr edx, 1
  8897 00006D21 D1E9                <2> 	shr ecx, 1
  8898                              <2> .lp:	;it starts this with the center in edi
  8899                              <2> 		;color in bp
  8900                              <2> 		;ddF_x in memory
  8901                              <2> 		;x*resolutionx2 in ebx
  8902                              <2> 		;x in edx
  8903                              <2> 		;ddF_y in memory
  8904                              <2> 		;y*resolutionx2 in eax
  8905                              <2> 		;f in esi
  8906                              <2> 		;y in ecx
  8907 00006D23 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8908 00006D29 7717                <2> 	ja	.noddF_y
  8909 00006D2B 49                  <2> 	dec ecx
  8910 00006D2C 2B05[FD580000]      <2> 	sub eax, [resolutionx2]
  8911 00006D32 8105[0B6E0000]0200- <2> 	add dword [.ddF_y], 2
  8912 00006D3A 0000                <2>
  8913 00006D3C 0335[0B6E0000]      <2> 	add esi, [.ddF_y]
  8914                              <2> .noddF_y:
  8915 00006D42 42                  <2> 	inc edx
  8916 00006D43 031D[FD580000]      <2> 	add ebx, [resolutionx2]
  8917 00006D49 8105[076E0000]0200- <2> 	add dword [.ddF_x], 2
  8918 00006D51 0000                <2>
  8919 00006D53 0335[076E0000]      <2> 	add esi, [.ddF_x]
  8920                              <2> 
  8921 00006D59 D1E2                <2> 	shl edx, 1
  8922 00006D5B D1E1                <2> 	shl ecx, 1
  8923 00006D5D 52                  <2> 	push edx
  8924 00006D5E 29D7                <2> 	sub edi, edx
  8925 00006D60 01C7                <2> 	add edi, eax
  8926 00006D62 81FA00000000        <2> 	cmp edx, 0
  8927 00006D68 7412                <2> 	je .nos1
  8928                              <2> .s1:
  8929 00006D6A 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8930 00006D6D 81C702000000        <2> 	add edi, 2
  8931 00006D73 4A                  <2> 	dec edx
  8932 00006D74 81FA00000000        <2> 	cmp edx, 0
  8933 00006D7A 75EE                <2> 	jne .s1
  8934                              <2> .nos1:
  8935 00006D7C 66892F              <2> 	mov [edi], bp
  8936 00006D7F 5A                  <2> 	pop edx
  8937 00006D80 52                  <2> 	push edx
  8938 00006D81 29C7                <2> 	sub edi, eax
  8939 00006D83 29C7                <2> 	sub edi, eax
  8940 00006D85 81FA00000000        <2> 	cmp edx, 0
  8941 00006D8B 7412                <2> 	je .nos2
  8942                              <2> .s2:
  8943 00006D8D 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8944 00006D90 81EF02000000        <2> 	sub edi, 2
  8945 00006D96 4A                  <2> 	dec edx
  8946 00006D97 81FA00000000        <2> 	cmp edx, 0
  8947 00006D9D 75EE                <2> 	jne .s2
  8948                              <2> .nos2:
  8949 00006D9F 66892F              <2> 	mov [edi], bp
  8950 00006DA2 5A                  <2> 	pop edx
  8951 00006DA3 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  8952 00006DA5 01D7                <2> 	add edi, edx
  8953                              <2> 
  8954 00006DA7 39D1                <2> 	cmp ecx, edx
  8955 00006DA9 0F8470FFFFFF        <2> 	je .lpb
  8956                              <2> 
  8957 00006DAF 51                  <2> 	push ecx
  8958 00006DB0 01DF                <2> 	add edi, ebx
  8959 00006DB2 29CF                <2> 	sub edi, ecx
  8960 00006DB4 81F900000000        <2> 	cmp ecx, 0
  8961 00006DBA 7412                <2> 	je .nos3
  8962                              <2> .s3:
  8963 00006DBC 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8964 00006DBF 81C702000000        <2> 	add edi, 2
  8965 00006DC5 49                  <2> 	dec ecx
  8966 00006DC6 81F900000000        <2> 	cmp ecx, 0
  8967 00006DCC 75EE                <2> 	jne .s3
  8968                              <2> .nos3:
  8969 00006DCE 66892F              <2> 	mov [edi], bp
  8970 00006DD1 59                  <2> 	pop ecx
  8971 00006DD2 51                  <2> 	push ecx
  8972 00006DD3 29DF                <2> 	sub edi, ebx
  8973 00006DD5 29DF                <2> 	sub edi, ebx
  8974 00006DD7 81F900000000        <2> 	cmp ecx, 0
  8975 00006DDD 7412                <2> 	je .nos4
  8976                              <2> .s4:
  8977 00006DDF 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8978 00006DE2 81EF02000000        <2> 	sub edi, 2
  8979 00006DE8 49                  <2> 	dec ecx
  8980 00006DE9 81F900000000        <2> 	cmp ecx, 0
  8981 00006DEF 75EE                <2> 	jne .s4
  8982                              <2> .nos4:
  8983 00006DF1 66892F              <2> 	mov [edi], bp
  8984 00006DF4 59                  <2> 	pop ecx
  8985 00006DF5 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  8986 00006DF7 01CF                <2> 	add edi, ecx
  8987                              <2> 
  8988 00006DF9 D1EA                <2> 	shr edx, 1
  8989 00006DFB D1E9                <2> 	shr ecx, 1
  8990 00006DFD 39CA                <2> 	cmp edx, ecx
  8991 00006DFF 0F821EFFFFFF        <2> 	jb .lp
  8992                              <2> .done:
  8993 00006E05 5D                  <2> 	pop ebp
  8994 00006E06 C3                  <2> 	ret
  8995                              <2> 	
  8996 00006E07 00000000            <2> .ddF_x dd 0
  8997 00006E0B 00000000            <2> .ddF_y dd 0
  8998                              <1> %include "source/gui/cursor.asm"
  8999                              <2> clearmousecursor:
  9000 00006E0F BE[FE710000]        <2> 		mov esi, background
  9001 00006E14 8B3D[25580000]      <2> 		mov edi, [physbaseptr]
  9002 00006E1A 31D2                <2> 		xor edx, edx
  9003 00006E1C 31C9                <2> 		xor ecx, ecx
  9004 00006E1E 668B15[EF5A0000]    <2> 		mov dx, [lastmouseposition]
  9005 00006E25 668B0D[F15A0000]    <2> 		mov cx, [lastmouseposition + 2]
  9006 00006E2C 01D7                <2> 		add edi, edx
  9007 00006E2E 31D2                <2> 		xor edx, edx
  9008 00006E30 668B15[FD580000]    <2> 		mov dx, [resolutionx2]
  9009 00006E37 81F900000000        <2> 		cmp ecx, 0
  9010 00006E3D 7408                <2> 		je .nomul
  9011 00006E3F 52                  <2> 		push edx
  9012 00006E40 89D0                <2> 		mov eax, edx
  9013 00006E42 F7E1                <2> 		mul ecx
  9014 00006E44 01C7                <2> 		add edi, eax
  9015 00006E46 5A                  <2> 		pop edx
  9016                              <2> .nomul:
  9017                              <2> %ifdef 	gui.background
  9018 00006E47 813D[D0710000]0000- <2> 		cmp dword [backgroundimage], 0
  9019 00006E4F 0000                <2>
  9020 00006E51 7438                <2> 		je .noyclr
  9021 00006E53 8B35[D0710000]      <2> 		mov esi, [backgroundimage]
  9022 00006E59 2B3D[25580000]      <2> 		sub edi, [physbaseptr]
  9023 00006E5F 01FE                <2> 		add esi, edi
  9024 00006E61 033D[25580000]      <2> 		add edi, [physbaseptr]
  9025                              <2> .backlp:
  9026 00006E67 31DB                <2> 		xor ebx, ebx
  9027                              <2> .noyback:
  9028 00006E69 8B041E              <2> 		mov eax, [esi + ebx]
  9029 00006E6C 89041F              <2> 		mov [edi + ebx], eax
  9030 00006E6F 81C304000000        <2> 		add ebx, 4
  9031 00006E75 81FB10000000        <2> 		cmp ebx, 16
  9032 00006E7B 75EC                <2> 		jne .noyback
  9033 00006E7D 01D7                <2> 		add edi, edx
  9034 00006E7F 01D6                <2> 		add esi, edx
  9035 00006E81 6641                <2> 		inc cx
  9036 00006E83 6681F91000          <2> 		cmp cx, 16
  9037 00006E88 72DD                <2> 		jb .backlp
  9038 00006E8A C3                  <2> 		ret
  9039                              <2> %endif
  9040                              <2> .noyclr:
  9041 00006E8B 668B06              <2> 		mov ax, [esi]
  9042 00006E8E C1C010              <2> 		rol eax, 16
  9043 00006E91 668B06              <2> 		mov ax, [esi]
  9044 00006E94 8907                <2> 		mov [edi], eax
  9045 00006E96 894704              <2> 		mov [edi + 4], eax
  9046 00006E99 894708              <2> 		mov [edi + 8], eax
  9047 00006E9C 89470C              <2> 		mov [edi + 12], eax
  9048 00006E9F 01D7                <2> 		add edi, edx
  9049 00006EA1 6641                <2> 		inc cx
  9050 00006EA3 6681F91000          <2> 		cmp cx, 16
  9051 00006EA8 72E1                <2> 		jb .noyclr
  9052 00006EAA C3                  <2> 		ret
  9053                              <2> 
  9054                              <2> switchmousepos:		;;switch were the mouse is located
  9055 00006EAB BE[9CE22B00]        <2> 		mov esi, mousecolorbuf
  9056 00006EB0 8B3D[25580000]      <2> 		mov edi, [physbaseptr]
  9057 00006EB6 31D2                <2> 		xor edx, edx
  9058 00006EB8 31C9                <2> 		xor ecx, ecx
  9059 00006EBA 668B15[EF5A0000]    <2> 		mov dx, [lastmouseposition]
  9060 00006EC1 668B0D[F15A0000]    <2> 		mov cx, [lastmouseposition + 2]
  9061 00006EC8 01D7                <2> 		add edi, edx
  9062 00006ECA 31D2                <2> 		xor edx, edx
  9063 00006ECC 668B15[FD580000]    <2> 		mov dx, [resolutionx2]
  9064 00006ED3 6681F90000          <2> 		cmp cx, 0
  9065 00006ED8 740B                <2> 		je noswmsy
  9066 00006EDA 01D7                <2> swmsy:		add edi, edx
  9067 00006EDC 6649                <2> 		dec cx
  9068 00006EDE 6681F90000          <2> 		cmp cx, 0
  9069 00006EE3 75F5                <2> 		jne swmsy
  9070 00006EE5 8B06                <2> noswmsy:	mov eax, [esi]
  9071 00006EE7 8B5E04              <2> 		mov ebx, [esi + 4]
  9072 00006EEA 8907                <2> 		mov [edi], eax
  9073 00006EEC 895F04              <2> 		mov [edi + 4], ebx
  9074 00006EEF 8B4608              <2> 		mov eax, [esi + 8]
  9075 00006EF2 8B5E0C              <2> 		mov ebx, [esi + 12]
  9076 00006EF5 894708              <2> 		mov [edi + 8], eax
  9077 00006EF8 895F0C              <2> 		mov [edi + 12], ebx
  9078 00006EFB 01D7                <2> 		add edi, edx
  9079 00006EFD 81C610000000        <2> 		add esi, 16
  9080 00006F03 81FE[9CE32B00]      <2> 		cmp esi, mcolorend
  9081 00006F09 72DA                <2> 		jb noswmsy
  9082                              <2> 		
  9083                              <2> switchmousepos2:
  9084 00006F0B BE[9CE22B00]        <2> 		mov esi, mousecolorbuf
  9085 00006F10 8B3D[25580000]      <2> 		mov edi, [physbaseptr]
  9086 00006F16 31D2                <2> 		xor edx, edx
  9087 00006F18 31C9                <2> 		xor ecx, ecx
  9088 00006F1A 668B15[F35A0000]    <2> 		mov dx, [mousecursorposition]
  9089 00006F21 668B0D[F55A0000]    <2> 		mov cx, [mousecursorposition + 2]
  9090 00006F28 01D7                <2> 		add edi, edx
  9091 00006F2A 31D2                <2> 		xor edx, edx
  9092 00006F2C 668B15[FD580000]    <2> 		mov dx, [resolutionx2]
  9093 00006F33 6681F90000          <2> 		cmp cx, 0
  9094 00006F38 740B                <2> 		je noswmsy2
  9095 00006F3A 01D7                <2> swmsy2:		add edi, edx
  9096 00006F3C 6649                <2> 		dec cx
  9097 00006F3E 6681F90000          <2> 		cmp cx, 0
  9098 00006F43 75F5                <2> 		jne swmsy2
  9099 00006F45 8B07                <2> noswmsy2:	mov eax, [edi]
  9100 00006F47 8B5F04              <2> 		mov ebx, [edi + 4]
  9101 00006F4A 8906                <2> 		mov [esi], eax
  9102 00006F4C 895E04              <2> 		mov [esi + 4], ebx
  9103 00006F4F 8B4708              <2> 		mov eax, [edi + 8]
  9104 00006F52 8B5F0C              <2> 		mov ebx, [edi + 12]
  9105 00006F55 894608              <2> 		mov [esi + 8], eax
  9106 00006F58 895E0C              <2> 		mov [esi + 12], ebx
  9107 00006F5B 01D7                <2> 		add edi, edx
  9108 00006F5D 81C610000000        <2> 		add esi, 16
  9109 00006F63 81FE[9CE32B00]      <2> 		cmp esi, mcolorend
  9110 00006F69 72DA                <2> 		jb noswmsy2
  9111 00006F6B C3                  <2> 		ret
  9112                              <2> 		
  9113                              <1> %include "source/gui/icon.asm"
  9114 00006F6C 0000                <2> iconcolor dw 0
  9115                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  9116 00006F6E A2[72890000]        <2> 		mov [iconselected], al
  9117 00006F73 8025[72890000]01    <2> 		and byte [iconselected], 1
  9118 00006F7A B401                <2> 		mov ah, 1
  9119 00006F7C E8F2160000          <2> 		call graphicsadd
  9120                              <2> 	showicon2:
  9121 00006F81 8B3D[25580000]      <2> 		mov edi, [physbaseptr]
  9122 00006F87 6601D2              <2> 		add dx, dx
  9123 00006F8A 663B15[FD580000]    <2> 		cmp dx, [resolutionx2]
  9124 00006F91 720C                <2> 		jb screenxgood
  9125 00006F93 668B15[FD580000]    <2> 		mov dx, [resolutionx2]
  9126 00006F9A 6681EA4000          <2> 		sub dx, 64
  9127                              <2> 	screenxgood:
  9128 00006F9F 6681F90000          <2> 		cmp cx, 0
  9129 00006FA4 742B                <2> 		je noscreenygoodchk
  9130 00006FA6 663B0D[11580000]    <2> 		cmp cx, [resolutiony]
  9131 00006FAD 720C                <2> 		jb screenygood
  9132 00006FAF 668B0D[11580000]    <2> 		mov cx, [resolutiony]
  9133 00006FB6 6681E92000          <2> 		sub cx, 32
  9134                              <2> 	screenygood:
  9135 00006FBB 50                  <2> 		push eax
  9136 00006FBC 52                  <2> 		push edx
  9137 00006FBD 31C0                <2> 		xor eax, eax
  9138 00006FBF 31DB                <2> 		xor ebx, ebx
  9139 00006FC1 668B1D[FD580000]    <2> 		mov bx, [resolutionx2]
  9140 00006FC8 6689C8              <2> 		mov ax, cx
  9141 00006FCB F7E3                <2> 		mul ebx
  9142 00006FCD 01C7                <2> 		add edi, eax
  9143 00006FCF 5A                  <2> 		pop edx
  9144 00006FD0 58                  <2> 		pop eax
  9145                              <2> 	noscreenygoodchk:
  9146 00006FD1 31DB                <2> 		xor ebx, ebx
  9147 00006FD3 6689D3              <2> 		mov bx, dx
  9148 00006FD6 01DF                <2> 		add edi, ebx
  9149 00006FD8 6631C9              <2> 		xor cx, cx
  9150 00006FDB 668B06              <2> 		mov ax, [esi]
  9151 00006FDE 81C602000000        <2> 		add esi, 2
  9152 00006FE4 66A3[6C6F0000]      <2> 		mov [iconcolor], ax
  9153                              <2> 	writeicon:
  9154 00006FEA 8B06                <2> 		mov eax, [esi]
  9155 00006FEC D1C0                <2> 		rol eax, 1
  9156 00006FEE 30C9                <2> 		xor cl, cl
  9157                              <2> 	writeiconline:
  9158 00006FF0 B201                <2> 		mov dl, 1
  9159 00006FF2 20C2                <2> 		and dl, al
  9160 00006FF4 3215[72890000]      <2> 		xor dl, [iconselected]
  9161 00006FFA 668B1D[FE710000]    <2> 		mov bx, [background]
  9162 00007001 66891F              <2> 		mov [edi], bx
  9163 00007004 80FA00              <2> 		cmp dl, 0
  9164 00007007 740A                <2> 		je noiconline
  9165 00007009 668B15[6C6F0000]    <2> 		mov dx, [iconcolor]
  9166 00007010 668917              <2> 		mov [edi], dx
  9167                              <2> 	noiconline:
  9168 00007013 81C702000000        <2> 		add edi, 2
  9169 00007019 D1C0                <2> 		rol eax, 1
  9170 0000701B FEC1                <2> 		inc cl
  9171 0000701D 80F920              <2> 		cmp cl, 32
  9172 00007020 72CE                <2> 		jb writeiconline
  9173 00007022 81C604000000        <2> 		add esi, 4
  9174 00007028 FEC5                <2> 		inc ch
  9175 0000702A 31D2                <2> 		xor edx, edx
  9176 0000702C 668B15[FD580000]    <2> 		mov dx, [resolutionx2]
  9177 00007033 01D7                <2> 		add edi, edx
  9178 00007035 81EF40000000        <2> 		sub edi, 64
  9179 0000703B 80FD20              <2> 		cmp ch, 32
  9180 0000703E 72AA                <2> 		jb writeicon
  9181 00007040 31C0                <2> 		xor eax, eax
  9182 00007042 C3                  <2> 		ret
  9183                              <1> %include "source/gui/line.asm"
  9184                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  9185 00007043 668935[65710000]    <2> 	mov [.color], si
  9186 0000704A C605[67710000]00    <2> 	mov byte [.steep], 0
  9187 00007051 C605[68710000]00    <2> 	mov byte [.yreversed], 0
  9188 00007058 E907000000          <2> 	jmp .notsteep
  9189                              <2> .steeploop:
  9190 0000705D C605[67710000]01    <2> 	mov byte [.steep], 1
  9191                              <2> .notsteep:
  9192 00007064 31FF                <2> 	xor edi, edi
  9193 00007066 31F6                <2> 	xor esi, esi
  9194 00007068 6639DA              <2> 	cmp dx, bx
  9195 0000706B 7705                <2> 	ja .noreversex
  9196 0000706D 6687D3              <2> 	xchg dx, bx
  9197 00007070 6691                <2> 	xchg cx, ax
  9198                              <2> .noreversex:
  9199 00007072 6689D7              <2> 	mov di, dx
  9200 00007075 6629DF              <2> 	sub di, bx
  9201                              <2> 	
  9202 00007078 6639C1              <2> 	cmp cx, ax
  9203 0000707B 720B                <2> 	jb .reversey
  9204 0000707D 6689CE              <2> 	mov si, cx
  9205 00007080 6629C6              <2> 	sub si, ax
  9206 00007083 E90D000000          <2> 	jmp .normal
  9207                              <2> .reversey:
  9208 00007088 C605[68710000]02    <2> 	mov byte [.yreversed], 2
  9209 0000708F 6689C6              <2> 	mov si, ax
  9210 00007092 6629CE              <2> 	sub si, cx	
  9211                              <2> .normal:
  9212 00007095 6687CA              <2> 	xchg cx, dx
  9213 00007098 6693                <2> 	xchg ax, bx
  9214 0000709A 6639FE              <2> 	cmp si, di
  9215 0000709D 77BE                <2> 	ja .steeploop
  9216 0000709F 6687CA              <2> 	xchg cx, dx
  9217 000070A2 6693                <2> 	xchg ax, bx
  9218                              <2> 	
  9219 000070A4 6691                <2> 	xchg ax, cx
  9220 000070A6 6687DA              <2> 	xchg bx, dx
  9221 000070A9 66893D[6B710000]    <2> 	mov [.xdelta], di
  9222 000070B0 668935[6D710000]    <2> 	mov [.ydelta], si
  9223 000070B7 668B35[65710000]    <2> 	mov si, [.color]
  9224 000070BE 66891D[69710000]    <2> 	mov [.endline], bx
  9225 000070C5 6652                <2> 	push dx
  9226 000070C7 6651                <2> 	push cx
  9227 000070C9 6687CA              <2> 	xchg cx, dx
  9228 000070CC 803D[67710000]01    <2> 	cmp byte [.steep], 1
  9229 000070D3 7403                <2> 	je .xchg
  9230 000070D5 6687D1              <2> 	xchg dx, cx
  9231                              <2> .xchg:
  9232 000070D8 E86D180000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9233 000070DD 6659                <2> 	pop cx
  9234 000070DF 665A                <2> 	pop dx
  9235 000070E1 31C0                <2> 	xor eax, eax
  9236 000070E3 66A1[6B710000]      <2> 	mov ax, [.xdelta]
  9237 000070E9 66D1E8              <2> 	shr ax, 1
  9238 000070EC 8A0D[67710000]      <2> 	mov cl, [.steep]
  9239 000070F2 0A0D[68710000]      <2> 	or cl, [.yreversed]
  9240 000070F8 55                  <2> 	push ebp
  9241 000070F9 668B2D[69710000]    <2> 	mov bp, [.endline]
  9242 00007100 6629D5              <2> 	sub bp, dx
  9243 00007103 668B15[6D710000]    <2> 	mov dx, [.ydelta]
  9244                              <2> .lp:
  9245 0000710A 668937              <2> 	mov [edi], si
  9246 0000710D 6639D0              <2> 	cmp ax, dx
  9247 00007110 7332                <2> 	jae .noaddx
  9248 00007112 F6C102              <2> 	test cl, 2
  9249 00007115 7414                <2> 	jz .nodecy
  9250 00007117 F6C101              <2> 	test cl, 1
  9251 0000711A 7509                <2> 	jnz .steepy
  9252 0000711C 29DF                <2> 	sub edi, ebx
  9253 0000711E 29DF                <2> 	sub edi, ebx
  9254 00007120 E906000000          <2> 	jmp .nodecy
  9255                              <2> .steepy:
  9256 00007125 81EF04000000        <2> 	sub edi, 4
  9257                              <2> .nodecy:
  9258 0000712B 660305[6B710000]    <2> 	add ax, [.xdelta]
  9259 00007132 F6C101              <2> 	test cl, 1
  9260 00007135 7507                <2> 	jnz .steepx
  9261 00007137 01DF                <2> 	add edi, ebx
  9262 00007139 E906000000          <2> 	jmp .noaddx
  9263                              <2> .steepx:
  9264 0000713E 81C702000000        <2> 	add edi, 2
  9265                              <2> .noaddx:
  9266 00007144 6629D0              <2> 	sub ax, dx
  9267 00007147 664D                <2> 	dec bp
  9268 00007149 81C702000000        <2> 	add edi, 2
  9269 0000714F F6C101              <2> 	test cl, 1
  9270 00007152 7408                <2> 	jz .nosteepx
  9271 00007154 81EF02000000        <2> 	sub edi, 2
  9272 0000715A 01DF                <2> 	add edi, ebx
  9273                              <2> .nosteepx:
  9274 0000715C 6681FD0000          <2> 	cmp bp, 0
  9275 00007161 75A7                <2> 	jne .lp
  9276                              <2> .done:
  9277 00007163 5D                  <2> 	pop ebp
  9278 00007164 C3                  <2> 	ret
  9279                              <2> 	
  9280 00007165 0000                <2> .color dw 0
  9281 00007167 00                  <2> .steep db 0
  9282 00007168 00                  <2> .yreversed db 0
  9283 00007169 0000                <2> .endline dw 0
  9284 0000716B 0000                <2> .xdelta dw 0
  9285 0000716D 0000                <2> .ydelta dw 0
  9286                              <1> %include "source/gui/refresh.asm"
  9287                              <2> guiclear:
  9288 0000716F 8B3D[25580000]      <2> 	mov edi, [physbaseptr]
  9289 00007175 668B15[0F580000]    <2> 	mov dx, [resolutionx]
  9290 0000717C 668B0D[11580000]    <2> 	mov cx, [resolutiony]
  9291 00007183 668B1D[FE710000]    <2> 	mov bx, [background]
  9292 0000718A 66891D[00720000]    <2> 	mov [background + 2], bx
  9293                              <2> %ifdef gui.background
  9294 00007191 813D[D0710000]0000- <2> 	cmp dword [backgroundimage], 0
  9295 00007199 0000                <2>
  9296 0000719B 7437                <2> 	je guiclear.noback
  9297 0000719D 8B35[D0710000]      <2> 		mov esi, [backgroundimage]
  9298                              <2> 	.lp:
  9299                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  9300                              <2> 		;movdqa [edi], xmm0
  9301                              <2> 		;add esi, 16
  9302                              <2> 		;add edi, 16
  9303                              <2> 		;sub dx, 8
  9304 000071A3 8B06                <2> 		mov eax, [esi]
  9305 000071A5 8907                <2> 		mov [edi], eax
  9306 000071A7 81C604000000        <2> 		add esi, 4
  9307 000071AD 81C704000000        <2> 		add edi, 4
  9308 000071B3 6681EA0200          <2> 		sub dx, 2
  9309 000071B8 6681FA0000          <2> 		cmp dx, 0
  9310 000071BD 77E4                <2> 		ja .lp
  9311 000071BF 6649                <2> 		dec cx
  9312 000071C1 668B15[0F580000]    <2> 		mov dx, [resolutionx]
  9313 000071C8 6681F90000          <2> 		cmp cx, 0
  9314 000071CD 77D4                <2> 		ja .lp
  9315 000071CF C3                  <2> 		ret
  9316 000071D0 00000000            <2> 	backgroundimage dd 0
  9317                              <2> %endif
  9318                              <2> guiclear.noback:
  9319 000071D4 A1[FE710000]        <2> 	mov eax, [background]
  9320                              <2> guiclearloop:
  9321 000071D9 8907                <2> 	mov [edi], eax
  9322 000071DB 81C704000000        <2> 	add edi, 4
  9323 000071E1 6681EA0200          <2> 	sub dx, 2
  9324 000071E6 6681FA0000          <2> 	cmp dx, 0
  9325 000071EB 77EC                <2> 	ja guiclearloop
  9326 000071ED 6649                <2> 	dec cx
  9327 000071EF 668B15[0F580000]    <2> 	mov dx, [resolutionx]
  9328 000071F6 6681F90000          <2> 	cmp cx, 0
  9329 000071FB 77DC                <2> 	ja guiclearloop
  9330 000071FD C3                  <2> 	ret
  9331                              <2> 
  9332 000071FE CF7B<rept>          <2> background times 2 dw 0111101111001111b
  9333                              <2> 	.original equ 0111101111001111b
  9334                              <2> 
  9335                              <2> reloadallgraphics:
  9336 00007202 BF[9CCC0300]        <2> 		mov edi, graphicstable
  9337                              <2> reloadgraphicsloop:
  9338 00007207 8B7702              <2> 		mov esi, [edi + 2]
  9339 0000720A 668B5706            <2> 		mov dx, [edi + 6]
  9340 0000720E 668B4F08            <2> 		mov cx, [edi + 8]
  9341 00007212 668B07              <2> 		mov ax, [edi]
  9342 00007215 668B5F0A            <2> 		mov bx, [edi + 10]
  9343 00007219 893D[5F860000]      <2> 		mov [grpctblpos], edi
  9344 0000721F 3B3D[F3800000]      <2> 		cmp edi, [dragging]
  9345 00007225 741E                <2> 		je loadedgraphic
  9346 00007227 663D0100            <2> 		cmp ax, 1
  9347 0000722B 0F843C000000        <2> 		je near icongraphic
  9348 00007231 663D0200            <2> 		cmp ax, 2
  9349 00007235 0F8445000000        <2> 		je near stringgraphic
  9350 0000723B 663D0300            <2> 		cmp ax, 3
  9351 0000723F 0F8419000000        <2> 		je near windowgraphic
  9352 00007245 8B3D[5F860000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  9353 0000724B 81C710000000        <2> 		add edi, 16
  9354 00007251 81FF[9CCE0300]      <2> 		cmp edi, graphicstableend
  9355 00007257 733A                <2> 		jae donereloadgraphics
  9356 00007259 E9A9FFFFFF          <2> 		jmp reloadgraphicsloop
  9357                              <2> windowgraphic:
  9358 0000725E E852090000          <2> 		call showwindow2
  9359 00007263 E8F6ABFFFF          <2> 		call cleardouble
  9360 00007268 E9D8FFFFFF          <2> 		jmp loadedgraphic
  9361 0000726D 80E301              <2> icongraphic:	and bl, 1
  9362 00007270 881D[72890000]      <2> 		mov [iconselected], bl
  9363 00007276 E806FDFFFF          <2> 		call showicon2
  9364 0000727B E9C5FFFFFF          <2> 		jmp loadedgraphic
  9365 00007280 80E301              <2> stringgraphic:  and bl, 1
  9366 00007283 881D[EF800000]      <2> 		mov [mouseselecton], bl
  9367 00007289 E8DF050000          <2> 		call showstring2
  9368 0000728E E9B2FFFFFF          <2> 		jmp loadedgraphic
  9369                              <2> donereloadgraphics:
  9370 00007293 8B3D[F3800000]      <2> 		mov edi, [dragging]
  9371 00007299 81FF[9CCC0300]      <2> 		cmp edi, graphicstable
  9372 0000729F 7226                <2> 		jb notcorrectdrag
  9373 000072A1 668B07              <2> 		mov ax, [edi]
  9374 000072A4 8B7702              <2> 		mov esi, [edi + 2]
  9375 000072A7 668B5706            <2> 		mov dx, [edi + 6]
  9376 000072AB 668B4F08            <2> 		mov cx, [edi + 8]
  9377 000072AF 668B5F0A            <2> 		mov bx, [edi + 10]
  9378 000072B3 663D0100            <2> 		cmp ax, 1
  9379 000072B7 750F                <2> 		jne noticondragging
  9380 000072B9 80E301              <2> 		and bl, 1
  9381 000072BC 881D[72890000]      <2> 		mov [iconselected], bl
  9382 000072C2 E8BAFCFFFF          <2> 		call showicon2
  9383                              <2> notcorrectdrag:
  9384 000072C7 C3                  <2> 		ret
  9385                              <2> 
  9386                              <2> 	noticondragging:
  9387 000072C8 663D0200            <2> 		cmp ax, 2
  9388 000072CC 75F9                <2> 		jne notcorrectdrag
  9389 000072CE 80E301              <2> 		and bl, 1
  9390 000072D1 881D[EF800000]      <2> 		mov [mouseselecton], bl
  9391 000072D7 E891050000          <2> 		call showstring2
  9392 000072DC E9E6FFFFFF          <2> 		jmp notcorrectdrag
  9393                              <1> %include "source/gui/square.asm"
  9394                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  9395 000072E1 6639D3              <2> 	cmp bx, dx
  9396 000072E4 7303                <2> 	jae .noxchgx
  9397 000072E6 6687DA              <2> 	xchg bx, dx
  9398                              <2> .noxchgx:
  9399 000072E9 6639C8              <2> 	cmp ax, cx
  9400 000072EC 7302                <2> 	jae .noxchgy
  9401 000072EE 6691                <2> 	xchg ax, cx
  9402                              <2> .noxchgy:
  9403 000072F0 6650                <2> 	push ax
  9404 000072F2 6653                <2> 	push bx
  9405 000072F4 6652                <2> 	push dx
  9406 000072F6 E84F160000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9407 000072FB 31D2                <2> 	xor edx, edx
  9408 000072FD 665A                <2> 	pop dx
  9409 000072FF 31DB                <2> 	xor ebx, ebx
  9410 00007301 665B                <2> 	pop bx
  9411 00007303 6658                <2> 	pop ax
  9412                              <2> .lp0:
  9413 00007305 6652                <2> 	push dx
  9414                              <2> .lp:
  9415 00007307 668937              <2> 	mov [edi], si
  9416 0000730A 81C702000000        <2> 	add edi, 2
  9417 00007310 6642                <2> 	inc dx
  9418 00007312 6639DA              <2> 	cmp dx, bx
  9419 00007315 76F0                <2> 	jbe .lp
  9420 00007317 665A                <2> 	pop dx
  9421 00007319 81EF02000000        <2> 	sub edi, 2
  9422 0000731F 29DF                <2> 	sub edi, ebx
  9423 00007321 29DF                <2> 	sub edi, ebx
  9424 00007323 01D7                <2> 	add edi, edx
  9425 00007325 01D7                <2> 	add edi, edx
  9426 00007327 033D[FD580000]      <2> 	add edi, [resolutionx2]
  9427 0000732D 6641                <2> 	inc cx
  9428 0000732F 6639C1              <2> 	cmp cx, ax
  9429 00007332 7203                <2> 	jb .lp2
  9430 00007334 74CF                <2> 	je .lp0
  9431 00007336 C3                  <2> 	ret
  9432                              <2> .lp2:
  9433 00007337 57                  <2> 	push edi
  9434 00007338 668937              <2> 	mov [edi], si
  9435 0000733B 29D7                <2> 	sub edi, edx
  9436 0000733D 29D7                <2> 	sub edi, edx
  9437 0000733F 01DF                <2> 	add edi, ebx
  9438 00007341 01DF                <2> 	add edi, ebx
  9439 00007343 668937              <2> 	mov [edi], si
  9440 00007346 5F                  <2> 	pop edi
  9441 00007347 033D[FD580000]      <2> 	add edi, [resolutionx2]
  9442 0000734D 6641                <2> 	inc cx
  9443 0000734F 6639C1              <2> 	cmp cx, ax
  9444 00007352 72E3                <2> 	jb .lp2
  9445 00007354 E9ACFFFFFF          <2> 	jmp .lp0
  9446                              <2> 
  9447                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  9448 00007359 6639D3              <2> 	cmp bx, dx
  9449 0000735C 7303                <2> 	jae .noxchgx
  9450 0000735E 6687DA              <2> 	xchg bx, dx
  9451                              <2> .noxchgx:
  9452 00007361 6639C8              <2> 	cmp ax, cx
  9453 00007364 7302                <2> 	jae .noxchgy
  9454 00007366 6691                <2> 	xchg ax, cx
  9455                              <2> .noxchgy:
  9456 00007368 6650                <2> 	push ax
  9457 0000736A 6653                <2> 	push bx
  9458 0000736C 6652                <2> 	push dx
  9459 0000736E E8D7150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9460 00007373 31D2                <2> 	xor edx, edx
  9461 00007375 665A                <2> 	pop dx
  9462 00007377 31DB                <2> 	xor ebx, ebx
  9463 00007379 665B                <2> 	pop bx
  9464 0000737B 6658                <2> 	pop ax
  9465                              <2> .lp2:
  9466 0000737D 6652                <2> 	push dx
  9467                              <2> .lp:
  9468 0000737F 668937              <2> 	mov [edi], si
  9469 00007382 81C702000000        <2> 	add edi, 2
  9470 00007388 6642                <2> 	inc dx
  9471 0000738A 6639DA              <2> 	cmp dx, bx
  9472 0000738D 76F0                <2> 	jbe .lp
  9473 0000738F 665A                <2> 	pop dx
  9474 00007391 81EF02000000        <2> 	sub edi, 2
  9475 00007397 29DF                <2> 	sub edi, ebx
  9476 00007399 29DF                <2> 	sub edi, ebx
  9477 0000739B 01D7                <2> 	add edi, edx
  9478 0000739D 01D7                <2> 	add edi, edx
  9479 0000739F 033D[FD580000]      <2> 	add edi, [resolutionx2]
  9480 000073A5 6641                <2> 	inc cx
  9481 000073A7 6639C1              <2> 	cmp cx, ax
  9482 000073AA 76D1                <2> 	jbe .lp2
  9483 000073AC C3                  <2> 	ret
  9484                              <1> %include "source/gui/startup.asm"
  9485                              <2> guisetup:
  9486                              <2> 	%ifdef gui.background
  9487 000073AD 31DB                <2> 	xor ebx, ebx
  9488 000073AF 891D[D0710000]      <2> 	mov [backgroundimage], ebx
  9489                              <2> 	%endif
  9490 000073B5 E8B5FDFFFF          <2> 	call guiclear
  9491 000073BA C605[D9890000]01    <2> 	mov byte [guion], 1
  9492 000073C1 C605[EF800000]00    <2> 	mov byte [mouseselecton], 0
  9493 000073C8 31C0                <2> 	xor eax, eax
  9494 000073CA 31DB                <2> 	xor ebx, ebx
  9495 000073CC 31C9                <2> 	xor ecx, ecx
  9496 000073CE 31D2                <2> 	xor edx, edx
  9497                              <2> 	
  9498 000073D0 BE[92750000]        <2> 	mov esi, pacmsg
  9499 000073D5 30E4                <2> 	xor ah, ah
  9500 000073D7 B010                <2> 	mov al, 00010000b
  9501 000073D9 31DB                <2> 	xor ebx, ebx
  9502 000073DB 66B99000            <2> 	mov cx, 144
  9503 000073DF 66BA0400            <2> 	mov dx, 4
  9504 000073E3 E872040000          <2> 	call showstring
  9505                              <2> 	
  9506 000073E8 BE[D0750000]        <2> 	mov esi, interneticon
  9507 000073ED 30E4                <2> 	xor ah, ah
  9508 000073EF B010                <2> 	mov al, 00010000b
  9509 000073F1 BB[BB740000]        <2> 	mov ebx, noie
  9510 000073F6 66B91800            <2> 	mov cx, 24
  9511 000073FA 66BA0400            <2> 	mov dx, 4
  9512 000073FE E86BFBFFFF          <2> 	call showicon
  9513                              <2> 	
  9514 00007403 BE[52760000]        <2> 	mov esi, wordicon
  9515 00007408 30E4                <2> 	xor ah, ah
  9516 0000740A B010                <2> 	mov al, 00010000b
  9517 0000740C 31DB                <2> 	xor ebx, ebx
  9518 0000740E 66B91800            <2> 	mov cx, 24
  9519 00007412 66BA3000            <2> 	mov dx, 48
  9520 00007416 E853FBFFFF          <2> 	call showicon
  9521                              <2> 	
  9522 0000741B BE[D4760000]        <2> 	mov esi, pacmanpellet
  9523 00007420 30E4                <2> 	xor ah, ah
  9524 00007422 B010                <2> 	mov al, 00010000b
  9525 00007424 31DB                <2> 	xor ebx, ebx
  9526 00007426 66B94000            <2> 	mov cx, 64
  9527 0000742A 66BA0400            <2> 	mov dx, 4
  9528 0000742E E83BFBFFFF          <2> 	call showicon
  9529                              <2> 	
  9530 00007433 BE[D8770000]        <2> 	mov esi, pacman
  9531 00007438 30E4                <2> 	xor ah, ah
  9532 0000743A B010                <2> 	mov al, 00010000b
  9533 0000743C BB[A4740000]        <2> 	mov ebx, pacmannomnom
  9534 00007441 66B94000            <2> 	mov cx, 64
  9535 00007445 66BA3000            <2> 	mov dx, 48
  9536 00007449 E820FBFFFF          <2> 	call showicon
  9537                              <2> 	
  9538 0000744E BE[56770000]        <2> 	mov esi, ghostie
  9539 00007453 30E4                <2> 	xor ah, ah
  9540 00007455 B010                <2> 	mov al, 00010000b
  9541 00007457 BB[8D740000]        <2> 	mov ebx, boo
  9542 0000745C 66B96C00            <2> 	mov cx, 108
  9543 00007460 66BA0400            <2> 	mov dx, 4
  9544 00007464 E805FBFFFF          <2> 	call showicon
  9545                              <2> 	
  9546 00007469 BE[74750000]        <2> 	mov esi, start
  9547 0000746E 668B0D[11580000]    <2> 	mov cx, [resolutiony]
  9548 00007475 6681E91000          <2> 	sub cx, 16
  9549 0000747A 66BA0200            <2> 	mov dx, 2
  9550 0000747E 30E4                <2> 	xor ah, ah
  9551 00007480 B010                <2> 	mov al, 00010000b
  9552 00007482 BB[30750000]        <2> 	mov ebx, winblows
  9553 00007487 E8CE030000          <2> 	call showstring
  9554                              <2> 
  9555                              <2> %ifdef gui.time	
  9556                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9557                              <2> %endif
  9558 0000748C C3                  <2> 	ret
  9559                              <2> 
  9560                              <2> 	boo:
  9561 0000748D BE[8D750000]        <2> 		mov esi, boomsg
  9562 00007492 66BA6400            <2> 		mov dx, 100
  9563 00007496 66B94001            <2> 		mov cx, 320
  9564 0000749A 31DB                <2> 		xor ebx, ebx
  9565 0000749C 6631C0              <2> 		xor ax, ax
  9566 0000749F E9B6030000          <2> 		jmp showstring
  9567                              <2> 
  9568                              <2> 	pacmannomnom:
  9569 000074A4 BE[AB750000]        <2> 		mov esi, pacnom
  9570 000074A9 66BA8200            <2> 		mov dx, 130
  9571 000074AD 66B93C00            <2> 		mov cx, 60
  9572 000074B1 31DB                <2> 		xor ebx, ebx
  9573 000074B3 6631C0              <2> 		xor ax, ax
  9574 000074B6 E99F030000          <2> 		jmp showstring	
  9575                              <2> 	
  9576                              <2> 	noie:
  9577 000074BB 66C705[BA750000]80- <2> 		mov word [termwindow], 640
  9578 000074C3 02                  <2>
  9579 000074C4 66C705[BC750000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9580 000074CC 01                  <2>
  9581 000074CD BE[BA750000]        <2> 		mov esi, termwindow
  9582 000074D2 66BA1000            <2> 		mov dx, 16
  9583 000074D6 66B91000            <2> 		mov cx, 16
  9584 000074DA 31DB                <2> 		xor ebx, ebx
  9585 000074DC 6631C0              <2> 		xor ax, ax
  9586 000074DF E817060000          <2> 		call showwindow
  9587 000074E4 E9C3B6FFFF          <2> 		jmp os
  9588                              <2> 
  9589                              <2> 	gotomenuboot:
  9590 000074E9 31D2                <2> 		xor edx, edx
  9591 000074EB 31C9                <2> 		xor ecx, ecx
  9592 000074ED 668B15[0F580000]    <2> 		mov dx, [resolutionx]
  9593 000074F4 668B0D[11580000]    <2> 		mov cx, [resolutiony]
  9594 000074FB 66C1E904            <2> 		shr cx, 4
  9595 000074FF 6681E90100          <2> 		sub cx, 1
  9596 00007504 66C1E104            <2> 		shl cx, 4
  9597 00007508 668915[BA750000]    <2> 		mov [termwindow], dx
  9598 0000750F 66890D[BC750000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9599 00007516 BE[BA750000]        <2> 		mov esi, termwindow
  9600 0000751B 6631D2              <2> 		xor dx, dx
  9601 0000751E 6631C9              <2> 		xor cx, cx
  9602 00007521 31DB                <2> 		xor ebx, ebx
  9603 00007523 6631C0              <2> 		xor ax, ax
  9604 00007526 E8D0050000          <2> 		call showwindow
  9605 0000752B E97CB6FFFF          <2> 		jmp os
  9606                              <2> 
  9607                              <2> 	winblows:
  9608 00007530 BE[83750000]        <2> 		mov esi, turnoffmsg
  9609 00007535 BB[5E530000]        <2> 		mov ebx, turnoff
  9610 0000753A 668B0D[11580000]    <2> 		mov cx, [resolutiony]
  9611 00007541 6681E92000          <2> 		sub cx, 32
  9612 00007546 6631D2              <2> 		xor dx, dx
  9613 00007549 30E4                <2> 		xor ah, ah
  9614 0000754B B010                <2> 		mov al, 00010000b
  9615 0000754D E808030000          <2> 		call showstring
  9616 00007552 BE[7A750000]        <2> 		mov esi, gotomenu
  9617 00007557 668B0D[11580000]    <2> 		mov cx, [resolutiony]
  9618 0000755E 6681E93000          <2> 		sub cx, 48
  9619 00007563 6631D2              <2> 		xor dx, dx
  9620 00007566 30E4                <2> 		xor ah, ah
  9621 00007568 B010                <2> 		mov al, 00010000b
  9622 0000756A BB[E9740000]        <2> 		mov ebx, gotomenuboot
  9623 0000756F E9E6020000          <2> 		jmp showstring
  9624                              <2> 		
  9625                              <2> 
  9626 00007574 737461727400        <2> 	start	db "start",0
  9627 0000757A 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9628 00007583 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9629 0000758C 00                  <2>
  9630 0000758D 426F6F2100          <2> 	boomsg db "Boo!",0
  9631 00007592 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9632 0000759B 73206561737920746F- <2>
  9633 000075A4 20647261772E00      <2>
  9634 000075AB 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9635 000075B4 6D206E6F6D00        <2>
  9636                              <2> 
  9637 000075BA 20035802            <2> 	termwindow:	dw 800,600	;window size
  9638 000075BE FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9639 000075C2 [9CE32B00]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9640 000075C6 [E4B82C00]          <2>
  9641 000075CA 534855536800        <2> 	termmsg:	db "SHUSh",0	;window title
  9642                              <2> 	
  9643 000075D0 <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9644 00007652 <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9645 000076D4 <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9646 00007756 <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9647 000077D8 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9648                              <2> 
  9649                              <2> %ifdef gui.time
  9650                              <2> guitime:
  9651                              <2> 		call time	;get rtc in timeshow & dateshow
  9652                              <2> 		xor ebx, ebx
  9653                              <2> 		mov dx, [resolutionx2]
  9654                              <2> 		xor cx, cx
  9655                              <2> 		sub dx, 304
  9656                              <2> 		mov esi, dateshow
  9657                              <2> 		mov al, 00010001b
  9658                              <2> 		call showstring
  9659                              <2> 		mov esi, timeshow
  9660                              <2> 		xor ebx, ebx
  9661                              <2> 		mov al, 00010001b
  9662                              <2> 		call showstring
  9663                              <2> 		ret
  9664                              <2> %endif
  9665                              <1> %include "source/gui/text.asm"
  9666                              <2> 	showstring:
  9667 0000785A A2[EF800000]        <2> 		mov [mouseselecton], al
  9668 0000785F 8025[EF800000]01    <2> 		and byte [mouseselecton], 1
  9669 00007866 B402                <2> 		mov ah, 2
  9670 00007868 E8060E0000          <2> 		call graphicsadd
  9671                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9672 0000786D 30E4                <2> 		xor ah, ah
  9673 0000786F 8A06                <2> 		mov al, [esi]
  9674 00007871 3CFF                <2> 		cmp al, 0xFF
  9675 00007873 7506                <2> 		jne .notnull
  9676 00007875 46                  <2> 		inc esi
  9677 00007876 E9F2FFFFFF          <2> 		jmp showstring2
  9678                              <2> .notnull:
  9679 0000787B 3CC0                <2> 		cmp al, 0xC0
  9680 0000787D 7234                <2> 		jb .doneutf
  9681 0000787F 3CE0                <2> 		cmp al, 0xE0
  9682 00007881 721D                <2> 		jb .two
  9683 00007883 46                  <2> 		inc esi
  9684 00007884 668B1E              <2> 		mov bx, [esi]
  9685 00007887 46                  <2> 		inc esi
  9686 00007888 C0E004              <2> 		shl al, 4
  9687 0000788B 66C1E302            <2> 		shl bx, 2
  9688 0000788F C0EF02              <2> 		shr bh, 2
  9689 00007892 66C1EB02            <2> 		shr bx, 2
  9690 00007896 08C7                <2> 		or bh, al
  9691 00007898 6689D8              <2> 		mov ax, bx
  9692 0000789B E913000000          <2> 		jmp .doneutf
  9693                              <2> 	.two:
  9694 000078A0 8A3E                <2> 		mov bh, [esi]
  9695 000078A2 46                  <2> 		inc esi
  9696 000078A3 8A1E                <2> 		mov bl, [esi]
  9697 000078A5 66C1E302            <2> 		shl bx, 2
  9698 000078A9 C0EF02              <2> 		shr bh, 2
  9699 000078AC 66C1EB02            <2> 		shr bx, 2
  9700 000078B0 6689D8              <2> 		mov ax, bx
  9701                              <2> 	.doneutf:
  9702 000078B3 663D0000            <2> 		cmp ax, 0
  9703 000078B7 741F                <2> 		je doneshowstring
  9704 000078B9 46                  <2> 		inc esi
  9705 000078BA 56                  <2> 		push esi
  9706 000078BB 668B1D[E0780000]    <2> 		mov bx, [colorfont2]
  9707 000078C2 E82A000000          <2> 		call showfontvesa
  9708 000078C7 663D0A00            <2> 		cmp ax, 10
  9709 000078CB 7405                <2> 		je noproceedshst
  9710 000078CD 6681C20800          <2> 		add dx, 8
  9711                              <2> 	noproceedshst:
  9712 000078D2 5E                  <2> 		pop esi
  9713 000078D3 E995FFFFFF          <2> 		jmp showstring2
  9714                              <2> 	doneshowstring:
  9715 000078D8 C605[EF800000]00    <2> 		mov byte [mouseselecton], 0
  9716 000078DF C3                  <2> 		ret
  9717                              <2> 
  9718 000078E0 FFFF                <2> colorfont2 dw 0xFFFF
  9719 000078E2 00                  <2> colorcache db 0
  9720                              <2> 
  9721 000078E3 02                  <2> resolutionbytes db 2
  9722 000078E4 0000                <2> posxvesa dw 0
  9723 000078E6 0000                <2> posyvesa dw 0
  9724 000078E8 FFFF                <2> colorfont dw 0xFFFF
  9725                              <2> savefontvesa:		;same rules as showfontvesa
  9726 000078EA C605[EE800000]01    <2> 	mov byte [savefonton], 1
  9727                              <2> showfontvesa:		;position in (dx,cx), color in bx, char in ax
  9728 000078F1 663DFF00            <2> 	cmp ax, 255
  9729 000078F5 7501                <2> 	jne nostopshowfont
  9730 000078F7 C3                  <2> 	ret
  9731                              <2> nostopshowfont:
  9732 000078F8 55                  <2> 	push ebp
  9733 000078F9 66890D[E6780000]    <2> 	mov [posyvesa], cx
  9734 00007900 663D0A00            <2> 	cmp ax, 10
  9735 00007904 0F8424000000        <2> 	je near goodvesafontx
  9736 0000790A 31C9                <2> 	xor ecx, ecx
  9737 0000790C 668B0D[FD580000]    <2> 	mov cx, [resolutionx2]
  9738 00007913 6639CA              <2> 	cmp dx, cx
  9739 00007916 7616                <2> 	jbe goodvesafontx
  9740 00007918 6631D2              <2> 	xor dx, dx
  9741 0000791B 668B0D[E6780000]    <2> 	mov cx, [posyvesa]
  9742 00007922 6681C11000          <2> 	add cx, 16
  9743 00007927 66890D[E6780000]    <2> 	mov [posyvesa], cx
  9744                              <2> goodvesafontx:
  9745 0000792E 668B0D[E6780000]    <2> 	mov cx, [posyvesa]
  9746 00007935 668915[E4780000]    <2> 	mov [posxvesa], dx
  9747 0000793C 8B3D[25580000]      <2> 	mov edi, [physbaseptr]
  9748 00007942 66891D[E8780000]    <2> 	mov [colorfont], bx
  9749 00007949 668B2D[E8780000]    <2> 	mov bp, [colorfont]
  9750 00007950 31DB                <2> 	xor ebx, ebx
  9751 00007952 6689C3              <2> 	mov bx, ax
  9752 00007955 31C0                <2> 	xor eax, eax
  9753 00007957 6689D8              <2> 	mov ax, bx
  9754 0000795A 6689D3              <2> 	mov bx, dx
  9755 0000795D 89DA                <2> 	mov edx, ebx
  9756 0000795F 31DB                <2> 	xor ebx, ebx
  9757 00007961 6681F90000          <2> 	cmp cx, 0
  9758 00007966 7414                <2> 	je vesaposloopdn
  9759 00007968 668B1D[FD580000]    <2> 	mov bx, [resolutionx2]
  9760                              <2> vesaposloop:
  9761 0000796F 52                  <2> 	push edx
  9762 00007970 50                  <2> 	push eax
  9763 00007971 31C0                <2> 	xor eax, eax
  9764 00007973 6689C8              <2> 	mov ax, cx
  9765 00007976 F7E3                <2> 	mul ebx
  9766 00007978 01C7                <2> 	add edi, eax
  9767 0000797A 58                  <2> 	pop eax
  9768 0000797B 5A                  <2> 	pop edx
  9769                              <2> vesaposloopdn:
  9770 0000797C 01D7                <2> 	add edi, edx
  9771 0000797E BE[338C0000]        <2> 	mov esi, fonts
  9772                              <2> findfontvesa:
  9773 00007983 663D0A00            <2> 	cmp ax, 10
  9774 00007987 0F84EB000000        <2> 	je near nwlinevesa
  9775 0000798D C1E004              <2> 	shl eax, 4
  9776 00007990 01C6                <2> 	add esi, eax
  9777 00007992 C1E804              <2> 	shr eax, 4
  9778 00007995 81FE[338C0300]      <2> 	cmp esi, fontend
  9779 0000799B 0F83AB000000        <2> 	jae near donefontvesa
  9780 000079A1 4E                  <2> 	dec esi
  9781                              <2> foundfontvesa:
  9782 000079A2 46                  <2> 	inc esi
  9783 000079A3 803D[EE800000]01    <2> 	cmp byte [savefonton], 1
  9784 000079AA 0F84EA000000        <2> 	je near vesafontsaver
  9785 000079B0 30C9                <2> 	xor cl, cl
  9786 000079B2 8A06                <2> 	mov al, [esi]
  9787 000079B4 668B15[FD580000]    <2> 	mov dx, [resolutionx2]
  9788 000079BB 662B15[E4780000]    <2> 	sub dx, [posxvesa]
  9789 000079C2 6681FA1000          <2> 	cmp dx, 16
  9790 000079C7 7708                <2> 	ja paintfontvesa
  9791 000079C9 D0EA                <2> 	shr dl, 1
  9792 000079CB 8815[777A0000]      <2> 	mov [charwidth], dl
  9793                              <2> paintfontvesa:
  9794 000079D1 B201                <2> 	mov dl, 1
  9795 000079D3 20C2                <2> 	and dl, al
  9796 000079D5 803D[ED800000]01    <2> 	cmp byte [showcursorfonton], 1
  9797 000079DC 0F842E000000        <2> 	je near nodelpaintedfont
  9798 000079E2 803D[ED800000]02    <2> 	cmp byte [showcursorfonton], 2
  9799 000079E9 0F8511000000        <2> 	jne near noswitchcursorfonton
  9800 000079EF 80FA00              <2> 	cmp dl, 0
  9801 000079F2 0F8420000000        <2> 	je near nopixelset
  9802 000079F8 66892F              <2> 	mov [edi], bp
  9803 000079FB E918000000          <2> 	jmp nopixelset
  9804                              <2> noswitchcursorfonton:
  9805 00007A00 3215[EF800000]      <2> 	xor dl, [mouseselecton]
  9806 00007A06 668B1D[FE710000]    <2> 	mov bx, [background]
  9807 00007A0D 66891F              <2> 	mov [edi], bx
  9808                              <2> nodelpaintedfont:
  9809 00007A10 80FA00              <2> 	cmp dl, 0
  9810 00007A13 7403                <2> 	je nopixelset
  9811 00007A15 66892F              <2> 	mov [edi], bp
  9812                              <2> nopixelset:
  9813 00007A18 81C702000000        <2> 	add edi, 2
  9814 00007A1E D0C0                <2> 	rol al, 1
  9815 00007A20 FEC1                <2> 	inc cl
  9816 00007A22 3A0D[777A0000]      <2> 	cmp cl, [charwidth]
  9817 00007A28 72A7                <2> 	jb paintfontvesa
  9818 00007A2A FEC5                <2> 	inc ch
  9819 00007A2C 31D2                <2> 	xor edx, edx
  9820 00007A2E 668B15[FD580000]    <2> 	mov dx, [resolutionx2]
  9821 00007A35 01D7                <2> 	add edi, edx
  9822 00007A37 31D2                <2> 	xor edx, edx
  9823 00007A39 8A15[777A0000]      <2> 	mov dl, [charwidth]
  9824 00007A3F 00D2                <2> 	add dl, dl
  9825 00007A41 29D7                <2> 	sub edi, edx
  9826 00007A43 80FD10              <2> 	cmp ch, 16
  9827 00007A46 0F8256FFFFFF        <2> 	jb foundfontvesa
  9828                              <2> donefontvesa:
  9829 00007A4C C605[777A0000]08    <2> 	mov byte [charwidth], 8
  9830 00007A53 668B15[E4780000]    <2> 	mov dx, [posxvesa]
  9831 00007A5A 8A1D[777A0000]      <2> 	mov bl, [charwidth]
  9832 00007A60 30FF                <2> 	xor bh, bh
  9833 00007A62 6601DA              <2> 	add dx, bx
  9834 00007A65 6689EB              <2> 	mov bx, bp
  9835 00007A68 668B0D[E6780000]    <2> 	mov cx, [posyvesa]
  9836 00007A6F 883D[EE800000]      <2> 	mov [savefonton], bh
  9837 00007A75 5D                  <2> 	pop ebp
  9838 00007A76 C3                  <2> 	ret
  9839 00007A77 08                  <2> charwidth db 8
  9840                              <2> nwlinevesa:
  9841 00007A78 6631D2              <2> 	xor dx, dx
  9842 00007A7B 668915[E4780000]    <2> 	mov [posxvesa], dx
  9843 00007A82 668B0D[E6780000]    <2> 	mov cx, [posyvesa]
  9844 00007A89 6681C11000          <2> 	add cx, 16
  9845 00007A8E 66890D[E6780000]    <2> 	mov [posyvesa], cx
  9846 00007A95 E9B2FFFFFF          <2> 	jmp donefontvesa
  9847                              <2> vesafontsaver:
  9848 00007A9A 30C0                <2> 	xor al, al
  9849 00007A9C 30C9                <2> 	xor cl, cl
  9850                              <2> vesafontsaver2:
  9851 00007A9E 66392F              <2> 	cmp [edi], bp
  9852 00007AA1 742F                <2> 	je colorfontmatch
  9853                              <2> donecolormatch:
  9854 00007AA3 81C702000000        <2> 	add edi, 2
  9855 00007AA9 D0C0                <2> 	rol al, 1
  9856 00007AAB FEC1                <2> 	inc cl
  9857 00007AAD 80F908              <2> 	cmp cl, 8
  9858 00007AB0 72EC                <2> 	jb vesafontsaver2
  9859 00007AB2 8806                <2> 	mov [esi], al
  9860 00007AB4 46                  <2> 	inc esi
  9861 00007AB5 FEC5                <2> 	inc ch
  9862 00007AB7 31D2                <2> 	xor edx, edx
  9863 00007AB9 668B15[FD580000]    <2> 	mov dx, [resolutionx2]
  9864 00007AC0 01D7                <2> 	add edi, edx
  9865 00007AC2 81EF10000000        <2> 	sub edi, 16
  9866 00007AC8 80FD10              <2> 	cmp ch, 16
  9867 00007ACB 72CD                <2> 	jb vesafontsaver
  9868 00007ACD E97AFFFFFF          <2> 	jmp donefontvesa
  9869                              <2> colorfontmatch:
  9870 00007AD2 0401                <2> 	add al, 1
  9871 00007AD4 E9CAFFFFFF          <2> 	jmp donecolormatch
  9872                              <1> %include "source/gui/window.asm"
  9873 00007AD9 0000                <2> winvcopystx dw 0
  9874 00007ADB 0000                <2> winvcopysty dw 0
  9875 00007ADD 0000                <2> winvcopydx dw 0
  9876 00007ADF 0000                <2> winvcopycx dw 0
  9877 00007AE1 FFFF0000            <2> windowcolor dw 0xFFFF,0
  9878 00007AE5 00000000            <2> windowbufloc: dd 0
  9879 00007AE9 00000000            <2> windowvideobuf dd 0
  9880 00007AED 00000000            <2> windowvideobuf2 dd 0
  9881 00007AF1 00000000            <2> windowinfobuf dd 0
  9882 00007AF5 0000                <2> termcol dw 0
  9883 00007AF7 00000000            <2> wincopyendpos dd 0
  9884                              <2> 
  9885                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9886 00007AFB C605[12240000]01    <2> 		mov byte [termguion], 1
  9887 00007B02 6681C11000          <2> 		add cx, 16
  9888 00007B07 668915[D97A0000]    <2> 		mov [winvcopystx], dx
  9889 00007B0E 66890D[DB7A0000]    <2> 		mov [winvcopysty], cx
  9890 00007B15 8935[F17A0000]      <2> 		mov [windowinfobuf], esi
  9891 00007B1B 668B16              <2> 		mov dx, [esi]
  9892 00007B1E 668B4E02            <2> 		mov cx, [esi + 2]
  9893 00007B22 31C0                <2> 		xor eax, eax
  9894 00007B24 31DB                <2> 		xor ebx, ebx
  9895 00007B26 6689D0              <2> 		mov ax, dx
  9896 00007B29 6689CB              <2> 		mov bx, cx
  9897 00007B2C 66C1E803            <2> 		shr ax, 3
  9898 00007B30 66C1EB04            <2> 		shr bx, 4
  9899 00007B34 66A3[F57A0000]      <2> 		mov [termcol], ax
  9900 00007B3A A2[09260000]        <2> 		mov [charxy], al
  9901 00007B3F 881D[0A260000]      <2> 		mov [charxy + 1], bl
  9902 00007B45 8B7E04              <2> 		mov edi, [esi + 4]
  9903 00007B48 893D[E17A0000]      <2> 		mov [windowcolor], edi
  9904 00007B4E 8B7E0C              <2> 		mov edi, [esi + 12]
  9905 00007B51 893D[ED7A0000]      <2> 		mov [windowvideobuf2], edi
  9906 00007B57 8B7E08              <2> 		mov edi, [esi + 8]
  9907 00007B5A 893D[E97A0000]      <2> 		mov [windowvideobuf], edi
  9908 00007B60 81FB00000000        <2> 		cmp ebx, 0
  9909 00007B66 0F8460050000        <2> 		je near donewincopynow
  9910                              <2> 	findendposwin:
  9911 00007B6C C1E002              <2> 		shl eax, 2
  9912 00007B6F 31D2                <2> 		xor edx, edx
  9913 00007B71 F7E3                <2> 		mul ebx
  9914 00007B73 01C7                <2> 		add edi, eax
  9915 00007B75 893D[F77A0000]      <2> 		mov [wincopyendpos], edi
  9916 00007B7B 31FF                <2> 		xor edi, edi
  9917 00007B7D 6631C0              <2> 		xor ax, ax
  9918 00007B80 6631DB              <2> 		xor bx, bx
  9919 00007B83 6601D2              <2> 		add dx, dx
  9920 00007B86 668915[DD7A0000]    <2> 		mov [winvcopydx], dx
  9921 00007B8D 66890D[DF7A0000]    <2> 		mov [winvcopycx], cx
  9922 00007B94 668B0D[DB7A0000]    <2> 		mov cx, [winvcopysty]
  9923 00007B9B 6681E91000          <2> 		sub cx, 16
  9924 00007BA0 668B15[D97A0000]    <2> 		mov dx, [winvcopystx]
  9925 00007BA7 C605[13240000]00    <2> 		mov byte [termcopyon], 0
  9926 00007BAE B403                <2> 		mov ah, 3
  9927 00007BB0 E8BE0A0000          <2> 		call graphicsadd
  9928                              <2> 	showwindow2:
  9929 00007BB5 6681C11000          <2> 		add cx, 16
  9930 00007BBA 668915[D97A0000]    <2> 		mov [winvcopystx], dx
  9931 00007BC1 66890D[DB7A0000]    <2> 		mov [winvcopysty], cx
  9932 00007BC8 668B16              <2> 		mov dx, [esi]
  9933 00007BCB 668B4E02            <2> 		mov cx, [esi + 2]
  9934 00007BCF 6601D2              <2> 		add dx, dx
  9935 00007BD2 668915[DD7A0000]    <2> 		mov [winvcopydx], dx
  9936 00007BD9 66890D[DF7A0000]    <2> 		mov [winvcopycx], cx
  9937 00007BE0 E818000000          <2> 		call reloadwindowtitle
  9938 00007BE5 803D[5A860000]01    <2> 		cmp byte [windrag], 1
  9939 00007BEC 0F83E9040000        <2> 		jae near forgetresetstuff
  9940 00007BF2 8B3D[E57A0000]      <2> 		mov edi, [windowbufloc]
  9941 00007BF8 E96E020000          <2> 		jmp windowvideocopyset
  9942                              <2> 		
  9943                              <2> 	reloadwindowtitle:
  9944 00007BFD 8B3D[E57A0000]      <2> 		mov edi, [windowbufloc]
  9945 00007C03 31D2                <2> 		xor edx, edx
  9946 00007C05 668B15[FD580000]    <2> 		mov dx, [resolutionx2]
  9947 00007C0C C1E204              <2> 		shl edx, 4
  9948 00007C0F 29D7                <2> 		sub edi, edx
  9949 00007C11 803D[13240000]00    <2> 		cmp byte [termcopyon], 0
  9950 00007C18 7532                <2> 		jne nocleartitlebarpos
  9951 00007C1A 8B3D[25580000]      <2> 		mov edi, [physbaseptr]
  9952 00007C20 31D2                <2> 		xor edx, edx
  9953 00007C22 668B15[D97A0000]    <2> 		mov dx, [winvcopystx]
  9954 00007C29 01D7                <2> 		add edi, edx
  9955 00007C2B 31C9                <2> 		xor ecx, ecx
  9956 00007C2D 668B0D[DB7A0000]    <2> 		mov cx, [winvcopysty]
  9957 00007C34 6681E91000          <2> 		sub cx, 16
  9958 00007C39 6681F90000          <2> 		cmp cx, 0
  9959 00007C3E 740C                <2> 		je nocleartitlebarpos
  9960                              <2> 	cleartitlebarpos:
  9961 00007C40 31C0                <2> 		xor eax, eax
  9962 00007C42 66A1[FD580000]      <2> 		mov ax, [resolutionx2]
  9963 00007C48 F7E1                <2> 		mul ecx
  9964 00007C4A 01C7                <2> 		add edi, eax
  9965                              <2> 	nocleartitlebarpos:
  9966 00007C4C 66B91000            <2> 		mov cx, 16
  9967 00007C50 668B15[DD7A0000]    <2> 		mov dx, [winvcopydx]
  9968 00007C57 6681F90000          <2> 		cmp cx, 0
  9969 00007C5C 0F8448000000        <2> 		je near canceltitlebarput
  9970 00007C62 6681FA0000          <2> 		cmp dx, 0
  9971 00007C67 0F843D000000        <2> 		je near canceltitlebarput
  9972                              <2> 	titlebarput:
  9973 00007C6D 66A1[E17A0000]      <2> 		mov ax, [windowcolor]
  9974 00007C73 668907              <2> 		mov [edi], ax
  9975 00007C76 6681EA0200          <2> 		sub dx, 2
  9976 00007C7B 81C702000000        <2> 		add edi, 2
  9977 00007C81 6681FA0000          <2> 		cmp dx, 0
  9978 00007C86 75E5                <2> 		jne titlebarput
  9979 00007C88 31D2                <2> 		xor edx, edx
  9980 00007C8A 668B15[FD580000]    <2> 		mov dx, [resolutionx2]
  9981 00007C91 6649                <2> 		dec cx
  9982 00007C93 662B15[DD7A0000]    <2> 		sub dx, [winvcopydx]
  9983 00007C9A 01D7                <2> 		add edi, edx
  9984 00007C9C 668B15[DD7A0000]    <2> 		mov dx, [winvcopydx]
  9985 00007CA3 6681F90000          <2> 		cmp cx, 0
  9986 00007CA8 75C3                <2> 		jne titlebarput
  9987                              <2> 	canceltitlebarput:
  9988 00007CAA 893D[E57A0000]      <2> 		mov [windowbufloc], edi
  9989 00007CB0 803D[13240000]02    <2> 		cmp byte [termcopyon], 2
  9990 00007CB7 0F841C010000        <2> 		je near winvcpst
  9991 00007CBD 668B1D[FE710000]    <2> 		mov bx, [background]
  9992 00007CC4 6653                <2> 		push bx
  9993 00007CC6 6631DB              <2> 		xor bx, bx
  9994 00007CC9 66891D[FE710000]    <2> 		mov [background], bx
  9995 00007CD0 6631C0              <2> 		xor ax, ax
  9996 00007CD3 81C610000000        <2> 		add esi, 16
  9997 00007CD9 668B15[D97A0000]    <2> 		mov dx, [winvcopystx]
  9998 00007CE0 668B0D[DB7A0000]    <2> 		mov cx, [winvcopysty]
  9999 00007CE7 6681E91000          <2> 		sub cx, 16
 10000 00007CEC 668B1D[E17A0000]    <2> 		mov bx, [windowcolor]
 10001 00007CF3 C605[EF800000]01    <2> 		mov byte [mouseselecton], 1
 10002 00007CFA E86EFBFFFF          <2> 		call showstring2	;Show window title
 10003 00007CFF 8B35[512D0000]      <2> 		mov esi, [usercache]
 10004 00007D05 6681C21000          <2> 		add dx, 16
 10005 00007D0A C605[EF800000]01    <2> 		mov byte [mouseselecton], 1
 10006 00007D11 E857FBFFFF          <2> 		call showstring2	;Show user name
 10007 00007D16 BE[A4890000]        <2> 		mov esi, computer
 10008 00007D1B C605[EF800000]01    <2> 		mov byte [mouseselecton], 1
 10009 00007D22 E846FBFFFF          <2> 		call showstring2	;Show computer name
 10010 00007D27 66B85800            <2> 		mov ax, "X"
 10011 00007D2B 66BB00F8            <2> 		mov bx, 1111100000000000b
 10012 00007D2F 668B15[D97A0000]    <2> 		mov dx, [winvcopystx]
 10013 00007D36 668B0D[DB7A0000]    <2> 		mov cx, [winvcopysty]
 10014 00007D3D 6681E91000          <2> 		sub cx, 16
 10015 00007D42 6681EA1000          <2> 		sub dx, 16
 10016 00007D47 660315[DD7A0000]    <2> 		add dx, [winvcopydx]
 10017 00007D4E C605[EF800000]01    <2> 		mov byte [mouseselecton], 1
 10018 00007D55 663B15[FD580000]    <2> 		cmp dx, [resolutionx2]
 10019 00007D5C 7305                <2> 		jae .nox
 10020 00007D5E E88EFBFFFF          <2> 		call showfontvesa
 10021                              <2> .nox:
 10022 00007D63 668B1D[FE710000]    <2> 		mov bx, [background]
 10023 00007D6A 6681EA1800          <2> 		sub dx, 24
 10024 00007D6F 66B82B00            <2> 		mov ax, "+"
 10025 00007D73 66BBE007            <2> 		mov bx, 0000011111100000b
 10026 00007D77 C605[EF800000]01    <2> 		mov byte [mouseselecton], 1
 10027 00007D7E 663B15[FD580000]    <2> 		cmp dx, [resolutionx2]
 10028 00007D85 7305                <2> 		jae .noplus
 10029 00007D87 E865FBFFFF          <2> 		call showfontvesa
 10030                              <2> .noplus:
 10031 00007D8C 6681EA1800          <2> 		sub dx, 24
 10032 00007D91 66B82D00            <2> 		mov ax, "-"
 10033 00007D95 66BBE0FF            <2> 		mov bx, 1111111111100000b
 10034 00007D99 C605[EF800000]01    <2> 		mov byte [mouseselecton], 1
 10035 00007DA0 663B15[FD580000]    <2> 		cmp dx, [resolutionx2]
 10036 00007DA7 7305                <2> 		jae .nominus
 10037 00007DA9 E843FBFFFF          <2> 		call showfontvesa
 10038                              <2> .nominus:
 10039 00007DAE 6681EA1800          <2> 		sub dx, 24
 10040 00007DB3 66B83F00            <2> 		mov ax, "?"
 10041 00007DB7 66BB1F00            <2> 		mov bx, 0000000000011111b
 10042 00007DBB C605[EF800000]01    <2> 		mov byte [mouseselecton], 1
 10043 00007DC2 663B15[FD580000]    <2> 		cmp dx, [resolutionx2]
 10044 00007DC9 7305                <2> 		jae .noquestion
 10045 00007DCB E821FBFFFF          <2> 		call showfontvesa
 10046                              <2> .noquestion:
 10047 00007DD0 665B                <2> 		pop bx
 10048 00007DD2 66891D[FE710000]    <2> 		mov [background], bx
 10049                              <2> 	winvcpst:
 10050 00007DD9 C3                  <2> 		ret
 10051                              <2> 
 10052                              <2> 	windowvideocopy:
 10053 00007DDA 8B35[F17A0000]      <2> 		mov esi, [windowinfobuf]
 10054 00007DE0 668B16              <2> 		mov dx, [esi]
 10055 00007DE3 668B4E02            <2> 		mov cx, [esi + 2]
 10056 00007DE7 8B7E04              <2> 		mov edi, [esi + 4]
 10057 00007DEA 893D[E17A0000]      <2> 		mov [windowcolor], edi
 10058 00007DF0 8B7E08              <2> 		mov edi, [esi + 8]
 10059 00007DF3 8B5E0C              <2> 		mov ebx, [esi + 12]
 10060 00007DF6 893D[E97A0000]      <2> 		mov [windowvideobuf], edi
 10061 00007DFC 891D[ED7A0000]      <2> 		mov [windowvideobuf2], ebx
 10062 00007E02 31C0                <2> 		xor eax, eax
 10063 00007E04 31DB                <2> 		xor ebx, ebx
 10064 00007E06 6689D0              <2> 		mov ax, dx
 10065 00007E09 6689CB              <2> 		mov bx, cx
 10066 00007E0C 66C1E803            <2> 		shr ax, 3
 10067 00007E10 66C1EB04            <2> 		shr bx, 4
 10068 00007E14 66A3[F57A0000]      <2> 		mov [termcol], ax
 10069 00007E1A A2[09260000]        <2> 		mov [charxy], al
 10070 00007E1F 881D[0A260000]      <2> 		mov [charxy + 1], bl
 10071 00007E25 8B3D[E57A0000]      <2> 		mov edi, [windowbufloc]
 10072 00007E2B 3B3D[25580000]      <2> 		cmp edi, [physbaseptr]
 10073 00007E31 0F8334000000        <2> 		jae near windowvideocopyset
 10074 00007E37 31C9                <2> 		xor ecx, ecx
 10075 00007E39 31D2                <2> 		xor edx, edx
 10076 00007E3B 668B15[D97A0000]    <2> 		mov dx, [winvcopystx]
 10077 00007E42 668B0D[DB7A0000]    <2> 		mov cx, [winvcopysty]
 10078 00007E49 8B3D[25580000]      <2> 		mov edi, [physbaseptr]
 10079 00007E4F 01D7                <2> 		add edi, edx
 10080 00007E51 81F900000000        <2> 		cmp ecx, 0
 10081 00007E57 7412                <2> 		je windowvideocopyset
 10082                              <2> 	yrescopylp:
 10083 00007E59 31C0                <2> 		xor eax, eax
 10084 00007E5B 66A1[FD580000]      <2> 		mov ax, [resolutionx2]
 10085 00007E61 F7E1                <2> 		mul ecx
 10086 00007E63 01C7                <2> 		add edi, eax
 10087 00007E65 893D[E57A0000]      <2> 		mov [windowbufloc], edi
 10088                              <2> 	windowvideocopyset:
 10089 00007E6B 6631C9              <2> 		xor cx, cx
 10090 00007E6E 6649                <2> 		dec cx
 10091 00007E70 66890D[E3800000]    <2> 		mov [charposline], cx
 10092 00007E77 89FE                <2> 		mov esi, edi
 10093 00007E79 81EE10000000        <2> 		sub esi, 16
 10094 00007E7F 31D2                <2> 		xor edx, edx
 10095 00007E81 668B15[FD580000]    <2> 		mov dx, [resolutionx2]
 10096 00007E88 C1E204              <2> 		shl edx, 4
 10097 00007E8B 01D6                <2> 		add esi, edx
 10098 00007E8D 8B3D[E97A0000]      <2> 		mov edi, [windowvideobuf]
 10099 00007E93 81EF04000000        <2> 		sub edi, 4
 10100 00007E99 893D[E5800000]      <2> 		mov [charposvbuf], edi
 10101 00007E9F E91B010000          <2> 		jmp nextcharwin
 10102                              <2> 	win.write:	;adjusted this to use alpha
 10103                              <2> 				;5R, 6G, 5B
 10104                              <2> %ifdef gui.alphablending
 10105 00007EA4 56                  <2> 		push esi
 10106 00007EA5 6653                <2> 		push bx
 10107 00007EA7 6651                <2> 		push cx
 10108 00007EA9 6652                <2> 		push dx
 10109                              <2> %ifdef gui.background
 10110 00007EAB 89FE                <2> 		mov esi, edi
 10111 00007EAD 2B35[25580000]      <2> 		sub esi, [physbaseptr]
 10112 00007EB3 0335[D0710000]      <2> 		add esi, [backgroundimage]
 10113 00007EB9 813D[D0710000]0000- <2> 		cmp dword [backgroundimage], 0
 10114 00007EC1 0000                <2>
 10115 00007EC3 7505                <2> 		jne .red
 10116                              <2> %endif
 10117 00007EC5 BE[FE710000]        <2> 		mov esi, background
 10118                              <2> 	.red:
 10119 00007ECA 668B0E              <2> 		mov cx, [esi]
 10120 00007ECD 66C1E90B            <2> 		shr cx, 11
 10121 00007ED1 6689C3              <2> 		mov bx, ax
 10122 00007ED4 66C1EB0B            <2> 		shr bx, 11
 10123 00007ED8 6601D9              <2> 		add cx, bx
 10124 00007EDB 6601D9              <2> 		add cx, bx
 10125 00007EDE 6601D9              <2> 		add cx, bx
 10126 00007EE1 66C1E902            <2> 		shr cx, 2
 10127 00007EE5 66C1E10B            <2> 		shl cx, 11
 10128 00007EE9 6689CA              <2> 		mov dx, cx
 10129                              <2> 	.green:
 10130 00007EEC 668B0E              <2> 		mov cx, [esi]
 10131 00007EEF 66C1E105            <2> 		shl cx, 5
 10132 00007EF3 66C1E90A            <2> 		shr cx, 10
 10133 00007EF7 6689C3              <2> 		mov bx, ax
 10134 00007EFA 66C1E305            <2> 		shl bx, 5
 10135 00007EFE 66C1EB0A            <2> 		shr bx, 10
 10136 00007F02 6601D9              <2> 		add cx, bx
 10137 00007F05 6601D9              <2> 		add cx, bx
 10138 00007F08 6601D9              <2> 		add cx, bx
 10139 00007F0B 66C1E902            <2> 		shr cx, 2
 10140 00007F0F 66C1E105            <2> 		shl cx, 5
 10141 00007F13 6601CA              <2> 		add dx, cx
 10142                              <2> 	.blue:
 10143 00007F16 668B0E              <2> 		mov cx, [esi]
 10144 00007F19 66C1E10B            <2> 		shl cx, 11
 10145 00007F1D 66C1E90B            <2> 		shr cx, 11
 10146 00007F21 6689C3              <2> 		mov bx, ax
 10147 00007F24 66C1E30B            <2> 		shl bx, 11
 10148 00007F28 66C1EB0B            <2> 		shr bx, 11
 10149 00007F2C 6601D9              <2> 		add cx, bx
 10150 00007F2F 6601D9              <2> 		add cx, bx
 10151 00007F32 6601D9              <2> 		add cx, bx
 10152 00007F35 66C1E902            <2> 		shr cx, 2
 10153 00007F39 6601CA              <2> 		add dx, cx
 10154 00007F3C 668917              <2> 		mov [edi], dx
 10155 00007F3F 665A                <2> 		pop dx
 10156 00007F41 6659                <2> 		pop cx
 10157 00007F43 665B                <2> 		pop bx
 10158 00007F45 5E                  <2> 		pop esi
 10159                              <2> %else
 10160                              <2> 		mov [edi], ax
 10161                              <2> %endif
 10162 00007F46 C3                  <2> 		ret
 10163                              <2> 	copywindow:
 10164 00007F47 B201                <2> 		mov dl, 1
 10165 00007F49 D0C6                <2> 		rol dh, 1
 10166 00007F4B 20F2                <2> 		and dl, dh
 10167 00007F4D 66813D[E2780000]80- <2> 		cmp word [colorcache], 0x80
 10168 00007F55 00                  <2>
 10169 00007F56 7320                <2> 		jae switchwincolors
 10170 00007F58 66A1[E37A0000]      <2> 		mov ax, [windowcolor + 2]
 10171 00007F5E E841FFFFFF          <2> 		call win.write
 10172 00007F63 80FA00              <2> 		cmp dl, 0
 10173 00007F66 742B                <2> 		je nowritewin
 10174 00007F68 66A1[E17A0000]      <2> 		mov ax, [windowcolor]
 10175 00007F6E E831FFFFFF          <2> 		call win.write
 10176 00007F73 E91B000000          <2> 		jmp nowritewin
 10177                              <2> 	switchwincolors:
 10178 00007F78 66A1[E17A0000]      <2> 		mov ax, [windowcolor]
 10179 00007F7E E821FFFFFF          <2> 		call win.write
 10180 00007F83 80FA00              <2> 		cmp dl, 0
 10181 00007F86 740B                <2> 		je nowritewin
 10182 00007F88 66A1[E37A0000]      <2> 		mov ax, [windowcolor + 2]
 10183 00007F8E E811FFFFFF          <2> 		call win.write
 10184                              <2> 	nowritewin:
 10185 00007F93 81C702000000        <2> 		add edi, 2
 10186 00007F99 FEC1                <2> 		inc cl
 10187 00007F9B 80F908              <2> 		cmp cl, 8
 10188 00007F9E 75A7                <2> 		jne copywindow
 10189 00007FA0 43                  <2> 		inc ebx
 10190 00007FA1 30C9                <2> 		xor cl, cl
 10191 00007FA3 31D2                <2> 		xor edx, edx
 10192 00007FA5 668B15[FD580000]    <2> 		mov dx, [resolutionx2]
 10193 00007FAC 01D6                <2> 		add esi, edx
 10194 00007FAE 89F7                <2> 		mov edi, esi
 10195 00007FB0 8AB3[338C0000]      <2> 		mov dh, [fonts + ebx]
 10196 00007FB6 D0CE                <2> 		ror dh, 1
 10197 00007FB8 FEC5                <2> 		inc ch
 10198 00007FBA 80FD10              <2> 		cmp ch, 16
 10199 00007FBD 7588                <2> 		jne copywindow
 10200                              <2> 	nextcharwin:
 10201 00007FBF 6631C9              <2> 		xor cx, cx
 10202 00007FC2 8B3D[E5800000]      <2> 		mov edi, [charposvbuf]
 10203 00007FC8 81C704000000        <2> 		add edi, 4
 10204 00007FCE 3B3D[F77A0000]      <2> 		cmp edi, [wincopyendpos]
 10205 00007FD4 0F83F2000000        <2> 		jae near donewincopynow
 10206 00007FDA 668B5F02            <2> 		mov bx, [edi + 2]
 10207 00007FDE 6681FB0000          <2> 		cmp bx, 0
 10208 00007FE3 7508                <2> 		jne nofixcolorwin
 10209 00007FE5 66BB0700            <2> 		mov bx, 7
 10210 00007FE9 66895F02            <2> 		mov [edi + 2], bx
 10211                              <2> 	nofixcolorwin:
 10212 00007FED 66891D[E2780000]    <2> 		mov [colorcache], bx
 10213 00007FF4 8B1F                <2> 		mov ebx, [edi]
 10214 00007FF6 893D[E5800000]      <2> 		mov [charposvbuf], edi
 10215 00007FFC 813D[ED7A0000]0000- <2> 		cmp dword [windowvideobuf2], 0
 10216 00008004 0000                <2>
 10217 00008006 7455                <2> 		je noskipcharcopy
 10218 00008008 2B3D[E97A0000]      <2> 		sub edi, [windowvideobuf]
 10219 0000800E 033D[ED7A0000]      <2> 		add edi, [windowvideobuf2]
 10220 00008014 8B07                <2> 		mov eax, [edi]
 10221 00008016 39D8                <2> 		cmp eax, ebx
 10222 00008018 7543                <2> 		jne noskipcharcopy
 10223                              <2> 	skipcharcopy:
 10224 0000801A 81C610000000        <2> 		add esi, 16
 10225 00008020 668B0D[E3800000]    <2> 		mov cx, [charposline]
 10226 00008027 6641                <2> 		inc cx
 10227 00008029 66890D[E3800000]    <2> 		mov [charposline], cx
 10228 00008030 663B0D[F57A0000]    <2> 		cmp cx, [termcol]
 10229 00008037 7286                <2> 		jb nextcharwin
 10230 00008039 6631C9              <2> 		xor cx, cx
 10231 0000803C 66890D[E3800000]    <2> 		mov [charposline], cx
 10232 00008043 31D2                <2> 		xor edx, edx
 10233 00008045 668B15[FD580000]    <2> 		mov dx, [resolutionx2]
 10234 0000804C C1E204              <2> 		shl edx, 4
 10235 0000804F 662B15[DD7A0000]    <2> 		sub dx, [winvcopydx]
 10236 00008056 01D6                <2> 		add esi, edx
 10237 00008058 E962FFFFFF          <2> 		jmp nextcharwin
 10238                              <2> 	noskipcharcopy:
 10239 0000805D 891F                <2> 		mov [edi], ebx
 10240 0000805F 8B3D[E5800000]      <2> 		mov edi, [charposvbuf]
 10241 00008065 C1E310              <2> 		shl ebx, 16
 10242 00008068 C1EB0C              <2> 		shr ebx, 12
 10243 0000806B 31D2                <2> 		xor edx, edx
 10244 0000806D 668B15[FD580000]    <2> 		mov dx, [resolutionx2]
 10245 00008074 C1E204              <2> 		shl edx, 4
 10246 00008077 29D6                <2> 		sub esi, edx
 10247 00008079 81C610000000        <2> 		add esi, 16
 10248 0000807F 89F7                <2> 		mov edi, esi
 10249 00008081 668B0D[E3800000]    <2> 		mov cx, [charposline]
 10250 00008088 6641                <2> 		inc cx
 10251 0000808A 663B0D[F57A0000]    <2> 		cmp cx, [termcol]
 10252 00008091 7317                <2> 		jae fixwindowcopy
 10253 00008093 66890D[E3800000]    <2> 		mov [charposline], cx
 10254 0000809A 6631C9              <2> 		xor cx, cx
 10255 0000809D 8AB3[338C0000]      <2> 		mov dh, [fonts + ebx]
 10256 000080A3 D0CE                <2> 		ror dh, 1
 10257 000080A5 E99DFEFFFF          <2> 		jmp copywindow
 10258                              <2> fixwindowcopy:
 10259 000080AA 6631C9              <2> 		xor cx, cx
 10260 000080AD 66890D[E3800000]    <2> 		mov [charposline], cx
 10261 000080B4 662B15[DD7A0000]    <2> 		sub dx, [winvcopydx]
 10262 000080BB 01D6                <2> 		add esi, edx
 10263 000080BD 89F7                <2> 		mov edi, esi
 10264 000080BF 8AB3[338C0000]      <2> 		mov dh, [fonts + ebx]
 10265 000080C5 D0CE                <2> 		ror dh, 1
 10266 000080C7 E97BFEFFFF          <2> 		jmp copywindow
 10267                              <2> donewincopynow:
 10268 000080CC 803D[13240000]01    <2> 		cmp byte [termcopyon], 1
 10269 000080D3 7506                <2> 		jne forgetresetstuff
 10270 000080D5 E855A9FFFF          <2> 		call switchtermcursor
 10271 000080DA 61                  <2> 		popa
 10272                              <2> forgetresetstuff:
 10273 000080DB C605[13240000]00    <2> 		mov byte [termcopyon], 0
 10274 000080E2 C3                  <2> 		ret
 10275                              <2> 		
 10276 000080E3 0000                <2> charposline dw 0
 10277 000080E5 00000000            <2> charposvbuf dw 0,0
 10278                              <1> 				
 10279 000080E9 00                  <1> copygui db 0
 10280 000080EA 00                  <1> graphicsset db 0
 10281 000080EB 0000                <1> graphicspos db 0,0
 10282 000080ED 00                  <1> showcursorfonton db 0
 10283 000080EE 00                  <1> savefonton db 0
 10284 000080EF 00                  <1> mouseselecton db 0
 10285                              <1> 
 10286 000080F0 00                  <1> pbutton db 0
 10287 000080F1 00                  <1> pLBUTTON db 0
 10288 000080F2 00                  <1> pRBUTTON db 0
 10289 000080F3 00000000            <1> dragging dw 0,0
 10290 000080F7 0000000000000000    <1> lastpos dw 0,0,0,0
 10291 000080FF 00000000            <1> colorbuf dw 0,0
 10292                              <1> 	
 10293                              <1> 	clickicon:
 10294 00008103 B001                <1> 		mov al, 1
 10295 00008105 A2[F0800000]        <1> 		mov [pbutton], al
 10296 0000810A A0[F1800000]        <1> 		mov al, [pLBUTTON]
 10297 0000810F 2205[045C0000]      <1> 		and al, [LBUTTON]
 10298 00008115 8A25[F2800000]      <1> 		mov ah, [pRBUTTON]
 10299 0000811B 2225[055C0000]      <1> 		and ah, [RBUTTON]
 10300 00008121 08E0                <1> 		or al, ah
 10301 00008123 3C00                <1> 		cmp al, 0
 10302 00008125 741B                <1> 		je nodragclick
 10303 00008127 813D[F3800000]0100- <1> 		cmp dword [dragging], 1
 10304 0000812F 0000                <1>
 10305 00008131 732F                <1> 		jae dragclick
 10306 00008133 C705[F3800000]0100- <1> 		mov dword [dragging], 1
 10307 0000813B 0000                <1>
 10308 0000813D E920000000          <1> 		jmp dragclick
 10309                              <1> 	nodragclick:
 10310 00008142 31C0                <1> 		xor eax, eax
 10311 00008144 A3[F3800000]        <1> 		mov dword [dragging], eax
 10312 00008149 A2[F0800000]        <1> 		mov [pbutton], al
 10313 0000814E A0[045C0000]        <1> 		mov al, [LBUTTON]
 10314 00008153 A2[F1800000]        <1> 		mov [pLBUTTON], al
 10315 00008158 A0[055C0000]        <1> 		mov al, [RBUTTON]
 10316 0000815D A2[F2800000]        <1> 		mov [pRBUTTON], al
 10317                              <1> 	dragclick:
 10318 00008162 6631C0              <1> 		xor ax, ax
 10319 00008165 BE[9CCC0300]        <1> 		mov esi, graphicstable
 10320 0000816A C705[6E890000]0000- <1> 		mov dword [codepointer], 0
 10321 00008172 0000                <1>
 10322                              <1> 	clicon2:
 10323 00008174 31D2                <1> 		xor edx, edx
 10324 00008176 31C9                <1> 		xor ecx, ecx
 10325 00008178 66813E0100          <1> 		cmp word [esi], 1
 10326 0000817D 0F841B000000        <1> 		je near iconselect
 10327 00008183 66813E0200          <1> 		cmp word [esi], 2
 10328 00008188 0F8472010000        <1> 		je near textselected
 10329 0000818E 66813E0300          <1> 		cmp word [esi], 3
 10330 00008193 0F84CA020000        <1> 		je near windowselect
 10331 00008199 E913040000          <1> 		jmp nexticonsel
 10332                              <1> 	iconselect:
 10333 0000819E 668B5606            <1> 		mov dx, [esi + 6]
 10334 000081A2 6689D0              <1> 		mov ax, dx
 10335 000081A5 668B4E08            <1> 		mov cx, [esi + 8]
 10336 000081A9 6689CB              <1> 		mov bx, cx
 10337 000081AC 6681C32000          <1> 		add bx, 32
 10338 000081B1 6601D0              <1> 		add ax, dx
 10339 000081B4 813D[F3800000]0100- <1> 		cmp dword [dragging], 1
 10340 000081BC 0000                <1>
 10341 000081BE 746F                <1> 		je dragicon
 10342 000081C0 813D[F3800000]0000- <1> 		cmp dword [dragging], 0
 10343 000081C8 0000                <1>
 10344 000081CA 7411                <1> 		je nodragiconcheck
 10345 000081CC 3935[F3800000]      <1> 		cmp dword [dragging], esi
 10346 000081D2 0F85D9030000        <1> 		jne near nexticonsel
 10347 000081D8 E952000000          <1> 		jmp dragicon
 10348                              <1> 	nodragiconcheck:
 10349 000081DD 663905[F35A0000]    <1> 		cmp [mousecursorposition], ax
 10350 000081E4 0F82C7030000        <1> 		jb near nexticonsel
 10351 000081EA 66054000            <1> 		add ax, 64
 10352 000081EE 663905[F35A0000]    <1> 		cmp [mousecursorposition], ax
 10353 000081F5 0F87B6030000        <1> 		ja near nexticonsel
 10354 000081FB 6629D0              <1> 		sub ax, dx
 10355 000081FE 66390D[F55A0000]    <1> 		cmp [mousecursorposition + 2], cx
 10356 00008205 0F82A6030000        <1> 		jb near nexticonsel
 10357 0000820B 66391D[F55A0000]    <1> 		cmp [mousecursorposition + 2], bx
 10358 00008212 0F8799030000        <1> 		ja near nexticonsel
 10359 00008218 668B460A            <1> 		mov ax, [esi + 10]
 10360 0000821C 66250100            <1> 		and ax, 1
 10361 00008220 663D0100            <1> 		cmp ax, 1
 10362 00008224 0F84B6000000        <1> 		je near unselecticon
 10363 0000822A E98D000000          <1> 		jmp nodragicon
 10364                              <1> 	dragicon:
 10365 0000822F 663905[EF5A0000]    <1> 		cmp [lastmouseposition], ax
 10366 00008236 0F8275030000        <1> 		jb near nexticonsel
 10367 0000823C 66054000            <1> 		add ax, 64
 10368 00008240 663905[EF5A0000]    <1> 		cmp [lastmouseposition], ax
 10369 00008247 0F8764030000        <1> 		ja near nexticonsel
 10370 0000824D 6629D0              <1> 		sub ax, dx
 10371 00008250 66390D[F15A0000]    <1> 		cmp [lastmouseposition + 2], cx
 10372 00008257 0F8254030000        <1> 		jb near nexticonsel
 10373 0000825D 66391D[F15A0000]    <1> 		cmp [lastmouseposition + 2], bx
 10374 00008264 0F8747030000        <1> 		ja near nexticonsel
 10375 0000826A 668B460A            <1> 		mov ax, [esi + 10]
 10376 0000826E 2410                <1> 		and al, 00010000b
 10377 00008270 3C10                <1> 		cmp al, 00010000b
 10378 00008272 7448                <1> 		je nodragicon
 10379 00008274 8935[F3800000]      <1> 		mov [dragging], esi
 10380 0000827A 66D1E2              <1> 		shl dx, 1
 10381 0000827D 662B15[EF5A0000]    <1> 		sub dx, [lastmouseposition]
 10382 00008284 660315[F35A0000]    <1> 		add dx, [mousecursorposition]
 10383 0000828B 66D1EA              <1> 		shr dx, 1
 10384 0000828E 66030D[F55A0000]    <1> 		add cx, [mousecursorposition + 2]
 10385 00008295 662B0D[F15A0000]    <1> 		sub cx, [lastmouseposition + 2]
 10386 0000829C 663B15[FD580000]    <1> 		cmp dx, [resolutionx2]
 10387 000082A3 7607                <1> 		jbe chkyresdrgicn
 10388 000082A5 668B15[F35A0000]    <1> 		mov dx, [mousecursorposition]
 10389                              <1> 	chkyresdrgicn:
 10390 000082AC 663B0D[11580000]    <1> 		cmp cx, [resolutiony]
 10391 000082B3 7607                <1> 		jbe nodragicon
 10392 000082B5 668B0D[F55A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10393                              <1> 	nodragicon:
 10394 000082BC 66814E0A0100        <1> 		or word [esi + 10], 1
 10395 000082C2 8B5E0C              <1> 		mov ebx, [esi + 12]
 10396 000082C5 668B460A            <1> 		mov ax, [esi + 10]
 10397 000082C9 8B7602              <1> 		mov esi, [esi + 2]
 10398 000082CC C705[6E890000]0000- <1> 		mov dword [codepointer], 0
 10399 000082D4 0000                <1>
 10400 000082D6 E893ECFFFF          <1> 		call showicon
 10401 000082DB E9EA020000          <1> 		jmp doneiconsel
 10402                              <1> 	unselecticon:
 10403 000082E0 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10404 000082E6 8B5E0C              <1> 		mov ebx, [esi + 12]
 10405 000082E9 668B460A            <1> 		mov ax, [esi + 10]
 10406 000082ED 8B7602              <1> 		mov esi, [esi + 2]
 10407 000082F0 891D[6E890000]      <1> 		mov [codepointer], ebx
 10408 000082F6 E873ECFFFF          <1> 		call showicon
 10409 000082FB E9CA020000          <1> 		jmp doneiconsel
 10410                              <1> 	textselected:
 10411 00008300 8B5E02              <1> 		mov ebx, [esi + 2]
 10412 00008303 668B5606            <1> 		mov dx, [esi + 6]
 10413 00008307 6689D0              <1> 		mov ax, dx
 10414 0000830A 668B4E08            <1> 		mov cx, [esi + 8]
 10415                              <1> 	lengthtesttext:
 10416 0000830E 803B00              <1> 		cmp byte [ebx], 0
 10417 00008311 740A                <1> 		je donetesttextlength
 10418 00008313 43                  <1> 		inc ebx
 10419 00008314 66051000            <1> 		add ax, 16
 10420 00008318 E9F1FFFFFF          <1> 		jmp lengthtesttext
 10421                              <1> 	donetesttextlength:
 10422 0000831D 6689CB              <1> 		mov bx, cx
 10423 00008320 6681C30F00          <1> 		add bx, 15
 10424 00008325 813D[F3800000]0100- <1> 		cmp dword [dragging], 1
 10425 0000832D 0000                <1>
 10426 0000832F 7468                <1> 		je dragtext
 10427 00008331 813D[F3800000]0000- <1> 		cmp dword [dragging], 0
 10428 00008339 0000                <1>
 10429 0000833B 7411                <1> 		je nodragtextcheck
 10430 0000833D 3935[F3800000]      <1> 		cmp dword [dragging], esi
 10431 00008343 0F8568020000        <1> 		jne near nexticonsel
 10432 00008349 E94B000000          <1> 		jmp dragtext
 10433                              <1> 	nodragtextcheck:
 10434 0000834E 663915[F35A0000]    <1> 		cmp [mousecursorposition], dx
 10435 00008355 0F8256020000        <1> 		jb near nexticonsel
 10436 0000835B 663905[F35A0000]    <1> 		cmp [mousecursorposition], ax
 10437 00008362 0F8749020000        <1> 		ja near nexticonsel
 10438 00008368 66390D[F55A0000]    <1> 		cmp [mousecursorposition + 2], cx
 10439 0000836F 0F823C020000        <1> 		jb near nexticonsel
 10440 00008375 66391D[F55A0000]    <1> 		cmp [mousecursorposition + 2], bx
 10441 0000837C 0F872F020000        <1> 		ja near nexticonsel
 10442 00008382 668B460A            <1> 		mov ax, [esi + 10]
 10443 00008386 66250100            <1> 		and ax, 1
 10444 0000838A 663D0100            <1> 		cmp ax, 1
 10445 0000838E 0F84AB000000        <1> 		je near unselecttext
 10446 00008394 E986000000          <1> 		jmp nodragtext
 10447                              <1> 	dragtext:
 10448 00008399 663915[EF5A0000]    <1> 		cmp [lastmouseposition], dx
 10449 000083A0 0F820B020000        <1> 		jb near nexticonsel
 10450 000083A6 663905[EF5A0000]    <1> 		cmp [lastmouseposition], ax
 10451 000083AD 0F87FE010000        <1> 		ja near nexticonsel
 10452 000083B3 66390D[F15A0000]    <1> 		cmp [lastmouseposition + 2], cx
 10453 000083BA 0F82F1010000        <1> 		jb near nexticonsel
 10454 000083C0 66391D[F15A0000]    <1> 		cmp [lastmouseposition + 2], bx
 10455 000083C7 0F87E4010000        <1> 		ja near nexticonsel
 10456 000083CD 668B460A            <1> 		mov ax, [esi + 10]
 10457 000083D1 2410                <1> 		and al, 00010000b
 10458 000083D3 663D1000            <1> 		cmp ax, 00010000b
 10459 000083D7 0F8442000000        <1> 		je near nodragtext
 10460 000083DD 8935[F3800000]      <1> 		mov [dragging], esi
 10461 000083E3 662B15[EF5A0000]    <1> 		sub dx, [lastmouseposition]
 10462 000083EA 660315[F35A0000]    <1> 		add dx, [mousecursorposition]
 10463 000083F1 66030D[F55A0000]    <1> 		add cx, [mousecursorposition + 2]
 10464 000083F8 662B0D[F15A0000]    <1> 		sub cx, [lastmouseposition + 2]
 10465 000083FF 663B15[FD580000]    <1> 		cmp dx, [resolutionx2]
 10466 00008406 7607                <1> 		jbe chkyresdrgtxt
 10467 00008408 668B15[F35A0000]    <1> 		mov dx, [mousecursorposition]
 10468                              <1> 	chkyresdrgtxt:
 10469 0000840F 663B0D[11580000]    <1> 		cmp cx, [resolutiony]
 10470 00008416 7607                <1> 		jbe nodragtext
 10471 00008418 668B0D[F55A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10472                              <1> 	nodragtext:
 10473 0000841F 66814E0A0100        <1> 		or word [esi + 10], 1
 10474 00008425 8B5E0C              <1> 		mov ebx, [esi + 12]
 10475 00008428 891D[6E890000]      <1> 		mov [codepointer], ebx
 10476 0000842E 668B460A            <1> 		mov ax, [esi + 10]
 10477 00008432 8B7602              <1> 		mov esi, [esi + 2]
 10478 00008435 E820F4FFFF          <1> 		call showstring
 10479 0000843A E98B010000          <1> 		jmp doneiconsel
 10480                              <1> 	unselecttext:
 10481 0000843F 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10482 00008445 8B5E0C              <1> 		mov ebx, [esi + 12]
 10483 00008448 668B460A            <1> 		mov ax, [esi + 10]
 10484 0000844C 8B7602              <1> 		mov esi, [esi + 2]
 10485 0000844F C705[6E890000]0000- <1> 		mov dword [codepointer], 0
 10486 00008457 0000                <1>
 10487 00008459 E8FCF3FFFF          <1> 		call showstring
 10488 0000845E E967010000          <1> 		jmp doneiconsel
 10489                              <1> windowselect:
 10490 00008463 8B7E02              <1> 		mov edi, [esi + 2]
 10491 00008466 668B5606            <1> 		mov dx, [esi + 6]
 10492 0000846A 6689D0              <1> 		mov ax, dx
 10493 0000846D 668B4E08            <1> 		mov cx, [esi + 8]
 10494 00008471 6689CB              <1> 		mov bx, cx
 10495 00008474 6681C31000          <1> 		add bx, 16
 10496 00008479 813D[F3800000]0100- <1> 		cmp dword [dragging], 1
 10497 00008481 0000                <1>
 10498 00008483 746D                <1> 		je dragwin
 10499 00008485 813D[F3800000]0000- <1> 		cmp dword [dragging], 0
 10500 0000848D 0000                <1>
 10501 0000848F 7411                <1> 		je nodragwincheck
 10502 00008491 3935[F3800000]      <1> 		cmp dword [dragging], esi
 10503 00008497 0F8514010000        <1> 		jne near nexticonsel
 10504 0000849D E950000000          <1> 		jmp dragwin
 10505                              <1> 	nodragwincheck:
 10506 000084A2 663905[F35A0000]    <1> 		cmp [mousecursorposition], ax
 10507 000084A9 0F8202010000        <1> 		jb near nexticonsel
 10508 000084AF 660307              <1> 		add ax, [edi]
 10509 000084B2 660307              <1> 		add ax, [edi]
 10510 000084B5 663905[F35A0000]    <1> 		cmp [mousecursorposition], ax
 10511 000084BC 0F87EF000000        <1> 		ja near nexticonsel
 10512 000084C2 66390D[F55A0000]    <1> 		cmp [mousecursorposition + 2], cx
 10513 000084C9 0F82E2000000        <1> 		jb near nexticonsel
 10514 000084CF 66391D[F55A0000]    <1> 		cmp [mousecursorposition + 2], bx
 10515 000084D6 0F87D5000000        <1> 		ja near nexticonsel
 10516 000084DC 662D1400            <1> 		sub ax, 20
 10517 000084E0 663905[F35A0000]    <1> 		cmp [mousecursorposition], ax
 10518 000084E7 0F87A4000000        <1> 		ja near killwin
 10519 000084ED E98B000000          <1> 		jmp nodragwin
 10520                              <1> 	dragwin:
 10521 000084F2 663905[EF5A0000]    <1> 		cmp [lastmouseposition], ax
 10522 000084F9 0F82B2000000        <1> 		jb near nexticonsel
 10523 000084FF 660307              <1> 		add ax, [edi]
 10524 00008502 660307              <1> 		add ax, [edi]
 10525 00008505 663905[EF5A0000]    <1> 		cmp [lastmouseposition], ax
 10526 0000850C 0F879F000000        <1> 		ja near nexticonsel
 10527 00008512 66390D[F15A0000]    <1> 		cmp [lastmouseposition + 2], cx
 10528 00008519 0F8292000000        <1> 		jb near nexticonsel
 10529 0000851F 66391D[F15A0000]    <1> 		cmp [lastmouseposition + 2], bx
 10530 00008526 0F8785000000        <1> 		ja near nexticonsel
 10531 0000852C 8935[F3800000]      <1> 		mov [dragging], esi
 10532 00008532 803D[5A860000]01    <1> 		cmp byte [windrag], 1
 10533 00008539 7706                <1> 		ja .nochangewindrag
 10534 0000853B FE05[5A860000]      <1> 		inc byte [windrag]
 10535                              <1> 	.nochangewindrag:
 10536 00008541 662B15[EF5A0000]    <1> 		sub dx, [lastmouseposition]
 10537 00008548 660315[F35A0000]    <1> 		add dx, [mousecursorposition]
 10538 0000854F 66030D[F55A0000]    <1> 		add cx, [mousecursorposition + 2]
 10539 00008556 662B0D[F15A0000]    <1> 		sub cx, [lastmouseposition + 2]
 10540 0000855D 663B15[FD580000]    <1> 		cmp dx, [resolutionx2]
 10541 00008564 7607                <1> 		jbe chkyresdrgwin
 10542 00008566 668B15[F35A0000]    <1> 		mov dx, [mousecursorposition]
 10543                              <1> 	chkyresdrgwin:
 10544 0000856D 663B0D[11580000]    <1> 		cmp cx, [resolutiony]
 10545 00008574 7607                <1> 		jbe nodragwin
 10546 00008576 668B0D[F55A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10547                              <1> 	nodragwin:
 10548 0000857D 8B5E0C              <1> 		mov ebx, [esi + 12]
 10549 00008580 668B460A            <1> 		mov ax, [esi + 10]
 10550 00008584 8B7602              <1> 		mov esi, [esi + 2]
 10551 00008587 E86FF5FFFF          <1> 		call showwindow
 10552 0000858C E939000000          <1> 		jmp doneiconsel
 10553                              <1> 	killwin:
 10554 00008591 66C7060000          <1> 		mov word [esi], 0
 10555 00008596 C605[12240000]00    <1> 		mov byte [termguion], 0
 10556 0000859D E8CDEBFFFF          <1> 		call guiclear
 10557 000085A2 E85BECFFFF          <1> 		call reloadallgraphics
 10558 000085A7 E85FE9FFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10559 000085AC E9F4E4FFFF          <1> 		jmp guistart
 10560                              <1> 	nexticonsel:
 10561 000085B1 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10562 000085B7 81C610000000        <1> 		add esi, 16
 10563 000085BD 81FE[9CCE0300]      <1> 		cmp esi, graphicstableend
 10564 000085C3 7305                <1> 		jae doneiconsel
 10565 000085C5 E9AAFBFFFF          <1> 		jmp clicon2
 10566                              <1> 	doneiconsel:
 10567 000085CA 813D[F3800000]0100- <1> 		cmp dword [dragging], 1
 10568 000085D2 0000                <1>
 10569 000085D4 731A                <1> 		jae doneiconsel2
 10570 000085D6 A2[5A860000]        <1> 		mov [windrag], al
 10571 000085DB 813D[6E890000]0000- <1> 		cmp dword [codepointer], 0
 10572 000085E3 0000                <1>
 10573 000085E5 7409                <1> 		je doneiconsel2
 10574 000085E7 8B1D[6E890000]      <1> 		mov ebx, [codepointer]
 10575 000085ED FFD3                <1> 		call ebx
 10576 000085EF C3                  <1> 		ret
 10577                              <1> 	doneiconsel2:
 10578 000085F0 A0[045C0000]        <1> 		mov al, [LBUTTON]
 10579 000085F5 A2[F1800000]        <1> 		mov [pLBUTTON], al
 10580 000085FA A0[055C0000]        <1> 		mov al, [RBUTTON]
 10581 000085FF A2[F2800000]        <1> 		mov [pRBUTTON], al
 10582 00008604 813D[F3800000]0100- <1> 		cmp dword [dragging], 1
 10583 0000860C 0000                <1>
 10584 0000860E 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10585 00008614 E8F2E8FFFF          <1> 		call switchmousepos2
 10586 00008619 803D[5A860000]01    <1> 		cmp byte [windrag], 1
 10587 00008620 7305                <1> 		jae noclearcursorcl
 10588 00008622 E8E8E7FFFF          <1> 		call clearmousecursor
 10589                              <1> noclearcursorcl:
 10590 00008627 E8D6EBFFFF          <1> 		call reloadallgraphics
 10591                              <1> noreloadgraphicsclick:
 10592 0000862C 30E4                <1> 		xor ah, ah
 10593 0000862E 31C9                <1> 		xor ecx, ecx
 10594 00008630 31D2                <1> 		xor edx, edx
 10595 00008632 B001                <1> 		mov al, 1
 10596 00008634 668B15[F35A0000]    <1> 		mov dx, [mousecursorposition]
 10597 0000863B 668B0D[F55A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10598 00008642 66BBE738            <1> 		mov bx, 0011100011100111b
 10599 00008646 C605[ED800000]01    <1> 		mov byte [showcursorfonton], 1
 10600 0000864D E89FF2FFFF          <1> 		call showfontvesa
 10601 00008652 C605[ED800000]00    <1> 		mov byte [showcursorfonton], 0
 10602 00008659 C3                  <1> 		ret
 10603 0000865A 00                  <1> windrag db 0
 10604 0000865B 00000000            <1> lastdrag dw 0,0
 10605 0000865F 00000000            <1> grpctblpos dw 0,0
 10606                              <1> 
 10607                              <1> 
 10608                              <1> 
 10609 00008663 00<rept>            <1> grphbuf times 16 db 0
 10610                              <1> 	graphicsadd:
 10611 00008673 BF[9CCC0300]        <1> 		mov edi, graphicstable
 10612                              <1> 	shwgrph1:
 10613 00008678 397702              <1> 		cmp dword [edi + 2], esi
 10614 0000867B 7417                <1> 		je showgraphicsreplace2
 10615 0000867D 81C710000000        <1> 		add edi, 16
 10616 00008683 81FF[9CCE0300]      <1> 		cmp edi, graphicstableend
 10617 00008689 0F835F020000        <1> 		jae near showgraphicsnew
 10618 0000868F E9E4FFFFFF          <1> 		jmp shwgrph1
 10619                              <1> 	showgraphicsreplace2:
 10620 00008694 8935[65860000]      <1> 		mov [grphbuf + 2], esi
 10621 0000869A 668915[69860000]    <1> 		mov [grphbuf + 6], dx
 10622 000086A1 66890D[6B860000]    <1> 		mov [grphbuf + 8], cx
 10623 000086A8 891D[6F860000]      <1> 		mov [grphbuf + 12], ebx
 10624 000086AE 30FF                <1> 		xor bh, bh
 10625 000086B0 88E3                <1> 		mov bl, ah
 10626 000086B2 30E4                <1> 		xor ah, ah
 10627 000086B4 66A3[6D860000]      <1> 		mov [grphbuf + 10], ax	
 10628 000086BA 66891D[63860000]    <1> 		mov [grphbuf], bx
 10629 000086C1 66A1[63860000]      <1> 		mov ax, [grphbuf]
 10630 000086C7 663D0100            <1> 		cmp ax, 1
 10631 000086CB 0F8419000000        <1> 		je near replaceicon
 10632 000086D1 663D0200            <1> 		cmp ax, 2
 10633 000086D5 0F8493000000        <1> 		je near replacestring
 10634 000086DB 663D0300            <1> 		cmp ax, 3
 10635 000086DF 0F840F010000        <1> 		je near replacewindow
 10636 000086E5 E9E1010000          <1> 		jmp showgraphicsreplace
 10637                              <1> 	replaceicon:
 10638 000086EA 893D[F7800000]      <1> 		mov [lastpos], edi
 10639 000086F0 8935[FB800000]      <1> 		mov [lastpos + 4], esi
 10640 000086F6 8B7702              <1> 		mov esi, [edi + 2]
 10641 000086F9 668B5F0C            <1> 		mov bx, [edi + 12]
 10642 000086FD 668B5706            <1> 		mov dx, [edi + 6]
 10643 00008701 668B4F08            <1> 		mov cx, [edi + 8]
 10644 00008705 668B06              <1> 		mov ax, [esi]
 10645 00008708 66A3[FF800000]      <1> 		mov [colorbuf], ax
 10646 0000870E 66A1[FE710000]      <1> 		mov ax, [background]
 10647 00008714 668906              <1> 		mov [esi], ax
 10648 00008717 8B5F0C              <1> 		mov ebx, [edi + 12]
 10649 0000871A 668B470A            <1> 		mov ax, [edi + 10]
 10650 0000871E 2401                <1> 		and al, 1
 10651 00008720 A2[72890000]        <1> 		mov [iconselected], al
 10652 00008725 668B470A            <1> 		mov ax, [edi + 10]
 10653 00008729 E853E8FFFF          <1> 		call showicon2
 10654 0000872E 8B3D[F7800000]      <1> 		mov edi, [lastpos]
 10655 00008734 8B7702              <1> 		mov esi, [edi + 2]
 10656 00008737 66A1[FF800000]      <1> 		mov ax, [colorbuf]
 10657 0000873D 668906              <1> 		mov [esi], ax
 10658 00008740 8B35[FB800000]      <1> 		mov esi, [lastpos + 4]
 10659 00008746 668B15[69860000]    <1> 		mov dx, [grphbuf + 6]
 10660 0000874D 668B0D[6B860000]    <1> 		mov cx, [grphbuf + 8]
 10661 00008754 668B1D[63860000]    <1> 		mov bx, [grphbuf]
 10662 0000875B 66A1[6D860000]      <1> 		mov ax, [grphbuf + 10]
 10663 00008761 88DC                <1> 		mov ah, bl
 10664 00008763 8B1D[6F860000]      <1> 		mov ebx, [grphbuf + 12]
 10665 00008769 E95D010000          <1> 		jmp showgraphicsreplace
 10666                              <1> 	replacestring:
 10667 0000876E 893D[F7800000]      <1> 		mov [lastpos], edi
 10668 00008774 8935[FB800000]      <1> 		mov [lastpos + 4], esi
 10669 0000877A 8B5F0C              <1> 		mov ebx, [edi + 12]
 10670 0000877D 8B7702              <1> 		mov esi, [edi + 2]
 10671 00008780 668B5706            <1> 		mov dx, [edi + 6]
 10672 00008784 668B4F08            <1> 		mov cx, [edi + 8]
 10673 00008788 66A1[E0780000]      <1> 		mov ax, [colorfont2]
 10674 0000878E 66A3[FF800000]      <1> 		mov [colorbuf], ax
 10675 00008794 66A1[FE710000]      <1> 		mov ax, [background]
 10676 0000879A 66A3[E0780000]      <1> 		mov [colorfont2], ax		
 10677 000087A0 8B5F0C              <1> 		mov ebx, [edi + 12]
 10678 000087A3 668B470A            <1> 		mov ax, [edi + 10]
 10679 000087A7 2401                <1> 		and al, 1
 10680 000087A9 A2[EF800000]        <1> 		mov [mouseselecton], al
 10681 000087AE 668B470A            <1> 		mov ax, [edi + 10]
 10682 000087B2 E8B6F0FFFF          <1> 		call showstring2
 10683 000087B7 66A1[FF800000]      <1> 		mov ax, [colorbuf]
 10684 000087BD 66A3[E0780000]      <1> 		mov [colorfont2], ax
 10685 000087C3 8B3D[F7800000]      <1> 		mov edi, [lastpos]
 10686 000087C9 8B7702              <1> 		mov esi, [edi + 2]
 10687 000087CC 668B15[69860000]    <1> 		mov dx, [grphbuf + 6]
 10688 000087D3 668B0D[6B860000]    <1> 		mov cx, [grphbuf + 8]
 10689 000087DA 668B1D[63860000]    <1> 		mov bx, [grphbuf]
 10690 000087E1 66A1[6D860000]      <1> 		mov ax, [grphbuf + 10]
 10691 000087E7 88DC                <1> 		mov ah, bl
 10692 000087E9 8B1D[6F860000]      <1> 		mov ebx, [grphbuf + 12]
 10693 000087EF E9D7000000          <1> 		jmp showgraphicsreplace
 10694                              <1> 	replacewindow:
 10695 000087F4 893D[F7800000]      <1> 		mov [lastpos], edi
 10696 000087FA 8935[FB800000]      <1> 		mov [lastpos + 4], esi
 10697 00008800 8B7702              <1> 		mov esi, [edi + 2]
 10698 00008803 8B3D[E57A0000]      <1> 		mov edi, [windowbufloc]
 10699 00008809 31D2                <1> 		xor edx, edx
 10700 0000880B 668B15[FD580000]    <1> 		mov dx, [resolutionx2]
 10701 00008812 C1E204              <1> 		shl edx, 4
 10702 00008815 29D7                <1> 		sub edi, edx
 10703 00008817 31D2                <1> 		xor edx, edx
 10704 00008819 668B16              <1> 		mov dx, [esi]
 10705 0000881C 660316              <1> 		add dx, [esi]
 10706 0000881F 668B4E02            <1> 		mov cx, [esi + 2]
 10707 00008823 6681C11000          <1> 		add cx, 16
 10708 00008828 66A1[FE710000]      <1> 		mov ax, [background]
 10709 0000882E 803D[5A860000]01    <1> 		cmp byte [windrag], 1
 10710 00008835 7604                <1> 		jbe clearwindow
 10711 00008837 662B4E02            <1> 		sub cx, [esi + 2]
 10712                              <1> 	clearwindow:
 10713                              <1> 		%ifdef gui.background
 10714 0000883B 813D[D0710000]0000- <1> 			cmp dword [backgroundimage], 0
 10715 00008843 0000                <1>
 10716 00008845 7419                <1> 			je .noback
 10717 00008847 56                  <1> 			push esi
 10718 00008848 8B35[D0710000]      <1> 			mov esi, [backgroundimage]
 10719 0000884E 2B3D[25580000]      <1> 			sub edi, [physbaseptr]
 10720 00008854 01FE                <1> 			add esi, edi
 10721 00008856 033D[25580000]      <1> 			add edi, [physbaseptr]
 10722 0000885C 668B06              <1> 			mov ax, [esi]
 10723 0000885F 5E                  <1> 			pop esi
 10724                              <1> 		.noback:
 10725                              <1> 		%endif
 10726 00008860 668907              <1> 		mov [edi], ax
 10727 00008863 81C702000000        <1> 		add edi, 2
 10728 00008869 81EA02000000        <1> 		sub edx, 2
 10729 0000886F 81FA00000000        <1> 		cmp edx, 0
 10730 00008875 75C4                <1> 		jne clearwindow
 10731 00008877 6649                <1> 		dec cx
 10732 00008879 668B15[FD580000]    <1> 		mov dx, [resolutionx2]
 10733 00008880 662B16              <1> 		sub dx, [esi]
 10734 00008883 662B16              <1> 		sub dx, [esi]
 10735 00008886 01D7                <1> 		add edi, edx
 10736 00008888 668B16              <1> 		mov dx, [esi]
 10737 0000888B 660316              <1> 		add dx, [esi]
 10738 0000888E 6681F90000          <1> 		cmp cx, 0
 10739 00008893 75A6                <1> 		jne clearwindow
 10740                              <1> 	endwindowclear:
 10741 00008895 C605[13240000]00    <1> 		mov byte [termcopyon], 0
 10742 0000889C 8B3D[F7800000]      <1> 		mov edi, [lastpos]
 10743 000088A2 8B35[65860000]      <1> 		mov esi, [grphbuf + 2]
 10744 000088A8 668B15[69860000]    <1> 		mov dx, [grphbuf + 6]
 10745 000088AF 668B0D[6B860000]    <1> 		mov cx, [grphbuf + 8]
 10746 000088B6 668B1D[63860000]    <1> 		mov bx, [grphbuf]
 10747 000088BD 66A1[6D860000]      <1> 		mov ax, [grphbuf + 10]
 10748 000088C3 88DC                <1> 		mov ah, bl
 10749 000088C5 8B1D[6F860000]      <1> 		mov ebx, [grphbuf + 12]
 10750                              <1> 	showgraphicsreplace:
 10751 000088CB 897702              <1> 		mov [edi + 2], esi
 10752 000088CE 66895706            <1> 		mov [edi + 6], dx
 10753 000088D2 66894F08            <1> 		mov [edi + 8], cx
 10754 000088D6 895F0C              <1> 		mov [edi + 12], ebx
 10755 000088D9 30FF                <1> 		xor bh, bh
 10756 000088DB 88E3                <1> 		mov bl, ah
 10757 000088DD 30E4                <1> 		xor ah, ah
 10758 000088DF 6689470A            <1> 		mov [edi + 10], ax
 10759 000088E3 66891F              <1> 		mov [edi], bx
 10760 000088E6 8B5F0C              <1> 		mov ebx, [edi + 12]
 10761 000088E9 668B470A            <1> 		mov ax, [edi + 10]
 10762 000088ED C3                  <1> 		ret
 10763                              <1> 	showgraphicsnew:
 10764 000088EE BF[9CCC0300]        <1> 		mov edi, graphicstable
 10765                              <1> 	shwgrph2:
 10766 000088F3 66813F0000          <1> 		cmp word [edi], 0
 10767 000088F8 74D1                <1> 		je showgraphicsreplace
 10768 000088FA 81C710000000        <1> 		add edi, 16
 10769 00008900 81FF[9CCE0300]      <1> 		cmp edi, graphicstableend
 10770 00008906 72EB                <1> 		jb shwgrph2
 10771                              <1> 	showgraphicsdone:
 10772 00008908 C3                  <1> 		ret
 10773                              <1> 	
 10774                              <1> putpixel: ;color in si, point is (dx,cx)
 10775                              <1> 		;destroys edi, ebx, eax
 10776 00008909 6650                <1> 	push ax
 10777 0000890B 6653                <1> 	push bx
 10778 0000890D 31C0                <1> 	xor eax, eax
 10779 0000890F 31DB                <1> 	xor ebx, ebx
 10780 00008911 31FF                <1> 	xor edi, edi
 10781 00008913 668B1D[11580000]    <1> 	mov bx, [resolutiony]
 10782 0000891A 66A1[0F580000]      <1> 	mov ax, [resolutionx]
 10783 00008920 6639C2              <1> 	cmp dx, ax
 10784 00008923 7720                <1> 	ja .doneput
 10785 00008925 66D1E0              <1> 	shl ax, 1
 10786 00008928 6639D9              <1> 	cmp cx, bx
 10787 0000892B 7718                <1> 	ja .doneput
 10788 0000892D 6689CB              <1> 	mov bx, cx
 10789 00008930 52                  <1> 	push edx
 10790 00008931 F7E3                <1> 	mul ebx
 10791 00008933 5A                  <1> 	pop edx
 10792 00008934 6601D7              <1> 	add di, dx
 10793 00008937 6601D7              <1> 	add di, dx
 10794 0000893A 01C7                <1> 	add edi, eax
 10795 0000893C 033D[25580000]      <1> 	add edi, [physbaseptr]
 10796 00008942 668937              <1> 	mov [edi], si
 10797                              <1> .doneput:
 10798 00008945 665B                <1> 	pop bx
 10799 00008947 6658                <1> 	pop ax
 10800 00008949 C3                  <1> 	ret
 10801                              <1> 	
 10802                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10803 0000894A 31FF                <1> 	xor edi, edi
 10804 0000894C 31C0                <1> 	xor eax, eax
 10805 0000894E 31DB                <1> 	xor ebx, ebx
 10806 00008950 668B1D[FD580000]    <1> 	mov bx, [resolutionx2]
 10807 00008957 6689D7              <1> 	mov di, dx
 10808 0000895A 6601D7              <1> 	add di, dx
 10809 0000895D 6689C8              <1> 	mov ax, cx
 10810 00008960 F7E3                <1> 	mul ebx
 10811 00008962 01C7                <1> 	add edi, eax
 10812 00008964 033D[25580000]      <1> 	add edi, [physbaseptr]
 10813 0000896A C3                  <1> 	ret
 10814                              <1> 
 10815 0000896B 00                  <1> 	mouseon db 0
 10816 0000896C 0000                <1> 	icon dw 0	;pointer to icon
 10817 0000896E 00000000            <1> 	codepointer dd 0 ;pointer to code
 10818 00008972 00                  <1> 	iconselected db 0
 10819                                  %endif
 10820                                  %ifdef network.included
 10821                                  	%include "source/network.asm"
 10822                                  %endif
 10823                                      %include "source/data.asm"
 10824 00008973 626F6F742E736800    <1> 	bootfilename db	"boot.sh",0
 10825 0000897B 73687573683A2000    <1> 	notfound1 db	"shush: ",0
 10826 00008983 3A206E6F7420666F75- <1> 	notfound2 db	": not found",10,0
 10827 0000898C 6E640A00            <1>
 10828 00008990 757365726E616D653A- <1> 	userask db	"username:",0
 10829 00008999 00                  <1>
 10830 0000899A 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10831 000089A3 00                  <1>
 10832 000089A4 40                  <1> 	computer db	"@"
 10833                              <1> %ifdef io.serial
 10834                              <1> 	computername db	"SollerOS.",io.serial," ",0
 10835                              <1> %else
 10836 000089A5 536F6C6C65724F5320- <1> 	computername db	"SollerOS ",0
 10837 000089AE 00                  <1>
 10838                              <1> %endif
 10839 000089AF 5D242000            <1> 	endprompt db "]$ ",0
 10840 000089B3 0D                  <1> 	crlf 	db	13
 10841 000089B4 0A00                <1> 	line	db	10,0
 10842                              <1> 	userlst:
 10843 000089B6 726F6F7400          <1> 			db "root",0
 10844 000089BB 617765736F6D65706F- <1> 			db "awesomepower",0
 10845 000089C4 77657200            <1>
 10846 000089C8 7573657200          <1> 			db "user",0
 10847 000089CD 70617373776F726400  <1> 			db "password",0
 10848 000089D6 6E00                <1> 			db "n",0	;abuse for quick entry-a quick double n followed by a double enter will get you in
 10849 000089D8 00                  <1> 			db 0
 10850                              <1> 	userlstend:
 10851                              <1> 	
 10852 000089D9 00                  <1> 	guion db 0
 10853 000089DA 00                  <1> 	DriveNumber db 0
 10854 000089DB 00000000            <1> 	lbaad dd 0
 10855 000089DF 0000000000000000    <1> 	initialtsc dd 0,0
 10856 000089E7 0000000000000000    <1> 	lasttsc dd 0,0
 10857 000089EF 00<rept>            <1> 	memlistbuf times 576 db 0
 10858 00008C2F 00000000            <1> 	memlistend: dd 0
 10859                              <1> %ifdef io.serial
 10860                              <1> %else
 10861                              <1> fonts:
 10862                              <1> %ifdef font.unicode
 10863 00008C33 <incbin>            <1> 	incbin "source/fonts/fonts-unicode.pak"
 10864                              <1> %else
 10865                              <1> 	incbin "source/fonts/fonts-ascii.pak"
 10866                              <1> %endif
 10867                              <1> fontend:
 10868                              <1> %endif
 10869                              <1> osend:	;this is the end of the operating system's space on disk
 10870                                  %ifdef disk.none
 10871                                  	diskfileindex:
 10872                                  	enddiskfileindex:
 10873                                      %include "source/bss.asm"
 10874                                  %else
 10875                                      %include "build/fileindex.asm"
 10876                              <1> diskfileindex:
 10877 00038C33 5F696D672E62696E00  <1> db "_img.bin",0
 10878 00038C3C C7010000            <1> dd (f0-$$)/512
 10879 00038C40 0C000000            <1> dd (f1-f0)/512
 10880 00038C44 626F6F742E736800    <1> db "boot.sh",0
 10881 00038C4C D3010000            <1> dd (f1-$$)/512
 10882 00038C50 01000000            <1> dd (f2-f1)/512
 10883 00038C54 646F73746573742E63- <1> db "dostest.com",0
 10884 00038C5D 6F6D00              <1>
 10885 00038C60 D4010000            <1> dd (f2-$$)/512
 10886 00038C64 01000000            <1> dd (f3-f2)/512
 10887 00038C68 6578656300          <1> db "exec",0
 10888 00038C6D D5010000            <1> dd (f3-$$)/512
 10889 00038C71 01000000            <1> dd (f4-f3)/512
 10890 00038C75 66696E616C636F756E- <1> db "finalcount.sn",0
 10891 00038C7E 742E736E00          <1>
 10892 00038C83 D6010000            <1> dd (f4-$$)/512
 10893 00038C87 01000000            <1> dd (f5-f4)/512
 10894 00038C8B 666F726B00          <1> db "fork",0
 10895 00038C90 D7010000            <1> dd (f5-$$)/512
 10896 00038C94 01000000            <1> dd (f6-f5)/512
 10897 00038C98 6775697465737400    <1> db "guitest",0
 10898 00038CA0 D8010000            <1> dd (f6-$$)/512
 10899 00038CA4 03000000            <1> dd (f7-f6)/512
 10900 00038CA8 696E7400            <1> db "int",0
 10901 00038CAC DB010000            <1> dd (f7-$$)/512
 10902 00038CB0 01000000            <1> dd (f8-f7)/512
 10903 00038CB4 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 10904 00038CBD 2E736E00            <1>
 10905 00038CC1 DC010000            <1> dd (f8-$$)/512
 10906 00038CC5 01000000            <1> dd (f9-f8)/512
 10907 00038CC9 6D6172696F2E736E00  <1> db "mario.sn",0
 10908 00038CD2 DD010000            <1> dd (f9-$$)/512
 10909 00038CD6 01000000            <1> dd (f10-f9)/512
 10910 00038CDA 736F6E676F74696D65- <1> db "songotime.sn",0
 10911 00038CE3 2E736E00            <1>
 10912 00038CE7 DE010000            <1> dd (f10-$$)/512
 10913 00038CEB 01000000            <1> dd (f11-f10)/512
 10914 00038CEF 73736500            <1> db "sse",0
 10915 00038CF3 DF010000            <1> dd (f11-$$)/512
 10916 00038CF7 02000000            <1> dd (f12-f11)/512
 10917 00038CFB 74656C7900          <1> db "tely",0
 10918 00038D00 E1010000            <1> dd (f12-$$)/512
 10919 00038D04 01000000            <1> dd (f13-f12)/512
 10920 00038D08 7475746F7269616C2E- <1> db "tutorial.sh",0
 10921 00038D11 736800              <1>
 10922 00038D14 E2010000            <1> dd (f13-$$)/512
 10923 00038D18 03000000            <1> dd (f14-f13)/512
 10924 00038D1C 756E667300          <1> db "unfs",0
 10925 00038D21 E5010000            <1> dd (f14-$$)/512
 10926 00038D25 02000000            <1> dd (f15-f14)/512
 10927                              <1> enddiskfileindex:
 10928                              <1> 
 10929                                      %include "source/bss.asm"
 10930 00038D29 00<rept>            <1> align 512, db 0
 10931                              <1> bssstart equ $
 10932                              <1> bsscopy equ $
 10933                              <1> initialstack equ bsscopy
 10934                              <1> stackend equ initialstack + 8192
 10935                              <1> sigtable equ stackend + 4
 10936                              <1> fileindex equ sigtable + 4
 10937                              <1> fileindexend equ fileindex + 1024
 10938                              <1> previousstack equ fileindexend
 10939                              <1> lastfolderloc equ previousstack + 4
 10940                              <1> currentfolderloc equ lastfolderloc + 4
 10941                              <1> currentfolder equ currentfolderloc + 4
 10942                              <1> currentfolderend equ currentfolder + 512
 10943                              <1> uid equ currentfolderend
 10944                              <1> ranboot equ uid + 4
 10945                              <1> IFON equ ranboot + 1
 10946                              <1> IFTRUE equ IFON + 1
 10947                              <1> BATCHPOS equ IFTRUE + 100
 10948                              <1> BATCHISON equ BATCHPOS + 4
 10949                              <1> LOOPON equ BATCHISON + 1
 10950                              <1> LOOPPOS	equ LOOPON + 1
 10951                              <1> variables equ LOOPPOS + 4
 10952                              <1> varend equ variables + 4096
 10953                              <1> buftxt2 equ varend
 10954                              <1> buftxt equ buftxt2 + 1024
 10955                              <1> buftxtend equ buftxt + 1024
 10956                              <1> buf2 equ buftxtend
 10957                              <1> numbuf equ buf2 + 20
 10958                              <1> %ifdef io.serial
 10959                              <1> 	lastcommandpos equ numbuf
 10960                              <1> %else
 10961                              <1> 	%ifdef gui.included
 10962                              <1> 		graphicstable equ numbuf ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 10963                              <1> 		graphicstableend equ graphicstable + 512
 10964                              <1> 		%ifdef gui.background
 10965                              <1> 			backgroundbuffer equ graphicstableend
 10966                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 10967                              <1> 			mousecolorbuf equ backgroundbufferend
 10968                              <1> 		%else
 10969                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 10970                              <1> 		%endif
 10971                              <1> 		mcolorend equ mousecolorbuf + 256
 10972                              <1> 		videobuf equ mcolorend	;1680x1050 pixels in characters
 10973                              <1> 		videobufend	equ videobuf + 210*65*4;2
 10974                              <1> 		videobuf2 equ videobufend
 10975                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
 10976                              <1> 	%else
 10977                              <1> 		videobuf equ numbuf
 10978                              <1> 		videobufend equ videobuf + 80*30*4
 10979                              <1> 		videobuf2 equ videobufend
 10980                              <1> 		videobuf2end equ videobuf2 + 80*30*4
 10981                              <1> 	%endif
 10982                              <1> 	lastcommandpos: equ videobuf2end
 10983                              <1> %endif
 10984                              <1> 	commandbufpos: equ lastcommandpos + 4
 10985                              <1> 	commandlistentries: equ commandbufpos + 4
 10986                              <1> 	commandsentered: equ commandlistentries + 4
 10987                              <1> 	commandbuf: equ commandsentered + 4
 10988                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 10989                              <1> %ifdef network.included
 10990                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 10991                              <1> 	rbuffend equ rbuffstart + 8192 + 16 ;extra space used for the WRAP bit in rtl8139
 10992                              <1> 	rbuffoverflow equ rbuffend + 1500
 10993                              <1> %else
 10994                              <1> 	rbuffstart equ commandbufend
 10995                              <1> 	rbuffend equ commandbufend
 10996                              <1> %endif
 10997                              <1> %ifdef threads.included
 10998                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 1024
 10999                              <1> 	threadlistend: equ threadlist + 1024*4
 11000                              <1> 	stacks:	equ threadlistend ;NOT TRUE:i use SS now for proper stack management. This makes sure stacks never screw with other memory
 11001                              <1> 	stack1: equ stacks + 2048  ;woah, thats a lot of space for stacks
 11002                              <1> 	bssend equ stack1 + 1024*2048
 11003                              <1> %else
 11004                              <1> 	bssend equ rbuffend
 11005                              <1> %endif
 11006                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 11007                                      %include "build/files.asm"
 11008                              <1> align 512,db 0
 11009                              <1> f0:
 11010 00038E00 <incbin>            <1> incbin "included/_img.bin"
 11011                              <1> align 512,db 0
 11012                              <1> f1:
 11013 0003A600 <incbin>            <1> incbin "included/boot.sh"
 11014 0003A718 00<rept>            <1> align 512,db 0
 11015                              <1> f2:
 11016 0003A800 <incbin>            <1> incbin "included/dostest.com"
 11017 0003A931 00<rept>            <1> align 512,db 0
 11018                              <1> f3:
 11019 0003AA00 <incbin>            <1> incbin "included/exec"
 11020 0003AAF1 00<rept>            <1> align 512,db 0
 11021                              <1> f4:
 11022 0003AC00 <incbin>            <1> incbin "included/finalcount.sn"
 11023 0003AD02 00<rept>            <1> align 512,db 0
 11024                              <1> f5:
 11025 0003AE00 <incbin>            <1> incbin "included/fork"
 11026 0003AF61 00<rept>            <1> align 512,db 0
 11027                              <1> f6:
 11028 0003B000 <incbin>            <1> incbin "included/guitest"
 11029 0003B43D 00<rept>            <1> align 512,db 0
 11030                              <1> f7:
 11031 0003B600 <incbin>            <1> incbin "included/int"
 11032 0003B7B2 00<rept>            <1> align 512,db 0
 11033                              <1> f8:
 11034 0003B800 <incbin>            <1> incbin "included/lostwoods.sn"
 11035 0003B8AE 00<rept>            <1> align 512,db 0
 11036                              <1> f9:
 11037 0003BA00 <incbin>            <1> incbin "included/mario.sn"
 11038 0003BA3A 00<rept>            <1> align 512,db 0
 11039                              <1> f10:
 11040 0003BC00 <incbin>            <1> incbin "included/songotime.sn"
 11041 0003BC4A 00<rept>            <1> align 512,db 0
 11042                              <1> f11:
 11043 0003BE00 <incbin>            <1> incbin "included/sse"
 11044 0003C0AA 00<rept>            <1> align 512,db 0
 11045                              <1> f12:
 11046 0003C200 <incbin>            <1> incbin "included/tely"
 11047 0003C3C6 00<rept>            <1> align 512,db 0
 11048                              <1> f13:
 11049 0003C400 <incbin>            <1> incbin "included/tutorial.sh"
 11050 0003C952 00<rept>            <1> align 512,db 0
 11051                              <1> f14:
 11052 0003CA00 <incbin>            <1> incbin "included/unfs"
 11053                              <1> align 512,db 0
 11054                              <1> f15:
 11055                                  %endif
