     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define hardware.automatic
    29                              <1> ;Automatically load the sound and network drivers.
    30                              <1> 
    31                              <1> %define threads.included
    32                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    33                              <1> 
    34                              <1> %define exceptions.included
    35                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    36                              <1> 
    37                              <1> ;%define disk.protected
    38                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    39                              <1> 
    40                              <1> %define disk.real
    41                              <1> ;Use real mode for disk access-this gives greater compatibility
    42                              <1> 
    43                              <1> ;%define sound.included
    44                              <1> ;This includes the sound drivers
    45                              <1> 
    46                              <1> %define network.included
    47                              <1> ;This includes the network stack
    48                              <1> 
    49                              <1> %define rtl8169.included
    50                              <1> ;This includes the RTL8169 drivers
    51                              <1> 
    52                              <1> ;%define rtl8139.included
    53                              <1> ;This includes the RTL8139 drivers
    54                              <1> 
    55                              <1> ;%define ne2000.included
    56                              <1> ;This includes the ne2000 drivers
    57                              <1> 
    58                              <1> ;%define i8254x.included
    59                              <1> ;This includes the Intel 8254x drivers
    60                              <1> 
    61                              <1> %define sector.debug
    62                              <1> ;Dump the contents of the first sector of SollerOS
    63                              <1> 
    64                              <1> ;%define dos.compatible
    65                              <1> ;Make the kernel loadable by dos.
    66                              <1> 
    67                              <1> ;%define system.simple
    68                              <1> ;The smallest possible system, overrides all options
    69                              <1> 
    70                              <1> ;FIX DEPENDANCIES
    71                              <1> %ifdef system.simple
    72                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    73                              <1> 	%define UNDEFALL
    74                              <1> %endif
    75                              <1> %ifdef dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef UNDEFALL
    79                              <1> 	%undef io.serial
    80                              <1> 	%undef disk.real
    81                              <1> 	%undef gui.included
    82                              <1> 	%undef gui.alphablending
    83                              <1> 	%undef gui.background
    84                              <1> 	%undef terminal.vsync
    85                              <1> 	%undef hardware.automatic
    86                              <1> 	%undef threads.included
    87                              <1> 	%undef exceptions.included
    88                              <1> 	%undef disk.protected
    89                              <1> 	%undef sound.included
    90                              <1> 	%undef network.included
    91                              <1> 	%undef rtl8139.included
    92                              <1> 	%undef rtl8169.included
    93                              <1> 	%undef ne2000.included
    94                              <1> 	%undef i8254x.included
    95                              <1> 	%undef sector.debug
    96                              <1> 	%undef UNDEFALL
    97                              <1> %endif
    98                              <1> %ifdef system.simple
    99                              <1> 	%define io.serial "1"
   100                              <1> 	%define disk.real
   101                              <1> %endif
   102                              <1> %ifdef gui.included
   103                              <1> 	%undef io.serial
   104                              <1> %else
   105                              <1> 	%undef gui.alphablending
   106                              <1> 	%undef gui.background
   107                              <1> %endif
   108                              <1> %ifdef network.included
   109                              <1> %else
   110                              <1> 	%undef i8254x.included
   111                              <1> 	%undef ne2000.included
   112                              <1> 	%undef rtl8139.included
   113                              <1> 	%undef rtl8169.included
   114                              <1> %endif
   115                              <1> %ifdef disk.protected
   116                              <1> 	%undef disk.real
   117                              <1> %else
   118                              <1> 	%ifdef disk.real
   119                              <1> 	%else
   120                              <1> 		%define disk.none
   121                              <1> 	%endif
   122                              <1> %endif
   123                                  [ORG 0x100]
   124                                  	%include "source/signature.asm"
   125                              <1> sigjump:
   126 00000000 E91A00              <1> 	jmp signatureend
   127                              <1> signature:
   128 00000003 536F6C6C65724F53    <1> db "SollerOS" ;Operating system name
   129 0000000B 20416C706861204275- <1> db " Alpha Build ",0	;Soller OS development level
   130 00000014 696C642000          <1>
   131 00000019 FD000000            <1> dd 253	;version number
   132                              <1> signatureend:
   133                                  [BITS 16]
   134                                      %include "source/boot.asm"
   135                              <1>     ; MENU.ASM
   136                              <1> boot:
   137 0000001D 8CC8                <1> 	mov ax, cs
   138 0000001F 8ED8                <1> 	mov ds, ax
   139 00000021 8EC0                <1> 	mov es, ax
   140 00000023 8ED0                <1> 	mov ss, ax
   141 00000025 880E[9DDB]          <1> 	mov [DriveNumber], cl
   142 00000029 668916[9EDB]        <1> 	mov [lbaad], edx
   143                              <1> %ifdef io.serial
   144                              <1> 	call getmemorysize
   145                              <1> 	mov si, serialmsg
   146                              <1> 	call printrm
   147                              <1> 	jmp pmode
   148                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
   149                              <1> %else
   150 0000002E E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   151 00000031 E95700              <1> 	jmp pmode
   152                              <1> %endif
   153                              <1> 	
   154                              <1> vgaset:
   155 00000034 B81200              <1> 	mov ax, 12h
   156 00000037 31DB                <1> 	xor bx, bx
   157 00000039 CD10                <1> 	int 10h
   158 0000003B C606[9CDB]00        <1> 	mov byte [guion], 0
   159 00000040 E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   160 00000043 C3                  <1> 	ret
   161                              <1> 
   162                              <1> getmemorysize:
   163 00000044 BF[A2DB]            <1> 	mov di, memlistbuf
   164 00000047 6631DB              <1> 	xor ebx, ebx
   165                              <1> getmemsizeloop:
   166 0000004A 66B820E80000        <1> 	mov eax, 0xE820
   167 00000050 66BA50414D53        <1> 	mov edx, 0x0534D4150
   168 00000056 66B918000000        <1> 	mov ecx, 24
   169 0000005C CD15                <1> 	int 0x15
   170 0000005E 81C71800            <1> 	add di, 24
   171 00000062 81FF[E2DD]          <1> 	cmp di, memlistend
   172 00000066 7309                <1> 	jae nomoregetmemsize
   173 00000068 6681FB00000000      <1> 	cmp ebx, 0
   174 0000006F 75D9                <1> 	jne getmemsizeloop
   175                              <1> nomoregetmemsize:
   176 00000071 81EF[A2DB]          <1> 	sub di, memlistbuf
   177 00000075 893E[E2DD]          <1> 	mov [memlistend], di
   178 00000079 C3                  <1> 	ret
   179                              <1> 	
   180                              <1> printrm:			; 'si' comes in with string address
   181 0000007A BB0700              <1>     mov bx,07		; write to display
   182 0000007D B40E                <1>     mov ah,0Eh		; screen function
   183 0000007F 8A04                <1>    .lp:    mov al,[si]         ; get next character
   184 00000081 3C00                <1>     cmp al,0		; look for terminator 
   185 00000083 7405                <1>     je .done		; zero byte at end of string
   186 00000085 CD10                <1>     int 10h		; write character to screen.    
   187 00000087 46                  <1> 	inc si	     	; move to next character
   188 00000088 EBF5                <1>     jmp .lp		; loop
   189 0000008A C3                  <1> .done: ret
   190                                      %include "source/pmode.asm"
   191                              <1> [BITS 16]
   192                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   193                              <1> ;	16-bit real mode
   194                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   195                              <1> 
   196                              <1> pmode:
   197 0000008B 6631C0              <1> 	xor eax, eax
   198 0000008E 6631DB              <1> 	xor ebx, ebx
   199 00000091 6631C9              <1> 	xor ecx, ecx
   200 00000094 6631D2              <1> 	xor edx, edx
   201 00000097 6631F6              <1> 	xor esi, esi
   202 0000009A 6631FF              <1> 	xor edi, edi
   203 0000009D BA9200              <1> 	mov dx, 0x92
   204 000000A0 EC                  <1> 	in al, dx	;;A20
   205 000000A1 0C02                <1> 	or al, 2
   206 000000A3 EE                  <1> 	out dx, al
   207 000000A4 8CCB                <1> 	mov bx,cs		; EBX=segment
   208 000000A6 66C1E304            <1> 	shl ebx,4		;	<< 4
   209 000000AA 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   210 000000AE A3[7E03]            <1> 	mov [gdt2 + 2],ax
   211 000000B1 A3[8603]            <1> 	mov [gdt3 + 2],ax
   212 000000B4 66C1E810            <1> 	shr eax,16
   213 000000B8 A2[8003]            <1> 	mov [gdt2 + 4],al
   214 000000BB A2[8803]            <1> 	mov [gdt3 + 4],al
   215 000000BE 8826[8303]          <1> 	mov [gdt2 + 7],ah
   216 000000C2 8826[8B03]          <1> 	mov [gdt3 + 7],ah
   217                              <1> 
   218 000000C6 66B8[E2DD0000]      <1> 	mov eax, initialstack
   219 000000CC 660306[4502]        <1> 	add eax, [newcodecache]
   220 000000D1 A3[7603]            <1> 	mov [gdts + 2],ax
   221 000000D4 66C1E810            <1> 	shr eax, 16
   222 000000D8 A2[7803]            <1> 	mov [gdts + 4],al
   223 000000DB 8826[7B03]          <1> 	mov [gdts + 7], ah
   224                              <1> 	
   225 000000DF 66A1[4502]          <1> 	mov eax, [newcodecache]
   226 000000E3 A3[8E03]            <1> 	mov [gdt4 + 2],ax
   227 000000E6 A3[9603]            <1> 	mov [gdt5 + 2],ax
   228 000000E9 A3[9E03]            <1> 	mov [gdtv8086 + 2], ax
   229 000000EC A3[A603]            <1> 	mov [gdtv80862 + 2], ax
   230 000000EF 66C1E810            <1> 	shr eax,16
   231 000000F3 A2[9003]            <1> 	mov [gdt4 + 4],al
   232 000000F6 A2[9803]            <1> 	mov [gdt5 + 4],al
   233 000000F9 A2[A003]            <1> 	mov [gdtv8086 + 4],al
   234 000000FC A2[A803]            <1> 	mov [gdtv80862 + 4],al
   235 000000FF 8826[9303]          <1> 	mov [gdt4 + 7],ah
   236 00000103 8826[9B03]          <1> 	mov [gdt5 + 7],ah
   237 00000107 8826[A303]          <1> 	mov [gdtv8086 + 7],ah
   238 0000010B 8826[AB03]          <1> 	mov [gdtv80862 + 7],ah
   239                              <1> 	
   240 0000010F 66B800004000        <1> 	mov eax, dosprogloc
   241 00000115 660306[4502]        <1> 	add eax, [newcodecache]
   242 0000011A A3[AE03]            <1> 	mov [gdtdos + 2],ax
   243 0000011D A3[B603]            <1> 	mov [gdtdos2 + 2],ax
   244 00000120 66C1E810            <1> 	shr eax,16
   245 00000124 A2[B003]            <1> 	mov [gdtdos + 4],al
   246 00000127 A2[B803]            <1> 	mov [gdtdos2 + 4],al
   247 0000012A 8826[B303]          <1> 	mov [gdtdos + 7],ah
   248 0000012E 8826[BB03]          <1> 	mov [gdtdos2 + 7],ah
   249                              <1> 	
   250                              <1> ; fix up gdt and idt
   251 00000132 67668D83[64030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   252 0000013A 66A3[5A03]          <1> 	mov [gdtr + 2],eax
   253 0000013E 67668D83[BC030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   254 00000146 66A3[6003]          <1> 	mov [idtr + 2],eax
   255 0000014A FA                  <1> 	cli
   256 0000014B 0F0116[5803]        <1> 	lgdt [gdtr]
   257 00000150 0F011E[5E03]        <1> 	lidt [idtr]
   258 00000155 6631DB              <1> 	xor ebx, ebx
   259 00000158 8CDB                <1> 	mov bx, ds
   260 0000015A 66891E[4102]        <1> 	mov [basecache], ebx
   261 0000015F 0F20C0              <1> 	mov eax,cr0
   262 00000162 0C01                <1> 	or al,1
   263 00000164 0F22C0              <1> 	mov cr0,eax
   264 00000167 EA[6C01]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   265                              <1> [BITS 32]
   266                              <1> do_pm:
   267 0000016C 31C0                <1> 	xor eax, eax
   268 0000016E 66B82000            <1> 	mov ax, SYS_DATA_SEL
   269 00000172 8ED8                <1> 	mov ds, ax
   270 00000174 8EC0                <1> 	mov es, ax
   271 00000176 8EE0                <1> 	mov fs, ax
   272 00000178 66B83000            <1> 	mov ax, NEW_DATA_SEL
   273 0000017C 8EE8                <1> 	mov gs, ax
   274                              <1> 	
   275                              <1> copykernel:
   276 0000017E 648B06              <1> 	mov eax, [fs:esi]
   277 00000181 658906              <1> 	mov [gs:esi], eax
   278 00000184 81C604000000        <1> 	add esi, 4
   279 0000018A 81FE[E2DD0000]      <1> 	cmp esi, bsscopy
   280 00000190 72EC                <1> 	jb copykernel
   281 00000192 EA[99010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   282                              <1> 	
   283                              <1> done_copy:
   284 00000199 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   285 0000019D 8ED8                <1> 	mov ds, ax
   286 0000019F 8EC0                <1> 	mov es, ax
   287 000001A1 8EE0                <1> 	mov fs, ax
   288                              <1> 	;mov ax, STACK_SEL
   289 000001A3 8ED0                <1> 	mov ss, ax
   290 000001A5 BC[82ED0000]        <1> 	mov esp, stackend
   291 000001AA 66B82000            <1> 	mov ax, SYS_DATA_SEL
   292 000001AE 8EE8                <1> 	mov gs, ax
   293                              <1> 	
   294 000001B0 E87A5F0000          <1> 	call initialize	;initialize drivers
   295                              <1> 	
   296 000001B5 A1[45020000]        <1> 	mov eax, [newcodecache]
   297 000001BA C1E804              <1> 	shr eax, 4
   298 000001BD A3[41020000]        <1> 	mov [basecache], eax
   299                              <1> 	
   300 000001C2 BE[30FE1200]        <1> 	mov esi, bssend
   301 000001C7 31C0                <1> 	xor eax, eax
   302                              <1> clearkernelbuffers:
   303 000001C9 8906                <1> 	mov [esi], eax
   304 000001CB 81EE04000000        <1> 	sub esi, 4
   305 000001D1 81FE[E2DD0000]      <1> 	cmp esi, bsscopy
   306 000001D7 77F0                <1> 	ja clearkernelbuffers
   307 000001D9 FB                  <1> 	sti
   308                              <1> 
   309                              <1> getmemoryspace:
   310 000001DA BE[A2DB0000]        <1> 	mov esi, memlistbuf
   311 000001DF 31FF                <1> 	xor edi, edi
   312 000001E1 668B3D[E2DD0000]    <1> 	mov di, [memlistend]
   313 000001E8 01F7                <1> 	add edi, esi
   314 000001EA 31C0                <1> 	xor eax, eax
   315                              <1> memoryspaceaddition:
   316 000001EC 39FE                <1> 	cmp esi, edi
   317 000001EE 7322                <1> 	jae finishedmemspacecalc
   318 000001F0 81C608000000        <1> 	add esi, 8
   319 000001F6 8B0E                <1> 	mov ecx, [esi]
   320 000001F8 81C608000000        <1> 	add esi, 8
   321 000001FE 8B1E                <1> 	mov ebx, [esi]
   322 00000200 81C608000000        <1> 	add esi, 8
   323 00000206 81FB01000000        <1> 	cmp ebx, 1
   324 0000020C 75DE                <1> 	jne memoryspaceaddition
   325 0000020E 01C8                <1> 	add eax, ecx
   326 00000210 EBDA                <1> 	jmp memoryspaceaddition
   327                              <1> finishedmemspacecalc:
   328 00000212 A3[56020000]        <1> 	mov [memoryspace], eax
   329                              <1> %ifdef gui.included
   330 00000217 803D[9CDB0000]00    <1> 	cmp byte [guion], 0
   331 0000021E 741C                <1> 	je normalstartup
   332 00000220 8B1D[41020000]      <1> 	mov ebx, [basecache]
   333 00000226 C1E304              <1> 	shl ebx, 4
   334 00000229 8B3D[1D570000]      <1> 	mov edi, [physbaseptr]
   335 0000022F 29DF                <1> 	sub edi, ebx
   336 00000231 893D[1D570000]      <1> 	mov [physbaseptr], edi
   337 00000237 E9BE640000          <1> 	jmp guiboot
   338                              <1> %endif
   339                              <1> normalstartup:
   340 0000023C E99B280000          <1> 	jmp os
   341                              <1> 	
   342 00000241 00000000            <1> basecache dd 0
   343 00000245 00001000            <1> newcodecache dd 0x100000
   344                              <1> 
   345 00000249 00                  <1> testingcpuspeed db 0
   346 0000024A 00000000            <1> cpuspeedperint dd 0
   347 0000024E 0000000000000000    <1> cpuclocksperint dd 0,0
   348 00000256 00000000            <1> memoryspace dd 0
   349 0000025A 7D0A                <1> pitdiv dw 2685
   350 0000025C 2E562200            <1> timeinterval dd 2250286
   351 00000260 00000000            <1> timeseconds dd 0
   352 00000264 00000000            <1> timenanoseconds dd 0
   353 00000268 00                  <1> soundon db 0
   354 00000269 0000                <1> soundrepititions dw 0
   355 0000026B 00000000            <1> soundpos dd 0
   356 0000026F 00000000            <1> soundendpos dd 0
   357                              <1> 
   358                              <1> cpuspeedend:
   359 00000273 C605[49020000]00    <1> 	mov byte [testingcpuspeed], 0
   360 0000027A A3[4A020000]        <1> 	mov [cpuspeedperint], eax
   361 0000027F B8[094E0000]        <1> 	mov eax, cpuspeedloopend
   362 00000284 890424              <1> 	mov [esp], eax
   363 00000287 E9BC000000          <1> 	jmp handled
   364                              <1> 
   365                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   366                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   367                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   368                              <1> 
   369                              <1> pitinterrupt: ;this controls threading
   370 0000028C FA                  <1> 	cli
   371 0000028D 803D[49020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   372 00000294 74DD                <1> 	je cpuspeedend
   373                              <1> 		
   374 00000296 E886000000          <1> 	call timekeeper ;this updates the internal time
   375                              <1> 	
   376 0000029B 803D[68020000]01    <1> 	cmp byte [soundon], 1
   377 000002A2 0F8459580000        <1> 	je near PCSpeakerRAW
   378                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   379                              <1> %ifdef threads.included
   380 000002A8 803D[F5660000]01    <1> 	cmp byte [threadson], 1
   381 000002AF 0F84E0630000        <1> 	je near threadswitch
   382                              <1> %endif
   383                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   384 000002B5 803D[F5660000]00    <1> 	cmp byte [threadson], 0
   385 000002BC 0F8486000000        <1> 	je near handled
   386                              <1> %ifdef io.serial
   387                              <1> 	jmp handled
   388                              <1> %else
   389 000002C2 60                  <1> 	pusha
   390 000002C3 E464                <1> 	in al, 64h
   391 000002C5 A820                <1> 	test al, 20h
   392 000002C7 0F8579000000        <1> 	jnz near handled2
   393 000002CD E460                <1> 	in al, 60h
   394 000002CF 3C01                <1> 	cmp al, 1		;escape
   395 000002D1 7405                <1> 	je userint
   396 000002D3 E96E000000          <1> 	jmp handled2
   397                              <1> ;	cmp al, 0x57
   398                              <1> ;	jne near handled2
   399                              <1> ;pauseint:	;F11 pauses
   400                              <1> ;	in al, 64h
   401                              <1> ;	test al, 20h
   402                              <1> ;	jnz pauseint
   403                              <1> ;	in al, 60h
   404                              <1> ;	cmp al, 0xD7
   405                              <1> ;	jne pauseint
   406                              <1> ;	mov esi, pausemsg
   407                              <1> ;	call print
   408                              <1> ;	cli
   409                              <1> ;pauselp:
   410                              <1> ;	nop
   411                              <1> ;	in al, 64h
   412                              <1> ;	test al, 20h
   413                              <1> ;	jnz pauselp
   414                              <1> ;	in al, 60h
   415                              <1> ;	cmp al, 0x57
   416                              <1> ;	je near handled2
   417                              <1> ;	jmp pauselp
   418                              <1> ;pausemsg db "Paused",10,0
   419                              <1> userint:
   420 000002D8 31C0                <1> 	xor eax, eax
   421 000002DA 3905[E2ED0000]      <1> 	cmp [sigtable], eax
   422 000002E0 7411                <1> 	je .nosighook
   423 000002E2 8B1D[E2ED0000]      <1> 	mov ebx, [sigtable]
   424 000002E8 895C2420            <1> 	mov [esp + 32], ebx
   425                              <1> ;	mov [sigtable], eax
   426 000002EC B020                <1> 	mov al, 0x20
   427 000002EE E620                <1> 	out 0x20, al
   428 000002F0 61                  <1> 	popa
   429 000002F1 FB                  <1> 	sti
   430 000002F2 CF                  <1> 	iret
   431                              <1> .nosighook:
   432                              <1> 		;UNMASK ALL INTS
   433 000002F3 E621                <1> 	out 0x21, al
   434 000002F5 E6A1                <1> 	out 0xA1, al
   435 000002F7 B020                <1> 	mov al, 0x20
   436 000002F9 E6A0                <1> 	out 0xA0, al
   437 000002FB E620                <1> 	out 0x20, al
   438                              <1> 		;RESET PIT DIVISOR
   439 000002FD 66A1[5A020000]      <1> 	mov ax, [pitdiv]
   440 00000303 E640                <1> 	out 0x40, al
   441 00000305 66C1C008            <1> 	rol ax, 8
   442 00000309 E640                <1> 	out 0x40, al
   443                              <1> 		;RESET PIC
   444 0000030B B020                <1> 	mov al, 0x20
   445 0000030D E620                <1> 	out 0x20, al
   446 0000030F 61                  <1> 	popa
   447 00000310 FB                  <1> 	sti
   448 00000311 BC[82ED0000]        <1> 	mov esp, stackend ;reset stack
   449 00000316 E91A290000          <1> 	jmp returnfromexp
   450                              <1> %endif
   451 0000031B 0A                  <1> rtcrate db 10
   452                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   453                              <1> %ifdef io.serial
   454                              <1> %else
   455                              <1> %ifdef terminal.vsync
   456                              <1> 	cli
   457                              <1> 	cmp byte [termcopyneeded], 0
   458                              <1> 	je .nocopy
   459                              <1> 	call newtermcopy
   460                              <1> .nocopy
   461                              <1> 	push eax
   462                              <1> 	mov al, 0xC
   463                              <1> 	out 0x70, al
   464                              <1> 	in al, 0x71
   465                              <1> 	pop eax
   466                              <1> 	sti
   467                              <1> %endif
   468                              <1> %endif
   469 0000031C E92E000000          <1> 	jmp handled4
   470                              <1> %ifdef rtl8139.included
   471                              <1> rtl8139.irq:
   472                              <1> 	cli
   473                              <1> 	push edx
   474                              <1> 	push eax
   475                              <1> 	mov edx, [rtl8139.basenicaddr]
   476                              <1> 	add edx, rtl8139.ISR
   477                              <1> 	xor eax, eax
   478                              <1> 	in ax, dx
   479                              <1> 	out dx, ax
   480                              <1> 	pop eax
   481                              <1> 	pop edx
   482                              <1> 	sti
   483                              <1> 	jmp handled4
   484                              <1> %endif
   485                              <1> %ifdef sound.included
   486                              <1> sblaster.irq:
   487                              <1> 	cli
   488                              <1> 	pusha
   489                              <1> 	cmp byte [SoundBlaster], 1
   490                              <1> 	je near sblaster.cont
   491                              <1> 	jmp handled2
   492                              <1> %endif
   493                              <1> 	
   494                              <1> timekeeper:
   495 00000321 50                  <1> 	push eax
   496 00000322 A1[64020000]        <1> 	mov eax, [timenanoseconds]
   497 00000327 0305[5C020000]      <1> 	add eax, [timeinterval]
   498 0000032D 3D00CA9A3B          <1> 	cmp eax, 1000000000
   499 00000332 720B                <1> 	jb nonanosecondrollover
   500 00000334 FF05[60020000]      <1> 	inc dword [timeseconds]
   501 0000033A 2D00CA9A3B          <1> 	sub eax, 1000000000
   502                              <1> 	%ifdef gui.time
   503                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   504                              <1> 		cmp byte [guion], 1
   505                              <1> 		jne nonanosecondrollover
   506                              <1> 		cmp dword [dragging], 0
   507                              <1> 		jne nonanosecondrollover
   508                              <1> 		pusha
   509                              <1> 		call guitime
   510                              <1> 		popa
   511                              <1> 	%endif
   512                              <1> nonanosecondrollover:
   513 0000033F A3[64020000]        <1> 	mov [timenanoseconds], eax
   514 00000344 58                  <1> 	pop eax
   515 00000345 C3                  <1> 	ret
   516                              <1> 	
   517                              <1> handled2:
   518 00000346 61                  <1> 	popa
   519                              <1> handled3:
   520 00000347 FB                  <1> 	sti
   521                              <1> handled:
   522 00000348 50                  <1> 	push eax
   523 00000349 B020                <1> 	mov al, 0x20
   524 0000034B E620                <1> 	out 0x20, al
   525 0000034D 58                  <1> 	pop eax
   526 0000034E CF                  <1> 	iret
   527                              <1> handled4:
   528 0000034F 50                  <1> 	push eax
   529 00000350 B020                <1> 	mov al, 0x20
   530 00000352 E6A0                <1> 	out 0xA0, al
   531 00000354 E620                <1> 	out 0x20, al
   532 00000356 58                  <1> 	pop eax
   533 00000357 CF                  <1> 	iret
   534                              <1> [BITS 16]
   535                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   536                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   537                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   538 00000358 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   539 0000035A 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   540                              <1> 
   541 0000035E FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   542 00000360 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   543                              <1> 
   544                              <1> 
   545 00000364 0000                <1> gdt:	dw 0			; limit 15:0
   546 00000366 0000                <1> 	dw 0			; base 15:0
   547 00000368 00                  <1> 	db 0			; base 23:16
   548 00000369 00                  <1> 	db 0			; type
   549 0000036A 00                  <1> 	db 0			; limit 19:16, flags
   550 0000036B 00                  <1> 	db 0			; base 31:24
   551                              <1> ; linear data segment descriptor
   552                              <1> LINEAR_SEL	equ	$-gdt
   553 0000036C FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   554 0000036E 0000                <1> 	dw 0			; base for this one is always 0
   555 00000370 00                  <1> 	db 0
   556 00000371 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   557 00000372 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   558 00000373 00                  <1> 	db 0
   559                              <1> STACK_SEL	equ $-gdt
   560 00000374 0200                <1> gdts:	dw 2;(stackend)/4096
   561 00000376 0000                <1> 	dw 0
   562 00000378 00                  <1> 	db 0
   563 00000379 92                  <1> 	db 0x92
   564 0000037A CF                  <1> 	db 0xCF
   565 0000037B 00                  <1> 	db 0
   566                              <1> ; code segment descriptor
   567                              <1> SYS_CODE_SEL	equ	$-gdt
   568 0000037C FFFF                <1> gdt2:	dw 0xFFFF
   569 0000037E 0000                <1> 	dw 0			; (base gets set above)
   570 00000380 00                  <1> 	db 0
   571 00000381 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   572 00000382 CF                  <1> 	db 0xCF
   573 00000383 00                  <1> 	db 0
   574                              <1> ; data segment descriptor
   575                              <1> SYS_DATA_SEL	equ	$-gdt
   576 00000384 FFFF                <1> gdt3:	dw 0xFFFF
   577 00000386 0000                <1> 	dw 0			; (base gets set above)
   578 00000388 00                  <1> 	db 0
   579 00000389 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   580 0000038A CF                  <1> 	db 0xCF
   581 0000038B 00                  <1> 	db 0
   582                              <1> NEW_CODE_SEL	equ	$-gdt
   583 0000038C FFFF                <1> gdt4:	dw 0xFFFF
   584 0000038E 0000                <1> 	dw 0			; (base gets set above)
   585 00000390 00                  <1> 	db 0
   586 00000391 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   587 00000392 CF                  <1> 	db 0xCF
   588 00000393 00                  <1> 	db 0
   589                              <1> ; data segment descriptor
   590                              <1> NEW_DATA_SEL	equ	$-gdt
   591 00000394 FFFF                <1> gdt5:	dw 0xFFFF
   592 00000396 0000                <1> 	dw 0			; (base gets set above)
   593 00000398 00                  <1> 	db 0
   594 00000399 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   595 0000039A CF                  <1> 	db 0xCF
   596 0000039B 00                  <1> 	db 0
   597                              <1> V8086_CODE_SEL	equ $-gdt
   598 0000039C FFFF                <1> gdtv8086: dw 0xFFFF
   599 0000039E 0000                <1> 	dw 0
   600 000003A0 00                  <1> 	db 0
   601 000003A1 9A                  <1> 	db 0x9A
   602 000003A2 8F                  <1> 	db 0x8F
   603 000003A3 00                  <1> 	db 0
   604                              <1> V8086_DATA_SEL	equ $-gdt
   605 000003A4 FFFF                <1> gdtv80862: dw 0xFFFF
   606 000003A6 0000                <1> 	dw 0
   607 000003A8 00                  <1> 	db 0
   608 000003A9 92                  <1> 	db 0x92
   609 000003AA 8F                  <1> 	db 0x8F
   610 000003AB 00                  <1> 	db 0
   611                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   612 000003AC 0001                <1> gdtdos:	dw 256	;give it 1 MB
   613 000003AE 0000                <1> 	dw 0
   614 000003B0 00                  <1> 	db 0
   615 000003B1 9A                  <1> 	db 0x9A
   616 000003B2 8F                  <1> 	db 0x8F ;16 bit
   617 000003B3 00                  <1> 	db 0
   618                              <1> DOS_DATA_SEL 	equ $-gdt
   619 000003B4 0001                <1> gdtdos2:	dw 256
   620 000003B6 0000                <1> 	dw 0
   621 000003B8 00                  <1> 	db 0
   622 000003B9 92                  <1> 	db 0x92
   623 000003BA 8F                  <1> 	db 0x8F ;16 bit
   624 000003BB 00                  <1> 	db 0
   625                              <1> gdt_end:
   626                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   627                              <1> ;	interrupt descriptor table (IDT)
   628                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   629                              <1> ; 32 reserved interrupts:
   630                              <1> idt:	
   631                              <1> %assign i 0
   632                              <1> %rep    8
   633                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   634                              <1> %assign i i+1
   635                              <1> %endrep
   636 000003BC [DD0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   637                              <2> %assign i i+1
   638 000003C4 [E90C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   639                              <2> %assign i i+1
   640 000003CC [F50C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   641                              <2> %assign i i+1
   642 000003D4 [010D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   643                              <2> %assign i i+1
   644 000003DC [0D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   645                              <2> %assign i i+1
   646 000003E4 [190D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   647                              <2> %assign i i+1
   648 000003EC [250D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   649                              <2> %assign i i+1
   650 000003F4 [310D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   651                              <2> %assign i i+1
   652 000003FC [3D0D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   653                              <1> %assign i 9
   654                              <1> %rep    23
   655                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   656                              <1> %assign i i+1
   657                              <1> %endrep
   658 00000404 [490D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   659                              <2> %assign i i+1
   660 0000040C [550D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   661                              <2> %assign i i+1
   662 00000414 [610D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   663                              <2> %assign i i+1
   664 0000041C [6D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   665                              <2> %assign i i+1
   666 00000424 [790D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   667                              <2> %assign i i+1
   668 0000042C [850D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   669                              <2> %assign i i+1
   670 00000434 [910D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i i+1
   672 0000043C [9D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i i+1
   674 00000444 [A90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i i+1
   676 0000044C [B50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i i+1
   678 00000454 [C10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i i+1
   680 0000045C [CD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i i+1
   682 00000464 [D90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i i+1
   684 0000046C [E50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i i+1
   686 00000474 [F10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i i+1
   688 0000047C [FD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i i+1
   690 00000484 [090E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i i+1
   692 0000048C [150E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i i+1
   694 00000494 [210E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i i+1
   696 0000049C [2D0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i i+1
   698 000004A4 [390E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i i+1
   700 000004AC [450E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i i+1
   702 000004B4 [510E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i i+1
   704 000004BC [A229]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   705 000004C4 [A629]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   706                              <1> %assign i 0x22
   707                              <1> %rep 14
   708                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   709                              <1> %assign i +1
   710                              <1> %endrep
   711 000004CC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   712                              <2> %assign i +1
   713 000004D4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   714                              <2> %assign i +1
   715 000004DC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i +1
   717 000004E4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i +1
   719 000004EC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i +1
   721 000004F4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i +1
   723 000004FC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i +1
   725 00000504 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i +1
   727 0000050C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i +1
   729 00000514 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i +1
   731 0000051C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i +1
   733 00000524 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i +1
   735 0000052C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i +1
   737 00000534 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i +1
   739                              <1> ;INT 30h for os use and 3rd party use:
   740 0000053C [D51B]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   741                              <1> %assign i 0x31
   742                              <1> %rep 15
   743                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   744                              <1> %assign i +1
   745                              <1> %endrep
   746 00000544 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   747                              <2> %assign i +1
   748 0000054C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   749                              <2> %assign i +1
   750 00000554 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   751                              <2> %assign i +1
   752 0000055C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   753                              <2> %assign i +1
   754 00000564 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   755                              <2> %assign i +1
   756 0000056C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   757                              <2> %assign i +1
   758 00000574 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   759                              <2> %assign i +1
   760 0000057C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   761                              <2> %assign i +1
   762 00000584 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   763                              <2> %assign i +1
   764 0000058C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   765                              <2> %assign i +1
   766 00000594 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   767                              <2> %assign i +1
   768 0000059C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 000005A4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772 000005AC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   773                              <2> %assign i +1
   774 000005B4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   775                              <2> %assign i +1
   776                              <1> ;and here we are at 0x40
   777                              <1> ;here are all the irq's
   778 000005BC [8C02]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   779 000005C4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   780 000005CC [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   781 000005D4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   782 000005DC [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   783                              <1> 	%ifdef sound.included
   784                              <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   785                              <1> 	%else
   786 000005E4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   787                              <1> 	%endif
   788 000005EC [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   789 000005F4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   790 000005FC [1C03]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   791 00000604 [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   792 0000060C [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   793                              <1> 	%ifdef rtl8139.included
   794                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   795                              <1> 	%else
   796 00000614 [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   797                              <1> 	%endif
   798 0000061C [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   799 00000624 [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   800 0000062C [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   801 00000634 [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   802                              <1> ;This brings me up to 0x50
   803                              <1> %assign i 0x50
   804                              <1> %rep 176
   805                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   806                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   807                              <1> %assign i +1
   808                              <1> %endrep
   809 0000063C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   810                              <2> 
   811                              <2> %assign i +1
   812 00000644 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   813                              <2> 
   814                              <2> %assign i +1
   815 0000064C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   816                              <2> 
   817                              <2> %assign i +1
   818 00000654 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   819                              <2> 
   820                              <2> %assign i +1
   821 0000065C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   822                              <2> 
   823                              <2> %assign i +1
   824 00000664 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   825                              <2> 
   826                              <2> %assign i +1
   827 0000066C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   828                              <2> 
   829                              <2> %assign i +1
   830 00000674 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   831                              <2> 
   832                              <2> %assign i +1
   833 0000067C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   834                              <2> 
   835                              <2> %assign i +1
   836 00000684 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   837                              <2> 
   838                              <2> %assign i +1
   839 0000068C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   840                              <2> 
   841                              <2> %assign i +1
   842 00000694 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   843                              <2> 
   844                              <2> %assign i +1
   845 0000069C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   846                              <2> 
   847                              <2> %assign i +1
   848 000006A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   849                              <2> 
   850                              <2> %assign i +1
   851 000006AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   852                              <2> 
   853                              <2> %assign i +1
   854 000006B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   855                              <2> 
   856                              <2> %assign i +1
   857 000006BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   858                              <2> 
   859                              <2> %assign i +1
   860 000006C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   861                              <2> 
   862                              <2> %assign i +1
   863 000006CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   864                              <2> 
   865                              <2> %assign i +1
   866 000006D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 000006DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 000006E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 000006EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 000006F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 000006FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 00000704 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 0000070C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 00000714 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 0000071C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 00000724 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 0000072C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 00000734 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 0000073C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 00000744 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 0000074C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 00000754 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 0000075C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 00000764 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 0000076C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 00000774 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 0000077C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 00000784 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 0000078C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 00000794 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 0000079C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 000007A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 000007AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 000007B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 000007BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 000007C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 000007CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 000007D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 000007DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 000007E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 000007EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 000007F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 000007FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 00000804 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 0000080C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 00000814 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 0000081C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 00000824 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 0000082C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 00000834 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 0000083C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 00000844 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 0000084C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 00000854 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 0000085C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 00000864 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 0000086C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 00000874 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 0000087C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000884 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 0000088C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 00000894 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 0000089C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 000008A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 000008AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 000008B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 000008BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 000008C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 000008CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 000008D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 000008DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 000008E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 000008EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 000008F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 000008FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 00000904 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 0000090C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 00000914 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 0000091C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 00000924 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 0000092C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 00000934 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 0000093C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 00000944 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 0000094C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 00000954 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 0000095C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000964 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 0000096C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 00000974 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 0000097C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000984 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 0000098C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 00000994 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 0000099C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 000009A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 000009AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 000009B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 000009BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 000009C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 000009CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 000009D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 000009DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 000009E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 000009EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 000009F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 000009FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 00000A04 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 00000A0C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 00000A14 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 00000A1C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 00000A24 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 00000A2C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 00000A34 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 00000A3C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 00000A44 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 00000A4C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 00000A54 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 00000A5C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000A64 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000A6C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000A74 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000A7C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000A84 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000A8C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000A94 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000A9C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000AA4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000AAC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000AB4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000ABC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000AC4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000ACC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000AD4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000ADC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000AE4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000AEC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000AF4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000AFC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000B04 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000B0C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000B14 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000B1C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000B24 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000B2C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286 00000B34 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1287                              <2> 
  1288                              <2> %assign i +1
  1289 00000B3C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1290                              <2> 
  1291                              <2> %assign i +1
  1292 00000B44 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1293                              <2> 
  1294                              <2> %assign i +1
  1295 00000B4C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1296                              <2> 
  1297                              <2> %assign i +1
  1298 00000B54 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1299                              <2> 
  1300                              <2> %assign i +1
  1301 00000B5C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1302                              <2> 
  1303                              <2> %assign i +1
  1304 00000B64 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1305                              <2> 
  1306                              <2> %assign i +1
  1307 00000B6C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1308                              <2> 
  1309                              <2> %assign i +1
  1310 00000B74 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1311                              <2> 
  1312                              <2> %assign i +1
  1313 00000B7C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1314                              <2> 
  1315                              <2> %assign i +1
  1316 00000B84 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1317                              <2> 
  1318                              <2> %assign i +1
  1319 00000B8C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1320                              <2> 
  1321                              <2> %assign i +1
  1322 00000B94 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1323                              <2> 
  1324                              <2> %assign i +1
  1325 00000B9C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1326                              <2> 
  1327                              <2> %assign i +1
  1328 00000BA4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1329                              <2> 
  1330                              <2> %assign i +1
  1331 00000BAC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1332                              <2> 
  1333                              <2> %assign i +1
  1334 00000BB4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1335                              <2> 
  1336                              <2> %assign i +1
  1337                              <1> idt_end:
  1338                              <1> [BITS 32]
  1339                                  	%include "source/realmode.asm"
  1340                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1341                              <1> 			;and the return address is in realmodereturn
  1342 00000BBC FA                  <1> 	cli
  1343 00000BBD A3[CF0C0000]        <1> 	mov [realmodeeax], eax
  1344 00000BC2 891D[CB0C0000]      <1> 	mov [realmodeebx], ebx
  1345 00000BC8 8925[BD0C0000]      <1> 	mov [pmodeesp], esp
  1346                              <1> 
  1347 00000BCE BB[C70C0000]        <1> 	mov ebx, cr0old
  1348                              <1> rmcopytofirstmbyte:
  1349 00000BD3 8B03                <1> 	mov eax, [ebx]
  1350 00000BD5 658903              <1> 	mov [gs:ebx], eax
  1351 00000BD8 81C304000000        <1> 	add ebx, 4
  1352 00000BDE 81FB[D70C0000]      <1> 	cmp ebx, realmodeptr
  1353 00000BE4 76ED                <1> 	jbe rmcopytofirstmbyte
  1354                              <1> 
  1355 00000BE6 EA[ED0B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1356                              <1> 
  1357                              <1> [BITS 16]
  1358                              <1> protected16bit:
  1359 00000BED B84000              <1> 	mov ax, V8086_DATA_SEL
  1360 00000BF0 8ED8                <1> 	mov ds, ax
  1361 00000BF2 8EC0                <1> 	mov es, ax
  1362 00000BF4 8EE0                <1> 	mov fs, ax
  1363 00000BF6 8EE8                <1> 	mov gs, ax
  1364 00000BF8 8ED0                <1> 	mov ss, ax
  1365 00000BFA 66BC[82ED0000]      <1> 	mov esp, stackend
  1366 00000C00 0F20C0              <1> 	mov eax, cr0
  1367 00000C03 66A3[C70C]          <1> 	mov [cr0old], eax
  1368 00000C07 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1369 00000C0D 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1370 00000C10 EA[150C]0010        <1> 	jmp 0x1000:inrealmode
  1371                              <1> 
  1372                              <1> inrealmode:
  1373 00000C15 8CC8                <1> 	mov ax, cs
  1374 00000C17 8ED8                <1> 	mov ds, ax
  1375 00000C19 8EC0                <1> 	mov es, ax
  1376 00000C1B 8EE0                <1> 	mov fs, ax
  1377 00000C1D 8EE8                <1> 	mov gs, ax
  1378 00000C1F 8ED0                <1> 	mov ss, ax
  1379 00000C21 BC[82ED]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1380                              <1> 	
  1381 00000C24 B011                <1> 	mov al, 0x11
  1382 00000C26 E620                <1> 	out 0x20, al
  1383 00000C28 E6A0                <1> 	out 0xA0, al
  1384 00000C2A B008                <1> 	mov al, 0x8		;interrupt for master
  1385 00000C2C E621                <1> 	out 0x21, al
  1386 00000C2E B070                <1> 	mov al, 0x70	;interrupt for slave
  1387 00000C30 E6A1                <1> 	out 0xA1, al
  1388 00000C32 B004                <1> 	mov al, 4
  1389 00000C34 E621                <1> 	out 0x21, al
  1390 00000C36 B002                <1> 	mov al, 2
  1391 00000C38 E6A1                <1> 	out 0xA1, al
  1392 00000C3A B001                <1> 	mov al, 0x1
  1393 00000C3C E621                <1> 	out 0x21, al
  1394 00000C3E B001                <1> 	mov al, 0x1
  1395 00000C40 E6A1                <1> 	out 0xA1, al
  1396                              <1> 	
  1397 00000C42 0F011E[C10C]        <1> 	lidt [idt_real]
  1398 00000C47 FB                  <1> 	sti
  1399                              <1> 
  1400 00000C48 66A1[CF0C]          <1> 	mov eax, [realmodeeax]
  1401 00000C4C 668B1E[CB0C]        <1> 	mov ebx, [realmodeebx]
  1402                              <1> 
  1403 00000C51 FF16[D70C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1404                              <1> 
  1405 00000C55 66A3[CF0C]          <1> 	mov [realmodeeax], eax
  1406 00000C59 66891E[CB0C]        <1> 	mov [realmodeebx], ebx
  1407                              <1> 
  1408 00000C5E FA                  <1> 	cli
  1409 00000C5F 0F0116[5803]        <1> 	lgdt [gdtr]
  1410 00000C64 0F011E[5E03]        <1> 	lidt [idtr]
  1411 00000C69 0F20C0              <1> 	mov eax, cr0
  1412 00000C6C 0C01                <1> 	or al, 1
  1413 00000C6E 0F22C0              <1> 	mov cr0,eax
  1414 00000C71 EA[760C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1415                              <1> 
  1416                              <1> [BITS 32]
  1417                              <1> returntopmode:
  1418 00000C76 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1419 00000C7A 8ED8                <1> 	mov ds, ax
  1420 00000C7C 8EC0                <1> 	mov es, ax
  1421 00000C7E 8EE0                <1> 	mov fs, ax
  1422 00000C80 8ED0                <1> 	mov ss, ax
  1423 00000C82 8B25[BD0C0000]      <1> 	mov esp, [pmodeesp]
  1424 00000C88 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1425 00000C8C 8EE8                <1> 	mov gs, ax
  1426                              <1> 
  1427 00000C8E BB[C70C0000]        <1> 	mov ebx, cr0old
  1428                              <1> rmcopyfromfirstmbyte:
  1429 00000C93 658B03              <1> 	mov eax, [gs:ebx]
  1430 00000C96 8903                <1> 	mov [ebx], eax
  1431 00000C98 81C304000000        <1> 	add ebx, 4
  1432 00000C9E 81FB[D70C0000]      <1> 	cmp ebx, realmodeptr
  1433 00000CA4 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1434                              <1> 
  1435 00000CA6 E89D540000          <1> 	call initialize.pic ;reset irq's and masks
  1436 00000CAB FB                  <1> 	sti
  1437 00000CAC A1[CF0C0000]        <1> 	mov eax, [realmodeeax]
  1438 00000CB1 8B1D[CB0C0000]      <1> 	mov ebx, [realmodeebx]
  1439 00000CB7 FF25[D30C0000]      <1> 	jmp dword [realmodereturn]
  1440                              <1> 	
  1441 00000CBD 00000000            <1> pmodeesp dd 0
  1442                              <1> idt_real:
  1443 00000CC1 FF03                <1> 	dw 0x3FF
  1444 00000CC3 00000000            <1> 	dd 0
  1445 00000CC7 00000000            <1> cr0old dd 0
  1446 00000CCB 00000000            <1> realmodeebx dd 0
  1447 00000CCF 00000000            <1> realmodeeax dd 0
  1448 00000CD3 00000000            <1> realmodereturn dd 0
  1449 00000CD7 0000                <1> realmodeptr dw 0
  1450 00000CD9 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1451                                  [BITS 32]
  1452                                      %include "source/exception.asm"
  1453                              <1> %ifdef exceptions.included
  1454                              <1> unhand:	
  1455                              <1> 	%assign i 0
  1456                              <1> 	%rep 32
  1457                              <1> 	mov byte [intprob], i
  1458                              <1> 	jmp unhand2
  1459                              <1> 	%assign i i+1
  1460                              <1> 	%endrep
  1461 00000CDD C605[8F110000]00    <2>  mov byte [intprob], i
  1462 00000CE4 E974010000          <2>  jmp unhand2
  1463                              <2>  %assign i i+1
  1464 00000CE9 C605[8F110000]01    <2>  mov byte [intprob], i
  1465 00000CF0 E968010000          <2>  jmp unhand2
  1466                              <2>  %assign i i+1
  1467 00000CF5 C605[8F110000]02    <2>  mov byte [intprob], i
  1468 00000CFC E95C010000          <2>  jmp unhand2
  1469                              <2>  %assign i i+1
  1470 00000D01 C605[8F110000]03    <2>  mov byte [intprob], i
  1471 00000D08 E950010000          <2>  jmp unhand2
  1472                              <2>  %assign i i+1
  1473 00000D0D C605[8F110000]04    <2>  mov byte [intprob], i
  1474 00000D14 E944010000          <2>  jmp unhand2
  1475                              <2>  %assign i i+1
  1476 00000D19 C605[8F110000]05    <2>  mov byte [intprob], i
  1477 00000D20 E938010000          <2>  jmp unhand2
  1478                              <2>  %assign i i+1
  1479 00000D25 C605[8F110000]06    <2>  mov byte [intprob], i
  1480 00000D2C E92C010000          <2>  jmp unhand2
  1481                              <2>  %assign i i+1
  1482 00000D31 C605[8F110000]07    <2>  mov byte [intprob], i
  1483 00000D38 E920010000          <2>  jmp unhand2
  1484                              <2>  %assign i i+1
  1485 00000D3D C605[8F110000]08    <2>  mov byte [intprob], i
  1486 00000D44 E914010000          <2>  jmp unhand2
  1487                              <2>  %assign i i+1
  1488 00000D49 C605[8F110000]09    <2>  mov byte [intprob], i
  1489 00000D50 E908010000          <2>  jmp unhand2
  1490                              <2>  %assign i i+1
  1491 00000D55 C605[8F110000]0A    <2>  mov byte [intprob], i
  1492 00000D5C E9FC000000          <2>  jmp unhand2
  1493                              <2>  %assign i i+1
  1494 00000D61 C605[8F110000]0B    <2>  mov byte [intprob], i
  1495 00000D68 E9F0000000          <2>  jmp unhand2
  1496                              <2>  %assign i i+1
  1497 00000D6D C605[8F110000]0C    <2>  mov byte [intprob], i
  1498 00000D74 E9E4000000          <2>  jmp unhand2
  1499                              <2>  %assign i i+1
  1500 00000D79 C605[8F110000]0D    <2>  mov byte [intprob], i
  1501 00000D80 E9D8000000          <2>  jmp unhand2
  1502                              <2>  %assign i i+1
  1503 00000D85 C605[8F110000]0E    <2>  mov byte [intprob], i
  1504 00000D8C E9CC000000          <2>  jmp unhand2
  1505                              <2>  %assign i i+1
  1506 00000D91 C605[8F110000]0F    <2>  mov byte [intprob], i
  1507 00000D98 E9C0000000          <2>  jmp unhand2
  1508                              <2>  %assign i i+1
  1509 00000D9D C605[8F110000]10    <2>  mov byte [intprob], i
  1510 00000DA4 E9B4000000          <2>  jmp unhand2
  1511                              <2>  %assign i i+1
  1512 00000DA9 C605[8F110000]11    <2>  mov byte [intprob], i
  1513 00000DB0 E9A8000000          <2>  jmp unhand2
  1514                              <2>  %assign i i+1
  1515 00000DB5 C605[8F110000]12    <2>  mov byte [intprob], i
  1516 00000DBC E99C000000          <2>  jmp unhand2
  1517                              <2>  %assign i i+1
  1518 00000DC1 C605[8F110000]13    <2>  mov byte [intprob], i
  1519 00000DC8 E990000000          <2>  jmp unhand2
  1520                              <2>  %assign i i+1
  1521 00000DCD C605[8F110000]14    <2>  mov byte [intprob], i
  1522 00000DD4 E984000000          <2>  jmp unhand2
  1523                              <2>  %assign i i+1
  1524 00000DD9 C605[8F110000]15    <2>  mov byte [intprob], i
  1525 00000DE0 E978000000          <2>  jmp unhand2
  1526                              <2>  %assign i i+1
  1527 00000DE5 C605[8F110000]16    <2>  mov byte [intprob], i
  1528 00000DEC E96C000000          <2>  jmp unhand2
  1529                              <2>  %assign i i+1
  1530 00000DF1 C605[8F110000]17    <2>  mov byte [intprob], i
  1531 00000DF8 E960000000          <2>  jmp unhand2
  1532                              <2>  %assign i i+1
  1533 00000DFD C605[8F110000]18    <2>  mov byte [intprob], i
  1534 00000E04 E954000000          <2>  jmp unhand2
  1535                              <2>  %assign i i+1
  1536 00000E09 C605[8F110000]19    <2>  mov byte [intprob], i
  1537 00000E10 E948000000          <2>  jmp unhand2
  1538                              <2>  %assign i i+1
  1539 00000E15 C605[8F110000]1A    <2>  mov byte [intprob], i
  1540 00000E1C E93C000000          <2>  jmp unhand2
  1541                              <2>  %assign i i+1
  1542 00000E21 C605[8F110000]1B    <2>  mov byte [intprob], i
  1543 00000E28 E930000000          <2>  jmp unhand2
  1544                              <2>  %assign i i+1
  1545 00000E2D C605[8F110000]1C    <2>  mov byte [intprob], i
  1546 00000E34 E924000000          <2>  jmp unhand2
  1547                              <2>  %assign i i+1
  1548 00000E39 C605[8F110000]1D    <2>  mov byte [intprob], i
  1549 00000E40 E918000000          <2>  jmp unhand2
  1550                              <2>  %assign i i+1
  1551 00000E45 C605[8F110000]1E    <2>  mov byte [intprob], i
  1552 00000E4C E90C000000          <2>  jmp unhand2
  1553                              <2>  %assign i i+1
  1554 00000E51 C605[8F110000]1F    <2>  mov byte [intprob], i
  1555 00000E58 E900000000          <2>  jmp unhand2
  1556                              <2>  %assign i i+1
  1557                              <1> unhand2:
  1558 00000E5D FA                  <1> 	cli
  1559 00000E5E 1E                  <1> 	push ds
  1560 00000E5F 06                  <1> 	push es
  1561 00000E60 0FA0                <1> 	push fs
  1562 00000E62 0FA8                <1> 	push gs
  1563 00000E64 16                  <1> 	push ss
  1564 00000E65 60                  <1> 	pushad
  1565                              <1> %ifdef gui.included
  1566 00000E66 803D[9CDB0000]00    <1> 	cmp byte [guion], 0
  1567 00000E6D 0F8432000000        <1> 	je near noguiunhandstuff
  1568 00000E73 66C705[89110000]08- <1> 	mov word [locunhandy], 8
  1569 00000E7B 00                  <1>
  1570 00000E7C 66C705[8B110000]08- <1> 	mov word [locunhandx], 8
  1571 00000E84 00                  <1>
  1572 00000E85 668B1D[DB6D0000]    <1> 	mov bx, [background]
  1573 00000E8C 66891D[8D110000]    <1> 	mov [backgroundcache], bx
  1574 00000E93 C605[F9570000]01    <1> 	mov byte [mousedisabled],1
  1575 00000E9A 66BB00F8            <1> 	mov bx, 1111100000000000b
  1576 00000E9E 66891D[DB6D0000]    <1> 	mov [background], bx
  1577                              <1> noguiunhandstuff:
  1578                              <1> %endif
  1579 00000EA5 89E6                <1> 	mov esi, esp
  1580 00000EA7 8935[7D110000]      <1> 	mov [espfirst], esi
  1581 00000EAD 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1582 00000EB3 8935[79110000]      <1> 	mov [esploc], esi
  1583 00000EB9 BE[9E110000]        <1> 	mov esi, unhandmsg
  1584 00000EBE 8935[81110000]      <1> 	mov [esiloc], esi
  1585 00000EC4 31C9                <1> 	xor ecx, ecx
  1586 00000EC6 8A0D[8F110000]      <1> 	mov cl, [intprob]
  1587 00000ECC BB[6D150000]        <1> 	mov ebx, errortypes
  1588 00000ED1 C1E102              <1> 	shl ecx, 2
  1589 00000ED4 01CB                <1> 	add ebx, ecx
  1590 00000ED6 81FB[AD150000]      <1> 	cmp ebx, errortypesend
  1591 00000EDC 7205                <1> 	jb gooderrortype
  1592 00000EDE BB[AD150000]        <1> 	mov ebx, errortypesend
  1593                              <1> gooderrortype:
  1594 00000EE3 8B33                <1> 	mov esi, [ebx]
  1595                              <1> %ifdef gui.included
  1596 00000EE5 803D[9CDB0000]00    <1> 	cmp byte [guion], 0
  1597 00000EEC 0F842D000000        <1> 	je near errortext
  1598 00000EF2 668B0D[89110000]    <1> 	mov cx, [locunhandy]
  1599 00000EF9 668B15[8B110000]    <1> 	mov dx, [locunhandx]
  1600 00000F00 66B80100            <1> 	mov ax, 1
  1601 00000F04 6631DB              <1> 	xor bx, bx
  1602 00000F07 E824650000          <1> 	call showstring2
  1603 00000F0C 66890D[89110000]    <1> 	mov [locunhandy], cx
  1604 00000F13 668915[8B110000]    <1> 	mov [locunhandx], dx
  1605 00000F1A E905000000          <1> 	jmp errortextdone
  1606                              <1> %endif
  1607                              <1> errortext:
  1608 00000F1F E8070E0000          <1> 	call print		;;get the error message and print it
  1609                              <1> errortextdone:
  1610 00000F24 31C9                <1> 	xor ecx, ecx
  1611 00000F26 8A0D[8F110000]      <1> 	mov cl, [intprob]
  1612 00000F2C E8E1010000          <1> 	call expdump
  1613                              <1> dumpstack:
  1614 00000F31 8B35[79110000]      <1> 	mov esi, [esploc]
  1615 00000F37 39E6                <1> 	cmp esi, esp
  1616 00000F39 7216                <1> 	jb donedump
  1617 00000F3B 368B0E              <1> 	mov ecx, [ss:esi]
  1618 00000F3E 81EE04000000        <1> 	sub esi, 4
  1619 00000F44 8935[79110000]      <1> 	mov [esploc], esi
  1620 00000F4A E8C3010000          <1> 	call expdump
  1621 00000F4F EBE0                <1> 	jmp dumpstack
  1622                              <1> donedump:
  1623 00000F51 0F20C1              <1> 	mov ecx, cr0
  1624 00000F54 E8B9010000          <1> 	call expdump
  1625 00000F59 0F20D1              <1> 	mov ecx, cr2
  1626 00000F5C E8B1010000          <1> 	call expdump
  1627 00000F61 0F20D9              <1> 	mov ecx, cr3
  1628 00000F64 E8A9010000          <1> 	call expdump
  1629 00000F69 0F20E1              <1> 	mov ecx, cr4
  1630 00000F6C E8A1010000          <1> 	call expdump
  1631 00000F71 0F00C9              <1> 	str ecx
  1632 00000F74 E899010000          <1> 	call expdump
  1633 00000F79 0F010D[98110000]    <1> 	sidt [igdtcache]
  1634 00000F80 8B0D[9A110000]      <1> 	mov ecx, [igdtcache + 2]
  1635 00000F86 E887010000          <1> 	call expdump
  1636 00000F8B 0F0105[98110000]    <1> 	sgdt [igdtcache]
  1637 00000F92 8B0D[9A110000]      <1> 	mov ecx, [igdtcache + 2]
  1638 00000F98 E875010000          <1> 	call expdump
  1639 00000F9D 0F00C1              <1> 	sldt ecx
  1640 00000FA0 E86D010000          <1> 	call expdump
  1641 00000FA5 8B35[79110000]      <1> 	mov esi, [esploc]
  1642 00000FAB 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1643 00000FB0 81C710000000        <1> 	add edi, 16
  1644 00000FB6 893D[94110000]      <1> 	mov [codelocend], edi
  1645 00000FBC 81EF20000000        <1> 	sub edi, 32
  1646                              <1> dumpcodeloop:
  1647 00000FC2 893D[90110000]      <1> 	mov [codeloc], edi
  1648 00000FC8 8B0F                <1> 	mov ecx, [edi]
  1649 00000FCA E843010000          <1> 	call expdump
  1650 00000FCF 8B3D[90110000]      <1> 	mov edi, [codeloc]
  1651 00000FD5 81C704000000        <1> 	add edi, 4
  1652 00000FDB 3B3D[94110000]      <1> 	cmp edi, [codelocend]
  1653 00000FE1 72DF                <1> 	jb dumpcodeloop
  1654 00000FE3 BE[A3100000]        <1> 	mov esi, backtoosmsg
  1655                              <1> %ifdef gui.included
  1656 00000FE8 803D[9CDB0000]00    <1> 	cmp byte [guion], 0
  1657 00000FEF 741F                <1> 	je backtomsg
  1658                              <1> guibacktomsg:
  1659 00000FF1 668B15[8B110000]    <1> 	mov dx, [locunhandx]
  1660 00000FF8 668B0D[89110000]    <1> 	mov cx, [locunhandy]
  1661 00000FFF 66B80100            <1> 	mov ax, 1
  1662 00001003 6631DB              <1> 	xor bx, bx
  1663 00001006 E825640000          <1> 	call showstring2
  1664 0000100B E905000000          <1> 	jmp backtomsgdone
  1665                              <1> backtomsg:
  1666                              <1> %endif
  1667 00001010 E8160D0000          <1> 	call print
  1668                              <1> backtomsgdone:
  1669 00001015 30C0                <1> 	xor al, al
  1670 00001017 E8EB120000          <1> 	call rdcharint
  1671 0000101C 803D[8F110000]03    <1> 	cmp byte [intprob], 3
  1672 00001023 7541                <1> 	jne nodebugint
  1673                              <1> %ifdef gui.included
  1674 00001025 803D[9CDB0000]00    <1> 	cmp byte [guion], 0
  1675 0000102C 7427                <1> 	je nodebuggui
  1676 0000102E 668B1D[8D110000]    <1> 	mov bx, [backgroundcache]
  1677 00001035 66891D[DB6D0000]    <1> 	mov [background], bx
  1678 0000103C 6631DB              <1> 	xor bx, bx
  1679 0000103F C605[F9570000]00    <1> 	mov byte [mousedisabled], 0
  1680 00001046 E8445D0000          <1> 	call guiclear
  1681 0000104B E88F5D0000          <1> 	call reloadallgraphics
  1682 00001050 E808180000          <1> 	call termcopy
  1683                              <1> nodebuggui:
  1684                              <1> %endif
  1685 00001055 8B35[7D110000]      <1> 	mov esi, [espfirst]
  1686 0000105B 89F4                <1> 	mov esp, esi
  1687 0000105D 61                  <1> 	popad
  1688 0000105E 17                  <1> 	pop ss
  1689 0000105F 0FA9                <1> 	pop gs
  1690 00001061 0FA1                <1> 	pop fs
  1691 00001063 07                  <1> 	pop es
  1692 00001064 1F                  <1> 	pop ds
  1693 00001065 CF                  <1> 	iret
  1694                              <1> nodebugint:
  1695 00001066 61                  <1> 	popad
  1696 00001067 17                  <1> 	pop ss
  1697 00001068 0FA9                <1> 	pop gs
  1698 0000106A 0FA1                <1> 	pop fs
  1699 0000106C 07                  <1> 	pop es
  1700 0000106D 1F                  <1> 	pop ds
  1701                              <1> %ifdef gui.included
  1702 0000106E 803D[9CDB0000]00    <1> 	cmp byte [guion], 0
  1703 00001075 7427                <1> 	je returnunhandgui
  1704 00001077 668B1D[8D110000]    <1> 	mov bx, [backgroundcache]
  1705 0000107E 66891D[DB6D0000]    <1> 	mov [background], bx
  1706 00001085 6631DB              <1> 	xor bx, bx
  1707 00001088 C605[F9570000]00    <1> 	mov byte [mousedisabled], 0
  1708 0000108F E8FB5C0000          <1> 	call guiclear
  1709 00001094 E8465D0000          <1> 	call reloadallgraphics
  1710 00001099 E8BF170000          <1> 	call termcopy
  1711                              <1> %endif
  1712                              <1> returnunhandgui:
  1713 0000109E E9FE1B0000          <1> 	jmp nwcmd
  1714 000010A3 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1715 000010AC 737420616E79207072- <1>
  1716 000010B5 6F626C656D7320696E- <1>
  1717 000010BE 207468652049737375- <1>
  1718 000010C7 65732073656374696F- <1>
  1719 000010D0 6E20617420736F6C6C- <1>
  1720 000010D9 65726F732E676F6F67- <1>
  1721 000010E2 6C65636F64652E636F- <1>
  1722 000010EB 6D0A                <1>
  1723 000010ED 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1724 000010F6 206B657920746F2072- <1>
  1725 000010FF 657475726E20746F20- <1>
  1726 00001108 536F6C6C65724F530A- <1>
  1727 00001111 00                  <1>
  1728                              <1> expdump:
  1729 00001112 8B35[81110000]      <1> 	mov esi, [esiloc]
  1730 00001118 89F7                <1> 	mov edi, esi
  1731 0000111A 81C70F000000        <1> 	add edi, 15
  1732 00001120 81C604000000        <1> 	add esi, 4
  1733 00001126 893D[81110000]      <1> 	mov [esiloc], edi
  1734 0000112C 81EF03000000        <1> 	sub edi, 3
  1735 00001132 E8D11F0000          <1> 	call converthex
  1736 00001137 81EE04000000        <1> 	sub esi, 4
  1737                              <1> %ifdef gui.included
  1738 0000113D 803D[9CDB0000]00    <1> 	cmp byte [guion], 0
  1739 00001144 0F8429000000        <1> 	je near expdumptext
  1740 0000114A 668B0D[89110000]    <1> 	mov cx, [locunhandy]
  1741 00001151 668B15[8B110000]    <1> 	mov dx, [locunhandx]
  1742 00001158 66B80100            <1> 	mov ax, 1
  1743 0000115C 6631DB              <1> 	xor bx, bx
  1744 0000115F E8CC620000          <1> 	call showstring2
  1745 00001164 66890D[89110000]    <1> 	mov [locunhandy], cx
  1746 0000116B 668915[8B110000]    <1> 	mov [locunhandx], dx
  1747 00001172 C3                  <1> 	ret
  1748                              <1> %endif
  1749                              <1> expdumptext:
  1750 00001173 E8B30B0000          <1> 	call print
  1751 00001178 C3                  <1> 	ret
  1752 00001179 00000000            <1> esploc dd 0
  1753 0000117D 00000000            <1> espfirst dd 0
  1754 00001181 00000000            <1> esiloc dd 0
  1755 00001185 00000000            <1> esiregbuf dd 0
  1756 00001189 0100                <1> locunhandy dw 1
  1757 0000118B 0100                <1> locunhandx dw 1
  1758 0000118D 0000                <1> backgroundcache dw 0
  1759 0000118F 00                  <1> intprob db 0
  1760 00001190 00000000            <1> codeloc dd 0
  1761 00001194 00000000            <1> codelocend dd 0
  1762 00001198 000000000000        <1> igdtcache dw 0,0,0
  1763                              <1> 	unhandmsg:	
  1764 0000119E 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1765 000011A7 303030FF0A00        <1>
  1766                              <1> unhndrg:
  1767 000011AD FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1768 000011B6 303030202000<rept>  <1>
  1769 00001216 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1770 0000121F 303030FF0A00        <1>
  1771 00001225 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1772 0000122E 303030202000<rept>  <1>
  1773 0000128E FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1774 00001297 303030FF0A00        <1>
  1775 0000129D FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1776 000012A6 303030202000<rept>  <1>
  1777 00001306 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1778 0000130F 303030FF0A00        <1>
  1779 00001315 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1780 0000131E 303030202000<rept>  <1>
  1781 0000137E FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1782 00001387 303030FF0A00        <1>
  1783                              <1> unhandregs:
  1784 0000138D 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1785 00001396 303030202000        <1>
  1786 0000139C 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1787 000013A5 303030202000        <1>
  1788 000013AB 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1789 000013B4 303030FF0A00        <1>
  1790 000013BA 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1791 000013C3 303030202000        <1>
  1792 000013C9 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1793 000013D2 303030202000        <1>
  1794 000013D8 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1795 000013E1 303030202000        <1>
  1796 000013E7 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1797 000013F0 303030202000        <1>
  1798 000013F6 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1799 000013FF 303030FF0A00        <1>
  1800 00001405 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1801 0000140E 303030202000        <1>
  1802 00001414 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1803 0000141D 303030202000        <1>
  1804 00001423 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1805 0000142C 303030202000        <1>
  1806 00001432 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1807 0000143B 303030FF0A00        <1>
  1808 00001441 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1809 0000144A 303030202000        <1>
  1810 00001450 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1811 00001459 303030202000        <1>
  1812 0000145F 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1813 00001468 303030202000        <1>
  1814 0000146E 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1815 00001477 303030FF0A00        <1>
  1816 0000147D 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1817 00001486 303030202000        <1>
  1818 0000148C 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1819 00001495 303030202000        <1>
  1820 0000149B 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1821 000014A4 303030202000        <1>
  1822 000014AA 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1823 000014B3 303030FF0A00        <1>
  1824 000014B9 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1825 000014C2 303030202000        <1>
  1826 000014C8 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1827 000014D1 303030202000        <1>
  1828 000014D7 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1829 000014E0 303030202000        <1>
  1830 000014E6 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1831 000014EF 303030FF0A00        <1>
  1832 000014F5 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1833 000014FE 303030202000<rept>  <1>
  1834 00001513 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1835 0000151C 30303020FF00        <1>
  1836 00001522 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1837 0000152B 3030305D2000        <1>
  1838 00001531 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1839 0000153A 303030202000<rept>  <1>
  1840 0000155E FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1841 00001567 303030FF0A00        <1>
  1842                              <1> unhandmsgend:
  1843                              <1> 
  1844                              <1> errortypes:
  1845 0000156D [B1150000]          <1> 			dd err0
  1846 00001571 [1A160000]          <1> 			dd err1
  1847 00001575 [7B160000]          <1> 			dd err2
  1848 00001579 [D0160000]          <1> 			dd err3
  1849 0000157D [34170000]          <1> 			dd err4
  1850 00001581 [86170000]          <1> 			dd err5
  1851 00001585 [F0170000]          <1> 			dd err6
  1852 00001589 [58180000]          <1> 			dd err7
  1853 0000158D [A2180000]          <1> 			dd err8
  1854 00001591 [FF180000]          <1> 			dd err9
  1855 00001595 [58190000]          <1> 			dd err10
  1856 00001599 [A3190000]          <1> 			dd err11
  1857 0000159D [F3190000]          <1> 			dd err12
  1858 000015A1 [4C1A0000]          <1> 			dd err13
  1859 000015A5 [AF1A0000]          <1> 			dd err14
  1860 000015A9 [EB1A0000]          <1> 			dd err15
  1861                              <1> errortypesend:
  1862 000015AD [761B0000]          <1> 			dd unknownerror
  1863                              <1> 			
  1864 000015B1 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1865 000015BA 6279207A65726F3A0A  <1>
  1866 000015C3 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1867 000015CC 6C79206C696D2061C3- <1>
  1868 000015D5 B778203D20E2889E20- <1>
  1869 000015DE 7768656E2061206973- <1>
  1870 000015E7 20616E79207265616C- <1>
  1871 000015F0 206E756D6265722E20- <1>
  1872 000015F9 486170707920456173- <1>
  1873 00001602 746572210A          <1>
  1874 00001607 202020202020202020- <1> 		db "            x→0",10,0
  1875 00001610 20202078E28692300A- <1>
  1876 00001619 00                  <1>
  1877                              <1> 		
  1878 0000161A 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1879 00001623 65702F427265616B70- <1>
  1880 0000162C 6F696E743A0A        <1>
  1881 00001632 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1882 0000163B 696E74206661756C74- <1>
  1883 00001644 2C20627265616B706F- <1>
  1884 0000164D 696E7420747261702C- <1>
  1885 00001656 206F722073696E676C- <1>
  1886 0000165F 652D73746570207472- <1>
  1887 00001668 617020776173207472- <1>
  1888 00001671 696767657265642E0A- <1>
  1889 0000167A 00                  <1>
  1890                              <1> 		
  1891 0000167B 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1892 00001684 6C6520696E74657272- <1>
  1893 0000168D 7570743A0A          <1>
  1894 00001692 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1895 0000169B 6520696E7465727275- <1>
  1896 000016A4 707420776173207472- <1>
  1897 000016AD 696767657265642074- <1>
  1898 000016B6 68617420636F756C64- <1>
  1899 000016BF 206E6F74206265206D- <1>
  1900 000016C8 61736B65642E0A00    <1>
  1901                              <1> 		
  1902 000016D0 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1903 000016D9 743A0A              <1>
  1904 000016DC 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1905 000016E5 727275707420697320- <1>
  1906 000016EE 7573656420696E2070- <1>
  1907 000016F7 726F6772616D732074- <1>
  1908 00001700 6F2073686F77207468- <1>
  1909 00001709 6520737461636B2061- <1>
  1910 00001712 6E6420726567697374- <1>
  1911 0000171B 65727320616E642063- <1>
  1912 00001724 616E2062650A        <1>
  1913 0000172A 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1914 00001733 00                  <1>
  1915                              <1> 		
  1916 00001734 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1917 0000173D 0A                  <1>
  1918 0000173E 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1919 00001747 73736F722072616E20- <1>
  1920 00001750 696E746F20616E2049- <1>
  1921 00001759 4E544F20696E737472- <1>
  1922 00001762 756374696F6E207769- <1>
  1923 0000176B 746820746865206F76- <1>
  1924 00001774 6572666C6F7720666C- <1>
  1925 0000177D 6167207365742E0A00  <1>
  1926                              <1> 		
  1927 00001786 426F756E6473206368- <1> err5	db "Bounds check:",10
  1928 0000178F 65636B3A0A          <1>
  1929 00001794 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1930 0000179D 73736F72207265626F- <1>
  1931 000017A6 756E6465642066726F- <1>
  1932 000017AF 6D206120424F554E44- <1>
  1933 000017B8 20696E737472756374- <1>
  1934 000017C1 696F6E2072756E206F- <1>
  1935 000017CA 6E20616E206F706572- <1>
  1936 000017D3 616E64207468617420- <1>
  1937 000017DC 776173206F75740A    <1>
  1938 000017E4 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1939 000017ED 2E0A00              <1>
  1940                              <1> 		
  1941 000017F0 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1942 000017F9 70636F64653A0A      <1>
  1943 00001800 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1944 00001809 73736F722068617320- <1>
  1945 00001812 6E6F20696465612077- <1>
  1946 0000181B 686174206974207761- <1>
  1947 00001824 7320747279696E6720- <1>
  1948 0000182D 746F20657865637574- <1>
  1949 00001836 652E20446F6E277420- <1>
  1950 0000183F 72756E205353453420- <1>
  1951 00001848 636F64650A          <1>
  1952 0000184D 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1953 00001856 0A00                <1>
  1954                              <1> 		
  1955 00001858 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1956 00001861 6F72206E6F74206176- <1>
  1957 0000186A 61696C61626C653A0A  <1>
  1958 00001873 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1959 0000187C 206B6E6F7720746865- <1>
  1960 00001885 7920646F6E2774206D- <1>
  1961 0000188E 616B652074686F7365- <1>
  1962 00001897 20616E796D6F726521- <1>
  1963 000018A0 0A00                <1>
  1964                              <1> 		
  1965 000018A2 446F75626C65206661- <1> err8	db "Double fault:",10
  1966 000018AB 756C743A0A          <1>
  1967 000018B0 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1968 000018B9 74696F6E2068616E64- <1>
  1969 000018C2 6C657220636F756C64- <1>
  1970 000018CB 206E6F742068616E64- <1>
  1971 000018D4 6C6520746861742069- <1>
  1972 000018DD 7420636F756C64206E- <1>
  1973 000018E6 6F742068616E646C65- <1>
  1974 000018EF 20616E206578636570- <1>
  1975 000018F8 74696F6E2E0A00      <1>
  1976                              <1> 		
  1977 000018FF 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1978 00001908 6F72207365676D656E- <1>
  1979 00001911 74206F76657272756E- <1>
  1980 0000191A 3A0A00              <1>
  1981 0000191D 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1982 00001926 722068617070656E73- <1>
  1983 0000192F 20696E206D6F646572- <1>
  1984 00001938 6E20636F6D70757465- <1>
  1985 00001941 72732C20616E64206E- <1>
  1986 0000194A 657665722073686F75- <1>
  1987 00001953 6C642E0A00          <1>
  1988                              <1> 
  1989 00001958 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1990 00001961 53533A0A            <1>
  1991 00001965 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1992 0000196E 686174207761732073- <1>
  1993 00001977 776974636865642074- <1>
  1994 00001980 6F20697320696E7661- <1>
  1995 00001989 6C69642E204E6F7468- <1>
  1996 00001992 696E672066756E6E79- <1>
  1997 0000199B 20686572652E0A00    <1>
  1998                              <1> 		
  1999 000019A3 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2000 000019AC 6F742070726573656E- <1>
  2001 000019B5 743A0A              <1>
  2002 000019B8 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2003 000019C1 6E7420626974206F66- <1>
  2004 000019CA 20746865207365676D- <1>
  2005 000019D3 656E74206465736372- <1>
  2006 000019DC 6970746F7220697320- <1>
  2007 000019E5 73657420746F207A65- <1>
  2008 000019EE 726F2E0A00          <1>
  2009                              <1> 		
  2010 000019F3 537461636B20657863- <1> err12	db "Stack exception:",10
  2011 000019FC 657074696F6E3A0A    <1>
  2012 00001A04 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2013 00001A0D 7363726970746F7220- <1>
  2014 00001A16 697320696E76616C69- <1>
  2015 00001A1F 64206F72206E6F7420- <1>
  2016 00001A28 70726573656E74206F- <1>
  2017 00001A31 7220697473206C696D- <1>
  2018 00001A3A 697420697320746F6F- <1>
  2019 00001A43 20736D616C6C2E0A00  <1>
  2020                              <1> 		
  2021 00001A4C 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2022 00001A55 726F74656374696F6E- <1>
  2023 00001A5E 2076696F6C6174696F- <1>
  2024 00001A67 6E3A0A              <1>
  2025 00001A6A 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2026 00001A73 746564207468652063- <1>
  2027 00001A7C 6F6D70757465722E20- <1>
  2028 00001A85 537465702061776179- <1>
  2029 00001A8E 20736C6F776C792E20- <1>
  2030 00001A97 546865204642492069- <1>
  2031 00001AA0 73206F6E2069747320- <1>
  2032 00001AA9 7761792E0A00        <1>
  2033                              <1> 		
  2034 00001AAF 50616765206661756C- <1> err14	db "Page fault:",10
  2035 00001AB8 743A0A              <1>
  2036 00001ABB 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2037 00001AC4 746861742077617320- <1>
  2038 00001ACD 726571756573746564- <1>
  2039 00001AD6 20776173206E6F7420- <1>
  2040 00001ADF 617661696C61626C65- <1>
  2041 00001AE8 2E0A00              <1>
  2042                              <1> 		
  2043 00001AEB 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2044 00001AF4 666F7220506C616E20- <1>
  2045 00001AFD 523A0A              <1>
  2046 00001B00 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2047 00001B09 727275707420697320- <1>
  2048 00001B12 726573657276656420- <1>
  2049 00001B1B 666F72207573616765- <1>
  2050 00001B24 206F6E6C7920627920- <1>
  2051 00001B2D 746865206D696C6974- <1>
  2052 00001B36 617279207768656E20- <1>
  2053 00001B3F 6974206973206E6563- <1>
  2054 00001B48 6573736172790A      <1>
  2055 00001B4F 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  2056 00001B58 746520612066756C6C- <1>
  2057 00001B61 2D7363616C6520636F- <1>
  2058 00001B6A 757020642782746174- <1>
  2059 00001B73 2E0A00              <1>
  2060                              <1> 		
  2061 00001B76 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2062 00001B7F 68656C6C206A757374- <1>
  2063 00001B88 2068617070656E6564- <1>
  2064 00001B91 3F2049732065766572- <1>
  2065 00001B9A 796F6E65206F6B6179- <1>
  2066 00001BA3 3F2048617264206472- <1>
  2067 00001BAC 6976653F2056696465- <1>
  2068 00001BB5 6F20636172643F0A    <1>
  2069 00001BBD 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2070 00001BC6 726520796F75207468- <1>
  2071 00001BCF 6572653F0A00        <1>
  2072                              <1> %else
  2073                              <1> unhand:	
  2074                              <1> 	%assign i 0
  2075                              <1> 	%rep 32
  2076                              <1> 	mov byte [intprob], i
  2077                              <1> 	jmp unhand2
  2078                              <1> 	%assign i i+1
  2079                              <1> 	%endrep
  2080                              <1> unhand2:
  2081                              <1> 	cmp byte [intprob], 3
  2082                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2083                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2084                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2085                              <1> 	mov bl, [intprob]
  2086                              <1> 	jmp exitprog
  2087                              <1> intprob db 0
  2088                              <1> %endif
  2089                                      %include "source/ints.asm"
  2090                              <1> newints:	;for great justice
  2091 00001BD5 80FC00              <1> 	cmp ah, 0
  2092 00001BD8 0F849A000000        <1> 	je near exitprog   ;kills app
  2093 00001BDE 80FC01              <1> 	cmp ah, 1
  2094 00001BE1 0F8419010000        <1> 	je near prntstr  ;print string
  2095 00001BE7 80FC02              <1> 	cmp ah, 2
  2096 00001BEA 0F84B1010000        <1> 	je near readstr	;read string
  2097 00001BF0 80FC03              <1> 	cmp ah, 3
  2098 00001BF3 0F84D1010000        <1> 	je near clearscrn	;clear screen
  2099 00001BF9 80FC04              <1> 	cmp ah, 4
  2100 00001BFC 0F8446020000        <1> 	je near prntreadstr	;read and print string
  2101 00001C02 80FC05              <1> 	cmp ah, 5
  2102 00001C05 0F84F0060000        <1> 	je near readchar	;get char
  2103 00001C0B 80FC06              <1> 	cmp ah, 6
  2104 00001C0E 0F8457070000        <1> 	je near prntchar	;print char
  2105 00001C14 80FC07              <1> 	cmp ah, 7
  2106 00001C17 0F8470090000        <1> 	je near openfile	;read file
  2107                              <1> ;	cmp ah, 8
  2108                              <1> ;	je near closefile	;close file
  2109 00001C1D 80FC09              <1> 	cmp ah, 9
  2110 00001C20 0F8471090000        <1> 	je near num2str	;convert number to string
  2111 00001C26 80FC0A              <1> 	cmp ah, 10
  2112 00001C29 0F8480090000        <1> 	je near str2num	;convert string to number
  2113                              <1> %ifdef threads.included
  2114 00001C2F 80FC0B              <1> 	cmp ah, 11
  2115 00001C32 0F8483090000        <1> 	je near forkthread	;create thread
  2116                              <1> %endif
  2117 00001C38 80FC0C              <1> 	cmp ah, 12
  2118 00001C3B 0F84510A0000        <1> 	je near gettime	;get time
  2119 00001C41 80FC0D              <1> 	cmp ah, 13
  2120 00001C44 0F845D0A0000        <1> 	je near settime	;set time
  2121 00001C4A 80FC0E              <1> 	cmp ah, 14
  2122 00001C4D 0F84640A0000        <1> 	je near runcmd	;run program
  2123 00001C53 80FC0F              <1> 	cmp ah, 15
  2124 00001C56 0F84700A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2125 00001C5C 80FC10              <1> 	cmp ah, 16
  2126 00001C5F 0F84920A0000        <1> 	je near hooksig	;hook code to a signal
  2127                              <1> %ifdef gui.included
  2128 00001C65 80FC11              <1> 	cmp ah, 17
  2129 00001C68 0F84990A0000        <1> 	je near guiint	;GUI operations
  2130                              <1> %endif
  2131                              <1> %ifdef sound.included
  2132                              <1> 	cmp ah, 18
  2133                              <1> 	je near soundint	;sound operations
  2134                              <1> %endif
  2135                              <1> %ifdef network.included
  2136 00001C6E 80FC13              <1> 	cmp ah, 19
  2137 00001C71 0F84E10B0000        <1> 	je near netint	;networking operations
  2138                              <1> %endif
  2139 00001C77 CF                  <1> 	iret
  2140                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2141                              <2> exitprog:
  2142 00001C78 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2143 00001C7C 8ED8                <2> 	mov ds, ax
  2144 00001C7E 8EC0                <2> 	mov es, ax
  2145 00001C80 8EE0                <2> 	mov fs, ax
  2146 00001C82 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2147 00001C86 8EE8                <2> 	mov gs, ax
  2148 00001C88 C705[F6660000]0000- <2> 	mov dword [currentthread], 0
  2149 00001C90 0000                <2>
  2150 00001C92 C705[F1660000]0400- <2> 	mov dword [lastthread], 4
  2151 00001C9A 0000                <2>
  2152 00001C9C C605[F5660000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2153 00001CA3 8B25[E6F10000]      <2> 	mov esp, [previousstack] ;and this
  2154 00001CA9 81FB00000000        <2> 	cmp ebx, 0
  2155 00001CAF 0F8501000000        <2> 	jne near .error
  2156 00001CB5 C3                  <2> 	ret
  2157                              <2> .error:
  2158 00001CB6 89D9                <2> 	mov ecx, ebx
  2159 00001CB8 B006                <2> 	mov al, 6
  2160 00001CBA A2[66310000]        <2> 	mov [firsthexshown], al
  2161 00001CBF 51                  <2> 	push ecx
  2162 00001CC0 BE[DB1C0000]        <2> 	mov esi, .msg1
  2163 00001CC5 E855000000          <2> 	call printhighlight
  2164 00001CCA 59                  <2> 	pop ecx
  2165 00001CCB E8AB140000          <2> 	call showhex
  2166 00001CD0 BE[F01C0000]        <2> 	mov esi, .msg2
  2167 00001CD5 E845000000          <2> 	call printhighlight
  2168 00001CDA C3                  <2> 	ret
  2169                              <2> 	
  2170 00001CDB 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2171 00001CE4 7461747573206F6620- <2>
  2172 00001CED 307800              <2>
  2173 00001CF0 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2174 00001CF9 726E65642E0A00      <2>
  2175                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2176                              <2> prntstr:
  2177 00001D00 30E4                <2> xor ah, ah
  2178 00001D02 E82B000000          <2> call printint
  2179 00001D07 E99CE5FFFF          <2> jmp timerinterrupt
  2180                              <2> 
  2181                              <2> 	printquiet:
  2182 00001D0C 6631C0              <2> 		xor ax, ax
  2183 00001D0F 66A3[9F1D0000]      <2> 		mov [endkeyprint], ax
  2184 00001D15 66BB0700            <2> 		mov bx, 7
  2185 00001D19 E82D000000          <2> 		call printint.b
  2186 00001D1E C3                  <2> 		ret
  2187                              <2> 
  2188                              <2> 	printhighlight:
  2189 00001D1F 6631C0              <2> 		xor ax, ax
  2190 00001D22 66BBF000            <2> 		mov bx, 0xF0
  2191 00001D26 E907000000          <2> 		jmp printint
  2192                              <2> 
  2193                              <2>     print:
  2194 00001D2B 6631C0              <2> 		xor ax, ax
  2195 00001D2E 66BB0700            <2> 		mov bx, 7
  2196                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2197 00001D32 56                  <2> 		push esi
  2198 00001D33 66A3[9F1D0000]      <2> 		mov [endkeyprint], ax
  2199 00001D39 E80D000000          <2> 		call .b
  2200 00001D3E 89F1                <2> 		mov ecx, esi
  2201 00001D40 5F                  <2> 		pop edi
  2202 00001D41 29F9                <2> 		sub ecx, edi
  2203 00001D43 51                  <2> 		push ecx
  2204 00001D44 E8140B0000          <2> 		call termcopy
  2205 00001D49 59                  <2> 		pop ecx
  2206 00001D4A C3                  <2> 		ret
  2207                              <2> 	.b:	
  2208 00001D4B 53                  <2> 		push ebx
  2209 00001D4C 31C0                <2> 		xor eax, eax
  2210 00001D4E 8A06                <2> 		mov al, [esi]
  2211 00001D50 3CFF                <2> 		cmp al, 0xFF
  2212 00001D52 7438                <2> 		je .doneutf
  2213 00001D54 3CC0                <2> 		cmp al, 0xC0
  2214 00001D56 7234                <2> 		jb .doneutf
  2215 00001D58 3CE0                <2> 		cmp al, 0xE0
  2216 00001D5A 721D                <2> 		jb .two
  2217 00001D5C 46                  <2> 		inc esi
  2218 00001D5D 668B0E              <2> 		mov cx, [esi]
  2219 00001D60 46                  <2> 		inc esi
  2220 00001D61 C0E004              <2> 		shl al, 4
  2221 00001D64 66C1E102            <2> 		shl cx, 2
  2222 00001D68 C0ED02              <2> 		shr ch, 2
  2223 00001D6B 66C1E902            <2> 		shr cx, 2
  2224 00001D6F 08C5                <2> 		or ch, al
  2225 00001D71 6689C8              <2> 		mov ax, cx
  2226 00001D74 E913000000          <2> 		jmp .doneutf
  2227                              <2> 	.two:
  2228 00001D79 8A2E                <2> 		mov ch, [esi]
  2229 00001D7B 46                  <2> 		inc esi
  2230 00001D7C 8A0E                <2> 		mov cl, [esi]
  2231 00001D7E 66C1E102            <2> 		shl cx, 2
  2232 00001D82 C0ED02              <2> 		shr ch, 2
  2233 00001D85 66C1E902            <2> 		shr cx, 2
  2234 00001D89 6689C8              <2> 		mov ax, cx
  2235                              <2> 	.doneutf:
  2236 00001D8C 5B                  <2> 		pop ebx
  2237 00001D8D 663B05[9F1D0000]    <2> 		cmp ax, [endkeyprint]
  2238 00001D94 7408                <2> 		je .done
  2239 00001D96 E8F9050000          <2> 		call prcharq
  2240 00001D9B 46                  <2> 		inc esi
  2241 00001D9C EBAD                <2> 		jmp .b
  2242                              <2> 	.done:
  2243 00001D9E C3                  <2> 		ret
  2244                              <2> 
  2245 00001D9F 0000                <2> endkeyprint dw 0
  2246                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2247                              <2> readstr:
  2248 00001DA1 E805000000          <2> call readint
  2249 00001DA6 E9FDE4FFFF          <2> jmp timerinterrupt
  2250                              <2> 
  2251                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2252 00001DAB 89C3                <2> 		mov ebx, eax
  2253                              <2> 	.b:
  2254 00001DAD 53                  <2> 		push ebx
  2255 00001DAE 57                  <2> 		push edi
  2256 00001DAF 56                  <2> 		push esi
  2257 00001DB0 30C0                <2> 		xor al, al
  2258 00001DB2 E850050000          <2> 		call rdcharint
  2259 00001DB7 5E                  <2> 		pop esi
  2260 00001DB8 8806                <2> 		mov [esi], al
  2261 00001DBA 46                  <2> 		inc esi
  2262 00001DBB 5F                  <2> 		pop edi
  2263 00001DBC 5B                  <2> 		pop ebx
  2264 00001DBD 39FE                <2> 		cmp esi, edi
  2265 00001DBF 7304                <2> 		jae .done
  2266 00001DC1 38D8                <2> 		cmp al, bl
  2267 00001DC3 75E8                <2> 		jne .b
  2268                              <2> 	.done:
  2269 00001DC5 4E                  <2> 		dec esi
  2270 00001DC6 C60600              <2> 		mov byte [esi], 0
  2271 00001DC9 C3                  <2> 		ret
  2272                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2273                              <2> clearscrn:
  2274 00001DCA E805000000          <2> call clear
  2275 00001DCF E9D4E4FFFF          <2> jmp timerinterrupt
  2276                              <2> %ifdef io.serial
  2277                              <2> clear:
  2278                              <2> 	ret
  2279                              <2> %else
  2280                              <2> clear:
  2281 00001DD4 668B0D[87250000]    <2> 		mov cx, [charxy]
  2282 00001DDB BF[7C0F0100]        <2> 		mov edi, videobuf
  2283 00001DE0 31C0                <2> 		xor eax, eax
  2284 00001DE2 A3[7D250000]        <2> 		mov [linebeginpos], eax
  2285 00001DE7 A3[81250000]        <2> 		mov [videobufpos], eax
  2286 00001DEC 6631D2              <2> 		xor dx, dx
  2287 00001DEF 66A3[85250000]      <2> 		mov [charpos], ax
  2288 00001DF5 66B80700            <2> 		mov ax, 7
  2289 00001DF9 C1E010              <2> 		shl eax, 16
  2290                              <2> 	clearb:
  2291 00001DFC 8907                <2> 		mov [edi], eax
  2292 00001DFE 81C704000000        <2> 		add edi, 4
  2293 00001E04 FEC9                <2> 		dec cl
  2294 00001E06 80F900              <2> 		cmp cl, 0
  2295 00001E09 75F1                <2> 		jne clearb
  2296 00001E0B 8A0D[87250000]      <2> 		mov cl, [charxy]
  2297 00001E11 FECD                <2> 		dec ch
  2298 00001E13 80FD00              <2> 		cmp ch, 0
  2299 00001E16 75E4                <2> 		jne clearb
  2300                              <2> 	cleardouble:
  2301 00001E18 BF[C4E40100]        <2> 		mov edi, videobuf2
  2302 00001E1D 668B0D[87250000]    <2> 		mov cx, [charxy]
  2303 00001E24 31C0                <2> 		xor eax, eax
  2304                              <2> 	clearc:
  2305 00001E26 8907                <2> 		mov [edi], eax
  2306 00001E28 81C704000000        <2> 		add edi, 4
  2307 00001E2E FEC9                <2> 		dec cl
  2308 00001E30 80F900              <2> 		cmp cl, 0
  2309 00001E33 75F1                <2> 		jne clearc
  2310 00001E35 8A0D[87250000]      <2> 		mov cl, [charxy]
  2311 00001E3B FECD                <2> 		dec ch
  2312 00001E3D 80FD00              <2> 		cmp ch, 0
  2313 00001E40 75E4                <2> 		jne clearc
  2314 00001E42 E8160A0000          <2> 		call termcopy
  2315 00001E47 C3                  <2> 		ret
  2316                              <2> %endif
  2317                              <2> 		
  2318                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2319                              <2> prntreadstr:
  2320 00001E48 E80B000000          <2> call rdprint
  2321 00001E4D E956E4FFFF          <2> jmp timerinterrupt
  2322                              <2> 
  2323                              <2> readline:
  2324 00001E52 B00A                <2>   mov al, 10
  2325 00001E54 66BB0700            <2>   mov bx, 7
  2326                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2327 00001E58 E80F000000          <2> 	call rdprintdos
  2328 00001E5D 50                  <2> 	push eax
  2329 00001E5E A0[E7220000]        <2> 	mov al, [endkeyrdpr]
  2330 00001E63 30E4                <2> 	xor ah, ah
  2331 00001E65 E817050000          <2> 	call prcharint
  2332 00001E6A 58                  <2> 	pop eax
  2333 00001E6B C3                  <2> 	ret
  2334                              <2> 
  2335                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2336 00001E6C 8935[F0220000]      <2> 		mov [buftxtloc], esi
  2337 00001E72 A2[E7220000]        <2> 		mov [endkeyrdpr], al
  2338 00001E77 66891D[E8220000]    <2> 		mov [modkeyrdpr], bx
  2339 00001E7E 8935[EA220000]      <2> 		mov [firstesirdpr], esi
  2340 00001E84 893D[F4220000]      <2> 		mov [endbufferrdpr], edi
  2341 00001E8A 8B3D[18BA0200]      <2> 		mov edi, [commandsentered]
  2342 00001E90 893D[14BA0200]      <2> 		mov [commandlistentries], edi
  2343                              <2> 	rdprintb:
  2344 00001E96 56                  <2> 		push esi
  2345 00001E97 B001                <2> 		mov al, 1
  2346 00001E99 E869040000          <2> 		call rdcharint
  2347 00001E9E 8A25[67230000]      <2> 		mov ah, [lastkey + 2]
  2348 00001EA4 88E1                <2> 		mov cl, ah
  2349 00001EA6 5E                  <2> 		pop esi
  2350                              <2> %ifdef io.serial
  2351                              <2> 		cmp ah, 0x41
  2352                              <2> 		je near rdprup
  2353                              <2> 		cmp ah, 0x42
  2354                              <2> 		je near rdprdown
  2355                              <2> 		cmp ah, 0x43
  2356                              <2> 		je near rdprright
  2357                              <2> 		cmp ah, 0x44
  2358                              <2> 		je near rdprleft
  2359                              <2> 		cmp ah, 0x31
  2360                              <2> 		je near rdprhome
  2361                              <2> 		cmp ah, 0x48
  2362                              <2> 		je near rdprhome
  2363                              <2> 		cmp ah, 0x46
  2364                              <2> 		je near rdprend
  2365                              <2> 		cmp ah, 0x33
  2366                              <2> 		je near rdprdel
  2367                              <2> 		cmp ah, 0x34
  2368                              <2> 		je near rdprend
  2369                              <2> %else
  2370 00001EA7 803D[B15B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2371 00001EAE 753F                <2> 		jne notspecialrdprnt
  2372 00001EB0 80FC53              <2> 		cmp ah, 0x53
  2373 00001EB3 0F84B1030000        <2> 		je near rdprdel
  2374 00001EB9 80FC47              <2> 		cmp ah, 0x47
  2375 00001EBC 0F847E010000        <2> 		je near rdprhome
  2376 00001EC2 80FC4F              <2> 		cmp ah, 0x4F
  2377 00001EC5 0F8494010000        <2> 		je near rdprend
  2378 00001ECB 80FC50              <2> 		cmp ah, 0x50
  2379 00001ECE 0F8424020000        <2> 		je near rdprdown
  2380 00001ED4 80FC4D              <2> 		cmp ah, 0x4D
  2381 00001ED7 0F84C1010000        <2> 		je near rdprright
  2382 00001EDD 80FC4B              <2> 		cmp ah, 0x4B
  2383 00001EE0 0F8496010000        <2> 		je near rdprleft
  2384 00001EE6 80FC48              <2> 		cmp ah, 0x48
  2385 00001EE9 0F844C020000        <2> 		je near rdprup
  2386                              <2> 	notspecialrdprnt:
  2387                              <2> %endif
  2388 00001EEF 66A1[65230000]      <2> 		mov ax, [lastkey]
  2389 00001EF5 663D0800            <2> 		cmp ax, 8
  2390 00001EF9 0F8486030000        <2> 		je near rdprbscheck
  2391 00001EFF 663D0000            <2> 		cmp ax, 0
  2392 00001F03 7491                <2> 		je rdprintb
  2393 00001F05 80F900              <2> 		cmp cl, 0
  2394 00001F08 748C                <2> 		je rdprintb
  2395 00001F0A 663D8000            <2> 		cmp ax, 0x80
  2396 00001F0E 7257                <2> 		jb .normal
  2397 00001F10 663D0008            <2> 		cmp ax, 0x800
  2398 00001F14 7321                <2> 		jae .three
  2399 00001F16 46                  <2> 		inc esi
  2400 00001F17 3B35[F4220000]      <2> 		cmp esi, [endbufferrdpr]
  2401 00001F1D 0F83DA000000        <2> 		jae near donerdprinc
  2402 00001F23 66C1E002            <2> 		shl ax, 2
  2403 00001F27 C0E802              <2> 		shr al, 2
  2404 00001F2A 0C80                <2> 		or al, 10000000b
  2405 00001F2C 80CCC0              <2> 		or ah, 11000000b
  2406 00001F2F 8866FF              <2> 		mov [esi - 1], ah
  2407 00001F32 E930000000          <2> 		jmp .normal
  2408                              <2> .three:	
  2409 00001F37 81C602000000        <2> 		add esi, 2
  2410 00001F3D 3B35[F4220000]      <2> 		cmp esi, [endbufferrdpr]
  2411 00001F43 0F83B4000000        <2> 		jae near donerdprinc
  2412 00001F49 88E1                <2> 		mov cl, ah
  2413 00001F4B C0E904              <2> 		shr cl, 4
  2414 00001F4E 80C9E0              <2> 		or cl, 11100000b
  2415 00001F51 884EFE              <2> 		mov [esi - 2], cl
  2416 00001F54 66C1E004            <2> 		shl ax, 4
  2417 00001F58 66C1E802            <2> 		shr ax, 2
  2418 00001F5C 80CC80              <2> 		or ah, 10000000b
  2419 00001F5F C0E802              <2> 		shr al, 2
  2420 00001F62 0C80                <2> 		or al, 10000000b
  2421 00001F64 8866FF              <2> 		mov [esi - 1], ah
  2422                              <2> .normal:
  2423 00001F67 8806                <2> 		mov [esi], al
  2424 00001F69 46                  <2> 		inc esi
  2425 00001F6A 66A1[65230000]      <2> 		mov ax, [lastkey]
  2426                              <2> 	bscheckequal:
  2427 00001F70 668B1D[E8220000]    <2> 		mov bx, [modkeyrdpr]
  2428 00001F77 803D[EF220000]00    <2> 		cmp byte [txtmask], 0
  2429 00001F7E 7407                <2> 		je nomasktxt
  2430 00001F80 30E4                <2> 		xor ah, ah
  2431 00001F82 A0[EF220000]        <2> 		mov al, [txtmask]
  2432                              <2> 	nomasktxt:
  2433 00001F87 56                  <2> 		push esi
  2434 00001F88 66A3[E5220000]      <2> 		mov [axcache], ax
  2435 00001F8E 8A25[E7220000]      <2> 		mov ah, [endkeyrdpr]
  2436 00001F94 38E0                <2> 		cmp al, ah
  2437 00001F96 7434                <2> 		je nobackprintbuftxt2
  2438 00001F98 E8E4030000          <2> 		call prcharint
  2439 00001F9D BE[66040100]        <2> 		mov esi, buftxt2
  2440 00001FA2 E865FDFFFF          <2> 		call printquiet
  2441 00001FA7 66B82000            <2> 		mov ax, " "
  2442 00001FAB E8E4030000          <2> 		call prcharq
  2443 00001FB0 66B80800            <2> 		mov ax, 8
  2444 00001FB4 81FE[66040100]      <2> 		cmp esi, buftxt2
  2445 00001FBA 7410                <2> 		je nobackprintbuftxt2
  2446                              <2> 	backprintbuftxt2:
  2447 00001FBC 30E4                <2> 		xor ah, ah
  2448 00001FBE E8D1030000          <2> 		call prcharq
  2449 00001FC3 4E                  <2> 		dec esi
  2450 00001FC4 81FE[66040100]      <2> 		cmp esi, buftxt2
  2451 00001FCA 77F0                <2> 		ja backprintbuftxt2
  2452                              <2> 	nobackprintbuftxt2:
  2453 00001FCC 3C0A                <2> 		cmp al, 10
  2454 00001FCE 7407                <2> 		je nonobackprint
  2455 00001FD0 30E4                <2> 		xor ah, ah
  2456 00001FD2 E8AA030000          <2> 		call prcharint
  2457                              <2> 	nonobackprint:
  2458 00001FD7 5E                  <2> 		pop esi
  2459 00001FD8 3B35[F4220000]      <2> 		cmp esi, [endbufferrdpr]
  2460 00001FDE 0F8319000000        <2> 		jae near donerdprinc
  2461 00001FE4 66A1[E5220000]      <2> 		mov ax, [axcache]
  2462 00001FEA 8A25[E7220000]      <2> 		mov ah, [endkeyrdpr]
  2463 00001FF0 38E0                <2> 		cmp al, ah
  2464 00001FF2 0F859EFEFFFF        <2> 		jne rdprintb
  2465 00001FF8 E901000000          <2> 		jmp donerdprint
  2466                              <2> 	donerdprinc:
  2467 00001FFD 46                  <2> 		inc esi
  2468                              <2> 	donerdprint:
  2469 00001FFE 4E                  <2> 		dec esi
  2470 00001FFF BF[66040100]        <2> 		mov edi, buftxt2
  2471                              <2> 	copylaterstuff:
  2472 00002004 8A07                <2> 		mov al, [edi]
  2473 00002006 3C00                <2> 		cmp al, 0
  2474 00002008 7406                <2> 		je nocopylaterstuff
  2475 0000200A 8806                <2> 		mov [esi], al
  2476 0000200C 47                  <2> 		inc edi
  2477 0000200D 46                  <2> 		inc esi
  2478 0000200E EBF4                <2> 		jmp copylaterstuff
  2479                              <2> 	nocopylaterstuff:
  2480 00002010 C60600              <2> 		mov byte [esi], 0
  2481 00002013 E80B000000          <2> 		call clearbuftxt2
  2482 00002018 89F1                <2> 		mov ecx, esi
  2483 0000201A 8B3D[EA220000]      <2> 		mov edi, [firstesirdpr]
  2484 00002020 29F9                <2> 		sub ecx, edi
  2485 00002022 C3                  <2> 		ret
  2486                              <2> 	
  2487                              <2> 	clearbuftxt2:
  2488 00002023 30C0                <2> 		xor al, al
  2489 00002025 BF[66040100]        <2> 		mov edi, buftxt2
  2490                              <2> 	clearbuftxt2lp:
  2491 0000202A 8807                <2> 		mov [edi], al
  2492 0000202C 47                  <2> 		inc edi
  2493 0000202D 81FF[66080100]      <2> 		cmp edi, buftxt
  2494 00002033 75F5                <2> 		jne clearbuftxt2lp
  2495 00002035 C3                  <2> 		ret
  2496                              <2> 	
  2497                              <2> 	rdprintb2:
  2498 00002036 E822080000          <2> 		call termcopy
  2499 0000203B E956FEFFFF          <2> 		jmp rdprintb
  2500                              <2> 	
  2501                              <2> 	rdprhome:
  2502 00002040 3B35[F0220000]      <2> 		cmp esi, [buftxtloc]
  2503 00002046 0F84EAFFFFFF        <2> 		je near rdprintb2
  2504 0000204C BF[66040100]        <2> 		mov edi, buftxt2
  2505 00002051 8A07                <2> 		mov al, [edi]
  2506 00002053 E85F020000          <2> 		call shiftbuftxt2
  2507 00002058 E837030000          <2> 		call prcharq
  2508 0000205D EBE1                <2> 		jmp rdprhome
  2509                              <2> 		
  2510                              <2> 	rdprend:
  2511 0000205F BF[66040100]        <2> 		mov edi, buftxt2
  2512 00002064 8A07                <2> 		mov al, [edi]
  2513 00002066 3C00                <2> 		cmp al, 0
  2514 00002068 0F84C8FFFFFF        <2> 		je near rdprintb2
  2515 0000206E 8806                <2> 		mov [esi], al
  2516 00002070 E849000000          <2> 		call shiftbuftxt2lft
  2517 00002075 E81A030000          <2> 		call prcharq
  2518 0000207A EBE3                <2> 		jmp rdprend
  2519                              <2> 	
  2520                              <2> 	rdprleft:
  2521 0000207C 3B35[F0220000]      <2> 		cmp esi, [buftxtloc]
  2522 00002082 0F840EFEFFFF        <2> 		je near rdprintb
  2523 00002088 BF[66040100]        <2> 		mov edi, buftxt2
  2524 0000208D 8A07                <2> 		mov al, [edi]
  2525 0000208F E823020000          <2> 		call shiftbuftxt2
  2526 00002094 E8E8020000          <2> 		call prcharint
  2527 00002099 E9F8FDFFFF          <2> 		jmp rdprintb
  2528                              <2> 		
  2529                              <2> 	rdprright:
  2530 0000209E BF[66040100]        <2> 		mov edi, buftxt2
  2531 000020A3 8A07                <2> 		mov al, [edi]
  2532 000020A5 3C00                <2> 		cmp al, 0
  2533 000020A7 0F84E9FDFFFF        <2> 		je near rdprintb
  2534 000020AD 8806                <2> 		mov [esi], al
  2535 000020AF E80A000000          <2> 		call shiftbuftxt2lft
  2536 000020B4 E8C8020000          <2> 		call prcharint
  2537 000020B9 E9D8FDFFFF          <2> 		jmp rdprintb
  2538                              <2> 		
  2539                              <2> 	shiftbuftxt2lft:
  2540 000020BE 55                  <2> 		push ebp
  2541 000020BF 89FD                <2> 		mov ebp, edi
  2542                              <2> 	.lp:
  2543 000020C1 3C00                <2> 		cmp al, 0
  2544 000020C3 7408                <2> 		je noshiftbuftxt2lft
  2545 000020C5 47                  <2> 		inc edi
  2546 000020C6 8A07                <2> 		mov al, [edi]
  2547 000020C8 8847FF              <2> 		mov [edi - 1], al
  2548 000020CB EBF4                <2> 		jmp .lp
  2549                              <2> 	noshiftbuftxt2lft:
  2550 000020CD 8A4500              <2> 		mov al, [ebp]
  2551 000020D0 5D                  <2> 		pop ebp
  2552 000020D1 3CC0                <2> 		cmp al, 0xC0
  2553 000020D3 7304                <2> 		jae .nofix
  2554 000020D5 3C80                <2> 		cmp al, 0x80
  2555 000020D7 73E5                <2> 		jae shiftbuftxt2lft
  2556                              <2> 	.nofix:
  2557 000020D9 8A06                <2> 		mov al, [esi]
  2558 000020DB 30E4                <2> 		xor ah, ah
  2559 000020DD 46                  <2> 		inc esi
  2560 000020DE 668B1D[E8220000]    <2> 		mov bx, [modkeyrdpr]
  2561 000020E5 C3                  <2> 		ret
  2562                              <2> 		
  2563                              <2> 	rdprdownbck:
  2564 000020E6 FECC                <2> 		dec ah
  2565 000020E8 8825[EE220000]      <2> 		mov [commandedit], ah
  2566 000020EE E88D000000          <2> 		call rdprbckspc
  2567 000020F3 E99EFDFFFF          <2> 		jmp rdprintb
  2568                              <2> 	
  2569                              <2> 	rdprdown:
  2570 000020F8 8A25[EE220000]      <2> 		mov ah, [commandedit]
  2571 000020FE 80FC01              <2> 		cmp ah, 1
  2572 00002101 0F868FFDFFFF        <2> 		jbe near rdprintb
  2573 00002107 8B3D[18BA0200]      <2> 		mov edi, [commandsentered]
  2574 0000210D 3B3D[14BA0200]      <2> 		cmp edi, [commandlistentries]
  2575 00002113 7618                <2> 		jbe .nofix
  2576 00002115 8105[14BA0200]0200- <2> 		add dword [commandlistentries], 2
  2577 0000211D 0000                <2>
  2578 0000211F 3B3D[14BA0200]      <2> 		cmp edi, [commandlistentries]
  2579 00002125 7706                <2> 		ja .nofix
  2580 00002127 893D[14BA0200]      <2> 		mov [commandlistentries], edi
  2581                              <2> 	.nofix:
  2582 0000212D 80FC02              <2> 		cmp ah, 2
  2583 00002130 74B4                <2> 		je rdprdownbck
  2584 00002132 80EC02              <2> 		sub ah, 2
  2585 00002135 8825[EE220000]      <2> 		mov [commandedit], ah
  2586                              <2> 		
  2587                              <2> 	rdprup:
  2588 0000213B 3805[EE220000]      <2> 		cmp [commandedit], al
  2589 00002141 0F844FFDFFFF        <2> 		je near rdprintb
  2590 00002147 813D[14BA0200]0000- <2> 		cmp dword [commandlistentries], 0
  2591 0000214F 0000                <2>
  2592 00002151 0F843FFDFFFF        <2> 		je near rdprintb
  2593 00002157 FF0D[14BA0200]      <2> 		dec dword [commandlistentries]
  2594                              <2> 	.lp:
  2595 0000215D BF[66040100]        <2> 		mov edi, buftxt2
  2596 00002162 8A07                <2> 		mov al, [edi]
  2597 00002164 3C00                <2> 		cmp al, 0
  2598 00002166 740E                <2> 		je .start
  2599 00002168 8806                <2> 		mov [esi], al
  2600 0000216A E84FFFFFFF          <2> 		call shiftbuftxt2lft
  2601 0000216F E820020000          <2> 		call prcharq
  2602 00002174 EBE7                <2> 		jmp .lp
  2603                              <2> 	.start:
  2604 00002176 E805000000          <2> 		call rdprbckspc
  2605 0000217B E948000000          <2> 		jmp getcurrentcommandstr
  2606                              <2> 	rdprbckspc:
  2607 00002180 3B35[F0220000]      <2> 		cmp esi, [buftxtloc]
  2608 00002186 7432                <2> 		je nordprupbck
  2609                              <2> 	rdprupbckspclp:
  2610 00002188 66B80800            <2> 		mov ax, 8
  2611 0000218C 668B1D[E8220000]    <2> 		mov bx, [modkeyrdpr]
  2612 00002193 E8FC010000          <2> 		call prcharq
  2613 00002198 66B82000            <2> 		mov ax, ' '
  2614 0000219C E8F3010000          <2> 		call prcharq
  2615 000021A1 66B80800            <2> 		mov ax, 8
  2616 000021A5 E8EA010000          <2> 		call prcharq
  2617 000021AA 4E                  <2> 		dec esi
  2618 000021AB 3B35[F0220000]      <2> 		cmp esi, [buftxtloc]
  2619 000021B1 7402                <2> 		je nordprupbck2
  2620 000021B3 EBD3                <2> 		jmp rdprupbckspclp
  2621                              <2> 	nordprupbck2:
  2622 000021B5 E8A3060000          <2> 		call termcopy
  2623                              <2> 	nordprupbck:
  2624 000021BA 8B3D[10BA0200]      <2> 		mov edi, [commandbufpos]
  2625 000021C0 81C7[1CBA0200]      <2> 		add edi, commandbuf
  2626 000021C6 4F                  <2> 		dec edi
  2627 000021C7 C3                  <2> 		ret
  2628                              <2> 	getcurrentcommandstr:
  2629 000021C8 8A25[EE220000]      <2> 		mov ah, [commandedit]
  2630 000021CE FE05[EE220000]      <2> 		inc byte [commandedit]
  2631                              <2> 	getccmdlp:
  2632 000021D4 4F                  <2> 		dec edi
  2633 000021D5 8A07                <2> 		mov al, [edi]
  2634 000021D7 81FF[1CBA0200]      <2> 		cmp edi, commandbuf
  2635 000021DD 7231                <2> 		jb getcmdresetcommandbuf
  2636 000021DF 81EF[1CBA0200]      <2> 		sub edi, commandbuf
  2637 000021E5 3B3D[10BA0200]      <2> 		cmp edi, [commandbufpos]
  2638 000021EB 0F84A5FCFFFF        <2> 		je near rdprintb
  2639 000021F1 81C7[1CBA0200]      <2> 		add edi, commandbuf
  2640 000021F7 3C00                <2> 		cmp al, 0
  2641 000021F9 75D9                <2> 		jne getccmdlp
  2642 000021FB FECC                <2> 		dec ah
  2643 000021FD 80FC00              <2> 		cmp ah, 0
  2644 00002200 77D2                <2> 		ja getccmdlp
  2645 00002202 47                  <2> 		inc edi
  2646 00002203 81FF[1CCA0200]      <2> 		cmp edi, commandbufend
  2647 00002209 770D                <2> 		ja fixcmdbufb4morerdpr
  2648 0000220B E915000000          <2> 		jmp morerdprup
  2649                              <2> 	getcmdresetcommandbuf:
  2650 00002210 BF[1CCA0200]        <2> 		mov edi, commandbufend
  2651 00002215 47                  <2> 		inc edi
  2652 00002216 EBBC                <2> 		jmp getccmdlp
  2653                              <2> 	fixcmdbufb4morerdpr:
  2654 00002218 4F                  <2> 		dec edi
  2655 00002219 81EF[1CCA0200]      <2> 		sub edi, commandbufend
  2656 0000221F 81C7[1CBA0200]      <2> 		add edi, commandbuf
  2657                              <2> 	morerdprup:
  2658 00002225 8A07                <2> 		mov al, [edi]
  2659 00002227 47                  <2> 		inc edi
  2660 00002228 81EF[1CBA0200]      <2> 		sub edi, commandbuf
  2661 0000222E 3C00                <2> 		cmp al, 0
  2662 00002230 0F8400FEFFFF        <2> 		je near rdprintb2
  2663 00002236 3B3D[10BA0200]      <2> 		cmp edi, [commandbufpos]
  2664 0000223C 0F83F4FDFFFF        <2> 		jae near rdprintb2
  2665 00002242 81C7[1CBA0200]      <2> 		add edi, commandbuf
  2666 00002248 8806                <2> 		mov [esi], al
  2667 0000224A 46                  <2> 		inc esi
  2668 0000224B 57                  <2> 		push edi
  2669 0000224C 668B1D[E8220000]    <2> 		mov bx, [modkeyrdpr]
  2670 00002253 30E4                <2> 		xor ah, ah
  2671 00002255 E83A010000          <2> 		call prcharq
  2672 0000225A 5F                  <2> 		pop edi
  2673 0000225B 81FF[1CCA0200]      <2> 		cmp edi, commandbufend
  2674 00002261 76C2                <2> 		jbe morerdprup
  2675 00002263 BF[1CBA0200]        <2> 		mov edi, commandbuf
  2676 00002268 EBBB                <2> 		jmp morerdprup
  2677                              <2> 		
  2678                              <2> 	rdprdel:
  2679 0000226A BF[66040100]        <2> 		mov edi, buftxt2
  2680 0000226F 8A07                <2> 		mov al, [edi]
  2681 00002271 3C00                <2> 		cmp al, 0
  2682 00002273 0F841DFCFFFF        <2> 		je near rdprintb
  2683 00002279 8806                <2> 		mov [esi], al
  2684 0000227B E83EFEFFFF          <2> 		call shiftbuftxt2lft
  2685 00002280 E80F010000          <2> 		call prcharq
  2686                              <2> 		
  2687                              <2> 	rdprbscheck:
  2688 00002285 3B35[EA220000]      <2> 		cmp esi, [firstesirdpr]
  2689 0000228B 0F8605FCFFFF        <2> 		jbe near rdprintb
  2690                              <2> 	goodbscheck:
  2691 00002291 4E                  <2> 		dec esi
  2692 00002292 8A46FF              <2> 		mov al, [esi - 1]
  2693 00002295 C60600              <2> 		mov byte [esi], 0
  2694 00002298 3CC0                <2> 		cmp al, 0xC0
  2695 0000229A 7309                <2> 		jae .onemore
  2696 0000229C 3C80                <2> 		cmp al, 0x80
  2697 0000229E 73F1                <2> 		jae goodbscheck
  2698 000022A0 E904000000          <2> 		jmp .nomore
  2699                              <2> 	.onemore:
  2700 000022A5 4E                  <2> 		dec esi
  2701 000022A6 C60600              <2> 		mov byte [esi], 0		
  2702                              <2> 	.nomore:
  2703 000022A9 668B1D[E8220000]    <2> 		mov bx, [modkeyrdpr]
  2704 000022B0 B008                <2> 		mov al, 8
  2705 000022B2 E9B9FCFFFF          <2> 		jmp bscheckequal
  2706                              <2> 		
  2707                              <2> 	shiftbuftxt2:
  2708 000022B7 55                  <2> 		push ebp
  2709 000022B8 89FD                <2> 		mov ebp, edi
  2710                              <2> 	.lp
  2711 000022BA 3C00                <2> 		cmp al, 0
  2712 000022BC 7409                <2> 		je noshiftbuftxt2
  2713 000022BE 47                  <2> 		inc edi
  2714 000022BF 8A27                <2> 		mov ah, [edi]
  2715 000022C1 8807                <2> 		mov [edi], al
  2716 000022C3 88E0                <2> 		mov al, ah
  2717 000022C5 EBF3                <2> 		jmp .lp
  2718                              <2> 	noshiftbuftxt2:
  2719 000022C7 8A4500              <2> 		mov al, [ebp]
  2720 000022CA 5D                  <2> 		pop ebp
  2721 000022CB 3CC0                <2> 		cmp al, 0xC0
  2722 000022CD 7304                <2> 		jae .nofix
  2723 000022CF 3C80                <2> 		cmp al, 0x80
  2724 000022D1 73E4                <2> 		jae shiftbuftxt2
  2725                              <2> 	.nofix:
  2726 000022D3 BF[66040100]        <2> 		mov edi, buftxt2
  2727 000022D8 4E                  <2> 		dec esi
  2728 000022D9 8A06                <2> 		mov al, [esi]
  2729 000022DB 8807                <2> 		mov [edi], al
  2730 000022DD C60600              <2> 		mov byte [esi], 0
  2731 000022E0 66B80800            <2> 		mov ax, 8
  2732 000022E4 C3                  <2> 		ret
  2733                              <2> 		
  2734 000022E5 0000                <2> axcache dw 0
  2735 000022E7 00                  <2> endkeyrdpr db 0
  2736 000022E8 0000                <2> modkeyrdpr dw 0
  2737 000022EA 00000000            <2> firstesirdpr dd 0
  2738 000022EE 00                  <2> commandedit db 0
  2739 000022EF 00                  <2> txtmask db 0
  2740 000022F0 00000000            <2> buftxtloc dd 0
  2741 000022F4 00000000            <2> endbufferrdpr dd 0
  2742 000022F8 082000              <2> backcursor db 8," ",0
  2743                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2744                              <2> readchar:
  2745 000022FB E807000000          <2> 	call rdcharint
  2746 00002300 E9A3DFFFFF          <2> 	jmp timerinterrupt
  2747                              <2> getchar:
  2748 00002305 30C0                <2> 	xor al, al
  2749                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2750 00002307 66C705[69230000]01- <2> 		mov word [trans], 1
  2751 0000230F 00                  <2>
  2752 00002310 3C00                <2> 		cmp al, 0
  2753 00002312 7509                <2> 		jne transcheck
  2754 00002314 66C705[69230000]00- <2> 		mov word [trans], 0
  2755 0000231C 00                  <2>
  2756                              <2> 	transcheck:
  2757                              <2> 	%ifdef io.serial
  2758                              <2> 		call serial.receive
  2759                              <2> 		xor ah, ah
  2760                              <2> 		cmp al, 13
  2761                              <2> 		je rdenter
  2762                              <2> 	%else
  2763 0000231D E8B1380000          <2> 		call getkey
  2764 00002322 66A1[67230000]      <2> 		mov ax, [lastkey + 2]
  2765 00002328 663D1C00            <2> 		cmp ax, 0x1C
  2766 0000232C 7425                <2> 		je rdenter
  2767                              <2> 	%endif
  2768 0000232E 66A1[65230000]      <2> 		mov ax, [lastkey]
  2769 00002334 668B1D[69230000]    <2> 		mov bx, [trans]
  2770 0000233B 803D[B15B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2771 00002342 7500                <2> 		jne nospecialtrans
  2772                              <2> 	nospecialtrans:
  2773 00002344 6609C3              <2> 		or bx, ax
  2774 00002347 6681FB0000          <2> 		cmp bx, 0
  2775 0000234C 74CF                <2> 		je transcheck
  2776 0000234E E90C000000          <2> 		jmp rdend
  2777                              <2> 	rdenter:
  2778 00002353 C1E010              <2> 		shl eax, 16
  2779 00002356 66B80A00            <2> 		mov ax, 10
  2780 0000235A A3[65230000]        <2> 		mov [lastkey], eax
  2781                              <2> 	rdend:
  2782 0000235F A1[65230000]        <2> 		mov eax, [lastkey]
  2783 00002364 C3                  <2> 		ret
  2784                              <2> 		
  2785 00002365 00000000            <2> lastkey dd 0
  2786 00002369 0000                <2> trans dw 0
  2787                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2788                              <2> prntchar:
  2789 0000236B 30E4                <2> 	xor ah, ah
  2790                              <2> %ifdef io.serial
  2791                              <2> 	call prcharint
  2792                              <2> 	jmp timerinterrupt
  2793                              <2> prcharint:	
  2794                              <2> prcharq:
  2795                              <2> 	call serial.send
  2796                              <2> 	ret
  2797                              <2> %else
  2798 0000236D 38FB                <2> cmp bl, bh
  2799 0000236F 740A                <2> je prchar.notimer
  2800 00002371 E80B000000          <2> call prcharint
  2801 00002376 E92DDFFFFF          <2> jmp timerinterrupt
  2802                              <2> prchar.notimer:
  2803 0000237B E814000000          <2> 	call prcharq
  2804 00002380 CF                  <2> 	iret
  2805                              <2> 	
  2806                              <2> prcharint:	;print char, char in ax, modifier in bx, if bl = bh  then termcopy will not happen, will run termcopy if called as is
  2807 00002381 30E4                <2> xor ah, ah
  2808 00002383 38FB                <2> 	cmp bl, bh
  2809 00002385 740D                <2> 	je prcharq
  2810 00002387 E808000000          <2> 	call prcharq
  2811 0000238C E8CC040000          <2> 	call termcopy
  2812 00002391 C3                  <2> 	ret
  2813 00002392 00                  <2> termguion db 0
  2814 00002393 00                  <2> termcopyon db 0
  2815                              <2> prcharq:
  2816 00002394 C1E310              <2> 	shl ebx, 16
  2817 00002397 6689C3              <2> 	mov bx, ax
  2818 0000239A 89D8                <2> 	mov eax, ebx
  2819 0000239C A3[89250000]        <2> 	mov [charbuf], eax
  2820 000023A1 8B1D[81250000]      <2> 	mov ebx, [videobufpos]
  2821 000023A7 BF[7C0F0100]        <2> 	mov edi, videobuf
  2822 000023AC 01DF                <2> 	add edi, ebx
  2823 000023AE A1[68280000]        <2> 	mov eax, [removedvideo]
  2824 000023B3 8907                <2> 	mov [edi], eax
  2825 000023B5 A1[89250000]        <2> 	mov eax, [charbuf]
  2826 000023BA 31D2                <2> 	xor edx, edx
  2827 000023BC 668B15[85250000]    <2> 	mov dx, [charpos]
  2828 000023C3 31C9                <2> 	xor ecx, ecx
  2829 000023C5 668B0D[87250000]    <2> 	mov cx, [charxy]
  2830 000023CC 663D0900            <2> 	cmp ax, 9
  2831 000023D0 0F8479000000        <2> 	je near prtab
  2832 000023D6 663D0D00            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2833 000023DA 0F849C000000        <2> 	je near prcr
  2834 000023E0 663D0A00            <2> 	cmp ax, 10
  2835 000023E4 0F84E5000000        <2> 	je near prnlcr
  2836 000023EA 663D0800            <2> 	cmp ax, 8
  2837 000023EE 0F8499000000        <2> 	je near prbs
  2838 000023F4 663DFF00            <2> 	cmp ax, 255		;null character
  2839 000023F8 0F8424000000        <2> 	je near donescr
  2840 000023FE 663D0005            <2> 	cmp ax, (fontend - fonts)/16
  2841 00002402 0F8341000000        <2> 	jae near prnofont
  2842                              <2> donepr:
  2843 00002408 8907                <2> 	mov [edi], eax
  2844 0000240A 81C704000000        <2> 	add edi, 4
  2845 00002410 FEC2                <2> 	inc dl
  2846                              <2> donecrnl:
  2847 00002412 38CA                <2> 	cmp dl, cl
  2848 00002414 0F83D9000000        <2> 	jae near preol
  2849                              <2> doneeol:
  2850 0000241A 38EE                <2> 	cmp dh, ch
  2851 0000241C 0F83EE000000        <2> 	jae near prscr	
  2852                              <2> donescr:
  2853 00002422 89FB                <2> 	mov ebx, edi
  2854 00002424 8B07                <2> 	mov eax, [edi]
  2855 00002426 A3[68280000]        <2> 	mov [removedvideo], eax
  2856 0000242B 81EB[7C0F0100]      <2> 	sub ebx, videobuf
  2857 00002431 891D[81250000]      <2> 	mov [videobufpos], ebx
  2858 00002437 668915[85250000]    <2> 	mov [charpos], dx
  2859 0000243E A1[89250000]        <2> 	mov eax, [charbuf]
  2860 00002443 89C3                <2> 	mov ebx, eax
  2861 00002445 C1EB10              <2> 	shr ebx, 16
  2862 00002448 C3                  <2> 	ret
  2863                              <2> 	
  2864                              <2> 	prnofont:
  2865 00002449 66B80200            <2> 		mov ax, 2
  2866 0000244D EBB9                <2> 		jmp donepr
  2867                              <2> 	prtab:
  2868 0000244F 8B1D[7D250000]      <2> 		mov ebx, [linebeginpos]
  2869 00002455 81EF[7C0F0100]      <2> 		sub edi, videobuf
  2870 0000245B 29DF                <2> 		sub edi, ebx
  2871 0000245D C1EF05              <2> 		shr edi, 5
  2872 00002460 C1E705              <2> 		shl edi, 5
  2873 00002463 81C720000000        <2> 		add edi, 32
  2874 00002469 C0EA03              <2> 		shr dl, 3
  2875 0000246C C0E203              <2> 		shl dl, 3
  2876 0000246F 80C208              <2> 		add dl, 8
  2877 00002472 81C7[7C0F0100]      <2> 		add edi, videobuf
  2878 00002478 01DF                <2> 		add edi, ebx
  2879 0000247A EB96                <2> 		jmp donecrnl
  2880                              <2> 	
  2881                              <2> 	prcr:
  2882 0000247C 30D2                <2> 		xor dl, dl
  2883 0000247E BF[7C0F0100]        <2> 		mov edi, videobuf
  2884 00002483 8B1D[7D250000]      <2> 		mov ebx, [linebeginpos]
  2885 00002489 01DF                <2> 		add edi, ebx
  2886 0000248B EB85                <2> 		jmp donecrnl
  2887                              <2> 			
  2888                              <2> 	prbs:
  2889 0000248D 8B1D[7D250000]      <2> 		mov ebx, [linebeginpos]
  2890 00002493 80FA00              <2> 		cmp dl, 0
  2891 00002496 7415                <2> 		je prbackline
  2892                              <2> 	prnobmr:
  2893 00002498 891D[7D250000]      <2> 		mov [linebeginpos], ebx
  2894 0000249E FECA                <2> 		dec dl
  2895 000024A0 31C0                <2> 		xor eax, eax
  2896 000024A2 81EF04000000        <2> 		sub edi, 4
  2897 000024A8 E965FFFFFF          <2> 		jmp donecrnl
  2898                              <2> 	prbackline:
  2899 000024AD 6631DB              <2> 		xor bx, bx
  2900 000024B0 88CA                <2> 		mov dl, cl
  2901 000024B2 80FE00              <2> 		cmp dh, 0
  2902 000024B5 74E1                <2> 		je prnobmr
  2903 000024B7 8B1D[7D250000]      <2> 		mov ebx, [linebeginpos]
  2904 000024BD 6651                <2> 		push cx
  2905 000024BF 31C9                <2> 		xor ecx, ecx
  2906 000024C1 8A0C24              <2> 		mov cl, [esp]
  2907 000024C4 C1E102              <2> 		shl ecx, 2
  2908 000024C7 29CB                <2> 		sub ebx, ecx
  2909 000024C9 6659                <2> 		pop cx
  2910 000024CB FECE                <2> 		dec dh
  2911 000024CD EBC9                <2> 		jmp prnobmr
  2912                              <2> 		
  2913                              <2> 	prnlcr:
  2914 000024CF FEC6                <2> 		inc dh
  2915 000024D1 31DB                <2> 		xor ebx, ebx
  2916 000024D3 30D2                <2> 		xor dl, dl
  2917 000024D5 88CB                <2> 		mov bl, cl
  2918 000024D7 66C1E302            <2> 		shl bx, 2
  2919 000024DB BF[7C0F0100]        <2> 		mov edi, videobuf
  2920 000024E0 031D[7D250000]      <2> 		add ebx, [linebeginpos]
  2921 000024E6 891D[7D250000]      <2> 		mov [linebeginpos], ebx
  2922 000024EC 01DF                <2> 		add edi, ebx
  2923 000024EE E91FFFFFFF          <2> 		jmp donecrnl
  2924                              <2> 		
  2925                              <2> 	preol:
  2926 000024F3 30D2                <2> 		xor dl, dl
  2927 000024F5 FEC6                <2> 		inc dh
  2928 000024F7 31DB                <2> 		xor ebx, ebx
  2929 000024F9 88CB                <2> 		mov bl, cl
  2930 000024FB 66C1E302            <2> 		shl bx, 2
  2931 000024FF 031D[7D250000]      <2> 		add ebx, [linebeginpos]
  2932 00002505 891D[7D250000]      <2> 		mov [linebeginpos], ebx
  2933 0000250B E90AFFFFFF          <2> 		jmp doneeol
  2934                              <2> 	prscr:
  2935 00002510 FECE                <2> 		dec dh
  2936 00002512 BF[7C0F0100]        <2> 		mov edi, videobuf
  2937 00002517 31DB                <2> 		xor ebx, ebx
  2938 00002519 88CB                <2> 		mov bl, cl
  2939 0000251B 66C1E302            <2> 		shl bx, 2
  2940 0000251F 01FB                <2> 		add ebx, edi
  2941                              <2> 	intscrollloop:
  2942 00002521 8B03                <2> 		mov eax, [ebx]
  2943 00002523 8907                <2> 		mov [edi], eax
  2944 00002525 81C704000000        <2> 		add edi, 4
  2945 0000252B 81C304000000        <2> 		add ebx, 4
  2946 00002531 FEC9                <2> 		dec cl
  2947 00002533 80F900              <2> 		cmp cl, 0
  2948 00002536 75E9                <2> 		jne intscrollloop
  2949 00002538 8A0D[87250000]      <2> 		mov cl, [charxy]
  2950 0000253E FECD                <2> 		dec ch
  2951 00002540 80FD01              <2> 		cmp ch, 1
  2952 00002543 77DC                <2> 		ja intscrollloop
  2953 00002545 31C0                <2> 		xor eax, eax
  2954 00002547 81EF[7C0F0100]      <2> 		sub edi, videobuf
  2955 0000254D 893D[7D250000]      <2> 		mov [linebeginpos], edi
  2956 00002553 81C7[7C0F0100]      <2> 		add edi, videobuf
  2957 00002559 89FB                <2> 		mov ebx, edi
  2958                              <2> 	intloopclear:
  2959 0000255B 8903                <2> 		mov [ebx], eax
  2960 0000255D 81C304000000        <2> 		add ebx, 4
  2961 00002563 FEC9                <2> 		dec cl
  2962 00002565 80F900              <2> 		cmp cl, 0
  2963 00002568 75F1                <2> 		jne intloopclear
  2964 0000256A FECD                <2> 		dec ch
  2965 0000256C 80FD00              <2> 		cmp ch, 0
  2966 0000256F 75EA                <2> 		jne intloopclear
  2967 00002571 668B0D[87250000]    <2> 		mov cx, [charxy]
  2968 00002578 E9A5FEFFFF          <2> 		jmp donescr
  2969                              <2> 		
  2970 0000257D 00000000            <2> linebeginpos dd 0
  2971 00002581 00000000            <2> videobufpos: dd 0
  2972 00002585 0000                <2> charpos db 0,0
  2973 00002587 501E                <2> charxy db 80,30
  2974 00002589 00000000            <2> charbuf dd 0
  2975                              <2> %endif
  2976                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2977                              <2> openfile:
  2978 0000258D E8C43F0000          <2> 	call loadfile
  2979 00002592 E911DDFFFF          <2> 	jmp timerinterrupt
  2980                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2981                              <2> num2str:
  2982 00002597 3C00                <2> 	cmp al, 0
  2983 00002599 750A                <2> 	jne num2strb
  2984 0000259B E8A50C0000          <2> 	call showdec
  2985 000025A0 E903DDFFFF          <2> 	jmp timerinterrupt
  2986                              <2> num2strb:
  2987 000025A5 E8D10B0000          <2> 	call showhex
  2988 000025AA E9F9DCFFFF          <2> 	jmp timerinterrupt
  2989                              <1> 	%include 'source/interrupts/10_str2num.asm'
  2990                              <2> str2num:
  2991 000025AF 89F7                <2> 	mov edi, esi
  2992 000025B1 E8710D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2993 000025B6 E9EDDCFFFF          <2> 	jmp timerinterrupt
  2994                              <2> 	
  2995                              <1> %ifdef threads.included
  2996                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  2997                              <2> forkthread:
  2998                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  2999                              <2> 			;returns the PID of the new fork in ebx
  3000                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  3001 000025BB FA                  <2> 	cli
  3002 000025BC 60                  <2> 	pushad
  3003 000025BD 8925[8A260000]      <2> 	mov [.espold], esp
  3004 000025C3 C605[F5660000]01    <2> 	mov byte [threadson], 1
  3005 000025CA 8B1D[F6660000]      <2> 	mov ebx, [currentthread]
  3006 000025D0 C1E302              <2> 	shl ebx, 2
  3007 000025D3 89A3[30EA0200]      <2> 	mov [threadlist + ebx], esp
  3008 000025D9 C1EB02              <2> 	shr ebx, 2
  3009 000025DC 81FB00000000        <2> 	cmp ebx, 0
  3010 000025E2 750C                <2> 	jne .simplestack
  3011 000025E4 BB[82ED0000]        <2> 	mov ebx, stackend
  3012 000025E9 29E3                <2> 	sub ebx, esp
  3013 000025EB E90B000000          <2> 	jmp .stackcalcdone
  3014                              <2> .simplestack:
  3015 000025F0 C1E30A              <2> 	shl ebx, 10
  3016 000025F3 81C3[30FE0200]      <2> 	add ebx, stack1
  3017 000025F9 29E3                <2> 	sub ebx, esp
  3018                              <2> .stackcalcdone:
  3019 000025FB 29DC                <2> 	sub esp, ebx
  3020 000025FD 81C4[30FE0200]      <2> 	add esp, stack1
  3021 00002603 8B1D[F1660000]      <2> 	mov ebx, [lastthread]
  3022 00002609 C1E308              <2> 	shl ebx, 8
  3023 0000260C 01DC                <2> 	add esp, ebx
  3024 0000260E 891D[8E260000]      <2> 	mov [.stackend], ebx
  3025                              <2> 
  3026 00002614 89E5                <2> 	mov ebp, esp
  3027 00002616 8B25[8A260000]      <2> 	mov esp, [.espold]
  3028                              <2> 
  3029 0000261C C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3030 0000261F 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3031                              <2> 
  3032 00002623 31DB                <2> 	xor ebx, ebx
  3033                              <2> .stackcopy:
  3034 00002625 668B041C            <2> 	mov ax, [esp + ebx]
  3035 00002629 6689441D00          <2> 	mov [ebp + ebx], ax
  3036 0000262E 81C302000000        <2> 	add ebx, 2
  3037 00002634 3B1D[8E260000]      <2> 	cmp ebx, [.stackend]
  3038 0000263A 72E9                <2> 	jb .stackcopy
  3039                              <2> 
  3040 0000263C 31C0                <2> 	xor eax, eax
  3041 0000263E 668CC8              <2> 	mov ax, cs
  3042 00002641 89C2                <2> 	mov edx, eax
  3043 00002643 8B4C2428            <2> 	mov ecx, [esp + 40]
  3044 00002647 81C900020000        <2> 	or ecx, 0x200
  3045                              <2> 	
  3046 0000264D 81FE00000000        <2> 	cmp esi, 0
  3047 00002653 7504                <2> 	jne .nochangestack
  3048 00002655 8B742420            <2> 	mov esi, [esp + 32]
  3049                              <2> .nochangestack:
  3050 00002659 89F0                <2> 	mov eax, esi
  3051 0000265B 89EC                <2> 	mov esp, ebp
  3052                              <2> 
  3053 0000265D 89442420            <2> 	mov [esp + 32], eax
  3054 00002661 89542424            <2> 	mov [esp + 36], edx
  3055 00002665 894C2428            <2> 	mov [esp + 40], ecx
  3056                              <2> 
  3057 00002669 8B1D[F1660000]      <2> 	mov ebx, [lastthread]
  3058 0000266F 89A3[30EA0200]      <2> 	mov [threadlist + ebx], esp
  3059 00002675 81C304000000        <2> 	add ebx, 4
  3060 0000267B 891D[F1660000]      <2> 	mov [lastthread], ebx
  3061 00002681 8B25[8A260000]      <2> 	mov esp, [.espold]
  3062 00002687 61                  <2> 	popad
  3063 00002688 FB                  <2> 	sti
  3064 00002689 CF                  <2> 	iret
  3065                              <2> 
  3066 0000268A 00000000            <2> .espold dd 0
  3067 0000268E 00000000            <2> .stackend dd 0
  3068                              <1> %endif
  3069                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3070                              <2> gettime:
  3071 00002692 A1[60020000]        <2> 	mov eax, [timeseconds]
  3072 00002697 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  3073 0000269D 89D9                <2> 	mov ecx, ebx
  3074 0000269F C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3075 000026A2 E901DCFFFF          <2> 	jmp timerinterrupt
  3076                              <1> 	%include 'source/interrupts/13_settime.asm'
  3077                              <2> settime:
  3078 000026A7 A3[60020000]        <2> 	mov [timeseconds], eax
  3079 000026AC 891D[64020000]      <2> 	mov [timenanoseconds], ebx
  3080 000026B2 E9F1DBFFFF          <2> 	jmp timerinterrupt
  3081                              <2> 	
  3082                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3083                              <2> runcmd:
  3084 000026B7 BF[66080100]        <2> 	mov edi, buftxt
  3085                              <2> cpcmd:
  3086 000026BC 8A06                <2> 	mov al, [esi]
  3087 000026BE 8807                <2> 	mov [edi], al
  3088 000026C0 46                  <2> 	inc esi
  3089 000026C1 47                  <2> 	inc edi
  3090 000026C2 3C00                <2> 	cmp al, 0
  3091 000026C4 75F6                <2> 	jne cpcmd
  3092 000026C6 E8B3070000          <2> 	call run
  3093 000026CB CF                  <2> 	iret
  3094                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3095                              <2> proginfo:
  3096                              <2> 	;mov ebx, variables
  3097 000026CC 8B35[542F0000]      <2> 	mov esi, [currentcommandloc]
  3098 000026D2 89F7                <2> 	mov edi, esi
  3099 000026D4 31C9                <2> 	xor ecx, ecx
  3100                              <2> getcommandzeroes:
  3101 000026D6 8A07                <2> 	mov al, [edi]
  3102 000026D8 47                  <2> 	inc edi
  3103 000026D9 3C3B                <2> 	cmp al, ';'
  3104 000026DB 740B                <2> 	je nomorezeroes
  3105 000026DD 3C00                <2> 	cmp al, 0
  3106 000026DF 7407                <2> 	je nomorezeroes
  3107 000026E1 3C20                <2> 	cmp al, ' '
  3108 000026E3 75F1                <2> 	jne getcommandzeroes
  3109 000026E5 41                  <2> 	inc ecx
  3110 000026E6 EBEE                <2> 	jmp getcommandzeroes
  3111                              <2> nomorezeroes:
  3112 000026E8 41                  <2> 	inc ecx
  3113 000026E9 4F                  <2> 	dec edi
  3114 000026EA 8B1D[F2F30000]      <2> 	mov ebx, [uid]
  3115 000026F0 8B15[F6660000]      <2> 	mov edx, [currentthread]
  3116 000026F6 CF                  <2> 	iret
  3117                              <2> 	
  3118                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3119                              <2> hooksig: ;hook code in ESI to signal in AL
  3120 000026F7 3C00                <2> 	cmp al, 0
  3121 000026F9 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3122                              <2> ;	xor ebx, ebx
  3123                              <2> ;	mov bl, al
  3124                              <2> ;	shl bl, 2
  3125 000026FB BF[E2ED0000]        <2> 	mov edi, sigtable
  3126 00002700 8937                <2> 	mov [edi], esi
  3127                              <2> .quit:
  3128 00002702 E9A1DBFFFF          <2> 	jmp timerinterrupt
  3129                              <1> %ifdef gui.included
  3130                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3131                              <2> guiint:
  3132 00002707 3CFD                <2> 	cmp al, 253
  3133 00002709 0F8473000000        <2> 	je near .getinfo
  3134 0000270F 803D[9CDB0000]01    <2> 	cmp byte [guion], 1
  3135 00002716 0F8550000000        <2> 	jne near .nogui
  3136 0000271C 3C00                <2> 	cmp al, 0
  3137 0000271E 0F844D000000        <2> 	je near .clear
  3138 00002724 3C01                <2> 	cmp al, 1
  3139 00002726 0F84AB000000        <2> 	je near .putpixel
  3140 0000272C 3C02                <2> 	cmp al, 2
  3141 0000272E 0F84B0000000        <2> 	je near .drawtext
  3142 00002734 3C03                <2> 	cmp al, 3
  3143 00002736 0F84C3000000        <2> 	je near .drawline
  3144 0000273C 3C04                <2> 	cmp al, 4
  3145 0000273E 0F84CE000000        <2> 	je near .drawcircle
  3146 00002744 3C05                <2> 	cmp al, 5
  3147 00002746 0F84D6000000        <2> 	je near .fillcircle
  3148 0000274C 3C06                <2> 	cmp al, 6
  3149 0000274E 0F84DE000000        <2> 	je near .drawsquare
  3150 00002754 3C07                <2> 	cmp al, 7
  3151 00002756 0F84E9000000        <2> 	je near .fillsquare
  3152 0000275C 3CFE                <2> 	cmp al, 254
  3153 0000275E 0F8449000000        <2> 	je near .setinfo
  3154 00002764 3CFF                <2> 	cmp al, 255
  3155 00002766 0F8446000000        <2> 	je near .reset
  3156                              <2> .nogui:
  3157 0000276C E937DBFFFF          <2> 	jmp timerinterrupt
  3158                              <2> 
  3159                              <2> .clear:		;color in bx
  3160 00002771 66891D[DB6D0000]    <2> 	mov [background], bx
  3161                              <2> %ifdef gui.background
  3162                              <2> 	mov ebx, [backgroundimage]
  3163                              <2> 	cmp ebx, 0
  3164                              <2> 	je .clearit
  3165                              <2> 	mov dword [backgroundimage], 0
  3166                              <2> 	mov [.bgi], ebx
  3167                              <2> .clearit:
  3168                              <2> %endif
  3169 00002778 E812460000          <2> 	call guiclear
  3170 0000277D E926DBFFFF          <2> 	jmp timerinterrupt
  3171                              <2> 	
  3172                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3173 00002782 6631DB              <2> 	xor bx, bx
  3174 00002785 6631C9              <2> 	xor cx, cx
  3175 00002788 6631D2              <2> 	xor dx, dx
  3176 0000278B 381D[9CDB0000]      <2> 	cmp [guion], bl
  3177 00002791 74D9                <2> 	je .nogui
  3178 00002793 668B1D[DB6D0000]    <2> 	mov bx, [background]
  3179 0000279A 668B15[07570000]    <2> 	mov dx, [resolutionx]
  3180 000027A1 668B0D[09570000]    <2> 	mov cx, [resolutiony]
  3181 000027A8 E9FBDAFFFF          <2> 	jmp timerinterrupt
  3182                              <2> 	
  3183                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3184 000027AD E9F6DAFFFF          <2> 	jmp timerinterrupt
  3185                              <2> .reset:		;resets the screen to the original settings
  3186 000027B2 66BBCF7B            <2> 	mov bx, background.original
  3187 000027B6 66891D[DB6D0000]    <2> 	mov [background], bx
  3188 000027BD 66BBFFFF            <2> 	mov bx, 0xFFFF
  3189 000027C1 66891D[98740000]    <2> 	mov [colorfont2], bx
  3190                              <2> %ifdef gui.background
  3191                              <2> 	mov ebx, [backgroundimage]
  3192                              <2> 	cmp ebx, 0
  3193                              <2> 	jne .resetit
  3194                              <2> 	mov ebx, [.bgi]
  3195                              <2> 	mov [backgroundimage], ebx
  3196                              <2> .resetit:
  3197                              <2> %endif
  3198 000027C8 E8C2450000          <2> 	call guiclear
  3199 000027CD E80D460000          <2> 	call reloadallgraphics
  3200 000027D2 E9D1DAFFFF          <2> 	jmp timerinterrupt
  3201                              <2> 
  3202                              <2> %ifdef gui.background
  3203                              <2> 	.bgi dd 0
  3204                              <2> %endif
  3205                              <2> 	
  3206                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3207 000027D7 6689DE              <2> 	mov si, bx
  3208 000027DA E80F5C0000          <2> 	call putpixel
  3209 000027DF E9C4DAFFFF          <2> 	jmp timerinterrupt
  3210                              <2> 
  3211                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3212 000027E4 66D1E2              <2> 	shl dx, 1
  3213 000027E7 66891D[98740000]    <2> 	mov [colorfont2], bx
  3214 000027EE 66893D[DB6D0000]    <2> 	mov [background], di
  3215 000027F5 E8364C0000          <2> 	call showstring2
  3216 000027FA E9A9DAFFFF          <2> 	jmp timerinterrupt
  3217                              <2> 
  3218                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3219 000027FF 6689F0              <2> 	mov ax, si
  3220 00002802 6689DE              <2> 	mov si, bx
  3221 00002805 6689FB              <2> 	mov bx, di
  3222 00002808 E856440000          <2> 	call drawline
  3223 0000280D E996DAFFFF          <2> 	jmp timerinterrupt
  3224                              <2> 
  3225                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3226 00002812 6689F0              <2> 	mov ax, si
  3227 00002815 6689DE              <2> 	mov si, bx
  3228 00002818 E8CF3F0000          <2> 	call drawcircle
  3229 0000281D E986DAFFFF          <2> 	jmp timerinterrupt
  3230                              <2> 
  3231                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3232 00002822 6689F0              <2> 	mov ax, si
  3233 00002825 6689DE              <2> 	mov si, bx
  3234 00002828 E8D1400000          <2> 	call fillcircle
  3235 0000282D E976DAFFFF          <2> 	jmp timerinterrupt
  3236                              <2> 	
  3237                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3238 00002832 6689F0              <2> 	mov ax, si
  3239 00002835 6689DE              <2> 	mov si, bx
  3240 00002838 6689FB              <2> 	mov bx, di
  3241 0000283B E86F460000          <2> 	call drawsquare
  3242 00002840 E963DAFFFF          <2> 	jmp timerinterrupt
  3243                              <2> 
  3244                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3245 00002845 6689F0              <2> 	mov ax, si
  3246 00002848 6689DE              <2> 	mov si, bx
  3247 0000284B 6689FB              <2> 	mov bx, di
  3248 0000284E E8D1460000          <2> 	call fillsquare
  3249 00002853 E950DAFFFF          <2> 	jmp timerinterrupt
  3250                              <1> %endif
  3251                              <1> %ifdef sound.included
  3252                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3253                              <1> %endif
  3254                              <1> %ifdef network.included
  3255                              <1> 	%include 'source/interrupts/19_netint.asm'
  3256                              <2> netint:
  3257 00002858 E94BDAFFFF          <2> 	jmp timerinterrupt
  3258                              <1> %endif
  3259                              <1> 
  3260                              <1> termcopy:
  3261                              <1> %ifdef io.serial
  3262                              <1> 	ret
  3263                              <1> %else
  3264                              <1> %ifdef terminal.vsync
  3265                              <1> 	mov byte [termcopyneeded], 1
  3266                              <1> 	ret
  3267                              <1> %else
  3268 0000285D E80A000000          <1> 	call newtermcopy
  3269 00002862 C3                  <1> 	ret
  3270                              <1> %endif
  3271 00002863 00                  <1> 	termcopyneeded db 0
  3272 00002864 00000000            <1> 	termcursorpos dd 0
  3273 00002868 00000000            <1> 	removedvideo dd 0
  3274                              <1> newtermcopy:
  3275 0000286C 60                  <1> 	pusha
  3276 0000286D BF[7C0F0100]        <1> 	mov edi, videobuf
  3277 00002872 31DB                <1> 	xor ebx, ebx
  3278 00002874 881D[63280000]      <1> 	mov [termcopyneeded], bl
  3279 0000287A 8B1D[81250000]      <1> 	mov ebx, [videobufpos]
  3280 00002880 01DF                <1> 	add edi, ebx
  3281 00002882 893D[64280000]      <1> 	mov [termcursorpos], edi
  3282 00002888 E8E2000000          <1> 	call switchtermcursor
  3283 0000288D 803D[9CDB0000]00    <1> 	cmp byte [guion], 0
  3284 00002894 0F8420000000        <1> 	je near nowincopy
  3285                              <1> %ifdef gui.included
  3286 0000289A C605[FF7B0000]00    <1> 	mov byte [mouseselecton], 0
  3287 000028A1 C605[93230000]01    <1> 	mov byte [termcopyon], 1
  3288 000028A8 803D[92230000]01    <1> 	cmp byte [termguion], 1
  3289 000028AF 0F84D4500000        <1> 	je near windowvideocopy
  3290                              <1> %endif
  3291 000028B5 E9AE000000          <1> 	jmp nocopytermatall
  3292                              <1> nowincopy:
  3293 000028BA BE00000A00          <1> 	mov esi, 0xA0000
  3294 000028BF A1[41020000]        <1> 	mov eax, [basecache]
  3295 000028C4 C1E004              <1> 	shl eax, 4
  3296 000028C7 29C6                <1> 	sub esi, eax
  3297 000028C9 BF[7C0F0100]        <1> 	mov edi, videobuf
  3298 000028CE 31C9                <1> 	xor ecx, ecx
  3299 000028D0 668B0D[87250000]    <1> 	mov cx, [charxy]
  3300                              <1> nowincopy2:
  3301 000028D7 8B07                <1> 	mov eax, [edi]
  3302 000028D9 81C748D50000        <1> 	add edi, (videobuf2 - videobuf)
  3303 000028DF 8B1F                <1> 	mov ebx, [edi]
  3304 000028E1 8907                <1> 	mov [edi], eax
  3305 000028E3 81EF48D50000        <1> 	sub edi, (videobuf2 - videobuf)
  3306 000028E9 81C702000000        <1> 	add edi, 2
  3307 000028EF 39D8                <1> 	cmp eax, ebx
  3308 000028F1 744B                <1> 	je nopresentwinfont
  3309 000028F3 81EF02000000        <1> 	sub edi, 2
  3310 000028F9 BD[9C890000]        <1> 	mov ebp, fonts
  3311 000028FE 31C0                <1> 	xor eax, eax
  3312 00002900 668B07              <1> 	mov ax, [edi]
  3313 00002903 C1E004              <1> 	shl eax, 4
  3314 00002906 01C5                <1> 	add ebp, eax
  3315 00002908 81C702000000        <1> 	add edi, 2
  3316 0000290E 668B1F              <1> 	mov bx, [edi]
  3317 00002911 31D2                <1> 	xor edx, edx
  3318 00002913 8A15[87250000]      <1> 	mov dl, [charxy]
  3319 00002919 C1C110              <1> 	rol ecx, 16
  3320 0000291C B110                <1> 	mov cl, 16
  3321                              <1> nowinfont:
  3322 0000291E 8A4500              <1> 	mov al, [ebp]
  3323 00002921 D0C8                <1> 	ror al, 1
  3324 00002923 80FB80              <1> 	cmp bl, 0x80
  3325 00002926 7202                <1> 	jb notnotfont
  3326 00002928 F6D0                <1> 	not al
  3327                              <1> notnotfont:
  3328 0000292A 8806                <1> 	mov [esi], al
  3329 0000292C 01D6                <1> 	add esi, edx
  3330 0000292E 45                  <1> 	inc ebp
  3331 0000292F FEC9                <1> 	dec cl
  3332 00002931 80F900              <1> 	cmp cl, 0
  3333 00002934 75E8                <1> 	jne nowinfont
  3334 00002936 C1E204              <1> 	shl edx, 4
  3335 00002939 29D6                <1> 	sub esi, edx
  3336 0000293B C1C110              <1> 	rol ecx, 16
  3337                              <1> nopresentwinfont:
  3338 0000293E 81C702000000        <1> 	add edi, 2
  3339 00002944 46                  <1> 	inc esi
  3340 00002945 FEC9                <1> 	dec cl
  3341 00002947 80F900              <1> 	cmp cl, 0
  3342 0000294A 758B                <1> 	jne nowincopy2
  3343 0000294C 8A0D[87250000]      <1> 	mov cl, [charxy]
  3344 00002952 31D2                <1> 	xor edx, edx
  3345 00002954 88CA                <1> 	mov dl, cl
  3346 00002956 29D6                <1> 	sub esi, edx
  3347 00002958 C1E204              <1> 	shl edx, 4
  3348 0000295B 01D6                <1> 	add esi, edx
  3349 0000295D FECD                <1> 	dec ch
  3350 0000295F 80FD00              <1> 	cmp ch, 0
  3351 00002962 0F856FFFFFFF        <1> 	jne nowincopy2
  3352                              <1> nocopytermatall:
  3353 00002968 E802000000          <1> 	call switchtermcursor
  3354 0000296D 61                  <1> 	popa
  3355 0000296E C3                  <1> 	ret
  3356                              <1> 	
  3357                              <1> switchtermcursor:
  3358 0000296F 8B3D[64280000]      <1> 	mov edi, [termcursorpos]
  3359 00002975 668B4702            <1> 	mov ax, [edi + 2]
  3360 00002979 668B1F              <1> 	mov bx, [edi]
  3361 0000297C 663D8000            <1> 	cmp ax, 0x80
  3362 00002980 7209                <1> 	jb movlargecursorterm
  3363 00002982 66B80700            <1> 	mov ax, 7
  3364 00002986 E904000000          <1> 	jmp movedcursorterm
  3365                              <1> movlargecursorterm:
  3366 0000298B 66B8F000            <1> 	mov ax, 0xF0
  3367                              <1> movedcursorterm:
  3368 0000298F 66894702            <1> 	mov [edi + 2], ax
  3369 00002993 6681FB0000          <1> 	cmp bx, 0
  3370 00002998 7507                <1> 	jne fixednocursorterm
  3371 0000299A 66BB2000            <1> 	mov bx, ' '
  3372 0000299E 66891F              <1> 	mov [edi], bx
  3373                              <1> fixednocursorterm:
  3374 000029A1 C3                  <1> 	ret
  3375                              <1> %endif
  3376                                      %include "source/dosints.asm"
  3377                              <1> int20h:
  3378 000029A2 66B8004C            <1> mov ax, 0x4C00
  3379                              <1> int21h:
  3380                              <1> dostosolleros:
  3381 000029A6 6650                <1> 	push ax
  3382 000029A8 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3383 000029AC 8ED8                <1> 	mov ds, ax
  3384 000029AE 8EC0                <1> 	mov es, ax
  3385 000029B0 8EE0                <1> 	mov fs, ax
  3386 000029B2 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3387 000029B6 8EE8                <1> 	mov gs, ax
  3388 000029B8 6658                <1> 	pop ax
  3389 000029BA 9C                  <1> 	pushf
  3390 000029BB 60                  <1> 	pusha
  3391 000029BC 80FC01              <1> 	cmp ah, 1
  3392 000029BF 0F8449000000        <1> 	je near dosgchar
  3393 000029C5 80FC02              <1> 	cmp ah, 2
  3394 000029C8 0F8447000000        <1> 	je near doswchar
  3395 000029CE 80FC09              <1> 	cmp ah, 9
  3396 000029D1 0F8449000000        <1> 	je near dosprintstr
  3397 000029D7 80FC0A              <1> 	cmp ah, 0xA
  3398 000029DA 0F8456000000        <1> 	je near dosgetstr
  3399 000029E0 80FC2B              <1> 	cmp ah, 0x2B
  3400 000029E3 0F8492000000        <1> 	je near dosgetdate
  3401 000029E9 80FC2C              <1> 	cmp ah, 0x2C
  3402 000029EC 0F84AC000000        <1> 	je near dosgettime
  3403 000029F2 80FC4C              <1> 	cmp ah, 0x4C
  3404 000029F5 0F84C1000000        <1> 	je near dosexit
  3405                              <1> backtodos:
  3406 000029FB 61                  <1> 	popa
  3407 000029FC 9D                  <1> 	popf
  3408 000029FD 6650                <1> 	push ax
  3409 000029FF 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3410 00002A03 8ED8                <1> 	mov ds, ax
  3411 00002A05 8EC0                <1> 	mov es, ax
  3412 00002A07 8EE0                <1> 	mov fs, ax
  3413 00002A09 8EE8                <1> 	mov gs, ax
  3414 00002A0B 6658                <1> 	pop ax
  3415 00002A0D CF                  <1> 	iret
  3416                              <1> 
  3417                              <1> dosgchar:
  3418 00002A0E E8F2F8FFFF          <1> 	call getchar
  3419 00002A13 EBE6                <1> 	jmp backtodos
  3420                              <1> 	
  3421                              <1> doswchar:
  3422 00002A15 88D0                <1> 	mov al, dl
  3423 00002A17 B307                <1> 	mov bl, 7
  3424 00002A19 E863F9FFFF          <1> 	call prcharint
  3425 00002A1E EBDB                <1> 	jmp backtodos
  3426                              <1> 	
  3427                              <1> dosprintstr:
  3428 00002A20 31F6                <1> 	xor esi, esi
  3429 00002A22 6689D6              <1> 	mov si, dx
  3430 00002A25 81C600004000        <1> 	add esi, dosprogloc
  3431 00002A2B B024                <1> 	mov al, "$"
  3432 00002A2D B307                <1> 	mov bl, 7
  3433 00002A2F E8FEF2FFFF          <1> 	call printint
  3434 00002A34 EBC5                <1> 	jmp backtodos
  3435                              <1> 	
  3436                              <1> dosgetstr:
  3437 00002A36 31F6                <1> 	xor esi, esi
  3438 00002A38 6689D6              <1> 	mov si, dx
  3439 00002A3B 81C600004000        <1> 	add esi, dosprogloc
  3440 00002A41 B900000000          <1> 	mov ecx, 0
  3441 00002A46 8A0E                <1> 	mov cl, [esi]
  3442 00002A48 81C602000000        <1> 	add esi, 2
  3443 00002A4E 89F7                <1> 	mov edi, esi
  3444 00002A50 8935[772A0000]      <1> 	mov [stringstart], esi
  3445 00002A56 01CF                <1> 	add edi, ecx
  3446 00002A58 B00A                <1> 	mov al, 10
  3447 00002A5A B307                <1> 	mov bl, 7
  3448 00002A5C E80BF4FFFF          <1> 	call rdprintdos
  3449 00002A61 89F1                <1> 	mov ecx, esi
  3450 00002A63 2B0D[772A0000]      <1> 	sub ecx, [stringstart]
  3451 00002A69 8B35[772A0000]      <1> 	mov esi, [stringstart]
  3452 00002A6F 884EFF              <1> 	mov [esi - 1], cl
  3453 00002A72 884EFE              <1> 	mov [esi - 2], cl
  3454 00002A75 EB84                <1> 	jmp backtodos
  3455 00002A77 00000000            <1> stringstart dd 0
  3456                              <1> 
  3457                              <1> dosgetdate:
  3458 00002A7B E88D250000          <1> 	call time
  3459 00002A80 8A0D[D5510000]      <1> 	mov cl, [RTCtimeYear]
  3460 00002A86 B500                <1> 	mov ch, 0
  3461 00002A88 6681C1D007          <1> 	add cx, 2000
  3462 00002A8D 8A35[D4510000]      <1> 	mov dh, [RTCtimeMonth]
  3463 00002A93 8A15[D3510000]      <1> 	mov dl, [RTCtimeDay]
  3464 00002A99 E95DFFFFFF          <1> 	jmp backtodos
  3465                              <1> 
  3466                              <1> dosgettime:
  3467 00002A9E E86A250000          <1> 	call time
  3468 00002AA3 8A2D[D2510000]      <1> 	mov ch, [RTCtimeHour]
  3469 00002AA9 8A0D[D1510000]      <1> 	mov cl, [RTCtimeMinute]
  3470 00002AAF 8A35[D0510000]      <1> 	mov dh, [RTCtimeSecond]
  3471 00002AB5 B200                <1> 	mov dl, 0
  3472 00002AB7 E93FFFFFFF          <1> 	jmp backtodos
  3473                              <1> 	
  3474                              <1> dosexit:
  3475 00002ABC BE[77890000]        <1> 	mov esi, line
  3476 00002AC1 E865F2FFFF          <1> 	call print
  3477 00002AC6 61                  <1> 	popa
  3478 00002AC7 9D                  <1> 	popf
  3479 00002AC8 8B25[E6F10000]      <1> 	mov esp, [previousstack]
  3480 00002ACE 31DB                <1> 	xor ebx, ebx
  3481 00002AD0 88C3                <1> 	mov bl, al
  3482 00002AD2 80FB00              <1> 	cmp bl, 0
  3483 00002AD5 0F85DBF1FFFF        <1> 	jne near exitprog.error
  3484 00002ADB C3                  <1> 	ret
  3485                                      %include "source/solleros.asm"
  3486                              <1> 	;SOLLEROS.ASM
  3487                              <1> os:
  3488                              <1> setdefenv:
  3489 00002ADC B02F                <1> 	mov al, '/'
  3490 00002ADE A2[F2F10000]        <1> 	mov [currentfolder], al
  3491 00002AE3 B801000000          <1> 	mov eax, 1
  3492 00002AE8 A3[EEF10000]        <1> 	mov [currentfolderloc], eax
  3493 00002AED E8E2F2FFFF          <1> 	call clear
  3494                              <1> 	
  3495                              <1> bootfilecheck:
  3496 00002AF2 803D[F6F30000]01    <1> 	cmp byte [ranboot], 1
  3497 00002AF9 0F8421000000        <1> 	je near nobootfile
  3498                              <1> 	%ifdef hardware.automatic
  3499 00002AFF E825360000          <1> 		call initializelater ;Initialize components that have debug messages
  3500                              <1> 	%endif
  3501 00002B04 BF[36890000]        <1> 	mov edi, bootfilename
  3502 00002B09 BE00004000          <1> 	mov esi, 0x400000
  3503 00002B0E E8433A0000          <1> 	call loadfile
  3504 00002B13 81FA00000000        <1> 	cmp edx, 0
  3505 00002B19 7505                <1> 	jne nobootfile
  3506 00002B1B E8B20D0000          <1> 	call progbatchfound
  3507                              <1> nobootfile:	
  3508 00002B20 C605[F6F30000]01    <1> 	mov byte [ranboot], 1
  3509                              <1> 
  3510 00002B27 BE[03000000]        <1> 	mov esi, signature
  3511                              <1> .sigcopyloop:	;this prevents an odd error
  3512 00002B2C 658A06              <1> 	mov al, [gs:esi]
  3513 00002B2F 8806                <1> 	mov [esi], al
  3514 00002B31 46                  <1> 	inc esi
  3515 00002B32 81FE[1D000000]      <1> 	cmp esi, signatureend
  3516 00002B38 72F2                <1> 	jb .sigcopyloop
  3517                              <1> 	
  3518 00002B3A BE[03000000]        <1> 	mov esi, signature
  3519 00002B3F E8E7F1FFFF          <1> 	call print
  3520 00002B44 8B0D[19000000]      <1> 	mov ecx, [signatureend - 4]
  3521 00002B4A E8F6060000          <1> 	call showdec
  3522 00002B4F BE[77890000]        <1> 	mov esi, line
  3523 00002B54 E8D2F1FFFF          <1> 	call print
  3524 00002B59 BE[53890000]        <1> 	mov esi, userask
  3525 00002B5E E8C8F1FFFF          <1> 	call print
  3526                              <1> usercheck:
  3527 00002B63 BE[66080100]        <1> 	mov esi, buftxt
  3528 00002B68 BF[660C0100]        <1> 	mov edi, buftxtend
  3529 00002B6D B00A                <1> 	mov al, 10
  3530 00002B6F E8E4F2FFFF          <1> 	call rdprint
  3531 00002B74 56                  <1> 	push esi
  3532 00002B75 BE[5D890000]        <1> 	mov esi, pwdask
  3533 00002B7A E8ACF1FFFF          <1> 	call print
  3534 00002B7F 5E                  <1> 	pop esi
  3535 00002B80 46                  <1> 	inc esi
  3536 00002B81 8935[762C0000]      <1> 	mov [esipass], esi
  3537                              <1> passcheck:
  3538 00002B87 E879F7FFFF          <1> 	call getchar
  3539 00002B8C 3C0A                <1> 	cmp al, 10
  3540 00002B8E 0F8438000000        <1> 	je near gotpass
  3541 00002B94 3C08                <1> 	cmp al, 8
  3542 00002B96 0F8412000000        <1> 	je near backpass
  3543 00002B9C 8806                <1> 	mov [esi], al
  3544 00002B9E 46                  <1> 	inc esi
  3545 00002B9F 30E4                <1> 	xor ah, ah
  3546 00002BA1 B02A                <1> 	mov al, "*"
  3547 00002BA3 E8D9F7FFFF          <1> 	call prcharint
  3548 00002BA8 EBDD                <1> 	jmp passcheck
  3549 00002BAA 08200800            <1> backcursor2 db 8," ",8,0
  3550                              <1> backpass:
  3551 00002BAE 3B35[762C0000]      <1> 	cmp esi, [esipass]
  3552 00002BB4 0F84CDFFFFFF        <1> 	je near passcheck
  3553 00002BBA 4E                  <1> 	dec esi
  3554 00002BBB C60600              <1> 	mov byte [esi], 0
  3555 00002BBE 56                  <1> 	push esi
  3556 00002BBF BE[AA2B0000]        <1> 	mov esi, backcursor2
  3557 00002BC4 E862F1FFFF          <1> 	call print
  3558 00002BC9 5E                  <1> 	pop esi
  3559 00002BCA EBBB                <1> 	jmp passcheck
  3560                              <1> gotpass:
  3561 00002BCC B00A                <1> 	mov al, 10
  3562 00002BCE E8AEF7FFFF          <1> 	call prcharint
  3563 00002BD3 30C0                <1> 	xor al, al
  3564 00002BD5 31C9                <1> 	xor ecx, ecx
  3565 00002BD7 8806                <1> 	mov [esi], al
  3566 00002BD9 BB[79890000]        <1> 	mov ebx, userlst
  3567                              <1> userfind:
  3568 00002BDE BE[66080100]        <1> 	mov esi, buftxt
  3569 00002BE3 8A06                <1> 	mov al, [esi]
  3570 00002BE5 3C00                <1> 	cmp al, 0
  3571 00002BE7 0F84EFFEFFFF        <1> 	je near os
  3572 00002BED 891D[7A2C0000]      <1> 	mov [usercache], ebx
  3573 00002BF3 E860030000          <1> 	call tester
  3574 00002BF8 3C01                <1> 	cmp al, 1
  3575 00002BFA 7416                <1> 	je pwdtest
  3576 00002BFC 41                  <1> 	inc ecx
  3577                              <1> nxtuser:
  3578 00002BFD 8A03                <1> 	mov al, [ebx]
  3579 00002BFF 43                  <1> 	inc ebx
  3580 00002C00 3C00                <1> 	cmp al, 0
  3581 00002C02 75F9                <1> 	jne nxtuser
  3582 00002C04 81FB[9C890000]      <1> 	cmp ebx, userlstend
  3583 00002C0A 0F83CCFEFFFF        <1> 	jae near os
  3584 00002C10 EBCC                <1> 	jmp userfind
  3585                              <1> pwdtest:
  3586 00002C12 46                  <1> 	inc esi
  3587 00002C13 43                  <1> 	inc ebx
  3588 00002C14 E83F030000          <1> 	call tester
  3589 00002C19 3C01                <1> 	cmp al, 1
  3590 00002C1B 7402                <1> 	je pwdrgt
  3591 00002C1D EBDE                <1> 	jmp nxtuser
  3592                              <1> pwdrgt:
  3593 00002C1F D1E9                <1> 	shr ecx, 1
  3594 00002C21 890D[F2F30000]      <1> 	mov [uid], ecx
  3595 00002C27 E8A8F1FFFF          <1> 	call clear
  3596 00002C2C 31C9                <1> 	xor ecx, ecx
  3597 00002C2E 41                  <1> 	inc ecx
  3598 00002C2F 890D[10BA0200]      <1> 	mov [commandbufpos], ecx
  3599                              <1> returnfromexp:
  3600 00002C35 66B90002            <1> 	mov cx, 200h
  3601 00002C39 BE[66080100]        <1> 	mov esi, buftxt
  3602 00002C3E 8935[542F0000]      <1> 	mov [currentcommandloc], esi
  3603 00002C44 E825000000          <1> 	call bufclr
  3604                              <1> clearolddata:
  3605 00002C49 31C0                <1> 	xor eax, eax
  3606 00002C4B A2[F7F30000]        <1> 	mov [IFON], al
  3607 00002C50 A2[F8F30000]        <1> 	mov [IFTRUE], al
  3608 00002C55 A2[60F40000]        <1> 	mov [BATCHISON], al
  3609 00002C5A A3[5CF40000]        <1> 	mov [BATCHPOS], eax
  3610 00002C5F A2[61F40000]        <1> 	mov [LOOPON], al
  3611 00002C64 A3[62F40000]        <1> 	mov [LOOPPOS], eax
  3612 00002C69 E933000000          <1> 	jmp nwcmd
  3613                              <1> bufclr:	
  3614 00002C6E 30C0                <1> 	xor al, al
  3615 00002C70 8806                <1> 	mov [esi], al
  3616 00002C72 46                  <1> 	inc esi
  3617 00002C73 E2F9                <1> 	loop bufclr
  3618 00002C75 C3                  <1> 	ret
  3619                              <1> 
  3620 00002C76 00000000            <1> esipass dd 0
  3621 00002C7A [79890000]          <1> usercache dd userlst
  3622                              <1> 	
  3623                              <1> buftxtclear:
  3624 00002C7E 30C0                <1> 	xor al, al
  3625 00002C80 BE[66080100]        <1> 	mov esi, buftxt
  3626 00002C85 81FE[660C0100]      <1> clearbuftxt: cmp esi, buf2
  3627 00002C8B 730E                <1> 	jae retbufclr
  3628 00002C8D 8806                <1> 	mov [esi], al
  3629 00002C8F 46                  <1> 	inc esi
  3630 00002C90 EBF3                <1> 	jmp clearbuftxt
  3631                              <1> 
  3632 00002C92 39DE                <1> clearitbuf: cmp esi, ebx
  3633 00002C94 7305                <1> 	jae retbufclr
  3634 00002C96 8806                <1> 	mov [esi], al
  3635 00002C98 46                  <1> 	inc esi
  3636 00002C99 EBF7                <1> 	jmp clearitbuf
  3637 00002C9B C3                  <1> retbufclr: ret
  3638                              <1> 
  3639 00002C9C E900000000          <1> full:	jmp nwcmd
  3640                              <1> 
  3641                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3642                              <1> nwcmd:
  3643 00002CA1 FB                  <1> 	sti
  3644 00002CA2 31C0                <1> 	xor eax, eax
  3645 00002CA4 3905[762E0000]      <1> 	cmp [nextcommandloc], eax
  3646 00002CAA 7413                <1> 	je nomultiplecommand
  3647 00002CAC 8B35[762E0000]      <1> 	mov esi, [nextcommandloc]
  3648 00002CB2 8935[7A2E0000]      <1> 	mov [thiscommandloc], esi
  3649 00002CB8 E8C6010000          <1> 	call fixvariables
  3650 00002CBD EBE2                <1> 	jmp nwcmd
  3651                              <1> nomultiplecommand:
  3652 00002CBF A3[7A2E0000]        <1> 	mov [thiscommandloc], eax
  3653 00002CC4 3805[F5660000]      <1> 	cmp [threadson], al
  3654 00002CCA 7405                <1> 	je noclinwcmd
  3655 00002CCC A2[F5660000]        <1> 	mov [threadson], al
  3656                              <1> noclinwcmd:
  3657 00002CD1 B001                <1> 	mov al, 1
  3658 00002CD3 3805[60F40000]      <1> 	cmp [BATCHISON], al
  3659 00002CD9 7501                <1> 	jne cancel
  3660 00002CDB C3                  <1> 	ret
  3661 00002CDC 30C0                <1> cancel:	xor al, al
  3662 00002CDE A2[F7F30000]        <1> 	mov [IFON], al
  3663 00002CE3 A2[60F40000]        <1> 	mov [BATCHISON], al
  3664 00002CE8 B05B                <1> 	mov al, '['
  3665 00002CEA 66BB0700            <1> 	mov bx, 7
  3666 00002CEE E8A1F6FFFF          <1> 	call prcharq
  3667 00002CF3 8B35[7A2C0000]      <1> 	mov esi, [usercache]
  3668 00002CF9 E80EF0FFFF          <1> 	call printquiet
  3669 00002CFE BE[67890000]        <1> 	mov esi, computer
  3670 00002D03 E804F0FFFF          <1> 	call printquiet
  3671 00002D08 BE[F2F10000]        <1> 	mov esi, currentfolder
  3672 00002D0D 0335[EAF10000]      <1> 	add esi, [lastfolderloc]
  3673 00002D13 E8F4EFFFFF          <1> 	call printquiet
  3674 00002D18 BE[72890000]        <1> 	mov esi, endprompt
  3675 00002D1D E809F0FFFF          <1> 	call print
  3676 00002D22 E857FFFFFF          <1> 	call buftxtclear
  3677 00002D27 BE[66080100]        <1> 	mov esi, buftxt
  3678 00002D2C C605[EE220000]01    <1> 	mov byte [commandedit], 1
  3679 00002D33 B00A                <1> 	mov al, 10
  3680 00002D35 66BB0700            <1> 	mov bx, 7
  3681 00002D39 BF[660C0100]        <1> 	mov edi, buftxtend
  3682 00002D3E E815F1FFFF          <1> 	call rdprint
  3683 00002D43 C605[EE220000]00    <1> 	mov byte [commandedit], 0
  3684 00002D4A 803D[66080100]00    <1> 	cmp byte [buftxt], 0
  3685 00002D51 0F844AFFFFFF        <1> 	je near nwcmd
  3686 00002D57 8B35[10BA0200]      <1> gotcmd:	mov esi, [commandbufpos]
  3687 00002D5D 8935[0CBA0200]      <1> 	mov [lastcommandpos], esi
  3688 00002D63 FF05[18BA0200]      <1> 	inc dword [commandsentered]
  3689 00002D69 BF[66080100]        <1> 	mov edi, buftxt
  3690 00002D6E 81C6[1CBA0200]      <1> 	add esi, commandbuf
  3691 00002D74 81FE[1CCA0200]      <1> 	cmp esi, commandbufend
  3692 00002D7A 7605                <1> 	jbe copycommand
  3693 00002D7C BE[1CBA0200]        <1> 	mov esi, commandbuf
  3694                              <1> copycommand:
  3695 00002D81 8A07                <1> 	mov al, [edi]
  3696 00002D83 8806                <1> 	mov [esi], al
  3697 00002D85 47                  <1> 	inc edi
  3698 00002D86 46                  <1> 	inc esi
  3699 00002D87 3C00                <1> 	cmp al, 0
  3700 00002D89 740F                <1> 	je donecopy
  3701 00002D8B 81FE[1CCA0200]      <1> 	cmp esi, commandbufend
  3702 00002D91 76EE                <1> 	jbe copycommand
  3703 00002D93 BE[1CBA0200]        <1> 	mov esi, commandbuf
  3704 00002D98 EBE7                <1> 	jmp copycommand
  3705                              <1> donecopy:
  3706 00002D9A 81EE[1CBA0200]      <1> 	sub esi, commandbuf
  3707 00002DA0 8935[10BA0200]      <1> 	mov [commandbufpos], esi
  3708 00002DA6 E8D3000000          <1> 	call run
  3709 00002DAB E9F1FEFFFF          <1> 	jmp nwcmd
  3710                              <1> 
  3711 00002DB0 E8C9FEFFFF          <1> input:	call buftxtclear
  3712 00002DB5 BE[66080100]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3713 00002DBA BF[660C0100]        <1> 	mov edi, buftxtend
  3714 00002DBF B00A                <1> stdin:	mov al, 10
  3715 00002DC1 B307                <1> 	mov bl, 7
  3716 00002DC3 E890F0FFFF          <1> 	call rdprint
  3717 00002DC8 C3                  <1> 	ret
  3718                              <1> 
  3719                              <1> replacevariable:
  3720 00002DC9 8A4601              <1> 	mov al, [esi + 1]
  3721 00002DCC C64601FF            <1> 	mov byte [esi + 1], 255
  3722 00002DD0 3C24                <1> 	cmp al, "$"
  3723 00002DD2 0F84AB000000        <1> 	je near fixvariables
  3724 00002DD8 884601              <1> 	mov [esi + 1], al
  3725 00002DDB 56                  <1> 	push esi
  3726 00002DDC 81EE[66080100]      <1> 	sub esi, buftxt
  3727 00002DE2 89F7                <1> 	mov edi, esi
  3728 00002DE4 81C6[66080100]      <1> 	add esi, buftxt
  3729 00002DEA 47                  <1> 	inc edi
  3730 00002DEB BB[66F40000]        <1> 	mov ebx, variables
  3731 00002DF0 E834150000          <1> 	call nxtvrech
  3732 00002DF5 89F7                <1> 	mov edi, esi
  3733 00002DF7 31DB                <1> 	xor ebx, ebx
  3734 00002DF9 4E                  <1> 	dec esi
  3735                              <1> findvarname:
  3736 00002DFA 4E                  <1> 	dec esi
  3737 00002DFB 8A06                <1> 	mov al, [esi]
  3738 00002DFD 43                  <1> 	inc ebx
  3739 00002DFE 3C04                <1> 	cmp al, 4
  3740 00002E00 75F8                <1> 	jne findvarname
  3741 00002E02 5E                  <1> 	pop esi
  3742                              <1> replacevarloop:
  3743 00002E03 8A07                <1> 	mov al, [edi]
  3744 00002E05 3C00                <1> 	cmp al, 0
  3745 00002E07 0F8413000000        <1> 	je near compressbuftxt
  3746 00002E0D 81FB00000000        <1> 	cmp ebx, 0
  3747 00002E13 0F8416000000        <1> 	je near expandbuftxt
  3748 00002E19 8806                <1> 	mov [esi], al
  3749 00002E1B 4B                  <1> 	dec ebx
  3750 00002E1C 46                  <1> 	inc esi
  3751 00002E1D 47                  <1> 	inc edi
  3752 00002E1E EBE3                <1> 	jmp replacevarloop
  3753                              <1> compressbuftxt:
  3754 00002E20 8A041E              <1> 	mov al, [esi + ebx]
  3755 00002E23 8806                <1> 	mov [esi], al
  3756 00002E25 46                  <1> 	inc esi
  3757 00002E26 3C00                <1> 	cmp al, 0
  3758 00002E28 75F6                <1> 	jne compressbuftxt
  3759 00002E2A E954000000          <1> 	jmp fixvariables
  3760                              <1> expandbuftxt:
  3761 00002E2F 89F1                <1> 	mov ecx, esi
  3762 00002E31 8A26                <1> 	mov ah, [esi]
  3763                              <1> expandbuftxtlp:
  3764 00002E33 8A1E                <1> 	mov bl, [esi]
  3765 00002E35 46                  <1> 	inc esi
  3766 00002E36 8A3E                <1> 	mov bh, [esi]
  3767 00002E38 8826                <1> 	mov [esi], ah
  3768 00002E3A 88FC                <1> 	mov ah, bh
  3769 00002E3C 80FB00              <1> 	cmp bl, 0
  3770 00002E3F 75F2                <1> 	jne expandbuftxtlp
  3771 00002E41 89CE                <1> 	mov esi, ecx
  3772 00002E43 8806                <1> 	mov [esi], al
  3773 00002E45 47                  <1> 	inc edi
  3774 00002E46 8A07                <1> 	mov al, [edi]
  3775 00002E48 3C00                <1> 	cmp al, 0
  3776 00002E4A 0F8433000000        <1> 	je near fixvariables
  3777 00002E50 46                  <1> 	inc esi
  3778 00002E51 EBDC                <1> 	jmp expandbuftxt
  3779                              <1> multipleprogline:
  3780 00002E53 30E4                <1> 	xor ah, ah
  3781 00002E55 8826                <1> 	mov [esi], ah
  3782 00002E57 46                  <1> 	inc esi
  3783 00002E58 8935[762E0000]      <1> 	mov [nextcommandloc], esi
  3784 00002E5E E93E000000          <1> 	jmp donefixvariables
  3785                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3786 00002E63 46                  <1> 	inc esi
  3787 00002E64 8A06                <1> 	mov al, [esi]
  3788 00002E66 C606FF              <1> 	mov byte [esi], 255
  3789 00002E69 3C23                <1> 	cmp al, '#'
  3790 00002E6B 7416                <1> 	je fixvariables
  3791 00002E6D 4E                  <1> 	dec esi
  3792 00002E6E C60600              <1> 	mov byte [esi], 0
  3793 00002E71 E90D000000          <1> 	jmp fixvariables
  3794                              <1> 	
  3795 00002E76 00000000            <1> nextcommandloc dd 0
  3796 00002E7A 00000000            <1> thiscommandloc dd 0	
  3797                              <1> run:
  3798 00002E7E BE[66080100]        <1> 	mov esi, buftxt
  3799 00002E83 46                  <1> fixvariables:	inc esi
  3800 00002E84 8A06                <1> 	mov al, [esi]
  3801 00002E86 3C23                <1> 	cmp al, '#'	;inline comment
  3802 00002E88 74D9                <1> 	je inlinecomment
  3803 00002E8A 3C24                <1> 	cmp al, '$' ;variable
  3804 00002E8C 0F8437FFFFFF        <1> 	je near replacevariable
  3805 00002E92 3C3B                <1> 	cmp al, ';' ;program list
  3806 00002E94 74BD                <1> 	je multipleprogline
  3807 00002E96 3C00                <1> 	cmp al, 0
  3808 00002E98 75E9                <1> 	jne fixvariables
  3809 00002E9A 31C0                <1> 	xor eax, eax
  3810 00002E9C A3[762E0000]        <1> 	mov [nextcommandloc], eax
  3811                              <1> donefixvariables:
  3812 00002EA1 803D[3F340000]00    <1> 	cmp byte [indexdone], 0
  3813 00002EA8 7505                <1> 	jne progtest
  3814 00002EAA E8FB040000          <1> 	call indexfiles
  3815                              <1> progtest:
  3816 00002EAF 31C0                <1> 	xor eax, eax
  3817 00002EB1 BB[E6ED0000]        <1> 	mov ebx, fileindex
  3818 00002EB6 668B03              <1> prgnxt:	mov ax, [ebx]
  3819 00002EB9 B1FF                <1> 	mov cl, 255
  3820 00002EBB B52C                <1> 	mov ch, 44
  3821 00002EBD 6639C8              <1> 	cmp ax, cx
  3822 00002EC0 740B                <1> 	je fndprg
  3823 00002EC2 43                  <1> 	inc ebx
  3824 00002EC3 81FB[E6F10000]      <1> 	cmp ebx, fileindexend
  3825 00002EC9 735D                <1> 	jae prgnf
  3826 00002ECB EBE9                <1> 	jmp prgnxt
  3827 00002ECD 81C302000000        <1> fndprg: add ebx, 2
  3828 00002ED3 31C9                <1> 	xor ecx, ecx
  3829 00002ED5 BE[66080100]        <1> 	mov esi, buftxt
  3830 00002EDA 390D[7A2E0000]      <1> 	cmp [thiscommandloc], ecx
  3831 00002EE0 7406                <1> 	je noprgtstmultiple
  3832 00002EE2 8B35[7A2E0000]      <1> 	mov esi, [thiscommandloc]
  3833                              <1> noprgtstmultiple:
  3834 00002EE8 E8A6000000          <1> 	call cndtest
  3835 00002EED 3C01                <1> 	cmp al, 1
  3836 00002EEF 7302                <1> 	jae prggood
  3837 00002EF1 EBC3                <1> 	jmp prgnxt
  3838 00002EF3 81FB[E6F10000]      <1> prggood: cmp ebx, fileindexend
  3839 00002EF9 7358                <1> 	jae prgdn
  3840 00002EFB 31C0                <1> 	xor eax, eax
  3841 00002EFD BE[66080100]        <1> 	mov esi, buftxt
  3842 00002F02 3905[7A2E0000]      <1> 	cmp [thiscommandloc], eax
  3843 00002F08 7406                <1> 	je noprggoodmul
  3844 00002F0A 8B35[7A2E0000]      <1> 	mov esi, [thiscommandloc]
  3845                              <1> noprggoodmul:
  3846 00002F10 8935[542F0000]      <1> 	mov [currentcommandloc], esi
  3847 00002F16 81C303000000        <1> 	add ebx, 3
  3848 00002F1C 8B3B                <1> 	mov edi, [ebx]
  3849 00002F1E C605[F5660000]02    <1> 	mov byte [threadson], 2
  3850 00002F25 FFD7                <1> 	call edi
  3851 00002F27 C3                  <1> 	ret
  3852                              <1> prgnf:	
  3853 00002F28 8B35[542F0000]      <1> 	mov esi, [currentcommandloc]
  3854 00002F2E 8A06                <1> 	mov al, [esi]
  3855 00002F30 3C00                <1> 	cmp al, 0
  3856 00002F32 741F                <1> 	je prgdn
  3857 00002F34 BE[3E890000]        <1> 	mov esi, notfound1
  3858 00002F39 E8EDEDFFFF          <1> 	call print
  3859 00002F3E 8B35[542F0000]      <1> 	mov esi, [currentcommandloc]
  3860 00002F44 E8E2EDFFFF          <1> 	call print
  3861 00002F49 BE[46890000]        <1> 	mov esi, notfound2
  3862 00002F4E E8D8EDFFFF          <1> 	call print
  3863 00002F53 C3                  <1> prgdn:	ret
  3864                              <1> 
  3865 00002F54 00000000            <1> currentcommandloc dd 0
  3866                              <1> 
  3867                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3868 00002F58 6631C0              <1> 	xor ax, ax
  3869 00002F5B 8A06                <1> retest:	mov al, [esi]
  3870 00002F5D 8A23                <1> 	mov ah, [ebx]
  3871 00002F5F 3C00                <1> 	cmp al, 0
  3872 00002F61 7408                <1> 	je testtrue
  3873 00002F63 38E0                <1> 	cmp al, ah
  3874 00002F65 750C                <1> 	jne testfalse
  3875 00002F67 43                  <1> 	inc ebx
  3876 00002F68 46                  <1> 	inc esi
  3877 00002F69 EBF0                <1> 	jmp retest
  3878                              <1> testtrue:
  3879 00002F6B 80FC00              <1> 	cmp ah, 0
  3880 00002F6E 7503                <1> 	jne testfalse
  3881 00002F70 B001                <1> 	mov al, 1
  3882 00002F72 C3                  <1> 	ret
  3883                              <1> testfalse:
  3884 00002F73 30C0                <1> 	xor al, al
  3885 00002F75 C3                  <1> 	ret
  3886                              <1> 
  3887                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3888 00002F76 30C0                <1> 	xor al, al
  3889                              <1> opretest:
  3890 00002F78 8A06                <1> 	mov al, [esi]
  3891 00002F7A 8A23                <1> 	mov ah, [ebx]
  3892 00002F7C 38E0                <1> 	cmp al, ah
  3893 00002F7E 7510                <1> 	jne optestfalse
  3894 00002F80 80FC00              <1> 	cmp ah, 0
  3895 00002F83 7404                <1> 	je optesttrue
  3896 00002F85 43                  <1> 	inc ebx
  3897 00002F86 46                  <1> 	inc esi
  3898 00002F87 EBEF                <1> 	jmp opretest
  3899                              <1> optesttrue:
  3900 00002F89 3C00                <1> 	cmp al, 0
  3901 00002F8B 7503                <1> 	jne optestfalse
  3902 00002F8D B001                <1> 	mov al, 1
  3903 00002F8F C3                  <1> 	ret
  3904                              <1> optestfalse:
  3905 00002F90 30C0                <1> 	xor al, al
  3906 00002F92 C3                  <1> 	ret
  3907                              <1> 
  3908                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3909 00002F93 30C0                <1> 	xor al, al
  3910 00002F95 8A06                <1> cndretest:	mov al, [esi]
  3911 00002F97 8A23                <1> 	mov ah, [ebx]
  3912 00002F99 38CC                <1> 	cmp ah, cl
  3913 00002F9B 7408                <1> 	je cndtesttrue
  3914 00002F9D 38E0                <1> 	cmp al, ah
  3915 00002F9F 750B                <1> 	jne cndtestfalse
  3916 00002FA1 43                  <1> 	inc ebx
  3917 00002FA2 46                  <1> 	inc esi
  3918 00002FA3 EBF0                <1> 	jmp cndretest
  3919                              <1> cndtesttrue:
  3920 00002FA5 38C8                <1> 	cmp al, cl
  3921 00002FA7 7506                <1> 	jne cndtestalmost
  3922 00002FA9 B001                <1> 	mov al, 1
  3923 00002FAB C3                  <1> 	ret
  3924                              <1> cndtestfalse:
  3925 00002FAC 30C0                <1> 	xor al, al
  3926 00002FAE C3                  <1> 	ret
  3927                              <1> cndtestalmost:
  3928 00002FAF B002                <1> 	mov al, 2
  3929 00002FB1 C3                  <1> 	ret
  3930                              <1> 	
  3931                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3932                              <1> 		                ;ends if array seperator is found backwards after 0
  3933                              <1> 	arnxt:	      
  3934 00002FB2 88E8                <1> 		mov al, ch
  3935 00002FB4 88CC                <1> 		mov ah, cl        
  3936 00002FB6 663906              <1> 		cmp [esi], ax
  3937 00002FB9 744D                <1> 		je ardn
  3938 00002FBB 66390E              <1> 		cmp [esi], cx
  3939 00002FBE 7407                <1> 		je arfnd
  3940 00002FC0 46                  <1> 		inc esi
  3941 00002FC1 39DE                <1> 		cmp esi, ebx
  3942 00002FC3 7343                <1> 		jae ardn
  3943 00002FC5 EBEB                <1> 		jmp arnxt
  3944 00002FC7 81C602000000        <1> 	arfnd: add esi, 2
  3945 00002FCD 891D[09300000]      <1> 		mov [arbx], ebx
  3946 00002FD3 890D[0D300000]      <1> 		mov [arcx], ecx
  3947 00002FD9 E84DEDFFFF          <1> 		call print
  3948 00002FDE 8935[0F300000]      <1> 		mov [arsi], esi
  3949 00002FE4 BE[77890000]        <1> 		mov esi, line
  3950 00002FE9 E83DEDFFFF          <1> 		call print
  3951 00002FEE 8B1D[09300000]      <1> 		mov ebx, [arbx]
  3952 00002FF4 668B0D[0D300000]    <1> 		mov cx, [arcx]
  3953 00002FFB 8B35[0F300000]      <1> 		mov esi, [arsi]
  3954 00003001 46                  <1> 		inc esi
  3955 00003002 39DE                <1> 		cmp esi, ebx
  3956 00003004 7302                <1> 		jae ardn
  3957 00003006 EBAA                <1> 		jmp arnxt
  3958 00003008 C3                  <1> 	ardn:	ret
  3959 00003009 00000000            <1> arbx:	dw 0,0
  3960 0000300D 0000                <1> arcx:	db 0,0
  3961 0000300F 00000000            <1> arsi:	dw 0,0
  3962                              <1> 
  3963                              <1> clearbuffer:
  3964 00003013 BE[660C0100]        <1> 	mov esi, buf2
  3965 00003018 B030                <1> 	mov al, '0'
  3966 0000301A 81FE[7A0C0100]      <1> clearbuf: cmp esi, numbuf
  3967 00003020 7305                <1> 	jae doneclearbuff
  3968 00003022 8806                <1> 	mov [esi], al
  3969 00003024 46                  <1> 	inc esi
  3970 00003025 EBF3                <1> 	jmp clearbuf
  3971                              <1> doneclearbuff: 
  3972 00003027 C3                  <1> 		ret
  3973                              <1> 
  3974                              <1> convert:
  3975 00003028 4E                  <1> 	dec esi
  3976 00003029 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3977                              <1> .lp:
  3978 0000302B 89DE                <1> 	mov esi, ebx
  3979 0000302D 81EE09000000        <1> 	sub esi, 9
  3980 00003033 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3981 00003039 720A                <1> 	jb .8
  3982 0000303B 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3983 00003041 FE06                <1> 	inc byte [esi]
  3984 00003043 EBE6                <1> 	jmp .lp
  3985 00003045 46                  <1> .8:	inc esi
  3986 00003046 81F900E1F505        <1> 	cmp ecx, 100000000
  3987 0000304C 720A                <1> 	jb .7
  3988 0000304E 81E900E1F505        <1> 	sub ecx, 100000000
  3989 00003054 FE06                <1> 	inc byte [esi]
  3990 00003056 EBD3                <1> 	jmp .lp
  3991 00003058 46                  <1> .7:	inc esi
  3992 00003059 81F980969800        <1> 	cmp ecx, 10000000
  3993 0000305F 720A                <1> 	jb .6
  3994 00003061 81E980969800        <1> 	sub ecx, 10000000
  3995 00003067 FE06                <1> 	inc byte [esi]
  3996 00003069 EBC0                <1> 	jmp .lp
  3997 0000306B 46                  <1> .6:	inc esi
  3998 0000306C 81F940420F00        <1> 	cmp ecx, 1000000
  3999 00003072 720A                <1> 	jb .5
  4000 00003074 81E940420F00        <1> 	sub ecx, 1000000
  4001 0000307A FE06                <1> 	inc byte [esi]
  4002 0000307C EBAD                <1> 	jmp .lp
  4003 0000307E 46                  <1> .5:	inc esi
  4004 0000307F 81F9A0860100        <1> 	cmp ecx, 100000
  4005 00003085 720A                <1> 	jb .4
  4006 00003087 81E9A0860100        <1> 	sub ecx, 100000
  4007 0000308D FE06                <1> 	inc byte [esi]
  4008 0000308F EB9A                <1> 	jmp .lp
  4009 00003091 46                  <1> .4:	inc esi
  4010 00003092 81F910270000        <1> 	cmp ecx, 10000
  4011 00003098 720A                <1> 	jb .3
  4012 0000309A 81E910270000        <1> 	sub ecx, 10000
  4013 000030A0 FE06                <1> 	inc byte [esi]
  4014 000030A2 EB87                <1> 	jmp .lp
  4015 000030A4 46                  <1> .3:	inc esi
  4016 000030A5 81F9E8030000        <1> 	cmp ecx, 1000
  4017 000030AB 720D                <1> 	jb .2
  4018 000030AD 81E9E8030000        <1> 	sub ecx, 1000
  4019 000030B3 FE06                <1> 	inc byte [esi]
  4020 000030B5 E971FFFFFF          <1> 	jmp .lp
  4021 000030BA 46                  <1> .2:	inc esi
  4022 000030BB 81F964000000        <1> 	cmp ecx, 100
  4023 000030C1 720D                <1> 	jb .1
  4024 000030C3 81E964000000        <1> 	sub ecx, 100
  4025 000030C9 FE06                <1> 	inc byte [esi]
  4026 000030CB E95BFFFFFF          <1> 	jmp .lp
  4027 000030D0 46                  <1> .1:	inc esi
  4028 000030D1 81F90A000000        <1> 	cmp ecx, 10
  4029 000030D7 720D                <1> 	jb .0
  4030 000030D9 81E90A000000        <1> 	sub ecx, 10
  4031 000030DF FE06                <1> 	inc byte [esi]
  4032 000030E1 E945FFFFFF          <1> 	jmp .lp
  4033 000030E6 46                  <1> .0:	inc esi
  4034 000030E7 81F901000000        <1> 	cmp ecx, 1
  4035 000030ED 720D                <1> 	jb .dn
  4036 000030EF 81E901000000        <1> 	sub ecx, 1
  4037 000030F5 FE06                <1> 	inc byte [esi]
  4038 000030F7 E92FFFFFFF          <1> 	jmp .lp
  4039                              <1> .dn:
  4040 000030FC C3                  <1> 	ret
  4041                              <1> 
  4042                              <1> 	
  4043                              <1> 
  4044 000030FD 00<rept>            <1> hexnumber times 8 db 0
  4045 00003105 202000              <1> hexnumberend db "  ",0
  4046                              <1> 
  4047                              <1> converthex:
  4048                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  4049 00003108 56                  <1> 	push esi
  4050 00003109 B030                <1> 	mov al, "0"
  4051 0000310B 39FE                <1> .clearlp: cmp esi, edi
  4052 0000310D 7305                <1> 	jae .doneclear
  4053 0000310F 8806                <1> 	mov [esi], al
  4054 00003111 46                  <1> 	inc esi
  4055 00003112 EBF7                <1> 	jmp .clearlp
  4056                              <1> .doneclear:
  4057 00003114 81EE02000000        <1> 	sub esi, 2
  4058 0000311A 89C8                <1> 	mov eax, ecx
  4059                              <1> .loop:
  4060 0000311C 30FF                <1> 	xor bh, bh
  4061 0000311E 88C3                <1> 	mov bl, al
  4062 00003120 66C1E304            <1> 	shl bx, 4
  4063 00003124 C0EB04              <1> 	shr bl, 4
  4064 00003127 86DF                <1> 	xchg bl, bh ;they are backwards
  4065 00003129 80C330              <1> 	add bl, 48
  4066 0000312C 80FB39              <1> 	cmp bl, "9"
  4067 0000312F 7609                <1> 	jbe .goodbl
  4068 00003131 80EB30              <1> 	sub bl, 48
  4069 00003134 80EB0A              <1> 	sub bl, 0xA
  4070 00003137 80C341              <1> 	add bl, "A"
  4071                              <1> .goodbl:
  4072 0000313A 80C730              <1> 	add bh, 48
  4073 0000313D 80FF39              <1> 	cmp bh, "9"
  4074 00003140 7609                <1> 	jbe .goodbh
  4075 00003142 80EF30              <1> 	sub bh, 48
  4076 00003145 80EF0A              <1> 	sub bh, 0xA
  4077 00003148 80C741              <1> 	add bh, "A"
  4078                              <1> .goodbh:
  4079 0000314B C1E808              <1> 	shr eax, 8
  4080 0000314E 66891E              <1> 	mov [esi], bx
  4081 00003151 81EE02000000        <1> 	sub esi, 2
  4082 00003157 3B3424              <1> 	cmp esi, [esp]
  4083 0000315A 7207                <1> 	jb .done
  4084 0000315C 3D00000000          <1> 	cmp eax, 0
  4085 00003161 75B9                <1> 	jne .loop
  4086                              <1> .done:
  4087 00003163 5E                  <1> 	pop esi
  4088 00003164 C3                  <1> 	ret
  4089                              <1> 	
  4090                              <1> 	
  4091 00003165 00                  <1> smallhex db 0
  4092 00003166 01                  <1> firsthexshown db 1
  4093                              <1> showhexsmall:
  4094 00003167 C605[65310000]01    <1> 	mov byte [smallhex], 1
  4095 0000316E E808000000          <1> 	call showhex
  4096 00003173 C605[65310000]00    <1> 	mov byte [smallhex], 0
  4097 0000317A C3                  <1> 	ret
  4098                              <1> showhex:
  4099 0000317B 60                  <1> 	pusha
  4100 0000317C BE[FD300000]        <1> 	mov esi, hexnumber
  4101 00003181 BF[05310000]        <1> 	mov edi, hexnumberend
  4102 00003186 E87DFFFFFF          <1> 	call converthex
  4103 0000318B 803D[66310000]01    <1> 	cmp byte [firsthexshown], 1
  4104 00003192 7503                <1> 	jne .show
  4105 00003194 6631D2              <1> 	xor dx, dx
  4106                              <1> .show:
  4107 00003197 803D[66310000]03    <1> 	cmp byte [firsthexshown], 3
  4108 0000319E 750A                <1> 	jne .nonewhexline
  4109 000031A0 BE[77890000]        <1> 	mov esi, line
  4110 000031A5 E881EBFFFF          <1> 	call print
  4111                              <1> .nonewhexline:
  4112 000031AA 803D[66310000]04    <1> 	cmp byte [firsthexshown], 4
  4113 000031B1 7527                <1> 	jne .notab
  4114 000031B3 B1A0                <1> 	mov cl, 160
  4115 000031B5 28D1                <1> 	sub cl, dl
  4116 000031B7 C0E905              <1> 	shr cl, 5
  4117 000031BA C0E105              <1> 	shl cl, 5
  4118 000031BD 80F900              <1> 	cmp cl, 0
  4119 000031C0 750F                <1> 	jne .nonewline
  4120 000031C2 BE[77890000]        <1> 	mov esi, line
  4121 000031C7 E85FEBFFFF          <1> 	call print
  4122 000031CC E909000000          <1> 	jmp .notab
  4123                              <1> .nonewline:
  4124 000031D1 80C20F              <1> 	add dl, 15
  4125 000031D4 C0EA04              <1> 	shr dl, 4
  4126 000031D7 C0E204              <1> 	shl dl, 4
  4127                              <1> .notab:
  4128 000031DA BE[FD300000]        <1> 	mov esi, hexnumber
  4129 000031DF 803D[65310000]01    <1> 	cmp byte [smallhex],1
  4130 000031E6 7506                <1> 	jne .nosmall
  4131 000031E8 81C606000000        <1> 	add esi, 6
  4132                              <1> .nosmall:
  4133 000031EE 803D[66310000]05    <1> 	cmp byte [firsthexshown], 5
  4134 000031F5 750A                <1> 	jne .noquiet
  4135 000031F7 E810EBFFFF          <1> 	call printquiet
  4136 000031FC E918000000          <1> 	jmp .donequiet
  4137                              <1> .noquiet:
  4138 00003201 803D[66310000]06    <1> 	cmp byte [firsthexshown], 6
  4139 00003208 750A                <1> 	jne .normal
  4140 0000320A E810EBFFFF          <1> 	call printhighlight
  4141 0000320F E905000000          <1> 	jmp .donequiet
  4142                              <1> .normal:
  4143 00003214 E812EBFFFF          <1> 	call print
  4144                              <1> .donequiet:
  4145 00003219 803D[66310000]02    <1> 	cmp byte [firsthexshown], 2
  4146 00003220 750A                <1> 	jne .shown
  4147 00003222 BE[77890000]        <1> 	mov esi, line
  4148 00003227 E8FFEAFFFF          <1> 	call print
  4149                              <1> .shown:
  4150 0000322C C605[66310000]00    <1> 	mov byte [firsthexshown], 0
  4151 00003233 61                  <1> 	popa
  4152 00003234 C3                  <1> 	ret
  4153                              <1> 
  4154                              <1> 
  4155 00003235 303030303030303030- <1> decnumber db "00000000000000"
  4156 0000323E 3030303030          <1>
  4157 00003243 2000                <1> decnumberend: db " ",0
  4158                              <1> 
  4159                              <1> showdec: ;;same as showhex, just uses decimal conversion
  4160 00003245 60                  <1> 	pusha
  4161 00003246 BF[35320000]        <1> 	mov edi, decnumber
  4162 0000324B BE[43320000]        <1> 	mov esi, decnumberend
  4163                              <1> .clear:
  4164 00003250 C60730              <1> 	mov byte [edi], '0'
  4165 00003253 47                  <1> 	inc edi
  4166 00003254 39F7                <1> 	cmp edi, esi
  4167 00003256 72F8                <1> 	jb .clear
  4168 00003258 BF[35320000]        <1> 	mov edi, decnumber
  4169 0000325D E8C6FDFFFF          <1> 	call convert
  4170 00003262 803D[66310000]01    <1> 	cmp byte [firsthexshown], 1
  4171 00003269 7503                <1> 	jne .show
  4172 0000326B 6631D2              <1> 	xor dx, dx
  4173                              <1> .show:
  4174 0000326E 803D[66310000]03    <1> 	cmp byte [firsthexshown], 3
  4175 00003275 750A                <1> 	jne .nonewdecline
  4176 00003277 BE[77890000]        <1> 	mov esi, line
  4177 0000327C E8AAEAFFFF          <1> 	call print
  4178                              <1> .nonewdecline:
  4179 00003281 803D[66310000]04    <1> 	cmp byte [firsthexshown], 4
  4180 00003288 7527                <1> 	jne .notab
  4181 0000328A B1A0                <1> 	mov cl, 160
  4182 0000328C 28D1                <1> 	sub cl, dl
  4183 0000328E C0E905              <1> 	shr cl, 5
  4184 00003291 C0E105              <1> 	shl cl, 5
  4185 00003294 80F900              <1> 	cmp cl, 0
  4186 00003297 750F                <1> 	jne .nonewline
  4187 00003299 BE[77890000]        <1> 	mov esi, line
  4188 0000329E E888EAFFFF          <1> 	call print
  4189 000032A3 E909000000          <1> 	jmp .notab
  4190                              <1> .nonewline:
  4191 000032A8 80C20F              <1> 	add dl, 15
  4192 000032AB C0EA04              <1> 	shr dl, 4
  4193 000032AE C0E204              <1> 	shl dl, 4
  4194                              <1> .notab:
  4195 000032B1 BE[35320000]        <1> 	mov esi, decnumber
  4196 000032B6 4E                  <1> 	dec esi
  4197                              <1> .sifind:
  4198 000032B7 46                  <1> 	inc esi
  4199 000032B8 803E30              <1> 	cmp byte [esi], '0'
  4200 000032BB 74FA                <1> 	je .sifind
  4201 000032BD E869EAFFFF          <1> 	call print
  4202 000032C2 803D[66310000]02    <1> 	cmp byte [firsthexshown], 2
  4203 000032C9 750A                <1> 	jne .shown
  4204 000032CB BE[77890000]        <1> 	mov esi, line
  4205 000032D0 E856EAFFFF          <1> 	call print
  4206                              <1> .shown:
  4207 000032D5 C605[66310000]00    <1> 	mov byte [firsthexshown], 0
  4208 000032DC 61                  <1> 	popa
  4209 000032DD C3                  <1> 	ret
  4210                              <1> 	
  4211                              <1> cnvrthextxt:
  4212 000032DE 31C9                <1> 	xor ecx, ecx
  4213 000032E0 31C0                <1> 	xor eax, eax
  4214 000032E2 31D2                <1> 	xor edx, edx
  4215 000032E4 31DB                <1> 	xor ebx, ebx
  4216 000032E6 4E                  <1> 	dec esi
  4217                              <1> .end:
  4218 000032E7 46                  <1> 	inc esi
  4219 000032E8 8A06                <1> 	mov al, [esi]
  4220 000032EA 3C00                <1> 	cmp al, 0
  4221 000032EC 75F9                <1> 	jne .end
  4222                              <1> .loop:
  4223 000032EE 4E                  <1> 	dec esi
  4224 000032EF 8A06                <1> 	mov al, [esi]
  4225 000032F1 3C41                <1> 	cmp al, "A"
  4226 000032F3 7328                <1> 	jae .char
  4227 000032F5 2C30                <1> 	sub al, 48
  4228 000032F7 3C10                <1> 	cmp al, 16
  4229 000032F9 7721                <1> 	ja .done
  4230                              <1> .donechar:
  4231 000032FB 81FA00000000        <1> 	cmp edx, 0
  4232 00003301 740E                <1> 	je .noshl
  4233 00003303 89D3                <1> 	mov ebx, edx
  4234                              <1> .shl:
  4235 00003305 C1E004              <1> 	shl eax, 4
  4236 00003308 4B                  <1> 	dec ebx
  4237 00003309 81FB00000000        <1> 	cmp ebx, 0
  4238 0000330F 75F4                <1> 	jne .shl
  4239                              <1> .noshl:
  4240 00003311 42                  <1> 	inc edx
  4241 00003312 01C1                <1> 	add ecx, eax
  4242 00003314 81FA08000000        <1> 	cmp edx, 8
  4243 0000331A 72D2                <1> 	jb .loop
  4244                              <1> .done:
  4245 0000331C C3                  <1> 	ret
  4246                              <1> .char:
  4247 0000331D 3C46                <1> 	cmp al, "F"
  4248 0000331F 77FB                <1> 	ja .done
  4249 00003321 2C41                <1> 	sub al, "A"
  4250 00003323 040A                <1> 	add al, 0xA
  4251 00003325 EBD4                <1> 	jmp .donechar
  4252                              <1> 	
  4253                              <1> 	
  4254                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4255 00003327 31C9                <1> 	xor ecx, ecx
  4256 00003329 31C0                <1> 	xor eax, eax
  4257 0000332B 31D2                <1> 	xor edx, edx
  4258 0000332D 31DB                <1> 	xor ebx, ebx
  4259 0000332F 4E                  <1> 	dec esi
  4260                              <1> .lp:
  4261 00003330 46                  <1> 	inc esi
  4262 00003331 8A06                <1> 	mov al, [esi]
  4263 00003333 3C00                <1> 	cmp al, 0
  4264 00003335 75F9                <1> 	jne .lp
  4265 00003337 4E                  <1> 	dec esi
  4266 00003338 8A06                <1> 	mov al, [esi]
  4267 0000333A 3C2E                <1> 	cmp al, '.'
  4268 0000333C 7503                <1> 	jne .dot
  4269 0000333E 46                  <1> 	inc esi
  4270 0000333F EBEF                <1> 	jmp .lp
  4271                              <1> .dot:
  4272 00003341 3C20                <1> 	cmp al, ' '
  4273 00003343 7404                <1> 	je .zero
  4274 00003345 3C30                <1> 	cmp al, '0'
  4275 00003347 7504                <1> 	jne .txtlp
  4276                              <1> .zero: 
  4277 00003349 39FE                <1> 		cmp esi, edi
  4278 0000334B 7458                <1> 		je .done
  4279                              <1> .txtlp:
  4280 0000334D 31C0                <1> 	xor eax, eax
  4281 0000334F 8A06                <1> 	mov al, [esi]
  4282 00003351 3C3D                <1> 	cmp al, '='
  4283 00003353 7450                <1> 	je .done
  4284 00003355 3C30                <1> 	cmp al, 48
  4285 00003357 724C                <1> 	jb .done
  4286 00003359 3C23                <1> 	cmp al, '#'
  4287 0000335B 7448                <1> 	je .done
  4288 0000335D 39FE                <1> 	cmp esi, edi
  4289 0000335F 7244                <1> 	jb .done
  4290 00003361 81F900000000        <1> 	cmp ecx, 0
  4291 00003367 7708                <1> 	ja .exp
  4292 00003369 2C30                <1> .noexp:	sub al, 48
  4293 0000336B 01C2                <1> 	add edx, eax
  4294 0000336D 4E                  <1> 	dec esi
  4295 0000336E 41                  <1> 	inc ecx
  4296 0000336F EBDC                <1> 	jmp .txtlp
  4297 00003371 81F900000000        <1> .exp:	cmp ecx, 0
  4298 00003377 74F0                <1> 	je .noexp
  4299 00003379 2C30                <1> 	sub al, 48
  4300 0000337B 51                  <1> 	push ecx
  4301 0000337C 89C3                <1> .expmul:	mov ebx, eax
  4302 0000337E 01D8                <1> 	add eax, ebx
  4303 00003380 01D8                <1> 	add eax, ebx
  4304 00003382 01D8                <1> 	add eax, ebx
  4305 00003384 01D8                <1> 	add eax, ebx
  4306 00003386 01D8                <1> 	add eax, ebx
  4307 00003388 01D8                <1> 	add eax, ebx
  4308 0000338A 01D8                <1> 	add eax, ebx
  4309 0000338C 01D8                <1> 	add eax, ebx
  4310 0000338E 01D8                <1> 	add eax, ebx
  4311 00003390 81E901000000        <1> 	sub ecx, 1
  4312 00003396 81F900000000        <1> 	cmp ecx, 0
  4313 0000339C 77DE                <1> 	ja .expmul
  4314 0000339E 01C2                <1> 	add edx, eax
  4315 000033A0 59                  <1> 	pop ecx
  4316 000033A1 4E                  <1> 	dec esi
  4317 000033A2 41                  <1> 	inc ecx
  4318 000033A3 EBA8                <1> 	jmp .txtlp
  4319 000033A5 89D1                <1> .done: mov ecx, edx
  4320 000033A7 C3                  <1> 	ret
  4321                                      %include "source/programs.asm"
  4322 000033A8 FF2C                <1> filetypes db 255,44
  4323                              <1> progstart:		;programs start here
  4324                              <1> indexfiles:
  4325 000033AA BE[AA330000]        <1> 	mov esi, progstart
  4326 000033AF BB[E6ED0000]        <1> 	mov ebx, fileindex
  4327 000033B4 BF[AA330000]        <1> 	mov edi, progstart
  4328 000033B9 81EF02000000        <1> 	sub edi, 2
  4329                              <1> indexloop:
  4330 000033BF 668B0E              <1> 	mov cx, [esi]
  4331                              <1> 	indexloop2:
  4332 000033C2 663B0F              <1> 		cmp cx, [edi]
  4333 000033C5 7424                <1> 		je indexloop2done
  4334 000033C7 81EF02000000        <1> 		sub edi, 2
  4335 000033CD 81FF[A8330000]      <1> 		cmp edi, filetypes
  4336 000033D3 73ED                <1> 		jae indexloop2
  4337 000033D5 BF[AA330000]        <1> 	mov edi, progstart
  4338 000033DA 81EF02000000        <1> 	sub edi, 2
  4339 000033E0 46                  <1> 	inc esi
  4340 000033E1 81FE[17530000]      <1> 	cmp esi, batchprogend
  4341 000033E7 734E                <1> 	jae indexloopdone
  4342 000033E9 EBD4                <1> 	jmp indexloop
  4343                              <1> indexloop2done:
  4344 000033EB 66890B              <1> 	mov [ebx], cx
  4345 000033EE 81C302000000        <1> 	add ebx, 2
  4346 000033F4 81C602000000        <1> 	add esi, 2
  4347                              <1> 	nameindex:
  4348 000033FA 8A0E                <1> 		mov cl, [esi]
  4349 000033FC 80F900              <1> 		cmp cl, 0
  4350 000033FF 7406                <1> 		je nameindexdone
  4351 00003401 880B                <1> 		mov [ebx], cl
  4352 00003403 46                  <1> 		inc esi
  4353 00003404 43                  <1> 		inc ebx
  4354 00003405 EBF3                <1> 		jmp nameindex
  4355                              <1> 	nameindexdone:
  4356 00003407 43                  <1> 		inc ebx
  4357 00003408 66C7030000          <1> 		mov word [ebx], 0
  4358 0000340D 81C302000000        <1> 		add ebx, 2
  4359 00003413 46                  <1> 		inc esi
  4360 00003414 8933                <1> 		mov [ebx], esi
  4361 00003416 81C304000000        <1> 		add ebx, 4
  4362 0000341C 66C7030000          <1> 		mov word [ebx], 0
  4363 00003421 81C302000000        <1> 		add ebx, 2
  4364 00003427 81FB[E6F10000]      <1> 		cmp ebx, fileindexend
  4365 0000342D 7308                <1> 		jae indexloopdone
  4366 0000342F 81C601000000        <1> 		add esi, 1
  4367 00003435 EB88                <1> 		jmp indexloop
  4368 00003437 C605[3F340000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4369 0000343E C3                  <1> 		ret
  4370 0000343F 00                  <1> indexdone db 0
  4371                              <1> %include 'source/programs/_comment.asm' ;#
  4372 00003440 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4373 00003444 C3                  <2> 	ret 
  4374                              <1> %include 'source/programs/_math.asm' ;!
  4375 00003445 FF2C2100            <2> db 255,44,"!",0
  4376                              <2> 	num:	
  4377 00003449 E8C5FBFFFF          <2> 		call clearbuffer
  4378 0000344E C605[CF360000]00    <2> 		mov byte [decimal], 0
  4379 00003455 C605[D0360000]00    <2> 		mov byte [decimal2], 0
  4380 0000345C 8B35[542F0000]      <2> 		mov esi, [currentcommandloc]
  4381 00003462 31C0                <2> 		xor eax, eax
  4382 00003464 31C9                <2> 		xor ecx, ecx
  4383 00003466 31DB                <2> 		xor ebx, ebx
  4384 00003468 8A06                <2> 	num2:	mov al, [esi]
  4385 0000346A 3C2B                <2> 		cmp al, '+'
  4386 0000346C 741B                <2> 		je operatorfound
  4387 0000346E 3C2D                <2> 		cmp al, '-'
  4388 00003470 7417                <2> 		je operatorfound
  4389 00003472 3C2A                <2> 		cmp al, '*'
  4390 00003474 7413                <2> 		je operatorfound
  4391 00003476 3C2F                <2> 		cmp al, '/'
  4392 00003478 740F                <2> 		je operatorfound
  4393 0000347A 3C5E                <2> 		cmp al, '^'
  4394 0000347C 740B                <2> 		je operatorfound
  4395 0000347E 46                  <2> 		inc esi
  4396 0000347F 3C00                <2> 		cmp al, 0
  4397 00003481 0F841AF8FFFF        <2> 		je near nwcmd
  4398 00003487 EBDF                <2> 		jmp num2
  4399 00003489 50                  <2> 	operatorfound: push eax
  4400 0000348A 30E4                <2> 		xor ah, ah
  4401 0000348C 8826                <2> 		mov [esi], ah
  4402 0000348E 89F7                <2> 		mov edi, esi
  4403 00003490 46                  <2> 		inc esi
  4404 00003491 8A06                <2> 		mov al, [esi]
  4405 00003493 3C25                <2> 		cmp al, '%'
  4406 00003495 0F8462000000        <2> 		je near resultnum1
  4407                              <2> 	varnum2: 
  4408 0000349B 57                  <2> 		push edi
  4409 0000349C E8A4000000          <2> 		call checkdecimal
  4410 000034A1 5F                  <2> 		pop edi
  4411 000034A2 E880FEFFFF          <2> 		call cnvrttxt
  4412                              <2> 	vrnm2:
  4413 000034A7 89CB                <2> 		mov ebx, ecx
  4414 000034A9 53                  <2> 		push ebx
  4415 000034AA E864FBFFFF          <2> 		call clearbuffer
  4416 000034AF 8B35[542F0000]      <2> 		mov esi, [currentcommandloc]
  4417 000034B5 89F7                <2> 		mov edi, esi
  4418 000034B7 46                  <2> 		inc esi
  4419 000034B8 8A06                <2> 		mov al, [esi]
  4420 000034BA 3C25                <2> 		cmp al, '%'
  4421 000034BC 0F844F000000        <2> 		je near resultnum2
  4422                              <2> 	varnum4: 
  4423 000034C2 57                  <2> 		push edi
  4424 000034C3 E869000000          <2> 		call checkdecimal2
  4425 000034C8 5F                  <2> 		pop edi
  4426 000034C9 E859FEFFFF          <2> 		call cnvrttxt
  4427                              <2> 	vrnm4:
  4428 000034CE 5B                  <2> 		pop ebx
  4429 000034CF 58                  <2> 		pop eax
  4430 000034D0 3C2B                <2> 		cmp al, '+'
  4431 000034D2 0F849B000000        <2> 		je near plusnum
  4432 000034D8 3C2D                <2> 		cmp al, '-'
  4433 000034DA 0F849F000000        <2> 		je near subnum
  4434 000034E0 3C2A                <2> 		cmp al, '*'
  4435 000034E2 0F84A3000000        <2> 		je near mulnum
  4436 000034E8 3C2F                <2> 		cmp al, '/'
  4437 000034EA 0F84B1000000        <2> 		je near divnum
  4438 000034F0 3C5E                <2> 		cmp al, '^'
  4439 000034F2 0F84CE000000        <2> 		je near expnum
  4440 000034F8 E9A4F7FFFF          <2> 		jmp nwcmd
  4441                              <2> 	resultnum1:
  4442 000034FD 8A0D[D1360000]      <2> 		mov cl, [decimalresult]
  4443 00003503 880D[CF360000]      <2> 		mov [decimal], cl
  4444 00003509 8B0D[D2360000]      <2> 		mov ecx, [result]
  4445 0000350F EB96                <2> 		jmp vrnm2
  4446                              <2> 	resultnum2:
  4447 00003511 8A0D[CF360000]      <2> 		mov cl, [decimal]
  4448 00003517 880D[D0360000]      <2> 		mov [decimal2], cl
  4449 0000351D 8A0D[D1360000]      <2> 		mov cl, [decimalresult]
  4450 00003523 880D[CF360000]      <2> 		mov [decimal], cl
  4451 00003529 8B0D[D2360000]      <2> 		mov ecx, [result]
  4452 0000352F EB9D                <2> 		jmp vrnm4
  4453                              <2> 	checkdecimal2:
  4454 00003531 8A25[CF360000]      <2> 		mov ah, [decimal]
  4455 00003537 8825[D0360000]      <2> 		mov [decimal2], ah
  4456 0000353D 30E4                <2> 		xor ah, ah
  4457 0000353F 8825[CF360000]      <2> 		mov [decimal], ah
  4458                              <2> 	checkdecimal:
  4459 00003545 89F7                <2> 		mov edi, esi
  4460                              <2> 	chkdec1:
  4461 00003547 8A07                <2> 		mov al, [edi]
  4462 00003549 3C2E                <2> 		cmp al, '.'
  4463 0000354B 0F840B000000        <2> 		je near fnddec
  4464 00003551 3C00                <2> 		cmp al, 0
  4465 00003553 0F8419000000        <2> 		je near nodecimal
  4466 00003559 47                  <2> 		inc edi
  4467 0000355A EBEB                <2> 		jmp chkdec1
  4468                              <2> 	fnddec:
  4469 0000355C 8A4701              <2> 		mov al, [edi + 1]
  4470 0000355F 8807                <2> 		mov [edi], al
  4471 00003561 3C00                <2> 		cmp al, 0
  4472 00003563 0F8409000000        <2> 		je near nodecimal
  4473 00003569 FE05[CF360000]      <2> 		inc byte [decimal]
  4474 0000356F 47                  <2> 		inc edi
  4475 00003570 EBEA                <2> 		jmp fnddec
  4476                              <2> 	nodecimal:
  4477 00003572 C3                  <2> 		ret
  4478                              <2> 	plusnum:
  4479 00003573 E815010000          <2> 		call decaddfix
  4480 00003578 01D9                <2> 		add ecx, ebx
  4481 0000357A E98A000000          <2> 		jmp retnum
  4482                              <2> 	subnum:
  4483 0000357F E809010000          <2> 		call decaddfix
  4484 00003584 29D9                <2> 		sub ecx, ebx
  4485 00003586 E97E000000          <2> 		jmp retnum
  4486                              <2> 	mulnum:
  4487 0000358B A0[D0360000]        <2> 		mov al, [decimal2]
  4488 00003590 0005[CF360000]      <2> 		add [decimal], al
  4489 00003596 89C8                <2> 		mov eax, ecx
  4490 00003598 F7E3                <2> 		mul ebx
  4491 0000359A 89C1                <2> 		mov ecx, eax
  4492 0000359C E968000000          <2> 		jmp retnum
  4493                              <2> 	divnum:
  4494 000035A1 E8E7000000          <2> 		call decaddfix
  4495 000035A6 30C0                <2> 		xor al, al
  4496 000035A8 A2[CF360000]        <2> 		mov [decimal], al
  4497 000035AD 31D2                <2> 		xor edx, edx
  4498 000035AF 89C8                <2> 		mov eax, ecx
  4499 000035B1 81FB00000000        <2> 		cmp ebx, 0
  4500 000035B7 0F844C000000        <2> 		je near retnum
  4501 000035BD F7F3                <2> 		div ebx
  4502 000035BF 89C1                <2> 		mov ecx, eax
  4503 000035C1 E943000000          <2> 		jmp retnum
  4504                              <2> 	expnum:
  4505 000035C6 8A15[CF360000]      <2> 		mov dl, [decimal]
  4506 000035CC 8815[D0360000]      <2> 		mov [decimal2], dl
  4507 000035D2 31D2                <2> 		xor edx, edx
  4508 000035D4 89C8                <2> 		mov eax, ecx
  4509 000035D6 89D9                <2> 		mov ecx, ebx
  4510 000035D8 89C3                <2> 		mov ebx, eax
  4511 000035DA 81F900000000        <2> 		cmp ecx, 0
  4512 000035E0 7422                <2> 		je noexpnum
  4513 000035E2 49                  <2> 		dec ecx
  4514 000035E3 81F900000000        <2> 		cmp ecx, 0
  4515 000035E9 7412                <2> 		je noexpnumlp
  4516 000035EB F7E3                <2> 	expnumlp: mul ebx
  4517 000035ED 8A15[D0360000]      <2> 		mov dl, [decimal2]
  4518 000035F3 0015[CF360000]      <2> 		add [decimal], dl
  4519 000035F9 31D2                <2> 		xor edx, edx
  4520 000035FB E2EE                <2> 		loop expnumlp
  4521                              <2> 	noexpnumlp:
  4522 000035FD 89C1                <2> 		mov ecx, eax
  4523 000035FF E905000000          <2> 		jmp retnum
  4524                              <2> 	noexpnum:
  4525 00003604 B901000000          <2> 		mov ecx, 1
  4526                              <2> 	retnum: 
  4527 00003609 BE[7A0C0100]        <2> 		mov esi, numbuf
  4528 0000360E 890D[D2360000]      <2> 		mov [result], ecx
  4529 00003614 E80FFAFFFF          <2> 		call convert
  4530 00003619 BE[7A0C0100]        <2> 		mov esi, numbuf
  4531 0000361E 8A25[CF360000]      <2> 		mov ah, [decimal]
  4532 00003624 8825[D1360000]      <2> 		mov [decimalresult], ah
  4533 0000362A 80FC00              <2> 		cmp ah, 0
  4534 0000362D 0F8425000000        <2> 		je near noputdecimal
  4535                              <2> 	putdecimal:
  4536 00003633 4E                  <2> 		dec esi
  4537 00003634 FECC                <2> 		dec ah
  4538 00003636 80FC00              <2> 		cmp ah, 0
  4539 00003639 0F87F4FFFFFF        <2> 		ja near putdecimal
  4540 0000363F 4E                  <2> 		dec esi
  4541 00003640 8A06                <2> 		mov al, [esi]
  4542 00003642 C6062E              <2> 		mov byte [esi], '.'
  4543                              <2> 	decputloop:
  4544 00003645 4E                  <2> 		dec esi
  4545 00003646 8A26                <2> 		mov ah, [esi]
  4546 00003648 8806                <2> 		mov [esi], al
  4547 0000364A 88E0                <2> 		mov al, ah
  4548 0000364C 81FE[660C0100]      <2> 		cmp esi, buf2
  4549 00003652 0F87EDFFFFFF        <2> 		ja near decputloop
  4550                              <2> 	noputdecimal:
  4551 00003658 BE[660C0100]        <2> 		mov esi, buf2
  4552 0000365D E809000000          <2> 		call chkadd
  4553 00003662 E93AF6FFFF          <2> 		jmp nwcmd
  4554 00003667 00000000            <2> edxnumbuf dw 0,0
  4555 0000366B 8A06                <2> 	chkadd: mov al, [esi]
  4556 0000366D 3C30                <2> 		cmp al, '0'
  4557 0000366F 750C                <2> 		jne dnadd
  4558 00003671 46                  <2> 		inc esi
  4559 00003672 81FE[7A0C0100]      <2> 		cmp esi, numbuf
  4560 00003678 7402                <2> 		je dnaddm1
  4561 0000367A EBEF                <2> 		jmp chkadd
  4562 0000367C 4E                  <2> 	dnaddm1: dec esi
  4563 0000367D E8A9E6FFFF          <2> 	dnadd:	call print
  4564 00003682 BE[77890000]        <2> 		mov esi, line
  4565 00003687 E89FE6FFFF          <2> 		call print
  4566 0000368C C3                  <2> 		ret
  4567                              <2> 		
  4568                              <2> 	decaddfix:
  4569 0000368D A0[D0360000]        <2> 		mov al, [decimal2]
  4570 00003692 8A25[CF360000]      <2> 		mov ah, [decimal]
  4571 00003698 38E0                <2> 		cmp al, ah
  4572 0000369A 7432                <2> 		je gooddecadd
  4573 0000369C 38E0                <2> 		cmp al, ah
  4574 0000369E 721A                <2> 		jb lowdecadd
  4575                              <2> 	highdecadd:
  4576 000036A0 FEC4                <2> 		inc ah
  4577 000036A2 89CA                <2> 		mov edx, ecx
  4578 000036A4 C1E103              <2> 		shl ecx, 3
  4579 000036A7 01D1                <2> 		add ecx, edx
  4580 000036A9 01D1                <2> 		add ecx, edx
  4581 000036AB 38E0                <2> 		cmp al, ah
  4582 000036AD 77F1                <2> 		ja highdecadd
  4583 000036AF 8825[CF360000]      <2> 		mov [decimal], ah
  4584 000036B5 E914000000          <2> 		jmp gooddecadd
  4585                              <2> 	lowdecadd:
  4586 000036BA FEC0                <2> 		inc al
  4587 000036BC 89DA                <2> 		mov edx, ebx
  4588 000036BE C1E303              <2> 		shl ebx, 3
  4589 000036C1 01D3                <2> 		add ebx, edx
  4590 000036C3 01D3                <2> 		add ebx, edx
  4591 000036C5 38E0                <2> 		cmp al, ah
  4592 000036C7 72F1                <2> 		jb lowdecadd
  4593 000036C9 A2[CF360000]        <2> 		mov [decimal], al
  4594                              <2> 	gooddecadd:
  4595 000036CE C3                  <2> 		ret
  4596                              <2> 		
  4597 000036CF 00                  <2> decimal db 0
  4598 000036D0 00                  <2> decimal2 db 0
  4599 000036D1 00                  <2> decimalresult db 0
  4600 000036D2 00000000            <2> result dd 0
  4601                              <1> %include 'source/programs/_variables.asm' ;% and $
  4602 000036D6 FF2C2500            <2> db 255,44,"%",0
  4603                              <2> 	ans:
  4604 000036DA BE[660C0100]        <2> 		mov esi, buf2
  4605 000036DF E887FFFFFF          <2> 		call chkadd
  4606 000036E4 C3                  <2> 		ret
  4607                              <2> 		
  4608 000036E5 FF2C2400            <2> db 255,44,"$",0
  4609 000036E9 8B35[542F0000]      <2> var: mov esi, [currentcommandloc]
  4610 000036EF BB[66F40000]        <2> 	mov ebx, variables
  4611 000036F4 8A06                <2> lkeq:	mov al, [esi]
  4612 000036F6 3C3D                <2> 	cmp al, '='
  4613 000036F8 741B                <2> 	je eqfnd	;is there an '=' sign?
  4614 000036FA 3C00                <2> 	cmp al, 0
  4615 000036FC 7403                <2> 	je echovars
  4616 000036FE 46                  <2> 	inc esi
  4617 000036FF EBF3                <2> 	jmp lkeq
  4618 00003701 BE[66F40000]        <2> echovars: mov esi, variables
  4619 00003706 BB[66040100]        <2> 	mov ebx, varend
  4620 0000370B B105                <2> 	mov cl, 5
  4621 0000370D B504                <2> 	mov ch, 4
  4622 0000370F E89EF8FFFF          <2> 	call array
  4623 00003714 C3                  <2> 	ret
  4624 00003715 46                  <2> eqfnd:	inc esi
  4625 00003716 8A06                <2> 	mov al, [esi]
  4626 00003718 3C00                <2> 	cmp al, 0
  4627 0000371A 7410                <2> 	je readvar
  4628 0000371C 8B35[542F0000]      <2> 	mov esi, [currentcommandloc]
  4629 00003722 BB[66F40000]        <2> 	mov ebx, variables
  4630 00003727 E919000000          <2> 	jmp seek
  4631                              <2> readvar:
  4632 0000372C B00A                <2> 	mov al, 10
  4633 0000372E 66BB0700            <2> 	mov bx, 7
  4634 00003732 C605[EE220000]00    <2> 	mov byte [commandedit], 0
  4635 00003739 BF[660C0100]        <2> 	mov edi, buftxtend
  4636 0000373E E815E7FFFF          <2> 	call rdprint
  4637 00003743 EBA4                <2> 	jmp var
  4638 00003745 668B03              <2> seek:	mov ax, [ebx]
  4639 00003748 B105                <2> 	mov cl, 5
  4640 0000374A B504                <2> 	mov ch, 4
  4641 0000374C 663D0000            <2> 	cmp ax, 0
  4642 00003750 0F845B000000        <2> 	je near save
  4643 00003756 6639C8              <2> 	cmp ax, cx
  4644 00003759 7403                <2> 	je skfnd
  4645 0000375B 43                  <2> 	inc ebx
  4646 0000375C EBE7                <2> 	jmp seek
  4647 0000375E 8B35[542F0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4648 00003764 46                  <2> 	inc esi
  4649 00003765 81C302000000        <2> 	add ebx, 2
  4650 0000376B 89DF                <2> 	mov edi, ebx
  4651 0000376D B13D                <2> 	mov cl, '='
  4652 0000376F E81FF8FFFF          <2> 	call cndtest
  4653 00003774 3C01                <2> 	cmp al, 1	
  4654 00003776 7418                <2> 	je varfnd
  4655 00003778 89FB                <2> 	mov ebx, edi
  4656 0000377A 8B35[542F0000]      <2> 	mov esi, [currentcommandloc]
  4657 00003780 668B03              <2> 	mov ax, [ebx]
  4658 00003783 663D0000            <2> 	cmp ax, 0
  4659 00003787 0F8424000000        <2> 	je near save
  4660 0000378D 43                  <2> 	inc ebx
  4661 0000378E EBB5                <2> 	jmp seek
  4662 00003790 8A03                <2> varfnd:	mov al, [ebx]
  4663 00003792 3C04                <2> 	cmp al, 4
  4664 00003794 7404                <2> 	je save2
  4665 00003796 4B                  <2> 	dec ebx
  4666 00003797 4E                  <2> 	dec esi
  4667 00003798 EBF6                <2> 	jmp varfnd
  4668 0000379A 4B                  <2> save2:	dec ebx
  4669 0000379B 4E                  <2> 	dec esi
  4670 0000379C 8A03                <2> 	mov al, [ebx]
  4671 0000379E 3C05                <2> 	cmp al, 5
  4672 000037A0 7402                <2> 	je remove
  4673 000037A2 EBEC                <2> 	jmp varfnd
  4674 000037A4 8A03                <2> remove: mov al, [ebx]
  4675 000037A6 3C00                <2> 	cmp al, 0
  4676 000037A8 749B                <2> 	je seek
  4677 000037AA 30C0                <2> 	xor al, al
  4678 000037AC 8803                <2> 	mov [ebx], al
  4679 000037AE 43                  <2> 	inc ebx
  4680 000037AF EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4681 000037B1 8B35[542F0000]      <2> save:	mov esi, [currentcommandloc]
  4682 000037B7 43                  <2> 	inc ebx
  4683 000037B8 B005                <2> 	mov al, 5
  4684 000037BA B404                <2> 	mov ah, 4
  4685 000037BC 668903              <2> 	mov [ebx], ax
  4686 000037BF 43                  <2> 	inc ebx
  4687 000037C0 43                  <2> svhere:	inc ebx
  4688 000037C1 46                  <2> 	inc esi
  4689 000037C2 8A06                <2> 	mov al, [esi]
  4690 000037C4 3C00                <2> 	cmp al, 0
  4691 000037C6 0F844A000000        <2> 	je near svdone
  4692 000037CC 3C25                <2> 	cmp al, '%'
  4693 000037CE 7404                <2> 	je ans2
  4694 000037D0 8803                <2> 	mov [ebx], al	
  4695 000037D2 EBEC                <2> 	jmp svhere
  4696 000037D4 56                  <2> ans2:	push esi
  4697 000037D5 BE[660C0100]        <2> 	mov esi, buf2
  4698 000037DA E823000000          <2> 	call ansfnd
  4699 000037DF E803000000          <2> 	call anscp
  4700 000037E4 5E                  <2> 	pop esi
  4701 000037E5 EBD9                <2> 	jmp svhere
  4702 000037E7 8A06                <2> anscp:	mov al, [esi]
  4703 000037E9 8803                <2> 	mov [ebx], al
  4704 000037EB 81FE[7A0C0100]      <2> 	cmp esi, numbuf
  4705 000037F1 74CD                <2> 	je svhere
  4706 000037F3 3C00                <2> 	cmp al, 0
  4707 000037F5 74C9                <2> 	je svhere
  4708 000037F7 43                  <2> 	inc ebx
  4709 000037F8 46                  <2> 	inc esi
  4710 000037F9 EBEC                <2> 	jmp anscp
  4711 000037FB 5E                  <2> ansnf:	pop esi
  4712 000037FC 8A06                <2> 	mov al, [esi]
  4713 000037FE 8803                <2> 	mov [ebx], al
  4714 00003800 EBBE                <2> 	jmp svhere
  4715 00003802 46                  <2> ansfnd:	inc esi
  4716 00003803 81FE[790C0100]      <2> 	cmp esi, numbuf - 1
  4717 00003809 740A                <2> 	je fndans
  4718 0000380B 8A06                <2> 	mov al, [esi]
  4719 0000380D 3C00                <2> 	cmp al, 0
  4720 0000380F 74EA                <2> 	je ansnf
  4721 00003811 3C30                <2> 	cmp al, '0'
  4722 00003813 74ED                <2> 	je ansfnd
  4723                              <2> fndans:
  4724 00003815 C3                  <2> 	ret
  4725 00003816 30C0                <2> svdone:	xor al, al
  4726 00003818 8803                <2> 	mov [ebx], al
  4727 0000381A C3                  <2> 	ret
  4728                              <1> %include 'source/programs/_run.asm' ;./
  4729                              <2> 
  4730 0000381B 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4731 0000381F FF2C2E2F00          <2> 	db 255,44,"./",0
  4732                              <2> rundiskprog:
  4733 00003824 8B3D[542F0000]      <2> 	mov edi, [currentcommandloc]
  4734 0000382A 81C702000000        <2> 	add edi, 2
  4735 00003830 BE00004000          <2> 	mov esi, 0x400000
  4736 00003835 E81C2D0000          <2> 	call loadfile
  4737 0000383A 81FA94010000        <2> 	cmp edx, 404
  4738 00003840 746A                <2> 	je noprogfound
  4739 00003842 BB00004000          <2> 	mov ebx, 0x400000
  4740 00003847 A1[1B380000]        <2> 	mov eax, [elfstart]
  4741 0000384C 3903                <2> 	cmp [ebx], eax
  4742 0000384E 0F8437000000        <2> 	je near runelf
  4743 00003854 66813B4558          <2> 	cmp word [ebx], "EX"
  4744 00003859 7577                <2> 	jne progbatchfound
  4745 0000385B 81C302000000        <2> 	add ebx, 2
  4746 00003861 8B3D[542F0000]      <2> 	mov edi, [currentcommandloc]
  4747 00003867 81C702000000        <2> 	add edi, 2
  4748                              <2> findspaceprog:
  4749 0000386D 8A07                <2> 	mov al, [edi]
  4750 0000386F 47                  <2> 	inc edi
  4751 00003870 3C20                <2> 	cmp al, " "
  4752 00003872 75F9                <2> 	jne findspaceprog
  4753                              <2> findnonspaceprog:
  4754 00003874 8A07                <2> 	mov al, [edi]
  4755 00003876 47                  <2> 	inc edi
  4756 00003877 3C20                <2> 	cmp al, " "
  4757 00003879 74F9                <2> 	je findnonspaceprog
  4758 0000387B 4F                  <2> 	dec edi
  4759 0000387C 8925[E6F10000]      <2> 	mov [previousstack], esp
  4760 00003882 FFD3                <2> 	call ebx
  4761 00003884 8B25[E6F10000]      <2> 	mov esp, [previousstack]
  4762 0000388A C3                  <2> 	ret
  4763                              <2> runelf:
  4764 0000388B 8B3D[542F0000]      <2> 	mov edi, [currentcommandloc]
  4765 00003891 81C702000000        <2> 	add edi, 2
  4766 00003897 81C380000000        <2> 	add ebx, 0x80
  4767 0000389D 8925[E6F10000]      <2> 	mov [previousstack], esp
  4768 000038A3 FFD3                <2> 	call ebx
  4769 000038A5 8B25[E6F10000]      <2> 	mov esp, [previousstack]
  4770 000038AB C3                  <2> 	ret
  4771                              <2> noprogfound:
  4772 000038AC BE[3E890000]        <2> 	mov esi, notfound1
  4773 000038B1 E875E4FFFF          <2> 	call print
  4774 000038B6 8B35[542F0000]      <2> 	mov esi, [currentcommandloc]
  4775 000038BC 81C602000000        <2> 	add esi, 2
  4776 000038C2 E864E4FFFF          <2> 	call print
  4777 000038C7 BE[46890000]        <2> 	mov esi, notfound2
  4778 000038CC E85AE4FFFF          <2> 	call print
  4779 000038D1 C3                  <2> 	ret
  4780                              <2> progbatchfound:
  4781 000038D2 BF00004000          <2> 		mov edi, 0x400000
  4782 000038D7 C605[60F40000]01    <2> 		mov byte [BATCHISON], 1
  4783                              <2> 	batchrunloop:
  4784 000038DE E89BF3FFFF          <2> 		call buftxtclear
  4785 000038E3 BE[66080100]        <2> 		mov esi, buftxt
  4786 000038E8 8935[542F0000]      <2> 		mov [currentcommandloc], esi
  4787                              <2> 	batchrunloop2:
  4788 000038EE B10A                <2> 		mov cl, 10
  4789 000038F0 B50D                <2> 		mov ch, 13
  4790 000038F2 380F                <2> 		cmp [edi], cl
  4791 000038F4 0F8419000000        <2> 		je near nxtbatchrunline
  4792 000038FA 382F                <2> 		cmp [edi], ch
  4793 000038FC 0F8411000000        <2> 		je near nxtbatchrunline
  4794 00003902 803F00              <2> 		cmp byte [edi], 0
  4795 00003905 0F8408000000        <2> 		je near nxtbatchrunline
  4796 0000390B 8A07                <2> 		mov al, [edi]
  4797 0000390D 8806                <2> 		mov [esi], al
  4798 0000390F 46                  <2> 		inc esi
  4799 00003910 47                  <2> 		inc edi
  4800 00003911 EBDB                <2> 		jmp batchrunloop2
  4801                              <2> 	nxtbatchrunline:
  4802 00003913 47                  <2> 		inc edi
  4803 00003914 380F                <2> 		cmp [edi], cl
  4804 00003916 74FB                <2> 		je nxtbatchrunline
  4805 00003918 382F                <2> 		cmp [edi], ch
  4806 0000391A 74F7                <2> 		je nxtbatchrunline
  4807 0000391C 893D[7A390000]      <2> 		mov [batchedi], edi
  4808 00003922 893D[5CF40000]      <2> 		mov [BATCHPOS], edi
  4809 00003928 C60600              <2> 		mov byte [esi], 0
  4810 0000392B BE[66080100]        <2> 		mov esi, buftxt
  4811 00003930 803E00              <2> 		cmp byte [esi], 0
  4812 00003933 0F8439000000        <2> 		je near nobatchfoundrun
  4813 00003939 31DB                <2> 		xor ebx, ebx
  4814 0000393B 8A1D[F7F30000]      <2> 		mov bl, [IFON]
  4815 00003941 80FB00              <2> 		cmp bl, 0
  4816 00003944 0F8534000000        <2> 		jne near iftestbatch
  4817                              <2> 	doneiftest:
  4818 0000394A 803D[503A0000]00    <2> 		cmp byte [runnextline], 0
  4819 00003951 0F8405000000        <2> 		je near noruniftest
  4820 00003957 E822F5FFFF          <2> 		call run
  4821                              <2> 	noruniftest:
  4822 0000395C C605[503A0000]01    <2> 		mov byte [runnextline], 1
  4823 00003963 8B3D[7A390000]      <2> 		mov edi, [batchedi]
  4824 00003969 803F00              <2> 		cmp byte [edi], 0
  4825 0000396C 0F856CFFFFFF        <2> 		jne near batchrunloop
  4826                              <2> 	nobatchfoundrun:
  4827 00003972 C605[60F40000]00    <2> 		mov byte [BATCHISON], 0
  4828 00003979 C3                  <2> 		ret
  4829                              <2> 	
  4830 0000397A 00000000            <2> batchedi dd 0	
  4831                              <2> 	
  4832                              <2> 	iftestbatch:
  4833 0000397E BE[F8F30000]        <2> 		mov esi, IFTRUE
  4834 00003983 01DE                <2> 		add esi, ebx
  4835 00003985 803E00              <2> 		cmp byte [esi], 0
  4836 00003988 0F85BCFFFFFF        <2> 		jne near doneiftest
  4837 0000398E 881D[513A0000]      <2> 		mov [iffalsebuf], bl
  4838 00003994 803D[61F40000]01    <2> 		cmp byte [LOOPON], 1
  4839 0000399B 0F8513000000        <2> 		jne near fifindbatch
  4840 000039A1 E938FFFFFF          <2> 		jmp batchrunloop
  4841                              <2> 	elsetestbatch:
  4842 000039A6 C60601              <2> 		mov byte [esi], 1
  4843 000039A9 81C705000000        <2> 		add edi, 5
  4844 000039AF E92AFFFFFF          <2> 		jmp batchrunloop
  4845                              <2> 	fifindbatch:
  4846 000039B4 66B96966            <2> 		mov cx, "if"
  4847 000039B8 66B86669            <2> 		mov ax, "fi"
  4848 000039BC 663907              <2> 		cmp [edi], ax
  4849 000039BF 0F8424000000        <2> 		je near fifoundbatch
  4850 000039C5 66390F              <2> 		cmp [edi], cx
  4851 000039C8 0F8465000000        <2> 		je near iffoundbatch
  4852 000039CE 803F00              <2> 		cmp byte [edi], 0
  4853 000039D1 0F8412000000        <2> 		je near fifoundbatch
  4854 000039D7 B8656C7365          <2> 		mov eax, "else"
  4855 000039DC 3907                <2> 		cmp [edi], eax
  4856 000039DE 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4857 000039E4 E973FFFFFF          <2> 		jmp noruniftest
  4858                              <2> 	fifoundbatch:
  4859 000039E9 81C702000000        <2> 		add edi, 2
  4860 000039EF B00A                <2> 		mov al, 10
  4861 000039F1 3807                <2> 		cmp [edi], al
  4862 000039F3 0F840B000000        <2> 		je near goodfibatch
  4863 000039F9 803F00              <2> 		cmp byte [edi], 0
  4864 000039FC 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4865 00003A02 EBB0                <2> 		jmp fifindbatch
  4866                              <2> 	goodfibatch:
  4867 00003A04 B001                <2> 		mov al, 1
  4868 00003A06 2805[F7F30000]      <2> 		sub [IFON], al 
  4869 00003A0C A0[F7F30000]        <2> 		mov al, [IFON]
  4870 00003A11 8A1D[513A0000]      <2> 		mov bl, [iffalsebuf]
  4871 00003A17 38D8                <2> 		cmp al, bl
  4872 00003A19 7799                <2> 		ja fifindbatch
  4873 00003A1B 8B35[542F0000]      <2> 		mov esi, [currentcommandloc]
  4874 00003A21 81EF02000000        <2> 		sub edi, 2
  4875 00003A27 C605[503A0000]00    <2> 		mov byte [runnextline], 0
  4876 00003A2E E9ABFEFFFF          <2> 		jmp batchrunloop
  4877                              <2> 	iffoundbatch:
  4878 00003A33 B020                <2> 		mov al, ' '
  4879 00003A35 81C702000000        <2> 		add edi, 2
  4880 00003A3B 3807                <2> 		cmp [edi], al
  4881 00003A3D 0F8571FFFFFF        <2> 		jne near fifindbatch
  4882 00003A43 B001                <2> 		mov al, 1
  4883 00003A45 0005[F7F30000]      <2> 		add [IFON], al
  4884 00003A4B E964FFFFFF          <2> 		jmp fifindbatch
  4885                              <2> 		
  4886                              <2> 		
  4887 00003A50 01                  <2> runnextline db 1
  4888 00003A51 00                  <2> iffalsebuf db 0
  4889 00003A52 C3                  <2> notbatch: ret 
  4890                              <1> %ifdef network.included
  4891                              <1> 	%include 'source/programs/arp.asm'
  4892 00003A53 FF2C61727000        <2> db 255,44,"arp",0
  4893                              <2> 	;ARP TESTING
  4894                              <2> arptest:
  4895 00003A59 8B35[542F0000]      <2> 	mov esi, [currentcommandloc]
  4896 00003A5F 81C604000000        <2> 	add esi, 4
  4897 00003A65 E8D94D0000          <2> 	call strtoip
  4898 00003A6A 890D[113B0000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4899 00003A70 E8144E0000          <2> 	call showip
  4900 00003A75 803D[153B0000]01    <2> 	cmp byte [arpconfig], 1
  4901 00003A7C 7405                <2> 	je arptest2
  4902 00003A7E E841000000          <2> 	call arpinit
  4903                              <2> arptest2:	;try to reach 192.168.0.1
  4904 00003A83 8B0D[30890000]      <2> 	mov ecx, [sysmac]
  4905 00003A89 668B1D[34890000]    <2> 	mov bx, [sysmac + 4]
  4906 00003A90 890D[F13A0000]      <2> 	mov [sourcemac], ecx
  4907 00003A96 66891D[F53A0000]    <2> 	mov [sourcemac + 4],bx
  4908 00003A9D 890D[013B0000]      <2> 	mov [arpsenderinfo], ecx
  4909 00003AA3 66891D[053B0000]    <2> 	mov [arpsenderinfo + 4], bx
  4910 00003AAA BF[EB3A0000]        <2> 	mov edi, frame
  4911 00003AAF BE[153B0000]        <2> 	mov esi, framend
  4912 00003AB4 E8584D0000          <2> 	call sendpacket
  4913 00003AB9 BE[77890000]        <2> 	mov esi, line
  4914 00003ABE E868E2FFFF          <2> 	call print
  4915 00003AC3 C3                  <2> 	ret
  4916                              <2> 	
  4917                              <2> arpinit:
  4918 00003AC4 BE[163B0000]        <2> 	mov esi, arptable
  4919 00003AC9 BF[30890000]        <2> 	mov edi, sysmac
  4920 00003ACE BB[2C890000]        <2> 	mov ebx, sysip
  4921 00003AD3 8B0F                <2> 	mov ecx, [edi]
  4922 00003AD5 890E                <2> 	mov [esi], ecx
  4923 00003AD7 668B4F04            <2> 	mov cx, [edi + 4]
  4924 00003ADB 894E04              <2> 	mov [esi + 4], ecx
  4925 00003ADE 8B0B                <2> 	mov ecx, [ebx]
  4926 00003AE0 894E06              <2> 	mov [esi + 6], ecx
  4927 00003AE3 C605[153B0000]01    <2> 	mov byte [arpconfig], 1
  4928 00003AEA C3                  <2> 	ret
  4929                              <2> 	
  4930                              <2> ;example frame
  4931                              <2> frame:
  4932 00003AEB FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4933 00003AF1 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4934 00003AF7 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4935                              <2> 	;;example packet
  4936 00003AF9 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4937 00003AFB 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4938 00003AFD 0604                <2> 					db 6,4			;length of mac, length of ip
  4939 00003AFF 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4940 00003B01 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4941 00003B07 C0A80073            <2> 					db 192,168,0,115		;ip
  4942 00003B0B 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4943 00003B11 C0A80000            <2> 					db 192,168,0,0			;ip
  4944                              <2> framend:
  4945                              <2> 
  4946 00003B15 00                  <2> arpconfig db 0
  4947                              <2> arptable:	;;mac,ip
  4948 00003B16 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4949 00003B1F 00<rept>            <2>
  4950                              <2> arptableend:	
  4951                              <1> %endif
  4952                              <1> %include 'source/programs/batch.asm'
  4953 00003B7A FF2C626174636800    <2> db 255,44,"batch",0
  4954                              <2> 	batchst: 
  4955 00003B82 8B3D[542F0000]      <2> 		mov edi, [currentcommandloc]
  4956 00003B88 81C706000000        <2> 		add edi, 6
  4957 00003B8E 803F00              <2> 		cmp byte [edi], 0
  4958 00003B91 0F846D000000        <2> 		je near nonamefound
  4959 00003B97 BE00004000          <2> 		mov esi, 0x400000
  4960 00003B9C E8B5290000          <2> 		call loadfile
  4961 00003BA1 89D0                <2> 		mov eax, edx
  4962 00003BA3 3D94010000          <2> 		cmp eax, 404
  4963 00003BA8 7465                <2> 		je goodbatchname
  4964 00003BAA BE[B53B0000]        <2> 		mov esi, badbatchname
  4965 00003BAF E877E1FFFF          <2> 		call print
  4966 00003BB4 C3                  <2> 		ret
  4967 00003BB5 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4968 00003BBE 20616C726561647920- <2>
  4969 00003BC7 657869737473210A00  <2>
  4970 00003BD0 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4971 00003BD9 746F20747970652061- <2>
  4972 00003BE2 206E616D6520616674- <2>
  4973 00003BEB 65722074686520636F- <2>
  4974 00003BF4 6D6D616E642E0A00    <2>
  4975 00003BFC 00000000            <2> 		esicache3 dd 0
  4976 00003C00 00000000            <2> 		esicache2 dd 0
  4977                              <2> 	nonamefound:
  4978 00003C04 BE[D03B0000]        <2> 		mov esi, namenotfoundbatch
  4979 00003C09 E81DE1FFFF          <2> 		call print
  4980 00003C0E C3                  <2> 		ret
  4981                              <2> 	goodbatchname:
  4982 00003C0F BE00004000          <2> 		mov esi, 0x400000
  4983                              <2> 	batchcreate:
  4984 00003C14 8935[FC3B0000]      <2> 		mov [esicache3], esi
  4985 00003C1A BF00008000          <2> 		mov edi, 0x800000
  4986 00003C1F B00A                <2> 		mov al, 10
  4987 00003C21 B307                <2> 		mov bl, 7
  4988 00003C23 B404                <2> 		mov ah, 4
  4989 00003C25 CD30                <2> 		int 30h
  4990 00003C27 8935[003C0000]      <2> 		mov [esicache2], esi
  4991 00003C2D 8A0E                <2> 		mov cl, [esi]
  4992 00003C2F 8B35[FC3B0000]      <2> 		mov esi, [esicache3]
  4993 00003C35 BB[693C0000]        <2> 		mov ebx, exitword
  4994 00003C3A E854F3FFFF          <2> 		call cndtest
  4995 00003C3F 3C01                <2> 		cmp al, 1
  4996 00003C41 7411                <2> 		je endbatchcreate
  4997 00003C43 3C02                <2> 		cmp al, 2
  4998 00003C45 740D                <2> 		je endbatchcreate
  4999 00003C47 8B35[003C0000]      <2> 		mov esi, [esicache2]
  5000 00003C4D B00A                <2> 		mov al, 10
  5001 00003C4F 8806                <2> 		mov [esi], al
  5002 00003C51 46                  <2> 		inc esi
  5003 00003C52 EBC0                <2> 		jmp batchcreate
  5004                              <2> 	endbatchcreate:
  5005 00003C54 8B35[FC3B0000]      <2> 		mov esi, [esicache3]
  5006 00003C5A 31C0                <2> 		xor eax, eax
  5007 00003C5C 8806                <2> 		mov [esi], al
  5008 00003C5E BE00004000          <2> 		mov esi, 0x400000
  5009 00003C63 E8C3E0FFFF          <2> 		call print
  5010 00003C68 C3                  <2> 		ret
  5011                              <2> 	
  5012 00003C69 5C7800              <2> 	exitword db "\x",0
  5013 00003C6C 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  5014 00003C75 6F20657869742E0A00  <2>
  5015                              <1> %ifdef gui.background
  5016                              <1> 	%include 'source/programs/background.asm'
  5017                              <1> %endif
  5018                              <1> %include 'source/programs/beep.asm'
  5019 00003C7E FF2C6265657000      <2> 	db 255,44,"beep",0
  5020                              <2> beep:
  5021 00003C85 B8[AA3C0000]        <2> 	mov eax, beepstart
  5022 00003C8A A3[6B020000]        <2> 	mov [soundpos], eax
  5023 00003C8F B8[AE3C0000]        <2> 	mov eax, beepend
  5024 00003C94 A3[6F020000]        <2> 	mov [soundendpos], eax
  5025 00003C99 C605[68020000]01    <2> 	mov byte [soundon], 1
  5026                              <2> waitforsoundendbeep:
  5027 00003CA0 A0[68020000]        <2> 	mov al, [soundon]
  5028 00003CA5 3C00                <2> 	cmp al, 0
  5029 00003CA7 75F7                <2> 	jne waitforsoundendbeep
  5030 00003CA9 C3                  <2> 	ret
  5031                              <2> 	
  5032                              <2> beepstart:
  5033 00003CAA 3200D111            <2> 	dw 50, 4561
  5034                              <2> beepend:
  5035                              <1> %include 'source/programs/cd.asm'
  5036 00003CAE FF2C636400          <2> db 255,44,"cd",0
  5037                              <2> cd:
  5038 00003CB3 8B35[542F0000]      <2> 	mov esi, [currentcommandloc]
  5039 00003CB9 81C603000000        <2> 	add esi, 3
  5040 00003CBF 8B3D[EEF10000]      <2> 	mov edi, [currentfolderloc]
  5041 00003CC5 893D[EAF10000]      <2> 	mov [lastfolderloc], edi
  5042 00003CCB 81C7[F2F10000]      <2> 	add edi, currentfolder
  5043 00003CD1 4F                  <2> 	dec edi
  5044 00003CD2 66813E2E2E          <2> 	cmp word [esi], ".."
  5045 00003CD7 742A                <2> 	je .moveup
  5046 00003CD9 47                  <2> 	inc edi
  5047                              <2> .movedown:
  5048 00003CDA 8A06                <2> 	mov al, [esi]
  5049 00003CDC 8807                <2> 	mov [edi], al
  5050 00003CDE 47                  <2> 	inc edi
  5051 00003CDF 46                  <2> 	inc esi
  5052 00003CE0 3C00                <2> 	cmp al, 0
  5053 00003CE2 740A                <2> 	je .donecd
  5054 00003CE4 81FF[F2F30000]      <2> 	cmp edi, currentfolderend
  5055 00003CEA 72EE                <2> 	jb .movedown
  5056 00003CEC 30C0                <2> 	xor al, al
  5057                              <2> .donecd:
  5058 00003CEE 4F                  <2> 	dec edi
  5059 00003CEF C6072F              <2> 	mov byte [edi], '/'
  5060 00003CF2 47                  <2> 	inc edi
  5061 00003CF3 C60700              <2> 	mov byte [edi], 0
  5062 00003CF6 81EF[F2F10000]      <2> 	sub edi, currentfolder
  5063 00003CFC 893D[EEF10000]      <2> 	mov [currentfolderloc], edi
  5064 00003D02 C3                  <2> 	ret
  5065                              <2> .moveup:
  5066 00003D03 31C0                <2> 	xor eax, eax
  5067 00003D05 A3[EAF10000]        <2> 	mov [lastfolderloc], eax
  5068                              <2> .moveuploop:
  5069 00003D0A 4F                  <2> 	dec edi
  5070 00003D0B 8A07                <2> 	mov al, [edi]
  5071 00003D0D 81FF[F2F10000]      <2> 	cmp edi, currentfolder
  5072 00003D13 763B                <2> 	jbe .moveupover
  5073 00003D15 3C2F                <2> 	cmp al, '/'
  5074 00003D17 75F1                <2> 	jne .moveuploop
  5075 00003D19 C6072F              <2> 	mov byte [edi], '/'
  5076 00003D1C 47                  <2> 	inc edi
  5077 00003D1D C60700              <2> 	mov byte [edi], 0
  5078 00003D20 81EF[F2F10000]      <2> 	sub edi, currentfolder
  5079 00003D26 893D[EEF10000]      <2> 	mov [currentfolderloc], edi
  5080 00003D2C 81C7[F2F10000]      <2> 	add edi, currentfolder
  5081 00003D32 4F                  <2> 	dec edi
  5082                              <2> .lastfolder:
  5083 00003D33 4F                  <2> 	dec edi
  5084 00003D34 8A07                <2> 	mov al, [edi]
  5085 00003D36 81FF[F2F10000]      <2> 	cmp edi, currentfolder
  5086 00003D3C 7604                <2> 	jbe .donemoveup
  5087 00003D3E 3C2F                <2> 	cmp al, '/'
  5088 00003D40 75F1                <2> 	jne .lastfolder
  5089                              <2> .donemoveup:
  5090 00003D42 47                  <2> 	inc edi
  5091 00003D43 81EF[F2F10000]      <2> 	sub edi, currentfolder
  5092 00003D49 893D[EAF10000]      <2> 	mov [lastfolderloc], edi
  5093 00003D4F C3                  <2> 	ret
  5094                              <2> .moveupover:
  5095 00003D50 BF[F2F10000]        <2> 	mov edi, currentfolder
  5096 00003D55 C6072F              <2> 	mov byte [edi], '/'
  5097 00003D58 47                  <2> 	inc edi
  5098 00003D59 C60700              <2> 	mov byte [edi], 0
  5099 00003D5C 31C0                <2> 	xor eax, eax
  5100 00003D5E A3[EAF10000]        <2> 	mov [lastfolderloc], eax
  5101 00003D63 40                  <2> 	inc eax
  5102 00003D64 A3[EEF10000]        <2> 	mov [currentfolderloc], eax
  5103 00003D69 C3                  <2> 	ret
  5104                              <1> %include 'source/programs/charmap.asm'
  5105 00003D6A 00                  <2> charmapnum db 0
  5106 00003D6B FF2C636861726D6170- <2> db 255,44,"charmap",0
  5107 00003D74 00                  <2>
  5108 00003D75 66BB0700            <2> 	mov bx, 7
  5109 00003D79 66B82000            <2> 	mov ax, " "
  5110 00003D7D C605[6A3D0000]00    <2> 	mov byte [charmapnum], 0
  5111 00003D84 E80BE6FFFF          <2> 	call prcharq
  5112 00003D89 E806E6FFFF          <2> 	call prcharq
  5113 00003D8E E801E6FFFF          <2> 	call prcharq
  5114 00003D93 E8FCE5FFFF          <2> 	call prcharq
  5115 00003D98 66B83000            <2> 	mov ax, "0"
  5116                              <2> charmapnumprnt:
  5117 00003D9C E8F3E5FFFF          <2> 	call prcharq
  5118 00003DA1 6640                <2> 	inc ax
  5119 00003DA3 6650                <2> 	push ax
  5120 00003DA5 66B82000            <2> 	mov ax, " "
  5121 00003DA9 E8E6E5FFFF          <2> 	call prcharq
  5122 00003DAE 6658                <2> 	pop ax
  5123 00003DB0 663D3900            <2> 	cmp ax, "9"
  5124 00003DB4 76E6                <2> 	jbe charmapnumprnt
  5125 00003DB6 66B84100            <2> 	mov ax, "A"
  5126                              <2> charmapnumprnt2:
  5127 00003DBA E8D5E5FFFF          <2> 	call prcharq
  5128 00003DBF 6640                <2> 	inc ax
  5129 00003DC1 6650                <2> 	push ax
  5130 00003DC3 66B82000            <2> 	mov ax, " "
  5131 00003DC7 E8C8E5FFFF          <2> 	call prcharq
  5132 00003DCC 6658                <2> 	pop ax
  5133 00003DCE 663D4700            <2> 	cmp ax, "G"
  5134 00003DD2 72E6                <2> 	jb charmapnumprnt2
  5135                              <2> 	
  5136 00003DD4 BE[77890000]        <2> 	mov esi, line
  5137 00003DD9 E82EDFFFFF          <2> 	call printquiet
  5138 00003DDE 6631C0              <2> 	xor ax, ax
  5139 00003DE1 6689C1              <2> 	mov cx, ax
  5140 00003DE4 E87EF3FFFF          <2> 	call showhexsmall
  5141 00003DE9 E970000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5142                              <2> charmapcopy:
  5143 00003DEE 6640                <2> 	inc ax
  5144 00003DF0 6650                <2> 	push ax
  5145 00003DF2 663D0800            <2> 	cmp ax, 8
  5146 00003DF6 7466                <2> 	je charmapnocopy
  5147 00003DF8 663D0900            <2> 	cmp ax, 9
  5148 00003DFC 7460                <2> 	je charmapnocopy
  5149 00003DFE 663D0A00            <2> 	cmp ax, 10
  5150 00003E02 745A                <2> 	je charmapnocopy
  5151 00003E04 663D0D00            <2> 	cmp ax, 13
  5152 00003E08 7454                <2> 	je charmapnocopy
  5153 00003E0A 663DFF00            <2> 	cmp ax, 255
  5154 00003E0E 744E                <2> 	je charmapnocopy
  5155 00003E10 663D0001            <2> 	cmp ax, 256
  5156 00003E14 7443                <2> 	je nomorecharmap
  5157 00003E16 E879E5FFFF          <2> 	call prcharq
  5158 00003E1B 66B82000            <2> 	mov ax, " "
  5159 00003E1F E870E5FFFF          <2> 	call prcharq
  5160 00003E24 6658                <2> 	pop ax
  5161                              <2> charmapcopycheck:
  5162 00003E26 FE05[6A3D0000]      <2> 	inc byte [charmapnum]
  5163 00003E2C 803D[6A3D0000]10    <2> 	cmp byte [charmapnum], 16
  5164 00003E33 72B9                <2> 	jb charmapcopy
  5165 00003E35 6650                <2> 	push ax
  5166 00003E37 BE[77890000]        <2> 	mov esi, line
  5167 00003E3C E8CBDEFFFF          <2> 	call printquiet
  5168 00003E41 6658                <2> 	pop ax
  5169 00003E43 3CFF                <2> 	cmp al, 255
  5170 00003E45 7412                <2> 	je nomorecharmap
  5171 00003E47 88C1                <2> 	mov cl, al
  5172 00003E49 FEC1                <2> 	inc cl
  5173 00003E4B E817F3FFFF          <2> 	call showhexsmall
  5174 00003E50 C605[6A3D0000]00    <2> 	mov byte [charmapnum], 0
  5175 00003E57 EB95                <2> 	jmp charmapcopy
  5176                              <2> nomorecharmap:
  5177 00003E59 E943EEFFFF          <2> 	jmp nwcmd
  5178                              <2> charmapnocopy:
  5179 00003E5E 6650                <2> 	push ax
  5180 00003E60 66B82000            <2> 	mov ax, " "
  5181 00003E64 E82BE5FFFF          <2> 	call prcharq
  5182 00003E69 E826E5FFFF          <2> 	call prcharq
  5183 00003E6E 6658                <2> 	pop ax
  5184 00003E70 EBB4                <2> 	jmp charmapcopycheck
  5185                              <1> %ifdef gui.included
  5186                              <1> 	%include 'source/programs/circle.asm'
  5187 00003E72 FF2C636972636C6500  <2> db 255,44,"circle",0
  5188                              <2> circle:
  5189 00003E7B 8B35[542F0000]      <2> 	mov esi, [currentcommandloc]
  5190 00003E81 81C607000000        <2> 	add esi, 7
  5191 00003E87 66B91000            <2> 	mov cx, 16
  5192 00003E8B 30C0                <2> 	xor al, al
  5193 00003E8D 3806                <2> 	cmp [esi], al
  5194 00003E8F 7405                <2> 	je .nocmdline
  5195 00003E91 E891F4FFFF          <2> 	call cnvrttxt
  5196                              <2> .nocmdline:
  5197 00003E96 E8C5080000          <2> 	call linetester.stime
  5198 00003E9B E857000000          <2> 	call fcircle.nocmdline
  5199 00003EA0 E8D3080000          <2> 	call linetester.etime
  5200 00003EA5 53                  <2> 	push ebx
  5201 00003EA6 57                  <2> 	push edi
  5202 00003EA7 E859E4FFFF          <2> 	call getchar
  5203 00003EAC 59                  <2> 	pop ecx
  5204 00003EAD E893F3FFFF          <2> 	call showdec
  5205 00003EB2 BE[06480000]        <2> 	mov esi, linetester.msgcircle
  5206 00003EB7 E850DEFFFF          <2> 	call printquiet
  5207 00003EBC 59                  <2> 	pop ecx
  5208 00003EBD E883F3FFFF          <2> 	call showdec
  5209 00003EC2 BE[1D480000]        <2> 	mov esi, linetester.msgtime
  5210 00003EC7 E840DEFFFF          <2> 	call printquiet
  5211 00003ECC E80E2F0000          <2> 	call reloadallgraphics
  5212 00003ED1 C3                  <2> 	ret
  5213                              <2> 	
  5214 00003ED2 FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5215 00003EDB 00                  <2>
  5216                              <2> fcircle:	
  5217 00003EDC 8B35[542F0000]      <2> 	mov esi, [currentcommandloc]
  5218 00003EE2 81C608000000        <2> 	add esi, 8
  5219 00003EE8 66B91000            <2> 	mov cx, 16
  5220 00003EEC 30C0                <2> 	xor al, al
  5221 00003EEE 3806                <2> 	cmp [esi], al
  5222 00003EF0 7405                <2> 	je .nocmdline
  5223 00003EF2 E830F4FFFF          <2> 	call cnvrttxt
  5224                              <2> .nocmdline:
  5225 00003EF7 6689C8              <2> 	mov ax, cx
  5226 00003EFA 66D1E1              <2> 	shl cx, 1
  5227 00003EFD 6689CA              <2> 	mov dx, cx
  5228 00003F00 663B15[07570000]    <2> 	cmp dx, [resolutionx]
  5229 00003F07 731B                <2> 	jae .done
  5230 00003F09 663B0D[09570000]    <2> 	cmp cx, [resolutiony]
  5231 00003F10 7312                <2> 	jae .done
  5232 00003F12 668B35[66020000]    <2> 	mov si, [timenanoseconds + 2]
  5233 00003F19 31FF                <2> 	xor edi, edi
  5234 00003F1B 803D[9CDB0000]01    <2> 	cmp byte [guion], 1
  5235 00003F22 7401                <2> 	je .lp
  5236 00003F24 C3                  <2> .done ret
  5237                              <2> .lp:
  5238 00003F25 6629C2              <2> 	sub dx, ax
  5239 00003F28 6629C1              <2> 	sub cx, ax
  5240 00003F2B 60                  <2> 	pusha
  5241 00003F2C E8CD290000          <2> 	call fillcircle
  5242 00003F31 61                  <2> 	popa
  5243 00003F32 47                  <2> 	inc edi
  5244 00003F33 660335[64020000]    <2> 	add si, [timenanoseconds]
  5245 00003F3A 6601C2              <2> 	add dx, ax
  5246 00003F3D 6601C2              <2> 	add dx, ax
  5247 00003F40 6601C2              <2> 	add dx, ax
  5248 00003F43 6601C1              <2> 	add cx, ax
  5249 00003F46 663B15[07570000]    <2> 	cmp dx, [resolutionx]
  5250 00003F4D 72D6                <2> 	jb .lp
  5251 00003F4F 6689C2              <2> 	mov dx, ax
  5252 00003F52 6601C2              <2> 	add dx, ax
  5253 00003F55 6601C1              <2> 	add cx, ax
  5254 00003F58 6601C1              <2> 	add cx, ax
  5255 00003F5B 663B0D[09570000]    <2> 	cmp cx, [resolutiony]
  5256 00003F62 72C1                <2> 	jb .lp
  5257 00003F64 C3                  <2> 	ret
  5258                              <1> %endif
  5259                              <1> %include 'source/programs/clear.asm'
  5260 00003F65 FF2C636C65617200    <2> db 255,44,"clear",0
  5261 00003F6D E862DEFFFF          <2> 		call clear
  5262 00003F72 C3                  <2> 		ret 
  5263                              <1> %include 'source/programs/cpuid.asm'
  5264 00003F73 FF2C637075696400    <2> db 255,44,"cpuid",0
  5265 00003F7B 31C0                <2> 	xor eax, eax
  5266 00003F7D 0FA2                <2> 	cpuid
  5267 00003F7F 891D[D03F0000]      <2> 	mov [cpuidbuf], ebx
  5268 00003F85 8915[D43F0000]      <2> 	mov [cpuidbuf + 4], edx
  5269 00003F8B 890D[D83F0000]      <2> 	mov [cpuidbuf + 8], ecx
  5270 00003F91 BE[D03F0000]        <2> 	mov esi, cpuidbuf
  5271 00003F96 E890DDFFFF          <2> 	call print
  5272 00003F9B BE[77890000]        <2> 	mov esi, line
  5273 00003FA0 E886DDFFFF          <2> 	call print
  5274 00003FA5 B801000000          <2> 	mov eax, 1
  5275 00003FAA 0FA2                <2> 	cpuid
  5276 00003FAC 89C1                <2> 	mov ecx, eax
  5277 00003FAE C605[66310000]02    <2> 	mov byte [firsthexshown], 2
  5278 00003FB5 E8C1F1FFFF          <2> 	call showhex
  5279 00003FBA B808000080          <2> 	mov eax, 0x80000008
  5280 00003FBF 0FA2                <2> 	cpuid
  5281 00003FC1 89C1                <2> 	mov ecx, eax
  5282 00003FC3 C605[66310000]02    <2> 	mov byte [firsthexshown], 2
  5283 00003FCA E8ACF1FFFF          <2> 	call showhex
  5284 00003FCF C3                  <2> 	ret
  5285                              <2> 	
  5286 00003FD0 00<rept>            <2> cpuidbuf times 13 db 0
  5287                              <2> cpuidvendorend:
  5288                              <1> %ifdef network.included
  5289                              <1> 	%include 'source/programs/dhcp.asm'
  5290 00003FDD FF2C6468637000      <2> db 255,44,"dhcp",0
  5291                              <2> dhcp:
  5292 00003FE4 BE[A4400000]        <2> 	mov esi, .dhcp.mac
  5293 00003FE9 BB[84410000]        <2> 	mov ebx, .dhcp.option.mac
  5294 00003FEE BF[64400000]        <2> 	mov edi, .mac
  5295 00003FF3 31C9                <2> 	xor ecx, ecx
  5296 00003FF5 66890D[76400000]    <2> 	mov [.ip.checksum], cx
  5297 00003FFC 66890D[86400000]    <2> 	mov [.udp.checksum], cx
  5298 00004003 8B0D[30890000]      <2> 	mov ecx, [sysmac]
  5299 00004009 890B                <2> 	mov [ebx], ecx
  5300 0000400B 890F                <2> 	mov [edi], ecx
  5301 0000400D 890E                <2> 	mov [esi], ecx
  5302 0000400F 668B0D[34890000]    <2> 	mov cx, [sysmac + 4]
  5303 00004016 66894B04            <2> 	mov [ebx + 4], cx
  5304 0000401A 66894E04            <2> 	mov [esi + 4], cx
  5305 0000401E 66894F04            <2> 	mov [edi + 4], cx
  5306 00004022 BF[6C400000]        <2> 	mov edi, .ip.header
  5307 00004027 BE[80400000]        <2> 	mov esi, .ip.headerend
  5308 0000402C E8EA470000          <2> 	call getchecksum
  5309 00004031 66890D[76400000]    <2> 	mov [.ip.checksum], cx
  5310 00004038 BF[80400000]        <2> 	mov edi, .udp.header
  5311 0000403D BE[9B410000]        <2> 	mov esi, .udp.end
  5312 00004042 E8D4470000          <2> 	call getchecksum
  5313 00004047 66890D[86400000]    <2> 	mov [.udp.checksum], cx
  5314 0000404E BF[5E400000]        <2> 	mov edi, .frame
  5315 00004053 BE[9B410000]        <2> 	mov esi, .udp.end
  5316 00004058 E8B4470000          <2> 	call sendpacket
  5317 0000405D C3                  <2> 	ret
  5318                              <2> .frame:
  5319 0000405E FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5320 00004064 000000000000        <2> 	.mac db 0,0,0,0,0,0
  5321 0000406A 0800                <2> 	db 8,0
  5322                              <2> .ip.header:
  5323 0000406C 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  5324 0000406D 00                  <2> 	db 0
  5325 0000406E 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header)
  5326 00004070 0000                <2> 	dw 0
  5327 00004072 0000                <2> 	dw 0
  5328 00004074 80                  <2> 	db 0x80
  5329 00004075 11                  <2> 	db 17
  5330 00004076 0000                <2> .ip.checksum dw 0
  5331 00004078 00000000            <2> 	db 0,0,0,0
  5332 0000407C FFFFFFFF            <2> 	db 255,255,255,255	
  5333                              <2> .ip.headerend:
  5334                              <2> .udp.header:
  5335 00004080 0044                <2> 	db 0,68	;source port
  5336 00004082 0043                <2> 	db 0,67 ;destination port
  5337 00004084 011B                <2> 	db (.udp.end - .udp.header)/256, (.udp.end - .udp.header)
  5338 00004086 0000                <2> .udp.checksum dw 0
  5339                              <2> .udp.headerend:
  5340                              <2> .dhcp.data:
  5341 00004088 01                  <2> 	db 1	;message type
  5342 00004089 01                  <2> 	db 1	;hardware type
  5343 0000408A 06                  <2> 	db 6	;hardware address length
  5344 0000408B 00                  <2> 	db 0	;hops
  5345 0000408C EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  5346 00004090 0000                <2> 	db 0,0	;seconds elapsed
  5347 00004092 0000                <2> 	db 0,0	;flags
  5348 00004094 00000000            <2> 	db 0,0,0,0	;client ip address
  5349 00004098 00000000            <2> 	db 0,0,0,0	;your ip address
  5350 0000409C 00000000            <2> 	db 0,0,0,0	;server ip address
  5351 000040A0 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  5352 000040A4 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  5353 000040AA 00<rept>            <2> 	times 10 db 0	;padding
  5354 000040B4 00<rept>            <2> 	times 64 db 0	;server host name
  5355 000040F4 00<rept>            <2> 	times 128 db 0	;boot file name
  5356 00004174 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  5357                              <2> .dhcp.option.type:
  5358 00004178 350103              <2> 	db 53,1,3	;DHCP Request
  5359 0000417B 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  5360 00004181 3D07                <2> 	db 61,7 ;client id(mac)
  5361 00004183 01                  <2> 	db 1	;Type=Ethernet
  5362 00004184 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  5363 0000418A 0C08                <2> 	db 12,8 ;host name
  5364 0000418C 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  5365 00004194 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  5366 0000419A FF                  <2> 	db 0xFF	;end DHCP options
  5367                              <2> .dhcp.end:
  5368                              <2> .udp.end:
  5369                              <2> 	
  5370                              <1> %endif
  5371                              <1> %ifdef disk.none
  5372                              <1> %else
  5373                              <1> 	%include 'source/programs/dos.asm'
  5374 0000419B FF2C646F7300        <2> db 255,44,"dos",0
  5375                              <2> dosrunner:
  5376 000041A1 8925[E6F10000]      <2> 	mov [previousstack], esp
  5377 000041A7 8B3D[542F0000]      <2> 	mov edi, [currentcommandloc]
  5378 000041AD 81C704000000        <2> 	add edi, 4
  5379 000041B3 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5380 000041B8 E899230000          <2> 	call loadfile
  5381 000041BD 8B3D[542F0000]      <2> 	mov edi, [currentcommandloc]
  5382 000041C3 81C704000000        <2> 	add edi, 4
  5383 000041C9 81FA94010000        <2> 	cmp edx, 404
  5384 000041CF 0F845E000000        <2> 	je near .noprogfound
  5385 000041D5 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5386 000041DA 31C9                <2> 	xor ecx, ecx
  5387                              <2> .findparams:
  5388 000041DC 47                  <2> 	inc edi
  5389 000041DD 8A07                <2> 	mov al, [edi]
  5390 000041DF 3C20                <2> 	cmp al, " "
  5391 000041E1 75F9                <2> 	jne .findparams
  5392                              <2> .copyparams:
  5393 000041E3 8A07                <2> 	mov al, [edi]
  5394 000041E5 8803                <2> 	mov [ebx], al
  5395 000041E7 43                  <2> 	inc ebx
  5396 000041E8 47                  <2> 	inc edi
  5397 000041E9 41                  <2> 	inc ecx
  5398 000041EA 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5399 000041F0 7304                <2> 	jae .nomoreparams
  5400 000041F2 3C00                <2> 	cmp al, 0
  5401 000041F4 75ED                <2> 	jne .copyparams
  5402                              <2> .nomoreparams:
  5403 000041F6 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5404 000041FC 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5405 00004200 8ED8                <2> 	mov ds, ax
  5406 00004202 8EC0                <2> 	mov es, ax
  5407 00004204 8EE0                <2> 	mov fs, ax
  5408 00004206 8EE8                <2> 	mov gs, ax
  5409 00004208 31C0                <2> 	xor eax, eax
  5410 0000420A 31DB                <2> 	xor ebx, ebx
  5411 0000420C 31C9                <2> 	xor ecx, ecx
  5412 0000420E 31D2                <2> 	xor edx, edx
  5413 00004210 31FF                <2> 	xor edi, edi
  5414 00004212 31F6                <2> 	xor esi, esi
  5415 00004214 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5416 0000421B 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5417 0000421F 6689DA              <2> 	mov dx, bx
  5418 00004222 8EC3                <2> 	mov es, bx
  5419 00004224 8EE3                <2> 	mov fs, bx
  5420 00004226 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5421 0000422A 8EEB                <2> 	mov gs, bx
  5422 0000422C 8B25[E6F10000]      <2> 	mov esp, [previousstack]
  5423 00004232 C3                  <2> 	ret
  5424                              <2> .noprogfound:
  5425 00004233 BE[3E890000]        <2> 	mov esi, notfound1
  5426 00004238 E8EEDAFFFF          <2> 	call print
  5427 0000423D 8B35[542F0000]      <2> 	mov esi, [currentcommandloc]
  5428 00004243 81C604000000        <2> 	add esi, 4
  5429 00004249 E8DDDAFFFF          <2> 	call print
  5430 0000424E BE[46890000]        <2> 	mov esi, notfound2
  5431 00004253 E8D3DAFFFF          <2> 	call print
  5432 00004258 C3                  <2> 	ret
  5433                              <2> 	
  5434                              <1> %endif
  5435                              <1> %include 'source/programs/dump.asm'
  5436 00004259 FF2C64756D7000      <2> db 255,44,"dump",0
  5437 00004260 8B35[542F0000]      <2> 	mov esi, [currentcommandloc]
  5438 00004266 81C605000000        <2> 	add esi, 5
  5439 0000426C 31C9                <2> 	xor ecx, ecx
  5440 0000426E 66B83078            <2> 	mov ax, "0x"
  5441 00004272 663906              <2> 	cmp [esi], ax
  5442 00004275 740A                <2> 	je dumphexin
  5443 00004277 E8ABF0FFFF          <2> 	call cnvrttxt
  5444 0000427C E910000000          <2> 	jmp dumphexnow
  5445                              <2> dumphexin:
  5446 00004281 81C602000000        <2> 	add esi, 2
  5447 00004287 E852F0FFFF          <2> 	call cnvrthextxt
  5448 0000428C E900000000          <2> 	jmp dumphexnow
  5449                              <2> dumphexnow:
  5450 00004291 89CF                <2> 	mov edi, ecx
  5451 00004293 89FE                <2> 	mov esi, edi
  5452 00004295 81C680030000        <2> 	add esi, 896
  5453                              <2> dumphexloop:
  5454 0000429B 8B0F                <2> 	mov ecx, [edi]
  5455 0000429D C605[66310000]05    <2> 	mov byte [firsthexshown],5
  5456 000042A4 E8D2EEFFFF          <2> 	call showhex
  5457 000042A9 81C704000000        <2> 	add edi, 4
  5458 000042AF 39F7                <2> 	cmp edi, esi
  5459 000042B1 72E8                <2> 	jb dumphexloop
  5460 000042B3 E8A5E5FFFF          <2> 	call termcopy
  5461 000042B8 C3                  <2> 	ret 
  5462                              <1> %include 'source/programs/echo.asm'
  5463                              <2> 
  5464 000042B9 FF2C6563686F00      <2> db 255,44,"echo",0
  5465                              <2> 	echoprog:
  5466 000042C0 8B35[542F0000]      <2> 		mov esi, [currentcommandloc]
  5467 000042C6 81C605000000        <2> 		add esi, 5
  5468 000042CC 8A06                <2> 		mov al, [esi]
  5469 000042CE E858DAFFFF          <2> 		call print
  5470 000042D3 BE[77890000]        <2> 		mov esi, line
  5471 000042D8 E84EDAFFFF          <2> 		call print
  5472 000042DD C3                  <2> 		ret
  5473 000042DE BB[66F40000]        <2> 	echovr:	mov ebx, variables
  5474 000042E3 BF06000000          <2> 		mov edi, 6
  5475 000042E8 E83C000000          <2> 		call nxtvrech
  5476 000042ED E954000000          <2> 		jmp prntvr2
  5477 000042F2 B13D                <2> 	echvar:	mov cl, '='
  5478 000042F4 43                  <2> 		inc ebx
  5479 000042F5 8A03                <2> 		mov al, [ebx]
  5480 000042F7 3C00                <2> 		cmp al, 0
  5481 000042F9 742E                <2> 		je nxtvrech
  5482 000042FB 3C3D                <2> 		cmp al, '='
  5483 000042FD 7422                <2> 		je nxtvrechb1
  5484 000042FF 8B35[542F0000]      <2> 		mov esi, [currentcommandloc]
  5485 00004305 01FE                <2> 		add esi, edi
  5486 00004307 E887ECFFFF          <2> 		call cndtest
  5487 0000430C 3C02                <2> 		cmp al, 2
  5488 0000430E 7432                <2> 		je prntvr
  5489 00004310 3C01                <2> 		cmp al, 1
  5490 00004312 742E                <2> 		je prntvr
  5491 00004314 8B35[542F0000]      <2> 		mov esi, [currentcommandloc]
  5492 0000431A 01FE                <2> 		add esi, edi
  5493 0000431C E908000000          <2> 		jmp nxtvrech
  5494                              <2> 	nxtvrechb1:
  5495 00004321 81EB02000000        <2> 		sub ebx, 2
  5496 00004327 EBC9                <2> 		jmp echvar
  5497 00004329 8A03                <2> 	nxtvrech: mov al, [ebx]
  5498 0000432B 3C05                <2> 		cmp al, 5
  5499 0000432D 740A                <2> 		je nxtvrec2
  5500 0000432F 43                  <2> 		inc ebx
  5501 00004330 81FB[66040100]      <2> 		cmp ebx, varend
  5502 00004336 72F1                <2> 		jb nxtvrech
  5503 00004338 C3                  <2> 		ret
  5504 00004339 43                  <2> 	nxtvrec2: inc ebx
  5505 0000433A 8A03                <2> 		mov al, [ebx]
  5506 0000433C 3C04                <2> 		cmp al, 4
  5507 0000433E 74B2                <2> 		je echvar
  5508 00004340 EBE7                <2> 		jmp nxtvrech
  5509 00004342 43                  <2> 	prntvr: inc ebx
  5510 00004343 89DE                <2> 		mov esi, ebx
  5511 00004345 C3                  <2> 		ret
  5512 00004346 E8E0D9FFFF          <2> 	prntvr2: call print
  5513 0000434B BE[77890000]        <2> 		mov esi, line
  5514 00004350 E8D6D9FFFF          <2> 		call print
  5515 00004355 C3                  <2> 		ret 
  5516                              <1> %include 'source/programs/else.asm'
  5517 00004356 FF2C656C736500      <2> 	db 255,44,"else",0
  5518 0000435D 31C0                <2> elsecmd:	xor eax, eax
  5519 0000435F 3805[60F40000]      <2> 	cmp [BATCHISON], al
  5520 00004365 0F84E7F6FFFF        <2> 	je near notbatch
  5521 0000436B A0[F7F30000]        <2> 	mov al, [IFON]
  5522 00004370 BE[F8F30000]        <2> 	mov esi, IFTRUE
  5523 00004375 01C6                <2> 	add esi, eax
  5524 00004377 8A06                <2> 	mov al, [esi]
  5525 00004379 3401                <2> 	xor al, 1
  5526 0000437B 8806                <2> 	mov [esi], al
  5527 0000437D C3                  <2> 	ret 
  5528                              <1> %include 'source/programs/exit.asm'
  5529 0000437E FF2C6578697400      <2> db 255,44,"exit",0
  5530 00004385 803D[F6F30000]01    <2> 	cmp byte [ranboot], 1
  5531 0000438C 0F84A3E8FFFF        <2> 	je near returnfromexp
  5532 00004392 E989E7FFFF          <2> 	jmp nobootfile
  5533                              <1> %include 'source/programs/fi.asm'
  5534 00004397 FF2C666900          <2> 	db 255,44,"fi",0
  5535 0000439C 30C0                <2> 	xor al, al
  5536 0000439E 3805[60F40000]      <2> 	cmp [BATCHISON], al
  5537 000043A4 0F84A8F6FFFF        <2> 	je near notbatch
  5538 000043AA B001                <2> fi:	mov al, 1
  5539 000043AC 2805[F7F30000]      <2> 	sub [IFON],al
  5540 000043B2 C3                  <2> 	ret 
  5541                              <1> %ifdef gui.included
  5542                              <1> 	%include 'source/programs/gui.asm'
  5543 000043B3 FF2C67756900        <2> db 255,44,"gui",0
  5544                              <2> guiswitcher:
  5545 000043B9 8B35[542F0000]      <2> 	mov esi, [currentcommandloc]
  5546 000043BF 81C604000000        <2> 	add esi, 4
  5547 000043C5 31C9                <2> 	xor ecx, ecx
  5548 000043C7 803E00              <2> 	cmp byte [esi], 0
  5549 000043CA 740A                <2> 	je .nomodepref
  5550 000043CC E80DEFFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5551 000043D1 E907000000          <2> 	jmp .modepref
  5552                              <2> .nomodepref:
  5553 000043D6 51                  <2> 	push ecx
  5554 000043D7 E8F8D9FFFF          <2> 	call clear
  5555 000043DC 59                  <2> 	pop ecx
  5556                              <2> .modepref:
  5557 000043DD 66BB[1753]          <2> 	mov bx, guiswitch
  5558 000043E1 66891D[D70C0000]    <2> 	mov [realmodeptr], bx
  5559 000043E8 BB[F8430000]        <2> 	mov ebx, guiswitchret
  5560 000043ED 891D[D30C0000]      <2> 	mov [realmodereturn], ebx
  5561 000043F3 E9C4C7FFFF          <2> 	jmp realmode
  5562                              <2> guiswitchret:
  5563 000043F8 65803D[9CDB0000]01  <2> 	cmp byte [gs:guion], 1
  5564 00004400 7401                <2> 	je .cont
  5565 00004402 C3                  <2> 	ret
  5566                              <2> .cont:
  5567 00004403 BF[F5540000]        <2> 	mov edi, VBEMODEBLOCK
  5568                              <2> .loop:
  5569 00004408 658B07              <2> 	mov eax, [gs:edi]
  5570 0000440B 8907                <2> 	mov [edi], eax
  5571 0000440D 47                  <2> 	inc edi
  5572 0000440E 81FF[F9570000]      <2> 	cmp edi, VBEEND
  5573 00004414 72F2                <2> 	jb .loop
  5574 00004416 A1[1D570000]        <2> 	mov eax, [physbaseptr]
  5575 0000441B 8B1D[41020000]      <2> 	mov ebx, [basecache]
  5576 00004421 C1E304              <2> 	shl ebx, 4
  5577 00004424 29D8                <2> 	sub eax, ebx
  5578 00004426 A3[1D570000]        <2> 	mov [physbaseptr], eax
  5579 0000442B C605[92230000]00    <2> 	mov byte [termguion], 0
  5580 00004432 BE[7B0C0100]        <2> 	mov esi, graphicstable
  5581 00004437 30C0                <2> 	xor al, al
  5582                              <2> .clear:
  5583 00004439 8806                <2> 	mov [esi], al
  5584 0000443B 46                  <2> 	inc esi
  5585 0000443C 81FE[7B0E0100]      <2> 	cmp esi, graphicstableend
  5586 00004442 72F5                <2> 	jb .clear
  5587 00004444 E82F2B0000          <2> 	call guisetup
  5588                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5589 00004449 668B15[07570000]    <2> 	mov dx, [resolutionx]
  5590 00004450 668B0D[09570000]    <2> 	mov cx, [resolutiony]
  5591 00004457 6689D3              <2> 	mov bx, dx
  5592 0000445A 6689C8              <2> 	mov ax, cx
  5593 0000445D 66D1EB              <2> 	shr bx, 1
  5594 00004460 66D1E8              <2> 	shr ax, 1
  5595 00004463 6689DA              <2> 	mov dx, bx
  5596 00004466 66D1EA              <2> 	shr dx, 1
  5597 00004469 6689C1              <2> 	mov cx, ax
  5598 0000446C 66D1E9              <2> 	shr cx, 1
  5599 0000446F 6601D3              <2> 	add bx, dx
  5600 00004472 6601C8              <2> 	add ax, cx
  5601 00004475 66D1E9              <2> 	shr cx, 1
  5602 00004478 66C1EB03            <2> 	shr bx, 3
  5603 0000447C 66C1E303            <2> 	shl bx, 3
  5604 00004480 66C1E804            <2> 	shr ax, 4
  5605 00004484 66C1E004            <2> 	shl ax, 4
  5606 00004488 66891D[7D710000]    <2> 	mov [termwindow], bx
  5607 0000448F 66A3[7F710000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5608 00004495 BE[7D710000]        <2> 	mov esi, termwindow
  5609 0000449A 31DB                <2> 	xor ebx, ebx
  5610 0000449C 6631C0              <2> 	xor ax, ax
  5611 0000449F E806320000          <2> 	call showwindow
  5612 000044A4 E851130000          <2> 	call cursorgui
  5613 000044A9 E826D9FFFF          <2> 	call clear
  5614 000044AE C3                  <2> 	ret
  5615                              <2> 	
  5616                              <1> %endif
  5617                              <1> %include 'source/programs/help.asm'
  5618 000044AF FF2C68656C7000      <2> db 255,44,"help",0
  5619                              <2> lscmd:	
  5620 000044B6 B00D                <2> 		mov al, 13
  5621 000044B8 E8D7DEFFFF          <2> 		call prcharq
  5622 000044BD BE[AA330000]        <2> 		mov esi, progstart
  5623 000044C2 BB[17530000]        <2> 		mov ebx, progend
  5624 000044C7 BE[E6ED0000]        <2> dir:	mov esi, fileindex
  5625 000044CC 8A06                <2> 	dirnxt:	mov al, [esi]
  5626 000044CE 30E4                <2> 		xor ah, ah
  5627 000044D0 3CFF                <2> 		cmp al, 255
  5628 000044D2 7415                <2> 		je dirfnd
  5629 000044D4 46                  <2> 		inc esi
  5630 000044D5 81FE[E6F10000]      <2> 		cmp esi,  fileindexend
  5631 000044DB 7339                <2> 		jae dirdn
  5632 000044DD EBED                <2> 		jmp dirnxt
  5633                              <2> 	dirfnd3:
  5634 000044DF 46                  <2> 		inc esi
  5635 000044E0 81FE[E6F10000]      <2> 		cmp esi, fileindexend
  5636 000044E6 76E4                <2> 		jbe dirnxt
  5637 000044E8 4E                  <2> 		dec esi
  5638 000044E9 46                  <2> 	dirfnd:	inc esi
  5639 000044EA 8A06                <2> 		mov al, [esi]
  5640 000044EC 30E4                <2> 		xor ah, ah
  5641 000044EE 3C2C                <2> 		cmp al, 44
  5642 000044F0 740B                <2> 		je dirfnd2
  5643 000044F2 46                  <2> 		inc esi
  5644 000044F3 81FE[E6F10000]      <2> 		cmp esi,  fileindexend
  5645 000044F9 731B                <2> 		jae dirdn
  5646 000044FB EBCF                <2> 		jmp dirnxt
  5647 000044FD 46                  <2> 	dirfnd2: inc esi
  5648 000044FE E809D8FFFF          <2> 		call printquiet
  5649 00004503 56                  <2> 		push esi
  5650 00004504 B009                <2> 		mov al, 9
  5651 00004506 E889DEFFFF          <2> 		call prcharq
  5652 0000450B 5E                  <2> 		pop esi
  5653 0000450C 81FE[E6F10000]      <2> 		cmp esi,  fileindexend
  5654 00004512 7302                <2> 		jae dirdn
  5655 00004514 EBB6                <2> 		jmp dirnxt
  5656 00004516 BE[77890000]        <2> 	dirdn:	mov esi, line
  5657 0000451B E80BD8FFFF          <2> 			call print
  5658 00004520 C3                  <2> 			ret
  5659 00004521 00                  <2> currentdir db 0
  5660                              <1> %include 'source/programs/if.asm'
  5661 00004522 FF2C696600          <2> 	db 255,44,"if",0
  5662 00004527 30C0                <2> ifcmd:	xor al, al
  5663 00004529 3805[60F40000]      <2> 	cmp [BATCHISON], al
  5664 0000452F 0F841DF5FFFF        <2> 	je near notbatch
  5665 00004535 8B1D[542F0000]      <2> 	mov ebx, [currentcommandloc]
  5666 0000453B 81C303000000        <2> 	add ebx, 3
  5667 00004541 89DE                <2> 	mov esi, ebx
  5668 00004543 8A06                <2> chkeqsn: mov al, [esi]
  5669 00004545 3C00                <2> 	cmp al, 0
  5670 00004547 0F8405F5FFFF        <2> 	je near notbatch
  5671 0000454D 3C3D                <2> 	cmp al, '='
  5672 0000454F 0F8403000000        <2> 	je near chkeqdn
  5673 00004555 46                  <2> 	inc esi
  5674 00004556 EBEB                <2> 	jmp chkeqsn
  5675 00004558 B000                <2> chkeqdn: mov al, 0 
  5676 0000455A 8806                <2> 	mov [esi], al
  5677 0000455C 46                  <2> 	inc esi
  5678 0000455D E8F6E9FFFF          <2> 	call tester
  5679 00004562 3C01                <2> 	cmp al, 1
  5680 00004564 0F8405000000        <2> 	je near trueif
  5681 0000456A E91C000000          <2> 	jmp falseif
  5682 0000456F 31C0                <2> trueif:	xor eax, eax
  5683 00004571 A0[F7F30000]        <2> 	mov al, [IFON]
  5684 00004576 FEC0                <2> 	inc al
  5685 00004578 A2[F7F30000]        <2> 	mov [IFON], al
  5686 0000457D 30E4                <2> 	xor ah, ah
  5687 0000457F BE[F8F30000]        <2> 	mov esi, IFTRUE
  5688 00004584 01C6                <2> 	add esi, eax
  5689 00004586 B401                <2> 	mov ah, 1
  5690 00004588 8826                <2> 	mov [esi], ah
  5691 0000458A C3                  <2> 	ret 
  5692 0000458B 31C0                <2> falseif: xor eax, eax
  5693 0000458D A0[F7F30000]        <2> 	mov al, [IFON]
  5694 00004592 FEC0                <2> 	inc al
  5695 00004594 A2[F7F30000]        <2> 	mov [IFON], al
  5696 00004599 30E4                <2> 	xor ah, ah
  5697 0000459B BE[F8F30000]        <2> 	mov esi, IFTRUE
  5698 000045A0 01C6                <2> 	add esi, eax
  5699 000045A2 30E4                <2> 	xor ah, ah
  5700 000045A4 8826                <2> 	mov [esi], ah
  5701 000045A6 C3                  <2> 	ret 
  5702                              <1> %ifdef network.included
  5703                              <1> 	%include 'source/programs/ipconfig.asm'
  5704 000045A7 FF2C6970636F6E6669- <2> db 255,44,"ipconfig",0
  5705 000045B0 6700                <2>
  5706                              <2> ifconfig:
  5707 000045B2 8B35[542F0000]      <2> 	mov esi, [currentcommandloc]
  5708 000045B8 81C609000000        <2> 	add esi, 9
  5709 000045BE 803E00              <2> 	cmp byte [esi], 0
  5710 000045C1 740B                <2> 	je .noip
  5711 000045C3 E87B420000          <2> 	call strtoip
  5712 000045C8 890D[2C890000]      <2> 	mov [sysip], ecx
  5713                              <2> .noip:
  5714                              <2> %ifdef ne2000.included
  5715                              <2> 	cmp byte [ne2000.nicconfig], 1
  5716                              <2> 	jne .none2000
  5717                              <2> 	mov esi, ne2000.name
  5718                              <2> 	call print
  5719                              <2> 	mov ecx, ne2000.mac
  5720                              <2> 	call showmac
  5721                              <2> 	mov esi, line
  5722                              <2> 	call print
  5723                              <2> .none2000:
  5724                              <2> %endif
  5725                              <2> %ifdef rtl8139.included
  5726                              <2> 	cmp byte [rtl8139.nicconfig], 1
  5727                              <2> 	jne .nortl8139
  5728                              <2> 	mov esi, rtl8139.name
  5729                              <2> 	call print
  5730                              <2> 	mov ecx, rtl8139.mac
  5731                              <2> 	call showmac
  5732                              <2> 	mov esi, line
  5733                              <2> 	call print
  5734                              <2> .nortl8139:
  5735                              <2> %endif
  5736                              <2> %ifdef rtl8169.included
  5737 000045CE 803D[3C860000]01    <2> 	cmp byte [rtl8169.nicconfig], 1
  5738 000045D5 751E                <2> 	jne .nortl8169
  5739 000045D7 BE[43860000]        <2> 	mov esi, rtl8169.name
  5740 000045DC E84AD7FFFF          <2> 	call print
  5741 000045E1 B9[3D860000]        <2> 	mov ecx, rtl8169.mac
  5742 000045E6 E8DA420000          <2> 	call showmac
  5743 000045EB BE[77890000]        <2> 	mov esi, line
  5744 000045F0 E836D7FFFF          <2> 	call print
  5745                              <2> .nortl8169:
  5746                              <2> %endif
  5747                              <2> %ifdef i8254x.included
  5748                              <2> 	cmp byte [i8254x.nicconfig], 1
  5749                              <2> 	jne .noi8254x
  5750                              <2> 	mov esi, i8254x.name
  5751                              <2> 	call print
  5752                              <2> 	mov ecx, i8254x.mac
  5753                              <2> 	call showmac
  5754                              <2> 	mov esi, line
  5755                              <2> 	call print
  5756                              <2> .noi8254x:
  5757                              <2> %endif
  5758 000045F5 8B0D[2C890000]      <2> 	mov ecx, [sysip]
  5759 000045FB E889420000          <2> 	call showip
  5760 00004600 BE[77890000]        <2> 	mov esi, line
  5761 00004605 E821D7FFFF          <2> 	call print
  5762 0000460A C3                  <2> 	ret
  5763                              <2> 	
  5764                              <1> %endif
  5765                              <1> %include 'source/programs/keycode.asm'
  5766 0000460B FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5767 00004614 00                  <2>
  5768                              <2> keycode:
  5769 00004615 66C705[69230000]00- <2> 	mov word [trans], 0
  5770 0000461D 00                  <2>
  5771 0000461E C605[F5660000]00    <2> 	mov byte [threadson], 0
  5772                              <2> %ifdef io.serial
  5773                              <2> .noserial:
  5774                              <2> 	hlt
  5775                              <2> 	mov dx, [serial.address]
  5776                              <2> 	in al, dx
  5777                              <2> 	cmp al, 0
  5778                              <2> 	je .noserial
  5779                              <2> 	mov cl, al
  5780                              <2> 	call showhexsmall
  5781                              <2> 	cmp al, 0x1B
  5782                              <2> 	jne .noserial
  5783                              <2> 	in al, dx
  5784                              <2> 	mov cl, al
  5785                              <2> 	call showhexsmall
  5786                              <2> 	cmp cl, 0x5B
  5787                              <2> 	je .noserial
  5788                              <2> 	ret
  5789                              <2> %else
  5790 00004625 E8A9150000          <2> 	call getkey
  5791 0000462A 31C0                <2> 	xor eax, eax
  5792 0000462C 31C9                <2> 	xor ecx, ecx
  5793 0000462E 8A0D[B15B0000]      <2> 	mov cl, [specialkey]
  5794 00004634 80F900              <2> 	cmp cl, 0
  5795 00004637 0F8405000000        <2> 	je near .nospecialkeycode
  5796 0000463D E825EBFFFF          <2> 	call showhexsmall
  5797                              <2> .nospecialkeycode:
  5798 00004642 668B0D[67230000]    <2> 	mov cx, [lastkey + 2]
  5799 00004649 E819EBFFFF          <2> 	call showhexsmall
  5800 0000464E 80F901              <2> 	cmp cl, 1
  5801 00004651 75C2                <2> 	jne keycode
  5802 00004653 C3                  <2> 	ret
  5803                              <2> %endif
  5804                              <1> %ifdef gui.included
  5805                              <1> 	%include 'source/programs/line.asm'
  5806 00004654 FF2C6C696E6500      <2> db 255,44,"line",0
  5807                              <2> linetester:
  5808 0000465B 803D[9CDB0000]00    <2> 	cmp byte [guion], 0
  5809 00004662 0F841B000000        <2> 	je near .done
  5810 00004668 668B35[66020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  5811 0000466F BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  5812 00004674 E868000000          <2> 	call .circletest
  5813 00004679 BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  5814 0000467E E801000000          <2> 	call .linetest
  5815                              <2> .done:
  5816 00004683 C3                  <2> 	ret
  5817                              <2> 
  5818                              <2> .linetest:
  5819 00004684 53                  <2> 	push ebx
  5820 00004685 E8D6000000          <2> 	call .stime
  5821 0000468A 5B                  <2> 	pop ebx
  5822 0000468B 31FF                <2> 	xor edi, edi
  5823                              <2> .ltlp:
  5824 0000468D 53                  <2> 	push ebx
  5825 0000468E E81C010000          <2> 	call .st
  5826 00004693 66F7D6              <2> 	not si
  5827 00004696 E814010000          <2> 	call .st
  5828 0000469B 5B                  <2> 	pop ebx
  5829 0000469C 66F7D6              <2> 	not si
  5830 0000469F 660335[64020000]    <2> 	add si, [timenanoseconds]
  5831 000046A6 4B                  <2> 	dec ebx
  5832 000046A7 81FB00000000        <2> 	cmp ebx, 0
  5833 000046AD 77DE                <2> 	ja .ltlp
  5834 000046AF E8C4000000          <2> 	call .etime
  5835 000046B4 53                  <2> 	push ebx	
  5836 000046B5 57                  <2> 	push edi
  5837 000046B6 E8D4260000          <2> 	call guiclear
  5838 000046BB E81F270000          <2> 	call reloadallgraphics
  5839 000046C0 59                  <2> 	pop ecx
  5840 000046C1 E87FEBFFFF          <2> 	call showdec
  5841 000046C6 BE[F1470000]        <2> 	mov esi, .msg
  5842 000046CB E85BD6FFFF          <2> 	call print
  5843 000046D0 59                  <2> 	pop ecx
  5844 000046D1 E86FEBFFFF          <2> 	call showdec
  5845 000046D6 BE[1D480000]        <2> 	mov esi, .msgtime
  5846 000046DB E84BD6FFFF          <2> 	call print
  5847 000046E0 C3                  <2> 	ret
  5848                              <2> 	
  5849                              <2> .circletest:
  5850 000046E1 53                  <2> 	push ebx
  5851 000046E2 E879000000          <2> 	call .stime
  5852 000046E7 5B                  <2> 	pop ebx
  5853 000046E8 31FF                <2> 	xor edi, edi
  5854                              <2> .ctlp:
  5855 000046EA 53                  <2> 	push ebx
  5856 000046EB 668B0D[09570000]    <2> 	mov cx, [resolutiony]
  5857 000046F2 66D1E9              <2> 	shr cx, 1
  5858 000046F5 668B15[07570000]    <2> 	mov dx, [resolutionx]
  5859 000046FC 66D1EA              <2> 	shr dx, 1
  5860 000046FF 6689C8              <2> 	mov ax, cx
  5861                              <2> .circle:
  5862 00004702 60                  <2> 	pusha
  5863 00004703 E8E4200000          <2> 	call drawcircle
  5864 00004708 61                  <2> 	popa
  5865 00004709 6648                <2> 	dec ax
  5866 0000470B 47                  <2> 	inc edi
  5867 0000470C 663D0100            <2> 	cmp ax, 1
  5868 00004710 77F0                <2> 	ja .circle
  5869 00004712 66F7D6              <2> 	not si
  5870                              <2> .circle2:
  5871 00004715 60                  <2> 	pusha
  5872 00004716 E8D1200000          <2> 	call drawcircle
  5873 0000471B 61                  <2> 	popa
  5874 0000471C 47                  <2> 	inc edi
  5875 0000471D 6640                <2> 	inc ax
  5876 0000471F 6639C8              <2> 	cmp ax, cx
  5877 00004722 76F1                <2> 	jbe .circle2
  5878 00004724 5B                  <2> 	pop ebx
  5879 00004725 66F7D6              <2> 	not si
  5880 00004728 660335[64020000]    <2> 	add si, [timenanoseconds]
  5881 0000472F 4B                  <2> 	dec ebx
  5882 00004730 81FB00000000        <2> 	cmp ebx, 0
  5883 00004736 77B2                <2> 	ja .ctlp
  5884 00004738 E83B000000          <2> 	call .etime
  5885 0000473D 53                  <2> 	push ebx
  5886 0000473E 57                  <2> 	push edi
  5887 0000473F 59                  <2> 	pop ecx
  5888 00004740 E800EBFFFF          <2> 	call showdec
  5889 00004745 BE[06480000]        <2> 	mov esi, .msgcircle
  5890 0000474A E8DCD5FFFF          <2> 	call print
  5891 0000474F 59                  <2> 	pop ecx
  5892 00004750 E8F0EAFFFF          <2> 	call showdec
  5893 00004755 BE[1D480000]        <2> 	mov esi, .msgtime
  5894 0000475A E8CCD5FFFF          <2> 	call print
  5895 0000475F C3                  <2> 	ret
  5896                              <2> 	
  5897                              <2> .stime:
  5898 00004760 F4                  <2> 	hlt
  5899 00004761 A1[60020000]        <2> 	mov eax, [timeseconds]
  5900 00004766 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  5901 0000476C A3[2C480000]        <2> 	mov [.time], eax
  5902 00004771 891D[30480000]      <2> 	mov [.time + 4], ebx
  5903 00004777 C3                  <2> 	ret
  5904                              <2> 	
  5905                              <2> .etime:
  5906 00004778 A1[60020000]        <2> 	mov eax, [timeseconds]
  5907 0000477D 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  5908 00004783 8B0D[2C480000]      <2> 	mov ecx, [.time]
  5909 00004789 8B15[30480000]      <2> 	mov edx, [.time + 4]
  5910 0000478F C1EA0A              <2> 	shr edx, 10
  5911 00004792 C1EB0A              <2> 	shr ebx, 10
  5912 00004795 29C8                <2> 	sub eax, ecx
  5913 00004797 3D00000000          <2> 	cmp eax, 0
  5914 0000479C 740E                <2> 	je .notclp
  5915                              <2> .tclp:
  5916 0000479E 81C340420F00        <2> 	add ebx, 1000000
  5917 000047A4 48                  <2> 	dec eax
  5918 000047A5 3D00000000          <2> 	cmp eax, 0
  5919 000047AA 75F2                <2> 	jne .tclp
  5920                              <2> .notclp:
  5921 000047AC 29D3                <2> 	sub ebx, edx
  5922 000047AE C3                  <2> 	ret
  5923                              <2> 	
  5924                              <2> .st:
  5925 000047AF 6631C0              <2> 	xor ax, ax
  5926 000047B2 6631DB              <2> 	xor bx, bx
  5927 000047B5 668B0D[09570000]    <2> 	mov cx, [resolutiony]
  5928 000047BC 668B15[07570000]    <2> 	mov dx, [resolutionx]
  5929                              <2> .lp:
  5930 000047C3 60                  <2> 	pusha
  5931 000047C4 E89A240000          <2> 	call drawline
  5932 000047C9 61                  <2> 	popa
  5933                              <2> .noswitch:
  5934 000047CA 47                  <2> 	inc edi
  5935 000047CB 6643                <2> 	inc bx
  5936 000047CD 664A                <2> 	dec dx
  5937 000047CF 6681FB0000          <2> 	cmp bx, 0
  5938 000047D4 74ED                <2> 	je .lp
  5939 000047D6 6681FA0000          <2> 	cmp dx, 0
  5940 000047DB 75E6                <2> 	jne .lp
  5941                              <2> .lp2:
  5942 000047DD 60                  <2> 	pusha
  5943 000047DE E880240000          <2> 	call drawline
  5944 000047E3 61                  <2> 	popa
  5945 000047E4 47                  <2> 	inc edi
  5946 000047E5 6640                <2> 	inc ax
  5947 000047E7 6649                <2> 	dec cx
  5948 000047E9 6681F90000          <2> 	cmp cx, 0
  5949 000047EE 75ED                <2> 	jne .lp2
  5950 000047F0 C3                  <2> 	ret
  5951                              <2> 	
  5952 000047F1 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  5953 000047FA 6520647261776E2069- <2>
  5954 00004803 6E2000              <2>
  5955 00004806 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  5956 0000480F 65726520647261776E- <2>
  5957 00004818 20696E2000          <2>
  5958 0000481D 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  5959 00004826 6E64732E0A00        <2>
  5960 0000482C 0000000000000000    <2> .time dd 0,0	
  5961                              <1> %endif
  5962                              <1> %include 'source/programs/logout.asm'
  5963 00004834 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5964 0000483D E99AE2FFFF          <2> 	jmp os
  5965                              <1> %include 'source/programs/loop.asm'
  5966 00004842 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5967 00004849 803D[61F40000]00    <2> 	cmp byte [LOOPON], 0
  5968 00004850 0F8501000000        <2> 	jne near filoop
  5969 00004856 C3                  <2> 	ret
  5970 00004857 8B35[62F40000]      <2> filoop: mov esi, [LOOPPOS]
  5971 0000485D FE0D[F7F30000]      <2> 	dec byte [IFON]
  5972 00004863 C605[61F40000]00    <2> 	mov byte [LOOPON], 0
  5973 0000486A 8935[5CF40000]      <2> 	mov [BATCHPOS], esi
  5974 00004870 8935[7A390000]      <2> 	mov [batchedi], esi
  5975 00004876 C3                  <2> 	ret 
  5976                              <1> %ifdef disk.none
  5977                              <1> %else
  5978                              <1> 	%include 'source/programs/ls.asm'
  5979 00004877 FF2C6C7300          <2> db 255,44,"ls",0
  5980 0000487C BE[9CD90000]        <2> 		mov esi, diskfileindex
  5981                              <2> 	diskindexdir:
  5982 00004881 803E5F              <2> 		cmp byte [esi], '_'
  5983 00004884 7440                <2> 		je nextdiskindexdir
  5984 00004886 E881D4FFFF          <2> 		call printquiet
  5985 0000488B 56                  <2> 		push esi
  5986 0000488C BE[E6480000]        <2> 		mov esi, disktab
  5987 00004891 E876D4FFFF          <2> 		call printquiet
  5988 00004896 5E                  <2> 		pop esi
  5989 00004897 8B4E05              <2> 		mov ecx, [esi + 5]
  5990 0000489A C605[66310000]05    <2> 		mov byte [firsthexshown], 5
  5991 000048A1 E89FE9FFFF          <2> 		call showdec
  5992 000048A6 56                  <2> 		push esi
  5993 000048A7 BE[77890000]        <2> 		mov esi, line
  5994 000048AC E85BD4FFFF          <2> 		call printquiet
  5995 000048B1 5E                  <2> 		pop esi
  5996 000048B2 81C609000000        <2> 		add esi, 9
  5997 000048B8 81FE[9ADB0000]      <2> 		cmp esi, enddiskfileindex
  5998 000048BE 72C1                <2> 		jb diskindexdir
  5999 000048C0 E898DFFFFF          <2> 		call termcopy
  6000 000048C5 C3                  <2> 		ret
  6001                              <2> 	nextdiskindexdir:
  6002 000048C6 46                  <2> 		inc esi
  6003 000048C7 803E00              <2> 		cmp byte [esi], 0
  6004 000048CA 75FA                <2> 		jne nextdiskindexdir
  6005 000048CC 81C609000000        <2> 		add esi, 9
  6006 000048D2 81FE[9ADB0000]      <2> 		cmp esi, enddiskfileindex
  6007 000048D8 72A7                <2> 		jb diskindexdir
  6008 000048DA E87EDFFFFF          <2> 		call termcopy
  6009 000048DF C3                  <2> 		ret
  6010                              <2> 		
  6011 000048E0 4469736B2000        <2> 		diskmsg db "Disk ",0
  6012 000048E6 0D09090900          <2> 		disktab db 13,9,9,9,0
  6013                              <1> %endif
  6014                              <1> %include 'source/programs/memory.asm'
  6015 000048EB FF2C6D656D6F727900  <2> db 255,44,"memory",0
  6016 000048F4 BE[A2DB0000]        <2> 	mov esi, memlistbuf
  6017 000048F9 31FF                <2> 	xor edi, edi
  6018 000048FB 668B3D[E2DD0000]    <2> 	mov di, [memlistend]
  6019 00004902 01F7                <2> 	add edi, esi
  6020                              <2> printmemmap:
  6021 00004904 8B0E                <2> 	mov ecx, [esi]
  6022 00004906 E870E8FFFF          <2> 	call showhex
  6023 0000490B 81C608000000        <2> 	add esi, 8
  6024 00004911 8B0E                <2> 	mov ecx, [esi]
  6025 00004913 E863E8FFFF          <2> 	call showhex
  6026 00004918 81C608000000        <2> 	add esi, 8
  6027 0000491E 8B0E                <2> 	mov ecx, [esi]
  6028 00004920 E856E8FFFF          <2> 	call showhex
  6029 00004925 81C608000000        <2> 	add esi, 8
  6030 0000492B 57                  <2> 	push edi
  6031 0000492C 56                  <2> 	push esi
  6032 0000492D BE[77890000]        <2> 	mov esi, line
  6033 00004932 E8F4D3FFFF          <2> 	call print
  6034 00004937 5E                  <2> 	pop esi
  6035 00004938 5F                  <2> 	pop edi
  6036 00004939 39FE                <2> 	cmp esi, edi
  6037 0000493B 72C7                <2> 	jb printmemmap
  6038 0000493D C3                  <2> 	ret
  6039                              <2> 	
  6040                              <1> %include 'source/programs/pci.asm'
  6041 0000493E FF2C70636900        <2> db 255,44,"pci",0
  6042 00004944 E8D8180000          <2> 	call pcidump
  6043 00004949 C3                  <2> 	ret 
  6044                              <1> %ifdef network.included
  6045                              <1> 	%include 'source/programs/ping.asm'
  6046 0000494A FF2C70696E6700      <2> db 255,44,"ping",0
  6047                              <2> ping:
  6048 00004951 8B35[542F0000]      <2> 	mov esi, [currentcommandloc]
  6049 00004957 81C605000000        <2> 	add esi, 5
  6050 0000495D E8E13E0000          <2> 	call strtoip
  6051 00004962 890D[ED490000]      <2> 	mov [.destip], ecx
  6052 00004968 E81C3F0000          <2> 	call showip
  6053 0000496D 8B0D[2C890000]      <2> 	mov ecx, [sysip]
  6054 00004973 890D[E9490000]      <2> 	mov [.sourceip]. ecx
  6055 00004979 31C0                <2> 	xor eax, eax
  6056 0000497B 31DB                <2> 	xor ebx, ebx
  6057 0000497D 66A3[E7490000]      <2> 	mov [.checksum], ax
  6058 00004983 66A3[F3490000]      <2> 	mov [.icmpchecksum], ax
  6059 00004989 BF[DD490000]        <2> 	mov edi, .header
  6060 0000498E BE[F1490000]        <2> 	mov esi, .headerend
  6061 00004993 E8833E0000          <2> 	call getchecksum
  6062 00004998 66890D[E7490000]    <2> 	mov [.checksum], cx
  6063 0000499F BF[F1490000]        <2> 	mov edi, .icmp
  6064 000049A4 BE[194A0000]        <2> 	mov esi, .packetend
  6065 000049A9 E86D3E0000          <2> 	call getchecksum
  6066 000049AE 66890D[F3490000]    <2> 	mov [.icmpchecksum], cx
  6067 000049B5 BF[CF490000]        <2> 	mov edi, .packet
  6068 000049BA BE[194A0000]        <2> 	mov esi, .packetend
  6069 000049BF E84D3E0000          <2> 	call sendpacket
  6070 000049C4 BE[77890000]        <2> 	mov esi, line
  6071 000049C9 E85DD3FFFF          <2> 	call print
  6072 000049CE C3                  <2> 	ret
  6073                              <2> 	
  6074                              <2> 	
  6075                              <2> 	
  6076                              <2> .packet:
  6077 000049CF FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  6078 000049D5 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  6079 000049DB 0800                <2> .ethertype	db 8,0	;ip is 0x800
  6080                              <2> .header:
  6081 000049DD 45                  <2> .version	db 0x45
  6082 000049DE 00                  <2> .services	db 0
  6083 000049DF 003C                <2> .length	db 0,0x3C
  6084 000049E1 0000                <2> .id		dw 0
  6085 000049E3 00                  <2> .flags	db 0
  6086 000049E4 00                  <2> .fragment db 0
  6087 000049E5 80                  <2> .ttl	db 128
  6088 000049E6 01                  <2> .protocol db 1 ;ICMP
  6089 000049E7 0000                <2> .checksum dw 0
  6090 000049E9 00000000            <2> .sourceip dd 0
  6091 000049ED 00000000            <2> .destip dd 0
  6092                              <2> .headerend:
  6093                              <2> .icmp:
  6094 000049F1 08                  <2> .icmptype db 8 ;Ping request
  6095 000049F2 00                  <2> .icmpcode db 0
  6096 000049F3 0000                <2> .icmpchecksum dw 0
  6097 000049F5 0001                <2> .icmpid db 0,1
  6098 000049F7 0000                <2> .sequence dw 0
  6099 000049F9 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  6100 00004A02 6A6B6C6D6E6F707172- <2>
  6101 00004A0B 737475767761626364- <2>
  6102 00004A14 6566676869          <2>
  6103                              <2> .packetend:
  6104                              <1> %endif
  6105                              <1> %ifdef disk.none
  6106                              <1> %else
  6107                              <1> 	%include 'source/programs/play.asm'
  6108 00004A19 FF2C706C61796100    <2> db 255,44,"playa",0
  6109 00004A21 8B3D[542F0000]      <2> 	mov edi, [currentcommandloc]
  6110 00004A27 81C706000000        <2> 	add edi, 6
  6111 00004A2D E827000000          <2> 	call playasync
  6112 00004A32 C3                  <2> 	ret
  6113 00004A33 FF2C706C617900      <2> db 255,44,"play",0
  6114                              <2> play:
  6115 00004A3A 8B3D[542F0000]      <2> 	mov edi, [currentcommandloc]
  6116 00004A40 81C705000000        <2> 	add edi, 5
  6117 00004A46 E80E000000          <2> 	call playasync
  6118                              <2> .waitforsound:
  6119                              <2> %ifdef sound.included
  6120                              <2> 	mov eax, [Length0]
  6121                              <2> 	or ax, [Length1]
  6122                              <2> %endif
  6123 00004A4B 0A05[68020000]      <2> 	or al, [soundon]
  6124 00004A51 3D00000000          <2> 	cmp eax, 0
  6125 00004A56 75F3                <2> 	jne .waitforsound
  6126 00004A58 C3                  <2> 	ret
  6127                              <2> playasync:
  6128 00004A59 BE0000C000          <2> 	mov esi, 0xC00000
  6129 00004A5E E8F31A0000          <2> 	call loadfile
  6130 00004A63 81FA94010000        <2> 	cmp edx, 404
  6131 00004A69 743F                <2> 	je nosoundfound
  6132 00004A6B BB0000C000          <2> 	mov ebx, 0xC00000
  6133 00004A70 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6134 00004A77 0F845A000000        <2> 	je near wave_player
  6135 00004A7D 66813B534E          <2> 	cmp word [ebx], "SN"
  6136 00004A82 7526                <2> 	jne nosoundfound
  6137 00004A84 81C306000000        <2> 	add ebx, 6
  6138 00004A8A 891D[6B020000]      <2> 	mov [soundpos], ebx
  6139 00004A90 035BFC              <2> 	add ebx, [ebx - 4]
  6140 00004A93 891D[6F020000]      <2> 	mov [soundendpos], ebx
  6141 00004A99 66C705[69020000]00- <2> 	mov word [soundrepititions], 0
  6142 00004AA1 00                  <2>
  6143 00004AA2 C605[68020000]01    <2> 	mov byte [soundon], 1
  6144 00004AA9 C3                  <2> 	ret
  6145                              <2> nosoundfound:
  6146 00004AAA BE[D04A0000]        <2> 	mov esi, notfoundsound
  6147 00004AAF E877D2FFFF          <2> 	call print
  6148 00004AB4 8B35[542F0000]      <2> 	mov esi, [currentcommandloc]
  6149 00004ABA 81C605000000        <2> 	add esi, 5
  6150 00004AC0 E866D2FFFF          <2> 	call print
  6151 00004AC5 BE[46890000]        <2> 	mov esi, notfound2
  6152 00004ACA E85CD2FFFF          <2> 	call print
  6153 00004ACF C3                  <2> 	ret
  6154 00004AD0 706C61793A2000      <2> notfoundsound db "play: ",0
  6155                              <2> 
  6156                              <2> %ifdef sound.included
  6157                              <2> sbplay:
  6158                              <2> 		mov esi, 0xC00000
  6159                              <2> 		mov ebx, esi
  6160                              <2> 		add esi, WAVSTART
  6161                              <2> 		sub edi, esi
  6162                              <2> 		mov [Length1], di
  6163                              <2> 		shr edi, 15
  6164                              <2> 		mov [Length0], edi
  6165                              <2> 		mov ecx, [ebx + 24]
  6166                              <2> 		mov [Freq], ecx
  6167                              <2> 		xor eax, eax
  6168                              <2> 		mov	edx, 0xC00000 ;physical location of sound
  6169                              <2> 		add edx, WAVSTART
  6170                              <2> 		add	eax, edx
  6171                              <2> 		mov esi, eax
  6172                              <2> 		xor ecx, ecx
  6173                              <2> 		xor ebx, ebx
  6174                              <2> 		mov [SegLoc], bx
  6175                              <2> 		add ebx, 0x80000
  6176                              <2> 		mov cx, 0xFFFF
  6177                              <2> 		cmp di, 0
  6178                              <2> 		jne .autoinit
  6179                              <2> 		mov cx, [Length1]
  6180                              <2> 		mov byte [OddLength], 1
  6181                              <2> 		cmp cx, 32768
  6182                              <2> 		jae .autoinit
  6183                              <2> 		mov byte [OddLength], 0
  6184                              <2> 		shl cx, 1
  6185                              <2> 		inc edi
  6186                              <2> .autoinit:
  6187                              <2> 		dec edi
  6188                              <2> 		mov [Length0], edi
  6189                              <2> 		mov [Length1], cx
  6190                              <2> 		shr cx, 1
  6191                              <2> 		inc cx
  6192                              <2> 		add eax, ecx
  6193                              <2> 		mov [NextMemLoc], eax
  6194                              <2> 		mov	[MemLoc], esi
  6195                              <2> 		call DMACopy
  6196                              <2> 		xor ebx, ebx
  6197                              <2> 		mov bx, [SegLoc]
  6198                              <2> 		xor ecx, ecx
  6199                              <2> 		mov cx, [Length1]
  6200                              <2> 		shr cx, 1
  6201                              <2> 		inc cx
  6202                              <2> 		add ebx, ecx
  6203                              <2> 		mov [SegLoc], bx
  6204                              <2> 		add ebx, 0x80000
  6205                              <2> 		mov esi, [NextMemLoc]
  6206                              <2> 		mov eax, esi
  6207                              <2> 		add eax, ecx
  6208                              <2> 		mov [NextMemLoc], eax
  6209                              <2> 		mov	[MemLoc], esi
  6210                              <2> 		call DMACopy
  6211                              <2> 		call DMAPlay
  6212                              <2> 		call PlayDSP
  6213                              <2> 		ret
  6214                              <2> WAVSTART equ 64;44
  6215                              <2> wave_player:
  6216                              <2> 	cmp byte [SoundBlaster], 1
  6217                              <2> 	je near sbplay
  6218                              <2> 	mov esi, nosoundblaster
  6219                              <2> 	call print
  6220                              <2> 	ret
  6221                              <2> %else
  6222                              <2> 	wave_player:
  6223 00004AD7 BE[E24A0000]        <2> 		mov esi, nosoundblaster
  6224 00004ADC E84AD2FFFF          <2> 		call print
  6225 00004AE1 C3                  <2> 		ret
  6226                              <2> %endif
  6227 00004AE2 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6228 00004AEB 426C61737465722064- <2>
  6229 00004AF4 657465637465642E0A- <2>
  6230 00004AFD 00                  <2>
  6231                              <1> %endif
  6232                              <1> %include 'source/programs/pwd.asm'
  6233 00004AFE FF2C70776400        <2> db 255,44,"pwd",0
  6234 00004B04 BE[F2F10000]        <2> 	mov esi, currentfolder
  6235 00004B09 E8FED1FFFF          <2> 	call printquiet
  6236 00004B0E BE[77890000]        <2> 	mov esi, line
  6237 00004B13 E813D2FFFF          <2> 	call print
  6238 00004B18 C3                  <2> 	ret
  6239                              <2> 	
  6240                              <1> %include 'source/programs/reboot.asm'
  6241 00004B19 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6242 00004B22 0F011D[2C4B0000]    <2> 		lidt [idtreboot]
  6243 00004B29 CD00                <2> 		int 0
  6244 00004B2B F4                  <2> 		hlt
  6245                              <2> 	
  6246 00004B2C 0000                <2> 	idtreboot dw 0
  6247 00004B2E 00000000            <2> 			  dd 0
  6248                              <2> 
  6249                              <2> 	coldboot:
  6250 00004B32 66B84000            <2> 		MOV AX, 0040h
  6251 00004B36 8EC0                <2> 		MOV ES, AX
  6252 00004B38 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6253 00004B41 00                  <2>
  6254 00004B42 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6255 00004B49 CF                  <2> 		IRET
  6256                              <2> 
  6257                              <2> 	warmboot:
  6258 00004B4A 66B84000            <2> 		MOV AX, 0040h
  6259 00004B4E 8EC0                <2> 		MOV ES, AX
  6260 00004B50 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6261 00004B59 12                  <2>
  6262 00004B5A EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6263 00004B61 CF                  <2> 		IRET
  6264                              <2> 		
  6265                              <1> %include 'source/programs/reg.asm'
  6266 00004B62 FF2C72656700        <2> db 255,44,"reg",0
  6267 00004B68 CD03                <2> 	int 3
  6268 00004B6A C3                  <2> 	ret 
  6269                              <1> %ifdef disk.none
  6270                              <1> %else
  6271                              <1> 	%include 'source/programs/show.asm'
  6272 00004B6B FF2C73686F7700      <2> db 255,44,"show",0
  6273                              <2> showprog:
  6274 00004B72 8B3D[542F0000]      <2> 		mov edi, [currentcommandloc]
  6275 00004B78 81C705000000        <2> 		add edi, 5
  6276 00004B7E BE00004000          <2> 		mov esi, 0x400000
  6277 00004B83 803F26              <2> 		cmp byte [edi], '&'
  6278 00004B86 741B                <2> 		je .nullfile
  6279 00004B88 BE00008000          <2> 		mov esi, 0x800000
  6280 00004B8D E8C4190000          <2> 		call loadfile
  6281 00004B92 81FA94010000        <2> 		cmp edx, 404
  6282 00004B98 0F8483000000        <2> 		je near filenotfound
  6283 00004B9E BE00008000          <2> 		mov esi, 0x800000
  6284                              <2> .nullfile:
  6285                              <2> %ifdef gui.included
  6286 00004BA3 66813E424D          <2> 		cmp word [esi], "BM"
  6287 00004BA8 7410                <2> 		je bmpfound
  6288                              <2> %endif
  6289 00004BAA E87CD1FFFF          <2> 		call print
  6290 00004BAF BE[77890000]        <2> 		mov esi, line
  6291 00004BB4 E872D1FFFF          <2> 		call print
  6292 00004BB9 C3                  <2> 		ret
  6293                              <2> %ifdef gui.included
  6294                              <2> bmpfound:
  6295 00004BBA 803D[9CDB0000]00    <2> 		cmp byte [guion], 0
  6296 00004BC1 0F8428000000        <2> 		je near noguibmp
  6297 00004BC7 BE00008000          <2> 		mov esi, 0x800000
  6298 00004BCC 31C9                <2> 		xor ecx, ecx
  6299 00004BCE 31D2                <2> 		xor edx, edx
  6300 00004BD0 31C0                <2> 		xor eax, eax
  6301 00004BD2 31DB                <2> 		xor ebx, ebx
  6302 00004BD4 E8411B0000          <2> 		call showbmp
  6303 00004BD9 30C0                <2> 		xor al, al
  6304 00004BDB B405                <2> 		mov ah, 5
  6305 00004BDD CD30                <2> 		int 30h
  6306 00004BDF E8AB210000          <2> 		call guiclear
  6307 00004BE4 E88A1E0000          <2> 		call clearmousecursor
  6308 00004BE9 E8F1210000          <2> 		call reloadallgraphics
  6309 00004BEE C3                  <2> 		ret
  6310                              <2> noguibmp:
  6311 00004BEF BE[FA4B0000]        <2> 		mov esi, warnguimsg
  6312 00004BF4 E832D1FFFF          <2> 		call print
  6313 00004BF9 C3                  <2> 		ret
  6314 00004BFA 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6315 00004C03 6E6F7420626520646F- <2>
  6316 00004C0C 6E6520776974686F75- <2>
  6317 00004C15 742074686520475549- <2>
  6318 00004C1E 2E0A00              <2>
  6319                              <2> %endif
  6320                              <2> 
  6321                              <2> filenotfound:
  6322 00004C21 BE[544C0000]        <2> 		mov esi, filenf
  6323 00004C26 E800D1FFFF          <2> 		call print
  6324 00004C2B 8B35[542F0000]      <2> 		mov esi, [currentcommandloc]
  6325                              <2> findfilenotfoundzero:
  6326 00004C31 8A06                <2> 		mov al, [esi]
  6327 00004C33 46                  <2> 		inc esi
  6328 00004C34 3C00                <2> 		cmp al, 0
  6329 00004C36 7411                <2> 		je nofilenamenotfound
  6330 00004C38 81FE[660C0100]      <2> 		cmp esi, buftxtend
  6331 00004C3E 7309                <2> 		jae nofilenamenotfound
  6332 00004C40 3C20                <2> 		cmp al, " "
  6333 00004C42 75ED                <2> 		jne findfilenotfoundzero
  6334 00004C44 E8E2D0FFFF          <2> 		call print
  6335                              <2> nofilenamenotfound:
  6336 00004C49 BE[5F4C0000]        <2> 		mov esi, filenf2
  6337 00004C4E E8D8D0FFFF          <2> 		call print
  6338 00004C53 C3                  <2> 		ret
  6339 00004C54 5468652066696C6520- <2> filenf db "The file ",34,0
  6340 00004C5D 2200                <2>
  6341 00004C5F 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6342 00004C68 6F7420626520666F75- <2>
  6343 00004C71 6E642E0A00          <2>
  6344                              <1> %endif
  6345                              <1> %include 'source/programs/shush.asm'
  6346 00004C76 FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6347                              <2> shushprog:
  6348                              <2> %ifdef gui.included
  6349 00004C7E 803D[9CDB0000]00    <2> 	cmp byte [guion], 0
  6350 00004C85 0F84B9000000        <2> 	je near .noswitchsize
  6351 00004C8B 8B35[542F0000]      <2> 	mov esi, [currentcommandloc]
  6352 00004C91 81C606000000        <2> 	add esi, 6
  6353 00004C97 56                  <2> 	push esi
  6354 00004C98 4E                  <2> 	dec esi
  6355                              <2> .findspace:
  6356 00004C99 46                  <2> 	inc esi
  6357 00004C9A 8A06                <2> 	mov al, [esi]
  6358 00004C9C 3C00                <2> 	cmp al, 0
  6359 00004C9E 0F84A0000000        <2> 	je near .noswitchsize
  6360 00004CA4 3C58                <2> 	cmp al, "X"
  6361 00004CA6 7408                <2> 	je .donefind
  6362 00004CA8 3C78                <2> 	cmp al, "x"
  6363 00004CAA 7404                <2> 	je .donefind
  6364 00004CAC 3C20                <2> 	cmp al, " "
  6365 00004CAE 75E9                <2> 	jne .findspace
  6366                              <2> .donefind:
  6367 00004CB0 30C0                <2> 	xor al, al
  6368 00004CB2 8806                <2> 	mov [esi], al
  6369 00004CB4 46                  <2> 	inc esi
  6370 00004CB5 89F7                <2> 	mov edi, esi
  6371 00004CB7 E86BE6FFFF          <2> 	call cnvrttxt
  6372 00004CBC 89C8                <2> 	mov eax, ecx
  6373 00004CBE 5E                  <2> 	pop esi
  6374 00004CBF 50                  <2> 	push eax
  6375 00004CC0 89F7                <2> 	mov edi, esi
  6376 00004CC2 E860E6FFFF          <2> 	call cnvrttxt
  6377 00004CC7 89CB                <2> 	mov ebx, ecx
  6378 00004CC9 58                  <2> 	pop eax	
  6379 00004CCA 6681FB0000          <2> 	cmp bx, 0
  6380 00004CCF 0F846F000000        <2> 	je near .noswitchsize
  6381 00004CD5 663D0000            <2> 	cmp ax, 0
  6382 00004CD9 0F8465000000        <2> 	je near .noswitchsize
  6383 00004CDF 66C1E303            <2> 	shl bx, 3
  6384 00004CE3 66C1E004            <2> 	shl ax, 4
  6385 00004CE7 663B1D[07570000]    <2> 	cmp bx, [resolutionx]
  6386 00004CEE 7607                <2> 	jbe .nofixx
  6387 00004CF0 668B1D[07570000]    <2> 	mov bx, [resolutionx]
  6388                              <2> .nofixx:
  6389 00004CF7 66051000            <2> 	add ax, 16
  6390 00004CFB 663B05[09570000]    <2> 	cmp ax, [resolutiony]
  6391 00004D02 7606                <2> 	jbe .nofixy
  6392 00004D04 66A1[09570000]      <2> 	mov ax, [resolutiony]
  6393                              <2> .nofixy:
  6394 00004D0A 662D1000            <2> 	sub ax, 16
  6395 00004D0E 6631C9              <2> 	xor cx, cx
  6396 00004D11 6631D2              <2> 	xor dx, dx
  6397 00004D14 66891D[7D710000]    <2> 	mov [termwindow], bx
  6398 00004D1B 66A3[7F710000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6399 00004D21 BE[7D710000]        <2> 	mov esi, termwindow
  6400 00004D26 31DB                <2> 	xor ebx, ebx
  6401 00004D28 6631C0              <2> 	xor ax, ax
  6402 00004D2B E87A290000          <2> 	call showwindow
  6403 00004D30 E85A200000          <2> 	call guiclear
  6404 00004D35 E89AD0FFFF          <2> 	call clear
  6405 00004D3A E8A0200000          <2> 	call reloadallgraphics
  6406 00004D3F E8E71D0000          <2> 	call switchmousepos2
  6407                              <2> .noswitchsize:
  6408                              <2> %endif
  6409 00004D44 BE[4F4D0000]        <2> 	mov esi, shushmsg
  6410 00004D49 E8DDCFFFFF          <2> 	call print
  6411 00004D4E C3                  <2> 	ret
  6412 00004D4F 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6413 00004D58 6F2074686520536F6C- <2>
  6414 00004D61 6C65724F5320486172- <2>
  6415 00004D6A 646C7920556E69782D- <2>
  6416 00004D73 436F6D70617469626C- <2>
  6417 00004D7C 65205368656C6C210A- <2>
  6418 00004D85 00                  <2>
  6419                              <1> %include 'source/programs/system.asm'
  6420 00004D86 FF2C73797374656D00  <2> 	db 255,44,"system",0
  6421 00004D8F BE[8C4E0000]        <2> 	mov esi, kernelinfomsg
  6422 00004D94 E873CFFFFF          <2> 	call printquiet
  6423 00004D99 B9[9CD90000]        <2> 	mov ecx, osend
  6424 00004D9E E8A2E4FFFF          <2> 	call showdec
  6425 00004DA3 BE[A14E0000]        <2> 	mov esi, diskbytemsg
  6426 00004DA8 E85FCFFFFF          <2> 	call printquiet
  6427 00004DAD B9[9CD90000]        <2> 	mov ecx, osend
  6428 00004DB2 81C1[1CCA0200]      <2> 	add ecx, commandbufend
  6429 00004DB8 81E9[9CDB0000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6430 00004DBE E882E4FFFF          <2> 	call showdec
  6431 00004DC3 BE[B84E0000]        <2> 	mov esi, membytemsg
  6432 00004DC8 E83FCFFFFF          <2> 	call printquiet
  6433 00004DCD BE[034F0000]        <2> 	mov esi, endofmemmsg
  6434 00004DD2 E835CFFFFF          <2> 	call printquiet
  6435 00004DD7 B9[30FE1200]        <2> 	mov ecx, bssend
  6436 00004DDC E89AE3FFFF          <2> 	call showhex
  6437 00004DE1 BE[D14E0000]        <2> 	mov esi, systeminfomsg
  6438 00004DE6 E821CFFFFF          <2> 	call printquiet
  6439                              <2> getcpuspeed:
  6440 00004DEB B8FE000000          <2> 	mov eax, 0xFE
  6441 00004DF0 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6442 00004DF2 B020                <2> 	mov al, 0x20
  6443 00004DF4 E620                <2> 	out 0x20, al
  6444 00004DF6 F4                  <2> 	hlt
  6445 00004DF7 0F31                <2> 	rdtsc
  6446 00004DF9 89D6                <2> 	mov esi, edx
  6447 00004DFB 89C7                <2> 	mov edi, eax
  6448 00004DFD 31C0                <2> 	xor eax, eax
  6449 00004DFF C605[49020000]01    <2> 	mov byte [testingcpuspeed], 1
  6450                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6451 00004E06 40                  <2> 	inc eax
  6452 00004E07 EBFD                <2> 	jmp cpuspeedloop
  6453                              <2> cpuspeedloopend:
  6454 00004E09 0F31                <2> 	rdtsc
  6455 00004E0B 29F8                <2> 	sub eax, edi
  6456 00004E0D 29F2                <2> 	sub edx, esi
  6457 00004E0F 8915[52020000]      <2> 	mov [cpuclocksperint + 4], edx
  6458 00004E15 A3[4E020000]        <2> 	mov [cpuclocksperint], eax
  6459 00004E1A 31C0                <2> 	xor eax, eax
  6460 00004E1C E621                <2> 	out 0x21, al
  6461 00004E1E B020                <2> 	mov al, 0x20
  6462 00004E20 E620                <2> 	out 0x20, al
  6463 00004E22 31D2                <2> 	xor edx, edx
  6464 00004E24 31C0                <2> 	xor eax, eax
  6465 00004E26 A1[4A020000]        <2> 	mov eax, [cpuspeedperint]
  6466 00004E2B D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6467                              <2> 				;result by 2
  6468 00004E2D 8B1D[5C020000]      <2> 	mov ebx, [timeinterval]
  6469 00004E33 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6470 00004E36 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6471 00004E38 89C1                <2> 	mov ecx, eax
  6472 00004E3A E806E4FFFF          <2> 	call showdec
  6473 00004E3F BE[E74E0000]        <2> 	mov esi, cpuspeedmsg
  6474 00004E44 E8C3CEFFFF          <2> 	call printquiet
  6475 00004E49 31D2                <2> 	xor edx, edx
  6476 00004E4B A1[4E020000]        <2> 	mov eax, [cpuclocksperint]
  6477 00004E50 8B15[52020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6478 00004E56 8B1D[5C020000]      <2> 	mov ebx, [timeinterval]
  6479 00004E5C C1EB0A              <2> 	shr ebx, 10
  6480 00004E5F F7F3                <2> 	div ebx
  6481 00004E61 89C1                <2> 	mov ecx, eax
  6482 00004E63 E8DDE3FFFF          <2> 	call showdec
  6483 00004E68 BE[ED4E0000]        <2> 	mov esi, cpuclockmsg
  6484 00004E6D E89ACEFFFF          <2> 	call printquiet
  6485 00004E72 8B0D[56020000]      <2> 	mov ecx, [memoryspace]
  6486 00004E78 C1E914              <2> 	shr ecx, 20
  6487 00004E7B 41                  <2> 	inc ecx	;the reading is one MB behind
  6488 00004E7C E8C4E3FFFF          <2> 	call showdec
  6489 00004E81 BE[F24E0000]        <2> 	mov esi, memoryspacemsg
  6490 00004E86 E8A0CEFFFF          <2> 	call print
  6491                              <2> %ifdef sound.included
  6492                              <2> 	cmp byte [SoundBlaster], 0
  6493                              <2> 	je .nosb
  6494                              <2> 	mov esi, soundblastermsg
  6495                              <2> 	call print
  6496                              <2> .nosb:
  6497                              <2> %endif
  6498 00004E8B C3                  <2> 	ret
  6499                              <2> 
  6500 00004E8C 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6501 00004E95 666F726D6174696F6E- <2>
  6502 00004E9E 3A0A00              <2>
  6503 00004EA1 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6504 00004EAA 6B2053706163652055- <2>
  6505 00004EB3 7365640A00          <2>
  6506 00004EB8 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6507 00004EC1 6F7279205370616365- <2>
  6508 00004ECA 20557365640A00      <2>
  6509 00004ED1 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6510 00004EDA 6E666F726D6174696F- <2>
  6511 00004EE3 6E3A0A00            <2>
  6512                              <2> %ifdef sound.included
  6513                              <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6514                              <2> %endif
  6515 00004EE7 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6516 00004EED 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6517 00004EF2 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6518 00004EFB 2053706163650A00    <2>
  6519 00004F03 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6520 00004F0C 6D6F72792053706163- <2>
  6521 00004F15 653A20307800        <2>
  6522                              <1> %include 'source/programs/time.asm'
  6523 00004F1B 082E30303030303030- <2> timenscache db 8,".000000000"
  6524 00004F24 3030                <2>
  6525 00004F26 200A00              <2> timenscacheend: db " ",10,0
  6526 00004F29 00                  <2> istimeset db 0
  6527 00004F2A 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  6528 00004F33 2063757272656E7420- <2>
  6529 00004F3C 554E49582074696D65- <2>
  6530 00004F45 3A0A00              <2>
  6531 00004F48 00<rept>            <2> timeinputbuffer times 12 db 0
  6532 00004F54 00                  <2> timeinputbend: db 0
  6533                              <2> 
  6534 00004F55 FF2C74696D6500      <2> db 255,44,"time",0
  6535 00004F5C 803D[294F0000]00    <2> 	cmp byte [istimeset], 0
  6536 00004F63 753A                <2> 	jne timeisset
  6537 00004F65 BE[2A4F0000]        <2> 	mov esi, settimemsg
  6538 00004F6A E8BCCDFFFF          <2> 	call print
  6539 00004F6F BE[484F0000]        <2> 	mov esi, timeinputbuffer
  6540 00004F74 BF[544F0000]        <2> 	mov edi, timeinputbend
  6541 00004F79 E8D4CEFFFF          <2> 	call readline
  6542 00004F7E BE[484F0000]        <2> 	mov esi, timeinputbuffer
  6543 00004F83 31FF                <2> 	xor edi, edi
  6544 00004F85 E89DE3FFFF          <2> 	call cnvrttxt
  6545 00004F8A 890D[60020000]      <2> 	mov [timeseconds], ecx
  6546 00004F90 31C9                <2> 	xor ecx, ecx
  6547 00004F92 890D[64020000]      <2> 	mov [timenanoseconds], ecx
  6548 00004F98 C605[294F0000]01    <2> 	mov byte [istimeset], 1
  6549                              <2> timeisset:
  6550 00004F9F 8B0D[60020000]      <2> 	mov ecx, [timeseconds]
  6551 00004FA5 E89BE2FFFF          <2> 	call showdec
  6552                              <2> 	
  6553 00004FAA 8B0D[64020000]      <2> 	mov ecx, [timenanoseconds]
  6554 00004FB0 BE[1B4F0000]        <2> 	mov esi, timenscache
  6555 00004FB5 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6556 00004FBC C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6557 00004FC3 C6460A30            <2> 	mov byte [esi + 10], "0"
  6558 00004FC7 BE[264F0000]        <2> 	mov esi, timenscacheend
  6559 00004FCC E857E0FFFF          <2> 	call convert
  6560 00004FD1 BE[1B4F0000]        <2> 	mov esi, timenscache
  6561 00004FD6 E831CDFFFF          <2> 	call printquiet
  6562                              <2> 	
  6563 00004FDB E82D000000          <2> 	call time
  6564 00004FE0 BE[D9510000]        <2> 	mov esi, timeshow
  6565 00004FE5 E822CDFFFF          <2> 	call printquiet
  6566 00004FEA BE[77890000]        <2> 	mov esi, line
  6567 00004FEF E818CDFFFF          <2> 	call printquiet
  6568 00004FF4 BE[E2510000]        <2> 	mov esi, dateshow
  6569 00004FF9 E80ECDFFFF          <2> 	call printquiet
  6570 00004FFE BE[77890000]        <2> 	mov esi, line
  6571 00005003 E804CDFFFF          <2> 	call printquiet
  6572 00005008 E9BC000000          <2> 	jmp findday
  6573                              <2> time:
  6574 0000500D E84F010000          <2> 	call tstackput1
  6575 00005012 B00A                <2> 	mov al,10			;Get RTC register A
  6576 00005014 E879010000          <2> 	call tget1
  6577 00005019 A880                <2> 	test al,0x80			;Is update in progress?
  6578 0000501B 75F0                <2> 	jne time				; yes, wait
  6579                              <2> 
  6580 0000501D B000                <2> 	mov al,0			;Get seconds (00 to 59)
  6581 0000501F E86E010000          <2> 	call tget1
  6582 00005024 A2[D0510000]        <2> 	mov [RTCtimeSecond],al
  6583                              <2> 
  6584 00005029 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  6585 0000502B E862010000          <2> 	call tget1
  6586 00005030 A2[D1510000]        <2> 	mov [RTCtimeMinute],al
  6587                              <2> 
  6588 00005035 B004                <2> 	mov al,0x04			;Get hours (see notes)
  6589 00005037 E856010000          <2> 	call tget1
  6590 0000503C A2[D2510000]        <2> 	mov [RTCtimeHour],al
  6591                              <2> 
  6592 00005041 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  6593 00005043 E84A010000          <2> 	call tget1
  6594 00005048 A2[D3510000]        <2> 	mov [RTCtimeDay],al
  6595                              <2> 
  6596 0000504D B008                <2> 	mov al,0x08			;Get month (01 to 12)
  6597 0000504F E83E010000          <2> 	call tget1
  6598 00005054 A2[D4510000]        <2> 	mov [RTCtimeMonth],al
  6599                              <2> 
  6600 00005059 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  6601 0000505B E832010000          <2> 	call tget1
  6602 00005060 A2[D5510000]        <2> 	mov [RTCtimeYear],al
  6603                              <2> 	
  6604 00005065 BE[D9510000]        <2> 	mov esi, timeshow
  6605 0000506A 8A2D[D2510000]      <2> 	mov ch, [RTCtimeHour]
  6606 00005070 E828010000          <2> 	call tput1
  6607 00005075 8A2D[D1510000]      <2> 	mov ch, [RTCtimeMinute]
  6608 0000507B E81D010000          <2> 	call tput1
  6609 00005080 8A2D[D0510000]      <2> 	mov ch, [RTCtimeSecond]
  6610 00005086 E812010000          <2> 	call tput1
  6611 0000508B BE[E2510000]        <2> 	mov esi, dateshow
  6612 00005090 8A2D[D4510000]      <2> 	mov ch, [RTCtimeMonth]
  6613 00005096 E802010000          <2> 	call tput1
  6614 0000509B 8A2D[D3510000]      <2> 	mov ch, [RTCtimeDay]
  6615 000050A1 E8F7000000          <2> 	call tput1
  6616 000050A6 B520                <2> 	mov ch, 0x20
  6617 000050A8 E8F0000000          <2> 	call tput1
  6618 000050AD 4E                  <2> 	dec esi
  6619 000050AE 8A2D[D5510000]      <2> 	mov ch, [RTCtimeYear]
  6620 000050B4 E8E4000000          <2> 	call tput1
  6621 000050B9 E8BD000000          <2> 	call tstackget1
  6622 000050BE C3                  <2> 	ret
  6623 000050BF BE[D9510000]        <2> 	mov esi, timeshow
  6624 000050C4 E862CCFFFF          <2> 	call print
  6625                              <2> ;;get day of week
  6626                              <2> ;;add these:
  6627                              <2> ;;century value
  6628                              <2> ;;last 2 digits of year
  6629                              <2> ;;last 2 digits of year right shifted twice
  6630                              <2> ;;month table value
  6631                              <2> ;;day of the month
  6632                              <2> ;;divide these by 7
  6633                              <2> ;;the remainder is the day
  6634                              <2> findday:
  6635 000050C9 31C0                <2> 	xor eax, eax
  6636                              <2> ;;first convert the values from BCD to hex
  6637 000050CB A0[D3510000]        <2> 	mov al, [RTCtimeDay]
  6638 000050D0 E873000000          <2> 	call converttohex
  6639 000050D5 8825[D6510000]      <2> 	mov [dayhex], ah
  6640 000050DB A0[D4510000]        <2> 	mov al, [RTCtimeMonth]
  6641 000050E0 E863000000          <2> 	call converttohex
  6642 000050E5 8825[D7510000]      <2> 	mov [monthhex], ah
  6643 000050EB A0[D5510000]        <2> 	mov al, [RTCtimeYear]
  6644 000050F0 E853000000          <2> 	call converttohex
  6645 000050F5 8825[D8510000]      <2> 	mov [yearhex], ah
  6646 000050FB 31C0                <2> 	xor eax, eax
  6647 000050FD A0[D8510000]        <2> 	mov al, [yearhex]
  6648 00005102 C0E802              <2> 	shr al, 2
  6649 00005105 0205[D8510000]      <2> 	add al, [yearhex]
  6650 0000510B 0506000000          <2> 	add eax, 6
  6651 00005110 31DB                <2> 	xor ebx, ebx
  6652 00005112 8A1D[D7510000]      <2> 	mov bl, [monthhex]
  6653 00005118 FECB                <2> 	dec bl
  6654 0000511A 81C3[F7510000]      <2> 	add ebx, month
  6655 00005120 31C9                <2> 	xor ecx, ecx
  6656 00005122 8A0B                <2> 	mov cl, [ebx]
  6657 00005124 01C8                <2> 	add eax, ecx
  6658 00005126 8A0D[D6510000]      <2> 	mov cl, [dayhex]
  6659 0000512C 01C8                <2> 	add eax, ecx
  6660 0000512E 66BB0700            <2> 	mov bx, 7
  6661 00005132 31D2                <2> 	xor edx, edx
  6662 00005134 66F7F3              <2> 	div bx
  6663 00005137 C1E202              <2> 	shl edx, 2
  6664 0000513A 81C2[03520000]      <2> 	add edx, day
  6665 00005140 8B32                <2> 	mov esi, [edx]
  6666 00005142 E8E4CBFFFF          <2> 	call print
  6667 00005147 C3                  <2> 	ret
  6668                              <2> 	
  6669                              <2> converttohex:
  6670 00005148 88C4                <2> 	mov ah, al
  6671 0000514A C0E804              <2> 	shr al, 4
  6672 0000514D C0E404              <2> 	shl ah, 4
  6673 00005150 C0EC04              <2> 	shr ah, 4
  6674 00005153 3C00                <2> 	cmp al, 0
  6675 00005155 7409                <2> 	je noconverttohex
  6676                              <2> converttohexlp:
  6677 00005157 80C40A              <2> 	add ah, 10
  6678 0000515A FEC8                <2> 	dec al
  6679 0000515C 3C00                <2> 	cmp al, 0
  6680 0000515E 75F7                <2> 	jne converttohexlp
  6681                              <2> noconverttohex:
  6682 00005160 C3                  <2> 	ret
  6683                              <2> 	
  6684                              <2> tstackput1:
  6685 00005161 8935[CC510000]      <2> 	mov [tstack + 20], esi
  6686 00005167 BE[B8510000]        <2> 	mov esi, tstack
  6687 0000516C 8906                <2> 	mov [esi], eax
  6688 0000516E 895E04              <2> 	mov [esi + 4], ebx
  6689 00005171 894E08              <2> 	mov [esi + 8], ecx
  6690 00005174 89560C              <2> 	mov [esi + 12], edx
  6691 00005177 897E10              <2> 	mov [esi + 16], edi
  6692 0000517A C3                  <2> 	ret
  6693                              <2> 	
  6694                              <2> tstackget1:
  6695 0000517B BE[B8510000]        <2> 	mov esi, tstack
  6696 00005180 8B06                <2> 	mov eax, [esi]
  6697 00005182 8B5E04              <2> 	mov ebx, [esi + 4]
  6698 00005185 8B4E08              <2> 	mov ecx, [esi + 8]
  6699 00005188 8B560C              <2> 	mov edx, [esi + 12]
  6700 0000518B 8B7E10              <2> 	mov edi, [esi + 16]
  6701 0000518E 8B7614              <2> 	mov esi, [esi + 20]
  6702 00005191 C3                  <2> 	ret
  6703                              <2> 	
  6704                              <2> tget1:
  6705 00005192 66BA7000            <2> 	mov dx, 0x70
  6706 00005196 EE                  <2> 	out dx, al
  6707 00005197 6642                <2> 	inc dx
  6708 00005199 EC                  <2> 	in al, dx
  6709 0000519A 664A                <2> 	dec dx
  6710 0000519C C3                  <2> 	ret
  6711                              <2> 	
  6712                              <2> tput1:
  6713 0000519D 66C1E904            <2> 	shr cx, 4
  6714 000051A1 B030                <2> 	mov al, 48
  6715 000051A3 00E8                <2> 	add al, ch
  6716 000051A5 8806                <2> 	mov [esi], al
  6717 000051A7 46                  <2> 	inc esi
  6718 000051A8 B030                <2> 	mov al, 48
  6719 000051AA C0E904              <2> 	shr cl, 4
  6720 000051AD 00C8                <2> 	add al, cl
  6721 000051AF 8806                <2> 	mov [esi], al
  6722 000051B1 81C602000000        <2> 	add esi, 2
  6723 000051B7 C3                  <2> 	ret
  6724                              <2> 		
  6725 000051B8 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  6726 000051C1 000000000000000000- <2>
  6727 000051CA 000000000000        <2>
  6728 000051D0 00                  <2> 	RTCtimeSecond db 0
  6729 000051D1 00                  <2> 	RTCtimeMinute db 0
  6730 000051D2 00                  <2> 	RTCtimeHour db 0
  6731 000051D3 00                  <2> 	RTCtimeDay db 0
  6732 000051D4 00                  <2> 	RTCtimeMonth db 0
  6733 000051D5 00                  <2> 	RTCtimeYear db 0
  6734 000051D6 00                  <2> 	dayhex db 0
  6735 000051D7 00                  <2> 	monthhex db 0
  6736 000051D8 00                  <2> 	yearhex db 0
  6737 000051D9 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  6738 000051E2 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  6739 000051EB 302000              <2>
  6740                              <2> 	oldcentury:	;;from 1700 to 1900
  6741 000051EE 040200              <2> 	db 4,2,0
  6742                              <2> 	century:	;;from 2000 to 2500
  6743 000051F1 060402000604        <2> 	db 6,4,2,0,6,4
  6744                              <2> 	month:
  6745 000051F7 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  6746 00005200 000305              <2>
  6747                              <2> 	day:
  6748 00005203 [1F520000]          <2> 	dd sunday
  6749 00005207 [27520000]          <2> 	dd monday
  6750 0000520B [2F520000]          <2> 	dd tuesday
  6751 0000520F [38520000]          <2> 	dd wednesday
  6752 00005213 [43520000]          <2> 	dd thursday
  6753 00005217 [4D520000]          <2> 	dd friday
  6754 0000521B [55520000]          <2> 	dd saturday
  6755                              <2> sunday:
  6756 0000521F 53756E6461790A00    <2> 	db "Sunday",10,0
  6757                              <2> monday:
  6758 00005227 4D6F6E6461790A00    <2> 	db "Monday",10,0
  6759                              <2> tuesday:
  6760 0000522F 547565736461790A00  <2> 	db "Tuesday",10,0
  6761                              <2> wednesday:
  6762 00005238 5765646E6573646179- <2> 	db "Wednesday",10,0
  6763 00005241 0A00                <2>
  6764                              <2> thursday:
  6765 00005243 54687572736461790A- <2> 	db "Thursday",10,0
  6766 0000524C 00                  <2>
  6767                              <2> friday:
  6768 0000524D 4672696461790A00    <2> 	db "Friday",10,0
  6769                              <2> saturday:
  6770 00005255 53617475726461790A- <2> 	db "Saturday",10,0
  6771 0000525E 00                  <2>
  6772                              <1> %include 'source/programs/turnoff.asm'
  6773 0000525F FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6774 00005268 00                  <2>
  6775                              <2> 	turnoff:
  6776 00005269 66BB[8452]          <2> 			mov bx, shutdown
  6777 0000526D 66891D[D70C0000]    <2> 			mov [realmodeptr], bx
  6778 00005274 BB[AE520000]        <2> 			mov ebx, halt
  6779 00005279 891D[D30C0000]      <2> 			mov [realmodereturn], ebx
  6780 0000527F E938B9FFFF          <2> 			jmp realmode
  6781                              <2> 
  6782                              <2> [BITS 16]
  6783                              <2> 		shutdown:
  6784 00005284 B453                <2> 			mov ah, 0x53
  6785 00005286 B004                <2> 			mov al, 4
  6786 00005288 31DB                <2> 			xor bx, bx
  6787 0000528A CD15                <2> 			int 0x15
  6788                              <2> 			
  6789 0000528C B453                <2> 			mov ah, 0x53
  6790 0000528E B001                <2> 			mov al, 1
  6791 00005290 31DB                <2> 			xor bx, bx
  6792 00005292 CD15                <2> 			int 0x15
  6793                              <2> 			
  6794 00005294 B453                <2> 			mov ah, 0x53
  6795 00005296 B008                <2> 			mov al, 8
  6796 00005298 BB0100              <2> 			mov bx, 1
  6797 0000529B B90100              <2> 			mov cx, 1
  6798 0000529E CD15                <2> 			int 0x15
  6799                              <2> 			
  6800 000052A0 B453                <2> 			mov ah, 0x53
  6801 000052A2 B007                <2> 			mov al, 7
  6802 000052A4 BB0100              <2> 			mov bx, 1
  6803 000052A7 B90300              <2> 			mov cx, 3
  6804 000052AA CD15                <2> 			int 0x15
  6805 000052AC EBFE                <2> 			jmp $
  6806                              <2> 			[BITS 32]
  6807 000052AE EBFE                <2> halt: jmp $
  6808                              <1> %include 'source/programs/wait.asm'
  6809 000052B0 FF2C7761697400      <2> db 255,44,"wait",0
  6810                              <2> waitkey:
  6811 000052B7 E849D0FFFF          <2> 		call getchar
  6812 000052BC C3                  <2> 		ret
  6813                              <1> %include 'source/programs/while.asm'
  6814 000052BD FF2C7768696C6500    <2> db 255,44,"while",0
  6815 000052C5 30C0                <2> whilecmd:  xor al, al
  6816 000052C7 3805[60F40000]      <2> 	cmp [BATCHISON], al
  6817 000052CD 0F847FE7FFFF        <2> 	je near notbatch
  6818 000052D3 8B35[5CF40000]      <2> 	mov esi, [BATCHPOS]
  6819 000052D9 81EE02000000        <2> 	sub esi, 2
  6820 000052DF 4E                  <2> whilefnd: dec esi
  6821 000052E0 8A06                <2> 	mov al, [esi]
  6822 000052E2 3C0A                <2> 	cmp al, 10
  6823 000052E4 0F840A000000        <2> 	je near whilefnd2
  6824 000052EA 3C00                <2> 	cmp al, 0
  6825 000052EC 0F8402000000        <2> 	je near whilefnd2
  6826 000052F2 EBEB                <2> 	jmp whilefnd
  6827                              <2> whilefnd2:
  6828 000052F4 46                  <2> 	inc esi
  6829 000052F5 8935[62F40000]      <2> 	mov [LOOPPOS], esi
  6830 000052FB C605[61F40000]01    <2> 	mov BYTE [LOOPON], 1
  6831 00005302 BE[66080100]        <2> 	mov esi, buftxt
  6832 00005307 BB[66080100]        <2> 	mov ebx, buftxt
  6833 0000530C 81C306000000        <2> 	add ebx, 6
  6834 00005312 E92CF2FFFF          <2> 	jmp chkeqsn
  6835                              <1> progend:		;programs end here	
  6836                              <1> batchprogend:
  6837                                  	%include "source/hardware.asm"
  6838                              <1> %ifdef gui.included
  6839                              <1> 	%include "source/drivers/video/vesa.asm"
  6840                              <2> [BITS 16]
  6841                              <2> guiswitch:
  6842 00005317 81F90000            <2> 	cmp cx, 0
  6843 0000531B 750B                <2> 	jne guiswitchdefnum
  6844 0000531D B81200              <2> 	mov ax, 12h
  6845 00005320 31DB                <2> 	xor bx, bx
  6846 00005322 CD10                <2> 	int 10h
  6847 00005324 E85100              <2> 	call guiloadagain
  6848                              <2> guiswitchnocando:
  6849 00005327 C3                  <2> 	ret	;return without switching as mode number is bad
  6850                              <2> guiswitchdefnum:	;switch to a defined mode number
  6851 00005328 B8004F              <2> 	mov ax, 0x4F00
  6852 0000532B BF[F554]            <2> 	mov di, VBEMODEBLOCK
  6853 0000532E CD10                <2> 	int 10h
  6854 00005330 BE[1755]            <2> 	mov si, reserved
  6855 00005333 81EE0200            <2> 	sub si, 2
  6856                              <2> .loop:
  6857 00005337 81C60200            <2> 	add si, 2
  6858 0000533B 81FE[F555]          <2> 	cmp si, oemdata
  6859 0000533F 74E6                <2> 	je guiswitchnocando
  6860 00005341 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6861 00005345 74E0                <2> 	je guiswitchnocando
  6862 00005347 390C                <2> 	cmp [si], cx
  6863 00005349 75EC                <2> 	jne .loop
  6864 0000534B 8936[4F54]          <2> 	mov [videomodecache], si
  6865 0000534F 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6866 00005353 B8014F              <2> 	mov ax, 0x4F01
  6867 00005356 BF[F556]            <2> 	mov di, VBEMODEINFOBLOCK
  6868 00005359 890E[4D54]          <2> 	mov [vesamode], cx
  6869 0000535D CD10                <2> 	int 10h
  6870 0000535F E9CB00              <2> 	jmp selectedvesa
  6871                              <2> guiload:
  6872 00005362 BE[CD54]            <2> 	mov si, bootmsg
  6873 00005365 E812AD              <2> 	call printrm
  6874 00005368 31C0                <2> 	xor ax, ax
  6875 0000536A CD16                <2> 	int 16h
  6876 0000536C 3C79                <2> 	cmp al, "y"
  6877 0000536E 0F85C2AC            <2> 	jne near vgaset
  6878 00005372 BE[7689]            <2> 	mov si, crlf
  6879 00005375 E802AD              <2> 	call printrm
  6880                              <2> guiloadagain:
  6881 00005378 B8004F              <2> 	mov ax, 04F00h
  6882 0000537B BF[F554]            <2> 	mov di, VBEMODEBLOCK
  6883 0000537E CD10                <2> 	int 10h
  6884 00005380 BE[1755]            <2> 	mov si, reserved
  6885 00005383 81EE0200            <2> 	sub si, 2
  6886                              <2> findvideomodes:
  6887 00005387 81C60200            <2> 	add si, 2
  6888 0000538B 8B0C                <2> 	mov cx, [si]
  6889 0000538D 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6890 00005391 0F840A00            <2> 	je near nextvmode
  6891 00005395 81FE[F555]          <2> 	cmp si, oemdata
  6892 00005399 0F8397AC            <2> 	jae near vgaset	;;kill if no valid list is found
  6893 0000539D EBE8                <2> 	jmp findvideomodes 	
  6894                              <2> ;;debug,shows vmodes available
  6895                              <2> nextvmode:
  6896 0000539F 81EE0200            <2> 	sub si, 2
  6897 000053A3 81FE[1755]          <2> 	cmp si, reserved
  6898 000053A7 0F82CDFF            <2> 	jb near guiloadagain
  6899 000053AB 8B0C                <2> 	mov cx, [si]
  6900 000053AD 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6901 000053B1 0F84EAFF            <2> 	je near nextvmode
  6902 000053B5 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  6903 000053B9 B8014F              <2> 	mov ax, 04F01h
  6904 000053BC BF[F556]            <2> 	mov di, VBEMODEINFOBLOCK
  6905 000053BF 890E[4D54]          <2> 	mov [vesamode], cx
  6906 000053C3 CD10                <2> 	int 10h
  6907 000053C5 A0[0E57]            <2> 	mov al, [bitsperpixel]
  6908 000053C8 3C10                <2> 	cmp al, 16
  6909 000053CA 75D3                <2> 	jne nextvmode
  6910 000053CC 8936[4F54]          <2> 	mov [videomodecache], si
  6911 000053D0 84E4                <2> 	test ah, ah
  6912 000053D2 0F842200            <2> 	jz near setvesamode
  6913 000053D6 EBC7                <2> 	jmp nextvmode
  6914 000053D8 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  6915 000053E1 20766964656F206D6F- <2>
  6916 000053EA 6465204F4B3F28792F- <2>
  6917 000053F3 6E290D0A00          <2>
  6918                              <2> setvesamode:
  6919 000053F8 8B0E[0757]          <2> 	mov cx, [resolutionx]
  6920 000053FC E85900              <2> 	call decshow
  6921 000053FF B078                <2> 	mov al, "x"
  6922 00005401 E8C100              <2> 	call char
  6923 00005404 8B0E[0957]          <2> 	mov cx, [resolutiony]
  6924 00005408 E84D00              <2> 	call decshow
  6925 0000540B B040                <2> 	mov al, "@"
  6926 0000540D E8B500              <2> 	call char
  6927 00005410 31C9                <2> 	xor cx, cx
  6928 00005412 8A0E[0E57]          <2> 	mov cl, [bitsperpixel]
  6929 00005416 E83F00              <2> 	call decshow
  6930 00005419 BE[D853]            <2> 	mov si, isthisvideook
  6931 0000541C E85BAC              <2> 	call printrm
  6932 0000541F 31C0                <2> 	xor ax, ax
  6933 00005421 CD16                <2> 	int 16h
  6934 00005423 8B36[4F54]          <2> 	mov si, [videomodecache]
  6935 00005427 3C79                <2> 	cmp al, "y"
  6936 00005429 0F8572FF            <2> 	jne near nextvmode
  6937                              <2> selectedvesa:
  6938 0000542D 8B16[0757]          <2> 	mov dx, [resolutionx]
  6939 00005431 01D2                <2> 	add dx, dx
  6940 00005433 8916[F557]          <2> 	mov [resolutionx2], dx
  6941 00005437 31D2                <2> 	xor dx, dx
  6942 00005439 31C9                <2> 	xor cx, cx
  6943 0000543B B8024F              <2> 	mov ax, 04F02h
  6944 0000543E 8B1E[4D54]          <2> 	mov bx, [vesamode]
  6945 00005442 CD10                <2> 	int 10h		;;enter VESA mode
  6946 00005444 C606[9CDB]01        <2> 	mov byte [guion], 1
  6947 00005449 E8F8AB              <2> 	call getmemorysize;get the memory map after the video is initialized
  6948 0000544C C3                  <2> 	ret
  6949                              <2> 	
  6950 0000544D 0000                <2> vesamode dw 0
  6951 0000544F 0000                <2> videomodecache dw 0
  6952                              <2> 
  6953 00005451 0000000000          <2> dcnm db 0,0,0,0,0
  6954 00005456 0000                <2> dcnmend db 0,0
  6955                              <2> 
  6956                              <2> 
  6957                              <2> decshow:
  6958 00005458 BE[5154]            <2> 	mov si, dcnm
  6959                              <2> decclear:
  6960 0000545B B030                <2> 	mov al, "0"
  6961 0000545D 8804                <2> 	mov [si], al
  6962 0000545F 46                  <2> 	inc si
  6963 00005460 81FE[5654]          <2> 	cmp si, dcnmend
  6964 00005464 76F5                <2> 	jbe decclear
  6965 00005466 4E                  <2> 	dec si
  6966 00005467 E81500              <2> 	call convertrm
  6967 0000546A BE[5154]            <2> 	mov si, dcnm
  6968                              <2> dectst:
  6969 0000546D 8A04                <2> 	mov al, [si]
  6970 0000546F 46                  <2> 	inc si
  6971 00005470 81FE[5654]          <2> 	cmp si, dcnmend
  6972 00005474 7704                <2> 	ja dectstend
  6973 00005476 3C30                <2> 	cmp al, "0"
  6974 00005478 76F3                <2> 	jbe dectst
  6975                              <2> dectstend:
  6976 0000547A 4E                  <2> 	dec si
  6977 0000547B E8FCAB              <2> 	call printrm
  6978 0000547E C3                  <2> 	ret
  6979                              <2> 	
  6980                              <2> 	
  6981                              <2> convertrm:
  6982 0000547F 4E                  <2> 	dec si
  6983 00005480 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  6984                              <2> cnvrtrm:
  6985 00005482 89DE                <2> 	mov si, bx
  6986 00005484 81EE0300            <2> 	sub si, 3
  6987 00005488 46                  <2> ten3rm:	inc si
  6988 00005489 81F9E803            <2> 	cmp cx, 1000
  6989 0000548D 7208                <2> 	jb ten2rm
  6990 0000548F 81E9E803            <2> 	sub cx, 1000
  6991 00005493 FE04                <2> 	inc byte [si]
  6992 00005495 EBEB                <2> 	jmp cnvrtrm
  6993 00005497 46                  <2> ten2rm:	inc si
  6994 00005498 81F96400            <2> 	cmp cx, 100
  6995 0000549C 7208                <2> 	jb ten1rm
  6996 0000549E 81E96400            <2> 	sub cx, 100
  6997 000054A2 FE04                <2> 	inc byte [si]
  6998 000054A4 EBDC                <2> 	jmp cnvrtrm
  6999 000054A6 46                  <2> ten1rm:	inc si
  7000 000054A7 81F90A00            <2> 	cmp cx, 10
  7001 000054AB 7208                <2> 	jb ten0rm
  7002 000054AD 81E90A00            <2> 	sub cx, 10
  7003 000054B1 FE04                <2> 	inc byte [si]
  7004 000054B3 EBCD                <2> 	jmp cnvrtrm
  7005 000054B5 46                  <2> ten0rm:	inc si
  7006 000054B6 81F90100            <2> 	cmp cx, 1
  7007 000054BA 7208                <2> 	jb tendnrm
  7008 000054BC 81E90100            <2> 	sub cx, 1
  7009 000054C0 FE04                <2> 	inc byte [si]
  7010 000054C2 EBBE                <2> 	jmp cnvrtrm
  7011                              <2> tendnrm:
  7012 000054C4 C3                  <2> 	ret
  7013                              <2> 
  7014                              <2>     char: 		    ;char must be in al
  7015 000054C5 BB0700              <2>        mov bx, 07
  7016 000054C8 B40E                <2> 	   mov ah, 0Eh
  7017 000054CA CD10                <2> 	   int 10h
  7018 000054CC C3                  <2> 	   ret
  7019                              <2> 
  7020 000054CD 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  7021 000054D6 20746865204755493F- <2>
  7022 000054DF 28792F6E2900        <2>
  7023                              <2> 
  7024                              <2> 
  7025                              <2> mcursor:
  7026 000054E5 01                  <2> 	db	00000001b
  7027 000054E6 81                  <2> 	db	10000001b
  7028 000054E7 C1                  <2> 	db	11000001b
  7029 000054E8 E1                  <2> 	db	11100001b
  7030 000054E9 F1                  <2> 	db	11110001b
  7031 000054EA F9                  <2> 	db	11111001b
  7032 000054EB FD                  <2> 	db	11111101b
  7033 000054EC FF                  <2> 	db	11111111b
  7034 000054ED F9                  <2> 	db	11111001b
  7035 000054EE B9                  <2> 	db	10111001b
  7036 000054EF 39                  <2> 	db	00111001b
  7037 000054F0 1C                  <2> 	db	00011100b
  7038 000054F1 1C                  <2> 	db	00011100b
  7039 000054F2 0E                  <2> 	db	00001110b
  7040 000054F3 0E                  <2> 	db	00001110b
  7041 000054F4 0C                  <2> 	db	00001100b
  7042                              <2> mcursorend:
  7043                              <2> 
  7044                              <2> 
  7045                              <2> VBEMODEBLOCK:
  7046 000054F5 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  7047 000054F9 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  7048 000054FB 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  7049 000054FF 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  7050 00005503 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  7051 00005507 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  7052 00005509 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  7053 0000550B 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  7054 0000550F 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  7055 00005513 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  7056 00005517 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  7057 000055F5 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  7058                              <2> 
  7059                              <2> VBEMODEINFOBLOCK:
  7060                              <2> ;Mandatory information for all VBE revision
  7061 000056F5 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  7062 000056F7 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  7063 000056F8 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  7064 000056F9 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  7065 000056FB 00<rept>            <2> winsize          	times  2 db 0	;Window size
  7066 000056FD 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  7067 000056FF 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  7068 00005701 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  7069 00005705 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  7070                              <2> 
  7071                              <2> ;Mandatory information for VBE 1.2 and above
  7072 00005707 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  7073 00005709 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  7074 0000570B 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  7075 0000570C 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  7076 0000570D 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  7077 0000570E 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  7078 0000570F 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  7079 00005710 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  7080 00005711 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  7081 00005712 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  7082 00005713 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  7083                              <2> 
  7084                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  7085 00005714 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  7086 00005715 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  7087 00005716 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  7088 00005717 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  7089 00005718 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  7090 00005719 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  7091 0000571A 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  7092 0000571B 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  7093 0000571C 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  7094                              <2> 
  7095                              <2> ;Mandatory information for VBE 2.0 and above
  7096 0000571D 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  7097 00005721 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  7098 00005725 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  7099 00005727 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  7100                              <2> 
  7101 000057F5 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  7102                              <2> VBEEND:
  7103                              <2> [BITS 32]
  7104                              <1> 	%include "source/drivers/input/mouse.asm"
  7105 000057F9 00                  <2> mousedisabled db 0
  7106                              <2> 	
  7107                              <2> 	cursorgui:
  7108 000057FA 803D[50840000]01    <2> 		cmp byte [mouseon], 1
  7109 00005801 0F8432000000        <2> 		je near mousedaemon
  7110 00005807 803D[9CDB0000]00    <2> 		cmp byte [guion], 0
  7111 0000580E 0F84D2040000        <2> 		je near entdown
  7112                              <2> 	initmouse:
  7113 00005814 803D[9CDB0000]00    <2> 		cmp byte [guion], 0
  7114 0000581B 7405                <2> 		je noswmsposinit
  7115 0000581D E809130000          <2> 		call switchmousepos2
  7116                              <2> 	noswmsposinit:
  7117 00005822 E85D020000          <2> 	  	call PS2SET
  7118 00005827 E886020000          <2> 		call ACTMOUS
  7119 0000582C C605[50840000]01    <2> 		mov byte [mouseon],1
  7120 00005833 E89F020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  7121                              <2> 		;call GETB
  7122                              <2> 				;;If the bytes are mixed up,
  7123                              <2> 				;;remove this line or add another of this line.
  7124                              <2> 	nomouse:
  7125 00005838 C3                  <2> 		ret
  7126                              <2> 		
  7127                              <2> 	mousedaemon:
  7128 00005839 803D[50840000]01    <2> 		cmp byte [mouseon], 1
  7129 00005840 75D2                <2> 		jne initmouse
  7130 00005842 E464                <2> 		in al, 64h ; Status
  7131 00005844 A820                <2> 		test al, 20h ; PS2-Mouse?
  7132 00005846 0F8502000000        <2> 		jnz near moused
  7133 0000584C F4                  <2> 		hlt
  7134 0000584D C3                  <2> 		ret
  7135                              <2> 	moused:
  7136 0000584E 803D[F9570000]01    <2> 		cmp byte [mousedisabled], 1
  7137 00005855 74E1                <2> 		je nomouse
  7138 00005857 E87B020000          <2> 		  call GETB
  7139 0000585C 88C3                <2> 		  mov  bl, al
  7140 0000585E 80E301              <2> 		  and  bl, 1
  7141 00005861 881D[FC5A0000]      <2> 		  mov  BYTE [LBUTTON], bl
  7142 00005867 88C3                <2> 		  mov  bl, al
  7143 00005869 80E302              <2> 		  and  bl, 2
  7144 0000586C D0EB                <2> 		  shr  bl, 1
  7145 0000586E 881D[FD5A0000]      <2> 		  mov  BYTE [RBUTTON], bl
  7146 00005874 88C3                <2> 		  mov  bl, al
  7147 00005876 80E304              <2> 		  and  bl, 4
  7148 00005879 C0EB02              <2> 		  shr  bl, 2
  7149 0000587C 881D[FE5A0000]      <2> 		  mov  BYTE [MBUTTON], bl
  7150 00005882 E850020000          <2> 		  call GETB
  7151 00005887 A2[FF5A0000]        <2> 		  mov  BYTE [XCOORD], al
  7152 0000588C E846020000          <2> 		  call GETB
  7153 00005891 A2[005B0000]        <2> 		  mov  BYTE [YCOORD], al
  7154                              <2> 
  7155                              <2> 	showpixelcursor:
  7156 00005896 668B15[EB590000]    <2> 		mov dx, [mousecursorposition]
  7157 0000589D 668B0D[ED590000]    <2> 		mov cx, [mousecursorposition + 2]
  7158 000058A4 668915[E7590000]    <2> 		mov [lastmouseposition], dx
  7159 000058AB 66890D[E9590000]    <2> 		mov [lastmouseposition + 2], cx
  7160 000058B2 A0[FF5A0000]        <2> 		mov al, [XCOORD]
  7161 000058B7 3C80                <2> 		cmp al, 128
  7162 000058B9 730C                <2> 		jae subxcoord
  7163 000058BB 00C0                <2> 		add al, al
  7164 000058BD 30E4                <2> 		xor ah, ah
  7165 000058BF 6601C2              <2> 		add dx, ax
  7166 000058C2 E90B000000          <2> 		jmp subxcoorddn
  7167                              <2> 	subxcoord:
  7168 000058C7 00C0                <2> 		add al, al
  7169 000058C9 30DB                <2> 		xor bl, bl
  7170 000058CB 28C3                <2> 		sub bl, al
  7171 000058CD 30FF                <2> 		xor bh, bh
  7172 000058CF 6629DA              <2> 		sub dx, bx
  7173                              <2> 	subxcoorddn:
  7174 000058D2 8A1D[005B0000]      <2> 		mov bl, [YCOORD]
  7175 000058D8 30C0                <2> 		xor al, al
  7176 000058DA 28D8                <2> 		sub al, bl
  7177 000058DC 3C80                <2> 		cmp al, 128
  7178 000058DE 730A                <2> 		jae subycoord
  7179 000058E0 30E4                <2> 		xor ah, ah
  7180 000058E2 6601C1              <2> 		add cx, ax
  7181 000058E5 E909000000          <2> 		jmp subycoorddn
  7182                              <2> 	subycoord:
  7183 000058EA 30DB                <2> 		xor bl, bl
  7184 000058EC 28C3                <2> 		sub bl, al
  7185 000058EE 30FF                <2> 		xor bh, bh
  7186 000058F0 6629D9              <2> 		sub cx, bx
  7187                              <2> 	subycoorddn:
  7188 000058F3 6681FA204E          <2> 		cmp dx, 20000
  7189 000058F8 7603                <2> 		jbe nooriginx2
  7190 000058FA 6631D2              <2> 		xor dx, dx
  7191                              <2> 	nooriginx2:
  7192 000058FD 6681F9204E          <2> 		cmp cx, 20000
  7193 00005902 7603                <2> 		jbe nooriginy2
  7194 00005904 6631C9              <2> 		xor cx, cx
  7195                              <2> 	nooriginy2:
  7196 00005907 6681FA0000          <2> 		cmp dx, 0
  7197 0000590C 7415                <2> 		je nofixxcolumn2
  7198 0000590E 663B15[F5570000]    <2> 		cmp dx, [resolutionx2]
  7199 00005915 720C                <2> 		jb nofixxcolumn2
  7200 00005917 668B15[F5570000]    <2> 		mov dx, [resolutionx2]
  7201 0000591E 6681EA0200          <2> 		sub dx, 2
  7202                              <2> 	nofixxcolumn2:
  7203 00005923 6681F90000          <2> 		cmp cx, 0
  7204 00005928 7415                <2> 		je nofixyrow2
  7205 0000592A 663B0D[09570000]    <2> 		cmp cx, [resolutiony]
  7206 00005931 720C                <2> 		jb nofixyrow2
  7207 00005933 668B0D[09570000]    <2> 		mov cx, [resolutiony]
  7208 0000593A 6681E90100          <2> 		sub cx, 1
  7209                              <2> 	nofixyrow2:
  7210 0000593F 668915[EB590000]    <2> 		mov [mousecursorposition], dx
  7211 00005946 66890D[ED590000]    <2> 		mov [mousecursorposition + 2], cx
  7212 0000594D 803D[9CDB0000]00    <2> 		cmp byte [guion], 0
  7213 00005954 0F8495000000        <2> 		je near termmouse
  7214 0000595A E86C110000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  7215 0000595F 803D[FC5A0000]01    <2> 		cmp byte [LBUTTON], 1
  7216 00005966 0F84A7220000        <2> 		je near clickicon
  7217 0000596C 803D[FD5A0000]01    <2> 		cmp byte [RBUTTON], 1
  7218 00005973 0F849A220000        <2> 		je near clickicon
  7219 00005979 A0[007C0000]        <2> 		mov al, [pbutton]
  7220 0000597E C705[037C0000]0000- <2> 		mov dword [dragging], 0
  7221 00005986 0000                <2>
  7222 00005988 3C00                <2> 		cmp al, 0
  7223 0000598A 740F                <2> 		je nopreviousbutton
  7224 0000598C E8E2100000          <2> 		call clearmousecursor
  7225 00005991 E849140000          <2> 		call reloadallgraphics
  7226                              <2> 	windowtermcopyend:
  7227 00005996 E890110000          <2> 		call switchmousepos2
  7228                              <2> 	nopreviousbutton:
  7229 0000599B 30C0                <2> 		xor al, al
  7230 0000599D A2[007C0000]        <2> 		mov [pbutton], al
  7231 000059A2 A2[67810000]        <2> 		mov [windrag], al
  7232 000059A7 A0[FC5A0000]        <2> 		mov al, [LBUTTON]
  7233 000059AC A2[017C0000]        <2> 		mov [pLBUTTON], al
  7234 000059B1 A0[FD5A0000]        <2> 		mov al, [RBUTTON]
  7235 000059B6 A2[027C0000]        <2> 		mov [pRBUTTON], al
  7236 000059BB 31D2                <2> 		xor edx, edx
  7237 000059BD 668B15[EB590000]    <2> 		mov dx, [mousecursorposition]
  7238 000059C4 668B0D[ED590000]    <2> 		mov cx, [mousecursorposition + 2]
  7239 000059CB 66BB18C7            <2> 		mov bx, 1100011100011000b
  7240 000059CF 66B80100            <2> 		mov ax, 1
  7241 000059D3 C605[FD7B0000]01    <2> 		mov byte [showcursorfonton], 1
  7242 000059DA E8CA1A0000          <2> 		call showfontvesa
  7243 000059DF C605[FD7B0000]00    <2> 		mov byte [showcursorfonton], 0
  7244 000059E6 C3                  <2> 		ret
  7245                              <2> 
  7246 000059E7 00000000            <2> lastmouseposition dw 0,0
  7247 000059EB 00000000            <2> mousecursorposition dw 0,0	
  7248                              <2> 
  7249                              <2> termmouse:
  7250 000059EF BE[7C0F0100]        <2> 		mov esi, videobuf
  7251 000059F4 31D2                <2> 		xor edx, edx
  7252 000059F6 668B15[E7590000]    <2> 		mov dx, [lastmouseposition]
  7253 000059FD 668B0D[E9590000]    <2> 		mov cx, [lastmouseposition + 2]
  7254 00005A04 66A1[825A0000]      <2> 		mov ax, [cursorcache]
  7255 00005A0A 663D0000            <2> 		cmp ax, 0
  7256 00005A0E 7425                <2> 		je nocopycursorcache
  7257 00005A10 66C1E104            <2> 		shl cx, 4
  7258 00005A14 66C1E203            <2> 		shl dx, 3
  7259 00005A18 01D6                <2> 		add esi, edx
  7260 00005A1A 6631D2              <2> 		xor dx, dx
  7261 00005A1D 8A15[87250000]      <2> 		mov dl, [charxy]
  7262 00005A23 6641                <2> 		inc cx
  7263                              <2> termmousecplp1:
  7264 00005A25 01D6                <2> 		add esi, edx
  7265 00005A27 6649                <2> 		dec cx
  7266 00005A29 6681F90000          <2> 		cmp cx, 0
  7267 00005A2E 75F5                <2> 		jne termmousecplp1
  7268 00005A30 29D6                <2> 		sub esi, edx
  7269 00005A32 668906              <2> 		mov [esi], ax
  7270                              <2> nocopycursorcache:
  7271 00005A35 BE[7C0F0100]        <2> 		mov esi, videobuf
  7272 00005A3A 31D2                <2> 		xor edx, edx
  7273 00005A3C 668B15[EB590000]    <2> 		mov dx, [mousecursorposition]
  7274 00005A43 668B0D[ED590000]    <2> 		mov cx, [mousecursorposition + 2]
  7275 00005A4A 66C1E104            <2> 		shl cx, 4
  7276 00005A4E 66C1E203            <2> 		shl dx, 3
  7277 00005A52 01D6                <2> 		add esi, edx
  7278 00005A54 6631D2              <2> 		xor dx, dx
  7279 00005A57 8A15[87250000]      <2> 		mov dl, [charxy]
  7280 00005A5D 6641                <2> 		inc cx
  7281                              <2> termmousecplp2:
  7282 00005A5F 01D6                <2> 		add esi, edx
  7283 00005A61 6649                <2> 		dec cx
  7284 00005A63 6681F90000          <2> 		cmp cx, 0
  7285 00005A68 75F5                <2> 		jne termmousecplp2
  7286 00005A6A 29D6                <2> 		sub esi, edx
  7287 00005A6C 668B06              <2> 		mov ax, [esi]
  7288 00005A6F 66A3[825A0000]      <2> 		mov [cursorcache], ax
  7289 00005A75 B080                <2> 		mov al, 128
  7290 00005A77 B407                <2> 		mov ah, 7
  7291 00005A79 668906              <2> 		mov [esi], ax
  7292 00005A7C E8DCCDFFFF          <2> 		call termcopy
  7293 00005A81 C3                  <2> 		ret
  7294 00005A82 0000                <2> cursorcache db 0,0
  7295                              <2> 
  7296                              <2> PS2SET:
  7297 00005A84 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7298 00005A86 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7299 00005A88 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7300 00005A8D C3                  <2> ret
  7301                              <2> 
  7302                              <2> CHKPRT:
  7303 00005A8E 66B96400            <2>   mov  cx, 100
  7304                              <2>  .again:
  7305 00005A92 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7306 00005A94 A802                <2>   test al, 2		; Check if input buffer is empty
  7307 00005A96 7402                <2>   je .go
  7308 00005A98 E2F8                <2>   loop .again
  7309                              <2>  .go:
  7310 00005A9A C3                  <2> ret
  7311                              <2> 
  7312                              <2> WMOUS:
  7313 00005A9B B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7314 00005A9D E664                <2>   out  0x64, al		; write to keyboardcontroller
  7315 00005A9F E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7316 00005AA4 C3                  <2> ret
  7317                              <2> 
  7318                              <2> MBUFFUL:
  7319 00005AA5 66B96400            <2>   mov cx, 100
  7320                              <2>  .mn:
  7321 00005AA9 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7322 00005AAB A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7323 00005AAD 7402                <2>   jz  .mnn
  7324 00005AAF E2F8                <2>   loop .mn
  7325                              <2>  .mnn:
  7326 00005AB1 C3                  <2> ret
  7327                              <2> 
  7328                              <2> 
  7329                              <2> ACTMOUS:
  7330 00005AB2 E8E4FFFFFF          <2>   call WMOUS
  7331 00005AB7 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7332 00005AB9 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7333 00005ABB E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7334 00005AC0 E801000000          <2>   call CHKMOUS		; check if a byte is available
  7335 00005AC5 C3                  <2> ret
  7336                              <2> 
  7337                              <2> CHKMOUS:
  7338 00005AC6 B300                <2>   mov  bl, 0
  7339 00005AC8 66B96400            <2>   mov cx, 100
  7340                              <2>  .vrd:
  7341 00005ACC E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7342 00005ACE A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7343 00005AD0 7504                <2>   jnz .yy
  7344 00005AD2 E2F8                <2>   loop .vrd
  7345 00005AD4 B301                <2>   mov  bl, 1
  7346                              <2>  .yy:
  7347 00005AD6 C3                  <2> ret
  7348                              <2> 
  7349                              <2> GETB:
  7350                              <2>  .cagain:
  7351 00005AD7 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7352 00005ADC 08DB                <2>   or bl, bl
  7353 00005ADE 75F7                <2>   jnz .cagain
  7354 00005AE0 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7355 00005AE2 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7356 00005AE4 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7357 00005AE9 6631C0              <2>   xor  ax, ax
  7358 00005AEC E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7359 00005AEE 88C2                <2>   mov  dl, al
  7360 00005AF0 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7361 00005AF2 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7362 00005AF4 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7363 00005AF9 88D0                <2>   mov  al, dl
  7364 00005AFB C3                  <2> ret
  7365                              <2> 
  7366 00005AFC 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7367 00005AFD 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7368 00005AFE 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7369 00005AFF 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7370 00005B00 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7371                              <1> %endif
  7372                              <1> %include "source/drivers/sound/pcspkr.asm"
  7373                              <2> ;PC Speaker Drivers
  7374                              <2> PCSpeakerRAW:
  7375 00005B01 60                  <2> 	pusha
  7376                              <2> nosoundrep:
  7377 00005B02 8B35[6B020000]      <2> 	mov esi, [soundpos]
  7378 00005B08 31C9                <2> 	xor ecx, ecx
  7379 00005B0A 668B0D[69020000]    <2> 	mov cx, [soundrepititions]
  7380 00005B11 6681F90000          <2> 	cmp cx, 0
  7381 00005B16 0F8548000000        <2> 	jne near donesetpitch
  7382 00005B1C 668B0E              <2> 	mov cx, [esi]
  7383 00005B1F 668B5E02            <2> 	mov bx, [esi + 2]
  7384 00005B23 66890D[69020000]    <2> 	mov [soundrepititions], cx
  7385 00005B2A 81C604000000        <2> 	add esi, 4
  7386 00005B30 8935[6B020000]      <2> 	mov [soundpos], esi
  7387 00005B36 3B35[6F020000]      <2> 	cmp esi, [soundendpos]
  7388 00005B3C 7735                <2> 	ja stopsound
  7389 00005B3E 66813D[69020000]00- <2> 	cmp word [soundrepititions], 0
  7390 00005B46 00                  <2>
  7391 00005B47 74B9                <2> 	je nosoundrep
  7392 00005B49 6681FB0000          <2> 	cmp bx, 0
  7393 00005B4E 740F                <2> 	je nosoundplay
  7394 00005B50 E840000000          <2> 	call setpitch
  7395 00005B55 E849000000          <2> 	call startsound
  7396 00005B5A E905000000          <2> 	jmp donesetpitch
  7397                              <2> nosoundplay:
  7398 00005B5F E846000000          <2> 	call killsound
  7399                              <2> donesetpitch:
  7400 00005B64 6649                <2> 	dec cx
  7401 00005B66 66890D[69020000]    <2> 	mov [soundrepititions], cx
  7402 00005B6D 61                  <2> 	popa
  7403 00005B6E E935A7FFFF          <2> 	jmp timerinterrupt
  7404                              <2> stopsound:
  7405 00005B73 31C0                <2> 	xor eax, eax
  7406 00005B75 66A3[69020000]      <2> 	mov [soundrepititions], ax
  7407 00005B7B A2[68020000]        <2> 	mov [soundon], al
  7408 00005B80 A3[6B020000]        <2> 	mov [soundpos], eax
  7409 00005B85 A3[6F020000]        <2> 	mov [soundendpos], eax
  7410 00005B8A E81B000000          <2> 	call killsound
  7411 00005B8F 61                  <2> 	popa
  7412 00005B90 E913A7FFFF          <2> 	jmp timerinterrupt
  7413                              <2> 
  7414                              <2> 
  7415                              <2> setpitch:
  7416 00005B95 B0B6                <2> 	mov al, 0xB6
  7417 00005B97 E643                <2> 	out 0x43, al
  7418 00005B99 6689D8              <2> 	mov ax, bx
  7419 00005B9C E642                <2> 	out 0x42, al
  7420 00005B9E 88E0                <2> 	mov al, ah
  7421 00005BA0 E642                <2> 	out 0x42, al
  7422 00005BA2 C3                  <2> 	ret
  7423                              <2> startsound:
  7424 00005BA3 E461                <2> 	in al, 0x61
  7425 00005BA5 0C03                <2> 	or al, 3
  7426 00005BA7 E661                <2> 	out 0x61, al
  7427 00005BA9 C3                  <2> 	ret
  7428                              <2> killsound:
  7429 00005BAA E461                <2> 	in al, 0x61
  7430 00005BAC 24FC                <2> 	and al, 0xFC
  7431 00005BAE E661                <2> 	out 0x61, al
  7432 00005BB0 C3                  <2> 	ret
  7433                              <2> 	
  7434                              <1> %ifdef sound.included
  7435                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7436                              <1> %endif
  7437                              <1> %ifdef io.serial
  7438                              <1> 	%include "source/drivers/input/serial.asm"
  7439                              <1> %else
  7440                              <1> 	%include "source/drivers/input/keyboard.asm"
  7441 00005BB1 00                  <2> specialkey db 0
  7442                              <2> ;charregion db 0
  7443                              <2> waitforinput:		;this is basically the idle process
  7444                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  7445                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  7446 00005BB2 6631C0              <2> 	xor ax, ax
  7447 00005BB5 A0[F5660000]        <2> 	mov al, [threadson]
  7448 00005BBA 8825[F5660000]      <2> 	mov [threadson], ah
  7449 00005BC0 FB                  <2> 	sti
  7450 00005BC1 F4                  <2> 	hlt
  7451 00005BC2 A2[F5660000]        <2> 	mov [threadson], al
  7452 00005BC7 66813D[69230000]00- <2> 	cmp word [trans], 0
  7453 00005BCF 00                  <2>
  7454 00005BD0 7401                <2> 	je getkey
  7455 00005BD2 C3                  <2> 	ret
  7456                              <2> getkey:
  7457 00005BD3 31C0                <2> 		xor eax, eax
  7458 00005BD5 A2[B15B0000]        <2> 		mov [specialkey], al
  7459 00005BDA A3[65230000]        <2> 		mov [lastkey], eax
  7460 00005BDF E464                <2> 		in al, 64h ; Status
  7461                              <2> 	%ifdef gui.included
  7462 00005BE1 A820                <2> 		test al, 20h ; PS2-Mouse?
  7463 00005BE3 0F8565FCFFFF        <2> 		jnz near moused
  7464                              <2> 	%endif
  7465 00005BE9 A801                <2> 		test al, 1 
  7466 00005BEB 74C5                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7467                              <2> 	calckey:
  7468 00005BED E460                <2> 		in al, 60h
  7469 00005BEF 30E4                <2> 		xor ah, ah
  7470 00005BF1 6689C3              <2> 		mov bx, ax
  7471 00005BF4 66A3[67230000]      <2> 		mov [lastkey + 2], ax
  7472 00005BFA BF[895D0000]        <2> 		mov edi, scancode
  7473                              <2> 	searchscan: 
  7474 00005BFF 80FB3A              <2> 		cmp bl, 3Ah
  7475 00005C02 7314                <2> 		jae scanother
  7476 00005C04 C1E004              <2> 		shl eax, 4
  7477 00005C07 01C7                <2> 		add edi, eax
  7478 00005C09 668B07              <2> 		mov ax, [edi]
  7479 00005C0C 663D0000            <2> 		cmp ax, 0
  7480 00005C10 7406                <2> 		je scanother
  7481 00005C12 E9D0000000          <2> 		jmp scanfound
  7482 00005C17 00                  <2> uppercase db 0
  7483                              <2> scanother:
  7484 00005C18 6631C0              <2> 		xor ax, ax
  7485 00005C1B 66A3[65230000]      <2> 		mov [lastkey], ax
  7486 00005C21 80FBE0              <2> 		cmp bl, 0E0h
  7487 00005C24 0F8477000000        <2> 		je near getkeyspecial
  7488 00005C2A 803D[B15B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7489 00005C31 7525                <2> 		jne nospecialkey
  7490 00005C33 80FB38              <2> 		cmp bl, 38h
  7491 00005C36 0F849A000000        <2> 		je near alton
  7492 00005C3C 80FBB8              <2> 		cmp bl, 0B8h
  7493 00005C3F 0F8499000000        <2> 		je near altoff
  7494 00005C45 80FB1D              <2> 		cmp bl, 1Dh
  7495 00005C48 0F8478000000        <2> 		je near ctron
  7496 00005C4E 80FB9D              <2> 		cmp bl, 9Dh
  7497 00005C51 0F8477000000        <2> 		je near ctroff
  7498 00005C57 C3                  <2> 		ret
  7499                              <2> nospecialkey:
  7500 00005C58 80FB2A              <2> 		cmp bl, 2Ah
  7501 00005C5B 0F8455000000        <2> 		je near shifton
  7502 00005C61 80FB36              <2> 		cmp bl, 36h
  7503 00005C64 0F844C000000        <2> 		je near shifton
  7504 00005C6A 80FB1C              <2> 		cmp bl, 1Ch
  7505 00005C6D 0F8473000000        <2> 		je near entdown
  7506 00005C73 80FBAA              <2> 		cmp bl, 0AAh
  7507 00005C76 0F8442000000        <2> 		je near shiftoff
  7508 00005C7C 80FBB6              <2> 		cmp bl, 0B6h
  7509 00005C7F 0F8439000000        <2> 		je near shiftoff
  7510 00005C85 80FB3A              <2> 		cmp bl, 3Ah
  7511 00005C88 0F84A7000000        <2> 		je near capslock
  7512 00005C8E 80FB45              <2> 		cmp bl, 0x45
  7513 00005C91 0F84AF000000        <2> 		je near numlock
  7514 00005C97 80FB46              <2> 		cmp bl, 0x46
  7515 00005C9A 0F84BE000000        <2> 		je near scrolllock
  7516 00005CA0 C3                  <2> 		ret
  7517                              <2> 	getkeyspecial:
  7518 00005CA1 C605[B15B0000]E0    <2> 		mov byte [specialkey], 0xE0
  7519 00005CA8 E940FFFFFF          <2> 		jmp calckey
  7520                              <2> 	shift:
  7521 00005CAD A0[175C0000]        <2> 		mov al, [uppercase]
  7522 00005CB2 3C01                <2> 		cmp al, 1
  7523 00005CB4 7308                <2> 		jae shiftoff
  7524                              <2> 	shifton:
  7525 00005CB6 C605[175C0000]01    <2> 		mov byte [uppercase], 1
  7526 00005CBD C3                  <2> 		ret
  7527                              <2> 	shiftoff:
  7528 00005CBE C605[175C0000]00    <2> 		mov byte [uppercase], 0
  7529 00005CC5 C3                  <2> 		ret
  7530                              <2> 	ctron:
  7531 00005CC6 C605[345D0000]01    <2> 		mov byte [ctrkey], 1
  7532 00005CCD C3                  <2> 		ret
  7533                              <2> 	ctroff:
  7534 00005CCE C605[345D0000]00    <2> 		mov byte [ctrkey], 0
  7535 00005CD5 C3                  <2> 		ret
  7536                              <2> 	alton:
  7537 00005CD6 C605[335D0000]01    <2> 		mov byte [altkey], 1
  7538 00005CDD C3                  <2> 		ret
  7539                              <2> 	altoff:
  7540 00005CDE C605[335D0000]00    <2> 		mov byte [altkey], 0
  7541 00005CE5 C3                  <2> 		ret
  7542                              <2> 	entdown:
  7543 00005CE6 C3                  <2> 		ret
  7544                              <2> scanfound:
  7545 00005CE7 81C708000000        <2> 		add edi, 8
  7546 00005CED 803D[345D0000]01    <2> 		cmp byte [ctrkey], 1
  7547 00005CF4 7306                <2> 		jae ctrlin
  7548 00005CF6 81EF08000000        <2> 		sub edi, 8
  7549                              <2> 	ctrlin:
  7550 00005CFC 81C704000000        <2> 		add edi, 4
  7551 00005D02 803D[335D0000]01    <2> 		cmp byte [altkey], 1
  7552 00005D09 7306                <2> 		jae altin
  7553 00005D0B 81EF04000000        <2> 		sub edi, 4
  7554                              <2> 	altin:
  7555 00005D11 81C702000000        <2> 		add edi, 2
  7556 00005D17 803D[175C0000]01    <2> 		cmp byte [uppercase], 1
  7557 00005D1E 7306                <2> 		jae uppercaseon
  7558 00005D20 81EF02000000        <2> 		sub edi, 2
  7559                              <2> 	uppercaseon:
  7560 00005D26 668B07              <2> 		mov ax,[edi]
  7561 00005D29 66A3[65230000]      <2> 		mov [lastkey], ax
  7562 00005D2F C3                  <2> 		ret
  7563                              <2> 		
  7564 00005D30 00                  <2> keyboardstatus db 0
  7565 00005D31 00                  <2> numlockstatus db 0
  7566 00005D32 00                  <2> scrolllockstatus db 0
  7567 00005D33 00                  <2> altkey db 0
  7568 00005D34 00                  <2> ctrkey db 0
  7569                              <2> 	capslock:
  7570 00005D35 8035[305D0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7571 00005D3C E835000000          <2> 		call updatekblights
  7572 00005D41 E967FFFFFF          <2> 		jmp shift
  7573                              <2> 		
  7574                              <2> 	numlock:
  7575 00005D46 8035[305D0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7576 00005D4D 8035[315D0000]01    <2> 		xor byte [numlockstatus], 1
  7577 00005D54 E81D000000          <2> 		call updatekblights
  7578 00005D59 E975FEFFFF          <2> 		jmp getkey
  7579                              <2> 	
  7580                              <2> 	scrolllock:
  7581 00005D5E 8035[305D0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7582 00005D65 8035[325D0000]01    <2> 		xor byte [scrolllockstatus], 1
  7583 00005D6C E805000000          <2> 		call updatekblights
  7584 00005D71 E95DFEFFFF          <2> 		jmp getkey
  7585                              <2> 		
  7586                              <2> 	updatekblights:
  7587 00005D76 B0ED                <2> 		mov al, 0xED
  7588 00005D78 66BA6000            <2> 		mov dx, 0x60
  7589 00005D7C EE                  <2> 		out dx, al
  7590                              <2> 	chkkbdack:
  7591 00005D7D EC                  <2> 		in al, dx
  7592 00005D7E 3CFA                <2> 		cmp al, 0xFA
  7593 00005D80 75FB                <2> 		jne chkkbdack
  7594 00005D82 A0[305D0000]        <2> 		mov al, [keyboardstatus]
  7595 00005D87 EE                  <2> 		out dx, al
  7596 00005D88 C3                  <2> 		ret
  7597                              <2> 		
  7598                              <2> scancode:
  7599                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  7600 00005D89 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7601 00005D92 00000000000000      <2>
  7602 00005D99 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7603 00005DA2 00000000000000      <2>
  7604 00005DA9 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  7605 00005DB2 00000000000000      <2>
  7606 00005DB9 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  7607 00005DC2 00000000000000      <2>
  7608 00005DC9 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  7609 00005DD2 00000000000000      <2>
  7610 00005DD9 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  7611 00005DE2 00000000000000      <2>
  7612 00005DE9 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  7613 00005DF2 00000000000000      <2>
  7614 00005DF9 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  7615 00005E02 00000000000000      <2>
  7616 00005E09 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  7617 00005E12 00000000000000      <2>
  7618 00005E19 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  7619 00005E22 00000000000000      <2>
  7620 00005E29 390028000000000000- <2> 	dw '9','(',0,0,0,0,0,0
  7621 00005E32 00000000000000      <2>
  7622 00005E39 300029000000000000- <2> 	dw '0',')',0,0,0,0,0,0
  7623 00005E42 00000000000000      <2>
  7624 00005E49 2D005F009D00F10000- <2> 	dw '-','_',0x9D,0xF1,0,0,0,0
  7625 00005E52 00000000000000      <2>
  7626 00005E59 3D002B00F700F60000- <2> 	dw '=','+',0xF7,0xF6,0,0,0,0
  7627 00005E62 00000000000000      <2>
  7628 00005E69 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  7629 00005E72 00000000000000      <2>
  7630 00005E79 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7631 00005E82 00000000000000      <2>
  7632 00005E89 7100510084008E0000- <2> 	dw 'q','Q',0x84,0x8E,0,0,0,0
  7633 00005E92 00000000000000      <2>
  7634 00005E99 7700570086008F0000- <2> 	dw 'w','W',0x86,0x8F,0,0,0,0
  7635 00005EA2 00000000000000      <2>
  7636 00005EA9 6500450082009000EE- <2> 	dw 'e','E',0x82,0x90,0xEE,'E',0,0
  7637 00005EB2 00450000000000      <2>
  7638 00005EB9 7200520089008A0070- <2> 	dw 'r','R',0x89,0x8A,'p','P',0,0
  7639 00005EC1 00500000000000      <2>
  7640 00005EC9 7400540081009A00E7- <2> 	dw 't','T',0x81,0x9A,0xE7,'T',0,0
  7641 00005ED2 00540000000000      <2>
  7642 00005ED9 790059009800000075- <2> 	dw 'y','Y',0x98,0,'u','Y',0,0
  7643 00005EE1 00590000000000      <2>
  7644 00005EE9 75005500A300970000- <2> 	dw 'u','U',0xA3,0x97,0,0,0,0
  7645 00005EF2 00000000000000      <2>
  7646 00005EF9 69004900A1008D0069- <2> 	dw 'i','I',0xA1,0x8D,'i','I',0,0
  7647 00005F01 00490000000000      <2>
  7648 00005F09 6F004F00A200950077- <2> 	dw 'o','O',0xA2,0x95,'w',0xEA,0,0
  7649 00005F11 00EA0000000000      <2>
  7650 00005F19 7000500094009900E3- <2> 	dw 'p','P',0x94,0x99,0xE3,0xEF,0,0
  7651 00005F22 00EF0000000000      <2>
  7652 00005F29 5B007B00F400000000- <2> 	dw '[','{',0xF4,0,0,0,0,0
  7653 00005F32 00000000000000      <2>
  7654 00005F39 5D007D00F500000000- <2> 	dw ']','}',0xF5,0,0,0,0,0
  7655 00005F42 00000000000000      <2>
  7656 00005F49 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7657 00005F52 00000000000000      <2>
  7658 00005F59 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7659 00005F62 00000000000000      <2>
  7660 00005F69 61004100A0008500E0- <2> 	dw 'a','A',0xA0,133,224,'A',0,0
  7661 00005F72 00410000000000      <2>
  7662 00005F79 7300530015000000E5- <2> 	dw 's','S',21,0,229,228,0,0
  7663 00005F82 00E40000000000      <2>
  7664 00005F89 64004400F8000000EB- <2> 	dw 'd','D',0xF8,0,235,127,0,0
  7665 00005F92 007F0000000000      <2>
  7666 00005F99 660046009F000C00ED- <2> 	dw 'f','F',159,0xC,237,232,0,0
  7667 00005FA2 00E80000000000      <2>
  7668 00005FA9 670047000000000079- <2> 	dw 'g','G',0,0,'y',226,0,0
  7669 00005FB1 00E20000000000      <2>
  7670 00005FB9 68004800000000006E- <2> 	dw 'h','H',0,0,'n','H',0,0
  7671 00005FC1 00480000000000      <2>
  7672 00005FC9 6A004A000000000000- <2> 	dw 'j','J',0,0,0,0,0,0
  7673 00005FD2 00000000000000      <2>
  7674 00005FD9 6B004B00000000006B- <2> 	dw 'k','K',0,0,'k','K',0,0
  7675 00005FE1 004B0000000000      <2>
  7676 00005FE9 6C004C0000000000E9- <2> 	dw 'l','L',0,0,233,233,0,0
  7677 00005FF2 00E90000000000      <2>
  7678 00005FF9 3B003A001400DC0000- <2> 	dw ';',':',20,0xDC,0,0,0,0
  7679 00006002 00000000000000      <2>
  7680 00006009 270022000000000000- <2> 	dw 27h,22h,0,0,0,0,0,0
  7681 00006012 00000000000000      <2>
  7682 00006019 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0,0
  7683 00006022 00000000000000      <2>
  7684 00006029 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7685 00006032 00000000000000      <2>
  7686 00006039 5C007C00AA00B30000- <2> 	dw 92,'|',170,179,0,0,0,0
  7687 00006042 00000000000000      <2>
  7688 00006049 7A005A00910092007A- <2> 	dw 'z','Z',145,146,'z','Z',0,0
  7689 00006051 005A0000000000      <2>
  7690 00006059 780058000000000000- <2> 	dw 'x','X',0,0,0,240,0,0
  7691 00006062 00F00000000000      <2>
  7692 00006069 630043008700800000- <2> 	dw 'c','C',135,128,0,0,0,0
  7693 00006072 00000000000000      <2>
  7694 00006079 760056000000000000- <2> 	dw 'v','V',0,0,0,0,0,0
  7695 00006082 00000000000000      <2>
  7696 00006089 6200420000000000E1- <2> 	dw 'b','B',0,0,225,'B',0,0
  7697 00006092 00420000000000      <2>
  7698 00006099 6E004E00A400A50076- <2> 	dw 'n','N',0xA4,0xA5,'v','N',0,0
  7699 000060A1 004E0000000000      <2>
  7700 000060A9 6D004D000E000B00E6- <2> 	dw 'm','M',0xE,0xB,230,'M',0,0
  7701 000060B2 004D0000000000      <2>
  7702 000060B9 2C003C00F300AE0000- <2> 	dw ',','<',0xF3,174,0,0,0,0
  7703 000060C2 00000000000000      <2>
  7704 000060C9 2E003E00F200AF0000- <2> 	dw '.','>',0xF2,175,0,0,0,0
  7705 000060D2 00000000000000      <2>
  7706 000060D9 2F003F00A800000000- <2> 	dw '/','?',0xA8,0,0,0,0,0
  7707 000060E2 00000000000000      <2>
  7708 000060E9 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7709 000060F2 00000000000000      <2>
  7710 000060F9 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7711 00006102 00000000000000      <2>
  7712 00006109 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7713 00006112 00000000000000      <2>
  7714 00006119 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  7715 00006122 00000000000000      <2>
  7716                              <2> noscan:
  7717                              <2> 
  7718                              <1> %endif
  7719                              <1> ;drivers will soon be handled intelligently
  7720                              <1> ;every driver's source will be scanned for a .init function
  7721                              <1> ;that will be called and if it returns 0
  7722                              <1> ;the hardware was found and the driver initialized properly
  7723                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7724                              <1> 	%ifdef sound.included
  7725                              <1> 		call sblaster.init
  7726                              <1> 	%endif
  7727                              <1> 	%ifdef network.included
  7728 00006129 E82A230000          <1> 		call network.init
  7729                              <1> 	%endif
  7730 0000612E C3                  <1> 	ret
  7731                              <1> initialize:
  7732                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7733 0000612F E814000000          <1> 	call .pic
  7734                              <1> %ifdef terminal.vsync
  7735                              <1> 	call .rtc
  7736                              <1> %endif
  7737 00006134 E871000000          <1> 	call .pit
  7738 00006139 E893000000          <1> 	call .fpu
  7739 0000613E E8A4000000          <1> 	call .sse
  7740 00006143 31C0                <1> 	xor eax, eax
  7741 00006145 31C9                <1> 	xor ecx, ecx
  7742                              <1> %ifdef io.serial
  7743                              <1> 	call serial.init
  7744                              <1> %endif
  7745 00006147 C3                  <1> 	ret
  7746                              <1> 	
  7747                              <1> .pic:
  7748 00006148 B011                <1> 	mov al, 0x11
  7749 0000614A E620                <1> 	out 0x20, al
  7750 0000614C E6A0                <1> 	out 0xA0, al
  7751 0000614E B040                <1> 	mov al, 0x40	;interrupt for master
  7752 00006150 E621                <1> 	out 0x21, al
  7753 00006152 B048                <1> 	mov al, 0x48	;interrupt for slave
  7754 00006154 E6A1                <1> 	out 0xA1, al
  7755 00006156 B004                <1> 	mov al, 4
  7756 00006158 E621                <1> 	out 0x21, al
  7757 0000615A B002                <1> 	mov al, 2
  7758 0000615C E6A1                <1> 	out 0xA1, al
  7759 0000615E B001                <1> 	mov al, 0x1
  7760 00006160 E621                <1> 	out 0x21, al
  7761 00006162 B001                <1> 	mov al, 0x1
  7762 00006164 E6A1                <1> 	out 0xA1, al
  7763                              <1> 	;masks are set to zero so as not to mask
  7764 00006166 30C0                <1> 	xor al, al
  7765 00006168 E621                <1> 	out 0x21, al
  7766 0000616A 30C0                <1> 	xor al, al
  7767 0000616C E6A1                <1> 	out 0xA1, al
  7768 0000616E B020                <1> 	mov al, 0x20
  7769 00006170 E6A0                <1> 	out 0xA0, al
  7770 00006172 E620                <1> 	out 0x20, al
  7771 00006174 C3                  <1> 	ret
  7772                              <1> .rtc:
  7773 00006175 B008                <1> 	mov al, 0x8
  7774 00006177 88C4                <1> 	mov ah, al
  7775 00006179 66BA7000            <1> 	mov dx, 0x70
  7776 0000617D EE                  <1> 	out dx, al
  7777 0000617E 6642                <1> 	inc dx
  7778 00006180 EC                  <1> 	in al, dx
  7779 00006181 86C4                <1> 	xchg al, ah
  7780 00006183 664A                <1> 	dec dx
  7781 00006185 EE                  <1> 	out dx, al
  7782 00006186 6642                <1> 	inc dx
  7783 00006188 86C4                <1> 	xchg al, ah
  7784 0000618A 0C40                <1> 	or al, 0x40
  7785 0000618C EE                  <1> 	out dx, al
  7786                              <1> 	
  7787 0000618D B00A                <1> 	mov al, 0xA
  7788 0000618F 664A                <1> 	dec dx
  7789 00006191 EE                  <1> 	out dx, al
  7790 00006192 86C4                <1> 	xchg al, ah
  7791 00006194 6642                <1> 	inc dx
  7792 00006196 EC                  <1> 	in al, dx
  7793 00006197 24F0                <1> 	and al, 0xF0
  7794 00006199 0A05[1B030000]      <1> 	or al, [rtcrate]
  7795 0000619F 86C4                <1> 	xchg al, ah
  7796 000061A1 664A                <1> 	dec dx
  7797 000061A3 EE                  <1> 	out dx, al
  7798 000061A4 6642                <1> 	inc dx
  7799 000061A6 86C4                <1> 	xchg al, ah
  7800 000061A8 EE                  <1> 	out dx, al
  7801 000061A9 C3                  <1> 	ret
  7802                              <1> 	
  7803                              <1> .pit:
  7804                              <1> 	;initialize the PIT
  7805 000061AA 66A1[5A020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7806 000061B0 E640                <1> 	out 0x40, al
  7807 000061B2 66C1C008            <1> 	rol ax, 8
  7808 000061B6 E640                <1> 	out 0x40, al
  7809                              <1> 	;enable rtc interrupt
  7810 000061B8 B00B                <1> 	mov al, 0xB
  7811 000061BA E670                <1> 	out 0x70, al
  7812 000061BC 66C1C008            <1> 	rol ax, 8
  7813 000061C0 E471                <1> 	in al, 0x71
  7814 000061C2 66C1C008            <1> 	rol ax, 8
  7815 000061C6 E670                <1> 	out 0x70, al
  7816 000061C8 66C1C008            <1> 	rol ax, 8
  7817 000061CC 0C40                <1> 	or al, 0x40
  7818 000061CE E671                <1> 	out 0x71, al
  7819 000061D0 C3                  <1> 	ret
  7820                              <1> .fpu:
  7821                              <1> 	;And now to initialize the fpu
  7822 000061D1 0F20E0              <1> 	mov eax, cr4
  7823 000061D4 0D00020000          <1> 	or eax, 0x200
  7824 000061D9 0F22E0              <1> 	mov cr4, eax
  7825 000061DC B87F0B0000          <1> 	mov eax, 0xB7F
  7826 000061E1 50                  <1> 	push eax
  7827 000061E2 D92C24              <1> 	fldcw [esp]
  7828 000061E5 58                  <1> 	pop eax
  7829 000061E6 C3                  <1> 	ret
  7830                              <1> 	
  7831                              <1> .sse:
  7832 000061E7 0F20C0              <1> 	mov eax, cr0
  7833 000061EA 24FB                <1> 	and al, 11111011b
  7834 000061EC 0C02                <1> 	or al, 00000010b
  7835 000061EE 0F22C0              <1> 	mov cr0, eax
  7836 000061F1 0F20E0              <1> 	mov eax, cr4
  7837 000061F4 660D0006            <1> 	or ax, 0000011000000000b
  7838 000061F8 0F22E0              <1> 	mov cr4, eax
  7839 000061FB C3                  <1> 	ret
  7840                                      %include "source/pci.asm"
  7841 000061FC 00                  <1> pcibus		db 0
  7842 000061FD 00                  <1> pcidevice	db 0
  7843 000061FE 00                  <1> pcifunction	db 0
  7844 000061FF 00                  <1> pciregister	db 0
  7845 00006200 00                  <1> pcireqtype	db 0
  7846 00006201 00000000            <1> pcidevid	dd 0
  7847 00006205 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  7848                              <1> getpcimem:
  7849 00006209 B002                <1> 	mov al, 2
  7850 0000620B A2[00620000]        <1> 	mov [pcireqtype], al
  7851 00006210 E922000000          <1> 	jmp searchpci
  7852                              <1> getpciport:
  7853 00006215 B001                <1> 	mov al, 1
  7854 00006217 A2[00620000]        <1> 	mov [pcireqtype], al
  7855 0000621C E916000000          <1> 	jmp searchpci
  7856                              <1> pcidump:
  7857 00006221 31C0                <1> 	xor eax, eax
  7858 00006223 A2[FE610000]        <1> 	mov [pcifunction], al
  7859 00006228 A2[FC610000]        <1> 	mov [pcibus], al
  7860 0000622D A2[FD610000]        <1> 	mov [pcidevice], al
  7861 00006232 A2[00620000]        <1> 	mov [pcireqtype], al
  7862                              <1> searchpci:		;;return in ebx, start X in pciX
  7863 00006237 30C0                <1> 	xor al, al
  7864 00006239 A2[FF610000]        <1> 	mov [pciregister], al
  7865 0000623E E81D020000          <1> 	call getpciaddr
  7866 00006243 BAF80C0000          <1> 	mov edx, 0xCF8
  7867 00006248 EF                  <1> 	out dx, eax	;;request pci config
  7868 00006249 BAFC0C0000          <1> 	mov edx, 0xCFC
  7869 0000624E ED                  <1> 	in eax, dx 	;;read in pci config
  7870 0000624F 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7871 00006254 0F8237000000        <1> 	jb near checkpcidevice
  7872                              <1> searchpciret:
  7873                              <1> nextpcidevice:
  7874 0000625A 30C0                <1> 	xor al, al
  7875 0000625C A2[FE610000]        <1> 	mov [pcifunction], al
  7876 00006261 A0[FD610000]        <1> 	mov al, [pcidevice]
  7877 00006266 3C1F                <1> 	cmp al, 11111b
  7878 00006268 0F8300010000        <1> 	jae near nextpcibus
  7879 0000626E FEC0                <1> 	inc al
  7880 00006270 A2[FD610000]        <1> 	mov [pcidevice], al
  7881 00006275 EBC0                <1> 	jmp searchpci
  7882 00006277 A0[FE610000]        <1> 	mov al, [pcifunction]
  7883 0000627C 3C07                <1> 	cmp al, 111b
  7884 0000627E 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7885 00006284 FEC0                <1> 	inc al
  7886 00006286 A2[FE610000]        <1> 	mov [pcifunction], al
  7887 0000628B EBAA                <1> 	jmp searchpci
  7888 0000628D 00000000            <1> pcitype: db 0,0,0,0
  7889                              <1> checkpcidevice:
  7890 00006291 31C0                <1> 	xor eax, eax
  7891 00006293 3905[01620000]      <1> 	cmp [pcidevid], eax
  7892 00006299 0F8430000000        <1> 	je near .good
  7893 0000629F A2[FF610000]        <1> 	mov [pciregister], al	;device id, vendor id
  7894 000062A4 E8B7010000          <1> 	call getpciaddr
  7895 000062A9 BAF80C0000          <1> 	mov edx, 0xCF8
  7896 000062AE EF                  <1> 	out dx, eax
  7897 000062AF BAFC0C0000          <1> 	mov edx, 0xCFC
  7898 000062B4 ED                  <1> 	in eax, dx
  7899 000062B5 2305[05620000]      <1> 	and eax, [pcidevidmask]
  7900 000062BB 8B1D[01620000]      <1> 	mov ebx, [pcidevid]
  7901 000062C1 231D[05620000]      <1> 	and ebx, [pcidevidmask]
  7902 000062C7 39D8                <1> 	cmp eax, ebx
  7903 000062C9 0F858BFFFFFF        <1> 	jne near searchpciret
  7904                              <1> .good:
  7905 000062CF 30C0                <1> 	xor al, al
  7906 000062D1 3805[00620000]      <1> 	cmp [pcireqtype], al
  7907 000062D7 0F842C000000        <1> 	je near dumppcidevice
  7908 000062DD B008                <1> 	mov al, 0x08
  7909 000062DF A2[FF610000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7910 000062E4 E877010000          <1> 	call getpciaddr
  7911 000062E9 BAF80C0000          <1> 	mov edx, 0xCF8
  7912 000062EE EF                  <1> 	out dx, eax
  7913 000062EF BAFC0C0000          <1> 	mov edx, 0xCFC
  7914 000062F4 ED                  <1> 	in eax, dx
  7915 000062F5 C1C008              <1> 	rol eax, 8
  7916 000062F8 3A05[8D620000]      <1> 	cmp al, [pcitype]
  7917 000062FE 0F84A0000000        <1> 	je near foundpciaddr
  7918 00006304 E951FFFFFF          <1> 	jmp searchpciret
  7919                              <1> dumppcidevice:
  7920 00006309 30C0                <1> 	xor al, al
  7921 0000630B A2[FF610000]        <1> 	mov [pciregister], al
  7922 00006310 E84B010000          <1> 	call getpciaddr
  7923 00006315 89C1                <1> 	mov ecx, eax
  7924 00006317 C605[66310000]05    <1> 	mov byte [firsthexshown], 5
  7925 0000631E E858CEFFFF          <1> 	call showhex
  7926                              <1> dumppcidevicelp:
  7927 00006323 A2[FF610000]        <1> 	mov [pciregister], al
  7928 00006328 E833010000          <1> 	call getpciaddr
  7929 0000632D BAF80C0000          <1> 	mov edx, 0xCF8
  7930 00006332 EF                  <1> 	out dx, eax
  7931 00006333 BAFC0C0000          <1> 	mov edx, 0xCFC
  7932 00006338 ED                  <1> 	in eax, dx
  7933 00006339 89C1                <1> 	mov ecx, eax
  7934 0000633B A0[FF610000]        <1> 	mov al, [pciregister]
  7935 00006340 0404                <1> 	add al, 4
  7936 00006342 C605[66310000]05    <1> 	mov byte [firsthexshown], 5
  7937 00006349 E82DCEFFFF          <1> 	call showhex
  7938 0000634E 3C3C                <1> 	cmp al, 0x3C
  7939 00006350 72D1                <1> 	jb dumppcidevicelp
  7940                              <1> dumppcidn:
  7941                              <1> %ifdef io.serial
  7942                              <1> 	mov esi, line
  7943                              <1> 	call print
  7944                              <1> %else
  7945 00006352 803D[85250000]00    <1> 	cmp byte [charpos], 0
  7946 00006359 0F84FBFEFFFF        <1> 	je near searchpciret
  7947 0000635F BE[77890000]        <1> 	mov esi, line
  7948 00006364 E8C2B9FFFF          <1> 	call print
  7949                              <1> %endif
  7950 00006369 E9ECFEFFFF          <1> 	jmp searchpciret
  7951                              <1> nextpcibus:
  7952 0000636E 30C0                <1> 	xor al, al
  7953 00006370 A2[FD610000]        <1> 	mov [pcidevice], al
  7954 00006375 A0[FC610000]        <1> 	mov al, [pcibus]
  7955 0000637A 3C7F                <1> 	cmp al, 1111111b
  7956 0000637C 730C                <1> 	jae donesearchpci
  7957 0000637E FEC0                <1> 	inc al
  7958 00006380 A2[FC610000]        <1> 	mov [pcibus], al
  7959 00006385 E9ADFEFFFF          <1> 	jmp searchpci
  7960                              <1> donesearchpci:
  7961 0000638A BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  7962 0000638F 31D2                <1> 	xor edx, edx
  7963 00006391 8815[8D620000]      <1> 	mov [pcitype], dl
  7964 00006397 8915[01620000]      <1> 	mov [pcidevid], edx
  7965 0000639D 891D[05620000]      <1> 	mov [pcidevidmask], ebx
  7966 000063A3 C3                  <1> 	ret
  7967                              <1> foundpciaddr:
  7968 000063A4 B010                <1> 	mov al, 0x10
  7969 000063A6 A2[FF610000]        <1> 	mov [pciregister], al
  7970 000063AB 803D[00620000]02    <1> 	cmp byte [pcireqtype], 2
  7971 000063B2 7443                <1> 	je findpcimemaddr
  7972                              <1> findpciioaddr:
  7973 000063B4 E8A7000000          <1> 	call getpciaddr
  7974 000063B9 BAF80C0000          <1> 	mov edx, 0xCF8
  7975 000063BE EF                  <1> 	out dx, eax
  7976 000063BF BAFC0C0000          <1> 	mov edx, 0xCFC
  7977 000063C4 ED                  <1> 	in eax, dx
  7978 000063C5 89C3                <1> 	mov ebx, eax
  7979 000063C7 81E301000000        <1> 	and ebx, 1
  7980 000063CD 81FB00000000        <1> 	cmp ebx, 0
  7981 000063D3 0F846E000000        <1> 	je near notpciioaddr
  7982 000063D9 2D01000000          <1> 	sub eax, 1
  7983 000063DE 89C2                <1> 	mov edx, eax
  7984 000063E0 31DB                <1> 	xor ebx, ebx
  7985 000063E2 4B                  <1> 	dec ebx
  7986 000063E3 891D[05620000]      <1> 	mov [pcidevidmask], ebx
  7987 000063E9 43                  <1> 	inc ebx
  7988 000063EA 881D[8D620000]      <1> 	mov [pcitype], bl
  7989 000063F0 891D[01620000]      <1> 	mov [pcidevid], ebx
  7990 000063F6 C3                  <1> 	ret
  7991                              <1> findpcimemaddr:
  7992 000063F7 E864000000          <1> 	call getpciaddr
  7993 000063FC BAF80C0000          <1> 	mov edx, 0xCF8
  7994 00006401 EF                  <1> 	out dx, eax
  7995 00006402 BAFC0C0000          <1> 	mov edx, 0xCFC
  7996 00006407 ED                  <1> 	in eax, dx
  7997 00006408 89C3                <1> 	mov ebx, eax
  7998 0000640A 81E301000000        <1> 	and ebx, 1
  7999 00006410 81FB01000000        <1> 	cmp ebx, 1
  8000 00006416 0F842B000000        <1> 	je near notpciioaddr
  8001 0000641C C1E804              <1> 	shr eax, 4
  8002 0000641F C1E004              <1> 	shl eax, 4	;remove prefetch and type
  8003 00006422 89C2                <1> 	mov edx, eax
  8004 00006424 50                  <1> 	push eax
  8005 00006425 A1[41020000]        <1> 	mov eax, [basecache]
  8006 0000642A C1E004              <1> 	shl eax, 4
  8007 0000642D 29C2                <1> 	sub edx, eax
  8008 0000642F 58                  <1> 	pop eax
  8009 00006430 31DB                <1> 	xor ebx, ebx
  8010 00006432 4B                  <1> 	dec ebx
  8011 00006433 891D[05620000]      <1> 	mov [pcidevidmask], ebx
  8012 00006439 43                  <1> 	inc ebx
  8013 0000643A 881D[8D620000]      <1> 	mov [pcitype], bl
  8014 00006440 891D[01620000]      <1> 	mov [pcidevid], ebx
  8015 00006446 C3                  <1> 	ret
  8016                              <1> notpciioaddr:
  8017 00006447 A0[FF610000]        <1> 	mov al, [pciregister]
  8018 0000644C 0404                <1> 	add al, 4
  8019 0000644E 3C28                <1> 	cmp al, 0x28
  8020 00006450 0F8704FEFFFF        <1> 	ja near searchpciret
  8021 00006456 A2[FF610000]        <1> 	mov [pciregister], al
  8022 0000645B E954FFFFFF          <1> 	jmp findpciioaddr
  8023                              <1> getpciaddr:		;;puts it in eax and ebx
  8024 00006460 31C0                <1> 			xor eax, eax
  8025 00006462 BB00000080          <1> 			mov ebx, 0x80000000
  8026 00006467 A0[FC610000]        <1> 			mov al, [pcibus]
  8027 0000646C C1E010              <1> 			shl eax, 16
  8028 0000646F 01C3                <1> 			add ebx, eax
  8029 00006471 31C0                <1> 			xor eax, eax
  8030 00006473 A0[FD610000]        <1> 			mov al, [pcidevice]
  8031 00006478 C1E00B              <1> 			shl eax, 11
  8032 0000647B 01C3                <1> 			add ebx, eax
  8033 0000647D 31C0                <1> 			xor eax, eax
  8034 0000647F A0[FE610000]        <1> 			mov al, [pcifunction]
  8035 00006484 C1E008              <1> 			shl eax, 8
  8036 00006487 01C3                <1> 			add ebx, eax
  8037 00006489 31C0                <1> 			xor eax, eax
  8038 0000648B A0[FF610000]        <1> 			mov al, [pciregister]
  8039 00006490 01C3                <1> 			add ebx, eax
  8040 00006492 89D8                <1> 			mov eax, ebx
  8041 00006494 C3                  <1> 			ret
  8042                                      %include "source/disk.asm"
  8043                              <1> %ifdef disk.real
  8044                              <1> 	%include "source/drivers/disk/realmode.asm"
  8045                              <2> diskr:
  8046                              <2> 			;read from disk using real mode-it does not work with large files
  8047                              <2> 			;sector count in cl
  8048                              <2> 			;disk number in ch
  8049                              <2> 			;48 bit address with last 32 bits in ebx
  8050                              <2> 			;buffer in esi
  8051                              <2> 			;puts end of buffer in edi and end lba address in edx
  8052 00006495 880D[C2640000]      <2> 	mov [sdlength], cl
  8053 0000649B 891D[C3640000]      <2> 	mov [sdaddress], ebx
  8054 000064A1 8935[21660000]      <2> 	mov [oldesireal], esi
  8055 000064A7 66BE[C764]          <2> 	mov si, readdiskreal
  8056 000064AB 668935[D70C0000]    <2> 	mov [realmodeptr], si
  8057 000064B2 BE[03650000]        <2> 	mov esi, backfromrealread
  8058 000064B7 8935[D30C0000]      <2> 	mov [realmodereturn], esi
  8059 000064BD E9FAA6FFFF          <2> 	jmp realmode
  8060 000064C2 00                  <2> sdlength db 0
  8061 000064C3 00000000            <2> sdaddress dd 0
  8062                              <2> 
  8063                              <2> [BITS 16]
  8064                              <2> readdiskreal:
  8065 000064C7 C706[F364]1000      <2> 	mov word [dlen], 0x10
  8066 000064CD C706[F764]0000      <2> 	mov word [daddress], 0
  8067 000064D3 C706[F964]0001      <2> 	mov word [dsegm], 0x100
  8068 000064D9 66891E[FB64]        <2> 	mov [dlbaad], ebx
  8069 000064DE 880E[F564]          <2> 	mov [dreadlen], cl
  8070                              <2> ReadHardDisk:
  8071 000064E2 BE[F364]            <2> 	mov si, diskaddresspacket
  8072 000064E5 31C0                <2> 	xor ax, ax
  8073 000064E7 B442                <2> 	mov ah, 0x42
  8074 000064E9 8A16[F264]          <2> 	mov dl, [dnumber]
  8075 000064ED CD13                <2> 	int 0x13
  8076 000064EF 72F1                <2> 	jc ReadHardDisk
  8077 000064F1 C3                  <2> 	ret
  8078                              <2> 
  8079 000064F2 80                  <2> dnumber db 0x80
  8080                              <2> diskaddresspacket:
  8081 000064F3 10                  <2> dlen:	db 0x10 ;size of packet
  8082 000064F4 00                  <2> 		db 0
  8083 000064F5 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8084 000064F7 0000                <2> daddress:	dw 0	;address 0
  8085 000064F9 0001                <2> dsegm:		dw 0x100	;segment
  8086                              <2> 		;start with known value for hd
  8087                              <2> dlbaad:
  8088 000064FB 00000000            <2> 	dd 0	;lba address
  8089 000064FF 00000000            <2> 	dd 0
  8090                              <2> [BITS 32]
  8091                              <2> backfromrealread:
  8092 00006503 8B35[21660000]      <2> 	mov esi, [oldesireal]
  8093 00006509 8B1D[C3640000]      <2> 	mov ebx, [sdaddress]
  8094 0000650F 31C9                <2> 	xor ecx, ecx
  8095 00006511 8A0D[C2640000]      <2> 	mov cl, [sdlength]
  8096 00006517 01CB                <2> 	add ebx, ecx
  8097 00006519 66B80800            <2> 	mov ax, LINEAR_SEL
  8098 0000651D 8EE0                <2> 	mov fs, ax
  8099 0000651F BF00100000          <2> 	mov edi, 0x1000
  8100 00006524 B200                <2> 	mov dl, 0
  8101 00006526 D0E1                <2> 	shl cl, 1
  8102                              <2> copyfromrmodedisk:
  8103 00006528 648A07              <2> 	mov al, [fs:edi]
  8104 0000652B 8806                <2> 	mov [esi], al
  8105 0000652D 47                  <2> 	inc edi
  8106 0000652E 46                  <2> 	inc esi
  8107 0000652F FECA                <2> 	dec dl
  8108 00006531 80FA00              <2> 	cmp dl, 0
  8109 00006534 75F2                <2> 	jne copyfromrmodedisk
  8110 00006536 FEC9                <2> 	dec cl
  8111 00006538 B200                <2> 	mov dl, 0
  8112 0000653A 80F900              <2> 	cmp cl, 0
  8113 0000653D 75E9                <2> 	jne copyfromrmodedisk
  8114 0000653F 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8115 00006543 8EE0                <2> 	mov fs, ax
  8116 00006545 89F7                <2> 	mov edi, esi
  8117 00006547 8B35[21660000]      <2> 	mov esi, [oldesireal]
  8118 0000654D 89DA                <2> 	mov edx, ebx
  8119 0000654F 8B1D[C3640000]      <2> 	mov ebx, [sdaddress]
  8120 00006555 C3                  <2> 	ret
  8121                              <2> 	
  8122                              <1> %else
  8123                              <1> 	%ifdef disk.protected
  8124                              <1> 		%include "source/drivers/disk/pata.asm"
  8125                              <1> 	%endif
  8126                              <1> %endif
  8127                              <1> %ifdef disk.none
  8128                              <1> loadfile:	xor edx, edx
  8129                              <1> 			cmp byte [edi], '&'
  8130                              <1> 			je .ret
  8131                              <1> 			mov edx, 404	;no files are found except &
  8132                              <1> 		.ret:
  8133                              <1> 			ret
  8134                              <1> %else
  8135                              <1> ;This loads files using the methods in the loaded driver
  8136                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8137                              <1> 			;returns with err code in edx and file end in edi
  8138 00006556 803F00              <1> 	cmp byte [edi], 0
  8139 00006559 0F8448000000        <1> 	je near nofileload
  8140 0000655F 89FA                <1> 	mov edx, edi
  8141 00006561 BB[9CD90000]        <1> 	mov ebx, diskfileindex
  8142                              <1> nextnamechar:
  8143 00006566 8A07                <1> 	mov al, [edi]
  8144 00006568 3C26                <1> 	cmp al, '&'
  8145 0000656A 7440                <1> 	je nullfile
  8146 0000656C 8A23                <1> 	mov ah, [ebx]
  8147 0000656E 47                  <1> 	inc edi
  8148 0000656F 43                  <1> 	inc ebx
  8149 00006570 88C1                <1> 	mov cl, al
  8150 00006572 08E1                <1> 	or cl, ah
  8151 00006574 80F900              <1> 	cmp cl, 0
  8152 00006577 744E                <1> 	je equalfilenames
  8153 00006579 80F920              <1> 	cmp cl, ' '
  8154 0000657C 7449                <1> 	je equalfilenames
  8155 0000657E 3C2A                <1> 	cmp al, '*'
  8156 00006580 742B                <1> 	je equalfilenames2
  8157 00006582 80FC00              <1> 	cmp ah, 0
  8158 00006585 7410                <1> 	je nextfilename
  8159 00006587 3C00                <1> 	cmp al, 0
  8160 00006589 7404                <1> 	je getebxzero
  8161 0000658B 38E0                <1> 	cmp al, ah
  8162 0000658D 74D7                <1> 	je nextnamechar
  8163                              <1> getebxzero:
  8164 0000658F 8A23                <1> 	mov ah, [ebx]
  8165 00006591 43                  <1> 	inc ebx
  8166 00006592 80FC00              <1> 	cmp ah, 0
  8167 00006595 75F8                <1> 	jne getebxzero
  8168                              <1> nextfilename:
  8169 00006597 81C308000000        <1> 	add ebx, 8		;next descriptor
  8170 0000659D 89D7                <1> 	mov edi, edx
  8171 0000659F 81FB[9ADB0000]      <1> 	cmp ebx, enddiskfileindex
  8172 000065A5 72BF                <1> 	jb nextnamechar
  8173                              <1> nofileload:
  8174 000065A7 BA94010000          <1> 	mov edx, 404	;indicate not found error
  8175                              <1> nullfile:
  8176 000065AC C3                  <1> 	ret
  8177                              <1> equalfilenames2:
  8178 000065AD 81EB02000000        <1> 	sub ebx, 2
  8179                              <1> eqfilefind:
  8180 000065B3 43                  <1> 	inc ebx
  8181 000065B4 81FB[9ADB0000]      <1> 	cmp ebx, enddiskfileindex
  8182 000065BA 0F83E7FFFFFF        <1> 	jae near nofileload
  8183 000065C0 8A03                <1> 	mov al, [ebx]
  8184 000065C2 3C00                <1> 	cmp al, 0
  8185 000065C4 75ED                <1> 	jne eqfilefind
  8186 000065C6 43                  <1> 	inc ebx
  8187                              <1> equalfilenames:
  8188 000065C7 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8189 000065CA 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8190 000065CC 031D[9EDB0000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  8191 000065D2 31C9                <1> 	xor ecx, ecx
  8192 000065D4 88C1                <1> 	mov cl, al			;get excess number of sectors
  8193 000065D6 C0E102              <1> 	shl cl, 2
  8194 000065D9 C0E902              <1> 	shr cl, 2			;cut off at 64
  8195 000065DC 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8196 000065DE B500                <1> 	mov ch, 0			;drive 0
  8197 000065E0 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8198                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8199 000065E3 A3[25660000]        <1> 	mov [filetracks], eax
  8200 000065E8 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8201 000065EA 89DA                <1> 	mov edx, ebx
  8202 000065EC 80F900              <1> 	cmp cl, 0
  8203 000065EF 7405                <1> 	je copytracksforfile
  8204 000065F1 E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  8205                              <1> copytracksforfile:
  8206 000065F6 A1[25660000]        <1> 	mov eax, [filetracks]
  8207 000065FB 3D00000000          <1> 	cmp eax, 0
  8208 00006600 7419                <1> 	je donecopyfile
  8209 00006602 48                  <1> 	dec eax
  8210 00006603 A3[25660000]        <1> 	mov [filetracks], eax
  8211 00006608 89D3                <1> 	mov ebx, edx	;get end lba
  8212 0000660A B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8213 0000660C 8A2D[9DDB0000]      <1> 	mov ch, [DriveNumber]
  8214 00006612 89FE                <1> 	mov esi, edi	;reset buffer
  8215 00006614 E87CFEFFFF          <1> 	call diskr
  8216 00006619 EBDB                <1> 	jmp copytracksforfile
  8217                              <1> donecopyfile:
  8218 0000661B BA00000000          <1> 	mov edx, 0	;no error
  8219 00006620 C3                  <1> 	ret
  8220                              <1> 
  8221 00006621 00000000            <1> oldesireal dd 0
  8222 00006625 00000000            <1> filetracks dd 0
  8223 00006629 00                  <1> lbad1 db 0
  8224 0000662A 00                  <1> lbad2 db 0
  8225 0000662B 00                  <1> lbad3 db 0
  8226 0000662C 00                  <1> lbad4 db 0
  8227 0000662D 00                  <1> lbad5 db 0
  8228 0000662E 00                  <1> lbad6 db 0
  8229 0000662F 6400                <1> segments dw 100
  8230                              <1> %endif
  8231                                      %include "source/threads.asm"
  8232                              <1> %ifdef threads.included	
  8233                              <1> nwcmdst:
  8234 00006631 31C0                <1> 	xor eax, eax
  8235 00006633 BC[82ED0000]        <1> 	mov esp, stackend
  8236 00006638 A2[F5660000]        <1> 	mov [threadson], al
  8237 0000663D A3[F6660000]        <1> 	mov [currentthread], eax
  8238 00006642 0504000000          <1> 	add eax, 4
  8239 00006647 A3[F1660000]        <1> 	mov [lastthread], eax
  8240 0000664C FB                  <1> 	sti
  8241 0000664D E94FC6FFFF          <1> 	jmp nwcmd
  8242                              <1> 
  8243                              <1> nomorethreadspace:
  8244 00006652 BE[68660000]        <1> 	mov esi, nmts
  8245 00006657 E8CFB6FFFF          <1> 	call print
  8246 0000665C C605[F5660000]00    <1> 	mov byte [threadson], 0
  8247 00006663 E939C6FFFF          <1> 	jmp nwcmd
  8248 00006668 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8249 00006671 6572666C6F770A00    <1>
  8250                              <1> 
  8251                              <1> nomorestackspace:
  8252 00006679 BE[85660000]        <1> 	mov esi, nmss
  8253 0000667E E8A8B6FFFF          <1> 	call print
  8254 00006683 EBAC                <1> 	jmp nwcmdst
  8255 00006685 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8256 0000668E 72666C6F770A00      <1>
  8257                              <1> 	
  8258                              <1> threadswitch:
  8259 00006695 FA                  <1> 	cli
  8260 00006696 60                  <1> 	pushad
  8261 00006697 BF[30EA0200]        <1> 	mov edi, threadlist
  8262 0000669C A1[F6660000]        <1> 	mov eax, [currentthread]
  8263 000066A1 40                  <1> 	inc eax
  8264 000066A2 A3[F6660000]        <1> 	mov [currentthread], eax
  8265 000066A7 6648                <1> 	dec ax
  8266 000066A9 C1E002              <1> 	shl eax, 2
  8267 000066AC 01C7                <1> 	add edi, eax
  8268 000066AE 8927                <1> 	mov [edi], esp
  8269 000066B0 81C704000000        <1> 	add edi, 4
  8270 000066B6 81FF[30FA0200]      <1> 	cmp edi, threadlistend
  8271 000066BC 0F830D000000        <1> 	jae near nookespthread
  8272 000066C2 8B07                <1> 	mov eax, [edi]
  8273 000066C4 3D00000000          <1> 	cmp eax, 0
  8274 000066C9 0F8519000000        <1> 	jne near okespthread
  8275                              <1> nookespthread:
  8276 000066CF BF[30EA0200]        <1> 	mov edi, threadlist
  8277 000066D4 31C0                <1> 	xor eax, eax
  8278 000066D6 A3[F6660000]        <1> 	mov [currentthread], eax
  8279 000066DB 8B07                <1> 	mov eax, [edi]
  8280 000066DD 3D00000000          <1> 	cmp eax, 0
  8281 000066E2 0F8449FFFFFF        <1> 	je near nwcmdst
  8282                              <1> okespthread:
  8283 000066E8 89C4                <1> 	mov esp, eax
  8284 000066EA B020                <1> 	mov al, 0x20
  8285 000066EC E620                <1> 	out 0x20, al
  8286 000066EE 61                  <1> 	popad
  8287 000066EF FB                  <1> 	sti
  8288 000066F0 CF                  <1> 	iret
  8289                              <1> 
  8290                              <1> %endif
  8291 000066F1 04000000            <1> 	lastthread dd 4
  8292 000066F5 00                  <1> 	threadson db 0
  8293 000066F6 00000000            <1> 	currentthread dd 0
  8294                                  %ifdef gui.included
  8295                                      %include "source/gui/gui.asm"
  8296                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8297 000066FA 31C0                <1> 	xor eax, eax
  8298 000066FC 31DB                <1> 	xor ebx, ebx
  8299 000066FE 31C9                <1> 	xor ecx, ecx
  8300 00006700 31D2                <1> 	xor edx, edx
  8301 00006702 E871080000          <1> 	call guisetup
  8302                              <1> guiloop:
  8303 00006707 E8EEF0FFFF          <1> 	call cursorgui
  8304                              <1> guistart:
  8305 0000670C E8C2F4FFFF          <1> 	call getkey
  8306 00006711 C605[F97B0000]00    <1> 	mov byte [copygui], 0
  8307 00006718 EBF2                <1> 	jmp guistart
  8308                              <1> 
  8309                              <1> %include "source/gui/bmp.asm"
  8310                              <2> showbmp:
  8311 0000671A 668B06              <2> 	mov ax, [esi]
  8312 0000671D 663D424D            <2> 	cmp ax, "BM"
  8313 00006721 0F85BB000000        <2> 	jne near endedbmp
  8314 00006727 8B3D[1D570000]      <2> 	mov edi, [physbaseptr]
  8315 0000672D 6689D0              <2> 	mov ax, dx
  8316 00006730 6689CB              <2> 	mov bx, cx
  8317 00006733 31C9                <2> 	xor ecx, ecx
  8318 00006735 31D2                <2> 	xor edx, edx
  8319 00006737 6689D9              <2> 	mov cx, bx
  8320 0000673A 6689C2              <2> 	mov dx, ax
  8321 0000673D 01D7                <2> 	add edi, edx
  8322 0000673F 01D7                <2> 	add edi, edx
  8323 00006741 31D2                <2> 	xor edx, edx
  8324 00006743 668B15[F5570000]    <2> 	mov dx, [resolutionx2]
  8325 0000674A 034E16              <2> 	add ecx, [esi + 22]
  8326                              <2> bmplocloop:
  8327 0000674D 52                  <2> 	push edx
  8328 0000674E 31C0                <2> 	xor eax, eax
  8329 00006750 6689D0              <2> 	mov ax, dx
  8330 00006753 F7E1                <2> 	mul ecx
  8331 00006755 5A                  <2> 	pop edx
  8332 00006756 663B0D[09570000]    <2> 	cmp cx, [resolutiony]
  8333 0000675D 7609                <2> 	jbe .nofixy
  8334 0000675F 31C9                <2> 	xor ecx, ecx
  8335 00006761 668B0D[09570000]    <2> 	mov cx, [resolutiony]
  8336                              <2> .nofixy:
  8337 00006768 01C7                <2> 	add edi, eax
  8338 0000676A 8B5612              <2> 	mov edx, [esi + 18]
  8339 0000676D 8B4E16              <2> 	mov ecx, [esi + 22]
  8340 00006770 8B460A              <2> 	mov eax, [esi + 10]
  8341 00006773 8B5E02              <2> 	mov ebx, [esi + 2]
  8342 00006776 01F3                <2> 	add ebx, esi
  8343 00006778 891D[E8670000]      <2> 	mov [bmpend], ebx
  8344 0000677E 89D3                <2> 	mov ebx, edx
  8345 00006780 01C6                <2> 	add esi, eax
  8346                              <2> ldxbmp2:
  8347 00006782 31D2                <2> 	xor edx, edx
  8348 00006784 668B15[07570000]    <2> 	mov dx, [resolutionx]
  8349 0000678B 39D3                <2> 	cmp ebx, edx
  8350 0000678D 7702                <2> 	ja ldxbmp
  8351 0000678F 89DA                <2> 	mov edx, ebx
  8352                              <2> ldxbmp:
  8353 00006791 668B06              <2> 	mov ax, [esi]
  8354 00006794 668907              <2> 	mov [edi], ax
  8355 00006797 81C702000000        <2> 	add edi, 2
  8356 0000679D 81C602000000        <2> 	add esi, 2
  8357 000067A3 3B35[E8670000]      <2> 	cmp esi, [bmpend]
  8358 000067A9 7737                <2> 	ja endedbmp
  8359 000067AB 4A                  <2> 	dec edx
  8360 000067AC 81FA00000000        <2> 	cmp edx, 0
  8361 000067B2 77DD                <2> 	ja ldxbmp
  8362 000067B4 31D2                <2> 	xor edx, edx
  8363 000067B6 668B15[07570000]    <2> 	mov dx, [resolutionx]
  8364 000067BD 39D3                <2> 	cmp ebx, edx
  8365 000067BF 7610                <2> 	jbe .notover
  8366                              <2> .over:
  8367 000067C1 01DE                <2> 	add esi, ebx
  8368 000067C3 01DE                <2> 	add esi, ebx
  8369 000067C5 29D6                <2> 	sub esi, edx
  8370 000067C7 29D6                <2> 	sub esi, edx
  8371 000067C9 01DF                <2> 	add edi, ebx
  8372 000067CB 01DF                <2> 	add edi, ebx
  8373 000067CD 29D7                <2> 	sub edi, edx
  8374 000067CF 29D7                <2> 	sub edi, edx
  8375                              <2> .notover:
  8376 000067D1 29DF                <2> 	sub edi, ebx
  8377 000067D3 29DF                <2> 	sub edi, ebx
  8378 000067D5 29D7                <2> 	sub edi, edx
  8379 000067D7 29D7                <2> 	sub edi, edx
  8380 000067D9 49                  <2> 	dec ecx
  8381 000067DA 81F900000000        <2> 	cmp ecx, 0
  8382 000067E0 77A0                <2> 	ja ldxbmp2
  8383                              <2> endedbmp:
  8384 000067E2 E844030000          <2> 	call switchmousepos2
  8385 000067E7 C3                  <2> 	ret
  8386                              <2> 	
  8387 000067E8 00000000            <2> 	bmpend dd 0
  8388                              <1> %include "source/gui/circle.asm"
  8389                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8390 000067EC 55                  <2> 	push ebp
  8391 000067ED 663D0000            <2> 	cmp ax, 0
  8392 000067F1 770A                <2> 	ja .nozerocircle
  8393 000067F3 E8F61B0000          <2> 	call putpixel	;the easiest circle ever
  8394 000067F8 E9F7000000          <2> 	jmp .done
  8395                              <2> .nozerocircle:
  8396 000067FD 6689F5              <2> 	mov bp, si
  8397 00006800 6650                <2> 	push ax
  8398 00006802 E8281C0000          <2> 	call getpixelmem
  8399 00006807 31C0                <2> 	xor eax, eax
  8400 00006809 6658                <2> 	pop ax
  8401 0000680B BE01000000          <2> 	mov esi, 1
  8402 00006810 29C6                <2> 	sub esi, eax
  8403 00006812 89C1                <2> 	mov ecx, eax
  8404 00006814 31C0                <2> 	xor eax, eax
  8405 00006816 66A1[F5570000]      <2> 	mov ax, [resolutionx2]
  8406 0000681C F7E1                <2> 	mul ecx
  8407 0000681E 50                  <2> 	push eax
  8408 0000681F 31D2                <2> 	xor edx, edx
  8409 00006821 01C7                <2> 	add edi, eax
  8410 00006823 66892F              <2> 	mov [edi], bp
  8411 00006826 29C7                <2> 	sub edi, eax
  8412 00006828 29C7                <2> 	sub edi, eax
  8413 0000682A 66892F              <2> 	mov [edi], bp
  8414 0000682D 01C7                <2> 	add edi, eax
  8415 0000682F D1E1                <2> 	shl ecx, 1
  8416 00006831 01CF                <2> 	add edi, ecx
  8417 00006833 66892F              <2> 	mov [edi], bp
  8418 00006836 D1E1                <2> 	shl ecx, 1
  8419 00006838 29CF                <2> 	sub edi, ecx
  8420 0000683A 66892F              <2> 	mov [edi], bp
  8421 0000683D D1E9                <2> 	shr ecx, 1
  8422 0000683F 01CF                <2> 	add edi, ecx
  8423 00006841 D1E9                <2> 	shr ecx, 1
  8424 00006843 B802000000          <2> 	mov eax, 2
  8425 00006848 F7E1                <2> 	mul ecx
  8426 0000684A 48                  <2> 	dec eax
  8427 0000684B F7D0                <2> 	not eax ;make it negative
  8428 0000684D A3[FA680000]        <2> 	mov [.ddF_y], eax
  8429 00006852 58                  <2> 	pop eax
  8430 00006853 BB01000000          <2> 	mov ebx, 1
  8431 00006858 891D[F6680000]      <2> 	mov [.ddF_x], ebx
  8432 0000685E 4B                  <2> 	dec ebx
  8433 0000685F 31D2                <2> 	xor edx, edx
  8434 00006861 E904000000          <2> 	jmp .lp
  8435                              <2> .lpb:
  8436 00006866 D1EA                <2> 	shr edx, 1
  8437 00006868 D1E9                <2> 	shr ecx, 1
  8438                              <2> .lp:	;it starts this with the center in edi
  8439                              <2> 		;color in bp
  8440                              <2> 		;ddF_x in memory
  8441                              <2> 		;x*resolutionx2 in ebx
  8442                              <2> 		;x in edx
  8443                              <2> 		;ddF_y in memory
  8444                              <2> 		;y*resolutionx2 in eax
  8445                              <2> 		;f in esi
  8446                              <2> 		;y in ecx
  8447 0000686A 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8448 00006870 7717                <2> 	ja	.noddF_y
  8449 00006872 49                  <2> 	dec ecx
  8450 00006873 2B05[F5570000]      <2> 	sub eax, [resolutionx2]
  8451 00006879 8105[FA680000]0200- <2> 	add dword [.ddF_y], 2
  8452 00006881 0000                <2>
  8453 00006883 0335[FA680000]      <2> 	add esi, [.ddF_y]
  8454                              <2> .noddF_y:
  8455 00006889 42                  <2> 	inc edx
  8456 0000688A 031D[F5570000]      <2> 	add ebx, [resolutionx2]
  8457 00006890 8105[F6680000]0200- <2> 	add dword [.ddF_x], 2
  8458 00006898 0000                <2>
  8459 0000689A 0335[F6680000]      <2> 	add esi, [.ddF_x]
  8460                              <2> 
  8461 000068A0 D1E2                <2> 	shl edx, 1
  8462 000068A2 D1E1                <2> 	shl ecx, 1
  8463 000068A4 01D7                <2> 	add edi, edx
  8464 000068A6 01C7                <2> 	add edi, eax
  8465 000068A8 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  8466 000068AB D1E2                <2> 	shl edx, 1
  8467 000068AD 29D7                <2> 	sub edi, edx
  8468 000068AF 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8469 000068B2 D1E0                <2> 	shl eax, 1
  8470 000068B4 29C7                <2> 	sub edi, eax
  8471 000068B6 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  8472 000068B9 01D7                <2> 	add edi, edx
  8473 000068BB 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8474 000068BE D1E8                <2> 	shr eax, 1
  8475 000068C0 D1EA                <2> 	shr edx, 1
  8476 000068C2 01C7                <2> 	add edi, eax
  8477 000068C4 29D7                <2> 	sub edi, edx
  8478                              <2> 
  8479 000068C6 39D1                <2> 	cmp ecx, edx
  8480 000068C8 749C                <2> 	je .lpb
  8481                              <2> 
  8482 000068CA 01DF                <2> 	add edi, ebx
  8483 000068CC 01CF                <2> 	add edi, ecx
  8484 000068CE 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8485 000068D1 D1E1                <2> 	shl ecx, 1
  8486 000068D3 29CF                <2> 	sub edi, ecx
  8487 000068D5 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8488 000068D8 D1E3                <2> 	shl ebx, 1
  8489 000068DA 29DF                <2> 	sub edi, ebx
  8490 000068DC 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8491 000068DF 01CF                <2> 	add edi, ecx
  8492 000068E1 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8493 000068E4 D1EB                <2> 	shr ebx, 1
  8494 000068E6 D1E9                <2> 	shr ecx, 1
  8495 000068E8 01DF                <2> 	add edi, ebx
  8496 000068EA 29CF                <2> 	sub edi, ecx
  8497 000068EC 39CA                <2> 	cmp edx, ecx
  8498 000068EE 0F8272FFFFFF        <2> 	jb .lpb
  8499                              <2> .done:
  8500 000068F4 5D                  <2> 	pop ebp
  8501 000068F5 C3                  <2> 	ret
  8502                              <2> 	
  8503 000068F6 00000000            <2> .ddF_x dd 0
  8504 000068FA 00000000            <2> .ddF_y dd 0
  8505                              <2> 
  8506                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  8507 000068FE 55                  <2> 	push ebp
  8508 000068FF 663D0000            <2> 	cmp ax, 0
  8509 00006903 770A                <2> 	ja .nozerocircle
  8510 00006905 E8E41A0000          <2> 	call putpixel	;the easiest circle ever
  8511 0000690A E95A010000          <2> 	jmp .done
  8512                              <2> .nozerocircle:
  8513 0000690F 6689F5              <2> 	mov bp, si
  8514 00006912 6650                <2> 	push ax
  8515 00006914 E8161B0000          <2> 	call getpixelmem
  8516 00006919 31C0                <2> 	xor eax, eax
  8517 0000691B 6658                <2> 	pop ax
  8518 0000691D BE01000000          <2> 	mov esi, 1
  8519 00006922 29C6                <2> 	sub esi, eax
  8520 00006924 89C1                <2> 	mov ecx, eax
  8521 00006926 31C0                <2> 	xor eax, eax
  8522 00006928 66A1[F5570000]      <2> 	mov ax, [resolutionx2]
  8523 0000692E F7E1                <2> 	mul ecx
  8524 00006930 50                  <2> 	push eax
  8525 00006931 31D2                <2> 	xor edx, edx
  8526 00006933 01C7                <2> 	add edi, eax
  8527 00006935 66892F              <2> 	mov [edi], bp
  8528 00006938 29C7                <2> 	sub edi, eax
  8529 0000693A 29C7                <2> 	sub edi, eax
  8530 0000693C 66892F              <2> 	mov [edi], bp
  8531 0000693F 01C7                <2> 	add edi, eax
  8532 00006941 D1E1                <2> 	shl ecx, 1
  8533 00006943 01CF                <2> 	add edi, ecx
  8534 00006945 51                  <2> 	push ecx
  8535                              <2> .s0:
  8536 00006946 66892F              <2> 	mov [edi], bp
  8537 00006949 81EF02000000        <2> 	sub edi, 2
  8538 0000694F 49                  <2> 	dec ecx
  8539 00006950 81F900000000        <2> 	cmp ecx, 0
  8540 00006956 75EE                <2> 	jne .s0
  8541 00006958 66892F              <2> 	mov [edi], bp
  8542 0000695B 59                  <2> 	pop ecx
  8543 0000695C 01CF                <2> 	add edi, ecx
  8544 0000695E D1E9                <2> 	shr ecx, 1
  8545 00006960 B802000000          <2> 	mov eax, 2
  8546 00006965 F7E1                <2> 	mul ecx
  8547 00006967 48                  <2> 	dec eax
  8548 00006968 F7D0                <2> 	not eax ;make it negative
  8549 0000696A A3[6F6A0000]        <2> 	mov [.ddF_y], eax
  8550 0000696F 58                  <2> 	pop eax
  8551 00006970 BB01000000          <2> 	mov ebx, 1
  8552 00006975 891D[6B6A0000]      <2> 	mov [.ddF_x], ebx
  8553 0000697B 4B                  <2> 	dec ebx
  8554 0000697C 31D2                <2> 	xor edx, edx
  8555 0000697E E904000000          <2> 	jmp .lp
  8556                              <2> .lpb:
  8557 00006983 D1EA                <2> 	shr edx, 1
  8558 00006985 D1E9                <2> 	shr ecx, 1
  8559                              <2> .lp:	;it starts this with the center in edi
  8560                              <2> 		;color in bp
  8561                              <2> 		;ddF_x in memory
  8562                              <2> 		;x*resolutionx2 in ebx
  8563                              <2> 		;x in edx
  8564                              <2> 		;ddF_y in memory
  8565                              <2> 		;y*resolutionx2 in eax
  8566                              <2> 		;f in esi
  8567                              <2> 		;y in ecx
  8568 00006987 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8569 0000698D 7717                <2> 	ja	.noddF_y
  8570 0000698F 49                  <2> 	dec ecx
  8571 00006990 2B05[F5570000]      <2> 	sub eax, [resolutionx2]
  8572 00006996 8105[6F6A0000]0200- <2> 	add dword [.ddF_y], 2
  8573 0000699E 0000                <2>
  8574 000069A0 0335[6F6A0000]      <2> 	add esi, [.ddF_y]
  8575                              <2> .noddF_y:
  8576 000069A6 42                  <2> 	inc edx
  8577 000069A7 031D[F5570000]      <2> 	add ebx, [resolutionx2]
  8578 000069AD 8105[6B6A0000]0200- <2> 	add dword [.ddF_x], 2
  8579 000069B5 0000                <2>
  8580 000069B7 0335[6B6A0000]      <2> 	add esi, [.ddF_x]
  8581                              <2> 
  8582 000069BD D1E2                <2> 	shl edx, 1
  8583 000069BF D1E1                <2> 	shl ecx, 1
  8584 000069C1 52                  <2> 	push edx
  8585 000069C2 29D7                <2> 	sub edi, edx
  8586 000069C4 01C7                <2> 	add edi, eax
  8587 000069C6 81FA00000000        <2> 	cmp edx, 0
  8588 000069CC 7412                <2> 	je .nos1
  8589                              <2> .s1:
  8590 000069CE 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8591 000069D1 81C702000000        <2> 	add edi, 2
  8592 000069D7 4A                  <2> 	dec edx
  8593 000069D8 81FA00000000        <2> 	cmp edx, 0
  8594 000069DE 75EE                <2> 	jne .s1
  8595                              <2> .nos1:
  8596 000069E0 66892F              <2> 	mov [edi], bp
  8597 000069E3 5A                  <2> 	pop edx
  8598 000069E4 52                  <2> 	push edx
  8599 000069E5 29C7                <2> 	sub edi, eax
  8600 000069E7 29C7                <2> 	sub edi, eax
  8601 000069E9 81FA00000000        <2> 	cmp edx, 0
  8602 000069EF 7412                <2> 	je .nos2
  8603                              <2> .s2:
  8604 000069F1 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8605 000069F4 81EF02000000        <2> 	sub edi, 2
  8606 000069FA 4A                  <2> 	dec edx
  8607 000069FB 81FA00000000        <2> 	cmp edx, 0
  8608 00006A01 75EE                <2> 	jne .s2
  8609                              <2> .nos2:
  8610 00006A03 66892F              <2> 	mov [edi], bp
  8611 00006A06 5A                  <2> 	pop edx
  8612 00006A07 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  8613 00006A09 01D7                <2> 	add edi, edx
  8614                              <2> 
  8615 00006A0B 39D1                <2> 	cmp ecx, edx
  8616 00006A0D 0F8470FFFFFF        <2> 	je .lpb
  8617                              <2> 
  8618 00006A13 51                  <2> 	push ecx
  8619 00006A14 01DF                <2> 	add edi, ebx
  8620 00006A16 29CF                <2> 	sub edi, ecx
  8621 00006A18 81F900000000        <2> 	cmp ecx, 0
  8622 00006A1E 7412                <2> 	je .nos3
  8623                              <2> .s3:
  8624 00006A20 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8625 00006A23 81C702000000        <2> 	add edi, 2
  8626 00006A29 49                  <2> 	dec ecx
  8627 00006A2A 81F900000000        <2> 	cmp ecx, 0
  8628 00006A30 75EE                <2> 	jne .s3
  8629                              <2> .nos3:
  8630 00006A32 66892F              <2> 	mov [edi], bp
  8631 00006A35 59                  <2> 	pop ecx
  8632 00006A36 51                  <2> 	push ecx
  8633 00006A37 29DF                <2> 	sub edi, ebx
  8634 00006A39 29DF                <2> 	sub edi, ebx
  8635 00006A3B 81F900000000        <2> 	cmp ecx, 0
  8636 00006A41 7412                <2> 	je .nos4
  8637                              <2> .s4:
  8638 00006A43 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8639 00006A46 81EF02000000        <2> 	sub edi, 2
  8640 00006A4C 49                  <2> 	dec ecx
  8641 00006A4D 81F900000000        <2> 	cmp ecx, 0
  8642 00006A53 75EE                <2> 	jne .s4
  8643                              <2> .nos4:
  8644 00006A55 66892F              <2> 	mov [edi], bp
  8645 00006A58 59                  <2> 	pop ecx
  8646 00006A59 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  8647 00006A5B 01CF                <2> 	add edi, ecx
  8648                              <2> 
  8649 00006A5D D1EA                <2> 	shr edx, 1
  8650 00006A5F D1E9                <2> 	shr ecx, 1
  8651 00006A61 39CA                <2> 	cmp edx, ecx
  8652 00006A63 0F821EFFFFFF        <2> 	jb .lp
  8653                              <2> .done:
  8654 00006A69 5D                  <2> 	pop ebp
  8655 00006A6A C3                  <2> 	ret
  8656                              <2> 	
  8657 00006A6B 00000000            <2> .ddF_x dd 0
  8658 00006A6F 00000000            <2> .ddF_y dd 0
  8659                              <1> %include "source/gui/cursor.asm"
  8660                              <2> clearmousecursor:
  8661 00006A73 BE[DB6D0000]        <2> 		mov esi, background
  8662 00006A78 8B3D[1D570000]      <2> 		mov edi, [physbaseptr]
  8663 00006A7E 31D2                <2> 		xor edx, edx
  8664 00006A80 31C9                <2> 		xor ecx, ecx
  8665 00006A82 668B15[E7590000]    <2> 		mov dx, [lastmouseposition]
  8666 00006A89 668B0D[E9590000]    <2> 		mov cx, [lastmouseposition + 2]
  8667 00006A90 01D7                <2> 		add edi, edx
  8668 00006A92 31D2                <2> 		xor edx, edx
  8669 00006A94 668B15[F5570000]    <2> 		mov dx, [resolutionx2]
  8670 00006A9B 81F900000000        <2> 		cmp ecx, 0
  8671 00006AA1 7408                <2> 		je .nomul
  8672 00006AA3 52                  <2> 		push edx
  8673 00006AA4 89D0                <2> 		mov eax, edx
  8674 00006AA6 F7E1                <2> 		mul ecx
  8675 00006AA8 01C7                <2> 		add edi, eax
  8676 00006AAA 5A                  <2> 		pop edx
  8677                              <2> .nomul:
  8678                              <2> %ifdef 	gui.background
  8679                              <2> 		cmp dword [backgroundimage], 0
  8680                              <2> 		je .noyclr
  8681                              <2> 		mov esi, [backgroundimage]
  8682                              <2> 		sub edi, [physbaseptr]
  8683                              <2> 		add esi, edi
  8684                              <2> 		add edi, [physbaseptr]
  8685                              <2> .backlp:
  8686                              <2> 		xor ebx, ebx
  8687                              <2> .noyback:
  8688                              <2> 		mov eax, [esi + ebx]
  8689                              <2> 		mov [edi + ebx], eax
  8690                              <2> 		add ebx, 4
  8691                              <2> 		cmp ebx, 16
  8692                              <2> 		jne .noyback
  8693                              <2> 		add edi, edx
  8694                              <2> 		add esi, edx
  8695                              <2> 		inc cx
  8696                              <2> 		cmp cx, 16
  8697                              <2> 		jb .backlp
  8698                              <2> 		ret
  8699                              <2> %endif
  8700                              <2> .noyclr:
  8701 00006AAB 668B06              <2> 		mov ax, [esi]
  8702 00006AAE C1C010              <2> 		rol eax, 16
  8703 00006AB1 668B06              <2> 		mov ax, [esi]
  8704 00006AB4 8907                <2> 		mov [edi], eax
  8705 00006AB6 894704              <2> 		mov [edi + 4], eax
  8706 00006AB9 894708              <2> 		mov [edi + 8], eax
  8707 00006ABC 89470C              <2> 		mov [edi + 12], eax
  8708 00006ABF 01D7                <2> 		add edi, edx
  8709 00006AC1 6641                <2> 		inc cx
  8710 00006AC3 6681F91000          <2> 		cmp cx, 16
  8711 00006AC8 72E1                <2> 		jb .noyclr
  8712 00006ACA C3                  <2> 		ret
  8713                              <2> 
  8714                              <2> switchmousepos:		;;switch were the mouse is located
  8715 00006ACB BE[7B0E0100]        <2> 		mov esi, mousecolorbuf
  8716 00006AD0 8B3D[1D570000]      <2> 		mov edi, [physbaseptr]
  8717 00006AD6 31D2                <2> 		xor edx, edx
  8718 00006AD8 31C9                <2> 		xor ecx, ecx
  8719 00006ADA 668B15[E7590000]    <2> 		mov dx, [lastmouseposition]
  8720 00006AE1 668B0D[E9590000]    <2> 		mov cx, [lastmouseposition + 2]
  8721 00006AE8 01D7                <2> 		add edi, edx
  8722 00006AEA 31D2                <2> 		xor edx, edx
  8723 00006AEC 668B15[F5570000]    <2> 		mov dx, [resolutionx2]
  8724 00006AF3 6681F90000          <2> 		cmp cx, 0
  8725 00006AF8 740B                <2> 		je noswmsy
  8726 00006AFA 01D7                <2> swmsy:		add edi, edx
  8727 00006AFC 6649                <2> 		dec cx
  8728 00006AFE 6681F90000          <2> 		cmp cx, 0
  8729 00006B03 75F5                <2> 		jne swmsy
  8730 00006B05 8B06                <2> noswmsy:	mov eax, [esi]
  8731 00006B07 8B5E04              <2> 		mov ebx, [esi + 4]
  8732 00006B0A 8907                <2> 		mov [edi], eax
  8733 00006B0C 895F04              <2> 		mov [edi + 4], ebx
  8734 00006B0F 8B4608              <2> 		mov eax, [esi + 8]
  8735 00006B12 8B5E0C              <2> 		mov ebx, [esi + 12]
  8736 00006B15 894708              <2> 		mov [edi + 8], eax
  8737 00006B18 895F0C              <2> 		mov [edi + 12], ebx
  8738 00006B1B 01D7                <2> 		add edi, edx
  8739 00006B1D 81C610000000        <2> 		add esi, 16
  8740 00006B23 81FE[7B0F0100]      <2> 		cmp esi, mcolorend
  8741 00006B29 72DA                <2> 		jb noswmsy
  8742                              <2> 		
  8743                              <2> switchmousepos2:
  8744 00006B2B BE[7B0E0100]        <2> 		mov esi, mousecolorbuf
  8745 00006B30 8B3D[1D570000]      <2> 		mov edi, [physbaseptr]
  8746 00006B36 31D2                <2> 		xor edx, edx
  8747 00006B38 31C9                <2> 		xor ecx, ecx
  8748 00006B3A 668B15[EB590000]    <2> 		mov dx, [mousecursorposition]
  8749 00006B41 668B0D[ED590000]    <2> 		mov cx, [mousecursorposition + 2]
  8750 00006B48 01D7                <2> 		add edi, edx
  8751 00006B4A 31D2                <2> 		xor edx, edx
  8752 00006B4C 668B15[F5570000]    <2> 		mov dx, [resolutionx2]
  8753 00006B53 6681F90000          <2> 		cmp cx, 0
  8754 00006B58 740B                <2> 		je noswmsy2
  8755 00006B5A 01D7                <2> swmsy2:		add edi, edx
  8756 00006B5C 6649                <2> 		dec cx
  8757 00006B5E 6681F90000          <2> 		cmp cx, 0
  8758 00006B63 75F5                <2> 		jne swmsy2
  8759 00006B65 8B07                <2> noswmsy2:	mov eax, [edi]
  8760 00006B67 8B5F04              <2> 		mov ebx, [edi + 4]
  8761 00006B6A 8906                <2> 		mov [esi], eax
  8762 00006B6C 895E04              <2> 		mov [esi + 4], ebx
  8763 00006B6F 8B4708              <2> 		mov eax, [edi + 8]
  8764 00006B72 8B5F0C              <2> 		mov ebx, [edi + 12]
  8765 00006B75 894608              <2> 		mov [esi + 8], eax
  8766 00006B78 895E0C              <2> 		mov [esi + 12], ebx
  8767 00006B7B 01D7                <2> 		add edi, edx
  8768 00006B7D 81C610000000        <2> 		add esi, 16
  8769 00006B83 81FE[7B0F0100]      <2> 		cmp esi, mcolorend
  8770 00006B89 72DA                <2> 		jb noswmsy2
  8771 00006B8B C3                  <2> 		ret
  8772                              <2> 		
  8773                              <1> %include "source/gui/icon.asm"
  8774 00006B8C 0000                <2> iconcolor dw 0
  8775                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8776 00006B8E A2[57840000]        <2> 		mov [iconselected], al
  8777 00006B93 8025[57840000]01    <2> 		and byte [iconselected], 1
  8778 00006B9A B401                <2> 		mov ah, 1
  8779 00006B9C E8DF150000          <2> 		call graphicsadd
  8780                              <2> 	showicon2:
  8781 00006BA1 8B3D[1D570000]      <2> 		mov edi, [physbaseptr]
  8782 00006BA7 6601D2              <2> 		add dx, dx
  8783 00006BAA 663B15[F5570000]    <2> 		cmp dx, [resolutionx2]
  8784 00006BB1 720C                <2> 		jb screenxgood
  8785 00006BB3 668B15[F5570000]    <2> 		mov dx, [resolutionx2]
  8786 00006BBA 6681EA4000          <2> 		sub dx, 64
  8787                              <2> 	screenxgood:
  8788 00006BBF 6681F90000          <2> 		cmp cx, 0
  8789 00006BC4 742B                <2> 		je noscreenygoodchk
  8790 00006BC6 663B0D[09570000]    <2> 		cmp cx, [resolutiony]
  8791 00006BCD 720C                <2> 		jb screenygood
  8792 00006BCF 668B0D[09570000]    <2> 		mov cx, [resolutiony]
  8793 00006BD6 6681E92000          <2> 		sub cx, 32
  8794                              <2> 	screenygood:
  8795 00006BDB 50                  <2> 		push eax
  8796 00006BDC 52                  <2> 		push edx
  8797 00006BDD 31C0                <2> 		xor eax, eax
  8798 00006BDF 31DB                <2> 		xor ebx, ebx
  8799 00006BE1 668B1D[F5570000]    <2> 		mov bx, [resolutionx2]
  8800 00006BE8 6689C8              <2> 		mov ax, cx
  8801 00006BEB F7E3                <2> 		mul ebx
  8802 00006BED 01C7                <2> 		add edi, eax
  8803 00006BEF 5A                  <2> 		pop edx
  8804 00006BF0 58                  <2> 		pop eax
  8805                              <2> 	noscreenygoodchk:
  8806 00006BF1 31DB                <2> 		xor ebx, ebx
  8807 00006BF3 6689D3              <2> 		mov bx, dx
  8808 00006BF6 01DF                <2> 		add edi, ebx
  8809 00006BF8 6631C9              <2> 		xor cx, cx
  8810 00006BFB 668B06              <2> 		mov ax, [esi]
  8811 00006BFE 81C602000000        <2> 		add esi, 2
  8812 00006C04 66A3[8C6B0000]      <2> 		mov [iconcolor], ax
  8813                              <2> 	writeicon:
  8814 00006C0A 8B06                <2> 		mov eax, [esi]
  8815 00006C0C D1C0                <2> 		rol eax, 1
  8816 00006C0E 30C9                <2> 		xor cl, cl
  8817                              <2> 	writeiconline:
  8818 00006C10 B201                <2> 		mov dl, 1
  8819 00006C12 20C2                <2> 		and dl, al
  8820 00006C14 3215[57840000]      <2> 		xor dl, [iconselected]
  8821 00006C1A 668B1D[DB6D0000]    <2> 		mov bx, [background]
  8822 00006C21 66891F              <2> 		mov [edi], bx
  8823 00006C24 80FA00              <2> 		cmp dl, 0
  8824 00006C27 740A                <2> 		je noiconline
  8825 00006C29 668B15[8C6B0000]    <2> 		mov dx, [iconcolor]
  8826 00006C30 668917              <2> 		mov [edi], dx
  8827                              <2> 	noiconline:
  8828 00006C33 81C702000000        <2> 		add edi, 2
  8829 00006C39 D1C0                <2> 		rol eax, 1
  8830 00006C3B FEC1                <2> 		inc cl
  8831 00006C3D 80F920              <2> 		cmp cl, 32
  8832 00006C40 72CE                <2> 		jb writeiconline
  8833 00006C42 81C604000000        <2> 		add esi, 4
  8834 00006C48 FEC5                <2> 		inc ch
  8835 00006C4A 31D2                <2> 		xor edx, edx
  8836 00006C4C 668B15[F5570000]    <2> 		mov dx, [resolutionx2]
  8837 00006C53 01D7                <2> 		add edi, edx
  8838 00006C55 81EF40000000        <2> 		sub edi, 64
  8839 00006C5B 80FD20              <2> 		cmp ch, 32
  8840 00006C5E 72AA                <2> 		jb writeicon
  8841 00006C60 31C0                <2> 		xor eax, eax
  8842 00006C62 C3                  <2> 		ret
  8843                              <1> %include "source/gui/line.asm"
  8844                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  8845 00006C63 668935[856D0000]    <2> 	mov [.color], si
  8846 00006C6A C605[876D0000]00    <2> 	mov byte [.steep], 0
  8847 00006C71 C605[886D0000]00    <2> 	mov byte [.yreversed], 0
  8848 00006C78 E907000000          <2> 	jmp .notsteep
  8849                              <2> .steeploop:
  8850 00006C7D C605[876D0000]01    <2> 	mov byte [.steep], 1
  8851                              <2> .notsteep:
  8852 00006C84 31FF                <2> 	xor edi, edi
  8853 00006C86 31F6                <2> 	xor esi, esi
  8854 00006C88 6639DA              <2> 	cmp dx, bx
  8855 00006C8B 7705                <2> 	ja .noreversex
  8856 00006C8D 6687D3              <2> 	xchg dx, bx
  8857 00006C90 6691                <2> 	xchg cx, ax
  8858                              <2> .noreversex:
  8859 00006C92 6689D7              <2> 	mov di, dx
  8860 00006C95 6629DF              <2> 	sub di, bx
  8861                              <2> 	
  8862 00006C98 6639C1              <2> 	cmp cx, ax
  8863 00006C9B 720B                <2> 	jb .reversey
  8864 00006C9D 6689CE              <2> 	mov si, cx
  8865 00006CA0 6629C6              <2> 	sub si, ax
  8866 00006CA3 E90D000000          <2> 	jmp .normal
  8867                              <2> .reversey:
  8868 00006CA8 C605[886D0000]02    <2> 	mov byte [.yreversed], 2
  8869 00006CAF 6689C6              <2> 	mov si, ax
  8870 00006CB2 6629CE              <2> 	sub si, cx	
  8871                              <2> .normal:
  8872 00006CB5 6687CA              <2> 	xchg cx, dx
  8873 00006CB8 6693                <2> 	xchg ax, bx
  8874 00006CBA 6639FE              <2> 	cmp si, di
  8875 00006CBD 77BE                <2> 	ja .steeploop
  8876 00006CBF 6687CA              <2> 	xchg cx, dx
  8877 00006CC2 6693                <2> 	xchg ax, bx
  8878                              <2> 	
  8879 00006CC4 6691                <2> 	xchg ax, cx
  8880 00006CC6 6687DA              <2> 	xchg bx, dx
  8881 00006CC9 66893D[8B6D0000]    <2> 	mov [.xdelta], di
  8882 00006CD0 668935[8D6D0000]    <2> 	mov [.ydelta], si
  8883 00006CD7 668B35[856D0000]    <2> 	mov si, [.color]
  8884 00006CDE 66891D[896D0000]    <2> 	mov [.endline], bx
  8885 00006CE5 6652                <2> 	push dx
  8886 00006CE7 6651                <2> 	push cx
  8887 00006CE9 6687CA              <2> 	xchg cx, dx
  8888 00006CEC 803D[876D0000]01    <2> 	cmp byte [.steep], 1
  8889 00006CF3 7403                <2> 	je .xchg
  8890 00006CF5 6687D1              <2> 	xchg dx, cx
  8891                              <2> .xchg:
  8892 00006CF8 E832170000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  8893 00006CFD 6659                <2> 	pop cx
  8894 00006CFF 665A                <2> 	pop dx
  8895 00006D01 31C0                <2> 	xor eax, eax
  8896 00006D03 66A1[8B6D0000]      <2> 	mov ax, [.xdelta]
  8897 00006D09 66D1E8              <2> 	shr ax, 1
  8898 00006D0C 8A0D[876D0000]      <2> 	mov cl, [.steep]
  8899 00006D12 0A0D[886D0000]      <2> 	or cl, [.yreversed]
  8900 00006D18 55                  <2> 	push ebp
  8901 00006D19 668B2D[896D0000]    <2> 	mov bp, [.endline]
  8902 00006D20 6629D5              <2> 	sub bp, dx
  8903 00006D23 668B15[8D6D0000]    <2> 	mov dx, [.ydelta]
  8904                              <2> .lp:
  8905 00006D2A 668937              <2> 	mov [edi], si
  8906 00006D2D 6639D0              <2> 	cmp ax, dx
  8907 00006D30 7332                <2> 	jae .noaddx
  8908 00006D32 F6C102              <2> 	test cl, 2
  8909 00006D35 7414                <2> 	jz .nodecy
  8910 00006D37 F6C101              <2> 	test cl, 1
  8911 00006D3A 7509                <2> 	jnz .steepy
  8912 00006D3C 29DF                <2> 	sub edi, ebx
  8913 00006D3E 29DF                <2> 	sub edi, ebx
  8914 00006D40 E906000000          <2> 	jmp .nodecy
  8915                              <2> .steepy:
  8916 00006D45 81EF04000000        <2> 	sub edi, 4
  8917                              <2> .nodecy:
  8918 00006D4B 660305[8B6D0000]    <2> 	add ax, [.xdelta]
  8919 00006D52 F6C101              <2> 	test cl, 1
  8920 00006D55 7507                <2> 	jnz .steepx
  8921 00006D57 01DF                <2> 	add edi, ebx
  8922 00006D59 E906000000          <2> 	jmp .noaddx
  8923                              <2> .steepx:
  8924 00006D5E 81C702000000        <2> 	add edi, 2
  8925                              <2> .noaddx:
  8926 00006D64 6629D0              <2> 	sub ax, dx
  8927 00006D67 664D                <2> 	dec bp
  8928 00006D69 81C702000000        <2> 	add edi, 2
  8929 00006D6F F6C101              <2> 	test cl, 1
  8930 00006D72 7408                <2> 	jz .nosteepx
  8931 00006D74 81EF02000000        <2> 	sub edi, 2
  8932 00006D7A 01DF                <2> 	add edi, ebx
  8933                              <2> .nosteepx:
  8934 00006D7C 6681FD0000          <2> 	cmp bp, 0
  8935 00006D81 75A7                <2> 	jne .lp
  8936                              <2> .done:
  8937 00006D83 5D                  <2> 	pop ebp
  8938 00006D84 C3                  <2> 	ret
  8939                              <2> 	
  8940 00006D85 0000                <2> .color dw 0
  8941 00006D87 00                  <2> .steep db 0
  8942 00006D88 00                  <2> .yreversed db 0
  8943 00006D89 0000                <2> .endline dw 0
  8944 00006D8B 0000                <2> .xdelta dw 0
  8945 00006D8D 0000                <2> .ydelta dw 0
  8946                              <1> %include "source/gui/refresh.asm"
  8947                              <2> guiclear:
  8948 00006D8F 8B3D[1D570000]      <2> 	mov edi, [physbaseptr]
  8949 00006D95 668B15[07570000]    <2> 	mov dx, [resolutionx]
  8950 00006D9C 668B0D[09570000]    <2> 	mov cx, [resolutiony]
  8951 00006DA3 668B1D[DB6D0000]    <2> 	mov bx, [background]
  8952 00006DAA 66891D[DD6D0000]    <2> 	mov [background + 2], bx
  8953                              <2> %ifdef gui.background
  8954                              <2> 	cmp dword [backgroundimage], 0
  8955                              <2> 	je guiclear.noback
  8956                              <2> 		mov esi, [backgroundimage]
  8957                              <2> 	.lp:
  8958                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  8959                              <2> 		;movdqa [edi], xmm0
  8960                              <2> 		;add esi, 16
  8961                              <2> 		;add edi, 16
  8962                              <2> 		;sub dx, 8
  8963                              <2> 		mov eax, [esi]
  8964                              <2> 		mov [edi], eax
  8965                              <2> 		add esi, 4
  8966                              <2> 		add edi, 4
  8967                              <2> 		sub dx, 2
  8968                              <2> 		cmp dx, 0
  8969                              <2> 		ja .lp
  8970                              <2> 		dec cx
  8971                              <2> 		mov dx, [resolutionx]
  8972                              <2> 		cmp cx, 0
  8973                              <2> 		ja .lp
  8974                              <2> 		ret
  8975                              <2> 	backgroundimage dd 0
  8976                              <2> %endif
  8977                              <2> guiclear.noback:
  8978 00006DB1 A1[DB6D0000]        <2> 	mov eax, [background]
  8979                              <2> guiclearloop:
  8980 00006DB6 8907                <2> 	mov [edi], eax
  8981 00006DB8 81C704000000        <2> 	add edi, 4
  8982 00006DBE 6681EA0200          <2> 	sub dx, 2
  8983 00006DC3 6681FA0000          <2> 	cmp dx, 0
  8984 00006DC8 77EC                <2> 	ja guiclearloop
  8985 00006DCA 6649                <2> 	dec cx
  8986 00006DCC 668B15[07570000]    <2> 	mov dx, [resolutionx]
  8987 00006DD3 6681F90000          <2> 	cmp cx, 0
  8988 00006DD8 77DC                <2> 	ja guiclearloop
  8989 00006DDA C3                  <2> 	ret
  8990                              <2> 
  8991 00006DDB CF7B<rept>          <2> background times 2 dw 0111101111001111b
  8992                              <2> 	.original equ 0111101111001111b
  8993                              <2> 
  8994                              <2> reloadallgraphics:
  8995 00006DDF BF[7B0C0100]        <2> 		mov edi, graphicstable
  8996                              <2> reloadgraphicsloop:
  8997 00006DE4 8B7702              <2> 		mov esi, [edi + 2]
  8998 00006DE7 668B5706            <2> 		mov dx, [edi + 6]
  8999 00006DEB 668B4F08            <2> 		mov cx, [edi + 8]
  9000 00006DEF 668B07              <2> 		mov ax, [edi]
  9001 00006DF2 668B5F0A            <2> 		mov bx, [edi + 10]
  9002 00006DF6 893D[6C810000]      <2> 		mov [grpctblpos], edi
  9003 00006DFC 3B3D[037C0000]      <2> 		cmp edi, [dragging]
  9004 00006E02 741E                <2> 		je loadedgraphic
  9005 00006E04 663D0100            <2> 		cmp ax, 1
  9006 00006E08 0F8436000000        <2> 		je near icongraphic
  9007 00006E0E 663D0200            <2> 		cmp ax, 2
  9008 00006E12 0F843C000000        <2> 		je near stringgraphic
  9009 00006E18 663D0300            <2> 		cmp ax, 3
  9010 00006E1C 0F8416000000        <2> 		je near windowgraphic
  9011 00006E22 8B3D[6C810000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  9012 00006E28 81C710000000        <2> 		add edi, 16
  9013 00006E2E 81FF[7B0E0100]      <2> 		cmp edi, graphicstableend
  9014 00006E34 732E                <2> 		jae donereloadgraphics
  9015 00006E36 EBAC                <2> 		jmp reloadgraphicsloop
  9016                              <2> windowgraphic:
  9017 00006E38 E827090000          <2> 		call showwindow2
  9018 00006E3D E8D6AFFFFF          <2> 		call cleardouble
  9019 00006E42 EBDE                <2> 		jmp loadedgraphic
  9020 00006E44 80E301              <2> icongraphic:	and bl, 1
  9021 00006E47 881D[57840000]      <2> 		mov [iconselected], bl
  9022 00006E4D E84FFDFFFF          <2> 		call showicon2
  9023 00006E52 EBCE                <2> 		jmp loadedgraphic
  9024 00006E54 80E301              <2> stringgraphic:  and bl, 1
  9025 00006E57 881D[FF7B0000]      <2> 		mov [mouseselecton], bl
  9026 00006E5D E8CE050000          <2> 		call showstring2
  9027 00006E62 EBBE                <2> 		jmp loadedgraphic
  9028                              <2> donereloadgraphics:
  9029 00006E64 8B3D[037C0000]      <2> 		mov edi, [dragging]
  9030 00006E6A 81FF[7B0C0100]      <2> 		cmp edi, graphicstable
  9031 00006E70 7226                <2> 		jb notcorrectdrag
  9032 00006E72 668B07              <2> 		mov ax, [edi]
  9033 00006E75 8B7702              <2> 		mov esi, [edi + 2]
  9034 00006E78 668B5706            <2> 		mov dx, [edi + 6]
  9035 00006E7C 668B4F08            <2> 		mov cx, [edi + 8]
  9036 00006E80 668B5F0A            <2> 		mov bx, [edi + 10]
  9037 00006E84 663D0100            <2> 		cmp ax, 1
  9038 00006E88 750F                <2> 		jne noticondragging
  9039 00006E8A 80E301              <2> 		and bl, 1
  9040 00006E8D 881D[57840000]      <2> 		mov [iconselected], bl
  9041 00006E93 E809FDFFFF          <2> 		call showicon2
  9042                              <2> notcorrectdrag:
  9043 00006E98 C3                  <2> 		ret
  9044                              <2> 
  9045                              <2> 	noticondragging:
  9046 00006E99 663D0200            <2> 		cmp ax, 2
  9047 00006E9D 75F9                <2> 		jne notcorrectdrag
  9048 00006E9F 80E301              <2> 		and bl, 1
  9049 00006EA2 881D[FF7B0000]      <2> 		mov [mouseselecton], bl
  9050 00006EA8 E883050000          <2> 		call showstring2
  9051 00006EAD EBE9                <2> 		jmp notcorrectdrag
  9052                              <1> %include "source/gui/square.asm"
  9053                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  9054 00006EAF 6639D3              <2> 	cmp bx, dx
  9055 00006EB2 7303                <2> 	jae .noxchgx
  9056 00006EB4 6687DA              <2> 	xchg bx, dx
  9057                              <2> .noxchgx:
  9058 00006EB7 6639C8              <2> 	cmp ax, cx
  9059 00006EBA 7302                <2> 	jae .noxchgy
  9060 00006EBC 6691                <2> 	xchg ax, cx
  9061                              <2> .noxchgy:
  9062 00006EBE 6650                <2> 	push ax
  9063 00006EC0 6653                <2> 	push bx
  9064 00006EC2 6652                <2> 	push dx
  9065 00006EC4 E866150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9066 00006EC9 31D2                <2> 	xor edx, edx
  9067 00006ECB 665A                <2> 	pop dx
  9068 00006ECD 31DB                <2> 	xor ebx, ebx
  9069 00006ECF 665B                <2> 	pop bx
  9070 00006ED1 6658                <2> 	pop ax
  9071                              <2> .lp0:
  9072 00006ED3 6652                <2> 	push dx
  9073                              <2> .lp:
  9074 00006ED5 668937              <2> 	mov [edi], si
  9075 00006ED8 81C702000000        <2> 	add edi, 2
  9076 00006EDE 6642                <2> 	inc dx
  9077 00006EE0 6639DA              <2> 	cmp dx, bx
  9078 00006EE3 76F0                <2> 	jbe .lp
  9079 00006EE5 665A                <2> 	pop dx
  9080 00006EE7 81EF02000000        <2> 	sub edi, 2
  9081 00006EED 29DF                <2> 	sub edi, ebx
  9082 00006EEF 29DF                <2> 	sub edi, ebx
  9083 00006EF1 01D7                <2> 	add edi, edx
  9084 00006EF3 01D7                <2> 	add edi, edx
  9085 00006EF5 033D[F5570000]      <2> 	add edi, [resolutionx2]
  9086 00006EFB 6641                <2> 	inc cx
  9087 00006EFD 6639C1              <2> 	cmp cx, ax
  9088 00006F00 7203                <2> 	jb .lp2
  9089 00006F02 74CF                <2> 	je .lp0
  9090 00006F04 C3                  <2> 	ret
  9091                              <2> .lp2:
  9092 00006F05 57                  <2> 	push edi
  9093 00006F06 668937              <2> 	mov [edi], si
  9094 00006F09 29D7                <2> 	sub edi, edx
  9095 00006F0B 29D7                <2> 	sub edi, edx
  9096 00006F0D 01DF                <2> 	add edi, ebx
  9097 00006F0F 01DF                <2> 	add edi, ebx
  9098 00006F11 668937              <2> 	mov [edi], si
  9099 00006F14 5F                  <2> 	pop edi
  9100 00006F15 033D[F5570000]      <2> 	add edi, [resolutionx2]
  9101 00006F1B 6641                <2> 	inc cx
  9102 00006F1D 6639C1              <2> 	cmp cx, ax
  9103 00006F20 72E3                <2> 	jb .lp2
  9104 00006F22 EBAF                <2> 	jmp .lp0
  9105                              <2> 
  9106                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  9107 00006F24 6639D3              <2> 	cmp bx, dx
  9108 00006F27 7303                <2> 	jae .noxchgx
  9109 00006F29 6687DA              <2> 	xchg bx, dx
  9110                              <2> .noxchgx:
  9111 00006F2C 6639C8              <2> 	cmp ax, cx
  9112 00006F2F 7302                <2> 	jae .noxchgy
  9113 00006F31 6691                <2> 	xchg ax, cx
  9114                              <2> .noxchgy:
  9115 00006F33 6650                <2> 	push ax
  9116 00006F35 6653                <2> 	push bx
  9117 00006F37 6652                <2> 	push dx
  9118 00006F39 E8F1140000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9119 00006F3E 31D2                <2> 	xor edx, edx
  9120 00006F40 665A                <2> 	pop dx
  9121 00006F42 31DB                <2> 	xor ebx, ebx
  9122 00006F44 665B                <2> 	pop bx
  9123 00006F46 6658                <2> 	pop ax
  9124                              <2> .lp2
  9125 00006F48 6652                <2> 	push dx
  9126                              <2> .lp:
  9127 00006F4A 668937              <2> 	mov [edi], si
  9128 00006F4D 81C702000000        <2> 	add edi, 2
  9129 00006F53 6642                <2> 	inc dx
  9130 00006F55 6639DA              <2> 	cmp dx, bx
  9131 00006F58 76F0                <2> 	jbe .lp
  9132 00006F5A 665A                <2> 	pop dx
  9133 00006F5C 81EF02000000        <2> 	sub edi, 2
  9134 00006F62 29DF                <2> 	sub edi, ebx
  9135 00006F64 29DF                <2> 	sub edi, ebx
  9136 00006F66 01D7                <2> 	add edi, edx
  9137 00006F68 01D7                <2> 	add edi, edx
  9138 00006F6A 033D[F5570000]      <2> 	add edi, [resolutionx2]
  9139 00006F70 6641                <2> 	inc cx
  9140 00006F72 6639C1              <2> 	cmp cx, ax
  9141 00006F75 76D1                <2> 	jbe .lp2
  9142 00006F77 C3                  <2> 	ret
  9143                              <1> %include "source/gui/startup.asm"
  9144                              <2> guisetup:
  9145                              <2> 	%ifdef gui.background
  9146                              <2> 	xor ebx, ebx
  9147                              <2> 	mov [backgroundimage], ebx
  9148                              <2> 	%endif
  9149 00006F78 E812FEFFFF          <2> 	call guiclear
  9150 00006F7D C605[9CDB0000]01    <2> 	mov byte [guion], 1
  9151 00006F84 C605[FF7B0000]00    <2> 	mov byte [mouseselecton], 0
  9152 00006F8B 31C0                <2> 	xor eax, eax
  9153 00006F8D 31DB                <2> 	xor ebx, ebx
  9154 00006F8F 31C9                <2> 	xor ecx, ecx
  9155 00006F91 31D2                <2> 	xor edx, edx
  9156                              <2> 	
  9157 00006F93 BE[55710000]        <2> 	mov esi, pacmsg
  9158 00006F98 30E4                <2> 	xor ah, ah
  9159 00006F9A B010                <2> 	mov al, 00010000b
  9160 00006F9C 31DB                <2> 	xor ebx, ebx
  9161 00006F9E 66B99000            <2> 	mov cx, 144
  9162 00006FA2 66BA0400            <2> 	mov dx, 4
  9163 00006FA6 E872040000          <2> 	call showstring
  9164                              <2> 	
  9165 00006FAB BE[93710000]        <2> 	mov esi, interneticon
  9166 00006FB0 30E4                <2> 	xor ah, ah
  9167 00006FB2 B010                <2> 	mov al, 00010000b
  9168 00006FB4 BB[7E700000]        <2> 	mov ebx, noie
  9169 00006FB9 66B91800            <2> 	mov cx, 24
  9170 00006FBD 66BA0400            <2> 	mov dx, 4
  9171 00006FC1 E8C8FBFFFF          <2> 	call showicon
  9172                              <2> 	
  9173 00006FC6 BE[15720000]        <2> 	mov esi, wordicon
  9174 00006FCB 30E4                <2> 	xor ah, ah
  9175 00006FCD B010                <2> 	mov al, 00010000b
  9176 00006FCF 31DB                <2> 	xor ebx, ebx
  9177 00006FD1 66B91800            <2> 	mov cx, 24
  9178 00006FD5 66BA3000            <2> 	mov dx, 48
  9179 00006FD9 E8B0FBFFFF          <2> 	call showicon
  9180                              <2> 	
  9181 00006FDE BE[97720000]        <2> 	mov esi, pacmanpellet
  9182 00006FE3 30E4                <2> 	xor ah, ah
  9183 00006FE5 B010                <2> 	mov al, 00010000b
  9184 00006FE7 31DB                <2> 	xor ebx, ebx
  9185 00006FE9 66B94000            <2> 	mov cx, 64
  9186 00006FED 66BA0400            <2> 	mov dx, 4
  9187 00006FF1 E898FBFFFF          <2> 	call showicon
  9188                              <2> 	
  9189 00006FF6 BE[9B730000]        <2> 	mov esi, pacman
  9190 00006FFB 30E4                <2> 	xor ah, ah
  9191 00006FFD B010                <2> 	mov al, 00010000b
  9192 00006FFF BB[67700000]        <2> 	mov ebx, pacmannomnom
  9193 00007004 66B94000            <2> 	mov cx, 64
  9194 00007008 66BA3000            <2> 	mov dx, 48
  9195 0000700C E87DFBFFFF          <2> 	call showicon
  9196                              <2> 	
  9197 00007011 BE[19730000]        <2> 	mov esi, ghostie
  9198 00007016 30E4                <2> 	xor ah, ah
  9199 00007018 B010                <2> 	mov al, 00010000b
  9200 0000701A BB[50700000]        <2> 	mov ebx, boo
  9201 0000701F 66B96C00            <2> 	mov cx, 108
  9202 00007023 66BA0400            <2> 	mov dx, 4
  9203 00007027 E862FBFFFF          <2> 	call showicon
  9204                              <2> 	
  9205 0000702C BE[37710000]        <2> 	mov esi, start
  9206 00007031 668B0D[09570000]    <2> 	mov cx, [resolutiony]
  9207 00007038 6681E91000          <2> 	sub cx, 16
  9208 0000703D 66BA0200            <2> 	mov dx, 2
  9209 00007041 30E4                <2> 	xor ah, ah
  9210 00007043 B010                <2> 	mov al, 00010000b
  9211 00007045 BB[F3700000]        <2> 	mov ebx, winblows
  9212 0000704A E8CE030000          <2> 	call showstring
  9213                              <2> 
  9214                              <2> %ifdef gui.time	
  9215                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9216                              <2> %endif
  9217 0000704F C3                  <2> 	ret
  9218                              <2> 
  9219                              <2> 	boo:
  9220 00007050 BE[50710000]        <2> 		mov esi, boomsg
  9221 00007055 66BA6400            <2> 		mov dx, 100
  9222 00007059 66B94001            <2> 		mov cx, 320
  9223 0000705D 31DB                <2> 		xor ebx, ebx
  9224 0000705F 6631C0              <2> 		xor ax, ax
  9225 00007062 E9B6030000          <2> 		jmp showstring
  9226                              <2> 
  9227                              <2> 	pacmannomnom:
  9228 00007067 BE[6E710000]        <2> 		mov esi, pacnom
  9229 0000706C 66BA8200            <2> 		mov dx, 130
  9230 00007070 66B93C00            <2> 		mov cx, 60
  9231 00007074 31DB                <2> 		xor ebx, ebx
  9232 00007076 6631C0              <2> 		xor ax, ax
  9233 00007079 E99F030000          <2> 		jmp showstring	
  9234                              <2> 	
  9235                              <2> 	noie:
  9236 0000707E 66C705[7D710000]80- <2> 		mov word [termwindow], 640
  9237 00007086 02                  <2>
  9238 00007087 66C705[7F710000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9239 0000708F 01                  <2>
  9240 00007090 BE[7D710000]        <2> 		mov esi, termwindow
  9241 00007095 66BA1000            <2> 		mov dx, 16
  9242 00007099 66B91000            <2> 		mov cx, 16
  9243 0000709D 31DB                <2> 		xor ebx, ebx
  9244 0000709F 6631C0              <2> 		xor ax, ax
  9245 000070A2 E803060000          <2> 		call showwindow
  9246 000070A7 E930BAFFFF          <2> 		jmp os
  9247                              <2> 
  9248                              <2> 	gotomenuboot:
  9249 000070AC 31D2                <2> 		xor edx, edx
  9250 000070AE 31C9                <2> 		xor ecx, ecx
  9251 000070B0 668B15[07570000]    <2> 		mov dx, [resolutionx]
  9252 000070B7 668B0D[09570000]    <2> 		mov cx, [resolutiony]
  9253 000070BE 66C1E904            <2> 		shr cx, 4
  9254 000070C2 6681E90100          <2> 		sub cx, 1
  9255 000070C7 66C1E104            <2> 		shl cx, 4
  9256 000070CB 668915[7D710000]    <2> 		mov [termwindow], dx
  9257 000070D2 66890D[7F710000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9258 000070D9 BE[7D710000]        <2> 		mov esi, termwindow
  9259 000070DE 6631D2              <2> 		xor dx, dx
  9260 000070E1 6631C9              <2> 		xor cx, cx
  9261 000070E4 31DB                <2> 		xor ebx, ebx
  9262 000070E6 6631C0              <2> 		xor ax, ax
  9263 000070E9 E8BC050000          <2> 		call showwindow
  9264 000070EE E9E9B9FFFF          <2> 		jmp os
  9265                              <2> 
  9266                              <2> 	winblows:
  9267 000070F3 BE[46710000]        <2> 		mov esi, turnoffmsg
  9268 000070F8 BB[69520000]        <2> 		mov ebx, turnoff
  9269 000070FD 668B0D[09570000]    <2> 		mov cx, [resolutiony]
  9270 00007104 6681E92000          <2> 		sub cx, 32
  9271 00007109 6631D2              <2> 		xor dx, dx
  9272 0000710C 30E4                <2> 		xor ah, ah
  9273 0000710E B010                <2> 		mov al, 00010000b
  9274 00007110 E808030000          <2> 		call showstring
  9275 00007115 BE[3D710000]        <2> 		mov esi, gotomenu
  9276 0000711A 668B0D[09570000]    <2> 		mov cx, [resolutiony]
  9277 00007121 6681E93000          <2> 		sub cx, 48
  9278 00007126 6631D2              <2> 		xor dx, dx
  9279 00007129 30E4                <2> 		xor ah, ah
  9280 0000712B B010                <2> 		mov al, 00010000b
  9281 0000712D BB[AC700000]        <2> 		mov ebx, gotomenuboot
  9282 00007132 E9E6020000          <2> 		jmp showstring
  9283                              <2> 		
  9284                              <2> 
  9285 00007137 737461727400        <2> 	start	db "start",0
  9286 0000713D 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9287 00007146 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9288 0000714F 00                  <2>
  9289 00007150 426F6F2100          <2> 	boomsg db "Boo!",0
  9290 00007155 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9291 0000715E 73206561737920746F- <2>
  9292 00007167 20647261772E00      <2>
  9293 0000716E 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9294 00007177 6D206E6F6D00        <2>
  9295                              <2> 
  9296 0000717D 20035802            <2> 	termwindow:	dw 800,600	;window size
  9297 00007181 FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9298 00007185 [7C0F0100]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9299 00007189 [C4E40100]          <2>
  9300 0000718D 534855536800        <2> 	termmsg:	db "SHUSh",0	;;window title
  9301                              <2> 	
  9302 0000718D <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9303 0000718D <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9304 0000718D <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9305 0000718D <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9306 0000718D <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9307                              <2> 
  9308                              <2> %ifdef gui.time
  9309                              <2> guitime:
  9310                              <2> 		call time	;get rtc in timeshow & dateshow
  9311                              <2> 		xor ebx, ebx
  9312                              <2> 		mov dx, [resolutionx2]
  9313                              <2> 		xor cx, cx
  9314                              <2> 		sub dx, 304
  9315                              <2> 		mov esi, dateshow
  9316                              <2> 		mov al, 00010001b
  9317                              <2> 		call showstring
  9318                              <2> 		mov esi, timeshow
  9319                              <2> 		xor ebx, ebx
  9320                              <2> 		mov al, 00010001b
  9321                              <2> 		call showstring
  9322                              <2> 		ret
  9323                              <2> %endif
  9324                              <1> %include "source/gui/text.asm"
  9325                              <2> 	showstring:
  9326 0000741D A2[FF7B0000]        <2> 		mov [mouseselecton], al
  9327 00007422 8025[FF7B0000]01    <2> 		and byte [mouseselecton], 1
  9328 00007429 B402                <2> 		mov ah, 2
  9329 0000742B E8500D0000          <2> 		call graphicsadd
  9330                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9331 00007430 30E4                <2> 		xor ah, ah
  9332 00007432 8A06                <2> 		mov al, [esi]
  9333 00007434 3CC0                <2> 		cmp al, 0xC0
  9334 00007436 7234                <2> 		jb .doneutf
  9335 00007438 3CE0                <2> 		cmp al, 0xE0
  9336 0000743A 721D                <2> 		jb .two
  9337 0000743C 46                  <2> 		inc esi
  9338 0000743D 668B1E              <2> 		mov bx, [esi]
  9339 00007440 46                  <2> 		inc esi
  9340 00007441 C0E004              <2> 		shl al, 4
  9341 00007444 66C1E302            <2> 		shl bx, 2
  9342 00007448 C0EF02              <2> 		shr bh, 2
  9343 0000744B 66C1EB02            <2> 		shr bx, 2
  9344 0000744F 08C7                <2> 		or bh, al
  9345 00007451 6689D8              <2> 		mov ax, bx
  9346 00007454 E913000000          <2> 		jmp .doneutf
  9347                              <2> 	.two:
  9348 00007459 8A3E                <2> 		mov bh, [esi]
  9349 0000745B 46                  <2> 		inc esi
  9350 0000745C 8A1E                <2> 		mov bl, [esi]
  9351 0000745E 66C1E302            <2> 		shl bx, 2
  9352 00007462 C0EF02              <2> 		shr bh, 2
  9353 00007465 66C1EB02            <2> 		shr bx, 2
  9354 00007469 6689D8              <2> 		mov ax, bx
  9355                              <2> 	.doneutf:
  9356 0000746C 3C00                <2> 		cmp al, 0
  9357 0000746E 7420                <2> 		je doneshowstring
  9358 00007470 46                  <2> 		inc esi
  9359 00007471 3CFF                <2> 		cmp al, 255
  9360 00007473 74BB                <2> 		je showstring2
  9361 00007475 56                  <2> 		push esi
  9362 00007476 668B1D[98740000]    <2> 		mov bx, [colorfont2]
  9363 0000747D E827000000          <2> 		call showfontvesa
  9364 00007482 663D0A00            <2> 		cmp ax, 10
  9365 00007486 7405                <2> 		je noproceedshst
  9366 00007488 6681C20800          <2> 		add dx, 8
  9367                              <2> 	noproceedshst:
  9368 0000748D 5E                  <2> 		pop esi
  9369 0000748E EBA0                <2> 		jmp showstring2
  9370                              <2> 	doneshowstring:
  9371 00007490 C605[FF7B0000]00    <2> 		mov byte [mouseselecton], 0
  9372 00007497 C3                  <2> 		ret
  9373                              <2> 
  9374 00007498 FFFF                <2> colorfont2 dw 0xFFFF
  9375 0000749A 00                  <2> colorcache db 0
  9376                              <2> 
  9377 0000749B 02                  <2> resolutionbytes db 2
  9378 0000749C 0000                <2> posxvesa dw 0
  9379 0000749E 0000                <2> posyvesa dw 0
  9380 000074A0 FFFF                <2> colorfont dw 0xFFFF
  9381                              <2> savefontvesa:		;same rules as showfontvesa
  9382 000074A2 C605[FE7B0000]01    <2> 	mov byte [savefonton], 1
  9383                              <2> showfontvesa:		;position in (dx,cx), color in bx, char in ax
  9384 000074A9 663DFF00            <2> 	cmp ax, 255
  9385 000074AD 7501                <2> 	jne nostopshowfont
  9386 000074AF C3                  <2> 	ret
  9387                              <2> nostopshowfont:
  9388 000074B0 55                  <2> 	push ebp
  9389 000074B1 66890D[9E740000]    <2> 	mov [posyvesa], cx
  9390 000074B8 663D0A00            <2> 	cmp ax, 10
  9391 000074BC 0F8424000000        <2> 	je near goodvesafontx
  9392 000074C2 31C9                <2> 	xor ecx, ecx
  9393 000074C4 668B0D[F5570000]    <2> 	mov cx, [resolutionx2]
  9394 000074CB 6639CA              <2> 	cmp dx, cx
  9395 000074CE 7616                <2> 	jbe goodvesafontx
  9396 000074D0 6631D2              <2> 	xor dx, dx
  9397 000074D3 668B0D[9E740000]    <2> 	mov cx, [posyvesa]
  9398 000074DA 6681C11000          <2> 	add cx, 16
  9399 000074DF 66890D[9E740000]    <2> 	mov [posyvesa], cx
  9400                              <2> goodvesafontx:
  9401 000074E6 668B0D[9E740000]    <2> 	mov cx, [posyvesa]
  9402 000074ED 668915[9C740000]    <2> 	mov [posxvesa], dx
  9403 000074F4 8B3D[1D570000]      <2> 	mov edi, [physbaseptr]
  9404 000074FA 66891D[A0740000]    <2> 	mov [colorfont], bx
  9405 00007501 668B2D[A0740000]    <2> 	mov bp, [colorfont]
  9406 00007508 31DB                <2> 	xor ebx, ebx
  9407 0000750A 6689C3              <2> 	mov bx, ax
  9408 0000750D 31C0                <2> 	xor eax, eax
  9409 0000750F 6689D8              <2> 	mov ax, bx
  9410 00007512 6689D3              <2> 	mov bx, dx
  9411 00007515 89DA                <2> 	mov edx, ebx
  9412 00007517 31DB                <2> 	xor ebx, ebx
  9413 00007519 6681F90000          <2> 	cmp cx, 0
  9414 0000751E 7414                <2> 	je vesaposloopdn
  9415 00007520 668B1D[F5570000]    <2> 	mov bx, [resolutionx2]
  9416                              <2> vesaposloop:
  9417 00007527 52                  <2> 	push edx
  9418 00007528 50                  <2> 	push eax
  9419 00007529 31C0                <2> 	xor eax, eax
  9420 0000752B 6689C8              <2> 	mov ax, cx
  9421 0000752E F7E3                <2> 	mul ebx
  9422 00007530 01C7                <2> 	add edi, eax
  9423 00007532 58                  <2> 	pop eax
  9424 00007533 5A                  <2> 	pop edx
  9425                              <2> vesaposloopdn:
  9426 00007534 01D7                <2> 	add edi, edx
  9427 00007536 BE[9C890000]        <2> 	mov esi, fonts
  9428                              <2> findfontvesa:
  9429 0000753B 663D0A00            <2> 	cmp ax, 10
  9430 0000753F 0F84EB000000        <2> 	je near nwlinevesa
  9431 00007545 C1E004              <2> 	shl eax, 4
  9432 00007548 01C6                <2> 	add esi, eax
  9433 0000754A C1E804              <2> 	shr eax, 4
  9434 0000754D 81FE[9CD90000]      <2> 	cmp esi, fontend
  9435 00007553 0F83AB000000        <2> 	jae near donefontvesa
  9436 00007559 4E                  <2> 	dec esi
  9437                              <2> foundfontvesa:
  9438 0000755A 46                  <2> 	inc esi
  9439 0000755B 803D[FE7B0000]01    <2> 	cmp byte [savefonton], 1
  9440 00007562 0F84E7000000        <2> 	je near vesafontsaver
  9441 00007568 30C9                <2> 	xor cl, cl
  9442 0000756A 8A06                <2> 	mov al, [esi]
  9443 0000756C 668B15[F5570000]    <2> 	mov dx, [resolutionx2]
  9444 00007573 662B15[9C740000]    <2> 	sub dx, [posxvesa]
  9445 0000757A 6681FA1000          <2> 	cmp dx, 16
  9446 0000757F 7708                <2> 	ja paintfontvesa
  9447 00007581 D0EA                <2> 	shr dl, 1
  9448 00007583 8815[2F760000]      <2> 	mov [charwidth], dl
  9449                              <2> paintfontvesa:
  9450 00007589 B201                <2> 	mov dl, 1
  9451 0000758B 20C2                <2> 	and dl, al
  9452 0000758D 803D[FD7B0000]01    <2> 	cmp byte [showcursorfonton], 1
  9453 00007594 0F842E000000        <2> 	je near nodelpaintedfont
  9454 0000759A 803D[FD7B0000]02    <2> 	cmp byte [showcursorfonton], 2
  9455 000075A1 0F8511000000        <2> 	jne near noswitchcursorfonton
  9456 000075A7 80FA00              <2> 	cmp dl, 0
  9457 000075AA 0F8420000000        <2> 	je near nopixelset
  9458 000075B0 66892F              <2> 	mov [edi], bp
  9459 000075B3 E918000000          <2> 	jmp nopixelset
  9460                              <2> noswitchcursorfonton:
  9461 000075B8 3215[FF7B0000]      <2> 	xor dl, [mouseselecton]
  9462 000075BE 668B1D[DB6D0000]    <2> 	mov bx, [background]
  9463 000075C5 66891F              <2> 	mov [edi], bx
  9464                              <2> nodelpaintedfont:
  9465 000075C8 80FA00              <2> 	cmp dl, 0
  9466 000075CB 7403                <2> 	je nopixelset
  9467 000075CD 66892F              <2> 	mov [edi], bp
  9468                              <2> nopixelset:
  9469 000075D0 81C702000000        <2> 	add edi, 2
  9470 000075D6 D0C0                <2> 	rol al, 1
  9471 000075D8 FEC1                <2> 	inc cl
  9472 000075DA 3A0D[2F760000]      <2> 	cmp cl, [charwidth]
  9473 000075E0 72A7                <2> 	jb paintfontvesa
  9474 000075E2 FEC5                <2> 	inc ch
  9475 000075E4 31D2                <2> 	xor edx, edx
  9476 000075E6 668B15[F5570000]    <2> 	mov dx, [resolutionx2]
  9477 000075ED 01D7                <2> 	add edi, edx
  9478 000075EF 31D2                <2> 	xor edx, edx
  9479 000075F1 8A15[2F760000]      <2> 	mov dl, [charwidth]
  9480 000075F7 00D2                <2> 	add dl, dl
  9481 000075F9 29D7                <2> 	sub edi, edx
  9482 000075FB 80FD10              <2> 	cmp ch, 16
  9483 000075FE 0F8256FFFFFF        <2> 	jb foundfontvesa
  9484                              <2> donefontvesa:
  9485 00007604 C605[2F760000]08    <2> 	mov byte [charwidth], 8
  9486 0000760B 668B15[9C740000]    <2> 	mov dx, [posxvesa]
  9487 00007612 8A1D[2F760000]      <2> 	mov bl, [charwidth]
  9488 00007618 30FF                <2> 	xor bh, bh
  9489 0000761A 6601DA              <2> 	add dx, bx
  9490 0000761D 6689EB              <2> 	mov bx, bp
  9491 00007620 668B0D[9E740000]    <2> 	mov cx, [posyvesa]
  9492 00007627 883D[FE7B0000]      <2> 	mov [savefonton], bh
  9493 0000762D 5D                  <2> 	pop ebp
  9494 0000762E C3                  <2> 	ret
  9495 0000762F 08                  <2> charwidth db 8
  9496                              <2> nwlinevesa:
  9497 00007630 6631D2              <2> 	xor dx, dx
  9498 00007633 668915[9C740000]    <2> 	mov [posxvesa], dx
  9499 0000763A 668B0D[9E740000]    <2> 	mov cx, [posyvesa]
  9500 00007641 6681C11000          <2> 	add cx, 16
  9501 00007646 66890D[9E740000]    <2> 	mov [posyvesa], cx
  9502 0000764D EBB5                <2> 	jmp donefontvesa
  9503                              <2> vesafontsaver:
  9504 0000764F 30C0                <2> 	xor al, al
  9505 00007651 30C9                <2> 	xor cl, cl
  9506                              <2> vesafontsaver2:
  9507 00007653 66392F              <2> 	cmp [edi], bp
  9508 00007656 742C                <2> 	je colorfontmatch
  9509                              <2> donecolormatch:
  9510 00007658 81C702000000        <2> 	add edi, 2
  9511 0000765E D0C0                <2> 	rol al, 1
  9512 00007660 FEC1                <2> 	inc cl
  9513 00007662 80F908              <2> 	cmp cl, 8
  9514 00007665 72EC                <2> 	jb vesafontsaver2
  9515 00007667 8806                <2> 	mov [esi], al
  9516 00007669 46                  <2> 	inc esi
  9517 0000766A FEC5                <2> 	inc ch
  9518 0000766C 31D2                <2> 	xor edx, edx
  9519 0000766E 668B15[F5570000]    <2> 	mov dx, [resolutionx2]
  9520 00007675 01D7                <2> 	add edi, edx
  9521 00007677 81EF10000000        <2> 	sub edi, 16
  9522 0000767D 80FD10              <2> 	cmp ch, 16
  9523 00007680 72CD                <2> 	jb vesafontsaver
  9524 00007682 EB80                <2> 	jmp donefontvesa
  9525                              <2> colorfontmatch:
  9526 00007684 0401                <2> 	add al, 1
  9527 00007686 EBD0                <2> 	jmp donecolormatch
  9528                              <1> %include "source/gui/window.asm"
  9529 00007688 0000                <2> winvcopystx dw 0
  9530 0000768A 0000                <2> winvcopysty dw 0
  9531 0000768C 0000                <2> winvcopydx dw 0
  9532 0000768E 0000                <2> winvcopycx dw 0
  9533 00007690 FFFF0000            <2> windowcolor dw 0xFFFF,0
  9534 00007694 00000000            <2> windowbufloc: dd 0
  9535 00007698 00000000            <2> windowvideobuf dd 0
  9536 0000769C 00000000            <2> windowvideobuf2 dd 0
  9537 000076A0 00000000            <2> windowinfobuf dd 0
  9538 000076A4 0000                <2> termcol dw 0
  9539 000076A6 00000000            <2> wincopyendpos dd 0
  9540                              <2> 
  9541                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9542 000076AA C605[92230000]01    <2> 		mov byte [termguion], 1
  9543 000076B1 6681C11000          <2> 		add cx, 16
  9544 000076B6 668915[88760000]    <2> 		mov [winvcopystx], dx
  9545 000076BD 66890D[8A760000]    <2> 		mov [winvcopysty], cx
  9546 000076C4 8935[A0760000]      <2> 		mov [windowinfobuf], esi
  9547 000076CA 668B16              <2> 		mov dx, [esi]
  9548 000076CD 668B4E02            <2> 		mov cx, [esi + 2]
  9549 000076D1 31C0                <2> 		xor eax, eax
  9550 000076D3 31DB                <2> 		xor ebx, ebx
  9551 000076D5 6689D0              <2> 		mov ax, dx
  9552 000076D8 6689CB              <2> 		mov bx, cx
  9553 000076DB 66C1E803            <2> 		shr ax, 3
  9554 000076DF 66C1EB04            <2> 		shr bx, 4
  9555 000076E3 66A3[A4760000]      <2> 		mov [termcol], ax
  9556 000076E9 A2[87250000]        <2> 		mov [charxy], al
  9557 000076EE 881D[88250000]      <2> 		mov [charxy + 1], bl
  9558 000076F4 8B7E04              <2> 		mov edi, [esi + 4]
  9559 000076F7 893D[90760000]      <2> 		mov [windowcolor], edi
  9560 000076FD 8B7E0C              <2> 		mov edi, [esi + 12]
  9561 00007700 893D[9C760000]      <2> 		mov [windowvideobuf2], edi
  9562 00007706 8B7E08              <2> 		mov edi, [esi + 8]
  9563 00007709 893D[98760000]      <2> 		mov [windowvideobuf], edi
  9564 0000770F 81FB00000000        <2> 		cmp ebx, 0
  9565 00007715 0F84C1040000        <2> 		je near donewincopynow
  9566                              <2> 	findendposwin:
  9567 0000771B C1E002              <2> 		shl eax, 2
  9568 0000771E 31D2                <2> 		xor edx, edx
  9569 00007720 F7E3                <2> 		mul ebx
  9570 00007722 01C7                <2> 		add edi, eax
  9571 00007724 893D[A6760000]      <2> 		mov [wincopyendpos], edi
  9572 0000772A 31FF                <2> 		xor edi, edi
  9573 0000772C 6631C0              <2> 		xor ax, ax
  9574 0000772F 6631DB              <2> 		xor bx, bx
  9575 00007732 6601D2              <2> 		add dx, dx
  9576 00007735 668915[8C760000]    <2> 		mov [winvcopydx], dx
  9577 0000773C 66890D[8E760000]    <2> 		mov [winvcopycx], cx
  9578 00007743 668B0D[8A760000]    <2> 		mov cx, [winvcopysty]
  9579 0000774A 6681E91000          <2> 		sub cx, 16
  9580 0000774F 668B15[88760000]    <2> 		mov dx, [winvcopystx]
  9581 00007756 C605[93230000]00    <2> 		mov byte [termcopyon], 0
  9582 0000775D B403                <2> 		mov ah, 3
  9583 0000775F E81C0A0000          <2> 		call graphicsadd
  9584                              <2> 	showwindow2:
  9585 00007764 6681C11000          <2> 		add cx, 16
  9586 00007769 668915[88760000]    <2> 		mov [winvcopystx], dx
  9587 00007770 66890D[8A760000]    <2> 		mov [winvcopysty], cx
  9588 00007777 668B16              <2> 		mov dx, [esi]
  9589 0000777A 668B4E02            <2> 		mov cx, [esi + 2]
  9590 0000777E 6601D2              <2> 		add dx, dx
  9591 00007781 668915[8C760000]    <2> 		mov [winvcopydx], dx
  9592 00007788 66890D[8E760000]    <2> 		mov [winvcopycx], cx
  9593 0000778F E818000000          <2> 		call reloadwindowtitle
  9594 00007794 803D[67810000]01    <2> 		cmp byte [windrag], 1
  9595 0000779B 0F834A040000        <2> 		jae near forgetresetstuff
  9596 000077A1 8B3D[94760000]      <2> 		mov edi, [windowbufloc]
  9597 000077A7 E96E020000          <2> 		jmp windowvideocopyset
  9598                              <2> 		
  9599                              <2> 	reloadwindowtitle:
  9600 000077AC 8B3D[94760000]      <2> 		mov edi, [windowbufloc]
  9601 000077B2 31D2                <2> 		xor edx, edx
  9602 000077B4 668B15[F5570000]    <2> 		mov dx, [resolutionx2]
  9603 000077BB C1E204              <2> 		shl edx, 4
  9604 000077BE 29D7                <2> 		sub edi, edx
  9605 000077C0 803D[93230000]00    <2> 		cmp byte [termcopyon], 0
  9606 000077C7 7532                <2> 		jne nocleartitlebarpos
  9607 000077C9 8B3D[1D570000]      <2> 		mov edi, [physbaseptr]
  9608 000077CF 31D2                <2> 		xor edx, edx
  9609 000077D1 668B15[88760000]    <2> 		mov dx, [winvcopystx]
  9610 000077D8 01D7                <2> 		add edi, edx
  9611 000077DA 31C9                <2> 		xor ecx, ecx
  9612 000077DC 668B0D[8A760000]    <2> 		mov cx, [winvcopysty]
  9613 000077E3 6681E91000          <2> 		sub cx, 16
  9614 000077E8 6681F90000          <2> 		cmp cx, 0
  9615 000077ED 740C                <2> 		je nocleartitlebarpos
  9616                              <2> 	cleartitlebarpos:
  9617 000077EF 31C0                <2> 		xor eax, eax
  9618 000077F1 66A1[F5570000]      <2> 		mov ax, [resolutionx2]
  9619 000077F7 F7E1                <2> 		mul ecx
  9620 000077F9 01C7                <2> 		add edi, eax
  9621                              <2> 	nocleartitlebarpos:
  9622 000077FB 66B91000            <2> 		mov cx, 16
  9623 000077FF 668B15[8C760000]    <2> 		mov dx, [winvcopydx]
  9624 00007806 6681F90000          <2> 		cmp cx, 0
  9625 0000780B 0F8448000000        <2> 		je near canceltitlebarput
  9626 00007811 6681FA0000          <2> 		cmp dx, 0
  9627 00007816 0F843D000000        <2> 		je near canceltitlebarput
  9628                              <2> 	titlebarput:
  9629 0000781C 66A1[90760000]      <2> 		mov ax, [windowcolor]
  9630 00007822 668907              <2> 		mov [edi], ax
  9631 00007825 6681EA0200          <2> 		sub dx, 2
  9632 0000782A 81C702000000        <2> 		add edi, 2
  9633 00007830 6681FA0000          <2> 		cmp dx, 0
  9634 00007835 75E5                <2> 		jne titlebarput
  9635 00007837 31D2                <2> 		xor edx, edx
  9636 00007839 668B15[F5570000]    <2> 		mov dx, [resolutionx2]
  9637 00007840 6649                <2> 		dec cx
  9638 00007842 662B15[8C760000]    <2> 		sub dx, [winvcopydx]
  9639 00007849 01D7                <2> 		add edi, edx
  9640 0000784B 668B15[8C760000]    <2> 		mov dx, [winvcopydx]
  9641 00007852 6681F90000          <2> 		cmp cx, 0
  9642 00007857 75C3                <2> 		jne titlebarput
  9643                              <2> 	canceltitlebarput:
  9644 00007859 893D[94760000]      <2> 		mov [windowbufloc], edi
  9645 0000785F 803D[93230000]02    <2> 		cmp byte [termcopyon], 2
  9646 00007866 0F841C010000        <2> 		je near winvcpst
  9647 0000786C 668B1D[DB6D0000]    <2> 		mov bx, [background]
  9648 00007873 6653                <2> 		push bx
  9649 00007875 6631DB              <2> 		xor bx, bx
  9650 00007878 66891D[DB6D0000]    <2> 		mov [background], bx
  9651 0000787F 6631C0              <2> 		xor ax, ax
  9652 00007882 81C610000000        <2> 		add esi, 16
  9653 00007888 668B15[88760000]    <2> 		mov dx, [winvcopystx]
  9654 0000788F 668B0D[8A760000]    <2> 		mov cx, [winvcopysty]
  9655 00007896 6681E91000          <2> 		sub cx, 16
  9656 0000789B 668B1D[90760000]    <2> 		mov bx, [windowcolor]
  9657 000078A2 C605[FF7B0000]01    <2> 		mov byte [mouseselecton], 1
  9658 000078A9 E882FBFFFF          <2> 		call showstring2	;Show window title
  9659 000078AE 8B35[7A2C0000]      <2> 		mov esi, [usercache]
  9660 000078B4 6681C21000          <2> 		add dx, 16
  9661 000078B9 C605[FF7B0000]01    <2> 		mov byte [mouseselecton], 1
  9662 000078C0 E86BFBFFFF          <2> 		call showstring2	;Show user name
  9663 000078C5 BE[67890000]        <2> 		mov esi, computer
  9664 000078CA C605[FF7B0000]01    <2> 		mov byte [mouseselecton], 1
  9665 000078D1 E85AFBFFFF          <2> 		call showstring2	;Show computer name
  9666 000078D6 66B85800            <2> 		mov ax, "X"
  9667 000078DA 66BB00F8            <2> 		mov bx, 1111100000000000b
  9668 000078DE 668B15[88760000]    <2> 		mov dx, [winvcopystx]
  9669 000078E5 668B0D[8A760000]    <2> 		mov cx, [winvcopysty]
  9670 000078EC 6681E91000          <2> 		sub cx, 16
  9671 000078F1 6681EA1000          <2> 		sub dx, 16
  9672 000078F6 660315[8C760000]    <2> 		add dx, [winvcopydx]
  9673 000078FD C605[FF7B0000]01    <2> 		mov byte [mouseselecton], 1
  9674 00007904 663B15[F5570000]    <2> 		cmp dx, [resolutionx2]
  9675 0000790B 7305                <2> 		jae .nox
  9676 0000790D E897FBFFFF          <2> 		call showfontvesa
  9677                              <2> .nox:
  9678 00007912 668B1D[DB6D0000]    <2> 		mov bx, [background]
  9679 00007919 6681EA1800          <2> 		sub dx, 24
  9680 0000791E 66B82B00            <2> 		mov ax, "+"
  9681 00007922 66BBE007            <2> 		mov bx, 0000011111100000b
  9682 00007926 C605[FF7B0000]01    <2> 		mov byte [mouseselecton], 1
  9683 0000792D 663B15[F5570000]    <2> 		cmp dx, [resolutionx2]
  9684 00007934 7305                <2> 		jae .noplus
  9685 00007936 E86EFBFFFF          <2> 		call showfontvesa
  9686                              <2> .noplus:
  9687 0000793B 6681EA1800          <2> 		sub dx, 24
  9688 00007940 66B82D00            <2> 		mov ax, "-"
  9689 00007944 66BBE0FF            <2> 		mov bx, 1111111111100000b
  9690 00007948 C605[FF7B0000]01    <2> 		mov byte [mouseselecton], 1
  9691 0000794F 663B15[F5570000]    <2> 		cmp dx, [resolutionx2]
  9692 00007956 7305                <2> 		jae .nominus
  9693 00007958 E84CFBFFFF          <2> 		call showfontvesa
  9694                              <2> .nominus:
  9695 0000795D 6681EA1800          <2> 		sub dx, 24
  9696 00007962 66B83F00            <2> 		mov ax, "?"
  9697 00007966 66BB1F00            <2> 		mov bx, 0000000000011111b
  9698 0000796A C605[FF7B0000]01    <2> 		mov byte [mouseselecton], 1
  9699 00007971 663B15[F5570000]    <2> 		cmp dx, [resolutionx2]
  9700 00007978 7305                <2> 		jae .noquestion
  9701 0000797A E82AFBFFFF          <2> 		call showfontvesa
  9702                              <2> .noquestion:
  9703 0000797F 665B                <2> 		pop bx
  9704 00007981 66891D[DB6D0000]    <2> 		mov [background], bx
  9705                              <2> 	winvcpst:
  9706 00007988 C3                  <2> 		ret
  9707                              <2> 
  9708                              <2> 	windowvideocopy:
  9709 00007989 8B35[A0760000]      <2> 		mov esi, [windowinfobuf]
  9710 0000798F 668B16              <2> 		mov dx, [esi]
  9711 00007992 668B4E02            <2> 		mov cx, [esi + 2]
  9712 00007996 8B7E04              <2> 		mov edi, [esi + 4]
  9713 00007999 893D[90760000]      <2> 		mov [windowcolor], edi
  9714 0000799F 8B7E08              <2> 		mov edi, [esi + 8]
  9715 000079A2 8B5E0C              <2> 		mov ebx, [esi + 12]
  9716 000079A5 893D[98760000]      <2> 		mov [windowvideobuf], edi
  9717 000079AB 891D[9C760000]      <2> 		mov [windowvideobuf2], ebx
  9718 000079B1 31C0                <2> 		xor eax, eax
  9719 000079B3 31DB                <2> 		xor ebx, ebx
  9720 000079B5 6689D0              <2> 		mov ax, dx
  9721 000079B8 6689CB              <2> 		mov bx, cx
  9722 000079BB 66C1E803            <2> 		shr ax, 3
  9723 000079BF 66C1EB04            <2> 		shr bx, 4
  9724 000079C3 66A3[A4760000]      <2> 		mov [termcol], ax
  9725 000079C9 A2[87250000]        <2> 		mov [charxy], al
  9726 000079CE 881D[88250000]      <2> 		mov [charxy + 1], bl
  9727 000079D4 8B3D[94760000]      <2> 		mov edi, [windowbufloc]
  9728 000079DA 3B3D[1D570000]      <2> 		cmp edi, [physbaseptr]
  9729 000079E0 0F8334000000        <2> 		jae near windowvideocopyset
  9730 000079E6 31C9                <2> 		xor ecx, ecx
  9731 000079E8 31D2                <2> 		xor edx, edx
  9732 000079EA 668B15[88760000]    <2> 		mov dx, [winvcopystx]
  9733 000079F1 668B0D[8A760000]    <2> 		mov cx, [winvcopysty]
  9734 000079F8 8B3D[1D570000]      <2> 		mov edi, [physbaseptr]
  9735 000079FE 01D7                <2> 		add edi, edx
  9736 00007A00 81F900000000        <2> 		cmp ecx, 0
  9737 00007A06 7412                <2> 		je windowvideocopyset
  9738                              <2> 	yrescopylp:
  9739 00007A08 31C0                <2> 		xor eax, eax
  9740 00007A0A 66A1[F5570000]      <2> 		mov ax, [resolutionx2]
  9741 00007A10 F7E1                <2> 		mul ecx
  9742 00007A12 01C7                <2> 		add edi, eax
  9743 00007A14 893D[94760000]      <2> 		mov [windowbufloc], edi
  9744                              <2> 	windowvideocopyset:
  9745 00007A1A 6631C9              <2> 		xor cx, cx
  9746 00007A1D 6649                <2> 		dec cx
  9747 00007A1F 66890D[F37B0000]    <2> 		mov [charposline], cx
  9748 00007A26 89FE                <2> 		mov esi, edi
  9749 00007A28 81EE10000000        <2> 		sub esi, 16
  9750 00007A2E 31D2                <2> 		xor edx, edx
  9751 00007A30 668B15[F5570000]    <2> 		mov dx, [resolutionx2]
  9752 00007A37 C1E204              <2> 		shl edx, 4
  9753 00007A3A 01D6                <2> 		add esi, edx
  9754 00007A3C 8B3D[98760000]      <2> 		mov edi, [windowvideobuf]
  9755 00007A42 81EF04000000        <2> 		sub edi, 4
  9756 00007A48 893D[F57B0000]      <2> 		mov [charposvbuf], edi
  9757 00007A4E E97C000000          <2> 		jmp nextcharwin
  9758                              <2> 	win.write:	;adjusted this to use alpha
  9759                              <2> 				;5R, 6G, 5B
  9760                              <2> %ifdef gui.alphablending
  9761                              <2> 		push esi
  9762                              <2> 		push bx
  9763                              <2> 		push cx
  9764                              <2> 		push dx
  9765                              <2> %ifdef gui.background
  9766                              <2> 		mov esi, edi
  9767                              <2> 		sub esi, [physbaseptr]
  9768                              <2> 		add esi, [backgroundimage]
  9769                              <2> 		cmp dword [backgroundimage], 0
  9770                              <2> 		jne .red
  9771                              <2> %endif
  9772                              <2> 		mov esi, background
  9773                              <2> 	.red:
  9774                              <2> 		mov cx, [esi]
  9775                              <2> 		shr cx, 11
  9776                              <2> 		mov bx, ax
  9777                              <2> 		shr bx, 11
  9778                              <2> 		add cx, bx
  9779                              <2> 		add cx, bx
  9780                              <2> 		add cx, bx
  9781                              <2> 		shr cx, 2
  9782                              <2> 		shl cx, 11
  9783                              <2> 		mov dx, cx
  9784                              <2> 	.green:
  9785                              <2> 		mov cx, [esi]
  9786                              <2> 		shl cx, 5
  9787                              <2> 		shr cx, 10
  9788                              <2> 		mov bx, ax
  9789                              <2> 		shl bx, 5
  9790                              <2> 		shr bx, 10
  9791                              <2> 		add cx, bx
  9792                              <2> 		add cx, bx
  9793                              <2> 		add cx, bx
  9794                              <2> 		shr cx, 2
  9795                              <2> 		shl cx, 5
  9796                              <2> 		add dx, cx
  9797                              <2> 	.blue:
  9798                              <2> 		mov cx, [esi]
  9799                              <2> 		shl cx, 11
  9800                              <2> 		shr cx, 11
  9801                              <2> 		mov bx, ax
  9802                              <2> 		shl bx, 11
  9803                              <2> 		shr bx, 11
  9804                              <2> 		add cx, bx
  9805                              <2> 		add cx, bx
  9806                              <2> 		add cx, bx
  9807                              <2> 		shr cx, 2
  9808                              <2> 		add dx, cx
  9809                              <2> 		mov [edi], dx
  9810                              <2> 		pop dx
  9811                              <2> 		pop cx
  9812                              <2> 		pop bx
  9813                              <2> 		pop esi
  9814                              <2> %else
  9815 00007A53 668907              <2> 		mov [edi], ax
  9816                              <2> %endif
  9817 00007A56 C3                  <2> 		ret
  9818                              <2> 	copywindow:
  9819 00007A57 B201                <2> 		mov dl, 1
  9820 00007A59 D0C6                <2> 		rol dh, 1
  9821 00007A5B 20F2                <2> 		and dl, dh
  9822 00007A5D 66813D[9A740000]80- <2> 		cmp word [colorcache], 0x80
  9823 00007A65 00                  <2>
  9824 00007A66 7320                <2> 		jae switchwincolors
  9825 00007A68 66A1[92760000]      <2> 		mov ax, [windowcolor + 2]
  9826 00007A6E E8E0FFFFFF          <2> 		call win.write
  9827 00007A73 80FA00              <2> 		cmp dl, 0
  9828 00007A76 742B                <2> 		je nowritewin
  9829 00007A78 66A1[90760000]      <2> 		mov ax, [windowcolor]
  9830 00007A7E E8D0FFFFFF          <2> 		call win.write
  9831 00007A83 E91B000000          <2> 		jmp nowritewin
  9832                              <2> 	switchwincolors:
  9833 00007A88 66A1[90760000]      <2> 		mov ax, [windowcolor]
  9834 00007A8E E8C0FFFFFF          <2> 		call win.write
  9835 00007A93 80FA00              <2> 		cmp dl, 0
  9836 00007A96 740B                <2> 		je nowritewin
  9837 00007A98 66A1[92760000]      <2> 		mov ax, [windowcolor + 2]
  9838 00007A9E E8B0FFFFFF          <2> 		call win.write
  9839                              <2> 	nowritewin:
  9840 00007AA3 81C702000000        <2> 		add edi, 2
  9841 00007AA9 FEC1                <2> 		inc cl
  9842 00007AAB 80F908              <2> 		cmp cl, 8
  9843 00007AAE 75A7                <2> 		jne copywindow
  9844 00007AB0 43                  <2> 		inc ebx
  9845 00007AB1 30C9                <2> 		xor cl, cl
  9846 00007AB3 31D2                <2> 		xor edx, edx
  9847 00007AB5 668B15[F5570000]    <2> 		mov dx, [resolutionx2]
  9848 00007ABC 01D6                <2> 		add esi, edx
  9849 00007ABE 89F7                <2> 		mov edi, esi
  9850 00007AC0 8AB3[9C890000]      <2> 		mov dh, [fonts + ebx]
  9851 00007AC6 D0CE                <2> 		ror dh, 1
  9852 00007AC8 FEC5                <2> 		inc ch
  9853 00007ACA 80FD10              <2> 		cmp ch, 16
  9854 00007ACD 7588                <2> 		jne copywindow
  9855                              <2> 	nextcharwin:
  9856 00007ACF 6631C9              <2> 		xor cx, cx
  9857 00007AD2 8B3D[F57B0000]      <2> 		mov edi, [charposvbuf]
  9858 00007AD8 81C704000000        <2> 		add edi, 4
  9859 00007ADE 3B3D[A6760000]      <2> 		cmp edi, [wincopyendpos]
  9860 00007AE4 0F83F2000000        <2> 		jae near donewincopynow
  9861 00007AEA 668B5F02            <2> 		mov bx, [edi + 2]
  9862 00007AEE 6681FB0000          <2> 		cmp bx, 0
  9863 00007AF3 7508                <2> 		jne nofixcolorwin
  9864 00007AF5 66BB0700            <2> 		mov bx, 7
  9865 00007AF9 66895F02            <2> 		mov [edi + 2], bx
  9866                              <2> 	nofixcolorwin:
  9867 00007AFD 66891D[9A740000]    <2> 		mov [colorcache], bx
  9868 00007B04 8B1F                <2> 		mov ebx, [edi]
  9869 00007B06 893D[F57B0000]      <2> 		mov [charposvbuf], edi
  9870 00007B0C 813D[9C760000]0000- <2> 		cmp dword [windowvideobuf2], 0
  9871 00007B14 0000                <2>
  9872 00007B16 7455                <2> 		je noskipcharcopy
  9873 00007B18 2B3D[98760000]      <2> 		sub edi, [windowvideobuf]
  9874 00007B1E 033D[9C760000]      <2> 		add edi, [windowvideobuf2]
  9875 00007B24 8B07                <2> 		mov eax, [edi]
  9876 00007B26 39D8                <2> 		cmp eax, ebx
  9877 00007B28 7543                <2> 		jne noskipcharcopy
  9878                              <2> 	skipcharcopy:
  9879 00007B2A 81C610000000        <2> 		add esi, 16
  9880 00007B30 668B0D[F37B0000]    <2> 		mov cx, [charposline]
  9881 00007B37 6641                <2> 		inc cx
  9882 00007B39 66890D[F37B0000]    <2> 		mov [charposline], cx
  9883 00007B40 663B0D[A4760000]    <2> 		cmp cx, [termcol]
  9884 00007B47 7286                <2> 		jb nextcharwin
  9885 00007B49 6631C9              <2> 		xor cx, cx
  9886 00007B4C 66890D[F37B0000]    <2> 		mov [charposline], cx
  9887 00007B53 31D2                <2> 		xor edx, edx
  9888 00007B55 668B15[F5570000]    <2> 		mov dx, [resolutionx2]
  9889 00007B5C C1E204              <2> 		shl edx, 4
  9890 00007B5F 662B15[8C760000]    <2> 		sub dx, [winvcopydx]
  9891 00007B66 01D6                <2> 		add esi, edx
  9892 00007B68 E962FFFFFF          <2> 		jmp nextcharwin
  9893                              <2> 	noskipcharcopy:
  9894 00007B6D 891F                <2> 		mov [edi], ebx
  9895 00007B6F 8B3D[F57B0000]      <2> 		mov edi, [charposvbuf]
  9896 00007B75 C1E310              <2> 		shl ebx, 16
  9897 00007B78 C1EB0C              <2> 		shr ebx, 12
  9898 00007B7B 31D2                <2> 		xor edx, edx
  9899 00007B7D 668B15[F5570000]    <2> 		mov dx, [resolutionx2]
  9900 00007B84 C1E204              <2> 		shl edx, 4
  9901 00007B87 29D6                <2> 		sub esi, edx
  9902 00007B89 81C610000000        <2> 		add esi, 16
  9903 00007B8F 89F7                <2> 		mov edi, esi
  9904 00007B91 668B0D[F37B0000]    <2> 		mov cx, [charposline]
  9905 00007B98 6641                <2> 		inc cx
  9906 00007B9A 663B0D[A4760000]    <2> 		cmp cx, [termcol]
  9907 00007BA1 7317                <2> 		jae fixwindowcopy
  9908 00007BA3 66890D[F37B0000]    <2> 		mov [charposline], cx
  9909 00007BAA 6631C9              <2> 		xor cx, cx
  9910 00007BAD 8AB3[9C890000]      <2> 		mov dh, [fonts + ebx]
  9911 00007BB3 D0CE                <2> 		ror dh, 1
  9912 00007BB5 E99DFEFFFF          <2> 		jmp copywindow
  9913                              <2> fixwindowcopy:
  9914 00007BBA 6631C9              <2> 		xor cx, cx
  9915 00007BBD 66890D[F37B0000]    <2> 		mov [charposline], cx
  9916 00007BC4 662B15[8C760000]    <2> 		sub dx, [winvcopydx]
  9917 00007BCB 01D6                <2> 		add esi, edx
  9918 00007BCD 89F7                <2> 		mov edi, esi
  9919 00007BCF 8AB3[9C890000]      <2> 		mov dh, [fonts + ebx]
  9920 00007BD5 D0CE                <2> 		ror dh, 1
  9921 00007BD7 E97BFEFFFF          <2> 		jmp copywindow
  9922                              <2> donewincopynow:
  9923 00007BDC 803D[93230000]01    <2> 		cmp byte [termcopyon], 1
  9924 00007BE3 7506                <2> 		jne forgetresetstuff
  9925 00007BE5 E885ADFFFF          <2> 		call switchtermcursor
  9926 00007BEA 61                  <2> 		popa
  9927                              <2> forgetresetstuff:
  9928 00007BEB C605[93230000]00    <2> 		mov byte [termcopyon], 0
  9929 00007BF2 C3                  <2> 		ret
  9930                              <2> 		
  9931 00007BF3 0000                <2> charposline dw 0
  9932 00007BF5 00000000            <2> charposvbuf dw 0,0
  9933                              <1> 				
  9934 00007BF9 00                  <1> copygui db 0
  9935 00007BFA 00                  <1> graphicsset db 0
  9936 00007BFB 0000                <1> graphicspos db 0,0
  9937 00007BFD 00                  <1> showcursorfonton db 0
  9938 00007BFE 00                  <1> savefonton db 0
  9939 00007BFF 00                  <1> mouseselecton db 0
  9940                              <1> 
  9941 00007C00 00                  <1> pbutton db 0
  9942 00007C01 00                  <1> pLBUTTON db 0
  9943 00007C02 00                  <1> pRBUTTON db 0
  9944 00007C03 00000000            <1> dragging dw 0,0
  9945 00007C07 0000000000000000    <1> lastpos dw 0,0,0,0
  9946 00007C0F 00000000            <1> colorbuf dw 0,0
  9947                              <1> 	
  9948                              <1> 	clickicon:
  9949 00007C13 B001                <1> 		mov al, 1
  9950 00007C15 A2[007C0000]        <1> 		mov [pbutton], al
  9951 00007C1A A0[017C0000]        <1> 		mov al, [pLBUTTON]
  9952 00007C1F 2205[FC5A0000]      <1> 		and al, [LBUTTON]
  9953 00007C25 8A25[027C0000]      <1> 		mov ah, [pRBUTTON]
  9954 00007C2B 2225[FD5A0000]      <1> 		and ah, [RBUTTON]
  9955 00007C31 08E0                <1> 		or al, ah
  9956 00007C33 3C00                <1> 		cmp al, 0
  9957 00007C35 741B                <1> 		je nodragclick
  9958 00007C37 813D[037C0000]0100- <1> 		cmp dword [dragging], 1
  9959 00007C3F 0000                <1>
  9960 00007C41 732F                <1> 		jae dragclick
  9961 00007C43 C705[037C0000]0100- <1> 		mov dword [dragging], 1
  9962 00007C4B 0000                <1>
  9963 00007C4D E920000000          <1> 		jmp dragclick
  9964                              <1> 	nodragclick:
  9965 00007C52 31C0                <1> 		xor eax, eax
  9966 00007C54 A3[037C0000]        <1> 		mov dword [dragging], eax
  9967 00007C59 A2[007C0000]        <1> 		mov [pbutton], al
  9968 00007C5E A0[FC5A0000]        <1> 		mov al, [LBUTTON]
  9969 00007C63 A2[017C0000]        <1> 		mov [pLBUTTON], al
  9970 00007C68 A0[FD5A0000]        <1> 		mov al, [RBUTTON]
  9971 00007C6D A2[027C0000]        <1> 		mov [pRBUTTON], al
  9972                              <1> 	dragclick:
  9973 00007C72 6631C0              <1> 		xor ax, ax
  9974 00007C75 BE[7B0C0100]        <1> 		mov esi, graphicstable
  9975 00007C7A C705[53840000]0000- <1> 		mov dword [codepointer], 0
  9976 00007C82 0000                <1>
  9977                              <1> 	clicon2:
  9978 00007C84 31D2                <1> 		xor edx, edx
  9979 00007C86 31C9                <1> 		xor ecx, ecx
  9980 00007C88 66813E0100          <1> 		cmp word [esi], 1
  9981 00007C8D 0F841B000000        <1> 		je near iconselect
  9982 00007C93 66813E0200          <1> 		cmp word [esi], 2
  9983 00007C98 0F8472010000        <1> 		je near textselected
  9984 00007C9E 66813E0300          <1> 		cmp word [esi], 3
  9985 00007CA3 0F84C7020000        <1> 		je near windowselect
  9986 00007CA9 E910040000          <1> 		jmp nexticonsel
  9987                              <1> 	iconselect:
  9988 00007CAE 668B5606            <1> 		mov dx, [esi + 6]
  9989 00007CB2 6689D0              <1> 		mov ax, dx
  9990 00007CB5 668B4E08            <1> 		mov cx, [esi + 8]
  9991 00007CB9 6689CB              <1> 		mov bx, cx
  9992 00007CBC 6681C32000          <1> 		add bx, 32
  9993 00007CC1 6601D0              <1> 		add ax, dx
  9994 00007CC4 813D[037C0000]0100- <1> 		cmp dword [dragging], 1
  9995 00007CCC 0000                <1>
  9996 00007CCE 746F                <1> 		je dragicon
  9997 00007CD0 813D[037C0000]0000- <1> 		cmp dword [dragging], 0
  9998 00007CD8 0000                <1>
  9999 00007CDA 7411                <1> 		je nodragiconcheck
 10000 00007CDC 3935[037C0000]      <1> 		cmp dword [dragging], esi
 10001 00007CE2 0F85D6030000        <1> 		jne near nexticonsel
 10002 00007CE8 E952000000          <1> 		jmp dragicon
 10003                              <1> 	nodragiconcheck:
 10004 00007CED 663905[EB590000]    <1> 		cmp [mousecursorposition], ax
 10005 00007CF4 0F82C4030000        <1> 		jb near nexticonsel
 10006 00007CFA 66054000            <1> 		add ax, 64
 10007 00007CFE 663905[EB590000]    <1> 		cmp [mousecursorposition], ax
 10008 00007D05 0F87B3030000        <1> 		ja near nexticonsel
 10009 00007D0B 6629D0              <1> 		sub ax, dx
 10010 00007D0E 66390D[ED590000]    <1> 		cmp [mousecursorposition + 2], cx
 10011 00007D15 0F82A3030000        <1> 		jb near nexticonsel
 10012 00007D1B 66391D[ED590000]    <1> 		cmp [mousecursorposition + 2], bx
 10013 00007D22 0F8796030000        <1> 		ja near nexticonsel
 10014 00007D28 668B460A            <1> 		mov ax, [esi + 10]
 10015 00007D2C 66250100            <1> 		and ax, 1
 10016 00007D30 663D0100            <1> 		cmp ax, 1
 10017 00007D34 0F84B6000000        <1> 		je near unselecticon
 10018 00007D3A E98D000000          <1> 		jmp nodragicon
 10019                              <1> 	dragicon:
 10020 00007D3F 663905[E7590000]    <1> 		cmp [lastmouseposition], ax
 10021 00007D46 0F8272030000        <1> 		jb near nexticonsel
 10022 00007D4C 66054000            <1> 		add ax, 64
 10023 00007D50 663905[E7590000]    <1> 		cmp [lastmouseposition], ax
 10024 00007D57 0F8761030000        <1> 		ja near nexticonsel
 10025 00007D5D 6629D0              <1> 		sub ax, dx
 10026 00007D60 66390D[E9590000]    <1> 		cmp [lastmouseposition + 2], cx
 10027 00007D67 0F8251030000        <1> 		jb near nexticonsel
 10028 00007D6D 66391D[E9590000]    <1> 		cmp [lastmouseposition + 2], bx
 10029 00007D74 0F8744030000        <1> 		ja near nexticonsel
 10030 00007D7A 668B460A            <1> 		mov ax, [esi + 10]
 10031 00007D7E 2410                <1> 		and al, 00010000b
 10032 00007D80 3C10                <1> 		cmp al, 00010000b
 10033 00007D82 7448                <1> 		je nodragicon
 10034 00007D84 8935[037C0000]      <1> 		mov [dragging], esi
 10035 00007D8A 66D1E2              <1> 		shl dx, 1
 10036 00007D8D 662B15[E7590000]    <1> 		sub dx, [lastmouseposition]
 10037 00007D94 660315[EB590000]    <1> 		add dx, [mousecursorposition]
 10038 00007D9B 66D1EA              <1> 		shr dx, 1
 10039 00007D9E 66030D[ED590000]    <1> 		add cx, [mousecursorposition + 2]
 10040 00007DA5 662B0D[E9590000]    <1> 		sub cx, [lastmouseposition + 2]
 10041 00007DAC 663B15[F5570000]    <1> 		cmp dx, [resolutionx2]
 10042 00007DB3 7607                <1> 		jbe chkyresdrgicn
 10043 00007DB5 668B15[EB590000]    <1> 		mov dx, [mousecursorposition]
 10044                              <1> 	chkyresdrgicn:
 10045 00007DBC 663B0D[09570000]    <1> 		cmp cx, [resolutiony]
 10046 00007DC3 7607                <1> 		jbe nodragicon
 10047 00007DC5 668B0D[ED590000]    <1> 		mov cx, [mousecursorposition + 2]
 10048                              <1> 	nodragicon:
 10049 00007DCC 66814E0A0100        <1> 		or word [esi + 10], 1
 10050 00007DD2 8B5E0C              <1> 		mov ebx, [esi + 12]
 10051 00007DD5 668B460A            <1> 		mov ax, [esi + 10]
 10052 00007DD9 8B7602              <1> 		mov esi, [esi + 2]
 10053 00007DDC C705[53840000]0000- <1> 		mov dword [codepointer], 0
 10054 00007DE4 0000                <1>
 10055 00007DE6 E8A3EDFFFF          <1> 		call showicon
 10056 00007DEB E9E7020000          <1> 		jmp doneiconsel
 10057                              <1> 	unselecticon:
 10058 00007DF0 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10059 00007DF6 8B5E0C              <1> 		mov ebx, [esi + 12]
 10060 00007DF9 668B460A            <1> 		mov ax, [esi + 10]
 10061 00007DFD 8B7602              <1> 		mov esi, [esi + 2]
 10062 00007E00 891D[53840000]      <1> 		mov [codepointer], ebx
 10063 00007E06 E883EDFFFF          <1> 		call showicon
 10064 00007E0B E9C7020000          <1> 		jmp doneiconsel
 10065                              <1> 	textselected:
 10066 00007E10 8B5E02              <1> 		mov ebx, [esi + 2]
 10067 00007E13 668B5606            <1> 		mov dx, [esi + 6]
 10068 00007E17 6689D0              <1> 		mov ax, dx
 10069 00007E1A 668B4E08            <1> 		mov cx, [esi + 8]
 10070                              <1> 	lengthtesttext:
 10071 00007E1E 803B00              <1> 		cmp byte [ebx], 0
 10072 00007E21 7407                <1> 		je donetesttextlength
 10073 00007E23 43                  <1> 		inc ebx
 10074 00007E24 66051000            <1> 		add ax, 16
 10075 00007E28 EBF4                <1> 		jmp lengthtesttext
 10076                              <1> 	donetesttextlength:
 10077 00007E2A 6689CB              <1> 		mov bx, cx
 10078 00007E2D 6681C30F00          <1> 		add bx, 15
 10079 00007E32 813D[037C0000]0100- <1> 		cmp dword [dragging], 1
 10080 00007E3A 0000                <1>
 10081 00007E3C 7468                <1> 		je dragtext
 10082 00007E3E 813D[037C0000]0000- <1> 		cmp dword [dragging], 0
 10083 00007E46 0000                <1>
 10084 00007E48 7411                <1> 		je nodragtextcheck
 10085 00007E4A 3935[037C0000]      <1> 		cmp dword [dragging], esi
 10086 00007E50 0F8568020000        <1> 		jne near nexticonsel
 10087 00007E56 E94B000000          <1> 		jmp dragtext
 10088                              <1> 	nodragtextcheck:
 10089 00007E5B 663915[EB590000]    <1> 		cmp [mousecursorposition], dx
 10090 00007E62 0F8256020000        <1> 		jb near nexticonsel
 10091 00007E68 663905[EB590000]    <1> 		cmp [mousecursorposition], ax
 10092 00007E6F 0F8749020000        <1> 		ja near nexticonsel
 10093 00007E75 66390D[ED590000]    <1> 		cmp [mousecursorposition + 2], cx
 10094 00007E7C 0F823C020000        <1> 		jb near nexticonsel
 10095 00007E82 66391D[ED590000]    <1> 		cmp [mousecursorposition + 2], bx
 10096 00007E89 0F872F020000        <1> 		ja near nexticonsel
 10097 00007E8F 668B460A            <1> 		mov ax, [esi + 10]
 10098 00007E93 66250100            <1> 		and ax, 1
 10099 00007E97 663D0100            <1> 		cmp ax, 1
 10100 00007E9B 0F84AB000000        <1> 		je near unselecttext
 10101 00007EA1 E986000000          <1> 		jmp nodragtext
 10102                              <1> 	dragtext:
 10103 00007EA6 663915[E7590000]    <1> 		cmp [lastmouseposition], dx
 10104 00007EAD 0F820B020000        <1> 		jb near nexticonsel
 10105 00007EB3 663905[E7590000]    <1> 		cmp [lastmouseposition], ax
 10106 00007EBA 0F87FE010000        <1> 		ja near nexticonsel
 10107 00007EC0 66390D[E9590000]    <1> 		cmp [lastmouseposition + 2], cx
 10108 00007EC7 0F82F1010000        <1> 		jb near nexticonsel
 10109 00007ECD 66391D[E9590000]    <1> 		cmp [lastmouseposition + 2], bx
 10110 00007ED4 0F87E4010000        <1> 		ja near nexticonsel
 10111 00007EDA 668B460A            <1> 		mov ax, [esi + 10]
 10112 00007EDE 2410                <1> 		and al, 00010000b
 10113 00007EE0 663D1000            <1> 		cmp ax, 00010000b
 10114 00007EE4 0F8442000000        <1> 		je near nodragtext
 10115 00007EEA 8935[037C0000]      <1> 		mov [dragging], esi
 10116 00007EF0 662B15[E7590000]    <1> 		sub dx, [lastmouseposition]
 10117 00007EF7 660315[EB590000]    <1> 		add dx, [mousecursorposition]
 10118 00007EFE 66030D[ED590000]    <1> 		add cx, [mousecursorposition + 2]
 10119 00007F05 662B0D[E9590000]    <1> 		sub cx, [lastmouseposition + 2]
 10120 00007F0C 663B15[F5570000]    <1> 		cmp dx, [resolutionx2]
 10121 00007F13 7607                <1> 		jbe chkyresdrgtxt
 10122 00007F15 668B15[EB590000]    <1> 		mov dx, [mousecursorposition]
 10123                              <1> 	chkyresdrgtxt:
 10124 00007F1C 663B0D[09570000]    <1> 		cmp cx, [resolutiony]
 10125 00007F23 7607                <1> 		jbe nodragtext
 10126 00007F25 668B0D[ED590000]    <1> 		mov cx, [mousecursorposition + 2]
 10127                              <1> 	nodragtext:
 10128 00007F2C 66814E0A0100        <1> 		or word [esi + 10], 1
 10129 00007F32 8B5E0C              <1> 		mov ebx, [esi + 12]
 10130 00007F35 891D[53840000]      <1> 		mov [codepointer], ebx
 10131 00007F3B 668B460A            <1> 		mov ax, [esi + 10]
 10132 00007F3F 8B7602              <1> 		mov esi, [esi + 2]
 10133 00007F42 E8D6F4FFFF          <1> 		call showstring
 10134 00007F47 E98B010000          <1> 		jmp doneiconsel
 10135                              <1> 	unselecttext:
 10136 00007F4C 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10137 00007F52 8B5E0C              <1> 		mov ebx, [esi + 12]
 10138 00007F55 668B460A            <1> 		mov ax, [esi + 10]
 10139 00007F59 8B7602              <1> 		mov esi, [esi + 2]
 10140 00007F5C C705[53840000]0000- <1> 		mov dword [codepointer], 0
 10141 00007F64 0000                <1>
 10142 00007F66 E8B2F4FFFF          <1> 		call showstring
 10143 00007F6B E967010000          <1> 		jmp doneiconsel
 10144                              <1> windowselect:
 10145 00007F70 8B7E02              <1> 		mov edi, [esi + 2]
 10146 00007F73 668B5606            <1> 		mov dx, [esi + 6]
 10147 00007F77 6689D0              <1> 		mov ax, dx
 10148 00007F7A 668B4E08            <1> 		mov cx, [esi + 8]
 10149 00007F7E 6689CB              <1> 		mov bx, cx
 10150 00007F81 6681C31000          <1> 		add bx, 16
 10151 00007F86 813D[037C0000]0100- <1> 		cmp dword [dragging], 1
 10152 00007F8E 0000                <1>
 10153 00007F90 746D                <1> 		je dragwin
 10154 00007F92 813D[037C0000]0000- <1> 		cmp dword [dragging], 0
 10155 00007F9A 0000                <1>
 10156 00007F9C 7411                <1> 		je nodragwincheck
 10157 00007F9E 3935[037C0000]      <1> 		cmp dword [dragging], esi
 10158 00007FA4 0F8514010000        <1> 		jne near nexticonsel
 10159 00007FAA E950000000          <1> 		jmp dragwin
 10160                              <1> 	nodragwincheck:
 10161 00007FAF 663905[EB590000]    <1> 		cmp [mousecursorposition], ax
 10162 00007FB6 0F8202010000        <1> 		jb near nexticonsel
 10163 00007FBC 660307              <1> 		add ax, [edi]
 10164 00007FBF 660307              <1> 		add ax, [edi]
 10165 00007FC2 663905[EB590000]    <1> 		cmp [mousecursorposition], ax
 10166 00007FC9 0F87EF000000        <1> 		ja near nexticonsel
 10167 00007FCF 66390D[ED590000]    <1> 		cmp [mousecursorposition + 2], cx
 10168 00007FD6 0F82E2000000        <1> 		jb near nexticonsel
 10169 00007FDC 66391D[ED590000]    <1> 		cmp [mousecursorposition + 2], bx
 10170 00007FE3 0F87D5000000        <1> 		ja near nexticonsel
 10171 00007FE9 662D1400            <1> 		sub ax, 20
 10172 00007FED 663905[EB590000]    <1> 		cmp [mousecursorposition], ax
 10173 00007FF4 0F87A4000000        <1> 		ja near killwin
 10174 00007FFA E98B000000          <1> 		jmp nodragwin
 10175                              <1> 	dragwin:
 10176 00007FFF 663905[E7590000]    <1> 		cmp [lastmouseposition], ax
 10177 00008006 0F82B2000000        <1> 		jb near nexticonsel
 10178 0000800C 660307              <1> 		add ax, [edi]
 10179 0000800F 660307              <1> 		add ax, [edi]
 10180 00008012 663905[E7590000]    <1> 		cmp [lastmouseposition], ax
 10181 00008019 0F879F000000        <1> 		ja near nexticonsel
 10182 0000801F 66390D[E9590000]    <1> 		cmp [lastmouseposition + 2], cx
 10183 00008026 0F8292000000        <1> 		jb near nexticonsel
 10184 0000802C 66391D[E9590000]    <1> 		cmp [lastmouseposition + 2], bx
 10185 00008033 0F8785000000        <1> 		ja near nexticonsel
 10186 00008039 8935[037C0000]      <1> 		mov [dragging], esi
 10187 0000803F 803D[67810000]01    <1> 		cmp byte [windrag], 1
 10188 00008046 7706                <1> 		ja .nochangewindrag
 10189 00008048 FE05[67810000]      <1> 		inc byte [windrag]
 10190                              <1> 	.nochangewindrag:
 10191 0000804E 662B15[E7590000]    <1> 		sub dx, [lastmouseposition]
 10192 00008055 660315[EB590000]    <1> 		add dx, [mousecursorposition]
 10193 0000805C 66030D[ED590000]    <1> 		add cx, [mousecursorposition + 2]
 10194 00008063 662B0D[E9590000]    <1> 		sub cx, [lastmouseposition + 2]
 10195 0000806A 663B15[F5570000]    <1> 		cmp dx, [resolutionx2]
 10196 00008071 7607                <1> 		jbe chkyresdrgwin
 10197 00008073 668B15[EB590000]    <1> 		mov dx, [mousecursorposition]
 10198                              <1> 	chkyresdrgwin:
 10199 0000807A 663B0D[09570000]    <1> 		cmp cx, [resolutiony]
 10200 00008081 7607                <1> 		jbe nodragwin
 10201 00008083 668B0D[ED590000]    <1> 		mov cx, [mousecursorposition + 2]
 10202                              <1> 	nodragwin:
 10203 0000808A 8B5E0C              <1> 		mov ebx, [esi + 12]
 10204 0000808D 668B460A            <1> 		mov ax, [esi + 10]
 10205 00008091 8B7602              <1> 		mov esi, [esi + 2]
 10206 00008094 E811F6FFFF          <1> 		call showwindow
 10207 00008099 E939000000          <1> 		jmp doneiconsel
 10208                              <1> 	killwin:
 10209 0000809E 66C7060000          <1> 		mov word [esi], 0
 10210 000080A3 C605[92230000]00    <1> 		mov byte [termguion], 0
 10211 000080AA E8E0ECFFFF          <1> 		call guiclear
 10212 000080AF E82BEDFFFF          <1> 		call reloadallgraphics
 10213 000080B4 E872EAFFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10214 000080B9 E94EE6FFFF          <1> 		jmp guistart
 10215                              <1> 	nexticonsel:
 10216 000080BE 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10217 000080C4 81C610000000        <1> 		add esi, 16
 10218 000080CA 81FE[7B0E0100]      <1> 		cmp esi, graphicstableend
 10219 000080D0 7305                <1> 		jae doneiconsel
 10220 000080D2 E9ADFBFFFF          <1> 		jmp clicon2
 10221                              <1> 	doneiconsel:
 10222 000080D7 813D[037C0000]0100- <1> 		cmp dword [dragging], 1
 10223 000080DF 0000                <1>
 10224 000080E1 731A                <1> 		jae doneiconsel2
 10225 000080E3 A2[67810000]        <1> 		mov [windrag], al
 10226 000080E8 813D[53840000]0000- <1> 		cmp dword [codepointer], 0
 10227 000080F0 0000                <1>
 10228 000080F2 7409                <1> 		je doneiconsel2
 10229 000080F4 8B1D[53840000]      <1> 		mov ebx, [codepointer]
 10230 000080FA FFD3                <1> 		call ebx
 10231 000080FC C3                  <1> 		ret
 10232                              <1> 	doneiconsel2:
 10233 000080FD A0[FC5A0000]        <1> 		mov al, [LBUTTON]
 10234 00008102 A2[017C0000]        <1> 		mov [pLBUTTON], al
 10235 00008107 A0[FD5A0000]        <1> 		mov al, [RBUTTON]
 10236 0000810C A2[027C0000]        <1> 		mov [pRBUTTON], al
 10237 00008111 813D[037C0000]0100- <1> 		cmp dword [dragging], 1
 10238 00008119 0000                <1>
 10239 0000811B 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10240 00008121 E805EAFFFF          <1> 		call switchmousepos2
 10241 00008126 803D[67810000]01    <1> 		cmp byte [windrag], 1
 10242 0000812D 7305                <1> 		jae noclearcursorcl
 10243 0000812F E83FE9FFFF          <1> 		call clearmousecursor
 10244                              <1> noclearcursorcl:
 10245 00008134 E8A6ECFFFF          <1> 		call reloadallgraphics
 10246                              <1> noreloadgraphicsclick:
 10247 00008139 30E4                <1> 		xor ah, ah
 10248 0000813B 31C9                <1> 		xor ecx, ecx
 10249 0000813D 31D2                <1> 		xor edx, edx
 10250 0000813F B001                <1> 		mov al, 1
 10251 00008141 668B15[EB590000]    <1> 		mov dx, [mousecursorposition]
 10252 00008148 668B0D[ED590000]    <1> 		mov cx, [mousecursorposition + 2]
 10253 0000814F 66BBE738            <1> 		mov bx, 0011100011100111b
 10254 00008153 C605[FD7B0000]01    <1> 		mov byte [showcursorfonton], 1
 10255 0000815A E84AF3FFFF          <1> 		call showfontvesa
 10256 0000815F C605[FD7B0000]00    <1> 		mov byte [showcursorfonton], 0
 10257 00008166 C3                  <1> 		ret
 10258 00008167 00                  <1> windrag db 0
 10259 00008168 00000000            <1> lastdrag dw 0,0
 10260 0000816C 00000000            <1> grpctblpos dw 0,0
 10261                              <1> 
 10262                              <1> 
 10263                              <1> 
 10264 00008170 00<rept>            <1> grphbuf times 16 db 0
 10265                              <1> 	graphicsadd:
 10266 00008180 BF[7B0C0100]        <1> 		mov edi, graphicstable
 10267                              <1> 	shwgrph1:
 10268 00008185 397702              <1> 		cmp dword [edi + 2], esi
 10269 00008188 7414                <1> 		je showgraphicsreplace2
 10270 0000818A 81C710000000        <1> 		add edi, 16
 10271 00008190 81FF[7B0E0100]      <1> 		cmp edi, graphicstableend
 10272 00008196 0F8337020000        <1> 		jae near showgraphicsnew
 10273 0000819C EBE7                <1> 		jmp shwgrph1
 10274                              <1> 	showgraphicsreplace2:
 10275 0000819E 8935[72810000]      <1> 		mov [grphbuf + 2], esi
 10276 000081A4 668915[76810000]    <1> 		mov [grphbuf + 6], dx
 10277 000081AB 66890D[78810000]    <1> 		mov [grphbuf + 8], cx
 10278 000081B2 891D[7C810000]      <1> 		mov [grphbuf + 12], ebx
 10279 000081B8 30FF                <1> 		xor bh, bh
 10280 000081BA 88E3                <1> 		mov bl, ah
 10281 000081BC 30E4                <1> 		xor ah, ah
 10282 000081BE 66A3[7A810000]      <1> 		mov [grphbuf + 10], ax	
 10283 000081C4 66891D[70810000]    <1> 		mov [grphbuf], bx
 10284 000081CB 66A1[70810000]      <1> 		mov ax, [grphbuf]
 10285 000081D1 663D0100            <1> 		cmp ax, 1
 10286 000081D5 0F8419000000        <1> 		je near replaceicon
 10287 000081DB 663D0200            <1> 		cmp ax, 2
 10288 000081DF 0F8493000000        <1> 		je near replacestring
 10289 000081E5 663D0300            <1> 		cmp ax, 3
 10290 000081E9 0F840F010000        <1> 		je near replacewindow
 10291 000081EF E9BC010000          <1> 		jmp showgraphicsreplace
 10292                              <1> 	replaceicon:
 10293 000081F4 893D[077C0000]      <1> 		mov [lastpos], edi
 10294 000081FA 8935[0B7C0000]      <1> 		mov [lastpos + 4], esi
 10295 00008200 8B7702              <1> 		mov esi, [edi + 2]
 10296 00008203 668B5F0C            <1> 		mov bx, [edi + 12]
 10297 00008207 668B5706            <1> 		mov dx, [edi + 6]
 10298 0000820B 668B4F08            <1> 		mov cx, [edi + 8]
 10299 0000820F 668B06              <1> 		mov ax, [esi]
 10300 00008212 66A3[0F7C0000]      <1> 		mov [colorbuf], ax
 10301 00008218 66A1[DB6D0000]      <1> 		mov ax, [background]
 10302 0000821E 668906              <1> 		mov [esi], ax
 10303 00008221 8B5F0C              <1> 		mov ebx, [edi + 12]
 10304 00008224 668B470A            <1> 		mov ax, [edi + 10]
 10305 00008228 2401                <1> 		and al, 1
 10306 0000822A A2[57840000]        <1> 		mov [iconselected], al
 10307 0000822F 668B470A            <1> 		mov ax, [edi + 10]
 10308 00008233 E869E9FFFF          <1> 		call showicon2
 10309 00008238 8B3D[077C0000]      <1> 		mov edi, [lastpos]
 10310 0000823E 8B7702              <1> 		mov esi, [edi + 2]
 10311 00008241 66A1[0F7C0000]      <1> 		mov ax, [colorbuf]
 10312 00008247 668906              <1> 		mov [esi], ax
 10313 0000824A 8B35[0B7C0000]      <1> 		mov esi, [lastpos + 4]
 10314 00008250 668B15[76810000]    <1> 		mov dx, [grphbuf + 6]
 10315 00008257 668B0D[78810000]    <1> 		mov cx, [grphbuf + 8]
 10316 0000825E 668B1D[70810000]    <1> 		mov bx, [grphbuf]
 10317 00008265 66A1[7A810000]      <1> 		mov ax, [grphbuf + 10]
 10318 0000826B 88DC                <1> 		mov ah, bl
 10319 0000826D 8B1D[7C810000]      <1> 		mov ebx, [grphbuf + 12]
 10320 00008273 E938010000          <1> 		jmp showgraphicsreplace
 10321                              <1> 	replacestring:
 10322 00008278 893D[077C0000]      <1> 		mov [lastpos], edi
 10323 0000827E 8935[0B7C0000]      <1> 		mov [lastpos + 4], esi
 10324 00008284 8B5F0C              <1> 		mov ebx, [edi + 12]
 10325 00008287 8B7702              <1> 		mov esi, [edi + 2]
 10326 0000828A 668B5706            <1> 		mov dx, [edi + 6]
 10327 0000828E 668B4F08            <1> 		mov cx, [edi + 8]
 10328 00008292 66A1[98740000]      <1> 		mov ax, [colorfont2]
 10329 00008298 66A3[0F7C0000]      <1> 		mov [colorbuf], ax
 10330 0000829E 66A1[DB6D0000]      <1> 		mov ax, [background]
 10331 000082A4 66A3[98740000]      <1> 		mov [colorfont2], ax		
 10332 000082AA 8B5F0C              <1> 		mov ebx, [edi + 12]
 10333 000082AD 668B470A            <1> 		mov ax, [edi + 10]
 10334 000082B1 2401                <1> 		and al, 1
 10335 000082B3 A2[FF7B0000]        <1> 		mov [mouseselecton], al
 10336 000082B8 668B470A            <1> 		mov ax, [edi + 10]
 10337 000082BC E86FF1FFFF          <1> 		call showstring2
 10338 000082C1 66A1[0F7C0000]      <1> 		mov ax, [colorbuf]
 10339 000082C7 66A3[98740000]      <1> 		mov [colorfont2], ax
 10340 000082CD 8B3D[077C0000]      <1> 		mov edi, [lastpos]
 10341 000082D3 8B7702              <1> 		mov esi, [edi + 2]
 10342 000082D6 668B15[76810000]    <1> 		mov dx, [grphbuf + 6]
 10343 000082DD 668B0D[78810000]    <1> 		mov cx, [grphbuf + 8]
 10344 000082E4 668B1D[70810000]    <1> 		mov bx, [grphbuf]
 10345 000082EB 66A1[7A810000]      <1> 		mov ax, [grphbuf + 10]
 10346 000082F1 88DC                <1> 		mov ah, bl
 10347 000082F3 8B1D[7C810000]      <1> 		mov ebx, [grphbuf + 12]
 10348 000082F9 E9B2000000          <1> 		jmp showgraphicsreplace
 10349                              <1> 	replacewindow:
 10350 000082FE 893D[077C0000]      <1> 		mov [lastpos], edi
 10351 00008304 8935[0B7C0000]      <1> 		mov [lastpos + 4], esi
 10352 0000830A 8B7702              <1> 		mov esi, [edi + 2]
 10353 0000830D 8B3D[94760000]      <1> 		mov edi, [windowbufloc]
 10354 00008313 31D2                <1> 		xor edx, edx
 10355 00008315 668B15[F5570000]    <1> 		mov dx, [resolutionx2]
 10356 0000831C C1E204              <1> 		shl edx, 4
 10357 0000831F 29D7                <1> 		sub edi, edx
 10358 00008321 31D2                <1> 		xor edx, edx
 10359 00008323 668B16              <1> 		mov dx, [esi]
 10360 00008326 660316              <1> 		add dx, [esi]
 10361 00008329 668B4E02            <1> 		mov cx, [esi + 2]
 10362 0000832D 6681C11000          <1> 		add cx, 16
 10363 00008332 66A1[DB6D0000]      <1> 		mov ax, [background]
 10364 00008338 803D[67810000]01    <1> 		cmp byte [windrag], 1
 10365 0000833F 7604                <1> 		jbe clearwindow
 10366 00008341 662B4E02            <1> 		sub cx, [esi + 2]
 10367                              <1> 	clearwindow:
 10368                              <1> 		%ifdef gui.background
 10369                              <1> 			cmp dword [backgroundimage], 0
 10370                              <1> 			je .noback
 10371                              <1> 			push esi
 10372                              <1> 			mov esi, [backgroundimage]
 10373                              <1> 			sub edi, [physbaseptr]
 10374                              <1> 			add esi, edi
 10375                              <1> 			add edi, [physbaseptr]
 10376                              <1> 			mov ax, [esi]
 10377                              <1> 			pop esi
 10378                              <1> 		.noback:
 10379                              <1> 		%endif
 10380 00008345 668907              <1> 		mov [edi], ax
 10381 00008348 81C702000000        <1> 		add edi, 2
 10382 0000834E 81EA02000000        <1> 		sub edx, 2
 10383 00008354 81FA00000000        <1> 		cmp edx, 0
 10384 0000835A 75E9                <1> 		jne clearwindow
 10385 0000835C 6649                <1> 		dec cx
 10386 0000835E 668B15[F5570000]    <1> 		mov dx, [resolutionx2]
 10387 00008365 662B16              <1> 		sub dx, [esi]
 10388 00008368 662B16              <1> 		sub dx, [esi]
 10389 0000836B 01D7                <1> 		add edi, edx
 10390 0000836D 668B16              <1> 		mov dx, [esi]
 10391 00008370 660316              <1> 		add dx, [esi]
 10392 00008373 6681F90000          <1> 		cmp cx, 0
 10393 00008378 75CB                <1> 		jne clearwindow
 10394                              <1> 	endwindowclear:
 10395 0000837A C605[93230000]00    <1> 		mov byte [termcopyon], 0
 10396 00008381 8B3D[077C0000]      <1> 		mov edi, [lastpos]
 10397 00008387 8B35[72810000]      <1> 		mov esi, [grphbuf + 2]
 10398 0000838D 668B15[76810000]    <1> 		mov dx, [grphbuf + 6]
 10399 00008394 668B0D[78810000]    <1> 		mov cx, [grphbuf + 8]
 10400 0000839B 668B1D[70810000]    <1> 		mov bx, [grphbuf]
 10401 000083A2 66A1[7A810000]      <1> 		mov ax, [grphbuf + 10]
 10402 000083A8 88DC                <1> 		mov ah, bl
 10403 000083AA 8B1D[7C810000]      <1> 		mov ebx, [grphbuf + 12]
 10404                              <1> 	showgraphicsreplace:
 10405 000083B0 897702              <1> 		mov [edi + 2], esi
 10406 000083B3 66895706            <1> 		mov [edi + 6], dx
 10407 000083B7 66894F08            <1> 		mov [edi + 8], cx
 10408 000083BB 895F0C              <1> 		mov [edi + 12], ebx
 10409 000083BE 30FF                <1> 		xor bh, bh
 10410 000083C0 88E3                <1> 		mov bl, ah
 10411 000083C2 30E4                <1> 		xor ah, ah
 10412 000083C4 6689470A            <1> 		mov [edi + 10], ax
 10413 000083C8 66891F              <1> 		mov [edi], bx
 10414 000083CB 8B5F0C              <1> 		mov ebx, [edi + 12]
 10415 000083CE 668B470A            <1> 		mov ax, [edi + 10]
 10416 000083D2 C3                  <1> 		ret
 10417                              <1> 	showgraphicsnew:
 10418 000083D3 BF[7B0C0100]        <1> 		mov edi, graphicstable
 10419                              <1> 	shwgrph2:
 10420 000083D8 66813F0000          <1> 		cmp word [edi], 0
 10421 000083DD 74D1                <1> 		je showgraphicsreplace
 10422 000083DF 81C710000000        <1> 		add edi, 16
 10423 000083E5 81FF[7B0E0100]      <1> 		cmp edi, graphicstableend
 10424 000083EB 72EB                <1> 		jb shwgrph2
 10425                              <1> 	showgraphicsdone:
 10426 000083ED C3                  <1> 		ret
 10427                              <1> 	
 10428                              <1> putpixel: ;color in si, point is (dx,cx)
 10429                              <1> 		;destroys edi, ebx, eax
 10430 000083EE 6650                <1> 	push ax
 10431 000083F0 6653                <1> 	push bx
 10432 000083F2 31C0                <1> 	xor eax, eax
 10433 000083F4 31DB                <1> 	xor ebx, ebx
 10434 000083F6 31FF                <1> 	xor edi, edi
 10435 000083F8 668B1D[09570000]    <1> 	mov bx, [resolutiony]
 10436 000083FF 66A1[07570000]      <1> 	mov ax, [resolutionx]
 10437 00008405 6639C2              <1> 	cmp dx, ax
 10438 00008408 7720                <1> 	ja .doneput
 10439 0000840A 66D1E0              <1> 	shl ax, 1
 10440 0000840D 6639D9              <1> 	cmp cx, bx
 10441 00008410 7718                <1> 	ja .doneput
 10442 00008412 6689CB              <1> 	mov bx, cx
 10443 00008415 52                  <1> 	push edx
 10444 00008416 F7E3                <1> 	mul ebx
 10445 00008418 5A                  <1> 	pop edx
 10446 00008419 6601D7              <1> 	add di, dx
 10447 0000841C 6601D7              <1> 	add di, dx
 10448 0000841F 01C7                <1> 	add edi, eax
 10449 00008421 033D[1D570000]      <1> 	add edi, [physbaseptr]
 10450 00008427 668937              <1> 	mov [edi], si
 10451                              <1> .doneput:
 10452 0000842A 665B                <1> 	pop bx
 10453 0000842C 6658                <1> 	pop ax
 10454 0000842E C3                  <1> 	ret
 10455                              <1> 	
 10456                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10457 0000842F 31FF                <1> 	xor edi, edi
 10458 00008431 31C0                <1> 	xor eax, eax
 10459 00008433 31DB                <1> 	xor ebx, ebx
 10460 00008435 668B1D[F5570000]    <1> 	mov bx, [resolutionx2]
 10461 0000843C 6689D7              <1> 	mov di, dx
 10462 0000843F 6601D7              <1> 	add di, dx
 10463 00008442 6689C8              <1> 	mov ax, cx
 10464 00008445 F7E3                <1> 	mul ebx
 10465 00008447 01C7                <1> 	add edi, eax
 10466 00008449 033D[1D570000]      <1> 	add edi, [physbaseptr]
 10467 0000844F C3                  <1> 	ret
 10468                              <1> 
 10469 00008450 00                  <1> 	mouseon db 0
 10470 00008451 0000                <1> 	icon dw 0	;pointer to icon
 10471 00008453 00000000            <1> 	codepointer dd 0 ;pointer to code
 10472 00008457 00                  <1> 	iconselected db 0
 10473                                  %endif
 10474                                  %ifdef network.included
 10475                                  	%include "source/network.asm"
 10476                              <1> network.init:
 10477                              <1> %ifdef rtl8139.included
 10478                              <1> 	%include "source/drivers/network/rtl8139.asm"
 10479                              <1> %endif
 10480                              <1> %ifdef rtl8169.included
 10481                              <1> 	%include "source/drivers/network/rtl8169.asm"
 10482                              <2> ;RTL8169 NIC DRIVER
 10483                              <2> rtl8169:
 10484 00008458 E805000000          <2> 	call .init
 10485 0000845D E9AE030000          <2> 	jmp .end
 10486                              <2> 
 10487                              <2> ;REGISTERS
 10488                              <2> .CMD equ 0x37
 10489                              <2> .TXPOLL equ 0x38
 10490                              <2> .TCR equ 0x40
 10491                              <2> .RCR equ 0x44
 10492                              <2> .IMR equ 0x3C
 10493                              <2> .ISR equ 0x3E
 10494                              <2> .LOCK equ 0x50
 10495                              <2> .CONFIG1 equ 0x52
 10496                              <2> .TDSAR equ 0x20
 10497                              <2> .RDSAR equ 0xE4
 10498                              <2> .MAXRX equ 0xDA
 10499                              <2> .MAXTX equ 0xEC
 10500                              <2> ;IMPORTANT VALUES
 10501                              <2> .OWN equ 0x80000000
 10502                              <2> .EOR equ 0x40000000
 10503                              <2> .POLLING equ 0x40
 10504                              <2> ;CODE
 10505                              <2> .init:	;should find card, get mac, and initialize card
 10506 00008462 31C0                <2> 	xor eax, eax
 10507 00008464 A2[FE610000]        <2> 	mov [pcifunction], al
 10508 00008469 A2[FC610000]        <2> 	mov [pcibus], al
 10509 0000846E A2[FD610000]        <2> 	mov [pcidevice], al
 10510 00008473 B002                <2> 	mov al, 0x02 ;type code
 10511 00008475 A2[8D620000]        <2> 	mov [pcitype], al
 10512 0000847A B8EC106981          <2> 	mov eax, 0x816910EC
 10513 0000847F A3[01620000]        <2> 	mov [pcidevid], eax
 10514 00008484 BBFFFFF0FF          <2> 	mov ebx, 0xFFF0FFFF
 10515 00008489 891D[05620000]      <2> 	mov [pcidevidmask], ebx
 10516 0000848F E881DDFFFF          <2> 	call getpciport
 10517 00008494 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10518 0000849A 7501                <2> 	jne .initnic
 10519 0000849C C3                  <2> 	ret
 10520                              <2> .initnic:
 10521 0000849D 8915[38860000]      <2> 	mov [.basenicaddr], edx
 10522 000084A3 89D1                <2> 	mov ecx, edx
 10523 000084A5 E8D1ACFFFF          <2> 	call showhex	;for debugging, please remove
 10524 000084AA BE[1CCA0200]        <2> 	mov esi, rbuffstart
 10525 000084AF B900200000          <2> 	mov ecx, 8192
 10526 000084B4 31C0                <2> 	xor eax, eax
 10527                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 10528 000084B6 8806                <2> 	mov [esi], al
 10529 000084B8 46                  <2> 	inc esi
 10530 000084B9 6649                <2> 	dec cx
 10531 000084BB 6681F90000          <2> 	cmp cx, 0
 10532 000084C0 75F4                <2> 	jne .clearrbuff
 10533                              <2> .findmac:
 10534 000084C2 8B15[38860000]      <2> 	mov edx, [.basenicaddr]
 10535 000084C8 BF[3D860000]        <2> 	mov edi, .mac
 10536 000084CD B906000000          <2> 	mov ecx, 6
 10537                              <2> .macputloop:
 10538 000084D2 EC                  <2> 	in al, dx
 10539 000084D3 8807                <2> 	mov [edi], al
 10540 000084D5 47                  <2> 	inc edi
 10541 000084D6 42                  <2> 	inc edx
 10542 000084D7 49                  <2> 	dec ecx
 10543 000084D8 75F8                <2> 	jnz .macputloop
 10544 000084DA B9[3D860000]        <2> 	mov ecx, .mac
 10545 000084DF E8E1030000          <2> 	call showmac
 10546 000084E4 E817000000          <2> 	call .resetnic
 10547 000084E9 BE[43860000]        <2> 	mov esi, .name
 10548 000084EE E83898FFFF          <2> 	call print
 10549 000084F3 BE[4C860000]        <2> 	mov esi, .initmsg
 10550 000084F8 E82E98FFFF          <2> 	call print
 10551 000084FD 31DB                <2> 	xor ebx, ebx
 10552 000084FF C3                  <2> 	ret
 10553                              <2> .resetnic:
 10554 00008500 8B15[38860000]      <2> 	mov edx, [.basenicaddr]
 10555 00008506 81C237000000        <2> 	add edx, .CMD
 10556 0000850C B010                <2> 	mov al, 0x10
 10557 0000850E EE                  <2> 	out dx, al	;Reset
 10558                              <2> .resetnicwait:
 10559 0000850F EC                  <2> 	in al, dx
 10560 00008510 A810                <2> 	test al, 0x10
 10561 00008512 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
 10562 00008518 8B15[38860000]      <2> 	mov edx, [.basenicaddr]
 10563 0000851E 81C250000000        <2> 	add edx, .LOCK
 10564 00008524 B0C0                <2> 	mov al, 0xC0
 10565 00008526 EE                  <2> 	out dx, al	;unlock config registers
 10566 00008527 8B15[38860000]      <2> 	mov edx, [.basenicaddr]
 10567 0000852D 81C244000000        <2> 	add edx, .RCR
 10568 00008533 B80FE70000          <2> 	mov eax, 0x0000E70F
 10569 00008538 EF                  <2> 	out dx, eax	;recieve packets from all matches
 10570 00008539 8B15[38860000]      <2> 	mov edx, [.basenicaddr]
 10571 0000853F 81C240000000        <2> 	add edx, .TCR
 10572 00008545 B800070003          <2> 	mov eax, 0x03000700
 10573 0000854A EF                  <2> 	out dx, eax	;set up tcr
 10574 0000854B 8B15[38860000]      <2> 	mov edx, [.basenicaddr]
 10575 00008551 81C2DA000000        <2> 	add edx, .MAXRX
 10576 00008557 66B8FF1F            <2> 	mov ax, 0x1FFF
 10577 0000855B 66EF                <2> 	out dx, ax	;setup max rx size
 10578 0000855D 8B15[38860000]      <2> 	mov edx, [.basenicaddr]
 10579 00008563 81C2EC000000        <2> 	add edx, .MAXTX
 10580 00008569 B03B                <2> 	mov al, 0x3B
 10581 0000856B EE                  <2> 	out dx, al	;setup max tx size
 10582 0000856C 8B15[38860000]      <2> 	mov edx, [.basenicaddr]
 10583 00008572 81C220000000        <2> 	add edx, .TDSAR
 10584 00008578 A1[41020000]        <2> 	mov eax, [basecache]
 10585 0000857D C1E004              <2> 	shl eax, 4
 10586 00008580 05[00870000]        <2> 	add eax, .txdesc
 10587 00008585 EF                  <2> 	out dx, eax
 10588 00008586 8B15[38860000]      <2> 	mov edx, [.basenicaddr]
 10589 0000858C 81C2E4000000        <2> 	add edx, .RDSAR
 10590 00008592 A1[41020000]        <2> 	mov eax, [basecache]
 10591 00008597 C1E004              <2> 	shl eax, 4
 10592 0000859A 05[00880000]        <2> 	add eax, .rxdesc
 10593 0000859F EF                  <2> 	out dx, eax
 10594 000085A0 8B15[38860000]      <2> 	mov edx, [.basenicaddr]
 10595 000085A6 81C237000000        <2> 	add edx, .CMD
 10596 000085AC B00C                <2> 	mov al, 0x0C
 10597 000085AE EE                  <2> 	out dx, al	;use transmit and receive
 10598 000085AF 8B15[38860000]      <2> 	mov edx, [.basenicaddr]
 10599 000085B5 81C250000000        <2> 	add edx, .LOCK
 10600 000085BB 30C0                <2> 	xor al, al
 10601 000085BD EE                  <2> 	out dx, al
 10602 000085BE C605[3C860000]01    <2> 	mov byte [.nicconfig], 1
 10603 000085C5 C3                  <2> 	ret
 10604                              <2> 	
 10605                              <2> .sendpacket:	;packet with beginning in edi and end in esi
 10606 000085C6 803D[3C860000]01    <2> 	cmp byte [.nicconfig], 1
 10607 000085CD 7412                <2> 	je .sendcachedata
 10608 000085CF 56                  <2> 	push esi
 10609 000085D0 57                  <2> 	push edi
 10610 000085D1 E88CFEFFFF          <2> 	call .init
 10611 000085D6 5F                  <2> 	pop edi
 10612 000085D7 5E                  <2> 	pop esi
 10613 000085D8 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10614 000085DE 75E6                <2> 	jne .sendpacket
 10615 000085E0 C3                  <2> 	ret
 10616                              <2> .sendcachedata:
 10617 000085E1 8B0D[3D860000]      <2> 	mov ecx, [.mac]
 10618 000085E7 894F06              <2> 	mov [edi + 6], ecx
 10619 000085EA 668B0D[41860000]    <2> 	mov cx, [.mac + 4]
 10620 000085F1 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 10621 000085F5 A1[41020000]        <2> 	mov eax, [basecache]
 10622 000085FA C1E004              <2> 	shl eax, 4
 10623 000085FD 01F8                <2> 	add eax, edi
 10624 000085FF A3[08870000]        <2> 	mov [.txdesc + 8], eax	;put packet start in tx descriptor
 10625 00008604 29FE                <2> 	sub esi, edi
 10626 00008606 668935[00870000]    <2> 	mov [.txdesc], si	;put packet size in tx descriptor
 10627 0000860D 810D[00870000]0000- <2> 	or dword [.txdesc], .OWN	;set own bit
 10628 00008615 0080                <2>
 10629 00008617 8B15[38860000]      <2> 	mov edx, [.basenicaddr]
 10630 0000861D 81C238000000        <2> 	add edx, .TXPOLL
 10631 00008623 B040                <2> 	mov al, .POLLING
 10632 00008625 EE                  <2> 	out dx, al	;set up TX Polling
 10633                              <2> .sendloop:
 10634 00008626 A1[00870000]        <2> 	mov eax, [.txdesc]
 10635 0000862B 2500000080          <2> 	and eax, .OWN
 10636 00008630 3D00000080          <2> 	cmp eax, .OWN
 10637 00008635 74EF                <2> 	je .sendloop
 10638 00008637 C3                  <2> 	ret
 10639                              <2> 	
 10640 00008638 00000000            <2> .basenicaddr dd 0
 10641 0000863C 00                  <2> .nicconfig db 0
 10642 0000863D 000000000000        <2> .mac db 0,0,0,0,0,0
 10643 00008643 52544C383136392000  <2> .name db "RTL8169 ",0
 10644 0000864C 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10645 00008655 65640A00            <2>
 10646 00008659 90<rept>            <2> align 256, nop
 10647                              <2> .txdesc:
 10648 00008700 00000040            <2> 	dd .EOR	;command
 10649 00008704 00000000            <2> 	dd 0	;vlan
 10650 00008708 00000000            <2> 	dd 0	;low buf
 10651 0000870C 00000000            <2> 	dd 0	;high buf
 10652 00008710 90<rept>            <2> align 256, nop
 10653                              <2> .rxdesc:
 10654 00008800 142000C0            <2> 	dd .OWN | .EOR | (rbuffend - rbuffstart)	;command
 10655 00008804 00000000            <2> 	dd 0	;vlan
 10656 00008808 [1CCA0200]          <2> 	dd rbuffstart	;low buf
 10657 0000880C 00000000            <2> 	dd 0	;high buf
 10658                              <2> .end:
 10659                              <1> %endif
 10660                              <1> %ifdef ne2000.included
 10661                              <1> 	%include "source/drivers/network/ne2000.asm"
 10662                              <1> %endif
 10663                              <1> %ifdef i8254x.included
 10664                              <1> 	%include "source/drivers/network/i8254x.asm"
 10665                              <1> %endif
 10666 00008810 C3                  <1> 	ret
 10667                              <1> 
 10668                              <1> sendpacket: ;packet start in edi, end in esi
 10669                              <1> 	%ifdef rtl8139.included
 10670                              <1> 		push edi
 10671                              <1> 		push esi
 10672                              <1> 		call rtl8139.sendpacket
 10673                              <1> 		pop esi
 10674                              <1> 		pop edi
 10675                              <1> 	%endif
 10676                              <1> 	%ifdef rtl8169.included
 10677 00008811 57                  <1> 		push edi
 10678 00008812 56                  <1> 		push esi
 10679 00008813 E8AEFDFFFF          <1> 		call rtl8169.sendpacket
 10680 00008818 5E                  <1> 		pop esi
 10681 00008819 5F                  <1> 		pop edi
 10682                              <1> 	%endif
 10683                              <1> 	%ifdef ne2000.included
 10684                              <1> 		push edi
 10685                              <1> 		push esi
 10686                              <1> 		call ne2000.sendpacket
 10687                              <1> 		pop esi
 10688                              <1> 		pop edi
 10689                              <1> 	%endif
 10690                              <1> 	%ifdef i8254x.included
 10691                              <1> 		call i8254x.sendpacket
 10692                              <1> 	%endif
 10693 0000881A C3                  <1> 	ret
 10694                              <1> 
 10695                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
 10696 0000881B 31C0                <1> 	xor eax, eax
 10697 0000881D 31DB                <1> 	xor ebx, ebx
 10698 0000881F 31C9                <1> 	xor ecx, ecx
 10699                              <1> .lp:
 10700 00008821 8A07                <1> 	mov al, [edi]
 10701 00008823 8A6701              <1> 	mov ah, [edi + 1]
 10702 00008826 01C3                <1> 	add ebx, eax
 10703 00008828 81C702000000        <1> 	add edi, 2
 10704 0000882E 39F7                <1> 	cmp edi, esi
 10705 00008830 72EF                <1> 	jb .lp
 10706 00008832 66B9FFFF            <1> 	mov cx, 0xFFFF
 10707 00008836 6689D8              <1> 	mov ax, bx
 10708 00008839 C1EB10              <1> 	shr ebx, 16
 10709 0000883C 6601D8              <1> 	add ax, bx
 10710 0000883F 6629C1              <1> 	sub cx, ax
 10711 00008842 C3                  <1> 	ret
 10712                              <1> 	
 10713                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
 10714 00008843 31DB                <1> 	xor ebx, ebx
 10715 00008845 31C9                <1> 	xor ecx, ecx
 10716 00008847 31D2                <1> 	xor edx, edx
 10717                              <1> .mlp:
 10718 00008849 89F7                <1> 	mov edi, esi
 10719 0000884B 4F                  <1> 	dec edi
 10720                              <1> .lp:
 10721 0000884C 47                  <1> 	inc edi
 10722 0000884D 8A07                <1> 	mov al, [edi]
 10723 0000884F 3C20                <1> 	cmp al, " "
 10724 00008851 7408                <1> 	je .dnlp
 10725 00008853 3C00                <1> 	cmp al, 0
 10726 00008855 7404                <1> 	je .dnlp
 10727 00008857 3C2E                <1> 	cmp al, "."
 10728 00008859 75F1                <1> 	jne .lp
 10729                              <1> .dnlp:
 10730 0000885B 30C0                <1> 	xor al, al
 10731 0000885D 8807                <1> 	mov [edi], al
 10732 0000885F 53                  <1> 	push ebx
 10733 00008860 56                  <1> 	push esi
 10734 00008861 57                  <1> 	push edi
 10735 00008862 31FF                <1> 	xor edi, edi
 10736 00008864 E8BEAAFFFF          <1> 	call cnvrttxt
 10737 00008869 5E                  <1> 	pop esi
 10738 0000886A 5F                  <1> 	pop edi ;i intentionally switch them
 10739 0000886B 5B                  <1> 	pop ebx
 10740 0000886C 46                  <1> 	inc esi
 10741 0000886D BF[85880000]        <1> 	mov edi, ipstr
 10742 00008872 880C1F              <1> 	mov [edi + ebx], cl
 10743 00008875 43                  <1> 	inc ebx
 10744 00008876 81FB04000000        <1> 	cmp ebx, 4
 10745 0000887C 72CB                <1> 	jb .mlp
 10746 0000887E 8B0D[85880000]      <1> 	mov ecx, [ipstr]
 10747 00008884 C3                  <1> 	ret
 10748 00008885 00000000            <1> ipstr dd 0
 10749                              <1> showip: 	;put the ip address in ecx
 10750 00008889 89C8                <1> 	mov eax, ecx
 10751 0000888B 30DB                <1> 	xor bl, bl
 10752                              <1> .lp:
 10753 0000888D 3C00                <1> 	cmp al, 0
 10754 0000888F 750B                <1> 	jne .nozeroprint
 10755 00008891 B030                <1> 	mov al, "0"
 10756 00008893 50                  <1> 	push eax
 10757 00008894 E8FB9AFFFF          <1> 	call prcharq
 10758 00008899 58                  <1> 	pop eax
 10759 0000889A 30C0                <1> 	xor al, al
 10760                              <1> .nozeroprint:
 10761 0000889C 31C9                <1> 	xor ecx, ecx
 10762 0000889E 88C1                <1> 	mov cl, al
 10763 000088A0 E8A0A9FFFF          <1> 	call showdec
 10764 000088A5 C1E808              <1> 	shr eax, 8
 10765 000088A8 FEC3                <1> 	inc bl
 10766 000088AA 80FB04              <1> 	cmp bl, 4
 10767 000088AD 7312                <1> 	jae .done
 10768 000088AF 50                  <1> 	push eax
 10769 000088B0 6653                <1> 	push bx
 10770 000088B2 BE[C2880000]        <1> 	mov esi, .dot
 10771 000088B7 E86F94FFFF          <1> 	call print
 10772 000088BC 665B                <1> 	pop bx
 10773 000088BE 58                  <1> 	pop eax
 10774 000088BF EBCC                <1> 	jmp .lp
 10775                              <1> .done:
 10776 000088C1 C3                  <1> 	ret
 10777 000088C2 082E00              <1> .dot db 8,".",0
 10778                              <1> showmac:	;mac begins in [ecx]
 10779 000088C5 BE[15890000]        <1> 	mov esi, macprint
 10780 000088CA 89CF                <1> 	mov edi, ecx
 10781 000088CC 81C106000000        <1> 	add ecx, 6
 10782                              <1> showmacloop:
 10783 000088D2 8A07                <1> 	mov al, [edi]
 10784 000088D4 8A27                <1> 	mov ah, [edi]
 10785 000088D6 C0E804              <1> 	shr al, 4
 10786 000088D9 C0E404              <1> 	shl ah, 4
 10787 000088DC C0EC04              <1> 	shr ah, 4
 10788 000088DF 0430                <1> 	add al, 48
 10789 000088E1 3C39                <1> 	cmp al, "9"
 10790 000088E3 7606                <1> 	jbe .goodal
 10791 000088E5 2C30                <1> 	sub al, 48
 10792 000088E7 2C0A                <1> 	sub al, 0xA
 10793 000088E9 0441                <1> 	add al, "A"
 10794                              <1> .goodal:
 10795 000088EB 80C430              <1> 	add ah, 48
 10796 000088EE 80FC39              <1> 	cmp ah, "9"
 10797 000088F1 7609                <1> 	jbe .goodah
 10798 000088F3 80EC30              <1> 	sub ah, 48
 10799 000088F6 80EC0A              <1> 	sub ah, 0xA
 10800 000088F9 80C441              <1> 	add ah, "A"
 10801                              <1> .goodah:
 10802 000088FC 668906              <1> 	mov [esi], ax
 10803 000088FF 81C603000000        <1> 	add esi, 3
 10804 00008905 47                  <1> 	inc edi
 10805 00008906 39CF                <1> 	cmp edi, ecx
 10806 00008908 72C8                <1> 	jb showmacloop
 10807 0000890A BE[15890000]        <1> 	mov esi, macprint
 10808 0000890F E81794FFFF          <1> 	call print
 10809 00008914 C3                  <1> 	ret
 10810                              <1> 	
 10811 00008915 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
 10812 0000891E 30303A30303A303020- <1>
 10813 00008927 00                  <1>
 10814 00008928 00000000            <1> ethernetend dw 0,0
 10815 0000892C C0A80002            <1> sysip db 192,168,0,2
 10816 00008930 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
 10817                                  %endif
 10818                                      %include "source/data.asm"
 10819 00008936 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
 10820 0000893E 73687573683A2000    <1> 	notfound1 db "shush: ",0
 10821 00008946 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
 10822 0000894F 6E640A00            <1>
 10823 00008953 757365726E616D653A- <1> 	userask db "username:",0
 10824 0000895C 00                  <1>
 10825 0000895D 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10826 00008966 00                  <1>
 10827 00008967 40                  <1> 	computer db "@"
 10828                              <1> %ifdef io.serial
 10829                              <1> 	computername	db	"SollerOS.",io.serial," ",0
 10830                              <1> %else
 10831 00008968 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
 10832 00008971 00                  <1>
 10833                              <1> %endif
 10834 00008972 5D242000            <1> 	endprompt db "]$ ",0
 10835 00008976 0D                  <1> 	crlf 	db  13
 10836 00008977 0A00                <1> 	line	db	10,0
 10837                              <1> 	userlst:
 10838 00008979 726F6F7400          <1> 			db "root",0
 10839 0000897E 617765736F6D65706F- <1> 			db "awesomepower",0
 10840 00008987 77657200            <1>
 10841 0000898B 7573657200          <1> 			db "user",0
 10842 00008990 70617373776F726400  <1> 			db "password",0
 10843 00008999 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
 10844 0000899B 00                  <1> 			db 0
 10845                              <1> 	userlstend:
 10846                              <1> 	
 10847                              <1> %ifdef io.serial
 10848                              <1> %else
 10849 0000899B <incbin>            <1> fonts:	incbin "source/fonts/fonts.pak"
 10850                              <1> fontend:
 10851                              <1> %endif
 10852                              <1> osend:	;this is the end of the operating system's space on disk
 10853                                  %ifdef disk.none
 10854                                  	diskfileindex:
 10855                                  	enddiskfileindex:
 10856                                  	align 512, db 0
 10857                                      %include "source/bss.asm"
 10858                                  %else
 10859                                      %include "build/fileindex.asm"
 10860                              <1> diskfileindex:
 10861 0000D99C 617267746573742E65- <1> db "argtest.elf",0
 10862 0000D9A5 6C6600              <1>
 10863 0000D9A8 6E000000            <1> dd (f0-$$)/512
 10864 0000D9AC 06010000            <1> dd (f1-f0)/512
 10865 0000D9B0 6261636B67726F756E- <1> db "background.bmp",0
 10866 0000D9B9 642E626D7000        <1>
 10867 0000D9BF 74010000            <1> dd (f1-$$)/512
 10868 0000D9C3 01140000            <1> dd (f2-f1)/512
 10869 0000D9C7 626F6F742E736800    <1> db "boot.sh",0
 10870 0000D9CF 75150000            <1> dd (f2-$$)/512
 10871 0000D9D3 01000000            <1> dd (f3-f2)/512
 10872 0000D9D7 63686172746573742E- <1> db "chartest.elf",0
 10873 0000D9E0 656C6600            <1>
 10874 0000D9E4 76150000            <1> dd (f3-$$)/512
 10875 0000D9E8 26010000            <1> dd (f4-f3)/512
 10876 0000D9EC 646F73746573742E63- <1> db "dostest.com",0
 10877 0000D9F5 6F6D00              <1>
 10878 0000D9F8 9C160000            <1> dd (f4-$$)/512
 10879 0000D9FC 01000000            <1> dd (f5-f4)/512
 10880 0000DA00 6578656300          <1> db "exec",0
 10881 0000DA05 9D160000            <1> dd (f5-$$)/512
 10882 0000DA09 01000000            <1> dd (f6-f5)/512
 10883 0000DA0D 66696E616C636F756E- <1> db "finalcount.sn",0
 10884 0000DA16 742E736E00          <1>
 10885 0000DA1B 9E160000            <1> dd (f6-$$)/512
 10886 0000DA1F 01000000            <1> dd (f7-f6)/512
 10887 0000DA23 666F726B00          <1> db "fork",0
 10888 0000DA28 9F160000            <1> dd (f7-$$)/512
 10889 0000DA2C 01000000            <1> dd (f8-f7)/512
 10890 0000DA30 677261766974792E65- <1> db "gravity.elf",0
 10891 0000DA39 6C6600              <1>
 10892 0000DA3C A0160000            <1> dd (f8-$$)/512
 10893 0000DA40 E0000000            <1> dd (f9-f8)/512
 10894 0000DA44 6775697465737400    <1> db "guitest",0
 10895 0000DA4C 80170000            <1> dd (f9-$$)/512
 10896 0000DA50 03000000            <1> dd (f10-f9)/512
 10897 0000DA54 68656C6C6F776F726C- <1> db "helloworld.elf",0
 10898 0000DA5D 642E656C6600        <1>
 10899 0000DA63 83170000            <1> dd (f10-$$)/512
 10900 0000DA67 D6010000            <1> dd (f11-f10)/512
 10901 0000DA6B 696E7400            <1> db "int",0
 10902 0000DA6F 59190000            <1> dd (f11-$$)/512
 10903 0000DA73 01000000            <1> dd (f12-f11)/512
 10904 0000DA77 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 10905 0000DA80 2E736E00            <1>
 10906 0000DA84 5A190000            <1> dd (f12-$$)/512
 10907 0000DA88 01000000            <1> dd (f13-f12)/512
 10908 0000DA8C 6D6172696F2E736E00  <1> db "mario.sn",0
 10909 0000DA95 5B190000            <1> dd (f13-$$)/512
 10910 0000DA99 01000000            <1> dd (f14-f13)/512
 10911 0000DA9D 6D6F6D656E742E7761- <1> db "moment.wav",0
 10912 0000DAA6 7600                <1>
 10913 0000DAA8 5C190000            <1> dd (f14-$$)/512
 10914 0000DAAC 34040000            <1> dd (f15-f14)/512
 10915 0000DAB0 70692E656C6600      <1> db "pi.elf",0
 10916 0000DAB7 901D0000            <1> dd (f15-$$)/512
 10917 0000DABB 1F010000            <1> dd (f16-f15)/512
 10918 0000DABF 736F6C6C65726F732E- <1> db "solleros.bmp",0
 10919 0000DAC8 626D7000            <1>
 10920 0000DACC AF1E0000            <1> dd (f16-$$)/512
 10921 0000DAD0 B0020000            <1> dd (f17-f16)/512
 10922 0000DAD4 736F6C6C65726F732E- <1> db "solleros.txt",0
 10923 0000DADD 74787400            <1>
 10924 0000DAE1 5F210000            <1> dd (f17-$$)/512
 10925 0000DAE5 01000000            <1> dd (f18-f17)/512
 10926 0000DAE9 736F6E676F74696D65- <1> db "songotime.sn",0
 10927 0000DAF2 2E736E00            <1>
 10928 0000DAF6 60210000            <1> dd (f18-$$)/512
 10929 0000DAFA 01000000            <1> dd (f19-f18)/512
 10930 0000DAFE 73736500            <1> db "sse",0
 10931 0000DB02 61210000            <1> dd (f19-$$)/512
 10932 0000DB06 02000000            <1> dd (f20-f19)/512
 10933 0000DB0A 737464696F74657374- <1> db "stdiotest.elf",0
 10934 0000DB13 2E656C6600          <1>
 10935 0000DB18 63210000            <1> dd (f20-$$)/512
 10936 0000DB1C 27010000            <1> dd (f21-f20)/512
 10937 0000DB20 74656C7900          <1> db "tely",0
 10938 0000DB25 8A220000            <1> dd (f21-$$)/512
 10939 0000DB29 01000000            <1> dd (f22-f21)/512
 10940 0000DB2D 74696D65746573742E- <1> db "timetest.elf",0
 10941 0000DB36 656C6600            <1>
 10942 0000DB3A 8B220000            <1> dd (f22-$$)/512
 10943 0000DB3E 04010000            <1> dd (f23-f22)/512
 10944 0000DB42 7475746F7269616C2E- <1> db "tutorial.sh",0
 10945 0000DB4B 736800              <1>
 10946 0000DB4E 8F230000            <1> dd (f23-$$)/512
 10947 0000DB52 03000000            <1> dd (f24-f23)/512
 10948 0000DB56 756E667300          <1> db "unfs",0
 10949 0000DB5B 92230000            <1> dd (f24-$$)/512
 10950 0000DB5F 02000000            <1> dd (f25-f24)/512
 10951 0000DB63 7574662D382E747874- <1> db "utf-8.txt",0
 10952 0000DB6C 00                  <1>
 10953 0000DB6D 94230000            <1> dd (f25-$$)/512
 10954 0000DB71 01000000            <1> dd (f26-f25)/512
 10955 0000DB75 766963746F72792E77- <1> db "victory.wav",0
 10956 0000DB7E 617600              <1>
 10957 0000DB81 95230000            <1> dd (f26-$$)/512
 10958 0000DB85 16000000            <1> dd (f27-f26)/512
 10959 0000DB89 5F696D672E62696E00  <1> db "_img.bin",0
 10960 0000DB92 AB230000            <1> dd (f27-$$)/512
 10961 0000DB96 D7020000            <1> dd (f28-f27)/512
 10962                              <1> enddiskfileindex:
 10963                              <1> 
 10964                                      %include "source/bss.asm"
 10965 0000DB9A 90<rept>            <1> align 4, nop
 10966                              <1> bssstart: equ $
 10967                              <1> guion equ bssstart
 10968                              <1> DriveNumber equ guion + 1
 10969                              <1> lbaad equ DriveNumber + 1
 10970                              <1> memlistbuf equ lbaad + 4
 10971                              <1> memlistend equ memlistbuf + 576
 10972                              <1> bsscopy equ memlistend
 10973                              <1> initialstack equ bsscopy
 10974                              <1> stackend equ initialstack + 4000
 10975                              <1> sigtable equ stackend + 96
 10976                              <1> fileindex: equ sigtable + 4
 10977                              <1> fileindexend: equ fileindex + 1024
 10978                              <1> previousstack equ fileindexend
 10979                              <1> lastfolderloc equ previousstack + 4
 10980                              <1> currentfolderloc equ lastfolderloc + 4
 10981                              <1> currentfolder equ currentfolderloc + 4
 10982                              <1> currentfolderend equ currentfolder + 512
 10983                              <1> uid equ currentfolderend
 10984                              <1> ranboot equ uid + 4
 10985                              <1> IFON equ ranboot + 1
 10986                              <1> IFTRUE equ IFON + 1
 10987                              <1> BATCHPOS equ IFTRUE + 100
 10988                              <1> BATCHISON equ BATCHPOS + 4
 10989                              <1> LOOPON equ BATCHISON + 1
 10990                              <1> LOOPPOS	equ LOOPON + 1
 10991                              <1> variables: equ LOOPPOS + 4
 10992                              <1> varend: equ variables + 4096
 10993                              <1> buftxt2: equ varend
 10994                              <1> buftxt: equ buftxt2 + 1024
 10995                              <1> buftxtend: equ buftxt + 1024
 10996                              <1> buf2: equ buftxtend
 10997                              <1> numbuf: equ buf2 + 20
 10998                              <1> %ifdef io.serial
 10999                              <1> 	lastcommandpos equ numbuf + 1
 11000                              <1> %else
 11001                              <1> 	%ifdef gui.included
 11002                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 11003                              <1> 		graphicstableend equ graphicstable + 200h
 11004                              <1> 		%ifdef gui.background
 11005                              <1> 			backgroundbuffer equ graphicstableend
 11006                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 11007                              <1> 			mousecolorbuf equ backgroundbufferend
 11008                              <1> 		%else
 11009                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 11010                              <1> 		%endif
 11011                              <1> 		mcolorend equ mousecolorbuf + 256
 11012                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 11013                              <1> 		videobufend	equ videobuf + 210*65*4;2
 11014                              <1> 		videobuf2 equ videobufend
 11015                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
 11016                              <1> 	%else
 11017                              <1> 		videobuf equ numbuf + 1
 11018                              <1> 		videobufend equ videobuf + 80*30*4
 11019                              <1> 		videobuf2 equ videobufend
 11020                              <1> 		videobuf2end equ videobuf2 + 80*30*4
 11021                              <1> 	%endif
 11022                              <1> 	lastcommandpos: equ videobuf2end
 11023                              <1> %endif
 11024                              <1> 	commandbufpos: equ lastcommandpos + 4
 11025                              <1> 	commandlistentries: equ commandbufpos + 4
 11026                              <1> 	commandsentered: equ commandlistentries + 4
 11027                              <1> 	commandbuf: equ commandsentered + 4
 11028                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 11029                              <1> %ifdef network.included
 11030                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 11031                              <1> 	rbuffend equ rbuffstart + 8212
 11032                              <1> %else
 11033                              <1> 	rbuffstart equ commandbufend
 11034                              <1> 	rbuffend equ commandbufend
 11035                              <1> %endif
 11036                              <1> %ifdef threads.included
 11037                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 11038                              <1> 	threadlistend: equ threadlist + 1024*4
 11039                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
 11040                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
 11041                              <1> 	bssend equ stack1 + 1024*1024
 11042                              <1> %else
 11043                              <1> 	bssend equ rbuffend
 11044                              <1> %endif
 11045                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 11046                                      %include "build/files.asm"
 11047 0000DB9C 00<rept>            <1> align 512,db 0
 11048                              <1> f0:
 11049 0000DB9C <incbin>            <1> incbin "included/argtest.elf"
 11050 0002E6F2 00<rept>            <1> align 512,db 0
 11051                              <1> f1:
 11052 0002E6F2 <incbin>            <1> incbin "included/background.bmp"
 11053 002AE846 00<rept>            <1> align 512,db 0
 11054                              <1> f2:
 11055 002AE846 <incbin>            <1> incbin "included/boot.sh"
 11056 002AEAFD 00<rept>            <1> align 512,db 0
 11057                              <1> f3:
 11058 002AEAFD <incbin>            <1> incbin "included/chartest.elf"
 11059 002D36DB 00<rept>            <1> align 512,db 0
 11060                              <1> f4:
 11061 002D36DB <incbin>            <1> incbin "included/dostest.com"
 11062 002D3931 00<rept>            <1> align 512,db 0
 11063                              <1> f5:
 11064 002D3931 <incbin>            <1> incbin "included/exec"
 11065 002D3AE1 00<rept>            <1> align 512,db 0
 11066                              <1> f6:
 11067 002D3AE1 <incbin>            <1> incbin "included/finalcount.sn"
 11068 002D3D02 00<rept>            <1> align 512,db 0
 11069                              <1> f7:
 11070 002D3D02 <incbin>            <1> incbin "included/fork"
 11071 002D3F58 00<rept>            <1> align 512,db 0
 11072                              <1> f8:
 11073 002D3F58 <incbin>            <1> incbin "included/gravity.elf"
 11074 002EFED9 00<rept>            <1> align 512,db 0
 11075                              <1> f9:
 11076 002EFED9 <incbin>            <1> incbin "included/guitest"
 11077 002F042B 00<rept>            <1> align 512,db 0
 11078                              <1> f10:
 11079 002F042B <incbin>            <1> incbin "included/helloworld.elf"
 11080 0032B1E3 00<rept>            <1> align 512,db 0
 11081                              <1> f11:
 11082 0032B1E3 <incbin>            <1> incbin "included/int"
 11083 0032B3AF 00<rept>            <1> align 512,db 0
 11084                              <1> f12:
 11085 0032B3AF <incbin>            <1> incbin "included/lostwoods.sn"
 11086 0032B456 00<rept>            <1> align 512,db 0
 11087                              <1> f13:
 11088 0032B456 <incbin>            <1> incbin "included/mario.sn"
 11089 0032B63A 00<rept>            <1> align 512,db 0
 11090                              <1> f14:
 11091 0032B63A <incbin>            <1> incbin "included/moment.wav"
 11092 003B1E1A 00<rept>            <1> align 512,db 0
 11093                              <1> f15:
 11094 003B1E1A <incbin>            <1> incbin "included/pi.elf"
 11095 003D5D31 00<rept>            <1> align 512,db 0
 11096                              <1> f16:
 11097 003D5D31 <incbin>            <1> incbin "included/solleros.bmp"
 11098 0042BDE6 00<rept>            <1> align 512,db 0
 11099                              <1> f17:
 11100 0042BDE6 <incbin>            <1> incbin "included/solleros.txt"
 11101 0042BF74 00<rept>            <1> align 512,db 0
 11102                              <1> f18:
 11103 0042BF74 <incbin>            <1> incbin "included/songotime.sn"
 11104 0042C04A 00<rept>            <1> align 512,db 0
 11105                              <1> f19:
 11106 0042C04A <incbin>            <1> incbin "included/sse"
 11107 0042C4A8 00<rept>            <1> align 512,db 0
 11108                              <1> f20:
 11109 0042C4A8 <incbin>            <1> incbin "included/stdiotest.elf"
 11110 00451243 00<rept>            <1> align 512,db 0
 11111                              <1> f21:
 11112 00451243 <incbin>            <1> incbin "included/tely"
 11113 004515BA 00<rept>            <1> align 512,db 0
 11114                              <1> f22:
 11115 004515BA <incbin>            <1> incbin "included/timetest.elf"
 11116 00471C3D 00<rept>            <1> align 512,db 0
 11117                              <1> f23:
 11118 00471C3D <incbin>            <1> incbin "included/tutorial.sh"
 11119 00472352 00<rept>            <1> align 512,db 0
 11120                              <1> f24:
 11121 00472352 <incbin>            <1> incbin "included/unfs"
 11122                              <1> align 512,db 0
 11123                              <1> f25:
 11124 00472352 <incbin>            <1> incbin "included/utf-8.txt"
 11125 0047292F 00<rept>            <1> align 512,db 0
 11126                              <1> f26:
 11127 0047292F <incbin>            <1> incbin "included/victory.wav"
 11128 00475548 00<rept>            <1> align 512,db 0
 11129                              <1> f27:
 11130 00475548 <incbin>            <1> incbin "included/_img.bin"
 11131                              <1> align 512,db 0
 11132                              <1> f28:
 11133                                  %endif
