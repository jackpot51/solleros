     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> ;%define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> ;%define hardware.automatic
    29                              <1> ;Automatically load the sound and network drivers.
    30                              <1> 
    31                              <1> ;%define threads.included
    32                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    33                              <1> 
    34                              <1> %define exceptions.included
    35                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    36                              <1> 
    37                              <1> ;%define disk.protected
    38                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    39                              <1> 
    40                              <1> %define disk.real
    41                              <1> ;Use real mode for disk access-this gives greater compatibility
    42                              <1> 
    43                              <1> ;%define sound.included
    44                              <1> ;This includes the sound drivers
    45                              <1> 
    46                              <1> ;%define network.included
    47                              <1> ;This includes the network stack
    48                              <1> 
    49                              <1> ;%define rtl8169.included
    50                              <1> ;This includes the RTL8169 drivers
    51                              <1> 
    52                              <1> ;%define rtl8139.included
    53                              <1> ;This includes the RTL8139 drivers
    54                              <1> 
    55                              <1> ;%define ne2000.included
    56                              <1> ;This includes the ne2000 drivers
    57                              <1> 
    58                              <1> ;%define i8254x.included
    59                              <1> ;This includes the Intel 8254x drivers
    60                              <1> 
    61                              <1> %define sector.debug
    62                              <1> ;Dump the contents of the first sector of SollerOS
    63                              <1> 
    64                              <1> ;%define dos.compatible
    65                              <1> ;Make the kernel loadable by dos.
    66                              <1> 
    67                              <1> ;%define system.simple
    68                              <1> ;The smallest possible system, overrides all options
    69                              <1> 
    70                              <1> ;FIX DEPENDANCIES
    71                              <1> %ifdef system.simple
    72                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    73                              <1> 	%define UNDEFALL
    74                              <1> %endif
    75                              <1> %ifdef dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef UNDEFALL
    79                              <1> 	%undef io.serial
    80                              <1> 	%undef disk.real
    81                              <1> 	%undef gui.included
    82                              <1> 	%undef gui.alphablending
    83                              <1> 	%undef gui.background
    84                              <1> 	%undef terminal.vsync
    85                              <1> 	%undef hardware.automatic
    86                              <1> 	%undef threads.included
    87                              <1> 	%undef exceptions.included
    88                              <1> 	%undef disk.protected
    89                              <1> 	%undef sound.included
    90                              <1> 	%undef network.included
    91                              <1> 	%undef rtl8139.included
    92                              <1> 	%undef rtl8169.included
    93                              <1> 	%undef ne2000.included
    94                              <1> 	%undef i8254x.included
    95                              <1> 	%undef sector.debug
    96                              <1> 	%undef UNDEFALL
    97                              <1> %endif
    98                              <1> %ifdef system.simple
    99                              <1> 	%define io.serial "1"
   100                              <1> 	%define disk.real
   101                              <1> %endif
   102                              <1> %ifdef gui.included
   103                              <1> 	%undef io.serial
   104                              <1> %else
   105                              <1> 	%undef gui.alphablending
   106                              <1> 	%undef gui.background
   107                              <1> %endif
   108                              <1> %ifdef network.included
   109                              <1> %else
   110                              <1> 	%undef i8254x.included
   111                              <1> 	%undef ne2000.included
   112                              <1> 	%undef rtl8139.included
   113                              <1> 	%undef rtl8169.included
   114                              <1> %endif
   115                              <1> %ifdef disk.protected
   116                              <1> 	%undef disk.real
   117                              <1> %else
   118                              <1> 	%ifdef disk.real
   119                              <1> 	%else
   120                              <1> 		%define disk.none
   121                              <1> 	%endif
   122                              <1> %endif
   123                                  [ORG 0x100]
   124                                  	%include "source/signature.asm"
   125                              <1> sigjump:
   126 00000000 E90E00              <1> 	jmp signatureend
   127                              <1> signature:
   128 00000003 536F6C6C65724F5320- <1> db "SollerOS ",0 ;Operating system name
   129 0000000C 00                  <1>
   130 0000000D 0B010000            <1> dd 267	;version number
   131                              <1> signatureend:
   132                                  [BITS 16]
   133                                      %include "source/boot.asm"
   134                              <1>     ; MENU.ASM
   135                              <1> boot:
   136 00000011 8CC8                <1> 	mov ax, cs
   137 00000013 8ED8                <1> 	mov ds, ax
   138 00000015 8EC0                <1> 	mov es, ax
   139 00000017 8ED0                <1> 	mov ss, ax
   140 00000019 0F31                <1> 	rdtsc
   141 0000001B 66A3[6055]          <1> 	mov [initialtsc], eax
   142 0000001F 668916[6455]        <1> 	mov [initialtsc + 4], edx
   143 00000024 66A3[6855]          <1> 	mov [lasttsc], eax
   144 00000028 668916[6C55]        <1> 	mov [lasttsc + 4], edx
   145 0000002D 880E[5B55]          <1> 	mov [DriveNumber], cl
   146 00000031 66891E[5C55]        <1> 	mov [lbaad], ebx
   147                              <1> %ifdef io.serial
   148                              <1> 	call getmemorysize
   149                              <1> 	mov si, serialmsg
   150                              <1> 	call printrm
   151                              <1> 	jmp pmode
   152                              <1> serialmsg: db 10,13,"SollerOS: Using serial port ",io.serial," for I/O.",0
   153                              <1> %else
   154 00000036 E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   155 00000039 E95400              <1> 	jmp pmode
   156                              <1> %endif
   157                              <1> 	
   158                              <1> vgaset:
   159 0000003C B81200              <1> 	mov ax, 12h
   160 0000003F 31DB                <1> 	xor bx, bx
   161 00000041 CD10                <1> 	int 10h
   162 00000043 C606[5A55]00        <1> 	mov byte [guion], 0
   163 00000048 E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   164 0000004B C3                  <1> 	ret
   165                              <1> 
   166                              <1> getmemorysize:
   167 0000004C BF[7055]            <1> 	mov di, memlistbuf
   168 0000004F 6631DB              <1> 	xor ebx, ebx
   169                              <1> getmemsizeloop:
   170 00000052 66B820E80000        <1> 	mov eax, 0xE820
   171 00000058 66BA50414D53        <1> 	mov edx, 0x0534D4150
   172 0000005E 66B918000000        <1> 	mov ecx, 24
   173 00000064 CD15                <1> 	int 0x15
   174 00000066 81C71800            <1> 	add di, 24
   175 0000006A 81FF[B057]          <1> 	cmp di, memlistend
   176 0000006E 7305                <1> 	jae nomoregetmemsize
   177 00000070 6685DB              <1> 	test ebx, ebx
   178 00000073 75DD                <1> 	jnz getmemsizeloop
   179                              <1> nomoregetmemsize:
   180 00000075 81EF[7055]          <1> 	sub di, memlistbuf
   181 00000079 893E[B057]          <1> 	mov [memlistend], di
   182 0000007D C3                  <1> 	ret
   183                              <1> 	
   184                              <1> printrm:			; 'si' comes in with string address
   185 0000007E BB0700              <1>     mov bx,07		; write to display
   186 00000081 B40E                <1>     mov ah,0Eh		; screen function
   187 00000083 8A04                <1>    .lp:    mov al,[si]         ; get next character
   188 00000085 84C0                <1>     test al,al		; look for terminator 
   189 00000087 7406                <1>     jz .done	; zero byte at end of string
   190 00000089 CD10                <1>     int 10h		; write character to screen.    
   191 0000008B 46                  <1> 	inc si	     	; move to next character
   192 0000008C E9F4FF              <1>     jmp .lp		; loop
   193 0000008F C3                  <1> .done: ret
   194                                      %include "source/pmode.asm"
   195                              <1> [BITS 16]
   196                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   197                              <1> ;	16-bit real mode
   198                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   199                              <1> 
   200                              <1> pmode:
   201 00000090 6631C0              <1> 	xor eax, eax
   202 00000093 6631DB              <1> 	xor ebx, ebx
   203 00000096 6631C9              <1> 	xor ecx, ecx
   204 00000099 6631D2              <1> 	xor edx, edx
   205 0000009C 6631F6              <1> 	xor esi, esi
   206 0000009F 6631FF              <1> 	xor edi, edi
   207 000000A2 BA9200              <1> 	mov dx, 0x92
   208 000000A5 EC                  <1> 	in al, dx	;;A20
   209 000000A6 0C02                <1> 	or al, 2
   210 000000A8 EE                  <1> 	out dx, al
   211 000000A9 8CCB                <1> 	mov bx,cs		; EBX=segment
   212 000000AB 66C1E304            <1> 	shl ebx,4		;	<< 4
   213 000000AF 6689D8              <1> 	mov eax, ebx		; EAX=linear address of segment base
   214 000000B2 A3[6003]            <1> 	mov [gdt2 + 2],ax
   215 000000B5 A3[6803]            <1> 	mov [gdt3 + 2],ax
   216 000000B8 66C1E810            <1> 	shr eax,16
   217 000000BC A2[6203]            <1> 	mov [gdt2 + 4],al
   218 000000BF A2[6A03]            <1> 	mov [gdt3 + 4],al
   219 000000C2 8826[6503]          <1> 	mov [gdt2 + 7],ah
   220 000000C6 8826[6D03]          <1> 	mov [gdt3 + 7],ah
   221                              <1> 
   222 000000CA 66B8[DC590300]      <1> 	mov eax, initialstack
   223 000000D0 660306[2702]        <1> 	add eax, [newcodecache]
   224 000000D5 A3[5803]            <1> 	mov [gdts + 2],ax
   225 000000D8 66C1E810            <1> 	shr eax, 16
   226 000000DC A2[5A03]            <1> 	mov [gdts + 4],al
   227 000000DF 8826[5D03]          <1> 	mov [gdts + 7], ah
   228                              <1> 	
   229 000000E3 66A1[2702]          <1> 	mov eax, [newcodecache]
   230 000000E7 A3[7003]            <1> 	mov [gdt4 + 2],ax
   231 000000EA A3[7803]            <1> 	mov [gdt5 + 2],ax
   232 000000ED A3[8003]            <1> 	mov [gdtv8086 + 2], ax
   233 000000F0 A3[8803]            <1> 	mov [gdtv80862 + 2], ax
   234 000000F3 66C1E810            <1> 	shr eax,16
   235 000000F7 A2[7203]            <1> 	mov [gdt4 + 4],al
   236 000000FA A2[7A03]            <1> 	mov [gdt5 + 4],al
   237 000000FD A2[8203]            <1> 	mov [gdtv8086 + 4],al
   238 00000100 A2[8A03]            <1> 	mov [gdtv80862 + 4],al
   239 00000103 8826[7503]          <1> 	mov [gdt4 + 7],ah
   240 00000107 8826[7D03]          <1> 	mov [gdt5 + 7],ah
   241 0000010B 8826[8503]          <1> 	mov [gdtv8086 + 7],ah
   242 0000010F 8826[8D03]          <1> 	mov [gdtv80862 + 7],ah
   243                              <1> 	
   244 00000113 66B800004000        <1> 	mov eax, dosprogloc
   245 00000119 660306[2702]        <1> 	add eax, [newcodecache]
   246 0000011E A3[9003]            <1> 	mov [gdtdos + 2],ax
   247 00000121 A3[9803]            <1> 	mov [gdtdos2 + 2],ax
   248 00000124 66C1E810            <1> 	shr eax,16
   249 00000128 A2[9203]            <1> 	mov [gdtdos + 4],al
   250 0000012B A2[9A03]            <1> 	mov [gdtdos2 + 4],al
   251 0000012E 8826[9503]          <1> 	mov [gdtdos + 7],ah
   252 00000132 8826[9D03]          <1> 	mov [gdtdos2 + 7],ah
   253                              <1> 	
   254                              <1> ; fix up gdt and idt
   255 00000136 67668D83[46030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   256 0000013E 66A3[3C03]          <1> 	mov [gdtr + 2],eax
   257 00000142 67668D83[9E030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   258 0000014A 66A3[4203]          <1> 	mov [idtr + 2],eax
   259 0000014E FA                  <1> 	cli
   260 0000014F 0F0116[3A03]        <1> 	lgdt [gdtr]
   261 00000154 0F011E[4003]        <1> 	lidt [idtr]
   262 00000159 6631DB              <1> 	xor ebx, ebx
   263 0000015C 8CDB                <1> 	mov bx, ds
   264 0000015E 66891E[2302]        <1> 	mov [basecache], ebx
   265 00000163 0F20C0              <1> 	mov eax,cr0
   266 00000166 0C01                <1> 	or al,1
   267 00000168 0F22C0              <1> 	mov cr0,eax
   268 0000016B EA[7001]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   269                              <1> [BITS 32]
   270                              <1> do_pm:
   271 00000170 31C0                <1> 	xor eax, eax
   272 00000172 66B82000            <1> 	mov ax, SYS_DATA_SEL
   273 00000176 8ED8                <1> 	mov ds, ax
   274 00000178 8EC0                <1> 	mov es, ax
   275 0000017A 8EE0                <1> 	mov fs, ax
   276 0000017C 66B83000            <1> 	mov ax, NEW_DATA_SEL
   277 00000180 8EE8                <1> 	mov gs, ax
   278                              <1> 	
   279                              <1> copykernel:
   280 00000182 648B06              <1> 	mov eax, [fs:esi]
   281 00000185 658906              <1> 	mov [gs:esi], eax
   282 00000188 81C604000000        <1> 	add esi, 4
   283 0000018E 81FE[DC590300]      <1> 	cmp esi, bsscopy
   284 00000194 72EC                <1> 	jb copykernel
   285 00000196 EA[9D010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   286                              <1> 	
   287                              <1> done_copy:
   288 0000019D 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   289 000001A1 8ED8                <1> 	mov ds, ax
   290 000001A3 8EC0                <1> 	mov es, ax
   291 000001A5 8EE0                <1> 	mov fs, ax
   292                              <1> 	;mov ax, STACK_SEL
   293 000001A7 8ED0                <1> 	mov ss, ax
   294 000001A9 BC[7C690300]        <1> 	mov esp, stackend
   295 000001AE 66B82000            <1> 	mov ax, SYS_DATA_SEL
   296 000001B2 8EE8                <1> 	mov gs, ax
   297                              <1> 	
   298 000001B4 E8E84D0000          <1> 	call initialize	;initialize drivers
   299                              <1> 	
   300 000001B9 A1[27020000]        <1> 	mov eax, [newcodecache]
   301 000001BE C1E804              <1> 	shr eax, 4
   302 000001C1 A3[23020000]        <1> 	mov [basecache], eax
   303                              <1> 	
   304 000001C6 BE[85E30300]        <1> 	mov esi, bssend
   305 000001CB 31C0                <1> 	xor eax, eax
   306                              <1> clearkernelbuffers:
   307 000001CD 8906                <1> 	mov [esi], eax
   308 000001CF 81EE04000000        <1> 	sub esi, 4
   309 000001D5 81FE[DC590300]      <1> 	cmp esi, bsscopy
   310 000001DB 77F0                <1> 	ja clearkernelbuffers
   311 000001DD FB                  <1> 	sti
   312                              <1> 
   313                              <1> getmemoryspace:
   314 000001DE BE[70550000]        <1> 	mov esi, memlistbuf
   315 000001E3 31FF                <1> 	xor edi, edi
   316 000001E5 668B3D[B0570000]    <1> 	mov di, [memlistend]
   317 000001EC 01F7                <1> 	add edi, esi
   318 000001EE 31C0                <1> 	xor eax, eax
   319                              <1> memoryspaceaddition:
   320 000001F0 39FE                <1> 	cmp esi, edi
   321 000001F2 7325                <1> 	jae finishedmemspacecalc
   322 000001F4 81C608000000        <1> 	add esi, 8
   323 000001FA 8B0E                <1> 	mov ecx, [esi]
   324 000001FC 81C608000000        <1> 	add esi, 8
   325 00000202 8B1E                <1> 	mov ebx, [esi]
   326 00000204 81C608000000        <1> 	add esi, 8
   327 0000020A 81FB01000000        <1> 	cmp ebx, 1
   328 00000210 75DE                <1> 	jne memoryspaceaddition
   329 00000212 01C8                <1> 	add eax, ecx
   330 00000214 E9D7FFFFFF          <1> 	jmp memoryspaceaddition
   331                              <1> finishedmemspacecalc:
   332 00000219 A3[38020000]        <1> 	mov [memoryspace], eax
   333                              <1> %ifdef gui.included
   334                              <1> 	cmp byte [guion], 0
   335                              <1> 	je normalstartup
   336                              <1> 	mov ebx, [basecache]
   337                              <1> 	shl ebx, 4
   338                              <1> 	mov edi, [physbaseptr]
   339                              <1> 	sub edi, ebx
   340                              <1> 	mov [physbaseptr], edi
   341                              <1> 	jmp guiboot
   342                              <1> %endif
   343                              <1> normalstartup:
   344 0000021E E963250000          <1> 	jmp os
   345                              <1> 	
   346 00000223 00000000            <1> basecache dd 0
   347 00000227 00001000            <1> newcodecache dd 0x100000
   348                              <1> 
   349 0000022B 00                  <1> testingcpuspeed db 0
   350 0000022C 00000000            <1> cpuspeedperint dd 0
   351 00000230 0000000000000000    <1> cpuclocksperint dd 0,0
   352 00000238 00000000            <1> memoryspace dd 0
   353 0000023C 7D0A                <1> pitdiv dw 2685
   354 0000023E 2E562200            <1> timeinterval dd 2250286
   355                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   356                              <1> ;for the pit, note that div=1 gives 838.09ns, the clock runs at 1.193182 MHz
   357                              <1> ;div=451 is 377981.0004, div=902 is 755962.0008,
   358                              <1> ;div=2685 is 2250286.00004ns, div=5370 is 4500572.00007ns
   359                              <1> ;div=55483 is 46500044.000006ns
   360                              <1> ;use one of those values for the minimum error
   361                              <1> 
   362 00000242 00                  <1> ticks db 0
   363 00000243 00000000            <1> timeseconds dd 0
   364 00000247 00000000            <1> timenanoseconds dd 0
   365 0000024B 00                  <1> soundon db 0
   366 0000024C 0000                <1> soundrepititions dw 0
   367 0000024E 00000000            <1> soundpos dd 0
   368 00000252 00000000            <1> soundendpos dd 0
   369                              <1> 
   370                              <1> cpuspeedend:
   371 00000256 C605[2B020000]00    <1> 	mov byte [testingcpuspeed], 0
   372 0000025D A3[2C020000]        <1> 	mov [cpuspeedperint], eax
   373 00000262 B8[28470000]        <1> 	mov eax, cpuspeedloopend
   374 00000267 890424              <1> 	mov [esp], eax
   375 0000026A E9BB000000          <1> 	jmp handled
   376                              <1> 
   377                              <1> pitinterrupt: ;this controls threading
   378 0000026F 803D[2B020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   379 00000276 74DE                <1> 	je cpuspeedend
   380                              <1> 
   381 00000278 FA                  <1> 	cli
   382                              <1> 
   383 00000279 E885000000          <1> 	call timekeeper ;this updates the internal time
   384                              <1> 	
   385 0000027E 803D[4B020000]01    <1> 	cmp byte [soundon], 1
   386 00000285 0F84F5460000        <1> 	je near PCSpeakerRAW
   387                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   388                              <1> %ifdef threads.included
   389                              <1> 	cmp byte [threadson], 1
   390                              <1> 	je near threadswitch
   391                              <1> %endif
   392                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   393 0000028B 803D[EF540000]00    <1> 	cmp byte [threadson], 0
   394 00000292 0F8492000000        <1> 	je near handled
   395                              <1> %ifdef io.serial
   396                              <1> 	jmp handled
   397                              <1> %else
   398 00000298 FE05[42020000]      <1> 	inc byte [ticks] ;every 256 ticks, check for keys
   399 0000029E 0F8585000000        <1> 	jnz handled3
   400                              <1> 	
   401 000002A4 60                  <1> 	pusha
   402 000002A5 E464                <1> 	in al, 64h
   403 000002A7 A820                <1> 	test al, 20h
   404 000002A9 0F8579000000        <1> 	jnz near handled2
   405 000002AF E460                <1> 	in al, 60h
   406 000002B1 3C01                <1> 	cmp al, 1		;escape
   407 000002B3 7405                <1> 	je userint
   408 000002B5 E96E000000          <1> 	jmp handled2
   409                              <1> ;	cmp al, 0x57
   410                              <1> ;	jne near handled2
   411                              <1> ;pauseint:	;F11 pauses
   412                              <1> ;	in al, 64h
   413                              <1> ;	test al, 20h
   414                              <1> ;	jnz pauseint
   415                              <1> ;	in al, 60h
   416                              <1> ;	cmp al, 0xD7
   417                              <1> ;	jne pauseint
   418                              <1> ;	mov esi, pausemsg
   419                              <1> ;	call print
   420                              <1> ;	cli
   421                              <1> ;pauselp:
   422                              <1> ;	nop
   423                              <1> ;	in al, 64h
   424                              <1> ;	test al, 20h
   425                              <1> ;	jnz pauselp
   426                              <1> ;	in al, 60h
   427                              <1> ;	cmp al, 0x57
   428                              <1> ;	je near handled2
   429                              <1> ;	jmp pauselp
   430                              <1> ;pausemsg db "Paused",10,0
   431                              <1> userint:
   432 000002BA 31C0                <1> 	xor eax, eax
   433 000002BC 3905[DC690300]      <1> 	cmp [sigtable], eax
   434 000002C2 7411                <1> 	je .nosighook
   435 000002C4 8B1D[DC690300]      <1> 	mov ebx, [sigtable]
   436 000002CA 895C2420            <1> 	mov [esp + 32], ebx
   437                              <1> ;	mov [sigtable], eax
   438 000002CE B020                <1> 	mov al, 0x20
   439 000002D0 E620                <1> 	out 0x20, al
   440 000002D2 61                  <1> 	popa
   441 000002D3 FB                  <1> 	sti
   442 000002D4 CF                  <1> 	iret
   443                              <1> .nosighook:
   444                              <1> 		;UNMASK ALL INTS
   445 000002D5 E621                <1> 	out 0x21, al
   446 000002D7 E6A1                <1> 	out 0xA1, al
   447 000002D9 B020                <1> 	mov al, 0x20
   448 000002DB E6A0                <1> 	out 0xA0, al
   449 000002DD E620                <1> 	out 0x20, al
   450                              <1> 		;RESET PIT DIVISOR
   451 000002DF 66A1[3C020000]      <1> 	mov ax, [pitdiv]
   452 000002E5 E640                <1> 	out 0x40, al
   453 000002E7 66C1C008            <1> 	rol ax, 8
   454 000002EB E640                <1> 	out 0x40, al
   455                              <1> 		;RESET PIC
   456 000002ED B020                <1> 	mov al, 0x20
   457 000002EF E620                <1> 	out 0x20, al
   458 000002F1 61                  <1> 	popa
   459 000002F2 FB                  <1> 	sti
   460 000002F3 BC[7C690300]        <1> 	mov esp, stackend ;reset stack
   461 000002F8 E9E9250000          <1> 	jmp returnfromexp
   462                              <1> %endif
   463 000002FD 0A                  <1> rtcrate db 10
   464                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   465                              <1> %ifdef io.serial
   466                              <1> %else
   467                              <1> %ifdef terminal.vsync
   468                              <1> 	cli
   469                              <1> 	cmp byte [termcopyneeded], 0
   470                              <1> 	je .nocopy
   471                              <1> 	call newtermcopy
   472                              <1> .nocopy
   473                              <1> 	push eax
   474                              <1> 	mov al, 0xC
   475                              <1> 	out 0x70, al
   476                              <1> 	in al, 0x71
   477                              <1> 	pop eax
   478                              <1> 	sti
   479                              <1> %endif
   480                              <1> %endif
   481 000002FE E92E000000          <1> 	jmp handled4
   482                              <1> %ifdef rtl8139.included
   483                              <1> rtl8139.irq:
   484                              <1> 	cli
   485                              <1> 	push edx
   486                              <1> 	push eax
   487                              <1> 	mov edx, [rtl8139.basenicaddr]
   488                              <1> 	add edx, rtl8139.ISR
   489                              <1> 	xor eax, eax
   490                              <1> 	in ax, dx
   491                              <1> 	out dx, ax
   492                              <1> 	pop eax
   493                              <1> 	pop edx
   494                              <1> 	sti
   495                              <1> 	jmp handled4
   496                              <1> %endif
   497                              <1> %ifdef sound.included
   498                              <1> sblaster.irq:
   499                              <1> 	cli
   500                              <1> 	pusha
   501                              <1> 	cmp byte [SoundBlaster], 1
   502                              <1> 	je near sblaster.cont
   503                              <1> 	jmp handled2
   504                              <1> %endif
   505                              <1> 	
   506                              <1> timekeeper:
   507 00000303 50                  <1> 	push eax
   508 00000304 A1[47020000]        <1> 	mov eax, [timenanoseconds]
   509 00000309 0305[3E020000]      <1> 	add eax, [timeinterval]
   510 0000030F 3D00CA9A3B          <1> 	cmp eax, 1000000000
   511 00000314 720B                <1> 	jb nonanosecondrollover
   512 00000316 FF05[43020000]      <1> 	inc dword [timeseconds]
   513 0000031C 2D00CA9A3B          <1> 	sub eax, 1000000000
   514                              <1> 	%ifdef gui.time
   515                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   516                              <1> 		cmp byte [guion], 1
   517                              <1> 		jne nonanosecondrollover
   518                              <1> 		cmp dword [dragging], 0
   519                              <1> 		jne nonanosecondrollover
   520                              <1> 		pusha
   521                              <1> 		call guitime
   522                              <1> 		popa
   523                              <1> 	%endif
   524                              <1> nonanosecondrollover:
   525 00000321 A3[47020000]        <1> 	mov [timenanoseconds], eax
   526 00000326 58                  <1> 	pop eax
   527 00000327 C3                  <1> 	ret
   528                              <1> 	
   529                              <1> handled2:
   530 00000328 61                  <1> 	popa
   531                              <1> handled3:
   532 00000329 FB                  <1> 	sti
   533                              <1> handled:
   534 0000032A 50                  <1> 	push eax
   535 0000032B B020                <1> 	mov al, 0x20
   536 0000032D E620                <1> 	out 0x20, al
   537 0000032F 58                  <1> 	pop eax
   538 00000330 CF                  <1> 	iret
   539                              <1> handled4:
   540 00000331 50                  <1> 	push eax
   541 00000332 B020                <1> 	mov al, 0x20
   542 00000334 E6A0                <1> 	out 0xA0, al
   543 00000336 E620                <1> 	out 0x20, al
   544 00000338 58                  <1> 	pop eax
   545 00000339 CF                  <1> 	iret
   546                              <1> [BITS 16]
   547                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   548                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   549                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   550 0000033A 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   551 0000033C 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   552                              <1> 
   553 00000340 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   554 00000342 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   555                              <1> 
   556                              <1> 
   557 00000346 0000                <1> gdt:	dw 0			; limit 15:0
   558 00000348 0000                <1> 	dw 0			; base 15:0
   559 0000034A 00                  <1> 	db 0			; base 23:16
   560 0000034B 00                  <1> 	db 0			; type
   561 0000034C 00                  <1> 	db 0			; limit 19:16, flags
   562 0000034D 00                  <1> 	db 0			; base 31:24
   563                              <1> ; linear data segment descriptor
   564                              <1> LINEAR_SEL	equ	$-gdt
   565 0000034E FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   566 00000350 0000                <1> 	dw 0			; base for this one is always 0
   567 00000352 00                  <1> 	db 0
   568 00000353 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   569 00000354 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   570 00000355 00                  <1> 	db 0
   571                              <1> STACK_SEL	equ $-gdt
   572 00000356 0200                <1> gdts:	dw 2;(stackend)/4096
   573 00000358 0000                <1> 	dw 0
   574 0000035A 00                  <1> 	db 0
   575 0000035B 92                  <1> 	db 0x92
   576 0000035C CF                  <1> 	db 0xCF
   577 0000035D 00                  <1> 	db 0
   578                              <1> ; code segment descriptor
   579                              <1> SYS_CODE_SEL	equ	$-gdt
   580 0000035E FFFF                <1> gdt2:	dw 0xFFFF
   581 00000360 0000                <1> 	dw 0			; (base gets set above)
   582 00000362 00                  <1> 	db 0
   583 00000363 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   584 00000364 CF                  <1> 	db 0xCF
   585 00000365 00                  <1> 	db 0
   586                              <1> ; data segment descriptor
   587                              <1> SYS_DATA_SEL	equ	$-gdt
   588 00000366 FFFF                <1> gdt3:	dw 0xFFFF
   589 00000368 0000                <1> 	dw 0			; (base gets set above)
   590 0000036A 00                  <1> 	db 0
   591 0000036B 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   592 0000036C CF                  <1> 	db 0xCF
   593 0000036D 00                  <1> 	db 0
   594                              <1> NEW_CODE_SEL	equ	$-gdt
   595 0000036E FFFF                <1> gdt4:	dw 0xFFFF
   596 00000370 0000                <1> 	dw 0			; (base gets set above)
   597 00000372 00                  <1> 	db 0
   598 00000373 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   599 00000374 CF                  <1> 	db 0xCF
   600 00000375 00                  <1> 	db 0
   601                              <1> ; data segment descriptor
   602                              <1> NEW_DATA_SEL	equ	$-gdt
   603 00000376 FFFF                <1> gdt5:	dw 0xFFFF
   604 00000378 0000                <1> 	dw 0			; (base gets set above)
   605 0000037A 00                  <1> 	db 0
   606 0000037B 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   607 0000037C CF                  <1> 	db 0xCF
   608 0000037D 00                  <1> 	db 0
   609                              <1> V8086_CODE_SEL	equ $-gdt
   610 0000037E FFFF                <1> gdtv8086: dw 0xFFFF
   611 00000380 0000                <1> 	dw 0
   612 00000382 00                  <1> 	db 0
   613 00000383 9A                  <1> 	db 0x9A
   614 00000384 8F                  <1> 	db 0x8F
   615 00000385 00                  <1> 	db 0
   616                              <1> V8086_DATA_SEL	equ $-gdt
   617 00000386 FFFF                <1> gdtv80862: dw 0xFFFF
   618 00000388 0000                <1> 	dw 0
   619 0000038A 00                  <1> 	db 0
   620 0000038B 92                  <1> 	db 0x92
   621 0000038C 8F                  <1> 	db 0x8F
   622 0000038D 00                  <1> 	db 0
   623                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   624 0000038E 0001                <1> gdtdos:	dw 256	;give it 1 MB
   625 00000390 0000                <1> 	dw 0
   626 00000392 00                  <1> 	db 0
   627 00000393 9A                  <1> 	db 0x9A
   628 00000394 8F                  <1> 	db 0x8F ;16 bit
   629 00000395 00                  <1> 	db 0
   630                              <1> DOS_DATA_SEL 	equ $-gdt
   631 00000396 0001                <1> gdtdos2:	dw 256
   632 00000398 0000                <1> 	dw 0
   633 0000039A 00                  <1> 	db 0
   634 0000039B 92                  <1> 	db 0x92
   635 0000039C 8F                  <1> 	db 0x8F ;16 bit
   636 0000039D 00                  <1> 	db 0
   637                              <1> gdt_end:
   638                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   639                              <1> ;	interrupt descriptor table (IDT)
   640                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   641                              <1> ; 32 reserved interrupts:
   642                              <1> idt:	
   643                              <1> %assign i 0
   644                              <1> %rep    8
   645                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   646                              <1> %assign i i+1
   647                              <1> %endrep
   648 0000039E [B60C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   649                              <2> %assign i i+1
   650 000003A6 [C20C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   651                              <2> %assign i i+1
   652 000003AE [CE0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   653                              <2> %assign i i+1
   654 000003B6 [DA0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   655                              <2> %assign i i+1
   656 000003BE [E60C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   657                              <2> %assign i i+1
   658 000003C6 [F20C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   659                              <2> %assign i i+1
   660 000003CE [FE0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   661                              <2> %assign i i+1
   662 000003D6 [0A0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   663                              <2> %assign i i+1
   664 000003DE [160D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   665                              <1> %assign i 9
   666                              <1> %rep    23
   667                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   668                              <1> %assign i i+1
   669                              <1> %endrep
   670 000003E6 [220D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i i+1
   672 000003EE [2E0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i i+1
   674 000003F6 [3A0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i i+1
   676 000003FE [460D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i i+1
   678 00000406 [520D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i i+1
   680 0000040E [5E0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i i+1
   682 00000416 [6A0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i i+1
   684 0000041E [760D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i i+1
   686 00000426 [820D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i i+1
   688 0000042E [8E0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i i+1
   690 00000436 [9A0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i i+1
   692 0000043E [A60D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i i+1
   694 00000446 [B20D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i i+1
   696 0000044E [BE0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i i+1
   698 00000456 [CA0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i i+1
   700 0000045E [D60D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i i+1
   702 00000466 [E20D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i i+1
   704 0000046E [EE0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   705                              <2> %assign i i+1
   706 00000476 [FA0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   707                              <2> %assign i i+1
   708 0000047E [060E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   709                              <2> %assign i i+1
   710 00000486 [120E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   711                              <2> %assign i i+1
   712 0000048E [1E0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   713                              <2> %assign i i+1
   714 00000496 [2A0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   715                              <2> %assign i i+1
   716 0000049E [3C26]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   717 000004A6 [4026]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   718                              <1> %assign i 0x22
   719                              <1> %rep 14
   720                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   721                              <1> %assign i +1
   722                              <1> %endrep
   723 000004AE [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i +1
   725 000004B6 [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i +1
   727 000004BE [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i +1
   729 000004C6 [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i +1
   731 000004CE [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i +1
   733 000004D6 [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i +1
   735 000004DE [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i +1
   737 000004E6 [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i +1
   739 000004EE [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   740                              <2> %assign i +1
   741 000004F6 [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   742                              <2> %assign i +1
   743 000004FE [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   744                              <2> %assign i +1
   745 00000506 [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   746                              <2> %assign i +1
   747 0000050E [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   748                              <2> %assign i +1
   749 00000516 [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   750                              <2> %assign i +1
   751                              <1> ;INT 30h for os use and 3rd party use:
   752 0000051E [801A]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   753                              <1> %assign i 0x31
   754                              <1> %rep 15
   755                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   756                              <1> %assign i +1
   757                              <1> %endrep
   758 00000526 [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   759                              <2> %assign i +1
   760 0000052E [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   761                              <2> %assign i +1
   762 00000536 [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   763                              <2> %assign i +1
   764 0000053E [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   765                              <2> %assign i +1
   766 00000546 [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   767                              <2> %assign i +1
   768 0000054E [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 00000556 [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772 0000055E [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   773                              <2> %assign i +1
   774 00000566 [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   775                              <2> %assign i +1
   776 0000056E [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   777                              <2> %assign i +1
   778 00000576 [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   779                              <2> %assign i +1
   780 0000057E [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   781                              <2> %assign i +1
   782 00000586 [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   783                              <2> %assign i +1
   784 0000058E [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   785                              <2> %assign i +1
   786 00000596 [2A03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   787                              <2> %assign i +1
   788                              <1> ;and here we are at 0x40
   789                              <1> ;here are all the irq's
   790 0000059E [6F02]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   791 000005A6 [2A03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   792 000005AE [2A03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   793 000005B6 [2A03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   794 000005BE [2A03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   795                              <1> 	%ifdef sound.included
   796                              <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   797                              <1> 	%else
   798 000005C6 [2A03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   799                              <1> 	%endif
   800 000005CE [2A03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   801 000005D6 [2A03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   802 000005DE [FE02]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   803 000005E6 [3103]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   804 000005EE [3103]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   805                              <1> 	%ifdef rtl8139.included
   806                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   807                              <1> 	%else
   808 000005F6 [3103]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   809                              <1> 	%endif
   810 000005FE [3103]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   811 00000606 [3103]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   812 0000060E [3103]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   813 00000616 [3103]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   814                              <1> ;This brings me up to 0x50
   815                              <1> %assign i 0x50
   816                              <1> %rep 176
   817                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   818                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   819                              <1> %assign i +1
   820                              <1> %endrep
   821 0000061E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   822                              <2> 
   823                              <2> %assign i +1
   824 00000626 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   825                              <2> 
   826                              <2> %assign i +1
   827 0000062E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   828                              <2> 
   829                              <2> %assign i +1
   830 00000636 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   831                              <2> 
   832                              <2> %assign i +1
   833 0000063E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   834                              <2> 
   835                              <2> %assign i +1
   836 00000646 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   837                              <2> 
   838                              <2> %assign i +1
   839 0000064E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   840                              <2> 
   841                              <2> %assign i +1
   842 00000656 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   843                              <2> 
   844                              <2> %assign i +1
   845 0000065E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   846                              <2> 
   847                              <2> %assign i +1
   848 00000666 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   849                              <2> 
   850                              <2> %assign i +1
   851 0000066E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   852                              <2> 
   853                              <2> %assign i +1
   854 00000676 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   855                              <2> 
   856                              <2> %assign i +1
   857 0000067E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   858                              <2> 
   859                              <2> %assign i +1
   860 00000686 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   861                              <2> 
   862                              <2> %assign i +1
   863 0000068E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   864                              <2> 
   865                              <2> %assign i +1
   866 00000696 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 0000069E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 000006A6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 000006AE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 000006B6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 000006BE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 000006C6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 000006CE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 000006D6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 000006DE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 000006E6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 000006EE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 000006F6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 000006FE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 00000706 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 0000070E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 00000716 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 0000071E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 00000726 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 0000072E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 00000736 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 0000073E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 00000746 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 0000074E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 00000756 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 0000075E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 00000766 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 0000076E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 00000776 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 0000077E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 00000786 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 0000078E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 00000796 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 0000079E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 000007A6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 000007AE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 000007B6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 000007BE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 000007C6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 000007CE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 000007D6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 000007DE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 000007E6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 000007EE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 000007F6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 000007FE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 00000806 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 0000080E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 00000816 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 0000081E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 00000826 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 0000082E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 00000836 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 0000083E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000846 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 0000084E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 00000856 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 0000085E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 00000866 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 0000086E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 00000876 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 0000087E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 00000886 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 0000088E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 00000896 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 0000089E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 000008A6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 000008AE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 000008B6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 000008BE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 000008C6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 000008CE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 000008D6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 000008DE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 000008E6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 000008EE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 000008F6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 000008FE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 00000906 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 0000090E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 00000916 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 0000091E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000926 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 0000092E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 00000936 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 0000093E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000946 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 0000094E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 00000956 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 0000095E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 00000966 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 0000096E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 00000976 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 0000097E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 00000986 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 0000098E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 00000996 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 0000099E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 000009A6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 000009AE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 000009B6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 000009BE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 000009C6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 000009CE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 000009D6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 000009DE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 000009E6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 000009EE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 000009F6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 000009FE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 00000A06 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 00000A0E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 00000A16 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 00000A1E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000A26 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000A2E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000A36 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000A3E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000A46 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000A4E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000A56 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000A5E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000A66 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000A6E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000A76 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000A7E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000A86 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000A8E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000A96 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000A9E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000AA6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000AAE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000AB6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000ABE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000AC6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000ACE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000AD6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000ADE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000AE6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000AEE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286 00000AF6 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1287                              <2> 
  1288                              <2> %assign i +1
  1289 00000AFE [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1290                              <2> 
  1291                              <2> %assign i +1
  1292 00000B06 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1293                              <2> 
  1294                              <2> %assign i +1
  1295 00000B0E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1296                              <2> 
  1297                              <2> %assign i +1
  1298 00000B16 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1299                              <2> 
  1300                              <2> %assign i +1
  1301 00000B1E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1302                              <2> 
  1303                              <2> %assign i +1
  1304 00000B26 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1305                              <2> 
  1306                              <2> %assign i +1
  1307 00000B2E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1308                              <2> 
  1309                              <2> %assign i +1
  1310 00000B36 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1311                              <2> 
  1312                              <2> %assign i +1
  1313 00000B3E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1314                              <2> 
  1315                              <2> %assign i +1
  1316 00000B46 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1317                              <2> 
  1318                              <2> %assign i +1
  1319 00000B4E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1320                              <2> 
  1321                              <2> %assign i +1
  1322 00000B56 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1323                              <2> 
  1324                              <2> %assign i +1
  1325 00000B5E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1326                              <2> 
  1327                              <2> %assign i +1
  1328 00000B66 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1329                              <2> 
  1330                              <2> %assign i +1
  1331 00000B6E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1332                              <2> 
  1333                              <2> %assign i +1
  1334 00000B76 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1335                              <2> 
  1336                              <2> %assign i +1
  1337 00000B7E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1338                              <2> 
  1339                              <2> %assign i +1
  1340 00000B86 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1341                              <2> 
  1342                              <2> %assign i +1
  1343 00000B8E [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1344                              <2> 
  1345                              <2> %assign i +1
  1346 00000B96 [2A03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1347                              <2> 
  1348                              <2> %assign i +1
  1349                              <1> idt_end:
  1350                              <1> [BITS 32]
  1351                                  	%include "source/realmode.asm"
  1352                              <1> realmode:	;make sure the real mode program's address is in realmodeptr
  1353                              <1> 
  1354 00000B9E FA                  <1> 	cli
  1355 00000B9F A3[AC0C0000]        <1> 	mov [realmodeeax], eax
  1356 00000BA4 891D[A80C0000]      <1> 	mov [realmodeebx], ebx
  1357 00000BAA 8925[9A0C0000]      <1> 	mov [pmodeesp], esp
  1358                              <1> 
  1359 00000BB0 BB[A40C0000]        <1> 	mov ebx, cr0old
  1360                              <1> rmcopytofirstmbyte:
  1361 00000BB5 8B03                <1> 	mov eax, [ebx]
  1362 00000BB7 658903              <1> 	mov [gs:ebx], eax
  1363 00000BBA 81C304000000        <1> 	add ebx, 4
  1364 00000BC0 81FB[B00C0000]      <1> 	cmp ebx, realmodeptr
  1365 00000BC6 76ED                <1> 	jbe rmcopytofirstmbyte
  1366                              <1> 
  1367 00000BC8 EA[CF0B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1368                              <1> 
  1369                              <1> [BITS 16]
  1370                              <1> protected16bit:
  1371 00000BCF B84000              <1> 	mov ax, V8086_DATA_SEL
  1372 00000BD2 8ED8                <1> 	mov ds, ax
  1373 00000BD4 8EC0                <1> 	mov es, ax
  1374 00000BD6 8EE0                <1> 	mov fs, ax
  1375 00000BD8 8EE8                <1> 	mov gs, ax
  1376 00000BDA 8ED0                <1> 	mov ss, ax
  1377 00000BDC 66BC[7C690300]      <1> 	mov esp, stackend
  1378 00000BE2 0F20C0              <1> 	mov eax, cr0
  1379 00000BE5 66A3[A40C]          <1> 	mov [cr0old], eax
  1380 00000BE9 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1381 00000BEF 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1382 00000BF2 EA[F70B]0010        <1> 	jmp 0x1000:inrealmode
  1383                              <1> 
  1384                              <1> inrealmode:
  1385 00000BF7 8CC8                <1> 	mov ax, cs
  1386 00000BF9 8ED8                <1> 	mov ds, ax
  1387 00000BFB 8EC0                <1> 	mov es, ax
  1388 00000BFD 8EE0                <1> 	mov fs, ax
  1389 00000BFF 8EE8                <1> 	mov gs, ax
  1390 00000C01 8ED0                <1> 	mov ss, ax
  1391 00000C03 BC[7C69]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1392                              <1> 	
  1393 00000C06 B011                <1> 	mov al, 0x11
  1394 00000C08 E620                <1> 	out 0x20, al
  1395 00000C0A E6A0                <1> 	out 0xA0, al
  1396 00000C0C B008                <1> 	mov al, 0x8		;interrupt for master
  1397 00000C0E E621                <1> 	out 0x21, al
  1398 00000C10 B070                <1> 	mov al, 0x70	;interrupt for slave
  1399 00000C12 E6A1                <1> 	out 0xA1, al
  1400 00000C14 B004                <1> 	mov al, 4
  1401 00000C16 E621                <1> 	out 0x21, al
  1402 00000C18 B002                <1> 	mov al, 2
  1403 00000C1A E6A1                <1> 	out 0xA1, al
  1404 00000C1C B001                <1> 	mov al, 0x1
  1405 00000C1E E621                <1> 	out 0x21, al
  1406 00000C20 B001                <1> 	mov al, 0x1
  1407 00000C22 E6A1                <1> 	out 0xA1, al
  1408                              <1> 	
  1409 00000C24 0F011E[9E0C]        <1> 	lidt [idt_real]
  1410 00000C29 FB                  <1> 	sti
  1411                              <1> 
  1412 00000C2A 66A1[AC0C]          <1> 	mov eax, [realmodeeax]
  1413 00000C2E 668B1E[A80C]        <1> 	mov ebx, [realmodeebx]
  1414                              <1> 
  1415 00000C33 FF16[B00C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1416                              <1> 
  1417 00000C37 66A3[AC0C]          <1> 	mov [realmodeeax], eax
  1418 00000C3B 66891E[A80C]        <1> 	mov [realmodeebx], ebx
  1419                              <1> 
  1420 00000C40 FA                  <1> 	cli
  1421 00000C41 0F0116[3A03]        <1> 	lgdt [gdtr]
  1422 00000C46 0F011E[4003]        <1> 	lidt [idtr]
  1423 00000C4B 0F20C0              <1> 	mov eax, cr0
  1424 00000C4E 0C01                <1> 	or al, 1
  1425 00000C50 0F22C0              <1> 	mov cr0,eax
  1426 00000C53 EA[580C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1427                              <1> 
  1428                              <1> [BITS 32]
  1429                              <1> returntopmode:
  1430 00000C58 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1431 00000C5C 8ED8                <1> 	mov ds, ax
  1432 00000C5E 8EC0                <1> 	mov es, ax
  1433 00000C60 8EE0                <1> 	mov fs, ax
  1434 00000C62 8ED0                <1> 	mov ss, ax
  1435 00000C64 8B25[9A0C0000]      <1> 	mov esp, [pmodeesp]
  1436 00000C6A 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1437 00000C6E 8EE8                <1> 	mov gs, ax
  1438                              <1> 
  1439 00000C70 BB[A40C0000]        <1> 	mov ebx, cr0old
  1440                              <1> rmcopyfromfirstmbyte:
  1441 00000C75 658B03              <1> 	mov eax, [gs:ebx]
  1442 00000C78 8903                <1> 	mov [ebx], eax
  1443 00000C7A 81C304000000        <1> 	add ebx, 4
  1444 00000C80 81FB[B00C0000]      <1> 	cmp ebx, realmodeptr
  1445 00000C86 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1446                              <1> 
  1447 00000C88 E852430000          <1> 	call initialize.pic ;reset irq's and masks
  1448 00000C8D FB                  <1> 	sti
  1449 00000C8E A1[AC0C0000]        <1> 	mov eax, [realmodeeax]
  1450 00000C93 8B1D[A80C0000]      <1> 	mov ebx, [realmodeebx]
  1451 00000C99 C3                  <1> 	ret
  1452                              <1> 	
  1453 00000C9A 00000000            <1> pmodeesp dd 0
  1454                              <1> idt_real:
  1455 00000C9E FF03                <1> 	dw 0x3FF
  1456 00000CA0 00000000            <1> 	dd 0
  1457 00000CA4 00000000            <1> cr0old dd 0
  1458 00000CA8 00000000            <1> realmodeebx dd 0
  1459 00000CAC 00000000            <1> realmodeeax dd 0
  1460 00000CB0 0000                <1> realmodeptr dw 0
  1461 00000CB2 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1462                                  [BITS 32]
  1463                                      %include "source/exception.asm"
  1464                              <1> %ifdef exceptions.included
  1465                              <1> unhand:	
  1466                              <1> 	%assign i 0
  1467                              <1> 	%rep 32
  1468                              <1> 	mov byte [intprob], i
  1469                              <1> 	jmp unhand2
  1470                              <1> 	%assign i i+1
  1471                              <1> 	%endrep
  1472 00000CB6 C605[3A100000]00    <2>  mov byte [intprob], i
  1473 00000CBD E974010000          <2>  jmp unhand2
  1474                              <2>  %assign i i+1
  1475 00000CC2 C605[3A100000]01    <2>  mov byte [intprob], i
  1476 00000CC9 E968010000          <2>  jmp unhand2
  1477                              <2>  %assign i i+1
  1478 00000CCE C605[3A100000]02    <2>  mov byte [intprob], i
  1479 00000CD5 E95C010000          <2>  jmp unhand2
  1480                              <2>  %assign i i+1
  1481 00000CDA C605[3A100000]03    <2>  mov byte [intprob], i
  1482 00000CE1 E950010000          <2>  jmp unhand2
  1483                              <2>  %assign i i+1
  1484 00000CE6 C605[3A100000]04    <2>  mov byte [intprob], i
  1485 00000CED E944010000          <2>  jmp unhand2
  1486                              <2>  %assign i i+1
  1487 00000CF2 C605[3A100000]05    <2>  mov byte [intprob], i
  1488 00000CF9 E938010000          <2>  jmp unhand2
  1489                              <2>  %assign i i+1
  1490 00000CFE C605[3A100000]06    <2>  mov byte [intprob], i
  1491 00000D05 E92C010000          <2>  jmp unhand2
  1492                              <2>  %assign i i+1
  1493 00000D0A C605[3A100000]07    <2>  mov byte [intprob], i
  1494 00000D11 E920010000          <2>  jmp unhand2
  1495                              <2>  %assign i i+1
  1496 00000D16 C605[3A100000]08    <2>  mov byte [intprob], i
  1497 00000D1D E914010000          <2>  jmp unhand2
  1498                              <2>  %assign i i+1
  1499 00000D22 C605[3A100000]09    <2>  mov byte [intprob], i
  1500 00000D29 E908010000          <2>  jmp unhand2
  1501                              <2>  %assign i i+1
  1502 00000D2E C605[3A100000]0A    <2>  mov byte [intprob], i
  1503 00000D35 E9FC000000          <2>  jmp unhand2
  1504                              <2>  %assign i i+1
  1505 00000D3A C605[3A100000]0B    <2>  mov byte [intprob], i
  1506 00000D41 E9F0000000          <2>  jmp unhand2
  1507                              <2>  %assign i i+1
  1508 00000D46 C605[3A100000]0C    <2>  mov byte [intprob], i
  1509 00000D4D E9E4000000          <2>  jmp unhand2
  1510                              <2>  %assign i i+1
  1511 00000D52 C605[3A100000]0D    <2>  mov byte [intprob], i
  1512 00000D59 E9D8000000          <2>  jmp unhand2
  1513                              <2>  %assign i i+1
  1514 00000D5E C605[3A100000]0E    <2>  mov byte [intprob], i
  1515 00000D65 E9CC000000          <2>  jmp unhand2
  1516                              <2>  %assign i i+1
  1517 00000D6A C605[3A100000]0F    <2>  mov byte [intprob], i
  1518 00000D71 E9C0000000          <2>  jmp unhand2
  1519                              <2>  %assign i i+1
  1520 00000D76 C605[3A100000]10    <2>  mov byte [intprob], i
  1521 00000D7D E9B4000000          <2>  jmp unhand2
  1522                              <2>  %assign i i+1
  1523 00000D82 C605[3A100000]11    <2>  mov byte [intprob], i
  1524 00000D89 E9A8000000          <2>  jmp unhand2
  1525                              <2>  %assign i i+1
  1526 00000D8E C605[3A100000]12    <2>  mov byte [intprob], i
  1527 00000D95 E99C000000          <2>  jmp unhand2
  1528                              <2>  %assign i i+1
  1529 00000D9A C605[3A100000]13    <2>  mov byte [intprob], i
  1530 00000DA1 E990000000          <2>  jmp unhand2
  1531                              <2>  %assign i i+1
  1532 00000DA6 C605[3A100000]14    <2>  mov byte [intprob], i
  1533 00000DAD E984000000          <2>  jmp unhand2
  1534                              <2>  %assign i i+1
  1535 00000DB2 C605[3A100000]15    <2>  mov byte [intprob], i
  1536 00000DB9 E978000000          <2>  jmp unhand2
  1537                              <2>  %assign i i+1
  1538 00000DBE C605[3A100000]16    <2>  mov byte [intprob], i
  1539 00000DC5 E96C000000          <2>  jmp unhand2
  1540                              <2>  %assign i i+1
  1541 00000DCA C605[3A100000]17    <2>  mov byte [intprob], i
  1542 00000DD1 E960000000          <2>  jmp unhand2
  1543                              <2>  %assign i i+1
  1544 00000DD6 C605[3A100000]18    <2>  mov byte [intprob], i
  1545 00000DDD E954000000          <2>  jmp unhand2
  1546                              <2>  %assign i i+1
  1547 00000DE2 C605[3A100000]19    <2>  mov byte [intprob], i
  1548 00000DE9 E948000000          <2>  jmp unhand2
  1549                              <2>  %assign i i+1
  1550 00000DEE C605[3A100000]1A    <2>  mov byte [intprob], i
  1551 00000DF5 E93C000000          <2>  jmp unhand2
  1552                              <2>  %assign i i+1
  1553 00000DFA C605[3A100000]1B    <2>  mov byte [intprob], i
  1554 00000E01 E930000000          <2>  jmp unhand2
  1555                              <2>  %assign i i+1
  1556 00000E06 C605[3A100000]1C    <2>  mov byte [intprob], i
  1557 00000E0D E924000000          <2>  jmp unhand2
  1558                              <2>  %assign i i+1
  1559 00000E12 C605[3A100000]1D    <2>  mov byte [intprob], i
  1560 00000E19 E918000000          <2>  jmp unhand2
  1561                              <2>  %assign i i+1
  1562 00000E1E C605[3A100000]1E    <2>  mov byte [intprob], i
  1563 00000E25 E90C000000          <2>  jmp unhand2
  1564                              <2>  %assign i i+1
  1565 00000E2A C605[3A100000]1F    <2>  mov byte [intprob], i
  1566 00000E31 E900000000          <2>  jmp unhand2
  1567                              <2>  %assign i i+1
  1568                              <1> unhand2:
  1569 00000E36 FA                  <1> 	cli
  1570 00000E37 1E                  <1> 	push ds
  1571 00000E38 06                  <1> 	push es
  1572 00000E39 0FA0                <1> 	push fs
  1573 00000E3B 0FA8                <1> 	push gs
  1574 00000E3D 16                  <1> 	push ss
  1575 00000E3E 60                  <1> 	pushad
  1576                              <1> %ifdef gui.included
  1577                              <1> 	cmp byte [guion], 0
  1578                              <1> 	je near noguiunhandstuff
  1579                              <1> 	mov word [locunhandy], 8
  1580                              <1> 	mov word [locunhandx], 8
  1581                              <1> 	mov bx, [background]
  1582                              <1> 	mov [backgroundcache], bx
  1583                              <1> 	mov byte [mousedisabled],1
  1584                              <1> 	mov bx, 1111100000000000b
  1585                              <1> 	mov [background], bx
  1586                              <1> noguiunhandstuff:
  1587                              <1> %endif
  1588 00000E3F 89E6                <1> 	mov esi, esp
  1589 00000E41 8935[28100000]      <1> 	mov [espfirst], esi
  1590 00000E47 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1591 00000E4D 8935[24100000]      <1> 	mov [esploc], esi
  1592 00000E53 BE[49100000]        <1> 	mov esi, unhandmsg
  1593 00000E58 8935[2C100000]      <1> 	mov [esiloc], esi
  1594 00000E5E 31C9                <1> 	xor ecx, ecx
  1595 00000E60 8A0D[3A100000]      <1> 	mov cl, [intprob]
  1596 00000E66 BB[18140000]        <1> 	mov ebx, errortypes
  1597 00000E6B C1E102              <1> 	shl ecx, 2
  1598 00000E6E 01CB                <1> 	add ebx, ecx
  1599 00000E70 81FB[58140000]      <1> 	cmp ebx, errortypesend
  1600 00000E76 7205                <1> 	jb gooderrortype
  1601 00000E78 BB[58140000]        <1> 	mov ebx, errortypesend
  1602                              <1> gooderrortype:
  1603 00000E7D 8B33                <1> 	mov esi, [ebx]
  1604                              <1> %ifdef gui.included
  1605                              <1> 	cmp byte [guion], 0
  1606                              <1> 	je near errortext
  1607                              <1> 	mov cx, [locunhandy]
  1608                              <1> 	mov dx, [locunhandx]
  1609                              <1> 	mov ax, 1
  1610                              <1> 	xor bx, bx
  1611                              <1> 	call showstring2
  1612                              <1> 	mov [locunhandy], cx
  1613                              <1> 	mov [locunhandx], dx
  1614                              <1> 	jmp errortextdone
  1615                              <1> %endif
  1616                              <1> errortext:
  1617 00000E7F E8370D0000          <1> 	call print		;;get the error message and print it
  1618                              <1> errortextdone:
  1619 00000E84 31C9                <1> 	xor ecx, ecx
  1620 00000E86 8A0D[3A100000]      <1> 	mov cl, [intprob]
  1621 00000E8C E862010000          <1> 	call expdump
  1622                              <1> dumpstack:
  1623 00000E91 8B35[24100000]      <1> 	mov esi, [esploc]
  1624 00000E97 39E6                <1> 	cmp esi, esp
  1625 00000E99 7219                <1> 	jb donedump
  1626 00000E9B 368B0E              <1> 	mov ecx, [ss:esi]
  1627 00000E9E 81EE04000000        <1> 	sub esi, 4
  1628 00000EA4 8935[24100000]      <1> 	mov [esploc], esi
  1629 00000EAA E844010000          <1> 	call expdump
  1630 00000EAF E9DDFFFFFF          <1> 	jmp dumpstack
  1631                              <1> donedump:
  1632 00000EB4 0F20C1              <1> 	mov ecx, cr0
  1633 00000EB7 E837010000          <1> 	call expdump
  1634 00000EBC 0F20D1              <1> 	mov ecx, cr2
  1635 00000EBF E82F010000          <1> 	call expdump
  1636 00000EC4 0F20D9              <1> 	mov ecx, cr3
  1637 00000EC7 E827010000          <1> 	call expdump
  1638 00000ECC 0F20E1              <1> 	mov ecx, cr4
  1639 00000ECF E81F010000          <1> 	call expdump
  1640 00000ED4 0F00C9              <1> 	str ecx
  1641 00000ED7 E817010000          <1> 	call expdump
  1642 00000EDC 0F010D[43100000]    <1> 	sidt [igdtcache]
  1643 00000EE3 8B0D[45100000]      <1> 	mov ecx, [igdtcache + 2]
  1644 00000EE9 E805010000          <1> 	call expdump
  1645 00000EEE 0F0105[43100000]    <1> 	sgdt [igdtcache]
  1646 00000EF5 8B0D[45100000]      <1> 	mov ecx, [igdtcache + 2]
  1647 00000EFB E8F3000000          <1> 	call expdump
  1648 00000F00 0F00C1              <1> 	sldt ecx
  1649 00000F03 E8EB000000          <1> 	call expdump
  1650 00000F08 8B35[24100000]      <1> 	mov esi, [esploc]
  1651 00000F0E 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1652 00000F13 81C710000000        <1> 	add edi, 16
  1653 00000F19 893D[3F100000]      <1> 	mov [codelocend], edi
  1654 00000F1F 81EF20000000        <1> 	sub edi, 32
  1655                              <1> dumpcodeloop:
  1656 00000F25 893D[3B100000]      <1> 	mov [codeloc], edi
  1657 00000F2B 8B0F                <1> 	mov ecx, [edi]
  1658 00000F2D E8C1000000          <1> 	call expdump
  1659 00000F32 8B3D[3B100000]      <1> 	mov edi, [codeloc]
  1660 00000F38 81C704000000        <1> 	add edi, 4
  1661 00000F3E 3B3D[3F100000]      <1> 	cmp edi, [codelocend]
  1662 00000F44 72DF                <1> 	jb dumpcodeloop
  1663 00000F46 BE[840F0000]        <1> 	mov esi, backtoosmsg
  1664                              <1> %ifdef gui.included
  1665                              <1> 	cmp byte [guion], 0
  1666                              <1> 	je backtomsg
  1667                              <1> guibacktomsg:
  1668                              <1> 	mov dx, [locunhandx]
  1669                              <1> 	mov cx, [locunhandy]
  1670                              <1> 	mov ax, 1
  1671                              <1> 	xor bx, bx
  1672                              <1> 	call showstring2
  1673                              <1> 	jmp backtomsgdone
  1674                              <1> backtomsg:
  1675                              <1> %endif
  1676 00000F4B E86B0C0000          <1> 	call print
  1677                              <1> backtomsgdone:
  1678 00000F50 30C0                <1> 	xor al, al
  1679 00000F52 E87F120000          <1> 	call rdcharint
  1680 00000F57 803D[3A100000]03    <1> 	cmp byte [intprob], 3
  1681 00000F5E 7511                <1> 	jne nodebugint
  1682                              <1> %ifdef gui.included
  1683                              <1> 	cmp byte [guion], 0
  1684                              <1> 	je nodebuggui
  1685                              <1> 	mov bx, [backgroundcache]
  1686                              <1> 	mov [background], bx
  1687                              <1> 	xor bx, bx
  1688                              <1> 	mov byte [mousedisabled], 0
  1689                              <1> 	call guiclear
  1690                              <1> 	call reloadallgraphics
  1691                              <1> 	call termcopy
  1692                              <1> nodebuggui:
  1693                              <1> %endif
  1694 00000F60 8B35[28100000]      <1> 	mov esi, [espfirst]
  1695 00000F66 89F4                <1> 	mov esp, esi
  1696 00000F68 61                  <1> 	popad
  1697 00000F69 17                  <1> 	pop ss
  1698 00000F6A 0FA9                <1> 	pop gs
  1699 00000F6C 0FA1                <1> 	pop fs
  1700 00000F6E 07                  <1> 	pop es
  1701 00000F6F 1F                  <1> 	pop ds
  1702 00000F70 CF                  <1> 	iret
  1703                              <1> nodebugint:
  1704 00000F71 61                  <1> 	popad
  1705 00000F72 17                  <1> 	pop ss
  1706 00000F73 0FA9                <1> 	pop gs
  1707 00000F75 0FA1                <1> 	pop fs
  1708 00000F77 07                  <1> 	pop es
  1709 00000F78 1F                  <1> 	pop ds
  1710 00000F79 81C408000000        <1> 	add esp, 8
  1711                              <1> ;	popf ;pop the cs segment selector into eflags
  1712                              <1> ;	popf ;then pop the flags
  1713                              <1> %ifdef gui.included
  1714                              <1> 	cmp byte [guion], 0
  1715                              <1> 	je returnunhandgui
  1716                              <1> 	mov bx, [backgroundcache]
  1717                              <1> 	mov [background], bx
  1718                              <1> 	xor bx, bx
  1719                              <1> 	mov byte [mousedisabled], 0
  1720                              <1> 	call guiclear
  1721                              <1> 	call reloadallgraphics
  1722                              <1> 	call termcopy
  1723                              <1> %endif
  1724                              <1> returnunhandgui:
  1725 00000F7F E9D4190000          <1> 	jmp nwcmd
  1726 00000F84 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1727 00000F8D 737420616E79207072- <1>
  1728 00000F96 6F626C656D7320696E- <1>
  1729 00000F9F 207468652049737375- <1>
  1730 00000FA8 65732073656374696F- <1>
  1731 00000FB1 6E20617420736F6C6C- <1>
  1732 00000FBA 65726F732E676F6F67- <1>
  1733 00000FC3 6C65636F64652E636F- <1>
  1734 00000FCC 6D0A                <1>
  1735 00000FCE 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1736 00000FD7 206B657920746F2072- <1>
  1737 00000FE0 657475726E20746F20- <1>
  1738 00000FE9 536F6C6C65724F530A- <1>
  1739 00000FF2 00                  <1>
  1740                              <1> expdump:
  1741 00000FF3 8B35[2C100000]      <1> 	mov esi, [esiloc]
  1742 00000FF9 89F7                <1> 	mov edi, esi
  1743 00000FFB 81C70F000000        <1> 	add edi, 15
  1744 00001001 81C604000000        <1> 	add esi, 4
  1745 00001007 893D[2C100000]      <1> 	mov [esiloc], edi
  1746 0000100D 81EF03000000        <1> 	sub edi, 3
  1747 00001013 E8DD1D0000          <1> 	call converthex
  1748 00001018 81EE04000000        <1> 	sub esi, 4
  1749                              <1> %ifdef gui.included
  1750                              <1> 	cmp byte [guion], 0
  1751                              <1> 	je near expdumptext
  1752                              <1> 	mov cx, [locunhandy]
  1753                              <1> 	mov dx, [locunhandx]
  1754                              <1> 	mov ax, 1
  1755                              <1> 	xor bx, bx
  1756                              <1> 	call showstring2
  1757                              <1> 	mov [locunhandy], cx
  1758                              <1> 	mov [locunhandx], dx
  1759                              <1> 	ret
  1760                              <1> %endif
  1761                              <1> expdumptext:
  1762 0000101E E8980B0000          <1> 	call print
  1763 00001023 C3                  <1> 	ret
  1764 00001024 00000000            <1> esploc dd 0
  1765 00001028 00000000            <1> espfirst dd 0
  1766 0000102C 00000000            <1> esiloc dd 0
  1767 00001030 00000000            <1> esiregbuf dd 0
  1768 00001034 0100                <1> locunhandy dw 1
  1769 00001036 0100                <1> locunhandx dw 1
  1770 00001038 0000                <1> backgroundcache dw 0
  1771 0000103A 00                  <1> intprob db 0
  1772 0000103B 00000000            <1> codeloc dd 0
  1773 0000103F 00000000            <1> codelocend dd 0
  1774 00001043 000000000000        <1> igdtcache dw 0,0,0
  1775                              <1> 	unhandmsg:	
  1776 00001049 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1777 00001052 303030FF0A00        <1>
  1778                              <1> unhndrg:
  1779 00001058 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1780 00001061 303030202000<rept>  <1>
  1781 000010C1 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1782 000010CA 303030FF0A00        <1>
  1783 000010D0 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1784 000010D9 303030202000<rept>  <1>
  1785 00001139 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1786 00001142 303030FF0A00        <1>
  1787 00001148 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1788 00001151 303030202000<rept>  <1>
  1789 000011B1 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1790 000011BA 303030FF0A00        <1>
  1791 000011C0 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1792 000011C9 303030202000<rept>  <1>
  1793 00001229 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1794 00001232 303030FF0A00        <1>
  1795                              <1> unhandregs:
  1796 00001238 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1797 00001241 303030202000        <1>
  1798 00001247 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1799 00001250 303030202000        <1>
  1800 00001256 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1801 0000125F 303030FF0A00        <1>
  1802 00001265 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1803 0000126E 303030202000        <1>
  1804 00001274 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1805 0000127D 303030202000        <1>
  1806 00001283 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1807 0000128C 303030202000        <1>
  1808 00001292 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1809 0000129B 303030202000        <1>
  1810 000012A1 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1811 000012AA 303030FF0A00        <1>
  1812 000012B0 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1813 000012B9 303030202000        <1>
  1814 000012BF 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1815 000012C8 303030202000        <1>
  1816 000012CE 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1817 000012D7 303030202000        <1>
  1818 000012DD 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1819 000012E6 303030FF0A00        <1>
  1820 000012EC 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1821 000012F5 303030202000        <1>
  1822 000012FB 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1823 00001304 303030202000        <1>
  1824 0000130A 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1825 00001313 303030202000        <1>
  1826 00001319 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1827 00001322 303030FF0A00        <1>
  1828 00001328 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1829 00001331 303030202000        <1>
  1830 00001337 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1831 00001340 303030202000        <1>
  1832 00001346 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1833 0000134F 303030202000        <1>
  1834 00001355 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1835 0000135E 303030FF0A00        <1>
  1836 00001364 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1837 0000136D 303030202000        <1>
  1838 00001373 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1839 0000137C 303030202000        <1>
  1840 00001382 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1841 0000138B 303030202000        <1>
  1842 00001391 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1843 0000139A 303030FF0A00        <1>
  1844 000013A0 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1845 000013A9 303030202000<rept>  <1>
  1846 000013BE FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1847 000013C7 30303020FF00        <1>
  1848 000013CD FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1849 000013D6 3030305D2000        <1>
  1850 000013DC FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1851 000013E5 303030202000<rept>  <1>
  1852 00001409 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1853 00001412 303030FF0A00        <1>
  1854                              <1> unhandmsgend:
  1855                              <1> 
  1856                              <1> errortypes:
  1857 00001418 [5C140000]          <1> 			dd err0
  1858 0000141C [C5140000]          <1> 			dd err1
  1859 00001420 [26150000]          <1> 			dd err2
  1860 00001424 [7B150000]          <1> 			dd err3
  1861 00001428 [DF150000]          <1> 			dd err4
  1862 0000142C [31160000]          <1> 			dd err5
  1863 00001430 [9B160000]          <1> 			dd err6
  1864 00001434 [03170000]          <1> 			dd err7
  1865 00001438 [4D170000]          <1> 			dd err8
  1866 0000143C [AA170000]          <1> 			dd err9
  1867 00001440 [03180000]          <1> 			dd err10
  1868 00001444 [4E180000]          <1> 			dd err11
  1869 00001448 [9E180000]          <1> 			dd err12
  1870 0000144C [F7180000]          <1> 			dd err13
  1871 00001450 [5A190000]          <1> 			dd err14
  1872 00001454 [96190000]          <1> 			dd err15
  1873                              <1> errortypesend:
  1874 00001458 [211A0000]          <1> 			dd unknownerror
  1875                              <1> 			
  1876 0000145C 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1877 00001465 6279207A65726F3A0A  <1>
  1878 0000146E 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1879 00001477 6C79206C696D2061C3- <1>
  1880 00001480 B778203D20E2889E20- <1>
  1881 00001489 7768656E2061206973- <1>
  1882 00001492 20616E79207265616C- <1>
  1883 0000149B 206E756D6265722E20- <1>
  1884 000014A4 486170707920456173- <1>
  1885 000014AD 746572210A          <1>
  1886 000014B2 202020202020202020- <1> 		db "            x→0",10,0
  1887 000014BB 20202078E28692300A- <1>
  1888 000014C4 00                  <1>
  1889                              <1> 		
  1890 000014C5 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1891 000014CE 65702F427265616B70- <1>
  1892 000014D7 6F696E743A0A        <1>
  1893 000014DD 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1894 000014E6 696E74206661756C74- <1>
  1895 000014EF 2C20627265616B706F- <1>
  1896 000014F8 696E7420747261702C- <1>
  1897 00001501 206F722073696E676C- <1>
  1898 0000150A 652D73746570207472- <1>
  1899 00001513 617020776173207472- <1>
  1900 0000151C 696767657265642E0A- <1>
  1901 00001525 00                  <1>
  1902                              <1> 		
  1903 00001526 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1904 0000152F 6C6520696E74657272- <1>
  1905 00001538 7570743A0A          <1>
  1906 0000153D 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1907 00001546 6520696E7465727275- <1>
  1908 0000154F 707420776173207472- <1>
  1909 00001558 696767657265642074- <1>
  1910 00001561 68617420636F756C64- <1>
  1911 0000156A 206E6F74206265206D- <1>
  1912 00001573 61736B65642E0A00    <1>
  1913                              <1> 		
  1914 0000157B 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1915 00001584 743A0A              <1>
  1916 00001587 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1917 00001590 727275707420697320- <1>
  1918 00001599 7573656420696E2070- <1>
  1919 000015A2 726F6772616D732074- <1>
  1920 000015AB 6F2073686F77207468- <1>
  1921 000015B4 6520737461636B2061- <1>
  1922 000015BD 6E6420726567697374- <1>
  1923 000015C6 65727320616E642063- <1>
  1924 000015CF 616E2062650A        <1>
  1925 000015D5 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1926 000015DE 00                  <1>
  1927                              <1> 		
  1928 000015DF 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1929 000015E8 0A                  <1>
  1930 000015E9 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1931 000015F2 73736F722072616E20- <1>
  1932 000015FB 696E746F20616E2049- <1>
  1933 00001604 4E544F20696E737472- <1>
  1934 0000160D 756374696F6E207769- <1>
  1935 00001616 746820746865206F76- <1>
  1936 0000161F 6572666C6F7720666C- <1>
  1937 00001628 6167207365742E0A00  <1>
  1938                              <1> 		
  1939 00001631 426F756E6473206368- <1> err5	db "Bounds check:",10
  1940 0000163A 65636B3A0A          <1>
  1941 0000163F 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1942 00001648 73736F72207265626F- <1>
  1943 00001651 756E6465642066726F- <1>
  1944 0000165A 6D206120424F554E44- <1>
  1945 00001663 20696E737472756374- <1>
  1946 0000166C 696F6E2072756E206F- <1>
  1947 00001675 6E20616E206F706572- <1>
  1948 0000167E 616E64207468617420- <1>
  1949 00001687 776173206F75740A    <1>
  1950 0000168F 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1951 00001698 2E0A00              <1>
  1952                              <1> 		
  1953 0000169B 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1954 000016A4 70636F64653A0A      <1>
  1955 000016AB 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1956 000016B4 73736F722068617320- <1>
  1957 000016BD 6E6F20696465612077- <1>
  1958 000016C6 686174206974207761- <1>
  1959 000016CF 7320747279696E6720- <1>
  1960 000016D8 746F20657865637574- <1>
  1961 000016E1 652E20446F6E277420- <1>
  1962 000016EA 72756E205353453420- <1>
  1963 000016F3 636F64650A          <1>
  1964 000016F8 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1965 00001701 0A00                <1>
  1966                              <1> 		
  1967 00001703 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1968 0000170C 6F72206E6F74206176- <1>
  1969 00001715 61696C61626C653A0A  <1>
  1970 0000171E 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1971 00001727 206B6E6F7720746865- <1>
  1972 00001730 7920646F6E2774206D- <1>
  1973 00001739 616B652074686F7365- <1>
  1974 00001742 20616E796D6F726521- <1>
  1975 0000174B 0A00                <1>
  1976                              <1> 		
  1977 0000174D 446F75626C65206661- <1> err8	db "Double fault:",10
  1978 00001756 756C743A0A          <1>
  1979 0000175B 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1980 00001764 74696F6E2068616E64- <1>
  1981 0000176D 6C657220636F756C64- <1>
  1982 00001776 206E6F742068616E64- <1>
  1983 0000177F 6C6520746861742069- <1>
  1984 00001788 7420636F756C64206E- <1>
  1985 00001791 6F742068616E646C65- <1>
  1986 0000179A 20616E206578636570- <1>
  1987 000017A3 74696F6E2E0A00      <1>
  1988                              <1> 		
  1989 000017AA 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1990 000017B3 6F72207365676D656E- <1>
  1991 000017BC 74206F76657272756E- <1>
  1992 000017C5 3A0A00              <1>
  1993 000017C8 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1994 000017D1 722068617070656E73- <1>
  1995 000017DA 20696E206D6F646572- <1>
  1996 000017E3 6E20636F6D70757465- <1>
  1997 000017EC 72732C20616E64206E- <1>
  1998 000017F5 657665722073686F75- <1>
  1999 000017FE 6C642E0A00          <1>
  2000                              <1> 
  2001 00001803 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  2002 0000180C 53533A0A            <1>
  2003 00001810 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  2004 00001819 686174207761732073- <1>
  2005 00001822 776974636865642074- <1>
  2006 0000182B 6F20697320696E7661- <1>
  2007 00001834 6C69642E204E6F7468- <1>
  2008 0000183D 696E672066756E6E79- <1>
  2009 00001846 20686572652E0A00    <1>
  2010                              <1> 		
  2011 0000184E 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2012 00001857 6F742070726573656E- <1>
  2013 00001860 743A0A              <1>
  2014 00001863 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2015 0000186C 6E7420626974206F66- <1>
  2016 00001875 20746865207365676D- <1>
  2017 0000187E 656E74206465736372- <1>
  2018 00001887 6970746F7220697320- <1>
  2019 00001890 73657420746F207A65- <1>
  2020 00001899 726F2E0A00          <1>
  2021                              <1> 		
  2022 0000189E 537461636B20657863- <1> err12	db "Stack exception:",10
  2023 000018A7 657074696F6E3A0A    <1>
  2024 000018AF 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2025 000018B8 7363726970746F7220- <1>
  2026 000018C1 697320696E76616C69- <1>
  2027 000018CA 64206F72206E6F7420- <1>
  2028 000018D3 70726573656E74206F- <1>
  2029 000018DC 7220697473206C696D- <1>
  2030 000018E5 697420697320746F6F- <1>
  2031 000018EE 20736D616C6C2E0A00  <1>
  2032                              <1> 		
  2033 000018F7 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2034 00001900 726F74656374696F6E- <1>
  2035 00001909 2076696F6C6174696F- <1>
  2036 00001912 6E3A0A              <1>
  2037 00001915 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2038 0000191E 746564207468652063- <1>
  2039 00001927 6F6D70757465722E20- <1>
  2040 00001930 537465702061776179- <1>
  2041 00001939 20736C6F776C792E20- <1>
  2042 00001942 546865204642492069- <1>
  2043 0000194B 73206F6E2069747320- <1>
  2044 00001954 7761792E0A00        <1>
  2045                              <1> 		
  2046 0000195A 50616765206661756C- <1> err14	db "Page fault:",10
  2047 00001963 743A0A              <1>
  2048 00001966 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2049 0000196F 746861742077617320- <1>
  2050 00001978 726571756573746564- <1>
  2051 00001981 20776173206E6F7420- <1>
  2052 0000198A 617661696C61626C65- <1>
  2053 00001993 2E0A00              <1>
  2054                              <1> 		
  2055 00001996 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2056 0000199F 666F7220506C616E20- <1>
  2057 000019A8 523A0A              <1>
  2058 000019AB 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2059 000019B4 727275707420697320- <1>
  2060 000019BD 726573657276656420- <1>
  2061 000019C6 666F72207573616765- <1>
  2062 000019CF 206F6E6C7920627920- <1>
  2063 000019D8 746865206D696C6974- <1>
  2064 000019E1 617279207768656E20- <1>
  2065 000019EA 6974206973206E6563- <1>
  2066 000019F3 6573736172790A      <1>
  2067 000019FA 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  2068 00001A03 746520612066756C6C- <1>
  2069 00001A0C 2D7363616C6520636F- <1>
  2070 00001A15 757020642782746174- <1>
  2071 00001A1E 2E0A00              <1>
  2072                              <1> 		
  2073 00001A21 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2074 00001A2A 68656C6C206A757374- <1>
  2075 00001A33 2068617070656E6564- <1>
  2076 00001A3C 3F2049732065766572- <1>
  2077 00001A45 796F6E65206F6B6179- <1>
  2078 00001A4E 3F2048617264206472- <1>
  2079 00001A57 6976653F2056696465- <1>
  2080 00001A60 6F20636172643F0A    <1>
  2081 00001A68 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2082 00001A71 726520796F75207468- <1>
  2083 00001A7A 6572653F0A00        <1>
  2084                              <1> %else
  2085                              <1> unhand:	
  2086                              <1> 	%assign i 0
  2087                              <1> 	%rep 32
  2088                              <1> 	mov byte [intprob], i
  2089                              <1> 	jmp unhand2
  2090                              <1> 	%assign i i+1
  2091                              <1> 	%endrep
  2092                              <1> unhand2:
  2093                              <1> 	cmp byte [intprob], 3
  2094                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2095                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2096                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2097                              <1> 	mov bl, [intprob]
  2098                              <1> 	jmp exitprog
  2099                              <1> intprob db 0
  2100                              <1> %endif
  2101                                      %include "source/ints.asm"
  2102                              <1> newints:	;for great justice
  2103 00001A80 80FC00              <1> 	cmp ah, 0
  2104 00001A83 0F847F000000        <1> 	je near exitprog   ;kills app
  2105 00001A89 80FC01              <1> 	cmp ah, 1
  2106 00001A8C 0F84FE000000        <1> 	je near prntstr  ;print string
  2107 00001A92 80FC02              <1> 	cmp ah, 2
  2108 00001A95 0F849F010000        <1> 	je near readstr	;read string
  2109 00001A9B 80FC03              <1> 	cmp ah, 3
  2110 00001A9E 0F84BF010000        <1> 	je near clearscrn	;clear screen
  2111 00001AA4 80FC04              <1> 	cmp ah, 4
  2112 00001AA7 0F8434020000        <1> 	je near prntreadstr	;read and print string
  2113 00001AAD 80FC05              <1> 	cmp ah, 5
  2114 00001AB0 0F8414070000        <1> 	je near readchar	;get char
  2115 00001AB6 80FC06              <1> 	cmp ah, 6
  2116 00001AB9 0F847B070000        <1> 	je near prntchar	;print char
  2117 00001ABF 80FC07              <1> 	cmp ah, 7
  2118 00001AC2 0F84A4090000        <1> 	je near openfile	;read file
  2119                              <1> ;	cmp ah, 8
  2120                              <1> ;	je near closefile	;close file
  2121 00001AC8 80FC09              <1> 	cmp ah, 9
  2122 00001ACB 0F84A5090000        <1> 	je near num2str	;convert number to string
  2123 00001AD1 80FC0A              <1> 	cmp ah, 10
  2124 00001AD4 0F84B4090000        <1> 	je near str2num	;convert string to number
  2125                              <1> %ifdef threads.included
  2126                              <1> 	cmp ah, 11
  2127                              <1> 	je near forkthread	;create thread
  2128                              <1> %endif
  2129 00001ADA 80FC0C              <1> 	cmp ah, 12
  2130 00001ADD 0F84B7090000        <1> 	je near gettime	;get time
  2131 00001AE3 80FC0D              <1> 	cmp ah, 13
  2132 00001AE6 0F84C3090000        <1> 	je near settime	;set time
  2133 00001AEC 80FC0E              <1> 	cmp ah, 14
  2134 00001AEF 0F84CA090000        <1> 	je near runcmd	;run program
  2135 00001AF5 80FC0F              <1> 	cmp ah, 15
  2136 00001AF8 0F84D6090000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2137 00001AFE 80FC10              <1> 	cmp ah, 16
  2138 00001B01 0F84FB090000        <1> 	je near hooksig	;hook code to a signal
  2139                              <1> %ifdef gui.included
  2140                              <1> 	cmp ah, 17
  2141                              <1> 	je near guiint	;GUI operations
  2142                              <1> %endif
  2143                              <1> %ifdef sound.included
  2144                              <1> 	cmp ah, 18
  2145                              <1> 	je near soundint	;sound operations
  2146                              <1> %endif
  2147                              <1> %ifdef network.included
  2148                              <1> 	cmp ah, 19
  2149                              <1> 	je near netint	;networking operations
  2150                              <1> %endif
  2151 00001B07 CF                  <1> 	iret
  2152                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2153                              <2> exitprog:
  2154 00001B08 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2155 00001B0C 8ED8                <2> 	mov ds, ax
  2156 00001B0E 8EC0                <2> 	mov es, ax
  2157 00001B10 8EE0                <2> 	mov fs, ax
  2158 00001B12 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2159 00001B16 8EE8                <2> 	mov gs, ax
  2160 00001B18 C705[F0540000]0000- <2> 	mov dword [currentthread], 0
  2161 00001B20 0000                <2>
  2162 00001B22 C705[EB540000]0400- <2> 	mov dword [lastthread], 4
  2163 00001B2A 0000                <2>
  2164 00001B2C C605[EF540000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2165 00001B33 8B25[E06D0300]      <2> 	mov esp, [previousstack] ;and this
  2166 00001B39 81FB00000000        <2> 	cmp ebx, 0
  2167 00001B3F 0F8501000000        <2> 	jne near .error
  2168 00001B45 C3                  <2> 	ret
  2169                              <2> .error:
  2170 00001B46 89D9                <2> 	mov ecx, ebx
  2171 00001B48 B006                <2> 	mov al, 6
  2172 00001B4A A2[562E0000]        <2> 	mov [firsthexshown], al
  2173 00001B4F 51                  <2> 	push ecx
  2174 00001B50 BE[6B1B0000]        <2> 	mov esi, .msg1
  2175 00001B55 E855000000          <2> 	call printhighlight
  2176 00001B5A 59                  <2> 	pop ecx
  2177 00001B5B E80B130000          <2> 	call showhex
  2178 00001B60 BE[801B0000]        <2> 	mov esi, .msg2
  2179 00001B65 E845000000          <2> 	call printhighlight
  2180 00001B6A C3                  <2> 	ret
  2181                              <2> 	
  2182 00001B6B 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2183 00001B74 7461747573206F6620- <2>
  2184 00001B7D 307800              <2>
  2185 00001B80 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2186 00001B89 726E65642E0A00      <2>
  2187                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2188                              <2> prntstr:
  2189 00001B90 30E4                <2> xor ah, ah
  2190 00001B92 E82B000000          <2> call printint
  2191 00001B97 E9EFE6FFFF          <2> jmp timerinterrupt
  2192                              <2> 
  2193                              <2> 	printquiet:
  2194 00001B9C 6631C0              <2> 		xor ax, ax
  2195 00001B9F 66A3[381C0000]      <2> 		mov [endkeyprint], ax
  2196 00001BA5 66BB0700            <2> 		mov bx, 7
  2197 00001BA9 E82D000000          <2> 		call printint.b
  2198 00001BAE C3                  <2> 		ret
  2199                              <2> 
  2200                              <2> 	printhighlight:
  2201 00001BAF 6631C0              <2> 		xor ax, ax
  2202 00001BB2 66BBF000            <2> 		mov bx, 0xF0
  2203 00001BB6 E907000000          <2> 		jmp printint
  2204                              <2> 
  2205                              <2>     print:
  2206 00001BBB 6631C0              <2> 		xor ax, ax
  2207 00001BBE 66BB0700            <2> 		mov bx, 7
  2208                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2209 00001BC2 56                  <2> 		push esi
  2210 00001BC3 66A3[381C0000]      <2> 		mov [endkeyprint], ax
  2211 00001BC9 E80D000000          <2> 		call .b
  2212 00001BCE 89F1                <2> 		mov ecx, esi
  2213 00001BD0 5F                  <2> 		pop edi
  2214 00001BD1 29F9                <2> 		sub ecx, edi
  2215 00001BD3 51                  <2> 		push ecx
  2216 00001BD4 E839090000          <2> 		call termcopy
  2217 00001BD9 59                  <2> 		pop ecx
  2218 00001BDA C3                  <2> 		ret
  2219                              <2> 	.b:	
  2220 00001BDB 53                  <2> 		push ebx
  2221 00001BDC 31C0                <2> 		xor eax, eax
  2222 00001BDE 8A06                <2> 		mov al, [esi]
  2223 00001BE0 3CFF                <2> 		cmp al, 0xFF
  2224 00001BE2 7438                <2> 		je .doneutf
  2225 00001BE4 3CC0                <2> 		cmp al, 0xC0
  2226 00001BE6 7234                <2> 		jb .doneutf
  2227 00001BE8 3CE0                <2> 		cmp al, 0xE0
  2228 00001BEA 721D                <2> 		jb .two
  2229 00001BEC 46                  <2> 		inc esi
  2230 00001BED 668B0E              <2> 		mov cx, [esi]
  2231 00001BF0 46                  <2> 		inc esi
  2232 00001BF1 C0E004              <2> 		shl al, 4
  2233 00001BF4 66C1E102            <2> 		shl cx, 2
  2234 00001BF8 C0ED02              <2> 		shr ch, 2
  2235 00001BFB 66C1E902            <2> 		shr cx, 2
  2236 00001BFF 08C5                <2> 		or ch, al
  2237 00001C01 6689C8              <2> 		mov ax, cx
  2238 00001C04 E913000000          <2> 		jmp .doneutf
  2239                              <2> 	.two:
  2240 00001C09 8A2E                <2> 		mov ch, [esi]
  2241 00001C0B 46                  <2> 		inc esi
  2242 00001C0C 8A0E                <2> 		mov cl, [esi]
  2243 00001C0E 66C1E102            <2> 		shl cx, 2
  2244 00001C12 C0ED02              <2> 		shr ch, 2
  2245 00001C15 66C1E902            <2> 		shr cx, 2
  2246 00001C19 6689C8              <2> 		mov ax, cx
  2247                              <2> 	.doneutf:
  2248 00001C1C 5B                  <2> 		pop ebx
  2249 00001C1D 663B05[381C0000]    <2> 		cmp ax, [endkeyprint]
  2250 00001C24 7411                <2> 		je .done
  2251 00001C26 663DFFFE            <2> 		cmp ax, 0xFEFF
  2252 00001C2A 7405                <2> 		je .noprint
  2253 00001C2C E836060000          <2> 		call prcharq
  2254                              <2> 	.noprint:
  2255 00001C31 46                  <2> 		inc esi
  2256 00001C32 E9A4FFFFFF          <2> 		jmp .b
  2257                              <2> 	.done:
  2258 00001C37 C3                  <2> 		ret
  2259                              <2> 
  2260 00001C38 0000                <2> endkeyprint dw 0
  2261                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2262                              <2> readstr:
  2263 00001C3A E805000000          <2> call readint
  2264 00001C3F E947E6FFFF          <2> jmp timerinterrupt
  2265                              <2> 
  2266                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2267 00001C44 89C3                <2> 		mov ebx, eax
  2268                              <2> 	.b:
  2269 00001C46 53                  <2> 		push ebx
  2270 00001C47 57                  <2> 		push edi
  2271 00001C48 56                  <2> 		push esi
  2272 00001C49 30C0                <2> 		xor al, al
  2273 00001C4B E886050000          <2> 		call rdcharint
  2274 00001C50 5E                  <2> 		pop esi
  2275 00001C51 8806                <2> 		mov [esi], al
  2276 00001C53 46                  <2> 		inc esi
  2277 00001C54 5F                  <2> 		pop edi
  2278 00001C55 5B                  <2> 		pop ebx
  2279 00001C56 39FE                <2> 		cmp esi, edi
  2280 00001C58 7304                <2> 		jae .done
  2281 00001C5A 38D8                <2> 		cmp al, bl
  2282 00001C5C 75E8                <2> 		jne .b
  2283                              <2> 	.done:
  2284 00001C5E 4E                  <2> 		dec esi
  2285 00001C5F C60600              <2> 		mov byte [esi], 0
  2286 00001C62 C3                  <2> 		ret
  2287                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2288                              <2> clearscrn:
  2289 00001C63 E805000000          <2> call clear
  2290 00001C68 E91EE6FFFF          <2> jmp timerinterrupt
  2291                              <2> %ifdef io.serial
  2292                              <2> clear:
  2293                              <2> 	ret
  2294                              <2> %else
  2295                              <2> clear:
  2296 00001C6D 668B0D[66240000]    <2> 		mov cx, [charxy]
  2297 00001C74 BF[75880300]        <2> 		mov edi, videobuf
  2298 00001C79 31C0                <2> 		xor eax, eax
  2299 00001C7B A3[5C240000]        <2> 		mov [linebeginpos], eax
  2300 00001C80 A3[60240000]        <2> 		mov [videobufpos], eax
  2301 00001C85 6631D2              <2> 		xor dx, dx
  2302 00001C88 66A3[64240000]      <2> 		mov [charpos], ax
  2303 00001C8E 66B80700            <2> 		mov ax, 7
  2304 00001C92 C1E010              <2> 		shl eax, 16
  2305                              <2> 	clearb:
  2306 00001C95 8907                <2> 		mov [edi], eax
  2307 00001C97 81C704000000        <2> 		add edi, 4
  2308 00001C9D FEC9                <2> 		dec cl
  2309 00001C9F 80F900              <2> 		cmp cl, 0
  2310 00001CA2 75F1                <2> 		jne clearb
  2311 00001CA4 8A0D[66240000]      <2> 		mov cl, [charxy]
  2312 00001CAA FECD                <2> 		dec ch
  2313 00001CAC 80FD00              <2> 		cmp ch, 0
  2314 00001CAF 75E4                <2> 		jne clearb
  2315                              <2> 	cleardouble:
  2316 00001CB1 BF[F5AD0300]        <2> 		mov edi, videobuf2
  2317 00001CB6 668B0D[66240000]    <2> 		mov cx, [charxy]
  2318 00001CBD 31C0                <2> 		xor eax, eax
  2319                              <2> 	clearc:
  2320 00001CBF 8907                <2> 		mov [edi], eax
  2321 00001CC1 81C704000000        <2> 		add edi, 4
  2322 00001CC7 FEC9                <2> 		dec cl
  2323 00001CC9 80F900              <2> 		cmp cl, 0
  2324 00001CCC 75F1                <2> 		jne clearc
  2325 00001CCE 8A0D[66240000]      <2> 		mov cl, [charxy]
  2326 00001CD4 FECD                <2> 		dec ch
  2327 00001CD6 80FD00              <2> 		cmp ch, 0
  2328 00001CD9 75E4                <2> 		jne clearc
  2329 00001CDB E832080000          <2> 		call termcopy
  2330 00001CE0 C3                  <2> 		ret
  2331                              <2> %endif
  2332                              <2> 		
  2333                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2334                              <2> prntreadstr:
  2335 00001CE1 E80B000000          <2> call rdprint
  2336 00001CE6 E9A0E5FFFF          <2> jmp timerinterrupt
  2337                              <2> 
  2338                              <2> readline:
  2339 00001CEB B00A                <2>   mov al, 10
  2340 00001CED 66BB0700            <2>   mov bx, 7
  2341                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2342 00001CF1 E80F000000          <2> 	call rdprintdos
  2343 00001CF6 50                  <2> 	push eax
  2344 00001CF7 A0[B5210000]        <2> 	mov al, [endkeyrdpr]
  2345 00001CFC 30E4                <2> 	xor ah, ah
  2346 00001CFE E84D050000          <2> 	call prcharint
  2347 00001D03 58                  <2> 	pop eax
  2348 00001D04 C3                  <2> 	ret
  2349                              <2> 
  2350                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2351 00001D05 8935[BF210000]      <2> 		mov [buftxtloc], esi
  2352 00001D0B A2[B5210000]        <2> 		mov [endkeyrdpr], al
  2353 00001D10 66891D[B7210000]    <2> 		mov [modkeyrdpr], bx
  2354 00001D17 8935[B9210000]      <2> 		mov [firstesirdpr], esi
  2355 00001D1D 893D[C3210000]      <2> 		mov [endbufferrdpr], edi
  2356 00001D23 8B3D[81D30300]      <2> 		mov edi, [commandsentered]
  2357 00001D29 893D[7DD30300]      <2> 		mov [commandlistentries], edi
  2358                              <2> 	rdprintb:
  2359 00001D2F 56                  <2> 		push esi
  2360 00001D30 B001                <2> 		mov al, 1
  2361 00001D32 E89F040000          <2> 		call rdcharint
  2362 00001D37 8A25[36220000]      <2> 		mov ah, [lastkey + 2]
  2363 00001D3D 88E1                <2> 		mov cl, ah
  2364 00001D3F 5E                  <2> 		pop esi
  2365                              <2> %ifdef io.serial
  2366                              <2> 		cmp ah, 0x41
  2367                              <2> 		je near rdprup
  2368                              <2> 		cmp ah, 0x42
  2369                              <2> 		je near rdprdown
  2370                              <2> 		cmp ah, 0x43
  2371                              <2> 		je near rdprright
  2372                              <2> 		cmp ah, 0x44
  2373                              <2> 		je near rdprleft
  2374                              <2> 		cmp ah, 0x31
  2375                              <2> 		je near rdprhome
  2376                              <2> 		cmp ah, 0x48
  2377                              <2> 		je near rdprhome
  2378                              <2> 		cmp ah, 0x46
  2379                              <2> 		je near rdprend
  2380                              <2> 		cmp ah, 0x33
  2381                              <2> 		je near rdprdel
  2382                              <2> 		cmp ah, 0x34
  2383                              <2> 		je near rdprend
  2384                              <2> %else
  2385 00001D40 803D[304A0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2386 00001D47 753F                <2> 		jne notspecialrdprnt
  2387 00001D49 80FC53              <2> 		cmp ah, 0x53
  2388 00001D4C 0F84C9030000        <2> 		je near rdprdel
  2389 00001D52 80FC47              <2> 		cmp ah, 0x47
  2390 00001D55 0F8481010000        <2> 		je near rdprhome
  2391 00001D5B 80FC4F              <2> 		cmp ah, 0x4F
  2392 00001D5E 0F849A010000        <2> 		je near rdprend
  2393 00001D64 80FC50              <2> 		cmp ah, 0x50
  2394 00001D67 0F8430020000        <2> 		je near rdprdown
  2395 00001D6D 80FC4D              <2> 		cmp ah, 0x4D
  2396 00001D70 0F84CA010000        <2> 		je near rdprright
  2397 00001D76 80FC4B              <2> 		cmp ah, 0x4B
  2398 00001D79 0F849F010000        <2> 		je near rdprleft
  2399 00001D7F 80FC48              <2> 		cmp ah, 0x48
  2400 00001D82 0F8458020000        <2> 		je near rdprup
  2401                              <2> 	notspecialrdprnt:
  2402                              <2> %endif
  2403 00001D88 66A1[34220000]      <2> 		mov ax, [lastkey]
  2404 00001D8E 663D0800            <2> 		cmp ax, 8
  2405 00001D92 0F84B8030000        <2> 		je near rdprbscheck
  2406 00001D98 663D0000            <2> 		cmp ax, 0
  2407 00001D9C 7491                <2> 		je rdprintb
  2408 00001D9E 80F900              <2> 		cmp cl, 0
  2409 00001DA1 748C                <2> 		je rdprintb
  2410 00001DA3 663D8000            <2> 		cmp ax, 0x80
  2411 00001DA7 7257                <2> 		jb .normal
  2412 00001DA9 663D0008            <2> 		cmp ax, 0x800
  2413 00001DAD 7321                <2> 		jae .three
  2414 00001DAF 46                  <2> 		inc esi
  2415 00001DB0 3B35[C3210000]      <2> 		cmp esi, [endbufferrdpr]
  2416 00001DB6 0F83DA000000        <2> 		jae near donerdprinc
  2417 00001DBC 66C1E002            <2> 		shl ax, 2
  2418 00001DC0 C0E802              <2> 		shr al, 2
  2419 00001DC3 0C80                <2> 		or al, 10000000b
  2420 00001DC5 80CCC0              <2> 		or ah, 11000000b
  2421 00001DC8 8866FF              <2> 		mov [esi - 1], ah
  2422 00001DCB E930000000          <2> 		jmp .normal
  2423                              <2> .three:	
  2424 00001DD0 81C602000000        <2> 		add esi, 2
  2425 00001DD6 3B35[C3210000]      <2> 		cmp esi, [endbufferrdpr]
  2426 00001DDC 0F83B4000000        <2> 		jae near donerdprinc
  2427 00001DE2 88E1                <2> 		mov cl, ah
  2428 00001DE4 C0E904              <2> 		shr cl, 4
  2429 00001DE7 80C9E0              <2> 		or cl, 11100000b
  2430 00001DEA 884EFE              <2> 		mov [esi - 2], cl
  2431 00001DED 66C1E004            <2> 		shl ax, 4
  2432 00001DF1 66C1E802            <2> 		shr ax, 2
  2433 00001DF5 80CC80              <2> 		or ah, 10000000b
  2434 00001DF8 C0E802              <2> 		shr al, 2
  2435 00001DFB 0C80                <2> 		or al, 10000000b
  2436 00001DFD 8866FF              <2> 		mov [esi - 1], ah
  2437                              <2> .normal:
  2438 00001E00 8806                <2> 		mov [esi], al
  2439 00001E02 46                  <2> 		inc esi
  2440 00001E03 66A1[34220000]      <2> 		mov ax, [lastkey]
  2441                              <2> 	bscheckequal:
  2442 00001E09 668B1D[B7210000]    <2> 		mov bx, [modkeyrdpr]
  2443 00001E10 803D[BE210000]00    <2> 		cmp byte [txtmask], 0
  2444 00001E17 7407                <2> 		je nomasktxt
  2445 00001E19 30E4                <2> 		xor ah, ah
  2446 00001E1B A0[BE210000]        <2> 		mov al, [txtmask]
  2447                              <2> 	nomasktxt:
  2448 00001E20 56                  <2> 		push esi
  2449 00001E21 66A3[B3210000]      <2> 		mov [axcache], ax
  2450 00001E27 668B1D[B5210000]    <2> 		mov bx, [endkeyrdpr]
  2451 00001E2E 6639D8              <2> 		cmp ax, bx
  2452 00001E31 7432                <2> 		je nobackprintbuftxt2
  2453 00001E33 E818040000          <2> 		call prcharint
  2454 00001E38 BE[60800300]        <2> 		mov esi, buftxt2
  2455 00001E3D E85AFDFFFF          <2> 		call printquiet
  2456 00001E42 66B82000            <2> 		mov ax, " "
  2457 00001E46 E81C040000          <2> 		call prcharq
  2458 00001E4B 66B80800            <2> 		mov ax, 8
  2459 00001E4F 81FE[60800300]      <2> 		cmp esi, buftxt2
  2460 00001E55 740E                <2> 		je nobackprintbuftxt2
  2461                              <2> 	backprintbuftxt2:
  2462 00001E57 E80B040000          <2> 		call prcharq
  2463 00001E5C 4E                  <2> 		dec esi
  2464 00001E5D 81FE[60800300]      <2> 		cmp esi, buftxt2
  2465 00001E63 77F2                <2> 		ja backprintbuftxt2
  2466                              <2> 	nobackprintbuftxt2:
  2467 00001E65 663D0A00            <2> 		cmp ax, 10
  2468 00001E69 7405                <2> 		je nonobackprint
  2469 00001E6B E8E0030000          <2> 		call prcharint
  2470                              <2> 	nonobackprint:
  2471 00001E70 5E                  <2> 		pop esi
  2472 00001E71 3B35[C3210000]      <2> 		cmp esi, [endbufferrdpr]
  2473 00001E77 0F8319000000        <2> 		jae near donerdprinc
  2474 00001E7D 66A1[B3210000]      <2> 		mov ax, [axcache]
  2475 00001E83 8A25[B5210000]      <2> 		mov ah, [endkeyrdpr]
  2476 00001E89 38E0                <2> 		cmp al, ah
  2477 00001E8B 0F859EFEFFFF        <2> 		jne rdprintb
  2478 00001E91 E901000000          <2> 		jmp donerdprint
  2479                              <2> 	donerdprinc:
  2480 00001E96 46                  <2> 		inc esi
  2481                              <2> 	donerdprint:
  2482 00001E97 4E                  <2> 		dec esi
  2483 00001E98 BF[60800300]        <2> 		mov edi, buftxt2
  2484                              <2> 	copylaterstuff:
  2485 00001E9D 8A07                <2> 		mov al, [edi]
  2486 00001E9F 3C00                <2> 		cmp al, 0
  2487 00001EA1 7409                <2> 		je nocopylaterstuff
  2488 00001EA3 8806                <2> 		mov [esi], al
  2489 00001EA5 47                  <2> 		inc edi
  2490 00001EA6 46                  <2> 		inc esi
  2491 00001EA7 E9F1FFFFFF          <2> 		jmp copylaterstuff
  2492                              <2> 	nocopylaterstuff:
  2493 00001EAC C60600              <2> 		mov byte [esi], 0
  2494 00001EAF E80B000000          <2> 		call clearbuftxt2
  2495 00001EB4 89F1                <2> 		mov ecx, esi
  2496 00001EB6 8B3D[B9210000]      <2> 		mov edi, [firstesirdpr]
  2497 00001EBC 29F9                <2> 		sub ecx, edi
  2498 00001EBE C3                  <2> 		ret
  2499                              <2> 	
  2500                              <2> 	clearbuftxt2:
  2501 00001EBF 30C0                <2> 		xor al, al
  2502 00001EC1 BF[60800300]        <2> 		mov edi, buftxt2
  2503                              <2> 	clearbuftxt2lp:
  2504 00001EC6 8807                <2> 		mov [edi], al
  2505 00001EC8 47                  <2> 		inc edi
  2506 00001EC9 81FF[60840300]      <2> 		cmp edi, buftxt
  2507 00001ECF 75F5                <2> 		jne clearbuftxt2lp
  2508 00001ED1 C3                  <2> 		ret
  2509                              <2> 	
  2510                              <2> 	rdprintb2:
  2511 00001ED2 E83B060000          <2> 		call termcopy
  2512 00001ED7 E953FEFFFF          <2> 		jmp rdprintb
  2513                              <2> 	
  2514                              <2> 	rdprhome:
  2515 00001EDC 3B35[BF210000]      <2> 		cmp esi, [buftxtloc]
  2516 00001EE2 0F84EAFFFFFF        <2> 		je near rdprintb2
  2517 00001EE8 BF[60800300]        <2> 		mov edi, buftxt2
  2518 00001EED 8A07                <2> 		mov al, [edi]
  2519 00001EEF E88E020000          <2> 		call shiftbuftxt2
  2520 00001EF4 E86E030000          <2> 		call prcharq
  2521 00001EF9 E9DEFFFFFF          <2> 		jmp rdprhome
  2522                              <2> 		
  2523                              <2> 	rdprend:
  2524 00001EFE BF[60800300]        <2> 		mov edi, buftxt2
  2525 00001F03 8A07                <2> 		mov al, [edi]
  2526 00001F05 3C00                <2> 		cmp al, 0
  2527 00001F07 0F84C5FFFFFF        <2> 		je near rdprintb2
  2528 00001F0D 8806                <2> 		mov [esi], al
  2529 00001F0F E84C000000          <2> 		call shiftbuftxt2lft
  2530 00001F14 E84E030000          <2> 		call prcharq
  2531 00001F19 E9E0FFFFFF          <2> 		jmp rdprend
  2532                              <2> 	
  2533                              <2> 	rdprleft:
  2534 00001F1E 3B35[BF210000]      <2> 		cmp esi, [buftxtloc]
  2535 00001F24 0F8405FEFFFF        <2> 		je near rdprintb
  2536 00001F2A BF[60800300]        <2> 		mov edi, buftxt2
  2537 00001F2F 8A07                <2> 		mov al, [edi]
  2538 00001F31 E84C020000          <2> 		call shiftbuftxt2
  2539 00001F36 E815030000          <2> 		call prcharint
  2540 00001F3B E9EFFDFFFF          <2> 		jmp rdprintb
  2541                              <2> 		
  2542                              <2> 	rdprright:
  2543 00001F40 BF[60800300]        <2> 		mov edi, buftxt2
  2544 00001F45 8A07                <2> 		mov al, [edi]
  2545 00001F47 3C00                <2> 		cmp al, 0
  2546 00001F49 0F84E0FDFFFF        <2> 		je near rdprintb
  2547 00001F4F 8806                <2> 		mov [esi], al
  2548 00001F51 E80A000000          <2> 		call shiftbuftxt2lft
  2549 00001F56 E8F5020000          <2> 		call prcharint
  2550 00001F5B E9CFFDFFFF          <2> 		jmp rdprintb
  2551                              <2> 		
  2552                              <2> 	shiftbuftxt2lft:
  2553 00001F60 55                  <2> 		push ebp
  2554 00001F61 89FD                <2> 		mov ebp, edi
  2555                              <2> 	.lp:
  2556 00001F63 3C00                <2> 		cmp al, 0
  2557 00001F65 740B                <2> 		je noshiftbuftxt2lft
  2558 00001F67 47                  <2> 		inc edi
  2559 00001F68 8A07                <2> 		mov al, [edi]
  2560 00001F6A 8847FF              <2> 		mov [edi - 1], al
  2561 00001F6D E9F1FFFFFF          <2> 		jmp .lp
  2562                              <2> 	noshiftbuftxt2lft:
  2563 00001F72 8A4500              <2> 		mov al, [ebp]
  2564 00001F75 5D                  <2> 		pop ebp
  2565 00001F76 3CC0                <2> 		cmp al, 0xC0
  2566 00001F78 7304                <2> 		jae .nofix
  2567 00001F7A 3C80                <2> 		cmp al, 0x80
  2568 00001F7C 73E2                <2> 		jae shiftbuftxt2lft
  2569                              <2> 	.nofix:
  2570 00001F7E 8A06                <2> 		mov al, [esi]
  2571 00001F80 30E4                <2> 		xor ah, ah
  2572 00001F82 46                  <2> 		inc esi
  2573 00001F83 668B1D[B7210000]    <2> 		mov bx, [modkeyrdpr]
  2574 00001F8A C3                  <2> 		ret
  2575                              <2> 		
  2576                              <2> 	rdprdownbck:
  2577 00001F8B FECC                <2> 		dec ah
  2578 00001F8D 8825[BD210000]      <2> 		mov [commandedit], ah
  2579 00001F93 E890000000          <2> 		call rdprbckspc
  2580 00001F98 E992FDFFFF          <2> 		jmp rdprintb
  2581                              <2> 	
  2582                              <2> 	rdprdown:
  2583 00001F9D 8A25[BD210000]      <2> 		mov ah, [commandedit]
  2584 00001FA3 80FC01              <2> 		cmp ah, 1
  2585 00001FA6 0F8683FDFFFF        <2> 		jbe near rdprintb
  2586 00001FAC 8B3D[81D30300]      <2> 		mov edi, [commandsentered]
  2587 00001FB2 3B3D[7DD30300]      <2> 		cmp edi, [commandlistentries]
  2588 00001FB8 7618                <2> 		jbe .nofix
  2589 00001FBA 8105[7DD30300]0200- <2> 		add dword [commandlistentries], 2
  2590 00001FC2 0000                <2>
  2591 00001FC4 3B3D[7DD30300]      <2> 		cmp edi, [commandlistentries]
  2592 00001FCA 7706                <2> 		ja .nofix
  2593 00001FCC 893D[7DD30300]      <2> 		mov [commandlistentries], edi
  2594                              <2> 	.nofix:
  2595 00001FD2 80FC02              <2> 		cmp ah, 2
  2596 00001FD5 74B4                <2> 		je rdprdownbck
  2597 00001FD7 80EC02              <2> 		sub ah, 2
  2598 00001FDA 8825[BD210000]      <2> 		mov [commandedit], ah
  2599                              <2> 		
  2600                              <2> 	rdprup:
  2601 00001FE0 3805[BD210000]      <2> 		cmp [commandedit], al
  2602 00001FE6 0F8443FDFFFF        <2> 		je near rdprintb
  2603 00001FEC 813D[7DD30300]0000- <2> 		cmp dword [commandlistentries], 0
  2604 00001FF4 0000                <2>
  2605 00001FF6 0F8433FDFFFF        <2> 		je near rdprintb
  2606 00001FFC FF0D[7DD30300]      <2> 		dec dword [commandlistentries]
  2607                              <2> 	.lp:
  2608 00002002 BF[60800300]        <2> 		mov edi, buftxt2
  2609 00002007 8A07                <2> 		mov al, [edi]
  2610 00002009 3C00                <2> 		cmp al, 0
  2611 0000200B 7411                <2> 		je .start
  2612 0000200D 8806                <2> 		mov [esi], al
  2613 0000200F E84CFFFFFF          <2> 		call shiftbuftxt2lft
  2614 00002014 E84E020000          <2> 		call prcharq
  2615 00002019 E9E4FFFFFF          <2> 		jmp .lp
  2616                              <2> 	.start:
  2617 0000201E E805000000          <2> 		call rdprbckspc
  2618 00002023 E94B000000          <2> 		jmp getcurrentcommandstr
  2619                              <2> 	rdprbckspc:
  2620 00002028 3B35[BF210000]      <2> 		cmp esi, [buftxtloc]
  2621 0000202E 7435                <2> 		je nordprupbck
  2622                              <2> 	rdprupbckspclp:
  2623 00002030 66B80800            <2> 		mov ax, 8
  2624 00002034 668B1D[B7210000]    <2> 		mov bx, [modkeyrdpr]
  2625 0000203B E827020000          <2> 		call prcharq
  2626 00002040 66B82000            <2> 		mov ax, ' '
  2627 00002044 E81E020000          <2> 		call prcharq
  2628 00002049 66B80800            <2> 		mov ax, 8
  2629 0000204D E815020000          <2> 		call prcharq
  2630 00002052 4E                  <2> 		dec esi
  2631 00002053 3B35[BF210000]      <2> 		cmp esi, [buftxtloc]
  2632 00002059 7405                <2> 		je nordprupbck2
  2633 0000205B E9D0FFFFFF          <2> 		jmp rdprupbckspclp
  2634                              <2> 	nordprupbck2:
  2635 00002060 E8AD040000          <2> 		call termcopy
  2636                              <2> 	nordprupbck:
  2637 00002065 8B3D[79D30300]      <2> 		mov edi, [commandbufpos]
  2638 0000206B 81C7[85D30300]      <2> 		add edi, commandbuf
  2639 00002071 4F                  <2> 		dec edi
  2640 00002072 C3                  <2> 		ret
  2641                              <2> 	getcurrentcommandstr:
  2642 00002073 8A25[BD210000]      <2> 		mov ah, [commandedit]
  2643 00002079 FE05[BD210000]      <2> 		inc byte [commandedit]
  2644                              <2> 	getccmdlp:
  2645 0000207F 4F                  <2> 		dec edi
  2646 00002080 8A07                <2> 		mov al, [edi]
  2647 00002082 81FF[85D30300]      <2> 		cmp edi, commandbuf
  2648 00002088 7231                <2> 		jb getcmdresetcommandbuf
  2649 0000208A 81EF[85D30300]      <2> 		sub edi, commandbuf
  2650 00002090 3B3D[79D30300]      <2> 		cmp edi, [commandbufpos]
  2651 00002096 0F8493FCFFFF        <2> 		je near rdprintb
  2652 0000209C 81C7[85D30300]      <2> 		add edi, commandbuf
  2653 000020A2 3C00                <2> 		cmp al, 0
  2654 000020A4 75D9                <2> 		jne getccmdlp
  2655 000020A6 FECC                <2> 		dec ah
  2656 000020A8 80FC00              <2> 		cmp ah, 0
  2657 000020AB 77D2                <2> 		ja getccmdlp
  2658 000020AD 47                  <2> 		inc edi
  2659 000020AE 81FF[85E30300]      <2> 		cmp edi, commandbufend
  2660 000020B4 7710                <2> 		ja fixcmdbufb4morerdpr
  2661 000020B6 E918000000          <2> 		jmp morerdprup
  2662                              <2> 	getcmdresetcommandbuf:
  2663 000020BB BF[85E30300]        <2> 		mov edi, commandbufend
  2664 000020C0 47                  <2> 		inc edi
  2665 000020C1 E9B9FFFFFF          <2> 		jmp getccmdlp
  2666                              <2> 	fixcmdbufb4morerdpr:
  2667 000020C6 4F                  <2> 		dec edi
  2668 000020C7 81EF[85E30300]      <2> 		sub edi, commandbufend
  2669 000020CD 81C7[85D30300]      <2> 		add edi, commandbuf
  2670                              <2> 	morerdprup:
  2671 000020D3 8A07                <2> 		mov al, [edi]
  2672 000020D5 47                  <2> 		inc edi
  2673 000020D6 81EF[85D30300]      <2> 		sub edi, commandbuf
  2674 000020DC 3C00                <2> 		cmp al, 0
  2675 000020DE 0F84EEFDFFFF        <2> 		je near rdprintb2
  2676 000020E4 3B3D[79D30300]      <2> 		cmp edi, [commandbufpos]
  2677 000020EA 0F83E2FDFFFF        <2> 		jae near rdprintb2
  2678 000020F0 81C7[85D30300]      <2> 		add edi, commandbuf
  2679 000020F6 8806                <2> 		mov [esi], al
  2680 000020F8 46                  <2> 		inc esi
  2681 000020F9 57                  <2> 		push edi
  2682 000020FA 668B1D[B7210000]    <2> 		mov bx, [modkeyrdpr]
  2683 00002101 30E4                <2> 		xor ah, ah
  2684 00002103 E85F010000          <2> 		call prcharq
  2685 00002108 5F                  <2> 		pop edi
  2686 00002109 81FF[85E30300]      <2> 		cmp edi, commandbufend
  2687 0000210F 76C2                <2> 		jbe morerdprup
  2688 00002111 BF[85D30300]        <2> 		mov edi, commandbuf
  2689 00002116 E9B8FFFFFF          <2> 		jmp morerdprup
  2690                              <2> 
  2691                              <2> 	rdprdel:
  2692 0000211B BF[60800300]        <2> 		mov edi, buftxt2
  2693 00002120 8A07                <2> 		mov al, [edi]
  2694 00002122 3C00                <2> 		cmp al, 0
  2695 00002124 0F8405FCFFFF        <2> 		je near rdprintb
  2696 0000212A 8806                <2> 		mov [esi], al
  2697 0000212C 3C80                <2> 		cmp al, 0x80
  2698 0000212E 7216                <2> 		jb .fn
  2699                              <2> 	.lp:
  2700 00002130 46                  <2> 		inc esi
  2701 00002131 47                  <2> 		inc edi
  2702 00002132 8A07                <2> 		mov al, [edi]
  2703 00002134 3C00                <2> 		cmp al, 0
  2704 00002136 0F84F3FBFFFF        <2> 		je near rdprintb
  2705 0000213C 8806                <2> 		mov [esi], al
  2706 0000213E 3C80                <2> 		cmp al, 0x80
  2707 00002140 7204                <2> 		jb .fn
  2708 00002142 3CC0                <2> 		cmp al, 0xC0
  2709 00002144 72EA                <2> 		jb .lp
  2710                              <2> 	.fn:
  2711 00002146 E815FEFFFF          <2> 		call shiftbuftxt2lft
  2712 0000214B E817010000          <2> 		call prcharq
  2713                              <2> 		
  2714                              <2> 	rdprbscheck:
  2715 00002150 3B35[B9210000]      <2> 		cmp esi, [firstesirdpr]
  2716 00002156 0F86D3FBFFFF        <2> 		jbe near rdprintb
  2717                              <2> 	goodbscheck:
  2718 0000215C 4E                  <2> 		dec esi
  2719 0000215D 8A46FF              <2> 		mov al, [esi - 1]
  2720 00002160 C60600              <2> 		mov byte [esi], 0
  2721 00002163 3CC0                <2> 		cmp al, 0xC0
  2722 00002165 7309                <2> 		jae .onemore
  2723 00002167 3C80                <2> 		cmp al, 0x80
  2724 00002169 73F1                <2> 		jae goodbscheck
  2725 0000216B E904000000          <2> 		jmp .nomore
  2726                              <2> 	.onemore:
  2727 00002170 4E                  <2> 		dec esi
  2728 00002171 C60600              <2> 		mov byte [esi], 0		
  2729                              <2> 	.nomore:
  2730 00002174 668B1D[B7210000]    <2> 		mov bx, [modkeyrdpr]
  2731 0000217B B008                <2> 		mov al, 8
  2732 0000217D E987FCFFFF          <2> 		jmp bscheckequal
  2733                              <2> 		
  2734                              <2> 	shiftbuftxt2:
  2735 00002182 55                  <2> 		push ebp
  2736 00002183 89FD                <2> 		mov ebp, edi
  2737                              <2> 	.lp:
  2738 00002185 3C00                <2> 		cmp al, 0
  2739 00002187 740C                <2> 		je noshiftbuftxt2
  2740 00002189 47                  <2> 		inc edi
  2741 0000218A 8A27                <2> 		mov ah, [edi]
  2742 0000218C 8807                <2> 		mov [edi], al
  2743 0000218E 88E0                <2> 		mov al, ah
  2744 00002190 E9F0FFFFFF          <2> 		jmp .lp
  2745                              <2> 	noshiftbuftxt2:
  2746 00002195 8A4500              <2> 		mov al, [ebp]
  2747 00002198 5D                  <2> 		pop ebp
  2748 00002199 3CC0                <2> 		cmp al, 0xC0
  2749 0000219B 7304                <2> 		jae .nofix
  2750 0000219D 3C80                <2> 		cmp al, 0x80
  2751 0000219F 73E1                <2> 		jae shiftbuftxt2
  2752                              <2> 	.nofix:
  2753 000021A1 BF[60800300]        <2> 		mov edi, buftxt2
  2754 000021A6 4E                  <2> 		dec esi
  2755 000021A7 8A06                <2> 		mov al, [esi]
  2756 000021A9 8807                <2> 		mov [edi], al
  2757 000021AB C60600              <2> 		mov byte [esi], 0
  2758 000021AE 66B80800            <2> 		mov ax, 8
  2759 000021B2 C3                  <2> 		ret
  2760                              <2> 		
  2761 000021B3 0000                <2> axcache dw 0
  2762 000021B5 0000                <2> endkeyrdpr dw 0
  2763 000021B7 0000                <2> modkeyrdpr dw 0
  2764 000021B9 00000000            <2> firstesirdpr dd 0
  2765 000021BD 00                  <2> commandedit db 0
  2766 000021BE 00                  <2> txtmask db 0
  2767 000021BF 00000000            <2> buftxtloc dd 0
  2768 000021C3 00000000            <2> endbufferrdpr dd 0
  2769 000021C7 082000              <2> backcursor db 8," ",0
  2770                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2771                              <2> readchar:
  2772 000021CA E807000000          <2> 	call rdcharint
  2773 000021CF E9B7E0FFFF          <2> 	jmp timerinterrupt
  2774                              <2> getchar:
  2775 000021D4 30C0                <2> 	xor al, al
  2776                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2777 000021D6 66C705[38220000]01- <2> 		mov word [trans], 1
  2778 000021DE 00                  <2>
  2779 000021DF 3C00                <2> 		cmp al, 0
  2780 000021E1 7509                <2> 		jne transcheck
  2781 000021E3 66C705[38220000]00- <2> 		mov word [trans], 0
  2782 000021EB 00                  <2>
  2783                              <2> 	transcheck:
  2784                              <2> 	%ifdef io.serial
  2785                              <2> 		call serial.receive
  2786                              <2> 		xor ah, ah
  2787                              <2> 		cmp al, 13
  2788                              <2> 		je rdenter
  2789                              <2> 	%else
  2790 000021EC E861280000          <2> 		call getkey
  2791 000021F1 66A1[36220000]      <2> 		mov ax, [lastkey + 2]
  2792 000021F7 663D1C00            <2> 		cmp ax, 0x1C
  2793 000021FB 7425                <2> 		je rdenter
  2794                              <2> 	%endif
  2795 000021FD 66A1[34220000]      <2> 		mov ax, [lastkey]
  2796 00002203 668B1D[38220000]    <2> 		mov bx, [trans]
  2797 0000220A 803D[304A0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2798 00002211 7500                <2> 		jne nospecialtrans
  2799                              <2> 	nospecialtrans:
  2800 00002213 6609C3              <2> 		or bx, ax
  2801 00002216 6681FB0000          <2> 		cmp bx, 0
  2802 0000221B 74CF                <2> 		je transcheck
  2803 0000221D E90C000000          <2> 		jmp rdend
  2804                              <2> 	rdenter:
  2805 00002222 C1E010              <2> 		shl eax, 16
  2806 00002225 66B80A00            <2> 		mov ax, 10
  2807 00002229 A3[34220000]        <2> 		mov [lastkey], eax
  2808                              <2> 	rdend:
  2809 0000222E A1[34220000]        <2> 		mov eax, [lastkey]
  2810 00002233 C3                  <2> 		ret
  2811                              <2> 		
  2812 00002234 00000000            <2> lastkey dd 0
  2813 00002238 0000                <2> trans dw 0
  2814                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2815                              <2> prntchar:
  2816 0000223A 30E4                <2> 	xor ah, ah ;this kills unicode from the outside unfortunately
  2817                              <2> %ifdef io.serial
  2818                              <2> 	call prcharint
  2819                              <2> 	jmp timerinterrupt
  2820                              <2> prcharint:	
  2821                              <2> prcharq:
  2822                              <2> 	call serial.send
  2823                              <2> 	ret
  2824                              <2> %else
  2825 0000223C 38FB                <2> cmp bl, bh
  2826 0000223E 740A                <2> je prchar.notimer
  2827 00002240 E80B000000          <2> call prcharint
  2828 00002245 E941E0FFFF          <2> jmp timerinterrupt
  2829                              <2> prchar.notimer:
  2830 0000224A E818000000          <2> 	call prcharq
  2831 0000224F CF                  <2> 	iret
  2832                              <2> 	
  2833                              <2> prcharint:	;print char, char in ax, modifier in bx, if ecx is eax then termcopy will not happen, will run termcopy if called as is
  2834 00002250 663DFFFE            <2> 	cmp ax, 0xFEFF
  2835 00002254 740E                <2> 	je .ret
  2836 00002256 39C1                <2> 	cmp ecx, eax
  2837 00002258 740D                <2> 	je prcharq
  2838 0000225A E808000000          <2> 	call prcharq
  2839 0000225F E8AE020000          <2> 	call termcopy
  2840                              <2> .ret:
  2841 00002264 C3                  <2> 	ret
  2842 00002265 00                  <2> termguion db 0
  2843 00002266 00                  <2> termcopyon db 0
  2844                              <2> prcharq:
  2845 00002267 C1E310              <2> 	shl ebx, 16
  2846 0000226A 6689C3              <2> 	mov bx, ax
  2847 0000226D 89D8                <2> 	mov eax, ebx
  2848 0000226F A3[68240000]        <2> 	mov [charbuf], eax
  2849 00002274 8B1D[60240000]      <2> 	mov ebx, [videobufpos]
  2850 0000227A BF[75880300]        <2> 	mov edi, videobuf
  2851 0000227F 01DF                <2> 	add edi, ebx
  2852 00002281 A1[1D250000]        <2> 	mov eax, [removedvideo]
  2853 00002286 8907                <2> 	mov [edi], eax
  2854 00002288 A1[68240000]        <2> 	mov eax, [charbuf]
  2855 0000228D 31D2                <2> 	xor edx, edx
  2856 0000228F 668B15[64240000]    <2> 	mov dx, [charpos]
  2857 00002296 31C9                <2> 	xor ecx, ecx
  2858 00002298 668B0D[66240000]    <2> 	mov cx, [charxy]
  2859 0000229F 663D0900            <2> 	cmp ax, 9
  2860 000022A3 0F847C000000        <2> 	je near prtab
  2861 000022A9 663D0D00            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2862 000022AD 0F84A2000000        <2> 	je near prcr
  2863 000022B3 663D0A00            <2> 	cmp ax, 10
  2864 000022B7 0F84F1000000        <2> 	je near prnlcr
  2865 000022BD 663D0800            <2> 	cmp ax, 8
  2866 000022C1 0F84A2000000        <2> 	je near prbs
  2867 000022C7 663DFF00            <2> 	cmp ax, 255		;null character
  2868 000022CB 0F8424000000        <2> 	je near donescr
  2869 000022D1 663D0030            <2> 	cmp ax, (fontend - fonts)/16
  2870 000022D5 0F8341000000        <2> 	jae near prnofont
  2871                              <2> donepr:
  2872 000022DB 8907                <2> 	mov [edi], eax
  2873 000022DD 81C704000000        <2> 	add edi, 4
  2874 000022E3 FEC2                <2> 	inc dl
  2875                              <2> donecrnl:
  2876 000022E5 38CA                <2> 	cmp dl, cl
  2877 000022E7 0F83E5000000        <2> 	jae near preol
  2878                              <2> doneeol:
  2879 000022ED 38EE                <2> 	cmp dh, ch
  2880 000022EF 0F83FA000000        <2> 	jae near prscr	
  2881                              <2> donescr:
  2882 000022F5 89FB                <2> 	mov ebx, edi
  2883 000022F7 8B07                <2> 	mov eax, [edi]
  2884 000022F9 A3[1D250000]        <2> 	mov [removedvideo], eax
  2885 000022FE 81EB[75880300]      <2> 	sub ebx, videobuf
  2886 00002304 891D[60240000]      <2> 	mov [videobufpos], ebx
  2887 0000230A 668915[64240000]    <2> 	mov [charpos], dx
  2888 00002311 A1[68240000]        <2> 	mov eax, [charbuf]
  2889 00002316 89C3                <2> 	mov ebx, eax
  2890 00002318 C1EB10              <2> 	shr ebx, 16
  2891 0000231B C3                  <2> 	ret
  2892                              <2> 	
  2893                              <2> 	prnofont:
  2894 0000231C 66B80200            <2> 		mov ax, 2
  2895 00002320 E9B6FFFFFF          <2> 		jmp donepr
  2896                              <2> 	prtab:
  2897 00002325 8B1D[5C240000]      <2> 		mov ebx, [linebeginpos]
  2898 0000232B 81EF[75880300]      <2> 		sub edi, videobuf
  2899 00002331 29DF                <2> 		sub edi, ebx
  2900 00002333 C1EF05              <2> 		shr edi, 5
  2901 00002336 C1E705              <2> 		shl edi, 5
  2902 00002339 81C720000000        <2> 		add edi, 32
  2903 0000233F C0EA03              <2> 		shr dl, 3
  2904 00002342 C0E203              <2> 		shl dl, 3
  2905 00002345 80C208              <2> 		add dl, 8
  2906 00002348 81C7[75880300]      <2> 		add edi, videobuf
  2907 0000234E 01DF                <2> 		add edi, ebx
  2908 00002350 E990FFFFFF          <2> 		jmp donecrnl
  2909                              <2> 	
  2910                              <2> 	prcr:
  2911 00002355 30D2                <2> 		xor dl, dl
  2912 00002357 BF[75880300]        <2> 		mov edi, videobuf
  2913 0000235C 8B1D[5C240000]      <2> 		mov ebx, [linebeginpos]
  2914 00002362 01DF                <2> 		add edi, ebx
  2915 00002364 E97CFFFFFF          <2> 		jmp donecrnl
  2916                              <2> 			
  2917                              <2> 	prbs:
  2918 00002369 8B1D[5C240000]      <2> 		mov ebx, [linebeginpos]
  2919 0000236F 80FA00              <2> 		cmp dl, 0
  2920 00002372 7415                <2> 		je prbackline
  2921                              <2> 	prnobmr:
  2922 00002374 891D[5C240000]      <2> 		mov [linebeginpos], ebx
  2923 0000237A FECA                <2> 		dec dl
  2924 0000237C 31C0                <2> 		xor eax, eax
  2925 0000237E 81EF04000000        <2> 		sub edi, 4
  2926 00002384 E95CFFFFFF          <2> 		jmp donecrnl
  2927                              <2> 	prbackline:
  2928 00002389 6631DB              <2> 		xor bx, bx
  2929 0000238C 88CA                <2> 		mov dl, cl
  2930 0000238E 80FE00              <2> 		cmp dh, 0
  2931 00002391 74E1                <2> 		je prnobmr
  2932 00002393 8B1D[5C240000]      <2> 		mov ebx, [linebeginpos]
  2933 00002399 6651                <2> 		push cx
  2934 0000239B 31C9                <2> 		xor ecx, ecx
  2935 0000239D 8A0C24              <2> 		mov cl, [esp]
  2936 000023A0 C1E102              <2> 		shl ecx, 2
  2937 000023A3 29CB                <2> 		sub ebx, ecx
  2938 000023A5 6659                <2> 		pop cx
  2939 000023A7 FECE                <2> 		dec dh
  2940 000023A9 E9C6FFFFFF          <2> 		jmp prnobmr
  2941                              <2> 		
  2942                              <2> 	prnlcr:
  2943 000023AE FEC6                <2> 		inc dh
  2944 000023B0 31DB                <2> 		xor ebx, ebx
  2945 000023B2 30D2                <2> 		xor dl, dl
  2946 000023B4 88CB                <2> 		mov bl, cl
  2947 000023B6 66C1E302            <2> 		shl bx, 2
  2948 000023BA BF[75880300]        <2> 		mov edi, videobuf
  2949 000023BF 031D[5C240000]      <2> 		add ebx, [linebeginpos]
  2950 000023C5 891D[5C240000]      <2> 		mov [linebeginpos], ebx
  2951 000023CB 01DF                <2> 		add edi, ebx
  2952 000023CD E913FFFFFF          <2> 		jmp donecrnl
  2953                              <2> 		
  2954                              <2> 	preol:
  2955 000023D2 30D2                <2> 		xor dl, dl
  2956 000023D4 FEC6                <2> 		inc dh
  2957 000023D6 31DB                <2> 		xor ebx, ebx
  2958 000023D8 88CB                <2> 		mov bl, cl
  2959 000023DA 66C1E302            <2> 		shl bx, 2
  2960 000023DE 031D[5C240000]      <2> 		add ebx, [linebeginpos]
  2961 000023E4 891D[5C240000]      <2> 		mov [linebeginpos], ebx
  2962 000023EA E9FEFEFFFF          <2> 		jmp doneeol
  2963                              <2> 	prscr:
  2964 000023EF FECE                <2> 		dec dh
  2965 000023F1 BF[75880300]        <2> 		mov edi, videobuf
  2966 000023F6 31DB                <2> 		xor ebx, ebx
  2967 000023F8 88CB                <2> 		mov bl, cl
  2968 000023FA 66C1E302            <2> 		shl bx, 2
  2969 000023FE 01FB                <2> 		add ebx, edi
  2970                              <2> 	intscrollloop:
  2971 00002400 8B03                <2> 		mov eax, [ebx]
  2972 00002402 8907                <2> 		mov [edi], eax
  2973 00002404 81C704000000        <2> 		add edi, 4
  2974 0000240A 81C304000000        <2> 		add ebx, 4
  2975 00002410 FEC9                <2> 		dec cl
  2976 00002412 80F900              <2> 		cmp cl, 0
  2977 00002415 75E9                <2> 		jne intscrollloop
  2978 00002417 8A0D[66240000]      <2> 		mov cl, [charxy]
  2979 0000241D FECD                <2> 		dec ch
  2980 0000241F 80FD01              <2> 		cmp ch, 1
  2981 00002422 77DC                <2> 		ja intscrollloop
  2982 00002424 31C0                <2> 		xor eax, eax
  2983 00002426 81EF[75880300]      <2> 		sub edi, videobuf
  2984 0000242C 893D[5C240000]      <2> 		mov [linebeginpos], edi
  2985 00002432 81C7[75880300]      <2> 		add edi, videobuf
  2986 00002438 89FB                <2> 		mov ebx, edi
  2987                              <2> 	intloopclear:
  2988 0000243A 8903                <2> 		mov [ebx], eax
  2989 0000243C 81C304000000        <2> 		add ebx, 4
  2990 00002442 FEC9                <2> 		dec cl
  2991 00002444 80F900              <2> 		cmp cl, 0
  2992 00002447 75F1                <2> 		jne intloopclear
  2993 00002449 FECD                <2> 		dec ch
  2994 0000244B 80FD00              <2> 		cmp ch, 0
  2995 0000244E 75EA                <2> 		jne intloopclear
  2996 00002450 668B0D[66240000]    <2> 		mov cx, [charxy]
  2997 00002457 E999FEFFFF          <2> 		jmp donescr
  2998                              <2> 		
  2999 0000245C 00000000            <2> linebeginpos dd 0
  3000 00002460 00000000            <2> videobufpos: dd 0
  3001 00002464 0000                <2> charpos db 0,0
  3002 00002466 501E                <2> charxy db 80,30
  3003 00002468 00000000            <2> charbuf dd 0
  3004                              <2> %endif
  3005                              <1> 	%include 'source/interrupts/7_openfile.asm'
  3006                              <2> openfile:
  3007 0000246C E87C2F0000          <2> 	call loadfile
  3008 00002471 E915DEFFFF          <2> 	jmp timerinterrupt
  3009                              <1> 	%include 'source/interrupts/9_num2str.asm'
  3010                              <2> num2str:
  3011 00002476 3C00                <2> 	cmp al, 0
  3012 00002478 750A                <2> 	jne num2strb
  3013 0000247A E8B60A0000          <2> 	call showdec
  3014 0000247F E907DEFFFF          <2> 	jmp timerinterrupt
  3015                              <2> num2strb:
  3016 00002484 E8E2090000          <2> 	call showhex
  3017 00002489 E9FDDDFFFF          <2> 	jmp timerinterrupt
  3018                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3019                              <2> str2num:
  3020 0000248E 89F7                <2> 	mov edi, esi
  3021 00002490 E8850B0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3022 00002495 E9F1DDFFFF          <2> 	jmp timerinterrupt
  3023                              <2> 	
  3024                              <1> %ifdef threads.included
  3025                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3026                              <1> %endif
  3027                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3028                              <2> gettime:
  3029 0000249A A1[43020000]        <2> 	mov eax, [timeseconds]
  3030 0000249F 8B1D[47020000]      <2> 	mov ebx, [timenanoseconds]
  3031 000024A5 89D9                <2> 	mov ecx, ebx
  3032 000024A7 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3033 000024AA E9DCDDFFFF          <2> 	jmp timerinterrupt
  3034                              <1> 	%include 'source/interrupts/13_settime.asm'
  3035                              <2> settime:
  3036 000024AF A3[43020000]        <2> 	mov [timeseconds], eax
  3037 000024B4 891D[47020000]      <2> 	mov [timenanoseconds], ebx
  3038 000024BA E9CCDDFFFF          <2> 	jmp timerinterrupt
  3039                              <2> 	
  3040                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3041                              <2> runcmd:
  3042 000024BF BF[60840300]        <2> 	mov edi, buftxt
  3043                              <2> cpcmd:
  3044 000024C4 8A06                <2> 	mov al, [esi]
  3045 000024C6 8807                <2> 	mov [edi], al
  3046 000024C8 46                  <2> 	inc esi
  3047 000024C9 47                  <2> 	inc edi
  3048 000024CA 3C00                <2> 	cmp al, 0
  3049 000024CC 75F6                <2> 	jne cpcmd
  3050 000024CE E86E060000          <2> 	call run
  3051 000024D3 CF                  <2> 	iret
  3052                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3053                              <2> proginfo:
  3054                              <2> 	;mov ebx, variables
  3055 000024D4 8B35[1D2C0000]      <2> 	mov esi, [currentcommandloc]
  3056 000024DA 89F7                <2> 	mov edi, esi
  3057 000024DC 31C9                <2> 	xor ecx, ecx
  3058                              <2> getcommandzeroes:
  3059 000024DE 8A07                <2> 	mov al, [edi]
  3060 000024E0 47                  <2> 	inc edi
  3061 000024E1 3C3B                <2> 	cmp al, ';'
  3062 000024E3 740E                <2> 	je nomorezeroes
  3063 000024E5 3C00                <2> 	cmp al, 0
  3064 000024E7 740A                <2> 	je nomorezeroes
  3065 000024E9 3C20                <2> 	cmp al, ' '
  3066 000024EB 75F1                <2> 	jne getcommandzeroes
  3067 000024ED 41                  <2> 	inc ecx
  3068 000024EE E9EBFFFFFF          <2> 	jmp getcommandzeroes
  3069                              <2> nomorezeroes:
  3070 000024F3 41                  <2> 	inc ecx
  3071 000024F4 4F                  <2> 	dec edi
  3072 000024F5 8B1D[EC6F0300]      <2> 	mov ebx, [uid]
  3073 000024FB 8B15[F0540000]      <2> 	mov edx, [currentthread]
  3074 00002501 CF                  <2> 	iret
  3075                              <2> 	
  3076                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3077                              <2> hooksig: ;hook code in ESI to signal in AL
  3078 00002502 3C00                <2> 	cmp al, 0
  3079 00002504 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3080                              <2> ;	xor ebx, ebx
  3081                              <2> ;	mov bl, al
  3082                              <2> ;	shl bl, 2
  3083 00002506 BF[DC690300]        <2> 	mov edi, sigtable
  3084 0000250B 8937                <2> 	mov [edi], esi
  3085                              <2> .quit:
  3086 0000250D E979DDFFFF          <2> 	jmp timerinterrupt
  3087                              <1> %ifdef gui.included
  3088                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3089                              <1> %endif
  3090                              <1> %ifdef sound.included
  3091                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3092                              <1> %endif
  3093                              <1> %ifdef network.included
  3094                              <1> 	%include 'source/interrupts/19_netint.asm'
  3095                              <1> %endif
  3096                              <1> 
  3097                              <1> termcopy:
  3098                              <1> %ifdef io.serial
  3099                              <1> 	ret
  3100                              <1> %else
  3101                              <1> %ifdef terminal.vsync
  3102                              <1> 	mov byte [termcopyneeded], 1
  3103                              <1> 	ret
  3104                              <1> %else
  3105 00002512 E80A000000          <1> 	call newtermcopy
  3106 00002517 C3                  <1> 	ret
  3107                              <1> %endif
  3108 00002518 00                  <1> 	termcopyneeded db 0
  3109 00002519 00000000            <1> 	termcursorpos dd 0
  3110 0000251D 00000000            <1> 	removedvideo dd 0
  3111                              <1> newtermcopy:
  3112 00002521 60                  <1> 	pusha
  3113 00002522 BF[75880300]        <1> 	mov edi, videobuf
  3114 00002527 31DB                <1> 	xor ebx, ebx
  3115 00002529 881D[18250000]      <1> 	mov [termcopyneeded], bl
  3116 0000252F 8B1D[60240000]      <1> 	mov ebx, [videobufpos]
  3117 00002535 01DF                <1> 	add edi, ebx
  3118 00002537 893D[19250000]      <1> 	mov [termcursorpos], edi
  3119 0000253D E8C7000000          <1> 	call switchtermcursor
  3120 00002542 803D[5A550000]00    <1> 	cmp byte [guion], 0
  3121 00002549 0F8405000000        <1> 	je near nowincopy
  3122                              <1> %ifdef gui.included
  3123                              <1> 	mov byte [mouseselecton], 0
  3124                              <1> 	mov byte [termcopyon], 1
  3125                              <1> 	cmp byte [termguion], 1
  3126                              <1> 	je near windowvideocopy
  3127                              <1> %endif
  3128 0000254F E9AE000000          <1> 	jmp nocopytermatall
  3129                              <1> nowincopy:
  3130 00002554 BE00000A00          <1> 	mov esi, 0xA0000
  3131 00002559 A1[23020000]        <1> 	mov eax, [basecache]
  3132 0000255E C1E004              <1> 	shl eax, 4
  3133 00002561 29C6                <1> 	sub esi, eax
  3134 00002563 BF[75880300]        <1> 	mov edi, videobuf
  3135 00002568 31C9                <1> 	xor ecx, ecx
  3136 0000256A 668B0D[66240000]    <1> 	mov cx, [charxy]
  3137                              <1> nowincopy2:
  3138 00002571 8B07                <1> 	mov eax, [edi]
  3139 00002573 81C780250000        <1> 	add edi, (videobuf2 - videobuf)
  3140 00002579 8B1F                <1> 	mov ebx, [edi]
  3141 0000257B 8907                <1> 	mov [edi], eax
  3142 0000257D 81EF80250000        <1> 	sub edi, (videobuf2 - videobuf)
  3143 00002583 81C702000000        <1> 	add edi, 2
  3144 00002589 39D8                <1> 	cmp eax, ebx
  3145 0000258B 744B                <1> 	je nopresentwinfont
  3146 0000258D 81EF02000000        <1> 	sub edi, 2
  3147 00002593 BD[B4570000]        <1> 	mov ebp, fonts
  3148 00002598 31C0                <1> 	xor eax, eax
  3149 0000259A 668B07              <1> 	mov ax, [edi]
  3150 0000259D C1E004              <1> 	shl eax, 4
  3151 000025A0 01C5                <1> 	add ebp, eax
  3152 000025A2 81C702000000        <1> 	add edi, 2
  3153 000025A8 668B1F              <1> 	mov bx, [edi]
  3154 000025AB 31D2                <1> 	xor edx, edx
  3155 000025AD 8A15[66240000]      <1> 	mov dl, [charxy]
  3156 000025B3 C1C110              <1> 	rol ecx, 16
  3157 000025B6 B110                <1> 	mov cl, 16
  3158                              <1> nowinfont:
  3159 000025B8 8A4500              <1> 	mov al, [ebp]
  3160 000025BB D0C8                <1> 	ror al, 1
  3161 000025BD 80FB80              <1> 	cmp bl, 0x80
  3162 000025C0 7202                <1> 	jb notnotfont
  3163 000025C2 F6D0                <1> 	not al
  3164                              <1> notnotfont:
  3165 000025C4 8806                <1> 	mov [esi], al
  3166 000025C6 01D6                <1> 	add esi, edx
  3167 000025C8 45                  <1> 	inc ebp
  3168 000025C9 FEC9                <1> 	dec cl
  3169 000025CB 80F900              <1> 	cmp cl, 0
  3170 000025CE 75E8                <1> 	jne nowinfont
  3171 000025D0 C1E204              <1> 	shl edx, 4
  3172 000025D3 29D6                <1> 	sub esi, edx
  3173 000025D5 C1C110              <1> 	rol ecx, 16
  3174                              <1> nopresentwinfont:
  3175 000025D8 81C702000000        <1> 	add edi, 2
  3176 000025DE 46                  <1> 	inc esi
  3177 000025DF FEC9                <1> 	dec cl
  3178 000025E1 80F900              <1> 	cmp cl, 0
  3179 000025E4 758B                <1> 	jne nowincopy2
  3180 000025E6 8A0D[66240000]      <1> 	mov cl, [charxy]
  3181 000025EC 31D2                <1> 	xor edx, edx
  3182 000025EE 88CA                <1> 	mov dl, cl
  3183 000025F0 29D6                <1> 	sub esi, edx
  3184 000025F2 C1E204              <1> 	shl edx, 4
  3185 000025F5 01D6                <1> 	add esi, edx
  3186 000025F7 FECD                <1> 	dec ch
  3187 000025F9 80FD00              <1> 	cmp ch, 0
  3188 000025FC 0F856FFFFFFF        <1> 	jne nowincopy2
  3189                              <1> nocopytermatall:
  3190 00002602 E802000000          <1> 	call switchtermcursor
  3191 00002607 61                  <1> 	popa
  3192 00002608 C3                  <1> 	ret
  3193                              <1> 	
  3194                              <1> switchtermcursor:
  3195 00002609 8B3D[19250000]      <1> 	mov edi, [termcursorpos]
  3196 0000260F 668B4702            <1> 	mov ax, [edi + 2]
  3197 00002613 668B1F              <1> 	mov bx, [edi]
  3198 00002616 663D8000            <1> 	cmp ax, 0x80
  3199 0000261A 7209                <1> 	jb movlargecursorterm
  3200 0000261C 66B80700            <1> 	mov ax, 7
  3201 00002620 E904000000          <1> 	jmp movedcursorterm
  3202                              <1> movlargecursorterm:
  3203 00002625 66B8F000            <1> 	mov ax, 0xF0
  3204                              <1> movedcursorterm:
  3205 00002629 66894702            <1> 	mov [edi + 2], ax
  3206 0000262D 6681FB0000          <1> 	cmp bx, 0
  3207 00002632 7507                <1> 	jne fixednocursorterm
  3208 00002634 66BB2000            <1> 	mov bx, ' '
  3209 00002638 66891F              <1> 	mov [edi], bx
  3210                              <1> fixednocursorterm:
  3211 0000263B C3                  <1> 	ret
  3212                              <1> %endif
  3213                                      %include "source/dosints.asm"
  3214                              <1> int20h:
  3215 0000263C 66B8004C            <1> mov ax, 0x4C00
  3216                              <1> int21h:
  3217                              <1> dostosolleros:
  3218 00002640 6650                <1> 	push ax
  3219 00002642 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3220 00002646 8ED8                <1> 	mov ds, ax
  3221 00002648 8EC0                <1> 	mov es, ax
  3222 0000264A 8EE0                <1> 	mov fs, ax
  3223 0000264C 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3224 00002650 8EE8                <1> 	mov gs, ax
  3225 00002652 6658                <1> 	pop ax
  3226 00002654 9C                  <1> 	pushf
  3227 00002655 60                  <1> 	pusha
  3228 00002656 80FC01              <1> 	cmp ah, 1
  3229 00002659 0F8449000000        <1> 	je near dosgchar
  3230 0000265F 80FC02              <1> 	cmp ah, 2
  3231 00002662 0F844A000000        <1> 	je near doswchar
  3232 00002668 80FC09              <1> 	cmp ah, 9
  3233 0000266B 0F8451000000        <1> 	je near dosprintstr
  3234 00002671 80FC0A              <1> 	cmp ah, 0xA
  3235 00002674 0F8463000000        <1> 	je near dosgetstr
  3236 0000267A 80FC2B              <1> 	cmp ah, 0x2B
  3237 0000267D 0F84A2000000        <1> 	je near dosgetdate
  3238 00002683 80FC2C              <1> 	cmp ah, 0x2C
  3239 00002686 0F84BC000000        <1> 	je near dosgettime
  3240 0000268C 80FC4C              <1> 	cmp ah, 0x4C
  3241 0000268F 0F84D1000000        <1> 	je near dosexit
  3242                              <1> backtodos:
  3243 00002695 61                  <1> 	popa
  3244 00002696 9D                  <1> 	popf
  3245 00002697 6650                <1> 	push ax
  3246 00002699 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3247 0000269D 8ED8                <1> 	mov ds, ax
  3248 0000269F 8EC0                <1> 	mov es, ax
  3249 000026A1 8EE0                <1> 	mov fs, ax
  3250 000026A3 8EE8                <1> 	mov gs, ax
  3251 000026A5 6658                <1> 	pop ax
  3252 000026A7 CF                  <1> 	iret
  3253                              <1> 
  3254                              <1> dosgchar:
  3255 000026A8 E827FBFFFF          <1> 	call getchar
  3256 000026AD E9E3FFFFFF          <1> 	jmp backtodos
  3257                              <1> 	
  3258                              <1> doswchar:
  3259 000026B2 88D0                <1> 	mov al, dl
  3260 000026B4 30E4                <1> 	xor ah, ah
  3261 000026B6 B307                <1> 	mov bl, 7
  3262 000026B8 E893FBFFFF          <1> 	call prcharint
  3263 000026BD E9D3FFFFFF          <1> 	jmp backtodos
  3264                              <1> 	
  3265                              <1> dosprintstr:
  3266 000026C2 31F6                <1> 	xor esi, esi
  3267 000026C4 6689D6              <1> 	mov si, dx
  3268 000026C7 81C600004000        <1> 	add esi, dosprogloc
  3269 000026CD 66B82400            <1> 	mov ax, "$"
  3270 000026D1 B307                <1> 	mov bl, 7
  3271 000026D3 E8EAF4FFFF          <1> 	call printint
  3272 000026D8 E9B8FFFFFF          <1> 	jmp backtodos
  3273                              <1> 	
  3274                              <1> dosgetstr:
  3275 000026DD 31F6                <1> 	xor esi, esi
  3276 000026DF 6689D6              <1> 	mov si, dx
  3277 000026E2 81C600004000        <1> 	add esi, dosprogloc
  3278 000026E8 B900000000          <1> 	mov ecx, 0
  3279 000026ED 8A0E                <1> 	mov cl, [esi]
  3280 000026EF 81C602000000        <1> 	add esi, 2
  3281 000026F5 89F7                <1> 	mov edi, esi
  3282 000026F7 8935[21270000]      <1> 	mov [stringstart], esi
  3283 000026FD 01CF                <1> 	add edi, ecx
  3284 000026FF B00A                <1> 	mov al, 10
  3285 00002701 B307                <1> 	mov bl, 7
  3286 00002703 E8FDF5FFFF          <1> 	call rdprintdos
  3287 00002708 89F1                <1> 	mov ecx, esi
  3288 0000270A 2B0D[21270000]      <1> 	sub ecx, [stringstart]
  3289 00002710 8B35[21270000]      <1> 	mov esi, [stringstart]
  3290 00002716 884EFF              <1> 	mov [esi - 1], cl
  3291 00002719 884EFE              <1> 	mov [esi - 2], cl
  3292 0000271C E974FFFFFF          <1> 	jmp backtodos
  3293 00002721 00000000            <1> stringstart dd 0
  3294                              <1> 
  3295                              <1> dosgetdate:
  3296 00002725 E81C150000          <1> 	call time
  3297 0000272A 8A0D[5D3F0000]      <1> 	mov cl, [RTCtimeYear]
  3298 00002730 B500                <1> 	mov ch, 0
  3299 00002732 6681C1D007          <1> 	add cx, 2000
  3300 00002737 8A35[5C3F0000]      <1> 	mov dh, [RTCtimeMonth]
  3301 0000273D 8A15[5B3F0000]      <1> 	mov dl, [RTCtimeDay]
  3302 00002743 E94DFFFFFF          <1> 	jmp backtodos
  3303                              <1> 
  3304                              <1> dosgettime:
  3305 00002748 E8F9140000          <1> 	call time
  3306 0000274D 8A2D[5A3F0000]      <1> 	mov ch, [RTCtimeHour]
  3307 00002753 8A0D[593F0000]      <1> 	mov cl, [RTCtimeMinute]
  3308 00002759 8A35[583F0000]      <1> 	mov dh, [RTCtimeSecond]
  3309 0000275F B200                <1> 	mov dl, 0
  3310 00002761 E92FFFFFFF          <1> 	jmp backtodos
  3311                              <1> 	
  3312                              <1> dosexit:
  3313 00002766 BE[35550000]        <1> 	mov esi, line
  3314 0000276B E84BF4FFFF          <1> 	call print
  3315 00002770 61                  <1> 	popa
  3316 00002771 9D                  <1> 	popf
  3317 00002772 8B25[E06D0300]      <1> 	mov esp, [previousstack]
  3318 00002778 31DB                <1> 	xor ebx, ebx
  3319 0000277A 88C3                <1> 	mov bl, al
  3320 0000277C 80FB00              <1> 	cmp bl, 0
  3321 0000277F 0F85C1F3FFFF        <1> 	jne near exitprog.error
  3322 00002785 C3                  <1> 	ret
  3323                                      %include "source/solleros.asm"
  3324                              <1> 	;SOLLEROS.ASM
  3325                              <1> os:
  3326                              <1> setdefenv:
  3327 00002786 C605[EC6D0300]2F    <1> 	mov byte [currentfolder], '/'
  3328 0000278D C705[E86D0300]0100- <1> 	mov dword [currentfolderloc], 1
  3329 00002795 0000                <1>
  3330 00002797 E8D1F4FFFF          <1> 	call clear
  3331                              <1> 	
  3332                              <1> bootfilecheck:
  3333 0000279C 803D[F06F0300]01    <1> 	cmp byte [ranboot], 1
  3334 000027A3 0F841C000000        <1> 	je near nobootfile
  3335                              <1> 	%ifdef hardware.automatic
  3336                              <1> 		call initializelater ;Initialize components that have debug messages
  3337                              <1> 	%endif
  3338                              <1> 	%ifdef disk.none
  3339                              <1> 	%else
  3340 000027A9 BF[F4540000]        <1> 		mov edi, bootfilename
  3341 000027AE BE00004000          <1> 		mov esi, 0x400000
  3342 000027B3 E8352C0000          <1> 		call loadfile
  3343 000027B8 81FA00000000        <1> 		cmp edx, 0
  3344 000027BE 7505                <1> 		jne nobootfile
  3345 000027C0 E8750E0000          <1> 		call progbatchfound
  3346                              <1> 	%endif
  3347                              <1> nobootfile:	
  3348 000027C5 C605[F06F0300]01    <1> 	mov byte [ranboot], 1
  3349                              <1> 
  3350 000027CC BE[03000000]        <1> 	mov esi, signature
  3351                              <1> .sigcopyloop:	;this prevents an odd error
  3352 000027D1 658A06              <1> 	mov al, [gs:esi]
  3353 000027D4 8806                <1> 	mov [esi], al
  3354 000027D6 46                  <1> 	inc esi
  3355 000027D7 81FE[11000000]      <1> 	cmp esi, signatureend
  3356 000027DD 72F2                <1> 	jb .sigcopyloop
  3357                              <1> 	
  3358 000027DF BE[03000000]        <1> 	mov esi, signature
  3359 000027E4 E8D2F3FFFF          <1> 	call print
  3360 000027E9 8B0D[0D000000]      <1> 	mov ecx, [signatureend - 4]
  3361 000027EF E841070000          <1> 	call showdec
  3362 000027F4 BE[35550000]        <1> 	mov esi, line
  3363 000027F9 E8BDF3FFFF          <1> 	call print
  3364 000027FE BE[11550000]        <1> 	mov esi, userask
  3365 00002803 E8B3F3FFFF          <1> 	call print
  3366                              <1> 
  3367                              <1> usercheck:
  3368 00002808 BE[60840300]        <1> 	mov esi, buftxt
  3369 0000280D BF[60880300]        <1> 	mov edi, buftxtend
  3370 00002812 B00A                <1> 	mov al, 10
  3371 00002814 E8D8F4FFFF          <1> 	call rdprint
  3372 00002819 56                  <1> 	push esi
  3373 0000281A BE[1B550000]        <1> 	mov esi, pwdask
  3374 0000281F E897F3FFFF          <1> 	call print
  3375 00002824 5E                  <1> 	pop esi
  3376 00002825 46                  <1> 	inc esi
  3377 00002826 8935[27290000]      <1> 	mov [esipass], esi
  3378                              <1> passcheck:
  3379 0000282C E8A3F9FFFF          <1> 	call getchar
  3380 00002831 3C0A                <1> 	cmp al, 10
  3381 00002833 0F843E000000        <1> 	je near gotpass
  3382 00002839 3C08                <1> 	cmp al, 8
  3383 0000283B 0F8415000000        <1> 	je near backpass
  3384 00002841 8806                <1> 	mov [esi], al
  3385 00002843 46                  <1> 	inc esi
  3386 00002844 30E4                <1> 	xor ah, ah
  3387 00002846 B02A                <1> 	mov al, "*"
  3388 00002848 E803FAFFFF          <1> 	call prcharint
  3389 0000284D E9DAFFFFFF          <1> 	jmp passcheck
  3390 00002852 08200800            <1> backcursor2 db 8," ",8,0
  3391                              <1> backpass:
  3392 00002856 3B35[27290000]      <1> 	cmp esi, [esipass]
  3393 0000285C 0F84CAFFFFFF        <1> 	je near passcheck
  3394 00002862 4E                  <1> 	dec esi
  3395 00002863 C60600              <1> 	mov byte [esi], 0
  3396 00002866 56                  <1> 	push esi
  3397 00002867 BE[52280000]        <1> 	mov esi, backcursor2
  3398 0000286C E84AF3FFFF          <1> 	call print
  3399 00002871 5E                  <1> 	pop esi
  3400 00002872 E9B5FFFFFF          <1> 	jmp passcheck
  3401                              <1> gotpass:
  3402 00002877 B00A                <1> 	mov al, 10
  3403 00002879 E8D2F9FFFF          <1> 	call prcharint
  3404 0000287E 30C0                <1> 	xor al, al
  3405 00002880 31C9                <1> 	xor ecx, ecx
  3406 00002882 8806                <1> 	mov [esi], al
  3407 00002884 BB[37550000]        <1> 	mov ebx, userlst
  3408                              <1> userfind:
  3409 00002889 BE[60840300]        <1> 	mov esi, buftxt
  3410 0000288E 8A06                <1> 	mov al, [esi]
  3411 00002890 3C00                <1> 	cmp al, 0
  3412 00002892 0F84EEFEFFFF        <1> 	je near os
  3413 00002898 891D[2B290000]      <1> 	mov [usercache], ebx
  3414 0000289E E87E030000          <1> 	call tester
  3415 000028A3 3C01                <1> 	cmp al, 1
  3416 000028A5 7419                <1> 	je pwdtest
  3417 000028A7 41                  <1> 	inc ecx
  3418                              <1> nxtuser:
  3419 000028A8 8A03                <1> 	mov al, [ebx]
  3420 000028AA 43                  <1> 	inc ebx
  3421 000028AB 3C00                <1> 	cmp al, 0
  3422 000028AD 75F9                <1> 	jne nxtuser
  3423 000028AF 81FB[5A550000]      <1> 	cmp ebx, userlstend
  3424 000028B5 0F83CBFEFFFF        <1> 	jae near os
  3425 000028BB E9C9FFFFFF          <1> 	jmp userfind
  3426                              <1> pwdtest:
  3427 000028C0 46                  <1> 	inc esi
  3428 000028C1 43                  <1> 	inc ebx
  3429 000028C2 E85A030000          <1> 	call tester
  3430 000028C7 3C01                <1> 	cmp al, 1
  3431 000028C9 7405                <1> 	je pwdrgt
  3432 000028CB E9D8FFFFFF          <1> 	jmp nxtuser
  3433                              <1> pwdrgt:
  3434 000028D0 D1E9                <1> 	shr ecx, 1
  3435 000028D2 890D[EC6F0300]      <1> 	mov [uid], ecx
  3436 000028D8 E890F3FFFF          <1> 	call clear
  3437 000028DD 31C9                <1> 	xor ecx, ecx
  3438 000028DF 41                  <1> 	inc ecx
  3439 000028E0 890D[79D30300]      <1> 	mov [commandbufpos], ecx
  3440                              <1> returnfromexp:
  3441 000028E6 66B90002            <1> 	mov cx, 200h
  3442 000028EA BE[60840300]        <1> 	mov esi, buftxt
  3443 000028EF 8935[1D2C0000]      <1> 	mov [currentcommandloc], esi
  3444 000028F5 E825000000          <1> 	call bufclr
  3445                              <1> clearolddata:
  3446 000028FA 31C0                <1> 	xor eax, eax
  3447 000028FC A2[F16F0300]        <1> 	mov [IFON], al
  3448 00002901 A2[F26F0300]        <1> 	mov [IFTRUE], al
  3449 00002906 A2[5A700300]        <1> 	mov [BATCHISON], al
  3450 0000290B A3[56700300]        <1> 	mov [BATCHPOS], eax
  3451 00002910 A2[5B700300]        <1> 	mov [LOOPON], al
  3452 00002915 A3[5C700300]        <1> 	mov [LOOPPOS], eax
  3453 0000291A E939000000          <1> 	jmp nwcmd
  3454                              <1> bufclr:	
  3455 0000291F 30C0                <1> 	xor al, al
  3456 00002921 8806                <1> 	mov [esi], al
  3457 00002923 46                  <1> 	inc esi
  3458 00002924 E2F9                <1> 	loop bufclr
  3459 00002926 C3                  <1> 	ret
  3460                              <1> 
  3461 00002927 00000000            <1> esipass dd 0
  3462 0000292B [37550000]          <1> usercache dd userlst
  3463                              <1> 	
  3464                              <1> buftxtclear:
  3465 0000292F 30C0                <1> 	xor al, al
  3466 00002931 BE[60840300]        <1> 	mov esi, buftxt
  3467 00002936 81FE[60880300]      <1> clearbuftxt: cmp esi, buf2
  3468 0000293C 7314                <1> 	jae retbufclr
  3469 0000293E 8806                <1> 	mov [esi], al
  3470 00002940 46                  <1> 	inc esi
  3471 00002941 E9F0FFFFFF          <1> 	jmp clearbuftxt
  3472                              <1> 
  3473 00002946 39DE                <1> clearitbuf: cmp esi, ebx
  3474 00002948 7308                <1> 	jae retbufclr
  3475 0000294A 8806                <1> 	mov [esi], al
  3476 0000294C 46                  <1> 	inc esi
  3477 0000294D E9F4FFFFFF          <1> 	jmp clearitbuf
  3478 00002952 C3                  <1> retbufclr: ret
  3479                              <1> 
  3480 00002953 E900000000          <1> full:	jmp nwcmd
  3481                              <1> 
  3482                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3483                              <1> nwcmd:
  3484 00002958 FB                  <1> 	sti
  3485 00002959 31C0                <1> 	xor eax, eax
  3486 0000295B 3905[392B0000]      <1> 	cmp [nextcommandloc], eax
  3487 00002961 7416                <1> 	je nomultiplecommand
  3488 00002963 8B35[392B0000]      <1> 	mov esi, [nextcommandloc]
  3489 00002969 8935[3D2B0000]      <1> 	mov [thiscommandloc], esi
  3490 0000296F E8D2010000          <1> 	call fixvariables
  3491 00002974 E9DFFFFFFF          <1> 	jmp nwcmd
  3492                              <1> nomultiplecommand:
  3493 00002979 A3[3D2B0000]        <1> 	mov [thiscommandloc], eax
  3494 0000297E 3805[EF540000]      <1> 	cmp [threadson], al
  3495 00002984 7405                <1> 	je noclinwcmd
  3496 00002986 A2[EF540000]        <1> 	mov [threadson], al
  3497                              <1> noclinwcmd:
  3498 0000298B B001                <1> 	mov al, 1
  3499 0000298D 3805[5A700300]      <1> 	cmp [BATCHISON], al
  3500 00002993 7501                <1> 	jne cancel
  3501 00002995 C3                  <1> 	ret
  3502 00002996 30C0                <1> cancel:	xor al, al
  3503 00002998 A2[F16F0300]        <1> 	mov [IFON], al
  3504 0000299D A2[5A700300]        <1> 	mov [BATCHISON], al
  3505 000029A2 B05B                <1> 	mov al, '['
  3506 000029A4 66BB0700            <1> 	mov bx, 7
  3507 000029A8 E8BAF8FFFF          <1> 	call prcharq
  3508 000029AD 8B35[2B290000]      <1> 	mov esi, [usercache]
  3509 000029B3 E8E4F1FFFF          <1> 	call printquiet
  3510 000029B8 BE[25550000]        <1> 	mov esi, computer
  3511 000029BD E8DAF1FFFF          <1> 	call printquiet
  3512 000029C2 BE[EC6D0300]        <1> 	mov esi, currentfolder
  3513 000029C7 0335[E46D0300]      <1> 	add esi, [lastfolderloc]
  3514 000029CD E8CAF1FFFF          <1> 	call printquiet
  3515 000029D2 BE[30550000]        <1> 	mov esi, endprompt
  3516 000029D7 E8DFF1FFFF          <1> 	call print
  3517 000029DC E84EFFFFFF          <1> 	call buftxtclear
  3518 000029E1 BE[60840300]        <1> 	mov esi, buftxt
  3519 000029E6 C605[BD210000]01    <1> 	mov byte [commandedit], 1
  3520 000029ED B00A                <1> 	mov al, 10
  3521 000029EF 66BB0700            <1> 	mov bx, 7
  3522 000029F3 BF[60880300]        <1> 	mov edi, buftxtend
  3523 000029F8 E8F4F2FFFF          <1> 	call rdprint
  3524 000029FD C605[BD210000]00    <1> 	mov byte [commandedit], 0
  3525 00002A04 803D[60840300]00    <1> 	cmp byte [buftxt], 0
  3526 00002A0B 0F8447FFFFFF        <1> 	je near nwcmd
  3527 00002A11 8B35[79D30300]      <1> gotcmd:	mov esi, [commandbufpos]
  3528 00002A17 8935[75D30300]      <1> 	mov [lastcommandpos], esi
  3529 00002A1D FF05[81D30300]      <1> 	inc dword [commandsentered]
  3530 00002A23 BF[60840300]        <1> 	mov edi, buftxt
  3531 00002A28 81C6[85D30300]      <1> 	add esi, commandbuf
  3532 00002A2E 81FE[85E30300]      <1> 	cmp esi, commandbufend
  3533 00002A34 7605                <1> 	jbe copycommand
  3534 00002A36 BE[85D30300]        <1> 	mov esi, commandbuf
  3535                              <1> copycommand:
  3536 00002A3B 8A07                <1> 	mov al, [edi]
  3537 00002A3D 8806                <1> 	mov [esi], al
  3538 00002A3F 47                  <1> 	inc edi
  3539 00002A40 46                  <1> 	inc esi
  3540 00002A41 3C00                <1> 	cmp al, 0
  3541 00002A43 7412                <1> 	je donecopy
  3542 00002A45 81FE[85E30300]      <1> 	cmp esi, commandbufend
  3543 00002A4B 76EE                <1> 	jbe copycommand
  3544 00002A4D BE[85D30300]        <1> 	mov esi, commandbuf
  3545 00002A52 E9E4FFFFFF          <1> 	jmp copycommand
  3546                              <1> donecopy:
  3547 00002A57 81EE[85D30300]      <1> 	sub esi, commandbuf
  3548 00002A5D 8935[79D30300]      <1> 	mov [commandbufpos], esi
  3549 00002A63 E8D9000000          <1> 	call run
  3550 00002A68 E9EBFEFFFF          <1> 	jmp nwcmd
  3551                              <1> 
  3552 00002A6D E8BDFEFFFF          <1> input:	call buftxtclear
  3553 00002A72 BE[60840300]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3554 00002A77 BF[60880300]        <1> 	mov edi, buftxtend
  3555 00002A7C B00A                <1> stdin:	mov al, 10
  3556 00002A7E B307                <1> 	mov bl, 7
  3557 00002A80 E86CF2FFFF          <1> 	call rdprint
  3558 00002A85 C3                  <1> 	ret
  3559                              <1> 
  3560                              <1> replacevariable:
  3561 00002A86 8A4601              <1> 	mov al, [esi + 1]
  3562 00002A89 C64601FF            <1> 	mov byte [esi + 1], 255
  3563 00002A8D 3C24                <1> 	cmp al, "$"
  3564 00002A8F 0F84B1000000        <1> 	je near fixvariables
  3565 00002A95 884601              <1> 	mov [esi + 1], al
  3566 00002A98 56                  <1> 	push esi
  3567 00002A99 81EE[60840300]      <1> 	sub esi, buftxt
  3568 00002A9F 89F7                <1> 	mov edi, esi
  3569 00002AA1 81C6[60840300]      <1> 	add esi, buftxt
  3570 00002AA7 47                  <1> 	inc edi
  3571 00002AA8 BB[60700300]        <1> 	mov ebx, variables
  3572 00002AAD E8C6160000          <1> 	call nxtvrech
  3573 00002AB2 89F7                <1> 	mov edi, esi
  3574 00002AB4 31DB                <1> 	xor ebx, ebx
  3575 00002AB6 4E                  <1> 	dec esi
  3576                              <1> findvarname:
  3577 00002AB7 4E                  <1> 	dec esi
  3578 00002AB8 8A06                <1> 	mov al, [esi]
  3579 00002ABA 43                  <1> 	inc ebx
  3580 00002ABB 3C04                <1> 	cmp al, 4
  3581 00002ABD 75F8                <1> 	jne findvarname
  3582 00002ABF 5E                  <1> 	pop esi
  3583                              <1> replacevarloop:
  3584 00002AC0 8A07                <1> 	mov al, [edi]
  3585 00002AC2 3C00                <1> 	cmp al, 0
  3586 00002AC4 0F8416000000        <1> 	je near compressbuftxt
  3587 00002ACA 81FB00000000        <1> 	cmp ebx, 0
  3588 00002AD0 0F8419000000        <1> 	je near expandbuftxt
  3589 00002AD6 8806                <1> 	mov [esi], al
  3590 00002AD8 4B                  <1> 	dec ebx
  3591 00002AD9 46                  <1> 	inc esi
  3592 00002ADA 47                  <1> 	inc edi
  3593 00002ADB E9E0FFFFFF          <1> 	jmp replacevarloop
  3594                              <1> compressbuftxt:
  3595 00002AE0 8A041E              <1> 	mov al, [esi + ebx]
  3596 00002AE3 8806                <1> 	mov [esi], al
  3597 00002AE5 46                  <1> 	inc esi
  3598 00002AE6 3C00                <1> 	cmp al, 0
  3599 00002AE8 75F6                <1> 	jne compressbuftxt
  3600 00002AEA E957000000          <1> 	jmp fixvariables
  3601                              <1> expandbuftxt:
  3602 00002AEF 89F1                <1> 	mov ecx, esi
  3603 00002AF1 8A26                <1> 	mov ah, [esi]
  3604                              <1> expandbuftxtlp:
  3605 00002AF3 8A1E                <1> 	mov bl, [esi]
  3606 00002AF5 46                  <1> 	inc esi
  3607 00002AF6 8A3E                <1> 	mov bh, [esi]
  3608 00002AF8 8826                <1> 	mov [esi], ah
  3609 00002AFA 88FC                <1> 	mov ah, bh
  3610 00002AFC 80FB00              <1> 	cmp bl, 0
  3611 00002AFF 75F2                <1> 	jne expandbuftxtlp
  3612 00002B01 89CE                <1> 	mov esi, ecx
  3613 00002B03 8806                <1> 	mov [esi], al
  3614 00002B05 47                  <1> 	inc edi
  3615 00002B06 8A07                <1> 	mov al, [edi]
  3616 00002B08 3C00                <1> 	cmp al, 0
  3617 00002B0A 0F8436000000        <1> 	je near fixvariables
  3618 00002B10 46                  <1> 	inc esi
  3619 00002B11 E9D9FFFFFF          <1> 	jmp expandbuftxt
  3620                              <1> multipleprogline:
  3621 00002B16 30E4                <1> 	xor ah, ah
  3622 00002B18 8826                <1> 	mov [esi], ah
  3623 00002B1A 46                  <1> 	inc esi
  3624 00002B1B 8935[392B0000]      <1> 	mov [nextcommandloc], esi
  3625 00002B21 E93E000000          <1> 	jmp donefixvariables
  3626                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3627 00002B26 46                  <1> 	inc esi
  3628 00002B27 8A06                <1> 	mov al, [esi]
  3629 00002B29 C606FF              <1> 	mov byte [esi], 255
  3630 00002B2C 3C23                <1> 	cmp al, '#'
  3631 00002B2E 7416                <1> 	je fixvariables
  3632 00002B30 4E                  <1> 	dec esi
  3633 00002B31 C60600              <1> 	mov byte [esi], 0
  3634 00002B34 E90D000000          <1> 	jmp fixvariables
  3635                              <1> 	
  3636 00002B39 00000000            <1> nextcommandloc dd 0
  3637 00002B3D 00000000            <1> thiscommandloc dd 0	
  3638                              <1> run:
  3639 00002B41 BE[60840300]        <1> 	mov esi, buftxt
  3640                              <1> fixvariables:
  3641 00002B46 46                  <1> 	inc esi
  3642 00002B47 8A06                <1> 	mov al, [esi]
  3643 00002B49 3C23                <1> 	cmp al, '#'	;inline comment
  3644 00002B4B 74D9                <1> 	je inlinecomment
  3645 00002B4D 3C24                <1> 	cmp al, '$' ;variable
  3646 00002B4F 0F8431FFFFFF        <1> 	je near replacevariable
  3647 00002B55 3C3B                <1> 	cmp al, ';' ;program list
  3648 00002B57 74BD                <1> 	je multipleprogline
  3649 00002B59 3C00                <1> 	cmp al, 0
  3650 00002B5B 75E9                <1> 	jne fixvariables
  3651 00002B5D 31C0                <1> 	xor eax, eax
  3652 00002B5F A3[392B0000]        <1> 	mov [nextcommandloc], eax
  3653                              <1> donefixvariables:
  3654 00002B64 803D[84310000]00    <1> 	cmp byte [indexdone], 0
  3655 00002B6B 7505                <1> 	jne progtest
  3656 00002B6D E874050000          <1> 	call indexfiles
  3657                              <1> progtest:
  3658 00002B72 31C0                <1> 	xor eax, eax
  3659 00002B74 BB[E0690300]        <1> 	mov ebx, fileindex
  3660 00002B79 668B03              <1> prgnxt:	mov ax, [ebx]
  3661 00002B7C B1FF                <1> 	mov cl, 255
  3662 00002B7E B52C                <1> 	mov ch, 44
  3663 00002B80 6639C8              <1> 	cmp ax, cx
  3664 00002B83 740E                <1> 	je fndprg
  3665 00002B85 43                  <1> 	inc ebx
  3666 00002B86 81FB[E06D0300]      <1> 	cmp ebx, fileindexend
  3667 00002B8C 7363                <1> 	jae prgnf
  3668 00002B8E E9E6FFFFFF          <1> 	jmp prgnxt
  3669 00002B93 81C302000000        <1> fndprg: add ebx, 2
  3670 00002B99 31C9                <1> 	xor ecx, ecx
  3671 00002B9B BE[60840300]        <1> 	mov esi, buftxt
  3672 00002BA0 390D[3D2B0000]      <1> 	cmp [thiscommandloc], ecx
  3673 00002BA6 7406                <1> 	je noprgtstmultiple
  3674 00002BA8 8B35[3D2B0000]      <1> 	mov esi, [thiscommandloc]
  3675                              <1> noprgtstmultiple:
  3676 00002BAE E8AF000000          <1> 	call cndtest
  3677 00002BB3 3C01                <1> 	cmp al, 1
  3678 00002BB5 7305                <1> 	jae prggood
  3679 00002BB7 E9BDFFFFFF          <1> 	jmp prgnxt
  3680 00002BBC 81FB[E06D0300]      <1> prggood: cmp ebx, fileindexend
  3681 00002BC2 7358                <1> 	jae prgdn
  3682 00002BC4 31C0                <1> 	xor eax, eax
  3683 00002BC6 BE[60840300]        <1> 	mov esi, buftxt
  3684 00002BCB 3905[3D2B0000]      <1> 	cmp [thiscommandloc], eax
  3685 00002BD1 7406                <1> 	je noprggoodmul
  3686 00002BD3 8B35[3D2B0000]      <1> 	mov esi, [thiscommandloc]
  3687                              <1> noprggoodmul:
  3688 00002BD9 8935[1D2C0000]      <1> 	mov [currentcommandloc], esi
  3689 00002BDF 81C303000000        <1> 	add ebx, 3
  3690 00002BE5 8B3B                <1> 	mov edi, [ebx]
  3691 00002BE7 C605[EF540000]02    <1> 	mov byte [threadson], 2
  3692 00002BEE FFD7                <1> 	call edi
  3693 00002BF0 C3                  <1> 	ret
  3694                              <1> prgnf:	
  3695 00002BF1 8B35[1D2C0000]      <1> 	mov esi, [currentcommandloc]
  3696 00002BF7 8A06                <1> 	mov al, [esi]
  3697 00002BF9 3C00                <1> 	cmp al, 0
  3698 00002BFB 741F                <1> 	je prgdn
  3699 00002BFD BE[FC540000]        <1> 	mov esi, notfound1
  3700 00002C02 E8B4EFFFFF          <1> 	call print
  3701 00002C07 8B35[1D2C0000]      <1> 	mov esi, [currentcommandloc]
  3702 00002C0D E8A9EFFFFF          <1> 	call print
  3703 00002C12 BE[04550000]        <1> 	mov esi, notfound2
  3704 00002C17 E89FEFFFFF          <1> 	call print
  3705 00002C1C C3                  <1> prgdn:	ret
  3706                              <1> 
  3707 00002C1D 00000000            <1> currentcommandloc dd 0
  3708                              <1> 
  3709                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3710 00002C21 6631C0              <1> 	xor ax, ax
  3711 00002C24 8A06                <1> retest:	mov al, [esi]
  3712 00002C26 8A23                <1> 	mov ah, [ebx]
  3713 00002C28 3C00                <1> 	cmp al, 0
  3714 00002C2A 740B                <1> 	je testtrue
  3715 00002C2C 38E0                <1> 	cmp al, ah
  3716 00002C2E 750F                <1> 	jne testfalse
  3717 00002C30 43                  <1> 	inc ebx
  3718 00002C31 46                  <1> 	inc esi
  3719 00002C32 E9EDFFFFFF          <1> 	jmp retest
  3720                              <1> testtrue:
  3721 00002C37 80FC00              <1> 	cmp ah, 0
  3722 00002C3A 7503                <1> 	jne testfalse
  3723 00002C3C B001                <1> 	mov al, 1
  3724 00002C3E C3                  <1> 	ret
  3725                              <1> testfalse:
  3726 00002C3F 30C0                <1> 	xor al, al
  3727 00002C41 C3                  <1> 	ret
  3728                              <1> 
  3729                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3730 00002C42 30C0                <1> 	xor al, al
  3731                              <1> opretest:
  3732 00002C44 8A06                <1> 	mov al, [esi]
  3733 00002C46 8A23                <1> 	mov ah, [ebx]
  3734 00002C48 38E0                <1> 	cmp al, ah
  3735 00002C4A 7513                <1> 	jne optestfalse
  3736 00002C4C 80FC00              <1> 	cmp ah, 0
  3737 00002C4F 7407                <1> 	je optesttrue
  3738 00002C51 43                  <1> 	inc ebx
  3739 00002C52 46                  <1> 	inc esi
  3740 00002C53 E9ECFFFFFF          <1> 	jmp opretest
  3741                              <1> optesttrue:
  3742 00002C58 3C00                <1> 	cmp al, 0
  3743 00002C5A 7503                <1> 	jne optestfalse
  3744 00002C5C B001                <1> 	mov al, 1
  3745 00002C5E C3                  <1> 	ret
  3746                              <1> optestfalse:
  3747 00002C5F 30C0                <1> 	xor al, al
  3748 00002C61 C3                  <1> 	ret
  3749                              <1> 
  3750                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3751 00002C62 30C0                <1> 	xor al, al
  3752 00002C64 8A06                <1> cndretest:	mov al, [esi]
  3753 00002C66 8A23                <1> 	mov ah, [ebx]
  3754 00002C68 38CC                <1> 	cmp ah, cl
  3755 00002C6A 740B                <1> 	je cndtesttrue
  3756 00002C6C 38E0                <1> 	cmp al, ah
  3757 00002C6E 750E                <1> 	jne cndtestfalse
  3758 00002C70 43                  <1> 	inc ebx
  3759 00002C71 46                  <1> 	inc esi
  3760 00002C72 E9EDFFFFFF          <1> 	jmp cndretest
  3761                              <1> cndtesttrue:
  3762 00002C77 38C8                <1> 	cmp al, cl
  3763 00002C79 7506                <1> 	jne cndtestalmost
  3764 00002C7B B001                <1> 	mov al, 1
  3765 00002C7D C3                  <1> 	ret
  3766                              <1> cndtestfalse:
  3767 00002C7E 30C0                <1> 	xor al, al
  3768 00002C80 C3                  <1> 	ret
  3769                              <1> cndtestalmost:
  3770 00002C81 B002                <1> 	mov al, 2
  3771 00002C83 C3                  <1> 	ret
  3772                              <1> 	
  3773                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3774                              <1> 		                ;ends if array seperator is found backwards after 0
  3775                              <1> 	arnxt:	      
  3776 00002C84 88E8                <1> 		mov al, ch
  3777 00002C86 88CC                <1> 		mov ah, cl        
  3778 00002C88 663906              <1> 		cmp [esi], ax
  3779 00002C8B 7453                <1> 		je ardn
  3780 00002C8D 66390E              <1> 		cmp [esi], cx
  3781 00002C90 740A                <1> 		je arfnd
  3782 00002C92 46                  <1> 		inc esi
  3783 00002C93 39DE                <1> 		cmp esi, ebx
  3784 00002C95 7349                <1> 		jae ardn
  3785 00002C97 E9E8FFFFFF          <1> 		jmp arnxt
  3786 00002C9C 81C602000000        <1> 	arfnd: add esi, 2
  3787 00002CA2 891D[E12C0000]      <1> 		mov [arbx], ebx
  3788 00002CA8 890D[E52C0000]      <1> 		mov [arcx], ecx
  3789 00002CAE E808EFFFFF          <1> 		call print
  3790 00002CB3 8935[E72C0000]      <1> 		mov [arsi], esi
  3791 00002CB9 BE[35550000]        <1> 		mov esi, line
  3792 00002CBE E8F8EEFFFF          <1> 		call print
  3793 00002CC3 8B1D[E12C0000]      <1> 		mov ebx, [arbx]
  3794 00002CC9 668B0D[E52C0000]    <1> 		mov cx, [arcx]
  3795 00002CD0 8B35[E72C0000]      <1> 		mov esi, [arsi]
  3796 00002CD6 46                  <1> 		inc esi
  3797 00002CD7 39DE                <1> 		cmp esi, ebx
  3798 00002CD9 7305                <1> 		jae ardn
  3799 00002CDB E9A4FFFFFF          <1> 		jmp arnxt
  3800 00002CE0 C3                  <1> 	ardn:	ret
  3801 00002CE1 00000000            <1> arbx:	dw 0,0
  3802 00002CE5 0000                <1> arcx:	db 0,0
  3803 00002CE7 00000000            <1> arsi:	dw 0,0
  3804                              <1> 
  3805                              <1> clearbuffer:
  3806 00002CEB BE[60880300]        <1> 	mov esi, buf2
  3807 00002CF0 B030                <1> 	mov al, '0'
  3808 00002CF2 81FE[74880300]      <1> clearbuf: cmp esi, numbuf
  3809 00002CF8 7308                <1> 	jae doneclearbuff
  3810 00002CFA 8806                <1> 	mov [esi], al
  3811 00002CFC 46                  <1> 	inc esi
  3812 00002CFD E9F0FFFFFF          <1> 	jmp clearbuf
  3813                              <1> doneclearbuff: 
  3814 00002D02 C3                  <1> 		ret
  3815                              <1> 
  3816                              <1> convert:
  3817 00002D03 4E                  <1> 	dec esi
  3818 00002D04 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3819                              <1> .lp:
  3820 00002D06 89DE                <1> 	mov esi, ebx
  3821 00002D08 81EE09000000        <1> 	sub esi, 9
  3822 00002D0E 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3823 00002D14 720D                <1> 	jb .8
  3824 00002D16 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3825 00002D1C FE06                <1> 	inc byte [esi]
  3826 00002D1E E9E3FFFFFF          <1> 	jmp .lp
  3827 00002D23 46                  <1> .8:	inc esi
  3828 00002D24 81F900E1F505        <1> 	cmp ecx, 100000000
  3829 00002D2A 720D                <1> 	jb .7
  3830 00002D2C 81E900E1F505        <1> 	sub ecx, 100000000
  3831 00002D32 FE06                <1> 	inc byte [esi]
  3832 00002D34 E9CDFFFFFF          <1> 	jmp .lp
  3833 00002D39 46                  <1> .7:	inc esi
  3834 00002D3A 81F980969800        <1> 	cmp ecx, 10000000
  3835 00002D40 720D                <1> 	jb .6
  3836 00002D42 81E980969800        <1> 	sub ecx, 10000000
  3837 00002D48 FE06                <1> 	inc byte [esi]
  3838 00002D4A E9B7FFFFFF          <1> 	jmp .lp
  3839 00002D4F 46                  <1> .6:	inc esi
  3840 00002D50 81F940420F00        <1> 	cmp ecx, 1000000
  3841 00002D56 720D                <1> 	jb .5
  3842 00002D58 81E940420F00        <1> 	sub ecx, 1000000
  3843 00002D5E FE06                <1> 	inc byte [esi]
  3844 00002D60 E9A1FFFFFF          <1> 	jmp .lp
  3845 00002D65 46                  <1> .5:	inc esi
  3846 00002D66 81F9A0860100        <1> 	cmp ecx, 100000
  3847 00002D6C 720D                <1> 	jb .4
  3848 00002D6E 81E9A0860100        <1> 	sub ecx, 100000
  3849 00002D74 FE06                <1> 	inc byte [esi]
  3850 00002D76 E98BFFFFFF          <1> 	jmp .lp
  3851 00002D7B 46                  <1> .4:	inc esi
  3852 00002D7C 81F910270000        <1> 	cmp ecx, 10000
  3853 00002D82 720D                <1> 	jb .3
  3854 00002D84 81E910270000        <1> 	sub ecx, 10000
  3855 00002D8A FE06                <1> 	inc byte [esi]
  3856 00002D8C E975FFFFFF          <1> 	jmp .lp
  3857 00002D91 46                  <1> .3:	inc esi
  3858 00002D92 81F9E8030000        <1> 	cmp ecx, 1000
  3859 00002D98 720D                <1> 	jb .2
  3860 00002D9A 81E9E8030000        <1> 	sub ecx, 1000
  3861 00002DA0 FE06                <1> 	inc byte [esi]
  3862 00002DA2 E95FFFFFFF          <1> 	jmp .lp
  3863 00002DA7 46                  <1> .2:	inc esi
  3864 00002DA8 81F964000000        <1> 	cmp ecx, 100
  3865 00002DAE 720D                <1> 	jb .1
  3866 00002DB0 81E964000000        <1> 	sub ecx, 100
  3867 00002DB6 FE06                <1> 	inc byte [esi]
  3868 00002DB8 E949FFFFFF          <1> 	jmp .lp
  3869 00002DBD 46                  <1> .1:	inc esi
  3870 00002DBE 81F90A000000        <1> 	cmp ecx, 10
  3871 00002DC4 720D                <1> 	jb .0
  3872 00002DC6 81E90A000000        <1> 	sub ecx, 10
  3873 00002DCC FE06                <1> 	inc byte [esi]
  3874 00002DCE E933FFFFFF          <1> 	jmp .lp
  3875 00002DD3 46                  <1> .0:	inc esi
  3876 00002DD4 81F901000000        <1> 	cmp ecx, 1
  3877 00002DDA 720D                <1> 	jb .dn
  3878 00002DDC 81E901000000        <1> 	sub ecx, 1
  3879 00002DE2 FE06                <1> 	inc byte [esi]
  3880 00002DE4 E91DFFFFFF          <1> 	jmp .lp
  3881                              <1> .dn:
  3882 00002DE9 C3                  <1> 	ret
  3883                              <1> 
  3884                              <1> 	
  3885                              <1> 
  3886 00002DEA 00<rept>            <1> hexnumber times 8 db 0
  3887 00002DF2 202000              <1> hexnumberend db "  ",0
  3888                              <1> 
  3889                              <1> converthex:
  3890                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3891 00002DF5 56                  <1> 	push esi
  3892 00002DF6 B030                <1> 	mov al, "0"
  3893 00002DF8 39FE                <1> .clearlp: cmp esi, edi
  3894 00002DFA 7308                <1> 	jae .doneclear
  3895 00002DFC 8806                <1> 	mov [esi], al
  3896 00002DFE 46                  <1> 	inc esi
  3897 00002DFF E9F4FFFFFF          <1> 	jmp .clearlp
  3898                              <1> .doneclear:
  3899 00002E04 81EE02000000        <1> 	sub esi, 2
  3900 00002E0A 89C8                <1> 	mov eax, ecx
  3901                              <1> .loop:
  3902 00002E0C 30FF                <1> 	xor bh, bh
  3903 00002E0E 88C3                <1> 	mov bl, al
  3904 00002E10 66C1E304            <1> 	shl bx, 4
  3905 00002E14 C0EB04              <1> 	shr bl, 4
  3906 00002E17 86DF                <1> 	xchg bl, bh ;they are backwards
  3907 00002E19 80C330              <1> 	add bl, 48
  3908 00002E1C 80FB39              <1> 	cmp bl, "9"
  3909 00002E1F 7609                <1> 	jbe .goodbl
  3910 00002E21 80EB30              <1> 	sub bl, 48
  3911 00002E24 80EB0A              <1> 	sub bl, 0xA
  3912 00002E27 80C341              <1> 	add bl, "A"
  3913                              <1> .goodbl:
  3914 00002E2A 80C730              <1> 	add bh, 48
  3915 00002E2D 80FF39              <1> 	cmp bh, "9"
  3916 00002E30 7609                <1> 	jbe .goodbh
  3917 00002E32 80EF30              <1> 	sub bh, 48
  3918 00002E35 80EF0A              <1> 	sub bh, 0xA
  3919 00002E38 80C741              <1> 	add bh, "A"
  3920                              <1> .goodbh:
  3921 00002E3B C1E808              <1> 	shr eax, 8
  3922 00002E3E 66891E              <1> 	mov [esi], bx
  3923 00002E41 81EE02000000        <1> 	sub esi, 2
  3924 00002E47 3B3424              <1> 	cmp esi, [esp]
  3925 00002E4A 7207                <1> 	jb .done
  3926 00002E4C 3D00000000          <1> 	cmp eax, 0
  3927 00002E51 75B9                <1> 	jne .loop
  3928                              <1> .done:
  3929 00002E53 5E                  <1> 	pop esi
  3930 00002E54 C3                  <1> 	ret
  3931                              <1> 	
  3932                              <1> 	
  3933 00002E55 00                  <1> smallhex db 0
  3934 00002E56 01                  <1> firsthexshown db 1
  3935                              <1> showhexsmall:
  3936 00002E57 C605[552E0000]01    <1> 	mov byte [smallhex], 1
  3937 00002E5E E808000000          <1> 	call showhex
  3938 00002E63 C605[552E0000]00    <1> 	mov byte [smallhex], 0
  3939 00002E6A C3                  <1> 	ret
  3940                              <1> showhex:
  3941 00002E6B 60                  <1> 	pusha
  3942 00002E6C BE[EA2D0000]        <1> 	mov esi, hexnumber
  3943 00002E71 BF[F22D0000]        <1> 	mov edi, hexnumberend
  3944 00002E76 E87AFFFFFF          <1> 	call converthex
  3945 00002E7B 803D[562E0000]01    <1> 	cmp byte [firsthexshown], 1
  3946 00002E82 7503                <1> 	jne .show
  3947 00002E84 6631D2              <1> 	xor dx, dx
  3948                              <1> .show:
  3949 00002E87 803D[562E0000]03    <1> 	cmp byte [firsthexshown], 3
  3950 00002E8E 750A                <1> 	jne .nonewhexline
  3951 00002E90 BE[35550000]        <1> 	mov esi, line
  3952 00002E95 E821EDFFFF          <1> 	call print
  3953                              <1> .nonewhexline:
  3954 00002E9A 803D[562E0000]04    <1> 	cmp byte [firsthexshown], 4
  3955 00002EA1 7527                <1> 	jne .notab
  3956 00002EA3 B1A0                <1> 	mov cl, 160
  3957 00002EA5 28D1                <1> 	sub cl, dl
  3958 00002EA7 C0E905              <1> 	shr cl, 5
  3959 00002EAA C0E105              <1> 	shl cl, 5
  3960 00002EAD 80F900              <1> 	cmp cl, 0
  3961 00002EB0 750F                <1> 	jne .nonewline
  3962 00002EB2 BE[35550000]        <1> 	mov esi, line
  3963 00002EB7 E8FFECFFFF          <1> 	call print
  3964 00002EBC E909000000          <1> 	jmp .notab
  3965                              <1> .nonewline:
  3966 00002EC1 80C20F              <1> 	add dl, 15
  3967 00002EC4 C0EA04              <1> 	shr dl, 4
  3968 00002EC7 C0E204              <1> 	shl dl, 4
  3969                              <1> .notab:
  3970 00002ECA BE[EA2D0000]        <1> 	mov esi, hexnumber
  3971 00002ECF 803D[552E0000]01    <1> 	cmp byte [smallhex],1
  3972 00002ED6 7506                <1> 	jne .nosmall
  3973 00002ED8 81C606000000        <1> 	add esi, 6
  3974                              <1> .nosmall:
  3975 00002EDE 803D[562E0000]05    <1> 	cmp byte [firsthexshown], 5
  3976 00002EE5 750A                <1> 	jne .noquiet
  3977 00002EE7 E8B0ECFFFF          <1> 	call printquiet
  3978 00002EEC E918000000          <1> 	jmp .donequiet
  3979                              <1> .noquiet:
  3980 00002EF1 803D[562E0000]06    <1> 	cmp byte [firsthexshown], 6
  3981 00002EF8 750A                <1> 	jne .normal
  3982 00002EFA E8B0ECFFFF          <1> 	call printhighlight
  3983 00002EFF E905000000          <1> 	jmp .donequiet
  3984                              <1> .normal:
  3985 00002F04 E8B2ECFFFF          <1> 	call print
  3986                              <1> .donequiet:
  3987 00002F09 803D[562E0000]02    <1> 	cmp byte [firsthexshown], 2
  3988 00002F10 750A                <1> 	jne .shown
  3989 00002F12 BE[35550000]        <1> 	mov esi, line
  3990 00002F17 E89FECFFFF          <1> 	call print
  3991                              <1> .shown:
  3992 00002F1C C605[562E0000]00    <1> 	mov byte [firsthexshown], 0
  3993 00002F23 61                  <1> 	popa
  3994 00002F24 C3                  <1> 	ret
  3995                              <1> 
  3996                              <1> 
  3997 00002F25 303030303030303030- <1> decnumber db "00000000000000"
  3998 00002F2E 3030303030          <1>
  3999 00002F33 2000                <1> decnumberend: db " ",0
  4000                              <1> 
  4001                              <1> showdec: ;;same as showhex, just uses decimal conversion
  4002 00002F35 60                  <1> 	pusha
  4003 00002F36 BF[252F0000]        <1> 	mov edi, decnumber
  4004 00002F3B BE[332F0000]        <1> 	mov esi, decnumberend
  4005                              <1> .clear:
  4006 00002F40 C60730              <1> 	mov byte [edi], '0'
  4007 00002F43 47                  <1> 	inc edi
  4008 00002F44 39F7                <1> 	cmp edi, esi
  4009 00002F46 72F8                <1> 	jb .clear
  4010 00002F48 BF[252F0000]        <1> 	mov edi, decnumber
  4011 00002F4D E8B1FDFFFF          <1> 	call convert
  4012 00002F52 803D[562E0000]01    <1> 	cmp byte [firsthexshown], 1
  4013 00002F59 7503                <1> 	jne .show
  4014 00002F5B 6631D2              <1> 	xor dx, dx
  4015                              <1> .show:
  4016 00002F5E 803D[562E0000]03    <1> 	cmp byte [firsthexshown], 3
  4017 00002F65 750A                <1> 	jne .nonewdecline
  4018 00002F67 BE[35550000]        <1> 	mov esi, line
  4019 00002F6C E84AECFFFF          <1> 	call print
  4020                              <1> .nonewdecline:
  4021 00002F71 803D[562E0000]04    <1> 	cmp byte [firsthexshown], 4
  4022 00002F78 7527                <1> 	jne .notab
  4023 00002F7A B1A0                <1> 	mov cl, 160
  4024 00002F7C 28D1                <1> 	sub cl, dl
  4025 00002F7E C0E905              <1> 	shr cl, 5
  4026 00002F81 C0E105              <1> 	shl cl, 5
  4027 00002F84 80F900              <1> 	cmp cl, 0
  4028 00002F87 750F                <1> 	jne .nonewline
  4029 00002F89 BE[35550000]        <1> 	mov esi, line
  4030 00002F8E E828ECFFFF          <1> 	call print
  4031 00002F93 E909000000          <1> 	jmp .notab
  4032                              <1> .nonewline:
  4033 00002F98 80C20F              <1> 	add dl, 15
  4034 00002F9B C0EA04              <1> 	shr dl, 4
  4035 00002F9E C0E204              <1> 	shl dl, 4
  4036                              <1> .notab:
  4037 00002FA1 BE[252F0000]        <1> 	mov esi, decnumber
  4038 00002FA6 4E                  <1> 	dec esi
  4039                              <1> .sifind:
  4040 00002FA7 46                  <1> 	inc esi
  4041 00002FA8 803E30              <1> 	cmp byte [esi], '0'
  4042 00002FAB 74FA                <1> 	je .sifind
  4043 00002FAD E809ECFFFF          <1> 	call print
  4044 00002FB2 803D[562E0000]02    <1> 	cmp byte [firsthexshown], 2
  4045 00002FB9 750A                <1> 	jne .shown
  4046 00002FBB BE[35550000]        <1> 	mov esi, line
  4047 00002FC0 E8F6EBFFFF          <1> 	call print
  4048                              <1> .shown:
  4049 00002FC5 C605[562E0000]00    <1> 	mov byte [firsthexshown], 0
  4050 00002FCC 61                  <1> 	popa
  4051 00002FCD C3                  <1> 	ret
  4052                              <1> 	
  4053                              <1> cnvrthextxt:
  4054 00002FCE 31C9                <1> 	xor ecx, ecx
  4055 00002FD0 31C0                <1> 	xor eax, eax
  4056 00002FD2 31D2                <1> 	xor edx, edx
  4057 00002FD4 31DB                <1> 	xor ebx, ebx
  4058 00002FD6 4E                  <1> 	dec esi
  4059                              <1> .end:
  4060 00002FD7 46                  <1> 	inc esi
  4061 00002FD8 8A06                <1> 	mov al, [esi]
  4062 00002FDA 3C00                <1> 	cmp al, 0
  4063 00002FDC 75F9                <1> 	jne .end
  4064                              <1> .loop:
  4065 00002FDE 4E                  <1> 	dec esi
  4066 00002FDF 8A06                <1> 	mov al, [esi]
  4067 00002FE1 3C41                <1> 	cmp al, "A"
  4068 00002FE3 7328                <1> 	jae .char
  4069 00002FE5 2C30                <1> 	sub al, 48
  4070 00002FE7 3C10                <1> 	cmp al, 16
  4071 00002FE9 7721                <1> 	ja .done
  4072                              <1> .donechar:
  4073 00002FEB 81FA00000000        <1> 	cmp edx, 0
  4074 00002FF1 740E                <1> 	je .noshl
  4075 00002FF3 89D3                <1> 	mov ebx, edx
  4076                              <1> .shl:
  4077 00002FF5 C1E004              <1> 	shl eax, 4
  4078 00002FF8 4B                  <1> 	dec ebx
  4079 00002FF9 81FB00000000        <1> 	cmp ebx, 0
  4080 00002FFF 75F4                <1> 	jne .shl
  4081                              <1> .noshl:
  4082 00003001 42                  <1> 	inc edx
  4083 00003002 01C1                <1> 	add ecx, eax
  4084 00003004 81FA08000000        <1> 	cmp edx, 8
  4085 0000300A 72D2                <1> 	jb .loop
  4086                              <1> .done:
  4087 0000300C C3                  <1> 	ret
  4088                              <1> .char:
  4089 0000300D 3C46                <1> 	cmp al, "F"
  4090 0000300F 77FB                <1> 	ja .done
  4091 00003011 2C41                <1> 	sub al, "A"
  4092 00003013 040A                <1> 	add al, 0xA
  4093 00003015 E9D1FFFFFF          <1> 	jmp .donechar
  4094                              <1> 	
  4095                              <1> 	
  4096                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4097 0000301A 31C9                <1> 	xor ecx, ecx
  4098 0000301C 31C0                <1> 	xor eax, eax
  4099 0000301E 31D2                <1> 	xor edx, edx
  4100 00003020 31DB                <1> 	xor ebx, ebx
  4101 00003022 4E                  <1> 	dec esi
  4102                              <1> .lp:
  4103 00003023 46                  <1> 	inc esi
  4104 00003024 8A06                <1> 	mov al, [esi]
  4105 00003026 3C00                <1> 	cmp al, 0
  4106 00003028 75F9                <1> 	jne .lp
  4107 0000302A 4E                  <1> 	dec esi
  4108 0000302B 8A06                <1> 	mov al, [esi]
  4109 0000302D 3C2E                <1> 	cmp al, '.'
  4110 0000302F 7506                <1> 	jne .dot
  4111 00003031 46                  <1> 	inc esi
  4112 00003032 E9ECFFFFFF          <1> 	jmp .lp
  4113                              <1> .dot:
  4114 00003037 3C20                <1> 	cmp al, ' '
  4115 00003039 7404                <1> 	je .zero
  4116 0000303B 3C30                <1> 	cmp al, '0'
  4117 0000303D 7504                <1> 	jne .txtlp
  4118                              <1> .zero: 
  4119 0000303F 39FE                <1> 		cmp esi, edi
  4120 00003041 7448                <1> 		je .done
  4121                              <1> .txtlp:
  4122 00003043 31C0                <1> 	xor eax, eax
  4123 00003045 8A06                <1> 	mov al, [esi]
  4124 00003047 3C3D                <1> 	cmp al, '='
  4125 00003049 7440                <1> 	je .done
  4126 0000304B 3C30                <1> 	cmp al, 48
  4127 0000304D 723C                <1> 	jb .done
  4128 0000304F 3C23                <1> 	cmp al, '#'
  4129 00003051 7438                <1> 	je .done
  4130 00003053 39FE                <1> 	cmp esi, edi
  4131 00003055 7234                <1> 	jb .done
  4132 00003057 81F900000000        <1> 	cmp ecx, 0
  4133 0000305D 770B                <1> 	ja .exp
  4134 0000305F 2C30                <1> .noexp:	sub al, 48
  4135 00003061 01C2                <1> 	add edx, eax
  4136 00003063 4E                  <1> 	dec esi
  4137 00003064 41                  <1> 	inc ecx
  4138 00003065 E9D9FFFFFF          <1> 	jmp .txtlp
  4139 0000306A 81F900000000        <1> .exp:	cmp ecx, 0
  4140 00003070 74ED                <1> 	je .noexp
  4141 00003072 2C30                <1> 	sub al, 48
  4142 00003074 51                  <1> 	push ecx
  4143                              <1> .expmul:
  4144 00003075 89C3                <1> 	mov ebx, eax
  4145 00003077 D1E3                <1> 	shl ebx, 1
  4146 00003079 01D8                <1> 	add eax, ebx
  4147 0000307B D1E3                <1> 	shl ebx, 1
  4148 0000307D 01D8                <1> 	add eax, ebx
  4149 0000307F E2F4                <1> 	loop .expmul
  4150 00003081 01C2                <1> 	add edx, eax
  4151 00003083 59                  <1> 	pop ecx
  4152 00003084 4E                  <1> 	dec esi
  4153 00003085 41                  <1> 	inc ecx
  4154 00003086 E9B8FFFFFF          <1> 	jmp .txtlp
  4155 0000308B 89D1                <1> .done: mov ecx, edx
  4156 0000308D C3                  <1> 	ret
  4157                              <1> benchmarki: ;output number of clocks since initial value
  4158 0000308E 0F31                <1> 	rdtsc
  4159 00003090 8B1D[60550000]      <1> 	mov ebx, [initialtsc]
  4160 00003096 8B0D[64550000]      <1> 	mov ecx, [initialtsc + 4]
  4161 0000309C E90E000000          <1> 	jmp benchmarkl.calc
  4162                              <1> 
  4163                              <1> benchmarkl: ;output number of clocks since last benchmark
  4164 000030A1 0F31                <1> 	rdtsc
  4165 000030A3 8B1D[68550000]      <1> 	mov ebx, [lasttsc]
  4166 000030A9 8B0D[6C550000]      <1> 	mov ecx, [lasttsc + 4]
  4167                              <1> .calc:
  4168 000030AF 29D8                <1> 	sub eax, ebx
  4169 000030B1 7701                <1> 	ja .noover
  4170 000030B3 4A                  <1> 	dec edx
  4171                              <1> .noover:
  4172 000030B4 29CA                <1> 	sub edx, ecx
  4173 000030B6 8B0C24              <1> 	mov ecx, [esp]
  4174 000030B9 E8ADFDFFFF          <1> 	call showhex
  4175 000030BE 89D1                <1> 	mov ecx, edx
  4176 000030C0 E8A6FDFFFF          <1> 	call showhex
  4177 000030C5 89C1                <1> 	mov ecx, eax
  4178 000030C7 E89FFDFFFF          <1> 	call showhex
  4179 000030CC BE[35550000]        <1> 	mov esi, line
  4180 000030D1 E8E5EAFFFF          <1> 	call print
  4181 000030D6 0F31                <1> 	rdtsc
  4182 000030D8 A3[68550000]        <1> 	mov [lasttsc], eax
  4183 000030DD 8915[6C550000]      <1> 	mov [lasttsc + 4], edx
  4184 000030E3 C3                  <1> 	ret
  4185                                      %include "source/programs.asm"
  4186 000030E4 FF2C                <1> filetypes db 255,44
  4187                              <1> progstart:		;programs start here
  4188                              <1> indexfiles:
  4189 000030E6 BE[E6300000]        <1> 	mov esi, progstart
  4190 000030EB BB[E0690300]        <1> 	mov ebx, fileindex
  4191 000030F0 BF[E6300000]        <1> 	mov edi, progstart
  4192 000030F5 81EF02000000        <1> 	sub edi, 2
  4193                              <1> indexloop:
  4194 000030FB 668B0E              <1> 	mov cx, [esi]
  4195                              <1> 	indexloop2:
  4196 000030FE 663B0F              <1> 		cmp cx, [edi]
  4197 00003101 7427                <1> 		je indexloop2done
  4198 00003103 81EF02000000        <1> 		sub edi, 2
  4199 00003109 81FF[E4300000]      <1> 		cmp edi, filetypes
  4200 0000310F 73ED                <1> 		jae indexloop2
  4201 00003111 BF[E6300000]        <1> 	mov edi, progstart
  4202 00003116 81EF02000000        <1> 	sub edi, 2
  4203 0000311C 46                  <1> 	inc esi
  4204 0000311D 81FE[80490000]      <1> 	cmp esi, batchprogend
  4205 00003123 7357                <1> 	jae indexloopdone
  4206 00003125 E9D1FFFFFF          <1> 	jmp indexloop
  4207                              <1> indexloop2done:
  4208 0000312A 66890B              <1> 	mov [ebx], cx
  4209 0000312D 81C302000000        <1> 	add ebx, 2
  4210 00003133 81C602000000        <1> 	add esi, 2
  4211                              <1> 	nameindex:
  4212 00003139 8A0E                <1> 		mov cl, [esi]
  4213 0000313B 80F900              <1> 		cmp cl, 0
  4214 0000313E 7409                <1> 		je nameindexdone
  4215 00003140 880B                <1> 		mov [ebx], cl
  4216 00003142 46                  <1> 		inc esi
  4217 00003143 43                  <1> 		inc ebx
  4218 00003144 E9F0FFFFFF          <1> 		jmp nameindex
  4219                              <1> 	nameindexdone:
  4220 00003149 43                  <1> 		inc ebx
  4221 0000314A 66C7030000          <1> 		mov word [ebx], 0
  4222 0000314F 81C302000000        <1> 		add ebx, 2
  4223 00003155 46                  <1> 		inc esi
  4224 00003156 8933                <1> 		mov [ebx], esi
  4225 00003158 81C304000000        <1> 		add ebx, 4
  4226 0000315E 66C7030000          <1> 		mov word [ebx], 0
  4227 00003163 81C302000000        <1> 		add ebx, 2
  4228 00003169 81FB[E06D0300]      <1> 		cmp ebx, fileindexend
  4229 0000316F 730B                <1> 		jae indexloopdone
  4230 00003171 81C601000000        <1> 		add esi, 1
  4231 00003177 E97FFFFFFF          <1> 		jmp indexloop
  4232 0000317C C605[84310000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4233 00003183 C3                  <1> 		ret
  4234 00003184 00                  <1> indexdone db 0
  4235                              <1> %include 'source/programs/_comment.asm' ;#
  4236 00003185 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4237 00003189 C3                  <2> 	ret 
  4238                              <1> %include 'source/programs/_math.asm' ;!
  4239 0000318A FF2C2100            <2> db 255,44,"!",0
  4240                              <2> 	num:	
  4241 0000318E E858FBFFFF          <2> 		call clearbuffer
  4242 00003193 C605[16340000]00    <2> 		mov byte [decimal], 0
  4243 0000319A C605[17340000]00    <2> 		mov byte [decimal2], 0
  4244 000031A1 8B35[1D2C0000]      <2> 		mov esi, [currentcommandloc]
  4245 000031A7 31C0                <2> 		xor eax, eax
  4246 000031A9 31C9                <2> 		xor ecx, ecx
  4247 000031AB 31DB                <2> 		xor ebx, ebx
  4248 000031AD 8A06                <2> 	num2:	mov al, [esi]
  4249 000031AF 3C2B                <2> 		cmp al, '+'
  4250 000031B1 7416                <2> 		je operatorfound
  4251 000031B3 3C2D                <2> 		cmp al, '-'
  4252 000031B5 7412                <2> 		je operatorfound
  4253 000031B7 3C2A                <2> 		cmp al, '*'
  4254 000031B9 740E                <2> 		je operatorfound
  4255 000031BB 3C2F                <2> 		cmp al, '/'
  4256 000031BD 740A                <2> 		je operatorfound
  4257 000031BF 3C5E                <2> 		cmp al, '^'
  4258 000031C1 7406                <2> 		je operatorfound
  4259 000031C3 46                  <2> 		inc esi
  4260 000031C4 84C0                <2> 		test al, al
  4261 000031C6 75E5                <2> 		jnz num2
  4262 000031C8 C3                  <2> 		ret
  4263 000031C9 50                  <2> 	operatorfound: push eax
  4264 000031CA 30E4                <2> 		xor ah, ah
  4265 000031CC 8826                <2> 		mov [esi], ah
  4266 000031CE 89F7                <2> 		mov edi, esi
  4267 000031D0 46                  <2> 		inc esi
  4268 000031D1 8A06                <2> 		mov al, [esi]
  4269 000031D3 3C25                <2> 		cmp al, '%'
  4270 000031D5 0F845E000000        <2> 		je near resultnum1
  4271                              <2> 	varnum2: 
  4272 000031DB 57                  <2> 		push edi
  4273 000031DC E8A6000000          <2> 		call checkdecimal
  4274 000031E1 5F                  <2> 		pop edi
  4275 000031E2 E833FEFFFF          <2> 		call cnvrttxt
  4276                              <2> 	vrnm2:
  4277 000031E7 89CB                <2> 		mov ebx, ecx
  4278 000031E9 53                  <2> 		push ebx
  4279 000031EA E8FCFAFFFF          <2> 		call clearbuffer
  4280 000031EF 8B35[1D2C0000]      <2> 		mov esi, [currentcommandloc]
  4281 000031F5 89F7                <2> 		mov edi, esi
  4282 000031F7 46                  <2> 		inc esi
  4283 000031F8 8A06                <2> 		mov al, [esi]
  4284 000031FA 3C25                <2> 		cmp al, '%'
  4285 000031FC 0F844E000000        <2> 		je near resultnum2
  4286                              <2> 	varnum4: 
  4287 00003202 57                  <2> 		push edi
  4288 00003203 E86B000000          <2> 		call checkdecimal2
  4289 00003208 5F                  <2> 		pop edi
  4290 00003209 E80CFEFFFF          <2> 		call cnvrttxt
  4291                              <2> 	vrnm4:
  4292 0000320E 5B                  <2> 		pop ebx
  4293 0000320F 58                  <2> 		pop eax
  4294 00003210 3C2B                <2> 		cmp al, '+'
  4295 00003212 0F84A3000000        <2> 		je near plusnum
  4296 00003218 3C2D                <2> 		cmp al, '-'
  4297 0000321A 0F84A7000000        <2> 		je near subnum
  4298 00003220 3C2A                <2> 		cmp al, '*'
  4299 00003222 0F84AB000000        <2> 		je near mulnum
  4300 00003228 3C2F                <2> 		cmp al, '/'
  4301 0000322A 0F84B9000000        <2> 		je near divnum
  4302 00003230 3C5E                <2> 		cmp al, '^'
  4303 00003232 0F84D6000000        <2> 		je near expnum
  4304 00003238 C3                  <2> 		ret
  4305                              <2> 	resultnum1:
  4306 00003239 8A0D[18340000]      <2> 		mov cl, [decimalresult]
  4307 0000323F 880D[16340000]      <2> 		mov [decimal], cl
  4308 00003245 8B0D[19340000]      <2> 		mov ecx, [result]
  4309 0000324B E997FFFFFF          <2> 		jmp vrnm2
  4310                              <2> 	resultnum2:
  4311 00003250 8A0D[16340000]      <2> 		mov cl, [decimal]
  4312 00003256 880D[17340000]      <2> 		mov [decimal2], cl
  4313 0000325C 8A0D[18340000]      <2> 		mov cl, [decimalresult]
  4314 00003262 880D[16340000]      <2> 		mov [decimal], cl
  4315 00003268 8B0D[19340000]      <2> 		mov ecx, [result]
  4316 0000326E E99BFFFFFF          <2> 		jmp vrnm4
  4317                              <2> 	checkdecimal2:
  4318 00003273 8A25[16340000]      <2> 		mov ah, [decimal]
  4319 00003279 8825[17340000]      <2> 		mov [decimal2], ah
  4320 0000327F 30E4                <2> 		xor ah, ah
  4321 00003281 8825[16340000]      <2> 		mov [decimal], ah
  4322                              <2> 	checkdecimal:
  4323 00003287 89F7                <2> 		mov edi, esi
  4324                              <2> 	chkdec1:
  4325 00003289 8A07                <2> 		mov al, [edi]
  4326 0000328B 3C2E                <2> 		cmp al, '.'
  4327 0000328D 0F840E000000        <2> 		je near fnddec
  4328 00003293 3C00                <2> 		cmp al, 0
  4329 00003295 0F841F000000        <2> 		je near nodecimal
  4330 0000329B 47                  <2> 		inc edi
  4331 0000329C E9E8FFFFFF          <2> 		jmp chkdec1
  4332                              <2> 	fnddec:
  4333 000032A1 8A4701              <2> 		mov al, [edi + 1]
  4334 000032A4 8807                <2> 		mov [edi], al
  4335 000032A6 3C00                <2> 		cmp al, 0
  4336 000032A8 0F840C000000        <2> 		je near nodecimal
  4337 000032AE FE05[16340000]      <2> 		inc byte [decimal]
  4338 000032B4 47                  <2> 		inc edi
  4339 000032B5 E9E7FFFFFF          <2> 		jmp fnddec
  4340                              <2> 	nodecimal:
  4341 000032BA C3                  <2> 		ret
  4342                              <2> 	plusnum:
  4343 000032BB E814010000          <2> 		call decaddfix
  4344 000032C0 01D9                <2> 		add ecx, ebx
  4345 000032C2 E98A000000          <2> 		jmp retnum
  4346                              <2> 	subnum:
  4347 000032C7 E808010000          <2> 		call decaddfix
  4348 000032CC 29D9                <2> 		sub ecx, ebx
  4349 000032CE E97E000000          <2> 		jmp retnum
  4350                              <2> 	mulnum:
  4351 000032D3 A0[17340000]        <2> 		mov al, [decimal2]
  4352 000032D8 0005[16340000]      <2> 		add [decimal], al
  4353 000032DE 89C8                <2> 		mov eax, ecx
  4354 000032E0 F7E3                <2> 		mul ebx
  4355 000032E2 89C1                <2> 		mov ecx, eax
  4356 000032E4 E968000000          <2> 		jmp retnum
  4357                              <2> 	divnum:
  4358 000032E9 E8E6000000          <2> 		call decaddfix
  4359 000032EE 30C0                <2> 		xor al, al
  4360 000032F0 A2[16340000]        <2> 		mov [decimal], al
  4361 000032F5 31D2                <2> 		xor edx, edx
  4362 000032F7 89C8                <2> 		mov eax, ecx
  4363 000032F9 81FB00000000        <2> 		cmp ebx, 0
  4364 000032FF 0F844C000000        <2> 		je near retnum
  4365 00003305 F7F3                <2> 		div ebx
  4366 00003307 89C1                <2> 		mov ecx, eax
  4367 00003309 E943000000          <2> 		jmp retnum
  4368                              <2> 	expnum:
  4369 0000330E 8A15[16340000]      <2> 		mov dl, [decimal]
  4370 00003314 8815[17340000]      <2> 		mov [decimal2], dl
  4371 0000331A 31D2                <2> 		xor edx, edx
  4372 0000331C 89C8                <2> 		mov eax, ecx
  4373 0000331E 89D9                <2> 		mov ecx, ebx
  4374 00003320 89C3                <2> 		mov ebx, eax
  4375 00003322 81F900000000        <2> 		cmp ecx, 0
  4376 00003328 7422                <2> 		je noexpnum
  4377 0000332A 49                  <2> 		dec ecx
  4378 0000332B 81F900000000        <2> 		cmp ecx, 0
  4379 00003331 7412                <2> 		je noexpnumlp
  4380 00003333 F7E3                <2> 	expnumlp: mul ebx
  4381 00003335 8A15[17340000]      <2> 		mov dl, [decimal2]
  4382 0000333B 0015[16340000]      <2> 		add [decimal], dl
  4383 00003341 31D2                <2> 		xor edx, edx
  4384 00003343 E2EE                <2> 		loop expnumlp
  4385                              <2> 	noexpnumlp:
  4386 00003345 89C1                <2> 		mov ecx, eax
  4387 00003347 E905000000          <2> 		jmp retnum
  4388                              <2> 	noexpnum:
  4389 0000334C B901000000          <2> 		mov ecx, 1
  4390                              <2> 	retnum: 
  4391 00003351 BE[74880300]        <2> 		mov esi, numbuf
  4392 00003356 890D[19340000]      <2> 		mov [result], ecx
  4393 0000335C E8A2F9FFFF          <2> 		call convert
  4394 00003361 BE[74880300]        <2> 		mov esi, numbuf
  4395 00003366 8A25[16340000]      <2> 		mov ah, [decimal]
  4396 0000336C 8825[18340000]      <2> 		mov [decimalresult], ah
  4397 00003372 80FC00              <2> 		cmp ah, 0
  4398 00003375 0F8425000000        <2> 		je near noputdecimal
  4399                              <2> 	putdecimal:
  4400 0000337B 4E                  <2> 		dec esi
  4401 0000337C FECC                <2> 		dec ah
  4402 0000337E 80FC00              <2> 		cmp ah, 0
  4403 00003381 0F87F4FFFFFF        <2> 		ja near putdecimal
  4404 00003387 4E                  <2> 		dec esi
  4405 00003388 8A06                <2> 		mov al, [esi]
  4406 0000338A C6062E              <2> 		mov byte [esi], '.'
  4407                              <2> 	decputloop:
  4408 0000338D 4E                  <2> 		dec esi
  4409 0000338E 8A26                <2> 		mov ah, [esi]
  4410 00003390 8806                <2> 		mov [esi], al
  4411 00003392 88E0                <2> 		mov al, ah
  4412 00003394 81FE[60880300]      <2> 		cmp esi, buf2
  4413 0000339A 0F87EDFFFFFF        <2> 		ja near decputloop
  4414                              <2> 	noputdecimal:
  4415 000033A0 BE[60880300]        <2> 		mov esi, buf2
  4416 000033A5 E805000000          <2> 		call chkadd
  4417 000033AA C3                  <2> 		ret
  4418 000033AB 00000000            <2> edxnumbuf dw 0,0
  4419 000033AF 8A06                <2> 	chkadd: mov al, [esi]
  4420 000033B1 3C30                <2> 		cmp al, '0'
  4421 000033B3 750F                <2> 		jne dnadd
  4422 000033B5 46                  <2> 		inc esi
  4423 000033B6 81FE[74880300]      <2> 		cmp esi, numbuf
  4424 000033BC 7405                <2> 		je dnaddm1
  4425 000033BE E9ECFFFFFF          <2> 		jmp chkadd
  4426 000033C3 4E                  <2> 	dnaddm1: dec esi
  4427 000033C4 E8F2E7FFFF          <2> 	dnadd:	call print
  4428 000033C9 BE[35550000]        <2> 		mov esi, line
  4429 000033CE E8E8E7FFFF          <2> 		call print
  4430 000033D3 C3                  <2> 		ret
  4431                              <2> 		
  4432                              <2> 	decaddfix:
  4433 000033D4 A0[17340000]        <2> 		mov al, [decimal2]
  4434 000033D9 8A25[16340000]      <2> 		mov ah, [decimal]
  4435 000033DF 38E0                <2> 		cmp al, ah
  4436 000033E1 7432                <2> 		je gooddecadd
  4437 000033E3 38E0                <2> 		cmp al, ah
  4438 000033E5 721A                <2> 		jb lowdecadd
  4439                              <2> 	highdecadd:
  4440 000033E7 FEC4                <2> 		inc ah
  4441 000033E9 89CA                <2> 		mov edx, ecx
  4442 000033EB C1E103              <2> 		shl ecx, 3
  4443 000033EE 01D1                <2> 		add ecx, edx
  4444 000033F0 01D1                <2> 		add ecx, edx
  4445 000033F2 38E0                <2> 		cmp al, ah
  4446 000033F4 77F1                <2> 		ja highdecadd
  4447 000033F6 8825[16340000]      <2> 		mov [decimal], ah
  4448 000033FC E914000000          <2> 		jmp gooddecadd
  4449                              <2> 	lowdecadd:
  4450 00003401 FEC0                <2> 		inc al
  4451 00003403 89DA                <2> 		mov edx, ebx
  4452 00003405 C1E303              <2> 		shl ebx, 3
  4453 00003408 01D3                <2> 		add ebx, edx
  4454 0000340A 01D3                <2> 		add ebx, edx
  4455 0000340C 38E0                <2> 		cmp al, ah
  4456 0000340E 72F1                <2> 		jb lowdecadd
  4457 00003410 A2[16340000]        <2> 		mov [decimal], al
  4458                              <2> 	gooddecadd:
  4459 00003415 C3                  <2> 		ret
  4460                              <2> 		
  4461 00003416 00                  <2> decimal db 0
  4462 00003417 00                  <2> decimal2 db 0
  4463 00003418 00                  <2> decimalresult db 0
  4464 00003419 00000000            <2> result dd 0
  4465                              <1> %include 'source/programs/_variables.asm' ;% and $
  4466 0000341D FF2C2500            <2> db 255,44,"%",0
  4467                              <2> 	ans:
  4468 00003421 BE[60880300]        <2> 		mov esi, buf2
  4469 00003426 E884FFFFFF          <2> 		call chkadd
  4470 0000342B C3                  <2> 		ret
  4471                              <2> 		
  4472 0000342C FF2C2400            <2> db 255,44,"$",0
  4473 00003430 8B35[1D2C0000]      <2> var: mov esi, [currentcommandloc]
  4474 00003436 BB[60700300]        <2> 	mov ebx, variables
  4475 0000343B 8A06                <2> lkeq:	mov al, [esi]
  4476 0000343D 3C3D                <2> 	cmp al, '='
  4477 0000343F 741E                <2> 	je eqfnd	;is there an '=' sign?
  4478 00003441 3C00                <2> 	cmp al, 0
  4479 00003443 7406                <2> 	je echovars
  4480 00003445 46                  <2> 	inc esi
  4481 00003446 E9F0FFFFFF          <2> 	jmp lkeq
  4482 0000344B BE[60700300]        <2> echovars: mov esi, variables
  4483 00003450 BB[60800300]        <2> 	mov ebx, varend
  4484 00003455 B105                <2> 	mov cl, 5
  4485 00003457 B504                <2> 	mov ch, 4
  4486 00003459 E826F8FFFF          <2> 	call array
  4487 0000345E C3                  <2> 	ret
  4488 0000345F 46                  <2> eqfnd:	inc esi
  4489 00003460 8A06                <2> 	mov al, [esi]
  4490 00003462 3C00                <2> 	cmp al, 0
  4491 00003464 7410                <2> 	je readvar
  4492 00003466 8B35[1D2C0000]      <2> 	mov esi, [currentcommandloc]
  4493 0000346C BB[60700300]        <2> 	mov ebx, variables
  4494 00003471 E91C000000          <2> 	jmp seek
  4495                              <2> readvar:
  4496 00003476 B00A                <2> 	mov al, 10
  4497 00003478 66BB0700            <2> 	mov bx, 7
  4498 0000347C C605[BD210000]00    <2> 	mov byte [commandedit], 0
  4499 00003483 BF[60880300]        <2> 	mov edi, buftxtend
  4500 00003488 E864E8FFFF          <2> 	call rdprint
  4501 0000348D E99EFFFFFF          <2> 	jmp var
  4502 00003492 668B03              <2> seek:	mov ax, [ebx]
  4503 00003495 B105                <2> 	mov cl, 5
  4504 00003497 B504                <2> 	mov ch, 4
  4505 00003499 663D0000            <2> 	cmp ax, 0
  4506 0000349D 0F846A000000        <2> 	je near save
  4507 000034A3 6639C8              <2> 	cmp ax, cx
  4508 000034A6 7406                <2> 	je skfnd
  4509 000034A8 43                  <2> 	inc ebx
  4510 000034A9 E9E4FFFFFF          <2> 	jmp seek
  4511 000034AE 8B35[1D2C0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4512 000034B4 46                  <2> 	inc esi
  4513 000034B5 81C302000000        <2> 	add ebx, 2
  4514 000034BB 89DF                <2> 	mov edi, ebx
  4515 000034BD B13D                <2> 	mov cl, '='
  4516 000034BF E89EF7FFFF          <2> 	call cndtest
  4517 000034C4 3C01                <2> 	cmp al, 1	
  4518 000034C6 741B                <2> 	je varfnd
  4519 000034C8 89FB                <2> 	mov ebx, edi
  4520 000034CA 8B35[1D2C0000]      <2> 	mov esi, [currentcommandloc]
  4521 000034D0 668B03              <2> 	mov ax, [ebx]
  4522 000034D3 663D0000            <2> 	cmp ax, 0
  4523 000034D7 0F8430000000        <2> 	je near save
  4524 000034DD 43                  <2> 	inc ebx
  4525 000034DE E9AFFFFFFF          <2> 	jmp seek
  4526 000034E3 8A03                <2> varfnd:	mov al, [ebx]
  4527 000034E5 3C04                <2> 	cmp al, 4
  4528 000034E7 7407                <2> 	je save2
  4529 000034E9 4B                  <2> 	dec ebx
  4530 000034EA 4E                  <2> 	dec esi
  4531 000034EB E9F3FFFFFF          <2> 	jmp varfnd
  4532 000034F0 4B                  <2> save2:	dec ebx
  4533 000034F1 4E                  <2> 	dec esi
  4534 000034F2 8A03                <2> 	mov al, [ebx]
  4535 000034F4 3C05                <2> 	cmp al, 5
  4536 000034F6 7405                <2> 	je remove
  4537 000034F8 E9E6FFFFFF          <2> 	jmp varfnd
  4538 000034FD 8A03                <2> remove: mov al, [ebx]
  4539 000034FF 3C00                <2> 	cmp al, 0
  4540 00003501 748F                <2> 	je seek
  4541 00003503 30C0                <2> 	xor al, al
  4542 00003505 8803                <2> 	mov [ebx], al
  4543 00003507 43                  <2> 	inc ebx
  4544 00003508 E9F0FFFFFF          <2> 	jmp remove	;do not need for now-need defragmentation
  4545 0000350D 8B35[1D2C0000]      <2> save:	mov esi, [currentcommandloc]
  4546 00003513 43                  <2> 	inc ebx
  4547 00003514 B005                <2> 	mov al, 5
  4548 00003516 B404                <2> 	mov ah, 4
  4549 00003518 668903              <2> 	mov [ebx], ax
  4550 0000351B 43                  <2> 	inc ebx
  4551 0000351C 43                  <2> svhere:	inc ebx
  4552 0000351D 46                  <2> 	inc esi
  4553 0000351E 8A06                <2> 	mov al, [esi]
  4554 00003520 3C00                <2> 	cmp al, 0
  4555 00003522 0F8456000000        <2> 	je near svdone
  4556 00003528 3C25                <2> 	cmp al, '%'
  4557 0000352A 7407                <2> 	je ans2
  4558 0000352C 8803                <2> 	mov [ebx], al	
  4559 0000352E E9E9FFFFFF          <2> 	jmp svhere
  4560 00003533 56                  <2> ans2:	push esi
  4561 00003534 BE[60880300]        <2> 	mov esi, buf2
  4562 00003539 E82C000000          <2> 	call ansfnd
  4563 0000353E E806000000          <2> 	call anscp
  4564 00003543 5E                  <2> 	pop esi
  4565 00003544 E9D3FFFFFF          <2> 	jmp svhere
  4566 00003549 8A06                <2> anscp:	mov al, [esi]
  4567 0000354B 8803                <2> 	mov [ebx], al
  4568 0000354D 81FE[74880300]      <2> 	cmp esi, numbuf
  4569 00003553 74C7                <2> 	je svhere
  4570 00003555 3C00                <2> 	cmp al, 0
  4571 00003557 74C3                <2> 	je svhere
  4572 00003559 43                  <2> 	inc ebx
  4573 0000355A 46                  <2> 	inc esi
  4574 0000355B E9E9FFFFFF          <2> 	jmp anscp
  4575 00003560 5E                  <2> ansnf:	pop esi
  4576 00003561 8A06                <2> 	mov al, [esi]
  4577 00003563 8803                <2> 	mov [ebx], al
  4578 00003565 E9B2FFFFFF          <2> 	jmp svhere
  4579 0000356A 46                  <2> ansfnd:	inc esi
  4580 0000356B 81FE[73880300]      <2> 	cmp esi, numbuf - 1
  4581 00003571 740A                <2> 	je fndans
  4582 00003573 8A06                <2> 	mov al, [esi]
  4583 00003575 3C00                <2> 	cmp al, 0
  4584 00003577 74E7                <2> 	je ansnf
  4585 00003579 3C30                <2> 	cmp al, '0'
  4586 0000357B 74ED                <2> 	je ansfnd
  4587                              <2> fndans:
  4588 0000357D C3                  <2> 	ret
  4589 0000357E 30C0                <2> svdone:	xor al, al
  4590 00003580 8803                <2> 	mov [ebx], al
  4591 00003582 C3                  <2> 	ret
  4592                              <1> %include 'source/programs/_run.asm' ;./
  4593                              <2> 
  4594 00003583 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4595 00003587 FF2C2E2F00          <2> 	db 255,44,"./",0
  4596                              <2> rundiskprog:
  4597 0000358C 8B3D[1D2C0000]      <2> 	mov edi, [currentcommandloc]
  4598 00003592 81C702000000        <2> 	add edi, 2
  4599 00003598 BE00004000          <2> 	mov esi, 0x400000
  4600 0000359D E84B1E0000          <2> 	call loadfile
  4601 000035A2 81FA94010000        <2> 	cmp edx, 404
  4602 000035A8 746A                <2> 	je noprogfound
  4603 000035AA BB00004000          <2> 	mov ebx, 0x400000
  4604 000035AF A1[83350000]        <2> 	mov eax, [elfstart]
  4605 000035B4 3903                <2> 	cmp [ebx], eax
  4606 000035B6 0F8437000000        <2> 	je near runelf
  4607 000035BC 66813B4558          <2> 	cmp word [ebx], "EX"
  4608 000035C1 7577                <2> 	jne progbatchfound
  4609 000035C3 81C302000000        <2> 	add ebx, 2
  4610 000035C9 8B3D[1D2C0000]      <2> 	mov edi, [currentcommandloc]
  4611 000035CF 81C702000000        <2> 	add edi, 2
  4612                              <2> findspaceprog:
  4613 000035D5 8A07                <2> 	mov al, [edi]
  4614 000035D7 47                  <2> 	inc edi
  4615 000035D8 3C20                <2> 	cmp al, " "
  4616 000035DA 75F9                <2> 	jne findspaceprog
  4617                              <2> findnonspaceprog:
  4618 000035DC 8A07                <2> 	mov al, [edi]
  4619 000035DE 47                  <2> 	inc edi
  4620 000035DF 3C20                <2> 	cmp al, " "
  4621 000035E1 74F9                <2> 	je findnonspaceprog
  4622 000035E3 4F                  <2> 	dec edi
  4623 000035E4 8925[E06D0300]      <2> 	mov [previousstack], esp
  4624 000035EA FFD3                <2> 	call ebx
  4625 000035EC 8B25[E06D0300]      <2> 	mov esp, [previousstack]
  4626 000035F2 C3                  <2> 	ret
  4627                              <2> runelf:
  4628 000035F3 8B3D[1D2C0000]      <2> 	mov edi, [currentcommandloc]
  4629 000035F9 81C702000000        <2> 	add edi, 2
  4630 000035FF 81C380000000        <2> 	add ebx, 0x80
  4631 00003605 8925[E06D0300]      <2> 	mov [previousstack], esp
  4632 0000360B FFD3                <2> 	call ebx
  4633 0000360D 8B25[E06D0300]      <2> 	mov esp, [previousstack]
  4634 00003613 C3                  <2> 	ret
  4635                              <2> noprogfound:
  4636 00003614 BE[FC540000]        <2> 	mov esi, notfound1
  4637 00003619 E89DE5FFFF          <2> 	call print
  4638 0000361E 8B35[1D2C0000]      <2> 	mov esi, [currentcommandloc]
  4639 00003624 81C602000000        <2> 	add esi, 2
  4640 0000362A E88CE5FFFF          <2> 	call print
  4641 0000362F BE[04550000]        <2> 	mov esi, notfound2
  4642 00003634 E882E5FFFF          <2> 	call print
  4643 00003639 C3                  <2> 	ret
  4644                              <2> progbatchfound:
  4645 0000363A BF00004000          <2> 		mov edi, 0x400000
  4646 0000363F C605[5A700300]01    <2> 		mov byte [BATCHISON], 1
  4647                              <2> 	batchrunloop:
  4648 00003646 E8E4F2FFFF          <2> 		call buftxtclear
  4649 0000364B BE[60840300]        <2> 		mov esi, buftxt
  4650 00003650 8935[1D2C0000]      <2> 		mov [currentcommandloc], esi
  4651                              <2> 	batchrunloop2:
  4652 00003656 B10A                <2> 		mov cl, 10
  4653 00003658 B50D                <2> 		mov ch, 13
  4654 0000365A 380F                <2> 		cmp [edi], cl
  4655 0000365C 0F841C000000        <2> 		je near nxtbatchrunline
  4656 00003662 382F                <2> 		cmp [edi], ch
  4657 00003664 0F8414000000        <2> 		je near nxtbatchrunline
  4658 0000366A 803F00              <2> 		cmp byte [edi], 0
  4659 0000366D 0F840B000000        <2> 		je near nxtbatchrunline
  4660 00003673 8A07                <2> 		mov al, [edi]
  4661 00003675 8806                <2> 		mov [esi], al
  4662 00003677 46                  <2> 		inc esi
  4663 00003678 47                  <2> 		inc edi
  4664 00003679 E9D8FFFFFF          <2> 		jmp batchrunloop2
  4665                              <2> 	nxtbatchrunline:
  4666 0000367E 47                  <2> 		inc edi
  4667 0000367F 380F                <2> 		cmp [edi], cl
  4668 00003681 74FB                <2> 		je nxtbatchrunline
  4669 00003683 382F                <2> 		cmp [edi], ch
  4670 00003685 74F7                <2> 		je nxtbatchrunline
  4671 00003687 893D[E5360000]      <2> 		mov [batchedi], edi
  4672 0000368D 893D[56700300]      <2> 		mov [BATCHPOS], edi
  4673 00003693 C60600              <2> 		mov byte [esi], 0
  4674 00003696 BE[60840300]        <2> 		mov esi, buftxt
  4675 0000369B 803E00              <2> 		cmp byte [esi], 0
  4676 0000369E 0F8439000000        <2> 		je near nobatchfoundrun
  4677 000036A4 31DB                <2> 		xor ebx, ebx
  4678 000036A6 8A1D[F16F0300]      <2> 		mov bl, [IFON]
  4679 000036AC 80FB00              <2> 		cmp bl, 0
  4680 000036AF 0F8534000000        <2> 		jne near iftestbatch
  4681                              <2> 	doneiftest:
  4682 000036B5 803D[BE370000]00    <2> 		cmp byte [runnextline], 0
  4683 000036BC 0F8405000000        <2> 		je near noruniftest
  4684 000036C2 E87AF4FFFF          <2> 		call run
  4685                              <2> 	noruniftest:
  4686 000036C7 C605[BE370000]01    <2> 		mov byte [runnextline], 1
  4687 000036CE 8B3D[E5360000]      <2> 		mov edi, [batchedi]
  4688 000036D4 803F00              <2> 		cmp byte [edi], 0
  4689 000036D7 0F8569FFFFFF        <2> 		jne near batchrunloop
  4690                              <2> 	nobatchfoundrun:
  4691 000036DD C605[5A700300]00    <2> 		mov byte [BATCHISON], 0
  4692 000036E4 C3                  <2> 		ret
  4693                              <2> 	
  4694 000036E5 00000000            <2> batchedi dd 0	
  4695                              <2> 	
  4696                              <2> 	iftestbatch:
  4697 000036E9 BE[F26F0300]        <2> 		mov esi, IFTRUE
  4698 000036EE 01DE                <2> 		add esi, ebx
  4699 000036F0 803E00              <2> 		cmp byte [esi], 0
  4700 000036F3 0F85BCFFFFFF        <2> 		jne near doneiftest
  4701 000036F9 881D[BF370000]      <2> 		mov [iffalsebuf], bl
  4702 000036FF 803D[5B700300]01    <2> 		cmp byte [LOOPON], 1
  4703 00003706 0F8513000000        <2> 		jne near fifindbatch
  4704 0000370C E935FFFFFF          <2> 		jmp batchrunloop
  4705                              <2> 	elsetestbatch:
  4706 00003711 C60601              <2> 		mov byte [esi], 1
  4707 00003714 81C705000000        <2> 		add edi, 5
  4708 0000371A E927FFFFFF          <2> 		jmp batchrunloop
  4709                              <2> 	fifindbatch:
  4710 0000371F 66B96966            <2> 		mov cx, "if"
  4711 00003723 66B86669            <2> 		mov ax, "fi"
  4712 00003727 663907              <2> 		cmp [edi], ax
  4713 0000372A 0F8424000000        <2> 		je near fifoundbatch
  4714 00003730 66390F              <2> 		cmp [edi], cx
  4715 00003733 0F8468000000        <2> 		je near iffoundbatch
  4716 00003739 803F00              <2> 		cmp byte [edi], 0
  4717 0000373C 0F8412000000        <2> 		je near fifoundbatch
  4718 00003742 B8656C7365          <2> 		mov eax, "else"
  4719 00003747 3907                <2> 		cmp [edi], eax
  4720 00003749 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4721 0000374F E973FFFFFF          <2> 		jmp noruniftest
  4722                              <2> 	fifoundbatch:
  4723 00003754 81C702000000        <2> 		add edi, 2
  4724 0000375A B00A                <2> 		mov al, 10
  4725 0000375C 3807                <2> 		cmp [edi], al
  4726 0000375E 0F840E000000        <2> 		je near goodfibatch
  4727 00003764 803F00              <2> 		cmp byte [edi], 0
  4728 00003767 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4729 0000376D E9ADFFFFFF          <2> 		jmp fifindbatch
  4730                              <2> 	goodfibatch:
  4731 00003772 B001                <2> 		mov al, 1
  4732 00003774 2805[F16F0300]      <2> 		sub [IFON], al 
  4733 0000377A A0[F16F0300]        <2> 		mov al, [IFON]
  4734 0000377F 8A1D[BF370000]      <2> 		mov bl, [iffalsebuf]
  4735 00003785 38D8                <2> 		cmp al, bl
  4736 00003787 7796                <2> 		ja fifindbatch
  4737 00003789 8B35[1D2C0000]      <2> 		mov esi, [currentcommandloc]
  4738 0000378F 81EF02000000        <2> 		sub edi, 2
  4739 00003795 C605[BE370000]00    <2> 		mov byte [runnextline], 0
  4740 0000379C E9A5FEFFFF          <2> 		jmp batchrunloop
  4741                              <2> 	iffoundbatch:
  4742 000037A1 B020                <2> 		mov al, ' '
  4743 000037A3 81C702000000        <2> 		add edi, 2
  4744 000037A9 3807                <2> 		cmp [edi], al
  4745 000037AB 0F856EFFFFFF        <2> 		jne near fifindbatch
  4746 000037B1 B001                <2> 		mov al, 1
  4747 000037B3 0005[F16F0300]      <2> 		add [IFON], al
  4748 000037B9 E961FFFFFF          <2> 		jmp fifindbatch
  4749                              <2> 		
  4750                              <2> 		
  4751 000037BE 01                  <2> runnextline db 1
  4752 000037BF 00                  <2> iffalsebuf db 0
  4753 000037C0 C3                  <2> notbatch: ret 
  4754                              <1> %ifdef network.included
  4755                              <1> 	%include 'source/programs/arp.asm'
  4756                              <1> %endif
  4757                              <1> %include 'source/programs/batch.asm'
  4758 000037C1 FF2C626174636800    <2> db 255,44,"batch",0
  4759                              <2> 	batchst: 
  4760 000037C9 8B3D[1D2C0000]      <2> 		mov edi, [currentcommandloc]
  4761 000037CF 81C706000000        <2> 		add edi, 6
  4762 000037D5 803F00              <2> 		cmp byte [edi], 0
  4763 000037D8 0F846D000000        <2> 		je near nonamefound
  4764 000037DE BE00004000          <2> 		mov esi, 0x400000
  4765 000037E3 E8051C0000          <2> 		call loadfile
  4766 000037E8 89D0                <2> 		mov eax, edx
  4767 000037EA 3D94010000          <2> 		cmp eax, 404
  4768 000037EF 7465                <2> 		je goodbatchname
  4769 000037F1 BE[FC370000]        <2> 		mov esi, badbatchname
  4770 000037F6 E8C0E3FFFF          <2> 		call print
  4771 000037FB C3                  <2> 		ret
  4772 000037FC 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4773 00003805 20616C726561647920- <2>
  4774 0000380E 657869737473210A00  <2>
  4775 00003817 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4776 00003820 746F20747970652061- <2>
  4777 00003829 206E616D6520616674- <2>
  4778 00003832 65722074686520636F- <2>
  4779 0000383B 6D6D616E642E0A00    <2>
  4780 00003843 00000000            <2> 		esicache3 dd 0
  4781 00003847 00000000            <2> 		esicache2 dd 0
  4782                              <2> 	nonamefound:
  4783 0000384B BE[17380000]        <2> 		mov esi, namenotfoundbatch
  4784 00003850 E866E3FFFF          <2> 		call print
  4785 00003855 C3                  <2> 		ret
  4786                              <2> 	goodbatchname:
  4787 00003856 BE00004000          <2> 		mov esi, 0x400000
  4788                              <2> 	batchcreate:
  4789 0000385B 8935[43380000]      <2> 		mov [esicache3], esi
  4790 00003861 BF00008000          <2> 		mov edi, 0x800000
  4791 00003866 B00A                <2> 		mov al, 10
  4792 00003868 B307                <2> 		mov bl, 7
  4793 0000386A B404                <2> 		mov ah, 4
  4794 0000386C CD30                <2> 		int 30h
  4795 0000386E 8935[47380000]      <2> 		mov [esicache2], esi
  4796 00003874 8A0E                <2> 		mov cl, [esi]
  4797 00003876 8B35[43380000]      <2> 		mov esi, [esicache3]
  4798 0000387C BB[B3380000]        <2> 		mov ebx, exitword
  4799 00003881 E8DCF3FFFF          <2> 		call cndtest
  4800 00003886 3C01                <2> 		cmp al, 1
  4801 00003888 7414                <2> 		je endbatchcreate
  4802 0000388A 3C02                <2> 		cmp al, 2
  4803 0000388C 7410                <2> 		je endbatchcreate
  4804 0000388E 8B35[47380000]      <2> 		mov esi, [esicache2]
  4805 00003894 B00A                <2> 		mov al, 10
  4806 00003896 8806                <2> 		mov [esi], al
  4807 00003898 46                  <2> 		inc esi
  4808 00003899 E9BDFFFFFF          <2> 		jmp batchcreate
  4809                              <2> 	endbatchcreate:
  4810 0000389E 8B35[43380000]      <2> 		mov esi, [esicache3]
  4811 000038A4 31C0                <2> 		xor eax, eax
  4812 000038A6 8806                <2> 		mov [esi], al
  4813 000038A8 BE00004000          <2> 		mov esi, 0x400000
  4814 000038AD E809E3FFFF          <2> 		call print
  4815 000038B2 C3                  <2> 		ret
  4816                              <2> 	
  4817 000038B3 5C7800              <2> 	exitword db "\x",0
  4818 000038B6 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4819 000038BF 6F20657869742E0A00  <2>
  4820                              <1> %ifdef gui.background
  4821                              <1> 	%include 'source/programs/background.asm'
  4822                              <1> %endif
  4823                              <1> %include 'source/programs/beep.asm'
  4824 000038C8 FF2C6265657000      <2> 	db 255,44,"beep",0
  4825                              <2> beep:
  4826 000038CF B8[F4380000]        <2> 	mov eax, beepstart
  4827 000038D4 A3[4E020000]        <2> 	mov [soundpos], eax
  4828 000038D9 B8[F8380000]        <2> 	mov eax, beepend
  4829 000038DE A3[52020000]        <2> 	mov [soundendpos], eax
  4830 000038E3 C605[4B020000]01    <2> 	mov byte [soundon], 1
  4831                              <2> waitforsoundendbeep:
  4832 000038EA A0[4B020000]        <2> 	mov al, [soundon]
  4833 000038EF 3C00                <2> 	cmp al, 0
  4834 000038F1 75F7                <2> 	jne waitforsoundendbeep
  4835 000038F3 C3                  <2> 	ret
  4836                              <2> 	
  4837                              <2> beepstart:
  4838 000038F4 3200D111            <2> 	dw 50, 4561
  4839                              <2> beepend:
  4840                              <1> %ifdef dos.compatible
  4841                              <1> %else
  4842                              <1> 	%include 'source/programs/boot.asm'
  4843 000038F8 FF2C626F6F7400      <2> db 255,44,"boot",0
  4844                              <2> quickboot:
  4845                              <2> 	;load and jump to the bootloader
  4846                              <2> 	; mov ecx, 1
  4847                              <2> 	; xor ebx, ebx
  4848                              <2> 	; mov esi, 0x400000
  4849                              <2> 	; call diskr
  4850                              <2> 	; mov ax, LINEAR_SEL
  4851                              <2> 	; mov fs, ax
  4852                              <2> 	; mov esi, 0x400000
  4853                              <2> 	; mov edi, 0x7C00
  4854                              <2> 	; xor ebx, ebx
  4855                              <2> ; .lp:
  4856                              <2> 	; mov ecx, [esi+ebx]
  4857                              <2> 	; mov [fs:edi+ebx], ecx
  4858                              <2> 	; add ebx, 4
  4859                              <2> 	; cmp ebx, 512
  4860                              <2> 	; jb .lp
  4861 000038FF 66BB[0F39]          <2> 	mov bx, bootload
  4862 00003903 66891D[B00C0000]    <2> 	mov [realmodeptr], bx
  4863 0000390A E98FD2FFFF          <2> 	jmp realmode
  4864                              <2> [BITS 16]
  4865                              <2> bootload:
  4866 0000390F B80300              <2> 	mov ax, 3
  4867 00003912 31DB                <2> 	xor bx, bx
  4868 00003914 CD10                <2> 	int 10h
  4869 00003916 EA007C0000          <2> 	jmp 0:0x7C00
  4870                              <2> [BITS 32]
  4871                              <1> %endif
  4872                              <1> %include 'source/programs/cd.asm'
  4873 0000391B FF2C636400          <2> db 255,44,"cd",0
  4874                              <2> cd:
  4875 00003920 8B35[1D2C0000]      <2> 	mov esi, [currentcommandloc]
  4876 00003926 81C603000000        <2> 	add esi, 3
  4877 0000392C 8B3D[E86D0300]      <2> 	mov edi, [currentfolderloc]
  4878 00003932 893D[E46D0300]      <2> 	mov [lastfolderloc], edi
  4879 00003938 81C7[EC6D0300]      <2> 	add edi, currentfolder
  4880 0000393E 4F                  <2> 	dec edi
  4881 0000393F 66813E2E2E          <2> 	cmp word [esi], ".."
  4882 00003944 742A                <2> 	je .moveup
  4883 00003946 47                  <2> 	inc edi
  4884                              <2> .movedown:
  4885 00003947 8A06                <2> 	mov al, [esi]
  4886 00003949 8807                <2> 	mov [edi], al
  4887 0000394B 47                  <2> 	inc edi
  4888 0000394C 46                  <2> 	inc esi
  4889 0000394D 3C00                <2> 	cmp al, 0
  4890 0000394F 740A                <2> 	je .donecd
  4891 00003951 81FF[EC6F0300]      <2> 	cmp edi, currentfolderend
  4892 00003957 72EE                <2> 	jb .movedown
  4893 00003959 30C0                <2> 	xor al, al
  4894                              <2> .donecd:
  4895 0000395B 4F                  <2> 	dec edi
  4896 0000395C C6072F              <2> 	mov byte [edi], '/'
  4897 0000395F 47                  <2> 	inc edi
  4898 00003960 C60700              <2> 	mov byte [edi], 0
  4899 00003963 81EF[EC6D0300]      <2> 	sub edi, currentfolder
  4900 00003969 893D[E86D0300]      <2> 	mov [currentfolderloc], edi
  4901 0000396F C3                  <2> 	ret
  4902                              <2> .moveup:
  4903 00003970 31C0                <2> 	xor eax, eax
  4904 00003972 A3[E46D0300]        <2> 	mov [lastfolderloc], eax
  4905                              <2> .moveuploop:
  4906 00003977 4F                  <2> 	dec edi
  4907 00003978 8A07                <2> 	mov al, [edi]
  4908 0000397A 81FF[EC6D0300]      <2> 	cmp edi, currentfolder
  4909 00003980 763B                <2> 	jbe .moveupover
  4910 00003982 3C2F                <2> 	cmp al, '/'
  4911 00003984 75F1                <2> 	jne .moveuploop
  4912 00003986 C6072F              <2> 	mov byte [edi], '/'
  4913 00003989 47                  <2> 	inc edi
  4914 0000398A C60700              <2> 	mov byte [edi], 0
  4915 0000398D 81EF[EC6D0300]      <2> 	sub edi, currentfolder
  4916 00003993 893D[E86D0300]      <2> 	mov [currentfolderloc], edi
  4917 00003999 81C7[EC6D0300]      <2> 	add edi, currentfolder
  4918 0000399F 4F                  <2> 	dec edi
  4919                              <2> .lastfolder:
  4920 000039A0 4F                  <2> 	dec edi
  4921 000039A1 8A07                <2> 	mov al, [edi]
  4922 000039A3 81FF[EC6D0300]      <2> 	cmp edi, currentfolder
  4923 000039A9 7604                <2> 	jbe .donemoveup
  4924 000039AB 3C2F                <2> 	cmp al, '/'
  4925 000039AD 75F1                <2> 	jne .lastfolder
  4926                              <2> .donemoveup:
  4927 000039AF 47                  <2> 	inc edi
  4928 000039B0 81EF[EC6D0300]      <2> 	sub edi, currentfolder
  4929 000039B6 893D[E46D0300]      <2> 	mov [lastfolderloc], edi
  4930 000039BC C3                  <2> 	ret
  4931                              <2> .moveupover:
  4932 000039BD BF[EC6D0300]        <2> 	mov edi, currentfolder
  4933 000039C2 C6072F              <2> 	mov byte [edi], '/'
  4934 000039C5 47                  <2> 	inc edi
  4935 000039C6 C60700              <2> 	mov byte [edi], 0
  4936 000039C9 31C0                <2> 	xor eax, eax
  4937 000039CB A3[E46D0300]        <2> 	mov [lastfolderloc], eax
  4938 000039D0 40                  <2> 	inc eax
  4939 000039D1 A3[E86D0300]        <2> 	mov [currentfolderloc], eax
  4940 000039D6 C3                  <2> 	ret
  4941                              <1> %include 'source/programs/charmap.asm'
  4942 000039D7 00                  <2> charmapnum db 0
  4943 000039D8 FF2C636861726D6170- <2> db 255,44,"charmap",0
  4944 000039E1 00                  <2>
  4945 000039E2 8B35[1D2C0000]      <2> 	mov esi, [currentcommandloc]
  4946 000039E8 81C609000000        <2> 	add esi, 9
  4947 000039EE 803E00              <2> 	cmp byte [esi], 0
  4948 000039F1 7412                <2> 	je .nospecific
  4949 000039F3 E8D6F5FFFF          <2> 	call cnvrthextxt
  4950 000039F8 6689C8              <2> 	mov ax, cx
  4951 000039FB 66BB0700            <2> 	mov bx, 7
  4952 000039FF E863E8FFFF          <2> 	call prcharq
  4953 00003A04 C3                  <2> 	ret
  4954                              <2> .nospecific:
  4955 00003A05 66BB0700            <2> 	mov bx, 7
  4956 00003A09 66B82000            <2> 	mov ax, " "
  4957 00003A0D C605[D7390000]00    <2> 	mov byte [charmapnum], 0
  4958 00003A14 E84EE8FFFF          <2> 	call prcharq
  4959 00003A19 E849E8FFFF          <2> 	call prcharq
  4960 00003A1E E844E8FFFF          <2> 	call prcharq
  4961 00003A23 E83FE8FFFF          <2> 	call prcharq
  4962 00003A28 66B83000            <2> 	mov ax, "0"
  4963                              <2> charmapnumprnt:
  4964 00003A2C E836E8FFFF          <2> 	call prcharq
  4965 00003A31 6640                <2> 	inc ax
  4966 00003A33 6650                <2> 	push ax
  4967 00003A35 66B82000            <2> 	mov ax, " "
  4968 00003A39 E829E8FFFF          <2> 	call prcharq
  4969 00003A3E 6658                <2> 	pop ax
  4970 00003A40 663D3900            <2> 	cmp ax, "9"
  4971 00003A44 76E6                <2> 	jbe charmapnumprnt
  4972 00003A46 66B84100            <2> 	mov ax, "A"
  4973                              <2> charmapnumprnt2:
  4974 00003A4A E818E8FFFF          <2> 	call prcharq
  4975 00003A4F 6640                <2> 	inc ax
  4976 00003A51 6650                <2> 	push ax
  4977 00003A53 66B82000            <2> 	mov ax, " "
  4978 00003A57 E80BE8FFFF          <2> 	call prcharq
  4979 00003A5C 6658                <2> 	pop ax
  4980 00003A5E 663D4700            <2> 	cmp ax, "G"
  4981 00003A62 72E6                <2> 	jb charmapnumprnt2
  4982                              <2> 	
  4983 00003A64 BE[35550000]        <2> 	mov esi, line
  4984 00003A69 E82EE1FFFF          <2> 	call printquiet
  4985 00003A6E 6631C0              <2> 	xor ax, ax
  4986 00003A71 6689C1              <2> 	mov cx, ax
  4987 00003A74 E8DEF3FFFF          <2> 	call showhexsmall
  4988 00003A79 E973000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  4989                              <2> charmapcopy:
  4990 00003A7E 6640                <2> 	inc ax
  4991 00003A80 6650                <2> 	push ax
  4992 00003A82 663D0800            <2> 	cmp ax, 8
  4993 00003A86 7469                <2> 	je charmapnocopy
  4994 00003A88 663D0900            <2> 	cmp ax, 9
  4995 00003A8C 7463                <2> 	je charmapnocopy
  4996 00003A8E 663D0A00            <2> 	cmp ax, 10
  4997 00003A92 745D                <2> 	je charmapnocopy
  4998 00003A94 663D0D00            <2> 	cmp ax, 13
  4999 00003A98 7457                <2> 	je charmapnocopy
  5000 00003A9A 663DFF00            <2> 	cmp ax, 255
  5001 00003A9E 7451                <2> 	je charmapnocopy
  5002 00003AA0 663D0001            <2> 	cmp ax, 256
  5003 00003AA4 7446                <2> 	je nomorecharmap
  5004 00003AA6 E8BCE7FFFF          <2> 	call prcharq
  5005 00003AAB 66B82000            <2> 	mov ax, " "
  5006 00003AAF E8B3E7FFFF          <2> 	call prcharq
  5007 00003AB4 6658                <2> 	pop ax
  5008                              <2> charmapcopycheck:
  5009 00003AB6 FE05[D7390000]      <2> 	inc byte [charmapnum]
  5010 00003ABC 803D[D7390000]10    <2> 	cmp byte [charmapnum], 16
  5011 00003AC3 72B9                <2> 	jb charmapcopy
  5012 00003AC5 6650                <2> 	push ax
  5013 00003AC7 BE[35550000]        <2> 	mov esi, line
  5014 00003ACC E8CBE0FFFF          <2> 	call printquiet
  5015 00003AD1 6658                <2> 	pop ax
  5016 00003AD3 3CFF                <2> 	cmp al, 255
  5017 00003AD5 7415                <2> 	je nomorecharmap
  5018 00003AD7 88C1                <2> 	mov cl, al
  5019 00003AD9 FEC1                <2> 	inc cl
  5020 00003ADB E877F3FFFF          <2> 	call showhexsmall
  5021 00003AE0 C605[D7390000]00    <2> 	mov byte [charmapnum], 0
  5022 00003AE7 E992FFFFFF          <2> 	jmp charmapcopy
  5023                              <2> nomorecharmap:
  5024 00003AEC E967EEFFFF          <2> 	jmp nwcmd
  5025                              <2> charmapnocopy:
  5026 00003AF1 6650                <2> 	push ax
  5027 00003AF3 66B82000            <2> 	mov ax, " "
  5028 00003AF7 E86BE7FFFF          <2> 	call prcharq
  5029 00003AFC E866E7FFFF          <2> 	call prcharq
  5030 00003B01 6658                <2> 	pop ax
  5031 00003B03 E9AEFFFFFF          <2> 	jmp charmapcopycheck
  5032                              <1> %ifdef gui.included
  5033                              <1> 	%include 'source/programs/circle.asm'
  5034                              <1> %endif
  5035                              <1> %include 'source/programs/clear.asm'
  5036 00003B08 FF2C636C65617200    <2> db 255,44,"clear",0
  5037 00003B10 E858E1FFFF          <2> 		call clear
  5038 00003B15 C3                  <2> 		ret 
  5039                              <1> %include 'source/programs/cpuid.asm'
  5040 00003B16 FF2C637075696400    <2> db 255,44,"cpuid",0
  5041 00003B1E 31C0                <2> 	xor eax, eax
  5042 00003B20 0FA2                <2> 	cpuid
  5043 00003B22 891D[733B0000]      <2> 	mov [cpuidbuf], ebx
  5044 00003B28 8915[773B0000]      <2> 	mov [cpuidbuf + 4], edx
  5045 00003B2E 890D[7B3B0000]      <2> 	mov [cpuidbuf + 8], ecx
  5046 00003B34 BE[733B0000]        <2> 	mov esi, cpuidbuf
  5047 00003B39 E87DE0FFFF          <2> 	call print
  5048 00003B3E BE[35550000]        <2> 	mov esi, line
  5049 00003B43 E873E0FFFF          <2> 	call print
  5050 00003B48 B801000000          <2> 	mov eax, 1
  5051 00003B4D 0FA2                <2> 	cpuid
  5052 00003B4F 89C1                <2> 	mov ecx, eax
  5053 00003B51 C605[562E0000]02    <2> 	mov byte [firsthexshown], 2
  5054 00003B58 E80EF3FFFF          <2> 	call showhex
  5055 00003B5D B808000080          <2> 	mov eax, 0x80000008
  5056 00003B62 0FA2                <2> 	cpuid
  5057 00003B64 89C1                <2> 	mov ecx, eax
  5058 00003B66 C605[562E0000]02    <2> 	mov byte [firsthexshown], 2
  5059 00003B6D E8F9F2FFFF          <2> 	call showhex
  5060 00003B72 C3                  <2> 	ret
  5061                              <2> 	
  5062 00003B73 00<rept>            <2> cpuidbuf times 13 db 0
  5063                              <2> cpuidvendorend:
  5064                              <1> %include 'source/programs/date.asm'
  5065 00003B80 082E30303030303030- <2> timenscache db 8,".000000000"
  5066 00003B89 3030                <2>
  5067 00003B8B 200A00              <2> timenscacheend: db " ",10,0
  5068 00003B8E 00                  <2> istimeset db 0
  5069 00003B8F 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5070 00003B98 2063757272656E7420- <2>
  5071 00003BA1 554E49582074696D65- <2>
  5072 00003BAA 3A0A00              <2>
  5073 00003BAD 00<rept>            <2> timeinputbuffer times 12 db 0
  5074 00003BB9 00                  <2> timeinputbend: db 0
  5075                              <2> 
  5076 00003BBA FF2C6461746500      <2> db 255,44,"date",0
  5077                              <2> 	;cmp byte [istimeset], 0
  5078                              <2> 	;jne timeisset
  5079 00003BC1 E880000000          <2> 	call time
  5080 00003BC6 E828020000          <2> 	call timeconvert	
  5081                              <2> 	; mov esi, settimemsg
  5082                              <2> 	; call print
  5083                              <2> 	; mov esi, timeinputbuffer
  5084                              <2> 	; mov edi, timeinputbend
  5085                              <2> 	; call readline
  5086                              <2> 	; mov esi, timeinputbuffer
  5087                              <2> 	; xor edi, edi
  5088                              <2> 	; call cnvrttxt
  5089 00003BCB 890D[43020000]      <2> 	mov [timeseconds], ecx
  5090                              <2> 	;xor ecx, ecx
  5091                              <2> 	;mov [timenanoseconds], ecx
  5092 00003BD1 C605[8E3B0000]01    <2> 	mov byte [istimeset], 1
  5093                              <2> timeisset:
  5094 00003BD8 8B0D[43020000]      <2> 	mov ecx, [timeseconds]
  5095 00003BDE E852F3FFFF          <2> 	call showdec
  5096                              <2> 	
  5097 00003BE3 8B0D[47020000]      <2> 	mov ecx, [timenanoseconds]
  5098 00003BE9 BE[803B0000]        <2> 	mov esi, timenscache
  5099 00003BEE C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5100 00003BF5 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5101 00003BFC C6460A30            <2> 	mov byte [esi + 10], "0"
  5102 00003C00 BE[8B3B0000]        <2> 	mov esi, timenscacheend
  5103 00003C05 E8F9F0FFFF          <2> 	call convert
  5104 00003C0A BE[803B0000]        <2> 	mov esi, timenscache
  5105 00003C0F E888DFFFFF          <2> 	call printquiet
  5106                              <2> 	
  5107 00003C14 E82D000000          <2> 	call time
  5108 00003C19 BE[613F0000]        <2> 	mov esi, timeshow
  5109 00003C1E E879DFFFFF          <2> 	call printquiet
  5110 00003C23 BE[35550000]        <2> 	mov esi, line
  5111 00003C28 E86FDFFFFF          <2> 	call printquiet
  5112 00003C2D BE[6A3F0000]        <2> 	mov esi, dateshow
  5113 00003C32 E865DFFFFF          <2> 	call printquiet
  5114 00003C37 BE[35550000]        <2> 	mov esi, line
  5115 00003C3C E85BDFFFFF          <2> 	call printquiet
  5116 00003C41 E9BE000000          <2> 	jmp findday
  5117                              <2> time:
  5118 00003C46 E851010000          <2> 	call tstackput1
  5119 00003C4B B00A                <2> 	mov al,10			;Get RTC register A
  5120 00003C4D E87B010000          <2> 	call tget1
  5121 00003C52 A880                <2> 	test al,0x80			;Is update in progress?
  5122 00003C54 75F0                <2> 	jne time				; yes, wait
  5123                              <2> 
  5124 00003C56 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5125 00003C58 E870010000          <2> 	call tget1
  5126 00003C5D A2[583F0000]        <2> 	mov [RTCtimeSecond],al
  5127                              <2> 
  5128 00003C62 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5129 00003C64 E864010000          <2> 	call tget1
  5130 00003C69 A2[593F0000]        <2> 	mov [RTCtimeMinute],al
  5131                              <2> 
  5132 00003C6E B004                <2> 	mov al,0x04			;Get hours (see notes)
  5133 00003C70 E858010000          <2> 	call tget1
  5134 00003C75 A2[5A3F0000]        <2> 	mov [RTCtimeHour],al
  5135                              <2> 
  5136 00003C7A B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5137 00003C7C E84C010000          <2> 	call tget1
  5138 00003C81 A2[5B3F0000]        <2> 	mov [RTCtimeDay],al
  5139                              <2> 
  5140 00003C86 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5141 00003C88 E840010000          <2> 	call tget1
  5142 00003C8D 241F                <2> 	and al, 11111b
  5143 00003C8F A2[5C3F0000]        <2> 	mov [RTCtimeMonth],al
  5144                              <2> 
  5145 00003C94 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5146 00003C96 E832010000          <2> 	call tget1
  5147 00003C9B A2[5D3F0000]        <2> 	mov [RTCtimeYear],al
  5148                              <2> 	
  5149 00003CA0 BE[613F0000]        <2> 	mov esi, timeshow
  5150 00003CA5 8A2D[5A3F0000]      <2> 	mov ch, [RTCtimeHour]
  5151 00003CAB E828010000          <2> 	call tput1
  5152 00003CB0 8A2D[593F0000]      <2> 	mov ch, [RTCtimeMinute]
  5153 00003CB6 E81D010000          <2> 	call tput1
  5154 00003CBB 8A2D[583F0000]      <2> 	mov ch, [RTCtimeSecond]
  5155 00003CC1 E812010000          <2> 	call tput1
  5156 00003CC6 BE[6A3F0000]        <2> 	mov esi, dateshow
  5157 00003CCB 8A2D[5C3F0000]      <2> 	mov ch, [RTCtimeMonth]
  5158 00003CD1 E802010000          <2> 	call tput1
  5159 00003CD6 8A2D[5B3F0000]      <2> 	mov ch, [RTCtimeDay]
  5160 00003CDC E8F7000000          <2> 	call tput1
  5161 00003CE1 B520                <2> 	mov ch, 0x20
  5162 00003CE3 E8F0000000          <2> 	call tput1
  5163 00003CE8 4E                  <2> 	dec esi
  5164 00003CE9 8A2D[5D3F0000]      <2> 	mov ch, [RTCtimeYear]
  5165 00003CEF E8E4000000          <2> 	call tput1
  5166 00003CF4 E8BD000000          <2> 	call tstackget1
  5167 00003CF9 C3                  <2> 	ret
  5168 00003CFA BE[613F0000]        <2> 	mov esi, timeshow
  5169 00003CFF E8B7DEFFFF          <2> 	call print
  5170                              <2> ;;get day of week
  5171                              <2> ;;add these:
  5172                              <2> ;;century value
  5173                              <2> ;;last 2 digits of year
  5174                              <2> ;;last 2 digits of year right shifted twice
  5175                              <2> ;;month table value
  5176                              <2> ;;day of the month
  5177                              <2> ;;divide these by 7
  5178                              <2> ;;the remainder is the day
  5179                              <2> findday:
  5180 00003D04 31C0                <2> 	xor eax, eax
  5181                              <2> ;;first convert the values from BCD to hex
  5182 00003D06 A0[5B3F0000]        <2> 	mov al, [RTCtimeDay]
  5183 00003D0B E873000000          <2> 	call converttohex
  5184 00003D10 8825[5E3F0000]      <2> 	mov [dayhex], ah
  5185 00003D16 A0[5C3F0000]        <2> 	mov al, [RTCtimeMonth]
  5186 00003D1B E863000000          <2> 	call converttohex
  5187 00003D20 8825[5F3F0000]      <2> 	mov [monthhex], ah
  5188 00003D26 A0[5D3F0000]        <2> 	mov al, [RTCtimeYear]
  5189 00003D2B E853000000          <2> 	call converttohex
  5190 00003D30 8825[603F0000]      <2> 	mov [yearhex], ah
  5191 00003D36 31C0                <2> 	xor eax, eax
  5192 00003D38 A0[603F0000]        <2> 	mov al, [yearhex]
  5193 00003D3D C0E802              <2> 	shr al, 2
  5194 00003D40 0205[603F0000]      <2> 	add al, [yearhex]
  5195 00003D46 0506000000          <2> 	add eax, 6
  5196 00003D4B 31DB                <2> 	xor ebx, ebx
  5197 00003D4D 8A1D[5F3F0000]      <2> 	mov bl, [monthhex]
  5198 00003D53 FECB                <2> 	dec bl
  5199 00003D55 81C3[7F3F0000]      <2> 	add ebx, month
  5200 00003D5B 31C9                <2> 	xor ecx, ecx
  5201 00003D5D 8A0B                <2> 	mov cl, [ebx]
  5202 00003D5F 01C8                <2> 	add eax, ecx
  5203 00003D61 8A0D[5E3F0000]      <2> 	mov cl, [dayhex]
  5204 00003D67 01C8                <2> 	add eax, ecx
  5205 00003D69 66BB0700            <2> 	mov bx, 7
  5206 00003D6D 31D2                <2> 	xor edx, edx
  5207 00003D6F 66F7F3              <2> 	div bx
  5208 00003D72 C1E202              <2> 	shl edx, 2
  5209 00003D75 81C2[8B3F0000]      <2> 	add edx, day
  5210 00003D7B 8B32                <2> 	mov esi, [edx]
  5211 00003D7D E839DEFFFF          <2> 	call print
  5212 00003D82 C3                  <2> 	ret
  5213                              <2> 	
  5214                              <2> converttohex:
  5215 00003D83 88C4                <2> 	mov ah, al
  5216 00003D85 C0E804              <2> 	shr al, 4
  5217 00003D88 C0E404              <2> 	shl ah, 4
  5218 00003D8B C0EC04              <2> 	shr ah, 4
  5219 00003D8E 3C00                <2> 	cmp al, 0
  5220 00003D90 7409                <2> 	je noconverttohex
  5221                              <2> converttohexlp:
  5222 00003D92 80C40A              <2> 	add ah, 10
  5223 00003D95 FEC8                <2> 	dec al
  5224 00003D97 3C00                <2> 	cmp al, 0
  5225 00003D99 75F7                <2> 	jne converttohexlp
  5226                              <2> noconverttohex:
  5227 00003D9B C3                  <2> 	ret
  5228                              <2> 	
  5229                              <2> tstackput1:
  5230 00003D9C 8935[543F0000]      <2> 	mov [tstack + 20], esi
  5231 00003DA2 BE[403F0000]        <2> 	mov esi, tstack
  5232 00003DA7 8906                <2> 	mov [esi], eax
  5233 00003DA9 895E04              <2> 	mov [esi + 4], ebx
  5234 00003DAC 894E08              <2> 	mov [esi + 8], ecx
  5235 00003DAF 89560C              <2> 	mov [esi + 12], edx
  5236 00003DB2 897E10              <2> 	mov [esi + 16], edi
  5237 00003DB5 C3                  <2> 	ret
  5238                              <2> 	
  5239                              <2> tstackget1:
  5240 00003DB6 BE[403F0000]        <2> 	mov esi, tstack
  5241 00003DBB 8B06                <2> 	mov eax, [esi]
  5242 00003DBD 8B5E04              <2> 	mov ebx, [esi + 4]
  5243 00003DC0 8B4E08              <2> 	mov ecx, [esi + 8]
  5244 00003DC3 8B560C              <2> 	mov edx, [esi + 12]
  5245 00003DC6 8B7E10              <2> 	mov edi, [esi + 16]
  5246 00003DC9 8B7614              <2> 	mov esi, [esi + 20]
  5247 00003DCC C3                  <2> 	ret
  5248                              <2> 	
  5249                              <2> tget1:
  5250 00003DCD 66BA7000            <2> 	mov dx, 0x70
  5251 00003DD1 EE                  <2> 	out dx, al
  5252 00003DD2 6642                <2> 	inc dx
  5253 00003DD4 EC                  <2> 	in al, dx
  5254 00003DD5 664A                <2> 	dec dx
  5255 00003DD7 C3                  <2> 	ret
  5256                              <2> 	
  5257                              <2> tput1:
  5258 00003DD8 66C1E904            <2> 	shr cx, 4
  5259 00003DDC B030                <2> 	mov al, 48
  5260 00003DDE 00E8                <2> 	add al, ch
  5261 00003DE0 8806                <2> 	mov [esi], al
  5262 00003DE2 46                  <2> 	inc esi
  5263 00003DE3 B030                <2> 	mov al, 48
  5264 00003DE5 C0E904              <2> 	shr cl, 4
  5265 00003DE8 00C8                <2> 	add al, cl
  5266 00003DEA 8806                <2> 	mov [esi], al
  5267 00003DEC 81C602000000        <2> 	add esi, 2
  5268 00003DF2 C3                  <2> 	ret
  5269                              <2> 	
  5270                              <2> timeconvert: ;return time in the RTCtime stuff in ecx
  5271 00003DF3 31DB                <2> 	xor ebx, ebx
  5272 00003DF5 31C9                <2> 	xor ecx, ecx
  5273 00003DF7 31FF                <2> 	xor edi, edi
  5274 00003DF9 31F6                <2> 	xor esi, esi
  5275                              <2> 	
  5276 00003DFB A0[583F0000]        <2> 	mov al, [RTCtimeSecond]
  5277 00003E00 E87EFFFFFF          <2> 	call converttohex
  5278 00003E05 88E1                <2> 	mov cl, ah
  5279                              <2> 	
  5280 00003E07 A0[593F0000]        <2> 	mov al, [RTCtimeMinute]
  5281 00003E0C E872FFFFFF          <2> 	call converttohex
  5282 00003E11 88E3                <2> 	mov bl, ah
  5283 00003E13 B83C000000          <2> 	mov eax, 60
  5284 00003E18 31D2                <2> 	xor edx, edx
  5285 00003E1A F7E3                <2> 	mul ebx
  5286 00003E1C 01C1                <2> 	add ecx, eax
  5287                              <2> 	
  5288 00003E1E A0[5A3F0000]        <2> 	mov al, [RTCtimeHour]
  5289 00003E23 E85BFFFFFF          <2> 	call converttohex
  5290 00003E28 88E3                <2> 	mov bl, ah
  5291 00003E2A B8100E0000          <2> 	mov eax, 3600
  5292 00003E2F 31D2                <2> 	xor edx, edx
  5293 00003E31 F7E3                <2> 	mul ebx
  5294 00003E33 01C1                <2> 	add ecx, eax
  5295                              <2> 		
  5296 00003E35 31C0                <2> 	xor eax, eax
  5297 00003E37 A0[5D3F0000]        <2> 	mov al, [RTCtimeYear]
  5298 00003E3C E842FFFFFF          <2> 	call converttohex
  5299 00003E41 6689C6              <2> 	mov si, ax
  5300 00003E44 66C1EE08            <2> 	shr si, 8
  5301 00003E48 6681FE4600          <2> 	cmp si, 70
  5302 00003E4D 7705                <2> 	ja .no100
  5303 00003E4F 6681C66400          <2> 	add si, 100
  5304                              <2> .no100:
  5305 00003E54 6681C66C07          <2> 	add si, 1900
  5306                              <2> 	
  5307 00003E59 BB[323F0000]        <2> 	mov ebx, .month
  5308 00003E5E A0[5B3F0000]        <2> 	mov al, [RTCtimeDay]
  5309 00003E63 E81BFFFFFF          <2> 	call converttohex
  5310 00003E68 88E0                <2> 	mov al, ah
  5311 00003E6A FEC8                <2> 	dec al
  5312 00003E6C 31D2                <2> 	xor edx, edx
  5313 00003E6E 88C2                <2> 	mov dl, al
  5314 00003E70 A0[5C3F0000]        <2> 	mov al, [RTCtimeMonth]
  5315 00003E75 E809FFFFFF          <2> 	call converttohex
  5316 00003E7A 88D0                <2> 	mov al, dl
  5317 00003E7C 88E2                <2> 	mov dl, ah
  5318 00003E7E 30E4                <2> 	xor ah, ah
  5319 00003E80 6689D5              <2> 	mov bp, dx
  5320                              <2> 	
  5321 00003E83 6689F7              <2> 	mov di, si
  5322 00003E86 66C1EF02            <2> 	shr di, 2
  5323 00003E8A 66C1E702            <2> 	shl di, 2
  5324 00003E8E C605[333F0000]1C    <2> 	mov byte [.month + 1], 28
  5325 00003E95 6639F7              <2> 	cmp di, si
  5326 00003E98 7506                <2> 	jne .nofebmod
  5327 00003E9A FE05[333F0000]      <2> 	inc byte [.month + 1]
  5328                              <2> .nofebmod:
  5329 00003EA0 664D                <2> 	dec bp
  5330 00003EA2 6681FD0000          <2> 	cmp bp, 0
  5331 00003EA7 740A                <2> 	je .ylp
  5332 00003EA9 8A13                <2> 	mov dl, [ebx]
  5333 00003EAB 01D0                <2> 	add eax, edx
  5334 00003EAD 43                  <2> 	inc ebx
  5335 00003EAE E9EDFFFFFF          <2> 	jmp .nofebmod
  5336                              <2> 	
  5337                              <2> .ylp:
  5338 00003EB3 6689F7              <2> 	mov di, si
  5339 00003EB6 66C1EF02            <2> 	shr di, 2
  5340 00003EBA 66C1E702            <2> 	shl di, 2
  5341 00003EBE 81C18033E101        <2> 	add ecx, 31536000
  5342 00003EC4 6639F7              <2> 	cmp di, si
  5343 00003EC7 7506                <2> 	jne .noymod
  5344 00003EC9 81C180510100        <2> 	add ecx, 86400
  5345                              <2> .noymod:
  5346 00003ECF 664E                <2> 	dec si
  5347 00003ED1 6681FEB207          <2> 	cmp si, 1970
  5348 00003ED6 77DB                <2> 	ja .ylp
  5349                              <2> 	
  5350 00003ED8 BB80510100          <2> 	mov ebx, 86400
  5351 00003EDD 31D2                <2> 	xor edx, edx
  5352 00003EDF F7E3                <2> 	mul ebx
  5353 00003EE1 01C1                <2> 	add ecx, eax
  5354                              <2> 	
  5355 00003EE3 31DB                <2> 	xor ebx, ebx
  5356 00003EE5 31D2                <2> 	xor edx, edx
  5357 00003EE7 B8100E0000          <2> 	mov eax, 3600
  5358 00003EEC 8A3D[3E3F0000]      <2> 	mov bh, [timezoneh]
  5359 00003EF2 80FF80              <2> 	cmp bh, 128
  5360 00003EF5 720D                <2> 	jb .posh
  5361 00003EF7 28FB                <2> 	sub bl, bh
  5362 00003EF9 30FF                <2> 	xor bh, bh
  5363 00003EFB F7E3                <2> 	mul ebx
  5364 00003EFD 01C1                <2> 	add ecx, eax
  5365 00003EFF E906000000          <2> 	jmp .doneth
  5366                              <2> .posh:
  5367 00003F04 86DF                <2> 	xchg bl, bh
  5368 00003F06 F7E3                <2> 	mul ebx
  5369 00003F08 29C1                <2> 	sub ecx, eax
  5370                              <2> .doneth:
  5371                              <2> 
  5372 00003F0A 31DB                <2> 	xor ebx, ebx	
  5373 00003F0C 31D2                <2> 	xor edx, edx
  5374 00003F0E B83C000000          <2> 	mov eax, 60
  5375 00003F13 8A3D[3F3F0000]      <2> 	mov bh, [timezonem]
  5376 00003F19 80FF80              <2> 	cmp bh, 128
  5377 00003F1C 720D                <2> 	jb .posm
  5378 00003F1E 28FB                <2> 	sub bl, bh
  5379 00003F20 30FF                <2> 	xor bh, bh
  5380 00003F22 F7E3                <2> 	mul ebx
  5381 00003F24 01C1                <2> 	add ecx, eax
  5382 00003F26 E906000000          <2> 	jmp .donetm
  5383                              <2> .posm:
  5384 00003F2B 86DF                <2> 	xchg bl, bh
  5385 00003F2D F7E3                <2> 	mul ebx
  5386 00003F2F 29C1                <2> 	sub ecx, eax
  5387                              <2> .donetm:
  5388                              <2> 
  5389 00003F31 C3                  <2> 	ret
  5390                              <2> 	
  5391                              <2> 
  5392 00003F32 1F1C1F1E1F1E1F1F1E- <2> .month db 31,28,31,30,31,30,31,31,30,31,30,31
  5393 00003F3B 1F1E1F              <2>
  5394                              <2> 
  5395 00003F3E FA                  <2> 	timezoneh db -6
  5396 00003F3F 00                  <2> 	timezonem db 0
  5397 00003F40 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5398 00003F49 000000000000000000- <2>
  5399 00003F52 000000000000        <2>
  5400 00003F58 00                  <2> 	RTCtimeSecond db 0
  5401 00003F59 00                  <2> 	RTCtimeMinute db 0
  5402 00003F5A 00                  <2> 	RTCtimeHour db 0
  5403 00003F5B 00                  <2> 	RTCtimeDay db 0
  5404 00003F5C 00                  <2> 	RTCtimeMonth db 0
  5405 00003F5D 00                  <2> 	RTCtimeYear db 0
  5406 00003F5E 00                  <2> 	dayhex db 0
  5407 00003F5F 00                  <2> 	monthhex db 0
  5408 00003F60 00                  <2> 	yearhex db 0
  5409 00003F61 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  5410 00003F6A 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  5411 00003F73 302000              <2>
  5412                              <2> 	oldcentury:	;;from 1700 to 1900
  5413 00003F76 040200              <2> 	db 4,2,0
  5414                              <2> 	century:	;;from 2000 to 2500
  5415 00003F79 060402000604        <2> 	db 6,4,2,0,6,4
  5416                              <2> 	month:
  5417 00003F7F 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5418 00003F88 000305              <2>
  5419                              <2> 	day:
  5420 00003F8B [A73F0000]          <2> 	dd sunday
  5421 00003F8F [AF3F0000]          <2> 	dd monday
  5422 00003F93 [B73F0000]          <2> 	dd tuesday
  5423 00003F97 [C03F0000]          <2> 	dd wednesday
  5424 00003F9B [CB3F0000]          <2> 	dd thursday
  5425 00003F9F [D53F0000]          <2> 	dd friday
  5426 00003FA3 [DD3F0000]          <2> 	dd saturday
  5427                              <2> sunday:
  5428 00003FA7 53756E6461790A00    <2> 	db "Sunday",10,0
  5429                              <2> monday:
  5430 00003FAF 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5431                              <2> tuesday:
  5432 00003FB7 547565736461790A00  <2> 	db "Tuesday",10,0
  5433                              <2> wednesday:
  5434 00003FC0 5765646E6573646179- <2> 	db "Wednesday",10,0
  5435 00003FC9 0A00                <2>
  5436                              <2> thursday:
  5437 00003FCB 54687572736461790A- <2> 	db "Thursday",10,0
  5438 00003FD4 00                  <2>
  5439                              <2> friday:
  5440 00003FD5 4672696461790A00    <2> 	db "Friday",10,0
  5441                              <2> saturday:
  5442 00003FDD 53617475726461790A- <2> 	db "Saturday",10,0
  5443 00003FE6 00                  <2>
  5444                              <1> %ifdef network.included
  5445                              <1> 	%include 'source/programs/dhcp.asm'
  5446                              <1> %endif
  5447                              <1> %ifdef disk.none
  5448                              <1> %else
  5449                              <1> 	%include 'source/programs/dos.asm'
  5450 00003FE7 FF2C646F7300        <2> db 255,44,"dos",0
  5451                              <2> dosrunner:
  5452 00003FED 8925[E06D0300]      <2> 	mov [previousstack], esp
  5453 00003FF3 8B3D[1D2C0000]      <2> 	mov edi, [currentcommandloc]
  5454 00003FF9 81C704000000        <2> 	add edi, 4
  5455 00003FFF BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5456 00004004 E8E4130000          <2> 	call loadfile
  5457 00004009 8B3D[1D2C0000]      <2> 	mov edi, [currentcommandloc]
  5458 0000400F 81C704000000        <2> 	add edi, 4
  5459 00004015 81FA94010000        <2> 	cmp edx, 404
  5460 0000401B 0F845E000000        <2> 	je near .noprogfound
  5461 00004021 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5462 00004026 31C9                <2> 	xor ecx, ecx
  5463                              <2> .findparams:
  5464 00004028 47                  <2> 	inc edi
  5465 00004029 8A07                <2> 	mov al, [edi]
  5466 0000402B 3C20                <2> 	cmp al, " "
  5467 0000402D 75F9                <2> 	jne .findparams
  5468                              <2> .copyparams:
  5469 0000402F 8A07                <2> 	mov al, [edi]
  5470 00004031 8803                <2> 	mov [ebx], al
  5471 00004033 43                  <2> 	inc ebx
  5472 00004034 47                  <2> 	inc edi
  5473 00004035 41                  <2> 	inc ecx
  5474 00004036 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5475 0000403C 7304                <2> 	jae .nomoreparams
  5476 0000403E 3C00                <2> 	cmp al, 0
  5477 00004040 75ED                <2> 	jne .copyparams
  5478                              <2> .nomoreparams:
  5479 00004042 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5480 00004048 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5481 0000404C 8ED8                <2> 	mov ds, ax
  5482 0000404E 8EC0                <2> 	mov es, ax
  5483 00004050 8EE0                <2> 	mov fs, ax
  5484 00004052 8EE8                <2> 	mov gs, ax
  5485 00004054 31C0                <2> 	xor eax, eax
  5486 00004056 31DB                <2> 	xor ebx, ebx
  5487 00004058 31C9                <2> 	xor ecx, ecx
  5488 0000405A 31D2                <2> 	xor edx, edx
  5489 0000405C 31FF                <2> 	xor edi, edi
  5490 0000405E 31F6                <2> 	xor esi, esi
  5491 00004060 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5492 00004067 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5493 0000406B 6689DA              <2> 	mov dx, bx
  5494 0000406E 8EC3                <2> 	mov es, bx
  5495 00004070 8EE3                <2> 	mov fs, bx
  5496 00004072 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5497 00004076 8EEB                <2> 	mov gs, bx
  5498 00004078 8B25[E06D0300]      <2> 	mov esp, [previousstack]
  5499 0000407E C3                  <2> 	ret
  5500                              <2> .noprogfound:
  5501 0000407F BE[FC540000]        <2> 	mov esi, notfound1
  5502 00004084 E832DBFFFF          <2> 	call print
  5503 00004089 8B35[1D2C0000]      <2> 	mov esi, [currentcommandloc]
  5504 0000408F 81C604000000        <2> 	add esi, 4
  5505 00004095 E821DBFFFF          <2> 	call print
  5506 0000409A BE[04550000]        <2> 	mov esi, notfound2
  5507 0000409F E817DBFFFF          <2> 	call print
  5508 000040A4 C3                  <2> 	ret
  5509                              <2> 	
  5510                              <1> %endif
  5511                              <1> %include 'source/programs/dump.asm'
  5512 000040A5 FF2C64756D7000      <2> db 255,44,"dump",0
  5513 000040AC 8B35[1D2C0000]      <2> 	mov esi, [currentcommandloc]
  5514 000040B2 81C605000000        <2> 	add esi, 5
  5515 000040B8 31C9                <2> 	xor ecx, ecx
  5516 000040BA 66B83078            <2> 	mov ax, "0x"
  5517 000040BE 663906              <2> 	cmp [esi], ax
  5518 000040C1 740A                <2> 	je dumphexin
  5519 000040C3 E852EFFFFF          <2> 	call cnvrttxt
  5520 000040C8 E910000000          <2> 	jmp dumphexnow
  5521                              <2> dumphexin:
  5522 000040CD 81C602000000        <2> 	add esi, 2
  5523 000040D3 E8F6EEFFFF          <2> 	call cnvrthextxt
  5524 000040D8 E900000000          <2> 	jmp dumphexnow
  5525                              <2> dumphexnow:
  5526 000040DD 89CF                <2> 	mov edi, ecx
  5527 000040DF 89FE                <2> 	mov esi, edi
  5528 000040E1 81C680030000        <2> 	add esi, 896
  5529                              <2> dumphexloop:
  5530 000040E7 8B0F                <2> 	mov ecx, [edi]
  5531 000040E9 C605[562E0000]05    <2> 	mov byte [firsthexshown],5
  5532 000040F0 E876EDFFFF          <2> 	call showhex
  5533 000040F5 81C704000000        <2> 	add edi, 4
  5534 000040FB 39F7                <2> 	cmp edi, esi
  5535 000040FD 72E8                <2> 	jb dumphexloop
  5536 000040FF E80EE4FFFF          <2> 	call termcopy
  5537 00004104 C3                  <2> 	ret 
  5538                              <1> %include 'source/programs/echo.asm'
  5539                              <2> 
  5540 00004105 FF2C6563686F00      <2> db 255,44,"echo",0
  5541                              <2> 	echoprog:
  5542 0000410C 8B35[1D2C0000]      <2> 		mov esi, [currentcommandloc]
  5543 00004112 81C605000000        <2> 		add esi, 5
  5544 00004118 8A06                <2> 		mov al, [esi]
  5545 0000411A E89CDAFFFF          <2> 		call print
  5546 0000411F BE[35550000]        <2> 		mov esi, line
  5547 00004124 E892DAFFFF          <2> 		call print
  5548 00004129 C3                  <2> 		ret
  5549 0000412A BB[60700300]        <2> 	echovr:	mov ebx, variables
  5550 0000412F BF06000000          <2> 		mov edi, 6
  5551 00004134 E83F000000          <2> 		call nxtvrech
  5552 00004139 E95A000000          <2> 		jmp prntvr2
  5553 0000413E B13D                <2> 	echvar:	mov cl, '='
  5554 00004140 43                  <2> 		inc ebx
  5555 00004141 8A03                <2> 		mov al, [ebx]
  5556 00004143 3C00                <2> 		cmp al, 0
  5557 00004145 7431                <2> 		je nxtvrech
  5558 00004147 3C3D                <2> 		cmp al, '='
  5559 00004149 7422                <2> 		je nxtvrechb1
  5560 0000414B 8B35[1D2C0000]      <2> 		mov esi, [currentcommandloc]
  5561 00004151 01FE                <2> 		add esi, edi
  5562 00004153 E80AEBFFFF          <2> 		call cndtest
  5563 00004158 3C02                <2> 		cmp al, 2
  5564 0000415A 7438                <2> 		je prntvr
  5565 0000415C 3C01                <2> 		cmp al, 1
  5566 0000415E 7434                <2> 		je prntvr
  5567 00004160 8B35[1D2C0000]      <2> 		mov esi, [currentcommandloc]
  5568 00004166 01FE                <2> 		add esi, edi
  5569 00004168 E90B000000          <2> 		jmp nxtvrech
  5570                              <2> 	nxtvrechb1:
  5571 0000416D 81EB02000000        <2> 		sub ebx, 2
  5572 00004173 E9C6FFFFFF          <2> 		jmp echvar
  5573 00004178 8A03                <2> 	nxtvrech: mov al, [ebx]
  5574 0000417A 3C05                <2> 		cmp al, 5
  5575 0000417C 740A                <2> 		je nxtvrec2
  5576 0000417E 43                  <2> 		inc ebx
  5577 0000417F 81FB[60800300]      <2> 		cmp ebx, varend
  5578 00004185 72F1                <2> 		jb nxtvrech
  5579 00004187 C3                  <2> 		ret
  5580 00004188 43                  <2> 	nxtvrec2: inc ebx
  5581 00004189 8A03                <2> 		mov al, [ebx]
  5582 0000418B 3C04                <2> 		cmp al, 4
  5583 0000418D 74AF                <2> 		je echvar
  5584 0000418F E9E4FFFFFF          <2> 		jmp nxtvrech
  5585 00004194 43                  <2> 	prntvr: inc ebx
  5586 00004195 89DE                <2> 		mov esi, ebx
  5587 00004197 C3                  <2> 		ret
  5588 00004198 E81EDAFFFF          <2> 	prntvr2: call print
  5589 0000419D BE[35550000]        <2> 		mov esi, line
  5590 000041A2 E814DAFFFF          <2> 		call print
  5591 000041A7 C3                  <2> 		ret 
  5592                              <1> %include 'source/programs/else.asm'
  5593 000041A8 FF2C656C736500      <2> 	db 255,44,"else",0
  5594 000041AF 31C0                <2> elsecmd:	xor eax, eax
  5595 000041B1 3805[5A700300]      <2> 	cmp [BATCHISON], al
  5596 000041B7 0F8403F6FFFF        <2> 	je near notbatch
  5597 000041BD A0[F16F0300]        <2> 	mov al, [IFON]
  5598 000041C2 BE[F26F0300]        <2> 	mov esi, IFTRUE
  5599 000041C7 01C6                <2> 	add esi, eax
  5600 000041C9 8A06                <2> 	mov al, [esi]
  5601 000041CB 3401                <2> 	xor al, 1
  5602 000041CD 8806                <2> 	mov [esi], al
  5603 000041CF C3                  <2> 	ret 
  5604                              <1> %include 'source/programs/exit.asm'
  5605 000041D0 FF2C6578697400      <2> db 255,44,"exit",0
  5606 000041D7 803D[F06F0300]01    <2> 	cmp byte [ranboot], 1
  5607 000041DE 0F8402E7FFFF        <2> 	je near returnfromexp
  5608 000041E4 E9DCE5FFFF          <2> 	jmp nobootfile
  5609                              <1> %include 'source/programs/fi.asm'
  5610 000041E9 FF2C666900          <2> 	db 255,44,"fi",0
  5611 000041EE 30C0                <2> 	xor al, al
  5612 000041F0 3805[5A700300]      <2> 	cmp [BATCHISON], al
  5613 000041F6 0F84C4F5FFFF        <2> 	je near notbatch
  5614 000041FC B001                <2> fi:	mov al, 1
  5615 000041FE 2805[F16F0300]      <2> 	sub [IFON],al
  5616 00004204 C3                  <2> 	ret 
  5617                              <1> %ifdef gui.included
  5618                              <1> 	%include 'source/programs/gui.asm'
  5619                              <1> %endif
  5620                              <1> %include 'source/programs/help.asm'
  5621 00004205 FF2C68656C7000      <2> db 255,44,"help",0
  5622                              <2> lscmd:	
  5623 0000420C B00D                <2> 		mov al, 13
  5624 0000420E E854E0FFFF          <2> 		call prcharq
  5625 00004213 BE[E6300000]        <2> 		mov esi, progstart
  5626 00004218 BB[80490000]        <2> 		mov ebx, progend
  5627 0000421D BE[E0690300]        <2> dir:	mov esi, fileindex
  5628 00004222 8A06                <2> 	dirnxt:	mov al, [esi]
  5629 00004224 30E4                <2> 		xor ah, ah
  5630 00004226 3CFF                <2> 		cmp al, 255
  5631 00004228 7418                <2> 		je dirfnd
  5632 0000422A 46                  <2> 		inc esi
  5633 0000422B 81FE[E06D0300]      <2> 		cmp esi,  fileindexend
  5634 00004231 7342                <2> 		jae dirdn
  5635 00004233 E9EAFFFFFF          <2> 		jmp dirnxt
  5636                              <2> 	dirfnd3:
  5637 00004238 46                  <2> 		inc esi
  5638 00004239 81FE[E06D0300]      <2> 		cmp esi, fileindexend
  5639 0000423F 76E1                <2> 		jbe dirnxt
  5640 00004241 4E                  <2> 		dec esi
  5641 00004242 46                  <2> 	dirfnd:	inc esi
  5642 00004243 8A06                <2> 		mov al, [esi]
  5643 00004245 30E4                <2> 		xor ah, ah
  5644 00004247 3C2C                <2> 		cmp al, 44
  5645 00004249 740E                <2> 		je dirfnd2
  5646 0000424B 46                  <2> 		inc esi
  5647 0000424C 81FE[E06D0300]      <2> 		cmp esi,  fileindexend
  5648 00004252 7321                <2> 		jae dirdn
  5649 00004254 E9C9FFFFFF          <2> 		jmp dirnxt
  5650 00004259 46                  <2> 	dirfnd2: inc esi
  5651 0000425A E83DD9FFFF          <2> 		call printquiet
  5652 0000425F 56                  <2> 		push esi
  5653 00004260 B009                <2> 		mov al, 9
  5654 00004262 E800E0FFFF          <2> 		call prcharq
  5655 00004267 5E                  <2> 		pop esi
  5656 00004268 81FE[E06D0300]      <2> 		cmp esi,  fileindexend
  5657 0000426E 7305                <2> 		jae dirdn
  5658 00004270 E9ADFFFFFF          <2> 		jmp dirnxt
  5659 00004275 BE[35550000]        <2> 	dirdn:	mov esi, line
  5660 0000427A E83CD9FFFF          <2> 			call print
  5661 0000427F C3                  <2> 			ret
  5662 00004280 00                  <2> currentdir db 0
  5663                              <1> %include 'source/programs/if.asm'
  5664 00004281 FF2C696600          <2> 	db 255,44,"if",0
  5665 00004286 30C0                <2> ifcmd:	xor al, al
  5666 00004288 3805[5A700300]      <2> 	cmp [BATCHISON], al
  5667 0000428E 0F842CF5FFFF        <2> 	je near notbatch
  5668 00004294 8B1D[1D2C0000]      <2> 	mov ebx, [currentcommandloc]
  5669 0000429A 81C303000000        <2> 	add ebx, 3
  5670 000042A0 89DE                <2> 	mov esi, ebx
  5671 000042A2 8A06                <2> chkeqsn: mov al, [esi]
  5672 000042A4 3C00                <2> 	cmp al, 0
  5673 000042A6 0F8414F5FFFF        <2> 	je near notbatch
  5674 000042AC 3C3D                <2> 	cmp al, '='
  5675 000042AE 0F8406000000        <2> 	je near chkeqdn
  5676 000042B4 46                  <2> 	inc esi
  5677 000042B5 E9E8FFFFFF          <2> 	jmp chkeqsn
  5678 000042BA B000                <2> chkeqdn: mov al, 0 
  5679 000042BC 8806                <2> 	mov [esi], al
  5680 000042BE 46                  <2> 	inc esi
  5681 000042BF E85DE9FFFF          <2> 	call tester
  5682 000042C4 3C01                <2> 	cmp al, 1
  5683 000042C6 0F8405000000        <2> 	je near trueif
  5684 000042CC E91C000000          <2> 	jmp falseif
  5685 000042D1 31C0                <2> trueif:	xor eax, eax
  5686 000042D3 A0[F16F0300]        <2> 	mov al, [IFON]
  5687 000042D8 FEC0                <2> 	inc al
  5688 000042DA A2[F16F0300]        <2> 	mov [IFON], al
  5689 000042DF 30E4                <2> 	xor ah, ah
  5690 000042E1 BE[F26F0300]        <2> 	mov esi, IFTRUE
  5691 000042E6 01C6                <2> 	add esi, eax
  5692 000042E8 B401                <2> 	mov ah, 1
  5693 000042EA 8826                <2> 	mov [esi], ah
  5694 000042EC C3                  <2> 	ret 
  5695 000042ED 31C0                <2> falseif: xor eax, eax
  5696 000042EF A0[F16F0300]        <2> 	mov al, [IFON]
  5697 000042F4 FEC0                <2> 	inc al
  5698 000042F6 A2[F16F0300]        <2> 	mov [IFON], al
  5699 000042FB 30E4                <2> 	xor ah, ah
  5700 000042FD BE[F26F0300]        <2> 	mov esi, IFTRUE
  5701 00004302 01C6                <2> 	add esi, eax
  5702 00004304 30E4                <2> 	xor ah, ah
  5703 00004306 8826                <2> 	mov [esi], ah
  5704 00004308 C3                  <2> 	ret 
  5705                              <1> %ifdef network.included
  5706                              <1> 	%include 'source/programs/ipconfig.asm'
  5707                              <1> %endif
  5708                              <1> %include 'source/programs/keycode.asm'
  5709 00004309 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5710 00004312 00                  <2>
  5711                              <2> keycode:
  5712 00004313 66C705[38220000]00- <2> 	mov word [trans], 0
  5713 0000431B 00                  <2>
  5714 0000431C C605[EF540000]00    <2> 	mov byte [threadson], 0
  5715                              <2> %ifdef io.serial
  5716                              <2> .noserial:
  5717                              <2> 	hlt
  5718                              <2> 	mov dx, [serial.address]
  5719                              <2> 	in al, dx
  5720                              <2> 	cmp al, 0
  5721                              <2> 	je .noserial
  5722                              <2> 	mov cl, al
  5723                              <2> 	call showhexsmall
  5724                              <2> 	cmp al, 0x1B
  5725                              <2> 	jne .noserial
  5726                              <2> 	in al, dx
  5727                              <2> 	mov cl, al
  5728                              <2> 	call showhexsmall
  5729                              <2> 	cmp cl, 0x5B
  5730                              <2> 	je .noserial
  5731                              <2> 	ret
  5732                              <2> %else
  5733 00004323 E82A070000          <2> 	call getkey
  5734 00004328 31C0                <2> 	xor eax, eax
  5735 0000432A 31C9                <2> 	xor ecx, ecx
  5736 0000432C 8A0D[304A0000]      <2> 	mov cl, [specialkey]
  5737 00004332 80F900              <2> 	cmp cl, 0
  5738 00004335 0F8405000000        <2> 	je near .nospecialkeycode
  5739 0000433B E817EBFFFF          <2> 	call showhexsmall
  5740                              <2> .nospecialkeycode:
  5741 00004340 668B0D[36220000]    <2> 	mov cx, [lastkey + 2]
  5742 00004347 E80BEBFFFF          <2> 	call showhexsmall
  5743 0000434C 80F901              <2> 	cmp cl, 1
  5744 0000434F 75C2                <2> 	jne keycode
  5745 00004351 C3                  <2> 	ret
  5746                              <2> %endif
  5747                              <1> %ifdef gui.included
  5748                              <1> 	%include 'source/programs/line.asm'
  5749                              <1> %endif
  5750                              <1> %include 'source/programs/logout.asm'
  5751 00004352 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5752 0000435B E926E4FFFF          <2> 	jmp os
  5753                              <1> %include 'source/programs/loop.asm'
  5754 00004360 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5755 00004367 803D[5B700300]00    <2> 	cmp byte [LOOPON], 0
  5756 0000436E 0F8501000000        <2> 	jne near filoop
  5757 00004374 C3                  <2> 	ret
  5758 00004375 8B35[5C700300]      <2> filoop: mov esi, [LOOPPOS]
  5759 0000437B FE0D[F16F0300]      <2> 	dec byte [IFON]
  5760 00004381 C605[5B700300]00    <2> 	mov byte [LOOPON], 0
  5761 00004388 8935[56700300]      <2> 	mov [BATCHPOS], esi
  5762 0000438E 8935[E5360000]      <2> 	mov [batchedi], esi
  5763 00004394 C3                  <2> 	ret 
  5764                              <1> %ifdef disk.none
  5765                              <1> %else
  5766                              <1> 	%include 'source/programs/ls.asm'
  5767 00004395 FF2C6C7300          <2> db 255,44,"ls",0
  5768 0000439A BE[B4570300]        <2> 		mov esi, diskfileindex
  5769                              <2> 	diskindexdir:
  5770 0000439F 803E5F              <2> 		cmp byte [esi], '_'
  5771 000043A2 7440                <2> 		je nextdiskindexdir
  5772 000043A4 E8F3D7FFFF          <2> 		call printquiet
  5773 000043A9 56                  <2> 		push esi
  5774 000043AA BE[04440000]        <2> 		mov esi, disktab
  5775 000043AF E8E8D7FFFF          <2> 		call printquiet
  5776 000043B4 5E                  <2> 		pop esi
  5777 000043B5 8B4E05              <2> 		mov ecx, [esi + 5]
  5778 000043B8 C605[562E0000]05    <2> 		mov byte [firsthexshown], 5
  5779 000043BF E871EBFFFF          <2> 		call showdec
  5780 000043C4 56                  <2> 		push esi
  5781 000043C5 BE[35550000]        <2> 		mov esi, line
  5782 000043CA E8CDD7FFFF          <2> 		call printquiet
  5783 000043CF 5E                  <2> 		pop esi
  5784 000043D0 81C609000000        <2> 		add esi, 9
  5785 000043D6 81FE[DA590300]      <2> 		cmp esi, enddiskfileindex
  5786 000043DC 72C1                <2> 		jb diskindexdir
  5787 000043DE E82FE1FFFF          <2> 		call termcopy
  5788 000043E3 C3                  <2> 		ret
  5789                              <2> 	nextdiskindexdir:
  5790 000043E4 46                  <2> 		inc esi
  5791 000043E5 803E00              <2> 		cmp byte [esi], 0
  5792 000043E8 75FA                <2> 		jne nextdiskindexdir
  5793 000043EA 81C609000000        <2> 		add esi, 9
  5794 000043F0 81FE[DA590300]      <2> 		cmp esi, enddiskfileindex
  5795 000043F6 72A7                <2> 		jb diskindexdir
  5796 000043F8 E815E1FFFF          <2> 		call termcopy
  5797 000043FD C3                  <2> 		ret
  5798                              <2> 		
  5799 000043FE 4469736B2000        <2> 		diskmsg db "Disk ",0
  5800 00004404 0D09090900          <2> 		disktab db 13,9,9,9,0
  5801                              <1> %endif
  5802                              <1> %include 'source/programs/memory.asm'
  5803 00004409 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  5804 00004412 BE[70550000]        <2> 	mov esi, memlistbuf
  5805 00004417 31FF                <2> 	xor edi, edi
  5806 00004419 668B3D[B0570000]    <2> 	mov di, [memlistend]
  5807 00004420 01F7                <2> 	add edi, esi
  5808                              <2> printmemmap:
  5809 00004422 8B0E                <2> 	mov ecx, [esi]
  5810 00004424 E842EAFFFF          <2> 	call showhex
  5811 00004429 81C608000000        <2> 	add esi, 8
  5812 0000442F 8B0E                <2> 	mov ecx, [esi]
  5813 00004431 E835EAFFFF          <2> 	call showhex
  5814 00004436 81C608000000        <2> 	add esi, 8
  5815 0000443C 8B0E                <2> 	mov ecx, [esi]
  5816 0000443E E828EAFFFF          <2> 	call showhex
  5817 00004443 81C608000000        <2> 	add esi, 8
  5818 00004449 57                  <2> 	push edi
  5819 0000444A 56                  <2> 	push esi
  5820 0000444B BE[35550000]        <2> 	mov esi, line
  5821 00004450 E866D7FFFF          <2> 	call print
  5822 00004455 5E                  <2> 	pop esi
  5823 00004456 5F                  <2> 	pop edi
  5824 00004457 39FE                <2> 	cmp esi, edi
  5825 00004459 72C7                <2> 	jb printmemmap
  5826 0000445B C3                  <2> 	ret
  5827                              <2> 	
  5828                              <1> %include 'source/programs/pci.asm'
  5829 0000445C FF2C70636900        <2> db 255,44,"pci",0
  5830 00004462 E8510C0000          <2> 	call pcidump
  5831 00004467 C3                  <2> 	ret 
  5832                              <1> %ifdef network.included
  5833                              <1> 	%include 'source/programs/ping.asm'
  5834                              <1> %endif
  5835                              <1> %ifdef disk.none
  5836                              <1> %else
  5837                              <1> 	%include 'source/programs/play.asm'
  5838 00004468 FF2C706C61796100    <2> db 255,44,"playa",0
  5839 00004470 8B3D[1D2C0000]      <2> 	mov edi, [currentcommandloc]
  5840 00004476 81C706000000        <2> 	add edi, 6
  5841 0000447C E828000000          <2> 	call playasync
  5842 00004481 C3                  <2> 	ret
  5843 00004482 FF2C706C617900      <2> db 255,44,"play",0
  5844                              <2> play:
  5845 00004489 8B3D[1D2C0000]      <2> 	mov edi, [currentcommandloc]
  5846 0000448F 81C705000000        <2> 	add edi, 5
  5847 00004495 E80F000000          <2> 	call playasync
  5848                              <2> .waitforsound:
  5849 0000449A F4                  <2> 	hlt
  5850                              <2> %ifdef sound.included
  5851                              <2> 	mov eax, [Length0]
  5852                              <2> 	or ax, [Length1]
  5853                              <2> %endif
  5854 0000449B 0A05[4B020000]      <2> 	or al, [soundon]
  5855 000044A1 3D00000000          <2> 	cmp eax, 0
  5856 000044A6 75F2                <2> 	jne .waitforsound
  5857 000044A8 C3                  <2> 	ret
  5858                              <2> playasync:
  5859 000044A9 BE0000C000          <2> 	mov esi, 0xC00000
  5860 000044AE E83A0F0000          <2> 	call loadfile
  5861 000044B3 81FA94010000        <2> 	cmp edx, 404
  5862 000044B9 743F                <2> 	je nosoundfound
  5863 000044BB BB0000C000          <2> 	mov ebx, 0xC00000
  5864 000044C0 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  5865 000044C7 0F845A000000        <2> 	je near wave_player
  5866 000044CD 66813B534E          <2> 	cmp word [ebx], "SN"
  5867 000044D2 7526                <2> 	jne nosoundfound
  5868 000044D4 81C306000000        <2> 	add ebx, 6
  5869 000044DA 891D[4E020000]      <2> 	mov [soundpos], ebx
  5870 000044E0 035BFC              <2> 	add ebx, [ebx - 4]
  5871 000044E3 891D[52020000]      <2> 	mov [soundendpos], ebx
  5872 000044E9 66C705[4C020000]00- <2> 	mov word [soundrepititions], 0
  5873 000044F1 00                  <2>
  5874 000044F2 C605[4B020000]01    <2> 	mov byte [soundon], 1
  5875 000044F9 C3                  <2> 	ret
  5876                              <2> nosoundfound:
  5877 000044FA BE[20450000]        <2> 	mov esi, notfoundsound
  5878 000044FF E8B7D6FFFF          <2> 	call print
  5879 00004504 8B35[1D2C0000]      <2> 	mov esi, [currentcommandloc]
  5880 0000450A 81C605000000        <2> 	add esi, 5
  5881 00004510 E8A6D6FFFF          <2> 	call print
  5882 00004515 BE[04550000]        <2> 	mov esi, notfound2
  5883 0000451A E89CD6FFFF          <2> 	call print
  5884 0000451F C3                  <2> 	ret
  5885 00004520 706C61793A2000      <2> notfoundsound db "play: ",0
  5886                              <2> 
  5887                              <2> %ifdef sound.included
  5888                              <2> sbplay:
  5889                              <2> 		mov esi, 0xC00000
  5890                              <2> 		mov ebx, esi
  5891                              <2> 		add esi, WAVSTART
  5892                              <2> 		sub edi, esi
  5893                              <2> 		mov [Length1], di
  5894                              <2> 		shr edi, 15
  5895                              <2> 		mov [Length0], edi
  5896                              <2> 		mov ecx, [ebx + 24]
  5897                              <2> 		mov [Freq], ecx
  5898                              <2> 		xor eax, eax
  5899                              <2> 		mov	edx, 0xC00000 ;physical location of sound
  5900                              <2> 		add edx, WAVSTART
  5901                              <2> 		add	eax, edx
  5902                              <2> 		mov esi, eax
  5903                              <2> 		xor ecx, ecx
  5904                              <2> 		xor ebx, ebx
  5905                              <2> 		mov [SegLoc], bx
  5906                              <2> 		add ebx, 0x80000
  5907                              <2> 		mov cx, 0xFFFF
  5908                              <2> 		cmp di, 0
  5909                              <2> 		jne .autoinit
  5910                              <2> 		mov cx, [Length1]
  5911                              <2> 		mov byte [OddLength], 1
  5912                              <2> 		cmp cx, 32768
  5913                              <2> 		jae .autoinit
  5914                              <2> 		mov byte [OddLength], 0
  5915                              <2> 		shl cx, 1
  5916                              <2> 		inc edi
  5917                              <2> .autoinit:
  5918                              <2> 		dec edi
  5919                              <2> 		mov [Length0], edi
  5920                              <2> 		mov [Length1], cx
  5921                              <2> 		shr cx, 1
  5922                              <2> 		inc cx
  5923                              <2> 		add eax, ecx
  5924                              <2> 		mov [NextMemLoc], eax
  5925                              <2> 		mov	[MemLoc], esi
  5926                              <2> 		call DMACopy
  5927                              <2> 		xor ebx, ebx
  5928                              <2> 		mov bx, [SegLoc]
  5929                              <2> 		xor ecx, ecx
  5930                              <2> 		mov cx, [Length1]
  5931                              <2> 		shr cx, 1
  5932                              <2> 		inc cx
  5933                              <2> 		add ebx, ecx
  5934                              <2> 		mov [SegLoc], bx
  5935                              <2> 		add ebx, 0x80000
  5936                              <2> 		mov esi, [NextMemLoc]
  5937                              <2> 		mov eax, esi
  5938                              <2> 		add eax, ecx
  5939                              <2> 		mov [NextMemLoc], eax
  5940                              <2> 		mov	[MemLoc], esi
  5941                              <2> 		call DMACopy
  5942                              <2> 		call DMAPlay
  5943                              <2> 		call PlayDSP
  5944                              <2> 		ret
  5945                              <2> WAVSTART equ 44
  5946                              <2> wave_player:
  5947                              <2> 	cmp byte [SoundBlaster], 1
  5948                              <2> 	je near sbplay
  5949                              <2> 	mov esi, nosoundblaster
  5950                              <2> 	call print
  5951                              <2> 	ret
  5952                              <2> %else
  5953                              <2> 	wave_player:
  5954 00004527 BE[32450000]        <2> 		mov esi, nosoundblaster
  5955 0000452C E88AD6FFFF          <2> 		call print
  5956 00004531 C3                  <2> 		ret
  5957                              <2> %endif
  5958 00004532 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  5959 0000453B 426C61737465722064- <2>
  5960 00004544 657465637465642E0A- <2>
  5961 0000454D 00                  <2>
  5962                              <1> %endif
  5963                              <1> %include 'source/programs/pwd.asm'
  5964 0000454E FF2C70776400        <2> db 255,44,"pwd",0
  5965 00004554 BE[EC6D0300]        <2> 	mov esi, currentfolder
  5966 00004559 E83ED6FFFF          <2> 	call printquiet
  5967 0000455E BE[35550000]        <2> 	mov esi, line
  5968 00004563 E853D6FFFF          <2> 	call print
  5969 00004568 C3                  <2> 	ret
  5970                              <2> 	
  5971                              <1> %include 'source/programs/reboot.asm'
  5972 00004569 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  5973 00004572 0F011D[7C450000]    <2> 		lidt [idtreboot]
  5974 00004579 CD00                <2> 		int 0
  5975 0000457B F4                  <2> 		hlt
  5976                              <2> 	
  5977 0000457C 0000                <2> 	idtreboot dw 0
  5978 0000457E 00000000            <2> 			  dd 0
  5979                              <2> 
  5980                              <2> 	coldboot:
  5981 00004582 66B84000            <2> 		MOV AX, 0040h
  5982 00004586 8EC0                <2> 		MOV ES, AX
  5983 00004588 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  5984 00004591 00                  <2>
  5985 00004592 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5986 00004599 CF                  <2> 		IRET
  5987                              <2> 
  5988                              <2> 	warmboot:
  5989 0000459A 66B84000            <2> 		MOV AX, 0040h
  5990 0000459E 8EC0                <2> 		MOV ES, AX
  5991 000045A0 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  5992 000045A9 12                  <2>
  5993 000045AA EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5994 000045B1 CF                  <2> 		IRET
  5995                              <2> 		
  5996                              <1> %include 'source/programs/reg.asm'
  5997 000045B2 FF2C72656700        <2> db 255,44,"reg",0
  5998 000045B8 CD03                <2> 	int 3
  5999 000045BA C3                  <2> 	ret 
  6000                              <1> %ifdef disk.none
  6001                              <1> %else
  6002                              <1> 	%include 'source/programs/show.asm'
  6003 000045BB FF2C73686F7700      <2> db 255,44,"show",0
  6004                              <2> showprog:
  6005 000045C2 8B3D[1D2C0000]      <2> 		mov edi, [currentcommandloc]
  6006 000045C8 81C705000000        <2> 		add edi, 5
  6007 000045CE BE00004000          <2> 		mov esi, 0x400000
  6008 000045D3 803F26              <2> 		cmp byte [edi], '&'
  6009 000045D6 741B                <2> 		je .nullfile
  6010 000045D8 BE00008000          <2> 		mov esi, 0x800000
  6011 000045DD E80B0E0000          <2> 		call loadfile
  6012 000045E2 81FA94010000        <2> 		cmp edx, 404
  6013 000045E8 0F8415000000        <2> 		je near filenotfound
  6014 000045EE BE00008000          <2> 		mov esi, 0x800000
  6015                              <2> .nullfile:
  6016                              <2> %ifdef gui.included
  6017                              <2> 		cmp word [esi], "BM"
  6018                              <2> 		je bmpfound
  6019                              <2> %endif
  6020 000045F3 E8C3D5FFFF          <2> 		call print
  6021 000045F8 BE[35550000]        <2> 		mov esi, line
  6022 000045FD E8B9D5FFFF          <2> 		call print
  6023 00004602 C3                  <2> 		ret
  6024                              <2> %ifdef gui.included
  6025                              <2> bmpfound:
  6026                              <2> 		cmp byte [guion], 0
  6027                              <2> 		je near noguibmp
  6028                              <2> 		mov esi, 0x800000
  6029                              <2> 		xor ecx, ecx
  6030                              <2> 		xor edx, edx
  6031                              <2> 		xor eax, eax
  6032                              <2> 		xor ebx, ebx
  6033                              <2> 		call showbmp
  6034                              <2> 		xor al, al
  6035                              <2> 		mov ah, 5
  6036                              <2> 		int 30h
  6037                              <2> 		call guiclear
  6038                              <2> 		call clearmousecursor
  6039                              <2> 		call reloadallgraphics
  6040                              <2> 		ret
  6041                              <2> noguibmp:
  6042                              <2> 		mov esi, warnguimsg
  6043                              <2> 		call print
  6044                              <2> 		ret
  6045                              <2> warnguimsg db "This can not be done without the GUI.",10,0
  6046                              <2> %endif
  6047                              <2> 
  6048                              <2> filenotfound:
  6049 00004603 BE[36460000]        <2> 		mov esi, filenf
  6050 00004608 E8AED5FFFF          <2> 		call print
  6051 0000460D 8B35[1D2C0000]      <2> 		mov esi, [currentcommandloc]
  6052                              <2> findfilenotfoundzero:
  6053 00004613 8A06                <2> 		mov al, [esi]
  6054 00004615 46                  <2> 		inc esi
  6055 00004616 3C00                <2> 		cmp al, 0
  6056 00004618 7411                <2> 		je nofilenamenotfound
  6057 0000461A 81FE[60880300]      <2> 		cmp esi, buftxtend
  6058 00004620 7309                <2> 		jae nofilenamenotfound
  6059 00004622 3C20                <2> 		cmp al, " "
  6060 00004624 75ED                <2> 		jne findfilenotfoundzero
  6061 00004626 E890D5FFFF          <2> 		call print
  6062                              <2> nofilenamenotfound:
  6063 0000462B BE[41460000]        <2> 		mov esi, filenf2
  6064 00004630 E886D5FFFF          <2> 		call print
  6065 00004635 C3                  <2> 		ret
  6066 00004636 5468652066696C6520- <2> filenf db "The file ",34,0
  6067 0000463F 2200                <2>
  6068 00004641 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6069 0000464A 6F7420626520666F75- <2>
  6070 00004653 6E642E0A00          <2>
  6071                              <1> %endif
  6072                              <1> %include 'source/programs/shush.asm'
  6073 00004658 FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6074                              <2> shushprog:
  6075                              <2> %ifdef gui.included
  6076                              <2> 	cmp byte [guion], 0
  6077                              <2> 	je near .noswitchsize
  6078                              <2> 	mov esi, [currentcommandloc]
  6079                              <2> 	add esi, 6
  6080                              <2> 	push esi
  6081                              <2> 	dec esi
  6082                              <2> .findspace:
  6083                              <2> 	inc esi
  6084                              <2> 	mov al, [esi]
  6085                              <2> 	cmp al, 0
  6086                              <2> 	je near .noswitchsize
  6087                              <2> 	cmp al, "X"
  6088                              <2> 	je .donefind
  6089                              <2> 	cmp al, "x"
  6090                              <2> 	je .donefind
  6091                              <2> 	cmp al, " "
  6092                              <2> 	jne .findspace
  6093                              <2> .donefind:
  6094                              <2> 	xor al, al
  6095                              <2> 	mov [esi], al
  6096                              <2> 	inc esi
  6097                              <2> 	mov edi, esi
  6098                              <2> 	call cnvrttxt
  6099                              <2> 	mov eax, ecx
  6100                              <2> 	pop esi
  6101                              <2> 	push eax
  6102                              <2> 	mov edi, esi
  6103                              <2> 	call cnvrttxt
  6104                              <2> 	mov ebx, ecx
  6105                              <2> 	pop eax	
  6106                              <2> 	cmp bx, 0
  6107                              <2> 	je near .noswitchsize
  6108                              <2> 	cmp ax, 0
  6109                              <2> 	je near .noswitchsize
  6110                              <2> 	shl bx, 3
  6111                              <2> 	shl ax, 4
  6112                              <2> 	cmp bx, [resolutionx]
  6113                              <2> 	jbe .nofixx
  6114                              <2> 	mov bx, [resolutionx]
  6115                              <2> .nofixx:
  6116                              <2> 	add ax, 16
  6117                              <2> 	cmp ax, [resolutiony]
  6118                              <2> 	jbe .nofixy
  6119                              <2> 	mov ax, [resolutiony]
  6120                              <2> .nofixy:
  6121                              <2> 	sub ax, 16
  6122                              <2> 	xor cx, cx
  6123                              <2> 	xor dx, dx
  6124                              <2> 	mov [termwindow], bx
  6125                              <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6126                              <2> 	mov esi, termwindow
  6127                              <2> 	xor ebx, ebx
  6128                              <2> 	xor ax, ax
  6129                              <2> 	call showwindow
  6130                              <2> 	call guiclear
  6131                              <2> 	call clear
  6132                              <2> 	call reloadallgraphics
  6133                              <2> 	call switchmousepos2
  6134                              <2> .noswitchsize:
  6135                              <2> %endif
  6136 00004660 BE[6B460000]        <2> 	mov esi, shushmsg
  6137 00004665 E851D5FFFF          <2> 	call print
  6138 0000466A C3                  <2> 	ret
  6139 0000466B 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6140 00004674 6F2074686520536F6C- <2>
  6141 0000467D 6C65724F5320486172- <2>
  6142 00004686 646C7920556E69782D- <2>
  6143 0000468F 436F6D70617469626C- <2>
  6144 00004698 65205368656C6C210A- <2>
  6145 000046A1 00                  <2>
  6146                              <1> %include 'source/programs/system.asm'
  6147 000046A2 FF2C73797374656D00  <2> 	db 255,44,"system",0
  6148 000046AB BE[AB470000]        <2> 	mov esi, kernelinfomsg
  6149 000046B0 E8E7D4FFFF          <2> 	call printquiet
  6150 000046B5 B9[B4570300]        <2> 	mov ecx, osend
  6151 000046BA E876E8FFFF          <2> 	call showdec
  6152 000046BF BE[C0470000]        <2> 	mov esi, diskbytemsg
  6153 000046C4 E8D3D4FFFF          <2> 	call printquiet
  6154 000046C9 B9[B4570300]        <2> 	mov ecx, osend
  6155 000046CE 81C1[85E30300]      <2> 	add ecx, commandbufend
  6156 000046D4 81E9[DC590300]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6157 000046DA E856E8FFFF          <2> 	call showdec
  6158 000046DF BE[D7470000]        <2> 	mov esi, membytemsg
  6159 000046E4 E8B3D4FFFF          <2> 	call printquiet
  6160 000046E9 BE[22480000]        <2> 	mov esi, endofmemmsg
  6161 000046EE E8A9D4FFFF          <2> 	call printquiet
  6162 000046F3 B9[85E30300]        <2> 	mov ecx, bssend
  6163 000046F8 E86EE7FFFF          <2> 	call showhex
  6164 000046FD BE[F0470000]        <2> 	mov esi, systeminfomsg
  6165 00004702 E895D4FFFF          <2> 	call printquiet
  6166                              <2> getcpuspeed:
  6167 00004707 B8FE000000          <2> 	mov eax, 0xFE
  6168 0000470C E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6169 0000470E B020                <2> 	mov al, 0x20
  6170 00004710 E620                <2> 	out 0x20, al
  6171 00004712 F4                  <2> 	hlt
  6172 00004713 0F31                <2> 	rdtsc
  6173 00004715 89D6                <2> 	mov esi, edx
  6174 00004717 89C7                <2> 	mov edi, eax
  6175 00004719 31C0                <2> 	xor eax, eax
  6176 0000471B C605[2B020000]01    <2> 	mov byte [testingcpuspeed], 1
  6177                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6178 00004722 40                  <2> 	inc eax
  6179 00004723 E9FAFFFFFF          <2> 	jmp cpuspeedloop
  6180                              <2> cpuspeedloopend:
  6181 00004728 0F31                <2> 	rdtsc
  6182 0000472A 29F8                <2> 	sub eax, edi
  6183 0000472C 29F2                <2> 	sub edx, esi
  6184 0000472E 8915[34020000]      <2> 	mov [cpuclocksperint + 4], edx
  6185 00004734 A3[30020000]        <2> 	mov [cpuclocksperint], eax
  6186 00004739 31C0                <2> 	xor eax, eax
  6187 0000473B E621                <2> 	out 0x21, al
  6188 0000473D B020                <2> 	mov al, 0x20
  6189 0000473F E620                <2> 	out 0x20, al
  6190 00004741 31D2                <2> 	xor edx, edx
  6191 00004743 31C0                <2> 	xor eax, eax
  6192 00004745 A1[2C020000]        <2> 	mov eax, [cpuspeedperint]
  6193 0000474A D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6194                              <2> 				;result by 2
  6195 0000474C 8B1D[3E020000]      <2> 	mov ebx, [timeinterval]
  6196 00004752 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6197 00004755 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6198 00004757 89C1                <2> 	mov ecx, eax
  6199 00004759 E8D7E7FFFF          <2> 	call showdec
  6200 0000475E BE[06480000]        <2> 	mov esi, cpuspeedmsg
  6201 00004763 E834D4FFFF          <2> 	call printquiet
  6202 00004768 31D2                <2> 	xor edx, edx
  6203 0000476A A1[30020000]        <2> 	mov eax, [cpuclocksperint]
  6204 0000476F 8B15[34020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6205 00004775 8B1D[3E020000]      <2> 	mov ebx, [timeinterval]
  6206 0000477B C1EB0A              <2> 	shr ebx, 10
  6207 0000477E F7F3                <2> 	div ebx
  6208 00004780 89C1                <2> 	mov ecx, eax
  6209 00004782 E8AEE7FFFF          <2> 	call showdec
  6210 00004787 BE[0C480000]        <2> 	mov esi, cpuclockmsg
  6211 0000478C E80BD4FFFF          <2> 	call printquiet
  6212 00004791 8B0D[38020000]      <2> 	mov ecx, [memoryspace]
  6213 00004797 C1E914              <2> 	shr ecx, 20
  6214 0000479A 41                  <2> 	inc ecx	;the reading is one MB behind
  6215 0000479B E895E7FFFF          <2> 	call showdec
  6216 000047A0 BE[11480000]        <2> 	mov esi, memoryspacemsg
  6217 000047A5 E811D4FFFF          <2> 	call print
  6218                              <2> %ifdef sound.included
  6219                              <2> 	cmp byte [SoundBlaster], 0
  6220                              <2> 	je .nosb
  6221                              <2> 	mov esi, soundblastermsg
  6222                              <2> 	call print
  6223                              <2> .nosb:
  6224                              <2> %endif
  6225 000047AA C3                  <2> 	ret
  6226                              <2> 
  6227 000047AB 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6228 000047B4 666F726D6174696F6E- <2>
  6229 000047BD 3A0A00              <2>
  6230 000047C0 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6231 000047C9 6B2053706163652055- <2>
  6232 000047D2 7365640A00          <2>
  6233 000047D7 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6234 000047E0 6F7279205370616365- <2>
  6235 000047E9 20557365640A00      <2>
  6236 000047F0 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6237 000047F9 6E666F726D6174696F- <2>
  6238 00004802 6E3A0A00            <2>
  6239                              <2> %ifdef sound.included
  6240                              <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6241                              <2> %endif
  6242 00004806 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6243 0000480C 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6244 00004811 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6245 0000481A 2053706163650A00    <2>
  6246 00004822 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6247 0000482B 6D6F72792053706163- <2>
  6248 00004834 653A20307800        <2>
  6249                              <1> %include 'source/programs/time.asm'
  6250 0000483A FF2C74696D6500      <2> db 255,44,"time",0	
  6251                              <2> timer:
  6252 00004841 8B0D[43020000]      <2> 	mov ecx, [timeseconds]
  6253 00004847 51                  <2> 	push ecx
  6254 00004848 8B0D[47020000]      <2> 	mov ecx, [timenanoseconds]
  6255 0000484E 51                  <2> 	push ecx
  6256 0000484F 8B35[1D2C0000]      <2> 	mov esi, [currentcommandloc]
  6257 00004855 81C605000000        <2> 	add esi, 5
  6258 0000485B 803E00              <2> 	cmp byte [esi], 0
  6259 0000485E 7414                <2> 	je .norun
  6260 00004860 BF[60840300]        <2> 	mov edi, buftxt
  6261                              <2> .cpcmd:
  6262 00004865 8A06                <2> 	mov al, [esi]
  6263 00004867 8807                <2> 	mov [edi], al
  6264 00004869 46                  <2> 	inc esi
  6265 0000486A 47                  <2> 	inc edi
  6266 0000486B 3C00                <2> 	cmp al, 0
  6267 0000486D 75F6                <2> 	jne .cpcmd
  6268 0000486F E8CDE2FFFF          <2> 	call run
  6269                              <2> .norun:
  6270 00004874 5A                  <2> 	pop edx
  6271 00004875 58                  <2> 	pop eax
  6272                              <2> 
  6273 00004876 8B0D[43020000]      <2> 	mov ecx, [timeseconds]
  6274 0000487C 29C1                <2> 	sub ecx, eax
  6275 0000487E 8B1D[47020000]      <2> 	mov ebx, [timenanoseconds]
  6276 00004884 29D3                <2> 	sub ebx, edx
  6277 00004886 7307                <2> 	jae .nosign
  6278 00004888 81C300CA9A3B        <2> 	add ebx, 1000000000
  6279 0000488E 49                  <2> 	dec ecx
  6280                              <2> .nosign:
  6281 0000488F E8A1E6FFFF          <2> 	call showdec
  6282                              <2> 	
  6283 00004894 89D9                <2> 	mov ecx, ebx
  6284 00004896 BE[803B0000]        <2> 	mov esi, timenscache
  6285 0000489B C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6286 000048A2 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6287 000048A9 C6460A30            <2> 	mov byte [esi + 10], "0"
  6288 000048AD BE[8B3B0000]        <2> 	mov esi, timenscacheend
  6289 000048B2 E84CE4FFFF          <2> 	call convert
  6290 000048B7 BE[803B0000]        <2> 	mov esi, timenscache
  6291 000048BC E8FAD2FFFF          <2> 	call print
  6292 000048C1 C605[803B0000]08    <2> 	mov byte [timenscache], 8
  6293 000048C8 C3                  <2> 	ret
  6294                              <2> 	
  6295                              <1> %include 'source/programs/turnoff.asm'
  6296 000048C9 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6297 000048D2 00                  <2>
  6298                              <2> 	turnoff:
  6299 000048D3 66C705[B00C0000]-   <2> 			mov word [realmodeptr], shutdown
  6300 000048DA [E648]              <2>
  6301 000048DC BB[11490000]        <2> 			mov ebx, halt
  6302 000048E1 E8B8C2FFFF          <2> 			call realmode
  6303                              <2> 
  6304                              <2> [BITS 16]
  6305                              <2> 		shutdown:
  6306 000048E6 B453                <2> 			mov ah, 0x53
  6307 000048E8 B004                <2> 			mov al, 4
  6308 000048EA 31DB                <2> 			xor bx, bx
  6309 000048EC CD15                <2> 			int 0x15
  6310                              <2> 			
  6311 000048EE B453                <2> 			mov ah, 0x53
  6312 000048F0 B001                <2> 			mov al, 1
  6313 000048F2 31DB                <2> 			xor bx, bx
  6314 000048F4 CD15                <2> 			int 0x15
  6315                              <2> 			
  6316 000048F6 B453                <2> 			mov ah, 0x53
  6317 000048F8 B008                <2> 			mov al, 8
  6318 000048FA BB0100              <2> 			mov bx, 1
  6319 000048FD B90100              <2> 			mov cx, 1
  6320 00004900 CD15                <2> 			int 0x15
  6321                              <2> 			
  6322 00004902 B453                <2> 			mov ah, 0x53
  6323 00004904 B007                <2> 			mov al, 7
  6324 00004906 BB0100              <2> 			mov bx, 1
  6325 00004909 B90300              <2> 			mov cx, 3
  6326 0000490C CD15                <2> 			int 0x15
  6327 0000490E E9FDFF              <2> 			jmp $
  6328                              <2> 			[BITS 32]
  6329 00004911 E9FBFFFFFF          <2> halt: jmp $
  6330                              <1> %include 'source/programs/wait.asm'
  6331 00004916 FF2C7761697400      <2> db 255,44,"wait",0
  6332                              <2> waitkey:
  6333 0000491D E8B2D8FFFF          <2> 		call getchar
  6334 00004922 C3                  <2> 		ret
  6335                              <1> %include 'source/programs/while.asm'
  6336 00004923 FF2C7768696C6500    <2> db 255,44,"while",0
  6337 0000492B 30C0                <2> whilecmd:  xor al, al
  6338 0000492D 3805[5A700300]      <2> 	cmp [BATCHISON], al
  6339 00004933 0F8487EEFFFF        <2> 	je near notbatch
  6340 00004939 8B35[56700300]      <2> 	mov esi, [BATCHPOS]
  6341 0000493F 81EE02000000        <2> 	sub esi, 2
  6342 00004945 4E                  <2> whilefnd: dec esi
  6343 00004946 8A06                <2> 	mov al, [esi]
  6344 00004948 3C0A                <2> 	cmp al, 10
  6345 0000494A 0F840D000000        <2> 	je near whilefnd2
  6346 00004950 3C00                <2> 	cmp al, 0
  6347 00004952 0F8405000000        <2> 	je near whilefnd2
  6348 00004958 E9E8FFFFFF          <2> 	jmp whilefnd
  6349                              <2> whilefnd2:
  6350 0000495D 46                  <2> 	inc esi
  6351 0000495E 8935[5C700300]      <2> 	mov [LOOPPOS], esi
  6352 00004964 C605[5B700300]01    <2> 	mov BYTE [LOOPON], 1
  6353 0000496B BE[60840300]        <2> 	mov esi, buftxt
  6354 00004970 BB[60840300]        <2> 	mov ebx, buftxt
  6355 00004975 81C306000000        <2> 	add ebx, 6
  6356 0000497B E922F9FFFF          <2> 	jmp chkeqsn
  6357                              <1> progend:		;programs end here	
  6358                              <1> batchprogend:
  6359                                  	%include "source/hardware.asm"
  6360                              <1> %ifdef gui.included
  6361                              <1> 	%include "source/drivers/video/vesa.asm"
  6362                              <1> 	%include "source/drivers/input/mouse.asm"
  6363                              <1> %endif
  6364                              <1> %include "source/drivers/sound/pcspkr.asm"
  6365                              <2> ;PC Speaker Drivers
  6366                              <2> PCSpeakerRAW:
  6367 00004980 60                  <2> 	pusha
  6368                              <2> nosoundrep:
  6369 00004981 8B35[4E020000]      <2> 	mov esi, [soundpos]
  6370 00004987 31C9                <2> 	xor ecx, ecx
  6371 00004989 668B0D[4C020000]    <2> 	mov cx, [soundrepititions]
  6372 00004990 6681F90000          <2> 	cmp cx, 0
  6373 00004995 0F8548000000        <2> 	jne near donesetpitch
  6374 0000499B 668B0E              <2> 	mov cx, [esi]
  6375 0000499E 668B5E02            <2> 	mov bx, [esi + 2]
  6376 000049A2 66890D[4C020000]    <2> 	mov [soundrepititions], cx
  6377 000049A9 81C604000000        <2> 	add esi, 4
  6378 000049AF 8935[4E020000]      <2> 	mov [soundpos], esi
  6379 000049B5 3B35[52020000]      <2> 	cmp esi, [soundendpos]
  6380 000049BB 7735                <2> 	ja stopsound
  6381 000049BD 66813D[4C020000]00- <2> 	cmp word [soundrepititions], 0
  6382 000049C5 00                  <2>
  6383 000049C6 74B9                <2> 	je nosoundrep
  6384 000049C8 6681FB0000          <2> 	cmp bx, 0
  6385 000049CD 740F                <2> 	je nosoundplay
  6386 000049CF E840000000          <2> 	call setpitch
  6387 000049D4 E849000000          <2> 	call startsound
  6388 000049D9 E905000000          <2> 	jmp donesetpitch
  6389                              <2> nosoundplay:
  6390 000049DE E846000000          <2> 	call killsound
  6391                              <2> donesetpitch:
  6392 000049E3 6649                <2> 	dec cx
  6393 000049E5 66890D[4C020000]    <2> 	mov [soundrepititions], cx
  6394 000049EC 61                  <2> 	popa
  6395 000049ED E999B8FFFF          <2> 	jmp timerinterrupt
  6396                              <2> stopsound:
  6397 000049F2 31C0                <2> 	xor eax, eax
  6398 000049F4 66A3[4C020000]      <2> 	mov [soundrepititions], ax
  6399 000049FA A2[4B020000]        <2> 	mov [soundon], al
  6400 000049FF A3[4E020000]        <2> 	mov [soundpos], eax
  6401 00004A04 A3[52020000]        <2> 	mov [soundendpos], eax
  6402 00004A09 E81B000000          <2> 	call killsound
  6403 00004A0E 61                  <2> 	popa
  6404 00004A0F E977B8FFFF          <2> 	jmp timerinterrupt
  6405                              <2> 
  6406                              <2> 
  6407                              <2> setpitch:
  6408 00004A14 B0B6                <2> 	mov al, 0xB6
  6409 00004A16 E643                <2> 	out 0x43, al
  6410 00004A18 6689D8              <2> 	mov ax, bx
  6411 00004A1B E642                <2> 	out 0x42, al
  6412 00004A1D 88E0                <2> 	mov al, ah
  6413 00004A1F E642                <2> 	out 0x42, al
  6414 00004A21 C3                  <2> 	ret
  6415                              <2> startsound:
  6416 00004A22 E461                <2> 	in al, 0x61
  6417 00004A24 0C03                <2> 	or al, 3
  6418 00004A26 E661                <2> 	out 0x61, al
  6419 00004A28 C3                  <2> 	ret
  6420                              <2> killsound:
  6421 00004A29 E461                <2> 	in al, 0x61
  6422 00004A2B 24FC                <2> 	and al, 0xFC
  6423 00004A2D E661                <2> 	out 0x61, al
  6424 00004A2F C3                  <2> 	ret
  6425                              <2> 	
  6426                              <1> %ifdef sound.included
  6427                              <1> 	%include "source/drivers/sound/sblaster.asm"
  6428                              <1> %endif
  6429                              <1> %ifdef io.serial
  6430                              <1> 	%include "source/drivers/input/serial.asm"
  6431                              <1> %else
  6432                              <1> 	%include "source/drivers/input/keyboard.asm"
  6433 00004A30 00                  <2> specialkey db 0
  6434                              <2> ;charregion db 0
  6435                              <2> waitforinput:		;this is basically the idle process
  6436                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  6437                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  6438 00004A31 6631C0              <2> 	xor ax, ax
  6439 00004A34 A0[EF540000]        <2> 	mov al, [threadson]
  6440 00004A39 8825[EF540000]      <2> 	mov [threadson], ah
  6441 00004A3F FB                  <2> 	sti
  6442 00004A40 F4                  <2> 	hlt
  6443 00004A41 A2[EF540000]        <2> 	mov [threadson], al
  6444 00004A46 66813D[38220000]00- <2> 	cmp word [trans], 0
  6445 00004A4E 00                  <2>
  6446 00004A4F 7401                <2> 	je getkey
  6447 00004A51 C3                  <2> 	ret
  6448                              <2> getkey:
  6449 00004A52 31C0                <2> 		xor eax, eax
  6450 00004A54 A2[304A0000]        <2> 		mov [specialkey], al
  6451 00004A59 A3[34220000]        <2> 		mov [lastkey], eax
  6452 00004A5E E464                <2> 		in al, 64h ; Status
  6453                              <2> 	%ifdef gui.included
  6454                              <2> 		test al, 20h ; PS2-Mouse?
  6455                              <2> 		jnz near moused
  6456                              <2> 	%endif
  6457 00004A60 A801                <2> 		test al, 1 
  6458 00004A62 74CD                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  6459                              <2> 	calckey:
  6460 00004A64 E460                <2> 		in al, 60h
  6461 00004A66 30E4                <2> 		xor ah, ah
  6462 00004A68 6689C3              <2> 		mov bx, ax
  6463 00004A6B 66A3[36220000]      <2> 		mov [lastkey + 2], ax
  6464 00004A71 BF[004C0000]        <2> 		mov edi, scancode
  6465                              <2> 	searchscan: 
  6466 00004A76 80FB3A              <2> 		cmp bl, 3Ah
  6467 00004A79 7314                <2> 		jae scanother
  6468 00004A7B C1E004              <2> 		shl eax, 4
  6469 00004A7E 01C7                <2> 		add edi, eax
  6470 00004A80 668B07              <2> 		mov ax, [edi]
  6471 00004A83 663D0000            <2> 		cmp ax, 0
  6472 00004A87 7406                <2> 		je scanother
  6473 00004A89 E9D0000000          <2> 		jmp scanfound
  6474 00004A8E 00                  <2> uppercase db 0
  6475                              <2> scanother:
  6476 00004A8F 6631C0              <2> 		xor ax, ax
  6477 00004A92 66A3[34220000]      <2> 		mov [lastkey], ax
  6478 00004A98 80FBE0              <2> 		cmp bl, 0E0h
  6479 00004A9B 0F8477000000        <2> 		je near getkeyspecial
  6480 00004AA1 803D[304A0000]E0    <2> 		cmp byte [specialkey], 0xE0
  6481 00004AA8 7525                <2> 		jne nospecialkey
  6482 00004AAA 80FB38              <2> 		cmp bl, 38h
  6483 00004AAD 0F849A000000        <2> 		je near alton
  6484 00004AB3 80FBB8              <2> 		cmp bl, 0B8h
  6485 00004AB6 0F8499000000        <2> 		je near altoff
  6486 00004ABC 80FB1D              <2> 		cmp bl, 1Dh
  6487 00004ABF 0F8478000000        <2> 		je near ctron
  6488 00004AC5 80FB9D              <2> 		cmp bl, 9Dh
  6489 00004AC8 0F8477000000        <2> 		je near ctroff
  6490 00004ACE C3                  <2> 		ret
  6491                              <2> nospecialkey:
  6492 00004ACF 80FB2A              <2> 		cmp bl, 2Ah
  6493 00004AD2 0F8455000000        <2> 		je near shifton
  6494 00004AD8 80FB36              <2> 		cmp bl, 36h
  6495 00004ADB 0F844C000000        <2> 		je near shifton
  6496 00004AE1 80FB1C              <2> 		cmp bl, 1Ch
  6497 00004AE4 0F8473000000        <2> 		je near entdown
  6498 00004AEA 80FBAA              <2> 		cmp bl, 0AAh
  6499 00004AED 0F8442000000        <2> 		je near shiftoff
  6500 00004AF3 80FBB6              <2> 		cmp bl, 0B6h
  6501 00004AF6 0F8439000000        <2> 		je near shiftoff
  6502 00004AFC 80FB3A              <2> 		cmp bl, 3Ah
  6503 00004AFF 0F84A7000000        <2> 		je near capslock
  6504 00004B05 80FB45              <2> 		cmp bl, 0x45
  6505 00004B08 0F84AF000000        <2> 		je near numlock
  6506 00004B0E 80FB46              <2> 		cmp bl, 0x46
  6507 00004B11 0F84BE000000        <2> 		je near scrolllock
  6508 00004B17 C3                  <2> 		ret
  6509                              <2> 	getkeyspecial:
  6510 00004B18 C605[304A0000]E0    <2> 		mov byte [specialkey], 0xE0
  6511 00004B1F E940FFFFFF          <2> 		jmp calckey
  6512                              <2> 	shift:
  6513 00004B24 A0[8E4A0000]        <2> 		mov al, [uppercase]
  6514 00004B29 3C01                <2> 		cmp al, 1
  6515 00004B2B 7308                <2> 		jae shiftoff
  6516                              <2> 	shifton:
  6517 00004B2D C605[8E4A0000]01    <2> 		mov byte [uppercase], 1
  6518 00004B34 C3                  <2> 		ret
  6519                              <2> 	shiftoff:
  6520 00004B35 C605[8E4A0000]00    <2> 		mov byte [uppercase], 0
  6521 00004B3C C3                  <2> 		ret
  6522                              <2> 	ctron:
  6523 00004B3D C605[AB4B0000]01    <2> 		mov byte [ctrkey], 1
  6524 00004B44 C3                  <2> 		ret
  6525                              <2> 	ctroff:
  6526 00004B45 C605[AB4B0000]00    <2> 		mov byte [ctrkey], 0
  6527 00004B4C C3                  <2> 		ret
  6528                              <2> 	alton:
  6529 00004B4D C605[AA4B0000]01    <2> 		mov byte [altkey], 1
  6530 00004B54 C3                  <2> 		ret
  6531                              <2> 	altoff:
  6532 00004B55 C605[AA4B0000]00    <2> 		mov byte [altkey], 0
  6533 00004B5C C3                  <2> 		ret
  6534                              <2> 	entdown:
  6535 00004B5D C3                  <2> 		ret
  6536                              <2> scanfound:
  6537 00004B5E 81C708000000        <2> 		add edi, 8
  6538 00004B64 803D[AB4B0000]01    <2> 		cmp byte [ctrkey], 1
  6539 00004B6B 7306                <2> 		jae ctrlin
  6540 00004B6D 81EF08000000        <2> 		sub edi, 8
  6541                              <2> 	ctrlin:
  6542 00004B73 81C704000000        <2> 		add edi, 4
  6543 00004B79 803D[AA4B0000]01    <2> 		cmp byte [altkey], 1
  6544 00004B80 7306                <2> 		jae altin
  6545 00004B82 81EF04000000        <2> 		sub edi, 4
  6546                              <2> 	altin:
  6547 00004B88 81C702000000        <2> 		add edi, 2
  6548 00004B8E 803D[8E4A0000]01    <2> 		cmp byte [uppercase], 1
  6549 00004B95 7306                <2> 		jae uppercaseon
  6550 00004B97 81EF02000000        <2> 		sub edi, 2
  6551                              <2> 	uppercaseon:
  6552 00004B9D 668B07              <2> 		mov ax,[edi]
  6553 00004BA0 66A3[34220000]      <2> 		mov [lastkey], ax
  6554 00004BA6 C3                  <2> 		ret
  6555                              <2> 		
  6556 00004BA7 00                  <2> keyboardstatus db 0
  6557 00004BA8 00                  <2> numlockstatus db 0
  6558 00004BA9 00                  <2> scrolllockstatus db 0
  6559 00004BAA 00                  <2> altkey db 0
  6560 00004BAB 00                  <2> ctrkey db 0
  6561                              <2> 	capslock:
  6562 00004BAC 8035[A74B0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  6563 00004BB3 E835000000          <2> 		call updatekblights
  6564 00004BB8 E967FFFFFF          <2> 		jmp shift
  6565                              <2> 		
  6566                              <2> 	numlock:
  6567 00004BBD 8035[A74B0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  6568 00004BC4 8035[A84B0000]01    <2> 		xor byte [numlockstatus], 1
  6569 00004BCB E81D000000          <2> 		call updatekblights
  6570 00004BD0 E97DFEFFFF          <2> 		jmp getkey
  6571                              <2> 	
  6572                              <2> 	scrolllock:
  6573 00004BD5 8035[A74B0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  6574 00004BDC 8035[A94B0000]01    <2> 		xor byte [scrolllockstatus], 1
  6575 00004BE3 E805000000          <2> 		call updatekblights
  6576 00004BE8 E965FEFFFF          <2> 		jmp getkey
  6577                              <2> 		
  6578                              <2> 	updatekblights:
  6579 00004BED B0ED                <2> 		mov al, 0xED
  6580 00004BEF 66BA6000            <2> 		mov dx, 0x60
  6581 00004BF3 EE                  <2> 		out dx, al
  6582                              <2> 	chkkbdack:
  6583 00004BF4 EC                  <2> 		in al, dx
  6584 00004BF5 3CFA                <2> 		cmp al, 0xFA
  6585 00004BF7 75FB                <2> 		jne chkkbdack
  6586 00004BF9 A0[A74B0000]        <2> 		mov al, [keyboardstatus]
  6587 00004BFE EE                  <2> 		out dx, al
  6588 00004BFF C3                  <2> 		ret
  6589                              <2> 		
  6590                              <2> scancode:
  6591                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  6592 00004C00 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  6593 00004C09 00000000000000      <2>
  6594 00004C10 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  6595 00004C19 00000000000000      <2>
  6596 00004C20 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  6597 00004C29 00000000000000      <2>
  6598 00004C30 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  6599 00004C39 00000000000000      <2>
  6600 00004C40 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  6601 00004C49 00000000000000      <2>
  6602 00004C50 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  6603 00004C59 00000000000000      <2>
  6604 00004C60 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  6605 00004C69 00000000000000      <2>
  6606 00004C70 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  6607 00004C79 00000000000000      <2>
  6608 00004C80 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  6609 00004C89 00000000000000      <2>
  6610 00004C90 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  6611 00004C99 00000000000000      <2>
  6612 00004CA0 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  6613 00004CA9 00000000000000      <2>
  6614 00004CB0 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  6615 00004CB9 00000000000000      <2>
  6616 00004CC0 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  6617 00004CC9 00000000000000      <2>
  6618 00004CD0 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  6619 00004CD9 00000000000000      <2>
  6620 00004CE0 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  6621 00004CE9 00000000000000      <2>
  6622 00004CF0 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  6623 00004CF9 00000000000000      <2>
  6624 00004D00 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  6625 00004D08 003A0039041904      <2>
  6626 00004D10 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  6627 00004D19 03000046042604      <2>
  6628 00004D20 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  6629 00004D29 03950343042304      <2>
  6630 00004D30 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  6631 00004D39 03A1033A041A04      <2>
  6632 00004D40 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  6633 00004D49 03A40335041504      <2>
  6634 00004D50 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  6635 00004D59 03A5033D041D04      <2>
  6636 00004D60 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  6637 00004D69 03980333041304      <2>
  6638 00004D70 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  6639 00004D79 03990348042804      <2>
  6640 00004D80 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  6641 00004D89 039F0349042904      <2>
  6642 00004D90 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  6643 00004D99 03A00337041704      <2>
  6644 00004DA0 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  6645 00004DA9 00000045042504      <2>
  6646 00004DB0 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  6647 00004DB9 0000004A042A04      <2>
  6648 00004DC0 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  6649 00004DC9 00000000000000      <2>
  6650 00004DD0 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  6651 00004DD9 00000000000000      <2>
  6652 00004DE0 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  6653 00004DE9 03910344042404      <2>
  6654 00004DF0 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  6655 00004DF9 03A3034B042B04      <2>
  6656 00004E00 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  6657 00004E09 03940332041204      <2>
  6658 00004E10 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  6659 00004E19 03A60330041004      <2>
  6660 00004E20 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  6661 00004E29 0393033F041F04      <2>
  6662 00004E30 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  6663 00004E39 03970340042004      <2>
  6664 00004E40 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  6665 00004E49 039E033E041E04      <2>
  6666 00004E50 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  6667 00004E59 039A033B041B04      <2>
  6668 00004E60 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  6669 00004E69 039B0334041404      <2>
  6670 00004E70 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  6671 00004E79 00000036041604      <2>
  6672 00004E80 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  6673 00004E89 0000004D042D04      <2>
  6674 00004E90 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  6675 00004E99 00000051040104      <2>
  6676 00004EA0 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  6677 00004EA9 00000000000000      <2>
  6678 00004EB0 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  6679 00004EB9 0000002F005C00      <2>
  6680 00004EC0 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  6681 00004EC9 0396034F042F04      <2>
  6682 00004ED0 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  6683 00004ED9 03A70347042704      <2>
  6684 00004EE0 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  6685 00004EE9 03A80341042104      <2>
  6686 00004EF0 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  6687 00004EF9 03A9033C041C04      <2>
  6688 00004F00 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  6689 00004F09 03920338041804      <2>
  6690 00004F10 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  6691 00004F19 039D0342042204      <2>
  6692 00004F20 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  6693 00004F29 039C034C042C04      <2>
  6694 00004F30 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  6695 00004F39 00000031041104      <2>
  6696 00004F40 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  6697 00004F49 0000004E042E04      <2>
  6698 00004F50 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  6699 00004F59 0000002E002C00      <2>
  6700 00004F60 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  6701 00004F69 00000000000000      <2>
  6702 00004F70 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  6703 00004F79 00000000000000      <2>
  6704 00004F80 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  6705 00004F89 00000000000000      <2>
  6706 00004F90 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  6707 00004F99 00000000000000      <2>
  6708                              <2> noscan:
  6709                              <2> 
  6710                              <1> %endif
  6711                              <1> ;drivers will soon be handled intelligently
  6712                              <1> ;every driver's source will be scanned for a .init function
  6713                              <1> ;that will be called and if it returns 0
  6714                              <1> ;the hardware was found and the driver initialized properly
  6715                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  6716                              <1> 	%ifdef sound.included
  6717                              <1> 		call sblaster.init
  6718                              <1> 	%endif
  6719                              <1> 	%ifdef network.included
  6720                              <1> 		call network.init
  6721                              <1> 	%endif
  6722 00004FA0 C3                  <1> 	ret
  6723                              <1> initialize:
  6724                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  6725 00004FA1 E839000000          <1> 	call .pic
  6726                              <1> %ifdef terminal.vsync
  6727                              <1> 	call .rtc
  6728                              <1> %endif
  6729 00004FA6 E896000000          <1> 	call .pit
  6730 00004FAB E8B8000000          <1> 	call .fpu
  6731 00004FB0 E8C9000000          <1> 	call .sse
  6732 00004FB5 31C0                <1> 	xor eax, eax
  6733 00004FB7 31C9                <1> 	xor ecx, ecx
  6734                              <1> %ifdef io.serial
  6735                              <1> 	call serial.init
  6736                              <1> %endif
  6737 00004FB9 E801000000          <1> 	call .time
  6738 00004FBE C3                  <1> 	ret
  6739                              <1> 	
  6740                              <1> .time:
  6741 00004FBF E882ECFFFF          <1> 	call time
  6742 00004FC4 E82AEEFFFF          <1> 	call timeconvert
  6743 00004FC9 890D[43020000]      <1> 	mov [timeseconds], ecx
  6744 00004FCF 31C9                <1> 	xor ecx, ecx
  6745 00004FD1 890D[47020000]      <1> 	mov [timenanoseconds], ecx
  6746 00004FD7 C605[8E3B0000]01    <1> 	mov byte [istimeset], 1
  6747 00004FDE C3                  <1> 	ret
  6748                              <1> 	
  6749                              <1> .pic:
  6750 00004FDF B011                <1> 	mov al, 0x11
  6751 00004FE1 E620                <1> 	out 0x20, al
  6752 00004FE3 E6A0                <1> 	out 0xA0, al
  6753 00004FE5 B040                <1> 	mov al, 0x40	;interrupt for master
  6754 00004FE7 E621                <1> 	out 0x21, al
  6755 00004FE9 B048                <1> 	mov al, 0x48	;interrupt for slave
  6756 00004FEB E6A1                <1> 	out 0xA1, al
  6757 00004FED B004                <1> 	mov al, 4
  6758 00004FEF E621                <1> 	out 0x21, al
  6759 00004FF1 B002                <1> 	mov al, 2
  6760 00004FF3 E6A1                <1> 	out 0xA1, al
  6761 00004FF5 B001                <1> 	mov al, 0x1
  6762 00004FF7 E621                <1> 	out 0x21, al
  6763 00004FF9 B001                <1> 	mov al, 0x1
  6764 00004FFB E6A1                <1> 	out 0xA1, al
  6765                              <1> 	;masks are set to zero so as not to mask
  6766 00004FFD 30C0                <1> 	xor al, al
  6767 00004FFF E621                <1> 	out 0x21, al
  6768 00005001 30C0                <1> 	xor al, al
  6769 00005003 E6A1                <1> 	out 0xA1, al
  6770 00005005 B020                <1> 	mov al, 0x20
  6771 00005007 E6A0                <1> 	out 0xA0, al
  6772 00005009 E620                <1> 	out 0x20, al
  6773 0000500B C3                  <1> 	ret
  6774                              <1> .rtc:
  6775 0000500C B008                <1> 	mov al, 0x8
  6776 0000500E 88C4                <1> 	mov ah, al
  6777 00005010 66BA7000            <1> 	mov dx, 0x70
  6778 00005014 EE                  <1> 	out dx, al
  6779 00005015 6642                <1> 	inc dx
  6780 00005017 EC                  <1> 	in al, dx
  6781 00005018 86C4                <1> 	xchg al, ah
  6782 0000501A 664A                <1> 	dec dx
  6783 0000501C EE                  <1> 	out dx, al
  6784 0000501D 6642                <1> 	inc dx
  6785 0000501F 86C4                <1> 	xchg al, ah
  6786 00005021 0C40                <1> 	or al, 0x40
  6787 00005023 EE                  <1> 	out dx, al
  6788                              <1> 	
  6789 00005024 B00A                <1> 	mov al, 0xA
  6790 00005026 664A                <1> 	dec dx
  6791 00005028 EE                  <1> 	out dx, al
  6792 00005029 86C4                <1> 	xchg al, ah
  6793 0000502B 6642                <1> 	inc dx
  6794 0000502D EC                  <1> 	in al, dx
  6795 0000502E 24F0                <1> 	and al, 0xF0
  6796 00005030 0A05[FD020000]      <1> 	or al, [rtcrate]
  6797 00005036 86C4                <1> 	xchg al, ah
  6798 00005038 664A                <1> 	dec dx
  6799 0000503A EE                  <1> 	out dx, al
  6800 0000503B 6642                <1> 	inc dx
  6801 0000503D 86C4                <1> 	xchg al, ah
  6802 0000503F EE                  <1> 	out dx, al
  6803 00005040 C3                  <1> 	ret
  6804                              <1> 	
  6805                              <1> .pit:
  6806                              <1> 	;initialize the PIT
  6807 00005041 66A1[3C020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  6808 00005047 E640                <1> 	out 0x40, al
  6809 00005049 66C1C008            <1> 	rol ax, 8
  6810 0000504D E640                <1> 	out 0x40, al
  6811                              <1> 	;enable rtc interrupt
  6812 0000504F B00B                <1> 	mov al, 0xB
  6813 00005051 E670                <1> 	out 0x70, al
  6814 00005053 66C1C008            <1> 	rol ax, 8
  6815 00005057 E471                <1> 	in al, 0x71
  6816 00005059 66C1C008            <1> 	rol ax, 8
  6817 0000505D E670                <1> 	out 0x70, al
  6818 0000505F 66C1C008            <1> 	rol ax, 8
  6819 00005063 0C40                <1> 	or al, 0x40
  6820 00005065 E671                <1> 	out 0x71, al
  6821 00005067 C3                  <1> 	ret
  6822                              <1> .fpu:
  6823                              <1> 	;And now to initialize the fpu
  6824 00005068 0F20E0              <1> 	mov eax, cr4
  6825 0000506B 0D00020000          <1> 	or eax, 0x200
  6826 00005070 0F22E0              <1> 	mov cr4, eax
  6827 00005073 B87F0B0000          <1> 	mov eax, 0xB7F
  6828 00005078 50                  <1> 	push eax
  6829 00005079 D92C24              <1> 	fldcw [esp]
  6830 0000507C 58                  <1> 	pop eax
  6831 0000507D C3                  <1> 	ret
  6832                              <1> 	
  6833                              <1> .sse:
  6834 0000507E 0F20C0              <1> 	mov eax, cr0
  6835 00005081 24FB                <1> 	and al, 11111011b
  6836 00005083 0C02                <1> 	or al, 00000010b
  6837 00005085 0F22C0              <1> 	mov cr0, eax
  6838 00005088 0F20E0              <1> 	mov eax, cr4
  6839 0000508B 660D0006            <1> 	or ax, 0000011000000000b
  6840 0000508F 0F22E0              <1> 	mov cr4, eax
  6841 00005092 C3                  <1> 	ret
  6842                                      %include "source/pci.asm"
  6843 00005093 00                  <1> pcibus		db 0
  6844 00005094 00                  <1> pcidevice	db 0
  6845 00005095 00                  <1> pcifunction	db 0
  6846 00005096 00                  <1> pciregister	db 0
  6847 00005097 00                  <1> pcireqtype	db 0
  6848 00005098 00000000            <1> pcidevid	dd 0
  6849 0000509C FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  6850                              <1> getpcimem:
  6851 000050A0 B002                <1> 	mov al, 2
  6852 000050A2 A2[97500000]        <1> 	mov [pcireqtype], al
  6853 000050A7 E922000000          <1> 	jmp searchpci
  6854                              <1> getpciport:
  6855 000050AC B001                <1> 	mov al, 1
  6856 000050AE A2[97500000]        <1> 	mov [pcireqtype], al
  6857 000050B3 E916000000          <1> 	jmp searchpci
  6858                              <1> pcidump:
  6859 000050B8 31C0                <1> 	xor eax, eax
  6860 000050BA A2[95500000]        <1> 	mov [pcifunction], al
  6861 000050BF A2[93500000]        <1> 	mov [pcibus], al
  6862 000050C4 A2[94500000]        <1> 	mov [pcidevice], al
  6863 000050C9 A2[97500000]        <1> 	mov [pcireqtype], al
  6864                              <1> searchpci:		;;return in ebx, start X in pciX
  6865 000050CE 30C0                <1> 	xor al, al
  6866 000050D0 A2[96500000]        <1> 	mov [pciregister], al
  6867 000050D5 E823020000          <1> 	call getpciaddr
  6868 000050DA BAF80C0000          <1> 	mov edx, 0xCF8
  6869 000050DF EF                  <1> 	out dx, eax	;;request pci config
  6870 000050E0 BAFC0C0000          <1> 	mov edx, 0xCFC
  6871 000050E5 ED                  <1> 	in eax, dx 	;;read in pci config
  6872 000050E6 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  6873 000050EB 0F823D000000        <1> 	jb near checkpcidevice
  6874                              <1> searchpciret:
  6875                              <1> nextpcidevice:
  6876 000050F1 30C0                <1> 	xor al, al
  6877 000050F3 A2[95500000]        <1> 	mov [pcifunction], al
  6878 000050F8 A0[94500000]        <1> 	mov al, [pcidevice]
  6879 000050FD 3C1F                <1> 	cmp al, 11111b
  6880 000050FF 0F8306010000        <1> 	jae near nextpcibus
  6881 00005105 FEC0                <1> 	inc al
  6882 00005107 A2[94500000]        <1> 	mov [pcidevice], al
  6883 0000510C E9BDFFFFFF          <1> 	jmp searchpci
  6884 00005111 A0[95500000]        <1> 	mov al, [pcifunction]
  6885 00005116 3C07                <1> 	cmp al, 111b
  6886 00005118 0F83D3FFFFFF        <1> 	jae near nextpcidevice
  6887 0000511E FEC0                <1> 	inc al
  6888 00005120 A2[95500000]        <1> 	mov [pcifunction], al
  6889 00005125 E9A4FFFFFF          <1> 	jmp searchpci
  6890 0000512A 00000000            <1> pcitype: db 0,0,0,0
  6891                              <1> checkpcidevice:
  6892 0000512E 31C0                <1> 	xor eax, eax
  6893 00005130 3905[98500000]      <1> 	cmp [pcidevid], eax
  6894 00005136 0F8430000000        <1> 	je near .good
  6895 0000513C A2[96500000]        <1> 	mov [pciregister], al	;device id, vendor id
  6896 00005141 E8B7010000          <1> 	call getpciaddr
  6897 00005146 BAF80C0000          <1> 	mov edx, 0xCF8
  6898 0000514B EF                  <1> 	out dx, eax
  6899 0000514C BAFC0C0000          <1> 	mov edx, 0xCFC
  6900 00005151 ED                  <1> 	in eax, dx
  6901 00005152 2305[9C500000]      <1> 	and eax, [pcidevidmask]
  6902 00005158 8B1D[98500000]      <1> 	mov ebx, [pcidevid]
  6903 0000515E 231D[9C500000]      <1> 	and ebx, [pcidevidmask]
  6904 00005164 39D8                <1> 	cmp eax, ebx
  6905 00005166 0F8585FFFFFF        <1> 	jne near searchpciret
  6906                              <1> .good:
  6907 0000516C 30C0                <1> 	xor al, al
  6908 0000516E 3805[97500000]      <1> 	cmp [pcireqtype], al
  6909 00005174 0F842C000000        <1> 	je near dumppcidevice
  6910 0000517A B008                <1> 	mov al, 0x08
  6911 0000517C A2[96500000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  6912 00005181 E877010000          <1> 	call getpciaddr
  6913 00005186 BAF80C0000          <1> 	mov edx, 0xCF8
  6914 0000518B EF                  <1> 	out dx, eax
  6915 0000518C BAFC0C0000          <1> 	mov edx, 0xCFC
  6916 00005191 ED                  <1> 	in eax, dx
  6917 00005192 C1C008              <1> 	rol eax, 8
  6918 00005195 3A05[2A510000]      <1> 	cmp al, [pcitype]
  6919 0000519B 0F84A0000000        <1> 	je near foundpciaddr
  6920 000051A1 E94BFFFFFF          <1> 	jmp searchpciret
  6921                              <1> dumppcidevice:
  6922 000051A6 30C0                <1> 	xor al, al
  6923 000051A8 A2[96500000]        <1> 	mov [pciregister], al
  6924 000051AD E84B010000          <1> 	call getpciaddr
  6925 000051B2 89C1                <1> 	mov ecx, eax
  6926 000051B4 C605[562E0000]05    <1> 	mov byte [firsthexshown], 5
  6927 000051BB E8ABDCFFFF          <1> 	call showhex
  6928                              <1> dumppcidevicelp:
  6929 000051C0 A2[96500000]        <1> 	mov [pciregister], al
  6930 000051C5 E833010000          <1> 	call getpciaddr
  6931 000051CA BAF80C0000          <1> 	mov edx, 0xCF8
  6932 000051CF EF                  <1> 	out dx, eax
  6933 000051D0 BAFC0C0000          <1> 	mov edx, 0xCFC
  6934 000051D5 ED                  <1> 	in eax, dx
  6935 000051D6 89C1                <1> 	mov ecx, eax
  6936 000051D8 A0[96500000]        <1> 	mov al, [pciregister]
  6937 000051DD 0404                <1> 	add al, 4
  6938 000051DF C605[562E0000]05    <1> 	mov byte [firsthexshown], 5
  6939 000051E6 E880DCFFFF          <1> 	call showhex
  6940 000051EB 3C3C                <1> 	cmp al, 0x3C
  6941 000051ED 72D1                <1> 	jb dumppcidevicelp
  6942                              <1> dumppcidn:
  6943                              <1> %ifdef io.serial
  6944                              <1> 	mov esi, line
  6945                              <1> 	call print
  6946                              <1> %else
  6947 000051EF 803D[64240000]00    <1> 	cmp byte [charpos], 0
  6948 000051F6 0F84F5FEFFFF        <1> 	je near searchpciret
  6949 000051FC BE[35550000]        <1> 	mov esi, line
  6950 00005201 E8B5C9FFFF          <1> 	call print
  6951                              <1> %endif
  6952 00005206 E9E6FEFFFF          <1> 	jmp searchpciret
  6953                              <1> nextpcibus:
  6954 0000520B 30C0                <1> 	xor al, al
  6955 0000520D A2[94500000]        <1> 	mov [pcidevice], al
  6956 00005212 A0[93500000]        <1> 	mov al, [pcibus]
  6957 00005217 3C7F                <1> 	cmp al, 1111111b
  6958 00005219 730C                <1> 	jae donesearchpci
  6959 0000521B FEC0                <1> 	inc al
  6960 0000521D A2[93500000]        <1> 	mov [pcibus], al
  6961 00005222 E9A7FEFFFF          <1> 	jmp searchpci
  6962                              <1> donesearchpci:
  6963 00005227 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  6964 0000522C 31D2                <1> 	xor edx, edx
  6965 0000522E 8815[2A510000]      <1> 	mov [pcitype], dl
  6966 00005234 8915[98500000]      <1> 	mov [pcidevid], edx
  6967 0000523A 891D[9C500000]      <1> 	mov [pcidevidmask], ebx
  6968 00005240 C3                  <1> 	ret
  6969                              <1> foundpciaddr:
  6970 00005241 B010                <1> 	mov al, 0x10
  6971 00005243 A2[96500000]        <1> 	mov [pciregister], al
  6972 00005248 803D[97500000]02    <1> 	cmp byte [pcireqtype], 2
  6973 0000524F 7443                <1> 	je findpcimemaddr
  6974                              <1> findpciioaddr:
  6975 00005251 E8A7000000          <1> 	call getpciaddr
  6976 00005256 BAF80C0000          <1> 	mov edx, 0xCF8
  6977 0000525B EF                  <1> 	out dx, eax
  6978 0000525C BAFC0C0000          <1> 	mov edx, 0xCFC
  6979 00005261 ED                  <1> 	in eax, dx
  6980 00005262 89C3                <1> 	mov ebx, eax
  6981 00005264 81E301000000        <1> 	and ebx, 1
  6982 0000526A 81FB00000000        <1> 	cmp ebx, 0
  6983 00005270 0F846E000000        <1> 	je near notpciioaddr
  6984 00005276 2D01000000          <1> 	sub eax, 1
  6985 0000527B 89C2                <1> 	mov edx, eax
  6986 0000527D 31DB                <1> 	xor ebx, ebx
  6987 0000527F 4B                  <1> 	dec ebx
  6988 00005280 891D[9C500000]      <1> 	mov [pcidevidmask], ebx
  6989 00005286 43                  <1> 	inc ebx
  6990 00005287 881D[2A510000]      <1> 	mov [pcitype], bl
  6991 0000528D 891D[98500000]      <1> 	mov [pcidevid], ebx
  6992 00005293 C3                  <1> 	ret
  6993                              <1> findpcimemaddr:
  6994 00005294 E864000000          <1> 	call getpciaddr
  6995 00005299 BAF80C0000          <1> 	mov edx, 0xCF8
  6996 0000529E EF                  <1> 	out dx, eax
  6997 0000529F BAFC0C0000          <1> 	mov edx, 0xCFC
  6998 000052A4 ED                  <1> 	in eax, dx
  6999 000052A5 89C3                <1> 	mov ebx, eax
  7000 000052A7 81E301000000        <1> 	and ebx, 1
  7001 000052AD 81FB01000000        <1> 	cmp ebx, 1
  7002 000052B3 0F842B000000        <1> 	je near notpciioaddr
  7003 000052B9 C1E804              <1> 	shr eax, 4
  7004 000052BC C1E004              <1> 	shl eax, 4	;remove prefetch and type
  7005 000052BF 89C2                <1> 	mov edx, eax
  7006 000052C1 50                  <1> 	push eax
  7007 000052C2 A1[23020000]        <1> 	mov eax, [basecache]
  7008 000052C7 C1E004              <1> 	shl eax, 4
  7009 000052CA 29C2                <1> 	sub edx, eax
  7010 000052CC 58                  <1> 	pop eax
  7011 000052CD 31DB                <1> 	xor ebx, ebx
  7012 000052CF 4B                  <1> 	dec ebx
  7013 000052D0 891D[9C500000]      <1> 	mov [pcidevidmask], ebx
  7014 000052D6 43                  <1> 	inc ebx
  7015 000052D7 881D[2A510000]      <1> 	mov [pcitype], bl
  7016 000052DD 891D[98500000]      <1> 	mov [pcidevid], ebx
  7017 000052E3 C3                  <1> 	ret
  7018                              <1> notpciioaddr:
  7019 000052E4 A0[96500000]        <1> 	mov al, [pciregister]
  7020 000052E9 0404                <1> 	add al, 4
  7021 000052EB 3C28                <1> 	cmp al, 0x28
  7022 000052ED 0F87FEFDFFFF        <1> 	ja near searchpciret
  7023 000052F3 A2[96500000]        <1> 	mov [pciregister], al
  7024 000052F8 E954FFFFFF          <1> 	jmp findpciioaddr
  7025                              <1> getpciaddr:		;;puts it in eax and ebx
  7026 000052FD 31C0                <1> 			xor eax, eax
  7027 000052FF BB00000080          <1> 			mov ebx, 0x80000000
  7028 00005304 A0[93500000]        <1> 			mov al, [pcibus]
  7029 00005309 C1E010              <1> 			shl eax, 16
  7030 0000530C 01C3                <1> 			add ebx, eax
  7031 0000530E 31C0                <1> 			xor eax, eax
  7032 00005310 A0[94500000]        <1> 			mov al, [pcidevice]
  7033 00005315 C1E00B              <1> 			shl eax, 11
  7034 00005318 01C3                <1> 			add ebx, eax
  7035 0000531A 31C0                <1> 			xor eax, eax
  7036 0000531C A0[95500000]        <1> 			mov al, [pcifunction]
  7037 00005321 C1E008              <1> 			shl eax, 8
  7038 00005324 01C3                <1> 			add ebx, eax
  7039 00005326 31C0                <1> 			xor eax, eax
  7040 00005328 A0[96500000]        <1> 			mov al, [pciregister]
  7041 0000532D 01C3                <1> 			add ebx, eax
  7042 0000532F 89D8                <1> 			mov eax, ebx
  7043 00005331 C3                  <1> 			ret
  7044                                      %include "source/disk.asm"
  7045                              <1> %ifdef disk.real
  7046                              <1> 	%include "source/drivers/disk/realmode.asm"
  7047                              <2> diskr:
  7048                              <2> 			;sector count in cl
  7049                              <2> 			;disk number in ch
  7050                              <2> 			;48 bit address with last 32 bits in ebx
  7051                              <2> 			;buffer in esi
  7052                              <2> 			;puts end of buffer in edi and end lba address in edx
  7053 00005332 880D[59530000]      <2> 	mov [sdlength], cl
  7054 00005338 891D[5A530000]      <2> 	mov [sdaddress], ebx
  7055 0000533E 8935[DB540000]      <2> 	mov [oldesireal], esi
  7056 00005344 66BE[5E53]          <2> 	mov si, readdiskreal
  7057 00005348 668935[B00C0000]    <2> 	mov [realmodeptr], si
  7058 0000534F E84AB8FFFF          <2> 	call realmode
  7059 00005354 E941000000          <2> 	jmp backfromrealread
  7060 00005359 00                  <2> sdlength db 0
  7061 0000535A 00000000            <2> sdaddress dd 0
  7062                              <2> 
  7063                              <2> [BITS 16]
  7064                              <2> readdiskreal:
  7065 0000535E C706[8A53]1000      <2> 	mov word [dlen], 0x10
  7066 00005364 C706[8E53]0000      <2> 	mov word [daddress], 0
  7067 0000536A C706[9053]0001      <2> 	mov word [dsegm], 0x100
  7068 00005370 66891E[9253]        <2> 	mov [dlbaad], ebx
  7069 00005375 880E[8C53]          <2> 	mov [dreadlen], cl
  7070                              <2> ReadHardDisk:
  7071 00005379 BE[8A53]            <2> 	mov si, diskaddresspacket
  7072 0000537C 31C0                <2> 	xor ax, ax
  7073 0000537E B442                <2> 	mov ah, 0x42
  7074 00005380 8A16[8953]          <2> 	mov dl, [dnumber]
  7075 00005384 CD13                <2> 	int 0x13
  7076 00005386 72F1                <2> 	jc ReadHardDisk
  7077 00005388 C3                  <2> 	ret
  7078                              <2> 
  7079 00005389 80                  <2> dnumber db 0x80
  7080                              <2> diskaddresspacket:
  7081 0000538A 10                  <2> dlen:	db 0x10 ;size of packet
  7082 0000538B 00                  <2> 		db 0
  7083 0000538C 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  7084 0000538E 0000                <2> daddress:	dw 0	;address 0
  7085 00005390 0001                <2> dsegm:		dw 0x100	;segment
  7086                              <2> 		;start with known value for hd
  7087                              <2> dlbaad:
  7088 00005392 00000000            <2> 	dd 0	;lba address
  7089 00005396 00000000            <2> 	dd 0
  7090                              <2> [BITS 32]
  7091                              <2> backfromrealread:
  7092 0000539A 8B35[DB540000]      <2> 	mov esi, [oldesireal]
  7093 000053A0 8B1D[5A530000]      <2> 	mov ebx, [sdaddress]
  7094 000053A6 31C9                <2> 	xor ecx, ecx
  7095 000053A8 8A0D[59530000]      <2> 	mov cl, [sdlength]
  7096 000053AE 01CB                <2> 	add ebx, ecx
  7097 000053B0 66B80800            <2> 	mov ax, LINEAR_SEL
  7098 000053B4 8EE0                <2> 	mov fs, ax
  7099 000053B6 BF00100000          <2> 	mov edi, 0x1000
  7100 000053BB B200                <2> 	mov dl, 0
  7101 000053BD D0E1                <2> 	shl cl, 1
  7102                              <2> copyfromrmodedisk:
  7103 000053BF 648A07              <2> 	mov al, [fs:edi]
  7104 000053C2 8806                <2> 	mov [esi], al
  7105 000053C4 47                  <2> 	inc edi
  7106 000053C5 46                  <2> 	inc esi
  7107 000053C6 FECA                <2> 	dec dl
  7108 000053C8 80FA00              <2> 	cmp dl, 0
  7109 000053CB 75F2                <2> 	jne copyfromrmodedisk
  7110 000053CD FEC9                <2> 	dec cl
  7111 000053CF B200                <2> 	mov dl, 0
  7112 000053D1 80F900              <2> 	cmp cl, 0
  7113 000053D4 75E9                <2> 	jne copyfromrmodedisk
  7114 000053D6 66B83000            <2> 	mov ax, NEW_DATA_SEL
  7115 000053DA 8EE0                <2> 	mov fs, ax
  7116 000053DC 89F7                <2> 	mov edi, esi
  7117 000053DE 8B35[DB540000]      <2> 	mov esi, [oldesireal]
  7118 000053E4 89DA                <2> 	mov edx, ebx
  7119 000053E6 8B1D[5A530000]      <2> 	mov ebx, [sdaddress]
  7120 000053EC C3                  <2> 	ret
  7121                              <2> 	
  7122                              <1> %else
  7123                              <1> 	%ifdef disk.protected
  7124                              <1> 		%include "source/drivers/disk/pata.asm"
  7125                              <1> 	%endif
  7126                              <1> %endif
  7127                              <1> %ifdef disk.none
  7128                              <1> loadfile:	xor edx, edx
  7129                              <1> 			cmp byte [edi], '&'
  7130                              <1> 			je .ret
  7131                              <1> 			mov edx, 404	;no files are found except &
  7132                              <1> 		.ret:
  7133                              <1> 			ret
  7134                              <1> %else
  7135                              <1> ;This loads files using the methods in the loaded driver
  7136                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  7137                              <1> 			;returns with err code in edx and file end in edi
  7138 000053ED 803F00              <1> 	cmp byte [edi], 0
  7139 000053F0 0F8448000000        <1> 	je near nofileload
  7140 000053F6 89FA                <1> 	mov edx, edi
  7141 000053F8 BB[B4570300]        <1> 	mov ebx, diskfileindex
  7142                              <1> nextnamechar:
  7143 000053FD 8A07                <1> 	mov al, [edi]
  7144 000053FF 3C26                <1> 	cmp al, '&'
  7145 00005401 7440                <1> 	je nullfile
  7146 00005403 8A23                <1> 	mov ah, [ebx]
  7147 00005405 47                  <1> 	inc edi
  7148 00005406 43                  <1> 	inc ebx
  7149 00005407 88C1                <1> 	mov cl, al
  7150 00005409 08E1                <1> 	or cl, ah
  7151 0000540B 80F900              <1> 	cmp cl, 0
  7152 0000540E 746E                <1> 	je equalfilenames
  7153 00005410 80F920              <1> 	cmp cl, ' '
  7154 00005413 7469                <1> 	je equalfilenames
  7155 00005415 3C2A                <1> 	cmp al, '*'
  7156 00005417 742B                <1> 	je asteriskcheck
  7157 00005419 80FC00              <1> 	cmp ah, 0
  7158 0000541C 7410                <1> 	je nextfilename
  7159 0000541E 3C00                <1> 	cmp al, 0
  7160 00005420 7404                <1> 	je getebxzero
  7161 00005422 38E0                <1> 	cmp al, ah
  7162 00005424 74D7                <1> 	je nextnamechar
  7163                              <1> getebxzero:
  7164 00005426 8A23                <1> 	mov ah, [ebx]
  7165 00005428 43                  <1> 	inc ebx
  7166 00005429 80FC00              <1> 	cmp ah, 0
  7167 0000542C 75F8                <1> 	jne getebxzero
  7168                              <1> nextfilename:
  7169 0000542E 81C308000000        <1> 	add ebx, 8		;next descriptor
  7170 00005434 89D7                <1> 	mov edi, edx
  7171 00005436 81FB[DA590300]      <1> 	cmp ebx, enddiskfileindex
  7172 0000543C 72BF                <1> 	jb nextnamechar
  7173                              <1> nofileload:
  7174 0000543E BA94010000          <1> 	mov edx, 404	;indicate not found error
  7175                              <1> nullfile:
  7176 00005443 C3                  <1> 	ret
  7177                              <1> asteriskcheck:
  7178 00005444 4B                  <1> 	dec ebx
  7179 00005445 8A07                <1> 	mov al, [edi]
  7180 00005447 3C2A                <1> 	cmp al, '*'
  7181 00005449 74F9                <1> 	je asteriskcheck ;remove multiple asterisks
  7182 0000544B 3C20                <1> 	cmp al, ' '
  7183 0000544D 7415                <1> 	je equalfilenames2
  7184 0000544F 3C00                <1> 	cmp al, 0
  7185 00005451 7411                <1> 	je equalfilenames2
  7186                              <1> .lp:
  7187 00005453 8A23                <1> 	mov ah, [ebx]
  7188 00005455 80FC00              <1> 	cmp ah, 0
  7189 00005458 74D4                <1> 	je nextfilename
  7190 0000545A 38E0                <1> 	cmp al, ah
  7191 0000545C 749F                <1> 	je nextnamechar
  7192 0000545E 43                  <1> 	inc ebx
  7193 0000545F E9EFFFFFFF          <1> 	jmp .lp
  7194                              <1> equalfilenames2:
  7195 00005464 81EB02000000        <1> 	sub ebx, 2
  7196                              <1> eqfilefind:
  7197 0000546A 43                  <1> 	inc ebx
  7198 0000546B 81FB[DA590300]      <1> 	cmp ebx, enddiskfileindex
  7199 00005471 0F83C7FFFFFF        <1> 	jae near nofileload
  7200 00005477 8A03                <1> 	mov al, [ebx]
  7201 00005479 3C00                <1> 	cmp al, 0
  7202 0000547B 75ED                <1> 	jne eqfilefind
  7203 0000547D 43                  <1> 	inc ebx
  7204                              <1> equalfilenames:
  7205 0000547E 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  7206 00005481 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  7207 00005483 031D[5C550000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  7208 00005489 31C9                <1> 	xor ecx, ecx
  7209 0000548B 88C1                <1> 	mov cl, al			;get excess number of sectors
  7210 0000548D C0E102              <1> 	shl cl, 2
  7211 00005490 C0E902              <1> 	shr cl, 2			;cut off at 64
  7212 00005493 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  7213 00005495 B500                <1> 	mov ch, 0			;drive 0
  7214 00005497 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  7215                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  7216 0000549A A3[DF540000]        <1> 	mov [filetracks], eax
  7217 0000549F 89F7                <1> 	mov edi, esi		;just in case cl is 0
  7218 000054A1 89DA                <1> 	mov edx, ebx
  7219 000054A3 80F900              <1> 	cmp cl, 0
  7220 000054A6 7405                <1> 	je copytracksforfile
  7221 000054A8 E885FEFFFF          <1> 	call diskr	;take care of excess sectors
  7222                              <1> copytracksforfile:
  7223 000054AD A1[DF540000]        <1> 	mov eax, [filetracks]
  7224 000054B2 3D00000000          <1> 	cmp eax, 0
  7225 000054B7 741C                <1> 	je donecopyfile
  7226 000054B9 48                  <1> 	dec eax
  7227 000054BA A3[DF540000]        <1> 	mov [filetracks], eax
  7228 000054BF 89D3                <1> 	mov ebx, edx	;get end lba
  7229 000054C1 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  7230 000054C3 8A2D[5B550000]      <1> 	mov ch, [DriveNumber]
  7231 000054C9 89FE                <1> 	mov esi, edi	;reset buffer
  7232 000054CB E862FEFFFF          <1> 	call diskr
  7233 000054D0 E9D8FFFFFF          <1> 	jmp copytracksforfile
  7234                              <1> donecopyfile:
  7235 000054D5 BA00000000          <1> 	mov edx, 0	;no error
  7236 000054DA C3                  <1> 	ret
  7237                              <1> 
  7238 000054DB 00000000            <1> oldesireal dd 0
  7239 000054DF 00000000            <1> filetracks dd 0
  7240 000054E3 00                  <1> lbad1 db 0
  7241 000054E4 00                  <1> lbad2 db 0
  7242 000054E5 00                  <1> lbad3 db 0
  7243 000054E6 00                  <1> lbad4 db 0
  7244 000054E7 00                  <1> lbad5 db 0
  7245 000054E8 00                  <1> lbad6 db 0
  7246 000054E9 6400                <1> segments dw 100
  7247                              <1> %endif
  7248                                      %include "source/threads.asm"
  7249                              <1> %ifdef threads.included	
  7250                              <1> nwcmdst:
  7251                              <1> 	xor eax, eax
  7252                              <1> 	mov esp, stackend
  7253                              <1> 	mov [threadson], al
  7254                              <1> 	mov [currentthread], eax
  7255                              <1> 	add eax, 4
  7256                              <1> 	mov [lastthread], eax
  7257                              <1> 	sti
  7258                              <1> 	jmp nwcmd
  7259                              <1> 
  7260                              <1> nomorethreadspace:
  7261                              <1> 	mov esi, nmts
  7262                              <1> 	call print
  7263                              <1> 	mov byte [threadson], 0
  7264                              <1> 	jmp nwcmd
  7265                              <1> nmts	db "Thread Overflow",10,0
  7266                              <1> 
  7267                              <1> nomorestackspace:
  7268                              <1> 	mov esi, nmss
  7269                              <1> 	call print
  7270                              <1> 	jmp nwcmdst
  7271                              <1> nmss	db "Stack Overflow",10,0
  7272                              <1> 	
  7273                              <1> threadswitch:
  7274                              <1> 	cli
  7275                              <1> 	pushad
  7276                              <1> 	mov edi, threadlist
  7277                              <1> 	mov eax, [currentthread]
  7278                              <1> 	inc eax
  7279                              <1> 	mov [currentthread], eax
  7280                              <1> 	dec ax
  7281                              <1> 	shl eax, 2
  7282                              <1> 	add edi, eax
  7283                              <1> 	mov [edi], esp
  7284                              <1> 	add edi, 4
  7285                              <1> 	cmp edi, threadlistend
  7286                              <1> 	jae near nookespthread
  7287                              <1> 	mov eax, [edi]
  7288                              <1> 	cmp eax, 0
  7289                              <1> 	jne near okespthread
  7290                              <1> nookespthread:
  7291                              <1> 	mov edi, threadlist
  7292                              <1> 	xor eax, eax
  7293                              <1> 	mov [currentthread], eax
  7294                              <1> 	mov eax, [edi]
  7295                              <1> 	cmp eax, 0
  7296                              <1> 	je near nwcmdst
  7297                              <1> okespthread:
  7298                              <1> 	mov esp, eax
  7299                              <1> 	mov al, 0x20
  7300                              <1> 	out 0x20, al
  7301                              <1> 	popad
  7302                              <1> 	sti
  7303                              <1> 	iret
  7304                              <1> 
  7305                              <1> %endif
  7306 000054EB 04000000            <1> 	lastthread dd 4
  7307 000054EF 00                  <1> 	threadson db 0
  7308 000054F0 00000000            <1> 	currentthread dd 0
  7309                                  %ifdef gui.included
  7310                                      %include "source/gui/gui.asm"
  7311                                  %endif
  7312                                  %ifdef network.included
  7313                                  	%include "source/network.asm"
  7314                                  %endif
  7315                                      %include "source/data.asm"
  7316 000054F4 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
  7317 000054FC 73687573683A2000    <1> 	notfound1 db "shush: ",0
  7318 00005504 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
  7319 0000550D 6E640A00            <1>
  7320 00005511 757365726E616D653A- <1> 	userask db "username:",0
  7321 0000551A 00                  <1>
  7322 0000551B 70617373776F72643A- <1> 	pwdask	db	"password:",0
  7323 00005524 00                  <1>
  7324 00005525 40                  <1> 	computer db "@"
  7325                              <1> %ifdef io.serial
  7326                              <1> 	computername	db	"SollerOS.",io.serial," ",0
  7327                              <1> %else
  7328 00005526 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
  7329 0000552F 00                  <1>
  7330                              <1> %endif
  7331 00005530 5D242000            <1> 	endprompt db "]$ ",0
  7332 00005534 0D                  <1> 	crlf 	db  13
  7333 00005535 0A00                <1> 	line	db	10,0
  7334                              <1> 	userlst:
  7335 00005537 726F6F7400          <1> 			db "root",0
  7336 0000553C 617765736F6D65706F- <1> 			db "awesomepower",0
  7337 00005545 77657200            <1>
  7338 00005549 7573657200          <1> 			db "user",0
  7339 0000554E 70617373776F726400  <1> 			db "password",0
  7340 00005557 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
  7341 00005559 00                  <1> 			db 0
  7342                              <1> 	userlstend:
  7343                              <1> 	
  7344 0000555A 00                  <1> 	guion db 0
  7345 0000555B 00                  <1> 	DriveNumber db 0
  7346 0000555C 00000000            <1> 	lbaad dd 0
  7347 00005560 0000000000000000    <1> 	initialtsc dd 0,0
  7348 00005568 0000000000000000    <1> 	lasttsc dd 0,0
  7349 00005570 00<rept>            <1> 	memlistbuf times 576 db 0
  7350 000057B0 00000000            <1> 	memlistend: dd 0
  7351                              <1> %ifdef io.serial
  7352                              <1> %else
  7353 000057B4 <incbin>            <1> fonts:	incbin "source/fonts/fonts.pak"
  7354                              <1> fontend:
  7355                              <1> %endif
  7356                              <1> osend:	;this is the end of the operating system's space on disk
  7357                                  %ifdef disk.none
  7358                                  	diskfileindex:
  7359                                  	enddiskfileindex:
  7360                                  	align 512, db 0
  7361                                      %include "source/bss.asm"
  7362                                  %else
  7363                                      %include "build/fileindex.asm"
  7364                              <1> diskfileindex:
  7365 000357B4 617267746573742E65- <1> db "argtest.elf",0
  7366 000357BD 6C6600              <1>
  7367 000357C0 AD010000            <1> dd (f0-$$)/512
  7368 000357C4 46000000            <1> dd (f1-f0)/512
  7369 000357C8 6261636B67726F756E- <1> db "background.bmp",0
  7370 000357D1 642E626D7000        <1>
  7371 000357D7 F3010000            <1> dd (f1-$$)/512
  7372 000357DB 01140000            <1> dd (f2-f1)/512
  7373 000357DF 626F6F742E736800    <1> db "boot.sh",0
  7374 000357E7 F4150000            <1> dd (f2-$$)/512
  7375 000357EB 01000000            <1> dd (f3-f2)/512
  7376 000357EF 63686172746573742E- <1> db "chartest.elf",0
  7377 000357F8 656C6600            <1>
  7378 000357FC F5150000            <1> dd (f3-$$)/512
  7379 00035800 4E000000            <1> dd (f4-f3)/512
  7380 00035804 646F73746573742E63- <1> db "dostest.com",0
  7381 0003580D 6F6D00              <1>
  7382 00035810 43160000            <1> dd (f4-$$)/512
  7383 00035814 01000000            <1> dd (f5-f4)/512
  7384 00035818 6578656300          <1> db "exec",0
  7385 0003581D 44160000            <1> dd (f5-$$)/512
  7386 00035821 01000000            <1> dd (f6-f5)/512
  7387 00035825 66696E616C636F756E- <1> db "finalcount.sn",0
  7388 0003582E 742E736E00          <1>
  7389 00035833 45160000            <1> dd (f6-$$)/512
  7390 00035837 01000000            <1> dd (f7-f6)/512
  7391 0003583B 666C6F7070792E7478- <1> db "floppy.txt",0
  7392 00035844 7400                <1>
  7393 00035846 46160000            <1> dd (f7-$$)/512
  7394 0003584A 0A000000            <1> dd (f8-f7)/512
  7395 0003584E 666F726B00          <1> db "fork",0
  7396 00035853 50160000            <1> dd (f8-$$)/512
  7397 00035857 01000000            <1> dd (f9-f8)/512
  7398 0003585B 677261766974792E65- <1> db "gravity.elf",0
  7399 00035864 6C6600              <1>
  7400 00035867 51160000            <1> dd (f9-$$)/512
  7401 0003586B 4F000000            <1> dd (f10-f9)/512
  7402 0003586F 6775697465737400    <1> db "guitest",0
  7403 00035877 A0160000            <1> dd (f10-$$)/512
  7404 0003587B 03000000            <1> dd (f11-f10)/512
  7405 0003587F 68656C6C6F776F726C- <1> db "helloworld.elf",0
  7406 00035888 642E656C6600        <1>
  7407 0003588E A3160000            <1> dd (f11-$$)/512
  7408 00035892 86000000            <1> dd (f12-f11)/512
  7409 00035896 696E7400            <1> db "int",0
  7410 0003589A 29170000            <1> dd (f12-$$)/512
  7411 0003589E 01000000            <1> dd (f13-f12)/512
  7412 000358A2 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
  7413 000358AB 2E736E00            <1>
  7414 000358AF 2A170000            <1> dd (f13-$$)/512
  7415 000358B3 01000000            <1> dd (f14-f13)/512
  7416 000358B7 6D6172696F2E736E00  <1> db "mario.sn",0
  7417 000358C0 2B170000            <1> dd (f14-$$)/512
  7418 000358C4 01000000            <1> dd (f15-f14)/512
  7419 000358C8 6D6F6D656E742E7761- <1> db "moment.wav",0
  7420 000358D1 7600                <1>
  7421 000358D3 2C170000            <1> dd (f15-$$)/512
  7422 000358D7 2C050000            <1> dd (f16-f15)/512
  7423 000358DB 70692E656C6600      <1> db "pi.elf",0
  7424 000358E2 581C0000            <1> dd (f16-$$)/512
  7425 000358E6 4E000000            <1> dd (f17-f16)/512
  7426 000358EA 72617974726163652E- <1> db "raytrace.elf",0
  7427 000358F3 656C6600            <1>
  7428 000358F7 A61C0000            <1> dd (f17-$$)/512
  7429 000358FB 1E000000            <1> dd (f18-f17)/512
  7430 000358FF 736F6C6C65726F732E- <1> db "solleros.bmp",0
  7431 00035908 626D7000            <1>
  7432 0003590C C41C0000            <1> dd (f18-$$)/512
  7433 00035910 B0020000            <1> dd (f19-f18)/512
  7434 00035914 736F6C6C65726F732E- <1> db "solleros.txt",0
  7435 0003591D 74787400            <1>
  7436 00035921 741F0000            <1> dd (f19-$$)/512
  7437 00035925 01000000            <1> dd (f20-f19)/512
  7438 00035929 736F6E676F74696D65- <1> db "songotime.sn",0
  7439 00035932 2E736E00            <1>
  7440 00035936 751F0000            <1> dd (f20-$$)/512
  7441 0003593A 01000000            <1> dd (f21-f20)/512
  7442 0003593E 73736500            <1> db "sse",0
  7443 00035942 761F0000            <1> dd (f21-$$)/512
  7444 00035946 02000000            <1> dd (f22-f21)/512
  7445 0003594A 737464696F74657374- <1> db "stdiotest.elf",0
  7446 00035953 2E656C6600          <1>
  7447 00035958 781F0000            <1> dd (f22-$$)/512
  7448 0003595C 4E000000            <1> dd (f23-f22)/512
  7449 00035960 74656C7900          <1> db "tely",0
  7450 00035965 C61F0000            <1> dd (f23-$$)/512
  7451 00035969 01000000            <1> dd (f24-f23)/512
  7452 0003596D 74696D65746573742E- <1> db "timetest.elf",0
  7453 00035976 656C6600            <1>
  7454 0003597A C71F0000            <1> dd (f24-$$)/512
  7455 0003597E 46000000            <1> dd (f25-f24)/512
  7456 00035982 7475746F7269616C2E- <1> db "tutorial.sh",0
  7457 0003598B 736800              <1>
  7458 0003598E 0D200000            <1> dd (f25-$$)/512
  7459 00035992 03000000            <1> dd (f26-f25)/512
  7460 00035996 756E667300          <1> db "unfs",0
  7461 0003599B 10200000            <1> dd (f26-$$)/512
  7462 0003599F 02000000            <1> dd (f27-f26)/512
  7463 000359A3 7574662D382E747874- <1> db "utf-8.txt",0
  7464 000359AC 00                  <1>
  7465 000359AD 12200000            <1> dd (f27-$$)/512
  7466 000359B1 02000000            <1> dd (f28-f27)/512
  7467 000359B5 766963746F72792E77- <1> db "victory.wav",0
  7468 000359BE 617600              <1>
  7469 000359C1 14200000            <1> dd (f28-$$)/512
  7470 000359C5 16000000            <1> dd (f29-f28)/512
  7471 000359C9 5F696D672E62696E00  <1> db "_img.bin",0
  7472 000359D2 2A200000            <1> dd (f29-$$)/512
  7473 000359D6 D7020000            <1> dd (f30-f29)/512
  7474                              <1> enddiskfileindex:
  7475                              <1> 
  7476                                      %include "source/bss.asm"
  7477 000359DA 90<rept>            <1> align 4, nop
  7478                              <1> bssstart: equ $
  7479                              <1> bsscopy equ $
  7480                              <1> initialstack equ bsscopy
  7481                              <1> stackend equ initialstack + 4000
  7482                              <1> sigtable equ stackend + 96
  7483                              <1> fileindex: equ sigtable + 4
  7484                              <1> fileindexend: equ fileindex + 1024
  7485                              <1> previousstack equ fileindexend
  7486                              <1> lastfolderloc equ previousstack + 4
  7487                              <1> currentfolderloc equ lastfolderloc + 4
  7488                              <1> currentfolder equ currentfolderloc + 4
  7489                              <1> currentfolderend equ currentfolder + 512
  7490                              <1> uid equ currentfolderend
  7491                              <1> ranboot equ uid + 4
  7492                              <1> IFON equ ranboot + 1
  7493                              <1> IFTRUE equ IFON + 1
  7494                              <1> BATCHPOS equ IFTRUE + 100
  7495                              <1> BATCHISON equ BATCHPOS + 4
  7496                              <1> LOOPON equ BATCHISON + 1
  7497                              <1> LOOPPOS	equ LOOPON + 1
  7498                              <1> variables: equ LOOPPOS + 4
  7499                              <1> varend: equ variables + 4096
  7500                              <1> buftxt2: equ varend
  7501                              <1> buftxt: equ buftxt2 + 1024
  7502                              <1> buftxtend: equ buftxt + 1024
  7503                              <1> buf2: equ buftxtend
  7504                              <1> numbuf: equ buf2 + 20
  7505                              <1> %ifdef io.serial
  7506                              <1> 	lastcommandpos equ numbuf + 1
  7507                              <1> %else
  7508                              <1> 	%ifdef gui.included
  7509                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
  7510                              <1> 		graphicstableend equ graphicstable + 200h
  7511                              <1> 		%ifdef gui.background
  7512                              <1> 			backgroundbuffer equ graphicstableend
  7513                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
  7514                              <1> 			mousecolorbuf equ backgroundbufferend
  7515                              <1> 		%else
  7516                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
  7517                              <1> 		%endif
  7518                              <1> 		mcolorend equ mousecolorbuf + 256
  7519                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
  7520                              <1> 		videobufend	equ videobuf + 210*65*4;2
  7521                              <1> 		videobuf2 equ videobufend
  7522                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
  7523                              <1> 	%else
  7524                              <1> 		videobuf equ numbuf + 1
  7525                              <1> 		videobufend equ videobuf + 80*30*4
  7526                              <1> 		videobuf2 equ videobufend
  7527                              <1> 		videobuf2end equ videobuf2 + 80*30*4
  7528                              <1> 	%endif
  7529                              <1> 	lastcommandpos: equ videobuf2end
  7530                              <1> %endif
  7531                              <1> 	commandbufpos: equ lastcommandpos + 4
  7532                              <1> 	commandlistentries: equ commandbufpos + 4
  7533                              <1> 	commandsentered: equ commandlistentries + 4
  7534                              <1> 	commandbuf: equ commandsentered + 4
  7535                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
  7536                              <1> %ifdef network.included
  7537                              <1> 	rbuffstart: equ commandbufend ;for use with networking
  7538                              <1> 	rbuffend equ rbuffstart + 8212
  7539                              <1> %else
  7540                              <1> 	rbuffstart equ commandbufend
  7541                              <1> 	rbuffend equ commandbufend
  7542                              <1> %endif
  7543                              <1> %ifdef threads.included
  7544                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
  7545                              <1> 	threadlistend: equ threadlist + 1024*4
  7546                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
  7547                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
  7548                              <1> 	bssend equ stack1 + 1024*1024
  7549                              <1> %else
  7550                              <1> 	bssend equ rbuffend
  7551                              <1> %endif
  7552                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
  7553                                      %include "build/files.asm"
  7554 000359DC 00<rept>            <1> align 512,db 0
  7555                              <1> f0:
  7556 00035A00 <incbin>            <1> incbin "included/argtest.elf"
  7557 0003E520 00<rept>            <1> align 512,db 0
  7558                              <1> f1:
  7559 0003E600 <incbin>            <1> incbin "included/background.bmp"
  7560 002BE646 00<rept>            <1> align 512,db 0
  7561                              <1> f2:
  7562 002BE800 <incbin>            <1> incbin "included/boot.sh"
  7563 002BE904 00<rept>            <1> align 512,db 0
  7564                              <1> f3:
  7565 002BEA00 <incbin>            <1> incbin "included/chartest.elf"
  7566 002C8520 00<rept>            <1> align 512,db 0
  7567                              <1> f4:
  7568 002C8600 <incbin>            <1> incbin "included/dostest.com"
  7569 002C8731 00<rept>            <1> align 512,db 0
  7570                              <1> f5:
  7571 002C8800 <incbin>            <1> incbin "included/exec"
  7572 002C88E9 00<rept>            <1> align 512,db 0
  7573                              <1> f6:
  7574 002C8A00 <incbin>            <1> incbin "included/finalcount.sn"
  7575 002C8B02 00<rept>            <1> align 512,db 0
  7576                              <1> f7:
  7577 002C8C00 <incbin>            <1> incbin "included/floppy.txt"
  7578 002C9E66 00<rept>            <1> align 512,db 0
  7579                              <1> f8:
  7580 002CA000 <incbin>            <1> incbin "included/fork"
  7581 002CA161 00<rept>            <1> align 512,db 0
  7582                              <1> f9:
  7583 002CA200 <incbin>            <1> incbin "included/gravity.elf"
  7584 002D3F90 00<rept>            <1> align 512,db 0
  7585                              <1> f10:
  7586 002D4000 <incbin>            <1> incbin "included/guitest"
  7587 002D442E 00<rept>            <1> align 512,db 0
  7588                              <1> f11:
  7589 002D4600 <incbin>            <1> incbin "included/helloworld.elf"
  7590 002E51A8 00<rept>            <1> align 512,db 0
  7591                              <1> f12:
  7592 002E5200 <incbin>            <1> incbin "included/int"
  7593 002E53B2 00<rept>            <1> align 512,db 0
  7594                              <1> f13:
  7595 002E5400 <incbin>            <1> incbin "included/lostwoods.sn"
  7596 002E5456 00<rept>            <1> align 512,db 0
  7597                              <1> f14:
  7598 002E5600 <incbin>            <1> incbin "included/mario.sn"
  7599 002E563A 00<rept>            <1> align 512,db 0
  7600                              <1> f15:
  7601 002E5800 <incbin>            <1> incbin "included/moment.wav"
  7602 0038AE2C 00<rept>            <1> align 512,db 0
  7603                              <1> f16:
  7604 0038B000 <incbin>            <1> incbin "included/pi.elf"
  7605 00394B38 00<rept>            <1> align 512,db 0
  7606                              <1> f17:
  7607 00394C00 <incbin>            <1> incbin "included/raytrace.elf"
  7608 00398720 00<rept>            <1> align 512,db 0
  7609                              <1> f18:
  7610 00398800 <incbin>            <1> incbin "included/solleros.bmp"
  7611 003EE7E6 00<rept>            <1> align 512,db 0
  7612                              <1> f19:
  7613 003EE800 <incbin>            <1> incbin "included/solleros.txt"
  7614 003EE974 00<rept>            <1> align 512,db 0
  7615                              <1> f20:
  7616 003EEA00 <incbin>            <1> incbin "included/songotime.sn"
  7617 003EEA4A 00<rept>            <1> align 512,db 0
  7618                              <1> f21:
  7619 003EEC00 <incbin>            <1> incbin "included/sse"
  7620 003EEEA8 00<rept>            <1> align 512,db 0
  7621                              <1> f22:
  7622 003EF000 <incbin>            <1> incbin "included/stdiotest.elf"
  7623 003F8B20 00<rept>            <1> align 512,db 0
  7624                              <1> f23:
  7625 003F8C00 <incbin>            <1> incbin "included/tely"
  7626 003F8DC6 00<rept>            <1> align 512,db 0
  7627                              <1> f24:
  7628 003F8E00 <incbin>            <1> incbin "included/timetest.elf"
  7629 00401920 00<rept>            <1> align 512,db 0
  7630                              <1> f25:
  7631 00401A00 <incbin>            <1> incbin "included/tutorial.sh"
  7632 00401F52 00<rept>            <1> align 512,db 0
  7633                              <1> f26:
  7634 00402000 <incbin>            <1> incbin "included/unfs"
  7635                              <1> align 512,db 0
  7636                              <1> f27:
  7637 00402400 <incbin>            <1> incbin "included/utf-8.txt"
  7638 004027C0 00<rept>            <1> align 512,db 0
  7639                              <1> f28:
  7640 00402800 <incbin>            <1> incbin "included/victory.wav"
  7641 00405348 00<rept>            <1> align 512,db 0
  7642                              <1> f29:
  7643 00405400 <incbin>            <1> incbin "included/_img.bin"
  7644                              <1> align 512,db 0
  7645                              <1> f30:
  7646                                  %endif
