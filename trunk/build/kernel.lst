     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define hardware.automatic
    29                              <1> ;Automatically load the sound and network drivers.
    30                              <1> 
    31                              <1> %define threads.included
    32                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    33                              <1> 
    34                              <1> %define exceptions.included
    35                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    36                              <1> 
    37                              <1> ;%define disk.protected
    38                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    39                              <1> 
    40                              <1> %define disk.real
    41                              <1> ;Use real mode for disk access-this gives greater compatibility
    42                              <1> 
    43                              <1> ;%define sound.included
    44                              <1> ;This includes the sound drivers
    45                              <1> 
    46                              <1> ;%define network.included
    47                              <1> ;This includes the network stack
    48                              <1> 
    49                              <1> ;%define rtl8169.included
    50                              <1> ;This includes the RTL8169 drivers
    51                              <1> 
    52                              <1> ;%define rtl8139.included
    53                              <1> ;This includes the RTL8139 drivers
    54                              <1> 
    55                              <1> ;%define ne2000.included
    56                              <1> ;This includes the ne2000 drivers
    57                              <1> 
    58                              <1> ;%define i8254x.included
    59                              <1> ;This includes the Intel 8254x drivers
    60                              <1> 
    61                              <1> ;%define sector.debug
    62                              <1> ;Dump the contents of the first sector of SollerOS
    63                              <1> 
    64                              <1> ;%define dos.compatible
    65                              <1> ;Make the kernel loadable by dos.
    66                              <1> 
    67                              <1> ;%define system.simple
    68                              <1> ;The smallest possible system, overrides all options
    69                              <1> 
    70                              <1> ;FIX DEPENDANCIES
    71                              <1> %ifdef system.simple
    72                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    73                              <1> 	%define UNDEFALL
    74                              <1> %endif
    75                              <1> %ifdef dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef UNDEFALL
    79                              <1> 	%undef io.serial
    80                              <1> 	%undef disk.real
    81                              <1> 	%undef gui.included
    82                              <1> 	%undef gui.alphablending
    83                              <1> 	%undef gui.background
    84                              <1> 	%undef terminal.vsync
    85                              <1> 	%undef hardware.automatic
    86                              <1> 	%undef threads.included
    87                              <1> 	%undef exceptions.included
    88                              <1> 	%undef disk.protected
    89                              <1> 	%undef sound.included
    90                              <1> 	%undef network.included
    91                              <1> 	%undef rtl8139.included
    92                              <1> 	%undef rtl8169.included
    93                              <1> 	%undef ne2000.included
    94                              <1> 	%undef i8254x.included
    95                              <1> 	%undef sector.debug
    96                              <1> 	%undef UNDEFALL
    97                              <1> %endif
    98                              <1> %ifdef system.simple
    99                              <1> 	%define io.serial "1"
   100                              <1> 	%define disk.real
   101                              <1> %endif
   102                              <1> %ifdef gui.included
   103                              <1> 	%undef io.serial
   104                              <1> %else
   105                              <1> 	%undef gui.alphablending
   106                              <1> 	%undef gui.background
   107                              <1> %endif
   108                              <1> %ifdef network.included
   109                              <1> %else
   110                              <1> 	%undef i8254x.included
   111                              <1> 	%undef ne2000.included
   112                              <1> 	%undef rtl8139.included
   113                              <1> 	%undef rtl8169.included
   114                              <1> %endif
   115                              <1> %ifdef disk.protected
   116                              <1> 	%undef disk.real
   117                              <1> %else
   118                              <1> 	%ifdef disk.real
   119                              <1> 	%else
   120                              <1> 		%define disk.none
   121                              <1> 	%endif
   122                              <1> %endif
   123                                  [ORG 0x100]
   124                                  	%include "source/signature.asm"
   125                              <1> sigjump:
   126 00000000 E90E00              <1> 	jmp signatureend
   127                              <1> signature:
   128 00000003 536F6C6C65724F5320- <1> db "SollerOS ",0 ;Operating system name
   129 0000000C 00                  <1>
   130 0000000D 09010000            <1> dd 265	;version number
   131                              <1> signatureend:
   132                                  [BITS 16]
   133                                      %include "source/boot.asm"
   134                              <1>     ; MENU.ASM
   135                              <1> boot:
   136 00000011 8CC8                <1> 	mov ax, cs
   137 00000013 8ED8                <1> 	mov ds, ax
   138 00000015 8EC0                <1> 	mov es, ax
   139 00000017 8ED0                <1> 	mov ss, ax
   140 00000019 880E[6B82]          <1> 	mov [DriveNumber], cl
   141 0000001D 668916[6C82]        <1> 	mov [lbaad], edx
   142                              <1> %ifdef io.serial
   143                              <1> 	call getmemorysize
   144                              <1> 	mov si, serialmsg
   145                              <1> 	call printrm
   146                              <1> 	jmp pmode
   147                              <1> serialmsg: db 10,13,"SollerOS: Using serial port ",io.serial," for I/O.",0
   148                              <1> %else
   149 00000022 E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   150 00000025 E95700              <1> 	jmp pmode
   151                              <1> %endif
   152                              <1> 	
   153                              <1> vgaset:
   154 00000028 B81200              <1> 	mov ax, 12h
   155 0000002B 31DB                <1> 	xor bx, bx
   156 0000002D CD10                <1> 	int 10h
   157 0000002F C606[6A82]00        <1> 	mov byte [guion], 0
   158 00000034 E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   159 00000037 C3                  <1> 	ret
   160                              <1> 
   161                              <1> getmemorysize:
   162 00000038 BF[7082]            <1> 	mov di, memlistbuf
   163 0000003B 6631DB              <1> 	xor ebx, ebx
   164                              <1> getmemsizeloop:
   165 0000003E 66B820E80000        <1> 	mov eax, 0xE820
   166 00000044 66BA50414D53        <1> 	mov edx, 0x0534D4150
   167 0000004A 66B918000000        <1> 	mov ecx, 24
   168 00000050 CD15                <1> 	int 0x15
   169 00000052 81C71800            <1> 	add di, 24
   170 00000056 81FF[B084]          <1> 	cmp di, memlistend
   171 0000005A 7309                <1> 	jae nomoregetmemsize
   172 0000005C 6681FB00000000      <1> 	cmp ebx, 0
   173 00000063 75D9                <1> 	jne getmemsizeloop
   174                              <1> nomoregetmemsize:
   175 00000065 81EF[7082]          <1> 	sub di, memlistbuf
   176 00000069 893E[B084]          <1> 	mov [memlistend], di
   177 0000006D C3                  <1> 	ret
   178                              <1> 	
   179                              <1> printrm:			; 'si' comes in with string address
   180 0000006E BB0700              <1>     mov bx,07		; write to display
   181 00000071 B40E                <1>     mov ah,0Eh		; screen function
   182 00000073 8A04                <1>    .lp:    mov al,[si]         ; get next character
   183 00000075 3C00                <1>     cmp al,0		; look for terminator 
   184 00000077 7405                <1>     je .done		; zero byte at end of string
   185 00000079 CD10                <1>     int 10h		; write character to screen.    
   186 0000007B 46                  <1> 	inc si	     	; move to next character
   187 0000007C EBF5                <1>     jmp .lp		; loop
   188 0000007E C3                  <1> .done: ret
   189                                      %include "source/pmode.asm"
   190                              <1> [BITS 16]
   191                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   192                              <1> ;	16-bit real mode
   193                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   194                              <1> 
   195                              <1> pmode:
   196 0000007F 6631C0              <1> 	xor eax, eax
   197 00000082 6631DB              <1> 	xor ebx, ebx
   198 00000085 6631C9              <1> 	xor ecx, ecx
   199 00000088 6631D2              <1> 	xor edx, edx
   200 0000008B 6631F6              <1> 	xor esi, esi
   201 0000008E 6631FF              <1> 	xor edi, edi
   202 00000091 BA9200              <1> 	mov dx, 0x92
   203 00000094 EC                  <1> 	in al, dx	;;A20
   204 00000095 0C02                <1> 	or al, 2
   205 00000097 EE                  <1> 	out dx, al
   206 00000098 8CCB                <1> 	mov bx,cs		; EBX=segment
   207 0000009A 66C1E304            <1> 	shl ebx,4		;	<< 4
   208 0000009E 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   209 000000A2 A3[7203]            <1> 	mov [gdt2 + 2],ax
   210 000000A5 A3[7A03]            <1> 	mov [gdt3 + 2],ax
   211 000000A8 66C1E810            <1> 	shr eax,16
   212 000000AC A2[7403]            <1> 	mov [gdt2 + 4],al
   213 000000AF A2[7C03]            <1> 	mov [gdt3 + 4],al
   214 000000B2 8826[7703]          <1> 	mov [gdt2 + 7],ah
   215 000000B6 8826[7F03]          <1> 	mov [gdt3 + 7],ah
   216                              <1> 
   217 000000BA 66B8[DC860300]      <1> 	mov eax, initialstack
   218 000000C0 660306[3902]        <1> 	add eax, [newcodecache]
   219 000000C5 A3[6A03]            <1> 	mov [gdts + 2],ax
   220 000000C8 66C1E810            <1> 	shr eax, 16
   221 000000CC A2[6C03]            <1> 	mov [gdts + 4],al
   222 000000CF 8826[6F03]          <1> 	mov [gdts + 7], ah
   223                              <1> 	
   224 000000D3 66A1[3902]          <1> 	mov eax, [newcodecache]
   225 000000D7 A3[8203]            <1> 	mov [gdt4 + 2],ax
   226 000000DA A3[8A03]            <1> 	mov [gdt5 + 2],ax
   227 000000DD A3[9203]            <1> 	mov [gdtv8086 + 2], ax
   228 000000E0 A3[9A03]            <1> 	mov [gdtv80862 + 2], ax
   229 000000E3 66C1E810            <1> 	shr eax,16
   230 000000E7 A2[8403]            <1> 	mov [gdt4 + 4],al
   231 000000EA A2[8C03]            <1> 	mov [gdt5 + 4],al
   232 000000ED A2[9403]            <1> 	mov [gdtv8086 + 4],al
   233 000000F0 A2[9C03]            <1> 	mov [gdtv80862 + 4],al
   234 000000F3 8826[8703]          <1> 	mov [gdt4 + 7],ah
   235 000000F7 8826[8F03]          <1> 	mov [gdt5 + 7],ah
   236 000000FB 8826[9703]          <1> 	mov [gdtv8086 + 7],ah
   237 000000FF 8826[9F03]          <1> 	mov [gdtv80862 + 7],ah
   238                              <1> 	
   239 00000103 66B800004000        <1> 	mov eax, dosprogloc
   240 00000109 660306[3902]        <1> 	add eax, [newcodecache]
   241 0000010E A3[A203]            <1> 	mov [gdtdos + 2],ax
   242 00000111 A3[AA03]            <1> 	mov [gdtdos2 + 2],ax
   243 00000114 66C1E810            <1> 	shr eax,16
   244 00000118 A2[A403]            <1> 	mov [gdtdos + 4],al
   245 0000011B A2[AC03]            <1> 	mov [gdtdos2 + 4],al
   246 0000011E 8826[A703]          <1> 	mov [gdtdos + 7],ah
   247 00000122 8826[AF03]          <1> 	mov [gdtdos2 + 7],ah
   248                              <1> 	
   249                              <1> ; fix up gdt and idt
   250 00000126 67668D83[58030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   251 0000012E 66A3[4E03]          <1> 	mov [gdtr + 2],eax
   252 00000132 67668D83[B0030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   253 0000013A 66A3[5403]          <1> 	mov [idtr + 2],eax
   254 0000013E FA                  <1> 	cli
   255 0000013F 0F0116[4C03]        <1> 	lgdt [gdtr]
   256 00000144 0F011E[5203]        <1> 	lidt [idtr]
   257 00000149 6631DB              <1> 	xor ebx, ebx
   258 0000014C 8CDB                <1> 	mov bx, ds
   259 0000014E 66891E[3502]        <1> 	mov [basecache], ebx
   260 00000153 0F20C0              <1> 	mov eax,cr0
   261 00000156 0C01                <1> 	or al,1
   262 00000158 0F22C0              <1> 	mov cr0,eax
   263 0000015B EA[6001]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   264                              <1> [BITS 32]
   265                              <1> do_pm:
   266 00000160 31C0                <1> 	xor eax, eax
   267 00000162 66B82000            <1> 	mov ax, SYS_DATA_SEL
   268 00000166 8ED8                <1> 	mov ds, ax
   269 00000168 8EC0                <1> 	mov es, ax
   270 0000016A 8EE0                <1> 	mov fs, ax
   271 0000016C 66B83000            <1> 	mov ax, NEW_DATA_SEL
   272 00000170 8EE8                <1> 	mov gs, ax
   273                              <1> 	
   274                              <1> copykernel:
   275 00000172 648B06              <1> 	mov eax, [fs:esi]
   276 00000175 658906              <1> 	mov [gs:esi], eax
   277 00000178 81C604000000        <1> 	add esi, 4
   278 0000017E 81FE[DC860300]      <1> 	cmp esi, bsscopy
   279 00000184 72EC                <1> 	jb copykernel
   280 00000186 EA[8D010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   281                              <1> 	
   282                              <1> done_copy:
   283 0000018D 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   284 00000191 8ED8                <1> 	mov ds, ax
   285 00000193 8EC0                <1> 	mov es, ax
   286 00000195 8EE0                <1> 	mov fs, ax
   287                              <1> 	;mov ax, STACK_SEL
   288 00000197 8ED0                <1> 	mov ss, ax
   289 00000199 BC[7C960300]        <1> 	mov esp, stackend
   290 0000019E 66B82000            <1> 	mov ax, SYS_DATA_SEL
   291 000001A2 8EE8                <1> 	mov gs, ax
   292                              <1> 	
   293 000001A4 E8F05C0000          <1> 	call initialize	;initialize drivers
   294                              <1> 	
   295 000001A9 A1[39020000]        <1> 	mov eax, [newcodecache]
   296 000001AE C1E804              <1> 	shr eax, 4
   297 000001B1 A3[35020000]        <1> 	mov [basecache], eax
   298                              <1> 	
   299 000001B6 BE[16871500]        <1> 	mov esi, bssend
   300 000001BB 31C0                <1> 	xor eax, eax
   301                              <1> clearkernelbuffers:
   302 000001BD 8906                <1> 	mov [esi], eax
   303 000001BF 81EE04000000        <1> 	sub esi, 4
   304 000001C5 81FE[DC860300]      <1> 	cmp esi, bsscopy
   305 000001CB 77F0                <1> 	ja clearkernelbuffers
   306 000001CD FB                  <1> 	sti
   307                              <1> 
   308                              <1> getmemoryspace:
   309 000001CE BE[70820000]        <1> 	mov esi, memlistbuf
   310 000001D3 31FF                <1> 	xor edi, edi
   311 000001D5 668B3D[B0840000]    <1> 	mov di, [memlistend]
   312 000001DC 01F7                <1> 	add edi, esi
   313 000001DE 31C0                <1> 	xor eax, eax
   314                              <1> memoryspaceaddition:
   315 000001E0 39FE                <1> 	cmp esi, edi
   316 000001E2 7322                <1> 	jae finishedmemspacecalc
   317 000001E4 81C608000000        <1> 	add esi, 8
   318 000001EA 8B0E                <1> 	mov ecx, [esi]
   319 000001EC 81C608000000        <1> 	add esi, 8
   320 000001F2 8B1E                <1> 	mov ebx, [esi]
   321 000001F4 81C608000000        <1> 	add esi, 8
   322 000001FA 81FB01000000        <1> 	cmp ebx, 1
   323 00000200 75DE                <1> 	jne memoryspaceaddition
   324 00000202 01C8                <1> 	add eax, ecx
   325 00000204 EBDA                <1> 	jmp memoryspaceaddition
   326                              <1> finishedmemspacecalc:
   327 00000206 A3[4A020000]        <1> 	mov [memoryspace], eax
   328                              <1> %ifdef gui.included
   329 0000020B 803D[6A820000]00    <1> 	cmp byte [guion], 0
   330 00000212 741C                <1> 	je normalstartup
   331 00000214 8B1D[35020000]      <1> 	mov ebx, [basecache]
   332 0000021A C1E304              <1> 	shl ebx, 4
   333 0000021D 8B3D[8C540000]      <1> 	mov edi, [physbaseptr]
   334 00000223 29DF                <1> 	sub edi, ebx
   335 00000225 893D[8C540000]      <1> 	mov [physbaseptr], edi
   336 0000022B E976620000          <1> 	jmp guiboot
   337                              <1> %endif
   338                              <1> normalstartup:
   339 00000230 E9B9280000          <1> 	jmp os
   340                              <1> 	
   341 00000235 00000000            <1> basecache dd 0
   342 00000239 00001000            <1> newcodecache dd 0x100000
   343                              <1> 
   344 0000023D 00                  <1> testingcpuspeed db 0
   345 0000023E 00000000            <1> cpuspeedperint dd 0
   346 00000242 0000000000000000    <1> cpuclocksperint dd 0,0
   347 0000024A 00000000            <1> memoryspace dd 0
   348 0000024E 7D0A                <1> pitdiv dw 2685
   349 00000250 2E562200            <1> timeinterval dd 2250286
   350 00000254 00000000            <1> timeseconds dd 0
   351 00000258 00000000            <1> timenanoseconds dd 0
   352 0000025C 00                  <1> soundon db 0
   353 0000025D 0000                <1> soundrepititions dw 0
   354 0000025F 00000000            <1> soundpos dd 0
   355 00000263 00000000            <1> soundendpos dd 0
   356                              <1> 
   357                              <1> cpuspeedend:
   358 00000267 C605[3D020000]00    <1> 	mov byte [testingcpuspeed], 0
   359 0000026E A3[3E020000]        <1> 	mov [cpuspeedperint], eax
   360 00000273 B8[4A4A0000]        <1> 	mov eax, cpuspeedloopend
   361 00000278 890424              <1> 	mov [esp], eax
   362 0000027B E9BC000000          <1> 	jmp handled
   363                              <1> 
   364                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   365                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   366                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   367                              <1> 
   368                              <1> pitinterrupt: ;this controls threading
   369 00000280 FA                  <1> 	cli
   370 00000281 803D[3D020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   371 00000288 74DD                <1> 	je cpuspeedend
   372                              <1> 		
   373 0000028A E886000000          <1> 	call timekeeper ;this updates the internal time
   374                              <1> 	
   375 0000028F 803D[5C020000]01    <1> 	cmp byte [soundon], 1
   376 00000296 0F84D4550000        <1> 	je near PCSpeakerRAW
   377                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   378                              <1> %ifdef threads.included
   379 0000029C 803D[A1640000]01    <1> 	cmp byte [threadson], 1
   380 000002A3 0F8498610000        <1> 	je near threadswitch
   381                              <1> %endif
   382                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   383 000002A9 803D[A1640000]00    <1> 	cmp byte [threadson], 0
   384 000002B0 0F8486000000        <1> 	je near handled
   385                              <1> %ifdef io.serial
   386                              <1> 	jmp handled
   387                              <1> %else
   388 000002B6 60                  <1> 	pusha
   389 000002B7 E464                <1> 	in al, 64h
   390 000002B9 A820                <1> 	test al, 20h
   391 000002BB 0F8579000000        <1> 	jnz near handled2
   392 000002C1 E460                <1> 	in al, 60h
   393 000002C3 3C01                <1> 	cmp al, 1		;escape
   394 000002C5 7405                <1> 	je userint
   395 000002C7 E96E000000          <1> 	jmp handled2
   396                              <1> ;	cmp al, 0x57
   397                              <1> ;	jne near handled2
   398                              <1> ;pauseint:	;F11 pauses
   399                              <1> ;	in al, 64h
   400                              <1> ;	test al, 20h
   401                              <1> ;	jnz pauseint
   402                              <1> ;	in al, 60h
   403                              <1> ;	cmp al, 0xD7
   404                              <1> ;	jne pauseint
   405                              <1> ;	mov esi, pausemsg
   406                              <1> ;	call print
   407                              <1> ;	cli
   408                              <1> ;pauselp:
   409                              <1> ;	nop
   410                              <1> ;	in al, 64h
   411                              <1> ;	test al, 20h
   412                              <1> ;	jnz pauselp
   413                              <1> ;	in al, 60h
   414                              <1> ;	cmp al, 0x57
   415                              <1> ;	je near handled2
   416                              <1> ;	jmp pauselp
   417                              <1> ;pausemsg db "Paused",10,0
   418                              <1> userint:
   419 000002CC 31C0                <1> 	xor eax, eax
   420 000002CE 3905[DC960300]      <1> 	cmp [sigtable], eax
   421 000002D4 7411                <1> 	je .nosighook
   422 000002D6 8B1D[DC960300]      <1> 	mov ebx, [sigtable]
   423 000002DC 895C2420            <1> 	mov [esp + 32], ebx
   424                              <1> ;	mov [sigtable], eax
   425 000002E0 B020                <1> 	mov al, 0x20
   426 000002E2 E620                <1> 	out 0x20, al
   427 000002E4 61                  <1> 	popa
   428 000002E5 FB                  <1> 	sti
   429 000002E6 CF                  <1> 	iret
   430                              <1> .nosighook:
   431                              <1> 		;UNMASK ALL INTS
   432 000002E7 E621                <1> 	out 0x21, al
   433 000002E9 E6A1                <1> 	out 0xA1, al
   434 000002EB B020                <1> 	mov al, 0x20
   435 000002ED E6A0                <1> 	out 0xA0, al
   436 000002EF E620                <1> 	out 0x20, al
   437                              <1> 		;RESET PIT DIVISOR
   438 000002F1 66A1[4E020000]      <1> 	mov ax, [pitdiv]
   439 000002F7 E640                <1> 	out 0x40, al
   440 000002F9 66C1C008            <1> 	rol ax, 8
   441 000002FD E640                <1> 	out 0x40, al
   442                              <1> 		;RESET PIC
   443 000002FF B020                <1> 	mov al, 0x20
   444 00000301 E620                <1> 	out 0x20, al
   445 00000303 61                  <1> 	popa
   446 00000304 FB                  <1> 	sti
   447 00000305 BC[7C960300]        <1> 	mov esp, stackend ;reset stack
   448 0000030A E938290000          <1> 	jmp returnfromexp
   449                              <1> %endif
   450 0000030F 0A                  <1> rtcrate db 10
   451                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   452                              <1> %ifdef io.serial
   453                              <1> %else
   454                              <1> %ifdef terminal.vsync
   455                              <1> 	cli
   456                              <1> 	cmp byte [termcopyneeded], 0
   457                              <1> 	je .nocopy
   458                              <1> 	call newtermcopy
   459                              <1> .nocopy
   460                              <1> 	push eax
   461                              <1> 	mov al, 0xC
   462                              <1> 	out 0x70, al
   463                              <1> 	in al, 0x71
   464                              <1> 	pop eax
   465                              <1> 	sti
   466                              <1> %endif
   467                              <1> %endif
   468 00000310 E92E000000          <1> 	jmp handled4
   469                              <1> %ifdef rtl8139.included
   470                              <1> rtl8139.irq:
   471                              <1> 	cli
   472                              <1> 	push edx
   473                              <1> 	push eax
   474                              <1> 	mov edx, [rtl8139.basenicaddr]
   475                              <1> 	add edx, rtl8139.ISR
   476                              <1> 	xor eax, eax
   477                              <1> 	in ax, dx
   478                              <1> 	out dx, ax
   479                              <1> 	pop eax
   480                              <1> 	pop edx
   481                              <1> 	sti
   482                              <1> 	jmp handled4
   483                              <1> %endif
   484                              <1> %ifdef sound.included
   485                              <1> sblaster.irq:
   486                              <1> 	cli
   487                              <1> 	pusha
   488                              <1> 	cmp byte [SoundBlaster], 1
   489                              <1> 	je near sblaster.cont
   490                              <1> 	jmp handled2
   491                              <1> %endif
   492                              <1> 	
   493                              <1> timekeeper:
   494 00000315 50                  <1> 	push eax
   495 00000316 A1[58020000]        <1> 	mov eax, [timenanoseconds]
   496 0000031B 0305[50020000]      <1> 	add eax, [timeinterval]
   497 00000321 3D00CA9A3B          <1> 	cmp eax, 1000000000
   498 00000326 720B                <1> 	jb nonanosecondrollover
   499 00000328 FF05[54020000]      <1> 	inc dword [timeseconds]
   500 0000032E 2D00CA9A3B          <1> 	sub eax, 1000000000
   501                              <1> 	%ifdef gui.time
   502                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   503                              <1> 		cmp byte [guion], 1
   504                              <1> 		jne nonanosecondrollover
   505                              <1> 		cmp dword [dragging], 0
   506                              <1> 		jne nonanosecondrollover
   507                              <1> 		pusha
   508                              <1> 		call guitime
   509                              <1> 		popa
   510                              <1> 	%endif
   511                              <1> nonanosecondrollover:
   512 00000333 A3[58020000]        <1> 	mov [timenanoseconds], eax
   513 00000338 58                  <1> 	pop eax
   514 00000339 C3                  <1> 	ret
   515                              <1> 	
   516                              <1> handled2:
   517 0000033A 61                  <1> 	popa
   518                              <1> handled3:
   519 0000033B FB                  <1> 	sti
   520                              <1> handled:
   521 0000033C 50                  <1> 	push eax
   522 0000033D B020                <1> 	mov al, 0x20
   523 0000033F E620                <1> 	out 0x20, al
   524 00000341 58                  <1> 	pop eax
   525 00000342 CF                  <1> 	iret
   526                              <1> handled4:
   527 00000343 50                  <1> 	push eax
   528 00000344 B020                <1> 	mov al, 0x20
   529 00000346 E6A0                <1> 	out 0xA0, al
   530 00000348 E620                <1> 	out 0x20, al
   531 0000034A 58                  <1> 	pop eax
   532 0000034B CF                  <1> 	iret
   533                              <1> [BITS 16]
   534                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   535                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   536                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   537 0000034C 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   538 0000034E 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   539                              <1> 
   540 00000352 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   541 00000354 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   542                              <1> 
   543                              <1> 
   544 00000358 0000                <1> gdt:	dw 0			; limit 15:0
   545 0000035A 0000                <1> 	dw 0			; base 15:0
   546 0000035C 00                  <1> 	db 0			; base 23:16
   547 0000035D 00                  <1> 	db 0			; type
   548 0000035E 00                  <1> 	db 0			; limit 19:16, flags
   549 0000035F 00                  <1> 	db 0			; base 31:24
   550                              <1> ; linear data segment descriptor
   551                              <1> LINEAR_SEL	equ	$-gdt
   552 00000360 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   553 00000362 0000                <1> 	dw 0			; base for this one is always 0
   554 00000364 00                  <1> 	db 0
   555 00000365 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   556 00000366 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   557 00000367 00                  <1> 	db 0
   558                              <1> STACK_SEL	equ $-gdt
   559 00000368 0200                <1> gdts:	dw 2;(stackend)/4096
   560 0000036A 0000                <1> 	dw 0
   561 0000036C 00                  <1> 	db 0
   562 0000036D 92                  <1> 	db 0x92
   563 0000036E CF                  <1> 	db 0xCF
   564 0000036F 00                  <1> 	db 0
   565                              <1> ; code segment descriptor
   566                              <1> SYS_CODE_SEL	equ	$-gdt
   567 00000370 FFFF                <1> gdt2:	dw 0xFFFF
   568 00000372 0000                <1> 	dw 0			; (base gets set above)
   569 00000374 00                  <1> 	db 0
   570 00000375 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   571 00000376 CF                  <1> 	db 0xCF
   572 00000377 00                  <1> 	db 0
   573                              <1> ; data segment descriptor
   574                              <1> SYS_DATA_SEL	equ	$-gdt
   575 00000378 FFFF                <1> gdt3:	dw 0xFFFF
   576 0000037A 0000                <1> 	dw 0			; (base gets set above)
   577 0000037C 00                  <1> 	db 0
   578 0000037D 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   579 0000037E CF                  <1> 	db 0xCF
   580 0000037F 00                  <1> 	db 0
   581                              <1> NEW_CODE_SEL	equ	$-gdt
   582 00000380 FFFF                <1> gdt4:	dw 0xFFFF
   583 00000382 0000                <1> 	dw 0			; (base gets set above)
   584 00000384 00                  <1> 	db 0
   585 00000385 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   586 00000386 CF                  <1> 	db 0xCF
   587 00000387 00                  <1> 	db 0
   588                              <1> ; data segment descriptor
   589                              <1> NEW_DATA_SEL	equ	$-gdt
   590 00000388 FFFF                <1> gdt5:	dw 0xFFFF
   591 0000038A 0000                <1> 	dw 0			; (base gets set above)
   592 0000038C 00                  <1> 	db 0
   593 0000038D 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   594 0000038E CF                  <1> 	db 0xCF
   595 0000038F 00                  <1> 	db 0
   596                              <1> V8086_CODE_SEL	equ $-gdt
   597 00000390 FFFF                <1> gdtv8086: dw 0xFFFF
   598 00000392 0000                <1> 	dw 0
   599 00000394 00                  <1> 	db 0
   600 00000395 9A                  <1> 	db 0x9A
   601 00000396 8F                  <1> 	db 0x8F
   602 00000397 00                  <1> 	db 0
   603                              <1> V8086_DATA_SEL	equ $-gdt
   604 00000398 FFFF                <1> gdtv80862: dw 0xFFFF
   605 0000039A 0000                <1> 	dw 0
   606 0000039C 00                  <1> 	db 0
   607 0000039D 92                  <1> 	db 0x92
   608 0000039E 8F                  <1> 	db 0x8F
   609 0000039F 00                  <1> 	db 0
   610                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   611 000003A0 0001                <1> gdtdos:	dw 256	;give it 1 MB
   612 000003A2 0000                <1> 	dw 0
   613 000003A4 00                  <1> 	db 0
   614 000003A5 9A                  <1> 	db 0x9A
   615 000003A6 8F                  <1> 	db 0x8F ;16 bit
   616 000003A7 00                  <1> 	db 0
   617                              <1> DOS_DATA_SEL 	equ $-gdt
   618 000003A8 0001                <1> gdtdos2:	dw 256
   619 000003AA 0000                <1> 	dw 0
   620 000003AC 00                  <1> 	db 0
   621 000003AD 92                  <1> 	db 0x92
   622 000003AE 8F                  <1> 	db 0x8F ;16 bit
   623 000003AF 00                  <1> 	db 0
   624                              <1> gdt_end:
   625                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   626                              <1> ;	interrupt descriptor table (IDT)
   627                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   628                              <1> ; 32 reserved interrupts:
   629                              <1> idt:	
   630                              <1> %assign i 0
   631                              <1> %rep    8
   632                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   633                              <1> %assign i i+1
   634                              <1> %endrep
   635 000003B0 [D10C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   636                              <2> %assign i i+1
   637 000003B8 [DD0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   638                              <2> %assign i i+1
   639 000003C0 [E90C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   640                              <2> %assign i i+1
   641 000003C8 [F50C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   642                              <2> %assign i i+1
   643 000003D0 [010D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   644                              <2> %assign i i+1
   645 000003D8 [0D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   646                              <2> %assign i i+1
   647 000003E0 [190D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   648                              <2> %assign i i+1
   649 000003E8 [250D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   650                              <2> %assign i i+1
   651 000003F0 [310D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   652                              <1> %assign i 9
   653                              <1> %rep    23
   654                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   655                              <1> %assign i i+1
   656                              <1> %endrep
   657 000003F8 [3D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   658                              <2> %assign i i+1
   659 00000400 [490D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   660                              <2> %assign i i+1
   661 00000408 [550D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   662                              <2> %assign i i+1
   663 00000410 [610D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   664                              <2> %assign i i+1
   665 00000418 [6D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   666                              <2> %assign i i+1
   667 00000420 [790D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   668                              <2> %assign i i+1
   669 00000428 [850D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   670                              <2> %assign i i+1
   671 00000430 [910D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   672                              <2> %assign i i+1
   673 00000438 [9D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   674                              <2> %assign i i+1
   675 00000440 [A90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   676                              <2> %assign i i+1
   677 00000448 [B50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   678                              <2> %assign i i+1
   679 00000450 [C10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   680                              <2> %assign i i+1
   681 00000458 [CD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   682                              <2> %assign i i+1
   683 00000460 [D90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   684                              <2> %assign i i+1
   685 00000468 [E50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   686                              <2> %assign i i+1
   687 00000470 [F10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   688                              <2> %assign i i+1
   689 00000478 [FD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   690                              <2> %assign i i+1
   691 00000480 [090E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   692                              <2> %assign i i+1
   693 00000488 [150E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   694                              <2> %assign i i+1
   695 00000490 [210E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   696                              <2> %assign i i+1
   697 00000498 [2D0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   698                              <2> %assign i i+1
   699 000004A0 [390E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   700                              <2> %assign i i+1
   701 000004A8 [450E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   702                              <2> %assign i i+1
   703 000004B0 [B029]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   704 000004B8 [B429]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   705                              <1> %assign i 0x22
   706                              <1> %rep 14
   707                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   708                              <1> %assign i +1
   709                              <1> %endrep
   710 000004C0 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   711                              <2> %assign i +1
   712 000004C8 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   713                              <2> %assign i +1
   714 000004D0 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   715                              <2> %assign i +1
   716 000004D8 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   717                              <2> %assign i +1
   718 000004E0 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   719                              <2> %assign i +1
   720 000004E8 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   721                              <2> %assign i +1
   722 000004F0 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   723                              <2> %assign i +1
   724 000004F8 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   725                              <2> %assign i +1
   726 00000500 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   727                              <2> %assign i +1
   728 00000508 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   729                              <2> %assign i +1
   730 00000510 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   731                              <2> %assign i +1
   732 00000518 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   733                              <2> %assign i +1
   734 00000520 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   735                              <2> %assign i +1
   736 00000528 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   737                              <2> %assign i +1
   738                              <1> ;INT 30h for os use and 3rd party use:
   739 00000530 [CF1B]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   740                              <1> %assign i 0x31
   741                              <1> %rep 15
   742                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   743                              <1> %assign i +1
   744                              <1> %endrep
   745 00000538 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   746                              <2> %assign i +1
   747 00000540 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   748                              <2> %assign i +1
   749 00000548 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   750                              <2> %assign i +1
   751 00000550 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   752                              <2> %assign i +1
   753 00000558 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   754                              <2> %assign i +1
   755 00000560 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   756                              <2> %assign i +1
   757 00000568 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   758                              <2> %assign i +1
   759 00000570 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   760                              <2> %assign i +1
   761 00000578 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   762                              <2> %assign i +1
   763 00000580 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   764                              <2> %assign i +1
   765 00000588 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   766                              <2> %assign i +1
   767 00000590 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   768                              <2> %assign i +1
   769 00000598 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   770                              <2> %assign i +1
   771 000005A0 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   772                              <2> %assign i +1
   773 000005A8 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   774                              <2> %assign i +1
   775                              <1> ;and here we are at 0x40
   776                              <1> ;here are all the irq's
   777 000005B0 [8002]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   778 000005B8 [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   779 000005C0 [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   780 000005C8 [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   781 000005D0 [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   782                              <1> 	%ifdef sound.included
   783                              <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   784                              <1> 	%else
   785 000005D8 [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   786                              <1> 	%endif
   787 000005E0 [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   788 000005E8 [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   789 000005F0 [1003]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   790 000005F8 [4303]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   791 00000600 [4303]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   792                              <1> 	%ifdef rtl8139.included
   793                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   794                              <1> 	%else
   795 00000608 [4303]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   796                              <1> 	%endif
   797 00000610 [4303]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   798 00000618 [4303]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   799 00000620 [4303]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   800 00000628 [4303]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   801                              <1> ;This brings me up to 0x50
   802                              <1> %assign i 0x50
   803                              <1> %rep 176
   804                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   805                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   806                              <1> %assign i +1
   807                              <1> %endrep
   808 00000630 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   809                              <2> 
   810                              <2> %assign i +1
   811 00000638 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   812                              <2> 
   813                              <2> %assign i +1
   814 00000640 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   815                              <2> 
   816                              <2> %assign i +1
   817 00000648 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   818                              <2> 
   819                              <2> %assign i +1
   820 00000650 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   821                              <2> 
   822                              <2> %assign i +1
   823 00000658 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   824                              <2> 
   825                              <2> %assign i +1
   826 00000660 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   827                              <2> 
   828                              <2> %assign i +1
   829 00000668 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   830                              <2> 
   831                              <2> %assign i +1
   832 00000670 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   833                              <2> 
   834                              <2> %assign i +1
   835 00000678 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   836                              <2> 
   837                              <2> %assign i +1
   838 00000680 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   839                              <2> 
   840                              <2> %assign i +1
   841 00000688 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   842                              <2> 
   843                              <2> %assign i +1
   844 00000690 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   845                              <2> 
   846                              <2> %assign i +1
   847 00000698 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   848                              <2> 
   849                              <2> %assign i +1
   850 000006A0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   851                              <2> 
   852                              <2> %assign i +1
   853 000006A8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   854                              <2> 
   855                              <2> %assign i +1
   856 000006B0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   857                              <2> 
   858                              <2> %assign i +1
   859 000006B8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   860                              <2> 
   861                              <2> %assign i +1
   862 000006C0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   863                              <2> 
   864                              <2> %assign i +1
   865 000006C8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   866                              <2> 
   867                              <2> %assign i +1
   868 000006D0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   869                              <2> 
   870                              <2> %assign i +1
   871 000006D8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   872                              <2> 
   873                              <2> %assign i +1
   874 000006E0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   875                              <2> 
   876                              <2> %assign i +1
   877 000006E8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   878                              <2> 
   879                              <2> %assign i +1
   880 000006F0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   881                              <2> 
   882                              <2> %assign i +1
   883 000006F8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   884                              <2> 
   885                              <2> %assign i +1
   886 00000700 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   887                              <2> 
   888                              <2> %assign i +1
   889 00000708 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   890                              <2> 
   891                              <2> %assign i +1
   892 00000710 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   893                              <2> 
   894                              <2> %assign i +1
   895 00000718 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   896                              <2> 
   897                              <2> %assign i +1
   898 00000720 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   899                              <2> 
   900                              <2> %assign i +1
   901 00000728 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   902                              <2> 
   903                              <2> %assign i +1
   904 00000730 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   905                              <2> 
   906                              <2> %assign i +1
   907 00000738 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   908                              <2> 
   909                              <2> %assign i +1
   910 00000740 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   911                              <2> 
   912                              <2> %assign i +1
   913 00000748 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   914                              <2> 
   915                              <2> %assign i +1
   916 00000750 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   917                              <2> 
   918                              <2> %assign i +1
   919 00000758 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   920                              <2> 
   921                              <2> %assign i +1
   922 00000760 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   923                              <2> 
   924                              <2> %assign i +1
   925 00000768 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   926                              <2> 
   927                              <2> %assign i +1
   928 00000770 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   929                              <2> 
   930                              <2> %assign i +1
   931 00000778 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   932                              <2> 
   933                              <2> %assign i +1
   934 00000780 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   935                              <2> 
   936                              <2> %assign i +1
   937 00000788 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   938                              <2> 
   939                              <2> %assign i +1
   940 00000790 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   941                              <2> 
   942                              <2> %assign i +1
   943 00000798 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   944                              <2> 
   945                              <2> %assign i +1
   946 000007A0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   947                              <2> 
   948                              <2> %assign i +1
   949 000007A8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   950                              <2> 
   951                              <2> %assign i +1
   952 000007B0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   953                              <2> 
   954                              <2> %assign i +1
   955 000007B8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   956                              <2> 
   957                              <2> %assign i +1
   958 000007C0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   959                              <2> 
   960                              <2> %assign i +1
   961 000007C8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   962                              <2> 
   963                              <2> %assign i +1
   964 000007D0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   965                              <2> 
   966                              <2> %assign i +1
   967 000007D8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   968                              <2> 
   969                              <2> %assign i +1
   970 000007E0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   971                              <2> 
   972                              <2> %assign i +1
   973 000007E8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   974                              <2> 
   975                              <2> %assign i +1
   976 000007F0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   977                              <2> 
   978                              <2> %assign i +1
   979 000007F8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   980                              <2> 
   981                              <2> %assign i +1
   982 00000800 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   983                              <2> 
   984                              <2> %assign i +1
   985 00000808 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   986                              <2> 
   987                              <2> %assign i +1
   988 00000810 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   989                              <2> 
   990                              <2> %assign i +1
   991 00000818 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   992                              <2> 
   993                              <2> %assign i +1
   994 00000820 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   995                              <2> 
   996                              <2> %assign i +1
   997 00000828 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   998                              <2> 
   999                              <2> %assign i +1
  1000 00000830 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1001                              <2> 
  1002                              <2> %assign i +1
  1003 00000838 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1004                              <2> 
  1005                              <2> %assign i +1
  1006 00000840 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1007                              <2> 
  1008                              <2> %assign i +1
  1009 00000848 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1010                              <2> 
  1011                              <2> %assign i +1
  1012 00000850 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1013                              <2> 
  1014                              <2> %assign i +1
  1015 00000858 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1016                              <2> 
  1017                              <2> %assign i +1
  1018 00000860 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1019                              <2> 
  1020                              <2> %assign i +1
  1021 00000868 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1022                              <2> 
  1023                              <2> %assign i +1
  1024 00000870 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1025                              <2> 
  1026                              <2> %assign i +1
  1027 00000878 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1028                              <2> 
  1029                              <2> %assign i +1
  1030 00000880 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1031                              <2> 
  1032                              <2> %assign i +1
  1033 00000888 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1034                              <2> 
  1035                              <2> %assign i +1
  1036 00000890 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1037                              <2> 
  1038                              <2> %assign i +1
  1039 00000898 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1040                              <2> 
  1041                              <2> %assign i +1
  1042 000008A0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1043                              <2> 
  1044                              <2> %assign i +1
  1045 000008A8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1046                              <2> 
  1047                              <2> %assign i +1
  1048 000008B0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1049                              <2> 
  1050                              <2> %assign i +1
  1051 000008B8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1052                              <2> 
  1053                              <2> %assign i +1
  1054 000008C0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1055                              <2> 
  1056                              <2> %assign i +1
  1057 000008C8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1058                              <2> 
  1059                              <2> %assign i +1
  1060 000008D0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1061                              <2> 
  1062                              <2> %assign i +1
  1063 000008D8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1064                              <2> 
  1065                              <2> %assign i +1
  1066 000008E0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1067                              <2> 
  1068                              <2> %assign i +1
  1069 000008E8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1070                              <2> 
  1071                              <2> %assign i +1
  1072 000008F0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1073                              <2> 
  1074                              <2> %assign i +1
  1075 000008F8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1076                              <2> 
  1077                              <2> %assign i +1
  1078 00000900 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1079                              <2> 
  1080                              <2> %assign i +1
  1081 00000908 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1082                              <2> 
  1083                              <2> %assign i +1
  1084 00000910 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1085                              <2> 
  1086                              <2> %assign i +1
  1087 00000918 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1088                              <2> 
  1089                              <2> %assign i +1
  1090 00000920 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1091                              <2> 
  1092                              <2> %assign i +1
  1093 00000928 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1094                              <2> 
  1095                              <2> %assign i +1
  1096 00000930 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1097                              <2> 
  1098                              <2> %assign i +1
  1099 00000938 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1100                              <2> 
  1101                              <2> %assign i +1
  1102 00000940 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1103                              <2> 
  1104                              <2> %assign i +1
  1105 00000948 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1106                              <2> 
  1107                              <2> %assign i +1
  1108 00000950 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1109                              <2> 
  1110                              <2> %assign i +1
  1111 00000958 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1112                              <2> 
  1113                              <2> %assign i +1
  1114 00000960 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1115                              <2> 
  1116                              <2> %assign i +1
  1117 00000968 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1118                              <2> 
  1119                              <2> %assign i +1
  1120 00000970 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1121                              <2> 
  1122                              <2> %assign i +1
  1123 00000978 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1124                              <2> 
  1125                              <2> %assign i +1
  1126 00000980 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1127                              <2> 
  1128                              <2> %assign i +1
  1129 00000988 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1130                              <2> 
  1131                              <2> %assign i +1
  1132 00000990 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1133                              <2> 
  1134                              <2> %assign i +1
  1135 00000998 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1136                              <2> 
  1137                              <2> %assign i +1
  1138 000009A0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1139                              <2> 
  1140                              <2> %assign i +1
  1141 000009A8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1142                              <2> 
  1143                              <2> %assign i +1
  1144 000009B0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1145                              <2> 
  1146                              <2> %assign i +1
  1147 000009B8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1148                              <2> 
  1149                              <2> %assign i +1
  1150 000009C0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1151                              <2> 
  1152                              <2> %assign i +1
  1153 000009C8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1154                              <2> 
  1155                              <2> %assign i +1
  1156 000009D0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1157                              <2> 
  1158                              <2> %assign i +1
  1159 000009D8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1160                              <2> 
  1161                              <2> %assign i +1
  1162 000009E0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1163                              <2> 
  1164                              <2> %assign i +1
  1165 000009E8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1166                              <2> 
  1167                              <2> %assign i +1
  1168 000009F0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1169                              <2> 
  1170                              <2> %assign i +1
  1171 000009F8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1172                              <2> 
  1173                              <2> %assign i +1
  1174 00000A00 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1175                              <2> 
  1176                              <2> %assign i +1
  1177 00000A08 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1178                              <2> 
  1179                              <2> %assign i +1
  1180 00000A10 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1181                              <2> 
  1182                              <2> %assign i +1
  1183 00000A18 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1184                              <2> 
  1185                              <2> %assign i +1
  1186 00000A20 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1187                              <2> 
  1188                              <2> %assign i +1
  1189 00000A28 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1190                              <2> 
  1191                              <2> %assign i +1
  1192 00000A30 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1193                              <2> 
  1194                              <2> %assign i +1
  1195 00000A38 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1196                              <2> 
  1197                              <2> %assign i +1
  1198 00000A40 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1199                              <2> 
  1200                              <2> %assign i +1
  1201 00000A48 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1202                              <2> 
  1203                              <2> %assign i +1
  1204 00000A50 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1205                              <2> 
  1206                              <2> %assign i +1
  1207 00000A58 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1208                              <2> 
  1209                              <2> %assign i +1
  1210 00000A60 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1211                              <2> 
  1212                              <2> %assign i +1
  1213 00000A68 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1214                              <2> 
  1215                              <2> %assign i +1
  1216 00000A70 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1217                              <2> 
  1218                              <2> %assign i +1
  1219 00000A78 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1220                              <2> 
  1221                              <2> %assign i +1
  1222 00000A80 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1223                              <2> 
  1224                              <2> %assign i +1
  1225 00000A88 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1226                              <2> 
  1227                              <2> %assign i +1
  1228 00000A90 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1229                              <2> 
  1230                              <2> %assign i +1
  1231 00000A98 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1232                              <2> 
  1233                              <2> %assign i +1
  1234 00000AA0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1235                              <2> 
  1236                              <2> %assign i +1
  1237 00000AA8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1238                              <2> 
  1239                              <2> %assign i +1
  1240 00000AB0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1241                              <2> 
  1242                              <2> %assign i +1
  1243 00000AB8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1244                              <2> 
  1245                              <2> %assign i +1
  1246 00000AC0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1247                              <2> 
  1248                              <2> %assign i +1
  1249 00000AC8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1250                              <2> 
  1251                              <2> %assign i +1
  1252 00000AD0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1253                              <2> 
  1254                              <2> %assign i +1
  1255 00000AD8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1256                              <2> 
  1257                              <2> %assign i +1
  1258 00000AE0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1259                              <2> 
  1260                              <2> %assign i +1
  1261 00000AE8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1262                              <2> 
  1263                              <2> %assign i +1
  1264 00000AF0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1265                              <2> 
  1266                              <2> %assign i +1
  1267 00000AF8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1268                              <2> 
  1269                              <2> %assign i +1
  1270 00000B00 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1271                              <2> 
  1272                              <2> %assign i +1
  1273 00000B08 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1274                              <2> 
  1275                              <2> %assign i +1
  1276 00000B10 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1277                              <2> 
  1278                              <2> %assign i +1
  1279 00000B18 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1280                              <2> 
  1281                              <2> %assign i +1
  1282 00000B20 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1283                              <2> 
  1284                              <2> %assign i +1
  1285 00000B28 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1286                              <2> 
  1287                              <2> %assign i +1
  1288 00000B30 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1289                              <2> 
  1290                              <2> %assign i +1
  1291 00000B38 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1292                              <2> 
  1293                              <2> %assign i +1
  1294 00000B40 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1295                              <2> 
  1296                              <2> %assign i +1
  1297 00000B48 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1298                              <2> 
  1299                              <2> %assign i +1
  1300 00000B50 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1301                              <2> 
  1302                              <2> %assign i +1
  1303 00000B58 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1304                              <2> 
  1305                              <2> %assign i +1
  1306 00000B60 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1307                              <2> 
  1308                              <2> %assign i +1
  1309 00000B68 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1310                              <2> 
  1311                              <2> %assign i +1
  1312 00000B70 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1313                              <2> 
  1314                              <2> %assign i +1
  1315 00000B78 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1316                              <2> 
  1317                              <2> %assign i +1
  1318 00000B80 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1319                              <2> 
  1320                              <2> %assign i +1
  1321 00000B88 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1322                              <2> 
  1323                              <2> %assign i +1
  1324 00000B90 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1325                              <2> 
  1326                              <2> %assign i +1
  1327 00000B98 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1328                              <2> 
  1329                              <2> %assign i +1
  1330 00000BA0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1331                              <2> 
  1332                              <2> %assign i +1
  1333 00000BA8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1334                              <2> 
  1335                              <2> %assign i +1
  1336                              <1> idt_end:
  1337                              <1> [BITS 32]
  1338                                  	%include "source/realmode.asm"
  1339                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1340                              <1> 			;and the return address is in realmodereturn
  1341 00000BB0 FA                  <1> 	cli
  1342 00000BB1 A3[C30C0000]        <1> 	mov [realmodeeax], eax
  1343 00000BB6 891D[BF0C0000]      <1> 	mov [realmodeebx], ebx
  1344 00000BBC 8925[B10C0000]      <1> 	mov [pmodeesp], esp
  1345                              <1> 
  1346 00000BC2 BB[BB0C0000]        <1> 	mov ebx, cr0old
  1347                              <1> rmcopytofirstmbyte:
  1348 00000BC7 8B03                <1> 	mov eax, [ebx]
  1349 00000BC9 658903              <1> 	mov [gs:ebx], eax
  1350 00000BCC 81C304000000        <1> 	add ebx, 4
  1351 00000BD2 81FB[CB0C0000]      <1> 	cmp ebx, realmodeptr
  1352 00000BD8 76ED                <1> 	jbe rmcopytofirstmbyte
  1353                              <1> 
  1354 00000BDA EA[E10B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1355                              <1> 
  1356                              <1> [BITS 16]
  1357                              <1> protected16bit:
  1358 00000BE1 B84000              <1> 	mov ax, V8086_DATA_SEL
  1359 00000BE4 8ED8                <1> 	mov ds, ax
  1360 00000BE6 8EC0                <1> 	mov es, ax
  1361 00000BE8 8EE0                <1> 	mov fs, ax
  1362 00000BEA 8EE8                <1> 	mov gs, ax
  1363 00000BEC 8ED0                <1> 	mov ss, ax
  1364 00000BEE 66BC[7C960300]      <1> 	mov esp, stackend
  1365 00000BF4 0F20C0              <1> 	mov eax, cr0
  1366 00000BF7 66A3[BB0C]          <1> 	mov [cr0old], eax
  1367 00000BFB 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1368 00000C01 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1369 00000C04 EA[090C]0010        <1> 	jmp 0x1000:inrealmode
  1370                              <1> 
  1371                              <1> inrealmode:
  1372 00000C09 8CC8                <1> 	mov ax, cs
  1373 00000C0B 8ED8                <1> 	mov ds, ax
  1374 00000C0D 8EC0                <1> 	mov es, ax
  1375 00000C0F 8EE0                <1> 	mov fs, ax
  1376 00000C11 8EE8                <1> 	mov gs, ax
  1377 00000C13 8ED0                <1> 	mov ss, ax
  1378 00000C15 BC[7C96]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1379                              <1> 	
  1380 00000C18 B011                <1> 	mov al, 0x11
  1381 00000C1A E620                <1> 	out 0x20, al
  1382 00000C1C E6A0                <1> 	out 0xA0, al
  1383 00000C1E B008                <1> 	mov al, 0x8		;interrupt for master
  1384 00000C20 E621                <1> 	out 0x21, al
  1385 00000C22 B070                <1> 	mov al, 0x70	;interrupt for slave
  1386 00000C24 E6A1                <1> 	out 0xA1, al
  1387 00000C26 B004                <1> 	mov al, 4
  1388 00000C28 E621                <1> 	out 0x21, al
  1389 00000C2A B002                <1> 	mov al, 2
  1390 00000C2C E6A1                <1> 	out 0xA1, al
  1391 00000C2E B001                <1> 	mov al, 0x1
  1392 00000C30 E621                <1> 	out 0x21, al
  1393 00000C32 B001                <1> 	mov al, 0x1
  1394 00000C34 E6A1                <1> 	out 0xA1, al
  1395                              <1> 	
  1396 00000C36 0F011E[B50C]        <1> 	lidt [idt_real]
  1397 00000C3B FB                  <1> 	sti
  1398                              <1> 
  1399 00000C3C 66A1[C30C]          <1> 	mov eax, [realmodeeax]
  1400 00000C40 668B1E[BF0C]        <1> 	mov ebx, [realmodeebx]
  1401                              <1> 
  1402 00000C45 FF16[CB0C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1403                              <1> 
  1404 00000C49 66A3[C30C]          <1> 	mov [realmodeeax], eax
  1405 00000C4D 66891E[BF0C]        <1> 	mov [realmodeebx], ebx
  1406                              <1> 
  1407 00000C52 FA                  <1> 	cli
  1408 00000C53 0F0116[4C03]        <1> 	lgdt [gdtr]
  1409 00000C58 0F011E[5203]        <1> 	lidt [idtr]
  1410 00000C5D 0F20C0              <1> 	mov eax, cr0
  1411 00000C60 0C01                <1> 	or al, 1
  1412 00000C62 0F22C0              <1> 	mov cr0,eax
  1413 00000C65 EA[6A0C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1414                              <1> 
  1415                              <1> [BITS 32]
  1416                              <1> returntopmode:
  1417 00000C6A 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1418 00000C6E 8ED8                <1> 	mov ds, ax
  1419 00000C70 8EC0                <1> 	mov es, ax
  1420 00000C72 8EE0                <1> 	mov fs, ax
  1421 00000C74 8ED0                <1> 	mov ss, ax
  1422 00000C76 8B25[B10C0000]      <1> 	mov esp, [pmodeesp]
  1423 00000C7C 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1424 00000C80 8EE8                <1> 	mov gs, ax
  1425                              <1> 
  1426 00000C82 BB[BB0C0000]        <1> 	mov ebx, cr0old
  1427                              <1> rmcopyfromfirstmbyte:
  1428 00000C87 658B03              <1> 	mov eax, [gs:ebx]
  1429 00000C8A 8903                <1> 	mov [ebx], eax
  1430 00000C8C 81C304000000        <1> 	add ebx, 4
  1431 00000C92 81FB[CB0C0000]      <1> 	cmp ebx, realmodeptr
  1432 00000C98 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1433                              <1> 
  1434 00000C9A E838520000          <1> 	call initialize.pic ;reset irq's and masks
  1435 00000C9F FB                  <1> 	sti
  1436 00000CA0 A1[C30C0000]        <1> 	mov eax, [realmodeeax]
  1437 00000CA5 8B1D[BF0C0000]      <1> 	mov ebx, [realmodeebx]
  1438 00000CAB FF25[C70C0000]      <1> 	jmp dword [realmodereturn]
  1439                              <1> 	
  1440 00000CB1 00000000            <1> pmodeesp dd 0
  1441                              <1> idt_real:
  1442 00000CB5 FF03                <1> 	dw 0x3FF
  1443 00000CB7 00000000            <1> 	dd 0
  1444 00000CBB 00000000            <1> cr0old dd 0
  1445 00000CBF 00000000            <1> realmodeebx dd 0
  1446 00000CC3 00000000            <1> realmodeeax dd 0
  1447 00000CC7 00000000            <1> realmodereturn dd 0
  1448 00000CCB 0000                <1> realmodeptr dw 0
  1449 00000CCD 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1450                                  [BITS 32]
  1451                                      %include "source/exception.asm"
  1452                              <1> %ifdef exceptions.included
  1453                              <1> unhand:	
  1454                              <1> 	%assign i 0
  1455                              <1> 	%rep 32
  1456                              <1> 	mov byte [intprob], i
  1457                              <1> 	jmp unhand2
  1458                              <1> 	%assign i i+1
  1459                              <1> 	%endrep
  1460 00000CD1 C605[89110000]00    <2>  mov byte [intprob], i
  1461 00000CD8 E974010000          <2>  jmp unhand2
  1462                              <2>  %assign i i+1
  1463 00000CDD C605[89110000]01    <2>  mov byte [intprob], i
  1464 00000CE4 E968010000          <2>  jmp unhand2
  1465                              <2>  %assign i i+1
  1466 00000CE9 C605[89110000]02    <2>  mov byte [intprob], i
  1467 00000CF0 E95C010000          <2>  jmp unhand2
  1468                              <2>  %assign i i+1
  1469 00000CF5 C605[89110000]03    <2>  mov byte [intprob], i
  1470 00000CFC E950010000          <2>  jmp unhand2
  1471                              <2>  %assign i i+1
  1472 00000D01 C605[89110000]04    <2>  mov byte [intprob], i
  1473 00000D08 E944010000          <2>  jmp unhand2
  1474                              <2>  %assign i i+1
  1475 00000D0D C605[89110000]05    <2>  mov byte [intprob], i
  1476 00000D14 E938010000          <2>  jmp unhand2
  1477                              <2>  %assign i i+1
  1478 00000D19 C605[89110000]06    <2>  mov byte [intprob], i
  1479 00000D20 E92C010000          <2>  jmp unhand2
  1480                              <2>  %assign i i+1
  1481 00000D25 C605[89110000]07    <2>  mov byte [intprob], i
  1482 00000D2C E920010000          <2>  jmp unhand2
  1483                              <2>  %assign i i+1
  1484 00000D31 C605[89110000]08    <2>  mov byte [intprob], i
  1485 00000D38 E914010000          <2>  jmp unhand2
  1486                              <2>  %assign i i+1
  1487 00000D3D C605[89110000]09    <2>  mov byte [intprob], i
  1488 00000D44 E908010000          <2>  jmp unhand2
  1489                              <2>  %assign i i+1
  1490 00000D49 C605[89110000]0A    <2>  mov byte [intprob], i
  1491 00000D50 E9FC000000          <2>  jmp unhand2
  1492                              <2>  %assign i i+1
  1493 00000D55 C605[89110000]0B    <2>  mov byte [intprob], i
  1494 00000D5C E9F0000000          <2>  jmp unhand2
  1495                              <2>  %assign i i+1
  1496 00000D61 C605[89110000]0C    <2>  mov byte [intprob], i
  1497 00000D68 E9E4000000          <2>  jmp unhand2
  1498                              <2>  %assign i i+1
  1499 00000D6D C605[89110000]0D    <2>  mov byte [intprob], i
  1500 00000D74 E9D8000000          <2>  jmp unhand2
  1501                              <2>  %assign i i+1
  1502 00000D79 C605[89110000]0E    <2>  mov byte [intprob], i
  1503 00000D80 E9CC000000          <2>  jmp unhand2
  1504                              <2>  %assign i i+1
  1505 00000D85 C605[89110000]0F    <2>  mov byte [intprob], i
  1506 00000D8C E9C0000000          <2>  jmp unhand2
  1507                              <2>  %assign i i+1
  1508 00000D91 C605[89110000]10    <2>  mov byte [intprob], i
  1509 00000D98 E9B4000000          <2>  jmp unhand2
  1510                              <2>  %assign i i+1
  1511 00000D9D C605[89110000]11    <2>  mov byte [intprob], i
  1512 00000DA4 E9A8000000          <2>  jmp unhand2
  1513                              <2>  %assign i i+1
  1514 00000DA9 C605[89110000]12    <2>  mov byte [intprob], i
  1515 00000DB0 E99C000000          <2>  jmp unhand2
  1516                              <2>  %assign i i+1
  1517 00000DB5 C605[89110000]13    <2>  mov byte [intprob], i
  1518 00000DBC E990000000          <2>  jmp unhand2
  1519                              <2>  %assign i i+1
  1520 00000DC1 C605[89110000]14    <2>  mov byte [intprob], i
  1521 00000DC8 E984000000          <2>  jmp unhand2
  1522                              <2>  %assign i i+1
  1523 00000DCD C605[89110000]15    <2>  mov byte [intprob], i
  1524 00000DD4 E978000000          <2>  jmp unhand2
  1525                              <2>  %assign i i+1
  1526 00000DD9 C605[89110000]16    <2>  mov byte [intprob], i
  1527 00000DE0 E96C000000          <2>  jmp unhand2
  1528                              <2>  %assign i i+1
  1529 00000DE5 C605[89110000]17    <2>  mov byte [intprob], i
  1530 00000DEC E960000000          <2>  jmp unhand2
  1531                              <2>  %assign i i+1
  1532 00000DF1 C605[89110000]18    <2>  mov byte [intprob], i
  1533 00000DF8 E954000000          <2>  jmp unhand2
  1534                              <2>  %assign i i+1
  1535 00000DFD C605[89110000]19    <2>  mov byte [intprob], i
  1536 00000E04 E948000000          <2>  jmp unhand2
  1537                              <2>  %assign i i+1
  1538 00000E09 C605[89110000]1A    <2>  mov byte [intprob], i
  1539 00000E10 E93C000000          <2>  jmp unhand2
  1540                              <2>  %assign i i+1
  1541 00000E15 C605[89110000]1B    <2>  mov byte [intprob], i
  1542 00000E1C E930000000          <2>  jmp unhand2
  1543                              <2>  %assign i i+1
  1544 00000E21 C605[89110000]1C    <2>  mov byte [intprob], i
  1545 00000E28 E924000000          <2>  jmp unhand2
  1546                              <2>  %assign i i+1
  1547 00000E2D C605[89110000]1D    <2>  mov byte [intprob], i
  1548 00000E34 E918000000          <2>  jmp unhand2
  1549                              <2>  %assign i i+1
  1550 00000E39 C605[89110000]1E    <2>  mov byte [intprob], i
  1551 00000E40 E90C000000          <2>  jmp unhand2
  1552                              <2>  %assign i i+1
  1553 00000E45 C605[89110000]1F    <2>  mov byte [intprob], i
  1554 00000E4C E900000000          <2>  jmp unhand2
  1555                              <2>  %assign i i+1
  1556                              <1> unhand2:
  1557 00000E51 FA                  <1> 	cli
  1558 00000E52 1E                  <1> 	push ds
  1559 00000E53 06                  <1> 	push es
  1560 00000E54 0FA0                <1> 	push fs
  1561 00000E56 0FA8                <1> 	push gs
  1562 00000E58 16                  <1> 	push ss
  1563 00000E59 60                  <1> 	pushad
  1564                              <1> %ifdef gui.included
  1565 00000E5A 803D[6A820000]00    <1> 	cmp byte [guion], 0
  1566 00000E61 0F8432000000        <1> 	je near noguiunhandstuff
  1567 00000E67 66C705[83110000]08- <1> 	mov word [locunhandy], 8
  1568 00000E6F 00                  <1>
  1569 00000E70 66C705[85110000]08- <1> 	mov word [locunhandx], 8
  1570 00000E78 00                  <1>
  1571 00000E79 668B1D[876B0000]    <1> 	mov bx, [background]
  1572 00000E80 66891D[87110000]    <1> 	mov [backgroundcache], bx
  1573 00000E87 C605[68550000]01    <1> 	mov byte [mousedisabled],1
  1574 00000E8E 66BB00F8            <1> 	mov bx, 1111100000000000b
  1575 00000E92 66891D[876B0000]    <1> 	mov [background], bx
  1576                              <1> noguiunhandstuff:
  1577                              <1> %endif
  1578 00000E99 89E6                <1> 	mov esi, esp
  1579 00000E9B 8935[77110000]      <1> 	mov [espfirst], esi
  1580 00000EA1 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1581 00000EA7 8935[73110000]      <1> 	mov [esploc], esi
  1582 00000EAD BE[98110000]        <1> 	mov esi, unhandmsg
  1583 00000EB2 8935[7B110000]      <1> 	mov [esiloc], esi
  1584 00000EB8 31C9                <1> 	xor ecx, ecx
  1585 00000EBA 8A0D[89110000]      <1> 	mov cl, [intprob]
  1586 00000EC0 BB[67150000]        <1> 	mov ebx, errortypes
  1587 00000EC5 C1E102              <1> 	shl ecx, 2
  1588 00000EC8 01CB                <1> 	add ebx, ecx
  1589 00000ECA 81FB[A7150000]      <1> 	cmp ebx, errortypesend
  1590 00000ED0 7205                <1> 	jb gooderrortype
  1591 00000ED2 BB[A7150000]        <1> 	mov ebx, errortypesend
  1592                              <1> gooderrortype:
  1593 00000ED7 8B33                <1> 	mov esi, [ebx]
  1594                              <1> %ifdef gui.included
  1595 00000ED9 803D[6A820000]00    <1> 	cmp byte [guion], 0
  1596 00000EE0 0F842D000000        <1> 	je near errortext
  1597 00000EE6 668B0D[83110000]    <1> 	mov cx, [locunhandy]
  1598 00000EED 668B15[85110000]    <1> 	mov dx, [locunhandx]
  1599 00000EF4 66B80100            <1> 	mov ax, 1
  1600 00000EF8 6631DB              <1> 	xor bx, bx
  1601 00000EFB E8DC620000          <1> 	call showstring2
  1602 00000F00 66890D[83110000]    <1> 	mov [locunhandy], cx
  1603 00000F07 668915[85110000]    <1> 	mov [locunhandx], dx
  1604 00000F0E E905000000          <1> 	jmp errortextdone
  1605                              <1> %endif
  1606                              <1> errortext:
  1607 00000F13 E8040E0000          <1> 	call print		;;get the error message and print it
  1608                              <1> errortextdone:
  1609 00000F18 31C9                <1> 	xor ecx, ecx
  1610 00000F1A 8A0D[89110000]      <1> 	mov cl, [intprob]
  1611 00000F20 E8E7010000          <1> 	call expdump
  1612                              <1> dumpstack:
  1613 00000F25 8B35[73110000]      <1> 	mov esi, [esploc]
  1614 00000F2B 39E6                <1> 	cmp esi, esp
  1615 00000F2D 7216                <1> 	jb donedump
  1616 00000F2F 368B0E              <1> 	mov ecx, [ss:esi]
  1617 00000F32 81EE04000000        <1> 	sub esi, 4
  1618 00000F38 8935[73110000]      <1> 	mov [esploc], esi
  1619 00000F3E E8C9010000          <1> 	call expdump
  1620 00000F43 EBE0                <1> 	jmp dumpstack
  1621                              <1> donedump:
  1622 00000F45 0F20C1              <1> 	mov ecx, cr0
  1623 00000F48 E8BF010000          <1> 	call expdump
  1624 00000F4D 0F20D1              <1> 	mov ecx, cr2
  1625 00000F50 E8B7010000          <1> 	call expdump
  1626 00000F55 0F20D9              <1> 	mov ecx, cr3
  1627 00000F58 E8AF010000          <1> 	call expdump
  1628 00000F5D 0F20E1              <1> 	mov ecx, cr4
  1629 00000F60 E8A7010000          <1> 	call expdump
  1630 00000F65 0F00C9              <1> 	str ecx
  1631 00000F68 E89F010000          <1> 	call expdump
  1632 00000F6D 0F010D[92110000]    <1> 	sidt [igdtcache]
  1633 00000F74 8B0D[94110000]      <1> 	mov ecx, [igdtcache + 2]
  1634 00000F7A E88D010000          <1> 	call expdump
  1635 00000F7F 0F0105[92110000]    <1> 	sgdt [igdtcache]
  1636 00000F86 8B0D[94110000]      <1> 	mov ecx, [igdtcache + 2]
  1637 00000F8C E87B010000          <1> 	call expdump
  1638 00000F91 0F00C1              <1> 	sldt ecx
  1639 00000F94 E873010000          <1> 	call expdump
  1640 00000F99 8B35[73110000]      <1> 	mov esi, [esploc]
  1641 00000F9F 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1642 00000FA4 81C710000000        <1> 	add edi, 16
  1643 00000FAA 893D[8E110000]      <1> 	mov [codelocend], edi
  1644 00000FB0 81EF20000000        <1> 	sub edi, 32
  1645                              <1> dumpcodeloop:
  1646 00000FB6 893D[8A110000]      <1> 	mov [codeloc], edi
  1647 00000FBC 8B0F                <1> 	mov ecx, [edi]
  1648 00000FBE E849010000          <1> 	call expdump
  1649 00000FC3 8B3D[8A110000]      <1> 	mov edi, [codeloc]
  1650 00000FC9 81C704000000        <1> 	add edi, 4
  1651 00000FCF 3B3D[8E110000]      <1> 	cmp edi, [codelocend]
  1652 00000FD5 72DF                <1> 	jb dumpcodeloop
  1653 00000FD7 BE[9D100000]        <1> 	mov esi, backtoosmsg
  1654                              <1> %ifdef gui.included
  1655 00000FDC 803D[6A820000]00    <1> 	cmp byte [guion], 0
  1656 00000FE3 741F                <1> 	je backtomsg
  1657                              <1> guibacktomsg:
  1658 00000FE5 668B15[85110000]    <1> 	mov dx, [locunhandx]
  1659 00000FEC 668B0D[83110000]    <1> 	mov cx, [locunhandy]
  1660 00000FF3 66B80100            <1> 	mov ax, 1
  1661 00000FF7 6631DB              <1> 	xor bx, bx
  1662 00000FFA E8DD610000          <1> 	call showstring2
  1663 00000FFF E905000000          <1> 	jmp backtomsgdone
  1664                              <1> backtomsg:
  1665                              <1> %endif
  1666 00001004 E8130D0000          <1> 	call print
  1667                              <1> backtomsgdone:
  1668 00001009 30C0                <1> 	xor al, al
  1669 0000100B E809130000          <1> 	call rdcharint
  1670 00001010 803D[89110000]03    <1> 	cmp byte [intprob], 3
  1671 00001017 7541                <1> 	jne nodebugint
  1672                              <1> %ifdef gui.included
  1673 00001019 803D[6A820000]00    <1> 	cmp byte [guion], 0
  1674 00001020 7427                <1> 	je nodebuggui
  1675 00001022 668B1D[87110000]    <1> 	mov bx, [backgroundcache]
  1676 00001029 66891D[876B0000]    <1> 	mov [background], bx
  1677 00001030 6631DB              <1> 	xor bx, bx
  1678 00001033 C605[68550000]00    <1> 	mov byte [mousedisabled], 0
  1679 0000103A E8FC5A0000          <1> 	call guiclear
  1680 0000103F E8475B0000          <1> 	call reloadallgraphics
  1681 00001044 E822180000          <1> 	call termcopy
  1682                              <1> nodebuggui:
  1683                              <1> %endif
  1684 00001049 8B35[77110000]      <1> 	mov esi, [espfirst]
  1685 0000104F 89F4                <1> 	mov esp, esi
  1686 00001051 61                  <1> 	popad
  1687 00001052 17                  <1> 	pop ss
  1688 00001053 0FA9                <1> 	pop gs
  1689 00001055 0FA1                <1> 	pop fs
  1690 00001057 07                  <1> 	pop es
  1691 00001058 1F                  <1> 	pop ds
  1692 00001059 CF                  <1> 	iret
  1693                              <1> nodebugint:
  1694 0000105A 61                  <1> 	popad
  1695 0000105B 17                  <1> 	pop ss
  1696 0000105C 0FA9                <1> 	pop gs
  1697 0000105E 0FA1                <1> 	pop fs
  1698 00001060 07                  <1> 	pop es
  1699 00001061 1F                  <1> 	pop ds
  1700 00001062 81C408000000        <1> 	add esp, 8
  1701                              <1> ;	popf ;pop the cs segment selector into eflags
  1702                              <1> ;	popf ;then pop the flags
  1703                              <1> %ifdef gui.included
  1704 00001068 803D[6A820000]00    <1> 	cmp byte [guion], 0
  1705 0000106F 7427                <1> 	je returnunhandgui
  1706 00001071 668B1D[87110000]    <1> 	mov bx, [backgroundcache]
  1707 00001078 66891D[876B0000]    <1> 	mov [background], bx
  1708 0000107F 6631DB              <1> 	xor bx, bx
  1709 00001082 C605[68550000]00    <1> 	mov byte [mousedisabled], 0
  1710 00001089 E8AD5A0000          <1> 	call guiclear
  1711 0000108E E8F85A0000          <1> 	call reloadallgraphics
  1712 00001093 E8D3170000          <1> 	call termcopy
  1713                              <1> %endif
  1714                              <1> returnunhandgui:
  1715 00001098 E9161C0000          <1> 	jmp nwcmd
  1716 0000109D 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1717 000010A6 737420616E79207072- <1>
  1718 000010AF 6F626C656D7320696E- <1>
  1719 000010B8 207468652049737375- <1>
  1720 000010C1 65732073656374696F- <1>
  1721 000010CA 6E20617420736F6C6C- <1>
  1722 000010D3 65726F732E676F6F67- <1>
  1723 000010DC 6C65636F64652E636F- <1>
  1724 000010E5 6D0A                <1>
  1725 000010E7 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1726 000010F0 206B657920746F2072- <1>
  1727 000010F9 657475726E20746F20- <1>
  1728 00001102 536F6C6C65724F530A- <1>
  1729 0000110B 00                  <1>
  1730                              <1> expdump:
  1731 0000110C 8B35[7B110000]      <1> 	mov esi, [esiloc]
  1732 00001112 89F7                <1> 	mov edi, esi
  1733 00001114 81C70F000000        <1> 	add edi, 15
  1734 0000111A 81C604000000        <1> 	add esi, 4
  1735 00001120 893D[7B110000]      <1> 	mov [esiloc], edi
  1736 00001126 81EF03000000        <1> 	sub edi, 3
  1737 0000112C E8E91F0000          <1> 	call converthex
  1738 00001131 81EE04000000        <1> 	sub esi, 4
  1739                              <1> %ifdef gui.included
  1740 00001137 803D[6A820000]00    <1> 	cmp byte [guion], 0
  1741 0000113E 0F8429000000        <1> 	je near expdumptext
  1742 00001144 668B0D[83110000]    <1> 	mov cx, [locunhandy]
  1743 0000114B 668B15[85110000]    <1> 	mov dx, [locunhandx]
  1744 00001152 66B80100            <1> 	mov ax, 1
  1745 00001156 6631DB              <1> 	xor bx, bx
  1746 00001159 E87E600000          <1> 	call showstring2
  1747 0000115E 66890D[83110000]    <1> 	mov [locunhandy], cx
  1748 00001165 668915[85110000]    <1> 	mov [locunhandx], dx
  1749 0000116C C3                  <1> 	ret
  1750                              <1> %endif
  1751                              <1> expdumptext:
  1752 0000116D E8AA0B0000          <1> 	call print
  1753 00001172 C3                  <1> 	ret
  1754 00001173 00000000            <1> esploc dd 0
  1755 00001177 00000000            <1> espfirst dd 0
  1756 0000117B 00000000            <1> esiloc dd 0
  1757 0000117F 00000000            <1> esiregbuf dd 0
  1758 00001183 0100                <1> locunhandy dw 1
  1759 00001185 0100                <1> locunhandx dw 1
  1760 00001187 0000                <1> backgroundcache dw 0
  1761 00001189 00                  <1> intprob db 0
  1762 0000118A 00000000            <1> codeloc dd 0
  1763 0000118E 00000000            <1> codelocend dd 0
  1764 00001192 000000000000        <1> igdtcache dw 0,0,0
  1765                              <1> 	unhandmsg:	
  1766 00001198 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1767 000011A1 303030FF0A00        <1>
  1768                              <1> unhndrg:
  1769 000011A7 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1770 000011B0 303030202000<rept>  <1>
  1771 00001210 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1772 00001219 303030FF0A00        <1>
  1773 0000121F FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1774 00001228 303030202000<rept>  <1>
  1775 00001288 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1776 00001291 303030FF0A00        <1>
  1777 00001297 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1778 000012A0 303030202000<rept>  <1>
  1779 00001300 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1780 00001309 303030FF0A00        <1>
  1781 0000130F FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1782 00001318 303030202000<rept>  <1>
  1783 00001378 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1784 00001381 303030FF0A00        <1>
  1785                              <1> unhandregs:
  1786 00001387 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1787 00001390 303030202000        <1>
  1788 00001396 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1789 0000139F 303030202000        <1>
  1790 000013A5 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1791 000013AE 303030FF0A00        <1>
  1792 000013B4 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1793 000013BD 303030202000        <1>
  1794 000013C3 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1795 000013CC 303030202000        <1>
  1796 000013D2 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1797 000013DB 303030202000        <1>
  1798 000013E1 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1799 000013EA 303030202000        <1>
  1800 000013F0 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1801 000013F9 303030FF0A00        <1>
  1802 000013FF 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1803 00001408 303030202000        <1>
  1804 0000140E 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1805 00001417 303030202000        <1>
  1806 0000141D 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1807 00001426 303030202000        <1>
  1808 0000142C 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1809 00001435 303030FF0A00        <1>
  1810 0000143B 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1811 00001444 303030202000        <1>
  1812 0000144A 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1813 00001453 303030202000        <1>
  1814 00001459 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1815 00001462 303030202000        <1>
  1816 00001468 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1817 00001471 303030FF0A00        <1>
  1818 00001477 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1819 00001480 303030202000        <1>
  1820 00001486 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1821 0000148F 303030202000        <1>
  1822 00001495 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1823 0000149E 303030202000        <1>
  1824 000014A4 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1825 000014AD 303030FF0A00        <1>
  1826 000014B3 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1827 000014BC 303030202000        <1>
  1828 000014C2 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1829 000014CB 303030202000        <1>
  1830 000014D1 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1831 000014DA 303030202000        <1>
  1832 000014E0 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1833 000014E9 303030FF0A00        <1>
  1834 000014EF FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1835 000014F8 303030202000<rept>  <1>
  1836 0000150D FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1837 00001516 30303020FF00        <1>
  1838 0000151C FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1839 00001525 3030305D2000        <1>
  1840 0000152B FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1841 00001534 303030202000<rept>  <1>
  1842 00001558 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1843 00001561 303030FF0A00        <1>
  1844                              <1> unhandmsgend:
  1845                              <1> 
  1846                              <1> errortypes:
  1847 00001567 [AB150000]          <1> 			dd err0
  1848 0000156B [14160000]          <1> 			dd err1
  1849 0000156F [75160000]          <1> 			dd err2
  1850 00001573 [CA160000]          <1> 			dd err3
  1851 00001577 [2E170000]          <1> 			dd err4
  1852 0000157B [80170000]          <1> 			dd err5
  1853 0000157F [EA170000]          <1> 			dd err6
  1854 00001583 [52180000]          <1> 			dd err7
  1855 00001587 [9C180000]          <1> 			dd err8
  1856 0000158B [F9180000]          <1> 			dd err9
  1857 0000158F [52190000]          <1> 			dd err10
  1858 00001593 [9D190000]          <1> 			dd err11
  1859 00001597 [ED190000]          <1> 			dd err12
  1860 0000159B [461A0000]          <1> 			dd err13
  1861 0000159F [A91A0000]          <1> 			dd err14
  1862 000015A3 [E51A0000]          <1> 			dd err15
  1863                              <1> errortypesend:
  1864 000015A7 [701B0000]          <1> 			dd unknownerror
  1865                              <1> 			
  1866 000015AB 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1867 000015B4 6279207A65726F3A0A  <1>
  1868 000015BD 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1869 000015C6 6C79206C696D2061C3- <1>
  1870 000015CF B778203D20E2889E20- <1>
  1871 000015D8 7768656E2061206973- <1>
  1872 000015E1 20616E79207265616C- <1>
  1873 000015EA 206E756D6265722E20- <1>
  1874 000015F3 486170707920456173- <1>
  1875 000015FC 746572210A          <1>
  1876 00001601 202020202020202020- <1> 		db "            x→0",10,0
  1877 0000160A 20202078E28692300A- <1>
  1878 00001613 00                  <1>
  1879                              <1> 		
  1880 00001614 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1881 0000161D 65702F427265616B70- <1>
  1882 00001626 6F696E743A0A        <1>
  1883 0000162C 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1884 00001635 696E74206661756C74- <1>
  1885 0000163E 2C20627265616B706F- <1>
  1886 00001647 696E7420747261702C- <1>
  1887 00001650 206F722073696E676C- <1>
  1888 00001659 652D73746570207472- <1>
  1889 00001662 617020776173207472- <1>
  1890 0000166B 696767657265642E0A- <1>
  1891 00001674 00                  <1>
  1892                              <1> 		
  1893 00001675 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1894 0000167E 6C6520696E74657272- <1>
  1895 00001687 7570743A0A          <1>
  1896 0000168C 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1897 00001695 6520696E7465727275- <1>
  1898 0000169E 707420776173207472- <1>
  1899 000016A7 696767657265642074- <1>
  1900 000016B0 68617420636F756C64- <1>
  1901 000016B9 206E6F74206265206D- <1>
  1902 000016C2 61736B65642E0A00    <1>
  1903                              <1> 		
  1904 000016CA 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1905 000016D3 743A0A              <1>
  1906 000016D6 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1907 000016DF 727275707420697320- <1>
  1908 000016E8 7573656420696E2070- <1>
  1909 000016F1 726F6772616D732074- <1>
  1910 000016FA 6F2073686F77207468- <1>
  1911 00001703 6520737461636B2061- <1>
  1912 0000170C 6E6420726567697374- <1>
  1913 00001715 65727320616E642063- <1>
  1914 0000171E 616E2062650A        <1>
  1915 00001724 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1916 0000172D 00                  <1>
  1917                              <1> 		
  1918 0000172E 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1919 00001737 0A                  <1>
  1920 00001738 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1921 00001741 73736F722072616E20- <1>
  1922 0000174A 696E746F20616E2049- <1>
  1923 00001753 4E544F20696E737472- <1>
  1924 0000175C 756374696F6E207769- <1>
  1925 00001765 746820746865206F76- <1>
  1926 0000176E 6572666C6F7720666C- <1>
  1927 00001777 6167207365742E0A00  <1>
  1928                              <1> 		
  1929 00001780 426F756E6473206368- <1> err5	db "Bounds check:",10
  1930 00001789 65636B3A0A          <1>
  1931 0000178E 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1932 00001797 73736F72207265626F- <1>
  1933 000017A0 756E6465642066726F- <1>
  1934 000017A9 6D206120424F554E44- <1>
  1935 000017B2 20696E737472756374- <1>
  1936 000017BB 696F6E2072756E206F- <1>
  1937 000017C4 6E20616E206F706572- <1>
  1938 000017CD 616E64207468617420- <1>
  1939 000017D6 776173206F75740A    <1>
  1940 000017DE 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1941 000017E7 2E0A00              <1>
  1942                              <1> 		
  1943 000017EA 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1944 000017F3 70636F64653A0A      <1>
  1945 000017FA 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1946 00001803 73736F722068617320- <1>
  1947 0000180C 6E6F20696465612077- <1>
  1948 00001815 686174206974207761- <1>
  1949 0000181E 7320747279696E6720- <1>
  1950 00001827 746F20657865637574- <1>
  1951 00001830 652E20446F6E277420- <1>
  1952 00001839 72756E205353453420- <1>
  1953 00001842 636F64650A          <1>
  1954 00001847 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1955 00001850 0A00                <1>
  1956                              <1> 		
  1957 00001852 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1958 0000185B 6F72206E6F74206176- <1>
  1959 00001864 61696C61626C653A0A  <1>
  1960 0000186D 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1961 00001876 206B6E6F7720746865- <1>
  1962 0000187F 7920646F6E2774206D- <1>
  1963 00001888 616B652074686F7365- <1>
  1964 00001891 20616E796D6F726521- <1>
  1965 0000189A 0A00                <1>
  1966                              <1> 		
  1967 0000189C 446F75626C65206661- <1> err8	db "Double fault:",10
  1968 000018A5 756C743A0A          <1>
  1969 000018AA 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1970 000018B3 74696F6E2068616E64- <1>
  1971 000018BC 6C657220636F756C64- <1>
  1972 000018C5 206E6F742068616E64- <1>
  1973 000018CE 6C6520746861742069- <1>
  1974 000018D7 7420636F756C64206E- <1>
  1975 000018E0 6F742068616E646C65- <1>
  1976 000018E9 20616E206578636570- <1>
  1977 000018F2 74696F6E2E0A00      <1>
  1978                              <1> 		
  1979 000018F9 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1980 00001902 6F72207365676D656E- <1>
  1981 0000190B 74206F76657272756E- <1>
  1982 00001914 3A0A00              <1>
  1983 00001917 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1984 00001920 722068617070656E73- <1>
  1985 00001929 20696E206D6F646572- <1>
  1986 00001932 6E20636F6D70757465- <1>
  1987 0000193B 72732C20616E64206E- <1>
  1988 00001944 657665722073686F75- <1>
  1989 0000194D 6C642E0A00          <1>
  1990                              <1> 
  1991 00001952 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1992 0000195B 53533A0A            <1>
  1993 0000195F 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1994 00001968 686174207761732073- <1>
  1995 00001971 776974636865642074- <1>
  1996 0000197A 6F20697320696E7661- <1>
  1997 00001983 6C69642E204E6F7468- <1>
  1998 0000198C 696E672066756E6E79- <1>
  1999 00001995 20686572652E0A00    <1>
  2000                              <1> 		
  2001 0000199D 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2002 000019A6 6F742070726573656E- <1>
  2003 000019AF 743A0A              <1>
  2004 000019B2 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2005 000019BB 6E7420626974206F66- <1>
  2006 000019C4 20746865207365676D- <1>
  2007 000019CD 656E74206465736372- <1>
  2008 000019D6 6970746F7220697320- <1>
  2009 000019DF 73657420746F207A65- <1>
  2010 000019E8 726F2E0A00          <1>
  2011                              <1> 		
  2012 000019ED 537461636B20657863- <1> err12	db "Stack exception:",10
  2013 000019F6 657074696F6E3A0A    <1>
  2014 000019FE 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2015 00001A07 7363726970746F7220- <1>
  2016 00001A10 697320696E76616C69- <1>
  2017 00001A19 64206F72206E6F7420- <1>
  2018 00001A22 70726573656E74206F- <1>
  2019 00001A2B 7220697473206C696D- <1>
  2020 00001A34 697420697320746F6F- <1>
  2021 00001A3D 20736D616C6C2E0A00  <1>
  2022                              <1> 		
  2023 00001A46 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2024 00001A4F 726F74656374696F6E- <1>
  2025 00001A58 2076696F6C6174696F- <1>
  2026 00001A61 6E3A0A              <1>
  2027 00001A64 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2028 00001A6D 746564207468652063- <1>
  2029 00001A76 6F6D70757465722E20- <1>
  2030 00001A7F 537465702061776179- <1>
  2031 00001A88 20736C6F776C792E20- <1>
  2032 00001A91 546865204642492069- <1>
  2033 00001A9A 73206F6E2069747320- <1>
  2034 00001AA3 7761792E0A00        <1>
  2035                              <1> 		
  2036 00001AA9 50616765206661756C- <1> err14	db "Page fault:",10
  2037 00001AB2 743A0A              <1>
  2038 00001AB5 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2039 00001ABE 746861742077617320- <1>
  2040 00001AC7 726571756573746564- <1>
  2041 00001AD0 20776173206E6F7420- <1>
  2042 00001AD9 617661696C61626C65- <1>
  2043 00001AE2 2E0A00              <1>
  2044                              <1> 		
  2045 00001AE5 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2046 00001AEE 666F7220506C616E20- <1>
  2047 00001AF7 523A0A              <1>
  2048 00001AFA 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2049 00001B03 727275707420697320- <1>
  2050 00001B0C 726573657276656420- <1>
  2051 00001B15 666F72207573616765- <1>
  2052 00001B1E 206F6E6C7920627920- <1>
  2053 00001B27 746865206D696C6974- <1>
  2054 00001B30 617279207768656E20- <1>
  2055 00001B39 6974206973206E6563- <1>
  2056 00001B42 6573736172790A      <1>
  2057 00001B49 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  2058 00001B52 746520612066756C6C- <1>
  2059 00001B5B 2D7363616C6520636F- <1>
  2060 00001B64 757020642782746174- <1>
  2061 00001B6D 2E0A00              <1>
  2062                              <1> 		
  2063 00001B70 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2064 00001B79 68656C6C206A757374- <1>
  2065 00001B82 2068617070656E6564- <1>
  2066 00001B8B 3F2049732065766572- <1>
  2067 00001B94 796F6E65206F6B6179- <1>
  2068 00001B9D 3F2048617264206472- <1>
  2069 00001BA6 6976653F2056696465- <1>
  2070 00001BAF 6F20636172643F0A    <1>
  2071 00001BB7 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2072 00001BC0 726520796F75207468- <1>
  2073 00001BC9 6572653F0A00        <1>
  2074                              <1> %else
  2075                              <1> unhand:	
  2076                              <1> 	%assign i 0
  2077                              <1> 	%rep 32
  2078                              <1> 	mov byte [intprob], i
  2079                              <1> 	jmp unhand2
  2080                              <1> 	%assign i i+1
  2081                              <1> 	%endrep
  2082                              <1> unhand2:
  2083                              <1> 	cmp byte [intprob], 3
  2084                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2085                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2086                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2087                              <1> 	mov bl, [intprob]
  2088                              <1> 	jmp exitprog
  2089                              <1> intprob db 0
  2090                              <1> %endif
  2091                                      %include "source/ints.asm"
  2092                              <1> newints:	;for great justice
  2093 00001BCF 80FC00              <1> 	cmp ah, 0
  2094 00001BD2 0F8491000000        <1> 	je near exitprog   ;kills app
  2095 00001BD8 80FC01              <1> 	cmp ah, 1
  2096 00001BDB 0F8410010000        <1> 	je near prntstr  ;print string
  2097 00001BE1 80FC02              <1> 	cmp ah, 2
  2098 00001BE4 0F84AE010000        <1> 	je near readstr	;read string
  2099 00001BEA 80FC03              <1> 	cmp ah, 3
  2100 00001BED 0F84CE010000        <1> 	je near clearscrn	;clear screen
  2101 00001BF3 80FC04              <1> 	cmp ah, 4
  2102 00001BF6 0F8443020000        <1> 	je near prntreadstr	;read and print string
  2103 00001BFC 80FC05              <1> 	cmp ah, 5
  2104 00001BFF 0F8408070000        <1> 	je near readchar	;get char
  2105 00001C05 80FC06              <1> 	cmp ah, 6
  2106 00001C08 0F846F070000        <1> 	je near prntchar	;print char
  2107 00001C0E 80FC07              <1> 	cmp ah, 7
  2108 00001C11 0F848C090000        <1> 	je near openfile	;read file
  2109                              <1> ;	cmp ah, 8
  2110                              <1> ;	je near closefile	;close file
  2111 00001C17 80FC09              <1> 	cmp ah, 9
  2112 00001C1A 0F848D090000        <1> 	je near num2str	;convert number to string
  2113 00001C20 80FC0A              <1> 	cmp ah, 10
  2114 00001C23 0F849C090000        <1> 	je near str2num	;convert string to number
  2115                              <1> %ifdef threads.included
  2116 00001C29 80FC0B              <1> 	cmp ah, 11
  2117 00001C2C 0F849F090000        <1> 	je near forkthread	;create thread
  2118                              <1> %endif
  2119 00001C32 80FC0C              <1> 	cmp ah, 12
  2120 00001C35 0F846D0A0000        <1> 	je near gettime	;get time
  2121 00001C3B 80FC0D              <1> 	cmp ah, 13
  2122 00001C3E 0F84790A0000        <1> 	je near settime	;set time
  2123 00001C44 80FC0E              <1> 	cmp ah, 14
  2124 00001C47 0F84800A0000        <1> 	je near runcmd	;run program
  2125 00001C4D 80FC0F              <1> 	cmp ah, 15
  2126 00001C50 0F848C0A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2127 00001C56 80FC10              <1> 	cmp ah, 16
  2128 00001C59 0F84AE0A0000        <1> 	je near hooksig	;hook code to a signal
  2129                              <1> %ifdef gui.included
  2130 00001C5F 80FC11              <1> 	cmp ah, 17
  2131 00001C62 0F84B50A0000        <1> 	je near guiint	;GUI operations
  2132                              <1> %endif
  2133                              <1> %ifdef sound.included
  2134                              <1> 	cmp ah, 18
  2135                              <1> 	je near soundint	;sound operations
  2136                              <1> %endif
  2137                              <1> %ifdef network.included
  2138                              <1> 	cmp ah, 19
  2139                              <1> 	je near netint	;networking operations
  2140                              <1> %endif
  2141 00001C68 CF                  <1> 	iret
  2142                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2143                              <2> exitprog:
  2144 00001C69 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2145 00001C6D 8ED8                <2> 	mov ds, ax
  2146 00001C6F 8EC0                <2> 	mov es, ax
  2147 00001C71 8EE0                <2> 	mov fs, ax
  2148 00001C73 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2149 00001C77 8EE8                <2> 	mov gs, ax
  2150 00001C79 C705[A2640000]0000- <2> 	mov dword [currentthread], 0
  2151 00001C81 0000                <2>
  2152 00001C83 C705[9D640000]0400- <2> 	mov dword [lastthread], 4
  2153 00001C8B 0000                <2>
  2154 00001C8D C605[A1640000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2155 00001C94 8B25[E09A0300]      <2> 	mov esp, [previousstack] ;and this
  2156 00001C9A 81FB00000000        <2> 	cmp ebx, 0
  2157 00001CA0 0F8501000000        <2> 	jne near .error
  2158 00001CA6 C3                  <2> 	ret
  2159                              <2> .error:
  2160 00001CA7 89D9                <2> 	mov ecx, ebx
  2161 00001CA9 B006                <2> 	mov al, 6
  2162 00001CAB A2[78310000]        <2> 	mov [firsthexshown], al
  2163 00001CB0 51                  <2> 	push ecx
  2164 00001CB1 BE[CC1C0000]        <2> 	mov esi, .msg1
  2165 00001CB6 E855000000          <2> 	call printhighlight
  2166 00001CBB 59                  <2> 	pop ecx
  2167 00001CBC E8CC140000          <2> 	call showhex
  2168 00001CC1 BE[E11C0000]        <2> 	mov esi, .msg2
  2169 00001CC6 E845000000          <2> 	call printhighlight
  2170 00001CCB C3                  <2> 	ret
  2171                              <2> 	
  2172 00001CCC 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2173 00001CD5 7461747573206F6620- <2>
  2174 00001CDE 307800              <2>
  2175 00001CE1 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2176 00001CEA 726E65642E0A00      <2>
  2177                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2178                              <2> prntstr:
  2179 00001CF1 30E4                <2> xor ah, ah
  2180 00001CF3 E82B000000          <2> call printint
  2181 00001CF8 E99FE5FFFF          <2> jmp timerinterrupt
  2182                              <2> 
  2183                              <2> 	printquiet:
  2184 00001CFD 6631C0              <2> 		xor ax, ax
  2185 00001D00 66A3[961D0000]      <2> 		mov [endkeyprint], ax
  2186 00001D06 66BB0700            <2> 		mov bx, 7
  2187 00001D0A E82D000000          <2> 		call printint.b
  2188 00001D0F C3                  <2> 		ret
  2189                              <2> 
  2190                              <2> 	printhighlight:
  2191 00001D10 6631C0              <2> 		xor ax, ax
  2192 00001D13 66BBF000            <2> 		mov bx, 0xF0
  2193 00001D17 E907000000          <2> 		jmp printint
  2194                              <2> 
  2195                              <2>     print:
  2196 00001D1C 6631C0              <2> 		xor ax, ax
  2197 00001D1F 66BB0700            <2> 		mov bx, 7
  2198                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2199 00001D23 56                  <2> 		push esi
  2200 00001D24 66A3[961D0000]      <2> 		mov [endkeyprint], ax
  2201 00001D2A E80D000000          <2> 		call .b
  2202 00001D2F 89F1                <2> 		mov ecx, esi
  2203 00001D31 5F                  <2> 		pop edi
  2204 00001D32 29F9                <2> 		sub ecx, edi
  2205 00001D34 51                  <2> 		push ecx
  2206 00001D35 E8310B0000          <2> 		call termcopy
  2207 00001D3A 59                  <2> 		pop ecx
  2208 00001D3B C3                  <2> 		ret
  2209                              <2> 	.b:	
  2210 00001D3C 53                  <2> 		push ebx
  2211 00001D3D 31C0                <2> 		xor eax, eax
  2212 00001D3F 8A06                <2> 		mov al, [esi]
  2213 00001D41 3CFF                <2> 		cmp al, 0xFF
  2214 00001D43 7438                <2> 		je .doneutf
  2215 00001D45 3CC0                <2> 		cmp al, 0xC0
  2216 00001D47 7234                <2> 		jb .doneutf
  2217 00001D49 3CE0                <2> 		cmp al, 0xE0
  2218 00001D4B 721D                <2> 		jb .two
  2219 00001D4D 46                  <2> 		inc esi
  2220 00001D4E 668B0E              <2> 		mov cx, [esi]
  2221 00001D51 46                  <2> 		inc esi
  2222 00001D52 C0E004              <2> 		shl al, 4
  2223 00001D55 66C1E102            <2> 		shl cx, 2
  2224 00001D59 C0ED02              <2> 		shr ch, 2
  2225 00001D5C 66C1E902            <2> 		shr cx, 2
  2226 00001D60 08C5                <2> 		or ch, al
  2227 00001D62 6689C8              <2> 		mov ax, cx
  2228 00001D65 E913000000          <2> 		jmp .doneutf
  2229                              <2> 	.two:
  2230 00001D6A 8A2E                <2> 		mov ch, [esi]
  2231 00001D6C 46                  <2> 		inc esi
  2232 00001D6D 8A0E                <2> 		mov cl, [esi]
  2233 00001D6F 66C1E102            <2> 		shl cx, 2
  2234 00001D73 C0ED02              <2> 		shr ch, 2
  2235 00001D76 66C1E902            <2> 		shr cx, 2
  2236 00001D7A 6689C8              <2> 		mov ax, cx
  2237                              <2> 	.doneutf:
  2238 00001D7D 5B                  <2> 		pop ebx
  2239 00001D7E 663B05[961D0000]    <2> 		cmp ax, [endkeyprint]
  2240 00001D85 740E                <2> 		je .done
  2241 00001D87 663DFFFE            <2> 		cmp ax, 0xFEFF
  2242 00001D8B 7405                <2> 		je .noprint
  2243 00001D8D E818060000          <2> 		call prcharq
  2244                              <2> 	.noprint:
  2245 00001D92 46                  <2> 		inc esi
  2246 00001D93 EBA7                <2> 		jmp .b
  2247                              <2> 	.done:
  2248 00001D95 C3                  <2> 		ret
  2249                              <2> 
  2250 00001D96 0000                <2> endkeyprint dw 0
  2251                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2252                              <2> readstr:
  2253 00001D98 E805000000          <2> call readint
  2254 00001D9D E9FAE4FFFF          <2> jmp timerinterrupt
  2255                              <2> 
  2256                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2257 00001DA2 89C3                <2> 		mov ebx, eax
  2258                              <2> 	.b:
  2259 00001DA4 53                  <2> 		push ebx
  2260 00001DA5 57                  <2> 		push edi
  2261 00001DA6 56                  <2> 		push esi
  2262 00001DA7 30C0                <2> 		xor al, al
  2263 00001DA9 E86B050000          <2> 		call rdcharint
  2264 00001DAE 5E                  <2> 		pop esi
  2265 00001DAF 8806                <2> 		mov [esi], al
  2266 00001DB1 46                  <2> 		inc esi
  2267 00001DB2 5F                  <2> 		pop edi
  2268 00001DB3 5B                  <2> 		pop ebx
  2269 00001DB4 39FE                <2> 		cmp esi, edi
  2270 00001DB6 7304                <2> 		jae .done
  2271 00001DB8 38D8                <2> 		cmp al, bl
  2272 00001DBA 75E8                <2> 		jne .b
  2273                              <2> 	.done:
  2274 00001DBC 4E                  <2> 		dec esi
  2275 00001DBD C60600              <2> 		mov byte [esi], 0
  2276 00001DC0 C3                  <2> 		ret
  2277                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2278                              <2> clearscrn:
  2279 00001DC1 E805000000          <2> call clear
  2280 00001DC6 E9D1E4FFFF          <2> jmp timerinterrupt
  2281                              <2> %ifdef io.serial
  2282                              <2> clear:
  2283                              <2> 	ret
  2284                              <2> %else
  2285                              <2> clear:
  2286 00001DCB 668B0D[9D250000]    <2> 		mov cx, [charxy]
  2287 00001DD2 BF[76B80300]        <2> 		mov edi, videobuf
  2288 00001DD7 31C0                <2> 		xor eax, eax
  2289 00001DD9 A3[93250000]        <2> 		mov [linebeginpos], eax
  2290 00001DDE A3[97250000]        <2> 		mov [videobufpos], eax
  2291 00001DE3 6631D2              <2> 		xor dx, dx
  2292 00001DE6 66A3[9B250000]      <2> 		mov [charpos], ax
  2293 00001DEC 66B80700            <2> 		mov ax, 7
  2294 00001DF0 C1E010              <2> 		shl eax, 16
  2295                              <2> 	clearb:
  2296 00001DF3 8907                <2> 		mov [edi], eax
  2297 00001DF5 81C704000000        <2> 		add edi, 4
  2298 00001DFB FEC9                <2> 		dec cl
  2299 00001DFD 80F900              <2> 		cmp cl, 0
  2300 00001E00 75F1                <2> 		jne clearb
  2301 00001E02 8A0D[9D250000]      <2> 		mov cl, [charxy]
  2302 00001E08 FECD                <2> 		dec ch
  2303 00001E0A 80FD00              <2> 		cmp ch, 0
  2304 00001E0D 75E4                <2> 		jne clearb
  2305                              <2> 	cleardouble:
  2306 00001E0F BF[BE8D0400]        <2> 		mov edi, videobuf2
  2307 00001E14 668B0D[9D250000]    <2> 		mov cx, [charxy]
  2308 00001E1B 31C0                <2> 		xor eax, eax
  2309                              <2> 	clearc:
  2310 00001E1D 8907                <2> 		mov [edi], eax
  2311 00001E1F 81C704000000        <2> 		add edi, 4
  2312 00001E25 FEC9                <2> 		dec cl
  2313 00001E27 80F900              <2> 		cmp cl, 0
  2314 00001E2A 75F1                <2> 		jne clearc
  2315 00001E2C 8A0D[9D250000]      <2> 		mov cl, [charxy]
  2316 00001E32 FECD                <2> 		dec ch
  2317 00001E34 80FD00              <2> 		cmp ch, 0
  2318 00001E37 75E4                <2> 		jne clearc
  2319 00001E39 E82D0A0000          <2> 		call termcopy
  2320 00001E3E C3                  <2> 		ret
  2321                              <2> %endif
  2322                              <2> 		
  2323                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2324                              <2> prntreadstr:
  2325 00001E3F E80B000000          <2> call rdprint
  2326 00001E44 E953E4FFFF          <2> jmp timerinterrupt
  2327                              <2> 
  2328                              <2> readline:
  2329 00001E49 B00A                <2>   mov al, 10
  2330 00001E4B 66BB0700            <2>   mov bx, 7
  2331                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2332 00001E4F E80F000000          <2> 	call rdprintdos
  2333 00001E54 50                  <2> 	push eax
  2334 00001E55 A0[F8220000]        <2> 	mov al, [endkeyrdpr]
  2335 00001E5A 30E4                <2> 	xor ah, ah
  2336 00001E5C E832050000          <2> 	call prcharint
  2337 00001E61 58                  <2> 	pop eax
  2338 00001E62 C3                  <2> 	ret
  2339                              <2> 
  2340                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2341 00001E63 8935[02230000]      <2> 		mov [buftxtloc], esi
  2342 00001E69 A2[F8220000]        <2> 		mov [endkeyrdpr], al
  2343 00001E6E 66891D[FA220000]    <2> 		mov [modkeyrdpr], bx
  2344 00001E75 8935[FC220000]      <2> 		mov [firstesirdpr], esi
  2345 00001E7B 893D[06230000]      <2> 		mov [endbufferrdpr], edi
  2346 00001E81 8B3D[12630500]      <2> 		mov edi, [commandsentered]
  2347 00001E87 893D[0E630500]      <2> 		mov [commandlistentries], edi
  2348                              <2> 	rdprintb:
  2349 00001E8D 56                  <2> 		push esi
  2350 00001E8E B001                <2> 		mov al, 1
  2351 00001E90 E884040000          <2> 		call rdcharint
  2352 00001E95 8A25[79230000]      <2> 		mov ah, [lastkey + 2]
  2353 00001E9B 88E1                <2> 		mov cl, ah
  2354 00001E9D 5E                  <2> 		pop esi
  2355                              <2> %ifdef io.serial
  2356                              <2> 		cmp ah, 0x41
  2357                              <2> 		je near rdprup
  2358                              <2> 		cmp ah, 0x42
  2359                              <2> 		je near rdprdown
  2360                              <2> 		cmp ah, 0x43
  2361                              <2> 		je near rdprright
  2362                              <2> 		cmp ah, 0x44
  2363                              <2> 		je near rdprleft
  2364                              <2> 		cmp ah, 0x31
  2365                              <2> 		je near rdprhome
  2366                              <2> 		cmp ah, 0x48
  2367                              <2> 		je near rdprhome
  2368                              <2> 		cmp ah, 0x46
  2369                              <2> 		je near rdprend
  2370                              <2> 		cmp ah, 0x33
  2371                              <2> 		je near rdprdel
  2372                              <2> 		cmp ah, 0x34
  2373                              <2> 		je near rdprend
  2374                              <2> %else
  2375 00001E9E 803D[20590000]E0    <2> 		cmp byte [specialkey], 0xE0
  2376 00001EA5 753F                <2> 		jne notspecialrdprnt
  2377 00001EA7 80FC53              <2> 		cmp ah, 0x53
  2378 00001EAA 0F84B1030000        <2> 		je near rdprdel
  2379 00001EB0 80FC47              <2> 		cmp ah, 0x47
  2380 00001EB3 0F847E010000        <2> 		je near rdprhome
  2381 00001EB9 80FC4F              <2> 		cmp ah, 0x4F
  2382 00001EBC 0F8494010000        <2> 		je near rdprend
  2383 00001EC2 80FC50              <2> 		cmp ah, 0x50
  2384 00001EC5 0F8424020000        <2> 		je near rdprdown
  2385 00001ECB 80FC4D              <2> 		cmp ah, 0x4D
  2386 00001ECE 0F84C1010000        <2> 		je near rdprright
  2387 00001ED4 80FC4B              <2> 		cmp ah, 0x4B
  2388 00001ED7 0F8496010000        <2> 		je near rdprleft
  2389 00001EDD 80FC48              <2> 		cmp ah, 0x48
  2390 00001EE0 0F844C020000        <2> 		je near rdprup
  2391                              <2> 	notspecialrdprnt:
  2392                              <2> %endif
  2393 00001EE6 66A1[77230000]      <2> 		mov ax, [lastkey]
  2394 00001EEC 663D0800            <2> 		cmp ax, 8
  2395 00001EF0 0F84A0030000        <2> 		je near rdprbscheck
  2396 00001EF6 663D0000            <2> 		cmp ax, 0
  2397 00001EFA 7491                <2> 		je rdprintb
  2398 00001EFC 80F900              <2> 		cmp cl, 0
  2399 00001EFF 748C                <2> 		je rdprintb
  2400 00001F01 663D8000            <2> 		cmp ax, 0x80
  2401 00001F05 7257                <2> 		jb .normal
  2402 00001F07 663D0008            <2> 		cmp ax, 0x800
  2403 00001F0B 7321                <2> 		jae .three
  2404 00001F0D 46                  <2> 		inc esi
  2405 00001F0E 3B35[06230000]      <2> 		cmp esi, [endbufferrdpr]
  2406 00001F14 0F83DA000000        <2> 		jae near donerdprinc
  2407 00001F1A 66C1E002            <2> 		shl ax, 2
  2408 00001F1E C0E802              <2> 		shr al, 2
  2409 00001F21 0C80                <2> 		or al, 10000000b
  2410 00001F23 80CCC0              <2> 		or ah, 11000000b
  2411 00001F26 8866FF              <2> 		mov [esi - 1], ah
  2412 00001F29 E930000000          <2> 		jmp .normal
  2413                              <2> .three:	
  2414 00001F2E 81C602000000        <2> 		add esi, 2
  2415 00001F34 3B35[06230000]      <2> 		cmp esi, [endbufferrdpr]
  2416 00001F3A 0F83B4000000        <2> 		jae near donerdprinc
  2417 00001F40 88E1                <2> 		mov cl, ah
  2418 00001F42 C0E904              <2> 		shr cl, 4
  2419 00001F45 80C9E0              <2> 		or cl, 11100000b
  2420 00001F48 884EFE              <2> 		mov [esi - 2], cl
  2421 00001F4B 66C1E004            <2> 		shl ax, 4
  2422 00001F4F 66C1E802            <2> 		shr ax, 2
  2423 00001F53 80CC80              <2> 		or ah, 10000000b
  2424 00001F56 C0E802              <2> 		shr al, 2
  2425 00001F59 0C80                <2> 		or al, 10000000b
  2426 00001F5B 8866FF              <2> 		mov [esi - 1], ah
  2427                              <2> .normal:
  2428 00001F5E 8806                <2> 		mov [esi], al
  2429 00001F60 46                  <2> 		inc esi
  2430 00001F61 66A1[77230000]      <2> 		mov ax, [lastkey]
  2431                              <2> 	bscheckequal:
  2432 00001F67 668B1D[FA220000]    <2> 		mov bx, [modkeyrdpr]
  2433 00001F6E 803D[01230000]00    <2> 		cmp byte [txtmask], 0
  2434 00001F75 7407                <2> 		je nomasktxt
  2435 00001F77 30E4                <2> 		xor ah, ah
  2436 00001F79 A0[01230000]        <2> 		mov al, [txtmask]
  2437                              <2> 	nomasktxt:
  2438 00001F7E 56                  <2> 		push esi
  2439 00001F7F 66A3[F6220000]      <2> 		mov [axcache], ax
  2440 00001F85 668B1D[F8220000]    <2> 		mov bx, [endkeyrdpr]
  2441 00001F8C 6639D8              <2> 		cmp ax, bx
  2442 00001F8F 7432                <2> 		je nobackprintbuftxt2
  2443 00001F91 E8FD030000          <2> 		call prcharint
  2444 00001F96 BE[60AD0300]        <2> 		mov esi, buftxt2
  2445 00001F9B E85DFDFFFF          <2> 		call printquiet
  2446 00001FA0 66B82000            <2> 		mov ax, " "
  2447 00001FA4 E801040000          <2> 		call prcharq
  2448 00001FA9 66B80800            <2> 		mov ax, 8
  2449 00001FAD 81FE[60AD0300]      <2> 		cmp esi, buftxt2
  2450 00001FB3 740E                <2> 		je nobackprintbuftxt2
  2451                              <2> 	backprintbuftxt2:
  2452 00001FB5 E8F0030000          <2> 		call prcharq
  2453 00001FBA 4E                  <2> 		dec esi
  2454 00001FBB 81FE[60AD0300]      <2> 		cmp esi, buftxt2
  2455 00001FC1 77F2                <2> 		ja backprintbuftxt2
  2456                              <2> 	nobackprintbuftxt2:
  2457 00001FC3 663D0A00            <2> 		cmp ax, 10
  2458 00001FC7 7405                <2> 		je nonobackprint
  2459 00001FC9 E8C5030000          <2> 		call prcharint
  2460                              <2> 	nonobackprint:
  2461 00001FCE 5E                  <2> 		pop esi
  2462 00001FCF 3B35[06230000]      <2> 		cmp esi, [endbufferrdpr]
  2463 00001FD5 0F8319000000        <2> 		jae near donerdprinc
  2464 00001FDB 66A1[F6220000]      <2> 		mov ax, [axcache]
  2465 00001FE1 8A25[F8220000]      <2> 		mov ah, [endkeyrdpr]
  2466 00001FE7 38E0                <2> 		cmp al, ah
  2467 00001FE9 0F859EFEFFFF        <2> 		jne rdprintb
  2468 00001FEF E901000000          <2> 		jmp donerdprint
  2469                              <2> 	donerdprinc:
  2470 00001FF4 46                  <2> 		inc esi
  2471                              <2> 	donerdprint:
  2472 00001FF5 4E                  <2> 		dec esi
  2473 00001FF6 BF[60AD0300]        <2> 		mov edi, buftxt2
  2474                              <2> 	copylaterstuff:
  2475 00001FFB 8A07                <2> 		mov al, [edi]
  2476 00001FFD 3C00                <2> 		cmp al, 0
  2477 00001FFF 7406                <2> 		je nocopylaterstuff
  2478 00002001 8806                <2> 		mov [esi], al
  2479 00002003 47                  <2> 		inc edi
  2480 00002004 46                  <2> 		inc esi
  2481 00002005 EBF4                <2> 		jmp copylaterstuff
  2482                              <2> 	nocopylaterstuff:
  2483 00002007 C60600              <2> 		mov byte [esi], 0
  2484 0000200A E80B000000          <2> 		call clearbuftxt2
  2485 0000200F 89F1                <2> 		mov ecx, esi
  2486 00002011 8B3D[FC220000]      <2> 		mov edi, [firstesirdpr]
  2487 00002017 29F9                <2> 		sub ecx, edi
  2488 00002019 C3                  <2> 		ret
  2489                              <2> 	
  2490                              <2> 	clearbuftxt2:
  2491 0000201A 30C0                <2> 		xor al, al
  2492 0000201C BF[60AD0300]        <2> 		mov edi, buftxt2
  2493                              <2> 	clearbuftxt2lp:
  2494 00002021 8807                <2> 		mov [edi], al
  2495 00002023 47                  <2> 		inc edi
  2496 00002024 81FF[60B10300]      <2> 		cmp edi, buftxt
  2497 0000202A 75F5                <2> 		jne clearbuftxt2lp
  2498 0000202C C3                  <2> 		ret
  2499                              <2> 	
  2500                              <2> 	rdprintb2:
  2501 0000202D E839080000          <2> 		call termcopy
  2502 00002032 E956FEFFFF          <2> 		jmp rdprintb
  2503                              <2> 	
  2504                              <2> 	rdprhome:
  2505 00002037 3B35[02230000]      <2> 		cmp esi, [buftxtloc]
  2506 0000203D 0F84EAFFFFFF        <2> 		je near rdprintb2
  2507 00002043 BF[60AD0300]        <2> 		mov edi, buftxt2
  2508 00002048 8A07                <2> 		mov al, [edi]
  2509 0000204A E879020000          <2> 		call shiftbuftxt2
  2510 0000204F E856030000          <2> 		call prcharq
  2511 00002054 EBE1                <2> 		jmp rdprhome
  2512                              <2> 		
  2513                              <2> 	rdprend:
  2514 00002056 BF[60AD0300]        <2> 		mov edi, buftxt2
  2515 0000205B 8A07                <2> 		mov al, [edi]
  2516 0000205D 3C00                <2> 		cmp al, 0
  2517 0000205F 0F84C8FFFFFF        <2> 		je near rdprintb2
  2518 00002065 8806                <2> 		mov [esi], al
  2519 00002067 E849000000          <2> 		call shiftbuftxt2lft
  2520 0000206C E839030000          <2> 		call prcharq
  2521 00002071 EBE3                <2> 		jmp rdprend
  2522                              <2> 	
  2523                              <2> 	rdprleft:
  2524 00002073 3B35[02230000]      <2> 		cmp esi, [buftxtloc]
  2525 00002079 0F840EFEFFFF        <2> 		je near rdprintb
  2526 0000207F BF[60AD0300]        <2> 		mov edi, buftxt2
  2527 00002084 8A07                <2> 		mov al, [edi]
  2528 00002086 E83D020000          <2> 		call shiftbuftxt2
  2529 0000208B E803030000          <2> 		call prcharint
  2530 00002090 E9F8FDFFFF          <2> 		jmp rdprintb
  2531                              <2> 		
  2532                              <2> 	rdprright:
  2533 00002095 BF[60AD0300]        <2> 		mov edi, buftxt2
  2534 0000209A 8A07                <2> 		mov al, [edi]
  2535 0000209C 3C00                <2> 		cmp al, 0
  2536 0000209E 0F84E9FDFFFF        <2> 		je near rdprintb
  2537 000020A4 8806                <2> 		mov [esi], al
  2538 000020A6 E80A000000          <2> 		call shiftbuftxt2lft
  2539 000020AB E8E3020000          <2> 		call prcharint
  2540 000020B0 E9D8FDFFFF          <2> 		jmp rdprintb
  2541                              <2> 		
  2542                              <2> 	shiftbuftxt2lft:
  2543 000020B5 55                  <2> 		push ebp
  2544 000020B6 89FD                <2> 		mov ebp, edi
  2545                              <2> 	.lp:
  2546 000020B8 3C00                <2> 		cmp al, 0
  2547 000020BA 7408                <2> 		je noshiftbuftxt2lft
  2548 000020BC 47                  <2> 		inc edi
  2549 000020BD 8A07                <2> 		mov al, [edi]
  2550 000020BF 8847FF              <2> 		mov [edi - 1], al
  2551 000020C2 EBF4                <2> 		jmp .lp
  2552                              <2> 	noshiftbuftxt2lft:
  2553 000020C4 8A4500              <2> 		mov al, [ebp]
  2554 000020C7 5D                  <2> 		pop ebp
  2555 000020C8 3CC0                <2> 		cmp al, 0xC0
  2556 000020CA 7304                <2> 		jae .nofix
  2557 000020CC 3C80                <2> 		cmp al, 0x80
  2558 000020CE 73E5                <2> 		jae shiftbuftxt2lft
  2559                              <2> 	.nofix:
  2560 000020D0 8A06                <2> 		mov al, [esi]
  2561 000020D2 30E4                <2> 		xor ah, ah
  2562 000020D4 46                  <2> 		inc esi
  2563 000020D5 668B1D[FA220000]    <2> 		mov bx, [modkeyrdpr]
  2564 000020DC C3                  <2> 		ret
  2565                              <2> 		
  2566                              <2> 	rdprdownbck:
  2567 000020DD FECC                <2> 		dec ah
  2568 000020DF 8825[00230000]      <2> 		mov [commandedit], ah
  2569 000020E5 E88D000000          <2> 		call rdprbckspc
  2570 000020EA E99EFDFFFF          <2> 		jmp rdprintb
  2571                              <2> 	
  2572                              <2> 	rdprdown:
  2573 000020EF 8A25[00230000]      <2> 		mov ah, [commandedit]
  2574 000020F5 80FC01              <2> 		cmp ah, 1
  2575 000020F8 0F868FFDFFFF        <2> 		jbe near rdprintb
  2576 000020FE 8B3D[12630500]      <2> 		mov edi, [commandsentered]
  2577 00002104 3B3D[0E630500]      <2> 		cmp edi, [commandlistentries]
  2578 0000210A 7618                <2> 		jbe .nofix
  2579 0000210C 8105[0E630500]0200- <2> 		add dword [commandlistentries], 2
  2580 00002114 0000                <2>
  2581 00002116 3B3D[0E630500]      <2> 		cmp edi, [commandlistentries]
  2582 0000211C 7706                <2> 		ja .nofix
  2583 0000211E 893D[0E630500]      <2> 		mov [commandlistentries], edi
  2584                              <2> 	.nofix:
  2585 00002124 80FC02              <2> 		cmp ah, 2
  2586 00002127 74B4                <2> 		je rdprdownbck
  2587 00002129 80EC02              <2> 		sub ah, 2
  2588 0000212C 8825[00230000]      <2> 		mov [commandedit], ah
  2589                              <2> 		
  2590                              <2> 	rdprup:
  2591 00002132 3805[00230000]      <2> 		cmp [commandedit], al
  2592 00002138 0F844FFDFFFF        <2> 		je near rdprintb
  2593 0000213E 813D[0E630500]0000- <2> 		cmp dword [commandlistentries], 0
  2594 00002146 0000                <2>
  2595 00002148 0F843FFDFFFF        <2> 		je near rdprintb
  2596 0000214E FF0D[0E630500]      <2> 		dec dword [commandlistentries]
  2597                              <2> 	.lp:
  2598 00002154 BF[60AD0300]        <2> 		mov edi, buftxt2
  2599 00002159 8A07                <2> 		mov al, [edi]
  2600 0000215B 3C00                <2> 		cmp al, 0
  2601 0000215D 740E                <2> 		je .start
  2602 0000215F 8806                <2> 		mov [esi], al
  2603 00002161 E84FFFFFFF          <2> 		call shiftbuftxt2lft
  2604 00002166 E83F020000          <2> 		call prcharq
  2605 0000216B EBE7                <2> 		jmp .lp
  2606                              <2> 	.start:
  2607 0000216D E805000000          <2> 		call rdprbckspc
  2608 00002172 E948000000          <2> 		jmp getcurrentcommandstr
  2609                              <2> 	rdprbckspc:
  2610 00002177 3B35[02230000]      <2> 		cmp esi, [buftxtloc]
  2611 0000217D 7432                <2> 		je nordprupbck
  2612                              <2> 	rdprupbckspclp:
  2613 0000217F 66B80800            <2> 		mov ax, 8
  2614 00002183 668B1D[FA220000]    <2> 		mov bx, [modkeyrdpr]
  2615 0000218A E81B020000          <2> 		call prcharq
  2616 0000218F 66B82000            <2> 		mov ax, ' '
  2617 00002193 E812020000          <2> 		call prcharq
  2618 00002198 66B80800            <2> 		mov ax, 8
  2619 0000219C E809020000          <2> 		call prcharq
  2620 000021A1 4E                  <2> 		dec esi
  2621 000021A2 3B35[02230000]      <2> 		cmp esi, [buftxtloc]
  2622 000021A8 7402                <2> 		je nordprupbck2
  2623 000021AA EBD3                <2> 		jmp rdprupbckspclp
  2624                              <2> 	nordprupbck2:
  2625 000021AC E8BA060000          <2> 		call termcopy
  2626                              <2> 	nordprupbck:
  2627 000021B1 8B3D[0A630500]      <2> 		mov edi, [commandbufpos]
  2628 000021B7 81C7[16630500]      <2> 		add edi, commandbuf
  2629 000021BD 4F                  <2> 		dec edi
  2630 000021BE C3                  <2> 		ret
  2631                              <2> 	getcurrentcommandstr:
  2632 000021BF 8A25[00230000]      <2> 		mov ah, [commandedit]
  2633 000021C5 FE05[00230000]      <2> 		inc byte [commandedit]
  2634                              <2> 	getccmdlp:
  2635 000021CB 4F                  <2> 		dec edi
  2636 000021CC 8A07                <2> 		mov al, [edi]
  2637 000021CE 81FF[16630500]      <2> 		cmp edi, commandbuf
  2638 000021D4 7231                <2> 		jb getcmdresetcommandbuf
  2639 000021D6 81EF[16630500]      <2> 		sub edi, commandbuf
  2640 000021DC 3B3D[0A630500]      <2> 		cmp edi, [commandbufpos]
  2641 000021E2 0F84A5FCFFFF        <2> 		je near rdprintb
  2642 000021E8 81C7[16630500]      <2> 		add edi, commandbuf
  2643 000021EE 3C00                <2> 		cmp al, 0
  2644 000021F0 75D9                <2> 		jne getccmdlp
  2645 000021F2 FECC                <2> 		dec ah
  2646 000021F4 80FC00              <2> 		cmp ah, 0
  2647 000021F7 77D2                <2> 		ja getccmdlp
  2648 000021F9 47                  <2> 		inc edi
  2649 000021FA 81FF[16730500]      <2> 		cmp edi, commandbufend
  2650 00002200 770D                <2> 		ja fixcmdbufb4morerdpr
  2651 00002202 E915000000          <2> 		jmp morerdprup
  2652                              <2> 	getcmdresetcommandbuf:
  2653 00002207 BF[16730500]        <2> 		mov edi, commandbufend
  2654 0000220C 47                  <2> 		inc edi
  2655 0000220D EBBC                <2> 		jmp getccmdlp
  2656                              <2> 	fixcmdbufb4morerdpr:
  2657 0000220F 4F                  <2> 		dec edi
  2658 00002210 81EF[16730500]      <2> 		sub edi, commandbufend
  2659 00002216 81C7[16630500]      <2> 		add edi, commandbuf
  2660                              <2> 	morerdprup:
  2661 0000221C 8A07                <2> 		mov al, [edi]
  2662 0000221E 47                  <2> 		inc edi
  2663 0000221F 81EF[16630500]      <2> 		sub edi, commandbuf
  2664 00002225 3C00                <2> 		cmp al, 0
  2665 00002227 0F8400FEFFFF        <2> 		je near rdprintb2
  2666 0000222D 3B3D[0A630500]      <2> 		cmp edi, [commandbufpos]
  2667 00002233 0F83F4FDFFFF        <2> 		jae near rdprintb2
  2668 00002239 81C7[16630500]      <2> 		add edi, commandbuf
  2669 0000223F 8806                <2> 		mov [esi], al
  2670 00002241 46                  <2> 		inc esi
  2671 00002242 57                  <2> 		push edi
  2672 00002243 668B1D[FA220000]    <2> 		mov bx, [modkeyrdpr]
  2673 0000224A 30E4                <2> 		xor ah, ah
  2674 0000224C E859010000          <2> 		call prcharq
  2675 00002251 5F                  <2> 		pop edi
  2676 00002252 81FF[16730500]      <2> 		cmp edi, commandbufend
  2677 00002258 76C2                <2> 		jbe morerdprup
  2678 0000225A BF[16630500]        <2> 		mov edi, commandbuf
  2679 0000225F EBBB                <2> 		jmp morerdprup
  2680                              <2> 
  2681                              <2> 	rdprdel:
  2682 00002261 BF[60AD0300]        <2> 		mov edi, buftxt2
  2683 00002266 8A07                <2> 		mov al, [edi]
  2684 00002268 3C00                <2> 		cmp al, 0
  2685 0000226A 0F841DFCFFFF        <2> 		je near rdprintb
  2686 00002270 8806                <2> 		mov [esi], al
  2687 00002272 3C80                <2> 		cmp al, 0x80
  2688 00002274 7216                <2> 		jb .fn
  2689                              <2> 	.lp:
  2690 00002276 46                  <2> 		inc esi
  2691 00002277 47                  <2> 		inc edi
  2692 00002278 8A07                <2> 		mov al, [edi]
  2693 0000227A 3C00                <2> 		cmp al, 0
  2694 0000227C 0F840BFCFFFF        <2> 		je near rdprintb
  2695 00002282 8806                <2> 		mov [esi], al
  2696 00002284 3C80                <2> 		cmp al, 0x80
  2697 00002286 7204                <2> 		jb .fn
  2698 00002288 3CC0                <2> 		cmp al, 0xC0
  2699 0000228A 72EA                <2> 		jb .lp
  2700                              <2> 	.fn:
  2701 0000228C E824FEFFFF          <2> 		call shiftbuftxt2lft
  2702 00002291 E814010000          <2> 		call prcharq
  2703                              <2> 		
  2704                              <2> 	rdprbscheck:
  2705 00002296 3B35[FC220000]      <2> 		cmp esi, [firstesirdpr]
  2706 0000229C 0F86EBFBFFFF        <2> 		jbe near rdprintb
  2707                              <2> 	goodbscheck:
  2708 000022A2 4E                  <2> 		dec esi
  2709 000022A3 8A46FF              <2> 		mov al, [esi - 1]
  2710 000022A6 C60600              <2> 		mov byte [esi], 0
  2711 000022A9 3CC0                <2> 		cmp al, 0xC0
  2712 000022AB 7309                <2> 		jae .onemore
  2713 000022AD 3C80                <2> 		cmp al, 0x80
  2714 000022AF 73F1                <2> 		jae goodbscheck
  2715 000022B1 E904000000          <2> 		jmp .nomore
  2716                              <2> 	.onemore:
  2717 000022B6 4E                  <2> 		dec esi
  2718 000022B7 C60600              <2> 		mov byte [esi], 0		
  2719                              <2> 	.nomore:
  2720 000022BA 668B1D[FA220000]    <2> 		mov bx, [modkeyrdpr]
  2721 000022C1 B008                <2> 		mov al, 8
  2722 000022C3 E99FFCFFFF          <2> 		jmp bscheckequal
  2723                              <2> 		
  2724                              <2> 	shiftbuftxt2:
  2725 000022C8 55                  <2> 		push ebp
  2726 000022C9 89FD                <2> 		mov ebp, edi
  2727                              <2> 	.lp:
  2728 000022CB 3C00                <2> 		cmp al, 0
  2729 000022CD 7409                <2> 		je noshiftbuftxt2
  2730 000022CF 47                  <2> 		inc edi
  2731 000022D0 8A27                <2> 		mov ah, [edi]
  2732 000022D2 8807                <2> 		mov [edi], al
  2733 000022D4 88E0                <2> 		mov al, ah
  2734 000022D6 EBF3                <2> 		jmp .lp
  2735                              <2> 	noshiftbuftxt2:
  2736 000022D8 8A4500              <2> 		mov al, [ebp]
  2737 000022DB 5D                  <2> 		pop ebp
  2738 000022DC 3CC0                <2> 		cmp al, 0xC0
  2739 000022DE 7304                <2> 		jae .nofix
  2740 000022E0 3C80                <2> 		cmp al, 0x80
  2741 000022E2 73E4                <2> 		jae shiftbuftxt2
  2742                              <2> 	.nofix:
  2743 000022E4 BF[60AD0300]        <2> 		mov edi, buftxt2
  2744 000022E9 4E                  <2> 		dec esi
  2745 000022EA 8A06                <2> 		mov al, [esi]
  2746 000022EC 8807                <2> 		mov [edi], al
  2747 000022EE C60600              <2> 		mov byte [esi], 0
  2748 000022F1 66B80800            <2> 		mov ax, 8
  2749 000022F5 C3                  <2> 		ret
  2750                              <2> 		
  2751 000022F6 0000                <2> axcache dw 0
  2752 000022F8 0000                <2> endkeyrdpr dw 0
  2753 000022FA 0000                <2> modkeyrdpr dw 0
  2754 000022FC 00000000            <2> firstesirdpr dd 0
  2755 00002300 00                  <2> commandedit db 0
  2756 00002301 00                  <2> txtmask db 0
  2757 00002302 00000000            <2> buftxtloc dd 0
  2758 00002306 00000000            <2> endbufferrdpr dd 0
  2759 0000230A 082000              <2> backcursor db 8," ",0
  2760                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2761                              <2> readchar:
  2762 0000230D E807000000          <2> 	call rdcharint
  2763 00002312 E985DFFFFF          <2> 	jmp timerinterrupt
  2764                              <2> getchar:
  2765 00002317 30C0                <2> 	xor al, al
  2766                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2767 00002319 66C705[7B230000]01- <2> 		mov word [trans], 1
  2768 00002321 00                  <2>
  2769 00002322 3C00                <2> 		cmp al, 0
  2770 00002324 7509                <2> 		jne transcheck
  2771 00002326 66C705[7B230000]00- <2> 		mov word [trans], 0
  2772 0000232E 00                  <2>
  2773                              <2> 	transcheck:
  2774                              <2> 	%ifdef io.serial
  2775                              <2> 		call serial.receive
  2776                              <2> 		xor ah, ah
  2777                              <2> 		cmp al, 13
  2778                              <2> 		je rdenter
  2779                              <2> 	%else
  2780 0000232F E80E360000          <2> 		call getkey
  2781 00002334 66A1[79230000]      <2> 		mov ax, [lastkey + 2]
  2782 0000233A 663D1C00            <2> 		cmp ax, 0x1C
  2783 0000233E 7425                <2> 		je rdenter
  2784                              <2> 	%endif
  2785 00002340 66A1[77230000]      <2> 		mov ax, [lastkey]
  2786 00002346 668B1D[7B230000]    <2> 		mov bx, [trans]
  2787 0000234D 803D[20590000]E0    <2> 		cmp byte [specialkey], 0xE0
  2788 00002354 7500                <2> 		jne nospecialtrans
  2789                              <2> 	nospecialtrans:
  2790 00002356 6609C3              <2> 		or bx, ax
  2791 00002359 6681FB0000          <2> 		cmp bx, 0
  2792 0000235E 74CF                <2> 		je transcheck
  2793 00002360 E90C000000          <2> 		jmp rdend
  2794                              <2> 	rdenter:
  2795 00002365 C1E010              <2> 		shl eax, 16
  2796 00002368 66B80A00            <2> 		mov ax, 10
  2797 0000236C A3[77230000]        <2> 		mov [lastkey], eax
  2798                              <2> 	rdend:
  2799 00002371 A1[77230000]        <2> 		mov eax, [lastkey]
  2800 00002376 C3                  <2> 		ret
  2801                              <2> 		
  2802 00002377 00000000            <2> lastkey dd 0
  2803 0000237B 0000                <2> trans dw 0
  2804                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2805                              <2> prntchar:
  2806 0000237D 30E4                <2> 	xor ah, ah ;this kills unicode from the outside unfortunately
  2807                              <2> %ifdef io.serial
  2808                              <2> 	call prcharint
  2809                              <2> 	jmp timerinterrupt
  2810                              <2> prcharint:	
  2811                              <2> prcharq:
  2812                              <2> 	call serial.send
  2813                              <2> 	ret
  2814                              <2> %else
  2815 0000237F 38FB                <2> cmp bl, bh
  2816 00002381 740A                <2> je prchar.notimer
  2817 00002383 E80B000000          <2> call prcharint
  2818 00002388 E90FDFFFFF          <2> jmp timerinterrupt
  2819                              <2> prchar.notimer:
  2820 0000238D E818000000          <2> 	call prcharq
  2821 00002392 CF                  <2> 	iret
  2822                              <2> 	
  2823                              <2> prcharint:	;print char, char in ax, modifier in bx, if ecx is eax then termcopy will not happen, will run termcopy if called as is
  2824 00002393 663DFFFE            <2> 	cmp ax, 0xFEFF
  2825 00002397 740E                <2> 	je .ret
  2826 00002399 39C1                <2> 	cmp ecx, eax
  2827 0000239B 740D                <2> 	je prcharq
  2828 0000239D E808000000          <2> 	call prcharq
  2829 000023A2 E8C4040000          <2> 	call termcopy
  2830                              <2> .ret:
  2831 000023A7 C3                  <2> 	ret
  2832 000023A8 00                  <2> termguion db 0
  2833 000023A9 00                  <2> termcopyon db 0
  2834                              <2> prcharq:
  2835 000023AA C1E310              <2> 	shl ebx, 16
  2836 000023AD 6689C3              <2> 	mov bx, ax
  2837 000023B0 89D8                <2> 	mov eax, ebx
  2838 000023B2 A3[9F250000]        <2> 	mov [charbuf], eax
  2839 000023B7 8B1D[97250000]      <2> 	mov ebx, [videobufpos]
  2840 000023BD BF[76B80300]        <2> 	mov edi, videobuf
  2841 000023C2 01DF                <2> 	add edi, ebx
  2842 000023C4 A1[76280000]        <2> 	mov eax, [removedvideo]
  2843 000023C9 8907                <2> 	mov [edi], eax
  2844 000023CB A1[9F250000]        <2> 	mov eax, [charbuf]
  2845 000023D0 31D2                <2> 	xor edx, edx
  2846 000023D2 668B15[9B250000]    <2> 	mov dx, [charpos]
  2847 000023D9 31C9                <2> 	xor ecx, ecx
  2848 000023DB 668B0D[9D250000]    <2> 	mov cx, [charxy]
  2849 000023E2 663D0900            <2> 	cmp ax, 9
  2850 000023E6 0F8479000000        <2> 	je near prtab
  2851 000023EC 663D0D00            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2852 000023F0 0F849C000000        <2> 	je near prcr
  2853 000023F6 663D0A00            <2> 	cmp ax, 10
  2854 000023FA 0F84E5000000        <2> 	je near prnlcr
  2855 00002400 663D0800            <2> 	cmp ax, 8
  2856 00002404 0F8499000000        <2> 	je near prbs
  2857 0000240A 663DFF00            <2> 	cmp ax, 255		;null character
  2858 0000240E 0F8424000000        <2> 	je near donescr
  2859 00002414 663D0030            <2> 	cmp ax, (fontend - fonts)/16
  2860 00002418 0F8341000000        <2> 	jae near prnofont
  2861                              <2> donepr:
  2862 0000241E 8907                <2> 	mov [edi], eax
  2863 00002420 81C704000000        <2> 	add edi, 4
  2864 00002426 FEC2                <2> 	inc dl
  2865                              <2> donecrnl:
  2866 00002428 38CA                <2> 	cmp dl, cl
  2867 0000242A 0F83D9000000        <2> 	jae near preol
  2868                              <2> doneeol:
  2869 00002430 38EE                <2> 	cmp dh, ch
  2870 00002432 0F83EE000000        <2> 	jae near prscr	
  2871                              <2> donescr:
  2872 00002438 89FB                <2> 	mov ebx, edi
  2873 0000243A 8B07                <2> 	mov eax, [edi]
  2874 0000243C A3[76280000]        <2> 	mov [removedvideo], eax
  2875 00002441 81EB[76B80300]      <2> 	sub ebx, videobuf
  2876 00002447 891D[97250000]      <2> 	mov [videobufpos], ebx
  2877 0000244D 668915[9B250000]    <2> 	mov [charpos], dx
  2878 00002454 A1[9F250000]        <2> 	mov eax, [charbuf]
  2879 00002459 89C3                <2> 	mov ebx, eax
  2880 0000245B C1EB10              <2> 	shr ebx, 16
  2881 0000245E C3                  <2> 	ret
  2882                              <2> 	
  2883                              <2> 	prnofont:
  2884 0000245F 66B80200            <2> 		mov ax, 2
  2885 00002463 EBB9                <2> 		jmp donepr
  2886                              <2> 	prtab:
  2887 00002465 8B1D[93250000]      <2> 		mov ebx, [linebeginpos]
  2888 0000246B 81EF[76B80300]      <2> 		sub edi, videobuf
  2889 00002471 29DF                <2> 		sub edi, ebx
  2890 00002473 C1EF05              <2> 		shr edi, 5
  2891 00002476 C1E705              <2> 		shl edi, 5
  2892 00002479 81C720000000        <2> 		add edi, 32
  2893 0000247F C0EA03              <2> 		shr dl, 3
  2894 00002482 C0E203              <2> 		shl dl, 3
  2895 00002485 80C208              <2> 		add dl, 8
  2896 00002488 81C7[76B80300]      <2> 		add edi, videobuf
  2897 0000248E 01DF                <2> 		add edi, ebx
  2898 00002490 EB96                <2> 		jmp donecrnl
  2899                              <2> 	
  2900                              <2> 	prcr:
  2901 00002492 30D2                <2> 		xor dl, dl
  2902 00002494 BF[76B80300]        <2> 		mov edi, videobuf
  2903 00002499 8B1D[93250000]      <2> 		mov ebx, [linebeginpos]
  2904 0000249F 01DF                <2> 		add edi, ebx
  2905 000024A1 EB85                <2> 		jmp donecrnl
  2906                              <2> 			
  2907                              <2> 	prbs:
  2908 000024A3 8B1D[93250000]      <2> 		mov ebx, [linebeginpos]
  2909 000024A9 80FA00              <2> 		cmp dl, 0
  2910 000024AC 7415                <2> 		je prbackline
  2911                              <2> 	prnobmr:
  2912 000024AE 891D[93250000]      <2> 		mov [linebeginpos], ebx
  2913 000024B4 FECA                <2> 		dec dl
  2914 000024B6 31C0                <2> 		xor eax, eax
  2915 000024B8 81EF04000000        <2> 		sub edi, 4
  2916 000024BE E965FFFFFF          <2> 		jmp donecrnl
  2917                              <2> 	prbackline:
  2918 000024C3 6631DB              <2> 		xor bx, bx
  2919 000024C6 88CA                <2> 		mov dl, cl
  2920 000024C8 80FE00              <2> 		cmp dh, 0
  2921 000024CB 74E1                <2> 		je prnobmr
  2922 000024CD 8B1D[93250000]      <2> 		mov ebx, [linebeginpos]
  2923 000024D3 6651                <2> 		push cx
  2924 000024D5 31C9                <2> 		xor ecx, ecx
  2925 000024D7 8A0C24              <2> 		mov cl, [esp]
  2926 000024DA C1E102              <2> 		shl ecx, 2
  2927 000024DD 29CB                <2> 		sub ebx, ecx
  2928 000024DF 6659                <2> 		pop cx
  2929 000024E1 FECE                <2> 		dec dh
  2930 000024E3 EBC9                <2> 		jmp prnobmr
  2931                              <2> 		
  2932                              <2> 	prnlcr:
  2933 000024E5 FEC6                <2> 		inc dh
  2934 000024E7 31DB                <2> 		xor ebx, ebx
  2935 000024E9 30D2                <2> 		xor dl, dl
  2936 000024EB 88CB                <2> 		mov bl, cl
  2937 000024ED 66C1E302            <2> 		shl bx, 2
  2938 000024F1 BF[76B80300]        <2> 		mov edi, videobuf
  2939 000024F6 031D[93250000]      <2> 		add ebx, [linebeginpos]
  2940 000024FC 891D[93250000]      <2> 		mov [linebeginpos], ebx
  2941 00002502 01DF                <2> 		add edi, ebx
  2942 00002504 E91FFFFFFF          <2> 		jmp donecrnl
  2943                              <2> 		
  2944                              <2> 	preol:
  2945 00002509 30D2                <2> 		xor dl, dl
  2946 0000250B FEC6                <2> 		inc dh
  2947 0000250D 31DB                <2> 		xor ebx, ebx
  2948 0000250F 88CB                <2> 		mov bl, cl
  2949 00002511 66C1E302            <2> 		shl bx, 2
  2950 00002515 031D[93250000]      <2> 		add ebx, [linebeginpos]
  2951 0000251B 891D[93250000]      <2> 		mov [linebeginpos], ebx
  2952 00002521 E90AFFFFFF          <2> 		jmp doneeol
  2953                              <2> 	prscr:
  2954 00002526 FECE                <2> 		dec dh
  2955 00002528 BF[76B80300]        <2> 		mov edi, videobuf
  2956 0000252D 31DB                <2> 		xor ebx, ebx
  2957 0000252F 88CB                <2> 		mov bl, cl
  2958 00002531 66C1E302            <2> 		shl bx, 2
  2959 00002535 01FB                <2> 		add ebx, edi
  2960                              <2> 	intscrollloop:
  2961 00002537 8B03                <2> 		mov eax, [ebx]
  2962 00002539 8907                <2> 		mov [edi], eax
  2963 0000253B 81C704000000        <2> 		add edi, 4
  2964 00002541 81C304000000        <2> 		add ebx, 4
  2965 00002547 FEC9                <2> 		dec cl
  2966 00002549 80F900              <2> 		cmp cl, 0
  2967 0000254C 75E9                <2> 		jne intscrollloop
  2968 0000254E 8A0D[9D250000]      <2> 		mov cl, [charxy]
  2969 00002554 FECD                <2> 		dec ch
  2970 00002556 80FD01              <2> 		cmp ch, 1
  2971 00002559 77DC                <2> 		ja intscrollloop
  2972 0000255B 31C0                <2> 		xor eax, eax
  2973 0000255D 81EF[76B80300]      <2> 		sub edi, videobuf
  2974 00002563 893D[93250000]      <2> 		mov [linebeginpos], edi
  2975 00002569 81C7[76B80300]      <2> 		add edi, videobuf
  2976 0000256F 89FB                <2> 		mov ebx, edi
  2977                              <2> 	intloopclear:
  2978 00002571 8903                <2> 		mov [ebx], eax
  2979 00002573 81C304000000        <2> 		add ebx, 4
  2980 00002579 FEC9                <2> 		dec cl
  2981 0000257B 80F900              <2> 		cmp cl, 0
  2982 0000257E 75F1                <2> 		jne intloopclear
  2983 00002580 FECD                <2> 		dec ch
  2984 00002582 80FD00              <2> 		cmp ch, 0
  2985 00002585 75EA                <2> 		jne intloopclear
  2986 00002587 668B0D[9D250000]    <2> 		mov cx, [charxy]
  2987 0000258E E9A5FEFFFF          <2> 		jmp donescr
  2988                              <2> 		
  2989 00002593 00000000            <2> linebeginpos dd 0
  2990 00002597 00000000            <2> videobufpos: dd 0
  2991 0000259B 0000                <2> charpos db 0,0
  2992 0000259D 501E                <2> charxy db 80,30
  2993 0000259F 00000000            <2> charbuf dd 0
  2994                              <2> %endif
  2995                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2996                              <2> openfile:
  2997 000025A3 E83D3D0000          <2> 	call loadfile
  2998 000025A8 E9EFDCFFFF          <2> 	jmp timerinterrupt
  2999                              <1> 	%include 'source/interrupts/9_num2str.asm'
  3000                              <2> num2str:
  3001 000025AD 3C00                <2> 	cmp al, 0
  3002 000025AF 750A                <2> 	jne num2strb
  3003 000025B1 E8A10C0000          <2> 	call showdec
  3004 000025B6 E9E1DCFFFF          <2> 	jmp timerinterrupt
  3005                              <2> num2strb:
  3006 000025BB E8CD0B0000          <2> 	call showhex
  3007 000025C0 E9D7DCFFFF          <2> 	jmp timerinterrupt
  3008                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3009                              <2> str2num:
  3010 000025C5 89F7                <2> 	mov edi, esi
  3011 000025C7 E86D0D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3012 000025CC E9CBDCFFFF          <2> 	jmp timerinterrupt
  3013                              <2> 	
  3014                              <1> %ifdef threads.included
  3015                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3016                              <2> forkthread:
  3017                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  3018                              <2> 			;returns the PID of the new fork in ebx
  3019                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  3020 000025D1 FA                  <2> 	cli
  3021 000025D2 60                  <2> 	pushad
  3022 000025D3 8925[A0260000]      <2> 	mov [.espold], esp
  3023 000025D9 C605[A1640000]01    <2> 	mov byte [threadson], 1
  3024 000025E0 8B1D[A2640000]      <2> 	mov ebx, [currentthread]
  3025 000025E6 C1E302              <2> 	shl ebx, 2
  3026 000025E9 89A3[16730500]      <2> 	mov [threadlist + ebx], esp
  3027 000025EF C1EB02              <2> 	shr ebx, 2
  3028 000025F2 81FB00000000        <2> 	cmp ebx, 0
  3029 000025F8 750C                <2> 	jne .simplestack
  3030 000025FA BB[7C960300]        <2> 	mov ebx, stackend
  3031 000025FF 29E3                <2> 	sub ebx, esp
  3032 00002601 E90B000000          <2> 	jmp .stackcalcdone
  3033                              <2> .simplestack:
  3034 00002606 C1E30A              <2> 	shl ebx, 10
  3035 00002609 81C3[16870500]      <2> 	add ebx, stack1
  3036 0000260F 29E3                <2> 	sub ebx, esp
  3037                              <2> .stackcalcdone:
  3038 00002611 29DC                <2> 	sub esp, ebx
  3039 00002613 81C4[16870500]      <2> 	add esp, stack1
  3040 00002619 8B1D[9D640000]      <2> 	mov ebx, [lastthread]
  3041 0000261F C1E308              <2> 	shl ebx, 8
  3042 00002622 01DC                <2> 	add esp, ebx
  3043 00002624 891D[A4260000]      <2> 	mov [.stackend], ebx
  3044                              <2> 
  3045 0000262A 89E5                <2> 	mov ebp, esp
  3046 0000262C 8B25[A0260000]      <2> 	mov esp, [.espold]
  3047                              <2> 
  3048 00002632 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3049 00002635 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3050                              <2> 
  3051 00002639 31DB                <2> 	xor ebx, ebx
  3052                              <2> .stackcopy:
  3053 0000263B 668B041C            <2> 	mov ax, [esp + ebx]
  3054 0000263F 6689441D00          <2> 	mov [ebp + ebx], ax
  3055 00002644 81C302000000        <2> 	add ebx, 2
  3056 0000264A 3B1D[A4260000]      <2> 	cmp ebx, [.stackend]
  3057 00002650 72E9                <2> 	jb .stackcopy
  3058                              <2> 
  3059 00002652 31C0                <2> 	xor eax, eax
  3060 00002654 668CC8              <2> 	mov ax, cs
  3061 00002657 89C2                <2> 	mov edx, eax
  3062 00002659 8B4C2428            <2> 	mov ecx, [esp + 40]
  3063 0000265D 81C900020000        <2> 	or ecx, 0x200
  3064                              <2> 	
  3065 00002663 81FE00000000        <2> 	cmp esi, 0
  3066 00002669 7504                <2> 	jne .nochangestack
  3067 0000266B 8B742420            <2> 	mov esi, [esp + 32]
  3068                              <2> .nochangestack:
  3069 0000266F 89F0                <2> 	mov eax, esi
  3070 00002671 89EC                <2> 	mov esp, ebp
  3071                              <2> 
  3072 00002673 89442420            <2> 	mov [esp + 32], eax
  3073 00002677 89542424            <2> 	mov [esp + 36], edx
  3074 0000267B 894C2428            <2> 	mov [esp + 40], ecx
  3075                              <2> 
  3076 0000267F 8B1D[9D640000]      <2> 	mov ebx, [lastthread]
  3077 00002685 89A3[16730500]      <2> 	mov [threadlist + ebx], esp
  3078 0000268B 81C304000000        <2> 	add ebx, 4
  3079 00002691 891D[9D640000]      <2> 	mov [lastthread], ebx
  3080 00002697 8B25[A0260000]      <2> 	mov esp, [.espold]
  3081 0000269D 61                  <2> 	popad
  3082 0000269E FB                  <2> 	sti
  3083 0000269F CF                  <2> 	iret
  3084                              <2> 
  3085 000026A0 00000000            <2> .espold dd 0
  3086 000026A4 00000000            <2> .stackend dd 0
  3087                              <1> %endif
  3088                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3089                              <2> gettime:
  3090 000026A8 A1[54020000]        <2> 	mov eax, [timeseconds]
  3091 000026AD 8B1D[58020000]      <2> 	mov ebx, [timenanoseconds]
  3092 000026B3 89D9                <2> 	mov ecx, ebx
  3093 000026B5 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3094 000026B8 E9DFDBFFFF          <2> 	jmp timerinterrupt
  3095                              <1> 	%include 'source/interrupts/13_settime.asm'
  3096                              <2> settime:
  3097 000026BD A3[54020000]        <2> 	mov [timeseconds], eax
  3098 000026C2 891D[58020000]      <2> 	mov [timenanoseconds], ebx
  3099 000026C8 E9CFDBFFFF          <2> 	jmp timerinterrupt
  3100                              <2> 	
  3101                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3102                              <2> runcmd:
  3103 000026CD BF[60B10300]        <2> 	mov edi, buftxt
  3104                              <2> cpcmd:
  3105 000026D2 8A06                <2> 	mov al, [esi]
  3106 000026D4 8807                <2> 	mov [edi], al
  3107 000026D6 46                  <2> 	inc esi
  3108 000026D7 47                  <2> 	inc edi
  3109 000026D8 3C00                <2> 	cmp al, 0
  3110 000026DA 75F6                <2> 	jne cpcmd
  3111 000026DC E8AF070000          <2> 	call run
  3112 000026E1 CF                  <2> 	iret
  3113                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3114                              <2> proginfo:
  3115                              <2> 	;mov ebx, variables
  3116 000026E2 8B35[662F0000]      <2> 	mov esi, [currentcommandloc]
  3117 000026E8 89F7                <2> 	mov edi, esi
  3118 000026EA 31C9                <2> 	xor ecx, ecx
  3119                              <2> getcommandzeroes:
  3120 000026EC 8A07                <2> 	mov al, [edi]
  3121 000026EE 47                  <2> 	inc edi
  3122 000026EF 3C3B                <2> 	cmp al, ';'
  3123 000026F1 740B                <2> 	je nomorezeroes
  3124 000026F3 3C00                <2> 	cmp al, 0
  3125 000026F5 7407                <2> 	je nomorezeroes
  3126 000026F7 3C20                <2> 	cmp al, ' '
  3127 000026F9 75F1                <2> 	jne getcommandzeroes
  3128 000026FB 41                  <2> 	inc ecx
  3129 000026FC EBEE                <2> 	jmp getcommandzeroes
  3130                              <2> nomorezeroes:
  3131 000026FE 41                  <2> 	inc ecx
  3132 000026FF 4F                  <2> 	dec edi
  3133 00002700 8B1D[EC9C0300]      <2> 	mov ebx, [uid]
  3134 00002706 8B15[A2640000]      <2> 	mov edx, [currentthread]
  3135 0000270C CF                  <2> 	iret
  3136                              <2> 	
  3137                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3138                              <2> hooksig: ;hook code in ESI to signal in AL
  3139 0000270D 3C00                <2> 	cmp al, 0
  3140 0000270F 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3141                              <2> ;	xor ebx, ebx
  3142                              <2> ;	mov bl, al
  3143                              <2> ;	shl bl, 2
  3144 00002711 BF[DC960300]        <2> 	mov edi, sigtable
  3145 00002716 8937                <2> 	mov [edi], esi
  3146                              <2> .quit:
  3147 00002718 E97FDBFFFF          <2> 	jmp timerinterrupt
  3148                              <1> %ifdef gui.included
  3149                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3150                              <2> guiint:
  3151 0000271D 3CFD                <2> 	cmp al, 253
  3152 0000271F 0F8473000000        <2> 	je near .getinfo
  3153 00002725 803D[6A820000]01    <2> 	cmp byte [guion], 1
  3154 0000272C 0F8550000000        <2> 	jne near .nogui
  3155 00002732 3C00                <2> 	cmp al, 0
  3156 00002734 0F844D000000        <2> 	je near .clear
  3157 0000273A 3C01                <2> 	cmp al, 1
  3158 0000273C 0F84A8000000        <2> 	je near .putpixel
  3159 00002742 3C02                <2> 	cmp al, 2
  3160 00002744 0F84AD000000        <2> 	je near .drawtext
  3161 0000274A 3C03                <2> 	cmp al, 3
  3162 0000274C 0F84C0000000        <2> 	je near .drawline
  3163 00002752 3C04                <2> 	cmp al, 4
  3164 00002754 0F84CB000000        <2> 	je near .drawcircle
  3165 0000275A 3C05                <2> 	cmp al, 5
  3166 0000275C 0F84D3000000        <2> 	je near .fillcircle
  3167 00002762 3C06                <2> 	cmp al, 6
  3168 00002764 0F84DB000000        <2> 	je near .drawsquare
  3169 0000276A 3C07                <2> 	cmp al, 7
  3170 0000276C 0F84E6000000        <2> 	je near .fillsquare
  3171 00002772 3CFE                <2> 	cmp al, 254
  3172 00002774 0F8446000000        <2> 	je near .setinfo
  3173 0000277A 3CFF                <2> 	cmp al, 255
  3174 0000277C 0F8443000000        <2> 	je near .reset
  3175                              <2> .nogui:
  3176 00002782 E915DBFFFF          <2> 	jmp timerinterrupt
  3177                              <2> 
  3178                              <2> .clear:		;color in bx
  3179 00002787 66891D[876B0000]    <2> 	mov [background], bx
  3180                              <2> %ifdef gui.background
  3181                              <2> 	mov ebx, [backgroundimage]
  3182                              <2> 	cmp ebx, 0
  3183                              <2> 	je .clearit
  3184                              <2> 	mov dword [backgroundimage], 0
  3185                              <2> 	mov [.bgi], ebx
  3186                              <2> .clearit:
  3187                              <2> %endif
  3188 0000278E E8A8430000          <2> 	call guiclear
  3189 00002793 E904DBFFFF          <2> 	jmp timerinterrupt
  3190                              <2> 	
  3191                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3192 00002798 31DB                <2> 	xor ebx, ebx
  3193 0000279A 31C9                <2> 	xor ecx, ecx
  3194 0000279C 31D2                <2> 	xor edx, edx
  3195 0000279E 381D[6A820000]      <2> 	cmp [guion], bl
  3196 000027A4 74DC                <2> 	je .nogui
  3197 000027A6 668B1D[876B0000]    <2> 	mov bx, [background]
  3198 000027AD 668B15[76540000]    <2> 	mov dx, [resolutionx]
  3199 000027B4 668B0D[78540000]    <2> 	mov cx, [resolutiony]
  3200 000027BB E9DCDAFFFF          <2> 	jmp timerinterrupt
  3201                              <2> 	
  3202                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3203 000027C0 E9D7DAFFFF          <2> 	jmp timerinterrupt
  3204                              <2> .reset:		;resets the screen to the original settings
  3205 000027C5 66BBCF7B            <2> 	mov bx, background.original
  3206 000027C9 66891D[876B0000]    <2> 	mov [background], bx
  3207 000027D0 66BBFFFF            <2> 	mov bx, 0xFFFF
  3208 000027D4 66891D[44720000]    <2> 	mov [colorfont2], bx
  3209                              <2> %ifdef gui.background
  3210                              <2> 	mov ebx, [backgroundimage]
  3211                              <2> 	cmp ebx, 0
  3212                              <2> 	jne .resetit
  3213                              <2> 	mov ebx, [.bgi]
  3214                              <2> 	mov [backgroundimage], ebx
  3215                              <2> .resetit:
  3216                              <2> %endif
  3217 000027DB E85B430000          <2> 	call guiclear
  3218 000027E0 E8A6430000          <2> 	call reloadallgraphics
  3219 000027E5 E9B2DAFFFF          <2> 	jmp timerinterrupt
  3220                              <2> 
  3221                              <2> %ifdef gui.background
  3222                              <2> 	.bgi dd 0
  3223                              <2> %endif
  3224                              <2> 	
  3225                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3226 000027EA 6689DE              <2> 	mov si, bx
  3227 000027ED E8A8590000          <2> 	call putpixel
  3228 000027F2 E9A5DAFFFF          <2> 	jmp timerinterrupt
  3229                              <2> 
  3230                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3231 000027F7 66D1E2              <2> 	shl dx, 1
  3232 000027FA 66891D[44720000]    <2> 	mov [colorfont2], bx
  3233 00002801 66893D[876B0000]    <2> 	mov [background], di
  3234 00002808 E8CF490000          <2> 	call showstring2
  3235 0000280D E98ADAFFFF          <2> 	jmp timerinterrupt
  3236                              <2> 
  3237                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3238 00002812 6689F0              <2> 	mov ax, si
  3239 00002815 6689DE              <2> 	mov si, bx
  3240 00002818 6689FB              <2> 	mov bx, di
  3241 0000281B E8EF410000          <2> 	call drawline
  3242 00002820 E977DAFFFF          <2> 	jmp timerinterrupt
  3243                              <2> 
  3244                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3245 00002825 6689F0              <2> 	mov ax, si
  3246 00002828 6689DE              <2> 	mov si, bx
  3247 0000282B E8683D0000          <2> 	call drawcircle
  3248 00002830 E967DAFFFF          <2> 	jmp timerinterrupt
  3249                              <2> 
  3250                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3251 00002835 6689F0              <2> 	mov ax, si
  3252 00002838 6689DE              <2> 	mov si, bx
  3253 0000283B E86A3E0000          <2> 	call fillcircle
  3254 00002840 E957DAFFFF          <2> 	jmp timerinterrupt
  3255                              <2> 	
  3256                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3257 00002845 6689F0              <2> 	mov ax, si
  3258 00002848 6689DE              <2> 	mov si, bx
  3259 0000284B 6689FB              <2> 	mov bx, di
  3260 0000284E E808440000          <2> 	call drawsquare
  3261 00002853 E944DAFFFF          <2> 	jmp timerinterrupt
  3262                              <2> 
  3263                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3264 00002858 6689F0              <2> 	mov ax, si
  3265 0000285B 6689DE              <2> 	mov si, bx
  3266 0000285E 6689FB              <2> 	mov bx, di
  3267 00002861 E86A440000          <2> 	call fillsquare
  3268 00002866 E931DAFFFF          <2> 	jmp timerinterrupt
  3269                              <1> %endif
  3270                              <1> %ifdef sound.included
  3271                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3272                              <1> %endif
  3273                              <1> %ifdef network.included
  3274                              <1> 	%include 'source/interrupts/19_netint.asm'
  3275                              <1> %endif
  3276                              <1> 
  3277                              <1> termcopy:
  3278                              <1> %ifdef io.serial
  3279                              <1> 	ret
  3280                              <1> %else
  3281                              <1> %ifdef terminal.vsync
  3282                              <1> 	mov byte [termcopyneeded], 1
  3283                              <1> 	ret
  3284                              <1> %else
  3285 0000286B E80A000000          <1> 	call newtermcopy
  3286 00002870 C3                  <1> 	ret
  3287                              <1> %endif
  3288 00002871 00                  <1> 	termcopyneeded db 0
  3289 00002872 00000000            <1> 	termcursorpos dd 0
  3290 00002876 00000000            <1> 	removedvideo dd 0
  3291                              <1> newtermcopy:
  3292 0000287A 60                  <1> 	pusha
  3293 0000287B BF[76B80300]        <1> 	mov edi, videobuf
  3294 00002880 31DB                <1> 	xor ebx, ebx
  3295 00002882 881D[71280000]      <1> 	mov [termcopyneeded], bl
  3296 00002888 8B1D[97250000]      <1> 	mov ebx, [videobufpos]
  3297 0000288E 01DF                <1> 	add edi, ebx
  3298 00002890 893D[72280000]      <1> 	mov [termcursorpos], edi
  3299 00002896 E8E2000000          <1> 	call switchtermcursor
  3300 0000289B 803D[6A820000]00    <1> 	cmp byte [guion], 0
  3301 000028A2 0F8420000000        <1> 	je near nowincopy
  3302                              <1> %ifdef gui.included
  3303 000028A8 C605[AB790000]00    <1> 	mov byte [mouseselecton], 0
  3304 000028AF C605[A9230000]01    <1> 	mov byte [termcopyon], 1
  3305 000028B6 803D[A8230000]01    <1> 	cmp byte [termguion], 1
  3306 000028BD 0F84724E0000        <1> 	je near windowvideocopy
  3307                              <1> %endif
  3308 000028C3 E9AE000000          <1> 	jmp nocopytermatall
  3309                              <1> nowincopy:
  3310 000028C8 BE00000A00          <1> 	mov esi, 0xA0000
  3311 000028CD A1[35020000]        <1> 	mov eax, [basecache]
  3312 000028D2 C1E004              <1> 	shl eax, 4
  3313 000028D5 29C6                <1> 	sub esi, eax
  3314 000028D7 BF[76B80300]        <1> 	mov edi, videobuf
  3315 000028DC 31C9                <1> 	xor ecx, ecx
  3316 000028DE 668B0D[9D250000]    <1> 	mov cx, [charxy]
  3317                              <1> nowincopy2:
  3318 000028E5 8B07                <1> 	mov eax, [edi]
  3319 000028E7 81C748D50000        <1> 	add edi, (videobuf2 - videobuf)
  3320 000028ED 8B1F                <1> 	mov ebx, [edi]
  3321 000028EF 8907                <1> 	mov [edi], eax
  3322 000028F1 81EF48D50000        <1> 	sub edi, (videobuf2 - videobuf)
  3323 000028F7 81C702000000        <1> 	add edi, 2
  3324 000028FD 39D8                <1> 	cmp eax, ebx
  3325 000028FF 744B                <1> 	je nopresentwinfont
  3326 00002901 81EF02000000        <1> 	sub edi, 2
  3327 00002907 BD[B4840000]        <1> 	mov ebp, fonts
  3328 0000290C 31C0                <1> 	xor eax, eax
  3329 0000290E 668B07              <1> 	mov ax, [edi]
  3330 00002911 C1E004              <1> 	shl eax, 4
  3331 00002914 01C5                <1> 	add ebp, eax
  3332 00002916 81C702000000        <1> 	add edi, 2
  3333 0000291C 668B1F              <1> 	mov bx, [edi]
  3334 0000291F 31D2                <1> 	xor edx, edx
  3335 00002921 8A15[9D250000]      <1> 	mov dl, [charxy]
  3336 00002927 C1C110              <1> 	rol ecx, 16
  3337 0000292A B110                <1> 	mov cl, 16
  3338                              <1> nowinfont:
  3339 0000292C 8A4500              <1> 	mov al, [ebp]
  3340 0000292F D0C8                <1> 	ror al, 1
  3341 00002931 80FB80              <1> 	cmp bl, 0x80
  3342 00002934 7202                <1> 	jb notnotfont
  3343 00002936 F6D0                <1> 	not al
  3344                              <1> notnotfont:
  3345 00002938 8806                <1> 	mov [esi], al
  3346 0000293A 01D6                <1> 	add esi, edx
  3347 0000293C 45                  <1> 	inc ebp
  3348 0000293D FEC9                <1> 	dec cl
  3349 0000293F 80F900              <1> 	cmp cl, 0
  3350 00002942 75E8                <1> 	jne nowinfont
  3351 00002944 C1E204              <1> 	shl edx, 4
  3352 00002947 29D6                <1> 	sub esi, edx
  3353 00002949 C1C110              <1> 	rol ecx, 16
  3354                              <1> nopresentwinfont:
  3355 0000294C 81C702000000        <1> 	add edi, 2
  3356 00002952 46                  <1> 	inc esi
  3357 00002953 FEC9                <1> 	dec cl
  3358 00002955 80F900              <1> 	cmp cl, 0
  3359 00002958 758B                <1> 	jne nowincopy2
  3360 0000295A 8A0D[9D250000]      <1> 	mov cl, [charxy]
  3361 00002960 31D2                <1> 	xor edx, edx
  3362 00002962 88CA                <1> 	mov dl, cl
  3363 00002964 29D6                <1> 	sub esi, edx
  3364 00002966 C1E204              <1> 	shl edx, 4
  3365 00002969 01D6                <1> 	add esi, edx
  3366 0000296B FECD                <1> 	dec ch
  3367 0000296D 80FD00              <1> 	cmp ch, 0
  3368 00002970 0F856FFFFFFF        <1> 	jne nowincopy2
  3369                              <1> nocopytermatall:
  3370 00002976 E802000000          <1> 	call switchtermcursor
  3371 0000297B 61                  <1> 	popa
  3372 0000297C C3                  <1> 	ret
  3373                              <1> 	
  3374                              <1> switchtermcursor:
  3375 0000297D 8B3D[72280000]      <1> 	mov edi, [termcursorpos]
  3376 00002983 668B4702            <1> 	mov ax, [edi + 2]
  3377 00002987 668B1F              <1> 	mov bx, [edi]
  3378 0000298A 663D8000            <1> 	cmp ax, 0x80
  3379 0000298E 7209                <1> 	jb movlargecursorterm
  3380 00002990 66B80700            <1> 	mov ax, 7
  3381 00002994 E904000000          <1> 	jmp movedcursorterm
  3382                              <1> movlargecursorterm:
  3383 00002999 66B8F000            <1> 	mov ax, 0xF0
  3384                              <1> movedcursorterm:
  3385 0000299D 66894702            <1> 	mov [edi + 2], ax
  3386 000029A1 6681FB0000          <1> 	cmp bx, 0
  3387 000029A6 7507                <1> 	jne fixednocursorterm
  3388 000029A8 66BB2000            <1> 	mov bx, ' '
  3389 000029AC 66891F              <1> 	mov [edi], bx
  3390                              <1> fixednocursorterm:
  3391 000029AF C3                  <1> 	ret
  3392                              <1> %endif
  3393                                      %include "source/dosints.asm"
  3394                              <1> int20h:
  3395 000029B0 66B8004C            <1> mov ax, 0x4C00
  3396                              <1> int21h:
  3397                              <1> dostosolleros:
  3398 000029B4 6650                <1> 	push ax
  3399 000029B6 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3400 000029BA 8ED8                <1> 	mov ds, ax
  3401 000029BC 8EC0                <1> 	mov es, ax
  3402 000029BE 8EE0                <1> 	mov fs, ax
  3403 000029C0 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3404 000029C4 8EE8                <1> 	mov gs, ax
  3405 000029C6 6658                <1> 	pop ax
  3406 000029C8 9C                  <1> 	pushf
  3407 000029C9 60                  <1> 	pusha
  3408 000029CA 80FC01              <1> 	cmp ah, 1
  3409 000029CD 0F8449000000        <1> 	je near dosgchar
  3410 000029D3 80FC02              <1> 	cmp ah, 2
  3411 000029D6 0F8447000000        <1> 	je near doswchar
  3412 000029DC 80FC09              <1> 	cmp ah, 9
  3413 000029DF 0F844B000000        <1> 	je near dosprintstr
  3414 000029E5 80FC0A              <1> 	cmp ah, 0xA
  3415 000029E8 0F845A000000        <1> 	je near dosgetstr
  3416 000029EE 80FC2B              <1> 	cmp ah, 0x2B
  3417 000029F1 0F8496000000        <1> 	je near dosgetdate
  3418 000029F7 80FC2C              <1> 	cmp ah, 0x2C
  3419 000029FA 0F84B0000000        <1> 	je near dosgettime
  3420 00002A00 80FC4C              <1> 	cmp ah, 0x4C
  3421 00002A03 0F84C5000000        <1> 	je near dosexit
  3422                              <1> backtodos:
  3423 00002A09 61                  <1> 	popa
  3424 00002A0A 9D                  <1> 	popf
  3425 00002A0B 6650                <1> 	push ax
  3426 00002A0D 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3427 00002A11 8ED8                <1> 	mov ds, ax
  3428 00002A13 8EC0                <1> 	mov es, ax
  3429 00002A15 8EE0                <1> 	mov fs, ax
  3430 00002A17 8EE8                <1> 	mov gs, ax
  3431 00002A19 6658                <1> 	pop ax
  3432 00002A1B CF                  <1> 	iret
  3433                              <1> 
  3434                              <1> dosgchar:
  3435 00002A1C E8F6F8FFFF          <1> 	call getchar
  3436 00002A21 EBE6                <1> 	jmp backtodos
  3437                              <1> 	
  3438                              <1> doswchar:
  3439 00002A23 88D0                <1> 	mov al, dl
  3440 00002A25 30E4                <1> 	xor ah, ah
  3441 00002A27 B307                <1> 	mov bl, 7
  3442 00002A29 E865F9FFFF          <1> 	call prcharint
  3443 00002A2E EBD9                <1> 	jmp backtodos
  3444                              <1> 	
  3445                              <1> dosprintstr:
  3446 00002A30 31F6                <1> 	xor esi, esi
  3447 00002A32 6689D6              <1> 	mov si, dx
  3448 00002A35 81C600004000        <1> 	add esi, dosprogloc
  3449 00002A3B 66B82400            <1> 	mov ax, "$"
  3450 00002A3F B307                <1> 	mov bl, 7
  3451 00002A41 E8DDF2FFFF          <1> 	call printint
  3452 00002A46 EBC1                <1> 	jmp backtodos
  3453                              <1> 	
  3454                              <1> dosgetstr:
  3455 00002A48 31F6                <1> 	xor esi, esi
  3456 00002A4A 6689D6              <1> 	mov si, dx
  3457 00002A4D 81C600004000        <1> 	add esi, dosprogloc
  3458 00002A53 B900000000          <1> 	mov ecx, 0
  3459 00002A58 8A0E                <1> 	mov cl, [esi]
  3460 00002A5A 81C602000000        <1> 	add esi, 2
  3461 00002A60 89F7                <1> 	mov edi, esi
  3462 00002A62 8935[892A0000]      <1> 	mov [stringstart], esi
  3463 00002A68 01CF                <1> 	add edi, ecx
  3464 00002A6A B00A                <1> 	mov al, 10
  3465 00002A6C B307                <1> 	mov bl, 7
  3466 00002A6E E8F0F3FFFF          <1> 	call rdprintdos
  3467 00002A73 89F1                <1> 	mov ecx, esi
  3468 00002A75 2B0D[892A0000]      <1> 	sub ecx, [stringstart]
  3469 00002A7B 8B35[892A0000]      <1> 	mov esi, [stringstart]
  3470 00002A81 884EFF              <1> 	mov [esi - 1], cl
  3471 00002A84 884EFE              <1> 	mov [esi - 2], cl
  3472 00002A87 EB80                <1> 	jmp backtodos
  3473 00002A89 00000000            <1> stringstart dd 0
  3474                              <1> 
  3475                              <1> dosgetdate:
  3476 00002A8D E890210000          <1> 	call time
  3477 00002A92 8A0D[364F0000]      <1> 	mov cl, [RTCtimeYear]
  3478 00002A98 B500                <1> 	mov ch, 0
  3479 00002A9A 6681C1D007          <1> 	add cx, 2000
  3480 00002A9F 8A35[354F0000]      <1> 	mov dh, [RTCtimeMonth]
  3481 00002AA5 8A15[344F0000]      <1> 	mov dl, [RTCtimeDay]
  3482 00002AAB E959FFFFFF          <1> 	jmp backtodos
  3483                              <1> 
  3484                              <1> dosgettime:
  3485 00002AB0 E86D210000          <1> 	call time
  3486 00002AB5 8A2D[334F0000]      <1> 	mov ch, [RTCtimeHour]
  3487 00002ABB 8A0D[324F0000]      <1> 	mov cl, [RTCtimeMinute]
  3488 00002AC1 8A35[314F0000]      <1> 	mov dh, [RTCtimeSecond]
  3489 00002AC7 B200                <1> 	mov dl, 0
  3490 00002AC9 E93BFFFFFF          <1> 	jmp backtodos
  3491                              <1> 	
  3492                              <1> dosexit:
  3493 00002ACE BE[45820000]        <1> 	mov esi, line
  3494 00002AD3 E844F2FFFF          <1> 	call print
  3495 00002AD8 61                  <1> 	popa
  3496 00002AD9 9D                  <1> 	popf
  3497 00002ADA 8B25[E09A0300]      <1> 	mov esp, [previousstack]
  3498 00002AE0 31DB                <1> 	xor ebx, ebx
  3499 00002AE2 88C3                <1> 	mov bl, al
  3500 00002AE4 80FB00              <1> 	cmp bl, 0
  3501 00002AE7 0F85BAF1FFFF        <1> 	jne near exitprog.error
  3502 00002AED C3                  <1> 	ret
  3503                                      %include "source/solleros.asm"
  3504                              <1> 	;SOLLEROS.ASM
  3505                              <1> os:
  3506                              <1> setdefenv:
  3507 00002AEE B02F                <1> 	mov al, '/'
  3508 00002AF0 A2[EC9A0300]        <1> 	mov [currentfolder], al
  3509 00002AF5 B801000000          <1> 	mov eax, 1
  3510 00002AFA A3[E89A0300]        <1> 	mov [currentfolderloc], eax
  3511 00002AFF E8C7F2FFFF          <1> 	call clear
  3512                              <1> 	
  3513                              <1> bootfilecheck:
  3514 00002B04 803D[F09C0300]01    <1> 	cmp byte [ranboot], 1
  3515 00002B0B 0F8421000000        <1> 	je near nobootfile
  3516                              <1> 	%ifdef hardware.automatic
  3517 00002B11 E882330000          <1> 		call initializelater ;Initialize components that have debug messages
  3518                              <1> 	%endif
  3519 00002B16 BF[04820000]        <1> 	mov edi, bootfilename
  3520 00002B1B BE00004000          <1> 	mov esi, 0x400000
  3521 00002B20 E8C0370000          <1> 	call loadfile
  3522 00002B25 81FA00000000        <1> 	cmp edx, 0
  3523 00002B2B 7505                <1> 	jne nobootfile
  3524 00002B2D E8B20D0000          <1> 	call progbatchfound
  3525                              <1> nobootfile:	
  3526 00002B32 C605[F09C0300]01    <1> 	mov byte [ranboot], 1
  3527                              <1> 
  3528 00002B39 BE[03000000]        <1> 	mov esi, signature
  3529                              <1> .sigcopyloop:	;this prevents an odd error
  3530 00002B3E 658A06              <1> 	mov al, [gs:esi]
  3531 00002B41 8806                <1> 	mov [esi], al
  3532 00002B43 46                  <1> 	inc esi
  3533 00002B44 81FE[11000000]      <1> 	cmp esi, signatureend
  3534 00002B4A 72F2                <1> 	jb .sigcopyloop
  3535                              <1> 	
  3536 00002B4C BE[03000000]        <1> 	mov esi, signature
  3537 00002B51 E8C6F1FFFF          <1> 	call print
  3538 00002B56 8B0D[0D000000]      <1> 	mov ecx, [signatureend - 4]
  3539 00002B5C E8F6060000          <1> 	call showdec
  3540 00002B61 BE[45820000]        <1> 	mov esi, line
  3541 00002B66 E8B1F1FFFF          <1> 	call print
  3542 00002B6B BE[21820000]        <1> 	mov esi, userask
  3543 00002B70 E8A7F1FFFF          <1> 	call print
  3544                              <1> usercheck:
  3545 00002B75 BE[60B10300]        <1> 	mov esi, buftxt
  3546 00002B7A BF[60B50300]        <1> 	mov edi, buftxtend
  3547 00002B7F B00A                <1> 	mov al, 10
  3548 00002B81 E8C9F2FFFF          <1> 	call rdprint
  3549 00002B86 56                  <1> 	push esi
  3550 00002B87 BE[2B820000]        <1> 	mov esi, pwdask
  3551 00002B8C E88BF1FFFF          <1> 	call print
  3552 00002B91 5E                  <1> 	pop esi
  3553 00002B92 46                  <1> 	inc esi
  3554 00002B93 8935[882C0000]      <1> 	mov [esipass], esi
  3555                              <1> passcheck:
  3556 00002B99 E879F7FFFF          <1> 	call getchar
  3557 00002B9E 3C0A                <1> 	cmp al, 10
  3558 00002BA0 0F8438000000        <1> 	je near gotpass
  3559 00002BA6 3C08                <1> 	cmp al, 8
  3560 00002BA8 0F8412000000        <1> 	je near backpass
  3561 00002BAE 8806                <1> 	mov [esi], al
  3562 00002BB0 46                  <1> 	inc esi
  3563 00002BB1 30E4                <1> 	xor ah, ah
  3564 00002BB3 B02A                <1> 	mov al, "*"
  3565 00002BB5 E8D9F7FFFF          <1> 	call prcharint
  3566 00002BBA EBDD                <1> 	jmp passcheck
  3567 00002BBC 08200800            <1> backcursor2 db 8," ",8,0
  3568                              <1> backpass:
  3569 00002BC0 3B35[882C0000]      <1> 	cmp esi, [esipass]
  3570 00002BC6 0F84CDFFFFFF        <1> 	je near passcheck
  3571 00002BCC 4E                  <1> 	dec esi
  3572 00002BCD C60600              <1> 	mov byte [esi], 0
  3573 00002BD0 56                  <1> 	push esi
  3574 00002BD1 BE[BC2B0000]        <1> 	mov esi, backcursor2
  3575 00002BD6 E841F1FFFF          <1> 	call print
  3576 00002BDB 5E                  <1> 	pop esi
  3577 00002BDC EBBB                <1> 	jmp passcheck
  3578                              <1> gotpass:
  3579 00002BDE B00A                <1> 	mov al, 10
  3580 00002BE0 E8AEF7FFFF          <1> 	call prcharint
  3581 00002BE5 30C0                <1> 	xor al, al
  3582 00002BE7 31C9                <1> 	xor ecx, ecx
  3583 00002BE9 8806                <1> 	mov [esi], al
  3584 00002BEB BB[47820000]        <1> 	mov ebx, userlst
  3585                              <1> userfind:
  3586 00002BF0 BE[60B10300]        <1> 	mov esi, buftxt
  3587 00002BF5 8A06                <1> 	mov al, [esi]
  3588 00002BF7 3C00                <1> 	cmp al, 0
  3589 00002BF9 0F84EFFEFFFF        <1> 	je near os
  3590 00002BFF 891D[8C2C0000]      <1> 	mov [usercache], ebx
  3591 00002C05 E860030000          <1> 	call tester
  3592 00002C0A 3C01                <1> 	cmp al, 1
  3593 00002C0C 7416                <1> 	je pwdtest
  3594 00002C0E 41                  <1> 	inc ecx
  3595                              <1> nxtuser:
  3596 00002C0F 8A03                <1> 	mov al, [ebx]
  3597 00002C11 43                  <1> 	inc ebx
  3598 00002C12 3C00                <1> 	cmp al, 0
  3599 00002C14 75F9                <1> 	jne nxtuser
  3600 00002C16 81FB[6A820000]      <1> 	cmp ebx, userlstend
  3601 00002C1C 0F83CCFEFFFF        <1> 	jae near os
  3602 00002C22 EBCC                <1> 	jmp userfind
  3603                              <1> pwdtest:
  3604 00002C24 46                  <1> 	inc esi
  3605 00002C25 43                  <1> 	inc ebx
  3606 00002C26 E83F030000          <1> 	call tester
  3607 00002C2B 3C01                <1> 	cmp al, 1
  3608 00002C2D 7402                <1> 	je pwdrgt
  3609 00002C2F EBDE                <1> 	jmp nxtuser
  3610                              <1> pwdrgt:
  3611 00002C31 D1E9                <1> 	shr ecx, 1
  3612 00002C33 890D[EC9C0300]      <1> 	mov [uid], ecx
  3613 00002C39 E88DF1FFFF          <1> 	call clear
  3614 00002C3E 31C9                <1> 	xor ecx, ecx
  3615 00002C40 41                  <1> 	inc ecx
  3616 00002C41 890D[0A630500]      <1> 	mov [commandbufpos], ecx
  3617                              <1> returnfromexp:
  3618 00002C47 66B90002            <1> 	mov cx, 200h
  3619 00002C4B BE[60B10300]        <1> 	mov esi, buftxt
  3620 00002C50 8935[662F0000]      <1> 	mov [currentcommandloc], esi
  3621 00002C56 E825000000          <1> 	call bufclr
  3622                              <1> clearolddata:
  3623 00002C5B 31C0                <1> 	xor eax, eax
  3624 00002C5D A2[F19C0300]        <1> 	mov [IFON], al
  3625 00002C62 A2[F29C0300]        <1> 	mov [IFTRUE], al
  3626 00002C67 A2[5A9D0300]        <1> 	mov [BATCHISON], al
  3627 00002C6C A3[569D0300]        <1> 	mov [BATCHPOS], eax
  3628 00002C71 A2[5B9D0300]        <1> 	mov [LOOPON], al
  3629 00002C76 A3[5C9D0300]        <1> 	mov [LOOPPOS], eax
  3630 00002C7B E933000000          <1> 	jmp nwcmd
  3631                              <1> bufclr:	
  3632 00002C80 30C0                <1> 	xor al, al
  3633 00002C82 8806                <1> 	mov [esi], al
  3634 00002C84 46                  <1> 	inc esi
  3635 00002C85 E2F9                <1> 	loop bufclr
  3636 00002C87 C3                  <1> 	ret
  3637                              <1> 
  3638 00002C88 00000000            <1> esipass dd 0
  3639 00002C8C [47820000]          <1> usercache dd userlst
  3640                              <1> 	
  3641                              <1> buftxtclear:
  3642 00002C90 30C0                <1> 	xor al, al
  3643 00002C92 BE[60B10300]        <1> 	mov esi, buftxt
  3644 00002C97 81FE[60B50300]      <1> clearbuftxt: cmp esi, buf2
  3645 00002C9D 730E                <1> 	jae retbufclr
  3646 00002C9F 8806                <1> 	mov [esi], al
  3647 00002CA1 46                  <1> 	inc esi
  3648 00002CA2 EBF3                <1> 	jmp clearbuftxt
  3649                              <1> 
  3650 00002CA4 39DE                <1> clearitbuf: cmp esi, ebx
  3651 00002CA6 7305                <1> 	jae retbufclr
  3652 00002CA8 8806                <1> 	mov [esi], al
  3653 00002CAA 46                  <1> 	inc esi
  3654 00002CAB EBF7                <1> 	jmp clearitbuf
  3655 00002CAD C3                  <1> retbufclr: ret
  3656                              <1> 
  3657 00002CAE E900000000          <1> full:	jmp nwcmd
  3658                              <1> 
  3659                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3660                              <1> nwcmd:
  3661 00002CB3 FB                  <1> 	sti
  3662 00002CB4 31C0                <1> 	xor eax, eax
  3663 00002CB6 3905[882E0000]      <1> 	cmp [nextcommandloc], eax
  3664 00002CBC 7413                <1> 	je nomultiplecommand
  3665 00002CBE 8B35[882E0000]      <1> 	mov esi, [nextcommandloc]
  3666 00002CC4 8935[8C2E0000]      <1> 	mov [thiscommandloc], esi
  3667 00002CCA E8C6010000          <1> 	call fixvariables
  3668 00002CCF EBE2                <1> 	jmp nwcmd
  3669                              <1> nomultiplecommand:
  3670 00002CD1 A3[8C2E0000]        <1> 	mov [thiscommandloc], eax
  3671 00002CD6 3805[A1640000]      <1> 	cmp [threadson], al
  3672 00002CDC 7405                <1> 	je noclinwcmd
  3673 00002CDE A2[A1640000]        <1> 	mov [threadson], al
  3674                              <1> noclinwcmd:
  3675 00002CE3 B001                <1> 	mov al, 1
  3676 00002CE5 3805[5A9D0300]      <1> 	cmp [BATCHISON], al
  3677 00002CEB 7501                <1> 	jne cancel
  3678 00002CED C3                  <1> 	ret
  3679 00002CEE 30C0                <1> cancel:	xor al, al
  3680 00002CF0 A2[F19C0300]        <1> 	mov [IFON], al
  3681 00002CF5 A2[5A9D0300]        <1> 	mov [BATCHISON], al
  3682 00002CFA B05B                <1> 	mov al, '['
  3683 00002CFC 66BB0700            <1> 	mov bx, 7
  3684 00002D00 E8A5F6FFFF          <1> 	call prcharq
  3685 00002D05 8B35[8C2C0000]      <1> 	mov esi, [usercache]
  3686 00002D0B E8EDEFFFFF          <1> 	call printquiet
  3687 00002D10 BE[35820000]        <1> 	mov esi, computer
  3688 00002D15 E8E3EFFFFF          <1> 	call printquiet
  3689 00002D1A BE[EC9A0300]        <1> 	mov esi, currentfolder
  3690 00002D1F 0335[E49A0300]      <1> 	add esi, [lastfolderloc]
  3691 00002D25 E8D3EFFFFF          <1> 	call printquiet
  3692 00002D2A BE[40820000]        <1> 	mov esi, endprompt
  3693 00002D2F E8E8EFFFFF          <1> 	call print
  3694 00002D34 E857FFFFFF          <1> 	call buftxtclear
  3695 00002D39 BE[60B10300]        <1> 	mov esi, buftxt
  3696 00002D3E C605[00230000]01    <1> 	mov byte [commandedit], 1
  3697 00002D45 B00A                <1> 	mov al, 10
  3698 00002D47 66BB0700            <1> 	mov bx, 7
  3699 00002D4B BF[60B50300]        <1> 	mov edi, buftxtend
  3700 00002D50 E8FAF0FFFF          <1> 	call rdprint
  3701 00002D55 C605[00230000]00    <1> 	mov byte [commandedit], 0
  3702 00002D5C 803D[60B10300]00    <1> 	cmp byte [buftxt], 0
  3703 00002D63 0F844AFFFFFF        <1> 	je near nwcmd
  3704 00002D69 8B35[0A630500]      <1> gotcmd:	mov esi, [commandbufpos]
  3705 00002D6F 8935[06630500]      <1> 	mov [lastcommandpos], esi
  3706 00002D75 FF05[12630500]      <1> 	inc dword [commandsentered]
  3707 00002D7B BF[60B10300]        <1> 	mov edi, buftxt
  3708 00002D80 81C6[16630500]      <1> 	add esi, commandbuf
  3709 00002D86 81FE[16730500]      <1> 	cmp esi, commandbufend
  3710 00002D8C 7605                <1> 	jbe copycommand
  3711 00002D8E BE[16630500]        <1> 	mov esi, commandbuf
  3712                              <1> copycommand:
  3713 00002D93 8A07                <1> 	mov al, [edi]
  3714 00002D95 8806                <1> 	mov [esi], al
  3715 00002D97 47                  <1> 	inc edi
  3716 00002D98 46                  <1> 	inc esi
  3717 00002D99 3C00                <1> 	cmp al, 0
  3718 00002D9B 740F                <1> 	je donecopy
  3719 00002D9D 81FE[16730500]      <1> 	cmp esi, commandbufend
  3720 00002DA3 76EE                <1> 	jbe copycommand
  3721 00002DA5 BE[16630500]        <1> 	mov esi, commandbuf
  3722 00002DAA EBE7                <1> 	jmp copycommand
  3723                              <1> donecopy:
  3724 00002DAC 81EE[16630500]      <1> 	sub esi, commandbuf
  3725 00002DB2 8935[0A630500]      <1> 	mov [commandbufpos], esi
  3726 00002DB8 E8D3000000          <1> 	call run
  3727 00002DBD E9F1FEFFFF          <1> 	jmp nwcmd
  3728                              <1> 
  3729 00002DC2 E8C9FEFFFF          <1> input:	call buftxtclear
  3730 00002DC7 BE[60B10300]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3731 00002DCC BF[60B50300]        <1> 	mov edi, buftxtend
  3732 00002DD1 B00A                <1> stdin:	mov al, 10
  3733 00002DD3 B307                <1> 	mov bl, 7
  3734 00002DD5 E875F0FFFF          <1> 	call rdprint
  3735 00002DDA C3                  <1> 	ret
  3736                              <1> 
  3737                              <1> replacevariable:
  3738 00002DDB 8A4601              <1> 	mov al, [esi + 1]
  3739 00002DDE C64601FF            <1> 	mov byte [esi + 1], 255
  3740 00002DE2 3C24                <1> 	cmp al, "$"
  3741 00002DE4 0F84AB000000        <1> 	je near fixvariables
  3742 00002DEA 884601              <1> 	mov [esi + 1], al
  3743 00002DED 56                  <1> 	push esi
  3744 00002DEE 81EE[60B10300]      <1> 	sub esi, buftxt
  3745 00002DF4 89F7                <1> 	mov edi, esi
  3746 00002DF6 81C6[60B10300]      <1> 	add esi, buftxt
  3747 00002DFC 47                  <1> 	inc edi
  3748 00002DFD BB[609D0300]        <1> 	mov ebx, variables
  3749 00002E02 E895120000          <1> 	call nxtvrech
  3750 00002E07 89F7                <1> 	mov edi, esi
  3751 00002E09 31DB                <1> 	xor ebx, ebx
  3752 00002E0B 4E                  <1> 	dec esi
  3753                              <1> findvarname:
  3754 00002E0C 4E                  <1> 	dec esi
  3755 00002E0D 8A06                <1> 	mov al, [esi]
  3756 00002E0F 43                  <1> 	inc ebx
  3757 00002E10 3C04                <1> 	cmp al, 4
  3758 00002E12 75F8                <1> 	jne findvarname
  3759 00002E14 5E                  <1> 	pop esi
  3760                              <1> replacevarloop:
  3761 00002E15 8A07                <1> 	mov al, [edi]
  3762 00002E17 3C00                <1> 	cmp al, 0
  3763 00002E19 0F8413000000        <1> 	je near compressbuftxt
  3764 00002E1F 81FB00000000        <1> 	cmp ebx, 0
  3765 00002E25 0F8416000000        <1> 	je near expandbuftxt
  3766 00002E2B 8806                <1> 	mov [esi], al
  3767 00002E2D 4B                  <1> 	dec ebx
  3768 00002E2E 46                  <1> 	inc esi
  3769 00002E2F 47                  <1> 	inc edi
  3770 00002E30 EBE3                <1> 	jmp replacevarloop
  3771                              <1> compressbuftxt:
  3772 00002E32 8A041E              <1> 	mov al, [esi + ebx]
  3773 00002E35 8806                <1> 	mov [esi], al
  3774 00002E37 46                  <1> 	inc esi
  3775 00002E38 3C00                <1> 	cmp al, 0
  3776 00002E3A 75F6                <1> 	jne compressbuftxt
  3777 00002E3C E954000000          <1> 	jmp fixvariables
  3778                              <1> expandbuftxt:
  3779 00002E41 89F1                <1> 	mov ecx, esi
  3780 00002E43 8A26                <1> 	mov ah, [esi]
  3781                              <1> expandbuftxtlp:
  3782 00002E45 8A1E                <1> 	mov bl, [esi]
  3783 00002E47 46                  <1> 	inc esi
  3784 00002E48 8A3E                <1> 	mov bh, [esi]
  3785 00002E4A 8826                <1> 	mov [esi], ah
  3786 00002E4C 88FC                <1> 	mov ah, bh
  3787 00002E4E 80FB00              <1> 	cmp bl, 0
  3788 00002E51 75F2                <1> 	jne expandbuftxtlp
  3789 00002E53 89CE                <1> 	mov esi, ecx
  3790 00002E55 8806                <1> 	mov [esi], al
  3791 00002E57 47                  <1> 	inc edi
  3792 00002E58 8A07                <1> 	mov al, [edi]
  3793 00002E5A 3C00                <1> 	cmp al, 0
  3794 00002E5C 0F8433000000        <1> 	je near fixvariables
  3795 00002E62 46                  <1> 	inc esi
  3796 00002E63 EBDC                <1> 	jmp expandbuftxt
  3797                              <1> multipleprogline:
  3798 00002E65 30E4                <1> 	xor ah, ah
  3799 00002E67 8826                <1> 	mov [esi], ah
  3800 00002E69 46                  <1> 	inc esi
  3801 00002E6A 8935[882E0000]      <1> 	mov [nextcommandloc], esi
  3802 00002E70 E93E000000          <1> 	jmp donefixvariables
  3803                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3804 00002E75 46                  <1> 	inc esi
  3805 00002E76 8A06                <1> 	mov al, [esi]
  3806 00002E78 C606FF              <1> 	mov byte [esi], 255
  3807 00002E7B 3C23                <1> 	cmp al, '#'
  3808 00002E7D 7416                <1> 	je fixvariables
  3809 00002E7F 4E                  <1> 	dec esi
  3810 00002E80 C60600              <1> 	mov byte [esi], 0
  3811 00002E83 E90D000000          <1> 	jmp fixvariables
  3812                              <1> 	
  3813 00002E88 00000000            <1> nextcommandloc dd 0
  3814 00002E8C 00000000            <1> thiscommandloc dd 0	
  3815                              <1> run:
  3816 00002E90 BE[60B10300]        <1> 	mov esi, buftxt
  3817 00002E95 46                  <1> fixvariables:	inc esi
  3818 00002E96 8A06                <1> 	mov al, [esi]
  3819 00002E98 3C23                <1> 	cmp al, '#'	;inline comment
  3820 00002E9A 74D9                <1> 	je inlinecomment
  3821 00002E9C 3C24                <1> 	cmp al, '$' ;variable
  3822 00002E9E 0F8437FFFFFF        <1> 	je near replacevariable
  3823 00002EA4 3C3B                <1> 	cmp al, ';' ;program list
  3824 00002EA6 74BD                <1> 	je multipleprogline
  3825 00002EA8 3C00                <1> 	cmp al, 0
  3826 00002EAA 75E9                <1> 	jne fixvariables
  3827 00002EAC 31C0                <1> 	xor eax, eax
  3828 00002EAE A3[882E0000]        <1> 	mov [nextcommandloc], eax
  3829                              <1> donefixvariables:
  3830 00002EB3 803D[51340000]00    <1> 	cmp byte [indexdone], 0
  3831 00002EBA 7505                <1> 	jne progtest
  3832 00002EBC E8FB040000          <1> 	call indexfiles
  3833                              <1> progtest:
  3834 00002EC1 31C0                <1> 	xor eax, eax
  3835 00002EC3 BB[E0960300]        <1> 	mov ebx, fileindex
  3836 00002EC8 668B03              <1> prgnxt:	mov ax, [ebx]
  3837 00002ECB B1FF                <1> 	mov cl, 255
  3838 00002ECD B52C                <1> 	mov ch, 44
  3839 00002ECF 6639C8              <1> 	cmp ax, cx
  3840 00002ED2 740B                <1> 	je fndprg
  3841 00002ED4 43                  <1> 	inc ebx
  3842 00002ED5 81FB[E09A0300]      <1> 	cmp ebx, fileindexend
  3843 00002EDB 735D                <1> 	jae prgnf
  3844 00002EDD EBE9                <1> 	jmp prgnxt
  3845 00002EDF 81C302000000        <1> fndprg: add ebx, 2
  3846 00002EE5 31C9                <1> 	xor ecx, ecx
  3847 00002EE7 BE[60B10300]        <1> 	mov esi, buftxt
  3848 00002EEC 390D[8C2E0000]      <1> 	cmp [thiscommandloc], ecx
  3849 00002EF2 7406                <1> 	je noprgtstmultiple
  3850 00002EF4 8B35[8C2E0000]      <1> 	mov esi, [thiscommandloc]
  3851                              <1> noprgtstmultiple:
  3852 00002EFA E8A6000000          <1> 	call cndtest
  3853 00002EFF 3C01                <1> 	cmp al, 1
  3854 00002F01 7302                <1> 	jae prggood
  3855 00002F03 EBC3                <1> 	jmp prgnxt
  3856 00002F05 81FB[E09A0300]      <1> prggood: cmp ebx, fileindexend
  3857 00002F0B 7358                <1> 	jae prgdn
  3858 00002F0D 31C0                <1> 	xor eax, eax
  3859 00002F0F BE[60B10300]        <1> 	mov esi, buftxt
  3860 00002F14 3905[8C2E0000]      <1> 	cmp [thiscommandloc], eax
  3861 00002F1A 7406                <1> 	je noprggoodmul
  3862 00002F1C 8B35[8C2E0000]      <1> 	mov esi, [thiscommandloc]
  3863                              <1> noprggoodmul:
  3864 00002F22 8935[662F0000]      <1> 	mov [currentcommandloc], esi
  3865 00002F28 81C303000000        <1> 	add ebx, 3
  3866 00002F2E 8B3B                <1> 	mov edi, [ebx]
  3867 00002F30 C605[A1640000]02    <1> 	mov byte [threadson], 2
  3868 00002F37 FFD7                <1> 	call edi
  3869 00002F39 C3                  <1> 	ret
  3870                              <1> prgnf:	
  3871 00002F3A 8B35[662F0000]      <1> 	mov esi, [currentcommandloc]
  3872 00002F40 8A06                <1> 	mov al, [esi]
  3873 00002F42 3C00                <1> 	cmp al, 0
  3874 00002F44 741F                <1> 	je prgdn
  3875 00002F46 BE[0C820000]        <1> 	mov esi, notfound1
  3876 00002F4B E8CCEDFFFF          <1> 	call print
  3877 00002F50 8B35[662F0000]      <1> 	mov esi, [currentcommandloc]
  3878 00002F56 E8C1EDFFFF          <1> 	call print
  3879 00002F5B BE[14820000]        <1> 	mov esi, notfound2
  3880 00002F60 E8B7EDFFFF          <1> 	call print
  3881 00002F65 C3                  <1> prgdn:	ret
  3882                              <1> 
  3883 00002F66 00000000            <1> currentcommandloc dd 0
  3884                              <1> 
  3885                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3886 00002F6A 6631C0              <1> 	xor ax, ax
  3887 00002F6D 8A06                <1> retest:	mov al, [esi]
  3888 00002F6F 8A23                <1> 	mov ah, [ebx]
  3889 00002F71 3C00                <1> 	cmp al, 0
  3890 00002F73 7408                <1> 	je testtrue
  3891 00002F75 38E0                <1> 	cmp al, ah
  3892 00002F77 750C                <1> 	jne testfalse
  3893 00002F79 43                  <1> 	inc ebx
  3894 00002F7A 46                  <1> 	inc esi
  3895 00002F7B EBF0                <1> 	jmp retest
  3896                              <1> testtrue:
  3897 00002F7D 80FC00              <1> 	cmp ah, 0
  3898 00002F80 7503                <1> 	jne testfalse
  3899 00002F82 B001                <1> 	mov al, 1
  3900 00002F84 C3                  <1> 	ret
  3901                              <1> testfalse:
  3902 00002F85 30C0                <1> 	xor al, al
  3903 00002F87 C3                  <1> 	ret
  3904                              <1> 
  3905                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3906 00002F88 30C0                <1> 	xor al, al
  3907                              <1> opretest:
  3908 00002F8A 8A06                <1> 	mov al, [esi]
  3909 00002F8C 8A23                <1> 	mov ah, [ebx]
  3910 00002F8E 38E0                <1> 	cmp al, ah
  3911 00002F90 7510                <1> 	jne optestfalse
  3912 00002F92 80FC00              <1> 	cmp ah, 0
  3913 00002F95 7404                <1> 	je optesttrue
  3914 00002F97 43                  <1> 	inc ebx
  3915 00002F98 46                  <1> 	inc esi
  3916 00002F99 EBEF                <1> 	jmp opretest
  3917                              <1> optesttrue:
  3918 00002F9B 3C00                <1> 	cmp al, 0
  3919 00002F9D 7503                <1> 	jne optestfalse
  3920 00002F9F B001                <1> 	mov al, 1
  3921 00002FA1 C3                  <1> 	ret
  3922                              <1> optestfalse:
  3923 00002FA2 30C0                <1> 	xor al, al
  3924 00002FA4 C3                  <1> 	ret
  3925                              <1> 
  3926                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3927 00002FA5 30C0                <1> 	xor al, al
  3928 00002FA7 8A06                <1> cndretest:	mov al, [esi]
  3929 00002FA9 8A23                <1> 	mov ah, [ebx]
  3930 00002FAB 38CC                <1> 	cmp ah, cl
  3931 00002FAD 7408                <1> 	je cndtesttrue
  3932 00002FAF 38E0                <1> 	cmp al, ah
  3933 00002FB1 750B                <1> 	jne cndtestfalse
  3934 00002FB3 43                  <1> 	inc ebx
  3935 00002FB4 46                  <1> 	inc esi
  3936 00002FB5 EBF0                <1> 	jmp cndretest
  3937                              <1> cndtesttrue:
  3938 00002FB7 38C8                <1> 	cmp al, cl
  3939 00002FB9 7506                <1> 	jne cndtestalmost
  3940 00002FBB B001                <1> 	mov al, 1
  3941 00002FBD C3                  <1> 	ret
  3942                              <1> cndtestfalse:
  3943 00002FBE 30C0                <1> 	xor al, al
  3944 00002FC0 C3                  <1> 	ret
  3945                              <1> cndtestalmost:
  3946 00002FC1 B002                <1> 	mov al, 2
  3947 00002FC3 C3                  <1> 	ret
  3948                              <1> 	
  3949                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3950                              <1> 		                ;ends if array seperator is found backwards after 0
  3951                              <1> 	arnxt:	      
  3952 00002FC4 88E8                <1> 		mov al, ch
  3953 00002FC6 88CC                <1> 		mov ah, cl        
  3954 00002FC8 663906              <1> 		cmp [esi], ax
  3955 00002FCB 744D                <1> 		je ardn
  3956 00002FCD 66390E              <1> 		cmp [esi], cx
  3957 00002FD0 7407                <1> 		je arfnd
  3958 00002FD2 46                  <1> 		inc esi
  3959 00002FD3 39DE                <1> 		cmp esi, ebx
  3960 00002FD5 7343                <1> 		jae ardn
  3961 00002FD7 EBEB                <1> 		jmp arnxt
  3962 00002FD9 81C602000000        <1> 	arfnd: add esi, 2
  3963 00002FDF 891D[1B300000]      <1> 		mov [arbx], ebx
  3964 00002FE5 890D[1F300000]      <1> 		mov [arcx], ecx
  3965 00002FEB E82CEDFFFF          <1> 		call print
  3966 00002FF0 8935[21300000]      <1> 		mov [arsi], esi
  3967 00002FF6 BE[45820000]        <1> 		mov esi, line
  3968 00002FFB E81CEDFFFF          <1> 		call print
  3969 00003000 8B1D[1B300000]      <1> 		mov ebx, [arbx]
  3970 00003006 668B0D[1F300000]    <1> 		mov cx, [arcx]
  3971 0000300D 8B35[21300000]      <1> 		mov esi, [arsi]
  3972 00003013 46                  <1> 		inc esi
  3973 00003014 39DE                <1> 		cmp esi, ebx
  3974 00003016 7302                <1> 		jae ardn
  3975 00003018 EBAA                <1> 		jmp arnxt
  3976 0000301A C3                  <1> 	ardn:	ret
  3977 0000301B 00000000            <1> arbx:	dw 0,0
  3978 0000301F 0000                <1> arcx:	db 0,0
  3979 00003021 00000000            <1> arsi:	dw 0,0
  3980                              <1> 
  3981                              <1> clearbuffer:
  3982 00003025 BE[60B50300]        <1> 	mov esi, buf2
  3983 0000302A B030                <1> 	mov al, '0'
  3984 0000302C 81FE[74B50300]      <1> clearbuf: cmp esi, numbuf
  3985 00003032 7305                <1> 	jae doneclearbuff
  3986 00003034 8806                <1> 	mov [esi], al
  3987 00003036 46                  <1> 	inc esi
  3988 00003037 EBF3                <1> 	jmp clearbuf
  3989                              <1> doneclearbuff: 
  3990 00003039 C3                  <1> 		ret
  3991                              <1> 
  3992                              <1> convert:
  3993 0000303A 4E                  <1> 	dec esi
  3994 0000303B 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3995                              <1> .lp:
  3996 0000303D 89DE                <1> 	mov esi, ebx
  3997 0000303F 81EE09000000        <1> 	sub esi, 9
  3998 00003045 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3999 0000304B 720A                <1> 	jb .8
  4000 0000304D 81E900CA9A3B        <1> 	sub ecx, 1000000000
  4001 00003053 FE06                <1> 	inc byte [esi]
  4002 00003055 EBE6                <1> 	jmp .lp
  4003 00003057 46                  <1> .8:	inc esi
  4004 00003058 81F900E1F505        <1> 	cmp ecx, 100000000
  4005 0000305E 720A                <1> 	jb .7
  4006 00003060 81E900E1F505        <1> 	sub ecx, 100000000
  4007 00003066 FE06                <1> 	inc byte [esi]
  4008 00003068 EBD3                <1> 	jmp .lp
  4009 0000306A 46                  <1> .7:	inc esi
  4010 0000306B 81F980969800        <1> 	cmp ecx, 10000000
  4011 00003071 720A                <1> 	jb .6
  4012 00003073 81E980969800        <1> 	sub ecx, 10000000
  4013 00003079 FE06                <1> 	inc byte [esi]
  4014 0000307B EBC0                <1> 	jmp .lp
  4015 0000307D 46                  <1> .6:	inc esi
  4016 0000307E 81F940420F00        <1> 	cmp ecx, 1000000
  4017 00003084 720A                <1> 	jb .5
  4018 00003086 81E940420F00        <1> 	sub ecx, 1000000
  4019 0000308C FE06                <1> 	inc byte [esi]
  4020 0000308E EBAD                <1> 	jmp .lp
  4021 00003090 46                  <1> .5:	inc esi
  4022 00003091 81F9A0860100        <1> 	cmp ecx, 100000
  4023 00003097 720A                <1> 	jb .4
  4024 00003099 81E9A0860100        <1> 	sub ecx, 100000
  4025 0000309F FE06                <1> 	inc byte [esi]
  4026 000030A1 EB9A                <1> 	jmp .lp
  4027 000030A3 46                  <1> .4:	inc esi
  4028 000030A4 81F910270000        <1> 	cmp ecx, 10000
  4029 000030AA 720A                <1> 	jb .3
  4030 000030AC 81E910270000        <1> 	sub ecx, 10000
  4031 000030B2 FE06                <1> 	inc byte [esi]
  4032 000030B4 EB87                <1> 	jmp .lp
  4033 000030B6 46                  <1> .3:	inc esi
  4034 000030B7 81F9E8030000        <1> 	cmp ecx, 1000
  4035 000030BD 720D                <1> 	jb .2
  4036 000030BF 81E9E8030000        <1> 	sub ecx, 1000
  4037 000030C5 FE06                <1> 	inc byte [esi]
  4038 000030C7 E971FFFFFF          <1> 	jmp .lp
  4039 000030CC 46                  <1> .2:	inc esi
  4040 000030CD 81F964000000        <1> 	cmp ecx, 100
  4041 000030D3 720D                <1> 	jb .1
  4042 000030D5 81E964000000        <1> 	sub ecx, 100
  4043 000030DB FE06                <1> 	inc byte [esi]
  4044 000030DD E95BFFFFFF          <1> 	jmp .lp
  4045 000030E2 46                  <1> .1:	inc esi
  4046 000030E3 81F90A000000        <1> 	cmp ecx, 10
  4047 000030E9 720D                <1> 	jb .0
  4048 000030EB 81E90A000000        <1> 	sub ecx, 10
  4049 000030F1 FE06                <1> 	inc byte [esi]
  4050 000030F3 E945FFFFFF          <1> 	jmp .lp
  4051 000030F8 46                  <1> .0:	inc esi
  4052 000030F9 81F901000000        <1> 	cmp ecx, 1
  4053 000030FF 720D                <1> 	jb .dn
  4054 00003101 81E901000000        <1> 	sub ecx, 1
  4055 00003107 FE06                <1> 	inc byte [esi]
  4056 00003109 E92FFFFFFF          <1> 	jmp .lp
  4057                              <1> .dn:
  4058 0000310E C3                  <1> 	ret
  4059                              <1> 
  4060                              <1> 	
  4061                              <1> 
  4062 0000310F 00<rept>            <1> hexnumber times 8 db 0
  4063 00003117 202000              <1> hexnumberend db "  ",0
  4064                              <1> 
  4065                              <1> converthex:
  4066                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  4067 0000311A 56                  <1> 	push esi
  4068 0000311B B030                <1> 	mov al, "0"
  4069 0000311D 39FE                <1> .clearlp: cmp esi, edi
  4070 0000311F 7305                <1> 	jae .doneclear
  4071 00003121 8806                <1> 	mov [esi], al
  4072 00003123 46                  <1> 	inc esi
  4073 00003124 EBF7                <1> 	jmp .clearlp
  4074                              <1> .doneclear:
  4075 00003126 81EE02000000        <1> 	sub esi, 2
  4076 0000312C 89C8                <1> 	mov eax, ecx
  4077                              <1> .loop:
  4078 0000312E 30FF                <1> 	xor bh, bh
  4079 00003130 88C3                <1> 	mov bl, al
  4080 00003132 66C1E304            <1> 	shl bx, 4
  4081 00003136 C0EB04              <1> 	shr bl, 4
  4082 00003139 86DF                <1> 	xchg bl, bh ;they are backwards
  4083 0000313B 80C330              <1> 	add bl, 48
  4084 0000313E 80FB39              <1> 	cmp bl, "9"
  4085 00003141 7609                <1> 	jbe .goodbl
  4086 00003143 80EB30              <1> 	sub bl, 48
  4087 00003146 80EB0A              <1> 	sub bl, 0xA
  4088 00003149 80C341              <1> 	add bl, "A"
  4089                              <1> .goodbl:
  4090 0000314C 80C730              <1> 	add bh, 48
  4091 0000314F 80FF39              <1> 	cmp bh, "9"
  4092 00003152 7609                <1> 	jbe .goodbh
  4093 00003154 80EF30              <1> 	sub bh, 48
  4094 00003157 80EF0A              <1> 	sub bh, 0xA
  4095 0000315A 80C741              <1> 	add bh, "A"
  4096                              <1> .goodbh:
  4097 0000315D C1E808              <1> 	shr eax, 8
  4098 00003160 66891E              <1> 	mov [esi], bx
  4099 00003163 81EE02000000        <1> 	sub esi, 2
  4100 00003169 3B3424              <1> 	cmp esi, [esp]
  4101 0000316C 7207                <1> 	jb .done
  4102 0000316E 3D00000000          <1> 	cmp eax, 0
  4103 00003173 75B9                <1> 	jne .loop
  4104                              <1> .done:
  4105 00003175 5E                  <1> 	pop esi
  4106 00003176 C3                  <1> 	ret
  4107                              <1> 	
  4108                              <1> 	
  4109 00003177 00                  <1> smallhex db 0
  4110 00003178 01                  <1> firsthexshown db 1
  4111                              <1> showhexsmall:
  4112 00003179 C605[77310000]01    <1> 	mov byte [smallhex], 1
  4113 00003180 E808000000          <1> 	call showhex
  4114 00003185 C605[77310000]00    <1> 	mov byte [smallhex], 0
  4115 0000318C C3                  <1> 	ret
  4116                              <1> showhex:
  4117 0000318D 60                  <1> 	pusha
  4118 0000318E BE[0F310000]        <1> 	mov esi, hexnumber
  4119 00003193 BF[17310000]        <1> 	mov edi, hexnumberend
  4120 00003198 E87DFFFFFF          <1> 	call converthex
  4121 0000319D 803D[78310000]01    <1> 	cmp byte [firsthexshown], 1
  4122 000031A4 7503                <1> 	jne .show
  4123 000031A6 6631D2              <1> 	xor dx, dx
  4124                              <1> .show:
  4125 000031A9 803D[78310000]03    <1> 	cmp byte [firsthexshown], 3
  4126 000031B0 750A                <1> 	jne .nonewhexline
  4127 000031B2 BE[45820000]        <1> 	mov esi, line
  4128 000031B7 E860EBFFFF          <1> 	call print
  4129                              <1> .nonewhexline:
  4130 000031BC 803D[78310000]04    <1> 	cmp byte [firsthexshown], 4
  4131 000031C3 7527                <1> 	jne .notab
  4132 000031C5 B1A0                <1> 	mov cl, 160
  4133 000031C7 28D1                <1> 	sub cl, dl
  4134 000031C9 C0E905              <1> 	shr cl, 5
  4135 000031CC C0E105              <1> 	shl cl, 5
  4136 000031CF 80F900              <1> 	cmp cl, 0
  4137 000031D2 750F                <1> 	jne .nonewline
  4138 000031D4 BE[45820000]        <1> 	mov esi, line
  4139 000031D9 E83EEBFFFF          <1> 	call print
  4140 000031DE E909000000          <1> 	jmp .notab
  4141                              <1> .nonewline:
  4142 000031E3 80C20F              <1> 	add dl, 15
  4143 000031E6 C0EA04              <1> 	shr dl, 4
  4144 000031E9 C0E204              <1> 	shl dl, 4
  4145                              <1> .notab:
  4146 000031EC BE[0F310000]        <1> 	mov esi, hexnumber
  4147 000031F1 803D[77310000]01    <1> 	cmp byte [smallhex],1
  4148 000031F8 7506                <1> 	jne .nosmall
  4149 000031FA 81C606000000        <1> 	add esi, 6
  4150                              <1> .nosmall:
  4151 00003200 803D[78310000]05    <1> 	cmp byte [firsthexshown], 5
  4152 00003207 750A                <1> 	jne .noquiet
  4153 00003209 E8EFEAFFFF          <1> 	call printquiet
  4154 0000320E E918000000          <1> 	jmp .donequiet
  4155                              <1> .noquiet:
  4156 00003213 803D[78310000]06    <1> 	cmp byte [firsthexshown], 6
  4157 0000321A 750A                <1> 	jne .normal
  4158 0000321C E8EFEAFFFF          <1> 	call printhighlight
  4159 00003221 E905000000          <1> 	jmp .donequiet
  4160                              <1> .normal:
  4161 00003226 E8F1EAFFFF          <1> 	call print
  4162                              <1> .donequiet:
  4163 0000322B 803D[78310000]02    <1> 	cmp byte [firsthexshown], 2
  4164 00003232 750A                <1> 	jne .shown
  4165 00003234 BE[45820000]        <1> 	mov esi, line
  4166 00003239 E8DEEAFFFF          <1> 	call print
  4167                              <1> .shown:
  4168 0000323E C605[78310000]00    <1> 	mov byte [firsthexshown], 0
  4169 00003245 61                  <1> 	popa
  4170 00003246 C3                  <1> 	ret
  4171                              <1> 
  4172                              <1> 
  4173 00003247 303030303030303030- <1> decnumber db "00000000000000"
  4174 00003250 3030303030          <1>
  4175 00003255 2000                <1> decnumberend: db " ",0
  4176                              <1> 
  4177                              <1> showdec: ;;same as showhex, just uses decimal conversion
  4178 00003257 60                  <1> 	pusha
  4179 00003258 BF[47320000]        <1> 	mov edi, decnumber
  4180 0000325D BE[55320000]        <1> 	mov esi, decnumberend
  4181                              <1> .clear:
  4182 00003262 C60730              <1> 	mov byte [edi], '0'
  4183 00003265 47                  <1> 	inc edi
  4184 00003266 39F7                <1> 	cmp edi, esi
  4185 00003268 72F8                <1> 	jb .clear
  4186 0000326A BF[47320000]        <1> 	mov edi, decnumber
  4187 0000326F E8C6FDFFFF          <1> 	call convert
  4188 00003274 803D[78310000]01    <1> 	cmp byte [firsthexshown], 1
  4189 0000327B 7503                <1> 	jne .show
  4190 0000327D 6631D2              <1> 	xor dx, dx
  4191                              <1> .show:
  4192 00003280 803D[78310000]03    <1> 	cmp byte [firsthexshown], 3
  4193 00003287 750A                <1> 	jne .nonewdecline
  4194 00003289 BE[45820000]        <1> 	mov esi, line
  4195 0000328E E889EAFFFF          <1> 	call print
  4196                              <1> .nonewdecline:
  4197 00003293 803D[78310000]04    <1> 	cmp byte [firsthexshown], 4
  4198 0000329A 7527                <1> 	jne .notab
  4199 0000329C B1A0                <1> 	mov cl, 160
  4200 0000329E 28D1                <1> 	sub cl, dl
  4201 000032A0 C0E905              <1> 	shr cl, 5
  4202 000032A3 C0E105              <1> 	shl cl, 5
  4203 000032A6 80F900              <1> 	cmp cl, 0
  4204 000032A9 750F                <1> 	jne .nonewline
  4205 000032AB BE[45820000]        <1> 	mov esi, line
  4206 000032B0 E867EAFFFF          <1> 	call print
  4207 000032B5 E909000000          <1> 	jmp .notab
  4208                              <1> .nonewline:
  4209 000032BA 80C20F              <1> 	add dl, 15
  4210 000032BD C0EA04              <1> 	shr dl, 4
  4211 000032C0 C0E204              <1> 	shl dl, 4
  4212                              <1> .notab:
  4213 000032C3 BE[47320000]        <1> 	mov esi, decnumber
  4214 000032C8 4E                  <1> 	dec esi
  4215                              <1> .sifind:
  4216 000032C9 46                  <1> 	inc esi
  4217 000032CA 803E30              <1> 	cmp byte [esi], '0'
  4218 000032CD 74FA                <1> 	je .sifind
  4219 000032CF E848EAFFFF          <1> 	call print
  4220 000032D4 803D[78310000]02    <1> 	cmp byte [firsthexshown], 2
  4221 000032DB 750A                <1> 	jne .shown
  4222 000032DD BE[45820000]        <1> 	mov esi, line
  4223 000032E2 E835EAFFFF          <1> 	call print
  4224                              <1> .shown:
  4225 000032E7 C605[78310000]00    <1> 	mov byte [firsthexshown], 0
  4226 000032EE 61                  <1> 	popa
  4227 000032EF C3                  <1> 	ret
  4228                              <1> 	
  4229                              <1> cnvrthextxt:
  4230 000032F0 31C9                <1> 	xor ecx, ecx
  4231 000032F2 31C0                <1> 	xor eax, eax
  4232 000032F4 31D2                <1> 	xor edx, edx
  4233 000032F6 31DB                <1> 	xor ebx, ebx
  4234 000032F8 4E                  <1> 	dec esi
  4235                              <1> .end:
  4236 000032F9 46                  <1> 	inc esi
  4237 000032FA 8A06                <1> 	mov al, [esi]
  4238 000032FC 3C00                <1> 	cmp al, 0
  4239 000032FE 75F9                <1> 	jne .end
  4240                              <1> .loop:
  4241 00003300 4E                  <1> 	dec esi
  4242 00003301 8A06                <1> 	mov al, [esi]
  4243 00003303 3C41                <1> 	cmp al, "A"
  4244 00003305 7328                <1> 	jae .char
  4245 00003307 2C30                <1> 	sub al, 48
  4246 00003309 3C10                <1> 	cmp al, 16
  4247 0000330B 7721                <1> 	ja .done
  4248                              <1> .donechar:
  4249 0000330D 81FA00000000        <1> 	cmp edx, 0
  4250 00003313 740E                <1> 	je .noshl
  4251 00003315 89D3                <1> 	mov ebx, edx
  4252                              <1> .shl:
  4253 00003317 C1E004              <1> 	shl eax, 4
  4254 0000331A 4B                  <1> 	dec ebx
  4255 0000331B 81FB00000000        <1> 	cmp ebx, 0
  4256 00003321 75F4                <1> 	jne .shl
  4257                              <1> .noshl:
  4258 00003323 42                  <1> 	inc edx
  4259 00003324 01C1                <1> 	add ecx, eax
  4260 00003326 81FA08000000        <1> 	cmp edx, 8
  4261 0000332C 72D2                <1> 	jb .loop
  4262                              <1> .done:
  4263 0000332E C3                  <1> 	ret
  4264                              <1> .char:
  4265 0000332F 3C46                <1> 	cmp al, "F"
  4266 00003331 77FB                <1> 	ja .done
  4267 00003333 2C41                <1> 	sub al, "A"
  4268 00003335 040A                <1> 	add al, 0xA
  4269 00003337 EBD4                <1> 	jmp .donechar
  4270                              <1> 	
  4271                              <1> 	
  4272                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4273 00003339 31C9                <1> 	xor ecx, ecx
  4274 0000333B 31C0                <1> 	xor eax, eax
  4275 0000333D 31D2                <1> 	xor edx, edx
  4276 0000333F 31DB                <1> 	xor ebx, ebx
  4277 00003341 4E                  <1> 	dec esi
  4278                              <1> .lp:
  4279 00003342 46                  <1> 	inc esi
  4280 00003343 8A06                <1> 	mov al, [esi]
  4281 00003345 3C00                <1> 	cmp al, 0
  4282 00003347 75F9                <1> 	jne .lp
  4283 00003349 4E                  <1> 	dec esi
  4284 0000334A 8A06                <1> 	mov al, [esi]
  4285 0000334C 3C2E                <1> 	cmp al, '.'
  4286 0000334E 7503                <1> 	jne .dot
  4287 00003350 46                  <1> 	inc esi
  4288 00003351 EBEF                <1> 	jmp .lp
  4289                              <1> .dot:
  4290 00003353 3C20                <1> 	cmp al, ' '
  4291 00003355 7404                <1> 	je .zero
  4292 00003357 3C30                <1> 	cmp al, '0'
  4293 00003359 7504                <1> 	jne .txtlp
  4294                              <1> .zero: 
  4295 0000335B 39FE                <1> 		cmp esi, edi
  4296 0000335D 7458                <1> 		je .done
  4297                              <1> .txtlp:
  4298 0000335F 31C0                <1> 	xor eax, eax
  4299 00003361 8A06                <1> 	mov al, [esi]
  4300 00003363 3C3D                <1> 	cmp al, '='
  4301 00003365 7450                <1> 	je .done
  4302 00003367 3C30                <1> 	cmp al, 48
  4303 00003369 724C                <1> 	jb .done
  4304 0000336B 3C23                <1> 	cmp al, '#'
  4305 0000336D 7448                <1> 	je .done
  4306 0000336F 39FE                <1> 	cmp esi, edi
  4307 00003371 7244                <1> 	jb .done
  4308 00003373 81F900000000        <1> 	cmp ecx, 0
  4309 00003379 7708                <1> 	ja .exp
  4310 0000337B 2C30                <1> .noexp:	sub al, 48
  4311 0000337D 01C2                <1> 	add edx, eax
  4312 0000337F 4E                  <1> 	dec esi
  4313 00003380 41                  <1> 	inc ecx
  4314 00003381 EBDC                <1> 	jmp .txtlp
  4315 00003383 81F900000000        <1> .exp:	cmp ecx, 0
  4316 00003389 74F0                <1> 	je .noexp
  4317 0000338B 2C30                <1> 	sub al, 48
  4318 0000338D 51                  <1> 	push ecx
  4319 0000338E 89C3                <1> .expmul:	mov ebx, eax
  4320 00003390 01D8                <1> 	add eax, ebx
  4321 00003392 01D8                <1> 	add eax, ebx
  4322 00003394 01D8                <1> 	add eax, ebx
  4323 00003396 01D8                <1> 	add eax, ebx
  4324 00003398 01D8                <1> 	add eax, ebx
  4325 0000339A 01D8                <1> 	add eax, ebx
  4326 0000339C 01D8                <1> 	add eax, ebx
  4327 0000339E 01D8                <1> 	add eax, ebx
  4328 000033A0 01D8                <1> 	add eax, ebx
  4329 000033A2 81E901000000        <1> 	sub ecx, 1
  4330 000033A8 81F900000000        <1> 	cmp ecx, 0
  4331 000033AE 77DE                <1> 	ja .expmul
  4332 000033B0 01C2                <1> 	add edx, eax
  4333 000033B2 59                  <1> 	pop ecx
  4334 000033B3 4E                  <1> 	dec esi
  4335 000033B4 41                  <1> 	inc ecx
  4336 000033B5 EBA8                <1> 	jmp .txtlp
  4337 000033B7 89D1                <1> .done: mov ecx, edx
  4338 000033B9 C3                  <1> 	ret
  4339                                      %include "source/programs.asm"
  4340 000033BA FF2C                <1> filetypes db 255,44
  4341                              <1> progstart:		;programs start here
  4342                              <1> indexfiles:
  4343 000033BC BE[BC330000]        <1> 	mov esi, progstart
  4344 000033C1 BB[E0960300]        <1> 	mov ebx, fileindex
  4345 000033C6 BF[BC330000]        <1> 	mov edi, progstart
  4346 000033CB 81EF02000000        <1> 	sub edi, 2
  4347                              <1> indexloop:
  4348 000033D1 668B0E              <1> 	mov cx, [esi]
  4349                              <1> 	indexloop2:
  4350 000033D4 663B0F              <1> 		cmp cx, [edi]
  4351 000033D7 7424                <1> 		je indexloop2done
  4352 000033D9 81EF02000000        <1> 		sub edi, 2
  4353 000033DF 81FF[BA330000]      <1> 		cmp edi, filetypes
  4354 000033E5 73ED                <1> 		jae indexloop2
  4355 000033E7 BF[BC330000]        <1> 	mov edi, progstart
  4356 000033EC 81EF02000000        <1> 	sub edi, 2
  4357 000033F2 46                  <1> 	inc esi
  4358 000033F3 81FE[78500000]      <1> 	cmp esi, batchprogend
  4359 000033F9 734E                <1> 	jae indexloopdone
  4360 000033FB EBD4                <1> 	jmp indexloop
  4361                              <1> indexloop2done:
  4362 000033FD 66890B              <1> 	mov [ebx], cx
  4363 00003400 81C302000000        <1> 	add ebx, 2
  4364 00003406 81C602000000        <1> 	add esi, 2
  4365                              <1> 	nameindex:
  4366 0000340C 8A0E                <1> 		mov cl, [esi]
  4367 0000340E 80F900              <1> 		cmp cl, 0
  4368 00003411 7406                <1> 		je nameindexdone
  4369 00003413 880B                <1> 		mov [ebx], cl
  4370 00003415 46                  <1> 		inc esi
  4371 00003416 43                  <1> 		inc ebx
  4372 00003417 EBF3                <1> 		jmp nameindex
  4373                              <1> 	nameindexdone:
  4374 00003419 43                  <1> 		inc ebx
  4375 0000341A 66C7030000          <1> 		mov word [ebx], 0
  4376 0000341F 81C302000000        <1> 		add ebx, 2
  4377 00003425 46                  <1> 		inc esi
  4378 00003426 8933                <1> 		mov [ebx], esi
  4379 00003428 81C304000000        <1> 		add ebx, 4
  4380 0000342E 66C7030000          <1> 		mov word [ebx], 0
  4381 00003433 81C302000000        <1> 		add ebx, 2
  4382 00003439 81FB[E09A0300]      <1> 		cmp ebx, fileindexend
  4383 0000343F 7308                <1> 		jae indexloopdone
  4384 00003441 81C601000000        <1> 		add esi, 1
  4385 00003447 EB88                <1> 		jmp indexloop
  4386 00003449 C605[51340000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4387 00003450 C3                  <1> 		ret
  4388 00003451 00                  <1> indexdone db 0
  4389                              <1> %include 'source/programs/_comment.asm' ;#
  4390 00003452 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4391 00003456 C3                  <2> 	ret 
  4392                              <1> %include 'source/programs/_math.asm' ;!
  4393 00003457 FF2C2100            <2> db 255,44,"!",0
  4394                              <2> 	num:	
  4395 0000345B E8C5FBFFFF          <2> 		call clearbuffer
  4396 00003460 C605[E1360000]00    <2> 		mov byte [decimal], 0
  4397 00003467 C605[E2360000]00    <2> 		mov byte [decimal2], 0
  4398 0000346E 8B35[662F0000]      <2> 		mov esi, [currentcommandloc]
  4399 00003474 31C0                <2> 		xor eax, eax
  4400 00003476 31C9                <2> 		xor ecx, ecx
  4401 00003478 31DB                <2> 		xor ebx, ebx
  4402 0000347A 8A06                <2> 	num2:	mov al, [esi]
  4403 0000347C 3C2B                <2> 		cmp al, '+'
  4404 0000347E 741B                <2> 		je operatorfound
  4405 00003480 3C2D                <2> 		cmp al, '-'
  4406 00003482 7417                <2> 		je operatorfound
  4407 00003484 3C2A                <2> 		cmp al, '*'
  4408 00003486 7413                <2> 		je operatorfound
  4409 00003488 3C2F                <2> 		cmp al, '/'
  4410 0000348A 740F                <2> 		je operatorfound
  4411 0000348C 3C5E                <2> 		cmp al, '^'
  4412 0000348E 740B                <2> 		je operatorfound
  4413 00003490 46                  <2> 		inc esi
  4414 00003491 3C00                <2> 		cmp al, 0
  4415 00003493 0F841AF8FFFF        <2> 		je near nwcmd
  4416 00003499 EBDF                <2> 		jmp num2
  4417 0000349B 50                  <2> 	operatorfound: push eax
  4418 0000349C 30E4                <2> 		xor ah, ah
  4419 0000349E 8826                <2> 		mov [esi], ah
  4420 000034A0 89F7                <2> 		mov edi, esi
  4421 000034A2 46                  <2> 		inc esi
  4422 000034A3 8A06                <2> 		mov al, [esi]
  4423 000034A5 3C25                <2> 		cmp al, '%'
  4424 000034A7 0F8462000000        <2> 		je near resultnum1
  4425                              <2> 	varnum2: 
  4426 000034AD 57                  <2> 		push edi
  4427 000034AE E8A4000000          <2> 		call checkdecimal
  4428 000034B3 5F                  <2> 		pop edi
  4429 000034B4 E880FEFFFF          <2> 		call cnvrttxt
  4430                              <2> 	vrnm2:
  4431 000034B9 89CB                <2> 		mov ebx, ecx
  4432 000034BB 53                  <2> 		push ebx
  4433 000034BC E864FBFFFF          <2> 		call clearbuffer
  4434 000034C1 8B35[662F0000]      <2> 		mov esi, [currentcommandloc]
  4435 000034C7 89F7                <2> 		mov edi, esi
  4436 000034C9 46                  <2> 		inc esi
  4437 000034CA 8A06                <2> 		mov al, [esi]
  4438 000034CC 3C25                <2> 		cmp al, '%'
  4439 000034CE 0F844F000000        <2> 		je near resultnum2
  4440                              <2> 	varnum4: 
  4441 000034D4 57                  <2> 		push edi
  4442 000034D5 E869000000          <2> 		call checkdecimal2
  4443 000034DA 5F                  <2> 		pop edi
  4444 000034DB E859FEFFFF          <2> 		call cnvrttxt
  4445                              <2> 	vrnm4:
  4446 000034E0 5B                  <2> 		pop ebx
  4447 000034E1 58                  <2> 		pop eax
  4448 000034E2 3C2B                <2> 		cmp al, '+'
  4449 000034E4 0F849B000000        <2> 		je near plusnum
  4450 000034EA 3C2D                <2> 		cmp al, '-'
  4451 000034EC 0F849F000000        <2> 		je near subnum
  4452 000034F2 3C2A                <2> 		cmp al, '*'
  4453 000034F4 0F84A3000000        <2> 		je near mulnum
  4454 000034FA 3C2F                <2> 		cmp al, '/'
  4455 000034FC 0F84B1000000        <2> 		je near divnum
  4456 00003502 3C5E                <2> 		cmp al, '^'
  4457 00003504 0F84CE000000        <2> 		je near expnum
  4458 0000350A E9A4F7FFFF          <2> 		jmp nwcmd
  4459                              <2> 	resultnum1:
  4460 0000350F 8A0D[E3360000]      <2> 		mov cl, [decimalresult]
  4461 00003515 880D[E1360000]      <2> 		mov [decimal], cl
  4462 0000351B 8B0D[E4360000]      <2> 		mov ecx, [result]
  4463 00003521 EB96                <2> 		jmp vrnm2
  4464                              <2> 	resultnum2:
  4465 00003523 8A0D[E1360000]      <2> 		mov cl, [decimal]
  4466 00003529 880D[E2360000]      <2> 		mov [decimal2], cl
  4467 0000352F 8A0D[E3360000]      <2> 		mov cl, [decimalresult]
  4468 00003535 880D[E1360000]      <2> 		mov [decimal], cl
  4469 0000353B 8B0D[E4360000]      <2> 		mov ecx, [result]
  4470 00003541 EB9D                <2> 		jmp vrnm4
  4471                              <2> 	checkdecimal2:
  4472 00003543 8A25[E1360000]      <2> 		mov ah, [decimal]
  4473 00003549 8825[E2360000]      <2> 		mov [decimal2], ah
  4474 0000354F 30E4                <2> 		xor ah, ah
  4475 00003551 8825[E1360000]      <2> 		mov [decimal], ah
  4476                              <2> 	checkdecimal:
  4477 00003557 89F7                <2> 		mov edi, esi
  4478                              <2> 	chkdec1:
  4479 00003559 8A07                <2> 		mov al, [edi]
  4480 0000355B 3C2E                <2> 		cmp al, '.'
  4481 0000355D 0F840B000000        <2> 		je near fnddec
  4482 00003563 3C00                <2> 		cmp al, 0
  4483 00003565 0F8419000000        <2> 		je near nodecimal
  4484 0000356B 47                  <2> 		inc edi
  4485 0000356C EBEB                <2> 		jmp chkdec1
  4486                              <2> 	fnddec:
  4487 0000356E 8A4701              <2> 		mov al, [edi + 1]
  4488 00003571 8807                <2> 		mov [edi], al
  4489 00003573 3C00                <2> 		cmp al, 0
  4490 00003575 0F8409000000        <2> 		je near nodecimal
  4491 0000357B FE05[E1360000]      <2> 		inc byte [decimal]
  4492 00003581 47                  <2> 		inc edi
  4493 00003582 EBEA                <2> 		jmp fnddec
  4494                              <2> 	nodecimal:
  4495 00003584 C3                  <2> 		ret
  4496                              <2> 	plusnum:
  4497 00003585 E815010000          <2> 		call decaddfix
  4498 0000358A 01D9                <2> 		add ecx, ebx
  4499 0000358C E98A000000          <2> 		jmp retnum
  4500                              <2> 	subnum:
  4501 00003591 E809010000          <2> 		call decaddfix
  4502 00003596 29D9                <2> 		sub ecx, ebx
  4503 00003598 E97E000000          <2> 		jmp retnum
  4504                              <2> 	mulnum:
  4505 0000359D A0[E2360000]        <2> 		mov al, [decimal2]
  4506 000035A2 0005[E1360000]      <2> 		add [decimal], al
  4507 000035A8 89C8                <2> 		mov eax, ecx
  4508 000035AA F7E3                <2> 		mul ebx
  4509 000035AC 89C1                <2> 		mov ecx, eax
  4510 000035AE E968000000          <2> 		jmp retnum
  4511                              <2> 	divnum:
  4512 000035B3 E8E7000000          <2> 		call decaddfix
  4513 000035B8 30C0                <2> 		xor al, al
  4514 000035BA A2[E1360000]        <2> 		mov [decimal], al
  4515 000035BF 31D2                <2> 		xor edx, edx
  4516 000035C1 89C8                <2> 		mov eax, ecx
  4517 000035C3 81FB00000000        <2> 		cmp ebx, 0
  4518 000035C9 0F844C000000        <2> 		je near retnum
  4519 000035CF F7F3                <2> 		div ebx
  4520 000035D1 89C1                <2> 		mov ecx, eax
  4521 000035D3 E943000000          <2> 		jmp retnum
  4522                              <2> 	expnum:
  4523 000035D8 8A15[E1360000]      <2> 		mov dl, [decimal]
  4524 000035DE 8815[E2360000]      <2> 		mov [decimal2], dl
  4525 000035E4 31D2                <2> 		xor edx, edx
  4526 000035E6 89C8                <2> 		mov eax, ecx
  4527 000035E8 89D9                <2> 		mov ecx, ebx
  4528 000035EA 89C3                <2> 		mov ebx, eax
  4529 000035EC 81F900000000        <2> 		cmp ecx, 0
  4530 000035F2 7422                <2> 		je noexpnum
  4531 000035F4 49                  <2> 		dec ecx
  4532 000035F5 81F900000000        <2> 		cmp ecx, 0
  4533 000035FB 7412                <2> 		je noexpnumlp
  4534 000035FD F7E3                <2> 	expnumlp: mul ebx
  4535 000035FF 8A15[E2360000]      <2> 		mov dl, [decimal2]
  4536 00003605 0015[E1360000]      <2> 		add [decimal], dl
  4537 0000360B 31D2                <2> 		xor edx, edx
  4538 0000360D E2EE                <2> 		loop expnumlp
  4539                              <2> 	noexpnumlp:
  4540 0000360F 89C1                <2> 		mov ecx, eax
  4541 00003611 E905000000          <2> 		jmp retnum
  4542                              <2> 	noexpnum:
  4543 00003616 B901000000          <2> 		mov ecx, 1
  4544                              <2> 	retnum: 
  4545 0000361B BE[74B50300]        <2> 		mov esi, numbuf
  4546 00003620 890D[E4360000]      <2> 		mov [result], ecx
  4547 00003626 E80FFAFFFF          <2> 		call convert
  4548 0000362B BE[74B50300]        <2> 		mov esi, numbuf
  4549 00003630 8A25[E1360000]      <2> 		mov ah, [decimal]
  4550 00003636 8825[E3360000]      <2> 		mov [decimalresult], ah
  4551 0000363C 80FC00              <2> 		cmp ah, 0
  4552 0000363F 0F8425000000        <2> 		je near noputdecimal
  4553                              <2> 	putdecimal:
  4554 00003645 4E                  <2> 		dec esi
  4555 00003646 FECC                <2> 		dec ah
  4556 00003648 80FC00              <2> 		cmp ah, 0
  4557 0000364B 0F87F4FFFFFF        <2> 		ja near putdecimal
  4558 00003651 4E                  <2> 		dec esi
  4559 00003652 8A06                <2> 		mov al, [esi]
  4560 00003654 C6062E              <2> 		mov byte [esi], '.'
  4561                              <2> 	decputloop:
  4562 00003657 4E                  <2> 		dec esi
  4563 00003658 8A26                <2> 		mov ah, [esi]
  4564 0000365A 8806                <2> 		mov [esi], al
  4565 0000365C 88E0                <2> 		mov al, ah
  4566 0000365E 81FE[60B50300]      <2> 		cmp esi, buf2
  4567 00003664 0F87EDFFFFFF        <2> 		ja near decputloop
  4568                              <2> 	noputdecimal:
  4569 0000366A BE[60B50300]        <2> 		mov esi, buf2
  4570 0000366F E809000000          <2> 		call chkadd
  4571 00003674 E93AF6FFFF          <2> 		jmp nwcmd
  4572 00003679 00000000            <2> edxnumbuf dw 0,0
  4573 0000367D 8A06                <2> 	chkadd: mov al, [esi]
  4574 0000367F 3C30                <2> 		cmp al, '0'
  4575 00003681 750C                <2> 		jne dnadd
  4576 00003683 46                  <2> 		inc esi
  4577 00003684 81FE[74B50300]      <2> 		cmp esi, numbuf
  4578 0000368A 7402                <2> 		je dnaddm1
  4579 0000368C EBEF                <2> 		jmp chkadd
  4580 0000368E 4E                  <2> 	dnaddm1: dec esi
  4581 0000368F E888E6FFFF          <2> 	dnadd:	call print
  4582 00003694 BE[45820000]        <2> 		mov esi, line
  4583 00003699 E87EE6FFFF          <2> 		call print
  4584 0000369E C3                  <2> 		ret
  4585                              <2> 		
  4586                              <2> 	decaddfix:
  4587 0000369F A0[E2360000]        <2> 		mov al, [decimal2]
  4588 000036A4 8A25[E1360000]      <2> 		mov ah, [decimal]
  4589 000036AA 38E0                <2> 		cmp al, ah
  4590 000036AC 7432                <2> 		je gooddecadd
  4591 000036AE 38E0                <2> 		cmp al, ah
  4592 000036B0 721A                <2> 		jb lowdecadd
  4593                              <2> 	highdecadd:
  4594 000036B2 FEC4                <2> 		inc ah
  4595 000036B4 89CA                <2> 		mov edx, ecx
  4596 000036B6 C1E103              <2> 		shl ecx, 3
  4597 000036B9 01D1                <2> 		add ecx, edx
  4598 000036BB 01D1                <2> 		add ecx, edx
  4599 000036BD 38E0                <2> 		cmp al, ah
  4600 000036BF 77F1                <2> 		ja highdecadd
  4601 000036C1 8825[E1360000]      <2> 		mov [decimal], ah
  4602 000036C7 E914000000          <2> 		jmp gooddecadd
  4603                              <2> 	lowdecadd:
  4604 000036CC FEC0                <2> 		inc al
  4605 000036CE 89DA                <2> 		mov edx, ebx
  4606 000036D0 C1E303              <2> 		shl ebx, 3
  4607 000036D3 01D3                <2> 		add ebx, edx
  4608 000036D5 01D3                <2> 		add ebx, edx
  4609 000036D7 38E0                <2> 		cmp al, ah
  4610 000036D9 72F1                <2> 		jb lowdecadd
  4611 000036DB A2[E1360000]        <2> 		mov [decimal], al
  4612                              <2> 	gooddecadd:
  4613 000036E0 C3                  <2> 		ret
  4614                              <2> 		
  4615 000036E1 00                  <2> decimal db 0
  4616 000036E2 00                  <2> decimal2 db 0
  4617 000036E3 00                  <2> decimalresult db 0
  4618 000036E4 00000000            <2> result dd 0
  4619                              <1> %include 'source/programs/_variables.asm' ;% and $
  4620 000036E8 FF2C2500            <2> db 255,44,"%",0
  4621                              <2> 	ans:
  4622 000036EC BE[60B50300]        <2> 		mov esi, buf2
  4623 000036F1 E887FFFFFF          <2> 		call chkadd
  4624 000036F6 C3                  <2> 		ret
  4625                              <2> 		
  4626 000036F7 FF2C2400            <2> db 255,44,"$",0
  4627 000036FB 8B35[662F0000]      <2> var: mov esi, [currentcommandloc]
  4628 00003701 BB[609D0300]        <2> 	mov ebx, variables
  4629 00003706 8A06                <2> lkeq:	mov al, [esi]
  4630 00003708 3C3D                <2> 	cmp al, '='
  4631 0000370A 741B                <2> 	je eqfnd	;is there an '=' sign?
  4632 0000370C 3C00                <2> 	cmp al, 0
  4633 0000370E 7403                <2> 	je echovars
  4634 00003710 46                  <2> 	inc esi
  4635 00003711 EBF3                <2> 	jmp lkeq
  4636 00003713 BE[609D0300]        <2> echovars: mov esi, variables
  4637 00003718 BB[60AD0300]        <2> 	mov ebx, varend
  4638 0000371D B105                <2> 	mov cl, 5
  4639 0000371F B504                <2> 	mov ch, 4
  4640 00003721 E89EF8FFFF          <2> 	call array
  4641 00003726 C3                  <2> 	ret
  4642 00003727 46                  <2> eqfnd:	inc esi
  4643 00003728 8A06                <2> 	mov al, [esi]
  4644 0000372A 3C00                <2> 	cmp al, 0
  4645 0000372C 7410                <2> 	je readvar
  4646 0000372E 8B35[662F0000]      <2> 	mov esi, [currentcommandloc]
  4647 00003734 BB[609D0300]        <2> 	mov ebx, variables
  4648 00003739 E919000000          <2> 	jmp seek
  4649                              <2> readvar:
  4650 0000373E B00A                <2> 	mov al, 10
  4651 00003740 66BB0700            <2> 	mov bx, 7
  4652 00003744 C605[00230000]00    <2> 	mov byte [commandedit], 0
  4653 0000374B BF[60B50300]        <2> 	mov edi, buftxtend
  4654 00003750 E8FAE6FFFF          <2> 	call rdprint
  4655 00003755 EBA4                <2> 	jmp var
  4656 00003757 668B03              <2> seek:	mov ax, [ebx]
  4657 0000375A B105                <2> 	mov cl, 5
  4658 0000375C B504                <2> 	mov ch, 4
  4659 0000375E 663D0000            <2> 	cmp ax, 0
  4660 00003762 0F845B000000        <2> 	je near save
  4661 00003768 6639C8              <2> 	cmp ax, cx
  4662 0000376B 7403                <2> 	je skfnd
  4663 0000376D 43                  <2> 	inc ebx
  4664 0000376E EBE7                <2> 	jmp seek
  4665 00003770 8B35[662F0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4666 00003776 46                  <2> 	inc esi
  4667 00003777 81C302000000        <2> 	add ebx, 2
  4668 0000377D 89DF                <2> 	mov edi, ebx
  4669 0000377F B13D                <2> 	mov cl, '='
  4670 00003781 E81FF8FFFF          <2> 	call cndtest
  4671 00003786 3C01                <2> 	cmp al, 1	
  4672 00003788 7418                <2> 	je varfnd
  4673 0000378A 89FB                <2> 	mov ebx, edi
  4674 0000378C 8B35[662F0000]      <2> 	mov esi, [currentcommandloc]
  4675 00003792 668B03              <2> 	mov ax, [ebx]
  4676 00003795 663D0000            <2> 	cmp ax, 0
  4677 00003799 0F8424000000        <2> 	je near save
  4678 0000379F 43                  <2> 	inc ebx
  4679 000037A0 EBB5                <2> 	jmp seek
  4680 000037A2 8A03                <2> varfnd:	mov al, [ebx]
  4681 000037A4 3C04                <2> 	cmp al, 4
  4682 000037A6 7404                <2> 	je save2
  4683 000037A8 4B                  <2> 	dec ebx
  4684 000037A9 4E                  <2> 	dec esi
  4685 000037AA EBF6                <2> 	jmp varfnd
  4686 000037AC 4B                  <2> save2:	dec ebx
  4687 000037AD 4E                  <2> 	dec esi
  4688 000037AE 8A03                <2> 	mov al, [ebx]
  4689 000037B0 3C05                <2> 	cmp al, 5
  4690 000037B2 7402                <2> 	je remove
  4691 000037B4 EBEC                <2> 	jmp varfnd
  4692 000037B6 8A03                <2> remove: mov al, [ebx]
  4693 000037B8 3C00                <2> 	cmp al, 0
  4694 000037BA 749B                <2> 	je seek
  4695 000037BC 30C0                <2> 	xor al, al
  4696 000037BE 8803                <2> 	mov [ebx], al
  4697 000037C0 43                  <2> 	inc ebx
  4698 000037C1 EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4699 000037C3 8B35[662F0000]      <2> save:	mov esi, [currentcommandloc]
  4700 000037C9 43                  <2> 	inc ebx
  4701 000037CA B005                <2> 	mov al, 5
  4702 000037CC B404                <2> 	mov ah, 4
  4703 000037CE 668903              <2> 	mov [ebx], ax
  4704 000037D1 43                  <2> 	inc ebx
  4705 000037D2 43                  <2> svhere:	inc ebx
  4706 000037D3 46                  <2> 	inc esi
  4707 000037D4 8A06                <2> 	mov al, [esi]
  4708 000037D6 3C00                <2> 	cmp al, 0
  4709 000037D8 0F844A000000        <2> 	je near svdone
  4710 000037DE 3C25                <2> 	cmp al, '%'
  4711 000037E0 7404                <2> 	je ans2
  4712 000037E2 8803                <2> 	mov [ebx], al	
  4713 000037E4 EBEC                <2> 	jmp svhere
  4714 000037E6 56                  <2> ans2:	push esi
  4715 000037E7 BE[60B50300]        <2> 	mov esi, buf2
  4716 000037EC E823000000          <2> 	call ansfnd
  4717 000037F1 E803000000          <2> 	call anscp
  4718 000037F6 5E                  <2> 	pop esi
  4719 000037F7 EBD9                <2> 	jmp svhere
  4720 000037F9 8A06                <2> anscp:	mov al, [esi]
  4721 000037FB 8803                <2> 	mov [ebx], al
  4722 000037FD 81FE[74B50300]      <2> 	cmp esi, numbuf
  4723 00003803 74CD                <2> 	je svhere
  4724 00003805 3C00                <2> 	cmp al, 0
  4725 00003807 74C9                <2> 	je svhere
  4726 00003809 43                  <2> 	inc ebx
  4727 0000380A 46                  <2> 	inc esi
  4728 0000380B EBEC                <2> 	jmp anscp
  4729 0000380D 5E                  <2> ansnf:	pop esi
  4730 0000380E 8A06                <2> 	mov al, [esi]
  4731 00003810 8803                <2> 	mov [ebx], al
  4732 00003812 EBBE                <2> 	jmp svhere
  4733 00003814 46                  <2> ansfnd:	inc esi
  4734 00003815 81FE[73B50300]      <2> 	cmp esi, numbuf - 1
  4735 0000381B 740A                <2> 	je fndans
  4736 0000381D 8A06                <2> 	mov al, [esi]
  4737 0000381F 3C00                <2> 	cmp al, 0
  4738 00003821 74EA                <2> 	je ansnf
  4739 00003823 3C30                <2> 	cmp al, '0'
  4740 00003825 74ED                <2> 	je ansfnd
  4741                              <2> fndans:
  4742 00003827 C3                  <2> 	ret
  4743 00003828 30C0                <2> svdone:	xor al, al
  4744 0000382A 8803                <2> 	mov [ebx], al
  4745 0000382C C3                  <2> 	ret
  4746                              <1> %include 'source/programs/_run.asm' ;./
  4747                              <2> 
  4748 0000382D 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4749 00003831 FF2C2E2F00          <2> 	db 255,44,"./",0
  4750                              <2> rundiskprog:
  4751 00003836 8B3D[662F0000]      <2> 	mov edi, [currentcommandloc]
  4752 0000383C 81C702000000        <2> 	add edi, 2
  4753 00003842 BE00004000          <2> 	mov esi, 0x400000
  4754 00003847 E8992A0000          <2> 	call loadfile
  4755 0000384C 81FA94010000        <2> 	cmp edx, 404
  4756 00003852 746A                <2> 	je noprogfound
  4757 00003854 BB00004000          <2> 	mov ebx, 0x400000
  4758 00003859 A1[2D380000]        <2> 	mov eax, [elfstart]
  4759 0000385E 3903                <2> 	cmp [ebx], eax
  4760 00003860 0F8437000000        <2> 	je near runelf
  4761 00003866 66813B4558          <2> 	cmp word [ebx], "EX"
  4762 0000386B 7577                <2> 	jne progbatchfound
  4763 0000386D 81C302000000        <2> 	add ebx, 2
  4764 00003873 8B3D[662F0000]      <2> 	mov edi, [currentcommandloc]
  4765 00003879 81C702000000        <2> 	add edi, 2
  4766                              <2> findspaceprog:
  4767 0000387F 8A07                <2> 	mov al, [edi]
  4768 00003881 47                  <2> 	inc edi
  4769 00003882 3C20                <2> 	cmp al, " "
  4770 00003884 75F9                <2> 	jne findspaceprog
  4771                              <2> findnonspaceprog:
  4772 00003886 8A07                <2> 	mov al, [edi]
  4773 00003888 47                  <2> 	inc edi
  4774 00003889 3C20                <2> 	cmp al, " "
  4775 0000388B 74F9                <2> 	je findnonspaceprog
  4776 0000388D 4F                  <2> 	dec edi
  4777 0000388E 8925[E09A0300]      <2> 	mov [previousstack], esp
  4778 00003894 FFD3                <2> 	call ebx
  4779 00003896 8B25[E09A0300]      <2> 	mov esp, [previousstack]
  4780 0000389C C3                  <2> 	ret
  4781                              <2> runelf:
  4782 0000389D 8B3D[662F0000]      <2> 	mov edi, [currentcommandloc]
  4783 000038A3 81C702000000        <2> 	add edi, 2
  4784 000038A9 81C380000000        <2> 	add ebx, 0x80
  4785 000038AF 8925[E09A0300]      <2> 	mov [previousstack], esp
  4786 000038B5 FFD3                <2> 	call ebx
  4787 000038B7 8B25[E09A0300]      <2> 	mov esp, [previousstack]
  4788 000038BD C3                  <2> 	ret
  4789                              <2> noprogfound:
  4790 000038BE BE[0C820000]        <2> 	mov esi, notfound1
  4791 000038C3 E854E4FFFF          <2> 	call print
  4792 000038C8 8B35[662F0000]      <2> 	mov esi, [currentcommandloc]
  4793 000038CE 81C602000000        <2> 	add esi, 2
  4794 000038D4 E843E4FFFF          <2> 	call print
  4795 000038D9 BE[14820000]        <2> 	mov esi, notfound2
  4796 000038DE E839E4FFFF          <2> 	call print
  4797 000038E3 C3                  <2> 	ret
  4798                              <2> progbatchfound:
  4799 000038E4 BF00004000          <2> 		mov edi, 0x400000
  4800 000038E9 C605[5A9D0300]01    <2> 		mov byte [BATCHISON], 1
  4801                              <2> 	batchrunloop:
  4802 000038F0 E89BF3FFFF          <2> 		call buftxtclear
  4803 000038F5 BE[60B10300]        <2> 		mov esi, buftxt
  4804 000038FA 8935[662F0000]      <2> 		mov [currentcommandloc], esi
  4805                              <2> 	batchrunloop2:
  4806 00003900 B10A                <2> 		mov cl, 10
  4807 00003902 B50D                <2> 		mov ch, 13
  4808 00003904 380F                <2> 		cmp [edi], cl
  4809 00003906 0F8419000000        <2> 		je near nxtbatchrunline
  4810 0000390C 382F                <2> 		cmp [edi], ch
  4811 0000390E 0F8411000000        <2> 		je near nxtbatchrunline
  4812 00003914 803F00              <2> 		cmp byte [edi], 0
  4813 00003917 0F8408000000        <2> 		je near nxtbatchrunline
  4814 0000391D 8A07                <2> 		mov al, [edi]
  4815 0000391F 8806                <2> 		mov [esi], al
  4816 00003921 46                  <2> 		inc esi
  4817 00003922 47                  <2> 		inc edi
  4818 00003923 EBDB                <2> 		jmp batchrunloop2
  4819                              <2> 	nxtbatchrunline:
  4820 00003925 47                  <2> 		inc edi
  4821 00003926 380F                <2> 		cmp [edi], cl
  4822 00003928 74FB                <2> 		je nxtbatchrunline
  4823 0000392A 382F                <2> 		cmp [edi], ch
  4824 0000392C 74F7                <2> 		je nxtbatchrunline
  4825 0000392E 893D[8C390000]      <2> 		mov [batchedi], edi
  4826 00003934 893D[569D0300]      <2> 		mov [BATCHPOS], edi
  4827 0000393A C60600              <2> 		mov byte [esi], 0
  4828 0000393D BE[60B10300]        <2> 		mov esi, buftxt
  4829 00003942 803E00              <2> 		cmp byte [esi], 0
  4830 00003945 0F8439000000        <2> 		je near nobatchfoundrun
  4831 0000394B 31DB                <2> 		xor ebx, ebx
  4832 0000394D 8A1D[F19C0300]      <2> 		mov bl, [IFON]
  4833 00003953 80FB00              <2> 		cmp bl, 0
  4834 00003956 0F8534000000        <2> 		jne near iftestbatch
  4835                              <2> 	doneiftest:
  4836 0000395C 803D[623A0000]00    <2> 		cmp byte [runnextline], 0
  4837 00003963 0F8405000000        <2> 		je near noruniftest
  4838 00003969 E822F5FFFF          <2> 		call run
  4839                              <2> 	noruniftest:
  4840 0000396E C605[623A0000]01    <2> 		mov byte [runnextline], 1
  4841 00003975 8B3D[8C390000]      <2> 		mov edi, [batchedi]
  4842 0000397B 803F00              <2> 		cmp byte [edi], 0
  4843 0000397E 0F856CFFFFFF        <2> 		jne near batchrunloop
  4844                              <2> 	nobatchfoundrun:
  4845 00003984 C605[5A9D0300]00    <2> 		mov byte [BATCHISON], 0
  4846 0000398B C3                  <2> 		ret
  4847                              <2> 	
  4848 0000398C 00000000            <2> batchedi dd 0	
  4849                              <2> 	
  4850                              <2> 	iftestbatch:
  4851 00003990 BE[F29C0300]        <2> 		mov esi, IFTRUE
  4852 00003995 01DE                <2> 		add esi, ebx
  4853 00003997 803E00              <2> 		cmp byte [esi], 0
  4854 0000399A 0F85BCFFFFFF        <2> 		jne near doneiftest
  4855 000039A0 881D[633A0000]      <2> 		mov [iffalsebuf], bl
  4856 000039A6 803D[5B9D0300]01    <2> 		cmp byte [LOOPON], 1
  4857 000039AD 0F8513000000        <2> 		jne near fifindbatch
  4858 000039B3 E938FFFFFF          <2> 		jmp batchrunloop
  4859                              <2> 	elsetestbatch:
  4860 000039B8 C60601              <2> 		mov byte [esi], 1
  4861 000039BB 81C705000000        <2> 		add edi, 5
  4862 000039C1 E92AFFFFFF          <2> 		jmp batchrunloop
  4863                              <2> 	fifindbatch:
  4864 000039C6 66B96966            <2> 		mov cx, "if"
  4865 000039CA 66B86669            <2> 		mov ax, "fi"
  4866 000039CE 663907              <2> 		cmp [edi], ax
  4867 000039D1 0F8424000000        <2> 		je near fifoundbatch
  4868 000039D7 66390F              <2> 		cmp [edi], cx
  4869 000039DA 0F8465000000        <2> 		je near iffoundbatch
  4870 000039E0 803F00              <2> 		cmp byte [edi], 0
  4871 000039E3 0F8412000000        <2> 		je near fifoundbatch
  4872 000039E9 B8656C7365          <2> 		mov eax, "else"
  4873 000039EE 3907                <2> 		cmp [edi], eax
  4874 000039F0 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4875 000039F6 E973FFFFFF          <2> 		jmp noruniftest
  4876                              <2> 	fifoundbatch:
  4877 000039FB 81C702000000        <2> 		add edi, 2
  4878 00003A01 B00A                <2> 		mov al, 10
  4879 00003A03 3807                <2> 		cmp [edi], al
  4880 00003A05 0F840B000000        <2> 		je near goodfibatch
  4881 00003A0B 803F00              <2> 		cmp byte [edi], 0
  4882 00003A0E 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4883 00003A14 EBB0                <2> 		jmp fifindbatch
  4884                              <2> 	goodfibatch:
  4885 00003A16 B001                <2> 		mov al, 1
  4886 00003A18 2805[F19C0300]      <2> 		sub [IFON], al 
  4887 00003A1E A0[F19C0300]        <2> 		mov al, [IFON]
  4888 00003A23 8A1D[633A0000]      <2> 		mov bl, [iffalsebuf]
  4889 00003A29 38D8                <2> 		cmp al, bl
  4890 00003A2B 7799                <2> 		ja fifindbatch
  4891 00003A2D 8B35[662F0000]      <2> 		mov esi, [currentcommandloc]
  4892 00003A33 81EF02000000        <2> 		sub edi, 2
  4893 00003A39 C605[623A0000]00    <2> 		mov byte [runnextline], 0
  4894 00003A40 E9ABFEFFFF          <2> 		jmp batchrunloop
  4895                              <2> 	iffoundbatch:
  4896 00003A45 B020                <2> 		mov al, ' '
  4897 00003A47 81C702000000        <2> 		add edi, 2
  4898 00003A4D 3807                <2> 		cmp [edi], al
  4899 00003A4F 0F8571FFFFFF        <2> 		jne near fifindbatch
  4900 00003A55 B001                <2> 		mov al, 1
  4901 00003A57 0005[F19C0300]      <2> 		add [IFON], al
  4902 00003A5D E964FFFFFF          <2> 		jmp fifindbatch
  4903                              <2> 		
  4904                              <2> 		
  4905 00003A62 01                  <2> runnextline db 1
  4906 00003A63 00                  <2> iffalsebuf db 0
  4907 00003A64 C3                  <2> notbatch: ret 
  4908                              <1> %ifdef network.included
  4909                              <1> 	%include 'source/programs/arp.asm'
  4910                              <1> %endif
  4911                              <1> %include 'source/programs/batch.asm'
  4912 00003A65 FF2C626174636800    <2> db 255,44,"batch",0
  4913                              <2> 	batchst: 
  4914 00003A6D 8B3D[662F0000]      <2> 		mov edi, [currentcommandloc]
  4915 00003A73 81C706000000        <2> 		add edi, 6
  4916 00003A79 803F00              <2> 		cmp byte [edi], 0
  4917 00003A7C 0F846D000000        <2> 		je near nonamefound
  4918 00003A82 BE00004000          <2> 		mov esi, 0x400000
  4919 00003A87 E859280000          <2> 		call loadfile
  4920 00003A8C 89D0                <2> 		mov eax, edx
  4921 00003A8E 3D94010000          <2> 		cmp eax, 404
  4922 00003A93 7465                <2> 		je goodbatchname
  4923 00003A95 BE[A03A0000]        <2> 		mov esi, badbatchname
  4924 00003A9A E87DE2FFFF          <2> 		call print
  4925 00003A9F C3                  <2> 		ret
  4926 00003AA0 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4927 00003AA9 20616C726561647920- <2>
  4928 00003AB2 657869737473210A00  <2>
  4929 00003ABB 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4930 00003AC4 746F20747970652061- <2>
  4931 00003ACD 206E616D6520616674- <2>
  4932 00003AD6 65722074686520636F- <2>
  4933 00003ADF 6D6D616E642E0A00    <2>
  4934 00003AE7 00000000            <2> 		esicache3 dd 0
  4935 00003AEB 00000000            <2> 		esicache2 dd 0
  4936                              <2> 	nonamefound:
  4937 00003AEF BE[BB3A0000]        <2> 		mov esi, namenotfoundbatch
  4938 00003AF4 E823E2FFFF          <2> 		call print
  4939 00003AF9 C3                  <2> 		ret
  4940                              <2> 	goodbatchname:
  4941 00003AFA BE00004000          <2> 		mov esi, 0x400000
  4942                              <2> 	batchcreate:
  4943 00003AFF 8935[E73A0000]      <2> 		mov [esicache3], esi
  4944 00003B05 BF00008000          <2> 		mov edi, 0x800000
  4945 00003B0A B00A                <2> 		mov al, 10
  4946 00003B0C B307                <2> 		mov bl, 7
  4947 00003B0E B404                <2> 		mov ah, 4
  4948 00003B10 CD30                <2> 		int 30h
  4949 00003B12 8935[EB3A0000]      <2> 		mov [esicache2], esi
  4950 00003B18 8A0E                <2> 		mov cl, [esi]
  4951 00003B1A 8B35[E73A0000]      <2> 		mov esi, [esicache3]
  4952 00003B20 BB[543B0000]        <2> 		mov ebx, exitword
  4953 00003B25 E87BF4FFFF          <2> 		call cndtest
  4954 00003B2A 3C01                <2> 		cmp al, 1
  4955 00003B2C 7411                <2> 		je endbatchcreate
  4956 00003B2E 3C02                <2> 		cmp al, 2
  4957 00003B30 740D                <2> 		je endbatchcreate
  4958 00003B32 8B35[EB3A0000]      <2> 		mov esi, [esicache2]
  4959 00003B38 B00A                <2> 		mov al, 10
  4960 00003B3A 8806                <2> 		mov [esi], al
  4961 00003B3C 46                  <2> 		inc esi
  4962 00003B3D EBC0                <2> 		jmp batchcreate
  4963                              <2> 	endbatchcreate:
  4964 00003B3F 8B35[E73A0000]      <2> 		mov esi, [esicache3]
  4965 00003B45 31C0                <2> 		xor eax, eax
  4966 00003B47 8806                <2> 		mov [esi], al
  4967 00003B49 BE00004000          <2> 		mov esi, 0x400000
  4968 00003B4E E8C9E1FFFF          <2> 		call print
  4969 00003B53 C3                  <2> 		ret
  4970                              <2> 	
  4971 00003B54 5C7800              <2> 	exitword db "\x",0
  4972 00003B57 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4973 00003B60 6F20657869742E0A00  <2>
  4974                              <1> %ifdef gui.background
  4975                              <1> 	%include 'source/programs/background.asm'
  4976                              <1> %endif
  4977                              <1> %include 'source/programs/beep.asm'
  4978 00003B69 FF2C6265657000      <2> 	db 255,44,"beep",0
  4979                              <2> beep:
  4980 00003B70 B8[953B0000]        <2> 	mov eax, beepstart
  4981 00003B75 A3[5F020000]        <2> 	mov [soundpos], eax
  4982 00003B7A B8[993B0000]        <2> 	mov eax, beepend
  4983 00003B7F A3[63020000]        <2> 	mov [soundendpos], eax
  4984 00003B84 C605[5C020000]01    <2> 	mov byte [soundon], 1
  4985                              <2> waitforsoundendbeep:
  4986 00003B8B A0[5C020000]        <2> 	mov al, [soundon]
  4987 00003B90 3C00                <2> 	cmp al, 0
  4988 00003B92 75F7                <2> 	jne waitforsoundendbeep
  4989 00003B94 C3                  <2> 	ret
  4990                              <2> 	
  4991                              <2> beepstart:
  4992 00003B95 3200D111            <2> 	dw 50, 4561
  4993                              <2> beepend:
  4994                              <1> %ifdef dos.compatible
  4995                              <1> %else
  4996                              <1> 	%include 'source/programs/boot.asm'
  4997 00003B99 FF2C626F6F7400      <2> db 255,44,"boot",0
  4998                              <2> quickboot:
  4999                              <2> 	;load and jump to the bootloader
  5000                              <2> 	; mov ecx, 1
  5001                              <2> 	; xor ebx, ebx
  5002                              <2> 	; mov esi, 0x400000
  5003                              <2> 	; call diskr
  5004                              <2> 	; mov ax, LINEAR_SEL
  5005                              <2> 	; mov fs, ax
  5006                              <2> 	; mov esi, 0x400000
  5007                              <2> 	; mov edi, 0x7C00
  5008                              <2> 	; xor ebx, ebx
  5009                              <2> ; .lp:
  5010                              <2> 	; mov ecx, [esi+ebx]
  5011                              <2> 	; mov [fs:edi+ebx], ecx
  5012                              <2> 	; add ebx, 4
  5013                              <2> 	; cmp ebx, 512
  5014                              <2> 	; jb .lp
  5015 00003BA0 66BB[B03B]          <2> 	mov bx, bootload
  5016 00003BA4 66891D[CB0C0000]    <2> 	mov [realmodeptr], bx
  5017 00003BAB E900D0FFFF          <2> 	jmp realmode
  5018                              <2> [BITS 16]
  5019                              <2> bootload:
  5020 00003BB0 B80300              <2> 	mov ax, 3
  5021 00003BB3 31DB                <2> 	xor bx, bx
  5022 00003BB5 CD10                <2> 	int 10h
  5023 00003BB7 EA007C0000          <2> 	jmp 0:0x7C00
  5024                              <2> [BITS 32]
  5025                              <1> %endif
  5026                              <1> %include 'source/programs/cd.asm'
  5027 00003BBC FF2C636400          <2> db 255,44,"cd",0
  5028                              <2> cd:
  5029 00003BC1 8B35[662F0000]      <2> 	mov esi, [currentcommandloc]
  5030 00003BC7 81C603000000        <2> 	add esi, 3
  5031 00003BCD 8B3D[E89A0300]      <2> 	mov edi, [currentfolderloc]
  5032 00003BD3 893D[E49A0300]      <2> 	mov [lastfolderloc], edi
  5033 00003BD9 81C7[EC9A0300]      <2> 	add edi, currentfolder
  5034 00003BDF 4F                  <2> 	dec edi
  5035 00003BE0 66813E2E2E          <2> 	cmp word [esi], ".."
  5036 00003BE5 742A                <2> 	je .moveup
  5037 00003BE7 47                  <2> 	inc edi
  5038                              <2> .movedown:
  5039 00003BE8 8A06                <2> 	mov al, [esi]
  5040 00003BEA 8807                <2> 	mov [edi], al
  5041 00003BEC 47                  <2> 	inc edi
  5042 00003BED 46                  <2> 	inc esi
  5043 00003BEE 3C00                <2> 	cmp al, 0
  5044 00003BF0 740A                <2> 	je .donecd
  5045 00003BF2 81FF[EC9C0300]      <2> 	cmp edi, currentfolderend
  5046 00003BF8 72EE                <2> 	jb .movedown
  5047 00003BFA 30C0                <2> 	xor al, al
  5048                              <2> .donecd:
  5049 00003BFC 4F                  <2> 	dec edi
  5050 00003BFD C6072F              <2> 	mov byte [edi], '/'
  5051 00003C00 47                  <2> 	inc edi
  5052 00003C01 C60700              <2> 	mov byte [edi], 0
  5053 00003C04 81EF[EC9A0300]      <2> 	sub edi, currentfolder
  5054 00003C0A 893D[E89A0300]      <2> 	mov [currentfolderloc], edi
  5055 00003C10 C3                  <2> 	ret
  5056                              <2> .moveup:
  5057 00003C11 31C0                <2> 	xor eax, eax
  5058 00003C13 A3[E49A0300]        <2> 	mov [lastfolderloc], eax
  5059                              <2> .moveuploop:
  5060 00003C18 4F                  <2> 	dec edi
  5061 00003C19 8A07                <2> 	mov al, [edi]
  5062 00003C1B 81FF[EC9A0300]      <2> 	cmp edi, currentfolder
  5063 00003C21 763B                <2> 	jbe .moveupover
  5064 00003C23 3C2F                <2> 	cmp al, '/'
  5065 00003C25 75F1                <2> 	jne .moveuploop
  5066 00003C27 C6072F              <2> 	mov byte [edi], '/'
  5067 00003C2A 47                  <2> 	inc edi
  5068 00003C2B C60700              <2> 	mov byte [edi], 0
  5069 00003C2E 81EF[EC9A0300]      <2> 	sub edi, currentfolder
  5070 00003C34 893D[E89A0300]      <2> 	mov [currentfolderloc], edi
  5071 00003C3A 81C7[EC9A0300]      <2> 	add edi, currentfolder
  5072 00003C40 4F                  <2> 	dec edi
  5073                              <2> .lastfolder:
  5074 00003C41 4F                  <2> 	dec edi
  5075 00003C42 8A07                <2> 	mov al, [edi]
  5076 00003C44 81FF[EC9A0300]      <2> 	cmp edi, currentfolder
  5077 00003C4A 7604                <2> 	jbe .donemoveup
  5078 00003C4C 3C2F                <2> 	cmp al, '/'
  5079 00003C4E 75F1                <2> 	jne .lastfolder
  5080                              <2> .donemoveup:
  5081 00003C50 47                  <2> 	inc edi
  5082 00003C51 81EF[EC9A0300]      <2> 	sub edi, currentfolder
  5083 00003C57 893D[E49A0300]      <2> 	mov [lastfolderloc], edi
  5084 00003C5D C3                  <2> 	ret
  5085                              <2> .moveupover:
  5086 00003C5E BF[EC9A0300]        <2> 	mov edi, currentfolder
  5087 00003C63 C6072F              <2> 	mov byte [edi], '/'
  5088 00003C66 47                  <2> 	inc edi
  5089 00003C67 C60700              <2> 	mov byte [edi], 0
  5090 00003C6A 31C0                <2> 	xor eax, eax
  5091 00003C6C A3[E49A0300]        <2> 	mov [lastfolderloc], eax
  5092 00003C71 40                  <2> 	inc eax
  5093 00003C72 A3[E89A0300]        <2> 	mov [currentfolderloc], eax
  5094 00003C77 C3                  <2> 	ret
  5095                              <1> %include 'source/programs/charmap.asm'
  5096 00003C78 00                  <2> charmapnum db 0
  5097 00003C79 FF2C636861726D6170- <2> db 255,44,"charmap",0
  5098 00003C82 00                  <2>
  5099 00003C83 8B35[662F0000]      <2> 	mov esi, [currentcommandloc]
  5100 00003C89 81C609000000        <2> 	add esi, 9
  5101 00003C8F 803E00              <2> 	cmp byte [esi], 0
  5102 00003C92 7412                <2> 	je .nospecific
  5103 00003C94 E857F6FFFF          <2> 	call cnvrthextxt
  5104 00003C99 6689C8              <2> 	mov ax, cx
  5105 00003C9C 66BB0700            <2> 	mov bx, 7
  5106 00003CA0 E805E7FFFF          <2> 	call prcharq
  5107 00003CA5 C3                  <2> 	ret
  5108                              <2> .nospecific:
  5109 00003CA6 66BB0700            <2> 	mov bx, 7
  5110 00003CAA 66B82000            <2> 	mov ax, " "
  5111 00003CAE C605[783C0000]00    <2> 	mov byte [charmapnum], 0
  5112 00003CB5 E8F0E6FFFF          <2> 	call prcharq
  5113 00003CBA E8EBE6FFFF          <2> 	call prcharq
  5114 00003CBF E8E6E6FFFF          <2> 	call prcharq
  5115 00003CC4 E8E1E6FFFF          <2> 	call prcharq
  5116 00003CC9 66B83000            <2> 	mov ax, "0"
  5117                              <2> charmapnumprnt:
  5118 00003CCD E8D8E6FFFF          <2> 	call prcharq
  5119 00003CD2 6640                <2> 	inc ax
  5120 00003CD4 6650                <2> 	push ax
  5121 00003CD6 66B82000            <2> 	mov ax, " "
  5122 00003CDA E8CBE6FFFF          <2> 	call prcharq
  5123 00003CDF 6658                <2> 	pop ax
  5124 00003CE1 663D3900            <2> 	cmp ax, "9"
  5125 00003CE5 76E6                <2> 	jbe charmapnumprnt
  5126 00003CE7 66B84100            <2> 	mov ax, "A"
  5127                              <2> charmapnumprnt2:
  5128 00003CEB E8BAE6FFFF          <2> 	call prcharq
  5129 00003CF0 6640                <2> 	inc ax
  5130 00003CF2 6650                <2> 	push ax
  5131 00003CF4 66B82000            <2> 	mov ax, " "
  5132 00003CF8 E8ADE6FFFF          <2> 	call prcharq
  5133 00003CFD 6658                <2> 	pop ax
  5134 00003CFF 663D4700            <2> 	cmp ax, "G"
  5135 00003D03 72E6                <2> 	jb charmapnumprnt2
  5136                              <2> 	
  5137 00003D05 BE[45820000]        <2> 	mov esi, line
  5138 00003D0A E8EEDFFFFF          <2> 	call printquiet
  5139 00003D0F 6631C0              <2> 	xor ax, ax
  5140 00003D12 6689C1              <2> 	mov cx, ax
  5141 00003D15 E85FF4FFFF          <2> 	call showhexsmall
  5142 00003D1A E970000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5143                              <2> charmapcopy:
  5144 00003D1F 6640                <2> 	inc ax
  5145 00003D21 6650                <2> 	push ax
  5146 00003D23 663D0800            <2> 	cmp ax, 8
  5147 00003D27 7466                <2> 	je charmapnocopy
  5148 00003D29 663D0900            <2> 	cmp ax, 9
  5149 00003D2D 7460                <2> 	je charmapnocopy
  5150 00003D2F 663D0A00            <2> 	cmp ax, 10
  5151 00003D33 745A                <2> 	je charmapnocopy
  5152 00003D35 663D0D00            <2> 	cmp ax, 13
  5153 00003D39 7454                <2> 	je charmapnocopy
  5154 00003D3B 663DFF00            <2> 	cmp ax, 255
  5155 00003D3F 744E                <2> 	je charmapnocopy
  5156 00003D41 663D0001            <2> 	cmp ax, 256
  5157 00003D45 7443                <2> 	je nomorecharmap
  5158 00003D47 E85EE6FFFF          <2> 	call prcharq
  5159 00003D4C 66B82000            <2> 	mov ax, " "
  5160 00003D50 E855E6FFFF          <2> 	call prcharq
  5161 00003D55 6658                <2> 	pop ax
  5162                              <2> charmapcopycheck:
  5163 00003D57 FE05[783C0000]      <2> 	inc byte [charmapnum]
  5164 00003D5D 803D[783C0000]10    <2> 	cmp byte [charmapnum], 16
  5165 00003D64 72B9                <2> 	jb charmapcopy
  5166 00003D66 6650                <2> 	push ax
  5167 00003D68 BE[45820000]        <2> 	mov esi, line
  5168 00003D6D E88BDFFFFF          <2> 	call printquiet
  5169 00003D72 6658                <2> 	pop ax
  5170 00003D74 3CFF                <2> 	cmp al, 255
  5171 00003D76 7412                <2> 	je nomorecharmap
  5172 00003D78 88C1                <2> 	mov cl, al
  5173 00003D7A FEC1                <2> 	inc cl
  5174 00003D7C E8F8F3FFFF          <2> 	call showhexsmall
  5175 00003D81 C605[783C0000]00    <2> 	mov byte [charmapnum], 0
  5176 00003D88 EB95                <2> 	jmp charmapcopy
  5177                              <2> nomorecharmap:
  5178 00003D8A E924EFFFFF          <2> 	jmp nwcmd
  5179                              <2> charmapnocopy:
  5180 00003D8F 6650                <2> 	push ax
  5181 00003D91 66B82000            <2> 	mov ax, " "
  5182 00003D95 E810E6FFFF          <2> 	call prcharq
  5183 00003D9A E80BE6FFFF          <2> 	call prcharq
  5184 00003D9F 6658                <2> 	pop ax
  5185 00003DA1 EBB4                <2> 	jmp charmapcopycheck
  5186                              <1> %ifdef gui.included
  5187                              <1> 	%include 'source/programs/circle.asm'
  5188 00003DA3 FF2C636972636C6500  <2> db 255,44,"circle",0
  5189                              <2> circle:
  5190 00003DAC 8B35[662F0000]      <2> 	mov esi, [currentcommandloc]
  5191 00003DB2 81C607000000        <2> 	add esi, 7
  5192 00003DB8 66B91000            <2> 	mov cx, 16
  5193 00003DBC 30C0                <2> 	xor al, al
  5194 00003DBE 3806                <2> 	cmp [esi], al
  5195 00003DC0 7405                <2> 	je .nocmdline
  5196 00003DC2 E872F5FFFF          <2> 	call cnvrttxt
  5197                              <2> .nocmdline:
  5198 00003DC7 E8A3060000          <2> 	call linetester.stime
  5199 00003DCC E857000000          <2> 	call fcircle.nocmdline
  5200 00003DD1 E8B1060000          <2> 	call linetester.etime
  5201 00003DD6 53                  <2> 	push ebx
  5202 00003DD7 57                  <2> 	push edi
  5203 00003DD8 E83AE5FFFF          <2> 	call getchar
  5204 00003DDD 59                  <2> 	pop ecx
  5205 00003DDE E874F4FFFF          <2> 	call showdec
  5206 00003DE3 BE[15450000]        <2> 	mov esi, linetester.msgcircle
  5207 00003DE8 E810DFFFFF          <2> 	call printquiet
  5208 00003DED 59                  <2> 	pop ecx
  5209 00003DEE E864F4FFFF          <2> 	call showdec
  5210 00003DF3 BE[2C450000]        <2> 	mov esi, linetester.msgtime
  5211 00003DF8 E800DFFFFF          <2> 	call printquiet
  5212 00003DFD E8892D0000          <2> 	call reloadallgraphics
  5213 00003E02 C3                  <2> 	ret
  5214                              <2> 	
  5215 00003E03 FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5216 00003E0C 00                  <2>
  5217                              <2> fcircle:	
  5218 00003E0D 8B35[662F0000]      <2> 	mov esi, [currentcommandloc]
  5219 00003E13 81C608000000        <2> 	add esi, 8
  5220 00003E19 66B91000            <2> 	mov cx, 16
  5221 00003E1D 30C0                <2> 	xor al, al
  5222 00003E1F 3806                <2> 	cmp [esi], al
  5223 00003E21 7405                <2> 	je .nocmdline
  5224 00003E23 E811F5FFFF          <2> 	call cnvrttxt
  5225                              <2> .nocmdline:
  5226 00003E28 6689C8              <2> 	mov ax, cx
  5227 00003E2B 66D1E1              <2> 	shl cx, 1
  5228 00003E2E 6689CA              <2> 	mov dx, cx
  5229 00003E31 663B15[76540000]    <2> 	cmp dx, [resolutionx]
  5230 00003E38 731B                <2> 	jae .done
  5231 00003E3A 663B0D[78540000]    <2> 	cmp cx, [resolutiony]
  5232 00003E41 7312                <2> 	jae .done
  5233 00003E43 668B35[5A020000]    <2> 	mov si, [timenanoseconds + 2]
  5234 00003E4A 31FF                <2> 	xor edi, edi
  5235 00003E4C 803D[6A820000]01    <2> 	cmp byte [guion], 1
  5236 00003E53 7401                <2> 	je .lp
  5237 00003E55 C3                  <2> .done ret
  5238                              <2> .lp:
  5239 00003E56 6629C2              <2> 	sub dx, ax
  5240 00003E59 6629C1              <2> 	sub cx, ax
  5241 00003E5C 60                  <2> 	pusha
  5242 00003E5D E848280000          <2> 	call fillcircle
  5243 00003E62 61                  <2> 	popa
  5244 00003E63 47                  <2> 	inc edi
  5245 00003E64 660335[58020000]    <2> 	add si, [timenanoseconds]
  5246 00003E6B 6601C2              <2> 	add dx, ax
  5247 00003E6E 6601C2              <2> 	add dx, ax
  5248 00003E71 6601C2              <2> 	add dx, ax
  5249 00003E74 6601C1              <2> 	add cx, ax
  5250 00003E77 663B15[76540000]    <2> 	cmp dx, [resolutionx]
  5251 00003E7E 72D6                <2> 	jb .lp
  5252 00003E80 6689C2              <2> 	mov dx, ax
  5253 00003E83 6601C2              <2> 	add dx, ax
  5254 00003E86 6601C1              <2> 	add cx, ax
  5255 00003E89 6601C1              <2> 	add cx, ax
  5256 00003E8C 663B0D[78540000]    <2> 	cmp cx, [resolutiony]
  5257 00003E93 72C1                <2> 	jb .lp
  5258 00003E95 C3                  <2> 	ret
  5259                              <1> %endif
  5260                              <1> %include 'source/programs/clear.asm'
  5261 00003E96 FF2C636C65617200    <2> db 255,44,"clear",0
  5262 00003E9E E828DFFFFF          <2> 		call clear
  5263 00003EA3 C3                  <2> 		ret 
  5264                              <1> %include 'source/programs/cpuid.asm'
  5265 00003EA4 FF2C637075696400    <2> db 255,44,"cpuid",0
  5266 00003EAC 31C0                <2> 	xor eax, eax
  5267 00003EAE 0FA2                <2> 	cpuid
  5268 00003EB0 891D[013F0000]      <2> 	mov [cpuidbuf], ebx
  5269 00003EB6 8915[053F0000]      <2> 	mov [cpuidbuf + 4], edx
  5270 00003EBC 890D[093F0000]      <2> 	mov [cpuidbuf + 8], ecx
  5271 00003EC2 BE[013F0000]        <2> 	mov esi, cpuidbuf
  5272 00003EC7 E850DEFFFF          <2> 	call print
  5273 00003ECC BE[45820000]        <2> 	mov esi, line
  5274 00003ED1 E846DEFFFF          <2> 	call print
  5275 00003ED6 B801000000          <2> 	mov eax, 1
  5276 00003EDB 0FA2                <2> 	cpuid
  5277 00003EDD 89C1                <2> 	mov ecx, eax
  5278 00003EDF C605[78310000]02    <2> 	mov byte [firsthexshown], 2
  5279 00003EE6 E8A2F2FFFF          <2> 	call showhex
  5280 00003EEB B808000080          <2> 	mov eax, 0x80000008
  5281 00003EF0 0FA2                <2> 	cpuid
  5282 00003EF2 89C1                <2> 	mov ecx, eax
  5283 00003EF4 C605[78310000]02    <2> 	mov byte [firsthexshown], 2
  5284 00003EFB E88DF2FFFF          <2> 	call showhex
  5285 00003F00 C3                  <2> 	ret
  5286                              <2> 	
  5287 00003F01 00<rept>            <2> cpuidbuf times 13 db 0
  5288                              <2> cpuidvendorend:
  5289                              <1> %ifdef network.included
  5290                              <1> 	%include 'source/programs/dhcp.asm'
  5291                              <1> %endif
  5292                              <1> %ifdef disk.none
  5293                              <1> %else
  5294                              <1> 	%include 'source/programs/dos.asm'
  5295 00003F0E FF2C646F7300        <2> db 255,44,"dos",0
  5296                              <2> dosrunner:
  5297 00003F14 8925[E09A0300]      <2> 	mov [previousstack], esp
  5298 00003F1A 8B3D[662F0000]      <2> 	mov edi, [currentcommandloc]
  5299 00003F20 81C704000000        <2> 	add edi, 4
  5300 00003F26 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5301 00003F2B E8B5230000          <2> 	call loadfile
  5302 00003F30 8B3D[662F0000]      <2> 	mov edi, [currentcommandloc]
  5303 00003F36 81C704000000        <2> 	add edi, 4
  5304 00003F3C 81FA94010000        <2> 	cmp edx, 404
  5305 00003F42 0F845E000000        <2> 	je near .noprogfound
  5306 00003F48 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5307 00003F4D 31C9                <2> 	xor ecx, ecx
  5308                              <2> .findparams:
  5309 00003F4F 47                  <2> 	inc edi
  5310 00003F50 8A07                <2> 	mov al, [edi]
  5311 00003F52 3C20                <2> 	cmp al, " "
  5312 00003F54 75F9                <2> 	jne .findparams
  5313                              <2> .copyparams:
  5314 00003F56 8A07                <2> 	mov al, [edi]
  5315 00003F58 8803                <2> 	mov [ebx], al
  5316 00003F5A 43                  <2> 	inc ebx
  5317 00003F5B 47                  <2> 	inc edi
  5318 00003F5C 41                  <2> 	inc ecx
  5319 00003F5D 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5320 00003F63 7304                <2> 	jae .nomoreparams
  5321 00003F65 3C00                <2> 	cmp al, 0
  5322 00003F67 75ED                <2> 	jne .copyparams
  5323                              <2> .nomoreparams:
  5324 00003F69 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5325 00003F6F 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5326 00003F73 8ED8                <2> 	mov ds, ax
  5327 00003F75 8EC0                <2> 	mov es, ax
  5328 00003F77 8EE0                <2> 	mov fs, ax
  5329 00003F79 8EE8                <2> 	mov gs, ax
  5330 00003F7B 31C0                <2> 	xor eax, eax
  5331 00003F7D 31DB                <2> 	xor ebx, ebx
  5332 00003F7F 31C9                <2> 	xor ecx, ecx
  5333 00003F81 31D2                <2> 	xor edx, edx
  5334 00003F83 31FF                <2> 	xor edi, edi
  5335 00003F85 31F6                <2> 	xor esi, esi
  5336 00003F87 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5337 00003F8E 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5338 00003F92 6689DA              <2> 	mov dx, bx
  5339 00003F95 8EC3                <2> 	mov es, bx
  5340 00003F97 8EE3                <2> 	mov fs, bx
  5341 00003F99 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5342 00003F9D 8EEB                <2> 	mov gs, bx
  5343 00003F9F 8B25[E09A0300]      <2> 	mov esp, [previousstack]
  5344 00003FA5 C3                  <2> 	ret
  5345                              <2> .noprogfound:
  5346 00003FA6 BE[0C820000]        <2> 	mov esi, notfound1
  5347 00003FAB E86CDDFFFF          <2> 	call print
  5348 00003FB0 8B35[662F0000]      <2> 	mov esi, [currentcommandloc]
  5349 00003FB6 81C604000000        <2> 	add esi, 4
  5350 00003FBC E85BDDFFFF          <2> 	call print
  5351 00003FC1 BE[14820000]        <2> 	mov esi, notfound2
  5352 00003FC6 E851DDFFFF          <2> 	call print
  5353 00003FCB C3                  <2> 	ret
  5354                              <2> 	
  5355                              <1> %endif
  5356                              <1> %include 'source/programs/dump.asm'
  5357 00003FCC FF2C64756D7000      <2> db 255,44,"dump",0
  5358 00003FD3 8B35[662F0000]      <2> 	mov esi, [currentcommandloc]
  5359 00003FD9 81C605000000        <2> 	add esi, 5
  5360 00003FDF 31C9                <2> 	xor ecx, ecx
  5361 00003FE1 66B83078            <2> 	mov ax, "0x"
  5362 00003FE5 663906              <2> 	cmp [esi], ax
  5363 00003FE8 740A                <2> 	je dumphexin
  5364 00003FEA E84AF3FFFF          <2> 	call cnvrttxt
  5365 00003FEF E910000000          <2> 	jmp dumphexnow
  5366                              <2> dumphexin:
  5367 00003FF4 81C602000000        <2> 	add esi, 2
  5368 00003FFA E8F1F2FFFF          <2> 	call cnvrthextxt
  5369 00003FFF E900000000          <2> 	jmp dumphexnow
  5370                              <2> dumphexnow:
  5371 00004004 89CF                <2> 	mov edi, ecx
  5372 00004006 89FE                <2> 	mov esi, edi
  5373 00004008 81C680030000        <2> 	add esi, 896
  5374                              <2> dumphexloop:
  5375 0000400E 8B0F                <2> 	mov ecx, [edi]
  5376 00004010 C605[78310000]05    <2> 	mov byte [firsthexshown],5
  5377 00004017 E871F1FFFF          <2> 	call showhex
  5378 0000401C 81C704000000        <2> 	add edi, 4
  5379 00004022 39F7                <2> 	cmp edi, esi
  5380 00004024 72E8                <2> 	jb dumphexloop
  5381 00004026 E840E8FFFF          <2> 	call termcopy
  5382 0000402B C3                  <2> 	ret 
  5383                              <1> %include 'source/programs/echo.asm'
  5384                              <2> 
  5385 0000402C FF2C6563686F00      <2> db 255,44,"echo",0
  5386                              <2> 	echoprog:
  5387 00004033 8B35[662F0000]      <2> 		mov esi, [currentcommandloc]
  5388 00004039 81C605000000        <2> 		add esi, 5
  5389 0000403F 8A06                <2> 		mov al, [esi]
  5390 00004041 E8D6DCFFFF          <2> 		call print
  5391 00004046 BE[45820000]        <2> 		mov esi, line
  5392 0000404B E8CCDCFFFF          <2> 		call print
  5393 00004050 C3                  <2> 		ret
  5394 00004051 BB[609D0300]        <2> 	echovr:	mov ebx, variables
  5395 00004056 BF06000000          <2> 		mov edi, 6
  5396 0000405B E83C000000          <2> 		call nxtvrech
  5397 00004060 E954000000          <2> 		jmp prntvr2
  5398 00004065 B13D                <2> 	echvar:	mov cl, '='
  5399 00004067 43                  <2> 		inc ebx
  5400 00004068 8A03                <2> 		mov al, [ebx]
  5401 0000406A 3C00                <2> 		cmp al, 0
  5402 0000406C 742E                <2> 		je nxtvrech
  5403 0000406E 3C3D                <2> 		cmp al, '='
  5404 00004070 7422                <2> 		je nxtvrechb1
  5405 00004072 8B35[662F0000]      <2> 		mov esi, [currentcommandloc]
  5406 00004078 01FE                <2> 		add esi, edi
  5407 0000407A E826EFFFFF          <2> 		call cndtest
  5408 0000407F 3C02                <2> 		cmp al, 2
  5409 00004081 7432                <2> 		je prntvr
  5410 00004083 3C01                <2> 		cmp al, 1
  5411 00004085 742E                <2> 		je prntvr
  5412 00004087 8B35[662F0000]      <2> 		mov esi, [currentcommandloc]
  5413 0000408D 01FE                <2> 		add esi, edi
  5414 0000408F E908000000          <2> 		jmp nxtvrech
  5415                              <2> 	nxtvrechb1:
  5416 00004094 81EB02000000        <2> 		sub ebx, 2
  5417 0000409A EBC9                <2> 		jmp echvar
  5418 0000409C 8A03                <2> 	nxtvrech: mov al, [ebx]
  5419 0000409E 3C05                <2> 		cmp al, 5
  5420 000040A0 740A                <2> 		je nxtvrec2
  5421 000040A2 43                  <2> 		inc ebx
  5422 000040A3 81FB[60AD0300]      <2> 		cmp ebx, varend
  5423 000040A9 72F1                <2> 		jb nxtvrech
  5424 000040AB C3                  <2> 		ret
  5425 000040AC 43                  <2> 	nxtvrec2: inc ebx
  5426 000040AD 8A03                <2> 		mov al, [ebx]
  5427 000040AF 3C04                <2> 		cmp al, 4
  5428 000040B1 74B2                <2> 		je echvar
  5429 000040B3 EBE7                <2> 		jmp nxtvrech
  5430 000040B5 43                  <2> 	prntvr: inc ebx
  5431 000040B6 89DE                <2> 		mov esi, ebx
  5432 000040B8 C3                  <2> 		ret
  5433 000040B9 E85EDCFFFF          <2> 	prntvr2: call print
  5434 000040BE BE[45820000]        <2> 		mov esi, line
  5435 000040C3 E854DCFFFF          <2> 		call print
  5436 000040C8 C3                  <2> 		ret 
  5437                              <1> %include 'source/programs/else.asm'
  5438 000040C9 FF2C656C736500      <2> 	db 255,44,"else",0
  5439 000040D0 31C0                <2> elsecmd:	xor eax, eax
  5440 000040D2 3805[5A9D0300]      <2> 	cmp [BATCHISON], al
  5441 000040D8 0F8486F9FFFF        <2> 	je near notbatch
  5442 000040DE A0[F19C0300]        <2> 	mov al, [IFON]
  5443 000040E3 BE[F29C0300]        <2> 	mov esi, IFTRUE
  5444 000040E8 01C6                <2> 	add esi, eax
  5445 000040EA 8A06                <2> 	mov al, [esi]
  5446 000040EC 3401                <2> 	xor al, 1
  5447 000040EE 8806                <2> 	mov [esi], al
  5448 000040F0 C3                  <2> 	ret 
  5449                              <1> %include 'source/programs/exit.asm'
  5450 000040F1 FF2C6578697400      <2> db 255,44,"exit",0
  5451 000040F8 803D[F09C0300]01    <2> 	cmp byte [ranboot], 1
  5452 000040FF 0F8442EBFFFF        <2> 	je near returnfromexp
  5453 00004105 E928EAFFFF          <2> 	jmp nobootfile
  5454                              <1> %include 'source/programs/fi.asm'
  5455 0000410A FF2C666900          <2> 	db 255,44,"fi",0
  5456 0000410F 30C0                <2> 	xor al, al
  5457 00004111 3805[5A9D0300]      <2> 	cmp [BATCHISON], al
  5458 00004117 0F8447F9FFFF        <2> 	je near notbatch
  5459 0000411D B001                <2> fi:	mov al, 1
  5460 0000411F 2805[F19C0300]      <2> 	sub [IFON],al
  5461 00004125 C3                  <2> 	ret 
  5462                              <1> %ifdef gui.included
  5463                              <1> 	%include 'source/programs/gui.asm'
  5464 00004126 FF2C67756900        <2> db 255,44,"gui",0
  5465                              <2> guiswitcher:
  5466 0000412C 8B35[662F0000]      <2> 	mov esi, [currentcommandloc]
  5467 00004132 81C604000000        <2> 	add esi, 4
  5468 00004138 31C9                <2> 	xor ecx, ecx
  5469 0000413A 803E00              <2> 	cmp byte [esi], 0
  5470 0000413D 740A                <2> 	je .nomodepref
  5471 0000413F E8ACF1FFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5472 00004144 E907000000          <2> 	jmp .modepref
  5473                              <2> .nomodepref:
  5474 00004149 51                  <2> 	push ecx
  5475 0000414A E87CDCFFFF          <2> 	call clear
  5476 0000414F 59                  <2> 	pop ecx
  5477                              <2> .modepref:
  5478 00004150 66BB[7850]          <2> 	mov bx, guiswitch
  5479 00004154 66891D[CB0C0000]    <2> 	mov [realmodeptr], bx
  5480 0000415B BB[6B410000]        <2> 	mov ebx, guiswitchret
  5481 00004160 891D[C70C0000]      <2> 	mov [realmodereturn], ebx
  5482 00004166 E945CAFFFF          <2> 	jmp realmode
  5483                              <2> guiswitchret:
  5484 0000416B 65803D[6A820000]01  <2> 	cmp byte [gs:guion], 1
  5485 00004173 7401                <2> 	je .cont
  5486 00004175 C3                  <2> 	ret
  5487                              <2> .cont:
  5488 00004176 BF[64520000]        <2> 	mov edi, VBEMODEBLOCK
  5489                              <2> .loop:
  5490 0000417B 658B07              <2> 	mov eax, [gs:edi]
  5491 0000417E 8907                <2> 	mov [edi], eax
  5492 00004180 47                  <2> 	inc edi
  5493 00004181 81FF[68550000]      <2> 	cmp edi, VBEEND
  5494 00004187 72F2                <2> 	jb .loop
  5495 00004189 A1[8C540000]        <2> 	mov eax, [physbaseptr]
  5496 0000418E 8B1D[35020000]      <2> 	mov ebx, [basecache]
  5497 00004194 C1E304              <2> 	shl ebx, 4
  5498 00004197 29D8                <2> 	sub eax, ebx
  5499 00004199 A3[8C540000]        <2> 	mov [physbaseptr], eax
  5500 0000419E C605[A8230000]00    <2> 	mov byte [termguion], 0
  5501 000041A5 BE[75B50300]        <2> 	mov esi, graphicstable
  5502 000041AA 30C0                <2> 	xor al, al
  5503                              <2> .clear:
  5504 000041AC 8806                <2> 	mov [esi], al
  5505 000041AE 46                  <2> 	inc esi
  5506 000041AF 81FE[75B70300]      <2> 	cmp esi, graphicstableend
  5507 000041B5 72F5                <2> 	jb .clear
  5508 000041B7 E8682B0000          <2> 	call guisetup
  5509                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5510 000041BC 668B15[76540000]    <2> 	mov dx, [resolutionx]
  5511 000041C3 668B0D[78540000]    <2> 	mov cx, [resolutiony]
  5512 000041CA 6689D3              <2> 	mov bx, dx
  5513 000041CD 6689C8              <2> 	mov ax, cx
  5514 000041D0 66D1EB              <2> 	shr bx, 1
  5515 000041D3 66D1E8              <2> 	shr ax, 1
  5516 000041D6 6689DA              <2> 	mov dx, bx
  5517 000041D9 66D1EA              <2> 	shr dx, 1
  5518 000041DC 6689C1              <2> 	mov cx, ax
  5519 000041DF 66D1E9              <2> 	shr cx, 1
  5520 000041E2 6601D3              <2> 	add bx, dx
  5521 000041E5 6601C8              <2> 	add ax, cx
  5522 000041E8 66D1E9              <2> 	shr cx, 1
  5523 000041EB 66C1EB03            <2> 	shr bx, 3
  5524 000041EF 66C1E303            <2> 	shl bx, 3
  5525 000041F3 66C1E804            <2> 	shr ax, 4
  5526 000041F7 66C1E004            <2> 	shl ax, 4
  5527 000041FB 66891D[296F0000]    <2> 	mov [termwindow], bx
  5528 00004202 66A3[2B6F0000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5529 00004208 BE[296F0000]        <2> 	mov esi, termwindow
  5530 0000420D 31DB                <2> 	xor ebx, ebx
  5531 0000420F 6631C0              <2> 	xor ax, ax
  5532 00004212 E83F320000          <2> 	call showwindow
  5533 00004217 E84D130000          <2> 	call cursorgui
  5534 0000421C E8AADBFFFF          <2> 	call clear
  5535 00004221 C3                  <2> 	ret
  5536                              <2> 	
  5537                              <1> %endif
  5538                              <1> %include 'source/programs/help.asm'
  5539 00004222 FF2C68656C7000      <2> db 255,44,"help",0
  5540                              <2> lscmd:	
  5541 00004229 B00D                <2> 		mov al, 13
  5542 0000422B E87AE1FFFF          <2> 		call prcharq
  5543 00004230 BE[BC330000]        <2> 		mov esi, progstart
  5544 00004235 BB[78500000]        <2> 		mov ebx, progend
  5545 0000423A BE[E0960300]        <2> dir:	mov esi, fileindex
  5546 0000423F 8A06                <2> 	dirnxt:	mov al, [esi]
  5547 00004241 30E4                <2> 		xor ah, ah
  5548 00004243 3CFF                <2> 		cmp al, 255
  5549 00004245 7415                <2> 		je dirfnd
  5550 00004247 46                  <2> 		inc esi
  5551 00004248 81FE[E09A0300]      <2> 		cmp esi,  fileindexend
  5552 0000424E 7339                <2> 		jae dirdn
  5553 00004250 EBED                <2> 		jmp dirnxt
  5554                              <2> 	dirfnd3:
  5555 00004252 46                  <2> 		inc esi
  5556 00004253 81FE[E09A0300]      <2> 		cmp esi, fileindexend
  5557 00004259 76E4                <2> 		jbe dirnxt
  5558 0000425B 4E                  <2> 		dec esi
  5559 0000425C 46                  <2> 	dirfnd:	inc esi
  5560 0000425D 8A06                <2> 		mov al, [esi]
  5561 0000425F 30E4                <2> 		xor ah, ah
  5562 00004261 3C2C                <2> 		cmp al, 44
  5563 00004263 740B                <2> 		je dirfnd2
  5564 00004265 46                  <2> 		inc esi
  5565 00004266 81FE[E09A0300]      <2> 		cmp esi,  fileindexend
  5566 0000426C 731B                <2> 		jae dirdn
  5567 0000426E EBCF                <2> 		jmp dirnxt
  5568 00004270 46                  <2> 	dirfnd2: inc esi
  5569 00004271 E887DAFFFF          <2> 		call printquiet
  5570 00004276 56                  <2> 		push esi
  5571 00004277 B009                <2> 		mov al, 9
  5572 00004279 E82CE1FFFF          <2> 		call prcharq
  5573 0000427E 5E                  <2> 		pop esi
  5574 0000427F 81FE[E09A0300]      <2> 		cmp esi,  fileindexend
  5575 00004285 7302                <2> 		jae dirdn
  5576 00004287 EBB6                <2> 		jmp dirnxt
  5577 00004289 BE[45820000]        <2> 	dirdn:	mov esi, line
  5578 0000428E E889DAFFFF          <2> 			call print
  5579 00004293 C3                  <2> 			ret
  5580 00004294 00                  <2> currentdir db 0
  5581                              <1> %include 'source/programs/if.asm'
  5582 00004295 FF2C696600          <2> 	db 255,44,"if",0
  5583 0000429A 30C0                <2> ifcmd:	xor al, al
  5584 0000429C 3805[5A9D0300]      <2> 	cmp [BATCHISON], al
  5585 000042A2 0F84BCF7FFFF        <2> 	je near notbatch
  5586 000042A8 8B1D[662F0000]      <2> 	mov ebx, [currentcommandloc]
  5587 000042AE 81C303000000        <2> 	add ebx, 3
  5588 000042B4 89DE                <2> 	mov esi, ebx
  5589 000042B6 8A06                <2> chkeqsn: mov al, [esi]
  5590 000042B8 3C00                <2> 	cmp al, 0
  5591 000042BA 0F84A4F7FFFF        <2> 	je near notbatch
  5592 000042C0 3C3D                <2> 	cmp al, '='
  5593 000042C2 0F8403000000        <2> 	je near chkeqdn
  5594 000042C8 46                  <2> 	inc esi
  5595 000042C9 EBEB                <2> 	jmp chkeqsn
  5596 000042CB B000                <2> chkeqdn: mov al, 0 
  5597 000042CD 8806                <2> 	mov [esi], al
  5598 000042CF 46                  <2> 	inc esi
  5599 000042D0 E895ECFFFF          <2> 	call tester
  5600 000042D5 3C01                <2> 	cmp al, 1
  5601 000042D7 0F8405000000        <2> 	je near trueif
  5602 000042DD E91C000000          <2> 	jmp falseif
  5603 000042E2 31C0                <2> trueif:	xor eax, eax
  5604 000042E4 A0[F19C0300]        <2> 	mov al, [IFON]
  5605 000042E9 FEC0                <2> 	inc al
  5606 000042EB A2[F19C0300]        <2> 	mov [IFON], al
  5607 000042F0 30E4                <2> 	xor ah, ah
  5608 000042F2 BE[F29C0300]        <2> 	mov esi, IFTRUE
  5609 000042F7 01C6                <2> 	add esi, eax
  5610 000042F9 B401                <2> 	mov ah, 1
  5611 000042FB 8826                <2> 	mov [esi], ah
  5612 000042FD C3                  <2> 	ret 
  5613 000042FE 31C0                <2> falseif: xor eax, eax
  5614 00004300 A0[F19C0300]        <2> 	mov al, [IFON]
  5615 00004305 FEC0                <2> 	inc al
  5616 00004307 A2[F19C0300]        <2> 	mov [IFON], al
  5617 0000430C 30E4                <2> 	xor ah, ah
  5618 0000430E BE[F29C0300]        <2> 	mov esi, IFTRUE
  5619 00004313 01C6                <2> 	add esi, eax
  5620 00004315 30E4                <2> 	xor ah, ah
  5621 00004317 8826                <2> 	mov [esi], ah
  5622 00004319 C3                  <2> 	ret 
  5623                              <1> %ifdef network.included
  5624                              <1> 	%include 'source/programs/ipconfig.asm'
  5625                              <1> %endif
  5626                              <1> %include 'source/programs/keycode.asm'
  5627 0000431A FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5628 00004323 00                  <2>
  5629                              <2> keycode:
  5630 00004324 66C705[7B230000]00- <2> 	mov word [trans], 0
  5631 0000432C 00                  <2>
  5632 0000432D C605[A1640000]00    <2> 	mov byte [threadson], 0
  5633                              <2> %ifdef io.serial
  5634                              <2> .noserial:
  5635                              <2> 	hlt
  5636                              <2> 	mov dx, [serial.address]
  5637                              <2> 	in al, dx
  5638                              <2> 	cmp al, 0
  5639                              <2> 	je .noserial
  5640                              <2> 	mov cl, al
  5641                              <2> 	call showhexsmall
  5642                              <2> 	cmp al, 0x1B
  5643                              <2> 	jne .noserial
  5644                              <2> 	in al, dx
  5645                              <2> 	mov cl, al
  5646                              <2> 	call showhexsmall
  5647                              <2> 	cmp cl, 0x5B
  5648                              <2> 	je .noserial
  5649                              <2> 	ret
  5650                              <2> %else
  5651 00004334 E809160000          <2> 	call getkey
  5652 00004339 31C0                <2> 	xor eax, eax
  5653 0000433B 31C9                <2> 	xor ecx, ecx
  5654 0000433D 8A0D[20590000]      <2> 	mov cl, [specialkey]
  5655 00004343 80F900              <2> 	cmp cl, 0
  5656 00004346 0F8405000000        <2> 	je near .nospecialkeycode
  5657 0000434C E828EEFFFF          <2> 	call showhexsmall
  5658                              <2> .nospecialkeycode:
  5659 00004351 668B0D[79230000]    <2> 	mov cx, [lastkey + 2]
  5660 00004358 E81CEEFFFF          <2> 	call showhexsmall
  5661 0000435D 80F901              <2> 	cmp cl, 1
  5662 00004360 75C2                <2> 	jne keycode
  5663 00004362 C3                  <2> 	ret
  5664                              <2> %endif
  5665                              <1> %ifdef gui.included
  5666                              <1> 	%include 'source/programs/line.asm'
  5667 00004363 FF2C6C696E6500      <2> db 255,44,"line",0
  5668                              <2> linetester:
  5669 0000436A 803D[6A820000]00    <2> 	cmp byte [guion], 0
  5670 00004371 0F841B000000        <2> 	je near .done
  5671 00004377 668B35[5A020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  5672 0000437E BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  5673 00004383 E868000000          <2> 	call .circletest
  5674 00004388 BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  5675 0000438D E801000000          <2> 	call .linetest
  5676                              <2> .done:
  5677 00004392 C3                  <2> 	ret
  5678                              <2> 
  5679                              <2> .linetest:
  5680 00004393 53                  <2> 	push ebx
  5681 00004394 E8D6000000          <2> 	call .stime
  5682 00004399 5B                  <2> 	pop ebx
  5683 0000439A 31FF                <2> 	xor edi, edi
  5684                              <2> .ltlp:
  5685 0000439C 53                  <2> 	push ebx
  5686 0000439D E81C010000          <2> 	call .st
  5687 000043A2 66F7D6              <2> 	not si
  5688 000043A5 E814010000          <2> 	call .st
  5689 000043AA 5B                  <2> 	pop ebx
  5690 000043AB 66F7D6              <2> 	not si
  5691 000043AE 660335[58020000]    <2> 	add si, [timenanoseconds]
  5692 000043B5 4B                  <2> 	dec ebx
  5693 000043B6 81FB00000000        <2> 	cmp ebx, 0
  5694 000043BC 77DE                <2> 	ja .ltlp
  5695 000043BE E8C4000000          <2> 	call .etime
  5696 000043C3 53                  <2> 	push ebx	
  5697 000043C4 57                  <2> 	push edi
  5698 000043C5 E871270000          <2> 	call guiclear
  5699 000043CA E8BC270000          <2> 	call reloadallgraphics
  5700 000043CF 59                  <2> 	pop ecx
  5701 000043D0 E882EEFFFF          <2> 	call showdec
  5702 000043D5 BE[00450000]        <2> 	mov esi, .msg
  5703 000043DA E83DD9FFFF          <2> 	call print
  5704 000043DF 59                  <2> 	pop ecx
  5705 000043E0 E872EEFFFF          <2> 	call showdec
  5706 000043E5 BE[2C450000]        <2> 	mov esi, .msgtime
  5707 000043EA E82DD9FFFF          <2> 	call print
  5708 000043EF C3                  <2> 	ret
  5709                              <2> 	
  5710                              <2> .circletest:
  5711 000043F0 53                  <2> 	push ebx
  5712 000043F1 E879000000          <2> 	call .stime
  5713 000043F6 5B                  <2> 	pop ebx
  5714 000043F7 31FF                <2> 	xor edi, edi
  5715                              <2> .ctlp:
  5716 000043F9 53                  <2> 	push ebx
  5717 000043FA 668B0D[78540000]    <2> 	mov cx, [resolutiony]
  5718 00004401 66D1E9              <2> 	shr cx, 1
  5719 00004404 668B15[76540000]    <2> 	mov dx, [resolutionx]
  5720 0000440B 66D1EA              <2> 	shr dx, 1
  5721 0000440E 6689C8              <2> 	mov ax, cx
  5722                              <2> .circle:
  5723 00004411 60                  <2> 	pusha
  5724 00004412 E881210000          <2> 	call drawcircle
  5725 00004417 61                  <2> 	popa
  5726 00004418 6648                <2> 	dec ax
  5727 0000441A 47                  <2> 	inc edi
  5728 0000441B 663D0100            <2> 	cmp ax, 1
  5729 0000441F 77F0                <2> 	ja .circle
  5730 00004421 66F7D6              <2> 	not si
  5731                              <2> .circle2:
  5732 00004424 60                  <2> 	pusha
  5733 00004425 E86E210000          <2> 	call drawcircle
  5734 0000442A 61                  <2> 	popa
  5735 0000442B 47                  <2> 	inc edi
  5736 0000442C 6640                <2> 	inc ax
  5737 0000442E 6639C8              <2> 	cmp ax, cx
  5738 00004431 76F1                <2> 	jbe .circle2
  5739 00004433 5B                  <2> 	pop ebx
  5740 00004434 66F7D6              <2> 	not si
  5741 00004437 660335[58020000]    <2> 	add si, [timenanoseconds]
  5742 0000443E 4B                  <2> 	dec ebx
  5743 0000443F 81FB00000000        <2> 	cmp ebx, 0
  5744 00004445 77B2                <2> 	ja .ctlp
  5745 00004447 E83B000000          <2> 	call .etime
  5746 0000444C 53                  <2> 	push ebx
  5747 0000444D 57                  <2> 	push edi
  5748 0000444E 59                  <2> 	pop ecx
  5749 0000444F E803EEFFFF          <2> 	call showdec
  5750 00004454 BE[15450000]        <2> 	mov esi, .msgcircle
  5751 00004459 E8BED8FFFF          <2> 	call print
  5752 0000445E 59                  <2> 	pop ecx
  5753 0000445F E8F3EDFFFF          <2> 	call showdec
  5754 00004464 BE[2C450000]        <2> 	mov esi, .msgtime
  5755 00004469 E8AED8FFFF          <2> 	call print
  5756 0000446E C3                  <2> 	ret
  5757                              <2> 	
  5758                              <2> .stime:
  5759 0000446F F4                  <2> 	hlt
  5760 00004470 A1[54020000]        <2> 	mov eax, [timeseconds]
  5761 00004475 8B1D[58020000]      <2> 	mov ebx, [timenanoseconds]
  5762 0000447B A3[3B450000]        <2> 	mov [.time], eax
  5763 00004480 891D[3F450000]      <2> 	mov [.time + 4], ebx
  5764 00004486 C3                  <2> 	ret
  5765                              <2> 	
  5766                              <2> .etime:
  5767 00004487 A1[54020000]        <2> 	mov eax, [timeseconds]
  5768 0000448C 8B1D[58020000]      <2> 	mov ebx, [timenanoseconds]
  5769 00004492 8B0D[3B450000]      <2> 	mov ecx, [.time]
  5770 00004498 8B15[3F450000]      <2> 	mov edx, [.time + 4]
  5771 0000449E C1EA0A              <2> 	shr edx, 10
  5772 000044A1 C1EB0A              <2> 	shr ebx, 10
  5773 000044A4 29C8                <2> 	sub eax, ecx
  5774 000044A6 3D00000000          <2> 	cmp eax, 0
  5775 000044AB 740E                <2> 	je .notclp
  5776                              <2> .tclp:
  5777 000044AD 81C340420F00        <2> 	add ebx, 1000000
  5778 000044B3 48                  <2> 	dec eax
  5779 000044B4 3D00000000          <2> 	cmp eax, 0
  5780 000044B9 75F2                <2> 	jne .tclp
  5781                              <2> .notclp:
  5782 000044BB 29D3                <2> 	sub ebx, edx
  5783 000044BD C3                  <2> 	ret
  5784                              <2> 	
  5785                              <2> .st:
  5786 000044BE 6631C0              <2> 	xor ax, ax
  5787 000044C1 6631DB              <2> 	xor bx, bx
  5788 000044C4 668B0D[78540000]    <2> 	mov cx, [resolutiony]
  5789 000044CB 668B15[76540000]    <2> 	mov dx, [resolutionx]
  5790                              <2> .lp:
  5791 000044D2 60                  <2> 	pusha
  5792 000044D3 E837250000          <2> 	call drawline
  5793 000044D8 61                  <2> 	popa
  5794                              <2> .noswitch:
  5795 000044D9 47                  <2> 	inc edi
  5796 000044DA 6643                <2> 	inc bx
  5797 000044DC 664A                <2> 	dec dx
  5798 000044DE 6681FB0000          <2> 	cmp bx, 0
  5799 000044E3 74ED                <2> 	je .lp
  5800 000044E5 6681FA0000          <2> 	cmp dx, 0
  5801 000044EA 75E6                <2> 	jne .lp
  5802                              <2> .lp2:
  5803 000044EC 60                  <2> 	pusha
  5804 000044ED E81D250000          <2> 	call drawline
  5805 000044F2 61                  <2> 	popa
  5806 000044F3 47                  <2> 	inc edi
  5807 000044F4 6640                <2> 	inc ax
  5808 000044F6 6649                <2> 	dec cx
  5809 000044F8 6681F90000          <2> 	cmp cx, 0
  5810 000044FD 75ED                <2> 	jne .lp2
  5811 000044FF C3                  <2> 	ret
  5812                              <2> 	
  5813 00004500 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  5814 00004509 6520647261776E2069- <2>
  5815 00004512 6E2000              <2>
  5816 00004515 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  5817 0000451E 65726520647261776E- <2>
  5818 00004527 20696E2000          <2>
  5819 0000452C 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  5820 00004535 6E64732E0A00        <2>
  5821 0000453B 0000000000000000    <2> .time dd 0,0	
  5822                              <1> %endif
  5823                              <1> %include 'source/programs/logout.asm'
  5824 00004543 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5825 0000454C E99DE5FFFF          <2> 	jmp os
  5826                              <1> %include 'source/programs/loop.asm'
  5827 00004551 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5828 00004558 803D[5B9D0300]00    <2> 	cmp byte [LOOPON], 0
  5829 0000455F 0F8501000000        <2> 	jne near filoop
  5830 00004565 C3                  <2> 	ret
  5831 00004566 8B35[5C9D0300]      <2> filoop: mov esi, [LOOPPOS]
  5832 0000456C FE0D[F19C0300]      <2> 	dec byte [IFON]
  5833 00004572 C605[5B9D0300]00    <2> 	mov byte [LOOPON], 0
  5834 00004579 8935[569D0300]      <2> 	mov [BATCHPOS], esi
  5835 0000457F 8935[8C390000]      <2> 	mov [batchedi], esi
  5836 00004585 C3                  <2> 	ret 
  5837                              <1> %ifdef disk.none
  5838                              <1> %else
  5839                              <1> 	%include 'source/programs/ls.asm'
  5840 00004586 FF2C6C7300          <2> db 255,44,"ls",0
  5841 0000458B BE[B4840300]        <2> 		mov esi, diskfileindex
  5842                              <2> 	diskindexdir:
  5843 00004590 803E5F              <2> 		cmp byte [esi], '_'
  5844 00004593 7440                <2> 		je nextdiskindexdir
  5845 00004595 E863D7FFFF          <2> 		call printquiet
  5846 0000459A 56                  <2> 		push esi
  5847 0000459B BE[F5450000]        <2> 		mov esi, disktab
  5848 000045A0 E858D7FFFF          <2> 		call printquiet
  5849 000045A5 5E                  <2> 		pop esi
  5850 000045A6 8B4E05              <2> 		mov ecx, [esi + 5]
  5851 000045A9 C605[78310000]05    <2> 		mov byte [firsthexshown], 5
  5852 000045B0 E8A2ECFFFF          <2> 		call showdec
  5853 000045B5 56                  <2> 		push esi
  5854 000045B6 BE[45820000]        <2> 		mov esi, line
  5855 000045BB E83DD7FFFF          <2> 		call printquiet
  5856 000045C0 5E                  <2> 		pop esi
  5857 000045C1 81C609000000        <2> 		add esi, 9
  5858 000045C7 81FE[DA860300]      <2> 		cmp esi, enddiskfileindex
  5859 000045CD 72C1                <2> 		jb diskindexdir
  5860 000045CF E897E2FFFF          <2> 		call termcopy
  5861 000045D4 C3                  <2> 		ret
  5862                              <2> 	nextdiskindexdir:
  5863 000045D5 46                  <2> 		inc esi
  5864 000045D6 803E00              <2> 		cmp byte [esi], 0
  5865 000045D9 75FA                <2> 		jne nextdiskindexdir
  5866 000045DB 81C609000000        <2> 		add esi, 9
  5867 000045E1 81FE[DA860300]      <2> 		cmp esi, enddiskfileindex
  5868 000045E7 72A7                <2> 		jb diskindexdir
  5869 000045E9 E87DE2FFFF          <2> 		call termcopy
  5870 000045EE C3                  <2> 		ret
  5871                              <2> 		
  5872 000045EF 4469736B2000        <2> 		diskmsg db "Disk ",0
  5873 000045F5 0D09090900          <2> 		disktab db 13,9,9,9,0
  5874                              <1> %endif
  5875                              <1> %include 'source/programs/memory.asm'
  5876 000045FA FF2C6D656D6F727900  <2> db 255,44,"memory",0
  5877 00004603 BE[70820000]        <2> 	mov esi, memlistbuf
  5878 00004608 31FF                <2> 	xor edi, edi
  5879 0000460A 668B3D[B0840000]    <2> 	mov di, [memlistend]
  5880 00004611 01F7                <2> 	add edi, esi
  5881                              <2> printmemmap:
  5882 00004613 8B0E                <2> 	mov ecx, [esi]
  5883 00004615 E873EBFFFF          <2> 	call showhex
  5884 0000461A 81C608000000        <2> 	add esi, 8
  5885 00004620 8B0E                <2> 	mov ecx, [esi]
  5886 00004622 E866EBFFFF          <2> 	call showhex
  5887 00004627 81C608000000        <2> 	add esi, 8
  5888 0000462D 8B0E                <2> 	mov ecx, [esi]
  5889 0000462F E859EBFFFF          <2> 	call showhex
  5890 00004634 81C608000000        <2> 	add esi, 8
  5891 0000463A 57                  <2> 	push edi
  5892 0000463B 56                  <2> 	push esi
  5893 0000463C BE[45820000]        <2> 	mov esi, line
  5894 00004641 E8D6D6FFFF          <2> 	call print
  5895 00004646 5E                  <2> 	pop esi
  5896 00004647 5F                  <2> 	pop edi
  5897 00004648 39FE                <2> 	cmp esi, edi
  5898 0000464A 72C7                <2> 	jb printmemmap
  5899 0000464C C3                  <2> 	ret
  5900                              <2> 	
  5901                              <1> %include 'source/programs/pci.asm'
  5902 0000464D FF2C70636900        <2> db 255,44,"pci",0
  5903 00004653 E858190000          <2> 	call pcidump
  5904 00004658 C3                  <2> 	ret 
  5905                              <1> %ifdef network.included
  5906                              <1> 	%include 'source/programs/ping.asm'
  5907                              <1> %endif
  5908                              <1> %ifdef disk.none
  5909                              <1> %else
  5910                              <1> 	%include 'source/programs/play.asm'
  5911 00004659 FF2C706C61796100    <2> db 255,44,"playa",0
  5912 00004661 8B3D[662F0000]      <2> 	mov edi, [currentcommandloc]
  5913 00004667 81C706000000        <2> 	add edi, 6
  5914 0000466D E828000000          <2> 	call playasync
  5915 00004672 C3                  <2> 	ret
  5916 00004673 FF2C706C617900      <2> db 255,44,"play",0
  5917                              <2> play:
  5918 0000467A 8B3D[662F0000]      <2> 	mov edi, [currentcommandloc]
  5919 00004680 81C705000000        <2> 	add edi, 5
  5920 00004686 E80F000000          <2> 	call playasync
  5921                              <2> .waitforsound:
  5922 0000468B F4                  <2> 	hlt
  5923                              <2> %ifdef sound.included
  5924                              <2> 	mov eax, [Length0]
  5925                              <2> 	or ax, [Length1]
  5926                              <2> %endif
  5927 0000468C 0A05[5C020000]      <2> 	or al, [soundon]
  5928 00004692 3D00000000          <2> 	cmp eax, 0
  5929 00004697 75F2                <2> 	jne .waitforsound
  5930 00004699 C3                  <2> 	ret
  5931                              <2> playasync:
  5932 0000469A BE0000C000          <2> 	mov esi, 0xC00000
  5933 0000469F E8411C0000          <2> 	call loadfile
  5934 000046A4 81FA94010000        <2> 	cmp edx, 404
  5935 000046AA 743F                <2> 	je nosoundfound
  5936 000046AC BB0000C000          <2> 	mov ebx, 0xC00000
  5937 000046B1 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  5938 000046B8 0F845A000000        <2> 	je near wave_player
  5939 000046BE 66813B534E          <2> 	cmp word [ebx], "SN"
  5940 000046C3 7526                <2> 	jne nosoundfound
  5941 000046C5 81C306000000        <2> 	add ebx, 6
  5942 000046CB 891D[5F020000]      <2> 	mov [soundpos], ebx
  5943 000046D1 035BFC              <2> 	add ebx, [ebx - 4]
  5944 000046D4 891D[63020000]      <2> 	mov [soundendpos], ebx
  5945 000046DA 66C705[5D020000]00- <2> 	mov word [soundrepititions], 0
  5946 000046E2 00                  <2>
  5947 000046E3 C605[5C020000]01    <2> 	mov byte [soundon], 1
  5948 000046EA C3                  <2> 	ret
  5949                              <2> nosoundfound:
  5950 000046EB BE[11470000]        <2> 	mov esi, notfoundsound
  5951 000046F0 E827D6FFFF          <2> 	call print
  5952 000046F5 8B35[662F0000]      <2> 	mov esi, [currentcommandloc]
  5953 000046FB 81C605000000        <2> 	add esi, 5
  5954 00004701 E816D6FFFF          <2> 	call print
  5955 00004706 BE[14820000]        <2> 	mov esi, notfound2
  5956 0000470B E80CD6FFFF          <2> 	call print
  5957 00004710 C3                  <2> 	ret
  5958 00004711 706C61793A2000      <2> notfoundsound db "play: ",0
  5959                              <2> 
  5960                              <2> %ifdef sound.included
  5961                              <2> sbplay:
  5962                              <2> 		mov esi, 0xC00000
  5963                              <2> 		mov ebx, esi
  5964                              <2> 		add esi, WAVSTART
  5965                              <2> 		sub edi, esi
  5966                              <2> 		mov [Length1], di
  5967                              <2> 		shr edi, 15
  5968                              <2> 		mov [Length0], edi
  5969                              <2> 		mov ecx, [ebx + 24]
  5970                              <2> 		mov [Freq], ecx
  5971                              <2> 		xor eax, eax
  5972                              <2> 		mov	edx, 0xC00000 ;physical location of sound
  5973                              <2> 		add edx, WAVSTART
  5974                              <2> 		add	eax, edx
  5975                              <2> 		mov esi, eax
  5976                              <2> 		xor ecx, ecx
  5977                              <2> 		xor ebx, ebx
  5978                              <2> 		mov [SegLoc], bx
  5979                              <2> 		add ebx, 0x80000
  5980                              <2> 		mov cx, 0xFFFF
  5981                              <2> 		cmp di, 0
  5982                              <2> 		jne .autoinit
  5983                              <2> 		mov cx, [Length1]
  5984                              <2> 		mov byte [OddLength], 1
  5985                              <2> 		cmp cx, 32768
  5986                              <2> 		jae .autoinit
  5987                              <2> 		mov byte [OddLength], 0
  5988                              <2> 		shl cx, 1
  5989                              <2> 		inc edi
  5990                              <2> .autoinit:
  5991                              <2> 		dec edi
  5992                              <2> 		mov [Length0], edi
  5993                              <2> 		mov [Length1], cx
  5994                              <2> 		shr cx, 1
  5995                              <2> 		inc cx
  5996                              <2> 		add eax, ecx
  5997                              <2> 		mov [NextMemLoc], eax
  5998                              <2> 		mov	[MemLoc], esi
  5999                              <2> 		call DMACopy
  6000                              <2> 		xor ebx, ebx
  6001                              <2> 		mov bx, [SegLoc]
  6002                              <2> 		xor ecx, ecx
  6003                              <2> 		mov cx, [Length1]
  6004                              <2> 		shr cx, 1
  6005                              <2> 		inc cx
  6006                              <2> 		add ebx, ecx
  6007                              <2> 		mov [SegLoc], bx
  6008                              <2> 		add ebx, 0x80000
  6009                              <2> 		mov esi, [NextMemLoc]
  6010                              <2> 		mov eax, esi
  6011                              <2> 		add eax, ecx
  6012                              <2> 		mov [NextMemLoc], eax
  6013                              <2> 		mov	[MemLoc], esi
  6014                              <2> 		call DMACopy
  6015                              <2> 		call DMAPlay
  6016                              <2> 		call PlayDSP
  6017                              <2> 		ret
  6018                              <2> WAVSTART equ 44
  6019                              <2> wave_player:
  6020                              <2> 	cmp byte [SoundBlaster], 1
  6021                              <2> 	je near sbplay
  6022                              <2> 	mov esi, nosoundblaster
  6023                              <2> 	call print
  6024                              <2> 	ret
  6025                              <2> %else
  6026                              <2> 	wave_player:
  6027 00004718 BE[23470000]        <2> 		mov esi, nosoundblaster
  6028 0000471D E8FAD5FFFF          <2> 		call print
  6029 00004722 C3                  <2> 		ret
  6030                              <2> %endif
  6031 00004723 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6032 0000472C 426C61737465722064- <2>
  6033 00004735 657465637465642E0A- <2>
  6034 0000473E 00                  <2>
  6035                              <1> %endif
  6036                              <1> %include 'source/programs/pwd.asm'
  6037 0000473F FF2C70776400        <2> db 255,44,"pwd",0
  6038 00004745 BE[EC9A0300]        <2> 	mov esi, currentfolder
  6039 0000474A E8AED5FFFF          <2> 	call printquiet
  6040 0000474F BE[45820000]        <2> 	mov esi, line
  6041 00004754 E8C3D5FFFF          <2> 	call print
  6042 00004759 C3                  <2> 	ret
  6043                              <2> 	
  6044                              <1> %include 'source/programs/reboot.asm'
  6045 0000475A FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6046 00004763 0F011D[6D470000]    <2> 		lidt [idtreboot]
  6047 0000476A CD00                <2> 		int 0
  6048 0000476C F4                  <2> 		hlt
  6049                              <2> 	
  6050 0000476D 0000                <2> 	idtreboot dw 0
  6051 0000476F 00000000            <2> 			  dd 0
  6052                              <2> 
  6053                              <2> 	coldboot:
  6054 00004773 66B84000            <2> 		MOV AX, 0040h
  6055 00004777 8EC0                <2> 		MOV ES, AX
  6056 00004779 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6057 00004782 00                  <2>
  6058 00004783 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6059 0000478A CF                  <2> 		IRET
  6060                              <2> 
  6061                              <2> 	warmboot:
  6062 0000478B 66B84000            <2> 		MOV AX, 0040h
  6063 0000478F 8EC0                <2> 		MOV ES, AX
  6064 00004791 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6065 0000479A 12                  <2>
  6066 0000479B EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6067 000047A2 CF                  <2> 		IRET
  6068                              <2> 		
  6069                              <1> %include 'source/programs/reg.asm'
  6070 000047A3 FF2C72656700        <2> db 255,44,"reg",0
  6071 000047A9 CD03                <2> 	int 3
  6072 000047AB C3                  <2> 	ret 
  6073                              <1> %ifdef disk.none
  6074                              <1> %else
  6075                              <1> 	%include 'source/programs/show.asm'
  6076 000047AC FF2C73686F7700      <2> db 255,44,"show",0
  6077                              <2> showprog:
  6078 000047B3 8B3D[662F0000]      <2> 		mov edi, [currentcommandloc]
  6079 000047B9 81C705000000        <2> 		add edi, 5
  6080 000047BF BE00004000          <2> 		mov esi, 0x400000
  6081 000047C4 803F26              <2> 		cmp byte [edi], '&'
  6082 000047C7 741B                <2> 		je .nullfile
  6083 000047C9 BE00008000          <2> 		mov esi, 0x800000
  6084 000047CE E8121B0000          <2> 		call loadfile
  6085 000047D3 81FA94010000        <2> 		cmp edx, 404
  6086 000047D9 0F8483000000        <2> 		je near filenotfound
  6087 000047DF BE00008000          <2> 		mov esi, 0x800000
  6088                              <2> .nullfile:
  6089                              <2> %ifdef gui.included
  6090 000047E4 66813E424D          <2> 		cmp word [esi], "BM"
  6091 000047E9 7410                <2> 		je bmpfound
  6092                              <2> %endif
  6093 000047EB E82CD5FFFF          <2> 		call print
  6094 000047F0 BE[45820000]        <2> 		mov esi, line
  6095 000047F5 E822D5FFFF          <2> 		call print
  6096 000047FA C3                  <2> 		ret
  6097                              <2> %ifdef gui.included
  6098                              <2> bmpfound:
  6099 000047FB 803D[6A820000]00    <2> 		cmp byte [guion], 0
  6100 00004802 0F8428000000        <2> 		je near noguibmp
  6101 00004808 BE00008000          <2> 		mov esi, 0x800000
  6102 0000480D 31C9                <2> 		xor ecx, ecx
  6103 0000480F 31D2                <2> 		xor edx, edx
  6104 00004811 31C0                <2> 		xor eax, eax
  6105 00004813 31DB                <2> 		xor ebx, ebx
  6106 00004815 E8AC1C0000          <2> 		call showbmp
  6107 0000481A 30C0                <2> 		xor al, al
  6108 0000481C B405                <2> 		mov ah, 5
  6109 0000481E CD30                <2> 		int 30h
  6110 00004820 E816230000          <2> 		call guiclear
  6111 00004825 E8F51F0000          <2> 		call clearmousecursor
  6112 0000482A E85C230000          <2> 		call reloadallgraphics
  6113 0000482F C3                  <2> 		ret
  6114                              <2> noguibmp:
  6115 00004830 BE[3B480000]        <2> 		mov esi, warnguimsg
  6116 00004835 E8E2D4FFFF          <2> 		call print
  6117 0000483A C3                  <2> 		ret
  6118 0000483B 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6119 00004844 6E6F7420626520646F- <2>
  6120 0000484D 6E6520776974686F75- <2>
  6121 00004856 742074686520475549- <2>
  6122 0000485F 2E0A00              <2>
  6123                              <2> %endif
  6124                              <2> 
  6125                              <2> filenotfound:
  6126 00004862 BE[95480000]        <2> 		mov esi, filenf
  6127 00004867 E8B0D4FFFF          <2> 		call print
  6128 0000486C 8B35[662F0000]      <2> 		mov esi, [currentcommandloc]
  6129                              <2> findfilenotfoundzero:
  6130 00004872 8A06                <2> 		mov al, [esi]
  6131 00004874 46                  <2> 		inc esi
  6132 00004875 3C00                <2> 		cmp al, 0
  6133 00004877 7411                <2> 		je nofilenamenotfound
  6134 00004879 81FE[60B50300]      <2> 		cmp esi, buftxtend
  6135 0000487F 7309                <2> 		jae nofilenamenotfound
  6136 00004881 3C20                <2> 		cmp al, " "
  6137 00004883 75ED                <2> 		jne findfilenotfoundzero
  6138 00004885 E892D4FFFF          <2> 		call print
  6139                              <2> nofilenamenotfound:
  6140 0000488A BE[A0480000]        <2> 		mov esi, filenf2
  6141 0000488F E888D4FFFF          <2> 		call print
  6142 00004894 C3                  <2> 		ret
  6143 00004895 5468652066696C6520- <2> filenf db "The file ",34,0
  6144 0000489E 2200                <2>
  6145 000048A0 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6146 000048A9 6F7420626520666F75- <2>
  6147 000048B2 6E642E0A00          <2>
  6148                              <1> %endif
  6149                              <1> %include 'source/programs/shush.asm'
  6150 000048B7 FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6151                              <2> shushprog:
  6152                              <2> %ifdef gui.included
  6153 000048BF 803D[6A820000]00    <2> 	cmp byte [guion], 0
  6154 000048C6 0F84B9000000        <2> 	je near .noswitchsize
  6155 000048CC 8B35[662F0000]      <2> 	mov esi, [currentcommandloc]
  6156 000048D2 81C606000000        <2> 	add esi, 6
  6157 000048D8 56                  <2> 	push esi
  6158 000048D9 4E                  <2> 	dec esi
  6159                              <2> .findspace:
  6160 000048DA 46                  <2> 	inc esi
  6161 000048DB 8A06                <2> 	mov al, [esi]
  6162 000048DD 3C00                <2> 	cmp al, 0
  6163 000048DF 0F84A0000000        <2> 	je near .noswitchsize
  6164 000048E5 3C58                <2> 	cmp al, "X"
  6165 000048E7 7408                <2> 	je .donefind
  6166 000048E9 3C78                <2> 	cmp al, "x"
  6167 000048EB 7404                <2> 	je .donefind
  6168 000048ED 3C20                <2> 	cmp al, " "
  6169 000048EF 75E9                <2> 	jne .findspace
  6170                              <2> .donefind:
  6171 000048F1 30C0                <2> 	xor al, al
  6172 000048F3 8806                <2> 	mov [esi], al
  6173 000048F5 46                  <2> 	inc esi
  6174 000048F6 89F7                <2> 	mov edi, esi
  6175 000048F8 E83CEAFFFF          <2> 	call cnvrttxt
  6176 000048FD 89C8                <2> 	mov eax, ecx
  6177 000048FF 5E                  <2> 	pop esi
  6178 00004900 50                  <2> 	push eax
  6179 00004901 89F7                <2> 	mov edi, esi
  6180 00004903 E831EAFFFF          <2> 	call cnvrttxt
  6181 00004908 89CB                <2> 	mov ebx, ecx
  6182 0000490A 58                  <2> 	pop eax	
  6183 0000490B 6681FB0000          <2> 	cmp bx, 0
  6184 00004910 0F846F000000        <2> 	je near .noswitchsize
  6185 00004916 663D0000            <2> 	cmp ax, 0
  6186 0000491A 0F8465000000        <2> 	je near .noswitchsize
  6187 00004920 66C1E303            <2> 	shl bx, 3
  6188 00004924 66C1E004            <2> 	shl ax, 4
  6189 00004928 663B1D[76540000]    <2> 	cmp bx, [resolutionx]
  6190 0000492F 7607                <2> 	jbe .nofixx
  6191 00004931 668B1D[76540000]    <2> 	mov bx, [resolutionx]
  6192                              <2> .nofixx:
  6193 00004938 66051000            <2> 	add ax, 16
  6194 0000493C 663B05[78540000]    <2> 	cmp ax, [resolutiony]
  6195 00004943 7606                <2> 	jbe .nofixy
  6196 00004945 66A1[78540000]      <2> 	mov ax, [resolutiony]
  6197                              <2> .nofixy:
  6198 0000494B 662D1000            <2> 	sub ax, 16
  6199 0000494F 6631C9              <2> 	xor cx, cx
  6200 00004952 6631D2              <2> 	xor dx, dx
  6201 00004955 66891D[296F0000]    <2> 	mov [termwindow], bx
  6202 0000495C 66A3[2B6F0000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6203 00004962 BE[296F0000]        <2> 	mov esi, termwindow
  6204 00004967 31DB                <2> 	xor ebx, ebx
  6205 00004969 6631C0              <2> 	xor ax, ax
  6206 0000496C E8E52A0000          <2> 	call showwindow
  6207 00004971 E8C5210000          <2> 	call guiclear
  6208 00004976 E850D4FFFF          <2> 	call clear
  6209 0000497B E80B220000          <2> 	call reloadallgraphics
  6210 00004980 E8521F0000          <2> 	call switchmousepos2
  6211                              <2> .noswitchsize:
  6212                              <2> %endif
  6213 00004985 BE[90490000]        <2> 	mov esi, shushmsg
  6214 0000498A E88DD3FFFF          <2> 	call print
  6215 0000498F C3                  <2> 	ret
  6216 00004990 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6217 00004999 6F2074686520536F6C- <2>
  6218 000049A2 6C65724F5320486172- <2>
  6219 000049AB 646C7920556E69782D- <2>
  6220 000049B4 436F6D70617469626C- <2>
  6221 000049BD 65205368656C6C210A- <2>
  6222 000049C6 00                  <2>
  6223                              <1> %include 'source/programs/system.asm'
  6224 000049C7 FF2C73797374656D00  <2> 	db 255,44,"system",0
  6225 000049D0 BE[CD4A0000]        <2> 	mov esi, kernelinfomsg
  6226 000049D5 E823D3FFFF          <2> 	call printquiet
  6227 000049DA B9[B4840300]        <2> 	mov ecx, osend
  6228 000049DF E873E8FFFF          <2> 	call showdec
  6229 000049E4 BE[E24A0000]        <2> 	mov esi, diskbytemsg
  6230 000049E9 E80FD3FFFF          <2> 	call printquiet
  6231 000049EE B9[B4840300]        <2> 	mov ecx, osend
  6232 000049F3 81C1[16730500]      <2> 	add ecx, commandbufend
  6233 000049F9 81E9[DC860300]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6234 000049FF E853E8FFFF          <2> 	call showdec
  6235 00004A04 BE[F94A0000]        <2> 	mov esi, membytemsg
  6236 00004A09 E8EFD2FFFF          <2> 	call printquiet
  6237 00004A0E BE[444B0000]        <2> 	mov esi, endofmemmsg
  6238 00004A13 E8E5D2FFFF          <2> 	call printquiet
  6239 00004A18 B9[16871500]        <2> 	mov ecx, bssend
  6240 00004A1D E86BE7FFFF          <2> 	call showhex
  6241 00004A22 BE[124B0000]        <2> 	mov esi, systeminfomsg
  6242 00004A27 E8D1D2FFFF          <2> 	call printquiet
  6243                              <2> getcpuspeed:
  6244 00004A2C B8FE000000          <2> 	mov eax, 0xFE
  6245 00004A31 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6246 00004A33 B020                <2> 	mov al, 0x20
  6247 00004A35 E620                <2> 	out 0x20, al
  6248 00004A37 F4                  <2> 	hlt
  6249 00004A38 0F31                <2> 	rdtsc
  6250 00004A3A 89D6                <2> 	mov esi, edx
  6251 00004A3C 89C7                <2> 	mov edi, eax
  6252 00004A3E 31C0                <2> 	xor eax, eax
  6253 00004A40 C605[3D020000]01    <2> 	mov byte [testingcpuspeed], 1
  6254                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6255 00004A47 40                  <2> 	inc eax
  6256 00004A48 EBFD                <2> 	jmp cpuspeedloop
  6257                              <2> cpuspeedloopend:
  6258 00004A4A 0F31                <2> 	rdtsc
  6259 00004A4C 29F8                <2> 	sub eax, edi
  6260 00004A4E 29F2                <2> 	sub edx, esi
  6261 00004A50 8915[46020000]      <2> 	mov [cpuclocksperint + 4], edx
  6262 00004A56 A3[42020000]        <2> 	mov [cpuclocksperint], eax
  6263 00004A5B 31C0                <2> 	xor eax, eax
  6264 00004A5D E621                <2> 	out 0x21, al
  6265 00004A5F B020                <2> 	mov al, 0x20
  6266 00004A61 E620                <2> 	out 0x20, al
  6267 00004A63 31D2                <2> 	xor edx, edx
  6268 00004A65 31C0                <2> 	xor eax, eax
  6269 00004A67 A1[3E020000]        <2> 	mov eax, [cpuspeedperint]
  6270 00004A6C D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6271                              <2> 				;result by 2
  6272 00004A6E 8B1D[50020000]      <2> 	mov ebx, [timeinterval]
  6273 00004A74 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6274 00004A77 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6275 00004A79 89C1                <2> 	mov ecx, eax
  6276 00004A7B E8D7E7FFFF          <2> 	call showdec
  6277 00004A80 BE[284B0000]        <2> 	mov esi, cpuspeedmsg
  6278 00004A85 E873D2FFFF          <2> 	call printquiet
  6279 00004A8A 31D2                <2> 	xor edx, edx
  6280 00004A8C A1[42020000]        <2> 	mov eax, [cpuclocksperint]
  6281 00004A91 8B15[46020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6282 00004A97 8B1D[50020000]      <2> 	mov ebx, [timeinterval]
  6283 00004A9D C1EB0A              <2> 	shr ebx, 10
  6284 00004AA0 F7F3                <2> 	div ebx
  6285 00004AA2 89C1                <2> 	mov ecx, eax
  6286 00004AA4 E8AEE7FFFF          <2> 	call showdec
  6287 00004AA9 BE[2E4B0000]        <2> 	mov esi, cpuclockmsg
  6288 00004AAE E84AD2FFFF          <2> 	call printquiet
  6289 00004AB3 8B0D[4A020000]      <2> 	mov ecx, [memoryspace]
  6290 00004AB9 C1E914              <2> 	shr ecx, 20
  6291 00004ABC 41                  <2> 	inc ecx	;the reading is one MB behind
  6292 00004ABD E895E7FFFF          <2> 	call showdec
  6293 00004AC2 BE[334B0000]        <2> 	mov esi, memoryspacemsg
  6294 00004AC7 E850D2FFFF          <2> 	call print
  6295                              <2> %ifdef sound.included
  6296                              <2> 	cmp byte [SoundBlaster], 0
  6297                              <2> 	je .nosb
  6298                              <2> 	mov esi, soundblastermsg
  6299                              <2> 	call print
  6300                              <2> .nosb:
  6301                              <2> %endif
  6302 00004ACC C3                  <2> 	ret
  6303                              <2> 
  6304 00004ACD 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6305 00004AD6 666F726D6174696F6E- <2>
  6306 00004ADF 3A0A00              <2>
  6307 00004AE2 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6308 00004AEB 6B2053706163652055- <2>
  6309 00004AF4 7365640A00          <2>
  6310 00004AF9 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6311 00004B02 6F7279205370616365- <2>
  6312 00004B0B 20557365640A00      <2>
  6313 00004B12 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6314 00004B1B 6E666F726D6174696F- <2>
  6315 00004B24 6E3A0A00            <2>
  6316                              <2> %ifdef sound.included
  6317                              <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6318                              <2> %endif
  6319 00004B28 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6320 00004B2E 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6321 00004B33 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6322 00004B3C 2053706163650A00    <2>
  6323 00004B44 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6324 00004B4D 6D6F72792053706163- <2>
  6325 00004B56 653A20307800        <2>
  6326                              <1> %include 'source/programs/time.asm'
  6327 00004B5C 082E30303030303030- <2> timenscache db 8,".000000000"
  6328 00004B65 3030                <2>
  6329 00004B67 200A00              <2> timenscacheend: db " ",10,0
  6330 00004B6A 00                  <2> istimeset db 0
  6331 00004B6B 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  6332 00004B74 2063757272656E7420- <2>
  6333 00004B7D 554E49582074696D65- <2>
  6334 00004B86 3A0A00              <2>
  6335 00004B89 00<rept>            <2> timeinputbuffer times 12 db 0
  6336 00004B95 00                  <2> timeinputbend: db 0
  6337                              <2> 
  6338 00004B96 FF2C74696D6500      <2> db 255,44,"time",0
  6339                              <2> 	;cmp byte [istimeset], 0
  6340                              <2> 	;jne timeisset
  6341 00004B9D E880000000          <2> 	call time
  6342 00004BA2 E828020000          <2> 	call timeconvert	
  6343                              <2> 	; mov esi, settimemsg
  6344                              <2> 	; call print
  6345                              <2> 	; mov esi, timeinputbuffer
  6346                              <2> 	; mov edi, timeinputbend
  6347                              <2> 	; call readline
  6348                              <2> 	; mov esi, timeinputbuffer
  6349                              <2> 	; xor edi, edi
  6350                              <2> 	; call cnvrttxt
  6351 00004BA7 890D[54020000]      <2> 	mov [timeseconds], ecx
  6352                              <2> 	;xor ecx, ecx
  6353                              <2> 	;mov [timenanoseconds], ecx
  6354 00004BAD C605[6A4B0000]01    <2> 	mov byte [istimeset], 1
  6355                              <2> timeisset:
  6356 00004BB4 8B0D[54020000]      <2> 	mov ecx, [timeseconds]
  6357 00004BBA E898E6FFFF          <2> 	call showdec
  6358                              <2> 	
  6359 00004BBF 8B0D[58020000]      <2> 	mov ecx, [timenanoseconds]
  6360 00004BC5 BE[5C4B0000]        <2> 	mov esi, timenscache
  6361 00004BCA C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6362 00004BD1 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6363 00004BD8 C6460A30            <2> 	mov byte [esi + 10], "0"
  6364 00004BDC BE[674B0000]        <2> 	mov esi, timenscacheend
  6365 00004BE1 E854E4FFFF          <2> 	call convert
  6366 00004BE6 BE[5C4B0000]        <2> 	mov esi, timenscache
  6367 00004BEB E80DD1FFFF          <2> 	call printquiet
  6368                              <2> 	
  6369 00004BF0 E82D000000          <2> 	call time
  6370 00004BF5 BE[3A4F0000]        <2> 	mov esi, timeshow
  6371 00004BFA E8FED0FFFF          <2> 	call printquiet
  6372 00004BFF BE[45820000]        <2> 	mov esi, line
  6373 00004C04 E8F4D0FFFF          <2> 	call printquiet
  6374 00004C09 BE[434F0000]        <2> 	mov esi, dateshow
  6375 00004C0E E8EAD0FFFF          <2> 	call printquiet
  6376 00004C13 BE[45820000]        <2> 	mov esi, line
  6377 00004C18 E8E0D0FFFF          <2> 	call printquiet
  6378 00004C1D E9BE000000          <2> 	jmp findday
  6379                              <2> time:
  6380 00004C22 E851010000          <2> 	call tstackput1
  6381 00004C27 B00A                <2> 	mov al,10			;Get RTC register A
  6382 00004C29 E87B010000          <2> 	call tget1
  6383 00004C2E A880                <2> 	test al,0x80			;Is update in progress?
  6384 00004C30 75F0                <2> 	jne time				; yes, wait
  6385                              <2> 
  6386 00004C32 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  6387 00004C34 E870010000          <2> 	call tget1
  6388 00004C39 A2[314F0000]        <2> 	mov [RTCtimeSecond],al
  6389                              <2> 
  6390 00004C3E B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  6391 00004C40 E864010000          <2> 	call tget1
  6392 00004C45 A2[324F0000]        <2> 	mov [RTCtimeMinute],al
  6393                              <2> 
  6394 00004C4A B004                <2> 	mov al,0x04			;Get hours (see notes)
  6395 00004C4C E858010000          <2> 	call tget1
  6396 00004C51 A2[334F0000]        <2> 	mov [RTCtimeHour],al
  6397                              <2> 
  6398 00004C56 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  6399 00004C58 E84C010000          <2> 	call tget1
  6400 00004C5D A2[344F0000]        <2> 	mov [RTCtimeDay],al
  6401                              <2> 
  6402 00004C62 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  6403 00004C64 E840010000          <2> 	call tget1
  6404 00004C69 241F                <2> 	and al, 11111b
  6405 00004C6B A2[354F0000]        <2> 	mov [RTCtimeMonth],al
  6406                              <2> 
  6407 00004C70 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  6408 00004C72 E832010000          <2> 	call tget1
  6409 00004C77 A2[364F0000]        <2> 	mov [RTCtimeYear],al
  6410                              <2> 	
  6411 00004C7C BE[3A4F0000]        <2> 	mov esi, timeshow
  6412 00004C81 8A2D[334F0000]      <2> 	mov ch, [RTCtimeHour]
  6413 00004C87 E828010000          <2> 	call tput1
  6414 00004C8C 8A2D[324F0000]      <2> 	mov ch, [RTCtimeMinute]
  6415 00004C92 E81D010000          <2> 	call tput1
  6416 00004C97 8A2D[314F0000]      <2> 	mov ch, [RTCtimeSecond]
  6417 00004C9D E812010000          <2> 	call tput1
  6418 00004CA2 BE[434F0000]        <2> 	mov esi, dateshow
  6419 00004CA7 8A2D[354F0000]      <2> 	mov ch, [RTCtimeMonth]
  6420 00004CAD E802010000          <2> 	call tput1
  6421 00004CB2 8A2D[344F0000]      <2> 	mov ch, [RTCtimeDay]
  6422 00004CB8 E8F7000000          <2> 	call tput1
  6423 00004CBD B520                <2> 	mov ch, 0x20
  6424 00004CBF E8F0000000          <2> 	call tput1
  6425 00004CC4 4E                  <2> 	dec esi
  6426 00004CC5 8A2D[364F0000]      <2> 	mov ch, [RTCtimeYear]
  6427 00004CCB E8E4000000          <2> 	call tput1
  6428 00004CD0 E8BD000000          <2> 	call tstackget1
  6429 00004CD5 C3                  <2> 	ret
  6430 00004CD6 BE[3A4F0000]        <2> 	mov esi, timeshow
  6431 00004CDB E83CD0FFFF          <2> 	call print
  6432                              <2> ;;get day of week
  6433                              <2> ;;add these:
  6434                              <2> ;;century value
  6435                              <2> ;;last 2 digits of year
  6436                              <2> ;;last 2 digits of year right shifted twice
  6437                              <2> ;;month table value
  6438                              <2> ;;day of the month
  6439                              <2> ;;divide these by 7
  6440                              <2> ;;the remainder is the day
  6441                              <2> findday:
  6442 00004CE0 31C0                <2> 	xor eax, eax
  6443                              <2> ;;first convert the values from BCD to hex
  6444 00004CE2 A0[344F0000]        <2> 	mov al, [RTCtimeDay]
  6445 00004CE7 E873000000          <2> 	call converttohex
  6446 00004CEC 8825[374F0000]      <2> 	mov [dayhex], ah
  6447 00004CF2 A0[354F0000]        <2> 	mov al, [RTCtimeMonth]
  6448 00004CF7 E863000000          <2> 	call converttohex
  6449 00004CFC 8825[384F0000]      <2> 	mov [monthhex], ah
  6450 00004D02 A0[364F0000]        <2> 	mov al, [RTCtimeYear]
  6451 00004D07 E853000000          <2> 	call converttohex
  6452 00004D0C 8825[394F0000]      <2> 	mov [yearhex], ah
  6453 00004D12 31C0                <2> 	xor eax, eax
  6454 00004D14 A0[394F0000]        <2> 	mov al, [yearhex]
  6455 00004D19 C0E802              <2> 	shr al, 2
  6456 00004D1C 0205[394F0000]      <2> 	add al, [yearhex]
  6457 00004D22 0506000000          <2> 	add eax, 6
  6458 00004D27 31DB                <2> 	xor ebx, ebx
  6459 00004D29 8A1D[384F0000]      <2> 	mov bl, [monthhex]
  6460 00004D2F FECB                <2> 	dec bl
  6461 00004D31 81C3[584F0000]      <2> 	add ebx, month
  6462 00004D37 31C9                <2> 	xor ecx, ecx
  6463 00004D39 8A0B                <2> 	mov cl, [ebx]
  6464 00004D3B 01C8                <2> 	add eax, ecx
  6465 00004D3D 8A0D[374F0000]      <2> 	mov cl, [dayhex]
  6466 00004D43 01C8                <2> 	add eax, ecx
  6467 00004D45 66BB0700            <2> 	mov bx, 7
  6468 00004D49 31D2                <2> 	xor edx, edx
  6469 00004D4B 66F7F3              <2> 	div bx
  6470 00004D4E C1E202              <2> 	shl edx, 2
  6471 00004D51 81C2[644F0000]      <2> 	add edx, day
  6472 00004D57 8B32                <2> 	mov esi, [edx]
  6473 00004D59 E8BECFFFFF          <2> 	call print
  6474 00004D5E C3                  <2> 	ret
  6475                              <2> 	
  6476                              <2> converttohex:
  6477 00004D5F 88C4                <2> 	mov ah, al
  6478 00004D61 C0E804              <2> 	shr al, 4
  6479 00004D64 C0E404              <2> 	shl ah, 4
  6480 00004D67 C0EC04              <2> 	shr ah, 4
  6481 00004D6A 3C00                <2> 	cmp al, 0
  6482 00004D6C 7409                <2> 	je noconverttohex
  6483                              <2> converttohexlp:
  6484 00004D6E 80C40A              <2> 	add ah, 10
  6485 00004D71 FEC8                <2> 	dec al
  6486 00004D73 3C00                <2> 	cmp al, 0
  6487 00004D75 75F7                <2> 	jne converttohexlp
  6488                              <2> noconverttohex:
  6489 00004D77 C3                  <2> 	ret
  6490                              <2> 	
  6491                              <2> tstackput1:
  6492 00004D78 8935[2D4F0000]      <2> 	mov [tstack + 20], esi
  6493 00004D7E BE[194F0000]        <2> 	mov esi, tstack
  6494 00004D83 8906                <2> 	mov [esi], eax
  6495 00004D85 895E04              <2> 	mov [esi + 4], ebx
  6496 00004D88 894E08              <2> 	mov [esi + 8], ecx
  6497 00004D8B 89560C              <2> 	mov [esi + 12], edx
  6498 00004D8E 897E10              <2> 	mov [esi + 16], edi
  6499 00004D91 C3                  <2> 	ret
  6500                              <2> 	
  6501                              <2> tstackget1:
  6502 00004D92 BE[194F0000]        <2> 	mov esi, tstack
  6503 00004D97 8B06                <2> 	mov eax, [esi]
  6504 00004D99 8B5E04              <2> 	mov ebx, [esi + 4]
  6505 00004D9C 8B4E08              <2> 	mov ecx, [esi + 8]
  6506 00004D9F 8B560C              <2> 	mov edx, [esi + 12]
  6507 00004DA2 8B7E10              <2> 	mov edi, [esi + 16]
  6508 00004DA5 8B7614              <2> 	mov esi, [esi + 20]
  6509 00004DA8 C3                  <2> 	ret
  6510                              <2> 	
  6511                              <2> tget1:
  6512 00004DA9 66BA7000            <2> 	mov dx, 0x70
  6513 00004DAD EE                  <2> 	out dx, al
  6514 00004DAE 6642                <2> 	inc dx
  6515 00004DB0 EC                  <2> 	in al, dx
  6516 00004DB1 664A                <2> 	dec dx
  6517 00004DB3 C3                  <2> 	ret
  6518                              <2> 	
  6519                              <2> tput1:
  6520 00004DB4 66C1E904            <2> 	shr cx, 4
  6521 00004DB8 B030                <2> 	mov al, 48
  6522 00004DBA 00E8                <2> 	add al, ch
  6523 00004DBC 8806                <2> 	mov [esi], al
  6524 00004DBE 46                  <2> 	inc esi
  6525 00004DBF B030                <2> 	mov al, 48
  6526 00004DC1 C0E904              <2> 	shr cl, 4
  6527 00004DC4 00C8                <2> 	add al, cl
  6528 00004DC6 8806                <2> 	mov [esi], al
  6529 00004DC8 81C602000000        <2> 	add esi, 2
  6530 00004DCE C3                  <2> 	ret
  6531                              <2> 	
  6532                              <2> timeconvert: ;return time in the RTCtime stuff in ecx
  6533 00004DCF 31DB                <2> 	xor ebx, ebx
  6534 00004DD1 31C9                <2> 	xor ecx, ecx
  6535 00004DD3 31FF                <2> 	xor edi, edi
  6536 00004DD5 31F6                <2> 	xor esi, esi
  6537                              <2> 	
  6538 00004DD7 A0[314F0000]        <2> 	mov al, [RTCtimeSecond]
  6539 00004DDC E87EFFFFFF          <2> 	call converttohex
  6540 00004DE1 88E1                <2> 	mov cl, ah
  6541                              <2> 	
  6542 00004DE3 A0[324F0000]        <2> 	mov al, [RTCtimeMinute]
  6543 00004DE8 E872FFFFFF          <2> 	call converttohex
  6544 00004DED 88E3                <2> 	mov bl, ah
  6545 00004DEF B83C000000          <2> 	mov eax, 60
  6546 00004DF4 31D2                <2> 	xor edx, edx
  6547 00004DF6 F7E3                <2> 	mul ebx
  6548 00004DF8 01C1                <2> 	add ecx, eax
  6549                              <2> 	
  6550 00004DFA A0[334F0000]        <2> 	mov al, [RTCtimeHour]
  6551 00004DFF E85BFFFFFF          <2> 	call converttohex
  6552 00004E04 88E3                <2> 	mov bl, ah
  6553 00004E06 B8100E0000          <2> 	mov eax, 3600
  6554 00004E0B 31D2                <2> 	xor edx, edx
  6555 00004E0D F7E3                <2> 	mul ebx
  6556 00004E0F 01C1                <2> 	add ecx, eax
  6557                              <2> 		
  6558 00004E11 31C0                <2> 	xor eax, eax
  6559 00004E13 A0[364F0000]        <2> 	mov al, [RTCtimeYear]
  6560 00004E18 E842FFFFFF          <2> 	call converttohex
  6561 00004E1D 6689C6              <2> 	mov si, ax
  6562 00004E20 66C1EE08            <2> 	shr si, 8
  6563 00004E24 6681FE4600          <2> 	cmp si, 70
  6564 00004E29 7705                <2> 	ja .no100
  6565 00004E2B 6681C66400          <2> 	add si, 100
  6566                              <2> .no100:
  6567 00004E30 6681C66C07          <2> 	add si, 1900
  6568                              <2> 	
  6569 00004E35 BB[0B4F0000]        <2> 	mov ebx, .month
  6570 00004E3A A0[344F0000]        <2> 	mov al, [RTCtimeDay]
  6571 00004E3F E81BFFFFFF          <2> 	call converttohex
  6572 00004E44 88E0                <2> 	mov al, ah
  6573 00004E46 FEC8                <2> 	dec al
  6574 00004E48 31D2                <2> 	xor edx, edx
  6575 00004E4A 88C2                <2> 	mov dl, al
  6576 00004E4C A0[354F0000]        <2> 	mov al, [RTCtimeMonth]
  6577 00004E51 E809FFFFFF          <2> 	call converttohex
  6578 00004E56 88D0                <2> 	mov al, dl
  6579 00004E58 88E2                <2> 	mov dl, ah
  6580 00004E5A 30E4                <2> 	xor ah, ah
  6581 00004E5C 6689D5              <2> 	mov bp, dx
  6582                              <2> 	
  6583 00004E5F 6689F7              <2> 	mov di, si
  6584 00004E62 66C1EF02            <2> 	shr di, 2
  6585 00004E66 66C1E702            <2> 	shl di, 2
  6586 00004E6A C605[0C4F0000]1C    <2> 	mov byte [.month + 1], 28
  6587 00004E71 6639F7              <2> 	cmp di, si
  6588 00004E74 7506                <2> 	jne .nofebmod
  6589 00004E76 FE05[0C4F0000]      <2> 	inc byte [.month + 1]
  6590                              <2> .nofebmod:
  6591 00004E7C 664D                <2> 	dec bp
  6592 00004E7E 6681FD0000          <2> 	cmp bp, 0
  6593 00004E83 7407                <2> 	je .ylp
  6594 00004E85 8A13                <2> 	mov dl, [ebx]
  6595 00004E87 01D0                <2> 	add eax, edx
  6596 00004E89 43                  <2> 	inc ebx
  6597 00004E8A EBF0                <2> 	jmp .nofebmod
  6598                              <2> 	
  6599                              <2> .ylp:
  6600 00004E8C 6689F7              <2> 	mov di, si
  6601 00004E8F 66C1EF02            <2> 	shr di, 2
  6602 00004E93 66C1E702            <2> 	shl di, 2
  6603 00004E97 81C18033E101        <2> 	add ecx, 31536000
  6604 00004E9D 6639F7              <2> 	cmp di, si
  6605 00004EA0 7506                <2> 	jne .noymod
  6606 00004EA2 81C180510100        <2> 	add ecx, 86400
  6607                              <2> .noymod:
  6608 00004EA8 664E                <2> 	dec si
  6609 00004EAA 6681FEB207          <2> 	cmp si, 1970
  6610 00004EAF 77DB                <2> 	ja .ylp
  6611                              <2> 	
  6612 00004EB1 BB80510100          <2> 	mov ebx, 86400
  6613 00004EB6 31D2                <2> 	xor edx, edx
  6614 00004EB8 F7E3                <2> 	mul ebx
  6615 00004EBA 01C1                <2> 	add ecx, eax
  6616                              <2> 	
  6617 00004EBC 31DB                <2> 	xor ebx, ebx
  6618 00004EBE 31D2                <2> 	xor edx, edx
  6619 00004EC0 B8100E0000          <2> 	mov eax, 3600
  6620 00004EC5 8A3D[174F0000]      <2> 	mov bh, [timezoneh]
  6621 00004ECB 80FF80              <2> 	cmp bh, 128
  6622 00004ECE 720D                <2> 	jb .posh
  6623 00004ED0 28FB                <2> 	sub bl, bh
  6624 00004ED2 30FF                <2> 	xor bh, bh
  6625 00004ED4 F7E3                <2> 	mul ebx
  6626 00004ED6 01C1                <2> 	add ecx, eax
  6627 00004ED8 E906000000          <2> 	jmp .doneth
  6628                              <2> .posh:
  6629 00004EDD 86DF                <2> 	xchg bl, bh
  6630 00004EDF F7E3                <2> 	mul ebx
  6631 00004EE1 29C1                <2> 	sub ecx, eax
  6632                              <2> .doneth:
  6633                              <2> 
  6634 00004EE3 31DB                <2> 	xor ebx, ebx	
  6635 00004EE5 31D2                <2> 	xor edx, edx
  6636 00004EE7 B83C000000          <2> 	mov eax, 60
  6637 00004EEC 8A3D[184F0000]      <2> 	mov bh, [timezonem]
  6638 00004EF2 80FF80              <2> 	cmp bh, 128
  6639 00004EF5 720D                <2> 	jb .posm
  6640 00004EF7 28FB                <2> 	sub bl, bh
  6641 00004EF9 30FF                <2> 	xor bh, bh
  6642 00004EFB F7E3                <2> 	mul ebx
  6643 00004EFD 01C1                <2> 	add ecx, eax
  6644 00004EFF E906000000          <2> 	jmp .donetm
  6645                              <2> .posm:
  6646 00004F04 86DF                <2> 	xchg bl, bh
  6647 00004F06 F7E3                <2> 	mul ebx
  6648 00004F08 29C1                <2> 	sub ecx, eax
  6649                              <2> .donetm:
  6650                              <2> 
  6651 00004F0A C3                  <2> 	ret
  6652                              <2> 	
  6653                              <2> 
  6654 00004F0B 1F1C1F1E1F1E1F1F1E- <2> .month db 31,28,31,30,31,30,31,31,30,31,30,31
  6655 00004F14 1F1E1F              <2>
  6656                              <2> 
  6657 00004F17 FA                  <2> 	timezoneh db -6
  6658 00004F18 00                  <2> 	timezonem db 0
  6659 00004F19 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  6660 00004F22 000000000000000000- <2>
  6661 00004F2B 000000000000        <2>
  6662 00004F31 00                  <2> 	RTCtimeSecond db 0
  6663 00004F32 00                  <2> 	RTCtimeMinute db 0
  6664 00004F33 00                  <2> 	RTCtimeHour db 0
  6665 00004F34 00                  <2> 	RTCtimeDay db 0
  6666 00004F35 00                  <2> 	RTCtimeMonth db 0
  6667 00004F36 00                  <2> 	RTCtimeYear db 0
  6668 00004F37 00                  <2> 	dayhex db 0
  6669 00004F38 00                  <2> 	monthhex db 0
  6670 00004F39 00                  <2> 	yearhex db 0
  6671 00004F3A 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  6672 00004F43 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  6673 00004F4C 302000              <2>
  6674                              <2> 	oldcentury:	;;from 1700 to 1900
  6675 00004F4F 040200              <2> 	db 4,2,0
  6676                              <2> 	century:	;;from 2000 to 2500
  6677 00004F52 060402000604        <2> 	db 6,4,2,0,6,4
  6678                              <2> 	month:
  6679 00004F58 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  6680 00004F61 000305              <2>
  6681                              <2> 	day:
  6682 00004F64 [804F0000]          <2> 	dd sunday
  6683 00004F68 [884F0000]          <2> 	dd monday
  6684 00004F6C [904F0000]          <2> 	dd tuesday
  6685 00004F70 [994F0000]          <2> 	dd wednesday
  6686 00004F74 [A44F0000]          <2> 	dd thursday
  6687 00004F78 [AE4F0000]          <2> 	dd friday
  6688 00004F7C [B64F0000]          <2> 	dd saturday
  6689                              <2> sunday:
  6690 00004F80 53756E6461790A00    <2> 	db "Sunday",10,0
  6691                              <2> monday:
  6692 00004F88 4D6F6E6461790A00    <2> 	db "Monday",10,0
  6693                              <2> tuesday:
  6694 00004F90 547565736461790A00  <2> 	db "Tuesday",10,0
  6695                              <2> wednesday:
  6696 00004F99 5765646E6573646179- <2> 	db "Wednesday",10,0
  6697 00004FA2 0A00                <2>
  6698                              <2> thursday:
  6699 00004FA4 54687572736461790A- <2> 	db "Thursday",10,0
  6700 00004FAD 00                  <2>
  6701                              <2> friday:
  6702 00004FAE 4672696461790A00    <2> 	db "Friday",10,0
  6703                              <2> saturday:
  6704 00004FB6 53617475726461790A- <2> 	db "Saturday",10,0
  6705 00004FBF 00                  <2>
  6706                              <1> %include 'source/programs/turnoff.asm'
  6707 00004FC0 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6708 00004FC9 00                  <2>
  6709                              <2> 	turnoff:
  6710 00004FCA 66BB[E54F]          <2> 			mov bx, shutdown
  6711 00004FCE 66891D[CB0C0000]    <2> 			mov [realmodeptr], bx
  6712 00004FD5 BB[0F500000]        <2> 			mov ebx, halt
  6713 00004FDA 891D[C70C0000]      <2> 			mov [realmodereturn], ebx
  6714 00004FE0 E9CBBBFFFF          <2> 			jmp realmode
  6715                              <2> 
  6716                              <2> [BITS 16]
  6717                              <2> 		shutdown:
  6718 00004FE5 B453                <2> 			mov ah, 0x53
  6719 00004FE7 B004                <2> 			mov al, 4
  6720 00004FE9 31DB                <2> 			xor bx, bx
  6721 00004FEB CD15                <2> 			int 0x15
  6722                              <2> 			
  6723 00004FED B453                <2> 			mov ah, 0x53
  6724 00004FEF B001                <2> 			mov al, 1
  6725 00004FF1 31DB                <2> 			xor bx, bx
  6726 00004FF3 CD15                <2> 			int 0x15
  6727                              <2> 			
  6728 00004FF5 B453                <2> 			mov ah, 0x53
  6729 00004FF7 B008                <2> 			mov al, 8
  6730 00004FF9 BB0100              <2> 			mov bx, 1
  6731 00004FFC B90100              <2> 			mov cx, 1
  6732 00004FFF CD15                <2> 			int 0x15
  6733                              <2> 			
  6734 00005001 B453                <2> 			mov ah, 0x53
  6735 00005003 B007                <2> 			mov al, 7
  6736 00005005 BB0100              <2> 			mov bx, 1
  6737 00005008 B90300              <2> 			mov cx, 3
  6738 0000500B CD15                <2> 			int 0x15
  6739 0000500D EBFE                <2> 			jmp $
  6740                              <2> 			[BITS 32]
  6741 0000500F EBFE                <2> halt: jmp $
  6742                              <1> %include 'source/programs/wait.asm'
  6743 00005011 FF2C7761697400      <2> db 255,44,"wait",0
  6744                              <2> waitkey:
  6745 00005018 E8FAD2FFFF          <2> 		call getchar
  6746 0000501D C3                  <2> 		ret
  6747                              <1> %include 'source/programs/while.asm'
  6748 0000501E FF2C7768696C6500    <2> db 255,44,"while",0
  6749 00005026 30C0                <2> whilecmd:  xor al, al
  6750 00005028 3805[5A9D0300]      <2> 	cmp [BATCHISON], al
  6751 0000502E 0F8430EAFFFF        <2> 	je near notbatch
  6752 00005034 8B35[569D0300]      <2> 	mov esi, [BATCHPOS]
  6753 0000503A 81EE02000000        <2> 	sub esi, 2
  6754 00005040 4E                  <2> whilefnd: dec esi
  6755 00005041 8A06                <2> 	mov al, [esi]
  6756 00005043 3C0A                <2> 	cmp al, 10
  6757 00005045 0F840A000000        <2> 	je near whilefnd2
  6758 0000504B 3C00                <2> 	cmp al, 0
  6759 0000504D 0F8402000000        <2> 	je near whilefnd2
  6760 00005053 EBEB                <2> 	jmp whilefnd
  6761                              <2> whilefnd2:
  6762 00005055 46                  <2> 	inc esi
  6763 00005056 8935[5C9D0300]      <2> 	mov [LOOPPOS], esi
  6764 0000505C C605[5B9D0300]01    <2> 	mov BYTE [LOOPON], 1
  6765 00005063 BE[60B10300]        <2> 	mov esi, buftxt
  6766 00005068 BB[60B10300]        <2> 	mov ebx, buftxt
  6767 0000506D 81C306000000        <2> 	add ebx, 6
  6768 00005073 E93EF2FFFF          <2> 	jmp chkeqsn
  6769                              <1> progend:		;programs end here	
  6770                              <1> batchprogend:
  6771                                  	%include "source/hardware.asm"
  6772                              <1> %ifdef gui.included
  6773                              <1> 	%include "source/drivers/video/vesa.asm"
  6774                              <2> [BITS 16]
  6775                              <2> guiswitch:
  6776 00005078 81F90000            <2> 	cmp cx, 0
  6777 0000507C 750B                <2> 	jne guiswitchdefnum
  6778 0000507E B81200              <2> 	mov ax, 12h
  6779 00005081 31DB                <2> 	xor bx, bx
  6780 00005083 CD10                <2> 	int 10h
  6781 00005085 E85100              <2> 	call guiloadagain
  6782                              <2> guiswitchnocando:
  6783 00005088 C3                  <2> 	ret	;return without switching as mode number is bad
  6784                              <2> guiswitchdefnum:	;switch to a defined mode number
  6785 00005089 B8004F              <2> 	mov ax, 0x4F00
  6786 0000508C BF[6452]            <2> 	mov di, VBEMODEBLOCK
  6787 0000508F CD10                <2> 	int 10h
  6788 00005091 BE[8652]            <2> 	mov si, reserved
  6789 00005094 81EE0200            <2> 	sub si, 2
  6790                              <2> .loop:
  6791 00005098 81C60200            <2> 	add si, 2
  6792 0000509C 81FE[6453]          <2> 	cmp si, oemdata
  6793 000050A0 74E6                <2> 	je guiswitchnocando
  6794 000050A2 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6795 000050A6 74E0                <2> 	je guiswitchnocando
  6796 000050A8 390C                <2> 	cmp [si], cx
  6797 000050AA 75EC                <2> 	jne .loop
  6798 000050AC 8936[BE51]          <2> 	mov [videomodecache], si
  6799 000050B0 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6800 000050B4 B8014F              <2> 	mov ax, 0x4F01
  6801 000050B7 BF[6454]            <2> 	mov di, VBEMODEINFOBLOCK
  6802 000050BA 890E[BC51]          <2> 	mov [vesamode], cx
  6803 000050BE CD10                <2> 	int 10h
  6804 000050C0 E9D900              <2> 	jmp selectedvesa
  6805                              <2> guiload:
  6806 000050C3 BE[3C52]            <2> 	mov si, bootmsg
  6807 000050C6 E8A5AF              <2> 	call printrm
  6808 000050C9 31C0                <2> 	xor ax, ax
  6809 000050CB CD16                <2> 	int 16h
  6810 000050CD 3C79                <2> 	cmp al, "y"
  6811 000050CF 0F8555AF            <2> 	jne near vgaset
  6812 000050D3 BE[4482]            <2> 	mov si, crlf
  6813 000050D6 E895AF              <2> 	call printrm
  6814                              <2> guiloadagain:
  6815 000050D9 B8004F              <2> 	mov ax, 04F00h
  6816 000050DC BF[6452]            <2> 	mov di, VBEMODEBLOCK
  6817 000050DF CD10                <2> 	int 10h
  6818 000050E1 BE[8652]            <2> 	mov si, reserved
  6819 000050E4 81EE0200            <2> 	sub si, 2
  6820                              <2> findvideomodes:
  6821 000050E8 81C60200            <2> 	add si, 2
  6822 000050EC 8B0C                <2> 	mov cx, [si]
  6823 000050EE 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6824 000050F2 0F840A00            <2> 	je near nextvmode
  6825 000050F6 81FE[6453]          <2> 	cmp si, oemdata
  6826 000050FA 0F832AAF            <2> 	jae near vgaset	;;kill if no valid list is found
  6827 000050FE EBE8                <2> 	jmp findvideomodes 	
  6828                              <2> ;;debug,shows vmodes available
  6829                              <2> nextvmode:
  6830 00005100 81EE0200            <2> 	sub si, 2
  6831 00005104 81FE[8652]          <2> 	cmp si, reserved
  6832 00005108 0F82CDFF            <2> 	jb near guiloadagain
  6833 0000510C 8B0C                <2> 	mov cx, [si]
  6834 0000510E 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6835 00005112 0F84EAFF            <2> 	je near nextvmode
  6836 00005116 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  6837 0000511A B8014F              <2> 	mov ax, 04F01h
  6838 0000511D BF[6454]            <2> 	mov di, VBEMODEINFOBLOCK
  6839 00005120 890E[BC51]          <2> 	mov [vesamode], cx
  6840 00005124 CD10                <2> 	int 10h
  6841 00005126 A0[7D54]            <2> 	mov al, [bitsperpixel]
  6842 00005129 3C10                <2> 	cmp al, 16
  6843 0000512B 75D3                <2> 	jne nextvmode
  6844 0000512D 8936[BE51]          <2> 	mov [videomodecache], si
  6845 00005131 84E4                <2> 	test ah, ah
  6846 00005133 0F842200            <2> 	jz near setvesamode
  6847 00005137 EBC7                <2> 	jmp nextvmode
  6848 00005139 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  6849 00005142 20766964656F206D6F- <2>
  6850 0000514B 6465204F4B3F28792F- <2>
  6851 00005154 6E290D0A00          <2>
  6852                              <2> setvesamode:
  6853 00005159 8B36[BE51]          <2> 	mov si, [videomodecache]
  6854 0000515D 8B0C                <2> 	mov cx, [si]
  6855 0000515F E86500              <2> 	call decshow
  6856 00005162 B03A                <2> 	mov al, ':'
  6857 00005164 E8CD00              <2> 	call char
  6858 00005167 8B0E[7654]          <2> 	mov cx, [resolutionx]
  6859 0000516B E85900              <2> 	call decshow
  6860 0000516E B078                <2> 	mov al, "x"
  6861 00005170 E8C100              <2> 	call char
  6862 00005173 8B0E[7854]          <2> 	mov cx, [resolutiony]
  6863 00005177 E84D00              <2> 	call decshow
  6864 0000517A B040                <2> 	mov al, "@"
  6865 0000517C E8B500              <2> 	call char
  6866 0000517F 31C9                <2> 	xor cx, cx
  6867 00005181 8A0E[7D54]          <2> 	mov cl, [bitsperpixel]
  6868 00005185 E83F00              <2> 	call decshow
  6869 00005188 BE[3951]            <2> 	mov si, isthisvideook
  6870 0000518B E8E0AE              <2> 	call printrm
  6871 0000518E 31C0                <2> 	xor ax, ax
  6872 00005190 CD16                <2> 	int 16h
  6873 00005192 8B36[BE51]          <2> 	mov si, [videomodecache]
  6874 00005196 3C79                <2> 	cmp al, "y"
  6875 00005198 0F8564FF            <2> 	jne near nextvmode
  6876                              <2> selectedvesa:
  6877 0000519C 8B16[7654]          <2> 	mov dx, [resolutionx]
  6878 000051A0 01D2                <2> 	add dx, dx
  6879 000051A2 8916[6455]          <2> 	mov [resolutionx2], dx
  6880 000051A6 31D2                <2> 	xor dx, dx
  6881 000051A8 31C9                <2> 	xor cx, cx
  6882 000051AA B8024F              <2> 	mov ax, 04F02h
  6883 000051AD 8B1E[BC51]          <2> 	mov bx, [vesamode]
  6884 000051B1 CD10                <2> 	int 10h		;;enter VESA mode
  6885 000051B3 C606[6A82]01        <2> 	mov byte [guion], 1
  6886 000051B8 E87DAE              <2> 	call getmemorysize;get the memory map after the video is initialized
  6887 000051BB C3                  <2> 	ret
  6888                              <2> 	
  6889 000051BC 0000                <2> vesamode dw 0
  6890 000051BE 0000                <2> videomodecache dw 0
  6891                              <2> 
  6892 000051C0 0000000000          <2> dcnm db 0,0,0,0,0
  6893 000051C5 0000                <2> dcnmend db 0,0
  6894                              <2> 
  6895                              <2> 
  6896                              <2> decshow:
  6897 000051C7 BE[C051]            <2> 	mov si, dcnm
  6898                              <2> decclear:
  6899 000051CA B030                <2> 	mov al, "0"
  6900 000051CC 8804                <2> 	mov [si], al
  6901 000051CE 46                  <2> 	inc si
  6902 000051CF 81FE[C551]          <2> 	cmp si, dcnmend
  6903 000051D3 76F5                <2> 	jbe decclear
  6904 000051D5 4E                  <2> 	dec si
  6905 000051D6 E81500              <2> 	call convertrm
  6906 000051D9 BE[C051]            <2> 	mov si, dcnm
  6907                              <2> dectst:
  6908 000051DC 8A04                <2> 	mov al, [si]
  6909 000051DE 46                  <2> 	inc si
  6910 000051DF 81FE[C551]          <2> 	cmp si, dcnmend
  6911 000051E3 7704                <2> 	ja dectstend
  6912 000051E5 3C30                <2> 	cmp al, "0"
  6913 000051E7 76F3                <2> 	jbe dectst
  6914                              <2> dectstend:
  6915 000051E9 4E                  <2> 	dec si
  6916 000051EA E881AE              <2> 	call printrm
  6917 000051ED C3                  <2> 	ret
  6918                              <2> 	
  6919                              <2> 	
  6920                              <2> convertrm:
  6921 000051EE 4E                  <2> 	dec si
  6922 000051EF 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  6923                              <2> cnvrtrm:
  6924 000051F1 89DE                <2> 	mov si, bx
  6925 000051F3 81EE0300            <2> 	sub si, 3
  6926 000051F7 46                  <2> ten3rm:	inc si
  6927 000051F8 81F9E803            <2> 	cmp cx, 1000
  6928 000051FC 7208                <2> 	jb ten2rm
  6929 000051FE 81E9E803            <2> 	sub cx, 1000
  6930 00005202 FE04                <2> 	inc byte [si]
  6931 00005204 EBEB                <2> 	jmp cnvrtrm
  6932 00005206 46                  <2> ten2rm:	inc si
  6933 00005207 81F96400            <2> 	cmp cx, 100
  6934 0000520B 7208                <2> 	jb ten1rm
  6935 0000520D 81E96400            <2> 	sub cx, 100
  6936 00005211 FE04                <2> 	inc byte [si]
  6937 00005213 EBDC                <2> 	jmp cnvrtrm
  6938 00005215 46                  <2> ten1rm:	inc si
  6939 00005216 81F90A00            <2> 	cmp cx, 10
  6940 0000521A 7208                <2> 	jb ten0rm
  6941 0000521C 81E90A00            <2> 	sub cx, 10
  6942 00005220 FE04                <2> 	inc byte [si]
  6943 00005222 EBCD                <2> 	jmp cnvrtrm
  6944 00005224 46                  <2> ten0rm:	inc si
  6945 00005225 81F90100            <2> 	cmp cx, 1
  6946 00005229 7208                <2> 	jb tendnrm
  6947 0000522B 81E90100            <2> 	sub cx, 1
  6948 0000522F FE04                <2> 	inc byte [si]
  6949 00005231 EBBE                <2> 	jmp cnvrtrm
  6950                              <2> tendnrm:
  6951 00005233 C3                  <2> 	ret
  6952                              <2> 
  6953                              <2>     char: 		    ;char must be in al
  6954 00005234 BB0700              <2>        mov bx, 07
  6955 00005237 B40E                <2> 	   mov ah, 0Eh
  6956 00005239 CD10                <2> 	   int 10h
  6957 0000523B C3                  <2> 	   ret
  6958                              <2> 
  6959 0000523C 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  6960 00005245 20746865204755493F- <2>
  6961 0000524E 28792F6E2900        <2>
  6962                              <2> 
  6963                              <2> 
  6964                              <2> mcursor:
  6965 00005254 01                  <2> 	db	00000001b
  6966 00005255 81                  <2> 	db	10000001b
  6967 00005256 C1                  <2> 	db	11000001b
  6968 00005257 E1                  <2> 	db	11100001b
  6969 00005258 F1                  <2> 	db	11110001b
  6970 00005259 F9                  <2> 	db	11111001b
  6971 0000525A FD                  <2> 	db	11111101b
  6972 0000525B FF                  <2> 	db	11111111b
  6973 0000525C F9                  <2> 	db	11111001b
  6974 0000525D B9                  <2> 	db	10111001b
  6975 0000525E 39                  <2> 	db	00111001b
  6976 0000525F 1C                  <2> 	db	00011100b
  6977 00005260 1C                  <2> 	db	00011100b
  6978 00005261 0E                  <2> 	db	00001110b
  6979 00005262 0E                  <2> 	db	00001110b
  6980 00005263 0C                  <2> 	db	00001100b
  6981                              <2> mcursorend:
  6982                              <2> 
  6983                              <2> 
  6984                              <2> VBEMODEBLOCK:
  6985 00005264 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  6986 00005268 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  6987 0000526A 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  6988 0000526E 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  6989 00005272 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  6990 00005276 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  6991 00005278 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  6992 0000527A 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  6993 0000527E 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  6994 00005282 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  6995 00005286 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  6996 00005364 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  6997                              <2> 
  6998                              <2> VBEMODEINFOBLOCK:
  6999                              <2> ;Mandatory information for all VBE revision
  7000 00005464 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  7001 00005466 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  7002 00005467 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  7003 00005468 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  7004 0000546A 00<rept>            <2> winsize          	times  2 db 0	;Window size
  7005 0000546C 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  7006 0000546E 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  7007 00005470 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  7008 00005474 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  7009                              <2> 
  7010                              <2> ;Mandatory information for VBE 1.2 and above
  7011 00005476 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  7012 00005478 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  7013 0000547A 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  7014 0000547B 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  7015 0000547C 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  7016 0000547D 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  7017 0000547E 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  7018 0000547F 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  7019 00005480 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  7020 00005481 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  7021 00005482 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  7022                              <2> 
  7023                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  7024 00005483 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  7025 00005484 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  7026 00005485 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  7027 00005486 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  7028 00005487 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  7029 00005488 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  7030 00005489 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  7031 0000548A 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  7032 0000548B 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  7033                              <2> 
  7034                              <2> ;Mandatory information for VBE 2.0 and above
  7035 0000548C 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  7036 00005490 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  7037 00005494 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  7038 00005496 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  7039                              <2> 
  7040 00005564 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  7041                              <2> VBEEND:
  7042                              <2> [BITS 32]
  7043                              <1> 	%include "source/drivers/input/mouse.asm"
  7044 00005568 00                  <2> mousedisabled db 0
  7045                              <2> 	
  7046                              <2> 	cursorgui:
  7047 00005569 803D[FC810000]01    <2> 		cmp byte [mouseon], 1
  7048 00005570 0F8432000000        <2> 		je near mousedaemon
  7049 00005576 803D[6A820000]00    <2> 		cmp byte [guion], 0
  7050 0000557D 0F84D2040000        <2> 		je near entdown
  7051                              <2> 	initmouse:
  7052 00005583 803D[6A820000]00    <2> 		cmp byte [guion], 0
  7053 0000558A 7405                <2> 		je noswmsposinit
  7054 0000558C E846130000          <2> 		call switchmousepos2
  7055                              <2> 	noswmsposinit:
  7056 00005591 E85D020000          <2> 	  	call PS2SET
  7057 00005596 E886020000          <2> 		call ACTMOUS
  7058 0000559B C605[FC810000]01    <2> 		mov byte [mouseon],1
  7059 000055A2 E89F020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  7060                              <2> 		;call GETB
  7061                              <2> 				;;If the bytes are mixed up,
  7062                              <2> 				;;remove this line or add another of this line.
  7063                              <2> 	nomouse:
  7064 000055A7 C3                  <2> 		ret
  7065                              <2> 		
  7066                              <2> 	mousedaemon:
  7067 000055A8 803D[FC810000]01    <2> 		cmp byte [mouseon], 1
  7068 000055AF 75D2                <2> 		jne initmouse
  7069 000055B1 E464                <2> 		in al, 64h ; Status
  7070 000055B3 A820                <2> 		test al, 20h ; PS2-Mouse?
  7071 000055B5 0F8502000000        <2> 		jnz near moused
  7072 000055BB F4                  <2> 		hlt
  7073 000055BC C3                  <2> 		ret
  7074                              <2> 	moused:
  7075 000055BD 803D[68550000]01    <2> 		cmp byte [mousedisabled], 1
  7076 000055C4 74E1                <2> 		je nomouse
  7077 000055C6 E87B020000          <2> 		  call GETB
  7078 000055CB 88C3                <2> 		  mov  bl, al
  7079 000055CD 80E301              <2> 		  and  bl, 1
  7080 000055D0 881D[6B580000]      <2> 		  mov  BYTE [LBUTTON], bl
  7081 000055D6 88C3                <2> 		  mov  bl, al
  7082 000055D8 80E302              <2> 		  and  bl, 2
  7083 000055DB D0EB                <2> 		  shr  bl, 1
  7084 000055DD 881D[6C580000]      <2> 		  mov  BYTE [RBUTTON], bl
  7085 000055E3 88C3                <2> 		  mov  bl, al
  7086 000055E5 80E304              <2> 		  and  bl, 4
  7087 000055E8 C0EB02              <2> 		  shr  bl, 2
  7088 000055EB 881D[6D580000]      <2> 		  mov  BYTE [MBUTTON], bl
  7089 000055F1 E850020000          <2> 		  call GETB
  7090 000055F6 A2[6E580000]        <2> 		  mov  BYTE [XCOORD], al
  7091 000055FB E846020000          <2> 		  call GETB
  7092 00005600 A2[6F580000]        <2> 		  mov  BYTE [YCOORD], al
  7093                              <2> 
  7094                              <2> 	showpixelcursor:
  7095 00005605 668B15[5A570000]    <2> 		mov dx, [mousecursorposition]
  7096 0000560C 668B0D[5C570000]    <2> 		mov cx, [mousecursorposition + 2]
  7097 00005613 668915[56570000]    <2> 		mov [lastmouseposition], dx
  7098 0000561A 66890D[58570000]    <2> 		mov [lastmouseposition + 2], cx
  7099 00005621 A0[6E580000]        <2> 		mov al, [XCOORD]
  7100 00005626 3C80                <2> 		cmp al, 128
  7101 00005628 730C                <2> 		jae subxcoord
  7102 0000562A 00C0                <2> 		add al, al
  7103 0000562C 30E4                <2> 		xor ah, ah
  7104 0000562E 6601C2              <2> 		add dx, ax
  7105 00005631 E90B000000          <2> 		jmp subxcoorddn
  7106                              <2> 	subxcoord:
  7107 00005636 00C0                <2> 		add al, al
  7108 00005638 30DB                <2> 		xor bl, bl
  7109 0000563A 28C3                <2> 		sub bl, al
  7110 0000563C 30FF                <2> 		xor bh, bh
  7111 0000563E 6629DA              <2> 		sub dx, bx
  7112                              <2> 	subxcoorddn:
  7113 00005641 8A1D[6F580000]      <2> 		mov bl, [YCOORD]
  7114 00005647 30C0                <2> 		xor al, al
  7115 00005649 28D8                <2> 		sub al, bl
  7116 0000564B 3C80                <2> 		cmp al, 128
  7117 0000564D 730A                <2> 		jae subycoord
  7118 0000564F 30E4                <2> 		xor ah, ah
  7119 00005651 6601C1              <2> 		add cx, ax
  7120 00005654 E909000000          <2> 		jmp subycoorddn
  7121                              <2> 	subycoord:
  7122 00005659 30DB                <2> 		xor bl, bl
  7123 0000565B 28C3                <2> 		sub bl, al
  7124 0000565D 30FF                <2> 		xor bh, bh
  7125 0000565F 6629D9              <2> 		sub cx, bx
  7126                              <2> 	subycoorddn:
  7127 00005662 6681FA204E          <2> 		cmp dx, 20000
  7128 00005667 7603                <2> 		jbe nooriginx2
  7129 00005669 6631D2              <2> 		xor dx, dx
  7130                              <2> 	nooriginx2:
  7131 0000566C 6681F9204E          <2> 		cmp cx, 20000
  7132 00005671 7603                <2> 		jbe nooriginy2
  7133 00005673 6631C9              <2> 		xor cx, cx
  7134                              <2> 	nooriginy2:
  7135 00005676 6681FA0000          <2> 		cmp dx, 0
  7136 0000567B 7415                <2> 		je nofixxcolumn2
  7137 0000567D 663B15[64550000]    <2> 		cmp dx, [resolutionx2]
  7138 00005684 720C                <2> 		jb nofixxcolumn2
  7139 00005686 668B15[64550000]    <2> 		mov dx, [resolutionx2]
  7140 0000568D 6681EA0200          <2> 		sub dx, 2
  7141                              <2> 	nofixxcolumn2:
  7142 00005692 6681F90000          <2> 		cmp cx, 0
  7143 00005697 7415                <2> 		je nofixyrow2
  7144 00005699 663B0D[78540000]    <2> 		cmp cx, [resolutiony]
  7145 000056A0 720C                <2> 		jb nofixyrow2
  7146 000056A2 668B0D[78540000]    <2> 		mov cx, [resolutiony]
  7147 000056A9 6681E90100          <2> 		sub cx, 1
  7148                              <2> 	nofixyrow2:
  7149 000056AE 668915[5A570000]    <2> 		mov [mousecursorposition], dx
  7150 000056B5 66890D[5C570000]    <2> 		mov [mousecursorposition + 2], cx
  7151 000056BC 803D[6A820000]00    <2> 		cmp byte [guion], 0
  7152 000056C3 0F8495000000        <2> 		je near termmouse
  7153 000056C9 E8A9110000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  7154 000056CE 803D[6B580000]01    <2> 		cmp byte [LBUTTON], 1
  7155 000056D5 0F84E4220000        <2> 		je near clickicon
  7156 000056DB 803D[6C580000]01    <2> 		cmp byte [RBUTTON], 1
  7157 000056E2 0F84D7220000        <2> 		je near clickicon
  7158 000056E8 A0[AC790000]        <2> 		mov al, [pbutton]
  7159 000056ED C705[AF790000]0000- <2> 		mov dword [dragging], 0
  7160 000056F5 0000                <2>
  7161 000056F7 3C00                <2> 		cmp al, 0
  7162 000056F9 740F                <2> 		je nopreviousbutton
  7163 000056FB E81F110000          <2> 		call clearmousecursor
  7164 00005700 E886140000          <2> 		call reloadallgraphics
  7165                              <2> 	windowtermcopyend:
  7166 00005705 E8CD110000          <2> 		call switchmousepos2
  7167                              <2> 	nopreviousbutton:
  7168 0000570A 30C0                <2> 		xor al, al
  7169 0000570C A2[AC790000]        <2> 		mov [pbutton], al
  7170 00005711 A2[137F0000]        <2> 		mov [windrag], al
  7171 00005716 A0[6B580000]        <2> 		mov al, [LBUTTON]
  7172 0000571B A2[AD790000]        <2> 		mov [pLBUTTON], al
  7173 00005720 A0[6C580000]        <2> 		mov al, [RBUTTON]
  7174 00005725 A2[AE790000]        <2> 		mov [pRBUTTON], al
  7175 0000572A 31D2                <2> 		xor edx, edx
  7176 0000572C 668B15[5A570000]    <2> 		mov dx, [mousecursorposition]
  7177 00005733 668B0D[5C570000]    <2> 		mov cx, [mousecursorposition + 2]
  7178 0000573A 66BB18C7            <2> 		mov bx, 1100011100011000b
  7179 0000573E 66B80100            <2> 		mov ax, 1
  7180 00005742 C605[A9790000]01    <2> 		mov byte [showcursorfonton], 1
  7181 00005749 E8071B0000          <2> 		call showfontvesa
  7182 0000574E C605[A9790000]00    <2> 		mov byte [showcursorfonton], 0
  7183 00005755 C3                  <2> 		ret
  7184                              <2> 
  7185 00005756 00000000            <2> lastmouseposition dw 0,0
  7186 0000575A 00000000            <2> mousecursorposition dw 0,0	
  7187                              <2> 
  7188                              <2> termmouse:
  7189 0000575E BE[76B80300]        <2> 		mov esi, videobuf
  7190 00005763 31D2                <2> 		xor edx, edx
  7191 00005765 668B15[56570000]    <2> 		mov dx, [lastmouseposition]
  7192 0000576C 668B0D[58570000]    <2> 		mov cx, [lastmouseposition + 2]
  7193 00005773 66A1[F1570000]      <2> 		mov ax, [cursorcache]
  7194 00005779 663D0000            <2> 		cmp ax, 0
  7195 0000577D 7425                <2> 		je nocopycursorcache
  7196 0000577F 66C1E104            <2> 		shl cx, 4
  7197 00005783 66C1E203            <2> 		shl dx, 3
  7198 00005787 01D6                <2> 		add esi, edx
  7199 00005789 6631D2              <2> 		xor dx, dx
  7200 0000578C 8A15[9D250000]      <2> 		mov dl, [charxy]
  7201 00005792 6641                <2> 		inc cx
  7202                              <2> termmousecplp1:
  7203 00005794 01D6                <2> 		add esi, edx
  7204 00005796 6649                <2> 		dec cx
  7205 00005798 6681F90000          <2> 		cmp cx, 0
  7206 0000579D 75F5                <2> 		jne termmousecplp1
  7207 0000579F 29D6                <2> 		sub esi, edx
  7208 000057A1 668906              <2> 		mov [esi], ax
  7209                              <2> nocopycursorcache:
  7210 000057A4 BE[76B80300]        <2> 		mov esi, videobuf
  7211 000057A9 31D2                <2> 		xor edx, edx
  7212 000057AB 668B15[5A570000]    <2> 		mov dx, [mousecursorposition]
  7213 000057B2 668B0D[5C570000]    <2> 		mov cx, [mousecursorposition + 2]
  7214 000057B9 66C1E104            <2> 		shl cx, 4
  7215 000057BD 66C1E203            <2> 		shl dx, 3
  7216 000057C1 01D6                <2> 		add esi, edx
  7217 000057C3 6631D2              <2> 		xor dx, dx
  7218 000057C6 8A15[9D250000]      <2> 		mov dl, [charxy]
  7219 000057CC 6641                <2> 		inc cx
  7220                              <2> termmousecplp2:
  7221 000057CE 01D6                <2> 		add esi, edx
  7222 000057D0 6649                <2> 		dec cx
  7223 000057D2 6681F90000          <2> 		cmp cx, 0
  7224 000057D7 75F5                <2> 		jne termmousecplp2
  7225 000057D9 29D6                <2> 		sub esi, edx
  7226 000057DB 668B06              <2> 		mov ax, [esi]
  7227 000057DE 66A3[F1570000]      <2> 		mov [cursorcache], ax
  7228 000057E4 B080                <2> 		mov al, 128
  7229 000057E6 B407                <2> 		mov ah, 7
  7230 000057E8 668906              <2> 		mov [esi], ax
  7231 000057EB E87BD0FFFF          <2> 		call termcopy
  7232 000057F0 C3                  <2> 		ret
  7233 000057F1 0000                <2> cursorcache db 0,0
  7234                              <2> 
  7235                              <2> PS2SET:
  7236 000057F3 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7237 000057F5 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7238 000057F7 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7239 000057FC C3                  <2> ret
  7240                              <2> 
  7241                              <2> CHKPRT:
  7242 000057FD 66B96400            <2>   mov  cx, 100
  7243                              <2>  .again:
  7244 00005801 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7245 00005803 A802                <2>   test al, 2		; Check if input buffer is empty
  7246 00005805 7402                <2>   je .go
  7247 00005807 E2F8                <2>   loop .again
  7248                              <2>  .go:
  7249 00005809 C3                  <2> ret
  7250                              <2> 
  7251                              <2> WMOUS:
  7252 0000580A B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7253 0000580C E664                <2>   out  0x64, al		; write to keyboardcontroller
  7254 0000580E E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7255 00005813 C3                  <2> ret
  7256                              <2> 
  7257                              <2> MBUFFUL:
  7258 00005814 66B96400            <2>   mov cx, 100
  7259                              <2>  .mn:
  7260 00005818 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7261 0000581A A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7262 0000581C 7402                <2>   jz  .mnn
  7263 0000581E E2F8                <2>   loop .mn
  7264                              <2>  .mnn:
  7265 00005820 C3                  <2> ret
  7266                              <2> 
  7267                              <2> 
  7268                              <2> ACTMOUS:
  7269 00005821 E8E4FFFFFF          <2>   call WMOUS
  7270 00005826 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7271 00005828 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7272 0000582A E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7273 0000582F E801000000          <2>   call CHKMOUS		; check if a byte is available
  7274 00005834 C3                  <2> ret
  7275                              <2> 
  7276                              <2> CHKMOUS:
  7277 00005835 B300                <2>   mov  bl, 0
  7278 00005837 66B96400            <2>   mov cx, 100
  7279                              <2>  .vrd:
  7280 0000583B E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7281 0000583D A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7282 0000583F 7504                <2>   jnz .yy
  7283 00005841 E2F8                <2>   loop .vrd
  7284 00005843 B301                <2>   mov  bl, 1
  7285                              <2>  .yy:
  7286 00005845 C3                  <2> ret
  7287                              <2> 
  7288                              <2> GETB:
  7289                              <2>  .cagain:
  7290 00005846 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7291 0000584B 08DB                <2>   or bl, bl
  7292 0000584D 75F7                <2>   jnz .cagain
  7293 0000584F B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7294 00005851 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7295 00005853 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7296 00005858 6631C0              <2>   xor  ax, ax
  7297 0000585B E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7298 0000585D 88C2                <2>   mov  dl, al
  7299 0000585F B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7300 00005861 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7301 00005863 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7302 00005868 88D0                <2>   mov  al, dl
  7303 0000586A C3                  <2> ret
  7304                              <2> 
  7305 0000586B 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7306 0000586C 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7307 0000586D 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7308 0000586E 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7309 0000586F 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7310                              <1> %endif
  7311                              <1> %include "source/drivers/sound/pcspkr.asm"
  7312                              <2> ;PC Speaker Drivers
  7313                              <2> PCSpeakerRAW:
  7314 00005870 60                  <2> 	pusha
  7315                              <2> nosoundrep:
  7316 00005871 8B35[5F020000]      <2> 	mov esi, [soundpos]
  7317 00005877 31C9                <2> 	xor ecx, ecx
  7318 00005879 668B0D[5D020000]    <2> 	mov cx, [soundrepititions]
  7319 00005880 6681F90000          <2> 	cmp cx, 0
  7320 00005885 0F8548000000        <2> 	jne near donesetpitch
  7321 0000588B 668B0E              <2> 	mov cx, [esi]
  7322 0000588E 668B5E02            <2> 	mov bx, [esi + 2]
  7323 00005892 66890D[5D020000]    <2> 	mov [soundrepititions], cx
  7324 00005899 81C604000000        <2> 	add esi, 4
  7325 0000589F 8935[5F020000]      <2> 	mov [soundpos], esi
  7326 000058A5 3B35[63020000]      <2> 	cmp esi, [soundendpos]
  7327 000058AB 7735                <2> 	ja stopsound
  7328 000058AD 66813D[5D020000]00- <2> 	cmp word [soundrepititions], 0
  7329 000058B5 00                  <2>
  7330 000058B6 74B9                <2> 	je nosoundrep
  7331 000058B8 6681FB0000          <2> 	cmp bx, 0
  7332 000058BD 740F                <2> 	je nosoundplay
  7333 000058BF E840000000          <2> 	call setpitch
  7334 000058C4 E849000000          <2> 	call startsound
  7335 000058C9 E905000000          <2> 	jmp donesetpitch
  7336                              <2> nosoundplay:
  7337 000058CE E846000000          <2> 	call killsound
  7338                              <2> donesetpitch:
  7339 000058D3 6649                <2> 	dec cx
  7340 000058D5 66890D[5D020000]    <2> 	mov [soundrepititions], cx
  7341 000058DC 61                  <2> 	popa
  7342 000058DD E9BAA9FFFF          <2> 	jmp timerinterrupt
  7343                              <2> stopsound:
  7344 000058E2 31C0                <2> 	xor eax, eax
  7345 000058E4 66A3[5D020000]      <2> 	mov [soundrepititions], ax
  7346 000058EA A2[5C020000]        <2> 	mov [soundon], al
  7347 000058EF A3[5F020000]        <2> 	mov [soundpos], eax
  7348 000058F4 A3[63020000]        <2> 	mov [soundendpos], eax
  7349 000058F9 E81B000000          <2> 	call killsound
  7350 000058FE 61                  <2> 	popa
  7351 000058FF E998A9FFFF          <2> 	jmp timerinterrupt
  7352                              <2> 
  7353                              <2> 
  7354                              <2> setpitch:
  7355 00005904 B0B6                <2> 	mov al, 0xB6
  7356 00005906 E643                <2> 	out 0x43, al
  7357 00005908 6689D8              <2> 	mov ax, bx
  7358 0000590B E642                <2> 	out 0x42, al
  7359 0000590D 88E0                <2> 	mov al, ah
  7360 0000590F E642                <2> 	out 0x42, al
  7361 00005911 C3                  <2> 	ret
  7362                              <2> startsound:
  7363 00005912 E461                <2> 	in al, 0x61
  7364 00005914 0C03                <2> 	or al, 3
  7365 00005916 E661                <2> 	out 0x61, al
  7366 00005918 C3                  <2> 	ret
  7367                              <2> killsound:
  7368 00005919 E461                <2> 	in al, 0x61
  7369 0000591B 24FC                <2> 	and al, 0xFC
  7370 0000591D E661                <2> 	out 0x61, al
  7371 0000591F C3                  <2> 	ret
  7372                              <2> 	
  7373                              <1> %ifdef sound.included
  7374                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7375                              <1> %endif
  7376                              <1> %ifdef io.serial
  7377                              <1> 	%include "source/drivers/input/serial.asm"
  7378                              <1> %else
  7379                              <1> 	%include "source/drivers/input/keyboard.asm"
  7380 00005920 00                  <2> specialkey db 0
  7381                              <2> ;charregion db 0
  7382                              <2> waitforinput:		;this is basically the idle process
  7383                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  7384                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  7385 00005921 6631C0              <2> 	xor ax, ax
  7386 00005924 A0[A1640000]        <2> 	mov al, [threadson]
  7387 00005929 8825[A1640000]      <2> 	mov [threadson], ah
  7388 0000592F FB                  <2> 	sti
  7389 00005930 F4                  <2> 	hlt
  7390 00005931 A2[A1640000]        <2> 	mov [threadson], al
  7391 00005936 66813D[7B230000]00- <2> 	cmp word [trans], 0
  7392 0000593E 00                  <2>
  7393 0000593F 7401                <2> 	je getkey
  7394 00005941 C3                  <2> 	ret
  7395                              <2> getkey:
  7396 00005942 31C0                <2> 		xor eax, eax
  7397 00005944 A2[20590000]        <2> 		mov [specialkey], al
  7398 00005949 A3[77230000]        <2> 		mov [lastkey], eax
  7399 0000594E E464                <2> 		in al, 64h ; Status
  7400                              <2> 	%ifdef gui.included
  7401 00005950 A820                <2> 		test al, 20h ; PS2-Mouse?
  7402 00005952 0F8565FCFFFF        <2> 		jnz near moused
  7403                              <2> 	%endif
  7404 00005958 A801                <2> 		test al, 1 
  7405 0000595A 74C5                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7406                              <2> 	calckey:
  7407 0000595C E460                <2> 		in al, 60h
  7408 0000595E 30E4                <2> 		xor ah, ah
  7409 00005960 6689C3              <2> 		mov bx, ax
  7410 00005963 66A3[79230000]      <2> 		mov [lastkey + 2], ax
  7411 00005969 BF[F85A0000]        <2> 		mov edi, scancode
  7412                              <2> 	searchscan: 
  7413 0000596E 80FB3A              <2> 		cmp bl, 3Ah
  7414 00005971 7314                <2> 		jae scanother
  7415 00005973 C1E004              <2> 		shl eax, 4
  7416 00005976 01C7                <2> 		add edi, eax
  7417 00005978 668B07              <2> 		mov ax, [edi]
  7418 0000597B 663D0000            <2> 		cmp ax, 0
  7419 0000597F 7406                <2> 		je scanother
  7420 00005981 E9D0000000          <2> 		jmp scanfound
  7421 00005986 00                  <2> uppercase db 0
  7422                              <2> scanother:
  7423 00005987 6631C0              <2> 		xor ax, ax
  7424 0000598A 66A3[77230000]      <2> 		mov [lastkey], ax
  7425 00005990 80FBE0              <2> 		cmp bl, 0E0h
  7426 00005993 0F8477000000        <2> 		je near getkeyspecial
  7427 00005999 803D[20590000]E0    <2> 		cmp byte [specialkey], 0xE0
  7428 000059A0 7525                <2> 		jne nospecialkey
  7429 000059A2 80FB38              <2> 		cmp bl, 38h
  7430 000059A5 0F849A000000        <2> 		je near alton
  7431 000059AB 80FBB8              <2> 		cmp bl, 0B8h
  7432 000059AE 0F8499000000        <2> 		je near altoff
  7433 000059B4 80FB1D              <2> 		cmp bl, 1Dh
  7434 000059B7 0F8478000000        <2> 		je near ctron
  7435 000059BD 80FB9D              <2> 		cmp bl, 9Dh
  7436 000059C0 0F8477000000        <2> 		je near ctroff
  7437 000059C6 C3                  <2> 		ret
  7438                              <2> nospecialkey:
  7439 000059C7 80FB2A              <2> 		cmp bl, 2Ah
  7440 000059CA 0F8455000000        <2> 		je near shifton
  7441 000059D0 80FB36              <2> 		cmp bl, 36h
  7442 000059D3 0F844C000000        <2> 		je near shifton
  7443 000059D9 80FB1C              <2> 		cmp bl, 1Ch
  7444 000059DC 0F8473000000        <2> 		je near entdown
  7445 000059E2 80FBAA              <2> 		cmp bl, 0AAh
  7446 000059E5 0F8442000000        <2> 		je near shiftoff
  7447 000059EB 80FBB6              <2> 		cmp bl, 0B6h
  7448 000059EE 0F8439000000        <2> 		je near shiftoff
  7449 000059F4 80FB3A              <2> 		cmp bl, 3Ah
  7450 000059F7 0F84A7000000        <2> 		je near capslock
  7451 000059FD 80FB45              <2> 		cmp bl, 0x45
  7452 00005A00 0F84AF000000        <2> 		je near numlock
  7453 00005A06 80FB46              <2> 		cmp bl, 0x46
  7454 00005A09 0F84BE000000        <2> 		je near scrolllock
  7455 00005A0F C3                  <2> 		ret
  7456                              <2> 	getkeyspecial:
  7457 00005A10 C605[20590000]E0    <2> 		mov byte [specialkey], 0xE0
  7458 00005A17 E940FFFFFF          <2> 		jmp calckey
  7459                              <2> 	shift:
  7460 00005A1C A0[86590000]        <2> 		mov al, [uppercase]
  7461 00005A21 3C01                <2> 		cmp al, 1
  7462 00005A23 7308                <2> 		jae shiftoff
  7463                              <2> 	shifton:
  7464 00005A25 C605[86590000]01    <2> 		mov byte [uppercase], 1
  7465 00005A2C C3                  <2> 		ret
  7466                              <2> 	shiftoff:
  7467 00005A2D C605[86590000]00    <2> 		mov byte [uppercase], 0
  7468 00005A34 C3                  <2> 		ret
  7469                              <2> 	ctron:
  7470 00005A35 C605[A35A0000]01    <2> 		mov byte [ctrkey], 1
  7471 00005A3C C3                  <2> 		ret
  7472                              <2> 	ctroff:
  7473 00005A3D C605[A35A0000]00    <2> 		mov byte [ctrkey], 0
  7474 00005A44 C3                  <2> 		ret
  7475                              <2> 	alton:
  7476 00005A45 C605[A25A0000]01    <2> 		mov byte [altkey], 1
  7477 00005A4C C3                  <2> 		ret
  7478                              <2> 	altoff:
  7479 00005A4D C605[A25A0000]00    <2> 		mov byte [altkey], 0
  7480 00005A54 C3                  <2> 		ret
  7481                              <2> 	entdown:
  7482 00005A55 C3                  <2> 		ret
  7483                              <2> scanfound:
  7484 00005A56 81C708000000        <2> 		add edi, 8
  7485 00005A5C 803D[A35A0000]01    <2> 		cmp byte [ctrkey], 1
  7486 00005A63 7306                <2> 		jae ctrlin
  7487 00005A65 81EF08000000        <2> 		sub edi, 8
  7488                              <2> 	ctrlin:
  7489 00005A6B 81C704000000        <2> 		add edi, 4
  7490 00005A71 803D[A25A0000]01    <2> 		cmp byte [altkey], 1
  7491 00005A78 7306                <2> 		jae altin
  7492 00005A7A 81EF04000000        <2> 		sub edi, 4
  7493                              <2> 	altin:
  7494 00005A80 81C702000000        <2> 		add edi, 2
  7495 00005A86 803D[86590000]01    <2> 		cmp byte [uppercase], 1
  7496 00005A8D 7306                <2> 		jae uppercaseon
  7497 00005A8F 81EF02000000        <2> 		sub edi, 2
  7498                              <2> 	uppercaseon:
  7499 00005A95 668B07              <2> 		mov ax,[edi]
  7500 00005A98 66A3[77230000]      <2> 		mov [lastkey], ax
  7501 00005A9E C3                  <2> 		ret
  7502                              <2> 		
  7503 00005A9F 00                  <2> keyboardstatus db 0
  7504 00005AA0 00                  <2> numlockstatus db 0
  7505 00005AA1 00                  <2> scrolllockstatus db 0
  7506 00005AA2 00                  <2> altkey db 0
  7507 00005AA3 00                  <2> ctrkey db 0
  7508                              <2> 	capslock:
  7509 00005AA4 8035[9F5A0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7510 00005AAB E835000000          <2> 		call updatekblights
  7511 00005AB0 E967FFFFFF          <2> 		jmp shift
  7512                              <2> 		
  7513                              <2> 	numlock:
  7514 00005AB5 8035[9F5A0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7515 00005ABC 8035[A05A0000]01    <2> 		xor byte [numlockstatus], 1
  7516 00005AC3 E81D000000          <2> 		call updatekblights
  7517 00005AC8 E975FEFFFF          <2> 		jmp getkey
  7518                              <2> 	
  7519                              <2> 	scrolllock:
  7520 00005ACD 8035[9F5A0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7521 00005AD4 8035[A15A0000]01    <2> 		xor byte [scrolllockstatus], 1
  7522 00005ADB E805000000          <2> 		call updatekblights
  7523 00005AE0 E95DFEFFFF          <2> 		jmp getkey
  7524                              <2> 		
  7525                              <2> 	updatekblights:
  7526 00005AE5 B0ED                <2> 		mov al, 0xED
  7527 00005AE7 66BA6000            <2> 		mov dx, 0x60
  7528 00005AEB EE                  <2> 		out dx, al
  7529                              <2> 	chkkbdack:
  7530 00005AEC EC                  <2> 		in al, dx
  7531 00005AED 3CFA                <2> 		cmp al, 0xFA
  7532 00005AEF 75FB                <2> 		jne chkkbdack
  7533 00005AF1 A0[9F5A0000]        <2> 		mov al, [keyboardstatus]
  7534 00005AF6 EE                  <2> 		out dx, al
  7535 00005AF7 C3                  <2> 		ret
  7536                              <2> 		
  7537                              <2> scancode:
  7538                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  7539 00005AF8 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7540 00005B01 00000000000000      <2>
  7541 00005B08 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7542 00005B11 00000000000000      <2>
  7543 00005B18 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  7544 00005B21 00000000000000      <2>
  7545 00005B28 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  7546 00005B31 00000000000000      <2>
  7547 00005B38 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  7548 00005B41 00000000000000      <2>
  7549 00005B48 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  7550 00005B51 00000000000000      <2>
  7551 00005B58 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  7552 00005B61 00000000000000      <2>
  7553 00005B68 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  7554 00005B71 00000000000000      <2>
  7555 00005B78 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  7556 00005B81 00000000000000      <2>
  7557 00005B88 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  7558 00005B91 00000000000000      <2>
  7559 00005B98 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  7560 00005BA1 00000000000000      <2>
  7561 00005BA8 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  7562 00005BB1 00000000000000      <2>
  7563 00005BB8 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  7564 00005BC1 00000000000000      <2>
  7565 00005BC8 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  7566 00005BD1 00000000000000      <2>
  7567 00005BD8 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  7568 00005BE1 00000000000000      <2>
  7569 00005BE8 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7570 00005BF1 00000000000000      <2>
  7571 00005BF8 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  7572 00005C00 003A0039041904      <2>
  7573 00005C08 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  7574 00005C11 03000046042604      <2>
  7575 00005C18 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  7576 00005C21 03950343042304      <2>
  7577 00005C28 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  7578 00005C31 03A1033A041A04      <2>
  7579 00005C38 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  7580 00005C41 03A40335041504      <2>
  7581 00005C48 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  7582 00005C51 03A5033D041D04      <2>
  7583 00005C58 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  7584 00005C61 03980333041304      <2>
  7585 00005C68 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  7586 00005C71 03990348042804      <2>
  7587 00005C78 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  7588 00005C81 039F0349042904      <2>
  7589 00005C88 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  7590 00005C91 03A00337041704      <2>
  7591 00005C98 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  7592 00005CA1 00000045042504      <2>
  7593 00005CA8 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  7594 00005CB1 0000004A042A04      <2>
  7595 00005CB8 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7596 00005CC1 00000000000000      <2>
  7597 00005CC8 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7598 00005CD1 00000000000000      <2>
  7599 00005CD8 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  7600 00005CE1 03910344042404      <2>
  7601 00005CE8 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  7602 00005CF1 03A3034B042B04      <2>
  7603 00005CF8 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  7604 00005D01 03940332041204      <2>
  7605 00005D08 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  7606 00005D11 03A60330041004      <2>
  7607 00005D18 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  7608 00005D21 0393033F041F04      <2>
  7609 00005D28 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  7610 00005D31 03970340042004      <2>
  7611 00005D38 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  7612 00005D41 039E033E041E04      <2>
  7613 00005D48 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  7614 00005D51 039A033B041B04      <2>
  7615 00005D58 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  7616 00005D61 039B0334041404      <2>
  7617 00005D68 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  7618 00005D71 00000036041604      <2>
  7619 00005D78 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  7620 00005D81 0000004D042D04      <2>
  7621 00005D88 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  7622 00005D91 00000051040104      <2>
  7623 00005D98 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7624 00005DA1 00000000000000      <2>
  7625 00005DA8 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  7626 00005DB1 0000002F005C00      <2>
  7627 00005DB8 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  7628 00005DC1 0396034F042F04      <2>
  7629 00005DC8 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  7630 00005DD1 03A70347042704      <2>
  7631 00005DD8 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  7632 00005DE1 03A80341042104      <2>
  7633 00005DE8 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  7634 00005DF1 03A9033C041C04      <2>
  7635 00005DF8 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  7636 00005E01 03920338041804      <2>
  7637 00005E08 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  7638 00005E11 039D0342042204      <2>
  7639 00005E18 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  7640 00005E21 039C034C042C04      <2>
  7641 00005E28 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  7642 00005E31 00000031041104      <2>
  7643 00005E38 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  7644 00005E41 0000004E042E04      <2>
  7645 00005E48 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  7646 00005E51 0000002E002C00      <2>
  7647 00005E58 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7648 00005E61 00000000000000      <2>
  7649 00005E68 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7650 00005E71 00000000000000      <2>
  7651 00005E78 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7652 00005E81 00000000000000      <2>
  7653 00005E88 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  7654 00005E91 00000000000000      <2>
  7655                              <2> noscan:
  7656                              <2> 
  7657                              <1> %endif
  7658                              <1> ;drivers will soon be handled intelligently
  7659                              <1> ;every driver's source will be scanned for a .init function
  7660                              <1> ;that will be called and if it returns 0
  7661                              <1> ;the hardware was found and the driver initialized properly
  7662                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7663                              <1> 	%ifdef sound.included
  7664                              <1> 		call sblaster.init
  7665                              <1> 	%endif
  7666                              <1> 	%ifdef network.included
  7667                              <1> 		call network.init
  7668                              <1> 	%endif
  7669 00005E98 C3                  <1> 	ret
  7670                              <1> initialize:
  7671                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7672 00005E99 E839000000          <1> 	call .pic
  7673                              <1> %ifdef terminal.vsync
  7674                              <1> 	call .rtc
  7675                              <1> %endif
  7676 00005E9E E896000000          <1> 	call .pit
  7677 00005EA3 E8B8000000          <1> 	call .fpu
  7678 00005EA8 E8C9000000          <1> 	call .sse
  7679 00005EAD 31C0                <1> 	xor eax, eax
  7680 00005EAF 31C9                <1> 	xor ecx, ecx
  7681                              <1> %ifdef io.serial
  7682                              <1> 	call serial.init
  7683                              <1> %endif
  7684 00005EB1 E801000000          <1> 	call .time
  7685 00005EB6 C3                  <1> 	ret
  7686                              <1> 	
  7687                              <1> .time:
  7688 00005EB7 E866EDFFFF          <1> 	call time
  7689 00005EBC E80EEFFFFF          <1> 	call timeconvert
  7690 00005EC1 890D[54020000]      <1> 	mov [timeseconds], ecx
  7691 00005EC7 31C9                <1> 	xor ecx, ecx
  7692 00005EC9 890D[58020000]      <1> 	mov [timenanoseconds], ecx
  7693 00005ECF C605[6A4B0000]01    <1> 	mov byte [istimeset], 1
  7694 00005ED6 C3                  <1> 	ret
  7695                              <1> 	
  7696                              <1> .pic:
  7697 00005ED7 B011                <1> 	mov al, 0x11
  7698 00005ED9 E620                <1> 	out 0x20, al
  7699 00005EDB E6A0                <1> 	out 0xA0, al
  7700 00005EDD B040                <1> 	mov al, 0x40	;interrupt for master
  7701 00005EDF E621                <1> 	out 0x21, al
  7702 00005EE1 B048                <1> 	mov al, 0x48	;interrupt for slave
  7703 00005EE3 E6A1                <1> 	out 0xA1, al
  7704 00005EE5 B004                <1> 	mov al, 4
  7705 00005EE7 E621                <1> 	out 0x21, al
  7706 00005EE9 B002                <1> 	mov al, 2
  7707 00005EEB E6A1                <1> 	out 0xA1, al
  7708 00005EED B001                <1> 	mov al, 0x1
  7709 00005EEF E621                <1> 	out 0x21, al
  7710 00005EF1 B001                <1> 	mov al, 0x1
  7711 00005EF3 E6A1                <1> 	out 0xA1, al
  7712                              <1> 	;masks are set to zero so as not to mask
  7713 00005EF5 30C0                <1> 	xor al, al
  7714 00005EF7 E621                <1> 	out 0x21, al
  7715 00005EF9 30C0                <1> 	xor al, al
  7716 00005EFB E6A1                <1> 	out 0xA1, al
  7717 00005EFD B020                <1> 	mov al, 0x20
  7718 00005EFF E6A0                <1> 	out 0xA0, al
  7719 00005F01 E620                <1> 	out 0x20, al
  7720 00005F03 C3                  <1> 	ret
  7721                              <1> .rtc:
  7722 00005F04 B008                <1> 	mov al, 0x8
  7723 00005F06 88C4                <1> 	mov ah, al
  7724 00005F08 66BA7000            <1> 	mov dx, 0x70
  7725 00005F0C EE                  <1> 	out dx, al
  7726 00005F0D 6642                <1> 	inc dx
  7727 00005F0F EC                  <1> 	in al, dx
  7728 00005F10 86C4                <1> 	xchg al, ah
  7729 00005F12 664A                <1> 	dec dx
  7730 00005F14 EE                  <1> 	out dx, al
  7731 00005F15 6642                <1> 	inc dx
  7732 00005F17 86C4                <1> 	xchg al, ah
  7733 00005F19 0C40                <1> 	or al, 0x40
  7734 00005F1B EE                  <1> 	out dx, al
  7735                              <1> 	
  7736 00005F1C B00A                <1> 	mov al, 0xA
  7737 00005F1E 664A                <1> 	dec dx
  7738 00005F20 EE                  <1> 	out dx, al
  7739 00005F21 86C4                <1> 	xchg al, ah
  7740 00005F23 6642                <1> 	inc dx
  7741 00005F25 EC                  <1> 	in al, dx
  7742 00005F26 24F0                <1> 	and al, 0xF0
  7743 00005F28 0A05[0F030000]      <1> 	or al, [rtcrate]
  7744 00005F2E 86C4                <1> 	xchg al, ah
  7745 00005F30 664A                <1> 	dec dx
  7746 00005F32 EE                  <1> 	out dx, al
  7747 00005F33 6642                <1> 	inc dx
  7748 00005F35 86C4                <1> 	xchg al, ah
  7749 00005F37 EE                  <1> 	out dx, al
  7750 00005F38 C3                  <1> 	ret
  7751                              <1> 	
  7752                              <1> .pit:
  7753                              <1> 	;initialize the PIT
  7754 00005F39 66A1[4E020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7755 00005F3F E640                <1> 	out 0x40, al
  7756 00005F41 66C1C008            <1> 	rol ax, 8
  7757 00005F45 E640                <1> 	out 0x40, al
  7758                              <1> 	;enable rtc interrupt
  7759 00005F47 B00B                <1> 	mov al, 0xB
  7760 00005F49 E670                <1> 	out 0x70, al
  7761 00005F4B 66C1C008            <1> 	rol ax, 8
  7762 00005F4F E471                <1> 	in al, 0x71
  7763 00005F51 66C1C008            <1> 	rol ax, 8
  7764 00005F55 E670                <1> 	out 0x70, al
  7765 00005F57 66C1C008            <1> 	rol ax, 8
  7766 00005F5B 0C40                <1> 	or al, 0x40
  7767 00005F5D E671                <1> 	out 0x71, al
  7768 00005F5F C3                  <1> 	ret
  7769                              <1> .fpu:
  7770                              <1> 	;And now to initialize the fpu
  7771 00005F60 0F20E0              <1> 	mov eax, cr4
  7772 00005F63 0D00020000          <1> 	or eax, 0x200
  7773 00005F68 0F22E0              <1> 	mov cr4, eax
  7774 00005F6B B87F0B0000          <1> 	mov eax, 0xB7F
  7775 00005F70 50                  <1> 	push eax
  7776 00005F71 D92C24              <1> 	fldcw [esp]
  7777 00005F74 58                  <1> 	pop eax
  7778 00005F75 C3                  <1> 	ret
  7779                              <1> 	
  7780                              <1> .sse:
  7781 00005F76 0F20C0              <1> 	mov eax, cr0
  7782 00005F79 24FB                <1> 	and al, 11111011b
  7783 00005F7B 0C02                <1> 	or al, 00000010b
  7784 00005F7D 0F22C0              <1> 	mov cr0, eax
  7785 00005F80 0F20E0              <1> 	mov eax, cr4
  7786 00005F83 660D0006            <1> 	or ax, 0000011000000000b
  7787 00005F87 0F22E0              <1> 	mov cr4, eax
  7788 00005F8A C3                  <1> 	ret
  7789                                      %include "source/pci.asm"
  7790 00005F8B 00                  <1> pcibus		db 0
  7791 00005F8C 00                  <1> pcidevice	db 0
  7792 00005F8D 00                  <1> pcifunction	db 0
  7793 00005F8E 00                  <1> pciregister	db 0
  7794 00005F8F 00                  <1> pcireqtype	db 0
  7795 00005F90 00000000            <1> pcidevid	dd 0
  7796 00005F94 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  7797                              <1> getpcimem:
  7798 00005F98 B002                <1> 	mov al, 2
  7799 00005F9A A2[8F5F0000]        <1> 	mov [pcireqtype], al
  7800 00005F9F E922000000          <1> 	jmp searchpci
  7801                              <1> getpciport:
  7802 00005FA4 B001                <1> 	mov al, 1
  7803 00005FA6 A2[8F5F0000]        <1> 	mov [pcireqtype], al
  7804 00005FAB E916000000          <1> 	jmp searchpci
  7805                              <1> pcidump:
  7806 00005FB0 31C0                <1> 	xor eax, eax
  7807 00005FB2 A2[8D5F0000]        <1> 	mov [pcifunction], al
  7808 00005FB7 A2[8B5F0000]        <1> 	mov [pcibus], al
  7809 00005FBC A2[8C5F0000]        <1> 	mov [pcidevice], al
  7810 00005FC1 A2[8F5F0000]        <1> 	mov [pcireqtype], al
  7811                              <1> searchpci:		;;return in ebx, start X in pciX
  7812 00005FC6 30C0                <1> 	xor al, al
  7813 00005FC8 A2[8E5F0000]        <1> 	mov [pciregister], al
  7814 00005FCD E81D020000          <1> 	call getpciaddr
  7815 00005FD2 BAF80C0000          <1> 	mov edx, 0xCF8
  7816 00005FD7 EF                  <1> 	out dx, eax	;;request pci config
  7817 00005FD8 BAFC0C0000          <1> 	mov edx, 0xCFC
  7818 00005FDD ED                  <1> 	in eax, dx 	;;read in pci config
  7819 00005FDE 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7820 00005FE3 0F8237000000        <1> 	jb near checkpcidevice
  7821                              <1> searchpciret:
  7822                              <1> nextpcidevice:
  7823 00005FE9 30C0                <1> 	xor al, al
  7824 00005FEB A2[8D5F0000]        <1> 	mov [pcifunction], al
  7825 00005FF0 A0[8C5F0000]        <1> 	mov al, [pcidevice]
  7826 00005FF5 3C1F                <1> 	cmp al, 11111b
  7827 00005FF7 0F8300010000        <1> 	jae near nextpcibus
  7828 00005FFD FEC0                <1> 	inc al
  7829 00005FFF A2[8C5F0000]        <1> 	mov [pcidevice], al
  7830 00006004 EBC0                <1> 	jmp searchpci
  7831 00006006 A0[8D5F0000]        <1> 	mov al, [pcifunction]
  7832 0000600B 3C07                <1> 	cmp al, 111b
  7833 0000600D 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7834 00006013 FEC0                <1> 	inc al
  7835 00006015 A2[8D5F0000]        <1> 	mov [pcifunction], al
  7836 0000601A EBAA                <1> 	jmp searchpci
  7837 0000601C 00000000            <1> pcitype: db 0,0,0,0
  7838                              <1> checkpcidevice:
  7839 00006020 31C0                <1> 	xor eax, eax
  7840 00006022 3905[905F0000]      <1> 	cmp [pcidevid], eax
  7841 00006028 0F8430000000        <1> 	je near .good
  7842 0000602E A2[8E5F0000]        <1> 	mov [pciregister], al	;device id, vendor id
  7843 00006033 E8B7010000          <1> 	call getpciaddr
  7844 00006038 BAF80C0000          <1> 	mov edx, 0xCF8
  7845 0000603D EF                  <1> 	out dx, eax
  7846 0000603E BAFC0C0000          <1> 	mov edx, 0xCFC
  7847 00006043 ED                  <1> 	in eax, dx
  7848 00006044 2305[945F0000]      <1> 	and eax, [pcidevidmask]
  7849 0000604A 8B1D[905F0000]      <1> 	mov ebx, [pcidevid]
  7850 00006050 231D[945F0000]      <1> 	and ebx, [pcidevidmask]
  7851 00006056 39D8                <1> 	cmp eax, ebx
  7852 00006058 0F858BFFFFFF        <1> 	jne near searchpciret
  7853                              <1> .good:
  7854 0000605E 30C0                <1> 	xor al, al
  7855 00006060 3805[8F5F0000]      <1> 	cmp [pcireqtype], al
  7856 00006066 0F842C000000        <1> 	je near dumppcidevice
  7857 0000606C B008                <1> 	mov al, 0x08
  7858 0000606E A2[8E5F0000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7859 00006073 E877010000          <1> 	call getpciaddr
  7860 00006078 BAF80C0000          <1> 	mov edx, 0xCF8
  7861 0000607D EF                  <1> 	out dx, eax
  7862 0000607E BAFC0C0000          <1> 	mov edx, 0xCFC
  7863 00006083 ED                  <1> 	in eax, dx
  7864 00006084 C1C008              <1> 	rol eax, 8
  7865 00006087 3A05[1C600000]      <1> 	cmp al, [pcitype]
  7866 0000608D 0F84A0000000        <1> 	je near foundpciaddr
  7867 00006093 E951FFFFFF          <1> 	jmp searchpciret
  7868                              <1> dumppcidevice:
  7869 00006098 30C0                <1> 	xor al, al
  7870 0000609A A2[8E5F0000]        <1> 	mov [pciregister], al
  7871 0000609F E84B010000          <1> 	call getpciaddr
  7872 000060A4 89C1                <1> 	mov ecx, eax
  7873 000060A6 C605[78310000]05    <1> 	mov byte [firsthexshown], 5
  7874 000060AD E8DBD0FFFF          <1> 	call showhex
  7875                              <1> dumppcidevicelp:
  7876 000060B2 A2[8E5F0000]        <1> 	mov [pciregister], al
  7877 000060B7 E833010000          <1> 	call getpciaddr
  7878 000060BC BAF80C0000          <1> 	mov edx, 0xCF8
  7879 000060C1 EF                  <1> 	out dx, eax
  7880 000060C2 BAFC0C0000          <1> 	mov edx, 0xCFC
  7881 000060C7 ED                  <1> 	in eax, dx
  7882 000060C8 89C1                <1> 	mov ecx, eax
  7883 000060CA A0[8E5F0000]        <1> 	mov al, [pciregister]
  7884 000060CF 0404                <1> 	add al, 4
  7885 000060D1 C605[78310000]05    <1> 	mov byte [firsthexshown], 5
  7886 000060D8 E8B0D0FFFF          <1> 	call showhex
  7887 000060DD 3C3C                <1> 	cmp al, 0x3C
  7888 000060DF 72D1                <1> 	jb dumppcidevicelp
  7889                              <1> dumppcidn:
  7890                              <1> %ifdef io.serial
  7891                              <1> 	mov esi, line
  7892                              <1> 	call print
  7893                              <1> %else
  7894 000060E1 803D[9B250000]00    <1> 	cmp byte [charpos], 0
  7895 000060E8 0F84FBFEFFFF        <1> 	je near searchpciret
  7896 000060EE BE[45820000]        <1> 	mov esi, line
  7897 000060F3 E824BCFFFF          <1> 	call print
  7898                              <1> %endif
  7899 000060F8 E9ECFEFFFF          <1> 	jmp searchpciret
  7900                              <1> nextpcibus:
  7901 000060FD 30C0                <1> 	xor al, al
  7902 000060FF A2[8C5F0000]        <1> 	mov [pcidevice], al
  7903 00006104 A0[8B5F0000]        <1> 	mov al, [pcibus]
  7904 00006109 3C7F                <1> 	cmp al, 1111111b
  7905 0000610B 730C                <1> 	jae donesearchpci
  7906 0000610D FEC0                <1> 	inc al
  7907 0000610F A2[8B5F0000]        <1> 	mov [pcibus], al
  7908 00006114 E9ADFEFFFF          <1> 	jmp searchpci
  7909                              <1> donesearchpci:
  7910 00006119 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  7911 0000611E 31D2                <1> 	xor edx, edx
  7912 00006120 8815[1C600000]      <1> 	mov [pcitype], dl
  7913 00006126 8915[905F0000]      <1> 	mov [pcidevid], edx
  7914 0000612C 891D[945F0000]      <1> 	mov [pcidevidmask], ebx
  7915 00006132 C3                  <1> 	ret
  7916                              <1> foundpciaddr:
  7917 00006133 B010                <1> 	mov al, 0x10
  7918 00006135 A2[8E5F0000]        <1> 	mov [pciregister], al
  7919 0000613A 803D[8F5F0000]02    <1> 	cmp byte [pcireqtype], 2
  7920 00006141 7443                <1> 	je findpcimemaddr
  7921                              <1> findpciioaddr:
  7922 00006143 E8A7000000          <1> 	call getpciaddr
  7923 00006148 BAF80C0000          <1> 	mov edx, 0xCF8
  7924 0000614D EF                  <1> 	out dx, eax
  7925 0000614E BAFC0C0000          <1> 	mov edx, 0xCFC
  7926 00006153 ED                  <1> 	in eax, dx
  7927 00006154 89C3                <1> 	mov ebx, eax
  7928 00006156 81E301000000        <1> 	and ebx, 1
  7929 0000615C 81FB00000000        <1> 	cmp ebx, 0
  7930 00006162 0F846E000000        <1> 	je near notpciioaddr
  7931 00006168 2D01000000          <1> 	sub eax, 1
  7932 0000616D 89C2                <1> 	mov edx, eax
  7933 0000616F 31DB                <1> 	xor ebx, ebx
  7934 00006171 4B                  <1> 	dec ebx
  7935 00006172 891D[945F0000]      <1> 	mov [pcidevidmask], ebx
  7936 00006178 43                  <1> 	inc ebx
  7937 00006179 881D[1C600000]      <1> 	mov [pcitype], bl
  7938 0000617F 891D[905F0000]      <1> 	mov [pcidevid], ebx
  7939 00006185 C3                  <1> 	ret
  7940                              <1> findpcimemaddr:
  7941 00006186 E864000000          <1> 	call getpciaddr
  7942 0000618B BAF80C0000          <1> 	mov edx, 0xCF8
  7943 00006190 EF                  <1> 	out dx, eax
  7944 00006191 BAFC0C0000          <1> 	mov edx, 0xCFC
  7945 00006196 ED                  <1> 	in eax, dx
  7946 00006197 89C3                <1> 	mov ebx, eax
  7947 00006199 81E301000000        <1> 	and ebx, 1
  7948 0000619F 81FB01000000        <1> 	cmp ebx, 1
  7949 000061A5 0F842B000000        <1> 	je near notpciioaddr
  7950 000061AB C1E804              <1> 	shr eax, 4
  7951 000061AE C1E004              <1> 	shl eax, 4	;remove prefetch and type
  7952 000061B1 89C2                <1> 	mov edx, eax
  7953 000061B3 50                  <1> 	push eax
  7954 000061B4 A1[35020000]        <1> 	mov eax, [basecache]
  7955 000061B9 C1E004              <1> 	shl eax, 4
  7956 000061BC 29C2                <1> 	sub edx, eax
  7957 000061BE 58                  <1> 	pop eax
  7958 000061BF 31DB                <1> 	xor ebx, ebx
  7959 000061C1 4B                  <1> 	dec ebx
  7960 000061C2 891D[945F0000]      <1> 	mov [pcidevidmask], ebx
  7961 000061C8 43                  <1> 	inc ebx
  7962 000061C9 881D[1C600000]      <1> 	mov [pcitype], bl
  7963 000061CF 891D[905F0000]      <1> 	mov [pcidevid], ebx
  7964 000061D5 C3                  <1> 	ret
  7965                              <1> notpciioaddr:
  7966 000061D6 A0[8E5F0000]        <1> 	mov al, [pciregister]
  7967 000061DB 0404                <1> 	add al, 4
  7968 000061DD 3C28                <1> 	cmp al, 0x28
  7969 000061DF 0F8704FEFFFF        <1> 	ja near searchpciret
  7970 000061E5 A2[8E5F0000]        <1> 	mov [pciregister], al
  7971 000061EA E954FFFFFF          <1> 	jmp findpciioaddr
  7972                              <1> getpciaddr:		;;puts it in eax and ebx
  7973 000061EF 31C0                <1> 			xor eax, eax
  7974 000061F1 BB00000080          <1> 			mov ebx, 0x80000000
  7975 000061F6 A0[8B5F0000]        <1> 			mov al, [pcibus]
  7976 000061FB C1E010              <1> 			shl eax, 16
  7977 000061FE 01C3                <1> 			add ebx, eax
  7978 00006200 31C0                <1> 			xor eax, eax
  7979 00006202 A0[8C5F0000]        <1> 			mov al, [pcidevice]
  7980 00006207 C1E00B              <1> 			shl eax, 11
  7981 0000620A 01C3                <1> 			add ebx, eax
  7982 0000620C 31C0                <1> 			xor eax, eax
  7983 0000620E A0[8D5F0000]        <1> 			mov al, [pcifunction]
  7984 00006213 C1E008              <1> 			shl eax, 8
  7985 00006216 01C3                <1> 			add ebx, eax
  7986 00006218 31C0                <1> 			xor eax, eax
  7987 0000621A A0[8E5F0000]        <1> 			mov al, [pciregister]
  7988 0000621F 01C3                <1> 			add ebx, eax
  7989 00006221 89D8                <1> 			mov eax, ebx
  7990 00006223 C3                  <1> 			ret
  7991                                      %include "source/disk.asm"
  7992                              <1> %ifdef disk.real
  7993                              <1> 	%include "source/drivers/disk/realmode.asm"
  7994                              <2> diskr:
  7995                              <2> 			;sector count in cl
  7996                              <2> 			;disk number in ch
  7997                              <2> 			;48 bit address with last 32 bits in ebx
  7998                              <2> 			;buffer in esi
  7999                              <2> 			;puts end of buffer in edi and end lba address in edx
  8000 00006224 880D[51620000]      <2> 	mov [sdlength], cl
  8001 0000622A 891D[52620000]      <2> 	mov [sdaddress], ebx
  8002 00006230 8935[CD630000]      <2> 	mov [oldesireal], esi
  8003 00006236 66BE[5662]          <2> 	mov si, readdiskreal
  8004 0000623A 668935[CB0C0000]    <2> 	mov [realmodeptr], si
  8005 00006241 BE[92620000]        <2> 	mov esi, backfromrealread
  8006 00006246 8935[C70C0000]      <2> 	mov [realmodereturn], esi
  8007 0000624C E95FA9FFFF          <2> 	jmp realmode
  8008 00006251 00                  <2> sdlength db 0
  8009 00006252 00000000            <2> sdaddress dd 0
  8010                              <2> 
  8011                              <2> [BITS 16]
  8012                              <2> readdiskreal:
  8013 00006256 C706[8262]1000      <2> 	mov word [dlen], 0x10
  8014 0000625C C706[8662]0000      <2> 	mov word [daddress], 0
  8015 00006262 C706[8862]0001      <2> 	mov word [dsegm], 0x100
  8016 00006268 66891E[8A62]        <2> 	mov [dlbaad], ebx
  8017 0000626D 880E[8462]          <2> 	mov [dreadlen], cl
  8018                              <2> ReadHardDisk:
  8019 00006271 BE[8262]            <2> 	mov si, diskaddresspacket
  8020 00006274 31C0                <2> 	xor ax, ax
  8021 00006276 B442                <2> 	mov ah, 0x42
  8022 00006278 8A16[8162]          <2> 	mov dl, [dnumber]
  8023 0000627C CD13                <2> 	int 0x13
  8024 0000627E 72F1                <2> 	jc ReadHardDisk
  8025 00006280 C3                  <2> 	ret
  8026                              <2> 
  8027 00006281 80                  <2> dnumber db 0x80
  8028                              <2> diskaddresspacket:
  8029 00006282 10                  <2> dlen:	db 0x10 ;size of packet
  8030 00006283 00                  <2> 		db 0
  8031 00006284 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8032 00006286 0000                <2> daddress:	dw 0	;address 0
  8033 00006288 0001                <2> dsegm:		dw 0x100	;segment
  8034                              <2> 		;start with known value for hd
  8035                              <2> dlbaad:
  8036 0000628A 00000000            <2> 	dd 0	;lba address
  8037 0000628E 00000000            <2> 	dd 0
  8038                              <2> [BITS 32]
  8039                              <2> backfromrealread:
  8040 00006292 8B35[CD630000]      <2> 	mov esi, [oldesireal]
  8041 00006298 8B1D[52620000]      <2> 	mov ebx, [sdaddress]
  8042 0000629E 31C9                <2> 	xor ecx, ecx
  8043 000062A0 8A0D[51620000]      <2> 	mov cl, [sdlength]
  8044 000062A6 01CB                <2> 	add ebx, ecx
  8045 000062A8 66B80800            <2> 	mov ax, LINEAR_SEL
  8046 000062AC 8EE0                <2> 	mov fs, ax
  8047 000062AE BF00100000          <2> 	mov edi, 0x1000
  8048 000062B3 B200                <2> 	mov dl, 0
  8049 000062B5 D0E1                <2> 	shl cl, 1
  8050                              <2> copyfromrmodedisk:
  8051 000062B7 648A07              <2> 	mov al, [fs:edi]
  8052 000062BA 8806                <2> 	mov [esi], al
  8053 000062BC 47                  <2> 	inc edi
  8054 000062BD 46                  <2> 	inc esi
  8055 000062BE FECA                <2> 	dec dl
  8056 000062C0 80FA00              <2> 	cmp dl, 0
  8057 000062C3 75F2                <2> 	jne copyfromrmodedisk
  8058 000062C5 FEC9                <2> 	dec cl
  8059 000062C7 B200                <2> 	mov dl, 0
  8060 000062C9 80F900              <2> 	cmp cl, 0
  8061 000062CC 75E9                <2> 	jne copyfromrmodedisk
  8062 000062CE 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8063 000062D2 8EE0                <2> 	mov fs, ax
  8064 000062D4 89F7                <2> 	mov edi, esi
  8065 000062D6 8B35[CD630000]      <2> 	mov esi, [oldesireal]
  8066 000062DC 89DA                <2> 	mov edx, ebx
  8067 000062DE 8B1D[52620000]      <2> 	mov ebx, [sdaddress]
  8068 000062E4 C3                  <2> 	ret
  8069                              <2> 	
  8070                              <1> %else
  8071                              <1> 	%ifdef disk.protected
  8072                              <1> 		%include "source/drivers/disk/pata.asm"
  8073                              <1> 	%endif
  8074                              <1> %endif
  8075                              <1> %ifdef disk.none
  8076                              <1> loadfile:	xor edx, edx
  8077                              <1> 			cmp byte [edi], '&'
  8078                              <1> 			je .ret
  8079                              <1> 			mov edx, 404	;no files are found except &
  8080                              <1> 		.ret:
  8081                              <1> 			ret
  8082                              <1> %else
  8083                              <1> ;This loads files using the methods in the loaded driver
  8084                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8085                              <1> 			;returns with err code in edx and file end in edi
  8086 000062E5 803F00              <1> 	cmp byte [edi], 0
  8087 000062E8 0F8448000000        <1> 	je near nofileload
  8088 000062EE 89FA                <1> 	mov edx, edi
  8089 000062F0 BB[B4840300]        <1> 	mov ebx, diskfileindex
  8090                              <1> nextnamechar:
  8091 000062F5 8A07                <1> 	mov al, [edi]
  8092 000062F7 3C26                <1> 	cmp al, '&'
  8093 000062F9 7440                <1> 	je nullfile
  8094 000062FB 8A23                <1> 	mov ah, [ebx]
  8095 000062FD 47                  <1> 	inc edi
  8096 000062FE 43                  <1> 	inc ebx
  8097 000062FF 88C1                <1> 	mov cl, al
  8098 00006301 08E1                <1> 	or cl, ah
  8099 00006303 80F900              <1> 	cmp cl, 0
  8100 00006306 746B                <1> 	je equalfilenames
  8101 00006308 80F920              <1> 	cmp cl, ' '
  8102 0000630B 7466                <1> 	je equalfilenames
  8103 0000630D 3C2A                <1> 	cmp al, '*'
  8104 0000630F 742B                <1> 	je asteriskcheck
  8105 00006311 80FC00              <1> 	cmp ah, 0
  8106 00006314 7410                <1> 	je nextfilename
  8107 00006316 3C00                <1> 	cmp al, 0
  8108 00006318 7404                <1> 	je getebxzero
  8109 0000631A 38E0                <1> 	cmp al, ah
  8110 0000631C 74D7                <1> 	je nextnamechar
  8111                              <1> getebxzero:
  8112 0000631E 8A23                <1> 	mov ah, [ebx]
  8113 00006320 43                  <1> 	inc ebx
  8114 00006321 80FC00              <1> 	cmp ah, 0
  8115 00006324 75F8                <1> 	jne getebxzero
  8116                              <1> nextfilename:
  8117 00006326 81C308000000        <1> 	add ebx, 8		;next descriptor
  8118 0000632C 89D7                <1> 	mov edi, edx
  8119 0000632E 81FB[DA860300]      <1> 	cmp ebx, enddiskfileindex
  8120 00006334 72BF                <1> 	jb nextnamechar
  8121                              <1> nofileload:
  8122 00006336 BA94010000          <1> 	mov edx, 404	;indicate not found error
  8123                              <1> nullfile:
  8124 0000633B C3                  <1> 	ret
  8125                              <1> asteriskcheck:
  8126 0000633C 4B                  <1> 	dec ebx
  8127 0000633D 8A07                <1> 	mov al, [edi]
  8128 0000633F 3C2A                <1> 	cmp al, '*'
  8129 00006341 74F9                <1> 	je asteriskcheck ;remove multiple asterisks
  8130 00006343 3C20                <1> 	cmp al, ' '
  8131 00006345 7412                <1> 	je equalfilenames2
  8132 00006347 3C00                <1> 	cmp al, 0
  8133 00006349 740E                <1> 	je equalfilenames2
  8134                              <1> .lp:
  8135 0000634B 8A23                <1> 	mov ah, [ebx]
  8136 0000634D 80FC00              <1> 	cmp ah, 0
  8137 00006350 74D4                <1> 	je nextfilename
  8138 00006352 38E0                <1> 	cmp al, ah
  8139 00006354 749F                <1> 	je nextnamechar
  8140 00006356 43                  <1> 	inc ebx
  8141 00006357 EBF2                <1> 	jmp .lp
  8142                              <1> equalfilenames2:
  8143 00006359 81EB02000000        <1> 	sub ebx, 2
  8144                              <1> eqfilefind:
  8145 0000635F 43                  <1> 	inc ebx
  8146 00006360 81FB[DA860300]      <1> 	cmp ebx, enddiskfileindex
  8147 00006366 0F83CAFFFFFF        <1> 	jae near nofileload
  8148 0000636C 8A03                <1> 	mov al, [ebx]
  8149 0000636E 3C00                <1> 	cmp al, 0
  8150 00006370 75ED                <1> 	jne eqfilefind
  8151 00006372 43                  <1> 	inc ebx
  8152                              <1> equalfilenames:
  8153 00006373 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8154 00006376 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8155 00006378 031D[6C820000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  8156 0000637E 31C9                <1> 	xor ecx, ecx
  8157 00006380 88C1                <1> 	mov cl, al			;get excess number of sectors
  8158 00006382 C0E102              <1> 	shl cl, 2
  8159 00006385 C0E902              <1> 	shr cl, 2			;cut off at 64
  8160 00006388 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8161 0000638A B500                <1> 	mov ch, 0			;drive 0
  8162 0000638C C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8163                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8164 0000638F A3[D1630000]        <1> 	mov [filetracks], eax
  8165 00006394 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8166 00006396 89DA                <1> 	mov edx, ebx
  8167 00006398 80F900              <1> 	cmp cl, 0
  8168 0000639B 7405                <1> 	je copytracksforfile
  8169 0000639D E882FEFFFF          <1> 	call diskr	;take care of excess sectors
  8170                              <1> copytracksforfile:
  8171 000063A2 A1[D1630000]        <1> 	mov eax, [filetracks]
  8172 000063A7 3D00000000          <1> 	cmp eax, 0
  8173 000063AC 7419                <1> 	je donecopyfile
  8174 000063AE 48                  <1> 	dec eax
  8175 000063AF A3[D1630000]        <1> 	mov [filetracks], eax
  8176 000063B4 89D3                <1> 	mov ebx, edx	;get end lba
  8177 000063B6 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8178 000063B8 8A2D[6B820000]      <1> 	mov ch, [DriveNumber]
  8179 000063BE 89FE                <1> 	mov esi, edi	;reset buffer
  8180 000063C0 E85FFEFFFF          <1> 	call diskr
  8181 000063C5 EBDB                <1> 	jmp copytracksforfile
  8182                              <1> donecopyfile:
  8183 000063C7 BA00000000          <1> 	mov edx, 0	;no error
  8184 000063CC C3                  <1> 	ret
  8185                              <1> 
  8186 000063CD 00000000            <1> oldesireal dd 0
  8187 000063D1 00000000            <1> filetracks dd 0
  8188 000063D5 00                  <1> lbad1 db 0
  8189 000063D6 00                  <1> lbad2 db 0
  8190 000063D7 00                  <1> lbad3 db 0
  8191 000063D8 00                  <1> lbad4 db 0
  8192 000063D9 00                  <1> lbad5 db 0
  8193 000063DA 00                  <1> lbad6 db 0
  8194 000063DB 6400                <1> segments dw 100
  8195                              <1> %endif
  8196                                      %include "source/threads.asm"
  8197                              <1> %ifdef threads.included	
  8198                              <1> nwcmdst:
  8199 000063DD 31C0                <1> 	xor eax, eax
  8200 000063DF BC[7C960300]        <1> 	mov esp, stackend
  8201 000063E4 A2[A1640000]        <1> 	mov [threadson], al
  8202 000063E9 A3[A2640000]        <1> 	mov [currentthread], eax
  8203 000063EE 0504000000          <1> 	add eax, 4
  8204 000063F3 A3[9D640000]        <1> 	mov [lastthread], eax
  8205 000063F8 FB                  <1> 	sti
  8206 000063F9 E9B5C8FFFF          <1> 	jmp nwcmd
  8207                              <1> 
  8208                              <1> nomorethreadspace:
  8209 000063FE BE[14640000]        <1> 	mov esi, nmts
  8210 00006403 E814B9FFFF          <1> 	call print
  8211 00006408 C605[A1640000]00    <1> 	mov byte [threadson], 0
  8212 0000640F E99FC8FFFF          <1> 	jmp nwcmd
  8213 00006414 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8214 0000641D 6572666C6F770A00    <1>
  8215                              <1> 
  8216                              <1> nomorestackspace:
  8217 00006425 BE[31640000]        <1> 	mov esi, nmss
  8218 0000642A E8EDB8FFFF          <1> 	call print
  8219 0000642F EBAC                <1> 	jmp nwcmdst
  8220 00006431 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8221 0000643A 72666C6F770A00      <1>
  8222                              <1> 	
  8223                              <1> threadswitch:
  8224 00006441 FA                  <1> 	cli
  8225 00006442 60                  <1> 	pushad
  8226 00006443 BF[16730500]        <1> 	mov edi, threadlist
  8227 00006448 A1[A2640000]        <1> 	mov eax, [currentthread]
  8228 0000644D 40                  <1> 	inc eax
  8229 0000644E A3[A2640000]        <1> 	mov [currentthread], eax
  8230 00006453 6648                <1> 	dec ax
  8231 00006455 C1E002              <1> 	shl eax, 2
  8232 00006458 01C7                <1> 	add edi, eax
  8233 0000645A 8927                <1> 	mov [edi], esp
  8234 0000645C 81C704000000        <1> 	add edi, 4
  8235 00006462 81FF[16830500]      <1> 	cmp edi, threadlistend
  8236 00006468 0F830D000000        <1> 	jae near nookespthread
  8237 0000646E 8B07                <1> 	mov eax, [edi]
  8238 00006470 3D00000000          <1> 	cmp eax, 0
  8239 00006475 0F8519000000        <1> 	jne near okespthread
  8240                              <1> nookespthread:
  8241 0000647B BF[16730500]        <1> 	mov edi, threadlist
  8242 00006480 31C0                <1> 	xor eax, eax
  8243 00006482 A3[A2640000]        <1> 	mov [currentthread], eax
  8244 00006487 8B07                <1> 	mov eax, [edi]
  8245 00006489 3D00000000          <1> 	cmp eax, 0
  8246 0000648E 0F8449FFFFFF        <1> 	je near nwcmdst
  8247                              <1> okespthread:
  8248 00006494 89C4                <1> 	mov esp, eax
  8249 00006496 B020                <1> 	mov al, 0x20
  8250 00006498 E620                <1> 	out 0x20, al
  8251 0000649A 61                  <1> 	popad
  8252 0000649B FB                  <1> 	sti
  8253 0000649C CF                  <1> 	iret
  8254                              <1> 
  8255                              <1> %endif
  8256 0000649D 04000000            <1> 	lastthread dd 4
  8257 000064A1 00                  <1> 	threadson db 0
  8258 000064A2 00000000            <1> 	currentthread dd 0
  8259                                  %ifdef gui.included
  8260                                      %include "source/gui/gui.asm"
  8261                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8262 000064A6 31C0                <1> 	xor eax, eax
  8263 000064A8 31DB                <1> 	xor ebx, ebx
  8264 000064AA 31C9                <1> 	xor ecx, ecx
  8265 000064AC 31D2                <1> 	xor edx, edx
  8266 000064AE E871080000          <1> 	call guisetup
  8267                              <1> guiloop:
  8268 000064B3 E8B1F0FFFF          <1> 	call cursorgui
  8269                              <1> guistart:
  8270 000064B8 E885F4FFFF          <1> 	call getkey
  8271 000064BD C605[A5790000]00    <1> 	mov byte [copygui], 0
  8272 000064C4 EBF2                <1> 	jmp guistart
  8273                              <1> 
  8274                              <1> %include "source/gui/bmp.asm"
  8275                              <2> showbmp:
  8276 000064C6 668B06              <2> 	mov ax, [esi]
  8277 000064C9 663D424D            <2> 	cmp ax, "BM"
  8278 000064CD 0F85BB000000        <2> 	jne near endedbmp
  8279 000064D3 8B3D[8C540000]      <2> 	mov edi, [physbaseptr]
  8280 000064D9 6689D0              <2> 	mov ax, dx
  8281 000064DC 6689CB              <2> 	mov bx, cx
  8282 000064DF 31C9                <2> 	xor ecx, ecx
  8283 000064E1 31D2                <2> 	xor edx, edx
  8284 000064E3 6689D9              <2> 	mov cx, bx
  8285 000064E6 6689C2              <2> 	mov dx, ax
  8286 000064E9 01D7                <2> 	add edi, edx
  8287 000064EB 01D7                <2> 	add edi, edx
  8288 000064ED 31D2                <2> 	xor edx, edx
  8289 000064EF 668B15[64550000]    <2> 	mov dx, [resolutionx2]
  8290 000064F6 034E16              <2> 	add ecx, [esi + 22]
  8291                              <2> bmplocloop:
  8292 000064F9 52                  <2> 	push edx
  8293 000064FA 31C0                <2> 	xor eax, eax
  8294 000064FC 6689D0              <2> 	mov ax, dx
  8295 000064FF F7E1                <2> 	mul ecx
  8296 00006501 5A                  <2> 	pop edx
  8297 00006502 663B0D[78540000]    <2> 	cmp cx, [resolutiony]
  8298 00006509 7609                <2> 	jbe .nofixy
  8299 0000650B 31C9                <2> 	xor ecx, ecx
  8300 0000650D 668B0D[78540000]    <2> 	mov cx, [resolutiony]
  8301                              <2> .nofixy:
  8302 00006514 01C7                <2> 	add edi, eax
  8303 00006516 8B5612              <2> 	mov edx, [esi + 18]
  8304 00006519 8B4E16              <2> 	mov ecx, [esi + 22]
  8305 0000651C 8B460A              <2> 	mov eax, [esi + 10]
  8306 0000651F 8B5E02              <2> 	mov ebx, [esi + 2]
  8307 00006522 01F3                <2> 	add ebx, esi
  8308 00006524 891D[94650000]      <2> 	mov [bmpend], ebx
  8309 0000652A 89D3                <2> 	mov ebx, edx
  8310 0000652C 01C6                <2> 	add esi, eax
  8311                              <2> ldxbmp2:
  8312 0000652E 31D2                <2> 	xor edx, edx
  8313 00006530 668B15[76540000]    <2> 	mov dx, [resolutionx]
  8314 00006537 39D3                <2> 	cmp ebx, edx
  8315 00006539 7702                <2> 	ja ldxbmp
  8316 0000653B 89DA                <2> 	mov edx, ebx
  8317                              <2> ldxbmp:
  8318 0000653D 668B06              <2> 	mov ax, [esi]
  8319 00006540 668907              <2> 	mov [edi], ax
  8320 00006543 81C702000000        <2> 	add edi, 2
  8321 00006549 81C602000000        <2> 	add esi, 2
  8322 0000654F 3B35[94650000]      <2> 	cmp esi, [bmpend]
  8323 00006555 7737                <2> 	ja endedbmp
  8324 00006557 4A                  <2> 	dec edx
  8325 00006558 81FA00000000        <2> 	cmp edx, 0
  8326 0000655E 77DD                <2> 	ja ldxbmp
  8327 00006560 31D2                <2> 	xor edx, edx
  8328 00006562 668B15[76540000]    <2> 	mov dx, [resolutionx]
  8329 00006569 39D3                <2> 	cmp ebx, edx
  8330 0000656B 7610                <2> 	jbe .notover
  8331                              <2> .over:
  8332 0000656D 01DE                <2> 	add esi, ebx
  8333 0000656F 01DE                <2> 	add esi, ebx
  8334 00006571 29D6                <2> 	sub esi, edx
  8335 00006573 29D6                <2> 	sub esi, edx
  8336 00006575 01DF                <2> 	add edi, ebx
  8337 00006577 01DF                <2> 	add edi, ebx
  8338 00006579 29D7                <2> 	sub edi, edx
  8339 0000657B 29D7                <2> 	sub edi, edx
  8340                              <2> .notover:
  8341 0000657D 29DF                <2> 	sub edi, ebx
  8342 0000657F 29DF                <2> 	sub edi, ebx
  8343 00006581 29D7                <2> 	sub edi, edx
  8344 00006583 29D7                <2> 	sub edi, edx
  8345 00006585 49                  <2> 	dec ecx
  8346 00006586 81F900000000        <2> 	cmp ecx, 0
  8347 0000658C 77A0                <2> 	ja ldxbmp2
  8348                              <2> endedbmp:
  8349 0000658E E844030000          <2> 	call switchmousepos2
  8350 00006593 C3                  <2> 	ret
  8351                              <2> 	
  8352 00006594 00000000            <2> 	bmpend dd 0
  8353                              <1> %include "source/gui/circle.asm"
  8354                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8355 00006598 55                  <2> 	push ebp
  8356 00006599 663D0000            <2> 	cmp ax, 0
  8357 0000659D 770A                <2> 	ja .nozerocircle
  8358 0000659F E8F61B0000          <2> 	call putpixel	;the easiest circle ever
  8359 000065A4 E9F7000000          <2> 	jmp .done
  8360                              <2> .nozerocircle:
  8361 000065A9 6689F5              <2> 	mov bp, si
  8362 000065AC 6650                <2> 	push ax
  8363 000065AE E8281C0000          <2> 	call getpixelmem
  8364 000065B3 31C0                <2> 	xor eax, eax
  8365 000065B5 6658                <2> 	pop ax
  8366 000065B7 BE01000000          <2> 	mov esi, 1
  8367 000065BC 29C6                <2> 	sub esi, eax
  8368 000065BE 89C1                <2> 	mov ecx, eax
  8369 000065C0 31C0                <2> 	xor eax, eax
  8370 000065C2 66A1[64550000]      <2> 	mov ax, [resolutionx2]
  8371 000065C8 F7E1                <2> 	mul ecx
  8372 000065CA 50                  <2> 	push eax
  8373 000065CB 31D2                <2> 	xor edx, edx
  8374 000065CD 01C7                <2> 	add edi, eax
  8375 000065CF 66892F              <2> 	mov [edi], bp
  8376 000065D2 29C7                <2> 	sub edi, eax
  8377 000065D4 29C7                <2> 	sub edi, eax
  8378 000065D6 66892F              <2> 	mov [edi], bp
  8379 000065D9 01C7                <2> 	add edi, eax
  8380 000065DB D1E1                <2> 	shl ecx, 1
  8381 000065DD 01CF                <2> 	add edi, ecx
  8382 000065DF 66892F              <2> 	mov [edi], bp
  8383 000065E2 D1E1                <2> 	shl ecx, 1
  8384 000065E4 29CF                <2> 	sub edi, ecx
  8385 000065E6 66892F              <2> 	mov [edi], bp
  8386 000065E9 D1E9                <2> 	shr ecx, 1
  8387 000065EB 01CF                <2> 	add edi, ecx
  8388 000065ED D1E9                <2> 	shr ecx, 1
  8389 000065EF B802000000          <2> 	mov eax, 2
  8390 000065F4 F7E1                <2> 	mul ecx
  8391 000065F6 48                  <2> 	dec eax
  8392 000065F7 F7D0                <2> 	not eax ;make it negative
  8393 000065F9 A3[A6660000]        <2> 	mov [.ddF_y], eax
  8394 000065FE 58                  <2> 	pop eax
  8395 000065FF BB01000000          <2> 	mov ebx, 1
  8396 00006604 891D[A2660000]      <2> 	mov [.ddF_x], ebx
  8397 0000660A 4B                  <2> 	dec ebx
  8398 0000660B 31D2                <2> 	xor edx, edx
  8399 0000660D E904000000          <2> 	jmp .lp
  8400                              <2> .lpb:
  8401 00006612 D1EA                <2> 	shr edx, 1
  8402 00006614 D1E9                <2> 	shr ecx, 1
  8403                              <2> .lp:	;it starts this with the center in edi
  8404                              <2> 		;color in bp
  8405                              <2> 		;ddF_x in memory
  8406                              <2> 		;x*resolutionx2 in ebx
  8407                              <2> 		;x in edx
  8408                              <2> 		;ddF_y in memory
  8409                              <2> 		;y*resolutionx2 in eax
  8410                              <2> 		;f in esi
  8411                              <2> 		;y in ecx
  8412 00006616 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8413 0000661C 7717                <2> 	ja	.noddF_y
  8414 0000661E 49                  <2> 	dec ecx
  8415 0000661F 2B05[64550000]      <2> 	sub eax, [resolutionx2]
  8416 00006625 8105[A6660000]0200- <2> 	add dword [.ddF_y], 2
  8417 0000662D 0000                <2>
  8418 0000662F 0335[A6660000]      <2> 	add esi, [.ddF_y]
  8419                              <2> .noddF_y:
  8420 00006635 42                  <2> 	inc edx
  8421 00006636 031D[64550000]      <2> 	add ebx, [resolutionx2]
  8422 0000663C 8105[A2660000]0200- <2> 	add dword [.ddF_x], 2
  8423 00006644 0000                <2>
  8424 00006646 0335[A2660000]      <2> 	add esi, [.ddF_x]
  8425                              <2> 
  8426 0000664C D1E2                <2> 	shl edx, 1
  8427 0000664E D1E1                <2> 	shl ecx, 1
  8428 00006650 01D7                <2> 	add edi, edx
  8429 00006652 01C7                <2> 	add edi, eax
  8430 00006654 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  8431 00006657 D1E2                <2> 	shl edx, 1
  8432 00006659 29D7                <2> 	sub edi, edx
  8433 0000665B 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8434 0000665E D1E0                <2> 	shl eax, 1
  8435 00006660 29C7                <2> 	sub edi, eax
  8436 00006662 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  8437 00006665 01D7                <2> 	add edi, edx
  8438 00006667 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8439 0000666A D1E8                <2> 	shr eax, 1
  8440 0000666C D1EA                <2> 	shr edx, 1
  8441 0000666E 01C7                <2> 	add edi, eax
  8442 00006670 29D7                <2> 	sub edi, edx
  8443                              <2> 
  8444 00006672 39D1                <2> 	cmp ecx, edx
  8445 00006674 749C                <2> 	je .lpb
  8446                              <2> 
  8447 00006676 01DF                <2> 	add edi, ebx
  8448 00006678 01CF                <2> 	add edi, ecx
  8449 0000667A 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8450 0000667D D1E1                <2> 	shl ecx, 1
  8451 0000667F 29CF                <2> 	sub edi, ecx
  8452 00006681 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8453 00006684 D1E3                <2> 	shl ebx, 1
  8454 00006686 29DF                <2> 	sub edi, ebx
  8455 00006688 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8456 0000668B 01CF                <2> 	add edi, ecx
  8457 0000668D 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8458 00006690 D1EB                <2> 	shr ebx, 1
  8459 00006692 D1E9                <2> 	shr ecx, 1
  8460 00006694 01DF                <2> 	add edi, ebx
  8461 00006696 29CF                <2> 	sub edi, ecx
  8462 00006698 39CA                <2> 	cmp edx, ecx
  8463 0000669A 0F8272FFFFFF        <2> 	jb .lpb
  8464                              <2> .done:
  8465 000066A0 5D                  <2> 	pop ebp
  8466 000066A1 C3                  <2> 	ret
  8467                              <2> 	
  8468 000066A2 00000000            <2> .ddF_x dd 0
  8469 000066A6 00000000            <2> .ddF_y dd 0
  8470                              <2> 
  8471                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  8472 000066AA 55                  <2> 	push ebp
  8473 000066AB 663D0000            <2> 	cmp ax, 0
  8474 000066AF 770A                <2> 	ja .nozerocircle
  8475 000066B1 E8E41A0000          <2> 	call putpixel	;the easiest circle ever
  8476 000066B6 E95A010000          <2> 	jmp .done
  8477                              <2> .nozerocircle:
  8478 000066BB 6689F5              <2> 	mov bp, si
  8479 000066BE 6650                <2> 	push ax
  8480 000066C0 E8161B0000          <2> 	call getpixelmem
  8481 000066C5 31C0                <2> 	xor eax, eax
  8482 000066C7 6658                <2> 	pop ax
  8483 000066C9 BE01000000          <2> 	mov esi, 1
  8484 000066CE 29C6                <2> 	sub esi, eax
  8485 000066D0 89C1                <2> 	mov ecx, eax
  8486 000066D2 31C0                <2> 	xor eax, eax
  8487 000066D4 66A1[64550000]      <2> 	mov ax, [resolutionx2]
  8488 000066DA F7E1                <2> 	mul ecx
  8489 000066DC 50                  <2> 	push eax
  8490 000066DD 31D2                <2> 	xor edx, edx
  8491 000066DF 01C7                <2> 	add edi, eax
  8492 000066E1 66892F              <2> 	mov [edi], bp
  8493 000066E4 29C7                <2> 	sub edi, eax
  8494 000066E6 29C7                <2> 	sub edi, eax
  8495 000066E8 66892F              <2> 	mov [edi], bp
  8496 000066EB 01C7                <2> 	add edi, eax
  8497 000066ED D1E1                <2> 	shl ecx, 1
  8498 000066EF 01CF                <2> 	add edi, ecx
  8499 000066F1 51                  <2> 	push ecx
  8500                              <2> .s0:
  8501 000066F2 66892F              <2> 	mov [edi], bp
  8502 000066F5 81EF02000000        <2> 	sub edi, 2
  8503 000066FB 49                  <2> 	dec ecx
  8504 000066FC 81F900000000        <2> 	cmp ecx, 0
  8505 00006702 75EE                <2> 	jne .s0
  8506 00006704 66892F              <2> 	mov [edi], bp
  8507 00006707 59                  <2> 	pop ecx
  8508 00006708 01CF                <2> 	add edi, ecx
  8509 0000670A D1E9                <2> 	shr ecx, 1
  8510 0000670C B802000000          <2> 	mov eax, 2
  8511 00006711 F7E1                <2> 	mul ecx
  8512 00006713 48                  <2> 	dec eax
  8513 00006714 F7D0                <2> 	not eax ;make it negative
  8514 00006716 A3[1B680000]        <2> 	mov [.ddF_y], eax
  8515 0000671B 58                  <2> 	pop eax
  8516 0000671C BB01000000          <2> 	mov ebx, 1
  8517 00006721 891D[17680000]      <2> 	mov [.ddF_x], ebx
  8518 00006727 4B                  <2> 	dec ebx
  8519 00006728 31D2                <2> 	xor edx, edx
  8520 0000672A E904000000          <2> 	jmp .lp
  8521                              <2> .lpb:
  8522 0000672F D1EA                <2> 	shr edx, 1
  8523 00006731 D1E9                <2> 	shr ecx, 1
  8524                              <2> .lp:	;it starts this with the center in edi
  8525                              <2> 		;color in bp
  8526                              <2> 		;ddF_x in memory
  8527                              <2> 		;x*resolutionx2 in ebx
  8528                              <2> 		;x in edx
  8529                              <2> 		;ddF_y in memory
  8530                              <2> 		;y*resolutionx2 in eax
  8531                              <2> 		;f in esi
  8532                              <2> 		;y in ecx
  8533 00006733 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8534 00006739 7717                <2> 	ja	.noddF_y
  8535 0000673B 49                  <2> 	dec ecx
  8536 0000673C 2B05[64550000]      <2> 	sub eax, [resolutionx2]
  8537 00006742 8105[1B680000]0200- <2> 	add dword [.ddF_y], 2
  8538 0000674A 0000                <2>
  8539 0000674C 0335[1B680000]      <2> 	add esi, [.ddF_y]
  8540                              <2> .noddF_y:
  8541 00006752 42                  <2> 	inc edx
  8542 00006753 031D[64550000]      <2> 	add ebx, [resolutionx2]
  8543 00006759 8105[17680000]0200- <2> 	add dword [.ddF_x], 2
  8544 00006761 0000                <2>
  8545 00006763 0335[17680000]      <2> 	add esi, [.ddF_x]
  8546                              <2> 
  8547 00006769 D1E2                <2> 	shl edx, 1
  8548 0000676B D1E1                <2> 	shl ecx, 1
  8549 0000676D 52                  <2> 	push edx
  8550 0000676E 29D7                <2> 	sub edi, edx
  8551 00006770 01C7                <2> 	add edi, eax
  8552 00006772 81FA00000000        <2> 	cmp edx, 0
  8553 00006778 7412                <2> 	je .nos1
  8554                              <2> .s1:
  8555 0000677A 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8556 0000677D 81C702000000        <2> 	add edi, 2
  8557 00006783 4A                  <2> 	dec edx
  8558 00006784 81FA00000000        <2> 	cmp edx, 0
  8559 0000678A 75EE                <2> 	jne .s1
  8560                              <2> .nos1:
  8561 0000678C 66892F              <2> 	mov [edi], bp
  8562 0000678F 5A                  <2> 	pop edx
  8563 00006790 52                  <2> 	push edx
  8564 00006791 29C7                <2> 	sub edi, eax
  8565 00006793 29C7                <2> 	sub edi, eax
  8566 00006795 81FA00000000        <2> 	cmp edx, 0
  8567 0000679B 7412                <2> 	je .nos2
  8568                              <2> .s2:
  8569 0000679D 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8570 000067A0 81EF02000000        <2> 	sub edi, 2
  8571 000067A6 4A                  <2> 	dec edx
  8572 000067A7 81FA00000000        <2> 	cmp edx, 0
  8573 000067AD 75EE                <2> 	jne .s2
  8574                              <2> .nos2:
  8575 000067AF 66892F              <2> 	mov [edi], bp
  8576 000067B2 5A                  <2> 	pop edx
  8577 000067B3 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  8578 000067B5 01D7                <2> 	add edi, edx
  8579                              <2> 
  8580 000067B7 39D1                <2> 	cmp ecx, edx
  8581 000067B9 0F8470FFFFFF        <2> 	je .lpb
  8582                              <2> 
  8583 000067BF 51                  <2> 	push ecx
  8584 000067C0 01DF                <2> 	add edi, ebx
  8585 000067C2 29CF                <2> 	sub edi, ecx
  8586 000067C4 81F900000000        <2> 	cmp ecx, 0
  8587 000067CA 7412                <2> 	je .nos3
  8588                              <2> .s3:
  8589 000067CC 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8590 000067CF 81C702000000        <2> 	add edi, 2
  8591 000067D5 49                  <2> 	dec ecx
  8592 000067D6 81F900000000        <2> 	cmp ecx, 0
  8593 000067DC 75EE                <2> 	jne .s3
  8594                              <2> .nos3:
  8595 000067DE 66892F              <2> 	mov [edi], bp
  8596 000067E1 59                  <2> 	pop ecx
  8597 000067E2 51                  <2> 	push ecx
  8598 000067E3 29DF                <2> 	sub edi, ebx
  8599 000067E5 29DF                <2> 	sub edi, ebx
  8600 000067E7 81F900000000        <2> 	cmp ecx, 0
  8601 000067ED 7412                <2> 	je .nos4
  8602                              <2> .s4:
  8603 000067EF 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8604 000067F2 81EF02000000        <2> 	sub edi, 2
  8605 000067F8 49                  <2> 	dec ecx
  8606 000067F9 81F900000000        <2> 	cmp ecx, 0
  8607 000067FF 75EE                <2> 	jne .s4
  8608                              <2> .nos4:
  8609 00006801 66892F              <2> 	mov [edi], bp
  8610 00006804 59                  <2> 	pop ecx
  8611 00006805 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  8612 00006807 01CF                <2> 	add edi, ecx
  8613                              <2> 
  8614 00006809 D1EA                <2> 	shr edx, 1
  8615 0000680B D1E9                <2> 	shr ecx, 1
  8616 0000680D 39CA                <2> 	cmp edx, ecx
  8617 0000680F 0F821EFFFFFF        <2> 	jb .lp
  8618                              <2> .done:
  8619 00006815 5D                  <2> 	pop ebp
  8620 00006816 C3                  <2> 	ret
  8621                              <2> 	
  8622 00006817 00000000            <2> .ddF_x dd 0
  8623 0000681B 00000000            <2> .ddF_y dd 0
  8624                              <1> %include "source/gui/cursor.asm"
  8625                              <2> clearmousecursor:
  8626 0000681F BE[876B0000]        <2> 		mov esi, background
  8627 00006824 8B3D[8C540000]      <2> 		mov edi, [physbaseptr]
  8628 0000682A 31D2                <2> 		xor edx, edx
  8629 0000682C 31C9                <2> 		xor ecx, ecx
  8630 0000682E 668B15[56570000]    <2> 		mov dx, [lastmouseposition]
  8631 00006835 668B0D[58570000]    <2> 		mov cx, [lastmouseposition + 2]
  8632 0000683C 01D7                <2> 		add edi, edx
  8633 0000683E 31D2                <2> 		xor edx, edx
  8634 00006840 668B15[64550000]    <2> 		mov dx, [resolutionx2]
  8635 00006847 81F900000000        <2> 		cmp ecx, 0
  8636 0000684D 7408                <2> 		je .nomul
  8637 0000684F 52                  <2> 		push edx
  8638 00006850 89D0                <2> 		mov eax, edx
  8639 00006852 F7E1                <2> 		mul ecx
  8640 00006854 01C7                <2> 		add edi, eax
  8641 00006856 5A                  <2> 		pop edx
  8642                              <2> .nomul:
  8643                              <2> %ifdef 	gui.background
  8644                              <2> 		cmp dword [backgroundimage], 0
  8645                              <2> 		je .noyclr
  8646                              <2> 		mov esi, [backgroundimage]
  8647                              <2> 		sub edi, [physbaseptr]
  8648                              <2> 		add esi, edi
  8649                              <2> 		add edi, [physbaseptr]
  8650                              <2> .backlp:
  8651                              <2> 		xor ebx, ebx
  8652                              <2> .noyback:
  8653                              <2> 		mov eax, [esi + ebx]
  8654                              <2> 		mov [edi + ebx], eax
  8655                              <2> 		add ebx, 4
  8656                              <2> 		cmp ebx, 16
  8657                              <2> 		jne .noyback
  8658                              <2> 		add edi, edx
  8659                              <2> 		add esi, edx
  8660                              <2> 		inc cx
  8661                              <2> 		cmp cx, 16
  8662                              <2> 		jb .backlp
  8663                              <2> 		ret
  8664                              <2> %endif
  8665                              <2> .noyclr:
  8666 00006857 668B06              <2> 		mov ax, [esi]
  8667 0000685A C1C010              <2> 		rol eax, 16
  8668 0000685D 668B06              <2> 		mov ax, [esi]
  8669 00006860 8907                <2> 		mov [edi], eax
  8670 00006862 894704              <2> 		mov [edi + 4], eax
  8671 00006865 894708              <2> 		mov [edi + 8], eax
  8672 00006868 89470C              <2> 		mov [edi + 12], eax
  8673 0000686B 01D7                <2> 		add edi, edx
  8674 0000686D 6641                <2> 		inc cx
  8675 0000686F 6681F91000          <2> 		cmp cx, 16
  8676 00006874 72E1                <2> 		jb .noyclr
  8677 00006876 C3                  <2> 		ret
  8678                              <2> 
  8679                              <2> switchmousepos:		;;switch were the mouse is located
  8680 00006877 BE[75B70300]        <2> 		mov esi, mousecolorbuf
  8681 0000687C 8B3D[8C540000]      <2> 		mov edi, [physbaseptr]
  8682 00006882 31D2                <2> 		xor edx, edx
  8683 00006884 31C9                <2> 		xor ecx, ecx
  8684 00006886 668B15[56570000]    <2> 		mov dx, [lastmouseposition]
  8685 0000688D 668B0D[58570000]    <2> 		mov cx, [lastmouseposition + 2]
  8686 00006894 01D7                <2> 		add edi, edx
  8687 00006896 31D2                <2> 		xor edx, edx
  8688 00006898 668B15[64550000]    <2> 		mov dx, [resolutionx2]
  8689 0000689F 6681F90000          <2> 		cmp cx, 0
  8690 000068A4 740B                <2> 		je noswmsy
  8691 000068A6 01D7                <2> swmsy:		add edi, edx
  8692 000068A8 6649                <2> 		dec cx
  8693 000068AA 6681F90000          <2> 		cmp cx, 0
  8694 000068AF 75F5                <2> 		jne swmsy
  8695 000068B1 8B06                <2> noswmsy:	mov eax, [esi]
  8696 000068B3 8B5E04              <2> 		mov ebx, [esi + 4]
  8697 000068B6 8907                <2> 		mov [edi], eax
  8698 000068B8 895F04              <2> 		mov [edi + 4], ebx
  8699 000068BB 8B4608              <2> 		mov eax, [esi + 8]
  8700 000068BE 8B5E0C              <2> 		mov ebx, [esi + 12]
  8701 000068C1 894708              <2> 		mov [edi + 8], eax
  8702 000068C4 895F0C              <2> 		mov [edi + 12], ebx
  8703 000068C7 01D7                <2> 		add edi, edx
  8704 000068C9 81C610000000        <2> 		add esi, 16
  8705 000068CF 81FE[75B80300]      <2> 		cmp esi, mcolorend
  8706 000068D5 72DA                <2> 		jb noswmsy
  8707                              <2> 		
  8708                              <2> switchmousepos2:
  8709 000068D7 BE[75B70300]        <2> 		mov esi, mousecolorbuf
  8710 000068DC 8B3D[8C540000]      <2> 		mov edi, [physbaseptr]
  8711 000068E2 31D2                <2> 		xor edx, edx
  8712 000068E4 31C9                <2> 		xor ecx, ecx
  8713 000068E6 668B15[5A570000]    <2> 		mov dx, [mousecursorposition]
  8714 000068ED 668B0D[5C570000]    <2> 		mov cx, [mousecursorposition + 2]
  8715 000068F4 01D7                <2> 		add edi, edx
  8716 000068F6 31D2                <2> 		xor edx, edx
  8717 000068F8 668B15[64550000]    <2> 		mov dx, [resolutionx2]
  8718 000068FF 6681F90000          <2> 		cmp cx, 0
  8719 00006904 740B                <2> 		je noswmsy2
  8720 00006906 01D7                <2> swmsy2:		add edi, edx
  8721 00006908 6649                <2> 		dec cx
  8722 0000690A 6681F90000          <2> 		cmp cx, 0
  8723 0000690F 75F5                <2> 		jne swmsy2
  8724 00006911 8B07                <2> noswmsy2:	mov eax, [edi]
  8725 00006913 8B5F04              <2> 		mov ebx, [edi + 4]
  8726 00006916 8906                <2> 		mov [esi], eax
  8727 00006918 895E04              <2> 		mov [esi + 4], ebx
  8728 0000691B 8B4708              <2> 		mov eax, [edi + 8]
  8729 0000691E 8B5F0C              <2> 		mov ebx, [edi + 12]
  8730 00006921 894608              <2> 		mov [esi + 8], eax
  8731 00006924 895E0C              <2> 		mov [esi + 12], ebx
  8732 00006927 01D7                <2> 		add edi, edx
  8733 00006929 81C610000000        <2> 		add esi, 16
  8734 0000692F 81FE[75B80300]      <2> 		cmp esi, mcolorend
  8735 00006935 72DA                <2> 		jb noswmsy2
  8736 00006937 C3                  <2> 		ret
  8737                              <2> 		
  8738                              <1> %include "source/gui/icon.asm"
  8739 00006938 0000                <2> iconcolor dw 0
  8740                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8741 0000693A A2[03820000]        <2> 		mov [iconselected], al
  8742 0000693F 8025[03820000]01    <2> 		and byte [iconselected], 1
  8743 00006946 B401                <2> 		mov ah, 1
  8744 00006948 E8DF150000          <2> 		call graphicsadd
  8745                              <2> 	showicon2:
  8746 0000694D 8B3D[8C540000]      <2> 		mov edi, [physbaseptr]
  8747 00006953 6601D2              <2> 		add dx, dx
  8748 00006956 663B15[64550000]    <2> 		cmp dx, [resolutionx2]
  8749 0000695D 720C                <2> 		jb screenxgood
  8750 0000695F 668B15[64550000]    <2> 		mov dx, [resolutionx2]
  8751 00006966 6681EA4000          <2> 		sub dx, 64
  8752                              <2> 	screenxgood:
  8753 0000696B 6681F90000          <2> 		cmp cx, 0
  8754 00006970 742B                <2> 		je noscreenygoodchk
  8755 00006972 663B0D[78540000]    <2> 		cmp cx, [resolutiony]
  8756 00006979 720C                <2> 		jb screenygood
  8757 0000697B 668B0D[78540000]    <2> 		mov cx, [resolutiony]
  8758 00006982 6681E92000          <2> 		sub cx, 32
  8759                              <2> 	screenygood:
  8760 00006987 50                  <2> 		push eax
  8761 00006988 52                  <2> 		push edx
  8762 00006989 31C0                <2> 		xor eax, eax
  8763 0000698B 31DB                <2> 		xor ebx, ebx
  8764 0000698D 668B1D[64550000]    <2> 		mov bx, [resolutionx2]
  8765 00006994 6689C8              <2> 		mov ax, cx
  8766 00006997 F7E3                <2> 		mul ebx
  8767 00006999 01C7                <2> 		add edi, eax
  8768 0000699B 5A                  <2> 		pop edx
  8769 0000699C 58                  <2> 		pop eax
  8770                              <2> 	noscreenygoodchk:
  8771 0000699D 31DB                <2> 		xor ebx, ebx
  8772 0000699F 6689D3              <2> 		mov bx, dx
  8773 000069A2 01DF                <2> 		add edi, ebx
  8774 000069A4 6631C9              <2> 		xor cx, cx
  8775 000069A7 668B06              <2> 		mov ax, [esi]
  8776 000069AA 81C602000000        <2> 		add esi, 2
  8777 000069B0 66A3[38690000]      <2> 		mov [iconcolor], ax
  8778                              <2> 	writeicon:
  8779 000069B6 8B06                <2> 		mov eax, [esi]
  8780 000069B8 D1C0                <2> 		rol eax, 1
  8781 000069BA 30C9                <2> 		xor cl, cl
  8782                              <2> 	writeiconline:
  8783 000069BC B201                <2> 		mov dl, 1
  8784 000069BE 20C2                <2> 		and dl, al
  8785 000069C0 3215[03820000]      <2> 		xor dl, [iconselected]
  8786 000069C6 668B1D[876B0000]    <2> 		mov bx, [background]
  8787 000069CD 66891F              <2> 		mov [edi], bx
  8788 000069D0 80FA00              <2> 		cmp dl, 0
  8789 000069D3 740A                <2> 		je noiconline
  8790 000069D5 668B15[38690000]    <2> 		mov dx, [iconcolor]
  8791 000069DC 668917              <2> 		mov [edi], dx
  8792                              <2> 	noiconline:
  8793 000069DF 81C702000000        <2> 		add edi, 2
  8794 000069E5 D1C0                <2> 		rol eax, 1
  8795 000069E7 FEC1                <2> 		inc cl
  8796 000069E9 80F920              <2> 		cmp cl, 32
  8797 000069EC 72CE                <2> 		jb writeiconline
  8798 000069EE 81C604000000        <2> 		add esi, 4
  8799 000069F4 FEC5                <2> 		inc ch
  8800 000069F6 31D2                <2> 		xor edx, edx
  8801 000069F8 668B15[64550000]    <2> 		mov dx, [resolutionx2]
  8802 000069FF 01D7                <2> 		add edi, edx
  8803 00006A01 81EF40000000        <2> 		sub edi, 64
  8804 00006A07 80FD20              <2> 		cmp ch, 32
  8805 00006A0A 72AA                <2> 		jb writeicon
  8806 00006A0C 31C0                <2> 		xor eax, eax
  8807 00006A0E C3                  <2> 		ret
  8808                              <1> %include "source/gui/line.asm"
  8809                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  8810 00006A0F 668935[316B0000]    <2> 	mov [.color], si
  8811 00006A16 C605[336B0000]00    <2> 	mov byte [.steep], 0
  8812 00006A1D C605[346B0000]00    <2> 	mov byte [.yreversed], 0
  8813 00006A24 E907000000          <2> 	jmp .notsteep
  8814                              <2> .steeploop:
  8815 00006A29 C605[336B0000]01    <2> 	mov byte [.steep], 1
  8816                              <2> .notsteep:
  8817 00006A30 31FF                <2> 	xor edi, edi
  8818 00006A32 31F6                <2> 	xor esi, esi
  8819 00006A34 6639DA              <2> 	cmp dx, bx
  8820 00006A37 7705                <2> 	ja .noreversex
  8821 00006A39 6687D3              <2> 	xchg dx, bx
  8822 00006A3C 6691                <2> 	xchg cx, ax
  8823                              <2> .noreversex:
  8824 00006A3E 6689D7              <2> 	mov di, dx
  8825 00006A41 6629DF              <2> 	sub di, bx
  8826                              <2> 	
  8827 00006A44 6639C1              <2> 	cmp cx, ax
  8828 00006A47 720B                <2> 	jb .reversey
  8829 00006A49 6689CE              <2> 	mov si, cx
  8830 00006A4C 6629C6              <2> 	sub si, ax
  8831 00006A4F E90D000000          <2> 	jmp .normal
  8832                              <2> .reversey:
  8833 00006A54 C605[346B0000]02    <2> 	mov byte [.yreversed], 2
  8834 00006A5B 6689C6              <2> 	mov si, ax
  8835 00006A5E 6629CE              <2> 	sub si, cx	
  8836                              <2> .normal:
  8837 00006A61 6687CA              <2> 	xchg cx, dx
  8838 00006A64 6693                <2> 	xchg ax, bx
  8839 00006A66 6639FE              <2> 	cmp si, di
  8840 00006A69 77BE                <2> 	ja .steeploop
  8841 00006A6B 6687CA              <2> 	xchg cx, dx
  8842 00006A6E 6693                <2> 	xchg ax, bx
  8843                              <2> 	
  8844 00006A70 6691                <2> 	xchg ax, cx
  8845 00006A72 6687DA              <2> 	xchg bx, dx
  8846 00006A75 66893D[376B0000]    <2> 	mov [.xdelta], di
  8847 00006A7C 668935[396B0000]    <2> 	mov [.ydelta], si
  8848 00006A83 668B35[316B0000]    <2> 	mov si, [.color]
  8849 00006A8A 66891D[356B0000]    <2> 	mov [.endline], bx
  8850 00006A91 6652                <2> 	push dx
  8851 00006A93 6651                <2> 	push cx
  8852 00006A95 6687CA              <2> 	xchg cx, dx
  8853 00006A98 803D[336B0000]01    <2> 	cmp byte [.steep], 1
  8854 00006A9F 7403                <2> 	je .xchg
  8855 00006AA1 6687D1              <2> 	xchg dx, cx
  8856                              <2> .xchg:
  8857 00006AA4 E832170000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  8858 00006AA9 6659                <2> 	pop cx
  8859 00006AAB 665A                <2> 	pop dx
  8860 00006AAD 31C0                <2> 	xor eax, eax
  8861 00006AAF 66A1[376B0000]      <2> 	mov ax, [.xdelta]
  8862 00006AB5 66D1E8              <2> 	shr ax, 1
  8863 00006AB8 8A0D[336B0000]      <2> 	mov cl, [.steep]
  8864 00006ABE 0A0D[346B0000]      <2> 	or cl, [.yreversed]
  8865 00006AC4 55                  <2> 	push ebp
  8866 00006AC5 668B2D[356B0000]    <2> 	mov bp, [.endline]
  8867 00006ACC 6629D5              <2> 	sub bp, dx
  8868 00006ACF 668B15[396B0000]    <2> 	mov dx, [.ydelta]
  8869                              <2> .lp:
  8870 00006AD6 668937              <2> 	mov [edi], si
  8871 00006AD9 6639D0              <2> 	cmp ax, dx
  8872 00006ADC 7332                <2> 	jae .noaddx
  8873 00006ADE F6C102              <2> 	test cl, 2
  8874 00006AE1 7414                <2> 	jz .nodecy
  8875 00006AE3 F6C101              <2> 	test cl, 1
  8876 00006AE6 7509                <2> 	jnz .steepy
  8877 00006AE8 29DF                <2> 	sub edi, ebx
  8878 00006AEA 29DF                <2> 	sub edi, ebx
  8879 00006AEC E906000000          <2> 	jmp .nodecy
  8880                              <2> .steepy:
  8881 00006AF1 81EF04000000        <2> 	sub edi, 4
  8882                              <2> .nodecy:
  8883 00006AF7 660305[376B0000]    <2> 	add ax, [.xdelta]
  8884 00006AFE F6C101              <2> 	test cl, 1
  8885 00006B01 7507                <2> 	jnz .steepx
  8886 00006B03 01DF                <2> 	add edi, ebx
  8887 00006B05 E906000000          <2> 	jmp .noaddx
  8888                              <2> .steepx:
  8889 00006B0A 81C702000000        <2> 	add edi, 2
  8890                              <2> .noaddx:
  8891 00006B10 6629D0              <2> 	sub ax, dx
  8892 00006B13 664D                <2> 	dec bp
  8893 00006B15 81C702000000        <2> 	add edi, 2
  8894 00006B1B F6C101              <2> 	test cl, 1
  8895 00006B1E 7408                <2> 	jz .nosteepx
  8896 00006B20 81EF02000000        <2> 	sub edi, 2
  8897 00006B26 01DF                <2> 	add edi, ebx
  8898                              <2> .nosteepx:
  8899 00006B28 6681FD0000          <2> 	cmp bp, 0
  8900 00006B2D 75A7                <2> 	jne .lp
  8901                              <2> .done:
  8902 00006B2F 5D                  <2> 	pop ebp
  8903 00006B30 C3                  <2> 	ret
  8904                              <2> 	
  8905 00006B31 0000                <2> .color dw 0
  8906 00006B33 00                  <2> .steep db 0
  8907 00006B34 00                  <2> .yreversed db 0
  8908 00006B35 0000                <2> .endline dw 0
  8909 00006B37 0000                <2> .xdelta dw 0
  8910 00006B39 0000                <2> .ydelta dw 0
  8911                              <1> %include "source/gui/refresh.asm"
  8912                              <2> guiclear:
  8913 00006B3B 8B3D[8C540000]      <2> 	mov edi, [physbaseptr]
  8914 00006B41 668B15[76540000]    <2> 	mov dx, [resolutionx]
  8915 00006B48 668B0D[78540000]    <2> 	mov cx, [resolutiony]
  8916 00006B4F 668B1D[876B0000]    <2> 	mov bx, [background]
  8917 00006B56 66891D[896B0000]    <2> 	mov [background + 2], bx
  8918                              <2> %ifdef gui.background
  8919                              <2> 	cmp dword [backgroundimage], 0
  8920                              <2> 	je guiclear.noback
  8921                              <2> 		mov esi, [backgroundimage]
  8922                              <2> 	.lp:
  8923                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  8924                              <2> 		;movdqa [edi], xmm0
  8925                              <2> 		;add esi, 16
  8926                              <2> 		;add edi, 16
  8927                              <2> 		;sub dx, 8
  8928                              <2> 		mov eax, [esi]
  8929                              <2> 		mov [edi], eax
  8930                              <2> 		add esi, 4
  8931                              <2> 		add edi, 4
  8932                              <2> 		sub dx, 2
  8933                              <2> 		cmp dx, 0
  8934                              <2> 		ja .lp
  8935                              <2> 		dec cx
  8936                              <2> 		mov dx, [resolutionx]
  8937                              <2> 		cmp cx, 0
  8938                              <2> 		ja .lp
  8939                              <2> 		ret
  8940                              <2> 	backgroundimage dd 0
  8941                              <2> %endif
  8942                              <2> guiclear.noback:
  8943 00006B5D A1[876B0000]        <2> 	mov eax, [background]
  8944                              <2> guiclearloop:
  8945 00006B62 8907                <2> 	mov [edi], eax
  8946 00006B64 81C704000000        <2> 	add edi, 4
  8947 00006B6A 6681EA0200          <2> 	sub dx, 2
  8948 00006B6F 6681FA0000          <2> 	cmp dx, 0
  8949 00006B74 77EC                <2> 	ja guiclearloop
  8950 00006B76 6649                <2> 	dec cx
  8951 00006B78 668B15[76540000]    <2> 	mov dx, [resolutionx]
  8952 00006B7F 6681F90000          <2> 	cmp cx, 0
  8953 00006B84 77DC                <2> 	ja guiclearloop
  8954 00006B86 C3                  <2> 	ret
  8955                              <2> 
  8956 00006B87 CF7B<rept>          <2> background times 2 dw 0111101111001111b
  8957                              <2> 	.original equ 0111101111001111b
  8958                              <2> 
  8959                              <2> reloadallgraphics:
  8960 00006B8B BF[75B50300]        <2> 		mov edi, graphicstable
  8961                              <2> reloadgraphicsloop:
  8962 00006B90 8B7702              <2> 		mov esi, [edi + 2]
  8963 00006B93 668B5706            <2> 		mov dx, [edi + 6]
  8964 00006B97 668B4F08            <2> 		mov cx, [edi + 8]
  8965 00006B9B 668B07              <2> 		mov ax, [edi]
  8966 00006B9E 668B5F0A            <2> 		mov bx, [edi + 10]
  8967 00006BA2 893D[187F0000]      <2> 		mov [grpctblpos], edi
  8968 00006BA8 3B3D[AF790000]      <2> 		cmp edi, [dragging]
  8969 00006BAE 741E                <2> 		je loadedgraphic
  8970 00006BB0 663D0100            <2> 		cmp ax, 1
  8971 00006BB4 0F8436000000        <2> 		je near icongraphic
  8972 00006BBA 663D0200            <2> 		cmp ax, 2
  8973 00006BBE 0F843C000000        <2> 		je near stringgraphic
  8974 00006BC4 663D0300            <2> 		cmp ax, 3
  8975 00006BC8 0F8416000000        <2> 		je near windowgraphic
  8976 00006BCE 8B3D[187F0000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  8977 00006BD4 81C710000000        <2> 		add edi, 16
  8978 00006BDA 81FF[75B70300]      <2> 		cmp edi, graphicstableend
  8979 00006BE0 732E                <2> 		jae donereloadgraphics
  8980 00006BE2 EBAC                <2> 		jmp reloadgraphicsloop
  8981                              <2> windowgraphic:
  8982 00006BE4 E827090000          <2> 		call showwindow2
  8983 00006BE9 E821B2FFFF          <2> 		call cleardouble
  8984 00006BEE EBDE                <2> 		jmp loadedgraphic
  8985 00006BF0 80E301              <2> icongraphic:	and bl, 1
  8986 00006BF3 881D[03820000]      <2> 		mov [iconselected], bl
  8987 00006BF9 E84FFDFFFF          <2> 		call showicon2
  8988 00006BFE EBCE                <2> 		jmp loadedgraphic
  8989 00006C00 80E301              <2> stringgraphic:  and bl, 1
  8990 00006C03 881D[AB790000]      <2> 		mov [mouseselecton], bl
  8991 00006C09 E8CE050000          <2> 		call showstring2
  8992 00006C0E EBBE                <2> 		jmp loadedgraphic
  8993                              <2> donereloadgraphics:
  8994 00006C10 8B3D[AF790000]      <2> 		mov edi, [dragging]
  8995 00006C16 81FF[75B50300]      <2> 		cmp edi, graphicstable
  8996 00006C1C 7226                <2> 		jb notcorrectdrag
  8997 00006C1E 668B07              <2> 		mov ax, [edi]
  8998 00006C21 8B7702              <2> 		mov esi, [edi + 2]
  8999 00006C24 668B5706            <2> 		mov dx, [edi + 6]
  9000 00006C28 668B4F08            <2> 		mov cx, [edi + 8]
  9001 00006C2C 668B5F0A            <2> 		mov bx, [edi + 10]
  9002 00006C30 663D0100            <2> 		cmp ax, 1
  9003 00006C34 750F                <2> 		jne noticondragging
  9004 00006C36 80E301              <2> 		and bl, 1
  9005 00006C39 881D[03820000]      <2> 		mov [iconselected], bl
  9006 00006C3F E809FDFFFF          <2> 		call showicon2
  9007                              <2> notcorrectdrag:
  9008 00006C44 C3                  <2> 		ret
  9009                              <2> 
  9010                              <2> 	noticondragging:
  9011 00006C45 663D0200            <2> 		cmp ax, 2
  9012 00006C49 75F9                <2> 		jne notcorrectdrag
  9013 00006C4B 80E301              <2> 		and bl, 1
  9014 00006C4E 881D[AB790000]      <2> 		mov [mouseselecton], bl
  9015 00006C54 E883050000          <2> 		call showstring2
  9016 00006C59 EBE9                <2> 		jmp notcorrectdrag
  9017                              <1> %include "source/gui/square.asm"
  9018                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  9019 00006C5B 6639D3              <2> 	cmp bx, dx
  9020 00006C5E 7303                <2> 	jae .noxchgx
  9021 00006C60 6687DA              <2> 	xchg bx, dx
  9022                              <2> .noxchgx:
  9023 00006C63 6639C8              <2> 	cmp ax, cx
  9024 00006C66 7302                <2> 	jae .noxchgy
  9025 00006C68 6691                <2> 	xchg ax, cx
  9026                              <2> .noxchgy:
  9027 00006C6A 6650                <2> 	push ax
  9028 00006C6C 6653                <2> 	push bx
  9029 00006C6E 6652                <2> 	push dx
  9030 00006C70 E866150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9031 00006C75 31D2                <2> 	xor edx, edx
  9032 00006C77 665A                <2> 	pop dx
  9033 00006C79 31DB                <2> 	xor ebx, ebx
  9034 00006C7B 665B                <2> 	pop bx
  9035 00006C7D 6658                <2> 	pop ax
  9036                              <2> .lp0:
  9037 00006C7F 6652                <2> 	push dx
  9038                              <2> .lp:
  9039 00006C81 668937              <2> 	mov [edi], si
  9040 00006C84 81C702000000        <2> 	add edi, 2
  9041 00006C8A 6642                <2> 	inc dx
  9042 00006C8C 6639DA              <2> 	cmp dx, bx
  9043 00006C8F 76F0                <2> 	jbe .lp
  9044 00006C91 665A                <2> 	pop dx
  9045 00006C93 81EF02000000        <2> 	sub edi, 2
  9046 00006C99 29DF                <2> 	sub edi, ebx
  9047 00006C9B 29DF                <2> 	sub edi, ebx
  9048 00006C9D 01D7                <2> 	add edi, edx
  9049 00006C9F 01D7                <2> 	add edi, edx
  9050 00006CA1 033D[64550000]      <2> 	add edi, [resolutionx2]
  9051 00006CA7 6641                <2> 	inc cx
  9052 00006CA9 6639C1              <2> 	cmp cx, ax
  9053 00006CAC 7203                <2> 	jb .lp2
  9054 00006CAE 74CF                <2> 	je .lp0
  9055 00006CB0 C3                  <2> 	ret
  9056                              <2> .lp2:
  9057 00006CB1 57                  <2> 	push edi
  9058 00006CB2 668937              <2> 	mov [edi], si
  9059 00006CB5 29D7                <2> 	sub edi, edx
  9060 00006CB7 29D7                <2> 	sub edi, edx
  9061 00006CB9 01DF                <2> 	add edi, ebx
  9062 00006CBB 01DF                <2> 	add edi, ebx
  9063 00006CBD 668937              <2> 	mov [edi], si
  9064 00006CC0 5F                  <2> 	pop edi
  9065 00006CC1 033D[64550000]      <2> 	add edi, [resolutionx2]
  9066 00006CC7 6641                <2> 	inc cx
  9067 00006CC9 6639C1              <2> 	cmp cx, ax
  9068 00006CCC 72E3                <2> 	jb .lp2
  9069 00006CCE EBAF                <2> 	jmp .lp0
  9070                              <2> 
  9071                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  9072 00006CD0 6639D3              <2> 	cmp bx, dx
  9073 00006CD3 7303                <2> 	jae .noxchgx
  9074 00006CD5 6687DA              <2> 	xchg bx, dx
  9075                              <2> .noxchgx:
  9076 00006CD8 6639C8              <2> 	cmp ax, cx
  9077 00006CDB 7302                <2> 	jae .noxchgy
  9078 00006CDD 6691                <2> 	xchg ax, cx
  9079                              <2> .noxchgy:
  9080 00006CDF 6650                <2> 	push ax
  9081 00006CE1 6653                <2> 	push bx
  9082 00006CE3 6652                <2> 	push dx
  9083 00006CE5 E8F1140000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9084 00006CEA 31D2                <2> 	xor edx, edx
  9085 00006CEC 665A                <2> 	pop dx
  9086 00006CEE 31DB                <2> 	xor ebx, ebx
  9087 00006CF0 665B                <2> 	pop bx
  9088 00006CF2 6658                <2> 	pop ax
  9089                              <2> .lp2:
  9090 00006CF4 6652                <2> 	push dx
  9091                              <2> .lp:
  9092 00006CF6 668937              <2> 	mov [edi], si
  9093 00006CF9 81C702000000        <2> 	add edi, 2
  9094 00006CFF 6642                <2> 	inc dx
  9095 00006D01 6639DA              <2> 	cmp dx, bx
  9096 00006D04 76F0                <2> 	jbe .lp
  9097 00006D06 665A                <2> 	pop dx
  9098 00006D08 81EF02000000        <2> 	sub edi, 2
  9099 00006D0E 29DF                <2> 	sub edi, ebx
  9100 00006D10 29DF                <2> 	sub edi, ebx
  9101 00006D12 01D7                <2> 	add edi, edx
  9102 00006D14 01D7                <2> 	add edi, edx
  9103 00006D16 033D[64550000]      <2> 	add edi, [resolutionx2]
  9104 00006D1C 6641                <2> 	inc cx
  9105 00006D1E 6639C1              <2> 	cmp cx, ax
  9106 00006D21 76D1                <2> 	jbe .lp2
  9107 00006D23 C3                  <2> 	ret
  9108                              <1> %include "source/gui/startup.asm"
  9109                              <2> guisetup:
  9110                              <2> 	%ifdef gui.background
  9111                              <2> 	xor ebx, ebx
  9112                              <2> 	mov [backgroundimage], ebx
  9113                              <2> 	%endif
  9114 00006D24 E812FEFFFF          <2> 	call guiclear
  9115 00006D29 C605[6A820000]01    <2> 	mov byte [guion], 1
  9116 00006D30 C605[AB790000]00    <2> 	mov byte [mouseselecton], 0
  9117 00006D37 31C0                <2> 	xor eax, eax
  9118 00006D39 31DB                <2> 	xor ebx, ebx
  9119 00006D3B 31C9                <2> 	xor ecx, ecx
  9120 00006D3D 31D2                <2> 	xor edx, edx
  9121                              <2> 	
  9122 00006D3F BE[016F0000]        <2> 	mov esi, pacmsg
  9123 00006D44 30E4                <2> 	xor ah, ah
  9124 00006D46 B010                <2> 	mov al, 00010000b
  9125 00006D48 31DB                <2> 	xor ebx, ebx
  9126 00006D4A 66B99000            <2> 	mov cx, 144
  9127 00006D4E 66BA0400            <2> 	mov dx, 4
  9128 00006D52 E872040000          <2> 	call showstring
  9129                              <2> 	
  9130 00006D57 BE[3F6F0000]        <2> 	mov esi, interneticon
  9131 00006D5C 30E4                <2> 	xor ah, ah
  9132 00006D5E B010                <2> 	mov al, 00010000b
  9133 00006D60 BB[2A6E0000]        <2> 	mov ebx, noie
  9134 00006D65 66B91800            <2> 	mov cx, 24
  9135 00006D69 66BA0400            <2> 	mov dx, 4
  9136 00006D6D E8C8FBFFFF          <2> 	call showicon
  9137                              <2> 	
  9138 00006D72 BE[C16F0000]        <2> 	mov esi, wordicon
  9139 00006D77 30E4                <2> 	xor ah, ah
  9140 00006D79 B010                <2> 	mov al, 00010000b
  9141 00006D7B 31DB                <2> 	xor ebx, ebx
  9142 00006D7D 66B91800            <2> 	mov cx, 24
  9143 00006D81 66BA3000            <2> 	mov dx, 48
  9144 00006D85 E8B0FBFFFF          <2> 	call showicon
  9145                              <2> 	
  9146 00006D8A BE[43700000]        <2> 	mov esi, pacmanpellet
  9147 00006D8F 30E4                <2> 	xor ah, ah
  9148 00006D91 B010                <2> 	mov al, 00010000b
  9149 00006D93 31DB                <2> 	xor ebx, ebx
  9150 00006D95 66B94000            <2> 	mov cx, 64
  9151 00006D99 66BA0400            <2> 	mov dx, 4
  9152 00006D9D E898FBFFFF          <2> 	call showicon
  9153                              <2> 	
  9154 00006DA2 BE[47710000]        <2> 	mov esi, pacman
  9155 00006DA7 30E4                <2> 	xor ah, ah
  9156 00006DA9 B010                <2> 	mov al, 00010000b
  9157 00006DAB BB[136E0000]        <2> 	mov ebx, pacmannomnom
  9158 00006DB0 66B94000            <2> 	mov cx, 64
  9159 00006DB4 66BA3000            <2> 	mov dx, 48
  9160 00006DB8 E87DFBFFFF          <2> 	call showicon
  9161                              <2> 	
  9162 00006DBD BE[C5700000]        <2> 	mov esi, ghostie
  9163 00006DC2 30E4                <2> 	xor ah, ah
  9164 00006DC4 B010                <2> 	mov al, 00010000b
  9165 00006DC6 BB[FC6D0000]        <2> 	mov ebx, boo
  9166 00006DCB 66B96C00            <2> 	mov cx, 108
  9167 00006DCF 66BA0400            <2> 	mov dx, 4
  9168 00006DD3 E862FBFFFF          <2> 	call showicon
  9169                              <2> 	
  9170 00006DD8 BE[E36E0000]        <2> 	mov esi, start
  9171 00006DDD 668B0D[78540000]    <2> 	mov cx, [resolutiony]
  9172 00006DE4 6681E91000          <2> 	sub cx, 16
  9173 00006DE9 66BA0200            <2> 	mov dx, 2
  9174 00006DED 30E4                <2> 	xor ah, ah
  9175 00006DEF B010                <2> 	mov al, 00010000b
  9176 00006DF1 BB[9F6E0000]        <2> 	mov ebx, winblows
  9177 00006DF6 E8CE030000          <2> 	call showstring
  9178                              <2> 
  9179                              <2> %ifdef gui.time	
  9180                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9181                              <2> %endif
  9182 00006DFB C3                  <2> 	ret
  9183                              <2> 
  9184                              <2> 	boo:
  9185 00006DFC BE[FC6E0000]        <2> 		mov esi, boomsg
  9186 00006E01 66BA6400            <2> 		mov dx, 100
  9187 00006E05 66B94001            <2> 		mov cx, 320
  9188 00006E09 31DB                <2> 		xor ebx, ebx
  9189 00006E0B 6631C0              <2> 		xor ax, ax
  9190 00006E0E E9B6030000          <2> 		jmp showstring
  9191                              <2> 
  9192                              <2> 	pacmannomnom:
  9193 00006E13 BE[1A6F0000]        <2> 		mov esi, pacnom
  9194 00006E18 66BA8200            <2> 		mov dx, 130
  9195 00006E1C 66B93C00            <2> 		mov cx, 60
  9196 00006E20 31DB                <2> 		xor ebx, ebx
  9197 00006E22 6631C0              <2> 		xor ax, ax
  9198 00006E25 E99F030000          <2> 		jmp showstring	
  9199                              <2> 	
  9200                              <2> 	noie:
  9201 00006E2A 66C705[296F0000]80- <2> 		mov word [termwindow], 640
  9202 00006E32 02                  <2>
  9203 00006E33 66C705[2B6F0000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9204 00006E3B 01                  <2>
  9205 00006E3C BE[296F0000]        <2> 		mov esi, termwindow
  9206 00006E41 66BA1000            <2> 		mov dx, 16
  9207 00006E45 66B91000            <2> 		mov cx, 16
  9208 00006E49 31DB                <2> 		xor ebx, ebx
  9209 00006E4B 6631C0              <2> 		xor ax, ax
  9210 00006E4E E803060000          <2> 		call showwindow
  9211 00006E53 E996BCFFFF          <2> 		jmp os
  9212                              <2> 
  9213                              <2> 	gotomenuboot:
  9214 00006E58 31D2                <2> 		xor edx, edx
  9215 00006E5A 31C9                <2> 		xor ecx, ecx
  9216 00006E5C 668B15[76540000]    <2> 		mov dx, [resolutionx]
  9217 00006E63 668B0D[78540000]    <2> 		mov cx, [resolutiony]
  9218 00006E6A 66C1E904            <2> 		shr cx, 4
  9219 00006E6E 6681E90100          <2> 		sub cx, 1
  9220 00006E73 66C1E104            <2> 		shl cx, 4
  9221 00006E77 668915[296F0000]    <2> 		mov [termwindow], dx
  9222 00006E7E 66890D[2B6F0000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9223 00006E85 BE[296F0000]        <2> 		mov esi, termwindow
  9224 00006E8A 6631D2              <2> 		xor dx, dx
  9225 00006E8D 6631C9              <2> 		xor cx, cx
  9226 00006E90 31DB                <2> 		xor ebx, ebx
  9227 00006E92 6631C0              <2> 		xor ax, ax
  9228 00006E95 E8BC050000          <2> 		call showwindow
  9229 00006E9A E94FBCFFFF          <2> 		jmp os
  9230                              <2> 
  9231                              <2> 	winblows:
  9232 00006E9F BE[F26E0000]        <2> 		mov esi, turnoffmsg
  9233 00006EA4 BB[CA4F0000]        <2> 		mov ebx, turnoff
  9234 00006EA9 668B0D[78540000]    <2> 		mov cx, [resolutiony]
  9235 00006EB0 6681E92000          <2> 		sub cx, 32
  9236 00006EB5 6631D2              <2> 		xor dx, dx
  9237 00006EB8 30E4                <2> 		xor ah, ah
  9238 00006EBA B010                <2> 		mov al, 00010000b
  9239 00006EBC E808030000          <2> 		call showstring
  9240 00006EC1 BE[E96E0000]        <2> 		mov esi, gotomenu
  9241 00006EC6 668B0D[78540000]    <2> 		mov cx, [resolutiony]
  9242 00006ECD 6681E93000          <2> 		sub cx, 48
  9243 00006ED2 6631D2              <2> 		xor dx, dx
  9244 00006ED5 30E4                <2> 		xor ah, ah
  9245 00006ED7 B010                <2> 		mov al, 00010000b
  9246 00006ED9 BB[586E0000]        <2> 		mov ebx, gotomenuboot
  9247 00006EDE E9E6020000          <2> 		jmp showstring
  9248                              <2> 		
  9249                              <2> 
  9250 00006EE3 737461727400        <2> 	start	db "start",0
  9251 00006EE9 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9252 00006EF2 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9253 00006EFB 00                  <2>
  9254 00006EFC 426F6F2100          <2> 	boomsg db "Boo!",0
  9255 00006F01 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9256 00006F0A 73206561737920746F- <2>
  9257 00006F13 20647261772E00      <2>
  9258 00006F1A 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9259 00006F23 6D206E6F6D00        <2>
  9260                              <2> 
  9261 00006F29 20035802            <2> 	termwindow:	dw 800,600	;window size
  9262 00006F2D FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9263 00006F31 [76B80300]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9264 00006F35 [BE8D0400]          <2>
  9265 00006F39 534855536800        <2> 	termmsg:	db "SHUSh",0	;;window title
  9266                              <2> 	
  9267 00006F39 <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9268 00006F39 <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9269 00006F39 <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9270 00006F39 <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9271 00006F39 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9272                              <2> 
  9273                              <2> %ifdef gui.time
  9274                              <2> guitime:
  9275                              <2> 		call time	;get rtc in timeshow & dateshow
  9276                              <2> 		xor ebx, ebx
  9277                              <2> 		mov dx, [resolutionx2]
  9278                              <2> 		xor cx, cx
  9279                              <2> 		sub dx, 304
  9280                              <2> 		mov esi, dateshow
  9281                              <2> 		mov al, 00010001b
  9282                              <2> 		call showstring
  9283                              <2> 		mov esi, timeshow
  9284                              <2> 		xor ebx, ebx
  9285                              <2> 		mov al, 00010001b
  9286                              <2> 		call showstring
  9287                              <2> 		ret
  9288                              <2> %endif
  9289                              <1> %include "source/gui/text.asm"
  9290                              <2> 	showstring:
  9291 000071C9 A2[AB790000]        <2> 		mov [mouseselecton], al
  9292 000071CE 8025[AB790000]01    <2> 		and byte [mouseselecton], 1
  9293 000071D5 B402                <2> 		mov ah, 2
  9294 000071D7 E8500D0000          <2> 		call graphicsadd
  9295                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9296 000071DC 30E4                <2> 		xor ah, ah
  9297 000071DE 8A06                <2> 		mov al, [esi]
  9298 000071E0 3CC0                <2> 		cmp al, 0xC0
  9299 000071E2 7234                <2> 		jb .doneutf
  9300 000071E4 3CE0                <2> 		cmp al, 0xE0
  9301 000071E6 721D                <2> 		jb .two
  9302 000071E8 46                  <2> 		inc esi
  9303 000071E9 668B1E              <2> 		mov bx, [esi]
  9304 000071EC 46                  <2> 		inc esi
  9305 000071ED C0E004              <2> 		shl al, 4
  9306 000071F0 66C1E302            <2> 		shl bx, 2
  9307 000071F4 C0EF02              <2> 		shr bh, 2
  9308 000071F7 66C1EB02            <2> 		shr bx, 2
  9309 000071FB 08C7                <2> 		or bh, al
  9310 000071FD 6689D8              <2> 		mov ax, bx
  9311 00007200 E913000000          <2> 		jmp .doneutf
  9312                              <2> 	.two:
  9313 00007205 8A3E                <2> 		mov bh, [esi]
  9314 00007207 46                  <2> 		inc esi
  9315 00007208 8A1E                <2> 		mov bl, [esi]
  9316 0000720A 66C1E302            <2> 		shl bx, 2
  9317 0000720E C0EF02              <2> 		shr bh, 2
  9318 00007211 66C1EB02            <2> 		shr bx, 2
  9319 00007215 6689D8              <2> 		mov ax, bx
  9320                              <2> 	.doneutf:
  9321 00007218 3C00                <2> 		cmp al, 0
  9322 0000721A 7420                <2> 		je doneshowstring
  9323 0000721C 46                  <2> 		inc esi
  9324 0000721D 3CFF                <2> 		cmp al, 255
  9325 0000721F 74BB                <2> 		je showstring2
  9326 00007221 56                  <2> 		push esi
  9327 00007222 668B1D[44720000]    <2> 		mov bx, [colorfont2]
  9328 00007229 E827000000          <2> 		call showfontvesa
  9329 0000722E 663D0A00            <2> 		cmp ax, 10
  9330 00007232 7405                <2> 		je noproceedshst
  9331 00007234 6681C20800          <2> 		add dx, 8
  9332                              <2> 	noproceedshst:
  9333 00007239 5E                  <2> 		pop esi
  9334 0000723A EBA0                <2> 		jmp showstring2
  9335                              <2> 	doneshowstring:
  9336 0000723C C605[AB790000]00    <2> 		mov byte [mouseselecton], 0
  9337 00007243 C3                  <2> 		ret
  9338                              <2> 
  9339 00007244 FFFF                <2> colorfont2 dw 0xFFFF
  9340 00007246 00                  <2> colorcache db 0
  9341                              <2> 
  9342 00007247 02                  <2> resolutionbytes db 2
  9343 00007248 0000                <2> posxvesa dw 0
  9344 0000724A 0000                <2> posyvesa dw 0
  9345 0000724C FFFF                <2> colorfont dw 0xFFFF
  9346                              <2> savefontvesa:		;same rules as showfontvesa
  9347 0000724E C605[AA790000]01    <2> 	mov byte [savefonton], 1
  9348                              <2> showfontvesa:		;position in (dx,cx), color in bx, char in ax
  9349 00007255 663DFF00            <2> 	cmp ax, 255
  9350 00007259 7501                <2> 	jne nostopshowfont
  9351 0000725B C3                  <2> 	ret
  9352                              <2> nostopshowfont:
  9353 0000725C 55                  <2> 	push ebp
  9354 0000725D 66890D[4A720000]    <2> 	mov [posyvesa], cx
  9355 00007264 663D0A00            <2> 	cmp ax, 10
  9356 00007268 0F8424000000        <2> 	je near goodvesafontx
  9357 0000726E 31C9                <2> 	xor ecx, ecx
  9358 00007270 668B0D[64550000]    <2> 	mov cx, [resolutionx2]
  9359 00007277 6639CA              <2> 	cmp dx, cx
  9360 0000727A 7616                <2> 	jbe goodvesafontx
  9361 0000727C 6631D2              <2> 	xor dx, dx
  9362 0000727F 668B0D[4A720000]    <2> 	mov cx, [posyvesa]
  9363 00007286 6681C11000          <2> 	add cx, 16
  9364 0000728B 66890D[4A720000]    <2> 	mov [posyvesa], cx
  9365                              <2> goodvesafontx:
  9366 00007292 668B0D[4A720000]    <2> 	mov cx, [posyvesa]
  9367 00007299 668915[48720000]    <2> 	mov [posxvesa], dx
  9368 000072A0 8B3D[8C540000]      <2> 	mov edi, [physbaseptr]
  9369 000072A6 66891D[4C720000]    <2> 	mov [colorfont], bx
  9370 000072AD 668B2D[4C720000]    <2> 	mov bp, [colorfont]
  9371 000072B4 31DB                <2> 	xor ebx, ebx
  9372 000072B6 6689C3              <2> 	mov bx, ax
  9373 000072B9 31C0                <2> 	xor eax, eax
  9374 000072BB 6689D8              <2> 	mov ax, bx
  9375 000072BE 6689D3              <2> 	mov bx, dx
  9376 000072C1 89DA                <2> 	mov edx, ebx
  9377 000072C3 31DB                <2> 	xor ebx, ebx
  9378 000072C5 6681F90000          <2> 	cmp cx, 0
  9379 000072CA 7414                <2> 	je vesaposloopdn
  9380 000072CC 668B1D[64550000]    <2> 	mov bx, [resolutionx2]
  9381                              <2> vesaposloop:
  9382 000072D3 52                  <2> 	push edx
  9383 000072D4 50                  <2> 	push eax
  9384 000072D5 31C0                <2> 	xor eax, eax
  9385 000072D7 6689C8              <2> 	mov ax, cx
  9386 000072DA F7E3                <2> 	mul ebx
  9387 000072DC 01C7                <2> 	add edi, eax
  9388 000072DE 58                  <2> 	pop eax
  9389 000072DF 5A                  <2> 	pop edx
  9390                              <2> vesaposloopdn:
  9391 000072E0 01D7                <2> 	add edi, edx
  9392 000072E2 BE[B4840000]        <2> 	mov esi, fonts
  9393                              <2> findfontvesa:
  9394 000072E7 663D0A00            <2> 	cmp ax, 10
  9395 000072EB 0F84EB000000        <2> 	je near nwlinevesa
  9396 000072F1 C1E004              <2> 	shl eax, 4
  9397 000072F4 01C6                <2> 	add esi, eax
  9398 000072F6 C1E804              <2> 	shr eax, 4
  9399 000072F9 81FE[B4840300]      <2> 	cmp esi, fontend
  9400 000072FF 0F83AB000000        <2> 	jae near donefontvesa
  9401 00007305 4E                  <2> 	dec esi
  9402                              <2> foundfontvesa:
  9403 00007306 46                  <2> 	inc esi
  9404 00007307 803D[AA790000]01    <2> 	cmp byte [savefonton], 1
  9405 0000730E 0F84E7000000        <2> 	je near vesafontsaver
  9406 00007314 30C9                <2> 	xor cl, cl
  9407 00007316 8A06                <2> 	mov al, [esi]
  9408 00007318 668B15[64550000]    <2> 	mov dx, [resolutionx2]
  9409 0000731F 662B15[48720000]    <2> 	sub dx, [posxvesa]
  9410 00007326 6681FA1000          <2> 	cmp dx, 16
  9411 0000732B 7708                <2> 	ja paintfontvesa
  9412 0000732D D0EA                <2> 	shr dl, 1
  9413 0000732F 8815[DB730000]      <2> 	mov [charwidth], dl
  9414                              <2> paintfontvesa:
  9415 00007335 B201                <2> 	mov dl, 1
  9416 00007337 20C2                <2> 	and dl, al
  9417 00007339 803D[A9790000]01    <2> 	cmp byte [showcursorfonton], 1
  9418 00007340 0F842E000000        <2> 	je near nodelpaintedfont
  9419 00007346 803D[A9790000]02    <2> 	cmp byte [showcursorfonton], 2
  9420 0000734D 0F8511000000        <2> 	jne near noswitchcursorfonton
  9421 00007353 80FA00              <2> 	cmp dl, 0
  9422 00007356 0F8420000000        <2> 	je near nopixelset
  9423 0000735C 66892F              <2> 	mov [edi], bp
  9424 0000735F E918000000          <2> 	jmp nopixelset
  9425                              <2> noswitchcursorfonton:
  9426 00007364 3215[AB790000]      <2> 	xor dl, [mouseselecton]
  9427 0000736A 668B1D[876B0000]    <2> 	mov bx, [background]
  9428 00007371 66891F              <2> 	mov [edi], bx
  9429                              <2> nodelpaintedfont:
  9430 00007374 80FA00              <2> 	cmp dl, 0
  9431 00007377 7403                <2> 	je nopixelset
  9432 00007379 66892F              <2> 	mov [edi], bp
  9433                              <2> nopixelset:
  9434 0000737C 81C702000000        <2> 	add edi, 2
  9435 00007382 D0C0                <2> 	rol al, 1
  9436 00007384 FEC1                <2> 	inc cl
  9437 00007386 3A0D[DB730000]      <2> 	cmp cl, [charwidth]
  9438 0000738C 72A7                <2> 	jb paintfontvesa
  9439 0000738E FEC5                <2> 	inc ch
  9440 00007390 31D2                <2> 	xor edx, edx
  9441 00007392 668B15[64550000]    <2> 	mov dx, [resolutionx2]
  9442 00007399 01D7                <2> 	add edi, edx
  9443 0000739B 31D2                <2> 	xor edx, edx
  9444 0000739D 8A15[DB730000]      <2> 	mov dl, [charwidth]
  9445 000073A3 00D2                <2> 	add dl, dl
  9446 000073A5 29D7                <2> 	sub edi, edx
  9447 000073A7 80FD10              <2> 	cmp ch, 16
  9448 000073AA 0F8256FFFFFF        <2> 	jb foundfontvesa
  9449                              <2> donefontvesa:
  9450 000073B0 C605[DB730000]08    <2> 	mov byte [charwidth], 8
  9451 000073B7 668B15[48720000]    <2> 	mov dx, [posxvesa]
  9452 000073BE 8A1D[DB730000]      <2> 	mov bl, [charwidth]
  9453 000073C4 30FF                <2> 	xor bh, bh
  9454 000073C6 6601DA              <2> 	add dx, bx
  9455 000073C9 6689EB              <2> 	mov bx, bp
  9456 000073CC 668B0D[4A720000]    <2> 	mov cx, [posyvesa]
  9457 000073D3 883D[AA790000]      <2> 	mov [savefonton], bh
  9458 000073D9 5D                  <2> 	pop ebp
  9459 000073DA C3                  <2> 	ret
  9460 000073DB 08                  <2> charwidth db 8
  9461                              <2> nwlinevesa:
  9462 000073DC 6631D2              <2> 	xor dx, dx
  9463 000073DF 668915[48720000]    <2> 	mov [posxvesa], dx
  9464 000073E6 668B0D[4A720000]    <2> 	mov cx, [posyvesa]
  9465 000073ED 6681C11000          <2> 	add cx, 16
  9466 000073F2 66890D[4A720000]    <2> 	mov [posyvesa], cx
  9467 000073F9 EBB5                <2> 	jmp donefontvesa
  9468                              <2> vesafontsaver:
  9469 000073FB 30C0                <2> 	xor al, al
  9470 000073FD 30C9                <2> 	xor cl, cl
  9471                              <2> vesafontsaver2:
  9472 000073FF 66392F              <2> 	cmp [edi], bp
  9473 00007402 742C                <2> 	je colorfontmatch
  9474                              <2> donecolormatch:
  9475 00007404 81C702000000        <2> 	add edi, 2
  9476 0000740A D0C0                <2> 	rol al, 1
  9477 0000740C FEC1                <2> 	inc cl
  9478 0000740E 80F908              <2> 	cmp cl, 8
  9479 00007411 72EC                <2> 	jb vesafontsaver2
  9480 00007413 8806                <2> 	mov [esi], al
  9481 00007415 46                  <2> 	inc esi
  9482 00007416 FEC5                <2> 	inc ch
  9483 00007418 31D2                <2> 	xor edx, edx
  9484 0000741A 668B15[64550000]    <2> 	mov dx, [resolutionx2]
  9485 00007421 01D7                <2> 	add edi, edx
  9486 00007423 81EF10000000        <2> 	sub edi, 16
  9487 00007429 80FD10              <2> 	cmp ch, 16
  9488 0000742C 72CD                <2> 	jb vesafontsaver
  9489 0000742E EB80                <2> 	jmp donefontvesa
  9490                              <2> colorfontmatch:
  9491 00007430 0401                <2> 	add al, 1
  9492 00007432 EBD0                <2> 	jmp donecolormatch
  9493                              <1> %include "source/gui/window.asm"
  9494 00007434 0000                <2> winvcopystx dw 0
  9495 00007436 0000                <2> winvcopysty dw 0
  9496 00007438 0000                <2> winvcopydx dw 0
  9497 0000743A 0000                <2> winvcopycx dw 0
  9498 0000743C FFFF0000            <2> windowcolor dw 0xFFFF,0
  9499 00007440 00000000            <2> windowbufloc: dd 0
  9500 00007444 00000000            <2> windowvideobuf dd 0
  9501 00007448 00000000            <2> windowvideobuf2 dd 0
  9502 0000744C 00000000            <2> windowinfobuf dd 0
  9503 00007450 0000                <2> termcol dw 0
  9504 00007452 00000000            <2> wincopyendpos dd 0
  9505                              <2> 
  9506                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9507 00007456 C605[A8230000]01    <2> 		mov byte [termguion], 1
  9508 0000745D 6681C11000          <2> 		add cx, 16
  9509 00007462 668915[34740000]    <2> 		mov [winvcopystx], dx
  9510 00007469 66890D[36740000]    <2> 		mov [winvcopysty], cx
  9511 00007470 8935[4C740000]      <2> 		mov [windowinfobuf], esi
  9512 00007476 668B16              <2> 		mov dx, [esi]
  9513 00007479 668B4E02            <2> 		mov cx, [esi + 2]
  9514 0000747D 31C0                <2> 		xor eax, eax
  9515 0000747F 31DB                <2> 		xor ebx, ebx
  9516 00007481 6689D0              <2> 		mov ax, dx
  9517 00007484 6689CB              <2> 		mov bx, cx
  9518 00007487 66C1E803            <2> 		shr ax, 3
  9519 0000748B 66C1EB04            <2> 		shr bx, 4
  9520 0000748F 66A3[50740000]      <2> 		mov [termcol], ax
  9521 00007495 A2[9D250000]        <2> 		mov [charxy], al
  9522 0000749A 881D[9E250000]      <2> 		mov [charxy + 1], bl
  9523 000074A0 8B7E04              <2> 		mov edi, [esi + 4]
  9524 000074A3 893D[3C740000]      <2> 		mov [windowcolor], edi
  9525 000074A9 8B7E0C              <2> 		mov edi, [esi + 12]
  9526 000074AC 893D[48740000]      <2> 		mov [windowvideobuf2], edi
  9527 000074B2 8B7E08              <2> 		mov edi, [esi + 8]
  9528 000074B5 893D[44740000]      <2> 		mov [windowvideobuf], edi
  9529 000074BB 81FB00000000        <2> 		cmp ebx, 0
  9530 000074C1 0F84C1040000        <2> 		je near donewincopynow
  9531                              <2> 	findendposwin:
  9532 000074C7 C1E002              <2> 		shl eax, 2
  9533 000074CA 31D2                <2> 		xor edx, edx
  9534 000074CC F7E3                <2> 		mul ebx
  9535 000074CE 01C7                <2> 		add edi, eax
  9536 000074D0 893D[52740000]      <2> 		mov [wincopyendpos], edi
  9537 000074D6 31FF                <2> 		xor edi, edi
  9538 000074D8 6631C0              <2> 		xor ax, ax
  9539 000074DB 6631DB              <2> 		xor bx, bx
  9540 000074DE 6601D2              <2> 		add dx, dx
  9541 000074E1 668915[38740000]    <2> 		mov [winvcopydx], dx
  9542 000074E8 66890D[3A740000]    <2> 		mov [winvcopycx], cx
  9543 000074EF 668B0D[36740000]    <2> 		mov cx, [winvcopysty]
  9544 000074F6 6681E91000          <2> 		sub cx, 16
  9545 000074FB 668B15[34740000]    <2> 		mov dx, [winvcopystx]
  9546 00007502 C605[A9230000]00    <2> 		mov byte [termcopyon], 0
  9547 00007509 B403                <2> 		mov ah, 3
  9548 0000750B E81C0A0000          <2> 		call graphicsadd
  9549                              <2> 	showwindow2:
  9550 00007510 6681C11000          <2> 		add cx, 16
  9551 00007515 668915[34740000]    <2> 		mov [winvcopystx], dx
  9552 0000751C 66890D[36740000]    <2> 		mov [winvcopysty], cx
  9553 00007523 668B16              <2> 		mov dx, [esi]
  9554 00007526 668B4E02            <2> 		mov cx, [esi + 2]
  9555 0000752A 6601D2              <2> 		add dx, dx
  9556 0000752D 668915[38740000]    <2> 		mov [winvcopydx], dx
  9557 00007534 66890D[3A740000]    <2> 		mov [winvcopycx], cx
  9558 0000753B E818000000          <2> 		call reloadwindowtitle
  9559 00007540 803D[137F0000]01    <2> 		cmp byte [windrag], 1
  9560 00007547 0F834A040000        <2> 		jae near forgetresetstuff
  9561 0000754D 8B3D[40740000]      <2> 		mov edi, [windowbufloc]
  9562 00007553 E96E020000          <2> 		jmp windowvideocopyset
  9563                              <2> 		
  9564                              <2> 	reloadwindowtitle:
  9565 00007558 8B3D[40740000]      <2> 		mov edi, [windowbufloc]
  9566 0000755E 31D2                <2> 		xor edx, edx
  9567 00007560 668B15[64550000]    <2> 		mov dx, [resolutionx2]
  9568 00007567 C1E204              <2> 		shl edx, 4
  9569 0000756A 29D7                <2> 		sub edi, edx
  9570 0000756C 803D[A9230000]00    <2> 		cmp byte [termcopyon], 0
  9571 00007573 7532                <2> 		jne nocleartitlebarpos
  9572 00007575 8B3D[8C540000]      <2> 		mov edi, [physbaseptr]
  9573 0000757B 31D2                <2> 		xor edx, edx
  9574 0000757D 668B15[34740000]    <2> 		mov dx, [winvcopystx]
  9575 00007584 01D7                <2> 		add edi, edx
  9576 00007586 31C9                <2> 		xor ecx, ecx
  9577 00007588 668B0D[36740000]    <2> 		mov cx, [winvcopysty]
  9578 0000758F 6681E91000          <2> 		sub cx, 16
  9579 00007594 6681F90000          <2> 		cmp cx, 0
  9580 00007599 740C                <2> 		je nocleartitlebarpos
  9581                              <2> 	cleartitlebarpos:
  9582 0000759B 31C0                <2> 		xor eax, eax
  9583 0000759D 66A1[64550000]      <2> 		mov ax, [resolutionx2]
  9584 000075A3 F7E1                <2> 		mul ecx
  9585 000075A5 01C7                <2> 		add edi, eax
  9586                              <2> 	nocleartitlebarpos:
  9587 000075A7 66B91000            <2> 		mov cx, 16
  9588 000075AB 668B15[38740000]    <2> 		mov dx, [winvcopydx]
  9589 000075B2 6681F90000          <2> 		cmp cx, 0
  9590 000075B7 0F8448000000        <2> 		je near canceltitlebarput
  9591 000075BD 6681FA0000          <2> 		cmp dx, 0
  9592 000075C2 0F843D000000        <2> 		je near canceltitlebarput
  9593                              <2> 	titlebarput:
  9594 000075C8 66A1[3C740000]      <2> 		mov ax, [windowcolor]
  9595 000075CE 668907              <2> 		mov [edi], ax
  9596 000075D1 6681EA0200          <2> 		sub dx, 2
  9597 000075D6 81C702000000        <2> 		add edi, 2
  9598 000075DC 6681FA0000          <2> 		cmp dx, 0
  9599 000075E1 75E5                <2> 		jne titlebarput
  9600 000075E3 31D2                <2> 		xor edx, edx
  9601 000075E5 668B15[64550000]    <2> 		mov dx, [resolutionx2]
  9602 000075EC 6649                <2> 		dec cx
  9603 000075EE 662B15[38740000]    <2> 		sub dx, [winvcopydx]
  9604 000075F5 01D7                <2> 		add edi, edx
  9605 000075F7 668B15[38740000]    <2> 		mov dx, [winvcopydx]
  9606 000075FE 6681F90000          <2> 		cmp cx, 0
  9607 00007603 75C3                <2> 		jne titlebarput
  9608                              <2> 	canceltitlebarput:
  9609 00007605 893D[40740000]      <2> 		mov [windowbufloc], edi
  9610 0000760B 803D[A9230000]02    <2> 		cmp byte [termcopyon], 2
  9611 00007612 0F841C010000        <2> 		je near winvcpst
  9612 00007618 668B1D[876B0000]    <2> 		mov bx, [background]
  9613 0000761F 6653                <2> 		push bx
  9614 00007621 6631DB              <2> 		xor bx, bx
  9615 00007624 66891D[876B0000]    <2> 		mov [background], bx
  9616 0000762B 6631C0              <2> 		xor ax, ax
  9617 0000762E 81C610000000        <2> 		add esi, 16
  9618 00007634 668B15[34740000]    <2> 		mov dx, [winvcopystx]
  9619 0000763B 668B0D[36740000]    <2> 		mov cx, [winvcopysty]
  9620 00007642 6681E91000          <2> 		sub cx, 16
  9621 00007647 668B1D[3C740000]    <2> 		mov bx, [windowcolor]
  9622 0000764E C605[AB790000]01    <2> 		mov byte [mouseselecton], 1
  9623 00007655 E882FBFFFF          <2> 		call showstring2	;Show window title
  9624 0000765A 8B35[8C2C0000]      <2> 		mov esi, [usercache]
  9625 00007660 6681C21000          <2> 		add dx, 16
  9626 00007665 C605[AB790000]01    <2> 		mov byte [mouseselecton], 1
  9627 0000766C E86BFBFFFF          <2> 		call showstring2	;Show user name
  9628 00007671 BE[35820000]        <2> 		mov esi, computer
  9629 00007676 C605[AB790000]01    <2> 		mov byte [mouseselecton], 1
  9630 0000767D E85AFBFFFF          <2> 		call showstring2	;Show computer name
  9631 00007682 66B85800            <2> 		mov ax, "X"
  9632 00007686 66BB00F8            <2> 		mov bx, 1111100000000000b
  9633 0000768A 668B15[34740000]    <2> 		mov dx, [winvcopystx]
  9634 00007691 668B0D[36740000]    <2> 		mov cx, [winvcopysty]
  9635 00007698 6681E91000          <2> 		sub cx, 16
  9636 0000769D 6681EA1000          <2> 		sub dx, 16
  9637 000076A2 660315[38740000]    <2> 		add dx, [winvcopydx]
  9638 000076A9 C605[AB790000]01    <2> 		mov byte [mouseselecton], 1
  9639 000076B0 663B15[64550000]    <2> 		cmp dx, [resolutionx2]
  9640 000076B7 7305                <2> 		jae .nox
  9641 000076B9 E897FBFFFF          <2> 		call showfontvesa
  9642                              <2> .nox:
  9643 000076BE 668B1D[876B0000]    <2> 		mov bx, [background]
  9644 000076C5 6681EA1800          <2> 		sub dx, 24
  9645 000076CA 66B82B00            <2> 		mov ax, "+"
  9646 000076CE 66BBE007            <2> 		mov bx, 0000011111100000b
  9647 000076D2 C605[AB790000]01    <2> 		mov byte [mouseselecton], 1
  9648 000076D9 663B15[64550000]    <2> 		cmp dx, [resolutionx2]
  9649 000076E0 7305                <2> 		jae .noplus
  9650 000076E2 E86EFBFFFF          <2> 		call showfontvesa
  9651                              <2> .noplus:
  9652 000076E7 6681EA1800          <2> 		sub dx, 24
  9653 000076EC 66B82D00            <2> 		mov ax, "-"
  9654 000076F0 66BBE0FF            <2> 		mov bx, 1111111111100000b
  9655 000076F4 C605[AB790000]01    <2> 		mov byte [mouseselecton], 1
  9656 000076FB 663B15[64550000]    <2> 		cmp dx, [resolutionx2]
  9657 00007702 7305                <2> 		jae .nominus
  9658 00007704 E84CFBFFFF          <2> 		call showfontvesa
  9659                              <2> .nominus:
  9660 00007709 6681EA1800          <2> 		sub dx, 24
  9661 0000770E 66B83F00            <2> 		mov ax, "?"
  9662 00007712 66BB1F00            <2> 		mov bx, 0000000000011111b
  9663 00007716 C605[AB790000]01    <2> 		mov byte [mouseselecton], 1
  9664 0000771D 663B15[64550000]    <2> 		cmp dx, [resolutionx2]
  9665 00007724 7305                <2> 		jae .noquestion
  9666 00007726 E82AFBFFFF          <2> 		call showfontvesa
  9667                              <2> .noquestion:
  9668 0000772B 665B                <2> 		pop bx
  9669 0000772D 66891D[876B0000]    <2> 		mov [background], bx
  9670                              <2> 	winvcpst:
  9671 00007734 C3                  <2> 		ret
  9672                              <2> 
  9673                              <2> 	windowvideocopy:
  9674 00007735 8B35[4C740000]      <2> 		mov esi, [windowinfobuf]
  9675 0000773B 668B16              <2> 		mov dx, [esi]
  9676 0000773E 668B4E02            <2> 		mov cx, [esi + 2]
  9677 00007742 8B7E04              <2> 		mov edi, [esi + 4]
  9678 00007745 893D[3C740000]      <2> 		mov [windowcolor], edi
  9679 0000774B 8B7E08              <2> 		mov edi, [esi + 8]
  9680 0000774E 8B5E0C              <2> 		mov ebx, [esi + 12]
  9681 00007751 893D[44740000]      <2> 		mov [windowvideobuf], edi
  9682 00007757 891D[48740000]      <2> 		mov [windowvideobuf2], ebx
  9683 0000775D 31C0                <2> 		xor eax, eax
  9684 0000775F 31DB                <2> 		xor ebx, ebx
  9685 00007761 6689D0              <2> 		mov ax, dx
  9686 00007764 6689CB              <2> 		mov bx, cx
  9687 00007767 66C1E803            <2> 		shr ax, 3
  9688 0000776B 66C1EB04            <2> 		shr bx, 4
  9689 0000776F 66A3[50740000]      <2> 		mov [termcol], ax
  9690 00007775 A2[9D250000]        <2> 		mov [charxy], al
  9691 0000777A 881D[9E250000]      <2> 		mov [charxy + 1], bl
  9692 00007780 8B3D[40740000]      <2> 		mov edi, [windowbufloc]
  9693 00007786 3B3D[8C540000]      <2> 		cmp edi, [physbaseptr]
  9694 0000778C 0F8334000000        <2> 		jae near windowvideocopyset
  9695 00007792 31C9                <2> 		xor ecx, ecx
  9696 00007794 31D2                <2> 		xor edx, edx
  9697 00007796 668B15[34740000]    <2> 		mov dx, [winvcopystx]
  9698 0000779D 668B0D[36740000]    <2> 		mov cx, [winvcopysty]
  9699 000077A4 8B3D[8C540000]      <2> 		mov edi, [physbaseptr]
  9700 000077AA 01D7                <2> 		add edi, edx
  9701 000077AC 81F900000000        <2> 		cmp ecx, 0
  9702 000077B2 7412                <2> 		je windowvideocopyset
  9703                              <2> 	yrescopylp:
  9704 000077B4 31C0                <2> 		xor eax, eax
  9705 000077B6 66A1[64550000]      <2> 		mov ax, [resolutionx2]
  9706 000077BC F7E1                <2> 		mul ecx
  9707 000077BE 01C7                <2> 		add edi, eax
  9708 000077C0 893D[40740000]      <2> 		mov [windowbufloc], edi
  9709                              <2> 	windowvideocopyset:
  9710 000077C6 6631C9              <2> 		xor cx, cx
  9711 000077C9 6649                <2> 		dec cx
  9712 000077CB 66890D[9F790000]    <2> 		mov [charposline], cx
  9713 000077D2 89FE                <2> 		mov esi, edi
  9714 000077D4 81EE10000000        <2> 		sub esi, 16
  9715 000077DA 31D2                <2> 		xor edx, edx
  9716 000077DC 668B15[64550000]    <2> 		mov dx, [resolutionx2]
  9717 000077E3 C1E204              <2> 		shl edx, 4
  9718 000077E6 01D6                <2> 		add esi, edx
  9719 000077E8 8B3D[44740000]      <2> 		mov edi, [windowvideobuf]
  9720 000077EE 81EF04000000        <2> 		sub edi, 4
  9721 000077F4 893D[A1790000]      <2> 		mov [charposvbuf], edi
  9722 000077FA E97C000000          <2> 		jmp nextcharwin
  9723                              <2> 	win.write:	;adjusted this to use alpha
  9724                              <2> 				;5R, 6G, 5B
  9725                              <2> %ifdef gui.alphablending
  9726                              <2> 		push esi
  9727                              <2> 		push bx
  9728                              <2> 		push cx
  9729                              <2> 		push dx
  9730                              <2> %ifdef gui.background
  9731                              <2> 		mov esi, edi
  9732                              <2> 		sub esi, [physbaseptr]
  9733                              <2> 		add esi, [backgroundimage]
  9734                              <2> 		cmp dword [backgroundimage], 0
  9735                              <2> 		jne .red
  9736                              <2> %endif
  9737                              <2> 		mov esi, background
  9738                              <2> 	.red:
  9739                              <2> 		mov cx, [esi]
  9740                              <2> 		shr cx, 11
  9741                              <2> 		mov bx, ax
  9742                              <2> 		shr bx, 11
  9743                              <2> 		add cx, bx
  9744                              <2> 		add cx, bx
  9745                              <2> 		add cx, bx
  9746                              <2> 		shr cx, 2
  9747                              <2> 		shl cx, 11
  9748                              <2> 		mov dx, cx
  9749                              <2> 	.green:
  9750                              <2> 		mov cx, [esi]
  9751                              <2> 		shl cx, 5
  9752                              <2> 		shr cx, 10
  9753                              <2> 		mov bx, ax
  9754                              <2> 		shl bx, 5
  9755                              <2> 		shr bx, 10
  9756                              <2> 		add cx, bx
  9757                              <2> 		add cx, bx
  9758                              <2> 		add cx, bx
  9759                              <2> 		shr cx, 2
  9760                              <2> 		shl cx, 5
  9761                              <2> 		add dx, cx
  9762                              <2> 	.blue:
  9763                              <2> 		mov cx, [esi]
  9764                              <2> 		shl cx, 11
  9765                              <2> 		shr cx, 11
  9766                              <2> 		mov bx, ax
  9767                              <2> 		shl bx, 11
  9768                              <2> 		shr bx, 11
  9769                              <2> 		add cx, bx
  9770                              <2> 		add cx, bx
  9771                              <2> 		add cx, bx
  9772                              <2> 		shr cx, 2
  9773                              <2> 		add dx, cx
  9774                              <2> 		mov [edi], dx
  9775                              <2> 		pop dx
  9776                              <2> 		pop cx
  9777                              <2> 		pop bx
  9778                              <2> 		pop esi
  9779                              <2> %else
  9780 000077FF 668907              <2> 		mov [edi], ax
  9781                              <2> %endif
  9782 00007802 C3                  <2> 		ret
  9783                              <2> 	copywindow:
  9784 00007803 B201                <2> 		mov dl, 1
  9785 00007805 D0C6                <2> 		rol dh, 1
  9786 00007807 20F2                <2> 		and dl, dh
  9787 00007809 66813D[46720000]80- <2> 		cmp word [colorcache], 0x80
  9788 00007811 00                  <2>
  9789 00007812 7320                <2> 		jae switchwincolors
  9790 00007814 66A1[3E740000]      <2> 		mov ax, [windowcolor + 2]
  9791 0000781A E8E0FFFFFF          <2> 		call win.write
  9792 0000781F 80FA00              <2> 		cmp dl, 0
  9793 00007822 742B                <2> 		je nowritewin
  9794 00007824 66A1[3C740000]      <2> 		mov ax, [windowcolor]
  9795 0000782A E8D0FFFFFF          <2> 		call win.write
  9796 0000782F E91B000000          <2> 		jmp nowritewin
  9797                              <2> 	switchwincolors:
  9798 00007834 66A1[3C740000]      <2> 		mov ax, [windowcolor]
  9799 0000783A E8C0FFFFFF          <2> 		call win.write
  9800 0000783F 80FA00              <2> 		cmp dl, 0
  9801 00007842 740B                <2> 		je nowritewin
  9802 00007844 66A1[3E740000]      <2> 		mov ax, [windowcolor + 2]
  9803 0000784A E8B0FFFFFF          <2> 		call win.write
  9804                              <2> 	nowritewin:
  9805 0000784F 81C702000000        <2> 		add edi, 2
  9806 00007855 FEC1                <2> 		inc cl
  9807 00007857 80F908              <2> 		cmp cl, 8
  9808 0000785A 75A7                <2> 		jne copywindow
  9809 0000785C 43                  <2> 		inc ebx
  9810 0000785D 30C9                <2> 		xor cl, cl
  9811 0000785F 31D2                <2> 		xor edx, edx
  9812 00007861 668B15[64550000]    <2> 		mov dx, [resolutionx2]
  9813 00007868 01D6                <2> 		add esi, edx
  9814 0000786A 89F7                <2> 		mov edi, esi
  9815 0000786C 8AB3[B4840000]      <2> 		mov dh, [fonts + ebx]
  9816 00007872 D0CE                <2> 		ror dh, 1
  9817 00007874 FEC5                <2> 		inc ch
  9818 00007876 80FD10              <2> 		cmp ch, 16
  9819 00007879 7588                <2> 		jne copywindow
  9820                              <2> 	nextcharwin:
  9821 0000787B 6631C9              <2> 		xor cx, cx
  9822 0000787E 8B3D[A1790000]      <2> 		mov edi, [charposvbuf]
  9823 00007884 81C704000000        <2> 		add edi, 4
  9824 0000788A 3B3D[52740000]      <2> 		cmp edi, [wincopyendpos]
  9825 00007890 0F83F2000000        <2> 		jae near donewincopynow
  9826 00007896 668B5F02            <2> 		mov bx, [edi + 2]
  9827 0000789A 6681FB0000          <2> 		cmp bx, 0
  9828 0000789F 7508                <2> 		jne nofixcolorwin
  9829 000078A1 66BB0700            <2> 		mov bx, 7
  9830 000078A5 66895F02            <2> 		mov [edi + 2], bx
  9831                              <2> 	nofixcolorwin:
  9832 000078A9 66891D[46720000]    <2> 		mov [colorcache], bx
  9833 000078B0 8B1F                <2> 		mov ebx, [edi]
  9834 000078B2 893D[A1790000]      <2> 		mov [charposvbuf], edi
  9835 000078B8 813D[48740000]0000- <2> 		cmp dword [windowvideobuf2], 0
  9836 000078C0 0000                <2>
  9837 000078C2 7455                <2> 		je noskipcharcopy
  9838 000078C4 2B3D[44740000]      <2> 		sub edi, [windowvideobuf]
  9839 000078CA 033D[48740000]      <2> 		add edi, [windowvideobuf2]
  9840 000078D0 8B07                <2> 		mov eax, [edi]
  9841 000078D2 39D8                <2> 		cmp eax, ebx
  9842 000078D4 7543                <2> 		jne noskipcharcopy
  9843                              <2> 	skipcharcopy:
  9844 000078D6 81C610000000        <2> 		add esi, 16
  9845 000078DC 668B0D[9F790000]    <2> 		mov cx, [charposline]
  9846 000078E3 6641                <2> 		inc cx
  9847 000078E5 66890D[9F790000]    <2> 		mov [charposline], cx
  9848 000078EC 663B0D[50740000]    <2> 		cmp cx, [termcol]
  9849 000078F3 7286                <2> 		jb nextcharwin
  9850 000078F5 6631C9              <2> 		xor cx, cx
  9851 000078F8 66890D[9F790000]    <2> 		mov [charposline], cx
  9852 000078FF 31D2                <2> 		xor edx, edx
  9853 00007901 668B15[64550000]    <2> 		mov dx, [resolutionx2]
  9854 00007908 C1E204              <2> 		shl edx, 4
  9855 0000790B 662B15[38740000]    <2> 		sub dx, [winvcopydx]
  9856 00007912 01D6                <2> 		add esi, edx
  9857 00007914 E962FFFFFF          <2> 		jmp nextcharwin
  9858                              <2> 	noskipcharcopy:
  9859 00007919 891F                <2> 		mov [edi], ebx
  9860 0000791B 8B3D[A1790000]      <2> 		mov edi, [charposvbuf]
  9861 00007921 C1E310              <2> 		shl ebx, 16
  9862 00007924 C1EB0C              <2> 		shr ebx, 12
  9863 00007927 31D2                <2> 		xor edx, edx
  9864 00007929 668B15[64550000]    <2> 		mov dx, [resolutionx2]
  9865 00007930 C1E204              <2> 		shl edx, 4
  9866 00007933 29D6                <2> 		sub esi, edx
  9867 00007935 81C610000000        <2> 		add esi, 16
  9868 0000793B 89F7                <2> 		mov edi, esi
  9869 0000793D 668B0D[9F790000]    <2> 		mov cx, [charposline]
  9870 00007944 6641                <2> 		inc cx
  9871 00007946 663B0D[50740000]    <2> 		cmp cx, [termcol]
  9872 0000794D 7317                <2> 		jae fixwindowcopy
  9873 0000794F 66890D[9F790000]    <2> 		mov [charposline], cx
  9874 00007956 6631C9              <2> 		xor cx, cx
  9875 00007959 8AB3[B4840000]      <2> 		mov dh, [fonts + ebx]
  9876 0000795F D0CE                <2> 		ror dh, 1
  9877 00007961 E99DFEFFFF          <2> 		jmp copywindow
  9878                              <2> fixwindowcopy:
  9879 00007966 6631C9              <2> 		xor cx, cx
  9880 00007969 66890D[9F790000]    <2> 		mov [charposline], cx
  9881 00007970 662B15[38740000]    <2> 		sub dx, [winvcopydx]
  9882 00007977 01D6                <2> 		add esi, edx
  9883 00007979 89F7                <2> 		mov edi, esi
  9884 0000797B 8AB3[B4840000]      <2> 		mov dh, [fonts + ebx]
  9885 00007981 D0CE                <2> 		ror dh, 1
  9886 00007983 E97BFEFFFF          <2> 		jmp copywindow
  9887                              <2> donewincopynow:
  9888 00007988 803D[A9230000]01    <2> 		cmp byte [termcopyon], 1
  9889 0000798F 7506                <2> 		jne forgetresetstuff
  9890 00007991 E8E7AFFFFF          <2> 		call switchtermcursor
  9891 00007996 61                  <2> 		popa
  9892                              <2> forgetresetstuff:
  9893 00007997 C605[A9230000]00    <2> 		mov byte [termcopyon], 0
  9894 0000799E C3                  <2> 		ret
  9895                              <2> 		
  9896 0000799F 0000                <2> charposline dw 0
  9897 000079A1 00000000            <2> charposvbuf dw 0,0
  9898                              <1> 				
  9899 000079A5 00                  <1> copygui db 0
  9900 000079A6 00                  <1> graphicsset db 0
  9901 000079A7 0000                <1> graphicspos db 0,0
  9902 000079A9 00                  <1> showcursorfonton db 0
  9903 000079AA 00                  <1> savefonton db 0
  9904 000079AB 00                  <1> mouseselecton db 0
  9905                              <1> 
  9906 000079AC 00                  <1> pbutton db 0
  9907 000079AD 00                  <1> pLBUTTON db 0
  9908 000079AE 00                  <1> pRBUTTON db 0
  9909 000079AF 00000000            <1> dragging dw 0,0
  9910 000079B3 0000000000000000    <1> lastpos dw 0,0,0,0
  9911 000079BB 00000000            <1> colorbuf dw 0,0
  9912                              <1> 	
  9913                              <1> 	clickicon:
  9914 000079BF B001                <1> 		mov al, 1
  9915 000079C1 A2[AC790000]        <1> 		mov [pbutton], al
  9916 000079C6 A0[AD790000]        <1> 		mov al, [pLBUTTON]
  9917 000079CB 2205[6B580000]      <1> 		and al, [LBUTTON]
  9918 000079D1 8A25[AE790000]      <1> 		mov ah, [pRBUTTON]
  9919 000079D7 2225[6C580000]      <1> 		and ah, [RBUTTON]
  9920 000079DD 08E0                <1> 		or al, ah
  9921 000079DF 3C00                <1> 		cmp al, 0
  9922 000079E1 741B                <1> 		je nodragclick
  9923 000079E3 813D[AF790000]0100- <1> 		cmp dword [dragging], 1
  9924 000079EB 0000                <1>
  9925 000079ED 732F                <1> 		jae dragclick
  9926 000079EF C705[AF790000]0100- <1> 		mov dword [dragging], 1
  9927 000079F7 0000                <1>
  9928 000079F9 E920000000          <1> 		jmp dragclick
  9929                              <1> 	nodragclick:
  9930 000079FE 31C0                <1> 		xor eax, eax
  9931 00007A00 A3[AF790000]        <1> 		mov dword [dragging], eax
  9932 00007A05 A2[AC790000]        <1> 		mov [pbutton], al
  9933 00007A0A A0[6B580000]        <1> 		mov al, [LBUTTON]
  9934 00007A0F A2[AD790000]        <1> 		mov [pLBUTTON], al
  9935 00007A14 A0[6C580000]        <1> 		mov al, [RBUTTON]
  9936 00007A19 A2[AE790000]        <1> 		mov [pRBUTTON], al
  9937                              <1> 	dragclick:
  9938 00007A1E 6631C0              <1> 		xor ax, ax
  9939 00007A21 BE[75B50300]        <1> 		mov esi, graphicstable
  9940 00007A26 C705[FF810000]0000- <1> 		mov dword [codepointer], 0
  9941 00007A2E 0000                <1>
  9942                              <1> 	clicon2:
  9943 00007A30 31D2                <1> 		xor edx, edx
  9944 00007A32 31C9                <1> 		xor ecx, ecx
  9945 00007A34 66813E0100          <1> 		cmp word [esi], 1
  9946 00007A39 0F841B000000        <1> 		je near iconselect
  9947 00007A3F 66813E0200          <1> 		cmp word [esi], 2
  9948 00007A44 0F8472010000        <1> 		je near textselected
  9949 00007A4A 66813E0300          <1> 		cmp word [esi], 3
  9950 00007A4F 0F84C7020000        <1> 		je near windowselect
  9951 00007A55 E910040000          <1> 		jmp nexticonsel
  9952                              <1> 	iconselect:
  9953 00007A5A 668B5606            <1> 		mov dx, [esi + 6]
  9954 00007A5E 6689D0              <1> 		mov ax, dx
  9955 00007A61 668B4E08            <1> 		mov cx, [esi + 8]
  9956 00007A65 6689CB              <1> 		mov bx, cx
  9957 00007A68 6681C32000          <1> 		add bx, 32
  9958 00007A6D 6601D0              <1> 		add ax, dx
  9959 00007A70 813D[AF790000]0100- <1> 		cmp dword [dragging], 1
  9960 00007A78 0000                <1>
  9961 00007A7A 746F                <1> 		je dragicon
  9962 00007A7C 813D[AF790000]0000- <1> 		cmp dword [dragging], 0
  9963 00007A84 0000                <1>
  9964 00007A86 7411                <1> 		je nodragiconcheck
  9965 00007A88 3935[AF790000]      <1> 		cmp dword [dragging], esi
  9966 00007A8E 0F85D6030000        <1> 		jne near nexticonsel
  9967 00007A94 E952000000          <1> 		jmp dragicon
  9968                              <1> 	nodragiconcheck:
  9969 00007A99 663905[5A570000]    <1> 		cmp [mousecursorposition], ax
  9970 00007AA0 0F82C4030000        <1> 		jb near nexticonsel
  9971 00007AA6 66054000            <1> 		add ax, 64
  9972 00007AAA 663905[5A570000]    <1> 		cmp [mousecursorposition], ax
  9973 00007AB1 0F87B3030000        <1> 		ja near nexticonsel
  9974 00007AB7 6629D0              <1> 		sub ax, dx
  9975 00007ABA 66390D[5C570000]    <1> 		cmp [mousecursorposition + 2], cx
  9976 00007AC1 0F82A3030000        <1> 		jb near nexticonsel
  9977 00007AC7 66391D[5C570000]    <1> 		cmp [mousecursorposition + 2], bx
  9978 00007ACE 0F8796030000        <1> 		ja near nexticonsel
  9979 00007AD4 668B460A            <1> 		mov ax, [esi + 10]
  9980 00007AD8 66250100            <1> 		and ax, 1
  9981 00007ADC 663D0100            <1> 		cmp ax, 1
  9982 00007AE0 0F84B6000000        <1> 		je near unselecticon
  9983 00007AE6 E98D000000          <1> 		jmp nodragicon
  9984                              <1> 	dragicon:
  9985 00007AEB 663905[56570000]    <1> 		cmp [lastmouseposition], ax
  9986 00007AF2 0F8272030000        <1> 		jb near nexticonsel
  9987 00007AF8 66054000            <1> 		add ax, 64
  9988 00007AFC 663905[56570000]    <1> 		cmp [lastmouseposition], ax
  9989 00007B03 0F8761030000        <1> 		ja near nexticonsel
  9990 00007B09 6629D0              <1> 		sub ax, dx
  9991 00007B0C 66390D[58570000]    <1> 		cmp [lastmouseposition + 2], cx
  9992 00007B13 0F8251030000        <1> 		jb near nexticonsel
  9993 00007B19 66391D[58570000]    <1> 		cmp [lastmouseposition + 2], bx
  9994 00007B20 0F8744030000        <1> 		ja near nexticonsel
  9995 00007B26 668B460A            <1> 		mov ax, [esi + 10]
  9996 00007B2A 2410                <1> 		and al, 00010000b
  9997 00007B2C 3C10                <1> 		cmp al, 00010000b
  9998 00007B2E 7448                <1> 		je nodragicon
  9999 00007B30 8935[AF790000]      <1> 		mov [dragging], esi
 10000 00007B36 66D1E2              <1> 		shl dx, 1
 10001 00007B39 662B15[56570000]    <1> 		sub dx, [lastmouseposition]
 10002 00007B40 660315[5A570000]    <1> 		add dx, [mousecursorposition]
 10003 00007B47 66D1EA              <1> 		shr dx, 1
 10004 00007B4A 66030D[5C570000]    <1> 		add cx, [mousecursorposition + 2]
 10005 00007B51 662B0D[58570000]    <1> 		sub cx, [lastmouseposition + 2]
 10006 00007B58 663B15[64550000]    <1> 		cmp dx, [resolutionx2]
 10007 00007B5F 7607                <1> 		jbe chkyresdrgicn
 10008 00007B61 668B15[5A570000]    <1> 		mov dx, [mousecursorposition]
 10009                              <1> 	chkyresdrgicn:
 10010 00007B68 663B0D[78540000]    <1> 		cmp cx, [resolutiony]
 10011 00007B6F 7607                <1> 		jbe nodragicon
 10012 00007B71 668B0D[5C570000]    <1> 		mov cx, [mousecursorposition + 2]
 10013                              <1> 	nodragicon:
 10014 00007B78 66814E0A0100        <1> 		or word [esi + 10], 1
 10015 00007B7E 8B5E0C              <1> 		mov ebx, [esi + 12]
 10016 00007B81 668B460A            <1> 		mov ax, [esi + 10]
 10017 00007B85 8B7602              <1> 		mov esi, [esi + 2]
 10018 00007B88 C705[FF810000]0000- <1> 		mov dword [codepointer], 0
 10019 00007B90 0000                <1>
 10020 00007B92 E8A3EDFFFF          <1> 		call showicon
 10021 00007B97 E9E7020000          <1> 		jmp doneiconsel
 10022                              <1> 	unselecticon:
 10023 00007B9C 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10024 00007BA2 8B5E0C              <1> 		mov ebx, [esi + 12]
 10025 00007BA5 668B460A            <1> 		mov ax, [esi + 10]
 10026 00007BA9 8B7602              <1> 		mov esi, [esi + 2]
 10027 00007BAC 891D[FF810000]      <1> 		mov [codepointer], ebx
 10028 00007BB2 E883EDFFFF          <1> 		call showicon
 10029 00007BB7 E9C7020000          <1> 		jmp doneiconsel
 10030                              <1> 	textselected:
 10031 00007BBC 8B5E02              <1> 		mov ebx, [esi + 2]
 10032 00007BBF 668B5606            <1> 		mov dx, [esi + 6]
 10033 00007BC3 6689D0              <1> 		mov ax, dx
 10034 00007BC6 668B4E08            <1> 		mov cx, [esi + 8]
 10035                              <1> 	lengthtesttext:
 10036 00007BCA 803B00              <1> 		cmp byte [ebx], 0
 10037 00007BCD 7407                <1> 		je donetesttextlength
 10038 00007BCF 43                  <1> 		inc ebx
 10039 00007BD0 66051000            <1> 		add ax, 16
 10040 00007BD4 EBF4                <1> 		jmp lengthtesttext
 10041                              <1> 	donetesttextlength:
 10042 00007BD6 6689CB              <1> 		mov bx, cx
 10043 00007BD9 6681C30F00          <1> 		add bx, 15
 10044 00007BDE 813D[AF790000]0100- <1> 		cmp dword [dragging], 1
 10045 00007BE6 0000                <1>
 10046 00007BE8 7468                <1> 		je dragtext
 10047 00007BEA 813D[AF790000]0000- <1> 		cmp dword [dragging], 0
 10048 00007BF2 0000                <1>
 10049 00007BF4 7411                <1> 		je nodragtextcheck
 10050 00007BF6 3935[AF790000]      <1> 		cmp dword [dragging], esi
 10051 00007BFC 0F8568020000        <1> 		jne near nexticonsel
 10052 00007C02 E94B000000          <1> 		jmp dragtext
 10053                              <1> 	nodragtextcheck:
 10054 00007C07 663915[5A570000]    <1> 		cmp [mousecursorposition], dx
 10055 00007C0E 0F8256020000        <1> 		jb near nexticonsel
 10056 00007C14 663905[5A570000]    <1> 		cmp [mousecursorposition], ax
 10057 00007C1B 0F8749020000        <1> 		ja near nexticonsel
 10058 00007C21 66390D[5C570000]    <1> 		cmp [mousecursorposition + 2], cx
 10059 00007C28 0F823C020000        <1> 		jb near nexticonsel
 10060 00007C2E 66391D[5C570000]    <1> 		cmp [mousecursorposition + 2], bx
 10061 00007C35 0F872F020000        <1> 		ja near nexticonsel
 10062 00007C3B 668B460A            <1> 		mov ax, [esi + 10]
 10063 00007C3F 66250100            <1> 		and ax, 1
 10064 00007C43 663D0100            <1> 		cmp ax, 1
 10065 00007C47 0F84AB000000        <1> 		je near unselecttext
 10066 00007C4D E986000000          <1> 		jmp nodragtext
 10067                              <1> 	dragtext:
 10068 00007C52 663915[56570000]    <1> 		cmp [lastmouseposition], dx
 10069 00007C59 0F820B020000        <1> 		jb near nexticonsel
 10070 00007C5F 663905[56570000]    <1> 		cmp [lastmouseposition], ax
 10071 00007C66 0F87FE010000        <1> 		ja near nexticonsel
 10072 00007C6C 66390D[58570000]    <1> 		cmp [lastmouseposition + 2], cx
 10073 00007C73 0F82F1010000        <1> 		jb near nexticonsel
 10074 00007C79 66391D[58570000]    <1> 		cmp [lastmouseposition + 2], bx
 10075 00007C80 0F87E4010000        <1> 		ja near nexticonsel
 10076 00007C86 668B460A            <1> 		mov ax, [esi + 10]
 10077 00007C8A 2410                <1> 		and al, 00010000b
 10078 00007C8C 663D1000            <1> 		cmp ax, 00010000b
 10079 00007C90 0F8442000000        <1> 		je near nodragtext
 10080 00007C96 8935[AF790000]      <1> 		mov [dragging], esi
 10081 00007C9C 662B15[56570000]    <1> 		sub dx, [lastmouseposition]
 10082 00007CA3 660315[5A570000]    <1> 		add dx, [mousecursorposition]
 10083 00007CAA 66030D[5C570000]    <1> 		add cx, [mousecursorposition + 2]
 10084 00007CB1 662B0D[58570000]    <1> 		sub cx, [lastmouseposition + 2]
 10085 00007CB8 663B15[64550000]    <1> 		cmp dx, [resolutionx2]
 10086 00007CBF 7607                <1> 		jbe chkyresdrgtxt
 10087 00007CC1 668B15[5A570000]    <1> 		mov dx, [mousecursorposition]
 10088                              <1> 	chkyresdrgtxt:
 10089 00007CC8 663B0D[78540000]    <1> 		cmp cx, [resolutiony]
 10090 00007CCF 7607                <1> 		jbe nodragtext
 10091 00007CD1 668B0D[5C570000]    <1> 		mov cx, [mousecursorposition + 2]
 10092                              <1> 	nodragtext:
 10093 00007CD8 66814E0A0100        <1> 		or word [esi + 10], 1
 10094 00007CDE 8B5E0C              <1> 		mov ebx, [esi + 12]
 10095 00007CE1 891D[FF810000]      <1> 		mov [codepointer], ebx
 10096 00007CE7 668B460A            <1> 		mov ax, [esi + 10]
 10097 00007CEB 8B7602              <1> 		mov esi, [esi + 2]
 10098 00007CEE E8D6F4FFFF          <1> 		call showstring
 10099 00007CF3 E98B010000          <1> 		jmp doneiconsel
 10100                              <1> 	unselecttext:
 10101 00007CF8 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10102 00007CFE 8B5E0C              <1> 		mov ebx, [esi + 12]
 10103 00007D01 668B460A            <1> 		mov ax, [esi + 10]
 10104 00007D05 8B7602              <1> 		mov esi, [esi + 2]
 10105 00007D08 C705[FF810000]0000- <1> 		mov dword [codepointer], 0
 10106 00007D10 0000                <1>
 10107 00007D12 E8B2F4FFFF          <1> 		call showstring
 10108 00007D17 E967010000          <1> 		jmp doneiconsel
 10109                              <1> windowselect:
 10110 00007D1C 8B7E02              <1> 		mov edi, [esi + 2]
 10111 00007D1F 668B5606            <1> 		mov dx, [esi + 6]
 10112 00007D23 6689D0              <1> 		mov ax, dx
 10113 00007D26 668B4E08            <1> 		mov cx, [esi + 8]
 10114 00007D2A 6689CB              <1> 		mov bx, cx
 10115 00007D2D 6681C31000          <1> 		add bx, 16
 10116 00007D32 813D[AF790000]0100- <1> 		cmp dword [dragging], 1
 10117 00007D3A 0000                <1>
 10118 00007D3C 746D                <1> 		je dragwin
 10119 00007D3E 813D[AF790000]0000- <1> 		cmp dword [dragging], 0
 10120 00007D46 0000                <1>
 10121 00007D48 7411                <1> 		je nodragwincheck
 10122 00007D4A 3935[AF790000]      <1> 		cmp dword [dragging], esi
 10123 00007D50 0F8514010000        <1> 		jne near nexticonsel
 10124 00007D56 E950000000          <1> 		jmp dragwin
 10125                              <1> 	nodragwincheck:
 10126 00007D5B 663905[5A570000]    <1> 		cmp [mousecursorposition], ax
 10127 00007D62 0F8202010000        <1> 		jb near nexticonsel
 10128 00007D68 660307              <1> 		add ax, [edi]
 10129 00007D6B 660307              <1> 		add ax, [edi]
 10130 00007D6E 663905[5A570000]    <1> 		cmp [mousecursorposition], ax
 10131 00007D75 0F87EF000000        <1> 		ja near nexticonsel
 10132 00007D7B 66390D[5C570000]    <1> 		cmp [mousecursorposition + 2], cx
 10133 00007D82 0F82E2000000        <1> 		jb near nexticonsel
 10134 00007D88 66391D[5C570000]    <1> 		cmp [mousecursorposition + 2], bx
 10135 00007D8F 0F87D5000000        <1> 		ja near nexticonsel
 10136 00007D95 662D1400            <1> 		sub ax, 20
 10137 00007D99 663905[5A570000]    <1> 		cmp [mousecursorposition], ax
 10138 00007DA0 0F87A4000000        <1> 		ja near killwin
 10139 00007DA6 E98B000000          <1> 		jmp nodragwin
 10140                              <1> 	dragwin:
 10141 00007DAB 663905[56570000]    <1> 		cmp [lastmouseposition], ax
 10142 00007DB2 0F82B2000000        <1> 		jb near nexticonsel
 10143 00007DB8 660307              <1> 		add ax, [edi]
 10144 00007DBB 660307              <1> 		add ax, [edi]
 10145 00007DBE 663905[56570000]    <1> 		cmp [lastmouseposition], ax
 10146 00007DC5 0F879F000000        <1> 		ja near nexticonsel
 10147 00007DCB 66390D[58570000]    <1> 		cmp [lastmouseposition + 2], cx
 10148 00007DD2 0F8292000000        <1> 		jb near nexticonsel
 10149 00007DD8 66391D[58570000]    <1> 		cmp [lastmouseposition + 2], bx
 10150 00007DDF 0F8785000000        <1> 		ja near nexticonsel
 10151 00007DE5 8935[AF790000]      <1> 		mov [dragging], esi
 10152 00007DEB 803D[137F0000]01    <1> 		cmp byte [windrag], 1
 10153 00007DF2 7706                <1> 		ja .nochangewindrag
 10154 00007DF4 FE05[137F0000]      <1> 		inc byte [windrag]
 10155                              <1> 	.nochangewindrag:
 10156 00007DFA 662B15[56570000]    <1> 		sub dx, [lastmouseposition]
 10157 00007E01 660315[5A570000]    <1> 		add dx, [mousecursorposition]
 10158 00007E08 66030D[5C570000]    <1> 		add cx, [mousecursorposition + 2]
 10159 00007E0F 662B0D[58570000]    <1> 		sub cx, [lastmouseposition + 2]
 10160 00007E16 663B15[64550000]    <1> 		cmp dx, [resolutionx2]
 10161 00007E1D 7607                <1> 		jbe chkyresdrgwin
 10162 00007E1F 668B15[5A570000]    <1> 		mov dx, [mousecursorposition]
 10163                              <1> 	chkyresdrgwin:
 10164 00007E26 663B0D[78540000]    <1> 		cmp cx, [resolutiony]
 10165 00007E2D 7607                <1> 		jbe nodragwin
 10166 00007E2F 668B0D[5C570000]    <1> 		mov cx, [mousecursorposition + 2]
 10167                              <1> 	nodragwin:
 10168 00007E36 8B5E0C              <1> 		mov ebx, [esi + 12]
 10169 00007E39 668B460A            <1> 		mov ax, [esi + 10]
 10170 00007E3D 8B7602              <1> 		mov esi, [esi + 2]
 10171 00007E40 E811F6FFFF          <1> 		call showwindow
 10172 00007E45 E939000000          <1> 		jmp doneiconsel
 10173                              <1> 	killwin:
 10174 00007E4A 66C7060000          <1> 		mov word [esi], 0
 10175 00007E4F C605[A8230000]00    <1> 		mov byte [termguion], 0
 10176 00007E56 E8E0ECFFFF          <1> 		call guiclear
 10177 00007E5B E82BEDFFFF          <1> 		call reloadallgraphics
 10178 00007E60 E872EAFFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10179 00007E65 E94EE6FFFF          <1> 		jmp guistart
 10180                              <1> 	nexticonsel:
 10181 00007E6A 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10182 00007E70 81C610000000        <1> 		add esi, 16
 10183 00007E76 81FE[75B70300]      <1> 		cmp esi, graphicstableend
 10184 00007E7C 7305                <1> 		jae doneiconsel
 10185 00007E7E E9ADFBFFFF          <1> 		jmp clicon2
 10186                              <1> 	doneiconsel:
 10187 00007E83 813D[AF790000]0100- <1> 		cmp dword [dragging], 1
 10188 00007E8B 0000                <1>
 10189 00007E8D 731A                <1> 		jae doneiconsel2
 10190 00007E8F A2[137F0000]        <1> 		mov [windrag], al
 10191 00007E94 813D[FF810000]0000- <1> 		cmp dword [codepointer], 0
 10192 00007E9C 0000                <1>
 10193 00007E9E 7409                <1> 		je doneiconsel2
 10194 00007EA0 8B1D[FF810000]      <1> 		mov ebx, [codepointer]
 10195 00007EA6 FFD3                <1> 		call ebx
 10196 00007EA8 C3                  <1> 		ret
 10197                              <1> 	doneiconsel2:
 10198 00007EA9 A0[6B580000]        <1> 		mov al, [LBUTTON]
 10199 00007EAE A2[AD790000]        <1> 		mov [pLBUTTON], al
 10200 00007EB3 A0[6C580000]        <1> 		mov al, [RBUTTON]
 10201 00007EB8 A2[AE790000]        <1> 		mov [pRBUTTON], al
 10202 00007EBD 813D[AF790000]0100- <1> 		cmp dword [dragging], 1
 10203 00007EC5 0000                <1>
 10204 00007EC7 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10205 00007ECD E805EAFFFF          <1> 		call switchmousepos2
 10206 00007ED2 803D[137F0000]01    <1> 		cmp byte [windrag], 1
 10207 00007ED9 7305                <1> 		jae noclearcursorcl
 10208 00007EDB E83FE9FFFF          <1> 		call clearmousecursor
 10209                              <1> noclearcursorcl:
 10210 00007EE0 E8A6ECFFFF          <1> 		call reloadallgraphics
 10211                              <1> noreloadgraphicsclick:
 10212 00007EE5 30E4                <1> 		xor ah, ah
 10213 00007EE7 31C9                <1> 		xor ecx, ecx
 10214 00007EE9 31D2                <1> 		xor edx, edx
 10215 00007EEB B001                <1> 		mov al, 1
 10216 00007EED 668B15[5A570000]    <1> 		mov dx, [mousecursorposition]
 10217 00007EF4 668B0D[5C570000]    <1> 		mov cx, [mousecursorposition + 2]
 10218 00007EFB 66BBE738            <1> 		mov bx, 0011100011100111b
 10219 00007EFF C605[A9790000]01    <1> 		mov byte [showcursorfonton], 1
 10220 00007F06 E84AF3FFFF          <1> 		call showfontvesa
 10221 00007F0B C605[A9790000]00    <1> 		mov byte [showcursorfonton], 0
 10222 00007F12 C3                  <1> 		ret
 10223 00007F13 00                  <1> windrag db 0
 10224 00007F14 00000000            <1> lastdrag dw 0,0
 10225 00007F18 00000000            <1> grpctblpos dw 0,0
 10226                              <1> 
 10227                              <1> 
 10228                              <1> 
 10229 00007F1C 00<rept>            <1> grphbuf times 16 db 0
 10230                              <1> 	graphicsadd:
 10231 00007F2C BF[75B50300]        <1> 		mov edi, graphicstable
 10232                              <1> 	shwgrph1:
 10233 00007F31 397702              <1> 		cmp dword [edi + 2], esi
 10234 00007F34 7414                <1> 		je showgraphicsreplace2
 10235 00007F36 81C710000000        <1> 		add edi, 16
 10236 00007F3C 81FF[75B70300]      <1> 		cmp edi, graphicstableend
 10237 00007F42 0F8337020000        <1> 		jae near showgraphicsnew
 10238 00007F48 EBE7                <1> 		jmp shwgrph1
 10239                              <1> 	showgraphicsreplace2:
 10240 00007F4A 8935[1E7F0000]      <1> 		mov [grphbuf + 2], esi
 10241 00007F50 668915[227F0000]    <1> 		mov [grphbuf + 6], dx
 10242 00007F57 66890D[247F0000]    <1> 		mov [grphbuf + 8], cx
 10243 00007F5E 891D[287F0000]      <1> 		mov [grphbuf + 12], ebx
 10244 00007F64 30FF                <1> 		xor bh, bh
 10245 00007F66 88E3                <1> 		mov bl, ah
 10246 00007F68 30E4                <1> 		xor ah, ah
 10247 00007F6A 66A3[267F0000]      <1> 		mov [grphbuf + 10], ax	
 10248 00007F70 66891D[1C7F0000]    <1> 		mov [grphbuf], bx
 10249 00007F77 66A1[1C7F0000]      <1> 		mov ax, [grphbuf]
 10250 00007F7D 663D0100            <1> 		cmp ax, 1
 10251 00007F81 0F8419000000        <1> 		je near replaceicon
 10252 00007F87 663D0200            <1> 		cmp ax, 2
 10253 00007F8B 0F8493000000        <1> 		je near replacestring
 10254 00007F91 663D0300            <1> 		cmp ax, 3
 10255 00007F95 0F840F010000        <1> 		je near replacewindow
 10256 00007F9B E9BC010000          <1> 		jmp showgraphicsreplace
 10257                              <1> 	replaceicon:
 10258 00007FA0 893D[B3790000]      <1> 		mov [lastpos], edi
 10259 00007FA6 8935[B7790000]      <1> 		mov [lastpos + 4], esi
 10260 00007FAC 8B7702              <1> 		mov esi, [edi + 2]
 10261 00007FAF 668B5F0C            <1> 		mov bx, [edi + 12]
 10262 00007FB3 668B5706            <1> 		mov dx, [edi + 6]
 10263 00007FB7 668B4F08            <1> 		mov cx, [edi + 8]
 10264 00007FBB 668B06              <1> 		mov ax, [esi]
 10265 00007FBE 66A3[BB790000]      <1> 		mov [colorbuf], ax
 10266 00007FC4 66A1[876B0000]      <1> 		mov ax, [background]
 10267 00007FCA 668906              <1> 		mov [esi], ax
 10268 00007FCD 8B5F0C              <1> 		mov ebx, [edi + 12]
 10269 00007FD0 668B470A            <1> 		mov ax, [edi + 10]
 10270 00007FD4 2401                <1> 		and al, 1
 10271 00007FD6 A2[03820000]        <1> 		mov [iconselected], al
 10272 00007FDB 668B470A            <1> 		mov ax, [edi + 10]
 10273 00007FDF E869E9FFFF          <1> 		call showicon2
 10274 00007FE4 8B3D[B3790000]      <1> 		mov edi, [lastpos]
 10275 00007FEA 8B7702              <1> 		mov esi, [edi + 2]
 10276 00007FED 66A1[BB790000]      <1> 		mov ax, [colorbuf]
 10277 00007FF3 668906              <1> 		mov [esi], ax
 10278 00007FF6 8B35[B7790000]      <1> 		mov esi, [lastpos + 4]
 10279 00007FFC 668B15[227F0000]    <1> 		mov dx, [grphbuf + 6]
 10280 00008003 668B0D[247F0000]    <1> 		mov cx, [grphbuf + 8]
 10281 0000800A 668B1D[1C7F0000]    <1> 		mov bx, [grphbuf]
 10282 00008011 66A1[267F0000]      <1> 		mov ax, [grphbuf + 10]
 10283 00008017 88DC                <1> 		mov ah, bl
 10284 00008019 8B1D[287F0000]      <1> 		mov ebx, [grphbuf + 12]
 10285 0000801F E938010000          <1> 		jmp showgraphicsreplace
 10286                              <1> 	replacestring:
 10287 00008024 893D[B3790000]      <1> 		mov [lastpos], edi
 10288 0000802A 8935[B7790000]      <1> 		mov [lastpos + 4], esi
 10289 00008030 8B5F0C              <1> 		mov ebx, [edi + 12]
 10290 00008033 8B7702              <1> 		mov esi, [edi + 2]
 10291 00008036 668B5706            <1> 		mov dx, [edi + 6]
 10292 0000803A 668B4F08            <1> 		mov cx, [edi + 8]
 10293 0000803E 66A1[44720000]      <1> 		mov ax, [colorfont2]
 10294 00008044 66A3[BB790000]      <1> 		mov [colorbuf], ax
 10295 0000804A 66A1[876B0000]      <1> 		mov ax, [background]
 10296 00008050 66A3[44720000]      <1> 		mov [colorfont2], ax		
 10297 00008056 8B5F0C              <1> 		mov ebx, [edi + 12]
 10298 00008059 668B470A            <1> 		mov ax, [edi + 10]
 10299 0000805D 2401                <1> 		and al, 1
 10300 0000805F A2[AB790000]        <1> 		mov [mouseselecton], al
 10301 00008064 668B470A            <1> 		mov ax, [edi + 10]
 10302 00008068 E86FF1FFFF          <1> 		call showstring2
 10303 0000806D 66A1[BB790000]      <1> 		mov ax, [colorbuf]
 10304 00008073 66A3[44720000]      <1> 		mov [colorfont2], ax
 10305 00008079 8B3D[B3790000]      <1> 		mov edi, [lastpos]
 10306 0000807F 8B7702              <1> 		mov esi, [edi + 2]
 10307 00008082 668B15[227F0000]    <1> 		mov dx, [grphbuf + 6]
 10308 00008089 668B0D[247F0000]    <1> 		mov cx, [grphbuf + 8]
 10309 00008090 668B1D[1C7F0000]    <1> 		mov bx, [grphbuf]
 10310 00008097 66A1[267F0000]      <1> 		mov ax, [grphbuf + 10]
 10311 0000809D 88DC                <1> 		mov ah, bl
 10312 0000809F 8B1D[287F0000]      <1> 		mov ebx, [grphbuf + 12]
 10313 000080A5 E9B2000000          <1> 		jmp showgraphicsreplace
 10314                              <1> 	replacewindow:
 10315 000080AA 893D[B3790000]      <1> 		mov [lastpos], edi
 10316 000080B0 8935[B7790000]      <1> 		mov [lastpos + 4], esi
 10317 000080B6 8B7702              <1> 		mov esi, [edi + 2]
 10318 000080B9 8B3D[40740000]      <1> 		mov edi, [windowbufloc]
 10319 000080BF 31D2                <1> 		xor edx, edx
 10320 000080C1 668B15[64550000]    <1> 		mov dx, [resolutionx2]
 10321 000080C8 C1E204              <1> 		shl edx, 4
 10322 000080CB 29D7                <1> 		sub edi, edx
 10323 000080CD 31D2                <1> 		xor edx, edx
 10324 000080CF 668B16              <1> 		mov dx, [esi]
 10325 000080D2 660316              <1> 		add dx, [esi]
 10326 000080D5 668B4E02            <1> 		mov cx, [esi + 2]
 10327 000080D9 6681C11000          <1> 		add cx, 16
 10328 000080DE 66A1[876B0000]      <1> 		mov ax, [background]
 10329 000080E4 803D[137F0000]01    <1> 		cmp byte [windrag], 1
 10330 000080EB 7604                <1> 		jbe clearwindow
 10331 000080ED 662B4E02            <1> 		sub cx, [esi + 2]
 10332                              <1> 	clearwindow:
 10333                              <1> 		%ifdef gui.background
 10334                              <1> 			cmp dword [backgroundimage], 0
 10335                              <1> 			je .noback
 10336                              <1> 			push esi
 10337                              <1> 			mov esi, [backgroundimage]
 10338                              <1> 			sub edi, [physbaseptr]
 10339                              <1> 			add esi, edi
 10340                              <1> 			add edi, [physbaseptr]
 10341                              <1> 			mov ax, [esi]
 10342                              <1> 			pop esi
 10343                              <1> 		.noback:
 10344                              <1> 		%endif
 10345 000080F1 668907              <1> 		mov [edi], ax
 10346 000080F4 81C702000000        <1> 		add edi, 2
 10347 000080FA 81EA02000000        <1> 		sub edx, 2
 10348 00008100 81FA00000000        <1> 		cmp edx, 0
 10349 00008106 75E9                <1> 		jne clearwindow
 10350 00008108 6649                <1> 		dec cx
 10351 0000810A 668B15[64550000]    <1> 		mov dx, [resolutionx2]
 10352 00008111 662B16              <1> 		sub dx, [esi]
 10353 00008114 662B16              <1> 		sub dx, [esi]
 10354 00008117 01D7                <1> 		add edi, edx
 10355 00008119 668B16              <1> 		mov dx, [esi]
 10356 0000811C 660316              <1> 		add dx, [esi]
 10357 0000811F 6681F90000          <1> 		cmp cx, 0
 10358 00008124 75CB                <1> 		jne clearwindow
 10359                              <1> 	endwindowclear:
 10360 00008126 C605[A9230000]00    <1> 		mov byte [termcopyon], 0
 10361 0000812D 8B3D[B3790000]      <1> 		mov edi, [lastpos]
 10362 00008133 8B35[1E7F0000]      <1> 		mov esi, [grphbuf + 2]
 10363 00008139 668B15[227F0000]    <1> 		mov dx, [grphbuf + 6]
 10364 00008140 668B0D[247F0000]    <1> 		mov cx, [grphbuf + 8]
 10365 00008147 668B1D[1C7F0000]    <1> 		mov bx, [grphbuf]
 10366 0000814E 66A1[267F0000]      <1> 		mov ax, [grphbuf + 10]
 10367 00008154 88DC                <1> 		mov ah, bl
 10368 00008156 8B1D[287F0000]      <1> 		mov ebx, [grphbuf + 12]
 10369                              <1> 	showgraphicsreplace:
 10370 0000815C 897702              <1> 		mov [edi + 2], esi
 10371 0000815F 66895706            <1> 		mov [edi + 6], dx
 10372 00008163 66894F08            <1> 		mov [edi + 8], cx
 10373 00008167 895F0C              <1> 		mov [edi + 12], ebx
 10374 0000816A 30FF                <1> 		xor bh, bh
 10375 0000816C 88E3                <1> 		mov bl, ah
 10376 0000816E 30E4                <1> 		xor ah, ah
 10377 00008170 6689470A            <1> 		mov [edi + 10], ax
 10378 00008174 66891F              <1> 		mov [edi], bx
 10379 00008177 8B5F0C              <1> 		mov ebx, [edi + 12]
 10380 0000817A 668B470A            <1> 		mov ax, [edi + 10]
 10381 0000817E C3                  <1> 		ret
 10382                              <1> 	showgraphicsnew:
 10383 0000817F BF[75B50300]        <1> 		mov edi, graphicstable
 10384                              <1> 	shwgrph2:
 10385 00008184 66813F0000          <1> 		cmp word [edi], 0
 10386 00008189 74D1                <1> 		je showgraphicsreplace
 10387 0000818B 81C710000000        <1> 		add edi, 16
 10388 00008191 81FF[75B70300]      <1> 		cmp edi, graphicstableend
 10389 00008197 72EB                <1> 		jb shwgrph2
 10390                              <1> 	showgraphicsdone:
 10391 00008199 C3                  <1> 		ret
 10392                              <1> 	
 10393                              <1> putpixel: ;color in si, point is (dx,cx)
 10394                              <1> 		;destroys edi, ebx, eax
 10395 0000819A 6650                <1> 	push ax
 10396 0000819C 6653                <1> 	push bx
 10397 0000819E 31C0                <1> 	xor eax, eax
 10398 000081A0 31DB                <1> 	xor ebx, ebx
 10399 000081A2 31FF                <1> 	xor edi, edi
 10400 000081A4 668B1D[78540000]    <1> 	mov bx, [resolutiony]
 10401 000081AB 66A1[76540000]      <1> 	mov ax, [resolutionx]
 10402 000081B1 6639C2              <1> 	cmp dx, ax
 10403 000081B4 7720                <1> 	ja .doneput
 10404 000081B6 66D1E0              <1> 	shl ax, 1
 10405 000081B9 6639D9              <1> 	cmp cx, bx
 10406 000081BC 7718                <1> 	ja .doneput
 10407 000081BE 6689CB              <1> 	mov bx, cx
 10408 000081C1 52                  <1> 	push edx
 10409 000081C2 F7E3                <1> 	mul ebx
 10410 000081C4 5A                  <1> 	pop edx
 10411 000081C5 6601D7              <1> 	add di, dx
 10412 000081C8 6601D7              <1> 	add di, dx
 10413 000081CB 01C7                <1> 	add edi, eax
 10414 000081CD 033D[8C540000]      <1> 	add edi, [physbaseptr]
 10415 000081D3 668937              <1> 	mov [edi], si
 10416                              <1> .doneput:
 10417 000081D6 665B                <1> 	pop bx
 10418 000081D8 6658                <1> 	pop ax
 10419 000081DA C3                  <1> 	ret
 10420                              <1> 	
 10421                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10422 000081DB 31FF                <1> 	xor edi, edi
 10423 000081DD 31C0                <1> 	xor eax, eax
 10424 000081DF 31DB                <1> 	xor ebx, ebx
 10425 000081E1 668B1D[64550000]    <1> 	mov bx, [resolutionx2]
 10426 000081E8 6689D7              <1> 	mov di, dx
 10427 000081EB 6601D7              <1> 	add di, dx
 10428 000081EE 6689C8              <1> 	mov ax, cx
 10429 000081F1 F7E3                <1> 	mul ebx
 10430 000081F3 01C7                <1> 	add edi, eax
 10431 000081F5 033D[8C540000]      <1> 	add edi, [physbaseptr]
 10432 000081FB C3                  <1> 	ret
 10433                              <1> 
 10434 000081FC 00                  <1> 	mouseon db 0
 10435 000081FD 0000                <1> 	icon dw 0	;pointer to icon
 10436 000081FF 00000000            <1> 	codepointer dd 0 ;pointer to code
 10437 00008203 00                  <1> 	iconselected db 0
 10438                                  %endif
 10439                                  %ifdef network.included
 10440                                  	%include "source/network.asm"
 10441                                  %endif
 10442                                      %include "source/data.asm"
 10443 00008204 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
 10444 0000820C 73687573683A2000    <1> 	notfound1 db "shush: ",0
 10445 00008214 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
 10446 0000821D 6E640A00            <1>
 10447 00008221 757365726E616D653A- <1> 	userask db "username:",0
 10448 0000822A 00                  <1>
 10449 0000822B 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10450 00008234 00                  <1>
 10451 00008235 40                  <1> 	computer db "@"
 10452                              <1> %ifdef io.serial
 10453                              <1> 	computername	db	"SollerOS.",io.serial," ",0
 10454                              <1> %else
 10455 00008236 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
 10456 0000823F 00                  <1>
 10457                              <1> %endif
 10458 00008240 5D242000            <1> 	endprompt db "]$ ",0
 10459 00008244 0D                  <1> 	crlf 	db  13
 10460 00008245 0A00                <1> 	line	db	10,0
 10461                              <1> 	userlst:
 10462 00008247 726F6F7400          <1> 			db "root",0
 10463 0000824C 617765736F6D65706F- <1> 			db "awesomepower",0
 10464 00008255 77657200            <1>
 10465 00008259 7573657200          <1> 			db "user",0
 10466 0000825E 70617373776F726400  <1> 			db "password",0
 10467 00008267 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
 10468 00008269 00                  <1> 			db 0
 10469                              <1> 	userlstend:
 10470                              <1> 	
 10471 0000826A 00                  <1> 	guion db 0
 10472 0000826B 00                  <1> 	DriveNumber db 0
 10473 0000826C 00000000            <1> 	lbaad dd 0
 10474 00008270 00<rept>            <1> 	memlistbuf times 576 db 0
 10475 000084B0 00000000            <1> 	memlistend: dd 0
 10476                              <1> %ifdef io.serial
 10477                              <1> %else
 10478 000084B0 <incbin>            <1> fonts:	incbin "source/fonts/fonts.pak"
 10479                              <1> fontend:
 10480                              <1> %endif
 10481                              <1> osend:	;this is the end of the operating system's space on disk
 10482                                  %ifdef disk.none
 10483                                  	diskfileindex:
 10484                                  	enddiskfileindex:
 10485                                  	align 512, db 0
 10486                                      %include "source/bss.asm"
 10487                                  %else
 10488                                      %include "build/fileindex.asm"
 10489                              <1> diskfileindex:
 10490 000384B4 617267746573742E65- <1> db "argtest.elf",0
 10491 000384BD 6C6600              <1>
 10492 000384C0 C4010000            <1> dd (f0-$$)/512
 10493 000384C4 46000000            <1> dd (f1-f0)/512
 10494 000384C8 6261636B67726F756E- <1> db "background.bmp",0
 10495 000384D1 642E626D7000        <1>
 10496 000384D7 0A020000            <1> dd (f1-$$)/512
 10497 000384DB 01140000            <1> dd (f2-f1)/512
 10498 000384DF 626F6F742E736800    <1> db "boot.sh",0
 10499 000384E7 0B160000            <1> dd (f2-$$)/512
 10500 000384EB 01000000            <1> dd (f3-f2)/512
 10501 000384EF 63686172746573742E- <1> db "chartest.elf",0
 10502 000384F8 656C6600            <1>
 10503 000384FC 0C160000            <1> dd (f3-$$)/512
 10504 00038500 4E000000            <1> dd (f4-f3)/512
 10505 00038504 646F73746573742E63- <1> db "dostest.com",0
 10506 0003850D 6F6D00              <1>
 10507 00038510 5A160000            <1> dd (f4-$$)/512
 10508 00038514 01000000            <1> dd (f5-f4)/512
 10509 00038518 6578656300          <1> db "exec",0
 10510 0003851D 5B160000            <1> dd (f5-$$)/512
 10511 00038521 01000000            <1> dd (f6-f5)/512
 10512 00038525 66696E616C636F756E- <1> db "finalcount.sn",0
 10513 0003852E 742E736E00          <1>
 10514 00038533 5C160000            <1> dd (f6-$$)/512
 10515 00038537 01000000            <1> dd (f7-f6)/512
 10516 0003853B 666C6F7070792E7478- <1> db "floppy.txt",0
 10517 00038544 7400                <1>
 10518 00038546 5D160000            <1> dd (f7-$$)/512
 10519 0003854A 0A000000            <1> dd (f8-f7)/512
 10520 0003854E 666F726B00          <1> db "fork",0
 10521 00038553 67160000            <1> dd (f8-$$)/512
 10522 00038557 01000000            <1> dd (f9-f8)/512
 10523 0003855B 677261766974792E65- <1> db "gravity.elf",0
 10524 00038564 6C6600              <1>
 10525 00038567 68160000            <1> dd (f9-$$)/512
 10526 0003856B 46000000            <1> dd (f10-f9)/512
 10527 0003856F 6775697465737400    <1> db "guitest",0
 10528 00038577 AE160000            <1> dd (f10-$$)/512
 10529 0003857B 03000000            <1> dd (f11-f10)/512
 10530 0003857F 68656C6C6F776F726C- <1> db "helloworld.elf",0
 10531 00038588 642E656C6600        <1>
 10532 0003858E B1160000            <1> dd (f11-$$)/512
 10533 00038592 86000000            <1> dd (f12-f11)/512
 10534 00038596 696E7400            <1> db "int",0
 10535 0003859A 37170000            <1> dd (f12-$$)/512
 10536 0003859E 01000000            <1> dd (f13-f12)/512
 10537 000385A2 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 10538 000385AB 2E736E00            <1>
 10539 000385AF 38170000            <1> dd (f13-$$)/512
 10540 000385B3 01000000            <1> dd (f14-f13)/512
 10541 000385B7 6D6172696F2E736E00  <1> db "mario.sn",0
 10542 000385C0 39170000            <1> dd (f14-$$)/512
 10543 000385C4 01000000            <1> dd (f15-f14)/512
 10544 000385C8 6D6F6D656E742E7761- <1> db "moment.wav",0
 10545 000385D1 7600                <1>
 10546 000385D3 3A170000            <1> dd (f15-$$)/512
 10547 000385D7 570A0000            <1> dd (f16-f15)/512
 10548 000385DB 70692E656C6600      <1> db "pi.elf",0
 10549 000385E2 91210000            <1> dd (f16-$$)/512
 10550 000385E6 4E000000            <1> dd (f17-f16)/512
 10551 000385EA 72617974726163652E- <1> db "raytrace.elf",0
 10552 000385F3 656C6600            <1>
 10553 000385F7 DF210000            <1> dd (f17-$$)/512
 10554 000385FB 1E000000            <1> dd (f18-f17)/512
 10555 000385FF 736F6C6C65726F732E- <1> db "solleros.bmp",0
 10556 00038608 626D7000            <1>
 10557 0003860C FD210000            <1> dd (f18-$$)/512
 10558 00038610 B0020000            <1> dd (f19-f18)/512
 10559 00038614 736F6C6C65726F732E- <1> db "solleros.txt",0
 10560 0003861D 74787400            <1>
 10561 00038621 AD240000            <1> dd (f19-$$)/512
 10562 00038625 01000000            <1> dd (f20-f19)/512
 10563 00038629 736F6E676F74696D65- <1> db "songotime.sn",0
 10564 00038632 2E736E00            <1>
 10565 00038636 AE240000            <1> dd (f20-$$)/512
 10566 0003863A 01000000            <1> dd (f21-f20)/512
 10567 0003863E 73736500            <1> db "sse",0
 10568 00038642 AF240000            <1> dd (f21-$$)/512
 10569 00038646 02000000            <1> dd (f22-f21)/512
 10570 0003864A 737464696F74657374- <1> db "stdiotest.elf",0
 10571 00038653 2E656C6600          <1>
 10572 00038658 B1240000            <1> dd (f22-$$)/512
 10573 0003865C 4E000000            <1> dd (f23-f22)/512
 10574 00038660 74656C7900          <1> db "tely",0
 10575 00038665 FF240000            <1> dd (f23-$$)/512
 10576 00038669 01000000            <1> dd (f24-f23)/512
 10577 0003866D 74696D65746573742E- <1> db "timetest.elf",0
 10578 00038676 656C6600            <1>
 10579 0003867A 00250000            <1> dd (f24-$$)/512
 10580 0003867E 46000000            <1> dd (f25-f24)/512
 10581 00038682 7475746F7269616C2E- <1> db "tutorial.sh",0
 10582 0003868B 736800              <1>
 10583 0003868E 46250000            <1> dd (f25-$$)/512
 10584 00038692 03000000            <1> dd (f26-f25)/512
 10585 00038696 756E667300          <1> db "unfs",0
 10586 0003869B 49250000            <1> dd (f26-$$)/512
 10587 0003869F 02000000            <1> dd (f27-f26)/512
 10588 000386A3 7574662D382E747874- <1> db "utf-8.txt",0
 10589 000386AC 00                  <1>
 10590 000386AD 4B250000            <1> dd (f27-$$)/512
 10591 000386B1 02000000            <1> dd (f28-f27)/512
 10592 000386B5 766963746F72792E77- <1> db "victory.wav",0
 10593 000386BE 617600              <1>
 10594 000386C1 4D250000            <1> dd (f28-$$)/512
 10595 000386C5 16000000            <1> dd (f29-f28)/512
 10596 000386C9 5F696D672E62696E00  <1> db "_img.bin",0
 10597 000386D2 63250000            <1> dd (f29-$$)/512
 10598 000386D6 D7020000            <1> dd (f30-f29)/512
 10599                              <1> enddiskfileindex:
 10600                              <1> 
 10601                                      %include "source/bss.asm"
 10602 000386DA 90<rept>            <1> align 4, nop
 10603                              <1> bssstart: equ $
 10604                              <1> bsscopy equ $
 10605                              <1> initialstack equ bsscopy
 10606                              <1> stackend equ initialstack + 4000
 10607                              <1> sigtable equ stackend + 96
 10608                              <1> fileindex: equ sigtable + 4
 10609                              <1> fileindexend: equ fileindex + 1024
 10610                              <1> previousstack equ fileindexend
 10611                              <1> lastfolderloc equ previousstack + 4
 10612                              <1> currentfolderloc equ lastfolderloc + 4
 10613                              <1> currentfolder equ currentfolderloc + 4
 10614                              <1> currentfolderend equ currentfolder + 512
 10615                              <1> uid equ currentfolderend
 10616                              <1> ranboot equ uid + 4
 10617                              <1> IFON equ ranboot + 1
 10618                              <1> IFTRUE equ IFON + 1
 10619                              <1> BATCHPOS equ IFTRUE + 100
 10620                              <1> BATCHISON equ BATCHPOS + 4
 10621                              <1> LOOPON equ BATCHISON + 1
 10622                              <1> LOOPPOS	equ LOOPON + 1
 10623                              <1> variables: equ LOOPPOS + 4
 10624                              <1> varend: equ variables + 4096
 10625                              <1> buftxt2: equ varend
 10626                              <1> buftxt: equ buftxt2 + 1024
 10627                              <1> buftxtend: equ buftxt + 1024
 10628                              <1> buf2: equ buftxtend
 10629                              <1> numbuf: equ buf2 + 20
 10630                              <1> %ifdef io.serial
 10631                              <1> 	lastcommandpos equ numbuf + 1
 10632                              <1> %else
 10633                              <1> 	%ifdef gui.included
 10634                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 10635                              <1> 		graphicstableend equ graphicstable + 200h
 10636                              <1> 		%ifdef gui.background
 10637                              <1> 			backgroundbuffer equ graphicstableend
 10638                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 10639                              <1> 			mousecolorbuf equ backgroundbufferend
 10640                              <1> 		%else
 10641                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 10642                              <1> 		%endif
 10643                              <1> 		mcolorend equ mousecolorbuf + 256
 10644                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 10645                              <1> 		videobufend	equ videobuf + 210*65*4;2
 10646                              <1> 		videobuf2 equ videobufend
 10647                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
 10648                              <1> 	%else
 10649                              <1> 		videobuf equ numbuf + 1
 10650                              <1> 		videobufend equ videobuf + 80*30*4
 10651                              <1> 		videobuf2 equ videobufend
 10652                              <1> 		videobuf2end equ videobuf2 + 80*30*4
 10653                              <1> 	%endif
 10654                              <1> 	lastcommandpos: equ videobuf2end
 10655                              <1> %endif
 10656                              <1> 	commandbufpos: equ lastcommandpos + 4
 10657                              <1> 	commandlistentries: equ commandbufpos + 4
 10658                              <1> 	commandsentered: equ commandlistentries + 4
 10659                              <1> 	commandbuf: equ commandsentered + 4
 10660                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 10661                              <1> %ifdef network.included
 10662                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 10663                              <1> 	rbuffend equ rbuffstart + 8212
 10664                              <1> %else
 10665                              <1> 	rbuffstart equ commandbufend
 10666                              <1> 	rbuffend equ commandbufend
 10667                              <1> %endif
 10668                              <1> %ifdef threads.included
 10669                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 10670                              <1> 	threadlistend: equ threadlist + 1024*4
 10671                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
 10672                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
 10673                              <1> 	bssend equ stack1 + 1024*1024
 10674                              <1> %else
 10675                              <1> 	bssend equ rbuffend
 10676                              <1> %endif
 10677                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 10678                                      %include "build/files.asm"
 10679 000386DC 00<rept>            <1> align 512,db 0
 10680                              <1> f0:
 10681 000386DC <incbin>            <1> incbin "included/argtest.elf"
 10682 00041320 00<rept>            <1> align 512,db 0
 10683                              <1> f1:
 10684 00041320 <incbin>            <1> incbin "included/background.bmp"
 10685 002C1446 00<rept>            <1> align 512,db 0
 10686                              <1> f2:
 10687 002C1446 <incbin>            <1> incbin "included/boot.sh"
 10688 002C16FD 00<rept>            <1> align 512,db 0
 10689                              <1> f3:
 10690 002C16FD <incbin>            <1> incbin "included/chartest.elf"
 10691 002CB320 00<rept>            <1> align 512,db 0
 10692                              <1> f4:
 10693 002CB320 <incbin>            <1> incbin "included/dostest.com"
 10694 002CB531 00<rept>            <1> align 512,db 0
 10695                              <1> f5:
 10696 002CB531 <incbin>            <1> incbin "included/exec"
 10697 002CB6E1 00<rept>            <1> align 512,db 0
 10698                              <1> f6:
 10699 002CB6E1 <incbin>            <1> incbin "included/finalcount.sn"
 10700 002CB902 00<rept>            <1> align 512,db 0
 10701                              <1> f7:
 10702 002CB902 <incbin>            <1> incbin "included/floppy.txt"
 10703 002CCC66 00<rept>            <1> align 512,db 0
 10704                              <1> f8:
 10705 002CCC66 <incbin>            <1> incbin "included/fork"
 10706 002CCF58 00<rept>            <1> align 512,db 0
 10707                              <1> f9:
 10708 002CCF58 <incbin>            <1> incbin "included/gravity.elf"
 10709 002D5B30 00<rept>            <1> align 512,db 0
 10710                              <1> f10:
 10711 002D5B30 <incbin>            <1> incbin "included/guitest"
 10712 002D602B 00<rept>            <1> align 512,db 0
 10713                              <1> f11:
 10714 002D602B <incbin>            <1> incbin "included/helloworld.elf"
 10715 002E6DA8 00<rept>            <1> align 512,db 0
 10716                              <1> f12:
 10717 002E6DA8 <incbin>            <1> incbin "included/int"
 10718 002E6FAF 00<rept>            <1> align 512,db 0
 10719                              <1> f13:
 10720 002E6FAF <incbin>            <1> incbin "included/lostwoods.sn"
 10721 002E7056 00<rept>            <1> align 512,db 0
 10722                              <1> f14:
 10723 002E7056 <incbin>            <1> incbin "included/mario.sn"
 10724 002E723A 00<rept>            <1> align 512,db 0
 10725                              <1> f15:
 10726 002E723A <incbin>            <1> incbin "included/moment.wav"
 10727 0043203A 00<rept>            <1> align 512,db 0
 10728                              <1> f16:
 10729 0043203A <incbin>            <1> incbin "included/pi.elf"
 10730 0043BD38 00<rept>            <1> align 512,db 0
 10731                              <1> f17:
 10732 0043BD38 <incbin>            <1> incbin "included/raytrace.elf"
 10733 0043F920 00<rept>            <1> align 512,db 0
 10734                              <1> f18:
 10735 0043F920 <incbin>            <1> incbin "included/solleros.bmp"
 10736 004959E6 00<rept>            <1> align 512,db 0
 10737                              <1> f19:
 10738 004959E6 <incbin>            <1> incbin "included/solleros.txt"
 10739 00495B74 00<rept>            <1> align 512,db 0
 10740                              <1> f20:
 10741 00495B74 <incbin>            <1> incbin "included/songotime.sn"
 10742 00495C4A 00<rept>            <1> align 512,db 0
 10743                              <1> f21:
 10744 00495C4A <incbin>            <1> incbin "included/sse"
 10745 004960A8 00<rept>            <1> align 512,db 0
 10746                              <1> f22:
 10747 004960A8 <incbin>            <1> incbin "included/stdiotest.elf"
 10748 0049FD20 00<rept>            <1> align 512,db 0
 10749                              <1> f23:
 10750 0049FD20 <incbin>            <1> incbin "included/tely"
 10751 0049FFBA 00<rept>            <1> align 512,db 0
 10752                              <1> f24:
 10753 0049FFBA <incbin>            <1> incbin "included/timetest.elf"
 10754 004A8B20 00<rept>            <1> align 512,db 0
 10755                              <1> f25:
 10756 004A8B20 <incbin>            <1> incbin "included/tutorial.sh"
 10757 004A9152 00<rept>            <1> align 512,db 0
 10758                              <1> f26:
 10759 004A9152 <incbin>            <1> incbin "included/unfs"
 10760                              <1> align 512,db 0
 10761                              <1> f27:
 10762 004A9152 <incbin>            <1> incbin "included/utf-8.txt"
 10763 004A99C0 00<rept>            <1> align 512,db 0
 10764                              <1> f28:
 10765 004A99C0 <incbin>            <1> incbin "included/victory.wav"
 10766 004AC548 00<rept>            <1> align 512,db 0
 10767                              <1> f29:
 10768 004AC548 <incbin>            <1> incbin "included/_img.bin"
 10769                              <1> align 512,db 0
 10770                              <1> f30:
 10771                                  %endif
