     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define hardware.automatic
    29                              <1> ;Automatically load the sound and network drivers.
    30                              <1> 
    31                              <1> %define threads.included
    32                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    33                              <1> 
    34                              <1> %define exceptions.included
    35                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    36                              <1> 
    37                              <1> ;%define disk.protected
    38                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking
    39                              <1> 
    40                              <1> %define disk.real
    41                              <1> ;Use real mode for disk access-this gives greater compatibility
    42                              <1> 
    43                              <1> %define sound.included
    44                              <1> ;This includes the sound drivers
    45                              <1> 
    46                              <1> %define network.included
    47                              <1> ;This includes the network stack
    48                              <1> %define rtl8169.included
    49                              <1> ;This includes the RTL8169 drivers
    50                              <1> 
    51                              <1> %define rtl8139.included
    52                              <1> ;This includes the RTL8139 drivers
    53                              <1> 
    54                              <1> %define ne2000.included
    55                              <1> ;This includes the ne2000 drivers
    56                              <1> 
    57                              <1> %define i8254x.included
    58                              <1> ;This includes the Intel 8254x drivers
    59                              <1> 
    60                              <1> ;%define sector.debug
    61                              <1> ;Dump the contents of the first sector of SollerOS
    62                              <1> 
    63                              <1> ;%define system.simple 
    64                              <1> ;The smallest possible system, overrides all options
    65                              <1> 
    66                              <1> ;FIX DEPENDANCIES
    67                              <1> %ifdef gui.included
    68                              <1> 	%undef io.serial
    69                              <1> %else
    70                              <1> 	%undef gui.alphablending
    71                              <1> 	%undef gui.background
    72                              <1> %endif
    73                              <1> %ifdef disk.protected
    74                              <1> 	%undef disk.real
    75                              <1> %endif
    76                              <1> %ifdef network.included
    77                              <1> %else
    78                              <1> 	%undef i8254x.included
    79                              <1> 	%undef ne2000.included
    80                              <1> 	%undef rtl8139.included
    81                              <1> 	%undef rtl8169.included
    82                              <1> %endif
    83                              <1> %ifdef system.simple
    84                              <1> 	%define io.serial "1"
    85                              <1> 	%define disk.real
    86                              <1> 	%undef gui.included
    87                              <1> 	%undef gui.alphablending
    88                              <1> 	%undef gui.background
    89                              <1> 	%undef terminal.vsync
    90                              <1> 	%undef hardware.automatic
    91                              <1> 	%undef threads.included
    92                              <1> 	%undef exceptions.included
    93                              <1> 	%undef disk.protected
    94                              <1> 	%undef sound.included
    95                              <1> 	%undef network.included
    96                              <1> 	%undef rtl8139.included
    97                              <1> 	%undef rtl8169.included
    98                              <1> 	%undef ne2000.included
    99                              <1> 	%undef i8254x.included
   100                              <1> 	%undef sector.debug
   101                              <1> %endif
   102                                  [BITS 16]
   103                                      %include "source/boot.asm"
   104                              <1>     ; MENU.ASM
   105                              <1> %include 'source/signature.asm'
   106                              <2> signature:
   107 00000000 536F6C6C65724F53    <2> db "SollerOS" ;Operating system name
   108 00000008 20416C706861204275- <2> db " Alpha Build ",0	;Soller OS development level
   109 00000011 696C642000          <2>
   110 00000016 EE000000            <2> dd 238	;version number
   111                              <2> signatureend:
   112                              <1> menustart:	
   113 0000001A 8CC8                <1> 	mov ax, cs
   114 0000001C 8ED8                <1> 	mov ds, ax
   115 0000001E 8EC0                <1> 	mov es, ax
   116 00000020 8ED0                <1> 	mov ss, ax
   117 00000022 880E[399E]          <1> 	mov [DriveNumber], cl
   118 00000026 668916[3A9E]        <1> 	mov [lbaad], edx
   119                              <1> %ifdef io.serial
   120                              <1> 	call getmemorysize
   121                              <1> 	mov si, serialmsg
   122                              <1> 	call printrm
   123                              <1> 	jmp pmode
   124                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
   125                              <1> %else
   126 0000002B E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   127 0000002E E95700              <1> 	jmp pmode
   128                              <1> %endif
   129                              <1> 	
   130                              <1> vgaset:
   131 00000031 B81200              <1> 	mov ax, 12h
   132 00000034 31DB                <1> 	xor bx, bx
   133 00000036 CD10                <1> 	int 10h
   134 00000038 C606[389E]00        <1> 	mov byte [guion], 0
   135 0000003D E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   136 00000040 C3                  <1> 	ret
   137                              <1> 
   138                              <1> getmemorysize:
   139 00000041 BF[3E9E]            <1> 	mov di, memlistbuf
   140 00000044 6631DB              <1> 	xor ebx, ebx
   141                              <1> getmemsizeloop:
   142 00000047 66B820E80000        <1> 	mov eax, 0xE820
   143 0000004D 66BA50414D53        <1> 	mov edx, 0x0534D4150
   144 00000053 66B918000000        <1> 	mov ecx, 24
   145 00000059 CD15                <1> 	int 0x15
   146 0000005B 81C71800            <1> 	add di, 24
   147 0000005F 81FF[7EA0]          <1> 	cmp di, memlistend
   148 00000063 7309                <1> 	jae nomoregetmemsize
   149 00000065 6681FB00000000      <1> 	cmp ebx, 0
   150 0000006C 75D9                <1> 	jne getmemsizeloop
   151                              <1> nomoregetmemsize:
   152 0000006E 81EF[3E9E]          <1> 	sub di, memlistbuf
   153 00000072 893E[7EA0]          <1> 	mov [memlistend], di
   154 00000076 C3                  <1> 	ret
   155                              <1> 	
   156                              <1> printrm:			; 'si' comes in with string address
   157 00000077 BB0700              <1>     mov bx,07		; write to display
   158 0000007A B40E                <1>     mov ah,0Eh		; screen function
   159 0000007C 8A04                <1>    .lp:    mov al,[si]         ; get next character
   160 0000007E 3C00                <1>     cmp al,0		; look for terminator 
   161 00000080 7405                <1>     je .done		; zero byte at end of string
   162 00000082 CD10                <1>     int 10h		; write character to screen.    
   163 00000084 46                  <1> 	inc si	     	; move to next character
   164 00000085 EBF5                <1>     jmp .lp		; loop
   165 00000087 C3                  <1> .done: ret
   166                                      %include "source/pmode.asm"
   167                              <1> [BITS 16]
   168                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   169                              <1> ;	16-bit real mode
   170                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   171                              <1> 
   172                              <1> pmode:
   173 00000088 6631C0              <1> 	xor eax, eax
   174 0000008B 6631DB              <1> 	xor ebx, ebx
   175 0000008E 6631C9              <1> 	xor ecx, ecx
   176 00000091 6631D2              <1> 	xor edx, edx
   177 00000094 6631F6              <1> 	xor esi, esi
   178 00000097 6631FF              <1> 	xor edi, edi
   179 0000009A BA9200              <1> 	mov dx, 0x92
   180 0000009D EC                  <1> 	in al, dx	;;A20
   181 0000009E 0C02                <1> 	or al, 2
   182 000000A0 EE                  <1> 	out dx, al
   183 000000A1 8CCB                <1> 	mov bx,cs		; EBX=segment
   184 000000A3 66C1E304            <1> 	shl ebx,4		;	<< 4
   185 000000A7 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   186 000000AB A3[9503]            <1> 	mov [gdt2 + 2],ax
   187 000000AE A3[9D03]            <1> 	mov [gdt3 + 2],ax
   188 000000B1 66C1E810            <1> 	shr eax,16
   189 000000B5 A2[9703]            <1> 	mov [gdt2 + 4],al
   190 000000B8 A2[9F03]            <1> 	mov [gdt3 + 4],al
   191 000000BB 8826[9A03]          <1> 	mov [gdt2 + 7],ah
   192 000000BF 8826[A203]          <1> 	mov [gdt3 + 7],ah
   193                              <1> 
   194 000000C3 66B8[7EA00000]      <1> 	mov eax, initialstack
   195 000000C9 660306[4202]        <1> 	add eax, [newcodecache]
   196 000000CE A3[8D03]            <1> 	mov [gdts + 2],ax
   197 000000D1 66C1E810            <1> 	shr eax, 16
   198 000000D5 A2[8F03]            <1> 	mov [gdts + 4],al
   199 000000D8 8826[9203]          <1> 	mov [gdts + 7], ah
   200                              <1> 	
   201 000000DC 66A1[4202]          <1> 	mov eax, [newcodecache]
   202 000000E0 A3[A503]            <1> 	mov [gdt4 + 2],ax
   203 000000E3 A3[AD03]            <1> 	mov [gdt5 + 2],ax
   204 000000E6 A3[B503]            <1> 	mov [gdtv8086 + 2], ax
   205 000000E9 A3[BD03]            <1> 	mov [gdtv80862 + 2], ax
   206 000000EC 66C1E810            <1> 	shr eax,16
   207 000000F0 A2[A703]            <1> 	mov [gdt4 + 4],al
   208 000000F3 A2[AF03]            <1> 	mov [gdt5 + 4],al
   209 000000F6 A2[B703]            <1> 	mov [gdtv8086 + 4],al
   210 000000F9 A2[BF03]            <1> 	mov [gdtv80862 + 4],al
   211 000000FC 8826[AA03]          <1> 	mov [gdt4 + 7],ah
   212 00000100 8826[B203]          <1> 	mov [gdt5 + 7],ah
   213 00000104 8826[BA03]          <1> 	mov [gdtv8086 + 7],ah
   214 00000108 8826[C203]          <1> 	mov [gdtv80862 + 7],ah
   215                              <1> 	
   216 0000010C 66B800004000        <1> 	mov eax, dosprogloc
   217 00000112 660306[4202]        <1> 	add eax, [newcodecache]
   218 00000117 A3[C503]            <1> 	mov [gdtdos + 2],ax
   219 0000011A A3[CD03]            <1> 	mov [gdtdos2 + 2],ax
   220 0000011D 66C1E810            <1> 	shr eax,16
   221 00000121 A2[C703]            <1> 	mov [gdtdos + 4],al
   222 00000124 A2[CF03]            <1> 	mov [gdtdos2 + 4],al
   223 00000127 8826[CA03]          <1> 	mov [gdtdos + 7],ah
   224 0000012B 8826[D203]          <1> 	mov [gdtdos2 + 7],ah
   225                              <1> 	
   226                              <1> ; fix up gdt and idt
   227 0000012F 67668D83[7B030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   228 00000137 66A3[7103]          <1> 	mov [gdtr + 2],eax
   229 0000013B 67668D83[D3030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   230 00000143 66A3[7703]          <1> 	mov [idtr + 2],eax
   231 00000147 FA                  <1> 	cli
   232 00000148 0F0116[6F03]        <1> 	lgdt [gdtr]
   233 0000014D 0F011E[7503]        <1> 	lidt [idtr]
   234 00000152 6631DB              <1> 	xor ebx, ebx
   235 00000155 8CDB                <1> 	mov bx, ds
   236 00000157 66891E[3E02]        <1> 	mov [basecache], ebx
   237 0000015C 0F20C0              <1> 	mov eax,cr0
   238 0000015F 0C01                <1> 	or al,1
   239 00000161 0F22C0              <1> 	mov cr0,eax
   240 00000164 EA[6901]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   241                              <1> [BITS 32]
   242                              <1> do_pm:
   243 00000169 31C0                <1> 	xor eax, eax
   244 0000016B 66B82000            <1> 	mov ax, SYS_DATA_SEL
   245 0000016F 8ED8                <1> 	mov ds, ax
   246 00000171 8EC0                <1> 	mov es, ax
   247 00000173 8EE0                <1> 	mov fs, ax
   248 00000175 66B83000            <1> 	mov ax, NEW_DATA_SEL
   249 00000179 8EE8                <1> 	mov gs, ax
   250                              <1> 	
   251                              <1> copykernel:
   252 0000017B 648B06              <1> 	mov eax, [fs:esi]
   253 0000017E 658906              <1> 	mov [gs:esi], eax
   254 00000181 81C604000000        <1> 	add esi, 4
   255 00000187 81FE[7EA00000]      <1> 	cmp esi, bsscopy
   256 0000018D 72EC                <1> 	jb copykernel
   257 0000018F EA[96010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   258                              <1> 	
   259                              <1> done_copy:
   260 00000196 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   261 0000019A 8ED8                <1> 	mov ds, ax
   262 0000019C 8EC0                <1> 	mov es, ax
   263 0000019E 8EE0                <1> 	mov fs, ax
   264                              <1> 	;mov ax, STACK_SEL
   265 000001A0 8ED0                <1> 	mov ss, ax
   266 000001A2 BC[1EB00000]        <1> 	mov esp, stackend
   267 000001A7 66B82000            <1> 	mov ax, SYS_DATA_SEL
   268 000001AB 8EE8                <1> 	mov gs, ax
   269                              <1> 	
   270 000001AD E8085D0000          <1> 	call initialize	;initialize drivers
   271                              <1> 	
   272 000001B2 A1[42020000]        <1> 	mov eax, [newcodecache]
   273 000001B7 C1E804              <1> 	shr eax, 4
   274 000001BA A3[3E020000]        <1> 	mov [basecache], eax
   275                              <1> 	
   276 000001BF BE[80EB1100]        <1> 	mov esi, bssend
   277 000001C4 31C0                <1> 	xor eax, eax
   278                              <1> clearkernelbuffers:
   279 000001C6 8906                <1> 	mov [esi], eax
   280 000001C8 81EE04000000        <1> 	sub esi, 4
   281 000001CE 81FE[7EA00000]      <1> 	cmp esi, bsscopy
   282 000001D4 77F0                <1> 	ja clearkernelbuffers
   283 000001D6 FB                  <1> 	sti
   284                              <1> 
   285                              <1> getmemoryspace:
   286 000001D7 BE[3E9E0000]        <1> 	mov esi, memlistbuf
   287 000001DC 31FF                <1> 	xor edi, edi
   288 000001DE 668B3D[7EA00000]    <1> 	mov di, [memlistend]
   289 000001E5 01F7                <1> 	add edi, esi
   290 000001E7 31C0                <1> 	xor eax, eax
   291                              <1> memoryspaceaddition:
   292 000001E9 39FE                <1> 	cmp esi, edi
   293 000001EB 7322                <1> 	jae finishedmemspacecalc
   294 000001ED 81C608000000        <1> 	add esi, 8
   295 000001F3 8B0E                <1> 	mov ecx, [esi]
   296 000001F5 81C608000000        <1> 	add esi, 8
   297 000001FB 8B1E                <1> 	mov ebx, [esi]
   298 000001FD 81C608000000        <1> 	add esi, 8
   299 00000203 81FB01000000        <1> 	cmp ebx, 1
   300 00000209 75DE                <1> 	jne memoryspaceaddition
   301 0000020B 01C8                <1> 	add eax, ecx
   302 0000020D EBDA                <1> 	jmp memoryspaceaddition
   303                              <1> finishedmemspacecalc:
   304 0000020F A3[53020000]        <1> 	mov [memoryspace], eax
   305                              <1> %ifdef gui.included
   306 00000214 803D[389E0000]00    <1> 	cmp byte [guion], 0
   307 0000021B 741C                <1> 	je normalstartup
   308 0000021D 8B1D[3E020000]      <1> 	mov ebx, [basecache]
   309 00000223 C1E304              <1> 	shl ebx, 4
   310 00000226 8B3D[A6540000]      <1> 	mov edi, [physbaseptr]
   311 0000022C 29DF                <1> 	sub edi, ebx
   312 0000022E 893D[A6540000]      <1> 	mov [physbaseptr], edi
   313 00000234 E946620000          <1> 	jmp guiboot
   314                              <1> %endif
   315                              <1> normalstartup:
   316 00000239 E9C3250000          <1> 	jmp os
   317                              <1> 	
   318 0000023E 00000000            <1> basecache dd 0
   319 00000242 00001000            <1> newcodecache dd 0x100000
   320                              <1> 
   321 00000246 00                  <1> testingcpuspeed db 0
   322 00000247 00000000            <1> cpuspeedperint dd 0
   323 0000024B 0000000000000000    <1> cpuclocksperint dd 0,0
   324 00000253 00000000            <1> memoryspace dd 0
   325 00000257 7D0A                <1> pitdiv dw 2685
   326 00000259 2E562200            <1> timeinterval dd 2250286
   327 0000025D 00000000            <1> timeseconds dd 0
   328 00000261 00000000            <1> timenanoseconds dd 0
   329 00000265 00                  <1> soundon db 0
   330 00000266 0000                <1> soundrepititions dw 0
   331 00000268 00000000            <1> soundpos dd 0
   332 0000026C 00000000            <1> soundendpos dd 0
   333                              <1> 
   334                              <1> cpuspeedend:
   335 00000270 C605[46020000]00    <1> 	mov byte [testingcpuspeed], 0
   336 00000277 A3[47020000]        <1> 	mov [cpuspeedperint], eax
   337 0000027C B8[674B0000]        <1> 	mov eax, cpuspeedloopend
   338 00000281 890424              <1> 	mov [esp], eax
   339 00000284 E9D6000000          <1> 	jmp handled
   340                              <1> 
   341                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   342                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   343                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   344                              <1> 
   345                              <1> pitinterrupt: ;this controls threading
   346 00000289 FA                  <1> 	cli
   347 0000028A 803D[46020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   348 00000291 74DD                <1> 	je cpuspeedend
   349                              <1> 		
   350 00000293 E8A0000000          <1> 	call timekeeper ;this updates the internal time
   351                              <1> 	
   352 00000298 803D[65020000]01    <1> 	cmp byte [soundon], 1
   353 0000029F 0F84E5550000        <1> 	je near PCSpeakerRAW
   354                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   355                              <1> %ifdef threads.included
   356 000002A5 803D[7A640000]01    <1> 	cmp byte [threadson], 1
   357 000002AC 0F8468610000        <1> 	je near threadswitch
   358                              <1> %endif
   359                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   360 000002B2 803D[7A640000]00    <1> 	cmp byte [threadson], 0
   361 000002B9 0F84A0000000        <1> 	je near handled
   362                              <1> %ifdef io.serial
   363                              <1> 	jmp handled
   364                              <1> %else
   365 000002BF 60                  <1> 	pusha
   366 000002C0 E464                <1> 	in al, 64h
   367 000002C2 A820                <1> 	test al, 20h
   368 000002C4 0F8593000000        <1> 	jnz near handled2
   369 000002CA E460                <1> 	in al, 60h
   370 000002CC 3C01                <1> 	cmp al, 1		;escape
   371 000002CE 7405                <1> 	je userint
   372 000002D0 E988000000          <1> 	jmp handled2
   373                              <1> userint:
   374                              <1> 	;UNMASK ALL INTS
   375 000002D5 30C0                <1> 	xor al, al
   376 000002D7 E621                <1> 	out 0x21, al
   377 000002D9 30C0                <1> 	xor al, al
   378 000002DB E6A1                <1> 	out 0xA1, al
   379 000002DD B020                <1> 	mov al, 0x20
   380 000002DF E6A0                <1> 	out 0xA0, al
   381 000002E1 E620                <1> 	out 0x20, al
   382                              <1> 	;RESET PIT DIVISOR
   383 000002E3 66A1[57020000]      <1> 	mov ax, [pitdiv]
   384 000002E9 E640                <1> 	out 0x40, al
   385 000002EB 66C1C008            <1> 	rol ax, 8
   386 000002EF E640                <1> 	out 0x40, al
   387                              <1> 	;RESET PIC
   388 000002F1 B020                <1> 	mov al, 0x20
   389 000002F3 E620                <1> 	out 0x20, al
   390 000002F5 61                  <1> 	popa
   391 000002F6 FB                  <1> 	sti
   392 000002F7 BC[1EB00000]        <1> 	mov esp, stackend ;reset stack
   393 000002FC E957260000          <1> 	jmp returnfromexp
   394                              <1> %endif
   395 00000301 0A                  <1> rtcrate db 10
   396                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   397                              <1> %ifdef io.serial
   398                              <1> %else
   399                              <1> %ifdef terminal.vsync
   400                              <1> 	cli
   401                              <1> 	cmp byte [termcopyneeded], 0
   402                              <1> 	je .nocopy
   403                              <1> 	call newtermcopy
   404                              <1> .nocopy
   405                              <1> 	push eax
   406                              <1> 	mov al, 0xC
   407                              <1> 	out 0x70, al
   408                              <1> 	in al, 0x71
   409                              <1> 	pop eax
   410                              <1> 	sti
   411                              <1> %endif
   412                              <1> %endif
   413 00000302 E95F000000          <1> 	jmp handled4
   414                              <1> %ifdef rtl8139.included
   415                              <1> rtl8139.irq:
   416 00000307 FA                  <1> 	cli
   417 00000308 52                  <1> 	push edx
   418 00000309 50                  <1> 	push eax
   419 0000030A 8B15[19810000]      <1> 	mov edx, [rtl8139.basenicaddr]
   420 00000310 81C23E000000        <1> 	add edx, rtl8139.ISR
   421 00000316 31C0                <1> 	xor eax, eax
   422 00000318 66ED                <1> 	in ax, dx
   423 0000031A 66EF                <1> 	out dx, ax
   424 0000031C 58                  <1> 	pop eax
   425 0000031D 5A                  <1> 	pop edx
   426 0000031E FB                  <1> 	sti
   427 0000031F E942000000          <1> 	jmp handled4
   428                              <1> %endif
   429                              <1> %ifdef sound.included
   430                              <1> sblaster.irq:
   431 00000324 FA                  <1> 	cli
   432 00000325 60                  <1> 	pusha
   433 00000326 803D[705B0000]01    <1> 	cmp byte [SoundBlaster], 1
   434 0000032D 0F8448560000        <1> 	je near sblaster.cont
   435 00000333 E925000000          <1> 	jmp handled2
   436                              <1> %endif
   437                              <1> 	
   438                              <1> timekeeper:
   439 00000338 50                  <1> 	push eax
   440 00000339 A1[61020000]        <1> 	mov eax, [timenanoseconds]
   441 0000033E 0305[59020000]      <1> 	add eax, [timeinterval]
   442 00000344 3D00CA9A3B          <1> 	cmp eax, 1000000000
   443 00000349 720B                <1> 	jb nonanosecondrollover
   444 0000034B FF05[5D020000]      <1> 	inc dword [timeseconds]
   445 00000351 2D00CA9A3B          <1> 	sub eax, 1000000000
   446                              <1> 	%ifdef gui.time
   447                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   448                              <1> 		cmp byte [guion], 1
   449                              <1> 		jne nonanosecondrollover
   450                              <1> 		cmp dword [dragging], 0
   451                              <1> 		jne nonanosecondrollover
   452                              <1> 		pusha
   453                              <1> 		call guitime
   454                              <1> 		popa
   455                              <1> 	%endif
   456                              <1> nonanosecondrollover:
   457 00000356 A3[61020000]        <1> 	mov [timenanoseconds], eax
   458 0000035B 58                  <1> 	pop eax
   459 0000035C C3                  <1> 	ret
   460                              <1> 	
   461                              <1> handled2:
   462 0000035D 61                  <1> 	popa
   463                              <1> handled3:
   464 0000035E FB                  <1> 	sti
   465                              <1> handled:
   466 0000035F 50                  <1> 	push eax
   467 00000360 B020                <1> 	mov al, 0x20
   468 00000362 E620                <1> 	out 0x20, al
   469 00000364 58                  <1> 	pop eax
   470 00000365 CF                  <1> 	iret
   471                              <1> handled4:
   472 00000366 50                  <1> 	push eax
   473 00000367 B020                <1> 	mov al, 0x20
   474 00000369 E6A0                <1> 	out 0xA0, al
   475 0000036B E620                <1> 	out 0x20, al
   476 0000036D 58                  <1> 	pop eax
   477 0000036E CF                  <1> 	iret
   478                              <1> [BITS 16]
   479                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   480                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   481                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   482 0000036F 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   483 00000371 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   484                              <1> 
   485 00000375 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   486 00000377 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   487                              <1> 
   488                              <1> 
   489 0000037B 0000                <1> gdt:	dw 0			; limit 15:0
   490 0000037D 0000                <1> 	dw 0			; base 15:0
   491 0000037F 00                  <1> 	db 0			; base 23:16
   492 00000380 00                  <1> 	db 0			; type
   493 00000381 00                  <1> 	db 0			; limit 19:16, flags
   494 00000382 00                  <1> 	db 0			; base 31:24
   495                              <1> ; linear data segment descriptor
   496                              <1> LINEAR_SEL	equ	$-gdt
   497 00000383 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   498 00000385 0000                <1> 	dw 0			; base for this one is always 0
   499 00000387 00                  <1> 	db 0
   500 00000388 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   501 00000389 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   502 0000038A 00                  <1> 	db 0
   503                              <1> STACK_SEL	equ $-gdt
   504 0000038B 0200                <1> gdts:	dw 2;(stackend)/4096
   505 0000038D 0000                <1> 	dw 0
   506 0000038F 00                  <1> 	db 0
   507 00000390 92                  <1> 	db 0x92
   508 00000391 CF                  <1> 	db 0xCF
   509 00000392 00                  <1> 	db 0
   510                              <1> ; code segment descriptor
   511                              <1> SYS_CODE_SEL	equ	$-gdt
   512 00000393 FFFF                <1> gdt2:	dw 0xFFFF
   513 00000395 0000                <1> 	dw 0			; (base gets set above)
   514 00000397 00                  <1> 	db 0
   515 00000398 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   516 00000399 CF                  <1> 	db 0xCF
   517 0000039A 00                  <1> 	db 0
   518                              <1> ; data segment descriptor
   519                              <1> SYS_DATA_SEL	equ	$-gdt
   520 0000039B FFFF                <1> gdt3:	dw 0xFFFF
   521 0000039D 0000                <1> 	dw 0			; (base gets set above)
   522 0000039F 00                  <1> 	db 0
   523 000003A0 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   524 000003A1 CF                  <1> 	db 0xCF
   525 000003A2 00                  <1> 	db 0
   526                              <1> NEW_CODE_SEL	equ	$-gdt
   527 000003A3 FFFF                <1> gdt4:	dw 0xFFFF
   528 000003A5 0000                <1> 	dw 0			; (base gets set above)
   529 000003A7 00                  <1> 	db 0
   530 000003A8 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   531 000003A9 CF                  <1> 	db 0xCF
   532 000003AA 00                  <1> 	db 0
   533                              <1> ; data segment descriptor
   534                              <1> NEW_DATA_SEL	equ	$-gdt
   535 000003AB FFFF                <1> gdt5:	dw 0xFFFF
   536 000003AD 0000                <1> 	dw 0			; (base gets set above)
   537 000003AF 00                  <1> 	db 0
   538 000003B0 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   539 000003B1 CF                  <1> 	db 0xCF
   540 000003B2 00                  <1> 	db 0
   541                              <1> V8086_CODE_SEL	equ $-gdt
   542 000003B3 FFFF                <1> gdtv8086: dw 0xFFFF
   543 000003B5 0000                <1> 	dw 0
   544 000003B7 00                  <1> 	db 0
   545 000003B8 9A                  <1> 	db 0x9A
   546 000003B9 8F                  <1> 	db 0x8F
   547 000003BA 00                  <1> 	db 0
   548                              <1> V8086_DATA_SEL	equ $-gdt
   549 000003BB FFFF                <1> gdtv80862: dw 0xFFFF
   550 000003BD 0000                <1> 	dw 0
   551 000003BF 00                  <1> 	db 0
   552 000003C0 92                  <1> 	db 0x92
   553 000003C1 8F                  <1> 	db 0x8F
   554 000003C2 00                  <1> 	db 0
   555                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   556 000003C3 0001                <1> gdtdos:	dw 256	;give it 1 MB
   557 000003C5 0000                <1> 	dw 0
   558 000003C7 00                  <1> 	db 0
   559 000003C8 9A                  <1> 	db 0x9A
   560 000003C9 8F                  <1> 	db 0x8F ;16 bit
   561 000003CA 00                  <1> 	db 0
   562                              <1> DOS_DATA_SEL 	equ $-gdt
   563 000003CB 0001                <1> gdtdos2:	dw 256
   564 000003CD 0000                <1> 	dw 0
   565 000003CF 00                  <1> 	db 0
   566 000003D0 92                  <1> 	db 0x92
   567 000003D1 8F                  <1> 	db 0x8F ;16 bit
   568 000003D2 00                  <1> 	db 0
   569                              <1> gdt_end:
   570                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   571                              <1> ;	interrupt descriptor table (IDT)
   572                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   573                              <1> ; 32 reserved interrupts:
   574                              <1> idt:	
   575                              <1> %assign i 0
   576                              <1> %rep    8
   577                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   578                              <1> %assign i i+1
   579                              <1> %endrep
   580 000003D3 [F40C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   581                              <2> %assign i i+1
   582 000003DB [000D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   583                              <2> %assign i i+1
   584 000003E3 [0C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   585                              <2> %assign i i+1
   586 000003EB [180D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   587                              <2> %assign i i+1
   588 000003F3 [240D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   589                              <2> %assign i i+1
   590 000003FB [300D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   591                              <2> %assign i i+1
   592 00000403 [3C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   593                              <2> %assign i i+1
   594 0000040B [480D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   595                              <2> %assign i i+1
   596 00000413 [540D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   597                              <1> %assign i 9
   598                              <1> %rep    23
   599                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   600                              <1> %assign i i+1
   601                              <1> %endrep
   602 0000041B [600D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   603                              <2> %assign i i+1
   604 00000423 [6C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   605                              <2> %assign i i+1
   606 0000042B [780D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   607                              <2> %assign i i+1
   608 00000433 [840D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   609                              <2> %assign i i+1
   610 0000043B [900D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   611                              <2> %assign i i+1
   612 00000443 [9C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   613                              <2> %assign i i+1
   614 0000044B [A80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   615                              <2> %assign i i+1
   616 00000453 [B40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   617                              <2> %assign i i+1
   618 0000045B [C00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   619                              <2> %assign i i+1
   620 00000463 [CC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   621                              <2> %assign i i+1
   622 0000046B [D80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   623                              <2> %assign i i+1
   624 00000473 [E40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   625                              <2> %assign i i+1
   626 0000047B [F00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   627                              <2> %assign i i+1
   628 00000483 [FC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   629                              <2> %assign i i+1
   630 0000048B [080E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   631                              <2> %assign i i+1
   632 00000493 [140E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   633                              <2> %assign i i+1
   634 0000049B [200E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   635                              <2> %assign i i+1
   636 000004A3 [2C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   637                              <2> %assign i i+1
   638 000004AB [380E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   639                              <2> %assign i i+1
   640 000004B3 [440E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   641                              <2> %assign i i+1
   642 000004BB [500E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   643                              <2> %assign i i+1
   644 000004C3 [5C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   645                              <2> %assign i i+1
   646 000004CB [680E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   647                              <2> %assign i i+1
   648 000004D3 [C726]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   649 000004DB [CB26]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   650                              <1> %assign i 0x22
   651                              <1> %rep 14
   652                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   653                              <1> %assign i +1
   654                              <1> %endrep
   655 000004E3 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   656                              <2> %assign i +1
   657 000004EB [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   658                              <2> %assign i +1
   659 000004F3 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   660                              <2> %assign i +1
   661 000004FB [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   662                              <2> %assign i +1
   663 00000503 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   664                              <2> %assign i +1
   665 0000050B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   666                              <2> %assign i +1
   667 00000513 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   668                              <2> %assign i +1
   669 0000051B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   670                              <2> %assign i +1
   671 00000523 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   672                              <2> %assign i +1
   673 0000052B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   674                              <2> %assign i +1
   675 00000533 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   676                              <2> %assign i +1
   677 0000053B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   678                              <2> %assign i +1
   679 00000543 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   680                              <2> %assign i +1
   681 0000054B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   682                              <2> %assign i +1
   683                              <1> ;INT 30h for os use and 3rd party use:
   684 00000553 [E71B]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   685                              <1> %assign i 0x31
   686                              <1> %rep 15
   687                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   688                              <1> %assign i +1
   689                              <1> %endrep
   690 0000055B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i +1
   692 00000563 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i +1
   694 0000056B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i +1
   696 00000573 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i +1
   698 0000057B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i +1
   700 00000583 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i +1
   702 0000058B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i +1
   704 00000593 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   705                              <2> %assign i +1
   706 0000059B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   707                              <2> %assign i +1
   708 000005A3 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   709                              <2> %assign i +1
   710 000005AB [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   711                              <2> %assign i +1
   712 000005B3 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   713                              <2> %assign i +1
   714 000005BB [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   715                              <2> %assign i +1
   716 000005C3 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   717                              <2> %assign i +1
   718 000005CB [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   719                              <2> %assign i +1
   720                              <1> ;and here we are at 0x40
   721                              <1> ;here are all the irq's
   722 000005D3 [8902]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   723 000005DB [5F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   724 000005E3 [5F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   725 000005EB [5F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   726 000005F3 [5F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   727                              <1> 	%ifdef sound.included
   728 000005FB [2403]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   729                              <1> 	%else
   730                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   731                              <1> 	%endif
   732 00000603 [5F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   733 0000060B [5F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   734 00000613 [0203]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   735 0000061B [6603]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   736 00000623 [6603]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   737                              <1> 	%ifdef rtl8139.included
   738 0000062B [0703]2800008E0000  <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   739                              <1> 	%else
   740                              <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   741                              <1> 	%endif
   742 00000633 [6603]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   743 0000063B [6603]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   744 00000643 [6603]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   745 0000064B [6603]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   746                              <1> ;This brings me up to 0x50
   747                              <1> %assign i 0x50
   748                              <1> %rep 176
   749                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   750                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   751                              <1> %assign i +1
   752                              <1> %endrep
   753 00000653 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   754                              <2> 
   755                              <2> %assign i +1
   756 0000065B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   757                              <2> 
   758                              <2> %assign i +1
   759 00000663 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   760                              <2> 
   761                              <2> %assign i +1
   762 0000066B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   763                              <2> 
   764                              <2> %assign i +1
   765 00000673 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   766                              <2> 
   767                              <2> %assign i +1
   768 0000067B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   769                              <2> 
   770                              <2> %assign i +1
   771 00000683 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   772                              <2> 
   773                              <2> %assign i +1
   774 0000068B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   775                              <2> 
   776                              <2> %assign i +1
   777 00000693 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   778                              <2> 
   779                              <2> %assign i +1
   780 0000069B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   781                              <2> 
   782                              <2> %assign i +1
   783 000006A3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   784                              <2> 
   785                              <2> %assign i +1
   786 000006AB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   787                              <2> 
   788                              <2> %assign i +1
   789 000006B3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   790                              <2> 
   791                              <2> %assign i +1
   792 000006BB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   793                              <2> 
   794                              <2> %assign i +1
   795 000006C3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   796                              <2> 
   797                              <2> %assign i +1
   798 000006CB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   799                              <2> 
   800                              <2> %assign i +1
   801 000006D3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   802                              <2> 
   803                              <2> %assign i +1
   804 000006DB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   805                              <2> 
   806                              <2> %assign i +1
   807 000006E3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   808                              <2> 
   809                              <2> %assign i +1
   810 000006EB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   811                              <2> 
   812                              <2> %assign i +1
   813 000006F3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   814                              <2> 
   815                              <2> %assign i +1
   816 000006FB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   817                              <2> 
   818                              <2> %assign i +1
   819 00000703 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   820                              <2> 
   821                              <2> %assign i +1
   822 0000070B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   823                              <2> 
   824                              <2> %assign i +1
   825 00000713 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   826                              <2> 
   827                              <2> %assign i +1
   828 0000071B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   829                              <2> 
   830                              <2> %assign i +1
   831 00000723 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   832                              <2> 
   833                              <2> %assign i +1
   834 0000072B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   835                              <2> 
   836                              <2> %assign i +1
   837 00000733 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   838                              <2> 
   839                              <2> %assign i +1
   840 0000073B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   841                              <2> 
   842                              <2> %assign i +1
   843 00000743 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   844                              <2> 
   845                              <2> %assign i +1
   846 0000074B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   847                              <2> 
   848                              <2> %assign i +1
   849 00000753 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   850                              <2> 
   851                              <2> %assign i +1
   852 0000075B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   853                              <2> 
   854                              <2> %assign i +1
   855 00000763 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   856                              <2> 
   857                              <2> %assign i +1
   858 0000076B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   859                              <2> 
   860                              <2> %assign i +1
   861 00000773 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   862                              <2> 
   863                              <2> %assign i +1
   864 0000077B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   865                              <2> 
   866                              <2> %assign i +1
   867 00000783 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   868                              <2> 
   869                              <2> %assign i +1
   870 0000078B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   871                              <2> 
   872                              <2> %assign i +1
   873 00000793 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   874                              <2> 
   875                              <2> %assign i +1
   876 0000079B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   877                              <2> 
   878                              <2> %assign i +1
   879 000007A3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   880                              <2> 
   881                              <2> %assign i +1
   882 000007AB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   883                              <2> 
   884                              <2> %assign i +1
   885 000007B3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   886                              <2> 
   887                              <2> %assign i +1
   888 000007BB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   889                              <2> 
   890                              <2> %assign i +1
   891 000007C3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   892                              <2> 
   893                              <2> %assign i +1
   894 000007CB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   895                              <2> 
   896                              <2> %assign i +1
   897 000007D3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   898                              <2> 
   899                              <2> %assign i +1
   900 000007DB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   901                              <2> 
   902                              <2> %assign i +1
   903 000007E3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   904                              <2> 
   905                              <2> %assign i +1
   906 000007EB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   907                              <2> 
   908                              <2> %assign i +1
   909 000007F3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   910                              <2> 
   911                              <2> %assign i +1
   912 000007FB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   913                              <2> 
   914                              <2> %assign i +1
   915 00000803 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   916                              <2> 
   917                              <2> %assign i +1
   918 0000080B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   919                              <2> 
   920                              <2> %assign i +1
   921 00000813 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   922                              <2> 
   923                              <2> %assign i +1
   924 0000081B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   925                              <2> 
   926                              <2> %assign i +1
   927 00000823 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   928                              <2> 
   929                              <2> %assign i +1
   930 0000082B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   931                              <2> 
   932                              <2> %assign i +1
   933 00000833 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   934                              <2> 
   935                              <2> %assign i +1
   936 0000083B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   937                              <2> 
   938                              <2> %assign i +1
   939 00000843 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   940                              <2> 
   941                              <2> %assign i +1
   942 0000084B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   943                              <2> 
   944                              <2> %assign i +1
   945 00000853 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   946                              <2> 
   947                              <2> %assign i +1
   948 0000085B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   949                              <2> 
   950                              <2> %assign i +1
   951 00000863 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   952                              <2> 
   953                              <2> %assign i +1
   954 0000086B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   955                              <2> 
   956                              <2> %assign i +1
   957 00000873 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   958                              <2> 
   959                              <2> %assign i +1
   960 0000087B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   961                              <2> 
   962                              <2> %assign i +1
   963 00000883 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   964                              <2> 
   965                              <2> %assign i +1
   966 0000088B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   967                              <2> 
   968                              <2> %assign i +1
   969 00000893 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   970                              <2> 
   971                              <2> %assign i +1
   972 0000089B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   973                              <2> 
   974                              <2> %assign i +1
   975 000008A3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   976                              <2> 
   977                              <2> %assign i +1
   978 000008AB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   979                              <2> 
   980                              <2> %assign i +1
   981 000008B3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   982                              <2> 
   983                              <2> %assign i +1
   984 000008BB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   985                              <2> 
   986                              <2> %assign i +1
   987 000008C3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   988                              <2> 
   989                              <2> %assign i +1
   990 000008CB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   991                              <2> 
   992                              <2> %assign i +1
   993 000008D3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   994                              <2> 
   995                              <2> %assign i +1
   996 000008DB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   997                              <2> 
   998                              <2> %assign i +1
   999 000008E3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1000                              <2> 
  1001                              <2> %assign i +1
  1002 000008EB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1003                              <2> 
  1004                              <2> %assign i +1
  1005 000008F3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1006                              <2> 
  1007                              <2> %assign i +1
  1008 000008FB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1009                              <2> 
  1010                              <2> %assign i +1
  1011 00000903 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1012                              <2> 
  1013                              <2> %assign i +1
  1014 0000090B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1015                              <2> 
  1016                              <2> %assign i +1
  1017 00000913 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1018                              <2> 
  1019                              <2> %assign i +1
  1020 0000091B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1021                              <2> 
  1022                              <2> %assign i +1
  1023 00000923 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1024                              <2> 
  1025                              <2> %assign i +1
  1026 0000092B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1027                              <2> 
  1028                              <2> %assign i +1
  1029 00000933 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1030                              <2> 
  1031                              <2> %assign i +1
  1032 0000093B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1033                              <2> 
  1034                              <2> %assign i +1
  1035 00000943 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1036                              <2> 
  1037                              <2> %assign i +1
  1038 0000094B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1039                              <2> 
  1040                              <2> %assign i +1
  1041 00000953 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1042                              <2> 
  1043                              <2> %assign i +1
  1044 0000095B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1045                              <2> 
  1046                              <2> %assign i +1
  1047 00000963 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1048                              <2> 
  1049                              <2> %assign i +1
  1050 0000096B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1051                              <2> 
  1052                              <2> %assign i +1
  1053 00000973 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1054                              <2> 
  1055                              <2> %assign i +1
  1056 0000097B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1057                              <2> 
  1058                              <2> %assign i +1
  1059 00000983 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1060                              <2> 
  1061                              <2> %assign i +1
  1062 0000098B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1063                              <2> 
  1064                              <2> %assign i +1
  1065 00000993 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1066                              <2> 
  1067                              <2> %assign i +1
  1068 0000099B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1069                              <2> 
  1070                              <2> %assign i +1
  1071 000009A3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1072                              <2> 
  1073                              <2> %assign i +1
  1074 000009AB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1075                              <2> 
  1076                              <2> %assign i +1
  1077 000009B3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1078                              <2> 
  1079                              <2> %assign i +1
  1080 000009BB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1081                              <2> 
  1082                              <2> %assign i +1
  1083 000009C3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1084                              <2> 
  1085                              <2> %assign i +1
  1086 000009CB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1087                              <2> 
  1088                              <2> %assign i +1
  1089 000009D3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1090                              <2> 
  1091                              <2> %assign i +1
  1092 000009DB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1093                              <2> 
  1094                              <2> %assign i +1
  1095 000009E3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1096                              <2> 
  1097                              <2> %assign i +1
  1098 000009EB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1099                              <2> 
  1100                              <2> %assign i +1
  1101 000009F3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1102                              <2> 
  1103                              <2> %assign i +1
  1104 000009FB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1105                              <2> 
  1106                              <2> %assign i +1
  1107 00000A03 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1108                              <2> 
  1109                              <2> %assign i +1
  1110 00000A0B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1111                              <2> 
  1112                              <2> %assign i +1
  1113 00000A13 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1114                              <2> 
  1115                              <2> %assign i +1
  1116 00000A1B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1117                              <2> 
  1118                              <2> %assign i +1
  1119 00000A23 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1120                              <2> 
  1121                              <2> %assign i +1
  1122 00000A2B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1123                              <2> 
  1124                              <2> %assign i +1
  1125 00000A33 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1126                              <2> 
  1127                              <2> %assign i +1
  1128 00000A3B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1129                              <2> 
  1130                              <2> %assign i +1
  1131 00000A43 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1132                              <2> 
  1133                              <2> %assign i +1
  1134 00000A4B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1135                              <2> 
  1136                              <2> %assign i +1
  1137 00000A53 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1138                              <2> 
  1139                              <2> %assign i +1
  1140 00000A5B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1141                              <2> 
  1142                              <2> %assign i +1
  1143 00000A63 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1144                              <2> 
  1145                              <2> %assign i +1
  1146 00000A6B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1147                              <2> 
  1148                              <2> %assign i +1
  1149 00000A73 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1150                              <2> 
  1151                              <2> %assign i +1
  1152 00000A7B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1153                              <2> 
  1154                              <2> %assign i +1
  1155 00000A83 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1156                              <2> 
  1157                              <2> %assign i +1
  1158 00000A8B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1159                              <2> 
  1160                              <2> %assign i +1
  1161 00000A93 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1162                              <2> 
  1163                              <2> %assign i +1
  1164 00000A9B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1165                              <2> 
  1166                              <2> %assign i +1
  1167 00000AA3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1168                              <2> 
  1169                              <2> %assign i +1
  1170 00000AAB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1171                              <2> 
  1172                              <2> %assign i +1
  1173 00000AB3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1174                              <2> 
  1175                              <2> %assign i +1
  1176 00000ABB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1177                              <2> 
  1178                              <2> %assign i +1
  1179 00000AC3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1180                              <2> 
  1181                              <2> %assign i +1
  1182 00000ACB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1183                              <2> 
  1184                              <2> %assign i +1
  1185 00000AD3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1186                              <2> 
  1187                              <2> %assign i +1
  1188 00000ADB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1189                              <2> 
  1190                              <2> %assign i +1
  1191 00000AE3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1192                              <2> 
  1193                              <2> %assign i +1
  1194 00000AEB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1195                              <2> 
  1196                              <2> %assign i +1
  1197 00000AF3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1198                              <2> 
  1199                              <2> %assign i +1
  1200 00000AFB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1201                              <2> 
  1202                              <2> %assign i +1
  1203 00000B03 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1204                              <2> 
  1205                              <2> %assign i +1
  1206 00000B0B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1207                              <2> 
  1208                              <2> %assign i +1
  1209 00000B13 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1210                              <2> 
  1211                              <2> %assign i +1
  1212 00000B1B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1213                              <2> 
  1214                              <2> %assign i +1
  1215 00000B23 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1216                              <2> 
  1217                              <2> %assign i +1
  1218 00000B2B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1219                              <2> 
  1220                              <2> %assign i +1
  1221 00000B33 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1222                              <2> 
  1223                              <2> %assign i +1
  1224 00000B3B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1225                              <2> 
  1226                              <2> %assign i +1
  1227 00000B43 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1228                              <2> 
  1229                              <2> %assign i +1
  1230 00000B4B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1231                              <2> 
  1232                              <2> %assign i +1
  1233 00000B53 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1234                              <2> 
  1235                              <2> %assign i +1
  1236 00000B5B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1237                              <2> 
  1238                              <2> %assign i +1
  1239 00000B63 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1240                              <2> 
  1241                              <2> %assign i +1
  1242 00000B6B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1243                              <2> 
  1244                              <2> %assign i +1
  1245 00000B73 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1246                              <2> 
  1247                              <2> %assign i +1
  1248 00000B7B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1249                              <2> 
  1250                              <2> %assign i +1
  1251 00000B83 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1252                              <2> 
  1253                              <2> %assign i +1
  1254 00000B8B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1255                              <2> 
  1256                              <2> %assign i +1
  1257 00000B93 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1258                              <2> 
  1259                              <2> %assign i +1
  1260 00000B9B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1261                              <2> 
  1262                              <2> %assign i +1
  1263 00000BA3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1264                              <2> 
  1265                              <2> %assign i +1
  1266 00000BAB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1267                              <2> 
  1268                              <2> %assign i +1
  1269 00000BB3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1270                              <2> 
  1271                              <2> %assign i +1
  1272 00000BBB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1273                              <2> 
  1274                              <2> %assign i +1
  1275 00000BC3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1276                              <2> 
  1277                              <2> %assign i +1
  1278 00000BCB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1279                              <2> 
  1280                              <2> %assign i +1
  1281                              <1> idt_end:
  1282                              <1> [BITS 32]
  1283                                  	%include "source/realmode.asm"
  1284                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1285                              <1> 			;and the return address is in realmodereturn
  1286 00000BD3 FA                  <1> 	cli
  1287 00000BD4 A3[E60C0000]        <1> 	mov [realmodeeax], eax
  1288 00000BD9 891D[E20C0000]      <1> 	mov [realmodeebx], ebx
  1289 00000BDF 8925[D40C0000]      <1> 	mov [pmodeesp], esp
  1290                              <1> 
  1291 00000BE5 BB[DE0C0000]        <1> 	mov ebx, cr0old
  1292                              <1> rmcopytofirstmbyte:
  1293 00000BEA 8B03                <1> 	mov eax, [ebx]
  1294 00000BEC 658903              <1> 	mov [gs:ebx], eax
  1295 00000BEF 81C304000000        <1> 	add ebx, 4
  1296 00000BF5 81FB[EE0C0000]      <1> 	cmp ebx, realmodeptr
  1297 00000BFB 76ED                <1> 	jbe rmcopytofirstmbyte
  1298                              <1> 
  1299 00000BFD EA[040C0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1300                              <1> 
  1301                              <1> [BITS 16]
  1302                              <1> protected16bit:
  1303 00000C04 B84000              <1> 	mov ax, V8086_DATA_SEL
  1304 00000C07 8ED8                <1> 	mov ds, ax
  1305 00000C09 8EC0                <1> 	mov es, ax
  1306 00000C0B 8EE0                <1> 	mov fs, ax
  1307 00000C0D 8EE8                <1> 	mov gs, ax
  1308 00000C0F 8ED0                <1> 	mov ss, ax
  1309 00000C11 66BC[1EB00000]      <1> 	mov esp, stackend
  1310 00000C17 0F20C0              <1> 	mov eax, cr0
  1311 00000C1A 66A3[DE0C]          <1> 	mov [cr0old], eax
  1312 00000C1E 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1313 00000C24 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1314 00000C27 EA[2C0C]0010        <1> 	jmp 0x1000:inrealmode
  1315                              <1> 
  1316                              <1> inrealmode:
  1317 00000C2C 8CC8                <1> 	mov ax, cs
  1318 00000C2E 8ED8                <1> 	mov ds, ax
  1319 00000C30 8EC0                <1> 	mov es, ax
  1320 00000C32 8EE0                <1> 	mov fs, ax
  1321 00000C34 8EE8                <1> 	mov gs, ax
  1322 00000C36 8ED0                <1> 	mov ss, ax
  1323 00000C38 BC[1EB0]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1324                              <1> 	
  1325 00000C3B B011                <1> 	mov al, 0x11
  1326 00000C3D E620                <1> 	out 0x20, al
  1327 00000C3F E6A0                <1> 	out 0xA0, al
  1328 00000C41 B008                <1> 	mov al, 0x8		;interrupt for master
  1329 00000C43 E621                <1> 	out 0x21, al
  1330 00000C45 B070                <1> 	mov al, 0x70	;interrupt for slave
  1331 00000C47 E6A1                <1> 	out 0xA1, al
  1332 00000C49 B004                <1> 	mov al, 4
  1333 00000C4B E621                <1> 	out 0x21, al
  1334 00000C4D B002                <1> 	mov al, 2
  1335 00000C4F E6A1                <1> 	out 0xA1, al
  1336 00000C51 B001                <1> 	mov al, 0x1
  1337 00000C53 E621                <1> 	out 0x21, al
  1338 00000C55 B001                <1> 	mov al, 0x1
  1339 00000C57 E6A1                <1> 	out 0xA1, al
  1340                              <1> 	
  1341 00000C59 0F011E[D80C]        <1> 	lidt [idt_real]
  1342 00000C5E FB                  <1> 	sti
  1343                              <1> 
  1344 00000C5F 66A1[E60C]          <1> 	mov eax, [realmodeeax]
  1345 00000C63 668B1E[E20C]        <1> 	mov ebx, [realmodeebx]
  1346                              <1> 
  1347 00000C68 FF16[EE0C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1348                              <1> 
  1349 00000C6C 66A3[E60C]          <1> 	mov [realmodeeax], eax
  1350 00000C70 66891E[E20C]        <1> 	mov [realmodeebx], ebx
  1351                              <1> 
  1352 00000C75 FA                  <1> 	cli
  1353 00000C76 0F0116[6F03]        <1> 	lgdt [gdtr]
  1354 00000C7B 0F011E[7503]        <1> 	lidt [idtr]
  1355 00000C80 0F20C0              <1> 	mov eax, cr0
  1356 00000C83 0C01                <1> 	or al, 1
  1357 00000C85 0F22C0              <1> 	mov cr0,eax
  1358 00000C88 EA[8D0C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1359                              <1> 
  1360                              <1> [BITS 32]
  1361                              <1> returntopmode:
  1362 00000C8D 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1363 00000C91 8ED8                <1> 	mov ds, ax
  1364 00000C93 8EC0                <1> 	mov es, ax
  1365 00000C95 8EE0                <1> 	mov fs, ax
  1366 00000C97 8ED0                <1> 	mov ss, ax
  1367 00000C99 8B25[D40C0000]      <1> 	mov esp, [pmodeesp]
  1368 00000C9F 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1369 00000CA3 8EE8                <1> 	mov gs, ax
  1370                              <1> 
  1371 00000CA5 BB[DE0C0000]        <1> 	mov ebx, cr0old
  1372                              <1> rmcopyfromfirstmbyte:
  1373 00000CAA 658B03              <1> 	mov eax, [gs:ebx]
  1374 00000CAD 8903                <1> 	mov [ebx], eax
  1375 00000CAF 81C304000000        <1> 	add ebx, 4
  1376 00000CB5 81FB[EE0C0000]      <1> 	cmp ebx, realmodeptr
  1377 00000CBB 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1378                              <1> 
  1379 00000CBD E811520000          <1> 	call initialize.pic ;reset irq's and masks
  1380 00000CC2 FB                  <1> 	sti
  1381 00000CC3 A1[E60C0000]        <1> 	mov eax, [realmodeeax]
  1382 00000CC8 8B1D[E20C0000]      <1> 	mov ebx, [realmodeebx]
  1383 00000CCE FF25[EA0C0000]      <1> 	jmp dword [realmodereturn]
  1384                              <1> 	
  1385 00000CD4 00000000            <1> pmodeesp dd 0
  1386                              <1> idt_real:
  1387 00000CD8 FF03                <1> 	dw 0x3FF
  1388 00000CDA 00000000            <1> 	dd 0
  1389 00000CDE 00000000            <1> cr0old dd 0
  1390 00000CE2 00000000            <1> realmodeebx dd 0
  1391 00000CE6 00000000            <1> realmodeeax dd 0
  1392 00000CEA 00000000            <1> realmodereturn dd 0
  1393 00000CEE 0000                <1> realmodeptr dw 0
  1394 00000CF0 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1395                                  [BITS 32]
  1396                                      %include "source/exception.asm"
  1397                              <1> %ifdef exceptions.included
  1398                              <1> unhand:	
  1399                              <1> 	%assign i 0
  1400                              <1> 	%rep 32
  1401                              <1> 	mov byte [intprob], i
  1402                              <1> 	jmp unhand2
  1403                              <1> 	%assign i i+1
  1404                              <1> 	%endrep
  1405 00000CF4 C605[A6110000]00    <2>  mov byte [intprob], i
  1406 00000CFB E974010000          <2>  jmp unhand2
  1407                              <2>  %assign i i+1
  1408 00000D00 C605[A6110000]01    <2>  mov byte [intprob], i
  1409 00000D07 E968010000          <2>  jmp unhand2
  1410                              <2>  %assign i i+1
  1411 00000D0C C605[A6110000]02    <2>  mov byte [intprob], i
  1412 00000D13 E95C010000          <2>  jmp unhand2
  1413                              <2>  %assign i i+1
  1414 00000D18 C605[A6110000]03    <2>  mov byte [intprob], i
  1415 00000D1F E950010000          <2>  jmp unhand2
  1416                              <2>  %assign i i+1
  1417 00000D24 C605[A6110000]04    <2>  mov byte [intprob], i
  1418 00000D2B E944010000          <2>  jmp unhand2
  1419                              <2>  %assign i i+1
  1420 00000D30 C605[A6110000]05    <2>  mov byte [intprob], i
  1421 00000D37 E938010000          <2>  jmp unhand2
  1422                              <2>  %assign i i+1
  1423 00000D3C C605[A6110000]06    <2>  mov byte [intprob], i
  1424 00000D43 E92C010000          <2>  jmp unhand2
  1425                              <2>  %assign i i+1
  1426 00000D48 C605[A6110000]07    <2>  mov byte [intprob], i
  1427 00000D4F E920010000          <2>  jmp unhand2
  1428                              <2>  %assign i i+1
  1429 00000D54 C605[A6110000]08    <2>  mov byte [intprob], i
  1430 00000D5B E914010000          <2>  jmp unhand2
  1431                              <2>  %assign i i+1
  1432 00000D60 C605[A6110000]09    <2>  mov byte [intprob], i
  1433 00000D67 E908010000          <2>  jmp unhand2
  1434                              <2>  %assign i i+1
  1435 00000D6C C605[A6110000]0A    <2>  mov byte [intprob], i
  1436 00000D73 E9FC000000          <2>  jmp unhand2
  1437                              <2>  %assign i i+1
  1438 00000D78 C605[A6110000]0B    <2>  mov byte [intprob], i
  1439 00000D7F E9F0000000          <2>  jmp unhand2
  1440                              <2>  %assign i i+1
  1441 00000D84 C605[A6110000]0C    <2>  mov byte [intprob], i
  1442 00000D8B E9E4000000          <2>  jmp unhand2
  1443                              <2>  %assign i i+1
  1444 00000D90 C605[A6110000]0D    <2>  mov byte [intprob], i
  1445 00000D97 E9D8000000          <2>  jmp unhand2
  1446                              <2>  %assign i i+1
  1447 00000D9C C605[A6110000]0E    <2>  mov byte [intprob], i
  1448 00000DA3 E9CC000000          <2>  jmp unhand2
  1449                              <2>  %assign i i+1
  1450 00000DA8 C605[A6110000]0F    <2>  mov byte [intprob], i
  1451 00000DAF E9C0000000          <2>  jmp unhand2
  1452                              <2>  %assign i i+1
  1453 00000DB4 C605[A6110000]10    <2>  mov byte [intprob], i
  1454 00000DBB E9B4000000          <2>  jmp unhand2
  1455                              <2>  %assign i i+1
  1456 00000DC0 C605[A6110000]11    <2>  mov byte [intprob], i
  1457 00000DC7 E9A8000000          <2>  jmp unhand2
  1458                              <2>  %assign i i+1
  1459 00000DCC C605[A6110000]12    <2>  mov byte [intprob], i
  1460 00000DD3 E99C000000          <2>  jmp unhand2
  1461                              <2>  %assign i i+1
  1462 00000DD8 C605[A6110000]13    <2>  mov byte [intprob], i
  1463 00000DDF E990000000          <2>  jmp unhand2
  1464                              <2>  %assign i i+1
  1465 00000DE4 C605[A6110000]14    <2>  mov byte [intprob], i
  1466 00000DEB E984000000          <2>  jmp unhand2
  1467                              <2>  %assign i i+1
  1468 00000DF0 C605[A6110000]15    <2>  mov byte [intprob], i
  1469 00000DF7 E978000000          <2>  jmp unhand2
  1470                              <2>  %assign i i+1
  1471 00000DFC C605[A6110000]16    <2>  mov byte [intprob], i
  1472 00000E03 E96C000000          <2>  jmp unhand2
  1473                              <2>  %assign i i+1
  1474 00000E08 C605[A6110000]17    <2>  mov byte [intprob], i
  1475 00000E0F E960000000          <2>  jmp unhand2
  1476                              <2>  %assign i i+1
  1477 00000E14 C605[A6110000]18    <2>  mov byte [intprob], i
  1478 00000E1B E954000000          <2>  jmp unhand2
  1479                              <2>  %assign i i+1
  1480 00000E20 C605[A6110000]19    <2>  mov byte [intprob], i
  1481 00000E27 E948000000          <2>  jmp unhand2
  1482                              <2>  %assign i i+1
  1483 00000E2C C605[A6110000]1A    <2>  mov byte [intprob], i
  1484 00000E33 E93C000000          <2>  jmp unhand2
  1485                              <2>  %assign i i+1
  1486 00000E38 C605[A6110000]1B    <2>  mov byte [intprob], i
  1487 00000E3F E930000000          <2>  jmp unhand2
  1488                              <2>  %assign i i+1
  1489 00000E44 C605[A6110000]1C    <2>  mov byte [intprob], i
  1490 00000E4B E924000000          <2>  jmp unhand2
  1491                              <2>  %assign i i+1
  1492 00000E50 C605[A6110000]1D    <2>  mov byte [intprob], i
  1493 00000E57 E918000000          <2>  jmp unhand2
  1494                              <2>  %assign i i+1
  1495 00000E5C C605[A6110000]1E    <2>  mov byte [intprob], i
  1496 00000E63 E90C000000          <2>  jmp unhand2
  1497                              <2>  %assign i i+1
  1498 00000E68 C605[A6110000]1F    <2>  mov byte [intprob], i
  1499 00000E6F E900000000          <2>  jmp unhand2
  1500                              <2>  %assign i i+1
  1501                              <1> unhand2:
  1502 00000E74 FA                  <1> 	cli
  1503 00000E75 1E                  <1> 	push ds
  1504 00000E76 06                  <1> 	push es
  1505 00000E77 0FA0                <1> 	push fs
  1506 00000E79 0FA8                <1> 	push gs
  1507 00000E7B 16                  <1> 	push ss
  1508 00000E7C 60                  <1> 	pushad
  1509                              <1> %ifdef gui.included
  1510 00000E7D 803D[389E0000]00    <1> 	cmp byte [guion], 0
  1511 00000E84 0F8432000000        <1> 	je near noguiunhandstuff
  1512 00000E8A 66C705[A0110000]08- <1> 	mov word [locunhandy], 8
  1513 00000E92 00                  <1>
  1514 00000E93 66C705[A2110000]08- <1> 	mov word [locunhandx], 8
  1515 00000E9B 00                  <1>
  1516 00000E9C 668B1D[D8690000]    <1> 	mov bx, [background]
  1517 00000EA3 66891D[A4110000]    <1> 	mov [backgroundcache], bx
  1518 00000EAA C605[82550000]01    <1> 	mov byte [mousedisabled],1
  1519 00000EB1 66BB00F8            <1> 	mov bx, 1111100000000000b
  1520 00000EB5 66891D[D8690000]    <1> 	mov [background], bx
  1521                              <1> noguiunhandstuff:
  1522                              <1> %endif
  1523 00000EBC 89E6                <1> 	mov esi, esp
  1524 00000EBE 8935[94110000]      <1> 	mov [espfirst], esi
  1525 00000EC4 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1526 00000ECA 8935[90110000]      <1> 	mov [esploc], esi
  1527 00000ED0 BE[B5110000]        <1> 	mov esi, unhandmsg
  1528 00000ED5 8935[98110000]      <1> 	mov [esiloc], esi
  1529 00000EDB 31C9                <1> 	xor ecx, ecx
  1530 00000EDD 8A0D[A6110000]      <1> 	mov cl, [intprob]
  1531 00000EE3 BB[84150000]        <1> 	mov ebx, errortypes
  1532 00000EE8 C1E102              <1> 	shl ecx, 2
  1533 00000EEB 01CB                <1> 	add ebx, ecx
  1534 00000EED 81FB[C4150000]      <1> 	cmp ebx, errortypesend
  1535 00000EF3 7205                <1> 	jb gooderrortype
  1536 00000EF5 BB[C4150000]        <1> 	mov ebx, errortypesend
  1537                              <1> gooderrortype:
  1538 00000EFA 8B33                <1> 	mov esi, [ebx]
  1539                              <1> %ifdef gui.included
  1540 00000EFC 803D[389E0000]00    <1> 	cmp byte [guion], 0
  1541 00000F03 0F842D000000        <1> 	je near errortext
  1542 00000F09 668B0D[A0110000]    <1> 	mov cx, [locunhandy]
  1543 00000F10 668B15[A2110000]    <1> 	mov dx, [locunhandx]
  1544 00000F17 66B80100            <1> 	mov ax, 1
  1545 00000F1B 6631DB              <1> 	xor bx, bx
  1546 00000F1E E841600000          <1> 	call showstring2
  1547 00000F23 66890D[A0110000]    <1> 	mov [locunhandy], cx
  1548 00000F2A 668915[A2110000]    <1> 	mov [locunhandx], dx
  1549 00000F31 E905000000          <1> 	jmp errortextdone
  1550                              <1> %endif
  1551                              <1> errortext:
  1552 00000F36 E8E40D0000          <1> 	call print		;;get the error message and print it
  1553                              <1> errortextdone:
  1554 00000F3B 31C9                <1> 	xor ecx, ecx
  1555 00000F3D 8A0D[A6110000]      <1> 	mov cl, [intprob]
  1556 00000F43 E8E1010000          <1> 	call expdump
  1557                              <1> dumpstack:
  1558 00000F48 8B35[90110000]      <1> 	mov esi, [esploc]
  1559 00000F4E 39E6                <1> 	cmp esi, esp
  1560 00000F50 7216                <1> 	jb donedump
  1561 00000F52 368B0E              <1> 	mov ecx, [ss:esi]
  1562 00000F55 81EE04000000        <1> 	sub esi, 4
  1563 00000F5B 8935[90110000]      <1> 	mov [esploc], esi
  1564 00000F61 E8C3010000          <1> 	call expdump
  1565 00000F66 EBE0                <1> 	jmp dumpstack
  1566                              <1> donedump:
  1567 00000F68 0F20C1              <1> 	mov ecx, cr0
  1568 00000F6B E8B9010000          <1> 	call expdump
  1569 00000F70 0F20D1              <1> 	mov ecx, cr2
  1570 00000F73 E8B1010000          <1> 	call expdump
  1571 00000F78 0F20D9              <1> 	mov ecx, cr3
  1572 00000F7B E8A9010000          <1> 	call expdump
  1573 00000F80 0F20E1              <1> 	mov ecx, cr4
  1574 00000F83 E8A1010000          <1> 	call expdump
  1575 00000F88 0F00C9              <1> 	str ecx
  1576 00000F8B E899010000          <1> 	call expdump
  1577 00000F90 0F010D[AF110000]    <1> 	sidt [igdtcache]
  1578 00000F97 8B0D[B1110000]      <1> 	mov ecx, [igdtcache + 2]
  1579 00000F9D E887010000          <1> 	call expdump
  1580 00000FA2 0F0105[AF110000]    <1> 	sgdt [igdtcache]
  1581 00000FA9 8B0D[B1110000]      <1> 	mov ecx, [igdtcache + 2]
  1582 00000FAF E875010000          <1> 	call expdump
  1583 00000FB4 0F00C1              <1> 	sldt ecx
  1584 00000FB7 E86D010000          <1> 	call expdump
  1585 00000FBC 8B35[90110000]      <1> 	mov esi, [esploc]
  1586 00000FC2 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1587 00000FC7 81C710000000        <1> 	add edi, 16
  1588 00000FCD 893D[AB110000]      <1> 	mov [codelocend], edi
  1589 00000FD3 81EF20000000        <1> 	sub edi, 32
  1590                              <1> dumpcodeloop:
  1591 00000FD9 893D[A7110000]      <1> 	mov [codeloc], edi
  1592 00000FDF 8B0F                <1> 	mov ecx, [edi]
  1593 00000FE1 E843010000          <1> 	call expdump
  1594 00000FE6 8B3D[A7110000]      <1> 	mov edi, [codeloc]
  1595 00000FEC 81C704000000        <1> 	add edi, 4
  1596 00000FF2 3B3D[AB110000]      <1> 	cmp edi, [codelocend]
  1597 00000FF8 72DF                <1> 	jb dumpcodeloop
  1598 00000FFA BE[BA100000]        <1> 	mov esi, backtoosmsg
  1599                              <1> %ifdef gui.included
  1600 00000FFF 803D[389E0000]00    <1> 	cmp byte [guion], 0
  1601 00001006 741F                <1> 	je backtomsg
  1602                              <1> guibacktomsg:
  1603 00001008 668B15[A2110000]    <1> 	mov dx, [locunhandx]
  1604 0000100F 668B0D[A0110000]    <1> 	mov cx, [locunhandy]
  1605 00001016 66B80100            <1> 	mov ax, 1
  1606 0000101A 6631DB              <1> 	xor bx, bx
  1607 0000101D E8425F0000          <1> 	call showstring2
  1608 00001022 E905000000          <1> 	jmp backtomsgdone
  1609                              <1> backtomsg:
  1610                              <1> %endif
  1611 00001027 E8F30C0000          <1> 	call print
  1612                              <1> backtomsgdone:
  1613 0000102C 30C0                <1> 	xor al, al
  1614 0000102E E8BC110000          <1> 	call rdcharint
  1615 00001033 803D[A6110000]03    <1> 	cmp byte [intprob], 3
  1616 0000103A 7541                <1> 	jne nodebugint
  1617                              <1> %ifdef gui.included
  1618 0000103C 803D[389E0000]00    <1> 	cmp byte [guion], 0
  1619 00001043 7427                <1> 	je nodebuggui
  1620 00001045 668B1D[A4110000]    <1> 	mov bx, [backgroundcache]
  1621 0000104C 66891D[D8690000]    <1> 	mov [background], bx
  1622 00001053 6631DB              <1> 	xor bx, bx
  1623 00001056 C605[82550000]00    <1> 	mov byte [mousedisabled], 0
  1624 0000105D E838590000          <1> 	call guiclear
  1625 00001062 E875590000          <1> 	call reloadallgraphics
  1626 00001067 E83D150000          <1> 	call termcopy
  1627                              <1> nodebuggui:
  1628                              <1> %endif
  1629 0000106C 8B35[94110000]      <1> 	mov esi, [espfirst]
  1630 00001072 89F4                <1> 	mov esp, esi
  1631 00001074 61                  <1> 	popad
  1632 00001075 17                  <1> 	pop ss
  1633 00001076 0FA9                <1> 	pop gs
  1634 00001078 0FA1                <1> 	pop fs
  1635 0000107A 07                  <1> 	pop es
  1636 0000107B 1F                  <1> 	pop ds
  1637 0000107C CF                  <1> 	iret
  1638                              <1> nodebugint:
  1639 0000107D 61                  <1> 	popad
  1640 0000107E 17                  <1> 	pop ss
  1641 0000107F 0FA9                <1> 	pop gs
  1642 00001081 0FA1                <1> 	pop fs
  1643 00001083 07                  <1> 	pop es
  1644 00001084 1F                  <1> 	pop ds
  1645                              <1> %ifdef gui.included
  1646 00001085 803D[389E0000]00    <1> 	cmp byte [guion], 0
  1647 0000108C 7427                <1> 	je returnunhandgui
  1648 0000108E 668B1D[A4110000]    <1> 	mov bx, [backgroundcache]
  1649 00001095 66891D[D8690000]    <1> 	mov [background], bx
  1650 0000109C 6631DB              <1> 	xor bx, bx
  1651 0000109F C605[82550000]00    <1> 	mov byte [mousedisabled], 0
  1652 000010A6 E8EF580000          <1> 	call guiclear
  1653 000010AB E82C590000          <1> 	call reloadallgraphics
  1654 000010B0 E8F4140000          <1> 	call termcopy
  1655                              <1> %endif
  1656                              <1> returnunhandgui:
  1657 000010B5 E90A190000          <1> 	jmp nwcmd
  1658 000010BA 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1659 000010C3 737420616E79207072- <1>
  1660 000010CC 6F626C656D7320696E- <1>
  1661 000010D5 207468652049737375- <1>
  1662 000010DE 65732073656374696F- <1>
  1663 000010E7 6E20617420736F6C6C- <1>
  1664 000010F0 65726F732E676F6F67- <1>
  1665 000010F9 6C65636F64652E636F- <1>
  1666 00001102 6D0A                <1>
  1667 00001104 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1668 0000110D 206B657920746F2072- <1>
  1669 00001116 657475726E20746F20- <1>
  1670 0000111F 536F6C6C65724F530A- <1>
  1671 00001128 00                  <1>
  1672                              <1> expdump:
  1673 00001129 8B35[98110000]      <1> 	mov esi, [esiloc]
  1674 0000112F 89F7                <1> 	mov edi, esi
  1675 00001131 81C70F000000        <1> 	add edi, 15
  1676 00001137 81C604000000        <1> 	add esi, 4
  1677 0000113D 893D[98110000]      <1> 	mov [esiloc], edi
  1678 00001143 81EF03000000        <1> 	sub edi, 3
  1679 00001149 E8DD1C0000          <1> 	call converthex
  1680 0000114E 81EE04000000        <1> 	sub esi, 4
  1681                              <1> %ifdef gui.included
  1682 00001154 803D[389E0000]00    <1> 	cmp byte [guion], 0
  1683 0000115B 0F8429000000        <1> 	je near expdumptext
  1684 00001161 668B0D[A0110000]    <1> 	mov cx, [locunhandy]
  1685 00001168 668B15[A2110000]    <1> 	mov dx, [locunhandx]
  1686 0000116F 66B80100            <1> 	mov ax, 1
  1687 00001173 6631DB              <1> 	xor bx, bx
  1688 00001176 E8E95D0000          <1> 	call showstring2
  1689 0000117B 66890D[A0110000]    <1> 	mov [locunhandy], cx
  1690 00001182 668915[A2110000]    <1> 	mov [locunhandx], dx
  1691 00001189 C3                  <1> 	ret
  1692                              <1> %endif
  1693                              <1> expdumptext:
  1694 0000118A E8900B0000          <1> 	call print
  1695 0000118F C3                  <1> 	ret
  1696 00001190 00000000            <1> esploc dd 0
  1697 00001194 00000000            <1> espfirst dd 0
  1698 00001198 00000000            <1> esiloc dd 0
  1699 0000119C 00000000            <1> esiregbuf dd 0
  1700 000011A0 0100                <1> locunhandy dw 1
  1701 000011A2 0100                <1> locunhandx dw 1
  1702 000011A4 0000                <1> backgroundcache dw 0
  1703 000011A6 00                  <1> intprob db 0
  1704 000011A7 00000000            <1> codeloc dd 0
  1705 000011AB 00000000            <1> codelocend dd 0
  1706 000011AF 000000000000        <1> igdtcache dw 0,0,0
  1707                              <1> 	unhandmsg:	
  1708 000011B5 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1709 000011BE 303030FF0A00        <1>
  1710                              <1> unhndrg:
  1711 000011C4 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1712 000011CD 303030202000<rept>  <1>
  1713 0000122D FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1714 00001236 303030FF0A00        <1>
  1715 0000123C FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1716 00001245 303030202000<rept>  <1>
  1717 000012A5 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1718 000012AE 303030FF0A00        <1>
  1719 000012B4 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1720 000012BD 303030202000<rept>  <1>
  1721 0000131D FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1722 00001326 303030FF0A00        <1>
  1723 0000132C FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1724 00001335 303030202000<rept>  <1>
  1725 00001395 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1726 0000139E 303030FF0A00        <1>
  1727                              <1> unhandregs:
  1728 000013A4 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1729 000013AD 303030202000        <1>
  1730 000013B3 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1731 000013BC 303030202000        <1>
  1732 000013C2 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1733 000013CB 303030FF0A00        <1>
  1734 000013D1 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1735 000013DA 303030202000        <1>
  1736 000013E0 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1737 000013E9 303030202000        <1>
  1738 000013EF 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1739 000013F8 303030202000        <1>
  1740 000013FE 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1741 00001407 303030202000        <1>
  1742 0000140D 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1743 00001416 303030FF0A00        <1>
  1744 0000141C 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1745 00001425 303030202000        <1>
  1746 0000142B 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1747 00001434 303030202000        <1>
  1748 0000143A 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1749 00001443 303030202000        <1>
  1750 00001449 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1751 00001452 303030FF0A00        <1>
  1752 00001458 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1753 00001461 303030202000        <1>
  1754 00001467 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1755 00001470 303030202000        <1>
  1756 00001476 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1757 0000147F 303030202000        <1>
  1758 00001485 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1759 0000148E 303030FF0A00        <1>
  1760 00001494 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1761 0000149D 303030202000        <1>
  1762 000014A3 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1763 000014AC 303030202000        <1>
  1764 000014B2 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1765 000014BB 303030202000        <1>
  1766 000014C1 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1767 000014CA 303030FF0A00        <1>
  1768 000014D0 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1769 000014D9 303030202000        <1>
  1770 000014DF 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1771 000014E8 303030202000        <1>
  1772 000014EE 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1773 000014F7 303030202000        <1>
  1774 000014FD 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1775 00001506 303030FF0A00        <1>
  1776 0000150C FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1777 00001515 303030202000<rept>  <1>
  1778 0000152A FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1779 00001533 30303020FF00        <1>
  1780 00001539 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1781 00001542 3030305D2000        <1>
  1782 00001548 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1783 00001551 303030202000<rept>  <1>
  1784 00001575 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1785 0000157E 303030FF0A00        <1>
  1786                              <1> unhandmsgend:
  1787                              <1> 
  1788                              <1> errortypes:
  1789 00001584 [C8150000]          <1> 			dd err0
  1790 00001588 [2C160000]          <1> 			dd err1
  1791 0000158C [8D160000]          <1> 			dd err2
  1792 00001590 [E2160000]          <1> 			dd err3
  1793 00001594 [46170000]          <1> 			dd err4
  1794 00001598 [98170000]          <1> 			dd err5
  1795 0000159C [02180000]          <1> 			dd err6
  1796 000015A0 [6A180000]          <1> 			dd err7
  1797 000015A4 [B4180000]          <1> 			dd err8
  1798 000015A8 [11190000]          <1> 			dd err9
  1799 000015AC [6A190000]          <1> 			dd err10
  1800 000015B0 [B5190000]          <1> 			dd err11
  1801 000015B4 [051A0000]          <1> 			dd err12
  1802 000015B8 [5E1A0000]          <1> 			dd err13
  1803 000015BC [C11A0000]          <1> 			dd err14
  1804 000015C0 [FD1A0000]          <1> 			dd err15
  1805                              <1> errortypesend:
  1806 000015C4 [881B0000]          <1> 			dd unknownerror
  1807                              <1> 			
  1808 000015C8 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1809 000015D1 6279207A65726F3A0A  <1>
  1810 000015DA 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  1811 000015E3 6C79206C696D2061F6- <1>
  1812 000015EC 78203D20EC20776865- <1>
  1813 000015F5 6E206120697320616E- <1>
  1814 000015FE 79207265616C206E75- <1>
  1815 00001607 6D6265722E20486170- <1>
  1816 00001610 707920456173746572- <1>
  1817 00001619 210A                <1>
  1818 0000161B 202020202020202020- <1> 		db "            x",26,"0",10,0
  1819 00001624 202020781A300A00    <1>
  1820                              <1> 		
  1821 0000162C 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1822 00001635 65702F427265616B70- <1>
  1823 0000163E 6F696E743A0A        <1>
  1824 00001644 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1825 0000164D 696E74206661756C74- <1>
  1826 00001656 2C20627265616B706F- <1>
  1827 0000165F 696E7420747261702C- <1>
  1828 00001668 206F722073696E676C- <1>
  1829 00001671 652D73746570207472- <1>
  1830 0000167A 617020776173207472- <1>
  1831 00001683 696767657265642E0A- <1>
  1832 0000168C 00                  <1>
  1833                              <1> 		
  1834 0000168D 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1835 00001696 6C6520696E74657272- <1>
  1836 0000169F 7570743A0A          <1>
  1837 000016A4 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1838 000016AD 6520696E7465727275- <1>
  1839 000016B6 707420776173207472- <1>
  1840 000016BF 696767657265642074- <1>
  1841 000016C8 68617420636F756C64- <1>
  1842 000016D1 206E6F74206265206D- <1>
  1843 000016DA 61736B65642E0A00    <1>
  1844                              <1> 		
  1845 000016E2 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1846 000016EB 743A0A              <1>
  1847 000016EE 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1848 000016F7 727275707420697320- <1>
  1849 00001700 7573656420696E2070- <1>
  1850 00001709 726F6772616D732074- <1>
  1851 00001712 6F2073686F77207468- <1>
  1852 0000171B 6520737461636B2061- <1>
  1853 00001724 6E6420726567697374- <1>
  1854 0000172D 65727320616E642063- <1>
  1855 00001736 616E2062650A        <1>
  1856 0000173C 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1857 00001745 00                  <1>
  1858                              <1> 		
  1859 00001746 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1860 0000174F 0A                  <1>
  1861 00001750 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1862 00001759 73736F722072616E20- <1>
  1863 00001762 696E746F20616E2049- <1>
  1864 0000176B 4E544F20696E737472- <1>
  1865 00001774 756374696F6E207769- <1>
  1866 0000177D 746820746865206F76- <1>
  1867 00001786 6572666C6F7720666C- <1>
  1868 0000178F 6167207365742E0A00  <1>
  1869                              <1> 		
  1870 00001798 426F756E6473206368- <1> err5	db "Bounds check:",10
  1871 000017A1 65636B3A0A          <1>
  1872 000017A6 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1873 000017AF 73736F72207265626F- <1>
  1874 000017B8 756E6465642066726F- <1>
  1875 000017C1 6D206120424F554E44- <1>
  1876 000017CA 20696E737472756374- <1>
  1877 000017D3 696F6E2072756E206F- <1>
  1878 000017DC 6E20616E206F706572- <1>
  1879 000017E5 616E64207468617420- <1>
  1880 000017EE 776173206F75740A    <1>
  1881 000017F6 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1882 000017FF 2E0A00              <1>
  1883                              <1> 		
  1884 00001802 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1885 0000180B 70636F64653A0A      <1>
  1886 00001812 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1887 0000181B 73736F722068617320- <1>
  1888 00001824 6E6F20696465612077- <1>
  1889 0000182D 686174206974207761- <1>
  1890 00001836 7320747279696E6720- <1>
  1891 0000183F 746F20657865637574- <1>
  1892 00001848 652E20446F6E277420- <1>
  1893 00001851 72756E205353453420- <1>
  1894 0000185A 636F64650A          <1>
  1895 0000185F 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1896 00001868 0A00                <1>
  1897                              <1> 		
  1898 0000186A 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1899 00001873 6F72206E6F74206176- <1>
  1900 0000187C 61696C61626C653A0A  <1>
  1901 00001885 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1902 0000188E 206B6E6F7720746865- <1>
  1903 00001897 7920646F6E2774206D- <1>
  1904 000018A0 616B652074686F7365- <1>
  1905 000018A9 20616E796D6F726521- <1>
  1906 000018B2 0A00                <1>
  1907                              <1> 		
  1908 000018B4 446F75626C65206661- <1> err8	db "Double fault:",10
  1909 000018BD 756C743A0A          <1>
  1910 000018C2 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1911 000018CB 74696F6E2068616E64- <1>
  1912 000018D4 6C657220636F756C64- <1>
  1913 000018DD 206E6F742068616E64- <1>
  1914 000018E6 6C6520746861742069- <1>
  1915 000018EF 7420636F756C64206E- <1>
  1916 000018F8 6F742068616E646C65- <1>
  1917 00001901 20616E206578636570- <1>
  1918 0000190A 74696F6E2E0A00      <1>
  1919                              <1> 		
  1920 00001911 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1921 0000191A 6F72207365676D656E- <1>
  1922 00001923 74206F76657272756E- <1>
  1923 0000192C 3A0A00              <1>
  1924 0000192F 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1925 00001938 722068617070656E73- <1>
  1926 00001941 20696E206D6F646572- <1>
  1927 0000194A 6E20636F6D70757465- <1>
  1928 00001953 72732C20616E64206E- <1>
  1929 0000195C 657665722073686F75- <1>
  1930 00001965 6C642E0A00          <1>
  1931                              <1> 
  1932 0000196A 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1933 00001973 53533A0A            <1>
  1934 00001977 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1935 00001980 686174207761732073- <1>
  1936 00001989 776974636865642074- <1>
  1937 00001992 6F20697320696E7661- <1>
  1938 0000199B 6C69642E204E6F7468- <1>
  1939 000019A4 696E672066756E6E79- <1>
  1940 000019AD 20686572652E0A00    <1>
  1941                              <1> 		
  1942 000019B5 5365676D656E74206E- <1> err11	db "Segment not present:",10
  1943 000019BE 6F742070726573656E- <1>
  1944 000019C7 743A0A              <1>
  1945 000019CA 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  1946 000019D3 6E7420626974206F66- <1>
  1947 000019DC 20746865207365676D- <1>
  1948 000019E5 656E74206465736372- <1>
  1949 000019EE 6970746F7220697320- <1>
  1950 000019F7 73657420746F207A65- <1>
  1951 00001A00 726F2E0A00          <1>
  1952                              <1> 		
  1953 00001A05 537461636B20657863- <1> err12	db "Stack exception:",10
  1954 00001A0E 657074696F6E3A0A    <1>
  1955 00001A16 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  1956 00001A1F 7363726970746F7220- <1>
  1957 00001A28 697320696E76616C69- <1>
  1958 00001A31 64206F72206E6F7420- <1>
  1959 00001A3A 70726573656E74206F- <1>
  1960 00001A43 7220697473206C696D- <1>
  1961 00001A4C 697420697320746F6F- <1>
  1962 00001A55 20736D616C6C2E0A00  <1>
  1963                              <1> 		
  1964 00001A5E 47656E6572616C2070- <1> err13	db "General protection violation:",10
  1965 00001A67 726F74656374696F6E- <1>
  1966 00001A70 2076696F6C6174696F- <1>
  1967 00001A79 6E3A0A              <1>
  1968 00001A7C 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  1969 00001A85 746564207468652063- <1>
  1970 00001A8E 6F6D70757465722E20- <1>
  1971 00001A97 537465702061776179- <1>
  1972 00001AA0 20736C6F776C792E20- <1>
  1973 00001AA9 546865204642492069- <1>
  1974 00001AB2 73206F6E2069747320- <1>
  1975 00001ABB 7761792E0A00        <1>
  1976                              <1> 		
  1977 00001AC1 50616765206661756C- <1> err14	db "Page fault:",10
  1978 00001ACA 743A0A              <1>
  1979 00001ACD 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  1980 00001AD6 746861742077617320- <1>
  1981 00001ADF 726571756573746564- <1>
  1982 00001AE8 20776173206E6F7420- <1>
  1983 00001AF1 617661696C61626C65- <1>
  1984 00001AFA 2E0A00              <1>
  1985                              <1> 		
  1986 00001AFD 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  1987 00001B06 666F7220506C616E20- <1>
  1988 00001B0F 523A0A              <1>
  1989 00001B12 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  1990 00001B1B 727275707420697320- <1>
  1991 00001B24 726573657276656420- <1>
  1992 00001B2D 666F72207573616765- <1>
  1993 00001B36 206F6E6C7920627920- <1>
  1994 00001B3F 746865206D696C6974- <1>
  1995 00001B48 617279207768656E20- <1>
  1996 00001B51 6974206973206E6563- <1>
  1997 00001B5A 6573736172790A      <1>
  1998 00001B61 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  1999 00001B6A 746520612066756C6C- <1>
  2000 00001B73 2D7363616C6520636F- <1>
  2001 00001B7C 757020642782746174- <1>
  2002 00001B85 2E0A00              <1>
  2003                              <1> 		
  2004 00001B88 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2005 00001B91 68656C6C206A757374- <1>
  2006 00001B9A 2068617070656E6564- <1>
  2007 00001BA3 3F2049732065766572- <1>
  2008 00001BAC 796F6E65206F6B6179- <1>
  2009 00001BB5 3F2048617264206472- <1>
  2010 00001BBE 6976653F2056696465- <1>
  2011 00001BC7 6F20636172643F0A    <1>
  2012 00001BCF 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2013 00001BD8 726520796F75207468- <1>
  2014 00001BE1 6572653F0A00        <1>
  2015                              <1> %else
  2016                              <1> unhand:	
  2017                              <1> 	%assign i 0
  2018                              <1> 	%rep 32
  2019                              <1> 	mov byte [intprob], i
  2020                              <1> 	jmp unhand2
  2021                              <1> 	%assign i i+1
  2022                              <1> 	%endrep
  2023                              <1> unhand2:
  2024                              <1> 	cmp byte [intprob], 3
  2025                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2026                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2027                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2028                              <1> 	mov bl, [intprob]
  2029                              <1> 	jmp exitprog
  2030                              <1> intprob db 0
  2031                              <1> %endif
  2032                                      %include "source/ints.asm"
  2033                              <1> newints:	;for great justice
  2034 00001BE7 80FC00              <1> 	cmp ah, 0
  2035 00001BEA 0F847F000000        <1> 	je near intx0   ;kills app
  2036 00001BF0 80FC01              <1> 	cmp ah, 1
  2037 00001BF3 0F84FE000000        <1> 	je near intx1   ;print string
  2038 00001BF9 80FC02              <1> 	cmp ah, 2
  2039 00001BFC 0F8450010000        <1> 	je near intx2	;read string
  2040 00001C02 80FC03              <1> 	cmp ah, 3
  2041 00001C05 0F8470010000        <1> 	je near intx3	;clear screen
  2042 00001C0B 80FC04              <1> 	cmp ah, 4
  2043 00001C0E 0F84E2010000        <1> 	je near intx4	;read and print string
  2044 00001C14 80FC05              <1> 	cmp ah, 5
  2045 00001C17 0F84C6050000        <1> 	je near intx5	;get char
  2046 00001C1D 80FC06              <1> 	cmp ah, 6
  2047 00001C20 0F8418060000        <1> 	je near intx6	;print char
  2048 00001C26 80FC07              <1> 	cmp ah, 7
  2049 00001C29 0F8410080000        <1> 	je near intx7	;read file
  2050                              <1> ;	cmp ah, 8
  2051                              <1> ;	je near intx8	;write file
  2052 00001C2F 80FC09              <1> 	cmp ah, 9
  2053 00001C32 0F8411080000        <1> 	je near intx9	;convert number to string
  2054 00001C38 80FC0A              <1> 	cmp ah, 10
  2055 00001C3B 0F8420080000        <1> 	je near intx10	;convert string to number
  2056                              <1> %ifdef threads.included
  2057 00001C41 80FC0B              <1> 	cmp ah, 11
  2058 00001C44 0F8423080000        <1> 	je near intx11	;create thread
  2059                              <1> %endif
  2060 00001C4A 80FC0C              <1> 	cmp ah, 12
  2061 00001C4D 0F84F1080000        <1> 	je near intx12	;get time
  2062 00001C53 80FC0D              <1> 	cmp ah, 13
  2063 00001C56 0F84FD080000        <1> 	je near intx13	;set time
  2064 00001C5C 80FC0E              <1> 	cmp ah, 14
  2065 00001C5F 0F8404090000        <1> 	je near intx14	;run program
  2066 00001C65 80FC0F              <1> 	cmp ah, 15
  2067 00001C68 0F8410090000        <1> 	je near intx15	;get program info-location of name/options/number of options/environmental vars
  2068 00001C6E C3                  <1> 	ret
  2069                              <1> 	
  2070                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  2071                              <1> intx0:
  2072                              <1> 	%include 'source/interrupts/0_exit.asm'
  2073                              <2> exitprog:
  2074 00001C6F 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2075 00001C73 8ED8                <2> 	mov ds, ax
  2076 00001C75 8EC0                <2> 	mov es, ax
  2077 00001C77 8EE0                <2> 	mov fs, ax
  2078 00001C79 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2079 00001C7D 8EE8                <2> 	mov gs, ax
  2080 00001C7F C705[7B640000]0000- <2> 	mov dword [currentthread], 0
  2081 00001C87 0000                <2>
  2082 00001C89 C705[76640000]0400- <2> 	mov dword [lastthread], 4
  2083 00001C91 0000                <2>
  2084 00001C93 C605[7A640000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2085 00001C9A 8B25[7EB40000]      <2> 	mov esp, [previousstack] ;and this
  2086 00001CA0 81FB00000000        <2> 	cmp ebx, 0
  2087 00001CA6 0F8501000000        <2> 	jne near .error
  2088 00001CAC C3                  <2> 	ret
  2089                              <2> .error:
  2090 00001CAD 89D9                <2> 	mov ecx, ebx
  2091 00001CAF B006                <2> 	mov al, 6
  2092 00001CB1 A2[892E0000]        <2> 	mov [firsthexshown], al
  2093 00001CB6 51                  <2> 	push ecx
  2094 00001CB7 BE[D21C0000]        <2> 	mov esi, .msg1
  2095 00001CBC E840000000          <2> 	call printhighlight
  2096 00001CC1 59                  <2> 	pop ecx
  2097 00001CC2 E8D7110000          <2> 	call showhex
  2098 00001CC7 BE[E71C0000]        <2> 	mov esi, .msg2
  2099 00001CCC E830000000          <2> 	call printhighlight
  2100 00001CD1 C3                  <2> 	ret
  2101                              <2> 	
  2102 00001CD2 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2103 00001CDB 7461747573206F6620- <2>
  2104 00001CE4 307800              <2>
  2105 00001CE7 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2106 00001CF0 726E65642E0A00      <2>
  2107                              <1> intx1:
  2108                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2109 00001CF7 E82A000000          <2> call printint
  2110 00001CFC E9A4E5FFFF          <2> jmp timerinterrupt
  2111                              <2> 
  2112                              <2> 	printhighlight:
  2113 00001D01 6631C0              <2> 		xor ax, ax
  2114 00001D04 66BBF000            <2> 		mov bx, 0xF0
  2115 00001D08 E919000000          <2> 		jmp printint
  2116                              <2> 	printquiet:
  2117 00001D0D 6631C0              <2> 		xor ax, ax
  2118 00001D10 A2[511D0000]        <2> 		mov [endkeyprint], al
  2119 00001D15 66BB0700            <2> 		mov bx, 7
  2120 00001D19 E820000000          <2> 		call printint.b
  2121 00001D1E C3                  <2> 		ret
  2122                              <2>     print:
  2123 00001D1F 6631C0              <2> 		xor ax, ax
  2124 00001D22 66BB0700            <2> 		mov bx, 7
  2125                              <2> 	printint:	;;print line, al=last key,bl=modifier, esi=buffer
  2126 00001D26 56                  <2> 		push esi
  2127 00001D27 A2[511D0000]        <2> 		mov [endkeyprint], al
  2128 00001D2C E80D000000          <2> 		call .b
  2129 00001D31 89F1                <2> 		mov ecx, esi
  2130 00001D33 5F                  <2> 		pop edi
  2131 00001D34 29F9                <2> 		sub ecx, edi
  2132 00001D36 51                  <2> 		push ecx
  2133 00001D37 E86D080000          <2> 		call termcopy
  2134 00001D3C 59                  <2> 		pop ecx
  2135 00001D3D C3                  <2> 		ret
  2136                              <2> 	.b:
  2137 00001D3E 8A06                <2> 		mov al, [esi]
  2138 00001D40 3A05[511D0000]      <2> 		cmp al, [endkeyprint]
  2139 00001D46 7408                <2> 		je .done
  2140 00001D48 E816050000          <2> 		call prcharq
  2141 00001D4D 46                  <2> 		inc esi
  2142 00001D4E EBEE                <2> 		jmp .b
  2143                              <2> 	.done:
  2144 00001D50 C3                  <2> 		ret
  2145                              <2> 
  2146 00001D51 00                  <2> endkeyprint db 0
  2147                              <1> intx2:
  2148                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2149 00001D52 E805000000          <2> call readint
  2150 00001D57 E949E5FFFF          <2> jmp timerinterrupt
  2151                              <2> 
  2152                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2153 00001D5C 89C3                <2> 		mov ebx, eax
  2154                              <2> 	.b:
  2155 00001D5E 53                  <2> 		push ebx
  2156 00001D5F 57                  <2> 		push edi
  2157 00001D60 56                  <2> 		push esi
  2158 00001D61 30C0                <2> 		xor al, al
  2159 00001D63 E887040000          <2> 		call rdcharint
  2160 00001D68 5E                  <2> 		pop esi
  2161 00001D69 8806                <2> 		mov [esi], al
  2162 00001D6B 46                  <2> 		inc esi
  2163 00001D6C 5F                  <2> 		pop edi
  2164 00001D6D 5B                  <2> 		pop ebx
  2165 00001D6E 39FE                <2> 		cmp esi, edi
  2166 00001D70 7304                <2> 		jae .done
  2167 00001D72 38D8                <2> 		cmp al, bl
  2168 00001D74 75E8                <2> 		jne .b
  2169                              <2> 	.done:
  2170 00001D76 4E                  <2> 		dec esi
  2171 00001D77 C60600              <2> 		mov byte [esi], 0
  2172 00001D7A C3                  <2> 		ret
  2173                              <1> intx3:
  2174                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2175 00001D7B E805000000          <2> call clear
  2176 00001D80 E920E5FFFF          <2> jmp timerinterrupt
  2177                              <2> %ifdef io.serial
  2178                              <2> clear:
  2179                              <2> 	ret
  2180                              <2> %else
  2181                              <2> clear:		
  2182 00001D85 668B0D[3B240000]    <2> 		mov cx, [charxy]
  2183 00001D8C BF[14D20000]        <2> 		mov edi, videobuf
  2184 00001D91 31C0                <2> 		xor eax, eax
  2185 00001D93 A3[31240000]        <2> 		mov [linebeginpos], eax
  2186 00001D98 A3[35240000]        <2> 		mov [videobufpos], eax
  2187 00001D9D 6631D2              <2> 		xor dx, dx
  2188 00001DA0 66A3[39240000]      <2> 		mov [charpos], ax
  2189 00001DA6 B407                <2> 		mov ah, 7
  2190                              <2> 	clearb:
  2191 00001DA8 668907              <2> 		mov [edi], ax
  2192 00001DAB 81C702000000        <2> 		add edi, 2
  2193 00001DB1 FEC9                <2> 		dec cl
  2194 00001DB3 80F900              <2> 		cmp cl, 0
  2195 00001DB6 75F0                <2> 		jne clearb
  2196 00001DB8 8A0D[3B240000]      <2> 		mov cl, [charxy]
  2197 00001DBE FECD                <2> 		dec ch
  2198 00001DC0 80FD00              <2> 		cmp ch, 0
  2199 00001DC3 75E3                <2> 		jne clearb
  2200                              <2> 	cleardouble:
  2201 00001DC5 BF[B83C0100]        <2> 		mov edi, videobuf2
  2202 00001DCA 668B0D[3B240000]    <2> 		mov cx, [charxy]
  2203 00001DD1 31C0                <2> 		xor eax, eax
  2204                              <2> 	clearc:
  2205 00001DD3 668907              <2> 		mov [edi], ax
  2206 00001DD6 81C702000000        <2> 		add edi, 2
  2207 00001DDC FEC9                <2> 		dec cl
  2208 00001DDE 80F900              <2> 		cmp cl, 0
  2209 00001DE1 75F0                <2> 		jne clearc
  2210 00001DE3 8A0D[3B240000]      <2> 		mov cl, [charxy]
  2211 00001DE9 FECD                <2> 		dec ch
  2212 00001DEB 80FD00              <2> 		cmp ch, 0
  2213 00001DEE 75E3                <2> 		jne clearc
  2214 00001DF0 E8B4070000          <2> 		call termcopy
  2215 00001DF5 C3                  <2> 		ret
  2216                              <2> %endif
  2217                              <2> 		
  2218                              <1> intx4:
  2219                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2220 00001DF6 E809000000          <2> call rdprint
  2221 00001DFB E9A5E4FFFF          <2> jmp timerinterrupt
  2222                              <2> 
  2223                              <2> readline:
  2224 00001E00 B00A                <2>   mov al, 10
  2225 00001E02 B307                <2>   mov bl, 7
  2226                              <2> rdprint:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  2227 00001E04 E80D000000          <2> 	call rdprintdos
  2228 00001E09 50                  <2> 	push eax
  2229 00001E0A A0[D0210000]        <2> 	mov al, [endkeyrdpr]
  2230 00001E0F E83E040000          <2> 	call prcharint
  2231 00001E14 58                  <2> 	pop eax
  2232 00001E15 C3                  <2> 	ret
  2233                              <2> 
  2234                              <2> 	rdprintdos:
  2235 00001E16 8935[D8210000]      <2> 		mov [buftxtloc], esi
  2236 00001E1C A2[D0210000]        <2> 		mov [endkeyrdpr], al
  2237 00001E21 881D[D1210000]      <2> 		mov [modkeyrdpr], bl
  2238 00001E27 8935[D2210000]      <2> 		mov [firstesirdpr], esi
  2239 00001E2D 893D[DC210000]      <2> 		mov [endbufferrdpr], edi
  2240 00001E33 8B3D[68A70100]      <2> 		mov edi, [commandsentered]
  2241 00001E39 893D[64A70100]      <2> 		mov [commandlistentries], edi
  2242                              <2> 	rdprintb:
  2243 00001E3F 56                  <2> 		push esi
  2244 00001E40 B001                <2> 		mov al, 1
  2245 00001E42 E8A8030000          <2> 		call rdcharint
  2246 00001E47 5E                  <2> 		pop esi
  2247                              <2> %ifdef io.serial
  2248                              <2> 		cmp ah, 0x41
  2249                              <2> 		je near rdprup
  2250                              <2> 		cmp ah, 0x42
  2251                              <2> 		je near rdprdown
  2252                              <2> 		cmp ah, 0x43
  2253                              <2> 		je near rdprright
  2254                              <2> 		cmp ah, 0x44
  2255                              <2> 		je near rdprleft
  2256                              <2> 		cmp ah, 0x31
  2257                              <2> 		je near rdprhome
  2258                              <2> 		cmp ah, 0x48
  2259                              <2> 		je near rdprhome
  2260                              <2> 		cmp ah, 0x46
  2261                              <2> 		je near rdprend
  2262                              <2> 		cmp ah, 0x33
  2263                              <2> 		je near rdprdel
  2264                              <2> 		cmp ah, 0x34
  2265                              <2> 		je near rdprend
  2266                              <2> %else
  2267 00001E48 803D[715B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2268 00001E4F 751B                <2> 		jne notspecialrdprnt
  2269 00001E51 80FC53              <2> 		cmp ah, 0x53
  2270 00001E54 0F841E030000        <2> 		je near rdprdel
  2271 00001E5A 80FC47              <2> 		cmp ah, 0x47
  2272 00001E5D 0F8407010000        <2> 		je near rdprhome
  2273 00001E63 80FC4F              <2> 		cmp ah, 0x4F
  2274 00001E66 0F841D010000        <2> 		je near rdprend
  2275                              <2> 	notspecialrdprnt:
  2276 00001E6C 80FC50              <2> 		cmp ah, 0x50
  2277 00001E6F 0F849B010000        <2> 		je near rdprdown
  2278 00001E75 80FC4D              <2> 		cmp ah, 0x4D
  2279 00001E78 0F844A010000        <2> 		je near rdprright
  2280 00001E7E 80FC4B              <2> 		cmp ah, 0x4B
  2281 00001E81 0F841F010000        <2> 		je near rdprleft
  2282 00001E87 80FC48              <2> 		cmp ah, 0x48
  2283 00001E8A 0F84C3010000        <2> 		je near rdprup
  2284                              <2> %endif
  2285 00001E90 3C08                <2> 		cmp al, 8
  2286 00001E92 0F84FB020000        <2> 		je near rdprbscheck
  2287 00001E98 3C00                <2> 		cmp al, 0
  2288 00001E9A 74A3                <2> 		je rdprintb
  2289 00001E9C 80FC00              <2> 		cmp ah, 0
  2290 00001E9F 749E                <2> 		je rdprintb
  2291 00001EA1 8806                <2> 		mov [esi], al
  2292 00001EA3 46                  <2> 		inc esi
  2293                              <2> 	bscheckequal:
  2294 00001EA4 8A1D[D1210000]      <2> 		mov bl, [modkeyrdpr]
  2295 00001EAA 8A3D[D7210000]      <2> 		mov bh, [txtmask]
  2296 00001EB0 80FF00              <2> 		cmp bh, 0
  2297 00001EB3 7404                <2> 		je nomasktxt
  2298 00001EB5 88F8                <2> 		mov al, bh
  2299 00001EB7 30FF                <2> 		xor bh, bh
  2300                              <2> 	nomasktxt:
  2301 00001EB9 56                  <2> 		push esi
  2302 00001EBA 66A3[CE210000]      <2> 		mov [axcache], ax
  2303 00001EC0 8A25[D0210000]      <2> 		mov ah, [endkeyrdpr]
  2304 00001EC6 38E0                <2> 		cmp al, ah
  2305 00001EC8 742E                <2> 		je nobackprintbuftxt2
  2306 00001ECA E883030000          <2> 		call prcharint
  2307 00001ECF BE[FEC60000]        <2> 		mov esi, buftxt2
  2308 00001ED4 E834FEFFFF          <2> 		call printquiet
  2309 00001ED9 B020                <2> 		mov al, " "
  2310 00001EDB E883030000          <2> 		call prcharq
  2311 00001EE0 B008                <2> 		mov al, 8
  2312 00001EE2 81FE[FEC60000]      <2> 		cmp esi, buftxt2
  2313 00001EE8 740E                <2> 		je nobackprintbuftxt2
  2314                              <2> 	backprintbuftxt2:
  2315 00001EEA E874030000          <2> 		call prcharq
  2316 00001EEF 4E                  <2> 		dec esi
  2317 00001EF0 81FE[FEC60000]      <2> 		cmp esi, buftxt2
  2318 00001EF6 77F2                <2> 		ja backprintbuftxt2
  2319                              <2> 	nobackprintbuftxt2:
  2320 00001EF8 3C0A                <2> 		cmp al, 10
  2321 00001EFA 7405                <2> 		je nonobackprint
  2322 00001EFC E851030000          <2> 		call prcharint
  2323                              <2> 	nonobackprint:
  2324 00001F01 5E                  <2> 		pop esi
  2325 00001F02 3B35[DC210000]      <2> 		cmp esi, [endbufferrdpr]
  2326 00001F08 0F8319000000        <2> 		jae near donerdprinc
  2327 00001F0E 66A1[CE210000]      <2> 		mov ax, [axcache]
  2328 00001F14 8A25[D0210000]      <2> 		mov ah, [endkeyrdpr]
  2329 00001F1A 38E0                <2> 		cmp al, ah
  2330 00001F1C 0F851DFFFFFF        <2> 		jne rdprintb
  2331 00001F22 E901000000          <2> 		jmp donerdprint
  2332                              <2> 	donerdprinc:
  2333 00001F27 46                  <2> 		inc esi
  2334                              <2> 	donerdprint:
  2335 00001F28 4E                  <2> 		dec esi
  2336 00001F29 BF[FEC60000]        <2> 		mov edi, buftxt2
  2337                              <2> 	copylaterstuff:
  2338 00001F2E 8A07                <2> 		mov al, [edi]
  2339 00001F30 3C00                <2> 		cmp al, 0
  2340 00001F32 7406                <2> 		je nocopylaterstuff
  2341 00001F34 8806                <2> 		mov [esi], al
  2342 00001F36 47                  <2> 		inc edi
  2343 00001F37 46                  <2> 		inc esi
  2344 00001F38 EBF4                <2> 		jmp copylaterstuff
  2345                              <2> 	nocopylaterstuff:
  2346 00001F3A C60600              <2> 		mov byte [esi], 0
  2347 00001F3D E80B000000          <2> 		call clearbuftxt2
  2348 00001F42 89F1                <2> 		mov ecx, esi
  2349 00001F44 8B3D[D2210000]      <2> 		mov edi, [firstesirdpr]
  2350 00001F4A 29F9                <2> 		sub ecx, edi
  2351 00001F4C C3                  <2> 		ret
  2352                              <2> 	
  2353                              <2> 	clearbuftxt2:
  2354 00001F4D 30C0                <2> 		xor al, al
  2355 00001F4F BF[FEC60000]        <2> 		mov edi, buftxt2
  2356                              <2> 	clearbuftxt2lp:
  2357 00001F54 8807                <2> 		mov [edi], al
  2358 00001F56 47                  <2> 		inc edi
  2359 00001F57 81FF[FECA0000]      <2> 		cmp edi, buftxt
  2360 00001F5D 75F5                <2> 		jne clearbuftxt2lp
  2361 00001F5F C3                  <2> 		ret
  2362                              <2> 	
  2363                              <2> 	rdprintb2:
  2364 00001F60 E844060000          <2> 		call termcopy
  2365 00001F65 E9D5FEFFFF          <2> 		jmp rdprintb
  2366                              <2> 	
  2367                              <2> 	rdprhome:
  2368 00001F6A 3B35[D8210000]      <2> 		cmp esi, [buftxtloc]
  2369 00001F70 0F84EAFFFFFF        <2> 		je near rdprintb2
  2370 00001F76 BF[FEC60000]        <2> 		mov edi, buftxt2
  2371 00001F7B 8A07                <2> 		mov al, [edi]
  2372 00001F7D E82F020000          <2> 		call shiftbuftxt2
  2373 00001F82 E8DC020000          <2> 		call prcharq
  2374 00001F87 EBE1                <2> 		jmp rdprhome
  2375                              <2> 		
  2376                              <2> 	rdprend:
  2377 00001F89 BF[FEC60000]        <2> 		mov edi, buftxt2
  2378 00001F8E 8A07                <2> 		mov al, [edi]
  2379 00001F90 3C00                <2> 		cmp al, 0
  2380 00001F92 0F84C8FFFFFF        <2> 		je near rdprintb2
  2381 00001F98 8806                <2> 		mov [esi], al
  2382 00001F9A E849000000          <2> 		call shiftbuftxt2lft
  2383 00001F9F E8BF020000          <2> 		call prcharq
  2384 00001FA4 EBE3                <2> 		jmp rdprend
  2385                              <2> 	
  2386                              <2> 	rdprleft:
  2387 00001FA6 3B35[D8210000]      <2> 		cmp esi, [buftxtloc]
  2388 00001FAC 0F848DFEFFFF        <2> 		je near rdprintb
  2389 00001FB2 BF[FEC60000]        <2> 		mov edi, buftxt2
  2390 00001FB7 8A07                <2> 		mov al, [edi]
  2391 00001FB9 E8F3010000          <2> 		call shiftbuftxt2
  2392 00001FBE E88F020000          <2> 		call prcharint
  2393 00001FC3 E977FEFFFF          <2> 		jmp rdprintb
  2394                              <2> 		
  2395                              <2> 	rdprright:
  2396 00001FC8 BF[FEC60000]        <2> 		mov edi, buftxt2
  2397 00001FCD 8A07                <2> 		mov al, [edi]
  2398 00001FCF 3C00                <2> 		cmp al, 0
  2399 00001FD1 0F8468FEFFFF        <2> 		je near rdprintb
  2400 00001FD7 8806                <2> 		mov [esi], al
  2401 00001FD9 E80A000000          <2> 		call shiftbuftxt2lft
  2402 00001FDE E86F020000          <2> 		call prcharint
  2403 00001FE3 E957FEFFFF          <2> 		jmp rdprintb
  2404                              <2> 	shiftbuftxt2lft:
  2405 00001FE8 3C00                <2> 		cmp al, 0
  2406 00001FEA 7408                <2> 		je noshiftbuftxt2lft
  2407 00001FEC 47                  <2> 		inc edi
  2408 00001FED 8A07                <2> 		mov al, [edi]
  2409 00001FEF 8847FF              <2> 		mov [edi - 1], al
  2410 00001FF2 EBF4                <2> 		jmp shiftbuftxt2lft
  2411                              <2> 	noshiftbuftxt2lft:
  2412 00001FF4 8A06                <2> 		mov al, [esi]
  2413 00001FF6 46                  <2> 		inc esi
  2414 00001FF7 8A1D[D1210000]      <2> 		mov bl, [modkeyrdpr]
  2415 00001FFD C3                  <2> 		ret
  2416                              <2> 		
  2417                              <2> 	rdprdownbck:
  2418 00001FFE FECC                <2> 		dec ah
  2419 00002000 8825[D6210000]      <2> 		mov [commandedit], ah
  2420 00002006 E88D000000          <2> 		call rdprbckspc
  2421 0000200B E92FFEFFFF          <2> 		jmp rdprintb
  2422                              <2> 	
  2423                              <2> 	rdprdown:
  2424 00002010 8A25[D6210000]      <2> 		mov ah, [commandedit]
  2425 00002016 80FC01              <2> 		cmp ah, 1
  2426 00002019 0F8620FEFFFF        <2> 		jbe near rdprintb
  2427 0000201F 8B3D[68A70100]      <2> 		mov edi, [commandsentered]
  2428 00002025 3B3D[64A70100]      <2> 		cmp edi, [commandlistentries]
  2429 0000202B 7618                <2> 		jbe .nofix
  2430 0000202D 8105[64A70100]0200- <2> 		add dword [commandlistentries], 2
  2431 00002035 0000                <2>
  2432 00002037 3B3D[64A70100]      <2> 		cmp edi, [commandlistentries]
  2433 0000203D 7706                <2> 		ja .nofix
  2434 0000203F 893D[64A70100]      <2> 		mov [commandlistentries], edi
  2435                              <2> 	.nofix:
  2436 00002045 80FC02              <2> 		cmp ah, 2
  2437 00002048 74B4                <2> 		je rdprdownbck
  2438 0000204A 80EC02              <2> 		sub ah, 2
  2439 0000204D 8825[D6210000]      <2> 		mov [commandedit], ah
  2440                              <2> 		
  2441                              <2> 	rdprup:
  2442 00002053 3805[D6210000]      <2> 		cmp [commandedit], al
  2443 00002059 0F84E0FDFFFF        <2> 		je near rdprintb
  2444 0000205F 813D[64A70100]0000- <2> 		cmp dword [commandlistentries], 0
  2445 00002067 0000                <2>
  2446 00002069 0F84D0FDFFFF        <2> 		je near rdprintb
  2447 0000206F FF0D[64A70100]      <2> 		dec dword [commandlistentries]
  2448                              <2> 	.lp:
  2449 00002075 BF[FEC60000]        <2> 		mov edi, buftxt2
  2450 0000207A 8A07                <2> 		mov al, [edi]
  2451 0000207C 3C00                <2> 		cmp al, 0
  2452 0000207E 740E                <2> 		je .start
  2453 00002080 8806                <2> 		mov [esi], al
  2454 00002082 E861FFFFFF          <2> 		call shiftbuftxt2lft
  2455 00002087 E8D7010000          <2> 		call prcharq
  2456 0000208C EBE7                <2> 		jmp .lp
  2457                              <2> 	.start:
  2458 0000208E E805000000          <2> 		call rdprbckspc
  2459 00002093 E941000000          <2> 		jmp getcurrentcommandstr
  2460                              <2> 	rdprbckspc:
  2461 00002098 3B35[D8210000]      <2> 		cmp esi, [buftxtloc]
  2462 0000209E 742B                <2> 		je nordprupbck
  2463                              <2> 	rdprupbckspclp:
  2464 000020A0 B008                <2> 		mov al, 8
  2465 000020A2 8A1D[D1210000]      <2> 		mov bl, [modkeyrdpr]
  2466 000020A8 E8B6010000          <2> 		call prcharq
  2467 000020AD B020                <2> 		mov al, ' '
  2468 000020AF E8AF010000          <2> 		call prcharq
  2469 000020B4 B008                <2> 		mov al, 8
  2470 000020B6 E8A8010000          <2> 		call prcharq
  2471 000020BB 4E                  <2> 		dec esi
  2472 000020BC 3B35[D8210000]      <2> 		cmp esi, [buftxtloc]
  2473 000020C2 7402                <2> 		je nordprupbck2
  2474 000020C4 EBDA                <2> 		jmp rdprupbckspclp
  2475                              <2> 	nordprupbck2:
  2476 000020C6 E8DE040000          <2> 		call termcopy
  2477                              <2> 	nordprupbck:
  2478 000020CB 8B3D[60A70100]      <2> 		mov edi, [commandbufpos]
  2479 000020D1 81C7[6CA70100]      <2> 		add edi, commandbuf
  2480 000020D7 4F                  <2> 		dec edi
  2481 000020D8 C3                  <2> 		ret
  2482                              <2> 	getcurrentcommandstr:
  2483 000020D9 8A25[D6210000]      <2> 		mov ah, [commandedit]
  2484 000020DF FE05[D6210000]      <2> 		inc byte [commandedit]
  2485                              <2> 	getccmdlp:
  2486 000020E5 4F                  <2> 		dec edi
  2487 000020E6 8A07                <2> 		mov al, [edi]
  2488 000020E8 81FF[6CA70100]      <2> 		cmp edi, commandbuf
  2489 000020EE 7231                <2> 		jb getcmdresetcommandbuf
  2490 000020F0 81EF[6CA70100]      <2> 		sub edi, commandbuf
  2491 000020F6 3B3D[60A70100]      <2> 		cmp edi, [commandbufpos]
  2492 000020FC 0F843DFDFFFF        <2> 		je near rdprintb
  2493 00002102 81C7[6CA70100]      <2> 		add edi, commandbuf
  2494 00002108 3C00                <2> 		cmp al, 0
  2495 0000210A 75D9                <2> 		jne getccmdlp
  2496 0000210C FECC                <2> 		dec ah
  2497 0000210E 80FC00              <2> 		cmp ah, 0
  2498 00002111 77D2                <2> 		ja getccmdlp
  2499 00002113 47                  <2> 		inc edi
  2500 00002114 81FF[6CB70100]      <2> 		cmp edi, commandbufend
  2501 0000211A 770D                <2> 		ja fixcmdbufb4morerdpr
  2502 0000211C E915000000          <2> 		jmp morerdprup
  2503                              <2> 	getcmdresetcommandbuf:
  2504 00002121 BF[6CB70100]        <2> 		mov edi, commandbufend
  2505 00002126 47                  <2> 		inc edi
  2506 00002127 EBBC                <2> 		jmp getccmdlp
  2507                              <2> 	fixcmdbufb4morerdpr:
  2508 00002129 4F                  <2> 		dec edi
  2509 0000212A 81EF[6CB70100]      <2> 		sub edi, commandbufend
  2510 00002130 81C7[6CA70100]      <2> 		add edi, commandbuf
  2511                              <2> 	morerdprup:
  2512 00002136 8A07                <2> 		mov al, [edi]
  2513 00002138 47                  <2> 		inc edi
  2514 00002139 81EF[6CA70100]      <2> 		sub edi, commandbuf
  2515 0000213F 3C00                <2> 		cmp al, 0
  2516 00002141 0F8419FEFFFF        <2> 		je near rdprintb2
  2517 00002147 3B3D[60A70100]      <2> 		cmp edi, [commandbufpos]
  2518 0000214D 0F830DFEFFFF        <2> 		jae near rdprintb2
  2519 00002153 81C7[6CA70100]      <2> 		add edi, commandbuf
  2520 00002159 8806                <2> 		mov [esi], al
  2521 0000215B 46                  <2> 		inc esi
  2522 0000215C 57                  <2> 		push edi
  2523 0000215D 8A1D[D1210000]      <2> 		mov bl, [modkeyrdpr]
  2524 00002163 E8FB000000          <2> 		call prcharq
  2525 00002168 5F                  <2> 		pop edi
  2526 00002169 81FF[6CB70100]      <2> 		cmp edi, commandbufend
  2527 0000216F 76C5                <2> 		jbe morerdprup
  2528 00002171 BF[6CA70100]        <2> 		mov edi, commandbuf
  2529 00002176 EBBE                <2> 		jmp morerdprup
  2530                              <2> 		
  2531                              <2> 	rdprdel:
  2532 00002178 BF[FEC60000]        <2> 		mov edi, buftxt2
  2533 0000217D 8A07                <2> 		mov al, [edi]
  2534 0000217F 3C00                <2> 		cmp al, 0
  2535 00002181 0F84B8FCFFFF        <2> 		je near rdprintb
  2536 00002187 8806                <2> 		mov [esi], al
  2537 00002189 E85AFEFFFF          <2> 		call shiftbuftxt2lft
  2538 0000218E E8D0000000          <2> 		call prcharq
  2539                              <2> 		
  2540                              <2> 	rdprbscheck:
  2541 00002193 3B35[D2210000]      <2> 		cmp esi, [firstesirdpr]
  2542 00002199 7705                <2> 		ja goodbscheck
  2543 0000219B E99FFCFFFF          <2> 		jmp rdprintb
  2544                              <2> 	goodbscheck:
  2545 000021A0 4E                  <2> 		dec esi
  2546 000021A1 C60600              <2> 		mov byte [esi], 0
  2547 000021A4 8A1D[D1210000]      <2> 		mov bl, [modkeyrdpr]
  2548 000021AA B008                <2> 		mov al, 8
  2549 000021AC E9F3FCFFFF          <2> 		jmp bscheckequal
  2550                              <2> 		
  2551                              <2> 	shiftbuftxt2:
  2552 000021B1 3C00                <2> 		cmp al, 0
  2553 000021B3 7409                <2> 		je noshiftbuftxt2
  2554 000021B5 47                  <2> 		inc edi
  2555 000021B6 8A27                <2> 		mov ah, [edi]
  2556 000021B8 8807                <2> 		mov [edi], al
  2557 000021BA 88E0                <2> 		mov al, ah
  2558 000021BC EBF3                <2> 		jmp shiftbuftxt2
  2559                              <2> 	noshiftbuftxt2:
  2560 000021BE BF[FEC60000]        <2> 		mov edi, buftxt2
  2561 000021C3 4E                  <2> 		dec esi
  2562 000021C4 8A06                <2> 		mov al, [esi]
  2563 000021C6 8807                <2> 		mov [edi], al
  2564 000021C8 C60600              <2> 		mov byte [esi], 0
  2565 000021CB B008                <2> 		mov al, 8
  2566 000021CD C3                  <2> 		ret
  2567                              <2> 		
  2568 000021CE 0000                <2> axcache dw 0
  2569 000021D0 00                  <2> endkeyrdpr db 0
  2570 000021D1 00                  <2> modkeyrdpr db 0
  2571 000021D2 00000000            <2> firstesirdpr dd 0
  2572 000021D6 00                  <2> commandedit db 0
  2573 000021D7 00                  <2> txtmask db 0
  2574 000021D8 00000000            <2> buftxtloc dd 0
  2575 000021DC 00000000            <2> endbufferrdpr dd 0
  2576 000021E0 082000              <2> backcursor db 8," ",0
  2577                              <1> intx5:
  2578                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2579 000021E3 E807000000          <2> 	call rdcharint
  2580 000021E8 E9B8E0FFFF          <2> 	jmp timerinterrupt
  2581                              <2> getchar:
  2582 000021ED 30C0                <2> 	xor al, al
  2583                              <2> 	rdcharint:		;;get char, if al is 0, wait for key
  2584 000021EF C605[3D220000]01    <2> 		mov byte [trans], 1
  2585 000021F6 3C00                <2> 		cmp al, 0
  2586 000021F8 7507                <2> 		jne transcheck
  2587 000021FA C605[3D220000]00    <2> 		mov byte [trans], 0
  2588                              <2> 	transcheck:
  2589                              <2> 	%ifdef io.serial
  2590                              <2> 		call serial.receive
  2591                              <2> 		cmp al, 13
  2592                              <2> 		je rdenter
  2593                              <2> 	%else
  2594 00002201 E88B390000          <2> 		call getkey
  2595 00002206 66A1[3B220000]      <2> 		mov ax, [lastkey]
  2596 0000220C 80FC1C              <2> 		cmp ah, 0x1C
  2597 0000220F 741F                <2> 		je rdenter
  2598                              <2> 	%endif
  2599 00002211 8A3D[3D220000]      <2> 		mov bh, [trans]
  2600 00002217 803D[715B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2601 0000221E 7504                <2> 		jne nospecialtrans
  2602 00002220 88C3                <2> 		mov bl, al
  2603 00002222 30C0                <2> 		xor al, al
  2604                              <2> 	nospecialtrans:
  2605 00002224 08C7                <2> 		or bh, al
  2606 00002226 80FF00              <2> 		cmp bh, 0
  2607 00002229 74D6                <2> 		je transcheck
  2608 0000222B E90A000000          <2> 		jmp rdend
  2609                              <2> 	rdenter:
  2610 00002230 B41C                <2> 		mov ah, 0x1C
  2611 00002232 B00A                <2> 		mov al, 10
  2612 00002234 66A3[3B220000]      <2> 		mov [lastkey], ax
  2613                              <2> 	rdend:
  2614 0000223A C3                  <2> 		ret
  2615                              <2> 		
  2616 0000223B 0000                <2> lastkey db 0,0
  2617 0000223D 00                  <2> trans db 0
  2618                              <1> intx6:
  2619                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2620                              <2> %ifdef io.serial
  2621                              <2> 	cmp bl, bh
  2622                              <2> 	call prcharint
  2623                              <2> 	jmp timerinterrupt
  2624                              <2> prcharint:	
  2625                              <2> prcharq:
  2626                              <2> 	call serial.send
  2627                              <2> 	ret
  2628                              <2> %else
  2629 0000223E 38FB                <2> cmp bl, bh
  2630 00002240 740A                <2> je prchar.notimer
  2631 00002242 E80B000000          <2> call prcharint
  2632 00002247 E959E0FFFF          <2> jmp timerinterrupt
  2633                              <2> prchar.notimer:
  2634 0000224C E812000000          <2> 	call prcharq
  2635 00002251 CF                  <2> 	iret
  2636                              <2> 	
  2637                              <2> prcharint:	;;print char, char in al, modifier in bl, if bh = bl then termcopy will not happen, will run termcopy if called as is
  2638 00002252 38FB                <2> 	cmp bl, bh
  2639 00002254 740D                <2> 	je prcharq
  2640 00002256 E808000000          <2> 	call prcharq
  2641 0000225B E849030000          <2> 	call termcopy
  2642 00002260 C3                  <2> 	ret
  2643 00002261 00                  <2> termguion db 0
  2644 00002262 00                  <2> termcopyon db 0
  2645                              <2> prcharq:
  2646 00002263 88DC                <2> 	mov ah, bl
  2647 00002265 66A3[3D240000]      <2> 	mov [charbuf], ax
  2648 0000226B 8B1D[35240000]      <2> 	mov ebx, [videobufpos]
  2649 00002271 BF[14D20000]        <2> 	mov edi, videobuf
  2650 00002276 01DF                <2> 	add edi, ebx
  2651 00002278 66A1[B4250000]      <2> 	mov ax, [removedvideo]
  2652 0000227E 668907              <2> 	mov [edi], ax
  2653 00002281 66A1[3D240000]      <2> 	mov ax, [charbuf]
  2654 00002287 31D2                <2> 	xor edx, edx
  2655 00002289 668B15[39240000]    <2> 	mov dx, [charpos]
  2656 00002290 31C9                <2> 	xor ecx, ecx
  2657 00002292 668B0D[3B240000]    <2> 	mov cx, [charxy]
  2658 00002299 3C09                <2> 	cmp al, 9
  2659 0000229B 0F8462000000        <2> 	je near prtab
  2660 000022A1 3C0D                <2> 	cmp al, 13		;I am phasing this out-it is used by windows but not unix based systems
  2661 000022A3 0F8487000000        <2> 	je near prcr
  2662 000022A9 3C0A                <2> 	cmp al, 10
  2663 000022AB 0F84D1000000        <2> 	je near prnlcr
  2664 000022B1 3C08                <2> 	cmp al, 8
  2665 000022B3 0F8488000000        <2> 	je near prbs
  2666 000022B9 3CFF                <2> 	cmp al, 255		;;null character
  2667 000022BB 0F841B000000        <2> 	je near donescr
  2668 000022C1 668907              <2> 	mov [edi], ax
  2669 000022C4 81C702000000        <2> 	add edi, 2
  2670 000022CA FEC2                <2> 	inc dl
  2671                              <2> donecrnl:
  2672 000022CC 38CA                <2> 	cmp dl, cl
  2673 000022CE 0F83D1000000        <2> 	jae near preol
  2674                              <2> doneeol:
  2675 000022D4 38EE                <2> 	cmp dh, ch
  2676 000022D6 0F83E5000000        <2> 	jae near prscr	
  2677                              <2> donescr:
  2678 000022DC 89FB                <2> 	mov ebx, edi
  2679 000022DE 668B07              <2> 	mov ax, [edi]
  2680 000022E1 66A3[B4250000]      <2> 	mov [removedvideo], ax
  2681 000022E7 81EB[14D20000]      <2> 	sub ebx, videobuf
  2682 000022ED 891D[35240000]      <2> 	mov [videobufpos], ebx
  2683 000022F3 668915[39240000]    <2> 	mov [charpos], dx
  2684 000022FA 66A1[3D240000]      <2> 	mov ax, [charbuf]
  2685 00002300 88E3                <2> 	mov bl, ah
  2686 00002302 C3                  <2> 	ret
  2687                              <2> 	
  2688                              <2> 	prtab:
  2689 00002303 8B1D[31240000]      <2> 		mov ebx, [linebeginpos]
  2690 00002309 81EF[14D20000]      <2> 		sub edi, videobuf
  2691 0000230F 29DF                <2> 		sub edi, ebx
  2692 00002311 C1EF04              <2> 		shr edi, 4
  2693 00002314 C1E704              <2> 		shl edi, 4
  2694 00002317 81C710000000        <2> 		add edi, 16
  2695 0000231D C0EA03              <2> 		shr dl, 3
  2696 00002320 C0E203              <2> 		shl dl, 3
  2697 00002323 80C208              <2> 		add dl, 8
  2698 00002326 81C7[14D20000]      <2> 		add edi, videobuf
  2699 0000232C 01DF                <2> 		add edi, ebx
  2700 0000232E EB9C                <2> 		jmp donecrnl
  2701                              <2> 	
  2702                              <2> 	prcr:
  2703 00002330 30D2                <2> 		xor dl, dl
  2704 00002332 BF[14D20000]        <2> 		mov edi, videobuf
  2705 00002337 8B1D[31240000]      <2> 		mov ebx, [linebeginpos]
  2706 0000233D 01DF                <2> 		add edi, ebx
  2707 0000233F EB8B                <2> 		jmp donecrnl
  2708                              <2> 			
  2709                              <2> 	prbs:
  2710 00002341 8B1D[31240000]      <2> 		mov ebx, [linebeginpos]
  2711 00002347 80FA00              <2> 		cmp dl, 0
  2712 0000234A 7416                <2> 		je prbackline
  2713                              <2> 	prnobmr:
  2714 0000234C 891D[31240000]      <2> 		mov [linebeginpos], ebx
  2715 00002352 FECA                <2> 		dec dl
  2716 00002354 6631C0              <2> 		xor ax, ax
  2717 00002357 81EF02000000        <2> 		sub edi, 2
  2718 0000235D E96AFFFFFF          <2> 		jmp donecrnl
  2719                              <2> 	prbackline:
  2720 00002362 6631DB              <2> 		xor bx, bx
  2721 00002365 88CA                <2> 		mov dl, cl
  2722 00002367 80FE00              <2> 		cmp dh, 0
  2723 0000236A 74E0                <2> 		je prnobmr
  2724 0000236C 8B1D[31240000]      <2> 		mov ebx, [linebeginpos]
  2725 00002372 6651                <2> 		push cx
  2726 00002374 30ED                <2> 		xor ch, ch
  2727 00002376 6629CB              <2> 		sub bx, cx
  2728 00002379 6629CB              <2> 		sub bx, cx
  2729 0000237C 6659                <2> 		pop cx
  2730 0000237E FECE                <2> 		dec dh
  2731 00002380 EBCA                <2> 		jmp prnobmr
  2732                              <2> 		
  2733                              <2> 	prnlcr:
  2734 00002382 FEC6                <2> 		inc dh
  2735 00002384 31DB                <2> 		xor ebx, ebx
  2736 00002386 30D2                <2> 		xor dl, dl
  2737 00002388 88CB                <2> 		mov bl, cl
  2738 0000238A 66D1E3              <2> 		shl bx, 1
  2739 0000238D BF[14D20000]        <2> 		mov edi, videobuf
  2740 00002392 031D[31240000]      <2> 		add ebx, [linebeginpos]
  2741 00002398 891D[31240000]      <2> 		mov [linebeginpos], ebx
  2742 0000239E 01DF                <2> 		add edi, ebx
  2743 000023A0 E927FFFFFF          <2> 		jmp donecrnl
  2744                              <2> 		
  2745                              <2> 	preol:
  2746 000023A5 30D2                <2> 		xor dl, dl
  2747 000023A7 FEC6                <2> 		inc dh
  2748 000023A9 31DB                <2> 		xor ebx, ebx
  2749 000023AB 88CB                <2> 		mov bl, cl
  2750 000023AD 66D1E3              <2> 		shl bx, 1
  2751 000023B0 031D[31240000]      <2> 		add ebx, [linebeginpos]
  2752 000023B6 891D[31240000]      <2> 		mov [linebeginpos], ebx
  2753 000023BC E913FFFFFF          <2> 		jmp doneeol
  2754                              <2> 	prscr:
  2755 000023C1 FECE                <2> 		dec dh
  2756 000023C3 BF[14D20000]        <2> 		mov edi, videobuf
  2757 000023C8 31DB                <2> 		xor ebx, ebx
  2758 000023CA 88CB                <2> 		mov bl, cl
  2759 000023CC 66D1E3              <2> 		shl bx, 1
  2760 000023CF 01FB                <2> 		add ebx, edi
  2761                              <2> 	intscrollloop:
  2762 000023D1 668B03              <2> 		mov ax, [ebx]
  2763 000023D4 668907              <2> 		mov [edi], ax
  2764 000023D7 81C702000000        <2> 		add edi, 2
  2765 000023DD 81C302000000        <2> 		add ebx, 2
  2766 000023E3 FEC9                <2> 		dec cl
  2767 000023E5 80F900              <2> 		cmp cl, 0
  2768 000023E8 75E7                <2> 		jne intscrollloop
  2769 000023EA 8A0D[3B240000]      <2> 		mov cl, [charxy]
  2770 000023F0 FECD                <2> 		dec ch
  2771 000023F2 80FD01              <2> 		cmp ch, 1
  2772 000023F5 77DA                <2> 		ja intscrollloop
  2773 000023F7 6631C0              <2> 		xor ax, ax
  2774 000023FA 81EF[14D20000]      <2> 		sub edi, videobuf
  2775 00002400 893D[31240000]      <2> 		mov [linebeginpos], edi
  2776 00002406 81C7[14D20000]      <2> 		add edi, videobuf
  2777 0000240C 89FB                <2> 		mov ebx, edi
  2778                              <2> 	intloopclear:
  2779 0000240E 668903              <2> 		mov [ebx], ax
  2780 00002411 81C302000000        <2> 		add ebx, 2
  2781 00002417 FEC9                <2> 		dec cl
  2782 00002419 80F900              <2> 		cmp cl, 0
  2783 0000241C 75F0                <2> 		jne intloopclear
  2784 0000241E FECD                <2> 		dec ch
  2785 00002420 80FD00              <2> 		cmp ch, 0
  2786 00002423 75E9                <2> 		jne intloopclear
  2787 00002425 668B0D[3B240000]    <2> 		mov cx, [charxy]
  2788 0000242C E9ABFEFFFF          <2> 		jmp donescr
  2789                              <2> 		
  2790 00002431 00000000            <2> linebeginpos dd 0
  2791 00002435 00000000            <2> videobufpos: dd 0
  2792 00002439 0000                <2> charpos db 0,0
  2793 0000243B 501E                <2> charxy db 80,30
  2794 0000243D 0000                <2> charbuf dw 0
  2795                              <2> %endif
  2796                              <1> intx7:
  2797                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2798 0000243F E8973E0000          <2> 	call loadfile
  2799 00002444 E95CDEFFFF          <2> 	jmp timerinterrupt
  2800                              <1> intx9:
  2801                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2802 00002449 3C00                <2> 	cmp al, 0
  2803 0000244B 750A                <2> 	jne num2strb
  2804 0000244D E8160B0000          <2> 	call showdec
  2805 00002452 E94EDEFFFF          <2> 	jmp timerinterrupt
  2806                              <2> num2strb:
  2807 00002457 E8420A0000          <2> 	call showhex
  2808 0000245C E944DEFFFF          <2> 	jmp timerinterrupt
  2809                              <1> intx10:
  2810                              <1> 	%include 'source/interrupts/10_str2num.asm'
  2811 00002461 89F7                <2> 	mov edi, esi
  2812 00002463 E8E20B0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2813 00002468 E938DEFFFF          <2> 	jmp timerinterrupt
  2814                              <2> 	
  2815                              <1> %ifdef threads.included
  2816                              <1> intx11:
  2817                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  2818                              <2> threadfork: ;esi is next thread's start address, if 0, fork current thread
  2819                              <2> 			;returns the PID of the new fork in ebx
  2820                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  2821 0000246D FA                  <2> 	cli
  2822 0000246E 60                  <2> 	pushad
  2823 0000246F 8925[3C250000]      <2> 	mov [.espold], esp
  2824 00002475 C605[7A640000]01    <2> 	mov byte [threadson], 1
  2825 0000247C 8B1D[7B640000]      <2> 	mov ebx, [currentthread]
  2826 00002482 C1E302              <2> 	shl ebx, 2
  2827 00002485 89A3[80D70100]      <2> 	mov [threadlist + ebx], esp
  2828 0000248B C1EB02              <2> 	shr ebx, 2
  2829 0000248E 81FB00000000        <2> 	cmp ebx, 0
  2830 00002494 750C                <2> 	jne .simplestack
  2831 00002496 BB[1EB00000]        <2> 	mov ebx, stackend
  2832 0000249B 29E3                <2> 	sub ebx, esp
  2833 0000249D E90B000000          <2> 	jmp .stackcalcdone
  2834                              <2> .simplestack:
  2835 000024A2 C1E30A              <2> 	shl ebx, 10
  2836 000024A5 81C3[80EB0100]      <2> 	add ebx, stack1
  2837 000024AB 29E3                <2> 	sub ebx, esp
  2838                              <2> .stackcalcdone:
  2839 000024AD 29DC                <2> 	sub esp, ebx
  2840 000024AF 81C4[80EB0100]      <2> 	add esp, stack1
  2841 000024B5 8B1D[76640000]      <2> 	mov ebx, [lastthread]
  2842 000024BB C1E308              <2> 	shl ebx, 8
  2843 000024BE 01DC                <2> 	add esp, ebx
  2844 000024C0 891D[40250000]      <2> 	mov [.stackend], ebx
  2845                              <2> 
  2846 000024C6 89E5                <2> 	mov ebp, esp
  2847 000024C8 8B25[3C250000]      <2> 	mov esp, [.espold]
  2848                              <2> 
  2849 000024CE C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  2850 000024D1 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  2851                              <2> 
  2852 000024D5 31DB                <2> 	xor ebx, ebx
  2853                              <2> .stackcopy:
  2854 000024D7 668B041C            <2> 	mov ax, [esp + ebx]
  2855 000024DB 6689441D00          <2> 	mov [ebp + ebx], ax
  2856 000024E0 81C302000000        <2> 	add ebx, 2
  2857 000024E6 3B1D[40250000]      <2> 	cmp ebx, [.stackend]
  2858 000024EC 72E9                <2> 	jb .stackcopy
  2859                              <2> 
  2860 000024EE 31C0                <2> 	xor eax, eax
  2861 000024F0 668CC8              <2> 	mov ax, cs
  2862 000024F3 89C2                <2> 	mov edx, eax
  2863 000024F5 8B4C2428            <2> 	mov ecx, [esp + 40]
  2864 000024F9 81C900020000        <2> 	or ecx, 0x200
  2865                              <2> 	
  2866 000024FF 81FE00000000        <2> 	cmp esi, 0
  2867 00002505 7504                <2> 	jne .nochangestack
  2868 00002507 8B742420            <2> 	mov esi, [esp + 32]
  2869                              <2> .nochangestack:
  2870 0000250B 89F0                <2> 	mov eax, esi
  2871 0000250D 89EC                <2> 	mov esp, ebp
  2872                              <2> 
  2873 0000250F 89442420            <2> 	mov [esp + 32], eax
  2874 00002513 89542424            <2> 	mov [esp + 36], edx
  2875 00002517 894C2428            <2> 	mov [esp + 40], ecx
  2876                              <2> 
  2877 0000251B 8B1D[76640000]      <2> 	mov ebx, [lastthread]
  2878 00002521 89A3[80D70100]      <2> 	mov [threadlist + ebx], esp
  2879 00002527 81C304000000        <2> 	add ebx, 4
  2880 0000252D 891D[76640000]      <2> 	mov [lastthread], ebx
  2881 00002533 8B25[3C250000]      <2> 	mov esp, [.espold]
  2882 00002539 61                  <2> 	popad
  2883 0000253A FB                  <2> 	sti
  2884 0000253B CF                  <2> 	iret
  2885                              <2> 
  2886 0000253C 00000000            <2> .espold dd 0
  2887 00002540 00000000            <2> .stackend dd 0
  2888                              <1> %endif
  2889                              <1> intx12:
  2890                              <1> 	%include 'source/interrupts/12_gettime.asm'
  2891 00002544 A1[5D020000]        <2> 	mov eax, [timeseconds]
  2892 00002549 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  2893 0000254F 89D9                <2> 	mov ecx, ebx
  2894 00002551 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2895 00002554 E94CDDFFFF          <2> 	jmp timerinterrupt
  2896                              <1> intx13:
  2897                              <1> 	%include 'source/interrupts/13_settime.asm'
  2898 00002559 A3[5D020000]        <2> 	mov [timeseconds], eax
  2899 0000255E 891D[61020000]      <2> 	mov [timenanoseconds], ebx
  2900 00002564 E93CDDFFFF          <2> 	jmp timerinterrupt
  2901                              <2> 	
  2902                              <1> intx14:
  2903                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  2904 00002569 BF[FECA0000]        <2> 	mov edi, buftxt
  2905                              <2> cpcmd:
  2906 0000256E 8A06                <2> 	mov al, [esi]
  2907 00002570 8807                <2> 	mov [edi], al
  2908 00002572 46                  <2> 	inc esi
  2909 00002573 47                  <2> 	inc edi
  2910 00002574 3C00                <2> 	cmp al, 0
  2911 00002576 75F6                <2> 	jne cpcmd
  2912 00002578 E824060000          <2> 	call run
  2913 0000257D CF                  <2> 	iret
  2914                              <1> intx15:
  2915                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  2916                              <2> 	;mov ebx, variables
  2917 0000257E 8B35[772C0000]      <2> 	mov esi, [currentcommandloc]
  2918 00002584 89F7                <2> 	mov edi, esi
  2919 00002586 31C9                <2> 	xor ecx, ecx
  2920                              <2> getcommandzeroes:
  2921 00002588 8A07                <2> 	mov al, [edi]
  2922 0000258A 47                  <2> 	inc edi
  2923 0000258B 3C3B                <2> 	cmp al, ';'
  2924 0000258D 740B                <2> 	je nomorezeroes
  2925 0000258F 3C00                <2> 	cmp al, 0
  2926 00002591 7407                <2> 	je nomorezeroes
  2927 00002593 3C20                <2> 	cmp al, ' '
  2928 00002595 75F1                <2> 	jne getcommandzeroes
  2929 00002597 41                  <2> 	inc ecx
  2930 00002598 EBEE                <2> 	jmp getcommandzeroes
  2931                              <2> nomorezeroes:
  2932 0000259A 41                  <2> 	inc ecx
  2933 0000259B 4F                  <2> 	dec edi
  2934 0000259C 8B1D[8AB60000]      <2> 	mov ebx, [uid]
  2935 000025A2 8B15[7B640000]      <2> 	mov edx, [currentthread]
  2936 000025A8 CF                  <2> 	iret
  2937                              <2> 	
  2938                              <1> termcopy:
  2939                              <1> %ifdef io.serial
  2940                              <1> 	ret
  2941                              <1> %else
  2942                              <1> %ifdef terminal.vsync
  2943                              <1> 	mov byte [termcopyneeded], 1
  2944                              <1> 	ret
  2945                              <1> %else
  2946 000025A9 E808000000          <1> 	call newtermcopy
  2947 000025AE C3                  <1> 	ret
  2948                              <1> %endif
  2949 000025AF 00                  <1> 	termcopyneeded db 0
  2950 000025B0 00000000            <1> 	termcursorpos dd 0
  2951 000025B4 0000                <1> 	removedvideo dw 0
  2952                              <1> newtermcopy:
  2953 000025B6 60                  <1> 	pusha
  2954 000025B7 BF[14D20000]        <1> 	mov edi, videobuf
  2955 000025BC 31DB                <1> 	xor ebx, ebx
  2956 000025BE 881D[AF250000]      <1> 	mov [termcopyneeded], bl
  2957 000025C4 8B1D[35240000]      <1> 	mov ebx, [videobufpos]
  2958 000025CA 01DF                <1> 	add edi, ebx
  2959 000025CC 893D[B0250000]      <1> 	mov [termcursorpos], edi
  2960 000025D2 E8CB000000          <1> 	call switchtermcursor
  2961 000025D7 803D[389E0000]00    <1> 	cmp byte [guion], 0
  2962 000025DE 0F8420000000        <1> 	je near nowincopy
  2963                              <1> %ifdef gui.included
  2964 000025E4 C605[09770000]00    <1> 	mov byte [mouseselecton], 0
  2965 000025EB C605[62220000]01    <1> 	mov byte [termcopyon], 1
  2966 000025F2 803D[61220000]01    <1> 	cmp byte [termguion], 1
  2967 000025F9 0F84984E0000        <1> 	je near windowvideocopy
  2968                              <1> %endif
  2969 000025FF E997000000          <1> 	jmp nocopytermatall
  2970                              <1> nowincopy:
  2971 00002604 BE00000A00          <1> 	mov esi, 0xA0000
  2972 00002609 A1[3E020000]        <1> 	mov eax, [basecache]
  2973 0000260E C1E004              <1> 	shl eax, 4
  2974 00002611 29C6                <1> 	sub esi, eax
  2975 00002613 BF[14D20000]        <1> 	mov edi, videobuf
  2976 00002618 31C9                <1> 	xor ecx, ecx
  2977 0000261A 668B0D[3B240000]    <1> 	mov cx, [charxy]
  2978                              <1> nowincopy2:
  2979 00002621 668B07              <1> 	mov ax, [edi]
  2980 00002624 81C7A46A0000        <1> 	add edi, (videobuf2 - videobuf)
  2981 0000262A 668B1F              <1> 	mov bx, [edi]
  2982 0000262D 668907              <1> 	mov [edi], ax
  2983 00002630 81EFA46A0000        <1> 	sub edi, (videobuf2 - videobuf)
  2984 00002636 47                  <1> 	inc edi
  2985 00002637 6639D8              <1> 	cmp ax, bx
  2986 0000263A 743E                <1> 	je nopresentwinfont
  2987 0000263C 4F                  <1> 	dec edi
  2988 0000263D BB[838C0000]        <1> 	mov ebx, fonts
  2989 00002642 31C0                <1> 	xor eax, eax
  2990 00002644 8A07                <1> 	mov al, [edi]
  2991 00002646 C1E004              <1> 	shl eax, 4
  2992 00002649 01C3                <1> 	add ebx, eax
  2993 0000264B 47                  <1> 	inc edi
  2994 0000264C 8A27                <1> 	mov ah, [edi]
  2995 0000264E 31D2                <1> 	xor edx, edx
  2996 00002650 8A15[3B240000]      <1> 	mov dl, [charxy]
  2997 00002656 C1C110              <1> 	rol ecx, 16
  2998 00002659 B110                <1> 	mov cl, 16
  2999                              <1> nowinfont:
  3000 0000265B 8A03                <1> 	mov al, [ebx]
  3001 0000265D D0C8                <1> 	ror al, 1
  3002 0000265F 80FC07              <1> 	cmp ah, 7
  3003 00002662 7602                <1> 	jbe notnotfont
  3004 00002664 F6D0                <1> 	not al
  3005                              <1> notnotfont:
  3006 00002666 8806                <1> 	mov [esi], al
  3007 00002668 01D6                <1> 	add esi, edx
  3008 0000266A 43                  <1> 	inc ebx
  3009 0000266B FEC9                <1> 	dec cl
  3010 0000266D 80F900              <1> 	cmp cl, 0
  3011 00002670 75E9                <1> 	jne nowinfont
  3012 00002672 C1E204              <1> 	shl edx, 4
  3013 00002675 29D6                <1> 	sub esi, edx
  3014 00002677 C1C110              <1> 	rol ecx, 16
  3015                              <1> nopresentwinfont:
  3016 0000267A 47                  <1> 	inc edi
  3017 0000267B 46                  <1> 	inc esi
  3018 0000267C FEC9                <1> 	dec cl
  3019 0000267E 80F900              <1> 	cmp cl, 0
  3020 00002681 759E                <1> 	jne nowincopy2
  3021 00002683 8A0D[3B240000]      <1> 	mov cl, [charxy]
  3022 00002689 31D2                <1> 	xor edx, edx
  3023 0000268B 88CA                <1> 	mov dl, cl
  3024 0000268D 29D6                <1> 	sub esi, edx
  3025 0000268F C1E204              <1> 	shl edx, 4
  3026 00002692 01D6                <1> 	add esi, edx
  3027 00002694 FECD                <1> 	dec ch
  3028 00002696 80FD00              <1> 	cmp ch, 0
  3029 00002699 7586                <1> 	jne nowincopy2
  3030                              <1> nocopytermatall:
  3031 0000269B E802000000          <1> 	call switchtermcursor
  3032 000026A0 61                  <1> 	popa
  3033 000026A1 C3                  <1> 	ret
  3034                              <1> 	
  3035                              <1> switchtermcursor:
  3036 000026A2 8B3D[B0250000]      <1> 	mov edi, [termcursorpos]
  3037 000026A8 8A4701              <1> 	mov al, [edi + 1]
  3038 000026AB 8A27                <1> 	mov ah, [edi]
  3039 000026AD 3C07                <1> 	cmp al, 7
  3040 000026AF 7607                <1> 	jbe movlargecursorterm
  3041 000026B1 B007                <1> 	mov al, 7
  3042 000026B3 E902000000          <1> 	jmp movedcursorterm
  3043                              <1> movlargecursorterm:
  3044 000026B8 B0F0                <1> 	mov al, 0xF0
  3045                              <1> movedcursorterm:
  3046 000026BA 884701              <1> 	mov [edi + 1], al
  3047 000026BD 80FC00              <1> 	cmp ah, 0
  3048 000026C0 7504                <1> 	jne fixednocursorterm
  3049 000026C2 B420                <1> 	mov ah, " "
  3050 000026C4 8827                <1> 	mov [edi], ah
  3051                              <1> fixednocursorterm:
  3052 000026C6 C3                  <1> 	ret
  3053                              <1> %endif
  3054                                      %include "source/dosints.asm"
  3055                              <1> int20h:
  3056 000026C7 66B8004C            <1> mov ax, 0x4C00
  3057                              <1> int21h:
  3058                              <1> dostosolleros:
  3059 000026CB 6650                <1> 	push ax
  3060 000026CD 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3061 000026D1 8ED8                <1> 	mov ds, ax
  3062 000026D3 8EC0                <1> 	mov es, ax
  3063 000026D5 8EE0                <1> 	mov fs, ax
  3064 000026D7 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3065 000026DB 8EE8                <1> 	mov gs, ax
  3066 000026DD 6658                <1> 	pop ax
  3067 000026DF 9C                  <1> 	pushf
  3068 000026E0 60                  <1> 	pusha
  3069 000026E1 80FC01              <1> 	cmp ah, 1
  3070 000026E4 0F8449000000        <1> 	je near dosgchar
  3071 000026EA 80FC02              <1> 	cmp ah, 2
  3072 000026ED 0F8447000000        <1> 	je near doswchar
  3073 000026F3 80FC09              <1> 	cmp ah, 9
  3074 000026F6 0F8449000000        <1> 	je near dosprintstr
  3075 000026FC 80FC0A              <1> 	cmp ah, 0xA
  3076 000026FF 0F8456000000        <1> 	je near dosgetstr
  3077 00002705 80FC2B              <1> 	cmp ah, 0x2B
  3078 00002708 0F8492000000        <1> 	je near dosgetdate
  3079 0000270E 80FC2C              <1> 	cmp ah, 0x2C
  3080 00002711 0F84AC000000        <1> 	je near dosgettime
  3081 00002717 80FC4C              <1> 	cmp ah, 0x4C
  3082 0000271A 0F84C1000000        <1> 	je near dosexit
  3083                              <1> backtodos:
  3084 00002720 61                  <1> 	popa
  3085 00002721 9D                  <1> 	popf
  3086 00002722 6650                <1> 	push ax
  3087 00002724 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3088 00002728 8ED8                <1> 	mov ds, ax
  3089 0000272A 8EC0                <1> 	mov es, ax
  3090 0000272C 8EE0                <1> 	mov fs, ax
  3091 0000272E 8EE8                <1> 	mov gs, ax
  3092 00002730 6658                <1> 	pop ax
  3093 00002732 CF                  <1> 	iret
  3094                              <1> 
  3095                              <1> dosgchar:
  3096 00002733 E8B5FAFFFF          <1> 	call getchar
  3097 00002738 EBE6                <1> 	jmp backtodos
  3098                              <1> 	
  3099                              <1> doswchar:
  3100 0000273A 88D0                <1> 	mov al, dl
  3101 0000273C B307                <1> 	mov bl, 7
  3102 0000273E E80FFBFFFF          <1> 	call prcharint
  3103 00002743 EBDB                <1> 	jmp backtodos
  3104                              <1> 	
  3105                              <1> dosprintstr:
  3106 00002745 31F6                <1> 	xor esi, esi
  3107 00002747 6689D6              <1> 	mov si, dx
  3108 0000274A 81C600004000        <1> 	add esi, dosprogloc
  3109 00002750 B024                <1> 	mov al, "$"
  3110 00002752 B307                <1> 	mov bl, 7
  3111 00002754 E8CDF5FFFF          <1> 	call printint
  3112 00002759 EBC5                <1> 	jmp backtodos
  3113                              <1> 	
  3114                              <1> dosgetstr:
  3115 0000275B 31F6                <1> 	xor esi, esi
  3116 0000275D 6689D6              <1> 	mov si, dx
  3117 00002760 81C600004000        <1> 	add esi, dosprogloc
  3118 00002766 B900000000          <1> 	mov ecx, 0
  3119 0000276B 8A0E                <1> 	mov cl, [esi]
  3120 0000276D 81C602000000        <1> 	add esi, 2
  3121 00002773 89F7                <1> 	mov edi, esi
  3122 00002775 8935[9C270000]      <1> 	mov [stringstart], esi
  3123 0000277B 01CF                <1> 	add edi, ecx
  3124 0000277D B00A                <1> 	mov al, 10
  3125 0000277F B307                <1> 	mov bl, 7
  3126 00002781 E890F6FFFF          <1> 	call rdprintdos
  3127 00002786 89F1                <1> 	mov ecx, esi
  3128 00002788 2B0D[9C270000]      <1> 	sub ecx, [stringstart]
  3129 0000278E 8B35[9C270000]      <1> 	mov esi, [stringstart]
  3130 00002794 884EFF              <1> 	mov [esi - 1], cl
  3131 00002797 884EFE              <1> 	mov [esi - 2], cl
  3132 0000279A EB84                <1> 	jmp backtodos
  3133 0000279C 00000000            <1> stringstart dd 0
  3134                              <1> 
  3135                              <1> dosgetdate:
  3136 000027A0 E8F1250000          <1> 	call time
  3137 000027A5 8A0D[5E4F0000]      <1> 	mov cl, [RTCtimeYear]
  3138 000027AB B500                <1> 	mov ch, 0
  3139 000027AD 6681C1D007          <1> 	add cx, 2000
  3140 000027B2 8A35[5D4F0000]      <1> 	mov dh, [RTCtimeMonth]
  3141 000027B8 8A15[5C4F0000]      <1> 	mov dl, [RTCtimeDay]
  3142 000027BE E95DFFFFFF          <1> 	jmp backtodos
  3143                              <1> 
  3144                              <1> dosgettime:
  3145 000027C3 E8CE250000          <1> 	call time
  3146 000027C8 8A2D[5B4F0000]      <1> 	mov ch, [RTCtimeHour]
  3147 000027CE 8A0D[5A4F0000]      <1> 	mov cl, [RTCtimeMinute]
  3148 000027D4 8A35[594F0000]      <1> 	mov dh, [RTCtimeSecond]
  3149 000027DA B200                <1> 	mov dl, 0
  3150 000027DC E93FFFFFFF          <1> 	jmp backtodos
  3151                              <1> 	
  3152                              <1> dosexit:
  3153 000027E1 BE[5E8C0000]        <1> 	mov esi, line
  3154 000027E6 E834F5FFFF          <1> 	call print
  3155 000027EB 61                  <1> 	popa
  3156 000027EC 9D                  <1> 	popf
  3157 000027ED 8B25[7EB40000]      <1> 	mov esp, [previousstack]
  3158 000027F3 31DB                <1> 	xor ebx, ebx
  3159 000027F5 88C3                <1> 	mov bl, al
  3160 000027F7 80FB00              <1> 	cmp bl, 0
  3161 000027FA 0F85ADF4FFFF        <1> 	jne near exitprog.error
  3162 00002800 C3                  <1> 	ret
  3163                                      %include "source/solleros.asm"
  3164                              <1> 	;SOLLEROS.ASM
  3165                              <1> os:
  3166                              <1> setdefenv:
  3167 00002801 B02F                <1> 	mov al, '/'
  3168 00002803 A2[8AB40000]        <1> 	mov [currentfolder], al
  3169 00002808 B801000000          <1> 	mov eax, 1
  3170 0000280D A3[86B40000]        <1> 	mov [currentfolderloc], eax
  3171 00002812 E86EF5FFFF          <1> 	call clear
  3172                              <1> 	
  3173                              <1> bootfilecheck:
  3174 00002817 803D[8EB60000]01    <1> 	cmp byte [ranboot], 1
  3175 0000281E 0F8421000000        <1> 	je near nobootfile
  3176                              <1> 	%ifdef hardware.automatic
  3177 00002824 E886360000          <1> 		call initializelater ;Initialize components that have debug messages
  3178                              <1> 	%endif
  3179 00002829 BF[1D8C0000]        <1> 	mov edi, bootfilename
  3180 0000282E BE00004000          <1> 	mov esi, 0x400000
  3181 00002833 E8A33A0000          <1> 	call loadfile
  3182 00002838 81FA00000000        <1> 	cmp edx, 0
  3183 0000283E 7505                <1> 	jne nobootfile
  3184 00002840 E8B00D0000          <1> 	call progbatchfound
  3185                              <1> nobootfile:	
  3186 00002845 C605[8EB60000]01    <1> 	mov byte [ranboot], 1
  3187                              <1> 
  3188 0000284C BE[00000000]        <1> 	mov esi, signature
  3189                              <1> .sigcopyloop:	;this prevents an odd error
  3190 00002851 658A06              <1> 	mov al, [gs:esi]
  3191 00002854 8806                <1> 	mov [esi], al
  3192 00002856 46                  <1> 	inc esi
  3193 00002857 81FE[1A000000]      <1> 	cmp esi, signatureend
  3194 0000285D 72F2                <1> 	jb .sigcopyloop
  3195                              <1> 	
  3196 0000285F BE[00000000]        <1> 	mov esi, signature
  3197 00002864 E8B6F4FFFF          <1> 	call print
  3198 00002869 8B0D[16000000]      <1> 	mov ecx, [signatureend - 4]
  3199 0000286F E8F4060000          <1> 	call showdec
  3200 00002874 BE[5E8C0000]        <1> 	mov esi, line
  3201 00002879 E8A1F4FFFF          <1> 	call print
  3202 0000287E BE[3A8C0000]        <1> 	mov esi, userask
  3203 00002883 E897F4FFFF          <1> 	call print
  3204                              <1> usercheck:
  3205 00002888 BE[FECA0000]        <1> 	mov esi, buftxt
  3206 0000288D BF[FECE0000]        <1> 	mov edi, buftxtend
  3207 00002892 B00A                <1> 	mov al, 10
  3208 00002894 E86BF5FFFF          <1> 	call rdprint
  3209 00002899 56                  <1> 	push esi
  3210 0000289A BE[448C0000]        <1> 	mov esi, pwdask
  3211 0000289F E87BF4FFFF          <1> 	call print
  3212 000028A4 5E                  <1> 	pop esi
  3213 000028A5 46                  <1> 	inc esi
  3214 000028A6 8935[99290000]      <1> 	mov [esipass], esi
  3215                              <1> passcheck:
  3216 000028AC E83CF9FFFF          <1> 	call getchar
  3217 000028B1 3C0A                <1> 	cmp al, 10
  3218 000028B3 0F8436000000        <1> 	je near gotpass
  3219 000028B9 3C08                <1> 	cmp al, 8
  3220 000028BB 0F8410000000        <1> 	je near backpass
  3221 000028C1 8806                <1> 	mov [esi], al
  3222 000028C3 46                  <1> 	inc esi
  3223 000028C4 B02A                <1> 	mov al, "*"
  3224 000028C6 E887F9FFFF          <1> 	call prcharint
  3225 000028CB EBDF                <1> 	jmp passcheck
  3226 000028CD 08200800            <1> backcursor2 db 8," ",8,0
  3227                              <1> backpass:
  3228 000028D1 3B35[99290000]      <1> 	cmp esi, [esipass]
  3229 000028D7 0F84CFFFFFFF        <1> 	je near passcheck
  3230 000028DD 4E                  <1> 	dec esi
  3231 000028DE C60600              <1> 	mov byte [esi], 0
  3232 000028E1 56                  <1> 	push esi
  3233 000028E2 BE[CD280000]        <1> 	mov esi, backcursor2
  3234 000028E7 E833F4FFFF          <1> 	call print
  3235 000028EC 5E                  <1> 	pop esi
  3236 000028ED EBBD                <1> 	jmp passcheck
  3237                              <1> gotpass:
  3238 000028EF B00A                <1> 	mov al, 10
  3239 000028F1 E85CF9FFFF          <1> 	call prcharint
  3240 000028F6 30C0                <1> 	xor al, al
  3241 000028F8 31C9                <1> 	xor ecx, ecx
  3242 000028FA 8806                <1> 	mov [esi], al
  3243 000028FC BB[608C0000]        <1> 	mov ebx, userlst
  3244                              <1> userfind:
  3245 00002901 BE[FECA0000]        <1> 	mov esi, buftxt
  3246 00002906 8A06                <1> 	mov al, [esi]
  3247 00002908 3C00                <1> 	cmp al, 0
  3248 0000290A 0F84F1FEFFFF        <1> 	je near os
  3249 00002910 891D[9D290000]      <1> 	mov [usercache], ebx
  3250 00002916 E860030000          <1> 	call tester
  3251 0000291B 3C01                <1> 	cmp al, 1
  3252 0000291D 7416                <1> 	je pwdtest
  3253 0000291F 41                  <1> 	inc ecx
  3254                              <1> nxtuser:
  3255 00002920 8A03                <1> 	mov al, [ebx]
  3256 00002922 43                  <1> 	inc ebx
  3257 00002923 3C00                <1> 	cmp al, 0
  3258 00002925 75F9                <1> 	jne nxtuser
  3259 00002927 81FB[838C0000]      <1> 	cmp ebx, userlstend
  3260 0000292D 0F83CEFEFFFF        <1> 	jae near os
  3261 00002933 EBCC                <1> 	jmp userfind
  3262                              <1> pwdtest:
  3263 00002935 46                  <1> 	inc esi
  3264 00002936 43                  <1> 	inc ebx
  3265 00002937 E83F030000          <1> 	call tester
  3266 0000293C 3C01                <1> 	cmp al, 1
  3267 0000293E 7402                <1> 	je pwdrgt
  3268 00002940 EBDE                <1> 	jmp nxtuser
  3269                              <1> pwdrgt:
  3270 00002942 D1E9                <1> 	shr ecx, 1
  3271 00002944 890D[8AB60000]      <1> 	mov [uid], ecx
  3272 0000294A E836F4FFFF          <1> 	call clear
  3273 0000294F 31C9                <1> 	xor ecx, ecx
  3274 00002951 41                  <1> 	inc ecx
  3275 00002952 890D[60A70100]      <1> 	mov [commandbufpos], ecx
  3276                              <1> returnfromexp:
  3277 00002958 66B90002            <1> 	mov cx, 200h
  3278 0000295C BE[FECA0000]        <1> 	mov esi, buftxt
  3279 00002961 8935[772C0000]      <1> 	mov [currentcommandloc], esi
  3280 00002967 E825000000          <1> 	call bufclr
  3281                              <1> clearolddata:
  3282 0000296C 31C0                <1> 	xor eax, eax
  3283 0000296E A2[8FB60000]        <1> 	mov [IFON], al
  3284 00002973 A2[90B60000]        <1> 	mov [IFTRUE], al
  3285 00002978 A2[F8B60000]        <1> 	mov [BATCHISON], al
  3286 0000297D A3[F4B60000]        <1> 	mov [BATCHPOS], eax
  3287 00002982 A2[F9B60000]        <1> 	mov [LOOPON], al
  3288 00002987 A3[FAB60000]        <1> 	mov [LOOPPOS], eax
  3289 0000298C E933000000          <1> 	jmp nwcmd
  3290                              <1> bufclr:	
  3291 00002991 30C0                <1> 	xor al, al
  3292 00002993 8806                <1> 	mov [esi], al
  3293 00002995 46                  <1> 	inc esi
  3294 00002996 E2F9                <1> 	loop bufclr
  3295 00002998 C3                  <1> 	ret
  3296                              <1> 
  3297 00002999 00000000            <1> esipass dd 0
  3298 0000299D [608C0000]          <1> usercache dd userlst
  3299                              <1> 	
  3300                              <1> buftxtclear:
  3301 000029A1 30C0                <1> 	xor al, al
  3302 000029A3 BE[FECA0000]        <1> 	mov esi, buftxt
  3303 000029A8 81FE[FECE0000]      <1> clearbuftxt: cmp esi, buf2
  3304 000029AE 730E                <1> 	jae retbufclr
  3305 000029B0 8806                <1> 	mov [esi], al
  3306 000029B2 46                  <1> 	inc esi
  3307 000029B3 EBF3                <1> 	jmp clearbuftxt
  3308                              <1> 
  3309 000029B5 39DE                <1> clearitbuf: cmp esi, ebx
  3310 000029B7 7305                <1> 	jae retbufclr
  3311 000029B9 8806                <1> 	mov [esi], al
  3312 000029BB 46                  <1> 	inc esi
  3313 000029BC EBF7                <1> 	jmp clearitbuf
  3314 000029BE C3                  <1> retbufclr: ret
  3315                              <1> 
  3316 000029BF E900000000          <1> full:	jmp nwcmd
  3317                              <1> 
  3318                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3319                              <1> nwcmd:
  3320 000029C4 FB                  <1> 	sti
  3321 000029C5 31C0                <1> 	xor eax, eax
  3322 000029C7 3905[992B0000]      <1> 	cmp [nextcommandloc], eax
  3323 000029CD 7413                <1> 	je nomultiplecommand
  3324 000029CF 8B35[992B0000]      <1> 	mov esi, [nextcommandloc]
  3325 000029D5 8935[9D2B0000]      <1> 	mov [thiscommandloc], esi
  3326 000029DB E8C6010000          <1> 	call fixvariables
  3327 000029E0 EBE2                <1> 	jmp nwcmd
  3328                              <1> nomultiplecommand:
  3329 000029E2 A3[9D2B0000]        <1> 	mov [thiscommandloc], eax
  3330 000029E7 3805[7A640000]      <1> 	cmp [threadson], al
  3331 000029ED 7405                <1> 	je noclinwcmd
  3332 000029EF A2[7A640000]        <1> 	mov [threadson], al
  3333                              <1> noclinwcmd:
  3334 000029F4 B001                <1> 	mov al, 1
  3335 000029F6 3805[F8B60000]      <1> 	cmp [BATCHISON], al
  3336 000029FC 7501                <1> 	jne cancel
  3337 000029FE C3                  <1> 	ret
  3338 000029FF 30C0                <1> cancel:	xor al, al
  3339 00002A01 A2[8FB60000]        <1> 	mov [IFON], al
  3340 00002A06 A2[F8B60000]        <1> 	mov [BATCHISON], al
  3341 00002A0B B05B                <1> 	mov al, '['
  3342 00002A0D 66BB0700            <1> 	mov bx, 7
  3343 00002A11 E84DF8FFFF          <1> 	call prcharq
  3344 00002A16 8B35[9D290000]      <1> 	mov esi, [usercache]
  3345 00002A1C E8ECF2FFFF          <1> 	call printquiet
  3346 00002A21 BE[4E8C0000]        <1> 	mov esi, computer
  3347 00002A26 E8E2F2FFFF          <1> 	call printquiet
  3348 00002A2B BE[8AB40000]        <1> 	mov esi, currentfolder
  3349 00002A30 0335[82B40000]      <1> 	add esi, [lastfolderloc]
  3350 00002A36 E8D2F2FFFF          <1> 	call printquiet
  3351 00002A3B BE[598C0000]        <1> 	mov esi, endprompt
  3352 00002A40 E8DAF2FFFF          <1> 	call print
  3353 00002A45 E857FFFFFF          <1> 	call buftxtclear
  3354 00002A4A BE[FECA0000]        <1> 	mov esi, buftxt
  3355 00002A4F C605[D6210000]01    <1> 	mov byte [commandedit], 1
  3356 00002A56 B00A                <1> 	mov al, 10
  3357 00002A58 66BB0700            <1> 	mov bx, 7
  3358 00002A5C BF[FECE0000]        <1> 	mov edi, buftxtend
  3359 00002A61 E89EF3FFFF          <1> 	call rdprint
  3360 00002A66 C605[D6210000]00    <1> 	mov byte [commandedit], 0
  3361 00002A6D 803D[FECA0000]00    <1> 	cmp byte [buftxt], 0
  3362 00002A74 0F844AFFFFFF        <1> 	je near nwcmd
  3363 00002A7A 8B35[60A70100]      <1> gotcmd:	mov esi, [commandbufpos]
  3364 00002A80 8935[5CA70100]      <1> 	mov [lastcommandpos], esi
  3365 00002A86 FF05[68A70100]      <1> 	inc dword [commandsentered]
  3366 00002A8C BF[FECA0000]        <1> 	mov edi, buftxt
  3367 00002A91 81C6[6CA70100]      <1> 	add esi, commandbuf
  3368 00002A97 81FE[6CB70100]      <1> 	cmp esi, commandbufend
  3369 00002A9D 7605                <1> 	jbe copycommand
  3370 00002A9F BE[6CA70100]        <1> 	mov esi, commandbuf
  3371                              <1> copycommand:
  3372 00002AA4 8A07                <1> 	mov al, [edi]
  3373 00002AA6 8806                <1> 	mov [esi], al
  3374 00002AA8 47                  <1> 	inc edi
  3375 00002AA9 46                  <1> 	inc esi
  3376 00002AAA 3C00                <1> 	cmp al, 0
  3377 00002AAC 740F                <1> 	je donecopy
  3378 00002AAE 81FE[6CB70100]      <1> 	cmp esi, commandbufend
  3379 00002AB4 76EE                <1> 	jbe copycommand
  3380 00002AB6 BE[6CA70100]        <1> 	mov esi, commandbuf
  3381 00002ABB EBE7                <1> 	jmp copycommand
  3382                              <1> donecopy:
  3383 00002ABD 81EE[6CA70100]      <1> 	sub esi, commandbuf
  3384 00002AC3 8935[60A70100]      <1> 	mov [commandbufpos], esi
  3385 00002AC9 E8D3000000          <1> 	call run
  3386 00002ACE E9F1FEFFFF          <1> 	jmp nwcmd
  3387                              <1> 
  3388 00002AD3 E8C9FEFFFF          <1> input:	call buftxtclear
  3389 00002AD8 BE[FECA0000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3390 00002ADD BF[FECE0000]        <1> 	mov edi, buftxtend
  3391 00002AE2 B00A                <1> stdin:	mov al, 10
  3392 00002AE4 B307                <1> 	mov bl, 7
  3393 00002AE6 E819F3FFFF          <1> 	call rdprint
  3394 00002AEB C3                  <1> 	ret
  3395                              <1> 
  3396                              <1> replacevariable:
  3397 00002AEC 8A4601              <1> 	mov al, [esi + 1]
  3398 00002AEF C64601FF            <1> 	mov byte [esi + 1], 255
  3399 00002AF3 3C24                <1> 	cmp al, "$"
  3400 00002AF5 0F84AB000000        <1> 	je near fixvariables
  3401 00002AFB 884601              <1> 	mov [esi + 1], al
  3402 00002AFE 56                  <1> 	push esi
  3403 00002AFF 81EE[FECA0000]      <1> 	sub esi, buftxt
  3404 00002B05 89F7                <1> 	mov edi, esi
  3405 00002B07 81C6[FECA0000]      <1> 	add esi, buftxt
  3406 00002B0D 47                  <1> 	inc edi
  3407 00002B0E BB[FEB60000]        <1> 	mov ebx, variables
  3408 00002B13 E80D140000          <1> 	call nxtvrech
  3409 00002B18 89F7                <1> 	mov edi, esi
  3410 00002B1A 31DB                <1> 	xor ebx, ebx
  3411 00002B1C 4E                  <1> 	dec esi
  3412                              <1> findvarname:
  3413 00002B1D 4E                  <1> 	dec esi
  3414 00002B1E 8A06                <1> 	mov al, [esi]
  3415 00002B20 43                  <1> 	inc ebx
  3416 00002B21 3C04                <1> 	cmp al, 4
  3417 00002B23 75F8                <1> 	jne findvarname
  3418 00002B25 5E                  <1> 	pop esi
  3419                              <1> replacevarloop:
  3420 00002B26 8A07                <1> 	mov al, [edi]
  3421 00002B28 3C00                <1> 	cmp al, 0
  3422 00002B2A 0F8413000000        <1> 	je near compressbuftxt
  3423 00002B30 81FB00000000        <1> 	cmp ebx, 0
  3424 00002B36 0F8416000000        <1> 	je near expandbuftxt
  3425 00002B3C 8806                <1> 	mov [esi], al
  3426 00002B3E 4B                  <1> 	dec ebx
  3427 00002B3F 46                  <1> 	inc esi
  3428 00002B40 47                  <1> 	inc edi
  3429 00002B41 EBE3                <1> 	jmp replacevarloop
  3430                              <1> compressbuftxt:
  3431 00002B43 8A041E              <1> 	mov al, [esi + ebx]
  3432 00002B46 8806                <1> 	mov [esi], al
  3433 00002B48 46                  <1> 	inc esi
  3434 00002B49 3C00                <1> 	cmp al, 0
  3435 00002B4B 75F6                <1> 	jne compressbuftxt
  3436 00002B4D E954000000          <1> 	jmp fixvariables
  3437                              <1> expandbuftxt:
  3438 00002B52 89F1                <1> 	mov ecx, esi
  3439 00002B54 8A26                <1> 	mov ah, [esi]
  3440                              <1> expandbuftxtlp:
  3441 00002B56 8A1E                <1> 	mov bl, [esi]
  3442 00002B58 46                  <1> 	inc esi
  3443 00002B59 8A3E                <1> 	mov bh, [esi]
  3444 00002B5B 8826                <1> 	mov [esi], ah
  3445 00002B5D 88FC                <1> 	mov ah, bh
  3446 00002B5F 80FB00              <1> 	cmp bl, 0
  3447 00002B62 75F2                <1> 	jne expandbuftxtlp
  3448 00002B64 89CE                <1> 	mov esi, ecx
  3449 00002B66 8806                <1> 	mov [esi], al
  3450 00002B68 47                  <1> 	inc edi
  3451 00002B69 8A07                <1> 	mov al, [edi]
  3452 00002B6B 3C00                <1> 	cmp al, 0
  3453 00002B6D 0F8433000000        <1> 	je near fixvariables
  3454 00002B73 46                  <1> 	inc esi
  3455 00002B74 EBDC                <1> 	jmp expandbuftxt
  3456                              <1> multipleprogline:
  3457 00002B76 30E4                <1> 	xor ah, ah
  3458 00002B78 8826                <1> 	mov [esi], ah
  3459 00002B7A 46                  <1> 	inc esi
  3460 00002B7B 8935[992B0000]      <1> 	mov [nextcommandloc], esi
  3461 00002B81 E93E000000          <1> 	jmp donefixvariables
  3462                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3463 00002B86 46                  <1> 	inc esi
  3464 00002B87 8A06                <1> 	mov al, [esi]
  3465 00002B89 C606FF              <1> 	mov byte [esi], 255
  3466 00002B8C 3C23                <1> 	cmp al, '#'
  3467 00002B8E 7416                <1> 	je fixvariables
  3468 00002B90 4E                  <1> 	dec esi
  3469 00002B91 C60600              <1> 	mov byte [esi], 0
  3470 00002B94 E90D000000          <1> 	jmp fixvariables
  3471                              <1> 	
  3472 00002B99 00000000            <1> nextcommandloc dd 0
  3473 00002B9D 00000000            <1> thiscommandloc dd 0	
  3474                              <1> run:
  3475 00002BA1 BE[FECA0000]        <1> 	mov esi, buftxt
  3476 00002BA6 46                  <1> fixvariables:	inc esi
  3477 00002BA7 8A06                <1> 	mov al, [esi]
  3478 00002BA9 3C23                <1> 	cmp al, '#'	;inline comment
  3479 00002BAB 74D9                <1> 	je inlinecomment
  3480 00002BAD 3C24                <1> 	cmp al, '$' ;variable
  3481 00002BAF 0F8437FFFFFF        <1> 	je near replacevariable
  3482 00002BB5 3C3B                <1> 	cmp al, ';' ;program list
  3483 00002BB7 74BD                <1> 	je multipleprogline
  3484 00002BB9 3C00                <1> 	cmp al, 0
  3485 00002BBB 75E9                <1> 	jne fixvariables
  3486 00002BBD 31C0                <1> 	xor eax, eax
  3487 00002BBF A3[992B0000]        <1> 	mov [nextcommandloc], eax
  3488                              <1> donefixvariables:
  3489 00002BC4 803D[62310000]00    <1> 	cmp byte [indexdone], 0
  3490 00002BCB 7505                <1> 	jne progtest
  3491 00002BCD E8FB040000          <1> 	call indexfiles
  3492                              <1> progtest:
  3493 00002BD2 31C0                <1> 	xor eax, eax
  3494 00002BD4 BB[7EB00000]        <1> 	mov ebx, fileindex
  3495 00002BD9 668B03              <1> prgnxt:	mov ax, [ebx]
  3496 00002BDC B1FF                <1> 	mov cl, 255
  3497 00002BDE B52C                <1> 	mov ch, 44
  3498 00002BE0 6639C8              <1> 	cmp ax, cx
  3499 00002BE3 740B                <1> 	je fndprg
  3500 00002BE5 43                  <1> 	inc ebx
  3501 00002BE6 81FB[7EB40000]      <1> 	cmp ebx, fileindexend
  3502 00002BEC 735D                <1> 	jae prgnf
  3503 00002BEE EBE9                <1> 	jmp prgnxt
  3504 00002BF0 81C302000000        <1> fndprg: add ebx, 2
  3505 00002BF6 31C9                <1> 	xor ecx, ecx
  3506 00002BF8 BE[FECA0000]        <1> 	mov esi, buftxt
  3507 00002BFD 390D[9D2B0000]      <1> 	cmp [thiscommandloc], ecx
  3508 00002C03 7406                <1> 	je noprgtstmultiple
  3509 00002C05 8B35[9D2B0000]      <1> 	mov esi, [thiscommandloc]
  3510                              <1> noprgtstmultiple:
  3511 00002C0B E8A6000000          <1> 	call cndtest
  3512 00002C10 3C01                <1> 	cmp al, 1
  3513 00002C12 7302                <1> 	jae prggood
  3514 00002C14 EBC3                <1> 	jmp prgnxt
  3515 00002C16 81FB[7EB40000]      <1> prggood: cmp ebx, fileindexend
  3516 00002C1C 7358                <1> 	jae prgdn
  3517 00002C1E 31C0                <1> 	xor eax, eax
  3518 00002C20 BE[FECA0000]        <1> 	mov esi, buftxt
  3519 00002C25 3905[9D2B0000]      <1> 	cmp [thiscommandloc], eax
  3520 00002C2B 7406                <1> 	je noprggoodmul
  3521 00002C2D 8B35[9D2B0000]      <1> 	mov esi, [thiscommandloc]
  3522                              <1> noprggoodmul:
  3523 00002C33 8935[772C0000]      <1> 	mov [currentcommandloc], esi
  3524 00002C39 81C303000000        <1> 	add ebx, 3
  3525 00002C3F 8B3B                <1> 	mov edi, [ebx]
  3526 00002C41 C605[7A640000]02    <1> 	mov byte [threadson], 2
  3527 00002C48 FFD7                <1> 	call edi
  3528 00002C4A C3                  <1> 	ret
  3529                              <1> prgnf:	
  3530 00002C4B 8B35[772C0000]      <1> 	mov esi, [currentcommandloc]
  3531 00002C51 8A06                <1> 	mov al, [esi]
  3532 00002C53 3C00                <1> 	cmp al, 0
  3533 00002C55 741F                <1> 	je prgdn
  3534 00002C57 BE[258C0000]        <1> 	mov esi, notfound1
  3535 00002C5C E8BEF0FFFF          <1> 	call print
  3536 00002C61 8B35[772C0000]      <1> 	mov esi, [currentcommandloc]
  3537 00002C67 E8B3F0FFFF          <1> 	call print
  3538 00002C6C BE[2D8C0000]        <1> 	mov esi, notfound2
  3539 00002C71 E8A9F0FFFF          <1> 	call print
  3540 00002C76 C3                  <1> prgdn:	ret
  3541                              <1> 
  3542 00002C77 00000000            <1> currentcommandloc dd 0
  3543                              <1> 
  3544                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3545 00002C7B 6631C0              <1> 	xor ax, ax
  3546 00002C7E 8A06                <1> retest:	mov al, [esi]
  3547 00002C80 8A23                <1> 	mov ah, [ebx]
  3548 00002C82 3C00                <1> 	cmp al, 0
  3549 00002C84 7408                <1> 	je testtrue
  3550 00002C86 38E0                <1> 	cmp al, ah
  3551 00002C88 750C                <1> 	jne testfalse
  3552 00002C8A 43                  <1> 	inc ebx
  3553 00002C8B 46                  <1> 	inc esi
  3554 00002C8C EBF0                <1> 	jmp retest
  3555                              <1> testtrue:
  3556 00002C8E 80FC00              <1> 	cmp ah, 0
  3557 00002C91 7503                <1> 	jne testfalse
  3558 00002C93 B001                <1> 	mov al, 1
  3559 00002C95 C3                  <1> 	ret
  3560                              <1> testfalse:
  3561 00002C96 30C0                <1> 	xor al, al
  3562 00002C98 C3                  <1> 	ret
  3563                              <1> 
  3564                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3565 00002C99 30C0                <1> 	xor al, al
  3566                              <1> opretest:
  3567 00002C9B 8A06                <1> 	mov al, [esi]
  3568 00002C9D 8A23                <1> 	mov ah, [ebx]
  3569 00002C9F 38E0                <1> 	cmp al, ah
  3570 00002CA1 7510                <1> 	jne optestfalse
  3571 00002CA3 80FC00              <1> 	cmp ah, 0
  3572 00002CA6 7404                <1> 	je optesttrue
  3573 00002CA8 43                  <1> 	inc ebx
  3574 00002CA9 46                  <1> 	inc esi
  3575 00002CAA EBEF                <1> 	jmp opretest
  3576                              <1> optesttrue:
  3577 00002CAC 3C00                <1> 	cmp al, 0
  3578 00002CAE 7503                <1> 	jne optestfalse
  3579 00002CB0 B001                <1> 	mov al, 1
  3580 00002CB2 C3                  <1> 	ret
  3581                              <1> optestfalse:
  3582 00002CB3 30C0                <1> 	xor al, al
  3583 00002CB5 C3                  <1> 	ret
  3584                              <1> 
  3585                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3586 00002CB6 30C0                <1> 	xor al, al
  3587 00002CB8 8A06                <1> cndretest:	mov al, [esi]
  3588 00002CBA 8A23                <1> 	mov ah, [ebx]
  3589 00002CBC 38CC                <1> 	cmp ah, cl
  3590 00002CBE 7408                <1> 	je cndtesttrue
  3591 00002CC0 38E0                <1> 	cmp al, ah
  3592 00002CC2 750B                <1> 	jne cndtestfalse
  3593 00002CC4 43                  <1> 	inc ebx
  3594 00002CC5 46                  <1> 	inc esi
  3595 00002CC6 EBF0                <1> 	jmp cndretest
  3596                              <1> cndtesttrue:
  3597 00002CC8 38C8                <1> 	cmp al, cl
  3598 00002CCA 7506                <1> 	jne cndtestalmost
  3599 00002CCC B001                <1> 	mov al, 1
  3600 00002CCE C3                  <1> 	ret
  3601                              <1> cndtestfalse:
  3602 00002CCF 30C0                <1> 	xor al, al
  3603 00002CD1 C3                  <1> 	ret
  3604                              <1> cndtestalmost:
  3605 00002CD2 B002                <1> 	mov al, 2
  3606 00002CD4 C3                  <1> 	ret
  3607                              <1> 	
  3608                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3609                              <1> 		                ;ends if array seperator is found backwards after 0
  3610                              <1> 	arnxt:	      
  3611 00002CD5 88E8                <1> 		mov al, ch
  3612 00002CD7 88CC                <1> 		mov ah, cl        
  3613 00002CD9 663906              <1> 		cmp [esi], ax
  3614 00002CDC 744D                <1> 		je ardn
  3615 00002CDE 66390E              <1> 		cmp [esi], cx
  3616 00002CE1 7407                <1> 		je arfnd
  3617 00002CE3 46                  <1> 		inc esi
  3618 00002CE4 39DE                <1> 		cmp esi, ebx
  3619 00002CE6 7343                <1> 		jae ardn
  3620 00002CE8 EBEB                <1> 		jmp arnxt
  3621 00002CEA 81C602000000        <1> 	arfnd: add esi, 2
  3622 00002CF0 891D[2C2D0000]      <1> 		mov [arbx], ebx
  3623 00002CF6 890D[302D0000]      <1> 		mov [arcx], ecx
  3624 00002CFC E81EF0FFFF          <1> 		call print
  3625 00002D01 8935[322D0000]      <1> 		mov [arsi], esi
  3626 00002D07 BE[5E8C0000]        <1> 		mov esi, line
  3627 00002D0C E80EF0FFFF          <1> 		call print
  3628 00002D11 8B1D[2C2D0000]      <1> 		mov ebx, [arbx]
  3629 00002D17 668B0D[302D0000]    <1> 		mov cx, [arcx]
  3630 00002D1E 8B35[322D0000]      <1> 		mov esi, [arsi]
  3631 00002D24 46                  <1> 		inc esi
  3632 00002D25 39DE                <1> 		cmp esi, ebx
  3633 00002D27 7302                <1> 		jae ardn
  3634 00002D29 EBAA                <1> 		jmp arnxt
  3635 00002D2B C3                  <1> 	ardn:	ret
  3636 00002D2C 00000000            <1> arbx:	dw 0,0
  3637 00002D30 0000                <1> arcx:	db 0,0
  3638 00002D32 00000000            <1> arsi:	dw 0,0
  3639                              <1> 
  3640                              <1> clearbuffer:
  3641 00002D36 BE[FECE0000]        <1> 	mov esi, buf2
  3642 00002D3B B030                <1> 	mov al, '0'
  3643 00002D3D 81FE[12CF0000]      <1> clearbuf: cmp esi, numbuf
  3644 00002D43 7305                <1> 	jae doneclearbuff
  3645 00002D45 8806                <1> 	mov [esi], al
  3646 00002D47 46                  <1> 	inc esi
  3647 00002D48 EBF3                <1> 	jmp clearbuf
  3648                              <1> doneclearbuff: 
  3649 00002D4A C3                  <1> 		ret
  3650                              <1> 
  3651                              <1> convert:
  3652 00002D4B 4E                  <1> 	dec esi
  3653 00002D4C 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3654                              <1> .lp:
  3655 00002D4E 89DE                <1> 	mov esi, ebx
  3656 00002D50 81EE09000000        <1> 	sub esi, 9
  3657 00002D56 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3658 00002D5C 720A                <1> 	jb .8
  3659 00002D5E 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3660 00002D64 FE06                <1> 	inc byte [esi]
  3661 00002D66 EBE6                <1> 	jmp .lp
  3662 00002D68 46                  <1> .8:	inc esi
  3663 00002D69 81F900E1F505        <1> 	cmp ecx, 100000000
  3664 00002D6F 720A                <1> 	jb .7
  3665 00002D71 81E900E1F505        <1> 	sub ecx, 100000000
  3666 00002D77 FE06                <1> 	inc byte [esi]
  3667 00002D79 EBD3                <1> 	jmp .lp
  3668 00002D7B 46                  <1> .7:	inc esi
  3669 00002D7C 81F980969800        <1> 	cmp ecx, 10000000
  3670 00002D82 720A                <1> 	jb .6
  3671 00002D84 81E980969800        <1> 	sub ecx, 10000000
  3672 00002D8A FE06                <1> 	inc byte [esi]
  3673 00002D8C EBC0                <1> 	jmp .lp
  3674 00002D8E 46                  <1> .6:	inc esi
  3675 00002D8F 81F940420F00        <1> 	cmp ecx, 1000000
  3676 00002D95 720A                <1> 	jb .5
  3677 00002D97 81E940420F00        <1> 	sub ecx, 1000000
  3678 00002D9D FE06                <1> 	inc byte [esi]
  3679 00002D9F EBAD                <1> 	jmp .lp
  3680 00002DA1 46                  <1> .5:	inc esi
  3681 00002DA2 81F9A0860100        <1> 	cmp ecx, 100000
  3682 00002DA8 720A                <1> 	jb .4
  3683 00002DAA 81E9A0860100        <1> 	sub ecx, 100000
  3684 00002DB0 FE06                <1> 	inc byte [esi]
  3685 00002DB2 EB9A                <1> 	jmp .lp
  3686 00002DB4 46                  <1> .4:	inc esi
  3687 00002DB5 81F910270000        <1> 	cmp ecx, 10000
  3688 00002DBB 720A                <1> 	jb .3
  3689 00002DBD 81E910270000        <1> 	sub ecx, 10000
  3690 00002DC3 FE06                <1> 	inc byte [esi]
  3691 00002DC5 EB87                <1> 	jmp .lp
  3692 00002DC7 46                  <1> .3:	inc esi
  3693 00002DC8 81F9E8030000        <1> 	cmp ecx, 1000
  3694 00002DCE 720D                <1> 	jb .2
  3695 00002DD0 81E9E8030000        <1> 	sub ecx, 1000
  3696 00002DD6 FE06                <1> 	inc byte [esi]
  3697 00002DD8 E971FFFFFF          <1> 	jmp .lp
  3698 00002DDD 46                  <1> .2:	inc esi
  3699 00002DDE 81F964000000        <1> 	cmp ecx, 100
  3700 00002DE4 720D                <1> 	jb .1
  3701 00002DE6 81E964000000        <1> 	sub ecx, 100
  3702 00002DEC FE06                <1> 	inc byte [esi]
  3703 00002DEE E95BFFFFFF          <1> 	jmp .lp
  3704 00002DF3 46                  <1> .1:	inc esi
  3705 00002DF4 81F90A000000        <1> 	cmp ecx, 10
  3706 00002DFA 720D                <1> 	jb .0
  3707 00002DFC 81E90A000000        <1> 	sub ecx, 10
  3708 00002E02 FE06                <1> 	inc byte [esi]
  3709 00002E04 E945FFFFFF          <1> 	jmp .lp
  3710 00002E09 46                  <1> .0:	inc esi
  3711 00002E0A 81F901000000        <1> 	cmp ecx, 1
  3712 00002E10 720D                <1> 	jb .dn
  3713 00002E12 81E901000000        <1> 	sub ecx, 1
  3714 00002E18 FE06                <1> 	inc byte [esi]
  3715 00002E1A E92FFFFFFF          <1> 	jmp .lp
  3716                              <1> .dn:
  3717 00002E1F C3                  <1> 	ret
  3718                              <1> 
  3719                              <1> 	
  3720                              <1> 
  3721 00002E20 00<rept>            <1> hexnumber times 8 db 0
  3722 00002E28 202000              <1> hexnumberend db "  ",0
  3723                              <1> 
  3724                              <1> converthex:
  3725                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3726 00002E2B 56                  <1> 	push esi
  3727 00002E2C B030                <1> 	mov al, "0"
  3728 00002E2E 39FE                <1> .clearlp: cmp esi, edi
  3729 00002E30 7305                <1> 	jae .doneclear
  3730 00002E32 8806                <1> 	mov [esi], al
  3731 00002E34 46                  <1> 	inc esi
  3732 00002E35 EBF7                <1> 	jmp .clearlp
  3733                              <1> .doneclear:
  3734 00002E37 81EE02000000        <1> 	sub esi, 2
  3735 00002E3D 89C8                <1> 	mov eax, ecx
  3736                              <1> .loop:
  3737 00002E3F 30FF                <1> 	xor bh, bh
  3738 00002E41 88C3                <1> 	mov bl, al
  3739 00002E43 66C1E304            <1> 	shl bx, 4
  3740 00002E47 C0EB04              <1> 	shr bl, 4
  3741 00002E4A 86DF                <1> 	xchg bl, bh ;they are backwards
  3742 00002E4C 80C330              <1> 	add bl, 48
  3743 00002E4F 80FB39              <1> 	cmp bl, "9"
  3744 00002E52 7609                <1> 	jbe .goodbl
  3745 00002E54 80EB30              <1> 	sub bl, 48
  3746 00002E57 80EB0A              <1> 	sub bl, 0xA
  3747 00002E5A 80C341              <1> 	add bl, "A"
  3748                              <1> .goodbl:
  3749 00002E5D 80C730              <1> 	add bh, 48
  3750 00002E60 80FF39              <1> 	cmp bh, "9"
  3751 00002E63 7609                <1> 	jbe .goodbh
  3752 00002E65 80EF30              <1> 	sub bh, 48
  3753 00002E68 80EF0A              <1> 	sub bh, 0xA
  3754 00002E6B 80C741              <1> 	add bh, "A"
  3755                              <1> .goodbh:
  3756 00002E6E C1E808              <1> 	shr eax, 8
  3757 00002E71 66891E              <1> 	mov [esi], bx
  3758 00002E74 81EE02000000        <1> 	sub esi, 2
  3759 00002E7A 3B3424              <1> 	cmp esi, [esp]
  3760 00002E7D 7207                <1> 	jb .done
  3761 00002E7F 3D00000000          <1> 	cmp eax, 0
  3762 00002E84 75B9                <1> 	jne .loop
  3763                              <1> .done:
  3764 00002E86 5E                  <1> 	pop esi
  3765 00002E87 C3                  <1> 	ret
  3766                              <1> 	
  3767                              <1> 	
  3768 00002E88 00                  <1> smallhex db 0
  3769 00002E89 01                  <1> firsthexshown db 1
  3770                              <1> showhexsmall:
  3771 00002E8A C605[882E0000]01    <1> 	mov byte [smallhex], 1
  3772 00002E91 E808000000          <1> 	call showhex
  3773 00002E96 C605[882E0000]00    <1> 	mov byte [smallhex], 0
  3774 00002E9D C3                  <1> 	ret
  3775                              <1> showhex:
  3776 00002E9E 60                  <1> 	pusha
  3777 00002E9F BE[202E0000]        <1> 	mov esi, hexnumber
  3778 00002EA4 BF[282E0000]        <1> 	mov edi, hexnumberend
  3779 00002EA9 E87DFFFFFF          <1> 	call converthex
  3780 00002EAE 803D[892E0000]01    <1> 	cmp byte [firsthexshown], 1
  3781 00002EB5 7503                <1> 	jne .show
  3782 00002EB7 6631D2              <1> 	xor dx, dx
  3783                              <1> .show:
  3784 00002EBA 803D[892E0000]03    <1> 	cmp byte [firsthexshown], 3
  3785 00002EC1 750A                <1> 	jne .nonewhexline
  3786 00002EC3 BE[5E8C0000]        <1> 	mov esi, line
  3787 00002EC8 E852EEFFFF          <1> 	call print
  3788                              <1> .nonewhexline:
  3789 00002ECD 803D[892E0000]04    <1> 	cmp byte [firsthexshown], 4
  3790 00002ED4 7527                <1> 	jne .notab
  3791 00002ED6 B1A0                <1> 	mov cl, 160
  3792 00002ED8 28D1                <1> 	sub cl, dl
  3793 00002EDA C0E905              <1> 	shr cl, 5
  3794 00002EDD C0E105              <1> 	shl cl, 5
  3795 00002EE0 80F900              <1> 	cmp cl, 0
  3796 00002EE3 750F                <1> 	jne .nonewline
  3797 00002EE5 BE[5E8C0000]        <1> 	mov esi, line
  3798 00002EEA E830EEFFFF          <1> 	call print
  3799 00002EEF E909000000          <1> 	jmp .notab
  3800                              <1> .nonewline:
  3801 00002EF4 80C20F              <1> 	add dl, 15
  3802 00002EF7 C0EA04              <1> 	shr dl, 4
  3803 00002EFA C0E204              <1> 	shl dl, 4
  3804                              <1> .notab:
  3805 00002EFD BE[202E0000]        <1> 	mov esi, hexnumber
  3806 00002F02 803D[882E0000]01    <1> 	cmp byte [smallhex],1
  3807 00002F09 7506                <1> 	jne .nosmall
  3808 00002F0B 81C606000000        <1> 	add esi, 6
  3809                              <1> .nosmall:
  3810 00002F11 803D[892E0000]05    <1> 	cmp byte [firsthexshown], 5
  3811 00002F18 750A                <1> 	jne .noquiet
  3812 00002F1A E8EEEDFFFF          <1> 	call printquiet
  3813 00002F1F E918000000          <1> 	jmp .donequiet
  3814                              <1> .noquiet:
  3815 00002F24 803D[892E0000]06    <1> 	cmp byte [firsthexshown], 6
  3816 00002F2B 750A                <1> 	jne .normal
  3817 00002F2D E8CFEDFFFF          <1> 	call printhighlight
  3818 00002F32 E905000000          <1> 	jmp .donequiet
  3819                              <1> .normal:
  3820 00002F37 E8E3EDFFFF          <1> 	call print
  3821                              <1> .donequiet:
  3822 00002F3C 803D[892E0000]02    <1> 	cmp byte [firsthexshown], 2
  3823 00002F43 750A                <1> 	jne .shown
  3824 00002F45 BE[5E8C0000]        <1> 	mov esi, line
  3825 00002F4A E8D0EDFFFF          <1> 	call print
  3826                              <1> .shown:
  3827 00002F4F C605[892E0000]00    <1> 	mov byte [firsthexshown], 0
  3828 00002F56 61                  <1> 	popa
  3829 00002F57 C3                  <1> 	ret
  3830                              <1> 
  3831                              <1> 
  3832 00002F58 303030303030303030- <1> decnumber db "00000000000000"
  3833 00002F61 3030303030          <1>
  3834 00002F66 2000                <1> decnumberend: db " ",0
  3835                              <1> 
  3836                              <1> showdec: ;;same as showhex, just uses decimal conversion
  3837 00002F68 60                  <1> 	pusha
  3838 00002F69 BF[582F0000]        <1> 	mov edi, decnumber
  3839 00002F6E BE[662F0000]        <1> 	mov esi, decnumberend
  3840                              <1> .clear:
  3841 00002F73 C60730              <1> 	mov byte [edi], '0'
  3842 00002F76 47                  <1> 	inc edi
  3843 00002F77 39F7                <1> 	cmp edi, esi
  3844 00002F79 72F8                <1> 	jb .clear
  3845 00002F7B BF[582F0000]        <1> 	mov edi, decnumber
  3846 00002F80 E8C6FDFFFF          <1> 	call convert
  3847 00002F85 803D[892E0000]01    <1> 	cmp byte [firsthexshown], 1
  3848 00002F8C 7503                <1> 	jne .show
  3849 00002F8E 6631D2              <1> 	xor dx, dx
  3850                              <1> .show:
  3851 00002F91 803D[892E0000]03    <1> 	cmp byte [firsthexshown], 3
  3852 00002F98 750A                <1> 	jne .nonewdecline
  3853 00002F9A BE[5E8C0000]        <1> 	mov esi, line
  3854 00002F9F E87BEDFFFF          <1> 	call print
  3855                              <1> .nonewdecline:
  3856 00002FA4 803D[892E0000]04    <1> 	cmp byte [firsthexshown], 4
  3857 00002FAB 7527                <1> 	jne .notab
  3858 00002FAD B1A0                <1> 	mov cl, 160
  3859 00002FAF 28D1                <1> 	sub cl, dl
  3860 00002FB1 C0E905              <1> 	shr cl, 5
  3861 00002FB4 C0E105              <1> 	shl cl, 5
  3862 00002FB7 80F900              <1> 	cmp cl, 0
  3863 00002FBA 750F                <1> 	jne .nonewline
  3864 00002FBC BE[5E8C0000]        <1> 	mov esi, line
  3865 00002FC1 E859EDFFFF          <1> 	call print
  3866 00002FC6 E909000000          <1> 	jmp .notab
  3867                              <1> .nonewline:
  3868 00002FCB 80C20F              <1> 	add dl, 15
  3869 00002FCE C0EA04              <1> 	shr dl, 4
  3870 00002FD1 C0E204              <1> 	shl dl, 4
  3871                              <1> .notab:
  3872 00002FD4 BE[582F0000]        <1> 	mov esi, decnumber
  3873 00002FD9 4E                  <1> 	dec esi
  3874                              <1> .sifind:
  3875 00002FDA 46                  <1> 	inc esi
  3876 00002FDB 803E30              <1> 	cmp byte [esi], '0'
  3877 00002FDE 74FA                <1> 	je .sifind
  3878 00002FE0 E83AEDFFFF          <1> 	call print
  3879 00002FE5 803D[892E0000]02    <1> 	cmp byte [firsthexshown], 2
  3880 00002FEC 750A                <1> 	jne .shown
  3881 00002FEE BE[5E8C0000]        <1> 	mov esi, line
  3882 00002FF3 E827EDFFFF          <1> 	call print
  3883                              <1> .shown:
  3884 00002FF8 C605[892E0000]00    <1> 	mov byte [firsthexshown], 0
  3885 00002FFF 61                  <1> 	popa
  3886 00003000 C3                  <1> 	ret
  3887                              <1> 	
  3888                              <1> cnvrthextxt:
  3889 00003001 31C9                <1> 	xor ecx, ecx
  3890 00003003 31C0                <1> 	xor eax, eax
  3891 00003005 31D2                <1> 	xor edx, edx
  3892 00003007 31DB                <1> 	xor ebx, ebx
  3893 00003009 4E                  <1> 	dec esi
  3894                              <1> .end:
  3895 0000300A 46                  <1> 	inc esi
  3896 0000300B 8A06                <1> 	mov al, [esi]
  3897 0000300D 3C00                <1> 	cmp al, 0
  3898 0000300F 75F9                <1> 	jne .end
  3899                              <1> .loop:
  3900 00003011 4E                  <1> 	dec esi
  3901 00003012 8A06                <1> 	mov al, [esi]
  3902 00003014 3C41                <1> 	cmp al, "A"
  3903 00003016 7328                <1> 	jae .char
  3904 00003018 2C30                <1> 	sub al, 48
  3905 0000301A 3C10                <1> 	cmp al, 16
  3906 0000301C 7721                <1> 	ja .done
  3907                              <1> .donechar:
  3908 0000301E 81FA00000000        <1> 	cmp edx, 0
  3909 00003024 740E                <1> 	je .noshl
  3910 00003026 89D3                <1> 	mov ebx, edx
  3911                              <1> .shl:
  3912 00003028 C1E004              <1> 	shl eax, 4
  3913 0000302B 4B                  <1> 	dec ebx
  3914 0000302C 81FB00000000        <1> 	cmp ebx, 0
  3915 00003032 75F4                <1> 	jne .shl
  3916                              <1> .noshl:
  3917 00003034 42                  <1> 	inc edx
  3918 00003035 01C1                <1> 	add ecx, eax
  3919 00003037 81FA08000000        <1> 	cmp edx, 8
  3920 0000303D 72D2                <1> 	jb .loop
  3921                              <1> .done:
  3922 0000303F C3                  <1> 	ret
  3923                              <1> .char:
  3924 00003040 3C46                <1> 	cmp al, "F"
  3925 00003042 77FB                <1> 	ja .done
  3926 00003044 2C41                <1> 	sub al, "A"
  3927 00003046 040A                <1> 	add al, 0xA
  3928 00003048 EBD4                <1> 	jmp .donechar
  3929                              <1> 	
  3930                              <1> 	
  3931                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  3932 0000304A 31C9                <1> 	xor ecx, ecx
  3933 0000304C 31C0                <1> 	xor eax, eax
  3934 0000304E 31D2                <1> 	xor edx, edx
  3935 00003050 31DB                <1> 	xor ebx, ebx
  3936 00003052 4E                  <1> 	dec esi
  3937                              <1> .lp:
  3938 00003053 46                  <1> 	inc esi
  3939 00003054 8A06                <1> 	mov al, [esi]
  3940 00003056 3C00                <1> 	cmp al, 0
  3941 00003058 75F9                <1> 	jne .lp
  3942 0000305A 4E                  <1> 	dec esi
  3943 0000305B 8A06                <1> 	mov al, [esi]
  3944 0000305D 3C2E                <1> 	cmp al, '.'
  3945 0000305F 7503                <1> 	jne .dot
  3946 00003061 46                  <1> 	inc esi
  3947 00003062 EBEF                <1> 	jmp .lp
  3948                              <1> .dot:
  3949 00003064 3C20                <1> 	cmp al, ' '
  3950 00003066 7404                <1> 	je .zero
  3951 00003068 3C30                <1> 	cmp al, '0'
  3952 0000306A 7504                <1> 	jne .txtlp
  3953                              <1> .zero: 
  3954 0000306C 39FE                <1> 		cmp esi, edi
  3955 0000306E 7458                <1> 		je .done
  3956                              <1> .txtlp:
  3957 00003070 31C0                <1> 	xor eax, eax
  3958 00003072 8A06                <1> 	mov al, [esi]
  3959 00003074 3C3D                <1> 	cmp al, '='
  3960 00003076 7450                <1> 	je .done
  3961 00003078 3C30                <1> 	cmp al, 48
  3962 0000307A 724C                <1> 	jb .done
  3963 0000307C 3C23                <1> 	cmp al, '#'
  3964 0000307E 7448                <1> 	je .done
  3965 00003080 39FE                <1> 	cmp esi, edi
  3966 00003082 7244                <1> 	jb .done
  3967 00003084 81F900000000        <1> 	cmp ecx, 0
  3968 0000308A 7708                <1> 	ja .exp
  3969 0000308C 2C30                <1> .noexp:	sub al, 48
  3970 0000308E 01C2                <1> 	add edx, eax
  3971 00003090 4E                  <1> 	dec esi
  3972 00003091 41                  <1> 	inc ecx
  3973 00003092 EBDC                <1> 	jmp .txtlp
  3974 00003094 81F900000000        <1> .exp:	cmp ecx, 0
  3975 0000309A 74F0                <1> 	je .noexp
  3976 0000309C 2C30                <1> 	sub al, 48
  3977 0000309E 51                  <1> 	push ecx
  3978 0000309F 89C3                <1> .expmul:	mov ebx, eax
  3979 000030A1 01D8                <1> 	add eax, ebx
  3980 000030A3 01D8                <1> 	add eax, ebx
  3981 000030A5 01D8                <1> 	add eax, ebx
  3982 000030A7 01D8                <1> 	add eax, ebx
  3983 000030A9 01D8                <1> 	add eax, ebx
  3984 000030AB 01D8                <1> 	add eax, ebx
  3985 000030AD 01D8                <1> 	add eax, ebx
  3986 000030AF 01D8                <1> 	add eax, ebx
  3987 000030B1 01D8                <1> 	add eax, ebx
  3988 000030B3 81E901000000        <1> 	sub ecx, 1
  3989 000030B9 81F900000000        <1> 	cmp ecx, 0
  3990 000030BF 77DE                <1> 	ja .expmul
  3991 000030C1 01C2                <1> 	add edx, eax
  3992 000030C3 59                  <1> 	pop ecx
  3993 000030C4 4E                  <1> 	dec esi
  3994 000030C5 41                  <1> 	inc ecx
  3995 000030C6 EBA8                <1> 	jmp .txtlp
  3996 000030C8 89D1                <1> .done: mov ecx, edx
  3997 000030CA C3                  <1> 	ret
  3998                                      %include "source/programs.asm"
  3999 000030CB FF2C                <1> filetypes db 255,44
  4000                              <1> progstart:		;programs start here
  4001                              <1> indexfiles:
  4002 000030CD BE[CD300000]        <1> 	mov esi, progstart
  4003 000030D2 BB[7EB00000]        <1> 	mov ebx, fileindex
  4004 000030D7 BF[CD300000]        <1> 	mov edi, progstart
  4005 000030DC 81EF02000000        <1> 	sub edi, 2
  4006                              <1> indexloop:
  4007 000030E2 668B0E              <1> 	mov cx, [esi]
  4008                              <1> 	indexloop2:
  4009 000030E5 663B0F              <1> 		cmp cx, [edi]
  4010 000030E8 7424                <1> 		je indexloop2done
  4011 000030EA 81EF02000000        <1> 		sub edi, 2
  4012 000030F0 81FF[CB300000]      <1> 		cmp edi, filetypes
  4013 000030F6 73ED                <1> 		jae indexloop2
  4014 000030F8 BF[CD300000]        <1> 	mov edi, progstart
  4015 000030FD 81EF02000000        <1> 	sub edi, 2
  4016 00003103 46                  <1> 	inc esi
  4017 00003104 81FE[A0500000]      <1> 	cmp esi, batchprogend
  4018 0000310A 734E                <1> 	jae indexloopdone
  4019 0000310C EBD4                <1> 	jmp indexloop
  4020                              <1> indexloop2done:
  4021 0000310E 66890B              <1> 	mov [ebx], cx
  4022 00003111 81C302000000        <1> 	add ebx, 2
  4023 00003117 81C602000000        <1> 	add esi, 2
  4024                              <1> 	nameindex:
  4025 0000311D 8A0E                <1> 		mov cl, [esi]
  4026 0000311F 80F900              <1> 		cmp cl, 0
  4027 00003122 7406                <1> 		je nameindexdone
  4028 00003124 880B                <1> 		mov [ebx], cl
  4029 00003126 46                  <1> 		inc esi
  4030 00003127 43                  <1> 		inc ebx
  4031 00003128 EBF3                <1> 		jmp nameindex
  4032                              <1> 	nameindexdone:
  4033 0000312A 43                  <1> 		inc ebx
  4034 0000312B 66C7030000          <1> 		mov word [ebx], 0
  4035 00003130 81C302000000        <1> 		add ebx, 2
  4036 00003136 46                  <1> 		inc esi
  4037 00003137 8933                <1> 		mov [ebx], esi
  4038 00003139 81C304000000        <1> 		add ebx, 4
  4039 0000313F 66C7030000          <1> 		mov word [ebx], 0
  4040 00003144 81C302000000        <1> 		add ebx, 2
  4041 0000314A 81FB[7EB40000]      <1> 		cmp ebx, fileindexend
  4042 00003150 7308                <1> 		jae indexloopdone
  4043 00003152 81C601000000        <1> 		add esi, 1
  4044 00003158 EB88                <1> 		jmp indexloop
  4045 0000315A C605[62310000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4046 00003161 C3                  <1> 		ret
  4047 00003162 00                  <1> indexdone db 0
  4048                              <1> %include 'source/programs/_comment.asm' ;#
  4049 00003163 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4050 00003167 C3                  <2> 	ret 
  4051                              <1> %include 'source/programs/_math.asm' ;!
  4052 00003168 FF2C2100            <2> db 255,44,"!",0
  4053                              <2> 	num:	
  4054 0000316C E8C5FBFFFF          <2> 		call clearbuffer
  4055 00003171 C605[F2330000]00    <2> 		mov byte [decimal], 0
  4056 00003178 C605[F3330000]00    <2> 		mov byte [decimal2], 0
  4057 0000317F 8B35[772C0000]      <2> 		mov esi, [currentcommandloc]
  4058 00003185 31C0                <2> 		xor eax, eax
  4059 00003187 31C9                <2> 		xor ecx, ecx
  4060 00003189 31DB                <2> 		xor ebx, ebx
  4061 0000318B 8A06                <2> 	num2:	mov al, [esi]
  4062 0000318D 3C2B                <2> 		cmp al, '+'
  4063 0000318F 741B                <2> 		je operatorfound
  4064 00003191 3C2D                <2> 		cmp al, '-'
  4065 00003193 7417                <2> 		je operatorfound
  4066 00003195 3C2A                <2> 		cmp al, '*'
  4067 00003197 7413                <2> 		je operatorfound
  4068 00003199 3C2F                <2> 		cmp al, '/'
  4069 0000319B 740F                <2> 		je operatorfound
  4070 0000319D 3C5E                <2> 		cmp al, '^'
  4071 0000319F 740B                <2> 		je operatorfound
  4072 000031A1 46                  <2> 		inc esi
  4073 000031A2 3C00                <2> 		cmp al, 0
  4074 000031A4 0F841AF8FFFF        <2> 		je near nwcmd
  4075 000031AA EBDF                <2> 		jmp num2
  4076 000031AC 50                  <2> 	operatorfound: push eax
  4077 000031AD 30E4                <2> 		xor ah, ah
  4078 000031AF 8826                <2> 		mov [esi], ah
  4079 000031B1 89F7                <2> 		mov edi, esi
  4080 000031B3 46                  <2> 		inc esi
  4081 000031B4 8A06                <2> 		mov al, [esi]
  4082 000031B6 3C25                <2> 		cmp al, '%'
  4083 000031B8 0F8462000000        <2> 		je near resultnum1
  4084                              <2> 	varnum2: 
  4085 000031BE 57                  <2> 		push edi
  4086 000031BF E8A4000000          <2> 		call checkdecimal
  4087 000031C4 5F                  <2> 		pop edi
  4088 000031C5 E880FEFFFF          <2> 		call cnvrttxt
  4089                              <2> 	vrnm2:
  4090 000031CA 89CB                <2> 		mov ebx, ecx
  4091 000031CC 53                  <2> 		push ebx
  4092 000031CD E864FBFFFF          <2> 		call clearbuffer
  4093 000031D2 8B35[772C0000]      <2> 		mov esi, [currentcommandloc]
  4094 000031D8 89F7                <2> 		mov edi, esi
  4095 000031DA 46                  <2> 		inc esi
  4096 000031DB 8A06                <2> 		mov al, [esi]
  4097 000031DD 3C25                <2> 		cmp al, '%'
  4098 000031DF 0F844F000000        <2> 		je near resultnum2
  4099                              <2> 	varnum4: 
  4100 000031E5 57                  <2> 		push edi
  4101 000031E6 E869000000          <2> 		call checkdecimal2
  4102 000031EB 5F                  <2> 		pop edi
  4103 000031EC E859FEFFFF          <2> 		call cnvrttxt
  4104                              <2> 	vrnm4:
  4105 000031F1 5B                  <2> 		pop ebx
  4106 000031F2 58                  <2> 		pop eax
  4107 000031F3 3C2B                <2> 		cmp al, '+'
  4108 000031F5 0F849B000000        <2> 		je near plusnum
  4109 000031FB 3C2D                <2> 		cmp al, '-'
  4110 000031FD 0F849F000000        <2> 		je near subnum
  4111 00003203 3C2A                <2> 		cmp al, '*'
  4112 00003205 0F84A3000000        <2> 		je near mulnum
  4113 0000320B 3C2F                <2> 		cmp al, '/'
  4114 0000320D 0F84B1000000        <2> 		je near divnum
  4115 00003213 3C5E                <2> 		cmp al, '^'
  4116 00003215 0F84CE000000        <2> 		je near expnum
  4117 0000321B E9A4F7FFFF          <2> 		jmp nwcmd
  4118                              <2> 	resultnum1:
  4119 00003220 8A0D[F4330000]      <2> 		mov cl, [decimalresult]
  4120 00003226 880D[F2330000]      <2> 		mov [decimal], cl
  4121 0000322C 8B0D[F5330000]      <2> 		mov ecx, [result]
  4122 00003232 EB96                <2> 		jmp vrnm2
  4123                              <2> 	resultnum2:
  4124 00003234 8A0D[F2330000]      <2> 		mov cl, [decimal]
  4125 0000323A 880D[F3330000]      <2> 		mov [decimal2], cl
  4126 00003240 8A0D[F4330000]      <2> 		mov cl, [decimalresult]
  4127 00003246 880D[F2330000]      <2> 		mov [decimal], cl
  4128 0000324C 8B0D[F5330000]      <2> 		mov ecx, [result]
  4129 00003252 EB9D                <2> 		jmp vrnm4
  4130                              <2> 	checkdecimal2:
  4131 00003254 8A25[F2330000]      <2> 		mov ah, [decimal]
  4132 0000325A 8825[F3330000]      <2> 		mov [decimal2], ah
  4133 00003260 30E4                <2> 		xor ah, ah
  4134 00003262 8825[F2330000]      <2> 		mov [decimal], ah
  4135                              <2> 	checkdecimal:
  4136 00003268 89F7                <2> 		mov edi, esi
  4137                              <2> 	chkdec1:
  4138 0000326A 8A07                <2> 		mov al, [edi]
  4139 0000326C 3C2E                <2> 		cmp al, '.'
  4140 0000326E 0F840B000000        <2> 		je near fnddec
  4141 00003274 3C00                <2> 		cmp al, 0
  4142 00003276 0F8419000000        <2> 		je near nodecimal
  4143 0000327C 47                  <2> 		inc edi
  4144 0000327D EBEB                <2> 		jmp chkdec1
  4145                              <2> 	fnddec:
  4146 0000327F 8A4701              <2> 		mov al, [edi + 1]
  4147 00003282 8807                <2> 		mov [edi], al
  4148 00003284 3C00                <2> 		cmp al, 0
  4149 00003286 0F8409000000        <2> 		je near nodecimal
  4150 0000328C FE05[F2330000]      <2> 		inc byte [decimal]
  4151 00003292 47                  <2> 		inc edi
  4152 00003293 EBEA                <2> 		jmp fnddec
  4153                              <2> 	nodecimal:
  4154 00003295 C3                  <2> 		ret
  4155                              <2> 	plusnum:
  4156 00003296 E815010000          <2> 		call decaddfix
  4157 0000329B 01D9                <2> 		add ecx, ebx
  4158 0000329D E98A000000          <2> 		jmp retnum
  4159                              <2> 	subnum:
  4160 000032A2 E809010000          <2> 		call decaddfix
  4161 000032A7 29D9                <2> 		sub ecx, ebx
  4162 000032A9 E97E000000          <2> 		jmp retnum
  4163                              <2> 	mulnum:
  4164 000032AE A0[F3330000]        <2> 		mov al, [decimal2]
  4165 000032B3 0005[F2330000]      <2> 		add [decimal], al
  4166 000032B9 89C8                <2> 		mov eax, ecx
  4167 000032BB F7E3                <2> 		mul ebx
  4168 000032BD 89C1                <2> 		mov ecx, eax
  4169 000032BF E968000000          <2> 		jmp retnum
  4170                              <2> 	divnum:
  4171 000032C4 E8E7000000          <2> 		call decaddfix
  4172 000032C9 30C0                <2> 		xor al, al
  4173 000032CB A2[F2330000]        <2> 		mov [decimal], al
  4174 000032D0 31D2                <2> 		xor edx, edx
  4175 000032D2 89C8                <2> 		mov eax, ecx
  4176 000032D4 81FB00000000        <2> 		cmp ebx, 0
  4177 000032DA 0F844C000000        <2> 		je near retnum
  4178 000032E0 F7F3                <2> 		div ebx
  4179 000032E2 89C1                <2> 		mov ecx, eax
  4180 000032E4 E943000000          <2> 		jmp retnum
  4181                              <2> 	expnum:
  4182 000032E9 8A15[F2330000]      <2> 		mov dl, [decimal]
  4183 000032EF 8815[F3330000]      <2> 		mov [decimal2], dl
  4184 000032F5 31D2                <2> 		xor edx, edx
  4185 000032F7 89C8                <2> 		mov eax, ecx
  4186 000032F9 89D9                <2> 		mov ecx, ebx
  4187 000032FB 89C3                <2> 		mov ebx, eax
  4188 000032FD 81F900000000        <2> 		cmp ecx, 0
  4189 00003303 7422                <2> 		je noexpnum
  4190 00003305 49                  <2> 		dec ecx
  4191 00003306 81F900000000        <2> 		cmp ecx, 0
  4192 0000330C 7412                <2> 		je noexpnumlp
  4193 0000330E F7E3                <2> 	expnumlp: mul ebx
  4194 00003310 8A15[F3330000]      <2> 		mov dl, [decimal2]
  4195 00003316 0015[F2330000]      <2> 		add [decimal], dl
  4196 0000331C 31D2                <2> 		xor edx, edx
  4197 0000331E E2EE                <2> 		loop expnumlp
  4198                              <2> 	noexpnumlp:
  4199 00003320 89C1                <2> 		mov ecx, eax
  4200 00003322 E905000000          <2> 		jmp retnum
  4201                              <2> 	noexpnum:
  4202 00003327 B901000000          <2> 		mov ecx, 1
  4203                              <2> 	retnum: 
  4204 0000332C BE[12CF0000]        <2> 		mov esi, numbuf
  4205 00003331 890D[F5330000]      <2> 		mov [result], ecx
  4206 00003337 E80FFAFFFF          <2> 		call convert
  4207 0000333C BE[12CF0000]        <2> 		mov esi, numbuf
  4208 00003341 8A25[F2330000]      <2> 		mov ah, [decimal]
  4209 00003347 8825[F4330000]      <2> 		mov [decimalresult], ah
  4210 0000334D 80FC00              <2> 		cmp ah, 0
  4211 00003350 0F8425000000        <2> 		je near noputdecimal
  4212                              <2> 	putdecimal:
  4213 00003356 4E                  <2> 		dec esi
  4214 00003357 FECC                <2> 		dec ah
  4215 00003359 80FC00              <2> 		cmp ah, 0
  4216 0000335C 0F87F4FFFFFF        <2> 		ja near putdecimal
  4217 00003362 4E                  <2> 		dec esi
  4218 00003363 8A06                <2> 		mov al, [esi]
  4219 00003365 C6062E              <2> 		mov byte [esi], '.'
  4220                              <2> 	decputloop:
  4221 00003368 4E                  <2> 		dec esi
  4222 00003369 8A26                <2> 		mov ah, [esi]
  4223 0000336B 8806                <2> 		mov [esi], al
  4224 0000336D 88E0                <2> 		mov al, ah
  4225 0000336F 81FE[FECE0000]      <2> 		cmp esi, buf2
  4226 00003375 0F87EDFFFFFF        <2> 		ja near decputloop
  4227                              <2> 	noputdecimal:
  4228 0000337B BE[FECE0000]        <2> 		mov esi, buf2
  4229 00003380 E809000000          <2> 		call chkadd
  4230 00003385 E93AF6FFFF          <2> 		jmp nwcmd
  4231 0000338A 00000000            <2> edxnumbuf dw 0,0
  4232 0000338E 8A06                <2> 	chkadd: mov al, [esi]
  4233 00003390 3C30                <2> 		cmp al, '0'
  4234 00003392 750C                <2> 		jne dnadd
  4235 00003394 46                  <2> 		inc esi
  4236 00003395 81FE[12CF0000]      <2> 		cmp esi, numbuf
  4237 0000339B 7402                <2> 		je dnaddm1
  4238 0000339D EBEF                <2> 		jmp chkadd
  4239 0000339F 4E                  <2> 	dnaddm1: dec esi
  4240 000033A0 E87AE9FFFF          <2> 	dnadd:	call print
  4241 000033A5 BE[5E8C0000]        <2> 		mov esi, line
  4242 000033AA E870E9FFFF          <2> 		call print
  4243 000033AF C3                  <2> 		ret
  4244                              <2> 		
  4245                              <2> 	decaddfix:
  4246 000033B0 A0[F3330000]        <2> 		mov al, [decimal2]
  4247 000033B5 8A25[F2330000]      <2> 		mov ah, [decimal]
  4248 000033BB 38E0                <2> 		cmp al, ah
  4249 000033BD 7432                <2> 		je gooddecadd
  4250 000033BF 38E0                <2> 		cmp al, ah
  4251 000033C1 721A                <2> 		jb lowdecadd
  4252                              <2> 	highdecadd:
  4253 000033C3 FEC4                <2> 		inc ah
  4254 000033C5 89CA                <2> 		mov edx, ecx
  4255 000033C7 C1E103              <2> 		shl ecx, 3
  4256 000033CA 01D1                <2> 		add ecx, edx
  4257 000033CC 01D1                <2> 		add ecx, edx
  4258 000033CE 38E0                <2> 		cmp al, ah
  4259 000033D0 77F1                <2> 		ja highdecadd
  4260 000033D2 8825[F2330000]      <2> 		mov [decimal], ah
  4261 000033D8 E914000000          <2> 		jmp gooddecadd
  4262                              <2> 	lowdecadd:
  4263 000033DD FEC0                <2> 		inc al
  4264 000033DF 89DA                <2> 		mov edx, ebx
  4265 000033E1 C1E303              <2> 		shl ebx, 3
  4266 000033E4 01D3                <2> 		add ebx, edx
  4267 000033E6 01D3                <2> 		add ebx, edx
  4268 000033E8 38E0                <2> 		cmp al, ah
  4269 000033EA 72F1                <2> 		jb lowdecadd
  4270 000033EC A2[F2330000]        <2> 		mov [decimal], al
  4271                              <2> 	gooddecadd:
  4272 000033F1 C3                  <2> 		ret
  4273                              <2> 		
  4274 000033F2 00                  <2> decimal db 0
  4275 000033F3 00                  <2> decimal2 db 0
  4276 000033F4 00                  <2> decimalresult db 0
  4277 000033F5 00000000            <2> result dd 0
  4278                              <1> %include 'source/programs/_variables.asm' ;% and $
  4279 000033F9 FF2C2500            <2> db 255,44,"%",0
  4280                              <2> 	ans:
  4281 000033FD BE[FECE0000]        <2> 		mov esi, buf2
  4282 00003402 E887FFFFFF          <2> 		call chkadd
  4283 00003407 C3                  <2> 		ret
  4284                              <2> 		
  4285 00003408 FF2C2400            <2> db 255,44,"$",0
  4286 0000340C 8B35[772C0000]      <2> var: mov esi, [currentcommandloc]
  4287 00003412 BB[FEB60000]        <2> 	mov ebx, variables
  4288 00003417 8A06                <2> lkeq:	mov al, [esi]
  4289 00003419 3C3D                <2> 	cmp al, '='
  4290 0000341B 741B                <2> 	je eqfnd	;is there an '=' sign?
  4291 0000341D 3C00                <2> 	cmp al, 0
  4292 0000341F 7403                <2> 	je echovars
  4293 00003421 46                  <2> 	inc esi
  4294 00003422 EBF3                <2> 	jmp lkeq
  4295 00003424 BE[FEB60000]        <2> echovars: mov esi, variables
  4296 00003429 BB[FEC60000]        <2> 	mov ebx, varend
  4297 0000342E B105                <2> 	mov cl, 5
  4298 00003430 B504                <2> 	mov ch, 4
  4299 00003432 E89EF8FFFF          <2> 	call array
  4300 00003437 C3                  <2> 	ret
  4301 00003438 46                  <2> eqfnd:	inc esi
  4302 00003439 8A06                <2> 	mov al, [esi]
  4303 0000343B 3C00                <2> 	cmp al, 0
  4304 0000343D 7410                <2> 	je readvar
  4305 0000343F 8B35[772C0000]      <2> 	mov esi, [currentcommandloc]
  4306 00003445 BB[FEB60000]        <2> 	mov ebx, variables
  4307 0000344A E919000000          <2> 	jmp seek
  4308                              <2> readvar:
  4309 0000344F B00A                <2> 	mov al, 10
  4310 00003451 66BB0700            <2> 	mov bx, 7
  4311 00003455 C605[D6210000]00    <2> 	mov byte [commandedit], 0
  4312 0000345C BF[FECE0000]        <2> 	mov edi, buftxtend
  4313 00003461 E89EE9FFFF          <2> 	call rdprint
  4314 00003466 EBA4                <2> 	jmp var
  4315 00003468 668B03              <2> seek:	mov ax, [ebx]
  4316 0000346B B105                <2> 	mov cl, 5
  4317 0000346D B504                <2> 	mov ch, 4
  4318 0000346F 663D0000            <2> 	cmp ax, 0
  4319 00003473 0F845B000000        <2> 	je near save
  4320 00003479 6639C8              <2> 	cmp ax, cx
  4321 0000347C 7403                <2> 	je skfnd
  4322 0000347E 43                  <2> 	inc ebx
  4323 0000347F EBE7                <2> 	jmp seek
  4324 00003481 8B35[772C0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4325 00003487 46                  <2> 	inc esi
  4326 00003488 81C302000000        <2> 	add ebx, 2
  4327 0000348E 89DF                <2> 	mov edi, ebx
  4328 00003490 B13D                <2> 	mov cl, '='
  4329 00003492 E81FF8FFFF          <2> 	call cndtest
  4330 00003497 3C01                <2> 	cmp al, 1	
  4331 00003499 7418                <2> 	je varfnd
  4332 0000349B 89FB                <2> 	mov ebx, edi
  4333 0000349D 8B35[772C0000]      <2> 	mov esi, [currentcommandloc]
  4334 000034A3 668B03              <2> 	mov ax, [ebx]
  4335 000034A6 663D0000            <2> 	cmp ax, 0
  4336 000034AA 0F8424000000        <2> 	je near save
  4337 000034B0 43                  <2> 	inc ebx
  4338 000034B1 EBB5                <2> 	jmp seek
  4339 000034B3 8A03                <2> varfnd:	mov al, [ebx]
  4340 000034B5 3C04                <2> 	cmp al, 4
  4341 000034B7 7404                <2> 	je save2
  4342 000034B9 4B                  <2> 	dec ebx
  4343 000034BA 4E                  <2> 	dec esi
  4344 000034BB EBF6                <2> 	jmp varfnd
  4345 000034BD 4B                  <2> save2:	dec ebx
  4346 000034BE 4E                  <2> 	dec esi
  4347 000034BF 8A03                <2> 	mov al, [ebx]
  4348 000034C1 3C05                <2> 	cmp al, 5
  4349 000034C3 7402                <2> 	je remove
  4350 000034C5 EBEC                <2> 	jmp varfnd
  4351 000034C7 8A03                <2> remove: mov al, [ebx]
  4352 000034C9 3C00                <2> 	cmp al, 0
  4353 000034CB 749B                <2> 	je seek
  4354 000034CD 30C0                <2> 	xor al, al
  4355 000034CF 8803                <2> 	mov [ebx], al
  4356 000034D1 43                  <2> 	inc ebx
  4357 000034D2 EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4358 000034D4 8B35[772C0000]      <2> save:	mov esi, [currentcommandloc]
  4359 000034DA 43                  <2> 	inc ebx
  4360 000034DB B005                <2> 	mov al, 5
  4361 000034DD B404                <2> 	mov ah, 4
  4362 000034DF 668903              <2> 	mov [ebx], ax
  4363 000034E2 43                  <2> 	inc ebx
  4364 000034E3 43                  <2> svhere:	inc ebx
  4365 000034E4 46                  <2> 	inc esi
  4366 000034E5 8A06                <2> 	mov al, [esi]
  4367 000034E7 3C00                <2> 	cmp al, 0
  4368 000034E9 0F844A000000        <2> 	je near svdone
  4369 000034EF 3C25                <2> 	cmp al, '%'
  4370 000034F1 7404                <2> 	je ans2
  4371 000034F3 8803                <2> 	mov [ebx], al	
  4372 000034F5 EBEC                <2> 	jmp svhere
  4373 000034F7 56                  <2> ans2:	push esi
  4374 000034F8 BE[FECE0000]        <2> 	mov esi, buf2
  4375 000034FD E823000000          <2> 	call ansfnd
  4376 00003502 E803000000          <2> 	call anscp
  4377 00003507 5E                  <2> 	pop esi
  4378 00003508 EBD9                <2> 	jmp svhere
  4379 0000350A 8A06                <2> anscp:	mov al, [esi]
  4380 0000350C 8803                <2> 	mov [ebx], al
  4381 0000350E 81FE[12CF0000]      <2> 	cmp esi, numbuf
  4382 00003514 74CD                <2> 	je svhere
  4383 00003516 3C00                <2> 	cmp al, 0
  4384 00003518 74C9                <2> 	je svhere
  4385 0000351A 43                  <2> 	inc ebx
  4386 0000351B 46                  <2> 	inc esi
  4387 0000351C EBEC                <2> 	jmp anscp
  4388 0000351E 5E                  <2> ansnf:	pop esi
  4389 0000351F 8A06                <2> 	mov al, [esi]
  4390 00003521 8803                <2> 	mov [ebx], al
  4391 00003523 EBBE                <2> 	jmp svhere
  4392 00003525 46                  <2> ansfnd:	inc esi
  4393 00003526 81FE[11CF0000]      <2> 	cmp esi, numbuf - 1
  4394 0000352C 740A                <2> 	je fndans
  4395 0000352E 8A06                <2> 	mov al, [esi]
  4396 00003530 3C00                <2> 	cmp al, 0
  4397 00003532 74EA                <2> 	je ansnf
  4398 00003534 3C30                <2> 	cmp al, '0'
  4399 00003536 74ED                <2> 	je ansfnd
  4400                              <2> fndans:
  4401 00003538 C3                  <2> 	ret
  4402 00003539 30C0                <2> svdone:	xor al, al
  4403 0000353B 8803                <2> 	mov [ebx], al
  4404 0000353D C3                  <2> 	ret
  4405                              <1> %include 'source/programs/_run.asm' ;./
  4406                              <2> 
  4407 0000353E 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4408 00003542 FF2C2E2F00          <2> 	db 255,44,"./",0
  4409                              <2> rundiskprog:
  4410 00003547 8B3D[772C0000]      <2> 	mov edi, [currentcommandloc]
  4411 0000354D 81C702000000        <2> 	add edi, 2
  4412 00003553 BE00004000          <2> 	mov esi, 0x400000
  4413 00003558 E87E2D0000          <2> 	call loadfile
  4414 0000355D 81FA94010000        <2> 	cmp edx, 404
  4415 00003563 746A                <2> 	je noprogfound
  4416 00003565 BB00004000          <2> 	mov ebx, 0x400000
  4417 0000356A A1[3E350000]        <2> 	mov eax, [elfstart]
  4418 0000356F 3903                <2> 	cmp [ebx], eax
  4419 00003571 0F8437000000        <2> 	je near runelf
  4420 00003577 66813B4558          <2> 	cmp word [ebx], "EX"
  4421 0000357C 7577                <2> 	jne progbatchfound
  4422 0000357E 81C302000000        <2> 	add ebx, 2
  4423 00003584 8B3D[772C0000]      <2> 	mov edi, [currentcommandloc]
  4424 0000358A 81C702000000        <2> 	add edi, 2
  4425                              <2> findspaceprog:
  4426 00003590 8A07                <2> 	mov al, [edi]
  4427 00003592 47                  <2> 	inc edi
  4428 00003593 3C20                <2> 	cmp al, " "
  4429 00003595 75F9                <2> 	jne findspaceprog
  4430                              <2> findnonspaceprog:
  4431 00003597 8A07                <2> 	mov al, [edi]
  4432 00003599 47                  <2> 	inc edi
  4433 0000359A 3C20                <2> 	cmp al, " "
  4434 0000359C 74F9                <2> 	je findnonspaceprog
  4435 0000359E 4F                  <2> 	dec edi
  4436 0000359F 8925[7EB40000]      <2> 	mov [previousstack], esp
  4437 000035A5 FFD3                <2> 	call ebx
  4438 000035A7 8B25[7EB40000]      <2> 	mov esp, [previousstack]
  4439 000035AD C3                  <2> 	ret
  4440                              <2> runelf:
  4441 000035AE 8B3D[772C0000]      <2> 	mov edi, [currentcommandloc]
  4442 000035B4 81C702000000        <2> 	add edi, 2
  4443 000035BA 81C380000000        <2> 	add ebx, 0x80
  4444 000035C0 8925[7EB40000]      <2> 	mov [previousstack], esp
  4445 000035C6 FFD3                <2> 	call ebx
  4446 000035C8 8B25[7EB40000]      <2> 	mov esp, [previousstack]
  4447 000035CE C3                  <2> 	ret
  4448                              <2> noprogfound:
  4449 000035CF BE[258C0000]        <2> 	mov esi, notfound1
  4450 000035D4 E846E7FFFF          <2> 	call print
  4451 000035D9 8B35[772C0000]      <2> 	mov esi, [currentcommandloc]
  4452 000035DF 81C602000000        <2> 	add esi, 2
  4453 000035E5 E835E7FFFF          <2> 	call print
  4454 000035EA BE[2D8C0000]        <2> 	mov esi, notfound2
  4455 000035EF E82BE7FFFF          <2> 	call print
  4456 000035F4 C3                  <2> 	ret
  4457                              <2> progbatchfound:
  4458 000035F5 BF00004000          <2> 		mov edi, 0x400000
  4459 000035FA C605[F8B60000]01    <2> 		mov byte [BATCHISON], 1
  4460                              <2> 	batchrunloop:
  4461 00003601 E89BF3FFFF          <2> 		call buftxtclear
  4462 00003606 BE[FECA0000]        <2> 		mov esi, buftxt
  4463 0000360B 8935[772C0000]      <2> 		mov [currentcommandloc], esi
  4464                              <2> 	batchrunloop2:
  4465 00003611 B10A                <2> 		mov cl, 10
  4466 00003613 B50D                <2> 		mov ch, 13
  4467 00003615 380F                <2> 		cmp [edi], cl
  4468 00003617 0F8419000000        <2> 		je near nxtbatchrunline
  4469 0000361D 382F                <2> 		cmp [edi], ch
  4470 0000361F 0F8411000000        <2> 		je near nxtbatchrunline
  4471 00003625 803F00              <2> 		cmp byte [edi], 0
  4472 00003628 0F8408000000        <2> 		je near nxtbatchrunline
  4473 0000362E 8A07                <2> 		mov al, [edi]
  4474 00003630 8806                <2> 		mov [esi], al
  4475 00003632 46                  <2> 		inc esi
  4476 00003633 47                  <2> 		inc edi
  4477 00003634 EBDB                <2> 		jmp batchrunloop2
  4478                              <2> 	nxtbatchrunline:
  4479 00003636 47                  <2> 		inc edi
  4480 00003637 380F                <2> 		cmp [edi], cl
  4481 00003639 74FB                <2> 		je nxtbatchrunline
  4482 0000363B 382F                <2> 		cmp [edi], ch
  4483 0000363D 74F7                <2> 		je nxtbatchrunline
  4484 0000363F 893D[9D360000]      <2> 		mov [batchedi], edi
  4485 00003645 893D[F4B60000]      <2> 		mov [BATCHPOS], edi
  4486 0000364B C60600              <2> 		mov byte [esi], 0
  4487 0000364E BE[FECA0000]        <2> 		mov esi, buftxt
  4488 00003653 803E00              <2> 		cmp byte [esi], 0
  4489 00003656 0F8439000000        <2> 		je near nobatchfoundrun
  4490 0000365C 31DB                <2> 		xor ebx, ebx
  4491 0000365E 8A1D[8FB60000]      <2> 		mov bl, [IFON]
  4492 00003664 80FB00              <2> 		cmp bl, 0
  4493 00003667 0F8534000000        <2> 		jne near iftestbatch
  4494                              <2> 	doneiftest:
  4495 0000366D 803D[73370000]00    <2> 		cmp byte [runnextline], 0
  4496 00003674 0F8405000000        <2> 		je near noruniftest
  4497 0000367A E822F5FFFF          <2> 		call run
  4498                              <2> 	noruniftest:
  4499 0000367F C605[73370000]01    <2> 		mov byte [runnextline], 1
  4500 00003686 8B3D[9D360000]      <2> 		mov edi, [batchedi]
  4501 0000368C 803F00              <2> 		cmp byte [edi], 0
  4502 0000368F 0F856CFFFFFF        <2> 		jne near batchrunloop
  4503                              <2> 	nobatchfoundrun:
  4504 00003695 C605[F8B60000]00    <2> 		mov byte [BATCHISON], 0
  4505 0000369C C3                  <2> 		ret
  4506                              <2> 	
  4507 0000369D 00000000            <2> batchedi dd 0	
  4508                              <2> 	
  4509                              <2> 	iftestbatch:
  4510 000036A1 BE[90B60000]        <2> 		mov esi, IFTRUE
  4511 000036A6 01DE                <2> 		add esi, ebx
  4512 000036A8 803E00              <2> 		cmp byte [esi], 0
  4513 000036AB 0F85BCFFFFFF        <2> 		jne near doneiftest
  4514 000036B1 881D[74370000]      <2> 		mov [iffalsebuf], bl
  4515 000036B7 803D[F9B60000]01    <2> 		cmp byte [LOOPON], 1
  4516 000036BE 0F8513000000        <2> 		jne near fifindbatch
  4517 000036C4 E938FFFFFF          <2> 		jmp batchrunloop
  4518                              <2> 	elsetestbatch:
  4519 000036C9 C60601              <2> 		mov byte [esi], 1
  4520 000036CC 81C705000000        <2> 		add edi, 5
  4521 000036D2 E92AFFFFFF          <2> 		jmp batchrunloop
  4522                              <2> 	fifindbatch:
  4523 000036D7 66B96966            <2> 		mov cx, "if"
  4524 000036DB 66B86669            <2> 		mov ax, "fi"
  4525 000036DF 663907              <2> 		cmp [edi], ax
  4526 000036E2 0F8424000000        <2> 		je near fifoundbatch
  4527 000036E8 66390F              <2> 		cmp [edi], cx
  4528 000036EB 0F8465000000        <2> 		je near iffoundbatch
  4529 000036F1 803F00              <2> 		cmp byte [edi], 0
  4530 000036F4 0F8412000000        <2> 		je near fifoundbatch
  4531 000036FA B8656C7365          <2> 		mov eax, "else"
  4532 000036FF 3907                <2> 		cmp [edi], eax
  4533 00003701 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4534 00003707 E973FFFFFF          <2> 		jmp noruniftest
  4535                              <2> 	fifoundbatch:
  4536 0000370C 81C702000000        <2> 		add edi, 2
  4537 00003712 B00A                <2> 		mov al, 10
  4538 00003714 3807                <2> 		cmp [edi], al
  4539 00003716 0F840B000000        <2> 		je near goodfibatch
  4540 0000371C 803F00              <2> 		cmp byte [edi], 0
  4541 0000371F 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4542 00003725 EBB0                <2> 		jmp fifindbatch
  4543                              <2> 	goodfibatch:
  4544 00003727 B001                <2> 		mov al, 1
  4545 00003729 2805[8FB60000]      <2> 		sub [IFON], al 
  4546 0000372F A0[8FB60000]        <2> 		mov al, [IFON]
  4547 00003734 8A1D[74370000]      <2> 		mov bl, [iffalsebuf]
  4548 0000373A 38D8                <2> 		cmp al, bl
  4549 0000373C 7799                <2> 		ja fifindbatch
  4550 0000373E 8B35[772C0000]      <2> 		mov esi, [currentcommandloc]
  4551 00003744 81EF02000000        <2> 		sub edi, 2
  4552 0000374A C605[73370000]00    <2> 		mov byte [runnextline], 0
  4553 00003751 E9ABFEFFFF          <2> 		jmp batchrunloop
  4554                              <2> 	iffoundbatch:
  4555 00003756 B020                <2> 		mov al, ' '
  4556 00003758 81C702000000        <2> 		add edi, 2
  4557 0000375E 3807                <2> 		cmp [edi], al
  4558 00003760 0F8571FFFFFF        <2> 		jne near fifindbatch
  4559 00003766 B001                <2> 		mov al, 1
  4560 00003768 0005[8FB60000]      <2> 		add [IFON], al
  4561 0000376E E964FFFFFF          <2> 		jmp fifindbatch
  4562                              <2> 		
  4563                              <2> 		
  4564 00003773 01                  <2> runnextline db 1
  4565 00003774 00                  <2> iffalsebuf db 0
  4566                              <2> 
  4567 00003775 C3                  <2> notbatch: ret 
  4568                              <1> %ifdef network.included
  4569                              <1> 	%include 'source/programs/arp.asm'
  4570 00003776 FF2C61727000        <2> db 255,44,"arp",0
  4571                              <2> 	;ARP TESTING
  4572                              <2> arptest:
  4573 0000377C 8B35[772C0000]      <2> 	mov esi, [currentcommandloc]
  4574 00003782 81C604000000        <2> 	add esi, 4
  4575 00003788 E89D530000          <2> 	call strtoip
  4576 0000378D 890D[34380000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4577 00003793 E8D8530000          <2> 	call showip
  4578 00003798 803D[38380000]01    <2> 	cmp byte [arpconfig], 1
  4579 0000379F 7405                <2> 	je arptest2
  4580 000037A1 E841000000          <2> 	call arpinit
  4581                              <2> arptest2:	;try to reach 192.168.0.1
  4582 000037A6 8B0D[178C0000]      <2> 	mov ecx, [sysmac]
  4583 000037AC 668B1D[1B8C0000]    <2> 	mov bx, [sysmac + 4]
  4584 000037B3 890D[14380000]      <2> 	mov [sourcemac], ecx
  4585 000037B9 66891D[18380000]    <2> 	mov [sourcemac + 4],bx
  4586 000037C0 890D[24380000]      <2> 	mov [arpsenderinfo], ecx
  4587 000037C6 66891D[28380000]    <2> 	mov [arpsenderinfo + 4], bx
  4588 000037CD BF[0E380000]        <2> 	mov edi, frame
  4589 000037D2 BE[38380000]        <2> 	mov esi, framend
  4590 000037D7 E805530000          <2> 	call sendpacket
  4591 000037DC BE[5E8C0000]        <2> 	mov esi, line
  4592 000037E1 E839E5FFFF          <2> 	call print
  4593 000037E6 C3                  <2> 	ret
  4594                              <2> 	
  4595                              <2> arpinit:
  4596 000037E7 BE[39380000]        <2> 	mov esi, arptable
  4597 000037EC BF[178C0000]        <2> 	mov edi, sysmac
  4598 000037F1 BB[138C0000]        <2> 	mov ebx, sysip
  4599 000037F6 8B0F                <2> 	mov ecx, [edi]
  4600 000037F8 890E                <2> 	mov [esi], ecx
  4601 000037FA 668B4F04            <2> 	mov cx, [edi + 4]
  4602 000037FE 894E04              <2> 	mov [esi + 4], ecx
  4603 00003801 8B0B                <2> 	mov ecx, [ebx]
  4604 00003803 894E06              <2> 	mov [esi + 6], ecx
  4605 00003806 C605[38380000]01    <2> 	mov byte [arpconfig], 1
  4606 0000380D C3                  <2> 	ret
  4607                              <2> 	
  4608                              <2> ;example frame
  4609                              <2> frame:
  4610 0000380E FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4611 00003814 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4612 0000381A 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4613                              <2> 	;;example packet
  4614 0000381C 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4615 0000381E 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4616 00003820 0604                <2> 					db 6,4			;length of mac, length of ip
  4617 00003822 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4618 00003824 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4619 0000382A C0A80073            <2> 					db 192,168,0,115		;ip
  4620 0000382E 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4621 00003834 C0A80000            <2> 					db 192,168,0,0			;ip
  4622                              <2> framend:
  4623                              <2> 
  4624 00003838 00                  <2> arpconfig db 0
  4625                              <2> arptable:	;;mac,ip
  4626 00003839 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4627 00003842 00<rept>            <2>
  4628                              <2> arptableend:	
  4629                              <1> %endif
  4630                              <1> %include 'source/programs/batch.asm'
  4631 0000389D FF2C626174636800    <2> db 255,44,"batch",0
  4632                              <2> 	batchst: 
  4633 000038A5 8B3D[772C0000]      <2> 		mov edi, [currentcommandloc]
  4634 000038AB 81C706000000        <2> 		add edi, 6
  4635 000038B1 803F00              <2> 		cmp byte [edi], 0
  4636 000038B4 0F846D000000        <2> 		je near nonamefound
  4637 000038BA BE00004000          <2> 		mov esi, 0x400000
  4638 000038BF E8172A0000          <2> 		call loadfile
  4639 000038C4 89D0                <2> 		mov eax, edx
  4640 000038C6 3D94010000          <2> 		cmp eax, 404
  4641 000038CB 7465                <2> 		je goodbatchname
  4642 000038CD BE[D8380000]        <2> 		mov esi, badbatchname
  4643 000038D2 E848E4FFFF          <2> 		call print
  4644 000038D7 C3                  <2> 		ret
  4645 000038D8 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4646 000038E1 20616C726561647920- <2>
  4647 000038EA 657869737473210A00  <2>
  4648 000038F3 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4649 000038FC 746F20747970652061- <2>
  4650 00003905 206E616D6520616674- <2>
  4651 0000390E 65722074686520636F- <2>
  4652 00003917 6D6D616E642E0A00    <2>
  4653 0000391F 00000000            <2> 		esicache3 dd 0
  4654 00003923 00000000            <2> 		esicache2 dd 0
  4655                              <2> 	nonamefound:
  4656 00003927 BE[F3380000]        <2> 		mov esi, namenotfoundbatch
  4657 0000392C E8EEE3FFFF          <2> 		call print
  4658 00003931 C3                  <2> 		ret
  4659                              <2> 	goodbatchname:
  4660 00003932 BE00004000          <2> 		mov esi, 0x400000
  4661                              <2> 	batchcreate:
  4662 00003937 8935[1F390000]      <2> 		mov [esicache3], esi
  4663 0000393D BF00008000          <2> 		mov edi, 0x800000
  4664 00003942 B00A                <2> 		mov al, 10
  4665 00003944 B307                <2> 		mov bl, 7
  4666 00003946 B404                <2> 		mov ah, 4
  4667 00003948 CD30                <2> 		int 30h
  4668 0000394A 8935[23390000]      <2> 		mov [esicache2], esi
  4669 00003950 8A0E                <2> 		mov cl, [esi]
  4670 00003952 8B35[1F390000]      <2> 		mov esi, [esicache3]
  4671 00003958 BB[8C390000]        <2> 		mov ebx, exitword
  4672 0000395D E854F3FFFF          <2> 		call cndtest
  4673 00003962 3C01                <2> 		cmp al, 1
  4674 00003964 7411                <2> 		je endbatchcreate
  4675 00003966 3C02                <2> 		cmp al, 2
  4676 00003968 740D                <2> 		je endbatchcreate
  4677 0000396A 8B35[23390000]      <2> 		mov esi, [esicache2]
  4678 00003970 B00A                <2> 		mov al, 10
  4679 00003972 8806                <2> 		mov [esi], al
  4680 00003974 46                  <2> 		inc esi
  4681 00003975 EBC0                <2> 		jmp batchcreate
  4682                              <2> 	endbatchcreate:
  4683 00003977 8B35[1F390000]      <2> 		mov esi, [esicache3]
  4684 0000397D 31C0                <2> 		xor eax, eax
  4685 0000397F 8806                <2> 		mov [esi], al
  4686 00003981 BE00004000          <2> 		mov esi, 0x400000
  4687 00003986 E894E3FFFF          <2> 		call print
  4688 0000398B C3                  <2> 		ret
  4689                              <2> 	
  4690 0000398C 5C7800              <2> 	exitword db "\x",0
  4691 0000398F 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4692 00003998 6F20657869742E0A00  <2>
  4693                              <1> %ifdef gui.background
  4694                              <1> 	%include 'source/programs/background.asm'
  4695                              <1> %endif
  4696                              <1> %include 'source/programs/beep.asm'
  4697 000039A1 FF2C6265657000      <2> 	db 255,44,"beep",0
  4698                              <2> beep:
  4699 000039A8 B8[CD390000]        <2> 	mov eax, beepstart
  4700 000039AD A3[68020000]        <2> 	mov [soundpos], eax
  4701 000039B2 B8[D1390000]        <2> 	mov eax, beepend
  4702 000039B7 A3[6C020000]        <2> 	mov [soundendpos], eax
  4703 000039BC C605[65020000]01    <2> 	mov byte [soundon], 1
  4704                              <2> waitforsoundendbeep:
  4705 000039C3 A0[65020000]        <2> 	mov al, [soundon]
  4706 000039C8 3C00                <2> 	cmp al, 0
  4707 000039CA 75F7                <2> 	jne waitforsoundendbeep
  4708 000039CC C3                  <2> 	ret
  4709                              <2> 	
  4710                              <2> beepstart:
  4711 000039CD 3200D111            <2> 	dw 50, 4561
  4712                              <2> beepend:
  4713                              <1> %include 'source/programs/cd.asm'
  4714 000039D1 FF2C636400          <2> db 255,44,"cd",0
  4715                              <2> cd:
  4716 000039D6 8B35[772C0000]      <2> 	mov esi, [currentcommandloc]
  4717 000039DC 81C603000000        <2> 	add esi, 3
  4718 000039E2 8B3D[86B40000]      <2> 	mov edi, [currentfolderloc]
  4719 000039E8 893D[82B40000]      <2> 	mov [lastfolderloc], edi
  4720 000039EE 81C7[8AB40000]      <2> 	add edi, currentfolder
  4721 000039F4 4F                  <2> 	dec edi
  4722 000039F5 66813E2E2E          <2> 	cmp word [esi], ".."
  4723 000039FA 742A                <2> 	je .moveup
  4724 000039FC 47                  <2> 	inc edi
  4725                              <2> .movedown:
  4726 000039FD 8A06                <2> 	mov al, [esi]
  4727 000039FF 8807                <2> 	mov [edi], al
  4728 00003A01 47                  <2> 	inc edi
  4729 00003A02 46                  <2> 	inc esi
  4730 00003A03 3C00                <2> 	cmp al, 0
  4731 00003A05 740A                <2> 	je .donecd
  4732 00003A07 81FF[8AB60000]      <2> 	cmp edi, currentfolderend
  4733 00003A0D 72EE                <2> 	jb .movedown
  4734 00003A0F 30C0                <2> 	xor al, al
  4735                              <2> .donecd:
  4736 00003A11 4F                  <2> 	dec edi
  4737 00003A12 C6072F              <2> 	mov byte [edi], '/'
  4738 00003A15 47                  <2> 	inc edi
  4739 00003A16 C60700              <2> 	mov byte [edi], 0
  4740 00003A19 81EF[8AB40000]      <2> 	sub edi, currentfolder
  4741 00003A1F 893D[86B40000]      <2> 	mov [currentfolderloc], edi
  4742 00003A25 C3                  <2> 	ret
  4743                              <2> .moveup:
  4744 00003A26 31C0                <2> 	xor eax, eax
  4745 00003A28 A3[82B40000]        <2> 	mov [lastfolderloc], eax
  4746                              <2> .moveuploop:
  4747 00003A2D 4F                  <2> 	dec edi
  4748 00003A2E 8A07                <2> 	mov al, [edi]
  4749 00003A30 81FF[8AB40000]      <2> 	cmp edi, currentfolder
  4750 00003A36 763B                <2> 	jbe .moveupover
  4751 00003A38 3C2F                <2> 	cmp al, '/'
  4752 00003A3A 75F1                <2> 	jne .moveuploop
  4753 00003A3C C6072F              <2> 	mov byte [edi], '/'
  4754 00003A3F 47                  <2> 	inc edi
  4755 00003A40 C60700              <2> 	mov byte [edi], 0
  4756 00003A43 81EF[8AB40000]      <2> 	sub edi, currentfolder
  4757 00003A49 893D[86B40000]      <2> 	mov [currentfolderloc], edi
  4758 00003A4F 81C7[8AB40000]      <2> 	add edi, currentfolder
  4759 00003A55 4F                  <2> 	dec edi
  4760                              <2> .lastfolder:
  4761 00003A56 4F                  <2> 	dec edi
  4762 00003A57 8A07                <2> 	mov al, [edi]
  4763 00003A59 81FF[8AB40000]      <2> 	cmp edi, currentfolder
  4764 00003A5F 7604                <2> 	jbe .donemoveup
  4765 00003A61 3C2F                <2> 	cmp al, '/'
  4766 00003A63 75F1                <2> 	jne .lastfolder
  4767                              <2> .donemoveup:
  4768 00003A65 47                  <2> 	inc edi
  4769 00003A66 81EF[8AB40000]      <2> 	sub edi, currentfolder
  4770 00003A6C 893D[82B40000]      <2> 	mov [lastfolderloc], edi
  4771 00003A72 C3                  <2> 	ret
  4772                              <2> .moveupover:
  4773 00003A73 BF[8AB40000]        <2> 	mov edi, currentfolder
  4774 00003A78 C6072F              <2> 	mov byte [edi], '/'
  4775 00003A7B 47                  <2> 	inc edi
  4776 00003A7C C60700              <2> 	mov byte [edi], 0
  4777 00003A7F 31C0                <2> 	xor eax, eax
  4778 00003A81 A3[82B40000]        <2> 	mov [lastfolderloc], eax
  4779 00003A86 40                  <2> 	inc eax
  4780 00003A87 A3[86B40000]        <2> 	mov [currentfolderloc], eax
  4781 00003A8C C3                  <2> 	ret
  4782                              <1> %include 'source/programs/charmap.asm'
  4783 00003A8D FF2C636861726D6170- <2> db 255,44,"charmap",0
  4784 00003A96 00                  <2>
  4785 00003A97 66BB0700            <2> 	mov bx, 7
  4786 00003A9B B020                <2> 	mov al, " "
  4787 00003A9D E8C1E7FFFF          <2> 	call prcharq
  4788 00003AA2 E8BCE7FFFF          <2> 	call prcharq
  4789 00003AA7 E8B7E7FFFF          <2> 	call prcharq
  4790 00003AAC E8B2E7FFFF          <2> 	call prcharq
  4791 00003AB1 B030                <2> 	mov al, "0"
  4792                              <2> charmapnumprnt:
  4793 00003AB3 E8ABE7FFFF          <2> 	call prcharq
  4794 00003AB8 FEC0                <2> 	inc al
  4795 00003ABA 6650                <2> 	push ax
  4796 00003ABC B020                <2> 	mov al, " "
  4797 00003ABE E8A0E7FFFF          <2> 	call prcharq
  4798 00003AC3 6658                <2> 	pop ax
  4799 00003AC5 3C39                <2> 	cmp al, "9"
  4800 00003AC7 76EA                <2> 	jbe charmapnumprnt
  4801 00003AC9 B041                <2> 	mov al, "A"
  4802                              <2> charmapnumprnt2:
  4803 00003ACB E893E7FFFF          <2> 	call prcharq
  4804 00003AD0 FEC0                <2> 	inc al
  4805 00003AD2 6650                <2> 	push ax
  4806 00003AD4 B020                <2> 	mov al, " "
  4807 00003AD6 E888E7FFFF          <2> 	call prcharq
  4808 00003ADB 6658                <2> 	pop ax
  4809 00003ADD 3C47                <2> 	cmp al, "G"
  4810 00003ADF 72EA                <2> 	jb charmapnumprnt2
  4811                              <2> 	
  4812 00003AE1 BE[5E8C0000]        <2> 	mov esi, line
  4813 00003AE6 E822E2FFFF          <2> 	call printquiet
  4814 00003AEB 6631C0              <2> 	xor ax, ax
  4815 00003AEE 88C1                <2> 	mov cl, al
  4816 00003AF0 E895F3FFFF          <2> 	call showhexsmall
  4817 00003AF5 E955000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  4818                              <2> charmapcopy:
  4819 00003AFA FEC0                <2> 	inc al
  4820 00003AFC 6650                <2> 	push ax
  4821 00003AFE 3C08                <2> 	cmp al, 8
  4822 00003B00 744D                <2> 	je charmapnocopy
  4823 00003B02 3C09                <2> 	cmp al, 9
  4824 00003B04 7449                <2> 	je charmapnocopy
  4825 00003B06 3C0A                <2> 	cmp al, 10
  4826 00003B08 7445                <2> 	je charmapnocopy
  4827 00003B0A 3C0D                <2> 	cmp al, 13
  4828 00003B0C 7441                <2> 	je charmapnocopy
  4829 00003B0E 3CFF                <2> 	cmp al, 255
  4830 00003B10 743D                <2> 	je charmapnocopy
  4831 00003B12 3C00                <2> 	cmp al, 0
  4832 00003B14 7434                <2> 	je nomorecharmap
  4833 00003B16 E848E7FFFF          <2> 	call prcharq
  4834 00003B1B B020                <2> 	mov al, " "
  4835 00003B1D E841E7FFFF          <2> 	call prcharq
  4836 00003B22 6658                <2> 	pop ax
  4837                              <2> charmapcopycheck:
  4838 00003B24 FEC4                <2> 	inc ah
  4839 00003B26 80FC10              <2> 	cmp ah, 16
  4840 00003B29 72CF                <2> 	jb charmapcopy
  4841 00003B2B 6650                <2> 	push ax
  4842 00003B2D BE[5E8C0000]        <2> 	mov esi, line
  4843 00003B32 E8D6E1FFFF          <2> 	call printquiet
  4844 00003B37 6658                <2> 	pop ax
  4845 00003B39 3CFF                <2> 	cmp al, 255
  4846 00003B3B 740D                <2> 	je nomorecharmap
  4847 00003B3D 88C1                <2> 	mov cl, al
  4848 00003B3F FEC1                <2> 	inc cl
  4849 00003B41 E844F3FFFF          <2> 	call showhexsmall
  4850 00003B46 30E4                <2> 	xor ah, ah
  4851 00003B48 EBB0                <2> 	jmp charmapcopy
  4852                              <2> nomorecharmap:
  4853 00003B4A E975EEFFFF          <2> 	jmp nwcmd
  4854                              <2> charmapnocopy:
  4855 00003B4F 6650                <2> 	push ax
  4856 00003B51 B020                <2> 	mov al, " "
  4857 00003B53 E80BE7FFFF          <2> 	call prcharq
  4858 00003B58 E806E7FFFF          <2> 	call prcharq
  4859 00003B5D 6658                <2> 	pop ax
  4860 00003B5F EBC3                <2> 	jmp charmapcopycheck
  4861                              <1> %include 'source/programs/clear.asm'
  4862 00003B61 FF2C636C65617200    <2> db 255,44,"clear",0
  4863 00003B69 E817E2FFFF          <2> 		call clear
  4864 00003B6E C3                  <2> 		ret 
  4865                              <1> %include 'source/programs/cpuid.asm'
  4866 00003B6F FF2C637075696400    <2> db 255,44,"cpuid",0
  4867 00003B77 31C0                <2> 	xor eax, eax
  4868 00003B79 0FA2                <2> 	cpuid
  4869 00003B7B 891D[CC3B0000]      <2> 	mov [cpuidbuf], ebx
  4870 00003B81 8915[D03B0000]      <2> 	mov [cpuidbuf + 4], edx
  4871 00003B87 890D[D43B0000]      <2> 	mov [cpuidbuf + 8], ecx
  4872 00003B8D BE[CC3B0000]        <2> 	mov esi, cpuidbuf
  4873 00003B92 E888E1FFFF          <2> 	call print
  4874 00003B97 BE[5E8C0000]        <2> 	mov esi, line
  4875 00003B9C E87EE1FFFF          <2> 	call print
  4876 00003BA1 B801000000          <2> 	mov eax, 1
  4877 00003BA6 0FA2                <2> 	cpuid
  4878 00003BA8 89C1                <2> 	mov ecx, eax
  4879 00003BAA C605[892E0000]02    <2> 	mov byte [firsthexshown], 2
  4880 00003BB1 E8E8F2FFFF          <2> 	call showhex
  4881 00003BB6 B808000080          <2> 	mov eax, 0x80000008
  4882 00003BBB 0FA2                <2> 	cpuid
  4883 00003BBD 89C1                <2> 	mov ecx, eax
  4884 00003BBF C605[892E0000]02    <2> 	mov byte [firsthexshown], 2
  4885 00003BC6 E8D3F2FFFF          <2> 	call showhex
  4886 00003BCB C3                  <2> 	ret
  4887                              <2> 	
  4888 00003BCC 00<rept>            <2> cpuidbuf times 13 db 0
  4889                              <2> cpuidvendorend:
  4890                              <1> %ifdef network.included
  4891                              <1> 	%include 'source/programs/dhcp.asm'
  4892 00003BD9 FF2C6468637000      <2> db 255,44,"dhcp",0
  4893                              <2> dhcp:
  4894 00003BE0 BE[A03C0000]        <2> 	mov esi, .dhcp.mac
  4895 00003BE5 BB[803D0000]        <2> 	mov ebx, .dhcp.option.mac
  4896 00003BEA BF[603C0000]        <2> 	mov edi, .mac
  4897 00003BEF 31C9                <2> 	xor ecx, ecx
  4898 00003BF1 66890D[723C0000]    <2> 	mov [.ip.checksum], cx
  4899 00003BF8 66890D[823C0000]    <2> 	mov [.udp.checksum], cx
  4900 00003BFF 8B0D[178C0000]      <2> 	mov ecx, [sysmac]
  4901 00003C05 890B                <2> 	mov [ebx], ecx
  4902 00003C07 890F                <2> 	mov [edi], ecx
  4903 00003C09 890E                <2> 	mov [esi], ecx
  4904 00003C0B 668B0D[1B8C0000]    <2> 	mov cx, [sysmac + 4]
  4905 00003C12 66894B04            <2> 	mov [ebx + 4], cx
  4906 00003C16 66894E04            <2> 	mov [esi + 4], cx
  4907 00003C1A 66894F04            <2> 	mov [edi + 4], cx
  4908 00003C1E BF[683C0000]        <2> 	mov edi, .ip.header
  4909 00003C23 BE[7C3C0000]        <2> 	mov esi, .ip.headerend
  4910 00003C28 E8D54E0000          <2> 	call getchecksum
  4911 00003C2D 66890D[723C0000]    <2> 	mov [.ip.checksum], cx
  4912 00003C34 BF[7C3C0000]        <2> 	mov edi, .udp.header
  4913 00003C39 BE[973D0000]        <2> 	mov esi, .udp.end
  4914 00003C3E E8BF4E0000          <2> 	call getchecksum
  4915 00003C43 66890D[823C0000]    <2> 	mov [.udp.checksum], cx
  4916 00003C4A BF[5A3C0000]        <2> 	mov edi, .frame
  4917 00003C4F BE[973D0000]        <2> 	mov esi, .udp.end
  4918 00003C54 E8884E0000          <2> 	call sendpacket
  4919 00003C59 C3                  <2> 	ret
  4920                              <2> .frame:
  4921 00003C5A FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4922 00003C60 000000000000        <2> 	.mac db 0,0,0,0,0,0
  4923 00003C66 0800                <2> 	db 8,0
  4924                              <2> .ip.header:
  4925 00003C68 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  4926 00003C69 00                  <2> 	db 0
  4927 00003C6A 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header)
  4928 00003C6C 0000                <2> 	dw 0
  4929 00003C6E 0000                <2> 	dw 0
  4930 00003C70 80                  <2> 	db 0x80
  4931 00003C71 11                  <2> 	db 17
  4932 00003C72 0000                <2> .ip.checksum dw 0
  4933 00003C74 00000000            <2> 	db 0,0,0,0
  4934 00003C78 FFFFFFFF            <2> 	db 255,255,255,255	
  4935                              <2> .ip.headerend:
  4936                              <2> .udp.header:
  4937 00003C7C 0044                <2> 	db 0,68	;source port
  4938 00003C7E 0043                <2> 	db 0,67 ;destination port
  4939 00003C80 011B                <2> 	db (.udp.end - .udp.header)/256, (.udp.end - .udp.header)
  4940 00003C82 0000                <2> .udp.checksum dw 0
  4941                              <2> .udp.headerend:
  4942                              <2> .dhcp.data:
  4943 00003C84 01                  <2> 	db 1	;message type
  4944 00003C85 01                  <2> 	db 1	;hardware type
  4945 00003C86 06                  <2> 	db 6	;hardware address length
  4946 00003C87 00                  <2> 	db 0	;hops
  4947 00003C88 EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  4948 00003C8C 0000                <2> 	db 0,0	;seconds elapsed
  4949 00003C8E 0000                <2> 	db 0,0	;flags
  4950 00003C90 00000000            <2> 	db 0,0,0,0	;client ip address
  4951 00003C94 00000000            <2> 	db 0,0,0,0	;your ip address
  4952 00003C98 00000000            <2> 	db 0,0,0,0	;server ip address
  4953 00003C9C 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  4954 00003CA0 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  4955 00003CA6 00<rept>            <2> 	times 10 db 0	;padding
  4956 00003CB0 00<rept>            <2> 	times 64 db 0	;server host name
  4957 00003CF0 00<rept>            <2> 	times 128 db 0	;boot file name
  4958 00003D70 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  4959                              <2> .dhcp.option.type:
  4960 00003D74 350103              <2> 	db 53,1,3	;DHCP Request
  4961 00003D77 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  4962 00003D7D 3D07                <2> 	db 61,7 ;client id(mac)
  4963 00003D7F 01                  <2> 	db 1	;Type=Ethernet
  4964 00003D80 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  4965 00003D86 0C08                <2> 	db 12,8 ;host name
  4966 00003D88 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  4967 00003D90 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  4968 00003D96 FF                  <2> 	db 0xFF	;end DHCP options
  4969                              <2> .dhcp.end:
  4970                              <2> .udp.end:
  4971                              <2> 	
  4972                              <1> %endif
  4973                              <1> %include 'source/programs/dos.asm'
  4974 00003D97 FF2C646F7300        <2> db 255,44,"dos",0
  4975                              <2> dosrunner:
  4976 00003D9D 8925[7EB40000]      <2> 	mov [previousstack], esp
  4977 00003DA3 8B3D[772C0000]      <2> 	mov edi, [currentcommandloc]
  4978 00003DA9 81C704000000        <2> 	add edi, 4
  4979 00003DAF BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  4980 00003DB4 E822250000          <2> 	call loadfile
  4981 00003DB9 8B3D[772C0000]      <2> 	mov edi, [currentcommandloc]
  4982 00003DBF 81C704000000        <2> 	add edi, 4
  4983 00003DC5 81FA94010000        <2> 	cmp edx, 404
  4984 00003DCB 0F845E000000        <2> 	je near .noprogfound
  4985 00003DD1 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  4986 00003DD6 31C9                <2> 	xor ecx, ecx
  4987                              <2> .findparams:
  4988 00003DD8 47                  <2> 	inc edi
  4989 00003DD9 8A07                <2> 	mov al, [edi]
  4990 00003DDB 3C20                <2> 	cmp al, " "
  4991 00003DDD 75F9                <2> 	jne .findparams
  4992                              <2> .copyparams:
  4993 00003DDF 8A07                <2> 	mov al, [edi]
  4994 00003DE1 8803                <2> 	mov [ebx], al
  4995 00003DE3 43                  <2> 	inc ebx
  4996 00003DE4 47                  <2> 	inc edi
  4997 00003DE5 41                  <2> 	inc ecx
  4998 00003DE6 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  4999 00003DEC 7304                <2> 	jae .nomoreparams
  5000 00003DEE 3C00                <2> 	cmp al, 0
  5001 00003DF0 75ED                <2> 	jne .copyparams
  5002                              <2> .nomoreparams:
  5003 00003DF2 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5004 00003DF8 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5005 00003DFC 8ED8                <2> 	mov ds, ax
  5006 00003DFE 8EC0                <2> 	mov es, ax
  5007 00003E00 8EE0                <2> 	mov fs, ax
  5008 00003E02 8EE8                <2> 	mov gs, ax
  5009 00003E04 31C0                <2> 	xor eax, eax
  5010 00003E06 31DB                <2> 	xor ebx, ebx
  5011 00003E08 31C9                <2> 	xor ecx, ecx
  5012 00003E0A 31D2                <2> 	xor edx, edx
  5013 00003E0C 31FF                <2> 	xor edi, edi
  5014 00003E0E 31F6                <2> 	xor esi, esi
  5015 00003E10 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5016 00003E17 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5017 00003E1B 6689DA              <2> 	mov dx, bx
  5018 00003E1E 8EC3                <2> 	mov es, bx
  5019 00003E20 8EE3                <2> 	mov fs, bx
  5020 00003E22 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5021 00003E26 8EEB                <2> 	mov gs, bx
  5022 00003E28 8B25[7EB40000]      <2> 	mov esp, [previousstack]
  5023 00003E2E C3                  <2> 	ret
  5024                              <2> .noprogfound:
  5025 00003E2F BE[258C0000]        <2> 	mov esi, notfound1
  5026 00003E34 E8E6DEFFFF          <2> 	call print
  5027 00003E39 8B35[772C0000]      <2> 	mov esi, [currentcommandloc]
  5028 00003E3F 81C604000000        <2> 	add esi, 4
  5029 00003E45 E8D5DEFFFF          <2> 	call print
  5030 00003E4A BE[2D8C0000]        <2> 	mov esi, notfound2
  5031 00003E4F E8CBDEFFFF          <2> 	call print
  5032 00003E54 C3                  <2> 	ret
  5033                              <2> 	
  5034                              <1> %include 'source/programs/dump.asm'
  5035 00003E55 FF2C64756D7000      <2> db 255,44,"dump",0
  5036 00003E5C 8B35[772C0000]      <2> 	mov esi, [currentcommandloc]
  5037 00003E62 81C605000000        <2> 	add esi, 5
  5038 00003E68 31C9                <2> 	xor ecx, ecx
  5039 00003E6A 66B83078            <2> 	mov ax, "0x"
  5040 00003E6E 663906              <2> 	cmp [esi], ax
  5041 00003E71 740A                <2> 	je dumphexin
  5042 00003E73 E8D2F1FFFF          <2> 	call cnvrttxt
  5043 00003E78 E910000000          <2> 	jmp dumphexnow
  5044                              <2> dumphexin:
  5045 00003E7D 81C602000000        <2> 	add esi, 2
  5046 00003E83 E879F1FFFF          <2> 	call cnvrthextxt
  5047 00003E88 E900000000          <2> 	jmp dumphexnow
  5048                              <2> dumphexnow:
  5049 00003E8D 89CF                <2> 	mov edi, ecx
  5050 00003E8F 89FE                <2> 	mov esi, edi
  5051 00003E91 81C680030000        <2> 	add esi, 896
  5052                              <2> dumphexloop:
  5053 00003E97 8B0F                <2> 	mov ecx, [edi]
  5054 00003E99 C605[892E0000]05    <2> 	mov byte [firsthexshown],5
  5055 00003EA0 E8F9EFFFFF          <2> 	call showhex
  5056 00003EA5 81C704000000        <2> 	add edi, 4
  5057 00003EAB 39F7                <2> 	cmp edi, esi
  5058 00003EAD 72E8                <2> 	jb dumphexloop
  5059 00003EAF E8F5E6FFFF          <2> 	call termcopy
  5060 00003EB4 C3                  <2> 	ret 
  5061                              <1> %include 'source/programs/echo.asm'
  5062                              <2> 
  5063 00003EB5 FF2C6563686F00      <2> db 255,44,"echo",0
  5064                              <2> 	echoprog:
  5065 00003EBC 8B35[772C0000]      <2> 		mov esi, [currentcommandloc]
  5066 00003EC2 81C605000000        <2> 		add esi, 5
  5067 00003EC8 8A06                <2> 		mov al, [esi]
  5068 00003ECA E850DEFFFF          <2> 		call print
  5069 00003ECF BE[5E8C0000]        <2> 		mov esi, line
  5070 00003ED4 E846DEFFFF          <2> 		call print
  5071 00003ED9 C3                  <2> 		ret
  5072 00003EDA BB[FEB60000]        <2> 	echovr:	mov ebx, variables
  5073 00003EDF BF06000000          <2> 		mov edi, 6
  5074 00003EE4 E83C000000          <2> 		call nxtvrech
  5075 00003EE9 E954000000          <2> 		jmp prntvr2
  5076 00003EEE B13D                <2> 	echvar:	mov cl, '='
  5077 00003EF0 43                  <2> 		inc ebx
  5078 00003EF1 8A03                <2> 		mov al, [ebx]
  5079 00003EF3 3C00                <2> 		cmp al, 0
  5080 00003EF5 742E                <2> 		je nxtvrech
  5081 00003EF7 3C3D                <2> 		cmp al, '='
  5082 00003EF9 7422                <2> 		je nxtvrechb1
  5083 00003EFB 8B35[772C0000]      <2> 		mov esi, [currentcommandloc]
  5084 00003F01 01FE                <2> 		add esi, edi
  5085 00003F03 E8AEEDFFFF          <2> 		call cndtest
  5086 00003F08 3C02                <2> 		cmp al, 2
  5087 00003F0A 7432                <2> 		je prntvr
  5088 00003F0C 3C01                <2> 		cmp al, 1
  5089 00003F0E 742E                <2> 		je prntvr
  5090 00003F10 8B35[772C0000]      <2> 		mov esi, [currentcommandloc]
  5091 00003F16 01FE                <2> 		add esi, edi
  5092 00003F18 E908000000          <2> 		jmp nxtvrech
  5093                              <2> 	nxtvrechb1:
  5094 00003F1D 81EB02000000        <2> 		sub ebx, 2
  5095 00003F23 EBC9                <2> 		jmp echvar
  5096 00003F25 8A03                <2> 	nxtvrech: mov al, [ebx]
  5097 00003F27 3C05                <2> 		cmp al, 5
  5098 00003F29 740A                <2> 		je nxtvrec2
  5099 00003F2B 43                  <2> 		inc ebx
  5100 00003F2C 81FB[FEC60000]      <2> 		cmp ebx, varend
  5101 00003F32 72F1                <2> 		jb nxtvrech
  5102 00003F34 C3                  <2> 		ret
  5103 00003F35 43                  <2> 	nxtvrec2: inc ebx
  5104 00003F36 8A03                <2> 		mov al, [ebx]
  5105 00003F38 3C04                <2> 		cmp al, 4
  5106 00003F3A 74B2                <2> 		je echvar
  5107 00003F3C EBE7                <2> 		jmp nxtvrech
  5108 00003F3E 43                  <2> 	prntvr: inc ebx
  5109 00003F3F 89DE                <2> 		mov esi, ebx
  5110 00003F41 C3                  <2> 		ret
  5111 00003F42 E8D8DDFFFF          <2> 	prntvr2: call print
  5112 00003F47 BE[5E8C0000]        <2> 		mov esi, line
  5113 00003F4C E8CEDDFFFF          <2> 		call print
  5114 00003F51 C3                  <2> 		ret 
  5115                              <1> %include 'source/programs/else.asm'
  5116 00003F52 FF2C656C736500      <2> 	db 255,44,"else",0
  5117 00003F59 31C0                <2> elsecmd:	xor eax, eax
  5118 00003F5B 3805[F8B60000]      <2> 	cmp [BATCHISON], al
  5119 00003F61 0F840EF8FFFF        <2> 	je near notbatch
  5120 00003F67 A0[8FB60000]        <2> 	mov al, [IFON]
  5121 00003F6C BE[90B60000]        <2> 	mov esi, IFTRUE
  5122 00003F71 01C6                <2> 	add esi, eax
  5123 00003F73 8A06                <2> 	mov al, [esi]
  5124 00003F75 3401                <2> 	xor al, 1
  5125 00003F77 8806                <2> 	mov [esi], al
  5126 00003F79 C3                  <2> 	ret 
  5127                              <1> %include 'source/programs/exit.asm'
  5128 00003F7A FF2C6578697400      <2> db 255,44,"exit",0
  5129 00003F81 803D[8EB60000]01    <2> 	cmp byte [ranboot], 1
  5130 00003F88 0F84CAE9FFFF        <2> 	je near returnfromexp
  5131 00003F8E E9B2E8FFFF          <2> 	jmp nobootfile
  5132                              <1> %include 'source/programs/fi.asm'
  5133 00003F93 FF2C666900          <2> 	db 255,44,"fi",0
  5134 00003F98 30C0                <2> 	xor al, al
  5135 00003F9A 3805[F8B60000]      <2> 	cmp [BATCHISON], al
  5136 00003FA0 0F84CFF7FFFF        <2> 	je near notbatch
  5137 00003FA6 B001                <2> fi:	mov al, 1
  5138 00003FA8 2805[8FB60000]      <2> 	sub [IFON],al
  5139 00003FAE C3                  <2> 	ret 
  5140                              <1> %ifdef gui.included
  5141                              <1> 	%include 'source/programs/gui.asm'
  5142 00003FAF FF2C67756900        <2> db 255,44,"gui",0
  5143                              <2> guiswitcher:
  5144 00003FB5 8B35[772C0000]      <2> 	mov esi, [currentcommandloc]
  5145 00003FBB 81C604000000        <2> 	add esi, 4
  5146 00003FC1 31C9                <2> 	xor ecx, ecx
  5147 00003FC3 803E00              <2> 	cmp byte [esi], 0
  5148 00003FC6 740A                <2> 	je .nomodepref
  5149 00003FC8 E834F0FFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5150 00003FCD E907000000          <2> 	jmp .modepref
  5151                              <2> .nomodepref:
  5152 00003FD2 51                  <2> 	push ecx
  5153 00003FD3 E8ADDDFFFF          <2> 	call clear
  5154 00003FD8 59                  <2> 	pop ecx
  5155                              <2> .modepref:
  5156 00003FD9 66BB[A050]          <2> 	mov bx, guiswitch
  5157 00003FDD 66891D[EE0C0000]    <2> 	mov [realmodeptr], bx
  5158 00003FE4 BB[F43F0000]        <2> 	mov ebx, guiswitchret
  5159 00003FE9 891D[EA0C0000]      <2> 	mov [realmodereturn], ebx
  5160 00003FEF E9DFCBFFFF          <2> 	jmp realmode
  5161                              <2> guiswitchret:
  5162 00003FF4 65803D[389E0000]01  <2> 	cmp byte [gs:guion], 1
  5163 00003FFC 7401                <2> 	je .cont
  5164 00003FFE C3                  <2> 	ret
  5165                              <2> .cont:
  5166 00003FFF BF[7E520000]        <2> 	mov edi, VBEMODEBLOCK
  5167                              <2> .loop:
  5168 00004004 658B07              <2> 	mov eax, [gs:edi]
  5169 00004007 8907                <2> 	mov [edi], eax
  5170 00004009 47                  <2> 	inc edi
  5171 0000400A 81FF[82550000]      <2> 	cmp edi, VBEEND
  5172 00004010 72F2                <2> 	jb .loop
  5173 00004012 A1[A6540000]        <2> 	mov eax, [physbaseptr]
  5174 00004017 2D00001000          <2> 	sub eax, 0x100000
  5175 0000401C A3[A6540000]        <2> 	mov [physbaseptr], eax
  5176 00004021 C605[61220000]00    <2> 	mov byte [termguion], 0
  5177 00004028 BE[13CF0000]        <2> 	mov esi, graphicstable
  5178 0000402D 30C0                <2> 	xor al, al
  5179                              <2> .clear:
  5180 0000402F 8806                <2> 	mov [esi], al
  5181 00004031 46                  <2> 	inc esi
  5182 00004032 81FE[13D10000]      <2> 	cmp esi, graphicstableend
  5183 00004038 72F5                <2> 	jb .clear
  5184 0000403A E86D2A0000          <2> 	call guisetup
  5185                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5186 0000403F 668B15[90540000]    <2> 	mov dx, [resolutionx]
  5187 00004046 668B0D[92540000]    <2> 	mov cx, [resolutiony]
  5188 0000404D 6689D3              <2> 	mov bx, dx
  5189 00004050 6689C8              <2> 	mov ax, cx
  5190 00004053 66D1EB              <2> 	shr bx, 1
  5191 00004056 66D1E8              <2> 	shr ax, 1
  5192 00004059 6689DA              <2> 	mov dx, bx
  5193 0000405C 66D1EA              <2> 	shr dx, 1
  5194 0000405F 6689C1              <2> 	mov cx, ax
  5195 00004062 66D1E9              <2> 	shr cx, 1
  5196 00004065 6601D3              <2> 	add bx, dx
  5197 00004068 6601C8              <2> 	add ax, cx
  5198 0000406B 66D1E9              <2> 	shr cx, 1
  5199 0000406E 66C1EB03            <2> 	shr bx, 3
  5200 00004072 66C1E303            <2> 	shl bx, 3
  5201 00004076 66C1E804            <2> 	shr ax, 4
  5202 0000407A 66C1E004            <2> 	shl ax, 4
  5203 0000407E 66891D[B16C0000]    <2> 	mov [termwindow], bx
  5204 00004085 66A3[B36C0000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5205 0000408B BE[B16C0000]        <2> 	mov esi, termwindow
  5206 00004090 31DB                <2> 	xor ebx, ebx
  5207 00004092 6631C0              <2> 	xor ax, ax
  5208 00004095 E820310000          <2> 	call showwindow
  5209 0000409A E8E4140000          <2> 	call cursorgui
  5210 0000409F E8E1DCFFFF          <2> 	call clear
  5211 000040A4 C3                  <2> 	ret
  5212                              <2> 	
  5213                              <1> %endif
  5214                              <1> %include 'source/programs/help.asm'
  5215 000040A5 FF2C68656C7000      <2> db 255,44,"help",0
  5216                              <2> lscmd:	
  5217 000040AC B00D                <2> 		mov al, 13
  5218 000040AE E8B0E1FFFF          <2> 		call prcharq
  5219 000040B3 BE[CD300000]        <2> 		mov esi, progstart
  5220 000040B8 BB[A0500000]        <2> 		mov ebx, progend
  5221 000040BD BE[7EB00000]        <2> dir:	mov esi, fileindex
  5222 000040C2 8A06                <2> 	dirnxt:	mov al, [esi]
  5223 000040C4 30E4                <2> 		xor ah, ah
  5224 000040C6 3CFF                <2> 		cmp al, 255
  5225 000040C8 7415                <2> 		je dirfnd
  5226 000040CA 46                  <2> 		inc esi
  5227 000040CB 81FE[7EB40000]      <2> 		cmp esi,  fileindexend
  5228 000040D1 7339                <2> 		jae dirdn
  5229 000040D3 EBED                <2> 		jmp dirnxt
  5230                              <2> 	dirfnd3:
  5231 000040D5 46                  <2> 		inc esi
  5232 000040D6 81FE[7EB40000]      <2> 		cmp esi, fileindexend
  5233 000040DC 76E4                <2> 		jbe dirnxt
  5234 000040DE 4E                  <2> 		dec esi
  5235 000040DF 46                  <2> 	dirfnd:	inc esi
  5236 000040E0 8A06                <2> 		mov al, [esi]
  5237 000040E2 30E4                <2> 		xor ah, ah
  5238 000040E4 3C2C                <2> 		cmp al, 44
  5239 000040E6 740B                <2> 		je dirfnd2
  5240 000040E8 46                  <2> 		inc esi
  5241 000040E9 81FE[7EB40000]      <2> 		cmp esi,  fileindexend
  5242 000040EF 731B                <2> 		jae dirdn
  5243 000040F1 EBCF                <2> 		jmp dirnxt
  5244 000040F3 46                  <2> 	dirfnd2: inc esi
  5245 000040F4 E814DCFFFF          <2> 		call printquiet
  5246 000040F9 56                  <2> 		push esi
  5247 000040FA B009                <2> 		mov al, 9
  5248 000040FC E862E1FFFF          <2> 		call prcharq
  5249 00004101 5E                  <2> 		pop esi
  5250 00004102 81FE[7EB40000]      <2> 		cmp esi,  fileindexend
  5251 00004108 7302                <2> 		jae dirdn
  5252 0000410A EBB6                <2> 		jmp dirnxt
  5253 0000410C BE[5E8C0000]        <2> 	dirdn:	mov esi, line
  5254 00004111 E809DCFFFF          <2> 			call print
  5255 00004116 C3                  <2> 			ret
  5256 00004117 00                  <2> currentdir db 0
  5257                              <1> %include 'source/programs/if.asm'
  5258 00004118 FF2C696600          <2> 	db 255,44,"if",0
  5259 0000411D 30C0                <2> ifcmd:	xor al, al
  5260 0000411F 3805[F8B60000]      <2> 	cmp [BATCHISON], al
  5261 00004125 0F844AF6FFFF        <2> 	je near notbatch
  5262 0000412B 8B1D[772C0000]      <2> 	mov ebx, [currentcommandloc]
  5263 00004131 81C303000000        <2> 	add ebx, 3
  5264 00004137 89DE                <2> 	mov esi, ebx
  5265 00004139 8A06                <2> chkeqsn: mov al, [esi]
  5266 0000413B 3C00                <2> 	cmp al, 0
  5267 0000413D 0F8432F6FFFF        <2> 	je near notbatch
  5268 00004143 3C3D                <2> 	cmp al, '='
  5269 00004145 0F8403000000        <2> 	je near chkeqdn
  5270 0000414B 46                  <2> 	inc esi
  5271 0000414C EBEB                <2> 	jmp chkeqsn
  5272 0000414E B000                <2> chkeqdn: mov al, 0 
  5273 00004150 8806                <2> 	mov [esi], al
  5274 00004152 46                  <2> 	inc esi
  5275 00004153 E823EBFFFF          <2> 	call tester
  5276 00004158 3C01                <2> 	cmp al, 1
  5277 0000415A 0F8405000000        <2> 	je near trueif
  5278 00004160 E91C000000          <2> 	jmp falseif
  5279 00004165 31C0                <2> trueif:	xor eax, eax
  5280 00004167 A0[8FB60000]        <2> 	mov al, [IFON]
  5281 0000416C FEC0                <2> 	inc al
  5282 0000416E A2[8FB60000]        <2> 	mov [IFON], al
  5283 00004173 30E4                <2> 	xor ah, ah
  5284 00004175 BE[90B60000]        <2> 	mov esi, IFTRUE
  5285 0000417A 01C6                <2> 	add esi, eax
  5286 0000417C B401                <2> 	mov ah, 1
  5287 0000417E 8826                <2> 	mov [esi], ah
  5288 00004180 C3                  <2> 	ret 
  5289 00004181 31C0                <2> falseif: xor eax, eax
  5290 00004183 A0[8FB60000]        <2> 	mov al, [IFON]
  5291 00004188 FEC0                <2> 	inc al
  5292 0000418A A2[8FB60000]        <2> 	mov [IFON], al
  5293 0000418F 30E4                <2> 	xor ah, ah
  5294 00004191 BE[90B60000]        <2> 	mov esi, IFTRUE
  5295 00004196 01C6                <2> 	add esi, eax
  5296 00004198 30E4                <2> 	xor ah, ah
  5297 0000419A 8826                <2> 	mov [esi], ah
  5298 0000419C C3                  <2> 	ret 
  5299                              <1> %ifdef network.included
  5300                              <1> 	%include 'source/programs/ipconfig.asm'
  5301 0000419D FF2C6970636F6E6669- <2> db 255,44,"ipconfig",0
  5302 000041A6 6700                <2>
  5303                              <2> ifconfig:
  5304 000041A8 8B35[772C0000]      <2> 	mov esi, [currentcommandloc]
  5305 000041AE 81C609000000        <2> 	add esi, 9
  5306 000041B4 803E00              <2> 	cmp byte [esi], 0
  5307 000041B7 740B                <2> 	je .noip
  5308 000041B9 E86C490000          <2> 	call strtoip
  5309 000041BE 890D[138C0000]      <2> 	mov [sysip], ecx
  5310                              <2> .noip:
  5311                              <2> %ifdef ne2000.included
  5312 000041C4 803D[1D880000]01    <2> 	cmp byte [ne2000.nicconfig], 1
  5313 000041CB 751E                <2> 	jne .none2000
  5314 000041CD BE[1E880000]        <2> 	mov esi, ne2000.name
  5315 000041D2 E848DBFFFF          <2> 	call print
  5316 000041D7 B9[40880000]        <2> 	mov ecx, ne2000.mac
  5317 000041DC E8CB490000          <2> 	call showmac
  5318 000041E1 BE[5E8C0000]        <2> 	mov esi, line
  5319 000041E6 E834DBFFFF          <2> 	call print
  5320                              <2> .none2000:
  5321                              <2> %endif
  5322                              <2> %ifdef rtl8139.included
  5323 000041EB 803D[1D810000]01    <2> 	cmp byte [rtl8139.nicconfig], 1
  5324 000041F2 751E                <2> 	jne .nortl8139
  5325 000041F4 BE[24810000]        <2> 	mov esi, rtl8139.name
  5326 000041F9 E821DBFFFF          <2> 	call print
  5327 000041FE B9[1E810000]        <2> 	mov ecx, rtl8139.mac
  5328 00004203 E8A4490000          <2> 	call showmac
  5329 00004208 BE[5E8C0000]        <2> 	mov esi, line
  5330 0000420D E80DDBFFFF          <2> 	call print
  5331                              <2> .nortl8139:
  5332                              <2> %endif
  5333                              <2> %ifdef rtl8169.included
  5334 00004212 803D[25830000]01    <2> 	cmp byte [rtl8169.nicconfig], 1
  5335 00004219 751E                <2> 	jne .nortl8169
  5336 0000421B BE[2C830000]        <2> 	mov esi, rtl8169.name
  5337 00004220 E8FADAFFFF          <2> 	call print
  5338 00004225 B9[26830000]        <2> 	mov ecx, rtl8169.mac
  5339 0000422A E87D490000          <2> 	call showmac
  5340 0000422F BE[5E8C0000]        <2> 	mov esi, line
  5341 00004234 E8E6DAFFFF          <2> 	call print
  5342                              <2> .nortl8169:
  5343                              <2> %endif
  5344                              <2> %ifdef i8254x.included
  5345 00004239 803D[398A0000]01    <2> 	cmp byte [i8254x.nicconfig], 1
  5346 00004240 751E                <2> 	jne .noi8254x
  5347 00004242 BE[408A0000]        <2> 	mov esi, i8254x.name
  5348 00004247 E8D3DAFFFF          <2> 	call print
  5349 0000424C B9[3A8A0000]        <2> 	mov ecx, i8254x.mac
  5350 00004251 E856490000          <2> 	call showmac
  5351 00004256 BE[5E8C0000]        <2> 	mov esi, line
  5352 0000425B E8BFDAFFFF          <2> 	call print
  5353                              <2> .noi8254x:
  5354                              <2> %endif
  5355 00004260 8B0D[138C0000]      <2> 	mov ecx, [sysip]
  5356 00004266 E805490000          <2> 	call showip
  5357 0000426B BE[5E8C0000]        <2> 	mov esi, line
  5358 00004270 E8AADAFFFF          <2> 	call print
  5359 00004275 C3                  <2> 	ret
  5360                              <2> 	
  5361                              <1> %endif
  5362                              <1> %include 'source/programs/keycode.asm'
  5363 00004276 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5364 0000427F 00                  <2>
  5365                              <2> keycode:
  5366 00004280 C605[3D220000]00    <2> 	mov byte [trans], 0
  5367 00004287 C605[7A640000]00    <2> 	mov byte [threadson], 0
  5368                              <2> %ifdef io.serial
  5369                              <2> .noserial:
  5370                              <2> 	hlt
  5371                              <2> 	mov dx, [serial.address]
  5372                              <2> 	in al, dx
  5373                              <2> 	cmp al, 0
  5374                              <2> 	je .noserial
  5375                              <2> 	mov cl, al
  5376                              <2> 	call showhexsmall
  5377                              <2> 	cmp al, 0x1B
  5378                              <2> 	jne .noserial
  5379                              <2> 	in al, dx
  5380                              <2> 	mov cl, al
  5381                              <2> 	call showhexsmall
  5382                              <2> 	cmp cl, 0x5B
  5383                              <2> 	je .noserial
  5384                              <2> 	ret
  5385                              <2> %else
  5386 0000428E E8FE180000          <2> 	call getkey
  5387 00004293 31C0                <2> 	xor eax, eax
  5388 00004295 31C9                <2> 	xor ecx, ecx
  5389 00004297 8A0D[715B0000]      <2> 	mov cl, [specialkey]
  5390 0000429D 80F900              <2> 	cmp cl, 0
  5391 000042A0 0F8405000000        <2> 	je near .nospecialkeycode
  5392 000042A6 E8DFEBFFFF          <2> 	call showhexsmall
  5393                              <2> .nospecialkeycode:
  5394 000042AB 66A1[3B220000]      <2> 	mov ax, [lastkey]
  5395 000042B1 88E1                <2> 	mov cl, ah
  5396 000042B3 E8D2EBFFFF          <2> 	call showhexsmall
  5397 000042B8 80FC01              <2> 	cmp ah, 1
  5398 000042BB 75C3                <2> 	jne keycode
  5399 000042BD C3                  <2> 	ret
  5400                              <2> %endif
  5401                              <1> %ifdef gui.included
  5402                              <1> 	%include 'source/programs/line.asm'
  5403 000042BE FF2C6C696E6500      <2> db 255,44,"line",0
  5404                              <2> linetester:
  5405 000042C5 803D[389E0000]00    <2> 	cmp byte [guion], 0
  5406 000042CC 0F841B000000        <2> 	je near .done
  5407 000042D2 668B35[63020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  5408 000042D9 BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode
  5409 000042DE E868000000          <2> 	call .circletest
  5410 000042E3 BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines
  5411 000042E8 E801000000          <2> 	call .linetest
  5412                              <2> .done:
  5413 000042ED C3                  <2> 	ret
  5414                              <2> 
  5415                              <2> .linetest:
  5416 000042EE 53                  <2> 	push ebx
  5417 000042EF E8D6000000          <2> 	call .stime
  5418 000042F4 5B                  <2> 	pop ebx
  5419 000042F5 31FF                <2> 	xor edi, edi
  5420                              <2> .ltlp:
  5421 000042F7 53                  <2> 	push ebx
  5422 000042F8 E81C010000          <2> 	call .st
  5423 000042FD 66F7D6              <2> 	not si
  5424 00004300 E814010000          <2> 	call .st
  5425 00004305 5B                  <2> 	pop ebx
  5426 00004306 66F7D6              <2> 	not si
  5427 00004309 660335[61020000]    <2> 	add si, [timenanoseconds]
  5428 00004310 4B                  <2> 	dec ebx
  5429 00004311 81FB00000000        <2> 	cmp ebx, 0
  5430 00004317 77DE                <2> 	ja .ltlp
  5431 00004319 E8C4000000          <2> 	call .etime
  5432 0000431E 53                  <2> 	push ebx	
  5433 0000431F 57                  <2> 	push edi
  5434 00004320 E875260000          <2> 	call guiclear
  5435 00004325 E8B2260000          <2> 	call reloadallgraphics
  5436 0000432A 59                  <2> 	pop ecx
  5437 0000432B E838ECFFFF          <2> 	call showdec
  5438 00004330 BE[5B440000]        <2> 	mov esi, .msg
  5439 00004335 E8E5D9FFFF          <2> 	call print
  5440 0000433A 59                  <2> 	pop ecx
  5441 0000433B E828ECFFFF          <2> 	call showdec
  5442 00004340 BE[87440000]        <2> 	mov esi, .msgtime
  5443 00004345 E8D5D9FFFF          <2> 	call print
  5444 0000434A C3                  <2> 	ret
  5445                              <2> 	
  5446                              <2> .circletest:
  5447 0000434B 53                  <2> 	push ebx
  5448 0000434C E879000000          <2> 	call .stime
  5449 00004351 5B                  <2> 	pop ebx
  5450 00004352 31FF                <2> 	xor edi, edi
  5451                              <2> .ctlp:
  5452 00004354 53                  <2> 	push ebx
  5453 00004355 668B0D[92540000]    <2> 	mov cx, [resolutiony]
  5454 0000435C 66D1E9              <2> 	shr cx, 1
  5455 0000435F 668B15[90540000]    <2> 	mov dx, [resolutionx]
  5456 00004366 66D1EA              <2> 	shr dx, 1
  5457 00004369 6689C8              <2> 	mov ax, cx
  5458                              <2> .circle:
  5459 0000436C 60                  <2> 	pusha
  5460 0000436D E8FF210000          <2> 	call drawcircle
  5461 00004372 61                  <2> 	popa
  5462 00004373 6648                <2> 	dec ax
  5463 00004375 47                  <2> 	inc edi
  5464 00004376 663D0100            <2> 	cmp ax, 1
  5465 0000437A 77F0                <2> 	ja .circle
  5466 0000437C 66F7D6              <2> 	not si
  5467                              <2> .circle2:
  5468 0000437F 60                  <2> 	pusha
  5469 00004380 E8EC210000          <2> 	call drawcircle
  5470 00004385 61                  <2> 	popa
  5471 00004386 47                  <2> 	inc edi
  5472 00004387 6640                <2> 	inc ax
  5473 00004389 6639C8              <2> 	cmp ax, cx
  5474 0000438C 76F1                <2> 	jbe .circle2
  5475 0000438E 5B                  <2> 	pop ebx
  5476 0000438F 66F7D6              <2> 	not si
  5477 00004392 660335[61020000]    <2> 	add si, [timenanoseconds]
  5478 00004399 4B                  <2> 	dec ebx
  5479 0000439A 81FB00000000        <2> 	cmp ebx, 0
  5480 000043A0 77B2                <2> 	ja .ctlp
  5481 000043A2 E83B000000          <2> 	call .etime
  5482 000043A7 53                  <2> 	push ebx
  5483 000043A8 57                  <2> 	push edi
  5484 000043A9 59                  <2> 	pop ecx
  5485 000043AA E8B9EBFFFF          <2> 	call showdec
  5486 000043AF BE[70440000]        <2> 	mov esi, .msgcircle
  5487 000043B4 E866D9FFFF          <2> 	call print
  5488 000043B9 59                  <2> 	pop ecx
  5489 000043BA E8A9EBFFFF          <2> 	call showdec
  5490 000043BF BE[87440000]        <2> 	mov esi, .msgtime
  5491 000043C4 E856D9FFFF          <2> 	call print
  5492 000043C9 C3                  <2> 	ret
  5493                              <2> 	
  5494                              <2> .stime:
  5495 000043CA F4                  <2> 	hlt
  5496 000043CB A1[5D020000]        <2> 	mov eax, [timeseconds]
  5497 000043D0 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  5498 000043D6 A3[96440000]        <2> 	mov [.time], eax
  5499 000043DB 891D[9A440000]      <2> 	mov [.time + 4], ebx
  5500 000043E1 C3                  <2> 	ret
  5501                              <2> 	
  5502                              <2> .etime:
  5503 000043E2 A1[5D020000]        <2> 	mov eax, [timeseconds]
  5504 000043E7 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  5505 000043ED 8B0D[96440000]      <2> 	mov ecx, [.time]
  5506 000043F3 8B15[9A440000]      <2> 	mov edx, [.time + 4]
  5507 000043F9 C1EA0A              <2> 	shr edx, 10
  5508 000043FC C1EB0A              <2> 	shr ebx, 10
  5509 000043FF 29C8                <2> 	sub eax, ecx
  5510 00004401 3D00000000          <2> 	cmp eax, 0
  5511 00004406 740E                <2> 	je .notclp
  5512                              <2> .tclp:
  5513 00004408 81C340420F00        <2> 	add ebx, 1000000
  5514 0000440E 48                  <2> 	dec eax
  5515 0000440F 3D00000000          <2> 	cmp eax, 0
  5516 00004414 75F2                <2> 	jne .tclp
  5517                              <2> .notclp:
  5518 00004416 29D3                <2> 	sub ebx, edx
  5519 00004418 C3                  <2> 	ret
  5520                              <2> 	
  5521                              <2> .st:
  5522 00004419 6631C0              <2> 	xor ax, ax
  5523 0000441C 6631DB              <2> 	xor bx, bx
  5524 0000441F 668B0D[92540000]    <2> 	mov cx, [resolutiony]
  5525 00004426 668B15[90540000]    <2> 	mov dx, [resolutionx]
  5526                              <2> .lp:
  5527 0000442D 60                  <2> 	pusha
  5528 0000442E E83B240000          <2> 	call drawline
  5529 00004433 61                  <2> 	popa
  5530                              <2> .noswitch:
  5531 00004434 47                  <2> 	inc edi
  5532 00004435 6643                <2> 	inc bx
  5533 00004437 664A                <2> 	dec dx
  5534 00004439 6681FB0000          <2> 	cmp bx, 0
  5535 0000443E 74ED                <2> 	je .lp
  5536 00004440 6681FA0000          <2> 	cmp dx, 0
  5537 00004445 75E6                <2> 	jne .lp
  5538                              <2> .lp2:
  5539 00004447 60                  <2> 	pusha
  5540 00004448 E821240000          <2> 	call drawline
  5541 0000444D 61                  <2> 	popa
  5542 0000444E 47                  <2> 	inc edi
  5543 0000444F 6640                <2> 	inc ax
  5544 00004451 6649                <2> 	dec cx
  5545 00004453 6681F90000          <2> 	cmp cx, 0
  5546 00004458 75ED                <2> 	jne .lp2
  5547 0000445A C3                  <2> 	ret
  5548                              <2> 	
  5549 0000445B 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  5550 00004464 6520647261776E2069- <2>
  5551 0000446D 6E2000              <2>
  5552 00004470 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  5553 00004479 65726520647261776E- <2>
  5554 00004482 20696E2000          <2>
  5555 00004487 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  5556 00004490 6E64732E0A00        <2>
  5557 00004496 0000000000000000    <2> .time dd 0,0	
  5558                              <1> %endif
  5559                              <1> %include 'source/programs/logout.asm'
  5560 0000449E FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5561 000044A7 E955E3FFFF          <2> 	jmp os
  5562                              <1> %include 'source/programs/loop.asm'
  5563 000044AC FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5564 000044B3 803D[F9B60000]00    <2> 	cmp byte [LOOPON], 0
  5565 000044BA 0F8501000000        <2> 	jne near filoop
  5566 000044C0 C3                  <2> 	ret
  5567 000044C1 8B35[FAB60000]      <2> filoop: mov esi, [LOOPPOS]
  5568 000044C7 FE0D[8FB60000]      <2> 	dec byte [IFON]
  5569 000044CD C605[F9B60000]00    <2> 	mov byte [LOOPON], 0
  5570 000044D4 8935[F4B60000]      <2> 	mov [BATCHPOS], esi
  5571 000044DA 8935[9D360000]      <2> 	mov [batchedi], esi
  5572 000044E0 C3                  <2> 	ret 
  5573                              <1> %include 'source/programs/ls.asm'
  5574 000044E1 FF2C6C7300          <2> db 255,44,"ls",0
  5575 000044E6 BE[839C0000]        <2> 		mov esi, diskfileindex
  5576                              <2> 	diskindexdir:
  5577 000044EB 803E5F              <2> 		cmp byte [esi], '_'
  5578 000044EE 7440                <2> 		je nextdiskindexdir
  5579 000044F0 E818D8FFFF          <2> 		call printquiet
  5580 000044F5 56                  <2> 		push esi
  5581 000044F6 BE[50450000]        <2> 		mov esi, disktab
  5582 000044FB E80DD8FFFF          <2> 		call printquiet
  5583 00004500 5E                  <2> 		pop esi
  5584 00004501 8B4E05              <2> 		mov ecx, [esi + 5]
  5585 00004504 C605[892E0000]05    <2> 		mov byte [firsthexshown], 5
  5586 0000450B E858EAFFFF          <2> 		call showdec
  5587 00004510 56                  <2> 		push esi
  5588 00004511 BE[5E8C0000]        <2> 		mov esi, line
  5589 00004516 E8F2D7FFFF          <2> 		call printquiet
  5590 0000451B 5E                  <2> 		pop esi
  5591 0000451C 81C609000000        <2> 		add esi, 9
  5592 00004522 81FE[389E0000]      <2> 		cmp esi, enddiskfileindex
  5593 00004528 72C1                <2> 		jb diskindexdir
  5594 0000452A E87AE0FFFF          <2> 		call termcopy
  5595 0000452F C3                  <2> 		ret
  5596                              <2> 	nextdiskindexdir:
  5597 00004530 46                  <2> 		inc esi
  5598 00004531 803E00              <2> 		cmp byte [esi], 0
  5599 00004534 75FA                <2> 		jne nextdiskindexdir
  5600 00004536 81C609000000        <2> 		add esi, 9
  5601 0000453C 81FE[389E0000]      <2> 		cmp esi, enddiskfileindex
  5602 00004542 72A7                <2> 		jb diskindexdir
  5603 00004544 E860E0FFFF          <2> 		call termcopy
  5604 00004549 C3                  <2> 		ret
  5605                              <2> 		
  5606 0000454A 4469736B2000        <2> 		diskmsg db "Disk ",0
  5607 00004550 0D09090900          <2> 		disktab db 13,9,9,9,0
  5608                              <1> %include 'source/programs/memory.asm'
  5609 00004555 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  5610 0000455E BE[3E9E0000]        <2> 	mov esi, memlistbuf
  5611 00004563 31FF                <2> 	xor edi, edi
  5612 00004565 668B3D[7EA00000]    <2> 	mov di, [memlistend]
  5613 0000456C 01F7                <2> 	add edi, esi
  5614                              <2> printmemmap:
  5615 0000456E 8B0E                <2> 	mov ecx, [esi]
  5616 00004570 E829E9FFFF          <2> 	call showhex
  5617 00004575 81C608000000        <2> 	add esi, 8
  5618 0000457B 8B0E                <2> 	mov ecx, [esi]
  5619 0000457D E81CE9FFFF          <2> 	call showhex
  5620 00004582 81C608000000        <2> 	add esi, 8
  5621 00004588 8B0E                <2> 	mov ecx, [esi]
  5622 0000458A E80FE9FFFF          <2> 	call showhex
  5623 0000458F 81C608000000        <2> 	add esi, 8
  5624 00004595 57                  <2> 	push edi
  5625 00004596 56                  <2> 	push esi
  5626 00004597 BE[5E8C0000]        <2> 	mov esi, line
  5627 0000459C E87ED7FFFF          <2> 	call print
  5628 000045A1 5E                  <2> 	pop esi
  5629 000045A2 5F                  <2> 	pop edi
  5630 000045A3 39FE                <2> 	cmp esi, edi
  5631 000045A5 72C7                <2> 	jb printmemmap
  5632 000045A7 C3                  <2> 	ret
  5633                              <2> 	
  5634                              <1> %include 'source/programs/pci.asm'
  5635 000045A8 FF2C70636900        <2> db 255,44,"pci",0
  5636 000045AE E8F9190000          <2> 	call pcidump
  5637 000045B3 C3                  <2> 	ret 
  5638                              <1> %ifdef network.included
  5639                              <1> 	%include 'source/programs/ping.asm'
  5640 000045B4 FF2C70696E6700      <2> db 255,44,"ping",0
  5641                              <2> ping:
  5642 000045BB 8B35[772C0000]      <2> 	mov esi, [currentcommandloc]
  5643 000045C1 81C605000000        <2> 	add esi, 5
  5644 000045C7 E85E450000          <2> 	call strtoip
  5645 000045CC 890D[57460000]      <2> 	mov [.destip], ecx
  5646 000045D2 E899450000          <2> 	call showip
  5647 000045D7 8B0D[138C0000]      <2> 	mov ecx, [sysip]
  5648 000045DD 890D[53460000]      <2> 	mov [.sourceip]. ecx
  5649 000045E3 31C0                <2> 	xor eax, eax
  5650 000045E5 31DB                <2> 	xor ebx, ebx
  5651 000045E7 66A3[51460000]      <2> 	mov [.checksum], ax
  5652 000045ED 66A3[5D460000]      <2> 	mov [.icmpchecksum], ax
  5653 000045F3 BF[47460000]        <2> 	mov edi, .header
  5654 000045F8 BE[5B460000]        <2> 	mov esi, .headerend
  5655 000045FD E800450000          <2> 	call getchecksum
  5656 00004602 66890D[51460000]    <2> 	mov [.checksum], cx
  5657 00004609 BF[5B460000]        <2> 	mov edi, .icmp
  5658 0000460E BE[83460000]        <2> 	mov esi, .packetend
  5659 00004613 E8EA440000          <2> 	call getchecksum
  5660 00004618 66890D[5D460000]    <2> 	mov [.icmpchecksum], cx
  5661 0000461F BF[39460000]        <2> 	mov edi, .packet
  5662 00004624 BE[83460000]        <2> 	mov esi, .packetend
  5663 00004629 E8B3440000          <2> 	call sendpacket
  5664 0000462E BE[5E8C0000]        <2> 	mov esi, line
  5665 00004633 E8E7D6FFFF          <2> 	call print
  5666 00004638 C3                  <2> 	ret
  5667                              <2> 	
  5668                              <2> 	
  5669                              <2> 	
  5670                              <2> .packet:
  5671 00004639 FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5672 0000463F 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  5673 00004645 0800                <2> .ethertype	db 8,0	;ip is 0x800
  5674                              <2> .header:
  5675 00004647 45                  <2> .version	db 0x45
  5676 00004648 00                  <2> .services	db 0
  5677 00004649 003C                <2> .length	db 0,0x3C
  5678 0000464B 0000                <2> .id		dw 0
  5679 0000464D 00                  <2> .flags	db 0
  5680 0000464E 00                  <2> .fragment db 0
  5681 0000464F 80                  <2> .ttl	db 128
  5682 00004650 01                  <2> .protocol db 1 ;ICMP
  5683 00004651 0000                <2> .checksum dw 0
  5684 00004653 00000000            <2> .sourceip dd 0
  5685 00004657 00000000            <2> .destip dd 0
  5686                              <2> .headerend:
  5687                              <2> .icmp:
  5688 0000465B 08                  <2> .icmptype db 8 ;Ping request
  5689 0000465C 00                  <2> .icmpcode db 0
  5690 0000465D 0000                <2> .icmpchecksum dw 0
  5691 0000465F 0001                <2> .icmpid db 0,1
  5692 00004661 0000                <2> .sequence dw 0
  5693 00004663 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  5694 0000466C 6A6B6C6D6E6F707172- <2>
  5695 00004675 737475767761626364- <2>
  5696 0000467E 6566676869          <2>
  5697                              <2> .packetend:
  5698                              <1> %endif
  5699                              <1> %include 'source/programs/play.asm'
  5700 00004683 FF2C706C61796100    <2> db 255,44,"playa",0
  5701 0000468B 8B3D[772C0000]      <2> 	mov edi, [currentcommandloc]
  5702 00004691 81C706000000        <2> 	add edi, 6
  5703 00004697 E833000000          <2> 	call playasync
  5704 0000469C C3                  <2> 	ret
  5705 0000469D FF2C706C617900      <2> db 255,44,"play",0
  5706                              <2> play:
  5707 000046A4 8B3D[772C0000]      <2> 	mov edi, [currentcommandloc]
  5708 000046AA 81C705000000        <2> 	add edi, 5
  5709 000046B0 E81A000000          <2> 	call playasync
  5710                              <2> .waitforsound:
  5711                              <2> %ifdef sound.included
  5712 000046B5 A1[5A5B0000]        <2> 	mov eax, [Length0]
  5713 000046BA 660B05[5E5B0000]    <2> 	or ax, [Length1]
  5714                              <2> %endif
  5715 000046C1 0A05[65020000]      <2> 	or al, [soundon]
  5716 000046C7 3D00000000          <2> 	cmp eax, 0
  5717 000046CC 75E7                <2> 	jne .waitforsound
  5718 000046CE C3                  <2> 	ret
  5719                              <2> playasync:
  5720 000046CF BE0000C000          <2> 	mov esi, 0xC00000
  5721 000046D4 E8021C0000          <2> 	call loadfile
  5722 000046D9 81FA94010000        <2> 	cmp edx, 404
  5723 000046DF 743F                <2> 	je nosoundfound
  5724 000046E1 BB0000C000          <2> 	mov ebx, 0xC00000
  5725 000046E6 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  5726 000046ED 0F843F010000        <2> 	je near wave_player
  5727 000046F3 66813B534E          <2> 	cmp word [ebx], "SN"
  5728 000046F8 7526                <2> 	jne nosoundfound
  5729 000046FA 81C306000000        <2> 	add ebx, 6
  5730 00004700 891D[68020000]      <2> 	mov [soundpos], ebx
  5731 00004706 035BFC              <2> 	add ebx, [ebx - 4]
  5732 00004709 891D[6C020000]      <2> 	mov [soundendpos], ebx
  5733 0000470F 66C705[66020000]00- <2> 	mov word [soundrepititions], 0
  5734 00004717 00                  <2>
  5735 00004718 C605[65020000]01    <2> 	mov byte [soundon], 1
  5736 0000471F C3                  <2> 	ret
  5737                              <2> nosoundfound:
  5738 00004720 BE[46470000]        <2> 	mov esi, notfoundsound
  5739 00004725 E8F5D5FFFF          <2> 	call print
  5740 0000472A 8B35[772C0000]      <2> 	mov esi, [currentcommandloc]
  5741 00004730 81C605000000        <2> 	add esi, 5
  5742 00004736 E8E4D5FFFF          <2> 	call print
  5743 0000473B BE[2D8C0000]        <2> 	mov esi, notfound2
  5744 00004740 E8DAD5FFFF          <2> 	call print
  5745 00004745 C3                  <2> 	ret
  5746 00004746 706C61793A2000      <2> notfoundsound db "play: ",0
  5747                              <2> 
  5748                              <2> %ifdef sound.included
  5749                              <2> sbplay:
  5750 0000474D BE0000C000          <2> 		mov esi, 0xC00000
  5751 00004752 89F3                <2> 		mov ebx, esi
  5752 00004754 81C640000000        <2> 		add esi, WAVSTART
  5753 0000475A 29F7                <2> 		sub edi, esi
  5754 0000475C 66893D[5E5B0000]    <2> 		mov [Length1], di
  5755 00004763 C1EF0F              <2> 		shr edi, 15
  5756 00004766 893D[5A5B0000]      <2> 		mov [Length0], edi
  5757 0000476C 8B4B18              <2> 		mov ecx, [ebx + 24]
  5758 0000476F 890D[6B5B0000]      <2> 		mov [Freq], ecx
  5759 00004775 31C0                <2> 		xor eax, eax
  5760 00004777 BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  5761 0000477C 81C240000000        <2> 		add edx, WAVSTART
  5762 00004782 01D0                <2> 		add	eax, edx
  5763 00004784 89C6                <2> 		mov esi, eax
  5764 00004786 31C9                <2> 		xor ecx, ecx
  5765 00004788 31DB                <2> 		xor ebx, ebx
  5766 0000478A 66891D[685B0000]    <2> 		mov [SegLoc], bx
  5767 00004791 81C300000800        <2> 		add ebx, 0x80000
  5768 00004797 66B9FFFF            <2> 		mov cx, 0xFFFF
  5769 0000479B 6681FF0000          <2> 		cmp di, 0
  5770 000047A0 7520                <2> 		jne .autoinit
  5771 000047A2 668B0D[5E5B0000]    <2> 		mov cx, [Length1]
  5772 000047A9 C605[595B0000]01    <2> 		mov byte [OddLength], 1
  5773 000047B0 6681F90080          <2> 		cmp cx, 32768
  5774 000047B5 730B                <2> 		jae .autoinit
  5775 000047B7 C605[595B0000]00    <2> 		mov byte [OddLength], 0
  5776 000047BE 66D1E1              <2> 		shl cx, 1
  5777 000047C1 47                  <2> 		inc edi
  5778                              <2> .autoinit:
  5779 000047C2 4F                  <2> 		dec edi
  5780 000047C3 893D[5A5B0000]      <2> 		mov [Length0], edi
  5781 000047C9 66890D[5E5B0000]    <2> 		mov [Length1], cx
  5782 000047D0 66D1E9              <2> 		shr cx, 1
  5783 000047D3 6641                <2> 		inc cx
  5784 000047D5 01C8                <2> 		add eax, ecx
  5785 000047D7 A3[605B0000]        <2> 		mov [NextMemLoc], eax
  5786 000047DC 8935[645B0000]      <2> 		mov	[MemLoc], esi
  5787 000047E2 E82A120000          <2> 		call DMACopy
  5788 000047E7 31DB                <2> 		xor ebx, ebx
  5789 000047E9 668B1D[685B0000]    <2> 		mov bx, [SegLoc]
  5790 000047F0 31C9                <2> 		xor ecx, ecx
  5791 000047F2 668B0D[5E5B0000]    <2> 		mov cx, [Length1]
  5792 000047F9 66D1E9              <2> 		shr cx, 1
  5793 000047FC 6641                <2> 		inc cx
  5794 000047FE 01CB                <2> 		add ebx, ecx
  5795 00004800 66891D[685B0000]    <2> 		mov [SegLoc], bx
  5796 00004807 81C300000800        <2> 		add ebx, 0x80000
  5797 0000480D 8B35[605B0000]      <2> 		mov esi, [NextMemLoc]
  5798 00004813 89F0                <2> 		mov eax, esi
  5799 00004815 01C8                <2> 		add eax, ecx
  5800 00004817 A3[605B0000]        <2> 		mov [NextMemLoc], eax
  5801 0000481C 8935[645B0000]      <2> 		mov	[MemLoc], esi
  5802 00004822 E8EA110000          <2> 		call DMACopy
  5803 00004827 E808120000          <2> 		call DMAPlay
  5804 0000482C E892120000          <2> 		call PlayDSP
  5805 00004831 C3                  <2> 		ret
  5806                              <2> WAVSTART equ 64;44
  5807                              <2> wave_player:
  5808 00004832 803D[705B0000]01    <2> 	cmp byte [SoundBlaster], 1
  5809 00004839 0F840EFFFFFF        <2> 	je near sbplay
  5810 0000483F BE[4A480000]        <2> 	mov esi, nosoundblaster
  5811 00004844 E8D6D4FFFF          <2> 	call print
  5812 00004849 C3                  <2> 	ret
  5813                              <2> %else
  5814                              <2> 	wave_player:
  5815                              <2> 		mov esi, nosoundblaster
  5816                              <2> 		call print
  5817                              <2> 		ret
  5818                              <2> %endif
  5819 0000484A 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  5820 00004853 426C61737465722064- <2>
  5821 0000485C 657465637465642E0A- <2>
  5822 00004865 00                  <2>
  5823                              <1> %include 'source/programs/pwd.asm'
  5824 00004866 FF2C70776400        <2> db 255,44,"pwd",0
  5825 0000486C BE[8AB40000]        <2> 	mov esi, currentfolder
  5826 00004871 E897D4FFFF          <2> 	call printquiet
  5827 00004876 BE[5E8C0000]        <2> 	mov esi, line
  5828 0000487B E89FD4FFFF          <2> 	call print
  5829 00004880 C3                  <2> 	ret
  5830                              <2> 	
  5831                              <1> %include 'source/programs/reboot.asm'
  5832 00004881 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  5833 0000488A 0F011D[94480000]    <2> 		lidt [idtreboot]
  5834 00004891 CD00                <2> 		int 0
  5835 00004893 F4                  <2> 		hlt
  5836                              <2> 	
  5837 00004894 0000                <2> 	idtreboot dw 0
  5838 00004896 00000000            <2> 			  dd 0
  5839                              <2> 
  5840                              <2> 	coldboot:
  5841 0000489A 66B84000            <2> 		MOV AX, 0040h
  5842 0000489E 8EC0                <2> 		MOV ES, AX
  5843 000048A0 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  5844 000048A9 00                  <2>
  5845 000048AA EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5846 000048B1 CF                  <2> 		IRET
  5847                              <2> 
  5848                              <2> 	warmboot:
  5849 000048B2 66B84000            <2> 		MOV AX, 0040h
  5850 000048B6 8EC0                <2> 		MOV ES, AX
  5851 000048B8 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  5852 000048C1 12                  <2>
  5853 000048C2 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5854 000048C9 CF                  <2> 		IRET
  5855                              <2> 		
  5856                              <1> %include 'source/programs/reg.asm'
  5857 000048CA FF2C72656700        <2> db 255,44,"reg",0
  5858 000048D0 CD03                <2> 	int 3
  5859 000048D2 C3                  <2> 	ret 
  5860                              <1> %include 'source/programs/show.asm'
  5861 000048D3 FF2C73686F7700      <2> db 255,44,"show",0
  5862 000048DA 8B3D[772C0000]      <2> 		mov edi, [currentcommandloc]
  5863 000048E0 81C705000000        <2> 		add edi, 5
  5864 000048E6 BE00008000          <2> 		mov esi, 0x800000
  5865 000048EB E8EB190000          <2> 		call loadfile
  5866 000048F0 81FA94010000        <2> 		cmp edx, 404
  5867 000048F6 0F8483000000        <2> 		je near filenotfound
  5868 000048FC BE00008000          <2> 		mov esi, 0x800000
  5869                              <2> %ifdef gui.included
  5870 00004901 66813E424D          <2> 		cmp word [esi], "BM"
  5871 00004906 7410                <2> 		je bmpfound
  5872                              <2> %endif
  5873 00004908 E812D4FFFF          <2> 		call print
  5874 0000490D BE[5E8C0000]        <2> 		mov esi, line
  5875 00004912 E808D4FFFF          <2> 		call print
  5876 00004917 C3                  <2> 		ret
  5877                              <2> %ifdef gui.included
  5878                              <2> bmpfound:
  5879 00004918 803D[389E0000]00    <2> 		cmp byte [guion], 0
  5880 0000491F 0F8428000000        <2> 		je near noguibmp
  5881 00004925 BE00008000          <2> 		mov esi, 0x800000
  5882 0000492A 31C9                <2> 		xor ecx, ecx
  5883 0000492C 31D2                <2> 		xor edx, edx
  5884 0000492E 31C0                <2> 		xor eax, eax
  5885 00004930 31DB                <2> 		xor ebx, ebx
  5886 00004932 E8681B0000          <2> 		call showbmp
  5887 00004937 30C0                <2> 		xor al, al
  5888 00004939 B405                <2> 		mov ah, 5
  5889 0000493B CD30                <2> 		int 30h
  5890 0000493D E858200000          <2> 		call guiclear
  5891 00004942 E8371D0000          <2> 		call clearmousecursor
  5892 00004947 E890200000          <2> 		call reloadallgraphics
  5893 0000494C C3                  <2> 		ret
  5894                              <2> noguibmp:
  5895 0000494D BE[58490000]        <2> 		mov esi, warnguimsg
  5896 00004952 E8C8D3FFFF          <2> 		call print
  5897 00004957 C3                  <2> 		ret
  5898 00004958 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  5899 00004961 6E6F7420626520646F- <2>
  5900 0000496A 6E6520776974686F75- <2>
  5901 00004973 742074686520475549- <2>
  5902 0000497C 2E0A00              <2>
  5903                              <2> %endif
  5904                              <2> 
  5905                              <2> filenotfound:
  5906 0000497F BE[B2490000]        <2> 		mov esi, filenf
  5907 00004984 E896D3FFFF          <2> 		call print
  5908 00004989 8B35[772C0000]      <2> 		mov esi, [currentcommandloc]
  5909                              <2> findfilenotfoundzero:
  5910 0000498F 8A06                <2> 		mov al, [esi]
  5911 00004991 46                  <2> 		inc esi
  5912 00004992 3C00                <2> 		cmp al, 0
  5913 00004994 7411                <2> 		je nofilenamenotfound
  5914 00004996 81FE[FECE0000]      <2> 		cmp esi, buftxtend
  5915 0000499C 7309                <2> 		jae nofilenamenotfound
  5916 0000499E 3C20                <2> 		cmp al, " "
  5917 000049A0 75ED                <2> 		jne findfilenotfoundzero
  5918 000049A2 E878D3FFFF          <2> 		call print
  5919                              <2> nofilenamenotfound:
  5920 000049A7 BE[BD490000]        <2> 		mov esi, filenf2
  5921 000049AC E86ED3FFFF          <2> 		call print
  5922 000049B1 C3                  <2> 		ret
  5923 000049B2 5468652066696C6520- <2> filenf db "The file ",34,0
  5924 000049BB 2200                <2>
  5925 000049BD 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  5926 000049C6 6F7420626520666F75- <2>
  5927 000049CF 6E642E0A00          <2>
  5928                              <1> %include 'source/programs/shush.asm'
  5929 000049D4 FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  5930                              <2> shushprog:
  5931                              <2> %ifdef gui.included
  5932 000049DC 803D[389E0000]00    <2> 	cmp byte [guion], 0
  5933 000049E3 0F84B9000000        <2> 	je near .noswitchsize
  5934 000049E9 8B35[772C0000]      <2> 	mov esi, [currentcommandloc]
  5935 000049EF 81C606000000        <2> 	add esi, 6
  5936 000049F5 56                  <2> 	push esi
  5937 000049F6 4E                  <2> 	dec esi
  5938                              <2> .findspace:
  5939 000049F7 46                  <2> 	inc esi
  5940 000049F8 8A06                <2> 	mov al, [esi]
  5941 000049FA 3C00                <2> 	cmp al, 0
  5942 000049FC 0F84A0000000        <2> 	je near .noswitchsize
  5943 00004A02 3C58                <2> 	cmp al, "X"
  5944 00004A04 7408                <2> 	je .donefind
  5945 00004A06 3C78                <2> 	cmp al, "x"
  5946 00004A08 7404                <2> 	je .donefind
  5947 00004A0A 3C20                <2> 	cmp al, " "
  5948 00004A0C 75E9                <2> 	jne .findspace
  5949                              <2> .donefind:
  5950 00004A0E 30C0                <2> 	xor al, al
  5951 00004A10 8806                <2> 	mov [esi], al
  5952 00004A12 46                  <2> 	inc esi
  5953 00004A13 89F7                <2> 	mov edi, esi
  5954 00004A15 E830E6FFFF          <2> 	call cnvrttxt
  5955 00004A1A 89C8                <2> 	mov eax, ecx
  5956 00004A1C 5E                  <2> 	pop esi
  5957 00004A1D 50                  <2> 	push eax
  5958 00004A1E 89F7                <2> 	mov edi, esi
  5959 00004A20 E825E6FFFF          <2> 	call cnvrttxt
  5960 00004A25 89CB                <2> 	mov ebx, ecx
  5961 00004A27 58                  <2> 	pop eax	
  5962 00004A28 6681FB0000          <2> 	cmp bx, 0
  5963 00004A2D 0F846F000000        <2> 	je near .noswitchsize
  5964 00004A33 663D0000            <2> 	cmp ax, 0
  5965 00004A37 0F8465000000        <2> 	je near .noswitchsize
  5966 00004A3D 66C1E303            <2> 	shl bx, 3
  5967 00004A41 66C1E004            <2> 	shl ax, 4
  5968 00004A45 663B1D[90540000]    <2> 	cmp bx, [resolutionx]
  5969 00004A4C 7607                <2> 	jbe .nofixx
  5970 00004A4E 668B1D[90540000]    <2> 	mov bx, [resolutionx]
  5971                              <2> .nofixx:
  5972 00004A55 66051000            <2> 	add ax, 16
  5973 00004A59 663B05[92540000]    <2> 	cmp ax, [resolutiony]
  5974 00004A60 7606                <2> 	jbe .nofixy
  5975 00004A62 66A1[92540000]      <2> 	mov ax, [resolutiony]
  5976                              <2> .nofixy:
  5977 00004A68 662D1000            <2> 	sub ax, 16
  5978 00004A6C 6631C9              <2> 	xor cx, cx
  5979 00004A6F 6631D2              <2> 	xor dx, dx
  5980 00004A72 66891D[B16C0000]    <2> 	mov [termwindow], bx
  5981 00004A79 66A3[B36C0000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5982 00004A7F BE[B16C0000]        <2> 	mov esi, termwindow
  5983 00004A84 31DB                <2> 	xor ebx, ebx
  5984 00004A86 6631C0              <2> 	xor ax, ax
  5985 00004A89 E82C270000          <2> 	call showwindow
  5986 00004A8E E8071F0000          <2> 	call guiclear
  5987 00004A93 E8EDD2FFFF          <2> 	call clear
  5988 00004A98 E83F1F0000          <2> 	call reloadallgraphics
  5989 00004A9D E8941C0000          <2> 	call switchmousepos2
  5990                              <2> .noswitchsize:
  5991                              <2> %endif
  5992 00004AA2 BE[AD4A0000]        <2> 	mov esi, shushmsg
  5993 00004AA7 E873D2FFFF          <2> 	call print
  5994 00004AAC C3                  <2> 	ret
  5995 00004AAD 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  5996 00004AB6 6F2074686520536F6C- <2>
  5997 00004ABF 6C65724F5320486172- <2>
  5998 00004AC8 646C7920556E69782D- <2>
  5999 00004AD1 436F6D70617469626C- <2>
  6000 00004ADA 65205368656C6C210A- <2>
  6001 00004AE3 00                  <2>
  6002                              <1> %include 'source/programs/system.asm'
  6003 00004AE4 FF2C73797374656D00  <2> 	db 255,44,"system",0
  6004 00004AED BE[FD4B0000]        <2> 	mov esi, kernelinfomsg
  6005 00004AF2 E816D2FFFF          <2> 	call printquiet
  6006 00004AF7 B9[839C0000]        <2> 	mov ecx, osend
  6007 00004AFC E867E4FFFF          <2> 	call showdec
  6008 00004B01 BE[124C0000]        <2> 	mov esi, diskbytemsg
  6009 00004B06 E802D2FFFF          <2> 	call printquiet
  6010 00004B0B B9[839C0000]        <2> 	mov ecx, osend
  6011 00004B10 81C1[6CB70100]      <2> 	add ecx, commandbufend
  6012 00004B16 81E9[389E0000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6013 00004B1C E847E4FFFF          <2> 	call showdec
  6014 00004B21 BE[294C0000]        <2> 	mov esi, membytemsg
  6015 00004B26 E8E2D1FFFF          <2> 	call printquiet
  6016 00004B2B BE[8C4C0000]        <2> 	mov esi, endofmemmsg
  6017 00004B30 E8D8D1FFFF          <2> 	call printquiet
  6018 00004B35 B9[80EB1100]        <2> 	mov ecx, bssend
  6019 00004B3A E85FE3FFFF          <2> 	call showhex
  6020 00004B3F BE[424C0000]        <2> 	mov esi, systeminfomsg
  6021 00004B44 E8C4D1FFFF          <2> 	call printquiet
  6022                              <2> getcpuspeed:
  6023 00004B49 B8FE000000          <2> 	mov eax, 0xFE
  6024 00004B4E E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6025 00004B50 B020                <2> 	mov al, 0x20
  6026 00004B52 E620                <2> 	out 0x20, al
  6027 00004B54 F4                  <2> 	hlt
  6028 00004B55 0F31                <2> 	rdtsc
  6029 00004B57 89D6                <2> 	mov esi, edx
  6030 00004B59 89C7                <2> 	mov edi, eax
  6031 00004B5B 31C0                <2> 	xor eax, eax
  6032 00004B5D C605[46020000]01    <2> 	mov byte [testingcpuspeed], 1
  6033                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6034 00004B64 40                  <2> 	inc eax
  6035 00004B65 EBFD                <2> 	jmp cpuspeedloop
  6036                              <2> cpuspeedloopend:
  6037 00004B67 0F31                <2> 	rdtsc
  6038 00004B69 29F8                <2> 	sub eax, edi
  6039 00004B6B 29F2                <2> 	sub edx, esi
  6040 00004B6D 8915[4F020000]      <2> 	mov [cpuclocksperint + 4], edx
  6041 00004B73 A3[4B020000]        <2> 	mov [cpuclocksperint], eax
  6042 00004B78 31C0                <2> 	xor eax, eax
  6043 00004B7A E621                <2> 	out 0x21, al
  6044 00004B7C B020                <2> 	mov al, 0x20
  6045 00004B7E E620                <2> 	out 0x20, al
  6046 00004B80 31D2                <2> 	xor edx, edx
  6047 00004B82 31C0                <2> 	xor eax, eax
  6048 00004B84 A1[47020000]        <2> 	mov eax, [cpuspeedperint]
  6049 00004B89 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6050                              <2> 				;result by 2
  6051 00004B8B 8B1D[59020000]      <2> 	mov ebx, [timeinterval]
  6052 00004B91 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6053 00004B94 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6054 00004B96 89C1                <2> 	mov ecx, eax
  6055 00004B98 E8CBE3FFFF          <2> 	call showdec
  6056 00004B9D BE[704C0000]        <2> 	mov esi, cpuspeedmsg
  6057 00004BA2 E866D1FFFF          <2> 	call printquiet
  6058 00004BA7 31D2                <2> 	xor edx, edx
  6059 00004BA9 A1[4B020000]        <2> 	mov eax, [cpuclocksperint]
  6060 00004BAE 8B15[4F020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6061 00004BB4 8B1D[59020000]      <2> 	mov ebx, [timeinterval]
  6062 00004BBA C1EB0A              <2> 	shr ebx, 10
  6063 00004BBD F7F3                <2> 	div ebx
  6064 00004BBF 89C1                <2> 	mov ecx, eax
  6065 00004BC1 E8A2E3FFFF          <2> 	call showdec
  6066 00004BC6 BE[764C0000]        <2> 	mov esi, cpuclockmsg
  6067 00004BCB E83DD1FFFF          <2> 	call printquiet
  6068 00004BD0 8B0D[53020000]      <2> 	mov ecx, [memoryspace]
  6069 00004BD6 C1E914              <2> 	shr ecx, 20
  6070 00004BD9 41                  <2> 	inc ecx	;the reading is one MB behind
  6071 00004BDA E889E3FFFF          <2> 	call showdec
  6072 00004BDF BE[7B4C0000]        <2> 	mov esi, memoryspacemsg
  6073 00004BE4 E836D1FFFF          <2> 	call print
  6074                              <2> %ifdef sound.included
  6075 00004BE9 803D[705B0000]00    <2> 	cmp byte [SoundBlaster], 0
  6076 00004BF0 740A                <2> 	je .nosb
  6077 00004BF2 BE[584C0000]        <2> 	mov esi, soundblastermsg
  6078 00004BF7 E823D1FFFF          <2> 	call print
  6079                              <2> .nosb:
  6080                              <2> %endif
  6081 00004BFC C3                  <2> 	ret
  6082                              <2> 
  6083 00004BFD 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6084 00004C06 666F726D6174696F6E- <2>
  6085 00004C0F 3A0A00              <2>
  6086 00004C12 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6087 00004C1B 6B2053706163652055- <2>
  6088 00004C24 7365640A00          <2>
  6089 00004C29 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6090 00004C32 6F7279205370616365- <2>
  6091 00004C3B 20557365640A00      <2>
  6092 00004C42 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6093 00004C4B 6E666F726D6174696F- <2>
  6094 00004C54 6E3A0A00            <2>
  6095                              <2> %ifdef sound.included
  6096 00004C58 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6097 00004C61 746572204465746563- <2>
  6098 00004C6A 7465642E0A00        <2>
  6099                              <2> %endif
  6100 00004C70 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6101 00004C76 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6102 00004C7B 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6103 00004C84 2053706163650A00    <2>
  6104 00004C8C 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6105 00004C95 6D6F72792053706163- <2>
  6106 00004C9E 653A20307800        <2>
  6107                              <1> %include 'source/programs/time.asm'
  6108 00004CA4 082E30303030303030- <2> timenscache db 8,".000000000"
  6109 00004CAD 3030                <2>
  6110 00004CAF 200A00              <2> timenscacheend: db " ",10,0
  6111 00004CB2 00                  <2> istimeset db 0
  6112 00004CB3 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  6113 00004CBC 2063757272656E7420- <2>
  6114 00004CC5 554E49582074696D65- <2>
  6115 00004CCE 3A0A00              <2>
  6116 00004CD1 00<rept>            <2> timeinputbuffer times 12 db 0
  6117 00004CDD 00                  <2> timeinputbend: db 0
  6118                              <2> 
  6119 00004CDE FF2C74696D6500      <2> db 255,44,"time",0
  6120 00004CE5 803D[B24C0000]00    <2> 	cmp byte [istimeset], 0
  6121 00004CEC 753A                <2> 	jne timeisset
  6122 00004CEE BE[B34C0000]        <2> 	mov esi, settimemsg
  6123 00004CF3 E827D0FFFF          <2> 	call print
  6124 00004CF8 BE[D14C0000]        <2> 	mov esi, timeinputbuffer
  6125 00004CFD BF[DD4C0000]        <2> 	mov edi, timeinputbend
  6126 00004D02 E8F9D0FFFF          <2> 	call readline
  6127 00004D07 BE[D14C0000]        <2> 	mov esi, timeinputbuffer
  6128 00004D0C 31FF                <2> 	xor edi, edi
  6129 00004D0E E837E3FFFF          <2> 	call cnvrttxt
  6130 00004D13 890D[5D020000]      <2> 	mov [timeseconds], ecx
  6131 00004D19 31C9                <2> 	xor ecx, ecx
  6132 00004D1B 890D[61020000]      <2> 	mov [timenanoseconds], ecx
  6133 00004D21 C605[B24C0000]01    <2> 	mov byte [istimeset], 1
  6134                              <2> timeisset:
  6135 00004D28 8B0D[5D020000]      <2> 	mov ecx, [timeseconds]
  6136 00004D2E E835E2FFFF          <2> 	call showdec
  6137                              <2> 	
  6138 00004D33 8B0D[61020000]      <2> 	mov ecx, [timenanoseconds]
  6139 00004D39 BE[A44C0000]        <2> 	mov esi, timenscache
  6140 00004D3E C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6141 00004D45 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6142 00004D4C C6460A30            <2> 	mov byte [esi + 10], "0"
  6143 00004D50 BE[AF4C0000]        <2> 	mov esi, timenscacheend
  6144 00004D55 E8F1DFFFFF          <2> 	call convert
  6145 00004D5A BE[A44C0000]        <2> 	mov esi, timenscache
  6146 00004D5F E8A9CFFFFF          <2> 	call printquiet
  6147                              <2> 	
  6148 00004D64 E82D000000          <2> 	call time
  6149 00004D69 BE[624F0000]        <2> 	mov esi, timeshow
  6150 00004D6E E89ACFFFFF          <2> 	call printquiet
  6151 00004D73 BE[5E8C0000]        <2> 	mov esi, line
  6152 00004D78 E890CFFFFF          <2> 	call printquiet
  6153 00004D7D BE[6B4F0000]        <2> 	mov esi, dateshow
  6154 00004D82 E886CFFFFF          <2> 	call printquiet
  6155 00004D87 BE[5E8C0000]        <2> 	mov esi, line
  6156 00004D8C E87CCFFFFF          <2> 	call printquiet
  6157 00004D91 E9BC000000          <2> 	jmp findday
  6158                              <2> time:
  6159 00004D96 E84F010000          <2> 	call tstackput1
  6160 00004D9B B00A                <2> 	mov al,10			;Get RTC register A
  6161 00004D9D E879010000          <2> 	call tget1
  6162 00004DA2 A880                <2> 	test al,0x80			;Is update in progress?
  6163 00004DA4 75F0                <2> 	jne time				; yes, wait
  6164                              <2> 
  6165 00004DA6 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  6166 00004DA8 E86E010000          <2> 	call tget1
  6167 00004DAD A2[594F0000]        <2> 	mov [RTCtimeSecond],al
  6168                              <2> 
  6169 00004DB2 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  6170 00004DB4 E862010000          <2> 	call tget1
  6171 00004DB9 A2[5A4F0000]        <2> 	mov [RTCtimeMinute],al
  6172                              <2> 
  6173 00004DBE B004                <2> 	mov al,0x04			;Get hours (see notes)
  6174 00004DC0 E856010000          <2> 	call tget1
  6175 00004DC5 A2[5B4F0000]        <2> 	mov [RTCtimeHour],al
  6176                              <2> 
  6177 00004DCA B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  6178 00004DCC E84A010000          <2> 	call tget1
  6179 00004DD1 A2[5C4F0000]        <2> 	mov [RTCtimeDay],al
  6180                              <2> 
  6181 00004DD6 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  6182 00004DD8 E83E010000          <2> 	call tget1
  6183 00004DDD A2[5D4F0000]        <2> 	mov [RTCtimeMonth],al
  6184                              <2> 
  6185 00004DE2 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  6186 00004DE4 E832010000          <2> 	call tget1
  6187 00004DE9 A2[5E4F0000]        <2> 	mov [RTCtimeYear],al
  6188                              <2> 	
  6189 00004DEE BE[624F0000]        <2> 	mov esi, timeshow
  6190 00004DF3 8A2D[5B4F0000]      <2> 	mov ch, [RTCtimeHour]
  6191 00004DF9 E828010000          <2> 	call tput1
  6192 00004DFE 8A2D[5A4F0000]      <2> 	mov ch, [RTCtimeMinute]
  6193 00004E04 E81D010000          <2> 	call tput1
  6194 00004E09 8A2D[594F0000]      <2> 	mov ch, [RTCtimeSecond]
  6195 00004E0F E812010000          <2> 	call tput1
  6196 00004E14 BE[6B4F0000]        <2> 	mov esi, dateshow
  6197 00004E19 8A2D[5D4F0000]      <2> 	mov ch, [RTCtimeMonth]
  6198 00004E1F E802010000          <2> 	call tput1
  6199 00004E24 8A2D[5C4F0000]      <2> 	mov ch, [RTCtimeDay]
  6200 00004E2A E8F7000000          <2> 	call tput1
  6201 00004E2F B520                <2> 	mov ch, 0x20
  6202 00004E31 E8F0000000          <2> 	call tput1
  6203 00004E36 4E                  <2> 	dec esi
  6204 00004E37 8A2D[5E4F0000]      <2> 	mov ch, [RTCtimeYear]
  6205 00004E3D E8E4000000          <2> 	call tput1
  6206 00004E42 E8BD000000          <2> 	call tstackget1
  6207 00004E47 C3                  <2> 	ret
  6208 00004E48 BE[624F0000]        <2> 	mov esi, timeshow
  6209 00004E4D E8CDCEFFFF          <2> 	call print
  6210                              <2> ;;get day of week
  6211                              <2> ;;add these:
  6212                              <2> ;;century value
  6213                              <2> ;;last 2 digits of year
  6214                              <2> ;;last 2 digits of year right shifted twice
  6215                              <2> ;;month table value
  6216                              <2> ;;day of the month
  6217                              <2> ;;divide these by 7
  6218                              <2> ;;the remainder is the day
  6219                              <2> findday:
  6220 00004E52 31C0                <2> 	xor eax, eax
  6221                              <2> ;;first convert the values from BCD to hex
  6222 00004E54 A0[5C4F0000]        <2> 	mov al, [RTCtimeDay]
  6223 00004E59 E873000000          <2> 	call converttohex
  6224 00004E5E 8825[5F4F0000]      <2> 	mov [dayhex], ah
  6225 00004E64 A0[5D4F0000]        <2> 	mov al, [RTCtimeMonth]
  6226 00004E69 E863000000          <2> 	call converttohex
  6227 00004E6E 8825[604F0000]      <2> 	mov [monthhex], ah
  6228 00004E74 A0[5E4F0000]        <2> 	mov al, [RTCtimeYear]
  6229 00004E79 E853000000          <2> 	call converttohex
  6230 00004E7E 8825[614F0000]      <2> 	mov [yearhex], ah
  6231 00004E84 31C0                <2> 	xor eax, eax
  6232 00004E86 A0[614F0000]        <2> 	mov al, [yearhex]
  6233 00004E8B C0E802              <2> 	shr al, 2
  6234 00004E8E 0205[614F0000]      <2> 	add al, [yearhex]
  6235 00004E94 0506000000          <2> 	add eax, 6
  6236 00004E99 31DB                <2> 	xor ebx, ebx
  6237 00004E9B 8A1D[604F0000]      <2> 	mov bl, [monthhex]
  6238 00004EA1 FECB                <2> 	dec bl
  6239 00004EA3 81C3[804F0000]      <2> 	add ebx, month
  6240 00004EA9 31C9                <2> 	xor ecx, ecx
  6241 00004EAB 8A0B                <2> 	mov cl, [ebx]
  6242 00004EAD 01C8                <2> 	add eax, ecx
  6243 00004EAF 8A0D[5F4F0000]      <2> 	mov cl, [dayhex]
  6244 00004EB5 01C8                <2> 	add eax, ecx
  6245 00004EB7 66BB0700            <2> 	mov bx, 7
  6246 00004EBB 31D2                <2> 	xor edx, edx
  6247 00004EBD 66F7F3              <2> 	div bx
  6248 00004EC0 C1E202              <2> 	shl edx, 2
  6249 00004EC3 81C2[8C4F0000]      <2> 	add edx, day
  6250 00004EC9 8B32                <2> 	mov esi, [edx]
  6251 00004ECB E84FCEFFFF          <2> 	call print
  6252 00004ED0 C3                  <2> 	ret
  6253                              <2> 	
  6254                              <2> converttohex:
  6255 00004ED1 88C4                <2> 	mov ah, al
  6256 00004ED3 C0E804              <2> 	shr al, 4
  6257 00004ED6 C0E404              <2> 	shl ah, 4
  6258 00004ED9 C0EC04              <2> 	shr ah, 4
  6259 00004EDC 3C00                <2> 	cmp al, 0
  6260 00004EDE 7409                <2> 	je noconverttohex
  6261                              <2> converttohexlp:
  6262 00004EE0 80C40A              <2> 	add ah, 10
  6263 00004EE3 FEC8                <2> 	dec al
  6264 00004EE5 3C00                <2> 	cmp al, 0
  6265 00004EE7 75F7                <2> 	jne converttohexlp
  6266                              <2> noconverttohex:
  6267 00004EE9 C3                  <2> 	ret
  6268                              <2> 	
  6269                              <2> tstackput1:
  6270 00004EEA 8935[554F0000]      <2> 	mov [tstack + 20], esi
  6271 00004EF0 BE[414F0000]        <2> 	mov esi, tstack
  6272 00004EF5 8906                <2> 	mov [esi], eax
  6273 00004EF7 895E04              <2> 	mov [esi + 4], ebx
  6274 00004EFA 894E08              <2> 	mov [esi + 8], ecx
  6275 00004EFD 89560C              <2> 	mov [esi + 12], edx
  6276 00004F00 897E10              <2> 	mov [esi + 16], edi
  6277 00004F03 C3                  <2> 	ret
  6278                              <2> 	
  6279                              <2> tstackget1:
  6280 00004F04 BE[414F0000]        <2> 	mov esi, tstack
  6281 00004F09 8B06                <2> 	mov eax, [esi]
  6282 00004F0B 8B5E04              <2> 	mov ebx, [esi + 4]
  6283 00004F0E 8B4E08              <2> 	mov ecx, [esi + 8]
  6284 00004F11 8B560C              <2> 	mov edx, [esi + 12]
  6285 00004F14 8B7E10              <2> 	mov edi, [esi + 16]
  6286 00004F17 8B7614              <2> 	mov esi, [esi + 20]
  6287 00004F1A C3                  <2> 	ret
  6288                              <2> 	
  6289                              <2> tget1:
  6290 00004F1B 66BA7000            <2> 	mov dx, 0x70
  6291 00004F1F EE                  <2> 	out dx, al
  6292 00004F20 6642                <2> 	inc dx
  6293 00004F22 EC                  <2> 	in al, dx
  6294 00004F23 664A                <2> 	dec dx
  6295 00004F25 C3                  <2> 	ret
  6296                              <2> 	
  6297                              <2> tput1:
  6298 00004F26 66C1E904            <2> 	shr cx, 4
  6299 00004F2A B030                <2> 	mov al, 48
  6300 00004F2C 00E8                <2> 	add al, ch
  6301 00004F2E 8806                <2> 	mov [esi], al
  6302 00004F30 46                  <2> 	inc esi
  6303 00004F31 B030                <2> 	mov al, 48
  6304 00004F33 C0E904              <2> 	shr cl, 4
  6305 00004F36 00C8                <2> 	add al, cl
  6306 00004F38 8806                <2> 	mov [esi], al
  6307 00004F3A 81C602000000        <2> 	add esi, 2
  6308 00004F40 C3                  <2> 	ret
  6309                              <2> 		
  6310 00004F41 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  6311 00004F4A 000000000000000000- <2>
  6312 00004F53 000000000000        <2>
  6313 00004F59 00                  <2> 	RTCtimeSecond db 0
  6314 00004F5A 00                  <2> 	RTCtimeMinute db 0
  6315 00004F5B 00                  <2> 	RTCtimeHour db 0
  6316 00004F5C 00                  <2> 	RTCtimeDay db 0
  6317 00004F5D 00                  <2> 	RTCtimeMonth db 0
  6318 00004F5E 00                  <2> 	RTCtimeYear db 0
  6319 00004F5F 00                  <2> 	dayhex db 0
  6320 00004F60 00                  <2> 	monthhex db 0
  6321 00004F61 00                  <2> 	yearhex db 0
  6322 00004F62 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  6323 00004F6B 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  6324 00004F74 302000              <2>
  6325                              <2> 	oldcentury:	;;from 1700 to 1900
  6326 00004F77 040200              <2> 	db 4,2,0
  6327                              <2> 	century:	;;from 2000 to 2500
  6328 00004F7A 060402000604        <2> 	db 6,4,2,0,6,4
  6329                              <2> 	month:
  6330 00004F80 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  6331 00004F89 000305              <2>
  6332                              <2> 	day:
  6333 00004F8C [A84F0000]          <2> 	dd sunday
  6334 00004F90 [B04F0000]          <2> 	dd monday
  6335 00004F94 [B84F0000]          <2> 	dd tuesday
  6336 00004F98 [C14F0000]          <2> 	dd wednesday
  6337 00004F9C [CC4F0000]          <2> 	dd thursday
  6338 00004FA0 [D64F0000]          <2> 	dd friday
  6339 00004FA4 [DE4F0000]          <2> 	dd saturday
  6340                              <2> sunday:
  6341 00004FA8 53756E6461790A00    <2> 	db "Sunday",10,0
  6342                              <2> monday:
  6343 00004FB0 4D6F6E6461790A00    <2> 	db "Monday",10,0
  6344                              <2> tuesday:
  6345 00004FB8 547565736461790A00  <2> 	db "Tuesday",10,0
  6346                              <2> wednesday:
  6347 00004FC1 5765646E6573646179- <2> 	db "Wednesday",10,0
  6348 00004FCA 0A00                <2>
  6349                              <2> thursday:
  6350 00004FCC 54687572736461790A- <2> 	db "Thursday",10,0
  6351 00004FD5 00                  <2>
  6352                              <2> friday:
  6353 00004FD6 4672696461790A00    <2> 	db "Friday",10,0
  6354                              <2> saturday:
  6355 00004FDE 53617475726461790A- <2> 	db "Saturday",10,0
  6356 00004FE7 00                  <2>
  6357                              <1> %include 'source/programs/turnoff.asm'
  6358 00004FE8 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6359 00004FF1 00                  <2>
  6360                              <2> 	turnoff:
  6361 00004FF2 66BB[0D50]          <2> 			mov bx, shutdown
  6362 00004FF6 66891D[EE0C0000]    <2> 			mov [realmodeptr], bx
  6363 00004FFD BB[37500000]        <2> 			mov ebx, halt
  6364 00005002 891D[EA0C0000]      <2> 			mov [realmodereturn], ebx
  6365 00005008 E9C6BBFFFF          <2> 			jmp realmode
  6366                              <2> 
  6367                              <2> [BITS 16]
  6368                              <2> 		shutdown:
  6369 0000500D B453                <2> 			mov ah, 0x53
  6370 0000500F B004                <2> 			mov al, 4
  6371 00005011 31DB                <2> 			xor bx, bx
  6372 00005013 CD15                <2> 			int 0x15
  6373                              <2> 			
  6374 00005015 B453                <2> 			mov ah, 0x53
  6375 00005017 B001                <2> 			mov al, 1
  6376 00005019 31DB                <2> 			xor bx, bx
  6377 0000501B CD15                <2> 			int 0x15
  6378                              <2> 			
  6379 0000501D B453                <2> 			mov ah, 0x53
  6380 0000501F B008                <2> 			mov al, 8
  6381 00005021 BB0100              <2> 			mov bx, 1
  6382 00005024 B90100              <2> 			mov cx, 1
  6383 00005027 CD15                <2> 			int 0x15
  6384                              <2> 			
  6385 00005029 B453                <2> 			mov ah, 0x53
  6386 0000502B B007                <2> 			mov al, 7
  6387 0000502D BB0100              <2> 			mov bx, 1
  6388 00005030 B90300              <2> 			mov cx, 3
  6389 00005033 CD15                <2> 			int 0x15
  6390 00005035 EBFE                <2> 			jmp $
  6391                              <2> 			[BITS 32]
  6392 00005037 EBFE                <2> halt: jmp $
  6393                              <1> %include 'source/programs/wait.asm'
  6394 00005039 FF2C7761697400      <2> db 255,44,"wait",0
  6395                              <2> waitkey:
  6396 00005040 E8A8D1FFFF          <2> 		call getchar
  6397 00005045 C3                  <2> 		ret
  6398                              <1> %include 'source/programs/while.asm'
  6399 00005046 FF2C7768696C6500    <2> db 255,44,"while",0
  6400 0000504E 30C0                <2> whilecmd:  xor al, al
  6401 00005050 3805[F8B60000]      <2> 	cmp [BATCHISON], al
  6402 00005056 0F8419E7FFFF        <2> 	je near notbatch
  6403 0000505C 8B35[F4B60000]      <2> 	mov esi, [BATCHPOS]
  6404 00005062 81EE02000000        <2> 	sub esi, 2
  6405 00005068 4E                  <2> whilefnd: dec esi
  6406 00005069 8A06                <2> 	mov al, [esi]
  6407 0000506B 3C0A                <2> 	cmp al, 10
  6408 0000506D 0F840A000000        <2> 	je near whilefnd2
  6409 00005073 3C00                <2> 	cmp al, 0
  6410 00005075 0F8402000000        <2> 	je near whilefnd2
  6411 0000507B EBEB                <2> 	jmp whilefnd
  6412                              <2> whilefnd2:
  6413 0000507D 46                  <2> 	inc esi
  6414 0000507E 8935[FAB60000]      <2> 	mov [LOOPPOS], esi
  6415 00005084 C605[F9B60000]01    <2> 	mov BYTE [LOOPON], 1
  6416 0000508B BE[FECA0000]        <2> 	mov esi, buftxt
  6417 00005090 BB[FECA0000]        <2> 	mov ebx, buftxt
  6418 00005095 81C306000000        <2> 	add ebx, 6
  6419 0000509B E999F0FFFF          <2> 	jmp chkeqsn
  6420                              <1> progend:		;programs end here	
  6421                              <1> batchprogend:
  6422                                  	%include "source/hardware.asm"
  6423                              <1> %ifdef gui.included
  6424                              <1> 	%include "source/drivers/video/vesa.asm"
  6425                              <2> [BITS 16]
  6426                              <2> guiswitch:
  6427 000050A0 81F90000            <2> 	cmp cx, 0
  6428 000050A4 750B                <2> 	jne guiswitchdefnum
  6429 000050A6 B81200              <2> 	mov ax, 12h
  6430 000050A9 31DB                <2> 	xor bx, bx
  6431 000050AB CD10                <2> 	int 10h
  6432 000050AD E85100              <2> 	call guiloadagain
  6433                              <2> guiswitchnocando:
  6434 000050B0 C3                  <2> 	ret	;return without switching as mode number is bad
  6435                              <2> guiswitchdefnum:	;switch to a defined mode number
  6436 000050B1 B8004F              <2> 	mov ax, 0x4F00
  6437 000050B4 BF[7E52]            <2> 	mov di, VBEMODEBLOCK
  6438 000050B7 CD10                <2> 	int 10h
  6439 000050B9 BE[A052]            <2> 	mov si, reserved
  6440 000050BC 81EE0200            <2> 	sub si, 2
  6441                              <2> .loop:
  6442 000050C0 81C60200            <2> 	add si, 2
  6443 000050C4 81FE[7E53]          <2> 	cmp si, oemdata
  6444 000050C8 74E6                <2> 	je guiswitchnocando
  6445 000050CA 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6446 000050CE 74E0                <2> 	je guiswitchnocando
  6447 000050D0 390C                <2> 	cmp [si], cx
  6448 000050D2 75EC                <2> 	jne .loop
  6449 000050D4 8936[D851]          <2> 	mov [videomodecache], si
  6450 000050D8 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6451 000050DC B8014F              <2> 	mov ax, 0x4F01
  6452 000050DF BF[7E54]            <2> 	mov di, VBEMODEINFOBLOCK
  6453 000050E2 890E[D651]          <2> 	mov [vesamode], cx
  6454 000050E6 CD10                <2> 	int 10h
  6455 000050E8 E9CB00              <2> 	jmp selectedvesa
  6456                              <2> guiload:
  6457 000050EB BE[5652]            <2> 	mov si, bootmsg
  6458 000050EE E886AF              <2> 	call printrm
  6459 000050F1 31C0                <2> 	xor ax, ax
  6460 000050F3 CD16                <2> 	int 16h
  6461 000050F5 3C79                <2> 	cmp al, "y"
  6462 000050F7 0F8536AF            <2> 	jne near vgaset
  6463 000050FB BE[5D8C]            <2> 	mov si, crlf
  6464 000050FE E876AF              <2> 	call printrm
  6465                              <2> guiloadagain:
  6466 00005101 B8004F              <2> 	mov ax, 04F00h
  6467 00005104 BF[7E52]            <2> 	mov di, VBEMODEBLOCK
  6468 00005107 CD10                <2> 	int 10h
  6469 00005109 BE[A052]            <2> 	mov si, reserved
  6470 0000510C 81EE0200            <2> 	sub si, 2
  6471                              <2> findvideomodes:
  6472 00005110 81C60200            <2> 	add si, 2
  6473 00005114 8B0C                <2> 	mov cx, [si]
  6474 00005116 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6475 0000511A 0F840A00            <2> 	je near nextvmode
  6476 0000511E 81FE[7E53]          <2> 	cmp si, oemdata
  6477 00005122 0F830BAF            <2> 	jae near vgaset	;;kill if no valid list is found
  6478 00005126 EBE8                <2> 	jmp findvideomodes 	
  6479                              <2> ;;debug,shows vmodes available
  6480                              <2> nextvmode:
  6481 00005128 81EE0200            <2> 	sub si, 2
  6482 0000512C 81FE[A052]          <2> 	cmp si, reserved
  6483 00005130 0F82CDFF            <2> 	jb near guiloadagain
  6484 00005134 8B0C                <2> 	mov cx, [si]
  6485 00005136 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6486 0000513A 0F84EAFF            <2> 	je near nextvmode
  6487 0000513E 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  6488 00005142 B8014F              <2> 	mov ax, 04F01h
  6489 00005145 BF[7E54]            <2> 	mov di, VBEMODEINFOBLOCK
  6490 00005148 890E[D651]          <2> 	mov [vesamode], cx
  6491 0000514C CD10                <2> 	int 10h
  6492 0000514E A0[9754]            <2> 	mov al, [bitsperpixel]
  6493 00005151 3C10                <2> 	cmp al, 16
  6494 00005153 75D3                <2> 	jne nextvmode
  6495 00005155 8936[D851]          <2> 	mov [videomodecache], si
  6496 00005159 84E4                <2> 	test ah, ah
  6497 0000515B 0F842200            <2> 	jz near setvesamode
  6498 0000515F EBC7                <2> 	jmp nextvmode
  6499 00005161 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  6500 0000516A 20766964656F206D6F- <2>
  6501 00005173 6465204F4B3F28792F- <2>
  6502 0000517C 6E290D0A00          <2>
  6503                              <2> setvesamode:
  6504 00005181 8B0E[9054]          <2> 	mov cx, [resolutionx]
  6505 00005185 E85900              <2> 	call decshow
  6506 00005188 B078                <2> 	mov al, "x"
  6507 0000518A E8C100              <2> 	call char
  6508 0000518D 8B0E[9254]          <2> 	mov cx, [resolutiony]
  6509 00005191 E84D00              <2> 	call decshow
  6510 00005194 B040                <2> 	mov al, "@"
  6511 00005196 E8B500              <2> 	call char
  6512 00005199 31C9                <2> 	xor cx, cx
  6513 0000519B 8A0E[9754]          <2> 	mov cl, [bitsperpixel]
  6514 0000519F E83F00              <2> 	call decshow
  6515 000051A2 BE[6151]            <2> 	mov si, isthisvideook
  6516 000051A5 E8CFAE              <2> 	call printrm
  6517 000051A8 31C0                <2> 	xor ax, ax
  6518 000051AA CD16                <2> 	int 16h
  6519 000051AC 8B36[D851]          <2> 	mov si, [videomodecache]
  6520 000051B0 3C79                <2> 	cmp al, "y"
  6521 000051B2 0F8572FF            <2> 	jne near nextvmode
  6522                              <2> selectedvesa:
  6523 000051B6 8B16[9054]          <2> 	mov dx, [resolutionx]
  6524 000051BA 01D2                <2> 	add dx, dx
  6525 000051BC 8916[7E55]          <2> 	mov [resolutionx2], dx
  6526 000051C0 31D2                <2> 	xor dx, dx
  6527 000051C2 31C9                <2> 	xor cx, cx
  6528 000051C4 B8024F              <2> 	mov ax, 04F02h
  6529 000051C7 8B1E[D651]          <2> 	mov bx, [vesamode]
  6530 000051CB CD10                <2> 	int 10h		;;enter VESA mode
  6531 000051CD C606[389E]01        <2> 	mov byte [guion], 1
  6532 000051D2 E86CAE              <2> 	call getmemorysize;get the memory map after the video is initialized
  6533 000051D5 C3                  <2> 	ret
  6534                              <2> 	
  6535 000051D6 0000                <2> vesamode dw 0
  6536 000051D8 0000                <2> videomodecache dw 0
  6537                              <2> 
  6538 000051DA 0000000000          <2> dcnm db 0,0,0,0,0
  6539 000051DF 0000                <2> dcnmend db 0,0
  6540                              <2> 
  6541                              <2> 
  6542                              <2> decshow:
  6543 000051E1 BE[DA51]            <2> 	mov si, dcnm
  6544                              <2> decclear:
  6545 000051E4 B030                <2> 	mov al, "0"
  6546 000051E6 8804                <2> 	mov [si], al
  6547 000051E8 46                  <2> 	inc si
  6548 000051E9 81FE[DF51]          <2> 	cmp si, dcnmend
  6549 000051ED 76F5                <2> 	jbe decclear
  6550 000051EF 4E                  <2> 	dec si
  6551 000051F0 E81500              <2> 	call convertrm
  6552 000051F3 BE[DA51]            <2> 	mov si, dcnm
  6553                              <2> dectst:
  6554 000051F6 8A04                <2> 	mov al, [si]
  6555 000051F8 46                  <2> 	inc si
  6556 000051F9 81FE[DF51]          <2> 	cmp si, dcnmend
  6557 000051FD 7704                <2> 	ja dectstend
  6558 000051FF 3C30                <2> 	cmp al, "0"
  6559 00005201 76F3                <2> 	jbe dectst
  6560                              <2> dectstend:
  6561 00005203 4E                  <2> 	dec si
  6562 00005204 E870AE              <2> 	call printrm
  6563 00005207 C3                  <2> 	ret
  6564                              <2> 	
  6565                              <2> 	
  6566                              <2> convertrm:
  6567 00005208 4E                  <2> 	dec si
  6568 00005209 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  6569                              <2> cnvrtrm:
  6570 0000520B 89DE                <2> 	mov si, bx
  6571 0000520D 81EE0300            <2> 	sub si, 3
  6572 00005211 46                  <2> ten3rm:	inc si
  6573 00005212 81F9E803            <2> 	cmp cx, 1000
  6574 00005216 7208                <2> 	jb ten2rm
  6575 00005218 81E9E803            <2> 	sub cx, 1000
  6576 0000521C FE04                <2> 	inc byte [si]
  6577 0000521E EBEB                <2> 	jmp cnvrtrm
  6578 00005220 46                  <2> ten2rm:	inc si
  6579 00005221 81F96400            <2> 	cmp cx, 100
  6580 00005225 7208                <2> 	jb ten1rm
  6581 00005227 81E96400            <2> 	sub cx, 100
  6582 0000522B FE04                <2> 	inc byte [si]
  6583 0000522D EBDC                <2> 	jmp cnvrtrm
  6584 0000522F 46                  <2> ten1rm:	inc si
  6585 00005230 81F90A00            <2> 	cmp cx, 10
  6586 00005234 7208                <2> 	jb ten0rm
  6587 00005236 81E90A00            <2> 	sub cx, 10
  6588 0000523A FE04                <2> 	inc byte [si]
  6589 0000523C EBCD                <2> 	jmp cnvrtrm
  6590 0000523E 46                  <2> ten0rm:	inc si
  6591 0000523F 81F90100            <2> 	cmp cx, 1
  6592 00005243 7208                <2> 	jb tendnrm
  6593 00005245 81E90100            <2> 	sub cx, 1
  6594 00005249 FE04                <2> 	inc byte [si]
  6595 0000524B EBBE                <2> 	jmp cnvrtrm
  6596                              <2> tendnrm:
  6597 0000524D C3                  <2> 	ret
  6598                              <2> 
  6599                              <2>     char: 		    ;char must be in al
  6600 0000524E BB0700              <2>        mov bx, 07
  6601 00005251 B40E                <2> 	   mov ah, 0Eh
  6602 00005253 CD10                <2> 	   int 10h
  6603 00005255 C3                  <2> 	   ret
  6604                              <2> 
  6605 00005256 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  6606 0000525F 20746865204755493F- <2>
  6607 00005268 28792F6E2900        <2>
  6608                              <2> 
  6609                              <2> 
  6610                              <2> mcursor:
  6611 0000526E 01                  <2> 	db	00000001b
  6612 0000526F 81                  <2> 	db	10000001b
  6613 00005270 C1                  <2> 	db	11000001b
  6614 00005271 E1                  <2> 	db	11100001b
  6615 00005272 F1                  <2> 	db	11110001b
  6616 00005273 F9                  <2> 	db	11111001b
  6617 00005274 FD                  <2> 	db	11111101b
  6618 00005275 FF                  <2> 	db	11111111b
  6619 00005276 F9                  <2> 	db	11111001b
  6620 00005277 B9                  <2> 	db	10111001b
  6621 00005278 39                  <2> 	db	00111001b
  6622 00005279 1C                  <2> 	db	00011100b
  6623 0000527A 1C                  <2> 	db	00011100b
  6624 0000527B 0E                  <2> 	db	00001110b
  6625 0000527C 0E                  <2> 	db	00001110b
  6626 0000527D 0C                  <2> 	db	00001100b
  6627                              <2> mcursorend:
  6628                              <2> 
  6629                              <2> 
  6630                              <2> VBEMODEBLOCK:
  6631 0000527E 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  6632 00005282 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  6633 00005284 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  6634 00005288 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  6635 0000528C 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  6636 00005290 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  6637 00005292 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  6638 00005294 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  6639 00005298 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  6640 0000529C 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  6641 000052A0 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  6642 0000537E 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  6643                              <2> 
  6644                              <2> VBEMODEINFOBLOCK:
  6645                              <2> ;Mandatory information for all VBE revision
  6646 0000547E 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  6647 00005480 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  6648 00005481 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  6649 00005482 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  6650 00005484 00<rept>            <2> winsize          	times  2 db 0	;Window size
  6651 00005486 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  6652 00005488 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  6653 0000548A 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  6654 0000548E 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  6655                              <2> 
  6656                              <2> ;Mandatory information for VBE 1.2 and above
  6657 00005490 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  6658 00005492 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  6659 00005494 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  6660 00005495 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  6661 00005496 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  6662 00005497 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  6663 00005498 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  6664 00005499 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  6665 0000549A 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  6666 0000549B 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  6667 0000549C 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  6668                              <2> 
  6669                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  6670 0000549D 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  6671 0000549E 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  6672 0000549F 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  6673 000054A0 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  6674 000054A1 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  6675 000054A2 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  6676 000054A3 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  6677 000054A4 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  6678 000054A5 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  6679                              <2> 
  6680                              <2> ;Mandatory information for VBE 2.0 and above
  6681 000054A6 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  6682 000054AA 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  6683 000054AE 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  6684 000054B0 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  6685                              <2> 
  6686 0000557E 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  6687                              <2> VBEEND:
  6688                              <2> [BITS 32]
  6689                              <1> 	%include "source/drivers/input/mouse.asm"
  6690 00005582 00                  <2> mousedisabled db 0
  6691                              <2> 	
  6692                              <2> 	cursorgui:
  6693 00005583 803D[5A7F0000]01    <2> 		cmp byte [mouseon], 1
  6694 0000558A 0F8432000000        <2> 		je near mousedaemon
  6695 00005590 803D[389E0000]00    <2> 		cmp byte [guion], 0
  6696 00005597 0F8415070000        <2> 		je near entdown
  6697                              <2> 	initmouse:
  6698 0000559D 803D[389E0000]00    <2> 		cmp byte [guion], 0
  6699 000055A4 7405                <2> 		je noswmsposinit
  6700 000055A6 E88B110000          <2> 		call switchmousepos2
  6701                              <2> 	noswmsposinit:
  6702 000055AB E85D020000          <2> 	  	call PS2SET
  6703 000055B0 E886020000          <2> 		call ACTMOUS
  6704 000055B5 C605[5A7F0000]01    <2> 		mov byte [mouseon],1
  6705 000055BC E89F020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  6706                              <2> 		;call GETB
  6707                              <2> 				;;If the bytes are mixed up,
  6708                              <2> 				;;remove this line or add another of this line.
  6709                              <2> 	nomouse:
  6710 000055C1 C3                  <2> 		ret
  6711                              <2> 		
  6712                              <2> 	mousedaemon:
  6713 000055C2 803D[5A7F0000]01    <2> 		cmp byte [mouseon], 1
  6714 000055C9 75D2                <2> 		jne initmouse
  6715 000055CB E464                <2> 		in al, 64h ; Status
  6716 000055CD A820                <2> 		test al, 20h ; PS2-Mouse?
  6717 000055CF 0F8502000000        <2> 		jnz near moused
  6718 000055D5 F4                  <2> 		hlt
  6719 000055D6 C3                  <2> 		ret
  6720                              <2> 	moused:
  6721 000055D7 803D[82550000]01    <2> 		cmp byte [mousedisabled], 1
  6722 000055DE 74E1                <2> 		je nomouse
  6723 000055E0 E87B020000          <2> 		  call GETB
  6724 000055E5 88C3                <2> 		  mov  bl, al
  6725 000055E7 80E301              <2> 		  and  bl, 1
  6726 000055EA 881D[85580000]      <2> 		  mov  BYTE [LBUTTON], bl
  6727 000055F0 88C3                <2> 		  mov  bl, al
  6728 000055F2 80E302              <2> 		  and  bl, 2
  6729 000055F5 D0EB                <2> 		  shr  bl, 1
  6730 000055F7 881D[86580000]      <2> 		  mov  BYTE [RBUTTON], bl
  6731 000055FD 88C3                <2> 		  mov  bl, al
  6732 000055FF 80E304              <2> 		  and  bl, 4
  6733 00005602 C0EB02              <2> 		  shr  bl, 2
  6734 00005605 881D[87580000]      <2> 		  mov  BYTE [MBUTTON], bl
  6735 0000560B E850020000          <2> 		  call GETB
  6736 00005610 A2[88580000]        <2> 		  mov  BYTE [XCOORD], al
  6737 00005615 E846020000          <2> 		  call GETB
  6738 0000561A A2[89580000]        <2> 		  mov  BYTE [YCOORD], al
  6739                              <2> 
  6740                              <2> 	showpixelcursor:
  6741 0000561F 668B15[74570000]    <2> 		mov dx, [mousecursorposition]
  6742 00005626 668B0D[76570000]    <2> 		mov cx, [mousecursorposition + 2]
  6743 0000562D 668915[70570000]    <2> 		mov [lastmouseposition], dx
  6744 00005634 66890D[72570000]    <2> 		mov [lastmouseposition + 2], cx
  6745 0000563B A0[88580000]        <2> 		mov al, [XCOORD]
  6746 00005640 3C80                <2> 		cmp al, 128
  6747 00005642 730C                <2> 		jae subxcoord
  6748 00005644 00C0                <2> 		add al, al
  6749 00005646 30E4                <2> 		xor ah, ah
  6750 00005648 6601C2              <2> 		add dx, ax
  6751 0000564B E90B000000          <2> 		jmp subxcoorddn
  6752                              <2> 	subxcoord:
  6753 00005650 00C0                <2> 		add al, al
  6754 00005652 30DB                <2> 		xor bl, bl
  6755 00005654 28C3                <2> 		sub bl, al
  6756 00005656 30FF                <2> 		xor bh, bh
  6757 00005658 6629DA              <2> 		sub dx, bx
  6758                              <2> 	subxcoorddn:
  6759 0000565B 8A1D[89580000]      <2> 		mov bl, [YCOORD]
  6760 00005661 30C0                <2> 		xor al, al
  6761 00005663 28D8                <2> 		sub al, bl
  6762 00005665 3C80                <2> 		cmp al, 128
  6763 00005667 730A                <2> 		jae subycoord
  6764 00005669 30E4                <2> 		xor ah, ah
  6765 0000566B 6601C1              <2> 		add cx, ax
  6766 0000566E E909000000          <2> 		jmp subycoorddn
  6767                              <2> 	subycoord:
  6768 00005673 30DB                <2> 		xor bl, bl
  6769 00005675 28C3                <2> 		sub bl, al
  6770 00005677 30FF                <2> 		xor bh, bh
  6771 00005679 6629D9              <2> 		sub cx, bx
  6772                              <2> 	subycoorddn:
  6773 0000567C 6681FA204E          <2> 		cmp dx, 20000
  6774 00005681 7603                <2> 		jbe nooriginx2
  6775 00005683 6631D2              <2> 		xor dx, dx
  6776                              <2> 	nooriginx2:
  6777 00005686 6681F9204E          <2> 		cmp cx, 20000
  6778 0000568B 7603                <2> 		jbe nooriginy2
  6779 0000568D 6631C9              <2> 		xor cx, cx
  6780                              <2> 	nooriginy2:
  6781 00005690 6681FA0000          <2> 		cmp dx, 0
  6782 00005695 7415                <2> 		je nofixxcolumn2
  6783 00005697 663B15[7E550000]    <2> 		cmp dx, [resolutionx2]
  6784 0000569E 720C                <2> 		jb nofixxcolumn2
  6785 000056A0 668B15[7E550000]    <2> 		mov dx, [resolutionx2]
  6786 000056A7 6681EA0200          <2> 		sub dx, 2
  6787                              <2> 	nofixxcolumn2:
  6788 000056AC 6681F90000          <2> 		cmp cx, 0
  6789 000056B1 7415                <2> 		je nofixyrow2
  6790 000056B3 663B0D[92540000]    <2> 		cmp cx, [resolutiony]
  6791 000056BA 720C                <2> 		jb nofixyrow2
  6792 000056BC 668B0D[92540000]    <2> 		mov cx, [resolutiony]
  6793 000056C3 6681E90100          <2> 		sub cx, 1
  6794                              <2> 	nofixyrow2:
  6795 000056C8 668915[74570000]    <2> 		mov [mousecursorposition], dx
  6796 000056CF 66890D[76570000]    <2> 		mov [mousecursorposition + 2], cx
  6797 000056D6 803D[389E0000]00    <2> 		cmp byte [guion], 0
  6798 000056DD 0F8495000000        <2> 		je near termmouse
  6799 000056E3 E8EE0F0000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  6800 000056E8 803D[85580000]01    <2> 		cmp byte [LBUTTON], 1
  6801 000056EF 0F8428200000        <2> 		je near clickicon
  6802 000056F5 803D[86580000]01    <2> 		cmp byte [RBUTTON], 1
  6803 000056FC 0F841B200000        <2> 		je near clickicon
  6804 00005702 A0[0A770000]        <2> 		mov al, [pbutton]
  6805 00005707 C705[0D770000]0000- <2> 		mov dword [dragging], 0
  6806 0000570F 0000                <2>
  6807 00005711 3C00                <2> 		cmp al, 0
  6808 00005713 740F                <2> 		je nopreviousbutton
  6809 00005715 E8640F0000          <2> 		call clearmousecursor
  6810 0000571A E8BD120000          <2> 		call reloadallgraphics
  6811                              <2> 	windowtermcopyend:
  6812 0000571F E812100000          <2> 		call switchmousepos2
  6813                              <2> 	nopreviousbutton:
  6814 00005724 30C0                <2> 		xor al, al
  6815 00005726 A2[0A770000]        <2> 		mov [pbutton], al
  6816 0000572B A2[717C0000]        <2> 		mov [windrag], al
  6817 00005730 A0[85580000]        <2> 		mov al, [LBUTTON]
  6818 00005735 A2[0B770000]        <2> 		mov [pLBUTTON], al
  6819 0000573A A0[86580000]        <2> 		mov al, [RBUTTON]
  6820 0000573F A2[0C770000]        <2> 		mov [pRBUTTON], al
  6821 00005744 31D2                <2> 		xor edx, edx
  6822 00005746 668B15[74570000]    <2> 		mov dx, [mousecursorposition]
  6823 0000574D 668B0D[76570000]    <2> 		mov cx, [mousecursorposition + 2]
  6824 00005754 66BB18C7            <2> 		mov bx, 1100011100011000b
  6825 00005758 30E4                <2> 		xor ah, ah
  6826 0000575A B0FE                <2> 		mov al, 254
  6827 0000575C C605[07770000]01    <2> 		mov byte [showcursorfonton], 1
  6828 00005763 E83B180000          <2> 		call showfontvesa
  6829 00005768 C605[07770000]00    <2> 		mov byte [showcursorfonton], 0
  6830 0000576F C3                  <2> 		ret
  6831                              <2> 
  6832 00005770 00000000            <2> lastmouseposition dw 0,0
  6833 00005774 00000000            <2> mousecursorposition dw 0,0	
  6834                              <2> 
  6835                              <2> termmouse:
  6836 00005778 BE[14D20000]        <2> 		mov esi, videobuf
  6837 0000577D 31D2                <2> 		xor edx, edx
  6838 0000577F 668B15[70570000]    <2> 		mov dx, [lastmouseposition]
  6839 00005786 668B0D[72570000]    <2> 		mov cx, [lastmouseposition + 2]
  6840 0000578D 66A1[0B580000]      <2> 		mov ax, [cursorcache]
  6841 00005793 663D0000            <2> 		cmp ax, 0
  6842 00005797 7425                <2> 		je nocopycursorcache
  6843 00005799 66C1E104            <2> 		shl cx, 4
  6844 0000579D 66C1E203            <2> 		shl dx, 3
  6845 000057A1 01D6                <2> 		add esi, edx
  6846 000057A3 6631D2              <2> 		xor dx, dx
  6847 000057A6 8A15[3B240000]      <2> 		mov dl, [charxy]
  6848 000057AC 6641                <2> 		inc cx
  6849                              <2> termmousecplp1:
  6850 000057AE 01D6                <2> 		add esi, edx
  6851 000057B0 6649                <2> 		dec cx
  6852 000057B2 6681F90000          <2> 		cmp cx, 0
  6853 000057B7 75F5                <2> 		jne termmousecplp1
  6854 000057B9 29D6                <2> 		sub esi, edx
  6855 000057BB 668906              <2> 		mov [esi], ax
  6856                              <2> nocopycursorcache:
  6857 000057BE BE[14D20000]        <2> 		mov esi, videobuf
  6858 000057C3 31D2                <2> 		xor edx, edx
  6859 000057C5 668B15[74570000]    <2> 		mov dx, [mousecursorposition]
  6860 000057CC 668B0D[76570000]    <2> 		mov cx, [mousecursorposition + 2]
  6861 000057D3 66C1E104            <2> 		shl cx, 4
  6862 000057D7 66C1E203            <2> 		shl dx, 3
  6863 000057DB 01D6                <2> 		add esi, edx
  6864 000057DD 6631D2              <2> 		xor dx, dx
  6865 000057E0 8A15[3B240000]      <2> 		mov dl, [charxy]
  6866 000057E6 6641                <2> 		inc cx
  6867                              <2> termmousecplp2:
  6868 000057E8 01D6                <2> 		add esi, edx
  6869 000057EA 6649                <2> 		dec cx
  6870 000057EC 6681F90000          <2> 		cmp cx, 0
  6871 000057F1 75F5                <2> 		jne termmousecplp2
  6872 000057F3 29D6                <2> 		sub esi, edx
  6873 000057F5 668B06              <2> 		mov ax, [esi]
  6874 000057F8 66A3[0B580000]      <2> 		mov [cursorcache], ax
  6875 000057FE B080                <2> 		mov al, 128
  6876 00005800 B407                <2> 		mov ah, 7
  6877 00005802 668906              <2> 		mov [esi], ax
  6878 00005805 E89FCDFFFF          <2> 		call termcopy
  6879 0000580A C3                  <2> 		ret
  6880 0000580B 0000                <2> cursorcache db 0,0
  6881                              <2> 
  6882                              <2> PS2SET:
  6883 0000580D B0A8                <2>   mov  al, 0xa8		; enable mouse port
  6884 0000580F E664                <2>   out  0x64, al		; write to keyboardcontroller
  6885 00005811 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  6886 00005816 C3                  <2> ret
  6887                              <2> 
  6888                              <2> CHKPRT:
  6889 00005817 66B96400            <2>   mov  cx, 100
  6890                              <2>  .again:
  6891 0000581B E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6892 0000581D A802                <2>   test al, 2		; Check if input buffer is empty
  6893 0000581F 7402                <2>   je .go
  6894 00005821 E2F8                <2>   loop .again
  6895                              <2>  .go:
  6896 00005823 C3                  <2> ret
  6897                              <2> 
  6898                              <2> WMOUS:
  6899 00005824 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  6900 00005826 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6901 00005828 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6902 0000582D C3                  <2> ret
  6903                              <2> 
  6904                              <2> MBUFFUL:
  6905 0000582E 66B96400            <2>   mov cx, 100
  6906                              <2>  .mn:
  6907 00005832 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6908 00005834 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  6909 00005836 7402                <2>   jz  .mnn
  6910 00005838 E2F8                <2>   loop .mn
  6911                              <2>  .mnn:
  6912 0000583A C3                  <2> ret
  6913                              <2> 
  6914                              <2> 
  6915                              <2> ACTMOUS:
  6916 0000583B E8E4FFFFFF          <2>   call WMOUS
  6917 00005840 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  6918 00005842 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  6919 00005844 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6920 00005849 E801000000          <2>   call CHKMOUS		; check if a byte is available
  6921 0000584E C3                  <2> ret
  6922                              <2> 
  6923                              <2> CHKMOUS:
  6924 0000584F B300                <2>   mov  bl, 0
  6925 00005851 66B96400            <2>   mov cx, 100
  6926                              <2>  .vrd:
  6927 00005855 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6928 00005857 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  6929 00005859 7504                <2>   jnz .yy
  6930 0000585B E2F8                <2>   loop .vrd
  6931 0000585D B301                <2>   mov  bl, 1
  6932                              <2>  .yy:
  6933 0000585F C3                  <2> ret
  6934                              <2> 
  6935                              <2> GETB:
  6936                              <2>  .cagain:
  6937 00005860 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  6938 00005865 08DB                <2>   or bl, bl
  6939 00005867 75F7                <2>   jnz .cagain
  6940 00005869 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  6941 0000586B E664                <2>   out  0x64, al		; write to keyboardcontroller
  6942 0000586D E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6943 00005872 6631C0              <2>   xor  ax, ax
  6944 00005875 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  6945 00005877 88C2                <2>   mov  dl, al
  6946 00005879 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  6947 0000587B E664                <2>   out  0x64, al		; write to keyboardcontroller
  6948 0000587D E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6949 00005882 88D0                <2>   mov  al, dl
  6950 00005884 C3                  <2> ret
  6951                              <2> 
  6952 00005885 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  6953 00005886 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  6954 00005887 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  6955 00005888 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  6956 00005889 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  6957                              <1> %endif
  6958                              <1> %include "source/drivers/sound/pcspkr.asm"
  6959                              <2> ;PC Speaker Drivers
  6960                              <2> PCSpeakerRAW:
  6961 0000588A 60                  <2> 	pusha
  6962                              <2> nosoundrep:
  6963 0000588B 8B35[68020000]      <2> 	mov esi, [soundpos]
  6964 00005891 31C9                <2> 	xor ecx, ecx
  6965 00005893 668B0D[66020000]    <2> 	mov cx, [soundrepititions]
  6966 0000589A 6681F90000          <2> 	cmp cx, 0
  6967 0000589F 0F8548000000        <2> 	jne near donesetpitch
  6968 000058A5 668B0E              <2> 	mov cx, [esi]
  6969 000058A8 668B5E02            <2> 	mov bx, [esi + 2]
  6970 000058AC 66890D[66020000]    <2> 	mov [soundrepititions], cx
  6971 000058B3 81C604000000        <2> 	add esi, 4
  6972 000058B9 8935[68020000]      <2> 	mov [soundpos], esi
  6973 000058BF 3B35[6C020000]      <2> 	cmp esi, [soundendpos]
  6974 000058C5 7735                <2> 	ja stopsound
  6975 000058C7 66813D[66020000]00- <2> 	cmp word [soundrepititions], 0
  6976 000058CF 00                  <2>
  6977 000058D0 74B9                <2> 	je nosoundrep
  6978 000058D2 6681FB0000          <2> 	cmp bx, 0
  6979 000058D7 740F                <2> 	je nosoundplay
  6980 000058D9 E840000000          <2> 	call setpitch
  6981 000058DE E849000000          <2> 	call startsound
  6982 000058E3 E905000000          <2> 	jmp donesetpitch
  6983                              <2> nosoundplay:
  6984 000058E8 E846000000          <2> 	call killsound
  6985                              <2> donesetpitch:
  6986 000058ED 6649                <2> 	dec cx
  6987 000058EF 66890D[66020000]    <2> 	mov [soundrepititions], cx
  6988 000058F6 61                  <2> 	popa
  6989 000058F7 E9A9A9FFFF          <2> 	jmp timerinterrupt
  6990                              <2> stopsound:
  6991 000058FC 31C0                <2> 	xor eax, eax
  6992 000058FE 66A3[66020000]      <2> 	mov [soundrepititions], ax
  6993 00005904 A2[65020000]        <2> 	mov [soundon], al
  6994 00005909 A3[68020000]        <2> 	mov [soundpos], eax
  6995 0000590E A3[6C020000]        <2> 	mov [soundendpos], eax
  6996 00005913 E81B000000          <2> 	call killsound
  6997 00005918 61                  <2> 	popa
  6998 00005919 E987A9FFFF          <2> 	jmp timerinterrupt
  6999                              <2> 
  7000                              <2> 
  7001                              <2> setpitch:
  7002 0000591E B0B6                <2> 	mov al, 0xB6
  7003 00005920 E643                <2> 	out 0x43, al
  7004 00005922 6689D8              <2> 	mov ax, bx
  7005 00005925 E642                <2> 	out 0x42, al
  7006 00005927 88E0                <2> 	mov al, ah
  7007 00005929 E642                <2> 	out 0x42, al
  7008 0000592B C3                  <2> 	ret
  7009                              <2> startsound:
  7010 0000592C E461                <2> 	in al, 0x61
  7011 0000592E 0C03                <2> 	or al, 3
  7012 00005930 E661                <2> 	out 0x61, al
  7013 00005932 C3                  <2> 	ret
  7014                              <2> killsound:
  7015 00005933 E461                <2> 	in al, 0x61
  7016 00005935 24FC                <2> 	and al, 0xFC
  7017 00005937 E661                <2> 	out 0x61, al
  7018 00005939 C3                  <2> 	ret
  7019                              <2> 	
  7020                              <1> %ifdef sound.included
  7021                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7022                              <2> ;Sound Blaster Drivers
  7023                              <2> sblaster:
  7024                              <2> .init:
  7025 0000593A E8D7010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  7026 0000593F A2[705B0000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  7027 00005944 3C00                <2> 		cmp al, 0
  7028 00005946 7418                <2> 		je .noinit
  7029 00005948 B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  7030 0000594A E8FB010000          <2> 		call WriteDSP
  7031 0000594F B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  7032 00005951 E8B1010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  7033 00005956 BE[61590000]        <2> 		mov esi, .initmsg
  7034 0000595B E8BFC3FFFF          <2> 		call print
  7035                              <2> .noinit:
  7036 00005960 C3                  <2> 		ret
  7037 00005961 536F756E64626C6173- <2> .initmsg db "Soundblaster Initialized",10,0
  7038 0000596A 74657220496E697469- <2>
  7039 00005973 616C697A65640A00    <2>
  7040                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  7041 0000597B 813D[5A5B0000]0000- <2> 	cmp dword [Length0], 0
  7042 00005983 0000                <2>
  7043 00005985 0F8462000000        <2> 	je near .done
  7044 0000598B FF0D[5A5B0000]      <2> 	dec dword [Length0]
  7045 00005991 E908000000          <2> 	jmp .notodd
  7046                              <2> .oddlength:
  7047 00005996 31C9                <2> 	xor ecx, ecx
  7048 00005998 880D[595B0000]      <2> 	mov [OddLength], cl
  7049                              <2> .notodd:
  7050 0000599E 8B35[605B0000]      <2> 	mov esi, [NextMemLoc]
  7051 000059A4 31C9                <2> 	xor ecx, ecx
  7052 000059A6 668B0D[5E5B0000]    <2> 	mov cx, [Length1]
  7053 000059AD D1E9                <2> 	shr ecx, 1
  7054 000059AF 6641                <2> 	inc cx
  7055 000059B1 31DB                <2> 	xor ebx, ebx
  7056 000059B3 668B1D[685B0000]    <2> 	mov bx, [SegLoc]
  7057 000059BA 6601CB              <2> 	add bx, cx
  7058 000059BD 66891D[685B0000]    <2> 	mov [SegLoc], bx
  7059 000059C4 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  7060 000059CA 8935[645B0000]      <2> 	mov [MemLoc], esi
  7061 000059D0 89C8                <2> 	mov eax, ecx
  7062 000059D2 01F0                <2> 	add eax, esi
  7063 000059D4 A3[605B0000]        <2> 	mov [NextMemLoc], eax
  7064 000059D9 E833000000          <2> 	call DMACopy
  7065                              <2> 	;call DMAPlay
  7066 000059DE E8E0000000          <2> 	call PlayDSP
  7067 000059E3 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7068 000059E7 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7069 000059E8 E970A9FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  7070                              <2> .done:
  7071 000059ED 803D[595B0000]01    <2> 	cmp byte [OddLength], 1
  7072 000059F4 74A0                <2> 	je .oddlength
  7073 000059F6 31C0                <2> 	xor eax, eax
  7074 000059F8 66A3[5E5B0000]      <2> 	mov [Length1], ax
  7075 000059FE 66B8D000            <2> 	mov ax, 0xD0
  7076 00005A02 E843010000          <2> 	call WriteDSP
  7077 00005A07 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7078 00005A0B EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7079 00005A0C E94CA9FFFF          <2> 	jmp handled2
  7080                              <2> 	
  7081                              <2> DMACopy:
  7082 00005A11 66B80800            <2> 		mov ax, LINEAR_SEL
  7083 00005A15 8EE0                <2> 		mov fs, ax
  7084 00005A17 C1E902              <2> 		shr ecx, 2
  7085                              <2> .loop:
  7086 00005A1A 8B06                <2> 		mov eax, [esi]
  7087 00005A1C 648903              <2> 		mov [fs:ebx], eax
  7088 00005A1F 81C604000000        <2> 		add esi, 4
  7089 00005A25 81C304000000        <2> 		add ebx, 4
  7090 00005A2B E2ED                <2> 		loop .loop
  7091 00005A2D 66B83000            <2> 		mov ax, NEW_DATA_SEL
  7092 00005A31 8EE0                <2> 		mov fs, ax
  7093 00005A33 C3                  <2> 		ret
  7094                              <2> 		
  7095                              <2> 
  7096                              <2> DMAPlay:    ;uses eax ebx edx
  7097 00005A34 C605[6A5B0000]00    <2> 		mov	byte [Page1],00h
  7098                              <2> 
  7099 00005A3B B005                <2> 		mov	al,(Channel+4)
  7100 00005A3D 66BA0A00            <2> 		mov	dx,0Ah
  7101 00005A41 EE                  <2> 		out	dx,al
  7102 00005A42 30C0                <2> 		xor	al,al
  7103 00005A44 66BA0C00            <2> 		mov	dx,0Ch
  7104 00005A48 EE                  <2> 		out	dx,al
  7105 00005A49 B059                <2> 		mov	al,ModeReg
  7106 00005A4B 66BA0B00            <2> 		mov	dx,0Bh
  7107 00005A4F EE                  <2> 		out	dx,al
  7108 00005A50 B800000800          <2> 		mov	eax,0x80000
  7109 00005A55 66BA0200            <2> 		mov	dx,AddPort
  7110 00005A59 EE                  <2> 		out	dx,al
  7111 00005A5A 86C4                <2> 		xchg al,ah
  7112 00005A5C EE                  <2> 		out	dx,al
  7113 00005A5D B800000800          <2> 		mov	eax,0x80000
  7114 00005A62 89C2                <2> 		mov	edx,eax
  7115 00005A64 2500000100          <2> 		and	eax,65536
  7116 00005A69 7406                <2> 		jz	MemLocN1
  7117 00005A6B FE05[6A5B0000]      <2> 		inc	byte [Page1]
  7118                              <2> MemLocN1:
  7119 00005A71 89D0                <2> 		mov	eax,edx
  7120 00005A73 2500000200          <2> 		and	eax,131072
  7121 00005A78 7407                <2> 		jz	MemLocN2
  7122 00005A7A 8005[6A5B0000]02    <2> 		add	byte [Page1],02
  7123                              <2> MemLocN2:
  7124 00005A81 89D0                <2> 		mov	eax,edx
  7125 00005A83 2500000400          <2> 		and	eax,262144
  7126 00005A88 7407                <2> 		jz	MemLocN3
  7127 00005A8A 8005[6A5B0000]04    <2> 		add	byte [Page1],04
  7128                              <2> MemLocN3:
  7129 00005A91 89D0                <2> 		mov	eax,edx
  7130 00005A93 2500000800          <2> 		and	eax,524288
  7131 00005A98 7407                <2> 		jz	MemLocN4
  7132 00005A9A 8005[6A5B0000]08    <2> 		add	byte [Page1],08
  7133                              <2> MemLocN4:
  7134 00005AA1 66BA8300            <2> 		mov	dx,PgPort
  7135 00005AA5 A0[6A5B0000]        <2> 		mov	al,[Page1]
  7136 00005AAA EE                  <2> 		out	dx,al
  7137 00005AAB 66BA0300            <2> 		mov	dx,LenPort
  7138 00005AAF 66A1[5E5B0000]      <2> 		mov	ax,[Length1]
  7139 00005AB5 6648                <2> 		dec ax
  7140 00005AB7 EE                  <2> 		out	dx,al
  7141 00005AB8 86C4                <2> 		xchg al,ah
  7142 00005ABA EE                  <2> 		out	dx,al
  7143 00005ABB 66BA0A00            <2> 		mov	dx,0Ah
  7144 00005ABF B001                <2> 		mov	al,Channel
  7145 00005AC1 EE                  <2> 		out	dx,al
  7146 00005AC2 C3                  <2> 		ret
  7147                              <2> 		
  7148                              <2> PlayDSP:
  7149 00005AC3 B040                <2> 		mov	al,40h
  7150 00005AC5 E880000000          <2> 		call WriteDSP
  7151 00005ACA 31D2                <2> 		xor	edx,edx
  7152 00005ACC B840420F00          <2> 		mov	eax,1000000
  7153 00005AD1 8B1D[6B5B0000]      <2> 		mov	ebx,[Freq]
  7154 00005AD7 F7F3                <2> 		div	ebx
  7155 00005AD9 89C3                <2> 		mov	ebx,eax
  7156 00005ADB B800010000          <2> 		mov	eax,256
  7157 00005AE0 29D8                <2> 		sub	eax,ebx
  7158 00005AE2 E863000000          <2> 		call WriteDSP
  7159 00005AE7 A0[6F5B0000]        <2> 		mov	al,[WAVEMode]	;write the mode
  7160 00005AEC E859000000          <2> 		call WriteDSP
  7161 00005AF1 66A1[5E5B0000]      <2> 		mov	ax,[Length1]
  7162 00005AF7 66D1E8              <2> 		shr ax, 1
  7163 00005AFA E84B000000          <2> 		call WriteDSP
  7164 00005AFF 86C4                <2> 		xchg al,ah
  7165 00005B01 E844000000          <2> 		call WriteDSP
  7166 00005B06 C3                  <2> 		ret
  7167                              <2> 
  7168                              <2> MstrVol:    ;uses ax dx
  7169 00005B07 6650                <2> 	   push ax
  7170 00005B09 66BA2402            <2> 	   mov	dx,(BasePort+4)
  7171 00005B0D B022                <2> 	   mov	al,22h
  7172 00005B0F EE                  <2> 	   out	dx,al
  7173 00005B10 6658                <2> 	   pop	ax
  7174 00005B12 6642                <2> 	   inc	dx
  7175 00005B14 EE                  <2> 	   out	dx,al
  7176 00005B15 C3                  <2> 	   ret
  7177                              <2> 	   
  7178                              <2> ResetDSP:   ; uses cx dx
  7179 00005B16 66BA2602            <2> 			mov	dx,(BasePort+6)
  7180 00005B1A B001                <2> 			mov	al,01
  7181 00005B1C EE                  <2> 			out	dx,al
  7182 00005B1D 66B93200            <2> 			mov	cx,50
  7183 00005B21 EC                  <2> WaitIt1:	in	al,dx
  7184 00005B22 E2FD                <2> 			loop WaitIt1
  7185 00005B24 30C0                <2> 			xor	al,al
  7186 00005B26 EE                  <2> 			out	dx,al
  7187 00005B27 66B93200            <2> 			mov	cx,50
  7188 00005B2B EC                  <2> WaitIt2:	in	al,dx
  7189 00005B2C E2FD                <2> 			loop WaitIt2
  7190 00005B2E B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  7191 00005B30 66BA2E02            <2> 			mov	dx,(BasePort+14)
  7192 00005B34 EC                  <2> 			in	al,dx
  7193 00005B35 2480                <2> 			and	al,80h
  7194 00005B37 3C80                <2> 			cmp	al,80h
  7195 00005B39 750C                <2> 			jne	ResetErr
  7196 00005B3B 66BA2A02            <2> 			mov	dx,(BasePort+10)
  7197 00005B3F EC                  <2> 			in	al,dx
  7198 00005B40 3CAA                <2> 			cmp	al,0AAh
  7199 00005B42 7503                <2> 			jne	ResetErr
  7200 00005B44 B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  7201 00005B46 C3                  <2> 			ret
  7202 00005B47 30C0                <2> ResetErr:	xor al, al
  7203 00005B49 C3                  <2> 			ret
  7204                              <2> 
  7205                              <2> WriteDSP:   ;uses ax dx
  7206 00005B4A 6650                <2> 		push ax
  7207 00005B4C 66BA2C02            <2> 		mov	dx,(BasePort+12)
  7208 00005B50 EC                  <2> WaitIt:	in	al,dx
  7209 00005B51 2480                <2> 		and	al,80h
  7210 00005B53 75FB                <2> 		jnz	WaitIt
  7211 00005B55 6658                <2> 		pop	ax
  7212 00005B57 EE                  <2> 		out	dx,al
  7213 00005B58 C3                  <2> 		ret
  7214                              <2> 
  7215 00005B59 00                  <2> OddLength db 0
  7216 00005B5A 00000000            <2> Length0 dd	0
  7217 00005B5E 0000                <2> Length1	dw  0
  7218 00005B60 00000000            <2> NextMemLoc dd 0
  7219 00005B64 00000000            <2> MemLoc	dd  0
  7220 00005B68 0000                <2> SegLoc  dw 0
  7221 00005B6A 00                  <2> Page1	db  0
  7222 00005B6B 00000000            <2> Freq	dd	0
  7223 00005B6F 14                  <2> WAVEMode db 14h
  7224                              <2> PgPort	equ 83h
  7225                              <2> AddPort	equ 02h
  7226                              <2> LenPort	equ 03h
  7227                              <2> ModeReg	equ 59h
  7228                              <2> Channel	equ 01h
  7229                              <2> BasePort	equ 220h
  7230 00005B70 00                  <2> SoundBlaster	db 0
  7231                              <1> %endif
  7232                              <1> %ifdef io.serial
  7233                              <1> 	%include "source/drivers/input/serial.asm"
  7234                              <1> %else
  7235                              <1> 	%include "source/drivers/input/keyboard.asm"
  7236 00005B71 00                  <2> specialkey db 0
  7237 00005B72 00                  <2> charregion db 0
  7238                              <2> waitforinput:		;;this is basically the idle process
  7239                              <2> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  7240                              <2> 					;;this lets the cpu stay at close to 0% instead of 100%
  7241 00005B73 6631C0              <2> 	xor ax, ax
  7242 00005B76 A0[7A640000]        <2> 	mov al, [threadson]
  7243 00005B7B 8825[7A640000]      <2> 	mov [threadson], ah
  7244 00005B81 FB                  <2> 	sti
  7245 00005B82 F4                  <2> 	hlt
  7246 00005B83 A2[7A640000]        <2> 	mov [threadson], al
  7247 00005B88 3A25[3D220000]      <2> 	cmp ah, [trans]
  7248 00005B8E 7401                <2> 	je getkey
  7249 00005B90 C3                  <2> 	ret
  7250                              <2> getkey:
  7251 00005B91 31C0                <2> 		xor eax, eax
  7252 00005B93 A2[715B0000]        <2> 		mov [specialkey], al
  7253 00005B98 66A3[3B220000]      <2> 		mov [lastkey], ax
  7254 00005B9E E464                <2> 		in al, 64h ; Status
  7255                              <2> 	%ifdef gui.included
  7256 00005BA0 A820                <2> 		test al, 20h ; PS2-Mouse?
  7257 00005BA2 0F852FFAFFFF        <2> 		jnz near moused
  7258                              <2> 	%endif
  7259 00005BA8 A801                <2> 		test al, 1 
  7260 00005BAA 74C7                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7261                              <2> 	calckey:
  7262 00005BAC E460                <2> 		in al, 60h
  7263 00005BAE 88C4                <2> 		mov ah, al
  7264 00005BB0 30C0                <2> 		xor al, al
  7265 00005BB2 8825[3C220000]      <2> 		mov [lastkey + 1], ah
  7266 00005BB8 88E0                <2> 		mov al, ah
  7267 00005BBA BF[535D0000]        <2> 		mov edi, scancode
  7268                              <2> 	searchscan: 
  7269 00005BBF 3C3A                <2> 		cmp al, 3Ah
  7270 00005BC1 731A                <2> 		jae scanother
  7271 00005BC3 30E4                <2> 		xor ah, ah
  7272 00005BC5 C0E002              <2> 		shl al, 2
  7273 00005BC8 01C7                <2> 		add edi, eax
  7274 00005BCA D0E8                <2> 		shr al, 1
  7275 00005BCC 01C7                <2> 		add edi, eax
  7276 00005BCE D0E8                <2> 		shr al, 1
  7277 00005BD0 8A27                <2> 		mov ah, [edi]
  7278 00005BD2 80FC00              <2> 		cmp ah, 0
  7279 00005BD5 7406                <2> 		je scanother
  7280 00005BD7 E9D7000000          <2> 		jmp scanfound
  7281 00005BDC 00                  <2> uppercase db 0
  7282                              <2> scanother:
  7283 00005BDD 88C4                <2> 		mov ah, al
  7284 00005BDF 30C0                <2> 		xor al, al
  7285 00005BE1 66A3[3B220000]      <2> 		mov [lastkey], ax
  7286 00005BE7 80FCE0              <2> 		cmp ah, 0E0h
  7287 00005BEA 0F847D000000        <2> 		je near getkeyspecial
  7288 00005BF0 803D[715B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7289 00005BF7 752B                <2> 		jne nospecialkey
  7290 00005BF9 80FC38              <2> 		cmp ah, 38h
  7291 00005BFC 0F84A0000000        <2> 		je near alton
  7292 00005C02 80FCB8              <2> 		cmp ah, 0B8h
  7293 00005C05 0F849F000000        <2> 		je near altoff
  7294 00005C0B 80FC1D              <2> 		cmp ah, 1Dh
  7295 00005C0E 0F847E000000        <2> 		je near ctron
  7296 00005C14 80FC9D              <2> 		cmp ah, 9Dh
  7297 00005C17 0F847D000000        <2> 		je near ctroff
  7298 00005C1D 66A3[3B220000]      <2> 		mov [lastkey], ax
  7299 00005C23 C3                  <2> 		ret
  7300                              <2> nospecialkey:
  7301 00005C24 80FC2A              <2> 		cmp ah, 2Ah
  7302 00005C27 0F8455000000        <2> 		je near shifton
  7303 00005C2D 80FC36              <2> 		cmp ah, 36h
  7304 00005C30 0F844C000000        <2> 		je near shifton
  7305 00005C36 80FC1C              <2> 		cmp ah, 1Ch
  7306 00005C39 0F8473000000        <2> 		je near entdown
  7307 00005C3F 80FCAA              <2> 		cmp ah, 0AAh
  7308 00005C42 0F8442000000        <2> 		je near shiftoff
  7309 00005C48 80FCB6              <2> 		cmp ah, 0B6h
  7310 00005C4B 0F8439000000        <2> 		je near shiftoff
  7311 00005C51 80FC3A              <2> 		cmp ah, 3Ah
  7312 00005C54 0F84A5000000        <2> 		je near capslock
  7313 00005C5A 80FC45              <2> 		cmp ah, 0x45
  7314 00005C5D 0F84AD000000        <2> 		je near numlock
  7315 00005C63 80FC46              <2> 		cmp ah, 0x46
  7316 00005C66 0F84BC000000        <2> 		je near scrolllock
  7317 00005C6C C3                  <2> 		ret
  7318                              <2> 	getkeyspecial:
  7319 00005C6D C605[715B0000]E0    <2> 		mov byte [specialkey], 0xE0
  7320 00005C74 E933FFFFFF          <2> 		jmp calckey
  7321                              <2> 	shift:
  7322 00005C79 A0[DC5B0000]        <2> 		mov al, [uppercase]
  7323 00005C7E 3C01                <2> 		cmp al, 1
  7324 00005C80 7308                <2> 		jae shiftoff
  7325                              <2> 	shifton:
  7326 00005C82 C605[DC5B0000]01    <2> 		mov byte [uppercase], 1
  7327 00005C89 C3                  <2> 		ret
  7328                              <2> 	shiftoff:
  7329 00005C8A C605[DC5B0000]00    <2> 		mov byte [uppercase], 0
  7330 00005C91 C3                  <2> 		ret
  7331                              <2> 	ctron:
  7332 00005C92 C605[FE5C0000]01    <2> 		mov byte [ctrkey], 1
  7333 00005C99 C3                  <2> 		ret
  7334                              <2> 	ctroff:
  7335 00005C9A C605[FE5C0000]00    <2> 		mov byte [ctrkey], 0
  7336 00005CA1 C3                  <2> 		ret
  7337                              <2> 	alton:
  7338 00005CA2 C605[FD5C0000]01    <2> 		mov byte [altkey], 1
  7339 00005CA9 C3                  <2> 		ret
  7340                              <2> 	altoff:
  7341 00005CAA C605[FD5C0000]00    <2> 		mov byte [altkey], 0
  7342 00005CB1 C3                  <2> 		ret
  7343                              <2> 	entdown:
  7344 00005CB2 C3                  <2> 		ret
  7345                              <2> 	scanfound:
  7346 00005CB3 81C704000000        <2> 		add edi, 4
  7347 00005CB9 803D[FE5C0000]01    <2> 		cmp byte [ctrkey], 1
  7348 00005CC0 731B                <2> 		jae altin
  7349 00005CC2 81EF04000000        <2> 		sub edi, 4
  7350 00005CC8 81C702000000        <2> 		add edi, 2
  7351 00005CCE 803D[FD5C0000]01    <2> 		cmp byte [altkey], 1
  7352 00005CD5 7306                <2> 		jae altin
  7353 00005CD7 81EF02000000        <2> 		sub edi, 2
  7354                              <2> altin:
  7355 00005CDD 81C701000000        <2> 		add edi, 1
  7356 00005CE3 803D[DC5B0000]01    <2> 		cmp byte [uppercase], 1
  7357 00005CEA 7306                <2> 		jae uppercaseon
  7358 00005CEC 81EF01000000        <2> 		sub edi, 1
  7359                              <2> uppercaseon:
  7360 00005CF2 8A07                <2> 		mov al,[edi]
  7361 00005CF4 A2[3B220000]        <2> 		mov [lastkey], al
  7362 00005CF9 C3                  <2> 		ret
  7363                              <2> 		
  7364 00005CFA 00                  <2> keyboardstatus db 0
  7365 00005CFB 00                  <2> numlockstatus db 0
  7366 00005CFC 00                  <2> scrolllockstatus db 0
  7367 00005CFD 00                  <2> altkey db 0
  7368 00005CFE 00                  <2> ctrkey db 0
  7369                              <2> 	capslock:
  7370 00005CFF 8035[FA5C0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7371 00005D06 E835000000          <2> 		call updatekblights
  7372 00005D0B E969FFFFFF          <2> 		jmp shift
  7373                              <2> 		
  7374                              <2> 	numlock:
  7375 00005D10 8035[FA5C0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7376 00005D17 8035[FB5C0000]01    <2> 		xor byte [numlockstatus], 1
  7377 00005D1E E81D000000          <2> 		call updatekblights
  7378 00005D23 E969FEFFFF          <2> 		jmp getkey
  7379                              <2> 	
  7380                              <2> 	scrolllock:
  7381 00005D28 8035[FA5C0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7382 00005D2F 8035[FC5C0000]01    <2> 		xor byte [scrolllockstatus], 1
  7383 00005D36 E805000000          <2> 		call updatekblights
  7384 00005D3B E951FEFFFF          <2> 		jmp getkey
  7385                              <2> 		
  7386                              <2> 	updatekblights:
  7387 00005D40 B0ED                <2> 		mov al, 0xED
  7388 00005D42 66BA6000            <2> 		mov dx, 0x60
  7389 00005D46 EE                  <2> 		out dx, al
  7390                              <2> 	chkkbdack:
  7391 00005D47 EC                  <2> 		in al, dx
  7392 00005D48 3CFA                <2> 		cmp al, 0xFA
  7393 00005D4A 75FB                <2> 		jne chkkbdack
  7394 00005D4C A0[FA5C0000]        <2> 		mov al, [keyboardstatus]
  7395 00005D51 EE                  <2> 		out dx, al
  7396 00005D52 C3                  <2> 		ret
  7397                              <2> 		
  7398                              <2> scancode:
  7399                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY
  7400 00005D53 000000000000        <2> 	db 0,0,0,0,0,0				;0h
  7401 00005D59 000000000000        <2> 	db 0,0,0,0,0,0				;1h
  7402 00005D5F 3121AD130000        <2> 	db '1','!',0xAD,0x13,0,0	;2h
  7403 00005D65 3240FDFB0000        <2> 	db '2','@',0xFD,0xFB,0,0	;3h
  7404 00005D6B 332300000000        <2> 	db '3','#',0,0,0,0			;4h
  7405 00005D71 34249B9C0000        <2> 	db '4','$',0x9B,0x9C,0,0	;5h
  7406 00005D77 3525EE000000        <2> 	db '5','%',0xEE,0,0,0		;6h
  7407 00005D7D 365EACFC0000        <2> 	db '6','^',0xAC,0xFC,0,0	;7h
  7408 00005D83 3726AB000000        <2> 	db '7','&',0xAB,0,0,0		;8h
  7409 00005D89 382AEC070000        <2> 	db '8','*',0xEC,0x7,0,0		;9h
  7410 00005D8F 392800000000        <2> 	db '9','(',0,0,0,0			;0Ah
  7411 00005D95 302900000000        <2> 	db '0',')',0,0,0,0			;0Bh
  7412 00005D9B 2D5F9DF10000        <2> 	db '-','_',0x9D,0xF1,0,0	;0Ch
  7413 00005DA1 3D2BF7F60000        <2> 	db '=','+',0xF7,0xF6,0,0	;0Dh
  7414 00005DA7 080800000000        <2> 	db 8,8,0,0,0,0				;0Eh
  7415 00005DAD 000000000000        <2> 	db 0,0,0,0,0,0				;0Fh
  7416 00005DB3 7151848E0000        <2> 	db 'q','Q',0x84,0x8E,0,0	;10h
  7417 00005DB9 7757868F0000        <2> 	db 'w','W',0x86,0x8F,0,0	;11h
  7418 00005DBF 65458290EE45        <2> 	db 'e','E',0x82,0x90,0xEE,'E'	;12h
  7419 00005DC5 7252898A7050        <2> 	db 'r','R',0x89,0x8A,'p','P'	;13h
  7420 00005DCB 7454819AE754        <2> 	db 't','T',0x81,0x9A,0xE7,'T'	;14h
  7421 00005DD1 795998007559        <2> 	db 'y','Y',0x98,0,'u','Y'	;15h
  7422 00005DD7 7555A3970000        <2> 	db 'u','U',0xA3,0x97,0,0		;16h
  7423 00005DDD 6949A18D6949        <2> 	db 'i','I',0xA1,0x8D,'i','I'	;17h
  7424 00005DE3 6F4FA29577EA        <2> 	db 'o','O',0xA2,0x95,'w',0xEA	;18h
  7425 00005DE9 70509499E3EF        <2> 	db 'p','P',0x94,0x99,0xE3,0xEF	;19h
  7426 00005DEF 5B7BF4000000        <2> 	db '[','{',0xF4,0,0,0		;1Ah
  7427 00005DF5 5D7DF5000000        <2> 	db ']','}',0xF5,0,0,0		;1Bh
  7428 00005DFB 000000000000        <2> 	db 0,0,0,0,0,0				;1Ch
  7429 00005E01 000000000000        <2> 	db 0,0,0,0,0,0				;1Dh
  7430 00005E07 6141A085E041        <2> 	db 'a','A',0xA0,133,224,'A'	;1Eh
  7431 00005E0D 73531500E5E4        <2> 	db 's','S',21,0,229,228		;1Fh
  7432 00005E13 6444F800EB7F        <2> 	db 'd','D',0xF8,0,235,127	;20h
  7433 00005E19 66469F0CEDE8        <2> 	db 'f','F',159,0xC,237,232	;21h
  7434 00005E1F 6747000079E2        <2> 	db 'g','G',0,0,'y',226		;22h
  7435 00005E25 684800006E48        <2> 	db 'h','H',0,0,'n','H'		;23h
  7436 00005E2B 6A4A00000000        <2> 	db 'j','J',0,0,0,0			;24h
  7437 00005E31 6B4B00006B4B        <2> 	db 'k','K',0,0,'k','K'		;25h
  7438 00005E37 6C4C0000E9E9        <2> 	db 'l','L',0,0,233,233		;26h
  7439 00005E3D 3B3A14DC0000        <2> 	db ';',':',20,0xDC,0,0			;27h
  7440 00005E43 272200000000        <2> 	db 27h,22h,0,0,0,0			;28h
  7441 00005E49 607E00000000        <2> 	db '`','~',0,0,0,0			;29h
  7442 00005E4F 000000000000        <2> 	db 0,0,0,0,0,0				;2Ah
  7443 00005E55 5C7CAAB30000        <2> 	db 92,'|',170,179,0,0		;2Bh
  7444 00005E5B 7A5A91927A5A        <2> 	db 'z','Z',145,146,'z','Z'	;2Ch
  7445 00005E61 7858000000F0        <2> 	db 'x','X',0,0,0,240		;2Dh
  7446 00005E67 634387800000        <2> 	db 'c','C',135,128,0,0		;2Eh
  7447 00005E6D 765600000000        <2> 	db 'v','V',0,0,0,0			;2Fh
  7448 00005E73 62420000E142        <2> 	db 'b','B',0,0,225,'B'		;30h
  7449 00005E79 6E4EA4A5764E        <2> 	db 'n','N',0xA4,0xA5,'v','N'	;31h
  7450 00005E7F 6D4D0E0BE64D        <2> 	db 'm','M',0xE,0xB,230,'M'		;32h
  7451 00005E85 2C3CF3AE0000        <2> 	db ',','<',0xF3,174,0,0		;33h
  7452 00005E8B 2E3EF2AF0000        <2> 	db '.','>',0xF2,175,0,0		;34h
  7453 00005E91 2F3FA8000000        <2> 	db '/','?',0xA8,0,0,0		;35h
  7454 00005E97 000000000000        <2> 	db 0,0,0,0,0,0				;36h
  7455 00005E9D 000000000000        <2> 	db 0,0,0,0,0,0				;37h
  7456 00005EA3 000000000000        <2> 	db 0,0,0,0,0,0				;38h
  7457 00005EA9 202000000000        <2> 	db ' ',' ',0,0,0,0			;39h
  7458                              <2> noscan:
  7459                              <2> 
  7460                              <1> %endif
  7461                              <1> ;drivers will soon be handled intelligently
  7462                              <1> ;every driver's source will be scanned for a .init function
  7463                              <1> ;that will be called and if it returns 0
  7464                              <1> ;the hardware was found and the driver initialized properly
  7465                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7466                              <1> 	%ifdef sound.included
  7467 00005EAF E886FAFFFF          <1> 		call sblaster.init
  7468                              <1> 	%endif
  7469                              <1> 	%ifdef network.included
  7470 00005EB4 E8A9200000          <1> 		call network.init
  7471                              <1> 	%endif
  7472 00005EB9 C3                  <1> 	ret
  7473                              <1> initialize:
  7474                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7475 00005EBA E814000000          <1> 	call .pic
  7476                              <1> %ifdef terminal.vsync
  7477                              <1> 	call .rtc
  7478                              <1> %endif
  7479 00005EBF E871000000          <1> 	call .pit
  7480 00005EC4 E893000000          <1> 	call .fpu
  7481 00005EC9 E8A4000000          <1> 	call .sse
  7482 00005ECE 31C0                <1> 	xor eax, eax
  7483 00005ED0 31C9                <1> 	xor ecx, ecx
  7484                              <1> %ifdef io.serial
  7485                              <1> 	call serial.init
  7486                              <1> %endif
  7487 00005ED2 C3                  <1> 	ret
  7488                              <1> 	
  7489                              <1> .pic:
  7490 00005ED3 B011                <1> 	mov al, 0x11
  7491 00005ED5 E620                <1> 	out 0x20, al
  7492 00005ED7 E6A0                <1> 	out 0xA0, al
  7493 00005ED9 B040                <1> 	mov al, 0x40	;interrupt for master
  7494 00005EDB E621                <1> 	out 0x21, al
  7495 00005EDD B048                <1> 	mov al, 0x48	;interrupt for slave
  7496 00005EDF E6A1                <1> 	out 0xA1, al
  7497 00005EE1 B004                <1> 	mov al, 4
  7498 00005EE3 E621                <1> 	out 0x21, al
  7499 00005EE5 B002                <1> 	mov al, 2
  7500 00005EE7 E6A1                <1> 	out 0xA1, al
  7501 00005EE9 B001                <1> 	mov al, 0x1
  7502 00005EEB E621                <1> 	out 0x21, al
  7503 00005EED B001                <1> 	mov al, 0x1
  7504 00005EEF E6A1                <1> 	out 0xA1, al
  7505                              <1> 	;masks are set to zero so as not to mask
  7506 00005EF1 30C0                <1> 	xor al, al
  7507 00005EF3 E621                <1> 	out 0x21, al
  7508 00005EF5 30C0                <1> 	xor al, al
  7509 00005EF7 E6A1                <1> 	out 0xA1, al
  7510 00005EF9 B020                <1> 	mov al, 0x20
  7511 00005EFB E6A0                <1> 	out 0xA0, al
  7512 00005EFD E620                <1> 	out 0x20, al
  7513 00005EFF C3                  <1> 	ret
  7514                              <1> .rtc:
  7515 00005F00 B008                <1> 	mov al, 0x8
  7516 00005F02 88C4                <1> 	mov ah, al
  7517 00005F04 66BA7000            <1> 	mov dx, 0x70
  7518 00005F08 EE                  <1> 	out dx, al
  7519 00005F09 6642                <1> 	inc dx
  7520 00005F0B EC                  <1> 	in al, dx
  7521 00005F0C 86C4                <1> 	xchg al, ah
  7522 00005F0E 664A                <1> 	dec dx
  7523 00005F10 EE                  <1> 	out dx, al
  7524 00005F11 6642                <1> 	inc dx
  7525 00005F13 86C4                <1> 	xchg al, ah
  7526 00005F15 0C40                <1> 	or al, 0x40
  7527 00005F17 EE                  <1> 	out dx, al
  7528                              <1> 	
  7529 00005F18 B00A                <1> 	mov al, 0xA
  7530 00005F1A 664A                <1> 	dec dx
  7531 00005F1C EE                  <1> 	out dx, al
  7532 00005F1D 86C4                <1> 	xchg al, ah
  7533 00005F1F 6642                <1> 	inc dx
  7534 00005F21 EC                  <1> 	in al, dx
  7535 00005F22 24F0                <1> 	and al, 0xF0
  7536 00005F24 0A05[01030000]      <1> 	or al, [rtcrate]
  7537 00005F2A 86C4                <1> 	xchg al, ah
  7538 00005F2C 664A                <1> 	dec dx
  7539 00005F2E EE                  <1> 	out dx, al
  7540 00005F2F 6642                <1> 	inc dx
  7541 00005F31 86C4                <1> 	xchg al, ah
  7542 00005F33 EE                  <1> 	out dx, al
  7543 00005F34 C3                  <1> 	ret
  7544                              <1> 	
  7545                              <1> .pit:
  7546                              <1> 	;initialize the PIT
  7547 00005F35 66A1[57020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7548 00005F3B E640                <1> 	out 0x40, al
  7549 00005F3D 66C1C008            <1> 	rol ax, 8
  7550 00005F41 E640                <1> 	out 0x40, al
  7551                              <1> 	;enable rtc interrupt
  7552 00005F43 B00B                <1> 	mov al, 0xB
  7553 00005F45 E670                <1> 	out 0x70, al
  7554 00005F47 66C1C008            <1> 	rol ax, 8
  7555 00005F4B E471                <1> 	in al, 0x71
  7556 00005F4D 66C1C008            <1> 	rol ax, 8
  7557 00005F51 E670                <1> 	out 0x70, al
  7558 00005F53 66C1C008            <1> 	rol ax, 8
  7559 00005F57 0C40                <1> 	or al, 0x40
  7560 00005F59 E671                <1> 	out 0x71, al
  7561 00005F5B C3                  <1> 	ret
  7562                              <1> .fpu:
  7563                              <1> 	;And now to initialize the fpu
  7564 00005F5C 0F20E0              <1> 	mov eax, cr4
  7565 00005F5F 0D00020000          <1> 	or eax, 0x200
  7566 00005F64 0F22E0              <1> 	mov cr4, eax
  7567 00005F67 B87F0B0000          <1> 	mov eax, 0xB7F
  7568 00005F6C 50                  <1> 	push eax
  7569 00005F6D D92C24              <1> 	fldcw [esp]
  7570 00005F70 58                  <1> 	pop eax
  7571 00005F71 C3                  <1> 	ret
  7572                              <1> 	
  7573                              <1> .sse:
  7574 00005F72 0F20C0              <1> 	mov eax, cr0
  7575 00005F75 24FB                <1> 	and al, 11111011b
  7576 00005F77 0C02                <1> 	or al, 00000010b
  7577 00005F79 0F22C0              <1> 	mov cr0, eax
  7578 00005F7C 0F20E0              <1> 	mov eax, cr4
  7579 00005F7F 660D0006            <1> 	or ax, 0000011000000000b
  7580 00005F83 0F22E0              <1> 	mov cr4, eax
  7581 00005F86 C3                  <1> 	ret
  7582                                      %include "source/pci.asm"
  7583 00005F87 00                  <1> pcibus		db 0
  7584 00005F88 00                  <1> pcidevice	db 0
  7585 00005F89 00                  <1> pcifunction	db 0
  7586 00005F8A 00                  <1> pciregister	db 0
  7587 00005F8B 00                  <1> pcireqtype	db 0
  7588 00005F8C 00000000            <1> pcidevid	dd 0
  7589 00005F90 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  7590                              <1> getpcimem:
  7591 00005F94 B002                <1> 	mov al, 2
  7592 00005F96 A2[8B5F0000]        <1> 	mov [pcireqtype], al
  7593 00005F9B E922000000          <1> 	jmp searchpci
  7594                              <1> getpciport:
  7595 00005FA0 B001                <1> 	mov al, 1
  7596 00005FA2 A2[8B5F0000]        <1> 	mov [pcireqtype], al
  7597 00005FA7 E916000000          <1> 	jmp searchpci
  7598                              <1> pcidump:
  7599 00005FAC 31C0                <1> 	xor eax, eax
  7600 00005FAE A2[895F0000]        <1> 	mov [pcifunction], al
  7601 00005FB3 A2[875F0000]        <1> 	mov [pcibus], al
  7602 00005FB8 A2[885F0000]        <1> 	mov [pcidevice], al
  7603 00005FBD A2[8B5F0000]        <1> 	mov [pcireqtype], al
  7604                              <1> searchpci:		;;return in ebx, start X in pciX
  7605 00005FC2 30C0                <1> 	xor al, al
  7606 00005FC4 A2[8A5F0000]        <1> 	mov [pciregister], al
  7607 00005FC9 E817020000          <1> 	call getpciaddr
  7608 00005FCE BAF80C0000          <1> 	mov edx, 0xCF8
  7609 00005FD3 EF                  <1> 	out dx, eax	;;request pci config
  7610 00005FD4 BAFC0C0000          <1> 	mov edx, 0xCFC
  7611 00005FD9 ED                  <1> 	in eax, dx 	;;read in pci config
  7612 00005FDA 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7613 00005FDF 0F8237000000        <1> 	jb near checkpcidevice
  7614                              <1> searchpciret:
  7615                              <1> nextpcidevice:
  7616 00005FE5 30C0                <1> 	xor al, al
  7617 00005FE7 A2[895F0000]        <1> 	mov [pcifunction], al
  7618 00005FEC A0[885F0000]        <1> 	mov al, [pcidevice]
  7619 00005FF1 3C1F                <1> 	cmp al, 11111b
  7620 00005FF3 0F8300010000        <1> 	jae near nextpcibus
  7621 00005FF9 FEC0                <1> 	inc al
  7622 00005FFB A2[885F0000]        <1> 	mov [pcidevice], al
  7623 00006000 EBC0                <1> 	jmp searchpci
  7624 00006002 A0[895F0000]        <1> 	mov al, [pcifunction]
  7625 00006007 3C07                <1> 	cmp al, 111b
  7626 00006009 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7627 0000600F FEC0                <1> 	inc al
  7628 00006011 A2[895F0000]        <1> 	mov [pcifunction], al
  7629 00006016 EBAA                <1> 	jmp searchpci
  7630 00006018 00000000            <1> pcitype: db 0,0,0,0
  7631                              <1> checkpcidevice:
  7632 0000601C 31C0                <1> 	xor eax, eax
  7633 0000601E 3905[8C5F0000]      <1> 	cmp [pcidevid], eax
  7634 00006024 0F8430000000        <1> 	je near .good
  7635 0000602A A2[8A5F0000]        <1> 	mov [pciregister], al	;device id, vendor id
  7636 0000602F E8B1010000          <1> 	call getpciaddr
  7637 00006034 BAF80C0000          <1> 	mov edx, 0xCF8
  7638 00006039 EF                  <1> 	out dx, eax
  7639 0000603A BAFC0C0000          <1> 	mov edx, 0xCFC
  7640 0000603F ED                  <1> 	in eax, dx
  7641 00006040 2305[905F0000]      <1> 	and eax, [pcidevidmask]
  7642 00006046 8B1D[8C5F0000]      <1> 	mov ebx, [pcidevid]
  7643 0000604C 231D[905F0000]      <1> 	and ebx, [pcidevidmask]
  7644 00006052 39D8                <1> 	cmp eax, ebx
  7645 00006054 0F858BFFFFFF        <1> 	jne near searchpciret
  7646                              <1> .good:
  7647 0000605A 30C0                <1> 	xor al, al
  7648 0000605C 3805[8B5F0000]      <1> 	cmp [pcireqtype], al
  7649 00006062 0F842C000000        <1> 	je near dumppcidevice
  7650 00006068 B008                <1> 	mov al, 0x08
  7651 0000606A A2[8A5F0000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7652 0000606F E871010000          <1> 	call getpciaddr
  7653 00006074 BAF80C0000          <1> 	mov edx, 0xCF8
  7654 00006079 EF                  <1> 	out dx, eax
  7655 0000607A BAFC0C0000          <1> 	mov edx, 0xCFC
  7656 0000607F ED                  <1> 	in eax, dx
  7657 00006080 C1C008              <1> 	rol eax, 8
  7658 00006083 3A05[18600000]      <1> 	cmp al, [pcitype]
  7659 00006089 0F84A0000000        <1> 	je near foundpciaddr
  7660 0000608F E951FFFFFF          <1> 	jmp searchpciret
  7661                              <1> dumppcidevice:
  7662 00006094 30C0                <1> 	xor al, al
  7663 00006096 A2[8A5F0000]        <1> 	mov [pciregister], al
  7664 0000609B E845010000          <1> 	call getpciaddr
  7665 000060A0 89C1                <1> 	mov ecx, eax
  7666 000060A2 C605[892E0000]05    <1> 	mov byte [firsthexshown], 5
  7667 000060A9 E8F0CDFFFF          <1> 	call showhex
  7668                              <1> dumppcidevicelp:
  7669 000060AE A2[8A5F0000]        <1> 	mov [pciregister], al
  7670 000060B3 E82D010000          <1> 	call getpciaddr
  7671 000060B8 BAF80C0000          <1> 	mov edx, 0xCF8
  7672 000060BD EF                  <1> 	out dx, eax
  7673 000060BE BAFC0C0000          <1> 	mov edx, 0xCFC
  7674 000060C3 ED                  <1> 	in eax, dx
  7675 000060C4 89C1                <1> 	mov ecx, eax
  7676 000060C6 A0[8A5F0000]        <1> 	mov al, [pciregister]
  7677 000060CB 0404                <1> 	add al, 4
  7678 000060CD C605[892E0000]05    <1> 	mov byte [firsthexshown], 5
  7679 000060D4 E8C5CDFFFF          <1> 	call showhex
  7680 000060D9 3C3C                <1> 	cmp al, 0x3C
  7681 000060DB 72D1                <1> 	jb dumppcidevicelp
  7682                              <1> dumppcidn:
  7683                              <1> %ifdef io.serial
  7684                              <1> 	mov esi, line
  7685                              <1> 	call print
  7686                              <1> %else
  7687 000060DD 803D[39240000]00    <1> 	cmp byte [charpos], 0
  7688 000060E4 0F84FBFEFFFF        <1> 	je near searchpciret
  7689 000060EA BE[5E8C0000]        <1> 	mov esi, line
  7690 000060EF E82BBCFFFF          <1> 	call print
  7691                              <1> %endif
  7692 000060F4 E9ECFEFFFF          <1> 	jmp searchpciret
  7693                              <1> nextpcibus:
  7694 000060F9 30C0                <1> 	xor al, al
  7695 000060FB A2[885F0000]        <1> 	mov [pcidevice], al
  7696 00006100 A0[875F0000]        <1> 	mov al, [pcibus]
  7697 00006105 3C7F                <1> 	cmp al, 1111111b
  7698 00006107 730C                <1> 	jae donesearchpci
  7699 00006109 FEC0                <1> 	inc al
  7700 0000610B A2[875F0000]        <1> 	mov [pcibus], al
  7701 00006110 E9ADFEFFFF          <1> 	jmp searchpci
  7702                              <1> donesearchpci:
  7703 00006115 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  7704 0000611A 31D2                <1> 	xor edx, edx
  7705 0000611C 8815[18600000]      <1> 	mov [pcitype], dl
  7706 00006122 8915[8C5F0000]      <1> 	mov [pcidevid], edx
  7707 00006128 891D[905F0000]      <1> 	mov [pcidevidmask], ebx
  7708 0000612E C3                  <1> 	ret
  7709                              <1> foundpciaddr:
  7710 0000612F B010                <1> 	mov al, 0x10
  7711 00006131 A2[8A5F0000]        <1> 	mov [pciregister], al
  7712 00006136 803D[8B5F0000]02    <1> 	cmp byte [pcireqtype], 2
  7713 0000613D 7443                <1> 	je findpcimemaddr
  7714                              <1> findpciioaddr:
  7715 0000613F E8A1000000          <1> 	call getpciaddr
  7716 00006144 BAF80C0000          <1> 	mov edx, 0xCF8
  7717 00006149 EF                  <1> 	out dx, eax
  7718 0000614A BAFC0C0000          <1> 	mov edx, 0xCFC
  7719 0000614F ED                  <1> 	in eax, dx
  7720 00006150 89C3                <1> 	mov ebx, eax
  7721 00006152 81E301000000        <1> 	and ebx, 1
  7722 00006158 81FB00000000        <1> 	cmp ebx, 0
  7723 0000615E 0F8468000000        <1> 	je near notpciioaddr
  7724 00006164 2D01000000          <1> 	sub eax, 1
  7725 00006169 89C2                <1> 	mov edx, eax
  7726 0000616B 31DB                <1> 	xor ebx, ebx
  7727 0000616D 4B                  <1> 	dec ebx
  7728 0000616E 891D[905F0000]      <1> 	mov [pcidevidmask], ebx
  7729 00006174 43                  <1> 	inc ebx
  7730 00006175 881D[18600000]      <1> 	mov [pcitype], bl
  7731 0000617B 891D[8C5F0000]      <1> 	mov [pcidevid], ebx
  7732 00006181 C3                  <1> 	ret
  7733                              <1> findpcimemaddr:
  7734 00006182 E85E000000          <1> 	call getpciaddr
  7735 00006187 BAF80C0000          <1> 	mov edx, 0xCF8
  7736 0000618C EF                  <1> 	out dx, eax
  7737 0000618D BAFC0C0000          <1> 	mov edx, 0xCFC
  7738 00006192 ED                  <1> 	in eax, dx
  7739 00006193 89C3                <1> 	mov ebx, eax
  7740 00006195 81E301000000        <1> 	and ebx, 1
  7741 0000619B 81FB01000000        <1> 	cmp ebx, 1
  7742 000061A1 0F8425000000        <1> 	je near notpciioaddr
  7743 000061A7 89C2                <1> 	mov edx, eax
  7744 000061A9 50                  <1> 	push eax
  7745 000061AA A1[3E020000]        <1> 	mov eax, [basecache]
  7746 000061AF C1E004              <1> 	shl eax, 4
  7747 000061B2 29C2                <1> 	sub edx, eax
  7748 000061B4 58                  <1> 	pop eax
  7749 000061B5 31DB                <1> 	xor ebx, ebx
  7750 000061B7 4B                  <1> 	dec ebx
  7751 000061B8 891D[905F0000]      <1> 	mov [pcidevidmask], ebx
  7752 000061BE 43                  <1> 	inc ebx
  7753 000061BF 881D[18600000]      <1> 	mov [pcitype], bl
  7754 000061C5 891D[8C5F0000]      <1> 	mov [pcidevid], ebx
  7755 000061CB C3                  <1> 	ret
  7756                              <1> notpciioaddr:
  7757 000061CC A0[8A5F0000]        <1> 	mov al, [pciregister]
  7758 000061D1 0404                <1> 	add al, 4
  7759 000061D3 3C28                <1> 	cmp al, 0x28
  7760 000061D5 0F870AFEFFFF        <1> 	ja near searchpciret
  7761 000061DB A2[8A5F0000]        <1> 	mov [pciregister], al
  7762 000061E0 E95AFFFFFF          <1> 	jmp findpciioaddr
  7763                              <1> getpciaddr:		;;puts it in eax and ebx
  7764 000061E5 31C0                <1> 			xor eax, eax
  7765 000061E7 BB00000080          <1> 			mov ebx, 0x80000000
  7766 000061EC A0[875F0000]        <1> 			mov al, [pcibus]
  7767 000061F1 C1E010              <1> 			shl eax, 16
  7768 000061F4 01C3                <1> 			add ebx, eax
  7769 000061F6 31C0                <1> 			xor eax, eax
  7770 000061F8 A0[885F0000]        <1> 			mov al, [pcidevice]
  7771 000061FD C1E00B              <1> 			shl eax, 11
  7772 00006200 01C3                <1> 			add ebx, eax
  7773 00006202 31C0                <1> 			xor eax, eax
  7774 00006204 A0[895F0000]        <1> 			mov al, [pcifunction]
  7775 00006209 C1E008              <1> 			shl eax, 8
  7776 0000620C 01C3                <1> 			add ebx, eax
  7777 0000620E 31C0                <1> 			xor eax, eax
  7778 00006210 A0[8A5F0000]        <1> 			mov al, [pciregister]
  7779 00006215 01C3                <1> 			add ebx, eax
  7780 00006217 89D8                <1> 			mov eax, ebx
  7781 00006219 C3                  <1> 			ret
  7782                                      %include "source/disk.asm"
  7783                              <1> ;This loads files using the methods in the loaded driver
  7784                              <1> %ifdef disk.real
  7785                              <1> %include "source/drivers/disk/realmode.asm"
  7786                              <2> diskr:
  7787                              <2> 			;read from disk using real mode-it does not work with large files
  7788                              <2> 			;sector count in cl
  7789                              <2> 			;disk number in ch
  7790                              <2> 			;48 bit address with last 32 bits in ebx
  7791                              <2> 			;buffer in esi
  7792                              <2> 			;puts end of buffer in edi and end lba address in edx
  7793 0000621A 880D[47620000]      <2> 	mov [sdlength], cl
  7794 00006220 891D[48620000]      <2> 	mov [sdaddress], ebx
  7795 00006226 8935[A6630000]      <2> 	mov [oldesireal], esi
  7796 0000622C 66BE[4C62]          <2> 	mov si, readdiskreal
  7797 00006230 668935[EE0C0000]    <2> 	mov [realmodeptr], si
  7798 00006237 BE[88620000]        <2> 	mov esi, backfromrealread
  7799 0000623C 8935[EA0C0000]      <2> 	mov [realmodereturn], esi
  7800 00006242 E98CA9FFFF          <2> 	jmp realmode
  7801 00006247 00                  <2> sdlength db 0
  7802 00006248 00000000            <2> sdaddress dd 0
  7803                              <2> 
  7804                              <2> [BITS 16]
  7805                              <2> readdiskreal:
  7806 0000624C C706[7862]1000      <2> 	mov word [dlen], 0x10
  7807 00006252 C706[7C62]0000      <2> 	mov word [daddress], 0
  7808 00006258 C706[7E62]0001      <2> 	mov word [dsegm], 0x100
  7809 0000625E 66891E[8062]        <2> 	mov [dlbaad], ebx
  7810 00006263 880E[7A62]          <2> 	mov [dreadlen], cl
  7811                              <2> ReadHardDisk:
  7812 00006267 BE[7862]            <2> 	mov si, diskaddresspacket
  7813 0000626A 31C0                <2> 	xor ax, ax
  7814 0000626C B442                <2> 	mov ah, 0x42
  7815 0000626E 8A16[7762]          <2> 	mov dl, [dnumber]
  7816 00006272 CD13                <2> 	int 0x13
  7817 00006274 72F1                <2> 	jc ReadHardDisk
  7818 00006276 C3                  <2> 	ret
  7819                              <2> 
  7820 00006277 80                  <2> dnumber db 0x80
  7821                              <2> diskaddresspacket:
  7822 00006278 10                  <2> dlen:	db 0x10 ;size of packet
  7823 00006279 00                  <2> 		db 0
  7824 0000627A 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  7825 0000627C 0000                <2> daddress:	dw 0x0	;address 0
  7826 0000627E 0001                <2> dsegm:		dw 0x100	;segment
  7827                              <2> 		;start with known value for hd
  7828                              <2> dlbaad:
  7829 00006280 00000000            <2> 	dd 0	;lba address
  7830 00006284 00000000            <2> 	dd 0
  7831                              <2> [BITS 32]
  7832                              <2> backfromrealread:
  7833 00006288 8B35[A6630000]      <2> 	mov esi, [oldesireal]
  7834 0000628E 8B1D[48620000]      <2> 	mov ebx, [sdaddress]
  7835 00006294 31C9                <2> 	xor ecx, ecx
  7836 00006296 8A0D[47620000]      <2> 	mov cl, [sdlength]
  7837 0000629C 01CB                <2> 	add ebx, ecx
  7838 0000629E 66B80800            <2> 	mov ax, LINEAR_SEL
  7839 000062A2 8EE0                <2> 	mov fs, ax
  7840 000062A4 BF00100000          <2> 	mov edi, 0x1000
  7841 000062A9 B200                <2> 	mov dl, 0
  7842 000062AB D0E1                <2> 	shl cl, 1
  7843                              <2> copyfromrmodedisk:
  7844 000062AD 648A07              <2> 	mov al, [fs:edi]
  7845 000062B0 8806                <2> 	mov [esi], al
  7846 000062B2 47                  <2> 	inc edi
  7847 000062B3 46                  <2> 	inc esi
  7848 000062B4 FECA                <2> 	dec dl
  7849 000062B6 80FA00              <2> 	cmp dl, 0
  7850 000062B9 75F2                <2> 	jne copyfromrmodedisk
  7851 000062BB FEC9                <2> 	dec cl
  7852 000062BD B200                <2> 	mov dl, 0
  7853 000062BF 80F900              <2> 	cmp cl, 0
  7854 000062C2 75E9                <2> 	jne copyfromrmodedisk
  7855 000062C4 66B83000            <2> 	mov ax, NEW_DATA_SEL
  7856 000062C8 8EE0                <2> 	mov fs, ax
  7857 000062CA 89F7                <2> 	mov edi, esi
  7858 000062CC 8B35[A6630000]      <2> 	mov esi, [oldesireal]
  7859 000062D2 89DA                <2> 	mov edx, ebx
  7860 000062D4 8B1D[48620000]      <2> 	mov ebx, [sdaddress]
  7861 000062DA C3                  <2> 	ret
  7862                              <2> 	
  7863                              <1> %else
  7864                              <1> 	%ifdef disk.protected
  7865                              <1> 	%include "source/drivers/disk/pata.asm"
  7866                              <1> 	%endif
  7867                              <1> %endif
  7868                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  7869                              <1> 			;returns with err code in edx and file end in edi
  7870 000062DB 803F00              <1> 	cmp byte [edi], 0
  7871 000062DE 0F8448000000        <1> 	je near nofileload
  7872 000062E4 89FA                <1> 	mov edx, edi
  7873 000062E6 BB[839C0000]        <1> 	mov ebx, diskfileindex
  7874                              <1> nextnamechar:
  7875 000062EB 8A07                <1> 	mov al, [edi]
  7876 000062ED 3C26                <1> 	cmp al, '&'
  7877 000062EF 7440                <1> 	je nullfile
  7878 000062F1 8A23                <1> 	mov ah, [ebx]
  7879 000062F3 47                  <1> 	inc edi
  7880 000062F4 43                  <1> 	inc ebx
  7881 000062F5 88C1                <1> 	mov cl, al
  7882 000062F7 08E1                <1> 	or cl, ah
  7883 000062F9 80F900              <1> 	cmp cl, 0
  7884 000062FC 744E                <1> 	je equalfilenames
  7885 000062FE 80F920              <1> 	cmp cl, ' '
  7886 00006301 7449                <1> 	je equalfilenames
  7887 00006303 3C2A                <1> 	cmp al, '*'
  7888 00006305 742B                <1> 	je equalfilenames2
  7889 00006307 80FC00              <1> 	cmp ah, 0
  7890 0000630A 7410                <1> 	je nextfilename
  7891 0000630C 3C00                <1> 	cmp al, 0
  7892 0000630E 7404                <1> 	je getebxzero
  7893 00006310 38E0                <1> 	cmp al, ah
  7894 00006312 74D7                <1> 	je nextnamechar
  7895                              <1> getebxzero:
  7896 00006314 8A23                <1> 	mov ah, [ebx]
  7897 00006316 43                  <1> 	inc ebx
  7898 00006317 80FC00              <1> 	cmp ah, 0
  7899 0000631A 75F8                <1> 	jne getebxzero
  7900                              <1> nextfilename:
  7901 0000631C 81C308000000        <1> 	add ebx, 8		;next descriptor
  7902 00006322 89D7                <1> 	mov edi, edx
  7903 00006324 81FB[389E0000]      <1> 	cmp ebx, enddiskfileindex
  7904 0000632A 72BF                <1> 	jb nextnamechar
  7905                              <1> nofileload:
  7906 0000632C BA94010000          <1> 	mov edx, 404	;indicate not found error
  7907                              <1> nullfile:
  7908 00006331 C3                  <1> 	ret
  7909                              <1> equalfilenames2:
  7910 00006332 81EB02000000        <1> 	sub ebx, 2
  7911                              <1> eqfilefind:
  7912 00006338 43                  <1> 	inc ebx
  7913 00006339 81FB[389E0000]      <1> 	cmp ebx, enddiskfileindex
  7914 0000633F 0F83E7FFFFFF        <1> 	jae near nofileload
  7915 00006345 8A03                <1> 	mov al, [ebx]
  7916 00006347 3C00                <1> 	cmp al, 0
  7917 00006349 75ED                <1> 	jne eqfilefind
  7918 0000634B 43                  <1> 	inc ebx
  7919                              <1> equalfilenames:
  7920 0000634C 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  7921 0000634F 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  7922 00006351 031D[3A9E0000]      <1> 	add ebx, [lbaad]	;add offset to solleros
  7923 00006357 31C9                <1> 	xor ecx, ecx
  7924 00006359 88C1                <1> 	mov cl, al			;get excess number of sectors
  7925 0000635B C0E102              <1> 	shl cl, 2
  7926 0000635E C0E902              <1> 	shr cl, 2			;cut off at 64
  7927 00006361 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  7928 00006363 B500                <1> 	mov ch, 0			;drive 0
  7929 00006365 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  7930                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  7931 00006368 A3[AA630000]        <1> 	mov [filetracks], eax
  7932 0000636D 89F7                <1> 	mov edi, esi		;just in case cl is 0
  7933 0000636F 89DA                <1> 	mov edx, ebx
  7934 00006371 80F900              <1> 	cmp cl, 0
  7935 00006374 7405                <1> 	je copytracksforfile
  7936 00006376 E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  7937                              <1> copytracksforfile:
  7938 0000637B A1[AA630000]        <1> 	mov eax, [filetracks]
  7939 00006380 3D00000000          <1> 	cmp eax, 0
  7940 00006385 7419                <1> 	je donecopyfile
  7941 00006387 48                  <1> 	dec eax
  7942 00006388 A3[AA630000]        <1> 	mov [filetracks], eax
  7943 0000638D 89D3                <1> 	mov ebx, edx	;get end lba
  7944 0000638F B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  7945 00006391 8A2D[399E0000]      <1> 	mov ch, [DriveNumber]
  7946 00006397 89FE                <1> 	mov esi, edi	;reset buffer
  7947 00006399 E87CFEFFFF          <1> 	call diskr
  7948 0000639E EBDB                <1> 	jmp copytracksforfile
  7949                              <1> donecopyfile:
  7950 000063A0 BA00000000          <1> 	mov edx, 0	;no error
  7951 000063A5 C3                  <1> 	ret
  7952                              <1> 
  7953 000063A6 00000000            <1> oldesireal dd 0
  7954 000063AA 00000000            <1> filetracks dd 0
  7955 000063AE 00                  <1> lbad1 db 0
  7956 000063AF 00                  <1> lbad2 db 0
  7957 000063B0 00                  <1> lbad3 db 0
  7958 000063B1 00                  <1> lbad4 db 0
  7959 000063B2 00                  <1> lbad5 db 0
  7960 000063B3 00                  <1> lbad6 db 0
  7961 000063B4 6400                <1> segments dw 100
  7962                              <1> 
  7963                              <1> 
  7964                              <1> 	
  7965                                      %include "source/threads.asm"
  7966                              <1> %ifdef threads.included	
  7967                              <1> nwcmdst:
  7968 000063B6 31C0                <1> 	xor eax, eax
  7969 000063B8 BC[1EB00000]        <1> 	mov esp, stackend
  7970 000063BD A2[7A640000]        <1> 	mov [threadson], al
  7971 000063C2 A3[7B640000]        <1> 	mov [currentthread], eax
  7972 000063C7 0504000000          <1> 	add eax, 4
  7973 000063CC A3[76640000]        <1> 	mov [lastthread], eax
  7974 000063D1 FB                  <1> 	sti
  7975 000063D2 E9EDC5FFFF          <1> 	jmp nwcmd
  7976                              <1> 
  7977                              <1> nomorethreadspace:
  7978 000063D7 BE[ED630000]        <1> 	mov esi, nmts
  7979 000063DC E83EB9FFFF          <1> 	call print
  7980 000063E1 C605[7A640000]00    <1> 	mov byte [threadson], 0
  7981 000063E8 E9D7C5FFFF          <1> 	jmp nwcmd
  7982 000063ED 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  7983 000063F6 6572666C6F770A00    <1>
  7984                              <1> 
  7985                              <1> nomorestackspace:
  7986 000063FE BE[0A640000]        <1> 	mov esi, nmss
  7987 00006403 E817B9FFFF          <1> 	call print
  7988 00006408 EBAC                <1> 	jmp nwcmdst
  7989 0000640A 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  7990 00006413 72666C6F770A00      <1>
  7991                              <1> 	
  7992                              <1> threadswitch:
  7993 0000641A FA                  <1> 	cli
  7994 0000641B 60                  <1> 	pushad
  7995 0000641C BF[80D70100]        <1> 	mov edi, threadlist
  7996 00006421 A1[7B640000]        <1> 	mov eax, [currentthread]
  7997 00006426 40                  <1> 	inc eax
  7998 00006427 A3[7B640000]        <1> 	mov [currentthread], eax
  7999 0000642C 6648                <1> 	dec ax
  8000 0000642E C1E002              <1> 	shl eax, 2
  8001 00006431 01C7                <1> 	add edi, eax
  8002 00006433 8927                <1> 	mov [edi], esp
  8003 00006435 81C704000000        <1> 	add edi, 4
  8004 0000643B 81FF[80E70100]      <1> 	cmp edi, threadlistend
  8005 00006441 0F830D000000        <1> 	jae near nookespthread
  8006 00006447 8B07                <1> 	mov eax, [edi]
  8007 00006449 3D00000000          <1> 	cmp eax, 0
  8008 0000644E 0F8519000000        <1> 	jne near okespthread
  8009                              <1> nookespthread:
  8010 00006454 BF[80D70100]        <1> 	mov edi, threadlist
  8011 00006459 31C0                <1> 	xor eax, eax
  8012 0000645B A3[7B640000]        <1> 	mov [currentthread], eax
  8013 00006460 8B07                <1> 	mov eax, [edi]
  8014 00006462 3D00000000          <1> 	cmp eax, 0
  8015 00006467 0F8449FFFFFF        <1> 	je near nwcmdst
  8016                              <1> okespthread:
  8017 0000646D 89C4                <1> 	mov esp, eax
  8018 0000646F B020                <1> 	mov al, 0x20
  8019 00006471 E620                <1> 	out 0x20, al
  8020 00006473 61                  <1> 	popad
  8021 00006474 FB                  <1> 	sti
  8022 00006475 CF                  <1> 	iret
  8023                              <1> 
  8024                              <1> %endif
  8025 00006476 04000000            <1> 	lastthread dd 4
  8026 0000647A 00                  <1> 	threadson db 0
  8027 0000647B 00000000            <1> 	currentthread dd 0
  8028                                  %ifdef gui.included
  8029                                      %include "source/gui/gui.asm"
  8030                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8031 0000647F 31C0                <1> 	xor eax, eax
  8032 00006481 31DB                <1> 	xor ebx, ebx
  8033 00006483 31C9                <1> 	xor ecx, ecx
  8034 00006485 31D2                <1> 	xor edx, edx
  8035 00006487 E820060000          <1> 	call guisetup
  8036                              <1> guiloop:
  8037 0000648C E8F2F0FFFF          <1> 	call cursorgui
  8038                              <1> guistart:
  8039 00006491 E8FBF6FFFF          <1> 	call getkey
  8040 00006496 C605[03770000]00    <1> 	mov byte [copygui], 0
  8041 0000649D EBF2                <1> 	jmp guistart
  8042                              <1> 
  8043                              <1> %include "source/gui/bmp.asm"
  8044                              <2> 
  8045                              <2> showbmp:
  8046 0000649F 668B06              <2> 	mov ax, [esi]
  8047 000064A2 663D424D            <2> 	cmp ax, "BM"
  8048 000064A6 0F85BB000000        <2> 	jne near endedbmp
  8049 000064AC 8B3D[A6540000]      <2> 	mov edi, [physbaseptr]
  8050 000064B2 6689D0              <2> 	mov ax, dx
  8051 000064B5 6689CB              <2> 	mov bx, cx
  8052 000064B8 31C9                <2> 	xor ecx, ecx
  8053 000064BA 31D2                <2> 	xor edx, edx
  8054 000064BC 6689D9              <2> 	mov cx, bx
  8055 000064BF 6689C2              <2> 	mov dx, ax
  8056 000064C2 01D7                <2> 	add edi, edx
  8057 000064C4 01D7                <2> 	add edi, edx
  8058 000064C6 31D2                <2> 	xor edx, edx
  8059 000064C8 668B15[7E550000]    <2> 	mov dx, [resolutionx2]
  8060 000064CF 034E16              <2> 	add ecx, [esi + 22]
  8061                              <2> bmplocloop:
  8062 000064D2 52                  <2> 	push edx
  8063 000064D3 31C0                <2> 	xor eax, eax
  8064 000064D5 6689D0              <2> 	mov ax, dx
  8065 000064D8 F7E1                <2> 	mul ecx
  8066 000064DA 5A                  <2> 	pop edx
  8067 000064DB 663B0D[92540000]    <2> 	cmp cx, [resolutiony]
  8068 000064E2 7609                <2> 	jbe .nofixy
  8069 000064E4 31C9                <2> 	xor ecx, ecx
  8070 000064E6 668B0D[92540000]    <2> 	mov cx, [resolutiony]
  8071                              <2> .nofixy:
  8072 000064ED 01C7                <2> 	add edi, eax
  8073 000064EF 8B5612              <2> 	mov edx, [esi + 18]
  8074 000064F2 8B4E16              <2> 	mov ecx, [esi + 22]
  8075 000064F5 8B460A              <2> 	mov eax, [esi + 10]
  8076 000064F8 8B5E02              <2> 	mov ebx, [esi + 2]
  8077 000064FB 01F3                <2> 	add ebx, esi
  8078 000064FD 891D[6D650000]      <2> 	mov [bmpend], ebx
  8079 00006503 89D3                <2> 	mov ebx, edx
  8080 00006505 01C6                <2> 	add esi, eax
  8081                              <2> ldxbmp2:
  8082 00006507 31D2                <2> 	xor edx, edx
  8083 00006509 668B15[90540000]    <2> 	mov dx, [resolutionx]
  8084 00006510 39D3                <2> 	cmp ebx, edx
  8085 00006512 7702                <2> 	ja ldxbmp
  8086 00006514 89DA                <2> 	mov edx, ebx
  8087                              <2> ldxbmp:
  8088 00006516 668B06              <2> 	mov ax, [esi]
  8089 00006519 668907              <2> 	mov [edi], ax
  8090 0000651C 81C702000000        <2> 	add edi, 2
  8091 00006522 81C602000000        <2> 	add esi, 2
  8092 00006528 3B35[6D650000]      <2> 	cmp esi, [bmpend]
  8093 0000652E 7737                <2> 	ja endedbmp
  8094 00006530 4A                  <2> 	dec edx
  8095 00006531 81FA00000000        <2> 	cmp edx, 0
  8096 00006537 77DD                <2> 	ja ldxbmp
  8097 00006539 31D2                <2> 	xor edx, edx
  8098 0000653B 668B15[90540000]    <2> 	mov dx, [resolutionx]
  8099 00006542 39D3                <2> 	cmp ebx, edx
  8100 00006544 7610                <2> 	jbe .notover
  8101                              <2> .over:
  8102 00006546 01DE                <2> 	add esi, ebx
  8103 00006548 01DE                <2> 	add esi, ebx
  8104 0000654A 29D6                <2> 	sub esi, edx
  8105 0000654C 29D6                <2> 	sub esi, edx
  8106 0000654E 01DF                <2> 	add edi, ebx
  8107 00006550 01DF                <2> 	add edi, ebx
  8108 00006552 29D7                <2> 	sub edi, edx
  8109 00006554 29D7                <2> 	sub edi, edx
  8110                              <2> .notover:
  8111 00006556 29DF                <2> 	sub edi, ebx
  8112 00006558 29DF                <2> 	sub edi, ebx
  8113 0000655A 29D7                <2> 	sub edi, edx
  8114 0000655C 29D7                <2> 	sub edi, edx
  8115 0000655E 49                  <2> 	dec ecx
  8116 0000655F 81F900000000        <2> 	cmp ecx, 0
  8117 00006565 77A0                <2> 	ja ldxbmp2
  8118                              <2> endedbmp:
  8119 00006567 E8CA010000          <2> 	call switchmousepos2
  8120 0000656C C3                  <2> 	ret
  8121                              <2> 	
  8122 0000656D 00000000            <2> 	bmpend dd 0
  8123                              <1> %include "source/gui/circle.asm"
  8124                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8125 00006571 663D0000            <2> 	cmp ax, 0
  8126 00006575 770A                <2> 	ja .nozerocircle
  8127 00006577 E87C190000          <2> 	call putpixel	;the easiest circle ever
  8128 0000657C E9F4000000          <2> 	jmp .done
  8129                              <2> .nozerocircle:
  8130 00006581 55                  <2> 	push ebp
  8131 00006582 6689F5              <2> 	mov bp, si
  8132 00006585 6650                <2> 	push ax
  8133 00006587 E8AD190000          <2> 	call getpixelmem
  8134 0000658C 31C0                <2> 	xor eax, eax
  8135 0000658E 6658                <2> 	pop ax
  8136 00006590 BE01000000          <2> 	mov esi, 1
  8137 00006595 29C6                <2> 	sub esi, eax
  8138 00006597 89C1                <2> 	mov ecx, eax
  8139 00006599 31C0                <2> 	xor eax, eax
  8140 0000659B 66A1[7E550000]      <2> 	mov ax, [resolutionx2]
  8141 000065A1 F7E1                <2> 	mul ecx
  8142 000065A3 50                  <2> 	push eax
  8143 000065A4 31D2                <2> 	xor edx, edx
  8144 000065A6 01C7                <2> 	add edi, eax
  8145 000065A8 66892F              <2> 	mov [edi], bp
  8146 000065AB 29C7                <2> 	sub edi, eax
  8147 000065AD 29C7                <2> 	sub edi, eax
  8148 000065AF 66892F              <2> 	mov [edi], bp
  8149 000065B2 01C7                <2> 	add edi, eax
  8150 000065B4 D1E1                <2> 	shl ecx, 1
  8151 000065B6 01CF                <2> 	add edi, ecx
  8152 000065B8 66892F              <2> 	mov [edi], bp
  8153 000065BB D1E1                <2> 	shl ecx, 1
  8154 000065BD 29CF                <2> 	sub edi, ecx
  8155 000065BF 66892F              <2> 	mov [edi], bp
  8156 000065C2 D1E9                <2> 	shr ecx, 1
  8157 000065C4 01CF                <2> 	add edi, ecx
  8158 000065C6 D1E9                <2> 	shr ecx, 1
  8159 000065C8 B802000000          <2> 	mov eax, 2
  8160 000065CD F7E1                <2> 	mul ecx
  8161 000065CF 48                  <2> 	dec eax
  8162 000065D0 F7D0                <2> 	not eax ;make it negative
  8163 000065D2 A3[7A660000]        <2> 	mov [.ddF_y], eax
  8164 000065D7 58                  <2> 	pop eax
  8165 000065D8 BB01000000          <2> 	mov ebx, 1
  8166 000065DD 891D[76660000]      <2> 	mov [.ddF_x], ebx
  8167 000065E3 4B                  <2> 	dec ebx
  8168 000065E4 31D2                <2> 	xor edx, edx
  8169                              <2> .lp:	;it starts this with the center in edi
  8170                              <2> 		;color in bp
  8171                              <2> 		;ddF_x in memor
  8172                              <2> 		;x*resolutionx2 in ebx
  8173                              <2> 		;x in edx
  8174                              <2> 		;ddF_y in memory
  8175                              <2> 		;y*resolutionx2 in eax
  8176                              <2> 		;f in esi
  8177                              <2> 		;y in ecx
  8178 000065E6 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8179 000065EC 7717                <2> 	ja	.noddF_y
  8180 000065EE 49                  <2> 	dec ecx
  8181 000065EF 2B05[7E550000]      <2> 	sub eax, [resolutionx2]
  8182 000065F5 8105[7A660000]0200- <2> 	add dword [.ddF_y], 2
  8183 000065FD 0000                <2>
  8184 000065FF 0335[7A660000]      <2> 	add esi, [.ddF_y]
  8185                              <2> .noddF_y:
  8186 00006605 42                  <2> 	inc edx
  8187 00006606 031D[7E550000]      <2> 	add ebx, [resolutionx2]
  8188 0000660C 8105[76660000]0200- <2> 	add dword [.ddF_x], 2
  8189 00006614 0000                <2>
  8190 00006616 0335[76660000]      <2> 	add esi, [.ddF_x]
  8191                              <2> 
  8192 0000661C D1E2                <2> 	shl edx, 1
  8193 0000661E D1E1                <2> 	shl ecx, 1
  8194 00006620 01D7                <2> 	add edi, edx
  8195 00006622 01C7                <2> 	add edi, eax
  8196 00006624 66892F              <2> 	mov [edi], bp
  8197 00006627 D1E2                <2> 	shl edx, 1
  8198 00006629 29D7                <2> 	sub edi, edx
  8199 0000662B 66892F              <2> 	mov [edi], bp
  8200 0000662E 01D7                <2> 	add edi, edx
  8201 00006630 D1E0                <2> 	shl eax, 1
  8202 00006632 29C7                <2> 	sub edi, eax
  8203 00006634 66892F              <2> 	mov [edi], bp
  8204 00006637 29D7                <2> 	sub edi, edx
  8205 00006639 66892F              <2> 	mov [edi], bp
  8206 0000663C D1EA                <2> 	shr edx, 1
  8207 0000663E D1E8                <2> 	shr eax, 1
  8208 00006640 01C7                <2> 	add edi, eax
  8209 00006642 01D7                <2> 	add edi, edx
  8210                              <2> 	
  8211 00006644 01DF                <2> 	add edi, ebx
  8212 00006646 01CF                <2> 	add edi, ecx
  8213 00006648 66892F              <2> 	mov [edi], bp
  8214 0000664B D1E1                <2> 	shl ecx, 1
  8215 0000664D 29CF                <2> 	sub edi, ecx
  8216 0000664F 66892F              <2> 	mov [edi], bp
  8217 00006652 D1E3                <2> 	shl ebx, 1
  8218 00006654 29DF                <2> 	sub edi, ebx
  8219 00006656 01CF                <2> 	add edi, ecx
  8220 00006658 66892F              <2> 	mov [edi], bp
  8221 0000665B 29CF                <2> 	sub edi, ecx
  8222 0000665D 66892F              <2> 	mov [edi], bp
  8223 00006660 D1EB                <2> 	shr ebx, 1
  8224 00006662 D1E9                <2> 	shr ecx, 1
  8225 00006664 01DF                <2> 	add edi, ebx
  8226 00006666 01CF                <2> 	add edi, ecx
  8227 00006668 D1EA                <2> 	shr edx, 1
  8228 0000666A D1E9                <2> 	shr ecx, 1
  8229 0000666C 39CA                <2> 	cmp edx, ecx
  8230 0000666E 0F8272FFFFFF        <2> 	jb .lp
  8231 00006674 5D                  <2> 	pop ebp
  8232                              <2> .done:
  8233 00006675 C3                  <2> 	ret
  8234                              <2> 	
  8235 00006676 00000000            <2> .ddF_x dd 0
  8236 0000667A 00000000            <2> .ddF_y dd 0
  8237                              <1> %include "source/gui/cursor.asm"
  8238                              <2> clearmousecursor:
  8239 0000667E BE[D8690000]        <2> 		mov esi, background
  8240 00006683 8B3D[A6540000]      <2> 		mov edi, [physbaseptr]
  8241 00006689 31D2                <2> 		xor edx, edx
  8242 0000668B 31C9                <2> 		xor ecx, ecx
  8243 0000668D 668B15[70570000]    <2> 		mov dx, [lastmouseposition]
  8244 00006694 668B0D[72570000]    <2> 		mov cx, [lastmouseposition + 2]
  8245 0000669B 01D7                <2> 		add edi, edx
  8246 0000669D 31D2                <2> 		xor edx, edx
  8247 0000669F 668B15[7E550000]    <2> 		mov dx, [resolutionx2]
  8248 000066A6 81F900000000        <2> 		cmp ecx, 0
  8249 000066AC 7408                <2> 		je .nomul
  8250 000066AE 52                  <2> 		push edx
  8251 000066AF 89D0                <2> 		mov eax, edx
  8252 000066B1 F7E1                <2> 		mul ecx
  8253 000066B3 01C7                <2> 		add edi, eax
  8254 000066B5 5A                  <2> 		pop edx
  8255                              <2> .nomul:
  8256                              <2> %ifdef 	gui.background
  8257                              <2> 		cmp dword [backgroundimage], 0
  8258                              <2> 		je .noyclr
  8259                              <2> 		mov esi, [backgroundimage]
  8260                              <2> 		sub edi, [physbaseptr]
  8261                              <2> 		add esi, edi
  8262                              <2> 		add edi, [physbaseptr]
  8263                              <2> .backlp:
  8264                              <2> 		xor ebx, ebx
  8265                              <2> .noyback:
  8266                              <2> 		mov eax, [esi + ebx]
  8267                              <2> 		mov [edi + ebx], eax
  8268                              <2> 		add ebx, 4
  8269                              <2> 		cmp ebx, 16
  8270                              <2> 		jne .noyback
  8271                              <2> 		add edi, edx
  8272                              <2> 		add esi, edx
  8273                              <2> 		inc cx
  8274                              <2> 		cmp cx, 16
  8275                              <2> 		jb .backlp
  8276                              <2> 		ret
  8277                              <2> %endif
  8278                              <2> .noyclr:
  8279 000066B6 668B06              <2> 		mov ax, [esi]
  8280 000066B9 C1C010              <2> 		rol eax, 16
  8281 000066BC 668B06              <2> 		mov ax, [esi]
  8282 000066BF 8907                <2> 		mov [edi], eax
  8283 000066C1 894704              <2> 		mov [edi + 4], eax
  8284 000066C4 894708              <2> 		mov [edi + 8], eax
  8285 000066C7 89470C              <2> 		mov [edi + 12], eax
  8286 000066CA 01D7                <2> 		add edi, edx
  8287 000066CC 6641                <2> 		inc cx
  8288 000066CE 6681F91000          <2> 		cmp cx, 16
  8289 000066D3 72E1                <2> 		jb .noyclr
  8290 000066D5 C3                  <2> 		ret
  8291                              <2> 
  8292                              <2> switchmousepos:		;;switch were the mouse is located
  8293 000066D6 BE[13D10000]        <2> 		mov esi, mousecolorbuf
  8294 000066DB 8B3D[A6540000]      <2> 		mov edi, [physbaseptr]
  8295 000066E1 31D2                <2> 		xor edx, edx
  8296 000066E3 31C9                <2> 		xor ecx, ecx
  8297 000066E5 668B15[70570000]    <2> 		mov dx, [lastmouseposition]
  8298 000066EC 668B0D[72570000]    <2> 		mov cx, [lastmouseposition + 2]
  8299 000066F3 01D7                <2> 		add edi, edx
  8300 000066F5 31D2                <2> 		xor edx, edx
  8301 000066F7 668B15[7E550000]    <2> 		mov dx, [resolutionx2]
  8302 000066FE 6681F90000          <2> 		cmp cx, 0
  8303 00006703 740B                <2> 		je noswmsy
  8304 00006705 01D7                <2> swmsy:		add edi, edx
  8305 00006707 6649                <2> 		dec cx
  8306 00006709 6681F90000          <2> 		cmp cx, 0
  8307 0000670E 75F5                <2> 		jne swmsy
  8308 00006710 8B06                <2> noswmsy:	mov eax, [esi]
  8309 00006712 8B5E04              <2> 		mov ebx, [esi + 4]
  8310 00006715 8907                <2> 		mov [edi], eax
  8311 00006717 895F04              <2> 		mov [edi + 4], ebx
  8312 0000671A 8B4608              <2> 		mov eax, [esi + 8]
  8313 0000671D 8B5E0C              <2> 		mov ebx, [esi + 12]
  8314 00006720 894708              <2> 		mov [edi + 8], eax
  8315 00006723 895F0C              <2> 		mov [edi + 12], ebx
  8316 00006726 01D7                <2> 		add edi, edx
  8317 00006728 81C610000000        <2> 		add esi, 16
  8318 0000672E 81FE[13D20000]      <2> 		cmp esi, mcolorend
  8319 00006734 72DA                <2> 		jb noswmsy
  8320                              <2> 		
  8321                              <2> switchmousepos2:
  8322 00006736 BE[13D10000]        <2> 		mov esi, mousecolorbuf
  8323 0000673B 8B3D[A6540000]      <2> 		mov edi, [physbaseptr]
  8324 00006741 31D2                <2> 		xor edx, edx
  8325 00006743 31C9                <2> 		xor ecx, ecx
  8326 00006745 668B15[74570000]    <2> 		mov dx, [mousecursorposition]
  8327 0000674C 668B0D[76570000]    <2> 		mov cx, [mousecursorposition + 2]
  8328 00006753 01D7                <2> 		add edi, edx
  8329 00006755 31D2                <2> 		xor edx, edx
  8330 00006757 668B15[7E550000]    <2> 		mov dx, [resolutionx2]
  8331 0000675E 6681F90000          <2> 		cmp cx, 0
  8332 00006763 740B                <2> 		je noswmsy2
  8333 00006765 01D7                <2> swmsy2:		add edi, edx
  8334 00006767 6649                <2> 		dec cx
  8335 00006769 6681F90000          <2> 		cmp cx, 0
  8336 0000676E 75F5                <2> 		jne swmsy2
  8337 00006770 8B07                <2> noswmsy2:	mov eax, [edi]
  8338 00006772 8B5F04              <2> 		mov ebx, [edi + 4]
  8339 00006775 8906                <2> 		mov [esi], eax
  8340 00006777 895E04              <2> 		mov [esi + 4], ebx
  8341 0000677A 8B4708              <2> 		mov eax, [edi + 8]
  8342 0000677D 8B5F0C              <2> 		mov ebx, [edi + 12]
  8343 00006780 894608              <2> 		mov [esi + 8], eax
  8344 00006783 895E0C              <2> 		mov [esi + 12], ebx
  8345 00006786 01D7                <2> 		add edi, edx
  8346 00006788 81C610000000        <2> 		add esi, 16
  8347 0000678E 81FE[13D20000]      <2> 		cmp esi, mcolorend
  8348 00006794 72DA                <2> 		jb noswmsy2
  8349 00006796 C3                  <2> 		ret
  8350                              <2> 		
  8351                              <1> %include "source/gui/icon.asm"
  8352 00006797 0000                <2> iconcolor dw 0
  8353                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8354 00006799 A2[617F0000]        <2> 		mov [iconselected], al
  8355 0000679E 8025[617F0000]01    <2> 		and byte [iconselected], 1
  8356 000067A5 B401                <2> 		mov ah, 1
  8357 000067A7 E8DE140000          <2> 		call graphicsadd
  8358                              <2> 	showicon2:
  8359 000067AC 8B3D[A6540000]      <2> 		mov edi, [physbaseptr]
  8360 000067B2 6601D2              <2> 		add dx, dx
  8361 000067B5 663B15[7E550000]    <2> 		cmp dx, [resolutionx2]
  8362 000067BC 720C                <2> 		jb screenxgood
  8363 000067BE 668B15[7E550000]    <2> 		mov dx, [resolutionx2]
  8364 000067C5 6681EA4000          <2> 		sub dx, 64
  8365                              <2> 	screenxgood:
  8366 000067CA 6681F90000          <2> 		cmp cx, 0
  8367 000067CF 742B                <2> 		je noscreenygoodchk
  8368 000067D1 663B0D[92540000]    <2> 		cmp cx, [resolutiony]
  8369 000067D8 720C                <2> 		jb screenygood
  8370 000067DA 668B0D[92540000]    <2> 		mov cx, [resolutiony]
  8371 000067E1 6681E92000          <2> 		sub cx, 32
  8372                              <2> 	screenygood:
  8373 000067E6 50                  <2> 		push eax
  8374 000067E7 52                  <2> 		push edx
  8375 000067E8 31C0                <2> 		xor eax, eax
  8376 000067EA 31DB                <2> 		xor ebx, ebx
  8377 000067EC 668B1D[7E550000]    <2> 		mov bx, [resolutionx2]
  8378 000067F3 6689C8              <2> 		mov ax, cx
  8379 000067F6 F7E3                <2> 		mul ebx
  8380 000067F8 01C7                <2> 		add edi, eax
  8381 000067FA 5A                  <2> 		pop edx
  8382 000067FB 58                  <2> 		pop eax
  8383                              <2> 	noscreenygoodchk:
  8384 000067FC 31DB                <2> 		xor ebx, ebx
  8385 000067FE 6689D3              <2> 		mov bx, dx
  8386 00006801 01DF                <2> 		add edi, ebx
  8387 00006803 6631C9              <2> 		xor cx, cx
  8388 00006806 668B06              <2> 		mov ax, [esi]
  8389 00006809 81C602000000        <2> 		add esi, 2
  8390 0000680F 66A3[97670000]      <2> 		mov [iconcolor], ax
  8391                              <2> 	writeicon:
  8392 00006815 8B06                <2> 		mov eax, [esi]
  8393 00006817 D1C0                <2> 		rol eax, 1
  8394 00006819 30C9                <2> 		xor cl, cl
  8395                              <2> 	writeiconline:
  8396 0000681B B201                <2> 		mov dl, 1
  8397 0000681D 20C2                <2> 		and dl, al
  8398 0000681F 3215[617F0000]      <2> 		xor dl, [iconselected]
  8399 00006825 668B1D[D8690000]    <2> 		mov bx, [background]
  8400 0000682C 66891F              <2> 		mov [edi], bx
  8401 0000682F 80FA00              <2> 		cmp dl, 0
  8402 00006832 740A                <2> 		je noiconline
  8403 00006834 668B15[97670000]    <2> 		mov dx, [iconcolor]
  8404 0000683B 668917              <2> 		mov [edi], dx
  8405                              <2> 	noiconline:
  8406 0000683E 81C702000000        <2> 		add edi, 2
  8407 00006844 D1C0                <2> 		rol eax, 1
  8408 00006846 FEC1                <2> 		inc cl
  8409 00006848 80F920              <2> 		cmp cl, 32
  8410 0000684B 72CE                <2> 		jb writeiconline
  8411 0000684D 81C604000000        <2> 		add esi, 4
  8412 00006853 FEC5                <2> 		inc ch
  8413 00006855 31D2                <2> 		xor edx, edx
  8414 00006857 668B15[7E550000]    <2> 		mov dx, [resolutionx2]
  8415 0000685E 01D7                <2> 		add edi, edx
  8416 00006860 81EF40000000        <2> 		sub edi, 64
  8417 00006866 80FD20              <2> 		cmp ch, 32
  8418 00006869 72AA                <2> 		jb writeicon
  8419 0000686B 31C0                <2> 		xor eax, eax
  8420 0000686D C3                  <2> 		ret
  8421                              <1> %include "source/gui/line.asm"
  8422                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  8423 0000686E 668935[90690000]    <2> 	mov [.color], si
  8424 00006875 C605[92690000]00    <2> 	mov byte [.steep], 0
  8425 0000687C C605[93690000]00    <2> 	mov byte [.yreversed], 0
  8426 00006883 E907000000          <2> 	jmp .notsteep
  8427                              <2> .steeploop:
  8428 00006888 C605[92690000]01    <2> 	mov byte [.steep], 1
  8429                              <2> .notsteep:
  8430 0000688F 31FF                <2> 	xor edi, edi
  8431 00006891 31F6                <2> 	xor esi, esi
  8432 00006893 6639DA              <2> 	cmp dx, bx
  8433 00006896 7705                <2> 	ja .noreversex
  8434 00006898 6687D3              <2> 	xchg dx, bx
  8435 0000689B 6691                <2> 	xchg cx, ax
  8436                              <2> .noreversex:
  8437 0000689D 6689D7              <2> 	mov di, dx
  8438 000068A0 6629DF              <2> 	sub di, bx
  8439                              <2> 	
  8440 000068A3 6639C1              <2> 	cmp cx, ax
  8441 000068A6 720B                <2> 	jb .reversey
  8442 000068A8 6689CE              <2> 	mov si, cx
  8443 000068AB 6629C6              <2> 	sub si, ax
  8444 000068AE E90D000000          <2> 	jmp .normal
  8445                              <2> .reversey:
  8446 000068B3 C605[93690000]02    <2> 	mov byte [.yreversed], 2
  8447 000068BA 6689C6              <2> 	mov si, ax
  8448 000068BD 6629CE              <2> 	sub si, cx	
  8449                              <2> .normal:
  8450 000068C0 6687CA              <2> 	xchg cx, dx
  8451 000068C3 6693                <2> 	xchg ax, bx
  8452 000068C5 6639FE              <2> 	cmp si, di
  8453 000068C8 77BE                <2> 	ja .steeploop
  8454 000068CA 6687CA              <2> 	xchg cx, dx
  8455 000068CD 6693                <2> 	xchg ax, bx
  8456                              <2> 	
  8457 000068CF 6691                <2> 	xchg ax, cx
  8458 000068D1 6687DA              <2> 	xchg bx, dx
  8459 000068D4 66893D[96690000]    <2> 	mov [.xdelta], di
  8460 000068DB 668935[98690000]    <2> 	mov [.ydelta], si
  8461 000068E2 668B35[90690000]    <2> 	mov si, [.color]
  8462 000068E9 66891D[94690000]    <2> 	mov [.endline], bx
  8463 000068F0 6652                <2> 	push dx
  8464 000068F2 6651                <2> 	push cx
  8465 000068F4 6687CA              <2> 	xchg cx, dx
  8466 000068F7 803D[92690000]01    <2> 	cmp byte [.steep], 1
  8467 000068FE 7403                <2> 	je .xchg
  8468 00006900 6687D1              <2> 	xchg dx, cx
  8469                              <2> .xchg:
  8470 00006903 E831160000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  8471 00006908 6659                <2> 	pop cx
  8472 0000690A 665A                <2> 	pop dx
  8473 0000690C 31C0                <2> 	xor eax, eax
  8474 0000690E 66A1[96690000]      <2> 	mov ax, [.xdelta]
  8475 00006914 66D1E8              <2> 	shr ax, 1
  8476 00006917 8A0D[92690000]      <2> 	mov cl, [.steep]
  8477 0000691D 0A0D[93690000]      <2> 	or cl, [.yreversed]
  8478 00006923 55                  <2> 	push ebp
  8479 00006924 668B2D[94690000]    <2> 	mov bp, [.endline]
  8480 0000692B 6629D5              <2> 	sub bp, dx
  8481 0000692E 668B15[98690000]    <2> 	mov dx, [.ydelta]
  8482                              <2> .lp:
  8483 00006935 668937              <2> 	mov [edi], si
  8484 00006938 6639D0              <2> 	cmp ax, dx
  8485 0000693B 7332                <2> 	jae .noaddx
  8486 0000693D F6C102              <2> 	test cl, 2
  8487 00006940 7414                <2> 	jz .nodecy
  8488 00006942 F6C101              <2> 	test cl, 1
  8489 00006945 7509                <2> 	jnz .steepy
  8490 00006947 29DF                <2> 	sub edi, ebx
  8491 00006949 29DF                <2> 	sub edi, ebx
  8492 0000694B E906000000          <2> 	jmp .nodecy
  8493                              <2> .steepy:
  8494 00006950 81EF04000000        <2> 	sub edi, 4
  8495                              <2> .nodecy:
  8496 00006956 660305[96690000]    <2> 	add ax, [.xdelta]
  8497 0000695D F6C101              <2> 	test cl, 1
  8498 00006960 7507                <2> 	jnz .steepx
  8499 00006962 01DF                <2> 	add edi, ebx
  8500 00006964 E906000000          <2> 	jmp .noaddx
  8501                              <2> .steepx:
  8502 00006969 81C702000000        <2> 	add edi, 2
  8503                              <2> .noaddx:
  8504 0000696F 6629D0              <2> 	sub ax, dx
  8505 00006972 664D                <2> 	dec bp
  8506 00006974 81C702000000        <2> 	add edi, 2
  8507 0000697A F6C101              <2> 	test cl, 1
  8508 0000697D 7408                <2> 	jz .nosteepx
  8509 0000697F 81EF02000000        <2> 	sub edi, 2
  8510 00006985 01DF                <2> 	add edi, ebx
  8511                              <2> .nosteepx:
  8512 00006987 6681FD0000          <2> 	cmp bp, 0
  8513 0000698C 75A7                <2> 	jne .lp
  8514                              <2> .done:
  8515 0000698E 5D                  <2> 	pop ebp
  8516 0000698F C3                  <2> 	ret
  8517                              <2> 	
  8518 00006990 0000                <2> .color dw 0
  8519 00006992 00                  <2> .steep db 0
  8520 00006993 00                  <2> .yreversed db 0
  8521 00006994 0000                <2> .endline dw 0
  8522 00006996 0000                <2> .xdelta dw 0
  8523 00006998 0000                <2> .ydelta dw 0
  8524                              <1> %include "source/gui/refresh.asm"
  8525                              <2> guiclear:
  8526 0000699A 8B3D[A6540000]      <2> 	mov edi, [physbaseptr]
  8527 000069A0 668B15[90540000]    <2> 	mov dx, [resolutionx]
  8528 000069A7 668B0D[92540000]    <2> 	mov cx, [resolutiony]
  8529                              <2> %ifdef gui.background
  8530                              <2> 	cmp dword [backgroundimage], 0
  8531                              <2> 	je guiclear.noback
  8532                              <2> 		mov esi, [backgroundimage]
  8533                              <2> 	.lp:
  8534                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  8535                              <2> 		;movdqa [edi], xmm0
  8536                              <2> 		;add esi, 16
  8537                              <2> 		;add edi, 16
  8538                              <2> 		;sub dx, 8
  8539                              <2> 		mov eax, [esi]
  8540                              <2> 		mov [edi], eax
  8541                              <2> 		add esi, 4
  8542                              <2> 		add edi, 4
  8543                              <2> 		sub dx, 2
  8544                              <2> 		cmp dx, 0
  8545                              <2> 		ja .lp
  8546                              <2> 		dec cx
  8547                              <2> 		mov dx, [resolutionx]
  8548                              <2> 		cmp cx, 0
  8549                              <2> 		ja .lp
  8550                              <2> 		ret
  8551                              <2> 	backgroundimage dd 0
  8552                              <2> %endif
  8553                              <2> guiclear.noback:
  8554 000069AE A1[D8690000]        <2> 	mov eax, [background]
  8555                              <2> guiclearloop:
  8556 000069B3 8907                <2> 	mov [edi], eax
  8557 000069B5 81C704000000        <2> 	add edi, 4
  8558 000069BB 6681EA0200          <2> 	sub dx, 2
  8559 000069C0 6681FA0000          <2> 	cmp dx, 0
  8560 000069C5 77EC                <2> 	ja guiclearloop
  8561 000069C7 6649                <2> 	dec cx
  8562 000069C9 668B15[90540000]    <2> 	mov dx, [resolutionx]
  8563 000069D0 6681F90000          <2> 	cmp cx, 0
  8564 000069D5 77DC                <2> 	ja guiclearloop
  8565 000069D7 C3                  <2> 	ret
  8566                              <2> 
  8567 000069D8 CF7B<rept>          <2> background times 2 dw 0111101111001111b
  8568                              <2> 
  8569                              <2> reloadallgraphics:
  8570 000069DC BF[13CF0000]        <2> 		mov edi, graphicstable
  8571                              <2> reloadgraphicsloop:
  8572 000069E1 8B7702              <2> 		mov esi, [edi + 2]
  8573 000069E4 668B5706            <2> 		mov dx, [edi + 6]
  8574 000069E8 668B4F08            <2> 		mov cx, [edi + 8]
  8575 000069EC 668B07              <2> 		mov ax, [edi]
  8576 000069EF 668B5F0A            <2> 		mov bx, [edi + 10]
  8577 000069F3 893D[767C0000]      <2> 		mov [grpctblpos], edi
  8578 000069F9 3B3D[0D770000]      <2> 		cmp edi, [dragging]
  8579 000069FF 741E                <2> 		je loadedgraphic
  8580 00006A01 663D0100            <2> 		cmp ax, 1
  8581 00006A05 0F8436000000        <2> 		je near icongraphic
  8582 00006A0B 663D0200            <2> 		cmp ax, 2
  8583 00006A0F 0F843C000000        <2> 		je near stringgraphic
  8584 00006A15 663D0300            <2> 		cmp ax, 3
  8585 00006A19 0F8416000000        <2> 		je near windowgraphic
  8586 00006A1F 8B3D[767C0000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  8587 00006A25 81C710000000        <2> 		add edi, 16
  8588 00006A2B 81FF[13D10000]      <2> 		cmp edi, graphicstableend
  8589 00006A31 732E                <2> 		jae donereloadgraphics
  8590 00006A33 EBAC                <2> 		jmp reloadgraphicsloop
  8591                              <2> windowgraphic:
  8592 00006A35 E83E080000          <2> 		call showwindow2
  8593 00006A3A E886B3FFFF          <2> 		call cleardouble
  8594 00006A3F EBDE                <2> 		jmp loadedgraphic
  8595 00006A41 80E301              <2> icongraphic:	and bl, 1
  8596 00006A44 881D[617F0000]      <2> 		mov [iconselected], bl
  8597 00006A4A E85DFDFFFF          <2> 		call showicon2
  8598 00006A4F EBCE                <2> 		jmp loadedgraphic
  8599 00006A51 80E301              <2> stringgraphic:  and bl, 1
  8600 00006A54 881D[09770000]      <2> 		mov [mouseselecton], bl
  8601 00006A5A E805050000          <2> 		call showstring2
  8602 00006A5F EBBE                <2> 		jmp loadedgraphic
  8603                              <2> donereloadgraphics:
  8604 00006A61 8B3D[0D770000]      <2> 		mov edi, [dragging]
  8605 00006A67 81FF[13CF0000]      <2> 		cmp edi, graphicstable
  8606 00006A6D 7226                <2> 		jb notcorrectdrag
  8607 00006A6F 668B07              <2> 		mov ax, [edi]
  8608 00006A72 8B7702              <2> 		mov esi, [edi + 2]
  8609 00006A75 668B5706            <2> 		mov dx, [edi + 6]
  8610 00006A79 668B4F08            <2> 		mov cx, [edi + 8]
  8611 00006A7D 668B5F0A            <2> 		mov bx, [edi + 10]
  8612 00006A81 663D0100            <2> 		cmp ax, 1
  8613 00006A85 750F                <2> 		jne noticondragging
  8614 00006A87 80E301              <2> 		and bl, 1
  8615 00006A8A 881D[617F0000]      <2> 		mov [iconselected], bl
  8616 00006A90 E817FDFFFF          <2> 		call showicon2
  8617                              <2> notcorrectdrag:
  8618 00006A95 C3                  <2> 		ret
  8619                              <2> 
  8620                              <2> 	noticondragging:
  8621 00006A96 663D0200            <2> 		cmp ax, 2
  8622 00006A9A 75F9                <2> 		jne notcorrectdrag
  8623 00006A9C 80E301              <2> 		and bl, 1
  8624 00006A9F 881D[09770000]      <2> 		mov [mouseselecton], bl
  8625 00006AA5 E8BA040000          <2> 		call showstring2
  8626 00006AAA EBE9                <2> 		jmp notcorrectdrag
  8627                              <1> %include "source/gui/startup.asm"
  8628                              <2> guisetup:
  8629                              <2> 	%ifdef gui.background
  8630                              <2> 	xor ebx, ebx
  8631                              <2> 	mov [backgroundimage], ebx
  8632                              <2> 	%endif
  8633 00006AAC E8E9FEFFFF          <2> 	call guiclear
  8634 00006AB1 C605[389E0000]01    <2> 	mov byte [guion], 1
  8635 00006AB8 C605[09770000]00    <2> 	mov byte [mouseselecton], 0
  8636 00006ABF 31C0                <2> 	xor eax, eax
  8637 00006AC1 31DB                <2> 	xor ebx, ebx
  8638 00006AC3 31C9                <2> 	xor ecx, ecx
  8639 00006AC5 31D2                <2> 	xor edx, edx
  8640                              <2> 	
  8641 00006AC7 BE[896C0000]        <2> 	mov esi, pacmsg
  8642 00006ACC 30E4                <2> 	xor ah, ah
  8643 00006ACE B010                <2> 	mov al, 00010000b
  8644 00006AD0 31DB                <2> 	xor ebx, ebx
  8645 00006AD2 66B99000            <2> 	mov cx, 144
  8646 00006AD6 66BA0400            <2> 	mov dx, 4
  8647 00006ADA E872040000          <2> 	call showstring
  8648                              <2> 	
  8649 00006ADF BE[C76C0000]        <2> 	mov esi, interneticon
  8650 00006AE4 30E4                <2> 	xor ah, ah
  8651 00006AE6 B010                <2> 	mov al, 00010000b
  8652 00006AE8 BB[B26B0000]        <2> 	mov ebx, noie
  8653 00006AED 66B91800            <2> 	mov cx, 24
  8654 00006AF1 66BA0400            <2> 	mov dx, 4
  8655 00006AF5 E89FFCFFFF          <2> 	call showicon
  8656                              <2> 	
  8657 00006AFA BE[496D0000]        <2> 	mov esi, wordicon
  8658 00006AFF 30E4                <2> 	xor ah, ah
  8659 00006B01 B010                <2> 	mov al, 00010000b
  8660 00006B03 31DB                <2> 	xor ebx, ebx
  8661 00006B05 66B91800            <2> 	mov cx, 24
  8662 00006B09 66BA3000            <2> 	mov dx, 48
  8663 00006B0D E887FCFFFF          <2> 	call showicon
  8664                              <2> 	
  8665 00006B12 BE[CB6D0000]        <2> 	mov esi, pacmanpellet
  8666 00006B17 30E4                <2> 	xor ah, ah
  8667 00006B19 B010                <2> 	mov al, 00010000b
  8668 00006B1B 31DB                <2> 	xor ebx, ebx
  8669 00006B1D 66B94000            <2> 	mov cx, 64
  8670 00006B21 66BA0400            <2> 	mov dx, 4
  8671 00006B25 E86FFCFFFF          <2> 	call showicon
  8672                              <2> 	
  8673 00006B2A BE[CF6E0000]        <2> 	mov esi, pacman
  8674 00006B2F 30E4                <2> 	xor ah, ah
  8675 00006B31 B010                <2> 	mov al, 00010000b
  8676 00006B33 BB[9B6B0000]        <2> 	mov ebx, pacmannomnom
  8677 00006B38 66B94000            <2> 	mov cx, 64
  8678 00006B3C 66BA3000            <2> 	mov dx, 48
  8679 00006B40 E854FCFFFF          <2> 	call showicon
  8680                              <2> 	
  8681 00006B45 BE[4D6E0000]        <2> 	mov esi, ghostie
  8682 00006B4A 30E4                <2> 	xor ah, ah
  8683 00006B4C B010                <2> 	mov al, 00010000b
  8684 00006B4E BB[846B0000]        <2> 	mov ebx, boo
  8685 00006B53 66B96C00            <2> 	mov cx, 108
  8686 00006B57 66BA0400            <2> 	mov dx, 4
  8687 00006B5B E839FCFFFF          <2> 	call showicon
  8688                              <2> 	
  8689 00006B60 BE[6B6C0000]        <2> 	mov esi, start
  8690 00006B65 668B0D[92540000]    <2> 	mov cx, [resolutiony]
  8691 00006B6C 6681E91000          <2> 	sub cx, 16
  8692 00006B71 66BA0200            <2> 	mov dx, 2
  8693 00006B75 30E4                <2> 	xor ah, ah
  8694 00006B77 B010                <2> 	mov al, 00010000b
  8695 00006B79 BB[276C0000]        <2> 	mov ebx, winblows
  8696 00006B7E E8CE030000          <2> 	call showstring
  8697                              <2> 
  8698                              <2> %ifdef gui.time	
  8699                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  8700                              <2> %endif
  8701 00006B83 C3                  <2> 	ret
  8702                              <2> 
  8703                              <2> 	boo:
  8704 00006B84 BE[846C0000]        <2> 		mov esi, boomsg
  8705 00006B89 66BA6400            <2> 		mov dx, 100
  8706 00006B8D 66B94001            <2> 		mov cx, 320
  8707 00006B91 31DB                <2> 		xor ebx, ebx
  8708 00006B93 6631C0              <2> 		xor ax, ax
  8709 00006B96 E9B6030000          <2> 		jmp showstring
  8710                              <2> 
  8711                              <2> 	pacmannomnom:
  8712 00006B9B BE[A26C0000]        <2> 		mov esi, pacnom
  8713 00006BA0 66BA8200            <2> 		mov dx, 130
  8714 00006BA4 66B93C00            <2> 		mov cx, 60
  8715 00006BA8 31DB                <2> 		xor ebx, ebx
  8716 00006BAA 6631C0              <2> 		xor ax, ax
  8717 00006BAD E99F030000          <2> 		jmp showstring	
  8718                              <2> 	
  8719                              <2> 	noie:
  8720 00006BB2 66C705[B16C0000]80- <2> 		mov word [termwindow], 640
  8721 00006BBA 02                  <2>
  8722 00006BBB 66C705[B36C0000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  8723 00006BC3 01                  <2>
  8724 00006BC4 BE[B16C0000]        <2> 		mov esi, termwindow
  8725 00006BC9 66BA1000            <2> 		mov dx, 16
  8726 00006BCD 66B91000            <2> 		mov cx, 16
  8727 00006BD1 31DB                <2> 		xor ebx, ebx
  8728 00006BD3 6631C0              <2> 		xor ax, ax
  8729 00006BD6 E8DF050000          <2> 		call showwindow
  8730 00006BDB E921BCFFFF          <2> 		jmp os
  8731                              <2> 
  8732                              <2> 	gotomenuboot:
  8733 00006BE0 31D2                <2> 		xor edx, edx
  8734 00006BE2 31C9                <2> 		xor ecx, ecx
  8735 00006BE4 668B15[90540000]    <2> 		mov dx, [resolutionx]
  8736 00006BEB 668B0D[92540000]    <2> 		mov cx, [resolutiony]
  8737 00006BF2 66C1E904            <2> 		shr cx, 4
  8738 00006BF6 6681E90100          <2> 		sub cx, 1
  8739 00006BFB 66C1E104            <2> 		shl cx, 4
  8740 00006BFF 668915[B16C0000]    <2> 		mov [termwindow], dx
  8741 00006C06 66890D[B36C0000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  8742 00006C0D BE[B16C0000]        <2> 		mov esi, termwindow
  8743 00006C12 6631D2              <2> 		xor dx, dx
  8744 00006C15 6631C9              <2> 		xor cx, cx
  8745 00006C18 31DB                <2> 		xor ebx, ebx
  8746 00006C1A 6631C0              <2> 		xor ax, ax
  8747 00006C1D E898050000          <2> 		call showwindow
  8748 00006C22 E9DABBFFFF          <2> 		jmp os
  8749                              <2> 
  8750                              <2> 	winblows:
  8751 00006C27 BE[7A6C0000]        <2> 		mov esi, turnoffmsg
  8752 00006C2C BB[F24F0000]        <2> 		mov ebx, turnoff
  8753 00006C31 668B0D[92540000]    <2> 		mov cx, [resolutiony]
  8754 00006C38 6681E92000          <2> 		sub cx, 32
  8755 00006C3D 6631D2              <2> 		xor dx, dx
  8756 00006C40 30E4                <2> 		xor ah, ah
  8757 00006C42 B010                <2> 		mov al, 00010000b
  8758 00006C44 E808030000          <2> 		call showstring
  8759 00006C49 BE[716C0000]        <2> 		mov esi, gotomenu
  8760 00006C4E 668B0D[92540000]    <2> 		mov cx, [resolutiony]
  8761 00006C55 6681E93000          <2> 		sub cx, 48
  8762 00006C5A 6631D2              <2> 		xor dx, dx
  8763 00006C5D 30E4                <2> 		xor ah, ah
  8764 00006C5F B010                <2> 		mov al, 00010000b
  8765 00006C61 BB[E06B0000]        <2> 		mov ebx, gotomenuboot
  8766 00006C66 E9E6020000          <2> 		jmp showstring
  8767                              <2> 		
  8768                              <2> 
  8769 00006C6B 737461727400        <2> 	start	db "start",0
  8770 00006C71 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  8771 00006C7A 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  8772 00006C83 00                  <2>
  8773 00006C84 426F6F2100          <2> 	boomsg db "Boo!",0
  8774 00006C89 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  8775 00006C92 73206561737920746F- <2>
  8776 00006C9B 20647261772E00      <2>
  8777 00006CA2 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  8778 00006CAB 6D206E6F6D00        <2>
  8779                              <2> 
  8780 00006CB1 20035802            <2> 	termwindow:	dw 800,600	;window size
  8781 00006CB5 FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  8782 00006CB9 [14D20000]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  8783 00006CBD [B83C0100]          <2>
  8784 00006CC1 534855536800        <2> 	termmsg:	db "SHUSh",0	;;window title
  8785                              <2> 	
  8786 00006CC1 <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  8787 00006CC1 <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  8788 00006CC1 <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  8789 00006CC1 <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  8790 00006CC1 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  8791                              <2> 
  8792                              <2> %ifdef gui.time
  8793                              <2> guitime:
  8794                              <2> 		call time	;get rtc in timeshow & dateshow
  8795                              <2> 		xor ebx, ebx
  8796                              <2> 		mov dx, [resolutionx2]
  8797                              <2> 		xor cx, cx
  8798                              <2> 		sub dx, 304
  8799                              <2> 		mov esi, dateshow
  8800                              <2> 		mov al, 00010001b
  8801                              <2> 		call showstring
  8802                              <2> 		mov esi, timeshow
  8803                              <2> 		xor ebx, ebx
  8804                              <2> 		mov al, 00010001b
  8805                              <2> 		call showstring
  8806                              <2> 		ret
  8807                              <2> %endif
  8808                              <1> %include "source/gui/text.asm"
  8809                              <2> 	showstring:
  8810 00006F51 A2[09770000]        <2> 		mov [mouseselecton], al
  8811 00006F56 8025[09770000]01    <2> 		and byte [mouseselecton], 1
  8812 00006F5D B402                <2> 		mov ah, 2
  8813 00006F5F E8260D0000          <2> 		call graphicsadd
  8814                              <2> 	showstring2:
  8815 00006F64 30E4                <2> 		xor ah, ah
  8816 00006F66 8A06                <2> 		mov al, [esi]
  8817 00006F68 3C00                <2> 		cmp al, 0
  8818 00006F6A 741E                <2> 		je doneshowstring
  8819 00006F6C 46                  <2> 		inc esi
  8820 00006F6D 3CFF                <2> 		cmp al, 255
  8821 00006F6F 74F3                <2> 		je showstring2
  8822 00006F71 56                  <2> 		push esi
  8823 00006F72 668B1D[926F0000]    <2> 		mov bx, [colorfont2]
  8824 00006F79 E825000000          <2> 		call showfontvesa
  8825 00006F7E 3C0A                <2> 		cmp al, 10
  8826 00006F80 7405                <2> 		je noproceedshst
  8827 00006F82 6681C20800          <2> 		add dx, 8
  8828                              <2> 	noproceedshst:
  8829 00006F87 5E                  <2> 		pop esi
  8830 00006F88 EBDA                <2> 		jmp showstring2
  8831                              <2> 	doneshowstring:
  8832 00006F8A C605[09770000]00    <2> 		mov byte [mouseselecton], 0
  8833 00006F91 C3                  <2> 		ret
  8834                              <2> 
  8835 00006F92 FFFF                <2> colorfont2 dw 0xFFFF
  8836 00006F94 00                  <2> colorcache db 0
  8837                              <2> 
  8838 00006F95 02                  <2> resolutionbytes db 2
  8839 00006F96 0000                <2> posxvesa dw 0
  8840 00006F98 0000                <2> posyvesa dw 0
  8841 00006F9A FFFF                <2> colorfont dw 0xFFFF
  8842                              <2> savefontvesa:		;;same rules as showfontvesa
  8843 00006F9C C605[08770000]01    <2> 	mov byte [savefonton], 1
  8844                              <2> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  8845 00006FA3 3CFF                <2> 	cmp al, 255
  8846 00006FA5 7501                <2> 	jne nostopshowfont
  8847 00006FA7 C3                  <2> 	ret
  8848                              <2> nostopshowfont:
  8849 00006FA8 66890D[986F0000]    <2> 	mov [posyvesa], cx
  8850 00006FAF 3C0A                <2> 	cmp al, 10
  8851 00006FB1 0F8424000000        <2> 	je near goodvesafontx
  8852 00006FB7 31C9                <2> 	xor ecx, ecx
  8853 00006FB9 668B0D[7E550000]    <2> 	mov cx, [resolutionx2]
  8854 00006FC0 6639CA              <2> 	cmp dx, cx
  8855 00006FC3 7616                <2> 	jbe goodvesafontx
  8856 00006FC5 6631D2              <2> 	xor dx, dx
  8857 00006FC8 668B0D[986F0000]    <2> 	mov cx, [posyvesa]
  8858 00006FCF 6681C11000          <2> 	add cx, 16
  8859 00006FD4 66890D[986F0000]    <2> 	mov [posyvesa], cx
  8860                              <2> goodvesafontx:
  8861 00006FDB 668B0D[986F0000]    <2> 	mov cx, [posyvesa]
  8862 00006FE2 668915[966F0000]    <2> 	mov [posxvesa], dx
  8863 00006FE9 8B3D[A6540000]      <2> 	mov edi, [physbaseptr]
  8864 00006FEF 66891D[9A6F0000]    <2> 	mov [colorfont], bx
  8865 00006FF6 31DB                <2> 	xor ebx, ebx
  8866 00006FF8 88C3                <2> 	mov bl, al
  8867 00006FFA 31C0                <2> 	xor eax, eax
  8868 00006FFC 88D8                <2> 	mov al, bl
  8869 00006FFE 6689D3              <2> 	mov bx, dx
  8870 00007001 89DA                <2> 	mov edx, ebx
  8871 00007003 31DB                <2> 	xor ebx, ebx
  8872 00007005 6681F90000          <2> 	cmp cx, 0
  8873 0000700A 7414                <2> 	je vesaposloopdn
  8874 0000700C 668B1D[7E550000]    <2> 	mov bx, [resolutionx2]
  8875                              <2> vesaposloop:
  8876 00007013 52                  <2> 	push edx
  8877 00007014 50                  <2> 	push eax
  8878 00007015 31C0                <2> 	xor eax, eax
  8879 00007017 6689C8              <2> 	mov ax, cx
  8880 0000701A F7E3                <2> 	mul ebx
  8881 0000701C 01C7                <2> 	add edi, eax
  8882 0000701E 58                  <2> 	pop eax
  8883 0000701F 5A                  <2> 	pop edx
  8884                              <2> vesaposloopdn:
  8885 00007020 01D7                <2> 	add edi, edx
  8886 00007022 BE[838C0000]        <2> 	mov esi, fonts
  8887                              <2> findfontvesa:
  8888 00007027 30E4                <2> 	xor ah, ah
  8889 00007029 3C0A                <2> 	cmp al, 10
  8890 0000702B 0F84FE000000        <2> 	je near nwlinevesa
  8891 00007031 C1E004              <2> 	shl eax, 4
  8892 00007034 01C6                <2> 	add esi, eax
  8893 00007036 C1E804              <2> 	shr eax, 4
  8894 00007039 81FE[839C0000]      <2> 	cmp esi, fontend
  8895 0000703F 0F83B9000000        <2> 	jae near donefontvesa
  8896 00007045 4E                  <2> 	dec esi
  8897                              <2> foundfontvesa:
  8898 00007046 46                  <2> 	inc esi
  8899 00007047 803D[08770000]01    <2> 	cmp byte [savefonton], 1
  8900 0000704E 0F8401010000        <2> 	je near vesafontsaver
  8901 00007054 30C9                <2> 	xor cl, cl
  8902 00007056 8A06                <2> 	mov al, [esi]
  8903 00007058 668B15[7E550000]    <2> 	mov dx, [resolutionx2]
  8904 0000705F 662B15[966F0000]    <2> 	sub dx, [posxvesa]
  8905 00007066 6681FA1000          <2> 	cmp dx, 16
  8906 0000706B 7708                <2> 	ja paintfontvesa
  8907 0000706D D0EA                <2> 	shr dl, 1
  8908 0000706F 8815[2E710000]      <2> 	mov [charwidth], dl
  8909                              <2> paintfontvesa:
  8910 00007075 B201                <2> 	mov dl, 1
  8911 00007077 20C2                <2> 	and dl, al
  8912 00007079 803D[07770000]01    <2> 	cmp byte [showcursorfonton], 1
  8913 00007080 0F8435000000        <2> 	je near nodelpaintedfont
  8914 00007086 803D[07770000]02    <2> 	cmp byte [showcursorfonton], 2
  8915 0000708D 0F8518000000        <2> 	jne near noswitchcursorfonton
  8916 00007093 80FA00              <2> 	cmp dl, 0
  8917 00007096 0F842E000000        <2> 	je near nopixelset
  8918 0000709C 668B1D[9A6F0000]    <2> 	mov bx, [colorfont]
  8919 000070A3 66891F              <2> 	mov [edi], bx
  8920 000070A6 E91F000000          <2> 	jmp nopixelset
  8921                              <2> noswitchcursorfonton:
  8922 000070AB 3215[09770000]      <2> 	xor dl, [mouseselecton]
  8923 000070B1 668B1D[D8690000]    <2> 	mov bx, [background]
  8924 000070B8 66891F              <2> 	mov [edi], bx
  8925                              <2> nodelpaintedfont:
  8926 000070BB 80FA00              <2> 	cmp dl, 0
  8927 000070BE 740A                <2> 	je nopixelset
  8928 000070C0 668B15[9A6F0000]    <2> 	mov dx, [colorfont]
  8929 000070C7 668917              <2> 	mov [edi], dx
  8930                              <2> nopixelset:
  8931 000070CA 81C702000000        <2> 	add edi, 2
  8932 000070D0 D0C0                <2> 	rol al, 1
  8933 000070D2 FEC1                <2> 	inc cl
  8934 000070D4 3A0D[2E710000]      <2> 	cmp cl, [charwidth]
  8935 000070DA 7299                <2> 	jb paintfontvesa
  8936 000070DC FEC5                <2> 	inc ch
  8937 000070DE 31D2                <2> 	xor edx, edx
  8938 000070E0 668B15[7E550000]    <2> 	mov dx, [resolutionx2]
  8939 000070E7 01D7                <2> 	add edi, edx
  8940 000070E9 31D2                <2> 	xor edx, edx
  8941 000070EB 8A15[2E710000]      <2> 	mov dl, [charwidth]
  8942 000070F1 00D2                <2> 	add dl, dl
  8943 000070F3 29D7                <2> 	sub edi, edx
  8944 000070F5 80FD10              <2> 	cmp ch, 16
  8945 000070F8 0F8248FFFFFF        <2> 	jb foundfontvesa
  8946                              <2> donefontvesa:
  8947 000070FE B208                <2> 	mov dl, 8
  8948 00007100 8815[2E710000]      <2> 	mov [charwidth], dl
  8949 00007106 668B15[966F0000]    <2> 	mov dx, [posxvesa]
  8950 0000710D 8A1D[2E710000]      <2> 	mov bl, [charwidth]
  8951 00007113 30FF                <2> 	xor bh, bh
  8952 00007115 6601DA              <2> 	add dx, bx
  8953 00007118 668B1D[9A6F0000]    <2> 	mov bx, [colorfont]
  8954 0000711F 668B0D[986F0000]    <2> 	mov cx, [posyvesa]
  8955 00007126 C605[08770000]00    <2> 	mov byte [savefonton], 0
  8956 0000712D C3                  <2> 	ret
  8957 0000712E 08                  <2> charwidth db 8
  8958                              <2> nwlinevesa:
  8959 0000712F 668B15[966F0000]    <2> 	mov dx, [posxvesa]
  8960 00007136 6631D2              <2> 	xor dx, dx
  8961 00007139 668915[966F0000]    <2> 	mov [posxvesa], dx
  8962 00007140 668B0D[986F0000]    <2> 	mov cx, [posyvesa]
  8963 00007147 6681C11000          <2> 	add cx, 16
  8964 0000714C 66890D[986F0000]    <2> 	mov [posyvesa], cx
  8965 00007153 EBA9                <2> 	jmp donefontvesa
  8966                              <2> vesafontsaver:
  8967 00007155 30C0                <2> 	xor al, al
  8968 00007157 30C9                <2> 	xor cl, cl
  8969                              <2> vesafontsaver2:
  8970 00007159 668B17              <2> 	mov dx, [edi]
  8971 0000715C 663B15[9A6F0000]    <2> 	cmp dx, [colorfont]
  8972 00007163 742F                <2> 	je colorfontmatch
  8973                              <2> donecolormatch:
  8974 00007165 81C702000000        <2> 	add edi, 2
  8975 0000716B D0C0                <2> 	rol al, 1
  8976 0000716D FEC1                <2> 	inc cl
  8977 0000716F 80F908              <2> 	cmp cl, 8
  8978 00007172 72E5                <2> 	jb vesafontsaver2
  8979 00007174 8806                <2> 	mov [esi], al
  8980 00007176 46                  <2> 	inc esi
  8981 00007177 FEC5                <2> 	inc ch
  8982 00007179 31D2                <2> 	xor edx, edx
  8983 0000717B 668B15[7E550000]    <2> 	mov dx, [resolutionx2]
  8984 00007182 01D7                <2> 	add edi, edx
  8985 00007184 81EF10000000        <2> 	sub edi, 16
  8986 0000718A 80FD10              <2> 	cmp ch, 16
  8987 0000718D 72C6                <2> 	jb vesafontsaver
  8988 0000718F E96AFFFFFF          <2> 	jmp donefontvesa
  8989                              <2> colorfontmatch:
  8990 00007194 0401                <2> 	add al, 1
  8991 00007196 EBCD                <2> 	jmp donecolormatch
  8992                              <1> %include "source/gui/window.asm"
  8993 00007198 0000                <2> winvcopystx dw 0
  8994 0000719A 0000                <2> winvcopysty dw 0
  8995 0000719C 0000                <2> winvcopydx dw 0
  8996 0000719E 0000                <2> winvcopycx dw 0
  8997 000071A0 FFFF0000            <2> windowcolor dw 0xFFFF,0
  8998 000071A4 00000000            <2> windowbufloc: dd 0
  8999 000071A8 00000000            <2> windowvideobuf dd 0
  9000 000071AC 00000000            <2> windowvideobuf2 dd 0
  9001 000071B0 00000000            <2> windowinfobuf dd 0
  9002 000071B4 0000                <2> termcol dw 0
  9003 000071B6 00000000            <2> wincopyendpos dd 0
  9004                              <2> 
  9005                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9006 000071BA C605[61220000]01    <2> 		mov byte [termguion], 1
  9007 000071C1 6681C11000          <2> 		add cx, 16
  9008 000071C6 668915[98710000]    <2> 		mov [winvcopystx], dx
  9009 000071CD 66890D[9A710000]    <2> 		mov [winvcopysty], cx
  9010 000071D4 8935[B0710000]      <2> 		mov [windowinfobuf], esi
  9011 000071DA 668B16              <2> 		mov dx, [esi]
  9012 000071DD 668B4E02            <2> 		mov cx, [esi + 2]
  9013 000071E1 31C0                <2> 		xor eax, eax
  9014 000071E3 31DB                <2> 		xor ebx, ebx
  9015 000071E5 6689D0              <2> 		mov ax, dx
  9016 000071E8 6689CB              <2> 		mov bx, cx
  9017 000071EB 66C1E803            <2> 		shr ax, 3
  9018 000071EF 66C1EB04            <2> 		shr bx, 4
  9019 000071F3 66A3[B4710000]      <2> 		mov [termcol], ax
  9020 000071F9 A2[3B240000]        <2> 		mov [charxy], al
  9021 000071FE 881D[3C240000]      <2> 		mov [charxy + 1], bl
  9022 00007204 8B7E04              <2> 		mov edi, [esi + 4]
  9023 00007207 893D[A0710000]      <2> 		mov [windowcolor], edi
  9024 0000720D 8B7E0C              <2> 		mov edi, [esi + 12]
  9025 00007210 893D[AC710000]      <2> 		mov [windowvideobuf2], edi
  9026 00007216 8B7E08              <2> 		mov edi, [esi + 8]
  9027 00007219 893D[A8710000]      <2> 		mov [windowvideobuf], edi
  9028 0000721F 81FB00000000        <2> 		cmp ebx, 0
  9029 00007225 0F84BB040000        <2> 		je near donewincopynow
  9030                              <2> 	findendposwin:
  9031 0000722B 01C7                <2> 		add edi, eax
  9032 0000722D 01C7                <2> 		add edi, eax
  9033 0000722F 4B                  <2> 		dec ebx
  9034 00007230 81FB00000000        <2> 		cmp ebx, 0
  9035 00007236 77F3                <2> 		ja findendposwin
  9036 00007238 893D[B6710000]      <2> 		mov [wincopyendpos], edi
  9037 0000723E 31FF                <2> 		xor edi, edi
  9038 00007240 6631C0              <2> 		xor ax, ax
  9039 00007243 6631DB              <2> 		xor bx, bx
  9040 00007246 6601D2              <2> 		add dx, dx
  9041 00007249 668915[9C710000]    <2> 		mov [winvcopydx], dx
  9042 00007250 66890D[9E710000]    <2> 		mov [winvcopycx], cx
  9043 00007257 668B0D[9A710000]    <2> 		mov cx, [winvcopysty]
  9044 0000725E 6681E91000          <2> 		sub cx, 16
  9045 00007263 668B15[98710000]    <2> 		mov dx, [winvcopystx]
  9046 0000726A C605[62220000]00    <2> 		mov byte [termcopyon], 0
  9047 00007271 B403                <2> 		mov ah, 3
  9048 00007273 E8120A0000          <2> 		call graphicsadd
  9049                              <2> 	showwindow2:
  9050 00007278 6681C11000          <2> 		add cx, 16
  9051 0000727D 668915[98710000]    <2> 		mov [winvcopystx], dx
  9052 00007284 66890D[9A710000]    <2> 		mov [winvcopysty], cx
  9053 0000728B 668B16              <2> 		mov dx, [esi]
  9054 0000728E 668B4E02            <2> 		mov cx, [esi + 2]
  9055 00007292 6601D2              <2> 		add dx, dx
  9056 00007295 668915[9C710000]    <2> 		mov [winvcopydx], dx
  9057 0000729C 66890D[9E710000]    <2> 		mov [winvcopycx], cx
  9058 000072A3 E818000000          <2> 		call reloadwindowtitle
  9059 000072A8 803D[717C0000]01    <2> 		cmp byte [windrag], 1
  9060 000072AF 0F8340040000        <2> 		jae near forgetresetstuff
  9061 000072B5 8B3D[A4710000]      <2> 		mov edi, [windowbufloc]
  9062 000072BB E968020000          <2> 		jmp windowvideocopyset
  9063                              <2> 		
  9064                              <2> 	reloadwindowtitle:
  9065 000072C0 8B3D[A4710000]      <2> 		mov edi, [windowbufloc]
  9066 000072C6 31D2                <2> 		xor edx, edx
  9067 000072C8 668B15[7E550000]    <2> 		mov dx, [resolutionx2]
  9068 000072CF C1E204              <2> 		shl edx, 4
  9069 000072D2 29D7                <2> 		sub edi, edx
  9070 000072D4 803D[62220000]00    <2> 		cmp byte [termcopyon], 0
  9071 000072DB 7532                <2> 		jne nocleartitlebarpos
  9072 000072DD 8B3D[A6540000]      <2> 		mov edi, [physbaseptr]
  9073 000072E3 31D2                <2> 		xor edx, edx
  9074 000072E5 668B15[98710000]    <2> 		mov dx, [winvcopystx]
  9075 000072EC 01D7                <2> 		add edi, edx
  9076 000072EE 31C9                <2> 		xor ecx, ecx
  9077 000072F0 668B0D[9A710000]    <2> 		mov cx, [winvcopysty]
  9078 000072F7 6681E91000          <2> 		sub cx, 16
  9079 000072FC 6681F90000          <2> 		cmp cx, 0
  9080 00007301 740C                <2> 		je nocleartitlebarpos
  9081                              <2> 	cleartitlebarpos:
  9082 00007303 31C0                <2> 		xor eax, eax
  9083 00007305 66A1[7E550000]      <2> 		mov ax, [resolutionx2]
  9084 0000730B F7E1                <2> 		mul ecx
  9085 0000730D 01C7                <2> 		add edi, eax
  9086                              <2> 	nocleartitlebarpos:
  9087 0000730F 66B91000            <2> 		mov cx, 16
  9088 00007313 668B15[9C710000]    <2> 		mov dx, [winvcopydx]
  9089 0000731A 6681F90000          <2> 		cmp cx, 0
  9090 0000731F 0F8448000000        <2> 		je near canceltitlebarput
  9091 00007325 6681FA0000          <2> 		cmp dx, 0
  9092 0000732A 0F843D000000        <2> 		je near canceltitlebarput
  9093                              <2> 	titlebarput:
  9094 00007330 66A1[A0710000]      <2> 		mov ax, [windowcolor]
  9095 00007336 668907              <2> 		mov [edi], ax
  9096 00007339 6681EA0200          <2> 		sub dx, 2
  9097 0000733E 81C702000000        <2> 		add edi, 2
  9098 00007344 6681FA0000          <2> 		cmp dx, 0
  9099 00007349 75E5                <2> 		jne titlebarput
  9100 0000734B 31D2                <2> 		xor edx, edx
  9101 0000734D 668B15[7E550000]    <2> 		mov dx, [resolutionx2]
  9102 00007354 6649                <2> 		dec cx
  9103 00007356 662B15[9C710000]    <2> 		sub dx, [winvcopydx]
  9104 0000735D 01D7                <2> 		add edi, edx
  9105 0000735F 668B15[9C710000]    <2> 		mov dx, [winvcopydx]
  9106 00007366 6681F90000          <2> 		cmp cx, 0
  9107 0000736B 75C3                <2> 		jne titlebarput
  9108                              <2> 	canceltitlebarput:
  9109 0000736D 893D[A4710000]      <2> 		mov [windowbufloc], edi
  9110 00007373 803D[62220000]02    <2> 		cmp byte [termcopyon], 2
  9111 0000737A 0F8416010000        <2> 		je near winvcpst
  9112 00007380 668B1D[D8690000]    <2> 		mov bx, [background]
  9113 00007387 6653                <2> 		push bx
  9114                              <2> 		;mov bx, 1111111111111111b
  9115 00007389 6631DB              <2> 		xor bx, bx
  9116 0000738C 66891D[D8690000]    <2> 		mov [background], bx
  9117 00007393 6631C0              <2> 		xor ax, ax
  9118 00007396 81C610000000        <2> 		add esi, 16
  9119 0000739C 668B15[98710000]    <2> 		mov dx, [winvcopystx]
  9120 000073A3 668B0D[9A710000]    <2> 		mov cx, [winvcopysty]
  9121 000073AA 6681E91000          <2> 		sub cx, 16
  9122 000073AF 668B1D[A0710000]    <2> 		mov bx, [windowcolor]
  9123 000073B6 C605[09770000]01    <2> 		mov byte [mouseselecton], 1
  9124 000073BD E8A2FBFFFF          <2> 		call showstring2	;Show window title
  9125 000073C2 8B35[9D290000]      <2> 		mov esi, [usercache]
  9126 000073C8 6681C21000          <2> 		add dx, 16
  9127 000073CD C605[09770000]01    <2> 		mov byte [mouseselecton], 1
  9128 000073D4 E88BFBFFFF          <2> 		call showstring2	;Show user name
  9129 000073D9 BE[4E8C0000]        <2> 		mov esi, computer
  9130 000073DE C605[09770000]01    <2> 		mov byte [mouseselecton], 1
  9131 000073E5 E87AFBFFFF          <2> 		call showstring2	;Show computer name
  9132 000073EA B058                <2> 		mov al, "X"
  9133 000073EC 30E4                <2> 		xor ah, ah
  9134 000073EE 66BB00F8            <2> 		mov bx, 1111100000000000b
  9135 000073F2 668B15[98710000]    <2> 		mov dx, [winvcopystx]
  9136 000073F9 668B0D[9A710000]    <2> 		mov cx, [winvcopysty]
  9137 00007400 6681E91000          <2> 		sub cx, 16
  9138 00007405 6681EA1000          <2> 		sub dx, 16
  9139 0000740A 660315[9C710000]    <2> 		add dx, [winvcopydx]
  9140 00007411 C605[09770000]01    <2> 		mov byte [mouseselecton], 1
  9141 00007418 663B15[7E550000]    <2> 		cmp dx, [resolutionx2]
  9142 0000741F 7305                <2> 		jae .nox
  9143 00007421 E87DFBFFFF          <2> 		call showfontvesa
  9144                              <2> .nox:
  9145 00007426 668B1D[D8690000]    <2> 		mov bx, [background]
  9146 0000742D 6681EA1800          <2> 		sub dx, 24
  9147 00007432 B02B                <2> 		mov al, "+"
  9148 00007434 66BBE007            <2> 		mov bx, 0000011111100000b
  9149 00007438 C605[09770000]01    <2> 		mov byte [mouseselecton], 1
  9150 0000743F 663B15[7E550000]    <2> 		cmp dx, [resolutionx2]
  9151 00007446 7305                <2> 		jae .noplus
  9152 00007448 E856FBFFFF          <2> 		call showfontvesa
  9153                              <2> .noplus:
  9154 0000744D 6681EA1800          <2> 		sub dx, 24
  9155 00007452 B02D                <2> 		mov al, "-"
  9156 00007454 66BBE0FF            <2> 		mov bx, 1111111111100000b
  9157 00007458 C605[09770000]01    <2> 		mov byte [mouseselecton], 1
  9158 0000745F 663B15[7E550000]    <2> 		cmp dx, [resolutionx2]
  9159 00007466 7305                <2> 		jae .nominus
  9160 00007468 E836FBFFFF          <2> 		call showfontvesa
  9161                              <2> .nominus:
  9162 0000746D 6681EA1800          <2> 		sub dx, 24
  9163 00007472 B03F                <2> 		mov al, "?"
  9164 00007474 66BB1F00            <2> 		mov bx, 0000000000011111b
  9165 00007478 C605[09770000]01    <2> 		mov byte [mouseselecton], 1
  9166 0000747F 663B15[7E550000]    <2> 		cmp dx, [resolutionx2]
  9167 00007486 7305                <2> 		jae .noquestion
  9168 00007488 E816FBFFFF          <2> 		call showfontvesa
  9169                              <2> .noquestion:
  9170 0000748D 665B                <2> 		pop bx
  9171 0000748F 66891D[D8690000]    <2> 		mov [background], bx
  9172                              <2> 	winvcpst:
  9173 00007496 C3                  <2> 		ret
  9174                              <2> 
  9175                              <2> 	windowvideocopy:
  9176 00007497 8B35[B0710000]      <2> 		mov esi, [windowinfobuf]
  9177 0000749D 668B16              <2> 		mov dx, [esi]
  9178 000074A0 668B4E02            <2> 		mov cx, [esi + 2]
  9179 000074A4 8B7E04              <2> 		mov edi, [esi + 4]
  9180 000074A7 893D[A0710000]      <2> 		mov [windowcolor], edi
  9181 000074AD 8B7E08              <2> 		mov edi, [esi + 8]
  9182 000074B0 8B5E0C              <2> 		mov ebx, [esi + 12]
  9183 000074B3 893D[A8710000]      <2> 		mov [windowvideobuf], edi
  9184 000074B9 891D[AC710000]      <2> 		mov [windowvideobuf2], ebx
  9185 000074BF 31C0                <2> 		xor eax, eax
  9186 000074C1 31DB                <2> 		xor ebx, ebx
  9187 000074C3 6689D0              <2> 		mov ax, dx
  9188 000074C6 6689CB              <2> 		mov bx, cx
  9189 000074C9 66C1E803            <2> 		shr ax, 3
  9190 000074CD 66C1EB04            <2> 		shr bx, 4
  9191 000074D1 66A3[B4710000]      <2> 		mov [termcol], ax
  9192 000074D7 A2[3B240000]        <2> 		mov [charxy], al
  9193 000074DC 881D[3C240000]      <2> 		mov [charxy + 1], bl
  9194 000074E2 8B3D[A4710000]      <2> 		mov edi, [windowbufloc]
  9195 000074E8 3B3D[A6540000]      <2> 		cmp edi, [physbaseptr]
  9196 000074EE 0F8334000000        <2> 		jae near windowvideocopyset
  9197 000074F4 31C9                <2> 		xor ecx, ecx
  9198 000074F6 31D2                <2> 		xor edx, edx
  9199 000074F8 668B15[98710000]    <2> 		mov dx, [winvcopystx]
  9200 000074FF 668B0D[9A710000]    <2> 		mov cx, [winvcopysty]
  9201 00007506 8B3D[A6540000]      <2> 		mov edi, [physbaseptr]
  9202 0000750C 01D7                <2> 		add edi, edx
  9203 0000750E 81F900000000        <2> 		cmp ecx, 0
  9204 00007514 7412                <2> 		je windowvideocopyset
  9205                              <2> 	yrescopylp:
  9206 00007516 31C0                <2> 		xor eax, eax
  9207 00007518 66A1[7E550000]      <2> 		mov ax, [resolutionx2]
  9208 0000751E F7E1                <2> 		mul ecx
  9209 00007520 01C7                <2> 		add edi, eax
  9210 00007522 893D[A4710000]      <2> 		mov [windowbufloc], edi
  9211                              <2> 	windowvideocopyset:
  9212 00007528 6631C9              <2> 		xor cx, cx
  9213 0000752B 6649                <2> 		dec cx
  9214 0000752D 66890D[FD760000]    <2> 		mov [charposline], cx
  9215 00007534 89FE                <2> 		mov esi, edi
  9216 00007536 81EE10000000        <2> 		sub esi, 16
  9217 0000753C 31D2                <2> 		xor edx, edx
  9218 0000753E 668B15[7E550000]    <2> 		mov dx, [resolutionx2]
  9219 00007545 C1E204              <2> 		shl edx, 4
  9220 00007548 01D6                <2> 		add esi, edx
  9221 0000754A 8B3D[A8710000]      <2> 		mov edi, [windowvideobuf]
  9222 00007550 81EF02000000        <2> 		sub edi, 2
  9223 00007556 893D[FF760000]      <2> 		mov [charposvbuf], edi
  9224 0000755C E97A000000          <2> 		jmp nextcharwin
  9225                              <2> 	win.write:	;adjusted this to use alpha
  9226                              <2> 				;5R, 6G, 5B
  9227                              <2> %ifdef gui.alphablending
  9228                              <2> 		push esi
  9229                              <2> 		push bx
  9230                              <2> 		push cx
  9231                              <2> 		push dx
  9232                              <2> %ifdef gui.background
  9233                              <2> 		mov esi, edi
  9234                              <2> 		sub esi, [physbaseptr]
  9235                              <2> 		add esi, [backgroundimage]
  9236                              <2> 		cmp dword [backgroundimage], 0
  9237                              <2> 		jne .red
  9238                              <2> %endif
  9239                              <2> 		mov esi, background
  9240                              <2> 	.red:
  9241                              <2> 		mov cx, [esi]
  9242                              <2> 		shr cx, 11
  9243                              <2> 		mov bx, ax
  9244                              <2> 		shr bx, 11
  9245                              <2> 		add cx, bx
  9246                              <2> 		add cx, bx
  9247                              <2> 		add cx, bx
  9248                              <2> 		shr cx, 2
  9249                              <2> 		shl cx, 11
  9250                              <2> 		mov dx, cx
  9251                              <2> 	.green:
  9252                              <2> 		mov cx, [esi]
  9253                              <2> 		shl cx, 5
  9254                              <2> 		shr cx, 10
  9255                              <2> 		mov bx, ax
  9256                              <2> 		shl bx, 5
  9257                              <2> 		shr bx, 10
  9258                              <2> 		add cx, bx
  9259                              <2> 		add cx, bx
  9260                              <2> 		add cx, bx
  9261                              <2> 		shr cx, 2
  9262                              <2> 		shl cx, 5
  9263                              <2> 		add dx, cx
  9264                              <2> 	.blue:
  9265                              <2> 		mov cx, [esi]
  9266                              <2> 		shl cx, 11
  9267                              <2> 		shr cx, 11
  9268                              <2> 		mov bx, ax
  9269                              <2> 		shl bx, 11
  9270                              <2> 		shr bx, 11
  9271                              <2> 		add cx, bx
  9272                              <2> 		add cx, bx
  9273                              <2> 		add cx, bx
  9274                              <2> 		shr cx, 2
  9275                              <2> 		add dx, cx
  9276                              <2> 		mov [edi], dx
  9277                              <2> 		pop dx
  9278                              <2> 		pop cx
  9279                              <2> 		pop bx
  9280                              <2> 		pop esi
  9281                              <2> %else
  9282 00007561 668907              <2> 		mov [edi], ax
  9283                              <2> %endif
  9284 00007564 C3                  <2> 		ret
  9285                              <2> 	copywindow:
  9286 00007565 B201                <2> 		mov dl, 1
  9287 00007567 D0C6                <2> 		rol dh, 1
  9288 00007569 20F2                <2> 		and dl, dh
  9289 0000756B 803D[946F0000]10    <2> 		cmp byte [colorcache], 0x10
  9290 00007572 7320                <2> 		jae switchwincolors
  9291 00007574 66A1[A2710000]      <2> 		mov ax, [windowcolor + 2]
  9292 0000757A E8E2FFFFFF          <2> 		call win.write
  9293 0000757F 80FA00              <2> 		cmp dl, 0
  9294 00007582 742B                <2> 		je nowritewin
  9295 00007584 66A1[A0710000]      <2> 		mov ax, [windowcolor]
  9296 0000758A E8D2FFFFFF          <2> 		call win.write
  9297 0000758F E91B000000          <2> 		jmp nowritewin
  9298                              <2> 	switchwincolors:
  9299 00007594 66A1[A0710000]      <2> 		mov ax, [windowcolor]
  9300 0000759A E8C2FFFFFF          <2> 		call win.write
  9301 0000759F 80FA00              <2> 		cmp dl, 0
  9302 000075A2 740B                <2> 		je nowritewin
  9303 000075A4 66A1[A2710000]      <2> 		mov ax, [windowcolor + 2]
  9304 000075AA E8B2FFFFFF          <2> 		call win.write
  9305                              <2> 	nowritewin:
  9306 000075AF 81C702000000        <2> 		add edi, 2
  9307 000075B5 FEC1                <2> 		inc cl
  9308 000075B7 80F908              <2> 		cmp cl, 8
  9309 000075BA 75A9                <2> 		jne copywindow
  9310 000075BC 6643                <2> 		inc bx
  9311 000075BE 30C9                <2> 		xor cl, cl
  9312 000075C0 31D2                <2> 		xor edx, edx
  9313 000075C2 668B15[7E550000]    <2> 		mov dx, [resolutionx2]
  9314 000075C9 01D6                <2> 		add esi, edx
  9315 000075CB 89F7                <2> 		mov edi, esi
  9316 000075CD 678AB7[838C]        <2> 		mov dh, [fonts + bx]
  9317 000075D2 D0CE                <2> 		ror dh, 1
  9318 000075D4 FEC5                <2> 		inc ch
  9319 000075D6 80FD10              <2> 		cmp ch, 16
  9320 000075D9 758A                <2> 		jne copywindow
  9321                              <2> 	nextcharwin:
  9322 000075DB 6631C9              <2> 		xor cx, cx
  9323 000075DE 8B3D[FF760000]      <2> 		mov edi, [charposvbuf]
  9324 000075E4 81C702000000        <2> 		add edi, 2
  9325 000075EA 3B3D[B6710000]      <2> 		cmp edi, [wincopyendpos]
  9326 000075F0 0F83F0000000        <2> 		jae near donewincopynow
  9327 000075F6 8A7F01              <2> 		mov bh, [edi + 1]
  9328 000075F9 80FF00              <2> 		cmp bh, 0
  9329 000075FC 7505                <2> 		jne nofixcolorwin
  9330 000075FE B707                <2> 		mov bh, 7
  9331 00007600 887F01              <2> 		mov [edi + 1], bh
  9332                              <2> 	nofixcolorwin:
  9333 00007603 883D[946F0000]      <2> 		mov [colorcache], bh
  9334 00007609 8A1F                <2> 		mov bl, [edi]
  9335 0000760B 893D[FF760000]      <2> 		mov [charposvbuf], edi
  9336 00007611 813D[AC710000]0000- <2> 		cmp dword [windowvideobuf2], 0
  9337 00007619 0000                <2>
  9338 0000761B 7459                <2> 		je noskipcharcopy
  9339 0000761D 2B3D[A8710000]      <2> 		sub edi, [windowvideobuf]
  9340 00007623 033D[AC710000]      <2> 		add edi, [windowvideobuf2]
  9341 00007629 8A6701              <2> 		mov ah, [edi + 1]
  9342 0000762C 8A07                <2> 		mov al, [edi]
  9343 0000762E 6639D8              <2> 		cmp ax, bx
  9344 00007631 7543                <2> 		jne noskipcharcopy
  9345                              <2> 	skipcharcopy:
  9346 00007633 81C610000000        <2> 		add esi, 16
  9347 00007639 668B0D[FD760000]    <2> 		mov cx, [charposline]
  9348 00007640 6641                <2> 		inc cx
  9349 00007642 66890D[FD760000]    <2> 		mov [charposline], cx
  9350 00007649 663B0D[B4710000]    <2> 		cmp cx, [termcol]
  9351 00007650 7289                <2> 		jb nextcharwin
  9352 00007652 6631C9              <2> 		xor cx, cx
  9353 00007655 66890D[FD760000]    <2> 		mov [charposline], cx
  9354 0000765C 31D2                <2> 		xor edx, edx
  9355 0000765E 668B15[7E550000]    <2> 		mov dx, [resolutionx2]
  9356 00007665 C1E204              <2> 		shl edx, 4
  9357 00007668 662B15[9C710000]    <2> 		sub dx, [winvcopydx]
  9358 0000766F 01D6                <2> 		add esi, edx
  9359 00007671 E965FFFFFF          <2> 		jmp nextcharwin
  9360                              <2> 	noskipcharcopy:
  9361 00007676 881F                <2> 		mov [edi], bl
  9362 00007678 887F01              <2> 		mov [edi + 1], bh
  9363 0000767B 8B3D[FF760000]      <2> 		mov edi, [charposvbuf]
  9364 00007681 30FF                <2> 		xor bh, bh
  9365 00007683 66C1E304            <2> 		shl bx, 4
  9366 00007687 31D2                <2> 		xor edx, edx
  9367 00007689 668B15[7E550000]    <2> 		mov dx, [resolutionx2]
  9368 00007690 C1E204              <2> 		shl edx, 4
  9369 00007693 29D6                <2> 		sub esi, edx
  9370 00007695 81C610000000        <2> 		add esi, 16
  9371 0000769B 89F7                <2> 		mov edi, esi
  9372 0000769D 668B0D[FD760000]    <2> 		mov cx, [charposline]
  9373 000076A4 6641                <2> 		inc cx
  9374 000076A6 663B0D[B4710000]    <2> 		cmp cx, [termcol]
  9375 000076AD 7316                <2> 		jae fixwindowcopy
  9376 000076AF 66890D[FD760000]    <2> 		mov [charposline], cx
  9377 000076B6 6631C9              <2> 		xor cx, cx
  9378 000076B9 678AB7[838C]        <2> 		mov dh, [fonts + bx]
  9379 000076BE D0CE                <2> 		ror dh, 1
  9380 000076C0 E9A0FEFFFF          <2> 		jmp copywindow
  9381                              <2> fixwindowcopy:
  9382 000076C5 6631C9              <2> 		xor cx, cx
  9383 000076C8 66890D[FD760000]    <2> 		mov [charposline], cx
  9384 000076CF 662B15[9C710000]    <2> 		sub dx, [winvcopydx]
  9385 000076D6 01D6                <2> 		add esi, edx
  9386 000076D8 89F7                <2> 		mov edi, esi
  9387 000076DA 678AB7[838C]        <2> 		mov dh, [fonts + bx]
  9388 000076DF D0CE                <2> 		ror dh, 1
  9389 000076E1 E97FFEFFFF          <2> 		jmp copywindow
  9390                              <2> donewincopynow:
  9391 000076E6 803D[62220000]01    <2> 		cmp byte [termcopyon], 1
  9392 000076ED 7506                <2> 		jne forgetresetstuff
  9393 000076EF E8AEAFFFFF          <2> 		call switchtermcursor
  9394 000076F4 61                  <2> 		popa
  9395                              <2> forgetresetstuff:
  9396 000076F5 C605[62220000]00    <2> 		mov byte [termcopyon], 0
  9397 000076FC C3                  <2> 		ret
  9398                              <2> 		
  9399 000076FD 0000                <2> charposline dw 0
  9400 000076FF 00000000            <2> charposvbuf dw 0,0
  9401                              <1> 				
  9402 00007703 00                  <1> copygui db 0
  9403 00007704 00                  <1> graphicsset db 0
  9404 00007705 0000                <1> graphicspos db 0,0
  9405 00007707 00                  <1> showcursorfonton db 0
  9406 00007708 00                  <1> savefonton db 0
  9407 00007709 00                  <1> mouseselecton db 0
  9408                              <1> 
  9409 0000770A 00                  <1> pbutton db 0
  9410 0000770B 00                  <1> pLBUTTON db 0
  9411 0000770C 00                  <1> pRBUTTON db 0
  9412 0000770D 00000000            <1> dragging dw 0,0
  9413 00007711 0000000000000000    <1> lastpos dw 0,0,0,0
  9414 00007719 00000000            <1> colorbuf dw 0,0
  9415                              <1> 	
  9416                              <1> 	clickicon:
  9417 0000771D B001                <1> 		mov al, 1
  9418 0000771F A2[0A770000]        <1> 		mov [pbutton], al
  9419 00007724 A0[0B770000]        <1> 		mov al, [pLBUTTON]
  9420 00007729 2205[85580000]      <1> 		and al, [LBUTTON]
  9421 0000772F 8A25[0C770000]      <1> 		mov ah, [pRBUTTON]
  9422 00007735 2225[86580000]      <1> 		and ah, [RBUTTON]
  9423 0000773B 08E0                <1> 		or al, ah
  9424 0000773D 3C00                <1> 		cmp al, 0
  9425 0000773F 741B                <1> 		je nodragclick
  9426 00007741 813D[0D770000]0100- <1> 		cmp dword [dragging], 1
  9427 00007749 0000                <1>
  9428 0000774B 732D                <1> 		jae dragclick
  9429 0000774D C705[0D770000]0100- <1> 		mov dword [dragging], 1
  9430 00007755 0000                <1>
  9431 00007757 E91E000000          <1> 		jmp dragclick
  9432                              <1> 	nodragclick:
  9433 0000775C C705[0D770000]0000- <1> 		mov dword [dragging], 0
  9434 00007764 0000                <1>
  9435 00007766 A0[85580000]        <1> 		mov al, [LBUTTON]
  9436 0000776B A2[0B770000]        <1> 		mov [pLBUTTON], al
  9437 00007770 A0[86580000]        <1> 		mov al, [RBUTTON]
  9438 00007775 A2[0C770000]        <1> 		mov [pRBUTTON], al
  9439                              <1> 	dragclick:
  9440 0000777A 6631C0              <1> 		xor ax, ax
  9441 0000777D BE[13CF0000]        <1> 		mov esi, graphicstable
  9442 00007782 C705[5D7F0000]0000- <1> 		mov dword [codepointer], 0
  9443 0000778A 0000                <1>
  9444                              <1> 	clicon2:
  9445 0000778C 31D2                <1> 		xor edx, edx
  9446 0000778E 31C9                <1> 		xor ecx, ecx
  9447 00007790 66813E0100          <1> 		cmp word [esi], 1
  9448 00007795 0F841B000000        <1> 		je near iconselect
  9449 0000779B 66813E0200          <1> 		cmp word [esi], 2
  9450 000077A0 0F8472010000        <1> 		je near textselected
  9451 000077A6 66813E0300          <1> 		cmp word [esi], 3
  9452 000077AB 0F84C7020000        <1> 		je near windowselect
  9453 000077B1 E910040000          <1> 		jmp nexticonsel
  9454                              <1> 	iconselect:
  9455 000077B6 668B5606            <1> 		mov dx, [esi + 6]
  9456 000077BA 6689D0              <1> 		mov ax, dx
  9457 000077BD 668B4E08            <1> 		mov cx, [esi + 8]
  9458 000077C1 6689CB              <1> 		mov bx, cx
  9459 000077C4 6681C32000          <1> 		add bx, 32
  9460 000077C9 6601D0              <1> 		add ax, dx
  9461 000077CC 813D[0D770000]0100- <1> 		cmp dword [dragging], 1
  9462 000077D4 0000                <1>
  9463 000077D6 746F                <1> 		je dragicon
  9464 000077D8 813D[0D770000]0000- <1> 		cmp dword [dragging], 0
  9465 000077E0 0000                <1>
  9466 000077E2 7411                <1> 		je nodragiconcheck
  9467 000077E4 3935[0D770000]      <1> 		cmp dword [dragging], esi
  9468 000077EA 0F85D6030000        <1> 		jne near nexticonsel
  9469 000077F0 E952000000          <1> 		jmp dragicon
  9470                              <1> 	nodragiconcheck:
  9471 000077F5 663905[74570000]    <1> 		cmp [mousecursorposition], ax
  9472 000077FC 0F82C4030000        <1> 		jb near nexticonsel
  9473 00007802 66054000            <1> 		add ax, 64
  9474 00007806 663905[74570000]    <1> 		cmp [mousecursorposition], ax
  9475 0000780D 0F87B3030000        <1> 		ja near nexticonsel
  9476 00007813 6629D0              <1> 		sub ax, dx
  9477 00007816 66390D[76570000]    <1> 		cmp [mousecursorposition + 2], cx
  9478 0000781D 0F82A3030000        <1> 		jb near nexticonsel
  9479 00007823 66391D[76570000]    <1> 		cmp [mousecursorposition + 2], bx
  9480 0000782A 0F8796030000        <1> 		ja near nexticonsel
  9481 00007830 668B460A            <1> 		mov ax, [esi + 10]
  9482 00007834 66250100            <1> 		and ax, 1
  9483 00007838 663D0100            <1> 		cmp ax, 1
  9484 0000783C 0F84B6000000        <1> 		je near unselecticon
  9485 00007842 E98D000000          <1> 		jmp nodragicon
  9486                              <1> 	dragicon:
  9487 00007847 663905[70570000]    <1> 		cmp [lastmouseposition], ax
  9488 0000784E 0F8272030000        <1> 		jb near nexticonsel
  9489 00007854 66054000            <1> 		add ax, 64
  9490 00007858 663905[70570000]    <1> 		cmp [lastmouseposition], ax
  9491 0000785F 0F8761030000        <1> 		ja near nexticonsel
  9492 00007865 6629D0              <1> 		sub ax, dx
  9493 00007868 66390D[72570000]    <1> 		cmp [lastmouseposition + 2], cx
  9494 0000786F 0F8251030000        <1> 		jb near nexticonsel
  9495 00007875 66391D[72570000]    <1> 		cmp [lastmouseposition + 2], bx
  9496 0000787C 0F8744030000        <1> 		ja near nexticonsel
  9497 00007882 668B460A            <1> 		mov ax, [esi + 10]
  9498 00007886 2410                <1> 		and al, 00010000b
  9499 00007888 3C10                <1> 		cmp al, 00010000b
  9500 0000788A 7448                <1> 		je nodragicon
  9501 0000788C 8935[0D770000]      <1> 		mov [dragging], esi
  9502 00007892 66D1E2              <1> 		shl dx, 1
  9503 00007895 662B15[70570000]    <1> 		sub dx, [lastmouseposition]
  9504 0000789C 660315[74570000]    <1> 		add dx, [mousecursorposition]
  9505 000078A3 66D1EA              <1> 		shr dx, 1
  9506 000078A6 66030D[76570000]    <1> 		add cx, [mousecursorposition + 2]
  9507 000078AD 662B0D[72570000]    <1> 		sub cx, [lastmouseposition + 2]
  9508 000078B4 663B15[7E550000]    <1> 		cmp dx, [resolutionx2]
  9509 000078BB 7607                <1> 		jbe chkyresdrgicn
  9510 000078BD 668B15[74570000]    <1> 		mov dx, [mousecursorposition]
  9511                              <1> 	chkyresdrgicn:
  9512 000078C4 663B0D[92540000]    <1> 		cmp cx, [resolutiony]
  9513 000078CB 7607                <1> 		jbe nodragicon
  9514 000078CD 668B0D[76570000]    <1> 		mov cx, [mousecursorposition + 2]
  9515                              <1> 	nodragicon:
  9516 000078D4 66814E0A0100        <1> 		or word [esi + 10], 1
  9517 000078DA 8B5E0C              <1> 		mov ebx, [esi + 12]
  9518 000078DD 668B460A            <1> 		mov ax, [esi + 10]
  9519 000078E1 8B7602              <1> 		mov esi, [esi + 2]
  9520 000078E4 C705[5D7F0000]0000- <1> 		mov dword [codepointer], 0
  9521 000078EC 0000                <1>
  9522 000078EE E8A6EEFFFF          <1> 		call showicon
  9523 000078F3 E9E7020000          <1> 		jmp doneiconsel
  9524                              <1> 	unselecticon:
  9525 000078F8 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9526 000078FE 8B5E0C              <1> 		mov ebx, [esi + 12]
  9527 00007901 668B460A            <1> 		mov ax, [esi + 10]
  9528 00007905 8B7602              <1> 		mov esi, [esi + 2]
  9529 00007908 891D[5D7F0000]      <1> 		mov [codepointer], ebx
  9530 0000790E E886EEFFFF          <1> 		call showicon
  9531 00007913 E9C7020000          <1> 		jmp doneiconsel
  9532                              <1> 	textselected:
  9533 00007918 8B5E02              <1> 		mov ebx, [esi + 2]
  9534 0000791B 668B5606            <1> 		mov dx, [esi + 6]
  9535 0000791F 6689D0              <1> 		mov ax, dx
  9536 00007922 668B4E08            <1> 		mov cx, [esi + 8]
  9537                              <1> 	lengthtesttext:
  9538 00007926 803B00              <1> 		cmp byte [ebx], 0
  9539 00007929 7407                <1> 		je donetesttextlength
  9540 0000792B 43                  <1> 		inc ebx
  9541 0000792C 66051000            <1> 		add ax, 16
  9542 00007930 EBF4                <1> 		jmp lengthtesttext
  9543                              <1> 	donetesttextlength:
  9544 00007932 6689CB              <1> 		mov bx, cx
  9545 00007935 6681C30F00          <1> 		add bx, 15
  9546 0000793A 813D[0D770000]0100- <1> 		cmp dword [dragging], 1
  9547 00007942 0000                <1>
  9548 00007944 7468                <1> 		je dragtext
  9549 00007946 813D[0D770000]0000- <1> 		cmp dword [dragging], 0
  9550 0000794E 0000                <1>
  9551 00007950 7411                <1> 		je nodragtextcheck
  9552 00007952 3935[0D770000]      <1> 		cmp dword [dragging], esi
  9553 00007958 0F8568020000        <1> 		jne near nexticonsel
  9554 0000795E E94B000000          <1> 		jmp dragtext
  9555                              <1> 	nodragtextcheck:
  9556 00007963 663915[74570000]    <1> 		cmp [mousecursorposition], dx
  9557 0000796A 0F8256020000        <1> 		jb near nexticonsel
  9558 00007970 663905[74570000]    <1> 		cmp [mousecursorposition], ax
  9559 00007977 0F8749020000        <1> 		ja near nexticonsel
  9560 0000797D 66390D[76570000]    <1> 		cmp [mousecursorposition + 2], cx
  9561 00007984 0F823C020000        <1> 		jb near nexticonsel
  9562 0000798A 66391D[76570000]    <1> 		cmp [mousecursorposition + 2], bx
  9563 00007991 0F872F020000        <1> 		ja near nexticonsel
  9564 00007997 668B460A            <1> 		mov ax, [esi + 10]
  9565 0000799B 66250100            <1> 		and ax, 1
  9566 0000799F 663D0100            <1> 		cmp ax, 1
  9567 000079A3 0F84AB000000        <1> 		je near unselecttext
  9568 000079A9 E986000000          <1> 		jmp nodragtext
  9569                              <1> 	dragtext:
  9570 000079AE 663915[70570000]    <1> 		cmp [lastmouseposition], dx
  9571 000079B5 0F820B020000        <1> 		jb near nexticonsel
  9572 000079BB 663905[70570000]    <1> 		cmp [lastmouseposition], ax
  9573 000079C2 0F87FE010000        <1> 		ja near nexticonsel
  9574 000079C8 66390D[72570000]    <1> 		cmp [lastmouseposition + 2], cx
  9575 000079CF 0F82F1010000        <1> 		jb near nexticonsel
  9576 000079D5 66391D[72570000]    <1> 		cmp [lastmouseposition + 2], bx
  9577 000079DC 0F87E4010000        <1> 		ja near nexticonsel
  9578 000079E2 668B460A            <1> 		mov ax, [esi + 10]
  9579 000079E6 2410                <1> 		and al, 00010000b
  9580 000079E8 663D1000            <1> 		cmp ax, 00010000b
  9581 000079EC 0F8442000000        <1> 		je near nodragtext
  9582 000079F2 8935[0D770000]      <1> 		mov [dragging], esi
  9583 000079F8 662B15[70570000]    <1> 		sub dx, [lastmouseposition]
  9584 000079FF 660315[74570000]    <1> 		add dx, [mousecursorposition]
  9585 00007A06 66030D[76570000]    <1> 		add cx, [mousecursorposition + 2]
  9586 00007A0D 662B0D[72570000]    <1> 		sub cx, [lastmouseposition + 2]
  9587 00007A14 663B15[7E550000]    <1> 		cmp dx, [resolutionx2]
  9588 00007A1B 7607                <1> 		jbe chkyresdrgtxt
  9589 00007A1D 668B15[74570000]    <1> 		mov dx, [mousecursorposition]
  9590                              <1> 	chkyresdrgtxt:
  9591 00007A24 663B0D[92540000]    <1> 		cmp cx, [resolutiony]
  9592 00007A2B 7607                <1> 		jbe nodragtext
  9593 00007A2D 668B0D[76570000]    <1> 		mov cx, [mousecursorposition + 2]
  9594                              <1> 	nodragtext:
  9595 00007A34 66814E0A0100        <1> 		or word [esi + 10], 1
  9596 00007A3A 8B5E0C              <1> 		mov ebx, [esi + 12]
  9597 00007A3D 891D[5D7F0000]      <1> 		mov [codepointer], ebx
  9598 00007A43 668B460A            <1> 		mov ax, [esi + 10]
  9599 00007A47 8B7602              <1> 		mov esi, [esi + 2]
  9600 00007A4A E802F5FFFF          <1> 		call showstring
  9601 00007A4F E98B010000          <1> 		jmp doneiconsel
  9602                              <1> 	unselecttext:
  9603 00007A54 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9604 00007A5A 8B5E0C              <1> 		mov ebx, [esi + 12]
  9605 00007A5D 668B460A            <1> 		mov ax, [esi + 10]
  9606 00007A61 8B7602              <1> 		mov esi, [esi + 2]
  9607 00007A64 C705[5D7F0000]0000- <1> 		mov dword [codepointer], 0
  9608 00007A6C 0000                <1>
  9609 00007A6E E8DEF4FFFF          <1> 		call showstring
  9610 00007A73 E967010000          <1> 		jmp doneiconsel
  9611                              <1> windowselect:
  9612 00007A78 8B7E02              <1> 		mov edi, [esi + 2]
  9613 00007A7B 668B5606            <1> 		mov dx, [esi + 6]
  9614 00007A7F 6689D0              <1> 		mov ax, dx
  9615 00007A82 668B4E08            <1> 		mov cx, [esi + 8]
  9616 00007A86 6689CB              <1> 		mov bx, cx
  9617 00007A89 6681C31000          <1> 		add bx, 16
  9618 00007A8E 813D[0D770000]0100- <1> 		cmp dword [dragging], 1
  9619 00007A96 0000                <1>
  9620 00007A98 746D                <1> 		je dragwin
  9621 00007A9A 813D[0D770000]0000- <1> 		cmp dword [dragging], 0
  9622 00007AA2 0000                <1>
  9623 00007AA4 7411                <1> 		je nodragwincheck
  9624 00007AA6 3935[0D770000]      <1> 		cmp dword [dragging], esi
  9625 00007AAC 0F8514010000        <1> 		jne near nexticonsel
  9626 00007AB2 E950000000          <1> 		jmp dragwin
  9627                              <1> 	nodragwincheck:
  9628 00007AB7 663905[74570000]    <1> 		cmp [mousecursorposition], ax
  9629 00007ABE 0F8202010000        <1> 		jb near nexticonsel
  9630 00007AC4 660307              <1> 		add ax, [edi]
  9631 00007AC7 660307              <1> 		add ax, [edi]
  9632 00007ACA 663905[74570000]    <1> 		cmp [mousecursorposition], ax
  9633 00007AD1 0F87EF000000        <1> 		ja near nexticonsel
  9634 00007AD7 66390D[76570000]    <1> 		cmp [mousecursorposition + 2], cx
  9635 00007ADE 0F82E2000000        <1> 		jb near nexticonsel
  9636 00007AE4 66391D[76570000]    <1> 		cmp [mousecursorposition + 2], bx
  9637 00007AEB 0F87D5000000        <1> 		ja near nexticonsel
  9638 00007AF1 662D1400            <1> 		sub ax, 20
  9639 00007AF5 663905[74570000]    <1> 		cmp [mousecursorposition], ax
  9640 00007AFC 0F87A4000000        <1> 		ja near killwin
  9641 00007B02 E98B000000          <1> 		jmp nodragwin
  9642                              <1> 	dragwin:
  9643 00007B07 663905[70570000]    <1> 		cmp [lastmouseposition], ax
  9644 00007B0E 0F82B2000000        <1> 		jb near nexticonsel
  9645 00007B14 660307              <1> 		add ax, [edi]
  9646 00007B17 660307              <1> 		add ax, [edi]
  9647 00007B1A 663905[70570000]    <1> 		cmp [lastmouseposition], ax
  9648 00007B21 0F879F000000        <1> 		ja near nexticonsel
  9649 00007B27 66390D[72570000]    <1> 		cmp [lastmouseposition + 2], cx
  9650 00007B2E 0F8292000000        <1> 		jb near nexticonsel
  9651 00007B34 66391D[72570000]    <1> 		cmp [lastmouseposition + 2], bx
  9652 00007B3B 0F8785000000        <1> 		ja near nexticonsel
  9653 00007B41 8935[0D770000]      <1> 		mov [dragging], esi
  9654 00007B47 803D[717C0000]01    <1> 		cmp byte [windrag], 1
  9655 00007B4E 7706                <1> 		ja .nochangewindrag
  9656 00007B50 FE05[717C0000]      <1> 		inc byte [windrag]
  9657                              <1> 	.nochangewindrag:
  9658 00007B56 662B15[70570000]    <1> 		sub dx, [lastmouseposition]
  9659 00007B5D 660315[74570000]    <1> 		add dx, [mousecursorposition]
  9660 00007B64 66030D[76570000]    <1> 		add cx, [mousecursorposition + 2]
  9661 00007B6B 662B0D[72570000]    <1> 		sub cx, [lastmouseposition + 2]
  9662 00007B72 663B15[7E550000]    <1> 		cmp dx, [resolutionx2]
  9663 00007B79 7607                <1> 		jbe chkyresdrgwin
  9664 00007B7B 668B15[74570000]    <1> 		mov dx, [mousecursorposition]
  9665                              <1> 	chkyresdrgwin:
  9666 00007B82 663B0D[92540000]    <1> 		cmp cx, [resolutiony]
  9667 00007B89 7607                <1> 		jbe nodragwin
  9668 00007B8B 668B0D[76570000]    <1> 		mov cx, [mousecursorposition + 2]
  9669                              <1> 	nodragwin:
  9670 00007B92 8B5E0C              <1> 		mov ebx, [esi + 12]
  9671 00007B95 668B460A            <1> 		mov ax, [esi + 10]
  9672 00007B99 8B7602              <1> 		mov esi, [esi + 2]
  9673 00007B9C E819F6FFFF          <1> 		call showwindow
  9674 00007BA1 E939000000          <1> 		jmp doneiconsel
  9675                              <1> 	killwin:
  9676 00007BA6 66C7060000          <1> 		mov word [esi], 0
  9677 00007BAB C605[61220000]00    <1> 		mov byte [termguion], 0
  9678 00007BB2 E8E3EDFFFF          <1> 		call guiclear
  9679 00007BB7 E820EEFFFF          <1> 		call reloadallgraphics
  9680 00007BBC E875EBFFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
  9681 00007BC1 E9CBE8FFFF          <1> 		jmp guistart
  9682                              <1> 	nexticonsel:
  9683 00007BC6 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9684 00007BCC 81C610000000        <1> 		add esi, 16
  9685 00007BD2 81FE[13D10000]      <1> 		cmp esi, graphicstableend
  9686 00007BD8 7305                <1> 		jae doneiconsel
  9687 00007BDA E9ADFBFFFF          <1> 		jmp clicon2
  9688                              <1> 	doneiconsel:
  9689 00007BDF 813D[0D770000]0100- <1> 		cmp dword [dragging], 1
  9690 00007BE7 0000                <1>
  9691 00007BE9 731C                <1> 		jae doneiconsel2
  9692 00007BEB 30C0                <1> 		xor al, al
  9693 00007BED A2[717C0000]        <1> 		mov [windrag], al
  9694 00007BF2 813D[5D7F0000]0000- <1> 		cmp dword [codepointer], 0
  9695 00007BFA 0000                <1>
  9696 00007BFC 7409                <1> 		je doneiconsel2
  9697 00007BFE 8B1D[5D7F0000]      <1> 		mov ebx, [codepointer]
  9698 00007C04 FFD3                <1> 		call ebx
  9699 00007C06 C3                  <1> 		ret
  9700                              <1> 	doneiconsel2:
  9701 00007C07 A0[85580000]        <1> 		mov al, [LBUTTON]
  9702 00007C0C A2[0B770000]        <1> 		mov [pLBUTTON], al
  9703 00007C11 A0[86580000]        <1> 		mov al, [RBUTTON]
  9704 00007C16 A2[0C770000]        <1> 		mov [pRBUTTON], al
  9705 00007C1B 813D[0D770000]0100- <1> 		cmp dword [dragging], 1
  9706 00007C23 0000                <1>
  9707 00007C25 0F8618000000        <1> 		jbe near noreloadgraphicsclick
  9708 00007C2B E806EBFFFF          <1> 		call switchmousepos2
  9709 00007C30 803D[717C0000]01    <1> 		cmp byte [windrag], 1
  9710 00007C37 7305                <1> 		jae noclearcursorcl
  9711 00007C39 E840EAFFFF          <1> 		call clearmousecursor
  9712                              <1> noclearcursorcl:
  9713 00007C3E E899EDFFFF          <1> 		call reloadallgraphics
  9714                              <1> noreloadgraphicsclick:
  9715 00007C43 30E4                <1> 		xor ah, ah
  9716 00007C45 31C9                <1> 		xor ecx, ecx
  9717 00007C47 31D2                <1> 		xor edx, edx
  9718 00007C49 B0FE                <1> 		mov al, 254
  9719 00007C4B 668B15[74570000]    <1> 		mov dx, [mousecursorposition]
  9720 00007C52 668B0D[76570000]    <1> 		mov cx, [mousecursorposition + 2]
  9721 00007C59 66BBE738            <1> 		mov bx, 0011100011100111b
  9722 00007C5D C605[07770000]01    <1> 		mov byte [showcursorfonton], 1
  9723 00007C64 E83AF3FFFF          <1> 		call showfontvesa
  9724 00007C69 C605[07770000]00    <1> 		mov byte [showcursorfonton], 0
  9725 00007C70 C3                  <1> 		ret
  9726 00007C71 00                  <1> windrag db 0
  9727 00007C72 00000000            <1> lastdrag dw 0,0
  9728 00007C76 00000000            <1> grpctblpos dw 0,0
  9729                              <1> 
  9730                              <1> 
  9731                              <1> 
  9732 00007C7A 00<rept>            <1> grphbuf times 16 db 0
  9733                              <1> 	graphicsadd:
  9734 00007C8A BF[13CF0000]        <1> 		mov edi, graphicstable
  9735                              <1> 	shwgrph1:
  9736 00007C8F 397702              <1> 		cmp dword [edi + 2], esi
  9737 00007C92 7414                <1> 		je showgraphicsreplace2
  9738 00007C94 81C710000000        <1> 		add edi, 16
  9739 00007C9A 81FF[13D10000]      <1> 		cmp edi, graphicstableend
  9740 00007CA0 0F8337020000        <1> 		jae near showgraphicsnew
  9741 00007CA6 EBE7                <1> 		jmp shwgrph1
  9742                              <1> 	showgraphicsreplace2:
  9743 00007CA8 8935[7C7C0000]      <1> 		mov [grphbuf + 2], esi
  9744 00007CAE 668915[807C0000]    <1> 		mov [grphbuf + 6], dx
  9745 00007CB5 66890D[827C0000]    <1> 		mov [grphbuf + 8], cx
  9746 00007CBC 891D[867C0000]      <1> 		mov [grphbuf + 12], ebx
  9747 00007CC2 30FF                <1> 		xor bh, bh
  9748 00007CC4 88E3                <1> 		mov bl, ah
  9749 00007CC6 30E4                <1> 		xor ah, ah
  9750 00007CC8 66A3[847C0000]      <1> 		mov [grphbuf + 10], ax	
  9751 00007CCE 66891D[7A7C0000]    <1> 		mov [grphbuf], bx
  9752 00007CD5 66A1[7A7C0000]      <1> 		mov ax, [grphbuf]
  9753 00007CDB 663D0100            <1> 		cmp ax, 1
  9754 00007CDF 0F8419000000        <1> 		je near replaceicon
  9755 00007CE5 663D0200            <1> 		cmp ax, 2
  9756 00007CE9 0F8493000000        <1> 		je near replacestring
  9757 00007CEF 663D0300            <1> 		cmp ax, 3
  9758 00007CF3 0F840F010000        <1> 		je near replacewindow
  9759 00007CF9 E9BC010000          <1> 		jmp showgraphicsreplace
  9760                              <1> 	replaceicon:
  9761 00007CFE 893D[11770000]      <1> 		mov [lastpos], edi
  9762 00007D04 8935[15770000]      <1> 		mov [lastpos + 4], esi
  9763 00007D0A 8B7702              <1> 		mov esi, [edi + 2]
  9764 00007D0D 668B5F0C            <1> 		mov bx, [edi + 12]
  9765 00007D11 668B5706            <1> 		mov dx, [edi + 6]
  9766 00007D15 668B4F08            <1> 		mov cx, [edi + 8]
  9767 00007D19 668B06              <1> 		mov ax, [esi]
  9768 00007D1C 66A3[19770000]      <1> 		mov [colorbuf], ax
  9769 00007D22 66A1[D8690000]      <1> 		mov ax, [background]
  9770 00007D28 668906              <1> 		mov [esi], ax
  9771 00007D2B 8B5F0C              <1> 		mov ebx, [edi + 12]
  9772 00007D2E 668B470A            <1> 		mov ax, [edi + 10]
  9773 00007D32 2401                <1> 		and al, 1
  9774 00007D34 A2[617F0000]        <1> 		mov [iconselected], al
  9775 00007D39 668B470A            <1> 		mov ax, [edi + 10]
  9776 00007D3D E86AEAFFFF          <1> 		call showicon2
  9777 00007D42 8B3D[11770000]      <1> 		mov edi, [lastpos]
  9778 00007D48 8B7702              <1> 		mov esi, [edi + 2]
  9779 00007D4B 66A1[19770000]      <1> 		mov ax, [colorbuf]
  9780 00007D51 668906              <1> 		mov [esi], ax
  9781 00007D54 8B35[15770000]      <1> 		mov esi, [lastpos + 4]
  9782 00007D5A 668B15[807C0000]    <1> 		mov dx, [grphbuf + 6]
  9783 00007D61 668B0D[827C0000]    <1> 		mov cx, [grphbuf + 8]
  9784 00007D68 668B1D[7A7C0000]    <1> 		mov bx, [grphbuf]
  9785 00007D6F 66A1[847C0000]      <1> 		mov ax, [grphbuf + 10]
  9786 00007D75 88DC                <1> 		mov ah, bl
  9787 00007D77 8B1D[867C0000]      <1> 		mov ebx, [grphbuf + 12]
  9788 00007D7D E938010000          <1> 		jmp showgraphicsreplace
  9789                              <1> 	replacestring:
  9790 00007D82 893D[11770000]      <1> 		mov [lastpos], edi
  9791 00007D88 8935[15770000]      <1> 		mov [lastpos + 4], esi
  9792 00007D8E 8B5F0C              <1> 		mov ebx, [edi + 12]
  9793 00007D91 8B7702              <1> 		mov esi, [edi + 2]
  9794 00007D94 668B5706            <1> 		mov dx, [edi + 6]
  9795 00007D98 668B4F08            <1> 		mov cx, [edi + 8]
  9796 00007D9C 66A1[926F0000]      <1> 		mov ax, [colorfont2]
  9797 00007DA2 66A3[19770000]      <1> 		mov [colorbuf], ax
  9798 00007DA8 66A1[D8690000]      <1> 		mov ax, [background]
  9799 00007DAE 66A3[926F0000]      <1> 		mov [colorfont2], ax		
  9800 00007DB4 8B5F0C              <1> 		mov ebx, [edi + 12]
  9801 00007DB7 668B470A            <1> 		mov ax, [edi + 10]
  9802 00007DBB 2401                <1> 		and al, 1
  9803 00007DBD A2[09770000]        <1> 		mov [mouseselecton], al
  9804 00007DC2 668B470A            <1> 		mov ax, [edi + 10]
  9805 00007DC6 E899F1FFFF          <1> 		call showstring2
  9806 00007DCB 66A1[19770000]      <1> 		mov ax, [colorbuf]
  9807 00007DD1 66A3[926F0000]      <1> 		mov [colorfont2], ax
  9808 00007DD7 8B3D[11770000]      <1> 		mov edi, [lastpos]
  9809 00007DDD 8B7702              <1> 		mov esi, [edi + 2]
  9810 00007DE0 668B15[807C0000]    <1> 		mov dx, [grphbuf + 6]
  9811 00007DE7 668B0D[827C0000]    <1> 		mov cx, [grphbuf + 8]
  9812 00007DEE 668B1D[7A7C0000]    <1> 		mov bx, [grphbuf]
  9813 00007DF5 66A1[847C0000]      <1> 		mov ax, [grphbuf + 10]
  9814 00007DFB 88DC                <1> 		mov ah, bl
  9815 00007DFD 8B1D[867C0000]      <1> 		mov ebx, [grphbuf + 12]
  9816 00007E03 E9B2000000          <1> 		jmp showgraphicsreplace
  9817                              <1> 	replacewindow:
  9818 00007E08 893D[11770000]      <1> 		mov [lastpos], edi
  9819 00007E0E 8935[15770000]      <1> 		mov [lastpos + 4], esi
  9820 00007E14 8B7702              <1> 		mov esi, [edi + 2]
  9821 00007E17 8B3D[A4710000]      <1> 		mov edi, [windowbufloc]
  9822 00007E1D 31D2                <1> 		xor edx, edx
  9823 00007E1F 668B15[7E550000]    <1> 		mov dx, [resolutionx2]
  9824 00007E26 C1E204              <1> 		shl edx, 4
  9825 00007E29 29D7                <1> 		sub edi, edx
  9826 00007E2B 31D2                <1> 		xor edx, edx
  9827 00007E2D 668B16              <1> 		mov dx, [esi]
  9828 00007E30 660316              <1> 		add dx, [esi]
  9829 00007E33 668B4E02            <1> 		mov cx, [esi + 2]
  9830 00007E37 6681C11000          <1> 		add cx, 16
  9831 00007E3C 66A1[D8690000]      <1> 		mov ax, [background]
  9832 00007E42 803D[717C0000]01    <1> 		cmp byte [windrag], 1
  9833 00007E49 7604                <1> 		jbe clearwindow
  9834 00007E4B 662B4E02            <1> 		sub cx, [esi + 2]
  9835                              <1> 	clearwindow:
  9836                              <1> 		%ifdef gui.background
  9837                              <1> 			cmp dword [backgroundimage], 0
  9838                              <1> 			je .noback
  9839                              <1> 			push esi
  9840                              <1> 			mov esi, [backgroundimage]
  9841                              <1> 			sub edi, [physbaseptr]
  9842                              <1> 			add esi, edi
  9843                              <1> 			add edi, [physbaseptr]
  9844                              <1> 			mov ax, [esi]
  9845                              <1> 			pop esi
  9846                              <1> 		.noback:
  9847                              <1> 		%endif
  9848 00007E4F 668907              <1> 		mov [edi], ax
  9849 00007E52 81C702000000        <1> 		add edi, 2
  9850 00007E58 81EA02000000        <1> 		sub edx, 2
  9851 00007E5E 81FA00000000        <1> 		cmp edx, 0
  9852 00007E64 75E9                <1> 		jne clearwindow
  9853 00007E66 6649                <1> 		dec cx
  9854 00007E68 668B15[7E550000]    <1> 		mov dx, [resolutionx2]
  9855 00007E6F 662B16              <1> 		sub dx, [esi]
  9856 00007E72 662B16              <1> 		sub dx, [esi]
  9857 00007E75 01D7                <1> 		add edi, edx
  9858 00007E77 668B16              <1> 		mov dx, [esi]
  9859 00007E7A 660316              <1> 		add dx, [esi]
  9860 00007E7D 6681F90000          <1> 		cmp cx, 0
  9861 00007E82 75CB                <1> 		jne clearwindow
  9862                              <1> 	endwindowclear:
  9863 00007E84 C605[62220000]00    <1> 		mov byte [termcopyon], 0
  9864 00007E8B 8B3D[11770000]      <1> 		mov edi, [lastpos]
  9865 00007E91 8B35[7C7C0000]      <1> 		mov esi, [grphbuf + 2]
  9866 00007E97 668B15[807C0000]    <1> 		mov dx, [grphbuf + 6]
  9867 00007E9E 668B0D[827C0000]    <1> 		mov cx, [grphbuf + 8]
  9868 00007EA5 668B1D[7A7C0000]    <1> 		mov bx, [grphbuf]
  9869 00007EAC 66A1[847C0000]      <1> 		mov ax, [grphbuf + 10]
  9870 00007EB2 88DC                <1> 		mov ah, bl
  9871 00007EB4 8B1D[867C0000]      <1> 		mov ebx, [grphbuf + 12]
  9872                              <1> 	showgraphicsreplace:
  9873 00007EBA 897702              <1> 		mov [edi + 2], esi
  9874 00007EBD 66895706            <1> 		mov [edi + 6], dx
  9875 00007EC1 66894F08            <1> 		mov [edi + 8], cx
  9876 00007EC5 895F0C              <1> 		mov [edi + 12], ebx
  9877 00007EC8 30FF                <1> 		xor bh, bh
  9878 00007ECA 88E3                <1> 		mov bl, ah
  9879 00007ECC 30E4                <1> 		xor ah, ah
  9880 00007ECE 6689470A            <1> 		mov [edi + 10], ax
  9881 00007ED2 66891F              <1> 		mov [edi], bx
  9882 00007ED5 8B5F0C              <1> 		mov ebx, [edi + 12]
  9883 00007ED8 668B470A            <1> 		mov ax, [edi + 10]
  9884 00007EDC C3                  <1> 		ret
  9885                              <1> 	showgraphicsnew:
  9886 00007EDD BF[13CF0000]        <1> 		mov edi, graphicstable
  9887                              <1> 	shwgrph2:
  9888 00007EE2 66813F0000          <1> 		cmp word [edi], 0
  9889 00007EE7 74D1                <1> 		je showgraphicsreplace
  9890 00007EE9 81C710000000        <1> 		add edi, 16
  9891 00007EEF 81FF[13D10000]      <1> 		cmp edi, graphicstableend
  9892 00007EF5 72EB                <1> 		jb shwgrph2
  9893                              <1> 	showgraphicsdone:
  9894 00007EF7 C3                  <1> 		ret
  9895                              <1> 	
  9896                              <1> putpixel: ;color in si, point is (dx,cx)
  9897                              <1> 		;destroys edi, ebx, eax
  9898 00007EF8 6650                <1> 	push ax
  9899 00007EFA 6653                <1> 	push bx
  9900 00007EFC 31C0                <1> 	xor eax, eax
  9901 00007EFE 31DB                <1> 	xor ebx, ebx
  9902 00007F00 31FF                <1> 	xor edi, edi
  9903 00007F02 668B1D[92540000]    <1> 	mov bx, [resolutiony]
  9904 00007F09 66A1[90540000]      <1> 	mov ax, [resolutionx]
  9905 00007F0F 6639C2              <1> 	cmp dx, ax
  9906 00007F12 7720                <1> 	ja .doneput
  9907 00007F14 66D1E0              <1> 	shl ax, 1
  9908 00007F17 6639D9              <1> 	cmp cx, bx
  9909 00007F1A 7718                <1> 	ja .doneput
  9910 00007F1C 6689CB              <1> 	mov bx, cx
  9911 00007F1F 52                  <1> 	push edx
  9912 00007F20 F7E3                <1> 	mul ebx
  9913 00007F22 5A                  <1> 	pop edx
  9914 00007F23 6601D7              <1> 	add di, dx
  9915 00007F26 6601D7              <1> 	add di, dx
  9916 00007F29 01C7                <1> 	add edi, eax
  9917 00007F2B 033D[A6540000]      <1> 	add edi, [physbaseptr]
  9918 00007F31 668937              <1> 	mov [edi], si
  9919                              <1> .doneput:
  9920 00007F34 665B                <1> 	pop bx
  9921 00007F36 6658                <1> 	pop ax
  9922 00007F38 C3                  <1> 	ret
  9923                              <1> 	
  9924                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
  9925 00007F39 31FF                <1> 	xor edi, edi
  9926 00007F3B 31C0                <1> 	xor eax, eax
  9927 00007F3D 31DB                <1> 	xor ebx, ebx
  9928 00007F3F 668B1D[7E550000]    <1> 	mov bx, [resolutionx2]
  9929 00007F46 6689D7              <1> 	mov di, dx
  9930 00007F49 6601D7              <1> 	add di, dx
  9931 00007F4C 6689C8              <1> 	mov ax, cx
  9932 00007F4F F7E3                <1> 	mul ebx
  9933 00007F51 01C7                <1> 	add edi, eax
  9934 00007F53 033D[A6540000]      <1> 	add edi, [physbaseptr]
  9935 00007F59 C3                  <1> 	ret
  9936                              <1> 
  9937 00007F5A 00                  <1> 	mouseon db 0
  9938 00007F5B 0000                <1> 	icon dw 0	;pointer to icon
  9939 00007F5D 00000000            <1> 	codepointer dd 0 ;pointer to code
  9940 00007F61 00                  <1> 	iconselected db 0
  9941                                  %endif
  9942                                  %ifdef network.included
  9943                                  	%include "source/network.asm"
  9944                              <1> network.init:
  9945                              <1> %ifdef rtl8139.included
  9946                              <1> 	%include "source/drivers/network/rtl8139.asm"
  9947                              <2> ;RTL8139 NIC DRIVER
  9948                              <2> rtl8139:
  9949 00007F62 E805000000          <2> 	call .init
  9950 00007F67 E9CE010000          <2> 	jmp .end
  9951                              <2> 
  9952                              <2> .RBSTART equ 0x30
  9953                              <2> .IMR equ 0x3C
  9954                              <2> .ISR equ 0x3E
  9955                              <2> .CMD equ 0x37
  9956                              <2> .RCR equ 0x44
  9957                              <2> .CONFIG1 equ 0x52
  9958                              <2> .TSD0 equ 0x10
  9959                              <2> .TSAD0 equ 0x20
  9960                              <2> .init:	;should find card, get mac, and initialize card
  9961 00007F6C 31C0                <2> 	xor eax, eax
  9962 00007F6E A2[895F0000]        <2> 	mov [pcifunction], al
  9963 00007F73 A2[875F0000]        <2> 	mov [pcibus], al
  9964 00007F78 A2[885F0000]        <2> 	mov [pcidevice], al
  9965 00007F7D B002                <2> 	mov al, 0x02 ;type code
  9966 00007F7F A2[18600000]        <2> 	mov [pcitype], al
  9967 00007F84 B8EC103981          <2> 	mov eax, 0x813910EC
  9968 00007F89 A3[8C5F0000]        <2> 	mov [pcidevid], eax
  9969 00007F8E E80DE0FFFF          <2> 	call getpciport
  9970 00007F93 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
  9971 00007F99 7501                <2> 	jne .initnic
  9972 00007F9B C3                  <2> 	ret
  9973                              <2> .initnic:
  9974 00007F9C 8915[19810000]      <2> 	mov [.basenicaddr], edx
  9975 00007FA2 89D1                <2> 	mov ecx, edx
  9976 00007FA4 E8F5AEFFFF          <2> 	call showhex	;for debugging, please remove
  9977 00007FA9 BE[6CB70100]        <2> 	mov esi, rbuffstart
  9978 00007FAE B900200000          <2> 	mov ecx, 8192
  9979 00007FB3 31C0                <2> 	xor eax, eax
  9980                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
  9981 00007FB5 8806                <2> 	mov [esi], al
  9982 00007FB7 46                  <2> 	inc esi
  9983 00007FB8 6649                <2> 	dec cx
  9984 00007FBA 6681F90000          <2> 	cmp cx, 0
  9985 00007FBF 75F4                <2> 	jne .clearrbuff
  9986                              <2> .findmac:
  9987 00007FC1 8B15[19810000]      <2> 	mov edx, [.basenicaddr]
  9988 00007FC7 BF[1E810000]        <2> 	mov edi, .mac
  9989 00007FCC B906000000          <2> 	mov ecx, 6
  9990                              <2> .macputloop:
  9991 00007FD1 EC                  <2> 	in al, dx
  9992 00007FD2 8807                <2> 	mov [edi], al
  9993 00007FD4 47                  <2> 	inc edi
  9994 00007FD5 42                  <2> 	inc edx
  9995 00007FD6 49                  <2> 	dec ecx
  9996 00007FD7 75F8                <2> 	jnz .macputloop
  9997 00007FD9 B9[1E810000]        <2> 	mov ecx, .mac
  9998 00007FDE E8C90B0000          <2> 	call showmac
  9999 00007FE3 E817000000          <2> 	call .resetnic
 10000 00007FE8 BE[24810000]        <2> 	mov esi, .name
 10001 00007FED E82D9DFFFF          <2> 	call print
 10002 00007FF2 BE[2D810000]        <2> 	mov esi, .initmsg
 10003 00007FF7 E8239DFFFF          <2> 	call print
 10004 00007FFC 31DB                <2> 	xor ebx, ebx
 10005 00007FFE C3                  <2> 	ret
 10006                              <2> .resetnic:
 10007 00007FFF 8B15[19810000]      <2> 	mov edx, [.basenicaddr]
 10008 00008005 81C252000000        <2> 	add edx, .CONFIG1
 10009 0000800B 30C0                <2> 	xor al, al
 10010 0000800D EE                  <2> 	out dx, al	;WAKE UP!!!!
 10011 0000800E 8B15[19810000]      <2> 	mov edx, [.basenicaddr]
 10012 00008014 81C237000000        <2> 	add edx, .CMD
 10013 0000801A B010                <2> 	mov al, 0x10
 10014 0000801C EE                  <2> 	out dx, al	;Reset
 10015                              <2> .resetnicwait:
 10016 0000801D EC                  <2> 	in al, dx
 10017 0000801E A810                <2> 	test al, 0x10
 10018 00008020 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
 10019 00008026 8B15[19810000]      <2> 	mov edx, [.basenicaddr]
 10020 0000802C 81C230000000        <2> 	add edx, .RBSTART
 10021 00008032 B8[6CB70100]        <2> 	mov eax, rbuffstart
 10022 00008037 0500001000          <2> 	add eax, 0x100000 ;change virtual to physical address
 10023 0000803C EF                  <2> 	out dx, eax	;give nic receive buffer location
 10024 0000803D 8B15[19810000]      <2> 	mov edx, [.basenicaddr]
 10025 00008043 81C23C000000        <2> 	add edx, .IMR
 10026                              <2> 	;in ax, dx
 10027 00008049 66B80500            <2> 	mov ax, 5
 10028 0000804D 66EF                <2> 	out dx, ax	;set both TOK and ROK interrupts
 10029 0000804F 8B15[19810000]      <2> 	mov edx, [.basenicaddr]
 10030 00008055 81C244000000        <2> 	add edx, .RCR
 10031 0000805B B802000000          <2> 	mov eax, 000010b ;receive only physical matches
 10032 00008060 0580000000          <2> 	add eax, 128 ;enable wrap option
 10033 00008065 EF                  <2> 	out dx, eax	;recieve packets from all matches
 10034 00008066 8B15[19810000]      <2> 	mov edx, [.basenicaddr]
 10035 0000806C 81C237000000        <2> 	add edx, .CMD
 10036 00008072 B00C                <2> 	mov al, 0x0C
 10037 00008074 EE                  <2> 	out dx, al	;use transmit and receive
 10038 00008075 C605[1D810000]01    <2> 	mov byte [.nicconfig], 1
 10039 0000807C C3                  <2> 	ret
 10040                              <2> 	
 10041                              <2> .sendpacket:	;packet with beginning in edi and end in esi
 10042 0000807D 56                  <2> 	push esi
 10043 0000807E 57                  <2> 	push edi
 10044 0000807F 803D[1D810000]01    <2> 	cmp byte [.nicconfig], 1
 10045 00008086 7410                <2> 	je .sendit
 10046 00008088 E8DFFEFFFF          <2> 	call .init
 10047 0000808D 5F                  <2> 	pop edi
 10048 0000808E 5E                  <2> 	pop esi
 10049 0000808F 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10050 00008095 75E6                <2> 	jne .sendpacket
 10051 00008097 C3                  <2> 	ret
 10052                              <2> .sendit:
 10053 00008098 E862FFFFFF          <2> 	call .resetnic
 10054 0000809D 8B15[19810000]      <2> 	mov edx, [.basenicaddr]
 10055 000080A3 81C220000000        <2> 	add edx, .TSAD0
 10056 000080A9 5F                  <2> 	pop edi
 10057 000080AA 8B0D[1E810000]      <2> 	mov ecx, [.mac]
 10058 000080B0 894F06              <2> 	mov [edi + 6], ecx
 10059 000080B3 668B0D[22810000]    <2> 	mov cx, [.mac + 4]
 10060 000080BA 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 10061 000080BE A1[3E020000]        <2> 	mov eax, [basecache]
 10062 000080C3 C1E004              <2> 	shl eax, 4
 10063 000080C6 01F8                <2> 	add eax, edi
 10064 000080C8 EF                  <2> 	out dx, eax	;here's Johnny!
 10065 000080C9 5E                  <2> 	pop esi
 10066 000080CA 29FE                <2> 	sub esi, edi
 10067 000080CC 8B15[19810000]      <2> 	mov edx, [.basenicaddr]
 10068 000080D2 81C210000000        <2> 	add edx, .TSD0
 10069 000080D8 ED                  <2> 	in eax, dx ;get tsd
 10070 000080D9 2500E0FFFF          <2> 	and eax, 0xFFFFE000 ;clear off thirteen bits
 10071 000080DE 01F0                <2> 	add eax, esi ;add length to tsd
 10072 000080E0 25FFDFFFFF          <2> 	and eax, 0xFFFFDFFF ;clear own bit
 10073 000080E5 EF                  <2> 	out dx, eax
 10074                              <2> .checknicownbit:
 10075 000080E6 8B15[19810000]      <2> 	mov edx, [.basenicaddr]
 10076 000080EC 81C210000000        <2> 	add edx, .TSD0
 10077 000080F2 ED                  <2> 	in eax, dx
 10078 000080F3 2500200000          <2> 	and eax, 0x2000 ;check own bit
 10079 000080F8 3D00200000          <2> 	cmp eax, 0x2000
 10080 000080FD 75E7                <2> 	jne .checknicownbit
 10081                              <2> .checknictokbit:
 10082 000080FF 8B15[19810000]      <2> 	mov edx, [.basenicaddr]
 10083 00008105 81C210000000        <2> 	add edx, .TSD0
 10084 0000810B ED                  <2> 	in eax, dx
 10085 0000810C 2500800000          <2> 	and eax, 0x8000	;check tok bit
 10086 00008111 3D00800000          <2> 	cmp eax, 0x8000
 10087 00008116 75E7                <2> 	jne .checknictokbit
 10088 00008118 C3                  <2> 	ret
 10089 00008119 00000000            <2> .basenicaddr dd 0
 10090 0000811D 00                  <2> .nicconfig db 0
 10091 0000811E 000000000000        <2> .mac db 0,0,0,0,0,0
 10092 00008124 52544C383133392000  <2> .name db "RTL8139 ",0
 10093 0000812D 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10094 00008136 65640A00            <2>
 10095                              <2> 
 10096                              <2> .end:
 10097                              <1> %endif
 10098                              <1> %ifdef rtl8169.included
 10099                              <1> 	%include "source/drivers/network/rtl8169.asm"
 10100                              <2> ;RTL8169 NIC DRIVER
 10101                              <2> rtl8169:
 10102 0000813A E805000000          <2> 	call .init
 10103 0000813F E9CC030000          <2> 	jmp .end
 10104                              <2> 
 10105                              <2> ;REGISTERS
 10106                              <2> .CMD equ 0x37
 10107                              <2> .TXPOLL equ 0x38
 10108                              <2> .TCR equ 0x40
 10109                              <2> .RCR equ 0x44
 10110                              <2> .IMR equ 0x3C
 10111                              <2> .ISR equ 0x3E
 10112                              <2> .LOCK equ 0x50
 10113                              <2> .CONFIG1 equ 0x52
 10114                              <2> .TDSAR equ 0x20
 10115                              <2> .RDSAR equ 0xE4
 10116                              <2> .MAXRX equ 0xDA
 10117                              <2> .MAXTX equ 0xEC
 10118                              <2> ;IMPORTANT VALUES
 10119                              <2> .OWN equ 0x80000000
 10120                              <2> .EOR equ 0x40000000
 10121                              <2> .POLLING equ 0x40
 10122                              <2> ;CODE
 10123                              <2> .init:	;should find card, get mac, and initialize card
 10124 00008144 31C0                <2> 	xor eax, eax
 10125 00008146 A2[895F0000]        <2> 	mov [pcifunction], al
 10126 0000814B A2[875F0000]        <2> 	mov [pcibus], al
 10127 00008150 A2[885F0000]        <2> 	mov [pcidevice], al
 10128 00008155 B002                <2> 	mov al, 0x02 ;type code
 10129 00008157 A2[18600000]        <2> 	mov [pcitype], al
 10130 0000815C B8EC106981          <2> 	mov eax, 0x816910EC
 10131 00008161 A3[8C5F0000]        <2> 	mov [pcidevid], eax
 10132 00008166 BBFFFFF0FF          <2> 	mov ebx, 0xFFF0FFFF
 10133 0000816B 891D[905F0000]      <2> 	mov [pcidevidmask], ebx
 10134 00008171 E82ADEFFFF          <2> 	call getpciport
 10135 00008176 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10136 0000817C 7501                <2> 	jne .initnic
 10137 0000817E C3                  <2> 	ret
 10138                              <2> .initnic:
 10139 0000817F 8915[21830000]      <2> 	mov [.basenicaddr], edx
 10140 00008185 89D1                <2> 	mov ecx, edx
 10141 00008187 E812ADFFFF          <2> 	call showhex	;for debugging, please remove
 10142 0000818C BE[6CB70100]        <2> 	mov esi, rbuffstart
 10143 00008191 B900200000          <2> 	mov ecx, 8192
 10144 00008196 31C0                <2> 	xor eax, eax
 10145                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 10146 00008198 8806                <2> 	mov [esi], al
 10147 0000819A 46                  <2> 	inc esi
 10148 0000819B 6649                <2> 	dec cx
 10149 0000819D 6681F90000          <2> 	cmp cx, 0
 10150 000081A2 75F4                <2> 	jne .clearrbuff
 10151                              <2> .findmac:
 10152 000081A4 8B15[21830000]      <2> 	mov edx, [.basenicaddr]
 10153 000081AA BF[26830000]        <2> 	mov edi, .mac
 10154 000081AF B906000000          <2> 	mov ecx, 6
 10155                              <2> .macputloop:
 10156 000081B4 EC                  <2> 	in al, dx
 10157 000081B5 8807                <2> 	mov [edi], al
 10158 000081B7 47                  <2> 	inc edi
 10159 000081B8 42                  <2> 	inc edx
 10160 000081B9 49                  <2> 	dec ecx
 10161 000081BA 75F8                <2> 	jnz .macputloop
 10162 000081BC B9[26830000]        <2> 	mov ecx, .mac
 10163 000081C1 E8E6090000          <2> 	call showmac
 10164 000081C6 E817000000          <2> 	call .resetnic
 10165 000081CB BE[2C830000]        <2> 	mov esi, .name
 10166 000081D0 E84A9BFFFF          <2> 	call print
 10167 000081D5 BE[35830000]        <2> 	mov esi, .initmsg
 10168 000081DA E8409BFFFF          <2> 	call print
 10169 000081DF 31DB                <2> 	xor ebx, ebx
 10170 000081E1 C3                  <2> 	ret
 10171                              <2> .resetnic:
 10172 000081E2 8B15[21830000]      <2> 	mov edx, [.basenicaddr]
 10173 000081E8 81C237000000        <2> 	add edx, .CMD
 10174 000081EE B010                <2> 	mov al, 0x10
 10175 000081F0 EE                  <2> 	out dx, al	;Reset
 10176                              <2> .resetnicwait:
 10177 000081F1 EC                  <2> 	in al, dx
 10178 000081F2 A810                <2> 	test al, 0x10
 10179 000081F4 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
 10180 000081FA 8B15[21830000]      <2> 	mov edx, [.basenicaddr]
 10181 00008200 81C250000000        <2> 	add edx, .LOCK
 10182 00008206 B0C0                <2> 	mov al, 0xC0
 10183 00008208 EE                  <2> 	out dx, al	;unlock config registers
 10184 00008209 8B15[21830000]      <2> 	mov edx, [.basenicaddr]
 10185 0000820F 81C244000000        <2> 	add edx, .RCR
 10186 00008215 B80FE70000          <2> 	mov eax, 0x0000E70F
 10187 0000821A EF                  <2> 	out dx, eax	;recieve packets from all matches
 10188 0000821B 8B15[21830000]      <2> 	mov edx, [.basenicaddr]
 10189 00008221 81C240000000        <2> 	add edx, .TCR
 10190 00008227 B800070003          <2> 	mov eax, 0x03000700
 10191 0000822C EF                  <2> 	out dx, eax	;set up tcr
 10192 0000822D 8B15[21830000]      <2> 	mov edx, [.basenicaddr]
 10193 00008233 81C2DA000000        <2> 	add edx, .MAXRX
 10194 00008239 66B8FF1F            <2> 	mov ax, 0x1FFF
 10195 0000823D 66EF                <2> 	out dx, ax	;setup max rx size
 10196 0000823F 8B15[21830000]      <2> 	mov edx, [.basenicaddr]
 10197 00008245 81C2EC000000        <2> 	add edx, .MAXTX
 10198 0000824B B03B                <2> 	mov al, 0x3B
 10199 0000824D EE                  <2> 	out dx, al	;setup max tx size
 10200 0000824E 8B15[21830000]      <2> 	mov edx, [.basenicaddr]
 10201 00008254 81C220000000        <2> 	add edx, .TDSAR
 10202 0000825A A1[3E020000]        <2> 	mov eax, [basecache]
 10203 0000825F C1E004              <2> 	shl eax, 4
 10204 00008262 05[00840000]        <2> 	add eax, .txdesc
 10205 00008267 EF                  <2> 	out dx, eax
 10206 00008268 8B15[21830000]      <2> 	mov edx, [.basenicaddr]
 10207 0000826E 81C2E4000000        <2> 	add edx, .RDSAR
 10208 00008274 A1[3E020000]        <2> 	mov eax, [basecache]
 10209 00008279 C1E004              <2> 	shl eax, 4
 10210 0000827C 05[00850000]        <2> 	add eax, .rxdesc
 10211 00008281 EF                  <2> 	out dx, eax
 10212 00008282 8B15[21830000]      <2> 	mov edx, [.basenicaddr]
 10213 00008288 81C237000000        <2> 	add edx, .CMD
 10214 0000828E B00C                <2> 	mov al, 0x0C
 10215 00008290 EE                  <2> 	out dx, al	;use transmit and receive
 10216 00008291 8B15[21830000]      <2> 	mov edx, [.basenicaddr]
 10217 00008297 81C250000000        <2> 	add edx, .LOCK
 10218 0000829D 30C0                <2> 	xor al, al
 10219 0000829F EE                  <2> 	out dx, al
 10220 000082A0 C605[25830000]01    <2> 	mov byte [.nicconfig], 1
 10221 000082A7 C3                  <2> 	ret
 10222                              <2> 	
 10223                              <2> .sendpacket:	;packet with beginning in edi and end in esi
 10224 000082A8 803D[25830000]01    <2> 	cmp byte [.nicconfig], 1
 10225 000082AF 7412                <2> 	je .sendcachedata
 10226 000082B1 56                  <2> 	push esi
 10227 000082B2 57                  <2> 	push edi
 10228 000082B3 E88CFEFFFF          <2> 	call .init
 10229 000082B8 5F                  <2> 	pop edi
 10230 000082B9 5E                  <2> 	pop esi
 10231 000082BA 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10232 000082C0 75E6                <2> 	jne .sendpacket
 10233 000082C2 C3                  <2> 	ret
 10234                              <2> .sendcachedata:
 10235 000082C3 8B0D[26830000]      <2> 	mov ecx, [.mac]
 10236 000082C9 894F06              <2> 	mov [edi + 6], ecx
 10237 000082CC 668B0D[2A830000]    <2> 	mov cx, [.mac + 4]
 10238 000082D3 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 10239 000082D7 A1[3E020000]        <2> 	mov eax, [basecache]
 10240 000082DC C1E004              <2> 	shl eax, 4
 10241 000082DF 01F8                <2> 	add eax, edi
 10242 000082E1 A3[08840000]        <2> 	mov [.txdesc + 8], eax	;put packet start in tx descriptor
 10243 000082E6 29FE                <2> 	sub esi, edi
 10244 000082E8 668935[00840000]    <2> 	mov [.txdesc], si	;put packet size in tx descriptor
 10245 000082EF 810D[00840000]0000- <2> 	or dword [.txdesc], .OWN	;set own bit
 10246 000082F7 0080                <2>
 10247 000082F9 8B15[21830000]      <2> 	mov edx, [.basenicaddr]
 10248 000082FF 81C238000000        <2> 	add edx, .TXPOLL
 10249 00008305 B040                <2> 	mov al, .POLLING
 10250 00008307 EE                  <2> 	out dx, al	;set up TX Polling
 10251                              <2> .sendloop:
 10252 00008308 A1[00840000]        <2> 	mov eax, [.txdesc]
 10253 0000830D 89C1                <2> 	mov ecx, eax
 10254 0000830F E88AABFFFF          <2> 	call showhex
 10255 00008314 E8D49EFFFF          <2> 	call getchar
 10256 00008319 A900000080          <2> 	test eax, .OWN
 10257 0000831E 75E8                <2> 	jnz .sendloop
 10258 00008320 C3                  <2> 	ret
 10259                              <2> 	
 10260 00008321 00000000            <2> .basenicaddr dd 0
 10261 00008325 00                  <2> .nicconfig db 0
 10262 00008326 000000000000        <2> .mac db 0,0,0,0,0,0
 10263 0000832C 52544C383136392000  <2> .name db "RTL8169 ",0
 10264 00008335 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10265 0000833E 65640A00            <2>
 10266 00008342 90<rept>            <2> align 256, nop
 10267                              <2> .txdesc:
 10268 00008400 00000040            <2> 	dd .EOR	;command
 10269 00008404 00000000            <2> 	dd 0	;vlan
 10270 00008408 00000000            <2> 	dd 0	;low buf
 10271 0000840C 00000000            <2> 	dd 0	;high buf
 10272 00008410 90<rept>            <2> align 256, nop
 10273                              <2> .rxdesc:
 10274 00008500 142000C0            <2> 	dd .OWN | .EOR | (rbuffend - rbuffstart)	;command
 10275 00008504 00000000            <2> 	dd 0	;vlan
 10276 00008508 [6CB70100]          <2> 	dd rbuffstart	;low buf
 10277 0000850C 00000000            <2> 	dd 0	;high buf
 10278                              <2> .end:
 10279                              <1> %endif
 10280                              <1> %ifdef ne2000.included
 10281                              <1> 	%include "source/drivers/network/ne2000.asm"
 10282                              <2> ne2000:
 10283 00008510 E805000000          <2> 	call .init
 10284 00008515 E93C030000          <2> 	jmp .end
 10285                              <2> 
 10286                              <2> ;	PAGE0			PAGE 1			PAGE 2
 10287                              <2> ;	READ	WRITE	READ	WRITE	READ	WRITE
 10288                              <2> ;0	CR		CR		CR		CR		CR		CR
 10289                              <2> ;1	CLDA0 	PSTART	PAR0	PAR0	PSTART	CLDA0
 10290                              <2> ;2	CLDA1	PSTOP	PAR1	PAR1	PSTOP	CLDA1
 10291                              <2> ;3	BNRY	BNRY	PAR2	PAR2	RNPP	RNPP
 10292                              <2> ;4	TSR		TPSR	PAR3	PAR3	TPSR	N/A
 10293                              <2> ;5	NCR		TBCR0	PAR4	PAR4	LNPP	LNPP
 10294                              <2> ;6	FIFO	TCBR1	PAR5	PAR5	ACU		ACU
 10295                              <2> ;7	ISR		ISR		CURR	CURR	ACL		ACL
 10296                              <2> ;8	CRDA0	RSAR0	MAR0	MAR0	N/A		N/A
 10297                              <2> ;9	CRDA1	RSAR1	MAR1	MAR1	N/A		N/A
 10298                              <2> ;A	N/A		RBCR0	MAR2	MAR2	N/A		N/A
 10299                              <2> ;B	N/A		RBCR1	MAR3	MAR3	N/A		N/A
 10300                              <2> ;C	RSR		RCR		MAR4	MAR4	RCR		N/A
 10301                              <2> ;D	CNTR0	TCR		MAR5	MAR5	TCR		N/A
 10302                              <2> ;E	CNTR1	DCR		MAR6	MAR6	DCR		N/A
 10303                              <2> ;F	CNTR2	IMR		MAR7	MAR7	IMR		N/A
 10304                              <2> .CR equ 0
 10305                              <2> 	.CR.STP	equ 1		;Stop
 10306                              <2> 	.CR.STA equ 2		;Start
 10307                              <2> 	.CR.TXP equ 4		;Transmit
 10308                              <2> 	.CR.RD0 equ 8		;Remote DMA 0
 10309                              <2> 	.CR.RD1 equ 0x10	;Remote DMA 1
 10310                              <2> 	.CR.RD2 equ 0x20	;Remote DMA 2
 10311                              <2> 	.CR.PS0 equ 0x40	;Page Select 0
 10312                              <2> 	.CR.PS1 equ 0x80	;Page Select 1
 10313                              <2> .PSTART equ 1
 10314                              <2> .PSTOP equ 2
 10315                              <2> .BNRY equ 3
 10316                              <2> .ISR equ 7
 10317                              <2> 	.ISR.PRX equ 1		;Packet Received
 10318                              <2> 	.ISR.PTX equ 2		;Packet Transmitted
 10319                              <2> 	.ISR.RXE equ 4		;Receive Error
 10320                              <2> 	.ISR.TXE equ 8		;Transmission Error
 10321                              <2> 	.ISR.OVW equ 0x10	;Overwrite
 10322                              <2> 	.ISR.CNT equ 0x20	;Counter Overflow
 10323                              <2> 	.ISR.RDC equ 0x40	;Remote Data Complete
 10324                              <2> 	.ISR.RST equ 0x80	;Reset status
 10325                              <2> .RSAR0 equ 8
 10326                              <2> .RSAR1 equ 9
 10327                              <2> .RBCR0 equ 0xA
 10328                              <2> .RBCR1 equ 0xB
 10329                              <2> .RCR equ 0xC
 10330                              <2> 	.RCR.SEP equ 1		;Save Errored Packets
 10331                              <2> 	.RCR.AR equ 2		;Accept Runt packet
 10332                              <2> 	.RCR.AB equ 4		;Accept Broadcast
 10333                              <2> 	.RCR.AM equ 8		;Accept Multicast
 10334                              <2> 	.RCR.PRO equ 0x10	;Promiscuous Physical
 10335                              <2> 	.RCR.MON equ 0x20	;Monitor Mode
 10336                              <2> .DCR equ 0xE
 10337                              <2> 	.DCR.WTS equ 1		;Word Transfer Select
 10338                              <2> 	.DCR.BOS equ 2		;Byte Order Select
 10339                              <2> 	.DCR.LAS equ 4		;Long Address Select
 10340                              <2> 	.DCR.LS equ 8		;Loopback Select
 10341                              <2> 	.DCR.AR equ 0x10	;Auto-initialize Remote
 10342                              <2> 	.DCR.FT0 equ 0x20	;FIFO Threshold Select 0
 10343                              <2> 	.DCR.FT1 equ 0x40	;FIFO Threshold Select 1
 10344                              <2> .ASIC equ 0x10
 10345                              <2> .RESET equ 0x1F
 10346                              <2> 
 10347                              <2> .init:
 10348 0000851A BBFFFFFFFF          <2> 	mov ebx, 0xFFFFFFFF
 10349 0000851F 31C0                <2> 	xor eax, eax
 10350 00008521 A2[895F0000]        <2> 	mov [pcifunction], al
 10351 00008526 A2[875F0000]        <2> 	mov [pcibus], al
 10352 0000852B A2[885F0000]        <2> 	mov [pcidevice], al
 10353 00008530 B002                <2> 	mov al, 2 ;type code
 10354 00008532 A2[18600000]        <2> 	mov [pcitype], al
 10355 00008537 B8EC102980          <2> 	mov eax, 0x802910EC
 10356 0000853C A3[8C5F0000]        <2> 	mov [pcidevid], eax
 10357 00008541 E85ADAFFFF          <2> 	call getpciport
 10358 00008546 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10359 0000854C 7501                <2> 	jne .good0
 10360 0000854E C3                  <2> 	ret
 10361                              <2> .good0:
 10362 0000854F 8915[19880000]      <2> 	mov [.basenicaddr], edx
 10363 00008555 89D1                <2> 	mov ecx, edx
 10364                              <2> .test:
 10365 00008557 E854000000          <2> 	call .reset
 10366 0000855C E87B000000          <2> 	call .stop
 10367 00008561 89CA                <2> 	mov edx, ecx
 10368 00008563 B9FF000000          <2> 	mov ecx, 0xFF
 10369 00008568 E2FE                <2> 	loop $ ;wait for ~100 us
 10370 0000856A 89D1                <2> 	mov ecx, edx
 10371 0000856C EC                  <2> 	in al, dx
 10372 0000856D 2427                <2> 	and al, (.CR.RD2 | .CR.TXP | .CR.STA | .CR.STP)
 10373 0000856F 3C21                <2> 	cmp al, (.CR.RD2 | .CR.STP)
 10374 00008571 7410                <2> 	je .good1
 10375 00008573 89CA                <2> 	mov edx, ecx
 10376 00008575 81C207000000        <2> 	add edx, .ISR
 10377 0000857B EC                  <2> 	in al, dx
 10378 0000857C 2480                <2> 	and al, .ISR.RST
 10379 0000857E 3C80                <2> 	cmp al, .ISR.RST
 10380 00008580 7401                <2> 	je .good1
 10381 00008582 C3                  <2> 	ret
 10382                              <2> .good1:
 10383 00008583 E816A9FFFF          <2> call showhex	;for debugging, please remove
 10384 00008588 E85B000000          <2> 	call .setup
 10385 0000858D E81A060000          <2> call showmac
 10386 00008592 BE[1E880000]        <2> mov esi, .name
 10387 00008597 E88397FFFF          <2> call print
 10388 0000859C BE[26880000]        <2> mov esi, .initmsg
 10389 000085A1 E87997FFFF          <2> call print
 10390 000085A6 C605[1D880000]01    <2> 	mov byte [.nicconfig], 1
 10391 000085AD 31DB                <2> 	xor ebx, ebx
 10392 000085AF C3                  <2> 	ret
 10393                              <2> .reset:
 10394 000085B0 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10395 000085B6 81C21F000000        <2> 	add edx, .RESET
 10396 000085BC EC                  <2> 	in al, dx
 10397 000085BD EE                  <2> 	out dx, al ;write its contents to itself
 10398 000085BE C3                  <2> 	ret
 10399                              <2> .page:
 10400 000085BF 66C1E00E            <2> 	shl ax, 14
 10401 000085C3 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10402 000085C9 EC                  <2> 	in al, dx
 10403 000085CA 243F                <2> 	and al, 00111111b
 10404 000085CC 08E0                <2> 	or al, ah
 10405 000085CE EE                  <2> 	out dx, al
 10406 000085CF C3                  <2> 	ret
 10407                              <2> .start:
 10408 000085D0 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10409 000085D6 B020                <2> 	mov al, .CR.RD2
 10410 000085D8 B002                <2> 	mov al, .CR.STA
 10411 000085DA EE                  <2> 	out dx, al
 10412 000085DB C3                  <2> 	ret
 10413                              <2> .stop:
 10414 000085DC 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10415 000085E2 B020                <2> 	mov al, .CR.RD2
 10416 000085E4 0C01                <2> 	or al, .CR.STP
 10417 000085E6 EE                  <2> 	out dx, al
 10418 000085E7 C3                  <2> 	ret
 10419                              <2> .setup:
 10420 000085E8 E8EFFFFFFF          <2> 	call .stop
 10421 000085ED 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10422 000085F3 81C20E000000        <2> 	add edx, .DCR
 10423 000085F9 B040                <2> 	mov al, .DCR.FT1
 10424 000085FB 0C01                <2> 	or al, .DCR.WTS
 10425 000085FD 0C08                <2> 	or al, .DCR.LS
 10426 000085FF EE                  <2> 	out dx, al ;Set FIFO threshold, byte order, word-wide DMA
 10427 00008600 E8B9000000          <2> 	call .getmac
 10428 00008605 E8D2FFFFFF          <2> 	call .stop
 10429 0000860A 30C0                <2> 	xor al, al
 10430 0000860C 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10431 00008612 81C20A000000        <2> 	add edx, .RBCR0
 10432 00008618 EE                  <2> 	out dx, al
 10433 00008619 6642                <2> 	inc dx
 10434 0000861B EE                  <2> 	out dx, al ;Clear byte count
 10435 0000861C B800400000          <2> 	mov eax, 16*1024
 10436 00008621 A3[38880000]        <2> 	mov [.ringstart], eax
 10437 00008626 C1E808              <2> 	shr eax, 8
 10438 00008629 66A3[34880000]      <2> 	mov [.pagestart], ax
 10439 0000862F 0534000000          <2> 	add eax, 64-2*6
 10440 00008634 A3[36880000]        <2> 	mov [.pageend], eax
 10441 00008639 C1E008              <2> 	shl eax, 8
 10442 0000863C 66A3[3C880000]      <2> 	mov [.ringend], ax ;set page and ring starts and ends
 10443 00008642 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10444 00008648 81C201000000        <2> 	add edx, .PSTART
 10445 0000864E A0[34880000]        <2> 	mov al, [.pagestart]
 10446 00008653 EE                  <2> 	out dx, al
 10447 00008654 A0[36880000]        <2> 	mov al, [.pageend]
 10448 00008659 6642                <2> 	inc dx
 10449 0000865B EE                  <2> 	out dx, al
 10450 0000865C A0[34880000]        <2> 	mov al, [.pagestart]
 10451 00008661 6642                <2> 	inc dx
 10452 00008663 EE                  <2> 	out dx, al
 10453 00008664 E873FFFFFF          <2> 	call .stop
 10454                              <2> ;INSERT INTERRUPT ENABLE HERE
 10455 00008669 B001                <2> 	mov al, 1
 10456 0000866B E84FFFFFFF          <2> 	call .page
 10457 00008670 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10458 00008676 BF[46880000]        <2> 	mov edi, .rom
 10459                              <2> .copymactocard:
 10460 0000867B 42                  <2> 	inc edx
 10461 0000867C 6E                  <2> 	outsb
 10462 0000867D 81C702000000        <2> 	add edi, 2
 10463 00008683 81FA06000000        <2> 	cmp edx, 6
 10464 00008689 76F0                <2> 	jbe .copymactocard
 10465 0000868B 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10466 00008691 81C207000000        <2> 	add edx, 7
 10467 00008697 A0[34880000]        <2> 	mov al, [.pagestart]
 10468 0000869C FEC0                <2> 	inc al
 10469 0000869E EE                  <2> 	out dx, al ;set page in CURR register
 10470                              <2> ;INSERT MULTICAST INIT HERE
 10471 0000869F E838FFFFFF          <2> 	call .stop
 10472 000086A4 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10473 000086AA 81C20C000000        <2> 	add edx, .RCR
 10474 000086B0 B004                <2> 	mov al, .RCR.AB
 10475 000086B2 EE                  <2> 	out dx, al ;accept broadcast
 10476 000086B3 6642                <2> 	inc dx
 10477 000086B5 30C0                <2> 	xor al, al
 10478 000086B7 EE                  <2> 	out dx, al ;stop loopback
 10479 000086B8 E813FFFFFF          <2> 	call .start
 10480 000086BD C3                  <2> 	ret
 10481                              <2> .getmac:
 10482 000086BE 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10483 000086C4 B020                <2> 	mov al, 0x20
 10484 000086C6 0C02                <2> 	or al, 2
 10485 000086C8 EE                  <2> 	out dx, al	;set STA and RD2 bits
 10486 000086C9 6681C20A00          <2> 	add dx, .RBCR0
 10487 000086CE B010                <2> 	mov al, 16
 10488 000086D0 EE                  <2> 	out dx, al
 10489 000086D1 6642                <2> 	inc dx
 10490 000086D3 30C0                <2> 	xor al, al
 10491 000086D5 EE                  <2> 	out dx, al
 10492 000086D6 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10493 000086DC 6681C20800          <2> 	add dx, .RSAR0
 10494 000086E1 EE                  <2> 	out dx, al
 10495 000086E2 6642                <2> 	inc dx
 10496 000086E4 EE                  <2> 	out dx, al
 10497 000086E5 668B15[19880000]    <2> 	mov dx, [.basenicaddr]
 10498 000086EC B008                <2> 	mov al, 8
 10499 000086EE 0C02                <2> 	or al, 2
 10500 000086F0 EE                  <2> 	out dx, al
 10501 000086F1 668B15[19880000]    <2> 	mov dx, [.basenicaddr]
 10502 000086F8 6681C21000          <2> 	add dx, .ASIC
 10503 000086FD B908000000          <2> 	mov ecx, 8
 10504 00008702 BF[46880000]        <2> 	mov edi, .rom
 10505 00008707 F3666D              <2> 	rep insw
 10506                              <2> .copymac:
 10507 0000870A BF[46880000]        <2> 	mov edi, .rom
 10508 0000870F BE[40880000]        <2> 	mov esi, .mac
 10509 00008714 B906000000          <2> 	mov ecx, 6
 10510                              <2> .lpmac:
 10511 00008719 8A07                <2> 	mov al, [edi]
 10512 0000871B 8806                <2> 	mov [esi], al
 10513 0000871D 81C702000000        <2> 	add edi, 2
 10514 00008723 46                  <2> 	inc esi
 10515 00008724 E2F3                <2> 	loop .lpmac
 10516 00008726 B9[40880000]        <2> 	mov ecx, .mac
 10517 0000872B C3                  <2> 	ret
 10518                              <2> .sendpacket:
 10519 0000872C 803D[1D880000]00    <2> 	cmp byte [.nicconfig], 0
 10520 00008733 7512                <2> 	jne .sendit
 10521 00008735 56                  <2> 	push esi
 10522 00008736 57                  <2> 	push edi
 10523 00008737 E8DEFDFFFF          <2> 	call .init
 10524 0000873C 5F                  <2> 	pop edi
 10525 0000873D 5E                  <2> 	pop esi
 10526 0000873E 81FB00000000        <2> 	cmp ebx, 0
 10527 00008744 7401                <2> 	je .sendit
 10528 00008746 C3                  <2> 	ret
 10529                              <2> .sendit: ;packet start in edi, end in esi
 10530 00008747 87F7                <2> 	xchg esi, edi ;this helps with the outsw
 10531                              <2> 	;now the packet start is in esi, end in edi
 10532 00008749 8B0D[40880000]      <2> 	mov ecx, [.mac]
 10533 0000874F 894E06              <2> 	mov [esi + 6], ecx
 10534 00008752 668B0D[44880000]    <2> 	mov cx, [.mac + 4]
 10535 00008759 66894E0A            <2> 	mov [esi + 10], cx	;copy the correct mac
 10536 0000875D 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10537 00008763 B020                <2> 	mov al, .CR.RD2
 10538 00008765 0C02                <2> 	or al, .CR.STA
 10539 00008767 EE                  <2> 	out dx, al ;set RD2 and STA
 10540 00008768 81C207000000        <2> 	add edx, .ISR ; ISR
 10541 0000876E B040                <2> 	mov al, .ISR.RDC
 10542 00008770 EE                  <2> 	out dx, al ;set RDC flag
 10543 00008771 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10544 00008777 6681C20A00          <2> 	add dx, .RBCR0
 10545 0000877C 89F8                <2> 	mov eax, edi
 10546 0000877E 29F0                <2> 	sub eax, esi
 10547 00008780 BB01000000          <2> 	mov ebx, 1
 10548 00008785 21C3                <2> 	and ebx, eax
 10549 00008787 81FB01000000        <2> 	cmp ebx, 1
 10550 0000878D 7501                <2> 	jne .nofixword
 10551 0000878F 40                  <2> 	inc eax
 10552                              <2> .nofixword:
 10553 00008790 89C1                <2> 	mov ecx, eax ;save length in ecx
 10554 00008792 EE                  <2> 	out dx, al
 10555 00008793 86C4                <2> 	xchg al, ah
 10556 00008795 6642                <2> 	inc dx
 10557 00008797 EE                  <2> 	out dx, al ;send size
 10558 00008798 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10559 0000879E 6681C20800          <2> 	add dx, .RSAR0
 10560 000087A3 66A1[34880000]      <2> 	mov ax, [.pagestart]
 10561 000087A9 C1E008              <2> 	shl eax, 8
 10562 000087AC EE                  <2> 	out dx, al
 10563 000087AD 86C4                <2> 	xchg al, ah
 10564 000087AF 6642                <2> 	inc dx
 10565 000087B1 EE                  <2> 	out dx, al ;send address in NIC memory
 10566 000087B2 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10567 000087B8 B010                <2> 	mov al, .CR.RD1
 10568 000087BA 0C02                <2> 	or al, .CR.STA
 10569 000087BC EE                  <2> 	out dx, al ;set RD and STA
 10570 000087BD 89CB                <2> 	mov ebx, ecx ;save length in ebx
 10571 000087BF D1E9                <2> 	shr ecx, 1
 10572 000087C1 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10573 000087C7 6681C21000          <2> 	add dx, 0x10
 10574 000087CC F3666F              <2> 	rep outsw ;Send the packet data
 10575 000087CF 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10576 000087D5 6681C20700          <2> 	add dx, .ISR
 10577                              <2> .chkcopylp:
 10578 000087DA B440                <2> 	mov ah, .ISR.RDC
 10579 000087DC EC                  <2> 	in al, dx
 10580 000087DD 20C4                <2> 	and ah, al
 10581 000087DF 80FC40              <2> 	cmp ah, 0x40
 10582 000087E2 75F6                <2> 	jne .chkcopylp	
 10583 000087E4 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10584 000087EA 6681C20400          <2> 	add dx, 4
 10585 000087EF A0[34880000]        <2> 	mov al, [.pagestart]
 10586 000087F4 EE                  <2> 	out dx, al ;send start address in pages
 10587 000087F5 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10588 000087FB 81C205000000        <2> 	add edx, 0x5
 10589 00008801 89D8                <2> 	mov eax, ebx
 10590 00008803 EE                  <2> 	out dx, al
 10591 00008804 86C4                <2> 	xchg al, ah
 10592 00008806 6642                <2> 	inc dx
 10593 00008808 EE                  <2> 	out dx, al ;send length
 10594 00008809 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10595 0000880F B020                <2> 	mov al, 0x20
 10596 00008811 0C04                <2> 	or al, 4
 10597 00008813 0C02                <2> 	or al, 2
 10598 00008815 EE                  <2> 	out dx, al ;set RD2, TXP, and STA
 10599 00008816 31DB                <2> 	xor ebx, ebx
 10600 00008818 C3                  <2> 	ret
 10601 00008819 00000000            <2> .basenicaddr dd 0
 10602 0000881D 00                  <2> .nicconfig db 0
 10603 0000881E 4E45323030302000    <2> .name db "NE2000 ",0
 10604 00008826 496E697469616C697A- <2> .initmsg db "Initialized.",10,0
 10605 0000882F 65642E0A00          <2>
 10606                              <2> align 2, nop
 10607 00008834 0000                <2> .pagestart dw 0
 10608 00008836 0000                <2> .pageend dw 0
 10609 00008838 00000000            <2> .ringstart dd 0
 10610 0000883C 00000000            <2> .ringend dd 0
 10611 00008840 000000000000        <2> .mac db 0,0,0,0,0,0
 10612 00008846 00<rept>            <2> .rom times 16 db 0
 10613                              <2> 
 10614                              <2> .end:
 10615                              <1> %endif
 10616                              <1> %ifdef i8254x.included
 10617                              <1> 	%include "source/drivers/network/i8254x.asm"
 10618                              <2> ;Intel 8254x NIC DRIVER
 10619                              <2> i8254x:
 10620 00008856 E805000000          <2> 	call .init
 10621 0000885B E980020000          <2> 	jmp .end
 10622                              <2> 
 10623                              <2> ;REGISTERS
 10624                              <2> .EEC equ 0x10
 10625                              <2> .EERD equ 0x14
 10626                              <2> .TCTL equ 0x400
 10627                              <2> .TIPG equ 0x410
 10628                              <2> .TDBAL equ 0x3800
 10629                              <2> .TDBAH equ 0x3804
 10630                              <2> .TDLEN equ 0x3808
 10631                              <2> .TDH equ 0x3810
 10632                              <2> .TDT equ 0x3818
 10633                              <2> .RAL equ 0x5400
 10634                              <2> .RAH equ 0x5404
 10635                              <2> ;CODE
 10636                              <2> .init:	;should find card, get mac, and initialize card
 10637 00008860 31C0                <2> 	xor eax, eax
 10638 00008862 A2[895F0000]        <2> 	mov [pcifunction], al
 10639 00008867 A2[875F0000]        <2> 	mov [pcibus], al
 10640 0000886C A2[885F0000]        <2> 	mov [pcidevice], al
 10641 00008871 B002                <2> 	mov al, 0x02 ;type code
 10642 00008873 A2[18600000]        <2> 	mov [pcitype], al
 10643 00008878 B886800010          <2> 	mov eax, 0x10008086
 10644 0000887D A3[8C5F0000]        <2> 	mov [pcidevid], eax
 10645 00008882 BBFFFF00FE          <2> 	mov ebx, 0xFE00FFFF
 10646 00008887 891D[905F0000]      <2> 	mov [pcidevidmask], ebx
 10647 0000888D E802D7FFFF          <2> 	call getpcimem
 10648 00008892 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10649 00008898 7501                <2> 	jne .initnic
 10650 0000889A C3                  <2> 	ret
 10651                              <2> .initnic:
 10652 0000889B 8915[358A0000]      <2> 	mov [.basenicaddr], edx
 10653 000088A1 89D1                <2> 	mov ecx, edx
 10654 000088A3 E8F6A5FFFF          <2> 	call showhex	;for debugging, please remove
 10655 000088A8 BE[6CB70100]        <2> 	mov esi, rbuffstart
 10656 000088AD B900200000          <2> 	mov ecx, 8192
 10657 000088B2 31C0                <2> 	xor eax, eax
 10658                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 10659 000088B4 8806                <2> 	mov [esi], al
 10660 000088B6 46                  <2> 	inc esi
 10661 000088B7 6649                <2> 	dec cx
 10662 000088B9 6681F90000          <2> 	cmp cx, 0
 10663 000088BE 75F4                <2> 	jne .clearrbuff
 10664                              <2> .findmac:
 10665 000088C0 8B1D[358A0000]      <2> 	mov ebx, [.basenicaddr]
 10666                              <2> 	; Setup Control Register
 10667 000088C6 B861030000          <2> 	mov eax, 0x361
 10668 000088CB 8903                <2> 	mov [ebx], eax
 10669                              <2> 	; Setup Transmission Descriptors
 10670 000088CD BF[608A0000]        <2> 	mov edi, .tdesc
 10671 000088D2 A1[3E020000]        <2> 	mov eax, [basecache]
 10672 000088D7 C1E004              <2> 	shl eax, 4
 10673 000088DA 01F8                <2> 	add eax, edi
 10674 000088DC 898300380000        <2> 	mov [ebx + .TDBAL], eax
 10675 000088E2 31C0                <2> 	xor eax, eax
 10676 000088E4 898310380000        <2> 	mov [ebx + .TDH], eax
 10677 000088EA 898318380000        <2> 	mov [ebx + .TDT], eax
 10678 000088F0 898304380000        <2> 	mov [ebx + .TDBAH], eax
 10679 000088F6 66B88000            <2> 	mov ax, 128
 10680 000088FA 898308380000        <2> 	mov [ebx + .TDLEN], eax
 10681 00008900 B80A010401          <2> 	mov eax, 0x104010A
 10682 00008905 898300040000        <2> 	mov [ebx + .TCTL], eax	;turn on transmission, set up other registers
 10683 0000890B B80A285000          <2> 	mov eax, 0x50280A
 10684 00008910 898310040000        <2> 	mov [ebx + .TIPG], eax	;setup TIPG
 10685                              <2> 	;Setup Receive Registers
 10686 00008916 BF[3A8A0000]        <2> 	mov edi, .mac
 10687 0000891B 81C300540000        <2> 	add ebx, .RAL
 10688 00008921 31D2                <2> 	xor edx, edx
 10689 00008923 B903000000          <2> 	mov ecx, 3
 10690                              <2> .macloop:
 10691 00008928 E8BC000000          <2> 	call .eepromread
 10692 0000892D 668907              <2> 	mov [edi], ax
 10693 00008930 668903              <2> 	mov [ebx], ax
 10694 00008933 42                  <2> 	inc edx
 10695 00008934 81C302000000        <2> 	add ebx, 2
 10696 0000893A 81C702000000        <2> 	add edi, 2
 10697 00008940 E2E6                <2> 	loop .macloop
 10698 00008942 66B80080            <2> 	mov ax, 0x8000
 10699 00008946 668903              <2> 	mov [ebx], ax	;set address valid bit
 10700                              <2> 
 10701 00008949 B9[3A8A0000]        <2> 	mov ecx, .mac
 10702 0000894E E859020000          <2> 	call showmac
 10703 00008953 BE[408A0000]        <2> 	mov esi, .name
 10704 00008958 E8C293FFFF          <2> 	call print
 10705 0000895D BE[488A0000]        <2> 	mov esi, .initmsg
 10706 00008962 E8B893FFFF          <2> 	call print
 10707 00008967 C605[398A0000]01    <2> 	mov byte [.nicconfig], 1
 10708 0000896E 31DB                <2> 	xor ebx, ebx
 10709 00008970 C3                  <2> 	ret
 10710                              <2> 	
 10711                              <2> .sendpacket:
 10712 00008971 803D[398A0000]00    <2> 	cmp byte [.nicconfig], 0
 10713 00008978 7512                <2> 	jne .sendit
 10714 0000897A 56                  <2> 	push esi
 10715 0000897B 57                  <2> 	push edi
 10716 0000897C E8DFFEFFFF          <2> 	call .init
 10717 00008981 5F                  <2> 	pop edi
 10718 00008982 5E                  <2> 	pop esi
 10719 00008983 81FB00000000        <2> 	cmp ebx, 0
 10720 00008989 7401                <2> 	je .sendit
 10721 0000898B C3                  <2> 	ret
 10722                              <2> .sendit	;packet start in edi, packet end in esi
 10723 0000898C 8B0D[3A8A0000]      <2> 	mov ecx, [.mac]
 10724 00008992 894F06              <2> 	mov [edi + 6], ecx
 10725 00008995 668B0D[3E8A0000]    <2> 	mov cx, [.mac + 4]
 10726 0000899C 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 10727 000089A0 8B1D[358A0000]      <2> 	mov ebx, [.basenicaddr]
 10728 000089A6 29FE                <2> 	sub esi, edi
 10729 000089A8 A1[3E020000]        <2> 	mov eax, [basecache]
 10730 000089AD C1E004              <2> 	shl eax, 4
 10731 000089B0 01F8                <2> 	add eax, edi	;ALWAYS ADD THE VIRTUAL MEMORY OFFSET!
 10732 000089B2 A3[608A0000]        <2> 	mov [.tdesc], eax	;Low Address
 10733 000089B7 8935[688A0000]      <2> 	mov [.tdesc + 8], esi	;Length
 10734 000089BD B8000B0000          <2> 	mov eax, 0xB00
 10735 000089C2 A3[6A8A0000]        <2> 	mov [.tdesc + 10], eax	;Command
 10736 000089C7 B810000000          <2> 	mov eax, 16
 10737 000089CC 898318380000        <2> 	mov [ebx + .TDT], eax	;Trail of TDESC ring buffer
 10738                              <2> .checksta:
 10739 000089D2 8B0D[6C8A0000]      <2> 	mov ecx, [.tdesc + 12]
 10740 000089D8 81E101000000        <2> 	and ecx, 1
 10741 000089DE 81F900000000        <2> 	cmp ecx, 0
 10742 000089E4 74EC                <2> 	je .checksta
 10743 000089E6 31DB                <2> 	xor ebx, ebx
 10744 000089E8 C3                  <2> 	ret
 10745                              <2> 	
 10746                              <2> .eepromread:	;location in EEPROM in edx (actually just dl)
 10747 000089E9 8B35[358A0000]      <2> 	mov esi, [.basenicaddr]
 10748 000089EF 8B4610              <2> 	mov eax, [esi + .EEC]
 10749 000089F2 0D40000000          <2> 	or eax, 1000000b
 10750 000089F7 894610              <2> 	mov [esi + .EEC], eax	;turn software access on
 10751                              <2> .waiteeprom:
 10752 000089FA 8B4610              <2> 	mov eax, [esi + .EEC]
 10753 000089FD 2580000000          <2> 	and eax, 10000000b
 10754 00008A02 3D80000000          <2> 	cmp eax, 10000000b
 10755 00008A07 75F1                <2> 	jne .waiteeprom
 10756 00008A09 8B4614              <2> 	mov eax, [esi + .EERD]
 10757 00008A0C 31C0                <2> 	xor eax, eax
 10758 00008A0E 88D4                <2> 	mov ah, dl 	;eeprom address
 10759 00008A10 0C01                <2> 	or al, 1	;start read
 10760 00008A12 894614              <2> 	mov [esi + .EERD], eax
 10761                              <2> .waiteepromread:
 10762 00008A15 8B4614              <2> 	mov eax, [esi + .EERD]
 10763 00008A18 2510000000          <2> 	and eax, 10000b
 10764 00008A1D 3D10000000          <2> 	cmp eax, 10000b
 10765 00008A22 75F1                <2> 	jne .waiteepromread
 10766 00008A24 8B4614              <2> 	mov eax, [esi + .EERD]
 10767 00008A27 668B4610            <2> 	mov ax, [esi + .EEC]
 10768 00008A2B 24BF                <2> 	and al, 10111111b
 10769 00008A2D 66894610            <2> 	mov [esi + .EEC], ax	;turn software access off
 10770 00008A31 C1E810              <2> 	shr eax, 16	;AX has the requested word
 10771 00008A34 C3                  <2> 	ret
 10772                              <2> 
 10773 00008A35 00000000            <2> .basenicaddr dd 0
 10774 00008A39 00                  <2> .nicconfig db 0
 10775 00008A3A 000000000000        <2> .mac db 0,0,0,0,0,0
 10776 00008A40 4938323534582000    <2> .name db "I8254X ",0
 10777 00008A48 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10778 00008A51 65640A00            <2>
 10779 00008A55 00<rept>            <2> align 16, db 0
 10780                              <2> .tdesc:
 10781 00008A60 00000000            <2> 	dd 0	;Address Low = 0
 10782 00008A64 00000000            <2> 	dd 0	;Address High = 4
 10783 00008A68 0000                <2> 	dw 0	;Length = 8
 10784 00008A6A 00                  <2> 	db 0	;CSO = 10
 10785 00008A6B 00                  <2> 	db 0	;CMD = 11
 10786 00008A6C 00                  <2> 	db 0	;STA, RSV = 12
 10787 00008A6D 00                  <2> 	db 0	;CSS = 13
 10788 00008A6E 0000                <2> 	dw 0	;Special = 14
 10789 00008A70 00<rept>            <2> times (128-16) db 0
 10790                              <2> .end:
 10791                              <1> %endif
 10792 00008AE0 C3                  <1> 	ret
 10793                              <1> 
 10794                              <1> sendpacket: ;packet start in edi, end in esi
 10795                              <1> 	%ifdef rtl8139.included
 10796 00008AE1 57                  <1> 		push edi
 10797 00008AE2 56                  <1> 		push esi
 10798 00008AE3 E895F5FFFF          <1> 		call rtl8139.sendpacket
 10799 00008AE8 5E                  <1> 		pop esi
 10800 00008AE9 5F                  <1> 		pop edi
 10801                              <1> 	%endif
 10802                              <1> 	%ifdef rtl8169.included
 10803 00008AEA 57                  <1> 		push edi
 10804 00008AEB 56                  <1> 		push esi
 10805 00008AEC E8B7F7FFFF          <1> 		call rtl8169.sendpacket
 10806 00008AF1 5E                  <1> 		pop esi
 10807 00008AF2 5F                  <1> 		pop edi
 10808                              <1> 	%endif
 10809                              <1> 	%ifdef ne2000.included
 10810 00008AF3 57                  <1> 		push edi
 10811 00008AF4 56                  <1> 		push esi
 10812 00008AF5 E832FCFFFF          <1> 		call ne2000.sendpacket
 10813 00008AFA 5E                  <1> 		pop esi
 10814 00008AFB 5F                  <1> 		pop edi
 10815                              <1> 	%endif
 10816                              <1> 	%ifdef i8254x.included
 10817 00008AFC E870FEFFFF          <1> 		call i8254x.sendpacket
 10818                              <1> 	%endif
 10819 00008B01 C3                  <1> 	ret
 10820                              <1> 
 10821                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
 10822 00008B02 31C0                <1> 	xor eax, eax
 10823 00008B04 31DB                <1> 	xor ebx, ebx
 10824 00008B06 31C9                <1> 	xor ecx, ecx
 10825                              <1> .lp:
 10826 00008B08 8A07                <1> 	mov al, [edi]
 10827 00008B0A 8A6701              <1> 	mov ah, [edi + 1]
 10828 00008B0D 01C3                <1> 	add ebx, eax
 10829 00008B0F 81C702000000        <1> 	add edi, 2
 10830 00008B15 39F7                <1> 	cmp edi, esi
 10831 00008B17 72EF                <1> 	jb .lp
 10832 00008B19 66B9FFFF            <1> 	mov cx, 0xFFFF
 10833 00008B1D 6689D8              <1> 	mov ax, bx
 10834 00008B20 C1EB10              <1> 	shr ebx, 16
 10835 00008B23 6601D8              <1> 	add ax, bx
 10836 00008B26 6629C1              <1> 	sub cx, ax
 10837 00008B29 C3                  <1> 	ret
 10838                              <1> 	
 10839                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
 10840 00008B2A 31DB                <1> 	xor ebx, ebx
 10841 00008B2C 31C9                <1> 	xor ecx, ecx
 10842 00008B2E 31D2                <1> 	xor edx, edx
 10843                              <1> .mlp:
 10844 00008B30 89F7                <1> 	mov edi, esi
 10845 00008B32 4F                  <1> 	dec edi
 10846                              <1> .lp:
 10847 00008B33 47                  <1> 	inc edi
 10848 00008B34 8A07                <1> 	mov al, [edi]
 10849 00008B36 3C20                <1> 	cmp al, " "
 10850 00008B38 7408                <1> 	je .dnlp
 10851 00008B3A 3C00                <1> 	cmp al, 0
 10852 00008B3C 7404                <1> 	je .dnlp
 10853 00008B3E 3C2E                <1> 	cmp al, "."
 10854 00008B40 75F1                <1> 	jne .lp
 10855                              <1> .dnlp:
 10856 00008B42 30C0                <1> 	xor al, al
 10857 00008B44 8807                <1> 	mov [edi], al
 10858 00008B46 53                  <1> 	push ebx
 10859 00008B47 56                  <1> 	push esi
 10860 00008B48 57                  <1> 	push edi
 10861 00008B49 31FF                <1> 	xor edi, edi
 10862 00008B4B E8FAA4FFFF          <1> 	call cnvrttxt
 10863 00008B50 5E                  <1> 	pop esi
 10864 00008B51 5F                  <1> 	pop edi ;i intentionally switch them
 10865 00008B52 5B                  <1> 	pop ebx
 10866 00008B53 46                  <1> 	inc esi
 10867 00008B54 BF[6C8B0000]        <1> 	mov edi, ipstr
 10868 00008B59 880C1F              <1> 	mov [edi + ebx], cl
 10869 00008B5C 43                  <1> 	inc ebx
 10870 00008B5D 81FB04000000        <1> 	cmp ebx, 4
 10871 00008B63 72CB                <1> 	jb .mlp
 10872 00008B65 8B0D[6C8B0000]      <1> 	mov ecx, [ipstr]
 10873 00008B6B C3                  <1> 	ret
 10874 00008B6C 00000000            <1> ipstr dd 0
 10875                              <1> showip: 	;put the ip address in ecx
 10876 00008B70 89C8                <1> 	mov eax, ecx
 10877 00008B72 30DB                <1> 	xor bl, bl
 10878                              <1> .lp:
 10879 00008B74 3C00                <1> 	cmp al, 0
 10880 00008B76 750B                <1> 	jne .nozeroprint
 10881 00008B78 B030                <1> 	mov al, "0"
 10882 00008B7A 50                  <1> 	push eax
 10883 00008B7B E8E396FFFF          <1> 	call prcharq
 10884 00008B80 58                  <1> 	pop eax
 10885 00008B81 30C0                <1> 	xor al, al
 10886                              <1> .nozeroprint:
 10887 00008B83 31C9                <1> 	xor ecx, ecx
 10888 00008B85 88C1                <1> 	mov cl, al
 10889 00008B87 E8DCA3FFFF          <1> 	call showdec
 10890 00008B8C C1E808              <1> 	shr eax, 8
 10891 00008B8F FEC3                <1> 	inc bl
 10892 00008B91 80FB04              <1> 	cmp bl, 4
 10893 00008B94 7312                <1> 	jae .done
 10894 00008B96 50                  <1> 	push eax
 10895 00008B97 6653                <1> 	push bx
 10896 00008B99 BE[A98B0000]        <1> 	mov esi, .dot
 10897 00008B9E E87C91FFFF          <1> 	call print
 10898 00008BA3 665B                <1> 	pop bx
 10899 00008BA5 58                  <1> 	pop eax
 10900 00008BA6 EBCC                <1> 	jmp .lp
 10901                              <1> .done:
 10902 00008BA8 C3                  <1> 	ret
 10903 00008BA9 082E00              <1> .dot db 8,".",0
 10904                              <1> showmac:	;mac begins in [ecx]
 10905 00008BAC BE[FC8B0000]        <1> 	mov esi, macprint
 10906 00008BB1 89CF                <1> 	mov edi, ecx
 10907 00008BB3 81C106000000        <1> 	add ecx, 6
 10908                              <1> showmacloop:
 10909 00008BB9 8A07                <1> 	mov al, [edi]
 10910 00008BBB 8A27                <1> 	mov ah, [edi]
 10911 00008BBD C0E804              <1> 	shr al, 4
 10912 00008BC0 C0E404              <1> 	shl ah, 4
 10913 00008BC3 C0EC04              <1> 	shr ah, 4
 10914 00008BC6 0430                <1> 	add al, 48
 10915 00008BC8 3C39                <1> 	cmp al, "9"
 10916 00008BCA 7606                <1> 	jbe .goodal
 10917 00008BCC 2C30                <1> 	sub al, 48
 10918 00008BCE 2C0A                <1> 	sub al, 0xA
 10919 00008BD0 0441                <1> 	add al, "A"
 10920                              <1> .goodal:
 10921 00008BD2 80C430              <1> 	add ah, 48
 10922 00008BD5 80FC39              <1> 	cmp ah, "9"
 10923 00008BD8 7609                <1> 	jbe .goodah
 10924 00008BDA 80EC30              <1> 	sub ah, 48
 10925 00008BDD 80EC0A              <1> 	sub ah, 0xA
 10926 00008BE0 80C441              <1> 	add ah, "A"
 10927                              <1> .goodah:
 10928 00008BE3 668906              <1> 	mov [esi], ax
 10929 00008BE6 81C603000000        <1> 	add esi, 3
 10930 00008BEC 47                  <1> 	inc edi
 10931 00008BED 39CF                <1> 	cmp edi, ecx
 10932 00008BEF 72C8                <1> 	jb showmacloop
 10933 00008BF1 BE[FC8B0000]        <1> 	mov esi, macprint
 10934 00008BF6 E82491FFFF          <1> 	call print
 10935 00008BFB C3                  <1> 	ret
 10936                              <1> 	
 10937 00008BFC 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
 10938 00008C05 30303A30303A303020- <1>
 10939 00008C0E 00                  <1>
 10940 00008C0F 00000000            <1> ethernetend dw 0,0
 10941 00008C13 C0A80002            <1> sysip db 192,168,0,2
 10942 00008C17 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
 10943                                  %endif
 10944                                      %include "source/data.asm"
 10945 00008C1D 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
 10946 00008C25 73687573683A2000    <1> 	notfound1 db "shush: ",0
 10947 00008C2D 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
 10948 00008C36 6E640A00            <1>
 10949 00008C3A 757365726E616D653A- <1> 	userask db "username:",0
 10950 00008C43 00                  <1>
 10951 00008C44 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10952 00008C4D 00                  <1>
 10953 00008C4E 40                  <1> 	computer db "@"
 10954                              <1> %ifdef io.serial
 10955                              <1> 	computername	db	"SollerOS.",io.serial," ",0
 10956                              <1> %else
 10957 00008C4F 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
 10958 00008C58 00                  <1>
 10959                              <1> %endif
 10960 00008C59 5D242000            <1> 	endprompt db "]$ ",0
 10961 00008C5D 0D                  <1> 	crlf 	db  13
 10962 00008C5E 0A00                <1> 	line	db	10,0
 10963                              <1> 	userlst:
 10964 00008C60 726F6F7400          <1> 			db "root",0
 10965 00008C65 617765736F6D65706F- <1> 			db "awesomepower",0
 10966 00008C6E 77657200            <1>
 10967 00008C72 7573657200          <1> 			db "user",0
 10968 00008C77 70617373776F726400  <1> 			db "password",0
 10969 00008C80 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
 10970 00008C82 00                  <1> 			db 0
 10971                              <1> 	userlstend:
 10972                              <1> 	
 10973                              <1> %ifdef io.serial
 10974                              <1> %else
 10975 00008C82 <incbin>            <1> fonts:	incbin "source/precompiled/fonts.pak"
 10976                              <1> fontend:
 10977                              <1> %endif
 10978                              <1> osend:	;this is the end of the operating system's space on disk
 10979                                      %include "build/fileindex.asm"
 10980                              <1> diskfileindex:
 10981 00009C83 617267746573742E65- <1> db "argtest.elf",0
 10982 00009C8C 6C6600              <1>
 10983 00009C8F 50000000            <1> dd (f0-$$)/512
 10984 00009C93 06010000            <1> dd (f1-f0)/512
 10985 00009C97 6261636B67726F756E- <1> db "background.bmp",0
 10986 00009CA0 642E626D7000        <1>
 10987 00009CA6 56010000            <1> dd (f1-$$)/512
 10988 00009CAA 01140000            <1> dd (f2-f1)/512
 10989 00009CAE 626F6F742E736800    <1> db "boot.sh",0
 10990 00009CB6 57150000            <1> dd (f2-$$)/512
 10991 00009CBA 01000000            <1> dd (f3-f2)/512
 10992 00009CBE 63686172746573742E- <1> db "chartest.elf",0
 10993 00009CC7 656C6600            <1>
 10994 00009CCB 58150000            <1> dd (f3-$$)/512
 10995 00009CCF 26010000            <1> dd (f4-f3)/512
 10996 00009CD3 646F73746573742E63- <1> db "dostest.com",0
 10997 00009CDC 6F6D00              <1>
 10998 00009CDF 7E160000            <1> dd (f4-$$)/512
 10999 00009CE3 01000000            <1> dd (f5-f4)/512
 11000 00009CE7 6578656300          <1> db "exec",0
 11001 00009CEC 7F160000            <1> dd (f5-$$)/512
 11002 00009CF0 01000000            <1> dd (f6-f5)/512
 11003 00009CF4 66696E616C636F756E- <1> db "finalcount.sn",0
 11004 00009CFD 742E736E00          <1>
 11005 00009D02 80160000            <1> dd (f6-$$)/512
 11006 00009D06 01000000            <1> dd (f7-f6)/512
 11007 00009D0A 666F726B00          <1> db "fork",0
 11008 00009D0F 81160000            <1> dd (f7-$$)/512
 11009 00009D13 01000000            <1> dd (f8-f7)/512
 11010 00009D17 68656C6C6F776F726C- <1> db "helloworld.elf",0
 11011 00009D20 642E656C6600        <1>
 11012 00009D26 82160000            <1> dd (f8-$$)/512
 11013 00009D2A D6010000            <1> dd (f9-f8)/512
 11014 00009D2E 696E7400            <1> db "int",0
 11015 00009D32 58180000            <1> dd (f9-$$)/512
 11016 00009D36 01000000            <1> dd (f10-f9)/512
 11017 00009D3A 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 11018 00009D43 2E736E00            <1>
 11019 00009D47 59180000            <1> dd (f10-$$)/512
 11020 00009D4B 01000000            <1> dd (f11-f10)/512
 11021 00009D4F 6D6172696F2E736E00  <1> db "mario.sn",0
 11022 00009D58 5A180000            <1> dd (f11-$$)/512
 11023 00009D5C 01000000            <1> dd (f12-f11)/512
 11024 00009D60 70692E656C6600      <1> db "pi.elf",0
 11025 00009D67 5B180000            <1> dd (f12-$$)/512
 11026 00009D6B 1F010000            <1> dd (f13-f12)/512
 11027 00009D6F 736F6C6C65726F732E- <1> db "solleros.bmp",0
 11028 00009D78 626D7000            <1>
 11029 00009D7C 7A190000            <1> dd (f13-$$)/512
 11030 00009D80 B0020000            <1> dd (f14-f13)/512
 11031 00009D84 736F6C6C65726F732E- <1> db "solleros.txt",0
 11032 00009D8D 74787400            <1>
 11033 00009D91 2A1C0000            <1> dd (f14-$$)/512
 11034 00009D95 01000000            <1> dd (f15-f14)/512
 11035 00009D99 736F6E676F74696D65- <1> db "songotime.sn",0
 11036 00009DA2 2E736E00            <1>
 11037 00009DA6 2B1C0000            <1> dd (f15-$$)/512
 11038 00009DAA 01000000            <1> dd (f16-f15)/512
 11039 00009DAE 73736500            <1> db "sse",0
 11040 00009DB2 2C1C0000            <1> dd (f16-$$)/512
 11041 00009DB6 02000000            <1> dd (f17-f16)/512
 11042 00009DBA 737464696F74657374- <1> db "stdiotest.elf",0
 11043 00009DC3 2E656C6600          <1>
 11044 00009DC8 2E1C0000            <1> dd (f17-$$)/512
 11045 00009DCC 27010000            <1> dd (f18-f17)/512
 11046 00009DD0 74656C7900          <1> db "tely",0
 11047 00009DD5 551D0000            <1> dd (f18-$$)/512
 11048 00009DD9 01000000            <1> dd (f19-f18)/512
 11049 00009DDD 74696D65746573742E- <1> db "timetest.elf",0
 11050 00009DE6 656C6600            <1>
 11051 00009DEA 561D0000            <1> dd (f19-$$)/512
 11052 00009DEE 04010000            <1> dd (f20-f19)/512
 11053 00009DF2 7475746F7269616C2E- <1> db "tutorial.sh",0
 11054 00009DFB 736800              <1>
 11055 00009DFE 5A1E0000            <1> dd (f20-$$)/512
 11056 00009E02 03000000            <1> dd (f21-f20)/512
 11057 00009E06 756E667300          <1> db "unfs",0
 11058 00009E0B 5D1E0000            <1> dd (f21-$$)/512
 11059 00009E0F 02000000            <1> dd (f22-f21)/512
 11060 00009E13 766963746F72792E77- <1> db "victory.wav",0
 11061 00009E1C 617600              <1>
 11062 00009E1F 5F1E0000            <1> dd (f22-$$)/512
 11063 00009E23 16000000            <1> dd (f23-f22)/512
 11064 00009E27 5F696D672E62696E00  <1> db "_img.bin",0
 11065 00009E30 751E0000            <1> dd (f23-$$)/512
 11066 00009E34 D7020000            <1> dd (f24-f23)/512
 11067                              <1> enddiskfileindex:
 11068                              <1> 
 11069                                      %include "source/bss.asm"
 11070                              <1> align 4, nop
 11071                              <1> bssstart: equ $
 11072                              <1> guion equ bssstart
 11073                              <1> DriveNumber equ guion + 1
 11074                              <1> lbaad equ DriveNumber + 1
 11075                              <1> memlistbuf equ lbaad + 4
 11076                              <1> memlistend equ memlistbuf + 576
 11077                              <1> bsscopy equ memlistend
 11078                              <1> initialstack equ bsscopy
 11079                              <1> stackend equ initialstack + 4000
 11080                              <1> fileindex: equ stackend + 96
 11081                              <1> fileindexend: equ fileindex + 1024
 11082                              <1> previousstack equ fileindexend
 11083                              <1> lastfolderloc equ previousstack + 4
 11084                              <1> currentfolderloc equ lastfolderloc + 4
 11085                              <1> currentfolder equ currentfolderloc + 4
 11086                              <1> currentfolderend equ currentfolder + 512
 11087                              <1> uid equ currentfolderend
 11088                              <1> ranboot equ uid + 4
 11089                              <1> IFON equ ranboot + 1
 11090                              <1> IFTRUE equ IFON + 1
 11091                              <1> BATCHPOS equ IFTRUE + 100
 11092                              <1> BATCHISON equ BATCHPOS + 4
 11093                              <1> LOOPON equ BATCHISON + 1
 11094                              <1> LOOPPOS	equ LOOPON + 1
 11095                              <1> variables: equ LOOPPOS + 4
 11096                              <1> varend: equ variables + 4096
 11097                              <1> buftxt2: equ varend
 11098                              <1> buftxt: equ buftxt2 + 1024
 11099                              <1> buftxtend: equ buftxt + 1024
 11100                              <1> buf2: equ buftxtend
 11101                              <1> numbuf: equ buf2 + 20
 11102                              <1> %ifdef io.serial
 11103                              <1> 	lastcommandpos equ numbuf + 1
 11104                              <1> %else
 11105                              <1> 	%ifdef gui.included
 11106                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 11107                              <1> 		graphicstableend equ graphicstable + 200h
 11108                              <1> 		%ifdef gui.background
 11109                              <1> 			backgroundbuffer equ graphicstableend
 11110                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 11111                              <1> 			mousecolorbuf equ backgroundbufferend
 11112                              <1> 		%else
 11113                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 11114                              <1> 		%endif
 11115                              <1> 		mcolorend equ mousecolorbuf + 256
 11116                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 11117                              <1> 		videobufend	equ videobuf + 210*65*2
 11118                              <1> 		videobuf2 equ videobufend
 11119                              <1> 		videobuf2end equ videobuf2 + 210*65*2
 11120                              <1> 	%else
 11121                              <1> 		videobuf equ numbuf + 1
 11122                              <1> 		videobufend equ videobuf + 80*30*2
 11123                              <1> 		videobuf2 equ videobufend
 11124                              <1> 		videobuf2end equ videobuf2 + 80*30*2
 11125                              <1> 	%endif
 11126                              <1> 	lastcommandpos: equ videobuf2end
 11127                              <1> %endif
 11128                              <1> 	commandbufpos: equ lastcommandpos + 4
 11129                              <1> 	commandlistentries: equ commandbufpos + 4
 11130                              <1> 	commandsentered: equ commandlistentries + 4
 11131                              <1> 	commandbuf: equ commandsentered + 4
 11132                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 11133                              <1> %ifdef network.included
 11134                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 11135                              <1> 	rbuffend equ rbuffstart + 8212
 11136                              <1> %else
 11137                              <1> 	rbuffstart equ commandbufend
 11138                              <1> 	rbuffend equ commandbufend
 11139                              <1> %endif
 11140                              <1> %ifdef threads.included
 11141                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 11142                              <1> 	threadlistend: equ threadlist + 1024*4
 11143                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
 11144                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
 11145                              <1> 	bssend equ stack1 + 1024*1024
 11146                              <1> %else
 11147                              <1> 	bssend equ rbuffend
 11148                              <1> %endif
 11149                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 11150                                      %include "build/files.asm"
 11151 00009E38 00<rept>            <1> align 512,db 0
 11152                              <1> f0:
 11153 00009E38 <incbin>            <1> incbin "included/argtest.elf"
 11154 0002AAF2 00<rept>            <1> align 512,db 0
 11155                              <1> f1:
 11156 0002AAF2 <incbin>            <1> incbin "included/background.bmp"
 11157 002AAC46 00<rept>            <1> align 512,db 0
 11158                              <1> f2:
 11159 002AAC46 <incbin>            <1> incbin "included/boot.sh"
 11160 002AAF05 00<rept>            <1> align 512,db 0
 11161                              <1> f3:
 11162 002AAF05 <incbin>            <1> incbin "included/chartest.elf"
 11163 002CFADB 00<rept>            <1> align 512,db 0
 11164                              <1> f4:
 11165 002CFADB <incbin>            <1> incbin "included/dostest.com"
 11166 002CFD31 00<rept>            <1> align 512,db 0
 11167                              <1> f5:
 11168 002CFD31 <incbin>            <1> incbin "included/exec"
 11169 002CFEE9 00<rept>            <1> align 512,db 0
 11170                              <1> f6:
 11171 002CFEE9 <incbin>            <1> incbin "included/finalcount.sn"
 11172 002D0102 00<rept>            <1> align 512,db 0
 11173                              <1> f7:
 11174 002D0102 <incbin>            <1> incbin "included/fork"
 11175 002D0362 00<rept>            <1> align 512,db 0
 11176                              <1> f8:
 11177 002D0362 <incbin>            <1> incbin "included/helloworld.elf"
 11178 0030AFE3 00<rept>            <1> align 512,db 0
 11179                              <1> f9:
 11180 0030AFE3 <incbin>            <1> incbin "included/int"
 11181 0030B1B3 00<rept>            <1> align 512,db 0
 11182                              <1> f10:
 11183 0030B1B3 <incbin>            <1> incbin "included/lostwoods.sn"
 11184 0030B256 00<rept>            <1> align 512,db 0
 11185                              <1> f11:
 11186 0030B256 <incbin>            <1> incbin "included/mario.sn"
 11187 0030B43A 00<rept>            <1> align 512,db 0
 11188                              <1> f12:
 11189 0030B43A <incbin>            <1> incbin "included/pi.elf"
 11190 0032F331 00<rept>            <1> align 512,db 0
 11191                              <1> f13:
 11192 0032F331 <incbin>            <1> incbin "included/solleros.bmp"
 11193 003853E6 00<rept>            <1> align 512,db 0
 11194                              <1> f14:
 11195 003853E6 <incbin>            <1> incbin "included/solleros.txt"
 11196 00385574 00<rept>            <1> align 512,db 0
 11197                              <1> f15:
 11198 00385574 <incbin>            <1> incbin "included/songotime.sn"
 11199 0038564A 00<rept>            <1> align 512,db 0
 11200                              <1> f16:
 11201 0038564A <incbin>            <1> incbin "included/sse"
 11202 00385AA8 00<rept>            <1> align 512,db 0
 11203                              <1> f17:
 11204 00385AA8 <incbin>            <1> incbin "included/stdiotest.elf"
 11205 003AA843 00<rept>            <1> align 512,db 0
 11206                              <1> f18:
 11207 003AA843 <incbin>            <1> incbin "included/tely"
 11208 003AABC7 00<rept>            <1> align 512,db 0
 11209                              <1> f19:
 11210 003AABC7 <incbin>            <1> incbin "included/timetest.elf"
 11211 003CB23D 00<rept>            <1> align 512,db 0
 11212                              <1> f20:
 11213 003CB23D <incbin>            <1> incbin "included/tutorial.sh"
 11214 003CB952 00<rept>            <1> align 512,db 0
 11215                              <1> f21:
 11216 003CB952 <incbin>            <1> incbin "included/unfs"
 11217                              <1> align 512,db 0
 11218                              <1> f22:
 11219 003CB952 <incbin>            <1> incbin "included/victory.wav"
 11220 003CE948 00<rept>            <1> align 512,db 0
 11221                              <1> f23:
 11222 003CE948 <incbin>            <1> incbin "included/_img.bin"
 11223                              <1> align 512,db 0
 11224                              <1> f24:
