     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> %define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> %define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> %define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define font.unicode
    29                              <1> ;Include a unicode font. Disable to use an ascii font
    30                              <1> 	
    31                              <1> %define hardware.automatic
    32                              <1> ;Automatically load the sound and network drivers.
    33                              <1> 
    34                              <1> %define threads.included
    35                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    36                              <1> 
    37                              <1> %define exceptions.included
    38                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    39                              <1> 
    40                              <1> ;%define disk.protected
    41                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    42                              <1> 
    43                              <1> %define disk.real
    44                              <1> ;Use real mode for disk access-this gives greater compatibility
    45                              <1> 
    46                              <1> %define sound.included
    47                              <1> ;This includes the sound drivers
    48                              <1> 
    49                              <1> ;%define network.included
    50                              <1> ;This includes the network stack
    51                              <1> 
    52                              <1> ;%define rtl8169.included
    53                              <1> ;This includes the RTL8169 drivers
    54                              <1> 
    55                              <1> ;%define rtl8139.included
    56                              <1> ;This includes the RTL8139 drivers
    57                              <1> 
    58                              <1> ;%define ne2000.included
    59                              <1> ;This includes the ne2000 drivers
    60                              <1> 
    61                              <1> ;%define i8254x.included
    62                              <1> ;This includes the Intel 8254x drivers
    63                              <1> 
    64                              <1> %define sector.debug
    65                              <1> ;Dump the contents of the first sector of SollerOS
    66                              <1> 
    67                              <1> ;%define dos.compatible
    68                              <1> ;Make the kernel loadable by dos.
    69                              <1> 
    70                              <1> ;%define system.simple
    71                              <1> ;The smallest possible system, overrides all options
    72                              <1> 
    73                              <1> ;FIX DEPENDANCIES
    74                              <1> %ifdef system.simple
    75                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef dos.compatible
    79                              <1> 	%define UNDEFALL
    80                              <1> %endif
    81                              <1> %ifdef UNDEFALL
    82                              <1> 	%undef io.serial
    83                              <1> 	%undef disk.real
    84                              <1> 	%undef gui.included
    85                              <1> 	%undef gui.alphablending
    86                              <1> 	%undef gui.background
    87                              <1> 	%undef terminal.vsync
    88                              <1> 	%undef font.unicode
    89                              <1> 	%undef hardware.automatic
    90                              <1> 	%undef threads.included
    91                              <1> 	%undef exceptions.included
    92                              <1> 	%undef disk.protected
    93                              <1> 	%undef sound.included
    94                              <1> 	%undef network.included
    95                              <1> 	%undef rtl8139.included
    96                              <1> 	%undef rtl8169.included
    97                              <1> 	%undef ne2000.included
    98                              <1> 	%undef i8254x.included
    99                              <1> 	%undef UNDEFALL
   100                              <1> %endif
   101                              <1> %ifdef system.simple
   102                              <1> 	%define io.serial "1"
   103                              <1> 	%define disk.real
   104                              <1> %endif
   105                              <1> %ifdef gui.included
   106                              <1> 	%undef io.serial
   107                              <1> %else
   108                              <1> 	%undef gui.alphablending
   109                              <1> 	%undef gui.background
   110                              <1> %endif
   111                              <1> %ifdef network.included
   112                              <1> %else
   113                              <1> 	%undef i8254x.included
   114                              <1> 	%undef ne2000.included
   115                              <1> 	%undef rtl8139.included
   116                              <1> 	%undef rtl8169.included
   117                              <1> %endif
   118                              <1> %ifdef disk.protected
   119                              <1> 	%undef disk.real
   120                              <1> %else
   121                              <1> 	%ifdef disk.real
   122                              <1> 	%else
   123                              <1> 		%define disk.none
   124                              <1> 	%endif
   125                              <1> %endif
   126                                  %ifdef dos.compatible
   127                                  	[ORG 0x100]
   128                                  %endif
   129                                  	%include "source/signature.asm"
   130                              <1> header:
   131 00000000 EB17                <1> 	jmp short boot
   132                              <1> signature:
   133 00000002 A76F6C6C65724F5320- <1> db 0xA7,"ollerOS Beta ",0 ;Operating system name
   134 0000000B 426574612000        <1>
   135 00000011 22010000            <1> dd 290	;version number
   136                              <1> signatureend:
   137 00000015 008A0300                	dd bsscopy - header ;size of kernel data on disk
   138                                  [BITS 16]
   139                                  %include "source/boot.asm"
   140                              <1> boot:
   141 00000019 8CC8                <1> 	mov ax, cs
   142 0000001B 8ED8                <1> 	mov ds, ax
   143 0000001D 8EC0                <1> 	mov es, ax
   144 0000001F 8ED0                <1> 	mov ss, ax
   145 00000021 0F31                <1> 	rdtsc
   146 00000023 66A3[1585]          <1> 	mov [initialtsc], eax
   147 00000027 668916[1985]        <1> 	mov [initialtsc + 4], edx
   148 0000002C 66A3[1D85]          <1> 	mov [lasttsc], eax
   149 00000030 668916[2185]        <1> 	mov [lasttsc + 4], edx
   150 00000035 880E[1085]          <1> 	mov [DriveNumber], cl
   151 00000039 66891E[1185]        <1> 	mov [lbaad], ebx
   152                              <1> %ifdef io.serial
   153                              <1> 	call getmemorysize
   154                              <1> 	mov si, serialmsg
   155                              <1> 	call printrm
   156                              <1> 	jmp pmode
   157                              <1> serialmsg: db 10,13,"SollerOS: Using serial port ",io.serial," for I/O.",0
   158                              <1> %else
   159 0000003E E80500              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   160 00000041 E80F00              <1> 	call getmemorysize	;get the memory map after the video is initialized
   161 00000044 EB4F                <1> 	jmp pmode
   162                              <1> %endif
   163                              <1> 	
   164                              <1> vgaset:
   165 00000046 B81200              <1> 	mov ax, 12h
   166 00000049 31DB                <1> 	xor bx, bx
   167 0000004B CD10                <1> 	int 10h
   168 0000004D C606[0F85]00        <1> 	mov byte [guion], 0
   169 00000052 C3                  <1> 	ret
   170                              <1> 
   171                              <1> getmemorysize:
   172 00000053 BF[2585]            <1> 	mov di, memlistbuf
   173 00000056 6631DB              <1> 	xor ebx, ebx
   174                              <1> .lp:
   175 00000059 66B820E80000        <1> 	mov eax, 0xE820
   176 0000005F 66BA50414D53        <1> 	mov edx, 0x0534D4150
   177 00000065 66B918000000        <1> 	mov ecx, 24
   178 0000006B CD15                <1> 	int 0x15
   179 0000006D 83C718              <1> 	add di, 24
   180 00000070 81FF[6587]          <1> 	cmp di, memlistend
   181 00000074 7305                <1> 	jae .done
   182 00000076 6685DB              <1> 	test ebx, ebx
   183 00000079 75DE                <1> 	jnz .lp
   184                              <1> .done:
   185 0000007B 81EF[2585]          <1> 	sub di, memlistbuf
   186 0000007F 893E[6587]          <1> 	mov [memlistend], di
   187 00000083 C3                  <1> 	ret
   188                              <1> 	
   189                              <1> printrm:			; 'si' comes in with string address
   190 00000084 BB0700              <1>     mov bx,07		; write to display
   191 00000087 B40E                <1>     mov ah,0Eh		; screen function
   192 00000089 8A04                <1>    .lp:    mov al,[si]         ; get next character
   193 0000008B 84C0                <1>     test al,al		; look for terminator 
   194 0000008D 7405                <1>     jz .done	; zero byte at end of string
   195 0000008F CD10                <1>     int 10h		; write character to screen.    
   196 00000091 46                  <1> 	inc si	     	; move to next character
   197 00000092 EBF5                <1>     jmp .lp		; loop
   198 00000094 C3                  <1> .done: ret
   199                                  %include "source/pmode.asm"
   200                              <1> [BITS 16]
   201                              <1> 
   202                              <1> pmode:
   203 00000095 6631C0              <1> 	xor eax, eax
   204 00000098 6631DB              <1> 	xor ebx, ebx
   205 0000009B 6631C9              <1> 	xor ecx, ecx
   206 0000009E 6631D2              <1> 	xor edx, edx
   207 000000A1 6631F6              <1> 	xor esi, esi
   208 000000A4 6631FF              <1> 	xor edi, edi
   209 000000A7 BA9200              <1> 	mov dx, 0x92
   210 000000AA EC                  <1> 	in al, dx	;A20
   211 000000AB 0C02                <1> 	or al, 2
   212 000000AD EE                  <1> 	out dx, al
   213 000000AE 8CCB                <1> 	mov bx,cs		; EBX=segment
   214 000000B0 66C1E304            <1> 	shl ebx,4		;	<< 4
   215 000000B4 6689D8              <1> 	mov eax, ebx		; EAX=linear address of segment base
   216 000000B7 A3[8D03]            <1> 	mov [gdt2 + 2],ax
   217 000000BA A3[9503]            <1> 	mov [gdt3 + 2],ax
   218 000000BD 66C1E810            <1> 	shr eax,16
   219 000000C1 A2[8F03]            <1> 	mov [gdt2 + 4],al
   220 000000C4 A2[9703]            <1> 	mov [gdt3 + 4],al
   221 000000C7 8826[9203]          <1> 	mov [gdt2 + 7],ah
   222 000000CB 8826[9A03]          <1> 	mov [gdt3 + 7],ah
   223                              <1> 
   224 000000CF 66B8[008A0300]      <1> 	mov eax, initialstack
   225 000000D5 660306[3C02]        <1> 	add eax, [newcodecache]
   226 000000DA A3[8503]            <1> 	mov [gdts + 2],ax
   227 000000DD 66C1E810            <1> 	shr eax, 16
   228 000000E1 A2[8703]            <1> 	mov [gdts + 4],al
   229 000000E4 8826[8A03]          <1> 	mov [gdts + 7], ah
   230                              <1> 	
   231 000000E8 66A1[3C02]          <1> 	mov eax, [newcodecache]
   232 000000EC A3[9D03]            <1> 	mov [gdt4 + 2],ax
   233 000000EF A3[A503]            <1> 	mov [gdt5 + 2],ax
   234 000000F2 A3[AD03]            <1> 	mov [gdtv8086 + 2], ax
   235 000000F5 A3[B503]            <1> 	mov [gdtv80862 + 2], ax
   236 000000F8 66C1E810            <1> 	shr eax,16
   237 000000FC A2[9F03]            <1> 	mov [gdt4 + 4],al
   238 000000FF A2[A703]            <1> 	mov [gdt5 + 4],al
   239 00000102 A2[AF03]            <1> 	mov [gdtv8086 + 4],al
   240 00000105 A2[B703]            <1> 	mov [gdtv80862 + 4],al
   241 00000108 8826[A203]          <1> 	mov [gdt4 + 7],ah
   242 0000010C 8826[AA03]          <1> 	mov [gdt5 + 7],ah
   243 00000110 8826[B203]          <1> 	mov [gdtv8086 + 7],ah
   244 00000114 8826[BA03]          <1> 	mov [gdtv80862 + 7],ah
   245                              <1> 	
   246 00000118 66B800004000        <1> 	mov eax, dosprogloc
   247 0000011E 660306[3C02]        <1> 	add eax, [newcodecache]
   248 00000123 A3[BD03]            <1> 	mov [gdtdos + 2],ax
   249 00000126 A3[C503]            <1> 	mov [gdtdos2 + 2],ax
   250 00000129 66C1E810            <1> 	shr eax,16
   251 0000012D A2[BF03]            <1> 	mov [gdtdos + 4],al
   252 00000130 A2[C703]            <1> 	mov [gdtdos2 + 4],al
   253 00000133 8826[C203]          <1> 	mov [gdtdos + 7],ah
   254 00000137 8826[CA03]          <1> 	mov [gdtdos2 + 7],ah
   255                              <1> 	
   256                              <1> ; fix up gdt and idt
   257 0000013B 66678D83[73030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   258 00000143 66A3[6903]          <1> 	mov [gdtr + 2],eax
   259 00000147 66678D83[CB030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   260 0000014F 66A3[6F03]          <1> 	mov [idtr + 2],eax
   261 00000153 FA                  <1> 	cli
   262 00000154 0F0116[6703]        <1> 	lgdt [gdtr]
   263 00000159 0F011E[6D03]        <1> 	lidt [idtr]
   264 0000015E 6631DB              <1> 	xor ebx, ebx
   265 00000161 8CDB                <1> 	mov bx, ds
   266 00000163 66891E[3802]        <1> 	mov [basecache], ebx
   267 00000168 0F20C0              <1> 	mov eax,cr0
   268 0000016B 0C01                <1> 	or al,1
   269 0000016D 0F22C0              <1> 	mov cr0,eax
   270 00000170 EA[7501]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   271                              <1> [BITS 32]
   272                              <1> do_pm:
   273 00000175 31C0                <1> 	xor eax, eax
   274 00000177 66B82000            <1> 	mov ax, SYS_DATA_SEL
   275 0000017B 8ED8                <1> 	mov ds, ax
   276 0000017D 8EC0                <1> 	mov es, ax
   277 0000017F 8EE0                <1> 	mov fs, ax
   278 00000181 66B83000            <1> 	mov ax, NEW_DATA_SEL
   279 00000185 8EE8                <1> 	mov gs, ax
   280                              <1> 	
   281                              <1> copykernel:
   282 00000187 648B06              <1> 	mov eax, [fs:esi]
   283 0000018A 658906              <1> 	mov [gs:esi], eax
   284 0000018D 83C604              <1> 	add esi, 4
   285 00000190 81FE[008A0300]      <1> 	cmp esi, bsscopy
   286 00000196 72EF                <1> 	jb copykernel
   287 00000198 EA[9F010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   288                              <1> 	
   289                              <1> done_copy:
   290 0000019F 66B83000            <1> 	mov ax, NEW_DATA_SEL	;these MUST be setup AFTER the kernel switches places!!!
   291 000001A3 8ED8                <1> 	mov ds, ax
   292 000001A5 8EC0                <1> 	mov es, ax
   293 000001A7 8EE0                <1> 	mov fs, ax
   294                              <1> 	;mov ax, STACK_SEL
   295 000001A9 8ED0                <1> 	mov ss, ax
   296 000001AB BC[00AA0300]        <1> 	mov esp, stackend
   297 000001B0 66B82000            <1> 	mov ax, SYS_DATA_SEL
   298 000001B4 8EE8                <1> 	mov gs, ax
   299                              <1> 	
   300 000001B6 E8A85F0000          <1> 	call initialize	;initialize drivers
   301                              <1> 	
   302 000001BB A1[3C020000]        <1> 	mov eax, [newcodecache]
   303 000001C0 C1E804              <1> 	shr eax, 4
   304 000001C3 A3[38020000]        <1> 	mov [basecache], eax
   305                              <1> 	
   306 000001C8 BE[3CB24D00]        <1> 	mov esi, bssend
   307 000001CD 31C0                <1> 	xor eax, eax
   308                              <1> clearkernelbuffers:
   309 000001CF 8906                <1> 	mov [esi], eax
   310 000001D1 83EE04              <1> 	sub esi, 4
   311 000001D4 81FE[008A0300]      <1> 	cmp esi, bsscopy
   312 000001DA 77F3                <1> 	ja clearkernelbuffers
   313 000001DC FB                  <1> 	sti
   314                              <1> 
   315                              <1> getmemoryspace:
   316 000001DD BE[25850000]        <1> 	mov esi, memlistbuf
   317 000001E2 31FF                <1> 	xor edi, edi
   318 000001E4 668B3D[65870000]    <1> 	mov di, [memlistend]
   319 000001EB 01F7                <1> 	add edi, esi
   320 000001ED 31C0                <1> 	xor eax, eax
   321                              <1> memoryspaceaddition:
   322 000001EF 39FE                <1> 	cmp esi, edi
   323 000001F1 7316                <1> 	jae finishedmemspacecalc
   324 000001F3 83C608              <1> 	add esi, 8
   325 000001F6 8B0E                <1> 	mov ecx, [esi]
   326 000001F8 83C608              <1> 	add esi, 8
   327 000001FB 8B1E                <1> 	mov ebx, [esi]
   328 000001FD 83C608              <1> 	add esi, 8
   329 00000200 83FB01              <1> 	cmp ebx, 1
   330 00000203 75EA                <1> 	jne memoryspaceaddition
   331 00000205 01C8                <1> 	add eax, ecx
   332 00000207 EBE6                <1> 	jmp memoryspaceaddition
   333                              <1> finishedmemspacecalc:
   334 00000209 A3[4D020000]        <1> 	mov [memoryspace], eax
   335                              <1> %ifdef gui.included
   336 0000020E 803D[0F850000]00    <1> 	cmp byte [guion], 0
   337 00000215 741C                <1> 	je normalstartup
   338 00000217 8B1D[38020000]      <1> 	mov ebx, [basecache]
   339 0000021D C1E304              <1> 	shl ebx, 4
   340 00000220 8B3D[42550000]      <1> 	mov edi, [physbaseptr]
   341 00000226 29DF                <1> 	sub edi, ebx
   342 00000228 893D[42550000]      <1> 	mov [physbaseptr], edi
   343 0000022E E90E650000          <1> 	jmp guiboot
   344                              <1> %endif
   345                              <1> normalstartup:
   346 00000233 E98E280000          <1> 	jmp os
   347                              <1> 	
   348 00000238 00000000            <1> basecache dd 0
   349 0000023C 00001000            <1> newcodecache dd 0x100000
   350                              <1> 
   351 00000240 00                  <1> testingcpuspeed db 0
   352 00000241 00000000            <1> cpuspeedperint dd 0
   353 00000245 0000000000000000    <1> cpuclocksperint dd 0,0
   354 0000024D 00000000            <1> memoryspace dd 0
   355 00000251 7D0A                <1> pitdiv dw 2685
   356 00000253 2E562200            <1> timeinterval dd 2250286
   357                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   358                              <1> ;for the pit, note that div=1 gives 838.09ns, the clock runs at 1.193182 MHz
   359                              <1> ;div=451 is 377981.0004, div=902 is 755962.0008,
   360                              <1> ;div=2685 is 2250286.00004ns, div=5370 is 4500572.00007ns
   361                              <1> ;div=55483 is 46500044.000006ns
   362                              <1> ;use one of those values for the minimum error
   363                              <1> 
   364 00000257 00000000            <1> timeseconds dd 0
   365 0000025B 00000000            <1> timenanoseconds dd 0
   366 0000025F 00                  <1> soundon db 0
   367 00000260 0000                <1> soundrepititions dw 0
   368 00000262 00000000            <1> soundpos dd 0
   369 00000266 00000000            <1> soundendpos dd 0
   370                              <1> 
   371                              <1> cpuspeedend:
   372 0000026A C605[40020000]00    <1> 	mov byte [testingcpuspeed], 0
   373 00000271 A3[41020000]        <1> 	mov [cpuspeedperint], eax
   374 00000276 B8[CA4E0000]        <1> 	mov eax, cpuspeedloopend
   375 0000027B 890424              <1> 	mov [esp], eax
   376 0000027E E9D4000000          <1> 	jmp handled
   377                              <1> 
   378                              <1> pitinterrupt: ;this controls threading
   379 00000283 803D[40020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   380 0000028A 74DE                <1> 	je cpuspeedend
   381                              <1> 
   382 0000028C E8A0000000          <1> 	call timekeeper ;this updates the internal time
   383                              <1> 	
   384 00000291 803D[5F020000]01    <1> 	cmp byte [soundon], 1
   385 00000298 0F847C560000        <1> 	je near PCSpeakerRAW
   386                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   387                              <1> %ifdef threads.included
   388 0000029E 803D[3C670000]01    <1> 	cmp byte [threadson], 1
   389 000002A5 0F843A640000        <1> 	je near threadswitch
   390                              <1> %endif
   391                              <1> 
   392                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   393 000002AB E9A7000000          <1> 	jmp handled
   394 000002B0 803D[3C670000]00    <1> 	cmp byte [threadson], 0
   395 000002B7 0F849A000000        <1> 	je near handled
   396                              <1> %ifdef io.serial
   397                              <1> 	jmp handled
   398                              <1> %else
   399 000002BD 50                  <1> 	push eax
   400 000002BE E464                <1> 	in al, 0x64
   401 000002C0 A820                <1> 	test al, 0x20
   402 000002C2 0F8590000000        <1> 	jnz near handledeax
   403 000002C8 E460                <1> 	in al, 0x60
   404 000002CA 3C01                <1> 	cmp al, 1		;escape
   405 000002CC 7406                <1> 	je userint
   406 000002CE 58                  <1> 	pop eax
   407 000002CF E983000000          <1> 	jmp handled
   408                              <1> userint:
   409 000002D4 31C0                <1> 	xor eax, eax
   410 000002D6 3905[04AA0300]      <1> 	cmp [sigtable], eax
   411 000002DC 7408                <1> 	je .nosighook
   412 000002DE FF15[04AA0300]      <1> 	call [sigtable]
   413 000002E4 EB72                <1> 	jmp handledeax
   414                              <1> .nosighook:
   415                              <1> 		;UNMASK ALL INTS
   416 000002E6 E621                <1> 	out 0x21, al
   417 000002E8 E6A1                <1> 	out 0xA1, al
   418 000002EA B020                <1> 	mov al, 0x20
   419 000002EC E6A0                <1> 	out 0xA0, al
   420 000002EE E620                <1> 	out 0x20, al
   421                              <1> 		;RESET PIT DIVISOR
   422 000002F0 66A1[51020000]      <1> 	mov ax, [pitdiv]
   423 000002F6 E640                <1> 	out 0x40, al
   424 000002F8 66C1C008            <1> 	rol ax, 8
   425 000002FC E640                <1> 	out 0x40, al
   426                              <1> 		;RESET PIC
   427 000002FE B020                <1> 	mov al, 0x20
   428 00000300 E620                <1> 	out 0x20, al
   429 00000302 58                  <1> 	pop eax
   430 00000303 E9E1090000          <1> 	jmp unhand + 12
   431                              <1> 	;pop ebp
   432                              <1> 	;pop ebp
   433                              <1> 	;popf
   434                              <1> 	;mov esp, stackend ;reset stack
   435                              <1> 	;jmp returnfromexp
   436                              <1> %endif
   437 00000308 0A                  <1> rtcrate db 10
   438                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   439                              <1> %ifdef io.serial
   440                              <1> %else
   441                              <1> %ifdef terminal.vsync
   442 00000309 803D[5C280000]00    <1> 	cmp byte [termcopyneeded], 0
   443 00000310 7405                <1> 	je .nocopy
   444 00000312 E84E250000          <1> 	call newtermcopy
   445                              <1> .nocopy:
   446 00000317 50                  <1> 	push eax
   447 00000318 B00C                <1> 	mov al, 0xC
   448 0000031A E670                <1> 	out 0x70, al
   449 0000031C E471                <1> 	in al, 0x71
   450 0000031E 58                  <1> 	pop eax
   451                              <1> %endif
   452                              <1> %endif
   453 0000031F EB3D                <1> 	jmp handledboth
   454                              <1> %ifdef rtl8139.included
   455                              <1> nextpacket dd rbuffstart
   456                              <1> rtl8139.irq:
   457                              <1> 	pusha
   458                              <1> 	mov dx, [rtl8139.basenicaddr]
   459                              <1> 	add dx, rtl8139.ISR
   460                              <1> 	xor eax, eax
   461                              <1> 	in ax, dx
   462                              <1> 	out dx, ax
   463                              <1> 	test ax, 1
   464                              <1> 	jz  near .norec
   465                              <1> 	mov esi, packetrecvmsg
   466                              <1> 	call print
   467                              <1> 	mov esi, [nextpacket]
   468                              <1> 	cmp esi, rbuffend
   469                              <1> 	jb .goodesi
   470                              <1> 	mov esi, rbuffstart
   471                              <1> .goodesi:
   472                              <1> 	mov ecx, esi
   473                              <1> 	sub ecx, rbuffstart
   474                              <1> 	call showhex
   475                              <1> 	mov ecx, [esi]
   476                              <1> 	test ecx, 1
   477                              <1> 	jz .notgood
   478                              <1> 	call showhex
   479                              <1> 	add esi, 4
   480                              <1> 	xor edi, edi
   481                              <1> 	mov di, [esi - 2]
   482                              <1> 	mov ecx, edi
   483                              <1> 	add edi, esi
   484                              <1> 	sub ecx, 4
   485                              <1> 	call showdec
   486                              <1> 
   487                              <1> 	mov ecx, edi
   488                              <1> 	sub ecx, rbuffstart
   489                              <1> 	add ecx, 3
   490                              <1> 	shr ecx, 2
   491                              <1> 	shl ecx, 2
   492                              <1> 	call showhex
   493                              <1> .notgood:	
   494                              <1> 	mov  dx, [rtl8139.basenicaddr]
   495                              <1> 	add dx, rtl8139.CBR
   496                              <1> 	xor eax, eax
   497                              <1> 	in ax, dx
   498                              <1> 	mov ecx, eax
   499                              <1> 	call showhex
   500                              <1> 	
   501                              <1> 	mov dx, [rtl8139.basenicaddr]
   502                              <1> 	add dx, rtl8139.CAPR
   503                              <1> 	out dx, ax
   504                              <1> 	
   505                              <1> 	add eax, rbuffstart
   506                              <1> 	mov [nextpacket], eax
   507                              <1> 	
   508                              <1> ;	int3
   509                              <1> ;.lp:
   510                              <1> ;	mov cl, [esi]
   511                              <1> ;	call showhexsmall
   512                              <1> ;	inc esi
   513                              <1> ;	cmp esi, [nextpacket]
   514                              <1> ;	jb .lp
   515                              <1> ;	mov ecx, [esi]
   516                              <1> ;	call showhex
   517                              <1> ;	call printline
   518                              <1> .norec:
   519                              <1> 	popa
   520                              <1> 	jmp handledboth
   521                              <1> packetrecvmsg db 10,"Packet: ",0
   522                              <1> %endif
   523                              <1> %ifdef sound.included
   524                              <1> sblaster.irq:
   525 00000321 60                  <1> 	pusha
   526 00000322 803D[F55B0000]01    <1> 	cmp byte [SoundBlaster], 1
   527 00000329 0F84CC560000        <1> 	je near sblaster.cont
   528 0000032F EB25                <1> 	jmp handled2
   529                              <1> %endif
   530                              <1> 	
   531                              <1> timekeeper:
   532 00000331 50                  <1> 	push eax
   533 00000332 A1[5B020000]        <1> 	mov eax, [timenanoseconds]
   534 00000337 0305[53020000]      <1> 	add eax, [timeinterval]
   535 0000033D 3D00CA9A3B          <1> 	cmp eax, 1000000000
   536 00000342 720B                <1> 	jb nonanosecondrollover
   537 00000344 FF05[57020000]      <1> 	inc dword [timeseconds]
   538 0000034A 2D00CA9A3B          <1> 	sub eax, 1000000000
   539                              <1> 	%ifdef gui.time
   540                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   541                              <1> 		cmp byte [guion], 1
   542                              <1> 		jne nonanosecondrollover
   543                              <1> 		cmp dword [dragging], 0
   544                              <1> 		jne nonanosecondrollover
   545                              <1> 		pusha
   546                              <1> 		call guitime
   547                              <1> 		popa
   548                              <1> 	%endif
   549                              <1> nonanosecondrollover:
   550 0000034F A3[5B020000]        <1> 	mov [timenanoseconds], eax
   551 00000354 58                  <1> 	pop eax
   552 00000355 C3                  <1> 	ret
   553                              <1> 	
   554                              <1> handled2:
   555 00000356 61                  <1> 	popa
   556                              <1> handled:
   557 00000357 50                  <1> 	push eax
   558                              <1> handledeax:
   559 00000358 B020                <1> 	mov al, 0x20
   560 0000035A E620                <1> 	out 0x20, al
   561 0000035C 58                  <1> 	pop eax
   562 0000035D CF                  <1> 	iret
   563                              <1> handledboth:
   564 0000035E 50                  <1> 	push eax
   565 0000035F B020                <1> 	mov al, 0x20
   566 00000361 E6A0                <1> 	out 0xA0, al
   567 00000363 E620                <1> 	out 0x20, al
   568 00000365 58                  <1> 	pop eax
   569 00000366 CF                  <1> 	iret
   570                              <1> 
   571                              <1> 	
   572                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   573 00000367 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   574 00000369 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   575                              <1> 
   576 0000036D FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   577 0000036F 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   578                              <1> 
   579                              <1> 
   580 00000373 0000                <1> gdt:	dw 0			; limit 15:0
   581 00000375 0000                <1> 	dw 0			; base 15:0
   582 00000377 00                  <1> 	db 0			; base 23:16
   583 00000378 00                  <1> 	db 0			; type
   584 00000379 00                  <1> 	db 0			; limit 19:16, flags
   585 0000037A 00                  <1> 	db 0			; base 31:24
   586                              <1> ; linear data segment descriptor
   587                              <1> LINEAR_SEL	equ	$-gdt
   588 0000037B FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   589 0000037D 0000                <1> 	dw 0			; base for this one is always 0
   590 0000037F 00                  <1> 	db 0
   591 00000380 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   592 00000381 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   593 00000382 00                  <1> 	db 0
   594                              <1> STACK_SEL	equ $-gdt
   595 00000383 0200                <1> gdts:	dw 2;(stackend)/4096
   596 00000385 0000                <1> 	dw 0
   597 00000387 00                  <1> 	db 0
   598 00000388 92                  <1> 	db 0x92
   599 00000389 CF                  <1> 	db 0xCF
   600 0000038A 00                  <1> 	db 0
   601                              <1> ; code segment descriptor
   602                              <1> SYS_CODE_SEL	equ	$-gdt
   603 0000038B FFFF                <1> gdt2:	dw 0xFFFF
   604 0000038D 0000                <1> 	dw 0			; (base gets set above)
   605 0000038F 00                  <1> 	db 0
   606 00000390 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   607 00000391 CF                  <1> 	db 0xCF
   608 00000392 00                  <1> 	db 0
   609                              <1> ; data segment descriptor
   610                              <1> SYS_DATA_SEL	equ	$-gdt
   611 00000393 FFFF                <1> gdt3:	dw 0xFFFF
   612 00000395 0000                <1> 	dw 0			; (base gets set above)
   613 00000397 00                  <1> 	db 0
   614 00000398 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   615 00000399 CF                  <1> 	db 0xCF
   616 0000039A 00                  <1> 	db 0
   617                              <1> NEW_CODE_SEL	equ	$-gdt
   618 0000039B FFFF                <1> gdt4:	dw 0xFFFF
   619 0000039D 0000                <1> 	dw 0			; (base gets set above)
   620 0000039F 00                  <1> 	db 0
   621 000003A0 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   622 000003A1 CF                  <1> 	db 0xCF
   623 000003A2 00                  <1> 	db 0
   624                              <1> ; data segment descriptor
   625                              <1> NEW_DATA_SEL	equ	$-gdt
   626 000003A3 FFFF                <1> gdt5:	dw 0xFFFF
   627 000003A5 0000                <1> 	dw 0			; (base gets set above)
   628 000003A7 00                  <1> 	db 0
   629 000003A8 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   630 000003A9 CF                  <1> 	db 0xCF
   631 000003AA 00                  <1> 	db 0
   632                              <1> V8086_CODE_SEL	equ $-gdt
   633 000003AB FFFF                <1> gdtv8086: dw 0xFFFF
   634 000003AD 0000                <1> 	dw 0
   635 000003AF 00                  <1> 	db 0
   636 000003B0 9A                  <1> 	db 0x9A
   637 000003B1 8F                  <1> 	db 0x8F
   638 000003B2 00                  <1> 	db 0
   639                              <1> V8086_DATA_SEL	equ $-gdt
   640 000003B3 FFFF                <1> gdtv80862: dw 0xFFFF
   641 000003B5 0000                <1> 	dw 0
   642 000003B7 00                  <1> 	db 0
   643 000003B8 92                  <1> 	db 0x92
   644 000003B9 8F                  <1> 	db 0x8F
   645 000003BA 00                  <1> 	db 0
   646                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   647 000003BB 0001                <1> gdtdos:	dw 256	;give it 1 MB
   648 000003BD 0000                <1> 	dw 0
   649 000003BF 00                  <1> 	db 0
   650 000003C0 9A                  <1> 	db 0x9A
   651 000003C1 8F                  <1> 	db 0x8F ;16 bit
   652 000003C2 00                  <1> 	db 0
   653                              <1> DOS_DATA_SEL 	equ $-gdt
   654 000003C3 0001                <1> gdtdos2:	dw 256
   655 000003C5 0000                <1> 	dw 0
   656 000003C7 00                  <1> 	db 0
   657 000003C8 92                  <1> 	db 0x92
   658 000003C9 8F                  <1> 	db 0x8F ;16 bit
   659 000003CA 00                  <1> 	db 0
   660                              <1> gdt_end:
   661                              <1> 
   662                              <1> ;	interrupt descriptor table (IDT)
   663                              <1> ; 32 reserved interrupts:
   664                              <1> idt:	
   665                              <1> %assign i 0
   666                              <1> %rep    8
   667                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   668                              <1> %assign i i+1
   669                              <1> %endrep
   670 000003CB [DD0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i i+1
   672 000003D3 [E90C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i i+1
   674 000003DB [F50C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i i+1
   676 000003E3 [010D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i i+1
   678 000003EB [0D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i i+1
   680 000003F3 [190D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i i+1
   682 000003FB [250D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i i+1
   684 00000403 [310D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i i+1
   686 0000040B [3D0D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   687                              <1> %assign i 9
   688                              <1> %rep    23
   689                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   690                              <1> %assign i i+1
   691                              <1> %endrep
   692 00000413 [490D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i i+1
   694 0000041B [550D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i i+1
   696 00000423 [610D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i i+1
   698 0000042B [6D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i i+1
   700 00000433 [790D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i i+1
   702 0000043B [850D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i i+1
   704 00000443 [910D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   705                              <2> %assign i i+1
   706 0000044B [9D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   707                              <2> %assign i i+1
   708 00000453 [A90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   709                              <2> %assign i i+1
   710 0000045B [B50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   711                              <2> %assign i i+1
   712 00000463 [C10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   713                              <2> %assign i i+1
   714 0000046B [CD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   715                              <2> %assign i i+1
   716 00000473 [D90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   717                              <2> %assign i i+1
   718 0000047B [E50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   719                              <2> %assign i i+1
   720 00000483 [F10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   721                              <2> %assign i i+1
   722 0000048B [FD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   723                              <2> %assign i i+1
   724 00000493 [090E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   725                              <2> %assign i i+1
   726 0000049B [150E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   727                              <2> %assign i i+1
   728 000004A3 [210E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   729                              <2> %assign i i+1
   730 000004AB [2D0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   731                              <2> %assign i i+1
   732 000004B3 [390E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   733                              <2> %assign i i+1
   734 000004BB [450E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   735                              <2> %assign i i+1
   736 000004C3 [510E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   737                              <2> %assign i i+1
   738 000004CB [8B29]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0 ;dos ints
   739 000004D3 [8F29]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   740                              <1> %assign i 0x22
   741                              <1> %rep 14
   742                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   743                              <1> %assign i +1
   744                              <1> %endrep
   745 000004DB [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   746                              <2> %assign i +1
   747 000004E3 [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   748                              <2> %assign i +1
   749 000004EB [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   750                              <2> %assign i +1
   751 000004F3 [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   752                              <2> %assign i +1
   753 000004FB [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   754                              <2> %assign i +1
   755 00000503 [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   756                              <2> %assign i +1
   757 0000050B [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   758                              <2> %assign i +1
   759 00000513 [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   760                              <2> %assign i +1
   761 0000051B [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   762                              <2> %assign i +1
   763 00000523 [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   764                              <2> %assign i +1
   765 0000052B [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   766                              <2> %assign i +1
   767 00000533 [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   768                              <2> %assign i +1
   769 0000053B [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   770                              <2> %assign i +1
   771 00000543 [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   772                              <2> %assign i +1
   773                              <1> ;INT 30h for os use and 3rd party use:
   774 0000054B [BF1B]2800008E0000  <1> 		dw int30h,NEW_CODE_SEL,0x8E00,0
   775                              <1> %assign i 0x31
   776                              <1> %rep 15
   777                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   778                              <1> %assign i +1
   779                              <1> %endrep
   780 00000553 [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   781                              <2> %assign i +1
   782 0000055B [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   783                              <2> %assign i +1
   784 00000563 [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   785                              <2> %assign i +1
   786 0000056B [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   787                              <2> %assign i +1
   788 00000573 [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   789                              <2> %assign i +1
   790 0000057B [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   791                              <2> %assign i +1
   792 00000583 [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   793                              <2> %assign i +1
   794 0000058B [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   795                              <2> %assign i +1
   796 00000593 [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   797                              <2> %assign i +1
   798 0000059B [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   799                              <2> %assign i +1
   800 000005A3 [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   801                              <2> %assign i +1
   802 000005AB [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   803                              <2> %assign i +1
   804 000005B3 [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   805                              <2> %assign i +1
   806 000005BB [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   807                              <2> %assign i +1
   808 000005C3 [5703]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   809                              <2> %assign i +1
   810                              <1> ;and here we are at 0x40
   811                              <1> ;here are all the irq's
   812 000005CB [8302]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   813 000005D3 [AB02]2800008E0000  <1> 		dw keyinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   814 000005DB [5703]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   815 000005E3 [5703]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   816 000005EB [5703]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   817                              <1> 	%ifdef sound.included
   818 000005F3 [2103]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   819                              <1> 	%else
   820                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   821                              <1> 	%endif
   822 000005FB [5703]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   823 00000603 [5703]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   824 0000060B [0903]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   825 00000613 [5E03]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   826 0000061B [5E03]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   827                              <1> 	%ifdef rtl8139.included
   828                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   829                              <1> 	%else
   830 00000623 [5E03]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   831                              <1> 	%endif
   832 0000062B [5E03]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   833 00000633 [5E03]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   834 0000063B [5E03]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   835 00000643 [5E03]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   836                              <1> ;This brings me up to 0x50
   837                              <1> %assign i 0x50
   838                              <1> %rep 176
   839                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   840                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   841                              <1> %assign i +1
   842                              <1> %endrep
   843 0000064B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   844                              <2> 
   845                              <2> %assign i +1
   846 00000653 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   847                              <2> 
   848                              <2> %assign i +1
   849 0000065B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   850                              <2> 
   851                              <2> %assign i +1
   852 00000663 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   853                              <2> 
   854                              <2> %assign i +1
   855 0000066B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   856                              <2> 
   857                              <2> %assign i +1
   858 00000673 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   859                              <2> 
   860                              <2> %assign i +1
   861 0000067B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   862                              <2> 
   863                              <2> %assign i +1
   864 00000683 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   865                              <2> 
   866                              <2> %assign i +1
   867 0000068B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   868                              <2> 
   869                              <2> %assign i +1
   870 00000693 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   871                              <2> 
   872                              <2> %assign i +1
   873 0000069B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   874                              <2> 
   875                              <2> %assign i +1
   876 000006A3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   877                              <2> 
   878                              <2> %assign i +1
   879 000006AB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   880                              <2> 
   881                              <2> %assign i +1
   882 000006B3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   883                              <2> 
   884                              <2> %assign i +1
   885 000006BB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   886                              <2> 
   887                              <2> %assign i +1
   888 000006C3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   889                              <2> 
   890                              <2> %assign i +1
   891 000006CB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   892                              <2> 
   893                              <2> %assign i +1
   894 000006D3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   895                              <2> 
   896                              <2> %assign i +1
   897 000006DB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   898                              <2> 
   899                              <2> %assign i +1
   900 000006E3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   901                              <2> 
   902                              <2> %assign i +1
   903 000006EB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   904                              <2> 
   905                              <2> %assign i +1
   906 000006F3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   907                              <2> 
   908                              <2> %assign i +1
   909 000006FB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   910                              <2> 
   911                              <2> %assign i +1
   912 00000703 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   913                              <2> 
   914                              <2> %assign i +1
   915 0000070B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   916                              <2> 
   917                              <2> %assign i +1
   918 00000713 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   919                              <2> 
   920                              <2> %assign i +1
   921 0000071B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   922                              <2> 
   923                              <2> %assign i +1
   924 00000723 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   925                              <2> 
   926                              <2> %assign i +1
   927 0000072B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   928                              <2> 
   929                              <2> %assign i +1
   930 00000733 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   931                              <2> 
   932                              <2> %assign i +1
   933 0000073B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   934                              <2> 
   935                              <2> %assign i +1
   936 00000743 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   937                              <2> 
   938                              <2> %assign i +1
   939 0000074B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   940                              <2> 
   941                              <2> %assign i +1
   942 00000753 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   943                              <2> 
   944                              <2> %assign i +1
   945 0000075B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   946                              <2> 
   947                              <2> %assign i +1
   948 00000763 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   949                              <2> 
   950                              <2> %assign i +1
   951 0000076B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   952                              <2> 
   953                              <2> %assign i +1
   954 00000773 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   955                              <2> 
   956                              <2> %assign i +1
   957 0000077B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   958                              <2> 
   959                              <2> %assign i +1
   960 00000783 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   961                              <2> 
   962                              <2> %assign i +1
   963 0000078B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   964                              <2> 
   965                              <2> %assign i +1
   966 00000793 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   967                              <2> 
   968                              <2> %assign i +1
   969 0000079B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   970                              <2> 
   971                              <2> %assign i +1
   972 000007A3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   973                              <2> 
   974                              <2> %assign i +1
   975 000007AB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   976                              <2> 
   977                              <2> %assign i +1
   978 000007B3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   979                              <2> 
   980                              <2> %assign i +1
   981 000007BB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   982                              <2> 
   983                              <2> %assign i +1
   984 000007C3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   985                              <2> 
   986                              <2> %assign i +1
   987 000007CB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   988                              <2> 
   989                              <2> %assign i +1
   990 000007D3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   991                              <2> 
   992                              <2> %assign i +1
   993 000007DB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   994                              <2> 
   995                              <2> %assign i +1
   996 000007E3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   997                              <2> 
   998                              <2> %assign i +1
   999 000007EB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1000                              <2> 
  1001                              <2> %assign i +1
  1002 000007F3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1003                              <2> 
  1004                              <2> %assign i +1
  1005 000007FB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1006                              <2> 
  1007                              <2> %assign i +1
  1008 00000803 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1009                              <2> 
  1010                              <2> %assign i +1
  1011 0000080B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1012                              <2> 
  1013                              <2> %assign i +1
  1014 00000813 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1015                              <2> 
  1016                              <2> %assign i +1
  1017 0000081B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1018                              <2> 
  1019                              <2> %assign i +1
  1020 00000823 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1021                              <2> 
  1022                              <2> %assign i +1
  1023 0000082B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1024                              <2> 
  1025                              <2> %assign i +1
  1026 00000833 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1027                              <2> 
  1028                              <2> %assign i +1
  1029 0000083B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1030                              <2> 
  1031                              <2> %assign i +1
  1032 00000843 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1033                              <2> 
  1034                              <2> %assign i +1
  1035 0000084B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1036                              <2> 
  1037                              <2> %assign i +1
  1038 00000853 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1039                              <2> 
  1040                              <2> %assign i +1
  1041 0000085B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1042                              <2> 
  1043                              <2> %assign i +1
  1044 00000863 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1045                              <2> 
  1046                              <2> %assign i +1
  1047 0000086B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1048                              <2> 
  1049                              <2> %assign i +1
  1050 00000873 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1051                              <2> 
  1052                              <2> %assign i +1
  1053 0000087B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1054                              <2> 
  1055                              <2> %assign i +1
  1056 00000883 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1057                              <2> 
  1058                              <2> %assign i +1
  1059 0000088B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1060                              <2> 
  1061                              <2> %assign i +1
  1062 00000893 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1063                              <2> 
  1064                              <2> %assign i +1
  1065 0000089B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1066                              <2> 
  1067                              <2> %assign i +1
  1068 000008A3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1069                              <2> 
  1070                              <2> %assign i +1
  1071 000008AB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1072                              <2> 
  1073                              <2> %assign i +1
  1074 000008B3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1075                              <2> 
  1076                              <2> %assign i +1
  1077 000008BB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1078                              <2> 
  1079                              <2> %assign i +1
  1080 000008C3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1081                              <2> 
  1082                              <2> %assign i +1
  1083 000008CB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1084                              <2> 
  1085                              <2> %assign i +1
  1086 000008D3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1087                              <2> 
  1088                              <2> %assign i +1
  1089 000008DB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1090                              <2> 
  1091                              <2> %assign i +1
  1092 000008E3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1093                              <2> 
  1094                              <2> %assign i +1
  1095 000008EB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1096                              <2> 
  1097                              <2> %assign i +1
  1098 000008F3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1099                              <2> 
  1100                              <2> %assign i +1
  1101 000008FB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1102                              <2> 
  1103                              <2> %assign i +1
  1104 00000903 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1105                              <2> 
  1106                              <2> %assign i +1
  1107 0000090B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1108                              <2> 
  1109                              <2> %assign i +1
  1110 00000913 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1111                              <2> 
  1112                              <2> %assign i +1
  1113 0000091B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1114                              <2> 
  1115                              <2> %assign i +1
  1116 00000923 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1117                              <2> 
  1118                              <2> %assign i +1
  1119 0000092B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1120                              <2> 
  1121                              <2> %assign i +1
  1122 00000933 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1123                              <2> 
  1124                              <2> %assign i +1
  1125 0000093B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1126                              <2> 
  1127                              <2> %assign i +1
  1128 00000943 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1129                              <2> 
  1130                              <2> %assign i +1
  1131 0000094B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1132                              <2> 
  1133                              <2> %assign i +1
  1134 00000953 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1135                              <2> 
  1136                              <2> %assign i +1
  1137 0000095B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1138                              <2> 
  1139                              <2> %assign i +1
  1140 00000963 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1141                              <2> 
  1142                              <2> %assign i +1
  1143 0000096B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1144                              <2> 
  1145                              <2> %assign i +1
  1146 00000973 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1147                              <2> 
  1148                              <2> %assign i +1
  1149 0000097B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1150                              <2> 
  1151                              <2> %assign i +1
  1152 00000983 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1153                              <2> 
  1154                              <2> %assign i +1
  1155 0000098B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1156                              <2> 
  1157                              <2> %assign i +1
  1158 00000993 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1159                              <2> 
  1160                              <2> %assign i +1
  1161 0000099B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1162                              <2> 
  1163                              <2> %assign i +1
  1164 000009A3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1165                              <2> 
  1166                              <2> %assign i +1
  1167 000009AB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1168                              <2> 
  1169                              <2> %assign i +1
  1170 000009B3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1171                              <2> 
  1172                              <2> %assign i +1
  1173 000009BB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1174                              <2> 
  1175                              <2> %assign i +1
  1176 000009C3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1177                              <2> 
  1178                              <2> %assign i +1
  1179 000009CB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1180                              <2> 
  1181                              <2> %assign i +1
  1182 000009D3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1183                              <2> 
  1184                              <2> %assign i +1
  1185 000009DB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1186                              <2> 
  1187                              <2> %assign i +1
  1188 000009E3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1189                              <2> 
  1190                              <2> %assign i +1
  1191 000009EB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1192                              <2> 
  1193                              <2> %assign i +1
  1194 000009F3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1195                              <2> 
  1196                              <2> %assign i +1
  1197 000009FB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1198                              <2> 
  1199                              <2> %assign i +1
  1200 00000A03 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1201                              <2> 
  1202                              <2> %assign i +1
  1203 00000A0B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1204                              <2> 
  1205                              <2> %assign i +1
  1206 00000A13 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1207                              <2> 
  1208                              <2> %assign i +1
  1209 00000A1B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1210                              <2> 
  1211                              <2> %assign i +1
  1212 00000A23 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1213                              <2> 
  1214                              <2> %assign i +1
  1215 00000A2B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1216                              <2> 
  1217                              <2> %assign i +1
  1218 00000A33 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1219                              <2> 
  1220                              <2> %assign i +1
  1221 00000A3B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1222                              <2> 
  1223                              <2> %assign i +1
  1224 00000A43 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1225                              <2> 
  1226                              <2> %assign i +1
  1227 00000A4B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1228                              <2> 
  1229                              <2> %assign i +1
  1230 00000A53 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1231                              <2> 
  1232                              <2> %assign i +1
  1233 00000A5B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1234                              <2> 
  1235                              <2> %assign i +1
  1236 00000A63 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1237                              <2> 
  1238                              <2> %assign i +1
  1239 00000A6B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1240                              <2> 
  1241                              <2> %assign i +1
  1242 00000A73 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1243                              <2> 
  1244                              <2> %assign i +1
  1245 00000A7B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1246                              <2> 
  1247                              <2> %assign i +1
  1248 00000A83 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1249                              <2> 
  1250                              <2> %assign i +1
  1251 00000A8B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1252                              <2> 
  1253                              <2> %assign i +1
  1254 00000A93 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1255                              <2> 
  1256                              <2> %assign i +1
  1257 00000A9B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1258                              <2> 
  1259                              <2> %assign i +1
  1260 00000AA3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1261                              <2> 
  1262                              <2> %assign i +1
  1263 00000AAB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1264                              <2> 
  1265                              <2> %assign i +1
  1266 00000AB3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1267                              <2> 
  1268                              <2> %assign i +1
  1269 00000ABB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1270                              <2> 
  1271                              <2> %assign i +1
  1272 00000AC3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1273                              <2> 
  1274                              <2> %assign i +1
  1275 00000ACB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1276                              <2> 
  1277                              <2> %assign i +1
  1278 00000AD3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1279                              <2> 
  1280                              <2> %assign i +1
  1281 00000ADB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1282                              <2> 
  1283                              <2> %assign i +1
  1284 00000AE3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1285                              <2> 
  1286                              <2> %assign i +1
  1287 00000AEB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1288                              <2> 
  1289                              <2> %assign i +1
  1290 00000AF3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1291                              <2> 
  1292                              <2> %assign i +1
  1293 00000AFB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1294                              <2> 
  1295                              <2> %assign i +1
  1296 00000B03 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1297                              <2> 
  1298                              <2> %assign i +1
  1299 00000B0B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1300                              <2> 
  1301                              <2> %assign i +1
  1302 00000B13 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1303                              <2> 
  1304                              <2> %assign i +1
  1305 00000B1B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1306                              <2> 
  1307                              <2> %assign i +1
  1308 00000B23 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1309                              <2> 
  1310                              <2> %assign i +1
  1311 00000B2B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1312                              <2> 
  1313                              <2> %assign i +1
  1314 00000B33 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1315                              <2> 
  1316                              <2> %assign i +1
  1317 00000B3B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1318                              <2> 
  1319                              <2> %assign i +1
  1320 00000B43 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1321                              <2> 
  1322                              <2> %assign i +1
  1323 00000B4B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1324                              <2> 
  1325                              <2> %assign i +1
  1326 00000B53 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1327                              <2> 
  1328                              <2> %assign i +1
  1329 00000B5B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1330                              <2> 
  1331                              <2> %assign i +1
  1332 00000B63 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1333                              <2> 
  1334                              <2> %assign i +1
  1335 00000B6B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1336                              <2> 
  1337                              <2> %assign i +1
  1338 00000B73 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1339                              <2> 
  1340                              <2> %assign i +1
  1341 00000B7B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1342                              <2> 
  1343                              <2> %assign i +1
  1344 00000B83 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1345                              <2> 
  1346                              <2> %assign i +1
  1347 00000B8B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1348                              <2> 
  1349                              <2> %assign i +1
  1350 00000B93 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1351                              <2> 
  1352                              <2> %assign i +1
  1353 00000B9B [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1354                              <2> 
  1355                              <2> %assign i +1
  1356 00000BA3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1357                              <2> 
  1358                              <2> %assign i +1
  1359 00000BAB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1360                              <2> 
  1361                              <2> %assign i +1
  1362 00000BB3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1363                              <2> 
  1364                              <2> %assign i +1
  1365 00000BBB [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1366                              <2> 
  1367                              <2> %assign i +1
  1368 00000BC3 [5703]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1369                              <2> 
  1370                              <2> %assign i +1
  1371                              <1> idt_end:
  1372                                  %include "source/realmode.asm"
  1373                              <1> realmode:	;make sure the real mode program's address is in realmodeptr
  1374                              <1> 
  1375 00000BCB FA                  <1> 	cli
  1376 00000BCC A3[D30C0000]        <1> 	mov [realmodeeax], eax
  1377 00000BD1 891D[CF0C0000]      <1> 	mov [realmodeebx], ebx
  1378 00000BD7 8925[C10C0000]      <1> 	mov [pmodeesp], esp
  1379                              <1> 
  1380 00000BDD BB[CB0C0000]        <1> 	mov ebx, cr0old
  1381                              <1> rmcopytofirstmbyte:
  1382 00000BE2 8B03                <1> 	mov eax, [ebx]
  1383 00000BE4 658903              <1> 	mov [gs:ebx], eax
  1384 00000BE7 83C304              <1> 	add ebx, 4
  1385 00000BEA 81FB[D70C0000]      <1> 	cmp ebx, realmodeptr
  1386 00000BF0 76F0                <1> 	jbe rmcopytofirstmbyte
  1387                              <1> 
  1388 00000BF2 EA[F90B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1389                              <1> 
  1390                              <1> [BITS 16]
  1391                              <1> protected16bit:
  1392 00000BF9 B84000              <1> 	mov ax, V8086_DATA_SEL
  1393 00000BFC 8ED8                <1> 	mov ds, ax
  1394 00000BFE 8EC0                <1> 	mov es, ax
  1395 00000C00 8EE0                <1> 	mov fs, ax
  1396 00000C02 8EE8                <1> 	mov gs, ax
  1397 00000C04 8ED0                <1> 	mov ss, ax
  1398 00000C06 66BC[00AA0300]      <1> 	mov esp, stackend
  1399 00000C0C 0F20C0              <1> 	mov eax, cr0
  1400 00000C0F 66A3[CB0C]          <1> 	mov [cr0old], eax
  1401 00000C13 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1402 00000C19 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1403 00000C1C EA[210C]0010        <1> 	jmp 0x1000:inrealmode
  1404                              <1> 
  1405                              <1> inrealmode:
  1406 00000C21 8CC8                <1> 	mov ax, cs
  1407 00000C23 8ED8                <1> 	mov ds, ax
  1408 00000C25 8EC0                <1> 	mov es, ax
  1409 00000C27 8EE0                <1> 	mov fs, ax
  1410 00000C29 8EE8                <1> 	mov gs, ax
  1411 00000C2B 8ED0                <1> 	mov ss, ax
  1412 00000C2D BC[00AA]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1413                              <1> 	
  1414 00000C30 B011                <1> 	mov al, 0x11
  1415 00000C32 E620                <1> 	out 0x20, al
  1416 00000C34 E6A0                <1> 	out 0xA0, al
  1417 00000C36 B008                <1> 	mov al, 0x8		;interrupt for master
  1418 00000C38 E621                <1> 	out 0x21, al
  1419 00000C3A B070                <1> 	mov al, 0x70	;interrupt for slave
  1420 00000C3C E6A1                <1> 	out 0xA1, al
  1421 00000C3E B004                <1> 	mov al, 4
  1422 00000C40 E621                <1> 	out 0x21, al
  1423 00000C42 B002                <1> 	mov al, 2
  1424 00000C44 E6A1                <1> 	out 0xA1, al
  1425 00000C46 B001                <1> 	mov al, 0x1
  1426 00000C48 E621                <1> 	out 0x21, al
  1427 00000C4A B001                <1> 	mov al, 0x1
  1428 00000C4C E6A1                <1> 	out 0xA1, al
  1429                              <1> 	
  1430 00000C4E 0F011E[C50C]        <1> 	lidt [idt_real]
  1431 00000C53 FB                  <1> 	sti
  1432                              <1> 
  1433 00000C54 66A1[D30C]          <1> 	mov eax, [realmodeeax]
  1434 00000C58 668B1E[CF0C]        <1> 	mov ebx, [realmodeebx]
  1435                              <1> 
  1436 00000C5D FF16[D70C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1437                              <1> 
  1438 00000C61 66A3[D30C]          <1> 	mov [realmodeeax], eax
  1439 00000C65 66891E[CF0C]        <1> 	mov [realmodeebx], ebx
  1440                              <1> 
  1441 00000C6A FA                  <1> 	cli
  1442 00000C6B 0F0116[6703]        <1> 	lgdt [gdtr]
  1443 00000C70 0F011E[6D03]        <1> 	lidt [idtr]
  1444 00000C75 0F20C0              <1> 	mov eax, cr0
  1445 00000C78 0C01                <1> 	or al, 1
  1446 00000C7A 0F22C0              <1> 	mov cr0,eax
  1447 00000C7D EA[820C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1448                              <1> 
  1449                              <1> [BITS 32]
  1450                              <1> returntopmode:
  1451 00000C82 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1452 00000C86 8ED8                <1> 	mov ds, ax
  1453 00000C88 8EC0                <1> 	mov es, ax
  1454 00000C8A 8EE0                <1> 	mov fs, ax
  1455 00000C8C 8ED0                <1> 	mov ss, ax
  1456 00000C8E 8B25[C10C0000]      <1> 	mov esp, [pmodeesp]
  1457 00000C94 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1458 00000C98 8EE8                <1> 	mov gs, ax
  1459                              <1> 
  1460 00000C9A BB[CB0C0000]        <1> 	mov ebx, cr0old
  1461                              <1> rmcopyfromfirstmbyte:
  1462 00000C9F 658B03              <1> 	mov eax, [gs:ebx]
  1463 00000CA2 8903                <1> 	mov [ebx], eax
  1464 00000CA4 83C304              <1> 	add ebx, 4
  1465 00000CA7 81FB[D70C0000]      <1> 	cmp ebx, realmodeptr
  1466 00000CAD 76F0                <1> 	jbe rmcopyfromfirstmbyte
  1467                              <1> 
  1468 00000CAF E8F2540000          <1> 	call initialize.pic ;reset irq's and masks
  1469 00000CB4 FB                  <1> 	sti
  1470 00000CB5 A1[D30C0000]        <1> 	mov eax, [realmodeeax]
  1471 00000CBA 8B1D[CF0C0000]      <1> 	mov ebx, [realmodeebx]
  1472 00000CC0 C3                  <1> 	ret
  1473                              <1> 	
  1474 00000CC1 00000000            <1> pmodeesp dd 0
  1475                              <1> idt_real:
  1476 00000CC5 FF03                <1> 	dw 0x3FF
  1477 00000CC7 00000000            <1> 	dd 0
  1478 00000CCB 00000000            <1> cr0old dd 0
  1479 00000CCF 00000000            <1> realmodeebx dd 0
  1480 00000CD3 00000000            <1> realmodeeax dd 0
  1481 00000CD7 0000                <1> realmodeptr dw 0
  1482 00000CD9 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1483                                  [BITS 32]
  1484                                  %include "source/exception.asm"
  1485                              <1> %ifdef exceptions.included
  1486                              <1> unhand:	
  1487                              <1> 	%assign i 0
  1488                              <1> 	%rep 32
  1489                              <1> 	mov byte [intprob], i
  1490                              <1> 	jmp unhand2
  1491                              <1> 	%assign i i+1
  1492                              <1> 	%endrep
  1493 00000CDD C605[78110000]00    <2>  mov byte [intprob], i
  1494 00000CE4 E947010000          <2>  jmp unhand2
  1495                              <2>  %assign i i+1
  1496 00000CE9 C605[78110000]01    <2>  mov byte [intprob], i
  1497 00000CF0 E93B010000          <2>  jmp unhand2
  1498                              <2>  %assign i i+1
  1499 00000CF5 C605[78110000]02    <2>  mov byte [intprob], i
  1500 00000CFC E92F010000          <2>  jmp unhand2
  1501                              <2>  %assign i i+1
  1502 00000D01 C605[78110000]03    <2>  mov byte [intprob], i
  1503 00000D08 E923010000          <2>  jmp unhand2
  1504                              <2>  %assign i i+1
  1505 00000D0D C605[78110000]04    <2>  mov byte [intprob], i
  1506 00000D14 E917010000          <2>  jmp unhand2
  1507                              <2>  %assign i i+1
  1508 00000D19 C605[78110000]05    <2>  mov byte [intprob], i
  1509 00000D20 E90B010000          <2>  jmp unhand2
  1510                              <2>  %assign i i+1
  1511 00000D25 C605[78110000]06    <2>  mov byte [intprob], i
  1512 00000D2C E9FF000000          <2>  jmp unhand2
  1513                              <2>  %assign i i+1
  1514 00000D31 C605[78110000]07    <2>  mov byte [intprob], i
  1515 00000D38 E9F3000000          <2>  jmp unhand2
  1516                              <2>  %assign i i+1
  1517 00000D3D C605[78110000]08    <2>  mov byte [intprob], i
  1518 00000D44 E9E7000000          <2>  jmp unhand2
  1519                              <2>  %assign i i+1
  1520 00000D49 C605[78110000]09    <2>  mov byte [intprob], i
  1521 00000D50 E9DB000000          <2>  jmp unhand2
  1522                              <2>  %assign i i+1
  1523 00000D55 C605[78110000]0A    <2>  mov byte [intprob], i
  1524 00000D5C E9CF000000          <2>  jmp unhand2
  1525                              <2>  %assign i i+1
  1526 00000D61 C605[78110000]0B    <2>  mov byte [intprob], i
  1527 00000D68 E9C3000000          <2>  jmp unhand2
  1528                              <2>  %assign i i+1
  1529 00000D6D C605[78110000]0C    <2>  mov byte [intprob], i
  1530 00000D74 E9B7000000          <2>  jmp unhand2
  1531                              <2>  %assign i i+1
  1532 00000D79 C605[78110000]0D    <2>  mov byte [intprob], i
  1533 00000D80 E9AB000000          <2>  jmp unhand2
  1534                              <2>  %assign i i+1
  1535 00000D85 C605[78110000]0E    <2>  mov byte [intprob], i
  1536 00000D8C E99F000000          <2>  jmp unhand2
  1537                              <2>  %assign i i+1
  1538 00000D91 C605[78110000]0F    <2>  mov byte [intprob], i
  1539 00000D98 E993000000          <2>  jmp unhand2
  1540                              <2>  %assign i i+1
  1541 00000D9D C605[78110000]10    <2>  mov byte [intprob], i
  1542 00000DA4 E987000000          <2>  jmp unhand2
  1543                              <2>  %assign i i+1
  1544 00000DA9 C605[78110000]11    <2>  mov byte [intprob], i
  1545 00000DB0 EB7E                <2>  jmp unhand2
  1546                              <2>  %assign i i+1
  1547 00000DB2 C605[78110000]12    <2>  mov byte [intprob], i
  1548 00000DB9 EB75                <2>  jmp unhand2
  1549                              <2>  %assign i i+1
  1550 00000DBB C605[78110000]13    <2>  mov byte [intprob], i
  1551 00000DC2 EB6C                <2>  jmp unhand2
  1552                              <2>  %assign i i+1
  1553 00000DC4 C605[78110000]14    <2>  mov byte [intprob], i
  1554 00000DCB EB63                <2>  jmp unhand2
  1555                              <2>  %assign i i+1
  1556 00000DCD C605[78110000]15    <2>  mov byte [intprob], i
  1557 00000DD4 EB5A                <2>  jmp unhand2
  1558                              <2>  %assign i i+1
  1559 00000DD6 C605[78110000]16    <2>  mov byte [intprob], i
  1560 00000DDD EB51                <2>  jmp unhand2
  1561                              <2>  %assign i i+1
  1562 00000DDF C605[78110000]17    <2>  mov byte [intprob], i
  1563 00000DE6 EB48                <2>  jmp unhand2
  1564                              <2>  %assign i i+1
  1565 00000DE8 C605[78110000]18    <2>  mov byte [intprob], i
  1566 00000DEF EB3F                <2>  jmp unhand2
  1567                              <2>  %assign i i+1
  1568 00000DF1 C605[78110000]19    <2>  mov byte [intprob], i
  1569 00000DF8 EB36                <2>  jmp unhand2
  1570                              <2>  %assign i i+1
  1571 00000DFA C605[78110000]1A    <2>  mov byte [intprob], i
  1572 00000E01 EB2D                <2>  jmp unhand2
  1573                              <2>  %assign i i+1
  1574 00000E03 C605[78110000]1B    <2>  mov byte [intprob], i
  1575 00000E0A EB24                <2>  jmp unhand2
  1576                              <2>  %assign i i+1
  1577 00000E0C C605[78110000]1C    <2>  mov byte [intprob], i
  1578 00000E13 EB1B                <2>  jmp unhand2
  1579                              <2>  %assign i i+1
  1580 00000E15 C605[78110000]1D    <2>  mov byte [intprob], i
  1581 00000E1C EB12                <2>  jmp unhand2
  1582                              <2>  %assign i i+1
  1583 00000E1E C605[78110000]1E    <2>  mov byte [intprob], i
  1584 00000E25 EB09                <2>  jmp unhand2
  1585                              <2>  %assign i i+1
  1586 00000E27 C605[78110000]1F    <2>  mov byte [intprob], i
  1587 00000E2E EB00                <2>  jmp unhand2
  1588                              <2>  %assign i i+1
  1589                              <1> unhand2:
  1590 00000E30 FA                  <1> 	cli
  1591 00000E31 1E                  <1> 	push ds
  1592 00000E32 06                  <1> 	push es
  1593 00000E33 0FA0                <1> 	push fs
  1594 00000E35 0FA8                <1> 	push gs
  1595 00000E37 16                  <1> 	push ss
  1596 00000E38 60                  <1> 	pushad
  1597                              <1> %ifdef gui.included
  1598 00000E39 803D[0F850000]00    <1> 	cmp byte [guion], 0
  1599 00000E40 0F8432000000        <1> 	je near noguiunhandstuff
  1600 00000E46 66C705[72110000]08- <1> 	mov word [locunhandy], 8
  1601 00000E4E 00                  <1>
  1602 00000E4F 66C705[74110000]08- <1> 	mov word [locunhandx], 8
  1603 00000E57 00                  <1>
  1604 00000E58 668B1D[0B6E0000]    <1> 	mov bx, [background]
  1605 00000E5F 66891D[76110000]    <1> 	mov [backgroundcache], bx
  1606 00000E66 C605[1E560000]01    <1> 	mov byte [mousedisabled],1
  1607 00000E6D 66BB00F8            <1> 	mov bx, 1111100000000000b
  1608 00000E71 66891D[0B6E0000]    <1> 	mov [background], bx
  1609                              <1> noguiunhandstuff:
  1610                              <1> %endif
  1611 00000E78 89E6                <1> 	mov esi, esp
  1612 00000E7A 8935[66110000]      <1> 	mov [espfirst], esi
  1613 00000E80 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1614 00000E86 8935[62110000]      <1> 	mov [esploc], esi
  1615 00000E8C BE[87110000]        <1> 	mov esi, unhandmsg
  1616 00000E91 8935[6A110000]      <1> 	mov [esiloc], esi
  1617 00000E97 31C9                <1> 	xor ecx, ecx
  1618 00000E99 8A0D[78110000]      <1> 	mov cl, [intprob]
  1619 00000E9F BB[56150000]        <1> 	mov ebx, errortypes
  1620 00000EA4 C1E102              <1> 	shl ecx, 2
  1621 00000EA7 01CB                <1> 	add ebx, ecx
  1622 00000EA9 81FB[96150000]      <1> 	cmp ebx, errortypesend
  1623 00000EAF 7205                <1> 	jb gooderrortype
  1624 00000EB1 BB[96150000]        <1> 	mov ebx, errortypesend
  1625                              <1> gooderrortype:
  1626 00000EB6 8B33                <1> 	mov esi, [ebx]
  1627                              <1> %ifdef gui.included
  1628 00000EB8 803D[0F850000]00    <1> 	cmp byte [guion], 0
  1629 00000EBF 0F842A000000        <1> 	je near errortext
  1630 00000EC5 668B0D[72110000]    <1> 	mov cx, [locunhandy]
  1631 00000ECC 668B15[74110000]    <1> 	mov dx, [locunhandx]
  1632 00000ED3 66B80100            <1> 	mov ax, 1
  1633 00000ED7 6631DB              <1> 	xor bx, bx
  1634 00000EDA E876650000          <1> 	call showstring2
  1635 00000EDF 66890D[72110000]    <1> 	mov [locunhandy], cx
  1636 00000EE6 668915[74110000]    <1> 	mov [locunhandx], dx
  1637 00000EED EB05                <1> 	jmp errortextdone
  1638                              <1> %endif
  1639                              <1> errortext:
  1640 00000EEF E8200E0000          <1> 	call print		;get the error message and print it
  1641                              <1> errortextdone:
  1642 00000EF4 31C9                <1> 	xor ecx, ecx
  1643 00000EF6 8A0D[78110000]      <1> 	mov cl, [intprob]
  1644 00000EFC E806020000          <1> 	call expdump
  1645                              <1> dumpstack:
  1646 00000F01 8B35[62110000]      <1> 	mov esi, [esploc]
  1647 00000F07 39E6                <1> 	cmp esi, esp
  1648 00000F09 7213                <1> 	jb donedump
  1649 00000F0B 368B0E              <1> 	mov ecx, [ss:esi]
  1650 00000F0E 83EE04              <1> 	sub esi, 4
  1651 00000F11 8935[62110000]      <1> 	mov [esploc], esi
  1652 00000F17 E8EB010000          <1> 	call expdump
  1653 00000F1C EBE3                <1> 	jmp dumpstack
  1654                              <1> donedump:
  1655 00000F1E 0F20C1              <1> 	mov ecx, cr0
  1656 00000F21 E8E1010000          <1> 	call expdump
  1657 00000F26 0F20D1              <1> 	mov ecx, cr2
  1658 00000F29 E8D9010000          <1> 	call expdump
  1659 00000F2E 0F20D9              <1> 	mov ecx, cr3
  1660 00000F31 E8D1010000          <1> 	call expdump
  1661 00000F36 0F20E1              <1> 	mov ecx, cr4
  1662 00000F39 E8C9010000          <1> 	call expdump
  1663 00000F3E 0F00C9              <1> 	str ecx
  1664 00000F41 E8C1010000          <1> 	call expdump
  1665 00000F46 0F010D[81110000]    <1> 	sidt [igdtcache]
  1666 00000F4D 8B0D[83110000]      <1> 	mov ecx, [igdtcache + 2]
  1667 00000F53 E8AF010000          <1> 	call expdump
  1668 00000F58 0F0105[81110000]    <1> 	sgdt [igdtcache]
  1669 00000F5F 8B0D[83110000]      <1> 	mov ecx, [igdtcache + 2]
  1670 00000F65 E89D010000          <1> 	call expdump
  1671 00000F6A 0F00C1              <1> 	sldt ecx
  1672 00000F6D E895010000          <1> 	call expdump
  1673 00000F72 8B35[62110000]      <1> 	mov esi, [esploc]
  1674 00000F78 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1675 00000F7D 83C710              <1> 	add edi, 16
  1676 00000F80 893D[7D110000]      <1> 	mov [codelocend], edi
  1677 00000F86 83EF20              <1> 	sub edi, 32
  1678                              <1> dumpcodeloop:
  1679 00000F89 893D[79110000]      <1> 	mov [codeloc], edi
  1680 00000F8F 8B0F                <1> 	mov ecx, [edi]
  1681 00000F91 E871010000          <1> 	call expdump
  1682 00000F96 8B3D[79110000]      <1> 	mov edi, [codeloc]
  1683 00000F9C 83C704              <1> 	add edi, 4
  1684 00000F9F 3B3D[7D110000]      <1> 	cmp edi, [codelocend]
  1685 00000FA5 72E2                <1> 	jb dumpcodeloop
  1686 00000FA7 BE[82100000]        <1> 	mov esi, backtoosmsg
  1687                              <1> %ifdef gui.included
  1688 00000FAC 803D[0F850000]00    <1> 	cmp byte [guion], 0
  1689 00000FB3 741C                <1> 	je backtomsg
  1690                              <1> guibacktomsg:
  1691 00000FB5 668B15[74110000]    <1> 	mov dx, [locunhandx]
  1692 00000FBC 668B0D[72110000]    <1> 	mov cx, [locunhandy]
  1693 00000FC3 66B80100            <1> 	mov ax, 1
  1694 00000FC7 6631DB              <1> 	xor bx, bx
  1695 00000FCA E886640000          <1> 	call showstring2
  1696 00000FCF EB05                <1> 	jmp backtomsgdone
  1697                              <1> backtomsg:
  1698                              <1> %endif
  1699 00000FD1 E83E0D0000          <1> 	call print
  1700                              <1> backtomsgdone:
  1701 00000FD6 30C0                <1> 	xor al, al
  1702 00000FD8 E813130000          <1> 	call rdcharint
  1703 00000FDD 3D00000100          <1> 	cmp eax, 0x10000
  1704 00000FE2 745E                <1> 	je nodebugint
  1705 00000FE4 803D[78110000]01    <1> 	cmp byte [intprob], 1
  1706 00000FEB 7414                <1> 	je debugint
  1707 00000FED 803D[78110000]03    <1> 	cmp byte [intprob], 3
  1708 00000FF4 740B                <1> 	je debugint
  1709 00000FF6 803D[78110000]04    <1> 	cmp byte [intprob], 4
  1710 00000FFD 7402                <1> 	je debugint
  1711 00000FFF EB41                <1> 	jmp nodebugint
  1712                              <1> debugint:
  1713                              <1> %ifdef gui.included
  1714 00001001 803D[0F850000]00    <1> 	cmp byte [guion], 0
  1715 00001008 7427                <1> 	je nodebuggui
  1716 0000100A 668B1D[76110000]    <1> 	mov bx, [backgroundcache]
  1717 00001011 66891D[0B6E0000]    <1> 	mov [background], bx
  1718 00001018 6631DB              <1> 	xor bx, bx
  1719 0000101B C605[1E560000]00    <1> 	mov byte [mousedisabled], 0
  1720 00001022 E8675D0000          <1> 	call guiclear
  1721 00001027 E8E35D0000          <1> 	call reloadallgraphics
  1722 0000102C E823180000          <1> 	call termcopy
  1723                              <1> nodebuggui:
  1724                              <1> %endif
  1725 00001031 8B35[66110000]      <1> 	mov esi, [espfirst]
  1726 00001037 89F4                <1> 	mov esp, esi
  1727 00001039 61                  <1> 	popad
  1728 0000103A 17                  <1> 	pop ss
  1729 0000103B 0FA9                <1> 	pop gs
  1730 0000103D 0FA1                <1> 	pop fs
  1731 0000103F 07                  <1> 	pop es
  1732 00001040 1F                  <1> 	pop ds
  1733 00001041 CF                  <1> 	iret
  1734                              <1> nodebugint:
  1735 00001042 61                  <1> 	popad
  1736 00001043 17                  <1> 	pop ss
  1737 00001044 0FA9                <1> 	pop gs
  1738 00001046 0FA1                <1> 	pop fs
  1739 00001048 07                  <1> 	pop es
  1740 00001049 1F                  <1> 	pop ds
  1741 0000104A 83C408              <1> 	add esp, 8
  1742                              <1> ;	popf ;pop the cs segment selector into eflags
  1743                              <1> ;	popf ;then pop the flags
  1744                              <1> %ifdef gui.included
  1745 0000104D 803D[0F850000]00    <1> 	cmp byte [guion], 0
  1746 00001054 7427                <1> 	je .nogui
  1747 00001056 668B1D[76110000]    <1> 	mov bx, [backgroundcache]
  1748 0000105D 66891D[0B6E0000]    <1> 	mov [background], bx
  1749 00001064 6631DB              <1> 	xor bx, bx
  1750 00001067 C605[1E560000]00    <1> 	mov byte [mousedisabled], 0
  1751 0000106E E81B5D0000          <1> 	call guiclear
  1752 00001073 E8975D0000          <1> 	call reloadallgraphics
  1753 00001078 E8D7170000          <1> 	call termcopy
  1754                              <1> .nogui:
  1755                              <1> %endif
  1756 0000107D E901560000          <1> 	jmp nwcmdst
  1757 00001082 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1758 0000108B 737420616E79207072- <1>
  1759 00001094 6F626C656D7320696E- <1>
  1760 0000109D 207468652049737375- <1>
  1761 000010A6 65732073656374696F- <1>
  1762 000010AF 6E20617420736F6C6C- <1>
  1763 000010B8 65726F732E676F6F67- <1>
  1764 000010C1 6C65636F64652E636F- <1>
  1765 000010CA 6D0A                <1>
  1766 000010CC 507265737320455343- <1> 			db "Press ESC to return to SollerOS or any key to continue...",10,0
  1767 000010D5 20746F207265747572- <1>
  1768 000010DE 6E20746F20536F6C6C- <1>
  1769 000010E7 65724F53206F722061- <1>
  1770 000010F0 6E79206B657920746F- <1>
  1771 000010F9 20636F6E74696E7565- <1>
  1772 00001102 2E2E2E0A00          <1>
  1773                              <1> expdump:
  1774 00001107 8B35[6A110000]      <1> 	mov esi, [esiloc]
  1775 0000110D 89F7                <1> 	mov edi, esi
  1776 0000110F 83C70F              <1> 	add edi, 15
  1777 00001112 83C604              <1> 	add esi, 4
  1778 00001115 893D[6A110000]      <1> 	mov [esiloc], edi
  1779 0000111B 83EF03              <1> 	sub edi, 3
  1780 0000111E E8921F0000          <1> 	call converthex
  1781 00001123 83EE04              <1> 	sub esi, 4
  1782                              <1> %ifdef gui.included
  1783 00001126 803D[0F850000]00    <1> 	cmp byte [guion], 0
  1784 0000112D 0F8429000000        <1> 	je near expdumptext
  1785 00001133 668B0D[72110000]    <1> 	mov cx, [locunhandy]
  1786 0000113A 668B15[74110000]    <1> 	mov dx, [locunhandx]
  1787 00001141 66B80100            <1> 	mov ax, 1
  1788 00001145 6631DB              <1> 	xor bx, bx
  1789 00001148 E808630000          <1> 	call showstring2
  1790 0000114D 66890D[72110000]    <1> 	mov [locunhandy], cx
  1791 00001154 668915[74110000]    <1> 	mov [locunhandx], dx
  1792 0000115B C3                  <1> 	ret
  1793                              <1> %endif
  1794                              <1> expdumptext:
  1795 0000115C E8B30B0000          <1> 	call print
  1796 00001161 C3                  <1> 	ret
  1797 00001162 00000000            <1> esploc dd 0
  1798 00001166 00000000            <1> espfirst dd 0
  1799 0000116A 00000000            <1> esiloc dd 0
  1800 0000116E 00000000            <1> esiregbuf dd 0
  1801 00001172 0100                <1> locunhandy dw 1
  1802 00001174 0100                <1> locunhandx dw 1
  1803 00001176 0000                <1> backgroundcache dw 0
  1804 00001178 00                  <1> intprob db 0
  1805 00001179 00000000            <1> codeloc dd 0
  1806 0000117D 00000000            <1> codelocend dd 0
  1807 00001181 000000000000        <1> igdtcache dw 0,0,0
  1808                              <1> 	unhandmsg:	
  1809 00001187 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1810 00001190 303030FF0A00        <1>
  1811                              <1> unhndrg:
  1812 00001196 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;this dumps the stack before the stack frame in question
  1813 0000119F 303030202000<rept>  <1>
  1814 000011FF FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1815 00001208 303030FF0A00        <1>
  1816 0000120E FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1817 00001217 303030202000<rept>  <1>
  1818 00001277 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1819 00001280 303030FF0A00        <1>
  1820 00001286 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1821 0000128F 303030202000<rept>  <1>
  1822 000012EF FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1823 000012F8 303030FF0A00        <1>
  1824 000012FE FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1825 00001307 303030202000<rept>  <1>
  1826 00001367 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1827 00001370 303030FF0A00        <1>
  1828                              <1> unhandregs:
  1829 00001376 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1830 0000137F 303030202000        <1>
  1831 00001385 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1832 0000138E 303030202000        <1>
  1833 00001394 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1834 0000139D 303030FF0A00        <1>
  1835 000013A3 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1836 000013AC 303030202000        <1>
  1837 000013B2 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1838 000013BB 303030202000        <1>
  1839 000013C1 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1840 000013CA 303030202000        <1>
  1841 000013D0 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1842 000013D9 303030202000        <1>
  1843 000013DF 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1844 000013E8 303030FF0A00        <1>
  1845 000013EE 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1846 000013F7 303030202000        <1>
  1847 000013FD 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1848 00001406 303030202000        <1>
  1849 0000140C 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1850 00001415 303030202000        <1>
  1851 0000141B 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1852 00001424 303030FF0A00        <1>
  1853 0000142A 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1854 00001433 303030202000        <1>
  1855 00001439 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1856 00001442 303030202000        <1>
  1857 00001448 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1858 00001451 303030202000        <1>
  1859 00001457 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1860 00001460 303030FF0A00        <1>
  1861 00001466 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1862 0000146F 303030202000        <1>
  1863 00001475 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1864 0000147E 303030202000        <1>
  1865 00001484 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1866 0000148D 303030202000        <1>
  1867 00001493 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1868 0000149C 303030FF0A00        <1>
  1869 000014A2 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1870 000014AB 303030202000        <1>
  1871 000014B1 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1872 000014BA 303030202000        <1>
  1873 000014C0 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1874 000014C9 303030202000        <1>
  1875 000014CF 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1876 000014D8 303030FF0A00        <1>
  1877 000014DE FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;this dumps the code before and after the interrupt in question
  1878 000014E7 303030202000<rept>  <1>
  1879 000014FC FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1880 00001505 30303020FF00        <1>
  1881 0000150B FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1882 00001514 3030305D2000        <1>
  1883 0000151A FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1884 00001523 303030202000<rept>  <1>
  1885 00001547 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1886 00001550 303030FF0A00        <1>
  1887                              <1> unhandmsgend:
  1888                              <1> 
  1889                              <1> errortypes:
  1890 00001556 [9A150000]          <1> 			dd err0
  1891 0000155A [03160000]          <1> 			dd err1
  1892 0000155E [64160000]          <1> 			dd err2
  1893 00001562 [B9160000]          <1> 			dd err3
  1894 00001566 [1D170000]          <1> 			dd err4
  1895 0000156A [6F170000]          <1> 			dd err5
  1896 0000156E [D9170000]          <1> 			dd err6
  1897 00001572 [41180000]          <1> 			dd err7
  1898 00001576 [8B180000]          <1> 			dd err8
  1899 0000157A [E8180000]          <1> 			dd err9
  1900 0000157E [41190000]          <1> 			dd err10
  1901 00001582 [8C190000]          <1> 			dd err11
  1902 00001586 [DC190000]          <1> 			dd err12
  1903 0000158A [351A0000]          <1> 			dd err13
  1904 0000158E [981A0000]          <1> 			dd err14
  1905 00001592 [D41A0000]          <1> 			dd err15
  1906                              <1> errortypesend:
  1907 00001596 [601B0000]          <1> 			dd unknownerror
  1908                              <1> 			
  1909 0000159A 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1910 000015A3 6279207A65726F3A0A  <1>
  1911 000015AC 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1912 000015B5 6C79206C696D2061C3- <1>
  1913 000015BE B778203D20E2889E20- <1>
  1914 000015C7 7768656E2061206973- <1>
  1915 000015D0 20616E79207265616C- <1>
  1916 000015D9 206E756D6265722E20- <1>
  1917 000015E2 486170707920456173- <1>
  1918 000015EB 746572210A          <1>
  1919 000015F0 202020202020202020- <1> 		db "            x→0",10,0
  1920 000015F9 20202078E28692300A- <1>
  1921 00001602 00                  <1>
  1922                              <1> 		
  1923 00001603 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1924 0000160C 65702F427265616B70- <1>
  1925 00001615 6F696E743A0A        <1>
  1926 0000161B 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1927 00001624 696E74206661756C74- <1>
  1928 0000162D 2C20627265616B706F- <1>
  1929 00001636 696E7420747261702C- <1>
  1930 0000163F 206F722073696E676C- <1>
  1931 00001648 652D73746570207472- <1>
  1932 00001651 617020776173207472- <1>
  1933 0000165A 696767657265642E0A- <1>
  1934 00001663 00                  <1>
  1935                              <1> 		
  1936 00001664 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1937 0000166D 6C6520696E74657272- <1>
  1938 00001676 7570743A0A          <1>
  1939 0000167B 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1940 00001684 6520696E7465727275- <1>
  1941 0000168D 707420776173207472- <1>
  1942 00001696 696767657265642074- <1>
  1943 0000169F 68617420636F756C64- <1>
  1944 000016A8 206E6F74206265206D- <1>
  1945 000016B1 61736B65642E0A00    <1>
  1946                              <1> 		
  1947 000016B9 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1948 000016C2 743A0A              <1>
  1949 000016C5 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1950 000016CE 727275707420697320- <1>
  1951 000016D7 7573656420696E2070- <1>
  1952 000016E0 726F6772616D732074- <1>
  1953 000016E9 6F2073686F77207468- <1>
  1954 000016F2 6520737461636B2061- <1>
  1955 000016FB 6E6420726567697374- <1>
  1956 00001704 65727320616E642063- <1>
  1957 0000170D 616E2062650A        <1>
  1958 00001713 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1959 0000171C 00                  <1>
  1960                              <1> 		
  1961 0000171D 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1962 00001726 0A                  <1>
  1963 00001727 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1964 00001730 73736F722072616E20- <1>
  1965 00001739 696E746F20616E2049- <1>
  1966 00001742 4E544F20696E737472- <1>
  1967 0000174B 756374696F6E207769- <1>
  1968 00001754 746820746865206F76- <1>
  1969 0000175D 6572666C6F7720666C- <1>
  1970 00001766 6167207365742E0A00  <1>
  1971                              <1> 		
  1972 0000176F 426F756E6473206368- <1> err5	db "Bounds check:",10
  1973 00001778 65636B3A0A          <1>
  1974 0000177D 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1975 00001786 73736F72207265626F- <1>
  1976 0000178F 756E6465642066726F- <1>
  1977 00001798 6D206120424F554E44- <1>
  1978 000017A1 20696E737472756374- <1>
  1979 000017AA 696F6E2072756E206F- <1>
  1980 000017B3 6E20616E206F706572- <1>
  1981 000017BC 616E64207468617420- <1>
  1982 000017C5 776173206F75740A    <1>
  1983 000017CD 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1984 000017D6 2E0A00              <1>
  1985                              <1> 		
  1986 000017D9 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1987 000017E2 70636F64653A0A      <1>
  1988 000017E9 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1989 000017F2 73736F722068617320- <1>
  1990 000017FB 6E6F20696465612077- <1>
  1991 00001804 686174206974207761- <1>
  1992 0000180D 7320747279696E6720- <1>
  1993 00001816 746F20657865637574- <1>
  1994 0000181F 652E20446F6E277420- <1>
  1995 00001828 72756E205353453420- <1>
  1996 00001831 636F64650A          <1>
  1997 00001836 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1998 0000183F 0A00                <1>
  1999                              <1> 		
  2000 00001841 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  2001 0000184A 6F72206E6F74206176- <1>
  2002 00001853 61696C61626C653A0A  <1>
  2003 0000185C 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  2004 00001865 206B6E6F7720746865- <1>
  2005 0000186E 7920646F6E2774206D- <1>
  2006 00001877 616B652074686F7365- <1>
  2007 00001880 20616E796D6F726521- <1>
  2008 00001889 0A00                <1>
  2009                              <1> 		
  2010 0000188B 446F75626C65206661- <1> err8	db "Double fault:",10
  2011 00001894 756C743A0A          <1>
  2012 00001899 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  2013 000018A2 74696F6E2068616E64- <1>
  2014 000018AB 6C657220636F756C64- <1>
  2015 000018B4 206E6F742068616E64- <1>
  2016 000018BD 6C6520746861742069- <1>
  2017 000018C6 7420636F756C64206E- <1>
  2018 000018CF 6F742068616E646C65- <1>
  2019 000018D8 20616E206578636570- <1>
  2020 000018E1 74696F6E2E0A00      <1>
  2021                              <1> 		
  2022 000018E8 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  2023 000018F1 6F72207365676D656E- <1>
  2024 000018FA 74206F76657272756E- <1>
  2025 00001903 3A0A00              <1>
  2026 00001906 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  2027 0000190F 722068617070656E73- <1>
  2028 00001918 20696E206D6F646572- <1>
  2029 00001921 6E20636F6D70757465- <1>
  2030 0000192A 72732C20616E64206E- <1>
  2031 00001933 657665722073686F75- <1>
  2032 0000193C 6C642E0A00          <1>
  2033                              <1> 
  2034 00001941 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  2035 0000194A 53533A0A            <1>
  2036 0000194E 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  2037 00001957 686174207761732073- <1>
  2038 00001960 776974636865642074- <1>
  2039 00001969 6F20697320696E7661- <1>
  2040 00001972 6C69642E204E6F7468- <1>
  2041 0000197B 696E672066756E6E79- <1>
  2042 00001984 20686572652E0A00    <1>
  2043                              <1> 		
  2044 0000198C 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2045 00001995 6F742070726573656E- <1>
  2046 0000199E 743A0A              <1>
  2047 000019A1 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2048 000019AA 6E7420626974206F66- <1>
  2049 000019B3 20746865207365676D- <1>
  2050 000019BC 656E74206465736372- <1>
  2051 000019C5 6970746F7220697320- <1>
  2052 000019CE 73657420746F207A65- <1>
  2053 000019D7 726F2E0A00          <1>
  2054                              <1> 		
  2055 000019DC 537461636B20657863- <1> err12	db "Stack exception:",10
  2056 000019E5 657074696F6E3A0A    <1>
  2057 000019ED 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2058 000019F6 7363726970746F7220- <1>
  2059 000019FF 697320696E76616C69- <1>
  2060 00001A08 64206F72206E6F7420- <1>
  2061 00001A11 70726573656E74206F- <1>
  2062 00001A1A 7220697473206C696D- <1>
  2063 00001A23 697420697320746F6F- <1>
  2064 00001A2C 20736D616C6C2E0A00  <1>
  2065                              <1> 		
  2066 00001A35 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2067 00001A3E 726F74656374696F6E- <1>
  2068 00001A47 2076696F6C6174696F- <1>
  2069 00001A50 6E3A0A              <1>
  2070 00001A53 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2071 00001A5C 746564207468652063- <1>
  2072 00001A65 6F6D70757465722E20- <1>
  2073 00001A6E 537465702061776179- <1>
  2074 00001A77 20736C6F776C792E20- <1>
  2075 00001A80 546865204642492069- <1>
  2076 00001A89 73206F6E2069747320- <1>
  2077 00001A92 7761792E0A00        <1>
  2078                              <1> 		
  2079 00001A98 50616765206661756C- <1> err14	db "Page fault:",10
  2080 00001AA1 743A0A              <1>
  2081 00001AA4 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2082 00001AAD 746861742077617320- <1>
  2083 00001AB6 726571756573746564- <1>
  2084 00001ABF 20776173206E6F7420- <1>
  2085 00001AC8 617661696C61626C65- <1>
  2086 00001AD1 2E0A00              <1>
  2087                              <1> 		
  2088 00001AD4 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2089 00001ADD 666F7220506C616E20- <1>
  2090 00001AE6 523A0A              <1>
  2091 00001AE9 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2092 00001AF2 727275707420697320- <1>
  2093 00001AFB 726573657276656420- <1>
  2094 00001B04 666F72207573616765- <1>
  2095 00001B0D 206F6E6C7920627920- <1>
  2096 00001B16 746865206D696C6974- <1>
  2097 00001B1F 617279207768656E20- <1>
  2098 00001B28 6974206973206E6563- <1>
  2099 00001B31 6573736172790A      <1>
  2100 00001B38 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'état.",10,0
  2101 00001B41 746520612066756C6C- <1>
  2102 00001B4A 2D7363616C6520636F- <1>
  2103 00001B53 7570206427C3A97461- <1>
  2104 00001B5C 742E0A00            <1>
  2105                              <1> 		
  2106 00001B60 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2107 00001B69 68656C6C206A757374- <1>
  2108 00001B72 2068617070656E6564- <1>
  2109 00001B7B 3F2049732065766572- <1>
  2110 00001B84 796F6E65206F6B6179- <1>
  2111 00001B8D 3F2048617264206472- <1>
  2112 00001B96 6976653F2056696465- <1>
  2113 00001B9F 6F20636172643F0A    <1>
  2114 00001BA7 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2115 00001BB0 726520796F75207468- <1>
  2116 00001BB9 6572653F0A00        <1>
  2117                              <1> %else
  2118                              <1> unhand:	
  2119                              <1> 	%assign i 0
  2120                              <1> 	%rep 32
  2121                              <1> 	mov byte [intprob], i
  2122                              <1> 	jmp unhand2
  2123                              <1> 	%assign i i+1
  2124                              <1> 	%endrep
  2125                              <1> unhand2:
  2126                              <1> 	cmp byte [intprob], 3
  2127                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2128                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2129                              <1> 					;CD is the machine instruction for interrupt
  2130                              <1> 					;DEAD shows that the program died because of the int
  2131                              <1> 	mov bl, [intprob]
  2132                              <1> 	jmp exitprog
  2133                              <1> intprob db 0
  2134                              <1> %endif
  2135                                  %include "source/ints.asm"
  2136                              <1> int30h:	;for great justice
  2137 00001BBF 80FC00              <1> 	cmp ah, 0
  2138 00001BC2 0F849A000000        <1> 	je near exitprog   ;kills app
  2139 00001BC8 80FC01              <1> 	cmp ah, 1
  2140 00001BCB 0F8416010000        <1> 	je near prntstr  ;print string
  2141 00001BD1 80FC02              <1> 	cmp ah, 2
  2142 00001BD4 0F84B3010000        <1> 	je near readstr	;read string
  2143 00001BDA 80FC03              <1> 	cmp ah, 3
  2144 00001BDD 0F84D3010000        <1> 	je near clearscrn	;clear screen
  2145 00001BE3 80FC04              <1> 	cmp ah, 4
  2146 00001BE6 0F8442020000        <1> 	je near prntreadstr	;read and print string
  2147 00001BEC 80FC05              <1> 	cmp ah, 5
  2148 00001BEF 0F84EF060000        <1> 	je near readchar	;get char
  2149 00001BF5 80FC06              <1> 	cmp ah, 6
  2150 00001BF8 0F8458070000        <1> 	je near prntchar	;print char
  2151 00001BFE 80FC07              <1> 	cmp ah, 7
  2152 00001C01 0F8459090000        <1> 	je near openfile	;read file
  2153                              <1> ;	cmp ah, 8
  2154                              <1> ;	je near closefile	;close file
  2155 00001C07 80FC09              <1> 	cmp ah, 9
  2156 00001C0A 0F845A090000        <1> 	je near num2str	;convert number to string
  2157 00001C10 80FC0A              <1> 	cmp ah, 10
  2158 00001C13 0F8469090000        <1> 	je near str2num	;convert string to number
  2159                              <1> %ifdef threads.included
  2160 00001C19 80FC0B              <1> 	cmp ah, 11
  2161 00001C1C 0F846C090000        <1> 	je near forkthread	;create thread
  2162                              <1> %endif
  2163 00001C22 80FC0C              <1> 	cmp ah, 12
  2164 00001C25 0F842B0A0000        <1> 	je near gettime	;get time
  2165 00001C2B 80FC0D              <1> 	cmp ah, 13
  2166 00001C2E 0F84370A0000        <1> 	je near settime	;set time
  2167 00001C34 80FC0E              <1> 	cmp ah, 14
  2168 00001C37 0F843E0A0000        <1> 	je near runcmd	;run program
  2169 00001C3D 80FC0F              <1> 	cmp ah, 15
  2170 00001C40 0F844A0A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2171 00001C46 80FC10              <1> 	cmp ah, 16
  2172 00001C49 0F846C0A0000        <1> 	je near hooksig	;hook code to a signal
  2173                              <1> %ifdef gui.included
  2174 00001C4F 80FC11              <1> 	cmp ah, 17
  2175 00001C52 0F84730A0000        <1> 	je near guiint	;GUI operations
  2176                              <1> %endif
  2177                              <1> %ifdef sound.included
  2178 00001C58 80FC12              <1> 	cmp ah, 18
  2179 00001C5B 0F84EE0B0000        <1> 	je near soundint	;sound operations
  2180                              <1> %endif
  2181                              <1> %ifdef network.included
  2182                              <1> 	cmp ah, 19
  2183                              <1> 	je near netint	;networking operations
  2184                              <1> %endif
  2185 00001C61 CF                  <1> 	iret
  2186                              <1> 
  2187                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2188                              <2> exitprog:
  2189 00001C62 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2190 00001C66 8ED8                <2> 	mov ds, ax
  2191 00001C68 8EC0                <2> 	mov es, ax
  2192 00001C6A 8EE0                <2> 	mov fs, ax
  2193 00001C6C 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2194 00001C70 8EE8                <2> 	mov gs, ax
  2195 00001C72 C705[3D670000]0000- <2> 	mov dword [currentthread], 0
  2196 00001C7A 0000                <2>
  2197 00001C7C C705[38670000]0400- <2> 	mov dword [lastthread], 4
  2198 00001C84 0000                <2>
  2199 00001C86 C605[3C670000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2200 00001C8D 8B25[08AE0300]      <2> 	mov esp, [previousstack] ;and this
  2201 00001C93 83FB00              <2> 	cmp ebx, 0
  2202 00001C96 0F8501000000        <2> 	jne near .error
  2203 00001C9C C3                  <2> 	ret
  2204                              <2> .error:
  2205 00001C9D 89D9                <2> 	mov ecx, ebx
  2206 00001C9F B006                <2> 	mov al, 6
  2207 00001CA1 A2[0B310000]        <2> 	mov [firsthexshown], al
  2208 00001CA6 51                  <2> 	push ecx
  2209 00001CA7 BE[C21C0000]        <2> 	mov esi, .msg1
  2210 00001CAC E855000000          <2> 	call printhighlight
  2211 00001CB1 59                  <2> 	pop ecx
  2212 00001CB2 E869140000          <2> 	call showhex
  2213 00001CB7 BE[D71C0000]        <2> 	mov esi, .msg2
  2214 00001CBC E845000000          <2> 	call printhighlight
  2215 00001CC1 C3                  <2> 	ret
  2216                              <2> 	
  2217 00001CC2 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2218 00001CCB 7461747573206F6620- <2>
  2219 00001CD4 307800              <2>
  2220 00001CD7 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2221 00001CE0 726E65642E0A00      <2>
  2222                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2223                              <2> prntstr:
  2224 00001CE7 30E4                <2> xor ah, ah
  2225 00001CE9 E82D000000          <2> call printint
  2226 00001CEE E9ABE5FFFF          <2> jmp timerinterrupt
  2227                              <2> 
  2228                              <2> 	printquiet:
  2229 00001CF3 6631C0              <2> 		xor ax, ax
  2230 00001CF6 66A3[8B1D0000]      <2> 		mov [endkeyprint], ax
  2231 00001CFC 66BB0700            <2> 		mov bx, 7
  2232 00001D00 E82F000000          <2> 		call printint.b
  2233 00001D05 C3                  <2> 		ret
  2234                              <2> 
  2235                              <2> 	printhighlight:
  2236 00001D06 6631C0              <2> 		xor ax, ax
  2237 00001D09 66BBF000            <2> 		mov bx, 0xF0
  2238 00001D0D EB0C                <2> 		jmp printint
  2239                              <2> 
  2240                              <2> 	printline:
  2241 00001D0F BE[EA840000]        <2> 		mov esi, line
  2242                              <2>     print:
  2243 00001D14 6631C0              <2> 		xor ax, ax
  2244 00001D17 66BB0700            <2> 		mov bx, 7
  2245                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2246 00001D1B 56                  <2> 		push esi
  2247 00001D1C 66A3[8B1D0000]      <2> 		mov [endkeyprint], ax
  2248 00001D22 E80D000000          <2> 		call .b
  2249 00001D27 89F1                <2> 		mov ecx, esi
  2250 00001D29 5F                  <2> 		pop edi
  2251 00001D2A 29F9                <2> 		sub ecx, edi
  2252 00001D2C 51                  <2> 		push ecx
  2253 00001D2D E8220B0000          <2> 		call termcopy
  2254 00001D32 59                  <2> 		pop ecx
  2255 00001D33 C3                  <2> 		ret
  2256                              <2> 	.b:	
  2257 00001D34 53                  <2> 		push ebx
  2258 00001D35 31C0                <2> 		xor eax, eax
  2259 00001D37 8A06                <2> 		mov al, [esi]
  2260 00001D39 3CFF                <2> 		cmp al, 0xFF
  2261 00001D3B 7503                <2> 		jne .notnull
  2262 00001D3D 5B                  <2> 		pop ebx
  2263 00001D3E EB47                <2> 		jmp .noprint
  2264                              <2> 	.notnull:
  2265 00001D40 3CC0                <2> 		cmp al, 0xC0
  2266 00001D42 722E                <2> 		jb .doneutf
  2267 00001D44 3CE0                <2> 		cmp al, 0xE0
  2268 00001D46 7217                <2> 		jb .two
  2269 00001D48 46                  <2> 		inc esi
  2270 00001D49 8A2E                <2> 		mov ch, [esi]
  2271 00001D4B 46                  <2> 		inc esi
  2272 00001D4C 8A0E                <2> 		mov cl, [esi]
  2273 00001D4E C0E004              <2> 		shl al, 4
  2274 00001D51 C0E102              <2> 		shl cl, 2
  2275 00001D54 66C1E902            <2> 		shr cx, 2
  2276 00001D58 08C5                <2> 		or ch, al
  2277 00001D5A 6689C8              <2> 		mov ax, cx
  2278 00001D5D EB13                <2> 		jmp .doneutf
  2279                              <2> 	.two:
  2280 00001D5F 8A2E                <2> 		mov ch, [esi]
  2281 00001D61 46                  <2> 		inc esi
  2282 00001D62 8A0E                <2> 		mov cl, [esi]
  2283 00001D64 66C1E102            <2> 		shl cx, 2
  2284 00001D68 C0ED02              <2> 		shr ch, 2
  2285 00001D6B 66C1E902            <2> 		shr cx, 2
  2286 00001D6F 6689C8              <2> 		mov ax, cx
  2287                              <2> 	.doneutf:
  2288 00001D72 5B                  <2> 		pop ebx
  2289 00001D73 663B05[8B1D0000]    <2> 		cmp ax, [endkeyprint]
  2290 00001D7A 740E                <2> 		je .done
  2291 00001D7C 663DFFFE            <2> 		cmp ax, 0xFEFF
  2292 00001D80 7405                <2> 		je .noprint
  2293 00001D82 E8FC050000          <2> 		call prcharq
  2294                              <2> 	.noprint:
  2295 00001D87 46                  <2> 		inc esi
  2296 00001D88 EBAA                <2> 		jmp .b
  2297                              <2> 	.done:
  2298 00001D8A C3                  <2> 		ret
  2299                              <2> 
  2300 00001D8B 0000                <2> endkeyprint dw 0
  2301                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2302                              <2> readstr:
  2303 00001D8D E805000000          <2> call readint
  2304 00001D92 E907E5FFFF          <2> jmp timerinterrupt
  2305                              <2> 
  2306                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2307 00001D97 89C3                <2> 		mov ebx, eax
  2308                              <2> 	.b:
  2309 00001D99 53                  <2> 		push ebx
  2310 00001D9A 57                  <2> 		push edi
  2311 00001D9B 56                  <2> 		push esi
  2312 00001D9C 30C0                <2> 		xor al, al
  2313 00001D9E E84D050000          <2> 		call rdcharint
  2314 00001DA3 5E                  <2> 		pop esi
  2315 00001DA4 8806                <2> 		mov [esi], al
  2316 00001DA6 46                  <2> 		inc esi
  2317 00001DA7 5F                  <2> 		pop edi
  2318 00001DA8 5B                  <2> 		pop ebx
  2319 00001DA9 39FE                <2> 		cmp esi, edi
  2320 00001DAB 7304                <2> 		jae .done
  2321 00001DAD 38D8                <2> 		cmp al, bl
  2322 00001DAF 75E8                <2> 		jne .b
  2323                              <2> 	.done:
  2324 00001DB1 4E                  <2> 		dec esi
  2325 00001DB2 C60600              <2> 		mov byte [esi], 0
  2326 00001DB5 C3                  <2> 		ret
  2327                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2328                              <2> clearscrn:
  2329 00001DB6 E805000000          <2> call clear
  2330 00001DBB E9DEE4FFFF          <2> jmp timerinterrupt
  2331                              <2> %ifdef io.serial
  2332                              <2> clear:
  2333                              <2> 	mov esi, .str
  2334                              <2> 	call print
  2335                              <2> 	ret
  2336                              <2> .str db 27,"[2J",27,"[f",0
  2337                              <2> %else
  2338                              <2> clear:
  2339 00001DC0 668B0D[5A250000]    <2> 		mov cx, [charxy]
  2340 00001DC7 BF[9CDF2B00]        <2> 		mov edi, videobuf
  2341 00001DCC 31C0                <2> 		xor eax, eax
  2342 00001DCE A3[50250000]        <2> 		mov [linebeginpos], eax
  2343 00001DD3 A3[54250000]        <2> 		mov [videobufpos], eax
  2344 00001DD8 6631D2              <2> 		xor dx, dx
  2345 00001DDB 66A3[58250000]      <2> 		mov [charpos], ax
  2346 00001DE1 66B80700            <2> 		mov ax, 7
  2347 00001DE5 C1E010              <2> 		shl eax, 16
  2348                              <2> 	clearb:
  2349 00001DE8 8907                <2> 		mov [edi], eax
  2350 00001DEA 83C704              <2> 		add edi, 4
  2351 00001DED FEC9                <2> 		dec cl
  2352 00001DEF 80F900              <2> 		cmp cl, 0
  2353 00001DF2 75F4                <2> 		jne clearb
  2354 00001DF4 8A0D[5A250000]      <2> 		mov cl, [charxy]
  2355 00001DFA FECD                <2> 		dec ch
  2356 00001DFC 80FD00              <2> 		cmp ch, 0
  2357 00001DFF 75E7                <2> 		jne clearb
  2358                              <2> 	cleardouble:
  2359 00001E01 BF[E4B42C00]        <2> 		mov edi, videobuf2
  2360 00001E06 668B0D[5A250000]    <2> 		mov cx, [charxy]
  2361 00001E0D 31C0                <2> 		xor eax, eax
  2362                              <2> 	clearc:
  2363 00001E0F 8907                <2> 		mov [edi], eax
  2364 00001E11 83C704              <2> 		add edi, 4
  2365 00001E14 FEC9                <2> 		dec cl
  2366 00001E16 80F900              <2> 		cmp cl, 0
  2367 00001E19 75F4                <2> 		jne clearc
  2368 00001E1B 8A0D[5A250000]      <2> 		mov cl, [charxy]
  2369 00001E21 FECD                <2> 		dec ch
  2370 00001E23 80FD00              <2> 		cmp ch, 0
  2371 00001E26 75E7                <2> 		jne clearc
  2372 00001E28 E8270A0000          <2> 		call termcopy
  2373 00001E2D C3                  <2> 		ret
  2374                              <2> %endif
  2375                              <2> 		
  2376                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2377                              <2> prntreadstr:
  2378 00001E2E E80B000000          <2> call rdprint
  2379 00001E33 E966E4FFFF          <2> jmp timerinterrupt
  2380                              <2> 
  2381                              <2> readline:
  2382 00001E38 B00A                <2>   mov al, 10
  2383 00001E3A 66BB0700            <2>   mov bx, 7
  2384                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2385 00001E3E E80F000000          <2> 	call rdprintdos
  2386 00001E43 50                  <2> 	push eax
  2387 00001E44 A0[CF220000]        <2> 	mov al, [endkeyrdpr]
  2388 00001E49 30E4                <2> 	xor ah, ah
  2389 00001E4B E81C050000          <2> 	call prcharint
  2390 00001E50 58                  <2> 	pop eax
  2391 00001E51 C3                  <2> 	ret
  2392                              <2> 
  2393                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2394 00001E52 8935[D9220000]      <2> 		mov [buftxtloc], esi
  2395 00001E58 A2[CF220000]        <2> 		mov [endkeyrdpr], al
  2396 00001E5D 66891D[D1220000]    <2> 		mov [modkeyrdpr], bx
  2397 00001E64 8935[D3220000]      <2> 		mov [firstesirdpr], esi
  2398 00001E6A 893D[DD220000]      <2> 		mov [endbufferrdpr], edi
  2399 00001E70 8B3D[388A2D00]      <2> 		mov edi, [commandsentered]
  2400 00001E76 893D[348A2D00]      <2> 		mov [commandlistentries], edi
  2401                              <2> 	rdprintb:
  2402 00001E7C 56                  <2> 		push esi
  2403 00001E7D B001                <2> 		mov al, 1
  2404 00001E7F E86C040000          <2> 		call rdcharint
  2405 00001E84 8A25[52230000]      <2> 		mov ah, [lastkey + 2]
  2406 00001E8A 88E1                <2> 		mov cl, ah
  2407 00001E8C 5E                  <2> 		pop esi
  2408                              <2> %ifdef io.serial
  2409                              <2> 		cmp ah, 0x41
  2410                              <2> 		je near rdprup
  2411                              <2> 		cmp ah, 0x42
  2412                              <2> 		je near rdprdown
  2413                              <2> 		cmp ah, 0x43
  2414                              <2> 		je near rdprright
  2415                              <2> 		cmp ah, 0x44
  2416                              <2> 		je near rdprleft
  2417                              <2> 		cmp ah, 0x31
  2418                              <2> 		je near rdprhome
  2419                              <2> 		cmp ah, 0x48
  2420                              <2> 		je near rdprhome
  2421                              <2> 		cmp ah, 0x46
  2422                              <2> 		je near rdprend
  2423                              <2> 		cmp ah, 0x33
  2424                              <2> 		je near rdprdel
  2425                              <2> 		cmp ah, 0x34
  2426                              <2> 		je near rdprend
  2427                              <2> %else
  2428 00001E8D 803D[F65B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2429 00001E94 753F                <2> 		jne notspecialrdprnt
  2430 00001E96 80FC53              <2> 		cmp ah, 0x53
  2431 00001E99 0F849C030000        <2> 		je near rdprdel
  2432 00001E9F 80FC47              <2> 		cmp ah, 0x47
  2433 00001EA2 0F8475010000        <2> 		je near rdprhome
  2434 00001EA8 80FC4F              <2> 		cmp ah, 0x4F
  2435 00001EAB 0F848B010000        <2> 		je near rdprend
  2436 00001EB1 80FC50              <2> 		cmp ah, 0x50
  2437 00001EB4 0F841B020000        <2> 		je near rdprdown
  2438 00001EBA 80FC4D              <2> 		cmp ah, 0x4D
  2439 00001EBD 0F84B8010000        <2> 		je near rdprright
  2440 00001EC3 80FC4B              <2> 		cmp ah, 0x4B
  2441 00001EC6 0F848D010000        <2> 		je near rdprleft
  2442 00001ECC 80FC48              <2> 		cmp ah, 0x48
  2443 00001ECF 0F8440020000        <2> 		je near rdprup
  2444                              <2> 	notspecialrdprnt:
  2445                              <2> %endif
  2446 00001ED5 66A1[50230000]      <2> 		mov ax, [lastkey]
  2447 00001EDB 6683F808            <2> 		cmp ax, 8
  2448 00001EDF 0F848B030000        <2> 		je near rdprbscheck
  2449 00001EE5 6683F800            <2> 		cmp ax, 0
  2450 00001EE9 7491                <2> 		je rdprintb
  2451 00001EEB 80F900              <2> 		cmp cl, 0
  2452 00001EEE 748C                <2> 		je rdprintb
  2453 00001EF0 663D8000            <2> 		cmp ax, 0x80
  2454 00001EF4 7251                <2> 		jb .normal
  2455 00001EF6 663D0008            <2> 		cmp ax, 0x800
  2456 00001EFA 731E                <2> 		jae .three
  2457 00001EFC 46                  <2> 		inc esi
  2458 00001EFD 3B35[DD220000]      <2> 		cmp esi, [endbufferrdpr]
  2459 00001F03 0F83D1000000        <2> 		jae near donerdprinc
  2460 00001F09 66C1E002            <2> 		shl ax, 2
  2461 00001F0D C0E802              <2> 		shr al, 2
  2462 00001F10 0C80                <2> 		or al, 10000000b
  2463 00001F12 80CCC0              <2> 		or ah, 11000000b
  2464 00001F15 8866FF              <2> 		mov [esi - 1], ah
  2465 00001F18 EB2D                <2> 		jmp .normal
  2466                              <2> .three:	
  2467 00001F1A 83C602              <2> 		add esi, 2
  2468 00001F1D 3B35[DD220000]      <2> 		cmp esi, [endbufferrdpr]
  2469 00001F23 0F83B1000000        <2> 		jae near donerdprinc
  2470 00001F29 88E1                <2> 		mov cl, ah
  2471 00001F2B C0E904              <2> 		shr cl, 4
  2472 00001F2E 80C9E0              <2> 		or cl, 11100000b
  2473 00001F31 884EFE              <2> 		mov [esi - 2], cl
  2474 00001F34 66C1E004            <2> 		shl ax, 4
  2475 00001F38 66C1E802            <2> 		shr ax, 2
  2476 00001F3C 80CC80              <2> 		or ah, 10000000b
  2477 00001F3F C0E802              <2> 		shr al, 2
  2478 00001F42 0C80                <2> 		or al, 10000000b
  2479 00001F44 8866FF              <2> 		mov [esi - 1], ah
  2480                              <2> .normal:
  2481 00001F47 8806                <2> 		mov [esi], al
  2482 00001F49 46                  <2> 		inc esi
  2483 00001F4A 66A1[50230000]      <2> 		mov ax, [lastkey]
  2484                              <2> 	bscheckequal:
  2485 00001F50 668B1D[D1220000]    <2> 		mov bx, [modkeyrdpr]
  2486 00001F57 803D[D8220000]00    <2> 		cmp byte [txtmask], 0
  2487 00001F5E 7407                <2> 		je nomasktxt
  2488 00001F60 30E4                <2> 		xor ah, ah
  2489 00001F62 A0[D8220000]        <2> 		mov al, [txtmask]
  2490                              <2> 	nomasktxt:
  2491 00001F67 56                  <2> 		push esi
  2492 00001F68 66A3[CD220000]      <2> 		mov [axcache], ax
  2493 00001F6E 668B1D[CF220000]    <2> 		mov bx, [endkeyrdpr]
  2494 00001F75 6639D8              <2> 		cmp ax, bx
  2495 00001F78 7432                <2> 		je nobackprintbuftxt2
  2496 00001F7A E8ED030000          <2> 		call prcharint
  2497 00001F7F BE[88C00300]        <2> 		mov esi, buftxt2
  2498 00001F84 E86AFDFFFF          <2> 		call printquiet
  2499 00001F89 66B82000            <2> 		mov ax, " "
  2500 00001F8D E8F1030000          <2> 		call prcharq
  2501 00001F92 66B80800            <2> 		mov ax, 8
  2502 00001F96 81FE[88C00300]      <2> 		cmp esi, buftxt2
  2503 00001F9C 740E                <2> 		je nobackprintbuftxt2
  2504                              <2> 	backprintbuftxt2:
  2505 00001F9E E8E0030000          <2> 		call prcharq
  2506 00001FA3 4E                  <2> 		dec esi
  2507 00001FA4 81FE[88C00300]      <2> 		cmp esi, buftxt2
  2508 00001FAA 77F2                <2> 		ja backprintbuftxt2
  2509                              <2> 	nobackprintbuftxt2:
  2510 00001FAC 6683F80A            <2> 		cmp ax, 10
  2511 00001FB0 7405                <2> 		je nonobackprint
  2512 00001FB2 E8B5030000          <2> 		call prcharint
  2513                              <2> 	nonobackprint:
  2514 00001FB7 5E                  <2> 		pop esi
  2515 00001FB8 3B35[DD220000]      <2> 		cmp esi, [endbufferrdpr]
  2516 00001FBE 0F8316000000        <2> 		jae near donerdprinc
  2517 00001FC4 66A1[CD220000]      <2> 		mov ax, [axcache]
  2518 00001FCA 8A25[CF220000]      <2> 		mov ah, [endkeyrdpr]
  2519 00001FD0 38E0                <2> 		cmp al, ah
  2520 00001FD2 0F85A4FEFFFF        <2> 		jne rdprintb
  2521 00001FD8 EB01                <2> 		jmp donerdprint
  2522                              <2> 	donerdprinc:
  2523 00001FDA 46                  <2> 		inc esi
  2524                              <2> 	donerdprint:
  2525 00001FDB 4E                  <2> 		dec esi
  2526 00001FDC BF[88C00300]        <2> 		mov edi, buftxt2
  2527                              <2> 	copylaterstuff:
  2528 00001FE1 8A07                <2> 		mov al, [edi]
  2529 00001FE3 3C00                <2> 		cmp al, 0
  2530 00001FE5 7406                <2> 		je nocopylaterstuff
  2531 00001FE7 8806                <2> 		mov [esi], al
  2532 00001FE9 47                  <2> 		inc edi
  2533 00001FEA 46                  <2> 		inc esi
  2534 00001FEB EBF4                <2> 		jmp copylaterstuff
  2535                              <2> 	nocopylaterstuff:
  2536 00001FED C60600              <2> 		mov byte [esi], 0
  2537 00001FF0 E80B000000          <2> 		call clearbuftxt2
  2538 00001FF5 89F1                <2> 		mov ecx, esi
  2539 00001FF7 8B3D[D3220000]      <2> 		mov edi, [firstesirdpr]
  2540 00001FFD 29F9                <2> 		sub ecx, edi
  2541 00001FFF C3                  <2> 		ret
  2542                              <2> 	
  2543                              <2> 	clearbuftxt2:
  2544 00002000 30C0                <2> 		xor al, al
  2545 00002002 BF[88C00300]        <2> 		mov edi, buftxt2
  2546                              <2> 	clearbuftxt2lp:
  2547 00002007 8807                <2> 		mov [edi], al
  2548 00002009 47                  <2> 		inc edi
  2549 0000200A 81FF[88C40300]      <2> 		cmp edi, buftxt
  2550 00002010 75F5                <2> 		jne clearbuftxt2lp
  2551 00002012 C3                  <2> 		ret
  2552                              <2> 	
  2553                              <2> 	rdprintb2:
  2554 00002013 E83C080000          <2> 		call termcopy
  2555 00002018 E95FFEFFFF          <2> 		jmp rdprintb
  2556                              <2> 	
  2557                              <2> 	rdprhome:
  2558 0000201D 3B35[D9220000]      <2> 		cmp esi, [buftxtloc]
  2559 00002023 0F84EAFFFFFF        <2> 		je near rdprintb2
  2560 00002029 BF[88C00300]        <2> 		mov edi, buftxt2
  2561 0000202E 8A07                <2> 		mov al, [edi]
  2562 00002030 E86A020000          <2> 		call shiftbuftxt2
  2563 00002035 E849030000          <2> 		call prcharq
  2564 0000203A EBE1                <2> 		jmp rdprhome
  2565                              <2> 		
  2566                              <2> 	rdprend:
  2567 0000203C BF[88C00300]        <2> 		mov edi, buftxt2
  2568 00002041 8A07                <2> 		mov al, [edi]
  2569 00002043 3C00                <2> 		cmp al, 0
  2570 00002045 0F84C8FFFFFF        <2> 		je near rdprintb2
  2571 0000204B 8806                <2> 		mov [esi], al
  2572 0000204D E849000000          <2> 		call shiftbuftxt2lft
  2573 00002052 E82C030000          <2> 		call prcharq
  2574 00002057 EBE3                <2> 		jmp rdprend
  2575                              <2> 	
  2576                              <2> 	rdprleft:
  2577 00002059 3B35[D9220000]      <2> 		cmp esi, [buftxtloc]
  2578 0000205F 0F8417FEFFFF        <2> 		je near rdprintb
  2579 00002065 BF[88C00300]        <2> 		mov edi, buftxt2
  2580 0000206A 8A07                <2> 		mov al, [edi]
  2581 0000206C E82E020000          <2> 		call shiftbuftxt2
  2582 00002071 E8F6020000          <2> 		call prcharint
  2583 00002076 E901FEFFFF          <2> 		jmp rdprintb
  2584                              <2> 		
  2585                              <2> 	rdprright:
  2586 0000207B BF[88C00300]        <2> 		mov edi, buftxt2
  2587 00002080 8A07                <2> 		mov al, [edi]
  2588 00002082 3C00                <2> 		cmp al, 0
  2589 00002084 0F84F2FDFFFF        <2> 		je near rdprintb
  2590 0000208A 8806                <2> 		mov [esi], al
  2591 0000208C E80A000000          <2> 		call shiftbuftxt2lft
  2592 00002091 E8D6020000          <2> 		call prcharint
  2593 00002096 E9E1FDFFFF          <2> 		jmp rdprintb
  2594                              <2> 		
  2595                              <2> 	shiftbuftxt2lft:
  2596 0000209B 55                  <2> 		push ebp
  2597 0000209C 89FD                <2> 		mov ebp, edi
  2598                              <2> 	.lp:
  2599 0000209E 3C00                <2> 		cmp al, 0
  2600 000020A0 7408                <2> 		je noshiftbuftxt2lft
  2601 000020A2 47                  <2> 		inc edi
  2602 000020A3 8A07                <2> 		mov al, [edi]
  2603 000020A5 8847FF              <2> 		mov [edi - 1], al
  2604 000020A8 EBF4                <2> 		jmp .lp
  2605                              <2> 	noshiftbuftxt2lft:
  2606 000020AA 8A4500              <2> 		mov al, [ebp]
  2607 000020AD 5D                  <2> 		pop ebp
  2608 000020AE 3CC0                <2> 		cmp al, 0xC0
  2609 000020B0 7304                <2> 		jae .nofix
  2610 000020B2 3C80                <2> 		cmp al, 0x80
  2611 000020B4 73E5                <2> 		jae shiftbuftxt2lft
  2612                              <2> 	.nofix:
  2613 000020B6 8A06                <2> 		mov al, [esi]
  2614 000020B8 30E4                <2> 		xor ah, ah
  2615 000020BA 46                  <2> 		inc esi
  2616 000020BB 668B1D[D1220000]    <2> 		mov bx, [modkeyrdpr]
  2617 000020C2 C3                  <2> 		ret
  2618                              <2> 		
  2619                              <2> 	rdprdownbck:
  2620 000020C3 FECC                <2> 		dec ah
  2621 000020C5 8825[D7220000]      <2> 		mov [commandedit], ah
  2622 000020CB E884000000          <2> 		call rdprbckspc
  2623 000020D0 E9A7FDFFFF          <2> 		jmp rdprintb
  2624                              <2> 	
  2625                              <2> 	rdprdown:
  2626 000020D5 8A25[D7220000]      <2> 		mov ah, [commandedit]
  2627 000020DB 80FC01              <2> 		cmp ah, 1
  2628 000020DE 0F8698FDFFFF        <2> 		jbe near rdprintb
  2629 000020E4 8B3D[388A2D00]      <2> 		mov edi, [commandsentered]
  2630 000020EA 3B3D[348A2D00]      <2> 		cmp edi, [commandlistentries]
  2631 000020F0 7615                <2> 		jbe .nofix
  2632 000020F2 8305[348A2D00]02    <2> 		add dword [commandlistentries], 2
  2633 000020F9 3B3D[348A2D00]      <2> 		cmp edi, [commandlistentries]
  2634 000020FF 7706                <2> 		ja .nofix
  2635 00002101 893D[348A2D00]      <2> 		mov [commandlistentries], edi
  2636                              <2> 	.nofix:
  2637 00002107 80FC02              <2> 		cmp ah, 2
  2638 0000210A 74B7                <2> 		je rdprdownbck
  2639 0000210C 80EC02              <2> 		sub ah, 2
  2640 0000210F 8825[D7220000]      <2> 		mov [commandedit], ah
  2641                              <2> 		
  2642                              <2> 	rdprup:
  2643 00002115 3805[D7220000]      <2> 		cmp [commandedit], al
  2644 0000211B 0F845BFDFFFF        <2> 		je near rdprintb
  2645 00002121 833D[348A2D00]00    <2> 		cmp dword [commandlistentries], 0
  2646 00002128 0F844EFDFFFF        <2> 		je near rdprintb
  2647 0000212E FF0D[348A2D00]      <2> 		dec dword [commandlistentries]
  2648                              <2> 	.lp:
  2649 00002134 BF[88C00300]        <2> 		mov edi, buftxt2
  2650 00002139 8A07                <2> 		mov al, [edi]
  2651 0000213B 3C00                <2> 		cmp al, 0
  2652 0000213D 740E                <2> 		je .start
  2653 0000213F 8806                <2> 		mov [esi], al
  2654 00002141 E855FFFFFF          <2> 		call shiftbuftxt2lft
  2655 00002146 E838020000          <2> 		call prcharq
  2656 0000214B EBE7                <2> 		jmp .lp
  2657                              <2> 	.start:
  2658 0000214D E802000000          <2> 		call rdprbckspc
  2659 00002152 EB48                <2> 		jmp getcurrentcommandstr
  2660                              <2> 	rdprbckspc:
  2661 00002154 3B35[D9220000]      <2> 		cmp esi, [buftxtloc]
  2662 0000215A 7432                <2> 		je nordprupbck
  2663                              <2> 	rdprupbckspclp:
  2664 0000215C 66B80800            <2> 		mov ax, 8
  2665 00002160 668B1D[D1220000]    <2> 		mov bx, [modkeyrdpr]
  2666 00002167 E817020000          <2> 		call prcharq
  2667 0000216C 66B82000            <2> 		mov ax, ' '
  2668 00002170 E80E020000          <2> 		call prcharq
  2669 00002175 66B80800            <2> 		mov ax, 8
  2670 00002179 E805020000          <2> 		call prcharq
  2671 0000217E 4E                  <2> 		dec esi
  2672 0000217F 3B35[D9220000]      <2> 		cmp esi, [buftxtloc]
  2673 00002185 7402                <2> 		je nordprupbck2
  2674 00002187 EBD3                <2> 		jmp rdprupbckspclp
  2675                              <2> 	nordprupbck2:
  2676 00002189 E8C6060000          <2> 		call termcopy
  2677                              <2> 	nordprupbck:
  2678 0000218E 8B3D[308A2D00]      <2> 		mov edi, [commandbufpos]
  2679 00002194 81C7[3C8A2D00]      <2> 		add edi, commandbuf
  2680 0000219A 4F                  <2> 		dec edi
  2681 0000219B C3                  <2> 		ret
  2682                              <2> 	getcurrentcommandstr:
  2683 0000219C 8A25[D7220000]      <2> 		mov ah, [commandedit]
  2684 000021A2 FE05[D7220000]      <2> 		inc byte [commandedit]
  2685                              <2> 	getccmdlp:
  2686 000021A8 4F                  <2> 		dec edi
  2687 000021A9 8A07                <2> 		mov al, [edi]
  2688 000021AB 81FF[3C8A2D00]      <2> 		cmp edi, commandbuf
  2689 000021B1 722E                <2> 		jb getcmdresetcommandbuf
  2690 000021B3 81EF[3C8A2D00]      <2> 		sub edi, commandbuf
  2691 000021B9 3B3D[308A2D00]      <2> 		cmp edi, [commandbufpos]
  2692 000021BF 0F84B7FCFFFF        <2> 		je near rdprintb
  2693 000021C5 81C7[3C8A2D00]      <2> 		add edi, commandbuf
  2694 000021CB 3C00                <2> 		cmp al, 0
  2695 000021CD 75D9                <2> 		jne getccmdlp
  2696 000021CF FECC                <2> 		dec ah
  2697 000021D1 80FC00              <2> 		cmp ah, 0
  2698 000021D4 77D2                <2> 		ja getccmdlp
  2699 000021D6 47                  <2> 		inc edi
  2700 000021D7 81FF[3C9A2D00]      <2> 		cmp edi, commandbufend
  2701 000021DD 770A                <2> 		ja fixcmdbufb4morerdpr
  2702 000021DF EB15                <2> 		jmp morerdprup
  2703                              <2> 	getcmdresetcommandbuf:
  2704 000021E1 BF[3C9A2D00]        <2> 		mov edi, commandbufend
  2705 000021E6 47                  <2> 		inc edi
  2706 000021E7 EBBF                <2> 		jmp getccmdlp
  2707                              <2> 	fixcmdbufb4morerdpr:
  2708 000021E9 4F                  <2> 		dec edi
  2709 000021EA 81EF[3C9A2D00]      <2> 		sub edi, commandbufend
  2710 000021F0 81C7[3C8A2D00]      <2> 		add edi, commandbuf
  2711                              <2> 	morerdprup:
  2712 000021F6 8A07                <2> 		mov al, [edi]
  2713 000021F8 47                  <2> 		inc edi
  2714 000021F9 81EF[3C8A2D00]      <2> 		sub edi, commandbuf
  2715 000021FF 3C00                <2> 		cmp al, 0
  2716 00002201 0F840CFEFFFF        <2> 		je near rdprintb2
  2717 00002207 3B3D[308A2D00]      <2> 		cmp edi, [commandbufpos]
  2718 0000220D 0F8300FEFFFF        <2> 		jae near rdprintb2
  2719 00002213 81C7[3C8A2D00]      <2> 		add edi, commandbuf
  2720 00002219 8806                <2> 		mov [esi], al
  2721 0000221B 46                  <2> 		inc esi
  2722 0000221C 57                  <2> 		push edi
  2723 0000221D 668B1D[D1220000]    <2> 		mov bx, [modkeyrdpr]
  2724 00002224 30E4                <2> 		xor ah, ah
  2725 00002226 E858010000          <2> 		call prcharq
  2726 0000222B 5F                  <2> 		pop edi
  2727 0000222C 81FF[3C9A2D00]      <2> 		cmp edi, commandbufend
  2728 00002232 76C2                <2> 		jbe morerdprup
  2729 00002234 BF[3C8A2D00]        <2> 		mov edi, commandbuf
  2730 00002239 EBBB                <2> 		jmp morerdprup
  2731                              <2> 
  2732                              <2> 	rdprdel:
  2733 0000223B BF[88C00300]        <2> 		mov edi, buftxt2
  2734 00002240 8A07                <2> 		mov al, [edi]
  2735 00002242 3C00                <2> 		cmp al, 0
  2736 00002244 0F8432FCFFFF        <2> 		je near rdprintb
  2737 0000224A 8806                <2> 		mov [esi], al
  2738 0000224C 3C80                <2> 		cmp al, 0x80
  2739 0000224E 7216                <2> 		jb .fn
  2740                              <2> 	.lp:
  2741 00002250 46                  <2> 		inc esi
  2742 00002251 47                  <2> 		inc edi
  2743 00002252 8A07                <2> 		mov al, [edi]
  2744 00002254 3C00                <2> 		cmp al, 0
  2745 00002256 0F8420FCFFFF        <2> 		je near rdprintb
  2746 0000225C 8806                <2> 		mov [esi], al
  2747 0000225E 3C80                <2> 		cmp al, 0x80
  2748 00002260 7204                <2> 		jb .fn
  2749 00002262 3CC0                <2> 		cmp al, 0xC0
  2750 00002264 72EA                <2> 		jb .lp
  2751                              <2> 	.fn:
  2752 00002266 E830FEFFFF          <2> 		call shiftbuftxt2lft
  2753 0000226B E813010000          <2> 		call prcharq
  2754                              <2> 		
  2755                              <2> 	rdprbscheck:
  2756 00002270 3B35[D3220000]      <2> 		cmp esi, [firstesirdpr]
  2757 00002276 0F8600FCFFFF        <2> 		jbe near rdprintb
  2758                              <2> 	goodbscheck:
  2759 0000227C 4E                  <2> 		dec esi
  2760 0000227D 8A46FF              <2> 		mov al, [esi - 1]
  2761 00002280 C60600              <2> 		mov byte [esi], 0
  2762 00002283 3CC0                <2> 		cmp al, 0xC0
  2763 00002285 7306                <2> 		jae .onemore
  2764 00002287 3C80                <2> 		cmp al, 0x80
  2765 00002289 73F1                <2> 		jae goodbscheck
  2766 0000228B EB04                <2> 		jmp .nomore
  2767                              <2> 	.onemore:
  2768 0000228D 4E                  <2> 		dec esi
  2769 0000228E C60600              <2> 		mov byte [esi], 0		
  2770                              <2> 	.nomore:
  2771 00002291 668B1D[D1220000]    <2> 		mov bx, [modkeyrdpr]
  2772 00002298 B008                <2> 		mov al, 8
  2773 0000229A E9B1FCFFFF          <2> 		jmp bscheckequal
  2774                              <2> 		
  2775                              <2> 	shiftbuftxt2:
  2776 0000229F 55                  <2> 		push ebp
  2777 000022A0 89FD                <2> 		mov ebp, edi
  2778                              <2> 	.lp:
  2779 000022A2 3C00                <2> 		cmp al, 0
  2780 000022A4 7409                <2> 		je noshiftbuftxt2
  2781 000022A6 47                  <2> 		inc edi
  2782 000022A7 8A27                <2> 		mov ah, [edi]
  2783 000022A9 8807                <2> 		mov [edi], al
  2784 000022AB 88E0                <2> 		mov al, ah
  2785 000022AD EBF3                <2> 		jmp .lp
  2786                              <2> 	noshiftbuftxt2:
  2787 000022AF 8A4500              <2> 		mov al, [ebp]
  2788 000022B2 5D                  <2> 		pop ebp
  2789 000022B3 3CC0                <2> 		cmp al, 0xC0
  2790 000022B5 7304                <2> 		jae .nofix
  2791 000022B7 3C80                <2> 		cmp al, 0x80
  2792 000022B9 73E4                <2> 		jae shiftbuftxt2
  2793                              <2> 	.nofix:
  2794 000022BB BF[88C00300]        <2> 		mov edi, buftxt2
  2795 000022C0 4E                  <2> 		dec esi
  2796 000022C1 8A06                <2> 		mov al, [esi]
  2797 000022C3 8807                <2> 		mov [edi], al
  2798 000022C5 C60600              <2> 		mov byte [esi], 0
  2799 000022C8 66B80800            <2> 		mov ax, 8
  2800 000022CC C3                  <2> 		ret
  2801                              <2> 		
  2802 000022CD 0000                <2> axcache dw 0
  2803 000022CF 0000                <2> endkeyrdpr dw 0
  2804 000022D1 0000                <2> modkeyrdpr dw 0
  2805 000022D3 00000000            <2> firstesirdpr dd 0
  2806 000022D7 00                  <2> commandedit db 0
  2807 000022D8 00                  <2> txtmask db 0
  2808 000022D9 00000000            <2> buftxtloc dd 0
  2809 000022DD 00000000            <2> endbufferrdpr dd 0
  2810 000022E1 082000              <2> backcursor db 8," ",0
  2811                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2812                              <2> readchar:
  2813 000022E4 E807000000          <2> 	call rdcharint
  2814 000022E9 E9B0DFFFFF          <2> 	jmp timerinterrupt
  2815                              <2> getchar:
  2816 000022EE 30C0                <2> 	xor al, al
  2817                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2818 000022F0 66C705[54230000]01- <2> 		mov word [trans], 1
  2819 000022F8 00                  <2>
  2820 000022F9 3C00                <2> 		cmp al, 0
  2821 000022FB 7509                <2> 		jne transcheck
  2822 000022FD 66C705[54230000]00- <2> 		mov word [trans], 0
  2823 00002305 00                  <2>
  2824                              <2> 	transcheck:
  2825                              <2> 	%ifdef io.serial
  2826                              <2> 		call serial.receive
  2827                              <2> 		xor ah, ah
  2828                              <2> 		cmp al, 13
  2829                              <2> 		je rdenter
  2830                              <2> 	%else
  2831 00002306 E80E390000          <2> 		call getkey
  2832 0000230B 66A1[52230000]      <2> 		mov ax, [lastkey + 2]
  2833 00002311 6683F801            <2> 		cmp ax, 1
  2834 00002315 7433                <2> 		je rdend ;return if ESC
  2835 00002317 6683F81C            <2> 		cmp ax, 0x1C
  2836 0000231B 7421                <2> 		je rdenter
  2837                              <2> 	%endif
  2838 0000231D 66A1[50230000]      <2> 		mov ax, [lastkey]
  2839 00002323 668B1D[54230000]    <2> 		mov bx, [trans]
  2840 0000232A 803D[F65B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2841 00002331 7500                <2> 		jne nospecialtrans
  2842                              <2> 	nospecialtrans:
  2843 00002333 6609C3              <2> 		or bx, ax
  2844 00002336 6683FB00            <2> 		cmp bx, 0
  2845 0000233A 74CA                <2> 		je transcheck
  2846 0000233C EB0C                <2> 		jmp rdend
  2847                              <2> 	rdenter:
  2848 0000233E C1E010              <2> 		shl eax, 16
  2849 00002341 66B80A00            <2> 		mov ax, 10
  2850 00002345 A3[50230000]        <2> 		mov [lastkey], eax
  2851                              <2> 	rdend:
  2852 0000234A A1[50230000]        <2> 		mov eax, [lastkey]
  2853 0000234F C3                  <2> 		ret
  2854                              <2> 		
  2855 00002350 00000000            <2> lastkey dd 0
  2856 00002354 0000                <2> trans dw 0
  2857                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2858                              <2> prntchar:
  2859 00002356 30E4                <2> 	xor ah, ah ;this kills unicode from the outside unfortunately
  2860                              <2> %ifdef io.serial
  2861                              <2> 	call prcharint
  2862                              <2> 	jmp timerinterrupt
  2863                              <2> prcharint:	
  2864                              <2> prcharq:
  2865                              <2> 	call serial.send
  2866                              <2> 	ret
  2867                              <2> %else
  2868 00002358 38FB                <2> cmp bl, bh
  2869 0000235A 740A                <2> je prchar.notimer
  2870 0000235C E80B000000          <2> call prcharint
  2871 00002361 E938DFFFFF          <2> jmp timerinterrupt
  2872                              <2> prchar.notimer:
  2873 00002366 E818000000          <2> 	call prcharq
  2874 0000236B CF                  <2> 	iret
  2875                              <2> 	
  2876                              <2> prcharint:	;print char, char in ax, modifier in bx, if ecx is eax then termcopy will not happen, will run termcopy if called as is
  2877 0000236C 663DFFFE            <2> 	cmp ax, 0xFEFF
  2878 00002370 740E                <2> 	je .ret
  2879 00002372 39C1                <2> 	cmp ecx, eax
  2880 00002374 740D                <2> 	je prcharq
  2881 00002376 E808000000          <2> 	call prcharq
  2882 0000237B E8D4040000          <2> 	call termcopy
  2883                              <2> .ret:
  2884 00002380 C3                  <2> 	ret
  2885 00002381 00                  <2> termguion db 0
  2886 00002382 00                  <2> termcopyon db 0
  2887                              <2> prcharq:
  2888 00002383 C1E310              <2> 	shl ebx, 16
  2889 00002386 6689C3              <2> 	mov bx, ax
  2890 00002389 89D8                <2> 	mov eax, ebx
  2891 0000238B A3[5C250000]        <2> 	mov [charbuf], eax
  2892 00002390 8B1D[54250000]      <2> 	mov ebx, [videobufpos]
  2893 00002396 BF[9CDF2B00]        <2> 	mov edi, videobuf
  2894 0000239B 01DF                <2> 	add edi, ebx
  2895 0000239D A1[61280000]        <2> 	mov eax, [removedvideo]
  2896 000023A2 8907                <2> 	mov [edi], eax
  2897 000023A4 A1[5C250000]        <2> 	mov eax, [charbuf]
  2898 000023A9 31D2                <2> 	xor edx, edx
  2899 000023AB 668B15[58250000]    <2> 	mov dx, [charpos]
  2900 000023B2 31C9                <2> 	xor ecx, ecx
  2901 000023B4 668B0D[5A250000]    <2> 	mov cx, [charxy]
  2902 000023BB 6683F809            <2> 	cmp ax, 9
  2903 000023BF 0F846C000000        <2> 	je near prtab
  2904 000023C5 6683F80D            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2905 000023C9 0F848C000000        <2> 	je near prcr
  2906 000023CF 6683F80A            <2> 	cmp ax, 10
  2907 000023D3 0F84D2000000        <2> 	je near prnlcr
  2908 000023D9 6683F808            <2> 	cmp ax, 8
  2909 000023DD 0F8489000000        <2> 	je near prbs
  2910 000023E3 663D0030            <2> 	cmp ax, (fontend - fonts)/16
  2911 000023E7 0F833E000000        <2> 	jae near prnofont
  2912                              <2> donepr:
  2913 000023ED 8907                <2> 	mov [edi], eax
  2914 000023EF 83C704              <2> 	add edi, 4
  2915 000023F2 FEC2                <2> 	inc dl
  2916                              <2> donecrnl:
  2917 000023F4 38CA                <2> 	cmp dl, cl
  2918 000023F6 0F83D3000000        <2> 	jae near preol
  2919                              <2> doneeol:
  2920 000023FC 38EE                <2> 	cmp dh, ch
  2921 000023FE 0F83E8000000        <2> 	jae near prscr	
  2922                              <2> donescr:
  2923 00002404 89FB                <2> 	mov ebx, edi
  2924 00002406 8B07                <2> 	mov eax, [edi]
  2925 00002408 A3[61280000]        <2> 	mov [removedvideo], eax
  2926 0000240D 81EB[9CDF2B00]      <2> 	sub ebx, videobuf
  2927 00002413 891D[54250000]      <2> 	mov [videobufpos], ebx
  2928 00002419 668915[58250000]    <2> 	mov [charpos], dx
  2929 00002420 A1[5C250000]        <2> 	mov eax, [charbuf]
  2930 00002425 89C3                <2> 	mov ebx, eax
  2931 00002427 C1EB10              <2> 	shr ebx, 16
  2932 0000242A C3                  <2> 	ret
  2933                              <2> 	
  2934                              <2> 	prnofont:
  2935 0000242B 66B80200            <2> 		mov ax, 2
  2936 0000242F EBBC                <2> 		jmp donepr
  2937                              <2> 	prtab:
  2938 00002431 8B1D[50250000]      <2> 		mov ebx, [linebeginpos]
  2939 00002437 81EF[9CDF2B00]      <2> 		sub edi, videobuf
  2940 0000243D 29DF                <2> 		sub edi, ebx
  2941 0000243F C1EF05              <2> 		shr edi, 5
  2942 00002442 C1E705              <2> 		shl edi, 5
  2943 00002445 83C720              <2> 		add edi, 32
  2944 00002448 C0EA03              <2> 		shr dl, 3
  2945 0000244B C0E203              <2> 		shl dl, 3
  2946 0000244E 80C208              <2> 		add dl, 8
  2947 00002451 81C7[9CDF2B00]      <2> 		add edi, videobuf
  2948 00002457 01DF                <2> 		add edi, ebx
  2949 00002459 EB99                <2> 		jmp donecrnl
  2950                              <2> 	
  2951                              <2> 	prcr:
  2952 0000245B 30D2                <2> 		xor dl, dl
  2953 0000245D BF[9CDF2B00]        <2> 		mov edi, videobuf
  2954 00002462 8B1D[50250000]      <2> 		mov ebx, [linebeginpos]
  2955 00002468 01DF                <2> 		add edi, ebx
  2956 0000246A EB88                <2> 		jmp donecrnl
  2957                              <2> 			
  2958                              <2> 	prbs:
  2959 0000246C 8B1D[50250000]      <2> 		mov ebx, [linebeginpos]
  2960 00002472 80FA00              <2> 		cmp dl, 0
  2961 00002475 7412                <2> 		je prbackline
  2962                              <2> 	prnobmr:
  2963 00002477 891D[50250000]      <2> 		mov [linebeginpos], ebx
  2964 0000247D FECA                <2> 		dec dl
  2965 0000247F 31C0                <2> 		xor eax, eax
  2966 00002481 83EF04              <2> 		sub edi, 4
  2967 00002484 E96BFFFFFF          <2> 		jmp donecrnl
  2968                              <2> 	prbackline:
  2969 00002489 6631DB              <2> 		xor bx, bx
  2970 0000248C 88CA                <2> 		mov dl, cl
  2971 0000248E 80FE00              <2> 		cmp dh, 0
  2972 00002491 74E4                <2> 		je prnobmr
  2973 00002493 8B1D[50250000]      <2> 		mov ebx, [linebeginpos]
  2974 00002499 6651                <2> 		push cx
  2975 0000249B 31C9                <2> 		xor ecx, ecx
  2976 0000249D 8A0C24              <2> 		mov cl, [esp]
  2977 000024A0 C1E102              <2> 		shl ecx, 2
  2978 000024A3 29CB                <2> 		sub ebx, ecx
  2979 000024A5 6659                <2> 		pop cx
  2980 000024A7 FECE                <2> 		dec dh
  2981 000024A9 EBCC                <2> 		jmp prnobmr
  2982                              <2> 		
  2983                              <2> 	prnlcr:
  2984 000024AB FEC6                <2> 		inc dh
  2985 000024AD 31DB                <2> 		xor ebx, ebx
  2986 000024AF 30D2                <2> 		xor dl, dl
  2987 000024B1 88CB                <2> 		mov bl, cl
  2988 000024B3 66C1E302            <2> 		shl bx, 2
  2989 000024B7 BF[9CDF2B00]        <2> 		mov edi, videobuf
  2990 000024BC 031D[50250000]      <2> 		add ebx, [linebeginpos]
  2991 000024C2 891D[50250000]      <2> 		mov [linebeginpos], ebx
  2992 000024C8 01DF                <2> 		add edi, ebx
  2993 000024CA E925FFFFFF          <2> 		jmp donecrnl
  2994                              <2> 		
  2995                              <2> 	preol:
  2996 000024CF 30D2                <2> 		xor dl, dl
  2997 000024D1 FEC6                <2> 		inc dh
  2998 000024D3 31DB                <2> 		xor ebx, ebx
  2999 000024D5 88CB                <2> 		mov bl, cl
  3000 000024D7 66C1E302            <2> 		shl bx, 2
  3001 000024DB 031D[50250000]      <2> 		add ebx, [linebeginpos]
  3002 000024E1 891D[50250000]      <2> 		mov [linebeginpos], ebx
  3003 000024E7 E910FFFFFF          <2> 		jmp doneeol
  3004                              <2> 	prscr:
  3005 000024EC FECE                <2> 		dec dh
  3006 000024EE BF[9CDF2B00]        <2> 		mov edi, videobuf
  3007 000024F3 31DB                <2> 		xor ebx, ebx
  3008 000024F5 88CB                <2> 		mov bl, cl
  3009 000024F7 66C1E302            <2> 		shl bx, 2
  3010 000024FB 01FB                <2> 		add ebx, edi
  3011                              <2> 	intscrollloop:
  3012 000024FD 8B03                <2> 		mov eax, [ebx]
  3013 000024FF 8907                <2> 		mov [edi], eax
  3014 00002501 83C704              <2> 		add edi, 4
  3015 00002504 83C304              <2> 		add ebx, 4
  3016 00002507 FEC9                <2> 		dec cl
  3017 00002509 80F900              <2> 		cmp cl, 0
  3018 0000250C 75EF                <2> 		jne intscrollloop
  3019 0000250E 8A0D[5A250000]      <2> 		mov cl, [charxy]
  3020 00002514 FECD                <2> 		dec ch
  3021 00002516 80FD01              <2> 		cmp ch, 1
  3022 00002519 77E2                <2> 		ja intscrollloop
  3023 0000251B 31C0                <2> 		xor eax, eax
  3024 0000251D 81EF[9CDF2B00]      <2> 		sub edi, videobuf
  3025 00002523 893D[50250000]      <2> 		mov [linebeginpos], edi
  3026 00002529 81C7[9CDF2B00]      <2> 		add edi, videobuf
  3027 0000252F 89FB                <2> 		mov ebx, edi
  3028                              <2> 	intloopclear:
  3029 00002531 8903                <2> 		mov [ebx], eax
  3030 00002533 83C304              <2> 		add ebx, 4
  3031 00002536 FEC9                <2> 		dec cl
  3032 00002538 80F900              <2> 		cmp cl, 0
  3033 0000253B 75F4                <2> 		jne intloopclear
  3034 0000253D FECD                <2> 		dec ch
  3035 0000253F 80FD00              <2> 		cmp ch, 0
  3036 00002542 75ED                <2> 		jne intloopclear
  3037 00002544 668B0D[5A250000]    <2> 		mov cx, [charxy]
  3038 0000254B E9B4FEFFFF          <2> 		jmp donescr
  3039                              <2> 		
  3040 00002550 00000000            <2> linebeginpos dd 0
  3041 00002554 00000000            <2> videobufpos: dd 0
  3042 00002558 0000                <2> charpos db 0,0
  3043 0000255A 501E                <2> charxy db 80,30
  3044 0000255C 00000000            <2> charbuf dd 0
  3045                              <2> %endif
  3046                              <1> 	%include 'source/interrupts/7_openfile.asm'
  3047                              <2> openfile:
  3048 00002560 E82E400000          <2> 	call loadfile
  3049 00002565 E934DDFFFF          <2> 	jmp timerinterrupt
  3050                              <1> 	%include 'source/interrupts/9_num2str.asm'
  3051                              <2> num2str:
  3052 0000256A 3C00                <2> 	cmp al, 0
  3053 0000256C 750A                <2> 	jne num2strb
  3054 0000256E E85C0C0000          <2> 	call showdec
  3055 00002573 E926DDFFFF          <2> 	jmp timerinterrupt
  3056                              <2> num2strb:
  3057 00002578 E8A30B0000          <2> 	call showhex
  3058 0000257D E91CDDFFFF          <2> 	jmp timerinterrupt
  3059                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3060                              <2> str2num:
  3061 00002582 89F7                <2> 	mov edi, esi
  3062 00002584 E8150D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3063 00002589 E910DDFFFF          <2> 	jmp timerinterrupt
  3064                              <2> 	
  3065                              <1> %ifdef threads.included
  3066                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3067                              <2> forkthread:
  3068                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  3069                              <2> 			;returns the PID of the new fork in ebx
  3070                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK INCLUDING FPU AND SSE REGISTERS
  3071 0000258E FA                  <2> 	cli
  3072 0000258F 60                  <2> 	pushad
  3073 00002590 8925[4E260000]      <2> 	mov [.espold], esp
  3074 00002596 C605[3C670000]01    <2> 	mov byte [threadson], 1
  3075 0000259D 8B1D[3D670000]      <2> 	mov ebx, [currentthread]
  3076 000025A3 C1E302              <2> 	shl ebx, 2
  3077 000025A6 89A3[3C9A2D00]      <2> 	mov [threadlist + ebx], esp
  3078 000025AC C1EB02              <2> 	shr ebx, 2
  3079 000025AF 83FB00              <2> 	cmp ebx, 0
  3080 000025B2 7509                <2> 	jne .simplestack
  3081 000025B4 BB[00AA0300]        <2> 	mov ebx, stackend
  3082 000025B9 29E3                <2> 	sub ebx, esp
  3083 000025BB EB0B                <2> 	jmp .stackcalcdone
  3084                              <2> .simplestack:
  3085 000025BD C1E30A              <2> 	shl ebx, 10
  3086 000025C0 81C3[3CB22D00]      <2> 	add ebx, stack1
  3087 000025C6 29E3                <2> 	sub ebx, esp
  3088                              <2> .stackcalcdone:
  3089 000025C8 29DC                <2> 	sub esp, ebx
  3090 000025CA 81C4[3CB22D00]      <2> 	add esp, stack1
  3091 000025D0 8B1D[38670000]      <2> 	mov ebx, [lastthread]
  3092 000025D6 C1E308              <2> 	shl ebx, 8
  3093 000025D9 01DC                <2> 	add esp, ebx
  3094 000025DB 891D[52260000]      <2> 	mov [.stackend], ebx
  3095                              <2> 
  3096 000025E1 89E5                <2> 	mov ebp, esp
  3097 000025E3 8B25[4E260000]      <2> 	mov esp, [.espold]
  3098                              <2> 
  3099 000025E9 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3100 000025EC 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3101                              <2> 
  3102 000025F0 31DB                <2> 	xor ebx, ebx
  3103                              <2> .stackcopy:
  3104 000025F2 668B041C            <2> 	mov ax, [esp + ebx]
  3105 000025F6 6689441D00          <2> 	mov [ebp + ebx], ax
  3106 000025FB 83C302              <2> 	add ebx, 2
  3107 000025FE 3B1D[52260000]      <2> 	cmp ebx, [.stackend]
  3108 00002604 72EC                <2> 	jb .stackcopy
  3109                              <2> 
  3110 00002606 31C0                <2> 	xor eax, eax
  3111 00002608 668CC8              <2> 	mov ax, cs
  3112 0000260B 89C2                <2> 	mov edx, eax
  3113 0000260D 8B4C2428            <2> 	mov ecx, [esp + 40]
  3114 00002611 81C900020000        <2> 	or ecx, 0x200
  3115                              <2> 	
  3116 00002617 83FE00              <2> 	cmp esi, 0
  3117 0000261A 7504                <2> 	jne .nochangestack
  3118 0000261C 8B742420            <2> 	mov esi, [esp + 32]
  3119                              <2> .nochangestack:
  3120 00002620 89F0                <2> 	mov eax, esi
  3121 00002622 89EC                <2> 	mov esp, ebp
  3122                              <2> 
  3123 00002624 89442420            <2> 	mov [esp + 32], eax
  3124 00002628 89542424            <2> 	mov [esp + 36], edx
  3125 0000262C 894C2428            <2> 	mov [esp + 40], ecx
  3126                              <2> 
  3127 00002630 8B1D[38670000]      <2> 	mov ebx, [lastthread]
  3128 00002636 89A3[3C9A2D00]      <2> 	mov [threadlist + ebx], esp
  3129 0000263C 83C304              <2> 	add ebx, 4
  3130 0000263F 891D[38670000]      <2> 	mov [lastthread], ebx
  3131 00002645 8B25[4E260000]      <2> 	mov esp, [.espold]
  3132 0000264B 61                  <2> 	popad
  3133 0000264C FB                  <2> 	sti
  3134 0000264D CF                  <2> 	iret
  3135                              <2> 
  3136 0000264E 00000000            <2> .espold dd 0
  3137 00002652 00000000            <2> .stackend dd 0
  3138                              <1> %endif
  3139                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3140                              <2> gettime:
  3141 00002656 A1[57020000]        <2> 	mov eax, [timeseconds]
  3142 0000265B 8B1D[5B020000]      <2> 	mov ebx, [timenanoseconds]
  3143 00002661 89D9                <2> 	mov ecx, ebx
  3144 00002663 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3145 00002666 E933DCFFFF          <2> 	jmp timerinterrupt
  3146                              <1> 	%include 'source/interrupts/13_settime.asm'
  3147                              <2> settime:
  3148 0000266B A3[57020000]        <2> 	mov [timeseconds], eax
  3149 00002670 891D[5B020000]      <2> 	mov [timenanoseconds], ebx
  3150 00002676 E923DCFFFF          <2> 	jmp timerinterrupt
  3151                              <2> 	
  3152                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3153                              <2> runcmd:
  3154 0000267B BF[88C40300]        <2> 	mov edi, buftxt
  3155                              <2> cpcmd:
  3156 00002680 8A06                <2> 	mov al, [esi]
  3157 00002682 8807                <2> 	mov [edi], al
  3158 00002684 46                  <2> 	inc esi
  3159 00002685 47                  <2> 	inc edi
  3160 00002686 3C00                <2> 	cmp al, 0
  3161 00002688 75F6                <2> 	jne cpcmd
  3162 0000268A E8BF070000          <2> 	call run
  3163 0000268F CF                  <2> 	iret
  3164                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3165                              <2> proginfo:
  3166                              <2> 	;mov ebx, variables
  3167 00002690 8B35[1E2F0000]      <2> 	mov esi, [currentcommandloc]
  3168 00002696 89F7                <2> 	mov edi, esi
  3169 00002698 31C9                <2> 	xor ecx, ecx
  3170                              <2> getcommandzeroes:
  3171 0000269A 8A07                <2> 	mov al, [edi]
  3172 0000269C 47                  <2> 	inc edi
  3173 0000269D 3C3B                <2> 	cmp al, ';'
  3174 0000269F 740B                <2> 	je nomorezeroes
  3175 000026A1 3C00                <2> 	cmp al, 0
  3176 000026A3 7407                <2> 	je nomorezeroes
  3177 000026A5 3C20                <2> 	cmp al, ' '
  3178 000026A7 75F1                <2> 	jne getcommandzeroes
  3179 000026A9 41                  <2> 	inc ecx
  3180 000026AA EBEE                <2> 	jmp getcommandzeroes
  3181                              <2> nomorezeroes:
  3182 000026AC 41                  <2> 	inc ecx
  3183 000026AD 4F                  <2> 	dec edi
  3184 000026AE 8B1D[14B00300]      <2> 	mov ebx, [uid]
  3185 000026B4 8B15[3D670000]      <2> 	mov edx, [currentthread]
  3186 000026BA CF                  <2> 	iret
  3187                              <2> 	
  3188                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3189                              <2> hooksig: ;hook code in ESI to signal in AL
  3190 000026BB 3C00                <2> 	cmp al, 0
  3191 000026BD 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3192                              <2> ;	xor ebx, ebx
  3193                              <2> ;	mov bl, al
  3194                              <2> ;	shl bl, 2
  3195 000026BF BF[04AA0300]        <2> 	mov edi, sigtable
  3196 000026C4 8937                <2> 	mov [edi], esi
  3197                              <2> .quit:
  3198 000026C6 E9D3DBFFFF          <2> 	jmp timerinterrupt
  3199                              <1> %ifdef gui.included
  3200                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3201                              <2> guiint:
  3202 000026CB 3CFD                <2> 	cmp al, 253
  3203 000026CD 0F848E000000        <2> 	je near .getinfo
  3204 000026D3 803D[0F850000]01    <2> 	cmp byte [guion], 1
  3205 000026DA 0F8550000000        <2> 	jne near .nogui
  3206 000026E0 3C00                <2> 	cmp al, 0
  3207 000026E2 0F844D000000        <2> 	je near .clear
  3208 000026E8 3C01                <2> 	cmp al, 1
  3209 000026EA 0F84DE000000        <2> 	je near .putpixel
  3210 000026F0 3C02                <2> 	cmp al, 2
  3211 000026F2 0F84E3000000        <2> 	je near .drawtext
  3212 000026F8 3C03                <2> 	cmp al, 3
  3213 000026FA 0F84F6000000        <2> 	je near .drawline
  3214 00002700 3C04                <2> 	cmp al, 4
  3215 00002702 0F8401010000        <2> 	je near .drawcircle
  3216 00002708 3C05                <2> 	cmp al, 5
  3217 0000270A 0F8409010000        <2> 	je near .fillcircle
  3218 00002710 3C06                <2> 	cmp al, 6
  3219 00002712 0F8411010000        <2> 	je near .drawsquare
  3220 00002718 3C07                <2> 	cmp al, 7
  3221 0000271A 0F841C010000        <2> 	je near .fillsquare
  3222 00002720 3CFE                <2> 	cmp al, 254
  3223 00002722 0F8461000000        <2> 	je near .setinfo
  3224 00002728 3CFF                <2> 	cmp al, 255
  3225 0000272A 0F845E000000        <2> 	je near .reset
  3226                              <2> .nogui:
  3227 00002730 E969DBFFFF          <2> 	jmp timerinterrupt
  3228                              <2> 
  3229                              <2> .clear:		;color in bx
  3230 00002735 66891D[0B6E0000]    <2> 	mov [background], bx
  3231                              <2> %ifdef gui.background
  3232 0000273C 8B1D[E36D0000]      <2> 	mov ebx, [backgroundimage]
  3233 00002742 83FB00              <2> 	cmp ebx, 0
  3234 00002745 7410                <2> 	je .clearit
  3235 00002747 C705[E36D0000]0000- <2> 	mov dword [backgroundimage], 0
  3236 0000274F 0000                <2>
  3237 00002751 891D[CA270000]      <2> 	mov [.bgi], ebx
  3238                              <2> .clearit:
  3239                              <2> %endif
  3240 00002757 E832460000          <2> 	call guiclear
  3241 0000275C E93DDBFFFF          <2> 	jmp timerinterrupt
  3242                              <2> 	
  3243                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3244 00002761 31DB                <2> 	xor ebx, ebx
  3245 00002763 31C9                <2> 	xor ecx, ecx
  3246 00002765 31D2                <2> 	xor edx, edx
  3247 00002767 381D[0F850000]      <2> 	cmp [guion], bl
  3248 0000276D 74C1                <2> 	je .nogui
  3249 0000276F 668B1D[0B6E0000]    <2> 	mov bx, [background]
  3250 00002776 668B15[2C550000]    <2> 	mov dx, [resolutionx]
  3251 0000277D 668B0D[2E550000]    <2> 	mov cx, [resolutiony]
  3252 00002784 E915DBFFFF          <2> 	jmp timerinterrupt
  3253                              <2> 	
  3254                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3255 00002789 E910DBFFFF          <2> 	jmp timerinterrupt
  3256                              <2> .reset:		;resets the screen to the original settings
  3257 0000278E 66BBCF7B            <2> 	mov bx, background.original
  3258 00002792 66891D[0B6E0000]    <2> 	mov [background], bx
  3259 00002799 66BBFFFF            <2> 	mov bx, 0xFFFF
  3260 0000279D 66891D[BE740000]    <2> 	mov [colorfont2], bx
  3261                              <2> %ifdef gui.background
  3262 000027A4 8B1D[E36D0000]      <2> 	mov ebx, [backgroundimage]
  3263 000027AA 83FB00              <2> 	cmp ebx, 0
  3264 000027AD 750C                <2> 	jne .resetit
  3265 000027AF 8B1D[CA270000]      <2> 	mov ebx, [.bgi]
  3266 000027B5 891D[E36D0000]      <2> 	mov [backgroundimage], ebx
  3267                              <2> .resetit:
  3268                              <2> %endif
  3269 000027BB E8CE450000          <2> 	call guiclear
  3270 000027C0 E84A460000          <2> 	call reloadallgraphics
  3271 000027C5 E9D4DAFFFF          <2> 	jmp timerinterrupt
  3272                              <2> 
  3273                              <2> %ifdef gui.background
  3274 000027CA 00000000            <2> 	.bgi dd 0
  3275                              <2> %endif
  3276                              <2> 	
  3277                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3278 000027CE 6689DE              <2> 	mov si, bx
  3279 000027D1 E8695C0000          <2> 	call putpixel
  3280 000027D6 E9C3DAFFFF          <2> 	jmp timerinterrupt
  3281                              <2> 
  3282                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3283 000027DB 66D1E2              <2> 	shl dx, 1
  3284 000027DE 66891D[BE740000]    <2> 	mov [colorfont2], bx
  3285 000027E5 66893D[0B6E0000]    <2> 	mov [background], di
  3286 000027EC E8644C0000          <2> 	call showstring2
  3287 000027F1 E9A8DAFFFF          <2> 	jmp timerinterrupt
  3288                              <2> 
  3289                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3290 000027F6 6689F0              <2> 	mov ax, si
  3291 000027F9 6689DE              <2> 	mov si, bx
  3292 000027FC 6689FB              <2> 	mov bx, di
  3293 000027FF E877440000          <2> 	call drawline
  3294 00002804 E995DAFFFF          <2> 	jmp timerinterrupt
  3295                              <2> 
  3296                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3297 00002809 6689F0              <2> 	mov ax, si
  3298 0000280C 6689DE              <2> 	mov si, bx
  3299 0000280F E813400000          <2> 	call drawcircle
  3300 00002814 E985DAFFFF          <2> 	jmp timerinterrupt
  3301                              <2> 
  3302                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3303 00002819 6689F0              <2> 	mov ax, si
  3304 0000281C 6689DE              <2> 	mov si, bx
  3305 0000281F E80C410000          <2> 	call fillcircle
  3306 00002824 E975DAFFFF          <2> 	jmp timerinterrupt
  3307                              <2> 	
  3308                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3309 00002829 6689F0              <2> 	mov ax, si
  3310 0000282C 6689DE              <2> 	mov si, bx
  3311 0000282F 6689FB              <2> 	mov bx, di
  3312 00002832 E8A5460000          <2> 	call drawsquare
  3313 00002837 E962DAFFFF          <2> 	jmp timerinterrupt
  3314                              <2> 
  3315                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3316 0000283C 6689F0              <2> 	mov ax, si
  3317 0000283F 6689DE              <2> 	mov si, bx
  3318 00002842 6689FB              <2> 	mov bx, di
  3319 00002845 E801470000          <2> 	call fillsquare
  3320 0000284A E94FDAFFFF          <2> 	jmp timerinterrupt
  3321                              <1> %endif
  3322                              <1> %ifdef sound.included
  3323                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3324                              <2> soundint:
  3325 0000284F E94ADAFFFF          <2> 	jmp timerinterrupt
  3326                              <1> %endif
  3327                              <1> %ifdef network.included
  3328                              <1> 	%include 'source/interrupts/19_netint.asm'
  3329                              <1> %endif
  3330                              <1> 
  3331                              <1> termcopy:
  3332                              <1> %ifdef io.serial
  3333                              <1> 	ret
  3334                              <1> %else
  3335                              <1> %ifdef terminal.vsync
  3336 00002854 C605[5C280000]01    <1> 	mov byte [termcopyneeded], 1
  3337 0000285B C3                  <1> 	ret
  3338                              <1> %else
  3339                              <1> 	call newtermcopy
  3340                              <1> 	ret
  3341                              <1> %endif
  3342 0000285C 00                  <1> 	termcopyneeded db 0
  3343 0000285D 00000000            <1> 	termcursorpos dd 0
  3344 00002861 00000000            <1> 	removedvideo dd 0
  3345                              <1> newtermcopy:
  3346 00002865 60                  <1> 	pusha
  3347 00002866 BF[9CDF2B00]        <1> 	mov edi, videobuf
  3348 0000286B 31DB                <1> 	xor ebx, ebx
  3349 0000286D 881D[5C280000]      <1> 	mov [termcopyneeded], bl
  3350 00002873 8B1D[54250000]      <1> 	mov ebx, [videobufpos]
  3351 00002879 01DF                <1> 	add edi, ebx
  3352 0000287B 893D[5D280000]      <1> 	mov [termcursorpos], edi
  3353 00002881 E8D6000000          <1> 	call switchtermcursor
  3354 00002886 803D[0F850000]00    <1> 	cmp byte [guion], 0
  3355 0000288D 0F8420000000        <1> 	je near nowincopy
  3356                              <1> %ifdef gui.included
  3357 00002893 C605[7B7C0000]00    <1> 	mov byte [mouseselecton], 0
  3358 0000289A C605[82230000]01    <1> 	mov byte [termcopyon], 1
  3359 000028A1 803D[81230000]01    <1> 	cmp byte [termguion], 1
  3360 000028A8 0F84D7500000        <1> 	je near windowvideocopy
  3361                              <1> %endif
  3362 000028AE E9A2000000          <1> 	jmp nocopytermatall
  3363                              <1> nowincopy:
  3364 000028B3 BE00000A00          <1> 	mov esi, 0xA0000
  3365 000028B8 A1[38020000]        <1> 	mov eax, [basecache]
  3366 000028BD C1E004              <1> 	shl eax, 4
  3367 000028C0 29C6                <1> 	sub esi, eax
  3368 000028C2 BF[9CDF2B00]        <1> 	mov edi, videobuf
  3369 000028C7 31C9                <1> 	xor ecx, ecx
  3370 000028C9 668B0D[5A250000]    <1> 	mov cx, [charxy]
  3371                              <1> nowincopy2:
  3372 000028D0 8B07                <1> 	mov eax, [edi]
  3373 000028D2 81C748D50000        <1> 	add edi, (videobuf2 - videobuf)
  3374 000028D8 8B1F                <1> 	mov ebx, [edi]
  3375 000028DA 8907                <1> 	mov [edi], eax
  3376 000028DC 81EF48D50000        <1> 	sub edi, (videobuf2 - videobuf)
  3377 000028E2 83C702              <1> 	add edi, 2
  3378 000028E5 39D8                <1> 	cmp eax, ebx
  3379 000028E7 7445                <1> 	je nopresentwinfont
  3380 000028E9 83EF02              <1> 	sub edi, 2
  3381 000028EC BD[69870000]        <1> 	mov ebp, fonts
  3382 000028F1 31C0                <1> 	xor eax, eax
  3383 000028F3 668B07              <1> 	mov ax, [edi]
  3384 000028F6 C1E004              <1> 	shl eax, 4
  3385 000028F9 01C5                <1> 	add ebp, eax
  3386 000028FB 83C702              <1> 	add edi, 2
  3387 000028FE 668B1F              <1> 	mov bx, [edi]
  3388 00002901 31D2                <1> 	xor edx, edx
  3389 00002903 8A15[5A250000]      <1> 	mov dl, [charxy]
  3390 00002909 C1C110              <1> 	rol ecx, 16
  3391 0000290C B110                <1> 	mov cl, 16
  3392                              <1> nowinfont:
  3393 0000290E 8A4500              <1> 	mov al, [ebp]
  3394 00002911 D0C8                <1> 	ror al, 1
  3395 00002913 80FB80              <1> 	cmp bl, 0x80
  3396 00002916 7202                <1> 	jb notnotfont
  3397 00002918 F6D0                <1> 	not al
  3398                              <1> notnotfont:
  3399 0000291A 8806                <1> 	mov [esi], al
  3400 0000291C 01D6                <1> 	add esi, edx
  3401 0000291E 45                  <1> 	inc ebp
  3402 0000291F FEC9                <1> 	dec cl
  3403 00002921 80F900              <1> 	cmp cl, 0
  3404 00002924 75E8                <1> 	jne nowinfont
  3405 00002926 C1E204              <1> 	shl edx, 4
  3406 00002929 29D6                <1> 	sub esi, edx
  3407 0000292B C1C110              <1> 	rol ecx, 16
  3408                              <1> nopresentwinfont:
  3409 0000292E 83C702              <1> 	add edi, 2
  3410 00002931 46                  <1> 	inc esi
  3411 00002932 FEC9                <1> 	dec cl
  3412 00002934 80F900              <1> 	cmp cl, 0
  3413 00002937 7597                <1> 	jne nowincopy2
  3414 00002939 8A0D[5A250000]      <1> 	mov cl, [charxy]
  3415 0000293F 31D2                <1> 	xor edx, edx
  3416 00002941 88CA                <1> 	mov dl, cl
  3417 00002943 29D6                <1> 	sub esi, edx
  3418 00002945 C1E204              <1> 	shl edx, 4
  3419 00002948 01D6                <1> 	add esi, edx
  3420 0000294A FECD                <1> 	dec ch
  3421 0000294C 80FD00              <1> 	cmp ch, 0
  3422 0000294F 0F857BFFFFFF        <1> 	jne nowincopy2
  3423                              <1> nocopytermatall:
  3424 00002955 E802000000          <1> 	call switchtermcursor
  3425 0000295A 61                  <1> 	popa
  3426 0000295B C3                  <1> 	ret
  3427                              <1> 	
  3428                              <1> switchtermcursor:
  3429 0000295C 8B3D[5D280000]      <1> 	mov edi, [termcursorpos]
  3430 00002962 668B4702            <1> 	mov ax, [edi + 2]
  3431 00002966 668B1F              <1> 	mov bx, [edi]
  3432 00002969 663D8000            <1> 	cmp ax, 0x80
  3433 0000296D 7206                <1> 	jb movlargecursorterm
  3434 0000296F 66B80700            <1> 	mov ax, 7
  3435 00002973 EB04                <1> 	jmp movedcursorterm
  3436                              <1> movlargecursorterm:
  3437 00002975 66B8F000            <1> 	mov ax, 0xF0
  3438                              <1> movedcursorterm:
  3439 00002979 66894702            <1> 	mov [edi + 2], ax
  3440 0000297D 6683FB00            <1> 	cmp bx, 0
  3441 00002981 7507                <1> 	jne fixednocursorterm
  3442 00002983 66BB2000            <1> 	mov bx, ' '
  3443 00002987 66891F              <1> 	mov [edi], bx
  3444                              <1> fixednocursorterm:
  3445 0000298A C3                  <1> 	ret
  3446                              <1> %endif
  3447                                  %include "source/dosints.asm"
  3448                              <1> int20h:
  3449 0000298B 66B8004C            <1> mov ax, 0x4C00
  3450                              <1> int21h:
  3451                              <1> dostosolleros:
  3452 0000298F 6650                <1> 	push ax
  3453 00002991 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3454 00002995 8ED8                <1> 	mov ds, ax
  3455 00002997 8EC0                <1> 	mov es, ax
  3456 00002999 8EE0                <1> 	mov fs, ax
  3457 0000299B 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3458 0000299F 8EE8                <1> 	mov gs, ax
  3459 000029A1 6658                <1> 	pop ax
  3460 000029A3 9C                  <1> 	pushf
  3461 000029A4 60                  <1> 	pusha
  3462 000029A5 80FC01              <1> 	cmp ah, 1
  3463 000029A8 0F8449000000        <1> 	je near dosgchar
  3464 000029AE 80FC02              <1> 	cmp ah, 2
  3465 000029B1 0F8447000000        <1> 	je near doswchar
  3466 000029B7 80FC09              <1> 	cmp ah, 9
  3467 000029BA 0F844B000000        <1> 	je near dosprintstr
  3468 000029C0 80FC0A              <1> 	cmp ah, 0xA
  3469 000029C3 0F845A000000        <1> 	je near dosgetstr
  3470 000029C9 80FC2B              <1> 	cmp ah, 0x2B
  3471 000029CC 0F8493000000        <1> 	je near dosgetdate
  3472 000029D2 80FC2C              <1> 	cmp ah, 0x2C
  3473 000029D5 0F84AD000000        <1> 	je near dosgettime
  3474 000029DB 80FC4C              <1> 	cmp ah, 0x4C
  3475 000029DE 0F84C2000000        <1> 	je near dosexit
  3476                              <1> backtodos:
  3477 000029E4 61                  <1> 	popa
  3478 000029E5 9D                  <1> 	popf
  3479 000029E6 6650                <1> 	push ax
  3480 000029E8 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3481 000029EC 8ED8                <1> 	mov ds, ax
  3482 000029EE 8EC0                <1> 	mov es, ax
  3483 000029F0 8EE0                <1> 	mov fs, ax
  3484 000029F2 8EE8                <1> 	mov gs, ax
  3485 000029F4 6658                <1> 	pop ax
  3486 000029F6 CF                  <1> 	iret
  3487                              <1> 
  3488                              <1> dosgchar:
  3489 000029F7 E8F2F8FFFF          <1> 	call getchar
  3490 000029FC EBE6                <1> 	jmp backtodos
  3491                              <1> 	
  3492                              <1> doswchar:
  3493 000029FE 88D0                <1> 	mov al, dl
  3494 00002A00 30E4                <1> 	xor ah, ah
  3495 00002A02 B307                <1> 	mov bl, 7
  3496 00002A04 E863F9FFFF          <1> 	call prcharint
  3497 00002A09 EBD9                <1> 	jmp backtodos
  3498                              <1> 	
  3499                              <1> dosprintstr:
  3500 00002A0B 31F6                <1> 	xor esi, esi
  3501 00002A0D 6689D6              <1> 	mov si, dx
  3502 00002A10 81C600004000        <1> 	add esi, dosprogloc
  3503 00002A16 66B82400            <1> 	mov ax, "$"
  3504 00002A1A B307                <1> 	mov bl, 7
  3505 00002A1C E8FAF2FFFF          <1> 	call printint
  3506 00002A21 EBC1                <1> 	jmp backtodos
  3507                              <1> 	
  3508                              <1> dosgetstr:
  3509 00002A23 31F6                <1> 	xor esi, esi
  3510 00002A25 6689D6              <1> 	mov si, dx
  3511 00002A28 81C600004000        <1> 	add esi, dosprogloc
  3512 00002A2E B900000000          <1> 	mov ecx, 0
  3513 00002A33 8A0E                <1> 	mov cl, [esi]
  3514 00002A35 83C602              <1> 	add esi, 2
  3515 00002A38 89F7                <1> 	mov edi, esi
  3516 00002A3A 8935[612A0000]      <1> 	mov [stringstart], esi
  3517 00002A40 01CF                <1> 	add edi, ecx
  3518 00002A42 B00A                <1> 	mov al, 10
  3519 00002A44 B307                <1> 	mov bl, 7
  3520 00002A46 E807F4FFFF          <1> 	call rdprintdos
  3521 00002A4B 89F1                <1> 	mov ecx, esi
  3522 00002A4D 2B0D[612A0000]      <1> 	sub ecx, [stringstart]
  3523 00002A53 8B35[612A0000]      <1> 	mov esi, [stringstart]
  3524 00002A59 884EFF              <1> 	mov [esi - 1], cl
  3525 00002A5C 884EFE              <1> 	mov [esi - 2], cl
  3526 00002A5F EB83                <1> 	jmp backtodos
  3527 00002A61 00000000            <1> stringstart dd 0
  3528                              <1> 
  3529                              <1> dosgetdate:
  3530 00002A65 E81E150000          <1> 	call time
  3531 00002A6A 8A0D[8E420000]      <1> 	mov cl, [RTCtimeYear]
  3532 00002A70 B500                <1> 	mov ch, 0
  3533 00002A72 6681C1D007          <1> 	add cx, 2000
  3534 00002A77 8A35[8D420000]      <1> 	mov dh, [RTCtimeMonth]
  3535 00002A7D 8A15[8C420000]      <1> 	mov dl, [RTCtimeDay]
  3536 00002A83 E95CFFFFFF          <1> 	jmp backtodos
  3537                              <1> 
  3538                              <1> dosgettime:
  3539 00002A88 E8FB140000          <1> 	call time
  3540 00002A8D 8A2D[8B420000]      <1> 	mov ch, [RTCtimeHour]
  3541 00002A93 8A0D[8A420000]      <1> 	mov cl, [RTCtimeMinute]
  3542 00002A99 8A35[89420000]      <1> 	mov dh, [RTCtimeSecond]
  3543 00002A9F B200                <1> 	mov dl, 0
  3544 00002AA1 E93EFFFFFF          <1> 	jmp backtodos
  3545                              <1> 	
  3546                              <1> dosexit:
  3547 00002AA6 BE[EA840000]        <1> 	mov esi, line
  3548 00002AAB E864F2FFFF          <1> 	call print
  3549 00002AB0 61                  <1> 	popa
  3550 00002AB1 9D                  <1> 	popf
  3551 00002AB2 8B25[08AE0300]      <1> 	mov esp, [previousstack]
  3552 00002AB8 31DB                <1> 	xor ebx, ebx
  3553 00002ABA 88C3                <1> 	mov bl, al
  3554 00002ABC 80FB00              <1> 	cmp bl, 0
  3555 00002ABF 0F85D8F1FFFF        <1> 	jne near exitprog.error
  3556 00002AC5 C3                  <1> 	ret
  3557                                  %include "source/shush.asm"
  3558                              <1> os:
  3559                              <1> setdefenv:
  3560 00002AC6 C605[14AE0300]2F    <1> 	mov byte [currentfolder], '/'
  3561 00002ACD C705[10AE0300]0100- <1> 	mov dword [currentfolderloc], 1
  3562 00002AD5 0000                <1>
  3563 00002AD7 E8E4F2FFFF          <1> 	call clear
  3564                              <1> 	
  3565                              <1> bootfilecheck:
  3566 00002ADC 803D[18B00300]01    <1> 	cmp byte [ranboot], 1
  3567 00002AE3 0F841E000000        <1> 	je near nobootfile
  3568                              <1> 	%ifdef hardware.automatic
  3569 00002AE9 E86F360000          <1> 		call initializelater ;Initialize components that have debug messages
  3570                              <1> 	%endif
  3571                              <1> 	%ifdef disk.none
  3572                              <1> 	%else
  3573 00002AEE BF[A9840000]        <1> 		mov edi, bootfilename
  3574 00002AF3 BE00004000          <1> 		mov esi, 0x400000
  3575 00002AF8 E8963A0000          <1> 		call loadfile
  3576 00002AFD 83FA00              <1> 		cmp edx, 0
  3577 00002B00 7505                <1> 		jne nobootfile
  3578 00002B02 E81A0D0000          <1> 		call progbatchfound
  3579                              <1> 	%endif
  3580                              <1> nobootfile:	
  3581 00002B07 C605[18B00300]01    <1> 	mov byte [ranboot], 1
  3582                              <1> 
  3583 00002B0E BE[02000000]        <1> 	mov esi, signature
  3584                              <1> .sigcopyloop:	;this prevents an odd error
  3585 00002B13 658A06              <1> 	mov al, [gs:esi]
  3586 00002B16 8806                <1> 	mov [esi], al
  3587 00002B18 46                  <1> 	inc esi
  3588 00002B19 81FE[15000000]      <1> 	cmp esi, signatureend
  3589 00002B1F 72F2                <1> 	jb .sigcopyloop
  3590                              <1> 	
  3591 00002B21 BE[02000000]        <1> 	mov esi, signature
  3592 00002B26 E8E9F1FFFF          <1> 	call print
  3593 00002B2B 8B0D[11000000]      <1> 	mov ecx, [signatureend - 4]
  3594 00002B31 E899060000          <1> 	call showdec
  3595 00002B36 E8D4F1FFFF          <1> 	call printline
  3596 00002B3B BE[C6840000]        <1> 	mov esi, userask
  3597 00002B40 E8CFF1FFFF          <1> 	call print
  3598                              <1> 
  3599                              <1> usercheck:
  3600 00002B45 BE[88C40300]        <1> 	mov esi, buftxt
  3601 00002B4A BF[88C80300]        <1> 	mov edi, buftxtend
  3602 00002B4F B00A                <1> 	mov al, 10
  3603 00002B51 E8E8F2FFFF          <1> 	call rdprint
  3604 00002B56 56                  <1> 	push esi
  3605 00002B57 BE[D0840000]        <1> 	mov esi, pwdask
  3606 00002B5C E8B3F1FFFF          <1> 	call print
  3607 00002B61 5E                  <1> 	pop esi
  3608 00002B62 46                  <1> 	inc esi
  3609 00002B63 8935[552C0000]      <1> 	mov [esipass], esi
  3610                              <1> passcheck:
  3611 00002B69 E880F7FFFF          <1> 	call getchar
  3612 00002B6E 3C0A                <1> 	cmp al, 10
  3613 00002B70 0F8438000000        <1> 	je near gotpass
  3614 00002B76 3C08                <1> 	cmp al, 8
  3615 00002B78 0F8412000000        <1> 	je near backpass
  3616 00002B7E 8806                <1> 	mov [esi], al
  3617 00002B80 46                  <1> 	inc esi
  3618 00002B81 30E4                <1> 	xor ah, ah
  3619 00002B83 B02A                <1> 	mov al, "*"
  3620 00002B85 E8E2F7FFFF          <1> 	call prcharint
  3621 00002B8A EBDD                <1> 	jmp passcheck
  3622 00002B8C 08200800            <1> backcursor2 db 8," ",8,0
  3623                              <1> backpass:
  3624 00002B90 3B35[552C0000]      <1> 	cmp esi, [esipass]
  3625 00002B96 0F84CDFFFFFF        <1> 	je near passcheck
  3626 00002B9C 4E                  <1> 	dec esi
  3627 00002B9D C60600              <1> 	mov byte [esi], 0
  3628 00002BA0 56                  <1> 	push esi
  3629 00002BA1 BE[8C2B0000]        <1> 	mov esi, backcursor2
  3630 00002BA6 E869F1FFFF          <1> 	call print
  3631 00002BAB 5E                  <1> 	pop esi
  3632 00002BAC EBBB                <1> 	jmp passcheck
  3633                              <1> gotpass:
  3634 00002BAE B00A                <1> 	mov al, 10
  3635 00002BB0 E8B7F7FFFF          <1> 	call prcharint
  3636 00002BB5 30C0                <1> 	xor al, al
  3637 00002BB7 31C9                <1> 	xor ecx, ecx
  3638 00002BB9 8806                <1> 	mov [esi], al
  3639 00002BBB BB[EC840000]        <1> 	mov ebx, userlst
  3640                              <1> userfind:
  3641 00002BC0 BE[88C40300]        <1> 	mov esi, buftxt
  3642 00002BC5 8A06                <1> 	mov al, [esi]
  3643 00002BC7 3C00                <1> 	cmp al, 0
  3644 00002BC9 0F84F7FEFFFF        <1> 	je near os
  3645 00002BCF 891D[592C0000]      <1> 	mov [usercache], ebx
  3646 00002BD5 E848030000          <1> 	call tester
  3647 00002BDA 3C01                <1> 	cmp al, 1
  3648 00002BDC 7416                <1> 	je pwdtest
  3649 00002BDE 41                  <1> 	inc ecx
  3650                              <1> nxtuser:
  3651 00002BDF 8A03                <1> 	mov al, [ebx]
  3652 00002BE1 43                  <1> 	inc ebx
  3653 00002BE2 3C00                <1> 	cmp al, 0
  3654 00002BE4 75F9                <1> 	jne nxtuser
  3655 00002BE6 81FB[0F850000]      <1> 	cmp ebx, userlstend
  3656 00002BEC 0F83D4FEFFFF        <1> 	jae near os
  3657 00002BF2 EBCC                <1> 	jmp userfind
  3658                              <1> pwdtest:
  3659 00002BF4 46                  <1> 	inc esi
  3660 00002BF5 43                  <1> 	inc ebx
  3661 00002BF6 E827030000          <1> 	call tester
  3662 00002BFB 3C01                <1> 	cmp al, 1
  3663 00002BFD 7402                <1> 	je pwdrgt
  3664 00002BFF EBDE                <1> 	jmp nxtuser
  3665                              <1> pwdrgt:
  3666 00002C01 D1E9                <1> 	shr ecx, 1
  3667 00002C03 890D[14B00300]      <1> 	mov [uid], ecx
  3668 00002C09 E8B2F1FFFF          <1> 	call clear
  3669 00002C0E 31C9                <1> 	xor ecx, ecx
  3670 00002C10 41                  <1> 	inc ecx
  3671 00002C11 890D[308A2D00]      <1> 	mov [commandbufpos], ecx
  3672                              <1> returnfromexp:
  3673 00002C17 66B90002            <1> 	mov cx, 200h
  3674 00002C1B BE[88C40300]        <1> 	mov esi, buftxt
  3675 00002C20 8935[1E2F0000]      <1> 	mov [currentcommandloc], esi
  3676 00002C26 E822000000          <1> 	call bufclr
  3677                              <1> clearolddata:
  3678 00002C2B 31C0                <1> 	xor eax, eax
  3679 00002C2D A2[19B00300]        <1> 	mov [IFON], al
  3680 00002C32 A2[1AB00300]        <1> 	mov [IFTRUE], al
  3681 00002C37 A2[82B00300]        <1> 	mov [BATCHISON], al
  3682 00002C3C A3[7EB00300]        <1> 	mov [BATCHPOS], eax
  3683 00002C41 A2[83B00300]        <1> 	mov [LOOPON], al
  3684 00002C46 A3[84B00300]        <1> 	mov [LOOPPOS], eax
  3685 00002C4B EB30                <1> 	jmp nwcmd
  3686                              <1> bufclr:	
  3687 00002C4D 30C0                <1> 	xor al, al
  3688 00002C4F 8806                <1> 	mov [esi], al
  3689 00002C51 46                  <1> 	inc esi
  3690 00002C52 E2F9                <1> 	loop bufclr
  3691 00002C54 C3                  <1> 	ret
  3692                              <1> 
  3693 00002C55 00000000            <1> esipass dd 0
  3694 00002C59 [EC840000]          <1> usercache dd userlst
  3695                              <1> 	
  3696                              <1> buftxtclear:
  3697 00002C5D 30C0                <1> 	xor al, al
  3698 00002C5F BE[88C40300]        <1> 	mov esi, buftxt
  3699 00002C64 81FE[88C80300]      <1> clearbuftxt: cmp esi, buf2
  3700 00002C6A 730E                <1> 	jae retbufclr
  3701 00002C6C 8806                <1> 	mov [esi], al
  3702 00002C6E 46                  <1> 	inc esi
  3703 00002C6F EBF3                <1> 	jmp clearbuftxt
  3704                              <1> 
  3705 00002C71 39DE                <1> clearitbuf: cmp esi, ebx
  3706 00002C73 7305                <1> 	jae retbufclr
  3707 00002C75 8806                <1> 	mov [esi], al
  3708 00002C77 46                  <1> 	inc esi
  3709 00002C78 EBF7                <1> 	jmp clearitbuf
  3710 00002C7A C3                  <1> retbufclr: ret
  3711                              <1> 
  3712 00002C7B EB00                <1> full:	jmp nwcmd
  3713                              <1> 
  3714                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3715                              <1> nwcmd:
  3716 00002C7D FB                  <1> 	sti
  3717 00002C7E 31C0                <1> 	xor eax, eax
  3718 00002C80 3905[462E0000]      <1> 	cmp [nextcommandloc], eax
  3719 00002C86 7413                <1> 	je nomultiplecommand
  3720 00002C88 8B35[462E0000]      <1> 	mov esi, [nextcommandloc]
  3721 00002C8E 8935[4A2E0000]      <1> 	mov [thiscommandloc], esi
  3722 00002C94 E8BA010000          <1> 	call fixvariables
  3723 00002C99 EBE2                <1> 	jmp nwcmd
  3724                              <1> nomultiplecommand:
  3725 00002C9B A3[4A2E0000]        <1> 	mov [thiscommandloc], eax
  3726 00002CA0 3805[3C670000]      <1> 	cmp [threadson], al
  3727 00002CA6 7405                <1> 	je noclinwcmd
  3728 00002CA8 A2[3C670000]        <1> 	mov [threadson], al
  3729                              <1> noclinwcmd:
  3730 00002CAD B001                <1> 	mov al, 1
  3731 00002CAF 3805[82B00300]      <1> 	cmp [BATCHISON], al
  3732 00002CB5 7501                <1> 	jne cancel
  3733 00002CB7 C3                  <1> 	ret
  3734 00002CB8 30C0                <1> cancel:	xor al, al
  3735 00002CBA A2[19B00300]        <1> 	mov [IFON], al
  3736 00002CBF A2[82B00300]        <1> 	mov [BATCHISON], al
  3737 00002CC4 B05B                <1> 	mov al, '['
  3738 00002CC6 66BB0700            <1> 	mov bx, 7
  3739 00002CCA E8B4F6FFFF          <1> 	call prcharq
  3740 00002CCF 8B35[592C0000]      <1> 	mov esi, [usercache]
  3741 00002CD5 E819F0FFFF          <1> 	call printquiet
  3742 00002CDA BE[DA840000]        <1> 	mov esi, computer
  3743 00002CDF E80FF0FFFF          <1> 	call printquiet
  3744 00002CE4 BE[14AE0300]        <1> 	mov esi, currentfolder
  3745 00002CE9 0335[0CAE0300]      <1> 	add esi, [lastfolderloc]
  3746 00002CEF E8FFEFFFFF          <1> 	call printquiet
  3747 00002CF4 BE[E5840000]        <1> 	mov esi, endprompt
  3748 00002CF9 E816F0FFFF          <1> 	call print
  3749 00002CFE E85AFFFFFF          <1> 	call buftxtclear
  3750 00002D03 BE[88C40300]        <1> 	mov esi, buftxt
  3751 00002D08 C605[D7220000]01    <1> 	mov byte [commandedit], 1
  3752 00002D0F B00A                <1> 	mov al, 10
  3753 00002D11 66BB0700            <1> 	mov bx, 7
  3754 00002D15 BF[88C80300]        <1> 	mov edi, buftxtend
  3755 00002D1A E81FF1FFFF          <1> 	call rdprint
  3756 00002D1F C605[D7220000]00    <1> 	mov byte [commandedit], 0
  3757 00002D26 803D[88C40300]00    <1> 	cmp byte [buftxt], 0
  3758 00002D2D 0F844AFFFFFF        <1> 	je near nwcmd
  3759 00002D33 8B35[308A2D00]      <1> gotcmd:	mov esi, [commandbufpos]
  3760 00002D39 8935[2C8A2D00]      <1> 	mov [lastcommandpos], esi
  3761 00002D3F FF05[388A2D00]      <1> 	inc dword [commandsentered]
  3762 00002D45 BF[88C40300]        <1> 	mov edi, buftxt
  3763 00002D4A 81C6[3C8A2D00]      <1> 	add esi, commandbuf
  3764 00002D50 81FE[3C9A2D00]      <1> 	cmp esi, commandbufend
  3765 00002D56 7605                <1> 	jbe copycommand
  3766 00002D58 BE[3C8A2D00]        <1> 	mov esi, commandbuf
  3767                              <1> copycommand:
  3768 00002D5D 8A07                <1> 	mov al, [edi]
  3769 00002D5F 8806                <1> 	mov [esi], al
  3770 00002D61 47                  <1> 	inc edi
  3771 00002D62 46                  <1> 	inc esi
  3772 00002D63 3C00                <1> 	cmp al, 0
  3773 00002D65 740F                <1> 	je donecopy
  3774 00002D67 81FE[3C9A2D00]      <1> 	cmp esi, commandbufend
  3775 00002D6D 76EE                <1> 	jbe copycommand
  3776 00002D6F BE[3C8A2D00]        <1> 	mov esi, commandbuf
  3777 00002D74 EBE7                <1> 	jmp copycommand
  3778                              <1> donecopy:
  3779 00002D76 81EE[3C8A2D00]      <1> 	sub esi, commandbuf
  3780 00002D7C 8935[308A2D00]      <1> 	mov [commandbufpos], esi
  3781 00002D82 E8C7000000          <1> 	call run
  3782 00002D87 E9F1FEFFFF          <1> 	jmp nwcmd
  3783                              <1> 
  3784 00002D8C E8CCFEFFFF          <1> input:	call buftxtclear
  3785 00002D91 BE[88C40300]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3786 00002D96 BF[88C80300]        <1> 	mov edi, buftxtend
  3787 00002D9B B00A                <1> stdin:	mov al, 10
  3788 00002D9D B307                <1> 	mov bl, 7
  3789 00002D9F E89AF0FFFF          <1> 	call rdprint
  3790 00002DA4 C3                  <1> 	ret
  3791                              <1> 
  3792                              <1> replacevariable:
  3793 00002DA5 8A4601              <1> 	mov al, [esi + 1]
  3794 00002DA8 C64601FF            <1> 	mov byte [esi + 1], 255
  3795 00002DAC 3C24                <1> 	cmp al, "$"
  3796 00002DAE 0F849F000000        <1> 	je near fixvariables
  3797 00002DB4 884601              <1> 	mov [esi + 1], al
  3798 00002DB7 56                  <1> 	push esi
  3799 00002DB8 81EE[88C40300]      <1> 	sub esi, buftxt
  3800 00002DBE 89F7                <1> 	mov edi, esi
  3801 00002DC0 81C6[88C40300]      <1> 	add esi, buftxt
  3802 00002DC6 47                  <1> 	inc edi
  3803 00002DC7 BB[88B00300]        <1> 	mov ebx, variables
  3804 00002DCC E8AC160000          <1> 	call nxtvrech
  3805 00002DD1 89F7                <1> 	mov edi, esi
  3806 00002DD3 31DB                <1> 	xor ebx, ebx
  3807 00002DD5 4E                  <1> 	dec esi
  3808                              <1> findvarname:
  3809 00002DD6 4E                  <1> 	dec esi
  3810 00002DD7 8A06                <1> 	mov al, [esi]
  3811 00002DD9 43                  <1> 	inc ebx
  3812 00002DDA 3C04                <1> 	cmp al, 4
  3813 00002DDC 75F8                <1> 	jne findvarname
  3814 00002DDE 5E                  <1> 	pop esi
  3815                              <1> replacevarloop:
  3816 00002DDF 8A07                <1> 	mov al, [edi]
  3817 00002DE1 3C00                <1> 	cmp al, 0
  3818 00002DE3 0F8410000000        <1> 	je near compressbuftxt
  3819 00002DE9 83FB00              <1> 	cmp ebx, 0
  3820 00002DEC 0F8413000000        <1> 	je near expandbuftxt
  3821 00002DF2 8806                <1> 	mov [esi], al
  3822 00002DF4 4B                  <1> 	dec ebx
  3823 00002DF5 46                  <1> 	inc esi
  3824 00002DF6 47                  <1> 	inc edi
  3825 00002DF7 EBE6                <1> 	jmp replacevarloop
  3826                              <1> compressbuftxt:
  3827 00002DF9 8A041E              <1> 	mov al, [esi + ebx]
  3828 00002DFC 8806                <1> 	mov [esi], al
  3829 00002DFE 46                  <1> 	inc esi
  3830 00002DFF 3C00                <1> 	cmp al, 0
  3831 00002E01 75F6                <1> 	jne compressbuftxt
  3832 00002E03 EB4E                <1> 	jmp fixvariables
  3833                              <1> expandbuftxt:
  3834 00002E05 89F1                <1> 	mov ecx, esi
  3835 00002E07 8A26                <1> 	mov ah, [esi]
  3836                              <1> expandbuftxtlp:
  3837 00002E09 8A1E                <1> 	mov bl, [esi]
  3838 00002E0B 46                  <1> 	inc esi
  3839 00002E0C 8A3E                <1> 	mov bh, [esi]
  3840 00002E0E 8826                <1> 	mov [esi], ah
  3841 00002E10 88FC                <1> 	mov ah, bh
  3842 00002E12 80FB00              <1> 	cmp bl, 0
  3843 00002E15 75F2                <1> 	jne expandbuftxtlp
  3844 00002E17 89CE                <1> 	mov esi, ecx
  3845 00002E19 8806                <1> 	mov [esi], al
  3846 00002E1B 47                  <1> 	inc edi
  3847 00002E1C 8A07                <1> 	mov al, [edi]
  3848 00002E1E 3C00                <1> 	cmp al, 0
  3849 00002E20 0F842D000000        <1> 	je near fixvariables
  3850 00002E26 46                  <1> 	inc esi
  3851 00002E27 EBDC                <1> 	jmp expandbuftxt
  3852                              <1> multipleprogline:
  3853 00002E29 30E4                <1> 	xor ah, ah
  3854 00002E2B 8826                <1> 	mov [esi], ah
  3855 00002E2D 46                  <1> 	inc esi
  3856 00002E2E 8935[462E0000]      <1> 	mov [nextcommandloc], esi
  3857 00002E34 EB3B                <1> 	jmp donefixvariables
  3858                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3859 00002E36 46                  <1> 	inc esi
  3860 00002E37 8A06                <1> 	mov al, [esi]
  3861 00002E39 C606FF              <1> 	mov byte [esi], 255
  3862 00002E3C 3C23                <1> 	cmp al, '#'
  3863 00002E3E 7413                <1> 	je fixvariables
  3864 00002E40 4E                  <1> 	dec esi
  3865 00002E41 C60600              <1> 	mov byte [esi], 0
  3866 00002E44 EB0D                <1> 	jmp fixvariables
  3867                              <1> 	
  3868 00002E46 00000000            <1> nextcommandloc dd 0
  3869 00002E4A 00000000            <1> thiscommandloc dd 0	
  3870                              <1> run:
  3871 00002E4E BE[88C40300]        <1> 	mov esi, buftxt
  3872                              <1> fixvariables:
  3873 00002E53 46                  <1> 	inc esi
  3874 00002E54 8A06                <1> 	mov al, [esi]
  3875 00002E56 3C23                <1> 	cmp al, '#'	;inline comment
  3876 00002E58 74DC                <1> 	je inlinecomment
  3877 00002E5A 3C24                <1> 	cmp al, '$' ;variable
  3878 00002E5C 0F8443FFFFFF        <1> 	je near replacevariable
  3879 00002E62 3C3B                <1> 	cmp al, ';' ;program list
  3880 00002E64 74C3                <1> 	je multipleprogline
  3881 00002E66 3C00                <1> 	cmp al, 0
  3882 00002E68 75E9                <1> 	jne fixvariables
  3883 00002E6A 31C0                <1> 	xor eax, eax
  3884 00002E6C A3[462E0000]        <1> 	mov [nextcommandloc], eax
  3885                              <1> donefixvariables:
  3886 00002E71 803D[D0330000]00    <1> 	cmp byte [indexdone], 0
  3887 00002E78 7505                <1> 	jne progtest
  3888 00002E7A E8D7040000          <1> 	call indexfiles
  3889                              <1> progtest:
  3890 00002E7F 31C0                <1> 	xor eax, eax
  3891 00002E81 BB[08AA0300]        <1> 	mov ebx, fileindex
  3892 00002E86 668B03              <1> prgnxt:	mov ax, [ebx]
  3893 00002E89 B1FF                <1> 	mov cl, 255
  3894 00002E8B B52C                <1> 	mov ch, 44
  3895 00002E8D 6639C8              <1> 	cmp ax, cx
  3896 00002E90 740B                <1> 	je fndprg
  3897 00002E92 43                  <1> 	inc ebx
  3898 00002E93 81FB[08AE0300]      <1> 	cmp ebx, fileindexend
  3899 00002E99 7357                <1> 	jae prgnf
  3900 00002E9B EBE9                <1> 	jmp prgnxt
  3901 00002E9D 83C302              <1> fndprg: add ebx, 2
  3902 00002EA0 31C9                <1> 	xor ecx, ecx
  3903 00002EA2 BE[88C40300]        <1> 	mov esi, buftxt
  3904 00002EA7 390D[4A2E0000]      <1> 	cmp [thiscommandloc], ecx
  3905 00002EAD 7406                <1> 	je noprgtstmultiple
  3906 00002EAF 8B35[4A2E0000]      <1> 	mov esi, [thiscommandloc]
  3907                              <1> noprgtstmultiple:
  3908 00002EB5 E8A3000000          <1> 	call cndtest
  3909 00002EBA 3C01                <1> 	cmp al, 1
  3910 00002EBC 7302                <1> 	jae prggood
  3911 00002EBE EBC6                <1> 	jmp prgnxt
  3912 00002EC0 81FB[08AE0300]      <1> prggood: cmp ebx, fileindexend
  3913 00002EC6 7355                <1> 	jae prgdn
  3914 00002EC8 31C0                <1> 	xor eax, eax
  3915 00002ECA BE[88C40300]        <1> 	mov esi, buftxt
  3916 00002ECF 3905[4A2E0000]      <1> 	cmp [thiscommandloc], eax
  3917 00002ED5 7406                <1> 	je noprggoodmul
  3918 00002ED7 8B35[4A2E0000]      <1> 	mov esi, [thiscommandloc]
  3919                              <1> noprggoodmul:
  3920 00002EDD 8935[1E2F0000]      <1> 	mov [currentcommandloc], esi
  3921 00002EE3 83C303              <1> 	add ebx, 3
  3922 00002EE6 8B3B                <1> 	mov edi, [ebx]
  3923 00002EE8 C605[3C670000]02    <1> 	mov byte [threadson], 2
  3924 00002EEF FFD7                <1> 	call edi
  3925 00002EF1 C3                  <1> 	ret
  3926                              <1> prgnf:	
  3927 00002EF2 8B35[1E2F0000]      <1> 	mov esi, [currentcommandloc]
  3928 00002EF8 8A06                <1> 	mov al, [esi]
  3929 00002EFA 3C00                <1> 	cmp al, 0
  3930 00002EFC 741F                <1> 	je prgdn
  3931 00002EFE BE[B1840000]        <1> 	mov esi, notfound1
  3932 00002F03 E80CEEFFFF          <1> 	call print
  3933 00002F08 8B35[1E2F0000]      <1> 	mov esi, [currentcommandloc]
  3934 00002F0E E801EEFFFF          <1> 	call print
  3935 00002F13 BE[B9840000]        <1> 	mov esi, notfound2
  3936 00002F18 E8F7EDFFFF          <1> 	call print
  3937 00002F1D C3                  <1> prgdn:	ret
  3938                              <1> 
  3939 00002F1E 00000000            <1> currentcommandloc dd 0
  3940                              <1> 
  3941                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3942 00002F22 6631C0              <1> 	xor ax, ax
  3943 00002F25 8A06                <1> retest:	mov al, [esi]
  3944 00002F27 8A23                <1> 	mov ah, [ebx]
  3945 00002F29 3C00                <1> 	cmp al, 0
  3946 00002F2B 7408                <1> 	je testtrue
  3947 00002F2D 38E0                <1> 	cmp al, ah
  3948 00002F2F 750C                <1> 	jne testfalse
  3949 00002F31 43                  <1> 	inc ebx
  3950 00002F32 46                  <1> 	inc esi
  3951 00002F33 EBF0                <1> 	jmp retest
  3952                              <1> testtrue:
  3953 00002F35 80FC00              <1> 	cmp ah, 0
  3954 00002F38 7503                <1> 	jne testfalse
  3955 00002F3A B001                <1> 	mov al, 1
  3956 00002F3C C3                  <1> 	ret
  3957                              <1> testfalse:
  3958 00002F3D 30C0                <1> 	xor al, al
  3959 00002F3F C3                  <1> 	ret
  3960                              <1> 
  3961                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3962 00002F40 30C0                <1> 	xor al, al
  3963                              <1> opretest:
  3964 00002F42 8A06                <1> 	mov al, [esi]
  3965 00002F44 8A23                <1> 	mov ah, [ebx]
  3966 00002F46 38E0                <1> 	cmp al, ah
  3967 00002F48 7510                <1> 	jne optestfalse
  3968 00002F4A 80FC00              <1> 	cmp ah, 0
  3969 00002F4D 7404                <1> 	je optesttrue
  3970 00002F4F 43                  <1> 	inc ebx
  3971 00002F50 46                  <1> 	inc esi
  3972 00002F51 EBEF                <1> 	jmp opretest
  3973                              <1> optesttrue:
  3974 00002F53 3C00                <1> 	cmp al, 0
  3975 00002F55 7503                <1> 	jne optestfalse
  3976 00002F57 B001                <1> 	mov al, 1
  3977 00002F59 C3                  <1> 	ret
  3978                              <1> optestfalse:
  3979 00002F5A 30C0                <1> 	xor al, al
  3980 00002F5C C3                  <1> 	ret
  3981                              <1> 
  3982                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3983 00002F5D 30C0                <1> 	xor al, al
  3984 00002F5F 8A06                <1> cndretest:	mov al, [esi]
  3985 00002F61 8A23                <1> 	mov ah, [ebx]
  3986 00002F63 38CC                <1> 	cmp ah, cl
  3987 00002F65 7408                <1> 	je cndtesttrue
  3988 00002F67 38E0                <1> 	cmp al, ah
  3989 00002F69 750B                <1> 	jne cndtestfalse
  3990 00002F6B 43                  <1> 	inc ebx
  3991 00002F6C 46                  <1> 	inc esi
  3992 00002F6D EBF0                <1> 	jmp cndretest
  3993                              <1> cndtesttrue:
  3994 00002F6F 38C8                <1> 	cmp al, cl
  3995 00002F71 7506                <1> 	jne cndtestalmost
  3996 00002F73 B001                <1> 	mov al, 1
  3997 00002F75 C3                  <1> 	ret
  3998                              <1> cndtestfalse:
  3999 00002F76 30C0                <1> 	xor al, al
  4000 00002F78 C3                  <1> 	ret
  4001                              <1> cndtestalmost:
  4002 00002F79 B002                <1> 	mov al, 2
  4003 00002F7B C3                  <1> 	ret
  4004                              <1> 	
  4005                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  4006                              <1> 		                ;ends if array seperator is found backwards after 0
  4007                              <1> 	arnxt:	      
  4008 00002F7C 88E8                <1> 		mov al, ch
  4009 00002F7E 88CC                <1> 		mov ah, cl        
  4010 00002F80 663906              <1> 		cmp [esi], ax
  4011 00002F83 7445                <1> 		je ardn
  4012 00002F85 66390E              <1> 		cmp [esi], cx
  4013 00002F88 7407                <1> 		je arfnd
  4014 00002F8A 46                  <1> 		inc esi
  4015 00002F8B 39DE                <1> 		cmp esi, ebx
  4016 00002F8D 733B                <1> 		jae ardn
  4017 00002F8F EBEB                <1> 		jmp arnxt
  4018 00002F91 83C602              <1> 	arfnd: add esi, 2
  4019 00002F94 891D[CB2F0000]      <1> 		mov [arbx], ebx
  4020 00002F9A 890D[CF2F0000]      <1> 		mov [arcx], ecx
  4021 00002FA0 E86FEDFFFF          <1> 		call print
  4022 00002FA5 8935[D12F0000]      <1> 		mov [arsi], esi
  4023 00002FAB E85FEDFFFF          <1> 		call printline
  4024 00002FB0 8B1D[CB2F0000]      <1> 		mov ebx, [arbx]
  4025 00002FB6 668B0D[CF2F0000]    <1> 		mov cx, [arcx]
  4026 00002FBD 8B35[D12F0000]      <1> 		mov esi, [arsi]
  4027 00002FC3 46                  <1> 		inc esi
  4028 00002FC4 39DE                <1> 		cmp esi, ebx
  4029 00002FC6 7302                <1> 		jae ardn
  4030 00002FC8 EBB2                <1> 		jmp arnxt
  4031 00002FCA C3                  <1> 	ardn:	ret
  4032 00002FCB 00000000            <1> arbx:	dw 0,0
  4033 00002FCF 0000                <1> arcx:	db 0,0
  4034 00002FD1 00000000            <1> arsi:	dw 0,0
  4035                              <1> 
  4036                              <1> clearbuffer:
  4037 00002FD5 BE[88C80300]        <1> 	mov esi, buf2
  4038 00002FDA B030                <1> 	mov al, '0'
  4039 00002FDC 81FE[9CC80300]      <1> clearbuf: cmp esi, numbuf
  4040 00002FE2 7305                <1> 	jae doneclearbuff
  4041 00002FE4 8806                <1> 	mov [esi], al
  4042 00002FE6 46                  <1> 	inc esi
  4043 00002FE7 EBF3                <1> 	jmp clearbuf
  4044                              <1> doneclearbuff: 
  4045 00002FE9 C3                  <1> 		ret
  4046                              <1> 
  4047                              <1> convert:
  4048 00002FEA 4E                  <1> 	dec esi
  4049 00002FEB 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  4050                              <1> .lp:
  4051 00002FED 89DE                <1> 	mov esi, ebx
  4052 00002FEF 83EE09              <1> 	sub esi, 9
  4053 00002FF2 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  4054 00002FF8 720A                <1> 	jb .8
  4055 00002FFA 81E900CA9A3B        <1> 	sub ecx, 1000000000
  4056 00003000 FE06                <1> 	inc byte [esi]
  4057 00003002 EBE9                <1> 	jmp .lp
  4058 00003004 46                  <1> .8:	inc esi
  4059 00003005 81F900E1F505        <1> 	cmp ecx, 100000000
  4060 0000300B 720A                <1> 	jb .7
  4061 0000300D 81E900E1F505        <1> 	sub ecx, 100000000
  4062 00003013 FE06                <1> 	inc byte [esi]
  4063 00003015 EBD6                <1> 	jmp .lp
  4064 00003017 46                  <1> .7:	inc esi
  4065 00003018 81F980969800        <1> 	cmp ecx, 10000000
  4066 0000301E 720A                <1> 	jb .6
  4067 00003020 81E980969800        <1> 	sub ecx, 10000000
  4068 00003026 FE06                <1> 	inc byte [esi]
  4069 00003028 EBC3                <1> 	jmp .lp
  4070 0000302A 46                  <1> .6:	inc esi
  4071 0000302B 81F940420F00        <1> 	cmp ecx, 1000000
  4072 00003031 720A                <1> 	jb .5
  4073 00003033 81E940420F00        <1> 	sub ecx, 1000000
  4074 00003039 FE06                <1> 	inc byte [esi]
  4075 0000303B EBB0                <1> 	jmp .lp
  4076 0000303D 46                  <1> .5:	inc esi
  4077 0000303E 81F9A0860100        <1> 	cmp ecx, 100000
  4078 00003044 720A                <1> 	jb .4
  4079 00003046 81E9A0860100        <1> 	sub ecx, 100000
  4080 0000304C FE06                <1> 	inc byte [esi]
  4081 0000304E EB9D                <1> 	jmp .lp
  4082 00003050 46                  <1> .4:	inc esi
  4083 00003051 81F910270000        <1> 	cmp ecx, 10000
  4084 00003057 720A                <1> 	jb .3
  4085 00003059 81E910270000        <1> 	sub ecx, 10000
  4086 0000305F FE06                <1> 	inc byte [esi]
  4087 00003061 EB8A                <1> 	jmp .lp
  4088 00003063 46                  <1> .3:	inc esi
  4089 00003064 81F9E8030000        <1> 	cmp ecx, 1000
  4090 0000306A 720D                <1> 	jb .2
  4091 0000306C 81E9E8030000        <1> 	sub ecx, 1000
  4092 00003072 FE06                <1> 	inc byte [esi]
  4093 00003074 E974FFFFFF          <1> 	jmp .lp
  4094 00003079 46                  <1> .2:	inc esi
  4095 0000307A 83F964              <1> 	cmp ecx, 100
  4096 0000307D 720A                <1> 	jb .1
  4097 0000307F 83E964              <1> 	sub ecx, 100
  4098 00003082 FE06                <1> 	inc byte [esi]
  4099 00003084 E964FFFFFF          <1> 	jmp .lp
  4100 00003089 46                  <1> .1:	inc esi
  4101 0000308A 83F90A              <1> 	cmp ecx, 10
  4102 0000308D 720A                <1> 	jb .0
  4103 0000308F 83E90A              <1> 	sub ecx, 10
  4104 00003092 FE06                <1> 	inc byte [esi]
  4105 00003094 E954FFFFFF          <1> 	jmp .lp
  4106 00003099 46                  <1> .0:	inc esi
  4107 0000309A 83F901              <1> 	cmp ecx, 1
  4108 0000309D 720A                <1> 	jb .dn
  4109 0000309F 83E901              <1> 	sub ecx, 1
  4110 000030A2 FE06                <1> 	inc byte [esi]
  4111 000030A4 E944FFFFFF          <1> 	jmp .lp
  4112                              <1> .dn:
  4113 000030A9 C3                  <1> 	ret
  4114                              <1> 
  4115                              <1> 	
  4116                              <1> 
  4117 000030AA 00<rept>            <1> hexnumber times 8 db 0
  4118 000030B2 202000              <1> hexnumberend db "  ",0
  4119                              <1> 
  4120                              <1> converthex:
  4121                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  4122 000030B5 56                  <1> 	push esi
  4123 000030B6 B030                <1> 	mov al, "0"
  4124 000030B8 39FE                <1> .clearlp: cmp esi, edi
  4125 000030BA 7305                <1> 	jae .doneclear
  4126 000030BC 8806                <1> 	mov [esi], al
  4127 000030BE 46                  <1> 	inc esi
  4128 000030BF EBF7                <1> 	jmp .clearlp
  4129                              <1> .doneclear:
  4130 000030C1 83EE02              <1> 	sub esi, 2
  4131 000030C4 89C8                <1> 	mov eax, ecx
  4132                              <1> .loop:
  4133 000030C6 30FF                <1> 	xor bh, bh
  4134 000030C8 88C3                <1> 	mov bl, al
  4135 000030CA 66C1E304            <1> 	shl bx, 4
  4136 000030CE C0EB04              <1> 	shr bl, 4
  4137 000030D1 86DF                <1> 	xchg bl, bh ;they are backwards
  4138 000030D3 80C330              <1> 	add bl, 48
  4139 000030D6 80FB39              <1> 	cmp bl, "9"
  4140 000030D9 7609                <1> 	jbe .goodbl
  4141 000030DB 80EB30              <1> 	sub bl, 48
  4142 000030DE 80EB0A              <1> 	sub bl, 0xA
  4143 000030E1 80C341              <1> 	add bl, "A"
  4144                              <1> .goodbl:
  4145 000030E4 80C730              <1> 	add bh, 48
  4146 000030E7 80FF39              <1> 	cmp bh, "9"
  4147 000030EA 7609                <1> 	jbe .goodbh
  4148 000030EC 80EF30              <1> 	sub bh, 48
  4149 000030EF 80EF0A              <1> 	sub bh, 0xA
  4150 000030F2 80C741              <1> 	add bh, "A"
  4151                              <1> .goodbh:
  4152 000030F5 C1E808              <1> 	shr eax, 8
  4153 000030F8 66891E              <1> 	mov [esi], bx
  4154 000030FB 83EE02              <1> 	sub esi, 2
  4155 000030FE 3B3424              <1> 	cmp esi, [esp]
  4156 00003101 7205                <1> 	jb .done
  4157 00003103 83F800              <1> 	cmp eax, 0
  4158 00003106 75BE                <1> 	jne .loop
  4159                              <1> .done:
  4160 00003108 5E                  <1> 	pop esi
  4161 00003109 C3                  <1> 	ret
  4162                              <1> 	
  4163                              <1> 	
  4164 0000310A 00                  <1> smallhex db 0
  4165 0000310B 01                  <1> firsthexshown db 1
  4166                              <1> showhexsmall:
  4167 0000310C C605[0A310000]01    <1> 	mov byte [smallhex], 1
  4168 00003113 E808000000          <1> 	call showhex
  4169 00003118 C605[0A310000]00    <1> 	mov byte [smallhex], 0
  4170 0000311F C3                  <1> 	ret
  4171                              <1> showhex:
  4172 00003120 60                  <1> 	pusha
  4173 00003121 BE[AA300000]        <1> 	mov esi, hexnumber
  4174 00003126 BF[B2300000]        <1> 	mov edi, hexnumberend
  4175 0000312B E885FFFFFF          <1> 	call converthex
  4176 00003130 803D[0B310000]01    <1> 	cmp byte [firsthexshown], 1
  4177 00003137 7503                <1> 	jne .show
  4178 00003139 6631D2              <1> 	xor dx, dx
  4179                              <1> .show:
  4180 0000313C 803D[0B310000]03    <1> 	cmp byte [firsthexshown], 3
  4181 00003143 7505                <1> 	jne .nonewhexline
  4182 00003145 E8C5EBFFFF          <1> 	call printline
  4183                              <1> .nonewhexline:
  4184 0000314A 803D[0B310000]04    <1> 	cmp byte [firsthexshown], 4
  4185 00003151 751F                <1> 	jne .notab
  4186 00003153 B1A0                <1> 	mov cl, 160
  4187 00003155 28D1                <1> 	sub cl, dl
  4188 00003157 C0E905              <1> 	shr cl, 5
  4189 0000315A C0E105              <1> 	shl cl, 5
  4190 0000315D 80F900              <1> 	cmp cl, 0
  4191 00003160 7507                <1> 	jne .nonewline
  4192 00003162 E8A8EBFFFF          <1> 	call printline
  4193 00003167 EB09                <1> 	jmp .notab
  4194                              <1> .nonewline:
  4195 00003169 80C20F              <1> 	add dl, 15
  4196 0000316C C0EA04              <1> 	shr dl, 4
  4197 0000316F C0E204              <1> 	shl dl, 4
  4198                              <1> .notab:
  4199 00003172 BE[AA300000]        <1> 	mov esi, hexnumber
  4200 00003177 803D[0A310000]01    <1> 	cmp byte [smallhex],1
  4201 0000317E 7503                <1> 	jne .nosmall
  4202 00003180 83C606              <1> 	add esi, 6
  4203                              <1> .nosmall:
  4204 00003183 803D[0B310000]05    <1> 	cmp byte [firsthexshown], 5
  4205 0000318A 7507                <1> 	jne .noquiet
  4206 0000318C E862EBFFFF          <1> 	call printquiet
  4207 00003191 EB15                <1> 	jmp .donequiet
  4208                              <1> .noquiet:
  4209 00003193 803D[0B310000]06    <1> 	cmp byte [firsthexshown], 6
  4210 0000319A 7507                <1> 	jne .normal
  4211 0000319C E865EBFFFF          <1> 	call printhighlight
  4212 000031A1 EB05                <1> 	jmp .donequiet
  4213                              <1> .normal:
  4214 000031A3 E86CEBFFFF          <1> 	call print
  4215                              <1> .donequiet:
  4216 000031A8 803D[0B310000]02    <1> 	cmp byte [firsthexshown], 2
  4217 000031AF 7505                <1> 	jne .shown
  4218 000031B1 E859EBFFFF          <1> 	call printline
  4219                              <1> .shown:
  4220 000031B6 C605[0B310000]00    <1> 	mov byte [firsthexshown], 0
  4221 000031BD 61                  <1> 	popa
  4222 000031BE C3                  <1> 	ret
  4223                              <1> 
  4224                              <1> 
  4225 000031BF 303030303030303030- <1> decnumber db "00000000000000"
  4226 000031C8 3030303030          <1>
  4227 000031CD 2000                <1> decnumberend: db " ",0
  4228                              <1> 
  4229                              <1> showdec: ;same as showhex, just uses decimal conversion
  4230 000031CF 60                  <1> 	pusha
  4231 000031D0 BF[BF310000]        <1> 	mov edi, decnumber
  4232 000031D5 BE[CD310000]        <1> 	mov esi, decnumberend
  4233                              <1> .clear:
  4234 000031DA C60730              <1> 	mov byte [edi], '0'
  4235 000031DD 47                  <1> 	inc edi
  4236 000031DE 39F7                <1> 	cmp edi, esi
  4237 000031E0 72F8                <1> 	jb .clear
  4238 000031E2 BF[BF310000]        <1> 	mov edi, decnumber
  4239 000031E7 E8FEFDFFFF          <1> 	call convert
  4240 000031EC 803D[0B310000]01    <1> 	cmp byte [firsthexshown], 1
  4241 000031F3 7503                <1> 	jne .show
  4242 000031F5 6631D2              <1> 	xor dx, dx
  4243                              <1> .show:
  4244 000031F8 803D[0B310000]03    <1> 	cmp byte [firsthexshown], 3
  4245 000031FF 7505                <1> 	jne .nonewdecline
  4246 00003201 E809EBFFFF          <1> 	call printline
  4247                              <1> .nonewdecline:
  4248 00003206 803D[0B310000]04    <1> 	cmp byte [firsthexshown], 4
  4249 0000320D 751F                <1> 	jne .notab
  4250 0000320F B1A0                <1> 	mov cl, 160
  4251 00003211 28D1                <1> 	sub cl, dl
  4252 00003213 C0E905              <1> 	shr cl, 5
  4253 00003216 C0E105              <1> 	shl cl, 5
  4254 00003219 80F900              <1> 	cmp cl, 0
  4255 0000321C 7507                <1> 	jne .nonewline
  4256 0000321E E8ECEAFFFF          <1> 	call printline
  4257 00003223 EB09                <1> 	jmp .notab
  4258                              <1> .nonewline:
  4259 00003225 80C20F              <1> 	add dl, 15
  4260 00003228 C0EA04              <1> 	shr dl, 4
  4261 0000322B C0E204              <1> 	shl dl, 4
  4262                              <1> .notab:
  4263 0000322E BE[BF310000]        <1> 	mov esi, decnumber
  4264 00003233 4E                  <1> 	dec esi
  4265                              <1> .sifind:
  4266 00003234 46                  <1> 	inc esi
  4267 00003235 81FE[CC310000]      <1> 	cmp esi, decnumberend - 1
  4268 0000323B 7305                <1> 	jae .nosifind
  4269 0000323D 803E30              <1> 	cmp byte [esi], '0'
  4270 00003240 74F2                <1> 	je .sifind
  4271                              <1> .nosifind:
  4272 00003242 E8CDEAFFFF          <1> 	call print
  4273 00003247 803D[0B310000]02    <1> 	cmp byte [firsthexshown], 2
  4274 0000324E 7505                <1> 	jne .shown
  4275 00003250 E8BAEAFFFF          <1> 	call printline
  4276                              <1> .shown:
  4277 00003255 C605[0B310000]00    <1> 	mov byte [firsthexshown], 0
  4278 0000325C 61                  <1> 	popa
  4279 0000325D C3                  <1> 	ret
  4280                              <1> 	
  4281                              <1> cnvrthextxt:
  4282 0000325E 31C9                <1> 	xor ecx, ecx
  4283 00003260 31C0                <1> 	xor eax, eax
  4284 00003262 31D2                <1> 	xor edx, edx
  4285 00003264 31DB                <1> 	xor ebx, ebx
  4286 00003266 4E                  <1> 	dec esi
  4287                              <1> .end:
  4288 00003267 46                  <1> 	inc esi
  4289 00003268 8A06                <1> 	mov al, [esi]
  4290 0000326A 3C00                <1> 	cmp al, 0
  4291 0000326C 75F9                <1> 	jne .end
  4292                              <1> .loop:
  4293 0000326E 4E                  <1> 	dec esi
  4294 0000326F 8A06                <1> 	mov al, [esi]
  4295 00003271 3C41                <1> 	cmp al, "A"
  4296 00003273 731F                <1> 	jae .char
  4297 00003275 2C30                <1> 	sub al, 48
  4298 00003277 3C10                <1> 	cmp al, 16
  4299 00003279 7718                <1> 	ja .done
  4300                              <1> .donechar:
  4301 0000327B 83FA00              <1> 	cmp edx, 0
  4302 0000327E 740B                <1> 	je .noshl
  4303 00003280 89D3                <1> 	mov ebx, edx
  4304                              <1> .shl:
  4305 00003282 C1E004              <1> 	shl eax, 4
  4306 00003285 4B                  <1> 	dec ebx
  4307 00003286 83FB00              <1> 	cmp ebx, 0
  4308 00003289 75F7                <1> 	jne .shl
  4309                              <1> .noshl:
  4310 0000328B 42                  <1> 	inc edx
  4311 0000328C 01C1                <1> 	add ecx, eax
  4312 0000328E 83FA08              <1> 	cmp edx, 8
  4313 00003291 72DB                <1> 	jb .loop
  4314                              <1> .done:
  4315 00003293 C3                  <1> 	ret
  4316                              <1> .char:
  4317 00003294 3C46                <1> 	cmp al, "F"
  4318 00003296 77FB                <1> 	ja .done
  4319 00003298 2C41                <1> 	sub al, "A"
  4320 0000329A 040A                <1> 	add al, 0xA
  4321 0000329C EBDD                <1> 	jmp .donechar
  4322                              <1> 	
  4323                              <1> 	
  4324                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4325 0000329E 31C9                <1> 	xor ecx, ecx
  4326 000032A0 31C0                <1> 	xor eax, eax
  4327 000032A2 31D2                <1> 	xor edx, edx
  4328 000032A4 31DB                <1> 	xor ebx, ebx
  4329 000032A6 4E                  <1> 	dec esi
  4330                              <1> .lp:
  4331 000032A7 46                  <1> 	inc esi
  4332 000032A8 8A06                <1> 	mov al, [esi]
  4333 000032AA 3C00                <1> 	cmp al, 0
  4334 000032AC 75F9                <1> 	jne .lp
  4335 000032AE 4E                  <1> 	dec esi
  4336 000032AF 8A06                <1> 	mov al, [esi]
  4337 000032B1 3C2E                <1> 	cmp al, '.'
  4338 000032B3 7503                <1> 	jne .dot
  4339 000032B5 46                  <1> 	inc esi
  4340 000032B6 EBEF                <1> 	jmp .lp
  4341                              <1> .dot:
  4342 000032B8 3C20                <1> 	cmp al, ' '
  4343 000032BA 7404                <1> 	je .zero
  4344 000032BC 3C30                <1> 	cmp al, '0'
  4345 000032BE 7504                <1> 	jne .txtlp
  4346                              <1> .zero: 
  4347 000032C0 39FE                <1> 		cmp esi, edi
  4348 000032C2 743F                <1> 		je .done
  4349                              <1> .txtlp:
  4350 000032C4 31C0                <1> 	xor eax, eax
  4351 000032C6 8A06                <1> 	mov al, [esi]
  4352 000032C8 3C3D                <1> 	cmp al, '='
  4353 000032CA 7437                <1> 	je .done
  4354 000032CC 3C30                <1> 	cmp al, 48
  4355 000032CE 7233                <1> 	jb .done
  4356 000032D0 3C3A                <1> 	cmp al, 58
  4357 000032D2 732F                <1> 	jae .done
  4358 000032D4 3C23                <1> 	cmp al, '#'
  4359 000032D6 742B                <1> 	je .done
  4360 000032D8 39FE                <1> 	cmp esi, edi
  4361 000032DA 7227                <1> 	jb .done
  4362 000032DC 83F900              <1> 	cmp ecx, 0
  4363 000032DF 7708                <1> 	ja .exp
  4364 000032E1 2C30                <1> .noexp:	sub al, 48
  4365 000032E3 01C2                <1> 	add edx, eax
  4366 000032E5 4E                  <1> 	dec esi
  4367 000032E6 41                  <1> 	inc ecx
  4368 000032E7 EBDB                <1> 	jmp .txtlp
  4369 000032E9 83F900              <1> .exp:	cmp ecx, 0
  4370 000032EC 74F3                <1> 	je .noexp
  4371 000032EE 2C30                <1> 	sub al, 48
  4372 000032F0 51                  <1> 	push ecx
  4373                              <1> .expmul:
  4374 000032F1 89C3                <1> 	mov ebx, eax
  4375 000032F3 01D8                <1> 	add eax, ebx
  4376 000032F5 C1E303              <1> 	shl ebx, 3
  4377 000032F8 01D8                <1> 	add eax, ebx
  4378 000032FA E2F5                <1> 	loop .expmul
  4379 000032FC 01C2                <1> 	add edx, eax
  4380 000032FE 59                  <1> 	pop ecx
  4381 000032FF 4E                  <1> 	dec esi
  4382 00003300 41                  <1> 	inc ecx
  4383 00003301 EBC1                <1> 	jmp .txtlp
  4384 00003303 89D1                <1> .done: mov ecx, edx
  4385 00003305 C3                  <1> 	ret
  4386                              <1> 
  4387                              <1> benchmarki: ;output number of clocks since initial value
  4388 00003306 0F31                <1> 	rdtsc
  4389 00003308 8B1D[15850000]      <1> 	mov ebx, [initialtsc]
  4390 0000330E 8B0D[19850000]      <1> 	mov ecx, [initialtsc + 4]
  4391 00003314 EB0E                <1> 	jmp benchmarkl.calc
  4392                              <1> 
  4393                              <1> benchmarkl: ;output number of clocks since last benchmark
  4394 00003316 0F31                <1> 	rdtsc
  4395 00003318 8B1D[1D850000]      <1> 	mov ebx, [lasttsc]
  4396 0000331E 8B0D[21850000]      <1> 	mov ecx, [lasttsc + 4]
  4397                              <1> .calc:
  4398 00003324 29D8                <1> 	sub eax, ebx
  4399 00003326 7701                <1> 	ja .noover
  4400 00003328 4A                  <1> 	dec edx
  4401                              <1> .noover:
  4402 00003329 29CA                <1> 	sub edx, ecx
  4403 0000332B 8B0C24              <1> 	mov ecx, [esp]
  4404 0000332E E8EDFDFFFF          <1> 	call showhex
  4405 00003333 89D1                <1> 	mov ecx, edx
  4406 00003335 E8E6FDFFFF          <1> 	call showhex
  4407 0000333A 89C1                <1> 	mov ecx, eax
  4408 0000333C E8DFFDFFFF          <1> 	call showhex
  4409 00003341 E8C9E9FFFF          <1> 	call printline
  4410 00003346 0F31                <1> 	rdtsc
  4411 00003348 A3[1D850000]        <1> 	mov [lasttsc], eax
  4412 0000334D 8915[21850000]      <1> 	mov [lasttsc + 4], edx
  4413 00003353 C3                  <1> 	ret
  4414                                  %include "source/programs.asm"
  4415 00003354 FF2C                <1> filetypes db 255,44
  4416                              <1> progstart:		;programs start here
  4417                              <1> indexfiles:
  4418 00003356 BE[56330000]        <1> 	mov esi, progstart
  4419 0000335B BB[08AA0300]        <1> 	mov ebx, fileindex
  4420 00003360 BF[56330000]        <1> 	mov edi, progstart
  4421 00003365 83EF02              <1> 	sub edi, 2
  4422                              <1> indexloop:
  4423 00003368 668B0E              <1> 	mov cx, [esi]
  4424                              <1> 	indexloop2:
  4425 0000336B 663B0F              <1> 		cmp cx, [edi]
  4426 0000336E 741E                <1> 		je indexloop2done
  4427 00003370 83EF02              <1> 		sub edi, 2
  4428 00003373 81FF[54330000]      <1> 		cmp edi, filetypes
  4429 00003379 73F0                <1> 		jae indexloop2
  4430 0000337B BF[56330000]        <1> 	mov edi, progstart
  4431 00003380 83EF02              <1> 	sub edi, 2
  4432 00003383 46                  <1> 	inc esi
  4433 00003384 81FE[3E510000]      <1> 	cmp esi, batchprogend
  4434 0000338A 733C                <1> 	jae indexloopdone
  4435 0000338C EBDA                <1> 	jmp indexloop
  4436                              <1> indexloop2done:
  4437 0000338E 66890B              <1> 	mov [ebx], cx
  4438 00003391 83C302              <1> 	add ebx, 2
  4439 00003394 83C602              <1> 	add esi, 2
  4440                              <1> 	nameindex:
  4441 00003397 8A0E                <1> 		mov cl, [esi]
  4442 00003399 80F900              <1> 		cmp cl, 0
  4443 0000339C 7406                <1> 		je nameindexdone
  4444 0000339E 880B                <1> 		mov [ebx], cl
  4445 000033A0 46                  <1> 		inc esi
  4446 000033A1 43                  <1> 		inc ebx
  4447 000033A2 EBF3                <1> 		jmp nameindex
  4448                              <1> 	nameindexdone:
  4449 000033A4 43                  <1> 		inc ebx
  4450 000033A5 66C7030000          <1> 		mov word [ebx], 0
  4451 000033AA 83C302              <1> 		add ebx, 2
  4452 000033AD 46                  <1> 		inc esi
  4453 000033AE 8933                <1> 		mov [ebx], esi
  4454 000033B0 83C304              <1> 		add ebx, 4
  4455 000033B3 66C7030000          <1> 		mov word [ebx], 0
  4456 000033B8 83C302              <1> 		add ebx, 2
  4457 000033BB 81FB[08AE0300]      <1> 		cmp ebx, fileindexend
  4458 000033C1 7305                <1> 		jae indexloopdone
  4459 000033C3 83C601              <1> 		add esi, 1
  4460 000033C6 EBA0                <1> 		jmp indexloop
  4461 000033C8 C605[D0330000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4462 000033CF C3                  <1> 		ret
  4463 000033D0 00                  <1> indexdone db 0
  4464                              <1> %include 'source/programs/_comment.asm' ;#
  4465 000033D1 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4466 000033D5 C3                  <2> 	ret 
  4467                              <1> %include 'source/programs/_math.asm' ;!
  4468 000033D6 FF2C2100            <2> db 255,44,"!",0
  4469                              <2> 	num:	
  4470 000033DA E8F6FBFFFF          <2> 		call clearbuffer
  4471 000033DF C605[33360000]00    <2> 		mov byte [decimal], 0
  4472 000033E6 C605[34360000]00    <2> 		mov byte [decimal2], 0
  4473 000033ED 8B35[1E2F0000]      <2> 		mov esi, [currentcommandloc]
  4474 000033F3 31C0                <2> 		xor eax, eax
  4475 000033F5 31C9                <2> 		xor ecx, ecx
  4476 000033F7 31DB                <2> 		xor ebx, ebx
  4477 000033F9 8A06                <2> 	num2:	mov al, [esi]
  4478 000033FB 3C2B                <2> 		cmp al, '+'
  4479 000033FD 7416                <2> 		je operatorfound
  4480 000033FF 3C2D                <2> 		cmp al, '-'
  4481 00003401 7412                <2> 		je operatorfound
  4482 00003403 3C2A                <2> 		cmp al, '*'
  4483 00003405 740E                <2> 		je operatorfound
  4484 00003407 3C2F                <2> 		cmp al, '/'
  4485 00003409 740A                <2> 		je operatorfound
  4486 0000340B 3C5E                <2> 		cmp al, '^'
  4487 0000340D 7406                <2> 		je operatorfound
  4488 0000340F 46                  <2> 		inc esi
  4489 00003410 84C0                <2> 		test al, al
  4490 00003412 75E5                <2> 		jnz num2
  4491 00003414 C3                  <2> 		ret
  4492 00003415 50                  <2> 	operatorfound: push eax
  4493 00003416 30E4                <2> 		xor ah, ah
  4494 00003418 8826                <2> 		mov [esi], ah
  4495 0000341A 89F7                <2> 		mov edi, esi
  4496 0000341C 46                  <2> 		inc esi
  4497 0000341D 8A06                <2> 		mov al, [esi]
  4498 0000341F 3C25                <2> 		cmp al, '%'
  4499 00003421 0F845E000000        <2> 		je near resultnum1
  4500                              <2> 	varnum2: 
  4501 00003427 57                  <2> 		push edi
  4502 00003428 E8A0000000          <2> 		call checkdecimal
  4503 0000342D 5F                  <2> 		pop edi
  4504 0000342E E86BFEFFFF          <2> 		call cnvrttxt
  4505                              <2> 	vrnm2:
  4506 00003433 89CB                <2> 		mov ebx, ecx
  4507 00003435 53                  <2> 		push ebx
  4508 00003436 E89AFBFFFF          <2> 		call clearbuffer
  4509 0000343B 8B35[1E2F0000]      <2> 		mov esi, [currentcommandloc]
  4510 00003441 89F7                <2> 		mov edi, esi
  4511 00003443 46                  <2> 		inc esi
  4512 00003444 8A06                <2> 		mov al, [esi]
  4513 00003446 3C25                <2> 		cmp al, '%'
  4514 00003448 0F844B000000        <2> 		je near resultnum2
  4515                              <2> 	varnum4: 
  4516 0000344E 57                  <2> 		push edi
  4517 0000344F E865000000          <2> 		call checkdecimal2
  4518 00003454 5F                  <2> 		pop edi
  4519 00003455 E844FEFFFF          <2> 		call cnvrttxt
  4520                              <2> 	vrnm4:
  4521 0000345A 5B                  <2> 		pop ebx
  4522 0000345B 58                  <2> 		pop eax
  4523 0000345C 3C2B                <2> 		cmp al, '+'
  4524 0000345E 0F8497000000        <2> 		je near plusnum
  4525 00003464 3C2D                <2> 		cmp al, '-'
  4526 00003466 0F8498000000        <2> 		je near subnum
  4527 0000346C 3C2A                <2> 		cmp al, '*'
  4528 0000346E 0F8499000000        <2> 		je near mulnum
  4529 00003474 3C2F                <2> 		cmp al, '/'
  4530 00003476 0F84A4000000        <2> 		je near divnum
  4531 0000347C 3C5E                <2> 		cmp al, '^'
  4532 0000347E 0F84BB000000        <2> 		je near expnum
  4533 00003484 C3                  <2> 		ret
  4534                              <2> 	resultnum1:
  4535 00003485 8A0D[35360000]      <2> 		mov cl, [decimalresult]
  4536 0000348B 880D[33360000]      <2> 		mov [decimal], cl
  4537 00003491 8B0D[36360000]      <2> 		mov ecx, [result]
  4538 00003497 EB9A                <2> 		jmp vrnm2
  4539                              <2> 	resultnum2:
  4540 00003499 8A0D[33360000]      <2> 		mov cl, [decimal]
  4541 0000349F 880D[34360000]      <2> 		mov [decimal2], cl
  4542 000034A5 8A0D[35360000]      <2> 		mov cl, [decimalresult]
  4543 000034AB 880D[33360000]      <2> 		mov [decimal], cl
  4544 000034B1 8B0D[36360000]      <2> 		mov ecx, [result]
  4545 000034B7 EBA1                <2> 		jmp vrnm4
  4546                              <2> 	checkdecimal2:
  4547 000034B9 8A25[33360000]      <2> 		mov ah, [decimal]
  4548 000034BF 8825[34360000]      <2> 		mov [decimal2], ah
  4549 000034C5 30E4                <2> 		xor ah, ah
  4550 000034C7 8825[33360000]      <2> 		mov [decimal], ah
  4551                              <2> 	checkdecimal:
  4552 000034CD 89F7                <2> 		mov edi, esi
  4553                              <2> 	chkdec1:
  4554 000034CF 8A07                <2> 		mov al, [edi]
  4555 000034D1 3C2E                <2> 		cmp al, '.'
  4556 000034D3 0F840B000000        <2> 		je near fnddec
  4557 000034D9 3C00                <2> 		cmp al, 0
  4558 000034DB 0F8419000000        <2> 		je near nodecimal
  4559 000034E1 47                  <2> 		inc edi
  4560 000034E2 EBEB                <2> 		jmp chkdec1
  4561                              <2> 	fnddec:
  4562 000034E4 8A4701              <2> 		mov al, [edi + 1]
  4563 000034E7 8807                <2> 		mov [edi], al
  4564 000034E9 3C00                <2> 		cmp al, 0
  4565 000034EB 0F8409000000        <2> 		je near nodecimal
  4566 000034F1 FE05[33360000]      <2> 		inc byte [decimal]
  4567 000034F7 47                  <2> 		inc edi
  4568 000034F8 EBEA                <2> 		jmp fnddec
  4569                              <2> 	nodecimal:
  4570 000034FA C3                  <2> 		ret
  4571                              <2> 	plusnum:
  4572 000034FB E8F4000000          <2> 		call decaddfix
  4573 00003500 01D9                <2> 		add ecx, ebx
  4574 00003502 EB75                <2> 		jmp retnum
  4575                              <2> 	subnum:
  4576 00003504 E8EB000000          <2> 		call decaddfix
  4577 00003509 29D9                <2> 		sub ecx, ebx
  4578 0000350B EB6C                <2> 		jmp retnum
  4579                              <2> 	mulnum:
  4580 0000350D A0[34360000]        <2> 		mov al, [decimal2]
  4581 00003512 0005[33360000]      <2> 		add [decimal], al
  4582 00003518 89C8                <2> 		mov eax, ecx
  4583 0000351A F7E3                <2> 		mul ebx
  4584 0000351C 89C1                <2> 		mov ecx, eax
  4585 0000351E EB59                <2> 		jmp retnum
  4586                              <2> 	divnum:
  4587 00003520 E8CF000000          <2> 		call decaddfix
  4588 00003525 30C0                <2> 		xor al, al
  4589 00003527 A2[33360000]        <2> 		mov [decimal], al
  4590 0000352C 31D2                <2> 		xor edx, edx
  4591 0000352E 89C8                <2> 		mov eax, ecx
  4592 00003530 83FB00              <2> 		cmp ebx, 0
  4593 00003533 0F8440000000        <2> 		je near retnum
  4594 00003539 F7F3                <2> 		div ebx
  4595 0000353B 89C1                <2> 		mov ecx, eax
  4596 0000353D EB3A                <2> 		jmp retnum
  4597                              <2> 	expnum:
  4598 0000353F 8A15[33360000]      <2> 		mov dl, [decimal]
  4599 00003545 8815[34360000]      <2> 		mov [decimal2], dl
  4600 0000354B 31D2                <2> 		xor edx, edx
  4601 0000354D 89C8                <2> 		mov eax, ecx
  4602 0000354F 89D9                <2> 		mov ecx, ebx
  4603 00003551 89C3                <2> 		mov ebx, eax
  4604 00003553 83F900              <2> 		cmp ecx, 0
  4605 00003556 741C                <2> 		je noexpnum
  4606 00003558 49                  <2> 		dec ecx
  4607 00003559 83F900              <2> 		cmp ecx, 0
  4608 0000355C 7412                <2> 		je noexpnumlp
  4609 0000355E F7E3                <2> 	expnumlp: mul ebx
  4610 00003560 8A15[34360000]      <2> 		mov dl, [decimal2]
  4611 00003566 0015[33360000]      <2> 		add [decimal], dl
  4612 0000356C 31D2                <2> 		xor edx, edx
  4613 0000356E E2EE                <2> 		loop expnumlp
  4614                              <2> 	noexpnumlp:
  4615 00003570 89C1                <2> 		mov ecx, eax
  4616 00003572 EB05                <2> 		jmp retnum
  4617                              <2> 	noexpnum:
  4618 00003574 B901000000          <2> 		mov ecx, 1
  4619                              <2> 	retnum: 
  4620 00003579 BE[9CC80300]        <2> 		mov esi, numbuf
  4621 0000357E 890D[36360000]      <2> 		mov [result], ecx
  4622 00003584 E861FAFFFF          <2> 		call convert
  4623 00003589 BE[9CC80300]        <2> 		mov esi, numbuf
  4624 0000358E 8A25[33360000]      <2> 		mov ah, [decimal]
  4625 00003594 8825[35360000]      <2> 		mov [decimalresult], ah
  4626 0000359A 80FC00              <2> 		cmp ah, 0
  4627 0000359D 0F8425000000        <2> 		je near noputdecimal
  4628                              <2> 	putdecimal:
  4629 000035A3 4E                  <2> 		dec esi
  4630 000035A4 FECC                <2> 		dec ah
  4631 000035A6 80FC00              <2> 		cmp ah, 0
  4632 000035A9 0F87F4FFFFFF        <2> 		ja near putdecimal
  4633 000035AF 4E                  <2> 		dec esi
  4634 000035B0 8A06                <2> 		mov al, [esi]
  4635 000035B2 C6062E              <2> 		mov byte [esi], '.'
  4636                              <2> 	decputloop:
  4637 000035B5 4E                  <2> 		dec esi
  4638 000035B6 8A26                <2> 		mov ah, [esi]
  4639 000035B8 8806                <2> 		mov [esi], al
  4640 000035BA 88E0                <2> 		mov al, ah
  4641 000035BC 81FE[88C80300]      <2> 		cmp esi, buf2
  4642 000035C2 0F87EDFFFFFF        <2> 		ja near decputloop
  4643                              <2> 	noputdecimal:
  4644 000035C8 BE[88C80300]        <2> 		mov esi, buf2
  4645 000035CD E805000000          <2> 		call chkadd
  4646 000035D2 C3                  <2> 		ret
  4647 000035D3 00000000            <2> edxnumbuf dw 0,0
  4648 000035D7 8A06                <2> 	chkadd: mov al, [esi]
  4649 000035D9 3C30                <2> 		cmp al, '0'
  4650 000035DB 750C                <2> 		jne dnadd
  4651 000035DD 46                  <2> 		inc esi
  4652 000035DE 81FE[9CC80300]      <2> 		cmp esi, numbuf
  4653 000035E4 7402                <2> 		je dnaddm1
  4654 000035E6 EBEF                <2> 		jmp chkadd
  4655 000035E8 4E                  <2> 	dnaddm1: dec esi
  4656 000035E9 E826E7FFFF          <2> 	dnadd:	call print
  4657 000035EE E81CE7FFFF          <2> 		call printline
  4658 000035F3 C3                  <2> 		ret
  4659                              <2> 		
  4660                              <2> 	decaddfix:
  4661 000035F4 A0[34360000]        <2> 		mov al, [decimal2]
  4662 000035F9 8A25[33360000]      <2> 		mov ah, [decimal]
  4663 000035FF 38E0                <2> 		cmp al, ah
  4664 00003601 742F                <2> 		je gooddecadd
  4665 00003603 38E0                <2> 		cmp al, ah
  4666 00003605 7217                <2> 		jb lowdecadd
  4667                              <2> 	highdecadd:
  4668 00003607 FEC4                <2> 		inc ah
  4669 00003609 89CA                <2> 		mov edx, ecx
  4670 0000360B C1E103              <2> 		shl ecx, 3
  4671 0000360E 01D1                <2> 		add ecx, edx
  4672 00003610 01D1                <2> 		add ecx, edx
  4673 00003612 38E0                <2> 		cmp al, ah
  4674 00003614 77F1                <2> 		ja highdecadd
  4675 00003616 8825[33360000]      <2> 		mov [decimal], ah
  4676 0000361C EB14                <2> 		jmp gooddecadd
  4677                              <2> 	lowdecadd:
  4678 0000361E FEC0                <2> 		inc al
  4679 00003620 89DA                <2> 		mov edx, ebx
  4680 00003622 C1E303              <2> 		shl ebx, 3
  4681 00003625 01D3                <2> 		add ebx, edx
  4682 00003627 01D3                <2> 		add ebx, edx
  4683 00003629 38E0                <2> 		cmp al, ah
  4684 0000362B 72F1                <2> 		jb lowdecadd
  4685 0000362D A2[33360000]        <2> 		mov [decimal], al
  4686                              <2> 	gooddecadd:
  4687 00003632 C3                  <2> 		ret
  4688                              <2> 		
  4689 00003633 00                  <2> decimal db 0
  4690 00003634 00                  <2> decimal2 db 0
  4691 00003635 00                  <2> decimalresult db 0
  4692 00003636 00000000            <2> result dd 0
  4693                              <1> %include 'source/programs/_variables.asm' ;% and $
  4694 0000363A FF2C2500            <2> db 255,44,"%",0
  4695                              <2> 	ans:
  4696 0000363E BE[88C80300]        <2> 		mov esi, buf2
  4697 00003643 E88FFFFFFF          <2> 		call chkadd
  4698 00003648 C3                  <2> 		ret
  4699                              <2> 		
  4700 00003649 FF2C2400            <2> db 255,44,"$",0
  4701 0000364D 8B35[1E2F0000]      <2> var: mov esi, [currentcommandloc]
  4702 00003653 BB[88B00300]        <2> 	mov ebx, variables
  4703 00003658 8A06                <2> lkeq:	mov al, [esi]
  4704 0000365A 3C3D                <2> 	cmp al, '='
  4705 0000365C 741B                <2> 	je eqfnd	;is there an '=' sign?
  4706 0000365E 3C00                <2> 	cmp al, 0
  4707 00003660 7403                <2> 	je echovars
  4708 00003662 46                  <2> 	inc esi
  4709 00003663 EBF3                <2> 	jmp lkeq
  4710 00003665 BE[88B00300]        <2> echovars: mov esi, variables
  4711 0000366A BB[88C00300]        <2> 	mov ebx, varend
  4712 0000366F B105                <2> 	mov cl, 5
  4713 00003671 B504                <2> 	mov ch, 4
  4714 00003673 E804F9FFFF          <2> 	call array
  4715 00003678 C3                  <2> 	ret
  4716 00003679 46                  <2> eqfnd:	inc esi
  4717 0000367A 8A06                <2> 	mov al, [esi]
  4718 0000367C 3C00                <2> 	cmp al, 0
  4719 0000367E 740D                <2> 	je readvar
  4720 00003680 8B35[1E2F0000]      <2> 	mov esi, [currentcommandloc]
  4721 00003686 BB[88B00300]        <2> 	mov ebx, variables
  4722 0000368B EB19                <2> 	jmp seek
  4723                              <2> readvar:
  4724 0000368D B00A                <2> 	mov al, 10
  4725 0000368F 66BB0700            <2> 	mov bx, 7
  4726 00003693 C605[D7220000]00    <2> 	mov byte [commandedit], 0
  4727 0000369A BF[88C80300]        <2> 	mov edi, buftxtend
  4728 0000369F E89AE7FFFF          <2> 	call rdprint
  4729 000036A4 EBA7                <2> 	jmp var
  4730 000036A6 668B03              <2> seek:	mov ax, [ebx]
  4731 000036A9 B105                <2> 	mov cl, 5
  4732 000036AB B504                <2> 	mov ch, 4
  4733 000036AD 6683F800            <2> 	cmp ax, 0
  4734 000036B1 0F8458000000        <2> 	je near save
  4735 000036B7 6639C8              <2> 	cmp ax, cx
  4736 000036BA 7403                <2> 	je skfnd
  4737 000036BC 43                  <2> 	inc ebx
  4738 000036BD EBE7                <2> 	jmp seek
  4739 000036BF 8B35[1E2F0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4740 000036C5 46                  <2> 	inc esi
  4741 000036C6 83C302              <2> 	add ebx, 2
  4742 000036C9 89DF                <2> 	mov edi, ebx
  4743 000036CB B13D                <2> 	mov cl, '='
  4744 000036CD E88BF8FFFF          <2> 	call cndtest
  4745 000036D2 3C01                <2> 	cmp al, 1	
  4746 000036D4 7418                <2> 	je varfnd
  4747 000036D6 89FB                <2> 	mov ebx, edi
  4748 000036D8 8B35[1E2F0000]      <2> 	mov esi, [currentcommandloc]
  4749 000036DE 668B03              <2> 	mov ax, [ebx]
  4750 000036E1 6683F800            <2> 	cmp ax, 0
  4751 000036E5 0F8424000000        <2> 	je near save
  4752 000036EB 43                  <2> 	inc ebx
  4753 000036EC EBB8                <2> 	jmp seek
  4754 000036EE 8A03                <2> varfnd:	mov al, [ebx]
  4755 000036F0 3C04                <2> 	cmp al, 4
  4756 000036F2 7404                <2> 	je save2
  4757 000036F4 4B                  <2> 	dec ebx
  4758 000036F5 4E                  <2> 	dec esi
  4759 000036F6 EBF6                <2> 	jmp varfnd
  4760 000036F8 4B                  <2> save2:	dec ebx
  4761 000036F9 4E                  <2> 	dec esi
  4762 000036FA 8A03                <2> 	mov al, [ebx]
  4763 000036FC 3C05                <2> 	cmp al, 5
  4764 000036FE 7402                <2> 	je remove
  4765 00003700 EBEC                <2> 	jmp varfnd
  4766 00003702 8A03                <2> remove: mov al, [ebx]
  4767 00003704 3C00                <2> 	cmp al, 0
  4768 00003706 749E                <2> 	je seek
  4769 00003708 30C0                <2> 	xor al, al
  4770 0000370A 8803                <2> 	mov [ebx], al
  4771 0000370C 43                  <2> 	inc ebx
  4772 0000370D EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4773 0000370F 8B35[1E2F0000]      <2> save:	mov esi, [currentcommandloc]
  4774 00003715 43                  <2> 	inc ebx
  4775 00003716 B005                <2> 	mov al, 5
  4776 00003718 B404                <2> 	mov ah, 4
  4777 0000371A 668903              <2> 	mov [ebx], ax
  4778 0000371D 43                  <2> 	inc ebx
  4779 0000371E 43                  <2> svhere:	inc ebx
  4780 0000371F 46                  <2> 	inc esi
  4781 00003720 8A06                <2> 	mov al, [esi]
  4782 00003722 3C00                <2> 	cmp al, 0
  4783 00003724 0F844A000000        <2> 	je near svdone
  4784 0000372A 3C25                <2> 	cmp al, '%'
  4785 0000372C 7404                <2> 	je ans2
  4786 0000372E 8803                <2> 	mov [ebx], al	
  4787 00003730 EBEC                <2> 	jmp svhere
  4788 00003732 56                  <2> ans2:	push esi
  4789 00003733 BE[88C80300]        <2> 	mov esi, buf2
  4790 00003738 E823000000          <2> 	call ansfnd
  4791 0000373D E803000000          <2> 	call anscp
  4792 00003742 5E                  <2> 	pop esi
  4793 00003743 EBD9                <2> 	jmp svhere
  4794 00003745 8A06                <2> anscp:	mov al, [esi]
  4795 00003747 8803                <2> 	mov [ebx], al
  4796 00003749 81FE[9CC80300]      <2> 	cmp esi, numbuf
  4797 0000374F 74CD                <2> 	je svhere
  4798 00003751 3C00                <2> 	cmp al, 0
  4799 00003753 74C9                <2> 	je svhere
  4800 00003755 43                  <2> 	inc ebx
  4801 00003756 46                  <2> 	inc esi
  4802 00003757 EBEC                <2> 	jmp anscp
  4803 00003759 5E                  <2> ansnf:	pop esi
  4804 0000375A 8A06                <2> 	mov al, [esi]
  4805 0000375C 8803                <2> 	mov [ebx], al
  4806 0000375E EBBE                <2> 	jmp svhere
  4807 00003760 46                  <2> ansfnd:	inc esi
  4808 00003761 81FE[9BC80300]      <2> 	cmp esi, numbuf - 1
  4809 00003767 740A                <2> 	je fndans
  4810 00003769 8A06                <2> 	mov al, [esi]
  4811 0000376B 3C00                <2> 	cmp al, 0
  4812 0000376D 74EA                <2> 	je ansnf
  4813 0000376F 3C30                <2> 	cmp al, '0'
  4814 00003771 74ED                <2> 	je ansfnd
  4815                              <2> fndans:
  4816 00003773 C3                  <2> 	ret
  4817 00003774 30C0                <2> svdone:	xor al, al
  4818 00003776 8803                <2> 	mov [ebx], al
  4819 00003778 C3                  <2> 	ret
  4820                              <1> %include 'source/programs/_run.asm' ;./
  4821 00003779 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4822 0000377D FF2C2E2F00          <2> 	db 255,44,"./",0
  4823                              <2> rundiskprog:
  4824 00003782 8B3D[1E2F0000]      <2> 	mov edi, [currentcommandloc]
  4825 00003788 83C702              <2> 	add edi, 2
  4826 0000378B BE00004000          <2> 	mov esi, 0x400000
  4827 00003790 E8FE2D0000          <2> 	call loadfile
  4828 00003795 81FA94010000        <2> 	cmp edx, 404
  4829 0000379B 7461                <2> 	je noprogfound
  4830 0000379D BB00004000          <2> 	mov ebx, 0x400000
  4831 000037A2 A1[79370000]        <2> 	mov eax, [elfstart]
  4832 000037A7 3903                <2> 	cmp [ebx], eax
  4833 000037A9 0F8431000000        <2> 	je near runelf
  4834 000037AF 66813B4558          <2> 	cmp word [ebx], "EX"
  4835 000037B4 756B                <2> 	jne progbatchfound
  4836 000037B6 83C302              <2> 	add ebx, 2
  4837 000037B9 8B3D[1E2F0000]      <2> 	mov edi, [currentcommandloc]
  4838 000037BF 83C702              <2> 	add edi, 2
  4839                              <2> findspaceprog:
  4840 000037C2 8A07                <2> 	mov al, [edi]
  4841 000037C4 47                  <2> 	inc edi
  4842 000037C5 3C20                <2> 	cmp al, " "
  4843 000037C7 75F9                <2> 	jne findspaceprog
  4844                              <2> findnonspaceprog:
  4845 000037C9 8A07                <2> 	mov al, [edi]
  4846 000037CB 47                  <2> 	inc edi
  4847 000037CC 3C20                <2> 	cmp al, " "
  4848 000037CE 74F9                <2> 	je findnonspaceprog
  4849 000037D0 4F                  <2> 	dec edi
  4850 000037D1 8925[08AE0300]      <2> 	mov [previousstack], esp
  4851 000037D7 FFD3                <2> 	call ebx
  4852 000037D9 8B25[08AE0300]      <2> 	mov esp, [previousstack]
  4853 000037DF C3                  <2> 	ret
  4854                              <2> runelf:
  4855 000037E0 8B3D[1E2F0000]      <2> 	mov edi, [currentcommandloc]
  4856 000037E6 83C702              <2> 	add edi, 2
  4857 000037E9 81C380000000        <2> 	add ebx, 0x80
  4858 000037EF 8925[08AE0300]      <2> 	mov [previousstack], esp
  4859 000037F5 FFD3                <2> 	call ebx
  4860 000037F7 8B25[08AE0300]      <2> 	mov esp, [previousstack]
  4861 000037FD C3                  <2> 	ret
  4862                              <2> noprogfound:
  4863 000037FE BE[B1840000]        <2> 	mov esi, notfound1
  4864 00003803 E80CE5FFFF          <2> 	call print
  4865 00003808 8B35[1E2F0000]      <2> 	mov esi, [currentcommandloc]
  4866 0000380E 83C602              <2> 	add esi, 2
  4867 00003811 E8FEE4FFFF          <2> 	call print
  4868 00003816 BE[B9840000]        <2> 	mov esi, notfound2
  4869 0000381B E8F4E4FFFF          <2> 	call print
  4870 00003820 C3                  <2> 	ret
  4871                              <2> progbatchfound:
  4872 00003821 BF00004000          <2> 		mov edi, 0x400000
  4873 00003826 C605[82B00300]01    <2> 		mov byte [BATCHISON], 1
  4874                              <2> 	batchrunloop:
  4875 0000382D E82BF4FFFF          <2> 		call buftxtclear
  4876 00003832 BE[88C40300]        <2> 		mov esi, buftxt
  4877 00003837 8935[1E2F0000]      <2> 		mov [currentcommandloc], esi
  4878                              <2> 	batchrunloop2:
  4879 0000383D B10A                <2> 		mov cl, 10
  4880 0000383F B50D                <2> 		mov ch, 13
  4881 00003841 380F                <2> 		cmp [edi], cl
  4882 00003843 0F8419000000        <2> 		je near nxtbatchrunline
  4883 00003849 382F                <2> 		cmp [edi], ch
  4884 0000384B 0F8411000000        <2> 		je near nxtbatchrunline
  4885 00003851 803F00              <2> 		cmp byte [edi], 0
  4886 00003854 0F8408000000        <2> 		je near nxtbatchrunline
  4887 0000385A 8A07                <2> 		mov al, [edi]
  4888 0000385C 8806                <2> 		mov [esi], al
  4889 0000385E 46                  <2> 		inc esi
  4890 0000385F 47                  <2> 		inc edi
  4891 00003860 EBDB                <2> 		jmp batchrunloop2
  4892                              <2> 	nxtbatchrunline:
  4893 00003862 47                  <2> 		inc edi
  4894 00003863 380F                <2> 		cmp [edi], cl
  4895 00003865 74FB                <2> 		je nxtbatchrunline
  4896 00003867 382F                <2> 		cmp [edi], ch
  4897 00003869 74F7                <2> 		je nxtbatchrunline
  4898 0000386B 893D[C9380000]      <2> 		mov [batchedi], edi
  4899 00003871 893D[7EB00300]      <2> 		mov [BATCHPOS], edi
  4900 00003877 C60600              <2> 		mov byte [esi], 0
  4901 0000387A BE[88C40300]        <2> 		mov esi, buftxt
  4902 0000387F 803E00              <2> 		cmp byte [esi], 0
  4903 00003882 0F8439000000        <2> 		je near nobatchfoundrun
  4904 00003888 31DB                <2> 		xor ebx, ebx
  4905 0000388A 8A1D[19B00300]      <2> 		mov bl, [IFON]
  4906 00003890 80FB00              <2> 		cmp bl, 0
  4907 00003893 0F8534000000        <2> 		jne near iftestbatch
  4908                              <2> 	doneiftest:
  4909 00003899 803D[93390000]00    <2> 		cmp byte [runnextline], 0
  4910 000038A0 0F8405000000        <2> 		je near noruniftest
  4911 000038A6 E8A3F5FFFF          <2> 		call run
  4912                              <2> 	noruniftest:
  4913 000038AB C605[93390000]01    <2> 		mov byte [runnextline], 1
  4914 000038B2 8B3D[C9380000]      <2> 		mov edi, [batchedi]
  4915 000038B8 803F00              <2> 		cmp byte [edi], 0
  4916 000038BB 0F856CFFFFFF        <2> 		jne near batchrunloop
  4917                              <2> 	nobatchfoundrun:
  4918 000038C1 C605[82B00300]00    <2> 		mov byte [BATCHISON], 0
  4919 000038C8 C3                  <2> 		ret
  4920                              <2> 	
  4921 000038C9 00000000            <2> batchedi dd 0	
  4922                              <2> 	
  4923                              <2> 	iftestbatch:
  4924 000038CD BE[1AB00300]        <2> 		mov esi, IFTRUE
  4925 000038D2 01DE                <2> 		add esi, ebx
  4926 000038D4 803E00              <2> 		cmp byte [esi], 0
  4927 000038D7 0F85BCFFFFFF        <2> 		jne near doneiftest
  4928 000038DD 881D[94390000]      <2> 		mov [iffalsebuf], bl
  4929 000038E3 803D[83B00300]01    <2> 		cmp byte [LOOPON], 1
  4930 000038EA 0F8510000000        <2> 		jne near fifindbatch
  4931 000038F0 E938FFFFFF          <2> 		jmp batchrunloop
  4932                              <2> 	elsetestbatch:
  4933 000038F5 C60601              <2> 		mov byte [esi], 1
  4934 000038F8 83C705              <2> 		add edi, 5
  4935 000038FB E92DFFFFFF          <2> 		jmp batchrunloop
  4936                              <2> 	fifindbatch:
  4937 00003900 66B96966            <2> 		mov cx, "if"
  4938 00003904 66B86669            <2> 		mov ax, "fi"
  4939 00003908 663907              <2> 		cmp [edi], ax
  4940 0000390B 0F8424000000        <2> 		je near fifoundbatch
  4941 00003911 66390F              <2> 		cmp [edi], cx
  4942 00003914 0F845F000000        <2> 		je near iffoundbatch
  4943 0000391A 803F00              <2> 		cmp byte [edi], 0
  4944 0000391D 0F8412000000        <2> 		je near fifoundbatch
  4945 00003923 B8656C7365          <2> 		mov eax, "else"
  4946 00003928 3907                <2> 		cmp [edi], eax
  4947 0000392A 0F84C5FFFFFF        <2> 		je near elsetestbatch
  4948 00003930 E976FFFFFF          <2> 		jmp noruniftest
  4949                              <2> 	fifoundbatch:
  4950 00003935 83C702              <2> 		add edi, 2
  4951 00003938 B00A                <2> 		mov al, 10
  4952 0000393A 3807                <2> 		cmp [edi], al
  4953 0000393C 0F840B000000        <2> 		je near goodfibatch
  4954 00003942 803F00              <2> 		cmp byte [edi], 0
  4955 00003945 0F8476FFFFFF        <2> 		je near nobatchfoundrun
  4956 0000394B EBB3                <2> 		jmp fifindbatch
  4957                              <2> 	goodfibatch:
  4958 0000394D B001                <2> 		mov al, 1
  4959 0000394F 2805[19B00300]      <2> 		sub [IFON], al 
  4960 00003955 A0[19B00300]        <2> 		mov al, [IFON]
  4961 0000395A 8A1D[94390000]      <2> 		mov bl, [iffalsebuf]
  4962 00003960 38D8                <2> 		cmp al, bl
  4963 00003962 779C                <2> 		ja fifindbatch
  4964 00003964 8B35[1E2F0000]      <2> 		mov esi, [currentcommandloc]
  4965 0000396A 83EF02              <2> 		sub edi, 2
  4966 0000396D C605[93390000]00    <2> 		mov byte [runnextline], 0
  4967 00003974 E9B4FEFFFF          <2> 		jmp batchrunloop
  4968                              <2> 	iffoundbatch:
  4969 00003979 B020                <2> 		mov al, ' '
  4970 0000397B 83C702              <2> 		add edi, 2
  4971 0000397E 3807                <2> 		cmp [edi], al
  4972 00003980 0F857AFFFFFF        <2> 		jne near fifindbatch
  4973 00003986 B001                <2> 		mov al, 1
  4974 00003988 0005[19B00300]      <2> 		add [IFON], al
  4975 0000398E E96DFFFFFF          <2> 		jmp fifindbatch
  4976                              <2> 		
  4977                              <2> 		
  4978 00003993 01                  <2> runnextline db 1
  4979 00003994 00                  <2> iffalsebuf db 0
  4980 00003995 C3                  <2> notbatch: ret 
  4981                              <1> %ifdef network.included
  4982                              <1> 	%include 'source/programs/arp.asm'
  4983                              <1> %endif
  4984                              <1> %include 'source/programs/batch.asm'
  4985 00003996 FF2C626174636800    <2> db 255,44,"batch",0
  4986                              <2> 	batchst: 
  4987 0000399E 8B3D[1E2F0000]      <2> 		mov edi, [currentcommandloc]
  4988 000039A4 83C706              <2> 		add edi, 6
  4989 000039A7 803F00              <2> 		cmp byte [edi], 0
  4990 000039AA 0F846D000000        <2> 		je near nonamefound
  4991 000039B0 BE00004000          <2> 		mov esi, 0x400000
  4992 000039B5 E8D92B0000          <2> 		call loadfile
  4993 000039BA 89D0                <2> 		mov eax, edx
  4994 000039BC 3D94010000          <2> 		cmp eax, 404
  4995 000039C1 7465                <2> 		je goodbatchname
  4996 000039C3 BE[CE390000]        <2> 		mov esi, badbatchname
  4997 000039C8 E847E3FFFF          <2> 		call print
  4998 000039CD C3                  <2> 		ret
  4999 000039CE 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  5000 000039D7 20616C726561647920- <2>
  5001 000039E0 657869737473210A00  <2>
  5002 000039E9 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  5003 000039F2 746F20747970652061- <2>
  5004 000039FB 206E616D6520616674- <2>
  5005 00003A04 65722074686520636F- <2>
  5006 00003A0D 6D6D616E642E0A00    <2>
  5007 00003A15 00000000            <2> 		esicache3 dd 0
  5008 00003A19 00000000            <2> 		esicache2 dd 0
  5009                              <2> 	nonamefound:
  5010 00003A1D BE[E9390000]        <2> 		mov esi, namenotfoundbatch
  5011 00003A22 E8EDE2FFFF          <2> 		call print
  5012 00003A27 C3                  <2> 		ret
  5013                              <2> 	goodbatchname:
  5014 00003A28 BE00004000          <2> 		mov esi, 0x400000
  5015                              <2> 	batchcreate:
  5016 00003A2D 8935[153A0000]      <2> 		mov [esicache3], esi
  5017 00003A33 BF00008000          <2> 		mov edi, 0x800000
  5018 00003A38 B00A                <2> 		mov al, 10
  5019 00003A3A B307                <2> 		mov bl, 7
  5020 00003A3C B404                <2> 		mov ah, 4
  5021 00003A3E CD30                <2> 		int 30h
  5022 00003A40 8935[193A0000]      <2> 		mov [esicache2], esi
  5023 00003A46 8A0E                <2> 		mov cl, [esi]
  5024 00003A48 8B35[153A0000]      <2> 		mov esi, [esicache3]
  5025 00003A4E BB[823A0000]        <2> 		mov ebx, exitword
  5026 00003A53 E805F5FFFF          <2> 		call cndtest
  5027 00003A58 3C01                <2> 		cmp al, 1
  5028 00003A5A 7411                <2> 		je endbatchcreate
  5029 00003A5C 3C02                <2> 		cmp al, 2
  5030 00003A5E 740D                <2> 		je endbatchcreate
  5031 00003A60 8B35[193A0000]      <2> 		mov esi, [esicache2]
  5032 00003A66 B00A                <2> 		mov al, 10
  5033 00003A68 8806                <2> 		mov [esi], al
  5034 00003A6A 46                  <2> 		inc esi
  5035 00003A6B EBC0                <2> 		jmp batchcreate
  5036                              <2> 	endbatchcreate:
  5037 00003A6D 8B35[153A0000]      <2> 		mov esi, [esicache3]
  5038 00003A73 31C0                <2> 		xor eax, eax
  5039 00003A75 8806                <2> 		mov [esi], al
  5040 00003A77 BE00004000          <2> 		mov esi, 0x400000
  5041 00003A7C E893E2FFFF          <2> 		call print
  5042 00003A81 C3                  <2> 		ret
  5043                              <2> 	
  5044 00003A82 5C7800              <2> 	exitword db "\x",0
  5045 00003A85 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  5046 00003A8E 6F20657869742E0A00  <2>
  5047                              <1> %ifdef gui.background
  5048                              <1> 	%include 'source/programs/background.asm'
  5049 00003A97 FF2C6261636B67726F- <2> db 255,44,"background",0
  5050 00003AA0 756E6400            <2>
  5051 00003AA4 8B3D[1E2F0000]      <2> 		mov edi, [currentcommandloc]
  5052 00003AAA 83C70B              <2> 		add edi, 11
  5053 00003AAD BE00008000          <2> 		mov esi, 0x800000
  5054 00003AB2 E8DC2A0000          <2> 		call loadfile
  5055 00003AB7 81FA94010000        <2> 		cmp edx, 404
  5056 00003ABD 0F8423120000        <2> 		je near filenotfound
  5057 00003AC3 BE00008000          <2> 		mov esi, 0x800000
  5058 00003AC8 66813E424D          <2> 		cmp word [esi], "BM"
  5059 00003ACD 7401                <2> 		je .bmpfound
  5060 00003ACF C3                  <2> 		ret
  5061                              <2> .bmpfound:
  5062 00003AD0 8B3D[42550000]      <2> 		mov edi, [physbaseptr]
  5063 00003AD6 57                  <2> 		push edi
  5064 00003AD7 BE[9CCA0300]        <2> 		mov esi, backgroundbuffer
  5065 00003ADC 8935[E36D0000]      <2> 		mov [backgroundimage], esi
  5066 00003AE2 8935[42550000]      <2> 		mov [physbaseptr], esi
  5067 00003AE8 31C0                <2> 		xor eax, eax
  5068                              <2> .clearlp:
  5069 00003AEA 8906                <2> 		mov [esi], eax
  5070 00003AEC 83C604              <2> 		add esi, 4
  5071 00003AEF 81FE[9CDE2B00]      <2> 		cmp esi, backgroundbufferend
  5072 00003AF5 72F3                <2> 		jb .clearlp
  5073 00003AF7 BE00008000          <2> 		mov esi, 0x800000
  5074 00003AFC 31C9                <2> 		xor ecx, ecx
  5075 00003AFE 31D2                <2> 		xor edx, edx
  5076 00003B00 31DB                <2> 		xor ebx, ebx
  5077 00003B02 E85A2C0000          <2> 		call showbmp
  5078 00003B07 5F                  <2> 		pop edi
  5079 00003B08 893D[42550000]      <2> 		mov [physbaseptr], edi
  5080 00003B0E 803D[0F850000]00    <2> 		cmp byte [guion], 0
  5081 00003B15 740F                <2> 		je .noclear
  5082 00003B17 E872320000          <2> 		call guiclear
  5083 00003B1C E84D2F0000          <2> 		call clearmousecursor
  5084 00003B21 E8E9320000          <2> 		call reloadallgraphics
  5085                              <2> .noclear:
  5086 00003B26 C3                  <2> 		ret
  5087                              <1> %endif
  5088                              <1> %include 'source/programs/beep.asm'
  5089 00003B27 FF2C6265657000      <2> 	db 255,44,"beep",0
  5090                              <2> beep:
  5091 00003B2E B8[533B0000]        <2> 	mov eax, beepstart
  5092 00003B33 A3[62020000]        <2> 	mov [soundpos], eax
  5093 00003B38 B8[573B0000]        <2> 	mov eax, beepend
  5094 00003B3D A3[66020000]        <2> 	mov [soundendpos], eax
  5095 00003B42 C605[5F020000]01    <2> 	mov byte [soundon], 1
  5096                              <2> waitforsoundendbeep:
  5097 00003B49 A0[5F020000]        <2> 	mov al, [soundon]
  5098 00003B4E 3C00                <2> 	cmp al, 0
  5099 00003B50 75F7                <2> 	jne waitforsoundendbeep
  5100 00003B52 C3                  <2> 	ret
  5101                              <2> 	
  5102                              <2> beepstart:
  5103 00003B53 3200D111            <2> 	dw 50, 4561
  5104                              <2> beepend:
  5105                              <1> %ifdef dos.compatible
  5106                              <1> %else
  5107                              <1> 	%include 'source/programs/boot.asm'
  5108 00003B57 FF2C626F6F7400      <2> db 255,44,"boot",0
  5109                              <2> quickboot:
  5110                              <2> 	;load and jump to the bootloader
  5111                              <2> 	; mov ecx, 1
  5112                              <2> 	; xor ebx, ebx
  5113                              <2> 	; mov esi, 0x400000
  5114                              <2> 	; call diskr
  5115                              <2> 	; mov ax, LINEAR_SEL
  5116                              <2> 	; mov fs, ax
  5117                              <2> 	; mov esi, 0x400000
  5118                              <2> 	; mov edi, 0x7C00
  5119                              <2> 	; xor ebx, ebx
  5120                              <2> ; .lp:
  5121                              <2> 	; mov ecx, [esi+ebx]
  5122                              <2> 	; mov [fs:edi+ebx], ecx
  5123                              <2> 	; add ebx, 4
  5124                              <2> 	; cmp ebx, 512
  5125                              <2> 	; jb .lp
  5126 00003B5E 66BB[6E3B]          <2> 	mov bx, bootload
  5127 00003B62 66891D[D70C0000]    <2> 	mov [realmodeptr], bx
  5128 00003B69 E95DD0FFFF          <2> 	jmp realmode
  5129                              <2> [BITS 16]
  5130                              <2> bootload:
  5131 00003B6E B80300              <2> 	mov ax, 3
  5132 00003B71 31DB                <2> 	xor bx, bx
  5133 00003B73 CD10                <2> 	int 10h
  5134 00003B75 EA007C0000          <2> 	jmp 0:0x7C00
  5135                              <2> [BITS 32]
  5136                              <1> %endif
  5137                              <1> %include 'source/programs/cd.asm'
  5138 00003B7A FF2C636400          <2> db 255,44,"cd",0
  5139                              <2> cd:
  5140 00003B7F 8B35[1E2F0000]      <2> 	mov esi, [currentcommandloc]
  5141 00003B85 83C603              <2> 	add esi, 3
  5142 00003B88 8B3D[10AE0300]      <2> 	mov edi, [currentfolderloc]
  5143 00003B8E 893D[0CAE0300]      <2> 	mov [lastfolderloc], edi
  5144 00003B94 81C7[14AE0300]      <2> 	add edi, currentfolder
  5145 00003B9A 4F                  <2> 	dec edi
  5146 00003B9B 803E2F              <2> 	cmp byte [esi], '/'
  5147 00003B9E 751C                <2> 	jne .noroot
  5148 00003BA0 31FF                <2> 	xor edi, edi
  5149 00003BA2 893D[10AE0300]      <2> 	mov [currentfolderloc], edi
  5150 00003BA8 893D[0CAE0300]      <2> 	mov [lastfolderloc], edi
  5151 00003BAE 81C7[14AE0300]      <2> 	add edi, currentfolder
  5152 00003BB4 4F                  <2> 	dec edi
  5153 00003BB5 46                  <2> 	inc esi
  5154 00003BB6 803E00              <2> 	cmp byte [esi], 0
  5155 00003BB9 7401                <2> 	je .noroot
  5156 00003BBB 4E                  <2> 	dec esi
  5157                              <2> .noroot:
  5158 00003BBC 66813E2E2E          <2> 	cmp word [esi], ".."
  5159 00003BC1 742A                <2> 	je .moveup
  5160 00003BC3 47                  <2> 	inc edi
  5161                              <2> .movedown:
  5162 00003BC4 8A06                <2> 	mov al, [esi]
  5163 00003BC6 8807                <2> 	mov [edi], al
  5164 00003BC8 47                  <2> 	inc edi
  5165 00003BC9 46                  <2> 	inc esi
  5166 00003BCA 3C00                <2> 	cmp al, 0
  5167 00003BCC 740A                <2> 	je .donecd
  5168 00003BCE 81FF[14B00300]      <2> 	cmp edi, currentfolderend
  5169 00003BD4 72EE                <2> 	jb .movedown
  5170 00003BD6 30C0                <2> 	xor al, al
  5171                              <2> .donecd:
  5172 00003BD8 4F                  <2> 	dec edi
  5173 00003BD9 C6072F              <2> 	mov byte [edi], '/'
  5174 00003BDC 47                  <2> 	inc edi
  5175 00003BDD C60700              <2> 	mov byte [edi], 0
  5176 00003BE0 81EF[14AE0300]      <2> 	sub edi, currentfolder
  5177 00003BE6 893D[10AE0300]      <2> 	mov [currentfolderloc], edi
  5178 00003BEC C3                  <2> 	ret
  5179                              <2> .moveup:
  5180 00003BED 31C0                <2> 	xor eax, eax
  5181 00003BEF A3[0CAE0300]        <2> 	mov [lastfolderloc], eax
  5182                              <2> .moveuploop:
  5183 00003BF4 4F                  <2> 	dec edi
  5184 00003BF5 8A07                <2> 	mov al, [edi]
  5185 00003BF7 81FF[14AE0300]      <2> 	cmp edi, currentfolder
  5186 00003BFD 763B                <2> 	jbe .moveupover
  5187 00003BFF 3C2F                <2> 	cmp al, '/'
  5188 00003C01 75F1                <2> 	jne .moveuploop
  5189 00003C03 C6072F              <2> 	mov byte [edi], '/'
  5190 00003C06 47                  <2> 	inc edi
  5191 00003C07 C60700              <2> 	mov byte [edi], 0
  5192 00003C0A 81EF[14AE0300]      <2> 	sub edi, currentfolder
  5193 00003C10 893D[10AE0300]      <2> 	mov [currentfolderloc], edi
  5194 00003C16 81C7[14AE0300]      <2> 	add edi, currentfolder
  5195 00003C1C 4F                  <2> 	dec edi
  5196                              <2> .lastfolder:
  5197 00003C1D 4F                  <2> 	dec edi
  5198 00003C1E 8A07                <2> 	mov al, [edi]
  5199 00003C20 81FF[14AE0300]      <2> 	cmp edi, currentfolder
  5200 00003C26 7604                <2> 	jbe .donemoveup
  5201 00003C28 3C2F                <2> 	cmp al, '/'
  5202 00003C2A 75F1                <2> 	jne .lastfolder
  5203                              <2> .donemoveup:
  5204 00003C2C 47                  <2> 	inc edi
  5205 00003C2D 81EF[14AE0300]      <2> 	sub edi, currentfolder
  5206 00003C33 893D[0CAE0300]      <2> 	mov [lastfolderloc], edi
  5207 00003C39 C3                  <2> 	ret
  5208                              <2> .moveupover:
  5209 00003C3A BF[14AE0300]        <2> 	mov edi, currentfolder
  5210 00003C3F C6072F              <2> 	mov byte [edi], '/'
  5211 00003C42 47                  <2> 	inc edi
  5212 00003C43 C60700              <2> 	mov byte [edi], 0
  5213 00003C46 31C0                <2> 	xor eax, eax
  5214 00003C48 A3[0CAE0300]        <2> 	mov [lastfolderloc], eax
  5215 00003C4D 40                  <2> 	inc eax
  5216 00003C4E A3[10AE0300]        <2> 	mov [currentfolderloc], eax
  5217 00003C53 C3                  <2> 	ret
  5218                              <1> %include 'source/programs/charmap.asm'
  5219 00003C54 00                  <2> charmapnum db 0
  5220 00003C55 FF2C636861726D6170- <2> db 255,44,"charmap",0
  5221 00003C5E 00                  <2>
  5222 00003C5F 8B35[1E2F0000]      <2> 	mov esi, [currentcommandloc]
  5223 00003C65 83C608              <2> 	add esi, 8
  5224 00003C68 803E00              <2> 	cmp byte [esi], 0
  5225 00003C6B 7412                <2> 	je .nospecific
  5226 00003C6D E8ECF5FFFF          <2> 	call cnvrthextxt
  5227 00003C72 6689C8              <2> 	mov ax, cx
  5228 00003C75 66BB0700            <2> 	mov bx, 7
  5229 00003C79 E805E7FFFF          <2> 	call prcharq
  5230 00003C7E C3                  <2> 	ret
  5231                              <2> .nospecific:
  5232 00003C7F 66BB0700            <2> 	mov bx, 7
  5233 00003C83 66B82000            <2> 	mov ax, " "
  5234 00003C87 C605[543C0000]00    <2> 	mov byte [charmapnum], 0
  5235 00003C8E E8F0E6FFFF          <2> 	call prcharq
  5236 00003C93 E8EBE6FFFF          <2> 	call prcharq
  5237 00003C98 E8E6E6FFFF          <2> 	call prcharq
  5238 00003C9D E8E1E6FFFF          <2> 	call prcharq
  5239 00003CA2 66B83000            <2> 	mov ax, "0"
  5240                              <2> charmapnumprnt:
  5241 00003CA6 E8D8E6FFFF          <2> 	call prcharq
  5242 00003CAB 6640                <2> 	inc ax
  5243 00003CAD 6650                <2> 	push ax
  5244 00003CAF 66B82000            <2> 	mov ax, " "
  5245 00003CB3 E8CBE6FFFF          <2> 	call prcharq
  5246 00003CB8 6658                <2> 	pop ax
  5247 00003CBA 6683F839            <2> 	cmp ax, "9"
  5248 00003CBE 76E6                <2> 	jbe charmapnumprnt
  5249 00003CC0 66B84100            <2> 	mov ax, "A"
  5250                              <2> charmapnumprnt2:
  5251 00003CC4 E8BAE6FFFF          <2> 	call prcharq
  5252 00003CC9 6640                <2> 	inc ax
  5253 00003CCB 6650                <2> 	push ax
  5254 00003CCD 66B82000            <2> 	mov ax, " "
  5255 00003CD1 E8ADE6FFFF          <2> 	call prcharq
  5256 00003CD6 6658                <2> 	pop ax
  5257 00003CD8 6683F847            <2> 	cmp ax, "G"
  5258 00003CDC 72E6                <2> 	jb charmapnumprnt2
  5259                              <2> 	
  5260 00003CDE BE[EA840000]        <2> 	mov esi, line
  5261 00003CE3 E80BE0FFFF          <2> 	call printquiet
  5262 00003CE8 6631C0              <2> 	xor ax, ax
  5263 00003CEB 6689C1              <2> 	mov cx, ax
  5264 00003CEE E819F4FFFF          <2> 	call showhexsmall
  5265 00003CF3 EB22                <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5266                              <2> charmapcopy:
  5267 00003CF5 6640                <2> 	inc ax
  5268 00003CF7 6683F808            <2> 	cmp ax, 8
  5269 00003CFB 741A                <2> 	je charmapnocopy
  5270 00003CFD 6683F809            <2> 	cmp ax, 9
  5271 00003D01 7414                <2> 	je charmapnocopy
  5272 00003D03 6683F80A            <2> 	cmp ax, 10
  5273 00003D07 740E                <2> 	je charmapnocopy
  5274 00003D09 6683F80D            <2> 	cmp ax, 13
  5275 00003D0D 7408                <2> 	je charmapnocopy
  5276 00003D0F 663D0001            <2> 	cmp ax, 256
  5277 00003D13 7447                <2> 	je nomorecharmap
  5278 00003D15 EB04                <2> 	jmp okchar
  5279                              <2> charmapnocopy:
  5280 00003D17 66B82000            <2> 	mov ax, " "
  5281                              <2> okchar:
  5282 00003D1B 6650                <2> 	push ax
  5283 00003D1D E861E6FFFF          <2> 	call prcharq
  5284 00003D22 66B82000            <2> 	mov ax, " "
  5285 00003D26 E858E6FFFF          <2> 	call prcharq
  5286 00003D2B 6658                <2> 	pop ax
  5287                              <2> charmapcopycheck:
  5288 00003D2D FE05[543C0000]      <2> 	inc byte [charmapnum]
  5289 00003D33 803D[543C0000]10    <2> 	cmp byte [charmapnum], 16
  5290 00003D3A 72B9                <2> 	jb charmapcopy
  5291 00003D3C 6650                <2> 	push ax
  5292 00003D3E BE[EA840000]        <2> 	mov esi, line
  5293 00003D43 E8ABDFFFFF          <2> 	call printquiet
  5294 00003D48 6658                <2> 	pop ax
  5295 00003D4A 88C1                <2> 	mov cl, al
  5296 00003D4C FEC1                <2> 	inc cl
  5297 00003D4E E8B9F3FFFF          <2> 	call showhexsmall
  5298 00003D53 C605[543C0000]00    <2> 	mov byte [charmapnum], 0
  5299 00003D5A EB99                <2> 	jmp charmapcopy
  5300                              <2> nomorecharmap:
  5301 00003D5C C3                  <2> 	ret
  5302                              <1> %ifdef gui.included
  5303                              <1> 	%include 'source/programs/circle.asm'
  5304 00003D5D FF2C636972636C6500  <2> db 255,44,"circle",0
  5305                              <2> circle:
  5306 00003D66 8B35[1E2F0000]      <2> 	mov esi, [currentcommandloc]
  5307 00003D6C 83C607              <2> 	add esi, 7
  5308 00003D6F 66B91000            <2> 	mov cx, 16
  5309 00003D73 30C0                <2> 	xor al, al
  5310 00003D75 3806                <2> 	cmp [esi], al
  5311 00003D77 7405                <2> 	je .nocmdline
  5312 00003D79 E820F5FFFF          <2> 	call cnvrttxt
  5313                              <2> .nocmdline:
  5314 00003D7E E8AE0A0000          <2> 	call linetester.stime
  5315 00003D83 E854000000          <2> 	call fcircle.nocmdline
  5316 00003D88 E8BC0A0000          <2> 	call linetester.etime
  5317 00003D8D 53                  <2> 	push ebx
  5318 00003D8E 57                  <2> 	push edi
  5319 00003D8F E85AE5FFFF          <2> 	call getchar
  5320 00003D94 59                  <2> 	pop ecx
  5321 00003D95 E835F4FFFF          <2> 	call showdec
  5322 00003D9A BE[D0480000]        <2> 	mov esi, linetester.msgcircle
  5323 00003D9F E84FDFFFFF          <2> 	call printquiet
  5324 00003DA4 59                  <2> 	pop ecx
  5325 00003DA5 E825F4FFFF          <2> 	call showdec
  5326 00003DAA BE[E7480000]        <2> 	mov esi, linetester.msgtime
  5327 00003DAF E83FDFFFFF          <2> 	call printquiet
  5328 00003DB4 E856300000          <2> 	call reloadallgraphics
  5329 00003DB9 C3                  <2> 	ret
  5330                              <2> 	
  5331 00003DBA FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5332 00003DC3 00                  <2>
  5333                              <2> fcircle:	
  5334 00003DC4 8B35[1E2F0000]      <2> 	mov esi, [currentcommandloc]
  5335 00003DCA 83C608              <2> 	add esi, 8
  5336 00003DCD 66B91000            <2> 	mov cx, 16
  5337 00003DD1 30C0                <2> 	xor al, al
  5338 00003DD3 3806                <2> 	cmp [esi], al
  5339 00003DD5 7405                <2> 	je .nocmdline
  5340 00003DD7 E8C2F4FFFF          <2> 	call cnvrttxt
  5341                              <2> .nocmdline:
  5342 00003DDC 6689C8              <2> 	mov ax, cx
  5343 00003DDF 66D1E1              <2> 	shl cx, 1
  5344 00003DE2 6689CA              <2> 	mov dx, cx
  5345 00003DE5 663B15[2C550000]    <2> 	cmp dx, [resolutionx]
  5346 00003DEC 731B                <2> 	jae .done
  5347 00003DEE 663B0D[2E550000]    <2> 	cmp cx, [resolutiony]
  5348 00003DF5 7312                <2> 	jae .done
  5349 00003DF7 668B35[5D020000]    <2> 	mov si, [timenanoseconds + 2]
  5350 00003DFE 31FF                <2> 	xor edi, edi
  5351 00003E00 803D[0F850000]01    <2> 	cmp byte [guion], 1
  5352 00003E07 7401                <2> 	je .lp
  5353 00003E09 C3                  <2> .done ret
  5354                              <2> .lp:
  5355 00003E0A 6629C2              <2> 	sub dx, ax
  5356 00003E0D 6629C1              <2> 	sub cx, ax
  5357 00003E10 60                  <2> 	pusha
  5358 00003E11 E81A2B0000          <2> 	call fillcircle
  5359 00003E16 61                  <2> 	popa
  5360 00003E17 47                  <2> 	inc edi
  5361 00003E18 660335[5B020000]    <2> 	add si, [timenanoseconds]
  5362 00003E1F 6601C2              <2> 	add dx, ax
  5363 00003E22 6601C2              <2> 	add dx, ax
  5364 00003E25 6601C2              <2> 	add dx, ax
  5365 00003E28 6601C1              <2> 	add cx, ax
  5366 00003E2B 663B15[2C550000]    <2> 	cmp dx, [resolutionx]
  5367 00003E32 72D6                <2> 	jb .lp
  5368 00003E34 6689C2              <2> 	mov dx, ax
  5369 00003E37 6601C2              <2> 	add dx, ax
  5370 00003E3A 6601C1              <2> 	add cx, ax
  5371 00003E3D 6601C1              <2> 	add cx, ax
  5372 00003E40 663B0D[2E550000]    <2> 	cmp cx, [resolutiony]
  5373 00003E47 72C1                <2> 	jb .lp
  5374 00003E49 C3                  <2> 	ret
  5375                              <1> %endif
  5376                              <1> %include 'source/programs/clear.asm'
  5377 00003E4A FF2C636C65617200    <2> db 255,44,"clear",0
  5378 00003E52 E869DFFFFF          <2> 		call clear
  5379 00003E57 C3                  <2> 		ret 
  5380                              <1> %include 'source/programs/cpuid.asm'
  5381 00003E58 FF2C637075696400    <2> db 255,44,"cpuid",0
  5382 00003E60 31C0                <2> 	xor eax, eax
  5383 00003E62 0FA2                <2> 	cpuid
  5384 00003E64 891D[B53E0000]      <2> 	mov [cpuidbuf], ebx
  5385 00003E6A 8915[B93E0000]      <2> 	mov [cpuidbuf + 4], edx
  5386 00003E70 890D[BD3E0000]      <2> 	mov [cpuidbuf + 8], ecx
  5387 00003E76 BE[B53E0000]        <2> 	mov esi, cpuidbuf
  5388 00003E7B E894DEFFFF          <2> 	call print
  5389 00003E80 BE[EA840000]        <2> 	mov esi, line
  5390 00003E85 E88ADEFFFF          <2> 	call print
  5391 00003E8A B801000000          <2> 	mov eax, 1
  5392 00003E8F 0FA2                <2> 	cpuid
  5393 00003E91 89C1                <2> 	mov ecx, eax
  5394 00003E93 C605[0B310000]02    <2> 	mov byte [firsthexshown], 2
  5395 00003E9A E881F2FFFF          <2> 	call showhex
  5396 00003E9F B808000080          <2> 	mov eax, 0x80000008
  5397 00003EA4 0FA2                <2> 	cpuid
  5398 00003EA6 89C1                <2> 	mov ecx, eax
  5399 00003EA8 C605[0B310000]02    <2> 	mov byte [firsthexshown], 2
  5400 00003EAF E86CF2FFFF          <2> 	call showhex
  5401 00003EB4 C3                  <2> 	ret
  5402                              <2> 	
  5403 00003EB5 00<rept>            <2> cpuidbuf times 13 db 0
  5404                              <2> cpuidvendorend:
  5405                              <1> %include 'source/programs/date.asm'
  5406 00003EC2 082E30303030303030- <2> timenscache db 8,".000000000"
  5407 00003ECB 3030                <2>
  5408 00003ECD 200A00              <2> timenscacheend: db " ",10,0
  5409 00003ED0 00                  <2> istimeset db 0
  5410 00003ED1 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5411 00003EDA 2063757272656E7420- <2>
  5412 00003EE3 554E49582074696D65- <2>
  5413 00003EEC 3A0A00              <2>
  5414 00003EEF 00<rept>            <2> timeinputbuffer times 12 db 0
  5415 00003EFB 00                  <2> timeinputbend: db 0
  5416                              <2> 
  5417 00003EFC FF2C6461746500      <2> db 255,44,"date",0
  5418                              <2> 	;cmp byte [istimeset], 0
  5419                              <2> 	;jne timeisset
  5420 00003F03 E880000000          <2> 	call time
  5421 00003F08 E823020000          <2> 	call timeconvert	
  5422                              <2> 	; mov esi, settimemsg
  5423                              <2> 	; call print
  5424                              <2> 	; mov esi, timeinputbuffer
  5425                              <2> 	; mov edi, timeinputbend
  5426                              <2> 	; call readline
  5427                              <2> 	; mov esi, timeinputbuffer
  5428                              <2> 	; xor edi, edi
  5429                              <2> 	; call cnvrttxt
  5430 00003F0D 890D[57020000]      <2> 	mov [timeseconds], ecx
  5431                              <2> 	;xor ecx, ecx
  5432                              <2> 	;mov [timenanoseconds], ecx
  5433 00003F13 C605[D03E0000]01    <2> 	mov byte [istimeset], 1
  5434                              <2> timeisset:
  5435 00003F1A 8B0D[57020000]      <2> 	mov ecx, [timeseconds]
  5436 00003F20 E8AAF2FFFF          <2> 	call showdec
  5437                              <2> 	
  5438 00003F25 8B0D[5B020000]      <2> 	mov ecx, [timenanoseconds]
  5439 00003F2B BE[C23E0000]        <2> 	mov esi, timenscache
  5440 00003F30 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5441 00003F37 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5442 00003F3E C6460A30            <2> 	mov byte [esi + 10], "0"
  5443 00003F42 BE[CD3E0000]        <2> 	mov esi, timenscacheend
  5444 00003F47 E89EF0FFFF          <2> 	call convert
  5445 00003F4C BE[C23E0000]        <2> 	mov esi, timenscache
  5446 00003F51 E89DDDFFFF          <2> 	call printquiet
  5447                              <2> 	
  5448 00003F56 E82D000000          <2> 	call time
  5449 00003F5B BE[92420000]        <2> 	mov esi, timeshow
  5450 00003F60 E88EDDFFFF          <2> 	call printquiet
  5451 00003F65 BE[EA840000]        <2> 	mov esi, line
  5452 00003F6A E884DDFFFF          <2> 	call printquiet
  5453 00003F6F BE[9B420000]        <2> 	mov esi, dateshow
  5454 00003F74 E87ADDFFFF          <2> 	call printquiet
  5455 00003F79 BE[EA840000]        <2> 	mov esi, line
  5456 00003F7E E870DDFFFF          <2> 	call printquiet
  5457 00003F83 E9BE000000          <2> 	jmp findday
  5458                              <2> time:
  5459 00003F88 E84F010000          <2> 	call tstackput1
  5460 00003F8D B00A                <2> 	mov al,10			;Get RTC register A
  5461 00003F8F E879010000          <2> 	call tget1
  5462 00003F94 A880                <2> 	test al,0x80			;Is update in progress?
  5463 00003F96 75F0                <2> 	jne time				; yes, wait
  5464                              <2> 
  5465 00003F98 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5466 00003F9A E86E010000          <2> 	call tget1
  5467 00003F9F A2[89420000]        <2> 	mov [RTCtimeSecond],al
  5468                              <2> 
  5469 00003FA4 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5470 00003FA6 E862010000          <2> 	call tget1
  5471 00003FAB A2[8A420000]        <2> 	mov [RTCtimeMinute],al
  5472                              <2> 
  5473 00003FB0 B004                <2> 	mov al,0x04			;Get hours (see notes)
  5474 00003FB2 E856010000          <2> 	call tget1
  5475 00003FB7 A2[8B420000]        <2> 	mov [RTCtimeHour],al
  5476                              <2> 
  5477 00003FBC B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5478 00003FBE E84A010000          <2> 	call tget1
  5479 00003FC3 A2[8C420000]        <2> 	mov [RTCtimeDay],al
  5480                              <2> 
  5481 00003FC8 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5482 00003FCA E83E010000          <2> 	call tget1
  5483 00003FCF 241F                <2> 	and al, 11111b
  5484 00003FD1 A2[8D420000]        <2> 	mov [RTCtimeMonth],al
  5485                              <2> 
  5486 00003FD6 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5487 00003FD8 E830010000          <2> 	call tget1
  5488 00003FDD A2[8E420000]        <2> 	mov [RTCtimeYear],al
  5489                              <2> 	
  5490 00003FE2 BE[92420000]        <2> 	mov esi, timeshow
  5491 00003FE7 8A2D[8B420000]      <2> 	mov ch, [RTCtimeHour]
  5492 00003FED E826010000          <2> 	call tput1
  5493 00003FF2 8A2D[8A420000]      <2> 	mov ch, [RTCtimeMinute]
  5494 00003FF8 E81B010000          <2> 	call tput1
  5495 00003FFD 8A2D[89420000]      <2> 	mov ch, [RTCtimeSecond]
  5496 00004003 E810010000          <2> 	call tput1
  5497 00004008 BE[9B420000]        <2> 	mov esi, dateshow
  5498 0000400D 8A2D[8D420000]      <2> 	mov ch, [RTCtimeMonth]
  5499 00004013 E800010000          <2> 	call tput1
  5500 00004018 8A2D[8C420000]      <2> 	mov ch, [RTCtimeDay]
  5501 0000401E E8F5000000          <2> 	call tput1
  5502 00004023 B520                <2> 	mov ch, 0x20
  5503 00004025 E8EE000000          <2> 	call tput1
  5504 0000402A 4E                  <2> 	dec esi
  5505 0000402B 8A2D[8E420000]      <2> 	mov ch, [RTCtimeYear]
  5506 00004031 E8E2000000          <2> 	call tput1
  5507 00004036 E8BB000000          <2> 	call tstackget1
  5508 0000403B C3                  <2> 	ret
  5509 0000403C BE[92420000]        <2> 	mov esi, timeshow
  5510 00004041 E8CEDCFFFF          <2> 	call print
  5511                              <2> ;get day of week
  5512                              <2> ;add these:
  5513                              <2> ;century value
  5514                              <2> ;last 2 digits of year
  5515                              <2> ;last 2 digits of year right shifted twice
  5516                              <2> ;month table value
  5517                              <2> ;day of the month
  5518                              <2> ;divide these by 7
  5519                              <2> ;the remainder is the day
  5520                              <2> findday:
  5521 00004046 31C0                <2> 	xor eax, eax
  5522                              <2> ;first convert the values from BCD to hex
  5523 00004048 A0[8C420000]        <2> 	mov al, [RTCtimeDay]
  5524 0000404D E871000000          <2> 	call converttohex
  5525 00004052 8825[8F420000]      <2> 	mov [dayhex], ah
  5526 00004058 A0[8D420000]        <2> 	mov al, [RTCtimeMonth]
  5527 0000405D E861000000          <2> 	call converttohex
  5528 00004062 8825[90420000]      <2> 	mov [monthhex], ah
  5529 00004068 A0[8E420000]        <2> 	mov al, [RTCtimeYear]
  5530 0000406D E851000000          <2> 	call converttohex
  5531 00004072 8825[91420000]      <2> 	mov [yearhex], ah
  5532 00004078 31C0                <2> 	xor eax, eax
  5533 0000407A A0[91420000]        <2> 	mov al, [yearhex]
  5534 0000407F C0E802              <2> 	shr al, 2
  5535 00004082 0205[91420000]      <2> 	add al, [yearhex]
  5536 00004088 83C006              <2> 	add eax, 6
  5537 0000408B 31DB                <2> 	xor ebx, ebx
  5538 0000408D 8A1D[90420000]      <2> 	mov bl, [monthhex]
  5539 00004093 FECB                <2> 	dec bl
  5540 00004095 81C3[B0420000]      <2> 	add ebx, month
  5541 0000409B 31C9                <2> 	xor ecx, ecx
  5542 0000409D 8A0B                <2> 	mov cl, [ebx]
  5543 0000409F 01C8                <2> 	add eax, ecx
  5544 000040A1 8A0D[8F420000]      <2> 	mov cl, [dayhex]
  5545 000040A7 01C8                <2> 	add eax, ecx
  5546 000040A9 66BB0700            <2> 	mov bx, 7
  5547 000040AD 31D2                <2> 	xor edx, edx
  5548 000040AF 66F7F3              <2> 	div bx
  5549 000040B2 C1E202              <2> 	shl edx, 2
  5550 000040B5 81C2[BC420000]      <2> 	add edx, day
  5551 000040BB 8B32                <2> 	mov esi, [edx]
  5552 000040BD E852DCFFFF          <2> 	call print
  5553 000040C2 C3                  <2> 	ret
  5554                              <2> 	
  5555                              <2> converttohex:
  5556 000040C3 88C4                <2> 	mov ah, al
  5557 000040C5 C0E804              <2> 	shr al, 4
  5558 000040C8 C0E404              <2> 	shl ah, 4
  5559 000040CB C0EC04              <2> 	shr ah, 4
  5560 000040CE 3C00                <2> 	cmp al, 0
  5561 000040D0 7409                <2> 	je noconverttohex
  5562                              <2> converttohexlp:
  5563 000040D2 80C40A              <2> 	add ah, 10
  5564 000040D5 FEC8                <2> 	dec al
  5565 000040D7 3C00                <2> 	cmp al, 0
  5566 000040D9 75F7                <2> 	jne converttohexlp
  5567                              <2> noconverttohex:
  5568 000040DB C3                  <2> 	ret
  5569                              <2> 	
  5570                              <2> tstackput1:
  5571 000040DC 8935[85420000]      <2> 	mov [tstack + 20], esi
  5572 000040E2 BE[71420000]        <2> 	mov esi, tstack
  5573 000040E7 8906                <2> 	mov [esi], eax
  5574 000040E9 895E04              <2> 	mov [esi + 4], ebx
  5575 000040EC 894E08              <2> 	mov [esi + 8], ecx
  5576 000040EF 89560C              <2> 	mov [esi + 12], edx
  5577 000040F2 897E10              <2> 	mov [esi + 16], edi
  5578 000040F5 C3                  <2> 	ret
  5579                              <2> 	
  5580                              <2> tstackget1:
  5581 000040F6 BE[71420000]        <2> 	mov esi, tstack
  5582 000040FB 8B06                <2> 	mov eax, [esi]
  5583 000040FD 8B5E04              <2> 	mov ebx, [esi + 4]
  5584 00004100 8B4E08              <2> 	mov ecx, [esi + 8]
  5585 00004103 8B560C              <2> 	mov edx, [esi + 12]
  5586 00004106 8B7E10              <2> 	mov edi, [esi + 16]
  5587 00004109 8B7614              <2> 	mov esi, [esi + 20]
  5588 0000410C C3                  <2> 	ret
  5589                              <2> 	
  5590                              <2> tget1:
  5591 0000410D 66BA7000            <2> 	mov dx, 0x70
  5592 00004111 EE                  <2> 	out dx, al
  5593 00004112 6642                <2> 	inc dx
  5594 00004114 EC                  <2> 	in al, dx
  5595 00004115 664A                <2> 	dec dx
  5596 00004117 C3                  <2> 	ret
  5597                              <2> 	
  5598                              <2> tput1:
  5599 00004118 66C1E904            <2> 	shr cx, 4
  5600 0000411C B030                <2> 	mov al, 48
  5601 0000411E 00E8                <2> 	add al, ch
  5602 00004120 8806                <2> 	mov [esi], al
  5603 00004122 46                  <2> 	inc esi
  5604 00004123 B030                <2> 	mov al, 48
  5605 00004125 C0E904              <2> 	shr cl, 4
  5606 00004128 00C8                <2> 	add al, cl
  5607 0000412A 8806                <2> 	mov [esi], al
  5608 0000412C 83C602              <2> 	add esi, 2
  5609 0000412F C3                  <2> 	ret
  5610                              <2> 	
  5611                              <2> timeconvert: ;return time in the RTCtime stuff in ecx
  5612 00004130 31DB                <2> 	xor ebx, ebx
  5613 00004132 31C9                <2> 	xor ecx, ecx
  5614 00004134 31FF                <2> 	xor edi, edi
  5615 00004136 31F6                <2> 	xor esi, esi
  5616                              <2> 	
  5617 00004138 A0[89420000]        <2> 	mov al, [RTCtimeSecond]
  5618 0000413D E881FFFFFF          <2> 	call converttohex
  5619 00004142 88E1                <2> 	mov cl, ah
  5620                              <2> 	
  5621 00004144 A0[8A420000]        <2> 	mov al, [RTCtimeMinute]
  5622 00004149 E875FFFFFF          <2> 	call converttohex
  5623 0000414E 88E3                <2> 	mov bl, ah
  5624 00004150 B83C000000          <2> 	mov eax, 60
  5625 00004155 31D2                <2> 	xor edx, edx
  5626 00004157 F7E3                <2> 	mul ebx
  5627 00004159 01C1                <2> 	add ecx, eax
  5628                              <2> 	
  5629 0000415B A0[8B420000]        <2> 	mov al, [RTCtimeHour]
  5630 00004160 E85EFFFFFF          <2> 	call converttohex
  5631 00004165 88E3                <2> 	mov bl, ah
  5632 00004167 B8100E0000          <2> 	mov eax, 3600
  5633 0000416C 31D2                <2> 	xor edx, edx
  5634 0000416E F7E3                <2> 	mul ebx
  5635 00004170 01C1                <2> 	add ecx, eax
  5636                              <2> 		
  5637 00004172 31C0                <2> 	xor eax, eax
  5638 00004174 A0[8E420000]        <2> 	mov al, [RTCtimeYear]
  5639 00004179 E845FFFFFF          <2> 	call converttohex
  5640 0000417E 6689C6              <2> 	mov si, ax
  5641 00004181 66C1EE08            <2> 	shr si, 8
  5642 00004185 6683FE46            <2> 	cmp si, 70
  5643 00004189 7704                <2> 	ja .no100
  5644 0000418B 6683C664            <2> 	add si, 100
  5645                              <2> .no100:
  5646 0000418F 6681C66C07          <2> 	add si, 1900
  5647                              <2> 	
  5648 00004194 BB[63420000]        <2> 	mov ebx, .month
  5649 00004199 A0[8C420000]        <2> 	mov al, [RTCtimeDay]
  5650 0000419E E820FFFFFF          <2> 	call converttohex
  5651 000041A3 88E0                <2> 	mov al, ah
  5652 000041A5 FEC8                <2> 	dec al
  5653 000041A7 31D2                <2> 	xor edx, edx
  5654 000041A9 88C2                <2> 	mov dl, al
  5655 000041AB A0[8D420000]        <2> 	mov al, [RTCtimeMonth]
  5656 000041B0 E80EFFFFFF          <2> 	call converttohex
  5657 000041B5 88D0                <2> 	mov al, dl
  5658 000041B7 88E2                <2> 	mov dl, ah
  5659 000041B9 30E4                <2> 	xor ah, ah
  5660 000041BB 6689D5              <2> 	mov bp, dx
  5661                              <2> 	
  5662 000041BE 6689F7              <2> 	mov di, si
  5663 000041C1 66C1EF02            <2> 	shr di, 2
  5664 000041C5 66C1E702            <2> 	shl di, 2
  5665 000041C9 C605[64420000]1C    <2> 	mov byte [.month + 1], 28
  5666 000041D0 6639F7              <2> 	cmp di, si
  5667 000041D3 7506                <2> 	jne .nofebmod
  5668 000041D5 FE05[64420000]      <2> 	inc byte [.month + 1]
  5669                              <2> .nofebmod:
  5670 000041DB 664D                <2> 	dec bp
  5671 000041DD 6683FD00            <2> 	cmp bp, 0
  5672 000041E1 7407                <2> 	je .ylp
  5673 000041E3 8A13                <2> 	mov dl, [ebx]
  5674 000041E5 01D0                <2> 	add eax, edx
  5675 000041E7 43                  <2> 	inc ebx
  5676 000041E8 EBF1                <2> 	jmp .nofebmod
  5677                              <2> 	
  5678                              <2> .ylp:
  5679 000041EA 6689F7              <2> 	mov di, si
  5680 000041ED 66C1EF02            <2> 	shr di, 2
  5681 000041F1 66C1E702            <2> 	shl di, 2
  5682 000041F5 81C18033E101        <2> 	add ecx, 31536000
  5683 000041FB 6639F7              <2> 	cmp di, si
  5684 000041FE 7506                <2> 	jne .noymod
  5685 00004200 81C180510100        <2> 	add ecx, 86400
  5686                              <2> .noymod:
  5687 00004206 664E                <2> 	dec si
  5688 00004208 6681FEB207          <2> 	cmp si, 1970
  5689 0000420D 77DB                <2> 	ja .ylp
  5690                              <2> 	
  5691 0000420F BB80510100          <2> 	mov ebx, 86400
  5692 00004214 31D2                <2> 	xor edx, edx
  5693 00004216 F7E3                <2> 	mul ebx
  5694 00004218 01C1                <2> 	add ecx, eax
  5695                              <2> 	
  5696 0000421A 31DB                <2> 	xor ebx, ebx
  5697 0000421C 31D2                <2> 	xor edx, edx
  5698 0000421E B8100E0000          <2> 	mov eax, 3600
  5699 00004223 8A3D[6F420000]      <2> 	mov bh, [timezoneh]
  5700 00004229 80FF80              <2> 	cmp bh, 128
  5701 0000422C 720A                <2> 	jb .posh
  5702 0000422E 28FB                <2> 	sub bl, bh
  5703 00004230 30FF                <2> 	xor bh, bh
  5704 00004232 F7E3                <2> 	mul ebx
  5705 00004234 01C1                <2> 	add ecx, eax
  5706 00004236 EB06                <2> 	jmp .doneth
  5707                              <2> .posh:
  5708 00004238 86DF                <2> 	xchg bl, bh
  5709 0000423A F7E3                <2> 	mul ebx
  5710 0000423C 29C1                <2> 	sub ecx, eax
  5711                              <2> .doneth:
  5712                              <2> 
  5713 0000423E 31DB                <2> 	xor ebx, ebx	
  5714 00004240 31D2                <2> 	xor edx, edx
  5715 00004242 B83C000000          <2> 	mov eax, 60
  5716 00004247 8A3D[70420000]      <2> 	mov bh, [timezonem]
  5717 0000424D 80FF80              <2> 	cmp bh, 128
  5718 00004250 720A                <2> 	jb .posm
  5719 00004252 28FB                <2> 	sub bl, bh
  5720 00004254 30FF                <2> 	xor bh, bh
  5721 00004256 F7E3                <2> 	mul ebx
  5722 00004258 01C1                <2> 	add ecx, eax
  5723 0000425A EB06                <2> 	jmp .donetm
  5724                              <2> .posm:
  5725 0000425C 86DF                <2> 	xchg bl, bh
  5726 0000425E F7E3                <2> 	mul ebx
  5727 00004260 29C1                <2> 	sub ecx, eax
  5728                              <2> .donetm:
  5729                              <2> 
  5730 00004262 C3                  <2> 	ret
  5731                              <2> 	
  5732                              <2> 
  5733 00004263 1F1C1F1E1F1E1F1F1E- <2> .month db 31,28,31,30,31,30,31,31,30,31,30,31
  5734 0000426C 1F1E1F              <2>
  5735                              <2> 
  5736 0000426F FA                  <2> 	timezoneh db -6
  5737 00004270 00                  <2> 	timezonem db 0
  5738 00004271 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5739 0000427A 000000000000000000- <2>
  5740 00004283 000000000000        <2>
  5741 00004289 00                  <2> 	RTCtimeSecond db 0
  5742 0000428A 00                  <2> 	RTCtimeMinute db 0
  5743 0000428B 00                  <2> 	RTCtimeHour db 0
  5744 0000428C 00                  <2> 	RTCtimeDay db 0
  5745 0000428D 00                  <2> 	RTCtimeMonth db 0
  5746 0000428E 00                  <2> 	RTCtimeYear db 0
  5747 0000428F 00                  <2> 	dayhex db 0
  5748 00004290 00                  <2> 	monthhex db 0
  5749 00004291 00                  <2> 	yearhex db 0
  5750 00004292 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  5751 0000429B 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  5752 000042A4 302000              <2>
  5753                              <2> 	oldcentury:	;from 1700 to 1900
  5754 000042A7 040200              <2> 	db 4,2,0
  5755                              <2> 	century:	;from 2000 to 2500
  5756 000042AA 060402000604        <2> 	db 6,4,2,0,6,4
  5757                              <2> 	month:
  5758 000042B0 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5759 000042B9 000305              <2>
  5760                              <2> 	day:
  5761 000042BC [D8420000]          <2> 	dd sunday
  5762 000042C0 [E0420000]          <2> 	dd monday
  5763 000042C4 [E8420000]          <2> 	dd tuesday
  5764 000042C8 [F1420000]          <2> 	dd wednesday
  5765 000042CC [FC420000]          <2> 	dd thursday
  5766 000042D0 [06430000]          <2> 	dd friday
  5767 000042D4 [0E430000]          <2> 	dd saturday
  5768                              <2> sunday:
  5769 000042D8 53756E6461790A00    <2> 	db "Sunday",10,0
  5770                              <2> monday:
  5771 000042E0 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5772                              <2> tuesday:
  5773 000042E8 547565736461790A00  <2> 	db "Tuesday",10,0
  5774                              <2> wednesday:
  5775 000042F1 5765646E6573646179- <2> 	db "Wednesday",10,0
  5776 000042FA 0A00                <2>
  5777                              <2> thursday:
  5778 000042FC 54687572736461790A- <2> 	db "Thursday",10,0
  5779 00004305 00                  <2>
  5780                              <2> friday:
  5781 00004306 4672696461790A00    <2> 	db "Friday",10,0
  5782                              <2> saturday:
  5783 0000430E 53617475726461790A- <2> 	db "Saturday",10,0
  5784 00004317 00                  <2>
  5785                              <1> %ifdef network.included
  5786                              <1> 	%include 'source/programs/dhcp.asm'
  5787                              <1> %endif
  5788                              <1> %ifdef disk.none
  5789                              <1> %else
  5790                              <1> 	%include 'source/programs/dos.asm'
  5791 00004318 FF2C646F7300        <2> db 255,44,"dos",0
  5792                              <2> dosrunner:
  5793 0000431E 8925[08AE0300]      <2> 	mov [previousstack], esp
  5794 00004324 8B3D[1E2F0000]      <2> 	mov edi, [currentcommandloc]
  5795 0000432A 83C704              <2> 	add edi, 4
  5796 0000432D BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5797 00004332 E85C220000          <2> 	call loadfile
  5798 00004337 8B3D[1E2F0000]      <2> 	mov edi, [currentcommandloc]
  5799 0000433D 83C704              <2> 	add edi, 4
  5800 00004340 81FA94010000        <2> 	cmp edx, 404
  5801 00004346 0F845E000000        <2> 	je near .noprogfound
  5802 0000434C BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5803 00004351 31C9                <2> 	xor ecx, ecx
  5804                              <2> .findparams:
  5805 00004353 47                  <2> 	inc edi
  5806 00004354 8A07                <2> 	mov al, [edi]
  5807 00004356 3C20                <2> 	cmp al, " "
  5808 00004358 75F9                <2> 	jne .findparams
  5809                              <2> .copyparams:
  5810 0000435A 8A07                <2> 	mov al, [edi]
  5811 0000435C 8803                <2> 	mov [ebx], al
  5812 0000435E 43                  <2> 	inc ebx
  5813 0000435F 47                  <2> 	inc edi
  5814 00004360 41                  <2> 	inc ecx
  5815 00004361 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5816 00004367 7304                <2> 	jae .nomoreparams
  5817 00004369 3C00                <2> 	cmp al, 0
  5818 0000436B 75ED                <2> 	jne .copyparams
  5819                              <2> .nomoreparams:
  5820 0000436D 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5821 00004373 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5822 00004377 8ED8                <2> 	mov ds, ax
  5823 00004379 8EC0                <2> 	mov es, ax
  5824 0000437B 8EE0                <2> 	mov fs, ax
  5825 0000437D 8EE8                <2> 	mov gs, ax
  5826 0000437F 31C0                <2> 	xor eax, eax
  5827 00004381 31DB                <2> 	xor ebx, ebx
  5828 00004383 31C9                <2> 	xor ecx, ecx
  5829 00004385 31D2                <2> 	xor edx, edx
  5830 00004387 31FF                <2> 	xor edi, edi
  5831 00004389 31F6                <2> 	xor esi, esi
  5832 0000438B 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5833 00004392 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5834 00004396 6689DA              <2> 	mov dx, bx
  5835 00004399 8EC3                <2> 	mov es, bx
  5836 0000439B 8EE3                <2> 	mov fs, bx
  5837 0000439D 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5838 000043A1 8EEB                <2> 	mov gs, bx
  5839 000043A3 8B25[08AE0300]      <2> 	mov esp, [previousstack]
  5840 000043A9 C3                  <2> 	ret
  5841                              <2> .noprogfound:
  5842 000043AA BE[B1840000]        <2> 	mov esi, notfound1
  5843 000043AF E860D9FFFF          <2> 	call print
  5844 000043B4 8B35[1E2F0000]      <2> 	mov esi, [currentcommandloc]
  5845 000043BA 83C604              <2> 	add esi, 4
  5846 000043BD E852D9FFFF          <2> 	call print
  5847 000043C2 BE[B9840000]        <2> 	mov esi, notfound2
  5848 000043C7 E848D9FFFF          <2> 	call print
  5849 000043CC C3                  <2> 	ret
  5850                              <2> 	
  5851                              <1> %endif
  5852                              <1> %include 'source/programs/dump.asm'
  5853 000043CD FF2C64756D7000      <2> db 255,44,"dump",0
  5854 000043D4 8B35[1E2F0000]      <2> 	mov esi, [currentcommandloc]
  5855 000043DA 83C605              <2> 	add esi, 5
  5856 000043DD 31C9                <2> 	xor ecx, ecx
  5857 000043DF 66B83078            <2> 	mov ax, "0x"
  5858 000043E3 663906              <2> 	cmp [esi], ax
  5859 000043E6 7407                <2> 	je dumphexin
  5860 000043E8 E8B1EEFFFF          <2> 	call cnvrttxt
  5861 000043ED EB0A                <2> 	jmp dumphexnow
  5862                              <2> dumphexin:
  5863 000043EF 83C602              <2> 	add esi, 2
  5864 000043F2 E867EEFFFF          <2> 	call cnvrthextxt
  5865 000043F7 EB00                <2> 	jmp dumphexnow
  5866                              <2> dumphexnow:
  5867 000043F9 89CF                <2> 	mov edi, ecx
  5868 000043FB 89FE                <2> 	mov esi, edi
  5869 000043FD 81C680030000        <2> 	add esi, 896
  5870                              <2> dumphexloop:
  5871 00004403 8B0F                <2> 	mov ecx, [edi]
  5872 00004405 C605[0B310000]05    <2> 	mov byte [firsthexshown],5
  5873 0000440C E80FEDFFFF          <2> 	call showhex
  5874 00004411 83C704              <2> 	add edi, 4
  5875 00004414 39F7                <2> 	cmp edi, esi
  5876 00004416 72EB                <2> 	jb dumphexloop
  5877 00004418 E837E4FFFF          <2> 	call termcopy
  5878 0000441D C3                  <2> 	ret 
  5879                              <1> %include 'source/programs/echo.asm'
  5880 0000441E FF2C6563686F00      <2> db 255,44,"echo",0
  5881                              <2> 	echoprog:
  5882 00004425 8B35[1E2F0000]      <2> 		mov esi, [currentcommandloc]
  5883 0000442B 83C605              <2> 		add esi, 5
  5884 0000442E 8A06                <2> 		mov al, [esi]
  5885 00004430 E8BED8FFFF          <2> 		call printquiet
  5886 00004435 E8D5D8FFFF          <2> 		call printline
  5887 0000443A C3                  <2> 		ret
  5888 0000443B BB[88B00300]        <2> 	echovr:	mov ebx, variables
  5889 00004440 BF06000000          <2> 		mov edi, 6
  5890 00004445 E833000000          <2> 		call nxtvrech
  5891 0000444A EB4E                <2> 		jmp prntvr2
  5892 0000444C B13D                <2> 	echvar:	mov cl, '='
  5893 0000444E 43                  <2> 		inc ebx
  5894 0000444F 8A03                <2> 		mov al, [ebx]
  5895 00004451 3C00                <2> 		cmp al, 0
  5896 00004453 7428                <2> 		je nxtvrech
  5897 00004455 3C3D                <2> 		cmp al, '='
  5898 00004457 741F                <2> 		je nxtvrechb1
  5899 00004459 8B35[1E2F0000]      <2> 		mov esi, [currentcommandloc]
  5900 0000445F 01FE                <2> 		add esi, edi
  5901 00004461 E8F7EAFFFF          <2> 		call cndtest
  5902 00004466 3C02                <2> 		cmp al, 2
  5903 00004468 742C                <2> 		je prntvr
  5904 0000446A 3C01                <2> 		cmp al, 1
  5905 0000446C 7428                <2> 		je prntvr
  5906 0000446E 8B35[1E2F0000]      <2> 		mov esi, [currentcommandloc]
  5907 00004474 01FE                <2> 		add esi, edi
  5908 00004476 EB05                <2> 		jmp nxtvrech
  5909                              <2> 	nxtvrechb1:
  5910 00004478 83EB02              <2> 		sub ebx, 2
  5911 0000447B EBCF                <2> 		jmp echvar
  5912 0000447D 8A03                <2> 	nxtvrech: mov al, [ebx]
  5913 0000447F 3C05                <2> 		cmp al, 5
  5914 00004481 740A                <2> 		je nxtvrec2
  5915 00004483 43                  <2> 		inc ebx
  5916 00004484 81FB[88C00300]      <2> 		cmp ebx, varend
  5917 0000448A 72F1                <2> 		jb nxtvrech
  5918 0000448C C3                  <2> 		ret
  5919 0000448D 43                  <2> 	nxtvrec2: inc ebx
  5920 0000448E 8A03                <2> 		mov al, [ebx]
  5921 00004490 3C04                <2> 		cmp al, 4
  5922 00004492 74B8                <2> 		je echvar
  5923 00004494 EBE7                <2> 		jmp nxtvrech
  5924 00004496 43                  <2> 	prntvr: inc ebx
  5925 00004497 89DE                <2> 		mov esi, ebx
  5926 00004499 C3                  <2> 		ret
  5927 0000449A E875D8FFFF          <2> 	prntvr2: call print
  5928 0000449F BE[EA840000]        <2> 		mov esi, line
  5929 000044A4 E86BD8FFFF          <2> 		call print
  5930 000044A9 C3                  <2> 		ret 
  5931                              <1> %include 'source/programs/else.asm'
  5932 000044AA FF2C656C736500      <2> 	db 255,44,"else",0
  5933 000044B1 31C0                <2> elsecmd:	xor eax, eax
  5934 000044B3 3805[82B00300]      <2> 	cmp [BATCHISON], al
  5935 000044B9 0F84D6F4FFFF        <2> 	je near notbatch
  5936 000044BF A0[19B00300]        <2> 	mov al, [IFON]
  5937 000044C4 BE[1AB00300]        <2> 	mov esi, IFTRUE
  5938 000044C9 01C6                <2> 	add esi, eax
  5939 000044CB 8A06                <2> 	mov al, [esi]
  5940 000044CD 3401                <2> 	xor al, 1
  5941 000044CF 8806                <2> 	mov [esi], al
  5942 000044D1 C3                  <2> 	ret 
  5943                              <1> %include 'source/programs/exit.asm'
  5944 000044D2 FF2C6578697400      <2> db 255,44,"exit",0
  5945 000044D9 803D[18B00300]01    <2> 	cmp byte [ranboot], 1
  5946 000044E0 0F8431E7FFFF        <2> 	je near returnfromexp
  5947 000044E6 E91CE6FFFF          <2> 	jmp nobootfile
  5948                              <1> %include 'source/programs/fi.asm'
  5949 000044EB FF2C666900          <2> 	db 255,44,"fi",0
  5950 000044F0 30C0                <2> 	xor al, al
  5951 000044F2 3805[82B00300]      <2> 	cmp [BATCHISON], al
  5952 000044F8 0F8497F4FFFF        <2> 	je near notbatch
  5953 000044FE B001                <2> fi:	mov al, 1
  5954 00004500 2805[19B00300]      <2> 	sub [IFON],al
  5955 00004506 C3                  <2> 	ret 
  5956                              <1> %ifdef gui.included
  5957                              <1> 	%include 'source/programs/gui.asm'
  5958 00004507 FF2C67756900        <2> db 255,44,"gui",0
  5959                              <2> guiswitcher:
  5960 0000450D 8B35[1E2F0000]      <2> 	mov esi, [currentcommandloc]
  5961 00004513 83C604              <2> 	add esi, 4
  5962 00004516 31C9                <2> 	xor ecx, ecx
  5963 00004518 803E00              <2> 	cmp byte [esi], 0
  5964 0000451B 7407                <2> 	je .nomodepref
  5965 0000451D E83CEDFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5966 00004522 EB07                <2> 	jmp .modepref
  5967                              <2> .nomodepref:
  5968 00004524 51                  <2> 	push ecx
  5969 00004525 E896D8FFFF          <2> 	call clear
  5970 0000452A 59                  <2> 	pop ecx
  5971                              <2> .modepref:
  5972 0000452B 66C705[D70C0000]-   <2> 	mov word [realmodeptr], guiswitch
  5973 00004532 [3E51]              <2>
  5974 00004534 E892C6FFFF          <2> 	call realmode
  5975                              <2> guiswitchret:
  5976 00004539 65803D[0F850000]01  <2> 	cmp byte [gs:guion], 1
  5977 00004541 7401                <2> 	je .cont
  5978 00004543 C3                  <2> 	ret
  5979                              <2> .cont:
  5980 00004544 BF[1A530000]        <2> 	mov edi, VBEMODEBLOCK
  5981                              <2> .loop:
  5982 00004549 658B07              <2> 	mov eax, [gs:edi]
  5983 0000454C 8907                <2> 	mov [edi], eax
  5984 0000454E 47                  <2> 	inc edi
  5985 0000454F 81FF[1E560000]      <2> 	cmp edi, VBEEND
  5986 00004555 72F2                <2> 	jb .loop
  5987 00004557 A1[42550000]        <2> 	mov eax, [physbaseptr]
  5988 0000455C 8B1D[38020000]      <2> 	mov ebx, [basecache]
  5989 00004562 C1E304              <2> 	shl ebx, 4
  5990 00004565 29D8                <2> 	sub eax, ebx
  5991 00004567 A3[42550000]        <2> 	mov [physbaseptr], eax
  5992 0000456C C605[81230000]00    <2> 	mov byte [termguion], 0
  5993 00004573 BE[9CC80300]        <2> 	mov esi, graphicstable
  5994 00004578 30C0                <2> 	xor al, al
  5995                              <2> .clear:
  5996 0000457A 8806                <2> 	mov [esi], al
  5997 0000457C 46                  <2> 	inc esi
  5998 0000457D 81FE[9CCA0300]      <2> 	cmp esi, graphicstableend
  5999 00004583 72F5                <2> 	jb .clear
  6000 00004585 E80F2A0000          <2> 	call guisetup
  6001                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  6002 0000458A 668B15[2C550000]    <2> 	mov dx, [resolutionx]
  6003 00004591 668B0D[2E550000]    <2> 	mov cx, [resolutiony]
  6004 00004598 6689D3              <2> 	mov bx, dx
  6005 0000459B 6689C8              <2> 	mov ax, cx
  6006 0000459E 66D1EB              <2> 	shr bx, 1
  6007 000045A1 66D1E8              <2> 	shr ax, 1
  6008 000045A4 6689DA              <2> 	mov dx, bx
  6009 000045A7 66D1EA              <2> 	shr dx, 1
  6010 000045AA 6689C1              <2> 	mov cx, ax
  6011 000045AD 66D1E9              <2> 	shr cx, 1
  6012 000045B0 6601D3              <2> 	add bx, dx
  6013 000045B3 6601C8              <2> 	add ax, cx
  6014 000045B6 66D1E9              <2> 	shr cx, 1
  6015 000045B9 66C1EB03            <2> 	shr bx, 3
  6016 000045BD 66C1E303            <2> 	shl bx, 3
  6017 000045C1 66C1E804            <2> 	shr ax, 4
  6018 000045C5 66C1E004            <2> 	shl ax, 4
  6019 000045C9 66891D[A2710000]    <2> 	mov [termwindow], bx
  6020 000045D0 66A3[A4710000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6021 000045D6 BE[A2710000]        <2> 	mov esi, termwindow
  6022 000045DB 31DB                <2> 	xor ebx, ebx
  6023 000045DD 6631C0              <2> 	xor ax, ax
  6024 000045E0 E8DB300000          <2> 	call showwindow
  6025 000045E5 E835100000          <2> 	call cursorgui
  6026 000045EA E8D1D7FFFF          <2> 	call clear
  6027 000045EF C3                  <2> 	ret
  6028                              <2> 	
  6029                              <1> %endif
  6030                              <1> %include 'source/programs/help.asm'
  6031 000045F0 FF2C68656C7000      <2> db 255,44,"help",0
  6032                              <2> lscmd:	
  6033 000045F7 B00D                <2> 		mov al, 13
  6034 000045F9 E885DDFFFF          <2> 		call prcharq
  6035 000045FE BE[56330000]        <2> 		mov esi, progstart
  6036 00004603 BB[3E510000]        <2> 		mov ebx, progend
  6037 00004608 BE[08AA0300]        <2> dir:	mov esi, fileindex
  6038 0000460D 8A06                <2> 	dirnxt:	mov al, [esi]
  6039 0000460F 30E4                <2> 		xor ah, ah
  6040 00004611 3CFF                <2> 		cmp al, 255
  6041 00004613 7415                <2> 		je dirfnd
  6042 00004615 46                  <2> 		inc esi
  6043 00004616 81FE[08AE0300]      <2> 		cmp esi,  fileindexend
  6044 0000461C 7339                <2> 		jae dirdn
  6045 0000461E EBED                <2> 		jmp dirnxt
  6046                              <2> 	dirfnd3:
  6047 00004620 46                  <2> 		inc esi
  6048 00004621 81FE[08AE0300]      <2> 		cmp esi, fileindexend
  6049 00004627 76E4                <2> 		jbe dirnxt
  6050 00004629 4E                  <2> 		dec esi
  6051 0000462A 46                  <2> 	dirfnd:	inc esi
  6052 0000462B 8A06                <2> 		mov al, [esi]
  6053 0000462D 30E4                <2> 		xor ah, ah
  6054 0000462F 3C2C                <2> 		cmp al, 44
  6055 00004631 740B                <2> 		je dirfnd2
  6056 00004633 46                  <2> 		inc esi
  6057 00004634 81FE[08AE0300]      <2> 		cmp esi,  fileindexend
  6058 0000463A 731B                <2> 		jae dirdn
  6059 0000463C EBCF                <2> 		jmp dirnxt
  6060 0000463E 46                  <2> 	dirfnd2: inc esi
  6061 0000463F E8AFD6FFFF          <2> 		call printquiet
  6062 00004644 56                  <2> 		push esi
  6063 00004645 B009                <2> 		mov al, 9
  6064 00004647 E837DDFFFF          <2> 		call prcharq
  6065 0000464C 5E                  <2> 		pop esi
  6066 0000464D 81FE[08AE0300]      <2> 		cmp esi,  fileindexend
  6067 00004653 7302                <2> 		jae dirdn
  6068 00004655 EBB6                <2> 		jmp dirnxt
  6069 00004657 BE[EA840000]        <2> 	dirdn:	mov esi, line
  6070 0000465C E8B3D6FFFF          <2> 			call print
  6071 00004661 C3                  <2> 			ret
  6072 00004662 00                  <2> currentdir db 0
  6073                              <1> %include 'source/programs/if.asm'
  6074 00004663 FF2C696600          <2> 	db 255,44,"if",0
  6075 00004668 30C0                <2> ifcmd:	xor al, al
  6076 0000466A 3805[82B00300]      <2> 	cmp [BATCHISON], al
  6077 00004670 0F841FF3FFFF        <2> 	je near notbatch
  6078 00004676 8B1D[1E2F0000]      <2> 	mov ebx, [currentcommandloc]
  6079 0000467C 83C303              <2> 	add ebx, 3
  6080 0000467F 89DE                <2> 	mov esi, ebx
  6081 00004681 8A06                <2> chkeqsn: mov al, [esi]
  6082 00004683 3C00                <2> 	cmp al, 0
  6083 00004685 0F840AF3FFFF        <2> 	je near notbatch
  6084 0000468B 3C3D                <2> 	cmp al, '='
  6085 0000468D 0F8403000000        <2> 	je near chkeqdn
  6086 00004693 46                  <2> 	inc esi
  6087 00004694 EBEB                <2> 	jmp chkeqsn
  6088 00004696 B000                <2> chkeqdn: mov al, 0 
  6089 00004698 8806                <2> 	mov [esi], al
  6090 0000469A 46                  <2> 	inc esi
  6091 0000469B E882E8FFFF          <2> 	call tester
  6092 000046A0 3C01                <2> 	cmp al, 1
  6093 000046A2 0F8402000000        <2> 	je near trueif
  6094 000046A8 EB1C                <2> 	jmp falseif
  6095 000046AA 31C0                <2> trueif:	xor eax, eax
  6096 000046AC A0[19B00300]        <2> 	mov al, [IFON]
  6097 000046B1 FEC0                <2> 	inc al
  6098 000046B3 A2[19B00300]        <2> 	mov [IFON], al
  6099 000046B8 30E4                <2> 	xor ah, ah
  6100 000046BA BE[1AB00300]        <2> 	mov esi, IFTRUE
  6101 000046BF 01C6                <2> 	add esi, eax
  6102 000046C1 B401                <2> 	mov ah, 1
  6103 000046C3 8826                <2> 	mov [esi], ah
  6104 000046C5 C3                  <2> 	ret 
  6105 000046C6 31C0                <2> falseif: xor eax, eax
  6106 000046C8 A0[19B00300]        <2> 	mov al, [IFON]
  6107 000046CD FEC0                <2> 	inc al
  6108 000046CF A2[19B00300]        <2> 	mov [IFON], al
  6109 000046D4 30E4                <2> 	xor ah, ah
  6110 000046D6 BE[1AB00300]        <2> 	mov esi, IFTRUE
  6111 000046DB 01C6                <2> 	add esi, eax
  6112 000046DD 30E4                <2> 	xor ah, ah
  6113 000046DF 8826                <2> 	mov [esi], ah
  6114 000046E1 C3                  <2> 	ret 
  6115                              <1> %ifdef network.included
  6116                              <1> 	%include 'source/programs/ipconfig.asm'
  6117                              <1> %endif
  6118                              <1> %include 'source/programs/keycode.asm'
  6119 000046E2 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  6120 000046EB 00                  <2>
  6121                              <2> keycode:
  6122 000046EC 66C705[54230000]00- <2> 	mov word [trans], 0
  6123 000046F4 00                  <2>
  6124 000046F5 C605[3C670000]00    <2> 	mov byte [threadson], 0
  6125                              <2> %ifdef io.serial
  6126                              <2> .noserial:
  6127                              <2> 	hlt
  6128                              <2> 	mov dx, [serial.address]
  6129                              <2> 	in al, dx
  6130                              <2> 	cmp al, 0
  6131                              <2> 	je .noserial
  6132                              <2> 	mov cl, al
  6133                              <2> 	call showhexsmall
  6134                              <2> 	cmp al, 0x1B
  6135                              <2> 	jne .noserial
  6136                              <2> 	in al, dx
  6137                              <2> 	mov cl, al
  6138                              <2> 	call showhexsmall
  6139                              <2> 	cmp cl, 0x5B
  6140                              <2> 	je .noserial
  6141                              <2> 	ret
  6142                              <2> %else
  6143 000046FC E818150000          <2> 	call getkey
  6144 00004701 31C0                <2> 	xor eax, eax
  6145 00004703 31C9                <2> 	xor ecx, ecx
  6146 00004705 8A0D[F65B0000]      <2> 	mov cl, [specialkey]
  6147 0000470B 80F900              <2> 	cmp cl, 0
  6148 0000470E 0F8405000000        <2> 	je near .nospecialkeycode
  6149 00004714 E8F3E9FFFF          <2> 	call showhexsmall
  6150                              <2> .nospecialkeycode:
  6151 00004719 668B0D[52230000]    <2> 	mov cx, [lastkey + 2]
  6152 00004720 E8E7E9FFFF          <2> 	call showhexsmall
  6153 00004725 80F901              <2> 	cmp cl, 1
  6154 00004728 75C2                <2> 	jne keycode
  6155 0000472A C3                  <2> 	ret
  6156                              <2> %endif
  6157                              <1> %ifdef gui.included
  6158                              <1> 	%include 'source/programs/line.asm'
  6159 0000472B FF2C6C696E6500      <2> db 255,44,"line",0
  6160                              <2> linetester:
  6161 00004732 803D[0F850000]00    <2> 	cmp byte [guion], 0
  6162 00004739 0F841B000000        <2> 	je near .done
  6163 0000473F 668B35[5D020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  6164 00004746 BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  6165 0000474B E865000000          <2> 	call .circletest
  6166 00004750 BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  6167 00004755 E801000000          <2> 	call .linetest
  6168                              <2> .done:
  6169 0000475A C3                  <2> 	ret
  6170                              <2> 
  6171                              <2> .linetest:
  6172 0000475B 53                  <2> 	push ebx
  6173 0000475C E8D0000000          <2> 	call .stime
  6174 00004761 5B                  <2> 	pop ebx
  6175 00004762 31FF                <2> 	xor edi, edi
  6176                              <2> .ltlp:
  6177 00004764 53                  <2> 	push ebx
  6178 00004765 E812010000          <2> 	call .st
  6179 0000476A 66F7D6              <2> 	not si
  6180 0000476D E80A010000          <2> 	call .st
  6181 00004772 5B                  <2> 	pop ebx
  6182 00004773 66F7D6              <2> 	not si
  6183 00004776 660335[5B020000]    <2> 	add si, [timenanoseconds]
  6184 0000477D 4B                  <2> 	dec ebx
  6185 0000477E 83FB00              <2> 	cmp ebx, 0
  6186 00004781 77E1                <2> 	ja .ltlp
  6187 00004783 E8C1000000          <2> 	call .etime
  6188 00004788 53                  <2> 	push ebx	
  6189 00004789 57                  <2> 	push edi
  6190 0000478A E8FF250000          <2> 	call guiclear
  6191 0000478F E87B260000          <2> 	call reloadallgraphics
  6192 00004794 59                  <2> 	pop ecx
  6193 00004795 E835EAFFFF          <2> 	call showdec
  6194 0000479A BE[BB480000]        <2> 	mov esi, .msg
  6195 0000479F E870D5FFFF          <2> 	call print
  6196 000047A4 59                  <2> 	pop ecx
  6197 000047A5 E825EAFFFF          <2> 	call showdec
  6198 000047AA BE[E7480000]        <2> 	mov esi, .msgtime
  6199 000047AF E860D5FFFF          <2> 	call print
  6200 000047B4 C3                  <2> 	ret
  6201                              <2> 	
  6202                              <2> .circletest:
  6203 000047B5 53                  <2> 	push ebx
  6204 000047B6 E876000000          <2> 	call .stime
  6205 000047BB 5B                  <2> 	pop ebx
  6206 000047BC 31FF                <2> 	xor edi, edi
  6207                              <2> .ctlp:
  6208 000047BE 53                  <2> 	push ebx
  6209 000047BF 668B0D[2E550000]    <2> 	mov cx, [resolutiony]
  6210 000047C6 66D1E9              <2> 	shr cx, 1
  6211 000047C9 668B15[2C550000]    <2> 	mov dx, [resolutionx]
  6212 000047D0 66D1EA              <2> 	shr dx, 1
  6213 000047D3 6689C8              <2> 	mov ax, cx
  6214                              <2> .circle:
  6215 000047D6 60                  <2> 	pusha
  6216 000047D7 E84B200000          <2> 	call drawcircle
  6217 000047DC 61                  <2> 	popa
  6218 000047DD 6648                <2> 	dec ax
  6219 000047DF 47                  <2> 	inc edi
  6220 000047E0 6683F801            <2> 	cmp ax, 1
  6221 000047E4 77F0                <2> 	ja .circle
  6222 000047E6 66F7D6              <2> 	not si
  6223                              <2> .circle2:
  6224 000047E9 60                  <2> 	pusha
  6225 000047EA E838200000          <2> 	call drawcircle
  6226 000047EF 61                  <2> 	popa
  6227 000047F0 47                  <2> 	inc edi
  6228 000047F1 6640                <2> 	inc ax
  6229 000047F3 6639C8              <2> 	cmp ax, cx
  6230 000047F6 76F1                <2> 	jbe .circle2
  6231 000047F8 5B                  <2> 	pop ebx
  6232 000047F9 66F7D6              <2> 	not si
  6233 000047FC 660335[5B020000]    <2> 	add si, [timenanoseconds]
  6234 00004803 4B                  <2> 	dec ebx
  6235 00004804 83FB00              <2> 	cmp ebx, 0
  6236 00004807 77B5                <2> 	ja .ctlp
  6237 00004809 E83B000000          <2> 	call .etime
  6238 0000480E 53                  <2> 	push ebx
  6239 0000480F 57                  <2> 	push edi
  6240 00004810 59                  <2> 	pop ecx
  6241 00004811 E8B9E9FFFF          <2> 	call showdec
  6242 00004816 BE[D0480000]        <2> 	mov esi, .msgcircle
  6243 0000481B E8F4D4FFFF          <2> 	call print
  6244 00004820 59                  <2> 	pop ecx
  6245 00004821 E8A9E9FFFF          <2> 	call showdec
  6246 00004826 BE[E7480000]        <2> 	mov esi, .msgtime
  6247 0000482B E8E4D4FFFF          <2> 	call print
  6248 00004830 C3                  <2> 	ret
  6249                              <2> 	
  6250                              <2> .stime:
  6251 00004831 F4                  <2> 	hlt
  6252 00004832 A1[57020000]        <2> 	mov eax, [timeseconds]
  6253 00004837 8B1D[5B020000]      <2> 	mov ebx, [timenanoseconds]
  6254 0000483D A3[F6480000]        <2> 	mov [.time], eax
  6255 00004842 891D[FA480000]      <2> 	mov [.time + 4], ebx
  6256 00004848 C3                  <2> 	ret
  6257                              <2> 	
  6258                              <2> .etime:
  6259 00004849 A1[57020000]        <2> 	mov eax, [timeseconds]
  6260 0000484E 8B1D[5B020000]      <2> 	mov ebx, [timenanoseconds]
  6261 00004854 8B0D[F6480000]      <2> 	mov ecx, [.time]
  6262 0000485A 8B15[FA480000]      <2> 	mov edx, [.time + 4]
  6263 00004860 C1EA0A              <2> 	shr edx, 10
  6264 00004863 C1EB0A              <2> 	shr ebx, 10
  6265 00004866 29C8                <2> 	sub eax, ecx
  6266 00004868 83F800              <2> 	cmp eax, 0
  6267 0000486B 740C                <2> 	je .notclp
  6268                              <2> .tclp:
  6269 0000486D 81C340420F00        <2> 	add ebx, 1000000
  6270 00004873 48                  <2> 	dec eax
  6271 00004874 83F800              <2> 	cmp eax, 0
  6272 00004877 75F4                <2> 	jne .tclp
  6273                              <2> .notclp:
  6274 00004879 29D3                <2> 	sub ebx, edx
  6275 0000487B C3                  <2> 	ret
  6276                              <2> 	
  6277                              <2> .st:
  6278 0000487C 6631C0              <2> 	xor ax, ax
  6279 0000487F 6631DB              <2> 	xor bx, bx
  6280 00004882 668B0D[2E550000]    <2> 	mov cx, [resolutiony]
  6281 00004889 668B15[2C550000]    <2> 	mov dx, [resolutionx]
  6282                              <2> .lp:
  6283 00004890 60                  <2> 	pusha
  6284 00004891 E8E5230000          <2> 	call drawline
  6285 00004896 61                  <2> 	popa
  6286                              <2> .noswitch:
  6287 00004897 47                  <2> 	inc edi
  6288 00004898 6643                <2> 	inc bx
  6289 0000489A 664A                <2> 	dec dx
  6290 0000489C 6683FB00            <2> 	cmp bx, 0
  6291 000048A0 74EE                <2> 	je .lp
  6292 000048A2 6683FA00            <2> 	cmp dx, 0
  6293 000048A6 75E8                <2> 	jne .lp
  6294                              <2> .lp2:
  6295 000048A8 60                  <2> 	pusha
  6296 000048A9 E8CD230000          <2> 	call drawline
  6297 000048AE 61                  <2> 	popa
  6298 000048AF 47                  <2> 	inc edi
  6299 000048B0 6640                <2> 	inc ax
  6300 000048B2 6649                <2> 	dec cx
  6301 000048B4 6683F900            <2> 	cmp cx, 0
  6302 000048B8 75EE                <2> 	jne .lp2
  6303 000048BA C3                  <2> 	ret
  6304                              <2> 	
  6305 000048BB 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  6306 000048C4 6520647261776E2069- <2>
  6307 000048CD 6E2000              <2>
  6308 000048D0 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  6309 000048D9 65726520647261776E- <2>
  6310 000048E2 20696E2000          <2>
  6311 000048E7 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  6312 000048F0 6E64732E0A00        <2>
  6313 000048F6 0000000000000000    <2> .time dd 0,0	
  6314                              <1> %endif
  6315                              <1> %include 'source/programs/logout.asm'
  6316 000048FE FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  6317 00004907 E9BAE1FFFF          <2> 	jmp os
  6318                              <1> %include 'source/programs/loop.asm'
  6319 0000490C FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  6320 00004913 803D[83B00300]00    <2> 	cmp byte [LOOPON], 0
  6321 0000491A 0F8501000000        <2> 	jne near filoop
  6322 00004920 C3                  <2> 	ret
  6323 00004921 8B35[84B00300]      <2> filoop: mov esi, [LOOPPOS]
  6324 00004927 FE0D[19B00300]      <2> 	dec byte [IFON]
  6325 0000492D C605[83B00300]00    <2> 	mov byte [LOOPON], 0
  6326 00004934 8935[7EB00300]      <2> 	mov [BATCHPOS], esi
  6327 0000493A 8935[C9380000]      <2> 	mov [batchedi], esi
  6328 00004940 C3                  <2> 	ret 
  6329                              <1> %ifdef disk.none
  6330                              <1> %else
  6331                              <1> 	%include 'source/programs/ls.asm'
  6332 00004941 FF2C6C7300          <2> db 255,44,"ls",0
  6333 00004946 BE[69870300]        <2> 		mov esi, diskfileindex
  6334                              <2> 	diskindexdir:
  6335 0000494B 803E5F              <2> 		cmp byte [esi], '_'
  6336 0000494E 743D                <2> 		je nextdiskindexdir
  6337 00004950 E89ED3FFFF          <2> 		call printquiet
  6338 00004955 56                  <2> 		push esi
  6339 00004956 BE[AA490000]        <2> 		mov esi, disktab
  6340 0000495B E893D3FFFF          <2> 		call printquiet
  6341 00004960 5E                  <2> 		pop esi
  6342 00004961 8B4E05              <2> 		mov ecx, [esi + 5]
  6343 00004964 C605[0B310000]05    <2> 		mov byte [firsthexshown], 5
  6344 0000496B E85FE8FFFF          <2> 		call showdec
  6345 00004970 56                  <2> 		push esi
  6346 00004971 BE[EA840000]        <2> 		mov esi, line
  6347 00004976 E878D3FFFF          <2> 		call printquiet
  6348 0000497B 5E                  <2> 		pop esi
  6349 0000497C 83C609              <2> 		add esi, 9
  6350 0000497F 81FE[FE880300]      <2> 		cmp esi, enddiskfileindex
  6351 00004985 72C4                <2> 		jb diskindexdir
  6352 00004987 E8C8DEFFFF          <2> 		call termcopy
  6353 0000498C C3                  <2> 		ret
  6354                              <2> 	nextdiskindexdir:
  6355 0000498D 46                  <2> 		inc esi
  6356 0000498E 803E00              <2> 		cmp byte [esi], 0
  6357 00004991 75FA                <2> 		jne nextdiskindexdir
  6358 00004993 83C609              <2> 		add esi, 9
  6359 00004996 81FE[FE880300]      <2> 		cmp esi, enddiskfileindex
  6360 0000499C 72AD                <2> 		jb diskindexdir
  6361 0000499E E8B1DEFFFF          <2> 		call termcopy
  6362 000049A3 C3                  <2> 		ret
  6363                              <2> 		
  6364 000049A4 4469736B2000        <2> 		diskmsg db "Disk ",0
  6365 000049AA 0D09090900          <2> 		disktab db 13,9,9,9,0
  6366                              <1> %endif
  6367                              <1> %include 'source/programs/memory.asm'
  6368 000049AF FF2C6D656D6F727900  <2> db 255,44,"memory",0
  6369 000049B8 BE[25850000]        <2> 	mov esi, memlistbuf
  6370 000049BD 31FF                <2> 	xor edi, edi
  6371 000049BF 668B3D[65870000]    <2> 	mov di, [memlistend]
  6372 000049C6 01F7                <2> 	add edi, esi
  6373                              <2> printmemmap:
  6374 000049C8 8B0E                <2> 	mov ecx, [esi]
  6375 000049CA E851E7FFFF          <2> 	call showhex
  6376 000049CF 83C608              <2> 	add esi, 8
  6377 000049D2 8B0E                <2> 	mov ecx, [esi]
  6378 000049D4 E847E7FFFF          <2> 	call showhex
  6379 000049D9 83C608              <2> 	add esi, 8
  6380 000049DC 8B0E                <2> 	mov ecx, [esi]
  6381 000049DE E83DE7FFFF          <2> 	call showhex
  6382 000049E3 83C608              <2> 	add esi, 8
  6383 000049E6 57                  <2> 	push edi
  6384 000049E7 56                  <2> 	push esi
  6385 000049E8 E822D3FFFF          <2> 	call printline
  6386 000049ED 5E                  <2> 	pop esi
  6387 000049EE 5F                  <2> 	pop edi
  6388 000049EF 39FE                <2> 	cmp esi, edi
  6389 000049F1 72D5                <2> 	jb printmemmap
  6390 000049F3 C3                  <2> 	ret
  6391                              <2> 	
  6392                              <1> %include 'source/programs/pci.asm'
  6393 000049F4 FF2C70636900        <2> db 255,44,"pci",0
  6394 000049FA E876180000          <2> 	call pcidump
  6395 000049FF C3                  <2> 	ret 
  6396                              <1> %ifdef network.included
  6397                              <1> 	%include 'source/programs/ping.asm'
  6398                              <1> %endif
  6399                              <1> %ifdef disk.none
  6400                              <1> %else
  6401                              <1> 	%include 'source/programs/play.asm'
  6402 00004A00 FF2C706C61796100    <2> db 255,44,"playa",0
  6403 00004A08 8B3D[1E2F0000]      <2> 	mov edi, [currentcommandloc]
  6404 00004A0E 83C706              <2> 	add edi, 6
  6405 00004A11 E830000000          <2> 	call playasync
  6406 00004A16 C3                  <2> 	ret
  6407 00004A17 FF2C706C61792000    <2> db 255,44,"play ",0
  6408                              <2> play:
  6409 00004A1F 8B3D[1E2F0000]      <2> 	mov edi, [currentcommandloc]
  6410 00004A25 83C705              <2> 	add edi, 5
  6411 00004A28 E819000000          <2> 	call playasync
  6412                              <2> .waitforsound:
  6413 00004A2D F4                  <2> 	hlt
  6414                              <2> %ifdef sound.included
  6415 00004A2E A1[E05B0000]        <2> 	mov eax, [Length0]
  6416 00004A33 660B05[E45B0000]    <2> 	or ax, [Length1]
  6417                              <2> %endif
  6418 00004A3A 0A05[5F020000]      <2> 	or al, [soundon]
  6419 00004A40 83F800              <2> 	cmp eax, 0
  6420 00004A43 75E8                <2> 	jne .waitforsound
  6421 00004A45 C3                  <2> 	ret
  6422                              <2> playasync:
  6423 00004A46 BE0000C000          <2> 	mov esi, 0xC00000
  6424 00004A4B E8431B0000          <2> 	call loadfile
  6425 00004A50 81FA94010000        <2> 	cmp edx, 404
  6426 00004A56 743C                <2> 	je nosoundfound
  6427 00004A58 BB0000C000          <2> 	mov ebx, 0xC00000
  6428 00004A5D 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6429 00004A64 0F8432010000        <2> 	je near wave_player
  6430 00004A6A 66813B534E          <2> 	cmp word [ebx], "SN"
  6431 00004A6F 7523                <2> 	jne nosoundfound
  6432 00004A71 83C306              <2> 	add ebx, 6
  6433 00004A74 891D[62020000]      <2> 	mov [soundpos], ebx
  6434 00004A7A 035BFC              <2> 	add ebx, [ebx - 4]
  6435 00004A7D 891D[66020000]      <2> 	mov [soundendpos], ebx
  6436 00004A83 66C705[60020000]00- <2> 	mov word [soundrepititions], 0
  6437 00004A8B 00                  <2>
  6438 00004A8C C605[5F020000]01    <2> 	mov byte [soundon], 1
  6439 00004A93 C3                  <2> 	ret
  6440                              <2> nosoundfound:
  6441 00004A94 BE[B74A0000]        <2> 	mov esi, notfoundsound
  6442 00004A99 E876D2FFFF          <2> 	call print
  6443 00004A9E 8B35[1E2F0000]      <2> 	mov esi, [currentcommandloc]
  6444 00004AA4 83C605              <2> 	add esi, 5
  6445 00004AA7 E868D2FFFF          <2> 	call print
  6446 00004AAC BE[B9840000]        <2> 	mov esi, notfound2
  6447 00004AB1 E85ED2FFFF          <2> 	call print
  6448 00004AB6 C3                  <2> 	ret
  6449 00004AB7 706C61793A2000      <2> notfoundsound db "play: ",0
  6450                              <2> 
  6451                              <2> %ifdef sound.included
  6452                              <2> sbplay:
  6453 00004ABE BE0000C000          <2> 		mov esi, 0xC00000
  6454 00004AC3 89F3                <2> 		mov ebx, esi
  6455 00004AC5 83C62C              <2> 		add esi, WAVSTART
  6456 00004AC8 29F7                <2> 		sub edi, esi
  6457 00004ACA 66893D[E45B0000]    <2> 		mov [Length1], di
  6458 00004AD1 C1EF0F              <2> 		shr edi, 15
  6459 00004AD4 893D[E05B0000]      <2> 		mov [Length0], edi
  6460 00004ADA 8B4B18              <2> 		mov ecx, [ebx + 24]
  6461 00004ADD 890D[F15B0000]      <2> 		mov [Freq], ecx
  6462 00004AE3 31C0                <2> 		xor eax, eax
  6463 00004AE5 BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  6464 00004AEA 83C22C              <2> 		add edx, WAVSTART
  6465 00004AED 01D0                <2> 		add	eax, edx
  6466 00004AEF 89C6                <2> 		mov esi, eax
  6467 00004AF1 31C9                <2> 		xor ecx, ecx
  6468 00004AF3 31DB                <2> 		xor ebx, ebx
  6469 00004AF5 66891D[EE5B0000]    <2> 		mov [SegLoc], bx
  6470 00004AFC 81C300000800        <2> 		add ebx, 0x80000
  6471 00004B02 66B9FFFF            <2> 		mov cx, 0xFFFF
  6472 00004B06 6683FF00            <2> 		cmp di, 0
  6473 00004B0A 7520                <2> 		jne .autoinit
  6474 00004B0C 668B0D[E45B0000]    <2> 		mov cx, [Length1]
  6475 00004B13 C605[DF5B0000]01    <2> 		mov byte [OddLength], 1
  6476 00004B1A 6681F90080          <2> 		cmp cx, 32768
  6477 00004B1F 730B                <2> 		jae .autoinit
  6478 00004B21 C605[DF5B0000]00    <2> 		mov byte [OddLength], 0
  6479 00004B28 66D1E1              <2> 		shl cx, 1
  6480 00004B2B 47                  <2> 		inc edi
  6481                              <2> .autoinit:
  6482 00004B2C 4F                  <2> 		dec edi
  6483 00004B2D 893D[E05B0000]      <2> 		mov [Length0], edi
  6484 00004B33 66890D[E45B0000]    <2> 		mov [Length1], cx
  6485 00004B3A 66D1E9              <2> 		shr cx, 1
  6486 00004B3D 6641                <2> 		inc cx
  6487 00004B3F 01C8                <2> 		add eax, ecx
  6488 00004B41 A3[E65B0000]        <2> 		mov [NextMemLoc], eax
  6489 00004B46 8935[EA5B0000]      <2> 		mov	[MemLoc], esi
  6490 00004B4C E83A0F0000          <2> 		call DMACopy
  6491 00004B51 31DB                <2> 		xor ebx, ebx
  6492 00004B53 668B1D[EE5B0000]    <2> 		mov bx, [SegLoc]
  6493 00004B5A 31C9                <2> 		xor ecx, ecx
  6494 00004B5C 668B0D[E45B0000]    <2> 		mov cx, [Length1]
  6495 00004B63 66D1E9              <2> 		shr cx, 1
  6496 00004B66 6641                <2> 		inc cx
  6497 00004B68 01CB                <2> 		add ebx, ecx
  6498 00004B6A 66891D[EE5B0000]    <2> 		mov [SegLoc], bx
  6499 00004B71 81C300000800        <2> 		add ebx, 0x80000
  6500 00004B77 8B35[E65B0000]      <2> 		mov esi, [NextMemLoc]
  6501 00004B7D 89F0                <2> 		mov eax, esi
  6502 00004B7F 01C8                <2> 		add eax, ecx
  6503 00004B81 A3[E65B0000]        <2> 		mov [NextMemLoc], eax
  6504 00004B86 8935[EA5B0000]      <2> 		mov	[MemLoc], esi
  6505 00004B8C E8FA0E0000          <2> 		call DMACopy
  6506 00004B91 E8120F0000          <2> 		call DMAPlay
  6507 00004B96 E89C0F0000          <2> 		call PlayDSP
  6508 00004B9B C3                  <2> 		ret
  6509                              <2> WAVSTART equ 44
  6510                              <2> wave_player:
  6511 00004B9C 803D[F55B0000]01    <2> 	cmp byte [SoundBlaster], 1
  6512 00004BA3 0F8415FFFFFF        <2> 	je near sbplay
  6513 00004BA9 BE[B44B0000]        <2> 	mov esi, nosoundblaster
  6514 00004BAE E861D1FFFF          <2> 	call print
  6515 00004BB3 C3                  <2> 	ret
  6516                              <2> %else
  6517                              <2> 	wave_player:
  6518                              <2> 		mov esi, nosoundblaster
  6519                              <2> 		call print
  6520                              <2> 		ret
  6521                              <2> %endif
  6522 00004BB4 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6523 00004BBD 426C61737465722064- <2>
  6524 00004BC6 657465637465642E0A- <2>
  6525 00004BCF 00                  <2>
  6526                              <1> %endif
  6527                              <1> %include 'source/programs/pwd.asm'
  6528 00004BD0 FF2C70776400        <2> db 255,44,"pwd",0
  6529 00004BD6 BE[14AE0300]        <2> 	mov esi, currentfolder
  6530 00004BDB E813D1FFFF          <2> 	call printquiet
  6531 00004BE0 E82AD1FFFF          <2> 	call printline
  6532 00004BE5 C3                  <2> 	ret
  6533                              <2> 	
  6534                              <1> %include 'source/programs/reboot.asm'
  6535 00004BE6 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6536 00004BEF 0F011D[F94B0000]    <2> 		lidt [idtreboot]
  6537 00004BF6 CD00                <2> 		int 0
  6538 00004BF8 F4                  <2> 		hlt
  6539                              <2> 	
  6540 00004BF9 0000                <2> 	idtreboot dw 0
  6541 00004BFB 00000000            <2> 			  dd 0
  6542                              <2> 
  6543                              <2> 	coldboot:
  6544 00004BFF 66B84000            <2> 		MOV AX, 0040h
  6545 00004C03 8EC0                <2> 		MOV ES, AX
  6546 00004C05 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6547 00004C0E 00                  <2>
  6548 00004C0F EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6549 00004C16 CF                  <2> 		IRET
  6550                              <2> 
  6551                              <2> 	warmboot:
  6552 00004C17 66B84000            <2> 		MOV AX, 0040h
  6553 00004C1B 8EC0                <2> 		MOV ES, AX
  6554 00004C1D 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6555 00004C26 12                  <2>
  6556 00004C27 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6557 00004C2E CF                  <2> 		IRET
  6558                              <2> 		
  6559                              <1> %include 'source/programs/reg.asm'
  6560 00004C2F FF2C72656700        <2> db 255,44,"reg",0
  6561 00004C35 CD03                <2> 	int 3
  6562 00004C37 C3                  <2> 	ret 
  6563                              <1> %ifdef disk.none
  6564                              <1> %else
  6565                              <1> 	%include 'source/programs/show.asm'
  6566 00004C38 FF2C73686F7700      <2> db 255,44,"show",0
  6567                              <2> showprog:
  6568 00004C3F 8B3D[1E2F0000]      <2> 		mov edi, [currentcommandloc]
  6569 00004C45 83C705              <2> 		add edi, 5
  6570 00004C48 BE00004000          <2> 		mov esi, 0x400000
  6571 00004C4D 803F26              <2> 		cmp byte [edi], '&'
  6572 00004C50 741B                <2> 		je .nullfile
  6573 00004C52 BE00008000          <2> 		mov esi, 0x800000
  6574 00004C57 E837190000          <2> 		call loadfile
  6575 00004C5C 81FA94010000        <2> 		cmp edx, 404
  6576 00004C62 0F847E000000        <2> 		je near filenotfound
  6577 00004C68 BE00008000          <2> 		mov esi, 0x800000
  6578                              <2> .nullfile:
  6579                              <2> %ifdef gui.included
  6580 00004C6D 66813E424D          <2> 		cmp word [esi], "BM"
  6581 00004C72 740B                <2> 		je bmpfound
  6582                              <2> %endif
  6583 00004C74 E89BD0FFFF          <2> 		call print
  6584 00004C79 E891D0FFFF          <2> 		call printline
  6585 00004C7E C3                  <2> 		ret
  6586                              <2> %ifdef gui.included
  6587                              <2> bmpfound:
  6588 00004C7F 803D[0F850000]00    <2> 		cmp byte [guion], 0
  6589 00004C86 0F8428000000        <2> 		je near noguibmp
  6590 00004C8C BE00008000          <2> 		mov esi, 0x800000
  6591 00004C91 31C9                <2> 		xor ecx, ecx
  6592 00004C93 31D2                <2> 		xor edx, edx
  6593 00004C95 31C0                <2> 		xor eax, eax
  6594 00004C97 31DB                <2> 		xor ebx, ebx
  6595 00004C99 E8C31A0000          <2> 		call showbmp
  6596 00004C9E 30C0                <2> 		xor al, al
  6597 00004CA0 B405                <2> 		mov ah, 5
  6598 00004CA2 CD30                <2> 		int 30h
  6599 00004CA4 E8E5200000          <2> 		call guiclear
  6600 00004CA9 E8C01D0000          <2> 		call clearmousecursor
  6601 00004CAE E85C210000          <2> 		call reloadallgraphics
  6602 00004CB3 C3                  <2> 		ret
  6603                              <2> noguibmp:
  6604 00004CB4 BE[BF4C0000]        <2> 		mov esi, warnguimsg
  6605 00004CB9 E856D0FFFF          <2> 		call print
  6606 00004CBE C3                  <2> 		ret
  6607 00004CBF 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6608 00004CC8 6E6F7420626520646F- <2>
  6609 00004CD1 6E6520776974686F75- <2>
  6610 00004CDA 742074686520475549- <2>
  6611 00004CE3 2E0A00              <2>
  6612                              <2> %endif
  6613                              <2> 
  6614                              <2> filenotfound:
  6615 00004CE6 BE[194D0000]        <2> 		mov esi, filenf
  6616 00004CEB E824D0FFFF          <2> 		call print
  6617 00004CF0 8B35[1E2F0000]      <2> 		mov esi, [currentcommandloc]
  6618                              <2> findfilenotfoundzero:
  6619 00004CF6 8A06                <2> 		mov al, [esi]
  6620 00004CF8 46                  <2> 		inc esi
  6621 00004CF9 3C00                <2> 		cmp al, 0
  6622 00004CFB 7411                <2> 		je nofilenamenotfound
  6623 00004CFD 81FE[88C80300]      <2> 		cmp esi, buftxtend
  6624 00004D03 7309                <2> 		jae nofilenamenotfound
  6625 00004D05 3C20                <2> 		cmp al, " "
  6626 00004D07 75ED                <2> 		jne findfilenotfoundzero
  6627 00004D09 E806D0FFFF          <2> 		call print
  6628                              <2> nofilenamenotfound:
  6629 00004D0E BE[244D0000]        <2> 		mov esi, filenf2
  6630 00004D13 E8FCCFFFFF          <2> 		call print
  6631 00004D18 C3                  <2> 		ret
  6632 00004D19 5468652066696C6520- <2> filenf db "The file ",34,0
  6633 00004D22 2200                <2>
  6634 00004D24 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6635 00004D2D 6F7420626520666F75- <2>
  6636 00004D36 6E642E0A00          <2>
  6637                              <1> %endif
  6638                              <1> %include 'source/programs/shush.asm'
  6639 00004D3B FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6640                              <2> shushprog:
  6641                              <2> %ifdef gui.included
  6642 00004D43 803D[0F850000]00    <2> 	cmp byte [guion], 0
  6643 00004D4A 0F84B5000000        <2> 	je near .noswitchsize
  6644 00004D50 8B35[1E2F0000]      <2> 	mov esi, [currentcommandloc]
  6645 00004D56 83C606              <2> 	add esi, 6
  6646 00004D59 56                  <2> 	push esi
  6647 00004D5A 4E                  <2> 	dec esi
  6648                              <2> .findspace:
  6649 00004D5B 46                  <2> 	inc esi
  6650 00004D5C 8A06                <2> 	mov al, [esi]
  6651 00004D5E 3C00                <2> 	cmp al, 0
  6652 00004D60 0F849F000000        <2> 	je near .noswitchsize
  6653 00004D66 3C58                <2> 	cmp al, "X"
  6654 00004D68 7408                <2> 	je .donefind
  6655 00004D6A 3C78                <2> 	cmp al, "x"
  6656 00004D6C 7404                <2> 	je .donefind
  6657 00004D6E 3C20                <2> 	cmp al, " "
  6658 00004D70 75E9                <2> 	jne .findspace
  6659                              <2> .donefind:
  6660 00004D72 30C0                <2> 	xor al, al
  6661 00004D74 8806                <2> 	mov [esi], al
  6662 00004D76 46                  <2> 	inc esi
  6663 00004D77 89F7                <2> 	mov edi, esi
  6664 00004D79 E820E5FFFF          <2> 	call cnvrttxt
  6665 00004D7E 89C8                <2> 	mov eax, ecx
  6666 00004D80 5E                  <2> 	pop esi
  6667 00004D81 50                  <2> 	push eax
  6668 00004D82 89F7                <2> 	mov edi, esi
  6669 00004D84 E815E5FFFF          <2> 	call cnvrttxt
  6670 00004D89 89CB                <2> 	mov ebx, ecx
  6671 00004D8B 58                  <2> 	pop eax	
  6672 00004D8C 6683FB00            <2> 	cmp bx, 0
  6673 00004D90 0F846F000000        <2> 	je near .noswitchsize
  6674 00004D96 6683F800            <2> 	cmp ax, 0
  6675 00004D9A 0F8465000000        <2> 	je near .noswitchsize
  6676 00004DA0 66C1E303            <2> 	shl bx, 3
  6677 00004DA4 66C1E004            <2> 	shl ax, 4
  6678 00004DA8 663B1D[2C550000]    <2> 	cmp bx, [resolutionx]
  6679 00004DAF 7607                <2> 	jbe .nofixx
  6680 00004DB1 668B1D[2C550000]    <2> 	mov bx, [resolutionx]
  6681                              <2> .nofixx:
  6682 00004DB8 6683C010            <2> 	add ax, 16
  6683 00004DBC 663B05[2E550000]    <2> 	cmp ax, [resolutiony]
  6684 00004DC3 7606                <2> 	jbe .nofixy
  6685 00004DC5 66A1[2E550000]      <2> 	mov ax, [resolutiony]
  6686                              <2> .nofixy:
  6687 00004DCB 6683E810            <2> 	sub ax, 16
  6688 00004DCF 6631C9              <2> 	xor cx, cx
  6689 00004DD2 6631D2              <2> 	xor dx, dx
  6690 00004DD5 66891D[A2710000]    <2> 	mov [termwindow], bx
  6691 00004DDC 66A3[A4710000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6692 00004DE2 BE[A2710000]        <2> 	mov esi, termwindow
  6693 00004DE7 31DB                <2> 	xor ebx, ebx
  6694 00004DE9 6631C0              <2> 	xor ax, ax
  6695 00004DEC E8CF280000          <2> 	call showwindow
  6696 00004DF1 E8981F0000          <2> 	call guiclear
  6697 00004DF6 E8C5CFFFFF          <2> 	call clear
  6698 00004DFB E80F200000          <2> 	call reloadallgraphics
  6699 00004E00 E8521D0000          <2> 	call switchmousepos2
  6700                              <2> .noswitchsize:
  6701                              <2> %endif
  6702 00004E05 BE[104E0000]        <2> 	mov esi, shushmsg
  6703 00004E0A E805CFFFFF          <2> 	call print
  6704 00004E0F C3                  <2> 	ret
  6705 00004E10 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6706 00004E19 6F2074686520536F6C- <2>
  6707 00004E22 6C65724F5320486172- <2>
  6708 00004E2B 646C7920556E69782D- <2>
  6709 00004E34 436F6D70617469626C- <2>
  6710 00004E3D 65205368656C6C210A- <2>
  6711 00004E46 00                  <2>
  6712                              <1> %include 'source/programs/system.asm'
  6713 00004E47 FF2C73797374656D00  <2> 	db 255,44,"system",0
  6714 00004E50 BE[604F0000]        <2> 	mov esi, kernelinfomsg
  6715 00004E55 E899CEFFFF          <2> 	call printquiet
  6716 00004E5A B9[69870300]        <2> 	mov ecx, osend
  6717 00004E5F E86BE3FFFF          <2> 	call showdec
  6718 00004E64 BE[754F0000]        <2> 	mov esi, diskbytemsg
  6719 00004E69 E885CEFFFF          <2> 	call printquiet
  6720 00004E6E B9[69870300]        <2> 	mov ecx, osend
  6721 00004E73 81C1[3C9A2D00]      <2> 	add ecx, commandbufend
  6722 00004E79 81E9[008A0300]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6723 00004E7F E84BE3FFFF          <2> 	call showdec
  6724 00004E84 BE[8C4F0000]        <2> 	mov esi, membytemsg
  6725 00004E89 E865CEFFFF          <2> 	call printquiet
  6726 00004E8E BE[EF4F0000]        <2> 	mov esi, endofmemmsg
  6727 00004E93 E85BCEFFFF          <2> 	call printquiet
  6728 00004E98 B9[3CB24D00]        <2> 	mov ecx, bssend
  6729 00004E9D E87EE2FFFF          <2> 	call showhex
  6730 00004EA2 BE[A54F0000]        <2> 	mov esi, systeminfomsg
  6731 00004EA7 E847CEFFFF          <2> 	call printquiet
  6732                              <2> getcpuspeed:
  6733 00004EAC B8FE000000          <2> 	mov eax, 0xFE
  6734 00004EB1 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6735 00004EB3 B020                <2> 	mov al, 0x20
  6736 00004EB5 E620                <2> 	out 0x20, al
  6737 00004EB7 F4                  <2> 	hlt
  6738 00004EB8 0F31                <2> 	rdtsc
  6739 00004EBA 89D6                <2> 	mov esi, edx
  6740 00004EBC 89C7                <2> 	mov edi, eax
  6741 00004EBE 31C0                <2> 	xor eax, eax
  6742 00004EC0 C605[40020000]01    <2> 	mov byte [testingcpuspeed], 1
  6743                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6744 00004EC7 40                  <2> 	inc eax
  6745 00004EC8 EBFD                <2> 	jmp cpuspeedloop
  6746                              <2> cpuspeedloopend:
  6747 00004ECA 0F31                <2> 	rdtsc
  6748 00004ECC 29F8                <2> 	sub eax, edi
  6749 00004ECE 29F2                <2> 	sub edx, esi
  6750 00004ED0 8915[49020000]      <2> 	mov [cpuclocksperint + 4], edx
  6751 00004ED6 A3[45020000]        <2> 	mov [cpuclocksperint], eax
  6752 00004EDB 31C0                <2> 	xor eax, eax
  6753 00004EDD E621                <2> 	out 0x21, al
  6754 00004EDF B020                <2> 	mov al, 0x20
  6755 00004EE1 E620                <2> 	out 0x20, al
  6756 00004EE3 31D2                <2> 	xor edx, edx
  6757 00004EE5 31C0                <2> 	xor eax, eax
  6758 00004EE7 A1[41020000]        <2> 	mov eax, [cpuspeedperint]
  6759 00004EEC D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6760                              <2> 				;result by 2
  6761 00004EEE 8B1D[53020000]      <2> 	mov ebx, [timeinterval]
  6762 00004EF4 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6763 00004EF7 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6764 00004EF9 89C1                <2> 	mov ecx, eax
  6765 00004EFB E8CFE2FFFF          <2> 	call showdec
  6766 00004F00 BE[D34F0000]        <2> 	mov esi, cpuspeedmsg
  6767 00004F05 E8E9CDFFFF          <2> 	call printquiet
  6768 00004F0A 31D2                <2> 	xor edx, edx
  6769 00004F0C A1[45020000]        <2> 	mov eax, [cpuclocksperint]
  6770 00004F11 8B15[49020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6771 00004F17 8B1D[53020000]      <2> 	mov ebx, [timeinterval]
  6772 00004F1D C1EB0A              <2> 	shr ebx, 10
  6773 00004F20 F7F3                <2> 	div ebx
  6774 00004F22 89C1                <2> 	mov ecx, eax
  6775 00004F24 E8A6E2FFFF          <2> 	call showdec
  6776 00004F29 BE[D94F0000]        <2> 	mov esi, cpuclockmsg
  6777 00004F2E E8C0CDFFFF          <2> 	call printquiet
  6778 00004F33 8B0D[4D020000]      <2> 	mov ecx, [memoryspace]
  6779 00004F39 C1E914              <2> 	shr ecx, 20
  6780 00004F3C 41                  <2> 	inc ecx	;the reading is one MB behind
  6781 00004F3D E88DE2FFFF          <2> 	call showdec
  6782 00004F42 BE[DE4F0000]        <2> 	mov esi, memoryspacemsg
  6783 00004F47 E8C8CDFFFF          <2> 	call print
  6784                              <2> %ifdef sound.included
  6785 00004F4C 803D[F55B0000]00    <2> 	cmp byte [SoundBlaster], 0
  6786 00004F53 740A                <2> 	je .nosb
  6787 00004F55 BE[BB4F0000]        <2> 	mov esi, soundblastermsg
  6788 00004F5A E8B5CDFFFF          <2> 	call print
  6789                              <2> .nosb:
  6790                              <2> %endif
  6791 00004F5F C3                  <2> 	ret
  6792                              <2> 
  6793 00004F60 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6794 00004F69 666F726D6174696F6E- <2>
  6795 00004F72 3A0A00              <2>
  6796 00004F75 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6797 00004F7E 6B2053706163652055- <2>
  6798 00004F87 7365640A00          <2>
  6799 00004F8C 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6800 00004F95 6F7279205370616365- <2>
  6801 00004F9E 20557365640A00      <2>
  6802 00004FA5 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6803 00004FAE 6E666F726D6174696F- <2>
  6804 00004FB7 6E3A0A00            <2>
  6805                              <2> %ifdef sound.included
  6806 00004FBB 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6807 00004FC4 746572204465746563- <2>
  6808 00004FCD 7465642E0A00        <2>
  6809                              <2> %endif
  6810 00004FD3 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6811 00004FD9 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6812 00004FDE 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6813 00004FE7 2053706163650A00    <2>
  6814 00004FEF 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6815 00004FF8 6D6F72792053706163- <2>
  6816 00005001 653A20307800        <2>
  6817                              <1> %include 'source/programs/time.asm'
  6818 00005007 FF2C74696D6500      <2> db 255,44,"time",0	
  6819                              <2> timer:
  6820 0000500E 8B35[1E2F0000]      <2> 	mov esi, [currentcommandloc]
  6821 00005014 83C604              <2> 	add esi, 4
  6822 00005017 803E00              <2> 	cmp byte [esi], 0
  6823 0000501A 7477                <2> 	je .norun
  6824 0000501C 46                  <2> 	inc esi
  6825 0000501D 8B0D[57020000]      <2> 	mov ecx, [timeseconds]
  6826 00005023 51                  <2> 	push ecx
  6827 00005024 8B0D[5B020000]      <2> 	mov ecx, [timenanoseconds]
  6828 0000502A 51                  <2> 	push ecx
  6829 0000502B BF[88C40300]        <2> 	mov edi, buftxt
  6830                              <2> .cpcmd:
  6831 00005030 8A06                <2> 	mov al, [esi]
  6832 00005032 8807                <2> 	mov [edi], al
  6833 00005034 46                  <2> 	inc esi
  6834 00005035 47                  <2> 	inc edi
  6835 00005036 3C00                <2> 	cmp al, 0
  6836 00005038 75F6                <2> 	jne .cpcmd
  6837 0000503A E80FDEFFFF          <2> 	call run
  6838 0000503F 5A                  <2> 	pop edx
  6839 00005040 58                  <2> 	pop eax
  6840                              <2> 
  6841 00005041 8B0D[57020000]      <2> 	mov ecx, [timeseconds]
  6842 00005047 29C1                <2> 	sub ecx, eax
  6843 00005049 8B1D[5B020000]      <2> 	mov ebx, [timenanoseconds]
  6844 0000504F 29D3                <2> 	sub ebx, edx
  6845 00005051 7307                <2> 	jae .nosign
  6846 00005053 81C300CA9A3B        <2> 	add ebx, 1000000000
  6847 00005059 49                  <2> 	dec ecx
  6848                              <2> .nosign:
  6849 0000505A E870E1FFFF          <2> 	call showdec
  6850                              <2> 	
  6851 0000505F 89D9                <2> 	mov ecx, ebx
  6852 00005061 BE[C23E0000]        <2> 	mov esi, timenscache
  6853 00005066 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6854 0000506D C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6855 00005074 C6460A30            <2> 	mov byte [esi + 10], "0"
  6856 00005078 BE[CD3E0000]        <2> 	mov esi, timenscacheend
  6857 0000507D E868DFFFFF          <2> 	call convert
  6858 00005082 BE[C23E0000]        <2> 	mov esi, timenscache
  6859 00005087 E888CCFFFF          <2> 	call print
  6860 0000508C C605[C23E0000]08    <2> 	mov byte [timenscache], 8
  6861                              <2> .norun:
  6862 00005093 C3                  <2> 	ret
  6863                              <2> 	
  6864                              <1> %include 'source/programs/turnoff.asm'
  6865 00005094 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6866 0000509D 00                  <2>
  6867                              <2> 	turnoff:
  6868 0000509E 66C705[D70C0000]-   <2> 			mov word [realmodeptr], shutdown
  6869 000050A5 [B150]              <2>
  6870 000050A7 BB[DB500000]        <2> 			mov ebx, halt
  6871 000050AC E81ABBFFFF          <2> 			call realmode
  6872                              <2> 
  6873                              <2> [BITS 16]
  6874                              <2> 		shutdown:
  6875 000050B1 B453                <2> 			mov ah, 0x53
  6876 000050B3 B004                <2> 			mov al, 4
  6877 000050B5 31DB                <2> 			xor bx, bx
  6878 000050B7 CD15                <2> 			int 0x15
  6879                              <2> 			
  6880 000050B9 B453                <2> 			mov ah, 0x53
  6881 000050BB B001                <2> 			mov al, 1
  6882 000050BD 31DB                <2> 			xor bx, bx
  6883 000050BF CD15                <2> 			int 0x15
  6884                              <2> 			
  6885 000050C1 B453                <2> 			mov ah, 0x53
  6886 000050C3 B008                <2> 			mov al, 8
  6887 000050C5 BB0100              <2> 			mov bx, 1
  6888 000050C8 B90100              <2> 			mov cx, 1
  6889 000050CB CD15                <2> 			int 0x15
  6890                              <2> 			
  6891 000050CD B453                <2> 			mov ah, 0x53
  6892 000050CF B007                <2> 			mov al, 7
  6893 000050D1 BB0100              <2> 			mov bx, 1
  6894 000050D4 B90300              <2> 			mov cx, 3
  6895 000050D7 CD15                <2> 			int 0x15
  6896 000050D9 EBFE                <2> 			jmp $
  6897                              <2> 			[BITS 32]
  6898 000050DB EBFE                <2> halt: jmp $
  6899                              <1> %include 'source/programs/wait.asm'
  6900 000050DD FF2C7761697400      <2> db 255,44,"wait",0
  6901                              <2> waitkey:
  6902 000050E4 E805D2FFFF          <2> 		call getchar
  6903 000050E9 C3                  <2> 		ret
  6904                              <1> %include 'source/programs/while.asm'
  6905 000050EA FF2C7768696C6500    <2> db 255,44,"while",0
  6906 000050F2 30C0                <2> whilecmd:  xor al, al
  6907 000050F4 3805[82B00300]      <2> 	cmp [BATCHISON], al
  6908 000050FA 0F8495E8FFFF        <2> 	je near notbatch
  6909 00005100 8B35[7EB00300]      <2> 	mov esi, [BATCHPOS]
  6910 00005106 83EE02              <2> 	sub esi, 2
  6911 00005109 4E                  <2> whilefnd: dec esi
  6912 0000510A 8A06                <2> 	mov al, [esi]
  6913 0000510C 3C0A                <2> 	cmp al, 10
  6914 0000510E 0F840A000000        <2> 	je near whilefnd2
  6915 00005114 3C00                <2> 	cmp al, 0
  6916 00005116 0F8402000000        <2> 	je near whilefnd2
  6917 0000511C EBEB                <2> 	jmp whilefnd
  6918                              <2> whilefnd2:
  6919 0000511E 46                  <2> 	inc esi
  6920 0000511F 8935[84B00300]      <2> 	mov [LOOPPOS], esi
  6921 00005125 C605[83B00300]01    <2> 	mov BYTE [LOOPON], 1
  6922 0000512C BE[88C40300]        <2> 	mov esi, buftxt
  6923 00005131 BB[88C40300]        <2> 	mov ebx, buftxt
  6924 00005136 83C306              <2> 	add ebx, 6
  6925 00005139 E943F5FFFF          <2> 	jmp chkeqsn
  6926                              <1> progend:		;programs end here	
  6927                              <1> batchprogend:
  6928                                  %include "source/hardware.asm"
  6929                              <1> %ifdef gui.included
  6930                              <1> 	%include "source/drivers/video/vesa.asm"
  6931                              <2> [BITS 16]
  6932                              <2> guiswitch:
  6933 0000513E 83F900              <2> 	cmp cx, 0
  6934 00005141 750B                <2> 	jne guiswitchdefnum
  6935 00005143 B81200              <2> 	mov ax, 12h
  6936 00005146 31DB                <2> 	xor bx, bx
  6937 00005148 CD10                <2> 	int 10h
  6938 0000514A E84E00              <2> 	call guiloadagain
  6939                              <2> guiswitchnocando:
  6940 0000514D C3                  <2> 	ret	;return without switching as mode number is bad
  6941                              <2> guiswitchdefnum:	;switch to a defined mode number
  6942 0000514E B8004F              <2> 	mov ax, 0x4F00
  6943 00005151 BF[1A53]            <2> 	mov di, VBEMODEBLOCK
  6944 00005154 CD10                <2> 	int 10h
  6945 00005156 BE[3C53]            <2> 	mov si, reserved
  6946 00005159 83EE02              <2> 	sub si, 2
  6947                              <2> .loop:
  6948 0000515C 83C602              <2> 	add si, 2
  6949 0000515F 81FE[1A54]          <2> 	cmp si, oemdata
  6950 00005163 74E8                <2> 	je guiswitchnocando
  6951 00005165 833CFF              <2> 	cmp word [si], 0xFFFF
  6952 00005168 74E3                <2> 	je guiswitchnocando
  6953 0000516A 390C                <2> 	cmp [si], cx
  6954 0000516C 75EE                <2> 	jne .loop
  6955 0000516E 8936[7B52]          <2> 	mov [videomodecache], si
  6956 00005172 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6957 00005176 B8014F              <2> 	mov ax, 0x4F01
  6958 00005179 BF[1A55]            <2> 	mov di, VBEMODEINFOBLOCK
  6959 0000517C 890E[7952]          <2> 	mov [vesamode], cx
  6960 00005180 CD10                <2> 	int 10h
  6961 00005182 E9D400              <2> 	jmp selectedvesa
  6962                              <2> guiload:
  6963 00005185 BE[F252]            <2> 	mov si, bootmsg
  6964 00005188 E8F9AE              <2> 	call printrm
  6965 0000518B 31C0                <2> 	xor ax, ax
  6966 0000518D CD16                <2> 	int 16h
  6967 0000518F 3C79                <2> 	cmp al, "y"
  6968 00005191 0F85B1AE            <2> 	jne near vgaset
  6969 00005195 BE[E984]            <2> 	mov si, crlf
  6970 00005198 E8E9AE              <2> 	call printrm
  6971                              <2> guiloadagain:
  6972 0000519B B8004F              <2> 	mov ax, 04F00h
  6973 0000519E BF[1A53]            <2> 	mov di, VBEMODEBLOCK
  6974 000051A1 CD10                <2> 	int 10h
  6975 000051A3 BE[3C53]            <2> 	mov si, reserved
  6976 000051A6 83EE02              <2> 	sub si, 2
  6977                              <2> findvideomodes:
  6978 000051A9 83C602              <2> 	add si, 2
  6979 000051AC 8B0C                <2> 	mov cx, [si]
  6980 000051AE 83F9FF              <2> 	cmp cx, 0xFFFF
  6981 000051B1 0F840A00            <2> 	je near nextvmode
  6982 000051B5 81FE[1A54]          <2> 	cmp si, oemdata
  6983 000051B9 0F8389AE            <2> 	jae near vgaset	;kill if no valid list is found
  6984 000051BD EBEA                <2> 	jmp findvideomodes 	
  6985                              <2> ;debug,shows vmodes available
  6986                              <2> nextvmode:
  6987 000051BF 83EE02              <2> 	sub si, 2
  6988 000051C2 81FE[3C53]          <2> 	cmp si, reserved
  6989 000051C6 0F82D1FF            <2> 	jb near guiloadagain
  6990 000051CA 8B0C                <2> 	mov cx, [si]
  6991 000051CC 83F9FF              <2> 	cmp cx, 0xFFFF
  6992 000051CF 0F84ECFF            <2> 	je near nextvmode
  6993 000051D3 81C90040            <2> 	or cx, 0x4000 		;Linear Frame Buffer
  6994 000051D7 B8014F              <2> 	mov ax, 04F01h
  6995 000051DA BF[1A55]            <2> 	mov di, VBEMODEINFOBLOCK
  6996 000051DD 890E[7952]          <2> 	mov [vesamode], cx
  6997 000051E1 CD10                <2> 	int 10h
  6998 000051E3 A0[3355]            <2> 	mov al, [bitsperpixel]
  6999 000051E6 3C10                <2> 	cmp al, 16
  7000 000051E8 75D5                <2> 	jne nextvmode
  7001 000051EA 8936[7B52]          <2> 	mov [videomodecache], si
  7002 000051EE 84E4                <2> 	test ah, ah
  7003 000051F0 0F842200            <2> 	jz near setvesamode
  7004 000051F4 EBC9                <2> 	jmp nextvmode
  7005 000051F6 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  7006 000051FF 20766964656F206D6F- <2>
  7007 00005208 6465204F4B3F28792F- <2>
  7008 00005211 6E290D0A00          <2>
  7009                              <2> setvesamode:
  7010 00005216 8B36[7B52]          <2> 	mov si, [videomodecache]
  7011 0000521A 8B0C                <2> 	mov cx, [si]
  7012 0000521C E86500              <2> 	call decshow
  7013 0000521F B03A                <2> 	mov al, ':'
  7014 00005221 E8C600              <2> 	call char
  7015 00005224 8B0E[2C55]          <2> 	mov cx, [resolutionx]
  7016 00005228 E85900              <2> 	call decshow
  7017 0000522B B078                <2> 	mov al, "x"
  7018 0000522D E8BA00              <2> 	call char
  7019 00005230 8B0E[2E55]          <2> 	mov cx, [resolutiony]
  7020 00005234 E84D00              <2> 	call decshow
  7021 00005237 B040                <2> 	mov al, "@"
  7022 00005239 E8AE00              <2> 	call char
  7023 0000523C 31C9                <2> 	xor cx, cx
  7024 0000523E 8A0E[3355]          <2> 	mov cl, [bitsperpixel]
  7025 00005242 E83F00              <2> 	call decshow
  7026 00005245 BE[F651]            <2> 	mov si, isthisvideook
  7027 00005248 E839AE              <2> 	call printrm
  7028 0000524B 31C0                <2> 	xor ax, ax
  7029 0000524D CD16                <2> 	int 16h
  7030 0000524F 8B36[7B52]          <2> 	mov si, [videomodecache]
  7031 00005253 3C79                <2> 	cmp al, "y"
  7032 00005255 0F8566FF            <2> 	jne near nextvmode
  7033                              <2> selectedvesa:
  7034 00005259 8B16[2C55]          <2> 	mov dx, [resolutionx]
  7035 0000525D 01D2                <2> 	add dx, dx
  7036 0000525F 8916[1A56]          <2> 	mov [resolutionx2], dx
  7037 00005263 31D2                <2> 	xor dx, dx
  7038 00005265 31C9                <2> 	xor cx, cx
  7039 00005267 B8024F              <2> 	mov ax, 04F02h
  7040 0000526A 8B1E[7952]          <2> 	mov bx, [vesamode]
  7041 0000526E CD10                <2> 	int 10h		;enter VESA mode
  7042 00005270 C606[0F85]01        <2> 	mov byte [guion], 1
  7043 00005275 E8DBAD              <2> 	call getmemorysize;get the memory map after the video is initialized
  7044 00005278 C3                  <2> 	ret
  7045                              <2> 	
  7046 00005279 0000                <2> vesamode dw 0
  7047 0000527B 0000                <2> videomodecache dw 0
  7048                              <2> 
  7049 0000527D 0000000000          <2> dcnm db 0,0,0,0,0
  7050 00005282 0000                <2> dcnmend db 0,0
  7051                              <2> 
  7052                              <2> 
  7053                              <2> decshow:
  7054 00005284 BE[7D52]            <2> 	mov si, dcnm
  7055                              <2> decclear:
  7056 00005287 B030                <2> 	mov al, "0"
  7057 00005289 8804                <2> 	mov [si], al
  7058 0000528B 46                  <2> 	inc si
  7059 0000528C 81FE[8252]          <2> 	cmp si, dcnmend
  7060 00005290 76F5                <2> 	jbe decclear
  7061 00005292 4E                  <2> 	dec si
  7062 00005293 E81500              <2> 	call convertrm
  7063 00005296 BE[7D52]            <2> 	mov si, dcnm
  7064                              <2> dectst:
  7065 00005299 8A04                <2> 	mov al, [si]
  7066 0000529B 46                  <2> 	inc si
  7067 0000529C 81FE[8252]          <2> 	cmp si, dcnmend
  7068 000052A0 7704                <2> 	ja dectstend
  7069 000052A2 3C30                <2> 	cmp al, "0"
  7070 000052A4 76F3                <2> 	jbe dectst
  7071                              <2> dectstend:
  7072 000052A6 4E                  <2> 	dec si
  7073 000052A7 E8DAAD              <2> 	call printrm
  7074 000052AA C3                  <2> 	ret
  7075                              <2> 	
  7076                              <2> 	
  7077                              <2> convertrm:
  7078 000052AB 4E                  <2> 	dec si
  7079 000052AC 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  7080                              <2> cnvrtrm:
  7081 000052AE 89DE                <2> 	mov si, bx
  7082 000052B0 83EE03              <2> 	sub si, 3
  7083 000052B3 46                  <2> ten3rm:	inc si
  7084 000052B4 81F9E803            <2> 	cmp cx, 1000
  7085 000052B8 7208                <2> 	jb ten2rm
  7086 000052BA 81E9E803            <2> 	sub cx, 1000
  7087 000052BE FE04                <2> 	inc byte [si]
  7088 000052C0 EBEC                <2> 	jmp cnvrtrm
  7089 000052C2 46                  <2> ten2rm:	inc si
  7090 000052C3 83F964              <2> 	cmp cx, 100
  7091 000052C6 7207                <2> 	jb ten1rm
  7092 000052C8 83E964              <2> 	sub cx, 100
  7093 000052CB FE04                <2> 	inc byte [si]
  7094 000052CD EBDF                <2> 	jmp cnvrtrm
  7095 000052CF 46                  <2> ten1rm:	inc si
  7096 000052D0 83F90A              <2> 	cmp cx, 10
  7097 000052D3 7207                <2> 	jb ten0rm
  7098 000052D5 83E90A              <2> 	sub cx, 10
  7099 000052D8 FE04                <2> 	inc byte [si]
  7100 000052DA EBD2                <2> 	jmp cnvrtrm
  7101 000052DC 46                  <2> ten0rm:	inc si
  7102 000052DD 83F901              <2> 	cmp cx, 1
  7103 000052E0 7207                <2> 	jb tendnrm
  7104 000052E2 83E901              <2> 	sub cx, 1
  7105 000052E5 FE04                <2> 	inc byte [si]
  7106 000052E7 EBC5                <2> 	jmp cnvrtrm
  7107                              <2> tendnrm:
  7108 000052E9 C3                  <2> 	ret
  7109                              <2> 
  7110                              <2>     char: 		    ;char must be in al
  7111 000052EA BB0700              <2>        mov bx, 07
  7112 000052ED B40E                <2> 	   mov ah, 0Eh
  7113 000052EF CD10                <2> 	   int 10h
  7114 000052F1 C3                  <2> 	   ret
  7115                              <2> 
  7116 000052F2 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  7117 000052FB 20746865204755493F- <2>
  7118 00005304 28792F6E2900        <2>
  7119                              <2> 
  7120                              <2> 
  7121                              <2> mcursor:
  7122 0000530A 01                  <2> 	db	00000001b
  7123 0000530B 81                  <2> 	db	10000001b
  7124 0000530C C1                  <2> 	db	11000001b
  7125 0000530D E1                  <2> 	db	11100001b
  7126 0000530E F1                  <2> 	db	11110001b
  7127 0000530F F9                  <2> 	db	11111001b
  7128 00005310 FD                  <2> 	db	11111101b
  7129 00005311 FF                  <2> 	db	11111111b
  7130 00005312 F9                  <2> 	db	11111001b
  7131 00005313 B9                  <2> 	db	10111001b
  7132 00005314 39                  <2> 	db	00111001b
  7133 00005315 1C                  <2> 	db	00011100b
  7134 00005316 1C                  <2> 	db	00011100b
  7135 00005317 0E                  <2> 	db	00001110b
  7136 00005318 0E                  <2> 	db	00001110b
  7137 00005319 0C                  <2> 	db	00001100b
  7138                              <2> mcursorend:
  7139                              <2> 
  7140                              <2> 
  7141                              <2> VBEMODEBLOCK:
  7142 0000531A 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  7143 0000531E 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  7144 00005320 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  7145 00005324 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  7146 00005328 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  7147 0000532C 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  7148 0000532E 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  7149 00005330 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  7150 00005334 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  7151 00005338 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  7152 0000533C 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  7153 0000541A 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  7154                              <2> 
  7155                              <2> VBEMODEINFOBLOCK:
  7156                              <2> ;Mandatory information for all VBE revision
  7157 0000551A 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  7158 0000551C 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  7159 0000551D 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  7160 0000551E 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  7161 00005520 00<rept>            <2> winsize          	times  2 db 0	;Window size
  7162 00005522 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  7163 00005524 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  7164 00005526 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  7165 0000552A 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  7166                              <2> 
  7167                              <2> ;Mandatory information for VBE 1.2 and above
  7168 0000552C 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  7169 0000552E 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  7170 00005530 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  7171 00005531 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  7172 00005532 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  7173 00005533 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  7174 00005534 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  7175 00005535 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  7176 00005536 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  7177 00005537 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  7178 00005538 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  7179                              <2> 
  7180                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  7181 00005539 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  7182 0000553A 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  7183 0000553B 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  7184 0000553C 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  7185 0000553D 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  7186 0000553E 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  7187 0000553F 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  7188 00005540 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  7189 00005541 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  7190                              <2> 
  7191                              <2> ;Mandatory information for VBE 2.0 and above
  7192 00005542 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  7193 00005546 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  7194 0000554A 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  7195 0000554C 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  7196                              <2> 
  7197 0000561A 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  7198                              <2> VBEEND:
  7199                              <2> [BITS 32]
  7200                              <1> 	%include "source/drivers/input/mouse.asm"
  7201 0000561E 00                  <2> mousedisabled db 0
  7202                              <2> 	
  7203                              <2> 	cursorgui:
  7204 0000561F 803D[A1840000]01    <2> 		cmp byte [mouseon], 1
  7205 00005626 0F8432000000        <2> 		je near mousedaemon
  7206 0000562C 803D[0F850000]00    <2> 		cmp byte [guion], 0
  7207 00005633 0F84F3060000        <2> 		je near entdown
  7208                              <2> 	initmouse:
  7209 00005639 803D[0F850000]00    <2> 		cmp byte [guion], 0
  7210 00005640 7405                <2> 		je noswmsposinit
  7211 00005642 E810150000          <2> 		call switchmousepos2
  7212                              <2> 	noswmsposinit:
  7213 00005647 E851020000          <2> 	  	call PS2SET
  7214 0000564C E87A020000          <2> 		call ACTMOUS
  7215 00005651 C605[A1840000]01    <2> 		mov byte [mouseon],1
  7216 00005658 E893020000          <2> 		call GETB 	;Get the responce byte of the mouse (like: Hey i am active)
  7217                              <2> 		;call GETB
  7218                              <2> 				;if the bytes are mixed up,
  7219                              <2> 				;remove this line or add another of this line.
  7220                              <2> 	nomouse:
  7221 0000565D C3                  <2> 		ret
  7222                              <2> 		
  7223                              <2> 	mousedaemon:
  7224 0000565E 803D[A1840000]01    <2> 		cmp byte [mouseon], 1
  7225 00005665 75D2                <2> 		jne initmouse
  7226 00005667 E464                <2> 		in al, 64h ; Status
  7227 00005669 A820                <2> 		test al, 20h ; PS2-Mouse?
  7228 0000566B 0F8502000000        <2> 		jnz near moused
  7229 00005671 F4                  <2> 		hlt
  7230 00005672 C3                  <2> 		ret
  7231                              <2> 	moused:
  7232 00005673 803D[1E560000]01    <2> 		cmp byte [mousedisabled], 1
  7233 0000567A 74E1                <2> 		je nomouse
  7234 0000567C E86F020000          <2> 		  call GETB
  7235 00005681 88C3                <2> 		  mov  bl, al
  7236 00005683 80E301              <2> 		  and  bl, 1
  7237 00005686 881D[15590000]      <2> 		  mov  BYTE [LBUTTON], bl
  7238 0000568C 88C3                <2> 		  mov  bl, al
  7239 0000568E 80E302              <2> 		  and  bl, 2
  7240 00005691 D0EB                <2> 		  shr  bl, 1
  7241 00005693 881D[16590000]      <2> 		  mov  BYTE [RBUTTON], bl
  7242 00005699 88C3                <2> 		  mov  bl, al
  7243 0000569B 80E304              <2> 		  and  bl, 4
  7244 0000569E C0EB02              <2> 		  shr  bl, 2
  7245 000056A1 881D[17590000]      <2> 		  mov  BYTE [MBUTTON], bl
  7246 000056A7 E844020000          <2> 		  call GETB
  7247 000056AC A2[18590000]        <2> 		  mov  BYTE [XCOORD], al
  7248 000056B1 E83A020000          <2> 		  call GETB
  7249 000056B6 A2[19590000]        <2> 		  mov  BYTE [YCOORD], al
  7250                              <2> 
  7251                              <2> 	showpixelcursor:
  7252 000056BB 668B15[06580000]    <2> 		mov dx, [mousecursorposition]
  7253 000056C2 668B0D[08580000]    <2> 		mov cx, [mousecursorposition + 2]
  7254 000056C9 668915[02580000]    <2> 		mov [lastmouseposition], dx
  7255 000056D0 66890D[04580000]    <2> 		mov [lastmouseposition + 2], cx
  7256 000056D7 A0[18590000]        <2> 		mov al, [XCOORD]
  7257 000056DC 3C80                <2> 		cmp al, 128
  7258 000056DE 7309                <2> 		jae subxcoord
  7259 000056E0 00C0                <2> 		add al, al
  7260 000056E2 30E4                <2> 		xor ah, ah
  7261 000056E4 6601C2              <2> 		add dx, ax
  7262 000056E7 EB0B                <2> 		jmp subxcoorddn
  7263                              <2> 	subxcoord:
  7264 000056E9 00C0                <2> 		add al, al
  7265 000056EB 30DB                <2> 		xor bl, bl
  7266 000056ED 28C3                <2> 		sub bl, al
  7267 000056EF 30FF                <2> 		xor bh, bh
  7268 000056F1 6629DA              <2> 		sub dx, bx
  7269                              <2> 	subxcoorddn:
  7270 000056F4 8A1D[19590000]      <2> 		mov bl, [YCOORD]
  7271 000056FA 30C0                <2> 		xor al, al
  7272 000056FC 28D8                <2> 		sub al, bl
  7273 000056FE 3C80                <2> 		cmp al, 128
  7274 00005700 7307                <2> 		jae subycoord
  7275 00005702 30E4                <2> 		xor ah, ah
  7276 00005704 6601C1              <2> 		add cx, ax
  7277 00005707 EB09                <2> 		jmp subycoorddn
  7278                              <2> 	subycoord:
  7279 00005709 30DB                <2> 		xor bl, bl
  7280 0000570B 28C3                <2> 		sub bl, al
  7281 0000570D 30FF                <2> 		xor bh, bh
  7282 0000570F 6629D9              <2> 		sub cx, bx
  7283                              <2> 	subycoorddn:
  7284 00005712 6681FA204E          <2> 		cmp dx, 20000
  7285 00005717 7603                <2> 		jbe nooriginx2
  7286 00005719 6631D2              <2> 		xor dx, dx
  7287                              <2> 	nooriginx2:
  7288 0000571C 6681F9204E          <2> 		cmp cx, 20000
  7289 00005721 7603                <2> 		jbe nooriginy2
  7290 00005723 6631C9              <2> 		xor cx, cx
  7291                              <2> 	nooriginy2:
  7292 00005726 6683FA00            <2> 		cmp dx, 0
  7293 0000572A 7414                <2> 		je nofixxcolumn2
  7294 0000572C 663B15[1A560000]    <2> 		cmp dx, [resolutionx2]
  7295 00005733 720B                <2> 		jb nofixxcolumn2
  7296 00005735 668B15[1A560000]    <2> 		mov dx, [resolutionx2]
  7297 0000573C 6683EA02            <2> 		sub dx, 2
  7298                              <2> 	nofixxcolumn2:
  7299 00005740 6683F900            <2> 		cmp cx, 0
  7300 00005744 7414                <2> 		je nofixyrow2
  7301 00005746 663B0D[2E550000]    <2> 		cmp cx, [resolutiony]
  7302 0000574D 720B                <2> 		jb nofixyrow2
  7303 0000574F 668B0D[2E550000]    <2> 		mov cx, [resolutiony]
  7304 00005756 6683E901            <2> 		sub cx, 1
  7305                              <2> 	nofixyrow2:
  7306 0000575A 668915[06580000]    <2> 		mov [mousecursorposition], dx
  7307 00005761 66890D[08580000]    <2> 		mov [mousecursorposition + 2], cx
  7308 00005768 803D[0F850000]00    <2> 		cmp byte [guion], 0
  7309 0000576F 0F8495000000        <2> 		je near termmouse
  7310 00005775 E882130000          <2> 		call switchmousepos ;use dragging code to ensure proper icon drag
  7311 0000577A 803D[15590000]01    <2> 		cmp byte [LBUTTON], 1
  7312 00005781 0F8408250000        <2> 		je near clickicon
  7313 00005787 803D[16590000]01    <2> 		cmp byte [RBUTTON], 1
  7314 0000578E 0F84FB240000        <2> 		je near clickicon
  7315 00005794 A0[7C7C0000]        <2> 		mov al, [pbutton]
  7316 00005799 C705[7F7C0000]0000- <2> 		mov dword [dragging], 0
  7317 000057A1 0000                <2>
  7318 000057A3 3C00                <2> 		cmp al, 0
  7319 000057A5 740F                <2> 		je nopreviousbutton
  7320 000057A7 E8C2120000          <2> 		call clearmousecursor
  7321 000057AC E85E160000          <2> 		call reloadallgraphics
  7322                              <2> 	windowtermcopyend:
  7323 000057B1 E8A1130000          <2> 		call switchmousepos2
  7324                              <2> 	nopreviousbutton:
  7325 000057B6 30C0                <2> 		xor al, al
  7326 000057B8 A2[7C7C0000]        <2> 		mov [pbutton], al
  7327 000057BD A2[A8810000]        <2> 		mov [windrag], al
  7328 000057C2 A0[15590000]        <2> 		mov al, [LBUTTON]
  7329 000057C7 A2[7D7C0000]        <2> 		mov [pLBUTTON], al
  7330 000057CC A0[16590000]        <2> 		mov al, [RBUTTON]
  7331 000057D1 A2[7E7C0000]        <2> 		mov [pRBUTTON], al
  7332 000057D6 31D2                <2> 		xor edx, edx
  7333 000057D8 668B15[06580000]    <2> 		mov dx, [mousecursorposition]
  7334 000057DF 668B0D[08580000]    <2> 		mov cx, [mousecursorposition + 2]
  7335 000057E6 66BB18C7            <2> 		mov bx, 1100011100011000b
  7336 000057EA 66B80100            <2> 		mov ax, 1
  7337 000057EE C605[797C0000]01    <2> 		mov byte [showcursorfonton], 1
  7338 000057F5 E8D51C0000          <2> 		call showfontvesa
  7339 000057FA C605[797C0000]00    <2> 		mov byte [showcursorfonton], 0
  7340 00005801 C3                  <2> 		ret
  7341                              <2> 
  7342 00005802 00000000            <2> lastmouseposition dw 0,0
  7343 00005806 00000000            <2> mousecursorposition dw 0,0	
  7344                              <2> 
  7345                              <2> termmouse:
  7346 0000580A BE[9CDF2B00]        <2> 		mov esi, videobuf
  7347 0000580F 31D2                <2> 		xor edx, edx
  7348 00005811 668B15[02580000]    <2> 		mov dx, [lastmouseposition]
  7349 00005818 668B0D[04580000]    <2> 		mov cx, [lastmouseposition + 2]
  7350 0000581F 66A1[9B580000]      <2> 		mov ax, [cursorcache]
  7351 00005825 6683F800            <2> 		cmp ax, 0
  7352 00005829 7424                <2> 		je nocopycursorcache
  7353 0000582B 66C1E104            <2> 		shl cx, 4
  7354 0000582F 66C1E203            <2> 		shl dx, 3
  7355 00005833 01D6                <2> 		add esi, edx
  7356 00005835 6631D2              <2> 		xor dx, dx
  7357 00005838 8A15[5A250000]      <2> 		mov dl, [charxy]
  7358 0000583E 6641                <2> 		inc cx
  7359                              <2> termmousecplp1:
  7360 00005840 01D6                <2> 		add esi, edx
  7361 00005842 6649                <2> 		dec cx
  7362 00005844 6683F900            <2> 		cmp cx, 0
  7363 00005848 75F6                <2> 		jne termmousecplp1
  7364 0000584A 29D6                <2> 		sub esi, edx
  7365 0000584C 668906              <2> 		mov [esi], ax
  7366                              <2> nocopycursorcache:
  7367 0000584F BE[9CDF2B00]        <2> 		mov esi, videobuf
  7368 00005854 31D2                <2> 		xor edx, edx
  7369 00005856 668B15[06580000]    <2> 		mov dx, [mousecursorposition]
  7370 0000585D 668B0D[08580000]    <2> 		mov cx, [mousecursorposition + 2]
  7371 00005864 66C1E104            <2> 		shl cx, 4
  7372 00005868 66C1E203            <2> 		shl dx, 3
  7373 0000586C 01D6                <2> 		add esi, edx
  7374 0000586E 6631D2              <2> 		xor dx, dx
  7375 00005871 8A15[5A250000]      <2> 		mov dl, [charxy]
  7376 00005877 6641                <2> 		inc cx
  7377                              <2> termmousecplp2:
  7378 00005879 01D6                <2> 		add esi, edx
  7379 0000587B 6649                <2> 		dec cx
  7380 0000587D 6683F900            <2> 		cmp cx, 0
  7381 00005881 75F6                <2> 		jne termmousecplp2
  7382 00005883 29D6                <2> 		sub esi, edx
  7383 00005885 668B06              <2> 		mov ax, [esi]
  7384 00005888 66A3[9B580000]      <2> 		mov [cursorcache], ax
  7385 0000588E B080                <2> 		mov al, 128
  7386 00005890 B407                <2> 		mov ah, 7
  7387 00005892 668906              <2> 		mov [esi], ax
  7388 00005895 E8BACFFFFF          <2> 		call termcopy
  7389 0000589A C3                  <2> 		ret
  7390 0000589B 0000                <2> cursorcache db 0,0
  7391                              <2> 
  7392                              <2> PS2SET:
  7393 0000589D B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7394 0000589F E664                <2>   out  0x64, al		; write to keyboardcontroller
  7395 000058A1 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7396 000058A6 C3                  <2> ret
  7397                              <2> 
  7398                              <2> CHKPRT:
  7399 000058A7 66B96400            <2>   mov  cx, 100
  7400                              <2>  .again:
  7401 000058AB E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7402 000058AD A802                <2>   test al, 2		; Check if input buffer is empty
  7403 000058AF 7402                <2>   je .go
  7404 000058B1 E2F8                <2>   loop .again
  7405                              <2>  .go:
  7406 000058B3 C3                  <2> ret
  7407                              <2> 
  7408                              <2> WMOUS:
  7409 000058B4 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7410 000058B6 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7411 000058B8 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7412 000058BD C3                  <2> ret
  7413                              <2> 
  7414                              <2> MBUFFUL:
  7415 000058BE 66B96400            <2>   mov cx, 100
  7416                              <2>  .mn:
  7417 000058C2 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7418 000058C4 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7419 000058C6 7402                <2>   jz  .mnn
  7420 000058C8 E2F8                <2>   loop .mn
  7421                              <2>  .mnn:
  7422 000058CA C3                  <2> ret
  7423                              <2> 
  7424                              <2> 
  7425                              <2> ACTMOUS:
  7426 000058CB E8E4FFFFFF          <2>   call WMOUS
  7427 000058D0 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7428 000058D2 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7429 000058D4 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7430 000058D9 E801000000          <2>   call CHKMOUS		; check if a byte is available
  7431 000058DE C3                  <2> ret
  7432                              <2> 
  7433                              <2> CHKMOUS:
  7434 000058DF B300                <2>   mov  bl, 0
  7435 000058E1 66B96400            <2>   mov cx, 100
  7436                              <2>  .vrd:
  7437 000058E5 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7438 000058E7 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7439 000058E9 7504                <2>   jnz .yy
  7440 000058EB E2F8                <2>   loop .vrd
  7441 000058ED B301                <2>   mov  bl, 1
  7442                              <2>  .yy:
  7443 000058EF C3                  <2> ret
  7444                              <2> 
  7445                              <2> GETB:
  7446                              <2>  .cagain:
  7447 000058F0 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7448 000058F5 08DB                <2>   or bl, bl
  7449 000058F7 75F7                <2>   jnz .cagain
  7450 000058F9 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7451 000058FB E664                <2>   out  0x64, al		; write to keyboardcontroller
  7452 000058FD E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7453 00005902 6631C0              <2>   xor  ax, ax
  7454 00005905 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7455 00005907 88C2                <2>   mov  dl, al
  7456 00005909 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7457 0000590B E664                <2>   out  0x64, al		; write to keyboardcontroller
  7458 0000590D E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7459 00005912 88D0                <2>   mov  al, dl
  7460 00005914 C3                  <2> ret
  7461                              <2> 
  7462 00005915 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7463 00005916 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7464 00005917 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7465 00005918 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7466 00005919 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7467                              <1> %endif
  7468                              <1> %include "source/drivers/sound/pcspkr.asm"
  7469                              <2> ;PC Speaker Drivers
  7470                              <2> PCSpeakerRAW:
  7471 0000591A 60                  <2> 	pusha
  7472                              <2> nosoundrep:
  7473 0000591B 8B35[62020000]      <2> 	mov esi, [soundpos]
  7474 00005921 31C9                <2> 	xor ecx, ecx
  7475 00005923 668B0D[60020000]    <2> 	mov cx, [soundrepititions]
  7476 0000592A 6683F900            <2> 	cmp cx, 0
  7477 0000592E 0F8540000000        <2> 	jne near donesetpitch
  7478 00005934 668B0E              <2> 	mov cx, [esi]
  7479 00005937 668B5E02            <2> 	mov bx, [esi + 2]
  7480 0000593B 66890D[60020000]    <2> 	mov [soundrepititions], cx
  7481 00005942 83C604              <2> 	add esi, 4
  7482 00005945 8935[62020000]      <2> 	mov [soundpos], esi
  7483 0000594B 3B35[66020000]      <2> 	cmp esi, [soundendpos]
  7484 00005951 7730                <2> 	ja stopsound
  7485 00005953 66833D[60020000]00  <2> 	cmp word [soundrepititions], 0
  7486 0000595B 74BE                <2> 	je nosoundrep
  7487 0000595D 6683FB00            <2> 	cmp bx, 0
  7488 00005961 740C                <2> 	je nosoundplay
  7489 00005963 E83D000000          <2> 	call setpitch
  7490 00005968 E846000000          <2> 	call startsound
  7491 0000596D EB05                <2> 	jmp donesetpitch
  7492                              <2> nosoundplay:
  7493 0000596F E846000000          <2> 	call killsound
  7494                              <2> donesetpitch:
  7495 00005974 6649                <2> 	dec cx
  7496 00005976 66890D[60020000]    <2> 	mov [soundrepititions], cx
  7497 0000597D 61                  <2> 	popa
  7498 0000597E E91BA9FFFF          <2> 	jmp timerinterrupt
  7499                              <2> stopsound:
  7500 00005983 31C0                <2> 	xor eax, eax
  7501 00005985 66A3[60020000]      <2> 	mov [soundrepititions], ax
  7502 0000598B A2[5F020000]        <2> 	mov [soundon], al
  7503 00005990 A3[62020000]        <2> 	mov [soundpos], eax
  7504 00005995 A3[66020000]        <2> 	mov [soundendpos], eax
  7505 0000599A E81B000000          <2> 	call killsound
  7506 0000599F 61                  <2> 	popa
  7507 000059A0 E9F9A8FFFF          <2> 	jmp timerinterrupt
  7508                              <2> 
  7509                              <2> 
  7510                              <2> setpitch:
  7511 000059A5 B0B6                <2> 	mov al, 0xB6
  7512 000059A7 E643                <2> 	out 0x43, al
  7513 000059A9 6689D8              <2> 	mov ax, bx
  7514 000059AC E642                <2> 	out 0x42, al
  7515 000059AE 88E0                <2> 	mov al, ah
  7516 000059B0 E642                <2> 	out 0x42, al
  7517 000059B2 C3                  <2> 	ret
  7518                              <2> startsound:
  7519 000059B3 E461                <2> 	in al, 0x61
  7520 000059B5 0C03                <2> 	or al, 3
  7521 000059B7 E661                <2> 	out 0x61, al
  7522 000059B9 C3                  <2> 	ret
  7523                              <2> killsound:
  7524 000059BA E461                <2> 	in al, 0x61
  7525 000059BC 24FC                <2> 	and al, 0xFC
  7526 000059BE E661                <2> 	out 0x61, al
  7527 000059C0 C3                  <2> 	ret
  7528                              <2> 	
  7529                              <1> %ifdef sound.included
  7530                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7531                              <2> ;Sound Blaster Drivers
  7532                              <2> sblaster:
  7533                              <2> .init:
  7534 000059C1 E8D5010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  7535 000059C6 A2[F55B0000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  7536 000059CB 3C00                <2> 		cmp al, 0
  7537 000059CD 7418                <2> 		je .noinit
  7538 000059CF B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  7539 000059D1 E8F9010000          <2> 		call WriteDSP
  7540 000059D6 B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  7541 000059D8 E8AF010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  7542 000059DD BE[E8590000]        <2> 		mov esi, .initmsg
  7543 000059E2 E82DC3FFFF          <2> 		call print
  7544                              <2> .noinit:
  7545 000059E7 C3                  <2> 		ret
  7546 000059E8 5342313620496E6974- <2> .initmsg db "SB16 Initialized.",10,0
  7547 000059F1 69616C697A65642E0A- <2>
  7548 000059FA 00                  <2>
  7549                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  7550 000059FB 833D[E05B0000]00    <2> 	cmp dword [Length0], 0
  7551 00005A02 0F845F000000        <2> 	je near .done
  7552 00005A08 FF0D[E05B0000]      <2> 	dec dword [Length0]
  7553 00005A0E EB08                <2> 	jmp .notodd
  7554                              <2> .oddlength:
  7555 00005A10 31C9                <2> 	xor ecx, ecx
  7556 00005A12 880D[DF5B0000]      <2> 	mov [OddLength], cl
  7557                              <2> .notodd:
  7558 00005A18 8B35[E65B0000]      <2> 	mov esi, [NextMemLoc]
  7559 00005A1E 31C9                <2> 	xor ecx, ecx
  7560 00005A20 668B0D[E45B0000]    <2> 	mov cx, [Length1]
  7561 00005A27 D1E9                <2> 	shr ecx, 1
  7562 00005A29 6641                <2> 	inc cx
  7563 00005A2B 31DB                <2> 	xor ebx, ebx
  7564 00005A2D 668B1D[EE5B0000]    <2> 	mov bx, [SegLoc]
  7565 00005A34 6601CB              <2> 	add bx, cx
  7566 00005A37 66891D[EE5B0000]    <2> 	mov [SegLoc], bx
  7567 00005A3E 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  7568 00005A44 8935[EA5B0000]      <2> 	mov [MemLoc], esi
  7569 00005A4A 89C8                <2> 	mov eax, ecx
  7570 00005A4C 01F0                <2> 	add eax, esi
  7571 00005A4E A3[E65B0000]        <2> 	mov [NextMemLoc], eax
  7572 00005A53 E833000000          <2> 	call DMACopy
  7573                              <2> 	;call DMAPlay
  7574 00005A58 E8DA000000          <2> 	call PlayDSP
  7575 00005A5D 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7576 00005A61 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7577 00005A62 E9EFA8FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  7578                              <2> .done:
  7579 00005A67 803D[DF5B0000]01    <2> 	cmp byte [OddLength], 1
  7580 00005A6E 74A0                <2> 	je .oddlength
  7581 00005A70 31C0                <2> 	xor eax, eax
  7582 00005A72 66A3[E45B0000]      <2> 	mov [Length1], ax
  7583 00005A78 66B8D000            <2> 	mov ax, 0xD0
  7584 00005A7C E84E010000          <2> 	call WriteDSP
  7585 00005A81 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7586 00005A85 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7587 00005A86 E9CBA8FFFF          <2> 	jmp handled2
  7588                              <2> 	
  7589                              <2> DMACopy:
  7590 00005A8B 66B80800            <2> 		mov ax, LINEAR_SEL
  7591 00005A8F 8EE0                <2> 		mov fs, ax
  7592 00005A91 C1E902              <2> 		shr ecx, 2
  7593                              <2> .loop:
  7594 00005A94 8B06                <2> 		mov eax, [esi]
  7595 00005A96 648903              <2> 		mov [fs:ebx], eax
  7596 00005A99 83C604              <2> 		add esi, 4
  7597 00005A9C 83C304              <2> 		add ebx, 4
  7598 00005A9F E2F3                <2> 		loop .loop
  7599 00005AA1 66B83000            <2> 		mov ax, NEW_DATA_SEL
  7600 00005AA5 8EE0                <2> 		mov fs, ax
  7601 00005AA7 C3                  <2> 		ret
  7602                              <2> 		
  7603                              <2> 
  7604                              <2> DMAPlay:    ;uses eax ebx edx
  7605 00005AA8 C605[F05B0000]00    <2> 		mov	byte [Page1],00h
  7606                              <2> 
  7607 00005AAF B005                <2> 		mov	al,(Channel+4)
  7608 00005AB1 66BA0A00            <2> 		mov	dx,0Ah
  7609 00005AB5 EE                  <2> 		out	dx,al
  7610 00005AB6 30C0                <2> 		xor	al,al
  7611 00005AB8 66BA0C00            <2> 		mov	dx,0Ch
  7612 00005ABC EE                  <2> 		out	dx,al
  7613 00005ABD B059                <2> 		mov	al,ModeReg
  7614 00005ABF 66BA0B00            <2> 		mov	dx,0Bh
  7615 00005AC3 EE                  <2> 		out	dx,al
  7616 00005AC4 B800000800          <2> 		mov	eax,0x80000
  7617 00005AC9 66BA0200            <2> 		mov	dx,AddPort
  7618 00005ACD EE                  <2> 		out	dx,al
  7619 00005ACE 86C4                <2> 		xchg al,ah
  7620 00005AD0 EE                  <2> 		out	dx,al
  7621 00005AD1 B800000800          <2> 		mov	eax,0x80000
  7622 00005AD6 89C2                <2> 		mov	edx,eax
  7623 00005AD8 2500000100          <2> 		and	eax,65536
  7624 00005ADD 7406                <2> 		jz	MemLocN1
  7625 00005ADF FE05[F05B0000]      <2> 		inc	byte [Page1]
  7626                              <2> MemLocN1:
  7627 00005AE5 89D0                <2> 		mov	eax,edx
  7628 00005AE7 2500000200          <2> 		and	eax,131072
  7629 00005AEC 7407                <2> 		jz	MemLocN2
  7630 00005AEE 8005[F05B0000]02    <2> 		add	byte [Page1],02
  7631                              <2> MemLocN2:
  7632 00005AF5 89D0                <2> 		mov	eax,edx
  7633 00005AF7 2500000400          <2> 		and	eax,262144
  7634 00005AFC 7407                <2> 		jz	MemLocN3
  7635 00005AFE 8005[F05B0000]04    <2> 		add	byte [Page1],04
  7636                              <2> MemLocN3:
  7637 00005B05 89D0                <2> 		mov	eax,edx
  7638 00005B07 2500000800          <2> 		and	eax,524288
  7639 00005B0C 7407                <2> 		jz	MemLocN4
  7640 00005B0E 8005[F05B0000]08    <2> 		add	byte [Page1],08
  7641                              <2> MemLocN4:
  7642 00005B15 66BA8300            <2> 		mov	dx,PgPort
  7643 00005B19 A0[F05B0000]        <2> 		mov	al,[Page1]
  7644 00005B1E EE                  <2> 		out	dx,al
  7645 00005B1F 66BA0300            <2> 		mov	dx,LenPort
  7646 00005B23 66A1[E45B0000]      <2> 		mov	ax,[Length1]
  7647 00005B29 6648                <2> 		dec ax
  7648 00005B2B EE                  <2> 		out	dx,al
  7649 00005B2C 86C4                <2> 		xchg al,ah
  7650 00005B2E EE                  <2> 		out	dx,al
  7651 00005B2F 66BA0A00            <2> 		mov	dx,0Ah
  7652 00005B33 B001                <2> 		mov	al,Channel
  7653 00005B35 EE                  <2> 		out	dx,al
  7654 00005B36 C3                  <2> 		ret
  7655                              <2> 		
  7656                              <2> PlayDSP:
  7657 00005B37 B040                <2> 		mov	al,40h
  7658 00005B39 E891000000          <2> 		call WriteDSP
  7659 00005B3E 31D2                <2> 		xor	edx,edx
  7660 00005B40 B840420F00          <2> 		mov	eax,1000000
  7661 00005B45 8B1D[F15B0000]      <2> 		mov	ebx,[Freq]
  7662 00005B4B 803D[DE5B0000]00    <2> 		cmp byte [Stereo], 0
  7663 00005B52 7402                <2> 		je .nost
  7664 00005B54 D1E3                <2> 		shl ebx, 1
  7665                              <2> .nost:
  7666 00005B56 F7F3                <2> 		div	ebx
  7667 00005B58 89C3                <2> 		mov	ebx,eax
  7668 00005B5A B800010000          <2> 		mov	eax,256
  7669 00005B5F 29D8                <2> 		sub	eax,ebx
  7670 00005B61 E869000000          <2> 		call WriteDSP
  7671 00005B66 B014                <2> 		mov	al,14h	;write the mode
  7672 00005B68 803D[DE5B0000]00    <2> 		cmp byte [Stereo], 0
  7673 00005B6F 7400                <2> 		je .nost2
  7674                              <2> 		
  7675                              <2> .nost2:
  7676 00005B71 E859000000          <2> 		call WriteDSP
  7677 00005B76 66A1[E45B0000]      <2> 		mov	ax,[Length1]
  7678 00005B7C 66D1E8              <2> 		shr ax, 1
  7679 00005B7F E84B000000          <2> 		call WriteDSP
  7680 00005B84 86C4                <2> 		xchg al,ah
  7681 00005B86 E844000000          <2> 		call WriteDSP
  7682 00005B8B C3                  <2> 		ret
  7683                              <2> 
  7684                              <2> MstrVol:    ;uses ax dx
  7685 00005B8C 6650                <2> 	   push ax
  7686 00005B8E 66BA2402            <2> 	   mov	dx,(BasePort+4)
  7687 00005B92 B022                <2> 	   mov	al,22h
  7688 00005B94 EE                  <2> 	   out	dx,al
  7689 00005B95 6658                <2> 	   pop	ax
  7690 00005B97 6642                <2> 	   inc	dx
  7691 00005B99 EE                  <2> 	   out	dx,al
  7692 00005B9A C3                  <2> 	   ret
  7693                              <2> 	   
  7694                              <2> ResetDSP:   ; uses cx dx
  7695 00005B9B 66BA2602            <2> 			mov	dx,(BasePort+6)
  7696 00005B9F B001                <2> 			mov	al,01
  7697 00005BA1 EE                  <2> 			out	dx,al
  7698 00005BA2 66B93200            <2> 			mov	cx,50
  7699 00005BA6 EC                  <2> WaitIt1:	in	al,dx
  7700 00005BA7 E2FD                <2> 			loop WaitIt1
  7701 00005BA9 30C0                <2> 			xor	al,al
  7702 00005BAB EE                  <2> 			out	dx,al
  7703 00005BAC 66B93200            <2> 			mov	cx,50
  7704 00005BB0 EC                  <2> WaitIt2:	in	al,dx
  7705 00005BB1 E2FD                <2> 			loop WaitIt2
  7706 00005BB3 B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  7707 00005BB5 66BA2E02            <2> 			mov	dx,(BasePort+14)
  7708 00005BB9 EC                  <2> 			in	al,dx
  7709 00005BBA 2480                <2> 			and	al,80h
  7710 00005BBC 3C80                <2> 			cmp	al,80h
  7711 00005BBE 750C                <2> 			jne	ResetErr
  7712 00005BC0 66BA2A02            <2> 			mov	dx,(BasePort+10)
  7713 00005BC4 EC                  <2> 			in	al,dx
  7714 00005BC5 3CAA                <2> 			cmp	al,0AAh
  7715 00005BC7 7503                <2> 			jne	ResetErr
  7716 00005BC9 B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  7717 00005BCB C3                  <2> 			ret
  7718 00005BCC 30C0                <2> ResetErr:	xor al, al
  7719 00005BCE C3                  <2> 			ret
  7720                              <2> 
  7721                              <2> WriteDSP:   ;uses ax dx
  7722 00005BCF 6650                <2> 		push ax
  7723 00005BD1 66BA2C02            <2> 		mov	dx,(BasePort+12)
  7724 00005BD5 EC                  <2> WaitIt:	in	al,dx
  7725 00005BD6 2480                <2> 		and	al,80h
  7726 00005BD8 75FB                <2> 		jnz	WaitIt
  7727 00005BDA 6658                <2> 		pop	ax
  7728 00005BDC EE                  <2> 		out	dx,al
  7729 00005BDD C3                  <2> 		ret
  7730                              <2> 
  7731 00005BDE 00                  <2> Stereo db 0
  7732 00005BDF 00                  <2> OddLength db 0
  7733 00005BE0 00000000            <2> Length0 dd	0
  7734 00005BE4 0000                <2> Length1	dw  0
  7735 00005BE6 00000000            <2> NextMemLoc dd 0
  7736 00005BEA 00000000            <2> MemLoc	dd  0
  7737 00005BEE 0000                <2> SegLoc  dw 0
  7738 00005BF0 00                  <2> Page1	db  0
  7739 00005BF1 00000000            <2> Freq	dd	0
  7740                              <2> PgPort	equ 83h
  7741                              <2> AddPort	equ 02h
  7742                              <2> LenPort	equ 03h
  7743                              <2> ModeReg	equ 59h
  7744                              <2> Channel	equ 01h
  7745                              <2> BasePort	equ 220h
  7746 00005BF5 00                  <2> SoundBlaster	db 0
  7747                              <1> %endif
  7748                              <1> %ifdef io.serial
  7749                              <1> 	%include "source/drivers/input/serial.asm"
  7750                              <1> %else
  7751                              <1> 	%include "source/drivers/input/keyboard.asm"
  7752 00005BF6 00                  <2> specialkey db 0
  7753                              <2> ;charregion db 0
  7754                              <2> waitforinput:		;this is basically the idle process
  7755                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  7756                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  7757 00005BF7 6631C0              <2> 	xor ax, ax
  7758 00005BFA A0[3C670000]        <2> 	mov al, [threadson]
  7759 00005BFF 8825[3C670000]      <2> 	mov [threadson], ah
  7760 00005C05 9C                  <2> 	pushf
  7761 00005C06 FB                  <2> 	sti
  7762 00005C07 F4                  <2> 	hlt
  7763 00005C08 9D                  <2> 	popf
  7764 00005C09 A2[3C670000]        <2> 	mov [threadson], al
  7765 00005C0E 66833D[54230000]00  <2> 	cmp word [trans], 0
  7766 00005C16 7401                <2> 	je getkey
  7767 00005C18 C3                  <2> 	ret
  7768                              <2> getkey:
  7769 00005C19 31C0                <2> 		xor eax, eax
  7770 00005C1B A2[F65B0000]        <2> 		mov [specialkey], al
  7771 00005C20 A3[50230000]        <2> 		mov [lastkey], eax
  7772 00005C25 E464                <2> 		in al, 64h ; Status
  7773                              <2> 	%ifdef gui.included
  7774 00005C27 A820                <2> 		test al, 20h ; PS2-Mouse?
  7775 00005C29 0F8544FAFFFF        <2> 		jnz near moused
  7776                              <2> 	%endif
  7777 00005C2F A801                <2> 		test al, 1 
  7778 00005C31 74C4                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7779                              <2> 	calckey:
  7780 00005C33 E460                <2> 		in al, 60h
  7781 00005C35 30E4                <2> 		xor ah, ah
  7782 00005C37 6689C3              <2> 		mov bx, ax
  7783 00005C3A 66A3[52230000]      <2> 		mov [lastkey + 2], ax
  7784 00005C40 BF[BD5D0000]        <2> 		mov edi, scancode
  7785                              <2> 	searchscan: 
  7786 00005C45 80FB3A              <2> 		cmp bl, 3Ah
  7787 00005C48 7314                <2> 		jae scanother
  7788 00005C4A C1E004              <2> 		shl eax, 4
  7789 00005C4D 01C7                <2> 		add edi, eax
  7790 00005C4F 668B07              <2> 		mov ax, [edi]
  7791 00005C52 6683F800            <2> 		cmp ax, 0
  7792 00005C56 7406                <2> 		je scanother
  7793 00005C58 E9D0000000          <2> 		jmp scanfound
  7794 00005C5D 00                  <2> uppercase db 0
  7795                              <2> scanother:
  7796 00005C5E 6631C0              <2> 		xor ax, ax
  7797 00005C61 66A3[50230000]      <2> 		mov [lastkey], ax
  7798 00005C67 80FBE0              <2> 		cmp bl, 0E0h
  7799 00005C6A 0F8477000000        <2> 		je near getkeyspecial
  7800 00005C70 803D[F65B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7801 00005C77 7525                <2> 		jne nospecialkey
  7802 00005C79 80FB38              <2> 		cmp bl, 38h
  7803 00005C7C 0F849A000000        <2> 		je near alton
  7804 00005C82 80FBB8              <2> 		cmp bl, 0B8h
  7805 00005C85 0F8499000000        <2> 		je near altoff
  7806 00005C8B 80FB1D              <2> 		cmp bl, 1Dh
  7807 00005C8E 0F8478000000        <2> 		je near ctron
  7808 00005C94 80FB9D              <2> 		cmp bl, 9Dh
  7809 00005C97 0F8477000000        <2> 		je near ctroff
  7810 00005C9D C3                  <2> 		ret
  7811                              <2> nospecialkey:
  7812 00005C9E 80FB2A              <2> 		cmp bl, 2Ah
  7813 00005CA1 0F8455000000        <2> 		je near shifton
  7814 00005CA7 80FB36              <2> 		cmp bl, 36h
  7815 00005CAA 0F844C000000        <2> 		je near shifton
  7816 00005CB0 80FB1C              <2> 		cmp bl, 1Ch
  7817 00005CB3 0F8473000000        <2> 		je near entdown
  7818 00005CB9 80FBAA              <2> 		cmp bl, 0AAh
  7819 00005CBC 0F8442000000        <2> 		je near shiftoff
  7820 00005CC2 80FBB6              <2> 		cmp bl, 0B6h
  7821 00005CC5 0F8439000000        <2> 		je near shiftoff
  7822 00005CCB 80FB3A              <2> 		cmp bl, 3Ah
  7823 00005CCE 0F8495000000        <2> 		je near capslock
  7824 00005CD4 80FB45              <2> 		cmp bl, 0x45
  7825 00005CD7 0F849D000000        <2> 		je near numlock
  7826 00005CDD 80FB46              <2> 		cmp bl, 0x46
  7827 00005CE0 0F84AC000000        <2> 		je near scrolllock
  7828 00005CE6 C3                  <2> 		ret
  7829                              <2> 	getkeyspecial:
  7830 00005CE7 C605[F65B0000]E0    <2> 		mov byte [specialkey], 0xE0
  7831 00005CEE E940FFFFFF          <2> 		jmp calckey
  7832                              <2> 	shift:
  7833 00005CF3 A0[5D5C0000]        <2> 		mov al, [uppercase]
  7834 00005CF8 3C01                <2> 		cmp al, 1
  7835 00005CFA 7308                <2> 		jae shiftoff
  7836                              <2> 	shifton:
  7837 00005CFC C605[5D5C0000]01    <2> 		mov byte [uppercase], 1
  7838 00005D03 C3                  <2> 		ret
  7839                              <2> 	shiftoff:
  7840 00005D04 C605[5D5C0000]00    <2> 		mov byte [uppercase], 0
  7841 00005D0B C3                  <2> 		ret
  7842                              <2> 	ctron:
  7843 00005D0C C605[685D0000]01    <2> 		mov byte [ctrkey], 1
  7844 00005D13 C3                  <2> 		ret
  7845                              <2> 	ctroff:
  7846 00005D14 C605[685D0000]00    <2> 		mov byte [ctrkey], 0
  7847 00005D1B C3                  <2> 		ret
  7848                              <2> 	alton:
  7849 00005D1C C605[675D0000]01    <2> 		mov byte [altkey], 1
  7850 00005D23 C3                  <2> 		ret
  7851                              <2> 	altoff:
  7852 00005D24 C605[675D0000]00    <2> 		mov byte [altkey], 0
  7853 00005D2B C3                  <2> 		ret
  7854                              <2> 	entdown:
  7855 00005D2C C3                  <2> 		ret
  7856                              <2> scanfound:
  7857 00005D2D 83C708              <2> 		add edi, 8
  7858 00005D30 803D[685D0000]01    <2> 		cmp byte [ctrkey], 1
  7859 00005D37 7303                <2> 		jae ctrlin
  7860 00005D39 83EF08              <2> 		sub edi, 8
  7861                              <2> 	ctrlin:
  7862 00005D3C 83C704              <2> 		add edi, 4
  7863 00005D3F 803D[675D0000]01    <2> 		cmp byte [altkey], 1
  7864 00005D46 7303                <2> 		jae altin
  7865 00005D48 83EF04              <2> 		sub edi, 4
  7866                              <2> 	altin:
  7867 00005D4B 83C702              <2> 		add edi, 2
  7868 00005D4E 803D[5D5C0000]01    <2> 		cmp byte [uppercase], 1
  7869 00005D55 7303                <2> 		jae uppercaseon
  7870 00005D57 83EF02              <2> 		sub edi, 2
  7871                              <2> 	uppercaseon:
  7872 00005D5A 668B07              <2> 		mov ax,[edi]
  7873 00005D5D 66A3[50230000]      <2> 		mov [lastkey], ax
  7874 00005D63 C3                  <2> 		ret
  7875                              <2> 		
  7876 00005D64 00                  <2> keyboardstatus db 0
  7877 00005D65 00                  <2> numlockstatus db 0
  7878 00005D66 00                  <2> scrolllockstatus db 0
  7879 00005D67 00                  <2> altkey db 0
  7880 00005D68 00                  <2> ctrkey db 0
  7881                              <2> 	capslock:
  7882 00005D69 8035[645D0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7883 00005D70 E835000000          <2> 		call updatekblights
  7884 00005D75 E979FFFFFF          <2> 		jmp shift
  7885                              <2> 		
  7886                              <2> 	numlock:
  7887 00005D7A 8035[645D0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7888 00005D81 8035[655D0000]01    <2> 		xor byte [numlockstatus], 1
  7889 00005D88 E81D000000          <2> 		call updatekblights
  7890 00005D8D E987FEFFFF          <2> 		jmp getkey
  7891                              <2> 	
  7892                              <2> 	scrolllock:
  7893 00005D92 8035[645D0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7894 00005D99 8035[665D0000]01    <2> 		xor byte [scrolllockstatus], 1
  7895 00005DA0 E805000000          <2> 		call updatekblights
  7896 00005DA5 E96FFEFFFF          <2> 		jmp getkey
  7897                              <2> 		
  7898                              <2> 	updatekblights:
  7899 00005DAA B0ED                <2> 		mov al, 0xED
  7900 00005DAC 66BA6000            <2> 		mov dx, 0x60
  7901 00005DB0 EE                  <2> 		out dx, al
  7902                              <2> 	chkkbdack:
  7903 00005DB1 EC                  <2> 		in al, dx
  7904 00005DB2 3CFA                <2> 		cmp al, 0xFA
  7905 00005DB4 75FB                <2> 		jne chkkbdack
  7906 00005DB6 A0[645D0000]        <2> 		mov al, [keyboardstatus]
  7907 00005DBB EE                  <2> 		out dx, al
  7908 00005DBC C3                  <2> 		ret
  7909                              <2> 		
  7910                              <2> scancode:
  7911                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  7912 00005DBD 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7913 00005DC6 00000000000000      <2>
  7914 00005DCD 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7915 00005DD6 00000000000000      <2>
  7916 00005DDD 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  7917 00005DE6 00000000000000      <2>
  7918 00005DED 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  7919 00005DF6 00000000000000      <2>
  7920 00005DFD 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  7921 00005E06 00000000000000      <2>
  7922 00005E0D 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  7923 00005E16 00000000000000      <2>
  7924 00005E1D 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  7925 00005E26 00000000000000      <2>
  7926 00005E2D 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  7927 00005E36 00000000000000      <2>
  7928 00005E3D 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  7929 00005E46 00000000000000      <2>
  7930 00005E4D 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  7931 00005E56 00000000000000      <2>
  7932 00005E5D 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  7933 00005E66 00000000000000      <2>
  7934 00005E6D 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  7935 00005E76 00000000000000      <2>
  7936 00005E7D 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  7937 00005E86 00000000000000      <2>
  7938 00005E8D 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  7939 00005E96 00000000000000      <2>
  7940 00005E9D 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  7941 00005EA6 00000000000000      <2>
  7942 00005EAD 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7943 00005EB6 00000000000000      <2>
  7944 00005EBD 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  7945 00005EC5 003A0039041904      <2>
  7946 00005ECD 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  7947 00005ED6 03000046042604      <2>
  7948 00005EDD 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  7949 00005EE6 03950343042304      <2>
  7950 00005EED 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  7951 00005EF6 03A1033A041A04      <2>
  7952 00005EFD 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  7953 00005F06 03A40335041504      <2>
  7954 00005F0D 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  7955 00005F16 03A5033D041D04      <2>
  7956 00005F1D 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  7957 00005F26 03980333041304      <2>
  7958 00005F2D 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  7959 00005F36 03990348042804      <2>
  7960 00005F3D 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  7961 00005F46 039F0349042904      <2>
  7962 00005F4D 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  7963 00005F56 03A00337041704      <2>
  7964 00005F5D 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  7965 00005F66 00000045042504      <2>
  7966 00005F6D 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  7967 00005F76 0000004A042A04      <2>
  7968 00005F7D 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7969 00005F86 00000000000000      <2>
  7970 00005F8D 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7971 00005F96 00000000000000      <2>
  7972 00005F9D 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  7973 00005FA6 03910344042404      <2>
  7974 00005FAD 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  7975 00005FB6 03A3034B042B04      <2>
  7976 00005FBD 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  7977 00005FC6 03940332041204      <2>
  7978 00005FCD 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  7979 00005FD6 03A60330041004      <2>
  7980 00005FDD 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  7981 00005FE6 0393033F041F04      <2>
  7982 00005FED 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  7983 00005FF6 03970340042004      <2>
  7984 00005FFD 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  7985 00006006 039E033E041E04      <2>
  7986 0000600D 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  7987 00006016 039A033B041B04      <2>
  7988 0000601D 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  7989 00006026 039B0334041404      <2>
  7990 0000602D 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  7991 00006036 00000036041604      <2>
  7992 0000603D 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  7993 00006046 0000004D042D04      <2>
  7994 0000604D 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  7995 00006056 00000051040104      <2>
  7996 0000605D 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7997 00006066 00000000000000      <2>
  7998 0000606D 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  7999 00006076 0000002F005C00      <2>
  8000 0000607D 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  8001 00006086 0396034F042F04      <2>
  8002 0000608D 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  8003 00006096 03A70347042704      <2>
  8004 0000609D 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  8005 000060A6 03A80341042104      <2>
  8006 000060AD 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  8007 000060B6 03A9033C041C04      <2>
  8008 000060BD 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  8009 000060C6 03920338041804      <2>
  8010 000060CD 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  8011 000060D6 039D0342042204      <2>
  8012 000060DD 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  8013 000060E6 039C034C042C04      <2>
  8014 000060ED 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  8015 000060F6 00000031041104      <2>
  8016 000060FD 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  8017 00006106 0000004E042E04      <2>
  8018 0000610D 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  8019 00006116 0000002E002C00      <2>
  8020 0000611D 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8021 00006126 00000000000000      <2>
  8022 0000612D 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8023 00006136 00000000000000      <2>
  8024 0000613D 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8025 00006146 00000000000000      <2>
  8026 0000614D 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  8027 00006156 00000000000000      <2>
  8028                              <2> noscan:
  8029                              <2> 
  8030                              <1> %endif
  8031                              <1> ;drivers will soon be handled intelligently
  8032                              <1> ;every driver's source will be scanned for a .init function
  8033                              <1> ;that will be called and if it returns 0
  8034                              <1> ;the hardware was found and the driver initialized properly
  8035                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  8036                              <1> 	%ifdef sound.included
  8037 0000615D E85FF8FFFF          <1> 		call sblaster.init
  8038                              <1> 	%endif
  8039                              <1> 	%ifdef network.included
  8040                              <1> 		call network.init
  8041                              <1> 	%endif
  8042 00006162 C3                  <1> 	ret
  8043                              <1> initialize:
  8044                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  8045 00006163 E83E000000          <1> 	call .pic
  8046                              <1> %ifdef terminal.vsync
  8047 00006168 E862000000          <1> 	call .rtc
  8048                              <1> %endif
  8049 0000616D E892000000          <1> 	call .pit
  8050 00006172 E8B4000000          <1> 	call .fpu
  8051 00006177 E8C5000000          <1> 	call .sse
  8052 0000617C 31C0                <1> 	xor eax, eax
  8053 0000617E 31C9                <1> 	xor ecx, ecx
  8054                              <1> %ifdef io.serial
  8055                              <1> 	call serial.init
  8056                              <1> %endif
  8057 00006180 E801000000          <1> 	call .time
  8058 00006185 C3                  <1> 	ret
  8059                              <1> 	
  8060                              <1> .time:
  8061 00006186 E8FDDDFFFF          <1> 	call time
  8062 0000618B E8A0DFFFFF          <1> 	call timeconvert
  8063 00006190 890D[57020000]      <1> 	mov [timeseconds], ecx
  8064 00006196 31C9                <1> 	xor ecx, ecx
  8065 00006198 890D[5B020000]      <1> 	mov [timenanoseconds], ecx
  8066 0000619E C605[D03E0000]01    <1> 	mov byte [istimeset], 1
  8067 000061A5 C3                  <1> 	ret
  8068                              <1> 	
  8069                              <1> .pic:
  8070 000061A6 B011                <1> 	mov al, 0x11
  8071 000061A8 E620                <1> 	out 0x20, al
  8072 000061AA E6A0                <1> 	out 0xA0, al
  8073 000061AC B040                <1> 	mov al, 0x40	;interrupt for master
  8074 000061AE E621                <1> 	out 0x21, al
  8075 000061B0 B048                <1> 	mov al, 0x48	;interrupt for slave
  8076 000061B2 E6A1                <1> 	out 0xA1, al
  8077 000061B4 B004                <1> 	mov al, 4
  8078 000061B6 E621                <1> 	out 0x21, al
  8079 000061B8 B002                <1> 	mov al, 2
  8080 000061BA E6A1                <1> 	out 0xA1, al
  8081 000061BC B001                <1> 	mov al, 0x1
  8082 000061BE E621                <1> 	out 0x21, al
  8083 000061C0 E6A1                <1> 	out 0xA1, al
  8084                              <1> 	;masks are set to zero so as not to mask
  8085 000061C2 30C0                <1> 	xor al, al
  8086 000061C4 E621                <1> 	out 0x21, al
  8087 000061C6 E6A1                <1> 	out 0xA1, al
  8088 000061C8 B020                <1> 	mov al, 0x20
  8089 000061CA E6A0                <1> 	out 0xA0, al
  8090 000061CC E620                <1> 	out 0x20, al
  8091 000061CE C3                  <1> 	ret
  8092                              <1> .rtc:
  8093 000061CF B008                <1> 	mov al, 0x8
  8094 000061D1 88C4                <1> 	mov ah, al
  8095 000061D3 66BA7000            <1> 	mov dx, 0x70
  8096 000061D7 EE                  <1> 	out dx, al
  8097 000061D8 6642                <1> 	inc dx
  8098 000061DA EC                  <1> 	in al, dx
  8099 000061DB 86C4                <1> 	xchg al, ah
  8100 000061DD 664A                <1> 	dec dx
  8101 000061DF EE                  <1> 	out dx, al
  8102 000061E0 6642                <1> 	inc dx
  8103 000061E2 86C4                <1> 	xchg al, ah
  8104 000061E4 0C40                <1> 	or al, 0x40
  8105 000061E6 EE                  <1> 	out dx, al
  8106                              <1> 	
  8107 000061E7 B00A                <1> 	mov al, 0xA
  8108 000061E9 664A                <1> 	dec dx
  8109 000061EB EE                  <1> 	out dx, al
  8110 000061EC 86C4                <1> 	xchg al, ah
  8111 000061EE 6642                <1> 	inc dx
  8112 000061F0 EC                  <1> 	in al, dx
  8113 000061F1 24F0                <1> 	and al, 0xF0
  8114 000061F3 0A05[08030000]      <1> 	or al, [rtcrate]
  8115 000061F9 86C4                <1> 	xchg al, ah
  8116 000061FB 664A                <1> 	dec dx
  8117 000061FD EE                  <1> 	out dx, al
  8118 000061FE 6642                <1> 	inc dx
  8119 00006200 86C4                <1> 	xchg al, ah
  8120 00006202 EE                  <1> 	out dx, al
  8121 00006203 C3                  <1> 	ret
  8122                              <1> 	
  8123                              <1> .pit:
  8124                              <1> 	;initialize the PIT
  8125 00006204 66A1[51020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  8126 0000620A E640                <1> 	out 0x40, al
  8127 0000620C 66C1C008            <1> 	rol ax, 8
  8128 00006210 E640                <1> 	out 0x40, al
  8129                              <1> 	;enable rtc interrupt
  8130 00006212 B00B                <1> 	mov al, 0xB
  8131 00006214 E670                <1> 	out 0x70, al
  8132 00006216 66C1C008            <1> 	rol ax, 8
  8133 0000621A E471                <1> 	in al, 0x71
  8134 0000621C 66C1C008            <1> 	rol ax, 8
  8135 00006220 E670                <1> 	out 0x70, al
  8136 00006222 66C1C008            <1> 	rol ax, 8
  8137 00006226 0C40                <1> 	or al, 0x40
  8138 00006228 E671                <1> 	out 0x71, al
  8139 0000622A C3                  <1> 	ret
  8140                              <1> .fpu:
  8141                              <1> 	;And now to initialize the fpu
  8142 0000622B 0F20E0              <1> 	mov eax, cr4
  8143 0000622E 0D00020000          <1> 	or eax, 0x200
  8144 00006233 0F22E0              <1> 	mov cr4, eax
  8145 00006236 B87F0B0000          <1> 	mov eax, 0xB7F
  8146 0000623B 50                  <1> 	push eax
  8147 0000623C D92C24              <1> 	fldcw [esp]
  8148 0000623F 58                  <1> 	pop eax
  8149 00006240 C3                  <1> 	ret
  8150                              <1> 	
  8151                              <1> .sse:
  8152 00006241 0F20C0              <1> 	mov eax, cr0
  8153 00006244 24FB                <1> 	and al, 11111011b
  8154 00006246 0C02                <1> 	or al, 00000010b
  8155 00006248 0F22C0              <1> 	mov cr0, eax
  8156 0000624B 0F20E0              <1> 	mov eax, cr4
  8157 0000624E 660D0006            <1> 	or ax, 0000011000000000b
  8158 00006252 0F22E0              <1> 	mov cr4, eax
  8159 00006255 C3                  <1> 	ret
  8160                                  %include "source/pci.asm"
  8161 00006256 00                  <1> pcibus		db 0
  8162 00006257 00                  <1> pcidevice	db 0
  8163 00006258 00                  <1> pcifunction	db 0
  8164 00006259 00                  <1> pciregister	db 0
  8165 0000625A 00                  <1> pcireqtype	db 0
  8166 0000625B 00000000            <1> pcidevid	dd 0
  8167 0000625F FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  8168                              <1> getpcimem:
  8169 00006263 B002                <1> 	mov al, 2
  8170 00006265 A2[5A620000]        <1> 	mov [pcireqtype], al
  8171 0000626A EB1F                <1> 	jmp searchpci
  8172                              <1> getpciport:
  8173 0000626C B001                <1> 	mov al, 1
  8174 0000626E A2[5A620000]        <1> 	mov [pcireqtype], al
  8175 00006273 EB16                <1> 	jmp searchpci
  8176                              <1> pcidump:
  8177 00006275 31C0                <1> 	xor eax, eax
  8178 00006277 A2[58620000]        <1> 	mov [pcifunction], al
  8179 0000627C A2[56620000]        <1> 	mov [pcibus], al
  8180 00006281 A2[57620000]        <1> 	mov [pcidevice], al
  8181 00006286 A2[5A620000]        <1> 	mov [pcireqtype], al
  8182                              <1> searchpci:		;return in ebx, start X in pciX
  8183 0000628B 30C0                <1> 	xor al, al
  8184 0000628D A2[59620000]        <1> 	mov [pciregister], al
  8185 00006292 E80F020000          <1> 	call getpciaddr
  8186 00006297 BAF80C0000          <1> 	mov edx, 0xCF8
  8187 0000629C EF                  <1> 	out dx, eax	;request pci config
  8188 0000629D BAFC0C0000          <1> 	mov edx, 0xCFC
  8189 000062A2 ED                  <1> 	in eax, dx 	;read in pci config
  8190 000062A3 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  8191 000062A8 0F8237000000        <1> 	jb near checkpcidevice
  8192                              <1> searchpciret:
  8193                              <1> nextpcidevice:
  8194 000062AE 30C0                <1> 	xor al, al
  8195 000062B0 A2[58620000]        <1> 	mov [pcifunction], al
  8196 000062B5 A0[57620000]        <1> 	mov al, [pcidevice]
  8197 000062BA 3C1F                <1> 	cmp al, 11111b
  8198 000062BC 0F8300010000        <1> 	jae near nextpcibus
  8199 000062C2 FEC0                <1> 	inc al
  8200 000062C4 A2[57620000]        <1> 	mov [pcidevice], al
  8201 000062C9 EBC0                <1> 	jmp searchpci
  8202 000062CB A0[58620000]        <1> 	mov al, [pcifunction]
  8203 000062D0 3C07                <1> 	cmp al, 111b
  8204 000062D2 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  8205 000062D8 FEC0                <1> 	inc al
  8206 000062DA A2[58620000]        <1> 	mov [pcifunction], al
  8207 000062DF EBAA                <1> 	jmp searchpci
  8208 000062E1 00000000            <1> pcitype: db 0,0,0,0
  8209                              <1> checkpcidevice:
  8210 000062E5 31C0                <1> 	xor eax, eax
  8211 000062E7 3905[5B620000]      <1> 	cmp [pcidevid], eax
  8212 000062ED 0F8430000000        <1> 	je near .good
  8213 000062F3 A2[59620000]        <1> 	mov [pciregister], al	;device id, vendor id
  8214 000062F8 E8A9010000          <1> 	call getpciaddr
  8215 000062FD BAF80C0000          <1> 	mov edx, 0xCF8
  8216 00006302 EF                  <1> 	out dx, eax
  8217 00006303 BAFC0C0000          <1> 	mov edx, 0xCFC
  8218 00006308 ED                  <1> 	in eax, dx
  8219 00006309 2305[5F620000]      <1> 	and eax, [pcidevidmask]
  8220 0000630F 8B1D[5B620000]      <1> 	mov ebx, [pcidevid]
  8221 00006315 231D[5F620000]      <1> 	and ebx, [pcidevidmask]
  8222 0000631B 39D8                <1> 	cmp eax, ebx
  8223 0000631D 0F858BFFFFFF        <1> 	jne near searchpciret
  8224                              <1> .good:
  8225 00006323 30C0                <1> 	xor al, al
  8226 00006325 3805[5A620000]      <1> 	cmp [pcireqtype], al
  8227 0000632B 0F842C000000        <1> 	je near dumppcidevice
  8228 00006331 B008                <1> 	mov al, 0x08
  8229 00006333 A2[59620000]        <1> 	mov [pciregister], al	;class code, subclass, revision id
  8230 00006338 E869010000          <1> 	call getpciaddr
  8231 0000633D BAF80C0000          <1> 	mov edx, 0xCF8
  8232 00006342 EF                  <1> 	out dx, eax
  8233 00006343 BAFC0C0000          <1> 	mov edx, 0xCFC
  8234 00006348 ED                  <1> 	in eax, dx
  8235 00006349 C1C008              <1> 	rol eax, 8
  8236 0000634C 3A05[E1620000]      <1> 	cmp al, [pcitype]
  8237 00006352 0F84A0000000        <1> 	je near foundpciaddr
  8238 00006358 E951FFFFFF          <1> 	jmp searchpciret
  8239                              <1> dumppcidevice:
  8240 0000635D 30C0                <1> 	xor al, al
  8241 0000635F A2[59620000]        <1> 	mov [pciregister], al
  8242 00006364 E83D010000          <1> 	call getpciaddr
  8243 00006369 89C1                <1> 	mov ecx, eax
  8244 0000636B C605[0B310000]05    <1> 	mov byte [firsthexshown], 5
  8245 00006372 E8A9CDFFFF          <1> 	call showhex
  8246                              <1> dumppcidevicelp:
  8247 00006377 A2[59620000]        <1> 	mov [pciregister], al
  8248 0000637C E825010000          <1> 	call getpciaddr
  8249 00006381 BAF80C0000          <1> 	mov edx, 0xCF8
  8250 00006386 EF                  <1> 	out dx, eax
  8251 00006387 BAFC0C0000          <1> 	mov edx, 0xCFC
  8252 0000638C ED                  <1> 	in eax, dx
  8253 0000638D 89C1                <1> 	mov ecx, eax
  8254 0000638F A0[59620000]        <1> 	mov al, [pciregister]
  8255 00006394 0404                <1> 	add al, 4
  8256 00006396 C605[0B310000]05    <1> 	mov byte [firsthexshown], 5
  8257 0000639D E87ECDFFFF          <1> 	call showhex
  8258 000063A2 3C3C                <1> 	cmp al, 0x3C
  8259 000063A4 72D1                <1> 	jb dumppcidevicelp
  8260                              <1> dumppcidn:
  8261                              <1> %ifdef io.serial
  8262                              <1> 	mov esi, line
  8263                              <1> 	call print
  8264                              <1> %else
  8265 000063A6 803D[58250000]00    <1> 	cmp byte [charpos], 0
  8266 000063AD 0F84FBFEFFFF        <1> 	je near searchpciret
  8267 000063B3 BE[EA840000]        <1> 	mov esi, line
  8268 000063B8 E857B9FFFF          <1> 	call print
  8269                              <1> %endif
  8270 000063BD E9ECFEFFFF          <1> 	jmp searchpciret
  8271                              <1> nextpcibus:
  8272 000063C2 30C0                <1> 	xor al, al
  8273 000063C4 A2[57620000]        <1> 	mov [pcidevice], al
  8274 000063C9 A0[56620000]        <1> 	mov al, [pcibus]
  8275 000063CE 3C7F                <1> 	cmp al, 1111111b
  8276 000063D0 730C                <1> 	jae donesearchpci
  8277 000063D2 FEC0                <1> 	inc al
  8278 000063D4 A2[56620000]        <1> 	mov [pcibus], al
  8279 000063D9 E9ADFEFFFF          <1> 	jmp searchpci
  8280                              <1> donesearchpci:
  8281 000063DE BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  8282 000063E3 31D2                <1> 	xor edx, edx
  8283 000063E5 8815[E1620000]      <1> 	mov [pcitype], dl
  8284 000063EB 8915[5B620000]      <1> 	mov [pcidevid], edx
  8285 000063F1 891D[5F620000]      <1> 	mov [pcidevidmask], ebx
  8286 000063F7 C3                  <1> 	ret
  8287                              <1> foundpciaddr:
  8288 000063F8 B010                <1> 	mov al, 0x10
  8289 000063FA A2[59620000]        <1> 	mov [pciregister], al
  8290 000063FF 803D[5A620000]02    <1> 	cmp byte [pcireqtype], 2
  8291 00006406 743B                <1> 	je findpcimemaddr
  8292                              <1> findpciioaddr:
  8293 00006408 E899000000          <1> 	call getpciaddr
  8294 0000640D BAF80C0000          <1> 	mov edx, 0xCF8
  8295 00006412 EF                  <1> 	out dx, eax
  8296 00006413 BAFC0C0000          <1> 	mov edx, 0xCFC
  8297 00006418 ED                  <1> 	in eax, dx
  8298 00006419 89C3                <1> 	mov ebx, eax
  8299 0000641B 83E301              <1> 	and ebx, 1
  8300 0000641E 83FB00              <1> 	cmp ebx, 0
  8301 00006421 0F8466000000        <1> 	je near notpciioaddr
  8302 00006427 83E801              <1> 	sub eax, 1
  8303 0000642A 89C2                <1> 	mov edx, eax
  8304 0000642C 31DB                <1> 	xor ebx, ebx
  8305 0000642E 4B                  <1> 	dec ebx
  8306 0000642F 891D[5F620000]      <1> 	mov [pcidevidmask], ebx
  8307 00006435 43                  <1> 	inc ebx
  8308 00006436 881D[E1620000]      <1> 	mov [pcitype], bl
  8309 0000643C 891D[5B620000]      <1> 	mov [pcidevid], ebx
  8310 00006442 C3                  <1> 	ret
  8311                              <1> findpcimemaddr:
  8312 00006443 E85E000000          <1> 	call getpciaddr
  8313 00006448 BAF80C0000          <1> 	mov edx, 0xCF8
  8314 0000644D EF                  <1> 	out dx, eax
  8315 0000644E BAFC0C0000          <1> 	mov edx, 0xCFC
  8316 00006453 ED                  <1> 	in eax, dx
  8317 00006454 89C3                <1> 	mov ebx, eax
  8318 00006456 83E301              <1> 	and ebx, 1
  8319 00006459 83FB01              <1> 	cmp ebx, 1
  8320 0000645C 0F842B000000        <1> 	je near notpciioaddr
  8321 00006462 C1E804              <1> 	shr eax, 4
  8322 00006465 C1E004              <1> 	shl eax, 4	;remove prefetch and type
  8323 00006468 89C2                <1> 	mov edx, eax
  8324 0000646A 50                  <1> 	push eax
  8325 0000646B A1[38020000]        <1> 	mov eax, [basecache]
  8326 00006470 C1E004              <1> 	shl eax, 4
  8327 00006473 29C2                <1> 	sub edx, eax
  8328 00006475 58                  <1> 	pop eax
  8329 00006476 31DB                <1> 	xor ebx, ebx
  8330 00006478 4B                  <1> 	dec ebx
  8331 00006479 891D[5F620000]      <1> 	mov [pcidevidmask], ebx
  8332 0000647F 43                  <1> 	inc ebx
  8333 00006480 881D[E1620000]      <1> 	mov [pcitype], bl
  8334 00006486 891D[5B620000]      <1> 	mov [pcidevid], ebx
  8335 0000648C C3                  <1> 	ret
  8336                              <1> notpciioaddr:
  8337 0000648D A0[59620000]        <1> 	mov al, [pciregister]
  8338 00006492 0404                <1> 	add al, 4
  8339 00006494 3C28                <1> 	cmp al, 0x28
  8340 00006496 0F8712FEFFFF        <1> 	ja near searchpciret
  8341 0000649C A2[59620000]        <1> 	mov [pciregister], al
  8342 000064A1 E962FFFFFF          <1> 	jmp findpciioaddr
  8343                              <1> getpciaddr:		;puts it in eax and ebx
  8344 000064A6 31C0                <1> 			xor eax, eax
  8345 000064A8 BB00000080          <1> 			mov ebx, 0x80000000
  8346 000064AD A0[56620000]        <1> 			mov al, [pcibus]
  8347 000064B2 C1E010              <1> 			shl eax, 16
  8348 000064B5 01C3                <1> 			add ebx, eax
  8349 000064B7 31C0                <1> 			xor eax, eax
  8350 000064B9 A0[57620000]        <1> 			mov al, [pcidevice]
  8351 000064BE C1E00B              <1> 			shl eax, 11
  8352 000064C1 01C3                <1> 			add ebx, eax
  8353 000064C3 31C0                <1> 			xor eax, eax
  8354 000064C5 A0[58620000]        <1> 			mov al, [pcifunction]
  8355 000064CA C1E008              <1> 			shl eax, 8
  8356 000064CD 01C3                <1> 			add ebx, eax
  8357 000064CF 31C0                <1> 			xor eax, eax
  8358 000064D1 A0[59620000]        <1> 			mov al, [pciregister]
  8359 000064D6 01C3                <1> 			add ebx, eax
  8360 000064D8 89D8                <1> 			mov eax, ebx
  8361 000064DA C3                  <1> 			ret
  8362                                  %include "source/disk.asm"
  8363                              <1> %ifdef disk.real
  8364                              <1> 	%include "source/drivers/disk/realmode.asm"
  8365                              <2> diskr:
  8366                              <2> 			;sector count in cl
  8367                              <2> 			;disk number in ch
  8368                              <2> 			;48 bit address with last 32 bits in ebx
  8369                              <2> 			;buffer in esi
  8370                              <2> 			;puts end of buffer in edi and end lba address in edx
  8371 000064DB 880D[FF640000]      <2> 	mov [sdlength], cl
  8372 000064E1 891D[00650000]      <2> 	mov [sdaddress], ebx
  8373 000064E7 8935[73660000]      <2> 	mov [oldesireal], esi
  8374 000064ED 66BE[0465]          <2> 	mov si, readdiskreal
  8375 000064F1 668935[D70C0000]    <2> 	mov [realmodeptr], si
  8376 000064F8 E8CEA6FFFF          <2> 	call realmode
  8377 000064FD EB41                <2> 	jmp backfromrealread
  8378 000064FF 00                  <2> sdlength db 0
  8379 00006500 00000000            <2> sdaddress dd 0
  8380                              <2> 
  8381                              <2> [BITS 16]
  8382                              <2> readdiskreal:
  8383 00006504 C706[3065]1000      <2> 	mov word [dlen], 0x10
  8384 0000650A C706[3465]0000      <2> 	mov word [daddress], 0
  8385 00006510 C706[3665]0001      <2> 	mov word [dsegm], 0x100
  8386 00006516 66891E[3865]        <2> 	mov [dlbaad], ebx
  8387 0000651B 880E[3265]          <2> 	mov [dreadlen], cl
  8388                              <2> ReadHardDisk:
  8389 0000651F BE[3065]            <2> 	mov si, diskaddresspacket
  8390 00006522 31C0                <2> 	xor ax, ax
  8391 00006524 B442                <2> 	mov ah, 0x42
  8392 00006526 8A16[2F65]          <2> 	mov dl, [dnumber]
  8393 0000652A CD13                <2> 	int 0x13
  8394 0000652C 72F1                <2> 	jc ReadHardDisk
  8395 0000652E C3                  <2> 	ret
  8396                              <2> 
  8397 0000652F 80                  <2> dnumber db 0x80
  8398                              <2> diskaddresspacket:
  8399 00006530 10                  <2> dlen:	db 0x10 ;size of packet
  8400 00006531 00                  <2> 		db 0
  8401 00006532 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8402 00006534 0000                <2> daddress:	dw 0	;address 0
  8403 00006536 0001                <2> dsegm:		dw 0x100	;segment
  8404                              <2> 		;start with known value for hd
  8405                              <2> dlbaad:
  8406 00006538 00000000            <2> 	dd 0	;lba address
  8407 0000653C 00000000            <2> 	dd 0
  8408                              <2> [BITS 32]
  8409                              <2> backfromrealread:
  8410 00006540 8B35[73660000]      <2> 	mov esi, [oldesireal]
  8411 00006546 8B1D[00650000]      <2> 	mov ebx, [sdaddress]
  8412 0000654C 31C9                <2> 	xor ecx, ecx
  8413 0000654E 8A0D[FF640000]      <2> 	mov cl, [sdlength]
  8414 00006554 01CB                <2> 	add ebx, ecx
  8415 00006556 66B80800            <2> 	mov ax, LINEAR_SEL
  8416 0000655A 8EE0                <2> 	mov fs, ax
  8417 0000655C BF00100000          <2> 	mov edi, 0x1000
  8418 00006561 B200                <2> 	mov dl, 0
  8419 00006563 D0E1                <2> 	shl cl, 1
  8420                              <2> copyfromrmodedisk:
  8421 00006565 648A07              <2> 	mov al, [fs:edi]
  8422 00006568 8806                <2> 	mov [esi], al
  8423 0000656A 47                  <2> 	inc edi
  8424 0000656B 46                  <2> 	inc esi
  8425 0000656C FECA                <2> 	dec dl
  8426 0000656E 80FA00              <2> 	cmp dl, 0
  8427 00006571 75F2                <2> 	jne copyfromrmodedisk
  8428 00006573 FEC9                <2> 	dec cl
  8429 00006575 B200                <2> 	mov dl, 0
  8430 00006577 80F900              <2> 	cmp cl, 0
  8431 0000657A 75E9                <2> 	jne copyfromrmodedisk
  8432 0000657C 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8433 00006580 8EE0                <2> 	mov fs, ax
  8434 00006582 89F7                <2> 	mov edi, esi
  8435 00006584 8B35[73660000]      <2> 	mov esi, [oldesireal]
  8436 0000658A 89DA                <2> 	mov edx, ebx
  8437 0000658C 8B1D[00650000]      <2> 	mov ebx, [sdaddress]
  8438 00006592 C3                  <2> 	ret
  8439                              <2> 	
  8440                              <1> %else
  8441                              <1> 	%ifdef disk.protected
  8442                              <1> 		%include "source/drivers/disk/pata.asm"
  8443                              <1> 	%endif
  8444                              <1> %endif
  8445                              <1> %ifdef disk.none
  8446                              <1> loadfile:	xor edx, edx
  8447                              <1> 			cmp byte [edi], '&'
  8448                              <1> 			je .ret
  8449                              <1> 			mov edx, 404	;no files are found except &
  8450                              <1> 		.ret:
  8451                              <1> 			ret
  8452                              <1> %else
  8453                              <1> ;This loads files using the methods in the loaded driver
  8454                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8455                              <1> 			;returns with err code in edx and file end in edi
  8456 00006593 803F00              <1> 	cmp byte [edi], 0
  8457 00006596 0F8445000000        <1> 	je near nofileload
  8458 0000659C 89FA                <1> 	mov edx, edi
  8459 0000659E BB[69870300]        <1> 	mov ebx, diskfileindex
  8460                              <1> nextnamechar:
  8461 000065A3 8A07                <1> 	mov al, [edi]
  8462 000065A5 3C26                <1> 	cmp al, '&'
  8463 000065A7 743D                <1> 	je nullfile
  8464 000065A9 8A23                <1> 	mov ah, [ebx]
  8465 000065AB 47                  <1> 	inc edi
  8466 000065AC 43                  <1> 	inc ebx
  8467 000065AD 88C1                <1> 	mov cl, al
  8468 000065AF 08E1                <1> 	or cl, ah
  8469 000065B1 80F900              <1> 	cmp cl, 0
  8470 000065B4 7465                <1> 	je equalfilenames
  8471 000065B6 80F920              <1> 	cmp cl, ' '
  8472 000065B9 7460                <1> 	je equalfilenames
  8473 000065BB 3C2A                <1> 	cmp al, '*'
  8474 000065BD 7428                <1> 	je asteriskcheck
  8475 000065BF 80FC00              <1> 	cmp ah, 0
  8476 000065C2 7410                <1> 	je nextfilename
  8477 000065C4 3C00                <1> 	cmp al, 0
  8478 000065C6 7404                <1> 	je getebxzero
  8479 000065C8 38E0                <1> 	cmp al, ah
  8480 000065CA 74D7                <1> 	je nextnamechar
  8481                              <1> getebxzero:
  8482 000065CC 8A23                <1> 	mov ah, [ebx]
  8483 000065CE 43                  <1> 	inc ebx
  8484 000065CF 80FC00              <1> 	cmp ah, 0
  8485 000065D2 75F8                <1> 	jne getebxzero
  8486                              <1> nextfilename:
  8487 000065D4 83C308              <1> 	add ebx, 8		;next descriptor
  8488 000065D7 89D7                <1> 	mov edi, edx
  8489 000065D9 81FB[FE880300]      <1> 	cmp ebx, enddiskfileindex
  8490 000065DF 72C2                <1> 	jb nextnamechar
  8491                              <1> nofileload:
  8492 000065E1 BA94010000          <1> 	mov edx, 404	;indicate not found error
  8493                              <1> nullfile:
  8494 000065E6 C3                  <1> 	ret
  8495                              <1> asteriskcheck:
  8496 000065E7 4B                  <1> 	dec ebx
  8497 000065E8 8A07                <1> 	mov al, [edi]
  8498 000065EA 3C2A                <1> 	cmp al, '*'
  8499 000065EC 74F9                <1> 	je asteriskcheck ;remove multiple asterisks
  8500 000065EE 3C20                <1> 	cmp al, ' '
  8501 000065F0 7412                <1> 	je equalfilenames2
  8502 000065F2 3C00                <1> 	cmp al, 0
  8503 000065F4 740E                <1> 	je equalfilenames2
  8504                              <1> .lp:
  8505 000065F6 8A23                <1> 	mov ah, [ebx]
  8506 000065F8 80FC00              <1> 	cmp ah, 0
  8507 000065FB 74D7                <1> 	je nextfilename
  8508 000065FD 38E0                <1> 	cmp al, ah
  8509 000065FF 74A2                <1> 	je nextnamechar
  8510 00006601 43                  <1> 	inc ebx
  8511 00006602 EBF2                <1> 	jmp .lp
  8512                              <1> equalfilenames2:
  8513 00006604 83EB02              <1> 	sub ebx, 2
  8514                              <1> eqfilefind:
  8515 00006607 43                  <1> 	inc ebx
  8516 00006608 81FB[FE880300]      <1> 	cmp ebx, enddiskfileindex
  8517 0000660E 0F83CDFFFFFF        <1> 	jae near nofileload
  8518 00006614 8A03                <1> 	mov al, [ebx]
  8519 00006616 3C00                <1> 	cmp al, 0
  8520 00006618 75ED                <1> 	jne eqfilefind
  8521 0000661A 43                  <1> 	inc ebx
  8522                              <1> equalfilenames:
  8523 0000661B 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8524 0000661E 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8525 00006620 031D[11850000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  8526 00006626 31C9                <1> 	xor ecx, ecx
  8527 00006628 88C1                <1> 	mov cl, al			;get excess number of sectors
  8528 0000662A C0E102              <1> 	shl cl, 2
  8529 0000662D C0E902              <1> 	shr cl, 2			;cut off at 64
  8530 00006630 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8531 00006632 B500                <1> 	mov ch, 0			;drive 0
  8532 00006634 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8533                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8534 00006637 A3[77660000]        <1> 	mov [filetracks], eax
  8535 0000663C 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8536 0000663E 89DA                <1> 	mov edx, ebx
  8537 00006640 80F900              <1> 	cmp cl, 0
  8538 00006643 7405                <1> 	je copytracksforfile
  8539 00006645 E891FEFFFF          <1> 	call diskr	;take care of excess sectors
  8540                              <1> copytracksforfile:
  8541 0000664A A1[77660000]        <1> 	mov eax, [filetracks]
  8542 0000664F 83F800              <1> 	cmp eax, 0
  8543 00006652 7419                <1> 	je donecopyfile
  8544 00006654 48                  <1> 	dec eax
  8545 00006655 A3[77660000]        <1> 	mov [filetracks], eax
  8546 0000665A 89D3                <1> 	mov ebx, edx	;get end lba
  8547 0000665C B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8548 0000665E 8A2D[10850000]      <1> 	mov ch, [DriveNumber]
  8549 00006664 89FE                <1> 	mov esi, edi	;reset buffer
  8550 00006666 E870FEFFFF          <1> 	call diskr
  8551 0000666B EBDD                <1> 	jmp copytracksforfile
  8552                              <1> donecopyfile:
  8553 0000666D BA00000000          <1> 	mov edx, 0	;no error
  8554 00006672 C3                  <1> 	ret
  8555                              <1> 
  8556 00006673 00000000            <1> oldesireal dd 0
  8557 00006677 00000000            <1> filetracks dd 0
  8558 0000667B 00                  <1> lbad1 db 0
  8559 0000667C 00                  <1> lbad2 db 0
  8560 0000667D 00                  <1> lbad3 db 0
  8561 0000667E 00                  <1> lbad4 db 0
  8562 0000667F 00                  <1> lbad5 db 0
  8563 00006680 00                  <1> lbad6 db 0
  8564 00006681 6400                <1> segments dw 100
  8565                              <1> %endif
  8566                                  %include "source/threads.asm"
  8567                              <1> nwcmdst:
  8568 00006683 31C0                <1> 	xor eax, eax
  8569 00006685 BC[00AA0300]        <1> 	mov esp, stackend
  8570 0000668A A2[3C670000]        <1> 	mov [threadson], al
  8571 0000668F A3[3D670000]        <1> 	mov [currentthread], eax
  8572 00006694 83C004              <1> 	add eax, 4
  8573 00006697 A3[38670000]        <1> 	mov [lastthread], eax
  8574 0000669C FB                  <1> 	sti
  8575 0000669D E9DBC5FFFF          <1> 	jmp nwcmd
  8576                              <1> %ifdef threads.included
  8577                              <1> nomorethreadspace:
  8578 000066A2 BE[B8660000]        <1> 	mov esi, nmts
  8579 000066A7 E868B6FFFF          <1> 	call print
  8580 000066AC C605[3C670000]00    <1> 	mov byte [threadson], 0
  8581 000066B3 E9C5C5FFFF          <1> 	jmp nwcmd
  8582 000066B8 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8583 000066C1 6572666C6F770A00    <1>
  8584                              <1> 
  8585                              <1> nomorestackspace:
  8586 000066C9 BE[D5660000]        <1> 	mov esi, nmss
  8587 000066CE E841B6FFFF          <1> 	call print
  8588 000066D3 EBAE                <1> 	jmp nwcmdst
  8589 000066D5 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8590 000066DE 72666C6F770A00      <1>
  8591                              <1> 	
  8592                              <1> threadswitch:
  8593 000066E5 60                  <1> 	pushad
  8594 000066E6 BF[3C9A2D00]        <1> 	mov edi, threadlist
  8595 000066EB A1[3D670000]        <1> 	mov eax, [currentthread]
  8596 000066F0 40                  <1> 	inc eax
  8597 000066F1 A3[3D670000]        <1> 	mov [currentthread], eax
  8598 000066F6 6648                <1> 	dec ax
  8599 000066F8 C1E002              <1> 	shl eax, 2
  8600 000066FB 01C7                <1> 	add edi, eax
  8601 000066FD 8927                <1> 	mov [edi], esp
  8602                              <1> 	;mov ebx, esp
  8603                              <1> 	;sub ebx, 512
  8604                              <1> 	;shr ebx, 4
  8605                              <1> 	;shl ebx, 4
  8606                              <1> 	;fxsave [ebx]
  8607 000066FF 83C704              <1> 	add edi, 4
  8608 00006702 81FF[3CAA2D00]      <1> 	cmp edi, threadlistend
  8609 00006708 0F830B000000        <1> 	jae near nookespthread
  8610 0000670E 8B07                <1> 	mov eax, [edi]
  8611 00006710 83F800              <1> 	cmp eax, 0
  8612 00006713 0F8517000000        <1> 	jne near okespthread
  8613                              <1> nookespthread:
  8614 00006719 BF[3C9A2D00]        <1> 	mov edi, threadlist
  8615 0000671E 31C0                <1> 	xor eax, eax
  8616 00006720 A3[3D670000]        <1> 	mov [currentthread], eax
  8617 00006725 8B07                <1> 	mov eax, [edi]
  8618 00006727 83F800              <1> 	cmp eax, 0
  8619 0000672A 0F8453FFFFFF        <1> 	je near nwcmdst
  8620                              <1> okespthread:
  8621 00006730 89C4                <1> 	mov esp, eax
  8622                              <1> 	;sub eax, 512
  8623                              <1> 	;shr eax, 4
  8624                              <1> 	;shl eax, 4
  8625                              <1> 	;fxrstor [eax]
  8626 00006732 B020                <1> 	mov al, 0x20
  8627 00006734 E620                <1> 	out 0x20, al
  8628 00006736 61                  <1> 	popad
  8629 00006737 CF                  <1> 	iret
  8630                              <1> 
  8631                              <1> %endif
  8632 00006738 04000000            <1> 	lastthread dd 4
  8633 0000673C 00                  <1> 	threadson db 0
  8634 0000673D 00000000            <1> 	currentthread dd 0
  8635                                  %ifdef gui.included
  8636                                  	%include "source/gui/gui.asm"
  8637                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8638 00006741 31C0                <1> 	xor eax, eax
  8639 00006743 31DB                <1> 	xor ebx, ebx
  8640 00006745 31C9                <1> 	xor ecx, ecx
  8641 00006747 31D2                <1> 	xor edx, edx
  8642 00006749 E84B080000          <1> 	call guisetup
  8643                              <1> guiloop:
  8644 0000674E E8CCEEFFFF          <1> 	call cursorgui
  8645                              <1> guistart:
  8646 00006753 E8C1F4FFFF          <1> 	call getkey
  8647 00006758 C605[757C0000]00    <1> 	mov byte [copygui], 0
  8648 0000675F EBF2                <1> 	jmp guistart
  8649                              <1> 
  8650                              <1> %include "source/gui/bmp.asm"
  8651                              <2> showbmp:
  8652 00006761 668B06              <2> 	mov ax, [esi]
  8653 00006764 663D424D            <2> 	cmp ax, "BM"
  8654 00006768 0F85AF000000        <2> 	jne near endedbmp
  8655 0000676E 8B3D[42550000]      <2> 	mov edi, [physbaseptr]
  8656 00006774 6689D0              <2> 	mov ax, dx
  8657 00006777 6689CB              <2> 	mov bx, cx
  8658 0000677A 31C9                <2> 	xor ecx, ecx
  8659 0000677C 31D2                <2> 	xor edx, edx
  8660 0000677E 6689D9              <2> 	mov cx, bx
  8661 00006781 6689C2              <2> 	mov dx, ax
  8662 00006784 01D7                <2> 	add edi, edx
  8663 00006786 01D7                <2> 	add edi, edx
  8664 00006788 31D2                <2> 	xor edx, edx
  8665 0000678A 668B15[1A560000]    <2> 	mov dx, [resolutionx2]
  8666 00006791 034E16              <2> 	add ecx, [esi + 22]
  8667                              <2> bmplocloop:
  8668 00006794 52                  <2> 	push edx
  8669 00006795 31C0                <2> 	xor eax, eax
  8670 00006797 6689D0              <2> 	mov ax, dx
  8671 0000679A F7E1                <2> 	mul ecx
  8672 0000679C 5A                  <2> 	pop edx
  8673 0000679D 663B0D[2E550000]    <2> 	cmp cx, [resolutiony]
  8674 000067A4 7609                <2> 	jbe .nofixy
  8675 000067A6 31C9                <2> 	xor ecx, ecx
  8676 000067A8 668B0D[2E550000]    <2> 	mov cx, [resolutiony]
  8677                              <2> .nofixy:
  8678 000067AF 01C7                <2> 	add edi, eax
  8679 000067B1 8B5612              <2> 	mov edx, [esi + 18]
  8680 000067B4 8B4E16              <2> 	mov ecx, [esi + 22]
  8681 000067B7 8B460A              <2> 	mov eax, [esi + 10]
  8682 000067BA 8B5E02              <2> 	mov ebx, [esi + 2]
  8683 000067BD 01F3                <2> 	add ebx, esi
  8684 000067BF 891D[23680000]      <2> 	mov [bmpend], ebx
  8685 000067C5 89D3                <2> 	mov ebx, edx
  8686 000067C7 01C6                <2> 	add esi, eax
  8687                              <2> ldxbmp2:
  8688 000067C9 31D2                <2> 	xor edx, edx
  8689 000067CB 668B15[2C550000]    <2> 	mov dx, [resolutionx]
  8690 000067D2 39D3                <2> 	cmp ebx, edx
  8691 000067D4 7702                <2> 	ja ldxbmp
  8692 000067D6 89DA                <2> 	mov edx, ebx
  8693                              <2> ldxbmp:
  8694 000067D8 668B06              <2> 	mov ax, [esi]
  8695 000067DB 668907              <2> 	mov [edi], ax
  8696 000067DE 83C702              <2> 	add edi, 2
  8697 000067E1 83C602              <2> 	add esi, 2
  8698 000067E4 3B35[23680000]      <2> 	cmp esi, [bmpend]
  8699 000067EA 7731                <2> 	ja endedbmp
  8700 000067EC 4A                  <2> 	dec edx
  8701 000067ED 83FA00              <2> 	cmp edx, 0
  8702 000067F0 77E6                <2> 	ja ldxbmp
  8703 000067F2 31D2                <2> 	xor edx, edx
  8704 000067F4 668B15[2C550000]    <2> 	mov dx, [resolutionx]
  8705 000067FB 39D3                <2> 	cmp ebx, edx
  8706 000067FD 7610                <2> 	jbe .notover
  8707                              <2> .over:
  8708 000067FF 01DE                <2> 	add esi, ebx
  8709 00006801 01DE                <2> 	add esi, ebx
  8710 00006803 29D6                <2> 	sub esi, edx
  8711 00006805 29D6                <2> 	sub esi, edx
  8712 00006807 01DF                <2> 	add edi, ebx
  8713 00006809 01DF                <2> 	add edi, ebx
  8714 0000680B 29D7                <2> 	sub edi, edx
  8715 0000680D 29D7                <2> 	sub edi, edx
  8716                              <2> .notover:
  8717 0000680F 29DF                <2> 	sub edi, ebx
  8718 00006811 29DF                <2> 	sub edi, ebx
  8719 00006813 29D7                <2> 	sub edi, edx
  8720 00006815 29D7                <2> 	sub edi, edx
  8721 00006817 49                  <2> 	dec ecx
  8722 00006818 83F900              <2> 	cmp ecx, 0
  8723 0000681B 77AC                <2> 	ja ldxbmp2
  8724                              <2> endedbmp:
  8725 0000681D E835030000          <2> 	call switchmousepos2
  8726 00006822 C3                  <2> 	ret
  8727                              <2> 	
  8728 00006823 00000000            <2> 	bmpend dd 0
  8729                              <1> %include "source/gui/circle.asm"
  8730                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8731 00006827 55                  <2> 	push ebp
  8732 00006828 6683F800            <2> 	cmp ax, 0
  8733 0000682C 770A                <2> 	ja .nozerocircle
  8734 0000682E E80C1C0000          <2> 	call putpixel	;the easiest circle ever
  8735 00006833 E9EE000000          <2> 	jmp .done
  8736                              <2> .nozerocircle:
  8737 00006838 6689F5              <2> 	mov bp, si
  8738 0000683B 6650                <2> 	push ax
  8739 0000683D E83E1C0000          <2> 	call getpixelmem
  8740 00006842 31C0                <2> 	xor eax, eax
  8741 00006844 6658                <2> 	pop ax
  8742 00006846 BE01000000          <2> 	mov esi, 1
  8743 0000684B 29C6                <2> 	sub esi, eax
  8744 0000684D 89C1                <2> 	mov ecx, eax
  8745 0000684F 31C0                <2> 	xor eax, eax
  8746 00006851 66A1[1A560000]      <2> 	mov ax, [resolutionx2]
  8747 00006857 F7E1                <2> 	mul ecx
  8748 00006859 50                  <2> 	push eax
  8749 0000685A 31D2                <2> 	xor edx, edx
  8750 0000685C 01C7                <2> 	add edi, eax
  8751 0000685E 66892F              <2> 	mov [edi], bp
  8752 00006861 29C7                <2> 	sub edi, eax
  8753 00006863 29C7                <2> 	sub edi, eax
  8754 00006865 66892F              <2> 	mov [edi], bp
  8755 00006868 01C7                <2> 	add edi, eax
  8756 0000686A D1E1                <2> 	shl ecx, 1
  8757 0000686C 01CF                <2> 	add edi, ecx
  8758 0000686E 66892F              <2> 	mov [edi], bp
  8759 00006871 D1E1                <2> 	shl ecx, 1
  8760 00006873 29CF                <2> 	sub edi, ecx
  8761 00006875 66892F              <2> 	mov [edi], bp
  8762 00006878 D1E9                <2> 	shr ecx, 1
  8763 0000687A 01CF                <2> 	add edi, ecx
  8764 0000687C D1E9                <2> 	shr ecx, 1
  8765 0000687E B802000000          <2> 	mov eax, 2
  8766 00006883 F7E1                <2> 	mul ecx
  8767 00006885 48                  <2> 	dec eax
  8768 00006886 F7D0                <2> 	not eax ;make it negative
  8769 00006888 A3[2C690000]        <2> 	mov [.ddF_y], eax
  8770 0000688D 58                  <2> 	pop eax
  8771 0000688E BB01000000          <2> 	mov ebx, 1
  8772 00006893 891D[28690000]      <2> 	mov [.ddF_x], ebx
  8773 00006899 4B                  <2> 	dec ebx
  8774 0000689A 31D2                <2> 	xor edx, edx
  8775 0000689C EB04                <2> 	jmp .lp
  8776                              <2> .lpb:
  8777 0000689E D1EA                <2> 	shr edx, 1
  8778 000068A0 D1E9                <2> 	shr ecx, 1
  8779                              <2> .lp:	;it starts this with the center in edi
  8780                              <2> 		;color in bp
  8781                              <2> 		;ddF_x in memory
  8782                              <2> 		;x*resolutionx2 in ebx
  8783                              <2> 		;x in edx
  8784                              <2> 		;ddF_y in memory
  8785                              <2> 		;y*resolutionx2 in eax
  8786                              <2> 		;f in esi
  8787                              <2> 		;y in ecx
  8788 000068A2 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8789 000068A8 7714                <2> 	ja	.noddF_y
  8790 000068AA 49                  <2> 	dec ecx
  8791 000068AB 2B05[1A560000]      <2> 	sub eax, [resolutionx2]
  8792 000068B1 8305[2C690000]02    <2> 	add dword [.ddF_y], 2
  8793 000068B8 0335[2C690000]      <2> 	add esi, [.ddF_y]
  8794                              <2> .noddF_y:
  8795 000068BE 42                  <2> 	inc edx
  8796 000068BF 031D[1A560000]      <2> 	add ebx, [resolutionx2]
  8797 000068C5 8305[28690000]02    <2> 	add dword [.ddF_x], 2
  8798 000068CC 0335[28690000]      <2> 	add esi, [.ddF_x]
  8799                              <2> 
  8800 000068D2 D1E2                <2> 	shl edx, 1
  8801 000068D4 D1E1                <2> 	shl ecx, 1
  8802 000068D6 01D7                <2> 	add edi, edx
  8803 000068D8 01C7                <2> 	add edi, eax
  8804 000068DA 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  8805 000068DD D1E2                <2> 	shl edx, 1
  8806 000068DF 29D7                <2> 	sub edi, edx
  8807 000068E1 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8808 000068E4 D1E0                <2> 	shl eax, 1
  8809 000068E6 29C7                <2> 	sub edi, eax
  8810 000068E8 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  8811 000068EB 01D7                <2> 	add edi, edx
  8812 000068ED 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8813 000068F0 D1E8                <2> 	shr eax, 1
  8814 000068F2 D1EA                <2> 	shr edx, 1
  8815 000068F4 01C7                <2> 	add edi, eax
  8816 000068F6 29D7                <2> 	sub edi, edx
  8817                              <2> 
  8818 000068F8 39D1                <2> 	cmp ecx, edx
  8819 000068FA 74A2                <2> 	je .lpb
  8820                              <2> 
  8821 000068FC 01DF                <2> 	add edi, ebx
  8822 000068FE 01CF                <2> 	add edi, ecx
  8823 00006900 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8824 00006903 D1E1                <2> 	shl ecx, 1
  8825 00006905 29CF                <2> 	sub edi, ecx
  8826 00006907 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8827 0000690A D1E3                <2> 	shl ebx, 1
  8828 0000690C 29DF                <2> 	sub edi, ebx
  8829 0000690E 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8830 00006911 01CF                <2> 	add edi, ecx
  8831 00006913 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8832 00006916 D1EB                <2> 	shr ebx, 1
  8833 00006918 D1E9                <2> 	shr ecx, 1
  8834 0000691A 01DF                <2> 	add edi, ebx
  8835 0000691C 29CF                <2> 	sub edi, ecx
  8836 0000691E 39CA                <2> 	cmp edx, ecx
  8837 00006920 0F8278FFFFFF        <2> 	jb .lpb
  8838                              <2> .done:
  8839 00006926 5D                  <2> 	pop ebp
  8840 00006927 C3                  <2> 	ret
  8841                              <2> 	
  8842 00006928 00000000            <2> .ddF_x dd 0
  8843 0000692C 00000000            <2> .ddF_y dd 0
  8844                              <2> 
  8845                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  8846 00006930 55                  <2> 	push ebp
  8847 00006931 6683F800            <2> 	cmp ax, 0
  8848 00006935 770A                <2> 	ja .nozerocircle
  8849 00006937 E8031B0000          <2> 	call putpixel	;the easiest circle ever
  8850 0000693C E923010000          <2> 	jmp .done
  8851                              <2> .nozerocircle:
  8852 00006941 6689F5              <2> 	mov bp, si
  8853 00006944 6650                <2> 	push ax
  8854 00006946 E8351B0000          <2> 	call getpixelmem
  8855 0000694B 31C0                <2> 	xor eax, eax
  8856 0000694D 6658                <2> 	pop ax
  8857 0000694F BE01000000          <2> 	mov esi, 1
  8858 00006954 29C6                <2> 	sub esi, eax
  8859 00006956 89C1                <2> 	mov ecx, eax
  8860 00006958 31C0                <2> 	xor eax, eax
  8861 0000695A 66A1[1A560000]      <2> 	mov ax, [resolutionx2]
  8862 00006960 F7E1                <2> 	mul ecx
  8863 00006962 50                  <2> 	push eax
  8864 00006963 31D2                <2> 	xor edx, edx
  8865 00006965 01C7                <2> 	add edi, eax
  8866 00006967 66892F              <2> 	mov [edi], bp
  8867 0000696A 29C7                <2> 	sub edi, eax
  8868 0000696C 29C7                <2> 	sub edi, eax
  8869 0000696E 66892F              <2> 	mov [edi], bp
  8870 00006971 01C7                <2> 	add edi, eax
  8871 00006973 D1E1                <2> 	shl ecx, 1
  8872 00006975 01CF                <2> 	add edi, ecx
  8873 00006977 51                  <2> 	push ecx
  8874                              <2> .s0:
  8875 00006978 66892F              <2> 	mov [edi], bp
  8876 0000697B 83EF02              <2> 	sub edi, 2
  8877 0000697E 49                  <2> 	dec ecx
  8878 0000697F 83F900              <2> 	cmp ecx, 0
  8879 00006982 75F4                <2> 	jne .s0
  8880 00006984 66892F              <2> 	mov [edi], bp
  8881 00006987 59                  <2> 	pop ecx
  8882 00006988 01CF                <2> 	add edi, ecx
  8883 0000698A D1E9                <2> 	shr ecx, 1
  8884 0000698C B802000000          <2> 	mov eax, 2
  8885 00006991 F7E1                <2> 	mul ecx
  8886 00006993 48                  <2> 	dec eax
  8887 00006994 F7D0                <2> 	not eax ;make it negative
  8888 00006996 A3[6A6A0000]        <2> 	mov [.ddF_y], eax
  8889 0000699B 58                  <2> 	pop eax
  8890 0000699C BB01000000          <2> 	mov ebx, 1
  8891 000069A1 891D[666A0000]      <2> 	mov [.ddF_x], ebx
  8892 000069A7 4B                  <2> 	dec ebx
  8893 000069A8 31D2                <2> 	xor edx, edx
  8894 000069AA EB04                <2> 	jmp .lp
  8895                              <2> .lpb:
  8896 000069AC D1EA                <2> 	shr edx, 1
  8897 000069AE D1E9                <2> 	shr ecx, 1
  8898                              <2> .lp:	;it starts this with the center in edi
  8899                              <2> 		;color in bp
  8900                              <2> 		;ddF_x in memory
  8901                              <2> 		;x*resolutionx2 in ebx
  8902                              <2> 		;x in edx
  8903                              <2> 		;ddF_y in memory
  8904                              <2> 		;y*resolutionx2 in eax
  8905                              <2> 		;f in esi
  8906                              <2> 		;y in ecx
  8907 000069B0 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8908 000069B6 7714                <2> 	ja	.noddF_y
  8909 000069B8 49                  <2> 	dec ecx
  8910 000069B9 2B05[1A560000]      <2> 	sub eax, [resolutionx2]
  8911 000069BF 8305[6A6A0000]02    <2> 	add dword [.ddF_y], 2
  8912 000069C6 0335[6A6A0000]      <2> 	add esi, [.ddF_y]
  8913                              <2> .noddF_y:
  8914 000069CC 42                  <2> 	inc edx
  8915 000069CD 031D[1A560000]      <2> 	add ebx, [resolutionx2]
  8916 000069D3 8305[666A0000]02    <2> 	add dword [.ddF_x], 2
  8917 000069DA 0335[666A0000]      <2> 	add esi, [.ddF_x]
  8918                              <2> 
  8919 000069E0 D1E2                <2> 	shl edx, 1
  8920 000069E2 D1E1                <2> 	shl ecx, 1
  8921 000069E4 52                  <2> 	push edx
  8922 000069E5 29D7                <2> 	sub edi, edx
  8923 000069E7 01C7                <2> 	add edi, eax
  8924 000069E9 83FA00              <2> 	cmp edx, 0
  8925 000069EC 740C                <2> 	je .nos1
  8926                              <2> .s1:
  8927 000069EE 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8928 000069F1 83C702              <2> 	add edi, 2
  8929 000069F4 4A                  <2> 	dec edx
  8930 000069F5 83FA00              <2> 	cmp edx, 0
  8931 000069F8 75F4                <2> 	jne .s1
  8932                              <2> .nos1:
  8933 000069FA 66892F              <2> 	mov [edi], bp
  8934 000069FD 5A                  <2> 	pop edx
  8935 000069FE 52                  <2> 	push edx
  8936 000069FF 29C7                <2> 	sub edi, eax
  8937 00006A01 29C7                <2> 	sub edi, eax
  8938 00006A03 83FA00              <2> 	cmp edx, 0
  8939 00006A06 740C                <2> 	je .nos2
  8940                              <2> .s2:
  8941 00006A08 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8942 00006A0B 83EF02              <2> 	sub edi, 2
  8943 00006A0E 4A                  <2> 	dec edx
  8944 00006A0F 83FA00              <2> 	cmp edx, 0
  8945 00006A12 75F4                <2> 	jne .s2
  8946                              <2> .nos2:
  8947 00006A14 66892F              <2> 	mov [edi], bp
  8948 00006A17 5A                  <2> 	pop edx
  8949 00006A18 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  8950 00006A1A 01D7                <2> 	add edi, edx
  8951                              <2> 
  8952 00006A1C 39D1                <2> 	cmp ecx, edx
  8953 00006A1E 748C                <2> 	je .lpb
  8954                              <2> 
  8955 00006A20 51                  <2> 	push ecx
  8956 00006A21 01DF                <2> 	add edi, ebx
  8957 00006A23 29CF                <2> 	sub edi, ecx
  8958 00006A25 83F900              <2> 	cmp ecx, 0
  8959 00006A28 740C                <2> 	je .nos3
  8960                              <2> .s3:
  8961 00006A2A 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8962 00006A2D 83C702              <2> 	add edi, 2
  8963 00006A30 49                  <2> 	dec ecx
  8964 00006A31 83F900              <2> 	cmp ecx, 0
  8965 00006A34 75F4                <2> 	jne .s3
  8966                              <2> .nos3:
  8967 00006A36 66892F              <2> 	mov [edi], bp
  8968 00006A39 59                  <2> 	pop ecx
  8969 00006A3A 51                  <2> 	push ecx
  8970 00006A3B 29DF                <2> 	sub edi, ebx
  8971 00006A3D 29DF                <2> 	sub edi, ebx
  8972 00006A3F 83F900              <2> 	cmp ecx, 0
  8973 00006A42 740C                <2> 	je .nos4
  8974                              <2> .s4:
  8975 00006A44 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8976 00006A47 83EF02              <2> 	sub edi, 2
  8977 00006A4A 49                  <2> 	dec ecx
  8978 00006A4B 83F900              <2> 	cmp ecx, 0
  8979 00006A4E 75F4                <2> 	jne .s4
  8980                              <2> .nos4:
  8981 00006A50 66892F              <2> 	mov [edi], bp
  8982 00006A53 59                  <2> 	pop ecx
  8983 00006A54 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  8984 00006A56 01CF                <2> 	add edi, ecx
  8985                              <2> 
  8986 00006A58 D1EA                <2> 	shr edx, 1
  8987 00006A5A D1E9                <2> 	shr ecx, 1
  8988 00006A5C 39CA                <2> 	cmp edx, ecx
  8989 00006A5E 0F824CFFFFFF        <2> 	jb .lp
  8990                              <2> .done:
  8991 00006A64 5D                  <2> 	pop ebp
  8992 00006A65 C3                  <2> 	ret
  8993                              <2> 	
  8994 00006A66 00000000            <2> .ddF_x dd 0
  8995 00006A6A 00000000            <2> .ddF_y dd 0
  8996                              <1> %include "source/gui/cursor.asm"
  8997                              <2> clearmousecursor:
  8998 00006A6E BE[0B6E0000]        <2> 		mov esi, background
  8999 00006A73 8B3D[42550000]      <2> 		mov edi, [physbaseptr]
  9000 00006A79 31D2                <2> 		xor edx, edx
  9001 00006A7B 31C9                <2> 		xor ecx, ecx
  9002 00006A7D 668B15[02580000]    <2> 		mov dx, [lastmouseposition]
  9003 00006A84 668B0D[04580000]    <2> 		mov cx, [lastmouseposition + 2]
  9004 00006A8B 01D7                <2> 		add edi, edx
  9005 00006A8D 31D2                <2> 		xor edx, edx
  9006 00006A8F 668B15[1A560000]    <2> 		mov dx, [resolutionx2]
  9007 00006A96 83F900              <2> 		cmp ecx, 0
  9008 00006A99 7408                <2> 		je .nomul
  9009 00006A9B 52                  <2> 		push edx
  9010 00006A9C 89D0                <2> 		mov eax, edx
  9011 00006A9E F7E1                <2> 		mul ecx
  9012 00006AA0 01C7                <2> 		add edi, eax
  9013 00006AA2 5A                  <2> 		pop edx
  9014                              <2> .nomul:
  9015                              <2> %ifdef 	gui.background
  9016 00006AA3 833D[E36D0000]00    <2> 		cmp dword [backgroundimage], 0
  9017 00006AAA 7431                <2> 		je .noyclr
  9018 00006AAC 8B35[E36D0000]      <2> 		mov esi, [backgroundimage]
  9019 00006AB2 2B3D[42550000]      <2> 		sub edi, [physbaseptr]
  9020 00006AB8 01FE                <2> 		add esi, edi
  9021 00006ABA 033D[42550000]      <2> 		add edi, [physbaseptr]
  9022                              <2> .backlp:
  9023 00006AC0 31DB                <2> 		xor ebx, ebx
  9024                              <2> .noyback:
  9025 00006AC2 8B041E              <2> 		mov eax, [esi + ebx]
  9026 00006AC5 89041F              <2> 		mov [edi + ebx], eax
  9027 00006AC8 83C304              <2> 		add ebx, 4
  9028 00006ACB 83FB10              <2> 		cmp ebx, 16
  9029 00006ACE 75F2                <2> 		jne .noyback
  9030 00006AD0 01D7                <2> 		add edi, edx
  9031 00006AD2 01D6                <2> 		add esi, edx
  9032 00006AD4 6641                <2> 		inc cx
  9033 00006AD6 6683F910            <2> 		cmp cx, 16
  9034 00006ADA 72E4                <2> 		jb .backlp
  9035 00006ADC C3                  <2> 		ret
  9036                              <2> %endif
  9037                              <2> .noyclr:
  9038 00006ADD 668B06              <2> 		mov ax, [esi]
  9039 00006AE0 C1C010              <2> 		rol eax, 16
  9040 00006AE3 668B06              <2> 		mov ax, [esi]
  9041 00006AE6 8907                <2> 		mov [edi], eax
  9042 00006AE8 894704              <2> 		mov [edi + 4], eax
  9043 00006AEB 894708              <2> 		mov [edi + 8], eax
  9044 00006AEE 89470C              <2> 		mov [edi + 12], eax
  9045 00006AF1 01D7                <2> 		add edi, edx
  9046 00006AF3 6641                <2> 		inc cx
  9047 00006AF5 6683F910            <2> 		cmp cx, 16
  9048 00006AF9 72E2                <2> 		jb .noyclr
  9049 00006AFB C3                  <2> 		ret
  9050                              <2> 
  9051                              <2> switchmousepos:		;;switch were the mouse is located
  9052 00006AFC BE[9CDE2B00]        <2> 		mov esi, mousecolorbuf
  9053 00006B01 8B3D[42550000]      <2> 		mov edi, [physbaseptr]
  9054 00006B07 31D2                <2> 		xor edx, edx
  9055 00006B09 31C9                <2> 		xor ecx, ecx
  9056 00006B0B 668B15[02580000]    <2> 		mov dx, [lastmouseposition]
  9057 00006B12 668B0D[04580000]    <2> 		mov cx, [lastmouseposition + 2]
  9058 00006B19 01D7                <2> 		add edi, edx
  9059 00006B1B 31D2                <2> 		xor edx, edx
  9060 00006B1D 668B15[1A560000]    <2> 		mov dx, [resolutionx2]
  9061 00006B24 6683F900            <2> 		cmp cx, 0
  9062 00006B28 740A                <2> 		je noswmsy
  9063 00006B2A 01D7                <2> swmsy:		add edi, edx
  9064 00006B2C 6649                <2> 		dec cx
  9065 00006B2E 6683F900            <2> 		cmp cx, 0
  9066 00006B32 75F6                <2> 		jne swmsy
  9067 00006B34 8B06                <2> noswmsy:	mov eax, [esi]
  9068 00006B36 8B5E04              <2> 		mov ebx, [esi + 4]
  9069 00006B39 8907                <2> 		mov [edi], eax
  9070 00006B3B 895F04              <2> 		mov [edi + 4], ebx
  9071 00006B3E 8B4608              <2> 		mov eax, [esi + 8]
  9072 00006B41 8B5E0C              <2> 		mov ebx, [esi + 12]
  9073 00006B44 894708              <2> 		mov [edi + 8], eax
  9074 00006B47 895F0C              <2> 		mov [edi + 12], ebx
  9075 00006B4A 01D7                <2> 		add edi, edx
  9076 00006B4C 83C610              <2> 		add esi, 16
  9077 00006B4F 81FE[9CDF2B00]      <2> 		cmp esi, mcolorend
  9078 00006B55 72DD                <2> 		jb noswmsy
  9079                              <2> 		
  9080                              <2> switchmousepos2:
  9081 00006B57 BE[9CDE2B00]        <2> 		mov esi, mousecolorbuf
  9082 00006B5C 8B3D[42550000]      <2> 		mov edi, [physbaseptr]
  9083 00006B62 31D2                <2> 		xor edx, edx
  9084 00006B64 31C9                <2> 		xor ecx, ecx
  9085 00006B66 668B15[06580000]    <2> 		mov dx, [mousecursorposition]
  9086 00006B6D 668B0D[08580000]    <2> 		mov cx, [mousecursorposition + 2]
  9087 00006B74 01D7                <2> 		add edi, edx
  9088 00006B76 31D2                <2> 		xor edx, edx
  9089 00006B78 668B15[1A560000]    <2> 		mov dx, [resolutionx2]
  9090 00006B7F 6683F900            <2> 		cmp cx, 0
  9091 00006B83 740A                <2> 		je noswmsy2
  9092 00006B85 01D7                <2> swmsy2:		add edi, edx
  9093 00006B87 6649                <2> 		dec cx
  9094 00006B89 6683F900            <2> 		cmp cx, 0
  9095 00006B8D 75F6                <2> 		jne swmsy2
  9096 00006B8F 8B07                <2> noswmsy2:	mov eax, [edi]
  9097 00006B91 8B5F04              <2> 		mov ebx, [edi + 4]
  9098 00006B94 8906                <2> 		mov [esi], eax
  9099 00006B96 895E04              <2> 		mov [esi + 4], ebx
  9100 00006B99 8B4708              <2> 		mov eax, [edi + 8]
  9101 00006B9C 8B5F0C              <2> 		mov ebx, [edi + 12]
  9102 00006B9F 894608              <2> 		mov [esi + 8], eax
  9103 00006BA2 895E0C              <2> 		mov [esi + 12], ebx
  9104 00006BA5 01D7                <2> 		add edi, edx
  9105 00006BA7 83C610              <2> 		add esi, 16
  9106 00006BAA 81FE[9CDF2B00]      <2> 		cmp esi, mcolorend
  9107 00006BB0 72DD                <2> 		jb noswmsy2
  9108 00006BB2 C3                  <2> 		ret
  9109                              <2> 		
  9110                              <1> %include "source/gui/icon.asm"
  9111 00006BB3 0000                <2> iconcolor dw 0
  9112                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  9113 00006BB5 A2[A8840000]        <2> 		mov [iconselected], al
  9114 00006BBA 8025[A8840000]01    <2> 		and byte [iconselected], 1
  9115 00006BC1 B401                <2> 		mov ah, 1
  9116 00006BC3 E8F9150000          <2> 		call graphicsadd
  9117                              <2> 	showicon2:
  9118 00006BC8 8B3D[42550000]      <2> 		mov edi, [physbaseptr]
  9119 00006BCE 6601D2              <2> 		add dx, dx
  9120 00006BD1 663B15[1A560000]    <2> 		cmp dx, [resolutionx2]
  9121 00006BD8 720B                <2> 		jb screenxgood
  9122 00006BDA 668B15[1A560000]    <2> 		mov dx, [resolutionx2]
  9123 00006BE1 6683EA40            <2> 		sub dx, 64
  9124                              <2> 	screenxgood:
  9125 00006BE5 6683F900            <2> 		cmp cx, 0
  9126 00006BE9 742A                <2> 		je noscreenygoodchk
  9127 00006BEB 663B0D[2E550000]    <2> 		cmp cx, [resolutiony]
  9128 00006BF2 720B                <2> 		jb screenygood
  9129 00006BF4 668B0D[2E550000]    <2> 		mov cx, [resolutiony]
  9130 00006BFB 6683E920            <2> 		sub cx, 32
  9131                              <2> 	screenygood:
  9132 00006BFF 50                  <2> 		push eax
  9133 00006C00 52                  <2> 		push edx
  9134 00006C01 31C0                <2> 		xor eax, eax
  9135 00006C03 31DB                <2> 		xor ebx, ebx
  9136 00006C05 668B1D[1A560000]    <2> 		mov bx, [resolutionx2]
  9137 00006C0C 6689C8              <2> 		mov ax, cx
  9138 00006C0F F7E3                <2> 		mul ebx
  9139 00006C11 01C7                <2> 		add edi, eax
  9140 00006C13 5A                  <2> 		pop edx
  9141 00006C14 58                  <2> 		pop eax
  9142                              <2> 	noscreenygoodchk:
  9143 00006C15 31DB                <2> 		xor ebx, ebx
  9144 00006C17 6689D3              <2> 		mov bx, dx
  9145 00006C1A 01DF                <2> 		add edi, ebx
  9146 00006C1C 6631C9              <2> 		xor cx, cx
  9147 00006C1F 668B06              <2> 		mov ax, [esi]
  9148 00006C22 83C602              <2> 		add esi, 2
  9149 00006C25 66A3[B36B0000]      <2> 		mov [iconcolor], ax
  9150                              <2> 	writeicon:
  9151 00006C2B 8B06                <2> 		mov eax, [esi]
  9152 00006C2D D1C0                <2> 		rol eax, 1
  9153 00006C2F 30C9                <2> 		xor cl, cl
  9154                              <2> 	writeiconline:
  9155 00006C31 B201                <2> 		mov dl, 1
  9156 00006C33 20C2                <2> 		and dl, al
  9157 00006C35 3215[A8840000]      <2> 		xor dl, [iconselected]
  9158 00006C3B 668B1D[0B6E0000]    <2> 		mov bx, [background]
  9159 00006C42 66891F              <2> 		mov [edi], bx
  9160 00006C45 80FA00              <2> 		cmp dl, 0
  9161 00006C48 740A                <2> 		je noiconline
  9162 00006C4A 668B15[B36B0000]    <2> 		mov dx, [iconcolor]
  9163 00006C51 668917              <2> 		mov [edi], dx
  9164                              <2> 	noiconline:
  9165 00006C54 83C702              <2> 		add edi, 2
  9166 00006C57 D1C0                <2> 		rol eax, 1
  9167 00006C59 FEC1                <2> 		inc cl
  9168 00006C5B 80F920              <2> 		cmp cl, 32
  9169 00006C5E 72D1                <2> 		jb writeiconline
  9170 00006C60 83C604              <2> 		add esi, 4
  9171 00006C63 FEC5                <2> 		inc ch
  9172 00006C65 31D2                <2> 		xor edx, edx
  9173 00006C67 668B15[1A560000]    <2> 		mov dx, [resolutionx2]
  9174 00006C6E 01D7                <2> 		add edi, edx
  9175 00006C70 83EF40              <2> 		sub edi, 64
  9176 00006C73 80FD20              <2> 		cmp ch, 32
  9177 00006C76 72B3                <2> 		jb writeicon
  9178 00006C78 31C0                <2> 		xor eax, eax
  9179 00006C7A C3                  <2> 		ret
  9180                              <1> %include "source/gui/line.asm"
  9181                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  9182 00006C7B 668935[846D0000]    <2> 	mov [.color], si
  9183 00006C82 C605[866D0000]00    <2> 	mov byte [.steep], 0
  9184 00006C89 C605[876D0000]00    <2> 	mov byte [.yreversed], 0
  9185 00006C90 EB07                <2> 	jmp .notsteep
  9186                              <2> .steeploop:
  9187 00006C92 C605[866D0000]01    <2> 	mov byte [.steep], 1
  9188                              <2> .notsteep:
  9189 00006C99 31FF                <2> 	xor edi, edi
  9190 00006C9B 31F6                <2> 	xor esi, esi
  9191 00006C9D 6639DA              <2> 	cmp dx, bx
  9192 00006CA0 7705                <2> 	ja .noreversex
  9193 00006CA2 6687D3              <2> 	xchg dx, bx
  9194 00006CA5 6691                <2> 	xchg cx, ax
  9195                              <2> .noreversex:
  9196 00006CA7 6689D7              <2> 	mov di, dx
  9197 00006CAA 6629DF              <2> 	sub di, bx
  9198                              <2> 	
  9199 00006CAD 6639C1              <2> 	cmp cx, ax
  9200 00006CB0 7208                <2> 	jb .reversey
  9201 00006CB2 6689CE              <2> 	mov si, cx
  9202 00006CB5 6629C6              <2> 	sub si, ax
  9203 00006CB8 EB0D                <2> 	jmp .normal
  9204                              <2> .reversey:
  9205 00006CBA C605[876D0000]02    <2> 	mov byte [.yreversed], 2
  9206 00006CC1 6689C6              <2> 	mov si, ax
  9207 00006CC4 6629CE              <2> 	sub si, cx	
  9208                              <2> .normal:
  9209 00006CC7 6687CA              <2> 	xchg cx, dx
  9210 00006CCA 6693                <2> 	xchg ax, bx
  9211 00006CCC 6639FE              <2> 	cmp si, di
  9212 00006CCF 77C1                <2> 	ja .steeploop
  9213 00006CD1 6687CA              <2> 	xchg cx, dx
  9214 00006CD4 6693                <2> 	xchg ax, bx
  9215                              <2> 	
  9216 00006CD6 6691                <2> 	xchg ax, cx
  9217 00006CD8 6687DA              <2> 	xchg bx, dx
  9218 00006CDB 66893D[8A6D0000]    <2> 	mov [.xdelta], di
  9219 00006CE2 668935[8C6D0000]    <2> 	mov [.ydelta], si
  9220 00006CE9 668B35[846D0000]    <2> 	mov si, [.color]
  9221 00006CF0 66891D[886D0000]    <2> 	mov [.endline], bx
  9222 00006CF7 6652                <2> 	push dx
  9223 00006CF9 6651                <2> 	push cx
  9224 00006CFB 6687CA              <2> 	xchg cx, dx
  9225 00006CFE 803D[866D0000]01    <2> 	cmp byte [.steep], 1
  9226 00006D05 7403                <2> 	je .xchg
  9227 00006D07 6687D1              <2> 	xchg dx, cx
  9228                              <2> .xchg:
  9229 00006D0A E871170000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9230 00006D0F 6659                <2> 	pop cx
  9231 00006D11 665A                <2> 	pop dx
  9232 00006D13 31C0                <2> 	xor eax, eax
  9233 00006D15 66A1[8A6D0000]      <2> 	mov ax, [.xdelta]
  9234 00006D1B 66D1E8              <2> 	shr ax, 1
  9235 00006D1E 8A0D[866D0000]      <2> 	mov cl, [.steep]
  9236 00006D24 0A0D[876D0000]      <2> 	or cl, [.yreversed]
  9237 00006D2A 55                  <2> 	push ebp
  9238 00006D2B 668B2D[886D0000]    <2> 	mov bp, [.endline]
  9239 00006D32 6629D5              <2> 	sub bp, dx
  9240 00006D35 668B15[8C6D0000]    <2> 	mov dx, [.ydelta]
  9241                              <2> .lp:
  9242 00006D3C 668937              <2> 	mov [edi], si
  9243 00006D3F 6639D0              <2> 	cmp ax, dx
  9244 00006D42 7326                <2> 	jae .noaddx
  9245 00006D44 F6C102              <2> 	test cl, 2
  9246 00006D47 740E                <2> 	jz .nodecy
  9247 00006D49 F6C101              <2> 	test cl, 1
  9248 00006D4C 7506                <2> 	jnz .steepy
  9249 00006D4E 29DF                <2> 	sub edi, ebx
  9250 00006D50 29DF                <2> 	sub edi, ebx
  9251 00006D52 EB03                <2> 	jmp .nodecy
  9252                              <2> .steepy:
  9253 00006D54 83EF04              <2> 	sub edi, 4
  9254                              <2> .nodecy:
  9255 00006D57 660305[8A6D0000]    <2> 	add ax, [.xdelta]
  9256 00006D5E F6C101              <2> 	test cl, 1
  9257 00006D61 7504                <2> 	jnz .steepx
  9258 00006D63 01DF                <2> 	add edi, ebx
  9259 00006D65 EB03                <2> 	jmp .noaddx
  9260                              <2> .steepx:
  9261 00006D67 83C702              <2> 	add edi, 2
  9262                              <2> .noaddx:
  9263 00006D6A 6629D0              <2> 	sub ax, dx
  9264 00006D6D 664D                <2> 	dec bp
  9265 00006D6F 83C702              <2> 	add edi, 2
  9266 00006D72 F6C101              <2> 	test cl, 1
  9267 00006D75 7405                <2> 	jz .nosteepx
  9268 00006D77 83EF02              <2> 	sub edi, 2
  9269 00006D7A 01DF                <2> 	add edi, ebx
  9270                              <2> .nosteepx:
  9271 00006D7C 6683FD00            <2> 	cmp bp, 0
  9272 00006D80 75BA                <2> 	jne .lp
  9273                              <2> .done:
  9274 00006D82 5D                  <2> 	pop ebp
  9275 00006D83 C3                  <2> 	ret
  9276                              <2> 	
  9277 00006D84 0000                <2> .color dw 0
  9278 00006D86 00                  <2> .steep db 0
  9279 00006D87 00                  <2> .yreversed db 0
  9280 00006D88 0000                <2> .endline dw 0
  9281 00006D8A 0000                <2> .xdelta dw 0
  9282 00006D8C 0000                <2> .ydelta dw 0
  9283                              <1> %include "source/gui/refresh.asm"
  9284                              <2> guiclear:
  9285 00006D8E 8B3D[42550000]      <2> 	mov edi, [physbaseptr]
  9286 00006D94 668B15[2C550000]    <2> 	mov dx, [resolutionx]
  9287 00006D9B 668B0D[2E550000]    <2> 	mov cx, [resolutiony]
  9288 00006DA2 668B1D[0B6E0000]    <2> 	mov bx, [background]
  9289 00006DA9 66891D[0D6E0000]    <2> 	mov [background + 2], bx
  9290                              <2> %ifdef gui.background
  9291 00006DB0 833D[E36D0000]00    <2> 	cmp dword [backgroundimage], 0
  9292 00006DB7 742E                <2> 	je guiclear.noback
  9293 00006DB9 8B35[E36D0000]      <2> 		mov esi, [backgroundimage]
  9294                              <2> 	.lp:
  9295                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  9296                              <2> 		;movdqa [edi], xmm0
  9297                              <2> 		;add esi, 16
  9298                              <2> 		;add edi, 16
  9299                              <2> 		;sub dx, 8
  9300 00006DBF 8B06                <2> 		mov eax, [esi]
  9301 00006DC1 8907                <2> 		mov [edi], eax
  9302 00006DC3 83C604              <2> 		add esi, 4
  9303 00006DC6 83C704              <2> 		add edi, 4
  9304 00006DC9 6683EA02            <2> 		sub dx, 2
  9305 00006DCD 6683FA00            <2> 		cmp dx, 0
  9306 00006DD1 77EC                <2> 		ja .lp
  9307 00006DD3 6649                <2> 		dec cx
  9308 00006DD5 668B15[2C550000]    <2> 		mov dx, [resolutionx]
  9309 00006DDC 6683F900            <2> 		cmp cx, 0
  9310 00006DE0 77DD                <2> 		ja .lp
  9311 00006DE2 C3                  <2> 		ret
  9312 00006DE3 00000000            <2> 	backgroundimage dd 0
  9313                              <2> %endif
  9314                              <2> guiclear.noback:
  9315 00006DE7 A1[0B6E0000]        <2> 	mov eax, [background]
  9316                              <2> guiclearloop:
  9317 00006DEC 8907                <2> 	mov [edi], eax
  9318 00006DEE 83C704              <2> 	add edi, 4
  9319 00006DF1 6683EA02            <2> 	sub dx, 2
  9320 00006DF5 6683FA00            <2> 	cmp dx, 0
  9321 00006DF9 77F1                <2> 	ja guiclearloop
  9322 00006DFB 6649                <2> 	dec cx
  9323 00006DFD 668B15[2C550000]    <2> 	mov dx, [resolutionx]
  9324 00006E04 6683F900            <2> 	cmp cx, 0
  9325 00006E08 77E2                <2> 	ja guiclearloop
  9326 00006E0A C3                  <2> 	ret
  9327                              <2> 
  9328 00006E0B CF7B<rept>          <2> background times 2 dw 0111101111001111b
  9329                              <2> 	.original equ 0111101111001111b
  9330                              <2> 
  9331                              <2> reloadallgraphics:
  9332 00006E0F BF[9CC80300]        <2> 		mov edi, graphicstable
  9333                              <2> reloadgraphicsloop:
  9334 00006E14 8B7702              <2> 		mov esi, [edi + 2]
  9335 00006E17 668B5706            <2> 		mov dx, [edi + 6]
  9336 00006E1B 668B4F08            <2> 		mov cx, [edi + 8]
  9337 00006E1F 668B07              <2> 		mov ax, [edi]
  9338 00006E22 668B5F0A            <2> 		mov bx, [edi + 10]
  9339 00006E26 893D[AD810000]      <2> 		mov [grpctblpos], edi
  9340 00006E2C 3B3D[7F7C0000]      <2> 		cmp edi, [dragging]
  9341 00006E32 741E                <2> 		je loadedgraphic
  9342 00006E34 6683F801            <2> 		cmp ax, 1
  9343 00006E38 0F8433000000        <2> 		je near icongraphic
  9344 00006E3E 6683F802            <2> 		cmp ax, 2
  9345 00006E42 0F8439000000        <2> 		je near stringgraphic
  9346 00006E48 6683F803            <2> 		cmp ax, 3
  9347 00006E4C 0F8413000000        <2> 		je near windowgraphic
  9348 00006E52 8B3D[AD810000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  9349 00006E58 83C710              <2> 		add edi, 16
  9350 00006E5B 81FF[9CCA0300]      <2> 		cmp edi, graphicstableend
  9351 00006E61 732E                <2> 		jae donereloadgraphics
  9352 00006E63 EBAF                <2> 		jmp reloadgraphicsloop
  9353                              <2> windowgraphic:
  9354 00006E65 E80B090000          <2> 		call showwindow2
  9355 00006E6A E892AFFFFF          <2> 		call cleardouble
  9356 00006E6F EBE1                <2> 		jmp loadedgraphic
  9357 00006E71 80E301              <2> icongraphic:	and bl, 1
  9358 00006E74 881D[A8840000]      <2> 		mov [iconselected], bl
  9359 00006E7A E849FDFFFF          <2> 		call showicon2
  9360 00006E7F EBD1                <2> 		jmp loadedgraphic
  9361 00006E81 80E301              <2> stringgraphic:  and bl, 1
  9362 00006E84 881D[7B7C0000]      <2> 		mov [mouseselecton], bl
  9363 00006E8A E8C6050000          <2> 		call showstring2
  9364 00006E8F EBC1                <2> 		jmp loadedgraphic
  9365                              <2> donereloadgraphics:
  9366 00006E91 8B3D[7F7C0000]      <2> 		mov edi, [dragging]
  9367 00006E97 81FF[9CC80300]      <2> 		cmp edi, graphicstable
  9368 00006E9D 7226                <2> 		jb notcorrectdrag
  9369 00006E9F 668B07              <2> 		mov ax, [edi]
  9370 00006EA2 8B7702              <2> 		mov esi, [edi + 2]
  9371 00006EA5 668B5706            <2> 		mov dx, [edi + 6]
  9372 00006EA9 668B4F08            <2> 		mov cx, [edi + 8]
  9373 00006EAD 668B5F0A            <2> 		mov bx, [edi + 10]
  9374 00006EB1 6683F801            <2> 		cmp ax, 1
  9375 00006EB5 750F                <2> 		jne noticondragging
  9376 00006EB7 80E301              <2> 		and bl, 1
  9377 00006EBA 881D[A8840000]      <2> 		mov [iconselected], bl
  9378 00006EC0 E803FDFFFF          <2> 		call showicon2
  9379                              <2> notcorrectdrag:
  9380 00006EC5 C3                  <2> 		ret
  9381                              <2> 
  9382                              <2> 	noticondragging:
  9383 00006EC6 6683F802            <2> 		cmp ax, 2
  9384 00006ECA 75F9                <2> 		jne notcorrectdrag
  9385 00006ECC 80E301              <2> 		and bl, 1
  9386 00006ECF 881D[7B7C0000]      <2> 		mov [mouseselecton], bl
  9387 00006ED5 E87B050000          <2> 		call showstring2
  9388 00006EDA EBE9                <2> 		jmp notcorrectdrag
  9389                              <1> %include "source/gui/square.asm"
  9390                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  9391 00006EDC 6639D3              <2> 	cmp bx, dx
  9392 00006EDF 7303                <2> 	jae .noxchgx
  9393 00006EE1 6687DA              <2> 	xchg bx, dx
  9394                              <2> .noxchgx:
  9395 00006EE4 6639C8              <2> 	cmp ax, cx
  9396 00006EE7 7302                <2> 	jae .noxchgy
  9397 00006EE9 6691                <2> 	xchg ax, cx
  9398                              <2> .noxchgy:
  9399 00006EEB 6650                <2> 	push ax
  9400 00006EED 6653                <2> 	push bx
  9401 00006EEF 6652                <2> 	push dx
  9402 00006EF1 E88A150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9403 00006EF6 31D2                <2> 	xor edx, edx
  9404 00006EF8 665A                <2> 	pop dx
  9405 00006EFA 31DB                <2> 	xor ebx, ebx
  9406 00006EFC 665B                <2> 	pop bx
  9407 00006EFE 6658                <2> 	pop ax
  9408                              <2> .lp0:
  9409 00006F00 6652                <2> 	push dx
  9410                              <2> .lp:
  9411 00006F02 668937              <2> 	mov [edi], si
  9412 00006F05 83C702              <2> 	add edi, 2
  9413 00006F08 6642                <2> 	inc dx
  9414 00006F0A 6639DA              <2> 	cmp dx, bx
  9415 00006F0D 76F3                <2> 	jbe .lp
  9416 00006F0F 665A                <2> 	pop dx
  9417 00006F11 83EF02              <2> 	sub edi, 2
  9418 00006F14 29DF                <2> 	sub edi, ebx
  9419 00006F16 29DF                <2> 	sub edi, ebx
  9420 00006F18 01D7                <2> 	add edi, edx
  9421 00006F1A 01D7                <2> 	add edi, edx
  9422 00006F1C 033D[1A560000]      <2> 	add edi, [resolutionx2]
  9423 00006F22 6641                <2> 	inc cx
  9424 00006F24 6639C1              <2> 	cmp cx, ax
  9425 00006F27 7203                <2> 	jb .lp2
  9426 00006F29 74D5                <2> 	je .lp0
  9427 00006F2B C3                  <2> 	ret
  9428                              <2> .lp2:
  9429 00006F2C 57                  <2> 	push edi
  9430 00006F2D 668937              <2> 	mov [edi], si
  9431 00006F30 29D7                <2> 	sub edi, edx
  9432 00006F32 29D7                <2> 	sub edi, edx
  9433 00006F34 01DF                <2> 	add edi, ebx
  9434 00006F36 01DF                <2> 	add edi, ebx
  9435 00006F38 668937              <2> 	mov [edi], si
  9436 00006F3B 5F                  <2> 	pop edi
  9437 00006F3C 033D[1A560000]      <2> 	add edi, [resolutionx2]
  9438 00006F42 6641                <2> 	inc cx
  9439 00006F44 6639C1              <2> 	cmp cx, ax
  9440 00006F47 72E3                <2> 	jb .lp2
  9441 00006F49 EBB5                <2> 	jmp .lp0
  9442                              <2> 
  9443                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  9444 00006F4B 6639D3              <2> 	cmp bx, dx
  9445 00006F4E 7303                <2> 	jae .noxchgx
  9446 00006F50 6687DA              <2> 	xchg bx, dx
  9447                              <2> .noxchgx:
  9448 00006F53 6639C8              <2> 	cmp ax, cx
  9449 00006F56 7302                <2> 	jae .noxchgy
  9450 00006F58 6691                <2> 	xchg ax, cx
  9451                              <2> .noxchgy:
  9452 00006F5A 6650                <2> 	push ax
  9453 00006F5C 6653                <2> 	push bx
  9454 00006F5E 6652                <2> 	push dx
  9455 00006F60 E81B150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9456 00006F65 31D2                <2> 	xor edx, edx
  9457 00006F67 665A                <2> 	pop dx
  9458 00006F69 31DB                <2> 	xor ebx, ebx
  9459 00006F6B 665B                <2> 	pop bx
  9460 00006F6D 6658                <2> 	pop ax
  9461                              <2> .lp2:
  9462 00006F6F 6652                <2> 	push dx
  9463                              <2> .lp:
  9464 00006F71 668937              <2> 	mov [edi], si
  9465 00006F74 83C702              <2> 	add edi, 2
  9466 00006F77 6642                <2> 	inc dx
  9467 00006F79 6639DA              <2> 	cmp dx, bx
  9468 00006F7C 76F3                <2> 	jbe .lp
  9469 00006F7E 665A                <2> 	pop dx
  9470 00006F80 83EF02              <2> 	sub edi, 2
  9471 00006F83 29DF                <2> 	sub edi, ebx
  9472 00006F85 29DF                <2> 	sub edi, ebx
  9473 00006F87 01D7                <2> 	add edi, edx
  9474 00006F89 01D7                <2> 	add edi, edx
  9475 00006F8B 033D[1A560000]      <2> 	add edi, [resolutionx2]
  9476 00006F91 6641                <2> 	inc cx
  9477 00006F93 6639C1              <2> 	cmp cx, ax
  9478 00006F96 76D7                <2> 	jbe .lp2
  9479 00006F98 C3                  <2> 	ret
  9480                              <1> %include "source/gui/startup.asm"
  9481                              <2> guisetup:
  9482                              <2> 	%ifdef gui.background
  9483 00006F99 31DB                <2> 	xor ebx, ebx
  9484 00006F9B 891D[E36D0000]      <2> 	mov [backgroundimage], ebx
  9485                              <2> 	%endif
  9486 00006FA1 E8E8FDFFFF          <2> 	call guiclear
  9487 00006FA6 C605[0F850000]01    <2> 	mov byte [guion], 1
  9488 00006FAD C605[7B7C0000]00    <2> 	mov byte [mouseselecton], 0
  9489 00006FB4 31C0                <2> 	xor eax, eax
  9490 00006FB6 31DB                <2> 	xor ebx, ebx
  9491 00006FB8 31C9                <2> 	xor ecx, ecx
  9492 00006FBA 31D2                <2> 	xor edx, edx
  9493                              <2> 	
  9494 00006FBC BE[7A710000]        <2> 	mov esi, pacmsg
  9495 00006FC1 30E4                <2> 	xor ah, ah
  9496 00006FC3 B010                <2> 	mov al, 00010000b
  9497 00006FC5 31DB                <2> 	xor ebx, ebx
  9498 00006FC7 66B99000            <2> 	mov cx, 144
  9499 00006FCB 66BA0400            <2> 	mov dx, 4
  9500 00006FCF E86E040000          <2> 	call showstring
  9501                              <2> 	
  9502 00006FD4 BE[B8710000]        <2> 	mov esi, interneticon
  9503 00006FD9 30E4                <2> 	xor ah, ah
  9504 00006FDB B010                <2> 	mov al, 00010000b
  9505 00006FDD BB[A6700000]        <2> 	mov ebx, noie
  9506 00006FE2 66B91800            <2> 	mov cx, 24
  9507 00006FE6 66BA0400            <2> 	mov dx, 4
  9508 00006FEA E8C6FBFFFF          <2> 	call showicon
  9509                              <2> 	
  9510 00006FEF BE[3A720000]        <2> 	mov esi, wordicon
  9511 00006FF4 30E4                <2> 	xor ah, ah
  9512 00006FF6 B010                <2> 	mov al, 00010000b
  9513 00006FF8 31DB                <2> 	xor ebx, ebx
  9514 00006FFA 66B91800            <2> 	mov cx, 24
  9515 00006FFE 66BA3000            <2> 	mov dx, 48
  9516 00007002 E8AEFBFFFF          <2> 	call showicon
  9517                              <2> 	
  9518 00007007 BE[BC720000]        <2> 	mov esi, pacmanpellet
  9519 0000700C 30E4                <2> 	xor ah, ah
  9520 0000700E B010                <2> 	mov al, 00010000b
  9521 00007010 31DB                <2> 	xor ebx, ebx
  9522 00007012 66B94000            <2> 	mov cx, 64
  9523 00007016 66BA0400            <2> 	mov dx, 4
  9524 0000701A E896FBFFFF          <2> 	call showicon
  9525                              <2> 	
  9526 0000701F BE[C0730000]        <2> 	mov esi, pacman
  9527 00007024 30E4                <2> 	xor ah, ah
  9528 00007026 B010                <2> 	mov al, 00010000b
  9529 00007028 BB[8F700000]        <2> 	mov ebx, pacmannomnom
  9530 0000702D 66B94000            <2> 	mov cx, 64
  9531 00007031 66BA3000            <2> 	mov dx, 48
  9532 00007035 E87BFBFFFF          <2> 	call showicon
  9533                              <2> 	
  9534 0000703A BE[3E730000]        <2> 	mov esi, ghostie
  9535 0000703F 30E4                <2> 	xor ah, ah
  9536 00007041 B010                <2> 	mov al, 00010000b
  9537 00007043 BB[78700000]        <2> 	mov ebx, boo
  9538 00007048 66B96C00            <2> 	mov cx, 108
  9539 0000704C 66BA0400            <2> 	mov dx, 4
  9540 00007050 E860FBFFFF          <2> 	call showicon
  9541                              <2> 	
  9542 00007055 BE[5C710000]        <2> 	mov esi, start
  9543 0000705A 668B0D[2E550000]    <2> 	mov cx, [resolutiony]
  9544 00007061 6683E910            <2> 	sub cx, 16
  9545 00007065 66BA0200            <2> 	mov dx, 2
  9546 00007069 30E4                <2> 	xor ah, ah
  9547 0000706B B010                <2> 	mov al, 00010000b
  9548 0000706D BB[1A710000]        <2> 	mov ebx, winblows
  9549 00007072 E8CB030000          <2> 	call showstring
  9550                              <2> 
  9551                              <2> %ifdef gui.time	
  9552                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9553                              <2> %endif
  9554 00007077 C3                  <2> 	ret
  9555                              <2> 
  9556                              <2> 	boo:
  9557 00007078 BE[75710000]        <2> 		mov esi, boomsg
  9558 0000707D 66BA6400            <2> 		mov dx, 100
  9559 00007081 66B94001            <2> 		mov cx, 320
  9560 00007085 31DB                <2> 		xor ebx, ebx
  9561 00007087 6631C0              <2> 		xor ax, ax
  9562 0000708A E9B3030000          <2> 		jmp showstring
  9563                              <2> 
  9564                              <2> 	pacmannomnom:
  9565 0000708F BE[93710000]        <2> 		mov esi, pacnom
  9566 00007094 66BA8200            <2> 		mov dx, 130
  9567 00007098 66B93C00            <2> 		mov cx, 60
  9568 0000709C 31DB                <2> 		xor ebx, ebx
  9569 0000709E 6631C0              <2> 		xor ax, ax
  9570 000070A1 E99C030000          <2> 		jmp showstring	
  9571                              <2> 	
  9572                              <2> 	noie:
  9573 000070A6 66C705[A2710000]80- <2> 		mov word [termwindow], 640
  9574 000070AE 02                  <2>
  9575 000070AF 66C705[A4710000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9576 000070B7 01                  <2>
  9577 000070B8 BE[A2710000]        <2> 		mov esi, termwindow
  9578 000070BD 66BA1000            <2> 		mov dx, 16
  9579 000070C1 66B91000            <2> 		mov cx, 16
  9580 000070C5 31DB                <2> 		xor ebx, ebx
  9581 000070C7 6631C0              <2> 		xor ax, ax
  9582 000070CA E8F1050000          <2> 		call showwindow
  9583 000070CF E9F2B9FFFF          <2> 		jmp os
  9584                              <2> 
  9585                              <2> 	gotomenuboot:
  9586 000070D4 31D2                <2> 		xor edx, edx
  9587 000070D6 31C9                <2> 		xor ecx, ecx
  9588 000070D8 668B15[2C550000]    <2> 		mov dx, [resolutionx]
  9589 000070DF 668B0D[2E550000]    <2> 		mov cx, [resolutiony]
  9590 000070E6 66C1E904            <2> 		shr cx, 4
  9591 000070EA 6683E901            <2> 		sub cx, 1
  9592 000070EE 66C1E104            <2> 		shl cx, 4
  9593 000070F2 668915[A2710000]    <2> 		mov [termwindow], dx
  9594 000070F9 66890D[A4710000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9595 00007100 BE[A2710000]        <2> 		mov esi, termwindow
  9596 00007105 6631D2              <2> 		xor dx, dx
  9597 00007108 6631C9              <2> 		xor cx, cx
  9598 0000710B 31DB                <2> 		xor ebx, ebx
  9599 0000710D 6631C0              <2> 		xor ax, ax
  9600 00007110 E8AB050000          <2> 		call showwindow
  9601 00007115 E9ACB9FFFF          <2> 		jmp os
  9602                              <2> 
  9603                              <2> 	winblows:
  9604 0000711A BE[6B710000]        <2> 		mov esi, turnoffmsg
  9605 0000711F BB[9E500000]        <2> 		mov ebx, turnoff
  9606 00007124 668B0D[2E550000]    <2> 		mov cx, [resolutiony]
  9607 0000712B 6683E920            <2> 		sub cx, 32
  9608 0000712F 6631D2              <2> 		xor dx, dx
  9609 00007132 30E4                <2> 		xor ah, ah
  9610 00007134 B010                <2> 		mov al, 00010000b
  9611 00007136 E807030000          <2> 		call showstring
  9612 0000713B BE[62710000]        <2> 		mov esi, gotomenu
  9613 00007140 668B0D[2E550000]    <2> 		mov cx, [resolutiony]
  9614 00007147 6683E930            <2> 		sub cx, 48
  9615 0000714B 6631D2              <2> 		xor dx, dx
  9616 0000714E 30E4                <2> 		xor ah, ah
  9617 00007150 B010                <2> 		mov al, 00010000b
  9618 00007152 BB[D4700000]        <2> 		mov ebx, gotomenuboot
  9619 00007157 E9E6020000          <2> 		jmp showstring
  9620                              <2> 		
  9621                              <2> 
  9622 0000715C 737461727400        <2> 	start	db "start",0
  9623 00007162 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9624 0000716B 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9625 00007174 00                  <2>
  9626 00007175 426F6F2100          <2> 	boomsg db "Boo!",0
  9627 0000717A 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9628 00007183 73206561737920746F- <2>
  9629 0000718C 20647261772E00      <2>
  9630 00007193 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9631 0000719C 6D206E6F6D00        <2>
  9632                              <2> 
  9633 000071A2 20035802            <2> 	termwindow:	dw 800,600	;window size
  9634 000071A6 FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9635 000071AA [9CDF2B00]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9636 000071AE [E4B42C00]          <2>
  9637 000071B2 534855536800        <2> 	termmsg:	db "SHUSh",0	;window title
  9638                              <2> 	
  9639 000071B8 <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9640 0000723A <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9641 000072BC <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9642 0000733E <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9643 000073C0 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9644                              <2> 
  9645                              <2> %ifdef gui.time
  9646                              <2> guitime:
  9647                              <2> 		call time	;get rtc in timeshow & dateshow
  9648                              <2> 		xor ebx, ebx
  9649                              <2> 		mov dx, [resolutionx2]
  9650                              <2> 		xor cx, cx
  9651                              <2> 		sub dx, 304
  9652                              <2> 		mov esi, dateshow
  9653                              <2> 		mov al, 00010001b
  9654                              <2> 		call showstring
  9655                              <2> 		mov esi, timeshow
  9656                              <2> 		xor ebx, ebx
  9657                              <2> 		mov al, 00010001b
  9658                              <2> 		call showstring
  9659                              <2> 		ret
  9660                              <2> %endif
  9661                              <1> %include "source/gui/text.asm"
  9662                              <2> 	showstring:
  9663 00007442 A2[7B7C0000]        <2> 		mov [mouseselecton], al
  9664 00007447 8025[7B7C0000]01    <2> 		and byte [mouseselecton], 1
  9665 0000744E B402                <2> 		mov ah, 2
  9666 00007450 E86C0D0000          <2> 		call graphicsadd
  9667                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9668 00007455 30E4                <2> 		xor ah, ah
  9669 00007457 8A06                <2> 		mov al, [esi]
  9670 00007459 3CFF                <2> 		cmp al, 0xFF
  9671 0000745B 7503                <2> 		jne .notnull
  9672 0000745D 46                  <2> 		inc esi
  9673 0000745E EBF5                <2> 		jmp showstring2
  9674                              <2> .notnull:
  9675 00007460 3CC0                <2> 		cmp al, 0xC0
  9676 00007462 7231                <2> 		jb .doneutf
  9677 00007464 3CE0                <2> 		cmp al, 0xE0
  9678 00007466 721A                <2> 		jb .two
  9679 00007468 46                  <2> 		inc esi
  9680 00007469 668B1E              <2> 		mov bx, [esi]
  9681 0000746C 46                  <2> 		inc esi
  9682 0000746D C0E004              <2> 		shl al, 4
  9683 00007470 66C1E302            <2> 		shl bx, 2
  9684 00007474 C0EF02              <2> 		shr bh, 2
  9685 00007477 66C1EB02            <2> 		shr bx, 2
  9686 0000747B 08C7                <2> 		or bh, al
  9687 0000747D 6689D8              <2> 		mov ax, bx
  9688 00007480 EB13                <2> 		jmp .doneutf
  9689                              <2> 	.two:
  9690 00007482 8A3E                <2> 		mov bh, [esi]
  9691 00007484 46                  <2> 		inc esi
  9692 00007485 8A1E                <2> 		mov bl, [esi]
  9693 00007487 66C1E302            <2> 		shl bx, 2
  9694 0000748B C0EF02              <2> 		shr bh, 2
  9695 0000748E 66C1EB02            <2> 		shr bx, 2
  9696 00007492 6689D8              <2> 		mov ax, bx
  9697                              <2> 	.doneutf:
  9698 00007495 6683F800            <2> 		cmp ax, 0
  9699 00007499 741B                <2> 		je doneshowstring
  9700 0000749B 46                  <2> 		inc esi
  9701 0000749C 56                  <2> 		push esi
  9702 0000749D 668B1D[BE740000]    <2> 		mov bx, [colorfont2]
  9703 000074A4 E826000000          <2> 		call showfontvesa
  9704 000074A9 6683F80A            <2> 		cmp ax, 10
  9705 000074AD 7404                <2> 		je noproceedshst
  9706 000074AF 6683C208            <2> 		add dx, 8
  9707                              <2> 	noproceedshst:
  9708 000074B3 5E                  <2> 		pop esi
  9709 000074B4 EB9F                <2> 		jmp showstring2
  9710                              <2> 	doneshowstring:
  9711 000074B6 C605[7B7C0000]00    <2> 		mov byte [mouseselecton], 0
  9712 000074BD C3                  <2> 		ret
  9713                              <2> 
  9714 000074BE FFFF                <2> colorfont2 dw 0xFFFF
  9715 000074C0 00                  <2> colorcache db 0
  9716                              <2> 
  9717 000074C1 02                  <2> resolutionbytes db 2
  9718 000074C2 0000                <2> posxvesa dw 0
  9719 000074C4 0000                <2> posyvesa dw 0
  9720 000074C6 FFFF                <2> colorfont dw 0xFFFF
  9721                              <2> savefontvesa:		;same rules as showfontvesa
  9722 000074C8 C605[7A7C0000]01    <2> 	mov byte [savefonton], 1
  9723                              <2> showfontvesa:		;position in (dx,cx), color in bx, char in ax
  9724 000074CF 663DFF00            <2> 	cmp ax, 255
  9725 000074D3 7501                <2> 	jne nostopshowfont
  9726 000074D5 C3                  <2> 	ret
  9727                              <2> nostopshowfont:
  9728 000074D6 55                  <2> 	push ebp
  9729 000074D7 66890D[C4740000]    <2> 	mov [posyvesa], cx
  9730 000074DE 6683F80A            <2> 	cmp ax, 10
  9731 000074E2 0F8423000000        <2> 	je near goodvesafontx
  9732 000074E8 31C9                <2> 	xor ecx, ecx
  9733 000074EA 668B0D[1A560000]    <2> 	mov cx, [resolutionx2]
  9734 000074F1 6639CA              <2> 	cmp dx, cx
  9735 000074F4 7615                <2> 	jbe goodvesafontx
  9736 000074F6 6631D2              <2> 	xor dx, dx
  9737 000074F9 668B0D[C4740000]    <2> 	mov cx, [posyvesa]
  9738 00007500 6683C110            <2> 	add cx, 16
  9739 00007504 66890D[C4740000]    <2> 	mov [posyvesa], cx
  9740                              <2> goodvesafontx:
  9741 0000750B 668B0D[C4740000]    <2> 	mov cx, [posyvesa]
  9742 00007512 668915[C2740000]    <2> 	mov [posxvesa], dx
  9743 00007519 8B3D[42550000]      <2> 	mov edi, [physbaseptr]
  9744 0000751F 66891D[C6740000]    <2> 	mov [colorfont], bx
  9745 00007526 668B2D[C6740000]    <2> 	mov bp, [colorfont]
  9746 0000752D 31DB                <2> 	xor ebx, ebx
  9747 0000752F 6689C3              <2> 	mov bx, ax
  9748 00007532 31C0                <2> 	xor eax, eax
  9749 00007534 6689D8              <2> 	mov ax, bx
  9750 00007537 6689D3              <2> 	mov bx, dx
  9751 0000753A 89DA                <2> 	mov edx, ebx
  9752 0000753C 31DB                <2> 	xor ebx, ebx
  9753 0000753E 6683F900            <2> 	cmp cx, 0
  9754 00007542 7414                <2> 	je vesaposloopdn
  9755 00007544 668B1D[1A560000]    <2> 	mov bx, [resolutionx2]
  9756                              <2> vesaposloop:
  9757 0000754B 52                  <2> 	push edx
  9758 0000754C 50                  <2> 	push eax
  9759 0000754D 31C0                <2> 	xor eax, eax
  9760 0000754F 6689C8              <2> 	mov ax, cx
  9761 00007552 F7E3                <2> 	mul ebx
  9762 00007554 01C7                <2> 	add edi, eax
  9763 00007556 58                  <2> 	pop eax
  9764 00007557 5A                  <2> 	pop edx
  9765                              <2> vesaposloopdn:
  9766 00007558 01D7                <2> 	add edi, edx
  9767 0000755A BE[69870000]        <2> 	mov esi, fonts
  9768                              <2> findfontvesa:
  9769 0000755F 6683F80A            <2> 	cmp ax, 10
  9770 00007563 0F84E4000000        <2> 	je near nwlinevesa
  9771 00007569 C1E004              <2> 	shl eax, 4
  9772 0000756C 01C6                <2> 	add esi, eax
  9773 0000756E C1E804              <2> 	shr eax, 4
  9774 00007571 81FE[69870300]      <2> 	cmp esi, fontend
  9775 00007577 0F83A4000000        <2> 	jae near donefontvesa
  9776 0000757D 4E                  <2> 	dec esi
  9777                              <2> foundfontvesa:
  9778 0000757E 46                  <2> 	inc esi
  9779 0000757F 803D[7A7C0000]01    <2> 	cmp byte [savefonton], 1
  9780 00007586 0F84DF000000        <2> 	je near vesafontsaver
  9781 0000758C 30C9                <2> 	xor cl, cl
  9782 0000758E 8A06                <2> 	mov al, [esi]
  9783 00007590 668B15[1A560000]    <2> 	mov dx, [resolutionx2]
  9784 00007597 662B15[C2740000]    <2> 	sub dx, [posxvesa]
  9785 0000759E 6683FA10            <2> 	cmp dx, 16
  9786 000075A2 7708                <2> 	ja paintfontvesa
  9787 000075A4 D0EA                <2> 	shr dl, 1
  9788 000075A6 8815[4C760000]      <2> 	mov [charwidth], dl
  9789                              <2> paintfontvesa:
  9790 000075AC B201                <2> 	mov dl, 1
  9791 000075AE 20C2                <2> 	and dl, al
  9792 000075B0 803D[797C0000]01    <2> 	cmp byte [showcursorfonton], 1
  9793 000075B7 0F842B000000        <2> 	je near nodelpaintedfont
  9794 000075BD 803D[797C0000]02    <2> 	cmp byte [showcursorfonton], 2
  9795 000075C4 0F850E000000        <2> 	jne near noswitchcursorfonton
  9796 000075CA 80FA00              <2> 	cmp dl, 0
  9797 000075CD 0F841D000000        <2> 	je near nopixelset
  9798 000075D3 66892F              <2> 	mov [edi], bp
  9799 000075D6 EB18                <2> 	jmp nopixelset
  9800                              <2> noswitchcursorfonton:
  9801 000075D8 3215[7B7C0000]      <2> 	xor dl, [mouseselecton]
  9802 000075DE 668B1D[0B6E0000]    <2> 	mov bx, [background]
  9803 000075E5 66891F              <2> 	mov [edi], bx
  9804                              <2> nodelpaintedfont:
  9805 000075E8 80FA00              <2> 	cmp dl, 0
  9806 000075EB 7403                <2> 	je nopixelset
  9807 000075ED 66892F              <2> 	mov [edi], bp
  9808                              <2> nopixelset:
  9809 000075F0 83C702              <2> 	add edi, 2
  9810 000075F3 D0C0                <2> 	rol al, 1
  9811 000075F5 FEC1                <2> 	inc cl
  9812 000075F7 3A0D[4C760000]      <2> 	cmp cl, [charwidth]
  9813 000075FD 72AD                <2> 	jb paintfontvesa
  9814 000075FF FEC5                <2> 	inc ch
  9815 00007601 31D2                <2> 	xor edx, edx
  9816 00007603 668B15[1A560000]    <2> 	mov dx, [resolutionx2]
  9817 0000760A 01D7                <2> 	add edi, edx
  9818 0000760C 31D2                <2> 	xor edx, edx
  9819 0000760E 8A15[4C760000]      <2> 	mov dl, [charwidth]
  9820 00007614 00D2                <2> 	add dl, dl
  9821 00007616 29D7                <2> 	sub edi, edx
  9822 00007618 80FD10              <2> 	cmp ch, 16
  9823 0000761B 0F825DFFFFFF        <2> 	jb foundfontvesa
  9824                              <2> donefontvesa:
  9825 00007621 C605[4C760000]08    <2> 	mov byte [charwidth], 8
  9826 00007628 668B15[C2740000]    <2> 	mov dx, [posxvesa]
  9827 0000762F 8A1D[4C760000]      <2> 	mov bl, [charwidth]
  9828 00007635 30FF                <2> 	xor bh, bh
  9829 00007637 6601DA              <2> 	add dx, bx
  9830 0000763A 6689EB              <2> 	mov bx, bp
  9831 0000763D 668B0D[C4740000]    <2> 	mov cx, [posyvesa]
  9832 00007644 883D[7A7C0000]      <2> 	mov [savefonton], bh
  9833 0000764A 5D                  <2> 	pop ebp
  9834 0000764B C3                  <2> 	ret
  9835 0000764C 08                  <2> charwidth db 8
  9836                              <2> nwlinevesa:
  9837 0000764D 6631D2              <2> 	xor dx, dx
  9838 00007650 668915[C2740000]    <2> 	mov [posxvesa], dx
  9839 00007657 668B0D[C4740000]    <2> 	mov cx, [posyvesa]
  9840 0000765E 6683C110            <2> 	add cx, 16
  9841 00007662 66890D[C4740000]    <2> 	mov [posyvesa], cx
  9842 00007669 EBB6                <2> 	jmp donefontvesa
  9843                              <2> vesafontsaver:
  9844 0000766B 30C0                <2> 	xor al, al
  9845 0000766D 30C9                <2> 	xor cl, cl
  9846                              <2> vesafontsaver2:
  9847 0000766F 66392F              <2> 	cmp [edi], bp
  9848 00007672 7426                <2> 	je colorfontmatch
  9849                              <2> donecolormatch:
  9850 00007674 83C702              <2> 	add edi, 2
  9851 00007677 D0C0                <2> 	rol al, 1
  9852 00007679 FEC1                <2> 	inc cl
  9853 0000767B 80F908              <2> 	cmp cl, 8
  9854 0000767E 72EF                <2> 	jb vesafontsaver2
  9855 00007680 8806                <2> 	mov [esi], al
  9856 00007682 46                  <2> 	inc esi
  9857 00007683 FEC5                <2> 	inc ch
  9858 00007685 31D2                <2> 	xor edx, edx
  9859 00007687 668B15[1A560000]    <2> 	mov dx, [resolutionx2]
  9860 0000768E 01D7                <2> 	add edi, edx
  9861 00007690 83EF10              <2> 	sub edi, 16
  9862 00007693 80FD10              <2> 	cmp ch, 16
  9863 00007696 72D3                <2> 	jb vesafontsaver
  9864 00007698 EB87                <2> 	jmp donefontvesa
  9865                              <2> colorfontmatch:
  9866 0000769A 0401                <2> 	add al, 1
  9867 0000769C EBD6                <2> 	jmp donecolormatch
  9868                              <1> %include "source/gui/window.asm"
  9869 0000769E 0000                <2> winvcopystx dw 0
  9870 000076A0 0000                <2> winvcopysty dw 0
  9871 000076A2 0000                <2> winvcopydx dw 0
  9872 000076A4 0000                <2> winvcopycx dw 0
  9873 000076A6 FFFF0000            <2> windowcolor dw 0xFFFF,0
  9874 000076AA 00000000            <2> windowbufloc: dd 0
  9875 000076AE 00000000            <2> windowvideobuf dd 0
  9876 000076B2 00000000            <2> windowvideobuf2 dd 0
  9877 000076B6 00000000            <2> windowinfobuf dd 0
  9878 000076BA 0000                <2> termcol dw 0
  9879 000076BC 00000000            <2> wincopyendpos dd 0
  9880                              <2> 
  9881                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9882 000076C0 C605[81230000]01    <2> 		mov byte [termguion], 1
  9883 000076C7 6683C110            <2> 		add cx, 16
  9884 000076CB 668915[9E760000]    <2> 		mov [winvcopystx], dx
  9885 000076D2 66890D[A0760000]    <2> 		mov [winvcopysty], cx
  9886 000076D9 8935[B6760000]      <2> 		mov [windowinfobuf], esi
  9887 000076DF 668B16              <2> 		mov dx, [esi]
  9888 000076E2 668B4E02            <2> 		mov cx, [esi + 2]
  9889 000076E6 31C0                <2> 		xor eax, eax
  9890 000076E8 31DB                <2> 		xor ebx, ebx
  9891 000076EA 6689D0              <2> 		mov ax, dx
  9892 000076ED 6689CB              <2> 		mov bx, cx
  9893 000076F0 66C1E803            <2> 		shr ax, 3
  9894 000076F4 66C1EB04            <2> 		shr bx, 4
  9895 000076F8 66A3[BA760000]      <2> 		mov [termcol], ax
  9896 000076FE A2[5A250000]        <2> 		mov [charxy], al
  9897 00007703 881D[5B250000]      <2> 		mov [charxy + 1], bl
  9898 00007709 8B7E04              <2> 		mov edi, [esi + 4]
  9899 0000770C 893D[A6760000]      <2> 		mov [windowcolor], edi
  9900 00007712 8B7E0C              <2> 		mov edi, [esi + 12]
  9901 00007715 893D[B2760000]      <2> 		mov [windowvideobuf2], edi
  9902 0000771B 8B7E08              <2> 		mov edi, [esi + 8]
  9903 0000771E 893D[AE760000]      <2> 		mov [windowvideobuf], edi
  9904 00007724 83FB00              <2> 		cmp ebx, 0
  9905 00007727 0F842B050000        <2> 		je near donewincopynow
  9906                              <2> 	findendposwin:
  9907 0000772D C1E002              <2> 		shl eax, 2
  9908 00007730 31D2                <2> 		xor edx, edx
  9909 00007732 F7E3                <2> 		mul ebx
  9910 00007734 01C7                <2> 		add edi, eax
  9911 00007736 893D[BC760000]      <2> 		mov [wincopyendpos], edi
  9912 0000773C 31FF                <2> 		xor edi, edi
  9913 0000773E 6631C0              <2> 		xor ax, ax
  9914 00007741 6631DB              <2> 		xor bx, bx
  9915 00007744 6601D2              <2> 		add dx, dx
  9916 00007747 668915[A2760000]    <2> 		mov [winvcopydx], dx
  9917 0000774E 66890D[A4760000]    <2> 		mov [winvcopycx], cx
  9918 00007755 668B0D[A0760000]    <2> 		mov cx, [winvcopysty]
  9919 0000775C 6683E910            <2> 		sub cx, 16
  9920 00007760 668B15[9E760000]    <2> 		mov dx, [winvcopystx]
  9921 00007767 C605[82230000]00    <2> 		mov byte [termcopyon], 0
  9922 0000776E B403                <2> 		mov ah, 3
  9923 00007770 E84C0A0000          <2> 		call graphicsadd
  9924                              <2> 	showwindow2:
  9925 00007775 6683C110            <2> 		add cx, 16
  9926 00007779 668915[9E760000]    <2> 		mov [winvcopystx], dx
  9927 00007780 66890D[A0760000]    <2> 		mov [winvcopysty], cx
  9928 00007787 668B16              <2> 		mov dx, [esi]
  9929 0000778A 668B4E02            <2> 		mov cx, [esi + 2]
  9930 0000778E 6601D2              <2> 		add dx, dx
  9931 00007791 668915[A2760000]    <2> 		mov [winvcopydx], dx
  9932 00007798 66890D[A4760000]    <2> 		mov [winvcopycx], cx
  9933 0000779F E818000000          <2> 		call reloadwindowtitle
  9934 000077A4 803D[A8810000]01    <2> 		cmp byte [windrag], 1
  9935 000077AB 0F83B6040000        <2> 		jae near forgetresetstuff
  9936 000077B1 8B3D[AA760000]      <2> 		mov edi, [windowbufloc]
  9937 000077B7 E957020000          <2> 		jmp windowvideocopyset
  9938                              <2> 		
  9939                              <2> 	reloadwindowtitle:
  9940 000077BC 8B3D[AA760000]      <2> 		mov edi, [windowbufloc]
  9941 000077C2 31D2                <2> 		xor edx, edx
  9942 000077C4 668B15[1A560000]    <2> 		mov dx, [resolutionx2]
  9943 000077CB C1E204              <2> 		shl edx, 4
  9944 000077CE 29D7                <2> 		sub edi, edx
  9945 000077D0 803D[82230000]00    <2> 		cmp byte [termcopyon], 0
  9946 000077D7 7530                <2> 		jne nocleartitlebarpos
  9947 000077D9 8B3D[42550000]      <2> 		mov edi, [physbaseptr]
  9948 000077DF 31D2                <2> 		xor edx, edx
  9949 000077E1 668B15[9E760000]    <2> 		mov dx, [winvcopystx]
  9950 000077E8 01D7                <2> 		add edi, edx
  9951 000077EA 31C9                <2> 		xor ecx, ecx
  9952 000077EC 668B0D[A0760000]    <2> 		mov cx, [winvcopysty]
  9953 000077F3 6683E910            <2> 		sub cx, 16
  9954 000077F7 6683F900            <2> 		cmp cx, 0
  9955 000077FB 740C                <2> 		je nocleartitlebarpos
  9956                              <2> 	cleartitlebarpos:
  9957 000077FD 31C0                <2> 		xor eax, eax
  9958 000077FF 66A1[1A560000]      <2> 		mov ax, [resolutionx2]
  9959 00007805 F7E1                <2> 		mul ecx
  9960 00007807 01C7                <2> 		add edi, eax
  9961                              <2> 	nocleartitlebarpos:
  9962 00007809 66B91000            <2> 		mov cx, 16
  9963 0000780D 668B15[A2760000]    <2> 		mov dx, [winvcopydx]
  9964 00007814 6683F900            <2> 		cmp cx, 0
  9965 00007818 0F8441000000        <2> 		je near canceltitlebarput
  9966 0000781E 6683FA00            <2> 		cmp dx, 0
  9967 00007822 0F8437000000        <2> 		je near canceltitlebarput
  9968                              <2> 	titlebarput:
  9969 00007828 66A1[A6760000]      <2> 		mov ax, [windowcolor]
  9970 0000782E 668907              <2> 		mov [edi], ax
  9971 00007831 6683EA02            <2> 		sub dx, 2
  9972 00007835 83C702              <2> 		add edi, 2
  9973 00007838 6683FA00            <2> 		cmp dx, 0
  9974 0000783C 75EA                <2> 		jne titlebarput
  9975 0000783E 31D2                <2> 		xor edx, edx
  9976 00007840 668B15[1A560000]    <2> 		mov dx, [resolutionx2]
  9977 00007847 6649                <2> 		dec cx
  9978 00007849 662B15[A2760000]    <2> 		sub dx, [winvcopydx]
  9979 00007850 01D7                <2> 		add edi, edx
  9980 00007852 668B15[A2760000]    <2> 		mov dx, [winvcopydx]
  9981 00007859 6683F900            <2> 		cmp cx, 0
  9982 0000785D 75C9                <2> 		jne titlebarput
  9983                              <2> 	canceltitlebarput:
  9984 0000785F 893D[AA760000]      <2> 		mov [windowbufloc], edi
  9985 00007865 803D[82230000]02    <2> 		cmp byte [termcopyon], 2
  9986 0000786C 0F8412010000        <2> 		je near winvcpst
  9987 00007872 668B1D[0B6E0000]    <2> 		mov bx, [background]
  9988 00007879 6653                <2> 		push bx
  9989 0000787B 6631DB              <2> 		xor bx, bx
  9990 0000787E 66891D[0B6E0000]    <2> 		mov [background], bx
  9991 00007885 6631C0              <2> 		xor ax, ax
  9992 00007888 83C610              <2> 		add esi, 16
  9993 0000788B 668B15[9E760000]    <2> 		mov dx, [winvcopystx]
  9994 00007892 668B0D[A0760000]    <2> 		mov cx, [winvcopysty]
  9995 00007899 6683E910            <2> 		sub cx, 16
  9996 0000789D 668B1D[A6760000]    <2> 		mov bx, [windowcolor]
  9997 000078A4 C605[7B7C0000]01    <2> 		mov byte [mouseselecton], 1
  9998 000078AB E8A5FBFFFF          <2> 		call showstring2	;Show window title
  9999 000078B0 8B35[592C0000]      <2> 		mov esi, [usercache]
 10000 000078B6 6683C210            <2> 		add dx, 16
 10001 000078BA C605[7B7C0000]01    <2> 		mov byte [mouseselecton], 1
 10002 000078C1 E88FFBFFFF          <2> 		call showstring2	;Show user name
 10003 000078C6 BE[DA840000]        <2> 		mov esi, computer
 10004 000078CB C605[7B7C0000]01    <2> 		mov byte [mouseselecton], 1
 10005 000078D2 E87EFBFFFF          <2> 		call showstring2	;Show computer name
 10006 000078D7 66B85800            <2> 		mov ax, "X"
 10007 000078DB 66BB00F8            <2> 		mov bx, 1111100000000000b
 10008 000078DF 668B15[9E760000]    <2> 		mov dx, [winvcopystx]
 10009 000078E6 668B0D[A0760000]    <2> 		mov cx, [winvcopysty]
 10010 000078ED 6683E910            <2> 		sub cx, 16
 10011 000078F1 6683EA10            <2> 		sub dx, 16
 10012 000078F5 660315[A2760000]    <2> 		add dx, [winvcopydx]
 10013 000078FC C605[7B7C0000]01    <2> 		mov byte [mouseselecton], 1
 10014 00007903 663B15[1A560000]    <2> 		cmp dx, [resolutionx2]
 10015 0000790A 7305                <2> 		jae .nox
 10016 0000790C E8BEFBFFFF          <2> 		call showfontvesa
 10017                              <2> .nox:
 10018 00007911 668B1D[0B6E0000]    <2> 		mov bx, [background]
 10019 00007918 6683EA18            <2> 		sub dx, 24
 10020 0000791C 66B82B00            <2> 		mov ax, "+"
 10021 00007920 66BBE007            <2> 		mov bx, 0000011111100000b
 10022 00007924 C605[7B7C0000]01    <2> 		mov byte [mouseselecton], 1
 10023 0000792B 663B15[1A560000]    <2> 		cmp dx, [resolutionx2]
 10024 00007932 7305                <2> 		jae .noplus
 10025 00007934 E896FBFFFF          <2> 		call showfontvesa
 10026                              <2> .noplus:
 10027 00007939 6683EA18            <2> 		sub dx, 24
 10028 0000793D 66B82D00            <2> 		mov ax, "-"
 10029 00007941 66BBE0FF            <2> 		mov bx, 1111111111100000b
 10030 00007945 C605[7B7C0000]01    <2> 		mov byte [mouseselecton], 1
 10031 0000794C 663B15[1A560000]    <2> 		cmp dx, [resolutionx2]
 10032 00007953 7305                <2> 		jae .nominus
 10033 00007955 E875FBFFFF          <2> 		call showfontvesa
 10034                              <2> .nominus:
 10035 0000795A 6683EA18            <2> 		sub dx, 24
 10036 0000795E 66B83F00            <2> 		mov ax, "?"
 10037 00007962 66BB1F00            <2> 		mov bx, 0000000000011111b
 10038 00007966 C605[7B7C0000]01    <2> 		mov byte [mouseselecton], 1
 10039 0000796D 663B15[1A560000]    <2> 		cmp dx, [resolutionx2]
 10040 00007974 7305                <2> 		jae .noquestion
 10041 00007976 E854FBFFFF          <2> 		call showfontvesa
 10042                              <2> .noquestion:
 10043 0000797B 665B                <2> 		pop bx
 10044 0000797D 66891D[0B6E0000]    <2> 		mov [background], bx
 10045                              <2> 	winvcpst:
 10046 00007984 C3                  <2> 		ret
 10047                              <2> 
 10048                              <2> 	windowvideocopy:
 10049 00007985 8B35[B6760000]      <2> 		mov esi, [windowinfobuf]
 10050 0000798B 668B16              <2> 		mov dx, [esi]
 10051 0000798E 668B4E02            <2> 		mov cx, [esi + 2]
 10052 00007992 8B7E04              <2> 		mov edi, [esi + 4]
 10053 00007995 893D[A6760000]      <2> 		mov [windowcolor], edi
 10054 0000799B 8B7E08              <2> 		mov edi, [esi + 8]
 10055 0000799E 8B5E0C              <2> 		mov ebx, [esi + 12]
 10056 000079A1 893D[AE760000]      <2> 		mov [windowvideobuf], edi
 10057 000079A7 891D[B2760000]      <2> 		mov [windowvideobuf2], ebx
 10058 000079AD 31C0                <2> 		xor eax, eax
 10059 000079AF 31DB                <2> 		xor ebx, ebx
 10060 000079B1 6689D0              <2> 		mov ax, dx
 10061 000079B4 6689CB              <2> 		mov bx, cx
 10062 000079B7 66C1E803            <2> 		shr ax, 3
 10063 000079BB 66C1EB04            <2> 		shr bx, 4
 10064 000079BF 66A3[BA760000]      <2> 		mov [termcol], ax
 10065 000079C5 A2[5A250000]        <2> 		mov [charxy], al
 10066 000079CA 881D[5B250000]      <2> 		mov [charxy + 1], bl
 10067 000079D0 8B3D[AA760000]      <2> 		mov edi, [windowbufloc]
 10068 000079D6 3B3D[42550000]      <2> 		cmp edi, [physbaseptr]
 10069 000079DC 0F8331000000        <2> 		jae near windowvideocopyset
 10070 000079E2 31C9                <2> 		xor ecx, ecx
 10071 000079E4 31D2                <2> 		xor edx, edx
 10072 000079E6 668B15[9E760000]    <2> 		mov dx, [winvcopystx]
 10073 000079ED 668B0D[A0760000]    <2> 		mov cx, [winvcopysty]
 10074 000079F4 8B3D[42550000]      <2> 		mov edi, [physbaseptr]
 10075 000079FA 01D7                <2> 		add edi, edx
 10076 000079FC 83F900              <2> 		cmp ecx, 0
 10077 000079FF 7412                <2> 		je windowvideocopyset
 10078                              <2> 	yrescopylp:
 10079 00007A01 31C0                <2> 		xor eax, eax
 10080 00007A03 66A1[1A560000]      <2> 		mov ax, [resolutionx2]
 10081 00007A09 F7E1                <2> 		mul ecx
 10082 00007A0B 01C7                <2> 		add edi, eax
 10083 00007A0D 893D[AA760000]      <2> 		mov [windowbufloc], edi
 10084                              <2> 	windowvideocopyset:
 10085 00007A13 6631C9              <2> 		xor cx, cx
 10086 00007A16 6649                <2> 		dec cx
 10087 00007A18 66890D[6F7C0000]    <2> 		mov [charposline], cx
 10088 00007A1F 89FE                <2> 		mov esi, edi
 10089 00007A21 83EE10              <2> 		sub esi, 16
 10090 00007A24 31D2                <2> 		xor edx, edx
 10091 00007A26 668B15[1A560000]    <2> 		mov dx, [resolutionx2]
 10092 00007A2D C1E204              <2> 		shl edx, 4
 10093 00007A30 01D6                <2> 		add esi, edx
 10094 00007A32 8B3D[AE760000]      <2> 		mov edi, [windowvideobuf]
 10095 00007A38 83EF04              <2> 		sub edi, 4
 10096 00007A3B 893D[717C0000]      <2> 		mov [charposvbuf], edi
 10097 00007A41 E912010000          <2> 		jmp nextcharwin
 10098                              <2> 	win.write:	;adjusted this to use alpha
 10099                              <2> 				;5R, 6G, 5B
 10100                              <2> %ifdef gui.alphablending
 10101 00007A46 56                  <2> 		push esi
 10102 00007A47 6653                <2> 		push bx
 10103 00007A49 6651                <2> 		push cx
 10104 00007A4B 6652                <2> 		push dx
 10105                              <2> %ifdef gui.background
 10106 00007A4D 89FE                <2> 		mov esi, edi
 10107 00007A4F 2B35[42550000]      <2> 		sub esi, [physbaseptr]
 10108 00007A55 0335[E36D0000]      <2> 		add esi, [backgroundimage]
 10109 00007A5B 833D[E36D0000]00    <2> 		cmp dword [backgroundimage], 0
 10110 00007A62 7505                <2> 		jne .red
 10111                              <2> %endif
 10112 00007A64 BE[0B6E0000]        <2> 		mov esi, background
 10113                              <2> 	.red:
 10114 00007A69 668B0E              <2> 		mov cx, [esi]
 10115 00007A6C 66C1E90B            <2> 		shr cx, 11
 10116 00007A70 6689C3              <2> 		mov bx, ax
 10117 00007A73 66C1EB0B            <2> 		shr bx, 11
 10118 00007A77 6601D9              <2> 		add cx, bx
 10119 00007A7A 6601D9              <2> 		add cx, bx
 10120 00007A7D 6601D9              <2> 		add cx, bx
 10121 00007A80 66C1E902            <2> 		shr cx, 2
 10122 00007A84 66C1E10B            <2> 		shl cx, 11
 10123 00007A88 6689CA              <2> 		mov dx, cx
 10124                              <2> 	.green:
 10125 00007A8B 668B0E              <2> 		mov cx, [esi]
 10126 00007A8E 66C1E105            <2> 		shl cx, 5
 10127 00007A92 66C1E90A            <2> 		shr cx, 10
 10128 00007A96 6689C3              <2> 		mov bx, ax
 10129 00007A99 66C1E305            <2> 		shl bx, 5
 10130 00007A9D 66C1EB0A            <2> 		shr bx, 10
 10131 00007AA1 6601D9              <2> 		add cx, bx
 10132 00007AA4 6601D9              <2> 		add cx, bx
 10133 00007AA7 6601D9              <2> 		add cx, bx
 10134 00007AAA 66C1E902            <2> 		shr cx, 2
 10135 00007AAE 66C1E105            <2> 		shl cx, 5
 10136 00007AB2 6601CA              <2> 		add dx, cx
 10137                              <2> 	.blue:
 10138 00007AB5 668B0E              <2> 		mov cx, [esi]
 10139 00007AB8 66C1E10B            <2> 		shl cx, 11
 10140 00007ABC 66C1E90B            <2> 		shr cx, 11
 10141 00007AC0 6689C3              <2> 		mov bx, ax
 10142 00007AC3 66C1E30B            <2> 		shl bx, 11
 10143 00007AC7 66C1EB0B            <2> 		shr bx, 11
 10144 00007ACB 6601D9              <2> 		add cx, bx
 10145 00007ACE 6601D9              <2> 		add cx, bx
 10146 00007AD1 6601D9              <2> 		add cx, bx
 10147 00007AD4 66C1E902            <2> 		shr cx, 2
 10148 00007AD8 6601CA              <2> 		add dx, cx
 10149 00007ADB 668917              <2> 		mov [edi], dx
 10150 00007ADE 665A                <2> 		pop dx
 10151 00007AE0 6659                <2> 		pop cx
 10152 00007AE2 665B                <2> 		pop bx
 10153 00007AE4 5E                  <2> 		pop esi
 10154                              <2> %else
 10155                              <2> 		mov [edi], ax
 10156                              <2> %endif
 10157 00007AE5 C3                  <2> 		ret
 10158                              <2> 	copywindow:
 10159 00007AE6 B201                <2> 		mov dl, 1
 10160 00007AE8 D0C6                <2> 		rol dh, 1
 10161 00007AEA 20F2                <2> 		and dl, dh
 10162 00007AEC 66813D[C0740000]80- <2> 		cmp word [colorcache], 0x80
 10163 00007AF4 00                  <2>
 10164 00007AF5 731D                <2> 		jae switchwincolors
 10165 00007AF7 66A1[A8760000]      <2> 		mov ax, [windowcolor + 2]
 10166 00007AFD E844FFFFFF          <2> 		call win.write
 10167 00007B02 80FA00              <2> 		cmp dl, 0
 10168 00007B05 7428                <2> 		je nowritewin
 10169 00007B07 66A1[A6760000]      <2> 		mov ax, [windowcolor]
 10170 00007B0D E834FFFFFF          <2> 		call win.write
 10171 00007B12 EB1B                <2> 		jmp nowritewin
 10172                              <2> 	switchwincolors:
 10173 00007B14 66A1[A6760000]      <2> 		mov ax, [windowcolor]
 10174 00007B1A E827FFFFFF          <2> 		call win.write
 10175 00007B1F 80FA00              <2> 		cmp dl, 0
 10176 00007B22 740B                <2> 		je nowritewin
 10177 00007B24 66A1[A8760000]      <2> 		mov ax, [windowcolor + 2]
 10178 00007B2A E817FFFFFF          <2> 		call win.write
 10179                              <2> 	nowritewin:
 10180 00007B2F 83C702              <2> 		add edi, 2
 10181 00007B32 FEC1                <2> 		inc cl
 10182 00007B34 80F908              <2> 		cmp cl, 8
 10183 00007B37 75AD                <2> 		jne copywindow
 10184 00007B39 43                  <2> 		inc ebx
 10185 00007B3A 30C9                <2> 		xor cl, cl
 10186 00007B3C 31D2                <2> 		xor edx, edx
 10187 00007B3E 668B15[1A560000]    <2> 		mov dx, [resolutionx2]
 10188 00007B45 01D6                <2> 		add esi, edx
 10189 00007B47 89F7                <2> 		mov edi, esi
 10190 00007B49 8AB3[69870000]      <2> 		mov dh, [fonts + ebx]
 10191 00007B4F D0CE                <2> 		ror dh, 1
 10192 00007B51 FEC5                <2> 		inc ch
 10193 00007B53 80FD10              <2> 		cmp ch, 16
 10194 00007B56 758E                <2> 		jne copywindow
 10195                              <2> 	nextcharwin:
 10196 00007B58 6631C9              <2> 		xor cx, cx
 10197 00007B5B 8B3D[717C0000]      <2> 		mov edi, [charposvbuf]
 10198 00007B61 83C704              <2> 		add edi, 4
 10199 00007B64 3B3D[BC760000]      <2> 		cmp edi, [wincopyendpos]
 10200 00007B6A 0F83E8000000        <2> 		jae near donewincopynow
 10201 00007B70 668B5F02            <2> 		mov bx, [edi + 2]
 10202 00007B74 6683FB00            <2> 		cmp bx, 0
 10203 00007B78 7508                <2> 		jne nofixcolorwin
 10204 00007B7A 66BB0700            <2> 		mov bx, 7
 10205 00007B7E 66895F02            <2> 		mov [edi + 2], bx
 10206                              <2> 	nofixcolorwin:
 10207 00007B82 66891D[C0740000]    <2> 		mov [colorcache], bx
 10208 00007B89 8B1F                <2> 		mov ebx, [edi]
 10209 00007B8B 893D[717C0000]      <2> 		mov [charposvbuf], edi
 10210 00007B91 833D[B2760000]00    <2> 		cmp dword [windowvideobuf2], 0
 10211 00007B98 7452                <2> 		je noskipcharcopy
 10212 00007B9A 2B3D[AE760000]      <2> 		sub edi, [windowvideobuf]
 10213 00007BA0 033D[B2760000]      <2> 		add edi, [windowvideobuf2]
 10214 00007BA6 8B07                <2> 		mov eax, [edi]
 10215 00007BA8 39D8                <2> 		cmp eax, ebx
 10216 00007BAA 7540                <2> 		jne noskipcharcopy
 10217                              <2> 	skipcharcopy:
 10218 00007BAC 83C610              <2> 		add esi, 16
 10219 00007BAF 668B0D[6F7C0000]    <2> 		mov cx, [charposline]
 10220 00007BB6 6641                <2> 		inc cx
 10221 00007BB8 66890D[6F7C0000]    <2> 		mov [charposline], cx
 10222 00007BBF 663B0D[BA760000]    <2> 		cmp cx, [termcol]
 10223 00007BC6 7290                <2> 		jb nextcharwin
 10224 00007BC8 6631C9              <2> 		xor cx, cx
 10225 00007BCB 66890D[6F7C0000]    <2> 		mov [charposline], cx
 10226 00007BD2 31D2                <2> 		xor edx, edx
 10227 00007BD4 668B15[1A560000]    <2> 		mov dx, [resolutionx2]
 10228 00007BDB C1E204              <2> 		shl edx, 4
 10229 00007BDE 662B15[A2760000]    <2> 		sub dx, [winvcopydx]
 10230 00007BE5 01D6                <2> 		add esi, edx
 10231 00007BE7 E96CFFFFFF          <2> 		jmp nextcharwin
 10232                              <2> 	noskipcharcopy:
 10233 00007BEC 891F                <2> 		mov [edi], ebx
 10234 00007BEE 8B3D[717C0000]      <2> 		mov edi, [charposvbuf]
 10235 00007BF4 C1E310              <2> 		shl ebx, 16
 10236 00007BF7 C1EB0C              <2> 		shr ebx, 12
 10237 00007BFA 31D2                <2> 		xor edx, edx
 10238 00007BFC 668B15[1A560000]    <2> 		mov dx, [resolutionx2]
 10239 00007C03 C1E204              <2> 		shl edx, 4
 10240 00007C06 29D6                <2> 		sub esi, edx
 10241 00007C08 83C610              <2> 		add esi, 16
 10242 00007C0B 89F7                <2> 		mov edi, esi
 10243 00007C0D 668B0D[6F7C0000]    <2> 		mov cx, [charposline]
 10244 00007C14 6641                <2> 		inc cx
 10245 00007C16 663B0D[BA760000]    <2> 		cmp cx, [termcol]
 10246 00007C1D 7317                <2> 		jae fixwindowcopy
 10247 00007C1F 66890D[6F7C0000]    <2> 		mov [charposline], cx
 10248 00007C26 6631C9              <2> 		xor cx, cx
 10249 00007C29 8AB3[69870000]      <2> 		mov dh, [fonts + ebx]
 10250 00007C2F D0CE                <2> 		ror dh, 1
 10251 00007C31 E9B0FEFFFF          <2> 		jmp copywindow
 10252                              <2> fixwindowcopy:
 10253 00007C36 6631C9              <2> 		xor cx, cx
 10254 00007C39 66890D[6F7C0000]    <2> 		mov [charposline], cx
 10255 00007C40 662B15[A2760000]    <2> 		sub dx, [winvcopydx]
 10256 00007C47 01D6                <2> 		add esi, edx
 10257 00007C49 89F7                <2> 		mov edi, esi
 10258 00007C4B 8AB3[69870000]      <2> 		mov dh, [fonts + ebx]
 10259 00007C51 D0CE                <2> 		ror dh, 1
 10260 00007C53 E98EFEFFFF          <2> 		jmp copywindow
 10261                              <2> donewincopynow:
 10262 00007C58 803D[82230000]01    <2> 		cmp byte [termcopyon], 1
 10263 00007C5F 7506                <2> 		jne forgetresetstuff
 10264 00007C61 E8F6ACFFFF          <2> 		call switchtermcursor
 10265 00007C66 61                  <2> 		popa
 10266                              <2> forgetresetstuff:
 10267 00007C67 C605[82230000]00    <2> 		mov byte [termcopyon], 0
 10268 00007C6E C3                  <2> 		ret
 10269                              <2> 		
 10270 00007C6F 0000                <2> charposline dw 0
 10271 00007C71 00000000            <2> charposvbuf dw 0,0
 10272                              <1> 				
 10273 00007C75 00                  <1> copygui db 0
 10274 00007C76 00                  <1> graphicsset db 0
 10275 00007C77 0000                <1> graphicspos db 0,0
 10276 00007C79 00                  <1> showcursorfonton db 0
 10277 00007C7A 00                  <1> savefonton db 0
 10278 00007C7B 00                  <1> mouseselecton db 0
 10279                              <1> 
 10280 00007C7C 00                  <1> pbutton db 0
 10281 00007C7D 00                  <1> pLBUTTON db 0
 10282 00007C7E 00                  <1> pRBUTTON db 0
 10283 00007C7F 00000000            <1> dragging dw 0,0
 10284 00007C83 0000000000000000    <1> lastpos dw 0,0,0,0
 10285 00007C8B 00000000            <1> colorbuf dw 0,0
 10286                              <1> 	
 10287                              <1> 	clickicon:
 10288 00007C8F B001                <1> 		mov al, 1
 10289 00007C91 A2[7C7C0000]        <1> 		mov [pbutton], al
 10290 00007C96 A0[7D7C0000]        <1> 		mov al, [pLBUTTON]
 10291 00007C9B 2205[15590000]      <1> 		and al, [LBUTTON]
 10292 00007CA1 8A25[7E7C0000]      <1> 		mov ah, [pRBUTTON]
 10293 00007CA7 2225[16590000]      <1> 		and ah, [RBUTTON]
 10294 00007CAD 08E0                <1> 		or al, ah
 10295 00007CAF 3C00                <1> 		cmp al, 0
 10296 00007CB1 7415                <1> 		je nodragclick
 10297 00007CB3 833D[7F7C0000]01    <1> 		cmp dword [dragging], 1
 10298 00007CBA 732C                <1> 		jae dragclick
 10299 00007CBC C705[7F7C0000]0100- <1> 		mov dword [dragging], 1
 10300 00007CC4 0000                <1>
 10301 00007CC6 EB20                <1> 		jmp dragclick
 10302                              <1> 	nodragclick:
 10303 00007CC8 31C0                <1> 		xor eax, eax
 10304 00007CCA A3[7F7C0000]        <1> 		mov dword [dragging], eax
 10305 00007CCF A2[7C7C0000]        <1> 		mov [pbutton], al
 10306 00007CD4 A0[15590000]        <1> 		mov al, [LBUTTON]
 10307 00007CD9 A2[7D7C0000]        <1> 		mov [pLBUTTON], al
 10308 00007CDE A0[16590000]        <1> 		mov al, [RBUTTON]
 10309 00007CE3 A2[7E7C0000]        <1> 		mov [pRBUTTON], al
 10310                              <1> 	dragclick:
 10311 00007CE8 6631C0              <1> 		xor ax, ax
 10312 00007CEB BE[9CC80300]        <1> 		mov esi, graphicstable
 10313 00007CF0 C705[A4840000]0000- <1> 		mov dword [codepointer], 0
 10314 00007CF8 0000                <1>
 10315                              <1> 	clicon2:
 10316 00007CFA 31D2                <1> 		xor edx, edx
 10317 00007CFC 31C9                <1> 		xor ecx, ecx
 10318 00007CFE 66833E01            <1> 		cmp word [esi], 1
 10319 00007D02 0F8419000000        <1> 		je near iconselect
 10320 00007D08 66833E02            <1> 		cmp word [esi], 2
 10321 00007D0C 0F8465010000        <1> 		je near textselected
 10322 00007D12 66833E03            <1> 		cmp word [esi], 3
 10323 00007D16 0F84AF020000        <1> 		je near windowselect
 10324 00007D1C E9EB030000          <1> 		jmp nexticonsel
 10325                              <1> 	iconselect:
 10326 00007D21 668B5606            <1> 		mov dx, [esi + 6]
 10327 00007D25 6689D0              <1> 		mov ax, dx
 10328 00007D28 668B4E08            <1> 		mov cx, [esi + 8]
 10329 00007D2C 6689CB              <1> 		mov bx, cx
 10330 00007D2F 6683C320            <1> 		add bx, 32
 10331 00007D33 6601D0              <1> 		add ax, dx
 10332 00007D36 833D[7F7C0000]01    <1> 		cmp dword [dragging], 1
 10333 00007D3D 7469                <1> 		je dragicon
 10334 00007D3F 833D[7F7C0000]00    <1> 		cmp dword [dragging], 0
 10335 00007D46 740E                <1> 		je nodragiconcheck
 10336 00007D48 3935[7F7C0000]      <1> 		cmp dword [dragging], esi
 10337 00007D4E 0F85B8030000        <1> 		jne near nexticonsel
 10338 00007D54 EB52                <1> 		jmp dragicon
 10339                              <1> 	nodragiconcheck:
 10340 00007D56 663905[06580000]    <1> 		cmp [mousecursorposition], ax
 10341 00007D5D 0F82A9030000        <1> 		jb near nexticonsel
 10342 00007D63 6683C040            <1> 		add ax, 64
 10343 00007D67 663905[06580000]    <1> 		cmp [mousecursorposition], ax
 10344 00007D6E 0F8798030000        <1> 		ja near nexticonsel
 10345 00007D74 6629D0              <1> 		sub ax, dx
 10346 00007D77 66390D[08580000]    <1> 		cmp [mousecursorposition + 2], cx
 10347 00007D7E 0F8288030000        <1> 		jb near nexticonsel
 10348 00007D84 66391D[08580000]    <1> 		cmp [mousecursorposition + 2], bx
 10349 00007D8B 0F877B030000        <1> 		ja near nexticonsel
 10350 00007D91 668B460A            <1> 		mov ax, [esi + 10]
 10351 00007D95 6683E001            <1> 		and ax, 1
 10352 00007D99 6683F801            <1> 		cmp ax, 1
 10353 00007D9D 0F84B5000000        <1> 		je near unselecticon
 10354 00007DA3 E98D000000          <1> 		jmp nodragicon
 10355                              <1> 	dragicon:
 10356 00007DA8 663905[02580000]    <1> 		cmp [lastmouseposition], ax
 10357 00007DAF 0F8257030000        <1> 		jb near nexticonsel
 10358 00007DB5 6683C040            <1> 		add ax, 64
 10359 00007DB9 663905[02580000]    <1> 		cmp [lastmouseposition], ax
 10360 00007DC0 0F8746030000        <1> 		ja near nexticonsel
 10361 00007DC6 6629D0              <1> 		sub ax, dx
 10362 00007DC9 66390D[04580000]    <1> 		cmp [lastmouseposition + 2], cx
 10363 00007DD0 0F8236030000        <1> 		jb near nexticonsel
 10364 00007DD6 66391D[04580000]    <1> 		cmp [lastmouseposition + 2], bx
 10365 00007DDD 0F8729030000        <1> 		ja near nexticonsel
 10366 00007DE3 668B460A            <1> 		mov ax, [esi + 10]
 10367 00007DE7 2410                <1> 		and al, 00010000b
 10368 00007DE9 3C10                <1> 		cmp al, 00010000b
 10369 00007DEB 7448                <1> 		je nodragicon
 10370 00007DED 8935[7F7C0000]      <1> 		mov [dragging], esi
 10371 00007DF3 66D1E2              <1> 		shl dx, 1
 10372 00007DF6 662B15[02580000]    <1> 		sub dx, [lastmouseposition]
 10373 00007DFD 660315[06580000]    <1> 		add dx, [mousecursorposition]
 10374 00007E04 66D1EA              <1> 		shr dx, 1
 10375 00007E07 66030D[08580000]    <1> 		add cx, [mousecursorposition + 2]
 10376 00007E0E 662B0D[04580000]    <1> 		sub cx, [lastmouseposition + 2]
 10377 00007E15 663B15[1A560000]    <1> 		cmp dx, [resolutionx2]
 10378 00007E1C 7607                <1> 		jbe chkyresdrgicn
 10379 00007E1E 668B15[06580000]    <1> 		mov dx, [mousecursorposition]
 10380                              <1> 	chkyresdrgicn:
 10381 00007E25 663B0D[2E550000]    <1> 		cmp cx, [resolutiony]
 10382 00007E2C 7607                <1> 		jbe nodragicon
 10383 00007E2E 668B0D[08580000]    <1> 		mov cx, [mousecursorposition + 2]
 10384                              <1> 	nodragicon:
 10385 00007E35 66834E0A01          <1> 		or word [esi + 10], 1
 10386 00007E3A 8B5E0C              <1> 		mov ebx, [esi + 12]
 10387 00007E3D 668B460A            <1> 		mov ax, [esi + 10]
 10388 00007E41 8B7602              <1> 		mov esi, [esi + 2]
 10389 00007E44 C705[A4840000]0000- <1> 		mov dword [codepointer], 0
 10390 00007E4C 0000                <1>
 10391 00007E4E E862EDFFFF          <1> 		call showicon
 10392 00007E53 E9C9020000          <1> 		jmp doneiconsel
 10393                              <1> 	unselecticon:
 10394 00007E58 6683660AFE          <1> 		and word [esi + 10], 0xFFFE
 10395 00007E5D 8B5E0C              <1> 		mov ebx, [esi + 12]
 10396 00007E60 668B460A            <1> 		mov ax, [esi + 10]
 10397 00007E64 8B7602              <1> 		mov esi, [esi + 2]
 10398 00007E67 891D[A4840000]      <1> 		mov [codepointer], ebx
 10399 00007E6D E843EDFFFF          <1> 		call showicon
 10400 00007E72 E9AA020000          <1> 		jmp doneiconsel
 10401                              <1> 	textselected:
 10402 00007E77 8B5E02              <1> 		mov ebx, [esi + 2]
 10403 00007E7A 668B5606            <1> 		mov dx, [esi + 6]
 10404 00007E7E 6689D0              <1> 		mov ax, dx
 10405 00007E81 668B4E08            <1> 		mov cx, [esi + 8]
 10406                              <1> 	lengthtesttext:
 10407 00007E85 803B00              <1> 		cmp byte [ebx], 0
 10408 00007E88 7407                <1> 		je donetesttextlength
 10409 00007E8A 43                  <1> 		inc ebx
 10410 00007E8B 6683C010            <1> 		add ax, 16
 10411 00007E8F EBF4                <1> 		jmp lengthtesttext
 10412                              <1> 	donetesttextlength:
 10413 00007E91 6689CB              <1> 		mov bx, cx
 10414 00007E94 6683C30F            <1> 		add bx, 15
 10415 00007E98 833D[7F7C0000]01    <1> 		cmp dword [dragging], 1
 10416 00007E9F 7462                <1> 		je dragtext
 10417 00007EA1 833D[7F7C0000]00    <1> 		cmp dword [dragging], 0
 10418 00007EA8 740E                <1> 		je nodragtextcheck
 10419 00007EAA 3935[7F7C0000]      <1> 		cmp dword [dragging], esi
 10420 00007EB0 0F8556020000        <1> 		jne near nexticonsel
 10421 00007EB6 EB4B                <1> 		jmp dragtext
 10422                              <1> 	nodragtextcheck:
 10423 00007EB8 663915[06580000]    <1> 		cmp [mousecursorposition], dx
 10424 00007EBF 0F8247020000        <1> 		jb near nexticonsel
 10425 00007EC5 663905[06580000]    <1> 		cmp [mousecursorposition], ax
 10426 00007ECC 0F873A020000        <1> 		ja near nexticonsel
 10427 00007ED2 66390D[08580000]    <1> 		cmp [mousecursorposition + 2], cx
 10428 00007ED9 0F822D020000        <1> 		jb near nexticonsel
 10429 00007EDF 66391D[08580000]    <1> 		cmp [mousecursorposition + 2], bx
 10430 00007EE6 0F8720020000        <1> 		ja near nexticonsel
 10431 00007EEC 668B460A            <1> 		mov ax, [esi + 10]
 10432 00007EF0 6683E001            <1> 		and ax, 1
 10433 00007EF4 6683F801            <1> 		cmp ax, 1
 10434 00007EF8 0F84AA000000        <1> 		je near unselecttext
 10435 00007EFE E986000000          <1> 		jmp nodragtext
 10436                              <1> 	dragtext:
 10437 00007F03 663915[02580000]    <1> 		cmp [lastmouseposition], dx
 10438 00007F0A 0F82FC010000        <1> 		jb near nexticonsel
 10439 00007F10 663905[02580000]    <1> 		cmp [lastmouseposition], ax
 10440 00007F17 0F87EF010000        <1> 		ja near nexticonsel
 10441 00007F1D 66390D[04580000]    <1> 		cmp [lastmouseposition + 2], cx
 10442 00007F24 0F82E2010000        <1> 		jb near nexticonsel
 10443 00007F2A 66391D[04580000]    <1> 		cmp [lastmouseposition + 2], bx
 10444 00007F31 0F87D5010000        <1> 		ja near nexticonsel
 10445 00007F37 668B460A            <1> 		mov ax, [esi + 10]
 10446 00007F3B 2410                <1> 		and al, 00010000b
 10447 00007F3D 6683F810            <1> 		cmp ax, 00010000b
 10448 00007F41 0F8442000000        <1> 		je near nodragtext
 10449 00007F47 8935[7F7C0000]      <1> 		mov [dragging], esi
 10450 00007F4D 662B15[02580000]    <1> 		sub dx, [lastmouseposition]
 10451 00007F54 660315[06580000]    <1> 		add dx, [mousecursorposition]
 10452 00007F5B 66030D[08580000]    <1> 		add cx, [mousecursorposition + 2]
 10453 00007F62 662B0D[04580000]    <1> 		sub cx, [lastmouseposition + 2]
 10454 00007F69 663B15[1A560000]    <1> 		cmp dx, [resolutionx2]
 10455 00007F70 7607                <1> 		jbe chkyresdrgtxt
 10456 00007F72 668B15[06580000]    <1> 		mov dx, [mousecursorposition]
 10457                              <1> 	chkyresdrgtxt:
 10458 00007F79 663B0D[2E550000]    <1> 		cmp cx, [resolutiony]
 10459 00007F80 7607                <1> 		jbe nodragtext
 10460 00007F82 668B0D[08580000]    <1> 		mov cx, [mousecursorposition + 2]
 10461                              <1> 	nodragtext:
 10462 00007F89 66834E0A01          <1> 		or word [esi + 10], 1
 10463 00007F8E 8B5E0C              <1> 		mov ebx, [esi + 12]
 10464 00007F91 891D[A4840000]      <1> 		mov [codepointer], ebx
 10465 00007F97 668B460A            <1> 		mov ax, [esi + 10]
 10466 00007F9B 8B7602              <1> 		mov esi, [esi + 2]
 10467 00007F9E E89FF4FFFF          <1> 		call showstring
 10468 00007FA3 E979010000          <1> 		jmp doneiconsel
 10469                              <1> 	unselecttext:
 10470 00007FA8 6683660AFE          <1> 		and word [esi + 10], 0xFFFE
 10471 00007FAD 8B5E0C              <1> 		mov ebx, [esi + 12]
 10472 00007FB0 668B460A            <1> 		mov ax, [esi + 10]
 10473 00007FB4 8B7602              <1> 		mov esi, [esi + 2]
 10474 00007FB7 C705[A4840000]0000- <1> 		mov dword [codepointer], 0
 10475 00007FBF 0000                <1>
 10476 00007FC1 E87CF4FFFF          <1> 		call showstring
 10477 00007FC6 E956010000          <1> 		jmp doneiconsel
 10478                              <1> windowselect:
 10479 00007FCB 8B7E02              <1> 		mov edi, [esi + 2]
 10480 00007FCE 668B5606            <1> 		mov dx, [esi + 6]
 10481 00007FD2 6689D0              <1> 		mov ax, dx
 10482 00007FD5 668B4E08            <1> 		mov cx, [esi + 8]
 10483 00007FD9 6689CB              <1> 		mov bx, cx
 10484 00007FDC 6683C310            <1> 		add bx, 16
 10485 00007FE0 833D[7F7C0000]01    <1> 		cmp dword [dragging], 1
 10486 00007FE7 7467                <1> 		je dragwin
 10487 00007FE9 833D[7F7C0000]00    <1> 		cmp dword [dragging], 0
 10488 00007FF0 740E                <1> 		je nodragwincheck
 10489 00007FF2 3935[7F7C0000]      <1> 		cmp dword [dragging], esi
 10490 00007FF8 0F850E010000        <1> 		jne near nexticonsel
 10491 00007FFE EB50                <1> 		jmp dragwin
 10492                              <1> 	nodragwincheck:
 10493 00008000 663905[06580000]    <1> 		cmp [mousecursorposition], ax
 10494 00008007 0F82FF000000        <1> 		jb near nexticonsel
 10495 0000800D 660307              <1> 		add ax, [edi]
 10496 00008010 660307              <1> 		add ax, [edi]
 10497 00008013 663905[06580000]    <1> 		cmp [mousecursorposition], ax
 10498 0000801A 0F87EC000000        <1> 		ja near nexticonsel
 10499 00008020 66390D[08580000]    <1> 		cmp [mousecursorposition + 2], cx
 10500 00008027 0F82DF000000        <1> 		jb near nexticonsel
 10501 0000802D 66391D[08580000]    <1> 		cmp [mousecursorposition + 2], bx
 10502 00008034 0F87D2000000        <1> 		ja near nexticonsel
 10503 0000803A 6683E814            <1> 		sub ax, 20
 10504 0000803E 663905[06580000]    <1> 		cmp [mousecursorposition], ax
 10505 00008045 0F87A1000000        <1> 		ja near killwin
 10506 0000804B E98B000000          <1> 		jmp nodragwin
 10507                              <1> 	dragwin:
 10508 00008050 663905[02580000]    <1> 		cmp [lastmouseposition], ax
 10509 00008057 0F82AF000000        <1> 		jb near nexticonsel
 10510 0000805D 660307              <1> 		add ax, [edi]
 10511 00008060 660307              <1> 		add ax, [edi]
 10512 00008063 663905[02580000]    <1> 		cmp [lastmouseposition], ax
 10513 0000806A 0F879C000000        <1> 		ja near nexticonsel
 10514 00008070 66390D[04580000]    <1> 		cmp [lastmouseposition + 2], cx
 10515 00008077 0F828F000000        <1> 		jb near nexticonsel
 10516 0000807D 66391D[04580000]    <1> 		cmp [lastmouseposition + 2], bx
 10517 00008084 0F8782000000        <1> 		ja near nexticonsel
 10518 0000808A 8935[7F7C0000]      <1> 		mov [dragging], esi
 10519 00008090 803D[A8810000]01    <1> 		cmp byte [windrag], 1
 10520 00008097 7706                <1> 		ja .nochangewindrag
 10521 00008099 FE05[A8810000]      <1> 		inc byte [windrag]
 10522                              <1> 	.nochangewindrag:
 10523 0000809F 662B15[02580000]    <1> 		sub dx, [lastmouseposition]
 10524 000080A6 660315[06580000]    <1> 		add dx, [mousecursorposition]
 10525 000080AD 66030D[08580000]    <1> 		add cx, [mousecursorposition + 2]
 10526 000080B4 662B0D[04580000]    <1> 		sub cx, [lastmouseposition + 2]
 10527 000080BB 663B15[1A560000]    <1> 		cmp dx, [resolutionx2]
 10528 000080C2 7607                <1> 		jbe chkyresdrgwin
 10529 000080C4 668B15[06580000]    <1> 		mov dx, [mousecursorposition]
 10530                              <1> 	chkyresdrgwin:
 10531 000080CB 663B0D[2E550000]    <1> 		cmp cx, [resolutiony]
 10532 000080D2 7607                <1> 		jbe nodragwin
 10533 000080D4 668B0D[08580000]    <1> 		mov cx, [mousecursorposition + 2]
 10534                              <1> 	nodragwin:
 10535 000080DB 8B5E0C              <1> 		mov ebx, [esi + 12]
 10536 000080DE 668B460A            <1> 		mov ax, [esi + 10]
 10537 000080E2 8B7602              <1> 		mov esi, [esi + 2]
 10538 000080E5 E8D6F5FFFF          <1> 		call showwindow
 10539 000080EA EB35                <1> 		jmp doneiconsel
 10540                              <1> 	killwin:
 10541 000080EC 66C7060000          <1> 		mov word [esi], 0
 10542 000080F1 C605[81230000]00    <1> 		mov byte [termguion], 0
 10543 000080F8 E891ECFFFF          <1> 		call guiclear
 10544 000080FD E80DEDFFFF          <1> 		call reloadallgraphics
 10545 00008102 E850EAFFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10546 00008107 E947E6FFFF          <1> 		jmp guistart
 10547                              <1> 	nexticonsel:
 10548 0000810C 6683660AFE          <1> 		and word [esi + 10], 0xFFFE
 10549 00008111 83C610              <1> 		add esi, 16
 10550 00008114 81FE[9CCA0300]      <1> 		cmp esi, graphicstableend
 10551 0000811A 7305                <1> 		jae doneiconsel
 10552 0000811C E9D9FBFFFF          <1> 		jmp clicon2
 10553                              <1> 	doneiconsel:
 10554 00008121 833D[7F7C0000]01    <1> 		cmp dword [dragging], 1
 10555 00008128 7317                <1> 		jae doneiconsel2
 10556 0000812A A2[A8810000]        <1> 		mov [windrag], al
 10557 0000812F 833D[A4840000]00    <1> 		cmp dword [codepointer], 0
 10558 00008136 7409                <1> 		je doneiconsel2
 10559 00008138 8B1D[A4840000]      <1> 		mov ebx, [codepointer]
 10560 0000813E FFD3                <1> 		call ebx
 10561 00008140 C3                  <1> 		ret
 10562                              <1> 	doneiconsel2:
 10563 00008141 A0[15590000]        <1> 		mov al, [LBUTTON]
 10564 00008146 A2[7D7C0000]        <1> 		mov [pLBUTTON], al
 10565 0000814B A0[16590000]        <1> 		mov al, [RBUTTON]
 10566 00008150 A2[7E7C0000]        <1> 		mov [pRBUTTON], al
 10567 00008155 833D[7F7C0000]01    <1> 		cmp dword [dragging], 1
 10568 0000815C 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10569 00008162 E8F0E9FFFF          <1> 		call switchmousepos2
 10570 00008167 803D[A8810000]01    <1> 		cmp byte [windrag], 1
 10571 0000816E 7305                <1> 		jae noclearcursorcl
 10572 00008170 E8F9E8FFFF          <1> 		call clearmousecursor
 10573                              <1> noclearcursorcl:
 10574 00008175 E895ECFFFF          <1> 		call reloadallgraphics
 10575                              <1> noreloadgraphicsclick:
 10576 0000817A 30E4                <1> 		xor ah, ah
 10577 0000817C 31C9                <1> 		xor ecx, ecx
 10578 0000817E 31D2                <1> 		xor edx, edx
 10579 00008180 B001                <1> 		mov al, 1
 10580 00008182 668B15[06580000]    <1> 		mov dx, [mousecursorposition]
 10581 00008189 668B0D[08580000]    <1> 		mov cx, [mousecursorposition + 2]
 10582 00008190 66BBE738            <1> 		mov bx, 0011100011100111b
 10583 00008194 C605[797C0000]01    <1> 		mov byte [showcursorfonton], 1
 10584 0000819B E82FF3FFFF          <1> 		call showfontvesa
 10585 000081A0 C605[797C0000]00    <1> 		mov byte [showcursorfonton], 0
 10586 000081A7 C3                  <1> 		ret
 10587 000081A8 00                  <1> windrag db 0
 10588 000081A9 00000000            <1> lastdrag dw 0,0
 10589 000081AD 00000000            <1> grpctblpos dw 0,0
 10590                              <1> 
 10591                              <1> 
 10592                              <1> 
 10593 000081B1 00<rept>            <1> grphbuf times 16 db 0
 10594                              <1> 	graphicsadd:
 10595 000081C1 BF[9CC80300]        <1> 		mov edi, graphicstable
 10596                              <1> 	shwgrph1:
 10597 000081C6 397702              <1> 		cmp dword [edi + 2], esi
 10598 000081C9 7411                <1> 		je showgraphicsreplace2
 10599 000081CB 83C710              <1> 		add edi, 16
 10600 000081CE 81FF[9CCA0300]      <1> 		cmp edi, graphicstableend
 10601 000081D4 0F834E020000        <1> 		jae near showgraphicsnew
 10602 000081DA EBEA                <1> 		jmp shwgrph1
 10603                              <1> 	showgraphicsreplace2:
 10604 000081DC 8935[B3810000]      <1> 		mov [grphbuf + 2], esi
 10605 000081E2 668915[B7810000]    <1> 		mov [grphbuf + 6], dx
 10606 000081E9 66890D[B9810000]    <1> 		mov [grphbuf + 8], cx
 10607 000081F0 891D[BD810000]      <1> 		mov [grphbuf + 12], ebx
 10608 000081F6 30FF                <1> 		xor bh, bh
 10609 000081F8 88E3                <1> 		mov bl, ah
 10610 000081FA 30E4                <1> 		xor ah, ah
 10611 000081FC 66A3[BB810000]      <1> 		mov [grphbuf + 10], ax	
 10612 00008202 66891D[B1810000]    <1> 		mov [grphbuf], bx
 10613 00008209 66A1[B1810000]      <1> 		mov ax, [grphbuf]
 10614 0000820F 6683F801            <1> 		cmp ax, 1
 10615 00008213 0F8419000000        <1> 		je near replaceicon
 10616 00008219 6683F802            <1> 		cmp ax, 2
 10617 0000821D 0F8493000000        <1> 		je near replacestring
 10618 00008223 6683F803            <1> 		cmp ax, 3
 10619 00008227 0F840F010000        <1> 		je near replacewindow
 10620 0000822D E9D3010000          <1> 		jmp showgraphicsreplace
 10621                              <1> 	replaceicon:
 10622 00008232 893D[837C0000]      <1> 		mov [lastpos], edi
 10623 00008238 8935[877C0000]      <1> 		mov [lastpos + 4], esi
 10624 0000823E 8B7702              <1> 		mov esi, [edi + 2]
 10625 00008241 668B5F0C            <1> 		mov bx, [edi + 12]
 10626 00008245 668B5706            <1> 		mov dx, [edi + 6]
 10627 00008249 668B4F08            <1> 		mov cx, [edi + 8]
 10628 0000824D 668B06              <1> 		mov ax, [esi]
 10629 00008250 66A3[8B7C0000]      <1> 		mov [colorbuf], ax
 10630 00008256 66A1[0B6E0000]      <1> 		mov ax, [background]
 10631 0000825C 668906              <1> 		mov [esi], ax
 10632 0000825F 8B5F0C              <1> 		mov ebx, [edi + 12]
 10633 00008262 668B470A            <1> 		mov ax, [edi + 10]
 10634 00008266 2401                <1> 		and al, 1
 10635 00008268 A2[A8840000]        <1> 		mov [iconselected], al
 10636 0000826D 668B470A            <1> 		mov ax, [edi + 10]
 10637 00008271 E852E9FFFF          <1> 		call showicon2
 10638 00008276 8B3D[837C0000]      <1> 		mov edi, [lastpos]
 10639 0000827C 8B7702              <1> 		mov esi, [edi + 2]
 10640 0000827F 66A1[8B7C0000]      <1> 		mov ax, [colorbuf]
 10641 00008285 668906              <1> 		mov [esi], ax
 10642 00008288 8B35[877C0000]      <1> 		mov esi, [lastpos + 4]
 10643 0000828E 668B15[B7810000]    <1> 		mov dx, [grphbuf + 6]
 10644 00008295 668B0D[B9810000]    <1> 		mov cx, [grphbuf + 8]
 10645 0000829C 668B1D[B1810000]    <1> 		mov bx, [grphbuf]
 10646 000082A3 66A1[BB810000]      <1> 		mov ax, [grphbuf + 10]
 10647 000082A9 88DC                <1> 		mov ah, bl
 10648 000082AB 8B1D[BD810000]      <1> 		mov ebx, [grphbuf + 12]
 10649 000082B1 E94F010000          <1> 		jmp showgraphicsreplace
 10650                              <1> 	replacestring:
 10651 000082B6 893D[837C0000]      <1> 		mov [lastpos], edi
 10652 000082BC 8935[877C0000]      <1> 		mov [lastpos + 4], esi
 10653 000082C2 8B5F0C              <1> 		mov ebx, [edi + 12]
 10654 000082C5 8B7702              <1> 		mov esi, [edi + 2]
 10655 000082C8 668B5706            <1> 		mov dx, [edi + 6]
 10656 000082CC 668B4F08            <1> 		mov cx, [edi + 8]
 10657 000082D0 66A1[BE740000]      <1> 		mov ax, [colorfont2]
 10658 000082D6 66A3[8B7C0000]      <1> 		mov [colorbuf], ax
 10659 000082DC 66A1[0B6E0000]      <1> 		mov ax, [background]
 10660 000082E2 66A3[BE740000]      <1> 		mov [colorfont2], ax		
 10661 000082E8 8B5F0C              <1> 		mov ebx, [edi + 12]
 10662 000082EB 668B470A            <1> 		mov ax, [edi + 10]
 10663 000082EF 2401                <1> 		and al, 1
 10664 000082F1 A2[7B7C0000]        <1> 		mov [mouseselecton], al
 10665 000082F6 668B470A            <1> 		mov ax, [edi + 10]
 10666 000082FA E856F1FFFF          <1> 		call showstring2
 10667 000082FF 66A1[8B7C0000]      <1> 		mov ax, [colorbuf]
 10668 00008305 66A3[BE740000]      <1> 		mov [colorfont2], ax
 10669 0000830B 8B3D[837C0000]      <1> 		mov edi, [lastpos]
 10670 00008311 8B7702              <1> 		mov esi, [edi + 2]
 10671 00008314 668B15[B7810000]    <1> 		mov dx, [grphbuf + 6]
 10672 0000831B 668B0D[B9810000]    <1> 		mov cx, [grphbuf + 8]
 10673 00008322 668B1D[B1810000]    <1> 		mov bx, [grphbuf]
 10674 00008329 66A1[BB810000]      <1> 		mov ax, [grphbuf + 10]
 10675 0000832F 88DC                <1> 		mov ah, bl
 10676 00008331 8B1D[BD810000]      <1> 		mov ebx, [grphbuf + 12]
 10677 00008337 E9C9000000          <1> 		jmp showgraphicsreplace
 10678                              <1> 	replacewindow:
 10679 0000833C 893D[837C0000]      <1> 		mov [lastpos], edi
 10680 00008342 8935[877C0000]      <1> 		mov [lastpos + 4], esi
 10681 00008348 8B7702              <1> 		mov esi, [edi + 2]
 10682 0000834B 8B3D[AA760000]      <1> 		mov edi, [windowbufloc]
 10683 00008351 31D2                <1> 		xor edx, edx
 10684 00008353 668B15[1A560000]    <1> 		mov dx, [resolutionx2]
 10685 0000835A C1E204              <1> 		shl edx, 4
 10686 0000835D 29D7                <1> 		sub edi, edx
 10687 0000835F 31D2                <1> 		xor edx, edx
 10688 00008361 668B16              <1> 		mov dx, [esi]
 10689 00008364 660316              <1> 		add dx, [esi]
 10690 00008367 668B4E02            <1> 		mov cx, [esi + 2]
 10691 0000836B 6683C110            <1> 		add cx, 16
 10692 0000836F 66A1[0B6E0000]      <1> 		mov ax, [background]
 10693 00008375 803D[A8810000]01    <1> 		cmp byte [windrag], 1
 10694 0000837C 7604                <1> 		jbe clearwindow
 10695 0000837E 662B4E02            <1> 		sub cx, [esi + 2]
 10696                              <1> 	clearwindow:
 10697                              <1> 		%ifdef gui.background
 10698 00008382 833D[E36D0000]00    <1> 			cmp dword [backgroundimage], 0
 10699 00008389 7419                <1> 			je .noback
 10700 0000838B 56                  <1> 			push esi
 10701 0000838C 8B35[E36D0000]      <1> 			mov esi, [backgroundimage]
 10702 00008392 2B3D[42550000]      <1> 			sub edi, [physbaseptr]
 10703 00008398 01FE                <1> 			add esi, edi
 10704 0000839A 033D[42550000]      <1> 			add edi, [physbaseptr]
 10705 000083A0 668B06              <1> 			mov ax, [esi]
 10706 000083A3 5E                  <1> 			pop esi
 10707                              <1> 		.noback:
 10708                              <1> 		%endif
 10709 000083A4 668907              <1> 		mov [edi], ax
 10710 000083A7 83C702              <1> 		add edi, 2
 10711 000083AA 83EA02              <1> 		sub edx, 2
 10712 000083AD 83FA00              <1> 		cmp edx, 0
 10713 000083B0 75D0                <1> 		jne clearwindow
 10714 000083B2 6649                <1> 		dec cx
 10715 000083B4 668B15[1A560000]    <1> 		mov dx, [resolutionx2]
 10716 000083BB 662B16              <1> 		sub dx, [esi]
 10717 000083BE 662B16              <1> 		sub dx, [esi]
 10718 000083C1 01D7                <1> 		add edi, edx
 10719 000083C3 668B16              <1> 		mov dx, [esi]
 10720 000083C6 660316              <1> 		add dx, [esi]
 10721 000083C9 6683F900            <1> 		cmp cx, 0
 10722 000083CD 75B3                <1> 		jne clearwindow
 10723                              <1> 	endwindowclear:
 10724 000083CF C605[82230000]00    <1> 		mov byte [termcopyon], 0
 10725 000083D6 8B3D[837C0000]      <1> 		mov edi, [lastpos]
 10726 000083DC 8B35[B3810000]      <1> 		mov esi, [grphbuf + 2]
 10727 000083E2 668B15[B7810000]    <1> 		mov dx, [grphbuf + 6]
 10728 000083E9 668B0D[B9810000]    <1> 		mov cx, [grphbuf + 8]
 10729 000083F0 668B1D[B1810000]    <1> 		mov bx, [grphbuf]
 10730 000083F7 66A1[BB810000]      <1> 		mov ax, [grphbuf + 10]
 10731 000083FD 88DC                <1> 		mov ah, bl
 10732 000083FF 8B1D[BD810000]      <1> 		mov ebx, [grphbuf + 12]
 10733                              <1> 	showgraphicsreplace:
 10734 00008405 897702              <1> 		mov [edi + 2], esi
 10735 00008408 66895706            <1> 		mov [edi + 6], dx
 10736 0000840C 66894F08            <1> 		mov [edi + 8], cx
 10737 00008410 895F0C              <1> 		mov [edi + 12], ebx
 10738 00008413 30FF                <1> 		xor bh, bh
 10739 00008415 88E3                <1> 		mov bl, ah
 10740 00008417 30E4                <1> 		xor ah, ah
 10741 00008419 6689470A            <1> 		mov [edi + 10], ax
 10742 0000841D 66891F              <1> 		mov [edi], bx
 10743 00008420 8B5F0C              <1> 		mov ebx, [edi + 12]
 10744 00008423 668B470A            <1> 		mov ax, [edi + 10]
 10745 00008427 C3                  <1> 		ret
 10746                              <1> 	showgraphicsnew:
 10747 00008428 BF[9CC80300]        <1> 		mov edi, graphicstable
 10748                              <1> 	shwgrph2:
 10749 0000842D 66833F00            <1> 		cmp word [edi], 0
 10750 00008431 74D2                <1> 		je showgraphicsreplace
 10751 00008433 83C710              <1> 		add edi, 16
 10752 00008436 81FF[9CCA0300]      <1> 		cmp edi, graphicstableend
 10753 0000843C 72EF                <1> 		jb shwgrph2
 10754                              <1> 	showgraphicsdone:
 10755 0000843E C3                  <1> 		ret
 10756                              <1> 	
 10757                              <1> putpixel: ;color in si, point is (dx,cx)
 10758                              <1> 		;destroys edi, ebx, eax
 10759 0000843F 6650                <1> 	push ax
 10760 00008441 6653                <1> 	push bx
 10761 00008443 31C0                <1> 	xor eax, eax
 10762 00008445 31DB                <1> 	xor ebx, ebx
 10763 00008447 31FF                <1> 	xor edi, edi
 10764 00008449 668B1D[2E550000]    <1> 	mov bx, [resolutiony]
 10765 00008450 66A1[2C550000]      <1> 	mov ax, [resolutionx]
 10766 00008456 6639C2              <1> 	cmp dx, ax
 10767 00008459 7720                <1> 	ja .doneput
 10768 0000845B 66D1E0              <1> 	shl ax, 1
 10769 0000845E 6639D9              <1> 	cmp cx, bx
 10770 00008461 7718                <1> 	ja .doneput
 10771 00008463 6689CB              <1> 	mov bx, cx
 10772 00008466 52                  <1> 	push edx
 10773 00008467 F7E3                <1> 	mul ebx
 10774 00008469 5A                  <1> 	pop edx
 10775 0000846A 6601D7              <1> 	add di, dx
 10776 0000846D 6601D7              <1> 	add di, dx
 10777 00008470 01C7                <1> 	add edi, eax
 10778 00008472 033D[42550000]      <1> 	add edi, [physbaseptr]
 10779 00008478 668937              <1> 	mov [edi], si
 10780                              <1> .doneput:
 10781 0000847B 665B                <1> 	pop bx
 10782 0000847D 6658                <1> 	pop ax
 10783 0000847F C3                  <1> 	ret
 10784                              <1> 	
 10785                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10786 00008480 31FF                <1> 	xor edi, edi
 10787 00008482 31C0                <1> 	xor eax, eax
 10788 00008484 31DB                <1> 	xor ebx, ebx
 10789 00008486 668B1D[1A560000]    <1> 	mov bx, [resolutionx2]
 10790 0000848D 6689D7              <1> 	mov di, dx
 10791 00008490 6601D7              <1> 	add di, dx
 10792 00008493 6689C8              <1> 	mov ax, cx
 10793 00008496 F7E3                <1> 	mul ebx
 10794 00008498 01C7                <1> 	add edi, eax
 10795 0000849A 033D[42550000]      <1> 	add edi, [physbaseptr]
 10796 000084A0 C3                  <1> 	ret
 10797                              <1> 
 10798 000084A1 00                  <1> 	mouseon db 0
 10799 000084A2 0000                <1> 	icon dw 0	;pointer to icon
 10800 000084A4 00000000            <1> 	codepointer dd 0 ;pointer to code
 10801 000084A8 00                  <1> 	iconselected db 0
 10802                                  %endif
 10803                                  %ifdef network.included
 10804                                  	%include "source/network.asm"
 10805                                  %endif
 10806                                  	%include "source/data.asm"
 10807 000084A9 626F6F742E736800    <1> 	bootfilename db	"boot.sh",0
 10808 000084B1 73687573683A2000    <1> 	notfound1 db	"shush: ",0
 10809 000084B9 3A206E6F7420666F75- <1> 	notfound2 db	": not found",10,0
 10810 000084C2 6E640A00            <1>
 10811 000084C6 757365726E616D653A- <1> 	userask db	"username:",0
 10812 000084CF 00                  <1>
 10813 000084D0 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10814 000084D9 00                  <1>
 10815 000084DA 40                  <1> 	computer db	"@"
 10816                              <1> %ifdef io.serial
 10817                              <1> 	computername db	0xA7,"ollerOS.",io.serial," ",0
 10818                              <1> %else
 10819 000084DB A76F6C6C65724F5320- <1> 	computername db	0xA7,"ollerOS ",0
 10820 000084E4 00                  <1>
 10821                              <1> %endif
 10822 000084E5 5D242000            <1> 	endprompt db "]$ ",0
 10823 000084E9 0D                  <1> 	crlf 	db	13
 10824 000084EA 0A00                <1> 	line	db	10,0
 10825                              <1> 	userlst:
 10826 000084EC 726F6F7400          <1> 			db "root",0
 10827 000084F1 617765736F6D65706F- <1> 			db "awesomepower",0
 10828 000084FA 77657200            <1>
 10829 000084FE 7573657200          <1> 			db "user",0
 10830 00008503 70617373776F726400  <1> 			db "password",0
 10831 0000850C 6E00                <1> 			db "n",0	;abuse for quick entry-a quick double n followed by a double enter will get you in
 10832 0000850E 00                  <1> 			db 0
 10833                              <1> 	userlstend:
 10834                              <1> 	
 10835 0000850F 00                  <1> 	guion db 0
 10836 00008510 00                  <1> 	DriveNumber db 0
 10837 00008511 00000000            <1> 	lbaad dd 0
 10838 00008515 0000000000000000    <1> 	initialtsc dd 0,0
 10839 0000851D 0000000000000000    <1> 	lasttsc dd 0,0
 10840 00008525 00<rept>            <1> 	memlistbuf times 576 db 0
 10841 00008765 00000000            <1> 	memlistend: dd 0
 10842                              <1> %ifdef io.serial
 10843                              <1> %else
 10844                              <1> fonts:
 10845                              <1> %ifdef font.unicode
 10846 00008769 <incbin>            <1> 	incbin "source/fonts/fonts-unicode.pak"
 10847                              <1> %else
 10848                              <1> 	incbin "source/fonts/fonts-ascii.pak"
 10849                              <1> %endif
 10850                              <1> fontend:
 10851                              <1> %endif
 10852                              <1> osend:	;this is the end of the operating system's space on disk
 10853                                  %ifdef disk.none
 10854                                  	diskfileindex:
 10855                                  	enddiskfileindex:
 10856                                  	%include "source/bss.asm"
 10857                                  %else
 10858                                  	%include "build/fileindex.asm"
 10859                              <1> diskfileindex:
 10860 00038769 5F696D672E62696E00  <1> db "_img.bin",0
 10861 00038772 C5010000            <1> dd (f0-$$)/512
 10862 00038776 0C000000            <1> dd (f1-f0)/512
 10863 0003877A 617267746573742E65- <1> db "argtest.elf",0
 10864 00038783 6C6600              <1>
 10865 00038786 D1010000            <1> dd (f1-$$)/512
 10866 0003878A 46000000            <1> dd (f2-f1)/512
 10867 0003878E 626F6F742E736800    <1> db "boot.sh",0
 10868 00038796 17020000            <1> dd (f2-$$)/512
 10869 0003879A 01000000            <1> dd (f3-f2)/512
 10870 0003879E 63686172746573742E- <1> db "chartest.elf",0
 10871 000387A7 656C6600            <1>
 10872 000387AB 18020000            <1> dd (f3-$$)/512
 10873 000387AF 4E000000            <1> dd (f4-f3)/512
 10874 000387B3 646F73746573742E63- <1> db "dostest.com",0
 10875 000387BC 6F6D00              <1>
 10876 000387BF 66020000            <1> dd (f4-$$)/512
 10877 000387C3 01000000            <1> dd (f5-f4)/512
 10878 000387C7 6578656300          <1> db "exec",0
 10879 000387CC 67020000            <1> dd (f5-$$)/512
 10880 000387D0 01000000            <1> dd (f6-f5)/512
 10881 000387D4 66696E616C636F756E- <1> db "finalcount.sn",0
 10882 000387DD 742E736E00          <1>
 10883 000387E2 68020000            <1> dd (f6-$$)/512
 10884 000387E6 01000000            <1> dd (f7-f6)/512
 10885 000387EA 666F726B00          <1> db "fork",0
 10886 000387EF 69020000            <1> dd (f7-$$)/512
 10887 000387F3 01000000            <1> dd (f8-f7)/512
 10888 000387F7 677261766974792E65- <1> db "gravity.elf",0
 10889 00038800 6C6600              <1>
 10890 00038803 6A020000            <1> dd (f8-$$)/512
 10891 00038807 5E000000            <1> dd (f9-f8)/512
 10892 0003880B 6775697465737400    <1> db "guitest",0
 10893 00038813 C8020000            <1> dd (f9-$$)/512
 10894 00038817 03000000            <1> dd (f10-f9)/512
 10895 0003881B 696E7400            <1> db "int",0
 10896 0003881F CB020000            <1> dd (f10-$$)/512
 10897 00038823 01000000            <1> dd (f11-f10)/512
 10898 00038827 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 10899 00038830 2E736E00            <1>
 10900 00038834 CC020000            <1> dd (f11-$$)/512
 10901 00038838 01000000            <1> dd (f12-f11)/512
 10902 0003883C 6D6172696F2E736E00  <1> db "mario.sn",0
 10903 00038845 CD020000            <1> dd (f12-$$)/512
 10904 00038849 01000000            <1> dd (f13-f12)/512
 10905 0003884D 6D6F6D656E742E7761- <1> db "moment.wav",0
 10906 00038856 7600                <1>
 10907 00038858 CE020000            <1> dd (f13-$$)/512
 10908 0003885C 2C050000            <1> dd (f14-f13)/512
 10909 00038860 70692E656C6600      <1> db "pi.elf",0
 10910 00038867 FA070000            <1> dd (f14-$$)/512
 10911 0003886B 4E000000            <1> dd (f15-f14)/512
 10912 0003886F 72617974726163652E- <1> db "raytrace.elf",0
 10913 00038878 656C6600            <1>
 10914 0003887C 48080000            <1> dd (f15-$$)/512
 10915 00038880 1E000000            <1> dd (f16-f15)/512
 10916 00038884 736F6E676F74696D65- <1> db "songotime.sn",0
 10917 0003888D 2E736E00            <1>
 10918 00038891 66080000            <1> dd (f16-$$)/512
 10919 00038895 01000000            <1> dd (f17-f16)/512
 10920 00038899 73736500            <1> db "sse",0
 10921 0003889D 67080000            <1> dd (f17-$$)/512
 10922 000388A1 02000000            <1> dd (f18-f17)/512
 10923 000388A5 737464696F74657374- <1> db "stdiotest.elf",0
 10924 000388AE 2E656C6600          <1>
 10925 000388B3 69080000            <1> dd (f18-$$)/512
 10926 000388B7 4E000000            <1> dd (f19-f18)/512
 10927 000388BB 74656C7900          <1> db "tely",0
 10928 000388C0 B7080000            <1> dd (f19-$$)/512
 10929 000388C4 02000000            <1> dd (f20-f19)/512
 10930 000388C8 74696D65746573742E- <1> db "timetest.elf",0
 10931 000388D1 656C6600            <1>
 10932 000388D5 B9080000            <1> dd (f20-$$)/512
 10933 000388D9 46000000            <1> dd (f21-f20)/512
 10934 000388DD 7475746F7269616C2E- <1> db "tutorial.sh",0
 10935 000388E6 736800              <1>
 10936 000388E9 FF080000            <1> dd (f21-$$)/512
 10937 000388ED 03000000            <1> dd (f22-f21)/512
 10938 000388F1 756E667300          <1> db "unfs",0
 10939 000388F6 02090000            <1> dd (f22-$$)/512
 10940 000388FA 02000000            <1> dd (f23-f22)/512
 10941                              <1> enddiskfileindex:
 10942                              <1> 
 10943                                  	%include "source/bss.asm"
 10944 000388FE 00<rept>            <1> align 512, db 0
 10945                              <1> bssstart equ $
 10946                              <1> bsscopy equ $
 10947                              <1> initialstack equ bsscopy
 10948                              <1> stackend equ initialstack + 8192
 10949                              <1> sigtable equ stackend + 4
 10950                              <1> fileindex equ sigtable + 4
 10951                              <1> fileindexend equ fileindex + 1024
 10952                              <1> previousstack equ fileindexend
 10953                              <1> lastfolderloc equ previousstack + 4
 10954                              <1> currentfolderloc equ lastfolderloc + 4
 10955                              <1> currentfolder equ currentfolderloc + 4
 10956                              <1> currentfolderend equ currentfolder + 512
 10957                              <1> uid equ currentfolderend
 10958                              <1> ranboot equ uid + 4
 10959                              <1> IFON equ ranboot + 1
 10960                              <1> IFTRUE equ IFON + 1
 10961                              <1> BATCHPOS equ IFTRUE + 100
 10962                              <1> BATCHISON equ BATCHPOS + 4
 10963                              <1> LOOPON equ BATCHISON + 1
 10964                              <1> LOOPPOS	equ LOOPON + 1
 10965                              <1> variables equ LOOPPOS + 4
 10966                              <1> varend equ variables + 4096
 10967                              <1> buftxt2 equ varend
 10968                              <1> buftxt equ buftxt2 + 1024
 10969                              <1> buftxtend equ buftxt + 1024
 10970                              <1> buf2 equ buftxtend
 10971                              <1> numbuf equ buf2 + 20
 10972                              <1> %ifdef io.serial
 10973                              <1> 	lastcommandpos equ numbuf
 10974                              <1> %else
 10975                              <1> 	%ifdef gui.included
 10976                              <1> 		graphicstable equ numbuf ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 10977                              <1> 		graphicstableend equ graphicstable + 512
 10978                              <1> 		%ifdef gui.background
 10979                              <1> 			backgroundbuffer equ graphicstableend
 10980                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 10981                              <1> 			mousecolorbuf equ backgroundbufferend
 10982                              <1> 		%else
 10983                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 10984                              <1> 		%endif
 10985                              <1> 		mcolorend equ mousecolorbuf + 256
 10986                              <1> 		videobuf equ mcolorend	;1680x1050 pixels in characters
 10987                              <1> 		videobufend	equ videobuf + 210*65*4;2
 10988                              <1> 		videobuf2 equ videobufend
 10989                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
 10990                              <1> 	%else
 10991                              <1> 		videobuf equ numbuf
 10992                              <1> 		videobufend equ videobuf + 80*30*4
 10993                              <1> 		videobuf2 equ videobufend
 10994                              <1> 		videobuf2end equ videobuf2 + 80*30*4
 10995                              <1> 	%endif
 10996                              <1> 	lastcommandpos: equ videobuf2end
 10997                              <1> %endif
 10998                              <1> 	commandbufpos: equ lastcommandpos + 4
 10999                              <1> 	commandlistentries: equ commandbufpos + 4
 11000                              <1> 	commandsentered: equ commandlistentries + 4
 11001                              <1> 	commandbuf: equ commandsentered + 4
 11002                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 11003                              <1> %ifdef network.included
 11004                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 11005                              <1> 	rbuffend equ rbuffstart + 8192 + 16 ;extra space used for the WRAP bit in rtl8139
 11006                              <1> 	rbuffoverflow equ rbuffend + 1500
 11007                              <1> %else
 11008                              <1> 	rbuffstart equ commandbufend
 11009                              <1> 	rbuffend equ commandbufend
 11010                              <1> %endif
 11011                              <1> %ifdef threads.included
 11012                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 1024
 11013                              <1> 	threadlistend: equ threadlist + 1024*4
 11014                              <1> 	stacks:	equ threadlistend ;NOT TRUE:i use SS now for proper stack management. This makes sure stacks never screw with other memory
 11015                              <1> 	stack1: equ stacks + 2048  ;woah, thats a lot of space for stacks
 11016                              <1> 	bssend equ stack1 + 1024*2048
 11017                              <1> %else
 11018                              <1> 	bssend equ rbuffend
 11019                              <1> %endif
 11020                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 11021                                  	%include "build/files.asm"
 11022                              <1> align 512,db 0
 11023                              <1> f0:
 11024 00038A00 <incbin>            <1> incbin "included/_img.bin"
 11025                              <1> align 512,db 0
 11026                              <1> f1:
 11027 0003A200 <incbin>            <1> incbin "included/argtest.elf"
 11028 00042D20 00<rept>            <1> align 512,db 0
 11029                              <1> f2:
 11030 00042E00 <incbin>            <1> incbin "included/boot.sh"
 11031 00042F18 00<rept>            <1> align 512,db 0
 11032                              <1> f3:
 11033 00043000 <incbin>            <1> incbin "included/chartest.elf"
 11034 0004CB20 00<rept>            <1> align 512,db 0
 11035                              <1> f4:
 11036 0004CC00 <incbin>            <1> incbin "included/dostest.com"
 11037 0004CD2F 00<rept>            <1> align 512,db 0
 11038                              <1> f5:
 11039 0004CE00 <incbin>            <1> incbin "included/exec"
 11040 0004CEE9 00<rept>            <1> align 512,db 0
 11041                              <1> f6:
 11042 0004D000 <incbin>            <1> incbin "included/finalcount.sn"
 11043 0004D102 00<rept>            <1> align 512,db 0
 11044                              <1> f7:
 11045 0004D200 <incbin>            <1> incbin "included/fork"
 11046 0004D34C 00<rept>            <1> align 512,db 0
 11047                              <1> f8:
 11048 0004D400 <incbin>            <1> incbin "included/gravity.elf"
 11049 00058F90 00<rept>            <1> align 512,db 0
 11050                              <1> f9:
 11051 00059000 <incbin>            <1> incbin "included/guitest"
 11052 0005942E 00<rept>            <1> align 512,db 0
 11053                              <1> f10:
 11054 00059600 <incbin>            <1> incbin "included/int"
 11055 000597A6 00<rept>            <1> align 512,db 0
 11056                              <1> f11:
 11057 00059800 <incbin>            <1> incbin "included/lostwoods.sn"
 11058 000598AE 00<rept>            <1> align 512,db 0
 11059                              <1> f12:
 11060 00059A00 <incbin>            <1> incbin "included/mario.sn"
 11061 00059A3A 00<rept>            <1> align 512,db 0
 11062                              <1> f13:
 11063 00059C00 <incbin>            <1> incbin "included/moment.wav"
 11064 000FF22C 00<rept>            <1> align 512,db 0
 11065                              <1> f14:
 11066 000FF400 <incbin>            <1> incbin "included/pi.elf"
 11067 00108F38 00<rept>            <1> align 512,db 0
 11068                              <1> f15:
 11069 00109000 <incbin>            <1> incbin "included/raytrace.elf"
 11070 0010CB20 00<rept>            <1> align 512,db 0
 11071                              <1> f16:
 11072 0010CC00 <incbin>            <1> incbin "included/songotime.sn"
 11073 0010CC4A 00<rept>            <1> align 512,db 0
 11074                              <1> f17:
 11075 0010CE00 <incbin>            <1> incbin "included/sse"
 11076 0010D08A 00<rept>            <1> align 512,db 0
 11077                              <1> f18:
 11078 0010D200 <incbin>            <1> incbin "included/stdiotest.elf"
 11079 00116D20 00<rept>            <1> align 512,db 0
 11080                              <1> f19:
 11081 00116E00 <incbin>            <1> incbin "included/tely"
 11082 0011701B 00<rept>            <1> align 512,db 0
 11083                              <1> f20:
 11084 00117200 <incbin>            <1> incbin "included/timetest.elf"
 11085 0011FD20 00<rept>            <1> align 512,db 0
 11086                              <1> f21:
 11087 0011FE00 <incbin>            <1> incbin "included/tutorial.sh"
 11088 00120352 00<rept>            <1> align 512,db 0
 11089                              <1> f22:
 11090 00120400 <incbin>            <1> incbin "included/unfs"
 11091                              <1> align 512,db 0
 11092                              <1> f23:
 11093                                  %endif
