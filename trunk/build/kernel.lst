     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> %define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> %define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define io.serial "1"
    15                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    16                              <1> ;If the gui is included this should not be enabled
    17                              <1> 
    18                              <1> %define threads.included
    19                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    20                              <1> 
    21                              <1> %define exceptions.included
    22                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    23                              <1> 
    24                              <1> ;%define disk.protected
    25                              <1> ;Use protected mode instead of real mode for disk access
    26                              <1> 
    27                              <1> %define disk.real
    28                              <1> ;Use real mode for disk access
    29                              <1> 
    30                              <1> %define sound.included
    31                              <1> ;This includes the sound drivers
    32                              <1> 
    33                              <1> ;%define rtl8139.included
    34                              <1> ;This includes the RTL8139 drivers
    35                              <1> 
    36                              <1> ;%define sector.debug
    37                              <1> ;Dump the contents of the first sector of SollerOS
    38                              <1> 
    39                              <1> ;FIX DEPENDANCIES
    40                              <1> %ifdef gui.included
    41                              <1> 	%undef io.serial
    42                              <1> %else
    43                              <1> 	%undef gui.alphablending
    44                              <1> 	%undef gui.background
    45                              <1> %endif
    46                              <1> %ifdef disk.protected
    47                              <1> %undef disk.real
    48                              <1> %endif
    49                                  [BITS 16]
    50                                      %include "source/boot.asm"
    51                              <1>     ; MENU.ASM
    52                              <1> %include 'source/signature.asm'
    53                              <2> signature:
    54 00000000 536F6C6C65724F53    <2> db "SollerOS" ;Operating system name
    55 00000008 20416C706861204275- <2> db " Alpha Build ",0	;Soller OS development level
    56 00000011 696C642000          <2>
    57 00000016 DA000000            <2> dd 218	;version number
    58                              <2> signatureend:
    59                              <1> menustart:	
    60 0000001A 8CC8                <1> 	mov ax, cs
    61 0000001C 8ED8                <1> 	mov ds, ax
    62 0000001E 8EC0                <1> 	mov es, ax
    63 00000020 8ED0                <1> 	mov ss, ax
    64 00000022 880E[D583]          <1> 	mov [DriveNumber], cl
    65 00000026 668916[D683]        <1> 	mov [lbaad], edx
    66                              <1> %ifdef io.serial
    67                              <1> 	call getmemorysize
    68                              <1> 	mov si, serialmsg
    69                              <1> 	call printrm
    70                              <1> 	jmp pmode
    71                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
    72                              <1> %else
    73 0000002B E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
    74 0000002E E95700              <1> 	jmp pmode
    75                              <1> %endif
    76                              <1> 	
    77                              <1> vgaset:
    78 00000031 B81200              <1> 	mov ax, 12h
    79 00000034 31DB                <1> 	xor bx, bx
    80 00000036 CD10                <1> 	int 10h
    81 00000038 C606[D483]00        <1> 	mov byte [guion], 0
    82 0000003D E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
    83 00000040 C3                  <1> 	ret
    84                              <1> 
    85                              <1> getmemorysize:
    86 00000041 BF[DA83]            <1> 	mov di, memlistbuf
    87 00000044 6631DB              <1> 	xor ebx, ebx
    88                              <1> getmemsizeloop:
    89 00000047 66B820E80000        <1> 	mov eax, 0xE820
    90 0000004D 66BA50414D53        <1> 	mov edx, 0x0534D4150
    91 00000053 66B918000000        <1> 	mov ecx, 24
    92 00000059 CD15                <1> 	int 0x15
    93 0000005B 81C71800            <1> 	add di, 24
    94 0000005F 81FF[1A86]          <1> 	cmp di, memlistend
    95 00000063 7309                <1> 	jae nomoregetmemsize
    96 00000065 6681FB00000000      <1> 	cmp ebx, 0
    97 0000006C 75D9                <1> 	jne getmemsizeloop
    98                              <1> nomoregetmemsize:
    99 0000006E 81EF[DA83]          <1> 	sub di, memlistbuf
   100 00000072 893E[1A86]          <1> 	mov [memlistend], di
   101 00000076 C3                  <1> 	ret
   102                              <1> 	
   103                              <1> printrm:			; 'si' comes in with string address
   104 00000077 BB0700              <1>     mov bx,07		; write to display
   105 0000007A B40E                <1>     mov ah,0Eh		; screen function
   106 0000007C 8A04                <1>    .lp:    mov al,[si]         ; get next character
   107 0000007E 3C00                <1>     cmp al,0		; look for terminator 
   108 00000080 7405                <1>     je .done		; zero byte at end of string
   109 00000082 CD10                <1>     int 10h		; write character to screen.    
   110 00000084 46                  <1> 	inc si	     	; move to next character
   111 00000085 EBF5                <1>     jmp .lp		; loop
   112 00000087 C3                  <1> .done: ret
   113                                      %include "source/pmode.asm"
   114                              <1> [BITS 16]
   115                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   116                              <1> ;	16-bit real mode
   117                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   118                              <1> 
   119                              <1> pmode:
   120 00000088 6631C0              <1> 	xor eax, eax
   121 0000008B 6631DB              <1> 	xor ebx, ebx
   122 0000008E 6631C9              <1> 	xor ecx, ecx
   123 00000091 6631D2              <1> 	xor edx, edx
   124 00000094 6631F6              <1> 	xor esi, esi
   125 00000097 6631FF              <1> 	xor edi, edi
   126 0000009A BA9200              <1> 	mov dx, 0x92
   127 0000009D EC                  <1> 	in al, dx	;;A20
   128 0000009E 0C02                <1> 	or al, 2
   129 000000A0 EE                  <1> 	out dx, al
   130 000000A1 8CCB                <1> 	mov bx,cs		; EBX=segment
   131 000000A3 66C1E304            <1> 	shl ebx,4		;	<< 4
   132 000000A7 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   133 000000AB A3[5803]            <1> 	mov [gdt2 + 2],ax
   134 000000AE A3[6003]            <1> 	mov [gdt3 + 2],ax
   135 000000B1 66C1E810            <1> 	shr eax,16
   136 000000B5 A2[5A03]            <1> 	mov [gdt2 + 4],al
   137 000000B8 A2[6203]            <1> 	mov [gdt3 + 4],al
   138 000000BB 8826[5D03]          <1> 	mov [gdt2 + 7],ah
   139 000000BF 8826[6503]          <1> 	mov [gdt3 + 7],ah
   140                              <1> 
   141 000000C3 66B8[1A860000]      <1> 	mov eax, initialstack
   142 000000C9 660306[4202]        <1> 	add eax, [newcodecache]
   143 000000CE A3[5003]            <1> 	mov [gdts + 2],ax
   144 000000D1 66C1E810            <1> 	shr eax, 16
   145 000000D5 A2[5203]            <1> 	mov [gdts + 4],al
   146 000000D8 8826[5503]          <1> 	mov [gdts + 7], ah
   147                              <1> 	
   148 000000DC 66A1[4202]          <1> 	mov eax, [newcodecache]
   149 000000E0 A3[6803]            <1> 	mov [gdt4 + 2],ax
   150 000000E3 A3[7003]            <1> 	mov [gdt5 + 2],ax
   151 000000E6 A3[7803]            <1> 	mov [gdtv8086 + 2], ax
   152 000000E9 A3[8003]            <1> 	mov [gdtv80862 + 2], ax
   153 000000EC 66C1E810            <1> 	shr eax,16
   154 000000F0 A2[6A03]            <1> 	mov [gdt4 + 4],al
   155 000000F3 A2[7203]            <1> 	mov [gdt5 + 4],al
   156 000000F6 A2[7A03]            <1> 	mov [gdtv8086 + 4],al
   157 000000F9 A2[8203]            <1> 	mov [gdtv80862 + 4],al
   158 000000FC 8826[6D03]          <1> 	mov [gdt4 + 7],ah
   159 00000100 8826[7503]          <1> 	mov [gdt5 + 7],ah
   160 00000104 8826[7D03]          <1> 	mov [gdtv8086 + 7],ah
   161 00000108 8826[8503]          <1> 	mov [gdtv80862 + 7],ah
   162                              <1> 	
   163 0000010C 66B800004000        <1> 	mov eax, dosprogloc
   164 00000112 660306[4202]        <1> 	add eax, [newcodecache]
   165 00000117 A3[8803]            <1> 	mov [gdtdos + 2],ax
   166 0000011A A3[9003]            <1> 	mov [gdtdos2 + 2],ax
   167 0000011D 66C1E810            <1> 	shr eax,16
   168 00000121 A2[8A03]            <1> 	mov [gdtdos + 4],al
   169 00000124 A2[9203]            <1> 	mov [gdtdos2 + 4],al
   170 00000127 8826[8D03]          <1> 	mov [gdtdos + 7],ah
   171 0000012B 8826[9503]          <1> 	mov [gdtdos2 + 7],ah
   172                              <1> 	
   173                              <1> ; fix up gdt and idt
   174 0000012F 67668D83[3E030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   175 00000137 66A3[3403]          <1> 	mov [gdtr + 2],eax
   176 0000013B 67668D83[96030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   177 00000143 66A3[3A03]          <1> 	mov [idtr + 2],eax
   178 00000147 FA                  <1> 	cli
   179 00000148 0F0116[3203]        <1> 	lgdt [gdtr]
   180 0000014D 0F011E[3803]        <1> 	lidt [idtr]
   181 00000152 6631DB              <1> 	xor ebx, ebx
   182 00000155 8CDB                <1> 	mov bx, ds
   183 00000157 66891E[3E02]        <1> 	mov [basecache], ebx
   184 0000015C 0F20C0              <1> 	mov eax,cr0
   185 0000015F 0C01                <1> 	or al,1
   186 00000161 0F22C0              <1> 	mov cr0,eax
   187 00000164 EA[6901]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   188                              <1> [BITS 32]
   189                              <1> do_pm:
   190 00000169 31C0                <1> 	xor eax, eax
   191 0000016B 66B82000            <1> 	mov ax, SYS_DATA_SEL
   192 0000016F 8ED8                <1> 	mov ds, ax
   193 00000171 8EC0                <1> 	mov es, ax
   194 00000173 8EE0                <1> 	mov fs, ax
   195 00000175 66B83000            <1> 	mov ax, NEW_DATA_SEL
   196 00000179 8EE8                <1> 	mov gs, ax
   197                              <1> 	
   198                              <1> copykernel:
   199 0000017B 648B06              <1> 	mov eax, [fs:esi]
   200 0000017E 658906              <1> 	mov [gs:esi], eax
   201 00000181 81C604000000        <1> 	add esi, 4
   202 00000187 81FE[1A860000]      <1> 	cmp esi, bsscopy
   203 0000018D 72EC                <1> 	jb copykernel
   204 0000018F EA[96010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   205                              <1> 	
   206                              <1> done_copy:
   207 00000196 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   208 0000019A 8ED8                <1> 	mov ds, ax
   209 0000019C 8EC0                <1> 	mov es, ax
   210 0000019E 8EE0                <1> 	mov fs, ax
   211                              <1> 	;mov ax, STACK_SEL
   212 000001A0 8ED0                <1> 	mov ss, ax
   213 000001A2 BC[BA950000]        <1> 	mov esp, stackend
   214 000001A7 66B82000            <1> 	mov ax, SYS_DATA_SEL
   215 000001AB 8EE8                <1> 	mov gs, ax
   216                              <1> 	
   217 000001AD E8E7520000          <1> 	call initialize	;initialize drivers
   218                              <1> 	
   219 000001B2 A1[42020000]        <1> 	mov eax, [newcodecache]
   220 000001B7 C1E804              <1> 	shr eax, 4
   221 000001BA A3[3E020000]        <1> 	mov [basecache], eax
   222                              <1> 	
   223 000001BF BE[00BB3900]        <1> 	mov esi, bssend
   224 000001C4 31C0                <1> 	xor eax, eax
   225                              <1> clearkernelbuffers:
   226 000001C6 8906                <1> 	mov [esi], eax
   227 000001C8 81EE04000000        <1> 	sub esi, 4
   228 000001CE 81FE[1A860000]      <1> 	cmp esi, bsscopy
   229 000001D4 77F0                <1> 	ja clearkernelbuffers
   230 000001D6 FB                  <1> 	sti
   231                              <1> 
   232                              <1> getmemoryspace:
   233 000001D7 BE[DA830000]        <1> 	mov esi, memlistbuf
   234 000001DC 31FF                <1> 	xor edi, edi
   235 000001DE 668B3D[1A860000]    <1> 	mov di, [memlistend]
   236 000001E5 01F7                <1> 	add edi, esi
   237 000001E7 31C0                <1> 	xor eax, eax
   238                              <1> memoryspaceaddition:
   239 000001E9 39FE                <1> 	cmp esi, edi
   240 000001EB 7322                <1> 	jae finishedmemspacecalc
   241 000001ED 81C608000000        <1> 	add esi, 8
   242 000001F3 8B0E                <1> 	mov ecx, [esi]
   243 000001F5 81C608000000        <1> 	add esi, 8
   244 000001FB 8B1E                <1> 	mov ebx, [esi]
   245 000001FD 81C608000000        <1> 	add esi, 8
   246 00000203 81FB01000000        <1> 	cmp ebx, 1
   247 00000209 75DE                <1> 	jne memoryspaceaddition
   248 0000020B 01C8                <1> 	add eax, ecx
   249 0000020D EBDA                <1> 	jmp memoryspaceaddition
   250                              <1> finishedmemspacecalc:
   251 0000020F A3[4B020000]        <1> 	mov [memoryspace], eax
   252                              <1> %ifdef gui.included
   253 00000214 803D[D4830000]00    <1> 	cmp byte [guion], 0
   254 0000021B 741C                <1> 	je normalstartup
   255 0000021D 8B1D[3E020000]      <1> 	mov ebx, [basecache]
   256 00000223 C1E304              <1> 	shl ebx, 4
   257 00000226 8B3D[2F4B0000]      <1> 	mov edi, [physbaseptr]
   258 0000022C 29DF                <1> 	sub edi, ebx
   259 0000022E 893D[2F4B0000]      <1> 	mov [physbaseptr], edi
   260 00000234 E9A4570000          <1> 	jmp guiboot
   261                              <1> %endif
   262                              <1> normalstartup:
   263 00000239 E9E9240000          <1> 	jmp os
   264                              <1> 	
   265 0000023E 00000000            <1> basecache dd 0
   266 00000242 00001000            <1> newcodecache dd 0x100000
   267                              <1> 
   268 00000246 00                  <1> testingcpuspeed db 0
   269 00000247 00000000            <1> cpuspeedperint dd 0
   270 0000024B 00000000            <1> memoryspace dd 0
   271 0000024F 7D0A                <1> pitdiv dw 2685
   272 00000251 2E562200            <1> timeinterval dd 2250286
   273 00000255 00000000            <1> timeseconds dd 0
   274 00000259 00000000            <1> timenanoseconds dd 0
   275 0000025D 00                  <1> soundon db 0
   276 0000025E 0000                <1> soundrepititions dw 0
   277 00000260 00000000            <1> soundpos dd 0
   278 00000264 00000000            <1> soundendpos dd 0
   279                              <1> 
   280                              <1> cpuspeedend:
   281 00000268 C605[46020000]00    <1> 	mov byte [testingcpuspeed], 0
   282 0000026F A3[47020000]        <1> 	mov [cpuspeedperint], eax
   283 00000274 B8[62420000]        <1> 	mov eax, cpuspeedloopend
   284 00000279 890424              <1> 	mov [esp], eax
   285 0000027C E9AA000000          <1> 	jmp handled
   286                              <1> 
   287                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   288                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   289                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   290                              <1> 
   291                              <1> pitinterrupt: ;this controls threading
   292 00000281 FA                  <1> 	cli
   293 00000282 803D[46020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   294 00000289 74DD                <1> 	je cpuspeedend
   295                              <1> 		
   296 0000028B E874000000          <1> 	call timekeeper ;this updates the internal time
   297                              <1> 	
   298 00000290 803D[5D020000]01    <1> 	cmp byte [soundon], 1
   299 00000297 0F84714C0000        <1> 	je near PCSpeakerRAW
   300                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   301                              <1> %ifdef threads.included
   302 0000029D 803D[53590000]01    <1> 	cmp byte [threadson], 1
   303 000002A4 0F8449560000        <1> 	je near threadswitch
   304                              <1> %endif
   305                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   306 000002AA 803D[53590000]00    <1> 	cmp byte [threadson], 0
   307 000002B1 0F8474000000        <1> 	je near handled
   308                              <1> %ifdef io.serial
   309                              <1> 	jmp handled
   310                              <1> %else
   311 000002B7 FA                  <1> 	cli
   312 000002B8 60                  <1> 	pusha
   313 000002B9 E460                <1> 	in al, 60h
   314 000002BB 3C01                <1> 	cmp al, 1		;escape
   315 000002BD 7405                <1> 	je userint
   316 000002BF E965000000          <1> 	jmp handled2
   317                              <1> userint:
   318                              <1> 	;UNMASK ALL INTS
   319 000002C4 30C0                <1> 	xor al, al
   320 000002C6 E621                <1> 	out 0x21, al
   321 000002C8 30C0                <1> 	xor al, al
   322 000002CA E6A1                <1> 	out 0xA1, al
   323 000002CC B020                <1> 	mov al, 0x20
   324 000002CE E6A0                <1> 	out 0xA0, al
   325 000002D0 E620                <1> 	out 0x20, al
   326                              <1> 	;RESET PIT DIVISOR
   327 000002D2 66A1[4F020000]      <1> 	mov ax, [pitdiv]
   328 000002D8 E640                <1> 	out 0x40, al
   329 000002DA 66C1C008            <1> 	rol ax, 8
   330 000002DE E640                <1> 	out 0x40, al
   331                              <1> 	;RESET PIC
   332 000002E0 B020                <1> 	mov al, 0x20
   333 000002E2 E620                <1> 	out 0x20, al
   334 000002E4 61                  <1> 	popa
   335 000002E5 FB                  <1> 	sti
   336 000002E6 BC[BA950000]        <1> 	mov esp, stackend ;reset stack
   337 000002EB E9F0250000          <1> 	jmp nwcmd
   338                              <1> %endif
   339                              <1> %ifdef rtl8139.included
   340                              <1> rtl8139.irq:
   341                              <1> 	cli
   342                              <1> 	pusha
   343                              <1> 	mov edx, [basenicaddr]
   344                              <1> 	add edx, rtl8139.ISR
   345                              <1> 	xor eax, eax
   346                              <1> 	in ax, dx
   347                              <1> 	mov ecx, eax
   348                              <1> 	call showhex
   349                              <1> 	jmp handled2
   350                              <1> %endif
   351                              <1> %ifdef sound.included
   352                              <1> sblaster.irq:
   353 000002F0 FA                  <1> 	cli
   354 000002F1 60                  <1> 	pusha
   355 000002F2 803D[5A510000]01    <1> 	cmp byte [SoundBlaster], 1
   356 000002F9 0F84DC4C0000        <1> 	je near sblastercont
   357 000002FF E925000000          <1> 	jmp handled2
   358                              <1> %endif
   359                              <1> 	
   360                              <1> timekeeper:
   361 00000304 50                  <1> 	push eax
   362 00000305 A1[59020000]        <1> 	mov eax, [timenanoseconds]
   363 0000030A 0305[51020000]      <1> 	add eax, [timeinterval]
   364 00000310 3D00CA9A3B          <1> 	cmp eax, 1000000000
   365 00000315 720B                <1> 	jb nonanosecondrollover
   366 00000317 FF05[55020000]      <1> 	inc dword [timeseconds]
   367 0000031D 2D00CA9A3B          <1> 	sub eax, 1000000000
   368                              <1> nonanosecondrollover:
   369 00000322 A3[59020000]        <1> 	mov [timenanoseconds], eax
   370 00000327 58                  <1> 	pop eax
   371 00000328 C3                  <1> 	ret
   372                              <1> 	
   373                              <1> handled2:
   374 00000329 61                  <1> 	popa
   375                              <1> handled3:
   376 0000032A FB                  <1> 	sti
   377                              <1> handled:
   378 0000032B 50                  <1> 	push eax
   379 0000032C B020                <1> 	mov al, 0x20
   380 0000032E E620                <1> 	out 0x20, al
   381 00000330 58                  <1> 	pop eax
   382 00000331 CF                  <1> 	iret
   383                              <1> [BITS 16]
   384                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   385                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   386                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   387 00000332 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   388 00000334 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   389                              <1> 
   390 00000338 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   391 0000033A 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   392                              <1> 
   393                              <1> 
   394 0000033E 0000                <1> gdt:	dw 0			; limit 15:0
   395 00000340 0000                <1> 	dw 0			; base 15:0
   396 00000342 00                  <1> 	db 0			; base 23:16
   397 00000343 00                  <1> 	db 0			; type
   398 00000344 00                  <1> 	db 0			; limit 19:16, flags
   399 00000345 00                  <1> 	db 0			; base 31:24
   400                              <1> ; linear data segment descriptor
   401                              <1> LINEAR_SEL	equ	$-gdt
   402 00000346 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   403 00000348 0000                <1> 	dw 0			; base for this one is always 0
   404 0000034A 00                  <1> 	db 0
   405 0000034B 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   406 0000034C CF                  <1> 	db 0xCF			; page-granular, 32-bit
   407 0000034D 00                  <1> 	db 0
   408                              <1> STACK_SEL	equ $-gdt
   409 0000034E 0200                <1> gdts:	dw 2;(stackend)/4096
   410 00000350 0000                <1> 	dw 0
   411 00000352 00                  <1> 	db 0
   412 00000353 92                  <1> 	db 0x92
   413 00000354 CF                  <1> 	db 0xCF
   414 00000355 00                  <1> 	db 0
   415                              <1> ; code segment descriptor
   416                              <1> SYS_CODE_SEL	equ	$-gdt
   417 00000356 FFFF                <1> gdt2:	dw 0xFFFF
   418 00000358 0000                <1> 	dw 0			; (base gets set above)
   419 0000035A 00                  <1> 	db 0
   420 0000035B 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   421 0000035C CF                  <1> 	db 0xCF
   422 0000035D 00                  <1> 	db 0
   423                              <1> ; data segment descriptor
   424                              <1> SYS_DATA_SEL	equ	$-gdt
   425 0000035E FFFF                <1> gdt3:	dw 0xFFFF
   426 00000360 0000                <1> 	dw 0			; (base gets set above)
   427 00000362 00                  <1> 	db 0
   428 00000363 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   429 00000364 CF                  <1> 	db 0xCF
   430 00000365 00                  <1> 	db 0
   431                              <1> NEW_CODE_SEL	equ	$-gdt
   432 00000366 FFFF                <1> gdt4:	dw 0xFFFF
   433 00000368 0000                <1> 	dw 0			; (base gets set above)
   434 0000036A 00                  <1> 	db 0
   435 0000036B 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   436 0000036C CF                  <1> 	db 0xCF
   437 0000036D 00                  <1> 	db 0
   438                              <1> ; data segment descriptor
   439                              <1> NEW_DATA_SEL	equ	$-gdt
   440 0000036E FFFF                <1> gdt5:	dw 0xFFFF
   441 00000370 0000                <1> 	dw 0			; (base gets set above)
   442 00000372 00                  <1> 	db 0
   443 00000373 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   444 00000374 CF                  <1> 	db 0xCF
   445 00000375 00                  <1> 	db 0
   446                              <1> V8086_CODE_SEL	equ $-gdt
   447 00000376 FFFF                <1> gdtv8086: dw 0xFFFF
   448 00000378 0000                <1> 	dw 0
   449 0000037A 00                  <1> 	db 0
   450 0000037B 9A                  <1> 	db 0x9A
   451 0000037C 8F                  <1> 	db 0x8F
   452 0000037D 00                  <1> 	db 0
   453                              <1> V8086_DATA_SEL	equ $-gdt
   454 0000037E FFFF                <1> gdtv80862: dw 0xFFFF
   455 00000380 0000                <1> 	dw 0
   456 00000382 00                  <1> 	db 0
   457 00000383 92                  <1> 	db 0x92
   458 00000384 8F                  <1> 	db 0x8F
   459 00000385 00                  <1> 	db 0
   460                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   461 00000386 0001                <1> gdtdos:	dw 256	;give it 1 MB
   462 00000388 0000                <1> 	dw 0
   463 0000038A 00                  <1> 	db 0
   464 0000038B 9A                  <1> 	db 0x9A
   465 0000038C 8F                  <1> 	db 0x8F ;16 bit
   466 0000038D 00                  <1> 	db 0
   467                              <1> DOS_DATA_SEL 	equ $-gdt
   468 0000038E 0001                <1> gdtdos2:	dw 256
   469 00000390 0000                <1> 	dw 0
   470 00000392 00                  <1> 	db 0
   471 00000393 92                  <1> 	db 0x92
   472 00000394 8F                  <1> 	db 0x8F ;16 bit
   473 00000395 00                  <1> 	db 0
   474                              <1> gdt_end:
   475                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   476                              <1> ;	interrupt descriptor table (IDT)
   477                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   478                              <1> ; 32 reserved interrupts:
   479                              <1> idt:	
   480                              <1> %assign i 0
   481                              <1> %rep    32
   482                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   483                              <1> %assign i i+1
   484                              <1> %endrep
   485 00000396 [B70C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   486                              <2> %assign i i+1
   487 0000039E [C30C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   488                              <2> %assign i i+1
   489 000003A6 [CF0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   490                              <2> %assign i i+1
   491 000003AE [DB0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   492                              <2> %assign i i+1
   493 000003B6 [E70C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   494                              <2> %assign i i+1
   495 000003BE [F30C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   496                              <2> %assign i i+1
   497 000003C6 [FF0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   498                              <2> %assign i i+1
   499 000003CE [0B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   500                              <2> %assign i i+1
   501 000003D6 [170D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   502                              <2> %assign i i+1
   503 000003DE [230D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   504                              <2> %assign i i+1
   505 000003E6 [2F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   506                              <2> %assign i i+1
   507 000003EE [3B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   508                              <2> %assign i i+1
   509 000003F6 [470D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   510                              <2> %assign i i+1
   511 000003FE [530D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   512                              <2> %assign i i+1
   513 00000406 [5F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   514                              <2> %assign i i+1
   515 0000040E [6B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   516                              <2> %assign i i+1
   517 00000416 [770D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   518                              <2> %assign i i+1
   519 0000041E [830D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   520                              <2> %assign i i+1
   521 00000426 [8F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   522                              <2> %assign i i+1
   523 0000042E [9B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   524                              <2> %assign i i+1
   525 00000436 [A70D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   526                              <2> %assign i i+1
   527 0000043E [B30D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   528                              <2> %assign i i+1
   529 00000446 [BF0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   530                              <2> %assign i i+1
   531 0000044E [CB0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   532                              <2> %assign i i+1
   533 00000456 [D70D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   534                              <2> %assign i i+1
   535 0000045E [E30D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   536                              <2> %assign i i+1
   537 00000466 [EF0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   538                              <2> %assign i i+1
   539 0000046E [FB0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   540                              <2> %assign i i+1
   541 00000476 [070E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   542                              <2> %assign i i+1
   543 0000047E [130E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   544                              <2> %assign i i+1
   545 00000486 [1F0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   546                              <2> %assign i i+1
   547 0000048E [2B0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   548                              <2> %assign i i+1
   549 00000496 [F825]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   550 0000049E [FC25]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   551                              <1> %assign i 0x22
   552                              <1> %rep 14
   553                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   554                              <1> %assign i +1
   555                              <1> %endrep
   556 000004A6 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   557                              <2> %assign i +1
   558 000004AE [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   559                              <2> %assign i +1
   560 000004B6 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   561                              <2> %assign i +1
   562 000004BE [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   563                              <2> %assign i +1
   564 000004C6 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   565                              <2> %assign i +1
   566 000004CE [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   567                              <2> %assign i +1
   568 000004D6 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   569                              <2> %assign i +1
   570 000004DE [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   571                              <2> %assign i +1
   572 000004E6 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   573                              <2> %assign i +1
   574 000004EE [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   575                              <2> %assign i +1
   576 000004F6 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   577                              <2> %assign i +1
   578 000004FE [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   579                              <2> %assign i +1
   580 00000506 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   581                              <2> %assign i +1
   582 0000050E [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   583                              <2> %assign i +1
   584                              <1> ;INT 30h for os use and 3rd party use:
   585 00000516 [A51B]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   586                              <1> %assign i 0x31
   587                              <1> %rep 15
   588                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   589                              <1> %assign i +1
   590                              <1> %endrep
   591 0000051E [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   592                              <2> %assign i +1
   593 00000526 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   594                              <2> %assign i +1
   595 0000052E [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   596                              <2> %assign i +1
   597 00000536 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   598                              <2> %assign i +1
   599 0000053E [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   600                              <2> %assign i +1
   601 00000546 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   602                              <2> %assign i +1
   603 0000054E [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   604                              <2> %assign i +1
   605 00000556 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   606                              <2> %assign i +1
   607 0000055E [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   608                              <2> %assign i +1
   609 00000566 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   610                              <2> %assign i +1
   611 0000056E [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   612                              <2> %assign i +1
   613 00000576 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   614                              <2> %assign i +1
   615 0000057E [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   616                              <2> %assign i +1
   617 00000586 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   618                              <2> %assign i +1
   619 0000058E [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   620                              <2> %assign i +1
   621                              <1> ;and here we are at 0x40
   622                              <1> ;here are all the irq's
   623 00000596 [8102]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   624 0000059E [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   625 000005A6 [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   626 000005AE [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   627 000005B6 [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   628                              <1> 	%ifdef sound.included
   629 000005BE [F002]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   630                              <1> 	%else
   631                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   632                              <1> 	%endif
   633 000005C6 [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   634 000005CE [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   635 000005D6 [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   636 000005DE [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 9
   637 000005E6 [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   638                              <1> 	%ifdef rtl8139.included
   639                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   640                              <1> 	%else
   641 000005EE [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   642                              <1> 	%endif
   643 000005F6 [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   644 000005FE [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   645 00000606 [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   646 0000060E [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   647                              <1> ;This brings me up to 0x50
   648                              <1> %assign i 0x50
   649                              <1> %rep 176
   650                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   651                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   652                              <1> %assign i +1
   653                              <1> %endrep
   654 00000616 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   655                              <2> 
   656                              <2> %assign i +1
   657 0000061E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   658                              <2> 
   659                              <2> %assign i +1
   660 00000626 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   661                              <2> 
   662                              <2> %assign i +1
   663 0000062E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   664                              <2> 
   665                              <2> %assign i +1
   666 00000636 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   667                              <2> 
   668                              <2> %assign i +1
   669 0000063E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   670                              <2> 
   671                              <2> %assign i +1
   672 00000646 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   673                              <2> 
   674                              <2> %assign i +1
   675 0000064E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   676                              <2> 
   677                              <2> %assign i +1
   678 00000656 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   679                              <2> 
   680                              <2> %assign i +1
   681 0000065E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   682                              <2> 
   683                              <2> %assign i +1
   684 00000666 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   685                              <2> 
   686                              <2> %assign i +1
   687 0000066E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   688                              <2> 
   689                              <2> %assign i +1
   690 00000676 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   691                              <2> 
   692                              <2> %assign i +1
   693 0000067E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   694                              <2> 
   695                              <2> %assign i +1
   696 00000686 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   697                              <2> 
   698                              <2> %assign i +1
   699 0000068E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   700                              <2> 
   701                              <2> %assign i +1
   702 00000696 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   703                              <2> 
   704                              <2> %assign i +1
   705 0000069E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   706                              <2> 
   707                              <2> %assign i +1
   708 000006A6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   709                              <2> 
   710                              <2> %assign i +1
   711 000006AE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   712                              <2> 
   713                              <2> %assign i +1
   714 000006B6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   715                              <2> 
   716                              <2> %assign i +1
   717 000006BE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   718                              <2> 
   719                              <2> %assign i +1
   720 000006C6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   721                              <2> 
   722                              <2> %assign i +1
   723 000006CE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   724                              <2> 
   725                              <2> %assign i +1
   726 000006D6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   727                              <2> 
   728                              <2> %assign i +1
   729 000006DE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   730                              <2> 
   731                              <2> %assign i +1
   732 000006E6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   733                              <2> 
   734                              <2> %assign i +1
   735 000006EE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   736                              <2> 
   737                              <2> %assign i +1
   738 000006F6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   739                              <2> 
   740                              <2> %assign i +1
   741 000006FE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   742                              <2> 
   743                              <2> %assign i +1
   744 00000706 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   745                              <2> 
   746                              <2> %assign i +1
   747 0000070E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   748                              <2> 
   749                              <2> %assign i +1
   750 00000716 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   751                              <2> 
   752                              <2> %assign i +1
   753 0000071E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   754                              <2> 
   755                              <2> %assign i +1
   756 00000726 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   757                              <2> 
   758                              <2> %assign i +1
   759 0000072E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   760                              <2> 
   761                              <2> %assign i +1
   762 00000736 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   763                              <2> 
   764                              <2> %assign i +1
   765 0000073E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   766                              <2> 
   767                              <2> %assign i +1
   768 00000746 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   769                              <2> 
   770                              <2> %assign i +1
   771 0000074E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   772                              <2> 
   773                              <2> %assign i +1
   774 00000756 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   775                              <2> 
   776                              <2> %assign i +1
   777 0000075E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   778                              <2> 
   779                              <2> %assign i +1
   780 00000766 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   781                              <2> 
   782                              <2> %assign i +1
   783 0000076E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   784                              <2> 
   785                              <2> %assign i +1
   786 00000776 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   787                              <2> 
   788                              <2> %assign i +1
   789 0000077E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   790                              <2> 
   791                              <2> %assign i +1
   792 00000786 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   793                              <2> 
   794                              <2> %assign i +1
   795 0000078E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   796                              <2> 
   797                              <2> %assign i +1
   798 00000796 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   799                              <2> 
   800                              <2> %assign i +1
   801 0000079E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   802                              <2> 
   803                              <2> %assign i +1
   804 000007A6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   805                              <2> 
   806                              <2> %assign i +1
   807 000007AE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   808                              <2> 
   809                              <2> %assign i +1
   810 000007B6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   811                              <2> 
   812                              <2> %assign i +1
   813 000007BE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   814                              <2> 
   815                              <2> %assign i +1
   816 000007C6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   817                              <2> 
   818                              <2> %assign i +1
   819 000007CE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   820                              <2> 
   821                              <2> %assign i +1
   822 000007D6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   823                              <2> 
   824                              <2> %assign i +1
   825 000007DE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   826                              <2> 
   827                              <2> %assign i +1
   828 000007E6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   829                              <2> 
   830                              <2> %assign i +1
   831 000007EE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   832                              <2> 
   833                              <2> %assign i +1
   834 000007F6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   835                              <2> 
   836                              <2> %assign i +1
   837 000007FE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   838                              <2> 
   839                              <2> %assign i +1
   840 00000806 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   841                              <2> 
   842                              <2> %assign i +1
   843 0000080E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   844                              <2> 
   845                              <2> %assign i +1
   846 00000816 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   847                              <2> 
   848                              <2> %assign i +1
   849 0000081E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   850                              <2> 
   851                              <2> %assign i +1
   852 00000826 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   853                              <2> 
   854                              <2> %assign i +1
   855 0000082E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   856                              <2> 
   857                              <2> %assign i +1
   858 00000836 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   859                              <2> 
   860                              <2> %assign i +1
   861 0000083E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   862                              <2> 
   863                              <2> %assign i +1
   864 00000846 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   865                              <2> 
   866                              <2> %assign i +1
   867 0000084E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   868                              <2> 
   869                              <2> %assign i +1
   870 00000856 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   871                              <2> 
   872                              <2> %assign i +1
   873 0000085E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   874                              <2> 
   875                              <2> %assign i +1
   876 00000866 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   877                              <2> 
   878                              <2> %assign i +1
   879 0000086E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   880                              <2> 
   881                              <2> %assign i +1
   882 00000876 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   883                              <2> 
   884                              <2> %assign i +1
   885 0000087E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   886                              <2> 
   887                              <2> %assign i +1
   888 00000886 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   889                              <2> 
   890                              <2> %assign i +1
   891 0000088E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   892                              <2> 
   893                              <2> %assign i +1
   894 00000896 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   895                              <2> 
   896                              <2> %assign i +1
   897 0000089E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   898                              <2> 
   899                              <2> %assign i +1
   900 000008A6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   901                              <2> 
   902                              <2> %assign i +1
   903 000008AE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   904                              <2> 
   905                              <2> %assign i +1
   906 000008B6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   907                              <2> 
   908                              <2> %assign i +1
   909 000008BE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   910                              <2> 
   911                              <2> %assign i +1
   912 000008C6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   913                              <2> 
   914                              <2> %assign i +1
   915 000008CE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   916                              <2> 
   917                              <2> %assign i +1
   918 000008D6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   919                              <2> 
   920                              <2> %assign i +1
   921 000008DE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   922                              <2> 
   923                              <2> %assign i +1
   924 000008E6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   925                              <2> 
   926                              <2> %assign i +1
   927 000008EE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   928                              <2> 
   929                              <2> %assign i +1
   930 000008F6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   931                              <2> 
   932                              <2> %assign i +1
   933 000008FE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   934                              <2> 
   935                              <2> %assign i +1
   936 00000906 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   937                              <2> 
   938                              <2> %assign i +1
   939 0000090E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   940                              <2> 
   941                              <2> %assign i +1
   942 00000916 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   943                              <2> 
   944                              <2> %assign i +1
   945 0000091E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   946                              <2> 
   947                              <2> %assign i +1
   948 00000926 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   949                              <2> 
   950                              <2> %assign i +1
   951 0000092E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   952                              <2> 
   953                              <2> %assign i +1
   954 00000936 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   955                              <2> 
   956                              <2> %assign i +1
   957 0000093E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   958                              <2> 
   959                              <2> %assign i +1
   960 00000946 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   961                              <2> 
   962                              <2> %assign i +1
   963 0000094E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   964                              <2> 
   965                              <2> %assign i +1
   966 00000956 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   967                              <2> 
   968                              <2> %assign i +1
   969 0000095E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   970                              <2> 
   971                              <2> %assign i +1
   972 00000966 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   973                              <2> 
   974                              <2> %assign i +1
   975 0000096E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   976                              <2> 
   977                              <2> %assign i +1
   978 00000976 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   979                              <2> 
   980                              <2> %assign i +1
   981 0000097E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   982                              <2> 
   983                              <2> %assign i +1
   984 00000986 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   985                              <2> 
   986                              <2> %assign i +1
   987 0000098E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   988                              <2> 
   989                              <2> %assign i +1
   990 00000996 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   991                              <2> 
   992                              <2> %assign i +1
   993 0000099E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   994                              <2> 
   995                              <2> %assign i +1
   996 000009A6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   997                              <2> 
   998                              <2> %assign i +1
   999 000009AE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1000                              <2> 
  1001                              <2> %assign i +1
  1002 000009B6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1003                              <2> 
  1004                              <2> %assign i +1
  1005 000009BE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1006                              <2> 
  1007                              <2> %assign i +1
  1008 000009C6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1009                              <2> 
  1010                              <2> %assign i +1
  1011 000009CE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1012                              <2> 
  1013                              <2> %assign i +1
  1014 000009D6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1015                              <2> 
  1016                              <2> %assign i +1
  1017 000009DE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1018                              <2> 
  1019                              <2> %assign i +1
  1020 000009E6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1021                              <2> 
  1022                              <2> %assign i +1
  1023 000009EE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1024                              <2> 
  1025                              <2> %assign i +1
  1026 000009F6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1027                              <2> 
  1028                              <2> %assign i +1
  1029 000009FE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1030                              <2> 
  1031                              <2> %assign i +1
  1032 00000A06 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1033                              <2> 
  1034                              <2> %assign i +1
  1035 00000A0E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1036                              <2> 
  1037                              <2> %assign i +1
  1038 00000A16 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1039                              <2> 
  1040                              <2> %assign i +1
  1041 00000A1E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1042                              <2> 
  1043                              <2> %assign i +1
  1044 00000A26 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1045                              <2> 
  1046                              <2> %assign i +1
  1047 00000A2E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1048                              <2> 
  1049                              <2> %assign i +1
  1050 00000A36 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1051                              <2> 
  1052                              <2> %assign i +1
  1053 00000A3E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1054                              <2> 
  1055                              <2> %assign i +1
  1056 00000A46 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1057                              <2> 
  1058                              <2> %assign i +1
  1059 00000A4E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1060                              <2> 
  1061                              <2> %assign i +1
  1062 00000A56 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1063                              <2> 
  1064                              <2> %assign i +1
  1065 00000A5E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1066                              <2> 
  1067                              <2> %assign i +1
  1068 00000A66 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1069                              <2> 
  1070                              <2> %assign i +1
  1071 00000A6E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1072                              <2> 
  1073                              <2> %assign i +1
  1074 00000A76 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1075                              <2> 
  1076                              <2> %assign i +1
  1077 00000A7E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1078                              <2> 
  1079                              <2> %assign i +1
  1080 00000A86 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1081                              <2> 
  1082                              <2> %assign i +1
  1083 00000A8E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1084                              <2> 
  1085                              <2> %assign i +1
  1086 00000A96 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1087                              <2> 
  1088                              <2> %assign i +1
  1089 00000A9E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1090                              <2> 
  1091                              <2> %assign i +1
  1092 00000AA6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1093                              <2> 
  1094                              <2> %assign i +1
  1095 00000AAE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1096                              <2> 
  1097                              <2> %assign i +1
  1098 00000AB6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1099                              <2> 
  1100                              <2> %assign i +1
  1101 00000ABE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1102                              <2> 
  1103                              <2> %assign i +1
  1104 00000AC6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1105                              <2> 
  1106                              <2> %assign i +1
  1107 00000ACE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1108                              <2> 
  1109                              <2> %assign i +1
  1110 00000AD6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1111                              <2> 
  1112                              <2> %assign i +1
  1113 00000ADE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1114                              <2> 
  1115                              <2> %assign i +1
  1116 00000AE6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1117                              <2> 
  1118                              <2> %assign i +1
  1119 00000AEE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1120                              <2> 
  1121                              <2> %assign i +1
  1122 00000AF6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1123                              <2> 
  1124                              <2> %assign i +1
  1125 00000AFE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1126                              <2> 
  1127                              <2> %assign i +1
  1128 00000B06 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1129                              <2> 
  1130                              <2> %assign i +1
  1131 00000B0E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1132                              <2> 
  1133                              <2> %assign i +1
  1134 00000B16 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1135                              <2> 
  1136                              <2> %assign i +1
  1137 00000B1E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1138                              <2> 
  1139                              <2> %assign i +1
  1140 00000B26 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1141                              <2> 
  1142                              <2> %assign i +1
  1143 00000B2E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1144                              <2> 
  1145                              <2> %assign i +1
  1146 00000B36 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1147                              <2> 
  1148                              <2> %assign i +1
  1149 00000B3E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1150                              <2> 
  1151                              <2> %assign i +1
  1152 00000B46 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1153                              <2> 
  1154                              <2> %assign i +1
  1155 00000B4E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1156                              <2> 
  1157                              <2> %assign i +1
  1158 00000B56 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1159                              <2> 
  1160                              <2> %assign i +1
  1161 00000B5E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1162                              <2> 
  1163                              <2> %assign i +1
  1164 00000B66 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1165                              <2> 
  1166                              <2> %assign i +1
  1167 00000B6E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1168                              <2> 
  1169                              <2> %assign i +1
  1170 00000B76 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1171                              <2> 
  1172                              <2> %assign i +1
  1173 00000B7E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1174                              <2> 
  1175                              <2> %assign i +1
  1176 00000B86 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1177                              <2> 
  1178                              <2> %assign i +1
  1179 00000B8E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1180                              <2> 
  1181                              <2> %assign i +1
  1182                              <1> idt_end:
  1183                              <1> [BITS 32]
  1184                                  	%include "source/realmode.asm"
  1185                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1186                              <1> 			;and the return address is in realmodereturn
  1187 00000B96 FA                  <1> 	cli
  1188 00000B97 A3[A90C0000]        <1> 	mov [realmodeeax], eax
  1189 00000B9C 891D[A50C0000]      <1> 	mov [realmodeebx], ebx
  1190 00000BA2 8925[970C0000]      <1> 	mov [pmodeesp], esp
  1191                              <1> 
  1192 00000BA8 BB[A10C0000]        <1> 	mov ebx, cr0old
  1193                              <1> rmcopytofirstmbyte:
  1194 00000BAD 8B03                <1> 	mov eax, [ebx]
  1195 00000BAF 658903              <1> 	mov [gs:ebx], eax
  1196 00000BB2 81C304000000        <1> 	add ebx, 4
  1197 00000BB8 81FB[B10C0000]      <1> 	cmp ebx, realmodeptr
  1198 00000BBE 76ED                <1> 	jbe rmcopytofirstmbyte
  1199                              <1> 
  1200 00000BC0 EA[C70B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1201                              <1> 
  1202                              <1> [BITS 16]
  1203                              <1> protected16bit:
  1204 00000BC7 B84000              <1> 	mov ax, V8086_DATA_SEL
  1205 00000BCA 8ED8                <1> 	mov ds, ax
  1206 00000BCC 8EC0                <1> 	mov es, ax
  1207 00000BCE 8EE0                <1> 	mov fs, ax
  1208 00000BD0 8EE8                <1> 	mov gs, ax
  1209 00000BD2 8ED0                <1> 	mov ss, ax
  1210 00000BD4 66BC[BA950000]      <1> 	mov esp, stackend
  1211 00000BDA 0F20C0              <1> 	mov eax, cr0
  1212 00000BDD 66A3[A10C]          <1> 	mov [cr0old], eax
  1213 00000BE1 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1214 00000BE7 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1215 00000BEA EA[EF0B]0010        <1> 	jmp 0x1000:inrealmode
  1216                              <1> 
  1217                              <1> inrealmode:
  1218 00000BEF 8CC8                <1> 	mov ax, cs
  1219 00000BF1 8ED8                <1> 	mov ds, ax
  1220 00000BF3 8EC0                <1> 	mov es, ax
  1221 00000BF5 8EE0                <1> 	mov fs, ax
  1222 00000BF7 8EE8                <1> 	mov gs, ax
  1223 00000BF9 8ED0                <1> 	mov ss, ax
  1224 00000BFB BC[BA95]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1225                              <1> 	
  1226 00000BFE B011                <1> 	mov al, 0x11
  1227 00000C00 E620                <1> 	out 0x20, al
  1228 00000C02 E6A0                <1> 	out 0xA0, al
  1229 00000C04 B008                <1> 	mov al, 0x8		;interrupt for master
  1230 00000C06 E621                <1> 	out 0x21, al
  1231 00000C08 B070                <1> 	mov al, 0x70	;interrupt for slave
  1232 00000C0A E6A1                <1> 	out 0xA1, al
  1233 00000C0C B004                <1> 	mov al, 4
  1234 00000C0E E621                <1> 	out 0x21, al
  1235 00000C10 B002                <1> 	mov al, 2
  1236 00000C12 E6A1                <1> 	out 0xA1, al
  1237 00000C14 B001                <1> 	mov al, 0x1
  1238 00000C16 E621                <1> 	out 0x21, al
  1239 00000C18 B001                <1> 	mov al, 0x1
  1240 00000C1A E6A1                <1> 	out 0xA1, al
  1241                              <1> 	
  1242 00000C1C 0F011E[9B0C]        <1> 	lidt [idt_real]
  1243 00000C21 FB                  <1> 	sti
  1244                              <1> 
  1245 00000C22 66A1[A90C]          <1> 	mov eax, [realmodeeax]
  1246 00000C26 668B1E[A50C]        <1> 	mov ebx, [realmodeebx]
  1247                              <1> 
  1248 00000C2B FF16[B10C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1249                              <1> 
  1250 00000C2F 66A3[A90C]          <1> 	mov [realmodeeax], eax
  1251 00000C33 66891E[A50C]        <1> 	mov [realmodeebx], ebx
  1252                              <1> 
  1253 00000C38 FA                  <1> 	cli
  1254 00000C39 0F0116[3203]        <1> 	lgdt [gdtr]
  1255 00000C3E 0F011E[3803]        <1> 	lidt [idtr]
  1256 00000C43 0F20C0              <1> 	mov eax, cr0
  1257 00000C46 0C01                <1> 	or al, 1
  1258 00000C48 0F22C0              <1> 	mov cr0,eax
  1259 00000C4B EA[500C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1260                              <1> 
  1261                              <1> [BITS 32]
  1262                              <1> returntopmode:
  1263 00000C50 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1264 00000C54 8ED8                <1> 	mov ds, ax
  1265 00000C56 8EC0                <1> 	mov es, ax
  1266 00000C58 8EE0                <1> 	mov fs, ax
  1267 00000C5A 8ED0                <1> 	mov ss, ax
  1268 00000C5C 8B25[970C0000]      <1> 	mov esp, [pmodeesp]
  1269 00000C62 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1270 00000C66 8EE8                <1> 	mov gs, ax
  1271                              <1> 
  1272 00000C68 BB[A10C0000]        <1> 	mov ebx, cr0old
  1273                              <1> rmcopyfromfirstmbyte:
  1274 00000C6D 658B03              <1> 	mov eax, [gs:ebx]
  1275 00000C70 8903                <1> 	mov [ebx], eax
  1276 00000C72 81C304000000        <1> 	add ebx, 4
  1277 00000C78 81FB[B10C0000]      <1> 	cmp ebx, realmodeptr
  1278 00000C7E 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1279                              <1> 
  1280 00000C80 E832480000          <1> 	call initialize.pic ;reset irq's and masks
  1281 00000C85 FB                  <1> 	sti
  1282 00000C86 A1[A90C0000]        <1> 	mov eax, [realmodeeax]
  1283 00000C8B 8B1D[A50C0000]      <1> 	mov ebx, [realmodeebx]
  1284 00000C91 FF25[AD0C0000]      <1> 	jmp dword [realmodereturn]
  1285                              <1> 	
  1286 00000C97 00000000            <1> pmodeesp dd 0
  1287                              <1> idt_real:
  1288 00000C9B FF03                <1> 	dw 0x3FF
  1289 00000C9D 00000000            <1> 	dd 0
  1290 00000CA1 00000000            <1> cr0old dd 0
  1291 00000CA5 00000000            <1> realmodeebx dd 0
  1292 00000CA9 00000000            <1> realmodeeax dd 0
  1293 00000CAD 00000000            <1> realmodereturn dd 0
  1294 00000CB1 0000                <1> realmodeptr dw 0
  1295 00000CB3 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1296                                  [BITS 32]
  1297                                      %include "source/exception.asm"
  1298                              <1> %ifdef exceptions.included
  1299                              <1> unhand:	
  1300                              <1> 	%assign i 0
  1301                              <1> 	%rep 32
  1302                              <1> 	mov byte [intprob], i
  1303                              <1> 	jmp unhand2
  1304                              <1> 	%assign i i+1
  1305                              <1> 	%endrep
  1306 00000CB7 C605[64110000]00    <2>  mov byte [intprob], i
  1307 00000CBE E974010000          <2>  jmp unhand2
  1308                              <2>  %assign i i+1
  1309 00000CC3 C605[64110000]01    <2>  mov byte [intprob], i
  1310 00000CCA E968010000          <2>  jmp unhand2
  1311                              <2>  %assign i i+1
  1312 00000CCF C605[64110000]02    <2>  mov byte [intprob], i
  1313 00000CD6 E95C010000          <2>  jmp unhand2
  1314                              <2>  %assign i i+1
  1315 00000CDB C605[64110000]03    <2>  mov byte [intprob], i
  1316 00000CE2 E950010000          <2>  jmp unhand2
  1317                              <2>  %assign i i+1
  1318 00000CE7 C605[64110000]04    <2>  mov byte [intprob], i
  1319 00000CEE E944010000          <2>  jmp unhand2
  1320                              <2>  %assign i i+1
  1321 00000CF3 C605[64110000]05    <2>  mov byte [intprob], i
  1322 00000CFA E938010000          <2>  jmp unhand2
  1323                              <2>  %assign i i+1
  1324 00000CFF C605[64110000]06    <2>  mov byte [intprob], i
  1325 00000D06 E92C010000          <2>  jmp unhand2
  1326                              <2>  %assign i i+1
  1327 00000D0B C605[64110000]07    <2>  mov byte [intprob], i
  1328 00000D12 E920010000          <2>  jmp unhand2
  1329                              <2>  %assign i i+1
  1330 00000D17 C605[64110000]08    <2>  mov byte [intprob], i
  1331 00000D1E E914010000          <2>  jmp unhand2
  1332                              <2>  %assign i i+1
  1333 00000D23 C605[64110000]09    <2>  mov byte [intprob], i
  1334 00000D2A E908010000          <2>  jmp unhand2
  1335                              <2>  %assign i i+1
  1336 00000D2F C605[64110000]0A    <2>  mov byte [intprob], i
  1337 00000D36 E9FC000000          <2>  jmp unhand2
  1338                              <2>  %assign i i+1
  1339 00000D3B C605[64110000]0B    <2>  mov byte [intprob], i
  1340 00000D42 E9F0000000          <2>  jmp unhand2
  1341                              <2>  %assign i i+1
  1342 00000D47 C605[64110000]0C    <2>  mov byte [intprob], i
  1343 00000D4E E9E4000000          <2>  jmp unhand2
  1344                              <2>  %assign i i+1
  1345 00000D53 C605[64110000]0D    <2>  mov byte [intprob], i
  1346 00000D5A E9D8000000          <2>  jmp unhand2
  1347                              <2>  %assign i i+1
  1348 00000D5F C605[64110000]0E    <2>  mov byte [intprob], i
  1349 00000D66 E9CC000000          <2>  jmp unhand2
  1350                              <2>  %assign i i+1
  1351 00000D6B C605[64110000]0F    <2>  mov byte [intprob], i
  1352 00000D72 E9C0000000          <2>  jmp unhand2
  1353                              <2>  %assign i i+1
  1354 00000D77 C605[64110000]10    <2>  mov byte [intprob], i
  1355 00000D7E E9B4000000          <2>  jmp unhand2
  1356                              <2>  %assign i i+1
  1357 00000D83 C605[64110000]11    <2>  mov byte [intprob], i
  1358 00000D8A E9A8000000          <2>  jmp unhand2
  1359                              <2>  %assign i i+1
  1360 00000D8F C605[64110000]12    <2>  mov byte [intprob], i
  1361 00000D96 E99C000000          <2>  jmp unhand2
  1362                              <2>  %assign i i+1
  1363 00000D9B C605[64110000]13    <2>  mov byte [intprob], i
  1364 00000DA2 E990000000          <2>  jmp unhand2
  1365                              <2>  %assign i i+1
  1366 00000DA7 C605[64110000]14    <2>  mov byte [intprob], i
  1367 00000DAE E984000000          <2>  jmp unhand2
  1368                              <2>  %assign i i+1
  1369 00000DB3 C605[64110000]15    <2>  mov byte [intprob], i
  1370 00000DBA E978000000          <2>  jmp unhand2
  1371                              <2>  %assign i i+1
  1372 00000DBF C605[64110000]16    <2>  mov byte [intprob], i
  1373 00000DC6 E96C000000          <2>  jmp unhand2
  1374                              <2>  %assign i i+1
  1375 00000DCB C605[64110000]17    <2>  mov byte [intprob], i
  1376 00000DD2 E960000000          <2>  jmp unhand2
  1377                              <2>  %assign i i+1
  1378 00000DD7 C605[64110000]18    <2>  mov byte [intprob], i
  1379 00000DDE E954000000          <2>  jmp unhand2
  1380                              <2>  %assign i i+1
  1381 00000DE3 C605[64110000]19    <2>  mov byte [intprob], i
  1382 00000DEA E948000000          <2>  jmp unhand2
  1383                              <2>  %assign i i+1
  1384 00000DEF C605[64110000]1A    <2>  mov byte [intprob], i
  1385 00000DF6 E93C000000          <2>  jmp unhand2
  1386                              <2>  %assign i i+1
  1387 00000DFB C605[64110000]1B    <2>  mov byte [intprob], i
  1388 00000E02 E930000000          <2>  jmp unhand2
  1389                              <2>  %assign i i+1
  1390 00000E07 C605[64110000]1C    <2>  mov byte [intprob], i
  1391 00000E0E E924000000          <2>  jmp unhand2
  1392                              <2>  %assign i i+1
  1393 00000E13 C605[64110000]1D    <2>  mov byte [intprob], i
  1394 00000E1A E918000000          <2>  jmp unhand2
  1395                              <2>  %assign i i+1
  1396 00000E1F C605[64110000]1E    <2>  mov byte [intprob], i
  1397 00000E26 E90C000000          <2>  jmp unhand2
  1398                              <2>  %assign i i+1
  1399 00000E2B C605[64110000]1F    <2>  mov byte [intprob], i
  1400 00000E32 E900000000          <2>  jmp unhand2
  1401                              <2>  %assign i i+1
  1402                              <1> unhand2:
  1403 00000E37 FA                  <1> 	cli
  1404 00000E38 1E                  <1> 	push ds
  1405 00000E39 06                  <1> 	push es
  1406 00000E3A 0FA0                <1> 	push fs
  1407 00000E3C 0FA8                <1> 	push gs
  1408 00000E3E 16                  <1> 	push ss
  1409 00000E3F 60                  <1> 	pushad
  1410                              <1> %ifdef gui.included
  1411 00000E40 803D[D4830000]00    <1> 	cmp byte [guion], 0
  1412 00000E47 0F8432000000        <1> 	je near noguiunhandstuff
  1413 00000E4D 66C705[5E110000]08- <1> 	mov word [locunhandy], 8
  1414 00000E55 00                  <1>
  1415 00000E56 66C705[60110000]08- <1> 	mov word [locunhandx], 8
  1416 00000E5E 00                  <1>
  1417 00000E5F 668B1D[D9590000]    <1> 	mov bx, [background]
  1418 00000E66 66891D[62110000]    <1> 	mov [backgroundcache], bx
  1419 00000E6D C605[094C0000]01    <1> 	mov byte [mousedisabled],1
  1420 00000E74 66BB00F8            <1> 	mov bx, 1111100000000000b
  1421 00000E78 66891D[D9590000]    <1> 	mov [background], bx
  1422                              <1> noguiunhandstuff:
  1423                              <1> %endif
  1424 00000E7F 89E6                <1> 	mov esi, esp
  1425 00000E81 8935[52110000]      <1> 	mov [espfirst], esi
  1426 00000E87 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1427 00000E8D 8935[4E110000]      <1> 	mov [esploc], esi
  1428 00000E93 BE[73110000]        <1> 	mov esi, unhandmsg
  1429 00000E98 8935[56110000]      <1> 	mov [esiloc], esi
  1430 00000E9E 31C9                <1> 	xor ecx, ecx
  1431 00000EA0 8A0D[64110000]      <1> 	mov cl, [intprob]
  1432 00000EA6 BB[42150000]        <1> 	mov ebx, errortypes
  1433 00000EAB C1E102              <1> 	shl ecx, 2
  1434 00000EAE 01CB                <1> 	add ebx, ecx
  1435 00000EB0 81FB[82150000]      <1> 	cmp ebx, errortypesend
  1436 00000EB6 7205                <1> 	jb gooderrortype
  1437 00000EB8 BB[82150000]        <1> 	mov ebx, errortypesend
  1438                              <1> gooderrortype:
  1439 00000EBD 8B33                <1> 	mov esi, [ebx]
  1440                              <1> %ifdef gui.included
  1441 00000EBF 803D[D4830000]00    <1> 	cmp byte [guion], 0
  1442 00000EC6 0F842D000000        <1> 	je near errortext
  1443 00000ECC 668B0D[5E110000]    <1> 	mov cx, [locunhandy]
  1444 00000ED3 668B15[60110000]    <1> 	mov dx, [locunhandx]
  1445 00000EDA 66B80100            <1> 	mov ax, 1
  1446 00000EDE 6631DB              <1> 	xor bx, bx
  1447 00000EE1 E857560000          <1> 	call showstring2
  1448 00000EE6 66890D[5E110000]    <1> 	mov [locunhandy], cx
  1449 00000EED 668915[60110000]    <1> 	mov [locunhandx], dx
  1450 00000EF4 E905000000          <1> 	jmp errortextdone
  1451                              <1> %endif
  1452                              <1> errortext:
  1453 00000EF9 E8DF0D0000          <1> 	call print		;;get the error message and print it
  1454                              <1> errortextdone:
  1455 00000EFE 31C9                <1> 	xor ecx, ecx
  1456 00000F00 8A0D[64110000]      <1> 	mov cl, [intprob]
  1457 00000F06 E8DC010000          <1> 	call expdump
  1458                              <1> dumpstack:
  1459 00000F0B 8B35[4E110000]      <1> 	mov esi, [esploc]
  1460 00000F11 39E6                <1> 	cmp esi, esp
  1461 00000F13 7216                <1> 	jb donedump
  1462 00000F15 368B0E              <1> 	mov ecx, [ss:esi]
  1463 00000F18 81EE04000000        <1> 	sub esi, 4
  1464 00000F1E 8935[4E110000]      <1> 	mov [esploc], esi
  1465 00000F24 E8BE010000          <1> 	call expdump
  1466 00000F29 EBE0                <1> 	jmp dumpstack
  1467                              <1> donedump:
  1468 00000F2B 0F20C1              <1> 	mov ecx, cr0
  1469 00000F2E E8B4010000          <1> 	call expdump
  1470 00000F33 0F20D1              <1> 	mov ecx, cr2
  1471 00000F36 E8AC010000          <1> 	call expdump
  1472 00000F3B 0F20D9              <1> 	mov ecx, cr3
  1473 00000F3E E8A4010000          <1> 	call expdump
  1474 00000F43 0F20E1              <1> 	mov ecx, cr4
  1475 00000F46 E89C010000          <1> 	call expdump
  1476 00000F4B 0F00C9              <1> 	str ecx
  1477 00000F4E E894010000          <1> 	call expdump
  1478 00000F53 0F010D[6D110000]    <1> 	sidt [igdtcache]
  1479 00000F5A 8B0D[6F110000]      <1> 	mov ecx, [igdtcache + 2]
  1480 00000F60 E882010000          <1> 	call expdump
  1481 00000F65 0F0105[6D110000]    <1> 	sgdt [igdtcache]
  1482 00000F6C 8B0D[6F110000]      <1> 	mov ecx, [igdtcache + 2]
  1483 00000F72 E870010000          <1> 	call expdump
  1484 00000F77 0F00C1              <1> 	sldt ecx
  1485 00000F7A E868010000          <1> 	call expdump
  1486 00000F7F 8B35[4E110000]      <1> 	mov esi, [esploc]
  1487 00000F85 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1488 00000F8A 81C710000000        <1> 	add edi, 16
  1489 00000F90 893D[69110000]      <1> 	mov [codelocend], edi
  1490 00000F96 81EF20000000        <1> 	sub edi, 32
  1491                              <1> dumpcodeloop:
  1492 00000F9C 893D[65110000]      <1> 	mov [codeloc], edi
  1493 00000FA2 8B0F                <1> 	mov ecx, [edi]
  1494 00000FA4 E83E010000          <1> 	call expdump
  1495 00000FA9 8B3D[65110000]      <1> 	mov edi, [codeloc]
  1496 00000FAF 81C704000000        <1> 	add edi, 4
  1497 00000FB5 3B3D[69110000]      <1> 	cmp edi, [codelocend]
  1498 00000FBB 72DF                <1> 	jb dumpcodeloop
  1499 00000FBD BE[78100000]        <1> 	mov esi, backtoosmsg
  1500                              <1> %ifdef gui.included
  1501 00000FC2 803D[D4830000]00    <1> 	cmp byte [guion], 0
  1502 00000FC9 741F                <1> 	je backtomsg
  1503                              <1> guibacktomsg:
  1504 00000FCB 668B15[60110000]    <1> 	mov dx, [locunhandx]
  1505 00000FD2 668B0D[5E110000]    <1> 	mov cx, [locunhandy]
  1506 00000FD9 66B80100            <1> 	mov ax, 1
  1507 00000FDD 6631DB              <1> 	xor bx, bx
  1508 00000FE0 E858550000          <1> 	call showstring2
  1509 00000FE5 E905000000          <1> 	jmp backtomsgdone
  1510                              <1> backtomsg:
  1511                              <1> %endif
  1512 00000FEA E8EE0C0000          <1> 	call print
  1513                              <1> backtomsgdone:
  1514 00000FEF 30C0                <1> 	xor al, al
  1515 00000FF1 E849110000          <1> 	call rdcharint
  1516 00000FF6 803D[64110000]03    <1> 	cmp byte [intprob], 3
  1517 00000FFD 753C                <1> 	jne nodebugint
  1518                              <1> %ifdef gui.included
  1519 00000FFF 803D[D4830000]00    <1> 	cmp byte [guion], 0
  1520 00001006 7422                <1> 	je nodebuggui
  1521 00001008 668B1D[62110000]    <1> 	mov bx, [backgroundcache]
  1522 0000100F 66891D[D9590000]    <1> 	mov [background], bx
  1523 00001016 6631DB              <1> 	xor bx, bx
  1524 00001019 C605[094C0000]00    <1> 	mov byte [mousedisabled], 0
  1525 00001020 E833490000          <1> 	call guiclear
  1526 00001025 E895510000          <1> 	call reloadallgraphics
  1527                              <1> nodebuggui:
  1528                              <1> %endif
  1529 0000102A 8B35[52110000]      <1> 	mov esi, [espfirst]
  1530 00001030 89F4                <1> 	mov esp, esi
  1531 00001032 61                  <1> 	popad
  1532 00001033 17                  <1> 	pop ss
  1533 00001034 0FA9                <1> 	pop gs
  1534 00001036 0FA1                <1> 	pop fs
  1535 00001038 07                  <1> 	pop es
  1536 00001039 1F                  <1> 	pop ds
  1537 0000103A CF                  <1> 	iret
  1538                              <1> nodebugint:
  1539 0000103B 61                  <1> 	popad
  1540 0000103C 17                  <1> 	pop ss
  1541 0000103D 0FA9                <1> 	pop gs
  1542 0000103F 0FA1                <1> 	pop fs
  1543 00001041 07                  <1> 	pop es
  1544 00001042 1F                  <1> 	pop ds
  1545                              <1> %ifdef gui.included
  1546 00001043 803D[D4830000]00    <1> 	cmp byte [guion], 0
  1547 0000104A 7427                <1> 	je returnunhandgui
  1548 0000104C 668B1D[62110000]    <1> 	mov bx, [backgroundcache]
  1549 00001053 66891D[D9590000]    <1> 	mov [background], bx
  1550 0000105A 6631DB              <1> 	xor bx, bx
  1551 0000105D C605[094C0000]00    <1> 	mov byte [mousedisabled], 0
  1552 00001064 E8EF480000          <1> 	call guiclear
  1553 00001069 E851510000          <1> 	call reloadallgraphics
  1554 0000106E E96A490000          <1> 	jmp guiboot
  1555                              <1> %endif
  1556                              <1> returnunhandgui:
  1557 00001073 E968180000          <1> 	jmp nwcmd
  1558 00001078 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1559 00001081 737420616E79207072- <1>
  1560 0000108A 6F626C656D7320696E- <1>
  1561 00001093 207468652049737375- <1>
  1562 0000109C 65732073656374696F- <1>
  1563 000010A5 6E20617420736F6C6C- <1>
  1564 000010AE 65726F732E676F6F67- <1>
  1565 000010B7 6C65636F64652E636F- <1>
  1566 000010C0 6D0A                <1>
  1567 000010C2 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1568 000010CB 206B657920746F2072- <1>
  1569 000010D4 657475726E20746F20- <1>
  1570 000010DD 536F6C6C65724F530A- <1>
  1571 000010E6 00                  <1>
  1572                              <1> expdump:
  1573 000010E7 8B35[56110000]      <1> 	mov esi, [esiloc]
  1574 000010ED 89F7                <1> 	mov edi, esi
  1575 000010EF 81C70F000000        <1> 	add edi, 15
  1576 000010F5 81C604000000        <1> 	add esi, 4
  1577 000010FB 893D[56110000]      <1> 	mov [esiloc], edi
  1578 00001101 81EF03000000        <1> 	sub edi, 3
  1579 00001107 E8351C0000          <1> 	call converthex
  1580 0000110C 81EE04000000        <1> 	sub esi, 4
  1581                              <1> %ifdef gui.included
  1582 00001112 803D[D4830000]00    <1> 	cmp byte [guion], 0
  1583 00001119 0F8429000000        <1> 	je near expdumptext
  1584 0000111F 668B0D[5E110000]    <1> 	mov cx, [locunhandy]
  1585 00001126 668B15[60110000]    <1> 	mov dx, [locunhandx]
  1586 0000112D 66B80100            <1> 	mov ax, 1
  1587 00001131 6631DB              <1> 	xor bx, bx
  1588 00001134 E804540000          <1> 	call showstring2
  1589 00001139 66890D[5E110000]    <1> 	mov [locunhandy], cx
  1590 00001140 668915[60110000]    <1> 	mov [locunhandx], dx
  1591 00001147 C3                  <1> 	ret
  1592                              <1> %endif
  1593                              <1> expdumptext:
  1594 00001148 E8900B0000          <1> 	call print
  1595 0000114D C3                  <1> 	ret
  1596 0000114E 00000000            <1> esploc dd 0
  1597 00001152 00000000            <1> espfirst dd 0
  1598 00001156 00000000            <1> esiloc dd 0
  1599 0000115A 00000000            <1> esiregbuf dd 0
  1600 0000115E 0100                <1> locunhandy dw 1
  1601 00001160 0100                <1> locunhandx dw 1
  1602 00001162 0000                <1> backgroundcache dw 0
  1603 00001164 00                  <1> intprob db 0
  1604 00001165 00000000            <1> codeloc dd 0
  1605 00001169 00000000            <1> codelocend dd 0
  1606 0000116D 000000000000        <1> igdtcache dw 0,0,0
  1607                              <1> 	unhandmsg:	
  1608 00001173 494E543D3030303030- <1> 			db "INT=00000000 ",10,0
  1609 0000117C 303030200A00        <1>
  1610                              <1> unhndrg:
  1611 00001182 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1612 0000118B 303030202000<rept>  <1>
  1613 000011EB FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1614 000011F4 303030200A00        <1>
  1615 000011FA FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1616 00001203 303030202000<rept>  <1>
  1617 00001263 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1618 0000126C 303030200A00        <1>
  1619 00001272 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1620 0000127B 303030202000<rept>  <1>
  1621 000012DB FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1622 000012E4 303030200A00        <1>
  1623 000012EA FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1624 000012F3 303030202000<rept>  <1>
  1625 00001353 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1626 0000135C 303030200A00        <1>
  1627                              <1> unhandregs:
  1628 00001362 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1629 0000136B 303030202000        <1>
  1630 00001371 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1631 0000137A 303030202000        <1>
  1632 00001380 4549503D3030303030- <1> 			db "EIP=00000000 ",10,0
  1633 00001389 303030200A00        <1>
  1634 0000138F 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1635 00001398 303030202000        <1>
  1636 0000139E 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1637 000013A7 303030202000        <1>
  1638 000013AD 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1639 000013B6 303030202000        <1>
  1640 000013BC 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1641 000013C5 303030202000        <1>
  1642 000013CB 53533A3D3030303030- <1> 			db "SS:=00000000 ",10,0
  1643 000013D4 303030200A00        <1>
  1644 000013DA 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1645 000013E3 303030202000        <1>
  1646 000013E9 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1647 000013F2 303030202000        <1>
  1648 000013F8 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1649 00001401 303030202000        <1>
  1650 00001407 4542583D3030303030- <1> 			db "EBX=00000000 ",10,0
  1651 00001410 303030200A00        <1>
  1652 00001416 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1653 0000141F 303030202000        <1>
  1654 00001425 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1655 0000142E 303030202000        <1>
  1656 00001434 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1657 0000143D 303030202000        <1>
  1658 00001443 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000 ",10,0
  1659 0000144C 303030200A00        <1>
  1660 00001452 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1661 0000145B 303030202000        <1>
  1662 00001461 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1663 0000146A 303030202000        <1>
  1664 00001470 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1665 00001479 303030202000        <1>
  1666 0000147F 4352343D3030303030- <1> 			db "CR4=00000000 ",10,0
  1667 00001488 303030200A00        <1>
  1668 0000148E 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1669 00001497 303030202000        <1>
  1670 0000149D 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1671 000014A6 303030202000        <1>
  1672 000014AC 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1673 000014B5 303030202000        <1>
  1674 000014BB 4C44543D3030303030- <1> 			db "LDT=00000000 ",10,0
  1675 000014C4 303030200A00        <1>
  1676 000014CA FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1677 000014D3 303030202000<rept>  <1>
  1678 000014E8 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1679 000014F1 30303020FF00        <1>
  1680 000014F7 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1681 00001500 3030305D2000        <1>
  1682 00001506 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1683 0000150F 303030202000<rept>  <1>
  1684 00001533 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1685 0000153C 303030FF0A00        <1>
  1686                              <1> unhandmsgend:
  1687                              <1> 
  1688                              <1> errortypes:
  1689 00001542 [86150000]          <1> 			dd err0
  1690 00001546 [EA150000]          <1> 			dd err1
  1691 0000154A [4B160000]          <1> 			dd err2
  1692 0000154E [A0160000]          <1> 			dd err3
  1693 00001552 [04170000]          <1> 			dd err4
  1694 00001556 [56170000]          <1> 			dd err5
  1695 0000155A [C0170000]          <1> 			dd err6
  1696 0000155E [28180000]          <1> 			dd err7
  1697 00001562 [72180000]          <1> 			dd err8
  1698 00001566 [CF180000]          <1> 			dd err9
  1699 0000156A [28190000]          <1> 			dd err10
  1700 0000156E [73190000]          <1> 			dd err11
  1701 00001572 [C3190000]          <1> 			dd err12
  1702 00001576 [1C1A0000]          <1> 			dd err13
  1703 0000157A [7F1A0000]          <1> 			dd err14
  1704 0000157E [BB1A0000]          <1> 			dd err15
  1705                              <1> errortypesend:
  1706 00001582 [461B0000]          <1> 			dd unknownerror
  1707                              <1> 			
  1708 00001586 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1709 0000158F 6279207A65726F3A0A  <1>
  1710 00001598 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  1711 000015A1 6C79206C696D2061F6- <1>
  1712 000015AA 78203D20EC20776865- <1>
  1713 000015B3 6E206120697320616E- <1>
  1714 000015BC 79207265616C206E75- <1>
  1715 000015C5 6D6265722E20486170- <1>
  1716 000015CE 707920456173746572- <1>
  1717 000015D7 210A                <1>
  1718 000015D9 202020202020202020- <1> 		db "            x",26,"0",10,0
  1719 000015E2 202020781A300A00    <1>
  1720                              <1> 		
  1721 000015EA 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1722 000015F3 65702F427265616B70- <1>
  1723 000015FC 6F696E743A0A        <1>
  1724 00001602 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1725 0000160B 696E74206661756C74- <1>
  1726 00001614 2C20627265616B706F- <1>
  1727 0000161D 696E7420747261702C- <1>
  1728 00001626 206F722073696E676C- <1>
  1729 0000162F 652D73746570207472- <1>
  1730 00001638 617020776173207472- <1>
  1731 00001641 696767657265642E0A- <1>
  1732 0000164A 00                  <1>
  1733                              <1> 		
  1734 0000164B 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1735 00001654 6C6520696E74657272- <1>
  1736 0000165D 7570743A0A          <1>
  1737 00001662 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1738 0000166B 6520696E7465727275- <1>
  1739 00001674 707420776173207472- <1>
  1740 0000167D 696767657265642074- <1>
  1741 00001686 68617420636F756C64- <1>
  1742 0000168F 206E6F74206265206D- <1>
  1743 00001698 61736B65642E0A00    <1>
  1744                              <1> 		
  1745 000016A0 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1746 000016A9 743A0A              <1>
  1747 000016AC 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1748 000016B5 727275707420697320- <1>
  1749 000016BE 7573656420696E2070- <1>
  1750 000016C7 726F6772616D732074- <1>
  1751 000016D0 6F2073686F77207468- <1>
  1752 000016D9 6520737461636B2061- <1>
  1753 000016E2 6E6420726567697374- <1>
  1754 000016EB 65727320616E642063- <1>
  1755 000016F4 616E2062650A        <1>
  1756 000016FA 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1757 00001703 00                  <1>
  1758                              <1> 		
  1759 00001704 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1760 0000170D 0A                  <1>
  1761 0000170E 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1762 00001717 73736F722072616E20- <1>
  1763 00001720 696E746F20616E2049- <1>
  1764 00001729 4E544F20696E737472- <1>
  1765 00001732 756374696F6E207769- <1>
  1766 0000173B 746820746865206F76- <1>
  1767 00001744 6572666C6F7720666C- <1>
  1768 0000174D 6167207365742E0A00  <1>
  1769                              <1> 		
  1770 00001756 426F756E6473206368- <1> err5	db "Bounds check:",10
  1771 0000175F 65636B3A0A          <1>
  1772 00001764 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1773 0000176D 73736F72207265626F- <1>
  1774 00001776 756E6465642066726F- <1>
  1775 0000177F 6D206120424F554E44- <1>
  1776 00001788 20696E737472756374- <1>
  1777 00001791 696F6E2072756E206F- <1>
  1778 0000179A 6E20616E206F706572- <1>
  1779 000017A3 616E64207468617420- <1>
  1780 000017AC 776173206F75740A    <1>
  1781 000017B4 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1782 000017BD 2E0A00              <1>
  1783                              <1> 		
  1784 000017C0 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1785 000017C9 70636F64653A0A      <1>
  1786 000017D0 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1787 000017D9 73736F722068617320- <1>
  1788 000017E2 6E6F20696465612077- <1>
  1789 000017EB 686174206974207761- <1>
  1790 000017F4 7320747279696E6720- <1>
  1791 000017FD 746F20657865637574- <1>
  1792 00001806 652E20446F6E277420- <1>
  1793 0000180F 72756E205353453420- <1>
  1794 00001818 636F64650A          <1>
  1795 0000181D 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1796 00001826 0A00                <1>
  1797                              <1> 		
  1798 00001828 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1799 00001831 6F72206E6F74206176- <1>
  1800 0000183A 61696C61626C653A0A  <1>
  1801 00001843 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1802 0000184C 206B6E6F7720746865- <1>
  1803 00001855 7920646F6E2774206D- <1>
  1804 0000185E 616B652074686F7365- <1>
  1805 00001867 20616E796D6F726521- <1>
  1806 00001870 0A00                <1>
  1807                              <1> 		
  1808 00001872 446F75626C65206661- <1> err8	db "Double fault:",10
  1809 0000187B 756C743A0A          <1>
  1810 00001880 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1811 00001889 74696F6E2068616E64- <1>
  1812 00001892 6C657220636F756C64- <1>
  1813 0000189B 206E6F742068616E64- <1>
  1814 000018A4 6C6520746861742069- <1>
  1815 000018AD 7420636F756C64206E- <1>
  1816 000018B6 6F742068616E646C65- <1>
  1817 000018BF 20616E206578636570- <1>
  1818 000018C8 74696F6E2E0A00      <1>
  1819                              <1> 		
  1820 000018CF 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1821 000018D8 6F72207365676D656E- <1>
  1822 000018E1 74206F76657272756E- <1>
  1823 000018EA 3A0A00              <1>
  1824 000018ED 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1825 000018F6 722068617070656E73- <1>
  1826 000018FF 20696E206D6F646572- <1>
  1827 00001908 6E20636F6D70757465- <1>
  1828 00001911 72732C20616E64206E- <1>
  1829 0000191A 657665722073686F75- <1>
  1830 00001923 6C642E0A00          <1>
  1831                              <1> 
  1832 00001928 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1833 00001931 53533A0A            <1>
  1834 00001935 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1835 0000193E 686174207761732073- <1>
  1836 00001947 776974636865642074- <1>
  1837 00001950 6F20697320696E7661- <1>
  1838 00001959 6C69642E204E6F7468- <1>
  1839 00001962 696E672066756E6E79- <1>
  1840 0000196B 20686572652E0A00    <1>
  1841                              <1> 		
  1842 00001973 5365676D656E74206E- <1> err11	db "Segment not present:",10
  1843 0000197C 6F742070726573656E- <1>
  1844 00001985 743A0A              <1>
  1845 00001988 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  1846 00001991 6E7420626974206F66- <1>
  1847 0000199A 20746865207365676D- <1>
  1848 000019A3 656E74206465736372- <1>
  1849 000019AC 6970746F7220697320- <1>
  1850 000019B5 73657420746F207A65- <1>
  1851 000019BE 726F2E0A00          <1>
  1852                              <1> 		
  1853 000019C3 537461636B20657863- <1> err12	db "Stack exception:",10
  1854 000019CC 657074696F6E3A0A    <1>
  1855 000019D4 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  1856 000019DD 7363726970746F7220- <1>
  1857 000019E6 697320696E76616C69- <1>
  1858 000019EF 64206F72206E6F7420- <1>
  1859 000019F8 70726573656E74206F- <1>
  1860 00001A01 7220697473206C696D- <1>
  1861 00001A0A 697420697320746F6F- <1>
  1862 00001A13 20736D616C6C2E0A00  <1>
  1863                              <1> 		
  1864 00001A1C 47656E6572616C2070- <1> err13	db "General protection violation:",10
  1865 00001A25 726F74656374696F6E- <1>
  1866 00001A2E 2076696F6C6174696F- <1>
  1867 00001A37 6E3A0A              <1>
  1868 00001A3A 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  1869 00001A43 746564207468652063- <1>
  1870 00001A4C 6F6D70757465722E20- <1>
  1871 00001A55 537465702061776179- <1>
  1872 00001A5E 20736C6F776C792E20- <1>
  1873 00001A67 546865204642492069- <1>
  1874 00001A70 73206F6E2069747320- <1>
  1875 00001A79 7761792E0A00        <1>
  1876                              <1> 		
  1877 00001A7F 50616765206661756C- <1> err14	db "Page fault:",10
  1878 00001A88 743A0A              <1>
  1879 00001A8B 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  1880 00001A94 746861742077617320- <1>
  1881 00001A9D 726571756573746564- <1>
  1882 00001AA6 20776173206E6F7420- <1>
  1883 00001AAF 617661696C61626C65- <1>
  1884 00001AB8 2E0A00              <1>
  1885                              <1> 		
  1886 00001ABB 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  1887 00001AC4 666F7220506C616E20- <1>
  1888 00001ACD 523A0A              <1>
  1889 00001AD0 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  1890 00001AD9 727275707420697320- <1>
  1891 00001AE2 726573657276656420- <1>
  1892 00001AEB 666F72207573616765- <1>
  1893 00001AF4 206F6E6C7920627920- <1>
  1894 00001AFD 746865206D696C6974- <1>
  1895 00001B06 617279207768656E20- <1>
  1896 00001B0F 6974206973206E6563- <1>
  1897 00001B18 6573736172790A      <1>
  1898 00001B1F 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  1899 00001B28 746520612066756C6C- <1>
  1900 00001B31 2D7363616C6520636F- <1>
  1901 00001B3A 757020642782746174- <1>
  1902 00001B43 2E0A00              <1>
  1903                              <1> 		
  1904 00001B46 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  1905 00001B4F 68656C6C206A757374- <1>
  1906 00001B58 2068617070656E6564- <1>
  1907 00001B61 3F2049732065766572- <1>
  1908 00001B6A 796F6E65206F6B6179- <1>
  1909 00001B73 3F2048617264206472- <1>
  1910 00001B7C 6976653F2056696465- <1>
  1911 00001B85 6F20636172643F0A    <1>
  1912 00001B8D 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  1913 00001B96 726520796F75207468- <1>
  1914 00001B9F 6572653F0A00        <1>
  1915                              <1> %else
  1916                              <1> unhand:	
  1917                              <1> 	%assign i 0
  1918                              <1> 	%rep 32
  1919                              <1> 	mov byte [intprob], i
  1920                              <1> 	jmp unhand2
  1921                              <1> 	%assign i i+1
  1922                              <1> 	%endrep
  1923                              <1> unhand2:
  1924                              <1> 	cmp byte [intprob], 3
  1925                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  1926                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  1927                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  1928                              <1> 	mov bl, [intprob]
  1929                              <1> 	jmp exitprog
  1930                              <1> intprob db 0
  1931                              <1> %endif
  1932                                      %include "source/ints.asm"
  1933                              <1> newints:	;;for great justice
  1934 00001BA5 80FC00              <1> 	cmp ah, 0
  1935 00001BA8 0F847F000000        <1> 	je near intx0   ;kills app
  1936 00001BAE 80FC01              <1> 	cmp ah, 1
  1937 00001BB1 0F84FE000000        <1> 	je near intx1   ;print string
  1938 00001BB7 80FC02              <1> 	cmp ah, 2
  1939 00001BBA 0F8450010000        <1> 	je near intx2	;read string
  1940 00001BC0 80FC03              <1> 	cmp ah, 3
  1941 00001BC3 0F8470010000        <1> 	je near intx3	;clear screen
  1942 00001BC9 80FC04              <1> 	cmp ah, 4
  1943 00001BCC 0F84E5010000        <1> 	je near intx4	;read and print string
  1944 00001BD2 80FC05              <1> 	cmp ah, 5
  1945 00001BD5 0F8458050000        <1> 	je near intx5	;get char
  1946 00001BDB 80FC06              <1> 	cmp ah, 6
  1947 00001BDE 0F84AA050000        <1> 	je near intx6	;print char
  1948 00001BE4 80FC07              <1> 	cmp ah, 7
  1949 00001BE7 0F848C070000        <1> 	je near intx7	;read file
  1950                              <1> ;	cmp ah, 8
  1951                              <1> ;	je near intx8	;write file
  1952 00001BED 80FC09              <1> 	cmp ah, 9
  1953 00001BF0 0F848D070000        <1> 	je near intx9	;convert number to string
  1954 00001BF6 80FC0A              <1> 	cmp ah, 10
  1955 00001BF9 0F849C070000        <1> 	je near intx10	;convert string to number
  1956                              <1> %ifdef threads.included
  1957 00001BFF 80FC0B              <1> 	cmp ah, 11
  1958 00001C02 0F849D070000        <1> 	je near intx11	;create thread
  1959                              <1> %endif
  1960 00001C08 80FC0C              <1> 	cmp ah, 12
  1961 00001C0B 0F846B080000        <1> 	je near intx12	;get time
  1962 00001C11 80FC0D              <1> 	cmp ah, 13
  1963 00001C14 0F8477080000        <1> 	je near intx13	;set time
  1964 00001C1A 80FC0E              <1> 	cmp ah, 14
  1965 00001C1D 0F847E080000        <1> 	je near intx14	;run program
  1966 00001C23 80FC0F              <1> 	cmp ah, 15
  1967 00001C26 0F848A080000        <1> 	je near intx15	;get program info-location of name/options/number of options/environmental vars
  1968 00001C2C C3                  <1> 	ret
  1969                              <1> 	
  1970                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  1971                              <1> intx0:
  1972                              <1> 	%include 'source/interrupts/0_exit.asm'
  1973                              <2> exitprog:
  1974 00001C2D 66B83000            <2> 	mov ax, NEW_DATA_SEL
  1975 00001C31 8ED8                <2> 	mov ds, ax
  1976 00001C33 8EC0                <2> 	mov es, ax
  1977 00001C35 8EE0                <2> 	mov fs, ax
  1978 00001C37 66B82000            <2> 	mov ax, SYS_DATA_SEL
  1979 00001C3B 8EE8                <2> 	mov gs, ax
  1980 00001C3D C705[54590000]0000- <2> 	mov dword [currentthread], 0
  1981 00001C45 0000                <2>
  1982 00001C47 C705[4F590000]0400- <2> 	mov dword [lastthread], 4
  1983 00001C4F 0000                <2>
  1984 00001C51 C605[53590000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  1985 00001C58 8B25[1A9A0000]      <2> 	mov esp, [previousstack] ;and this
  1986 00001C5E 81FB00000000        <2> 	cmp ebx, 0
  1987 00001C64 0F8501000000        <2> 	jne near .error
  1988 00001C6A C3                  <2> 	ret
  1989                              <2> .error:
  1990 00001C6B 89D9                <2> 	mov ecx, ebx
  1991 00001C6D B006                <2> 	mov al, 6
  1992 00001C6F A2[9F2D0000]        <2> 	mov [firsthexshown], al
  1993 00001C74 51                  <2> 	push ecx
  1994 00001C75 BE[901C0000]        <2> 	mov esi, .msg1
  1995 00001C7A E840000000          <2> 	call printhighlight
  1996 00001C7F 59                  <2> 	pop ecx
  1997 00001C80 E82F110000          <2> 	call showhex
  1998 00001C85 BE[A51C0000]        <2> 	mov esi, .msg2
  1999 00001C8A E830000000          <2> 	call printhighlight
  2000 00001C8F C3                  <2> 	ret
  2001                              <2> 	
  2002 00001C90 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2003 00001C99 7461747573206F6620- <2>
  2004 00001CA2 307800              <2>
  2005 00001CA5 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2006 00001CAE 726E65642E0A00      <2>
  2007                              <1> intx1:
  2008                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2009 00001CB5 E82A000000          <2> call printint
  2010 00001CBA E9DEE5FFFF          <2> jmp timerinterrupt
  2011                              <2> 
  2012                              <2> 	printhighlight:
  2013 00001CBF 6631C0              <2> 		xor ax, ax
  2014 00001CC2 66BBF000            <2> 		mov bx, 0xF0
  2015 00001CC6 E919000000          <2> 		jmp printint
  2016                              <2> 	printquiet:
  2017 00001CCB 6631C0              <2> 		xor ax, ax
  2018 00001CCE A2[0F1D0000]        <2> 		mov [endkeyprint], al
  2019 00001CD3 66BB0700            <2> 		mov bx, 7
  2020 00001CD7 E820000000          <2> 		call printint.b
  2021 00001CDC C3                  <2> 		ret
  2022                              <2>     print:
  2023 00001CDD 6631C0              <2> 		xor ax, ax
  2024 00001CE0 66BB0700            <2> 		mov bx, 7
  2025                              <2> 	printint:	;;print line, al=last key,bl=modifier, esi=buffer
  2026 00001CE4 56                  <2> 		push esi
  2027 00001CE5 A2[0F1D0000]        <2> 		mov [endkeyprint], al
  2028 00001CEA E80D000000          <2> 		call .b
  2029 00001CEF 89F1                <2> 		mov ecx, esi
  2030 00001CF1 5F                  <2> 		pop edi
  2031 00001CF2 29F9                <2> 		sub ecx, edi
  2032 00001CF4 51                  <2> 		push ecx
  2033 00001CF5 E8F2070000          <2> 		call termcopy
  2034 00001CFA 59                  <2> 		pop ecx
  2035 00001CFB C3                  <2> 		ret
  2036                              <2> 	.b:
  2037 00001CFC 8A06                <2> 		mov al, [esi]
  2038 00001CFE 3A05[0F1D0000]      <2> 		cmp al, [endkeyprint]
  2039 00001D04 7408                <2> 		je .done
  2040 00001D06 E8A8040000          <2> 		call prcharq
  2041 00001D0B 46                  <2> 		inc esi
  2042 00001D0C EBEE                <2> 		jmp .b
  2043                              <2> 	.done:
  2044 00001D0E C3                  <2> 		ret
  2045                              <2> 
  2046 00001D0F 00                  <2> endkeyprint db 0
  2047                              <1> intx2:
  2048                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2049 00001D10 E805000000          <2> call readint
  2050 00001D15 E983E5FFFF          <2> jmp timerinterrupt
  2051                              <2> 
  2052                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2053 00001D1A 89C3                <2> 		mov ebx, eax
  2054                              <2> 	.b:
  2055 00001D1C 53                  <2> 		push ebx
  2056 00001D1D 57                  <2> 		push edi
  2057 00001D1E 56                  <2> 		push esi
  2058 00001D1F 30C0                <2> 		xor al, al
  2059 00001D21 E819040000          <2> 		call rdcharint
  2060 00001D26 5E                  <2> 		pop esi
  2061 00001D27 8806                <2> 		mov [esi], al
  2062 00001D29 46                  <2> 		inc esi
  2063 00001D2A 5F                  <2> 		pop edi
  2064 00001D2B 5B                  <2> 		pop ebx
  2065 00001D2C 39FE                <2> 		cmp esi, edi
  2066 00001D2E 7304                <2> 		jae .done
  2067 00001D30 38D8                <2> 		cmp al, bl
  2068 00001D32 75E8                <2> 		jne .b
  2069                              <2> 	.done:
  2070 00001D34 4E                  <2> 		dec esi
  2071 00001D35 C60600              <2> 		mov byte [esi], 0
  2072 00001D38 C3                  <2> 		ret
  2073                              <1> intx3:
  2074                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2075 00001D39 E805000000          <2> call clear
  2076 00001D3E E95AE5FFFF          <2> jmp timerinterrupt
  2077                              <2> %ifdef io.serial
  2078                              <2> clear:
  2079                              <2> 	ret
  2080                              <2> %else
  2081                              <2> clear:		
  2082 00001D43 668B0D[75230000]    <2> 		mov cx, [charxy]
  2083 00001D4A BF[B0C12800]        <2> 		mov edi, videobuf
  2084 00001D4F 6631C0              <2> 		xor ax, ax
  2085 00001D52 66A3[6F230000]      <2> 		mov [linebeginpos], ax
  2086 00001D58 66A3[71230000]      <2> 		mov [videobufpos], ax
  2087 00001D5E 6631D2              <2> 		xor dx, dx
  2088 00001D61 66A3[73230000]      <2> 		mov [charpos], ax
  2089 00001D67 B407                <2> 		mov ah, 7
  2090                              <2> 	clearb:
  2091 00001D69 668907              <2> 		mov [edi], ax
  2092 00001D6C 81C702000000        <2> 		add edi, 2
  2093 00001D72 FEC9                <2> 		dec cl
  2094 00001D74 80F900              <2> 		cmp cl, 0
  2095 00001D77 75F0                <2> 		jne clearb
  2096 00001D79 8A0D[75230000]      <2> 		mov cl, [charxy]
  2097 00001D7F FECD                <2> 		dec ch
  2098 00001D81 80FD00              <2> 		cmp ch, 0
  2099 00001D84 75E3                <2> 		jne clearb
  2100                              <2> 	cleardouble:
  2101 00001D86 BF[542C2900]        <2> 		mov edi, videobuf2
  2102 00001D8B 668B0D[75230000]    <2> 		mov cx, [charxy]
  2103 00001D92 31C0                <2> 		xor eax, eax
  2104                              <2> 	clearc:
  2105 00001D94 8907                <2> 		mov [edi], eax
  2106 00001D96 81C704000000        <2> 		add edi, 4
  2107 00001D9C 80E902              <2> 		sub cl, 2
  2108 00001D9F 80F900              <2> 		cmp cl, 0
  2109 00001DA2 75F0                <2> 		jne clearc
  2110 00001DA4 8A0D[75230000]      <2> 		mov cl, [charxy]
  2111 00001DAA FECD                <2> 		dec ch
  2112 00001DAC 80FD00              <2> 		cmp ch, 0
  2113 00001DAF 75E3                <2> 		jne clearc
  2114 00001DB1 E836070000          <2> 		call termcopy
  2115 00001DB6 C3                  <2> 		ret
  2116                              <2> %endif
  2117                              <2> 		
  2118                              <1> intx4:
  2119                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2120 00001DB7 E809000000          <2> call rdprint
  2121 00001DBC E9DCE4FFFF          <2> jmp timerinterrupt
  2122                              <2> 
  2123                              <2> readline:
  2124 00001DC1 B00A                <2>   mov al, 10
  2125 00001DC3 B307                <2>   mov bl, 7
  2126                              <2> 	rdprint:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  2127 00001DC5 8935[28210000]      <2> 		mov [buftxtloc], esi
  2128 00001DCB A2[20210000]        <2> 		mov [endkeyrdpr], al
  2129 00001DD0 881D[21210000]      <2> 		mov [modkeyrdpr], bl
  2130 00001DD6 8935[22210000]      <2> 		mov [firstesirdpr], esi
  2131 00001DDC 893D[2C210000]      <2> 		mov [endbufferrdpr], edi
  2132                              <2> 	rdprintb:
  2133 00001DE2 56                  <2> 		push esi
  2134 00001DE3 B001                <2> 		mov al, 1
  2135 00001DE5 E855030000          <2> 		call rdcharint
  2136 00001DEA 5E                  <2> 		pop esi
  2137                              <2> %ifdef io.serial
  2138                              <2> 		cmp ah, 0x41
  2139                              <2> 		je near rdprup
  2140                              <2> 		cmp ah, 0x42
  2141                              <2> 		je near rdprdown
  2142                              <2> 		cmp ah, 0x43
  2143                              <2> 		je near rdprright
  2144                              <2> 		cmp ah, 0x44
  2145                              <2> 		je near rdprleft
  2146                              <2> 		cmp ah, 0x31
  2147                              <2> 		je near rdprhome
  2148                              <2> 		cmp ah, 0x48
  2149                              <2> 		je near rdprhome
  2150                              <2> 		cmp ah, 0x46
  2151                              <2> 		je near rdprend
  2152                              <2> 		cmp ah, 0x33
  2153                              <2> 		je near rdprdel
  2154                              <2> 		cmp ah, 0x34
  2155                              <2> 		je near rdprend
  2156                              <2> %else
  2157 00001DEB 803D[5B510000]E0    <2> 		cmp byte [specialkey], 0xE0
  2158 00001DF2 751B                <2> 		jne notspecialrdprnt
  2159 00001DF4 80FC53              <2> 		cmp ah, 0x53
  2160 00001DF7 0F84E8020000        <2> 		je near rdprdel
  2161 00001DFD 80FC47              <2> 		cmp ah, 0x47
  2162 00001E00 0F8407010000        <2> 		je near rdprhome
  2163 00001E06 80FC4F              <2> 		cmp ah, 0x4F
  2164 00001E09 0F841D010000        <2> 		je near rdprend
  2165                              <2> 	notspecialrdprnt:
  2166 00001E0F 80FC48              <2> 		cmp ah, 0x48
  2167 00001E12 0F84D5010000        <2> 		je near rdprup
  2168 00001E18 80FC50              <2> 		cmp ah, 0x50
  2169 00001E1B 0F84AF010000        <2> 		je near rdprdown
  2170 00001E21 80FC4D              <2> 		cmp ah, 0x4D
  2171 00001E24 0F845E010000        <2> 		je near rdprright
  2172 00001E2A 80FC4B              <2> 		cmp ah, 0x4B
  2173 00001E2D 0F8416010000        <2> 		je near rdprleft
  2174                              <2> %endif
  2175 00001E33 3C08                <2> 		cmp al, 8
  2176 00001E35 0F84C5020000        <2> 		je near rdprbscheck
  2177 00001E3B 3C00                <2> 		cmp al, 0
  2178 00001E3D 74A3                <2> 		je rdprintb
  2179 00001E3F 80FC00              <2> 		cmp ah, 0
  2180 00001E42 749E                <2> 		je rdprintb
  2181 00001E44 8806                <2> 		mov [esi], al
  2182 00001E46 46                  <2> 		inc esi
  2183                              <2> 	bscheckequal:
  2184 00001E47 8A1D[21210000]      <2> 		mov bl, [modkeyrdpr]
  2185 00001E4D 8A3D[27210000]      <2> 		mov bh, [txtmask]
  2186 00001E53 80FF00              <2> 		cmp bh, 0
  2187 00001E56 7404                <2> 		je nomasktxt
  2188 00001E58 88F8                <2> 		mov al, bh
  2189 00001E5A 30FF                <2> 		xor bh, bh
  2190                              <2> 	nomasktxt:
  2191 00001E5C E841030000          <2> 		call prcharint
  2192 00001E61 56                  <2> 		push esi
  2193 00001E62 66A3[1E210000]      <2> 		mov [axcache], ax
  2194 00001E68 8A25[20210000]      <2> 		mov ah, [endkeyrdpr]
  2195 00001E6E 38E0                <2> 		cmp al, ah
  2196 00001E70 7429                <2> 		je nobackprintbuftxt2
  2197 00001E72 BE[9AAC0000]        <2> 		mov esi, buftxt2
  2198 00001E77 E84FFEFFFF          <2> 		call printquiet
  2199 00001E7C B020                <2> 		mov al, " "
  2200 00001E7E E830030000          <2> 		call prcharq
  2201 00001E83 B008                <2> 		mov al, 8
  2202 00001E85 81FE[9AAC0000]      <2> 		cmp esi, buftxt2
  2203 00001E8B 740E                <2> 		je nobackprintbuftxt2
  2204                              <2> 	backprintbuftxt2:
  2205 00001E8D E821030000          <2> 		call prcharq
  2206 00001E92 4E                  <2> 		dec esi
  2207 00001E93 81FE[9AAC0000]      <2> 		cmp esi, buftxt2
  2208 00001E99 77F2                <2> 		ja backprintbuftxt2
  2209                              <2> 	nobackprintbuftxt2:
  2210 00001E9B 3C0A                <2> 		cmp al, 10
  2211 00001E9D 7405                <2> 		je nonobackprint
  2212 00001E9F E8FE020000          <2> 		call prcharint
  2213                              <2> 	nonobackprint:
  2214 00001EA4 5E                  <2> 		pop esi
  2215 00001EA5 3B35[2C210000]      <2> 		cmp esi, [endbufferrdpr]
  2216 00001EAB 0F8319000000        <2> 		jae near donerdprinc
  2217 00001EB1 66A1[1E210000]      <2> 		mov ax, [axcache]
  2218 00001EB7 8A25[20210000]      <2> 		mov ah, [endkeyrdpr]
  2219 00001EBD 38E0                <2> 		cmp al, ah
  2220 00001EBF 0F851DFFFFFF        <2> 		jne rdprintb
  2221 00001EC5 E901000000          <2> 		jmp donerdprint
  2222                              <2> 	donerdprinc:
  2223 00001ECA 46                  <2> 		inc esi
  2224                              <2> 	donerdprint:
  2225 00001ECB 4E                  <2> 		dec esi
  2226 00001ECC BF[9AAC0000]        <2> 		mov edi, buftxt2
  2227                              <2> 	copylaterstuff:
  2228 00001ED1 8A07                <2> 		mov al, [edi]
  2229 00001ED3 3C00                <2> 		cmp al, 0
  2230 00001ED5 7406                <2> 		je nocopylaterstuff
  2231 00001ED7 8806                <2> 		mov [esi], al
  2232 00001ED9 47                  <2> 		inc edi
  2233 00001EDA 46                  <2> 		inc esi
  2234 00001EDB EBF4                <2> 		jmp copylaterstuff
  2235                              <2> 	nocopylaterstuff:
  2236 00001EDD C60600              <2> 		mov byte [esi], 0
  2237 00001EE0 E80B000000          <2> 		call clearbuftxt2
  2238 00001EE5 89F1                <2> 		mov ecx, esi
  2239 00001EE7 8B3D[22210000]      <2> 		mov edi, [firstesirdpr]
  2240 00001EED 29F9                <2> 		sub ecx, edi
  2241 00001EEF C3                  <2> 		ret
  2242                              <2> 	
  2243                              <2> 	clearbuftxt2:
  2244 00001EF0 30C0                <2> 		xor al, al
  2245 00001EF2 BF[9AAC0000]        <2> 		mov edi, buftxt2
  2246                              <2> 	clearbuftxt2lp:
  2247 00001EF7 8807                <2> 		mov [edi], al
  2248 00001EF9 47                  <2> 		inc edi
  2249 00001EFA 81FF[9AB00000]      <2> 		cmp edi, buftxt
  2250 00001F00 75F5                <2> 		jne clearbuftxt2lp
  2251 00001F02 C3                  <2> 		ret
  2252                              <2> 	
  2253                              <2> 	rdprintb2:
  2254 00001F03 E8E4050000          <2> 		call termcopy
  2255 00001F08 E9D5FEFFFF          <2> 		jmp rdprintb
  2256                              <2> 	
  2257                              <2> 	rdprhome:
  2258 00001F0D 3B35[28210000]      <2> 		cmp esi, [buftxtloc]
  2259 00001F13 0F84EAFFFFFF        <2> 		je near rdprintb2
  2260 00001F19 BF[9AAC0000]        <2> 		mov edi, buftxt2
  2261 00001F1E 8A07                <2> 		mov al, [edi]
  2262 00001F20 E846000000          <2> 		call shiftbuftxt2
  2263 00001F25 E889020000          <2> 		call prcharq
  2264 00001F2A EBE1                <2> 		jmp rdprhome
  2265                              <2> 		
  2266                              <2> 	rdprend:
  2267 00001F2C BF[9AAC0000]        <2> 		mov edi, buftxt2
  2268 00001F31 8A07                <2> 		mov al, [edi]
  2269 00001F33 3C00                <2> 		cmp al, 0
  2270 00001F35 0F84C8FFFFFF        <2> 		je near rdprintb2
  2271 00001F3B 8806                <2> 		mov [esi], al
  2272 00001F3D E866000000          <2> 		call shiftbuftxt2lft
  2273 00001F42 E86C020000          <2> 		call prcharq
  2274 00001F47 EBE3                <2> 		jmp rdprend
  2275                              <2> 	
  2276                              <2> 	rdprleft:
  2277 00001F49 3B35[28210000]      <2> 		cmp esi, [buftxtloc]
  2278 00001F4F 0F848DFEFFFF        <2> 		je near rdprintb
  2279 00001F55 BF[9AAC0000]        <2> 		mov edi, buftxt2
  2280 00001F5A 8A07                <2> 		mov al, [edi]
  2281 00001F5C E80A000000          <2> 		call shiftbuftxt2
  2282 00001F61 E83C020000          <2> 		call prcharint
  2283 00001F66 E977FEFFFF          <2> 		jmp rdprintb
  2284                              <2> 	shiftbuftxt2:
  2285 00001F6B 3C00                <2> 		cmp al, 0
  2286 00001F6D 7409                <2> 		je noshiftbuftxt2
  2287 00001F6F 47                  <2> 		inc edi
  2288 00001F70 8A27                <2> 		mov ah, [edi]
  2289 00001F72 8807                <2> 		mov [edi], al
  2290 00001F74 88E0                <2> 		mov al, ah
  2291 00001F76 EBF3                <2> 		jmp shiftbuftxt2
  2292                              <2> 	noshiftbuftxt2:
  2293 00001F78 BF[9AAC0000]        <2> 		mov edi, buftxt2
  2294 00001F7D 4E                  <2> 		dec esi
  2295 00001F7E 8A06                <2> 		mov al, [esi]
  2296 00001F80 8807                <2> 		mov [edi], al
  2297 00001F82 C60600              <2> 		mov byte [esi], 0
  2298 00001F85 B008                <2> 		mov al, 8
  2299 00001F87 C3                  <2> 		ret
  2300                              <2> 		
  2301                              <2> 	rdprright:
  2302 00001F88 BF[9AAC0000]        <2> 		mov edi, buftxt2
  2303 00001F8D 8A07                <2> 		mov al, [edi]
  2304 00001F8F 3C00                <2> 		cmp al, 0
  2305 00001F91 0F844BFEFFFF        <2> 		je near rdprintb
  2306 00001F97 8806                <2> 		mov [esi], al
  2307 00001F99 E80A000000          <2> 		call shiftbuftxt2lft
  2308 00001F9E E8FF010000          <2> 		call prcharint
  2309 00001FA3 E93AFEFFFF          <2> 		jmp rdprintb
  2310                              <2> 	shiftbuftxt2lft:
  2311 00001FA8 3C00                <2> 		cmp al, 0
  2312 00001FAA 7408                <2> 		je noshiftbuftxt2lft
  2313 00001FAC 47                  <2> 		inc edi
  2314 00001FAD 8A07                <2> 		mov al, [edi]
  2315 00001FAF 8847FF              <2> 		mov [edi - 1], al
  2316 00001FB2 EBF4                <2> 		jmp shiftbuftxt2lft
  2317                              <2> 	noshiftbuftxt2lft:
  2318 00001FB4 8A06                <2> 		mov al, [esi]
  2319 00001FB6 46                  <2> 		inc esi
  2320 00001FB7 8A1D[21210000]      <2> 		mov bl, [modkeyrdpr]
  2321 00001FBD C3                  <2> 		ret
  2322                              <2> 		
  2323                              <2> 	rdprdownbck:
  2324 00001FBE FECC                <2> 		dec ah
  2325 00001FC0 8825[26210000]      <2> 		mov [commandedit], ah
  2326 00001FC6 E83A000000          <2> 		call rdprbckspc
  2327 00001FCB E912FEFFFF          <2> 		jmp rdprintb
  2328                              <2> 	
  2329                              <2> 	rdprdown:
  2330 00001FD0 8A25[26210000]      <2> 		mov ah, [commandedit]
  2331 00001FD6 80FC01              <2> 		cmp ah, 1
  2332 00001FD9 0F8603FEFFFF        <2> 		jbe near rdprintb
  2333 00001FDF 80FC02              <2> 		cmp ah, 2
  2334 00001FE2 74DA                <2> 		je rdprdownbck
  2335 00001FE4 80EC02              <2> 		sub ah, 2
  2336 00001FE7 8825[26210000]      <2> 		mov [commandedit], ah
  2337                              <2> 		
  2338                              <2> 	rdprup:
  2339 00001FED 30C0                <2> 		xor al, al
  2340 00001FEF 3805[26210000]      <2> 		cmp [commandedit], al
  2341 00001FF5 0F84E7FDFFFF        <2> 		je near rdprintb
  2342 00001FFB E805000000          <2> 		call rdprbckspc
  2343 00002000 E941000000          <2> 		jmp getcurrentcommandstr
  2344                              <2> 	rdprbckspc:
  2345 00002005 3B35[28210000]      <2> 		cmp esi, [buftxtloc]
  2346 0000200B 742B                <2> 		je nordprupbck
  2347                              <2> 	rdprupbckspclp:
  2348 0000200D B008                <2> 		mov al, 8
  2349 0000200F 8A1D[21210000]      <2> 		mov bl, [modkeyrdpr]
  2350 00002015 E899010000          <2> 		call prcharq
  2351 0000201A B020                <2> 		mov al, ' '
  2352 0000201C E892010000          <2> 		call prcharq
  2353 00002021 B008                <2> 		mov al, 8
  2354 00002023 E88B010000          <2> 		call prcharq
  2355 00002028 4E                  <2> 		dec esi
  2356 00002029 3B35[28210000]      <2> 		cmp esi, [buftxtloc]
  2357 0000202F 7402                <2> 		je nordprupbck2
  2358 00002031 EBDA                <2> 		jmp rdprupbckspclp
  2359                              <2> 	nordprupbck2:
  2360 00002033 E8B4040000          <2> 		call termcopy
  2361                              <2> 	nordprupbck:
  2362 00002038 8B3D[FC962900]      <2> 		mov edi, [commandbufpos]
  2363 0000203E 81C7[00972900]      <2> 		add edi, commandbuf
  2364 00002044 4F                  <2> 		dec edi
  2365 00002045 C3                  <2> 		ret
  2366                              <2> 	getcurrentcommandstr:
  2367 00002046 8A25[26210000]      <2> 		mov ah, [commandedit]
  2368 0000204C FE05[26210000]      <2> 		inc byte [commandedit]
  2369                              <2> 	getccmdlp:
  2370 00002052 4F                  <2> 		dec edi
  2371 00002053 8A07                <2> 		mov al, [edi]
  2372 00002055 81FF[00972900]      <2> 		cmp edi, commandbuf
  2373 0000205B 7231                <2> 		jb getcmdresetcommandbuf
  2374 0000205D 81EF[00972900]      <2> 		sub edi, commandbuf
  2375 00002063 3B3D[FC962900]      <2> 		cmp edi, [commandbufpos]
  2376 00002069 0F8473FDFFFF        <2> 		je near rdprintb
  2377 0000206F 81C7[00972900]      <2> 		add edi, commandbuf
  2378 00002075 3C00                <2> 		cmp al, 0
  2379 00002077 75D9                <2> 		jne getccmdlp
  2380 00002079 FECC                <2> 		dec ah
  2381 0000207B 80FC00              <2> 		cmp ah, 0
  2382 0000207E 77D2                <2> 		ja getccmdlp
  2383 00002080 47                  <2> 		inc edi
  2384 00002081 81FF[00A72900]      <2> 		cmp edi, commandbufend
  2385 00002087 770D                <2> 		ja fixcmdbufb4morerdpr
  2386 00002089 E915000000          <2> 		jmp morerdprup
  2387                              <2> 	getcmdresetcommandbuf:
  2388 0000208E BF[00A72900]        <2> 		mov edi, commandbufend
  2389 00002093 47                  <2> 		inc edi
  2390 00002094 EBBC                <2> 		jmp getccmdlp
  2391                              <2> 	fixcmdbufb4morerdpr:
  2392 00002096 4F                  <2> 		dec edi
  2393 00002097 81EF[00A72900]      <2> 		sub edi, commandbufend
  2394 0000209D 81C7[00972900]      <2> 		add edi, commandbuf
  2395                              <2> 	morerdprup:
  2396 000020A3 8A07                <2> 		mov al, [edi]
  2397 000020A5 47                  <2> 		inc edi
  2398 000020A6 81EF[00972900]      <2> 		sub edi, commandbuf
  2399 000020AC 3C00                <2> 		cmp al, 0
  2400 000020AE 0F844FFEFFFF        <2> 		je near rdprintb2
  2401 000020B4 3B3D[FC962900]      <2> 		cmp edi, [commandbufpos]
  2402 000020BA 0F8343FEFFFF        <2> 		jae near rdprintb2
  2403 000020C0 81C7[00972900]      <2> 		add edi, commandbuf
  2404 000020C6 8806                <2> 		mov [esi], al
  2405 000020C8 46                  <2> 		inc esi
  2406 000020C9 57                  <2> 		push edi
  2407 000020CA 8A1D[21210000]      <2> 		mov bl, [modkeyrdpr]
  2408 000020D0 E8DE000000          <2> 		call prcharq
  2409 000020D5 5F                  <2> 		pop edi
  2410 000020D6 81FF[00A72900]      <2> 		cmp edi, commandbufend
  2411 000020DC 76C5                <2> 		jbe morerdprup
  2412 000020DE BF[00972900]        <2> 		mov edi, commandbuf
  2413 000020E3 EBBE                <2> 		jmp morerdprup
  2414                              <2> 		
  2415                              <2> 	rdprdel:
  2416 000020E5 BF[9AAC0000]        <2> 		mov edi, buftxt2
  2417 000020EA 8A07                <2> 		mov al, [edi]
  2418 000020EC 3C00                <2> 		cmp al, 0
  2419 000020EE 0F84EEFCFFFF        <2> 		je near rdprintb
  2420 000020F4 8806                <2> 		mov [esi], al
  2421 000020F6 E8ADFEFFFF          <2> 		call shiftbuftxt2lft
  2422 000020FB E8B3000000          <2> 		call prcharq
  2423                              <2> 		
  2424                              <2> 	rdprbscheck:
  2425 00002100 3B35[22210000]      <2> 		cmp esi, [firstesirdpr]
  2426 00002106 7705                <2> 		ja goodbscheck
  2427 00002108 E9D5FCFFFF          <2> 		jmp rdprintb
  2428                              <2> 	goodbscheck:
  2429 0000210D 4E                  <2> 		dec esi
  2430 0000210E C60600              <2> 		mov byte [esi], 0
  2431 00002111 8A1D[21210000]      <2> 		mov bl, [modkeyrdpr]
  2432 00002117 B008                <2> 		mov al, 8
  2433 00002119 E929FDFFFF          <2> 		jmp bscheckequal
  2434                              <2> 		
  2435 0000211E 0000                <2> axcache dw 0
  2436 00002120 00                  <2> endkeyrdpr db 0
  2437 00002121 00                  <2> modkeyrdpr db 0
  2438 00002122 00000000            <2> firstesirdpr dd 0
  2439 00002126 00                  <2> commandedit db 0
  2440 00002127 00                  <2> txtmask db 0
  2441 00002128 00000000            <2> buftxtloc dd 0
  2442 0000212C 00000000            <2> endbufferrdpr dd 0
  2443 00002130 082000              <2> backcursor db 8," ",0
  2444                              <1> intx5:
  2445                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2446 00002133 E807000000          <2> 	call rdcharint
  2447 00002138 E960E1FFFF          <2> 	jmp timerinterrupt
  2448                              <2> getchar:
  2449 0000213D 30C0                <2> 	xor al, al
  2450                              <2> 	rdcharint:		;;get char, if al is 0, wait for key
  2451 0000213F C605[8D210000]01    <2> 		mov byte [trans], 1
  2452 00002146 3C00                <2> 		cmp al, 0
  2453 00002148 7507                <2> 		jne transcheck
  2454 0000214A C605[8D210000]00    <2> 		mov byte [trans], 0
  2455                              <2> 	transcheck:
  2456                              <2> 	%ifdef io.serial
  2457                              <2> 		call serial.receive
  2458                              <2> 		cmp al, 13
  2459                              <2> 		je rdenter
  2460                              <2> 	%else
  2461 00002151 E825300000          <2> 		call getkey
  2462 00002156 66A1[8B210000]      <2> 		mov ax, [lastkey]
  2463 0000215C 80FC1C              <2> 		cmp ah, 0x1C
  2464 0000215F 741F                <2> 		je rdenter
  2465                              <2> 	%endif
  2466 00002161 8A3D[8D210000]      <2> 		mov bh, [trans]
  2467 00002167 803D[5B510000]E0    <2> 		cmp byte [specialkey], 0xE0
  2468 0000216E 7504                <2> 		jne nospecialtrans
  2469 00002170 88C3                <2> 		mov bl, al
  2470 00002172 30C0                <2> 		xor al, al
  2471                              <2> 	nospecialtrans:
  2472 00002174 08C7                <2> 		or bh, al
  2473 00002176 80FF00              <2> 		cmp bh, 0
  2474 00002179 74D6                <2> 		je transcheck
  2475 0000217B E90A000000          <2> 		jmp rdend
  2476                              <2> 	rdenter:
  2477 00002180 B41C                <2> 		mov ah, 0x1C
  2478 00002182 B00A                <2> 		mov al, 10
  2479 00002184 66A3[8B210000]      <2> 		mov [lastkey], ax
  2480                              <2> 	rdend:
  2481 0000218A C3                  <2> 		ret
  2482                              <2> 		
  2483 0000218B 0000                <2> lastkey db 0,0
  2484 0000218D 00                  <2> trans db 0
  2485                              <1> intx6:
  2486                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2487                              <2> %ifdef io.serial
  2488                              <2> 	cmp bl, bh
  2489                              <2> 	call prcharint
  2490                              <2> 	jmp timerinterrupt
  2491                              <2> prcharint:	
  2492                              <2> prcharq:
  2493                              <2> 	call serial.send
  2494                              <2> 	ret
  2495                              <2> %else
  2496 0000218E 38FB                <2> cmp bl, bh
  2497 00002190 740A                <2> je prchar.notimer
  2498 00002192 E80B000000          <2> call prcharint
  2499 00002197 E901E1FFFF          <2> jmp timerinterrupt
  2500                              <2> prchar.notimer:
  2501 0000219C E812000000          <2> 	call prcharq
  2502 000021A1 CF                  <2> 	iret
  2503                              <2> 	
  2504                              <2> prcharint:	;;print char, char in al, modifier in bl, if bh = bl then termcopy will not happen, will run termcopy if called as is
  2505 000021A2 38FB                <2> 	cmp bl, bh
  2506 000021A4 740D                <2> 	je prcharq
  2507 000021A6 E808000000          <2> 	call prcharq
  2508 000021AB E83C030000          <2> 	call termcopy
  2509 000021B0 C3                  <2> 	ret
  2510 000021B1 00                  <2> termguion db 0
  2511 000021B2 00                  <2> termcopyon db 0
  2512                              <2> prcharq:
  2513 000021B3 88DC                <2> 	mov ah, bl
  2514 000021B5 66A3[77230000]      <2> 	mov [charbuf], ax
  2515 000021BB 31DB                <2> 	xor ebx, ebx
  2516 000021BD 668B1D[71230000]    <2> 	mov bx, [videobufpos]
  2517 000021C4 BF[B0C12800]        <2> 	mov edi, videobuf
  2518 000021C9 01DF                <2> 	add edi, ebx
  2519 000021CB 66A1[EA240000]      <2> 	mov ax, [removedvideo]
  2520 000021D1 668907              <2> 	mov [edi], ax
  2521 000021D4 66A1[77230000]      <2> 	mov ax, [charbuf]
  2522 000021DA 31D2                <2> 	xor edx, edx
  2523 000021DC 668B15[73230000]    <2> 	mov dx, [charpos]
  2524 000021E3 31C9                <2> 	xor ecx, ecx
  2525 000021E5 668B0D[75230000]    <2> 	mov cx, [charxy]
  2526 000021EC 3C09                <2> 	cmp al, 9
  2527 000021EE 0F8463000000        <2> 	je near prtab
  2528 000021F4 3C0D                <2> 	cmp al, 13		;I am phasing this out-it is used by windows but not unix based systems
  2529 000021F6 0F848B000000        <2> 	je near prcr
  2530 000021FC 3C0A                <2> 	cmp al, 10
  2531 000021FE 0F84B7000000        <2> 	je near prnlcr
  2532 00002204 3C08                <2> 	cmp al, 8
  2533 00002206 0F848F000000        <2> 	je near prbs
  2534 0000220C 3CFF                <2> 	cmp al, 255		;;null character
  2535 0000220E 0F841B000000        <2> 	je near donescr
  2536 00002214 668907              <2> 	mov [edi], ax
  2537 00002217 81C702000000        <2> 	add edi, 2
  2538 0000221D FEC2                <2> 	inc dl
  2539                              <2> donecrnl:
  2540 0000221F 38CA                <2> 	cmp dl, cl
  2541 00002221 0F83B9000000        <2> 	jae near preol
  2542                              <2> doneeol:
  2543 00002227 38EE                <2> 	cmp dh, ch
  2544 00002229 0F83CF000000        <2> 	jae near prscr	
  2545                              <2> donescr:
  2546 0000222F 89FB                <2> 	mov ebx, edi
  2547 00002231 668B07              <2> 	mov ax, [edi]
  2548 00002234 66A3[EA240000]      <2> 	mov [removedvideo], ax
  2549 0000223A 81EB[B0C12800]      <2> 	sub ebx, videobuf
  2550 00002240 66891D[71230000]    <2> 	mov [videobufpos], bx
  2551 00002247 668915[73230000]    <2> 	mov [charpos], dx
  2552 0000224E 66A1[77230000]      <2> 	mov ax, [charbuf]
  2553 00002254 88E3                <2> 	mov bl, ah
  2554 00002256 C3                  <2> 	ret
  2555                              <2> 	
  2556                              <2> 	prtab:
  2557 00002257 31DB                <2> 		xor ebx, ebx
  2558 00002259 668B1D[6F230000]    <2> 		mov bx, [linebeginpos]
  2559 00002260 81EF[B0C12800]      <2> 		sub edi, videobuf
  2560 00002266 29DF                <2> 		sub edi, ebx
  2561 00002268 C1EF04              <2> 		shr edi, 4
  2562 0000226B C1E704              <2> 		shl edi, 4
  2563 0000226E 81C710000000        <2> 		add edi, 16
  2564 00002274 C0EA03              <2> 		shr dl, 3
  2565 00002277 C0E203              <2> 		shl dl, 3
  2566 0000227A 80C208              <2> 		add dl, 8
  2567 0000227D 81C7[B0C12800]      <2> 		add edi, videobuf
  2568 00002283 01DF                <2> 		add edi, ebx
  2569 00002285 EB98                <2> 		jmp donecrnl
  2570                              <2> 	
  2571                              <2> 	prcr:
  2572 00002287 30D2                <2> 		xor dl, dl
  2573 00002289 31DB                <2> 		xor ebx, ebx
  2574 0000228B BF[B0C12800]        <2> 		mov edi, videobuf
  2575 00002290 668B1D[6F230000]    <2> 		mov bx, [linebeginpos]
  2576 00002297 01DF                <2> 		add edi, ebx
  2577 00002299 EB84                <2> 		jmp donecrnl
  2578                              <2> 			
  2579                              <2> 	prbs:
  2580 0000229B 80FA00              <2> 		cmp dl, 0
  2581 0000229E 7410                <2> 		je prbackline
  2582                              <2> 	prnobmr:
  2583 000022A0 FECA                <2> 		dec dl
  2584 000022A2 6631C0              <2> 		xor ax, ax
  2585 000022A5 81EF02000000        <2> 		sub edi, 2
  2586 000022AB E96FFFFFFF          <2> 		jmp donecrnl
  2587                              <2> 	prbackline:
  2588 000022B0 88CA                <2> 		mov dl, cl
  2589 000022B2 80FE00              <2> 		cmp dh, 0
  2590 000022B5 74E9                <2> 		je prnobmr
  2591 000022B7 FECE                <2> 		dec dh
  2592 000022B9 EBE5                <2> 		jmp prnobmr
  2593                              <2> 		
  2594                              <2> 	prnlcr:
  2595 000022BB FEC6                <2> 		inc dh
  2596 000022BD 31DB                <2> 		xor ebx, ebx
  2597 000022BF 30D2                <2> 		xor dl, dl
  2598 000022C1 88CB                <2> 		mov bl, cl
  2599 000022C3 66D1E3              <2> 		shl bx, 1
  2600 000022C6 BF[B0C12800]        <2> 		mov edi, videobuf
  2601 000022CB 66031D[6F230000]    <2> 		add bx, [linebeginpos]
  2602 000022D2 66891D[6F230000]    <2> 		mov [linebeginpos], bx
  2603 000022D9 01DF                <2> 		add edi, ebx
  2604 000022DB E93FFFFFFF          <2> 		jmp donecrnl
  2605                              <2> 		
  2606                              <2> 	preol:
  2607 000022E0 30D2                <2> 		xor dl, dl
  2608 000022E2 FEC6                <2> 		inc dh
  2609 000022E4 31DB                <2> 		xor ebx, ebx
  2610 000022E6 88CB                <2> 		mov bl, cl
  2611 000022E8 66D1E3              <2> 		shl bx, 1
  2612 000022EB 66031D[6F230000]    <2> 		add bx, [linebeginpos]
  2613 000022F2 66891D[6F230000]    <2> 		mov [linebeginpos], bx
  2614 000022F9 E929FFFFFF          <2> 		jmp doneeol
  2615                              <2> 	prscr:
  2616 000022FE FECE                <2> 		dec dh
  2617 00002300 BF[B0C12800]        <2> 		mov edi, videobuf
  2618 00002305 31DB                <2> 		xor ebx, ebx
  2619 00002307 88CB                <2> 		mov bl, cl
  2620 00002309 66D1E3              <2> 		shl bx, 1
  2621 0000230C 01FB                <2> 		add ebx, edi
  2622                              <2> 	intscrollloop:
  2623 0000230E 668B03              <2> 		mov ax, [ebx]
  2624 00002311 668907              <2> 		mov [edi], ax
  2625 00002314 81C702000000        <2> 		add edi, 2
  2626 0000231A 81C302000000        <2> 		add ebx, 2
  2627 00002320 FEC9                <2> 		dec cl
  2628 00002322 80F900              <2> 		cmp cl, 0
  2629 00002325 75E7                <2> 		jne intscrollloop
  2630 00002327 8A0D[75230000]      <2> 		mov cl, [charxy]
  2631 0000232D FECD                <2> 		dec ch
  2632 0000232F 80FD01              <2> 		cmp ch, 1
  2633 00002332 77DA                <2> 		ja intscrollloop
  2634 00002334 6631C0              <2> 		xor ax, ax
  2635 00002337 81EF[B0C12800]      <2> 		sub edi, videobuf
  2636 0000233D 66893D[6F230000]    <2> 		mov [linebeginpos], di
  2637 00002344 81C7[B0C12800]      <2> 		add edi, videobuf
  2638 0000234A 89FB                <2> 		mov ebx, edi
  2639                              <2> 	intloopclear:
  2640 0000234C 668903              <2> 		mov [ebx], ax
  2641 0000234F 81C302000000        <2> 		add ebx, 2
  2642 00002355 FEC9                <2> 		dec cl
  2643 00002357 80F900              <2> 		cmp cl, 0
  2644 0000235A 75F0                <2> 		jne intloopclear
  2645 0000235C FECD                <2> 		dec ch
  2646 0000235E 80FD00              <2> 		cmp ch, 0
  2647 00002361 75E9                <2> 		jne intloopclear
  2648 00002363 668B0D[75230000]    <2> 		mov cx, [charxy]
  2649 0000236A E9C0FEFFFF          <2> 		jmp donescr
  2650                              <2> 		
  2651 0000236F 0000                <2> linebeginpos dw 0
  2652 00002371 0000                <2> videobufpos: dw 0
  2653 00002373 0000                <2> charpos db 0,0
  2654 00002375 501E                <2> charxy db 80,30
  2655 00002377 0000                <2> charbuf dw 0
  2656                              <2> %endif
  2657                              <1> intx7:
  2658                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2659 00002379 E836340000          <2> 	call loadfile
  2660 0000237E E91ADFFFFF          <2> 	jmp timerinterrupt
  2661                              <1> intx9:
  2662                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2663 00002383 3C00                <2> 	cmp al, 0
  2664 00002385 750A                <2> 	jne num2strb
  2665 00002387 E8F20A0000          <2> 	call showdec
  2666 0000238C E90CDFFFFF          <2> 	jmp timerinterrupt
  2667                              <2> num2strb:
  2668 00002391 E81E0A0000          <2> 	call showhex
  2669 00002396 E902DFFFFF          <2> 	jmp timerinterrupt
  2670                              <1> intx10:
  2671                              <1> 	%include 'source/interrupts/10_str2num.asm'
  2672 0000239B E8C00B0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2673 000023A0 E9F8DEFFFF          <2> 	jmp timerinterrupt
  2674                              <2> 	
  2675                              <1> %ifdef threads.included
  2676                              <1> intx11:
  2677                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  2678                              <2> threadfork: ;esi is next thread's start address, if 0, fork current thread
  2679                              <2> 			;returns the PID of the new fork in ebx
  2680                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  2681 000023A5 FA                  <2> 	cli
  2682 000023A6 60                  <2> 	pushad
  2683 000023A7 8925[74240000]      <2> 	mov [.espold], esp
  2684 000023AD C605[53590000]01    <2> 	mov byte [threadson], 1
  2685 000023B4 8B1D[54590000]      <2> 	mov ebx, [currentthread]
  2686 000023BA C1E302              <2> 	shl ebx, 2
  2687 000023BD 89A3[00A72900]      <2> 	mov [threadlist + ebx], esp
  2688 000023C3 C1EB02              <2> 	shr ebx, 2
  2689 000023C6 81FB00000000        <2> 	cmp ebx, 0
  2690 000023CC 750C                <2> 	jne .simplestack
  2691 000023CE BB[BA950000]        <2> 	mov ebx, stackend
  2692 000023D3 29E3                <2> 	sub ebx, esp
  2693 000023D5 E90B000000          <2> 	jmp .stackcalcdone
  2694                              <2> .simplestack:
  2695 000023DA C1E30A              <2> 	shl ebx, 10
  2696 000023DD 81C3[00BB2900]      <2> 	add ebx, stack1
  2697 000023E3 29E3                <2> 	sub ebx, esp
  2698                              <2> .stackcalcdone:
  2699 000023E5 29DC                <2> 	sub esp, ebx
  2700 000023E7 81C4[00BB2900]      <2> 	add esp, stack1
  2701 000023ED 8B1D[4F590000]      <2> 	mov ebx, [lastthread]
  2702 000023F3 C1E308              <2> 	shl ebx, 8
  2703 000023F6 01DC                <2> 	add esp, ebx
  2704 000023F8 891D[78240000]      <2> 	mov [.stackend], ebx
  2705                              <2> 
  2706 000023FE 89E5                <2> 	mov ebp, esp
  2707 00002400 8B25[74240000]      <2> 	mov esp, [.espold]
  2708                              <2> 
  2709 00002406 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  2710 00002409 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  2711                              <2> 
  2712 0000240D 31DB                <2> 	xor ebx, ebx
  2713                              <2> .stackcopy:
  2714 0000240F 668B041C            <2> 	mov ax, [esp + ebx]
  2715 00002413 6689441D00          <2> 	mov [ebp + ebx], ax
  2716 00002418 81C302000000        <2> 	add ebx, 2
  2717 0000241E 3B1D[78240000]      <2> 	cmp ebx, [.stackend]
  2718 00002424 72E9                <2> 	jb .stackcopy
  2719                              <2> 
  2720 00002426 31C0                <2> 	xor eax, eax
  2721 00002428 668CC8              <2> 	mov ax, cs
  2722 0000242B 89C2                <2> 	mov edx, eax
  2723 0000242D 8B4C2428            <2> 	mov ecx, [esp + 40]
  2724 00002431 81C900020000        <2> 	or ecx, 0x200
  2725                              <2> 	
  2726 00002437 81FE00000000        <2> 	cmp esi, 0
  2727 0000243D 7504                <2> 	jne .nochangestack
  2728 0000243F 8B742420            <2> 	mov esi, [esp + 32]
  2729                              <2> .nochangestack:
  2730 00002443 89F0                <2> 	mov eax, esi
  2731 00002445 89EC                <2> 	mov esp, ebp
  2732                              <2> 
  2733 00002447 89442420            <2> 	mov [esp + 32], eax
  2734 0000244B 89542424            <2> 	mov [esp + 36], edx
  2735 0000244F 894C2428            <2> 	mov [esp + 40], ecx
  2736                              <2> 
  2737 00002453 8B1D[4F590000]      <2> 	mov ebx, [lastthread]
  2738 00002459 89A3[00A72900]      <2> 	mov [threadlist + ebx], esp
  2739 0000245F 81C304000000        <2> 	add ebx, 4
  2740 00002465 891D[4F590000]      <2> 	mov [lastthread], ebx
  2741 0000246B 8B25[74240000]      <2> 	mov esp, [.espold]
  2742 00002471 61                  <2> 	popad
  2743 00002472 FB                  <2> 	sti
  2744 00002473 CF                  <2> 	iret
  2745                              <2> 
  2746 00002474 00000000            <2> .espold dd 0
  2747 00002478 00000000            <2> .stackend dd 0
  2748                              <1> %endif
  2749                              <1> intx12:
  2750                              <1> 	%include 'source/interrupts/12_gettime.asm'
  2751 0000247C A1[55020000]        <2> 	mov eax, [timeseconds]
  2752 00002481 8B1D[59020000]      <2> 	mov ebx, [timenanoseconds]
  2753 00002487 89D9                <2> 	mov ecx, ebx
  2754 00002489 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2755 0000248C E90CDEFFFF          <2> 	jmp timerinterrupt
  2756                              <1> intx13:
  2757                              <1> 	%include 'source/interrupts/13_settime.asm'
  2758 00002491 A3[55020000]        <2> 	mov [timeseconds], eax
  2759 00002496 891D[59020000]      <2> 	mov [timenanoseconds], ebx
  2760 0000249C E9FCDDFFFF          <2> 	jmp timerinterrupt
  2761                              <2> 	
  2762                              <1> intx14:
  2763                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  2764 000024A1 BF[9AB00000]        <2> 	mov edi, buftxt
  2765                              <2> cpcmd:
  2766 000024A6 8A06                <2> 	mov al, [esi]
  2767 000024A8 8807                <2> 	mov [edi], al
  2768 000024AA 46                  <2> 	inc esi
  2769 000024AB 47                  <2> 	inc edi
  2770 000024AC 3C00                <2> 	cmp al, 0
  2771 000024AE 75F6                <2> 	jne cpcmd
  2772 000024B0 E802060000          <2> 	call run
  2773 000024B5 CF                  <2> 	iret
  2774                              <1> intx15:
  2775                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  2776 000024B6 BB[9A9C0000]        <2> 	mov ebx, variables
  2777 000024BB 8B35[8D2B0000]      <2> 	mov esi, [currentcommandloc]
  2778 000024C1 89F7                <2> 	mov edi, esi
  2779 000024C3 31C9                <2> 	xor ecx, ecx
  2780                              <2> getcommandzeroes:
  2781 000024C5 8A07                <2> 	mov al, [edi]
  2782 000024C7 47                  <2> 	inc edi
  2783 000024C8 3C3B                <2> 	cmp al, ';'
  2784 000024CA 740B                <2> 	je nomorezeroes
  2785 000024CC 3C00                <2> 	cmp al, 0
  2786 000024CE 7407                <2> 	je nomorezeroes
  2787 000024D0 3C20                <2> 	cmp al, ' '
  2788 000024D2 75F1                <2> 	jne getcommandzeroes
  2789 000024D4 41                  <2> 	inc ecx
  2790 000024D5 EBEE                <2> 	jmp getcommandzeroes
  2791                              <2> nomorezeroes:
  2792 000024D7 41                  <2> 	inc ecx
  2793 000024D8 4F                  <2> 	dec edi
  2794 000024D9 8B1D[269C0000]      <2> 	mov ebx, [uid]
  2795 000024DF 8B15[54590000]      <2> 	mov edx, [currentthread]
  2796 000024E5 CF                  <2> 	iret
  2797                              <2> 	
  2798                              <1> 		
  2799                              <1> %ifdef io.serial
  2800                              <1> termcopy:
  2801                              <1> 		ret
  2802                              <1> %else
  2803 000024E6 00000000            <1> 	termcursorpos dd 0
  2804 000024EA 0000                <1> 	removedvideo dw 0
  2805                              <1> termcopy:	
  2806 000024EC 60                  <1> 	pusha
  2807 000024ED BF[B0C12800]        <1> 	mov edi, videobuf
  2808 000024F2 31DB                <1> 	xor ebx, ebx
  2809 000024F4 668B1D[71230000]    <1> 	mov bx, [videobufpos]
  2810 000024FB 01DF                <1> 	add edi, ebx
  2811 000024FD 893D[E6240000]      <1> 	mov [termcursorpos], edi
  2812 00002503 E8CB000000          <1> 	call switchtermcursor
  2813 00002508 803D[D4830000]00    <1> 	cmp byte [guion], 0
  2814 0000250F 0F8420000000        <1> 	je near nowincopy
  2815                              <1> %ifdef gui.included
  2816 00002515 C605[155B0000]00    <1> 	mov byte [mouseselecton], 0
  2817 0000251C C605[B2210000]01    <1> 	mov byte [termcopyon], 1
  2818 00002523 803D[B1210000]01    <1> 	cmp byte [termguion], 1
  2819 0000252A 0F8467420000        <1> 	je near windowvideocopy
  2820                              <1> %endif
  2821 00002530 E997000000          <1> 	jmp nocopytermatall
  2822                              <1> nowincopy:
  2823 00002535 BE00000A00          <1> 	mov esi, 0xA0000
  2824 0000253A A1[3E020000]        <1> 	mov eax, [basecache]
  2825 0000253F C1E004              <1> 	shl eax, 4
  2826 00002542 29C6                <1> 	sub esi, eax
  2827 00002544 BF[B0C12800]        <1> 	mov edi, videobuf
  2828 00002549 31C9                <1> 	xor ecx, ecx
  2829 0000254B 668B0D[75230000]    <1> 	mov cx, [charxy]
  2830                              <1> nowincopy2:
  2831 00002552 668B07              <1> 	mov ax, [edi]
  2832 00002555 81C7A46A0000        <1> 	add edi, (videobuf2 - videobuf)
  2833 0000255B 668B1F              <1> 	mov bx, [edi]
  2834 0000255E 668907              <1> 	mov [edi], ax
  2835 00002561 81EFA46A0000        <1> 	sub edi, (videobuf2 - videobuf)
  2836 00002567 47                  <1> 	inc edi
  2837 00002568 6639D8              <1> 	cmp ax, bx
  2838 0000256B 743E                <1> 	je nopresentwinfont
  2839 0000256D 4F                  <1> 	dec edi
  2840 0000256E BB[2A720000]        <1> 	mov ebx, fonts
  2841 00002573 31C0                <1> 	xor eax, eax
  2842 00002575 8A07                <1> 	mov al, [edi]
  2843 00002577 C1E004              <1> 	shl eax, 4
  2844 0000257A 01C3                <1> 	add ebx, eax
  2845 0000257C 47                  <1> 	inc edi
  2846 0000257D 8A27                <1> 	mov ah, [edi]
  2847 0000257F 31D2                <1> 	xor edx, edx
  2848 00002581 8A15[75230000]      <1> 	mov dl, [charxy]
  2849 00002587 C1C110              <1> 	rol ecx, 16
  2850 0000258A B110                <1> 	mov cl, 16
  2851                              <1> nowinfont:
  2852 0000258C 8A03                <1> 	mov al, [ebx]
  2853 0000258E D0C8                <1> 	ror al, 1
  2854 00002590 80FC07              <1> 	cmp ah, 7
  2855 00002593 7602                <1> 	jbe notnotfont
  2856 00002595 F6D0                <1> 	not al
  2857                              <1> notnotfont:
  2858 00002597 8806                <1> 	mov [esi], al
  2859 00002599 01D6                <1> 	add esi, edx
  2860 0000259B 43                  <1> 	inc ebx
  2861 0000259C FEC9                <1> 	dec cl
  2862 0000259E 80F900              <1> 	cmp cl, 0
  2863 000025A1 75E9                <1> 	jne nowinfont
  2864 000025A3 C1E204              <1> 	shl edx, 4
  2865 000025A6 29D6                <1> 	sub esi, edx
  2866 000025A8 C1C110              <1> 	rol ecx, 16
  2867                              <1> nopresentwinfont:
  2868 000025AB 47                  <1> 	inc edi
  2869 000025AC 46                  <1> 	inc esi
  2870 000025AD FEC9                <1> 	dec cl
  2871 000025AF 80F900              <1> 	cmp cl, 0
  2872 000025B2 759E                <1> 	jne nowincopy2
  2873 000025B4 8A0D[75230000]      <1> 	mov cl, [charxy]
  2874 000025BA 31D2                <1> 	xor edx, edx
  2875 000025BC 88CA                <1> 	mov dl, cl
  2876 000025BE 29D6                <1> 	sub esi, edx
  2877 000025C0 C1E204              <1> 	shl edx, 4
  2878 000025C3 01D6                <1> 	add esi, edx
  2879 000025C5 FECD                <1> 	dec ch
  2880 000025C7 80FD00              <1> 	cmp ch, 0
  2881 000025CA 7586                <1> 	jne nowincopy2
  2882                              <1> nocopytermatall:
  2883 000025CC E802000000          <1> 	call switchtermcursor
  2884 000025D1 61                  <1> 	popa
  2885 000025D2 C3                  <1> 	ret
  2886                              <1> 	
  2887                              <1> switchtermcursor:
  2888 000025D3 8B3D[E6240000]      <1> 	mov edi, [termcursorpos]
  2889 000025D9 8A4701              <1> 	mov al, [edi + 1]
  2890 000025DC 8A27                <1> 	mov ah, [edi]
  2891 000025DE 3C07                <1> 	cmp al, 7
  2892 000025E0 7607                <1> 	jbe movlargecursorterm
  2893 000025E2 B007                <1> 	mov al, 7
  2894 000025E4 E902000000          <1> 	jmp movedcursorterm
  2895                              <1> movlargecursorterm:
  2896 000025E9 B0F0                <1> 	mov al, 0xF0
  2897                              <1> movedcursorterm:
  2898 000025EB 884701              <1> 	mov [edi + 1], al
  2899 000025EE 80FC00              <1> 	cmp ah, 0
  2900 000025F1 7504                <1> 	jne fixednocursorterm
  2901 000025F3 B420                <1> 	mov ah, " "
  2902 000025F5 8827                <1> 	mov [edi], ah
  2903                              <1> fixednocursorterm:
  2904 000025F7 C3                  <1> 	ret
  2905                              <1> %endif
  2906                                      %include "source/dosints.asm"
  2907                              <1> int20h:
  2908 000025F8 66B8004C            <1> mov ax, 0x4C00
  2909                              <1> int21h:
  2910                              <1> dostosolleros:
  2911 000025FC 6650                <1> 	push ax
  2912 000025FE 66B83000            <1> 	mov ax, NEW_DATA_SEL
  2913 00002602 8ED8                <1> 	mov ds, ax
  2914 00002604 8EC0                <1> 	mov es, ax
  2915 00002606 8EE0                <1> 	mov fs, ax
  2916 00002608 66B82000            <1> 	mov ax, SYS_DATA_SEL
  2917 0000260C 8EE8                <1> 	mov gs, ax
  2918 0000260E 6658                <1> 	pop ax
  2919 00002610 9C                  <1> 	pushf
  2920 00002611 60                  <1> 	pusha
  2921 00002612 80FC01              <1> 	cmp ah, 1
  2922 00002615 0F8449000000        <1> 	je near dosgchar
  2923 0000261B 80FC02              <1> 	cmp ah, 2
  2924 0000261E 0F8447000000        <1> 	je near doswchar
  2925 00002624 80FC09              <1> 	cmp ah, 9
  2926 00002627 0F8449000000        <1> 	je near dosprintstr
  2927 0000262D 80FC0A              <1> 	cmp ah, 0xA
  2928 00002630 0F8456000000        <1> 	je near dosgetstr
  2929 00002636 80FC2B              <1> 	cmp ah, 0x2B
  2930 00002639 0F8492000000        <1> 	je near dosgetdate
  2931 0000263F 80FC2C              <1> 	cmp ah, 0x2C
  2932 00002642 0F84AC000000        <1> 	je near dosgettime
  2933 00002648 80FC4C              <1> 	cmp ah, 0x4C
  2934 0000264B 0F84C1000000        <1> 	je near dosexit
  2935                              <1> backtodos:
  2936 00002651 61                  <1> 	popa
  2937 00002652 9D                  <1> 	popf
  2938 00002653 6650                <1> 	push ax
  2939 00002655 66B85000            <1> 	mov ax, DOS_DATA_SEL
  2940 00002659 8ED8                <1> 	mov ds, ax
  2941 0000265B 8EC0                <1> 	mov es, ax
  2942 0000265D 8EE0                <1> 	mov fs, ax
  2943 0000265F 8EE8                <1> 	mov gs, ax
  2944 00002661 6658                <1> 	pop ax
  2945 00002663 CF                  <1> 	iret
  2946                              <1> 
  2947                              <1> dosgchar:
  2948 00002664 E8D4FAFFFF          <1> 	call getchar
  2949 00002669 EBE6                <1> 	jmp backtodos
  2950                              <1> 	
  2951                              <1> doswchar:
  2952 0000266B 88D0                <1> 	mov al, dl
  2953 0000266D B307                <1> 	mov bl, 7
  2954 0000266F E82EFBFFFF          <1> 	call prcharint
  2955 00002674 EBDB                <1> 	jmp backtodos
  2956                              <1> 	
  2957                              <1> dosprintstr:
  2958 00002676 31F6                <1> 	xor esi, esi
  2959 00002678 6689D6              <1> 	mov si, dx
  2960 0000267B 81C600004000        <1> 	add esi, dosprogloc
  2961 00002681 B024                <1> 	mov al, "$"
  2962 00002683 B307                <1> 	mov bl, 7
  2963 00002685 E85AF6FFFF          <1> 	call printint
  2964 0000268A EBC5                <1> 	jmp backtodos
  2965                              <1> 	
  2966                              <1> dosgetstr:
  2967 0000268C 31F6                <1> 	xor esi, esi
  2968 0000268E 6689D6              <1> 	mov si, dx
  2969 00002691 81C600004000        <1> 	add esi, dosprogloc
  2970 00002697 B900000000          <1> 	mov ecx, 0
  2971 0000269C 8A0E                <1> 	mov cl, [esi]
  2972 0000269E 81C603000000        <1> 	add esi, 3
  2973 000026A4 89F7                <1> 	mov edi, esi
  2974 000026A6 8935[CD260000]      <1> 	mov [stringstart], esi
  2975 000026AC 01CF                <1> 	add edi, ecx
  2976 000026AE B00A                <1> 	mov al, 10
  2977 000026B0 B307                <1> 	mov bl, 7
  2978 000026B2 E80EF7FFFF          <1> 	call rdprint
  2979 000026B7 89F1                <1> 	mov ecx, esi
  2980 000026B9 2B0D[CD260000]      <1> 	sub ecx, [stringstart]
  2981 000026BF 8B35[CD260000]      <1> 	mov esi, [stringstart]
  2982 000026C5 884EFF              <1> 	mov [esi - 1], cl
  2983 000026C8 884EFE              <1> 	mov [esi - 2], cl
  2984 000026CB EB84                <1> 	jmp backtodos
  2985 000026CD 00000000            <1> stringstart dd 0
  2986                              <1> 
  2987                              <1> dosgetdate:
  2988 000026D1 E8491D0000          <1> 	call time
  2989 000026D6 8A0D[E7450000]      <1> 	mov cl, [RTCtimeYear]
  2990 000026DC B500                <1> 	mov ch, 0
  2991 000026DE 6681C1D007          <1> 	add cx, 2000
  2992 000026E3 8A35[E6450000]      <1> 	mov dh, [RTCtimeMonth]
  2993 000026E9 8A15[E5450000]      <1> 	mov dl, [RTCtimeDay]
  2994 000026EF E95DFFFFFF          <1> 	jmp backtodos
  2995                              <1> 
  2996                              <1> dosgettime:
  2997 000026F4 E8261D0000          <1> 	call time
  2998 000026F9 8A2D[E4450000]      <1> 	mov ch, [RTCtimeHour]
  2999 000026FF 8A0D[E3450000]      <1> 	mov cl, [RTCtimeMinute]
  3000 00002705 8A35[E2450000]      <1> 	mov dh, [RTCtimeSecond]
  3001 0000270B B200                <1> 	mov dl, 0
  3002 0000270D E93FFFFFFF          <1> 	jmp backtodos
  3003                              <1> 	
  3004                              <1> dosexit:
  3005 00002712 61                  <1> 	popa
  3006 00002713 8B25[1A9A0000]      <1> 	mov esp, [previousstack]
  3007 00002719 31DB                <1> 	xor ebx, ebx
  3008 0000271B 88C3                <1> 	mov bl, al
  3009 0000271D 80FB00              <1> 	cmp bl, 0
  3010 00002720 0F8545F5FFFF        <1> 	jne near exitprog.error
  3011 00002726 C3                  <1> 	ret
  3012                                      %include "source/solleros.asm"
  3013                              <1> 	;SOLLEROS.ASM
  3014                              <1> os:
  3015                              <1> setdefenv:
  3016 00002727 B02F                <1> 	mov al, '/'
  3017 00002729 A2[269A0000]        <1> 	mov [currentfolder], al
  3018 0000272E B801000000          <1> 	mov eax, 1
  3019 00002733 A3[229A0000]        <1> 	mov [currentfolderloc], eax
  3020 00002738 E806F6FFFF          <1> 	call clear
  3021                              <1> bootfilecheck:
  3022 0000273D 803D[2A9C0000]01    <1> 	cmp byte [ranboot], 1
  3023 00002744 0F8427000000        <1> 	je near nobootfile
  3024 0000274A C605[2A9C0000]01    <1> 	mov byte [ranboot], 1
  3025 00002751 BF[BC710000]        <1> 	mov edi, bootfilename
  3026 00002756 BE00004000          <1> 	mov esi, 0x400000
  3027 0000275B E854300000          <1> 	call loadfile
  3028 00002760 81FA94010000        <1> 	cmp edx, 404
  3029 00002766 0F8405000000        <1> 	je near nobootfile
  3030 0000276C E89A0D0000          <1> 	call progbatchfound
  3031                              <1> nobootfile:	
  3032                              <1> 
  3033 00002771 BE[00000000]        <1> 	mov esi, signature
  3034                              <1> .sigcopyloop:	;this prevents an odd error
  3035 00002776 658A06              <1> 	mov al, [gs:esi]
  3036 00002779 8806                <1> 	mov [esi], al
  3037 0000277B 46                  <1> 	inc esi
  3038 0000277C 81FE[1A000000]      <1> 	cmp esi, signatureend
  3039 00002782 72F2                <1> 	jb .sigcopyloop
  3040 00002784 BE[00000000]        <1> 	mov esi, signature
  3041 00002789 E84FF5FFFF          <1> 	call print
  3042 0000278E 8B0D[16000000]      <1> 	mov ecx, [signatureend - 4]
  3043 00002794 E8E5060000          <1> 	call showdec
  3044 00002799 BE[05720000]        <1> 	mov esi, line
  3045 0000279E E83AF5FFFF          <1> 	call print
  3046 000027A3 BE[E1710000]        <1> 	mov esi, userask
  3047 000027A8 E830F5FFFF          <1> 	call print
  3048                              <1> usercheck:
  3049 000027AD BE[9AB00000]        <1> 	mov esi, buftxt
  3050 000027B2 BF[9AB40000]        <1> 	mov edi, buftxtend
  3051 000027B7 B00A                <1> 	mov al, 10
  3052 000027B9 E807F6FFFF          <1> 	call rdprint
  3053 000027BE 56                  <1> 	push esi
  3054 000027BF BE[EB710000]        <1> 	mov esi, pwdask
  3055 000027C4 E814F5FFFF          <1> 	call print
  3056 000027C9 5E                  <1> 	pop esi
  3057 000027CA 46                  <1> 	inc esi
  3058 000027CB 8935[B5280000]      <1> 	mov [esipass], esi
  3059                              <1> passcheck:
  3060 000027D1 E867F9FFFF          <1> 	call getchar
  3061 000027D6 3C0A                <1> 	cmp al, 10
  3062 000027D8 0F8436000000        <1> 	je near gotpass
  3063 000027DE 3C08                <1> 	cmp al, 8
  3064 000027E0 0F8410000000        <1> 	je near backpass
  3065 000027E6 8806                <1> 	mov [esi], al
  3066 000027E8 46                  <1> 	inc esi
  3067 000027E9 B02A                <1> 	mov al, '*'
  3068 000027EB E8B2F9FFFF          <1> 	call prcharint
  3069 000027F0 EBDF                <1> 	jmp passcheck
  3070 000027F2 08200800            <1> backcursor2 db 8," ",8,0
  3071                              <1> backpass:
  3072 000027F6 3B35[B5280000]      <1> 	cmp esi, [esipass]
  3073 000027FC 0F84CFFFFFFF        <1> 	je near passcheck
  3074 00002802 4E                  <1> 	dec esi
  3075 00002803 C60600              <1> 	mov byte [esi], 0
  3076 00002806 56                  <1> 	push esi
  3077 00002807 BE[F2270000]        <1> 	mov esi, backcursor2
  3078 0000280C E8CCF4FFFF          <1> 	call print
  3079 00002811 5E                  <1> 	pop esi
  3080 00002812 EBBD                <1> 	jmp passcheck
  3081                              <1> gotpass:
  3082 00002814 B00A                <1> 	mov al, 10
  3083 00002816 E887F9FFFF          <1> 	call prcharint
  3084 0000281B 30C0                <1> 	xor al, al
  3085 0000281D 31C9                <1> 	xor ecx, ecx
  3086 0000281F 8806                <1> 	mov [esi], al
  3087 00002821 BB[07720000]        <1> 	mov ebx, userlst
  3088                              <1> userfind:
  3089 00002826 BE[9AB00000]        <1> 	mov esi, buftxt
  3090 0000282B 8A06                <1> 	mov al, [esi]
  3091 0000282D 3C00                <1> 	cmp al, 0
  3092 0000282F 0F84F2FEFFFF        <1> 	je near os
  3093 00002835 891D[B9280000]      <1> 	mov [usercache], ebx
  3094 0000283B E851030000          <1> 	call tester
  3095 00002840 3C01                <1> 	cmp al, 1
  3096 00002842 7416                <1> 	je pwdtest
  3097 00002844 41                  <1> 	inc ecx
  3098                              <1> nxtuser:
  3099 00002845 8A03                <1> 	mov al, [ebx]
  3100 00002847 43                  <1> 	inc ebx
  3101 00002848 3C00                <1> 	cmp al, 0
  3102 0000284A 75F9                <1> 	jne nxtuser
  3103 0000284C 81FB[2A720000]      <1> 	cmp ebx, userlstend
  3104 00002852 0F83CFFEFFFF        <1> 	jae near os
  3105 00002858 EBCC                <1> 	jmp userfind
  3106                              <1> pwdtest:
  3107 0000285A 46                  <1> 	inc esi
  3108 0000285B 43                  <1> 	inc ebx
  3109 0000285C E830030000          <1> 	call tester
  3110 00002861 3C01                <1> 	cmp al, 1
  3111 00002863 7402                <1> 	je pwdrgt
  3112 00002865 EBDE                <1> 	jmp nxtuser
  3113                              <1> pwdrgt:
  3114 00002867 D1E9                <1> 	shr ecx, 1
  3115 00002869 890D[269C0000]      <1> 	mov [uid], ecx
  3116 0000286F E8CFF4FFFF          <1> 	call clear
  3117 00002874 66B90002            <1> 	mov cx, 200h
  3118 00002878 BE[9AB00000]        <1> 	mov esi, buftxt
  3119 0000287D 8935[8D2B0000]      <1> 	mov [currentcommandloc], esi
  3120 00002883 E825000000          <1> 	call bufclr
  3121                              <1> clearolddata:
  3122 00002888 31C0                <1> 	xor eax, eax
  3123 0000288A A2[2B9C0000]        <1> 	mov [IFON], al
  3124 0000288F A2[2C9C0000]        <1> 	mov [IFTRUE], al
  3125 00002894 A2[949C0000]        <1> 	mov [BATCHISON], al
  3126 00002899 A3[909C0000]        <1> 	mov [BATCHPOS], eax
  3127 0000289E A2[959C0000]        <1> 	mov [LOOPON], al
  3128 000028A3 A3[969C0000]        <1> 	mov [LOOPPOS], eax
  3129 000028A8 E933000000          <1> 	jmp nwcmd
  3130                              <1> bufclr:	
  3131 000028AD 30C0                <1> 	xor al, al
  3132 000028AF 8806                <1> 	mov [esi], al
  3133 000028B1 46                  <1> 	inc esi
  3134 000028B2 E2F9                <1> 	loop bufclr
  3135 000028B4 C3                  <1> 	ret
  3136                              <1> 
  3137 000028B5 00000000            <1> esipass dd 0
  3138 000028B9 [07720000]          <1> usercache dd userlst
  3139                              <1> 	
  3140                              <1> buftxtclear:
  3141 000028BD 30C0                <1> 	xor al, al
  3142 000028BF BE[9AB00000]        <1> 	mov esi, buftxt
  3143 000028C4 81FE[9AB40000]      <1> clearbuftxt: cmp esi, buf2
  3144 000028CA 730E                <1> 	jae retbufclr
  3145 000028CC 8806                <1> 	mov [esi], al
  3146 000028CE 46                  <1> 	inc esi
  3147 000028CF EBF3                <1> 	jmp clearbuftxt
  3148                              <1> 
  3149 000028D1 39DE                <1> clearitbuf: cmp esi, ebx
  3150 000028D3 7305                <1> 	jae retbufclr
  3151 000028D5 8806                <1> 	mov [esi], al
  3152 000028D7 46                  <1> 	inc esi
  3153 000028D8 EBF7                <1> 	jmp clearitbuf
  3154 000028DA C3                  <1> retbufclr: ret
  3155                              <1> 
  3156 000028DB E900000000          <1> full:	jmp nwcmd
  3157                              <1> 
  3158                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3159                              <1> nwcmd:
  3160 000028E0 FB                  <1> 	sti
  3161 000028E1 31C0                <1> 	xor eax, eax
  3162 000028E3 3905[AF2A0000]      <1> 	cmp [nextcommandloc], eax
  3163 000028E9 7413                <1> 	je nomultiplecommand
  3164 000028EB 8B35[AF2A0000]      <1> 	mov esi, [nextcommandloc]
  3165 000028F1 8935[B32A0000]      <1> 	mov [thiscommandloc], esi
  3166 000028F7 E8C0010000          <1> 	call fixvariables
  3167 000028FC EBE2                <1> 	jmp nwcmd
  3168                              <1> nomultiplecommand:
  3169 000028FE A3[B32A0000]        <1> 	mov [thiscommandloc], eax
  3170 00002903 3805[53590000]      <1> 	cmp [threadson], al
  3171 00002909 7405                <1> 	je noclinwcmd
  3172 0000290B A2[53590000]        <1> 	mov [threadson], al
  3173                              <1> noclinwcmd:
  3174 00002910 B001                <1> 	mov al, 1
  3175 00002912 3805[949C0000]      <1> 	cmp [BATCHISON], al
  3176 00002918 7501                <1> 	jne cancel
  3177 0000291A C3                  <1> 	ret
  3178 0000291B 30C0                <1> cancel:	xor al, al
  3179 0000291D A2[2B9C0000]        <1> 	mov [IFON], al
  3180 00002922 A2[949C0000]        <1> 	mov [BATCHISON], al
  3181 00002927 B05B                <1> 	mov al, '['
  3182 00002929 66BB0700            <1> 	mov bx, 7
  3183 0000292D E881F8FFFF          <1> 	call prcharq
  3184 00002932 8B35[B9280000]      <1> 	mov esi, [usercache]
  3185 00002938 E88EF3FFFF          <1> 	call printquiet
  3186 0000293D BE[F5710000]        <1> 	mov esi, computer
  3187 00002942 E884F3FFFF          <1> 	call printquiet
  3188 00002947 BE[269A0000]        <1> 	mov esi, currentfolder
  3189 0000294C 0335[1E9A0000]      <1> 	add esi, [lastfolderloc]
  3190 00002952 E874F3FFFF          <1> 	call printquiet
  3191 00002957 BE[00720000]        <1> 	mov esi, endprompt
  3192 0000295C E87CF3FFFF          <1> 	call print
  3193 00002961 E857FFFFFF          <1> 	call buftxtclear
  3194 00002966 BE[9AB00000]        <1> 	mov esi, buftxt
  3195 0000296B C605[26210000]01    <1> 	mov byte [commandedit], 1
  3196 00002972 B00A                <1> 	mov al, 10
  3197 00002974 66BB0700            <1> 	mov bx, 7
  3198 00002978 BF[9AB40000]        <1> 	mov edi, buftxtend
  3199 0000297D E843F4FFFF          <1> 	call rdprint
  3200 00002982 C605[26210000]00    <1> 	mov byte [commandedit], 0
  3201 00002989 803D[9AB00000]00    <1> 	cmp byte [buftxt], 0
  3202 00002990 0F844AFFFFFF        <1> 	je near nwcmd
  3203 00002996 8B35[FC962900]      <1> gotcmd:	mov esi, [commandbufpos]
  3204 0000299C 8935[F8962900]      <1> 	mov [lastcommandpos], esi
  3205 000029A2 BF[9AB00000]        <1> 	mov edi, buftxt
  3206 000029A7 81C6[00972900]      <1> 	add esi, commandbuf
  3207 000029AD 81FE[00A72900]      <1> 	cmp esi, commandbufend
  3208 000029B3 7605                <1> 	jbe copycommand
  3209 000029B5 BE[00972900]        <1> 	mov esi, commandbuf
  3210                              <1> copycommand:
  3211 000029BA 8A07                <1> 	mov al, [edi]
  3212 000029BC 8806                <1> 	mov [esi], al
  3213 000029BE 47                  <1> 	inc edi
  3214 000029BF 46                  <1> 	inc esi
  3215 000029C0 3C00                <1> 	cmp al, 0
  3216 000029C2 740F                <1> 	je donecopy
  3217 000029C4 81FE[00A72900]      <1> 	cmp esi, commandbufend
  3218 000029CA 76EE                <1> 	jbe copycommand
  3219 000029CC BE[00972900]        <1> 	mov esi, commandbuf
  3220 000029D1 EBE7                <1> 	jmp copycommand
  3221                              <1> donecopy:
  3222 000029D3 81EE[00972900]      <1> 	sub esi, commandbuf
  3223 000029D9 8935[FC962900]      <1> 	mov [commandbufpos], esi
  3224 000029DF E8D3000000          <1> 	call run
  3225 000029E4 E9F7FEFFFF          <1> 	jmp nwcmd
  3226                              <1> 
  3227 000029E9 E8CFFEFFFF          <1> input:	call buftxtclear
  3228 000029EE BE[9AB00000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3229 000029F3 BF[9AB40000]        <1> 	mov edi, buftxtend
  3230 000029F8 B00A                <1> stdin:	mov al, 10
  3231 000029FA B307                <1> 	mov bl, 7
  3232 000029FC E8C4F3FFFF          <1> 	call rdprint
  3233 00002A01 C3                  <1> 	ret
  3234                              <1> 
  3235                              <1> replacevariable:
  3236 00002A02 8A4601              <1> 	mov al, [esi + 1]
  3237 00002A05 C64601FF            <1> 	mov byte [esi + 1], 255
  3238 00002A09 3C24                <1> 	cmp al, "$"
  3239 00002A0B 0F84AB000000        <1> 	je near fixvariables
  3240 00002A11 884601              <1> 	mov [esi + 1], al
  3241 00002A14 56                  <1> 	push esi
  3242 00002A15 81EE[9AB00000]      <1> 	sub esi, buftxt
  3243 00002A1B 89F7                <1> 	mov edi, esi
  3244 00002A1D 81C6[9AB00000]      <1> 	add esi, buftxt
  3245 00002A23 47                  <1> 	inc edi
  3246 00002A24 BB[9A9C0000]        <1> 	mov ebx, variables
  3247 00002A29 E832110000          <1> 	call nxtvrech
  3248 00002A2E 89F7                <1> 	mov edi, esi
  3249 00002A30 31DB                <1> 	xor ebx, ebx
  3250 00002A32 4E                  <1> 	dec esi
  3251                              <1> findvarname:
  3252 00002A33 4E                  <1> 	dec esi
  3253 00002A34 8A06                <1> 	mov al, [esi]
  3254 00002A36 43                  <1> 	inc ebx
  3255 00002A37 3C04                <1> 	cmp al, 4
  3256 00002A39 75F8                <1> 	jne findvarname
  3257 00002A3B 5E                  <1> 	pop esi
  3258                              <1> replacevarloop:
  3259 00002A3C 8A07                <1> 	mov al, [edi]
  3260 00002A3E 81FB00000000        <1> 	cmp ebx, 0
  3261 00002A44 0F841E000000        <1> 	je near expandbuftxt
  3262 00002A4A 3C00                <1> 	cmp al, 0
  3263 00002A4C 0F8407000000        <1> 	je near compressbuftxt
  3264 00002A52 8806                <1> 	mov [esi], al
  3265 00002A54 4B                  <1> 	dec ebx
  3266 00002A55 46                  <1> 	inc esi
  3267 00002A56 47                  <1> 	inc edi
  3268 00002A57 EBE3                <1> 	jmp replacevarloop
  3269                              <1> compressbuftxt:	
  3270 00002A59 8A041E              <1> 	mov al, [esi + ebx]
  3271 00002A5C 8806                <1> 	mov [esi], al
  3272 00002A5E 46                  <1> 	inc esi
  3273 00002A5F 3C00                <1> 	cmp al, 0
  3274 00002A61 75F6                <1> 	jne compressbuftxt
  3275 00002A63 E954000000          <1> 	jmp fixvariables
  3276                              <1> expandbuftxt:
  3277 00002A68 89F1                <1> 	mov ecx, esi
  3278 00002A6A 8A26                <1> 	mov ah, [esi]
  3279                              <1> expandbuftxtlp:
  3280 00002A6C 8A1E                <1> 	mov bl, [esi]
  3281 00002A6E 46                  <1> 	inc esi
  3282 00002A6F 8A3E                <1> 	mov bh, [esi]
  3283 00002A71 8826                <1> 	mov [esi], ah
  3284 00002A73 88FC                <1> 	mov ah, bh
  3285 00002A75 80FB00              <1> 	cmp bl, 0
  3286 00002A78 75F2                <1> 	jne expandbuftxtlp
  3287 00002A7A 89CE                <1> 	mov esi, ecx
  3288 00002A7C 8806                <1> 	mov [esi], al
  3289 00002A7E 47                  <1> 	inc edi
  3290 00002A7F 8A07                <1> 	mov al, [edi]
  3291 00002A81 3C00                <1> 	cmp al, 0
  3292 00002A83 0F8433000000        <1> 	je near fixvariables
  3293 00002A89 46                  <1> 	inc esi
  3294 00002A8A EBDC                <1> 	jmp expandbuftxt
  3295                              <1> multipleprogline:
  3296 00002A8C 30E4                <1> 	xor ah, ah
  3297 00002A8E 8826                <1> 	mov [esi], ah
  3298 00002A90 46                  <1> 	inc esi
  3299 00002A91 8935[AF2A0000]      <1> 	mov [nextcommandloc], esi
  3300 00002A97 E93E000000          <1> 	jmp donefixvariables
  3301                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3302 00002A9C 46                  <1> 	inc esi
  3303 00002A9D 8A06                <1> 	mov al, [esi]
  3304 00002A9F C606FF              <1> 	mov byte [esi], 255
  3305 00002AA2 3C23                <1> 	cmp al, '#'
  3306 00002AA4 7416                <1> 	je fixvariables
  3307 00002AA6 4E                  <1> 	dec esi
  3308 00002AA7 C60600              <1> 	mov byte [esi], 0
  3309 00002AAA E90D000000          <1> 	jmp fixvariables
  3310                              <1> 	
  3311 00002AAF 00000000            <1> nextcommandloc dd 0
  3312 00002AB3 00000000            <1> thiscommandloc dd 0	
  3313                              <1> run:
  3314 00002AB7 BE[9AB00000]        <1> 	mov esi, buftxt
  3315                              <1> fixvariables:
  3316 00002ABC 46                  <1> 	inc esi
  3317 00002ABD 8A06                <1> 	mov al, [esi]
  3318 00002ABF 3C23                <1> 	cmp al, '#'	;inline comment
  3319 00002AC1 74D9                <1> 	je inlinecomment
  3320 00002AC3 3C24                <1> 	cmp al, '$' ;variable
  3321 00002AC5 0F8437FFFFFF        <1> 	je near replacevariable
  3322 00002ACB 3C3B                <1> 	cmp al, ';' ;program list
  3323 00002ACD 74BD                <1> 	je multipleprogline
  3324 00002ACF 3C00                <1> 	cmp al, 0
  3325 00002AD1 75E9                <1> 	jne fixvariables
  3326 00002AD3 31C0                <1> 	xor eax, eax
  3327 00002AD5 A3[AF2A0000]        <1> 	mov [nextcommandloc], eax
  3328                              <1> donefixvariables:
  3329 00002ADA 803D[78300000]00    <1> 	cmp byte [indexdone], 0
  3330 00002AE1 7505                <1> 	jne progtest
  3331 00002AE3 E8FB040000          <1> 	call indexfiles
  3332                              <1> progtest:
  3333 00002AE8 31C0                <1> 	xor eax, eax
  3334 00002AEA BB[1A960000]        <1> 	mov ebx, fileindex
  3335 00002AEF 668B03              <1> prgnxt:	mov ax, [ebx]
  3336 00002AF2 B1FF                <1> 	mov cl, 255
  3337 00002AF4 B52C                <1> 	mov ch, 44
  3338 00002AF6 6639C8              <1> 	cmp ax, cx
  3339 00002AF9 740B                <1> 	je fndprg
  3340 00002AFB 43                  <1> 	inc ebx
  3341 00002AFC 81FB[1A9A0000]      <1> 	cmp ebx, fileindexend
  3342 00002B02 735D                <1> 	jae prgnf
  3343 00002B04 EBE9                <1> 	jmp prgnxt
  3344 00002B06 81C302000000        <1> fndprg: add ebx, 2
  3345 00002B0C 31C9                <1> 	xor ecx, ecx
  3346 00002B0E BE[9AB00000]        <1> 	mov esi, buftxt
  3347 00002B13 390D[B32A0000]      <1> 	cmp [thiscommandloc], ecx
  3348 00002B19 7406                <1> 	je noprgtstmultiple
  3349 00002B1B 8B35[B32A0000]      <1> 	mov esi, [thiscommandloc]
  3350                              <1> noprgtstmultiple:
  3351 00002B21 E8A6000000          <1> 	call cndtest
  3352 00002B26 3C01                <1> 	cmp al, 1
  3353 00002B28 7302                <1> 	jae prggood
  3354 00002B2A EBC3                <1> 	jmp prgnxt
  3355 00002B2C 81FB[1A9A0000]      <1> prggood: cmp ebx, fileindexend
  3356 00002B32 7358                <1> 	jae prgdn
  3357 00002B34 31C0                <1> 	xor eax, eax
  3358 00002B36 BE[9AB00000]        <1> 	mov esi, buftxt
  3359 00002B3B 3905[B32A0000]      <1> 	cmp [thiscommandloc], eax
  3360 00002B41 7406                <1> 	je noprggoodmul
  3361 00002B43 8B35[B32A0000]      <1> 	mov esi, [thiscommandloc]
  3362                              <1> noprggoodmul:
  3363 00002B49 8935[8D2B0000]      <1> 	mov [currentcommandloc], esi
  3364 00002B4F 81C303000000        <1> 	add ebx, 3
  3365 00002B55 8B3B                <1> 	mov edi, [ebx]
  3366 00002B57 C605[53590000]02    <1> 	mov byte [threadson], 2
  3367 00002B5E FFD7                <1> 	call edi
  3368 00002B60 C3                  <1> 	ret
  3369                              <1> prgnf:	
  3370 00002B61 8B35[8D2B0000]      <1> 	mov esi, [currentcommandloc]
  3371 00002B67 8A06                <1> 	mov al, [esi]
  3372 00002B69 3C00                <1> 	cmp al, 0
  3373 00002B6B 741F                <1> 	je prgdn
  3374 00002B6D BE[C4710000]        <1> 	mov esi, notfound1
  3375 00002B72 E866F1FFFF          <1> 	call print
  3376 00002B77 8B35[8D2B0000]      <1> 	mov esi, [currentcommandloc]
  3377 00002B7D E85BF1FFFF          <1> 	call print
  3378 00002B82 BE[CC710000]        <1> 	mov esi, notfound2
  3379 00002B87 E851F1FFFF          <1> 	call print
  3380 00002B8C C3                  <1> prgdn:	ret
  3381                              <1> 
  3382 00002B8D 00000000            <1> currentcommandloc dd 0
  3383                              <1> 
  3384                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3385 00002B91 6631C0              <1> 	xor ax, ax
  3386 00002B94 8A06                <1> retest:	mov al, [esi]
  3387 00002B96 8A23                <1> 	mov ah, [ebx]
  3388 00002B98 3C00                <1> 	cmp al, 0
  3389 00002B9A 7408                <1> 	je testtrue
  3390 00002B9C 38E0                <1> 	cmp al, ah
  3391 00002B9E 750C                <1> 	jne testfalse
  3392 00002BA0 43                  <1> 	inc ebx
  3393 00002BA1 46                  <1> 	inc esi
  3394 00002BA2 EBF0                <1> 	jmp retest
  3395                              <1> testtrue:
  3396 00002BA4 80FC00              <1> 	cmp ah, 0
  3397 00002BA7 7503                <1> 	jne testfalse
  3398 00002BA9 B001                <1> 	mov al, 1
  3399 00002BAB C3                  <1> 	ret
  3400                              <1> testfalse:
  3401 00002BAC 30C0                <1> 	xor al, al
  3402 00002BAE C3                  <1> 	ret
  3403                              <1> 
  3404                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3405 00002BAF 30C0                <1> 	xor al, al
  3406                              <1> opretest:
  3407 00002BB1 8A06                <1> 	mov al, [esi]
  3408 00002BB3 8A23                <1> 	mov ah, [ebx]
  3409 00002BB5 38E0                <1> 	cmp al, ah
  3410 00002BB7 7510                <1> 	jne optestfalse
  3411 00002BB9 80FC00              <1> 	cmp ah, 0
  3412 00002BBC 7404                <1> 	je optesttrue
  3413 00002BBE 43                  <1> 	inc ebx
  3414 00002BBF 46                  <1> 	inc esi
  3415 00002BC0 EBEF                <1> 	jmp opretest
  3416                              <1> optesttrue:
  3417 00002BC2 3C00                <1> 	cmp al, 0
  3418 00002BC4 7503                <1> 	jne optestfalse
  3419 00002BC6 B001                <1> 	mov al, 1
  3420 00002BC8 C3                  <1> 	ret
  3421                              <1> optestfalse:
  3422 00002BC9 30C0                <1> 	xor al, al
  3423 00002BCB C3                  <1> 	ret
  3424                              <1> 
  3425                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3426 00002BCC 30C0                <1> 	xor al, al
  3427 00002BCE 8A06                <1> cndretest:	mov al, [esi]
  3428 00002BD0 8A23                <1> 	mov ah, [ebx]
  3429 00002BD2 38CC                <1> 	cmp ah, cl
  3430 00002BD4 7408                <1> 	je cndtesttrue
  3431 00002BD6 38E0                <1> 	cmp al, ah
  3432 00002BD8 750B                <1> 	jne cndtestfalse
  3433 00002BDA 43                  <1> 	inc ebx
  3434 00002BDB 46                  <1> 	inc esi
  3435 00002BDC EBF0                <1> 	jmp cndretest
  3436                              <1> cndtesttrue:
  3437 00002BDE 38C8                <1> 	cmp al, cl
  3438 00002BE0 7506                <1> 	jne cndtestalmost
  3439 00002BE2 B001                <1> 	mov al, 1
  3440 00002BE4 C3                  <1> 	ret
  3441                              <1> cndtestfalse:
  3442 00002BE5 30C0                <1> 	xor al, al
  3443 00002BE7 C3                  <1> 	ret
  3444                              <1> cndtestalmost:
  3445 00002BE8 B002                <1> 	mov al, 2
  3446 00002BEA C3                  <1> 	ret
  3447                              <1> 	
  3448                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3449                              <1> 		                ;ends if array seperator is found backwards after 0
  3450                              <1> 	arnxt:	      
  3451 00002BEB 88E8                <1> 		mov al, ch
  3452 00002BED 88CC                <1> 		mov ah, cl        
  3453 00002BEF 663906              <1> 		cmp [esi], ax
  3454 00002BF2 744D                <1> 		je ardn
  3455 00002BF4 66390E              <1> 		cmp [esi], cx
  3456 00002BF7 7407                <1> 		je arfnd
  3457 00002BF9 46                  <1> 		inc esi
  3458 00002BFA 39DE                <1> 		cmp esi, ebx
  3459 00002BFC 7343                <1> 		jae ardn
  3460 00002BFE EBEB                <1> 		jmp arnxt
  3461 00002C00 81C602000000        <1> 	arfnd: add esi, 2
  3462 00002C06 891D[422C0000]      <1> 		mov [arbx], ebx
  3463 00002C0C 890D[462C0000]      <1> 		mov [arcx], ecx
  3464 00002C12 E8C6F0FFFF          <1> 		call print
  3465 00002C17 8935[482C0000]      <1> 		mov [arsi], esi
  3466 00002C1D BE[05720000]        <1> 		mov esi, line
  3467 00002C22 E8B6F0FFFF          <1> 		call print
  3468 00002C27 8B1D[422C0000]      <1> 		mov ebx, [arbx]
  3469 00002C2D 668B0D[462C0000]    <1> 		mov cx, [arcx]
  3470 00002C34 8B35[482C0000]      <1> 		mov esi, [arsi]
  3471 00002C3A 46                  <1> 		inc esi
  3472 00002C3B 39DE                <1> 		cmp esi, ebx
  3473 00002C3D 7302                <1> 		jae ardn
  3474 00002C3F EBAA                <1> 		jmp arnxt
  3475 00002C41 C3                  <1> 	ardn:	ret
  3476 00002C42 00000000            <1> arbx:	dw 0,0
  3477 00002C46 0000                <1> arcx:	db 0,0
  3478 00002C48 00000000            <1> arsi:	dw 0,0
  3479                              <1> 
  3480                              <1> clearbuffer:
  3481 00002C4C BE[9AB40000]        <1> 	mov esi, buf2
  3482 00002C51 B030                <1> 	mov al, '0'
  3483 00002C53 81FE[AEB40000]      <1> clearbuf: cmp esi, numbuf
  3484 00002C59 7305                <1> 	jae doneclearbuff
  3485 00002C5B 8806                <1> 	mov [esi], al
  3486 00002C5D 46                  <1> 	inc esi
  3487 00002C5E EBF3                <1> 	jmp clearbuf
  3488                              <1> doneclearbuff: 
  3489 00002C60 C3                  <1> 		ret
  3490                              <1> 
  3491                              <1> convert:
  3492 00002C61 4E                  <1> 	dec esi
  3493 00002C62 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3494                              <1> .lp:
  3495 00002C64 89DE                <1> 	mov esi, ebx
  3496 00002C66 81EE09000000        <1> 	sub esi, 9
  3497 00002C6C 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3498 00002C72 720A                <1> 	jb .8
  3499 00002C74 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3500 00002C7A FE06                <1> 	inc byte [esi]
  3501 00002C7C EBE6                <1> 	jmp .lp
  3502 00002C7E 46                  <1> .8:	inc esi
  3503 00002C7F 81F900E1F505        <1> 	cmp ecx, 100000000
  3504 00002C85 720A                <1> 	jb .7
  3505 00002C87 81E900E1F505        <1> 	sub ecx, 100000000
  3506 00002C8D FE06                <1> 	inc byte [esi]
  3507 00002C8F EBD3                <1> 	jmp .lp
  3508 00002C91 46                  <1> .7:	inc esi
  3509 00002C92 81F980969800        <1> 	cmp ecx, 10000000
  3510 00002C98 720A                <1> 	jb .6
  3511 00002C9A 81E980969800        <1> 	sub ecx, 10000000
  3512 00002CA0 FE06                <1> 	inc byte [esi]
  3513 00002CA2 EBC0                <1> 	jmp .lp
  3514 00002CA4 46                  <1> .6:	inc esi
  3515 00002CA5 81F940420F00        <1> 	cmp ecx, 1000000
  3516 00002CAB 720A                <1> 	jb .5
  3517 00002CAD 81E940420F00        <1> 	sub ecx, 1000000
  3518 00002CB3 FE06                <1> 	inc byte [esi]
  3519 00002CB5 EBAD                <1> 	jmp .lp
  3520 00002CB7 46                  <1> .5:	inc esi
  3521 00002CB8 81F9A0860100        <1> 	cmp ecx, 100000
  3522 00002CBE 720A                <1> 	jb .4
  3523 00002CC0 81E9A0860100        <1> 	sub ecx, 100000
  3524 00002CC6 FE06                <1> 	inc byte [esi]
  3525 00002CC8 EB9A                <1> 	jmp .lp
  3526 00002CCA 46                  <1> .4:	inc esi
  3527 00002CCB 81F910270000        <1> 	cmp ecx, 10000
  3528 00002CD1 720A                <1> 	jb .3
  3529 00002CD3 81E910270000        <1> 	sub ecx, 10000
  3530 00002CD9 FE06                <1> 	inc byte [esi]
  3531 00002CDB EB87                <1> 	jmp .lp
  3532 00002CDD 46                  <1> .3:	inc esi
  3533 00002CDE 81F9E8030000        <1> 	cmp ecx, 1000
  3534 00002CE4 720D                <1> 	jb .2
  3535 00002CE6 81E9E8030000        <1> 	sub ecx, 1000
  3536 00002CEC FE06                <1> 	inc byte [esi]
  3537 00002CEE E971FFFFFF          <1> 	jmp .lp
  3538 00002CF3 46                  <1> .2:	inc esi
  3539 00002CF4 81F964000000        <1> 	cmp ecx, 100
  3540 00002CFA 720D                <1> 	jb .1
  3541 00002CFC 81E964000000        <1> 	sub ecx, 100
  3542 00002D02 FE06                <1> 	inc byte [esi]
  3543 00002D04 E95BFFFFFF          <1> 	jmp .lp
  3544 00002D09 46                  <1> .1:	inc esi
  3545 00002D0A 81F90A000000        <1> 	cmp ecx, 10
  3546 00002D10 720D                <1> 	jb .0
  3547 00002D12 81E90A000000        <1> 	sub ecx, 10
  3548 00002D18 FE06                <1> 	inc byte [esi]
  3549 00002D1A E945FFFFFF          <1> 	jmp .lp
  3550 00002D1F 46                  <1> .0:	inc esi
  3551 00002D20 81F901000000        <1> 	cmp ecx, 1
  3552 00002D26 720D                <1> 	jb .dn
  3553 00002D28 81E901000000        <1> 	sub ecx, 1
  3554 00002D2E FE06                <1> 	inc byte [esi]
  3555 00002D30 E92FFFFFFF          <1> 	jmp .lp
  3556                              <1> .dn:
  3557 00002D35 C3                  <1> 	ret
  3558                              <1> 
  3559                              <1> 	
  3560                              <1> 
  3561 00002D36 00<rept>            <1> hexnumber times 8 db 0
  3562 00002D3E 202000              <1> hexnumberend db "  ",0
  3563                              <1> 
  3564                              <1> converthex:
  3565                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3566 00002D41 56                  <1> 	push esi
  3567 00002D42 B030                <1> 	mov al, "0"
  3568 00002D44 39FE                <1> .clearlp: cmp esi, edi
  3569 00002D46 7305                <1> 	jae .doneclear
  3570 00002D48 8806                <1> 	mov [esi], al
  3571 00002D4A 46                  <1> 	inc esi
  3572 00002D4B EBF7                <1> 	jmp .clearlp
  3573                              <1> .doneclear:
  3574 00002D4D 81EE02000000        <1> 	sub esi, 2
  3575 00002D53 89C8                <1> 	mov eax, ecx
  3576                              <1> .loop:
  3577 00002D55 30FF                <1> 	xor bh, bh
  3578 00002D57 88C3                <1> 	mov bl, al
  3579 00002D59 66C1E304            <1> 	shl bx, 4
  3580 00002D5D C0EB04              <1> 	shr bl, 4
  3581 00002D60 86DF                <1> 	xchg bl, bh ;they are backwards
  3582 00002D62 80C330              <1> 	add bl, 48
  3583 00002D65 80FB39              <1> 	cmp bl, "9"
  3584 00002D68 7609                <1> 	jbe .goodbl
  3585 00002D6A 80EB30              <1> 	sub bl, 48
  3586 00002D6D 80EB0A              <1> 	sub bl, 0xA
  3587 00002D70 80C341              <1> 	add bl, "A"
  3588                              <1> .goodbl:
  3589 00002D73 80C730              <1> 	add bh, 48
  3590 00002D76 80FF39              <1> 	cmp bh, "9"
  3591 00002D79 7609                <1> 	jbe .goodbh
  3592 00002D7B 80EF30              <1> 	sub bh, 48
  3593 00002D7E 80EF0A              <1> 	sub bh, 0xA
  3594 00002D81 80C741              <1> 	add bh, "A"
  3595                              <1> .goodbh:
  3596 00002D84 C1E808              <1> 	shr eax, 8
  3597 00002D87 66891E              <1> 	mov [esi], bx
  3598 00002D8A 81EE02000000        <1> 	sub esi, 2
  3599 00002D90 3B3424              <1> 	cmp esi, [esp]
  3600 00002D93 7207                <1> 	jb .done
  3601 00002D95 3D00000000          <1> 	cmp eax, 0
  3602 00002D9A 75B9                <1> 	jne .loop
  3603                              <1> .done:
  3604 00002D9C 5E                  <1> 	pop esi
  3605 00002D9D C3                  <1> 	ret
  3606                              <1> 	
  3607                              <1> 	
  3608 00002D9E 00                  <1> smallhex db 0
  3609 00002D9F 01                  <1> firsthexshown db 1
  3610                              <1> showhexsmall:
  3611 00002DA0 C605[9E2D0000]01    <1> 	mov byte [smallhex], 1
  3612 00002DA7 E808000000          <1> 	call showhex
  3613 00002DAC C605[9E2D0000]00    <1> 	mov byte [smallhex], 0
  3614 00002DB3 C3                  <1> 	ret
  3615                              <1> showhex:
  3616 00002DB4 60                  <1> 	pusha
  3617 00002DB5 BE[362D0000]        <1> 	mov esi, hexnumber
  3618 00002DBA BF[3E2D0000]        <1> 	mov edi, hexnumberend
  3619 00002DBF E87DFFFFFF          <1> 	call converthex
  3620 00002DC4 803D[9F2D0000]01    <1> 	cmp byte [firsthexshown], 1
  3621 00002DCB 7503                <1> 	jne .show
  3622 00002DCD 6631D2              <1> 	xor dx, dx
  3623                              <1> .show:
  3624 00002DD0 803D[9F2D0000]03    <1> 	cmp byte [firsthexshown], 3
  3625 00002DD7 750A                <1> 	jne .nonewhexline
  3626 00002DD9 BE[05720000]        <1> 	mov esi, line
  3627 00002DDE E8FAEEFFFF          <1> 	call print
  3628                              <1> .nonewhexline:
  3629 00002DE3 803D[9F2D0000]04    <1> 	cmp byte [firsthexshown], 4
  3630 00002DEA 7527                <1> 	jne .notab
  3631 00002DEC B1A0                <1> 	mov cl, 160
  3632 00002DEE 28D1                <1> 	sub cl, dl
  3633 00002DF0 C0E905              <1> 	shr cl, 5
  3634 00002DF3 C0E105              <1> 	shl cl, 5
  3635 00002DF6 80F900              <1> 	cmp cl, 0
  3636 00002DF9 750F                <1> 	jne .nonewline
  3637 00002DFB BE[05720000]        <1> 	mov esi, line
  3638 00002E00 E8D8EEFFFF          <1> 	call print
  3639 00002E05 E909000000          <1> 	jmp .notab
  3640                              <1> .nonewline:
  3641 00002E0A 80C20F              <1> 	add dl, 15
  3642 00002E0D C0EA04              <1> 	shr dl, 4
  3643 00002E10 C0E204              <1> 	shl dl, 4
  3644                              <1> .notab:
  3645 00002E13 BE[362D0000]        <1> 	mov esi, hexnumber
  3646 00002E18 803D[9E2D0000]01    <1> 	cmp byte [smallhex],1
  3647 00002E1F 7506                <1> 	jne .nosmall
  3648 00002E21 81C606000000        <1> 	add esi, 6
  3649                              <1> .nosmall:
  3650 00002E27 803D[9F2D0000]05    <1> 	cmp byte [firsthexshown], 5
  3651 00002E2E 750A                <1> 	jne .noquiet
  3652 00002E30 E896EEFFFF          <1> 	call printquiet
  3653 00002E35 E918000000          <1> 	jmp .donequiet
  3654                              <1> .noquiet:
  3655 00002E3A 803D[9F2D0000]06    <1> 	cmp byte [firsthexshown], 6
  3656 00002E41 750A                <1> 	jne .normal
  3657 00002E43 E877EEFFFF          <1> 	call printhighlight
  3658 00002E48 E905000000          <1> 	jmp .donequiet
  3659                              <1> .normal:
  3660 00002E4D E88BEEFFFF          <1> 	call print
  3661                              <1> .donequiet:
  3662 00002E52 803D[9F2D0000]02    <1> 	cmp byte [firsthexshown], 2
  3663 00002E59 750A                <1> 	jne .shown
  3664 00002E5B BE[05720000]        <1> 	mov esi, line
  3665 00002E60 E878EEFFFF          <1> 	call print
  3666                              <1> .shown:
  3667 00002E65 C605[9F2D0000]00    <1> 	mov byte [firsthexshown], 0
  3668 00002E6C 61                  <1> 	popa
  3669 00002E6D C3                  <1> 	ret
  3670                              <1> 
  3671                              <1> 
  3672 00002E6E 303030303030303030- <1> decnumber db "00000000000000"
  3673 00002E77 3030303030          <1>
  3674 00002E7C 2000                <1> decnumberend: db " ",0
  3675                              <1> 
  3676                              <1> showdec: ;;same as showhex, just uses decimal conversion
  3677 00002E7E 60                  <1> 	pusha
  3678 00002E7F BF[6E2E0000]        <1> 	mov edi, decnumber
  3679 00002E84 BE[7C2E0000]        <1> 	mov esi, decnumberend
  3680                              <1> .clear:
  3681 00002E89 C60730              <1> 	mov byte [edi], '0'
  3682 00002E8C 47                  <1> 	inc edi
  3683 00002E8D 39F7                <1> 	cmp edi, esi
  3684 00002E8F 72F8                <1> 	jb .clear
  3685 00002E91 BF[6E2E0000]        <1> 	mov edi, decnumber
  3686 00002E96 E8C6FDFFFF          <1> 	call convert
  3687 00002E9B 803D[9F2D0000]01    <1> 	cmp byte [firsthexshown], 1
  3688 00002EA2 7503                <1> 	jne .show
  3689 00002EA4 6631D2              <1> 	xor dx, dx
  3690                              <1> .show:
  3691 00002EA7 803D[9F2D0000]03    <1> 	cmp byte [firsthexshown], 3
  3692 00002EAE 750A                <1> 	jne .nonewdecline
  3693 00002EB0 BE[05720000]        <1> 	mov esi, line
  3694 00002EB5 E823EEFFFF          <1> 	call print
  3695                              <1> .nonewdecline:
  3696 00002EBA 803D[9F2D0000]04    <1> 	cmp byte [firsthexshown], 4
  3697 00002EC1 7527                <1> 	jne .notab
  3698 00002EC3 B1A0                <1> 	mov cl, 160
  3699 00002EC5 28D1                <1> 	sub cl, dl
  3700 00002EC7 C0E905              <1> 	shr cl, 5
  3701 00002ECA C0E105              <1> 	shl cl, 5
  3702 00002ECD 80F900              <1> 	cmp cl, 0
  3703 00002ED0 750F                <1> 	jne .nonewline
  3704 00002ED2 BE[05720000]        <1> 	mov esi, line
  3705 00002ED7 E801EEFFFF          <1> 	call print
  3706 00002EDC E909000000          <1> 	jmp .notab
  3707                              <1> .nonewline:
  3708 00002EE1 80C20F              <1> 	add dl, 15
  3709 00002EE4 C0EA04              <1> 	shr dl, 4
  3710 00002EE7 C0E204              <1> 	shl dl, 4
  3711                              <1> .notab:
  3712 00002EEA BE[6E2E0000]        <1> 	mov esi, decnumber
  3713 00002EEF 4E                  <1> 	dec esi
  3714                              <1> .sifind:
  3715 00002EF0 46                  <1> 	inc esi
  3716 00002EF1 803E30              <1> 	cmp byte [esi], '0'
  3717 00002EF4 74FA                <1> 	je .sifind
  3718 00002EF6 E8E2EDFFFF          <1> 	call print
  3719 00002EFB 803D[9F2D0000]02    <1> 	cmp byte [firsthexshown], 2
  3720 00002F02 750A                <1> 	jne .shown
  3721 00002F04 BE[05720000]        <1> 	mov esi, line
  3722 00002F09 E8CFEDFFFF          <1> 	call print
  3723                              <1> .shown:
  3724 00002F0E C605[9F2D0000]00    <1> 	mov byte [firsthexshown], 0
  3725 00002F15 61                  <1> 	popa
  3726 00002F16 C3                  <1> 	ret
  3727                              <1> 	
  3728                              <1> cnvrthextxt:
  3729 00002F17 31C9                <1> 	xor ecx, ecx
  3730 00002F19 31C0                <1> 	xor eax, eax
  3731 00002F1B 31D2                <1> 	xor edx, edx
  3732 00002F1D 31DB                <1> 	xor ebx, ebx
  3733 00002F1F 4E                  <1> 	dec esi
  3734                              <1> .end:
  3735 00002F20 46                  <1> 	inc esi
  3736 00002F21 8A06                <1> 	mov al, [esi]
  3737 00002F23 3C00                <1> 	cmp al, 0
  3738 00002F25 75F9                <1> 	jne .end
  3739                              <1> .loop:
  3740 00002F27 4E                  <1> 	dec esi
  3741 00002F28 8A06                <1> 	mov al, [esi]
  3742 00002F2A 3C41                <1> 	cmp al, "A"
  3743 00002F2C 7328                <1> 	jae .char
  3744 00002F2E 2C30                <1> 	sub al, 48
  3745 00002F30 3C10                <1> 	cmp al, 16
  3746 00002F32 7721                <1> 	ja .done
  3747                              <1> .donechar:
  3748 00002F34 81FA00000000        <1> 	cmp edx, 0
  3749 00002F3A 740E                <1> 	je .noshl
  3750 00002F3C 89D3                <1> 	mov ebx, edx
  3751                              <1> .shl:
  3752 00002F3E C1E004              <1> 	shl eax, 4
  3753 00002F41 4B                  <1> 	dec ebx
  3754 00002F42 81FB00000000        <1> 	cmp ebx, 0
  3755 00002F48 75F4                <1> 	jne .shl
  3756                              <1> .noshl:
  3757 00002F4A 42                  <1> 	inc edx
  3758 00002F4B 01C1                <1> 	add ecx, eax
  3759 00002F4D 81FA08000000        <1> 	cmp edx, 8
  3760 00002F53 72D2                <1> 	jb .loop
  3761                              <1> .done:
  3762 00002F55 C3                  <1> 	ret
  3763                              <1> .char:
  3764 00002F56 3C46                <1> 	cmp al, "F"
  3765 00002F58 77FB                <1> 	ja .done
  3766 00002F5A 2C41                <1> 	sub al, "A"
  3767 00002F5C 040A                <1> 	add al, 0xA
  3768 00002F5E EBD4                <1> 	jmp .donechar
  3769                              <1> 	
  3770                              <1> 	
  3771                              <1> cnvrttxt: 
  3772 00002F60 31C9                <1> 	xor ecx, ecx
  3773 00002F62 31C0                <1> 	xor eax, eax
  3774 00002F64 31D2                <1> 	xor edx, edx
  3775 00002F66 31DB                <1> 	xor ebx, ebx
  3776 00002F68 4E                  <1> 	dec esi
  3777                              <1> .lp:
  3778 00002F69 46                  <1> 	inc esi
  3779 00002F6A 8A06                <1> 	mov al, [esi]
  3780 00002F6C 3C00                <1> 	cmp al, 0
  3781 00002F6E 75F9                <1> 	jne .lp
  3782 00002F70 4E                  <1> 	dec esi
  3783 00002F71 8A06                <1> 	mov al, [esi]
  3784 00002F73 3C2E                <1> 	cmp al, '.'
  3785 00002F75 7503                <1> 	jne .dot
  3786 00002F77 46                  <1> 	inc esi
  3787 00002F78 EBEF                <1> 	jmp .lp
  3788                              <1> .dot:
  3789 00002F7A 3C20                <1> 	cmp al, ' '
  3790 00002F7C 7404                <1> 	je .zero
  3791 00002F7E 3C30                <1> 	cmp al, '0'
  3792 00002F80 7504                <1> 	jne .txtlp
  3793                              <1> .zero: 
  3794 00002F82 39FE                <1> 		cmp esi, edi
  3795 00002F84 7458                <1> 		je .done
  3796                              <1> .txtlp:
  3797 00002F86 31C0                <1> 	xor eax, eax
  3798 00002F88 8A06                <1> 	mov al, [esi]
  3799 00002F8A 3C3D                <1> 	cmp al, '='
  3800 00002F8C 7450                <1> 	je .done
  3801 00002F8E 3C30                <1> 	cmp al, 48
  3802 00002F90 724C                <1> 	jb .done
  3803 00002F92 3C23                <1> 	cmp al, '#'
  3804 00002F94 7448                <1> 	je .done
  3805 00002F96 39FE                <1> 	cmp esi, edi
  3806 00002F98 7244                <1> 	jb .done
  3807 00002F9A 81F900000000        <1> 	cmp ecx, 0
  3808 00002FA0 7708                <1> 	ja .exp
  3809 00002FA2 2C30                <1> .noexp:	sub al, 48
  3810 00002FA4 01C2                <1> 	add edx, eax
  3811 00002FA6 4E                  <1> 	dec esi
  3812 00002FA7 41                  <1> 	inc ecx
  3813 00002FA8 EBDC                <1> 	jmp .txtlp
  3814 00002FAA 81F900000000        <1> .exp:	cmp ecx, 0
  3815 00002FB0 74F0                <1> 	je .noexp
  3816 00002FB2 2C30                <1> 	sub al, 48
  3817 00002FB4 51                  <1> 	push ecx
  3818 00002FB5 89C3                <1> .expmul:	mov ebx, eax
  3819 00002FB7 01D8                <1> 	add eax, ebx
  3820 00002FB9 01D8                <1> 	add eax, ebx
  3821 00002FBB 01D8                <1> 	add eax, ebx
  3822 00002FBD 01D8                <1> 	add eax, ebx
  3823 00002FBF 01D8                <1> 	add eax, ebx
  3824 00002FC1 01D8                <1> 	add eax, ebx
  3825 00002FC3 01D8                <1> 	add eax, ebx
  3826 00002FC5 01D8                <1> 	add eax, ebx
  3827 00002FC7 01D8                <1> 	add eax, ebx
  3828 00002FC9 81E901000000        <1> 	sub ecx, 1
  3829 00002FCF 81F900000000        <1> 	cmp ecx, 0
  3830 00002FD5 77DE                <1> 	ja .expmul
  3831 00002FD7 01C2                <1> 	add edx, eax
  3832 00002FD9 59                  <1> 	pop ecx
  3833 00002FDA 4E                  <1> 	dec esi
  3834 00002FDB 41                  <1> 	inc ecx
  3835 00002FDC EBA8                <1> 	jmp .txtlp
  3836 00002FDE 89D1                <1> .done: mov ecx, edx
  3837 00002FE0 C3                  <1> 	ret
  3838                                      %include "source/programs.asm"
  3839 00002FE1 FF2C                <1> filetypes db 255,44
  3840                              <1> progstart:		;programs start here
  3841                              <1> indexfiles:
  3842 00002FE3 BE[E32F0000]        <1> 	mov esi, progstart
  3843 00002FE8 BB[1A960000]        <1> 	mov ebx, fileindex
  3844 00002FED BF[E32F0000]        <1> 	mov edi, progstart
  3845 00002FF2 81EF02000000        <1> 	sub edi, 2
  3846                              <1> indexloop:
  3847 00002FF8 668B0E              <1> 	mov cx, [esi]
  3848                              <1> 	indexloop2:
  3849 00002FFB 663B0F              <1> 		cmp cx, [edi]
  3850 00002FFE 7424                <1> 		je indexloop2done
  3851 00003000 81EF02000000        <1> 		sub edi, 2
  3852 00003006 81FF[E12F0000]      <1> 		cmp edi, filetypes
  3853 0000300C 73ED                <1> 		jae indexloop2
  3854 0000300E BF[E32F0000]        <1> 	mov edi, progstart
  3855 00003013 81EF02000000        <1> 	sub edi, 2
  3856 00003019 46                  <1> 	inc esi
  3857 0000301A 81FE[29470000]      <1> 	cmp esi, batchprogend
  3858 00003020 734E                <1> 	jae indexloopdone
  3859 00003022 EBD4                <1> 	jmp indexloop
  3860                              <1> indexloop2done:
  3861 00003024 66890B              <1> 	mov [ebx], cx
  3862 00003027 81C302000000        <1> 	add ebx, 2
  3863 0000302D 81C602000000        <1> 	add esi, 2
  3864                              <1> 	nameindex:
  3865 00003033 8A0E                <1> 		mov cl, [esi]
  3866 00003035 80F900              <1> 		cmp cl, 0
  3867 00003038 7406                <1> 		je nameindexdone
  3868 0000303A 880B                <1> 		mov [ebx], cl
  3869 0000303C 46                  <1> 		inc esi
  3870 0000303D 43                  <1> 		inc ebx
  3871 0000303E EBF3                <1> 		jmp nameindex
  3872                              <1> 	nameindexdone:
  3873 00003040 43                  <1> 		inc ebx
  3874 00003041 66C7030000          <1> 		mov word [ebx], 0
  3875 00003046 81C302000000        <1> 		add ebx, 2
  3876 0000304C 46                  <1> 		inc esi
  3877 0000304D 8933                <1> 		mov [ebx], esi
  3878 0000304F 81C304000000        <1> 		add ebx, 4
  3879 00003055 66C7030000          <1> 		mov word [ebx], 0
  3880 0000305A 81C302000000        <1> 		add ebx, 2
  3881 00003060 81FB[1A9A0000]      <1> 		cmp ebx, fileindexend
  3882 00003066 7308                <1> 		jae indexloopdone
  3883 00003068 81C601000000        <1> 		add esi, 1
  3884 0000306E EB88                <1> 		jmp indexloop
  3885 00003070 C605[78300000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  3886 00003077 C3                  <1> 		ret
  3887                              <1> 
  3888 00003078 00                  <1> indexdone db 0
  3889                              <1> %include 'source/programs/_comment.asm' ;#
  3890 00003079 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  3891 0000307D C3                  <2> 	ret 
  3892                              <1> %include 'source/programs/_math.asm' ;!
  3893 0000307E FF2C2100            <2> db 255,44,"!",0
  3894                              <2> 	num:	
  3895 00003082 E8C5FBFFFF          <2> 		call clearbuffer
  3896 00003087 C605[08330000]00    <2> 		mov byte [decimal], 0
  3897 0000308E C605[09330000]00    <2> 		mov byte [decimal2], 0
  3898 00003095 8B35[8D2B0000]      <2> 		mov esi, [currentcommandloc]
  3899 0000309B 31C0                <2> 		xor eax, eax
  3900 0000309D 31C9                <2> 		xor ecx, ecx
  3901 0000309F 31DB                <2> 		xor ebx, ebx
  3902 000030A1 8A06                <2> 	num2:	mov al, [esi]
  3903 000030A3 3C2B                <2> 		cmp al, '+'
  3904 000030A5 741B                <2> 		je operatorfound
  3905 000030A7 3C2D                <2> 		cmp al, '-'
  3906 000030A9 7417                <2> 		je operatorfound
  3907 000030AB 3C2A                <2> 		cmp al, '*'
  3908 000030AD 7413                <2> 		je operatorfound
  3909 000030AF 3C2F                <2> 		cmp al, '/'
  3910 000030B1 740F                <2> 		je operatorfound
  3911 000030B3 3C5E                <2> 		cmp al, '^'
  3912 000030B5 740B                <2> 		je operatorfound
  3913 000030B7 46                  <2> 		inc esi
  3914 000030B8 3C00                <2> 		cmp al, 0
  3915 000030BA 0F8420F8FFFF        <2> 		je near nwcmd
  3916 000030C0 EBDF                <2> 		jmp num2
  3917 000030C2 50                  <2> 	operatorfound: push eax
  3918 000030C3 30E4                <2> 		xor ah, ah
  3919 000030C5 8826                <2> 		mov [esi], ah
  3920 000030C7 89F7                <2> 		mov edi, esi
  3921 000030C9 46                  <2> 		inc esi
  3922 000030CA 8A06                <2> 		mov al, [esi]
  3923 000030CC 3C25                <2> 		cmp al, '%'
  3924 000030CE 0F8462000000        <2> 		je near resultnum1
  3925                              <2> 	varnum2: 
  3926 000030D4 57                  <2> 		push edi
  3927 000030D5 E8A4000000          <2> 		call checkdecimal
  3928 000030DA 5F                  <2> 		pop edi
  3929 000030DB E880FEFFFF          <2> 		call cnvrttxt
  3930                              <2> 	vrnm2:
  3931 000030E0 89CB                <2> 		mov ebx, ecx
  3932 000030E2 53                  <2> 		push ebx
  3933 000030E3 E864FBFFFF          <2> 		call clearbuffer
  3934 000030E8 8B35[8D2B0000]      <2> 		mov esi, [currentcommandloc]
  3935 000030EE 89F7                <2> 		mov edi, esi
  3936 000030F0 46                  <2> 		inc esi
  3937 000030F1 8A06                <2> 		mov al, [esi]
  3938 000030F3 3C25                <2> 		cmp al, '%'
  3939 000030F5 0F844F000000        <2> 		je near resultnum2
  3940                              <2> 	varnum4: 
  3941 000030FB 57                  <2> 		push edi
  3942 000030FC E869000000          <2> 		call checkdecimal2
  3943 00003101 5F                  <2> 		pop edi
  3944 00003102 E859FEFFFF          <2> 		call cnvrttxt
  3945                              <2> 	vrnm4:
  3946 00003107 5B                  <2> 		pop ebx
  3947 00003108 58                  <2> 		pop eax
  3948 00003109 3C2B                <2> 		cmp al, '+'
  3949 0000310B 0F849B000000        <2> 		je near plusnum
  3950 00003111 3C2D                <2> 		cmp al, '-'
  3951 00003113 0F849F000000        <2> 		je near subnum
  3952 00003119 3C2A                <2> 		cmp al, '*'
  3953 0000311B 0F84A3000000        <2> 		je near mulnum
  3954 00003121 3C2F                <2> 		cmp al, '/'
  3955 00003123 0F84B1000000        <2> 		je near divnum
  3956 00003129 3C5E                <2> 		cmp al, '^'
  3957 0000312B 0F84CE000000        <2> 		je near expnum
  3958 00003131 E9AAF7FFFF          <2> 		jmp nwcmd
  3959                              <2> 	resultnum1:
  3960 00003136 8A0D[0A330000]      <2> 		mov cl, [decimalresult]
  3961 0000313C 880D[08330000]      <2> 		mov [decimal], cl
  3962 00003142 8B0D[0B330000]      <2> 		mov ecx, [result]
  3963 00003148 EB96                <2> 		jmp vrnm2
  3964                              <2> 	resultnum2:
  3965 0000314A 8A0D[08330000]      <2> 		mov cl, [decimal]
  3966 00003150 880D[09330000]      <2> 		mov [decimal2], cl
  3967 00003156 8A0D[0A330000]      <2> 		mov cl, [decimalresult]
  3968 0000315C 880D[08330000]      <2> 		mov [decimal], cl
  3969 00003162 8B0D[0B330000]      <2> 		mov ecx, [result]
  3970 00003168 EB9D                <2> 		jmp vrnm4
  3971                              <2> 	checkdecimal2:
  3972 0000316A 8A25[08330000]      <2> 		mov ah, [decimal]
  3973 00003170 8825[09330000]      <2> 		mov [decimal2], ah
  3974 00003176 30E4                <2> 		xor ah, ah
  3975 00003178 8825[08330000]      <2> 		mov [decimal], ah
  3976                              <2> 	checkdecimal:
  3977 0000317E 89F7                <2> 		mov edi, esi
  3978                              <2> 	chkdec1:
  3979 00003180 8A07                <2> 		mov al, [edi]
  3980 00003182 3C2E                <2> 		cmp al, '.'
  3981 00003184 0F840B000000        <2> 		je near fnddec
  3982 0000318A 3C00                <2> 		cmp al, 0
  3983 0000318C 0F8419000000        <2> 		je near nodecimal
  3984 00003192 47                  <2> 		inc edi
  3985 00003193 EBEB                <2> 		jmp chkdec1
  3986                              <2> 	fnddec:
  3987 00003195 8A4701              <2> 		mov al, [edi + 1]
  3988 00003198 8807                <2> 		mov [edi], al
  3989 0000319A 3C00                <2> 		cmp al, 0
  3990 0000319C 0F8409000000        <2> 		je near nodecimal
  3991 000031A2 FE05[08330000]      <2> 		inc byte [decimal]
  3992 000031A8 47                  <2> 		inc edi
  3993 000031A9 EBEA                <2> 		jmp fnddec
  3994                              <2> 	nodecimal:
  3995 000031AB C3                  <2> 		ret
  3996                              <2> 	plusnum:
  3997 000031AC E815010000          <2> 		call decaddfix
  3998 000031B1 01D9                <2> 		add ecx, ebx
  3999 000031B3 E98A000000          <2> 		jmp retnum
  4000                              <2> 	subnum:
  4001 000031B8 E809010000          <2> 		call decaddfix
  4002 000031BD 29D9                <2> 		sub ecx, ebx
  4003 000031BF E97E000000          <2> 		jmp retnum
  4004                              <2> 	mulnum:
  4005 000031C4 A0[09330000]        <2> 		mov al, [decimal2]
  4006 000031C9 0005[08330000]      <2> 		add [decimal], al
  4007 000031CF 89C8                <2> 		mov eax, ecx
  4008 000031D1 F7E3                <2> 		mul ebx
  4009 000031D3 89C1                <2> 		mov ecx, eax
  4010 000031D5 E968000000          <2> 		jmp retnum
  4011                              <2> 	divnum:
  4012 000031DA E8E7000000          <2> 		call decaddfix
  4013 000031DF 30C0                <2> 		xor al, al
  4014 000031E1 A2[08330000]        <2> 		mov [decimal], al
  4015 000031E6 31D2                <2> 		xor edx, edx
  4016 000031E8 89C8                <2> 		mov eax, ecx
  4017 000031EA 81FB00000000        <2> 		cmp ebx, 0
  4018 000031F0 0F844C000000        <2> 		je near retnum
  4019 000031F6 F7F3                <2> 		div ebx
  4020 000031F8 89C1                <2> 		mov ecx, eax
  4021 000031FA E943000000          <2> 		jmp retnum
  4022                              <2> 	expnum:
  4023 000031FF 8A15[08330000]      <2> 		mov dl, [decimal]
  4024 00003205 8815[09330000]      <2> 		mov [decimal2], dl
  4025 0000320B 31D2                <2> 		xor edx, edx
  4026 0000320D 89C8                <2> 		mov eax, ecx
  4027 0000320F 89D9                <2> 		mov ecx, ebx
  4028 00003211 89C3                <2> 		mov ebx, eax
  4029 00003213 81F900000000        <2> 		cmp ecx, 0
  4030 00003219 7422                <2> 		je noexpnum
  4031 0000321B 49                  <2> 		dec ecx
  4032 0000321C 81F900000000        <2> 		cmp ecx, 0
  4033 00003222 7412                <2> 		je noexpnumlp
  4034 00003224 F7E3                <2> 	expnumlp: mul ebx
  4035 00003226 8A15[09330000]      <2> 		mov dl, [decimal2]
  4036 0000322C 0015[08330000]      <2> 		add [decimal], dl
  4037 00003232 31D2                <2> 		xor edx, edx
  4038 00003234 E2EE                <2> 		loop expnumlp
  4039                              <2> 	noexpnumlp:
  4040 00003236 89C1                <2> 		mov ecx, eax
  4041 00003238 E905000000          <2> 		jmp retnum
  4042                              <2> 	noexpnum:
  4043 0000323D B901000000          <2> 		mov ecx, 1
  4044                              <2> 	retnum: 
  4045 00003242 BE[AEB40000]        <2> 		mov esi, numbuf
  4046 00003247 890D[0B330000]      <2> 		mov [result], ecx
  4047 0000324D E80FFAFFFF          <2> 		call convert
  4048 00003252 BE[AEB40000]        <2> 		mov esi, numbuf
  4049 00003257 8A25[08330000]      <2> 		mov ah, [decimal]
  4050 0000325D 8825[0A330000]      <2> 		mov [decimalresult], ah
  4051 00003263 80FC00              <2> 		cmp ah, 0
  4052 00003266 0F8425000000        <2> 		je near noputdecimal
  4053                              <2> 	putdecimal:
  4054 0000326C 4E                  <2> 		dec esi
  4055 0000326D FECC                <2> 		dec ah
  4056 0000326F 80FC00              <2> 		cmp ah, 0
  4057 00003272 0F87F4FFFFFF        <2> 		ja near putdecimal
  4058 00003278 4E                  <2> 		dec esi
  4059 00003279 8A06                <2> 		mov al, [esi]
  4060 0000327B C6062E              <2> 		mov byte [esi], '.'
  4061                              <2> 	decputloop:
  4062 0000327E 4E                  <2> 		dec esi
  4063 0000327F 8A26                <2> 		mov ah, [esi]
  4064 00003281 8806                <2> 		mov [esi], al
  4065 00003283 88E0                <2> 		mov al, ah
  4066 00003285 81FE[9AB40000]      <2> 		cmp esi, buf2
  4067 0000328B 0F87EDFFFFFF        <2> 		ja near decputloop
  4068                              <2> 	noputdecimal:
  4069 00003291 BE[9AB40000]        <2> 		mov esi, buf2
  4070 00003296 E809000000          <2> 		call chkadd
  4071 0000329B E940F6FFFF          <2> 		jmp nwcmd
  4072 000032A0 00000000            <2> edxnumbuf dw 0,0
  4073 000032A4 8A06                <2> 	chkadd: mov al, [esi]
  4074 000032A6 3C30                <2> 		cmp al, '0'
  4075 000032A8 750C                <2> 		jne dnadd
  4076 000032AA 46                  <2> 		inc esi
  4077 000032AB 81FE[AEB40000]      <2> 		cmp esi, numbuf
  4078 000032B1 7402                <2> 		je dnaddm1
  4079 000032B3 EBEF                <2> 		jmp chkadd
  4080 000032B5 4E                  <2> 	dnaddm1: dec esi
  4081 000032B6 E822EAFFFF          <2> 	dnadd:	call print
  4082 000032BB BE[05720000]        <2> 		mov esi, line
  4083 000032C0 E818EAFFFF          <2> 		call print
  4084 000032C5 C3                  <2> 		ret
  4085                              <2> 		
  4086                              <2> 	decaddfix:
  4087 000032C6 A0[09330000]        <2> 		mov al, [decimal2]
  4088 000032CB 8A25[08330000]      <2> 		mov ah, [decimal]
  4089 000032D1 38E0                <2> 		cmp al, ah
  4090 000032D3 7432                <2> 		je gooddecadd
  4091 000032D5 38E0                <2> 		cmp al, ah
  4092 000032D7 721A                <2> 		jb lowdecadd
  4093                              <2> 	highdecadd:
  4094 000032D9 FEC4                <2> 		inc ah
  4095 000032DB 89CA                <2> 		mov edx, ecx
  4096 000032DD C1E103              <2> 		shl ecx, 3
  4097 000032E0 01D1                <2> 		add ecx, edx
  4098 000032E2 01D1                <2> 		add ecx, edx
  4099 000032E4 38E0                <2> 		cmp al, ah
  4100 000032E6 77F1                <2> 		ja highdecadd
  4101 000032E8 8825[08330000]      <2> 		mov [decimal], ah
  4102 000032EE E914000000          <2> 		jmp gooddecadd
  4103                              <2> 	lowdecadd:
  4104 000032F3 FEC0                <2> 		inc al
  4105 000032F5 89DA                <2> 		mov edx, ebx
  4106 000032F7 C1E303              <2> 		shl ebx, 3
  4107 000032FA 01D3                <2> 		add ebx, edx
  4108 000032FC 01D3                <2> 		add ebx, edx
  4109 000032FE 38E0                <2> 		cmp al, ah
  4110 00003300 72F1                <2> 		jb lowdecadd
  4111 00003302 A2[08330000]        <2> 		mov [decimal], al
  4112                              <2> 	gooddecadd:
  4113 00003307 C3                  <2> 		ret
  4114                              <2> 		
  4115 00003308 00                  <2> decimal db 0
  4116 00003309 00                  <2> decimal2 db 0
  4117 0000330A 00                  <2> decimalresult db 0
  4118 0000330B 00000000            <2> result dd 0
  4119                              <1> %include 'source/programs/_variables.asm' ;% and $
  4120 0000330F FF2C2500            <2> db 255,44,"%",0
  4121                              <2> 	ans:
  4122 00003313 BE[9AB40000]        <2> 		mov esi, buf2
  4123 00003318 E887FFFFFF          <2> 		call chkadd
  4124 0000331D C3                  <2> 		ret
  4125                              <2> 		
  4126 0000331E FF2C2400            <2> db 255,44,"$",0
  4127 00003322 8B35[8D2B0000]      <2> var: mov esi, [currentcommandloc]
  4128 00003328 BB[9A9C0000]        <2> 	mov ebx, variables
  4129 0000332D 8A06                <2> lkeq:	mov al, [esi]
  4130 0000332F 3C3D                <2> 	cmp al, '='
  4131 00003331 741B                <2> 	je eqfnd	;is there an '=' sign?
  4132 00003333 3C00                <2> 	cmp al, 0
  4133 00003335 7403                <2> 	je echovars
  4134 00003337 46                  <2> 	inc esi
  4135 00003338 EBF3                <2> 	jmp lkeq
  4136 0000333A BE[9A9C0000]        <2> echovars: mov esi, variables
  4137 0000333F BB[9AAC0000]        <2> 	mov ebx, varend
  4138 00003344 B105                <2> 	mov cl, 5
  4139 00003346 B504                <2> 	mov ch, 4
  4140 00003348 E89EF8FFFF          <2> 	call array
  4141 0000334D C3                  <2> 	ret
  4142 0000334E 46                  <2> eqfnd:	inc esi
  4143 0000334F 8A06                <2> 	mov al, [esi]
  4144 00003351 3C00                <2> 	cmp al, 0
  4145 00003353 7410                <2> 	je readvar
  4146 00003355 8B35[8D2B0000]      <2> 	mov esi, [currentcommandloc]
  4147 0000335B BB[9A9C0000]        <2> 	mov ebx, variables
  4148 00003360 E919000000          <2> 	jmp seek
  4149                              <2> readvar:
  4150 00003365 B00A                <2> 	mov al, 10
  4151 00003367 66BB0700            <2> 	mov bx, 7
  4152 0000336B C605[26210000]00    <2> 	mov byte [commandedit], 0
  4153 00003372 BF[9AB40000]        <2> 	mov edi, buftxtend
  4154 00003377 E849EAFFFF          <2> 	call rdprint
  4155 0000337C EBA4                <2> 	jmp var
  4156 0000337E 668B03              <2> seek:	mov ax, [ebx]
  4157 00003381 B105                <2> 	mov cl, 5
  4158 00003383 B504                <2> 	mov ch, 4
  4159 00003385 663D0000            <2> 	cmp ax, 0
  4160 00003389 0F845B000000        <2> 	je near save
  4161 0000338F 6639C8              <2> 	cmp ax, cx
  4162 00003392 7403                <2> 	je skfnd
  4163 00003394 43                  <2> 	inc ebx
  4164 00003395 EBE7                <2> 	jmp seek
  4165 00003397 8B35[8D2B0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4166 0000339D 46                  <2> 	inc esi
  4167 0000339E 81C302000000        <2> 	add ebx, 2
  4168 000033A4 89DF                <2> 	mov edi, ebx
  4169 000033A6 B13D                <2> 	mov cl, '='
  4170 000033A8 E81FF8FFFF          <2> 	call cndtest
  4171 000033AD 3C01                <2> 	cmp al, 1	
  4172 000033AF 7418                <2> 	je varfnd
  4173 000033B1 89FB                <2> 	mov ebx, edi
  4174 000033B3 8B35[8D2B0000]      <2> 	mov esi, [currentcommandloc]
  4175 000033B9 668B03              <2> 	mov ax, [ebx]
  4176 000033BC 663D0000            <2> 	cmp ax, 0
  4177 000033C0 0F8424000000        <2> 	je near save
  4178 000033C6 43                  <2> 	inc ebx
  4179 000033C7 EBB5                <2> 	jmp seek
  4180 000033C9 8A03                <2> varfnd:	mov al, [ebx]
  4181 000033CB 3C04                <2> 	cmp al, 4
  4182 000033CD 7404                <2> 	je save2
  4183 000033CF 4B                  <2> 	dec ebx
  4184 000033D0 4E                  <2> 	dec esi
  4185 000033D1 EBF6                <2> 	jmp varfnd
  4186 000033D3 4B                  <2> save2:	dec ebx
  4187 000033D4 4E                  <2> 	dec esi
  4188 000033D5 8A03                <2> 	mov al, [ebx]
  4189 000033D7 3C05                <2> 	cmp al, 5
  4190 000033D9 7402                <2> 	je remove
  4191 000033DB EBEC                <2> 	jmp varfnd
  4192 000033DD 8A03                <2> remove: mov al, [ebx]
  4193 000033DF 3C00                <2> 	cmp al, 0
  4194 000033E1 749B                <2> 	je seek
  4195 000033E3 30C0                <2> 	xor al, al
  4196 000033E5 8803                <2> 	mov [ebx], al
  4197 000033E7 43                  <2> 	inc ebx
  4198 000033E8 EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4199 000033EA 8B35[8D2B0000]      <2> save:	mov esi, [currentcommandloc]
  4200 000033F0 43                  <2> 	inc ebx
  4201 000033F1 B005                <2> 	mov al, 5
  4202 000033F3 B404                <2> 	mov ah, 4
  4203 000033F5 668903              <2> 	mov [ebx], ax
  4204 000033F8 43                  <2> 	inc ebx
  4205 000033F9 43                  <2> svhere:	inc ebx
  4206 000033FA 46                  <2> 	inc esi
  4207 000033FB 8A06                <2> 	mov al, [esi]
  4208 000033FD 3C00                <2> 	cmp al, 0
  4209 000033FF 0F844A000000        <2> 	je near svdone
  4210 00003405 3C25                <2> 	cmp al, '%'
  4211 00003407 7404                <2> 	je ans2
  4212 00003409 8803                <2> 	mov [ebx], al	
  4213 0000340B EBEC                <2> 	jmp svhere
  4214 0000340D 56                  <2> ans2:	push esi
  4215 0000340E BE[9AB40000]        <2> 	mov esi, buf2
  4216 00003413 E823000000          <2> 	call ansfnd
  4217 00003418 E803000000          <2> 	call anscp
  4218 0000341D 5E                  <2> 	pop esi
  4219 0000341E EBD9                <2> 	jmp svhere
  4220 00003420 8A06                <2> anscp:	mov al, [esi]
  4221 00003422 8803                <2> 	mov [ebx], al
  4222 00003424 81FE[AEB40000]      <2> 	cmp esi, numbuf
  4223 0000342A 74CD                <2> 	je svhere
  4224 0000342C 3C00                <2> 	cmp al, 0
  4225 0000342E 74C9                <2> 	je svhere
  4226 00003430 43                  <2> 	inc ebx
  4227 00003431 46                  <2> 	inc esi
  4228 00003432 EBEC                <2> 	jmp anscp
  4229 00003434 5E                  <2> ansnf:	pop esi
  4230 00003435 8A06                <2> 	mov al, [esi]
  4231 00003437 8803                <2> 	mov [ebx], al
  4232 00003439 EBBE                <2> 	jmp svhere
  4233 0000343B 46                  <2> ansfnd:	inc esi
  4234 0000343C 81FE[ADB40000]      <2> 	cmp esi, numbuf - 1
  4235 00003442 740A                <2> 	je fndans
  4236 00003444 8A06                <2> 	mov al, [esi]
  4237 00003446 3C00                <2> 	cmp al, 0
  4238 00003448 74EA                <2> 	je ansnf
  4239 0000344A 3C30                <2> 	cmp al, '0'
  4240 0000344C 74ED                <2> 	je ansfnd
  4241                              <2> fndans:
  4242 0000344E C3                  <2> 	ret
  4243 0000344F 30C0                <2> svdone:	xor al, al
  4244 00003451 8803                <2> 	mov [ebx], al
  4245 00003453 C3                  <2> 	ret
  4246                              <1> %include 'source/programs/_run.asm' ;./
  4247                              <2> 
  4248 00003454 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4249 00003458 FF2C2E2F00          <2> 	db 255,44,"./",0
  4250                              <2> rundiskprog:
  4251 0000345D 8B3D[8D2B0000]      <2> 	mov edi, [currentcommandloc]
  4252 00003463 81C702000000        <2> 	add edi, 2
  4253 00003469 BE00004000          <2> 	mov esi, 0x400000
  4254 0000346E E841230000          <2> 	call loadfile
  4255 00003473 81FA94010000        <2> 	cmp edx, 404
  4256 00003479 746A                <2> 	je noprogfound
  4257 0000347B BB00004000          <2> 	mov ebx, 0x400000
  4258 00003480 A1[54340000]        <2> 	mov eax, [elfstart]
  4259 00003485 3903                <2> 	cmp [ebx], eax
  4260 00003487 0F8437000000        <2> 	je near runelf
  4261 0000348D 66813B4558          <2> 	cmp word [ebx], "EX"
  4262 00003492 7577                <2> 	jne progbatchfound
  4263 00003494 81C302000000        <2> 	add ebx, 2
  4264 0000349A 8B3D[8D2B0000]      <2> 	mov edi, [currentcommandloc]
  4265 000034A0 81C702000000        <2> 	add edi, 2
  4266                              <2> findspaceprog:
  4267 000034A6 8A07                <2> 	mov al, [edi]
  4268 000034A8 47                  <2> 	inc edi
  4269 000034A9 3C20                <2> 	cmp al, " "
  4270 000034AB 75F9                <2> 	jne findspaceprog
  4271                              <2> findnonspaceprog:
  4272 000034AD 8A07                <2> 	mov al, [edi]
  4273 000034AF 47                  <2> 	inc edi
  4274 000034B0 3C20                <2> 	cmp al, " "
  4275 000034B2 74F9                <2> 	je findnonspaceprog
  4276 000034B4 4F                  <2> 	dec edi
  4277 000034B5 8925[1A9A0000]      <2> 	mov [previousstack], esp
  4278 000034BB FFD3                <2> 	call ebx
  4279 000034BD 8B25[1A9A0000]      <2> 	mov esp, [previousstack]
  4280 000034C3 C3                  <2> 	ret
  4281                              <2> runelf:
  4282 000034C4 8B3D[8D2B0000]      <2> 	mov edi, [currentcommandloc]
  4283 000034CA 81C702000000        <2> 	add edi, 2
  4284 000034D0 81C380000000        <2> 	add ebx, 0x80
  4285 000034D6 8925[1A9A0000]      <2> 	mov [previousstack], esp
  4286 000034DC FFD3                <2> 	call ebx
  4287 000034DE 8B25[1A9A0000]      <2> 	mov esp, [previousstack]
  4288 000034E4 C3                  <2> 	ret
  4289                              <2> noprogfound:
  4290 000034E5 BE[C4710000]        <2> 	mov esi, notfound1
  4291 000034EA E8EEE7FFFF          <2> 	call print
  4292 000034EF 8B35[8D2B0000]      <2> 	mov esi, [currentcommandloc]
  4293 000034F5 81C602000000        <2> 	add esi, 2
  4294 000034FB E8DDE7FFFF          <2> 	call print
  4295 00003500 BE[CC710000]        <2> 	mov esi, notfound2
  4296 00003505 E8D3E7FFFF          <2> 	call print
  4297 0000350A C3                  <2> 	ret
  4298                              <2> progbatchfound:
  4299 0000350B BF00004000          <2> 		mov edi, 0x400000
  4300 00003510 C605[949C0000]01    <2> 		mov byte [BATCHISON], 1
  4301                              <2> 	batchrunloop:
  4302 00003517 E8A1F3FFFF          <2> 		call buftxtclear
  4303 0000351C BE[9AB00000]        <2> 		mov esi, buftxt
  4304 00003521 8935[8D2B0000]      <2> 		mov [currentcommandloc], esi
  4305                              <2> 	batchrunloop2:
  4306 00003527 B10A                <2> 		mov cl, 10
  4307 00003529 B50D                <2> 		mov ch, 13
  4308 0000352B 380F                <2> 		cmp [edi], cl
  4309 0000352D 0F8419000000        <2> 		je near nxtbatchrunline
  4310 00003533 382F                <2> 		cmp [edi], ch
  4311 00003535 0F8411000000        <2> 		je near nxtbatchrunline
  4312 0000353B 803F00              <2> 		cmp byte [edi], 0
  4313 0000353E 0F8408000000        <2> 		je near nxtbatchrunline
  4314 00003544 8A07                <2> 		mov al, [edi]
  4315 00003546 8806                <2> 		mov [esi], al
  4316 00003548 46                  <2> 		inc esi
  4317 00003549 47                  <2> 		inc edi
  4318 0000354A EBDB                <2> 		jmp batchrunloop2
  4319                              <2> 	nxtbatchrunline:
  4320 0000354C 47                  <2> 		inc edi
  4321 0000354D 380F                <2> 		cmp [edi], cl
  4322 0000354F 74FB                <2> 		je nxtbatchrunline
  4323 00003551 382F                <2> 		cmp [edi], ch
  4324 00003553 74F7                <2> 		je nxtbatchrunline
  4325 00003555 893D[B3350000]      <2> 		mov [batchedi], edi
  4326 0000355B 893D[909C0000]      <2> 		mov [BATCHPOS], edi
  4327 00003561 C60600              <2> 		mov byte [esi], 0
  4328 00003564 BE[9AB00000]        <2> 		mov esi, buftxt
  4329 00003569 803E00              <2> 		cmp byte [esi], 0
  4330 0000356C 0F8439000000        <2> 		je near nobatchfoundrun
  4331 00003572 31DB                <2> 		xor ebx, ebx
  4332 00003574 8A1D[2B9C0000]      <2> 		mov bl, [IFON]
  4333 0000357A 80FB00              <2> 		cmp bl, 0
  4334 0000357D 0F8534000000        <2> 		jne near iftestbatch
  4335                              <2> 	doneiftest:
  4336 00003583 803D[89360000]00    <2> 		cmp byte [runnextline], 0
  4337 0000358A 0F8405000000        <2> 		je near noruniftest
  4338 00003590 E822F5FFFF          <2> 		call run
  4339                              <2> 	noruniftest:
  4340 00003595 C605[89360000]01    <2> 		mov byte [runnextline], 1
  4341 0000359C 8B3D[B3350000]      <2> 		mov edi, [batchedi]
  4342 000035A2 803F00              <2> 		cmp byte [edi], 0
  4343 000035A5 0F856CFFFFFF        <2> 		jne near batchrunloop
  4344                              <2> 	nobatchfoundrun:
  4345 000035AB C605[949C0000]00    <2> 		mov byte [BATCHISON], 0
  4346 000035B2 C3                  <2> 		ret
  4347                              <2> 	
  4348 000035B3 00000000            <2> batchedi dd 0	
  4349                              <2> 	
  4350                              <2> 	iftestbatch:
  4351 000035B7 BE[2C9C0000]        <2> 		mov esi, IFTRUE
  4352 000035BC 01DE                <2> 		add esi, ebx
  4353 000035BE 803E00              <2> 		cmp byte [esi], 0
  4354 000035C1 0F85BCFFFFFF        <2> 		jne near doneiftest
  4355 000035C7 881D[8A360000]      <2> 		mov [iffalsebuf], bl
  4356 000035CD 803D[959C0000]01    <2> 		cmp byte [LOOPON], 1
  4357 000035D4 0F8513000000        <2> 		jne near fifindbatch
  4358 000035DA E938FFFFFF          <2> 		jmp batchrunloop
  4359                              <2> 	elsetestbatch:
  4360 000035DF C60601              <2> 		mov byte [esi], 1
  4361 000035E2 81C705000000        <2> 		add edi, 5
  4362 000035E8 E92AFFFFFF          <2> 		jmp batchrunloop
  4363                              <2> 	fifindbatch:
  4364 000035ED 66B96966            <2> 		mov cx, "if"
  4365 000035F1 66B86669            <2> 		mov ax, "fi"
  4366 000035F5 663907              <2> 		cmp [edi], ax
  4367 000035F8 0F8424000000        <2> 		je near fifoundbatch
  4368 000035FE 66390F              <2> 		cmp [edi], cx
  4369 00003601 0F8465000000        <2> 		je near iffoundbatch
  4370 00003607 803F00              <2> 		cmp byte [edi], 0
  4371 0000360A 0F8412000000        <2> 		je near fifoundbatch
  4372 00003610 B8656C7365          <2> 		mov eax, "else"
  4373 00003615 3907                <2> 		cmp [edi], eax
  4374 00003617 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4375 0000361D E973FFFFFF          <2> 		jmp noruniftest
  4376                              <2> 	fifoundbatch:
  4377 00003622 81C702000000        <2> 		add edi, 2
  4378 00003628 B00A                <2> 		mov al, 10
  4379 0000362A 3807                <2> 		cmp [edi], al
  4380 0000362C 0F840B000000        <2> 		je near goodfibatch
  4381 00003632 803F00              <2> 		cmp byte [edi], 0
  4382 00003635 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4383 0000363B EBB0                <2> 		jmp fifindbatch
  4384                              <2> 	goodfibatch:
  4385 0000363D B001                <2> 		mov al, 1
  4386 0000363F 2805[2B9C0000]      <2> 		sub [IFON], al 
  4387 00003645 A0[2B9C0000]        <2> 		mov al, [IFON]
  4388 0000364A 8A1D[8A360000]      <2> 		mov bl, [iffalsebuf]
  4389 00003650 38D8                <2> 		cmp al, bl
  4390 00003652 7799                <2> 		ja fifindbatch
  4391 00003654 8B35[8D2B0000]      <2> 		mov esi, [currentcommandloc]
  4392 0000365A 81EF02000000        <2> 		sub edi, 2
  4393 00003660 C605[89360000]00    <2> 		mov byte [runnextline], 0
  4394 00003667 E9ABFEFFFF          <2> 		jmp batchrunloop
  4395                              <2> 	iffoundbatch:
  4396 0000366C B020                <2> 		mov al, ' '
  4397 0000366E 81C702000000        <2> 		add edi, 2
  4398 00003674 3807                <2> 		cmp [edi], al
  4399 00003676 0F8571FFFFFF        <2> 		jne near fifindbatch
  4400 0000367C B001                <2> 		mov al, 1
  4401 0000367E 0005[2B9C0000]      <2> 		add [IFON], al
  4402 00003684 E964FFFFFF          <2> 		jmp fifindbatch
  4403                              <2> 		
  4404                              <2> 		
  4405 00003689 01                  <2> runnextline db 1
  4406 0000368A 00                  <2> iffalsebuf db 0
  4407                              <2> 
  4408 0000368B C3                  <2> notbatch: ret 
  4409                              <1> %ifdef rtl8139.included
  4410                              <1> 	%include 'source/programs/arp.asm'
  4411                              <1> %endif
  4412                              <1> %include 'source/programs/batch.asm'
  4413 0000368C FF2C626174636800    <2> db 255,44,"batch",0
  4414                              <2> 	batchst: 
  4415 00003694 8B3D[8D2B0000]      <2> 		mov edi, [currentcommandloc]
  4416 0000369A 81C706000000        <2> 		add edi, 6
  4417 000036A0 803F00              <2> 		cmp byte [edi], 0
  4418 000036A3 0F846D000000        <2> 		je near nonamefound
  4419 000036A9 BE00004000          <2> 		mov esi, 0x400000
  4420 000036AE E801210000          <2> 		call loadfile
  4421 000036B3 89D0                <2> 		mov eax, edx
  4422 000036B5 3D94010000          <2> 		cmp eax, 404
  4423 000036BA 7465                <2> 		je goodbatchname
  4424 000036BC BE[C7360000]        <2> 		mov esi, badbatchname
  4425 000036C1 E817E6FFFF          <2> 		call print
  4426 000036C6 C3                  <2> 		ret
  4427 000036C7 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4428 000036D0 20616C726561647920- <2>
  4429 000036D9 657869737473210A00  <2>
  4430 000036E2 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4431 000036EB 746F20747970652061- <2>
  4432 000036F4 206E616D6520616674- <2>
  4433 000036FD 65722074686520636F- <2>
  4434 00003706 6D6D616E642E0A00    <2>
  4435 0000370E 00000000            <2> 		esicache3 dd 0
  4436 00003712 00000000            <2> 		esicache2 dd 0
  4437                              <2> 	nonamefound:
  4438 00003716 BE[E2360000]        <2> 		mov esi, namenotfoundbatch
  4439 0000371B E8BDE5FFFF          <2> 		call print
  4440 00003720 C3                  <2> 		ret
  4441                              <2> 	goodbatchname:
  4442 00003721 BE00004000          <2> 		mov esi, 0x400000
  4443                              <2> 	batchcreate:
  4444 00003726 8935[0E370000]      <2> 		mov [esicache3], esi
  4445 0000372C BF00008000          <2> 		mov edi, 0x800000
  4446 00003731 B00A                <2> 		mov al, 10
  4447 00003733 B307                <2> 		mov bl, 7
  4448 00003735 B404                <2> 		mov ah, 4
  4449 00003737 CD30                <2> 		int 30h
  4450 00003739 8935[12370000]      <2> 		mov [esicache2], esi
  4451 0000373F 8A0E                <2> 		mov cl, [esi]
  4452 00003741 8B35[0E370000]      <2> 		mov esi, [esicache3]
  4453 00003747 BB[7B370000]        <2> 		mov ebx, exitword
  4454 0000374C E87BF4FFFF          <2> 		call cndtest
  4455 00003751 3C01                <2> 		cmp al, 1
  4456 00003753 7411                <2> 		je endbatchcreate
  4457 00003755 3C02                <2> 		cmp al, 2
  4458 00003757 740D                <2> 		je endbatchcreate
  4459 00003759 8B35[12370000]      <2> 		mov esi, [esicache2]
  4460 0000375F B00A                <2> 		mov al, 10
  4461 00003761 8806                <2> 		mov [esi], al
  4462 00003763 46                  <2> 		inc esi
  4463 00003764 EBC0                <2> 		jmp batchcreate
  4464                              <2> 	endbatchcreate:
  4465 00003766 8B35[0E370000]      <2> 		mov esi, [esicache3]
  4466 0000376C 31C0                <2> 		xor eax, eax
  4467 0000376E 8806                <2> 		mov [esi], al
  4468 00003770 BE00004000          <2> 		mov esi, 0x400000
  4469 00003775 E863E5FFFF          <2> 		call print
  4470 0000377A C3                  <2> 		ret
  4471                              <2> 	
  4472 0000377B 5C7800              <2> 	exitword db "\x",0
  4473 0000377E 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4474 00003787 6F20657869742E0A00  <2>
  4475                              <1> %ifdef gui.background
  4476                              <1> 	%include 'source/programs/background.asm'
  4477 00003790 FF2C6261636B67726F- <2> db 255,44,"background",0
  4478 00003799 756E6400            <2>
  4479 0000379D 8B3D[8D2B0000]      <2> 		mov edi, [currentcommandloc]
  4480 000037A3 81C70B000000        <2> 		add edi, 11
  4481 000037A9 BE00008000          <2> 		mov esi, 0x800000
  4482 000037AE E801200000          <2> 		call loadfile
  4483 000037B3 81FA94010000        <2> 		cmp edx, 404
  4484 000037B9 0F8487090000        <2> 		je near filenotfound
  4485 000037BF BE00008000          <2> 		mov esi, 0x800000
  4486 000037C4 66813E424D          <2> 		cmp word [esi], "BM"
  4487 000037C9 7401                <2> 		je .bmpfound
  4488 000037CB C3                  <2> 		ret
  4489                              <2> .bmpfound:
  4490 000037CC 8B3D[2F4B0000]      <2> 		mov edi, [physbaseptr]
  4491 000037D2 57                  <2> 		push edi
  4492 000037D3 BE[AFB60000]        <2> 		mov esi, backgroundbuffer
  4493 000037D8 8935[AB590000]      <2> 		mov [backgroundimage], esi
  4494 000037DE 8935[2F4B0000]      <2> 		mov [physbaseptr], esi
  4495 000037E4 BE00008000          <2> 		mov esi, 0x800000
  4496 000037E9 31C9                <2> 		xor ecx, ecx
  4497 000037EB 31D2                <2> 		xor edx, edx
  4498 000037ED 31C0                <2> 		xor eax, eax
  4499 000037EF 31DB                <2> 		xor ebx, ebx
  4500 000037F1 E859350000          <2> 		call showbmp
  4501 000037F6 5F                  <2> 		pop edi
  4502 000037F7 893D[2F4B0000]      <2> 		mov [physbaseptr], edi
  4503 000037FD E856210000          <2> 		call guiclear
  4504 00003802 E80F230000          <2> 		call clearmousecursor
  4505 00003807 E8B3290000          <2> 		call reloadallgraphics
  4506 0000380C C3                  <2> 		ret
  4507                              <1> %endif
  4508                              <1> %include 'source/programs/beep.asm'
  4509 0000380D FF2C6265657000      <2> 	db 255,44,"beep",0
  4510 00003814 B8[39380000]        <2> 	mov eax, beepstart
  4511 00003819 A3[60020000]        <2> 	mov [soundpos], eax
  4512 0000381E B8[3D380000]        <2> 	mov eax, beepend
  4513 00003823 A3[64020000]        <2> 	mov [soundendpos], eax
  4514 00003828 C605[5D020000]01    <2> 	mov byte [soundon], 1
  4515                              <2> waitforsoundendbeep:
  4516 0000382F A0[5D020000]        <2> 	mov al, [soundon]
  4517 00003834 3C00                <2> 	cmp al, 0
  4518 00003836 75F7                <2> 	jne waitforsoundendbeep
  4519 00003838 C3                  <2> 	ret
  4520                              <2> 	
  4521                              <2> beepstart:
  4522 00003839 3200D111            <2> 	dw 50, 4561
  4523                              <2> beepend:
  4524                              <1> %include 'source/programs/cd.asm'
  4525 0000383D FF2C636400          <2> db 255,44,"cd",0
  4526                              <2> cd:
  4527 00003842 8B35[8D2B0000]      <2> 	mov esi, [currentcommandloc]
  4528 00003848 81C603000000        <2> 	add esi, 3
  4529 0000384E 8B3D[229A0000]      <2> 	mov edi, [currentfolderloc]
  4530 00003854 893D[1E9A0000]      <2> 	mov [lastfolderloc], edi
  4531 0000385A 81C7[269A0000]      <2> 	add edi, currentfolder
  4532                              <2> 	;cmp word [esi], ".."
  4533                              <2> 	;je .moveup
  4534                              <2> .movedown:
  4535 00003860 8A06                <2> 	mov al, [esi]
  4536 00003862 8807                <2> 	mov [edi], al
  4537 00003864 47                  <2> 	inc edi
  4538 00003865 46                  <2> 	inc esi
  4539 00003866 3C00                <2> 	cmp al, 0
  4540 00003868 740A                <2> 	je .donecd
  4541 0000386A 81FF[269C0000]      <2> 	cmp edi, currentfolderend
  4542 00003870 72EE                <2> 	jb .movedown
  4543 00003872 30C0                <2> 	xor al, al
  4544                              <2> .donecd:
  4545 00003874 4F                  <2> 	dec edi
  4546 00003875 C6072F              <2> 	mov byte [edi], '/'
  4547 00003878 47                  <2> 	inc edi
  4548 00003879 81EF[269A0000]      <2> 	sub edi, currentfolder
  4549 0000387F 893D[229A0000]      <2> 	mov [currentfolderloc], edi
  4550 00003885 C3                  <2> 	ret
  4551                              <2> ;.moveup:
  4552                              <2> ;	ret
  4553                              <1> %include 'source/programs/charmap.asm'
  4554 00003886 FF2C636861726D6170- <2> db 255,44,"charmap",0
  4555 0000388F 00                  <2>
  4556 00003890 66BB0700            <2> 	mov bx, 7
  4557 00003894 B020                <2> 	mov al, " "
  4558 00003896 E818E9FFFF          <2> 	call prcharq
  4559 0000389B E813E9FFFF          <2> 	call prcharq
  4560 000038A0 E80EE9FFFF          <2> 	call prcharq
  4561 000038A5 E809E9FFFF          <2> 	call prcharq
  4562 000038AA B030                <2> 	mov al, "0"
  4563                              <2> charmapnumprnt:
  4564 000038AC E802E9FFFF          <2> 	call prcharq
  4565 000038B1 FEC0                <2> 	inc al
  4566 000038B3 6650                <2> 	push ax
  4567 000038B5 B020                <2> 	mov al, " "
  4568 000038B7 E8F7E8FFFF          <2> 	call prcharq
  4569 000038BC 6658                <2> 	pop ax
  4570 000038BE 3C39                <2> 	cmp al, "9"
  4571 000038C0 76EA                <2> 	jbe charmapnumprnt
  4572 000038C2 B041                <2> 	mov al, "A"
  4573                              <2> charmapnumprnt2:
  4574 000038C4 E8EAE8FFFF          <2> 	call prcharq
  4575 000038C9 FEC0                <2> 	inc al
  4576 000038CB 6650                <2> 	push ax
  4577 000038CD B020                <2> 	mov al, " "
  4578 000038CF E8DFE8FFFF          <2> 	call prcharq
  4579 000038D4 6658                <2> 	pop ax
  4580 000038D6 3C47                <2> 	cmp al, "G"
  4581 000038D8 72EA                <2> 	jb charmapnumprnt2
  4582                              <2> 	
  4583 000038DA BE[05720000]        <2> 	mov esi, line
  4584 000038DF E8E7E3FFFF          <2> 	call printquiet
  4585 000038E4 6631C0              <2> 	xor ax, ax
  4586 000038E7 88C1                <2> 	mov cl, al
  4587 000038E9 E8B2F4FFFF          <2> 	call showhexsmall
  4588 000038EE E955000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  4589                              <2> charmapcopy:
  4590 000038F3 FEC0                <2> 	inc al
  4591 000038F5 6650                <2> 	push ax
  4592 000038F7 3C08                <2> 	cmp al, 8
  4593 000038F9 744D                <2> 	je charmapnocopy
  4594 000038FB 3C09                <2> 	cmp al, 9
  4595 000038FD 7449                <2> 	je charmapnocopy
  4596 000038FF 3C0A                <2> 	cmp al, 10
  4597 00003901 7445                <2> 	je charmapnocopy
  4598 00003903 3C0D                <2> 	cmp al, 13
  4599 00003905 7441                <2> 	je charmapnocopy
  4600 00003907 3CFF                <2> 	cmp al, 255
  4601 00003909 743D                <2> 	je charmapnocopy
  4602 0000390B 3C00                <2> 	cmp al, 0
  4603 0000390D 7434                <2> 	je nomorecharmap
  4604 0000390F E89FE8FFFF          <2> 	call prcharq
  4605 00003914 B020                <2> 	mov al, " "
  4606 00003916 E898E8FFFF          <2> 	call prcharq
  4607 0000391B 6658                <2> 	pop ax
  4608                              <2> charmapcopycheck:
  4609 0000391D FEC4                <2> 	inc ah
  4610 0000391F 80FC10              <2> 	cmp ah, 16
  4611 00003922 72CF                <2> 	jb charmapcopy
  4612 00003924 6650                <2> 	push ax
  4613 00003926 BE[05720000]        <2> 	mov esi, line
  4614 0000392B E89BE3FFFF          <2> 	call printquiet
  4615 00003930 6658                <2> 	pop ax
  4616 00003932 3CFF                <2> 	cmp al, 255
  4617 00003934 740D                <2> 	je nomorecharmap
  4618 00003936 88C1                <2> 	mov cl, al
  4619 00003938 FEC1                <2> 	inc cl
  4620 0000393A E861F4FFFF          <2> 	call showhexsmall
  4621 0000393F 30E4                <2> 	xor ah, ah
  4622 00003941 EBB0                <2> 	jmp charmapcopy
  4623                              <2> nomorecharmap:
  4624 00003943 E998EFFFFF          <2> 	jmp nwcmd
  4625                              <2> charmapnocopy:
  4626 00003948 6650                <2> 	push ax
  4627 0000394A B020                <2> 	mov al, " "
  4628 0000394C E862E8FFFF          <2> 	call prcharq
  4629 00003951 E85DE8FFFF          <2> 	call prcharq
  4630 00003956 6658                <2> 	pop ax
  4631 00003958 EBC3                <2> 	jmp charmapcopycheck
  4632                              <1> %include 'source/programs/clear.asm'
  4633 0000395A FF2C636C65617200    <2> db 255,44,"clear",0
  4634 00003962 E8DCE3FFFF          <2> 		call clear
  4635 00003967 C3                  <2> 		ret 
  4636                              <1> %include 'source/programs/cpuid.asm'
  4637 00003968 FF2C637075696400    <2> db 255,44,"cpuid",0
  4638 00003970 31C0                <2> 	xor eax, eax
  4639 00003972 0FA2                <2> 	cpuid
  4640 00003974 891D[C5390000]      <2> 	mov [cpuidbuf], ebx
  4641 0000397A 8915[C9390000]      <2> 	mov [cpuidbuf + 4], edx
  4642 00003980 890D[CD390000]      <2> 	mov [cpuidbuf + 8], ecx
  4643 00003986 BE[C5390000]        <2> 	mov esi, cpuidbuf
  4644 0000398B E84DE3FFFF          <2> 	call print
  4645 00003990 BE[05720000]        <2> 	mov esi, line
  4646 00003995 E843E3FFFF          <2> 	call print
  4647 0000399A B801000000          <2> 	mov eax, 1
  4648 0000399F 0FA2                <2> 	cpuid
  4649 000039A1 89C1                <2> 	mov ecx, eax
  4650 000039A3 C605[9F2D0000]02    <2> 	mov byte [firsthexshown], 2
  4651 000039AA E805F4FFFF          <2> 	call showhex
  4652 000039AF B808000080          <2> 	mov eax, 0x80000008
  4653 000039B4 0FA2                <2> 	cpuid
  4654 000039B6 89C1                <2> 	mov ecx, eax
  4655 000039B8 C605[9F2D0000]02    <2> 	mov byte [firsthexshown], 2
  4656 000039BF E8F0F3FFFF          <2> 	call showhex
  4657 000039C4 C3                  <2> 	ret
  4658                              <2> 	
  4659 000039C5 00<rept>            <2> cpuidbuf times 13 db 0
  4660                              <2> cpuidvendorend:
  4661                              <1> %include 'source/programs/dos.asm'
  4662 000039D2 FF2C646F7300        <2> db 255,44,"dos",0
  4663                              <2> dosrunner:
  4664 000039D8 8925[1A9A0000]      <2> 	mov [previousstack], esp
  4665 000039DE 8B3D[8D2B0000]      <2> 	mov edi, [currentcommandloc]
  4666 000039E4 81C704000000        <2> 	add edi, 4
  4667 000039EA BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  4668 000039EF E8C01D0000          <2> 	call loadfile
  4669 000039F4 8B3D[8D2B0000]      <2> 	mov edi, [currentcommandloc]
  4670 000039FA 81C704000000        <2> 	add edi, 4
  4671 00003A00 81FA94010000        <2> 	cmp edx, 404
  4672 00003A06 0F845E000000        <2> 	je near .noprogfound
  4673 00003A0C BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  4674 00003A11 31C9                <2> 	xor ecx, ecx
  4675                              <2> .findparams:
  4676 00003A13 47                  <2> 	inc edi
  4677 00003A14 8A07                <2> 	mov al, [edi]
  4678 00003A16 3C20                <2> 	cmp al, " "
  4679 00003A18 75F9                <2> 	jne .findparams
  4680                              <2> .copyparams:
  4681 00003A1A 8A07                <2> 	mov al, [edi]
  4682 00003A1C 8803                <2> 	mov [ebx], al
  4683 00003A1E 43                  <2> 	inc ebx
  4684 00003A1F 47                  <2> 	inc edi
  4685 00003A20 41                  <2> 	inc ecx
  4686 00003A21 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  4687 00003A27 7304                <2> 	jae .nomoreparams
  4688 00003A29 3C00                <2> 	cmp al, 0
  4689 00003A2B 75ED                <2> 	jne .copyparams
  4690                              <2> .nomoreparams:
  4691 00003A2D 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  4692 00003A33 66B85000            <2> 	mov ax, DOS_DATA_SEL
  4693 00003A37 8ED8                <2> 	mov ds, ax
  4694 00003A39 8EC0                <2> 	mov es, ax
  4695 00003A3B 8EE0                <2> 	mov fs, ax
  4696 00003A3D 8EE8                <2> 	mov gs, ax
  4697 00003A3F 31C0                <2> 	xor eax, eax
  4698 00003A41 31DB                <2> 	xor ebx, ebx
  4699 00003A43 31C9                <2> 	xor ecx, ecx
  4700 00003A45 31D2                <2> 	xor edx, edx
  4701 00003A47 31FF                <2> 	xor edi, edi
  4702 00003A49 31F6                <2> 	xor esi, esi
  4703 00003A4B 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  4704 00003A52 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  4705 00003A56 6689DA              <2> 	mov dx, bx
  4706 00003A59 8EC3                <2> 	mov es, bx
  4707 00003A5B 8EE3                <2> 	mov fs, bx
  4708 00003A5D 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  4709 00003A61 8EEB                <2> 	mov gs, bx
  4710 00003A63 8B25[1A9A0000]      <2> 	mov esp, [previousstack]
  4711 00003A69 C3                  <2> 	ret
  4712                              <2> .noprogfound:
  4713 00003A6A BE[C4710000]        <2> 	mov esi, notfound1
  4714 00003A6F E869E2FFFF          <2> 	call print
  4715 00003A74 8B35[8D2B0000]      <2> 	mov esi, [currentcommandloc]
  4716 00003A7A 81C604000000        <2> 	add esi, 4
  4717 00003A80 E858E2FFFF          <2> 	call print
  4718 00003A85 BE[CC710000]        <2> 	mov esi, notfound2
  4719 00003A8A E84EE2FFFF          <2> 	call print
  4720 00003A8F C3                  <2> 	ret
  4721                              <2> 	
  4722                              <1> %include 'source/programs/dump.asm'
  4723 00003A90 FF2C64756D7000      <2> db 255,44,"dump",0
  4724 00003A97 8B35[8D2B0000]      <2> 	mov esi, [currentcommandloc]
  4725 00003A9D 81C605000000        <2> 	add esi, 5
  4726 00003AA3 31C9                <2> 	xor ecx, ecx
  4727 00003AA5 66B83078            <2> 	mov ax, "0x"
  4728 00003AA9 663906              <2> 	cmp [esi], ax
  4729 00003AAC 740A                <2> 	je dumphexin
  4730 00003AAE E8ADF4FFFF          <2> 	call cnvrttxt
  4731 00003AB3 E910000000          <2> 	jmp dumphexnow
  4732                              <2> dumphexin:
  4733 00003AB8 81C602000000        <2> 	add esi, 2
  4734 00003ABE E854F4FFFF          <2> 	call cnvrthextxt
  4735 00003AC3 E900000000          <2> 	jmp dumphexnow
  4736                              <2> dumphexnow:
  4737 00003AC8 89CF                <2> 	mov edi, ecx
  4738 00003ACA 89FE                <2> 	mov esi, edi
  4739 00003ACC 81C680030000        <2> 	add esi, 896
  4740                              <2> dumphexloop:
  4741 00003AD2 8B0F                <2> 	mov ecx, [edi]
  4742 00003AD4 C605[9F2D0000]05    <2> 	mov byte [firsthexshown],5
  4743 00003ADB E8D4F2FFFF          <2> 	call showhex
  4744 00003AE0 81C704000000        <2> 	add edi, 4
  4745 00003AE6 39F7                <2> 	cmp edi, esi
  4746 00003AE8 72E8                <2> 	jb dumphexloop
  4747 00003AEA E8FDE9FFFF          <2> 	call termcopy
  4748 00003AEF C3                  <2> 	ret 
  4749                              <1> %include 'source/programs/echo.asm'
  4750                              <2> 
  4751 00003AF0 FF2C6563686F00      <2> db 255,44,"echo",0
  4752                              <2> 	echoprog:
  4753 00003AF7 8B35[8D2B0000]      <2> 		mov esi, [currentcommandloc]
  4754 00003AFD 81C605000000        <2> 		add esi, 5
  4755 00003B03 8A06                <2> 		mov al, [esi]
  4756 00003B05 E8D3E1FFFF          <2> 		call print
  4757 00003B0A BE[05720000]        <2> 		mov esi, line
  4758 00003B0F E8C9E1FFFF          <2> 		call print
  4759 00003B14 C3                  <2> 		ret
  4760 00003B15 BB[9A9C0000]        <2> 	echovr:	mov ebx, variables
  4761 00003B1A BF06000000          <2> 		mov edi, 6
  4762 00003B1F E83C000000          <2> 		call nxtvrech
  4763 00003B24 E954000000          <2> 		jmp prntvr2
  4764 00003B29 B13D                <2> 	echvar:	mov cl, '='
  4765 00003B2B 43                  <2> 		inc ebx
  4766 00003B2C 8A03                <2> 		mov al, [ebx]
  4767 00003B2E 3C00                <2> 		cmp al, 0
  4768 00003B30 742E                <2> 		je nxtvrech
  4769 00003B32 3C3D                <2> 		cmp al, '='
  4770 00003B34 7422                <2> 		je nxtvrechb1
  4771 00003B36 8B35[8D2B0000]      <2> 		mov esi, [currentcommandloc]
  4772 00003B3C 01FE                <2> 		add esi, edi
  4773 00003B3E E889F0FFFF          <2> 		call cndtest
  4774 00003B43 3C02                <2> 		cmp al, 2
  4775 00003B45 7432                <2> 		je prntvr
  4776 00003B47 3C01                <2> 		cmp al, 1
  4777 00003B49 742E                <2> 		je prntvr
  4778 00003B4B 8B35[8D2B0000]      <2> 		mov esi, [currentcommandloc]
  4779 00003B51 01FE                <2> 		add esi, edi
  4780 00003B53 E908000000          <2> 		jmp nxtvrech
  4781                              <2> 	nxtvrechb1:
  4782 00003B58 81EB02000000        <2> 		sub ebx, 2
  4783 00003B5E EBC9                <2> 		jmp echvar
  4784 00003B60 8A03                <2> 	nxtvrech: mov al, [ebx]
  4785 00003B62 3C05                <2> 		cmp al, 5
  4786 00003B64 740A                <2> 		je nxtvrec2
  4787 00003B66 43                  <2> 		inc ebx
  4788 00003B67 81FB[9AAC0000]      <2> 		cmp ebx, varend
  4789 00003B6D 72F1                <2> 		jb nxtvrech
  4790 00003B6F C3                  <2> 		ret
  4791 00003B70 43                  <2> 	nxtvrec2: inc ebx
  4792 00003B71 8A03                <2> 		mov al, [ebx]
  4793 00003B73 3C04                <2> 		cmp al, 4
  4794 00003B75 74B2                <2> 		je echvar
  4795 00003B77 EBE7                <2> 		jmp nxtvrech
  4796 00003B79 43                  <2> 	prntvr: inc ebx
  4797 00003B7A 89DE                <2> 		mov esi, ebx
  4798 00003B7C C3                  <2> 		ret
  4799 00003B7D E85BE1FFFF          <2> 	prntvr2: call print
  4800 00003B82 BE[05720000]        <2> 		mov esi, line
  4801 00003B87 E851E1FFFF          <2> 		call print
  4802 00003B8C C3                  <2> 		ret 
  4803                              <1> %include 'source/programs/else.asm'
  4804 00003B8D FF2C656C736500      <2> 	db 255,44,"else",0
  4805 00003B94 31C0                <2> elsecmd:	xor eax, eax
  4806 00003B96 3805[949C0000]      <2> 	cmp [BATCHISON], al
  4807 00003B9C 0F84E9FAFFFF        <2> 	je near notbatch
  4808 00003BA2 A0[2B9C0000]        <2> 	mov al, [IFON]
  4809 00003BA7 BE[2C9C0000]        <2> 	mov esi, IFTRUE
  4810 00003BAC 01C6                <2> 	add esi, eax
  4811 00003BAE 8A06                <2> 	mov al, [esi]
  4812 00003BB0 3401                <2> 	xor al, 1
  4813 00003BB2 8806                <2> 	mov [esi], al
  4814 00003BB4 C3                  <2> 	ret 
  4815                              <1> %include 'source/programs/fi.asm'
  4816 00003BB5 FF2C666900          <2> 	db 255,44,"fi",0
  4817 00003BBA 30C0                <2> 	xor al, al
  4818 00003BBC 3805[949C0000]      <2> 	cmp [BATCHISON], al
  4819 00003BC2 0F84C3FAFFFF        <2> 	je near notbatch
  4820 00003BC8 B001                <2> fi:	mov al, 1
  4821 00003BCA 2805[2B9C0000]      <2> 	sub [IFON],al
  4822 00003BD0 C3                  <2> 	ret 
  4823                              <1> %ifdef gui.included
  4824                              <1> 	%include 'source/programs/gui.asm'
  4825 00003BD1 FF2C67756900        <2> db 255,44,"gui",0
  4826                              <2> guiswitcher:
  4827 00003BD7 8B35[8D2B0000]      <2> 	mov esi, [currentcommandloc]
  4828 00003BDD 81C604000000        <2> 	add esi, 4
  4829 00003BE3 31C9                <2> 	xor ecx, ecx
  4830 00003BE5 803E00              <2> 	cmp byte [esi], 0
  4831 00003BE8 740A                <2> 	je .nomodepref
  4832 00003BEA E828F3FFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  4833 00003BEF E907000000          <2> 	jmp .modepref
  4834                              <2> .nomodepref:
  4835 00003BF4 51                  <2> 	push ecx
  4836 00003BF5 E849E1FFFF          <2> 	call clear
  4837 00003BFA 59                  <2> 	pop ecx
  4838                              <2> .modepref:
  4839 00003BFB 66BB[2947]          <2> 	mov bx, guiswitch
  4840 00003BFF 66891D[B10C0000]    <2> 	mov [realmodeptr], bx
  4841 00003C06 BB[163C0000]        <2> 	mov ebx, guiswitchret
  4842 00003C0B 891D[AD0C0000]      <2> 	mov [realmodereturn], ebx
  4843 00003C11 E980CFFFFF          <2> 	jmp realmode
  4844                              <2> guiswitchret:
  4845 00003C16 65803D[D4830000]01  <2> 	cmp byte [gs:guion], 1
  4846 00003C1E 7401                <2> 	je .cont
  4847 00003C20 C3                  <2> 	ret
  4848                              <2> .cont:
  4849 00003C21 BF[07490000]        <2> 	mov edi, VBEMODEBLOCK
  4850                              <2> .loop:
  4851 00003C26 658B07              <2> 	mov eax, [gs:edi]
  4852 00003C29 8907                <2> 	mov [edi], eax
  4853 00003C2B 47                  <2> 	inc edi
  4854 00003C2C 81FF[094C0000]      <2> 	cmp edi, VBEEND
  4855 00003C32 72F2                <2> 	jb .loop
  4856 00003C34 A1[2F4B0000]        <2> 	mov eax, [physbaseptr]
  4857 00003C39 2D00001000          <2> 	sub eax, 0x100000
  4858 00003C3E A3[2F4B0000]        <2> 	mov [physbaseptr], eax
  4859 00003C43 C605[B1210000]00    <2> 	mov byte [termguion], 0
  4860 00003C4A BE[AFB40000]        <2> 	mov esi, graphicstable
  4861 00003C4F 30C0                <2> 	xor al, al
  4862                              <2> .clear:
  4863 00003C51 8806                <2> 	mov [esi], al
  4864 00003C53 46                  <2> 	inc esi
  4865 00003C54 81FE[AFB60000]      <2> 	cmp esi, graphicstableend
  4866 00003C5A 72F5                <2> 	jb .clear
  4867 00003C5C E89C1D0000          <2> 	call guisetup
  4868 00003C61 66C705[286F0000]80- <2> 	mov word [termwindow], 640
  4869 00003C69 02                  <2>
  4870 00003C6A 66C705[2A6F0000]E0- <2> 	mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  4871 00003C72 01                  <2>
  4872 00003C73 BE[286F0000]        <2> 	mov esi, termwindow
  4873 00003C78 668B15[194B0000]    <2> 	mov dx, [resolutionx]
  4874 00003C7F 668B0D[1B4B0000]    <2> 	mov cx, [resolutiony]
  4875 00003C86 6681EA8002          <2> 	sub dx, 640
  4876 00003C8B 6681E9E001          <2> 	sub cx, 480
  4877 00003C90 66D1EA              <2> 	shr dx, 1 ;x location-this centers the window
  4878 00003C93 66D1E9              <2> 	shr cx, 1 ;y location-this centers the window	
  4879 00003C96 BB[E0280000]        <2> 	mov ebx, nwcmd
  4880 00003C9B 6631C0              <2> 	xor ax, ax
  4881 00003C9E E8EF280000          <2> 	call showwindow
  4882 00003CA3 E8620F0000          <2> 	call cursorgui
  4883 00003CA8 E896E0FFFF          <2> 	call clear
  4884 00003CAD C3                  <2> 	ret
  4885                              <2> 	
  4886                              <1> %endif
  4887                              <1> %include 'source/programs/help.asm'
  4888 00003CAE FF2C68656C7000      <2> db 255,44,"help",0
  4889                              <2> lscmd:	
  4890 00003CB5 B00D                <2> 		mov al, 13
  4891 00003CB7 E8F7E4FFFF          <2> 		call prcharq
  4892 00003CBC BE[E32F0000]        <2> 		mov esi, progstart
  4893 00003CC1 BB[29470000]        <2> 		mov ebx, progend
  4894 00003CC6 BE[1A960000]        <2> dir:	mov esi, fileindex
  4895 00003CCB 8A06                <2> 	dirnxt:	mov al, [esi]
  4896 00003CCD 30E4                <2> 		xor ah, ah
  4897 00003CCF 3CFF                <2> 		cmp al, 255
  4898 00003CD1 7415                <2> 		je dirfnd
  4899 00003CD3 46                  <2> 		inc esi
  4900 00003CD4 81FE[1A9A0000]      <2> 		cmp esi,  fileindexend
  4901 00003CDA 7339                <2> 		jae dirdn
  4902 00003CDC EBED                <2> 		jmp dirnxt
  4903                              <2> 	dirfnd3:
  4904 00003CDE 46                  <2> 		inc esi
  4905 00003CDF 81FE[1A9A0000]      <2> 		cmp esi, fileindexend
  4906 00003CE5 76E4                <2> 		jbe dirnxt
  4907 00003CE7 4E                  <2> 		dec esi
  4908 00003CE8 46                  <2> 	dirfnd:	inc esi
  4909 00003CE9 8A06                <2> 		mov al, [esi]
  4910 00003CEB 30E4                <2> 		xor ah, ah
  4911 00003CED 3C2C                <2> 		cmp al, 44
  4912 00003CEF 740B                <2> 		je dirfnd2
  4913 00003CF1 46                  <2> 		inc esi
  4914 00003CF2 81FE[1A9A0000]      <2> 		cmp esi,  fileindexend
  4915 00003CF8 731B                <2> 		jae dirdn
  4916 00003CFA EBCF                <2> 		jmp dirnxt
  4917 00003CFC 46                  <2> 	dirfnd2: inc esi
  4918 00003CFD E8C9DFFFFF          <2> 		call printquiet
  4919 00003D02 56                  <2> 		push esi
  4920 00003D03 B009                <2> 		mov al, 9
  4921 00003D05 E8A9E4FFFF          <2> 		call prcharq
  4922 00003D0A 5E                  <2> 		pop esi
  4923 00003D0B 81FE[1A9A0000]      <2> 		cmp esi,  fileindexend
  4924 00003D11 7302                <2> 		jae dirdn
  4925 00003D13 EBB6                <2> 		jmp dirnxt
  4926 00003D15 BE[05720000]        <2> 	dirdn:	mov esi, line
  4927 00003D1A E8BEDFFFFF          <2> 			call print
  4928 00003D1F C3                  <2> 			ret
  4929 00003D20 00                  <2> currentdir db 0
  4930                              <1> %include 'source/programs/if.asm'
  4931 00003D21 FF2C696600          <2> 	db 255,44,"if",0
  4932 00003D26 30C0                <2> ifcmd:	xor al, al
  4933 00003D28 3805[949C0000]      <2> 	cmp [BATCHISON], al
  4934 00003D2E 0F8457F9FFFF        <2> 	je near notbatch
  4935 00003D34 8B1D[8D2B0000]      <2> 	mov ebx, [currentcommandloc]
  4936 00003D3A 81C303000000        <2> 	add ebx, 3
  4937 00003D40 89DE                <2> 	mov esi, ebx
  4938 00003D42 8A06                <2> chkeqsn: mov al, [esi]
  4939 00003D44 3C00                <2> 	cmp al, 0
  4940 00003D46 0F843FF9FFFF        <2> 	je near notbatch
  4941 00003D4C 3C3D                <2> 	cmp al, '='
  4942 00003D4E 0F8403000000        <2> 	je near chkeqdn
  4943 00003D54 46                  <2> 	inc esi
  4944 00003D55 EBEB                <2> 	jmp chkeqsn
  4945 00003D57 B000                <2> chkeqdn: mov al, 0 
  4946 00003D59 8806                <2> 	mov [esi], al
  4947 00003D5B 46                  <2> 	inc esi
  4948 00003D5C E830EEFFFF          <2> 	call tester
  4949 00003D61 3C01                <2> 	cmp al, 1
  4950 00003D63 0F8405000000        <2> 	je near trueif
  4951 00003D69 E91C000000          <2> 	jmp falseif
  4952 00003D6E 31C0                <2> trueif:	xor eax, eax
  4953 00003D70 A0[2B9C0000]        <2> 	mov al, [IFON]
  4954 00003D75 FEC0                <2> 	inc al
  4955 00003D77 A2[2B9C0000]        <2> 	mov [IFON], al
  4956 00003D7C 30E4                <2> 	xor ah, ah
  4957 00003D7E BE[2C9C0000]        <2> 	mov esi, IFTRUE
  4958 00003D83 01C6                <2> 	add esi, eax
  4959 00003D85 B401                <2> 	mov ah, 1
  4960 00003D87 8826                <2> 	mov [esi], ah
  4961 00003D89 C3                  <2> 	ret 
  4962 00003D8A 31C0                <2> falseif: xor eax, eax
  4963 00003D8C A0[2B9C0000]        <2> 	mov al, [IFON]
  4964 00003D91 FEC0                <2> 	inc al
  4965 00003D93 A2[2B9C0000]        <2> 	mov [IFON], al
  4966 00003D98 30E4                <2> 	xor ah, ah
  4967 00003D9A BE[2C9C0000]        <2> 	mov esi, IFTRUE
  4968 00003D9F 01C6                <2> 	add esi, eax
  4969 00003DA1 30E4                <2> 	xor ah, ah
  4970 00003DA3 8826                <2> 	mov [esi], ah
  4971 00003DA5 C3                  <2> 	ret 
  4972                              <1> %include 'source/programs/keycode.asm'
  4973 00003DA6 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  4974 00003DAF 00                  <2>
  4975                              <2> keycode:
  4976 00003DB0 C605[8D210000]00    <2> 	mov byte [trans], 0
  4977 00003DB7 C605[53590000]00    <2> 	mov byte [threadson], 0
  4978                              <2> %ifdef io.serial
  4979                              <2> .noserial:
  4980                              <2> 	hlt
  4981                              <2> 	mov dx, [serial.address]
  4982                              <2> 	in al, dx
  4983                              <2> 	cmp al, 0
  4984                              <2> 	je .noserial
  4985                              <2> 	mov cl, al
  4986                              <2> 	call showhexsmall
  4987                              <2> 	cmp al, 0x1B
  4988                              <2> 	jne .noserial
  4989                              <2> 	in al, dx
  4990                              <2> 	mov cl, al
  4991                              <2> 	call showhexsmall
  4992                              <2> 	cmp cl, 0x5B
  4993                              <2> 	je .noserial
  4994                              <2> 	ret
  4995                              <2> %else
  4996 00003DBE E8B8130000          <2> 	call getkey
  4997 00003DC3 31C0                <2> 	xor eax, eax
  4998 00003DC5 31C9                <2> 	xor ecx, ecx
  4999 00003DC7 8A0D[5B510000]      <2> 	mov cl, [specialkey]
  5000 00003DCD 80F900              <2> 	cmp cl, 0
  5001 00003DD0 0F8405000000        <2> 	je near .nospecialkeycode
  5002 00003DD6 E8C5EFFFFF          <2> 	call showhexsmall
  5003                              <2> .nospecialkeycode:
  5004 00003DDB 66A1[8B210000]      <2> 	mov ax, [lastkey]
  5005 00003DE1 88E1                <2> 	mov cl, ah
  5006 00003DE3 E8B8EFFFFF          <2> 	call showhexsmall
  5007 00003DE8 80FC01              <2> 	cmp ah, 1
  5008 00003DEB 75C3                <2> 	jne keycode
  5009 00003DED C3                  <2> 	ret
  5010                              <2> %endif
  5011                              <1> %include 'source/programs/logout.asm'
  5012 00003DEE FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5013 00003DF7 E92BE9FFFF          <2> 	jmp os
  5014                              <1> %include 'source/programs/loop.asm'
  5015 00003DFC FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5016 00003E03 803D[959C0000]00    <2> 	cmp byte [LOOPON], 0
  5017 00003E0A 0F8501000000        <2> 	jne near filoop
  5018 00003E10 C3                  <2> 	ret
  5019 00003E11 8B35[969C0000]      <2> filoop: mov esi, [LOOPPOS]
  5020 00003E17 FE0D[2B9C0000]      <2> 	dec byte [IFON]
  5021 00003E1D C605[959C0000]00    <2> 	mov byte [LOOPON], 0
  5022 00003E24 8935[909C0000]      <2> 	mov [BATCHPOS], esi
  5023 00003E2A 8935[B3350000]      <2> 	mov [batchedi], esi
  5024 00003E30 C3                  <2> 	ret 
  5025                              <1> %include 'source/programs/ls.asm'
  5026 00003E31 FF2C6C7300          <2> db 255,44,"ls",0
  5027 00003E36 BE[2A820000]        <2> 		mov esi, diskfileindex
  5028                              <2> 	diskindexdir:
  5029 00003E3B 803E5F              <2> 		cmp byte [esi], '_'
  5030 00003E3E 7440                <2> 		je nextdiskindexdir
  5031 00003E40 E886DEFFFF          <2> 		call printquiet
  5032 00003E45 56                  <2> 		push esi
  5033 00003E46 BE[A03E0000]        <2> 		mov esi, disktab
  5034 00003E4B E87BDEFFFF          <2> 		call printquiet
  5035 00003E50 5E                  <2> 		pop esi
  5036 00003E51 8B4E05              <2> 		mov ecx, [esi + 5]
  5037 00003E54 C605[9F2D0000]05    <2> 		mov byte [firsthexshown], 5
  5038 00003E5B E81EF0FFFF          <2> 		call showdec
  5039 00003E60 56                  <2> 		push esi
  5040 00003E61 BE[05720000]        <2> 		mov esi, line
  5041 00003E66 E860DEFFFF          <2> 		call printquiet
  5042 00003E6B 5E                  <2> 		pop esi
  5043 00003E6C 81C609000000        <2> 		add esi, 9
  5044 00003E72 81FE[D1830000]      <2> 		cmp esi, enddiskfileindex
  5045 00003E78 72C1                <2> 		jb diskindexdir
  5046 00003E7A E86DE6FFFF          <2> 		call termcopy
  5047 00003E7F C3                  <2> 		ret
  5048                              <2> 	nextdiskindexdir:
  5049 00003E80 46                  <2> 		inc esi
  5050 00003E81 803E00              <2> 		cmp byte [esi], 0
  5051 00003E84 75FA                <2> 		jne nextdiskindexdir
  5052 00003E86 81C609000000        <2> 		add esi, 9
  5053 00003E8C 81FE[D1830000]      <2> 		cmp esi, enddiskfileindex
  5054 00003E92 72A7                <2> 		jb diskindexdir
  5055 00003E94 E853E6FFFF          <2> 		call termcopy
  5056 00003E99 C3                  <2> 		ret
  5057                              <2> 		
  5058 00003E9A 4469736B2000        <2> 		diskmsg db "Disk ",0
  5059 00003EA0 0D09090900          <2> 		disktab db 13,9,9,9,0
  5060                              <1> %include 'source/programs/memory.asm'
  5061 00003EA5 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  5062 00003EAE BE[DA830000]        <2> 	mov esi, memlistbuf
  5063 00003EB3 31FF                <2> 	xor edi, edi
  5064 00003EB5 668B3D[1A860000]    <2> 	mov di, [memlistend]
  5065 00003EBC 01F7                <2> 	add edi, esi
  5066                              <2> printmemmap:
  5067 00003EBE 8B0E                <2> 	mov ecx, [esi]
  5068 00003EC0 E8EFEEFFFF          <2> 	call showhex
  5069 00003EC5 81C608000000        <2> 	add esi, 8
  5070 00003ECB 8B0E                <2> 	mov ecx, [esi]
  5071 00003ECD E8E2EEFFFF          <2> 	call showhex
  5072 00003ED2 81C608000000        <2> 	add esi, 8
  5073 00003ED8 8B0E                <2> 	mov ecx, [esi]
  5074 00003EDA E8D5EEFFFF          <2> 	call showhex
  5075 00003EDF 81C608000000        <2> 	add esi, 8
  5076 00003EE5 57                  <2> 	push edi
  5077 00003EE6 56                  <2> 	push esi
  5078 00003EE7 BE[05720000]        <2> 	mov esi, line
  5079 00003EEC E8ECDDFFFF          <2> 	call print
  5080 00003EF1 5E                  <2> 	pop esi
  5081 00003EF2 5F                  <2> 	pop edi
  5082 00003EF3 39FE                <2> 	cmp esi, edi
  5083 00003EF5 72C7                <2> 	jb printmemmap
  5084 00003EF7 C3                  <2> 	ret
  5085                              <2> 	
  5086                              <1> %include 'source/programs/pci.asm'
  5087 00003EF8 FF2C70636900        <2> db 255,44,"pci",0
  5088 00003EFE E844160000          <2> 	call pcidump
  5089 00003F03 C3                  <2> 	ret 
  5090                              <1> %include 'source/programs/play.asm'
  5091 00003F04 FF2C706C617900      <2> db 255,44,"play",0
  5092 00003F0B E801000000          <2> 	call playsync
  5093 00003F10 C3                  <2> 	ret
  5094                              <2> playsync:
  5095 00003F11 8B3D[8D2B0000]      <2> 	mov edi, [currentcommandloc]
  5096 00003F17 81C705000000        <2> 	add edi, 5
  5097 00003F1D BE00004000          <2> 	mov esi, 0x400000
  5098 00003F22 E88D180000          <2> 	call loadfile
  5099 00003F27 81FA94010000        <2> 	cmp edx, 404
  5100 00003F2D 7448                <2> 	je nosoundfound
  5101 00003F2F BB00004000          <2> 	mov ebx, 0x400000
  5102 00003F34 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  5103 00003F3B 0F84B8000000        <2> 	je near wave_player
  5104 00003F41 66813B534E          <2> 	cmp word [ebx], "SN"
  5105 00003F46 752F                <2> 	jne nosoundfound
  5106 00003F48 81C306000000        <2> 	add ebx, 6
  5107 00003F4E 891D[60020000]      <2> 	mov [soundpos], ebx
  5108 00003F54 035BFC              <2> 	add ebx, [ebx - 4]
  5109 00003F57 891D[64020000]      <2> 	mov [soundendpos], ebx
  5110 00003F5D 66C705[5E020000]00- <2> 	mov word [soundrepititions], 0
  5111 00003F65 00                  <2>
  5112 00003F66 C605[5D020000]01    <2> 	mov byte [soundon], 1
  5113                              <2> waitforsoundendplay:
  5114 00003F6D A0[5D020000]        <2> 	mov al, [soundon]
  5115 00003F72 3C00                <2> 	cmp al, 0
  5116 00003F74 75F7                <2> 	jne waitforsoundendplay
  5117 00003F76 C3                  <2> 	ret
  5118                              <2> nosoundfound:
  5119 00003F77 BE[9D3F0000]        <2> 	mov esi, notfoundsound
  5120 00003F7C E85CDDFFFF          <2> 	call print
  5121 00003F81 8B35[8D2B0000]      <2> 	mov esi, [currentcommandloc]
  5122 00003F87 81C605000000        <2> 	add esi, 5
  5123 00003F8D E84BDDFFFF          <2> 	call print
  5124 00003F92 BE[CC710000]        <2> 	mov esi, notfound2
  5125 00003F97 E841DDFFFF          <2> 	call print
  5126 00003F9C C3                  <2> 	ret
  5127 00003F9D 536F756E64202200    <2> notfoundsound db "Sound ",34,0
  5128                              <2> 
  5129                              <2> %ifdef sound.included
  5130                              <2> sbplay:
  5131 00003FA5 BE00004000          <2> 		mov esi, 0x400000
  5132 00003FAA 89F3                <2> 		mov ebx, esi
  5133 00003FAC 81C62C000000        <2> 		add esi, 44
  5134 00003FB2 29F7                <2> 		sub edi, esi
  5135 00003FB4 66893D[4A510000]    <2> 		mov [Length1], di
  5136 00003FBB C1EF10              <2> 		shr edi, 16
  5137 00003FBE 66893D[48510000]    <2> 		mov [Length0], di
  5138 00003FC5 8B4B18              <2> 		mov ecx, [ebx + 24]
  5139 00003FC8 890D[55510000]      <2> 		mov [Freq], ecx
  5140 00003FCE 31C0                <2> 		xor eax, eax
  5141 00003FD0 BA00004000          <2> 		mov	edx, 0x400000 ;location of sound
  5142 00003FD5 81C200080000        <2> 		add edx, 2048
  5143 00003FDB 01D0                <2> 		add	eax,edx
  5144 00003FDD 31DB                <2> 		xor ebx, ebx
  5145 00003FDF 668B1D[4A510000]    <2> 		mov bx, [Length1]
  5146 00003FE6 01C3                <2> 		add ebx, eax
  5147 00003FE8 891D[4C510000]      <2> 		mov [NextMemLoc], ebx
  5148 00003FEE A3[50510000]        <2> 		mov	[MemLoc],eax
  5149 00003FF3 E82A100000          <2> 		call DMAPlay
  5150 00003FF8 C3                  <2> 		ret
  5151                              <2> 
  5152                              <2> wave_player:
  5153 00003FF9 803D[5A510000]01    <2> 	cmp byte [SoundBlaster], 1
  5154 00004000 0F849FFFFFFF        <2> 	je near sbplay
  5155 00004006 BE[11400000]        <2> 	mov esi, nosoundblaster
  5156 0000400B E8CDDCFFFF          <2> 	call print
  5157 00004010 C3                  <2> 	ret
  5158                              <2> %else
  5159                              <2> 	wave_player:
  5160                              <2> 		mov esi, nosoundblaster
  5161                              <2> 		call print
  5162                              <2> 		ret
  5163                              <2> %endif
  5164 00004011 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  5165 0000401A 426C61737465722064- <2>
  5166 00004023 657465637465642E0A- <2>
  5167 0000402C 00                  <2>
  5168                              <1> %include 'source/programs/pwd.asm'
  5169 0000402D FF2C70776400        <2> db 255,44,"pwd",0
  5170 00004033 BE[269A0000]        <2> 	mov esi, currentfolder
  5171 00004038 E88EDCFFFF          <2> 	call printquiet
  5172 0000403D BE[05720000]        <2> 	mov esi, line
  5173 00004042 E896DCFFFF          <2> 	call print
  5174 00004047 C3                  <2> 	ret
  5175                              <2> 	
  5176                              <1> %include 'source/programs/reboot.asm'
  5177 00004048 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  5178 00004051 0F011D[5B400000]    <2> 		lidt [idtreboot]
  5179 00004058 CD00                <2> 		int 0
  5180 0000405A F4                  <2> 		hlt
  5181                              <2> 	
  5182 0000405B 0000                <2> 	idtreboot dw 0
  5183 0000405D 00000000            <2> 			  dd 0
  5184                              <2> 
  5185                              <2> 	coldboot:
  5186 00004061 66B84000            <2> 		MOV AX, 0040h
  5187 00004065 8EC0                <2> 		MOV ES, AX
  5188 00004067 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  5189 00004070 00                  <2>
  5190 00004071 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5191 00004078 CF                  <2> 		IRET
  5192                              <2> 
  5193                              <2> 	warmboot:
  5194 00004079 66B84000            <2> 		MOV AX, 0040h
  5195 0000407D 8EC0                <2> 		MOV ES, AX
  5196 0000407F 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  5197 00004088 12                  <2>
  5198 00004089 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5199 00004090 CF                  <2> 		IRET
  5200                              <2> 		
  5201                              <1> %include 'source/programs/reg.asm'
  5202 00004091 FF2C72656700        <2> db 255,44,"reg",0
  5203 00004097 CD03                <2> 	int 3
  5204 00004099 C3                  <2> 	ret 
  5205                              <1> %include 'source/programs/show.asm'
  5206 0000409A FF2C73686F7700      <2> db 255,44,"show",0
  5207 000040A1 8B3D[8D2B0000]      <2> 		mov edi, [currentcommandloc]
  5208 000040A7 81C705000000        <2> 		add edi, 5
  5209 000040AD BE00008000          <2> 		mov esi, 0x800000
  5210 000040B2 E8FD160000          <2> 		call loadfile
  5211 000040B7 81FA94010000        <2> 		cmp edx, 404
  5212 000040BD 0F8483000000        <2> 		je near filenotfound
  5213 000040C3 BE00008000          <2> 		mov esi, 0x800000
  5214                              <2> %ifdef gui.included
  5215 000040C8 66813E424D          <2> 		cmp word [esi], "BM"
  5216 000040CD 7410                <2> 		je bmpfound
  5217                              <2> %endif
  5218 000040CF E809DCFFFF          <2> 		call print
  5219 000040D4 BE[05720000]        <2> 		mov esi, line
  5220 000040D9 E8FFDBFFFF          <2> 		call print
  5221 000040DE C3                  <2> 		ret
  5222                              <2> %ifdef gui.included
  5223                              <2> bmpfound:
  5224 000040DF 803D[D4830000]00    <2> 		cmp byte [guion], 0
  5225 000040E6 0F8428000000        <2> 		je near noguibmp
  5226 000040EC BE00008000          <2> 		mov esi, 0x800000
  5227 000040F1 31C9                <2> 		xor ecx, ecx
  5228 000040F3 31D2                <2> 		xor edx, edx
  5229 000040F5 31C0                <2> 		xor eax, eax
  5230 000040F7 31DB                <2> 		xor ebx, ebx
  5231 000040F9 E8512C0000          <2> 		call showbmp
  5232 000040FE 30C0                <2> 		xor al, al
  5233 00004100 B405                <2> 		mov ah, 5
  5234 00004102 CD30                <2> 		int 30h
  5235 00004104 E84F180000          <2> 		call guiclear
  5236 00004109 E8081A0000          <2> 		call clearmousecursor
  5237 0000410E E8AC200000          <2> 		call reloadallgraphics
  5238 00004113 C3                  <2> 		ret
  5239                              <2> noguibmp:
  5240 00004114 BE[1F410000]        <2> 		mov esi, warnguimsg
  5241 00004119 E8BFDBFFFF          <2> 		call print
  5242 0000411E C3                  <2> 		ret
  5243 0000411F 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  5244 00004128 6E6F7420626520646F- <2>
  5245 00004131 6E6520776974686F75- <2>
  5246 0000413A 742074686520475549- <2>
  5247 00004143 2E0A00              <2>
  5248                              <2> %endif
  5249                              <2> 
  5250                              <2> filenotfound:
  5251 00004146 BE[79410000]        <2> 		mov esi, filenf
  5252 0000414B E88DDBFFFF          <2> 		call print
  5253 00004150 8B35[8D2B0000]      <2> 		mov esi, [currentcommandloc]
  5254                              <2> findfilenotfoundzero:
  5255 00004156 8A06                <2> 		mov al, [esi]
  5256 00004158 46                  <2> 		inc esi
  5257 00004159 3C00                <2> 		cmp al, 0
  5258 0000415B 7411                <2> 		je nofilenamenotfound
  5259 0000415D 81FE[9AB40000]      <2> 		cmp esi, buftxtend
  5260 00004163 7309                <2> 		jae nofilenamenotfound
  5261 00004165 3C20                <2> 		cmp al, " "
  5262 00004167 75ED                <2> 		jne findfilenotfoundzero
  5263 00004169 E86FDBFFFF          <2> 		call print
  5264                              <2> nofilenamenotfound:
  5265 0000416E BE[84410000]        <2> 		mov esi, filenf2
  5266 00004173 E865DBFFFF          <2> 		call print
  5267 00004178 C3                  <2> 		ret
  5268 00004179 5468652066696C6520- <2> filenf db "The file ",34,0
  5269 00004182 2200                <2>
  5270 00004184 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  5271 0000418D 6F7420626520666F75- <2>
  5272 00004196 6E642E0A00          <2>
  5273                              <1> %include 'source/programs/shush.asm'
  5274 0000419B FF2C736875736800    <2> db 255,44,"shush",0
  5275 000041A3 BE[AE410000]        <2> 	mov esi, shushmsg
  5276 000041A8 E830DBFFFF          <2> 	call print
  5277 000041AD C3                  <2> 	ret
  5278 000041AE 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  5279 000041B7 6F2074686520536F6C- <2>
  5280 000041C0 6C65724F5320486172- <2>
  5281 000041C9 646C7920556E69782D- <2>
  5282 000041D2 436F6D70617469626C- <2>
  5283 000041DB 65205368656C6C210A- <2>
  5284 000041E4 00                  <2>
  5285                              <1> %include 'source/programs/stop.asm'
  5286 000041E5 FF2C73746F7000      <2> 	db 255,44,"stop",0
  5287 000041EC 30C0                <2> stop:	xor al, al
  5288 000041EE A2[949C0000]        <2> 	mov [BATCHISON], al
  5289 000041F3 A2[2B9C0000]        <2> 	mov [IFON], al
  5290 000041F8 A2[2C9C0000]        <2> 	mov [IFTRUE], al
  5291 000041FD A2[959C0000]        <2> 	mov [LOOPON], al
  5292 00004202 C3                  <2> 	ret 
  5293                              <1> %include 'source/programs/system.asm'
  5294 00004203 FF2C73797374656D00  <2> 	db 255,44,"system",0
  5295 0000420C BE[BE420000]        <2> 	mov esi, systeminfomsg
  5296 00004211 E8B5DAFFFF          <2> 	call printquiet
  5297 00004216 B9[2A820000]        <2> 	mov ecx, osend
  5298 0000421B E85EECFFFF          <2> 	call showdec
  5299 00004220 BE[D3420000]        <2> 	mov esi, diskbytemsg
  5300 00004225 E8A1DAFFFF          <2> 	call printquiet
  5301 0000422A B9[2A820000]        <2> 	mov ecx, osend
  5302 0000422F 81C1[00A72900]      <2> 	add ecx, commandbufend
  5303 00004235 81E9[D4830000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  5304 0000423B E83EECFFFF          <2> 	call showdec
  5305 00004240 BE[EA420000]        <2> 	mov esi, membytemsg
  5306 00004245 E881DAFFFF          <2> 	call printquiet
  5307                              <2> getcpuspeed:
  5308 0000424A B8FE000000          <2> 	mov eax, 0xFE
  5309 0000424F E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  5310 00004251 B020                <2> 	mov al, 0x20
  5311 00004253 E620                <2> 	out 0x20, al
  5312 00004255 31C0                <2> 	xor eax, eax
  5313 00004257 F4                  <2> 	hlt
  5314 00004258 C605[46020000]01    <2> 	mov byte [testingcpuspeed], 1
  5315                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  5316 0000425F 40                  <2> 	inc eax
  5317 00004260 EBFD                <2> 	jmp cpuspeedloop
  5318                              <2> cpuspeedloopend:
  5319 00004262 31C0                <2> 	xor eax, eax
  5320 00004264 E621                <2> 	out 0x21, al
  5321 00004266 B020                <2> 	mov al, 0x20
  5322 00004268 E620                <2> 	out 0x20, al
  5323 0000426A 31D2                <2> 	xor edx, edx
  5324 0000426C 31C0                <2> 	xor eax, eax
  5325 0000426E A1[47020000]        <2> 	mov eax, [cpuspeedperint]
  5326 00004273 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  5327                              <2> 				;result by 2
  5328 00004275 8B1D[51020000]      <2> 	mov ebx, [timeinterval]
  5329 0000427B C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  5330 0000427E F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  5331 00004280 89C1                <2> 	mov ecx, eax
  5332 00004282 E8F7EBFFFF          <2> 	call showdec
  5333 00004287 BE[2F430000]        <2> 	mov esi, cpuspeedmsg
  5334 0000428C E83ADAFFFF          <2> 	call printquiet
  5335 00004291 8B0D[4B020000]      <2> 	mov ecx, [memoryspace]
  5336 00004297 C1E914              <2> 	shr ecx, 20
  5337 0000429A 41                  <2> 	inc ecx	;the reading is one MB behind
  5338 0000429B E8DEEBFFFF          <2> 	call showdec
  5339 000042A0 BE[35430000]        <2> 	mov esi, memoryspacemsg
  5340 000042A5 E833DAFFFF          <2> 	call print
  5341                              <2> %ifdef sound.included
  5342 000042AA 803D[5A510000]00    <2> 	cmp byte [SoundBlaster], 0
  5343 000042B1 740A                <2> 	je .nosb
  5344 000042B3 BE[17430000]        <2> 	mov esi, soundblastermsg
  5345 000042B8 E820DAFFFF          <2> 	call print
  5346                              <2> .nosb:
  5347                              <2> %endif
  5348 000042BD C3                  <2> 	ret
  5349                              <2> 
  5350 000042BE 4B65726E656C20496E- <2> systeminfomsg db "Kernel Information:",10,0
  5351 000042C7 666F726D6174696F6E- <2>
  5352 000042D0 3A0A00              <2>
  5353 000042D3 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  5354 000042DC 6B2053706163652055- <2>
  5355 000042E5 7365640A00          <2>
  5356 000042EA 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,"System Information:",10,0
  5357 000042F3 6F7279205370616365- <2>
  5358 000042FC 20557365640A537973- <2>
  5359 00004305 74656D20496E666F72- <2>
  5360 0000430E 6D6174696F6E3A0A00  <2>
  5361                              <2> %ifdef sound.included
  5362 00004317 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  5363 00004320 746572204465746563- <2>
  5364 00004329 7465642E0A00        <2>
  5365                              <2> %endif
  5366 0000432F 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  5367 00004335 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space Free",10,0
  5368 0000433E 205370616365204672- <2>
  5369 00004347 65650A00            <2>
  5370                              <1> %include 'source/programs/time.asm'
  5371 0000434B 082E30303030303030- <2> timenscache db 8,".000000000"
  5372 00004354 3030                <2>
  5373 00004356 200A00              <2> timenscacheend: db " ",10,0
  5374 00004359 00                  <2> istimeset db 0
  5375 0000435A 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5376 00004363 2063757272656E7420- <2>
  5377 0000436C 554E49582074696D65- <2>
  5378 00004375 3A0A00              <2>
  5379 00004378 00<rept>            <2> timeinputbuffer times 12 db 0
  5380 00004384 00                  <2> timeinputbend: db 0
  5381                              <2> 
  5382 00004385 FF2C74696D6500      <2> db 255,44,"time",0
  5383 0000438C 803D[59430000]00    <2> 	cmp byte [istimeset], 0
  5384 00004393 753A                <2> 	jne timeisset
  5385 00004395 BE[5A430000]        <2> 	mov esi, settimemsg
  5386 0000439A E83ED9FFFF          <2> 	call print
  5387 0000439F BE[78430000]        <2> 	mov esi, timeinputbuffer
  5388 000043A4 BF[84430000]        <2> 	mov edi, timeinputbend
  5389 000043A9 E813DAFFFF          <2> 	call readline
  5390 000043AE BE[78430000]        <2> 	mov esi, timeinputbuffer
  5391 000043B3 31FF                <2> 	xor edi, edi
  5392 000043B5 E8A6EBFFFF          <2> 	call cnvrttxt
  5393 000043BA 890D[55020000]      <2> 	mov [timeseconds], ecx
  5394 000043C0 31C9                <2> 	xor ecx, ecx
  5395 000043C2 890D[59020000]      <2> 	mov [timenanoseconds], ecx
  5396 000043C8 C605[59430000]01    <2> 	mov byte [istimeset], 1
  5397                              <2> timeisset:
  5398 000043CF 8B0D[55020000]      <2> 	mov ecx, [timeseconds]
  5399 000043D5 E8A4EAFFFF          <2> 	call showdec
  5400                              <2> 	
  5401 000043DA 8B0D[59020000]      <2> 	mov ecx, [timenanoseconds]
  5402 000043E0 BE[4B430000]        <2> 	mov esi, timenscache
  5403 000043E5 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5404 000043EC C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5405 000043F3 C6460A30            <2> 	mov byte [esi + 10], "0"
  5406 000043F7 BE[56430000]        <2> 	mov esi, timenscacheend
  5407 000043FC E860E8FFFF          <2> 	call convert
  5408 00004401 BE[4B430000]        <2> 	mov esi, timenscache
  5409 00004406 E8D2D8FFFF          <2> 	call print
  5410                              <2> 	
  5411 0000440B E80F000000          <2> 	call time
  5412 00004410 BE[EB450000]        <2> 	mov esi, timeshow
  5413 00004415 E8C3D8FFFF          <2> 	call print
  5414 0000441A E9BC000000          <2> 	jmp findday
  5415                              <2> time:
  5416 0000441F E84F010000          <2> 	call tstackput1
  5417 00004424 B00A                <2> 	mov al,10			;Get RTC register A
  5418 00004426 E879010000          <2> 	call tget1
  5419 0000442B A880                <2> 	test al,0x80			;Is update in progress?
  5420 0000442D 75F0                <2> 	jne time				; yes, wait
  5421                              <2> 
  5422 0000442F B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5423 00004431 E86E010000          <2> 	call tget1
  5424 00004436 A2[E2450000]        <2> 	mov [RTCtimeSecond],al
  5425                              <2> 
  5426 0000443B B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5427 0000443D E862010000          <2> 	call tget1
  5428 00004442 A2[E3450000]        <2> 	mov [RTCtimeMinute],al
  5429                              <2> 
  5430 00004447 B004                <2> 	mov al,0x04			;Get hours (see notes)
  5431 00004449 E856010000          <2> 	call tget1
  5432 0000444E A2[E4450000]        <2> 	mov [RTCtimeHour],al
  5433                              <2> 
  5434 00004453 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5435 00004455 E84A010000          <2> 	call tget1
  5436 0000445A A2[E5450000]        <2> 	mov [RTCtimeDay],al
  5437                              <2> 
  5438 0000445F B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5439 00004461 E83E010000          <2> 	call tget1
  5440 00004466 A2[E6450000]        <2> 	mov [RTCtimeMonth],al
  5441                              <2> 
  5442 0000446B B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5443 0000446D E832010000          <2> 	call tget1
  5444 00004472 A2[E7450000]        <2> 	mov [RTCtimeYear],al
  5445                              <2> 	
  5446 00004477 BE[EB450000]        <2> 	mov esi, timeshow
  5447 0000447C 8A2D[E4450000]      <2> 	mov ch, [RTCtimeHour]
  5448 00004482 E828010000          <2> 	call tput1
  5449 00004487 8A2D[E3450000]      <2> 	mov ch, [RTCtimeMinute]
  5450 0000448D E81D010000          <2> 	call tput1
  5451 00004492 8A2D[E2450000]      <2> 	mov ch, [RTCtimeSecond]
  5452 00004498 E812010000          <2> 	call tput1
  5453 0000449D BE[F4450000]        <2> 	mov esi, dateshow
  5454 000044A2 8A2D[E6450000]      <2> 	mov ch, [RTCtimeMonth]
  5455 000044A8 E802010000          <2> 	call tput1
  5456 000044AD 8A2D[E5450000]      <2> 	mov ch, [RTCtimeDay]
  5457 000044B3 E8F7000000          <2> 	call tput1
  5458 000044B8 B520                <2> 	mov ch, 0x20
  5459 000044BA E8F0000000          <2> 	call tput1
  5460 000044BF 4E                  <2> 	dec esi
  5461 000044C0 8A2D[E7450000]      <2> 	mov ch, [RTCtimeYear]
  5462 000044C6 E8E4000000          <2> 	call tput1
  5463 000044CB E8BD000000          <2> 	call tstackget1
  5464 000044D0 C3                  <2> 	ret
  5465 000044D1 BE[EB450000]        <2> 	mov esi, timeshow
  5466 000044D6 E802D8FFFF          <2> 	call print
  5467                              <2> ;;get day of week
  5468                              <2> ;;add these:
  5469                              <2> ;;century value
  5470                              <2> ;;last 2 digits of year
  5471                              <2> ;;last 2 digits of year right shifted twice
  5472                              <2> ;;month table value
  5473                              <2> ;;day of the month
  5474                              <2> ;;divide these by 7
  5475                              <2> ;;the remainder is the day
  5476                              <2> findday:
  5477 000044DB 31C0                <2> 	xor eax, eax
  5478                              <2> ;;first convert the values from BCD to hex
  5479 000044DD A0[E5450000]        <2> 	mov al, [RTCtimeDay]
  5480 000044E2 E873000000          <2> 	call converttohex
  5481 000044E7 8825[E8450000]      <2> 	mov [dayhex], ah
  5482 000044ED A0[E6450000]        <2> 	mov al, [RTCtimeMonth]
  5483 000044F2 E863000000          <2> 	call converttohex
  5484 000044F7 8825[E9450000]      <2> 	mov [monthhex], ah
  5485 000044FD A0[E7450000]        <2> 	mov al, [RTCtimeYear]
  5486 00004502 E853000000          <2> 	call converttohex
  5487 00004507 8825[EA450000]      <2> 	mov [yearhex], ah
  5488 0000450D 31C0                <2> 	xor eax, eax
  5489 0000450F A0[EA450000]        <2> 	mov al, [yearhex]
  5490 00004514 C0E802              <2> 	shr al, 2
  5491 00004517 0205[EA450000]      <2> 	add al, [yearhex]
  5492 0000451D 0506000000          <2> 	add eax, 6
  5493 00004522 31DB                <2> 	xor ebx, ebx
  5494 00004524 8A1D[E9450000]      <2> 	mov bl, [monthhex]
  5495 0000452A FECB                <2> 	dec bl
  5496 0000452C 81C3[09460000]      <2> 	add ebx, month
  5497 00004532 31C9                <2> 	xor ecx, ecx
  5498 00004534 8A0B                <2> 	mov cl, [ebx]
  5499 00004536 01C8                <2> 	add eax, ecx
  5500 00004538 8A0D[E8450000]      <2> 	mov cl, [dayhex]
  5501 0000453E 01C8                <2> 	add eax, ecx
  5502 00004540 66BB0700            <2> 	mov bx, 7
  5503 00004544 31D2                <2> 	xor edx, edx
  5504 00004546 66F7F3              <2> 	div bx
  5505 00004549 C1E202              <2> 	shl edx, 2
  5506 0000454C 81C2[15460000]      <2> 	add edx, day
  5507 00004552 8B32                <2> 	mov esi, [edx]
  5508 00004554 E884D7FFFF          <2> 	call print
  5509 00004559 C3                  <2> 	ret
  5510                              <2> 	
  5511                              <2> converttohex:
  5512 0000455A 88C4                <2> 	mov ah, al
  5513 0000455C C0E804              <2> 	shr al, 4
  5514 0000455F C0E404              <2> 	shl ah, 4
  5515 00004562 C0EC04              <2> 	shr ah, 4
  5516 00004565 3C00                <2> 	cmp al, 0
  5517 00004567 7409                <2> 	je noconverttohex
  5518                              <2> converttohexlp:
  5519 00004569 80C40A              <2> 	add ah, 10
  5520 0000456C FEC8                <2> 	dec al
  5521 0000456E 3C00                <2> 	cmp al, 0
  5522 00004570 75F7                <2> 	jne converttohexlp
  5523                              <2> noconverttohex:
  5524 00004572 C3                  <2> 	ret
  5525                              <2> 	
  5526                              <2> tstackput1:
  5527 00004573 8935[DE450000]      <2> 	mov [tstack + 20], esi
  5528 00004579 BE[CA450000]        <2> 	mov esi, tstack
  5529 0000457E 8906                <2> 	mov [esi], eax
  5530 00004580 895E04              <2> 	mov [esi + 4], ebx
  5531 00004583 894E08              <2> 	mov [esi + 8], ecx
  5532 00004586 89560C              <2> 	mov [esi + 12], edx
  5533 00004589 897E10              <2> 	mov [esi + 16], edi
  5534 0000458C C3                  <2> 	ret
  5535                              <2> 	
  5536                              <2> tstackget1:
  5537 0000458D BE[CA450000]        <2> 	mov esi, tstack
  5538 00004592 8B06                <2> 	mov eax, [esi]
  5539 00004594 8B5E04              <2> 	mov ebx, [esi + 4]
  5540 00004597 8B4E08              <2> 	mov ecx, [esi + 8]
  5541 0000459A 8B560C              <2> 	mov edx, [esi + 12]
  5542 0000459D 8B7E10              <2> 	mov edi, [esi + 16]
  5543 000045A0 8B7614              <2> 	mov esi, [esi + 20]
  5544 000045A3 C3                  <2> 	ret
  5545                              <2> 	
  5546                              <2> tget1:
  5547 000045A4 66BA7000            <2> 	mov dx, 0x70
  5548 000045A8 EE                  <2> 	out dx, al
  5549 000045A9 6642                <2> 	inc dx
  5550 000045AB EC                  <2> 	in al, dx
  5551 000045AC 664A                <2> 	dec dx
  5552 000045AE C3                  <2> 	ret
  5553                              <2> 	
  5554                              <2> tput1:
  5555 000045AF 66C1E904            <2> 	shr cx, 4
  5556 000045B3 B030                <2> 	mov al, 48
  5557 000045B5 00E8                <2> 	add al, ch
  5558 000045B7 8806                <2> 	mov [esi], al
  5559 000045B9 46                  <2> 	inc esi
  5560 000045BA B030                <2> 	mov al, 48
  5561 000045BC C0E904              <2> 	shr cl, 4
  5562 000045BF 00C8                <2> 	add al, cl
  5563 000045C1 8806                <2> 	mov [esi], al
  5564 000045C3 81C602000000        <2> 	add esi, 2
  5565 000045C9 C3                  <2> 	ret
  5566                              <2> 		
  5567 000045CA 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5568 000045D3 000000000000000000- <2>
  5569 000045DC 000000000000        <2>
  5570 000045E2 00                  <2> 	RTCtimeSecond db 0
  5571 000045E3 00                  <2> 	RTCtimeMinute db 0
  5572 000045E4 00                  <2> 	RTCtimeHour db 0
  5573 000045E5 00                  <2> 	RTCtimeDay db 0
  5574 000045E6 00                  <2> 	RTCtimeMonth db 0
  5575 000045E7 00                  <2> 	RTCtimeYear db 0
  5576 000045E8 00                  <2> 	dayhex db 0
  5577 000045E9 00                  <2> 	monthhex db 0
  5578 000045EA 00                  <2> 	yearhex db 0
  5579 000045EB 30303A30303A30300A  <2> 	timeshow db "00:00:00",10
  5580 000045F4 30302D30302D303030- <2> 	dateshow db "00-00-0000",10,0
  5581 000045FD 300A00              <2>
  5582                              <2> 	oldcentury:	;;from 1700 to 1900
  5583 00004600 040200              <2> 	db 4,2,0
  5584                              <2> 	century:	;;from 2000 to 2500
  5585 00004603 060402000604        <2> 	db 6,4,2,0,6,4
  5586                              <2> 	month:
  5587 00004609 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5588 00004612 000305              <2>
  5589                              <2> 	day:
  5590 00004615 [31460000]          <2> 	dd sunday
  5591 00004619 [39460000]          <2> 	dd monday
  5592 0000461D [41460000]          <2> 	dd tuesday
  5593 00004621 [4A460000]          <2> 	dd wednesday
  5594 00004625 [55460000]          <2> 	dd thursday
  5595 00004629 [5F460000]          <2> 	dd friday
  5596 0000462D [67460000]          <2> 	dd saturday
  5597                              <2> sunday:
  5598 00004631 53756E6461790A00    <2> 	db "Sunday",10,0
  5599                              <2> monday:
  5600 00004639 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5601                              <2> tuesday:
  5602 00004641 547565736461790A00  <2> 	db "Tuesday",10,0
  5603                              <2> wednesday:
  5604 0000464A 5765646E6573646179- <2> 	db "Wednesday",10,0
  5605 00004653 0A00                <2>
  5606                              <2> thursday:
  5607 00004655 54687572736461790A- <2> 	db "Thursday",10,0
  5608 0000465E 00                  <2>
  5609                              <2> friday:
  5610 0000465F 4672696461790A00    <2> 	db "Friday",10,0
  5611                              <2> saturday:
  5612 00004667 53617475726461790A- <2> 	db "Saturday",10,0
  5613 00004670 00                  <2>
  5614                              <1> %include 'source/programs/turnoff.asm'
  5615 00004671 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  5616 0000467A 00                  <2>
  5617                              <2> 	turnoff:
  5618 0000467B 66BB[9646]          <2> 			mov bx, shutdown
  5619 0000467F 66891D[B10C0000]    <2> 			mov [realmodeptr], bx
  5620 00004686 BB[C0460000]        <2> 			mov ebx, halt
  5621 0000468B 891D[AD0C0000]      <2> 			mov [realmodereturn], ebx
  5622 00004691 E900C5FFFF          <2> 			jmp realmode
  5623                              <2> 
  5624                              <2> [BITS 16]
  5625                              <2> 		shutdown:
  5626 00004696 B453                <2> 			mov ah, 0x53
  5627 00004698 B004                <2> 			mov al, 4
  5628 0000469A 31DB                <2> 			xor bx, bx
  5629 0000469C CD15                <2> 			int 0x15
  5630                              <2> 			
  5631 0000469E B453                <2> 			mov ah, 0x53
  5632 000046A0 B001                <2> 			mov al, 1
  5633 000046A2 31DB                <2> 			xor bx, bx
  5634 000046A4 CD15                <2> 			int 0x15
  5635                              <2> 			
  5636 000046A6 B453                <2> 			mov ah, 0x53
  5637 000046A8 B008                <2> 			mov al, 8
  5638 000046AA BB0100              <2> 			mov bx, 1
  5639 000046AD B90100              <2> 			mov cx, 1
  5640 000046B0 CD15                <2> 			int 0x15
  5641                              <2> 			
  5642 000046B2 B453                <2> 			mov ah, 0x53
  5643 000046B4 B007                <2> 			mov al, 7
  5644 000046B6 BB0100              <2> 			mov bx, 1
  5645 000046B9 B90300              <2> 			mov cx, 3
  5646 000046BC CD15                <2> 			int 0x15
  5647 000046BE EBFE                <2> 			jmp $
  5648                              <2> 			[BITS 32]
  5649 000046C0 EBFE                <2> halt: jmp $
  5650                              <1> %include 'source/programs/wait.asm'
  5651 000046C2 FF2C7761697400      <2> db 255,44,"wait",0
  5652                              <2> waitkey:
  5653 000046C9 E86FDAFFFF          <2> 		call getchar
  5654 000046CE C3                  <2> 		ret
  5655                              <1> %include 'source/programs/while.asm'
  5656 000046CF FF2C7768696C6500    <2> db 255,44,"while",0
  5657 000046D7 30C0                <2> whilecmd:  xor al, al
  5658 000046D9 3805[949C0000]      <2> 	cmp [BATCHISON], al
  5659 000046DF 0F84A6EFFFFF        <2> 	je near notbatch
  5660 000046E5 8B35[909C0000]      <2> 	mov esi, [BATCHPOS]
  5661 000046EB 81EE02000000        <2> 	sub esi, 2
  5662 000046F1 4E                  <2> whilefnd: dec esi
  5663 000046F2 8A06                <2> 	mov al, [esi]
  5664 000046F4 3C0A                <2> 	cmp al, 10
  5665 000046F6 0F840A000000        <2> 	je near whilefnd2
  5666 000046FC 3C00                <2> 	cmp al, 0
  5667 000046FE 0F8402000000        <2> 	je near whilefnd2
  5668 00004704 EBEB                <2> 	jmp whilefnd
  5669                              <2> whilefnd2:
  5670 00004706 46                  <2> 	inc esi
  5671 00004707 8935[969C0000]      <2> 	mov [LOOPPOS], esi
  5672 0000470D C605[959C0000]01    <2> 	mov BYTE [LOOPON], 1
  5673 00004714 BE[9AB00000]        <2> 	mov esi, buftxt
  5674 00004719 BB[9AB00000]        <2> 	mov ebx, buftxt
  5675 0000471E 81C306000000        <2> 	add ebx, 6
  5676 00004724 E919F6FFFF          <2> 	jmp chkeqsn
  5677                              <1> progend:		;programs end here	
  5678                              <1> batchprogend:
  5679                                  	%include "source/hardware.asm"
  5680                              <1> %ifdef gui.included
  5681                              <1> 	%include "source/drivers/video/vesa.asm"
  5682                              <2> [BITS 16]
  5683                              <2> guiswitch:
  5684 00004729 81F90000            <2> 	cmp cx, 0
  5685 0000472D 750B                <2> 	jne guiswitchdefnum
  5686 0000472F B81200              <2> 	mov ax, 12h
  5687 00004732 31DB                <2> 	xor bx, bx
  5688 00004734 CD10                <2> 	int 10h
  5689 00004736 E85100              <2> 	call guiloadagain
  5690                              <2> guiswitchnocando:
  5691 00004739 C3                  <2> 	ret	;return without switching as mode number is bad
  5692                              <2> guiswitchdefnum:	;switch to a defined mode number
  5693 0000473A B8004F              <2> 	mov ax, 0x4F00
  5694 0000473D BF[0749]            <2> 	mov di, VBEMODEBLOCK
  5695 00004740 CD10                <2> 	int 10h
  5696 00004742 BE[2949]            <2> 	mov si, reserved
  5697 00004745 81EE0200            <2> 	sub si, 2
  5698                              <2> .loop:
  5699 00004749 81C60200            <2> 	add si, 2
  5700 0000474D 81FE[074A]          <2> 	cmp si, oemdata
  5701 00004751 74E6                <2> 	je guiswitchnocando
  5702 00004753 813CFFFF            <2> 	cmp word [si], 0xFFFF
  5703 00004757 74E0                <2> 	je guiswitchnocando
  5704 00004759 390C                <2> 	cmp [si], cx
  5705 0000475B 75EC                <2> 	jne .loop
  5706 0000475D 8936[6148]          <2> 	mov [videomodecache], si
  5707 00004761 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  5708 00004765 B8014F              <2> 	mov ax, 0x4F01
  5709 00004768 BF[074B]            <2> 	mov di, VBEMODEINFOBLOCK
  5710 0000476B 890E[5F48]          <2> 	mov [vesamode], cx
  5711 0000476F CD10                <2> 	int 10h
  5712 00004771 E9CB00              <2> 	jmp selectedvesa
  5713                              <2> guiload:
  5714 00004774 BE[DF48]            <2> 	mov si, bootmsg
  5715 00004777 E8FDB8              <2> 	call printrm
  5716 0000477A 31C0                <2> 	xor ax, ax
  5717 0000477C CD16                <2> 	int 16h
  5718 0000477E 3C79                <2> 	cmp al, "y"
  5719 00004780 0F85ADB8            <2> 	jne near vgaset
  5720 00004784 BE[0472]            <2> 	mov si, crlf
  5721 00004787 E8EDB8              <2> 	call printrm
  5722                              <2> guiloadagain:
  5723 0000478A B8004F              <2> 	mov ax, 04F00h
  5724 0000478D BF[0749]            <2> 	mov di, VBEMODEBLOCK
  5725 00004790 CD10                <2> 	int 10h
  5726 00004792 BE[2949]            <2> 	mov si, reserved
  5727 00004795 81EE0200            <2> 	sub si, 2
  5728                              <2> findvideomodes:
  5729 00004799 81C60200            <2> 	add si, 2
  5730 0000479D 8B0C                <2> 	mov cx, [si]
  5731 0000479F 81F9FFFF            <2> 	cmp cx, 0xFFFF
  5732 000047A3 0F840A00            <2> 	je near nextvmode
  5733 000047A7 81FE[074A]          <2> 	cmp si, oemdata
  5734 000047AB 0F8382B8            <2> 	jae near vgaset	;;kill if no valid list is found
  5735 000047AF EBE8                <2> 	jmp findvideomodes 	
  5736                              <2> ;;debug,shows vmodes available
  5737                              <2> nextvmode:
  5738 000047B1 81EE0200            <2> 	sub si, 2
  5739 000047B5 81FE[2949]          <2> 	cmp si, reserved
  5740 000047B9 0F82CDFF            <2> 	jb near guiloadagain
  5741 000047BD 8B0C                <2> 	mov cx, [si]
  5742 000047BF 81F9FFFF            <2> 	cmp cx, 0xFFFF
  5743 000047C3 0F84EAFF            <2> 	je near nextvmode
  5744 000047C7 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  5745 000047CB B8014F              <2> 	mov ax, 04F01h
  5746 000047CE BF[074B]            <2> 	mov di, VBEMODEINFOBLOCK
  5747 000047D1 890E[5F48]          <2> 	mov [vesamode], cx
  5748 000047D5 CD10                <2> 	int 10h
  5749 000047D7 A0[204B]            <2> 	mov al, [bitsperpixel]
  5750 000047DA 3C10                <2> 	cmp al, 16
  5751 000047DC 75D3                <2> 	jne nextvmode
  5752 000047DE 8936[6148]          <2> 	mov [videomodecache], si
  5753 000047E2 84E4                <2> 	test ah, ah
  5754 000047E4 0F842200            <2> 	jz near setvesamode
  5755 000047E8 EBC7                <2> 	jmp nextvmode
  5756 000047EA 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  5757 000047F3 20766964656F206D6F- <2>
  5758 000047FC 6465204F4B3F28792F- <2>
  5759 00004805 6E290D0A00          <2>
  5760                              <2> setvesamode:
  5761 0000480A 8B0E[194B]          <2> 	mov cx, [resolutionx]
  5762 0000480E E85900              <2> 	call decshow
  5763 00004811 B078                <2> 	mov al, "x"
  5764 00004813 E8C100              <2> 	call char
  5765 00004816 8B0E[1B4B]          <2> 	mov cx, [resolutiony]
  5766 0000481A E84D00              <2> 	call decshow
  5767 0000481D B040                <2> 	mov al, "@"
  5768 0000481F E8B500              <2> 	call char
  5769 00004822 31C9                <2> 	xor cx, cx
  5770 00004824 8A0E[204B]          <2> 	mov cl, [bitsperpixel]
  5771 00004828 E83F00              <2> 	call decshow
  5772 0000482B BE[EA47]            <2> 	mov si, isthisvideook
  5773 0000482E E846B8              <2> 	call printrm
  5774 00004831 31C0                <2> 	xor ax, ax
  5775 00004833 CD16                <2> 	int 16h
  5776 00004835 8B36[6148]          <2> 	mov si, [videomodecache]
  5777 00004839 3C79                <2> 	cmp al, "y"
  5778 0000483B 0F8572FF            <2> 	jne near nextvmode
  5779                              <2> selectedvesa:
  5780 0000483F 8B16[194B]          <2> 	mov dx, [resolutionx]
  5781 00004843 01D2                <2> 	add dx, dx
  5782 00004845 8916[074C]          <2> 	mov [resolutionx2], dx
  5783 00004849 31D2                <2> 	xor dx, dx
  5784 0000484B 31C9                <2> 	xor cx, cx
  5785 0000484D B8024F              <2> 	mov ax, 04F02h
  5786 00004850 8B1E[5F48]          <2> 	mov bx, [vesamode]
  5787 00004854 CD10                <2> 	int 10h		;;enter VESA mode
  5788 00004856 C606[D483]01        <2> 	mov byte [guion], 1
  5789 0000485B E8E3B7              <2> 	call getmemorysize;get the memory map after the video is initialized
  5790 0000485E C3                  <2> 	ret
  5791                              <2> 	
  5792 0000485F 0000                <2> vesamode dw 0
  5793 00004861 0000                <2> videomodecache dw 0
  5794                              <2> 
  5795 00004863 0000000000          <2> dcnm db 0,0,0,0,0
  5796 00004868 0000                <2> dcnmend db 0,0
  5797                              <2> 
  5798                              <2> 
  5799                              <2> decshow:
  5800 0000486A BE[6348]            <2> 	mov si, dcnm
  5801                              <2> decclear:
  5802 0000486D B030                <2> 	mov al, "0"
  5803 0000486F 8804                <2> 	mov [si], al
  5804 00004871 46                  <2> 	inc si
  5805 00004872 81FE[6848]          <2> 	cmp si, dcnmend
  5806 00004876 76F5                <2> 	jbe decclear
  5807 00004878 4E                  <2> 	dec si
  5808 00004879 E81500              <2> 	call convertrm
  5809 0000487C BE[6348]            <2> 	mov si, dcnm
  5810                              <2> dectst:
  5811 0000487F 8A04                <2> 	mov al, [si]
  5812 00004881 46                  <2> 	inc si
  5813 00004882 81FE[6848]          <2> 	cmp si, dcnmend
  5814 00004886 7704                <2> 	ja dectstend
  5815 00004888 3C30                <2> 	cmp al, "0"
  5816 0000488A 76F3                <2> 	jbe dectst
  5817                              <2> dectstend:
  5818 0000488C 4E                  <2> 	dec si
  5819 0000488D E8E7B7              <2> 	call printrm
  5820 00004890 C3                  <2> 	ret
  5821                              <2> 	
  5822                              <2> 	
  5823                              <2> convertrm:
  5824 00004891 4E                  <2> 	dec si
  5825 00004892 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  5826                              <2> cnvrtrm:
  5827 00004894 89DE                <2> 	mov si, bx
  5828 00004896 81EE0300            <2> 	sub si, 3
  5829 0000489A 46                  <2> ten3rm:	inc si
  5830 0000489B 81F9E803            <2> 	cmp cx, 1000
  5831 0000489F 7208                <2> 	jb ten2rm
  5832 000048A1 81E9E803            <2> 	sub cx, 1000
  5833 000048A5 FE04                <2> 	inc byte [si]
  5834 000048A7 EBEB                <2> 	jmp cnvrtrm
  5835 000048A9 46                  <2> ten2rm:	inc si
  5836 000048AA 81F96400            <2> 	cmp cx, 100
  5837 000048AE 7208                <2> 	jb ten1rm
  5838 000048B0 81E96400            <2> 	sub cx, 100
  5839 000048B4 FE04                <2> 	inc byte [si]
  5840 000048B6 EBDC                <2> 	jmp cnvrtrm
  5841 000048B8 46                  <2> ten1rm:	inc si
  5842 000048B9 81F90A00            <2> 	cmp cx, 10
  5843 000048BD 7208                <2> 	jb ten0rm
  5844 000048BF 81E90A00            <2> 	sub cx, 10
  5845 000048C3 FE04                <2> 	inc byte [si]
  5846 000048C5 EBCD                <2> 	jmp cnvrtrm
  5847 000048C7 46                  <2> ten0rm:	inc si
  5848 000048C8 81F90100            <2> 	cmp cx, 1
  5849 000048CC 7208                <2> 	jb tendnrm
  5850 000048CE 81E90100            <2> 	sub cx, 1
  5851 000048D2 FE04                <2> 	inc byte [si]
  5852 000048D4 EBBE                <2> 	jmp cnvrtrm
  5853                              <2> tendnrm:
  5854 000048D6 C3                  <2> 	ret
  5855                              <2> 
  5856                              <2>     char: 		    ;char must be in al
  5857 000048D7 BB0700              <2>        mov bx, 07
  5858 000048DA B40E                <2> 	   mov ah, 0Eh
  5859 000048DC CD10                <2> 	   int 10h
  5860 000048DE C3                  <2> 	   ret
  5861                              <2> 
  5862 000048DF 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  5863 000048E8 20746865204755493F- <2>
  5864 000048F1 28792F6E2900        <2>
  5865                              <2> 
  5866                              <2> 
  5867                              <2> mcursor:
  5868 000048F7 01                  <2> 	db	00000001b
  5869 000048F8 81                  <2> 	db	10000001b
  5870 000048F9 C1                  <2> 	db	11000001b
  5871 000048FA E1                  <2> 	db	11100001b
  5872 000048FB F1                  <2> 	db	11110001b
  5873 000048FC F9                  <2> 	db	11111001b
  5874 000048FD FD                  <2> 	db	11111101b
  5875 000048FE FF                  <2> 	db	11111111b
  5876 000048FF F9                  <2> 	db	11111001b
  5877 00004900 B9                  <2> 	db	10111001b
  5878 00004901 39                  <2> 	db	00111001b
  5879 00004902 1C                  <2> 	db	00011100b
  5880 00004903 1C                  <2> 	db	00011100b
  5881 00004904 0E                  <2> 	db	00001110b
  5882 00004905 0E                  <2> 	db	00001110b
  5883 00004906 0C                  <2> 	db	00001100b
  5884                              <2> mcursorend:
  5885                              <2> 
  5886                              <2> 
  5887                              <2> VBEMODEBLOCK:
  5888 00004907 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  5889 0000490B 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  5890 0000490D 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  5891 00004911 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  5892 00004915 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  5893 00004919 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  5894 0000491B 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  5895 0000491D 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  5896 00004921 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  5897 00004925 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  5898 00004929 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  5899 00004A07 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  5900                              <2> 
  5901                              <2> VBEMODEINFOBLOCK:
  5902                              <2> ;Mandatory information for all VBE revision
  5903 00004B07 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  5904 00004B09 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  5905 00004B0A 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  5906 00004B0B 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  5907 00004B0D 00<rept>            <2> winsize          	times  2 db 0	;Window size
  5908 00004B0F 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  5909 00004B11 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  5910 00004B13 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  5911 00004B17 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  5912                              <2> 
  5913                              <2> ;Mandatory information for VBE 1.2 and above
  5914 00004B19 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  5915 00004B1B 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  5916 00004B1D 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  5917 00004B1E 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  5918 00004B1F 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  5919 00004B20 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  5920 00004B21 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  5921 00004B22 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  5922 00004B23 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  5923 00004B24 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  5924 00004B25 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  5925                              <2> 
  5926                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  5927 00004B26 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  5928 00004B27 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  5929 00004B28 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  5930 00004B29 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  5931 00004B2A 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  5932 00004B2B 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  5933 00004B2C 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  5934 00004B2D 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  5935 00004B2E 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  5936                              <2> 
  5937                              <2> ;Mandatory information for VBE 2.0 and above
  5938 00004B2F 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  5939 00004B33 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  5940 00004B37 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  5941 00004B39 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  5942                              <2> 
  5943 00004C07 0000                <2> resolutionx2 dw 0	;this is not part of the VBE but is necessary GUI info
  5944                              <2> VBEEND:
  5945                              <2> [BITS 32]
  5946                              <1> 	%include "source/drivers/input/mouse.asm"
  5947 00004C09 00                  <2> mousedisabled db 0
  5948                              <2> 	
  5949                              <2> 	cursorgui:
  5950 00004C0A 803D[EB6D0000]01    <2> 		cmp byte [mouseon], 1
  5951 00004C11 0F8432000000        <2> 		je near mousedaemon
  5952 00004C17 803D[D4830000]00    <2> 		cmp byte [guion], 0
  5953 00004C1E 0F8478060000        <2> 		je near entdown
  5954                              <2> 	initmouse:
  5955 00004C24 803D[D4830000]00    <2> 		cmp byte [guion], 0
  5956 00004C2B 7405                <2> 		je noswmsposinit
  5957 00004C2D E8E20F0000          <2> 		call switchmousepos2
  5958                              <2> 	noswmsposinit:
  5959 00004C32 E85A020000          <2> 	  	call PS2SET
  5960 00004C37 E883020000          <2> 		call ACTMOUS
  5961 00004C3C C605[EB6D0000]01    <2> 		mov byte [mouseon],1
  5962 00004C43 E89C020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  5963                              <2> 		;call GETB
  5964                              <2> 				;;If the bytes are mixed up,
  5965                              <2> 				;;remove this line or add another of this line.
  5966                              <2> 	nomouse:
  5967 00004C48 C3                  <2> 		ret
  5968                              <2> 		
  5969                              <2> 	mousedaemon:
  5970 00004C49 803D[EB6D0000]01    <2> 		cmp byte [mouseon], 1
  5971 00004C50 75D2                <2> 		jne initmouse
  5972 00004C52 E464                <2> 		in al, 64h ; Status
  5973 00004C54 A820                <2> 		test al, 20h ; PS2-Mouse?
  5974 00004C56 0F8502000000        <2> 		jnz near moused
  5975 00004C5C F4                  <2> 		hlt
  5976 00004C5D C3                  <2> 		ret
  5977                              <2> 	moused:
  5978 00004C5E 803D[094C0000]01    <2> 		cmp byte [mousedisabled], 1
  5979 00004C65 74E1                <2> 		je nomouse
  5980 00004C67 E878020000          <2> 		  call GETB
  5981 00004C6C 88C3                <2> 		  mov  bl, al
  5982 00004C6E 80E301              <2> 		  and  bl, 1
  5983 00004C71 881D[094F0000]      <2> 		  mov  BYTE [LBUTTON], bl
  5984 00004C77 88C3                <2> 		  mov  bl, al
  5985 00004C79 80E302              <2> 		  and  bl, 2
  5986 00004C7C D0EB                <2> 		  shr  bl, 1
  5987 00004C7E 881D[0A4F0000]      <2> 		  mov  BYTE [RBUTTON], bl
  5988 00004C84 88C3                <2> 		  mov  bl, al
  5989 00004C86 80E304              <2> 		  and  bl, 4
  5990 00004C89 C0EB02              <2> 		  shr  bl, 2
  5991 00004C8C 881D[0B4F0000]      <2> 		  mov  BYTE [MBUTTON], bl
  5992 00004C92 E84D020000          <2> 		  call GETB
  5993 00004C97 A2[0C4F0000]        <2> 		  mov  BYTE [XCOORD], al
  5994 00004C9C E843020000          <2> 		  call GETB
  5995 00004CA1 A2[0D4F0000]        <2> 		  mov  BYTE [YCOORD], al
  5996                              <2> 
  5997                              <2> 	showpixelcursor:
  5998 00004CA6 668B15[F84D0000]    <2> 		mov dx, [mousecursorposition]
  5999 00004CAD 668B0D[FA4D0000]    <2> 		mov cx, [mousecursorposition + 2]
  6000 00004CB4 668915[F44D0000]    <2> 		mov [lastmouseposition], dx
  6001 00004CBB 66890D[F64D0000]    <2> 		mov [lastmouseposition + 2], cx
  6002 00004CC2 A0[0C4F0000]        <2> 		mov al, [XCOORD]
  6003 00004CC7 3C80                <2> 		cmp al, 128
  6004 00004CC9 730C                <2> 		jae subxcoord
  6005 00004CCB 00C0                <2> 		add al, al
  6006 00004CCD 30E4                <2> 		xor ah, ah
  6007 00004CCF 6601C2              <2> 		add dx, ax
  6008 00004CD2 E90B000000          <2> 		jmp subxcoorddn
  6009                              <2> 	subxcoord:
  6010 00004CD7 00C0                <2> 		add al, al
  6011 00004CD9 30DB                <2> 		xor bl, bl
  6012 00004CDB 28C3                <2> 		sub bl, al
  6013 00004CDD 30FF                <2> 		xor bh, bh
  6014 00004CDF 6629DA              <2> 		sub dx, bx
  6015                              <2> 	subxcoorddn:
  6016 00004CE2 8A1D[0D4F0000]      <2> 		mov bl, [YCOORD]
  6017 00004CE8 30C0                <2> 		xor al, al
  6018 00004CEA 28D8                <2> 		sub al, bl
  6019 00004CEC 3C80                <2> 		cmp al, 128
  6020 00004CEE 730A                <2> 		jae subycoord
  6021 00004CF0 30E4                <2> 		xor ah, ah
  6022 00004CF2 6601C1              <2> 		add cx, ax
  6023 00004CF5 E909000000          <2> 		jmp subycoorddn
  6024                              <2> 	subycoord:
  6025 00004CFA 30DB                <2> 		xor bl, bl
  6026 00004CFC 28C3                <2> 		sub bl, al
  6027 00004CFE 30FF                <2> 		xor bh, bh
  6028 00004D00 6629D9              <2> 		sub cx, bx
  6029                              <2> 	subycoorddn:
  6030 00004D03 6681FA204E          <2> 		cmp dx, 20000
  6031 00004D08 7603                <2> 		jbe nooriginx2
  6032 00004D0A 6631D2              <2> 		xor dx, dx
  6033                              <2> 	nooriginx2:
  6034 00004D0D 6681F9204E          <2> 		cmp cx, 20000
  6035 00004D12 7603                <2> 		jbe nooriginy2
  6036 00004D14 6631C9              <2> 		xor cx, cx
  6037                              <2> 	nooriginy2:
  6038 00004D17 6681FA0000          <2> 		cmp dx, 0
  6039 00004D1C 7415                <2> 		je nofixxcolumn2
  6040 00004D1E 663B15[074C0000]    <2> 		cmp dx, [resolutionx2]
  6041 00004D25 720C                <2> 		jb nofixxcolumn2
  6042 00004D27 668B15[074C0000]    <2> 		mov dx, [resolutionx2]
  6043 00004D2E 6681EA0200          <2> 		sub dx, 2
  6044                              <2> 	nofixxcolumn2:
  6045 00004D33 6681F90000          <2> 		cmp cx, 0
  6046 00004D38 7415                <2> 		je nofixyrow2
  6047 00004D3A 663B0D[1B4B0000]    <2> 		cmp cx, [resolutiony]
  6048 00004D41 720C                <2> 		jb nofixyrow2
  6049 00004D43 668B0D[1B4B0000]    <2> 		mov cx, [resolutiony]
  6050 00004D4A 6681E90100          <2> 		sub cx, 1
  6051                              <2> 	nofixyrow2:
  6052 00004D4F 668915[F84D0000]    <2> 		mov [mousecursorposition], dx
  6053 00004D56 66890D[FA4D0000]    <2> 		mov [mousecursorposition + 2], cx
  6054 00004D5D 803D[D4830000]00    <2> 		cmp byte [guion], 0
  6055 00004D64 0F8492000000        <2> 		je near termmouse
  6056 00004D6A E8450E0000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  6057 00004D6F 803D[094F0000]01    <2> 		cmp byte [LBUTTON], 1
  6058 00004D76 0F840C0F0000        <2> 		je near clickicon
  6059 00004D7C 803D[0A4F0000]01    <2> 		cmp byte [RBUTTON], 1
  6060 00004D83 0F84FF0E0000        <2> 		je near clickicon
  6061 00004D89 A0[755C0000]        <2> 		mov al, [pbutton]
  6062 00004D8E C705[785C0000]0000- <2> 		mov dword [dragging], 0
  6063 00004D96 0000                <2>
  6064 00004D98 3C00                <2> 		cmp al, 0
  6065 00004D9A 740F                <2> 		je nopreviousbutton
  6066 00004D9C E8750D0000          <2> 		call clearmousecursor
  6067 00004DA1 E819140000          <2> 		call reloadallgraphics
  6068                              <2> 	windowtermcopyend:
  6069 00004DA6 E8690E0000          <2> 		call switchmousepos2
  6070                              <2> 	nopreviousbutton:
  6071 00004DAB 30C0                <2> 		xor al, al
  6072 00004DAD A2[755C0000]        <2> 		mov [pbutton], al
  6073 00004DB2 A0[094F0000]        <2> 		mov al, [LBUTTON]
  6074 00004DB7 A2[765C0000]        <2> 		mov [pLBUTTON], al
  6075 00004DBC A0[0A4F0000]        <2> 		mov al, [RBUTTON]
  6076 00004DC1 A2[775C0000]        <2> 		mov [pRBUTTON], al
  6077 00004DC6 31C9                <2> 		xor ecx, ecx
  6078 00004DC8 31D2                <2> 		xor edx, edx
  6079 00004DCA 668B15[F84D0000]    <2> 		mov dx, [mousecursorposition]
  6080 00004DD1 668B0D[FA4D0000]    <2> 		mov cx, [mousecursorposition + 2]
  6081 00004DD8 66BB18C7            <2> 		mov bx, 1100011100011000b
  6082 00004DDC 30E4                <2> 		xor ah, ah
  6083 00004DDE B0FE                <2> 		mov al, 254
  6084 00004DE0 C605[135B0000]01    <2> 		mov byte [showcursorfonton], 1
  6085 00004DE7 E86D1D0000          <2> 		call showfontvesa
  6086 00004DEC C605[135B0000]00    <2> 		mov byte [showcursorfonton], 0
  6087 00004DF3 C3                  <2> 		ret
  6088                              <2> 
  6089 00004DF4 84008400            <2> lastmouseposition dw 132,132
  6090 00004DF8 84008400            <2> mousecursorposition dw 132,132	
  6091                              <2> 
  6092                              <2> termmouse:
  6093 00004DFC BE[B0C12800]        <2> 		mov esi, videobuf
  6094 00004E01 31D2                <2> 		xor edx, edx
  6095 00004E03 668B15[F44D0000]    <2> 		mov dx, [lastmouseposition]
  6096 00004E0A 668B0D[F64D0000]    <2> 		mov cx, [lastmouseposition + 2]
  6097 00004E11 66A1[8F4E0000]      <2> 		mov ax, [cursorcache]
  6098 00004E17 663D0000            <2> 		cmp ax, 0
  6099 00004E1B 7425                <2> 		je nocopycursorcache
  6100 00004E1D 66C1E104            <2> 		shl cx, 4
  6101 00004E21 66C1E203            <2> 		shl dx, 3
  6102 00004E25 01D6                <2> 		add esi, edx
  6103 00004E27 6631D2              <2> 		xor dx, dx
  6104 00004E2A 8A15[75230000]      <2> 		mov dl, [charxy]
  6105 00004E30 6641                <2> 		inc cx
  6106                              <2> termmousecplp1:
  6107 00004E32 01D6                <2> 		add esi, edx
  6108 00004E34 6649                <2> 		dec cx
  6109 00004E36 6681F90000          <2> 		cmp cx, 0
  6110 00004E3B 75F5                <2> 		jne termmousecplp1
  6111 00004E3D 29D6                <2> 		sub esi, edx
  6112 00004E3F 668906              <2> 		mov [esi], ax
  6113                              <2> nocopycursorcache:
  6114 00004E42 BE[B0C12800]        <2> 		mov esi, videobuf
  6115 00004E47 31D2                <2> 		xor edx, edx
  6116 00004E49 668B15[F84D0000]    <2> 		mov dx, [mousecursorposition]
  6117 00004E50 668B0D[FA4D0000]    <2> 		mov cx, [mousecursorposition + 2]
  6118 00004E57 66C1E104            <2> 		shl cx, 4
  6119 00004E5B 66C1E203            <2> 		shl dx, 3
  6120 00004E5F 01D6                <2> 		add esi, edx
  6121 00004E61 6631D2              <2> 		xor dx, dx
  6122 00004E64 8A15[75230000]      <2> 		mov dl, [charxy]
  6123 00004E6A 6641                <2> 		inc cx
  6124                              <2> termmousecplp2:
  6125 00004E6C 01D6                <2> 		add esi, edx
  6126 00004E6E 6649                <2> 		dec cx
  6127 00004E70 6681F90000          <2> 		cmp cx, 0
  6128 00004E75 75F5                <2> 		jne termmousecplp2
  6129 00004E77 29D6                <2> 		sub esi, edx
  6130 00004E79 668B06              <2> 		mov ax, [esi]
  6131 00004E7C 66A3[8F4E0000]      <2> 		mov [cursorcache], ax
  6132 00004E82 B080                <2> 		mov al, 128
  6133 00004E84 B407                <2> 		mov ah, 7
  6134 00004E86 668906              <2> 		mov [esi], ax
  6135 00004E89 E85ED6FFFF          <2> 		call termcopy
  6136 00004E8E C3                  <2> 		ret
  6137 00004E8F 0000                <2> cursorcache db 0,0
  6138                              <2> 
  6139                              <2> PS2SET:
  6140 00004E91 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  6141 00004E93 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6142 00004E95 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  6143 00004E9A C3                  <2> ret
  6144                              <2> 
  6145                              <2> CHKPRT:
  6146 00004E9B 66B96400            <2>   mov  cx, 100
  6147                              <2>  .again:
  6148 00004E9F E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6149 00004EA1 A802                <2>   test al, 2		; Check if input buffer is empty
  6150 00004EA3 7402                <2>   je .go
  6151 00004EA5 E2F8                <2>   loop .again
  6152                              <2>  .go:
  6153 00004EA7 C3                  <2> ret
  6154                              <2> 
  6155                              <2> WMOUS:
  6156 00004EA8 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  6157 00004EAA E664                <2>   out  0x64, al		; write to keyboardcontroller
  6158 00004EAC E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6159 00004EB1 C3                  <2> ret
  6160                              <2> 
  6161                              <2> MBUFFUL:
  6162 00004EB2 66B96400            <2>   mov cx, 100
  6163                              <2>  .mn:
  6164 00004EB6 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6165 00004EB8 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  6166 00004EBA 7402                <2>   jz  .mnn
  6167 00004EBC E2F8                <2>   loop .mn
  6168                              <2>  .mnn:
  6169 00004EBE C3                  <2> ret
  6170                              <2> 
  6171                              <2> 
  6172                              <2> ACTMOUS:
  6173 00004EBF E8E4FFFFFF          <2>   call WMOUS
  6174 00004EC4 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  6175 00004EC6 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  6176 00004EC8 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6177 00004ECD E801000000          <2>   call CHKMOUS		; check if a byte is available
  6178 00004ED2 C3                  <2> ret
  6179                              <2> 
  6180                              <2> CHKMOUS:
  6181 00004ED3 B300                <2>   mov  bl, 0
  6182 00004ED5 66B96400            <2>   mov cx, 100
  6183                              <2>  .vrd:
  6184 00004ED9 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6185 00004EDB A801                <2>   test al, 1		; check if controller buffer (60h) has data
  6186 00004EDD 7504                <2>   jnz .yy
  6187 00004EDF E2F8                <2>   loop .vrd
  6188 00004EE1 B301                <2>   mov  bl, 1
  6189                              <2>  .yy:
  6190 00004EE3 C3                  <2> ret
  6191                              <2> 
  6192                              <2> GETB:
  6193                              <2>  .cagain:
  6194 00004EE4 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  6195 00004EE9 08DB                <2>   or bl, bl
  6196 00004EEB 75F7                <2>   jnz .cagain
  6197 00004EED B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  6198 00004EEF E664                <2>   out  0x64, al		; write to keyboardcontroller
  6199 00004EF1 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6200 00004EF6 6631C0              <2>   xor  ax, ax
  6201 00004EF9 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  6202 00004EFB 88C2                <2>   mov  dl, al
  6203 00004EFD B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  6204 00004EFF E664                <2>   out  0x64, al		; write to keyboardcontroller
  6205 00004F01 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6206 00004F06 88D0                <2>   mov  al, dl
  6207 00004F08 C3                  <2> ret
  6208                              <2> 
  6209 00004F09 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  6210 00004F0A 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  6211 00004F0B 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  6212 00004F0C 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  6213 00004F0D 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  6214                              <1> %endif
  6215                              <1> %include "source/drivers/sound/pcspkr.asm"
  6216                              <2> ;PC Speaker Drivers
  6217                              <2> PCSpeakerRAW:
  6218 00004F0E 60                  <2> 	pusha
  6219                              <2> nosoundrep:
  6220 00004F0F 8B35[60020000]      <2> 	mov esi, [soundpos]
  6221 00004F15 31C9                <2> 	xor ecx, ecx
  6222 00004F17 668B0D[5E020000]    <2> 	mov cx, [soundrepititions]
  6223 00004F1E 6681F90000          <2> 	cmp cx, 0
  6224 00004F23 0F8548000000        <2> 	jne near donesetpitch
  6225 00004F29 668B0E              <2> 	mov cx, [esi]
  6226 00004F2C 668B5E02            <2> 	mov bx, [esi + 2]
  6227 00004F30 66890D[5E020000]    <2> 	mov [soundrepititions], cx
  6228 00004F37 81C604000000        <2> 	add esi, 4
  6229 00004F3D 8935[60020000]      <2> 	mov [soundpos], esi
  6230 00004F43 3B35[64020000]      <2> 	cmp esi, [soundendpos]
  6231 00004F49 7735                <2> 	ja stopsound
  6232 00004F4B 66813D[5E020000]00- <2> 	cmp word [soundrepititions], 0
  6233 00004F53 00                  <2>
  6234 00004F54 74B9                <2> 	je nosoundrep
  6235 00004F56 6681FB0000          <2> 	cmp bx, 0
  6236 00004F5B 740F                <2> 	je nosoundplay
  6237 00004F5D E840000000          <2> 	call setpitch
  6238 00004F62 E849000000          <2> 	call startsound
  6239 00004F67 E905000000          <2> 	jmp donesetpitch
  6240                              <2> nosoundplay:
  6241 00004F6C E846000000          <2> 	call killsound
  6242                              <2> donesetpitch:
  6243 00004F71 6649                <2> 	dec cx
  6244 00004F73 66890D[5E020000]    <2> 	mov [soundrepititions], cx
  6245 00004F7A 61                  <2> 	popa
  6246 00004F7B E91DB3FFFF          <2> 	jmp timerinterrupt
  6247                              <2> stopsound:
  6248 00004F80 31C0                <2> 	xor eax, eax
  6249 00004F82 66A3[5E020000]      <2> 	mov [soundrepititions], ax
  6250 00004F88 A2[5D020000]        <2> 	mov [soundon], al
  6251 00004F8D A3[60020000]        <2> 	mov [soundpos], eax
  6252 00004F92 A3[64020000]        <2> 	mov [soundendpos], eax
  6253 00004F97 E81B000000          <2> 	call killsound
  6254 00004F9C 61                  <2> 	popa
  6255 00004F9D E9FBB2FFFF          <2> 	jmp timerinterrupt
  6256                              <2> 
  6257                              <2> 
  6258                              <2> setpitch:
  6259 00004FA2 B0B6                <2> 	mov al, 0xB6
  6260 00004FA4 E643                <2> 	out 0x43, al
  6261 00004FA6 6689D8              <2> 	mov ax, bx
  6262 00004FA9 E642                <2> 	out 0x42, al
  6263 00004FAB 88E0                <2> 	mov al, ah
  6264 00004FAD E642                <2> 	out 0x42, al
  6265 00004FAF C3                  <2> 	ret
  6266                              <2> startsound:
  6267 00004FB0 E461                <2> 	in al, 0x61
  6268 00004FB2 0C03                <2> 	or al, 3
  6269 00004FB4 E661                <2> 	out 0x61, al
  6270 00004FB6 C3                  <2> 	ret
  6271                              <2> killsound:
  6272 00004FB7 E461                <2> 	in al, 0x61
  6273 00004FB9 24FC                <2> 	and al, 0xFC
  6274 00004FBB E661                <2> 	out 0x61, al
  6275 00004FBD C3                  <2> 	ret
  6276                              <2> 	
  6277                              <1> %ifdef sound.included
  6278                              <1> 	%include "source/drivers/sound/sblaster.asm"
  6279                              <2> ;Sound Blaster Drivers
  6280                              <2> sblaster:
  6281                              <2> .init:
  6282 00004FBE E842010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  6283 00004FC3 A2[5A510000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  6284 00004FC8 3C00                <2> 		cmp al, 0
  6285 00004FCA 740E                <2> 		je .noinit
  6286 00004FCC B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  6287 00004FCE E866010000          <2> 		call WriteDSP
  6288 00004FD3 B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  6289 00004FD5 E81C010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  6290                              <2> .noinit:
  6291 00004FDA C3                  <2> 		ret
  6292                              <2> sblastercont: ;this function goes to the next available portion of a sound, if necessary
  6293 00004FDB 66813D[48510000]00- <2> 	cmp word [Length0], 0
  6294 00004FE3 00                  <2>
  6295 00004FE4 0F843FB3FFFF        <2> 	je near handled2
  6296 00004FEA 668B3D[48510000]    <2> 	mov di, [Length0]
  6297 00004FF1 664F                <2> 	dec di
  6298 00004FF3 66893D[48510000]    <2> 	mov [Length0], di
  6299 00004FFA A1[4C510000]        <2> 	mov eax, [NextMemLoc]
  6300 00004FFF A3[50510000]        <2> 	mov [MemLoc], eax
  6301 00005004 31C9                <2> 	xor ecx, ecx
  6302 00005006 66B9FFFF            <2> 	mov cx, 0xFFFF
  6303 0000500A 66890D[4A510000]    <2> 	mov [Length1], cx
  6304 00005011 01C8                <2> 	add eax, ecx
  6305 00005013 A3[4C510000]        <2> 	mov [NextMemLoc], eax
  6306 00005018 E805000000          <2> 	call DMAPlay
  6307 0000501D E907B3FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  6308                              <2> 
  6309                              <2> DMAPlay:    ;uses eax ebx edx
  6310 00005022 66FF0D[4A510000]    <2> 		dec	word [Length1]
  6311 00005029 C605[54510000]00    <2> 		mov	byte [Page1],00h
  6312                              <2> 
  6313 00005030 B005                <2> 		mov	al,(Channel+4)
  6314 00005032 66BA0A00            <2> 		mov	dx,0Ah
  6315 00005036 EE                  <2> 		out	dx,al
  6316 00005037 30C0                <2> 		xor	al,al
  6317 00005039 66BA0C00            <2> 		mov	dx,0Ch
  6318 0000503D EE                  <2> 		out	dx,al
  6319 0000503E B049                <2> 		mov	al,ModeReg
  6320 00005040 66BA0B00            <2> 		mov	dx,0Bh
  6321 00005044 EE                  <2> 		out	dx,al
  6322 00005045 A1[50510000]        <2> 		mov	eax,[MemLoc]
  6323 0000504A 66BA0200            <2> 		mov	dx,AddPort
  6324 0000504E EE                  <2> 		out	dx,al
  6325 0000504F 86C4                <2> 		xchg al,ah
  6326 00005051 EE                  <2> 		out	dx,al
  6327 00005052 A1[50510000]        <2> 		mov	eax,[MemLoc]
  6328 00005057 89C2                <2> 		mov	edx,eax
  6329 00005059 2500000100          <2> 		and	eax,65536
  6330 0000505E 7406                <2> 		jz	MemLocN1
  6331 00005060 FE05[54510000]      <2> 		inc	byte [Page1]
  6332                              <2> MemLocN1:
  6333 00005066 89D0                <2> 		mov	eax,edx
  6334 00005068 2500000200          <2> 		and	eax,131072
  6335 0000506D 7407                <2> 		jz	MemLocN2
  6336 0000506F 8005[54510000]02    <2> 		add	byte [Page1],02
  6337                              <2> MemLocN2:
  6338 00005076 89D0                <2> 		mov	eax,edx
  6339 00005078 2500000400          <2> 		and	eax,262144
  6340 0000507D 7407                <2> 		jz	MemLocN3
  6341 0000507F 8005[54510000]04    <2> 		add	byte [Page1],04
  6342                              <2> MemLocN3:
  6343 00005086 89D0                <2> 		mov	eax,edx
  6344 00005088 2500000800          <2> 		and	eax,524288
  6345 0000508D 7407                <2> 		jz	MemLocN4
  6346 0000508F 8005[54510000]08    <2> 		add	byte [Page1],08
  6347                              <2> MemLocN4:
  6348 00005096 66BA8300            <2> 		mov	dx,PgPort
  6349 0000509A A0[54510000]        <2> 		mov	al,[Page1]
  6350 0000509F EE                  <2> 		out	dx,al
  6351 000050A0 66BA0300            <2> 		mov	dx,LenPort
  6352 000050A4 66A1[4A510000]      <2> 		mov	ax,[Length1]
  6353 000050AA EE                  <2> 		out	dx,al
  6354 000050AB 86C4                <2> 		xchg al,ah
  6355 000050AD EE                  <2> 		out	dx,al
  6356 000050AE 66BA0A00            <2> 		mov	dx,0Ah
  6357 000050B2 B001                <2> 		mov	al,Channel
  6358 000050B4 EE                  <2> 		out	dx,al
  6359                              <2> 		
  6360 000050B5 B040                <2> 		mov	al,40h
  6361 000050B7 E87D000000          <2> 		call WriteDSP
  6362 000050BC 31D2                <2> 		xor	edx,edx
  6363 000050BE B840420F00          <2> 		mov	eax,1000000
  6364 000050C3 8B1D[55510000]      <2> 		mov	ebx,[Freq]
  6365 000050C9 F7F3                <2> 		div	ebx
  6366 000050CB 89C3                <2> 		mov	ebx,eax
  6367 000050CD B800010000          <2> 		mov	eax,256
  6368 000050D2 29D8                <2> 		sub	eax,ebx
  6369 000050D4 E860000000          <2> 		call WriteDSP
  6370 000050D9 A0[59510000]        <2> 		mov	al,[WAVEMode]	;write the mode
  6371 000050DE E856000000          <2> 		call WriteDSP
  6372 000050E3 66A1[4A510000]      <2> 		mov	ax,[Length1]
  6373 000050E9 E84B000000          <2> 		call WriteDSP
  6374 000050EE 86C4                <2> 		xchg al,ah
  6375 000050F0 E844000000          <2> 		call WriteDSP
  6376 000050F5 C3                  <2> 		ret
  6377                              <2> 
  6378                              <2> MstrVol:    ;uses ax dx
  6379 000050F6 6650                <2> 	   push ax
  6380 000050F8 66BA2402            <2> 	   mov	dx,(BasePort+4)
  6381 000050FC B022                <2> 	   mov	al,22h
  6382 000050FE EE                  <2> 	   out	dx,al
  6383 000050FF 6658                <2> 	   pop	ax
  6384 00005101 6642                <2> 	   inc	dx
  6385 00005103 EE                  <2> 	   out	dx,al
  6386 00005104 C3                  <2> 	   ret
  6387                              <2> 	   
  6388                              <2> ResetDSP:   ; uses cx dx
  6389 00005105 66BA2602            <2> 			mov	dx,(BasePort+6)
  6390 00005109 B001                <2> 			mov	al,01
  6391 0000510B EE                  <2> 			out	dx,al
  6392 0000510C 66B93200            <2> 			mov	cx,50
  6393 00005110 EC                  <2> WaitIt1:	in	al,dx
  6394 00005111 E2FD                <2> 			loop WaitIt1
  6395 00005113 30C0                <2> 			xor	al,al
  6396 00005115 EE                  <2> 			out	dx,al
  6397 00005116 66B93200            <2> 			mov	cx,50
  6398 0000511A EC                  <2> WaitIt2:	in	al,dx
  6399 0000511B E2FD                <2> 			loop WaitIt2
  6400 0000511D B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  6401 0000511F 66BA2E02            <2> 			mov	dx,(BasePort+14)
  6402 00005123 EC                  <2> 			in	al,dx
  6403 00005124 2480                <2> 			and	al,80h
  6404 00005126 3C80                <2> 			cmp	al,80h
  6405 00005128 750C                <2> 			jne	ResetErr
  6406 0000512A 66BA2A02            <2> 			mov	dx,(BasePort+10)
  6407 0000512E EC                  <2> 			in	al,dx
  6408 0000512F 3CAA                <2> 			cmp	al,0AAh
  6409 00005131 7503                <2> 			jne	ResetErr
  6410 00005133 B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  6411 00005135 C3                  <2> 			ret
  6412 00005136 30C0                <2> ResetErr:	xor al, al
  6413 00005138 C3                  <2> 			ret
  6414                              <2> 
  6415                              <2> WriteDSP:   ;uses ax dx
  6416 00005139 6650                <2> 		push ax
  6417 0000513B 66BA2C02            <2> 		mov	dx,(BasePort+12)
  6418 0000513F EC                  <2> WaitIt:	in	al,dx
  6419 00005140 2480                <2> 		and	al,80h
  6420 00005142 75FB                <2> 		jnz	WaitIt
  6421 00005144 6658                <2> 		pop	ax
  6422 00005146 EE                  <2> 		out	dx,al
  6423 00005147 C3                  <2> 		ret
  6424                              <2> 
  6425 00005148 0000                <2> Length0 dw	0
  6426 0000514A 0000                <2> Length1	dw  0
  6427 0000514C 00000000            <2> NextMemLoc dd 0
  6428 00005150 00000000            <2> MemLoc	dd  0
  6429 00005154 00                  <2> Page1	db  0
  6430 00005155 00000000            <2> Freq	dd	0
  6431 00005159 14                  <2> WAVEMode db 14h
  6432                              <2> PgPort	equ 83h
  6433                              <2> AddPort	equ 02h
  6434                              <2> LenPort	equ 03h
  6435                              <2> ModeReg	equ 49h
  6436                              <2> Channel	equ 01h
  6437                              <2> BasePort	equ 220h
  6438 0000515A 00                  <2> SoundBlaster	db 0
  6439                              <1> %endif
  6440                              <1> %ifdef rtl8139.included
  6441                              <1> 	%include "source/drivers/network/rtl8139.asm"
  6442                              <1> %endif
  6443                              <1> %ifdef io.serial
  6444                              <1> 	%include "source/drivers/input/serial.asm"
  6445                              <1> %else
  6446                              <1> 	%include "source/drivers/input/keyboard.asm"
  6447 0000515B 00                  <2> specialkey db 0
  6448 0000515C 00                  <2> charregion db 0
  6449                              <2> waitforinput:		;;this is basically the idle process
  6450                              <2> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  6451                              <2> 					;;this lets the cpu stay at close to 0% instead of 100%
  6452 0000515D 6631C0              <2> 	xor ax, ax
  6453 00005160 A0[53590000]        <2> 	mov al, [threadson]
  6454 00005165 8825[53590000]      <2> 	mov [threadson], ah
  6455 0000516B FB                  <2> 	sti
  6456 0000516C F4                  <2> 	hlt
  6457 0000516D A2[53590000]        <2> 	mov [threadson], al
  6458 00005172 3A25[8D210000]      <2> 	cmp ah, [trans]
  6459 00005178 7401                <2> 	je getkey
  6460 0000517A C3                  <2> 	ret
  6461                              <2> getkey:
  6462 0000517B 31C0                <2> 		xor eax, eax
  6463 0000517D A2[5B510000]        <2> 		mov [specialkey], al
  6464 00005182 66A3[8B210000]      <2> 		mov [lastkey], ax
  6465 00005188 E464                <2> 		in al, 64h ; Status
  6466                              <2> 	%ifdef gui.included
  6467 0000518A A820                <2> 		test al, 20h ; PS2-Mouse?
  6468 0000518C 0F85CCFAFFFF        <2> 		jnz near moused
  6469                              <2> 	%endif
  6470 00005192 A801                <2> 		test al, 1 
  6471 00005194 74C7                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  6472                              <2> 	calckey:
  6473 00005196 E460                <2> 		in al, 60h
  6474 00005198 88C4                <2> 		mov ah, al
  6475 0000519A 30C0                <2> 		xor al, al
  6476 0000519C 8825[8C210000]      <2> 		mov [lastkey + 1], ah
  6477 000051A2 88E0                <2> 		mov al, ah
  6478 000051A4 BF[3D530000]        <2> 		mov edi, scancode
  6479                              <2> 	searchscan: 
  6480 000051A9 3C3A                <2> 		cmp al, 3Ah
  6481 000051AB 731A                <2> 		jae scanother
  6482 000051AD 30E4                <2> 		xor ah, ah
  6483 000051AF C0E002              <2> 		shl al, 2
  6484 000051B2 01C7                <2> 		add edi, eax
  6485 000051B4 D0E8                <2> 		shr al, 1
  6486 000051B6 01C7                <2> 		add edi, eax
  6487 000051B8 D0E8                <2> 		shr al, 1
  6488 000051BA 8A27                <2> 		mov ah, [edi]
  6489 000051BC 80FC00              <2> 		cmp ah, 0
  6490 000051BF 7406                <2> 		je scanother
  6491 000051C1 E9D7000000          <2> 		jmp scanfound
  6492 000051C6 00                  <2> uppercase db 0
  6493                              <2> scanother:
  6494 000051C7 88C4                <2> 		mov ah, al
  6495 000051C9 30C0                <2> 		xor al, al
  6496 000051CB 66A3[8B210000]      <2> 		mov [lastkey], ax
  6497 000051D1 80FCE0              <2> 		cmp ah, 0E0h
  6498 000051D4 0F847D000000        <2> 		je near getkeyspecial
  6499 000051DA 803D[5B510000]E0    <2> 		cmp byte [specialkey], 0xE0
  6500 000051E1 752B                <2> 		jne nospecialkey
  6501 000051E3 80FC38              <2> 		cmp ah, 38h
  6502 000051E6 0F84A0000000        <2> 		je near alton
  6503 000051EC 80FCB8              <2> 		cmp ah, 0B8h
  6504 000051EF 0F849F000000        <2> 		je near altoff
  6505 000051F5 80FC1D              <2> 		cmp ah, 1Dh
  6506 000051F8 0F847E000000        <2> 		je near ctron
  6507 000051FE 80FC9D              <2> 		cmp ah, 9Dh
  6508 00005201 0F847D000000        <2> 		je near ctroff
  6509 00005207 66A3[8B210000]      <2> 		mov [lastkey], ax
  6510 0000520D C3                  <2> 		ret
  6511                              <2> nospecialkey:
  6512 0000520E 80FC2A              <2> 		cmp ah, 2Ah
  6513 00005211 0F8455000000        <2> 		je near shifton
  6514 00005217 80FC36              <2> 		cmp ah, 36h
  6515 0000521A 0F844C000000        <2> 		je near shifton
  6516 00005220 80FC1C              <2> 		cmp ah, 1Ch
  6517 00005223 0F8473000000        <2> 		je near entdown
  6518 00005229 80FCAA              <2> 		cmp ah, 0AAh
  6519 0000522C 0F8442000000        <2> 		je near shiftoff
  6520 00005232 80FCB6              <2> 		cmp ah, 0B6h
  6521 00005235 0F8439000000        <2> 		je near shiftoff
  6522 0000523B 80FC3A              <2> 		cmp ah, 3Ah
  6523 0000523E 0F84A5000000        <2> 		je near capslock
  6524 00005244 80FC45              <2> 		cmp ah, 0x45
  6525 00005247 0F84AD000000        <2> 		je near numlock
  6526 0000524D 80FC46              <2> 		cmp ah, 0x46
  6527 00005250 0F84BC000000        <2> 		je near scrolllock
  6528 00005256 C3                  <2> 		ret
  6529                              <2> 	getkeyspecial:
  6530 00005257 C605[5B510000]E0    <2> 		mov byte [specialkey], 0xE0
  6531 0000525E E933FFFFFF          <2> 		jmp calckey
  6532                              <2> 	shift:
  6533 00005263 A0[C6510000]        <2> 		mov al, [uppercase]
  6534 00005268 3C01                <2> 		cmp al, 1
  6535 0000526A 7308                <2> 		jae shiftoff
  6536                              <2> 	shifton:
  6537 0000526C C605[C6510000]01    <2> 		mov byte [uppercase], 1
  6538 00005273 C3                  <2> 		ret
  6539                              <2> 	shiftoff:
  6540 00005274 C605[C6510000]00    <2> 		mov byte [uppercase], 0
  6541 0000527B C3                  <2> 		ret
  6542                              <2> 	ctron:
  6543 0000527C C605[E8520000]01    <2> 		mov byte [ctrkey], 1
  6544 00005283 C3                  <2> 		ret
  6545                              <2> 	ctroff:
  6546 00005284 C605[E8520000]00    <2> 		mov byte [ctrkey], 0
  6547 0000528B C3                  <2> 		ret
  6548                              <2> 	alton:
  6549 0000528C C605[E7520000]01    <2> 		mov byte [altkey], 1
  6550 00005293 C3                  <2> 		ret
  6551                              <2> 	altoff:
  6552 00005294 C605[E7520000]00    <2> 		mov byte [altkey], 0
  6553 0000529B C3                  <2> 		ret
  6554                              <2> 	entdown:
  6555 0000529C C3                  <2> 		ret
  6556                              <2> 	scanfound:
  6557 0000529D 81C704000000        <2> 		add edi, 4
  6558 000052A3 803D[E8520000]01    <2> 		cmp byte [ctrkey], 1
  6559 000052AA 731B                <2> 		jae altin
  6560 000052AC 81EF04000000        <2> 		sub edi, 4
  6561 000052B2 81C702000000        <2> 		add edi, 2
  6562 000052B8 803D[E7520000]01    <2> 		cmp byte [altkey], 1
  6563 000052BF 7306                <2> 		jae altin
  6564 000052C1 81EF02000000        <2> 		sub edi, 2
  6565                              <2> altin:
  6566 000052C7 81C701000000        <2> 		add edi, 1
  6567 000052CD 803D[C6510000]01    <2> 		cmp byte [uppercase], 1
  6568 000052D4 7306                <2> 		jae uppercaseon
  6569 000052D6 81EF01000000        <2> 		sub edi, 1
  6570                              <2> uppercaseon:
  6571 000052DC 8A07                <2> 		mov al,[edi]
  6572 000052DE A2[8B210000]        <2> 		mov [lastkey], al
  6573 000052E3 C3                  <2> 		ret
  6574                              <2> 		
  6575 000052E4 00                  <2> keyboardstatus db 0
  6576 000052E5 00                  <2> numlockstatus db 0
  6577 000052E6 00                  <2> scrolllockstatus db 0
  6578 000052E7 00                  <2> altkey db 0
  6579 000052E8 00                  <2> ctrkey db 0
  6580                              <2> 	capslock:
  6581 000052E9 8035[E4520000]04    <2> 		xor byte [keyboardstatus], 00000100b
  6582 000052F0 E835000000          <2> 		call updatekblights
  6583 000052F5 E969FFFFFF          <2> 		jmp shift
  6584                              <2> 		
  6585                              <2> 	numlock:
  6586 000052FA 8035[E4520000]02    <2> 		xor byte [keyboardstatus], 00000010b
  6587 00005301 8035[E5520000]01    <2> 		xor byte [numlockstatus], 1
  6588 00005308 E81D000000          <2> 		call updatekblights
  6589 0000530D E969FEFFFF          <2> 		jmp getkey
  6590                              <2> 	
  6591                              <2> 	scrolllock:
  6592 00005312 8035[E4520000]01    <2> 		xor byte [keyboardstatus], 00000001b
  6593 00005319 8035[E6520000]01    <2> 		xor byte [scrolllockstatus], 1
  6594 00005320 E805000000          <2> 		call updatekblights
  6595 00005325 E951FEFFFF          <2> 		jmp getkey
  6596                              <2> 		
  6597                              <2> 	updatekblights:
  6598 0000532A B0ED                <2> 		mov al, 0xED
  6599 0000532C 66BA6000            <2> 		mov dx, 0x60
  6600 00005330 EE                  <2> 		out dx, al
  6601                              <2> 	chkkbdack:
  6602 00005331 EC                  <2> 		in al, dx
  6603 00005332 3CFA                <2> 		cmp al, 0xFA
  6604 00005334 75FB                <2> 		jne chkkbdack
  6605 00005336 A0[E4520000]        <2> 		mov al, [keyboardstatus]
  6606 0000533B EE                  <2> 		out dx, al
  6607 0000533C C3                  <2> 		ret
  6608                              <2> 		
  6609                              <2> scancode:
  6610 0000533D 000000000000        <2> 	db 0,0,0,0,0,0				;0h
  6611 00005343 000000000000        <2> 	db 0,0,0,0,0,0				;1h
  6612 00005349 3121AD000000        <2> 	db '1','!',0xAD,0,0,0		;2h
  6613 0000534F 3240FDFB0000        <2> 	db '2','@',0xFD,0xFB,0,0	;3h
  6614 00005355 332300000000        <2> 	db '3','#',0,0,0,0			;4h
  6615 0000535B 34249B9C0000        <2> 	db '4','$',0x9B,0x9C,0,0	;5h
  6616 00005361 3525EE000000        <2> 	db '5','%',0xEE,0,0,0		;6h
  6617 00005367 365EAC000000        <2> 	db '6','^',0xAC,0,0,0		;7h
  6618 0000536D 3726AB000000        <2> 	db '7','&',0xAB,0,0,0		;8h
  6619 00005373 382AEC000000        <2> 	db '8','*',0xEC,0,0,0		;9h
  6620 00005379 392800000000        <2> 	db '9','(',0,0,0,0			;0Ah
  6621 0000537F 302900000000        <2> 	db '0',')',0,0,0,0			;0Bh
  6622 00005385 2D5F9DF10000        <2> 	db '-','_',0x9D,0xF1,0,0	;0Ch
  6623 0000538B 3D2BF7F60000        <2> 	db '=','+',0xF7,0xF6,0,0	;0Dh
  6624 00005391 080800000000        <2> 	db 8,8,0,0,0,0				;0Eh
  6625 00005397 000000000000        <2> 	db 0,0,0,0,0,0				;0Fh
  6626 0000539D 7151848E0000        <2> 	db 'q','Q',0x84,0x8E,0,0	;10h
  6627 000053A3 7757868F0000        <2> 	db 'w','W',0x86,0x8F,0,0	;11h
  6628 000053A9 65458290EE45        <2> 	db 'e','E',0x82,0x90,0xEE,'E'	;12h
  6629 000053AF 7252898A7050        <2> 	db 'r','R',0x89,0x8A,'p','P'	;13h
  6630 000053B5 7454819AE754        <2> 	db 't','T',0x81,0x9A,0xE7,'T'	;14h
  6631 000053BB 795998007559        <2> 	db 'y','Y',0x98,0,'u','Y'	;15h
  6632 000053C1 7555A3970000        <2> 	db 'u','U',0xA3,0x97,0,0		;16h
  6633 000053C7 6949A18D6949        <2> 	db 'i','I',0xA1,0x8D,'i','I'	;17h
  6634 000053CD 6F4FA29577EA        <2> 	db 'o','O',0xA2,0x95,'w',0xEA	;18h
  6635 000053D3 70509499E3EF        <2> 	db 'p','P',0x94,0x99,0xE3,0xEF	;19h
  6636 000053D9 5B7BF4000000        <2> 	db '[','{',0xF4,0,0,0		;1Ah
  6637 000053DF 5D7DF5000000        <2> 	db ']','}',0xF5,0,0,0		;1Bh
  6638 000053E5 000000000000        <2> 	db 0,0,0,0,0,0				;1Ch
  6639 000053EB 000000000000        <2> 	db 0,0,0,0,0,0				;1Dh
  6640 000053F1 6141A085E041        <2> 	db 'a','A',0xA0,133,224,'A'	;1Eh
  6641 000053F7 73531500E5E4        <2> 	db 's','S',21,0,229,228		;1Fh
  6642 000053FD 6444F800EB7F        <2> 	db 'd','D',0xF8,0,235,127	;20h
  6643 00005403 66469F00EDE8        <2> 	db 'f','F',159,0,237,232	;21h
  6644 00005409 6747000079E2        <2> 	db 'g','G',0,0,'y',226		;22h
  6645 0000540F 684800006E48        <2> 	db 'h','H',0,0,'n','H'		;23h
  6646 00005415 6A4A00000000        <2> 	db 'j','J',0,0,0,0			;24h
  6647 0000541B 6B4B00006B4B        <2> 	db 'k','K',0,0,'k','K'		;25h
  6648 00005421 6C4C0000E9E9        <2> 	db 'l','L',0,0,233,233		;26h
  6649 00005427 3B3A14000000        <2> 	db ';',':',20,0,0,0			;27h
  6650 0000542D 272200000000        <2> 	db 27h,22h,0,0,0,0			;28h
  6651 00005433 607E00000000        <2> 	db '`','~',0,0,0,0			;29h
  6652 00005439 000000000000        <2> 	db 0,0,0,0,0,0				;2Ah
  6653 0000543F 5C7CAAB30000        <2> 	db 92,'|',170,179,0,0		;2Bh
  6654 00005445 7A5A91927A5A        <2> 	db 'z','Z',145,146,'z','Z'	;2Ch
  6655 0000544B 7858000000F0        <2> 	db 'x','X',0,0,0,240		;2Dh
  6656 00005451 634387800000        <2> 	db 'c','C',135,128,0,0		;2Eh
  6657 00005457 765600000000        <2> 	db 'v','V',0,0,0,0			;2Fh
  6658 0000545D 62420000E142        <2> 	db 'b','B',0,0,225,'B'		;30h
  6659 00005463 6E4EA4A5764E        <2> 	db 'n','N',0xA4,0xA5,'v','N'	;31h
  6660 00005469 6D4D0000E64D        <2> 	db 'm','M',0,0,230,'M'		;32h
  6661 0000546F 2C3CF3AE0000        <2> 	db ',','<',0xF3,174,0,0		;33h
  6662 00005475 2E3EF2AF0000        <2> 	db '.','>',0xF2,175,0,0		;34h
  6663 0000547B 2F3FA8000000        <2> 	db '/','?',0xA8,0,0,0		;35h
  6664 00005481 000000000000        <2> 	db 0,0,0,0,0,0				;36h
  6665 00005487 000000000000        <2> 	db 0,0,0,0,0,0				;37h
  6666 0000548D 000000000000        <2> 	db 0,0,0,0,0,0				;38h
  6667 00005493 202000000000        <2> 	db ' ',' ',0,0,0,0			;39h
  6668                              <2> noscan:
  6669                              <2> 
  6670                              <1> %endif
  6671                              <1> ;drivers will soon be handled intelligently
  6672                              <1> ;every driver's source will be scanned for a .init function
  6673                              <1> ;that will be called and if it returns 0
  6674                              <1> ;the hardware was found and the driver initialized properly
  6675                              <1> initialize:
  6676                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  6677 00005499 E819000000          <1> 	call .pic
  6678 0000549E E841000000          <1> 	call .pit
  6679 000054A3 E863000000          <1> 	call .fpu
  6680 000054A8 E874000000          <1> 	call .sse
  6681 000054AD 31C0                <1> 	xor eax, eax
  6682 000054AF 31C9                <1> 	xor ecx, ecx
  6683                              <1> %ifdef sound.included
  6684 000054B1 E808FBFFFF          <1> 	call sblaster.init
  6685                              <1> %endif
  6686                              <1> %ifdef io.serial
  6687                              <1> 	call serial.init
  6688                              <1> %endif
  6689 000054B6 C3                  <1> 	ret
  6690                              <1> 	
  6691                              <1> .pic:
  6692 000054B7 B011                <1> 	mov al, 0x11
  6693 000054B9 E620                <1> 	out 0x20, al
  6694 000054BB E6A0                <1> 	out 0xA0, al
  6695 000054BD B040                <1> 	mov al, 0x40	;interrupt for master
  6696 000054BF E621                <1> 	out 0x21, al
  6697 000054C1 B048                <1> 	mov al, 0x48	;interrupt for slave
  6698 000054C3 E6A1                <1> 	out 0xA1, al
  6699 000054C5 B004                <1> 	mov al, 4
  6700 000054C7 E621                <1> 	out 0x21, al
  6701 000054C9 B002                <1> 	mov al, 2
  6702 000054CB E6A1                <1> 	out 0xA1, al
  6703 000054CD B001                <1> 	mov al, 0x1
  6704 000054CF E621                <1> 	out 0x21, al
  6705 000054D1 B001                <1> 	mov al, 0x1
  6706 000054D3 E6A1                <1> 	out 0xA1, al
  6707                              <1> 	;masks are set to zero so as not to mask
  6708 000054D5 30C0                <1> 	xor al, al
  6709 000054D7 E621                <1> 	out 0x21, al
  6710 000054D9 30C0                <1> 	xor al, al
  6711 000054DB E6A1                <1> 	out 0xA1, al
  6712 000054DD B020                <1> 	mov al, 0x20
  6713 000054DF E6A0                <1> 	out 0xA0, al
  6714 000054E1 E620                <1> 	out 0x20, al
  6715 000054E3 C3                  <1> 	ret
  6716                              <1> .pit:
  6717                              <1> 	;initialize the PIT
  6718 000054E4 66A1[4F020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  6719 000054EA E640                <1> 	out 0x40, al
  6720 000054EC 66C1C008            <1> 	rol ax, 8
  6721 000054F0 E640                <1> 	out 0x40, al
  6722                              <1> 	;enable rtc interrupt
  6723 000054F2 B00B                <1> 	mov al, 0xB
  6724 000054F4 E670                <1> 	out 0x70, al
  6725 000054F6 66C1C008            <1> 	rol ax, 8
  6726 000054FA E471                <1> 	in al, 0x71
  6727 000054FC 66C1C008            <1> 	rol ax, 8
  6728 00005500 E670                <1> 	out 0x70, al
  6729 00005502 66C1C008            <1> 	rol ax, 8
  6730 00005506 0C40                <1> 	or al, 0x40
  6731 00005508 E671                <1> 	out 0x71, al
  6732 0000550A C3                  <1> 	ret
  6733                              <1> .fpu:
  6734                              <1> 	;And now to initialize the fpu
  6735 0000550B 0F20E0              <1> 	mov eax, cr4
  6736 0000550E 0D00020000          <1> 	or eax, 0x200
  6737 00005513 0F22E0              <1> 	mov cr4, eax
  6738 00005516 B87F0B0000          <1> 	mov eax, 0xB7F
  6739 0000551B 50                  <1> 	push eax
  6740 0000551C D92C24              <1> 	fldcw [esp]
  6741 0000551F 58                  <1> 	pop eax
  6742 00005520 C3                  <1> 	ret
  6743                              <1> 	
  6744                              <1> .sse:
  6745 00005521 0F20C0              <1> 	mov eax, cr0
  6746 00005524 24FB                <1> 	and al, 11111011b
  6747 00005526 0C02                <1> 	or al, 00000010b
  6748 00005528 0F22C0              <1> 	mov cr0, eax
  6749 0000552B 0F20E0              <1> 	mov eax, cr4
  6750 0000552E 660D0006            <1> 	or ax, 0000011000000000b
  6751 00005532 0F22E0              <1> 	mov cr4, eax
  6752 00005535 C3                  <1> 	ret
  6753                                      %include "source/pci.asm"
  6754 00005536 00                  <1> pcibus		db 0
  6755 00005537 00                  <1> pcidevice	db 0
  6756 00005538 00                  <1> pcifunction	db 0
  6757 00005539 00                  <1> pciregister	db 0
  6758 0000553A 00                  <1> pcireqtype db 0
  6759                              <1> 
  6760                              <1> getpciport:
  6761 0000553B B001                <1> 	mov al, 1
  6762 0000553D A2[3A550000]        <1> 	mov [pcireqtype], al
  6763 00005542 E916000000          <1> 	jmp searchpci
  6764                              <1> pcidump:
  6765 00005547 31C0                <1> 	xor eax, eax
  6766 00005549 A2[38550000]        <1> 	mov [pcifunction], al
  6767 0000554E A2[36550000]        <1> 	mov [pcibus], al
  6768 00005553 A2[37550000]        <1> 	mov [pcidevice], al
  6769 00005558 A2[3A550000]        <1> 	mov [pcireqtype], al
  6770                              <1> searchpci:		;;return in ebx, start X in pciX
  6771 0000555D 30C0                <1> 	xor al, al
  6772 0000555F A2[39550000]        <1> 	mov [pciregister], al
  6773 00005564 E855010000          <1> 	call getpciaddr
  6774 00005569 BAF80C0000          <1> 	mov edx, 0xCF8
  6775 0000556E EF                  <1> 	out dx, eax	;;request pci config
  6776 0000556F BAFC0C0000          <1> 	mov edx, 0xCFC
  6777 00005574 ED                  <1> 	in eax, dx 	;;read in pci config
  6778 00005575 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  6779 0000557A 0F8237000000        <1> 	jb near checkpcidevice
  6780                              <1> searchpciret:
  6781                              <1> nextpcidevice:
  6782 00005580 30C0                <1> 	xor al, al
  6783 00005582 A2[38550000]        <1> 	mov [pcifunction], al
  6784 00005587 A0[37550000]        <1> 	mov al, [pcidevice]
  6785 0000558C 3C1F                <1> 	cmp al, 11111b
  6786 0000558E 0F83C1000000        <1> 	jae near nextpcibus
  6787 00005594 FEC0                <1> 	inc al
  6788 00005596 A2[37550000]        <1> 	mov [pcidevice], al
  6789 0000559B EBC0                <1> 	jmp searchpci
  6790 0000559D A0[38550000]        <1> 	mov al, [pcifunction]
  6791 000055A2 3C07                <1> 	cmp al, 111b
  6792 000055A4 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  6793 000055AA FEC0                <1> 	inc al
  6794 000055AC A2[38550000]        <1> 	mov [pcifunction], al
  6795 000055B1 EBAA                <1> 	jmp searchpci
  6796 000055B3 00000000            <1> pcitype: db 0,0,0,0
  6797                              <1> checkpcidevice:
  6798 000055B7 30C0                <1> 	xor al, al
  6799 000055B9 3805[3A550000]      <1> 	cmp [pcireqtype], al
  6800 000055BF 0F842B000000        <1> 	je near dumppcidevice
  6801 000055C5 B008                <1> 	mov al, 0x08
  6802 000055C7 A2[39550000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  6803 000055CC E8ED000000          <1> 	call getpciaddr
  6804 000055D1 BAF80C0000          <1> 	mov edx, 0xCF8
  6805 000055D6 EF                  <1> 	out dx, eax
  6806 000055D7 BAFC0C0000          <1> 	mov edx, 0xCFC
  6807 000055DC ED                  <1> 	in eax, dx
  6808 000055DD C1C008              <1> 	rol eax, 8
  6809 000055E0 8A1D[B3550000]      <1> 	mov bl, [pcitype]
  6810 000055E6 38D8                <1> 	cmp al, bl
  6811 000055E8 0F8486000000        <1> 	je near foundpciaddr
  6812 000055EE EB90                <1> 	jmp searchpciret
  6813                              <1> dumppcidevice:
  6814 000055F0 30C0                <1> 	xor al, al
  6815 000055F2 A2[39550000]        <1> 	mov [pciregister], al
  6816 000055F7 E8C2000000          <1> 	call getpciaddr
  6817 000055FC 89C1                <1> 	mov ecx, eax
  6818 000055FE C605[9F2D0000]05    <1> 	mov byte [firsthexshown], 5
  6819 00005605 E8AAD7FFFF          <1> 	call showhex
  6820                              <1> dumppcidevicelp:
  6821 0000560A A2[39550000]        <1> 	mov [pciregister], al
  6822 0000560F E8AA000000          <1> 	call getpciaddr
  6823 00005614 BAF80C0000          <1> 	mov edx, 0xCF8
  6824 00005619 EF                  <1> 	out dx, eax
  6825 0000561A BAFC0C0000          <1> 	mov edx, 0xCFC
  6826 0000561F ED                  <1> 	in eax, dx
  6827 00005620 89C1                <1> 	mov ecx, eax
  6828 00005622 A0[39550000]        <1> 	mov al, [pciregister]
  6829 00005627 0404                <1> 	add al, 4
  6830 00005629 C605[9F2D0000]05    <1> 	mov byte [firsthexshown], 5
  6831 00005630 E87FD7FFFF          <1> 	call showhex
  6832 00005635 3C3C                <1> 	cmp al, 0x3C
  6833 00005637 72D1                <1> 	jb dumppcidevicelp
  6834                              <1> dumppcidn:
  6835                              <1> %ifdef io.serial
  6836                              <1> 	mov esi, line
  6837                              <1> 	call print
  6838                              <1> %else
  6839 00005639 803D[73230000]00    <1> 	cmp byte [charpos], 0
  6840 00005640 0F843AFFFFFF        <1> 	je near searchpciret
  6841 00005646 BE[05720000]        <1> 	mov esi, line
  6842 0000564B E88DC6FFFF          <1> 	call print
  6843                              <1> %endif
  6844 00005650 E92BFFFFFF          <1> 	jmp searchpciret
  6845                              <1> nextpcibus:
  6846 00005655 30C0                <1> 	xor al, al
  6847 00005657 A2[37550000]        <1> 	mov [pcidevice], al
  6848 0000565C A0[36550000]        <1> 	mov al, [pcibus]
  6849 00005661 3C7F                <1> 	cmp al, 1111111b
  6850 00005663 730C                <1> 	jae donesearchpci
  6851 00005665 FEC0                <1> 	inc al
  6852 00005667 A2[36550000]        <1> 	mov [pcibus], al
  6853 0000566C E9ECFEFFFF          <1> 	jmp searchpci
  6854                              <1> donesearchpci:
  6855 00005671 31D2                <1> 	xor edx, edx
  6856 00005673 C3                  <1> 	ret
  6857                              <1> foundpciaddr:
  6858 00005674 B010                <1> 	mov al, 0x10
  6859 00005676 A2[39550000]        <1> 	mov [pciregister], al
  6860                              <1> findpciioaddr:
  6861 0000567B E83E000000          <1> 	call getpciaddr
  6862 00005680 BAF80C0000          <1> 	mov edx, 0xCF8
  6863 00005685 EF                  <1> 	out dx, eax
  6864 00005686 BAFC0C0000          <1> 	mov edx, 0xCFC
  6865 0000568B ED                  <1> 	in eax, dx
  6866 0000568C 89C3                <1> 	mov ebx, eax
  6867 0000568E 81E301000000        <1> 	and ebx, 1
  6868 00005694 81FB00000000        <1> 	cmp ebx, 0
  6869 0000569A 0F8408000000        <1> 	je near notpciioaddr
  6870 000056A0 2D01000000          <1> 	sub eax, 1
  6871 000056A5 89C2                <1> 	mov edx, eax
  6872 000056A7 C3                  <1> 	ret
  6873                              <1> notpciioaddr:
  6874 000056A8 A0[39550000]        <1> 	mov al, [pciregister]
  6875 000056AD 0404                <1> 	add al, 4
  6876 000056AF 3C28                <1> 	cmp al, 0x28
  6877 000056B1 0F87C9FEFFFF        <1> 	ja near searchpciret
  6878 000056B7 A2[39550000]        <1> 	mov [pciregister], al
  6879 000056BC EBBD                <1> 	jmp findpciioaddr
  6880                              <1> getpciaddr:		;;puts it in eax and ebx
  6881 000056BE 31C0                <1> 			xor eax, eax
  6882 000056C0 BB00000080          <1> 			mov ebx, 0x80000000
  6883 000056C5 A0[36550000]        <1> 			mov al, [pcibus]
  6884 000056CA C1E010              <1> 			shl eax, 16
  6885 000056CD 01C3                <1> 			add ebx, eax
  6886 000056CF 31C0                <1> 			xor eax, eax
  6887 000056D1 A0[37550000]        <1> 			mov al, [pcidevice]
  6888 000056D6 C1E00B              <1> 			shl eax, 11
  6889 000056D9 01C3                <1> 			add ebx, eax
  6890 000056DB 31C0                <1> 			xor eax, eax
  6891 000056DD A0[38550000]        <1> 			mov al, [pcifunction]
  6892 000056E2 C1E008              <1> 			shl eax, 8
  6893 000056E5 01C3                <1> 			add ebx, eax
  6894 000056E7 31C0                <1> 			xor eax, eax
  6895 000056E9 A0[39550000]        <1> 			mov al, [pciregister]
  6896 000056EE 01C3                <1> 			add ebx, eax
  6897 000056F0 89D8                <1> 			mov eax, ebx
  6898 000056F2 C3                  <1> 			ret
  6899                                      %include "source/disk.asm"
  6900                              <1> ;This loads files using the methods in the loaded driver
  6901                              <1> %ifdef disk.real
  6902                              <1> %include "source/drivers/disk/realmode.asm"
  6903                              <2> diskr:
  6904                              <2> 			;read from disk using real mode-it does not work with large files
  6905                              <2> 			;sector count in cl
  6906                              <2> 			;disk number in ch
  6907                              <2> 			;48 bit address with last 32 bits in ebx
  6908                              <2> 			;buffer in esi
  6909                              <2> 			;puts end of buffer in edi and end lba address in edx
  6910 000056F3 880D[20570000]      <2> 	mov [sdlength], cl
  6911 000056F9 891D[21570000]      <2> 	mov [sdaddress], ebx
  6912 000056FF 8935[7F580000]      <2> 	mov [oldesireal], esi
  6913 00005705 66BE[2557]          <2> 	mov si, readdiskreal
  6914 00005709 668935[B10C0000]    <2> 	mov [realmodeptr], si
  6915 00005710 BE[61570000]        <2> 	mov esi, backfromrealread
  6916 00005715 8935[AD0C0000]      <2> 	mov [realmodereturn], esi
  6917 0000571B E976B4FFFF          <2> 	jmp realmode
  6918 00005720 00                  <2> sdlength db 0
  6919 00005721 00000000            <2> sdaddress dd 0
  6920                              <2> 
  6921                              <2> [BITS 16]
  6922                              <2> readdiskreal:
  6923 00005725 C706[5157]1000      <2> 	mov word [dlen], 0x10
  6924 0000572B C706[5557]0000      <2> 	mov word [daddress], 0
  6925 00005731 C706[5757]0001      <2> 	mov word [dsegm], 0x100
  6926 00005737 66891E[5957]        <2> 	mov [dlbaad], ebx
  6927 0000573C 880E[5357]          <2> 	mov [dreadlen], cl
  6928                              <2> ReadHardDisk:
  6929 00005740 BE[5157]            <2> 	mov si, diskaddresspacket
  6930 00005743 31C0                <2> 	xor ax, ax
  6931 00005745 B442                <2> 	mov ah, 0x42
  6932 00005747 8A16[5057]          <2> 	mov dl, [dnumber]
  6933 0000574B CD13                <2> 	int 0x13
  6934 0000574D 72F1                <2> 	jc ReadHardDisk
  6935 0000574F C3                  <2> 	ret
  6936                              <2> 
  6937 00005750 80                  <2> dnumber db 0x80
  6938                              <2> diskaddresspacket:
  6939 00005751 10                  <2> dlen:	db 0x10 ;size of packet
  6940 00005752 00                  <2> 		db 0
  6941 00005753 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  6942 00005755 0000                <2> daddress:	dw 0x0	;address 0
  6943 00005757 0001                <2> dsegm:		dw 0x100	;segment
  6944                              <2> 		;start with known value for hd
  6945                              <2> dlbaad:
  6946 00005759 00000000            <2> 	dd 0	;lba address
  6947 0000575D 00000000            <2> 	dd 0
  6948                              <2> [BITS 32]
  6949                              <2> backfromrealread:
  6950 00005761 8B35[7F580000]      <2> 	mov esi, [oldesireal]
  6951 00005767 8B1D[21570000]      <2> 	mov ebx, [sdaddress]
  6952 0000576D 31C9                <2> 	xor ecx, ecx
  6953 0000576F 8A0D[20570000]      <2> 	mov cl, [sdlength]
  6954 00005775 01CB                <2> 	add ebx, ecx
  6955 00005777 66B80800            <2> 	mov ax, LINEAR_SEL
  6956 0000577B 8EE0                <2> 	mov fs, ax
  6957 0000577D BF00100000          <2> 	mov edi, 0x1000
  6958 00005782 B200                <2> 	mov dl, 0
  6959 00005784 D0E1                <2> 	shl cl, 1
  6960                              <2> copyfromrmodedisk:
  6961 00005786 648A07              <2> 	mov al, [fs:edi]
  6962 00005789 8806                <2> 	mov [esi], al
  6963 0000578B 47                  <2> 	inc edi
  6964 0000578C 46                  <2> 	inc esi
  6965 0000578D FECA                <2> 	dec dl
  6966 0000578F 80FA00              <2> 	cmp dl, 0
  6967 00005792 75F2                <2> 	jne copyfromrmodedisk
  6968 00005794 FEC9                <2> 	dec cl
  6969 00005796 B200                <2> 	mov dl, 0
  6970 00005798 80F900              <2> 	cmp cl, 0
  6971 0000579B 75E9                <2> 	jne copyfromrmodedisk
  6972 0000579D 66B83000            <2> 	mov ax, NEW_DATA_SEL
  6973 000057A1 8EE0                <2> 	mov fs, ax
  6974 000057A3 89F7                <2> 	mov edi, esi
  6975 000057A5 8B35[7F580000]      <2> 	mov esi, [oldesireal]
  6976 000057AB 89DA                <2> 	mov edx, ebx
  6977 000057AD 8B1D[21570000]      <2> 	mov ebx, [sdaddress]
  6978 000057B3 C3                  <2> 	ret
  6979                              <2> 	
  6980                              <1> %else
  6981                              <1> 	%ifdef disk.protected
  6982                              <1> 	%include "source/drivers/disk/pata.asm"
  6983                              <1> 	%endif
  6984                              <1> %endif
  6985                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  6986                              <1> 			;returns with err code in edx and file end in edi
  6987 000057B4 803F00              <1> 	cmp byte [edi], 0
  6988 000057B7 0F8448000000        <1> 	je near nofileload
  6989 000057BD 89FA                <1> 	mov edx, edi
  6990 000057BF BB[2A820000]        <1> 	mov ebx, diskfileindex
  6991                              <1> nextnamechar:
  6992 000057C4 8A07                <1> 	mov al, [edi]
  6993 000057C6 3C26                <1> 	cmp al, '&'
  6994 000057C8 7440                <1> 	je nullfile
  6995 000057CA 8A23                <1> 	mov ah, [ebx]
  6996 000057CC 47                  <1> 	inc edi
  6997 000057CD 43                  <1> 	inc ebx
  6998 000057CE 88C1                <1> 	mov cl, al
  6999 000057D0 08E1                <1> 	or cl, ah
  7000 000057D2 80F900              <1> 	cmp cl, 0
  7001 000057D5 744E                <1> 	je equalfilenames
  7002 000057D7 80F920              <1> 	cmp cl, ' '
  7003 000057DA 7449                <1> 	je equalfilenames
  7004 000057DC 3C2A                <1> 	cmp al, '*'
  7005 000057DE 742B                <1> 	je equalfilenames2
  7006 000057E0 80FC00              <1> 	cmp ah, 0
  7007 000057E3 7410                <1> 	je nextfilename
  7008 000057E5 3C00                <1> 	cmp al, 0
  7009 000057E7 7404                <1> 	je getebxzero
  7010 000057E9 38E0                <1> 	cmp al, ah
  7011 000057EB 74D7                <1> 	je nextnamechar
  7012                              <1> getebxzero:
  7013 000057ED 8A23                <1> 	mov ah, [ebx]
  7014 000057EF 43                  <1> 	inc ebx
  7015 000057F0 80FC00              <1> 	cmp ah, 0
  7016 000057F3 75F8                <1> 	jne getebxzero
  7017                              <1> nextfilename:
  7018 000057F5 81C308000000        <1> 	add ebx, 8		;next descriptor
  7019 000057FB 89D7                <1> 	mov edi, edx
  7020 000057FD 81FB[D1830000]      <1> 	cmp ebx, enddiskfileindex
  7021 00005803 72BF                <1> 	jb nextnamechar
  7022                              <1> nofileload:
  7023 00005805 BA94010000          <1> 	mov edx, 404	;indicate not found error
  7024                              <1> nullfile:
  7025 0000580A C3                  <1> 	ret
  7026                              <1> equalfilenames2:
  7027 0000580B 81EB02000000        <1> 	sub ebx, 2
  7028                              <1> eqfilefind:
  7029 00005811 43                  <1> 	inc ebx
  7030 00005812 81FB[D1830000]      <1> 	cmp ebx, enddiskfileindex
  7031 00005818 0F83E7FFFFFF        <1> 	jae near nofileload
  7032 0000581E 8A03                <1> 	mov al, [ebx]
  7033 00005820 3C00                <1> 	cmp al, 0
  7034 00005822 75ED                <1> 	jne eqfilefind
  7035 00005824 43                  <1> 	inc ebx
  7036                              <1> equalfilenames:
  7037 00005825 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  7038 00005828 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  7039 0000582A 031D[D6830000]      <1> 	add ebx, [lbaad]	;add offset to solleros
  7040 00005830 31C9                <1> 	xor ecx, ecx
  7041 00005832 88C1                <1> 	mov cl, al			;get excess number of sectors
  7042 00005834 C0E102              <1> 	shl cl, 2
  7043 00005837 C0E902              <1> 	shr cl, 2			;cut off at 64
  7044 0000583A 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  7045 0000583C B500                <1> 	mov ch, 0			;drive 0
  7046 0000583E C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  7047                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  7048 00005841 A3[83580000]        <1> 	mov [filetracks], eax
  7049 00005846 89F7                <1> 	mov edi, esi		;just in case cl is 0
  7050 00005848 89DA                <1> 	mov edx, ebx
  7051 0000584A 80F900              <1> 	cmp cl, 0
  7052 0000584D 7405                <1> 	je copytracksforfile
  7053 0000584F E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  7054                              <1> copytracksforfile:
  7055 00005854 A1[83580000]        <1> 	mov eax, [filetracks]
  7056 00005859 3D00000000          <1> 	cmp eax, 0
  7057 0000585E 7419                <1> 	je donecopyfile
  7058 00005860 48                  <1> 	dec eax
  7059 00005861 A3[83580000]        <1> 	mov [filetracks], eax
  7060 00005866 89D3                <1> 	mov ebx, edx	;get end lba
  7061 00005868 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  7062 0000586A 8A2D[D5830000]      <1> 	mov ch, [DriveNumber]
  7063 00005870 89FE                <1> 	mov esi, edi	;reset buffer
  7064 00005872 E87CFEFFFF          <1> 	call diskr
  7065 00005877 EBDB                <1> 	jmp copytracksforfile
  7066                              <1> donecopyfile:
  7067 00005879 BA00000000          <1> 	mov edx, 0	;no error
  7068 0000587E C3                  <1> 	ret
  7069                              <1> 
  7070 0000587F 00000000            <1> oldesireal dd 0
  7071 00005883 00000000            <1> filetracks dd 0
  7072 00005887 00                  <1> lbad1 db 0
  7073 00005888 00                  <1> lbad2 db 0
  7074 00005889 00                  <1> lbad3 db 0
  7075 0000588A 00                  <1> lbad4 db 0
  7076 0000588B 00                  <1> lbad5 db 0
  7077 0000588C 00                  <1> lbad6 db 0
  7078 0000588D 6400                <1> segments dw 100
  7079                              <1> 
  7080                              <1> 
  7081                              <1> 	
  7082                                      %include "source/threads.asm"
  7083                              <1> %ifdef threads.included	
  7084                              <1> nwcmdst:
  7085 0000588F 31C0                <1> 	xor eax, eax
  7086 00005891 BC[BA950000]        <1> 	mov esp, stackend
  7087 00005896 A2[53590000]        <1> 	mov [threadson], al
  7088 0000589B A3[54590000]        <1> 	mov [currentthread], eax
  7089 000058A0 0504000000          <1> 	add eax, 4
  7090 000058A5 A3[4F590000]        <1> 	mov [lastthread], eax
  7091 000058AA FB                  <1> 	sti
  7092 000058AB E930D0FFFF          <1> 	jmp nwcmd
  7093                              <1> 
  7094                              <1> nomorethreadspace:
  7095 000058B0 BE[C6580000]        <1> 	mov esi, nmts
  7096 000058B5 E823C4FFFF          <1> 	call print
  7097 000058BA C605[53590000]00    <1> 	mov byte [threadson], 0
  7098 000058C1 E91AD0FFFF          <1> 	jmp nwcmd
  7099 000058C6 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  7100 000058CF 6572666C6F770A00    <1>
  7101                              <1> 
  7102                              <1> nomorestackspace:
  7103 000058D7 BE[E3580000]        <1> 	mov esi, nmss
  7104 000058DC E8FCC3FFFF          <1> 	call print
  7105 000058E1 EBAC                <1> 	jmp nwcmdst
  7106 000058E3 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  7107 000058EC 72666C6F770A00      <1>
  7108                              <1> 	
  7109                              <1> threadswitch:
  7110 000058F3 FA                  <1> 	cli
  7111 000058F4 60                  <1> 	pushad
  7112 000058F5 BF[00A72900]        <1> 	mov edi, threadlist
  7113 000058FA A1[54590000]        <1> 	mov eax, [currentthread]
  7114 000058FF 40                  <1> 	inc eax
  7115 00005900 A3[54590000]        <1> 	mov [currentthread], eax
  7116 00005905 6648                <1> 	dec ax
  7117 00005907 C1E002              <1> 	shl eax, 2
  7118 0000590A 01C7                <1> 	add edi, eax
  7119 0000590C 8927                <1> 	mov [edi], esp
  7120 0000590E 81C704000000        <1> 	add edi, 4
  7121 00005914 81FF[00B72900]      <1> 	cmp edi, threadlistend
  7122 0000591A 0F830D000000        <1> 	jae near nookespthread
  7123 00005920 8B07                <1> 	mov eax, [edi]
  7124 00005922 3D00000000          <1> 	cmp eax, 0
  7125 00005927 0F8519000000        <1> 	jne near okespthread
  7126                              <1> nookespthread:
  7127 0000592D BF[00A72900]        <1> 	mov edi, threadlist
  7128 00005932 31C0                <1> 	xor eax, eax
  7129 00005934 A3[54590000]        <1> 	mov [currentthread], eax
  7130 00005939 8B07                <1> 	mov eax, [edi]
  7131 0000593B 3D00000000          <1> 	cmp eax, 0
  7132 00005940 0F8449FFFFFF        <1> 	je near nwcmdst
  7133                              <1> okespthread:
  7134 00005946 89C4                <1> 	mov esp, eax
  7135 00005948 B020                <1> 	mov al, 0x20
  7136 0000594A E620                <1> 	out 0x20, al
  7137 0000594C 61                  <1> 	popad
  7138 0000594D FB                  <1> 	sti
  7139 0000594E CF                  <1> 	iret
  7140                              <1> 
  7141                              <1> %endif
  7142 0000594F 04000000            <1> 	lastthread dd 4
  7143 00005953 00                  <1> 	threadson db 0
  7144 00005954 00000000            <1> 	currentthread dd 0
  7145                                  %ifdef gui.included
  7146                                      %include "source/gui/gui.asm"
  7147                              <1> guiclear:
  7148 00005958 8B3D[2F4B0000]      <1> 	mov edi, [physbaseptr]
  7149 0000595E 668B15[194B0000]    <1> 	mov dx, [resolutionx]
  7150 00005965 668B0D[1B4B0000]    <1> 	mov cx, [resolutiony]
  7151                              <1> %ifdef gui.background
  7152 0000596C 813D[AB590000]0000- <1> 	cmp dword [backgroundimage], 0
  7153 00005974 0000                <1>
  7154 00005976 7437                <1> 	je guiclear.noback
  7155 00005978 8B35[AB590000]      <1> 		mov esi, [backgroundimage]
  7156                              <1> 	.lp:
  7157                              <1> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  7158                              <1> 		;movdqa [edi], xmm0
  7159                              <1> 		;add esi, 16
  7160                              <1> 		;add edi, 16
  7161                              <1> 		;sub dx, 8
  7162 0000597E 8B06                <1> 		mov eax, [esi]
  7163 00005980 8907                <1> 		mov [edi], eax
  7164 00005982 81C604000000        <1> 		add esi, 4
  7165 00005988 81C704000000        <1> 		add edi, 4
  7166 0000598E 6681EA0200          <1> 		sub dx, 2
  7167 00005993 6681FA0000          <1> 		cmp dx, 0
  7168 00005998 77E4                <1> 		ja .lp
  7169 0000599A 6649                <1> 		dec cx
  7170 0000599C 668B15[194B0000]    <1> 		mov dx, [resolutionx]
  7171 000059A3 6681F90000          <1> 		cmp cx, 0
  7172 000059A8 77D4                <1> 		ja .lp
  7173 000059AA C3                  <1> 		ret
  7174 000059AB 00000000            <1> 	backgroundimage dd 0
  7175                              <1> %endif
  7176                              <1> guiclear.noback:
  7177 000059AF A1[D9590000]        <1> 	mov eax, [background]
  7178                              <1> guiclearloop:
  7179 000059B4 8907                <1> 	mov [edi], eax
  7180 000059B6 81C704000000        <1> 	add edi, 4
  7181 000059BC 6681EA0200          <1> 	sub dx, 2
  7182 000059C1 6681FA0000          <1> 	cmp dx, 0
  7183 000059C6 77EC                <1> 	ja guiclearloop
  7184 000059C8 6649                <1> 	dec cx
  7185 000059CA 668B15[194B0000]    <1> 	mov dx, [resolutionx]
  7186 000059D1 6681F90000          <1> 	cmp cx, 0
  7187 000059D6 77DC                <1> 	ja guiclearloop
  7188 000059D8 C3                  <1> 	ret
  7189                              <1> 
  7190 000059D9 CF7B<rept>          <1> background times 2 dw 0111101111001111b
  7191                              <1> 
  7192                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  7193 000059DD 31C0                <1> 	xor eax, eax
  7194 000059DF 31DB                <1> 	xor ebx, ebx
  7195 000059E1 31C9                <1> 	xor ecx, ecx
  7196 000059E3 31D2                <1> 	xor edx, edx
  7197 000059E5 E813000000          <1> 	call guisetup
  7198                              <1> guiloop:
  7199 000059EA E81BF2FFFF          <1> 	call cursorgui
  7200                              <1> guistart:
  7201 000059EF E887F7FFFF          <1> 	call getkey
  7202 000059F4 C605[0F5B0000]00    <1> 	mov byte [copygui], 0
  7203 000059FB EBF2                <1> 	jmp guistart
  7204                              <1> guisetup:
  7205 000059FD 8B3D[2F4B0000]      <1> 	mov edi, [physbaseptr]
  7206 00005A03 668B15[194B0000]    <1> 	mov dx, [resolutionx]
  7207 00005A0A 668B0D[1B4B0000]    <1> 	mov cx, [resolutiony]
  7208 00005A11 668B1D[D9590000]    <1> 	mov bx, [background]
  7209                              <1> guiclearloop2:
  7210 00005A18 66891F              <1> 	mov [edi], bx
  7211 00005A1B 81C702000000        <1> 	add edi, 2
  7212 00005A21 664A                <1> 	dec dx
  7213 00005A23 6681FA0000          <1> 	cmp dx, 0
  7214 00005A28 0F85EAFFFFFF        <1> 	jne near guiclearloop2
  7215 00005A2E 6649                <1> 	dec cx
  7216 00005A30 668B15[194B0000]    <1> 	mov dx, [resolutionx]
  7217 00005A37 6681F90000          <1> 	cmp cx, 0
  7218 00005A3C 0F85D6FFFFFF        <1> 	jne near guiclearloop2
  7219 00005A42 C605[D4830000]01    <1> 	mov byte [guion], 1
  7220 00005A49 C605[155B0000]00    <1> 	mov byte [mouseselecton], 0
  7221 00005A50 31C0                <1> 	xor eax, eax
  7222 00005A52 31DB                <1> 	xor ebx, ebx
  7223 00005A54 31C9                <1> 	xor ecx, ecx
  7224 00005A56 31D2                <1> 	xor edx, edx
  7225                              <1> 	
  7226 00005A58 BE[0A6E0000]        <1> 	mov esi, pacmsg
  7227 00005A5D 6631C0              <1> 	xor ax, ax
  7228 00005A60 31DB                <1> 	xor ebx, ebx
  7229 00005A62 66B99000            <1> 	mov cx, 144
  7230 00005A66 66BA0400            <1> 	mov dx, 4
  7231 00005A6A E8BB0A0000          <1> 	call showstring
  7232                              <1> 	
  7233 00005A6F BE[326F0000]        <1> 	mov esi, interneticon
  7234 00005A74 6631C0              <1> 	xor ax, ax
  7235 00005A77 BB[696E0000]        <1> 	mov ebx, noie
  7236 00005A7C 66B91800            <1> 	mov cx, 24
  7237 00005A80 66BA0400            <1> 	mov dx, 4
  7238 00005A84 E8F60F0000          <1> 	call showicon
  7239                              <1> 	
  7240 00005A89 BE[B46F0000]        <1> 	mov esi, wordicon
  7241 00005A8E 6631C0              <1> 	xor ax, ax
  7242 00005A91 31DB                <1> 	xor ebx, ebx
  7243 00005A93 66B91800            <1> 	mov cx, 24
  7244 00005A97 66BA3000            <1> 	mov dx, 48
  7245 00005A9B E8DF0F0000          <1> 	call showicon
  7246                              <1> 	
  7247 00005AA0 BE[36700000]        <1> 	mov esi, pacmanpellet
  7248 00005AA5 6631C0              <1> 	xor ax, ax
  7249 00005AA8 31DB                <1> 	xor ebx, ebx
  7250 00005AAA 66B94000            <1> 	mov cx, 64
  7251 00005AAE 66BA0400            <1> 	mov dx, 4
  7252 00005AB2 E8C80F0000          <1> 	call showicon
  7253                              <1> 	
  7254 00005AB7 BE[3A710000]        <1> 	mov esi, pacman
  7255 00005ABC 6631C0              <1> 	xor ax, ax
  7256 00005ABF BB[526E0000]        <1> 	mov ebx, pacmannomnom
  7257 00005AC4 66B94000            <1> 	mov cx, 64
  7258 00005AC8 66BA3000            <1> 	mov dx, 48
  7259 00005ACC E8AE0F0000          <1> 	call showicon
  7260                              <1> 	
  7261 00005AD1 BE[B8700000]        <1> 	mov esi, ghostie
  7262 00005AD6 6631C0              <1> 	xor ax, ax
  7263 00005AD9 BB[3B6E0000]        <1> 	mov ebx, boo
  7264 00005ADE 66B96C00            <1> 	mov cx, 108
  7265 00005AE2 66BA0400            <1> 	mov dx, 4
  7266 00005AE6 E8940F0000          <1> 	call showicon
  7267                              <1> 
  7268 00005AEB BE[EC6D0000]        <1> 	mov esi, start
  7269 00005AF0 668B0D[1B4B0000]    <1> 	mov cx, [resolutiony]
  7270 00005AF7 6681E91000          <1> 	sub cx, 16
  7271 00005AFC 66BA0200            <1> 	mov dx, 2
  7272 00005B00 30E4                <1> 	xor ah, ah
  7273 00005B02 B010                <1> 	mov al, 00010000b
  7274 00005B04 BB[E46E0000]        <1> 	mov ebx, winblows
  7275 00005B09 E81C0A0000          <1> 	call showstring
  7276 00005B0E C3                  <1> 	ret
  7277                              <1> 	
  7278                              <1> ;guicopy:	;;for double buffering
  7279                              <1> ;	mov byte [copygui], 1
  7280                              <1> ;	mov edi, [offscreenmemoffset]
  7281                              <1> ;	xor edx, edx
  7282                              <1> ;	xor ecx, ecx
  7283                              <1> ;	mov dx, [mousecursorposition]
  7284                              <1> ;	mov cx, [mousecursorposition + 2]
  7285                              <1> ;	add edi, edx
  7286                              <1> ;	mov dx, [resolutionx2]
  7287                              <1> ;	inc cx
  7288                              <1> ;guicp2:
  7289                              <1> ;	add edi, edx
  7290                              <1> ;	dec cx
  7291                              <1> ;	cmp cx, 0
  7292                              <1> ;	jne guicp2
  7293                              <1> ;	sub edi, edx
  7294                              <1> ;	mov [cursorloc], edi
  7295                              <1> ;	mov ebx, cursorbmp
  7296                              <1> ;	mov cx, [resolutiony]
  7297                              <1> ;	rol ecx, 16
  7298                              <1> ;	mov cx, [resolutionx]
  7299                              <1> ;	mov esi, [physbaseptr]
  7300                              <1> ;	mov edi, [offscreenmemoffset]
  7301                              <1> ;guicp1:
  7302                              <1> ;	mov ax, [esi]
  7303                              <1> ;	mov [edi], ax
  7304                              <1> ;	add esi, 2
  7305                              <1> ;	add edi, 2
  7306                              <1> ;	cmp edi, [cursorloc]
  7307                              <1> ;	je copycursor
  7308                              <1> ;dncopycursor:
  7309                              <1> ;	dec cx
  7310                              <1> ;	cmp cx, 0
  7311                              <1> ;	jne guicp1
  7312                              <1> ;	mov cx, [resolutionx]
  7313                              <1> ;	rol ecx, 16
  7314                              <1> ;	dec cx
  7315                              <1> ;	cmp cx, 0
  7316                              <1> ;	rol ecx, 16
  7317                              <1> ;	jne guicp1
  7318                              <1> ;	mov byte [copygui], 0
  7319                              <1> ;	ret
  7320                              <1> ;copycursor:
  7321                              <1> ;	cmp ebx, cursorbmpend
  7322                              <1> ;	jae dncopycursor
  7323                              <1> ;	mov dx, [resolutionx2]
  7324                              <1> ;	add edi, edx
  7325                              <1> ;	mov [cursorloc], edi
  7326                              <1> ;	sub edi, edx
  7327                              <1> ;	dec ebx
  7328                              <1> ;	sub edi, 2
  7329                              <1> ;	sub esi, 2
  7330                              <1> ;	mov dx, 9
  7331                              <1> ;curscplp:
  7332                              <1> ;	inc ebx
  7333                              <1> ;	add esi, 2
  7334                              <1> ;	add edi, 2
  7335                              <1> ;	mov ax, [esi]
  7336                              <1> ;	mov [edi], ax
  7337                              <1> ;	mov al, [ebx]
  7338                              <1> ;	cmp al, 0
  7339                              <1> ;	je curscplp2
  7340                              <1> ;	mov word [edi], 1110011110011100b
  7341                              <1> ;curscplp2:
  7342                              <1> ;	dec cx
  7343                              <1> ;	cmp cx, 0
  7344                              <1> ;	je dncopycursor
  7345                              <1> ;	dec dx
  7346                              <1> ;	cmp dx, 0
  7347                              <1> ;	jne curscplp
  7348                              <1> ;	jmp dncopycursor
  7349                              <1> 	
  7350                              <1> 	
  7351                              <1> ;cursorloc: dd 0
  7352                              <1> 				
  7353 00005B0F 00                  <1> copygui db 0
  7354 00005B10 00                  <1> graphicsset db 0
  7355 00005B11 0000                <1> graphicspos db 0,0
  7356 00005B13 00                  <1> showcursorfonton db 0
  7357 00005B14 00                  <1> savefonton db 0
  7358 00005B15 00                  <1> mouseselecton db 0
  7359                              <1> 
  7360                              <1> 		
  7361                              <1> clearmousecursor:
  7362 00005B16 BE[D9590000]        <1> 		mov esi, background
  7363 00005B1B 8B3D[2F4B0000]      <1> 		mov edi, [physbaseptr]
  7364 00005B21 31D2                <1> 		xor edx, edx
  7365 00005B23 31C9                <1> 		xor ecx, ecx
  7366 00005B25 668B15[F44D0000]    <1> 		mov dx, [lastmouseposition]
  7367 00005B2C 668B0D[F64D0000]    <1> 		mov cx, [lastmouseposition + 2]
  7368 00005B33 01D7                <1> 		add edi, edx
  7369 00005B35 31D2                <1> 		xor edx, edx
  7370 00005B37 668B15[074C0000]    <1> 		mov dx, [resolutionx2]
  7371 00005B3E 6681F90000          <1> 		cmp cx, 0
  7372 00005B43 744F                <1> 		je .noyclr
  7373 00005B45 01D7                <1> .yclr:	add edi, edx
  7374 00005B47 6649                <1> 		dec cx
  7375 00005B49 6681F90000          <1> 		cmp cx, 0
  7376 00005B4E 75F5                <1> 		jne .yclr
  7377                              <1> %ifdef gui.background
  7378 00005B50 813D[AB590000]0000- <1> 		cmp dword [backgroundimage], 0
  7379 00005B58 0000                <1>
  7380 00005B5A 7438                <1> 		je .noyclr
  7381 00005B5C 8B35[AB590000]      <1> 		mov esi, [backgroundimage]
  7382 00005B62 2B3D[2F4B0000]      <1> 		sub edi, [physbaseptr]
  7383 00005B68 01FE                <1> 		add esi, edi
  7384 00005B6A 033D[2F4B0000]      <1> 		add edi, [physbaseptr]
  7385                              <1> .backlp:
  7386 00005B70 31DB                <1> 		xor ebx, ebx
  7387                              <1> .noyback:
  7388 00005B72 8B041E              <1> 		mov eax, [esi + ebx]
  7389 00005B75 89041F              <1> 		mov [edi + ebx], eax
  7390 00005B78 81C304000000        <1> 		add ebx, 4
  7391 00005B7E 81FB10000000        <1> 		cmp ebx, 16
  7392 00005B84 75EC                <1> 		jne .noyback
  7393 00005B86 01D7                <1> 		add edi, edx
  7394 00005B88 01D6                <1> 		add esi, edx
  7395 00005B8A 6641                <1> 		inc cx
  7396 00005B8C 6681F91000          <1> 		cmp cx, 16
  7397 00005B91 72DD                <1> 		jb .backlp
  7398 00005B93 C3                  <1> 		ret
  7399                              <1> %endif
  7400 00005B94 668B06              <1> .noyclr:	mov ax, [esi]
  7401 00005B97 C1C010              <1> 		rol eax, 16
  7402 00005B9A 668B06              <1> 		mov ax, [esi]
  7403 00005B9D 8907                <1> 		mov [edi], eax
  7404 00005B9F 894704              <1> 		mov [edi + 4], eax
  7405 00005BA2 894708              <1> 		mov [edi + 8], eax
  7406 00005BA5 89470C              <1> 		mov [edi + 12], eax
  7407 00005BA8 01D7                <1> 		add edi, edx
  7408 00005BAA 6641                <1> 		inc cx
  7409 00005BAC 6681F91000          <1> 		cmp cx, 16
  7410 00005BB1 72E1                <1> 		jb .noyclr
  7411 00005BB3 C3                  <1> 		ret
  7412                              <1> 
  7413                              <1> switchmousepos:		;;switch were the mouse is located
  7414 00005BB4 BE[AFC02800]        <1> 		mov esi, mousecolorbuf
  7415 00005BB9 8B3D[2F4B0000]      <1> 		mov edi, [physbaseptr]
  7416 00005BBF 31D2                <1> 		xor edx, edx
  7417 00005BC1 31C9                <1> 		xor ecx, ecx
  7418 00005BC3 668B15[F44D0000]    <1> 		mov dx, [lastmouseposition]
  7419 00005BCA 668B0D[F64D0000]    <1> 		mov cx, [lastmouseposition + 2]
  7420 00005BD1 01D7                <1> 		add edi, edx
  7421 00005BD3 31D2                <1> 		xor edx, edx
  7422 00005BD5 668B15[074C0000]    <1> 		mov dx, [resolutionx2]
  7423 00005BDC 6681F90000          <1> 		cmp cx, 0
  7424 00005BE1 740B                <1> 		je noswmsy
  7425 00005BE3 01D7                <1> swmsy:		add edi, edx
  7426 00005BE5 6649                <1> 		dec cx
  7427 00005BE7 6681F90000          <1> 		cmp cx, 0
  7428 00005BEC 75F5                <1> 		jne swmsy
  7429 00005BEE 8B06                <1> noswmsy:	mov eax, [esi]
  7430 00005BF0 8B5E04              <1> 		mov ebx, [esi + 4]
  7431 00005BF3 8907                <1> 		mov [edi], eax
  7432 00005BF5 895F04              <1> 		mov [edi + 4], ebx
  7433 00005BF8 8B4608              <1> 		mov eax, [esi + 8]
  7434 00005BFB 8B5E0C              <1> 		mov ebx, [esi + 12]
  7435 00005BFE 894708              <1> 		mov [edi + 8], eax
  7436 00005C01 895F0C              <1> 		mov [edi + 12], ebx
  7437 00005C04 01D7                <1> 		add edi, edx
  7438 00005C06 81C610000000        <1> 		add esi, 16
  7439 00005C0C 81FE[AFC12800]      <1> 		cmp esi, mcolorend
  7440 00005C12 72DA                <1> 		jb noswmsy
  7441                              <1> 		
  7442                              <1> switchmousepos2:
  7443 00005C14 BE[AFC02800]        <1> 		mov esi, mousecolorbuf
  7444 00005C19 8B3D[2F4B0000]      <1> 		mov edi, [physbaseptr]
  7445 00005C1F 31D2                <1> 		xor edx, edx
  7446 00005C21 31C9                <1> 		xor ecx, ecx
  7447 00005C23 668B15[F84D0000]    <1> 		mov dx, [mousecursorposition]
  7448 00005C2A 668B0D[FA4D0000]    <1> 		mov cx, [mousecursorposition + 2]
  7449 00005C31 01D7                <1> 		add edi, edx
  7450 00005C33 31D2                <1> 		xor edx, edx
  7451 00005C35 668B15[074C0000]    <1> 		mov dx, [resolutionx2]
  7452 00005C3C 6681F90000          <1> 		cmp cx, 0
  7453 00005C41 740B                <1> 		je noswmsy2
  7454 00005C43 01D7                <1> swmsy2:		add edi, edx
  7455 00005C45 6649                <1> 		dec cx
  7456 00005C47 6681F90000          <1> 		cmp cx, 0
  7457 00005C4C 75F5                <1> 		jne swmsy2
  7458 00005C4E 8B07                <1> noswmsy2:	mov eax, [edi]
  7459 00005C50 8B5F04              <1> 		mov ebx, [edi + 4]
  7460 00005C53 8906                <1> 		mov [esi], eax
  7461 00005C55 895E04              <1> 		mov [esi + 4], ebx
  7462 00005C58 8B4708              <1> 		mov eax, [edi + 8]
  7463 00005C5B 8B5F0C              <1> 		mov ebx, [edi + 12]
  7464 00005C5E 894608              <1> 		mov [esi + 8], eax
  7465 00005C61 895E0C              <1> 		mov [esi + 12], ebx
  7466 00005C64 01D7                <1> 		add edi, edx
  7467 00005C66 81C610000000        <1> 		add esi, 16
  7468 00005C6C 81FE[AFC12800]      <1> 		cmp esi, mcolorend
  7469 00005C72 72DA                <1> 		jb noswmsy2
  7470 00005C74 C3                  <1> 		ret
  7471                              <1> 
  7472 00005C75 00                  <1> pbutton db 0
  7473 00005C76 00                  <1> pLBUTTON db 0
  7474 00005C77 00                  <1> pRBUTTON db 0
  7475 00005C78 00000000            <1> dragging dw 0,0
  7476 00005C7C 0000000000000000    <1> lastpos dw 0,0,0,0
  7477 00005C84 00000000            <1> colorbuf dw 0,0
  7478                              <1> 	
  7479                              <1> 	clickicon:
  7480 00005C88 B001                <1> 		mov al, 1
  7481 00005C8A A2[755C0000]        <1> 		mov [pbutton], al
  7482 00005C8F A0[765C0000]        <1> 		mov al, [pLBUTTON]
  7483 00005C94 2205[094F0000]      <1> 		and al, [LBUTTON]
  7484 00005C9A 8A25[775C0000]      <1> 		mov ah, [pRBUTTON]
  7485 00005CA0 2225[0A4F0000]      <1> 		and ah, [RBUTTON]
  7486 00005CA6 08E0                <1> 		or al, ah
  7487 00005CA8 3C00                <1> 		cmp al, 0
  7488 00005CAA 741B                <1> 		je nodragclick
  7489 00005CAC 813D[785C0000]0100- <1> 		cmp dword [dragging], 1
  7490 00005CB4 0000                <1>
  7491 00005CB6 732D                <1> 		jae dragclick
  7492 00005CB8 C705[785C0000]0100- <1> 		mov dword [dragging], 1
  7493 00005CC0 0000                <1>
  7494 00005CC2 E91E000000          <1> 		jmp dragclick
  7495                              <1> 	nodragclick:
  7496 00005CC7 C705[785C0000]0000- <1> 		mov dword [dragging], 0
  7497 00005CCF 0000                <1>
  7498 00005CD1 A0[094F0000]        <1> 		mov al, [LBUTTON]
  7499 00005CD6 A2[765C0000]        <1> 		mov [pLBUTTON], al
  7500 00005CDB A0[0A4F0000]        <1> 		mov al, [RBUTTON]
  7501 00005CE0 A2[775C0000]        <1> 		mov [pRBUTTON], al
  7502                              <1> 	dragclick:
  7503 00005CE5 6631C0              <1> 		xor ax, ax
  7504 00005CE8 BE[AFB40000]        <1> 		mov esi, graphicstable
  7505 00005CED C705[366E0000]0000- <1> 		mov dword [codepointer], 0
  7506 00005CF5 0000                <1>
  7507                              <1> 	clicon2:
  7508 00005CF7 31D2                <1> 		xor edx, edx
  7509 00005CF9 31C9                <1> 		xor ecx, ecx
  7510 00005CFB 66813E0100          <1> 		cmp word [esi], 1
  7511 00005D00 0F841B000000        <1> 		je near iconselect
  7512 00005D06 66813E0200          <1> 		cmp word [esi], 2
  7513 00005D0B 0F8472010000        <1> 		je near textselected
  7514 00005D11 66813E0300          <1> 		cmp word [esi], 3
  7515 00005D16 0F84C7020000        <1> 		je near windowselect
  7516 00005D1C E901040000          <1> 		jmp nexticonsel
  7517                              <1> 	iconselect:
  7518 00005D21 668B5606            <1> 		mov dx, [esi + 6]
  7519 00005D25 6689D0              <1> 		mov ax, dx
  7520 00005D28 668B4E08            <1> 		mov cx, [esi + 8]
  7521 00005D2C 6689CB              <1> 		mov bx, cx
  7522 00005D2F 6681C32000          <1> 		add bx, 32
  7523 00005D34 6601D0              <1> 		add ax, dx
  7524 00005D37 813D[785C0000]0100- <1> 		cmp dword [dragging], 1
  7525 00005D3F 0000                <1>
  7526 00005D41 746F                <1> 		je dragicon
  7527 00005D43 813D[785C0000]0000- <1> 		cmp dword [dragging], 0
  7528 00005D4B 0000                <1>
  7529 00005D4D 7411                <1> 		je nodragiconcheck
  7530 00005D4F 3935[785C0000]      <1> 		cmp dword [dragging], esi
  7531 00005D55 0F85C7030000        <1> 		jne near nexticonsel
  7532 00005D5B E952000000          <1> 		jmp dragicon
  7533                              <1> 	nodragiconcheck:
  7534 00005D60 663905[F84D0000]    <1> 		cmp [mousecursorposition], ax
  7535 00005D67 0F82B5030000        <1> 		jb near nexticonsel
  7536 00005D6D 66054000            <1> 		add ax, 64
  7537 00005D71 663905[F84D0000]    <1> 		cmp [mousecursorposition], ax
  7538 00005D78 0F87A4030000        <1> 		ja near nexticonsel
  7539 00005D7E 6629D0              <1> 		sub ax, dx
  7540 00005D81 66390D[FA4D0000]    <1> 		cmp [mousecursorposition + 2], cx
  7541 00005D88 0F8294030000        <1> 		jb near nexticonsel
  7542 00005D8E 66391D[FA4D0000]    <1> 		cmp [mousecursorposition + 2], bx
  7543 00005D95 0F8787030000        <1> 		ja near nexticonsel
  7544 00005D9B 668B460A            <1> 		mov ax, [esi + 10]
  7545 00005D9F 66250100            <1> 		and ax, 1
  7546 00005DA3 663D0100            <1> 		cmp ax, 1
  7547 00005DA7 0F84B6000000        <1> 		je near unselecticon
  7548 00005DAD E98D000000          <1> 		jmp nodragicon
  7549                              <1> 	dragicon:
  7550 00005DB2 663905[F44D0000]    <1> 		cmp [lastmouseposition], ax
  7551 00005DB9 0F8263030000        <1> 		jb near nexticonsel
  7552 00005DBF 66054000            <1> 		add ax, 64
  7553 00005DC3 663905[F44D0000]    <1> 		cmp [lastmouseposition], ax
  7554 00005DCA 0F8752030000        <1> 		ja near nexticonsel
  7555 00005DD0 6629D0              <1> 		sub ax, dx
  7556 00005DD3 66390D[F64D0000]    <1> 		cmp [lastmouseposition + 2], cx
  7557 00005DDA 0F8242030000        <1> 		jb near nexticonsel
  7558 00005DE0 66391D[F64D0000]    <1> 		cmp [lastmouseposition + 2], bx
  7559 00005DE7 0F8735030000        <1> 		ja near nexticonsel
  7560 00005DED 668B460A            <1> 		mov ax, [esi + 10]
  7561 00005DF1 2410                <1> 		and al, 00010000b
  7562 00005DF3 3C10                <1> 		cmp al, 00010000b
  7563 00005DF5 7448                <1> 		je nodragicon
  7564 00005DF7 8935[785C0000]      <1> 		mov [dragging], esi
  7565 00005DFD 66D1E2              <1> 		shl dx, 1
  7566 00005E00 662B15[F44D0000]    <1> 		sub dx, [lastmouseposition]
  7567 00005E07 660315[F84D0000]    <1> 		add dx, [mousecursorposition]
  7568 00005E0E 66D1EA              <1> 		shr dx, 1
  7569 00005E11 66030D[FA4D0000]    <1> 		add cx, [mousecursorposition + 2]
  7570 00005E18 662B0D[F64D0000]    <1> 		sub cx, [lastmouseposition + 2]
  7571 00005E1F 663B15[074C0000]    <1> 		cmp dx, [resolutionx2]
  7572 00005E26 7607                <1> 		jbe chkyresdrgicn
  7573 00005E28 668B15[F84D0000]    <1> 		mov dx, [mousecursorposition]
  7574                              <1> 	chkyresdrgicn:
  7575 00005E2F 663B0D[1B4B0000]    <1> 		cmp cx, [resolutiony]
  7576 00005E36 7607                <1> 		jbe nodragicon
  7577 00005E38 668B0D[FA4D0000]    <1> 		mov cx, [mousecursorposition + 2]
  7578                              <1> 	nodragicon:
  7579 00005E3F 66814E0A0100        <1> 		or word [esi + 10], 1
  7580 00005E45 8B5E0C              <1> 		mov ebx, [esi + 12]
  7581 00005E48 668B460A            <1> 		mov ax, [esi + 10]
  7582 00005E4C 8B7602              <1> 		mov esi, [esi + 2]
  7583 00005E4F C705[366E0000]0000- <1> 		mov dword [codepointer], 0
  7584 00005E57 0000                <1>
  7585 00005E59 E8210C0000          <1> 		call showicon
  7586 00005E5E E9D8020000          <1> 		jmp doneiconsel
  7587                              <1> 	unselecticon:
  7588 00005E63 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  7589 00005E69 8B5E0C              <1> 		mov ebx, [esi + 12]
  7590 00005E6C 668B460A            <1> 		mov ax, [esi + 10]
  7591 00005E70 8B7602              <1> 		mov esi, [esi + 2]
  7592 00005E73 891D[366E0000]      <1> 		mov [codepointer], ebx
  7593 00005E79 E8010C0000          <1> 		call showicon
  7594 00005E7E E9B8020000          <1> 		jmp doneiconsel
  7595                              <1> 	textselected:
  7596 00005E83 8B5E02              <1> 		mov ebx, [esi + 2]
  7597 00005E86 668B5606            <1> 		mov dx, [esi + 6]
  7598 00005E8A 6689D0              <1> 		mov ax, dx
  7599 00005E8D 668B4E08            <1> 		mov cx, [esi + 8]
  7600                              <1> 	lengthtesttext:
  7601 00005E91 803B00              <1> 		cmp byte [ebx], 0
  7602 00005E94 7407                <1> 		je donetesttextlength
  7603 00005E96 43                  <1> 		inc ebx
  7604 00005E97 66051000            <1> 		add ax, 16
  7605 00005E9B EBF4                <1> 		jmp lengthtesttext
  7606                              <1> 	donetesttextlength:
  7607 00005E9D 6689CB              <1> 		mov bx, cx
  7608 00005EA0 6681C30F00          <1> 		add bx, 15
  7609 00005EA5 813D[785C0000]0100- <1> 		cmp dword [dragging], 1
  7610 00005EAD 0000                <1>
  7611 00005EAF 7468                <1> 		je dragtext
  7612 00005EB1 813D[785C0000]0000- <1> 		cmp dword [dragging], 0
  7613 00005EB9 0000                <1>
  7614 00005EBB 7411                <1> 		je nodragtextcheck
  7615 00005EBD 3935[785C0000]      <1> 		cmp dword [dragging], esi
  7616 00005EC3 0F8559020000        <1> 		jne near nexticonsel
  7617 00005EC9 E94B000000          <1> 		jmp dragtext
  7618                              <1> 	nodragtextcheck:
  7619 00005ECE 663915[F84D0000]    <1> 		cmp [mousecursorposition], dx
  7620 00005ED5 0F8247020000        <1> 		jb near nexticonsel
  7621 00005EDB 663905[F84D0000]    <1> 		cmp [mousecursorposition], ax
  7622 00005EE2 0F873A020000        <1> 		ja near nexticonsel
  7623 00005EE8 66390D[FA4D0000]    <1> 		cmp [mousecursorposition + 2], cx
  7624 00005EEF 0F822D020000        <1> 		jb near nexticonsel
  7625 00005EF5 66391D[FA4D0000]    <1> 		cmp [mousecursorposition + 2], bx
  7626 00005EFC 0F8720020000        <1> 		ja near nexticonsel
  7627 00005F02 668B460A            <1> 		mov ax, [esi + 10]
  7628 00005F06 66250100            <1> 		and ax, 1
  7629 00005F0A 663D0100            <1> 		cmp ax, 1
  7630 00005F0E 0F84AB000000        <1> 		je near unselecttext
  7631 00005F14 E986000000          <1> 		jmp nodragtext
  7632                              <1> 	dragtext:
  7633 00005F19 663915[F44D0000]    <1> 		cmp [lastmouseposition], dx
  7634 00005F20 0F82FC010000        <1> 		jb near nexticonsel
  7635 00005F26 663905[F44D0000]    <1> 		cmp [lastmouseposition], ax
  7636 00005F2D 0F87EF010000        <1> 		ja near nexticonsel
  7637 00005F33 66390D[F64D0000]    <1> 		cmp [lastmouseposition + 2], cx
  7638 00005F3A 0F82E2010000        <1> 		jb near nexticonsel
  7639 00005F40 66391D[F64D0000]    <1> 		cmp [lastmouseposition + 2], bx
  7640 00005F47 0F87D5010000        <1> 		ja near nexticonsel
  7641 00005F4D 668B460A            <1> 		mov ax, [esi + 10]
  7642 00005F51 2410                <1> 		and al, 00010000b
  7643 00005F53 663D1000            <1> 		cmp ax, 00010000b
  7644 00005F57 0F8442000000        <1> 		je near nodragtext
  7645 00005F5D 8935[785C0000]      <1> 		mov [dragging], esi
  7646 00005F63 662B15[F44D0000]    <1> 		sub dx, [lastmouseposition]
  7647 00005F6A 660315[F84D0000]    <1> 		add dx, [mousecursorposition]
  7648 00005F71 66030D[FA4D0000]    <1> 		add cx, [mousecursorposition + 2]
  7649 00005F78 662B0D[F64D0000]    <1> 		sub cx, [lastmouseposition + 2]
  7650 00005F7F 663B15[074C0000]    <1> 		cmp dx, [resolutionx2]
  7651 00005F86 7607                <1> 		jbe chkyresdrgtxt
  7652 00005F88 668B15[F84D0000]    <1> 		mov dx, [mousecursorposition]
  7653                              <1> 	chkyresdrgtxt:
  7654 00005F8F 663B0D[1B4B0000]    <1> 		cmp cx, [resolutiony]
  7655 00005F96 7607                <1> 		jbe nodragtext
  7656 00005F98 668B0D[FA4D0000]    <1> 		mov cx, [mousecursorposition + 2]
  7657                              <1> 	nodragtext:
  7658 00005F9F 66814E0A0100        <1> 		or word [esi + 10], 1
  7659 00005FA5 8B5E0C              <1> 		mov ebx, [esi + 12]
  7660 00005FA8 891D[366E0000]      <1> 		mov [codepointer], ebx
  7661 00005FAE 668B460A            <1> 		mov ax, [esi + 10]
  7662 00005FB2 8B7602              <1> 		mov esi, [esi + 2]
  7663 00005FB5 E870050000          <1> 		call showstring
  7664 00005FBA E97C010000          <1> 		jmp doneiconsel
  7665                              <1> 	unselecttext:
  7666 00005FBF 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  7667 00005FC5 8B5E0C              <1> 		mov ebx, [esi + 12]
  7668 00005FC8 668B460A            <1> 		mov ax, [esi + 10]
  7669 00005FCC 8B7602              <1> 		mov esi, [esi + 2]
  7670 00005FCF C705[366E0000]0000- <1> 		mov dword [codepointer], 0
  7671 00005FD7 0000                <1>
  7672 00005FD9 E84C050000          <1> 		call showstring
  7673 00005FDE E958010000          <1> 		jmp doneiconsel
  7674                              <1> windowselect:
  7675 00005FE3 8B7E02              <1> 		mov edi, [esi + 2]
  7676 00005FE6 668B5606            <1> 		mov dx, [esi + 6]
  7677 00005FEA 6689D0              <1> 		mov ax, dx
  7678 00005FED 668B4E08            <1> 		mov cx, [esi + 8]
  7679 00005FF1 6689CB              <1> 		mov bx, cx
  7680 00005FF4 6681C31000          <1> 		add bx, 16
  7681 00005FF9 813D[785C0000]0100- <1> 		cmp dword [dragging], 1
  7682 00006001 0000                <1>
  7683 00006003 746D                <1> 		je dragwin
  7684 00006005 813D[785C0000]0000- <1> 		cmp dword [dragging], 0
  7685 0000600D 0000                <1>
  7686 0000600F 7411                <1> 		je nodragwincheck
  7687 00006011 3935[785C0000]      <1> 		cmp dword [dragging], esi
  7688 00006017 0F8505010000        <1> 		jne near nexticonsel
  7689 0000601D E950000000          <1> 		jmp dragwin
  7690                              <1> 	nodragwincheck:
  7691 00006022 663905[F84D0000]    <1> 		cmp [mousecursorposition], ax
  7692 00006029 0F82F3000000        <1> 		jb near nexticonsel
  7693 0000602F 660307              <1> 		add ax, [edi]
  7694 00006032 660307              <1> 		add ax, [edi]
  7695 00006035 663905[F84D0000]    <1> 		cmp [mousecursorposition], ax
  7696 0000603C 0F87E0000000        <1> 		ja near nexticonsel
  7697 00006042 66390D[FA4D0000]    <1> 		cmp [mousecursorposition + 2], cx
  7698 00006049 0F82D3000000        <1> 		jb near nexticonsel
  7699 0000604F 66391D[FA4D0000]    <1> 		cmp [mousecursorposition + 2], bx
  7700 00006056 0F87C6000000        <1> 		ja near nexticonsel
  7701 0000605C 662D1400            <1> 		sub ax, 20
  7702 00006060 663905[F84D0000]    <1> 		cmp [mousecursorposition], ax
  7703 00006067 0F8795000000        <1> 		ja near killwin
  7704 0000606D E97C000000          <1> 		jmp nodragwin
  7705                              <1> 	dragwin:
  7706 00006072 663905[F44D0000]    <1> 		cmp [lastmouseposition], ax
  7707 00006079 0F82A3000000        <1> 		jb near nexticonsel
  7708 0000607F 660307              <1> 		add ax, [edi]
  7709 00006082 660307              <1> 		add ax, [edi]
  7710 00006085 663905[F44D0000]    <1> 		cmp [lastmouseposition], ax
  7711 0000608C 0F8790000000        <1> 		ja near nexticonsel
  7712 00006092 66390D[F64D0000]    <1> 		cmp [lastmouseposition + 2], cx
  7713 00006099 0F8283000000        <1> 		jb near nexticonsel
  7714 0000609F 66391D[F64D0000]    <1> 		cmp [lastmouseposition + 2], bx
  7715 000060A6 0F8776000000        <1> 		ja near nexticonsel
  7716 000060AC 8935[785C0000]      <1> 		mov [dragging], esi
  7717 000060B2 662B15[F44D0000]    <1> 		sub dx, [lastmouseposition]
  7718 000060B9 660315[F84D0000]    <1> 		add dx, [mousecursorposition]
  7719 000060C0 66030D[FA4D0000]    <1> 		add cx, [mousecursorposition + 2]
  7720 000060C7 662B0D[F64D0000]    <1> 		sub cx, [lastmouseposition + 2]
  7721 000060CE 663B15[074C0000]    <1> 		cmp dx, [resolutionx2]
  7722 000060D5 7607                <1> 		jbe chkyresdrgwin
  7723 000060D7 668B15[F84D0000]    <1> 		mov dx, [mousecursorposition]
  7724                              <1> 	chkyresdrgwin:
  7725 000060DE 663B0D[1B4B0000]    <1> 		cmp cx, [resolutiony]
  7726 000060E5 7607                <1> 		jbe nodragwin
  7727 000060E7 668B0D[FA4D0000]    <1> 		mov cx, [mousecursorposition + 2]
  7728                              <1> 	nodragwin:
  7729 000060EE 8B5E0C              <1> 		mov ebx, [esi + 12]
  7730 000060F1 668B460A            <1> 		mov ax, [esi + 10]
  7731 000060F5 8B7602              <1> 		mov esi, [esi + 2]
  7732 000060F8 E895040000          <1> 		call showwindow
  7733 000060FD E939000000          <1> 		jmp doneiconsel
  7734                              <1> 	killwin:
  7735 00006102 66C7060000          <1> 		mov word [esi], 0
  7736 00006107 C605[B1210000]00    <1> 		mov byte [termguion], 0
  7737 0000610E E845F8FFFF          <1> 		call guiclear
  7738 00006113 E8A7000000          <1> 		call reloadallgraphics
  7739 00006118 E9D2F8FFFF          <1> 		jmp guistart
  7740 0000611D E93A000000          <1> 		jmp doneiconsel2
  7741                              <1> 	nexticonsel:
  7742 00006122 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  7743 00006128 81C610000000        <1> 		add esi, 16
  7744 0000612E 81FE[AFB60000]      <1> 		cmp esi, graphicstableend
  7745 00006134 7305                <1> 		jae doneiconsel
  7746 00006136 E9BCFBFFFF          <1> 		jmp clicon2
  7747                              <1> 	doneiconsel:
  7748 0000613B 813D[785C0000]0100- <1> 		cmp dword [dragging], 1
  7749 00006143 0000                <1>
  7750 00006145 7315                <1> 		jae doneiconsel2
  7751 00006147 813D[366E0000]0000- <1> 		cmp dword [codepointer], 0
  7752 0000614F 0000                <1>
  7753 00006151 7409                <1> 		je doneiconsel2
  7754 00006153 8B1D[366E0000]      <1> 		mov ebx, [codepointer]
  7755 00006159 FFD3                <1> 		call ebx
  7756 0000615B C3                  <1> 		ret
  7757                              <1> 	doneiconsel2:
  7758 0000615C A0[094F0000]        <1> 		mov al, [LBUTTON]
  7759 00006161 A2[765C0000]        <1> 		mov [pLBUTTON], al
  7760 00006166 A0[0A4F0000]        <1> 		mov al, [RBUTTON]
  7761 0000616B A2[775C0000]        <1> 		mov [pRBUTTON], al
  7762 00006170 66813D[785C0000]01- <1> 		cmp word [dragging], 1
  7763 00006178 00                  <1>
  7764 00006179 0F860A000000        <1> 		jbe near noreloadgraphicsclick
  7765 0000617F E892F9FFFF          <1> call clearmousecursor
  7766 00006184 E836000000          <1> call reloadallgraphics
  7767                              <1> noreloadgraphicsclick:
  7768 00006189 31C9                <1> 		xor ecx, ecx
  7769 0000618B 31D2                <1> 		xor edx, edx
  7770 0000618D 30E4                <1> 		xor ah, ah
  7771 0000618F B0FE                <1> 		mov al, 254
  7772 00006191 668B15[F84D0000]    <1> 		mov dx, [mousecursorposition]
  7773 00006198 668B0D[FA4D0000]    <1> 		mov cx, [mousecursorposition + 2]
  7774 0000619F 66BBE738            <1> 		mov bx, 0011100011100111b
  7775 000061A3 C605[135B0000]01    <1> 		mov byte [showcursorfonton], 1
  7776 000061AA E8AA090000          <1> 		call showfontvesa
  7777 000061AF C605[135B0000]00    <1> 		mov byte [showcursorfonton], 0
  7778 000061B6 C3                  <1> 		ret
  7779 000061B7 00000000            <1> lastdrag dw 0,0
  7780 000061BB 00000000            <1> grpctblpos dw 0,0
  7781                              <1> 
  7782                              <1> reloadallgraphics:
  7783 000061BF BF[AFB40000]        <1> 		mov edi, graphicstable
  7784                              <1> reloadgraphicsloop:
  7785 000061C4 8B7702              <1> 		mov esi, [edi + 2]
  7786 000061C7 668B5706            <1> 		mov dx, [edi + 6]
  7787 000061CB 668B4F08            <1> 		mov cx, [edi + 8]
  7788 000061CF 668B07              <1> 		mov ax, [edi]
  7789 000061D2 668B5F0A            <1> 		mov bx, [edi + 10]
  7790 000061D6 893D[BB610000]      <1> 		mov [grpctblpos], edi
  7791 000061DC 3B3D[785C0000]      <1> 		cmp edi, [dragging]
  7792 000061E2 741E                <1> 		je loadedgraphic
  7793 000061E4 663D0100            <1> 		cmp ax, 1
  7794 000061E8 0F8436000000        <1> 		je near icongraphic
  7795 000061EE 663D0200            <1> 		cmp ax, 2
  7796 000061F2 0F843C000000        <1> 		je near stringgraphic
  7797 000061F8 663D0300            <1> 		cmp ax, 3
  7798 000061FC 0F8416000000        <1> 		je near windowgraphic
  7799 00006202 8B3D[BB610000]      <1> loadedgraphic:  mov edi, [grpctblpos]
  7800 00006208 81C710000000        <1> 		add edi, 16
  7801 0000620E 81FF[AFB60000]      <1> 		cmp edi, graphicstableend
  7802 00006214 732E                <1> 		jae donereloadgraphics
  7803 00006216 EBAC                <1> 		jmp reloadgraphicsloop
  7804 00006218 E81D040000          <1> windowgraphic:	call showwindow2
  7805 0000621D E864BBFFFF          <1> 		call cleardouble
  7806 00006222 EBDE                <1> 		jmp loadedgraphic
  7807 00006224 80E301              <1> icongraphic:	and bl, 1
  7808 00006227 881D[3A6E0000]      <1> 		mov [iconselected], bl
  7809 0000622D E860080000          <1> 		call showicon2
  7810 00006232 EBCE                <1> 		jmp loadedgraphic
  7811 00006234 80E301              <1> stringgraphic:  and bl, 1
  7812 00006237 881D[155B0000]      <1> 		mov [mouseselecton], bl
  7813 0000623D E8FB020000          <1> 		call showstring2
  7814 00006242 EBBE                <1> 		jmp loadedgraphic
  7815                              <1> donereloadgraphics:
  7816 00006244 8B3D[785C0000]      <1> 		mov edi, [dragging]
  7817 0000624A 81FF[AFB40000]      <1> 		cmp edi, graphicstable
  7818 00006250 7226                <1> 		jb notcorrectdrag
  7819 00006252 668B07              <1> 		mov ax, [edi]
  7820 00006255 8B7702              <1> 		mov esi, [edi + 2]
  7821 00006258 668B5706            <1> 		mov dx, [edi + 6]
  7822 0000625C 668B4F08            <1> 		mov cx, [edi + 8]
  7823 00006260 668B5F0A            <1> 		mov bx, [edi + 10]
  7824 00006264 663D0100            <1> 		cmp ax, 1
  7825 00006268 750F                <1> 		jne noticondragging
  7826 0000626A 80E301              <1> 		and bl, 1
  7827 0000626D 881D[3A6E0000]      <1> 		mov [iconselected], bl
  7828 00006273 E81A080000          <1> 		call showicon2
  7829                              <1> notcorrectdrag:
  7830 00006278 C3                  <1> 		ret
  7831                              <1> 
  7832                              <1> 	noticondragging:
  7833 00006279 663D0200            <1> 		cmp ax, 2
  7834 0000627D 75F9                <1> 		jne notcorrectdrag
  7835 0000627F 80E301              <1> 		and bl, 1
  7836 00006282 881D[155B0000]      <1> 		mov [mouseselecton], bl
  7837 00006288 E8B0020000          <1> 		call showstring2
  7838 0000628D EBE9                <1> 		jmp notcorrectdrag
  7839                              <1> 
  7840 0000628F 00<rept>            <1> grphbuf times 16 db 0
  7841                              <1> 	graphicsadd:
  7842 0000629F BF[AFB40000]        <1> 		mov edi, graphicstable
  7843                              <1> 	shwgrph1:
  7844 000062A4 397702              <1> 		cmp dword [edi + 2], esi
  7845 000062A7 7414                <1> 		je showgraphicsreplace2
  7846 000062A9 81C710000000        <1> 		add edi, 16
  7847 000062AF 81FF[AFB60000]      <1> 		cmp edi, graphicstableend
  7848 000062B5 0F8354020000        <1> 		jae near showgraphicsnew
  7849 000062BB EBE7                <1> 		jmp shwgrph1
  7850                              <1> 	showgraphicsreplace2:
  7851 000062BD 8935[91620000]      <1> 		mov [grphbuf + 2], esi
  7852 000062C3 668915[95620000]    <1> 		mov [grphbuf + 6], dx
  7853 000062CA 66890D[97620000]    <1> 		mov [grphbuf + 8], cx
  7854 000062D1 891D[9B620000]      <1> 		mov [grphbuf + 12], ebx
  7855 000062D7 30FF                <1> 		xor bh, bh
  7856 000062D9 88E3                <1> 		mov bl, ah
  7857 000062DB 30E4                <1> 		xor ah, ah
  7858 000062DD 66A3[99620000]      <1> 		mov [grphbuf + 10], ax	
  7859 000062E3 66891D[8F620000]    <1> 		mov [grphbuf], bx
  7860 000062EA 66A1[8F620000]      <1> 		mov ax, [grphbuf]
  7861 000062F0 663D0100            <1> 		cmp ax, 1
  7862 000062F4 0F8419000000        <1> 		je near replaceicon
  7863 000062FA 663D0200            <1> 		cmp ax, 2
  7864 000062FE 0F8493000000        <1> 		je near replacestring
  7865 00006304 663D0300            <1> 		cmp ax, 3
  7866 00006308 0F840F010000        <1> 		je near replacewindow
  7867 0000630E E9D9010000          <1> 		jmp showgraphicsreplace
  7868                              <1> 	replaceicon:
  7869 00006313 893D[7C5C0000]      <1> 		mov [lastpos], edi
  7870 00006319 8935[805C0000]      <1> 		mov [lastpos + 4], esi
  7871 0000631F 8B7702              <1> 		mov esi, [edi + 2]
  7872 00006322 668B5F0C            <1> 		mov bx, [edi + 12]
  7873 00006326 668B5706            <1> 		mov dx, [edi + 6]
  7874 0000632A 668B4F08            <1> 		mov cx, [edi + 8]
  7875 0000632E 668B06              <1> 		mov ax, [esi]
  7876 00006331 66A3[845C0000]      <1> 		mov [colorbuf], ax
  7877 00006337 66A1[D9590000]      <1> 		mov ax, [background]
  7878 0000633D 668906              <1> 		mov [esi], ax
  7879 00006340 8B5F0C              <1> 		mov ebx, [edi + 12]
  7880 00006343 668B470A            <1> 		mov ax, [edi + 10]
  7881 00006347 2401                <1> 		and al, 1
  7882 00006349 A2[3A6E0000]        <1> 		mov [iconselected], al
  7883 0000634E 668B470A            <1> 		mov ax, [edi + 10]
  7884 00006352 E83B070000          <1> 		call showicon2
  7885 00006357 8B3D[7C5C0000]      <1> 		mov edi, [lastpos]
  7886 0000635D 8B7702              <1> 		mov esi, [edi + 2]
  7887 00006360 66A1[845C0000]      <1> 		mov ax, [colorbuf]
  7888 00006366 668906              <1> 		mov [esi], ax
  7889 00006369 8B35[805C0000]      <1> 		mov esi, [lastpos + 4]
  7890 0000636F 668B15[95620000]    <1> 		mov dx, [grphbuf + 6]
  7891 00006376 668B0D[97620000]    <1> 		mov cx, [grphbuf + 8]
  7892 0000637D 668B1D[8F620000]    <1> 		mov bx, [grphbuf]
  7893 00006384 66A1[99620000]      <1> 		mov ax, [grphbuf + 10]
  7894 0000638A 88DC                <1> 		mov ah, bl
  7895 0000638C 8B1D[9B620000]      <1> 		mov ebx, [grphbuf + 12]
  7896 00006392 E955010000          <1> 		jmp showgraphicsreplace
  7897                              <1> 	replacestring:
  7898 00006397 893D[7C5C0000]      <1> 		mov [lastpos], edi
  7899 0000639D 8935[805C0000]      <1> 		mov [lastpos + 4], esi
  7900 000063A3 8B5F0C              <1> 		mov ebx, [edi + 12]
  7901 000063A6 8B7702              <1> 		mov esi, [edi + 2]
  7902 000063A9 668B5706            <1> 		mov dx, [edi + 6]
  7903 000063AD 668B4F08            <1> 		mov cx, [edi + 8]
  7904 000063B1 66A1[75650000]      <1> 		mov ax, [colorfont2]
  7905 000063B7 66A3[845C0000]      <1> 		mov [colorbuf], ax
  7906 000063BD 66A1[D9590000]      <1> 		mov ax, [background]
  7907 000063C3 66A3[75650000]      <1> 		mov [colorfont2], ax		
  7908 000063C9 8B5F0C              <1> 		mov ebx, [edi + 12]
  7909 000063CC 668B470A            <1> 		mov ax, [edi + 10]
  7910 000063D0 2401                <1> 		and al, 1
  7911 000063D2 A2[155B0000]        <1> 		mov [mouseselecton], al
  7912 000063D7 668B470A            <1> 		mov ax, [edi + 10]
  7913 000063DB E85D010000          <1> 		call showstring2
  7914 000063E0 66A1[845C0000]      <1> 		mov ax, [colorbuf]
  7915 000063E6 66A3[75650000]      <1> 		mov [colorfont2], ax
  7916 000063EC 8B3D[7C5C0000]      <1> 		mov edi, [lastpos]
  7917 000063F2 8B7702              <1> 		mov esi, [edi + 2]
  7918 000063F5 668B15[95620000]    <1> 		mov dx, [grphbuf + 6]
  7919 000063FC 668B0D[97620000]    <1> 		mov cx, [grphbuf + 8]
  7920 00006403 668B1D[8F620000]    <1> 		mov bx, [grphbuf]
  7921 0000640A 66A1[99620000]      <1> 		mov ax, [grphbuf + 10]
  7922 00006410 88DC                <1> 		mov ah, bl
  7923 00006412 8B1D[9B620000]      <1> 		mov ebx, [grphbuf + 12]
  7924 00006418 E9CF000000          <1> 		jmp showgraphicsreplace
  7925                              <1> 	replacewindow:
  7926 0000641D 893D[7C5C0000]      <1> 		mov [lastpos], edi
  7927 00006423 8935[805C0000]      <1> 		mov [lastpos + 4], esi
  7928 00006429 8B7702              <1> 		mov esi, [edi + 2]
  7929 0000642C 8B3D[84650000]      <1> 		mov edi, [windowbufloc]
  7930 00006432 31D2                <1> 		xor edx, edx
  7931 00006434 668B15[074C0000]    <1> 		mov dx, [resolutionx2]
  7932 0000643B C1E204              <1> 		shl edx, 4
  7933 0000643E 29D7                <1> 		sub edi, edx
  7934 00006440 31D2                <1> 		xor edx, edx
  7935 00006442 668B16              <1> 		mov dx, [esi]
  7936 00006445 660316              <1> 		add dx, [esi]
  7937 00006448 668B4E02            <1> 		mov cx, [esi + 2]
  7938 0000644C 6681C11000          <1> 		add cx, 16
  7939 00006451 66A1[D9590000]      <1> 		mov ax, [background]
  7940                              <1> 	clearwindow:
  7941                              <1> 		%ifdef gui.background
  7942 00006457 813D[AB590000]0000- <1> 			cmp dword [backgroundimage], 0
  7943 0000645F 0000                <1>
  7944 00006461 7419                <1> 			je .noback
  7945 00006463 56                  <1> 			push esi
  7946 00006464 8B35[AB590000]      <1> 			mov esi, [backgroundimage]
  7947 0000646A 2B3D[2F4B0000]      <1> 			sub edi, [physbaseptr]
  7948 00006470 01FE                <1> 			add esi, edi
  7949 00006472 033D[2F4B0000]      <1> 			add edi, [physbaseptr]
  7950 00006478 668B06              <1> 			mov ax, [esi]
  7951 0000647B 5E                  <1> 			pop esi
  7952                              <1> 		.noback:
  7953                              <1> 		%endif
  7954 0000647C 668907              <1> 		mov [edi], ax
  7955 0000647F 81C702000000        <1> 		add edi, 2
  7956 00006485 81EA02000000        <1> 		sub edx, 2
  7957 0000648B 81FA00000000        <1> 		cmp edx, 0
  7958 00006491 75C4                <1> 		jne clearwindow
  7959 00006493 6649                <1> 		dec cx
  7960 00006495 668B15[074C0000]    <1> 		mov dx, [resolutionx2]
  7961 0000649C 662B16              <1> 		sub dx, [esi]
  7962 0000649F 662B16              <1> 		sub dx, [esi]
  7963 000064A2 01D7                <1> 		add edi, edx
  7964 000064A4 668B16              <1> 		mov dx, [esi]
  7965 000064A7 660316              <1> 		add dx, [esi]
  7966 000064AA 6681F90000          <1> 		cmp cx, 0
  7967 000064AF 75A6                <1> 		jne clearwindow
  7968 000064B1 C605[B2210000]00    <1> 		mov byte [termcopyon], 0
  7969 000064B8 8B3D[7C5C0000]      <1> 		mov edi, [lastpos]
  7970 000064BE 8B35[91620000]      <1> 		mov esi, [grphbuf + 2]
  7971 000064C4 668B15[95620000]    <1> 		mov dx, [grphbuf + 6]
  7972 000064CB 668B0D[97620000]    <1> 		mov cx, [grphbuf + 8]
  7973 000064D2 668B1D[8F620000]    <1> 		mov bx, [grphbuf]
  7974 000064D9 66A1[99620000]      <1> 		mov ax, [grphbuf + 10]
  7975 000064DF 88DC                <1> 		mov ah, bl
  7976 000064E1 8B1D[9B620000]      <1> 		mov ebx, [grphbuf + 12]
  7977 000064E7 E900000000          <1> 		jmp showgraphicsreplace
  7978                              <1> 	showgraphicsreplace:
  7979 000064EC 897702              <1> 		mov [edi + 2], esi
  7980 000064EF 66895706            <1> 		mov [edi + 6], dx
  7981 000064F3 66894F08            <1> 		mov [edi + 8], cx
  7982 000064F7 895F0C              <1> 		mov [edi + 12], ebx
  7983 000064FA 30FF                <1> 		xor bh, bh
  7984 000064FC 88E3                <1> 		mov bl, ah
  7985 000064FE 30E4                <1> 		xor ah, ah
  7986 00006500 6689470A            <1> 		mov [edi + 10], ax
  7987 00006504 66891F              <1> 		mov [edi], bx
  7988 00006507 8B5F0C              <1> 		mov ebx, [edi + 12]
  7989 0000650A 668B470A            <1> 		mov ax, [edi + 10]
  7990 0000650E C3                  <1> 		ret
  7991                              <1> 	showgraphicsnew:
  7992 0000650F BF[AFB40000]        <1> 		mov edi, graphicstable
  7993                              <1> 	shwgrph2:
  7994 00006514 66813F0000          <1> 		cmp word [edi], 0
  7995 00006519 74D1                <1> 		je showgraphicsreplace
  7996 0000651B 81C710000000        <1> 		add edi, 16
  7997 00006521 81FF[AFB60000]      <1> 		cmp edi, graphicstableend
  7998 00006527 72EB                <1> 		jb shwgrph2
  7999                              <1> 	showgraphicsdone:
  8000 00006529 C3                  <1> 		ret
  8001                              <1> 
  8002                              <1> 	showstring:
  8003 0000652A A2[155B0000]        <1> 		mov [mouseselecton], al
  8004 0000652F 8025[155B0000]01    <1> 		and byte [mouseselecton], 1
  8005 00006536 B402                <1> 		mov ah, 2
  8006 00006538 E862FDFFFF          <1> 		call graphicsadd
  8007                              <1> 	showstring2:
  8008 0000653D 30E4                <1> 		xor ah, ah
  8009 0000653F 8A06                <1> 		mov al, [esi]
  8010 00006541 3C00                <1> 		cmp al, 0
  8011 00006543 7428                <1> 		je doneshowstring
  8012 00006545 46                  <1> 		inc esi
  8013 00006546 3CFF                <1> 		cmp al, 255
  8014 00006548 74F3                <1> 		je showstring2
  8015 0000654A 8935[E76D0000]      <1> 		mov [showstringesi], esi
  8016 00006550 668B1D[75650000]    <1> 		mov bx, [colorfont2]
  8017 00006557 E8FD050000          <1> 		call showfontvesa
  8018 0000655C 3C0A                <1> 		cmp al, 10
  8019 0000655E 7405                <1> 		je noproceedshst
  8020 00006560 6681C20800          <1> 		add dx, 8
  8021                              <1> 	noproceedshst:
  8022 00006565 8B35[E76D0000]      <1> 		mov esi, [showstringesi]
  8023 0000656B EBD0                <1> 		jmp showstring2
  8024                              <1> 	doneshowstring:
  8025 0000656D C605[155B0000]00    <1> 		mov byte [mouseselecton], 0
  8026 00006574 C3                  <1> 		ret
  8027                              <1> 
  8028 00006575 FFFF                <1> colorfont2 dw 0xFFFF
  8029 00006577 00                  <1> colorcache db 0
  8030 00006578 0000                <1> winvcopystx dw 0
  8031 0000657A 0000                <1> winvcopysty dw 0
  8032 0000657C 0000                <1> winvcopydx dw 0
  8033 0000657E 0000                <1> winvcopycx dw 0
  8034 00006580 FFFF0000            <1> windowcolor dw 0xFFFF,0
  8035                              <1> ;alpha blend white w/ background, black w/ background
  8036 00006584 00000000            <1> windowbufloc: dw 0,0
  8037 00006588 00000000            <1> windowinfobuf dd 0
  8038 0000658C 0000                <1> termcol dw 0
  8039 0000658E 00000000            <1> wincopyendpos dd 0
  8040                              <1> 
  8041                              <1> 	showwindow:	;;windowstuff in si, position in (dx, cx), nothing in ax, code in bx
  8042 00006592 C605[B1210000]01    <1> 		mov byte [termguion], 1
  8043 00006599 6681C11000          <1> 		add cx, 16
  8044 0000659E 668915[78650000]    <1> 		mov [winvcopystx], dx
  8045 000065A5 66890D[7A650000]    <1> 		mov [winvcopysty], cx
  8046 000065AC 8935[88650000]      <1> 		mov [windowinfobuf], esi
  8047 000065B2 668B16              <1> 		mov dx, [esi]
  8048 000065B5 668B4E02            <1> 		mov cx, [esi + 2]
  8049 000065B9 31C0                <1> 		xor eax, eax
  8050 000065BB 31DB                <1> 		xor ebx, ebx
  8051 000065BD 6689D0              <1> 		mov ax, dx
  8052 000065C0 6689CB              <1> 		mov bx, cx
  8053 000065C3 66C1E803            <1> 		shr ax, 3
  8054 000065C7 66C1EB04            <1> 		shr bx, 4
  8055 000065CB 66A3[8C650000]      <1> 		mov [termcol], ax
  8056 000065D1 A2[75230000]        <1> 		mov [charxy], al
  8057 000065D6 881D[76230000]      <1> 		mov [charxy + 1], bl
  8058 000065DC BF[B0C12800]        <1> 		mov edi, videobuf
  8059 000065E1 81FB00000000        <1> 		cmp ebx, 0
  8060 000065E7 0F8478040000        <1> 		je near donewincopynow	;AAAAAAAAA!!!!!
  8061                              <1> 	findendposwin:
  8062 000065ED 01C7                <1> 		add edi, eax
  8063 000065EF 01C7                <1> 		add edi, eax
  8064 000065F1 4B                  <1> 		dec ebx
  8065 000065F2 81FB00000000        <1> 		cmp ebx, 0
  8066 000065F8 77F3                <1> 		ja findendposwin
  8067 000065FA 893D[8E650000]      <1> 		mov [wincopyendpos], edi
  8068 00006600 31FF                <1> 		xor edi, edi
  8069 00006602 6631C0              <1> 		xor ax, ax
  8070 00006605 6631DB              <1> 		xor bx, bx
  8071 00006608 6601D2              <1> 		add dx, dx
  8072 0000660B 668915[7C650000]    <1> 		mov [winvcopydx], dx
  8073 00006612 66890D[7E650000]    <1> 		mov [winvcopycx], cx
  8074 00006619 668B0D[7A650000]    <1> 		mov cx, [winvcopysty]
  8075 00006620 6681E91000          <1> 		sub cx, 16
  8076 00006625 668B15[78650000]    <1> 		mov dx, [winvcopystx]
  8077 0000662C C605[B2210000]00    <1> 		mov byte [termcopyon], 0
  8078 00006633 B403                <1> 		mov ah, 3
  8079 00006635 E865FCFFFF          <1> 		call graphicsadd
  8080                              <1> 	showwindow2:
  8081 0000663A 6681C11000          <1> 		add cx, 16
  8082 0000663F 668915[78650000]    <1> 		mov [winvcopystx], dx
  8083 00006646 66890D[7A650000]    <1> 		mov [winvcopysty], cx
  8084 0000664D 668B16              <1> 		mov dx, [esi]
  8085 00006650 668B4E02            <1> 		mov cx, [esi + 2]
  8086 00006654 6601D2              <1> 		add dx, dx
  8087 00006657 668915[7C650000]    <1> 		mov [winvcopydx], dx
  8088 0000665E 66890D[7E650000]    <1> 		mov [winvcopycx], cx
  8089 00006665 8B3D[84650000]      <1> 		mov edi, [windowbufloc]
  8090 0000666B 31D2                <1> 		xor edx, edx
  8091 0000666D 668B15[074C0000]    <1> 		mov dx, [resolutionx2]
  8092 00006674 C1E204              <1> 		shl edx, 4
  8093 00006677 29D7                <1> 		sub edi, edx
  8094 00006679 803D[B2210000]00    <1> 		cmp byte [termcopyon], 0
  8095 00006680 7538                <1> 		jne nocleartitlebarpos
  8096 00006682 8B3D[2F4B0000]      <1> 		mov edi, [physbaseptr]
  8097 00006688 31D2                <1> 		xor edx, edx
  8098 0000668A 668B15[78650000]    <1> 		mov dx, [winvcopystx]
  8099 00006691 01D7                <1> 		add edi, edx
  8100 00006693 668B0D[7A650000]    <1> 		mov cx, [winvcopysty]
  8101 0000669A 6681E91000          <1> 		sub cx, 16
  8102 0000669F 6681F90000          <1> 		cmp cx, 0
  8103 000066A4 7414                <1> 		je nocleartitlebarpos
  8104                              <1> 	cleartitlebarpos:
  8105 000066A6 31D2                <1> 		xor edx, edx
  8106 000066A8 668B15[074C0000]    <1> 		mov dx, [resolutionx2]
  8107 000066AF 01D7                <1> 		add edi, edx
  8108 000066B1 6649                <1> 		dec cx
  8109 000066B3 6681F90000          <1> 		cmp cx, 0
  8110 000066B8 75EC                <1> 		jne cleartitlebarpos
  8111                              <1> 	nocleartitlebarpos:
  8112 000066BA 66B91000            <1> 		mov cx, 16
  8113 000066BE 668B15[7C650000]    <1> 		mov dx, [winvcopydx]
  8114 000066C5 6681F90000          <1> 		cmp cx, 0
  8115 000066CA 0F8448000000        <1> 		je near canceltitlebarput
  8116 000066D0 6681FA0000          <1> 		cmp dx, 0
  8117 000066D5 0F843D000000        <1> 		je near canceltitlebarput
  8118                              <1> 	titlebarput:
  8119 000066DB 66A1[80650000]      <1> 		mov ax, [windowcolor]
  8120 000066E1 668907              <1> 		mov [edi], ax
  8121 000066E4 6681EA0200          <1> 		sub dx, 2
  8122 000066E9 81C702000000        <1> 		add edi, 2
  8123 000066EF 6681FA0000          <1> 		cmp dx, 0
  8124 000066F4 75E5                <1> 		jne titlebarput
  8125 000066F6 31D2                <1> 		xor edx, edx
  8126 000066F8 668B15[074C0000]    <1> 		mov dx, [resolutionx2]
  8127 000066FF 6649                <1> 		dec cx
  8128 00006701 662B15[7C650000]    <1> 		sub dx, [winvcopydx]
  8129 00006708 01D7                <1> 		add edi, edx
  8130 0000670A 668B15[7C650000]    <1> 		mov dx, [winvcopydx]
  8131 00006711 6681F90000          <1> 		cmp cx, 0
  8132 00006716 75C3                <1> 		jne titlebarput
  8133                              <1> 	canceltitlebarput:
  8134 00006718 893D[84650000]      <1> 		mov [windowbufloc], edi
  8135 0000671E 803D[B2210000]02    <1> 		cmp byte [termcopyon], 2
  8136 00006725 0F8461000000        <1> 		je near winvcpst
  8137 0000672B 6631C0              <1> 		xor ax, ax
  8138 0000672E 81C604000000        <1> 		add esi, 4
  8139 00006734 668B15[78650000]    <1> 		mov dx, [winvcopystx]
  8140 0000673B 668B0D[7A650000]    <1> 		mov cx, [winvcopysty]
  8141 00006742 6681E91000          <1> 		sub cx, 16
  8142 00006747 6631DB              <1> 		xor bx, bx
  8143 0000674A C605[155B0000]01    <1> 		mov byte [mouseselecton], 1
  8144 00006751 E8E7FDFFFF          <1> 		call showstring2
  8145 00006756 B058                <1> 		mov al, "X"
  8146 00006758 30E4                <1> 		xor ah, ah
  8147 0000675A 668B1D[75650000]    <1> 		mov bx, [colorfont2]
  8148 00006761 668B15[78650000]    <1> 		mov dx, [winvcopystx]
  8149 00006768 668B0D[7A650000]    <1> 		mov cx, [winvcopysty]
  8150 0000676F 6681E91000          <1> 		sub cx, 16
  8151 00006774 6681EA1400          <1> 		sub dx, 20
  8152 00006779 660315[7C650000]    <1> 		add dx, [winvcopydx]
  8153 00006780 C605[155B0000]01    <1> 		mov byte [mouseselecton], 1
  8154 00006787 E8CD030000          <1> 		call showfontvesa
  8155                              <1> 	winvcpst:
  8156 0000678C 8B3D[84650000]      <1> 		mov edi, [windowbufloc]
  8157 00006792 E97E000000          <1> 		jmp windowvideocopyset
  8158                              <1> 
  8159                              <1> 	windowvideocopy:
  8160 00006797 8B35[88650000]      <1> 		mov esi, [windowinfobuf]
  8161 0000679D 668B16              <1> 		mov dx, [esi]
  8162 000067A0 668B4E02            <1> 		mov cx, [esi + 2]
  8163 000067A4 31C0                <1> 		xor eax, eax
  8164 000067A6 31DB                <1> 		xor ebx, ebx
  8165 000067A8 6689D0              <1> 		mov ax, dx
  8166 000067AB 6689CB              <1> 		mov bx, cx
  8167 000067AE 66C1E803            <1> 		shr ax, 3
  8168 000067B2 66C1EB04            <1> 		shr bx, 4
  8169 000067B6 66A3[8C650000]      <1> 		mov [termcol], ax
  8170 000067BC A2[75230000]        <1> 		mov [charxy], al
  8171 000067C1 881D[76230000]      <1> 		mov [charxy + 1], bl
  8172 000067C7 8B3D[84650000]      <1> 		mov edi, [windowbufloc]
  8173 000067CD 3B3D[2F4B0000]      <1> 		cmp edi, [physbaseptr]
  8174 000067D3 0F833C000000        <1> 		jae near windowvideocopyset
  8175 000067D9 31C9                <1> 		xor ecx, ecx
  8176 000067DB 31D2                <1> 		xor edx, edx
  8177 000067DD 668B15[78650000]    <1> 		mov dx, [winvcopystx]
  8178 000067E4 668B0D[7A650000]    <1> 		mov cx, [winvcopysty]
  8179 000067EB 8B3D[2F4B0000]      <1> 		mov edi, [physbaseptr]
  8180 000067F1 01D7                <1> 		add edi, edx
  8181 000067F3 81F900000000        <1> 		cmp ecx, 0
  8182 000067F9 741A                <1> 		je windowvideocopyset
  8183                              <1> 	yrescopylp:
  8184 000067FB 31D2                <1> 		xor edx, edx
  8185 000067FD 668B15[074C0000]    <1> 		mov dx, [resolutionx2]
  8186 00006804 01D7                <1> 		add edi, edx
  8187 00006806 6649                <1> 		dec cx
  8188 00006808 6681F90000          <1> 		cmp cx, 0
  8189 0000680D 75EC                <1> 		jne yrescopylp
  8190 0000680F 893D[84650000]      <1> 		mov [windowbufloc], edi
  8191                              <1> 	windowvideocopyset:
  8192 00006815 6631C9              <1> 		xor cx, cx
  8193 00006818 6649                <1> 		dec cx
  8194 0000681A 66890D[776A0000]    <1> 		mov [charposline], cx
  8195 00006821 89FE                <1> 		mov esi, edi
  8196 00006823 81EE10000000        <1> 		sub esi, 16
  8197 00006829 31D2                <1> 		xor edx, edx
  8198 0000682B 668B15[074C0000]    <1> 		mov dx, [resolutionx2]
  8199 00006832 C1E204              <1> 		shl edx, 4
  8200 00006835 01D6                <1> 		add esi, edx
  8201 00006837 BF[B0C12800]        <1> 		mov edi, videobuf
  8202 0000683C 81EF02000000        <1> 		sub edi, 2
  8203 00006842 893D[796A0000]      <1> 		mov [charposvbuf], edi
  8204 00006848 E919010000          <1> 		jmp nextcharwin
  8205                              <1> 	win.write:	;adjusted this to use alpha
  8206                              <1> 				;5R, 6G, 5B
  8207                              <1> %ifdef gui.alphablending
  8208 0000684D 56                  <1> 		push esi
  8209 0000684E 6653                <1> 		push bx
  8210 00006850 6651                <1> 		push cx
  8211 00006852 6652                <1> 		push dx
  8212                              <1> %ifdef gui.background
  8213 00006854 89FE                <1> 		mov esi, edi
  8214 00006856 2B35[2F4B0000]      <1> 		sub esi, [physbaseptr]
  8215 0000685C 0335[AB590000]      <1> 		add esi, [backgroundimage]
  8216 00006862 813D[AB590000]0000- <1> 		cmp dword [backgroundimage], 0
  8217 0000686A 0000                <1>
  8218 0000686C 7505                <1> 		jne .red
  8219                              <1> %endif
  8220 0000686E BE[D9590000]        <1> 		mov esi, background
  8221                              <1> 	.red:
  8222 00006873 668B0E              <1> 		mov cx, [esi]
  8223 00006876 66C1E90B            <1> 		shr cx, 11
  8224 0000687A 6689C3              <1> 		mov bx, ax
  8225 0000687D 66C1EB0B            <1> 		shr bx, 11
  8226 00006881 6601D9              <1> 		add cx, bx
  8227 00006884 6601D9              <1> 		add cx, bx
  8228 00006887 6601D9              <1> 		add cx, bx
  8229 0000688A 66C1E902            <1> 		shr cx, 2
  8230 0000688E 66C1E10B            <1> 		shl cx, 11
  8231 00006892 6689CA              <1> 		mov dx, cx
  8232                              <1> 	.green:
  8233 00006895 668B0E              <1> 		mov cx, [esi]
  8234 00006898 66C1E105            <1> 		shl cx, 5
  8235 0000689C 66C1E90A            <1> 		shr cx, 10
  8236 000068A0 6689C3              <1> 		mov bx, ax
  8237 000068A3 66C1E305            <1> 		shl bx, 5
  8238 000068A7 66C1EB0A            <1> 		shr bx, 10
  8239 000068AB 6601D9              <1> 		add cx, bx
  8240 000068AE 6601D9              <1> 		add cx, bx
  8241 000068B1 6601D9              <1> 		add cx, bx
  8242 000068B4 66C1E902            <1> 		shr cx, 2
  8243 000068B8 66C1E105            <1> 		shl cx, 5
  8244 000068BC 6601CA              <1> 		add dx, cx
  8245                              <1> 	.blue:
  8246 000068BF 668B0E              <1> 		mov cx, [esi]
  8247 000068C2 66C1E10B            <1> 		shl cx, 11
  8248 000068C6 66C1E90B            <1> 		shr cx, 11
  8249 000068CA 6689C3              <1> 		mov bx, ax
  8250 000068CD 66C1E30B            <1> 		shl bx, 11
  8251 000068D1 66C1EB0B            <1> 		shr bx, 11
  8252 000068D5 6601D9              <1> 		add cx, bx
  8253 000068D8 6601D9              <1> 		add cx, bx
  8254 000068DB 6601D9              <1> 		add cx, bx
  8255 000068DE 66C1E902            <1> 		shr cx, 2
  8256 000068E2 6601CA              <1> 		add dx, cx
  8257 000068E5 668917              <1> 		mov [edi], dx
  8258 000068E8 665A                <1> 		pop dx
  8259 000068EA 6659                <1> 		pop cx
  8260 000068EC 665B                <1> 		pop bx
  8261 000068EE 5E                  <1> 		pop esi
  8262                              <1> %else
  8263                              <1> 		mov [edi], ax
  8264                              <1> %endif
  8265 000068EF C3                  <1> 		ret
  8266                              <1> 	copywindow:
  8267 000068F0 B201                <1> 		mov dl, 1
  8268 000068F2 D0C6                <1> 		rol dh, 1
  8269 000068F4 20F2                <1> 		and dl, dh
  8270 000068F6 803D[77650000]10    <1> 		cmp byte [colorcache], 0x10
  8271 000068FD 7320                <1> 		jae switchwincolors
  8272 000068FF 66A1[82650000]      <1> 		mov ax, [windowcolor + 2]
  8273 00006905 E843FFFFFF          <1> 		call win.write
  8274 0000690A 80FA00              <1> 		cmp dl, 0
  8275 0000690D 742B                <1> 		je nowritewin
  8276 0000690F 66A1[80650000]      <1> 		mov ax, [windowcolor]
  8277 00006915 E833FFFFFF          <1> 		call win.write
  8278 0000691A E91B000000          <1> 		jmp nowritewin
  8279                              <1> 	switchwincolors:
  8280 0000691F 66A1[80650000]      <1> 		mov ax, [windowcolor]
  8281 00006925 E823FFFFFF          <1> 		call win.write
  8282 0000692A 80FA00              <1> 		cmp dl, 0
  8283 0000692D 740B                <1> 		je nowritewin
  8284 0000692F 66A1[82650000]      <1> 		mov ax, [windowcolor + 2]
  8285 00006935 E813FFFFFF          <1> 		call win.write
  8286                              <1> 	nowritewin:
  8287 0000693A 81C702000000        <1> 		add edi, 2
  8288 00006940 FEC1                <1> 		inc cl
  8289 00006942 80F908              <1> 		cmp cl, 8
  8290 00006945 75A9                <1> 		jne copywindow
  8291 00006947 6643                <1> 		inc bx
  8292 00006949 30C9                <1> 		xor cl, cl
  8293 0000694B 31D2                <1> 		xor edx, edx
  8294 0000694D 668B15[074C0000]    <1> 		mov dx, [resolutionx2]
  8295 00006954 01D6                <1> 		add esi, edx
  8296 00006956 89F7                <1> 		mov edi, esi
  8297 00006958 678AB7[2A72]        <1> 		mov dh, [fonts + bx]
  8298 0000695D D0CE                <1> 		ror dh, 1
  8299 0000695F FEC5                <1> 		inc ch
  8300 00006961 80FD10              <1> 		cmp ch, 16
  8301 00006964 758A                <1> 		jne copywindow
  8302                              <1> 	nextcharwin:
  8303 00006966 6631C9              <1> 		xor cx, cx
  8304 00006969 8B3D[796A0000]      <1> 		mov edi, [charposvbuf]
  8305 0000696F 81C702000000        <1> 		add edi, 2
  8306 00006975 3B3D[8E650000]      <1> 		cmp edi, [wincopyendpos]
  8307 0000697B 0F83E4000000        <1> 		jae near donewincopynow
  8308 00006981 8A7F01              <1> 		mov bh, [edi + 1]
  8309 00006984 80FF00              <1> 		cmp bh, 0
  8310 00006987 7505                <1> 		jne nofixcolorwin
  8311 00006989 B707                <1> 		mov bh, 7
  8312 0000698B 887F01              <1> 		mov [edi + 1], bh
  8313                              <1> 	nofixcolorwin:
  8314 0000698E 883D[77650000]      <1> 		mov [colorcache], bh
  8315 00006994 8A1F                <1> 		mov bl, [edi]
  8316 00006996 893D[796A0000]      <1> 		mov [charposvbuf], edi
  8317 0000699C 81EF[B0C12800]      <1> 		sub edi, videobuf
  8318 000069A2 81C7[542C2900]      <1> 		add edi, videobuf2
  8319 000069A8 8A6701              <1> 		mov ah, [edi + 1]
  8320 000069AB 8A07                <1> 		mov al, [edi]
  8321 000069AD 6639D8              <1> 		cmp ax, bx
  8322 000069B0 7543                <1> 		jne noskipcharcopy
  8323                              <1> 	skipcharcopy:
  8324 000069B2 81C610000000        <1> 		add esi, 16
  8325 000069B8 668B0D[776A0000]    <1> 		mov cx, [charposline]
  8326 000069BF 6641                <1> 		inc cx
  8327 000069C1 66890D[776A0000]    <1> 		mov [charposline], cx
  8328 000069C8 663B0D[8C650000]    <1> 		cmp cx, [termcol]
  8329 000069CF 7295                <1> 		jb nextcharwin
  8330 000069D1 6631C9              <1> 		xor cx, cx
  8331 000069D4 66890D[776A0000]    <1> 		mov [charposline], cx
  8332 000069DB 31D2                <1> 		xor edx, edx
  8333 000069DD 668B15[074C0000]    <1> 		mov dx, [resolutionx2]
  8334 000069E4 C1E204              <1> 		shl edx, 4
  8335 000069E7 662B15[7C650000]    <1> 		sub dx, [winvcopydx]
  8336 000069EE 01D6                <1> 		add esi, edx
  8337 000069F0 E971FFFFFF          <1> 		jmp nextcharwin
  8338                              <1> 	noskipcharcopy:
  8339 000069F5 881F                <1> 		mov [edi], bl
  8340 000069F7 887F01              <1> 		mov [edi + 1], bh
  8341 000069FA 8B3D[796A0000]      <1> 		mov edi, [charposvbuf]
  8342 00006A00 30FF                <1> 		xor bh, bh
  8343 00006A02 66C1E304            <1> 		shl bx, 4
  8344 00006A06 31D2                <1> 		xor edx, edx
  8345 00006A08 668B15[074C0000]    <1> 		mov dx, [resolutionx2]
  8346 00006A0F C1E204              <1> 		shl edx, 4
  8347 00006A12 29D6                <1> 		sub esi, edx
  8348 00006A14 81C610000000        <1> 		add esi, 16
  8349 00006A1A 89F7                <1> 		mov edi, esi
  8350 00006A1C 668B0D[776A0000]    <1> 		mov cx, [charposline]
  8351 00006A23 6641                <1> 		inc cx
  8352 00006A25 663B0D[8C650000]    <1> 		cmp cx, [termcol]
  8353 00006A2C 7316                <1> 		jae fixwindowcopy
  8354 00006A2E 66890D[776A0000]    <1> 		mov [charposline], cx
  8355 00006A35 6631C9              <1> 		xor cx, cx
  8356 00006A38 678AB7[2A72]        <1> 		mov dh, [fonts + bx]
  8357 00006A3D D0CE                <1> 		ror dh, 1
  8358 00006A3F E9ACFEFFFF          <1> 		jmp copywindow
  8359                              <1> fixwindowcopy:
  8360 00006A44 6631C9              <1> 		xor cx, cx
  8361 00006A47 66890D[776A0000]    <1> 		mov [charposline], cx
  8362 00006A4E 662B15[7C650000]    <1> 		sub dx, [winvcopydx]
  8363 00006A55 01D6                <1> 		add esi, edx
  8364 00006A57 89F7                <1> 		mov edi, esi
  8365 00006A59 678AB7[2A72]        <1> 		mov dh, [fonts + bx]
  8366 00006A5E D0CE                <1> 		ror dh, 1
  8367 00006A60 E98BFEFFFF          <1> 		jmp copywindow
  8368                              <1> donewincopynow:
  8369 00006A65 803D[B2210000]01    <1> 		cmp byte [termcopyon], 1
  8370 00006A6C 7501                <1> 		jne forgetresetstuff
  8371 00006A6E 61                  <1> 		popa
  8372                              <1> forgetresetstuff:
  8373 00006A6F C605[B2210000]00    <1> 		mov byte [termcopyon], 0
  8374 00006A76 C3                  <1> 		ret
  8375                              <1> 		
  8376 00006A77 0000                <1> charposline dw 0
  8377 00006A79 00000000            <1> charposvbuf dw 0,0
  8378 00006A7D 0000                <1> iconcolor dw 0
  8379                              <1> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8380 00006A7F A2[3A6E0000]        <1> 		mov [iconselected], al
  8381 00006A84 8025[3A6E0000]01    <1> 		and byte [iconselected], 1
  8382 00006A8B B401                <1> 		mov ah, 1
  8383 00006A8D E80DF8FFFF          <1> 		call graphicsadd
  8384                              <1> 	showicon2:
  8385 00006A92 8B3D[2F4B0000]      <1> 		mov edi, [physbaseptr]
  8386 00006A98 6601D2              <1> 		add dx, dx
  8387 00006A9B 663B15[074C0000]    <1> 		cmp dx, [resolutionx2]
  8388 00006AA2 720C                <1> 		jb screenxgood
  8389 00006AA4 668B15[074C0000]    <1> 		mov dx, [resolutionx2]
  8390 00006AAB 6681EA4000          <1> 		sub dx, 64
  8391                              <1> 	screenxgood:
  8392 00006AB0 6681F90000          <1> 		cmp cx, 0
  8393 00006AB5 7422                <1> 		je noscreenygoodchk
  8394 00006AB7 663B0D[1B4B0000]    <1> 		cmp cx, [resolutiony]
  8395 00006ABE 720C                <1> 		jb screenygood
  8396 00006AC0 668B0D[1B4B0000]    <1> 		mov cx, [resolutiony]
  8397 00006AC7 6681E92000          <1> 		sub cx, 32
  8398                              <1> 	screenygood:
  8399 00006ACC 31DB                <1> 		xor ebx, ebx
  8400 00006ACE 668B1D[074C0000]    <1> 		mov bx, [resolutionx2]
  8401 00006AD5 01DF                <1> 		add edi, ebx
  8402 00006AD7 E2F3                <1> 		loop screenygood
  8403                              <1> 	noscreenygoodchk:
  8404 00006AD9 31DB                <1> 		xor ebx, ebx
  8405 00006ADB 6689D3              <1> 		mov bx, dx
  8406 00006ADE 01DF                <1> 		add edi, ebx
  8407 00006AE0 6631C9              <1> 		xor cx, cx
  8408 00006AE3 668B06              <1> 		mov ax, [esi]
  8409 00006AE6 81C602000000        <1> 		add esi, 2
  8410 00006AEC 66A3[7D6A0000]      <1> 		mov [iconcolor], ax
  8411                              <1> 	writeicon:
  8412 00006AF2 8B06                <1> 		mov eax, [esi]
  8413 00006AF4 D1C0                <1> 		rol eax, 1
  8414 00006AF6 30C9                <1> 		xor cl, cl
  8415                              <1> 	writeiconline:
  8416 00006AF8 B201                <1> 		mov dl, 1
  8417 00006AFA 20C2                <1> 		and dl, al
  8418 00006AFC 3215[3A6E0000]      <1> 		xor dl, [iconselected]
  8419 00006B02 668B1D[D9590000]    <1> 		mov bx, [background]
  8420 00006B09 66891F              <1> 		mov [edi], bx
  8421 00006B0C 80FA00              <1> 		cmp dl, 0
  8422 00006B0F 740A                <1> 		je noiconline
  8423 00006B11 668B15[7D6A0000]    <1> 		mov dx, [iconcolor]
  8424 00006B18 668917              <1> 		mov [edi], dx
  8425                              <1> 	noiconline:
  8426 00006B1B 81C702000000        <1> 		add edi, 2
  8427 00006B21 D1C0                <1> 		rol eax, 1
  8428 00006B23 FEC1                <1> 		inc cl
  8429 00006B25 80F920              <1> 		cmp cl, 32
  8430 00006B28 72CE                <1> 		jb writeiconline
  8431 00006B2A 81C604000000        <1> 		add esi, 4
  8432 00006B30 FEC5                <1> 		inc ch
  8433 00006B32 31D2                <1> 		xor edx, edx
  8434 00006B34 668B15[074C0000]    <1> 		mov dx, [resolutionx2]
  8435 00006B3B 01D7                <1> 		add edi, edx
  8436 00006B3D 81EF40000000        <1> 		sub edi, 64
  8437 00006B43 80FD20              <1> 		cmp ch, 32
  8438 00006B46 72AA                <1> 		jb writeicon
  8439 00006B48 31C0                <1> 		xor eax, eax
  8440 00006B4A C3                  <1> 		ret
  8441                              <1> 
  8442 00006B4B 02                  <1> resolutionbytes db 2
  8443 00006B4C 0000                <1> posxvesa dw 0
  8444 00006B4E 0000                <1> posyvesa dw 0
  8445 00006B50 FFFF                <1> colorfont dw 0xFFFF
  8446                              <1> savefontvesa:		;;same rules as showfontvesa
  8447 00006B52 C605[145B0000]01    <1> 	mov byte [savefonton], 1
  8448                              <1> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  8449 00006B59 3CFF                <1> 	cmp al, 255
  8450 00006B5B 7501                <1> 	jne nostopshowfont
  8451 00006B5D C3                  <1> 	ret
  8452                              <1> nostopshowfont:
  8453 00006B5E 66890D[4E6B0000]    <1> 	mov [posyvesa], cx
  8454 00006B65 3C0A                <1> 	cmp al, 10
  8455 00006B67 0F8424000000        <1> 	je near goodvesafontx
  8456 00006B6D 31C9                <1> 	xor ecx, ecx
  8457 00006B6F 668B0D[074C0000]    <1> 	mov cx, [resolutionx2]
  8458 00006B76 6639CA              <1> 	cmp dx, cx
  8459 00006B79 7616                <1> 	jbe goodvesafontx
  8460 00006B7B 6631D2              <1> 	xor dx, dx
  8461 00006B7E 668B0D[4E6B0000]    <1> 	mov cx, [posyvesa]
  8462 00006B85 6681C11000          <1> 	add cx, 16
  8463 00006B8A 66890D[4E6B0000]    <1> 	mov [posyvesa], cx
  8464                              <1> goodvesafontx:
  8465 00006B91 668B0D[4E6B0000]    <1> 	mov cx, [posyvesa]
  8466 00006B98 668915[4C6B0000]    <1> 	mov [posxvesa], dx
  8467 00006B9F 8B3D[2F4B0000]      <1> 	mov edi, [physbaseptr]
  8468 00006BA5 66891D[506B0000]    <1> 	mov [colorfont], bx
  8469 00006BAC 31DB                <1> 	xor ebx, ebx
  8470 00006BAE 88C3                <1> 	mov bl, al
  8471 00006BB0 31C0                <1> 	xor eax, eax
  8472 00006BB2 88D8                <1> 	mov al, bl
  8473 00006BB4 6689D3              <1> 	mov bx, dx
  8474 00006BB7 89DA                <1> 	mov edx, ebx
  8475 00006BB9 31DB                <1> 	xor ebx, ebx
  8476 00006BBB 6681F90000          <1> 	cmp cx, 0
  8477 00006BC0 7415                <1> 	je vesaposloopdn
  8478 00006BC2 668B1D[074C0000]    <1> 	mov bx, [resolutionx2]
  8479                              <1> vesaposloop:
  8480 00006BC9 01DA                <1> 	add edx, ebx
  8481 00006BCB 6681E90100          <1> 	sub cx, 1
  8482 00006BD0 6681F90000          <1> 	cmp cx, 0
  8483 00006BD5 75F2                <1> 	jne vesaposloop
  8484                              <1> vesaposloopdn:
  8485 00006BD7 01D7                <1> 	add edi, edx
  8486 00006BD9 BE[2A720000]        <1> 	mov esi, fonts
  8487                              <1> findfontvesa:
  8488 00006BDE 30E4                <1> 	xor ah, ah
  8489 00006BE0 3C0A                <1> 	cmp al, 10
  8490 00006BE2 0F84FE000000        <1> 	je near nwlinevesa
  8491 00006BE8 C1E004              <1> 	shl eax, 4
  8492 00006BEB 01C6                <1> 	add esi, eax
  8493 00006BED C1E804              <1> 	shr eax, 4
  8494 00006BF0 81FE[2A820000]      <1> 	cmp esi, fontend
  8495 00006BF6 0F83B9000000        <1> 	jae near donefontvesa
  8496 00006BFC 4E                  <1> 	dec esi
  8497                              <1> foundfontvesa:
  8498 00006BFD 46                  <1> 	inc esi
  8499 00006BFE 803D[145B0000]01    <1> 	cmp byte [savefonton], 1
  8500 00006C05 0F8401010000        <1> 	je near vesafontsaver
  8501 00006C0B 30C9                <1> 	xor cl, cl
  8502 00006C0D 8A06                <1> 	mov al, [esi]
  8503 00006C0F 668B15[074C0000]    <1> 	mov dx, [resolutionx2]
  8504 00006C16 662B15[4C6B0000]    <1> 	sub dx, [posxvesa]
  8505 00006C1D 6681FA1000          <1> 	cmp dx, 16
  8506 00006C22 7708                <1> 	ja paintfontvesa
  8507 00006C24 D0EA                <1> 	shr dl, 1
  8508 00006C26 8815[E56C0000]      <1> 	mov [charwidth], dl
  8509                              <1> paintfontvesa:
  8510 00006C2C B201                <1> 	mov dl, 1
  8511 00006C2E 20C2                <1> 	and dl, al
  8512 00006C30 803D[135B0000]01    <1> 	cmp byte [showcursorfonton], 1
  8513 00006C37 0F8435000000        <1> 	je near nodelpaintedfont
  8514 00006C3D 803D[135B0000]02    <1> 	cmp byte [showcursorfonton], 2
  8515 00006C44 0F8518000000        <1> 	jne near noswitchcursorfonton
  8516 00006C4A 80FA00              <1> 	cmp dl, 0
  8517 00006C4D 0F842E000000        <1> 	je near nopixelset
  8518 00006C53 668B1D[506B0000]    <1> 	mov bx, [colorfont]
  8519 00006C5A 66891F              <1> 	mov [edi], bx
  8520 00006C5D E91F000000          <1> 	jmp nopixelset
  8521                              <1> noswitchcursorfonton:
  8522 00006C62 3215[155B0000]      <1> 	xor dl, [mouseselecton]
  8523 00006C68 668B1D[D9590000]    <1> 	mov bx, [background]
  8524 00006C6F 66891F              <1> 	mov [edi], bx
  8525                              <1> nodelpaintedfont:
  8526 00006C72 80FA00              <1> 	cmp dl, 0
  8527 00006C75 740A                <1> 	je nopixelset
  8528 00006C77 668B15[506B0000]    <1> 	mov dx, [colorfont]
  8529 00006C7E 668917              <1> 	mov [edi], dx
  8530                              <1> nopixelset:
  8531 00006C81 81C702000000        <1> 	add edi, 2
  8532 00006C87 D0C0                <1> 	rol al, 1
  8533 00006C89 FEC1                <1> 	inc cl
  8534 00006C8B 3A0D[E56C0000]      <1> 	cmp cl, [charwidth]
  8535 00006C91 7299                <1> 	jb paintfontvesa
  8536 00006C93 FEC5                <1> 	inc ch
  8537 00006C95 31D2                <1> 	xor edx, edx
  8538 00006C97 668B15[074C0000]    <1> 	mov dx, [resolutionx2]
  8539 00006C9E 01D7                <1> 	add edi, edx
  8540 00006CA0 31D2                <1> 	xor edx, edx
  8541 00006CA2 8A15[E56C0000]      <1> 	mov dl, [charwidth]
  8542 00006CA8 00D2                <1> 	add dl, dl
  8543 00006CAA 29D7                <1> 	sub edi, edx
  8544 00006CAC 80FD10              <1> 	cmp ch, 16
  8545 00006CAF 0F8248FFFFFF        <1> 	jb foundfontvesa
  8546                              <1> donefontvesa:
  8547 00006CB5 B208                <1> 	mov dl, 8
  8548 00006CB7 8815[E56C0000]      <1> 	mov [charwidth], dl
  8549 00006CBD 668B15[4C6B0000]    <1> 	mov dx, [posxvesa]
  8550 00006CC4 8A1D[E56C0000]      <1> 	mov bl, [charwidth]
  8551 00006CCA 30FF                <1> 	xor bh, bh
  8552 00006CCC 6601DA              <1> 	add dx, bx
  8553 00006CCF 668B1D[506B0000]    <1> 	mov bx, [colorfont]
  8554 00006CD6 668B0D[4E6B0000]    <1> 	mov cx, [posyvesa]
  8555 00006CDD C605[145B0000]00    <1> 	mov byte [savefonton], 0
  8556 00006CE4 C3                  <1> 	ret
  8557 00006CE5 08                  <1> charwidth db 8
  8558                              <1> nwlinevesa:
  8559 00006CE6 668B15[4C6B0000]    <1> 	mov dx, [posxvesa]
  8560 00006CED 6631D2              <1> 	xor dx, dx
  8561 00006CF0 668915[4C6B0000]    <1> 	mov [posxvesa], dx
  8562 00006CF7 668B0D[4E6B0000]    <1> 	mov cx, [posyvesa]
  8563 00006CFE 6681C11000          <1> 	add cx, 16
  8564 00006D03 66890D[4E6B0000]    <1> 	mov [posyvesa], cx
  8565 00006D0A EBA9                <1> 	jmp donefontvesa
  8566                              <1> vesafontsaver:
  8567 00006D0C 30C0                <1> 	xor al, al
  8568 00006D0E 30C9                <1> 	xor cl, cl
  8569                              <1> vesafontsaver2:
  8570 00006D10 668B17              <1> 	mov dx, [edi]
  8571 00006D13 663B15[506B0000]    <1> 	cmp dx, [colorfont]
  8572 00006D1A 742F                <1> 	je colorfontmatch
  8573                              <1> donecolormatch:
  8574 00006D1C 81C702000000        <1> 	add edi, 2
  8575 00006D22 D0C0                <1> 	rol al, 1
  8576 00006D24 FEC1                <1> 	inc cl
  8577 00006D26 80F908              <1> 	cmp cl, 8
  8578 00006D29 72E5                <1> 	jb vesafontsaver2
  8579 00006D2B 8806                <1> 	mov [esi], al
  8580 00006D2D 46                  <1> 	inc esi
  8581 00006D2E FEC5                <1> 	inc ch
  8582 00006D30 31D2                <1> 	xor edx, edx
  8583 00006D32 668B15[074C0000]    <1> 	mov dx, [resolutionx2]
  8584 00006D39 01D7                <1> 	add edi, edx
  8585 00006D3B 81EF10000000        <1> 	sub edi, 16
  8586 00006D41 80FD10              <1> 	cmp ch, 16
  8587 00006D44 72C6                <1> 	jb vesafontsaver
  8588 00006D46 E96AFFFFFF          <1> 	jmp donefontvesa
  8589                              <1> colorfontmatch:
  8590 00006D4B 0401                <1> 	add al, 1
  8591 00006D4D EBCD                <1> 	jmp donecolormatch
  8592                              <1> 	
  8593                              <1> showbmp:
  8594 00006D4F 668B06              <1> 	mov ax, [esi]
  8595 00006D52 663D424D            <1> 	cmp ax, "BM"
  8596 00006D56 0F8581000000        <1> 	jne near endedbmp
  8597 00006D5C 8B3D[2F4B0000]      <1> 	mov edi, [physbaseptr]
  8598 00006D62 6689D0              <1> 	mov ax, dx
  8599 00006D65 6689CB              <1> 	mov bx, cx
  8600 00006D68 31C9                <1> 	xor ecx, ecx
  8601 00006D6A 31D2                <1> 	xor edx, edx
  8602 00006D6C 6689D9              <1> 	mov cx, bx
  8603 00006D6F 6689C2              <1> 	mov dx, ax
  8604 00006D72 01D7                <1> 	add edi, edx
  8605 00006D74 01D7                <1> 	add edi, edx
  8606 00006D76 31D2                <1> 	xor edx, edx
  8607 00006D78 668B15[074C0000]    <1> 	mov dx, [resolutionx2]
  8608                              <1> ;	inc ecx
  8609 00006D7F 034E16              <1> 	add ecx, [esi + 22]
  8610                              <1> bmplocloop:
  8611 00006D82 01D7                <1> 	add edi, edx
  8612 00006D84 E2FC                <1> 	loop bmplocloop
  8613 00006D86 29D7                <1> 	sub edi, edx
  8614 00006D88 8B5612              <1> 	mov edx, [esi + 18]
  8615 00006D8B 8B4E16              <1> 	mov ecx, [esi + 22]
  8616 00006D8E 8B460A              <1> 	mov eax, [esi + 10]
  8617 00006D91 8B5E02              <1> 	mov ebx, [esi + 2]
  8618 00006D94 01F3                <1> 	add ebx, esi
  8619 00006D96 891D[E36D0000]      <1> 	mov [bmpend], ebx
  8620 00006D9C 89D3                <1> 	mov ebx, edx
  8621 00006D9E 01C6                <1> 	add esi, eax
  8622                              <1> ldxbmp:
  8623 00006DA0 668B06              <1> 	mov ax, [esi]
  8624 00006DA3 668907              <1> 	mov [edi], ax
  8625 00006DA6 81C702000000        <1> 	add edi, 2
  8626 00006DAC 81C602000000        <1> 	add esi, 2
  8627 00006DB2 3B35[E36D0000]      <1> 	cmp esi, [bmpend]
  8628 00006DB8 7723                <1> 	ja endedbmp
  8629 00006DBA 4A                  <1> 	dec edx
  8630 00006DBB 81FA00000000        <1> 	cmp edx, 0
  8631 00006DC1 77DD                <1> 	ja ldxbmp
  8632 00006DC3 31D2                <1> 	xor edx, edx
  8633 00006DC5 668B15[074C0000]    <1> 	mov dx, [resolutionx2]
  8634 00006DCC 29DF                <1> 	sub edi, ebx
  8635 00006DCE 29DF                <1> 	sub edi, ebx
  8636 00006DD0 29D7                <1> 	sub edi, edx
  8637 00006DD2 49                  <1> 	dec ecx
  8638 00006DD3 89DA                <1> 	mov edx, ebx
  8639 00006DD5 81F900000000        <1> 	cmp ecx, 0
  8640 00006DDB 77C3                <1> 	ja ldxbmp
  8641                              <1> endedbmp:
  8642 00006DDD E832EEFFFF          <1> 	call switchmousepos2
  8643 00006DE2 C3                  <1> 	ret
  8644                              <1> 	
  8645 00006DE3 00000000            <1> 	bmpend dd 0
  8646                              <1> 
  8647                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Here are some vars;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  8648 00006DE7 00000000            <1> 	showstringesi dw 0,0
  8649 00006DEB 00                  <1> 	mouseon db 0
  8650 00006DEC 737461727400        <1> 	start	db "start",0
  8651 00006DF2 536F6C6C65724F5300  <1> 	gotomenu db "SollerOS",0
  8652 00006DFB 506F776572204F6666- <1> 	turnoffmsg db "Power Off",0
  8653 00006E04 00                  <1>
  8654 00006E05 426F6F2100          <1> 	boomsg db "Boo!",0
  8655 00006E0A 5061636D616E207761- <1> 	pacmsg	db "Pacman was easy to draw.",0
  8656 00006E13 73206561737920746F- <1>
  8657 00006E1C 20647261772E00      <1>
  8658 00006E23 4F6D206E6F6D206E6F- <1> 	pacnom  db "Om nom nom nom",0
  8659 00006E2C 6D206E6F6D00        <1>
  8660 00006E32 5800                <1> 	xmsg db "X",0
  8661 00006E34 0000                <1> 	icon dw 0	;pointer to icon
  8662 00006E36 00000000            <1> 	codepointer dw 0,0 ;pointer to code
  8663 00006E3A 00                  <1> 	iconselected db 0
  8664                              <1> 	
  8665                              <1> 	boo:
  8666 00006E3B BE[056E0000]        <1> 		mov esi, boomsg
  8667 00006E40 66BA6400            <1> 		mov dx, 100
  8668 00006E44 66B94001            <1> 		mov cx, 320
  8669 00006E48 31DB                <1> 		xor ebx, ebx
  8670 00006E4A 6631C0              <1> 		xor ax, ax
  8671 00006E4D E9D8F6FFFF          <1> 		jmp showstring
  8672                              <1> 
  8673                              <1> 	pacmannomnom:
  8674 00006E52 BE[236E0000]        <1> 		mov esi, pacnom
  8675 00006E57 66BA8200            <1> 		mov dx, 130
  8676 00006E5B 66B93C00            <1> 		mov cx, 60
  8677 00006E5F 31DB                <1> 		xor ebx, ebx
  8678 00006E61 6631C0              <1> 		xor ax, ax
  8679 00006E64 E9C1F6FFFF          <1> 		jmp showstring	
  8680                              <1> 	
  8681                              <1> 	noie:
  8682 00006E69 66C705[286F0000]80- <1> 		mov word [termwindow], 640
  8683 00006E71 02                  <1>
  8684 00006E72 66C705[2A6F0000]E0- <1> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  8685 00006E7A 01                  <1>
  8686 00006E7B BE[286F0000]        <1> 		mov esi, termwindow
  8687 00006E80 66BA1000            <1> 		mov dx, 16
  8688 00006E84 66B91000            <1> 		mov cx, 16
  8689 00006E88 BB[27270000]        <1> 		mov ebx, os
  8690 00006E8D 6631C0              <1> 		xor ax, ax
  8691 00006E90 E8FDF6FFFF          <1> 		call showwindow
  8692 00006E95 E98DB8FFFF          <1> 		jmp os
  8693                              <1> 
  8694                              <1> 	gotomenuboot:
  8695 00006E9A 31D2                <1> 		xor edx, edx
  8696 00006E9C 31C9                <1> 		xor ecx, ecx
  8697 00006E9E 668B15[194B0000]    <1> 		mov dx, [resolutionx]
  8698 00006EA5 668B0D[1B4B0000]    <1> 		mov cx, [resolutiony]
  8699 00006EAC 66C1E904            <1> 		shr cx, 4
  8700 00006EB0 6681E90100          <1> 		sub cx, 1
  8701 00006EB5 66C1E104            <1> 		shl cx, 4
  8702 00006EB9 668915[286F0000]    <1> 		mov [termwindow], dx
  8703 00006EC0 66890D[2A6F0000]    <1> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  8704 00006EC7 BE[286F0000]        <1> 		mov esi, termwindow
  8705 00006ECC 6631D2              <1> 		xor dx, dx
  8706 00006ECF 6631C9              <1> 		xor cx, cx
  8707 00006ED2 BB[27270000]        <1> 		mov ebx, os
  8708 00006ED7 6631C0              <1> 		xor ax, ax
  8709 00006EDA E8B3F6FFFF          <1> 		call showwindow
  8710 00006EDF E943B8FFFF          <1> 		jmp os
  8711                              <1> 
  8712                              <1> 	winblows:
  8713 00006EE4 BE[FB6D0000]        <1> 		mov esi, turnoffmsg
  8714 00006EE9 BB[7B460000]        <1> 		mov ebx, turnoff
  8715 00006EEE 668B0D[1B4B0000]    <1> 		mov cx, [resolutiony]
  8716 00006EF5 6681E92000          <1> 		sub cx, 32
  8717 00006EFA 6631D2              <1> 		xor dx, dx
  8718 00006EFD 30E4                <1> 		xor ah, ah
  8719 00006EFF B010                <1> 		mov al, 00010000b
  8720 00006F01 E824F6FFFF          <1> 		call showstring
  8721 00006F06 BE[F26D0000]        <1> 		mov esi, gotomenu
  8722 00006F0B 668B0D[1B4B0000]    <1> 		mov cx, [resolutiony]
  8723 00006F12 6681E93000          <1> 		sub cx, 48
  8724 00006F17 6631D2              <1> 		xor dx, dx
  8725 00006F1A 30E4                <1> 		xor ah, ah
  8726 00006F1C B010                <1> 		mov al, 00010000b
  8727 00006F1E BB[9A6E0000]        <1> 		mov ebx, gotomenuboot
  8728 00006F23 E902F6FFFF          <1> 		jmp showstring
  8729                              <1> 
  8730 00006F28 20035802            <1> 	termwindow:	dw 800,600	;;window size
  8731 00006F2C 534855536800        <1> 	termmsg:	db "SHUSh",0	;;window title
  8732                              <1> 	
  8733 00006F2C <incbin>            <1> interneticon: 	incbin 'source/gui/icons/internet'
  8734 00006F2C <incbin>            <1> wordicon: 	incbin 'source/gui/icons/word'
  8735 00006F2C <incbin>            <1> pacmanpellet: incbin 'source/gui/icons/pellet'
  8736 00006F2C <incbin>            <1> ghostie	incbin 'source/gui/icons/ghostie'
  8737 00006F2C <incbin>            <1> pacman	incbin 'source/gui/icons/pacman'
  8738                                  %endif
  8739                                      %include "source/data.asm"
  8740 000071BC 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
  8741 000071C4 73687573683A2000    <1> 	notfound1 db "shush: ",0
  8742 000071CC 3A20636F6D6D616E64- <1> 	notfound2 db  ": command not found",10,0
  8743 000071D5 206E6F7420666F756E- <1>
  8744 000071DE 640A00              <1>
  8745 000071E1 757365726E616D653A- <1> 	userask db "username:",0
  8746 000071EA 00                  <1>
  8747 000071EB 70617373776F72643A- <1> 	pwdask	db	"password:",0
  8748 000071F4 00                  <1>
  8749 000071F5 40                  <1> 	computer db "@"
  8750                              <1> %ifdef io.serial
  8751                              <1> 	computername	db	"SollerOS.",io.serial," ",0
  8752                              <1> %else
  8753 000071F6 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
  8754 000071FF 00                  <1>
  8755                              <1> %endif
  8756 00007200 5D242000            <1> 	endprompt db "]$ ",0
  8757 00007204 0D                  <1> 	crlf 	db  13
  8758 00007205 0A00                <1> 	line	db	10,0
  8759                              <1> 	userlst:
  8760 00007207 726F6F7400          <1> 			db "root",0
  8761 0000720C 617765736F6D65706F- <1> 			db "awesomepower",0
  8762 00007215 77657200            <1>
  8763 00007219 7573657200          <1> 			db "user",0
  8764 0000721E 70617373776F726400  <1> 			db "password",0
  8765 00007227 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
  8766 00007229 00                  <1> 			db 0
  8767                              <1> 	userlstend:
  8768                              <1> 	
  8769                              <1> %ifdef io.serial
  8770                              <1> %else
  8771 00007229 <incbin>            <1> fonts:	incbin "source/precompiled/fonts.pak"
  8772                              <1> fontend:
  8773                              <1> %endif
  8774                              <1> osend:	;this is the end of the operating system's space on disk
  8775                                      %include "build/fileindex.asm"
  8776                              <1> diskfileindex:
  8777 0000822A 617267746573742E65- <1> db "argtest.elf",0
  8778 00008233 6C6600              <1>
  8779 00008236 42000000            <1> dd (f0-$$)/512
  8780 0000823A 06010000            <1> dd (f1-f0)/512
  8781 0000823E 6261636B67726F756E- <1> db "background.bmp",0
  8782 00008247 642E626D7000        <1>
  8783 0000824D 48010000            <1> dd (f1-$$)/512
  8784 00008251 01140000            <1> dd (f2-f1)/512
  8785 00008255 626F6F7400          <1> db "boot",0
  8786 0000825A 49150000            <1> dd (f2-$$)/512
  8787 0000825E 01000000            <1> dd (f3-f2)/512
  8788 00008262 63686172746573742E- <1> db "chartest.elf",0
  8789 0000826B 656C6600            <1>
  8790 0000826F 4A150000            <1> dd (f3-$$)/512
  8791 00008273 26010000            <1> dd (f4-f3)/512
  8792 00008277 646F73746573742E63- <1> db "dostest.com",0
  8793 00008280 6F6D00              <1>
  8794 00008283 70160000            <1> dd (f4-$$)/512
  8795 00008287 01000000            <1> dd (f5-f4)/512
  8796 0000828B 6578656300          <1> db "exec",0
  8797 00008290 71160000            <1> dd (f5-$$)/512
  8798 00008294 01000000            <1> dd (f6-f5)/512
  8799 00008298 66696E616C636F756E- <1> db "finalcount.snd",0
  8800 000082A1 742E736E6400        <1>
  8801 000082A7 72160000            <1> dd (f6-$$)/512
  8802 000082AB 01000000            <1> dd (f7-f6)/512
  8803 000082AF 666F726B00          <1> db "fork",0
  8804 000082B4 73160000            <1> dd (f7-$$)/512
  8805 000082B8 01000000            <1> dd (f8-f7)/512
  8806 000082BC 68656C6C6F776F726C- <1> db "helloworld.elf",0
  8807 000082C5 642E656C6600        <1>
  8808 000082CB 74160000            <1> dd (f8-$$)/512
  8809 000082CF D6010000            <1> dd (f9-f8)/512
  8810 000082D3 696E7400            <1> db "int",0
  8811 000082D7 4A180000            <1> dd (f9-$$)/512
  8812 000082DB 01000000            <1> dd (f10-f9)/512
  8813 000082DF 6C6F7374776F6F6473- <1> db "lostwoods.snd",0
  8814 000082E8 2E736E6400          <1>
  8815 000082ED 4B180000            <1> dd (f10-$$)/512
  8816 000082F1 01000000            <1> dd (f11-f10)/512
  8817 000082F5 6D6172696F2E736E64- <1> db "mario.snd",0
  8818 000082FE 00                  <1>
  8819 000082FF 4C180000            <1> dd (f11-$$)/512
  8820 00008303 01000000            <1> dd (f12-f11)/512
  8821 00008307 736F6C6C65726F732E- <1> db "solleros.bmp",0
  8822 00008310 626D7000            <1>
  8823 00008314 4D180000            <1> dd (f12-$$)/512
  8824 00008318 B0020000            <1> dd (f13-f12)/512
  8825 0000831C 736F6C6C65726F732E- <1> db "solleros.txt",0
  8826 00008325 74787400            <1>
  8827 00008329 FD1A0000            <1> dd (f13-$$)/512
  8828 0000832D 01000000            <1> dd (f14-f13)/512
  8829 00008331 736F6E676F74696D65- <1> db "songotime.snd",0
  8830 0000833A 2E736E6400          <1>
  8831 0000833F FE1A0000            <1> dd (f14-$$)/512
  8832 00008343 01000000            <1> dd (f15-f14)/512
  8833 00008347 73736500            <1> db "sse",0
  8834 0000834B FF1A0000            <1> dd (f15-$$)/512
  8835 0000834F 02000000            <1> dd (f16-f15)/512
  8836 00008353 737464696F74657374- <1> db "stdiotest.elf",0
  8837 0000835C 2E656C6600          <1>
  8838 00008361 011B0000            <1> dd (f16-$$)/512
  8839 00008365 27010000            <1> dd (f17-f16)/512
  8840 00008369 74656C7900          <1> db "tely",0
  8841 0000836E 281C0000            <1> dd (f17-$$)/512
  8842 00008372 01000000            <1> dd (f18-f17)/512
  8843 00008376 74696D65746573742E- <1> db "timetest.elf",0
  8844 0000837F 656C6600            <1>
  8845 00008383 291C0000            <1> dd (f18-$$)/512
  8846 00008387 04010000            <1> dd (f19-f18)/512
  8847 0000838B 7475746F7269616C2E- <1> db "tutorial.sh",0
  8848 00008394 736800              <1>
  8849 00008397 2D1D0000            <1> dd (f19-$$)/512
  8850 0000839B 03000000            <1> dd (f20-f19)/512
  8851 0000839F 756E667300          <1> db "unfs",0
  8852 000083A4 301D0000            <1> dd (f20-$$)/512
  8853 000083A8 02000000            <1> dd (f21-f20)/512
  8854 000083AC 766963746F72792E77- <1> db "victory.wav",0
  8855 000083B5 617600              <1>
  8856 000083B8 321D0000            <1> dd (f21-$$)/512
  8857 000083BC 16000000            <1> dd (f22-f21)/512
  8858 000083C0 5F696D672E62696E00  <1> db "_img.bin",0
  8859 000083C9 481D0000            <1> dd (f22-$$)/512
  8860 000083CD D7020000            <1> dd (f23-f22)/512
  8861                              <1> enddiskfileindex:
  8862                              <1> 
  8863                                      %include "source/bss.asm"
  8864 000083D1 90<rept>            <1> align 4, nop
  8865                              <1> bssstart: equ $
  8866                              <1> guion equ bssstart
  8867                              <1> DriveNumber equ guion + 1
  8868                              <1> lbaad equ DriveNumber + 1
  8869                              <1> memlistbuf equ lbaad + 4
  8870                              <1> memlistend equ memlistbuf + 576
  8871                              <1> bsscopy equ memlistend
  8872                              <1> initialstack equ bsscopy
  8873                              <1> stackend equ initialstack + 4000
  8874                              <1> fileindex: equ stackend + 96
  8875                              <1> fileindexend: equ fileindex + 1024
  8876                              <1> previousstack equ fileindexend
  8877                              <1> lastfolderloc equ previousstack + 4
  8878                              <1> currentfolderloc equ lastfolderloc + 4
  8879                              <1> currentfolder equ currentfolderloc + 4
  8880                              <1> currentfolderend equ currentfolder + 512
  8881                              <1> uid equ currentfolderend
  8882                              <1> ranboot equ uid + 4
  8883                              <1> IFON equ ranboot + 1
  8884                              <1> IFTRUE equ IFON + 1
  8885                              <1> BATCHPOS equ IFTRUE + 100
  8886                              <1> BATCHISON equ BATCHPOS + 4
  8887                              <1> LOOPON equ BATCHISON + 1
  8888                              <1> LOOPPOS	equ LOOPON + 1
  8889                              <1> variables: equ LOOPPOS + 4
  8890                              <1> varend: equ variables + 4096
  8891                              <1> buftxt2: equ varend
  8892                              <1> buftxt: equ buftxt2 + 1024
  8893                              <1> buftxtend: equ buftxt + 1024
  8894                              <1> buf2: equ buftxtend
  8895                              <1> numbuf: equ buf2 + 20
  8896                              <1> %ifdef io.serial
  8897                              <1> 	lastcommandpos equ numbuf + 1
  8898                              <1> %else
  8899                              <1> 	%ifdef gui.included
  8900                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
  8901                              <1> 		graphicstableend equ graphicstable + 200h
  8902                              <1> 		%ifdef gui.background
  8903                              <1> 			backgroundbuffer equ graphicstableend
  8904                              <1> 			mousecolorbuf equ backgroundbuffer + 1280*1025*2
  8905                              <1> 		%else
  8906                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
  8907                              <1> 		%endif
  8908                              <1> 		mcolorend equ mousecolorbuf + 256
  8909                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
  8910                              <1> 		videobufend	equ videobuf + 210*65*2
  8911                              <1> 		videobuf2 equ videobufend
  8912                              <1> 		videobuf2end equ videobuf2 + 210*65*2
  8913                              <1> 	%else
  8914                              <1> 		videobuf equ numbuf + 1
  8915                              <1> 		videobufend equ videobuf + 80*30*2
  8916                              <1> 		videobuf2 equ videobufend
  8917                              <1> 		videobuf2end equ videobuf2 + 160*64*2
  8918                              <1> 	%endif
  8919                              <1> 	lastcommandpos: equ videobuf2end
  8920                              <1> %endif
  8921                              <1> 	commandbufpos: equ lastcommandpos + 4
  8922                              <1> 	commandbuf: equ commandbufpos + 4
  8923                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
  8924                              <1> %ifdef rtl8139.included
  8925                              <1> 	rbuffstart: equ commandbufend ;for use with networking
  8926                              <1> 	rbuffend equ rbuffstart + 8212
  8927                              <1> %else
  8928                              <1> 	rbuffstart equ commandbufend
  8929                              <1> 	rbuffend equ commandbufend
  8930                              <1> %endif
  8931                              <1> %ifdef threads.included
  8932                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
  8933                              <1> 	threadlistend: equ threadlist + 1024*4
  8934                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
  8935                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
  8936                              <1> 	bssend equ stack1 + 1024*1024
  8937                              <1> %else
  8938                              <1> 	bssend equ rbuffend
  8939                              <1> %endif
  8940                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
  8941                                      %include "build/files.asm"
  8942 000083D4 00<rept>            <1> align 512,db 0
  8943                              <1> f0:
  8944 000083D4 <incbin>            <1> incbin "included/argtest.elf"
  8945 00028EF2 00<rept>            <1> align 512,db 0
  8946                              <1> f1:
  8947 00028EF2 <incbin>            <1> incbin "included/background.bmp"
  8948 002A9046 00<rept>            <1> align 512,db 0
  8949                              <1> f2:
  8950 002A9046 <incbin>            <1> incbin "included/boot"
  8951 002A924D 00<rept>            <1> align 512,db 0
  8952                              <1> f3:
  8953 002A924D <incbin>            <1> incbin "included/chartest.elf"
  8954 002CDEDB 00<rept>            <1> align 512,db 0
  8955                              <1> f4:
  8956 002CDEDB <incbin>            <1> incbin "included/dostest.com"
  8957 002CE12B 00<rept>            <1> align 512,db 0
  8958                              <1> f5:
  8959 002CE12B <incbin>            <1> incbin "included/exec"
  8960 002CE2E9 00<rept>            <1> align 512,db 0
  8961                              <1> f6:
  8962 002CE2E9 <incbin>            <1> incbin "included/finalcount.snd"
  8963 002CE502 00<rept>            <1> align 512,db 0
  8964                              <1> f7:
  8965 002CE502 <incbin>            <1> incbin "included/fork"
  8966 002CE762 00<rept>            <1> align 512,db 0
  8967                              <1> f8:
  8968 002CE762 <incbin>            <1> incbin "included/helloworld.elf"
  8969 003093E3 00<rept>            <1> align 512,db 0
  8970                              <1> f9:
  8971 003093E3 <incbin>            <1> incbin "included/int"
  8972 003095A9 00<rept>            <1> align 512,db 0
  8973                              <1> f10:
  8974 003095A9 <incbin>            <1> incbin "included/lostwoods.snd"
  8975 00309656 00<rept>            <1> align 512,db 0
  8976                              <1> f11:
  8977 00309656 <incbin>            <1> incbin "included/mario.snd"
  8978 0030983A 00<rept>            <1> align 512,db 0
  8979                              <1> f12:
  8980 0030983A <incbin>            <1> incbin "included/solleros.bmp"
  8981 0035F9E6 00<rept>            <1> align 512,db 0
  8982                              <1> f13:
  8983 0035F9E6 <incbin>            <1> incbin "included/solleros.txt"
  8984 0035FB76 00<rept>            <1> align 512,db 0
  8985                              <1> f14:
  8986 0035FB76 <incbin>            <1> incbin "included/songotime.snd"
  8987 0035FC4A 00<rept>            <1> align 512,db 0
  8988                              <1> f15:
  8989 0035FC4A <incbin>            <1> incbin "included/sse"
  8990 003600A8 00<rept>            <1> align 512,db 0
  8991                              <1> f16:
  8992 003600A8 <incbin>            <1> incbin "included/stdiotest.elf"
  8993 00384E43 00<rept>            <1> align 512,db 0
  8994                              <1> f17:
  8995 00384E43 <incbin>            <1> incbin "included/tely"
  8996 003851C0 00<rept>            <1> align 512,db 0
  8997                              <1> f18:
  8998 003851C0 <incbin>            <1> incbin "included/timetest.elf"
  8999 003A583D 00<rept>            <1> align 512,db 0
  9000                              <1> f19:
  9001 003A583D <incbin>            <1> incbin "included/tutorial.sh"
  9002 003A5F52 00<rept>            <1> align 512,db 0
  9003                              <1> f20:
  9004 003A5F52 <incbin>            <1> incbin "included/unfs"
  9005                              <1> align 512,db 0
  9006                              <1> f21:
  9007 003A5F52 <incbin>            <1> incbin "included/victory.wav"
  9008 003A8F48 00<rept>            <1> align 512,db 0
  9009                              <1> f22:
  9010 003A8F48 <incbin>            <1> incbin "included/_img.bin"
  9011                              <1> align 512,db 0
  9012                              <1> f23:
