     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> ;%define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define font.unicode
    29                              <1> ;Include a unicode font. Disable to use an ascii font
    30                              <1> 	
    31                              <1> %define hardware.automatic
    32                              <1> ;Automatically load the sound and network drivers.
    33                              <1> 
    34                              <1> %define threads.included
    35                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    36                              <1> 
    37                              <1> %define exceptions.included
    38                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    39                              <1> 
    40                              <1> ;%define disk.protected
    41                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    42                              <1> 
    43                              <1> %define disk.real
    44                              <1> ;Use real mode for disk access-this gives greater compatibility
    45                              <1> 
    46                              <1> %define sound.included
    47                              <1> ;This includes the sound drivers
    48                              <1> 
    49                              <1> %define network.included
    50                              <1> ;This includes the network stack
    51                              <1> 
    52                              <1> ;%define rtl8169.included
    53                              <1> ;This includes the RTL8169 drivers
    54                              <1> 
    55                              <1> ;%define rtl8139.included
    56                              <1> ;This includes the RTL8139 drivers
    57                              <1> 
    58                              <1> %define ne2000.included
    59                              <1> ;This includes the ne2000 drivers
    60                              <1> 
    61                              <1> ;%define i8254x.included
    62                              <1> ;This includes the Intel 8254x drivers
    63                              <1> 
    64                              <1> ;%define sector.debug
    65                              <1> ;Dump the contents of the first sector of SollerOS
    66                              <1> 
    67                              <1> ;%define dos.compatible
    68                              <1> ;Make the kernel loadable by dos.
    69                              <1> 
    70                              <1> ;%define system.simple
    71                              <1> ;The smallest possible system, overrides all options
    72                              <1> 
    73                              <1> ;FIX DEPENDANCIES
    74                              <1> %ifdef system.simple
    75                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef dos.compatible
    79                              <1> 	%define UNDEFALL
    80                              <1> %endif
    81                              <1> %ifdef UNDEFALL
    82                              <1> 	%undef io.serial
    83                              <1> 	%undef disk.real
    84                              <1> 	%undef gui.included
    85                              <1> 	%undef gui.alphablending
    86                              <1> 	%undef gui.background
    87                              <1> 	%undef terminal.vsync
    88                              <1> 	%undef font.unicode
    89                              <1> 	%undef hardware.automatic
    90                              <1> 	%undef threads.included
    91                              <1> 	%undef exceptions.included
    92                              <1> 	%undef disk.protected
    93                              <1> 	%undef sound.included
    94                              <1> 	%undef network.included
    95                              <1> 	%undef rtl8139.included
    96                              <1> 	%undef rtl8169.included
    97                              <1> 	%undef ne2000.included
    98                              <1> 	%undef i8254x.included
    99                              <1> 	%undef sector.debug
   100                              <1> 	%undef UNDEFALL
   101                              <1> %endif
   102                              <1> %ifdef system.simple
   103                              <1> 	%define io.serial "1"
   104                              <1> 	%define disk.real
   105                              <1> %endif
   106                              <1> %ifdef gui.included
   107                              <1> 	%undef io.serial
   108                              <1> %else
   109                              <1> 	%undef gui.alphablending
   110                              <1> 	%undef gui.background
   111                              <1> %endif
   112                              <1> %ifdef network.included
   113                              <1> %else
   114                              <1> 	%undef i8254x.included
   115                              <1> 	%undef ne2000.included
   116                              <1> 	%undef rtl8139.included
   117                              <1> 	%undef rtl8169.included
   118                              <1> %endif
   119                              <1> %ifdef disk.protected
   120                              <1> 	%undef disk.real
   121                              <1> %else
   122                              <1> 	%ifdef disk.real
   123                              <1> 	%else
   124                              <1> 		%define disk.none
   125                              <1> 	%endif
   126                              <1> %endif
   127                                  [ORG 0x100]
   128                                  	%include "source/signature.asm"
   129                              <1> header:
   130 00000000 EB12                <1> 	jmp short boot
   131                              <1> signature:
   132 00000002 536F6C6C65724F5320- <1> db "SollerOS ",0 ;Operating system name
   133 0000000B 00                  <1>
   134 0000000C 13010000            <1> dd 275	;version number
   135                              <1> signatureend:
   136 00000010 00680300                	dd bsscopy - header ;size of kernel data on disk
   137                                  [BITS 16]
   138                                      %include "source/boot.asm"
   139                              <1> boot:
   140 00000014 8CC8                <1> 	mov ax, cs
   141 00000016 8ED8                <1> 	mov ds, ax
   142 00000018 8EC0                <1> 	mov es, ax
   143 0000001A 8ED0                <1> 	mov ss, ax
   144 0000001C 0F31                <1> 	rdtsc
   145 0000001E 66A3[E462]          <1> 	mov [initialtsc], eax
   146 00000022 668916[E862]        <1> 	mov [initialtsc + 4], edx
   147 00000027 66A3[EC62]          <1> 	mov [lasttsc], eax
   148 0000002B 668916[F062]        <1> 	mov [lasttsc + 4], edx
   149 00000030 880E[DF62]          <1> 	mov [DriveNumber], cl
   150 00000034 66891E[E062]        <1> 	mov [lbaad], ebx
   151                              <1> %ifdef io.serial
   152                              <1> 	call getmemorysize
   153                              <1> 	mov si, serialmsg
   154                              <1> 	call printrm
   155                              <1> 	jmp pmode
   156                              <1> serialmsg: db 10,13,"SollerOS: Using serial port ",io.serial," for I/O.",0
   157                              <1> %else
   158 00000039 E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   159 0000003C E95400              <1> 	jmp pmode
   160                              <1> %endif
   161                              <1> 	
   162                              <1> vgaset:
   163 0000003F B81200              <1> 	mov ax, 12h
   164 00000042 31DB                <1> 	xor bx, bx
   165 00000044 CD10                <1> 	int 10h
   166 00000046 C606[DE62]00        <1> 	mov byte [guion], 0
   167 0000004B E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   168 0000004E C3                  <1> 	ret
   169                              <1> 
   170                              <1> getmemorysize:
   171 0000004F BF[F462]            <1> 	mov di, memlistbuf
   172 00000052 6631DB              <1> 	xor ebx, ebx
   173                              <1> getmemsizeloop:
   174 00000055 66B820E80000        <1> 	mov eax, 0xE820
   175 0000005B 66BA50414D53        <1> 	mov edx, 0x0534D4150
   176 00000061 66B918000000        <1> 	mov ecx, 24
   177 00000067 CD15                <1> 	int 0x15
   178 00000069 81C71800            <1> 	add di, 24
   179 0000006D 81FF[3465]          <1> 	cmp di, memlistend
   180 00000071 7305                <1> 	jae nomoregetmemsize
   181 00000073 6685DB              <1> 	test ebx, ebx
   182 00000076 75DD                <1> 	jnz getmemsizeloop
   183                              <1> nomoregetmemsize:
   184 00000078 81EF[F462]          <1> 	sub di, memlistbuf
   185 0000007C 893E[3465]          <1> 	mov [memlistend], di
   186 00000080 C3                  <1> 	ret
   187                              <1> 	
   188                              <1> printrm:			; 'si' comes in with string address
   189 00000081 BB0700              <1>     mov bx,07		; write to display
   190 00000084 B40E                <1>     mov ah,0Eh		; screen function
   191 00000086 8A04                <1>    .lp:    mov al,[si]         ; get next character
   192 00000088 84C0                <1>     test al,al		; look for terminator 
   193 0000008A 7406                <1>     jz .done	; zero byte at end of string
   194 0000008C CD10                <1>     int 10h		; write character to screen.    
   195 0000008E 46                  <1> 	inc si	     	; move to next character
   196 0000008F E9F4FF              <1>     jmp .lp		; loop
   197 00000092 C3                  <1> .done: ret
   198                                      %include "source/pmode.asm"
   199                              <1> [BITS 16]
   200                              <1> 
   201                              <1> pmode:
   202 00000093 6631C0              <1> 	xor eax, eax
   203 00000096 6631DB              <1> 	xor ebx, ebx
   204 00000099 6631C9              <1> 	xor ecx, ecx
   205 0000009C 6631D2              <1> 	xor edx, edx
   206 0000009F 6631F6              <1> 	xor esi, esi
   207 000000A2 6631FF              <1> 	xor edi, edi
   208 000000A5 BA9200              <1> 	mov dx, 0x92
   209 000000A8 EC                  <1> 	in al, dx	;A20
   210 000000A9 0C02                <1> 	or al, 2
   211 000000AB EE                  <1> 	out dx, al
   212 000000AC 8CCB                <1> 	mov bx,cs		; EBX=segment
   213 000000AE 66C1E304            <1> 	shl ebx,4		;	<< 4
   214 000000B2 6689D8              <1> 	mov eax, ebx		; EAX=linear address of segment base
   215 000000B5 A3[8203]            <1> 	mov [gdt2 + 2],ax
   216 000000B8 A3[8A03]            <1> 	mov [gdt3 + 2],ax
   217 000000BB 66C1E810            <1> 	shr eax,16
   218 000000BF A2[8403]            <1> 	mov [gdt2 + 4],al
   219 000000C2 A2[8C03]            <1> 	mov [gdt3 + 4],al
   220 000000C5 8826[8703]          <1> 	mov [gdt2 + 7],ah
   221 000000C9 8826[8F03]          <1> 	mov [gdt3 + 7],ah
   222                              <1> 
   223 000000CD 66B8[00680300]      <1> 	mov eax, initialstack
   224 000000D3 660306[2A02]        <1> 	add eax, [newcodecache]
   225 000000D8 A3[7A03]            <1> 	mov [gdts + 2],ax
   226 000000DB 66C1E810            <1> 	shr eax, 16
   227 000000DF A2[7C03]            <1> 	mov [gdts + 4],al
   228 000000E2 8826[7F03]          <1> 	mov [gdts + 7], ah
   229                              <1> 	
   230 000000E6 66A1[2A02]          <1> 	mov eax, [newcodecache]
   231 000000EA A3[9203]            <1> 	mov [gdt4 + 2],ax
   232 000000ED A3[9A03]            <1> 	mov [gdt5 + 2],ax
   233 000000F0 A3[A203]            <1> 	mov [gdtv8086 + 2], ax
   234 000000F3 A3[AA03]            <1> 	mov [gdtv80862 + 2], ax
   235 000000F6 66C1E810            <1> 	shr eax,16
   236 000000FA A2[9403]            <1> 	mov [gdt4 + 4],al
   237 000000FD A2[9C03]            <1> 	mov [gdt5 + 4],al
   238 00000100 A2[A403]            <1> 	mov [gdtv8086 + 4],al
   239 00000103 A2[AC03]            <1> 	mov [gdtv80862 + 4],al
   240 00000106 8826[9703]          <1> 	mov [gdt4 + 7],ah
   241 0000010A 8826[9F03]          <1> 	mov [gdt5 + 7],ah
   242 0000010E 8826[A703]          <1> 	mov [gdtv8086 + 7],ah
   243 00000112 8826[AF03]          <1> 	mov [gdtv80862 + 7],ah
   244                              <1> 	
   245 00000116 66B800004000        <1> 	mov eax, dosprogloc
   246 0000011C 660306[2A02]        <1> 	add eax, [newcodecache]
   247 00000121 A3[B203]            <1> 	mov [gdtdos + 2],ax
   248 00000124 A3[BA03]            <1> 	mov [gdtdos2 + 2],ax
   249 00000127 66C1E810            <1> 	shr eax,16
   250 0000012B A2[B403]            <1> 	mov [gdtdos + 4],al
   251 0000012E A2[BC03]            <1> 	mov [gdtdos2 + 4],al
   252 00000131 8826[B703]          <1> 	mov [gdtdos + 7],ah
   253 00000135 8826[BF03]          <1> 	mov [gdtdos2 + 7],ah
   254                              <1> 	
   255                              <1> ; fix up gdt and idt
   256 00000139 67668D83[68030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   257 00000141 66A3[5E03]          <1> 	mov [gdtr + 2],eax
   258 00000145 67668D83[C0030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   259 0000014D 66A3[6403]          <1> 	mov [idtr + 2],eax
   260 00000151 FA                  <1> 	cli
   261 00000152 0F0116[5C03]        <1> 	lgdt [gdtr]
   262 00000157 0F011E[6203]        <1> 	lidt [idtr]
   263 0000015C 6631DB              <1> 	xor ebx, ebx
   264 0000015F 8CDB                <1> 	mov bx, ds
   265 00000161 66891E[2602]        <1> 	mov [basecache], ebx
   266 00000166 0F20C0              <1> 	mov eax,cr0
   267 00000169 0C01                <1> 	or al,1
   268 0000016B 0F22C0              <1> 	mov cr0,eax
   269 0000016E EA[7301]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   270                              <1> [BITS 32]
   271                              <1> do_pm:
   272 00000173 31C0                <1> 	xor eax, eax
   273 00000175 66B82000            <1> 	mov ax, SYS_DATA_SEL
   274 00000179 8ED8                <1> 	mov ds, ax
   275 0000017B 8EC0                <1> 	mov es, ax
   276 0000017D 8EE0                <1> 	mov fs, ax
   277 0000017F 66B83000            <1> 	mov ax, NEW_DATA_SEL
   278 00000183 8EE8                <1> 	mov gs, ax
   279                              <1> 	
   280                              <1> copykernel:
   281 00000185 648B06              <1> 	mov eax, [fs:esi]
   282 00000188 658906              <1> 	mov [gs:esi], eax
   283 0000018B 81C604000000        <1> 	add esi, 4
   284 00000191 81FE[00680300]      <1> 	cmp esi, bsscopy
   285 00000197 72EC                <1> 	jb copykernel
   286 00000199 EA[A0010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   287                              <1> 	
   288                              <1> done_copy:
   289 000001A0 66B83000            <1> 	mov ax, NEW_DATA_SEL	;these MUST be setup AFTER the kernel switches places!!!
   290 000001A4 8ED8                <1> 	mov ds, ax
   291 000001A6 8EC0                <1> 	mov es, ax
   292 000001A8 8EE0                <1> 	mov fs, ax
   293                              <1> 	;mov ax, STACK_SEL
   294 000001AA 8ED0                <1> 	mov ss, ax
   295 000001AC BC[00880300]        <1> 	mov esp, stackend
   296 000001B1 66B82000            <1> 	mov ax, SYS_DATA_SEL
   297 000001B5 8EE8                <1> 	mov gs, ax
   298                              <1> 	
   299 000001B7 E846560000          <1> 	call initialize	;initialize drivers
   300                              <1> 	
   301 000001BC A1[2A020000]        <1> 	mov eax, [newcodecache]
   302 000001C1 C1E804              <1> 	shr eax, 4
   303 000001C4 A3[26020000]        <1> 	mov [basecache], eax
   304                              <1> 	
   305 000001C9 BE[C1351400]        <1> 	mov esi, bssend
   306 000001CE 31C0                <1> 	xor eax, eax
   307                              <1> clearkernelbuffers:
   308 000001D0 8906                <1> 	mov [esi], eax
   309 000001D2 81EE04000000        <1> 	sub esi, 4
   310 000001D8 81FE[00680300]      <1> 	cmp esi, bsscopy
   311 000001DE 77F0                <1> 	ja clearkernelbuffers
   312 000001E0 FB                  <1> 	sti
   313                              <1> 
   314                              <1> getmemoryspace:
   315 000001E1 BE[F4620000]        <1> 	mov esi, memlistbuf
   316 000001E6 31FF                <1> 	xor edi, edi
   317 000001E8 668B3D[34650000]    <1> 	mov di, [memlistend]
   318 000001EF 01F7                <1> 	add edi, esi
   319 000001F1 31C0                <1> 	xor eax, eax
   320                              <1> memoryspaceaddition:
   321 000001F3 39FE                <1> 	cmp esi, edi
   322 000001F5 7325                <1> 	jae finishedmemspacecalc
   323 000001F7 81C608000000        <1> 	add esi, 8
   324 000001FD 8B0E                <1> 	mov ecx, [esi]
   325 000001FF 81C608000000        <1> 	add esi, 8
   326 00000205 8B1E                <1> 	mov ebx, [esi]
   327 00000207 81C608000000        <1> 	add esi, 8
   328 0000020D 81FB01000000        <1> 	cmp ebx, 1
   329 00000213 75DE                <1> 	jne memoryspaceaddition
   330 00000215 01C8                <1> 	add eax, ecx
   331 00000217 E9D7FFFFFF          <1> 	jmp memoryspaceaddition
   332                              <1> finishedmemspacecalc:
   333 0000021C A3[3B020000]        <1> 	mov [memoryspace], eax
   334                              <1> %ifdef gui.included
   335                              <1> 	cmp byte [guion], 0
   336                              <1> 	je normalstartup
   337                              <1> 	mov ebx, [basecache]
   338                              <1> 	shl ebx, 4
   339                              <1> 	mov edi, [physbaseptr]
   340                              <1> 	sub edi, ebx
   341                              <1> 	mov [physbaseptr], edi
   342                              <1> 	jmp guiboot
   343                              <1> %endif
   344                              <1> normalstartup:
   345 00000221 E981260000          <1> 	jmp os
   346                              <1> 	
   347 00000226 00000000            <1> basecache dd 0
   348 0000022A 00001000            <1> newcodecache dd 0x100000
   349                              <1> 
   350 0000022E 00                  <1> testingcpuspeed db 0
   351 0000022F 00000000            <1> cpuspeedperint dd 0
   352 00000233 0000000000000000    <1> cpuclocksperint dd 0,0
   353 0000023B 00000000            <1> memoryspace dd 0
   354 0000023F 7D0A                <1> pitdiv dw 2685
   355 00000241 2E562200            <1> timeinterval dd 2250286
   356                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   357                              <1> ;for the pit, note that div=1 gives 838.09ns, the clock runs at 1.193182 MHz
   358                              <1> ;div=451 is 377981.0004, div=902 is 755962.0008,
   359                              <1> ;div=2685 is 2250286.00004ns, div=5370 is 4500572.00007ns
   360                              <1> ;div=55483 is 46500044.000006ns
   361                              <1> ;use one of those values for the minimum error
   362                              <1> 
   363 00000245 00                  <1> ticks db 0
   364 00000246 00000000            <1> timeseconds dd 0
   365 0000024A 00000000            <1> timenanoseconds dd 0
   366 0000024E 00                  <1> soundon db 0
   367 0000024F 0000                <1> soundrepititions dw 0
   368 00000251 00000000            <1> soundpos dd 0
   369 00000255 00000000            <1> soundendpos dd 0
   370                              <1> 
   371                              <1> cpuspeedend:
   372 00000259 C605[2E020000]00    <1> 	mov byte [testingcpuspeed], 0
   373 00000260 A3[2F020000]        <1> 	mov [cpuspeedperint], eax
   374 00000265 B8[124D0000]        <1> 	mov eax, cpuspeedloopend
   375 0000026A 890424              <1> 	mov [esp], eax
   376 0000026D E9DA000000          <1> 	jmp handled
   377                              <1> 
   378                              <1> pitinterrupt: ;this controls threading
   379 00000272 803D[2E020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   380 00000279 74DE                <1> 	je cpuspeedend
   381                              <1> 
   382 0000027B E8A6000000          <1> 	call timekeeper ;this updates the internal time
   383                              <1> 	
   384 00000280 803D[4E020000]01    <1> 	cmp byte [soundon], 1
   385 00000287 0F84094D0000        <1> 	je near PCSpeakerRAW
   386                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   387                              <1> %ifdef threads.included
   388 0000028D 803D[135E0000]01    <1> 	cmp byte [threadson], 1
   389 00000294 0F84195B0000        <1> 	je near threadswitch
   390                              <1> %endif
   391                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   392 0000029A 803D[135E0000]00    <1> 	cmp byte [threadson], 0
   393 000002A1 0F84A5000000        <1> 	je near handled
   394                              <1> %ifdef io.serial
   395                              <1> 	jmp handled
   396                              <1> %else
   397 000002A7 FE05[45020000]      <1> 	inc byte [ticks] ;every 256 ticks, check for keys
   398 000002AD 0F8599000000        <1> 	jnz near handled
   399                              <1> 	
   400 000002B3 60                  <1> 	pusha
   401 000002B4 E464                <1> 	in al, 64h
   402 000002B6 A820                <1> 	test al, 20h
   403 000002B8 0F858D000000        <1> 	jnz near handled2
   404 000002BE E460                <1> 	in al, 60h
   405 000002C0 3C01                <1> 	cmp al, 1		;escape
   406 000002C2 7405                <1> 	je userint
   407 000002C4 E982000000          <1> 	jmp handled2
   408                              <1> ;	cmp al, 0x57
   409                              <1> ;	jne near handled2
   410                              <1> ;pauseint:	;F11 pauses
   411                              <1> ;	in al, 64h
   412                              <1> ;	test al, 20h
   413                              <1> ;	jnz pauseint
   414                              <1> ;	in al, 60h
   415                              <1> ;	cmp al, 0xD7
   416                              <1> ;	jne pauseint
   417                              <1> ;	mov esi, pausemsg
   418                              <1> ;	call print
   419                              <1> ;pauselp:
   420                              <1> ;	in al, 64h
   421                              <1> ;	test al, 20h
   422                              <1> ;	jnz pauselp
   423                              <1> ;	in al, 60h
   424                              <1> ;	cmp al, 0x57
   425                              <1> ;	je near handled2
   426                              <1> ;	jmp pauselp
   427                              <1> ;pausemsg db "Paused",10,0
   428                              <1> userint:
   429 000002C9 31C0                <1> 	xor eax, eax
   430 000002CB 3905[04880300]      <1> 	cmp [sigtable], eax
   431 000002D1 7410                <1> 	je .nosighook
   432 000002D3 8B1D[04880300]      <1> 	mov ebx, [sigtable]
   433 000002D9 895C2420            <1> 	mov [esp + 32], ebx
   434                              <1> ;	mov [sigtable], eax
   435 000002DD B020                <1> 	mov al, 0x20
   436 000002DF E620                <1> 	out 0x20, al
   437 000002E1 61                  <1> 	popa
   438 000002E2 CF                  <1> 	iret
   439                              <1> .nosighook:
   440                              <1> 		;UNMASK ALL INTS
   441 000002E3 E621                <1> 	out 0x21, al
   442 000002E5 E6A1                <1> 	out 0xA1, al
   443 000002E7 B020                <1> 	mov al, 0x20
   444 000002E9 E6A0                <1> 	out 0xA0, al
   445 000002EB E620                <1> 	out 0x20, al
   446                              <1> 		;RESET PIT DIVISOR
   447 000002ED 66A1[3F020000]      <1> 	mov ax, [pitdiv]
   448 000002F3 E640                <1> 	out 0x40, al
   449 000002F5 66C1C008            <1> 	rol ax, 8
   450 000002F9 E640                <1> 	out 0x40, al
   451                              <1> 		;RESET PIC
   452 000002FB B020                <1> 	mov al, 0x20
   453 000002FD E620                <1> 	out 0x20, al
   454 000002FF 61                  <1> 	popa
   455 00000300 5D                  <1> 	pop ebp
   456 00000301 5D                  <1> 	pop ebp
   457 00000302 9D                  <1> 	popf
   458 00000303 BC[00880300]        <1> 	mov esp, stackend ;reset stack
   459 00000308 E9FA260000          <1> 	jmp returnfromexp
   460                              <1> %endif
   461 0000030D 0A                  <1> rtcrate db 10
   462                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   463                              <1> %ifdef io.serial
   464                              <1> %else
   465                              <1> %ifdef terminal.vsync
   466                              <1> 	cmp byte [termcopyneeded], 0
   467                              <1> 	je .nocopy
   468                              <1> 	call newtermcopy
   469                              <1> .nocopy
   470                              <1> 	push eax
   471                              <1> 	mov al, 0xC
   472                              <1> 	out 0x70, al
   473                              <1> 	in al, 0x71
   474                              <1> 	pop eax
   475                              <1> %endif
   476                              <1> %endif
   477 0000030E E940000000          <1> 	jmp handledboth
   478                              <1> %ifdef rtl8139.included
   479                              <1> rtl8139.irq:
   480                              <1> 	push edx
   481                              <1> 	push eax
   482                              <1> 	mov edx, [rtl8139.basenicaddr]
   483                              <1> 	add edx, rtl8139.ISR
   484                              <1> 	xor eax, eax
   485                              <1> 	in ax, dx
   486                              <1> 	out dx, ax
   487                              <1> 	pop eax
   488                              <1> 	pop edx
   489                              <1> 	jmp handledboth
   490                              <1> %endif
   491                              <1> %ifdef sound.included
   492                              <1> sblaster.irq:
   493 00000313 60                  <1> 	pusha
   494 00000314 803D[86520000]01    <1> 	cmp byte [SoundBlaster], 1
   495 0000031B 0F845F4D0000        <1> 	je near sblaster.cont
   496 00000321 E925000000          <1> 	jmp handled2
   497                              <1> %endif
   498                              <1> 	
   499                              <1> timekeeper:
   500 00000326 50                  <1> 	push eax
   501 00000327 A1[4A020000]        <1> 	mov eax, [timenanoseconds]
   502 0000032C 0305[41020000]      <1> 	add eax, [timeinterval]
   503 00000332 3D00CA9A3B          <1> 	cmp eax, 1000000000
   504 00000337 720B                <1> 	jb nonanosecondrollover
   505 00000339 FF05[46020000]      <1> 	inc dword [timeseconds]
   506 0000033F 2D00CA9A3B          <1> 	sub eax, 1000000000
   507                              <1> 	%ifdef gui.time
   508                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   509                              <1> 		cmp byte [guion], 1
   510                              <1> 		jne nonanosecondrollover
   511                              <1> 		cmp dword [dragging], 0
   512                              <1> 		jne nonanosecondrollover
   513                              <1> 		pusha
   514                              <1> 		call guitime
   515                              <1> 		popa
   516                              <1> 	%endif
   517                              <1> nonanosecondrollover:
   518 00000344 A3[4A020000]        <1> 	mov [timenanoseconds], eax
   519 00000349 58                  <1> 	pop eax
   520 0000034A C3                  <1> 	ret
   521                              <1> 	
   522                              <1> handled2:
   523 0000034B 61                  <1> 	popa
   524                              <1> handled:
   525 0000034C 50                  <1> 	push eax
   526 0000034D B020                <1> 	mov al, 0x20
   527 0000034F E620                <1> 	out 0x20, al
   528 00000351 58                  <1> 	pop eax
   529 00000352 CF                  <1> 	iret
   530                              <1> handledboth:
   531 00000353 50                  <1> 	push eax
   532 00000354 B020                <1> 	mov al, 0x20
   533 00000356 E6A0                <1> 	out 0xA0, al
   534 00000358 E620                <1> 	out 0x20, al
   535 0000035A 58                  <1> 	pop eax
   536 0000035B CF                  <1> 	iret
   537                              <1> 	
   538                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   539 0000035C 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   540 0000035E 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   541                              <1> 
   542 00000362 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   543 00000364 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   544                              <1> 
   545                              <1> 
   546 00000368 0000                <1> gdt:	dw 0			; limit 15:0
   547 0000036A 0000                <1> 	dw 0			; base 15:0
   548 0000036C 00                  <1> 	db 0			; base 23:16
   549 0000036D 00                  <1> 	db 0			; type
   550 0000036E 00                  <1> 	db 0			; limit 19:16, flags
   551 0000036F 00                  <1> 	db 0			; base 31:24
   552                              <1> ; linear data segment descriptor
   553                              <1> LINEAR_SEL	equ	$-gdt
   554 00000370 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   555 00000372 0000                <1> 	dw 0			; base for this one is always 0
   556 00000374 00                  <1> 	db 0
   557 00000375 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   558 00000376 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   559 00000377 00                  <1> 	db 0
   560                              <1> STACK_SEL	equ $-gdt
   561 00000378 0200                <1> gdts:	dw 2;(stackend)/4096
   562 0000037A 0000                <1> 	dw 0
   563 0000037C 00                  <1> 	db 0
   564 0000037D 92                  <1> 	db 0x92
   565 0000037E CF                  <1> 	db 0xCF
   566 0000037F 00                  <1> 	db 0
   567                              <1> ; code segment descriptor
   568                              <1> SYS_CODE_SEL	equ	$-gdt
   569 00000380 FFFF                <1> gdt2:	dw 0xFFFF
   570 00000382 0000                <1> 	dw 0			; (base gets set above)
   571 00000384 00                  <1> 	db 0
   572 00000385 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   573 00000386 CF                  <1> 	db 0xCF
   574 00000387 00                  <1> 	db 0
   575                              <1> ; data segment descriptor
   576                              <1> SYS_DATA_SEL	equ	$-gdt
   577 00000388 FFFF                <1> gdt3:	dw 0xFFFF
   578 0000038A 0000                <1> 	dw 0			; (base gets set above)
   579 0000038C 00                  <1> 	db 0
   580 0000038D 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   581 0000038E CF                  <1> 	db 0xCF
   582 0000038F 00                  <1> 	db 0
   583                              <1> NEW_CODE_SEL	equ	$-gdt
   584 00000390 FFFF                <1> gdt4:	dw 0xFFFF
   585 00000392 0000                <1> 	dw 0			; (base gets set above)
   586 00000394 00                  <1> 	db 0
   587 00000395 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   588 00000396 CF                  <1> 	db 0xCF
   589 00000397 00                  <1> 	db 0
   590                              <1> ; data segment descriptor
   591                              <1> NEW_DATA_SEL	equ	$-gdt
   592 00000398 FFFF                <1> gdt5:	dw 0xFFFF
   593 0000039A 0000                <1> 	dw 0			; (base gets set above)
   594 0000039C 00                  <1> 	db 0
   595 0000039D 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   596 0000039E CF                  <1> 	db 0xCF
   597 0000039F 00                  <1> 	db 0
   598                              <1> V8086_CODE_SEL	equ $-gdt
   599 000003A0 FFFF                <1> gdtv8086: dw 0xFFFF
   600 000003A2 0000                <1> 	dw 0
   601 000003A4 00                  <1> 	db 0
   602 000003A5 9A                  <1> 	db 0x9A
   603 000003A6 8F                  <1> 	db 0x8F
   604 000003A7 00                  <1> 	db 0
   605                              <1> V8086_DATA_SEL	equ $-gdt
   606 000003A8 FFFF                <1> gdtv80862: dw 0xFFFF
   607 000003AA 0000                <1> 	dw 0
   608 000003AC 00                  <1> 	db 0
   609 000003AD 92                  <1> 	db 0x92
   610 000003AE 8F                  <1> 	db 0x8F
   611 000003AF 00                  <1> 	db 0
   612                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   613 000003B0 0001                <1> gdtdos:	dw 256	;give it 1 MB
   614 000003B2 0000                <1> 	dw 0
   615 000003B4 00                  <1> 	db 0
   616 000003B5 9A                  <1> 	db 0x9A
   617 000003B6 8F                  <1> 	db 0x8F ;16 bit
   618 000003B7 00                  <1> 	db 0
   619                              <1> DOS_DATA_SEL 	equ $-gdt
   620 000003B8 0001                <1> gdtdos2:	dw 256
   621 000003BA 0000                <1> 	dw 0
   622 000003BC 00                  <1> 	db 0
   623 000003BD 92                  <1> 	db 0x92
   624 000003BE 8F                  <1> 	db 0x8F ;16 bit
   625 000003BF 00                  <1> 	db 0
   626                              <1> gdt_end:
   627                              <1> 
   628                              <1> ;	interrupt descriptor table (IDT)
   629                              <1> ; 32 reserved interrupts:
   630                              <1> idt:	
   631                              <1> %assign i 0
   632                              <1> %rep    8
   633                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   634                              <1> %assign i i+1
   635                              <1> %endrep
   636 000003C0 [D80C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   637                              <2> %assign i i+1
   638 000003C8 [E40C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   639                              <2> %assign i i+1
   640 000003D0 [F00C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   641                              <2> %assign i i+1
   642 000003D8 [FC0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   643                              <2> %assign i i+1
   644 000003E0 [080D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   645                              <2> %assign i i+1
   646 000003E8 [140D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   647                              <2> %assign i i+1
   648 000003F0 [200D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   649                              <2> %assign i i+1
   650 000003F8 [2C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   651                              <2> %assign i i+1
   652 00000400 [380D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   653                              <1> %assign i 9
   654                              <1> %rep    23
   655                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   656                              <1> %assign i i+1
   657                              <1> %endrep
   658 00000408 [440D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   659                              <2> %assign i i+1
   660 00000410 [500D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   661                              <2> %assign i i+1
   662 00000418 [5C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   663                              <2> %assign i i+1
   664 00000420 [680D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   665                              <2> %assign i i+1
   666 00000428 [740D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   667                              <2> %assign i i+1
   668 00000430 [800D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   669                              <2> %assign i i+1
   670 00000438 [8C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i i+1
   672 00000440 [980D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i i+1
   674 00000448 [A40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i i+1
   676 00000450 [B00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i i+1
   678 00000458 [BC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i i+1
   680 00000460 [C80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i i+1
   682 00000468 [D40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i i+1
   684 00000470 [E00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i i+1
   686 00000478 [EC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i i+1
   688 00000480 [F80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i i+1
   690 00000488 [040E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i i+1
   692 00000490 [100E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i i+1
   694 00000498 [1C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i i+1
   696 000004A0 [280E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i i+1
   698 000004A8 [340E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i i+1
   700 000004B0 [400E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i i+1
   702 000004B8 [4C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i i+1
   704 000004C0 [5D27]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0 ;dos ints
   705 000004C8 [6127]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   706                              <1> %assign i 0x22
   707                              <1> %rep 14
   708                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   709                              <1> %assign i +1
   710                              <1> %endrep
   711 000004D0 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   712                              <2> %assign i +1
   713 000004D8 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   714                              <2> %assign i +1
   715 000004E0 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i +1
   717 000004E8 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i +1
   719 000004F0 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i +1
   721 000004F8 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i +1
   723 00000500 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i +1
   725 00000508 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i +1
   727 00000510 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i +1
   729 00000518 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i +1
   731 00000520 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i +1
   733 00000528 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i +1
   735 00000530 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i +1
   737 00000538 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i +1
   739                              <1> ;INT 30h for os use and 3rd party use:
   740 00000540 [A31A]2800008E0000  <1> 		dw int30h,NEW_CODE_SEL,0x8E00,0
   741                              <1> %assign i 0x31
   742                              <1> %rep 15
   743                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   744                              <1> %assign i +1
   745                              <1> %endrep
   746 00000548 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   747                              <2> %assign i +1
   748 00000550 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   749                              <2> %assign i +1
   750 00000558 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   751                              <2> %assign i +1
   752 00000560 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   753                              <2> %assign i +1
   754 00000568 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   755                              <2> %assign i +1
   756 00000570 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   757                              <2> %assign i +1
   758 00000578 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   759                              <2> %assign i +1
   760 00000580 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   761                              <2> %assign i +1
   762 00000588 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   763                              <2> %assign i +1
   764 00000590 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   765                              <2> %assign i +1
   766 00000598 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   767                              <2> %assign i +1
   768 000005A0 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 000005A8 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772 000005B0 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   773                              <2> %assign i +1
   774 000005B8 [4C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   775                              <2> %assign i +1
   776                              <1> ;and here we are at 0x40
   777                              <1> ;here are all the irq's
   778 000005C0 [7202]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   779 000005C8 [4C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   780 000005D0 [4C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   781 000005D8 [4C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   782 000005E0 [4C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   783                              <1> 	%ifdef sound.included
   784 000005E8 [1303]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   785                              <1> 	%else
   786                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   787                              <1> 	%endif
   788 000005F0 [4C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   789 000005F8 [4C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   790 00000600 [0E03]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   791 00000608 [5303]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   792 00000610 [5303]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   793                              <1> 	%ifdef rtl8139.included
   794                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   795                              <1> 	%else
   796 00000618 [5303]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   797                              <1> 	%endif
   798 00000620 [5303]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   799 00000628 [5303]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   800 00000630 [5303]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   801 00000638 [5303]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   802                              <1> ;This brings me up to 0x50
   803                              <1> %assign i 0x50
   804                              <1> %rep 176
   805                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   806                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   807                              <1> %assign i +1
   808                              <1> %endrep
   809 00000640 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   810                              <2> 
   811                              <2> %assign i +1
   812 00000648 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   813                              <2> 
   814                              <2> %assign i +1
   815 00000650 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   816                              <2> 
   817                              <2> %assign i +1
   818 00000658 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   819                              <2> 
   820                              <2> %assign i +1
   821 00000660 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   822                              <2> 
   823                              <2> %assign i +1
   824 00000668 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   825                              <2> 
   826                              <2> %assign i +1
   827 00000670 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   828                              <2> 
   829                              <2> %assign i +1
   830 00000678 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   831                              <2> 
   832                              <2> %assign i +1
   833 00000680 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   834                              <2> 
   835                              <2> %assign i +1
   836 00000688 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   837                              <2> 
   838                              <2> %assign i +1
   839 00000690 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   840                              <2> 
   841                              <2> %assign i +1
   842 00000698 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   843                              <2> 
   844                              <2> %assign i +1
   845 000006A0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   846                              <2> 
   847                              <2> %assign i +1
   848 000006A8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   849                              <2> 
   850                              <2> %assign i +1
   851 000006B0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   852                              <2> 
   853                              <2> %assign i +1
   854 000006B8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   855                              <2> 
   856                              <2> %assign i +1
   857 000006C0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   858                              <2> 
   859                              <2> %assign i +1
   860 000006C8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   861                              <2> 
   862                              <2> %assign i +1
   863 000006D0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   864                              <2> 
   865                              <2> %assign i +1
   866 000006D8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 000006E0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 000006E8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 000006F0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 000006F8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 00000700 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 00000708 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 00000710 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 00000718 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 00000720 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 00000728 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 00000730 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 00000738 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 00000740 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 00000748 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 00000750 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 00000758 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 00000760 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 00000768 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 00000770 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 00000778 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 00000780 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 00000788 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 00000790 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 00000798 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 000007A0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 000007A8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 000007B0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 000007B8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 000007C0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 000007C8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 000007D0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 000007D8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 000007E0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 000007E8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 000007F0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 000007F8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 00000800 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 00000808 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 00000810 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 00000818 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 00000820 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 00000828 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 00000830 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 00000838 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 00000840 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 00000848 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 00000850 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 00000858 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 00000860 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 00000868 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 00000870 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 00000878 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 00000880 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000888 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 00000890 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 00000898 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 000008A0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 000008A8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 000008B0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 000008B8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 000008C0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 000008C8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 000008D0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 000008D8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 000008E0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 000008E8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 000008F0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 000008F8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 00000900 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 00000908 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 00000910 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 00000918 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 00000920 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 00000928 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 00000930 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 00000938 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 00000940 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 00000948 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 00000950 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 00000958 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 00000960 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000968 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 00000970 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 00000978 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 00000980 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000988 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 00000990 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 00000998 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 000009A0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 000009A8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 000009B0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 000009B8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 000009C0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 000009C8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 000009D0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 000009D8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 000009E0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 000009E8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 000009F0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 000009F8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 00000A00 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 00000A08 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 00000A10 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 00000A18 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 00000A20 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 00000A28 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 00000A30 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 00000A38 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 00000A40 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 00000A48 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 00000A50 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 00000A58 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 00000A60 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000A68 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000A70 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000A78 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000A80 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000A88 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000A90 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000A98 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000AA0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000AA8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000AB0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000AB8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000AC0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000AC8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000AD0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000AD8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000AE0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000AE8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000AF0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000AF8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000B00 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000B08 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000B10 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000B18 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000B20 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000B28 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000B30 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286 00000B38 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1287                              <2> 
  1288                              <2> %assign i +1
  1289 00000B40 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1290                              <2> 
  1291                              <2> %assign i +1
  1292 00000B48 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1293                              <2> 
  1294                              <2> %assign i +1
  1295 00000B50 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1296                              <2> 
  1297                              <2> %assign i +1
  1298 00000B58 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1299                              <2> 
  1300                              <2> %assign i +1
  1301 00000B60 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1302                              <2> 
  1303                              <2> %assign i +1
  1304 00000B68 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1305                              <2> 
  1306                              <2> %assign i +1
  1307 00000B70 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1308                              <2> 
  1309                              <2> %assign i +1
  1310 00000B78 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1311                              <2> 
  1312                              <2> %assign i +1
  1313 00000B80 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1314                              <2> 
  1315                              <2> %assign i +1
  1316 00000B88 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1317                              <2> 
  1318                              <2> %assign i +1
  1319 00000B90 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1320                              <2> 
  1321                              <2> %assign i +1
  1322 00000B98 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1323                              <2> 
  1324                              <2> %assign i +1
  1325 00000BA0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1326                              <2> 
  1327                              <2> %assign i +1
  1328 00000BA8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1329                              <2> 
  1330                              <2> %assign i +1
  1331 00000BB0 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1332                              <2> 
  1333                              <2> %assign i +1
  1334 00000BB8 [4C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1335                              <2> 
  1336                              <2> %assign i +1
  1337                              <1> idt_end:
  1338                                  	%include "source/realmode.asm"
  1339                              <1> realmode:	;make sure the real mode program's address is in realmodeptr
  1340                              <1> 
  1341 00000BC0 FA                  <1> 	cli
  1342 00000BC1 A3[CE0C0000]        <1> 	mov [realmodeeax], eax
  1343 00000BC6 891D[CA0C0000]      <1> 	mov [realmodeebx], ebx
  1344 00000BCC 8925[BC0C0000]      <1> 	mov [pmodeesp], esp
  1345                              <1> 
  1346 00000BD2 BB[C60C0000]        <1> 	mov ebx, cr0old
  1347                              <1> rmcopytofirstmbyte:
  1348 00000BD7 8B03                <1> 	mov eax, [ebx]
  1349 00000BD9 658903              <1> 	mov [gs:ebx], eax
  1350 00000BDC 81C304000000        <1> 	add ebx, 4
  1351 00000BE2 81FB[D20C0000]      <1> 	cmp ebx, realmodeptr
  1352 00000BE8 76ED                <1> 	jbe rmcopytofirstmbyte
  1353                              <1> 
  1354 00000BEA EA[F10B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1355                              <1> 
  1356                              <1> [BITS 16]
  1357                              <1> protected16bit:
  1358 00000BF1 B84000              <1> 	mov ax, V8086_DATA_SEL
  1359 00000BF4 8ED8                <1> 	mov ds, ax
  1360 00000BF6 8EC0                <1> 	mov es, ax
  1361 00000BF8 8EE0                <1> 	mov fs, ax
  1362 00000BFA 8EE8                <1> 	mov gs, ax
  1363 00000BFC 8ED0                <1> 	mov ss, ax
  1364 00000BFE 66BC[00880300]      <1> 	mov esp, stackend
  1365 00000C04 0F20C0              <1> 	mov eax, cr0
  1366 00000C07 66A3[C60C]          <1> 	mov [cr0old], eax
  1367 00000C0B 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1368 00000C11 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1369 00000C14 EA[190C]0010        <1> 	jmp 0x1000:inrealmode
  1370                              <1> 
  1371                              <1> inrealmode:
  1372 00000C19 8CC8                <1> 	mov ax, cs
  1373 00000C1B 8ED8                <1> 	mov ds, ax
  1374 00000C1D 8EC0                <1> 	mov es, ax
  1375 00000C1F 8EE0                <1> 	mov fs, ax
  1376 00000C21 8EE8                <1> 	mov gs, ax
  1377 00000C23 8ED0                <1> 	mov ss, ax
  1378 00000C25 BC[0088]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1379                              <1> 	
  1380 00000C28 B011                <1> 	mov al, 0x11
  1381 00000C2A E620                <1> 	out 0x20, al
  1382 00000C2C E6A0                <1> 	out 0xA0, al
  1383 00000C2E B008                <1> 	mov al, 0x8		;interrupt for master
  1384 00000C30 E621                <1> 	out 0x21, al
  1385 00000C32 B070                <1> 	mov al, 0x70	;interrupt for slave
  1386 00000C34 E6A1                <1> 	out 0xA1, al
  1387 00000C36 B004                <1> 	mov al, 4
  1388 00000C38 E621                <1> 	out 0x21, al
  1389 00000C3A B002                <1> 	mov al, 2
  1390 00000C3C E6A1                <1> 	out 0xA1, al
  1391 00000C3E B001                <1> 	mov al, 0x1
  1392 00000C40 E621                <1> 	out 0x21, al
  1393 00000C42 B001                <1> 	mov al, 0x1
  1394 00000C44 E6A1                <1> 	out 0xA1, al
  1395                              <1> 	
  1396 00000C46 0F011E[C00C]        <1> 	lidt [idt_real]
  1397 00000C4B FB                  <1> 	sti
  1398                              <1> 
  1399 00000C4C 66A1[CE0C]          <1> 	mov eax, [realmodeeax]
  1400 00000C50 668B1E[CA0C]        <1> 	mov ebx, [realmodeebx]
  1401                              <1> 
  1402 00000C55 FF16[D20C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1403                              <1> 
  1404 00000C59 66A3[CE0C]          <1> 	mov [realmodeeax], eax
  1405 00000C5D 66891E[CA0C]        <1> 	mov [realmodeebx], ebx
  1406                              <1> 
  1407 00000C62 FA                  <1> 	cli
  1408 00000C63 0F0116[5C03]        <1> 	lgdt [gdtr]
  1409 00000C68 0F011E[6203]        <1> 	lidt [idtr]
  1410 00000C6D 0F20C0              <1> 	mov eax, cr0
  1411 00000C70 0C01                <1> 	or al, 1
  1412 00000C72 0F22C0              <1> 	mov cr0,eax
  1413 00000C75 EA[7A0C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1414                              <1> 
  1415                              <1> [BITS 32]
  1416                              <1> returntopmode:
  1417 00000C7A 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1418 00000C7E 8ED8                <1> 	mov ds, ax
  1419 00000C80 8EC0                <1> 	mov es, ax
  1420 00000C82 8EE0                <1> 	mov fs, ax
  1421 00000C84 8ED0                <1> 	mov ss, ax
  1422 00000C86 8B25[BC0C0000]      <1> 	mov esp, [pmodeesp]
  1423 00000C8C 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1424 00000C90 8EE8                <1> 	mov gs, ax
  1425                              <1> 
  1426 00000C92 BB[C60C0000]        <1> 	mov ebx, cr0old
  1427                              <1> rmcopyfromfirstmbyte:
  1428 00000C97 658B03              <1> 	mov eax, [gs:ebx]
  1429 00000C9A 8903                <1> 	mov [ebx], eax
  1430 00000C9C 81C304000000        <1> 	add ebx, 4
  1431 00000CA2 81FB[D20C0000]      <1> 	cmp ebx, realmodeptr
  1432 00000CA8 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1433                              <1> 
  1434 00000CAA E8914B0000          <1> 	call initialize.pic ;reset irq's and masks
  1435 00000CAF FB                  <1> 	sti
  1436 00000CB0 A1[CE0C0000]        <1> 	mov eax, [realmodeeax]
  1437 00000CB5 8B1D[CA0C0000]      <1> 	mov ebx, [realmodeebx]
  1438 00000CBB C3                  <1> 	ret
  1439                              <1> 	
  1440 00000CBC 00000000            <1> pmodeesp dd 0
  1441                              <1> idt_real:
  1442 00000CC0 FF03                <1> 	dw 0x3FF
  1443 00000CC2 00000000            <1> 	dd 0
  1444 00000CC6 00000000            <1> cr0old dd 0
  1445 00000CCA 00000000            <1> realmodeebx dd 0
  1446 00000CCE 00000000            <1> realmodeeax dd 0
  1447 00000CD2 0000                <1> realmodeptr dw 0
  1448 00000CD4 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1449                                  [BITS 32]
  1450                                      %include "source/exception.asm"
  1451                              <1> %ifdef exceptions.included
  1452                              <1> unhand:	
  1453                              <1> 	%assign i 0
  1454                              <1> 	%rep 32
  1455                              <1> 	mov byte [intprob], i
  1456                              <1> 	jmp unhand2
  1457                              <1> 	%assign i i+1
  1458                              <1> 	%endrep
  1459 00000CD8 C605[5C100000]00    <2>  mov byte [intprob], i
  1460 00000CDF E974010000          <2>  jmp unhand2
  1461                              <2>  %assign i i+1
  1462 00000CE4 C605[5C100000]01    <2>  mov byte [intprob], i
  1463 00000CEB E968010000          <2>  jmp unhand2
  1464                              <2>  %assign i i+1
  1465 00000CF0 C605[5C100000]02    <2>  mov byte [intprob], i
  1466 00000CF7 E95C010000          <2>  jmp unhand2
  1467                              <2>  %assign i i+1
  1468 00000CFC C605[5C100000]03    <2>  mov byte [intprob], i
  1469 00000D03 E950010000          <2>  jmp unhand2
  1470                              <2>  %assign i i+1
  1471 00000D08 C605[5C100000]04    <2>  mov byte [intprob], i
  1472 00000D0F E944010000          <2>  jmp unhand2
  1473                              <2>  %assign i i+1
  1474 00000D14 C605[5C100000]05    <2>  mov byte [intprob], i
  1475 00000D1B E938010000          <2>  jmp unhand2
  1476                              <2>  %assign i i+1
  1477 00000D20 C605[5C100000]06    <2>  mov byte [intprob], i
  1478 00000D27 E92C010000          <2>  jmp unhand2
  1479                              <2>  %assign i i+1
  1480 00000D2C C605[5C100000]07    <2>  mov byte [intprob], i
  1481 00000D33 E920010000          <2>  jmp unhand2
  1482                              <2>  %assign i i+1
  1483 00000D38 C605[5C100000]08    <2>  mov byte [intprob], i
  1484 00000D3F E914010000          <2>  jmp unhand2
  1485                              <2>  %assign i i+1
  1486 00000D44 C605[5C100000]09    <2>  mov byte [intprob], i
  1487 00000D4B E908010000          <2>  jmp unhand2
  1488                              <2>  %assign i i+1
  1489 00000D50 C605[5C100000]0A    <2>  mov byte [intprob], i
  1490 00000D57 E9FC000000          <2>  jmp unhand2
  1491                              <2>  %assign i i+1
  1492 00000D5C C605[5C100000]0B    <2>  mov byte [intprob], i
  1493 00000D63 E9F0000000          <2>  jmp unhand2
  1494                              <2>  %assign i i+1
  1495 00000D68 C605[5C100000]0C    <2>  mov byte [intprob], i
  1496 00000D6F E9E4000000          <2>  jmp unhand2
  1497                              <2>  %assign i i+1
  1498 00000D74 C605[5C100000]0D    <2>  mov byte [intprob], i
  1499 00000D7B E9D8000000          <2>  jmp unhand2
  1500                              <2>  %assign i i+1
  1501 00000D80 C605[5C100000]0E    <2>  mov byte [intprob], i
  1502 00000D87 E9CC000000          <2>  jmp unhand2
  1503                              <2>  %assign i i+1
  1504 00000D8C C605[5C100000]0F    <2>  mov byte [intprob], i
  1505 00000D93 E9C0000000          <2>  jmp unhand2
  1506                              <2>  %assign i i+1
  1507 00000D98 C605[5C100000]10    <2>  mov byte [intprob], i
  1508 00000D9F E9B4000000          <2>  jmp unhand2
  1509                              <2>  %assign i i+1
  1510 00000DA4 C605[5C100000]11    <2>  mov byte [intprob], i
  1511 00000DAB E9A8000000          <2>  jmp unhand2
  1512                              <2>  %assign i i+1
  1513 00000DB0 C605[5C100000]12    <2>  mov byte [intprob], i
  1514 00000DB7 E99C000000          <2>  jmp unhand2
  1515                              <2>  %assign i i+1
  1516 00000DBC C605[5C100000]13    <2>  mov byte [intprob], i
  1517 00000DC3 E990000000          <2>  jmp unhand2
  1518                              <2>  %assign i i+1
  1519 00000DC8 C605[5C100000]14    <2>  mov byte [intprob], i
  1520 00000DCF E984000000          <2>  jmp unhand2
  1521                              <2>  %assign i i+1
  1522 00000DD4 C605[5C100000]15    <2>  mov byte [intprob], i
  1523 00000DDB E978000000          <2>  jmp unhand2
  1524                              <2>  %assign i i+1
  1525 00000DE0 C605[5C100000]16    <2>  mov byte [intprob], i
  1526 00000DE7 E96C000000          <2>  jmp unhand2
  1527                              <2>  %assign i i+1
  1528 00000DEC C605[5C100000]17    <2>  mov byte [intprob], i
  1529 00000DF3 E960000000          <2>  jmp unhand2
  1530                              <2>  %assign i i+1
  1531 00000DF8 C605[5C100000]18    <2>  mov byte [intprob], i
  1532 00000DFF E954000000          <2>  jmp unhand2
  1533                              <2>  %assign i i+1
  1534 00000E04 C605[5C100000]19    <2>  mov byte [intprob], i
  1535 00000E0B E948000000          <2>  jmp unhand2
  1536                              <2>  %assign i i+1
  1537 00000E10 C605[5C100000]1A    <2>  mov byte [intprob], i
  1538 00000E17 E93C000000          <2>  jmp unhand2
  1539                              <2>  %assign i i+1
  1540 00000E1C C605[5C100000]1B    <2>  mov byte [intprob], i
  1541 00000E23 E930000000          <2>  jmp unhand2
  1542                              <2>  %assign i i+1
  1543 00000E28 C605[5C100000]1C    <2>  mov byte [intprob], i
  1544 00000E2F E924000000          <2>  jmp unhand2
  1545                              <2>  %assign i i+1
  1546 00000E34 C605[5C100000]1D    <2>  mov byte [intprob], i
  1547 00000E3B E918000000          <2>  jmp unhand2
  1548                              <2>  %assign i i+1
  1549 00000E40 C605[5C100000]1E    <2>  mov byte [intprob], i
  1550 00000E47 E90C000000          <2>  jmp unhand2
  1551                              <2>  %assign i i+1
  1552 00000E4C C605[5C100000]1F    <2>  mov byte [intprob], i
  1553 00000E53 E900000000          <2>  jmp unhand2
  1554                              <2>  %assign i i+1
  1555                              <1> unhand2:
  1556 00000E58 FA                  <1> 	cli
  1557 00000E59 1E                  <1> 	push ds
  1558 00000E5A 06                  <1> 	push es
  1559 00000E5B 0FA0                <1> 	push fs
  1560 00000E5D 0FA8                <1> 	push gs
  1561 00000E5F 16                  <1> 	push ss
  1562 00000E60 60                  <1> 	pushad
  1563                              <1> %ifdef gui.included
  1564                              <1> 	cmp byte [guion], 0
  1565                              <1> 	je near noguiunhandstuff
  1566                              <1> 	mov word [locunhandy], 8
  1567                              <1> 	mov word [locunhandx], 8
  1568                              <1> 	mov bx, [background]
  1569                              <1> 	mov [backgroundcache], bx
  1570                              <1> 	mov byte [mousedisabled],1
  1571                              <1> 	mov bx, 1111100000000000b
  1572                              <1> 	mov [background], bx
  1573                              <1> noguiunhandstuff:
  1574                              <1> %endif
  1575 00000E61 89E6                <1> 	mov esi, esp
  1576 00000E63 8935[4A100000]      <1> 	mov [espfirst], esi
  1577 00000E69 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1578 00000E6F 8935[46100000]      <1> 	mov [esploc], esi
  1579 00000E75 BE[6B100000]        <1> 	mov esi, unhandmsg
  1580 00000E7A 8935[4E100000]      <1> 	mov [esiloc], esi
  1581 00000E80 31C9                <1> 	xor ecx, ecx
  1582 00000E82 8A0D[5C100000]      <1> 	mov cl, [intprob]
  1583 00000E88 BB[3A140000]        <1> 	mov ebx, errortypes
  1584 00000E8D C1E102              <1> 	shl ecx, 2
  1585 00000E90 01CB                <1> 	add ebx, ecx
  1586 00000E92 81FB[7A140000]      <1> 	cmp ebx, errortypesend
  1587 00000E98 7205                <1> 	jb gooderrortype
  1588 00000E9A BB[7A140000]        <1> 	mov ebx, errortypesend
  1589                              <1> gooderrortype:
  1590 00000E9F 8B33                <1> 	mov esi, [ebx]
  1591                              <1> %ifdef gui.included
  1592                              <1> 	cmp byte [guion], 0
  1593                              <1> 	je near errortext
  1594                              <1> 	mov cx, [locunhandy]
  1595                              <1> 	mov dx, [locunhandx]
  1596                              <1> 	mov ax, 1
  1597                              <1> 	xor bx, bx
  1598                              <1> 	call showstring2
  1599                              <1> 	mov [locunhandy], cx
  1600                              <1> 	mov [locunhandx], dx
  1601                              <1> 	jmp errortextdone
  1602                              <1> %endif
  1603                              <1> errortext:
  1604 00000EA1 E8580D0000          <1> 	call print		;get the error message and print it
  1605                              <1> errortextdone:
  1606 00000EA6 31C9                <1> 	xor ecx, ecx
  1607 00000EA8 8A0D[5C100000]      <1> 	mov cl, [intprob]
  1608 00000EAE E862010000          <1> 	call expdump
  1609                              <1> dumpstack:
  1610 00000EB3 8B35[46100000]      <1> 	mov esi, [esploc]
  1611 00000EB9 39E6                <1> 	cmp esi, esp
  1612 00000EBB 7219                <1> 	jb donedump
  1613 00000EBD 368B0E              <1> 	mov ecx, [ss:esi]
  1614 00000EC0 81EE04000000        <1> 	sub esi, 4
  1615 00000EC6 8935[46100000]      <1> 	mov [esploc], esi
  1616 00000ECC E844010000          <1> 	call expdump
  1617 00000ED1 E9DDFFFFFF          <1> 	jmp dumpstack
  1618                              <1> donedump:
  1619 00000ED6 0F20C1              <1> 	mov ecx, cr0
  1620 00000ED9 E837010000          <1> 	call expdump
  1621 00000EDE 0F20D1              <1> 	mov ecx, cr2
  1622 00000EE1 E82F010000          <1> 	call expdump
  1623 00000EE6 0F20D9              <1> 	mov ecx, cr3
  1624 00000EE9 E827010000          <1> 	call expdump
  1625 00000EEE 0F20E1              <1> 	mov ecx, cr4
  1626 00000EF1 E81F010000          <1> 	call expdump
  1627 00000EF6 0F00C9              <1> 	str ecx
  1628 00000EF9 E817010000          <1> 	call expdump
  1629 00000EFE 0F010D[65100000]    <1> 	sidt [igdtcache]
  1630 00000F05 8B0D[67100000]      <1> 	mov ecx, [igdtcache + 2]
  1631 00000F0B E805010000          <1> 	call expdump
  1632 00000F10 0F0105[65100000]    <1> 	sgdt [igdtcache]
  1633 00000F17 8B0D[67100000]      <1> 	mov ecx, [igdtcache + 2]
  1634 00000F1D E8F3000000          <1> 	call expdump
  1635 00000F22 0F00C1              <1> 	sldt ecx
  1636 00000F25 E8EB000000          <1> 	call expdump
  1637 00000F2A 8B35[46100000]      <1> 	mov esi, [esploc]
  1638 00000F30 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1639 00000F35 81C710000000        <1> 	add edi, 16
  1640 00000F3B 893D[61100000]      <1> 	mov [codelocend], edi
  1641 00000F41 81EF20000000        <1> 	sub edi, 32
  1642                              <1> dumpcodeloop:
  1643 00000F47 893D[5D100000]      <1> 	mov [codeloc], edi
  1644 00000F4D 8B0F                <1> 	mov ecx, [edi]
  1645 00000F4F E8C1000000          <1> 	call expdump
  1646 00000F54 8B3D[5D100000]      <1> 	mov edi, [codeloc]
  1647 00000F5A 81C704000000        <1> 	add edi, 4
  1648 00000F60 3B3D[61100000]      <1> 	cmp edi, [codelocend]
  1649 00000F66 72DF                <1> 	jb dumpcodeloop
  1650 00000F68 BE[A60F0000]        <1> 	mov esi, backtoosmsg
  1651                              <1> %ifdef gui.included
  1652                              <1> 	cmp byte [guion], 0
  1653                              <1> 	je backtomsg
  1654                              <1> guibacktomsg:
  1655                              <1> 	mov dx, [locunhandx]
  1656                              <1> 	mov cx, [locunhandy]
  1657                              <1> 	mov ax, 1
  1658                              <1> 	xor bx, bx
  1659                              <1> 	call showstring2
  1660                              <1> 	jmp backtomsgdone
  1661                              <1> backtomsg:
  1662                              <1> %endif
  1663 00000F6D E88C0C0000          <1> 	call print
  1664                              <1> backtomsgdone:
  1665 00000F72 30C0                <1> 	xor al, al
  1666 00000F74 E89D120000          <1> 	call rdcharint
  1667 00000F79 803D[5C100000]03    <1> 	cmp byte [intprob], 3
  1668 00000F80 7511                <1> 	jne nodebugint
  1669                              <1> %ifdef gui.included
  1670                              <1> 	cmp byte [guion], 0
  1671                              <1> 	je nodebuggui
  1672                              <1> 	mov bx, [backgroundcache]
  1673                              <1> 	mov [background], bx
  1674                              <1> 	xor bx, bx
  1675                              <1> 	mov byte [mousedisabled], 0
  1676                              <1> 	call guiclear
  1677                              <1> 	call reloadallgraphics
  1678                              <1> 	call termcopy
  1679                              <1> nodebuggui:
  1680                              <1> %endif
  1681 00000F82 8B35[4A100000]      <1> 	mov esi, [espfirst]
  1682 00000F88 89F4                <1> 	mov esp, esi
  1683 00000F8A 61                  <1> 	popad
  1684 00000F8B 17                  <1> 	pop ss
  1685 00000F8C 0FA9                <1> 	pop gs
  1686 00000F8E 0FA1                <1> 	pop fs
  1687 00000F90 07                  <1> 	pop es
  1688 00000F91 1F                  <1> 	pop ds
  1689 00000F92 CF                  <1> 	iret
  1690                              <1> nodebugint:
  1691 00000F93 61                  <1> 	popad
  1692 00000F94 17                  <1> 	pop ss
  1693 00000F95 0FA9                <1> 	pop gs
  1694 00000F97 0FA1                <1> 	pop fs
  1695 00000F99 07                  <1> 	pop es
  1696 00000F9A 1F                  <1> 	pop ds
  1697 00000F9B 81C408000000        <1> 	add esp, 8
  1698                              <1> ;	popf ;pop the cs segment selector into eflags
  1699                              <1> ;	popf ;then pop the flags
  1700                              <1> %ifdef gui.included
  1701                              <1> 	cmp byte [guion], 0
  1702                              <1> 	je returnunhandgui
  1703                              <1> 	mov bx, [backgroundcache]
  1704                              <1> 	mov [background], bx
  1705                              <1> 	xor bx, bx
  1706                              <1> 	mov byte [mousedisabled], 0
  1707                              <1> 	call guiclear
  1708                              <1> 	call reloadallgraphics
  1709                              <1> 	call termcopy
  1710                              <1> %endif
  1711                              <1> returnunhandgui:
  1712 00000FA1 E9D31A0000          <1> 	jmp nwcmd
  1713 00000FA6 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1714 00000FAF 737420616E79207072- <1>
  1715 00000FB8 6F626C656D7320696E- <1>
  1716 00000FC1 207468652049737375- <1>
  1717 00000FCA 65732073656374696F- <1>
  1718 00000FD3 6E20617420736F6C6C- <1>
  1719 00000FDC 65726F732E676F6F67- <1>
  1720 00000FE5 6C65636F64652E636F- <1>
  1721 00000FEE 6D0A                <1>
  1722 00000FF0 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1723 00000FF9 206B657920746F2072- <1>
  1724 00001002 657475726E20746F20- <1>
  1725 0000100B 536F6C6C65724F530A- <1>
  1726 00001014 00                  <1>
  1727                              <1> expdump:
  1728 00001015 8B35[4E100000]      <1> 	mov esi, [esiloc]
  1729 0000101B 89F7                <1> 	mov edi, esi
  1730 0000101D 81C70F000000        <1> 	add edi, 15
  1731 00001023 81C604000000        <1> 	add esi, 4
  1732 00001029 893D[4E100000]      <1> 	mov [esiloc], edi
  1733 0000102F 81EF03000000        <1> 	sub edi, 3
  1734 00001035 E8D71E0000          <1> 	call converthex
  1735 0000103A 81EE04000000        <1> 	sub esi, 4
  1736                              <1> %ifdef gui.included
  1737                              <1> 	cmp byte [guion], 0
  1738                              <1> 	je near expdumptext
  1739                              <1> 	mov cx, [locunhandy]
  1740                              <1> 	mov dx, [locunhandx]
  1741                              <1> 	mov ax, 1
  1742                              <1> 	xor bx, bx
  1743                              <1> 	call showstring2
  1744                              <1> 	mov [locunhandy], cx
  1745                              <1> 	mov [locunhandx], dx
  1746                              <1> 	ret
  1747                              <1> %endif
  1748                              <1> expdumptext:
  1749 00001040 E8B90B0000          <1> 	call print
  1750 00001045 C3                  <1> 	ret
  1751 00001046 00000000            <1> esploc dd 0
  1752 0000104A 00000000            <1> espfirst dd 0
  1753 0000104E 00000000            <1> esiloc dd 0
  1754 00001052 00000000            <1> esiregbuf dd 0
  1755 00001056 0100                <1> locunhandy dw 1
  1756 00001058 0100                <1> locunhandx dw 1
  1757 0000105A 0000                <1> backgroundcache dw 0
  1758 0000105C 00                  <1> intprob db 0
  1759 0000105D 00000000            <1> codeloc dd 0
  1760 00001061 00000000            <1> codelocend dd 0
  1761 00001065 000000000000        <1> igdtcache dw 0,0,0
  1762                              <1> 	unhandmsg:	
  1763 0000106B 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1764 00001074 303030FF0A00        <1>
  1765                              <1> unhndrg:
  1766 0000107A FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;this dumps the stack before the stack frame in question
  1767 00001083 303030202000<rept>  <1>
  1768 000010E3 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1769 000010EC 303030FF0A00        <1>
  1770 000010F2 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1771 000010FB 303030202000<rept>  <1>
  1772 0000115B FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1773 00001164 303030FF0A00        <1>
  1774 0000116A FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1775 00001173 303030202000<rept>  <1>
  1776 000011D3 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1777 000011DC 303030FF0A00        <1>
  1778 000011E2 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1779 000011EB 303030202000<rept>  <1>
  1780 0000124B FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1781 00001254 303030FF0A00        <1>
  1782                              <1> unhandregs:
  1783 0000125A 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1784 00001263 303030202000        <1>
  1785 00001269 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1786 00001272 303030202000        <1>
  1787 00001278 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1788 00001281 303030FF0A00        <1>
  1789 00001287 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1790 00001290 303030202000        <1>
  1791 00001296 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1792 0000129F 303030202000        <1>
  1793 000012A5 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1794 000012AE 303030202000        <1>
  1795 000012B4 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1796 000012BD 303030202000        <1>
  1797 000012C3 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1798 000012CC 303030FF0A00        <1>
  1799 000012D2 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1800 000012DB 303030202000        <1>
  1801 000012E1 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1802 000012EA 303030202000        <1>
  1803 000012F0 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1804 000012F9 303030202000        <1>
  1805 000012FF 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1806 00001308 303030FF0A00        <1>
  1807 0000130E 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1808 00001317 303030202000        <1>
  1809 0000131D 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1810 00001326 303030202000        <1>
  1811 0000132C 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1812 00001335 303030202000        <1>
  1813 0000133B 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1814 00001344 303030FF0A00        <1>
  1815 0000134A 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1816 00001353 303030202000        <1>
  1817 00001359 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1818 00001362 303030202000        <1>
  1819 00001368 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1820 00001371 303030202000        <1>
  1821 00001377 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1822 00001380 303030FF0A00        <1>
  1823 00001386 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1824 0000138F 303030202000        <1>
  1825 00001395 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1826 0000139E 303030202000        <1>
  1827 000013A4 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1828 000013AD 303030202000        <1>
  1829 000013B3 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1830 000013BC 303030FF0A00        <1>
  1831 000013C2 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;this dumps the code before and after the interrupt in question
  1832 000013CB 303030202000<rept>  <1>
  1833 000013E0 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1834 000013E9 30303020FF00        <1>
  1835 000013EF FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1836 000013F8 3030305D2000        <1>
  1837 000013FE FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1838 00001407 303030202000<rept>  <1>
  1839 0000142B FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1840 00001434 303030FF0A00        <1>
  1841                              <1> unhandmsgend:
  1842                              <1> 
  1843                              <1> errortypes:
  1844 0000143A [7E140000]          <1> 			dd err0
  1845 0000143E [E7140000]          <1> 			dd err1
  1846 00001442 [48150000]          <1> 			dd err2
  1847 00001446 [9D150000]          <1> 			dd err3
  1848 0000144A [01160000]          <1> 			dd err4
  1849 0000144E [53160000]          <1> 			dd err5
  1850 00001452 [BD160000]          <1> 			dd err6
  1851 00001456 [25170000]          <1> 			dd err7
  1852 0000145A [6F170000]          <1> 			dd err8
  1853 0000145E [CC170000]          <1> 			dd err9
  1854 00001462 [25180000]          <1> 			dd err10
  1855 00001466 [70180000]          <1> 			dd err11
  1856 0000146A [C0180000]          <1> 			dd err12
  1857 0000146E [19190000]          <1> 			dd err13
  1858 00001472 [7C190000]          <1> 			dd err14
  1859 00001476 [B8190000]          <1> 			dd err15
  1860                              <1> errortypesend:
  1861 0000147A [441A0000]          <1> 			dd unknownerror
  1862                              <1> 			
  1863 0000147E 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1864 00001487 6279207A65726F3A0A  <1>
  1865 00001490 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1866 00001499 6C79206C696D2061C3- <1>
  1867 000014A2 B778203D20E2889E20- <1>
  1868 000014AB 7768656E2061206973- <1>
  1869 000014B4 20616E79207265616C- <1>
  1870 000014BD 206E756D6265722E20- <1>
  1871 000014C6 486170707920456173- <1>
  1872 000014CF 746572210A          <1>
  1873 000014D4 202020202020202020- <1> 		db "            x→0",10,0
  1874 000014DD 20202078E28692300A- <1>
  1875 000014E6 00                  <1>
  1876                              <1> 		
  1877 000014E7 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1878 000014F0 65702F427265616B70- <1>
  1879 000014F9 6F696E743A0A        <1>
  1880 000014FF 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1881 00001508 696E74206661756C74- <1>
  1882 00001511 2C20627265616B706F- <1>
  1883 0000151A 696E7420747261702C- <1>
  1884 00001523 206F722073696E676C- <1>
  1885 0000152C 652D73746570207472- <1>
  1886 00001535 617020776173207472- <1>
  1887 0000153E 696767657265642E0A- <1>
  1888 00001547 00                  <1>
  1889                              <1> 		
  1890 00001548 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1891 00001551 6C6520696E74657272- <1>
  1892 0000155A 7570743A0A          <1>
  1893 0000155F 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1894 00001568 6520696E7465727275- <1>
  1895 00001571 707420776173207472- <1>
  1896 0000157A 696767657265642074- <1>
  1897 00001583 68617420636F756C64- <1>
  1898 0000158C 206E6F74206265206D- <1>
  1899 00001595 61736B65642E0A00    <1>
  1900                              <1> 		
  1901 0000159D 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1902 000015A6 743A0A              <1>
  1903 000015A9 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1904 000015B2 727275707420697320- <1>
  1905 000015BB 7573656420696E2070- <1>
  1906 000015C4 726F6772616D732074- <1>
  1907 000015CD 6F2073686F77207468- <1>
  1908 000015D6 6520737461636B2061- <1>
  1909 000015DF 6E6420726567697374- <1>
  1910 000015E8 65727320616E642063- <1>
  1911 000015F1 616E2062650A        <1>
  1912 000015F7 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1913 00001600 00                  <1>
  1914                              <1> 		
  1915 00001601 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1916 0000160A 0A                  <1>
  1917 0000160B 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1918 00001614 73736F722072616E20- <1>
  1919 0000161D 696E746F20616E2049- <1>
  1920 00001626 4E544F20696E737472- <1>
  1921 0000162F 756374696F6E207769- <1>
  1922 00001638 746820746865206F76- <1>
  1923 00001641 6572666C6F7720666C- <1>
  1924 0000164A 6167207365742E0A00  <1>
  1925                              <1> 		
  1926 00001653 426F756E6473206368- <1> err5	db "Bounds check:",10
  1927 0000165C 65636B3A0A          <1>
  1928 00001661 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1929 0000166A 73736F72207265626F- <1>
  1930 00001673 756E6465642066726F- <1>
  1931 0000167C 6D206120424F554E44- <1>
  1932 00001685 20696E737472756374- <1>
  1933 0000168E 696F6E2072756E206F- <1>
  1934 00001697 6E20616E206F706572- <1>
  1935 000016A0 616E64207468617420- <1>
  1936 000016A9 776173206F75740A    <1>
  1937 000016B1 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1938 000016BA 2E0A00              <1>
  1939                              <1> 		
  1940 000016BD 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1941 000016C6 70636F64653A0A      <1>
  1942 000016CD 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1943 000016D6 73736F722068617320- <1>
  1944 000016DF 6E6F20696465612077- <1>
  1945 000016E8 686174206974207761- <1>
  1946 000016F1 7320747279696E6720- <1>
  1947 000016FA 746F20657865637574- <1>
  1948 00001703 652E20446F6E277420- <1>
  1949 0000170C 72756E205353453420- <1>
  1950 00001715 636F64650A          <1>
  1951 0000171A 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1952 00001723 0A00                <1>
  1953                              <1> 		
  1954 00001725 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1955 0000172E 6F72206E6F74206176- <1>
  1956 00001737 61696C61626C653A0A  <1>
  1957 00001740 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1958 00001749 206B6E6F7720746865- <1>
  1959 00001752 7920646F6E2774206D- <1>
  1960 0000175B 616B652074686F7365- <1>
  1961 00001764 20616E796D6F726521- <1>
  1962 0000176D 0A00                <1>
  1963                              <1> 		
  1964 0000176F 446F75626C65206661- <1> err8	db "Double fault:",10
  1965 00001778 756C743A0A          <1>
  1966 0000177D 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1967 00001786 74696F6E2068616E64- <1>
  1968 0000178F 6C657220636F756C64- <1>
  1969 00001798 206E6F742068616E64- <1>
  1970 000017A1 6C6520746861742069- <1>
  1971 000017AA 7420636F756C64206E- <1>
  1972 000017B3 6F742068616E646C65- <1>
  1973 000017BC 20616E206578636570- <1>
  1974 000017C5 74696F6E2E0A00      <1>
  1975                              <1> 		
  1976 000017CC 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1977 000017D5 6F72207365676D656E- <1>
  1978 000017DE 74206F76657272756E- <1>
  1979 000017E7 3A0A00              <1>
  1980 000017EA 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1981 000017F3 722068617070656E73- <1>
  1982 000017FC 20696E206D6F646572- <1>
  1983 00001805 6E20636F6D70757465- <1>
  1984 0000180E 72732C20616E64206E- <1>
  1985 00001817 657665722073686F75- <1>
  1986 00001820 6C642E0A00          <1>
  1987                              <1> 
  1988 00001825 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1989 0000182E 53533A0A            <1>
  1990 00001832 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1991 0000183B 686174207761732073- <1>
  1992 00001844 776974636865642074- <1>
  1993 0000184D 6F20697320696E7661- <1>
  1994 00001856 6C69642E204E6F7468- <1>
  1995 0000185F 696E672066756E6E79- <1>
  1996 00001868 20686572652E0A00    <1>
  1997                              <1> 		
  1998 00001870 5365676D656E74206E- <1> err11	db "Segment not present:",10
  1999 00001879 6F742070726573656E- <1>
  2000 00001882 743A0A              <1>
  2001 00001885 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2002 0000188E 6E7420626974206F66- <1>
  2003 00001897 20746865207365676D- <1>
  2004 000018A0 656E74206465736372- <1>
  2005 000018A9 6970746F7220697320- <1>
  2006 000018B2 73657420746F207A65- <1>
  2007 000018BB 726F2E0A00          <1>
  2008                              <1> 		
  2009 000018C0 537461636B20657863- <1> err12	db "Stack exception:",10
  2010 000018C9 657074696F6E3A0A    <1>
  2011 000018D1 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2012 000018DA 7363726970746F7220- <1>
  2013 000018E3 697320696E76616C69- <1>
  2014 000018EC 64206F72206E6F7420- <1>
  2015 000018F5 70726573656E74206F- <1>
  2016 000018FE 7220697473206C696D- <1>
  2017 00001907 697420697320746F6F- <1>
  2018 00001910 20736D616C6C2E0A00  <1>
  2019                              <1> 		
  2020 00001919 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2021 00001922 726F74656374696F6E- <1>
  2022 0000192B 2076696F6C6174696F- <1>
  2023 00001934 6E3A0A              <1>
  2024 00001937 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2025 00001940 746564207468652063- <1>
  2026 00001949 6F6D70757465722E20- <1>
  2027 00001952 537465702061776179- <1>
  2028 0000195B 20736C6F776C792E20- <1>
  2029 00001964 546865204642492069- <1>
  2030 0000196D 73206F6E2069747320- <1>
  2031 00001976 7761792E0A00        <1>
  2032                              <1> 		
  2033 0000197C 50616765206661756C- <1> err14	db "Page fault:",10
  2034 00001985 743A0A              <1>
  2035 00001988 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2036 00001991 746861742077617320- <1>
  2037 0000199A 726571756573746564- <1>
  2038 000019A3 20776173206E6F7420- <1>
  2039 000019AC 617661696C61626C65- <1>
  2040 000019B5 2E0A00              <1>
  2041                              <1> 		
  2042 000019B8 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2043 000019C1 666F7220506C616E20- <1>
  2044 000019CA 523A0A              <1>
  2045 000019CD 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2046 000019D6 727275707420697320- <1>
  2047 000019DF 726573657276656420- <1>
  2048 000019E8 666F72207573616765- <1>
  2049 000019F1 206F6E6C7920627920- <1>
  2050 000019FA 746865206D696C6974- <1>
  2051 00001A03 617279207768656E20- <1>
  2052 00001A0C 6974206973206E6563- <1>
  2053 00001A15 6573736172790A      <1>
  2054 00001A1C 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'état.",10,0
  2055 00001A25 746520612066756C6C- <1>
  2056 00001A2E 2D7363616C6520636F- <1>
  2057 00001A37 7570206427C3A97461- <1>
  2058 00001A40 742E0A00            <1>
  2059                              <1> 		
  2060 00001A44 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2061 00001A4D 68656C6C206A757374- <1>
  2062 00001A56 2068617070656E6564- <1>
  2063 00001A5F 3F2049732065766572- <1>
  2064 00001A68 796F6E65206F6B6179- <1>
  2065 00001A71 3F2048617264206472- <1>
  2066 00001A7A 6976653F2056696465- <1>
  2067 00001A83 6F20636172643F0A    <1>
  2068 00001A8B 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2069 00001A94 726520796F75207468- <1>
  2070 00001A9D 6572653F0A00        <1>
  2071                              <1> %else
  2072                              <1> unhand:	
  2073                              <1> 	%assign i 0
  2074                              <1> 	%rep 32
  2075                              <1> 	mov byte [intprob], i
  2076                              <1> 	jmp unhand2
  2077                              <1> 	%assign i i+1
  2078                              <1> 	%endrep
  2079                              <1> unhand2:
  2080                              <1> 	cmp byte [intprob], 3
  2081                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2082                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2083                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2084                              <1> 	mov bl, [intprob]
  2085                              <1> 	jmp exitprog
  2086                              <1> intprob db 0
  2087                              <1> %endif
  2088                                      %include "source/ints.asm"
  2089                              <1> int30h:	;for great justice
  2090 00001AA3 80FC00              <1> 	cmp ah, 0
  2091 00001AA6 0F849A000000        <1> 	je near exitprog   ;kills app
  2092 00001AAC 80FC01              <1> 	cmp ah, 1
  2093 00001AAF 0F8419010000        <1> 	je near prntstr  ;print string
  2094 00001AB5 80FC02              <1> 	cmp ah, 2
  2095 00001AB8 0F84BC010000        <1> 	je near readstr	;read string
  2096 00001ABE 80FC03              <1> 	cmp ah, 3
  2097 00001AC1 0F84DC010000        <1> 	je near clearscrn	;clear screen
  2098 00001AC7 80FC04              <1> 	cmp ah, 4
  2099 00001ACA 0F8451020000        <1> 	je near prntreadstr	;read and print string
  2100 00001AD0 80FC05              <1> 	cmp ah, 5
  2101 00001AD3 0F8431070000        <1> 	je near readchar	;get char
  2102 00001AD9 80FC06              <1> 	cmp ah, 6
  2103 00001ADC 0F8498070000        <1> 	je near prntchar	;print char
  2104 00001AE2 80FC07              <1> 	cmp ah, 7
  2105 00001AE5 0F84C1090000        <1> 	je near openfile	;read file
  2106                              <1> ;	cmp ah, 8
  2107                              <1> ;	je near closefile	;close file
  2108 00001AEB 80FC09              <1> 	cmp ah, 9
  2109 00001AEE 0F84C2090000        <1> 	je near num2str	;convert number to string
  2110 00001AF4 80FC0A              <1> 	cmp ah, 10
  2111 00001AF7 0F84D1090000        <1> 	je near str2num	;convert string to number
  2112                              <1> %ifdef threads.included
  2113 00001AFD 80FC0B              <1> 	cmp ah, 11
  2114 00001B00 0F84D4090000        <1> 	je near forkthread	;create thread
  2115                              <1> %endif
  2116 00001B06 80FC0C              <1> 	cmp ah, 12
  2117 00001B09 0F84A20A0000        <1> 	je near gettime	;get time
  2118 00001B0F 80FC0D              <1> 	cmp ah, 13
  2119 00001B12 0F84AE0A0000        <1> 	je near settime	;set time
  2120 00001B18 80FC0E              <1> 	cmp ah, 14
  2121 00001B1B 0F84B50A0000        <1> 	je near runcmd	;run program
  2122 00001B21 80FC0F              <1> 	cmp ah, 15
  2123 00001B24 0F84C10A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2124 00001B2A 80FC10              <1> 	cmp ah, 16
  2125 00001B2D 0F84E60A0000        <1> 	je near hooksig	;hook code to a signal
  2126                              <1> %ifdef gui.included
  2127                              <1> 	cmp ah, 17
  2128                              <1> 	je near guiint	;GUI operations
  2129                              <1> %endif
  2130                              <1> %ifdef sound.included
  2131 00001B33 80FC12              <1> 	cmp ah, 18
  2132 00001B36 0F84ED0A0000        <1> 	je near soundint	;sound operations
  2133                              <1> %endif
  2134                              <1> %ifdef network.included
  2135 00001B3C 80FC13              <1> 	cmp ah, 19
  2136 00001B3F 0F84E90A0000        <1> 	je near netint	;networking operations
  2137                              <1> %endif
  2138 00001B45 CF                  <1> 	iret
  2139                              <1> 
  2140                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2141                              <2> exitprog:
  2142 00001B46 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2143 00001B4A 8ED8                <2> 	mov ds, ax
  2144 00001B4C 8EC0                <2> 	mov es, ax
  2145 00001B4E 8EE0                <2> 	mov fs, ax
  2146 00001B50 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2147 00001B54 8EE8                <2> 	mov gs, ax
  2148 00001B56 C705[145E0000]0000- <2> 	mov dword [currentthread], 0
  2149 00001B5E 0000                <2>
  2150 00001B60 C705[0F5E0000]0400- <2> 	mov dword [lastthread], 4
  2151 00001B68 0000                <2>
  2152 00001B6A C605[135E0000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2153 00001B71 8B25[088C0300]      <2> 	mov esp, [previousstack] ;and this
  2154 00001B77 81FB00000000        <2> 	cmp ebx, 0
  2155 00001B7D 0F8501000000        <2> 	jne near .error
  2156 00001B83 C3                  <2> 	ret
  2157                              <2> .error:
  2158 00001B84 89D9                <2> 	mov ecx, ebx
  2159 00001B86 B006                <2> 	mov al, 6
  2160 00001B88 A2[722F0000]        <2> 	mov [firsthexshown], al
  2161 00001B8D 51                  <2> 	push ecx
  2162 00001B8E BE[A91B0000]        <2> 	mov esi, .msg1
  2163 00001B93 E855000000          <2> 	call printhighlight
  2164 00001B98 59                  <2> 	pop ecx
  2165 00001B99 E8E9130000          <2> 	call showhex
  2166 00001B9E BE[BE1B0000]        <2> 	mov esi, .msg2
  2167 00001BA3 E845000000          <2> 	call printhighlight
  2168 00001BA8 C3                  <2> 	ret
  2169                              <2> 	
  2170 00001BA9 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2171 00001BB2 7461747573206F6620- <2>
  2172 00001BBB 307800              <2>
  2173 00001BBE 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2174 00001BC7 726E65642E0A00      <2>
  2175                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2176                              <2> prntstr:
  2177 00001BCE 30E4                <2> xor ah, ah
  2178 00001BD0 E830000000          <2> call printint
  2179 00001BD5 E9B3E6FFFF          <2> jmp timerinterrupt
  2180                              <2> 
  2181                              <2> 	printquiet:
  2182 00001BDA 6631C0              <2> 		xor ax, ax
  2183 00001BDD 66A3[781C0000]      <2> 		mov [endkeyprint], ax
  2184 00001BE3 66BB0700            <2> 		mov bx, 7
  2185 00001BE7 E832000000          <2> 		call printint.b
  2186 00001BEC C3                  <2> 		ret
  2187                              <2> 
  2188                              <2> 	printhighlight:
  2189 00001BED 6631C0              <2> 		xor ax, ax
  2190 00001BF0 66BBF000            <2> 		mov bx, 0xF0
  2191 00001BF4 E90C000000          <2> 		jmp printint
  2192                              <2> 
  2193                              <2> 	printline:
  2194 00001BF9 BE[B9620000]        <2> 		mov esi, line
  2195                              <2>     print:
  2196 00001BFE 6631C0              <2> 		xor ax, ax
  2197 00001C01 66BB0700            <2> 		mov bx, 7
  2198                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2199 00001C05 56                  <2> 		push esi
  2200 00001C06 66A3[781C0000]      <2> 		mov [endkeyprint], ax
  2201 00001C0C E80D000000          <2> 		call .b
  2202 00001C11 89F1                <2> 		mov ecx, esi
  2203 00001C13 5F                  <2> 		pop edi
  2204 00001C14 29F9                <2> 		sub ecx, edi
  2205 00001C16 51                  <2> 		push ecx
  2206 00001C17 E8170A0000          <2> 		call termcopy
  2207 00001C1C 59                  <2> 		pop ecx
  2208 00001C1D C3                  <2> 		ret
  2209                              <2> 	.b:	
  2210 00001C1E 53                  <2> 		push ebx
  2211 00001C1F 31C0                <2> 		xor eax, eax
  2212 00001C21 8A06                <2> 		mov al, [esi]
  2213 00001C23 3CFF                <2> 		cmp al, 0xFF
  2214 00001C25 7435                <2> 		je .doneutf
  2215 00001C27 3CC0                <2> 		cmp al, 0xC0
  2216 00001C29 7231                <2> 		jb .doneutf
  2217 00001C2B 3CE0                <2> 		cmp al, 0xE0
  2218 00001C2D 721A                <2> 		jb .two
  2219 00001C2F 46                  <2> 		inc esi
  2220 00001C30 8A2E                <2> 		mov ch, [esi]
  2221 00001C32 46                  <2> 		inc esi
  2222 00001C33 8A0E                <2> 		mov cl, [esi]
  2223 00001C35 C0E004              <2> 		shl al, 4
  2224 00001C38 C0E102              <2> 		shl cl, 2
  2225 00001C3B 66C1E902            <2> 		shr cx, 2
  2226 00001C3F 08C5                <2> 		or ch, al
  2227 00001C41 6689C8              <2> 		mov ax, cx
  2228 00001C44 E913000000          <2> 		jmp .doneutf
  2229                              <2> 	.two:
  2230 00001C49 8A2E                <2> 		mov ch, [esi]
  2231 00001C4B 46                  <2> 		inc esi
  2232 00001C4C 8A0E                <2> 		mov cl, [esi]
  2233 00001C4E 66C1E102            <2> 		shl cx, 2
  2234 00001C52 C0ED02              <2> 		shr ch, 2
  2235 00001C55 66C1E902            <2> 		shr cx, 2
  2236 00001C59 6689C8              <2> 		mov ax, cx
  2237                              <2> 	.doneutf:
  2238 00001C5C 5B                  <2> 		pop ebx
  2239 00001C5D 663B05[781C0000]    <2> 		cmp ax, [endkeyprint]
  2240 00001C64 7411                <2> 		je .done
  2241 00001C66 663DFFFE            <2> 		cmp ax, 0xFEFF
  2242 00001C6A 7405                <2> 		je .noprint
  2243 00001C6C E836060000          <2> 		call prcharq
  2244                              <2> 	.noprint:
  2245 00001C71 46                  <2> 		inc esi
  2246 00001C72 E9A7FFFFFF          <2> 		jmp .b
  2247                              <2> 	.done:
  2248 00001C77 C3                  <2> 		ret
  2249                              <2> 
  2250 00001C78 0000                <2> endkeyprint dw 0
  2251                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2252                              <2> readstr:
  2253 00001C7A E805000000          <2> call readint
  2254 00001C7F E909E6FFFF          <2> jmp timerinterrupt
  2255                              <2> 
  2256                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2257 00001C84 89C3                <2> 		mov ebx, eax
  2258                              <2> 	.b:
  2259 00001C86 53                  <2> 		push ebx
  2260 00001C87 57                  <2> 		push edi
  2261 00001C88 56                  <2> 		push esi
  2262 00001C89 30C0                <2> 		xor al, al
  2263 00001C8B E886050000          <2> 		call rdcharint
  2264 00001C90 5E                  <2> 		pop esi
  2265 00001C91 8806                <2> 		mov [esi], al
  2266 00001C93 46                  <2> 		inc esi
  2267 00001C94 5F                  <2> 		pop edi
  2268 00001C95 5B                  <2> 		pop ebx
  2269 00001C96 39FE                <2> 		cmp esi, edi
  2270 00001C98 7304                <2> 		jae .done
  2271 00001C9A 38D8                <2> 		cmp al, bl
  2272 00001C9C 75E8                <2> 		jne .b
  2273                              <2> 	.done:
  2274 00001C9E 4E                  <2> 		dec esi
  2275 00001C9F C60600              <2> 		mov byte [esi], 0
  2276 00001CA2 C3                  <2> 		ret
  2277                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2278                              <2> clearscrn:
  2279 00001CA3 E805000000          <2> call clear
  2280 00001CA8 E9E0E5FFFF          <2> jmp timerinterrupt
  2281                              <2> %ifdef io.serial
  2282                              <2> clear:
  2283                              <2> 	mov esi, .str
  2284                              <2> 	call print
  2285                              <2> 	ret
  2286                              <2> .str db 27,"[2J",27,"[f",0
  2287                              <2> %else
  2288                              <2> clear:
  2289 00001CAD 668B0D[A6240000]    <2> 		mov cx, [charxy]
  2290 00001CB4 BF[9DA60300]        <2> 		mov edi, videobuf
  2291 00001CB9 31C0                <2> 		xor eax, eax
  2292 00001CBB A3[9C240000]        <2> 		mov [linebeginpos], eax
  2293 00001CC0 A3[A0240000]        <2> 		mov [videobufpos], eax
  2294 00001CC5 6631D2              <2> 		xor dx, dx
  2295 00001CC8 66A3[A4240000]      <2> 		mov [charpos], ax
  2296 00001CCE 66B80700            <2> 		mov ax, 7
  2297 00001CD2 C1E010              <2> 		shl eax, 16
  2298                              <2> 	clearb:
  2299 00001CD5 8907                <2> 		mov [edi], eax
  2300 00001CD7 81C704000000        <2> 		add edi, 4
  2301 00001CDD FEC9                <2> 		dec cl
  2302 00001CDF 80F900              <2> 		cmp cl, 0
  2303 00001CE2 75F1                <2> 		jne clearb
  2304 00001CE4 8A0D[A6240000]      <2> 		mov cl, [charxy]
  2305 00001CEA FECD                <2> 		dec ch
  2306 00001CEC 80FD00              <2> 		cmp ch, 0
  2307 00001CEF 75E4                <2> 		jne clearb
  2308                              <2> 	cleardouble:
  2309 00001CF1 BF[1DCC0300]        <2> 		mov edi, videobuf2
  2310 00001CF6 668B0D[A6240000]    <2> 		mov cx, [charxy]
  2311 00001CFD 31C0                <2> 		xor eax, eax
  2312                              <2> 	clearc:
  2313 00001CFF 8907                <2> 		mov [edi], eax
  2314 00001D01 81C704000000        <2> 		add edi, 4
  2315 00001D07 FEC9                <2> 		dec cl
  2316 00001D09 80F900              <2> 		cmp cl, 0
  2317 00001D0C 75F1                <2> 		jne clearc
  2318 00001D0E 8A0D[A6240000]      <2> 		mov cl, [charxy]
  2319 00001D14 FECD                <2> 		dec ch
  2320 00001D16 80FD00              <2> 		cmp ch, 0
  2321 00001D19 75E4                <2> 		jne clearc
  2322 00001D1B E813090000          <2> 		call termcopy
  2323 00001D20 C3                  <2> 		ret
  2324                              <2> %endif
  2325                              <2> 		
  2326                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2327                              <2> prntreadstr:
  2328 00001D21 E80B000000          <2> call rdprint
  2329 00001D26 E962E5FFFF          <2> jmp timerinterrupt
  2330                              <2> 
  2331                              <2> readline:
  2332 00001D2B B00A                <2>   mov al, 10
  2333 00001D2D 66BB0700            <2>   mov bx, 7
  2334                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2335 00001D31 E80F000000          <2> 	call rdprintdos
  2336 00001D36 50                  <2> 	push eax
  2337 00001D37 A0[F5210000]        <2> 	mov al, [endkeyrdpr]
  2338 00001D3C 30E4                <2> 	xor ah, ah
  2339 00001D3E E84D050000          <2> 	call prcharint
  2340 00001D43 58                  <2> 	pop eax
  2341 00001D44 C3                  <2> 	ret
  2342                              <2> 
  2343                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2344 00001D45 8935[FF210000]      <2> 		mov [buftxtloc], esi
  2345 00001D4B A2[F5210000]        <2> 		mov [endkeyrdpr], al
  2346 00001D50 66891D[F7210000]    <2> 		mov [modkeyrdpr], bx
  2347 00001D57 8935[F9210000]      <2> 		mov [firstesirdpr], esi
  2348 00001D5D 893D[03220000]      <2> 		mov [endbufferrdpr], edi
  2349 00001D63 8B3D[A9F10300]      <2> 		mov edi, [commandsentered]
  2350 00001D69 893D[A5F10300]      <2> 		mov [commandlistentries], edi
  2351                              <2> 	rdprintb:
  2352 00001D6F 56                  <2> 		push esi
  2353 00001D70 B001                <2> 		mov al, 1
  2354 00001D72 E89F040000          <2> 		call rdcharint
  2355 00001D77 8A25[76220000]      <2> 		mov ah, [lastkey + 2]
  2356 00001D7D 88E1                <2> 		mov cl, ah
  2357 00001D7F 5E                  <2> 		pop esi
  2358                              <2> %ifdef io.serial
  2359                              <2> 		cmp ah, 0x41
  2360                              <2> 		je near rdprup
  2361                              <2> 		cmp ah, 0x42
  2362                              <2> 		je near rdprdown
  2363                              <2> 		cmp ah, 0x43
  2364                              <2> 		je near rdprright
  2365                              <2> 		cmp ah, 0x44
  2366                              <2> 		je near rdprleft
  2367                              <2> 		cmp ah, 0x31
  2368                              <2> 		je near rdprhome
  2369                              <2> 		cmp ah, 0x48
  2370                              <2> 		je near rdprhome
  2371                              <2> 		cmp ah, 0x46
  2372                              <2> 		je near rdprend
  2373                              <2> 		cmp ah, 0x33
  2374                              <2> 		je near rdprdel
  2375                              <2> 		cmp ah, 0x34
  2376                              <2> 		je near rdprend
  2377                              <2> %else
  2378 00001D80 803D[87520000]E0    <2> 		cmp byte [specialkey], 0xE0
  2379 00001D87 753F                <2> 		jne notspecialrdprnt
  2380 00001D89 80FC53              <2> 		cmp ah, 0x53
  2381 00001D8C 0F84C9030000        <2> 		je near rdprdel
  2382 00001D92 80FC47              <2> 		cmp ah, 0x47
  2383 00001D95 0F8481010000        <2> 		je near rdprhome
  2384 00001D9B 80FC4F              <2> 		cmp ah, 0x4F
  2385 00001D9E 0F849A010000        <2> 		je near rdprend
  2386 00001DA4 80FC50              <2> 		cmp ah, 0x50
  2387 00001DA7 0F8430020000        <2> 		je near rdprdown
  2388 00001DAD 80FC4D              <2> 		cmp ah, 0x4D
  2389 00001DB0 0F84CA010000        <2> 		je near rdprright
  2390 00001DB6 80FC4B              <2> 		cmp ah, 0x4B
  2391 00001DB9 0F849F010000        <2> 		je near rdprleft
  2392 00001DBF 80FC48              <2> 		cmp ah, 0x48
  2393 00001DC2 0F8458020000        <2> 		je near rdprup
  2394                              <2> 	notspecialrdprnt:
  2395                              <2> %endif
  2396 00001DC8 66A1[74220000]      <2> 		mov ax, [lastkey]
  2397 00001DCE 663D0800            <2> 		cmp ax, 8
  2398 00001DD2 0F84B8030000        <2> 		je near rdprbscheck
  2399 00001DD8 663D0000            <2> 		cmp ax, 0
  2400 00001DDC 7491                <2> 		je rdprintb
  2401 00001DDE 80F900              <2> 		cmp cl, 0
  2402 00001DE1 748C                <2> 		je rdprintb
  2403 00001DE3 663D8000            <2> 		cmp ax, 0x80
  2404 00001DE7 7257                <2> 		jb .normal
  2405 00001DE9 663D0008            <2> 		cmp ax, 0x800
  2406 00001DED 7321                <2> 		jae .three
  2407 00001DEF 46                  <2> 		inc esi
  2408 00001DF0 3B35[03220000]      <2> 		cmp esi, [endbufferrdpr]
  2409 00001DF6 0F83DA000000        <2> 		jae near donerdprinc
  2410 00001DFC 66C1E002            <2> 		shl ax, 2
  2411 00001E00 C0E802              <2> 		shr al, 2
  2412 00001E03 0C80                <2> 		or al, 10000000b
  2413 00001E05 80CCC0              <2> 		or ah, 11000000b
  2414 00001E08 8866FF              <2> 		mov [esi - 1], ah
  2415 00001E0B E930000000          <2> 		jmp .normal
  2416                              <2> .three:	
  2417 00001E10 81C602000000        <2> 		add esi, 2
  2418 00001E16 3B35[03220000]      <2> 		cmp esi, [endbufferrdpr]
  2419 00001E1C 0F83B4000000        <2> 		jae near donerdprinc
  2420 00001E22 88E1                <2> 		mov cl, ah
  2421 00001E24 C0E904              <2> 		shr cl, 4
  2422 00001E27 80C9E0              <2> 		or cl, 11100000b
  2423 00001E2A 884EFE              <2> 		mov [esi - 2], cl
  2424 00001E2D 66C1E004            <2> 		shl ax, 4
  2425 00001E31 66C1E802            <2> 		shr ax, 2
  2426 00001E35 80CC80              <2> 		or ah, 10000000b
  2427 00001E38 C0E802              <2> 		shr al, 2
  2428 00001E3B 0C80                <2> 		or al, 10000000b
  2429 00001E3D 8866FF              <2> 		mov [esi - 1], ah
  2430                              <2> .normal:
  2431 00001E40 8806                <2> 		mov [esi], al
  2432 00001E42 46                  <2> 		inc esi
  2433 00001E43 66A1[74220000]      <2> 		mov ax, [lastkey]
  2434                              <2> 	bscheckequal:
  2435 00001E49 668B1D[F7210000]    <2> 		mov bx, [modkeyrdpr]
  2436 00001E50 803D[FE210000]00    <2> 		cmp byte [txtmask], 0
  2437 00001E57 7407                <2> 		je nomasktxt
  2438 00001E59 30E4                <2> 		xor ah, ah
  2439 00001E5B A0[FE210000]        <2> 		mov al, [txtmask]
  2440                              <2> 	nomasktxt:
  2441 00001E60 56                  <2> 		push esi
  2442 00001E61 66A3[F3210000]      <2> 		mov [axcache], ax
  2443 00001E67 668B1D[F5210000]    <2> 		mov bx, [endkeyrdpr]
  2444 00001E6E 6639D8              <2> 		cmp ax, bx
  2445 00001E71 7432                <2> 		je nobackprintbuftxt2
  2446 00001E73 E818040000          <2> 		call prcharint
  2447 00001E78 BE[889E0300]        <2> 		mov esi, buftxt2
  2448 00001E7D E858FDFFFF          <2> 		call printquiet
  2449 00001E82 66B82000            <2> 		mov ax, " "
  2450 00001E86 E81C040000          <2> 		call prcharq
  2451 00001E8B 66B80800            <2> 		mov ax, 8
  2452 00001E8F 81FE[889E0300]      <2> 		cmp esi, buftxt2
  2453 00001E95 740E                <2> 		je nobackprintbuftxt2
  2454                              <2> 	backprintbuftxt2:
  2455 00001E97 E80B040000          <2> 		call prcharq
  2456 00001E9C 4E                  <2> 		dec esi
  2457 00001E9D 81FE[889E0300]      <2> 		cmp esi, buftxt2
  2458 00001EA3 77F2                <2> 		ja backprintbuftxt2
  2459                              <2> 	nobackprintbuftxt2:
  2460 00001EA5 663D0A00            <2> 		cmp ax, 10
  2461 00001EA9 7405                <2> 		je nonobackprint
  2462 00001EAB E8E0030000          <2> 		call prcharint
  2463                              <2> 	nonobackprint:
  2464 00001EB0 5E                  <2> 		pop esi
  2465 00001EB1 3B35[03220000]      <2> 		cmp esi, [endbufferrdpr]
  2466 00001EB7 0F8319000000        <2> 		jae near donerdprinc
  2467 00001EBD 66A1[F3210000]      <2> 		mov ax, [axcache]
  2468 00001EC3 8A25[F5210000]      <2> 		mov ah, [endkeyrdpr]
  2469 00001EC9 38E0                <2> 		cmp al, ah
  2470 00001ECB 0F859EFEFFFF        <2> 		jne rdprintb
  2471 00001ED1 E901000000          <2> 		jmp donerdprint
  2472                              <2> 	donerdprinc:
  2473 00001ED6 46                  <2> 		inc esi
  2474                              <2> 	donerdprint:
  2475 00001ED7 4E                  <2> 		dec esi
  2476 00001ED8 BF[889E0300]        <2> 		mov edi, buftxt2
  2477                              <2> 	copylaterstuff:
  2478 00001EDD 8A07                <2> 		mov al, [edi]
  2479 00001EDF 3C00                <2> 		cmp al, 0
  2480 00001EE1 7409                <2> 		je nocopylaterstuff
  2481 00001EE3 8806                <2> 		mov [esi], al
  2482 00001EE5 47                  <2> 		inc edi
  2483 00001EE6 46                  <2> 		inc esi
  2484 00001EE7 E9F1FFFFFF          <2> 		jmp copylaterstuff
  2485                              <2> 	nocopylaterstuff:
  2486 00001EEC C60600              <2> 		mov byte [esi], 0
  2487 00001EEF E80B000000          <2> 		call clearbuftxt2
  2488 00001EF4 89F1                <2> 		mov ecx, esi
  2489 00001EF6 8B3D[F9210000]      <2> 		mov edi, [firstesirdpr]
  2490 00001EFC 29F9                <2> 		sub ecx, edi
  2491 00001EFE C3                  <2> 		ret
  2492                              <2> 	
  2493                              <2> 	clearbuftxt2:
  2494 00001EFF 30C0                <2> 		xor al, al
  2495 00001F01 BF[889E0300]        <2> 		mov edi, buftxt2
  2496                              <2> 	clearbuftxt2lp:
  2497 00001F06 8807                <2> 		mov [edi], al
  2498 00001F08 47                  <2> 		inc edi
  2499 00001F09 81FF[88A20300]      <2> 		cmp edi, buftxt
  2500 00001F0F 75F5                <2> 		jne clearbuftxt2lp
  2501 00001F11 C3                  <2> 		ret
  2502                              <2> 	
  2503                              <2> 	rdprintb2:
  2504 00001F12 E81C070000          <2> 		call termcopy
  2505 00001F17 E953FEFFFF          <2> 		jmp rdprintb
  2506                              <2> 	
  2507                              <2> 	rdprhome:
  2508 00001F1C 3B35[FF210000]      <2> 		cmp esi, [buftxtloc]
  2509 00001F22 0F84EAFFFFFF        <2> 		je near rdprintb2
  2510 00001F28 BF[889E0300]        <2> 		mov edi, buftxt2
  2511 00001F2D 8A07                <2> 		mov al, [edi]
  2512 00001F2F E88E020000          <2> 		call shiftbuftxt2
  2513 00001F34 E86E030000          <2> 		call prcharq
  2514 00001F39 E9DEFFFFFF          <2> 		jmp rdprhome
  2515                              <2> 		
  2516                              <2> 	rdprend:
  2517 00001F3E BF[889E0300]        <2> 		mov edi, buftxt2
  2518 00001F43 8A07                <2> 		mov al, [edi]
  2519 00001F45 3C00                <2> 		cmp al, 0
  2520 00001F47 0F84C5FFFFFF        <2> 		je near rdprintb2
  2521 00001F4D 8806                <2> 		mov [esi], al
  2522 00001F4F E84C000000          <2> 		call shiftbuftxt2lft
  2523 00001F54 E84E030000          <2> 		call prcharq
  2524 00001F59 E9E0FFFFFF          <2> 		jmp rdprend
  2525                              <2> 	
  2526                              <2> 	rdprleft:
  2527 00001F5E 3B35[FF210000]      <2> 		cmp esi, [buftxtloc]
  2528 00001F64 0F8405FEFFFF        <2> 		je near rdprintb
  2529 00001F6A BF[889E0300]        <2> 		mov edi, buftxt2
  2530 00001F6F 8A07                <2> 		mov al, [edi]
  2531 00001F71 E84C020000          <2> 		call shiftbuftxt2
  2532 00001F76 E815030000          <2> 		call prcharint
  2533 00001F7B E9EFFDFFFF          <2> 		jmp rdprintb
  2534                              <2> 		
  2535                              <2> 	rdprright:
  2536 00001F80 BF[889E0300]        <2> 		mov edi, buftxt2
  2537 00001F85 8A07                <2> 		mov al, [edi]
  2538 00001F87 3C00                <2> 		cmp al, 0
  2539 00001F89 0F84E0FDFFFF        <2> 		je near rdprintb
  2540 00001F8F 8806                <2> 		mov [esi], al
  2541 00001F91 E80A000000          <2> 		call shiftbuftxt2lft
  2542 00001F96 E8F5020000          <2> 		call prcharint
  2543 00001F9B E9CFFDFFFF          <2> 		jmp rdprintb
  2544                              <2> 		
  2545                              <2> 	shiftbuftxt2lft:
  2546 00001FA0 55                  <2> 		push ebp
  2547 00001FA1 89FD                <2> 		mov ebp, edi
  2548                              <2> 	.lp:
  2549 00001FA3 3C00                <2> 		cmp al, 0
  2550 00001FA5 740B                <2> 		je noshiftbuftxt2lft
  2551 00001FA7 47                  <2> 		inc edi
  2552 00001FA8 8A07                <2> 		mov al, [edi]
  2553 00001FAA 8847FF              <2> 		mov [edi - 1], al
  2554 00001FAD E9F1FFFFFF          <2> 		jmp .lp
  2555                              <2> 	noshiftbuftxt2lft:
  2556 00001FB2 8A4500              <2> 		mov al, [ebp]
  2557 00001FB5 5D                  <2> 		pop ebp
  2558 00001FB6 3CC0                <2> 		cmp al, 0xC0
  2559 00001FB8 7304                <2> 		jae .nofix
  2560 00001FBA 3C80                <2> 		cmp al, 0x80
  2561 00001FBC 73E2                <2> 		jae shiftbuftxt2lft
  2562                              <2> 	.nofix:
  2563 00001FBE 8A06                <2> 		mov al, [esi]
  2564 00001FC0 30E4                <2> 		xor ah, ah
  2565 00001FC2 46                  <2> 		inc esi
  2566 00001FC3 668B1D[F7210000]    <2> 		mov bx, [modkeyrdpr]
  2567 00001FCA C3                  <2> 		ret
  2568                              <2> 		
  2569                              <2> 	rdprdownbck:
  2570 00001FCB FECC                <2> 		dec ah
  2571 00001FCD 8825[FD210000]      <2> 		mov [commandedit], ah
  2572 00001FD3 E890000000          <2> 		call rdprbckspc
  2573 00001FD8 E992FDFFFF          <2> 		jmp rdprintb
  2574                              <2> 	
  2575                              <2> 	rdprdown:
  2576 00001FDD 8A25[FD210000]      <2> 		mov ah, [commandedit]
  2577 00001FE3 80FC01              <2> 		cmp ah, 1
  2578 00001FE6 0F8683FDFFFF        <2> 		jbe near rdprintb
  2579 00001FEC 8B3D[A9F10300]      <2> 		mov edi, [commandsentered]
  2580 00001FF2 3B3D[A5F10300]      <2> 		cmp edi, [commandlistentries]
  2581 00001FF8 7618                <2> 		jbe .nofix
  2582 00001FFA 8105[A5F10300]0200- <2> 		add dword [commandlistentries], 2
  2583 00002002 0000                <2>
  2584 00002004 3B3D[A5F10300]      <2> 		cmp edi, [commandlistentries]
  2585 0000200A 7706                <2> 		ja .nofix
  2586 0000200C 893D[A5F10300]      <2> 		mov [commandlistentries], edi
  2587                              <2> 	.nofix:
  2588 00002012 80FC02              <2> 		cmp ah, 2
  2589 00002015 74B4                <2> 		je rdprdownbck
  2590 00002017 80EC02              <2> 		sub ah, 2
  2591 0000201A 8825[FD210000]      <2> 		mov [commandedit], ah
  2592                              <2> 		
  2593                              <2> 	rdprup:
  2594 00002020 3805[FD210000]      <2> 		cmp [commandedit], al
  2595 00002026 0F8443FDFFFF        <2> 		je near rdprintb
  2596 0000202C 813D[A5F10300]0000- <2> 		cmp dword [commandlistentries], 0
  2597 00002034 0000                <2>
  2598 00002036 0F8433FDFFFF        <2> 		je near rdprintb
  2599 0000203C FF0D[A5F10300]      <2> 		dec dword [commandlistentries]
  2600                              <2> 	.lp:
  2601 00002042 BF[889E0300]        <2> 		mov edi, buftxt2
  2602 00002047 8A07                <2> 		mov al, [edi]
  2603 00002049 3C00                <2> 		cmp al, 0
  2604 0000204B 7411                <2> 		je .start
  2605 0000204D 8806                <2> 		mov [esi], al
  2606 0000204F E84CFFFFFF          <2> 		call shiftbuftxt2lft
  2607 00002054 E84E020000          <2> 		call prcharq
  2608 00002059 E9E4FFFFFF          <2> 		jmp .lp
  2609                              <2> 	.start:
  2610 0000205E E805000000          <2> 		call rdprbckspc
  2611 00002063 E94B000000          <2> 		jmp getcurrentcommandstr
  2612                              <2> 	rdprbckspc:
  2613 00002068 3B35[FF210000]      <2> 		cmp esi, [buftxtloc]
  2614 0000206E 7435                <2> 		je nordprupbck
  2615                              <2> 	rdprupbckspclp:
  2616 00002070 66B80800            <2> 		mov ax, 8
  2617 00002074 668B1D[F7210000]    <2> 		mov bx, [modkeyrdpr]
  2618 0000207B E827020000          <2> 		call prcharq
  2619 00002080 66B82000            <2> 		mov ax, ' '
  2620 00002084 E81E020000          <2> 		call prcharq
  2621 00002089 66B80800            <2> 		mov ax, 8
  2622 0000208D E815020000          <2> 		call prcharq
  2623 00002092 4E                  <2> 		dec esi
  2624 00002093 3B35[FF210000]      <2> 		cmp esi, [buftxtloc]
  2625 00002099 7405                <2> 		je nordprupbck2
  2626 0000209B E9D0FFFFFF          <2> 		jmp rdprupbckspclp
  2627                              <2> 	nordprupbck2:
  2628 000020A0 E88E050000          <2> 		call termcopy
  2629                              <2> 	nordprupbck:
  2630 000020A5 8B3D[A1F10300]      <2> 		mov edi, [commandbufpos]
  2631 000020AB 81C7[ADF10300]      <2> 		add edi, commandbuf
  2632 000020B1 4F                  <2> 		dec edi
  2633 000020B2 C3                  <2> 		ret
  2634                              <2> 	getcurrentcommandstr:
  2635 000020B3 8A25[FD210000]      <2> 		mov ah, [commandedit]
  2636 000020B9 FE05[FD210000]      <2> 		inc byte [commandedit]
  2637                              <2> 	getccmdlp:
  2638 000020BF 4F                  <2> 		dec edi
  2639 000020C0 8A07                <2> 		mov al, [edi]
  2640 000020C2 81FF[ADF10300]      <2> 		cmp edi, commandbuf
  2641 000020C8 7231                <2> 		jb getcmdresetcommandbuf
  2642 000020CA 81EF[ADF10300]      <2> 		sub edi, commandbuf
  2643 000020D0 3B3D[A1F10300]      <2> 		cmp edi, [commandbufpos]
  2644 000020D6 0F8493FCFFFF        <2> 		je near rdprintb
  2645 000020DC 81C7[ADF10300]      <2> 		add edi, commandbuf
  2646 000020E2 3C00                <2> 		cmp al, 0
  2647 000020E4 75D9                <2> 		jne getccmdlp
  2648 000020E6 FECC                <2> 		dec ah
  2649 000020E8 80FC00              <2> 		cmp ah, 0
  2650 000020EB 77D2                <2> 		ja getccmdlp
  2651 000020ED 47                  <2> 		inc edi
  2652 000020EE 81FF[AD010400]      <2> 		cmp edi, commandbufend
  2653 000020F4 7710                <2> 		ja fixcmdbufb4morerdpr
  2654 000020F6 E918000000          <2> 		jmp morerdprup
  2655                              <2> 	getcmdresetcommandbuf:
  2656 000020FB BF[AD010400]        <2> 		mov edi, commandbufend
  2657 00002100 47                  <2> 		inc edi
  2658 00002101 E9B9FFFFFF          <2> 		jmp getccmdlp
  2659                              <2> 	fixcmdbufb4morerdpr:
  2660 00002106 4F                  <2> 		dec edi
  2661 00002107 81EF[AD010400]      <2> 		sub edi, commandbufend
  2662 0000210D 81C7[ADF10300]      <2> 		add edi, commandbuf
  2663                              <2> 	morerdprup:
  2664 00002113 8A07                <2> 		mov al, [edi]
  2665 00002115 47                  <2> 		inc edi
  2666 00002116 81EF[ADF10300]      <2> 		sub edi, commandbuf
  2667 0000211C 3C00                <2> 		cmp al, 0
  2668 0000211E 0F84EEFDFFFF        <2> 		je near rdprintb2
  2669 00002124 3B3D[A1F10300]      <2> 		cmp edi, [commandbufpos]
  2670 0000212A 0F83E2FDFFFF        <2> 		jae near rdprintb2
  2671 00002130 81C7[ADF10300]      <2> 		add edi, commandbuf
  2672 00002136 8806                <2> 		mov [esi], al
  2673 00002138 46                  <2> 		inc esi
  2674 00002139 57                  <2> 		push edi
  2675 0000213A 668B1D[F7210000]    <2> 		mov bx, [modkeyrdpr]
  2676 00002141 30E4                <2> 		xor ah, ah
  2677 00002143 E85F010000          <2> 		call prcharq
  2678 00002148 5F                  <2> 		pop edi
  2679 00002149 81FF[AD010400]      <2> 		cmp edi, commandbufend
  2680 0000214F 76C2                <2> 		jbe morerdprup
  2681 00002151 BF[ADF10300]        <2> 		mov edi, commandbuf
  2682 00002156 E9B8FFFFFF          <2> 		jmp morerdprup
  2683                              <2> 
  2684                              <2> 	rdprdel:
  2685 0000215B BF[889E0300]        <2> 		mov edi, buftxt2
  2686 00002160 8A07                <2> 		mov al, [edi]
  2687 00002162 3C00                <2> 		cmp al, 0
  2688 00002164 0F8405FCFFFF        <2> 		je near rdprintb
  2689 0000216A 8806                <2> 		mov [esi], al
  2690 0000216C 3C80                <2> 		cmp al, 0x80
  2691 0000216E 7216                <2> 		jb .fn
  2692                              <2> 	.lp:
  2693 00002170 46                  <2> 		inc esi
  2694 00002171 47                  <2> 		inc edi
  2695 00002172 8A07                <2> 		mov al, [edi]
  2696 00002174 3C00                <2> 		cmp al, 0
  2697 00002176 0F84F3FBFFFF        <2> 		je near rdprintb
  2698 0000217C 8806                <2> 		mov [esi], al
  2699 0000217E 3C80                <2> 		cmp al, 0x80
  2700 00002180 7204                <2> 		jb .fn
  2701 00002182 3CC0                <2> 		cmp al, 0xC0
  2702 00002184 72EA                <2> 		jb .lp
  2703                              <2> 	.fn:
  2704 00002186 E815FEFFFF          <2> 		call shiftbuftxt2lft
  2705 0000218B E817010000          <2> 		call prcharq
  2706                              <2> 		
  2707                              <2> 	rdprbscheck:
  2708 00002190 3B35[F9210000]      <2> 		cmp esi, [firstesirdpr]
  2709 00002196 0F86D3FBFFFF        <2> 		jbe near rdprintb
  2710                              <2> 	goodbscheck:
  2711 0000219C 4E                  <2> 		dec esi
  2712 0000219D 8A46FF              <2> 		mov al, [esi - 1]
  2713 000021A0 C60600              <2> 		mov byte [esi], 0
  2714 000021A3 3CC0                <2> 		cmp al, 0xC0
  2715 000021A5 7309                <2> 		jae .onemore
  2716 000021A7 3C80                <2> 		cmp al, 0x80
  2717 000021A9 73F1                <2> 		jae goodbscheck
  2718 000021AB E904000000          <2> 		jmp .nomore
  2719                              <2> 	.onemore:
  2720 000021B0 4E                  <2> 		dec esi
  2721 000021B1 C60600              <2> 		mov byte [esi], 0		
  2722                              <2> 	.nomore:
  2723 000021B4 668B1D[F7210000]    <2> 		mov bx, [modkeyrdpr]
  2724 000021BB B008                <2> 		mov al, 8
  2725 000021BD E987FCFFFF          <2> 		jmp bscheckequal
  2726                              <2> 		
  2727                              <2> 	shiftbuftxt2:
  2728 000021C2 55                  <2> 		push ebp
  2729 000021C3 89FD                <2> 		mov ebp, edi
  2730                              <2> 	.lp:
  2731 000021C5 3C00                <2> 		cmp al, 0
  2732 000021C7 740C                <2> 		je noshiftbuftxt2
  2733 000021C9 47                  <2> 		inc edi
  2734 000021CA 8A27                <2> 		mov ah, [edi]
  2735 000021CC 8807                <2> 		mov [edi], al
  2736 000021CE 88E0                <2> 		mov al, ah
  2737 000021D0 E9F0FFFFFF          <2> 		jmp .lp
  2738                              <2> 	noshiftbuftxt2:
  2739 000021D5 8A4500              <2> 		mov al, [ebp]
  2740 000021D8 5D                  <2> 		pop ebp
  2741 000021D9 3CC0                <2> 		cmp al, 0xC0
  2742 000021DB 7304                <2> 		jae .nofix
  2743 000021DD 3C80                <2> 		cmp al, 0x80
  2744 000021DF 73E1                <2> 		jae shiftbuftxt2
  2745                              <2> 	.nofix:
  2746 000021E1 BF[889E0300]        <2> 		mov edi, buftxt2
  2747 000021E6 4E                  <2> 		dec esi
  2748 000021E7 8A06                <2> 		mov al, [esi]
  2749 000021E9 8807                <2> 		mov [edi], al
  2750 000021EB C60600              <2> 		mov byte [esi], 0
  2751 000021EE 66B80800            <2> 		mov ax, 8
  2752 000021F2 C3                  <2> 		ret
  2753                              <2> 		
  2754 000021F3 0000                <2> axcache dw 0
  2755 000021F5 0000                <2> endkeyrdpr dw 0
  2756 000021F7 0000                <2> modkeyrdpr dw 0
  2757 000021F9 00000000            <2> firstesirdpr dd 0
  2758 000021FD 00                  <2> commandedit db 0
  2759 000021FE 00                  <2> txtmask db 0
  2760 000021FF 00000000            <2> buftxtloc dd 0
  2761 00002203 00000000            <2> endbufferrdpr dd 0
  2762 00002207 082000              <2> backcursor db 8," ",0
  2763                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2764                              <2> readchar:
  2765 0000220A E807000000          <2> 	call rdcharint
  2766 0000220F E979E0FFFF          <2> 	jmp timerinterrupt
  2767                              <2> getchar:
  2768 00002214 30C0                <2> 	xor al, al
  2769                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2770 00002216 66C705[78220000]01- <2> 		mov word [trans], 1
  2771 0000221E 00                  <2>
  2772 0000221F 3C00                <2> 		cmp al, 0
  2773 00002221 7509                <2> 		jne transcheck
  2774 00002223 66C705[78220000]00- <2> 		mov word [trans], 0
  2775 0000222B 00                  <2>
  2776                              <2> 	transcheck:
  2777                              <2> 	%ifdef io.serial
  2778                              <2> 		call serial.receive
  2779                              <2> 		xor ah, ah
  2780                              <2> 		cmp al, 13
  2781                              <2> 		je rdenter
  2782                              <2> 	%else
  2783 0000222C E878300000          <2> 		call getkey
  2784 00002231 66A1[76220000]      <2> 		mov ax, [lastkey + 2]
  2785 00002237 663D1C00            <2> 		cmp ax, 0x1C
  2786 0000223B 7425                <2> 		je rdenter
  2787                              <2> 	%endif
  2788 0000223D 66A1[74220000]      <2> 		mov ax, [lastkey]
  2789 00002243 668B1D[78220000]    <2> 		mov bx, [trans]
  2790 0000224A 803D[87520000]E0    <2> 		cmp byte [specialkey], 0xE0
  2791 00002251 7500                <2> 		jne nospecialtrans
  2792                              <2> 	nospecialtrans:
  2793 00002253 6609C3              <2> 		or bx, ax
  2794 00002256 6681FB0000          <2> 		cmp bx, 0
  2795 0000225B 74CF                <2> 		je transcheck
  2796 0000225D E90C000000          <2> 		jmp rdend
  2797                              <2> 	rdenter:
  2798 00002262 C1E010              <2> 		shl eax, 16
  2799 00002265 66B80A00            <2> 		mov ax, 10
  2800 00002269 A3[74220000]        <2> 		mov [lastkey], eax
  2801                              <2> 	rdend:
  2802 0000226E A1[74220000]        <2> 		mov eax, [lastkey]
  2803 00002273 C3                  <2> 		ret
  2804                              <2> 		
  2805 00002274 00000000            <2> lastkey dd 0
  2806 00002278 0000                <2> trans dw 0
  2807                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2808                              <2> prntchar:
  2809 0000227A 30E4                <2> 	xor ah, ah ;this kills unicode from the outside unfortunately
  2810                              <2> %ifdef io.serial
  2811                              <2> 	call prcharint
  2812                              <2> 	jmp timerinterrupt
  2813                              <2> prcharint:	
  2814                              <2> prcharq:
  2815                              <2> 	call serial.send
  2816                              <2> 	ret
  2817                              <2> %else
  2818 0000227C 38FB                <2> cmp bl, bh
  2819 0000227E 740A                <2> je prchar.notimer
  2820 00002280 E80B000000          <2> call prcharint
  2821 00002285 E903E0FFFF          <2> jmp timerinterrupt
  2822                              <2> prchar.notimer:
  2823 0000228A E818000000          <2> 	call prcharq
  2824 0000228F CF                  <2> 	iret
  2825                              <2> 	
  2826                              <2> prcharint:	;print char, char in ax, modifier in bx, if ecx is eax then termcopy will not happen, will run termcopy if called as is
  2827 00002290 663DFFFE            <2> 	cmp ax, 0xFEFF
  2828 00002294 740E                <2> 	je .ret
  2829 00002296 39C1                <2> 	cmp ecx, eax
  2830 00002298 740D                <2> 	je prcharq
  2831 0000229A E808000000          <2> 	call prcharq
  2832 0000229F E88F030000          <2> 	call termcopy
  2833                              <2> .ret:
  2834 000022A4 C3                  <2> 	ret
  2835 000022A5 00                  <2> termguion db 0
  2836 000022A6 00                  <2> termcopyon db 0
  2837                              <2> prcharq:
  2838 000022A7 C1E310              <2> 	shl ebx, 16
  2839 000022AA 6689C3              <2> 	mov bx, ax
  2840 000022AD 89D8                <2> 	mov eax, ebx
  2841 000022AF A3[A8240000]        <2> 	mov [charbuf], eax
  2842 000022B4 8B1D[A0240000]      <2> 	mov ebx, [videobufpos]
  2843 000022BA BF[9DA60300]        <2> 	mov edi, videobuf
  2844 000022BF 01DF                <2> 	add edi, ebx
  2845 000022C1 A1[3E260000]        <2> 	mov eax, [removedvideo]
  2846 000022C6 8907                <2> 	mov [edi], eax
  2847 000022C8 A1[A8240000]        <2> 	mov eax, [charbuf]
  2848 000022CD 31D2                <2> 	xor edx, edx
  2849 000022CF 668B15[A4240000]    <2> 	mov dx, [charpos]
  2850 000022D6 31C9                <2> 	xor ecx, ecx
  2851 000022D8 668B0D[A6240000]    <2> 	mov cx, [charxy]
  2852 000022DF 663D0900            <2> 	cmp ax, 9
  2853 000022E3 0F847C000000        <2> 	je near prtab
  2854 000022E9 663D0D00            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2855 000022ED 0F84A2000000        <2> 	je near prcr
  2856 000022F3 663D0A00            <2> 	cmp ax, 10
  2857 000022F7 0F84F1000000        <2> 	je near prnlcr
  2858 000022FD 663D0800            <2> 	cmp ax, 8
  2859 00002301 0F84A2000000        <2> 	je near prbs
  2860 00002307 663DFF00            <2> 	cmp ax, 255		;null character
  2861 0000230B 0F8424000000        <2> 	je near donescr
  2862 00002311 663D0030            <2> 	cmp ax, (fontend - fonts)/16
  2863 00002315 0F8341000000        <2> 	jae near prnofont
  2864                              <2> donepr:
  2865 0000231B 8907                <2> 	mov [edi], eax
  2866 0000231D 81C704000000        <2> 	add edi, 4
  2867 00002323 FEC2                <2> 	inc dl
  2868                              <2> donecrnl:
  2869 00002325 38CA                <2> 	cmp dl, cl
  2870 00002327 0F83E5000000        <2> 	jae near preol
  2871                              <2> doneeol:
  2872 0000232D 38EE                <2> 	cmp dh, ch
  2873 0000232F 0F83FA000000        <2> 	jae near prscr	
  2874                              <2> donescr:
  2875 00002335 89FB                <2> 	mov ebx, edi
  2876 00002337 8B07                <2> 	mov eax, [edi]
  2877 00002339 A3[3E260000]        <2> 	mov [removedvideo], eax
  2878 0000233E 81EB[9DA60300]      <2> 	sub ebx, videobuf
  2879 00002344 891D[A0240000]      <2> 	mov [videobufpos], ebx
  2880 0000234A 668915[A4240000]    <2> 	mov [charpos], dx
  2881 00002351 A1[A8240000]        <2> 	mov eax, [charbuf]
  2882 00002356 89C3                <2> 	mov ebx, eax
  2883 00002358 C1EB10              <2> 	shr ebx, 16
  2884 0000235B C3                  <2> 	ret
  2885                              <2> 	
  2886                              <2> 	prnofont:
  2887 0000235C 66B80200            <2> 		mov ax, 2
  2888 00002360 E9B6FFFFFF          <2> 		jmp donepr
  2889                              <2> 	prtab:
  2890 00002365 8B1D[9C240000]      <2> 		mov ebx, [linebeginpos]
  2891 0000236B 81EF[9DA60300]      <2> 		sub edi, videobuf
  2892 00002371 29DF                <2> 		sub edi, ebx
  2893 00002373 C1EF05              <2> 		shr edi, 5
  2894 00002376 C1E705              <2> 		shl edi, 5
  2895 00002379 81C720000000        <2> 		add edi, 32
  2896 0000237F C0EA03              <2> 		shr dl, 3
  2897 00002382 C0E203              <2> 		shl dl, 3
  2898 00002385 80C208              <2> 		add dl, 8
  2899 00002388 81C7[9DA60300]      <2> 		add edi, videobuf
  2900 0000238E 01DF                <2> 		add edi, ebx
  2901 00002390 E990FFFFFF          <2> 		jmp donecrnl
  2902                              <2> 	
  2903                              <2> 	prcr:
  2904 00002395 30D2                <2> 		xor dl, dl
  2905 00002397 BF[9DA60300]        <2> 		mov edi, videobuf
  2906 0000239C 8B1D[9C240000]      <2> 		mov ebx, [linebeginpos]
  2907 000023A2 01DF                <2> 		add edi, ebx
  2908 000023A4 E97CFFFFFF          <2> 		jmp donecrnl
  2909                              <2> 			
  2910                              <2> 	prbs:
  2911 000023A9 8B1D[9C240000]      <2> 		mov ebx, [linebeginpos]
  2912 000023AF 80FA00              <2> 		cmp dl, 0
  2913 000023B2 7415                <2> 		je prbackline
  2914                              <2> 	prnobmr:
  2915 000023B4 891D[9C240000]      <2> 		mov [linebeginpos], ebx
  2916 000023BA FECA                <2> 		dec dl
  2917 000023BC 31C0                <2> 		xor eax, eax
  2918 000023BE 81EF04000000        <2> 		sub edi, 4
  2919 000023C4 E95CFFFFFF          <2> 		jmp donecrnl
  2920                              <2> 	prbackline:
  2921 000023C9 6631DB              <2> 		xor bx, bx
  2922 000023CC 88CA                <2> 		mov dl, cl
  2923 000023CE 80FE00              <2> 		cmp dh, 0
  2924 000023D1 74E1                <2> 		je prnobmr
  2925 000023D3 8B1D[9C240000]      <2> 		mov ebx, [linebeginpos]
  2926 000023D9 6651                <2> 		push cx
  2927 000023DB 31C9                <2> 		xor ecx, ecx
  2928 000023DD 8A0C24              <2> 		mov cl, [esp]
  2929 000023E0 C1E102              <2> 		shl ecx, 2
  2930 000023E3 29CB                <2> 		sub ebx, ecx
  2931 000023E5 6659                <2> 		pop cx
  2932 000023E7 FECE                <2> 		dec dh
  2933 000023E9 E9C6FFFFFF          <2> 		jmp prnobmr
  2934                              <2> 		
  2935                              <2> 	prnlcr:
  2936 000023EE FEC6                <2> 		inc dh
  2937 000023F0 31DB                <2> 		xor ebx, ebx
  2938 000023F2 30D2                <2> 		xor dl, dl
  2939 000023F4 88CB                <2> 		mov bl, cl
  2940 000023F6 66C1E302            <2> 		shl bx, 2
  2941 000023FA BF[9DA60300]        <2> 		mov edi, videobuf
  2942 000023FF 031D[9C240000]      <2> 		add ebx, [linebeginpos]
  2943 00002405 891D[9C240000]      <2> 		mov [linebeginpos], ebx
  2944 0000240B 01DF                <2> 		add edi, ebx
  2945 0000240D E913FFFFFF          <2> 		jmp donecrnl
  2946                              <2> 		
  2947                              <2> 	preol:
  2948 00002412 30D2                <2> 		xor dl, dl
  2949 00002414 FEC6                <2> 		inc dh
  2950 00002416 31DB                <2> 		xor ebx, ebx
  2951 00002418 88CB                <2> 		mov bl, cl
  2952 0000241A 66C1E302            <2> 		shl bx, 2
  2953 0000241E 031D[9C240000]      <2> 		add ebx, [linebeginpos]
  2954 00002424 891D[9C240000]      <2> 		mov [linebeginpos], ebx
  2955 0000242A E9FEFEFFFF          <2> 		jmp doneeol
  2956                              <2> 	prscr:
  2957 0000242F FECE                <2> 		dec dh
  2958 00002431 BF[9DA60300]        <2> 		mov edi, videobuf
  2959 00002436 31DB                <2> 		xor ebx, ebx
  2960 00002438 88CB                <2> 		mov bl, cl
  2961 0000243A 66C1E302            <2> 		shl bx, 2
  2962 0000243E 01FB                <2> 		add ebx, edi
  2963                              <2> 	intscrollloop:
  2964 00002440 8B03                <2> 		mov eax, [ebx]
  2965 00002442 8907                <2> 		mov [edi], eax
  2966 00002444 81C704000000        <2> 		add edi, 4
  2967 0000244A 81C304000000        <2> 		add ebx, 4
  2968 00002450 FEC9                <2> 		dec cl
  2969 00002452 80F900              <2> 		cmp cl, 0
  2970 00002455 75E9                <2> 		jne intscrollloop
  2971 00002457 8A0D[A6240000]      <2> 		mov cl, [charxy]
  2972 0000245D FECD                <2> 		dec ch
  2973 0000245F 80FD01              <2> 		cmp ch, 1
  2974 00002462 77DC                <2> 		ja intscrollloop
  2975 00002464 31C0                <2> 		xor eax, eax
  2976 00002466 81EF[9DA60300]      <2> 		sub edi, videobuf
  2977 0000246C 893D[9C240000]      <2> 		mov [linebeginpos], edi
  2978 00002472 81C7[9DA60300]      <2> 		add edi, videobuf
  2979 00002478 89FB                <2> 		mov ebx, edi
  2980                              <2> 	intloopclear:
  2981 0000247A 8903                <2> 		mov [ebx], eax
  2982 0000247C 81C304000000        <2> 		add ebx, 4
  2983 00002482 FEC9                <2> 		dec cl
  2984 00002484 80F900              <2> 		cmp cl, 0
  2985 00002487 75F1                <2> 		jne intloopclear
  2986 00002489 FECD                <2> 		dec ch
  2987 0000248B 80FD00              <2> 		cmp ch, 0
  2988 0000248E 75EA                <2> 		jne intloopclear
  2989 00002490 668B0D[A6240000]    <2> 		mov cx, [charxy]
  2990 00002497 E999FEFFFF          <2> 		jmp donescr
  2991                              <2> 		
  2992 0000249C 00000000            <2> linebeginpos dd 0
  2993 000024A0 00000000            <2> videobufpos: dd 0
  2994 000024A4 0000                <2> charpos db 0,0
  2995 000024A6 501E                <2> charxy db 80,30
  2996 000024A8 00000000            <2> charbuf dd 0
  2997                              <2> %endif
  2998                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2999                              <2> openfile:
  3000 000024AC E89D370000          <2> 	call loadfile
  3001 000024B1 E9D7DDFFFF          <2> 	jmp timerinterrupt
  3002                              <1> 	%include 'source/interrupts/9_num2str.asm'
  3003                              <2> num2str:
  3004 000024B6 3C00                <2> 	cmp al, 0
  3005 000024B8 750A                <2> 	jne num2strb
  3006 000024BA E8830B0000          <2> 	call showdec
  3007 000024BF E9C9DDFFFF          <2> 	jmp timerinterrupt
  3008                              <2> num2strb:
  3009 000024C4 E8BE0A0000          <2> 	call showhex
  3010 000024C9 E9BFDDFFFF          <2> 	jmp timerinterrupt
  3011                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3012                              <2> str2num:
  3013 000024CE 89F7                <2> 	mov edi, esi
  3014 000024D0 E84B0C0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3015 000024D5 E9B3DDFFFF          <2> 	jmp timerinterrupt
  3016                              <2> 	
  3017                              <1> %ifdef threads.included
  3018                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3019                              <2> forkthread:
  3020                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  3021                              <2> 			;returns the PID of the new fork in ebx
  3022                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  3023 000024DA FA                  <2> 	cli
  3024 000024DB 60                  <2> 	pushad
  3025 000024DC 8925[A9250000]      <2> 	mov [.espold], esp
  3026 000024E2 C605[135E0000]01    <2> 	mov byte [threadson], 1
  3027 000024E9 8B1D[145E0000]      <2> 	mov ebx, [currentthread]
  3028 000024EF C1E302              <2> 	shl ebx, 2
  3029 000024F2 89A3[C1210400]      <2> 	mov [threadlist + ebx], esp
  3030 000024F8 C1EB02              <2> 	shr ebx, 2
  3031 000024FB 81FB00000000        <2> 	cmp ebx, 0
  3032 00002501 750C                <2> 	jne .simplestack
  3033 00002503 BB[00880300]        <2> 	mov ebx, stackend
  3034 00002508 29E3                <2> 	sub ebx, esp
  3035 0000250A E90B000000          <2> 	jmp .stackcalcdone
  3036                              <2> .simplestack:
  3037 0000250F C1E30A              <2> 	shl ebx, 10
  3038 00002512 81C3[C1350400]      <2> 	add ebx, stack1
  3039 00002518 29E3                <2> 	sub ebx, esp
  3040                              <2> .stackcalcdone:
  3041 0000251A 29DC                <2> 	sub esp, ebx
  3042 0000251C 81C4[C1350400]      <2> 	add esp, stack1
  3043 00002522 8B1D[0F5E0000]      <2> 	mov ebx, [lastthread]
  3044 00002528 C1E308              <2> 	shl ebx, 8
  3045 0000252B 01DC                <2> 	add esp, ebx
  3046 0000252D 891D[AD250000]      <2> 	mov [.stackend], ebx
  3047                              <2> 
  3048 00002533 89E5                <2> 	mov ebp, esp
  3049 00002535 8B25[A9250000]      <2> 	mov esp, [.espold]
  3050                              <2> 
  3051 0000253B C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3052 0000253E 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3053                              <2> 
  3054 00002542 31DB                <2> 	xor ebx, ebx
  3055                              <2> .stackcopy:
  3056 00002544 668B041C            <2> 	mov ax, [esp + ebx]
  3057 00002548 6689441D00          <2> 	mov [ebp + ebx], ax
  3058 0000254D 81C302000000        <2> 	add ebx, 2
  3059 00002553 3B1D[AD250000]      <2> 	cmp ebx, [.stackend]
  3060 00002559 72E9                <2> 	jb .stackcopy
  3061                              <2> 
  3062 0000255B 31C0                <2> 	xor eax, eax
  3063 0000255D 668CC8              <2> 	mov ax, cs
  3064 00002560 89C2                <2> 	mov edx, eax
  3065 00002562 8B4C2428            <2> 	mov ecx, [esp + 40]
  3066 00002566 81C900020000        <2> 	or ecx, 0x200
  3067                              <2> 	
  3068 0000256C 81FE00000000        <2> 	cmp esi, 0
  3069 00002572 7504                <2> 	jne .nochangestack
  3070 00002574 8B742420            <2> 	mov esi, [esp + 32]
  3071                              <2> .nochangestack:
  3072 00002578 89F0                <2> 	mov eax, esi
  3073 0000257A 89EC                <2> 	mov esp, ebp
  3074                              <2> 
  3075 0000257C 89442420            <2> 	mov [esp + 32], eax
  3076 00002580 89542424            <2> 	mov [esp + 36], edx
  3077 00002584 894C2428            <2> 	mov [esp + 40], ecx
  3078                              <2> 
  3079 00002588 8B1D[0F5E0000]      <2> 	mov ebx, [lastthread]
  3080 0000258E 89A3[C1210400]      <2> 	mov [threadlist + ebx], esp
  3081 00002594 81C304000000        <2> 	add ebx, 4
  3082 0000259A 891D[0F5E0000]      <2> 	mov [lastthread], ebx
  3083 000025A0 8B25[A9250000]      <2> 	mov esp, [.espold]
  3084 000025A6 61                  <2> 	popad
  3085 000025A7 FB                  <2> 	sti
  3086 000025A8 CF                  <2> 	iret
  3087                              <2> 
  3088 000025A9 00000000            <2> .espold dd 0
  3089 000025AD 00000000            <2> .stackend dd 0
  3090                              <1> %endif
  3091                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3092                              <2> gettime:
  3093 000025B1 A1[46020000]        <2> 	mov eax, [timeseconds]
  3094 000025B6 8B1D[4A020000]      <2> 	mov ebx, [timenanoseconds]
  3095 000025BC 89D9                <2> 	mov ecx, ebx
  3096 000025BE C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3097 000025C1 E9C7DCFFFF          <2> 	jmp timerinterrupt
  3098                              <1> 	%include 'source/interrupts/13_settime.asm'
  3099                              <2> settime:
  3100 000025C6 A3[46020000]        <2> 	mov [timeseconds], eax
  3101 000025CB 891D[4A020000]      <2> 	mov [timenanoseconds], ebx
  3102 000025D1 E9B7DCFFFF          <2> 	jmp timerinterrupt
  3103                              <2> 	
  3104                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3105                              <2> runcmd:
  3106 000025D6 BF[88A20300]        <2> 	mov edi, buftxt
  3107                              <2> cpcmd:
  3108 000025DB 8A06                <2> 	mov al, [esi]
  3109 000025DD 8807                <2> 	mov [edi], al
  3110 000025DF 46                  <2> 	inc esi
  3111 000025E0 47                  <2> 	inc edi
  3112 000025E1 3C00                <2> 	cmp al, 0
  3113 000025E3 75F6                <2> 	jne cpcmd
  3114 000025E5 E878060000          <2> 	call run
  3115 000025EA CF                  <2> 	iret
  3116                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3117                              <2> proginfo:
  3118                              <2> 	;mov ebx, variables
  3119 000025EB 8B35[3E2D0000]      <2> 	mov esi, [currentcommandloc]
  3120 000025F1 89F7                <2> 	mov edi, esi
  3121 000025F3 31C9                <2> 	xor ecx, ecx
  3122                              <2> getcommandzeroes:
  3123 000025F5 8A07                <2> 	mov al, [edi]
  3124 000025F7 47                  <2> 	inc edi
  3125 000025F8 3C3B                <2> 	cmp al, ';'
  3126 000025FA 740E                <2> 	je nomorezeroes
  3127 000025FC 3C00                <2> 	cmp al, 0
  3128 000025FE 740A                <2> 	je nomorezeroes
  3129 00002600 3C20                <2> 	cmp al, ' '
  3130 00002602 75F1                <2> 	jne getcommandzeroes
  3131 00002604 41                  <2> 	inc ecx
  3132 00002605 E9EBFFFFFF          <2> 	jmp getcommandzeroes
  3133                              <2> nomorezeroes:
  3134 0000260A 41                  <2> 	inc ecx
  3135 0000260B 4F                  <2> 	dec edi
  3136 0000260C 8B1D[148E0300]      <2> 	mov ebx, [uid]
  3137 00002612 8B15[145E0000]      <2> 	mov edx, [currentthread]
  3138 00002618 CF                  <2> 	iret
  3139                              <2> 	
  3140                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3141                              <2> hooksig: ;hook code in ESI to signal in AL
  3142 00002619 3C00                <2> 	cmp al, 0
  3143 0000261B 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3144                              <2> ;	xor ebx, ebx
  3145                              <2> ;	mov bl, al
  3146                              <2> ;	shl bl, 2
  3147 0000261D BF[04880300]        <2> 	mov edi, sigtable
  3148 00002622 8937                <2> 	mov [edi], esi
  3149                              <2> .quit:
  3150 00002624 E964DCFFFF          <2> 	jmp timerinterrupt
  3151                              <1> %ifdef gui.included
  3152                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3153                              <1> %endif
  3154                              <1> %ifdef sound.included
  3155                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3156                              <2> soundint:
  3157 00002629 E95FDCFFFF          <2> 	jmp timerinterrupt
  3158                              <1> %endif
  3159                              <1> %ifdef network.included
  3160                              <1> 	%include 'source/interrupts/19_netint.asm'
  3161                              <2> netint:
  3162 0000262E E95ADCFFFF          <2> 	jmp timerinterrupt
  3163                              <1> %endif
  3164                              <1> 
  3165                              <1> termcopy:
  3166                              <1> %ifdef io.serial
  3167                              <1> 	ret
  3168                              <1> %else
  3169                              <1> %ifdef terminal.vsync
  3170                              <1> 	mov byte [termcopyneeded], 1
  3171                              <1> 	ret
  3172                              <1> %else
  3173 00002633 E80A000000          <1> 	call newtermcopy
  3174 00002638 C3                  <1> 	ret
  3175                              <1> %endif
  3176 00002639 00                  <1> 	termcopyneeded db 0
  3177 0000263A 00000000            <1> 	termcursorpos dd 0
  3178 0000263E 00000000            <1> 	removedvideo dd 0
  3179                              <1> newtermcopy:
  3180 00002642 60                  <1> 	pusha
  3181 00002643 BF[9DA60300]        <1> 	mov edi, videobuf
  3182 00002648 31DB                <1> 	xor ebx, ebx
  3183 0000264A 881D[39260000]      <1> 	mov [termcopyneeded], bl
  3184 00002650 8B1D[A0240000]      <1> 	mov ebx, [videobufpos]
  3185 00002656 01DF                <1> 	add edi, ebx
  3186 00002658 893D[3A260000]      <1> 	mov [termcursorpos], edi
  3187 0000265E E8C7000000          <1> 	call switchtermcursor
  3188 00002663 803D[DE620000]00    <1> 	cmp byte [guion], 0
  3189 0000266A 0F8405000000        <1> 	je near nowincopy
  3190                              <1> %ifdef gui.included
  3191                              <1> 	mov byte [mouseselecton], 0
  3192                              <1> 	mov byte [termcopyon], 1
  3193                              <1> 	cmp byte [termguion], 1
  3194                              <1> 	je near windowvideocopy
  3195                              <1> %endif
  3196 00002670 E9AE000000          <1> 	jmp nocopytermatall
  3197                              <1> nowincopy:
  3198 00002675 BE00000A00          <1> 	mov esi, 0xA0000
  3199 0000267A A1[26020000]        <1> 	mov eax, [basecache]
  3200 0000267F C1E004              <1> 	shl eax, 4
  3201 00002682 29C6                <1> 	sub esi, eax
  3202 00002684 BF[9DA60300]        <1> 	mov edi, videobuf
  3203 00002689 31C9                <1> 	xor ecx, ecx
  3204 0000268B 668B0D[A6240000]    <1> 	mov cx, [charxy]
  3205                              <1> nowincopy2:
  3206 00002692 8B07                <1> 	mov eax, [edi]
  3207 00002694 81C780250000        <1> 	add edi, (videobuf2 - videobuf)
  3208 0000269A 8B1F                <1> 	mov ebx, [edi]
  3209 0000269C 8907                <1> 	mov [edi], eax
  3210 0000269E 81EF80250000        <1> 	sub edi, (videobuf2 - videobuf)
  3211 000026A4 81C702000000        <1> 	add edi, 2
  3212 000026AA 39D8                <1> 	cmp eax, ebx
  3213 000026AC 744B                <1> 	je nopresentwinfont
  3214 000026AE 81EF02000000        <1> 	sub edi, 2
  3215 000026B4 BD[38650000]        <1> 	mov ebp, fonts
  3216 000026B9 31C0                <1> 	xor eax, eax
  3217 000026BB 668B07              <1> 	mov ax, [edi]
  3218 000026BE C1E004              <1> 	shl eax, 4
  3219 000026C1 01C5                <1> 	add ebp, eax
  3220 000026C3 81C702000000        <1> 	add edi, 2
  3221 000026C9 668B1F              <1> 	mov bx, [edi]
  3222 000026CC 31D2                <1> 	xor edx, edx
  3223 000026CE 8A15[A6240000]      <1> 	mov dl, [charxy]
  3224 000026D4 C1C110              <1> 	rol ecx, 16
  3225 000026D7 B110                <1> 	mov cl, 16
  3226                              <1> nowinfont:
  3227 000026D9 8A4500              <1> 	mov al, [ebp]
  3228 000026DC D0C8                <1> 	ror al, 1
  3229 000026DE 80FB80              <1> 	cmp bl, 0x80
  3230 000026E1 7202                <1> 	jb notnotfont
  3231 000026E3 F6D0                <1> 	not al
  3232                              <1> notnotfont:
  3233 000026E5 8806                <1> 	mov [esi], al
  3234 000026E7 01D6                <1> 	add esi, edx
  3235 000026E9 45                  <1> 	inc ebp
  3236 000026EA FEC9                <1> 	dec cl
  3237 000026EC 80F900              <1> 	cmp cl, 0
  3238 000026EF 75E8                <1> 	jne nowinfont
  3239 000026F1 C1E204              <1> 	shl edx, 4
  3240 000026F4 29D6                <1> 	sub esi, edx
  3241 000026F6 C1C110              <1> 	rol ecx, 16
  3242                              <1> nopresentwinfont:
  3243 000026F9 81C702000000        <1> 	add edi, 2
  3244 000026FF 46                  <1> 	inc esi
  3245 00002700 FEC9                <1> 	dec cl
  3246 00002702 80F900              <1> 	cmp cl, 0
  3247 00002705 758B                <1> 	jne nowincopy2
  3248 00002707 8A0D[A6240000]      <1> 	mov cl, [charxy]
  3249 0000270D 31D2                <1> 	xor edx, edx
  3250 0000270F 88CA                <1> 	mov dl, cl
  3251 00002711 29D6                <1> 	sub esi, edx
  3252 00002713 C1E204              <1> 	shl edx, 4
  3253 00002716 01D6                <1> 	add esi, edx
  3254 00002718 FECD                <1> 	dec ch
  3255 0000271A 80FD00              <1> 	cmp ch, 0
  3256 0000271D 0F856FFFFFFF        <1> 	jne nowincopy2
  3257                              <1> nocopytermatall:
  3258 00002723 E802000000          <1> 	call switchtermcursor
  3259 00002728 61                  <1> 	popa
  3260 00002729 C3                  <1> 	ret
  3261                              <1> 	
  3262                              <1> switchtermcursor:
  3263 0000272A 8B3D[3A260000]      <1> 	mov edi, [termcursorpos]
  3264 00002730 668B4702            <1> 	mov ax, [edi + 2]
  3265 00002734 668B1F              <1> 	mov bx, [edi]
  3266 00002737 663D8000            <1> 	cmp ax, 0x80
  3267 0000273B 7209                <1> 	jb movlargecursorterm
  3268 0000273D 66B80700            <1> 	mov ax, 7
  3269 00002741 E904000000          <1> 	jmp movedcursorterm
  3270                              <1> movlargecursorterm:
  3271 00002746 66B8F000            <1> 	mov ax, 0xF0
  3272                              <1> movedcursorterm:
  3273 0000274A 66894702            <1> 	mov [edi + 2], ax
  3274 0000274E 6681FB0000          <1> 	cmp bx, 0
  3275 00002753 7507                <1> 	jne fixednocursorterm
  3276 00002755 66BB2000            <1> 	mov bx, ' '
  3277 00002759 66891F              <1> 	mov [edi], bx
  3278                              <1> fixednocursorterm:
  3279 0000275C C3                  <1> 	ret
  3280                              <1> %endif
  3281                                      %include "source/dosints.asm"
  3282                              <1> int20h:
  3283 0000275D 66B8004C            <1> mov ax, 0x4C00
  3284                              <1> int21h:
  3285                              <1> dostosolleros:
  3286 00002761 6650                <1> 	push ax
  3287 00002763 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3288 00002767 8ED8                <1> 	mov ds, ax
  3289 00002769 8EC0                <1> 	mov es, ax
  3290 0000276B 8EE0                <1> 	mov fs, ax
  3291 0000276D 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3292 00002771 8EE8                <1> 	mov gs, ax
  3293 00002773 6658                <1> 	pop ax
  3294 00002775 9C                  <1> 	pushf
  3295 00002776 60                  <1> 	pusha
  3296 00002777 80FC01              <1> 	cmp ah, 1
  3297 0000277A 0F8449000000        <1> 	je near dosgchar
  3298 00002780 80FC02              <1> 	cmp ah, 2
  3299 00002783 0F844A000000        <1> 	je near doswchar
  3300 00002789 80FC09              <1> 	cmp ah, 9
  3301 0000278C 0F8451000000        <1> 	je near dosprintstr
  3302 00002792 80FC0A              <1> 	cmp ah, 0xA
  3303 00002795 0F8463000000        <1> 	je near dosgetstr
  3304 0000279B 80FC2B              <1> 	cmp ah, 0x2B
  3305 0000279E 0F84A2000000        <1> 	je near dosgetdate
  3306 000027A4 80FC2C              <1> 	cmp ah, 0x2C
  3307 000027A7 0F84BC000000        <1> 	je near dosgettime
  3308 000027AD 80FC4C              <1> 	cmp ah, 0x4C
  3309 000027B0 0F84D1000000        <1> 	je near dosexit
  3310                              <1> backtodos:
  3311 000027B6 61                  <1> 	popa
  3312 000027B7 9D                  <1> 	popf
  3313 000027B8 6650                <1> 	push ax
  3314 000027BA 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3315 000027BE 8ED8                <1> 	mov ds, ax
  3316 000027C0 8EC0                <1> 	mov es, ax
  3317 000027C2 8EE0                <1> 	mov fs, ax
  3318 000027C4 8EE8                <1> 	mov gs, ax
  3319 000027C6 6658                <1> 	pop ax
  3320 000027C8 CF                  <1> 	iret
  3321                              <1> 
  3322                              <1> dosgchar:
  3323 000027C9 E846FAFFFF          <1> 	call getchar
  3324 000027CE E9E3FFFFFF          <1> 	jmp backtodos
  3325                              <1> 	
  3326                              <1> doswchar:
  3327 000027D3 88D0                <1> 	mov al, dl
  3328 000027D5 30E4                <1> 	xor ah, ah
  3329 000027D7 B307                <1> 	mov bl, 7
  3330 000027D9 E8B2FAFFFF          <1> 	call prcharint
  3331 000027DE E9D3FFFFFF          <1> 	jmp backtodos
  3332                              <1> 	
  3333                              <1> dosprintstr:
  3334 000027E3 31F6                <1> 	xor esi, esi
  3335 000027E5 6689D6              <1> 	mov si, dx
  3336 000027E8 81C600004000        <1> 	add esi, dosprogloc
  3337 000027EE 66B82400            <1> 	mov ax, "$"
  3338 000027F2 B307                <1> 	mov bl, 7
  3339 000027F4 E80CF4FFFF          <1> 	call printint
  3340 000027F9 E9B8FFFFFF          <1> 	jmp backtodos
  3341                              <1> 	
  3342                              <1> dosgetstr:
  3343 000027FE 31F6                <1> 	xor esi, esi
  3344 00002800 6689D6              <1> 	mov si, dx
  3345 00002803 81C600004000        <1> 	add esi, dosprogloc
  3346 00002809 B900000000          <1> 	mov ecx, 0
  3347 0000280E 8A0E                <1> 	mov cl, [esi]
  3348 00002810 81C602000000        <1> 	add esi, 2
  3349 00002816 89F7                <1> 	mov edi, esi
  3350 00002818 8935[42280000]      <1> 	mov [stringstart], esi
  3351 0000281E 01CF                <1> 	add edi, ecx
  3352 00002820 B00A                <1> 	mov al, 10
  3353 00002822 B307                <1> 	mov bl, 7
  3354 00002824 E81CF5FFFF          <1> 	call rdprintdos
  3355 00002829 89F1                <1> 	mov ecx, esi
  3356 0000282B 2B0D[42280000]      <1> 	sub ecx, [stringstart]
  3357 00002831 8B35[42280000]      <1> 	mov esi, [stringstart]
  3358 00002837 884EFF              <1> 	mov [esi - 1], cl
  3359 0000283A 884EFE              <1> 	mov [esi - 2], cl
  3360 0000283D E974FFFFFF          <1> 	jmp backtodos
  3361 00002842 00000000            <1> stringstart dd 0
  3362                              <1> 
  3363                              <1> dosgetdate:
  3364 00002846 E819160000          <1> 	call time
  3365 0000284B 8A0D[7B410000]      <1> 	mov cl, [RTCtimeYear]
  3366 00002851 B500                <1> 	mov ch, 0
  3367 00002853 6681C1D007          <1> 	add cx, 2000
  3368 00002858 8A35[7A410000]      <1> 	mov dh, [RTCtimeMonth]
  3369 0000285E 8A15[79410000]      <1> 	mov dl, [RTCtimeDay]
  3370 00002864 E94DFFFFFF          <1> 	jmp backtodos
  3371                              <1> 
  3372                              <1> dosgettime:
  3373 00002869 E8F6150000          <1> 	call time
  3374 0000286E 8A2D[78410000]      <1> 	mov ch, [RTCtimeHour]
  3375 00002874 8A0D[77410000]      <1> 	mov cl, [RTCtimeMinute]
  3376 0000287A 8A35[76410000]      <1> 	mov dh, [RTCtimeSecond]
  3377 00002880 B200                <1> 	mov dl, 0
  3378 00002882 E92FFFFFFF          <1> 	jmp backtodos
  3379                              <1> 	
  3380                              <1> dosexit:
  3381 00002887 BE[B9620000]        <1> 	mov esi, line
  3382 0000288C E86DF3FFFF          <1> 	call print
  3383 00002891 61                  <1> 	popa
  3384 00002892 9D                  <1> 	popf
  3385 00002893 8B25[088C0300]      <1> 	mov esp, [previousstack]
  3386 00002899 31DB                <1> 	xor ebx, ebx
  3387 0000289B 88C3                <1> 	mov bl, al
  3388 0000289D 80FB00              <1> 	cmp bl, 0
  3389 000028A0 0F85DEF2FFFF        <1> 	jne near exitprog.error
  3390 000028A6 C3                  <1> 	ret
  3391                                      %include "source/shush.asm"
  3392                              <1> os:
  3393                              <1> setdefenv:
  3394 000028A7 C605[148C0300]2F    <1> 	mov byte [currentfolder], '/'
  3395 000028AE C705[108C0300]0100- <1> 	mov dword [currentfolderloc], 1
  3396 000028B6 0000                <1>
  3397 000028B8 E8F0F3FFFF          <1> 	call clear
  3398                              <1> 	
  3399                              <1> bootfilecheck:
  3400 000028BD 803D[188E0300]01    <1> 	cmp byte [ranboot], 1
  3401 000028C4 0F8421000000        <1> 	je near nobootfile
  3402                              <1> 	%ifdef hardware.automatic
  3403 000028CA E8282F0000          <1> 		call initializelater ;Initialize components that have debug messages
  3404                              <1> 	%endif
  3405                              <1> 	%ifdef disk.none
  3406                              <1> 	%else
  3407 000028CF BF[78620000]        <1> 		mov edi, bootfilename
  3408 000028D4 BE00004000          <1> 		mov esi, 0x400000
  3409 000028D9 E870330000          <1> 		call loadfile
  3410 000028DE 81FA00000000        <1> 		cmp edx, 0
  3411 000028E4 7505                <1> 		jne nobootfile
  3412 000028E6 E84A0E0000          <1> 		call progbatchfound
  3413                              <1> 	%endif
  3414                              <1> nobootfile:	
  3415 000028EB C605[188E0300]01    <1> 	mov byte [ranboot], 1
  3416                              <1> 
  3417 000028F2 BE[02000000]        <1> 	mov esi, signature
  3418                              <1> .sigcopyloop:	;this prevents an odd error
  3419 000028F7 658A06              <1> 	mov al, [gs:esi]
  3420 000028FA 8806                <1> 	mov [esi], al
  3421 000028FC 46                  <1> 	inc esi
  3422 000028FD 81FE[10000000]      <1> 	cmp esi, signatureend
  3423 00002903 72F2                <1> 	jb .sigcopyloop
  3424                              <1> 	
  3425 00002905 BE[02000000]        <1> 	mov esi, signature
  3426 0000290A E8EFF2FFFF          <1> 	call print
  3427 0000290F 8B0D[0C000000]      <1> 	mov ecx, [signatureend - 4]
  3428 00002915 E828070000          <1> 	call showdec
  3429 0000291A E8DAF2FFFF          <1> 	call printline
  3430 0000291F BE[95620000]        <1> 	mov esi, userask
  3431 00002924 E8D5F2FFFF          <1> 	call print
  3432                              <1> 
  3433                              <1> usercheck:
  3434 00002929 BE[88A20300]        <1> 	mov esi, buftxt
  3435 0000292E BF[88A60300]        <1> 	mov edi, buftxtend
  3436 00002933 B00A                <1> 	mov al, 10
  3437 00002935 E8F7F3FFFF          <1> 	call rdprint
  3438 0000293A 56                  <1> 	push esi
  3439 0000293B BE[9F620000]        <1> 	mov esi, pwdask
  3440 00002940 E8B9F2FFFF          <1> 	call print
  3441 00002945 5E                  <1> 	pop esi
  3442 00002946 46                  <1> 	inc esi
  3443 00002947 8935[482A0000]      <1> 	mov [esipass], esi
  3444                              <1> passcheck:
  3445 0000294D E8C2F8FFFF          <1> 	call getchar
  3446 00002952 3C0A                <1> 	cmp al, 10
  3447 00002954 0F843E000000        <1> 	je near gotpass
  3448 0000295A 3C08                <1> 	cmp al, 8
  3449 0000295C 0F8415000000        <1> 	je near backpass
  3450 00002962 8806                <1> 	mov [esi], al
  3451 00002964 46                  <1> 	inc esi
  3452 00002965 30E4                <1> 	xor ah, ah
  3453 00002967 B02A                <1> 	mov al, "*"
  3454 00002969 E822F9FFFF          <1> 	call prcharint
  3455 0000296E E9DAFFFFFF          <1> 	jmp passcheck
  3456 00002973 08200800            <1> backcursor2 db 8," ",8,0
  3457                              <1> backpass:
  3458 00002977 3B35[482A0000]      <1> 	cmp esi, [esipass]
  3459 0000297D 0F84CAFFFFFF        <1> 	je near passcheck
  3460 00002983 4E                  <1> 	dec esi
  3461 00002984 C60600              <1> 	mov byte [esi], 0
  3462 00002987 56                  <1> 	push esi
  3463 00002988 BE[73290000]        <1> 	mov esi, backcursor2
  3464 0000298D E86CF2FFFF          <1> 	call print
  3465 00002992 5E                  <1> 	pop esi
  3466 00002993 E9B5FFFFFF          <1> 	jmp passcheck
  3467                              <1> gotpass:
  3468 00002998 B00A                <1> 	mov al, 10
  3469 0000299A E8F1F8FFFF          <1> 	call prcharint
  3470 0000299F 30C0                <1> 	xor al, al
  3471 000029A1 31C9                <1> 	xor ecx, ecx
  3472 000029A3 8806                <1> 	mov [esi], al
  3473 000029A5 BB[BB620000]        <1> 	mov ebx, userlst
  3474                              <1> userfind:
  3475 000029AA BE[88A20300]        <1> 	mov esi, buftxt
  3476 000029AF 8A06                <1> 	mov al, [esi]
  3477 000029B1 3C00                <1> 	cmp al, 0
  3478 000029B3 0F84EEFEFFFF        <1> 	je near os
  3479 000029B9 891D[4C2A0000]      <1> 	mov [usercache], ebx
  3480 000029BF E87E030000          <1> 	call tester
  3481 000029C4 3C01                <1> 	cmp al, 1
  3482 000029C6 7419                <1> 	je pwdtest
  3483 000029C8 41                  <1> 	inc ecx
  3484                              <1> nxtuser:
  3485 000029C9 8A03                <1> 	mov al, [ebx]
  3486 000029CB 43                  <1> 	inc ebx
  3487 000029CC 3C00                <1> 	cmp al, 0
  3488 000029CE 75F9                <1> 	jne nxtuser
  3489 000029D0 81FB[DE620000]      <1> 	cmp ebx, userlstend
  3490 000029D6 0F83CBFEFFFF        <1> 	jae near os
  3491 000029DC E9C9FFFFFF          <1> 	jmp userfind
  3492                              <1> pwdtest:
  3493 000029E1 46                  <1> 	inc esi
  3494 000029E2 43                  <1> 	inc ebx
  3495 000029E3 E85A030000          <1> 	call tester
  3496 000029E8 3C01                <1> 	cmp al, 1
  3497 000029EA 7405                <1> 	je pwdrgt
  3498 000029EC E9D8FFFFFF          <1> 	jmp nxtuser
  3499                              <1> pwdrgt:
  3500 000029F1 D1E9                <1> 	shr ecx, 1
  3501 000029F3 890D[148E0300]      <1> 	mov [uid], ecx
  3502 000029F9 E8AFF2FFFF          <1> 	call clear
  3503 000029FE 31C9                <1> 	xor ecx, ecx
  3504 00002A00 41                  <1> 	inc ecx
  3505 00002A01 890D[A1F10300]      <1> 	mov [commandbufpos], ecx
  3506                              <1> returnfromexp:
  3507 00002A07 66B90002            <1> 	mov cx, 200h
  3508 00002A0B BE[88A20300]        <1> 	mov esi, buftxt
  3509 00002A10 8935[3E2D0000]      <1> 	mov [currentcommandloc], esi
  3510 00002A16 E825000000          <1> 	call bufclr
  3511                              <1> clearolddata:
  3512 00002A1B 31C0                <1> 	xor eax, eax
  3513 00002A1D A2[198E0300]        <1> 	mov [IFON], al
  3514 00002A22 A2[1A8E0300]        <1> 	mov [IFTRUE], al
  3515 00002A27 A2[828E0300]        <1> 	mov [BATCHISON], al
  3516 00002A2C A3[7E8E0300]        <1> 	mov [BATCHPOS], eax
  3517 00002A31 A2[838E0300]        <1> 	mov [LOOPON], al
  3518 00002A36 A3[848E0300]        <1> 	mov [LOOPPOS], eax
  3519 00002A3B E939000000          <1> 	jmp nwcmd
  3520                              <1> bufclr:	
  3521 00002A40 30C0                <1> 	xor al, al
  3522 00002A42 8806                <1> 	mov [esi], al
  3523 00002A44 46                  <1> 	inc esi
  3524 00002A45 E2F9                <1> 	loop bufclr
  3525 00002A47 C3                  <1> 	ret
  3526                              <1> 
  3527 00002A48 00000000            <1> esipass dd 0
  3528 00002A4C [BB620000]          <1> usercache dd userlst
  3529                              <1> 	
  3530                              <1> buftxtclear:
  3531 00002A50 30C0                <1> 	xor al, al
  3532 00002A52 BE[88A20300]        <1> 	mov esi, buftxt
  3533 00002A57 81FE[88A60300]      <1> clearbuftxt: cmp esi, buf2
  3534 00002A5D 7314                <1> 	jae retbufclr
  3535 00002A5F 8806                <1> 	mov [esi], al
  3536 00002A61 46                  <1> 	inc esi
  3537 00002A62 E9F0FFFFFF          <1> 	jmp clearbuftxt
  3538                              <1> 
  3539 00002A67 39DE                <1> clearitbuf: cmp esi, ebx
  3540 00002A69 7308                <1> 	jae retbufclr
  3541 00002A6B 8806                <1> 	mov [esi], al
  3542 00002A6D 46                  <1> 	inc esi
  3543 00002A6E E9F4FFFFFF          <1> 	jmp clearitbuf
  3544 00002A73 C3                  <1> retbufclr: ret
  3545                              <1> 
  3546 00002A74 E900000000          <1> full:	jmp nwcmd
  3547                              <1> 
  3548                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3549                              <1> nwcmd:
  3550 00002A79 FB                  <1> 	sti
  3551 00002A7A 31C0                <1> 	xor eax, eax
  3552 00002A7C 3905[5A2C0000]      <1> 	cmp [nextcommandloc], eax
  3553 00002A82 7416                <1> 	je nomultiplecommand
  3554 00002A84 8B35[5A2C0000]      <1> 	mov esi, [nextcommandloc]
  3555 00002A8A 8935[5E2C0000]      <1> 	mov [thiscommandloc], esi
  3556 00002A90 E8D2010000          <1> 	call fixvariables
  3557 00002A95 E9DFFFFFFF          <1> 	jmp nwcmd
  3558                              <1> nomultiplecommand:
  3559 00002A9A A3[5E2C0000]        <1> 	mov [thiscommandloc], eax
  3560 00002A9F 3805[135E0000]      <1> 	cmp [threadson], al
  3561 00002AA5 7405                <1> 	je noclinwcmd
  3562 00002AA7 A2[135E0000]        <1> 	mov [threadson], al
  3563                              <1> noclinwcmd:
  3564 00002AAC B001                <1> 	mov al, 1
  3565 00002AAE 3805[828E0300]      <1> 	cmp [BATCHISON], al
  3566 00002AB4 7501                <1> 	jne cancel
  3567 00002AB6 C3                  <1> 	ret
  3568 00002AB7 30C0                <1> cancel:	xor al, al
  3569 00002AB9 A2[198E0300]        <1> 	mov [IFON], al
  3570 00002ABE A2[828E0300]        <1> 	mov [BATCHISON], al
  3571 00002AC3 B05B                <1> 	mov al, '['
  3572 00002AC5 66BB0700            <1> 	mov bx, 7
  3573 00002AC9 E8D9F7FFFF          <1> 	call prcharq
  3574 00002ACE 8B35[4C2A0000]      <1> 	mov esi, [usercache]
  3575 00002AD4 E801F1FFFF          <1> 	call printquiet
  3576 00002AD9 BE[A9620000]        <1> 	mov esi, computer
  3577 00002ADE E8F7F0FFFF          <1> 	call printquiet
  3578 00002AE3 BE[148C0300]        <1> 	mov esi, currentfolder
  3579 00002AE8 0335[0C8C0300]      <1> 	add esi, [lastfolderloc]
  3580 00002AEE E8E7F0FFFF          <1> 	call printquiet
  3581 00002AF3 BE[B4620000]        <1> 	mov esi, endprompt
  3582 00002AF8 E801F1FFFF          <1> 	call print
  3583 00002AFD E84EFFFFFF          <1> 	call buftxtclear
  3584 00002B02 BE[88A20300]        <1> 	mov esi, buftxt
  3585 00002B07 C605[FD210000]01    <1> 	mov byte [commandedit], 1
  3586 00002B0E B00A                <1> 	mov al, 10
  3587 00002B10 66BB0700            <1> 	mov bx, 7
  3588 00002B14 BF[88A60300]        <1> 	mov edi, buftxtend
  3589 00002B19 E813F2FFFF          <1> 	call rdprint
  3590 00002B1E C605[FD210000]00    <1> 	mov byte [commandedit], 0
  3591 00002B25 803D[88A20300]00    <1> 	cmp byte [buftxt], 0
  3592 00002B2C 0F8447FFFFFF        <1> 	je near nwcmd
  3593 00002B32 8B35[A1F10300]      <1> gotcmd:	mov esi, [commandbufpos]
  3594 00002B38 8935[9DF10300]      <1> 	mov [lastcommandpos], esi
  3595 00002B3E FF05[A9F10300]      <1> 	inc dword [commandsentered]
  3596 00002B44 BF[88A20300]        <1> 	mov edi, buftxt
  3597 00002B49 81C6[ADF10300]      <1> 	add esi, commandbuf
  3598 00002B4F 81FE[AD010400]      <1> 	cmp esi, commandbufend
  3599 00002B55 7605                <1> 	jbe copycommand
  3600 00002B57 BE[ADF10300]        <1> 	mov esi, commandbuf
  3601                              <1> copycommand:
  3602 00002B5C 8A07                <1> 	mov al, [edi]
  3603 00002B5E 8806                <1> 	mov [esi], al
  3604 00002B60 47                  <1> 	inc edi
  3605 00002B61 46                  <1> 	inc esi
  3606 00002B62 3C00                <1> 	cmp al, 0
  3607 00002B64 7412                <1> 	je donecopy
  3608 00002B66 81FE[AD010400]      <1> 	cmp esi, commandbufend
  3609 00002B6C 76EE                <1> 	jbe copycommand
  3610 00002B6E BE[ADF10300]        <1> 	mov esi, commandbuf
  3611 00002B73 E9E4FFFFFF          <1> 	jmp copycommand
  3612                              <1> donecopy:
  3613 00002B78 81EE[ADF10300]      <1> 	sub esi, commandbuf
  3614 00002B7E 8935[A1F10300]      <1> 	mov [commandbufpos], esi
  3615 00002B84 E8D9000000          <1> 	call run
  3616 00002B89 E9EBFEFFFF          <1> 	jmp nwcmd
  3617                              <1> 
  3618 00002B8E E8BDFEFFFF          <1> input:	call buftxtclear
  3619 00002B93 BE[88A20300]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3620 00002B98 BF[88A60300]        <1> 	mov edi, buftxtend
  3621 00002B9D B00A                <1> stdin:	mov al, 10
  3622 00002B9F B307                <1> 	mov bl, 7
  3623 00002BA1 E88BF1FFFF          <1> 	call rdprint
  3624 00002BA6 C3                  <1> 	ret
  3625                              <1> 
  3626                              <1> replacevariable:
  3627 00002BA7 8A4601              <1> 	mov al, [esi + 1]
  3628 00002BAA C64601FF            <1> 	mov byte [esi + 1], 255
  3629 00002BAE 3C24                <1> 	cmp al, "$"
  3630 00002BB0 0F84B1000000        <1> 	je near fixvariables
  3631 00002BB6 884601              <1> 	mov [esi + 1], al
  3632 00002BB9 56                  <1> 	push esi
  3633 00002BBA 81EE[88A20300]      <1> 	sub esi, buftxt
  3634 00002BC0 89F7                <1> 	mov edi, esi
  3635 00002BC2 81C6[88A20300]      <1> 	add esi, buftxt
  3636 00002BC8 47                  <1> 	inc edi
  3637 00002BC9 BB[888E0300]        <1> 	mov ebx, variables
  3638 00002BCE E87C190000          <1> 	call nxtvrech
  3639 00002BD3 89F7                <1> 	mov edi, esi
  3640 00002BD5 31DB                <1> 	xor ebx, ebx
  3641 00002BD7 4E                  <1> 	dec esi
  3642                              <1> findvarname:
  3643 00002BD8 4E                  <1> 	dec esi
  3644 00002BD9 8A06                <1> 	mov al, [esi]
  3645 00002BDB 43                  <1> 	inc ebx
  3646 00002BDC 3C04                <1> 	cmp al, 4
  3647 00002BDE 75F8                <1> 	jne findvarname
  3648 00002BE0 5E                  <1> 	pop esi
  3649                              <1> replacevarloop:
  3650 00002BE1 8A07                <1> 	mov al, [edi]
  3651 00002BE3 3C00                <1> 	cmp al, 0
  3652 00002BE5 0F8416000000        <1> 	je near compressbuftxt
  3653 00002BEB 81FB00000000        <1> 	cmp ebx, 0
  3654 00002BF1 0F8419000000        <1> 	je near expandbuftxt
  3655 00002BF7 8806                <1> 	mov [esi], al
  3656 00002BF9 4B                  <1> 	dec ebx
  3657 00002BFA 46                  <1> 	inc esi
  3658 00002BFB 47                  <1> 	inc edi
  3659 00002BFC E9E0FFFFFF          <1> 	jmp replacevarloop
  3660                              <1> compressbuftxt:
  3661 00002C01 8A041E              <1> 	mov al, [esi + ebx]
  3662 00002C04 8806                <1> 	mov [esi], al
  3663 00002C06 46                  <1> 	inc esi
  3664 00002C07 3C00                <1> 	cmp al, 0
  3665 00002C09 75F6                <1> 	jne compressbuftxt
  3666 00002C0B E957000000          <1> 	jmp fixvariables
  3667                              <1> expandbuftxt:
  3668 00002C10 89F1                <1> 	mov ecx, esi
  3669 00002C12 8A26                <1> 	mov ah, [esi]
  3670                              <1> expandbuftxtlp:
  3671 00002C14 8A1E                <1> 	mov bl, [esi]
  3672 00002C16 46                  <1> 	inc esi
  3673 00002C17 8A3E                <1> 	mov bh, [esi]
  3674 00002C19 8826                <1> 	mov [esi], ah
  3675 00002C1B 88FC                <1> 	mov ah, bh
  3676 00002C1D 80FB00              <1> 	cmp bl, 0
  3677 00002C20 75F2                <1> 	jne expandbuftxtlp
  3678 00002C22 89CE                <1> 	mov esi, ecx
  3679 00002C24 8806                <1> 	mov [esi], al
  3680 00002C26 47                  <1> 	inc edi
  3681 00002C27 8A07                <1> 	mov al, [edi]
  3682 00002C29 3C00                <1> 	cmp al, 0
  3683 00002C2B 0F8436000000        <1> 	je near fixvariables
  3684 00002C31 46                  <1> 	inc esi
  3685 00002C32 E9D9FFFFFF          <1> 	jmp expandbuftxt
  3686                              <1> multipleprogline:
  3687 00002C37 30E4                <1> 	xor ah, ah
  3688 00002C39 8826                <1> 	mov [esi], ah
  3689 00002C3B 46                  <1> 	inc esi
  3690 00002C3C 8935[5A2C0000]      <1> 	mov [nextcommandloc], esi
  3691 00002C42 E93E000000          <1> 	jmp donefixvariables
  3692                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3693 00002C47 46                  <1> 	inc esi
  3694 00002C48 8A06                <1> 	mov al, [esi]
  3695 00002C4A C606FF              <1> 	mov byte [esi], 255
  3696 00002C4D 3C23                <1> 	cmp al, '#'
  3697 00002C4F 7416                <1> 	je fixvariables
  3698 00002C51 4E                  <1> 	dec esi
  3699 00002C52 C60600              <1> 	mov byte [esi], 0
  3700 00002C55 E90D000000          <1> 	jmp fixvariables
  3701                              <1> 	
  3702 00002C5A 00000000            <1> nextcommandloc dd 0
  3703 00002C5E 00000000            <1> thiscommandloc dd 0	
  3704                              <1> run:
  3705 00002C62 BE[88A20300]        <1> 	mov esi, buftxt
  3706                              <1> fixvariables:
  3707 00002C67 46                  <1> 	inc esi
  3708 00002C68 8A06                <1> 	mov al, [esi]
  3709 00002C6A 3C23                <1> 	cmp al, '#'	;inline comment
  3710 00002C6C 74D9                <1> 	je inlinecomment
  3711 00002C6E 3C24                <1> 	cmp al, '$' ;variable
  3712 00002C70 0F8431FFFFFF        <1> 	je near replacevariable
  3713 00002C76 3C3B                <1> 	cmp al, ';' ;program list
  3714 00002C78 74BD                <1> 	je multipleprogline
  3715 00002C7A 3C00                <1> 	cmp al, 0
  3716 00002C7C 75E9                <1> 	jne fixvariables
  3717 00002C7E 31C0                <1> 	xor eax, eax
  3718 00002C80 A3[5A2C0000]        <1> 	mov [nextcommandloc], eax
  3719                              <1> donefixvariables:
  3720 00002C85 803D[84320000]00    <1> 	cmp byte [indexdone], 0
  3721 00002C8C 7505                <1> 	jne progtest
  3722 00002C8E E853050000          <1> 	call indexfiles
  3723                              <1> progtest:
  3724 00002C93 31C0                <1> 	xor eax, eax
  3725 00002C95 BB[08880300]        <1> 	mov ebx, fileindex
  3726 00002C9A 668B03              <1> prgnxt:	mov ax, [ebx]
  3727 00002C9D B1FF                <1> 	mov cl, 255
  3728 00002C9F B52C                <1> 	mov ch, 44
  3729 00002CA1 6639C8              <1> 	cmp ax, cx
  3730 00002CA4 740E                <1> 	je fndprg
  3731 00002CA6 43                  <1> 	inc ebx
  3732 00002CA7 81FB[088C0300]      <1> 	cmp ebx, fileindexend
  3733 00002CAD 7363                <1> 	jae prgnf
  3734 00002CAF E9E6FFFFFF          <1> 	jmp prgnxt
  3735 00002CB4 81C302000000        <1> fndprg: add ebx, 2
  3736 00002CBA 31C9                <1> 	xor ecx, ecx
  3737 00002CBC BE[88A20300]        <1> 	mov esi, buftxt
  3738 00002CC1 390D[5E2C0000]      <1> 	cmp [thiscommandloc], ecx
  3739 00002CC7 7406                <1> 	je noprgtstmultiple
  3740 00002CC9 8B35[5E2C0000]      <1> 	mov esi, [thiscommandloc]
  3741                              <1> noprgtstmultiple:
  3742 00002CCF E8AF000000          <1> 	call cndtest
  3743 00002CD4 3C01                <1> 	cmp al, 1
  3744 00002CD6 7305                <1> 	jae prggood
  3745 00002CD8 E9BDFFFFFF          <1> 	jmp prgnxt
  3746 00002CDD 81FB[088C0300]      <1> prggood: cmp ebx, fileindexend
  3747 00002CE3 7358                <1> 	jae prgdn
  3748 00002CE5 31C0                <1> 	xor eax, eax
  3749 00002CE7 BE[88A20300]        <1> 	mov esi, buftxt
  3750 00002CEC 3905[5E2C0000]      <1> 	cmp [thiscommandloc], eax
  3751 00002CF2 7406                <1> 	je noprggoodmul
  3752 00002CF4 8B35[5E2C0000]      <1> 	mov esi, [thiscommandloc]
  3753                              <1> noprggoodmul:
  3754 00002CFA 8935[3E2D0000]      <1> 	mov [currentcommandloc], esi
  3755 00002D00 81C303000000        <1> 	add ebx, 3
  3756 00002D06 8B3B                <1> 	mov edi, [ebx]
  3757 00002D08 C605[135E0000]02    <1> 	mov byte [threadson], 2
  3758 00002D0F FFD7                <1> 	call edi
  3759 00002D11 C3                  <1> 	ret
  3760                              <1> prgnf:	
  3761 00002D12 8B35[3E2D0000]      <1> 	mov esi, [currentcommandloc]
  3762 00002D18 8A06                <1> 	mov al, [esi]
  3763 00002D1A 3C00                <1> 	cmp al, 0
  3764 00002D1C 741F                <1> 	je prgdn
  3765 00002D1E BE[80620000]        <1> 	mov esi, notfound1
  3766 00002D23 E8D6EEFFFF          <1> 	call print
  3767 00002D28 8B35[3E2D0000]      <1> 	mov esi, [currentcommandloc]
  3768 00002D2E E8CBEEFFFF          <1> 	call print
  3769 00002D33 BE[88620000]        <1> 	mov esi, notfound2
  3770 00002D38 E8C1EEFFFF          <1> 	call print
  3771 00002D3D C3                  <1> prgdn:	ret
  3772                              <1> 
  3773 00002D3E 00000000            <1> currentcommandloc dd 0
  3774                              <1> 
  3775                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3776 00002D42 6631C0              <1> 	xor ax, ax
  3777 00002D45 8A06                <1> retest:	mov al, [esi]
  3778 00002D47 8A23                <1> 	mov ah, [ebx]
  3779 00002D49 3C00                <1> 	cmp al, 0
  3780 00002D4B 740B                <1> 	je testtrue
  3781 00002D4D 38E0                <1> 	cmp al, ah
  3782 00002D4F 750F                <1> 	jne testfalse
  3783 00002D51 43                  <1> 	inc ebx
  3784 00002D52 46                  <1> 	inc esi
  3785 00002D53 E9EDFFFFFF          <1> 	jmp retest
  3786                              <1> testtrue:
  3787 00002D58 80FC00              <1> 	cmp ah, 0
  3788 00002D5B 7503                <1> 	jne testfalse
  3789 00002D5D B001                <1> 	mov al, 1
  3790 00002D5F C3                  <1> 	ret
  3791                              <1> testfalse:
  3792 00002D60 30C0                <1> 	xor al, al
  3793 00002D62 C3                  <1> 	ret
  3794                              <1> 
  3795                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3796 00002D63 30C0                <1> 	xor al, al
  3797                              <1> opretest:
  3798 00002D65 8A06                <1> 	mov al, [esi]
  3799 00002D67 8A23                <1> 	mov ah, [ebx]
  3800 00002D69 38E0                <1> 	cmp al, ah
  3801 00002D6B 7513                <1> 	jne optestfalse
  3802 00002D6D 80FC00              <1> 	cmp ah, 0
  3803 00002D70 7407                <1> 	je optesttrue
  3804 00002D72 43                  <1> 	inc ebx
  3805 00002D73 46                  <1> 	inc esi
  3806 00002D74 E9ECFFFFFF          <1> 	jmp opretest
  3807                              <1> optesttrue:
  3808 00002D79 3C00                <1> 	cmp al, 0
  3809 00002D7B 7503                <1> 	jne optestfalse
  3810 00002D7D B001                <1> 	mov al, 1
  3811 00002D7F C3                  <1> 	ret
  3812                              <1> optestfalse:
  3813 00002D80 30C0                <1> 	xor al, al
  3814 00002D82 C3                  <1> 	ret
  3815                              <1> 
  3816                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3817 00002D83 30C0                <1> 	xor al, al
  3818 00002D85 8A06                <1> cndretest:	mov al, [esi]
  3819 00002D87 8A23                <1> 	mov ah, [ebx]
  3820 00002D89 38CC                <1> 	cmp ah, cl
  3821 00002D8B 740B                <1> 	je cndtesttrue
  3822 00002D8D 38E0                <1> 	cmp al, ah
  3823 00002D8F 750E                <1> 	jne cndtestfalse
  3824 00002D91 43                  <1> 	inc ebx
  3825 00002D92 46                  <1> 	inc esi
  3826 00002D93 E9EDFFFFFF          <1> 	jmp cndretest
  3827                              <1> cndtesttrue:
  3828 00002D98 38C8                <1> 	cmp al, cl
  3829 00002D9A 7506                <1> 	jne cndtestalmost
  3830 00002D9C B001                <1> 	mov al, 1
  3831 00002D9E C3                  <1> 	ret
  3832                              <1> cndtestfalse:
  3833 00002D9F 30C0                <1> 	xor al, al
  3834 00002DA1 C3                  <1> 	ret
  3835                              <1> cndtestalmost:
  3836 00002DA2 B002                <1> 	mov al, 2
  3837 00002DA4 C3                  <1> 	ret
  3838                              <1> 	
  3839                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3840                              <1> 		                ;ends if array seperator is found backwards after 0
  3841                              <1> 	arnxt:	      
  3842 00002DA5 88E8                <1> 		mov al, ch
  3843 00002DA7 88CC                <1> 		mov ah, cl        
  3844 00002DA9 663906              <1> 		cmp [esi], ax
  3845 00002DAC 744E                <1> 		je ardn
  3846 00002DAE 66390E              <1> 		cmp [esi], cx
  3847 00002DB1 740A                <1> 		je arfnd
  3848 00002DB3 46                  <1> 		inc esi
  3849 00002DB4 39DE                <1> 		cmp esi, ebx
  3850 00002DB6 7344                <1> 		jae ardn
  3851 00002DB8 E9E8FFFFFF          <1> 		jmp arnxt
  3852 00002DBD 81C602000000        <1> 	arfnd: add esi, 2
  3853 00002DC3 891D[FD2D0000]      <1> 		mov [arbx], ebx
  3854 00002DC9 890D[012E0000]      <1> 		mov [arcx], ecx
  3855 00002DCF E82AEEFFFF          <1> 		call print
  3856 00002DD4 8935[032E0000]      <1> 		mov [arsi], esi
  3857 00002DDA E81AEEFFFF          <1> 		call printline
  3858 00002DDF 8B1D[FD2D0000]      <1> 		mov ebx, [arbx]
  3859 00002DE5 668B0D[012E0000]    <1> 		mov cx, [arcx]
  3860 00002DEC 8B35[032E0000]      <1> 		mov esi, [arsi]
  3861 00002DF2 46                  <1> 		inc esi
  3862 00002DF3 39DE                <1> 		cmp esi, ebx
  3863 00002DF5 7305                <1> 		jae ardn
  3864 00002DF7 E9A9FFFFFF          <1> 		jmp arnxt
  3865 00002DFC C3                  <1> 	ardn:	ret
  3866 00002DFD 00000000            <1> arbx:	dw 0,0
  3867 00002E01 0000                <1> arcx:	db 0,0
  3868 00002E03 00000000            <1> arsi:	dw 0,0
  3869                              <1> 
  3870                              <1> clearbuffer:
  3871 00002E07 BE[88A60300]        <1> 	mov esi, buf2
  3872 00002E0C B030                <1> 	mov al, '0'
  3873 00002E0E 81FE[9CA60300]      <1> clearbuf: cmp esi, numbuf
  3874 00002E14 7308                <1> 	jae doneclearbuff
  3875 00002E16 8806                <1> 	mov [esi], al
  3876 00002E18 46                  <1> 	inc esi
  3877 00002E19 E9F0FFFFFF          <1> 	jmp clearbuf
  3878                              <1> doneclearbuff: 
  3879 00002E1E C3                  <1> 		ret
  3880                              <1> 
  3881                              <1> convert:
  3882 00002E1F 4E                  <1> 	dec esi
  3883 00002E20 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3884                              <1> .lp:
  3885 00002E22 89DE                <1> 	mov esi, ebx
  3886 00002E24 81EE09000000        <1> 	sub esi, 9
  3887 00002E2A 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3888 00002E30 720D                <1> 	jb .8
  3889 00002E32 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3890 00002E38 FE06                <1> 	inc byte [esi]
  3891 00002E3A E9E3FFFFFF          <1> 	jmp .lp
  3892 00002E3F 46                  <1> .8:	inc esi
  3893 00002E40 81F900E1F505        <1> 	cmp ecx, 100000000
  3894 00002E46 720D                <1> 	jb .7
  3895 00002E48 81E900E1F505        <1> 	sub ecx, 100000000
  3896 00002E4E FE06                <1> 	inc byte [esi]
  3897 00002E50 E9CDFFFFFF          <1> 	jmp .lp
  3898 00002E55 46                  <1> .7:	inc esi
  3899 00002E56 81F980969800        <1> 	cmp ecx, 10000000
  3900 00002E5C 720D                <1> 	jb .6
  3901 00002E5E 81E980969800        <1> 	sub ecx, 10000000
  3902 00002E64 FE06                <1> 	inc byte [esi]
  3903 00002E66 E9B7FFFFFF          <1> 	jmp .lp
  3904 00002E6B 46                  <1> .6:	inc esi
  3905 00002E6C 81F940420F00        <1> 	cmp ecx, 1000000
  3906 00002E72 720D                <1> 	jb .5
  3907 00002E74 81E940420F00        <1> 	sub ecx, 1000000
  3908 00002E7A FE06                <1> 	inc byte [esi]
  3909 00002E7C E9A1FFFFFF          <1> 	jmp .lp
  3910 00002E81 46                  <1> .5:	inc esi
  3911 00002E82 81F9A0860100        <1> 	cmp ecx, 100000
  3912 00002E88 720D                <1> 	jb .4
  3913 00002E8A 81E9A0860100        <1> 	sub ecx, 100000
  3914 00002E90 FE06                <1> 	inc byte [esi]
  3915 00002E92 E98BFFFFFF          <1> 	jmp .lp
  3916 00002E97 46                  <1> .4:	inc esi
  3917 00002E98 81F910270000        <1> 	cmp ecx, 10000
  3918 00002E9E 720D                <1> 	jb .3
  3919 00002EA0 81E910270000        <1> 	sub ecx, 10000
  3920 00002EA6 FE06                <1> 	inc byte [esi]
  3921 00002EA8 E975FFFFFF          <1> 	jmp .lp
  3922 00002EAD 46                  <1> .3:	inc esi
  3923 00002EAE 81F9E8030000        <1> 	cmp ecx, 1000
  3924 00002EB4 720D                <1> 	jb .2
  3925 00002EB6 81E9E8030000        <1> 	sub ecx, 1000
  3926 00002EBC FE06                <1> 	inc byte [esi]
  3927 00002EBE E95FFFFFFF          <1> 	jmp .lp
  3928 00002EC3 46                  <1> .2:	inc esi
  3929 00002EC4 81F964000000        <1> 	cmp ecx, 100
  3930 00002ECA 720D                <1> 	jb .1
  3931 00002ECC 81E964000000        <1> 	sub ecx, 100
  3932 00002ED2 FE06                <1> 	inc byte [esi]
  3933 00002ED4 E949FFFFFF          <1> 	jmp .lp
  3934 00002ED9 46                  <1> .1:	inc esi
  3935 00002EDA 81F90A000000        <1> 	cmp ecx, 10
  3936 00002EE0 720D                <1> 	jb .0
  3937 00002EE2 81E90A000000        <1> 	sub ecx, 10
  3938 00002EE8 FE06                <1> 	inc byte [esi]
  3939 00002EEA E933FFFFFF          <1> 	jmp .lp
  3940 00002EEF 46                  <1> .0:	inc esi
  3941 00002EF0 81F901000000        <1> 	cmp ecx, 1
  3942 00002EF6 720D                <1> 	jb .dn
  3943 00002EF8 81E901000000        <1> 	sub ecx, 1
  3944 00002EFE FE06                <1> 	inc byte [esi]
  3945 00002F00 E91DFFFFFF          <1> 	jmp .lp
  3946                              <1> .dn:
  3947 00002F05 C3                  <1> 	ret
  3948                              <1> 
  3949                              <1> 	
  3950                              <1> 
  3951 00002F06 00<rept>            <1> hexnumber times 8 db 0
  3952 00002F0E 202000              <1> hexnumberend db "  ",0
  3953                              <1> 
  3954                              <1> converthex:
  3955                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3956 00002F11 56                  <1> 	push esi
  3957 00002F12 B030                <1> 	mov al, "0"
  3958 00002F14 39FE                <1> .clearlp: cmp esi, edi
  3959 00002F16 7308                <1> 	jae .doneclear
  3960 00002F18 8806                <1> 	mov [esi], al
  3961 00002F1A 46                  <1> 	inc esi
  3962 00002F1B E9F4FFFFFF          <1> 	jmp .clearlp
  3963                              <1> .doneclear:
  3964 00002F20 81EE02000000        <1> 	sub esi, 2
  3965 00002F26 89C8                <1> 	mov eax, ecx
  3966                              <1> .loop:
  3967 00002F28 30FF                <1> 	xor bh, bh
  3968 00002F2A 88C3                <1> 	mov bl, al
  3969 00002F2C 66C1E304            <1> 	shl bx, 4
  3970 00002F30 C0EB04              <1> 	shr bl, 4
  3971 00002F33 86DF                <1> 	xchg bl, bh ;they are backwards
  3972 00002F35 80C330              <1> 	add bl, 48
  3973 00002F38 80FB39              <1> 	cmp bl, "9"
  3974 00002F3B 7609                <1> 	jbe .goodbl
  3975 00002F3D 80EB30              <1> 	sub bl, 48
  3976 00002F40 80EB0A              <1> 	sub bl, 0xA
  3977 00002F43 80C341              <1> 	add bl, "A"
  3978                              <1> .goodbl:
  3979 00002F46 80C730              <1> 	add bh, 48
  3980 00002F49 80FF39              <1> 	cmp bh, "9"
  3981 00002F4C 7609                <1> 	jbe .goodbh
  3982 00002F4E 80EF30              <1> 	sub bh, 48
  3983 00002F51 80EF0A              <1> 	sub bh, 0xA
  3984 00002F54 80C741              <1> 	add bh, "A"
  3985                              <1> .goodbh:
  3986 00002F57 C1E808              <1> 	shr eax, 8
  3987 00002F5A 66891E              <1> 	mov [esi], bx
  3988 00002F5D 81EE02000000        <1> 	sub esi, 2
  3989 00002F63 3B3424              <1> 	cmp esi, [esp]
  3990 00002F66 7207                <1> 	jb .done
  3991 00002F68 3D00000000          <1> 	cmp eax, 0
  3992 00002F6D 75B9                <1> 	jne .loop
  3993                              <1> .done:
  3994 00002F6F 5E                  <1> 	pop esi
  3995 00002F70 C3                  <1> 	ret
  3996                              <1> 	
  3997                              <1> 	
  3998 00002F71 00                  <1> smallhex db 0
  3999 00002F72 01                  <1> firsthexshown db 1
  4000                              <1> showhexsmall:
  4001 00002F73 C605[712F0000]01    <1> 	mov byte [smallhex], 1
  4002 00002F7A E808000000          <1> 	call showhex
  4003 00002F7F C605[712F0000]00    <1> 	mov byte [smallhex], 0
  4004 00002F86 C3                  <1> 	ret
  4005                              <1> showhex:
  4006 00002F87 60                  <1> 	pusha
  4007 00002F88 BE[062F0000]        <1> 	mov esi, hexnumber
  4008 00002F8D BF[0E2F0000]        <1> 	mov edi, hexnumberend
  4009 00002F92 E87AFFFFFF          <1> 	call converthex
  4010 00002F97 803D[722F0000]01    <1> 	cmp byte [firsthexshown], 1
  4011 00002F9E 7503                <1> 	jne .show
  4012 00002FA0 6631D2              <1> 	xor dx, dx
  4013                              <1> .show:
  4014 00002FA3 803D[722F0000]03    <1> 	cmp byte [firsthexshown], 3
  4015 00002FAA 7505                <1> 	jne .nonewhexline
  4016 00002FAC E848ECFFFF          <1> 	call printline
  4017                              <1> .nonewhexline:
  4018 00002FB1 803D[722F0000]04    <1> 	cmp byte [firsthexshown], 4
  4019 00002FB8 7522                <1> 	jne .notab
  4020 00002FBA B1A0                <1> 	mov cl, 160
  4021 00002FBC 28D1                <1> 	sub cl, dl
  4022 00002FBE C0E905              <1> 	shr cl, 5
  4023 00002FC1 C0E105              <1> 	shl cl, 5
  4024 00002FC4 80F900              <1> 	cmp cl, 0
  4025 00002FC7 750A                <1> 	jne .nonewline
  4026 00002FC9 E82BECFFFF          <1> 	call printline
  4027 00002FCE E909000000          <1> 	jmp .notab
  4028                              <1> .nonewline:
  4029 00002FD3 80C20F              <1> 	add dl, 15
  4030 00002FD6 C0EA04              <1> 	shr dl, 4
  4031 00002FD9 C0E204              <1> 	shl dl, 4
  4032                              <1> .notab:
  4033 00002FDC BE[062F0000]        <1> 	mov esi, hexnumber
  4034 00002FE1 803D[712F0000]01    <1> 	cmp byte [smallhex],1
  4035 00002FE8 7506                <1> 	jne .nosmall
  4036 00002FEA 81C606000000        <1> 	add esi, 6
  4037                              <1> .nosmall:
  4038 00002FF0 803D[722F0000]05    <1> 	cmp byte [firsthexshown], 5
  4039 00002FF7 750A                <1> 	jne .noquiet
  4040 00002FF9 E8DCEBFFFF          <1> 	call printquiet
  4041 00002FFE E918000000          <1> 	jmp .donequiet
  4042                              <1> .noquiet:
  4043 00003003 803D[722F0000]06    <1> 	cmp byte [firsthexshown], 6
  4044 0000300A 750A                <1> 	jne .normal
  4045 0000300C E8DCEBFFFF          <1> 	call printhighlight
  4046 00003011 E905000000          <1> 	jmp .donequiet
  4047                              <1> .normal:
  4048 00003016 E8E3EBFFFF          <1> 	call print
  4049                              <1> .donequiet:
  4050 0000301B 803D[722F0000]02    <1> 	cmp byte [firsthexshown], 2
  4051 00003022 7505                <1> 	jne .shown
  4052 00003024 E8D0EBFFFF          <1> 	call printline
  4053                              <1> .shown:
  4054 00003029 C605[722F0000]00    <1> 	mov byte [firsthexshown], 0
  4055 00003030 61                  <1> 	popa
  4056 00003031 C3                  <1> 	ret
  4057                              <1> 
  4058                              <1> 
  4059 00003032 303030303030303030- <1> decnumber db "00000000000000"
  4060 0000303B 3030303030          <1>
  4061 00003040 2000                <1> decnumberend: db " ",0
  4062                              <1> 
  4063                              <1> showdec: ;same as showhex, just uses decimal conversion
  4064 00003042 60                  <1> 	pusha
  4065 00003043 BF[32300000]        <1> 	mov edi, decnumber
  4066 00003048 BE[40300000]        <1> 	mov esi, decnumberend
  4067                              <1> .clear:
  4068 0000304D C60730              <1> 	mov byte [edi], '0'
  4069 00003050 47                  <1> 	inc edi
  4070 00003051 39F7                <1> 	cmp edi, esi
  4071 00003053 72F8                <1> 	jb .clear
  4072 00003055 BF[32300000]        <1> 	mov edi, decnumber
  4073 0000305A E8C0FDFFFF          <1> 	call convert
  4074 0000305F 803D[722F0000]01    <1> 	cmp byte [firsthexshown], 1
  4075 00003066 7503                <1> 	jne .show
  4076 00003068 6631D2              <1> 	xor dx, dx
  4077                              <1> .show:
  4078 0000306B 803D[722F0000]03    <1> 	cmp byte [firsthexshown], 3
  4079 00003072 7505                <1> 	jne .nonewdecline
  4080 00003074 E880EBFFFF          <1> 	call printline
  4081                              <1> .nonewdecline:
  4082 00003079 803D[722F0000]04    <1> 	cmp byte [firsthexshown], 4
  4083 00003080 7522                <1> 	jne .notab
  4084 00003082 B1A0                <1> 	mov cl, 160
  4085 00003084 28D1                <1> 	sub cl, dl
  4086 00003086 C0E905              <1> 	shr cl, 5
  4087 00003089 C0E105              <1> 	shl cl, 5
  4088 0000308C 80F900              <1> 	cmp cl, 0
  4089 0000308F 750A                <1> 	jne .nonewline
  4090 00003091 E863EBFFFF          <1> 	call printline
  4091 00003096 E909000000          <1> 	jmp .notab
  4092                              <1> .nonewline:
  4093 0000309B 80C20F              <1> 	add dl, 15
  4094 0000309E C0EA04              <1> 	shr dl, 4
  4095 000030A1 C0E204              <1> 	shl dl, 4
  4096                              <1> .notab:
  4097 000030A4 BE[32300000]        <1> 	mov esi, decnumber
  4098 000030A9 4E                  <1> 	dec esi
  4099                              <1> .sifind:
  4100 000030AA 46                  <1> 	inc esi
  4101 000030AB 81FE[3F300000]      <1> 	cmp esi, decnumberend - 1
  4102 000030B1 7305                <1> 	jae .nosifind
  4103 000030B3 803E30              <1> 	cmp byte [esi], '0'
  4104 000030B6 74F2                <1> 	je .sifind
  4105                              <1> .nosifind:
  4106 000030B8 E841EBFFFF          <1> 	call print
  4107 000030BD 803D[722F0000]02    <1> 	cmp byte [firsthexshown], 2
  4108 000030C4 7505                <1> 	jne .shown
  4109 000030C6 E82EEBFFFF          <1> 	call printline
  4110                              <1> .shown:
  4111 000030CB C605[722F0000]00    <1> 	mov byte [firsthexshown], 0
  4112 000030D2 61                  <1> 	popa
  4113 000030D3 C3                  <1> 	ret
  4114                              <1> 	
  4115                              <1> cnvrthextxt:
  4116 000030D4 31C9                <1> 	xor ecx, ecx
  4117 000030D6 31C0                <1> 	xor eax, eax
  4118 000030D8 31D2                <1> 	xor edx, edx
  4119 000030DA 31DB                <1> 	xor ebx, ebx
  4120 000030DC 4E                  <1> 	dec esi
  4121                              <1> .end:
  4122 000030DD 46                  <1> 	inc esi
  4123 000030DE 8A06                <1> 	mov al, [esi]
  4124 000030E0 3C00                <1> 	cmp al, 0
  4125 000030E2 75F9                <1> 	jne .end
  4126                              <1> .loop:
  4127 000030E4 4E                  <1> 	dec esi
  4128 000030E5 8A06                <1> 	mov al, [esi]
  4129 000030E7 3C41                <1> 	cmp al, "A"
  4130 000030E9 7328                <1> 	jae .char
  4131 000030EB 2C30                <1> 	sub al, 48
  4132 000030ED 3C10                <1> 	cmp al, 16
  4133 000030EF 7721                <1> 	ja .done
  4134                              <1> .donechar:
  4135 000030F1 81FA00000000        <1> 	cmp edx, 0
  4136 000030F7 740E                <1> 	je .noshl
  4137 000030F9 89D3                <1> 	mov ebx, edx
  4138                              <1> .shl:
  4139 000030FB C1E004              <1> 	shl eax, 4
  4140 000030FE 4B                  <1> 	dec ebx
  4141 000030FF 81FB00000000        <1> 	cmp ebx, 0
  4142 00003105 75F4                <1> 	jne .shl
  4143                              <1> .noshl:
  4144 00003107 42                  <1> 	inc edx
  4145 00003108 01C1                <1> 	add ecx, eax
  4146 0000310A 81FA08000000        <1> 	cmp edx, 8
  4147 00003110 72D2                <1> 	jb .loop
  4148                              <1> .done:
  4149 00003112 C3                  <1> 	ret
  4150                              <1> .char:
  4151 00003113 3C46                <1> 	cmp al, "F"
  4152 00003115 77FB                <1> 	ja .done
  4153 00003117 2C41                <1> 	sub al, "A"
  4154 00003119 040A                <1> 	add al, 0xA
  4155 0000311B E9D1FFFFFF          <1> 	jmp .donechar
  4156                              <1> 	
  4157                              <1> 	
  4158                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4159 00003120 31C9                <1> 	xor ecx, ecx
  4160 00003122 31C0                <1> 	xor eax, eax
  4161 00003124 31D2                <1> 	xor edx, edx
  4162 00003126 31DB                <1> 	xor ebx, ebx
  4163 00003128 4E                  <1> 	dec esi
  4164                              <1> .lp:
  4165 00003129 46                  <1> 	inc esi
  4166 0000312A 8A06                <1> 	mov al, [esi]
  4167 0000312C 3C00                <1> 	cmp al, 0
  4168 0000312E 75F9                <1> 	jne .lp
  4169 00003130 4E                  <1> 	dec esi
  4170 00003131 8A06                <1> 	mov al, [esi]
  4171 00003133 3C2E                <1> 	cmp al, '.'
  4172 00003135 7506                <1> 	jne .dot
  4173 00003137 46                  <1> 	inc esi
  4174 00003138 E9ECFFFFFF          <1> 	jmp .lp
  4175                              <1> .dot:
  4176 0000313D 3C20                <1> 	cmp al, ' '
  4177 0000313F 7404                <1> 	je .zero
  4178 00003141 3C30                <1> 	cmp al, '0'
  4179 00003143 7504                <1> 	jne .txtlp
  4180                              <1> .zero: 
  4181 00003145 39FE                <1> 		cmp esi, edi
  4182 00003147 7447                <1> 		je .done
  4183                              <1> .txtlp:
  4184 00003149 31C0                <1> 	xor eax, eax
  4185 0000314B 8A06                <1> 	mov al, [esi]
  4186 0000314D 3C3D                <1> 	cmp al, '='
  4187 0000314F 743F                <1> 	je .done
  4188 00003151 3C30                <1> 	cmp al, 48
  4189 00003153 723B                <1> 	jb .done
  4190 00003155 3C23                <1> 	cmp al, '#'
  4191 00003157 7437                <1> 	je .done
  4192 00003159 39FE                <1> 	cmp esi, edi
  4193 0000315B 7233                <1> 	jb .done
  4194 0000315D 81F900000000        <1> 	cmp ecx, 0
  4195 00003163 770B                <1> 	ja .exp
  4196 00003165 2C30                <1> .noexp:	sub al, 48
  4197 00003167 01C2                <1> 	add edx, eax
  4198 00003169 4E                  <1> 	dec esi
  4199 0000316A 41                  <1> 	inc ecx
  4200 0000316B E9D9FFFFFF          <1> 	jmp .txtlp
  4201 00003170 81F900000000        <1> .exp:	cmp ecx, 0
  4202 00003176 74ED                <1> 	je .noexp
  4203 00003178 2C30                <1> 	sub al, 48
  4204 0000317A 51                  <1> 	push ecx
  4205                              <1> .expmul:
  4206 0000317B 89C3                <1> 	mov ebx, eax
  4207 0000317D 01D8                <1> 	add eax, ebx
  4208 0000317F C1E303              <1> 	shl ebx, 3
  4209 00003182 01D8                <1> 	add eax, ebx
  4210 00003184 E2F5                <1> 	loop .expmul
  4211 00003186 01C2                <1> 	add edx, eax
  4212 00003188 59                  <1> 	pop ecx
  4213 00003189 4E                  <1> 	dec esi
  4214 0000318A 41                  <1> 	inc ecx
  4215 0000318B E9B9FFFFFF          <1> 	jmp .txtlp
  4216 00003190 89D1                <1> .done: mov ecx, edx
  4217 00003192 C3                  <1> 	ret
  4218                              <1> 
  4219                              <1> benchmarki: ;output number of clocks since initial value
  4220 00003193 0F31                <1> 	rdtsc
  4221 00003195 8B1D[E4620000]      <1> 	mov ebx, [initialtsc]
  4222 0000319B 8B0D[E8620000]      <1> 	mov ecx, [initialtsc + 4]
  4223 000031A1 E90E000000          <1> 	jmp benchmarkl.calc
  4224                              <1> 
  4225                              <1> benchmarkl: ;output number of clocks since last benchmark
  4226 000031A6 0F31                <1> 	rdtsc
  4227 000031A8 8B1D[EC620000]      <1> 	mov ebx, [lasttsc]
  4228 000031AE 8B0D[F0620000]      <1> 	mov ecx, [lasttsc + 4]
  4229                              <1> .calc:
  4230 000031B4 29D8                <1> 	sub eax, ebx
  4231 000031B6 7701                <1> 	ja .noover
  4232 000031B8 4A                  <1> 	dec edx
  4233                              <1> .noover:
  4234 000031B9 29CA                <1> 	sub edx, ecx
  4235 000031BB 8B0C24              <1> 	mov ecx, [esp]
  4236 000031BE E8C4FDFFFF          <1> 	call showhex
  4237 000031C3 89D1                <1> 	mov ecx, edx
  4238 000031C5 E8BDFDFFFF          <1> 	call showhex
  4239 000031CA 89C1                <1> 	mov ecx, eax
  4240 000031CC E8B6FDFFFF          <1> 	call showhex
  4241 000031D1 E823EAFFFF          <1> 	call printline
  4242 000031D6 0F31                <1> 	rdtsc
  4243 000031D8 A3[EC620000]        <1> 	mov [lasttsc], eax
  4244 000031DD 8915[F0620000]      <1> 	mov [lasttsc + 4], edx
  4245 000031E3 C3                  <1> 	ret
  4246                                      %include "source/programs.asm"
  4247 000031E4 FF2C                <1> filetypes db 255,44
  4248                              <1> progstart:		;programs start here
  4249                              <1> indexfiles:
  4250 000031E6 BE[E6310000]        <1> 	mov esi, progstart
  4251 000031EB BB[08880300]        <1> 	mov ebx, fileindex
  4252 000031F0 BF[E6310000]        <1> 	mov edi, progstart
  4253 000031F5 81EF02000000        <1> 	sub edi, 2
  4254                              <1> indexloop:
  4255 000031FB 668B0E              <1> 	mov cx, [esi]
  4256                              <1> 	indexloop2:
  4257 000031FE 663B0F              <1> 		cmp cx, [edi]
  4258 00003201 7427                <1> 		je indexloop2done
  4259 00003203 81EF02000000        <1> 		sub edi, 2
  4260 00003209 81FF[E4310000]      <1> 		cmp edi, filetypes
  4261 0000320F 73ED                <1> 		jae indexloop2
  4262 00003211 BF[E6310000]        <1> 	mov edi, progstart
  4263 00003216 81EF02000000        <1> 	sub edi, 2
  4264 0000321C 46                  <1> 	inc esi
  4265 0000321D 81FE[964F0000]      <1> 	cmp esi, batchprogend
  4266 00003223 7357                <1> 	jae indexloopdone
  4267 00003225 E9D1FFFFFF          <1> 	jmp indexloop
  4268                              <1> indexloop2done:
  4269 0000322A 66890B              <1> 	mov [ebx], cx
  4270 0000322D 81C302000000        <1> 	add ebx, 2
  4271 00003233 81C602000000        <1> 	add esi, 2
  4272                              <1> 	nameindex:
  4273 00003239 8A0E                <1> 		mov cl, [esi]
  4274 0000323B 80F900              <1> 		cmp cl, 0
  4275 0000323E 7409                <1> 		je nameindexdone
  4276 00003240 880B                <1> 		mov [ebx], cl
  4277 00003242 46                  <1> 		inc esi
  4278 00003243 43                  <1> 		inc ebx
  4279 00003244 E9F0FFFFFF          <1> 		jmp nameindex
  4280                              <1> 	nameindexdone:
  4281 00003249 43                  <1> 		inc ebx
  4282 0000324A 66C7030000          <1> 		mov word [ebx], 0
  4283 0000324F 81C302000000        <1> 		add ebx, 2
  4284 00003255 46                  <1> 		inc esi
  4285 00003256 8933                <1> 		mov [ebx], esi
  4286 00003258 81C304000000        <1> 		add ebx, 4
  4287 0000325E 66C7030000          <1> 		mov word [ebx], 0
  4288 00003263 81C302000000        <1> 		add ebx, 2
  4289 00003269 81FB[088C0300]      <1> 		cmp ebx, fileindexend
  4290 0000326F 730B                <1> 		jae indexloopdone
  4291 00003271 81C601000000        <1> 		add esi, 1
  4292 00003277 E97FFFFFFF          <1> 		jmp indexloop
  4293 0000327C C605[84320000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4294 00003283 C3                  <1> 		ret
  4295 00003284 00                  <1> indexdone db 0
  4296                              <1> %include 'source/programs/_comment.asm' ;#
  4297 00003285 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4298 00003289 C3                  <2> 	ret 
  4299                              <1> %include 'source/programs/_math.asm' ;!
  4300 0000328A FF2C2100            <2> db 255,44,"!",0
  4301                              <2> 	num:	
  4302 0000328E E874FBFFFF          <2> 		call clearbuffer
  4303 00003293 C605[11350000]00    <2> 		mov byte [decimal], 0
  4304 0000329A C605[12350000]00    <2> 		mov byte [decimal2], 0
  4305 000032A1 8B35[3E2D0000]      <2> 		mov esi, [currentcommandloc]
  4306 000032A7 31C0                <2> 		xor eax, eax
  4307 000032A9 31C9                <2> 		xor ecx, ecx
  4308 000032AB 31DB                <2> 		xor ebx, ebx
  4309 000032AD 8A06                <2> 	num2:	mov al, [esi]
  4310 000032AF 3C2B                <2> 		cmp al, '+'
  4311 000032B1 7416                <2> 		je operatorfound
  4312 000032B3 3C2D                <2> 		cmp al, '-'
  4313 000032B5 7412                <2> 		je operatorfound
  4314 000032B7 3C2A                <2> 		cmp al, '*'
  4315 000032B9 740E                <2> 		je operatorfound
  4316 000032BB 3C2F                <2> 		cmp al, '/'
  4317 000032BD 740A                <2> 		je operatorfound
  4318 000032BF 3C5E                <2> 		cmp al, '^'
  4319 000032C1 7406                <2> 		je operatorfound
  4320 000032C3 46                  <2> 		inc esi
  4321 000032C4 84C0                <2> 		test al, al
  4322 000032C6 75E5                <2> 		jnz num2
  4323 000032C8 C3                  <2> 		ret
  4324 000032C9 50                  <2> 	operatorfound: push eax
  4325 000032CA 30E4                <2> 		xor ah, ah
  4326 000032CC 8826                <2> 		mov [esi], ah
  4327 000032CE 89F7                <2> 		mov edi, esi
  4328 000032D0 46                  <2> 		inc esi
  4329 000032D1 8A06                <2> 		mov al, [esi]
  4330 000032D3 3C25                <2> 		cmp al, '%'
  4331 000032D5 0F845E000000        <2> 		je near resultnum1
  4332                              <2> 	varnum2: 
  4333 000032DB 57                  <2> 		push edi
  4334 000032DC E8A6000000          <2> 		call checkdecimal
  4335 000032E1 5F                  <2> 		pop edi
  4336 000032E2 E839FEFFFF          <2> 		call cnvrttxt
  4337                              <2> 	vrnm2:
  4338 000032E7 89CB                <2> 		mov ebx, ecx
  4339 000032E9 53                  <2> 		push ebx
  4340 000032EA E818FBFFFF          <2> 		call clearbuffer
  4341 000032EF 8B35[3E2D0000]      <2> 		mov esi, [currentcommandloc]
  4342 000032F5 89F7                <2> 		mov edi, esi
  4343 000032F7 46                  <2> 		inc esi
  4344 000032F8 8A06                <2> 		mov al, [esi]
  4345 000032FA 3C25                <2> 		cmp al, '%'
  4346 000032FC 0F844E000000        <2> 		je near resultnum2
  4347                              <2> 	varnum4: 
  4348 00003302 57                  <2> 		push edi
  4349 00003303 E86B000000          <2> 		call checkdecimal2
  4350 00003308 5F                  <2> 		pop edi
  4351 00003309 E812FEFFFF          <2> 		call cnvrttxt
  4352                              <2> 	vrnm4:
  4353 0000330E 5B                  <2> 		pop ebx
  4354 0000330F 58                  <2> 		pop eax
  4355 00003310 3C2B                <2> 		cmp al, '+'
  4356 00003312 0F84A3000000        <2> 		je near plusnum
  4357 00003318 3C2D                <2> 		cmp al, '-'
  4358 0000331A 0F84A7000000        <2> 		je near subnum
  4359 00003320 3C2A                <2> 		cmp al, '*'
  4360 00003322 0F84AB000000        <2> 		je near mulnum
  4361 00003328 3C2F                <2> 		cmp al, '/'
  4362 0000332A 0F84B9000000        <2> 		je near divnum
  4363 00003330 3C5E                <2> 		cmp al, '^'
  4364 00003332 0F84D6000000        <2> 		je near expnum
  4365 00003338 C3                  <2> 		ret
  4366                              <2> 	resultnum1:
  4367 00003339 8A0D[13350000]      <2> 		mov cl, [decimalresult]
  4368 0000333F 880D[11350000]      <2> 		mov [decimal], cl
  4369 00003345 8B0D[14350000]      <2> 		mov ecx, [result]
  4370 0000334B E997FFFFFF          <2> 		jmp vrnm2
  4371                              <2> 	resultnum2:
  4372 00003350 8A0D[11350000]      <2> 		mov cl, [decimal]
  4373 00003356 880D[12350000]      <2> 		mov [decimal2], cl
  4374 0000335C 8A0D[13350000]      <2> 		mov cl, [decimalresult]
  4375 00003362 880D[11350000]      <2> 		mov [decimal], cl
  4376 00003368 8B0D[14350000]      <2> 		mov ecx, [result]
  4377 0000336E E99BFFFFFF          <2> 		jmp vrnm4
  4378                              <2> 	checkdecimal2:
  4379 00003373 8A25[11350000]      <2> 		mov ah, [decimal]
  4380 00003379 8825[12350000]      <2> 		mov [decimal2], ah
  4381 0000337F 30E4                <2> 		xor ah, ah
  4382 00003381 8825[11350000]      <2> 		mov [decimal], ah
  4383                              <2> 	checkdecimal:
  4384 00003387 89F7                <2> 		mov edi, esi
  4385                              <2> 	chkdec1:
  4386 00003389 8A07                <2> 		mov al, [edi]
  4387 0000338B 3C2E                <2> 		cmp al, '.'
  4388 0000338D 0F840E000000        <2> 		je near fnddec
  4389 00003393 3C00                <2> 		cmp al, 0
  4390 00003395 0F841F000000        <2> 		je near nodecimal
  4391 0000339B 47                  <2> 		inc edi
  4392 0000339C E9E8FFFFFF          <2> 		jmp chkdec1
  4393                              <2> 	fnddec:
  4394 000033A1 8A4701              <2> 		mov al, [edi + 1]
  4395 000033A4 8807                <2> 		mov [edi], al
  4396 000033A6 3C00                <2> 		cmp al, 0
  4397 000033A8 0F840C000000        <2> 		je near nodecimal
  4398 000033AE FE05[11350000]      <2> 		inc byte [decimal]
  4399 000033B4 47                  <2> 		inc edi
  4400 000033B5 E9E7FFFFFF          <2> 		jmp fnddec
  4401                              <2> 	nodecimal:
  4402 000033BA C3                  <2> 		ret
  4403                              <2> 	plusnum:
  4404 000033BB E80F010000          <2> 		call decaddfix
  4405 000033C0 01D9                <2> 		add ecx, ebx
  4406 000033C2 E98A000000          <2> 		jmp retnum
  4407                              <2> 	subnum:
  4408 000033C7 E803010000          <2> 		call decaddfix
  4409 000033CC 29D9                <2> 		sub ecx, ebx
  4410 000033CE E97E000000          <2> 		jmp retnum
  4411                              <2> 	mulnum:
  4412 000033D3 A0[12350000]        <2> 		mov al, [decimal2]
  4413 000033D8 0005[11350000]      <2> 		add [decimal], al
  4414 000033DE 89C8                <2> 		mov eax, ecx
  4415 000033E0 F7E3                <2> 		mul ebx
  4416 000033E2 89C1                <2> 		mov ecx, eax
  4417 000033E4 E968000000          <2> 		jmp retnum
  4418                              <2> 	divnum:
  4419 000033E9 E8E1000000          <2> 		call decaddfix
  4420 000033EE 30C0                <2> 		xor al, al
  4421 000033F0 A2[11350000]        <2> 		mov [decimal], al
  4422 000033F5 31D2                <2> 		xor edx, edx
  4423 000033F7 89C8                <2> 		mov eax, ecx
  4424 000033F9 81FB00000000        <2> 		cmp ebx, 0
  4425 000033FF 0F844C000000        <2> 		je near retnum
  4426 00003405 F7F3                <2> 		div ebx
  4427 00003407 89C1                <2> 		mov ecx, eax
  4428 00003409 E943000000          <2> 		jmp retnum
  4429                              <2> 	expnum:
  4430 0000340E 8A15[11350000]      <2> 		mov dl, [decimal]
  4431 00003414 8815[12350000]      <2> 		mov [decimal2], dl
  4432 0000341A 31D2                <2> 		xor edx, edx
  4433 0000341C 89C8                <2> 		mov eax, ecx
  4434 0000341E 89D9                <2> 		mov ecx, ebx
  4435 00003420 89C3                <2> 		mov ebx, eax
  4436 00003422 81F900000000        <2> 		cmp ecx, 0
  4437 00003428 7422                <2> 		je noexpnum
  4438 0000342A 49                  <2> 		dec ecx
  4439 0000342B 81F900000000        <2> 		cmp ecx, 0
  4440 00003431 7412                <2> 		je noexpnumlp
  4441 00003433 F7E3                <2> 	expnumlp: mul ebx
  4442 00003435 8A15[12350000]      <2> 		mov dl, [decimal2]
  4443 0000343B 0015[11350000]      <2> 		add [decimal], dl
  4444 00003441 31D2                <2> 		xor edx, edx
  4445 00003443 E2EE                <2> 		loop expnumlp
  4446                              <2> 	noexpnumlp:
  4447 00003445 89C1                <2> 		mov ecx, eax
  4448 00003447 E905000000          <2> 		jmp retnum
  4449                              <2> 	noexpnum:
  4450 0000344C B901000000          <2> 		mov ecx, 1
  4451                              <2> 	retnum: 
  4452 00003451 BE[9CA60300]        <2> 		mov esi, numbuf
  4453 00003456 890D[14350000]      <2> 		mov [result], ecx
  4454 0000345C E8BEF9FFFF          <2> 		call convert
  4455 00003461 BE[9CA60300]        <2> 		mov esi, numbuf
  4456 00003466 8A25[11350000]      <2> 		mov ah, [decimal]
  4457 0000346C 8825[13350000]      <2> 		mov [decimalresult], ah
  4458 00003472 80FC00              <2> 		cmp ah, 0
  4459 00003475 0F8425000000        <2> 		je near noputdecimal
  4460                              <2> 	putdecimal:
  4461 0000347B 4E                  <2> 		dec esi
  4462 0000347C FECC                <2> 		dec ah
  4463 0000347E 80FC00              <2> 		cmp ah, 0
  4464 00003481 0F87F4FFFFFF        <2> 		ja near putdecimal
  4465 00003487 4E                  <2> 		dec esi
  4466 00003488 8A06                <2> 		mov al, [esi]
  4467 0000348A C6062E              <2> 		mov byte [esi], '.'
  4468                              <2> 	decputloop:
  4469 0000348D 4E                  <2> 		dec esi
  4470 0000348E 8A26                <2> 		mov ah, [esi]
  4471 00003490 8806                <2> 		mov [esi], al
  4472 00003492 88E0                <2> 		mov al, ah
  4473 00003494 81FE[88A60300]      <2> 		cmp esi, buf2
  4474 0000349A 0F87EDFFFFFF        <2> 		ja near decputloop
  4475                              <2> 	noputdecimal:
  4476 000034A0 BE[88A60300]        <2> 		mov esi, buf2
  4477 000034A5 E805000000          <2> 		call chkadd
  4478 000034AA C3                  <2> 		ret
  4479 000034AB 00000000            <2> edxnumbuf dw 0,0
  4480 000034AF 8A06                <2> 	chkadd: mov al, [esi]
  4481 000034B1 3C30                <2> 		cmp al, '0'
  4482 000034B3 750F                <2> 		jne dnadd
  4483 000034B5 46                  <2> 		inc esi
  4484 000034B6 81FE[9CA60300]      <2> 		cmp esi, numbuf
  4485 000034BC 7405                <2> 		je dnaddm1
  4486 000034BE E9ECFFFFFF          <2> 		jmp chkadd
  4487 000034C3 4E                  <2> 	dnaddm1: dec esi
  4488 000034C4 E835E7FFFF          <2> 	dnadd:	call print
  4489 000034C9 E82BE7FFFF          <2> 		call printline
  4490 000034CE C3                  <2> 		ret
  4491                              <2> 		
  4492                              <2> 	decaddfix:
  4493 000034CF A0[12350000]        <2> 		mov al, [decimal2]
  4494 000034D4 8A25[11350000]      <2> 		mov ah, [decimal]
  4495 000034DA 38E0                <2> 		cmp al, ah
  4496 000034DC 7432                <2> 		je gooddecadd
  4497 000034DE 38E0                <2> 		cmp al, ah
  4498 000034E0 721A                <2> 		jb lowdecadd
  4499                              <2> 	highdecadd:
  4500 000034E2 FEC4                <2> 		inc ah
  4501 000034E4 89CA                <2> 		mov edx, ecx
  4502 000034E6 C1E103              <2> 		shl ecx, 3
  4503 000034E9 01D1                <2> 		add ecx, edx
  4504 000034EB 01D1                <2> 		add ecx, edx
  4505 000034ED 38E0                <2> 		cmp al, ah
  4506 000034EF 77F1                <2> 		ja highdecadd
  4507 000034F1 8825[11350000]      <2> 		mov [decimal], ah
  4508 000034F7 E914000000          <2> 		jmp gooddecadd
  4509                              <2> 	lowdecadd:
  4510 000034FC FEC0                <2> 		inc al
  4511 000034FE 89DA                <2> 		mov edx, ebx
  4512 00003500 C1E303              <2> 		shl ebx, 3
  4513 00003503 01D3                <2> 		add ebx, edx
  4514 00003505 01D3                <2> 		add ebx, edx
  4515 00003507 38E0                <2> 		cmp al, ah
  4516 00003509 72F1                <2> 		jb lowdecadd
  4517 0000350B A2[11350000]        <2> 		mov [decimal], al
  4518                              <2> 	gooddecadd:
  4519 00003510 C3                  <2> 		ret
  4520                              <2> 		
  4521 00003511 00                  <2> decimal db 0
  4522 00003512 00                  <2> decimal2 db 0
  4523 00003513 00                  <2> decimalresult db 0
  4524 00003514 00000000            <2> result dd 0
  4525                              <1> %include 'source/programs/_variables.asm' ;% and $
  4526 00003518 FF2C2500            <2> db 255,44,"%",0
  4527                              <2> 	ans:
  4528 0000351C BE[88A60300]        <2> 		mov esi, buf2
  4529 00003521 E889FFFFFF          <2> 		call chkadd
  4530 00003526 C3                  <2> 		ret
  4531                              <2> 		
  4532 00003527 FF2C2400            <2> db 255,44,"$",0
  4533 0000352B 8B35[3E2D0000]      <2> var: mov esi, [currentcommandloc]
  4534 00003531 BB[888E0300]        <2> 	mov ebx, variables
  4535 00003536 8A06                <2> lkeq:	mov al, [esi]
  4536 00003538 3C3D                <2> 	cmp al, '='
  4537 0000353A 741E                <2> 	je eqfnd	;is there an '=' sign?
  4538 0000353C 3C00                <2> 	cmp al, 0
  4539 0000353E 7406                <2> 	je echovars
  4540 00003540 46                  <2> 	inc esi
  4541 00003541 E9F0FFFFFF          <2> 	jmp lkeq
  4542 00003546 BE[888E0300]        <2> echovars: mov esi, variables
  4543 0000354B BB[889E0300]        <2> 	mov ebx, varend
  4544 00003550 B105                <2> 	mov cl, 5
  4545 00003552 B504                <2> 	mov ch, 4
  4546 00003554 E84CF8FFFF          <2> 	call array
  4547 00003559 C3                  <2> 	ret
  4548 0000355A 46                  <2> eqfnd:	inc esi
  4549 0000355B 8A06                <2> 	mov al, [esi]
  4550 0000355D 3C00                <2> 	cmp al, 0
  4551 0000355F 7410                <2> 	je readvar
  4552 00003561 8B35[3E2D0000]      <2> 	mov esi, [currentcommandloc]
  4553 00003567 BB[888E0300]        <2> 	mov ebx, variables
  4554 0000356C E91C000000          <2> 	jmp seek
  4555                              <2> readvar:
  4556 00003571 B00A                <2> 	mov al, 10
  4557 00003573 66BB0700            <2> 	mov bx, 7
  4558 00003577 C605[FD210000]00    <2> 	mov byte [commandedit], 0
  4559 0000357E BF[88A60300]        <2> 	mov edi, buftxtend
  4560 00003583 E8A9E7FFFF          <2> 	call rdprint
  4561 00003588 E99EFFFFFF          <2> 	jmp var
  4562 0000358D 668B03              <2> seek:	mov ax, [ebx]
  4563 00003590 B105                <2> 	mov cl, 5
  4564 00003592 B504                <2> 	mov ch, 4
  4565 00003594 663D0000            <2> 	cmp ax, 0
  4566 00003598 0F846A000000        <2> 	je near save
  4567 0000359E 6639C8              <2> 	cmp ax, cx
  4568 000035A1 7406                <2> 	je skfnd
  4569 000035A3 43                  <2> 	inc ebx
  4570 000035A4 E9E4FFFFFF          <2> 	jmp seek
  4571 000035A9 8B35[3E2D0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4572 000035AF 46                  <2> 	inc esi
  4573 000035B0 81C302000000        <2> 	add ebx, 2
  4574 000035B6 89DF                <2> 	mov edi, ebx
  4575 000035B8 B13D                <2> 	mov cl, '='
  4576 000035BA E8C4F7FFFF          <2> 	call cndtest
  4577 000035BF 3C01                <2> 	cmp al, 1	
  4578 000035C1 741B                <2> 	je varfnd
  4579 000035C3 89FB                <2> 	mov ebx, edi
  4580 000035C5 8B35[3E2D0000]      <2> 	mov esi, [currentcommandloc]
  4581 000035CB 668B03              <2> 	mov ax, [ebx]
  4582 000035CE 663D0000            <2> 	cmp ax, 0
  4583 000035D2 0F8430000000        <2> 	je near save
  4584 000035D8 43                  <2> 	inc ebx
  4585 000035D9 E9AFFFFFFF          <2> 	jmp seek
  4586 000035DE 8A03                <2> varfnd:	mov al, [ebx]
  4587 000035E0 3C04                <2> 	cmp al, 4
  4588 000035E2 7407                <2> 	je save2
  4589 000035E4 4B                  <2> 	dec ebx
  4590 000035E5 4E                  <2> 	dec esi
  4591 000035E6 E9F3FFFFFF          <2> 	jmp varfnd
  4592 000035EB 4B                  <2> save2:	dec ebx
  4593 000035EC 4E                  <2> 	dec esi
  4594 000035ED 8A03                <2> 	mov al, [ebx]
  4595 000035EF 3C05                <2> 	cmp al, 5
  4596 000035F1 7405                <2> 	je remove
  4597 000035F3 E9E6FFFFFF          <2> 	jmp varfnd
  4598 000035F8 8A03                <2> remove: mov al, [ebx]
  4599 000035FA 3C00                <2> 	cmp al, 0
  4600 000035FC 748F                <2> 	je seek
  4601 000035FE 30C0                <2> 	xor al, al
  4602 00003600 8803                <2> 	mov [ebx], al
  4603 00003602 43                  <2> 	inc ebx
  4604 00003603 E9F0FFFFFF          <2> 	jmp remove	;do not need for now-need defragmentation
  4605 00003608 8B35[3E2D0000]      <2> save:	mov esi, [currentcommandloc]
  4606 0000360E 43                  <2> 	inc ebx
  4607 0000360F B005                <2> 	mov al, 5
  4608 00003611 B404                <2> 	mov ah, 4
  4609 00003613 668903              <2> 	mov [ebx], ax
  4610 00003616 43                  <2> 	inc ebx
  4611 00003617 43                  <2> svhere:	inc ebx
  4612 00003618 46                  <2> 	inc esi
  4613 00003619 8A06                <2> 	mov al, [esi]
  4614 0000361B 3C00                <2> 	cmp al, 0
  4615 0000361D 0F8456000000        <2> 	je near svdone
  4616 00003623 3C25                <2> 	cmp al, '%'
  4617 00003625 7407                <2> 	je ans2
  4618 00003627 8803                <2> 	mov [ebx], al	
  4619 00003629 E9E9FFFFFF          <2> 	jmp svhere
  4620 0000362E 56                  <2> ans2:	push esi
  4621 0000362F BE[88A60300]        <2> 	mov esi, buf2
  4622 00003634 E82C000000          <2> 	call ansfnd
  4623 00003639 E806000000          <2> 	call anscp
  4624 0000363E 5E                  <2> 	pop esi
  4625 0000363F E9D3FFFFFF          <2> 	jmp svhere
  4626 00003644 8A06                <2> anscp:	mov al, [esi]
  4627 00003646 8803                <2> 	mov [ebx], al
  4628 00003648 81FE[9CA60300]      <2> 	cmp esi, numbuf
  4629 0000364E 74C7                <2> 	je svhere
  4630 00003650 3C00                <2> 	cmp al, 0
  4631 00003652 74C3                <2> 	je svhere
  4632 00003654 43                  <2> 	inc ebx
  4633 00003655 46                  <2> 	inc esi
  4634 00003656 E9E9FFFFFF          <2> 	jmp anscp
  4635 0000365B 5E                  <2> ansnf:	pop esi
  4636 0000365C 8A06                <2> 	mov al, [esi]
  4637 0000365E 8803                <2> 	mov [ebx], al
  4638 00003660 E9B2FFFFFF          <2> 	jmp svhere
  4639 00003665 46                  <2> ansfnd:	inc esi
  4640 00003666 81FE[9BA60300]      <2> 	cmp esi, numbuf - 1
  4641 0000366C 740A                <2> 	je fndans
  4642 0000366E 8A06                <2> 	mov al, [esi]
  4643 00003670 3C00                <2> 	cmp al, 0
  4644 00003672 74E7                <2> 	je ansnf
  4645 00003674 3C30                <2> 	cmp al, '0'
  4646 00003676 74ED                <2> 	je ansfnd
  4647                              <2> fndans:
  4648 00003678 C3                  <2> 	ret
  4649 00003679 30C0                <2> svdone:	xor al, al
  4650 0000367B 8803                <2> 	mov [ebx], al
  4651 0000367D C3                  <2> 	ret
  4652                              <1> %include 'source/programs/_run.asm' ;./
  4653                              <2> 
  4654 0000367E 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4655 00003682 FF2C2E2F00          <2> 	db 255,44,"./",0
  4656                              <2> rundiskprog:
  4657 00003687 8B3D[3E2D0000]      <2> 	mov edi, [currentcommandloc]
  4658 0000368D 81C702000000        <2> 	add edi, 2
  4659 00003693 BE00004000          <2> 	mov esi, 0x400000
  4660 00003698 E8B1250000          <2> 	call loadfile
  4661 0000369D 81FA94010000        <2> 	cmp edx, 404
  4662 000036A3 746A                <2> 	je noprogfound
  4663 000036A5 BB00004000          <2> 	mov ebx, 0x400000
  4664 000036AA A1[7E360000]        <2> 	mov eax, [elfstart]
  4665 000036AF 3903                <2> 	cmp [ebx], eax
  4666 000036B1 0F8437000000        <2> 	je near runelf
  4667 000036B7 66813B4558          <2> 	cmp word [ebx], "EX"
  4668 000036BC 7577                <2> 	jne progbatchfound
  4669 000036BE 81C302000000        <2> 	add ebx, 2
  4670 000036C4 8B3D[3E2D0000]      <2> 	mov edi, [currentcommandloc]
  4671 000036CA 81C702000000        <2> 	add edi, 2
  4672                              <2> findspaceprog:
  4673 000036D0 8A07                <2> 	mov al, [edi]
  4674 000036D2 47                  <2> 	inc edi
  4675 000036D3 3C20                <2> 	cmp al, " "
  4676 000036D5 75F9                <2> 	jne findspaceprog
  4677                              <2> findnonspaceprog:
  4678 000036D7 8A07                <2> 	mov al, [edi]
  4679 000036D9 47                  <2> 	inc edi
  4680 000036DA 3C20                <2> 	cmp al, " "
  4681 000036DC 74F9                <2> 	je findnonspaceprog
  4682 000036DE 4F                  <2> 	dec edi
  4683 000036DF 8925[088C0300]      <2> 	mov [previousstack], esp
  4684 000036E5 FFD3                <2> 	call ebx
  4685 000036E7 8B25[088C0300]      <2> 	mov esp, [previousstack]
  4686 000036ED C3                  <2> 	ret
  4687                              <2> runelf:
  4688 000036EE 8B3D[3E2D0000]      <2> 	mov edi, [currentcommandloc]
  4689 000036F4 81C702000000        <2> 	add edi, 2
  4690 000036FA 81C380000000        <2> 	add ebx, 0x80
  4691 00003700 8925[088C0300]      <2> 	mov [previousstack], esp
  4692 00003706 FFD3                <2> 	call ebx
  4693 00003708 8B25[088C0300]      <2> 	mov esp, [previousstack]
  4694 0000370E C3                  <2> 	ret
  4695                              <2> noprogfound:
  4696 0000370F BE[80620000]        <2> 	mov esi, notfound1
  4697 00003714 E8E5E4FFFF          <2> 	call print
  4698 00003719 8B35[3E2D0000]      <2> 	mov esi, [currentcommandloc]
  4699 0000371F 81C602000000        <2> 	add esi, 2
  4700 00003725 E8D4E4FFFF          <2> 	call print
  4701 0000372A BE[88620000]        <2> 	mov esi, notfound2
  4702 0000372F E8CAE4FFFF          <2> 	call print
  4703 00003734 C3                  <2> 	ret
  4704                              <2> progbatchfound:
  4705 00003735 BF00004000          <2> 		mov edi, 0x400000
  4706 0000373A C605[828E0300]01    <2> 		mov byte [BATCHISON], 1
  4707                              <2> 	batchrunloop:
  4708 00003741 E80AF3FFFF          <2> 		call buftxtclear
  4709 00003746 BE[88A20300]        <2> 		mov esi, buftxt
  4710 0000374B 8935[3E2D0000]      <2> 		mov [currentcommandloc], esi
  4711                              <2> 	batchrunloop2:
  4712 00003751 B10A                <2> 		mov cl, 10
  4713 00003753 B50D                <2> 		mov ch, 13
  4714 00003755 380F                <2> 		cmp [edi], cl
  4715 00003757 0F841C000000        <2> 		je near nxtbatchrunline
  4716 0000375D 382F                <2> 		cmp [edi], ch
  4717 0000375F 0F8414000000        <2> 		je near nxtbatchrunline
  4718 00003765 803F00              <2> 		cmp byte [edi], 0
  4719 00003768 0F840B000000        <2> 		je near nxtbatchrunline
  4720 0000376E 8A07                <2> 		mov al, [edi]
  4721 00003770 8806                <2> 		mov [esi], al
  4722 00003772 46                  <2> 		inc esi
  4723 00003773 47                  <2> 		inc edi
  4724 00003774 E9D8FFFFFF          <2> 		jmp batchrunloop2
  4725                              <2> 	nxtbatchrunline:
  4726 00003779 47                  <2> 		inc edi
  4727 0000377A 380F                <2> 		cmp [edi], cl
  4728 0000377C 74FB                <2> 		je nxtbatchrunline
  4729 0000377E 382F                <2> 		cmp [edi], ch
  4730 00003780 74F7                <2> 		je nxtbatchrunline
  4731 00003782 893D[E0370000]      <2> 		mov [batchedi], edi
  4732 00003788 893D[7E8E0300]      <2> 		mov [BATCHPOS], edi
  4733 0000378E C60600              <2> 		mov byte [esi], 0
  4734 00003791 BE[88A20300]        <2> 		mov esi, buftxt
  4735 00003796 803E00              <2> 		cmp byte [esi], 0
  4736 00003799 0F8439000000        <2> 		je near nobatchfoundrun
  4737 0000379F 31DB                <2> 		xor ebx, ebx
  4738 000037A1 8A1D[198E0300]      <2> 		mov bl, [IFON]
  4739 000037A7 80FB00              <2> 		cmp bl, 0
  4740 000037AA 0F8534000000        <2> 		jne near iftestbatch
  4741                              <2> 	doneiftest:
  4742 000037B0 803D[B9380000]00    <2> 		cmp byte [runnextline], 0
  4743 000037B7 0F8405000000        <2> 		je near noruniftest
  4744 000037BD E8A0F4FFFF          <2> 		call run
  4745                              <2> 	noruniftest:
  4746 000037C2 C605[B9380000]01    <2> 		mov byte [runnextline], 1
  4747 000037C9 8B3D[E0370000]      <2> 		mov edi, [batchedi]
  4748 000037CF 803F00              <2> 		cmp byte [edi], 0
  4749 000037D2 0F8569FFFFFF        <2> 		jne near batchrunloop
  4750                              <2> 	nobatchfoundrun:
  4751 000037D8 C605[828E0300]00    <2> 		mov byte [BATCHISON], 0
  4752 000037DF C3                  <2> 		ret
  4753                              <2> 	
  4754 000037E0 00000000            <2> batchedi dd 0	
  4755                              <2> 	
  4756                              <2> 	iftestbatch:
  4757 000037E4 BE[1A8E0300]        <2> 		mov esi, IFTRUE
  4758 000037E9 01DE                <2> 		add esi, ebx
  4759 000037EB 803E00              <2> 		cmp byte [esi], 0
  4760 000037EE 0F85BCFFFFFF        <2> 		jne near doneiftest
  4761 000037F4 881D[BA380000]      <2> 		mov [iffalsebuf], bl
  4762 000037FA 803D[838E0300]01    <2> 		cmp byte [LOOPON], 1
  4763 00003801 0F8513000000        <2> 		jne near fifindbatch
  4764 00003807 E935FFFFFF          <2> 		jmp batchrunloop
  4765                              <2> 	elsetestbatch:
  4766 0000380C C60601              <2> 		mov byte [esi], 1
  4767 0000380F 81C705000000        <2> 		add edi, 5
  4768 00003815 E927FFFFFF          <2> 		jmp batchrunloop
  4769                              <2> 	fifindbatch:
  4770 0000381A 66B96966            <2> 		mov cx, "if"
  4771 0000381E 66B86669            <2> 		mov ax, "fi"
  4772 00003822 663907              <2> 		cmp [edi], ax
  4773 00003825 0F8424000000        <2> 		je near fifoundbatch
  4774 0000382B 66390F              <2> 		cmp [edi], cx
  4775 0000382E 0F8468000000        <2> 		je near iffoundbatch
  4776 00003834 803F00              <2> 		cmp byte [edi], 0
  4777 00003837 0F8412000000        <2> 		je near fifoundbatch
  4778 0000383D B8656C7365          <2> 		mov eax, "else"
  4779 00003842 3907                <2> 		cmp [edi], eax
  4780 00003844 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4781 0000384A E973FFFFFF          <2> 		jmp noruniftest
  4782                              <2> 	fifoundbatch:
  4783 0000384F 81C702000000        <2> 		add edi, 2
  4784 00003855 B00A                <2> 		mov al, 10
  4785 00003857 3807                <2> 		cmp [edi], al
  4786 00003859 0F840E000000        <2> 		je near goodfibatch
  4787 0000385F 803F00              <2> 		cmp byte [edi], 0
  4788 00003862 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4789 00003868 E9ADFFFFFF          <2> 		jmp fifindbatch
  4790                              <2> 	goodfibatch:
  4791 0000386D B001                <2> 		mov al, 1
  4792 0000386F 2805[198E0300]      <2> 		sub [IFON], al 
  4793 00003875 A0[198E0300]        <2> 		mov al, [IFON]
  4794 0000387A 8A1D[BA380000]      <2> 		mov bl, [iffalsebuf]
  4795 00003880 38D8                <2> 		cmp al, bl
  4796 00003882 7796                <2> 		ja fifindbatch
  4797 00003884 8B35[3E2D0000]      <2> 		mov esi, [currentcommandloc]
  4798 0000388A 81EF02000000        <2> 		sub edi, 2
  4799 00003890 C605[B9380000]00    <2> 		mov byte [runnextline], 0
  4800 00003897 E9A5FEFFFF          <2> 		jmp batchrunloop
  4801                              <2> 	iffoundbatch:
  4802 0000389C B020                <2> 		mov al, ' '
  4803 0000389E 81C702000000        <2> 		add edi, 2
  4804 000038A4 3807                <2> 		cmp [edi], al
  4805 000038A6 0F856EFFFFFF        <2> 		jne near fifindbatch
  4806 000038AC B001                <2> 		mov al, 1
  4807 000038AE 0005[198E0300]      <2> 		add [IFON], al
  4808 000038B4 E961FFFFFF          <2> 		jmp fifindbatch
  4809                              <2> 		
  4810                              <2> 		
  4811 000038B9 01                  <2> runnextline db 1
  4812 000038BA 00                  <2> iffalsebuf db 0
  4813 000038BB C3                  <2> notbatch: ret 
  4814                              <1> %ifdef network.included
  4815                              <1> 	%include 'source/programs/arp.asm'
  4816 000038BC FF2C61727000        <2> db 255,44,"arp",0
  4817                              <2> 	;ARP TESTING
  4818                              <2> arptest:
  4819 000038C2 8B35[3E2D0000]      <2> 	mov esi, [currentcommandloc]
  4820 000038C8 81C604000000        <2> 	add esi, 4
  4821 000038CE E8BE280000          <2> 	call strtoip
  4822 000038D3 890D[7A390000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4823 000038D9 E8F9280000          <2> 	call showip
  4824 000038DE 803D[7E390000]01    <2> 	cmp byte [arpconfig], 1
  4825 000038E5 7405                <2> 	je arptest2
  4826 000038E7 E841000000          <2> 	call arpinit
  4827                              <2> arptest2:	;try to reach 192.168.0.1
  4828 000038EC 8B0D[72620000]      <2> 	mov ecx, [sysmac]
  4829 000038F2 668B1D[76620000]    <2> 	mov bx, [sysmac + 4]
  4830 000038F9 890D[5A390000]      <2> 	mov [sourcemac], ecx
  4831 000038FF 66891D[5E390000]    <2> 	mov [sourcemac + 4],bx
  4832 00003906 890D[6A390000]      <2> 	mov [arpsenderinfo], ecx
  4833 0000390C 66891D[6E390000]    <2> 	mov [arpsenderinfo + 4], bx
  4834 00003913 BF[54390000]        <2> 	mov edi, frame
  4835 00003918 BE[7E390000]        <2> 	mov esi, framend
  4836 0000391D E83D280000          <2> 	call sendpacket
  4837 00003922 BE[B9620000]        <2> 	mov esi, line
  4838 00003927 E8D2E2FFFF          <2> 	call print
  4839 0000392C C3                  <2> 	ret
  4840                              <2> 	
  4841                              <2> arpinit:
  4842 0000392D BE[7F390000]        <2> 	mov esi, arptable
  4843 00003932 BF[72620000]        <2> 	mov edi, sysmac
  4844 00003937 BB[6E620000]        <2> 	mov ebx, sysip
  4845 0000393C 8B0F                <2> 	mov ecx, [edi]
  4846 0000393E 890E                <2> 	mov [esi], ecx
  4847 00003940 668B4F04            <2> 	mov cx, [edi + 4]
  4848 00003944 894E04              <2> 	mov [esi + 4], ecx
  4849 00003947 8B0B                <2> 	mov ecx, [ebx]
  4850 00003949 894E06              <2> 	mov [esi + 6], ecx
  4851 0000394C C605[7E390000]01    <2> 	mov byte [arpconfig], 1
  4852 00003953 C3                  <2> 	ret
  4853                              <2> 	
  4854                              <2> ;example frame
  4855                              <2> frame:
  4856 00003954 FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4857 0000395A 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4858 00003960 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4859                              <2> 	;example packet
  4860 00003962 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4861 00003964 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4862 00003966 0604                <2> 					db 6,4			;length of mac, length of ip
  4863 00003968 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4864 0000396A 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4865 00003970 C0A80073            <2> 					db 192,168,0,115		;ip
  4866 00003974 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4867 0000397A C0A80000            <2> 					db 192,168,0,0			;ip
  4868                              <2> framend:
  4869                              <2> 
  4870 0000397E 00                  <2> arpconfig db 0
  4871                              <2> arptable:	;mac,ip
  4872 0000397F 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4873 00003988 00<rept>            <2>
  4874                              <2> arptableend:	
  4875                              <1> %endif
  4876                              <1> %include 'source/programs/batch.asm'
  4877 000039E3 FF2C626174636800    <2> db 255,44,"batch",0
  4878                              <2> 	batchst: 
  4879 000039EB 8B3D[3E2D0000]      <2> 		mov edi, [currentcommandloc]
  4880 000039F1 81C706000000        <2> 		add edi, 6
  4881 000039F7 803F00              <2> 		cmp byte [edi], 0
  4882 000039FA 0F846D000000        <2> 		je near nonamefound
  4883 00003A00 BE00004000          <2> 		mov esi, 0x400000
  4884 00003A05 E844220000          <2> 		call loadfile
  4885 00003A0A 89D0                <2> 		mov eax, edx
  4886 00003A0C 3D94010000          <2> 		cmp eax, 404
  4887 00003A11 7465                <2> 		je goodbatchname
  4888 00003A13 BE[1E3A0000]        <2> 		mov esi, badbatchname
  4889 00003A18 E8E1E1FFFF          <2> 		call print
  4890 00003A1D C3                  <2> 		ret
  4891 00003A1E 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4892 00003A27 20616C726561647920- <2>
  4893 00003A30 657869737473210A00  <2>
  4894 00003A39 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4895 00003A42 746F20747970652061- <2>
  4896 00003A4B 206E616D6520616674- <2>
  4897 00003A54 65722074686520636F- <2>
  4898 00003A5D 6D6D616E642E0A00    <2>
  4899 00003A65 00000000            <2> 		esicache3 dd 0
  4900 00003A69 00000000            <2> 		esicache2 dd 0
  4901                              <2> 	nonamefound:
  4902 00003A6D BE[393A0000]        <2> 		mov esi, namenotfoundbatch
  4903 00003A72 E887E1FFFF          <2> 		call print
  4904 00003A77 C3                  <2> 		ret
  4905                              <2> 	goodbatchname:
  4906 00003A78 BE00004000          <2> 		mov esi, 0x400000
  4907                              <2> 	batchcreate:
  4908 00003A7D 8935[653A0000]      <2> 		mov [esicache3], esi
  4909 00003A83 BF00008000          <2> 		mov edi, 0x800000
  4910 00003A88 B00A                <2> 		mov al, 10
  4911 00003A8A B307                <2> 		mov bl, 7
  4912 00003A8C B404                <2> 		mov ah, 4
  4913 00003A8E CD30                <2> 		int 30h
  4914 00003A90 8935[693A0000]      <2> 		mov [esicache2], esi
  4915 00003A96 8A0E                <2> 		mov cl, [esi]
  4916 00003A98 8B35[653A0000]      <2> 		mov esi, [esicache3]
  4917 00003A9E BB[D53A0000]        <2> 		mov ebx, exitword
  4918 00003AA3 E8DBF2FFFF          <2> 		call cndtest
  4919 00003AA8 3C01                <2> 		cmp al, 1
  4920 00003AAA 7414                <2> 		je endbatchcreate
  4921 00003AAC 3C02                <2> 		cmp al, 2
  4922 00003AAE 7410                <2> 		je endbatchcreate
  4923 00003AB0 8B35[693A0000]      <2> 		mov esi, [esicache2]
  4924 00003AB6 B00A                <2> 		mov al, 10
  4925 00003AB8 8806                <2> 		mov [esi], al
  4926 00003ABA 46                  <2> 		inc esi
  4927 00003ABB E9BDFFFFFF          <2> 		jmp batchcreate
  4928                              <2> 	endbatchcreate:
  4929 00003AC0 8B35[653A0000]      <2> 		mov esi, [esicache3]
  4930 00003AC6 31C0                <2> 		xor eax, eax
  4931 00003AC8 8806                <2> 		mov [esi], al
  4932 00003ACA BE00004000          <2> 		mov esi, 0x400000
  4933 00003ACF E82AE1FFFF          <2> 		call print
  4934 00003AD4 C3                  <2> 		ret
  4935                              <2> 	
  4936 00003AD5 5C7800              <2> 	exitword db "\x",0
  4937 00003AD8 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4938 00003AE1 6F20657869742E0A00  <2>
  4939                              <1> %ifdef gui.background
  4940                              <1> 	%include 'source/programs/background.asm'
  4941                              <1> %endif
  4942                              <1> %include 'source/programs/beep.asm'
  4943 00003AEA FF2C6265657000      <2> 	db 255,44,"beep",0
  4944                              <2> beep:
  4945 00003AF1 B8[163B0000]        <2> 	mov eax, beepstart
  4946 00003AF6 A3[51020000]        <2> 	mov [soundpos], eax
  4947 00003AFB B8[1A3B0000]        <2> 	mov eax, beepend
  4948 00003B00 A3[55020000]        <2> 	mov [soundendpos], eax
  4949 00003B05 C605[4E020000]01    <2> 	mov byte [soundon], 1
  4950                              <2> waitforsoundendbeep:
  4951 00003B0C A0[4E020000]        <2> 	mov al, [soundon]
  4952 00003B11 3C00                <2> 	cmp al, 0
  4953 00003B13 75F7                <2> 	jne waitforsoundendbeep
  4954 00003B15 C3                  <2> 	ret
  4955                              <2> 	
  4956                              <2> beepstart:
  4957 00003B16 3200D111            <2> 	dw 50, 4561
  4958                              <2> beepend:
  4959                              <1> %ifdef dos.compatible
  4960                              <1> %else
  4961                              <1> 	%include 'source/programs/boot.asm'
  4962 00003B1A FF2C626F6F7400      <2> db 255,44,"boot",0
  4963                              <2> quickboot:
  4964                              <2> 	;load and jump to the bootloader
  4965                              <2> 	; mov ecx, 1
  4966                              <2> 	; xor ebx, ebx
  4967                              <2> 	; mov esi, 0x400000
  4968                              <2> 	; call diskr
  4969                              <2> 	; mov ax, LINEAR_SEL
  4970                              <2> 	; mov fs, ax
  4971                              <2> 	; mov esi, 0x400000
  4972                              <2> 	; mov edi, 0x7C00
  4973                              <2> 	; xor ebx, ebx
  4974                              <2> ; .lp:
  4975                              <2> 	; mov ecx, [esi+ebx]
  4976                              <2> 	; mov [fs:edi+ebx], ecx
  4977                              <2> 	; add ebx, 4
  4978                              <2> 	; cmp ebx, 512
  4979                              <2> 	; jb .lp
  4980 00003B21 66BB[313B]          <2> 	mov bx, bootload
  4981 00003B25 66891D[D20C0000]    <2> 	mov [realmodeptr], bx
  4982 00003B2C E98FD0FFFF          <2> 	jmp realmode
  4983                              <2> [BITS 16]
  4984                              <2> bootload:
  4985 00003B31 B80300              <2> 	mov ax, 3
  4986 00003B34 31DB                <2> 	xor bx, bx
  4987 00003B36 CD10                <2> 	int 10h
  4988 00003B38 EA007C0000          <2> 	jmp 0:0x7C00
  4989                              <2> [BITS 32]
  4990                              <1> %endif
  4991                              <1> %include 'source/programs/cd.asm'
  4992 00003B3D FF2C636400          <2> db 255,44,"cd",0
  4993                              <2> cd:
  4994 00003B42 8B35[3E2D0000]      <2> 	mov esi, [currentcommandloc]
  4995 00003B48 81C603000000        <2> 	add esi, 3
  4996 00003B4E 8B3D[108C0300]      <2> 	mov edi, [currentfolderloc]
  4997 00003B54 893D[0C8C0300]      <2> 	mov [lastfolderloc], edi
  4998 00003B5A 81C7[148C0300]      <2> 	add edi, currentfolder
  4999 00003B60 4F                  <2> 	dec edi
  5000 00003B61 66813E2E2E          <2> 	cmp word [esi], ".."
  5001 00003B66 742A                <2> 	je .moveup
  5002 00003B68 47                  <2> 	inc edi
  5003                              <2> .movedown:
  5004 00003B69 8A06                <2> 	mov al, [esi]
  5005 00003B6B 8807                <2> 	mov [edi], al
  5006 00003B6D 47                  <2> 	inc edi
  5007 00003B6E 46                  <2> 	inc esi
  5008 00003B6F 3C00                <2> 	cmp al, 0
  5009 00003B71 740A                <2> 	je .donecd
  5010 00003B73 81FF[148E0300]      <2> 	cmp edi, currentfolderend
  5011 00003B79 72EE                <2> 	jb .movedown
  5012 00003B7B 30C0                <2> 	xor al, al
  5013                              <2> .donecd:
  5014 00003B7D 4F                  <2> 	dec edi
  5015 00003B7E C6072F              <2> 	mov byte [edi], '/'
  5016 00003B81 47                  <2> 	inc edi
  5017 00003B82 C60700              <2> 	mov byte [edi], 0
  5018 00003B85 81EF[148C0300]      <2> 	sub edi, currentfolder
  5019 00003B8B 893D[108C0300]      <2> 	mov [currentfolderloc], edi
  5020 00003B91 C3                  <2> 	ret
  5021                              <2> .moveup:
  5022 00003B92 31C0                <2> 	xor eax, eax
  5023 00003B94 A3[0C8C0300]        <2> 	mov [lastfolderloc], eax
  5024                              <2> .moveuploop:
  5025 00003B99 4F                  <2> 	dec edi
  5026 00003B9A 8A07                <2> 	mov al, [edi]
  5027 00003B9C 81FF[148C0300]      <2> 	cmp edi, currentfolder
  5028 00003BA2 763B                <2> 	jbe .moveupover
  5029 00003BA4 3C2F                <2> 	cmp al, '/'
  5030 00003BA6 75F1                <2> 	jne .moveuploop
  5031 00003BA8 C6072F              <2> 	mov byte [edi], '/'
  5032 00003BAB 47                  <2> 	inc edi
  5033 00003BAC C60700              <2> 	mov byte [edi], 0
  5034 00003BAF 81EF[148C0300]      <2> 	sub edi, currentfolder
  5035 00003BB5 893D[108C0300]      <2> 	mov [currentfolderloc], edi
  5036 00003BBB 81C7[148C0300]      <2> 	add edi, currentfolder
  5037 00003BC1 4F                  <2> 	dec edi
  5038                              <2> .lastfolder:
  5039 00003BC2 4F                  <2> 	dec edi
  5040 00003BC3 8A07                <2> 	mov al, [edi]
  5041 00003BC5 81FF[148C0300]      <2> 	cmp edi, currentfolder
  5042 00003BCB 7604                <2> 	jbe .donemoveup
  5043 00003BCD 3C2F                <2> 	cmp al, '/'
  5044 00003BCF 75F1                <2> 	jne .lastfolder
  5045                              <2> .donemoveup:
  5046 00003BD1 47                  <2> 	inc edi
  5047 00003BD2 81EF[148C0300]      <2> 	sub edi, currentfolder
  5048 00003BD8 893D[0C8C0300]      <2> 	mov [lastfolderloc], edi
  5049 00003BDE C3                  <2> 	ret
  5050                              <2> .moveupover:
  5051 00003BDF BF[148C0300]        <2> 	mov edi, currentfolder
  5052 00003BE4 C6072F              <2> 	mov byte [edi], '/'
  5053 00003BE7 47                  <2> 	inc edi
  5054 00003BE8 C60700              <2> 	mov byte [edi], 0
  5055 00003BEB 31C0                <2> 	xor eax, eax
  5056 00003BED A3[0C8C0300]        <2> 	mov [lastfolderloc], eax
  5057 00003BF2 40                  <2> 	inc eax
  5058 00003BF3 A3[108C0300]        <2> 	mov [currentfolderloc], eax
  5059 00003BF8 C3                  <2> 	ret
  5060                              <1> %include 'source/programs/charmap.asm'
  5061 00003BF9 00                  <2> charmapnum db 0
  5062 00003BFA FF2C636861726D6170- <2> db 255,44,"charmap",0
  5063 00003C03 00                  <2>
  5064 00003C04 8B35[3E2D0000]      <2> 	mov esi, [currentcommandloc]
  5065 00003C0A 81C608000000        <2> 	add esi, 8
  5066 00003C10 803E00              <2> 	cmp byte [esi], 0
  5067 00003C13 7412                <2> 	je .nospecific
  5068 00003C15 E8BAF4FFFF          <2> 	call cnvrthextxt
  5069 00003C1A 6689C8              <2> 	mov ax, cx
  5070 00003C1D 66BB0700            <2> 	mov bx, 7
  5071 00003C21 E881E6FFFF          <2> 	call prcharq
  5072 00003C26 C3                  <2> 	ret
  5073                              <2> .nospecific:
  5074 00003C27 66BB0700            <2> 	mov bx, 7
  5075 00003C2B 66B82000            <2> 	mov ax, " "
  5076 00003C2F C605[F93B0000]00    <2> 	mov byte [charmapnum], 0
  5077 00003C36 E86CE6FFFF          <2> 	call prcharq
  5078 00003C3B E867E6FFFF          <2> 	call prcharq
  5079 00003C40 E862E6FFFF          <2> 	call prcharq
  5080 00003C45 E85DE6FFFF          <2> 	call prcharq
  5081 00003C4A 66B83000            <2> 	mov ax, "0"
  5082                              <2> charmapnumprnt:
  5083 00003C4E E854E6FFFF          <2> 	call prcharq
  5084 00003C53 6640                <2> 	inc ax
  5085 00003C55 6650                <2> 	push ax
  5086 00003C57 66B82000            <2> 	mov ax, " "
  5087 00003C5B E847E6FFFF          <2> 	call prcharq
  5088 00003C60 6658                <2> 	pop ax
  5089 00003C62 663D3900            <2> 	cmp ax, "9"
  5090 00003C66 76E6                <2> 	jbe charmapnumprnt
  5091 00003C68 66B84100            <2> 	mov ax, "A"
  5092                              <2> charmapnumprnt2:
  5093 00003C6C E836E6FFFF          <2> 	call prcharq
  5094 00003C71 6640                <2> 	inc ax
  5095 00003C73 6650                <2> 	push ax
  5096 00003C75 66B82000            <2> 	mov ax, " "
  5097 00003C79 E829E6FFFF          <2> 	call prcharq
  5098 00003C7E 6658                <2> 	pop ax
  5099 00003C80 663D4700            <2> 	cmp ax, "G"
  5100 00003C84 72E6                <2> 	jb charmapnumprnt2
  5101                              <2> 	
  5102 00003C86 BE[B9620000]        <2> 	mov esi, line
  5103 00003C8B E84ADFFFFF          <2> 	call printquiet
  5104 00003C90 6631C0              <2> 	xor ax, ax
  5105 00003C93 6689C1              <2> 	mov cx, ax
  5106 00003C96 E8D8F2FFFF          <2> 	call showhexsmall
  5107 00003C9B E96F000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5108                              <2> charmapcopy:
  5109 00003CA0 6640                <2> 	inc ax
  5110 00003CA2 663D0800            <2> 	cmp ax, 8
  5111 00003CA6 7467                <2> 	je charmapnocopy
  5112 00003CA8 663D0900            <2> 	cmp ax, 9
  5113 00003CAC 7461                <2> 	je charmapnocopy
  5114 00003CAE 663D0A00            <2> 	cmp ax, 10
  5115 00003CB2 745B                <2> 	je charmapnocopy
  5116 00003CB4 663D0D00            <2> 	cmp ax, 13
  5117 00003CB8 7455                <2> 	je charmapnocopy
  5118 00003CBA 663DFF00            <2> 	cmp ax, 255
  5119 00003CBE 744F                <2> 	je charmapnocopy
  5120 00003CC0 663D0001            <2> 	cmp ax, 256
  5121 00003CC4 7448                <2> 	je nomorecharmap
  5122 00003CC6 6650                <2> 	push ax
  5123 00003CC8 E8DAE5FFFF          <2> 	call prcharq
  5124 00003CCD 66B82000            <2> 	mov ax, " "
  5125 00003CD1 E8D1E5FFFF          <2> 	call prcharq
  5126 00003CD6 6658                <2> 	pop ax
  5127                              <2> charmapcopycheck:
  5128 00003CD8 FE05[F93B0000]      <2> 	inc byte [charmapnum]
  5129 00003CDE 803D[F93B0000]10    <2> 	cmp byte [charmapnum], 16
  5130 00003CE5 72B9                <2> 	jb charmapcopy
  5131 00003CE7 6650                <2> 	push ax
  5132 00003CE9 BE[B9620000]        <2> 	mov esi, line
  5133 00003CEE E8E7DEFFFF          <2> 	call printquiet
  5134 00003CF3 6658                <2> 	pop ax
  5135 00003CF5 3CFF                <2> 	cmp al, 255
  5136 00003CF7 7415                <2> 	je nomorecharmap
  5137 00003CF9 88C1                <2> 	mov cl, al
  5138 00003CFB FEC1                <2> 	inc cl
  5139 00003CFD E871F2FFFF          <2> 	call showhexsmall
  5140 00003D02 C605[F93B0000]00    <2> 	mov byte [charmapnum], 0
  5141 00003D09 E992FFFFFF          <2> 	jmp charmapcopy
  5142                              <2> nomorecharmap:
  5143 00003D0E C3                  <2> 	ret
  5144                              <2> charmapnocopy:
  5145 00003D0F 6650                <2> 	push ax
  5146 00003D11 66B82000            <2> 	mov ax, " "
  5147 00003D15 E88DE5FFFF          <2> 	call prcharq
  5148 00003D1A E888E5FFFF          <2> 	call prcharq
  5149 00003D1F 6658                <2> 	pop ax
  5150 00003D21 E9B2FFFFFF          <2> 	jmp charmapcopycheck
  5151                              <1> %ifdef gui.included
  5152                              <1> 	%include 'source/programs/circle.asm'
  5153                              <1> %endif
  5154                              <1> %include 'source/programs/clear.asm'
  5155 00003D26 FF2C636C65617200    <2> db 255,44,"clear",0
  5156 00003D2E E87ADFFFFF          <2> 		call clear
  5157 00003D33 C3                  <2> 		ret 
  5158                              <1> %include 'source/programs/cpuid.asm'
  5159 00003D34 FF2C637075696400    <2> db 255,44,"cpuid",0
  5160 00003D3C 31C0                <2> 	xor eax, eax
  5161 00003D3E 0FA2                <2> 	cpuid
  5162 00003D40 891D[913D0000]      <2> 	mov [cpuidbuf], ebx
  5163 00003D46 8915[953D0000]      <2> 	mov [cpuidbuf + 4], edx
  5164 00003D4C 890D[993D0000]      <2> 	mov [cpuidbuf + 8], ecx
  5165 00003D52 BE[913D0000]        <2> 	mov esi, cpuidbuf
  5166 00003D57 E8A2DEFFFF          <2> 	call print
  5167 00003D5C BE[B9620000]        <2> 	mov esi, line
  5168 00003D61 E898DEFFFF          <2> 	call print
  5169 00003D66 B801000000          <2> 	mov eax, 1
  5170 00003D6B 0FA2                <2> 	cpuid
  5171 00003D6D 89C1                <2> 	mov ecx, eax
  5172 00003D6F C605[722F0000]02    <2> 	mov byte [firsthexshown], 2
  5173 00003D76 E80CF2FFFF          <2> 	call showhex
  5174 00003D7B B808000080          <2> 	mov eax, 0x80000008
  5175 00003D80 0FA2                <2> 	cpuid
  5176 00003D82 89C1                <2> 	mov ecx, eax
  5177 00003D84 C605[722F0000]02    <2> 	mov byte [firsthexshown], 2
  5178 00003D8B E8F7F1FFFF          <2> 	call showhex
  5179 00003D90 C3                  <2> 	ret
  5180                              <2> 	
  5181 00003D91 00<rept>            <2> cpuidbuf times 13 db 0
  5182                              <2> cpuidvendorend:
  5183                              <1> %include 'source/programs/date.asm'
  5184 00003D9E 082E30303030303030- <2> timenscache db 8,".000000000"
  5185 00003DA7 3030                <2>
  5186 00003DA9 200A00              <2> timenscacheend: db " ",10,0
  5187 00003DAC 00                  <2> istimeset db 0
  5188 00003DAD 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5189 00003DB6 2063757272656E7420- <2>
  5190 00003DBF 554E49582074696D65- <2>
  5191 00003DC8 3A0A00              <2>
  5192 00003DCB 00<rept>            <2> timeinputbuffer times 12 db 0
  5193 00003DD7 00                  <2> timeinputbend: db 0
  5194                              <2> 
  5195 00003DD8 FF2C6461746500      <2> db 255,44,"date",0
  5196                              <2> 	;cmp byte [istimeset], 0
  5197                              <2> 	;jne timeisset
  5198 00003DDF E880000000          <2> 	call time
  5199 00003DE4 E828020000          <2> 	call timeconvert	
  5200                              <2> 	; mov esi, settimemsg
  5201                              <2> 	; call print
  5202                              <2> 	; mov esi, timeinputbuffer
  5203                              <2> 	; mov edi, timeinputbend
  5204                              <2> 	; call readline
  5205                              <2> 	; mov esi, timeinputbuffer
  5206                              <2> 	; xor edi, edi
  5207                              <2> 	; call cnvrttxt
  5208 00003DE9 890D[46020000]      <2> 	mov [timeseconds], ecx
  5209                              <2> 	;xor ecx, ecx
  5210                              <2> 	;mov [timenanoseconds], ecx
  5211 00003DEF C605[AC3D0000]01    <2> 	mov byte [istimeset], 1
  5212                              <2> timeisset:
  5213 00003DF6 8B0D[46020000]      <2> 	mov ecx, [timeseconds]
  5214 00003DFC E841F2FFFF          <2> 	call showdec
  5215                              <2> 	
  5216 00003E01 8B0D[4A020000]      <2> 	mov ecx, [timenanoseconds]
  5217 00003E07 BE[9E3D0000]        <2> 	mov esi, timenscache
  5218 00003E0C C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5219 00003E13 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5220 00003E1A C6460A30            <2> 	mov byte [esi + 10], "0"
  5221 00003E1E BE[A93D0000]        <2> 	mov esi, timenscacheend
  5222 00003E23 E8F7EFFFFF          <2> 	call convert
  5223 00003E28 BE[9E3D0000]        <2> 	mov esi, timenscache
  5224 00003E2D E8A8DDFFFF          <2> 	call printquiet
  5225                              <2> 	
  5226 00003E32 E82D000000          <2> 	call time
  5227 00003E37 BE[7F410000]        <2> 	mov esi, timeshow
  5228 00003E3C E899DDFFFF          <2> 	call printquiet
  5229 00003E41 BE[B9620000]        <2> 	mov esi, line
  5230 00003E46 E88FDDFFFF          <2> 	call printquiet
  5231 00003E4B BE[88410000]        <2> 	mov esi, dateshow
  5232 00003E50 E885DDFFFF          <2> 	call printquiet
  5233 00003E55 BE[B9620000]        <2> 	mov esi, line
  5234 00003E5A E87BDDFFFF          <2> 	call printquiet
  5235 00003E5F E9BE000000          <2> 	jmp findday
  5236                              <2> time:
  5237 00003E64 E851010000          <2> 	call tstackput1
  5238 00003E69 B00A                <2> 	mov al,10			;Get RTC register A
  5239 00003E6B E87B010000          <2> 	call tget1
  5240 00003E70 A880                <2> 	test al,0x80			;Is update in progress?
  5241 00003E72 75F0                <2> 	jne time				; yes, wait
  5242                              <2> 
  5243 00003E74 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5244 00003E76 E870010000          <2> 	call tget1
  5245 00003E7B A2[76410000]        <2> 	mov [RTCtimeSecond],al
  5246                              <2> 
  5247 00003E80 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5248 00003E82 E864010000          <2> 	call tget1
  5249 00003E87 A2[77410000]        <2> 	mov [RTCtimeMinute],al
  5250                              <2> 
  5251 00003E8C B004                <2> 	mov al,0x04			;Get hours (see notes)
  5252 00003E8E E858010000          <2> 	call tget1
  5253 00003E93 A2[78410000]        <2> 	mov [RTCtimeHour],al
  5254                              <2> 
  5255 00003E98 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5256 00003E9A E84C010000          <2> 	call tget1
  5257 00003E9F A2[79410000]        <2> 	mov [RTCtimeDay],al
  5258                              <2> 
  5259 00003EA4 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5260 00003EA6 E840010000          <2> 	call tget1
  5261 00003EAB 241F                <2> 	and al, 11111b
  5262 00003EAD A2[7A410000]        <2> 	mov [RTCtimeMonth],al
  5263                              <2> 
  5264 00003EB2 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5265 00003EB4 E832010000          <2> 	call tget1
  5266 00003EB9 A2[7B410000]        <2> 	mov [RTCtimeYear],al
  5267                              <2> 	
  5268 00003EBE BE[7F410000]        <2> 	mov esi, timeshow
  5269 00003EC3 8A2D[78410000]      <2> 	mov ch, [RTCtimeHour]
  5270 00003EC9 E828010000          <2> 	call tput1
  5271 00003ECE 8A2D[77410000]      <2> 	mov ch, [RTCtimeMinute]
  5272 00003ED4 E81D010000          <2> 	call tput1
  5273 00003ED9 8A2D[76410000]      <2> 	mov ch, [RTCtimeSecond]
  5274 00003EDF E812010000          <2> 	call tput1
  5275 00003EE4 BE[88410000]        <2> 	mov esi, dateshow
  5276 00003EE9 8A2D[7A410000]      <2> 	mov ch, [RTCtimeMonth]
  5277 00003EEF E802010000          <2> 	call tput1
  5278 00003EF4 8A2D[79410000]      <2> 	mov ch, [RTCtimeDay]
  5279 00003EFA E8F7000000          <2> 	call tput1
  5280 00003EFF B520                <2> 	mov ch, 0x20
  5281 00003F01 E8F0000000          <2> 	call tput1
  5282 00003F06 4E                  <2> 	dec esi
  5283 00003F07 8A2D[7B410000]      <2> 	mov ch, [RTCtimeYear]
  5284 00003F0D E8E4000000          <2> 	call tput1
  5285 00003F12 E8BD000000          <2> 	call tstackget1
  5286 00003F17 C3                  <2> 	ret
  5287 00003F18 BE[7F410000]        <2> 	mov esi, timeshow
  5288 00003F1D E8DCDCFFFF          <2> 	call print
  5289                              <2> ;get day of week
  5290                              <2> ;add these:
  5291                              <2> ;century value
  5292                              <2> ;last 2 digits of year
  5293                              <2> ;last 2 digits of year right shifted twice
  5294                              <2> ;month table value
  5295                              <2> ;day of the month
  5296                              <2> ;divide these by 7
  5297                              <2> ;the remainder is the day
  5298                              <2> findday:
  5299 00003F22 31C0                <2> 	xor eax, eax
  5300                              <2> ;first convert the values from BCD to hex
  5301 00003F24 A0[79410000]        <2> 	mov al, [RTCtimeDay]
  5302 00003F29 E873000000          <2> 	call converttohex
  5303 00003F2E 8825[7C410000]      <2> 	mov [dayhex], ah
  5304 00003F34 A0[7A410000]        <2> 	mov al, [RTCtimeMonth]
  5305 00003F39 E863000000          <2> 	call converttohex
  5306 00003F3E 8825[7D410000]      <2> 	mov [monthhex], ah
  5307 00003F44 A0[7B410000]        <2> 	mov al, [RTCtimeYear]
  5308 00003F49 E853000000          <2> 	call converttohex
  5309 00003F4E 8825[7E410000]      <2> 	mov [yearhex], ah
  5310 00003F54 31C0                <2> 	xor eax, eax
  5311 00003F56 A0[7E410000]        <2> 	mov al, [yearhex]
  5312 00003F5B C0E802              <2> 	shr al, 2
  5313 00003F5E 0205[7E410000]      <2> 	add al, [yearhex]
  5314 00003F64 0506000000          <2> 	add eax, 6
  5315 00003F69 31DB                <2> 	xor ebx, ebx
  5316 00003F6B 8A1D[7D410000]      <2> 	mov bl, [monthhex]
  5317 00003F71 FECB                <2> 	dec bl
  5318 00003F73 81C3[9D410000]      <2> 	add ebx, month
  5319 00003F79 31C9                <2> 	xor ecx, ecx
  5320 00003F7B 8A0B                <2> 	mov cl, [ebx]
  5321 00003F7D 01C8                <2> 	add eax, ecx
  5322 00003F7F 8A0D[7C410000]      <2> 	mov cl, [dayhex]
  5323 00003F85 01C8                <2> 	add eax, ecx
  5324 00003F87 66BB0700            <2> 	mov bx, 7
  5325 00003F8B 31D2                <2> 	xor edx, edx
  5326 00003F8D 66F7F3              <2> 	div bx
  5327 00003F90 C1E202              <2> 	shl edx, 2
  5328 00003F93 81C2[A9410000]      <2> 	add edx, day
  5329 00003F99 8B32                <2> 	mov esi, [edx]
  5330 00003F9B E85EDCFFFF          <2> 	call print
  5331 00003FA0 C3                  <2> 	ret
  5332                              <2> 	
  5333                              <2> converttohex:
  5334 00003FA1 88C4                <2> 	mov ah, al
  5335 00003FA3 C0E804              <2> 	shr al, 4
  5336 00003FA6 C0E404              <2> 	shl ah, 4
  5337 00003FA9 C0EC04              <2> 	shr ah, 4
  5338 00003FAC 3C00                <2> 	cmp al, 0
  5339 00003FAE 7409                <2> 	je noconverttohex
  5340                              <2> converttohexlp:
  5341 00003FB0 80C40A              <2> 	add ah, 10
  5342 00003FB3 FEC8                <2> 	dec al
  5343 00003FB5 3C00                <2> 	cmp al, 0
  5344 00003FB7 75F7                <2> 	jne converttohexlp
  5345                              <2> noconverttohex:
  5346 00003FB9 C3                  <2> 	ret
  5347                              <2> 	
  5348                              <2> tstackput1:
  5349 00003FBA 8935[72410000]      <2> 	mov [tstack + 20], esi
  5350 00003FC0 BE[5E410000]        <2> 	mov esi, tstack
  5351 00003FC5 8906                <2> 	mov [esi], eax
  5352 00003FC7 895E04              <2> 	mov [esi + 4], ebx
  5353 00003FCA 894E08              <2> 	mov [esi + 8], ecx
  5354 00003FCD 89560C              <2> 	mov [esi + 12], edx
  5355 00003FD0 897E10              <2> 	mov [esi + 16], edi
  5356 00003FD3 C3                  <2> 	ret
  5357                              <2> 	
  5358                              <2> tstackget1:
  5359 00003FD4 BE[5E410000]        <2> 	mov esi, tstack
  5360 00003FD9 8B06                <2> 	mov eax, [esi]
  5361 00003FDB 8B5E04              <2> 	mov ebx, [esi + 4]
  5362 00003FDE 8B4E08              <2> 	mov ecx, [esi + 8]
  5363 00003FE1 8B560C              <2> 	mov edx, [esi + 12]
  5364 00003FE4 8B7E10              <2> 	mov edi, [esi + 16]
  5365 00003FE7 8B7614              <2> 	mov esi, [esi + 20]
  5366 00003FEA C3                  <2> 	ret
  5367                              <2> 	
  5368                              <2> tget1:
  5369 00003FEB 66BA7000            <2> 	mov dx, 0x70
  5370 00003FEF EE                  <2> 	out dx, al
  5371 00003FF0 6642                <2> 	inc dx
  5372 00003FF2 EC                  <2> 	in al, dx
  5373 00003FF3 664A                <2> 	dec dx
  5374 00003FF5 C3                  <2> 	ret
  5375                              <2> 	
  5376                              <2> tput1:
  5377 00003FF6 66C1E904            <2> 	shr cx, 4
  5378 00003FFA B030                <2> 	mov al, 48
  5379 00003FFC 00E8                <2> 	add al, ch
  5380 00003FFE 8806                <2> 	mov [esi], al
  5381 00004000 46                  <2> 	inc esi
  5382 00004001 B030                <2> 	mov al, 48
  5383 00004003 C0E904              <2> 	shr cl, 4
  5384 00004006 00C8                <2> 	add al, cl
  5385 00004008 8806                <2> 	mov [esi], al
  5386 0000400A 81C602000000        <2> 	add esi, 2
  5387 00004010 C3                  <2> 	ret
  5388                              <2> 	
  5389                              <2> timeconvert: ;return time in the RTCtime stuff in ecx
  5390 00004011 31DB                <2> 	xor ebx, ebx
  5391 00004013 31C9                <2> 	xor ecx, ecx
  5392 00004015 31FF                <2> 	xor edi, edi
  5393 00004017 31F6                <2> 	xor esi, esi
  5394                              <2> 	
  5395 00004019 A0[76410000]        <2> 	mov al, [RTCtimeSecond]
  5396 0000401E E87EFFFFFF          <2> 	call converttohex
  5397 00004023 88E1                <2> 	mov cl, ah
  5398                              <2> 	
  5399 00004025 A0[77410000]        <2> 	mov al, [RTCtimeMinute]
  5400 0000402A E872FFFFFF          <2> 	call converttohex
  5401 0000402F 88E3                <2> 	mov bl, ah
  5402 00004031 B83C000000          <2> 	mov eax, 60
  5403 00004036 31D2                <2> 	xor edx, edx
  5404 00004038 F7E3                <2> 	mul ebx
  5405 0000403A 01C1                <2> 	add ecx, eax
  5406                              <2> 	
  5407 0000403C A0[78410000]        <2> 	mov al, [RTCtimeHour]
  5408 00004041 E85BFFFFFF          <2> 	call converttohex
  5409 00004046 88E3                <2> 	mov bl, ah
  5410 00004048 B8100E0000          <2> 	mov eax, 3600
  5411 0000404D 31D2                <2> 	xor edx, edx
  5412 0000404F F7E3                <2> 	mul ebx
  5413 00004051 01C1                <2> 	add ecx, eax
  5414                              <2> 		
  5415 00004053 31C0                <2> 	xor eax, eax
  5416 00004055 A0[7B410000]        <2> 	mov al, [RTCtimeYear]
  5417 0000405A E842FFFFFF          <2> 	call converttohex
  5418 0000405F 6689C6              <2> 	mov si, ax
  5419 00004062 66C1EE08            <2> 	shr si, 8
  5420 00004066 6681FE4600          <2> 	cmp si, 70
  5421 0000406B 7705                <2> 	ja .no100
  5422 0000406D 6681C66400          <2> 	add si, 100
  5423                              <2> .no100:
  5424 00004072 6681C66C07          <2> 	add si, 1900
  5425                              <2> 	
  5426 00004077 BB[50410000]        <2> 	mov ebx, .month
  5427 0000407C A0[79410000]        <2> 	mov al, [RTCtimeDay]
  5428 00004081 E81BFFFFFF          <2> 	call converttohex
  5429 00004086 88E0                <2> 	mov al, ah
  5430 00004088 FEC8                <2> 	dec al
  5431 0000408A 31D2                <2> 	xor edx, edx
  5432 0000408C 88C2                <2> 	mov dl, al
  5433 0000408E A0[7A410000]        <2> 	mov al, [RTCtimeMonth]
  5434 00004093 E809FFFFFF          <2> 	call converttohex
  5435 00004098 88D0                <2> 	mov al, dl
  5436 0000409A 88E2                <2> 	mov dl, ah
  5437 0000409C 30E4                <2> 	xor ah, ah
  5438 0000409E 6689D5              <2> 	mov bp, dx
  5439                              <2> 	
  5440 000040A1 6689F7              <2> 	mov di, si
  5441 000040A4 66C1EF02            <2> 	shr di, 2
  5442 000040A8 66C1E702            <2> 	shl di, 2
  5443 000040AC C605[51410000]1C    <2> 	mov byte [.month + 1], 28
  5444 000040B3 6639F7              <2> 	cmp di, si
  5445 000040B6 7506                <2> 	jne .nofebmod
  5446 000040B8 FE05[51410000]      <2> 	inc byte [.month + 1]
  5447                              <2> .nofebmod:
  5448 000040BE 664D                <2> 	dec bp
  5449 000040C0 6681FD0000          <2> 	cmp bp, 0
  5450 000040C5 740A                <2> 	je .ylp
  5451 000040C7 8A13                <2> 	mov dl, [ebx]
  5452 000040C9 01D0                <2> 	add eax, edx
  5453 000040CB 43                  <2> 	inc ebx
  5454 000040CC E9EDFFFFFF          <2> 	jmp .nofebmod
  5455                              <2> 	
  5456                              <2> .ylp:
  5457 000040D1 6689F7              <2> 	mov di, si
  5458 000040D4 66C1EF02            <2> 	shr di, 2
  5459 000040D8 66C1E702            <2> 	shl di, 2
  5460 000040DC 81C18033E101        <2> 	add ecx, 31536000
  5461 000040E2 6639F7              <2> 	cmp di, si
  5462 000040E5 7506                <2> 	jne .noymod
  5463 000040E7 81C180510100        <2> 	add ecx, 86400
  5464                              <2> .noymod:
  5465 000040ED 664E                <2> 	dec si
  5466 000040EF 6681FEB207          <2> 	cmp si, 1970
  5467 000040F4 77DB                <2> 	ja .ylp
  5468                              <2> 	
  5469 000040F6 BB80510100          <2> 	mov ebx, 86400
  5470 000040FB 31D2                <2> 	xor edx, edx
  5471 000040FD F7E3                <2> 	mul ebx
  5472 000040FF 01C1                <2> 	add ecx, eax
  5473                              <2> 	
  5474 00004101 31DB                <2> 	xor ebx, ebx
  5475 00004103 31D2                <2> 	xor edx, edx
  5476 00004105 B8100E0000          <2> 	mov eax, 3600
  5477 0000410A 8A3D[5C410000]      <2> 	mov bh, [timezoneh]
  5478 00004110 80FF80              <2> 	cmp bh, 128
  5479 00004113 720D                <2> 	jb .posh
  5480 00004115 28FB                <2> 	sub bl, bh
  5481 00004117 30FF                <2> 	xor bh, bh
  5482 00004119 F7E3                <2> 	mul ebx
  5483 0000411B 01C1                <2> 	add ecx, eax
  5484 0000411D E906000000          <2> 	jmp .doneth
  5485                              <2> .posh:
  5486 00004122 86DF                <2> 	xchg bl, bh
  5487 00004124 F7E3                <2> 	mul ebx
  5488 00004126 29C1                <2> 	sub ecx, eax
  5489                              <2> .doneth:
  5490                              <2> 
  5491 00004128 31DB                <2> 	xor ebx, ebx	
  5492 0000412A 31D2                <2> 	xor edx, edx
  5493 0000412C B83C000000          <2> 	mov eax, 60
  5494 00004131 8A3D[5D410000]      <2> 	mov bh, [timezonem]
  5495 00004137 80FF80              <2> 	cmp bh, 128
  5496 0000413A 720D                <2> 	jb .posm
  5497 0000413C 28FB                <2> 	sub bl, bh
  5498 0000413E 30FF                <2> 	xor bh, bh
  5499 00004140 F7E3                <2> 	mul ebx
  5500 00004142 01C1                <2> 	add ecx, eax
  5501 00004144 E906000000          <2> 	jmp .donetm
  5502                              <2> .posm:
  5503 00004149 86DF                <2> 	xchg bl, bh
  5504 0000414B F7E3                <2> 	mul ebx
  5505 0000414D 29C1                <2> 	sub ecx, eax
  5506                              <2> .donetm:
  5507                              <2> 
  5508 0000414F C3                  <2> 	ret
  5509                              <2> 	
  5510                              <2> 
  5511 00004150 1F1C1F1E1F1E1F1F1E- <2> .month db 31,28,31,30,31,30,31,31,30,31,30,31
  5512 00004159 1F1E1F              <2>
  5513                              <2> 
  5514 0000415C FA                  <2> 	timezoneh db -6
  5515 0000415D 00                  <2> 	timezonem db 0
  5516 0000415E 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5517 00004167 000000000000000000- <2>
  5518 00004170 000000000000        <2>
  5519 00004176 00                  <2> 	RTCtimeSecond db 0
  5520 00004177 00                  <2> 	RTCtimeMinute db 0
  5521 00004178 00                  <2> 	RTCtimeHour db 0
  5522 00004179 00                  <2> 	RTCtimeDay db 0
  5523 0000417A 00                  <2> 	RTCtimeMonth db 0
  5524 0000417B 00                  <2> 	RTCtimeYear db 0
  5525 0000417C 00                  <2> 	dayhex db 0
  5526 0000417D 00                  <2> 	monthhex db 0
  5527 0000417E 00                  <2> 	yearhex db 0
  5528 0000417F 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  5529 00004188 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  5530 00004191 302000              <2>
  5531                              <2> 	oldcentury:	;from 1700 to 1900
  5532 00004194 040200              <2> 	db 4,2,0
  5533                              <2> 	century:	;from 2000 to 2500
  5534 00004197 060402000604        <2> 	db 6,4,2,0,6,4
  5535                              <2> 	month:
  5536 0000419D 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5537 000041A6 000305              <2>
  5538                              <2> 	day:
  5539 000041A9 [C5410000]          <2> 	dd sunday
  5540 000041AD [CD410000]          <2> 	dd monday
  5541 000041B1 [D5410000]          <2> 	dd tuesday
  5542 000041B5 [DE410000]          <2> 	dd wednesday
  5543 000041B9 [E9410000]          <2> 	dd thursday
  5544 000041BD [F3410000]          <2> 	dd friday
  5545 000041C1 [FB410000]          <2> 	dd saturday
  5546                              <2> sunday:
  5547 000041C5 53756E6461790A00    <2> 	db "Sunday",10,0
  5548                              <2> monday:
  5549 000041CD 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5550                              <2> tuesday:
  5551 000041D5 547565736461790A00  <2> 	db "Tuesday",10,0
  5552                              <2> wednesday:
  5553 000041DE 5765646E6573646179- <2> 	db "Wednesday",10,0
  5554 000041E7 0A00                <2>
  5555                              <2> thursday:
  5556 000041E9 54687572736461790A- <2> 	db "Thursday",10,0
  5557 000041F2 00                  <2>
  5558                              <2> friday:
  5559 000041F3 4672696461790A00    <2> 	db "Friday",10,0
  5560                              <2> saturday:
  5561 000041FB 53617475726461790A- <2> 	db "Saturday",10,0
  5562 00004204 00                  <2>
  5563                              <1> %ifdef network.included
  5564                              <1> 	%include 'source/programs/dhcp.asm'
  5565 00004205 FF2C6468637000      <2> db 255,44,"dhcp",0
  5566                              <2> dhcp:
  5567 0000420C BE[CC420000]        <2> 	mov esi, .dhcp.mac
  5568 00004211 BB[AC430000]        <2> 	mov ebx, .dhcp.option.mac
  5569 00004216 BF[8C420000]        <2> 	mov edi, .mac
  5570 0000421B 31C9                <2> 	xor ecx, ecx
  5571 0000421D 66890D[9E420000]    <2> 	mov [.ip.checksum], cx
  5572 00004224 66890D[AE420000]    <2> 	mov [.udp.checksum], cx
  5573 0000422B 8B0D[72620000]      <2> 	mov ecx, [sysmac]
  5574 00004231 890B                <2> 	mov [ebx], ecx
  5575 00004233 890F                <2> 	mov [edi], ecx
  5576 00004235 890E                <2> 	mov [esi], ecx
  5577 00004237 668B0D[76620000]    <2> 	mov cx, [sysmac + 4]
  5578 0000423E 66894B04            <2> 	mov [ebx + 4], cx
  5579 00004242 66894E04            <2> 	mov [esi + 4], cx
  5580 00004246 66894F04            <2> 	mov [edi + 4], cx
  5581 0000424A BF[94420000]        <2> 	mov edi, .ip.header
  5582 0000424F BE[A8420000]        <2> 	mov esi, .ip.headerend
  5583 00004254 E8101F0000          <2> 	call getchecksum
  5584 00004259 66890D[9E420000]    <2> 	mov [.ip.checksum], cx
  5585 00004260 BF[A8420000]        <2> 	mov edi, .udp.header
  5586 00004265 BE[C3430000]        <2> 	mov esi, .udp.end
  5587 0000426A E8FA1E0000          <2> 	call getchecksum
  5588 0000426F 66890D[AE420000]    <2> 	mov [.udp.checksum], cx
  5589 00004276 BF[86420000]        <2> 	mov edi, .frame
  5590 0000427B BE[C3430000]        <2> 	mov esi, .udp.end
  5591 00004280 E8DA1E0000          <2> 	call sendpacket
  5592 00004285 C3                  <2> 	ret
  5593                              <2> .frame:
  5594 00004286 FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5595 0000428C 000000000000        <2> 	.mac db 0,0,0,0,0,0
  5596 00004292 0800                <2> 	db 8,0
  5597                              <2> .ip.header:
  5598 00004294 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  5599 00004295 00                  <2> 	db 0
  5600 00004296 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header)
  5601 00004298 0000                <2> 	dw 0
  5602 0000429A 0000                <2> 	dw 0
  5603 0000429C 80                  <2> 	db 0x80
  5604 0000429D 11                  <2> 	db 17
  5605 0000429E 0000                <2> .ip.checksum dw 0
  5606 000042A0 00000000            <2> 	db 0,0,0,0
  5607 000042A4 FFFFFFFF            <2> 	db 255,255,255,255	
  5608                              <2> .ip.headerend:
  5609                              <2> .udp.header:
  5610 000042A8 0044                <2> 	db 0,68	;source port
  5611 000042AA 0043                <2> 	db 0,67 ;destination port
  5612 000042AC 011B                <2> 	db (.udp.end - .udp.header)/256, (.udp.end - .udp.header)
  5613 000042AE 0000                <2> .udp.checksum dw 0
  5614                              <2> .udp.headerend:
  5615                              <2> .dhcp.data:
  5616 000042B0 01                  <2> 	db 1	;message type
  5617 000042B1 01                  <2> 	db 1	;hardware type
  5618 000042B2 06                  <2> 	db 6	;hardware address length
  5619 000042B3 00                  <2> 	db 0	;hops
  5620 000042B4 EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  5621 000042B8 0000                <2> 	db 0,0	;seconds elapsed
  5622 000042BA 0000                <2> 	db 0,0	;flags
  5623 000042BC 00000000            <2> 	db 0,0,0,0	;client ip address
  5624 000042C0 00000000            <2> 	db 0,0,0,0	;your ip address
  5625 000042C4 00000000            <2> 	db 0,0,0,0	;server ip address
  5626 000042C8 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  5627 000042CC 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  5628 000042D2 00<rept>            <2> 	times 10 db 0	;padding
  5629 000042DC 00<rept>            <2> 	times 64 db 0	;server host name
  5630 0000431C 00<rept>            <2> 	times 128 db 0	;boot file name
  5631 0000439C 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  5632                              <2> .dhcp.option.type:
  5633 000043A0 350103              <2> 	db 53,1,3	;DHCP Request
  5634 000043A3 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  5635 000043A9 3D07                <2> 	db 61,7 ;client id(mac)
  5636 000043AB 01                  <2> 	db 1	;Type=Ethernet
  5637 000043AC 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  5638 000043B2 0C08                <2> 	db 12,8 ;host name
  5639 000043B4 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  5640 000043BC 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  5641 000043C2 FF                  <2> 	db 0xFF	;end DHCP options
  5642                              <2> .dhcp.end:
  5643                              <2> .udp.end:
  5644                              <2> 	
  5645                              <1> %endif
  5646                              <1> %ifdef disk.none
  5647                              <1> %else
  5648                              <1> 	%include 'source/programs/dos.asm'
  5649 000043C3 FF2C646F7300        <2> db 255,44,"dos",0
  5650                              <2> dosrunner:
  5651 000043C9 8925[088C0300]      <2> 	mov [previousstack], esp
  5652 000043CF 8B3D[3E2D0000]      <2> 	mov edi, [currentcommandloc]
  5653 000043D5 81C704000000        <2> 	add edi, 4
  5654 000043DB BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5655 000043E0 E869180000          <2> 	call loadfile
  5656 000043E5 8B3D[3E2D0000]      <2> 	mov edi, [currentcommandloc]
  5657 000043EB 81C704000000        <2> 	add edi, 4
  5658 000043F1 81FA94010000        <2> 	cmp edx, 404
  5659 000043F7 0F845E000000        <2> 	je near .noprogfound
  5660 000043FD BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5661 00004402 31C9                <2> 	xor ecx, ecx
  5662                              <2> .findparams:
  5663 00004404 47                  <2> 	inc edi
  5664 00004405 8A07                <2> 	mov al, [edi]
  5665 00004407 3C20                <2> 	cmp al, " "
  5666 00004409 75F9                <2> 	jne .findparams
  5667                              <2> .copyparams:
  5668 0000440B 8A07                <2> 	mov al, [edi]
  5669 0000440D 8803                <2> 	mov [ebx], al
  5670 0000440F 43                  <2> 	inc ebx
  5671 00004410 47                  <2> 	inc edi
  5672 00004411 41                  <2> 	inc ecx
  5673 00004412 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5674 00004418 7304                <2> 	jae .nomoreparams
  5675 0000441A 3C00                <2> 	cmp al, 0
  5676 0000441C 75ED                <2> 	jne .copyparams
  5677                              <2> .nomoreparams:
  5678 0000441E 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5679 00004424 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5680 00004428 8ED8                <2> 	mov ds, ax
  5681 0000442A 8EC0                <2> 	mov es, ax
  5682 0000442C 8EE0                <2> 	mov fs, ax
  5683 0000442E 8EE8                <2> 	mov gs, ax
  5684 00004430 31C0                <2> 	xor eax, eax
  5685 00004432 31DB                <2> 	xor ebx, ebx
  5686 00004434 31C9                <2> 	xor ecx, ecx
  5687 00004436 31D2                <2> 	xor edx, edx
  5688 00004438 31FF                <2> 	xor edi, edi
  5689 0000443A 31F6                <2> 	xor esi, esi
  5690 0000443C 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5691 00004443 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5692 00004447 6689DA              <2> 	mov dx, bx
  5693 0000444A 8EC3                <2> 	mov es, bx
  5694 0000444C 8EE3                <2> 	mov fs, bx
  5695 0000444E 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5696 00004452 8EEB                <2> 	mov gs, bx
  5697 00004454 8B25[088C0300]      <2> 	mov esp, [previousstack]
  5698 0000445A C3                  <2> 	ret
  5699                              <2> .noprogfound:
  5700 0000445B BE[80620000]        <2> 	mov esi, notfound1
  5701 00004460 E899D7FFFF          <2> 	call print
  5702 00004465 8B35[3E2D0000]      <2> 	mov esi, [currentcommandloc]
  5703 0000446B 81C604000000        <2> 	add esi, 4
  5704 00004471 E888D7FFFF          <2> 	call print
  5705 00004476 BE[88620000]        <2> 	mov esi, notfound2
  5706 0000447B E87ED7FFFF          <2> 	call print
  5707 00004480 C3                  <2> 	ret
  5708                              <2> 	
  5709                              <1> %endif
  5710                              <1> %include 'source/programs/dump.asm'
  5711 00004481 FF2C64756D7000      <2> db 255,44,"dump",0
  5712 00004488 8B35[3E2D0000]      <2> 	mov esi, [currentcommandloc]
  5713 0000448E 81C605000000        <2> 	add esi, 5
  5714 00004494 31C9                <2> 	xor ecx, ecx
  5715 00004496 66B83078            <2> 	mov ax, "0x"
  5716 0000449A 663906              <2> 	cmp [esi], ax
  5717 0000449D 740A                <2> 	je dumphexin
  5718 0000449F E87CECFFFF          <2> 	call cnvrttxt
  5719 000044A4 E910000000          <2> 	jmp dumphexnow
  5720                              <2> dumphexin:
  5721 000044A9 81C602000000        <2> 	add esi, 2
  5722 000044AF E820ECFFFF          <2> 	call cnvrthextxt
  5723 000044B4 E900000000          <2> 	jmp dumphexnow
  5724                              <2> dumphexnow:
  5725 000044B9 89CF                <2> 	mov edi, ecx
  5726 000044BB 89FE                <2> 	mov esi, edi
  5727 000044BD 81C680030000        <2> 	add esi, 896
  5728                              <2> dumphexloop:
  5729 000044C3 8B0F                <2> 	mov ecx, [edi]
  5730 000044C5 C605[722F0000]05    <2> 	mov byte [firsthexshown],5
  5731 000044CC E8B6EAFFFF          <2> 	call showhex
  5732 000044D1 81C704000000        <2> 	add edi, 4
  5733 000044D7 39F7                <2> 	cmp edi, esi
  5734 000044D9 72E8                <2> 	jb dumphexloop
  5735 000044DB E853E1FFFF          <2> 	call termcopy
  5736 000044E0 C3                  <2> 	ret 
  5737                              <1> %include 'source/programs/echo.asm'
  5738                              <2> 
  5739 000044E1 FF2C6563686F00      <2> db 255,44,"echo",0
  5740                              <2> 	echoprog:
  5741 000044E8 8B35[3E2D0000]      <2> 		mov esi, [currentcommandloc]
  5742 000044EE 81C605000000        <2> 		add esi, 5
  5743 000044F4 8A06                <2> 		mov al, [esi]
  5744 000044F6 E8DFD6FFFF          <2> 		call printquiet
  5745 000044FB E8F9D6FFFF          <2> 		call printline
  5746 00004500 C3                  <2> 		ret
  5747 00004501 BB[888E0300]        <2> 	echovr:	mov ebx, variables
  5748 00004506 BF06000000          <2> 		mov edi, 6
  5749 0000450B E83F000000          <2> 		call nxtvrech
  5750 00004510 E95A000000          <2> 		jmp prntvr2
  5751 00004515 B13D                <2> 	echvar:	mov cl, '='
  5752 00004517 43                  <2> 		inc ebx
  5753 00004518 8A03                <2> 		mov al, [ebx]
  5754 0000451A 3C00                <2> 		cmp al, 0
  5755 0000451C 7431                <2> 		je nxtvrech
  5756 0000451E 3C3D                <2> 		cmp al, '='
  5757 00004520 7422                <2> 		je nxtvrechb1
  5758 00004522 8B35[3E2D0000]      <2> 		mov esi, [currentcommandloc]
  5759 00004528 01FE                <2> 		add esi, edi
  5760 0000452A E854E8FFFF          <2> 		call cndtest
  5761 0000452F 3C02                <2> 		cmp al, 2
  5762 00004531 7438                <2> 		je prntvr
  5763 00004533 3C01                <2> 		cmp al, 1
  5764 00004535 7434                <2> 		je prntvr
  5765 00004537 8B35[3E2D0000]      <2> 		mov esi, [currentcommandloc]
  5766 0000453D 01FE                <2> 		add esi, edi
  5767 0000453F E90B000000          <2> 		jmp nxtvrech
  5768                              <2> 	nxtvrechb1:
  5769 00004544 81EB02000000        <2> 		sub ebx, 2
  5770 0000454A E9C6FFFFFF          <2> 		jmp echvar
  5771 0000454F 8A03                <2> 	nxtvrech: mov al, [ebx]
  5772 00004551 3C05                <2> 		cmp al, 5
  5773 00004553 740A                <2> 		je nxtvrec2
  5774 00004555 43                  <2> 		inc ebx
  5775 00004556 81FB[889E0300]      <2> 		cmp ebx, varend
  5776 0000455C 72F1                <2> 		jb nxtvrech
  5777 0000455E C3                  <2> 		ret
  5778 0000455F 43                  <2> 	nxtvrec2: inc ebx
  5779 00004560 8A03                <2> 		mov al, [ebx]
  5780 00004562 3C04                <2> 		cmp al, 4
  5781 00004564 74AF                <2> 		je echvar
  5782 00004566 E9E4FFFFFF          <2> 		jmp nxtvrech
  5783 0000456B 43                  <2> 	prntvr: inc ebx
  5784 0000456C 89DE                <2> 		mov esi, ebx
  5785 0000456E C3                  <2> 		ret
  5786 0000456F E88AD6FFFF          <2> 	prntvr2: call print
  5787 00004574 BE[B9620000]        <2> 		mov esi, line
  5788 00004579 E880D6FFFF          <2> 		call print
  5789 0000457E C3                  <2> 		ret 
  5790                              <1> %include 'source/programs/else.asm'
  5791 0000457F FF2C656C736500      <2> 	db 255,44,"else",0
  5792 00004586 31C0                <2> elsecmd:	xor eax, eax
  5793 00004588 3805[828E0300]      <2> 	cmp [BATCHISON], al
  5794 0000458E 0F8427F3FFFF        <2> 	je near notbatch
  5795 00004594 A0[198E0300]        <2> 	mov al, [IFON]
  5796 00004599 BE[1A8E0300]        <2> 	mov esi, IFTRUE
  5797 0000459E 01C6                <2> 	add esi, eax
  5798 000045A0 8A06                <2> 	mov al, [esi]
  5799 000045A2 3401                <2> 	xor al, 1
  5800 000045A4 8806                <2> 	mov [esi], al
  5801 000045A6 C3                  <2> 	ret 
  5802                              <1> %include 'source/programs/exit.asm'
  5803 000045A7 FF2C6578697400      <2> db 255,44,"exit",0
  5804 000045AE 803D[188E0300]01    <2> 	cmp byte [ranboot], 1
  5805 000045B5 0F844CE4FFFF        <2> 	je near returnfromexp
  5806 000045BB E92BE3FFFF          <2> 	jmp nobootfile
  5807                              <1> %include 'source/programs/fi.asm'
  5808 000045C0 FF2C666900          <2> 	db 255,44,"fi",0
  5809 000045C5 30C0                <2> 	xor al, al
  5810 000045C7 3805[828E0300]      <2> 	cmp [BATCHISON], al
  5811 000045CD 0F84E8F2FFFF        <2> 	je near notbatch
  5812 000045D3 B001                <2> fi:	mov al, 1
  5813 000045D5 2805[198E0300]      <2> 	sub [IFON],al
  5814 000045DB C3                  <2> 	ret 
  5815                              <1> %ifdef gui.included
  5816                              <1> 	%include 'source/programs/gui.asm'
  5817                              <1> %endif
  5818                              <1> %include 'source/programs/help.asm'
  5819 000045DC FF2C68656C7000      <2> db 255,44,"help",0
  5820                              <2> lscmd:	
  5821 000045E3 B00D                <2> 		mov al, 13
  5822 000045E5 E8BDDCFFFF          <2> 		call prcharq
  5823 000045EA BE[E6310000]        <2> 		mov esi, progstart
  5824 000045EF BB[964F0000]        <2> 		mov ebx, progend
  5825 000045F4 BE[08880300]        <2> dir:	mov esi, fileindex
  5826 000045F9 8A06                <2> 	dirnxt:	mov al, [esi]
  5827 000045FB 30E4                <2> 		xor ah, ah
  5828 000045FD 3CFF                <2> 		cmp al, 255
  5829 000045FF 7418                <2> 		je dirfnd
  5830 00004601 46                  <2> 		inc esi
  5831 00004602 81FE[088C0300]      <2> 		cmp esi,  fileindexend
  5832 00004608 7342                <2> 		jae dirdn
  5833 0000460A E9EAFFFFFF          <2> 		jmp dirnxt
  5834                              <2> 	dirfnd3:
  5835 0000460F 46                  <2> 		inc esi
  5836 00004610 81FE[088C0300]      <2> 		cmp esi, fileindexend
  5837 00004616 76E1                <2> 		jbe dirnxt
  5838 00004618 4E                  <2> 		dec esi
  5839 00004619 46                  <2> 	dirfnd:	inc esi
  5840 0000461A 8A06                <2> 		mov al, [esi]
  5841 0000461C 30E4                <2> 		xor ah, ah
  5842 0000461E 3C2C                <2> 		cmp al, 44
  5843 00004620 740E                <2> 		je dirfnd2
  5844 00004622 46                  <2> 		inc esi
  5845 00004623 81FE[088C0300]      <2> 		cmp esi,  fileindexend
  5846 00004629 7321                <2> 		jae dirdn
  5847 0000462B E9C9FFFFFF          <2> 		jmp dirnxt
  5848 00004630 46                  <2> 	dirfnd2: inc esi
  5849 00004631 E8A4D5FFFF          <2> 		call printquiet
  5850 00004636 56                  <2> 		push esi
  5851 00004637 B009                <2> 		mov al, 9
  5852 00004639 E869DCFFFF          <2> 		call prcharq
  5853 0000463E 5E                  <2> 		pop esi
  5854 0000463F 81FE[088C0300]      <2> 		cmp esi,  fileindexend
  5855 00004645 7305                <2> 		jae dirdn
  5856 00004647 E9ADFFFFFF          <2> 		jmp dirnxt
  5857 0000464C BE[B9620000]        <2> 	dirdn:	mov esi, line
  5858 00004651 E8A8D5FFFF          <2> 			call print
  5859 00004656 C3                  <2> 			ret
  5860 00004657 00                  <2> currentdir db 0
  5861                              <1> %include 'source/programs/if.asm'
  5862 00004658 FF2C696600          <2> 	db 255,44,"if",0
  5863 0000465D 30C0                <2> ifcmd:	xor al, al
  5864 0000465F 3805[828E0300]      <2> 	cmp [BATCHISON], al
  5865 00004665 0F8450F2FFFF        <2> 	je near notbatch
  5866 0000466B 8B1D[3E2D0000]      <2> 	mov ebx, [currentcommandloc]
  5867 00004671 81C303000000        <2> 	add ebx, 3
  5868 00004677 89DE                <2> 	mov esi, ebx
  5869 00004679 8A06                <2> chkeqsn: mov al, [esi]
  5870 0000467B 3C00                <2> 	cmp al, 0
  5871 0000467D 0F8438F2FFFF        <2> 	je near notbatch
  5872 00004683 3C3D                <2> 	cmp al, '='
  5873 00004685 0F8406000000        <2> 	je near chkeqdn
  5874 0000468B 46                  <2> 	inc esi
  5875 0000468C E9E8FFFFFF          <2> 	jmp chkeqsn
  5876 00004691 B000                <2> chkeqdn: mov al, 0 
  5877 00004693 8806                <2> 	mov [esi], al
  5878 00004695 46                  <2> 	inc esi
  5879 00004696 E8A7E6FFFF          <2> 	call tester
  5880 0000469B 3C01                <2> 	cmp al, 1
  5881 0000469D 0F8405000000        <2> 	je near trueif
  5882 000046A3 E91C000000          <2> 	jmp falseif
  5883 000046A8 31C0                <2> trueif:	xor eax, eax
  5884 000046AA A0[198E0300]        <2> 	mov al, [IFON]
  5885 000046AF FEC0                <2> 	inc al
  5886 000046B1 A2[198E0300]        <2> 	mov [IFON], al
  5887 000046B6 30E4                <2> 	xor ah, ah
  5888 000046B8 BE[1A8E0300]        <2> 	mov esi, IFTRUE
  5889 000046BD 01C6                <2> 	add esi, eax
  5890 000046BF B401                <2> 	mov ah, 1
  5891 000046C1 8826                <2> 	mov [esi], ah
  5892 000046C3 C3                  <2> 	ret 
  5893 000046C4 31C0                <2> falseif: xor eax, eax
  5894 000046C6 A0[198E0300]        <2> 	mov al, [IFON]
  5895 000046CB FEC0                <2> 	inc al
  5896 000046CD A2[198E0300]        <2> 	mov [IFON], al
  5897 000046D2 30E4                <2> 	xor ah, ah
  5898 000046D4 BE[1A8E0300]        <2> 	mov esi, IFTRUE
  5899 000046D9 01C6                <2> 	add esi, eax
  5900 000046DB 30E4                <2> 	xor ah, ah
  5901 000046DD 8826                <2> 	mov [esi], ah
  5902 000046DF C3                  <2> 	ret 
  5903                              <1> %ifdef network.included
  5904                              <1> 	%include 'source/programs/ipconfig.asm'
  5905 000046E0 FF2C6970636F6E6669- <2> db 255,44,"ipconfig",0
  5906 000046E9 6700                <2>
  5907                              <2> ifconfig:
  5908 000046EB 8B35[3E2D0000]      <2> 	mov esi, [currentcommandloc]
  5909 000046F1 81C609000000        <2> 	add esi, 9
  5910 000046F7 803E00              <2> 	cmp byte [esi], 0
  5911 000046FA 740B                <2> 	je .noip
  5912 000046FC E8901A0000          <2> 	call strtoip
  5913 00004701 890D[6E620000]      <2> 	mov [sysip], ecx
  5914                              <2> .noip:
  5915                              <2> %ifdef ne2000.included
  5916 00004707 803D[25610000]01    <2> 	cmp byte [ne2000.nicconfig], 1
  5917 0000470E 7519                <2> 	jne .none2000
  5918 00004710 BE[26610000]        <2> 	mov esi, ne2000.name
  5919 00004715 E8E4D4FFFF          <2> 	call print
  5920 0000471A B9[48610000]        <2> 	mov ecx, ne2000.mac
  5921 0000471F E8E31A0000          <2> 	call showmac
  5922 00004724 E8D0D4FFFF          <2> 	call printline
  5923                              <2> .none2000:
  5924                              <2> %endif
  5925                              <2> %ifdef rtl8139.included
  5926                              <2> 	cmp byte [rtl8139.nicconfig], 1
  5927                              <2> 	jne .nortl8139
  5928                              <2> 	mov esi, rtl8139.name
  5929                              <2> 	call print
  5930                              <2> 	mov ecx, rtl8139.mac
  5931                              <2> 	call showmac
  5932                              <2> 	call printline
  5933                              <2> .nortl8139:
  5934                              <2> %endif
  5935                              <2> %ifdef rtl8169.included
  5936                              <2> 	cmp byte [rtl8169.nicconfig], 1
  5937                              <2> 	jne .nortl8169
  5938                              <2> 	mov esi, rtl8169.name
  5939                              <2> 	call print
  5940                              <2> 	mov ecx, rtl8169.mac
  5941                              <2> 	call showmac
  5942                              <2> 	call printline
  5943                              <2> .nortl8169:
  5944                              <2> %endif
  5945                              <2> %ifdef i8254x.included
  5946                              <2> 	cmp byte [i8254x.nicconfig], 1
  5947                              <2> 	jne .noi8254x
  5948                              <2> 	mov esi, i8254x.name
  5949                              <2> 	call print
  5950                              <2> 	mov ecx, i8254x.mac
  5951                              <2> 	call showmac
  5952                              <2> 	call printline
  5953                              <2> .noi8254x:
  5954                              <2> %endif
  5955 00004729 8B0D[6E620000]      <2> 	mov ecx, [sysip]
  5956 0000472F E8A31A0000          <2> 	call showip
  5957 00004734 E8C0D4FFFF          <2> 	call printline
  5958 00004739 C3                  <2> 	ret
  5959                              <2> 	
  5960                              <1> %endif
  5961                              <1> %include 'source/programs/keycode.asm'
  5962 0000473A FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5963 00004743 00                  <2>
  5964                              <2> keycode:
  5965 00004744 66C705[78220000]00- <2> 	mov word [trans], 0
  5966 0000474C 00                  <2>
  5967 0000474D C605[135E0000]00    <2> 	mov byte [threadson], 0
  5968                              <2> %ifdef io.serial
  5969                              <2> .noserial:
  5970                              <2> 	hlt
  5971                              <2> 	mov dx, [serial.address]
  5972                              <2> 	in al, dx
  5973                              <2> 	cmp al, 0
  5974                              <2> 	je .noserial
  5975                              <2> 	mov cl, al
  5976                              <2> 	call showhexsmall
  5977                              <2> 	cmp al, 0x1B
  5978                              <2> 	jne .noserial
  5979                              <2> 	in al, dx
  5980                              <2> 	mov cl, al
  5981                              <2> 	call showhexsmall
  5982                              <2> 	cmp cl, 0x5B
  5983                              <2> 	je .noserial
  5984                              <2> 	ret
  5985                              <2> %else
  5986 00004754 E8500B0000          <2> 	call getkey
  5987 00004759 31C0                <2> 	xor eax, eax
  5988 0000475B 31C9                <2> 	xor ecx, ecx
  5989 0000475D 8A0D[87520000]      <2> 	mov cl, [specialkey]
  5990 00004763 80F900              <2> 	cmp cl, 0
  5991 00004766 0F8405000000        <2> 	je near .nospecialkeycode
  5992 0000476C E802E8FFFF          <2> 	call showhexsmall
  5993                              <2> .nospecialkeycode:
  5994 00004771 668B0D[76220000]    <2> 	mov cx, [lastkey + 2]
  5995 00004778 E8F6E7FFFF          <2> 	call showhexsmall
  5996 0000477D 80F901              <2> 	cmp cl, 1
  5997 00004780 75C2                <2> 	jne keycode
  5998 00004782 C3                  <2> 	ret
  5999                              <2> %endif
  6000                              <1> %ifdef gui.included
  6001                              <1> 	%include 'source/programs/line.asm'
  6002                              <1> %endif
  6003                              <1> %include 'source/programs/logout.asm'
  6004 00004783 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  6005 0000478C E916E1FFFF          <2> 	jmp os
  6006                              <1> %include 'source/programs/loop.asm'
  6007 00004791 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  6008 00004798 803D[838E0300]00    <2> 	cmp byte [LOOPON], 0
  6009 0000479F 0F8501000000        <2> 	jne near filoop
  6010 000047A5 C3                  <2> 	ret
  6011 000047A6 8B35[848E0300]      <2> filoop: mov esi, [LOOPPOS]
  6012 000047AC FE0D[198E0300]      <2> 	dec byte [IFON]
  6013 000047B2 C605[838E0300]00    <2> 	mov byte [LOOPON], 0
  6014 000047B9 8935[7E8E0300]      <2> 	mov [BATCHPOS], esi
  6015 000047BF 8935[E0370000]      <2> 	mov [batchedi], esi
  6016 000047C5 C3                  <2> 	ret 
  6017                              <1> %ifdef disk.none
  6018                              <1> %else
  6019                              <1> 	%include 'source/programs/ls.asm'
  6020 000047C6 FF2C6C7300          <2> db 255,44,"ls",0
  6021 000047CB BE[38650300]        <2> 		mov esi, diskfileindex
  6022                              <2> 	diskindexdir:
  6023 000047D0 803E5F              <2> 		cmp byte [esi], '_'
  6024 000047D3 7440                <2> 		je nextdiskindexdir
  6025 000047D5 E800D4FFFF          <2> 		call printquiet
  6026 000047DA 56                  <2> 		push esi
  6027 000047DB BE[35480000]        <2> 		mov esi, disktab
  6028 000047E0 E8F5D3FFFF          <2> 		call printquiet
  6029 000047E5 5E                  <2> 		pop esi
  6030 000047E6 8B4E05              <2> 		mov ecx, [esi + 5]
  6031 000047E9 C605[722F0000]05    <2> 		mov byte [firsthexshown], 5
  6032 000047F0 E84DE8FFFF          <2> 		call showdec
  6033 000047F5 56                  <2> 		push esi
  6034 000047F6 BE[B9620000]        <2> 		mov esi, line
  6035 000047FB E8DAD3FFFF          <2> 		call printquiet
  6036 00004800 5E                  <2> 		pop esi
  6037 00004801 81C609000000        <2> 		add esi, 9
  6038 00004807 81FE[1A660300]      <2> 		cmp esi, enddiskfileindex
  6039 0000480D 72C1                <2> 		jb diskindexdir
  6040 0000480F E81FDEFFFF          <2> 		call termcopy
  6041 00004814 C3                  <2> 		ret
  6042                              <2> 	nextdiskindexdir:
  6043 00004815 46                  <2> 		inc esi
  6044 00004816 803E00              <2> 		cmp byte [esi], 0
  6045 00004819 75FA                <2> 		jne nextdiskindexdir
  6046 0000481B 81C609000000        <2> 		add esi, 9
  6047 00004821 81FE[1A660300]      <2> 		cmp esi, enddiskfileindex
  6048 00004827 72A7                <2> 		jb diskindexdir
  6049 00004829 E805DEFFFF          <2> 		call termcopy
  6050 0000482E C3                  <2> 		ret
  6051                              <2> 		
  6052 0000482F 4469736B2000        <2> 		diskmsg db "Disk ",0
  6053 00004835 0D09090900          <2> 		disktab db 13,9,9,9,0
  6054                              <1> %endif
  6055                              <1> %include 'source/programs/memory.asm'
  6056 0000483A FF2C6D656D6F727900  <2> db 255,44,"memory",0
  6057 00004843 BE[F4620000]        <2> 	mov esi, memlistbuf
  6058 00004848 31FF                <2> 	xor edi, edi
  6059 0000484A 668B3D[34650000]    <2> 	mov di, [memlistend]
  6060 00004851 01F7                <2> 	add edi, esi
  6061                              <2> printmemmap:
  6062 00004853 8B0E                <2> 	mov ecx, [esi]
  6063 00004855 E82DE7FFFF          <2> 	call showhex
  6064 0000485A 81C608000000        <2> 	add esi, 8
  6065 00004860 8B0E                <2> 	mov ecx, [esi]
  6066 00004862 E820E7FFFF          <2> 	call showhex
  6067 00004867 81C608000000        <2> 	add esi, 8
  6068 0000486D 8B0E                <2> 	mov ecx, [esi]
  6069 0000486F E813E7FFFF          <2> 	call showhex
  6070 00004874 81C608000000        <2> 	add esi, 8
  6071 0000487A 57                  <2> 	push edi
  6072 0000487B 56                  <2> 	push esi
  6073 0000487C E878D3FFFF          <2> 	call printline
  6074 00004881 5E                  <2> 	pop esi
  6075 00004882 5F                  <2> 	pop edi
  6076 00004883 39FE                <2> 	cmp esi, edi
  6077 00004885 72CC                <2> 	jb printmemmap
  6078 00004887 C3                  <2> 	ret
  6079                              <2> 	
  6080                              <1> %include 'source/programs/pci.asm'
  6081 00004888 FF2C70636900        <2> db 255,44,"pci",0
  6082 0000488E E886100000          <2> 	call pcidump
  6083 00004893 C3                  <2> 	ret 
  6084                              <1> %ifdef network.included
  6085                              <1> 	%include 'source/programs/ping.asm'
  6086 00004894 FF2C70696E6700      <2> db 255,44,"ping",0
  6087                              <2> ping:
  6088 0000489B 8B35[3E2D0000]      <2> 	mov esi, [currentcommandloc]
  6089 000048A1 81C605000000        <2> 	add esi, 5
  6090 000048A7 E8E5180000          <2> 	call strtoip
  6091 000048AC 890D[32490000]      <2> 	mov [.destip], ecx
  6092 000048B2 E820190000          <2> 	call showip
  6093 000048B7 8B0D[6E620000]      <2> 	mov ecx, [sysip]
  6094 000048BD 890D[2E490000]      <2> 	mov [.sourceip]. ecx
  6095 000048C3 31C0                <2> 	xor eax, eax
  6096 000048C5 31DB                <2> 	xor ebx, ebx
  6097 000048C7 66A3[2C490000]      <2> 	mov [.checksum], ax
  6098 000048CD 66A3[38490000]      <2> 	mov [.icmpchecksum], ax
  6099 000048D3 BF[22490000]        <2> 	mov edi, .header
  6100 000048D8 BE[36490000]        <2> 	mov esi, .headerend
  6101 000048DD E887180000          <2> 	call getchecksum
  6102 000048E2 66890D[2C490000]    <2> 	mov [.checksum], cx
  6103 000048E9 BF[36490000]        <2> 	mov edi, .icmp
  6104 000048EE BE[5E490000]        <2> 	mov esi, .packetend
  6105 000048F3 E871180000          <2> 	call getchecksum
  6106 000048F8 66890D[38490000]    <2> 	mov [.icmpchecksum], cx
  6107 000048FF BF[14490000]        <2> 	mov edi, .packet
  6108 00004904 BE[5E490000]        <2> 	mov esi, .packetend
  6109 00004909 E851180000          <2> 	call sendpacket
  6110 0000490E E8E6D2FFFF          <2> 	call printline
  6111 00004913 C3                  <2> 	ret
  6112                              <2> 	
  6113                              <2> 	
  6114                              <2> 	
  6115                              <2> .packet:
  6116 00004914 FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  6117 0000491A 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  6118 00004920 0800                <2> .ethertype	db 8,0	;ip is 0x800
  6119                              <2> .header:
  6120 00004922 45                  <2> .version	db 0x45
  6121 00004923 00                  <2> .services	db 0
  6122 00004924 003C                <2> .length	db 0,0x3C
  6123 00004926 0000                <2> .id		dw 0
  6124 00004928 00                  <2> .flags	db 0
  6125 00004929 00                  <2> .fragment db 0
  6126 0000492A 80                  <2> .ttl	db 128
  6127 0000492B 01                  <2> .protocol db 1 ;ICMP
  6128 0000492C 0000                <2> .checksum dw 0
  6129 0000492E 00000000            <2> .sourceip dd 0
  6130 00004932 00000000            <2> .destip dd 0
  6131                              <2> .headerend:
  6132                              <2> .icmp:
  6133 00004936 08                  <2> .icmptype db 8 ;Ping request
  6134 00004937 00                  <2> .icmpcode db 0
  6135 00004938 0000                <2> .icmpchecksum dw 0
  6136 0000493A 0001                <2> .icmpid db 0,1
  6137 0000493C 0000                <2> .sequence dw 0
  6138 0000493E 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  6139 00004947 6A6B6C6D6E6F707172- <2>
  6140 00004950 737475767761626364- <2>
  6141 00004959 6566676869          <2>
  6142                              <2> .packetend:
  6143                              <1> %endif
  6144                              <1> %ifdef disk.none
  6145                              <1> %else
  6146                              <1> 	%include 'source/programs/play.asm'
  6147 0000495E FF2C706C61796100    <2> db 255,44,"playa",0
  6148 00004966 8B3D[3E2D0000]      <2> 	mov edi, [currentcommandloc]
  6149 0000496C 81C706000000        <2> 	add edi, 6
  6150 00004972 E834000000          <2> 	call playasync
  6151 00004977 C3                  <2> 	ret
  6152 00004978 FF2C706C617900      <2> db 255,44,"play",0
  6153                              <2> play:
  6154 0000497F 8B3D[3E2D0000]      <2> 	mov edi, [currentcommandloc]
  6155 00004985 81C705000000        <2> 	add edi, 5
  6156 0000498B E81B000000          <2> 	call playasync
  6157                              <2> .waitforsound:
  6158 00004990 F4                  <2> 	hlt
  6159                              <2> %ifdef sound.included
  6160 00004991 A1[71520000]        <2> 	mov eax, [Length0]
  6161 00004996 660B05[75520000]    <2> 	or ax, [Length1]
  6162                              <2> %endif
  6163 0000499D 0A05[4E020000]      <2> 	or al, [soundon]
  6164 000049A3 3D00000000          <2> 	cmp eax, 0
  6165 000049A8 75E6                <2> 	jne .waitforsound
  6166 000049AA C3                  <2> 	ret
  6167                              <2> playasync:
  6168 000049AB BE0000C000          <2> 	mov esi, 0xC00000
  6169 000049B0 E899120000          <2> 	call loadfile
  6170 000049B5 81FA94010000        <2> 	cmp edx, 404
  6171 000049BB 743F                <2> 	je nosoundfound
  6172 000049BD BB0000C000          <2> 	mov ebx, 0xC00000
  6173 000049C2 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6174 000049C9 0F843F010000        <2> 	je near wave_player
  6175 000049CF 66813B534E          <2> 	cmp word [ebx], "SN"
  6176 000049D4 7526                <2> 	jne nosoundfound
  6177 000049D6 81C306000000        <2> 	add ebx, 6
  6178 000049DC 891D[51020000]      <2> 	mov [soundpos], ebx
  6179 000049E2 035BFC              <2> 	add ebx, [ebx - 4]
  6180 000049E5 891D[55020000]      <2> 	mov [soundendpos], ebx
  6181 000049EB 66C705[4F020000]00- <2> 	mov word [soundrepititions], 0
  6182 000049F3 00                  <2>
  6183 000049F4 C605[4E020000]01    <2> 	mov byte [soundon], 1
  6184 000049FB C3                  <2> 	ret
  6185                              <2> nosoundfound:
  6186 000049FC BE[224A0000]        <2> 	mov esi, notfoundsound
  6187 00004A01 E8F8D1FFFF          <2> 	call print
  6188 00004A06 8B35[3E2D0000]      <2> 	mov esi, [currentcommandloc]
  6189 00004A0C 81C605000000        <2> 	add esi, 5
  6190 00004A12 E8E7D1FFFF          <2> 	call print
  6191 00004A17 BE[88620000]        <2> 	mov esi, notfound2
  6192 00004A1C E8DDD1FFFF          <2> 	call print
  6193 00004A21 C3                  <2> 	ret
  6194 00004A22 706C61793A2000      <2> notfoundsound db "play: ",0
  6195                              <2> 
  6196                              <2> %ifdef sound.included
  6197                              <2> sbplay:
  6198 00004A29 BE0000C000          <2> 		mov esi, 0xC00000
  6199 00004A2E 89F3                <2> 		mov ebx, esi
  6200 00004A30 81C62C000000        <2> 		add esi, WAVSTART
  6201 00004A36 29F7                <2> 		sub edi, esi
  6202 00004A38 66893D[75520000]    <2> 		mov [Length1], di
  6203 00004A3F C1EF0F              <2> 		shr edi, 15
  6204 00004A42 893D[71520000]      <2> 		mov [Length0], edi
  6205 00004A48 8B4B18              <2> 		mov ecx, [ebx + 24]
  6206 00004A4B 890D[82520000]      <2> 		mov [Freq], ecx
  6207 00004A51 31C0                <2> 		xor eax, eax
  6208 00004A53 BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  6209 00004A58 81C22C000000        <2> 		add edx, WAVSTART
  6210 00004A5E 01D0                <2> 		add	eax, edx
  6211 00004A60 89C6                <2> 		mov esi, eax
  6212 00004A62 31C9                <2> 		xor ecx, ecx
  6213 00004A64 31DB                <2> 		xor ebx, ebx
  6214 00004A66 66891D[7F520000]    <2> 		mov [SegLoc], bx
  6215 00004A6D 81C300000800        <2> 		add ebx, 0x80000
  6216 00004A73 66B9FFFF            <2> 		mov cx, 0xFFFF
  6217 00004A77 6681FF0000          <2> 		cmp di, 0
  6218 00004A7C 7520                <2> 		jne .autoinit
  6219 00004A7E 668B0D[75520000]    <2> 		mov cx, [Length1]
  6220 00004A85 C605[70520000]01    <2> 		mov byte [OddLength], 1
  6221 00004A8C 6681F90080          <2> 		cmp cx, 32768
  6222 00004A91 730B                <2> 		jae .autoinit
  6223 00004A93 C605[70520000]00    <2> 		mov byte [OddLength], 0
  6224 00004A9A 66D1E1              <2> 		shl cx, 1
  6225 00004A9D 47                  <2> 		inc edi
  6226                              <2> .autoinit:
  6227 00004A9E 4F                  <2> 		dec edi
  6228 00004A9F 893D[71520000]      <2> 		mov [Length0], edi
  6229 00004AA5 66890D[75520000]    <2> 		mov [Length1], cx
  6230 00004AAC 66D1E9              <2> 		shr cx, 1
  6231 00004AAF 6641                <2> 		inc cx
  6232 00004AB1 01C8                <2> 		add eax, ecx
  6233 00004AB3 A3[77520000]        <2> 		mov [NextMemLoc], eax
  6234 00004AB8 8935[7B520000]      <2> 		mov	[MemLoc], esi
  6235 00004ABE E853060000          <2> 		call DMACopy
  6236 00004AC3 31DB                <2> 		xor ebx, ebx
  6237 00004AC5 668B1D[7F520000]    <2> 		mov bx, [SegLoc]
  6238 00004ACC 31C9                <2> 		xor ecx, ecx
  6239 00004ACE 668B0D[75520000]    <2> 		mov cx, [Length1]
  6240 00004AD5 66D1E9              <2> 		shr cx, 1
  6241 00004AD8 6641                <2> 		inc cx
  6242 00004ADA 01CB                <2> 		add ebx, ecx
  6243 00004ADC 66891D[7F520000]    <2> 		mov [SegLoc], bx
  6244 00004AE3 81C300000800        <2> 		add ebx, 0x80000
  6245 00004AE9 8B35[77520000]      <2> 		mov esi, [NextMemLoc]
  6246 00004AEF 89F0                <2> 		mov eax, esi
  6247 00004AF1 01C8                <2> 		add eax, ecx
  6248 00004AF3 A3[77520000]        <2> 		mov [NextMemLoc], eax
  6249 00004AF8 8935[7B520000]      <2> 		mov	[MemLoc], esi
  6250 00004AFE E813060000          <2> 		call DMACopy
  6251 00004B03 E831060000          <2> 		call DMAPlay
  6252 00004B08 E8BB060000          <2> 		call PlayDSP
  6253 00004B0D C3                  <2> 		ret
  6254                              <2> WAVSTART equ 44
  6255                              <2> wave_player:
  6256 00004B0E 803D[86520000]01    <2> 	cmp byte [SoundBlaster], 1
  6257 00004B15 0F840EFFFFFF        <2> 	je near sbplay
  6258 00004B1B BE[264B0000]        <2> 	mov esi, nosoundblaster
  6259 00004B20 E8D9D0FFFF          <2> 	call print
  6260 00004B25 C3                  <2> 	ret
  6261                              <2> %else
  6262                              <2> 	wave_player:
  6263                              <2> 		mov esi, nosoundblaster
  6264                              <2> 		call print
  6265                              <2> 		ret
  6266                              <2> %endif
  6267 00004B26 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6268 00004B2F 426C61737465722064- <2>
  6269 00004B38 657465637465642E0A- <2>
  6270 00004B41 00                  <2>
  6271                              <1> %endif
  6272                              <1> %include 'source/programs/pwd.asm'
  6273 00004B42 FF2C70776400        <2> db 255,44,"pwd",0
  6274 00004B48 BE[148C0300]        <2> 	mov esi, currentfolder
  6275 00004B4D E888D0FFFF          <2> 	call printquiet
  6276 00004B52 E8A2D0FFFF          <2> 	call printline
  6277 00004B57 C3                  <2> 	ret
  6278                              <2> 	
  6279                              <1> %include 'source/programs/reboot.asm'
  6280 00004B58 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6281 00004B61 0F011D[6B4B0000]    <2> 		lidt [idtreboot]
  6282 00004B68 CD00                <2> 		int 0
  6283 00004B6A F4                  <2> 		hlt
  6284                              <2> 	
  6285 00004B6B 0000                <2> 	idtreboot dw 0
  6286 00004B6D 00000000            <2> 			  dd 0
  6287                              <2> 
  6288                              <2> 	coldboot:
  6289 00004B71 66B84000            <2> 		MOV AX, 0040h
  6290 00004B75 8EC0                <2> 		MOV ES, AX
  6291 00004B77 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6292 00004B80 00                  <2>
  6293 00004B81 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6294 00004B88 CF                  <2> 		IRET
  6295                              <2> 
  6296                              <2> 	warmboot:
  6297 00004B89 66B84000            <2> 		MOV AX, 0040h
  6298 00004B8D 8EC0                <2> 		MOV ES, AX
  6299 00004B8F 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6300 00004B98 12                  <2>
  6301 00004B99 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6302 00004BA0 CF                  <2> 		IRET
  6303                              <2> 		
  6304                              <1> %include 'source/programs/reg.asm'
  6305 00004BA1 FF2C72656700        <2> db 255,44,"reg",0
  6306 00004BA7 CD03                <2> 	int 3
  6307 00004BA9 C3                  <2> 	ret 
  6308                              <1> %ifdef disk.none
  6309                              <1> %else
  6310                              <1> 	%include 'source/programs/show.asm'
  6311 00004BAA FF2C73686F7700      <2> db 255,44,"show",0
  6312                              <2> showprog:
  6313 00004BB1 8B3D[3E2D0000]      <2> 		mov edi, [currentcommandloc]
  6314 00004BB7 81C705000000        <2> 		add edi, 5
  6315 00004BBD BE00004000          <2> 		mov esi, 0x400000
  6316 00004BC2 803F26              <2> 		cmp byte [edi], '&'
  6317 00004BC5 741B                <2> 		je .nullfile
  6318 00004BC7 BE00008000          <2> 		mov esi, 0x800000
  6319 00004BCC E87D100000          <2> 		call loadfile
  6320 00004BD1 81FA94010000        <2> 		cmp edx, 404
  6321 00004BD7 0F8410000000        <2> 		je near filenotfound
  6322 00004BDD BE00008000          <2> 		mov esi, 0x800000
  6323                              <2> .nullfile:
  6324                              <2> %ifdef gui.included
  6325                              <2> 		cmp word [esi], "BM"
  6326                              <2> 		je bmpfound
  6327                              <2> %endif
  6328 00004BE2 E817D0FFFF          <2> 		call print
  6329 00004BE7 E80DD0FFFF          <2> 		call printline
  6330 00004BEC C3                  <2> 		ret
  6331                              <2> %ifdef gui.included
  6332                              <2> bmpfound:
  6333                              <2> 		cmp byte [guion], 0
  6334                              <2> 		je near noguibmp
  6335                              <2> 		mov esi, 0x800000
  6336                              <2> 		xor ecx, ecx
  6337                              <2> 		xor edx, edx
  6338                              <2> 		xor eax, eax
  6339                              <2> 		xor ebx, ebx
  6340                              <2> 		call showbmp
  6341                              <2> 		xor al, al
  6342                              <2> 		mov ah, 5
  6343                              <2> 		int 30h
  6344                              <2> 		call guiclear
  6345                              <2> 		call clearmousecursor
  6346                              <2> 		call reloadallgraphics
  6347                              <2> 		ret
  6348                              <2> noguibmp:
  6349                              <2> 		mov esi, warnguimsg
  6350                              <2> 		call print
  6351                              <2> 		ret
  6352                              <2> warnguimsg db "This can not be done without the GUI.",10,0
  6353                              <2> %endif
  6354                              <2> 
  6355                              <2> filenotfound:
  6356 00004BED BE[204C0000]        <2> 		mov esi, filenf
  6357 00004BF2 E807D0FFFF          <2> 		call print
  6358 00004BF7 8B35[3E2D0000]      <2> 		mov esi, [currentcommandloc]
  6359                              <2> findfilenotfoundzero:
  6360 00004BFD 8A06                <2> 		mov al, [esi]
  6361 00004BFF 46                  <2> 		inc esi
  6362 00004C00 3C00                <2> 		cmp al, 0
  6363 00004C02 7411                <2> 		je nofilenamenotfound
  6364 00004C04 81FE[88A60300]      <2> 		cmp esi, buftxtend
  6365 00004C0A 7309                <2> 		jae nofilenamenotfound
  6366 00004C0C 3C20                <2> 		cmp al, " "
  6367 00004C0E 75ED                <2> 		jne findfilenotfoundzero
  6368 00004C10 E8E9CFFFFF          <2> 		call print
  6369                              <2> nofilenamenotfound:
  6370 00004C15 BE[2B4C0000]        <2> 		mov esi, filenf2
  6371 00004C1A E8DFCFFFFF          <2> 		call print
  6372 00004C1F C3                  <2> 		ret
  6373 00004C20 5468652066696C6520- <2> filenf db "The file ",34,0
  6374 00004C29 2200                <2>
  6375 00004C2B 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6376 00004C34 6F7420626520666F75- <2>
  6377 00004C3D 6E642E0A00          <2>
  6378                              <1> %endif
  6379                              <1> %include 'source/programs/shush.asm'
  6380 00004C42 FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6381                              <2> shushprog:
  6382                              <2> %ifdef gui.included
  6383                              <2> 	cmp byte [guion], 0
  6384                              <2> 	je near .noswitchsize
  6385                              <2> 	mov esi, [currentcommandloc]
  6386                              <2> 	add esi, 6
  6387                              <2> 	push esi
  6388                              <2> 	dec esi
  6389                              <2> .findspace:
  6390                              <2> 	inc esi
  6391                              <2> 	mov al, [esi]
  6392                              <2> 	cmp al, 0
  6393                              <2> 	je near .noswitchsize
  6394                              <2> 	cmp al, "X"
  6395                              <2> 	je .donefind
  6396                              <2> 	cmp al, "x"
  6397                              <2> 	je .donefind
  6398                              <2> 	cmp al, " "
  6399                              <2> 	jne .findspace
  6400                              <2> .donefind:
  6401                              <2> 	xor al, al
  6402                              <2> 	mov [esi], al
  6403                              <2> 	inc esi
  6404                              <2> 	mov edi, esi
  6405                              <2> 	call cnvrttxt
  6406                              <2> 	mov eax, ecx
  6407                              <2> 	pop esi
  6408                              <2> 	push eax
  6409                              <2> 	mov edi, esi
  6410                              <2> 	call cnvrttxt
  6411                              <2> 	mov ebx, ecx
  6412                              <2> 	pop eax	
  6413                              <2> 	cmp bx, 0
  6414                              <2> 	je near .noswitchsize
  6415                              <2> 	cmp ax, 0
  6416                              <2> 	je near .noswitchsize
  6417                              <2> 	shl bx, 3
  6418                              <2> 	shl ax, 4
  6419                              <2> 	cmp bx, [resolutionx]
  6420                              <2> 	jbe .nofixx
  6421                              <2> 	mov bx, [resolutionx]
  6422                              <2> .nofixx:
  6423                              <2> 	add ax, 16
  6424                              <2> 	cmp ax, [resolutiony]
  6425                              <2> 	jbe .nofixy
  6426                              <2> 	mov ax, [resolutiony]
  6427                              <2> .nofixy:
  6428                              <2> 	sub ax, 16
  6429                              <2> 	xor cx, cx
  6430                              <2> 	xor dx, dx
  6431                              <2> 	mov [termwindow], bx
  6432                              <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6433                              <2> 	mov esi, termwindow
  6434                              <2> 	xor ebx, ebx
  6435                              <2> 	xor ax, ax
  6436                              <2> 	call showwindow
  6437                              <2> 	call guiclear
  6438                              <2> 	call clear
  6439                              <2> 	call reloadallgraphics
  6440                              <2> 	call switchmousepos2
  6441                              <2> .noswitchsize:
  6442                              <2> %endif
  6443 00004C4A BE[554C0000]        <2> 	mov esi, shushmsg
  6444 00004C4F E8AACFFFFF          <2> 	call print
  6445 00004C54 C3                  <2> 	ret
  6446 00004C55 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6447 00004C5E 6F2074686520536F6C- <2>
  6448 00004C67 6C65724F5320486172- <2>
  6449 00004C70 646C7920556E69782D- <2>
  6450 00004C79 436F6D70617469626C- <2>
  6451 00004C82 65205368656C6C210A- <2>
  6452 00004C8B 00                  <2>
  6453                              <1> %include 'source/programs/system.asm'
  6454 00004C8C FF2C73797374656D00  <2> 	db 255,44,"system",0
  6455 00004C95 BE[A84D0000]        <2> 	mov esi, kernelinfomsg
  6456 00004C9A E83BCFFFFF          <2> 	call printquiet
  6457 00004C9F B9[38650300]        <2> 	mov ecx, osend
  6458 00004CA4 E899E3FFFF          <2> 	call showdec
  6459 00004CA9 BE[BD4D0000]        <2> 	mov esi, diskbytemsg
  6460 00004CAE E827CFFFFF          <2> 	call printquiet
  6461 00004CB3 B9[38650300]        <2> 	mov ecx, osend
  6462 00004CB8 81C1[AD010400]      <2> 	add ecx, commandbufend
  6463 00004CBE 81E9[00680300]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6464 00004CC4 E879E3FFFF          <2> 	call showdec
  6465 00004CC9 BE[D44D0000]        <2> 	mov esi, membytemsg
  6466 00004CCE E807CFFFFF          <2> 	call printquiet
  6467 00004CD3 BE[374E0000]        <2> 	mov esi, endofmemmsg
  6468 00004CD8 E8FDCEFFFF          <2> 	call printquiet
  6469 00004CDD B9[C1351400]        <2> 	mov ecx, bssend
  6470 00004CE2 E8A0E2FFFF          <2> 	call showhex
  6471 00004CE7 BE[ED4D0000]        <2> 	mov esi, systeminfomsg
  6472 00004CEC E8E9CEFFFF          <2> 	call printquiet
  6473                              <2> getcpuspeed:
  6474 00004CF1 B8FE000000          <2> 	mov eax, 0xFE
  6475 00004CF6 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6476 00004CF8 B020                <2> 	mov al, 0x20
  6477 00004CFA E620                <2> 	out 0x20, al
  6478 00004CFC F4                  <2> 	hlt
  6479 00004CFD 0F31                <2> 	rdtsc
  6480 00004CFF 89D6                <2> 	mov esi, edx
  6481 00004D01 89C7                <2> 	mov edi, eax
  6482 00004D03 31C0                <2> 	xor eax, eax
  6483 00004D05 C605[2E020000]01    <2> 	mov byte [testingcpuspeed], 1
  6484                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6485 00004D0C 40                  <2> 	inc eax
  6486 00004D0D E9FAFFFFFF          <2> 	jmp cpuspeedloop
  6487                              <2> cpuspeedloopend:
  6488 00004D12 0F31                <2> 	rdtsc
  6489 00004D14 29F8                <2> 	sub eax, edi
  6490 00004D16 29F2                <2> 	sub edx, esi
  6491 00004D18 8915[37020000]      <2> 	mov [cpuclocksperint + 4], edx
  6492 00004D1E A3[33020000]        <2> 	mov [cpuclocksperint], eax
  6493 00004D23 31C0                <2> 	xor eax, eax
  6494 00004D25 E621                <2> 	out 0x21, al
  6495 00004D27 B020                <2> 	mov al, 0x20
  6496 00004D29 E620                <2> 	out 0x20, al
  6497 00004D2B 31D2                <2> 	xor edx, edx
  6498 00004D2D 31C0                <2> 	xor eax, eax
  6499 00004D2F A1[2F020000]        <2> 	mov eax, [cpuspeedperint]
  6500 00004D34 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6501                              <2> 				;result by 2
  6502 00004D36 8B1D[41020000]      <2> 	mov ebx, [timeinterval]
  6503 00004D3C C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6504 00004D3F F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6505 00004D41 89C1                <2> 	mov ecx, eax
  6506 00004D43 E8FAE2FFFF          <2> 	call showdec
  6507 00004D48 BE[1B4E0000]        <2> 	mov esi, cpuspeedmsg
  6508 00004D4D E888CEFFFF          <2> 	call printquiet
  6509 00004D52 31D2                <2> 	xor edx, edx
  6510 00004D54 A1[33020000]        <2> 	mov eax, [cpuclocksperint]
  6511 00004D59 8B15[37020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6512 00004D5F 8B1D[41020000]      <2> 	mov ebx, [timeinterval]
  6513 00004D65 C1EB0A              <2> 	shr ebx, 10
  6514 00004D68 F7F3                <2> 	div ebx
  6515 00004D6A 89C1                <2> 	mov ecx, eax
  6516 00004D6C E8D1E2FFFF          <2> 	call showdec
  6517 00004D71 BE[214E0000]        <2> 	mov esi, cpuclockmsg
  6518 00004D76 E85FCEFFFF          <2> 	call printquiet
  6519 00004D7B 8B0D[3B020000]      <2> 	mov ecx, [memoryspace]
  6520 00004D81 C1E914              <2> 	shr ecx, 20
  6521 00004D84 41                  <2> 	inc ecx	;the reading is one MB behind
  6522 00004D85 E8B8E2FFFF          <2> 	call showdec
  6523 00004D8A BE[264E0000]        <2> 	mov esi, memoryspacemsg
  6524 00004D8F E86ACEFFFF          <2> 	call print
  6525                              <2> %ifdef sound.included
  6526 00004D94 803D[86520000]00    <2> 	cmp byte [SoundBlaster], 0
  6527 00004D9B 740A                <2> 	je .nosb
  6528 00004D9D BE[034E0000]        <2> 	mov esi, soundblastermsg
  6529 00004DA2 E857CEFFFF          <2> 	call print
  6530                              <2> .nosb:
  6531                              <2> %endif
  6532 00004DA7 C3                  <2> 	ret
  6533                              <2> 
  6534 00004DA8 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6535 00004DB1 666F726D6174696F6E- <2>
  6536 00004DBA 3A0A00              <2>
  6537 00004DBD 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6538 00004DC6 6B2053706163652055- <2>
  6539 00004DCF 7365640A00          <2>
  6540 00004DD4 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6541 00004DDD 6F7279205370616365- <2>
  6542 00004DE6 20557365640A00      <2>
  6543 00004DED 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6544 00004DF6 6E666F726D6174696F- <2>
  6545 00004DFF 6E3A0A00            <2>
  6546                              <2> %ifdef sound.included
  6547 00004E03 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6548 00004E0C 746572204465746563- <2>
  6549 00004E15 7465642E0A00        <2>
  6550                              <2> %endif
  6551 00004E1B 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6552 00004E21 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6553 00004E26 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6554 00004E2F 2053706163650A00    <2>
  6555 00004E37 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6556 00004E40 6D6F72792053706163- <2>
  6557 00004E49 653A20307800        <2>
  6558                              <1> %include 'source/programs/time.asm'
  6559 00004E4F FF2C74696D6500      <2> db 255,44,"time",0	
  6560                              <2> timer:
  6561 00004E56 8B35[3E2D0000]      <2> 	mov esi, [currentcommandloc]
  6562 00004E5C 81C604000000        <2> 	add esi, 4
  6563 00004E62 803E00              <2> 	cmp byte [esi], 0
  6564 00004E65 7477                <2> 	je .norun
  6565 00004E67 46                  <2> 	inc esi
  6566 00004E68 8B0D[46020000]      <2> 	mov ecx, [timeseconds]
  6567 00004E6E 51                  <2> 	push ecx
  6568 00004E6F 8B0D[4A020000]      <2> 	mov ecx, [timenanoseconds]
  6569 00004E75 51                  <2> 	push ecx
  6570 00004E76 BF[88A20300]        <2> 	mov edi, buftxt
  6571                              <2> .cpcmd:
  6572 00004E7B 8A06                <2> 	mov al, [esi]
  6573 00004E7D 8807                <2> 	mov [edi], al
  6574 00004E7F 46                  <2> 	inc esi
  6575 00004E80 47                  <2> 	inc edi
  6576 00004E81 3C00                <2> 	cmp al, 0
  6577 00004E83 75F6                <2> 	jne .cpcmd
  6578 00004E85 E8D8DDFFFF          <2> 	call run
  6579 00004E8A 5A                  <2> 	pop edx
  6580 00004E8B 58                  <2> 	pop eax
  6581                              <2> 
  6582 00004E8C 8B0D[46020000]      <2> 	mov ecx, [timeseconds]
  6583 00004E92 29C1                <2> 	sub ecx, eax
  6584 00004E94 8B1D[4A020000]      <2> 	mov ebx, [timenanoseconds]
  6585 00004E9A 29D3                <2> 	sub ebx, edx
  6586 00004E9C 7307                <2> 	jae .nosign
  6587 00004E9E 81C300CA9A3B        <2> 	add ebx, 1000000000
  6588 00004EA4 49                  <2> 	dec ecx
  6589                              <2> .nosign:
  6590 00004EA5 E898E1FFFF          <2> 	call showdec
  6591                              <2> 	
  6592 00004EAA 89D9                <2> 	mov ecx, ebx
  6593 00004EAC BE[9E3D0000]        <2> 	mov esi, timenscache
  6594 00004EB1 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6595 00004EB8 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6596 00004EBF C6460A30            <2> 	mov byte [esi + 10], "0"
  6597 00004EC3 BE[A93D0000]        <2> 	mov esi, timenscacheend
  6598 00004EC8 E852DFFFFF          <2> 	call convert
  6599 00004ECD BE[9E3D0000]        <2> 	mov esi, timenscache
  6600 00004ED2 E827CDFFFF          <2> 	call print
  6601 00004ED7 C605[9E3D0000]08    <2> 	mov byte [timenscache], 8
  6602                              <2> .norun:
  6603 00004EDE C3                  <2> 	ret
  6604                              <2> 	
  6605                              <1> %include 'source/programs/turnoff.asm'
  6606 00004EDF FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6607 00004EE8 00                  <2>
  6608                              <2> 	turnoff:
  6609 00004EE9 66C705[D20C0000]-   <2> 			mov word [realmodeptr], shutdown
  6610 00004EF0 [FC4E]              <2>
  6611 00004EF2 BB[274F0000]        <2> 			mov ebx, halt
  6612 00004EF7 E8C4BCFFFF          <2> 			call realmode
  6613                              <2> 
  6614                              <2> [BITS 16]
  6615                              <2> 		shutdown:
  6616 00004EFC B453                <2> 			mov ah, 0x53
  6617 00004EFE B004                <2> 			mov al, 4
  6618 00004F00 31DB                <2> 			xor bx, bx
  6619 00004F02 CD15                <2> 			int 0x15
  6620                              <2> 			
  6621 00004F04 B453                <2> 			mov ah, 0x53
  6622 00004F06 B001                <2> 			mov al, 1
  6623 00004F08 31DB                <2> 			xor bx, bx
  6624 00004F0A CD15                <2> 			int 0x15
  6625                              <2> 			
  6626 00004F0C B453                <2> 			mov ah, 0x53
  6627 00004F0E B008                <2> 			mov al, 8
  6628 00004F10 BB0100              <2> 			mov bx, 1
  6629 00004F13 B90100              <2> 			mov cx, 1
  6630 00004F16 CD15                <2> 			int 0x15
  6631                              <2> 			
  6632 00004F18 B453                <2> 			mov ah, 0x53
  6633 00004F1A B007                <2> 			mov al, 7
  6634 00004F1C BB0100              <2> 			mov bx, 1
  6635 00004F1F B90300              <2> 			mov cx, 3
  6636 00004F22 CD15                <2> 			int 0x15
  6637 00004F24 E9FDFF              <2> 			jmp $
  6638                              <2> 			[BITS 32]
  6639 00004F27 E9FBFFFFFF          <2> halt: jmp $
  6640                              <1> %include 'source/programs/wait.asm'
  6641 00004F2C FF2C7761697400      <2> db 255,44,"wait",0
  6642                              <2> waitkey:
  6643 00004F33 E8DCD2FFFF          <2> 		call getchar
  6644 00004F38 C3                  <2> 		ret
  6645                              <1> %include 'source/programs/while.asm'
  6646 00004F39 FF2C7768696C6500    <2> db 255,44,"while",0
  6647 00004F41 30C0                <2> whilecmd:  xor al, al
  6648 00004F43 3805[828E0300]      <2> 	cmp [BATCHISON], al
  6649 00004F49 0F846CE9FFFF        <2> 	je near notbatch
  6650 00004F4F 8B35[7E8E0300]      <2> 	mov esi, [BATCHPOS]
  6651 00004F55 81EE02000000        <2> 	sub esi, 2
  6652 00004F5B 4E                  <2> whilefnd: dec esi
  6653 00004F5C 8A06                <2> 	mov al, [esi]
  6654 00004F5E 3C0A                <2> 	cmp al, 10
  6655 00004F60 0F840D000000        <2> 	je near whilefnd2
  6656 00004F66 3C00                <2> 	cmp al, 0
  6657 00004F68 0F8405000000        <2> 	je near whilefnd2
  6658 00004F6E E9E8FFFFFF          <2> 	jmp whilefnd
  6659                              <2> whilefnd2:
  6660 00004F73 46                  <2> 	inc esi
  6661 00004F74 8935[848E0300]      <2> 	mov [LOOPPOS], esi
  6662 00004F7A C605[838E0300]01    <2> 	mov BYTE [LOOPON], 1
  6663 00004F81 BE[88A20300]        <2> 	mov esi, buftxt
  6664 00004F86 BB[88A20300]        <2> 	mov ebx, buftxt
  6665 00004F8B 81C306000000        <2> 	add ebx, 6
  6666 00004F91 E9E3F6FFFF          <2> 	jmp chkeqsn
  6667                              <1> progend:		;programs end here	
  6668                              <1> batchprogend:
  6669                                  	%include "source/hardware.asm"
  6670                              <1> %ifdef gui.included
  6671                              <1> 	%include "source/drivers/video/vesa.asm"
  6672                              <1> 	%include "source/drivers/input/mouse.asm"
  6673                              <1> %endif
  6674                              <1> %include "source/drivers/sound/pcspkr.asm"
  6675                              <2> ;PC Speaker Drivers
  6676                              <2> PCSpeakerRAW:
  6677 00004F96 60                  <2> 	pusha
  6678                              <2> nosoundrep:
  6679 00004F97 8B35[51020000]      <2> 	mov esi, [soundpos]
  6680 00004F9D 31C9                <2> 	xor ecx, ecx
  6681 00004F9F 668B0D[4F020000]    <2> 	mov cx, [soundrepititions]
  6682 00004FA6 6681F90000          <2> 	cmp cx, 0
  6683 00004FAB 0F8548000000        <2> 	jne near donesetpitch
  6684 00004FB1 668B0E              <2> 	mov cx, [esi]
  6685 00004FB4 668B5E02            <2> 	mov bx, [esi + 2]
  6686 00004FB8 66890D[4F020000]    <2> 	mov [soundrepititions], cx
  6687 00004FBF 81C604000000        <2> 	add esi, 4
  6688 00004FC5 8935[51020000]      <2> 	mov [soundpos], esi
  6689 00004FCB 3B35[55020000]      <2> 	cmp esi, [soundendpos]
  6690 00004FD1 7735                <2> 	ja stopsound
  6691 00004FD3 66813D[4F020000]00- <2> 	cmp word [soundrepititions], 0
  6692 00004FDB 00                  <2>
  6693 00004FDC 74B9                <2> 	je nosoundrep
  6694 00004FDE 6681FB0000          <2> 	cmp bx, 0
  6695 00004FE3 740F                <2> 	je nosoundplay
  6696 00004FE5 E840000000          <2> 	call setpitch
  6697 00004FEA E849000000          <2> 	call startsound
  6698 00004FEF E905000000          <2> 	jmp donesetpitch
  6699                              <2> nosoundplay:
  6700 00004FF4 E846000000          <2> 	call killsound
  6701                              <2> donesetpitch:
  6702 00004FF9 6649                <2> 	dec cx
  6703 00004FFB 66890D[4F020000]    <2> 	mov [soundrepititions], cx
  6704 00005002 61                  <2> 	popa
  6705 00005003 E985B2FFFF          <2> 	jmp timerinterrupt
  6706                              <2> stopsound:
  6707 00005008 31C0                <2> 	xor eax, eax
  6708 0000500A 66A3[4F020000]      <2> 	mov [soundrepititions], ax
  6709 00005010 A2[4E020000]        <2> 	mov [soundon], al
  6710 00005015 A3[51020000]        <2> 	mov [soundpos], eax
  6711 0000501A A3[55020000]        <2> 	mov [soundendpos], eax
  6712 0000501F E81B000000          <2> 	call killsound
  6713 00005024 61                  <2> 	popa
  6714 00005025 E963B2FFFF          <2> 	jmp timerinterrupt
  6715                              <2> 
  6716                              <2> 
  6717                              <2> setpitch:
  6718 0000502A B0B6                <2> 	mov al, 0xB6
  6719 0000502C E643                <2> 	out 0x43, al
  6720 0000502E 6689D8              <2> 	mov ax, bx
  6721 00005031 E642                <2> 	out 0x42, al
  6722 00005033 88E0                <2> 	mov al, ah
  6723 00005035 E642                <2> 	out 0x42, al
  6724 00005037 C3                  <2> 	ret
  6725                              <2> startsound:
  6726 00005038 E461                <2> 	in al, 0x61
  6727 0000503A 0C03                <2> 	or al, 3
  6728 0000503C E661                <2> 	out 0x61, al
  6729 0000503E C3                  <2> 	ret
  6730                              <2> killsound:
  6731 0000503F E461                <2> 	in al, 0x61
  6732 00005041 24FC                <2> 	and al, 0xFC
  6733 00005043 E661                <2> 	out 0x61, al
  6734 00005045 C3                  <2> 	ret
  6735                              <2> 	
  6736                              <1> %ifdef sound.included
  6737                              <1> 	%include "source/drivers/sound/sblaster.asm"
  6738                              <2> ;Sound Blaster Drivers
  6739                              <2> sblaster:
  6740                              <2> .init:
  6741 00005046 E8E1010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  6742 0000504B A2[86520000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  6743 00005050 3C00                <2> 		cmp al, 0
  6744 00005052 7418                <2> 		je .noinit
  6745 00005054 B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  6746 00005056 E805020000          <2> 		call WriteDSP
  6747 0000505B B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  6748 0000505D E8BB010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  6749 00005062 BE[6D500000]        <2> 		mov esi, .initmsg
  6750 00005067 E892CBFFFF          <2> 		call print
  6751                              <2> .noinit:
  6752 0000506C C3                  <2> 		ret
  6753 0000506D 5342313620496E6974- <2> .initmsg db "SB16 Initialized.",10,0
  6754 00005076 69616C697A65642E0A- <2>
  6755 0000507F 00                  <2>
  6756                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  6757 00005080 813D[71520000]0000- <2> 	cmp dword [Length0], 0
  6758 00005088 0000                <2>
  6759 0000508A 0F8462000000        <2> 	je near .done
  6760 00005090 FF0D[71520000]      <2> 	dec dword [Length0]
  6761 00005096 E908000000          <2> 	jmp .notodd
  6762                              <2> .oddlength:
  6763 0000509B 31C9                <2> 	xor ecx, ecx
  6764 0000509D 880D[70520000]      <2> 	mov [OddLength], cl
  6765                              <2> .notodd:
  6766 000050A3 8B35[77520000]      <2> 	mov esi, [NextMemLoc]
  6767 000050A9 31C9                <2> 	xor ecx, ecx
  6768 000050AB 668B0D[75520000]    <2> 	mov cx, [Length1]
  6769 000050B2 D1E9                <2> 	shr ecx, 1
  6770 000050B4 6641                <2> 	inc cx
  6771 000050B6 31DB                <2> 	xor ebx, ebx
  6772 000050B8 668B1D[7F520000]    <2> 	mov bx, [SegLoc]
  6773 000050BF 6601CB              <2> 	add bx, cx
  6774 000050C2 66891D[7F520000]    <2> 	mov [SegLoc], bx
  6775 000050C9 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  6776 000050CF 8935[7B520000]      <2> 	mov [MemLoc], esi
  6777 000050D5 89C8                <2> 	mov eax, ecx
  6778 000050D7 01F0                <2> 	add eax, esi
  6779 000050D9 A3[77520000]        <2> 	mov [NextMemLoc], eax
  6780 000050DE E833000000          <2> 	call DMACopy
  6781                              <2> 	;call DMAPlay
  6782 000050E3 E8E0000000          <2> 	call PlayDSP
  6783 000050E8 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  6784 000050EC EC                  <2> 	in al, dx ;acknowledge the interrupt 
  6785 000050ED E959B2FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  6786                              <2> .done:
  6787 000050F2 803D[70520000]01    <2> 	cmp byte [OddLength], 1
  6788 000050F9 74A0                <2> 	je .oddlength
  6789 000050FB 31C0                <2> 	xor eax, eax
  6790 000050FD 66A3[75520000]      <2> 	mov [Length1], ax
  6791 00005103 66B8D000            <2> 	mov ax, 0xD0
  6792 00005107 E854010000          <2> 	call WriteDSP
  6793 0000510C 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  6794 00005110 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  6795 00005111 E935B2FFFF          <2> 	jmp handled2
  6796                              <2> 	
  6797                              <2> DMACopy:
  6798 00005116 66B80800            <2> 		mov ax, LINEAR_SEL
  6799 0000511A 8EE0                <2> 		mov fs, ax
  6800 0000511C C1E902              <2> 		shr ecx, 2
  6801                              <2> .loop:
  6802 0000511F 8B06                <2> 		mov eax, [esi]
  6803 00005121 648903              <2> 		mov [fs:ebx], eax
  6804 00005124 81C604000000        <2> 		add esi, 4
  6805 0000512A 81C304000000        <2> 		add ebx, 4
  6806 00005130 E2ED                <2> 		loop .loop
  6807 00005132 66B83000            <2> 		mov ax, NEW_DATA_SEL
  6808 00005136 8EE0                <2> 		mov fs, ax
  6809 00005138 C3                  <2> 		ret
  6810                              <2> 		
  6811                              <2> 
  6812                              <2> DMAPlay:    ;uses eax ebx edx
  6813 00005139 C605[81520000]00    <2> 		mov	byte [Page1],00h
  6814                              <2> 
  6815 00005140 B005                <2> 		mov	al,(Channel+4)
  6816 00005142 66BA0A00            <2> 		mov	dx,0Ah
  6817 00005146 EE                  <2> 		out	dx,al
  6818 00005147 30C0                <2> 		xor	al,al
  6819 00005149 66BA0C00            <2> 		mov	dx,0Ch
  6820 0000514D EE                  <2> 		out	dx,al
  6821 0000514E B059                <2> 		mov	al,ModeReg
  6822 00005150 66BA0B00            <2> 		mov	dx,0Bh
  6823 00005154 EE                  <2> 		out	dx,al
  6824 00005155 B800000800          <2> 		mov	eax,0x80000
  6825 0000515A 66BA0200            <2> 		mov	dx,AddPort
  6826 0000515E EE                  <2> 		out	dx,al
  6827 0000515F 86C4                <2> 		xchg al,ah
  6828 00005161 EE                  <2> 		out	dx,al
  6829 00005162 B800000800          <2> 		mov	eax,0x80000
  6830 00005167 89C2                <2> 		mov	edx,eax
  6831 00005169 2500000100          <2> 		and	eax,65536
  6832 0000516E 7406                <2> 		jz	MemLocN1
  6833 00005170 FE05[81520000]      <2> 		inc	byte [Page1]
  6834                              <2> MemLocN1:
  6835 00005176 89D0                <2> 		mov	eax,edx
  6836 00005178 2500000200          <2> 		and	eax,131072
  6837 0000517D 7407                <2> 		jz	MemLocN2
  6838 0000517F 8005[81520000]02    <2> 		add	byte [Page1],02
  6839                              <2> MemLocN2:
  6840 00005186 89D0                <2> 		mov	eax,edx
  6841 00005188 2500000400          <2> 		and	eax,262144
  6842 0000518D 7407                <2> 		jz	MemLocN3
  6843 0000518F 8005[81520000]04    <2> 		add	byte [Page1],04
  6844                              <2> MemLocN3:
  6845 00005196 89D0                <2> 		mov	eax,edx
  6846 00005198 2500000800          <2> 		and	eax,524288
  6847 0000519D 7407                <2> 		jz	MemLocN4
  6848 0000519F 8005[81520000]08    <2> 		add	byte [Page1],08
  6849                              <2> MemLocN4:
  6850 000051A6 66BA8300            <2> 		mov	dx,PgPort
  6851 000051AA A0[81520000]        <2> 		mov	al,[Page1]
  6852 000051AF EE                  <2> 		out	dx,al
  6853 000051B0 66BA0300            <2> 		mov	dx,LenPort
  6854 000051B4 66A1[75520000]      <2> 		mov	ax,[Length1]
  6855 000051BA 6648                <2> 		dec ax
  6856 000051BC EE                  <2> 		out	dx,al
  6857 000051BD 86C4                <2> 		xchg al,ah
  6858 000051BF EE                  <2> 		out	dx,al
  6859 000051C0 66BA0A00            <2> 		mov	dx,0Ah
  6860 000051C4 B001                <2> 		mov	al,Channel
  6861 000051C6 EE                  <2> 		out	dx,al
  6862 000051C7 C3                  <2> 		ret
  6863                              <2> 		
  6864                              <2> PlayDSP:
  6865 000051C8 B040                <2> 		mov	al,40h
  6866 000051CA E891000000          <2> 		call WriteDSP
  6867 000051CF 31D2                <2> 		xor	edx,edx
  6868 000051D1 B840420F00          <2> 		mov	eax,1000000
  6869 000051D6 8B1D[82520000]      <2> 		mov	ebx,[Freq]
  6870 000051DC 803D[6F520000]00    <2> 		cmp byte [Stereo], 0
  6871 000051E3 7402                <2> 		je .nost
  6872 000051E5 D1E3                <2> 		shl ebx, 1
  6873                              <2> .nost:
  6874 000051E7 F7F3                <2> 		div	ebx
  6875 000051E9 89C3                <2> 		mov	ebx,eax
  6876 000051EB B800010000          <2> 		mov	eax,256
  6877 000051F0 29D8                <2> 		sub	eax,ebx
  6878 000051F2 E869000000          <2> 		call WriteDSP
  6879 000051F7 B014                <2> 		mov	al,14h	;write the mode
  6880 000051F9 803D[6F520000]00    <2> 		cmp byte [Stereo], 0
  6881 00005200 7400                <2> 		je .nost2
  6882                              <2> 		
  6883                              <2> .nost2:
  6884 00005202 E859000000          <2> 		call WriteDSP
  6885 00005207 66A1[75520000]      <2> 		mov	ax,[Length1]
  6886 0000520D 66D1E8              <2> 		shr ax, 1
  6887 00005210 E84B000000          <2> 		call WriteDSP
  6888 00005215 86C4                <2> 		xchg al,ah
  6889 00005217 E844000000          <2> 		call WriteDSP
  6890 0000521C C3                  <2> 		ret
  6891                              <2> 
  6892                              <2> MstrVol:    ;uses ax dx
  6893 0000521D 6650                <2> 	   push ax
  6894 0000521F 66BA2402            <2> 	   mov	dx,(BasePort+4)
  6895 00005223 B022                <2> 	   mov	al,22h
  6896 00005225 EE                  <2> 	   out	dx,al
  6897 00005226 6658                <2> 	   pop	ax
  6898 00005228 6642                <2> 	   inc	dx
  6899 0000522A EE                  <2> 	   out	dx,al
  6900 0000522B C3                  <2> 	   ret
  6901                              <2> 	   
  6902                              <2> ResetDSP:   ; uses cx dx
  6903 0000522C 66BA2602            <2> 			mov	dx,(BasePort+6)
  6904 00005230 B001                <2> 			mov	al,01
  6905 00005232 EE                  <2> 			out	dx,al
  6906 00005233 66B93200            <2> 			mov	cx,50
  6907 00005237 EC                  <2> WaitIt1:	in	al,dx
  6908 00005238 E2FD                <2> 			loop WaitIt1
  6909 0000523A 30C0                <2> 			xor	al,al
  6910 0000523C EE                  <2> 			out	dx,al
  6911 0000523D 66B93200            <2> 			mov	cx,50
  6912 00005241 EC                  <2> WaitIt2:	in	al,dx
  6913 00005242 E2FD                <2> 			loop WaitIt2
  6914 00005244 B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  6915 00005246 66BA2E02            <2> 			mov	dx,(BasePort+14)
  6916 0000524A EC                  <2> 			in	al,dx
  6917 0000524B 2480                <2> 			and	al,80h
  6918 0000524D 3C80                <2> 			cmp	al,80h
  6919 0000524F 750C                <2> 			jne	ResetErr
  6920 00005251 66BA2A02            <2> 			mov	dx,(BasePort+10)
  6921 00005255 EC                  <2> 			in	al,dx
  6922 00005256 3CAA                <2> 			cmp	al,0AAh
  6923 00005258 7503                <2> 			jne	ResetErr
  6924 0000525A B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  6925 0000525C C3                  <2> 			ret
  6926 0000525D 30C0                <2> ResetErr:	xor al, al
  6927 0000525F C3                  <2> 			ret
  6928                              <2> 
  6929                              <2> WriteDSP:   ;uses ax dx
  6930 00005260 6650                <2> 		push ax
  6931 00005262 66BA2C02            <2> 		mov	dx,(BasePort+12)
  6932 00005266 EC                  <2> WaitIt:	in	al,dx
  6933 00005267 2480                <2> 		and	al,80h
  6934 00005269 75FB                <2> 		jnz	WaitIt
  6935 0000526B 6658                <2> 		pop	ax
  6936 0000526D EE                  <2> 		out	dx,al
  6937 0000526E C3                  <2> 		ret
  6938                              <2> 
  6939 0000526F 00                  <2> Stereo db 0
  6940 00005270 00                  <2> OddLength db 0
  6941 00005271 00000000            <2> Length0 dd	0
  6942 00005275 0000                <2> Length1	dw  0
  6943 00005277 00000000            <2> NextMemLoc dd 0
  6944 0000527B 00000000            <2> MemLoc	dd  0
  6945 0000527F 0000                <2> SegLoc  dw 0
  6946 00005281 00                  <2> Page1	db  0
  6947 00005282 00000000            <2> Freq	dd	0
  6948                              <2> PgPort	equ 83h
  6949                              <2> AddPort	equ 02h
  6950                              <2> LenPort	equ 03h
  6951                              <2> ModeReg	equ 59h
  6952                              <2> Channel	equ 01h
  6953                              <2> BasePort	equ 220h
  6954 00005286 00                  <2> SoundBlaster	db 0
  6955                              <1> %endif
  6956                              <1> %ifdef io.serial
  6957                              <1> 	%include "source/drivers/input/serial.asm"
  6958                              <1> %else
  6959                              <1> 	%include "source/drivers/input/keyboard.asm"
  6960 00005287 00                  <2> specialkey db 0
  6961                              <2> ;charregion db 0
  6962                              <2> waitforinput:		;this is basically the idle process
  6963                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  6964                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  6965 00005288 6631C0              <2> 	xor ax, ax
  6966 0000528B A0[135E0000]        <2> 	mov al, [threadson]
  6967 00005290 8825[135E0000]      <2> 	mov [threadson], ah
  6968 00005296 FB                  <2> 	sti
  6969 00005297 F4                  <2> 	hlt
  6970 00005298 A2[135E0000]        <2> 	mov [threadson], al
  6971 0000529D 66813D[78220000]00- <2> 	cmp word [trans], 0
  6972 000052A5 00                  <2>
  6973 000052A6 7401                <2> 	je getkey
  6974 000052A8 C3                  <2> 	ret
  6975                              <2> getkey:
  6976 000052A9 31C0                <2> 		xor eax, eax
  6977 000052AB A2[87520000]        <2> 		mov [specialkey], al
  6978 000052B0 A3[74220000]        <2> 		mov [lastkey], eax
  6979 000052B5 E464                <2> 		in al, 64h ; Status
  6980                              <2> 	%ifdef gui.included
  6981                              <2> 		test al, 20h ; PS2-Mouse?
  6982                              <2> 		jnz near moused
  6983                              <2> 	%endif
  6984 000052B7 A801                <2> 		test al, 1 
  6985 000052B9 74CD                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  6986                              <2> 	calckey:
  6987 000052BB E460                <2> 		in al, 60h
  6988 000052BD 30E4                <2> 		xor ah, ah
  6989 000052BF 6689C3              <2> 		mov bx, ax
  6990 000052C2 66A3[76220000]      <2> 		mov [lastkey + 2], ax
  6991 000052C8 BF[57540000]        <2> 		mov edi, scancode
  6992                              <2> 	searchscan: 
  6993 000052CD 80FB3A              <2> 		cmp bl, 3Ah
  6994 000052D0 7314                <2> 		jae scanother
  6995 000052D2 C1E004              <2> 		shl eax, 4
  6996 000052D5 01C7                <2> 		add edi, eax
  6997 000052D7 668B07              <2> 		mov ax, [edi]
  6998 000052DA 663D0000            <2> 		cmp ax, 0
  6999 000052DE 7406                <2> 		je scanother
  7000 000052E0 E9D0000000          <2> 		jmp scanfound
  7001 000052E5 00                  <2> uppercase db 0
  7002                              <2> scanother:
  7003 000052E6 6631C0              <2> 		xor ax, ax
  7004 000052E9 66A3[74220000]      <2> 		mov [lastkey], ax
  7005 000052EF 80FBE0              <2> 		cmp bl, 0E0h
  7006 000052F2 0F8477000000        <2> 		je near getkeyspecial
  7007 000052F8 803D[87520000]E0    <2> 		cmp byte [specialkey], 0xE0
  7008 000052FF 7525                <2> 		jne nospecialkey
  7009 00005301 80FB38              <2> 		cmp bl, 38h
  7010 00005304 0F849A000000        <2> 		je near alton
  7011 0000530A 80FBB8              <2> 		cmp bl, 0B8h
  7012 0000530D 0F8499000000        <2> 		je near altoff
  7013 00005313 80FB1D              <2> 		cmp bl, 1Dh
  7014 00005316 0F8478000000        <2> 		je near ctron
  7015 0000531C 80FB9D              <2> 		cmp bl, 9Dh
  7016 0000531F 0F8477000000        <2> 		je near ctroff
  7017 00005325 C3                  <2> 		ret
  7018                              <2> nospecialkey:
  7019 00005326 80FB2A              <2> 		cmp bl, 2Ah
  7020 00005329 0F8455000000        <2> 		je near shifton
  7021 0000532F 80FB36              <2> 		cmp bl, 36h
  7022 00005332 0F844C000000        <2> 		je near shifton
  7023 00005338 80FB1C              <2> 		cmp bl, 1Ch
  7024 0000533B 0F8473000000        <2> 		je near entdown
  7025 00005341 80FBAA              <2> 		cmp bl, 0AAh
  7026 00005344 0F8442000000        <2> 		je near shiftoff
  7027 0000534A 80FBB6              <2> 		cmp bl, 0B6h
  7028 0000534D 0F8439000000        <2> 		je near shiftoff
  7029 00005353 80FB3A              <2> 		cmp bl, 3Ah
  7030 00005356 0F84A7000000        <2> 		je near capslock
  7031 0000535C 80FB45              <2> 		cmp bl, 0x45
  7032 0000535F 0F84AF000000        <2> 		je near numlock
  7033 00005365 80FB46              <2> 		cmp bl, 0x46
  7034 00005368 0F84BE000000        <2> 		je near scrolllock
  7035 0000536E C3                  <2> 		ret
  7036                              <2> 	getkeyspecial:
  7037 0000536F C605[87520000]E0    <2> 		mov byte [specialkey], 0xE0
  7038 00005376 E940FFFFFF          <2> 		jmp calckey
  7039                              <2> 	shift:
  7040 0000537B A0[E5520000]        <2> 		mov al, [uppercase]
  7041 00005380 3C01                <2> 		cmp al, 1
  7042 00005382 7308                <2> 		jae shiftoff
  7043                              <2> 	shifton:
  7044 00005384 C605[E5520000]01    <2> 		mov byte [uppercase], 1
  7045 0000538B C3                  <2> 		ret
  7046                              <2> 	shiftoff:
  7047 0000538C C605[E5520000]00    <2> 		mov byte [uppercase], 0
  7048 00005393 C3                  <2> 		ret
  7049                              <2> 	ctron:
  7050 00005394 C605[02540000]01    <2> 		mov byte [ctrkey], 1
  7051 0000539B C3                  <2> 		ret
  7052                              <2> 	ctroff:
  7053 0000539C C605[02540000]00    <2> 		mov byte [ctrkey], 0
  7054 000053A3 C3                  <2> 		ret
  7055                              <2> 	alton:
  7056 000053A4 C605[01540000]01    <2> 		mov byte [altkey], 1
  7057 000053AB C3                  <2> 		ret
  7058                              <2> 	altoff:
  7059 000053AC C605[01540000]00    <2> 		mov byte [altkey], 0
  7060 000053B3 C3                  <2> 		ret
  7061                              <2> 	entdown:
  7062 000053B4 C3                  <2> 		ret
  7063                              <2> scanfound:
  7064 000053B5 81C708000000        <2> 		add edi, 8
  7065 000053BB 803D[02540000]01    <2> 		cmp byte [ctrkey], 1
  7066 000053C2 7306                <2> 		jae ctrlin
  7067 000053C4 81EF08000000        <2> 		sub edi, 8
  7068                              <2> 	ctrlin:
  7069 000053CA 81C704000000        <2> 		add edi, 4
  7070 000053D0 803D[01540000]01    <2> 		cmp byte [altkey], 1
  7071 000053D7 7306                <2> 		jae altin
  7072 000053D9 81EF04000000        <2> 		sub edi, 4
  7073                              <2> 	altin:
  7074 000053DF 81C702000000        <2> 		add edi, 2
  7075 000053E5 803D[E5520000]01    <2> 		cmp byte [uppercase], 1
  7076 000053EC 7306                <2> 		jae uppercaseon
  7077 000053EE 81EF02000000        <2> 		sub edi, 2
  7078                              <2> 	uppercaseon:
  7079 000053F4 668B07              <2> 		mov ax,[edi]
  7080 000053F7 66A3[74220000]      <2> 		mov [lastkey], ax
  7081 000053FD C3                  <2> 		ret
  7082                              <2> 		
  7083 000053FE 00                  <2> keyboardstatus db 0
  7084 000053FF 00                  <2> numlockstatus db 0
  7085 00005400 00                  <2> scrolllockstatus db 0
  7086 00005401 00                  <2> altkey db 0
  7087 00005402 00                  <2> ctrkey db 0
  7088                              <2> 	capslock:
  7089 00005403 8035[FE530000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7090 0000540A E835000000          <2> 		call updatekblights
  7091 0000540F E967FFFFFF          <2> 		jmp shift
  7092                              <2> 		
  7093                              <2> 	numlock:
  7094 00005414 8035[FE530000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7095 0000541B 8035[FF530000]01    <2> 		xor byte [numlockstatus], 1
  7096 00005422 E81D000000          <2> 		call updatekblights
  7097 00005427 E97DFEFFFF          <2> 		jmp getkey
  7098                              <2> 	
  7099                              <2> 	scrolllock:
  7100 0000542C 8035[FE530000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7101 00005433 8035[00540000]01    <2> 		xor byte [scrolllockstatus], 1
  7102 0000543A E805000000          <2> 		call updatekblights
  7103 0000543F E965FEFFFF          <2> 		jmp getkey
  7104                              <2> 		
  7105                              <2> 	updatekblights:
  7106 00005444 B0ED                <2> 		mov al, 0xED
  7107 00005446 66BA6000            <2> 		mov dx, 0x60
  7108 0000544A EE                  <2> 		out dx, al
  7109                              <2> 	chkkbdack:
  7110 0000544B EC                  <2> 		in al, dx
  7111 0000544C 3CFA                <2> 		cmp al, 0xFA
  7112 0000544E 75FB                <2> 		jne chkkbdack
  7113 00005450 A0[FE530000]        <2> 		mov al, [keyboardstatus]
  7114 00005455 EE                  <2> 		out dx, al
  7115 00005456 C3                  <2> 		ret
  7116                              <2> 		
  7117                              <2> scancode:
  7118                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  7119 00005457 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7120 00005460 00000000000000      <2>
  7121 00005467 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7122 00005470 00000000000000      <2>
  7123 00005477 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  7124 00005480 00000000000000      <2>
  7125 00005487 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  7126 00005490 00000000000000      <2>
  7127 00005497 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  7128 000054A0 00000000000000      <2>
  7129 000054A7 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  7130 000054B0 00000000000000      <2>
  7131 000054B7 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  7132 000054C0 00000000000000      <2>
  7133 000054C7 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  7134 000054D0 00000000000000      <2>
  7135 000054D7 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  7136 000054E0 00000000000000      <2>
  7137 000054E7 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  7138 000054F0 00000000000000      <2>
  7139 000054F7 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  7140 00005500 00000000000000      <2>
  7141 00005507 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  7142 00005510 00000000000000      <2>
  7143 00005517 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  7144 00005520 00000000000000      <2>
  7145 00005527 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  7146 00005530 00000000000000      <2>
  7147 00005537 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  7148 00005540 00000000000000      <2>
  7149 00005547 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7150 00005550 00000000000000      <2>
  7151 00005557 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  7152 0000555F 003A0039041904      <2>
  7153 00005567 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  7154 00005570 03000046042604      <2>
  7155 00005577 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  7156 00005580 03950343042304      <2>
  7157 00005587 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  7158 00005590 03A1033A041A04      <2>
  7159 00005597 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  7160 000055A0 03A40335041504      <2>
  7161 000055A7 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  7162 000055B0 03A5033D041D04      <2>
  7163 000055B7 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  7164 000055C0 03980333041304      <2>
  7165 000055C7 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  7166 000055D0 03990348042804      <2>
  7167 000055D7 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  7168 000055E0 039F0349042904      <2>
  7169 000055E7 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  7170 000055F0 03A00337041704      <2>
  7171 000055F7 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  7172 00005600 00000045042504      <2>
  7173 00005607 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  7174 00005610 0000004A042A04      <2>
  7175 00005617 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7176 00005620 00000000000000      <2>
  7177 00005627 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7178 00005630 00000000000000      <2>
  7179 00005637 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  7180 00005640 03910344042404      <2>
  7181 00005647 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  7182 00005650 03A3034B042B04      <2>
  7183 00005657 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  7184 00005660 03940332041204      <2>
  7185 00005667 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  7186 00005670 03A60330041004      <2>
  7187 00005677 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  7188 00005680 0393033F041F04      <2>
  7189 00005687 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  7190 00005690 03970340042004      <2>
  7191 00005697 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  7192 000056A0 039E033E041E04      <2>
  7193 000056A7 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  7194 000056B0 039A033B041B04      <2>
  7195 000056B7 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  7196 000056C0 039B0334041404      <2>
  7197 000056C7 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  7198 000056D0 00000036041604      <2>
  7199 000056D7 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  7200 000056E0 0000004D042D04      <2>
  7201 000056E7 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  7202 000056F0 00000051040104      <2>
  7203 000056F7 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7204 00005700 00000000000000      <2>
  7205 00005707 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  7206 00005710 0000002F005C00      <2>
  7207 00005717 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  7208 00005720 0396034F042F04      <2>
  7209 00005727 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  7210 00005730 03A70347042704      <2>
  7211 00005737 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  7212 00005740 03A80341042104      <2>
  7213 00005747 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  7214 00005750 03A9033C041C04      <2>
  7215 00005757 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  7216 00005760 03920338041804      <2>
  7217 00005767 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  7218 00005770 039D0342042204      <2>
  7219 00005777 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  7220 00005780 039C034C042C04      <2>
  7221 00005787 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  7222 00005790 00000031041104      <2>
  7223 00005797 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  7224 000057A0 0000004E042E04      <2>
  7225 000057A7 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  7226 000057B0 0000002E002C00      <2>
  7227 000057B7 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7228 000057C0 00000000000000      <2>
  7229 000057C7 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7230 000057D0 00000000000000      <2>
  7231 000057D7 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7232 000057E0 00000000000000      <2>
  7233 000057E7 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  7234 000057F0 00000000000000      <2>
  7235                              <2> noscan:
  7236                              <2> 
  7237                              <1> %endif
  7238                              <1> ;drivers will soon be handled intelligently
  7239                              <1> ;every driver's source will be scanned for a .init function
  7240                              <1> ;that will be called and if it returns 0
  7241                              <1> ;the hardware was found and the driver initialized properly
  7242                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7243                              <1> 	%ifdef sound.included
  7244 000057F7 E84AF8FFFF          <1> 		call sblaster.init
  7245                              <1> 	%endif
  7246                              <1> 	%ifdef network.included
  7247 000057FC E817060000          <1> 		call network.init
  7248                              <1> 	%endif
  7249 00005801 C3                  <1> 	ret
  7250                              <1> initialize:
  7251                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7252 00005802 E839000000          <1> 	call .pic
  7253                              <1> %ifdef terminal.vsync
  7254                              <1> 	call .rtc
  7255                              <1> %endif
  7256 00005807 E896000000          <1> 	call .pit
  7257 0000580C E8B8000000          <1> 	call .fpu
  7258 00005811 E8C9000000          <1> 	call .sse
  7259 00005816 31C0                <1> 	xor eax, eax
  7260 00005818 31C9                <1> 	xor ecx, ecx
  7261                              <1> %ifdef io.serial
  7262                              <1> 	call serial.init
  7263                              <1> %endif
  7264 0000581A E801000000          <1> 	call .time
  7265 0000581F C3                  <1> 	ret
  7266                              <1> 	
  7267                              <1> .time:
  7268 00005820 E83FE6FFFF          <1> 	call time
  7269 00005825 E8E7E7FFFF          <1> 	call timeconvert
  7270 0000582A 890D[46020000]      <1> 	mov [timeseconds], ecx
  7271 00005830 31C9                <1> 	xor ecx, ecx
  7272 00005832 890D[4A020000]      <1> 	mov [timenanoseconds], ecx
  7273 00005838 C605[AC3D0000]01    <1> 	mov byte [istimeset], 1
  7274 0000583F C3                  <1> 	ret
  7275                              <1> 	
  7276                              <1> .pic:
  7277 00005840 B011                <1> 	mov al, 0x11
  7278 00005842 E620                <1> 	out 0x20, al
  7279 00005844 E6A0                <1> 	out 0xA0, al
  7280 00005846 B040                <1> 	mov al, 0x40	;interrupt for master
  7281 00005848 E621                <1> 	out 0x21, al
  7282 0000584A B048                <1> 	mov al, 0x48	;interrupt for slave
  7283 0000584C E6A1                <1> 	out 0xA1, al
  7284 0000584E B004                <1> 	mov al, 4
  7285 00005850 E621                <1> 	out 0x21, al
  7286 00005852 B002                <1> 	mov al, 2
  7287 00005854 E6A1                <1> 	out 0xA1, al
  7288 00005856 B001                <1> 	mov al, 0x1
  7289 00005858 E621                <1> 	out 0x21, al
  7290 0000585A B001                <1> 	mov al, 0x1
  7291 0000585C E6A1                <1> 	out 0xA1, al
  7292                              <1> 	;masks are set to zero so as not to mask
  7293 0000585E 30C0                <1> 	xor al, al
  7294 00005860 E621                <1> 	out 0x21, al
  7295 00005862 30C0                <1> 	xor al, al
  7296 00005864 E6A1                <1> 	out 0xA1, al
  7297 00005866 B020                <1> 	mov al, 0x20
  7298 00005868 E6A0                <1> 	out 0xA0, al
  7299 0000586A E620                <1> 	out 0x20, al
  7300 0000586C C3                  <1> 	ret
  7301                              <1> .rtc:
  7302 0000586D B008                <1> 	mov al, 0x8
  7303 0000586F 88C4                <1> 	mov ah, al
  7304 00005871 66BA7000            <1> 	mov dx, 0x70
  7305 00005875 EE                  <1> 	out dx, al
  7306 00005876 6642                <1> 	inc dx
  7307 00005878 EC                  <1> 	in al, dx
  7308 00005879 86C4                <1> 	xchg al, ah
  7309 0000587B 664A                <1> 	dec dx
  7310 0000587D EE                  <1> 	out dx, al
  7311 0000587E 6642                <1> 	inc dx
  7312 00005880 86C4                <1> 	xchg al, ah
  7313 00005882 0C40                <1> 	or al, 0x40
  7314 00005884 EE                  <1> 	out dx, al
  7315                              <1> 	
  7316 00005885 B00A                <1> 	mov al, 0xA
  7317 00005887 664A                <1> 	dec dx
  7318 00005889 EE                  <1> 	out dx, al
  7319 0000588A 86C4                <1> 	xchg al, ah
  7320 0000588C 6642                <1> 	inc dx
  7321 0000588E EC                  <1> 	in al, dx
  7322 0000588F 24F0                <1> 	and al, 0xF0
  7323 00005891 0A05[0D030000]      <1> 	or al, [rtcrate]
  7324 00005897 86C4                <1> 	xchg al, ah
  7325 00005899 664A                <1> 	dec dx
  7326 0000589B EE                  <1> 	out dx, al
  7327 0000589C 6642                <1> 	inc dx
  7328 0000589E 86C4                <1> 	xchg al, ah
  7329 000058A0 EE                  <1> 	out dx, al
  7330 000058A1 C3                  <1> 	ret
  7331                              <1> 	
  7332                              <1> .pit:
  7333                              <1> 	;initialize the PIT
  7334 000058A2 66A1[3F020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7335 000058A8 E640                <1> 	out 0x40, al
  7336 000058AA 66C1C008            <1> 	rol ax, 8
  7337 000058AE E640                <1> 	out 0x40, al
  7338                              <1> 	;enable rtc interrupt
  7339 000058B0 B00B                <1> 	mov al, 0xB
  7340 000058B2 E670                <1> 	out 0x70, al
  7341 000058B4 66C1C008            <1> 	rol ax, 8
  7342 000058B8 E471                <1> 	in al, 0x71
  7343 000058BA 66C1C008            <1> 	rol ax, 8
  7344 000058BE E670                <1> 	out 0x70, al
  7345 000058C0 66C1C008            <1> 	rol ax, 8
  7346 000058C4 0C40                <1> 	or al, 0x40
  7347 000058C6 E671                <1> 	out 0x71, al
  7348 000058C8 C3                  <1> 	ret
  7349                              <1> .fpu:
  7350                              <1> 	;And now to initialize the fpu
  7351 000058C9 0F20E0              <1> 	mov eax, cr4
  7352 000058CC 0D00020000          <1> 	or eax, 0x200
  7353 000058D1 0F22E0              <1> 	mov cr4, eax
  7354 000058D4 B87F0B0000          <1> 	mov eax, 0xB7F
  7355 000058D9 50                  <1> 	push eax
  7356 000058DA D92C24              <1> 	fldcw [esp]
  7357 000058DD 58                  <1> 	pop eax
  7358 000058DE C3                  <1> 	ret
  7359                              <1> 	
  7360                              <1> .sse:
  7361 000058DF 0F20C0              <1> 	mov eax, cr0
  7362 000058E2 24FB                <1> 	and al, 11111011b
  7363 000058E4 0C02                <1> 	or al, 00000010b
  7364 000058E6 0F22C0              <1> 	mov cr0, eax
  7365 000058E9 0F20E0              <1> 	mov eax, cr4
  7366 000058EC 660D0006            <1> 	or ax, 0000011000000000b
  7367 000058F0 0F22E0              <1> 	mov cr4, eax
  7368 000058F3 C3                  <1> 	ret
  7369                                      %include "source/pci.asm"
  7370 000058F4 00                  <1> pcibus		db 0
  7371 000058F5 00                  <1> pcidevice	db 0
  7372 000058F6 00                  <1> pcifunction	db 0
  7373 000058F7 00                  <1> pciregister	db 0
  7374 000058F8 00                  <1> pcireqtype	db 0
  7375 000058F9 00000000            <1> pcidevid	dd 0
  7376 000058FD FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  7377                              <1> getpcimem:
  7378 00005901 B002                <1> 	mov al, 2
  7379 00005903 A2[F8580000]        <1> 	mov [pcireqtype], al
  7380 00005908 E922000000          <1> 	jmp searchpci
  7381                              <1> getpciport:
  7382 0000590D B001                <1> 	mov al, 1
  7383 0000590F A2[F8580000]        <1> 	mov [pcireqtype], al
  7384 00005914 E916000000          <1> 	jmp searchpci
  7385                              <1> pcidump:
  7386 00005919 31C0                <1> 	xor eax, eax
  7387 0000591B A2[F6580000]        <1> 	mov [pcifunction], al
  7388 00005920 A2[F4580000]        <1> 	mov [pcibus], al
  7389 00005925 A2[F5580000]        <1> 	mov [pcidevice], al
  7390 0000592A A2[F8580000]        <1> 	mov [pcireqtype], al
  7391                              <1> searchpci:		;return in ebx, start X in pciX
  7392 0000592F 30C0                <1> 	xor al, al
  7393 00005931 A2[F7580000]        <1> 	mov [pciregister], al
  7394 00005936 E823020000          <1> 	call getpciaddr
  7395 0000593B BAF80C0000          <1> 	mov edx, 0xCF8
  7396 00005940 EF                  <1> 	out dx, eax	;request pci config
  7397 00005941 BAFC0C0000          <1> 	mov edx, 0xCFC
  7398 00005946 ED                  <1> 	in eax, dx 	;read in pci config
  7399 00005947 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7400 0000594C 0F823D000000        <1> 	jb near checkpcidevice
  7401                              <1> searchpciret:
  7402                              <1> nextpcidevice:
  7403 00005952 30C0                <1> 	xor al, al
  7404 00005954 A2[F6580000]        <1> 	mov [pcifunction], al
  7405 00005959 A0[F5580000]        <1> 	mov al, [pcidevice]
  7406 0000595E 3C1F                <1> 	cmp al, 11111b
  7407 00005960 0F8306010000        <1> 	jae near nextpcibus
  7408 00005966 FEC0                <1> 	inc al
  7409 00005968 A2[F5580000]        <1> 	mov [pcidevice], al
  7410 0000596D E9BDFFFFFF          <1> 	jmp searchpci
  7411 00005972 A0[F6580000]        <1> 	mov al, [pcifunction]
  7412 00005977 3C07                <1> 	cmp al, 111b
  7413 00005979 0F83D3FFFFFF        <1> 	jae near nextpcidevice
  7414 0000597F FEC0                <1> 	inc al
  7415 00005981 A2[F6580000]        <1> 	mov [pcifunction], al
  7416 00005986 E9A4FFFFFF          <1> 	jmp searchpci
  7417 0000598B 00000000            <1> pcitype: db 0,0,0,0
  7418                              <1> checkpcidevice:
  7419 0000598F 31C0                <1> 	xor eax, eax
  7420 00005991 3905[F9580000]      <1> 	cmp [pcidevid], eax
  7421 00005997 0F8430000000        <1> 	je near .good
  7422 0000599D A2[F7580000]        <1> 	mov [pciregister], al	;device id, vendor id
  7423 000059A2 E8B7010000          <1> 	call getpciaddr
  7424 000059A7 BAF80C0000          <1> 	mov edx, 0xCF8
  7425 000059AC EF                  <1> 	out dx, eax
  7426 000059AD BAFC0C0000          <1> 	mov edx, 0xCFC
  7427 000059B2 ED                  <1> 	in eax, dx
  7428 000059B3 2305[FD580000]      <1> 	and eax, [pcidevidmask]
  7429 000059B9 8B1D[F9580000]      <1> 	mov ebx, [pcidevid]
  7430 000059BF 231D[FD580000]      <1> 	and ebx, [pcidevidmask]
  7431 000059C5 39D8                <1> 	cmp eax, ebx
  7432 000059C7 0F8585FFFFFF        <1> 	jne near searchpciret
  7433                              <1> .good:
  7434 000059CD 30C0                <1> 	xor al, al
  7435 000059CF 3805[F8580000]      <1> 	cmp [pcireqtype], al
  7436 000059D5 0F842C000000        <1> 	je near dumppcidevice
  7437 000059DB B008                <1> 	mov al, 0x08
  7438 000059DD A2[F7580000]        <1> 	mov [pciregister], al	;class code, subclass, revision id
  7439 000059E2 E877010000          <1> 	call getpciaddr
  7440 000059E7 BAF80C0000          <1> 	mov edx, 0xCF8
  7441 000059EC EF                  <1> 	out dx, eax
  7442 000059ED BAFC0C0000          <1> 	mov edx, 0xCFC
  7443 000059F2 ED                  <1> 	in eax, dx
  7444 000059F3 C1C008              <1> 	rol eax, 8
  7445 000059F6 3A05[8B590000]      <1> 	cmp al, [pcitype]
  7446 000059FC 0F84A0000000        <1> 	je near foundpciaddr
  7447 00005A02 E94BFFFFFF          <1> 	jmp searchpciret
  7448                              <1> dumppcidevice:
  7449 00005A07 30C0                <1> 	xor al, al
  7450 00005A09 A2[F7580000]        <1> 	mov [pciregister], al
  7451 00005A0E E84B010000          <1> 	call getpciaddr
  7452 00005A13 89C1                <1> 	mov ecx, eax
  7453 00005A15 C605[722F0000]05    <1> 	mov byte [firsthexshown], 5
  7454 00005A1C E866D5FFFF          <1> 	call showhex
  7455                              <1> dumppcidevicelp:
  7456 00005A21 A2[F7580000]        <1> 	mov [pciregister], al
  7457 00005A26 E833010000          <1> 	call getpciaddr
  7458 00005A2B BAF80C0000          <1> 	mov edx, 0xCF8
  7459 00005A30 EF                  <1> 	out dx, eax
  7460 00005A31 BAFC0C0000          <1> 	mov edx, 0xCFC
  7461 00005A36 ED                  <1> 	in eax, dx
  7462 00005A37 89C1                <1> 	mov ecx, eax
  7463 00005A39 A0[F7580000]        <1> 	mov al, [pciregister]
  7464 00005A3E 0404                <1> 	add al, 4
  7465 00005A40 C605[722F0000]05    <1> 	mov byte [firsthexshown], 5
  7466 00005A47 E83BD5FFFF          <1> 	call showhex
  7467 00005A4C 3C3C                <1> 	cmp al, 0x3C
  7468 00005A4E 72D1                <1> 	jb dumppcidevicelp
  7469                              <1> dumppcidn:
  7470                              <1> %ifdef io.serial
  7471                              <1> 	mov esi, line
  7472                              <1> 	call print
  7473                              <1> %else
  7474 00005A50 803D[A4240000]00    <1> 	cmp byte [charpos], 0
  7475 00005A57 0F84F5FEFFFF        <1> 	je near searchpciret
  7476 00005A5D BE[B9620000]        <1> 	mov esi, line
  7477 00005A62 E897C1FFFF          <1> 	call print
  7478                              <1> %endif
  7479 00005A67 E9E6FEFFFF          <1> 	jmp searchpciret
  7480                              <1> nextpcibus:
  7481 00005A6C 30C0                <1> 	xor al, al
  7482 00005A6E A2[F5580000]        <1> 	mov [pcidevice], al
  7483 00005A73 A0[F4580000]        <1> 	mov al, [pcibus]
  7484 00005A78 3C7F                <1> 	cmp al, 1111111b
  7485 00005A7A 730C                <1> 	jae donesearchpci
  7486 00005A7C FEC0                <1> 	inc al
  7487 00005A7E A2[F4580000]        <1> 	mov [pcibus], al
  7488 00005A83 E9A7FEFFFF          <1> 	jmp searchpci
  7489                              <1> donesearchpci:
  7490 00005A88 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  7491 00005A8D 31D2                <1> 	xor edx, edx
  7492 00005A8F 8815[8B590000]      <1> 	mov [pcitype], dl
  7493 00005A95 8915[F9580000]      <1> 	mov [pcidevid], edx
  7494 00005A9B 891D[FD580000]      <1> 	mov [pcidevidmask], ebx
  7495 00005AA1 C3                  <1> 	ret
  7496                              <1> foundpciaddr:
  7497 00005AA2 B010                <1> 	mov al, 0x10
  7498 00005AA4 A2[F7580000]        <1> 	mov [pciregister], al
  7499 00005AA9 803D[F8580000]02    <1> 	cmp byte [pcireqtype], 2
  7500 00005AB0 7443                <1> 	je findpcimemaddr
  7501                              <1> findpciioaddr:
  7502 00005AB2 E8A7000000          <1> 	call getpciaddr
  7503 00005AB7 BAF80C0000          <1> 	mov edx, 0xCF8
  7504 00005ABC EF                  <1> 	out dx, eax
  7505 00005ABD BAFC0C0000          <1> 	mov edx, 0xCFC
  7506 00005AC2 ED                  <1> 	in eax, dx
  7507 00005AC3 89C3                <1> 	mov ebx, eax
  7508 00005AC5 81E301000000        <1> 	and ebx, 1
  7509 00005ACB 81FB00000000        <1> 	cmp ebx, 0
  7510 00005AD1 0F846E000000        <1> 	je near notpciioaddr
  7511 00005AD7 2D01000000          <1> 	sub eax, 1
  7512 00005ADC 89C2                <1> 	mov edx, eax
  7513 00005ADE 31DB                <1> 	xor ebx, ebx
  7514 00005AE0 4B                  <1> 	dec ebx
  7515 00005AE1 891D[FD580000]      <1> 	mov [pcidevidmask], ebx
  7516 00005AE7 43                  <1> 	inc ebx
  7517 00005AE8 881D[8B590000]      <1> 	mov [pcitype], bl
  7518 00005AEE 891D[F9580000]      <1> 	mov [pcidevid], ebx
  7519 00005AF4 C3                  <1> 	ret
  7520                              <1> findpcimemaddr:
  7521 00005AF5 E864000000          <1> 	call getpciaddr
  7522 00005AFA BAF80C0000          <1> 	mov edx, 0xCF8
  7523 00005AFF EF                  <1> 	out dx, eax
  7524 00005B00 BAFC0C0000          <1> 	mov edx, 0xCFC
  7525 00005B05 ED                  <1> 	in eax, dx
  7526 00005B06 89C3                <1> 	mov ebx, eax
  7527 00005B08 81E301000000        <1> 	and ebx, 1
  7528 00005B0E 81FB01000000        <1> 	cmp ebx, 1
  7529 00005B14 0F842B000000        <1> 	je near notpciioaddr
  7530 00005B1A C1E804              <1> 	shr eax, 4
  7531 00005B1D C1E004              <1> 	shl eax, 4	;remove prefetch and type
  7532 00005B20 89C2                <1> 	mov edx, eax
  7533 00005B22 50                  <1> 	push eax
  7534 00005B23 A1[26020000]        <1> 	mov eax, [basecache]
  7535 00005B28 C1E004              <1> 	shl eax, 4
  7536 00005B2B 29C2                <1> 	sub edx, eax
  7537 00005B2D 58                  <1> 	pop eax
  7538 00005B2E 31DB                <1> 	xor ebx, ebx
  7539 00005B30 4B                  <1> 	dec ebx
  7540 00005B31 891D[FD580000]      <1> 	mov [pcidevidmask], ebx
  7541 00005B37 43                  <1> 	inc ebx
  7542 00005B38 881D[8B590000]      <1> 	mov [pcitype], bl
  7543 00005B3E 891D[F9580000]      <1> 	mov [pcidevid], ebx
  7544 00005B44 C3                  <1> 	ret
  7545                              <1> notpciioaddr:
  7546 00005B45 A0[F7580000]        <1> 	mov al, [pciregister]
  7547 00005B4A 0404                <1> 	add al, 4
  7548 00005B4C 3C28                <1> 	cmp al, 0x28
  7549 00005B4E 0F87FEFDFFFF        <1> 	ja near searchpciret
  7550 00005B54 A2[F7580000]        <1> 	mov [pciregister], al
  7551 00005B59 E954FFFFFF          <1> 	jmp findpciioaddr
  7552                              <1> getpciaddr:		;puts it in eax and ebx
  7553 00005B5E 31C0                <1> 			xor eax, eax
  7554 00005B60 BB00000080          <1> 			mov ebx, 0x80000000
  7555 00005B65 A0[F4580000]        <1> 			mov al, [pcibus]
  7556 00005B6A C1E010              <1> 			shl eax, 16
  7557 00005B6D 01C3                <1> 			add ebx, eax
  7558 00005B6F 31C0                <1> 			xor eax, eax
  7559 00005B71 A0[F5580000]        <1> 			mov al, [pcidevice]
  7560 00005B76 C1E00B              <1> 			shl eax, 11
  7561 00005B79 01C3                <1> 			add ebx, eax
  7562 00005B7B 31C0                <1> 			xor eax, eax
  7563 00005B7D A0[F6580000]        <1> 			mov al, [pcifunction]
  7564 00005B82 C1E008              <1> 			shl eax, 8
  7565 00005B85 01C3                <1> 			add ebx, eax
  7566 00005B87 31C0                <1> 			xor eax, eax
  7567 00005B89 A0[F7580000]        <1> 			mov al, [pciregister]
  7568 00005B8E 01C3                <1> 			add ebx, eax
  7569 00005B90 89D8                <1> 			mov eax, ebx
  7570 00005B92 C3                  <1> 			ret
  7571                                      %include "source/disk.asm"
  7572                              <1> %ifdef disk.real
  7573                              <1> 	%include "source/drivers/disk/realmode.asm"
  7574                              <2> diskr:
  7575                              <2> 			;sector count in cl
  7576                              <2> 			;disk number in ch
  7577                              <2> 			;48 bit address with last 32 bits in ebx
  7578                              <2> 			;buffer in esi
  7579                              <2> 			;puts end of buffer in edi and end lba address in edx
  7580 00005B93 880D[BA5B0000]      <2> 	mov [sdlength], cl
  7581 00005B99 891D[BB5B0000]      <2> 	mov [sdaddress], ebx
  7582 00005B9F 8935[3C5D0000]      <2> 	mov [oldesireal], esi
  7583 00005BA5 66BE[BF5B]          <2> 	mov si, readdiskreal
  7584 00005BA9 668935[D20C0000]    <2> 	mov [realmodeptr], si
  7585 00005BB0 E80BB0FFFF          <2> 	call realmode
  7586 00005BB5 E941000000          <2> 	jmp backfromrealread
  7587 00005BBA 00                  <2> sdlength db 0
  7588 00005BBB 00000000            <2> sdaddress dd 0
  7589                              <2> 
  7590                              <2> [BITS 16]
  7591                              <2> readdiskreal:
  7592 00005BBF C706[EB5B]1000      <2> 	mov word [dlen], 0x10
  7593 00005BC5 C706[EF5B]0000      <2> 	mov word [daddress], 0
  7594 00005BCB C706[F15B]0001      <2> 	mov word [dsegm], 0x100
  7595 00005BD1 66891E[F35B]        <2> 	mov [dlbaad], ebx
  7596 00005BD6 880E[ED5B]          <2> 	mov [dreadlen], cl
  7597                              <2> ReadHardDisk:
  7598 00005BDA BE[EB5B]            <2> 	mov si, diskaddresspacket
  7599 00005BDD 31C0                <2> 	xor ax, ax
  7600 00005BDF B442                <2> 	mov ah, 0x42
  7601 00005BE1 8A16[EA5B]          <2> 	mov dl, [dnumber]
  7602 00005BE5 CD13                <2> 	int 0x13
  7603 00005BE7 72F1                <2> 	jc ReadHardDisk
  7604 00005BE9 C3                  <2> 	ret
  7605                              <2> 
  7606 00005BEA 80                  <2> dnumber db 0x80
  7607                              <2> diskaddresspacket:
  7608 00005BEB 10                  <2> dlen:	db 0x10 ;size of packet
  7609 00005BEC 00                  <2> 		db 0
  7610 00005BED 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  7611 00005BEF 0000                <2> daddress:	dw 0	;address 0
  7612 00005BF1 0001                <2> dsegm:		dw 0x100	;segment
  7613                              <2> 		;start with known value for hd
  7614                              <2> dlbaad:
  7615 00005BF3 00000000            <2> 	dd 0	;lba address
  7616 00005BF7 00000000            <2> 	dd 0
  7617                              <2> [BITS 32]
  7618                              <2> backfromrealread:
  7619 00005BFB 8B35[3C5D0000]      <2> 	mov esi, [oldesireal]
  7620 00005C01 8B1D[BB5B0000]      <2> 	mov ebx, [sdaddress]
  7621 00005C07 31C9                <2> 	xor ecx, ecx
  7622 00005C09 8A0D[BA5B0000]      <2> 	mov cl, [sdlength]
  7623 00005C0F 01CB                <2> 	add ebx, ecx
  7624 00005C11 66B80800            <2> 	mov ax, LINEAR_SEL
  7625 00005C15 8EE0                <2> 	mov fs, ax
  7626 00005C17 BF00100000          <2> 	mov edi, 0x1000
  7627 00005C1C B200                <2> 	mov dl, 0
  7628 00005C1E D0E1                <2> 	shl cl, 1
  7629                              <2> copyfromrmodedisk:
  7630 00005C20 648A07              <2> 	mov al, [fs:edi]
  7631 00005C23 8806                <2> 	mov [esi], al
  7632 00005C25 47                  <2> 	inc edi
  7633 00005C26 46                  <2> 	inc esi
  7634 00005C27 FECA                <2> 	dec dl
  7635 00005C29 80FA00              <2> 	cmp dl, 0
  7636 00005C2C 75F2                <2> 	jne copyfromrmodedisk
  7637 00005C2E FEC9                <2> 	dec cl
  7638 00005C30 B200                <2> 	mov dl, 0
  7639 00005C32 80F900              <2> 	cmp cl, 0
  7640 00005C35 75E9                <2> 	jne copyfromrmodedisk
  7641 00005C37 66B83000            <2> 	mov ax, NEW_DATA_SEL
  7642 00005C3B 8EE0                <2> 	mov fs, ax
  7643 00005C3D 89F7                <2> 	mov edi, esi
  7644 00005C3F 8B35[3C5D0000]      <2> 	mov esi, [oldesireal]
  7645 00005C45 89DA                <2> 	mov edx, ebx
  7646 00005C47 8B1D[BB5B0000]      <2> 	mov ebx, [sdaddress]
  7647 00005C4D C3                  <2> 	ret
  7648                              <2> 	
  7649                              <1> %else
  7650                              <1> 	%ifdef disk.protected
  7651                              <1> 		%include "source/drivers/disk/pata.asm"
  7652                              <1> 	%endif
  7653                              <1> %endif
  7654                              <1> %ifdef disk.none
  7655                              <1> loadfile:	xor edx, edx
  7656                              <1> 			cmp byte [edi], '&'
  7657                              <1> 			je .ret
  7658                              <1> 			mov edx, 404	;no files are found except &
  7659                              <1> 		.ret:
  7660                              <1> 			ret
  7661                              <1> %else
  7662                              <1> ;This loads files using the methods in the loaded driver
  7663                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  7664                              <1> 			;returns with err code in edx and file end in edi
  7665 00005C4E 803F00              <1> 	cmp byte [edi], 0
  7666 00005C51 0F8448000000        <1> 	je near nofileload
  7667 00005C57 89FA                <1> 	mov edx, edi
  7668 00005C59 BB[38650300]        <1> 	mov ebx, diskfileindex
  7669                              <1> nextnamechar:
  7670 00005C5E 8A07                <1> 	mov al, [edi]
  7671 00005C60 3C26                <1> 	cmp al, '&'
  7672 00005C62 7440                <1> 	je nullfile
  7673 00005C64 8A23                <1> 	mov ah, [ebx]
  7674 00005C66 47                  <1> 	inc edi
  7675 00005C67 43                  <1> 	inc ebx
  7676 00005C68 88C1                <1> 	mov cl, al
  7677 00005C6A 08E1                <1> 	or cl, ah
  7678 00005C6C 80F900              <1> 	cmp cl, 0
  7679 00005C6F 746E                <1> 	je equalfilenames
  7680 00005C71 80F920              <1> 	cmp cl, ' '
  7681 00005C74 7469                <1> 	je equalfilenames
  7682 00005C76 3C2A                <1> 	cmp al, '*'
  7683 00005C78 742B                <1> 	je asteriskcheck
  7684 00005C7A 80FC00              <1> 	cmp ah, 0
  7685 00005C7D 7410                <1> 	je nextfilename
  7686 00005C7F 3C00                <1> 	cmp al, 0
  7687 00005C81 7404                <1> 	je getebxzero
  7688 00005C83 38E0                <1> 	cmp al, ah
  7689 00005C85 74D7                <1> 	je nextnamechar
  7690                              <1> getebxzero:
  7691 00005C87 8A23                <1> 	mov ah, [ebx]
  7692 00005C89 43                  <1> 	inc ebx
  7693 00005C8A 80FC00              <1> 	cmp ah, 0
  7694 00005C8D 75F8                <1> 	jne getebxzero
  7695                              <1> nextfilename:
  7696 00005C8F 81C308000000        <1> 	add ebx, 8		;next descriptor
  7697 00005C95 89D7                <1> 	mov edi, edx
  7698 00005C97 81FB[1A660300]      <1> 	cmp ebx, enddiskfileindex
  7699 00005C9D 72BF                <1> 	jb nextnamechar
  7700                              <1> nofileload:
  7701 00005C9F BA94010000          <1> 	mov edx, 404	;indicate not found error
  7702                              <1> nullfile:
  7703 00005CA4 C3                  <1> 	ret
  7704                              <1> asteriskcheck:
  7705 00005CA5 4B                  <1> 	dec ebx
  7706 00005CA6 8A07                <1> 	mov al, [edi]
  7707 00005CA8 3C2A                <1> 	cmp al, '*'
  7708 00005CAA 74F9                <1> 	je asteriskcheck ;remove multiple asterisks
  7709 00005CAC 3C20                <1> 	cmp al, ' '
  7710 00005CAE 7415                <1> 	je equalfilenames2
  7711 00005CB0 3C00                <1> 	cmp al, 0
  7712 00005CB2 7411                <1> 	je equalfilenames2
  7713                              <1> .lp:
  7714 00005CB4 8A23                <1> 	mov ah, [ebx]
  7715 00005CB6 80FC00              <1> 	cmp ah, 0
  7716 00005CB9 74D4                <1> 	je nextfilename
  7717 00005CBB 38E0                <1> 	cmp al, ah
  7718 00005CBD 749F                <1> 	je nextnamechar
  7719 00005CBF 43                  <1> 	inc ebx
  7720 00005CC0 E9EFFFFFFF          <1> 	jmp .lp
  7721                              <1> equalfilenames2:
  7722 00005CC5 81EB02000000        <1> 	sub ebx, 2
  7723                              <1> eqfilefind:
  7724 00005CCB 43                  <1> 	inc ebx
  7725 00005CCC 81FB[1A660300]      <1> 	cmp ebx, enddiskfileindex
  7726 00005CD2 0F83C7FFFFFF        <1> 	jae near nofileload
  7727 00005CD8 8A03                <1> 	mov al, [ebx]
  7728 00005CDA 3C00                <1> 	cmp al, 0
  7729 00005CDC 75ED                <1> 	jne eqfilefind
  7730 00005CDE 43                  <1> 	inc ebx
  7731                              <1> equalfilenames:
  7732 00005CDF 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  7733 00005CE2 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  7734 00005CE4 031D[E0620000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  7735 00005CEA 31C9                <1> 	xor ecx, ecx
  7736 00005CEC 88C1                <1> 	mov cl, al			;get excess number of sectors
  7737 00005CEE C0E102              <1> 	shl cl, 2
  7738 00005CF1 C0E902              <1> 	shr cl, 2			;cut off at 64
  7739 00005CF4 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  7740 00005CF6 B500                <1> 	mov ch, 0			;drive 0
  7741 00005CF8 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  7742                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  7743 00005CFB A3[405D0000]        <1> 	mov [filetracks], eax
  7744 00005D00 89F7                <1> 	mov edi, esi		;just in case cl is 0
  7745 00005D02 89DA                <1> 	mov edx, ebx
  7746 00005D04 80F900              <1> 	cmp cl, 0
  7747 00005D07 7405                <1> 	je copytracksforfile
  7748 00005D09 E885FEFFFF          <1> 	call diskr	;take care of excess sectors
  7749                              <1> copytracksforfile:
  7750 00005D0E A1[405D0000]        <1> 	mov eax, [filetracks]
  7751 00005D13 3D00000000          <1> 	cmp eax, 0
  7752 00005D18 741C                <1> 	je donecopyfile
  7753 00005D1A 48                  <1> 	dec eax
  7754 00005D1B A3[405D0000]        <1> 	mov [filetracks], eax
  7755 00005D20 89D3                <1> 	mov ebx, edx	;get end lba
  7756 00005D22 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  7757 00005D24 8A2D[DF620000]      <1> 	mov ch, [DriveNumber]
  7758 00005D2A 89FE                <1> 	mov esi, edi	;reset buffer
  7759 00005D2C E862FEFFFF          <1> 	call diskr
  7760 00005D31 E9D8FFFFFF          <1> 	jmp copytracksforfile
  7761                              <1> donecopyfile:
  7762 00005D36 BA00000000          <1> 	mov edx, 0	;no error
  7763 00005D3B C3                  <1> 	ret
  7764                              <1> 
  7765 00005D3C 00000000            <1> oldesireal dd 0
  7766 00005D40 00000000            <1> filetracks dd 0
  7767 00005D44 00                  <1> lbad1 db 0
  7768 00005D45 00                  <1> lbad2 db 0
  7769 00005D46 00                  <1> lbad3 db 0
  7770 00005D47 00                  <1> lbad4 db 0
  7771 00005D48 00                  <1> lbad5 db 0
  7772 00005D49 00                  <1> lbad6 db 0
  7773 00005D4A 6400                <1> segments dw 100
  7774                              <1> %endif
  7775                                      %include "source/threads.asm"
  7776                              <1> %ifdef threads.included	
  7777                              <1> nwcmdst:
  7778 00005D4C 31C0                <1> 	xor eax, eax
  7779 00005D4E BC[00880300]        <1> 	mov esp, stackend
  7780 00005D53 A2[135E0000]        <1> 	mov [threadson], al
  7781 00005D58 A3[145E0000]        <1> 	mov [currentthread], eax
  7782 00005D5D 0504000000          <1> 	add eax, 4
  7783 00005D62 A3[0F5E0000]        <1> 	mov [lastthread], eax
  7784 00005D67 FB                  <1> 	sti
  7785 00005D68 E90CCDFFFF          <1> 	jmp nwcmd
  7786                              <1> 
  7787                              <1> nomorethreadspace:
  7788 00005D6D BE[835D0000]        <1> 	mov esi, nmts
  7789 00005D72 E887BEFFFF          <1> 	call print
  7790 00005D77 C605[135E0000]00    <1> 	mov byte [threadson], 0
  7791 00005D7E E9F6CCFFFF          <1> 	jmp nwcmd
  7792 00005D83 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  7793 00005D8C 6572666C6F770A00    <1>
  7794                              <1> 
  7795                              <1> nomorestackspace:
  7796 00005D94 BE[A35D0000]        <1> 	mov esi, nmss
  7797 00005D99 E860BEFFFF          <1> 	call print
  7798 00005D9E E9A9FFFFFF          <1> 	jmp nwcmdst
  7799 00005DA3 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  7800 00005DAC 72666C6F770A00      <1>
  7801                              <1> 	
  7802                              <1> threadswitch:
  7803 00005DB3 FA                  <1> 	cli
  7804 00005DB4 60                  <1> 	pushad
  7805 00005DB5 BF[C1210400]        <1> 	mov edi, threadlist
  7806 00005DBA A1[145E0000]        <1> 	mov eax, [currentthread]
  7807 00005DBF 40                  <1> 	inc eax
  7808 00005DC0 A3[145E0000]        <1> 	mov [currentthread], eax
  7809 00005DC5 6648                <1> 	dec ax
  7810 00005DC7 C1E002              <1> 	shl eax, 2
  7811 00005DCA 01C7                <1> 	add edi, eax
  7812 00005DCC 8927                <1> 	mov [edi], esp
  7813 00005DCE 81C704000000        <1> 	add edi, 4
  7814 00005DD4 81FF[C1310400]      <1> 	cmp edi, threadlistend
  7815 00005DDA 0F830D000000        <1> 	jae near nookespthread
  7816 00005DE0 8B07                <1> 	mov eax, [edi]
  7817 00005DE2 3D00000000          <1> 	cmp eax, 0
  7818 00005DE7 0F8519000000        <1> 	jne near okespthread
  7819                              <1> nookespthread:
  7820 00005DED BF[C1210400]        <1> 	mov edi, threadlist
  7821 00005DF2 31C0                <1> 	xor eax, eax
  7822 00005DF4 A3[145E0000]        <1> 	mov [currentthread], eax
  7823 00005DF9 8B07                <1> 	mov eax, [edi]
  7824 00005DFB 3D00000000          <1> 	cmp eax, 0
  7825 00005E00 0F8446FFFFFF        <1> 	je near nwcmdst
  7826                              <1> okespthread:
  7827 00005E06 89C4                <1> 	mov esp, eax
  7828 00005E08 B020                <1> 	mov al, 0x20
  7829 00005E0A E620                <1> 	out 0x20, al
  7830 00005E0C 61                  <1> 	popad
  7831 00005E0D FB                  <1> 	sti
  7832 00005E0E CF                  <1> 	iret
  7833                              <1> 
  7834                              <1> %endif
  7835 00005E0F 04000000            <1> 	lastthread dd 4
  7836 00005E13 00                  <1> 	threadson db 0
  7837 00005E14 00000000            <1> 	currentthread dd 0
  7838                                  %ifdef gui.included
  7839                                      %include "source/gui/gui.asm"
  7840                                  %endif
  7841                                  %ifdef network.included
  7842                                  	%include "source/network.asm"
  7843                              <1> network.init:
  7844                              <1> %ifdef rtl8139.included
  7845                              <1> 	%include "source/drivers/network/rtl8139.asm"
  7846                              <1> %endif
  7847                              <1> %ifdef rtl8169.included
  7848                              <1> 	%include "source/drivers/network/rtl8169.asm"
  7849                              <1> %endif
  7850                              <1> %ifdef ne2000.included
  7851                              <1> 	%include "source/drivers/network/ne2000.asm"
  7852                              <2> ne2000:
  7853 00005E18 E805000000          <2> 	call .init
  7854 00005E1D E93C030000          <2> 	jmp .end
  7855                              <2> 
  7856                              <2> ;	PAGE0			PAGE 1			PAGE 2
  7857                              <2> ;	READ	WRITE	READ	WRITE	READ	WRITE
  7858                              <2> ;0	CR		CR		CR		CR		CR		CR
  7859                              <2> ;1	CLDA0 	PSTART	PAR0	PAR0	PSTART	CLDA0
  7860                              <2> ;2	CLDA1	PSTOP	PAR1	PAR1	PSTOP	CLDA1
  7861                              <2> ;3	BNRY	BNRY	PAR2	PAR2	RNPP	RNPP
  7862                              <2> ;4	TSR		TPSR	PAR3	PAR3	TPSR	N/A
  7863                              <2> ;5	NCR		TBCR0	PAR4	PAR4	LNPP	LNPP
  7864                              <2> ;6	FIFO	TCBR1	PAR5	PAR5	ACU		ACU
  7865                              <2> ;7	ISR		ISR		CURR	CURR	ACL		ACL
  7866                              <2> ;8	CRDA0	RSAR0	MAR0	MAR0	N/A		N/A
  7867                              <2> ;9	CRDA1	RSAR1	MAR1	MAR1	N/A		N/A
  7868                              <2> ;A	N/A		RBCR0	MAR2	MAR2	N/A		N/A
  7869                              <2> ;B	N/A		RBCR1	MAR3	MAR3	N/A		N/A
  7870                              <2> ;C	RSR		RCR		MAR4	MAR4	RCR		N/A
  7871                              <2> ;D	CNTR0	TCR		MAR5	MAR5	TCR		N/A
  7872                              <2> ;E	CNTR1	DCR		MAR6	MAR6	DCR		N/A
  7873                              <2> ;F	CNTR2	IMR		MAR7	MAR7	IMR		N/A
  7874                              <2> .CR equ 0
  7875                              <2> 	.CR.STP	equ 1		;Stop
  7876                              <2> 	.CR.STA equ 2		;Start
  7877                              <2> 	.CR.TXP equ 4		;Transmit
  7878                              <2> 	.CR.RD0 equ 8		;Remote DMA 0
  7879                              <2> 	.CR.RD1 equ 0x10	;Remote DMA 1
  7880                              <2> 	.CR.RD2 equ 0x20	;Remote DMA 2
  7881                              <2> 	.CR.PS0 equ 0x40	;Page Select 0
  7882                              <2> 	.CR.PS1 equ 0x80	;Page Select 1
  7883                              <2> .PSTART equ 1
  7884                              <2> .PSTOP equ 2
  7885                              <2> .BNRY equ 3
  7886                              <2> .ISR equ 7
  7887                              <2> 	.ISR.PRX equ 1		;Packet Received
  7888                              <2> 	.ISR.PTX equ 2		;Packet Transmitted
  7889                              <2> 	.ISR.RXE equ 4		;Receive Error
  7890                              <2> 	.ISR.TXE equ 8		;Transmission Error
  7891                              <2> 	.ISR.OVW equ 0x10	;Overwrite
  7892                              <2> 	.ISR.CNT equ 0x20	;Counter Overflow
  7893                              <2> 	.ISR.RDC equ 0x40	;Remote Data Complete
  7894                              <2> 	.ISR.RST equ 0x80	;Reset status
  7895                              <2> .RSAR0 equ 8
  7896                              <2> .RSAR1 equ 9
  7897                              <2> .RBCR0 equ 0xA
  7898                              <2> .RBCR1 equ 0xB
  7899                              <2> .RCR equ 0xC
  7900                              <2> 	.RCR.SEP equ 1		;Save Errored Packets
  7901                              <2> 	.RCR.AR equ 2		;Accept Runt packet
  7902                              <2> 	.RCR.AB equ 4		;Accept Broadcast
  7903                              <2> 	.RCR.AM equ 8		;Accept Multicast
  7904                              <2> 	.RCR.PRO equ 0x10	;Promiscuous Physical
  7905                              <2> 	.RCR.MON equ 0x20	;Monitor Mode
  7906                              <2> .DCR equ 0xE
  7907                              <2> 	.DCR.WTS equ 1		;Word Transfer Select
  7908                              <2> 	.DCR.BOS equ 2		;Byte Order Select
  7909                              <2> 	.DCR.LAS equ 4		;Long Address Select
  7910                              <2> 	.DCR.LS equ 8		;Loopback Select
  7911                              <2> 	.DCR.AR equ 0x10	;Auto-initialize Remote
  7912                              <2> 	.DCR.FT0 equ 0x20	;FIFO Threshold Select 0
  7913                              <2> 	.DCR.FT1 equ 0x40	;FIFO Threshold Select 1
  7914                              <2> .ASIC equ 0x10
  7915                              <2> .RESET equ 0x1F
  7916                              <2> 
  7917                              <2> .init:
  7918 00005E22 BBFFFFFFFF          <2> 	mov ebx, 0xFFFFFFFF
  7919 00005E27 31C0                <2> 	xor eax, eax
  7920 00005E29 A2[F6580000]        <2> 	mov [pcifunction], al
  7921 00005E2E A2[F4580000]        <2> 	mov [pcibus], al
  7922 00005E33 A2[F5580000]        <2> 	mov [pcidevice], al
  7923 00005E38 B002                <2> 	mov al, 2 ;type code
  7924 00005E3A A2[8B590000]        <2> 	mov [pcitype], al
  7925 00005E3F B8EC102980          <2> 	mov eax, 0x802910EC
  7926 00005E44 A3[F9580000]        <2> 	mov [pcidevid], eax
  7927 00005E49 E8BFFAFFFF          <2> 	call getpciport
  7928 00005E4E 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
  7929 00005E54 7501                <2> 	jne .good0
  7930 00005E56 C3                  <2> 	ret
  7931                              <2> .good0:
  7932 00005E57 8915[21610000]      <2> 	mov [.basenicaddr], edx
  7933 00005E5D 89D1                <2> 	mov ecx, edx
  7934                              <2> .test:
  7935 00005E5F E854000000          <2> 	call .reset
  7936 00005E64 E87B000000          <2> 	call .stop
  7937 00005E69 89CA                <2> 	mov edx, ecx
  7938 00005E6B B9FF000000          <2> 	mov ecx, 0xFF
  7939 00005E70 E2FE                <2> 	loop $ ;wait for ~100 us
  7940 00005E72 89D1                <2> 	mov ecx, edx
  7941 00005E74 EC                  <2> 	in al, dx
  7942 00005E75 2427                <2> 	and al, (.CR.RD2 | .CR.TXP | .CR.STA | .CR.STP)
  7943 00005E77 3C21                <2> 	cmp al, (.CR.RD2 | .CR.STP)
  7944 00005E79 7410                <2> 	je .good1
  7945 00005E7B 89CA                <2> 	mov edx, ecx
  7946 00005E7D 81C207000000        <2> 	add edx, .ISR
  7947 00005E83 EC                  <2> 	in al, dx
  7948 00005E84 2480                <2> 	and al, .ISR.RST
  7949 00005E86 3C80                <2> 	cmp al, .ISR.RST
  7950 00005E88 7401                <2> 	je .good1
  7951 00005E8A C3                  <2> 	ret
  7952                              <2> .good1:
  7953 00005E8B E8F7D0FFFF          <2> call showhex	;for debugging, please remove
  7954 00005E90 E85B000000          <2> 	call .setup
  7955 00005E95 E86D030000          <2> call showmac
  7956 00005E9A BE[26610000]        <2> mov esi, .name
  7957 00005E9F E85ABDFFFF          <2> call print
  7958 00005EA4 BE[2E610000]        <2> mov esi, .initmsg
  7959 00005EA9 E850BDFFFF          <2> call print
  7960 00005EAE C605[25610000]01    <2> 	mov byte [.nicconfig], 1
  7961 00005EB5 31DB                <2> 	xor ebx, ebx
  7962 00005EB7 C3                  <2> 	ret
  7963                              <2> .reset:
  7964 00005EB8 8B15[21610000]      <2> 	mov edx, [.basenicaddr]
  7965 00005EBE 81C21F000000        <2> 	add edx, .RESET
  7966 00005EC4 EC                  <2> 	in al, dx
  7967 00005EC5 EE                  <2> 	out dx, al ;write its contents to itself
  7968 00005EC6 C3                  <2> 	ret
  7969                              <2> .page:
  7970 00005EC7 66C1E00E            <2> 	shl ax, 14
  7971 00005ECB 8B15[21610000]      <2> 	mov edx, [.basenicaddr]
  7972 00005ED1 EC                  <2> 	in al, dx
  7973 00005ED2 243F                <2> 	and al, 00111111b
  7974 00005ED4 08E0                <2> 	or al, ah
  7975 00005ED6 EE                  <2> 	out dx, al
  7976 00005ED7 C3                  <2> 	ret
  7977                              <2> .start:
  7978 00005ED8 8B15[21610000]      <2> 	mov edx, [.basenicaddr]
  7979 00005EDE B020                <2> 	mov al, .CR.RD2
  7980 00005EE0 B002                <2> 	mov al, .CR.STA
  7981 00005EE2 EE                  <2> 	out dx, al
  7982 00005EE3 C3                  <2> 	ret
  7983                              <2> .stop:
  7984 00005EE4 8B15[21610000]      <2> 	mov edx, [.basenicaddr]
  7985 00005EEA B020                <2> 	mov al, .CR.RD2
  7986 00005EEC 0C01                <2> 	or al, .CR.STP
  7987 00005EEE EE                  <2> 	out dx, al
  7988 00005EEF C3                  <2> 	ret
  7989                              <2> .setup:
  7990 00005EF0 E8EFFFFFFF          <2> 	call .stop
  7991 00005EF5 8B15[21610000]      <2> 	mov edx, [.basenicaddr]
  7992 00005EFB 81C20E000000        <2> 	add edx, .DCR
  7993 00005F01 B040                <2> 	mov al, .DCR.FT1
  7994 00005F03 0C01                <2> 	or al, .DCR.WTS
  7995 00005F05 0C08                <2> 	or al, .DCR.LS
  7996 00005F07 EE                  <2> 	out dx, al ;Set FIFO threshold, byte order, word-wide DMA
  7997 00005F08 E8B9000000          <2> 	call .getmac
  7998 00005F0D E8D2FFFFFF          <2> 	call .stop
  7999 00005F12 30C0                <2> 	xor al, al
  8000 00005F14 8B15[21610000]      <2> 	mov edx, [.basenicaddr]
  8001 00005F1A 81C20A000000        <2> 	add edx, .RBCR0
  8002 00005F20 EE                  <2> 	out dx, al
  8003 00005F21 6642                <2> 	inc dx
  8004 00005F23 EE                  <2> 	out dx, al ;Clear byte count
  8005 00005F24 B800400000          <2> 	mov eax, 16*1024
  8006 00005F29 A3[40610000]        <2> 	mov [.ringstart], eax
  8007 00005F2E C1E808              <2> 	shr eax, 8
  8008 00005F31 66A3[3C610000]      <2> 	mov [.pagestart], ax
  8009 00005F37 0534000000          <2> 	add eax, 64-2*6
  8010 00005F3C A3[3E610000]        <2> 	mov [.pageend], eax
  8011 00005F41 C1E008              <2> 	shl eax, 8
  8012 00005F44 66A3[44610000]      <2> 	mov [.ringend], ax ;set page and ring starts and ends
  8013 00005F4A 8B15[21610000]      <2> 	mov edx, [.basenicaddr]
  8014 00005F50 81C201000000        <2> 	add edx, .PSTART
  8015 00005F56 A0[3C610000]        <2> 	mov al, [.pagestart]
  8016 00005F5B EE                  <2> 	out dx, al
  8017 00005F5C A0[3E610000]        <2> 	mov al, [.pageend]
  8018 00005F61 6642                <2> 	inc dx
  8019 00005F63 EE                  <2> 	out dx, al
  8020 00005F64 A0[3C610000]        <2> 	mov al, [.pagestart]
  8021 00005F69 6642                <2> 	inc dx
  8022 00005F6B EE                  <2> 	out dx, al
  8023 00005F6C E873FFFFFF          <2> 	call .stop
  8024                              <2> ;INSERT INTERRUPT ENABLE HERE
  8025 00005F71 B001                <2> 	mov al, 1
  8026 00005F73 E84FFFFFFF          <2> 	call .page
  8027 00005F78 8B15[21610000]      <2> 	mov edx, [.basenicaddr]
  8028 00005F7E BF[4E610000]        <2> 	mov edi, .rom
  8029                              <2> .copymactocard:
  8030 00005F83 42                  <2> 	inc edx
  8031 00005F84 6E                  <2> 	outsb
  8032 00005F85 81C702000000        <2> 	add edi, 2
  8033 00005F8B 81FA06000000        <2> 	cmp edx, 6
  8034 00005F91 76F0                <2> 	jbe .copymactocard
  8035 00005F93 8B15[21610000]      <2> 	mov edx, [.basenicaddr]
  8036 00005F99 81C207000000        <2> 	add edx, 7
  8037 00005F9F A0[3C610000]        <2> 	mov al, [.pagestart]
  8038 00005FA4 FEC0                <2> 	inc al
  8039 00005FA6 EE                  <2> 	out dx, al ;set page in CURR register
  8040                              <2> ;INSERT MULTICAST INIT HERE
  8041 00005FA7 E838FFFFFF          <2> 	call .stop
  8042 00005FAC 8B15[21610000]      <2> 	mov edx, [.basenicaddr]
  8043 00005FB2 81C20C000000        <2> 	add edx, .RCR
  8044 00005FB8 B004                <2> 	mov al, .RCR.AB
  8045 00005FBA EE                  <2> 	out dx, al ;accept broadcast
  8046 00005FBB 6642                <2> 	inc dx
  8047 00005FBD 30C0                <2> 	xor al, al
  8048 00005FBF EE                  <2> 	out dx, al ;stop loopback
  8049 00005FC0 E813FFFFFF          <2> 	call .start
  8050 00005FC5 C3                  <2> 	ret
  8051                              <2> .getmac:
  8052 00005FC6 8B15[21610000]      <2> 	mov edx, [.basenicaddr]
  8053 00005FCC B020                <2> 	mov al, 0x20
  8054 00005FCE 0C02                <2> 	or al, 2
  8055 00005FD0 EE                  <2> 	out dx, al	;set STA and RD2 bits
  8056 00005FD1 6681C20A00          <2> 	add dx, .RBCR0
  8057 00005FD6 B010                <2> 	mov al, 16
  8058 00005FD8 EE                  <2> 	out dx, al
  8059 00005FD9 6642                <2> 	inc dx
  8060 00005FDB 30C0                <2> 	xor al, al
  8061 00005FDD EE                  <2> 	out dx, al
  8062 00005FDE 8B15[21610000]      <2> 	mov edx, [.basenicaddr]
  8063 00005FE4 6681C20800          <2> 	add dx, .RSAR0
  8064 00005FE9 EE                  <2> 	out dx, al
  8065 00005FEA 6642                <2> 	inc dx
  8066 00005FEC EE                  <2> 	out dx, al
  8067 00005FED 668B15[21610000]    <2> 	mov dx, [.basenicaddr]
  8068 00005FF4 B008                <2> 	mov al, 8
  8069 00005FF6 0C02                <2> 	or al, 2
  8070 00005FF8 EE                  <2> 	out dx, al
  8071 00005FF9 668B15[21610000]    <2> 	mov dx, [.basenicaddr]
  8072 00006000 6681C21000          <2> 	add dx, .ASIC
  8073 00006005 B908000000          <2> 	mov ecx, 8
  8074 0000600A BF[4E610000]        <2> 	mov edi, .rom
  8075 0000600F F3666D              <2> 	rep insw
  8076                              <2> .copymac:
  8077 00006012 BF[4E610000]        <2> 	mov edi, .rom
  8078 00006017 BE[48610000]        <2> 	mov esi, .mac
  8079 0000601C B906000000          <2> 	mov ecx, 6
  8080                              <2> .lpmac:
  8081 00006021 8A07                <2> 	mov al, [edi]
  8082 00006023 8806                <2> 	mov [esi], al
  8083 00006025 81C702000000        <2> 	add edi, 2
  8084 0000602B 46                  <2> 	inc esi
  8085 0000602C E2F3                <2> 	loop .lpmac
  8086 0000602E B9[48610000]        <2> 	mov ecx, .mac
  8087 00006033 C3                  <2> 	ret
  8088                              <2> .sendpacket:
  8089 00006034 803D[25610000]00    <2> 	cmp byte [.nicconfig], 0
  8090 0000603B 7512                <2> 	jne .sendit
  8091 0000603D 56                  <2> 	push esi
  8092 0000603E 57                  <2> 	push edi
  8093 0000603F E8DEFDFFFF          <2> 	call .init
  8094 00006044 5F                  <2> 	pop edi
  8095 00006045 5E                  <2> 	pop esi
  8096 00006046 81FB00000000        <2> 	cmp ebx, 0
  8097 0000604C 7401                <2> 	je .sendit
  8098 0000604E C3                  <2> 	ret
  8099                              <2> .sendit: ;packet start in edi, end in esi
  8100 0000604F 87F7                <2> 	xchg esi, edi ;this helps with the outsw
  8101                              <2> 	;now the packet start is in esi, end in edi
  8102 00006051 8B0D[48610000]      <2> 	mov ecx, [.mac]
  8103 00006057 894E06              <2> 	mov [esi + 6], ecx
  8104 0000605A 668B0D[4C610000]    <2> 	mov cx, [.mac + 4]
  8105 00006061 66894E0A            <2> 	mov [esi + 10], cx	;copy the correct mac
  8106 00006065 8B15[21610000]      <2> 	mov edx, [.basenicaddr]
  8107 0000606B B020                <2> 	mov al, .CR.RD2
  8108 0000606D 0C02                <2> 	or al, .CR.STA
  8109 0000606F EE                  <2> 	out dx, al ;set RD2 and STA
  8110 00006070 81C207000000        <2> 	add edx, .ISR ; ISR
  8111 00006076 B040                <2> 	mov al, .ISR.RDC
  8112 00006078 EE                  <2> 	out dx, al ;set RDC flag
  8113 00006079 8B15[21610000]      <2> 	mov edx, [.basenicaddr]
  8114 0000607F 6681C20A00          <2> 	add dx, .RBCR0
  8115 00006084 89F8                <2> 	mov eax, edi
  8116 00006086 29F0                <2> 	sub eax, esi
  8117 00006088 BB01000000          <2> 	mov ebx, 1
  8118 0000608D 21C3                <2> 	and ebx, eax
  8119 0000608F 81FB01000000        <2> 	cmp ebx, 1
  8120 00006095 7501                <2> 	jne .nofixword
  8121 00006097 40                  <2> 	inc eax
  8122                              <2> .nofixword:
  8123 00006098 89C1                <2> 	mov ecx, eax ;save length in ecx
  8124 0000609A EE                  <2> 	out dx, al
  8125 0000609B 86C4                <2> 	xchg al, ah
  8126 0000609D 6642                <2> 	inc dx
  8127 0000609F EE                  <2> 	out dx, al ;send size
  8128 000060A0 8B15[21610000]      <2> 	mov edx, [.basenicaddr]
  8129 000060A6 6681C20800          <2> 	add dx, .RSAR0
  8130 000060AB 66A1[3C610000]      <2> 	mov ax, [.pagestart]
  8131 000060B1 C1E008              <2> 	shl eax, 8
  8132 000060B4 EE                  <2> 	out dx, al
  8133 000060B5 86C4                <2> 	xchg al, ah
  8134 000060B7 6642                <2> 	inc dx
  8135 000060B9 EE                  <2> 	out dx, al ;send address in NIC memory
  8136 000060BA 8B15[21610000]      <2> 	mov edx, [.basenicaddr]
  8137 000060C0 B010                <2> 	mov al, .CR.RD1
  8138 000060C2 0C02                <2> 	or al, .CR.STA
  8139 000060C4 EE                  <2> 	out dx, al ;set RD and STA
  8140 000060C5 89CB                <2> 	mov ebx, ecx ;save length in ebx
  8141 000060C7 D1E9                <2> 	shr ecx, 1
  8142 000060C9 8B15[21610000]      <2> 	mov edx, [.basenicaddr]
  8143 000060CF 6681C21000          <2> 	add dx, 0x10
  8144 000060D4 F3666F              <2> 	rep outsw ;Send the packet data
  8145 000060D7 8B15[21610000]      <2> 	mov edx, [.basenicaddr]
  8146 000060DD 6681C20700          <2> 	add dx, .ISR
  8147                              <2> .chkcopylp:
  8148 000060E2 B440                <2> 	mov ah, .ISR.RDC
  8149 000060E4 EC                  <2> 	in al, dx
  8150 000060E5 20C4                <2> 	and ah, al
  8151 000060E7 80FC40              <2> 	cmp ah, 0x40
  8152 000060EA 75F6                <2> 	jne .chkcopylp	
  8153 000060EC 8B15[21610000]      <2> 	mov edx, [.basenicaddr]
  8154 000060F2 6681C20400          <2> 	add dx, 4
  8155 000060F7 A0[3C610000]        <2> 	mov al, [.pagestart]
  8156 000060FC EE                  <2> 	out dx, al ;send start address in pages
  8157 000060FD 8B15[21610000]      <2> 	mov edx, [.basenicaddr]
  8158 00006103 81C205000000        <2> 	add edx, 0x5
  8159 00006109 89D8                <2> 	mov eax, ebx
  8160 0000610B EE                  <2> 	out dx, al
  8161 0000610C 86C4                <2> 	xchg al, ah
  8162 0000610E 6642                <2> 	inc dx
  8163 00006110 EE                  <2> 	out dx, al ;send length
  8164 00006111 8B15[21610000]      <2> 	mov edx, [.basenicaddr]
  8165 00006117 B020                <2> 	mov al, 0x20
  8166 00006119 0C04                <2> 	or al, 4
  8167 0000611B 0C02                <2> 	or al, 2
  8168 0000611D EE                  <2> 	out dx, al ;set RD2, TXP, and STA
  8169 0000611E 31DB                <2> 	xor ebx, ebx
  8170 00006120 C3                  <2> 	ret
  8171 00006121 00000000            <2> .basenicaddr dd 0
  8172 00006125 00                  <2> .nicconfig db 0
  8173 00006126 4E45323030302000    <2> .name db "NE2000 ",0
  8174 0000612E 496E697469616C697A- <2> .initmsg db "Initialized.",10,0
  8175 00006137 65642E0A00          <2>
  8176                              <2> align 2, nop
  8177 0000613C 0000                <2> .pagestart dw 0
  8178 0000613E 0000                <2> .pageend dw 0
  8179 00006140 00000000            <2> .ringstart dd 0
  8180 00006144 00000000            <2> .ringend dd 0
  8181 00006148 000000000000        <2> .mac db 0,0,0,0,0,0
  8182 0000614E 00<rept>            <2> .rom times 16 db 0
  8183                              <2> 
  8184                              <2> .end:
  8185                              <1> %endif
  8186                              <1> %ifdef i8254x.included
  8187                              <1> 	%include "source/drivers/network/i8254x.asm"
  8188                              <1> %endif
  8189 0000615E C3                  <1> 	ret
  8190                              <1> 
  8191                              <1> sendpacket: ;packet start in edi, end in esi
  8192                              <1> 	%ifdef rtl8139.included
  8193                              <1> 		push edi
  8194                              <1> 		push esi
  8195                              <1> 		call rtl8139.sendpacket
  8196                              <1> 		pop esi
  8197                              <1> 		pop edi
  8198                              <1> 	%endif
  8199                              <1> 	%ifdef rtl8169.included
  8200                              <1> 		push edi
  8201                              <1> 		push esi
  8202                              <1> 		call rtl8169.sendpacket
  8203                              <1> 		pop esi
  8204                              <1> 		pop edi
  8205                              <1> 	%endif
  8206                              <1> 	%ifdef ne2000.included
  8207 0000615F 57                  <1> 		push edi
  8208 00006160 56                  <1> 		push esi
  8209 00006161 E8CEFEFFFF          <1> 		call ne2000.sendpacket
  8210 00006166 5E                  <1> 		pop esi
  8211 00006167 5F                  <1> 		pop edi
  8212                              <1> 	%endif
  8213                              <1> 	%ifdef i8254x.included
  8214                              <1> 		call i8254x.sendpacket
  8215                              <1> 	%endif
  8216 00006168 C3                  <1> 	ret
  8217                              <1> 
  8218                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
  8219 00006169 31C0                <1> 	xor eax, eax
  8220 0000616B 31DB                <1> 	xor ebx, ebx
  8221 0000616D 31C9                <1> 	xor ecx, ecx
  8222                              <1> .lp:
  8223 0000616F 8A07                <1> 	mov al, [edi]
  8224 00006171 8A6701              <1> 	mov ah, [edi + 1]
  8225 00006174 01C3                <1> 	add ebx, eax
  8226 00006176 81C702000000        <1> 	add edi, 2
  8227 0000617C 39F7                <1> 	cmp edi, esi
  8228 0000617E 72EF                <1> 	jb .lp
  8229 00006180 66B9FFFF            <1> 	mov cx, 0xFFFF
  8230 00006184 6689D8              <1> 	mov ax, bx
  8231 00006187 C1EB10              <1> 	shr ebx, 16
  8232 0000618A 6601D8              <1> 	add ax, bx
  8233 0000618D 6629C1              <1> 	sub cx, ax
  8234 00006190 C3                  <1> 	ret
  8235                              <1> 	
  8236                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
  8237 00006191 31DB                <1> 	xor ebx, ebx
  8238 00006193 31C9                <1> 	xor ecx, ecx
  8239 00006195 31D2                <1> 	xor edx, edx
  8240                              <1> .mlp:
  8241 00006197 89F7                <1> 	mov edi, esi
  8242 00006199 4F                  <1> 	dec edi
  8243                              <1> .lp:
  8244 0000619A 47                  <1> 	inc edi
  8245 0000619B 8A07                <1> 	mov al, [edi]
  8246 0000619D 3C20                <1> 	cmp al, " "
  8247 0000619F 7408                <1> 	je .dnlp
  8248 000061A1 3C00                <1> 	cmp al, 0
  8249 000061A3 7404                <1> 	je .dnlp
  8250 000061A5 3C2E                <1> 	cmp al, "."
  8251 000061A7 75F1                <1> 	jne .lp
  8252                              <1> .dnlp:
  8253 000061A9 30C0                <1> 	xor al, al
  8254 000061AB 8807                <1> 	mov [edi], al
  8255 000061AD 53                  <1> 	push ebx
  8256 000061AE 56                  <1> 	push esi
  8257 000061AF 57                  <1> 	push edi
  8258 000061B0 31FF                <1> 	xor edi, edi
  8259 000061B2 E869CFFFFF          <1> 	call cnvrttxt
  8260 000061B7 5E                  <1> 	pop esi
  8261 000061B8 5F                  <1> 	pop edi ;i intentionally switch them
  8262 000061B9 5B                  <1> 	pop ebx
  8263 000061BA 46                  <1> 	inc esi
  8264 000061BB BF[D3610000]        <1> 	mov edi, ipstr
  8265 000061C0 880C1F              <1> 	mov [edi + ebx], cl
  8266 000061C3 43                  <1> 	inc ebx
  8267 000061C4 81FB04000000        <1> 	cmp ebx, 4
  8268 000061CA 72CB                <1> 	jb .mlp
  8269 000061CC 8B0D[D3610000]      <1> 	mov ecx, [ipstr]
  8270 000061D2 C3                  <1> 	ret
  8271 000061D3 00000000            <1> ipstr dd 0
  8272                              <1> showip: 	;put the ip address in ecx
  8273 000061D7 89C8                <1> 	mov eax, ecx
  8274 000061D9 30DB                <1> 	xor bl, bl
  8275                              <1> .lp:
  8276 000061DB 31C9                <1> 	xor ecx, ecx
  8277 000061DD 88C1                <1> 	mov cl, al
  8278 000061DF E85ECEFFFF          <1> 	call showdec
  8279 000061E4 C1E808              <1> 	shr eax, 8
  8280 000061E7 FEC3                <1> 	inc bl
  8281 000061E9 80FB04              <1> 	cmp bl, 4
  8282 000061EC 7315                <1> 	jae .done
  8283 000061EE 50                  <1> 	push eax
  8284 000061EF 6653                <1> 	push bx
  8285 000061F1 BE[04620000]        <1> 	mov esi, .dot
  8286 000061F6 E803BAFFFF          <1> 	call print
  8287 000061FB 665B                <1> 	pop bx
  8288 000061FD 58                  <1> 	pop eax
  8289 000061FE E9D8FFFFFF          <1> 	jmp .lp
  8290                              <1> .done:
  8291 00006203 C3                  <1> 	ret
  8292 00006204 082E00              <1> .dot db 8,".",0
  8293                              <1> showmac:	;mac begins in [ecx]
  8294 00006207 BE[57620000]        <1> 	mov esi, macprint
  8295 0000620C 89CF                <1> 	mov edi, ecx
  8296 0000620E 81C106000000        <1> 	add ecx, 6
  8297                              <1> showmacloop:
  8298 00006214 8A07                <1> 	mov al, [edi]
  8299 00006216 8A27                <1> 	mov ah, [edi]
  8300 00006218 C0E804              <1> 	shr al, 4
  8301 0000621B C0E404              <1> 	shl ah, 4
  8302 0000621E C0EC04              <1> 	shr ah, 4
  8303 00006221 0430                <1> 	add al, 48
  8304 00006223 3C39                <1> 	cmp al, "9"
  8305 00006225 7606                <1> 	jbe .goodal
  8306 00006227 2C30                <1> 	sub al, 48
  8307 00006229 2C0A                <1> 	sub al, 0xA
  8308 0000622B 0441                <1> 	add al, "A"
  8309                              <1> .goodal:
  8310 0000622D 80C430              <1> 	add ah, 48
  8311 00006230 80FC39              <1> 	cmp ah, "9"
  8312 00006233 7609                <1> 	jbe .goodah
  8313 00006235 80EC30              <1> 	sub ah, 48
  8314 00006238 80EC0A              <1> 	sub ah, 0xA
  8315 0000623B 80C441              <1> 	add ah, "A"
  8316                              <1> .goodah:
  8317 0000623E 668906              <1> 	mov [esi], ax
  8318 00006241 81C603000000        <1> 	add esi, 3
  8319 00006247 47                  <1> 	inc edi
  8320 00006248 39CF                <1> 	cmp edi, ecx
  8321 0000624A 72C8                <1> 	jb showmacloop
  8322 0000624C BE[57620000]        <1> 	mov esi, macprint
  8323 00006251 E8A8B9FFFF          <1> 	call print
  8324 00006256 C3                  <1> 	ret
  8325                              <1> 	
  8326 00006257 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
  8327 00006260 30303A30303A303020- <1>
  8328 00006269 00                  <1>
  8329 0000626A 00000000            <1> ethernetend dw 0,0
  8330 0000626E C0A80002            <1> sysip db 192,168,0,2
  8331 00006272 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
  8332                                  %endif
  8333                                      %include "source/data.asm"
  8334 00006278 626F6F742E736800    <1> 	bootfilename db	"boot.sh",0
  8335 00006280 73687573683A2000    <1> 	notfound1 db	"shush: ",0
  8336 00006288 3A206E6F7420666F75- <1> 	notfound2 db	": not found",10,0
  8337 00006291 6E640A00            <1>
  8338 00006295 757365726E616D653A- <1> 	userask db	"username:",0
  8339 0000629E 00                  <1>
  8340 0000629F 70617373776F72643A- <1> 	pwdask	db	"password:",0
  8341 000062A8 00                  <1>
  8342 000062A9 40                  <1> 	computer db	"@"
  8343                              <1> %ifdef io.serial
  8344                              <1> 	computername db	"SollerOS.",io.serial," ",0
  8345                              <1> %else
  8346 000062AA 536F6C6C65724F5320- <1> 	computername db	"SollerOS ",0
  8347 000062B3 00                  <1>
  8348                              <1> %endif
  8349 000062B4 5D242000            <1> 	endprompt db "]$ ",0
  8350 000062B8 0D                  <1> 	crlf 	db	13
  8351 000062B9 0A00                <1> 	line	db	10,0
  8352                              <1> 	userlst:
  8353 000062BB 726F6F7400          <1> 			db "root",0
  8354 000062C0 617765736F6D65706F- <1> 			db "awesomepower",0
  8355 000062C9 77657200            <1>
  8356 000062CD 7573657200          <1> 			db "user",0
  8357 000062D2 70617373776F726400  <1> 			db "password",0
  8358 000062DB 6E00                <1> 			db "n",0	;abuse for quick entry-a quick double n followed by a double enter will get you in
  8359 000062DD 00                  <1> 			db 0
  8360                              <1> 	userlstend:
  8361                              <1> 	
  8362 000062DE 00                  <1> 	guion db 0
  8363 000062DF 00                  <1> 	DriveNumber db 0
  8364 000062E0 00000000            <1> 	lbaad dd 0
  8365 000062E4 0000000000000000    <1> 	initialtsc dd 0,0
  8366 000062EC 0000000000000000    <1> 	lasttsc dd 0,0
  8367 000062F4 00<rept>            <1> 	memlistbuf times 576 db 0
  8368 00006534 00000000            <1> 	memlistend: dd 0
  8369                              <1> %ifdef io.serial
  8370                              <1> %else
  8371                              <1> fonts:
  8372                              <1> %ifdef font.unicode
  8373 00006538 <incbin>            <1> 	incbin "source/fonts/fonts-unicode.pak"
  8374                              <1> %else
  8375                              <1> 	incbin "source/fonts/fonts-ascii.pak"
  8376                              <1> %endif
  8377                              <1> fontend:
  8378                              <1> %endif
  8379                              <1> osend:	;this is the end of the operating system's space on disk
  8380                                  %ifdef disk.none
  8381                                  	diskfileindex:
  8382                                  	enddiskfileindex:
  8383                                      %include "source/bss.asm"
  8384                                  %else
  8385                                      %include "build/fileindex.asm"
  8386                              <1> diskfileindex:
  8387 00036538 626F6F742E736800    <1> db "boot.sh",0
  8388 00036540 B4010000            <1> dd (f0-$$)/512
  8389 00036544 01000000            <1> dd (f1-f0)/512
  8390 00036548 646F73746573742E63- <1> db "dostest.com",0
  8391 00036551 6F6D00              <1>
  8392 00036554 B5010000            <1> dd (f1-$$)/512
  8393 00036558 01000000            <1> dd (f2-f1)/512
  8394 0003655C 6578656300          <1> db "exec",0
  8395 00036561 B6010000            <1> dd (f2-$$)/512
  8396 00036565 01000000            <1> dd (f3-f2)/512
  8397 00036569 66696E616C636F756E- <1> db "finalcount.sn",0
  8398 00036572 742E736E00          <1>
  8399 00036577 B7010000            <1> dd (f3-$$)/512
  8400 0003657B 01000000            <1> dd (f4-f3)/512
  8401 0003657F 666F726B00          <1> db "fork",0
  8402 00036584 B8010000            <1> dd (f4-$$)/512
  8403 00036588 01000000            <1> dd (f5-f4)/512
  8404 0003658C 6775697465737400    <1> db "guitest",0
  8405 00036594 B9010000            <1> dd (f5-$$)/512
  8406 00036598 03000000            <1> dd (f6-f5)/512
  8407 0003659C 696E7400            <1> db "int",0
  8408 000365A0 BC010000            <1> dd (f6-$$)/512
  8409 000365A4 01000000            <1> dd (f7-f6)/512
  8410 000365A8 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
  8411 000365B1 2E736E00            <1>
  8412 000365B5 BD010000            <1> dd (f7-$$)/512
  8413 000365B9 01000000            <1> dd (f8-f7)/512
  8414 000365BD 6D6172696F2E736E00  <1> db "mario.sn",0
  8415 000365C6 BE010000            <1> dd (f8-$$)/512
  8416 000365CA 01000000            <1> dd (f9-f8)/512
  8417 000365CE 736F6E676F74696D65- <1> db "songotime.sn",0
  8418 000365D7 2E736E00            <1>
  8419 000365DB BF010000            <1> dd (f9-$$)/512
  8420 000365DF 01000000            <1> dd (f10-f9)/512
  8421 000365E3 73736500            <1> db "sse",0
  8422 000365E7 C0010000            <1> dd (f10-$$)/512
  8423 000365EB 02000000            <1> dd (f11-f10)/512
  8424 000365EF 74656C7900          <1> db "tely",0
  8425 000365F4 C2010000            <1> dd (f11-$$)/512
  8426 000365F8 01000000            <1> dd (f12-f11)/512
  8427 000365FC 756E667300          <1> db "unfs",0
  8428 00036601 C3010000            <1> dd (f12-$$)/512
  8429 00036605 02000000            <1> dd (f13-f12)/512
  8430 00036609 5F696D672E62696E00  <1> db "_img.bin",0
  8431 00036612 C5010000            <1> dd (f13-$$)/512
  8432 00036616 0C000000            <1> dd (f14-f13)/512
  8433                              <1> enddiskfileindex:
  8434                              <1> 
  8435                                      %include "source/bss.asm"
  8436 0003661A 00<rept>            <1> align 512, db 0
  8437                              <1> bssstart equ $
  8438                              <1> bsscopy equ $
  8439                              <1> initialstack equ bsscopy
  8440                              <1> stackend equ initialstack + 8192
  8441                              <1> sigtable equ stackend + 4
  8442                              <1> fileindex equ sigtable + 4
  8443                              <1> fileindexend equ fileindex + 1024
  8444                              <1> previousstack equ fileindexend
  8445                              <1> lastfolderloc equ previousstack + 4
  8446                              <1> currentfolderloc equ lastfolderloc + 4
  8447                              <1> currentfolder equ currentfolderloc + 4
  8448                              <1> currentfolderend equ currentfolder + 512
  8449                              <1> uid equ currentfolderend
  8450                              <1> ranboot equ uid + 4
  8451                              <1> IFON equ ranboot + 1
  8452                              <1> IFTRUE equ IFON + 1
  8453                              <1> BATCHPOS equ IFTRUE + 100
  8454                              <1> BATCHISON equ BATCHPOS + 4
  8455                              <1> LOOPON equ BATCHISON + 1
  8456                              <1> LOOPPOS	equ LOOPON + 1
  8457                              <1> variables equ LOOPPOS + 4
  8458                              <1> varend equ variables + 4096
  8459                              <1> buftxt2 equ varend
  8460                              <1> buftxt equ buftxt2 + 1024
  8461                              <1> buftxtend equ buftxt + 1024
  8462                              <1> buf2 equ buftxtend
  8463                              <1> numbuf equ buf2 + 20
  8464                              <1> %ifdef io.serial
  8465                              <1> 	lastcommandpos equ numbuf + 1
  8466                              <1> %else
  8467                              <1> 	%ifdef gui.included
  8468                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
  8469                              <1> 		graphicstableend equ graphicstable + 200h
  8470                              <1> 		%ifdef gui.background
  8471                              <1> 			backgroundbuffer equ graphicstableend
  8472                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
  8473                              <1> 			mousecolorbuf equ backgroundbufferend
  8474                              <1> 		%else
  8475                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
  8476                              <1> 		%endif
  8477                              <1> 		mcolorend equ mousecolorbuf + 256
  8478                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
  8479                              <1> 		videobufend	equ videobuf + 210*65*4;2
  8480                              <1> 		videobuf2 equ videobufend
  8481                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
  8482                              <1> 	%else
  8483                              <1> 		videobuf equ numbuf + 1
  8484                              <1> 		videobufend equ videobuf + 80*30*4
  8485                              <1> 		videobuf2 equ videobufend
  8486                              <1> 		videobuf2end equ videobuf2 + 80*30*4
  8487                              <1> 	%endif
  8488                              <1> 	lastcommandpos: equ videobuf2end
  8489                              <1> %endif
  8490                              <1> 	commandbufpos: equ lastcommandpos + 4
  8491                              <1> 	commandlistentries: equ commandbufpos + 4
  8492                              <1> 	commandsentered: equ commandlistentries + 4
  8493                              <1> 	commandbuf: equ commandsentered + 4
  8494                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
  8495                              <1> %ifdef network.included
  8496                              <1> 	rbuffstart: equ commandbufend ;for use with networking
  8497                              <1> 	rbuffend equ rbuffstart + 8212
  8498                              <1> %else
  8499                              <1> 	rbuffstart equ commandbufend
  8500                              <1> 	rbuffend equ commandbufend
  8501                              <1> %endif
  8502                              <1> %ifdef threads.included
  8503                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
  8504                              <1> 	threadlistend: equ threadlist + 1024*4
  8505                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
  8506                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
  8507                              <1> 	bssend equ stack1 + 1024*1024
  8508                              <1> %else
  8509                              <1> 	bssend equ rbuffend
  8510                              <1> %endif
  8511                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
  8512                                      %include "build/files.asm"
  8513                              <1> align 512,db 0
  8514                              <1> f0:
  8515 00036800 <incbin>            <1> incbin "included/boot.sh"
  8516 00036918 00<rept>            <1> align 512,db 0
  8517                              <1> f1:
  8518 00036A00 <incbin>            <1> incbin "included/dostest.com"
  8519 00036B31 00<rept>            <1> align 512,db 0
  8520                              <1> f2:
  8521 00036C00 <incbin>            <1> incbin "included/exec"
  8522 00036CE9 00<rept>            <1> align 512,db 0
  8523                              <1> f3:
  8524 00036E00 <incbin>            <1> incbin "included/finalcount.sn"
  8525 00036F02 00<rept>            <1> align 512,db 0
  8526                              <1> f4:
  8527 00037000 <incbin>            <1> incbin "included/fork"
  8528 00037161 00<rept>            <1> align 512,db 0
  8529                              <1> f5:
  8530 00037200 <incbin>            <1> incbin "included/guitest"
  8531 0003763D 00<rept>            <1> align 512,db 0
  8532                              <1> f6:
  8533 00037800 <incbin>            <1> incbin "included/int"
  8534 000379B2 00<rept>            <1> align 512,db 0
  8535                              <1> f7:
  8536 00037A00 <incbin>            <1> incbin "included/lostwoods.sn"
  8537 00037AAE 00<rept>            <1> align 512,db 0
  8538                              <1> f8:
  8539 00037C00 <incbin>            <1> incbin "included/mario.sn"
  8540 00037C3A 00<rept>            <1> align 512,db 0
  8541                              <1> f9:
  8542 00037E00 <incbin>            <1> incbin "included/songotime.sn"
  8543 00037E4A 00<rept>            <1> align 512,db 0
  8544                              <1> f10:
  8545 00038000 <incbin>            <1> incbin "included/sse"
  8546 0003829A 00<rept>            <1> align 512,db 0
  8547                              <1> f11:
  8548 00038400 <incbin>            <1> incbin "included/tely"
  8549 000385C6 00<rept>            <1> align 512,db 0
  8550                              <1> f12:
  8551 00038600 <incbin>            <1> incbin "included/unfs"
  8552                              <1> align 512,db 0
  8553                              <1> f13:
  8554 00038A00 <incbin>            <1> incbin "included/_img.bin"
  8555                              <1> align 512,db 0
  8556                              <1> f14:
  8557                                  %endif
