     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> ;%define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define io.serial "1"
     9                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    10                              <1> ;If the gui is included this should not be enabled
    11                              <1> 
    12                              <1> %define threads.included
    13                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    14                              <1> 
    15                              <1> %define exceptions.included
    16                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    17                              <1> 
    18                              <1> ;%define disk.protected
    19                              <1> ;Use protected mode instead of real mode for disk access
    20                              <1> 
    21                              <1> %define disk.real
    22                              <1> ;Use real mode for disk access
    23                              <1> 
    24                              <1> ;%define sound.included
    25                              <1> ;This includes the sound drivers
    26                              <1> 
    27                              <1> ;%define rtl8139.included
    28                              <1> ;This includes the RTL8139 drivers
    29                              <1> 
    30                              <1> ;%define sector.debug
    31                              <1> ;Dump the contents of the first sector of SollerOS
    32                              <1> 
    33                              <1> ;FIX DEPENDANCIES
    34                              <1> %ifdef gui.included
    35                              <1> %undef io.serial
    36                              <1> %endif
    37                              <1> %ifdef disk.protected
    38                              <1> %undef disk.real
    39                              <1> %endif
    40                                  [BITS 16]
    41                                      %include "source/boot.asm"
    42                              <1>     ; MENU.ASM
    43                              <1> %include 'source/signature.asm'
    44                              <2> signature:
    45 00000000 536F6C6C65724F53    <2> db "SollerOS" ;Operating system name
    46 00000008 20416C706861204275- <2> db " Alpha Build ",0	;Soller OS development level
    47 00000011 696C642000          <2>
    48 00000016 D7000000            <2> dd 215	;version number
    49                              <2> signatureend:
    50                              <1> menustart:	
    51 0000001A 8CC8                <1> 	mov ax, cs
    52 0000001C 8ED8                <1> 	mov ds, ax
    53 0000001E 8EC0                <1> 	mov es, ax
    54 00000020 8ED0                <1> 	mov ss, ax
    55 00000022 880E[615D]          <1> 	mov [DriveNumber], cl
    56 00000026 668916[625D]        <1> 	mov [lbaad], edx
    57                              <1> %ifdef io.serial
    58                              <1> 	call getmemorysize
    59                              <1> 	mov si, serialmsg
    60                              <1> 	call printrm
    61                              <1> 	jmp pmode
    62                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
    63                              <1> %else
    64 0000002B E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
    65 0000002E E95700              <1> 	jmp pmode
    66                              <1> %endif
    67                              <1> 	
    68                              <1> vgaset:
    69 00000031 B81200              <1> 	mov ax, 12h
    70 00000034 31DB                <1> 	xor bx, bx
    71 00000036 CD10                <1> 	int 10h
    72 00000038 C606[605D]00        <1> 	mov byte [guion], 0
    73 0000003D E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
    74 00000040 C3                  <1> 	ret
    75                              <1> 
    76                              <1> getmemorysize:
    77 00000041 BF[665D]            <1> 	mov di, memlistbuf
    78 00000044 6631DB              <1> 	xor ebx, ebx
    79                              <1> getmemsizeloop:
    80 00000047 66B820E80000        <1> 	mov eax, 0xE820
    81 0000004D 66BA50414D53        <1> 	mov edx, 0x0534D4150
    82 00000053 66B918000000        <1> 	mov ecx, 24
    83 00000059 CD15                <1> 	int 0x15
    84 0000005B 81C71800            <1> 	add di, 24
    85 0000005F 81FF[A65F]          <1> 	cmp di, memlistend
    86 00000063 7309                <1> 	jae nomoregetmemsize
    87 00000065 6681FB00000000      <1> 	cmp ebx, 0
    88 0000006C 75D9                <1> 	jne getmemsizeloop
    89                              <1> nomoregetmemsize:
    90 0000006E 81EF[665D]          <1> 	sub di, memlistbuf
    91 00000072 893E[A65F]          <1> 	mov [memlistend], di
    92 00000076 C3                  <1> 	ret
    93                              <1> 	
    94                              <1> printrm:			; 'si' comes in with string address
    95 00000077 BB0700              <1>     mov bx,07		; write to display
    96 0000007A B40E                <1>     mov ah,0Eh		; screen function
    97 0000007C 8A04                <1>    .lp:    mov al,[si]         ; get next character
    98 0000007E 3C00                <1>     cmp al,0		; look for terminator 
    99 00000080 7405                <1>     je .done		; zero byte at end of string
   100 00000082 CD10                <1>     int 10h		; write character to screen.    
   101 00000084 46                  <1> 	inc si	     	; move to next character
   102 00000085 EBF5                <1>     jmp .lp		; loop
   103 00000087 C3                  <1> .done: ret
   104                                      %include "source/pmode.asm"
   105                              <1> [BITS 16]
   106                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   107                              <1> ;	16-bit real mode
   108                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   109                              <1> 
   110                              <1> pmode:
   111 00000088 6631C0              <1> 	xor eax, eax
   112 0000008B 6631DB              <1> 	xor ebx, ebx
   113 0000008E 6631C9              <1> 	xor ecx, ecx
   114 00000091 6631D2              <1> 	xor edx, edx
   115 00000094 6631F6              <1> 	xor esi, esi
   116 00000097 6631FF              <1> 	xor edi, edi
   117 0000009A BA9200              <1> 	mov dx, 0x92
   118 0000009D EC                  <1> 	in al, dx	;;A20
   119 0000009E 0C02                <1> 	or al, 2
   120 000000A0 EE                  <1> 	out dx, al
   121 000000A1 8CCB                <1> 	mov bx,cs		; EBX=segment
   122 000000A3 66C1E304            <1> 	shl ebx,4		;	<< 4
   123 000000A7 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   124 000000AB A3[1F03]            <1> 	mov [gdt2 + 2],ax
   125 000000AE A3[2703]            <1> 	mov [gdt3 + 2],ax
   126 000000B1 66C1E810            <1> 	shr eax,16
   127 000000B5 A2[2103]            <1> 	mov [gdt2 + 4],al
   128 000000B8 A2[2903]            <1> 	mov [gdt3 + 4],al
   129 000000BB 8826[2403]          <1> 	mov [gdt2 + 7],ah
   130 000000BF 8826[2C03]          <1> 	mov [gdt3 + 7],ah
   131                              <1> 
   132 000000C3 66B8[A65F0000]      <1> 	mov eax, initialstack
   133 000000C9 660306[1D02]        <1> 	add eax, [newcodecache]
   134 000000CE A3[1703]            <1> 	mov [gdts + 2],ax
   135 000000D1 66C1E810            <1> 	shr eax, 16
   136 000000D5 A2[1903]            <1> 	mov [gdts + 4],al
   137 000000D8 8826[1C03]          <1> 	mov [gdts + 7], ah
   138                              <1> 	
   139 000000DC 66A1[1D02]          <1> 	mov eax, [newcodecache]
   140 000000E0 A3[2F03]            <1> 	mov [gdt4 + 2],ax
   141 000000E3 A3[3703]            <1> 	mov [gdt5 + 2],ax
   142 000000E6 A3[3F03]            <1> 	mov [gdtv8086 + 2], ax
   143 000000E9 A3[4703]            <1> 	mov [gdtv80862 + 2], ax
   144 000000EC 66C1E810            <1> 	shr eax,16
   145 000000F0 A2[3103]            <1> 	mov [gdt4 + 4],al
   146 000000F3 A2[3903]            <1> 	mov [gdt5 + 4],al
   147 000000F6 A2[4103]            <1> 	mov [gdtv8086 + 4],al
   148 000000F9 A2[4903]            <1> 	mov [gdtv80862 + 4],al
   149 000000FC 8826[3403]          <1> 	mov [gdt4 + 7],ah
   150 00000100 8826[3C03]          <1> 	mov [gdt5 + 7],ah
   151 00000104 8826[4403]          <1> 	mov [gdtv8086 + 7],ah
   152 00000108 8826[4C03]          <1> 	mov [gdtv80862 + 7],ah
   153                              <1> 	
   154 0000010C 66B800004000        <1> 	mov eax, dosprogloc
   155 00000112 660306[1D02]        <1> 	add eax, [newcodecache]
   156 00000117 A3[4F03]            <1> 	mov [gdtdos + 2],ax
   157 0000011A A3[5703]            <1> 	mov [gdtdos2 + 2],ax
   158 0000011D 66C1E810            <1> 	shr eax,16
   159 00000121 A2[5103]            <1> 	mov [gdtdos + 4],al
   160 00000124 A2[5903]            <1> 	mov [gdtdos2 + 4],al
   161 00000127 8826[5403]          <1> 	mov [gdtdos + 7],ah
   162 0000012B 8826[5C03]          <1> 	mov [gdtdos2 + 7],ah
   163                              <1> 	
   164                              <1> ; fix up gdt and idt
   165 0000012F 67668D83[05030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   166 00000137 66A3[FB02]          <1> 	mov [gdtr + 2],eax
   167 0000013B 67668D83[5D030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   168 00000143 66A3[0103]          <1> 	mov [idtr + 2],eax
   169 00000147 FA                  <1> 	cli
   170 00000148 0F0116[F902]        <1> 	lgdt [gdtr]
   171 0000014D 0F011E[FF02]        <1> 	lidt [idtr]
   172 00000152 6631DB              <1> 	xor ebx, ebx
   173 00000155 8CDB                <1> 	mov bx, ds
   174 00000157 66891E[1902]        <1> 	mov [basecache], ebx
   175 0000015C 0F20C0              <1> 	mov eax,cr0
   176 0000015F 0C01                <1> 	or al,1
   177 00000161 0F22C0              <1> 	mov cr0,eax
   178 00000164 EA[6901]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   179                              <1> [BITS 32]
   180                              <1> do_pm:
   181 00000169 31C0                <1> 	xor eax, eax
   182 0000016B 66B82000            <1> 	mov ax, SYS_DATA_SEL
   183 0000016F 8ED8                <1> 	mov ds, ax
   184 00000171 8EC0                <1> 	mov es, ax
   185 00000173 8EE0                <1> 	mov fs, ax
   186 00000175 66B83000            <1> 	mov ax, NEW_DATA_SEL
   187 00000179 8EE8                <1> 	mov gs, ax
   188                              <1> 	
   189                              <1> copykernel:
   190 0000017B 648B06              <1> 	mov eax, [fs:esi]
   191 0000017E 658906              <1> 	mov [gs:esi], eax
   192 00000181 81C604000000        <1> 	add esi, 4
   193 00000187 81FE[A65F0000]      <1> 	cmp esi, bsscopy
   194 0000018D 72EC                <1> 	jb copykernel
   195 0000018F EA[96010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   196                              <1> 	
   197                              <1> done_copy:
   198 00000196 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   199 0000019A 8ED8                <1> 	mov ds, ax
   200 0000019C 8EC0                <1> 	mov es, ax
   201 0000019E 8EE0                <1> 	mov fs, ax
   202                              <1> 	;mov ax, STACK_SEL
   203 000001A0 8ED0                <1> 	mov ss, ax
   204 000001A2 BC[466F0000]        <1> 	mov esp, stackend
   205 000001A7 66B82000            <1> 	mov ax, SYS_DATA_SEL
   206 000001AB 8EE8                <1> 	mov gs, ax
   207                              <1> 	
   208 000001AD E819450000          <1> 	call initialize	;initialize drivers
   209                              <1> 	
   210 000001B2 A1[1D020000]        <1> 	mov eax, [newcodecache]
   211 000001B7 C1E804              <1> 	shr eax, 4
   212 000001BA A3[19020000]        <1> 	mov [basecache], eax
   213                              <1> 	
   214 000001BF BE[03151100]        <1> 	mov esi, bssend
   215 000001C4 31C0                <1> 	xor eax, eax
   216                              <1> clearkernelbuffers:
   217 000001C6 8906                <1> 	mov [esi], eax
   218 000001C8 81EE04000000        <1> 	sub esi, 4
   219 000001CE 81FE[A65F0000]      <1> 	cmp esi, bsscopy
   220 000001D4 77F0                <1> 	ja clearkernelbuffers
   221 000001D6 FB                  <1> 	sti
   222                              <1> 
   223                              <1> getmemoryspace:
   224 000001D7 BE[665D0000]        <1> 	mov esi, memlistbuf
   225 000001DC 31FF                <1> 	xor edi, edi
   226 000001DE 668B3D[A65F0000]    <1> 	mov di, [memlistend]
   227 000001E5 01F7                <1> 	add edi, esi
   228 000001E7 31C0                <1> 	xor eax, eax
   229                              <1> memoryspaceaddition:
   230 000001E9 39FE                <1> 	cmp esi, edi
   231 000001EB 7322                <1> 	jae finishedmemspacecalc
   232 000001ED 81C608000000        <1> 	add esi, 8
   233 000001F3 8B0E                <1> 	mov ecx, [esi]
   234 000001F5 81C608000000        <1> 	add esi, 8
   235 000001FB 8B1E                <1> 	mov ebx, [esi]
   236 000001FD 81C608000000        <1> 	add esi, 8
   237 00000203 81FB01000000        <1> 	cmp ebx, 1
   238 00000209 75DE                <1> 	jne memoryspaceaddition
   239 0000020B 01C8                <1> 	add eax, ecx
   240 0000020D EBDA                <1> 	jmp memoryspaceaddition
   241                              <1> finishedmemspacecalc:
   242 0000020F A3[26020000]        <1> 	mov [memoryspace], eax
   243                              <1> %ifdef gui.included
   244                              <1> 	cmp byte [guion], 0
   245                              <1> 	je near normalstartup
   246                              <1> 	mov ebx, [basecache]
   247                              <1> 	shl ebx, 4
   248                              <1> 	mov edi, [physbaseptr]
   249                              <1> 	sub edi, ebx
   250                              <1> 	mov [physbaseptr], edi
   251                              <1> 	jmp guiboot
   252                              <1> %endif
   253                              <1> normalstartup:
   254 00000214 E914230000          <1> 	jmp os
   255                              <1> 	
   256 00000219 00000000            <1> basecache dd 0
   257 0000021D 00001000            <1> newcodecache dd 0x100000
   258                              <1> 
   259 00000221 00                  <1> testingcpuspeed db 0
   260 00000222 00000000            <1> cpuspeedperint dd 0
   261 00000226 00000000            <1> memoryspace dd 0
   262 0000022A 7D0A                <1> pitdiv dw 2685
   263 0000022C 2E562200            <1> timeinterval dd 2250286
   264 00000230 00000000            <1> timeseconds dd 0
   265 00000234 00000000            <1> timenanoseconds dd 0
   266 00000238 00                  <1> soundon db 0
   267 00000239 0000                <1> soundrepititions dw 0
   268 0000023B 00000000            <1> soundpos dd 0
   269 0000023F 00000000            <1> soundendpos dd 0
   270                              <1> 
   271                              <1> cpuspeedend:
   272 00000243 C605[21020000]00    <1> 	mov byte [testingcpuspeed], 0
   273 0000024A A3[22020000]        <1> 	mov [cpuspeedperint], eax
   274 0000024F B8[493E0000]        <1> 	mov eax, cpuspeedloopend
   275 00000254 890424              <1> 	mov [esp], eax
   276 00000257 E996000000          <1> 	jmp handled
   277                              <1> 
   278                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   279                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   280                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   281                              <1> 
   282                              <1> pitinterrupt: ;this controls threading
   283 0000025C FA                  <1> 	cli
   284 0000025D 803D[21020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   285 00000264 74DD                <1> 	je cpuspeedend
   286                              <1> 		
   287 00000266 E860000000          <1> 	call timekeeper ;this updates the internal time
   288                              <1> 	
   289 0000026B 803D[38020000]01    <1> 	cmp byte [soundon], 1
   290 00000272 0F846D400000        <1> 	je near PCSpeakerRAW
   291                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   292                              <1> %ifdef threads.included
   293 00000278 803D[664B0000]01    <1> 	cmp byte [threadson], 1
   294 0000027F 0F8481480000        <1> 	je near threadswitch
   295                              <1> %endif
   296                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   297 00000285 803D[664B0000]00    <1> 	cmp byte [threadson], 0
   298 0000028C 0F8460000000        <1> 	je near handled
   299                              <1> %ifdef io.serial
   300                              <1> 	jmp handled
   301                              <1> %else
   302 00000292 FA                  <1> 	cli
   303 00000293 60                  <1> 	pusha
   304 00000294 E460                <1> 	in al, 60h
   305 00000296 3C01                <1> 	cmp al, 1		;escape
   306 00000298 7405                <1> 	je userint
   307 0000029A E951000000          <1> 	jmp handled2
   308                              <1> userint:
   309                              <1> 	;UNMASK ALL INTS
   310 0000029F 30C0                <1> 	xor al, al
   311 000002A1 E621                <1> 	out 0x21, al
   312 000002A3 30C0                <1> 	xor al, al
   313 000002A5 E6A1                <1> 	out 0xA1, al
   314 000002A7 B020                <1> 	mov al, 0x20
   315 000002A9 E6A0                <1> 	out 0xA0, al
   316 000002AB E620                <1> 	out 0x20, al
   317                              <1> 	;RESET PIT DIVISOR
   318 000002AD 66A1[2A020000]      <1> 	mov ax, [pitdiv]
   319 000002B3 E640                <1> 	out 0x40, al
   320 000002B5 66C1C008            <1> 	rol ax, 8
   321 000002B9 E640                <1> 	out 0x40, al
   322                              <1> 	;RESET PIC
   323 000002BB B020                <1> 	mov al, 0x20
   324 000002BD E620                <1> 	out 0x20, al
   325 000002BF 61                  <1> 	popa
   326 000002C0 FB                  <1> 	sti
   327 000002C1 BC[466F0000]        <1> 	mov esp, stackend ;reset stack
   328 000002C6 E91B240000          <1> 	jmp nwcmd
   329                              <1> %endif
   330                              <1> %ifdef rtl8139.included
   331                              <1> rtl8139.irq:
   332                              <1> 	cli
   333                              <1> 	pusha
   334                              <1> 	mov edx, [basenicaddr]
   335                              <1> 	add edx, rtl8139.ISR
   336                              <1> 	xor eax, eax
   337                              <1> 	in ax, dx
   338                              <1> 	mov ecx, eax
   339                              <1> 	call showhex
   340                              <1> 	jmp handled2
   341                              <1> %endif
   342                              <1> %ifdef sound.included
   343                              <1> sblaster.irq:
   344                              <1> 	cli
   345                              <1> 	pusha
   346                              <1> 	cmp byte [SoundBlaster], 1
   347                              <1> 	je near sblastercont
   348                              <1> 	jmp handled2
   349                              <1> %endif
   350                              <1> 	
   351                              <1> timekeeper:
   352 000002CB 50                  <1> 	push eax
   353 000002CC A1[34020000]        <1> 	mov eax, [timenanoseconds]
   354 000002D1 0305[2C020000]      <1> 	add eax, [timeinterval]
   355 000002D7 3D00CA9A3B          <1> 	cmp eax, 1000000000
   356 000002DC 720B                <1> 	jb nonanosecondrollover
   357 000002DE FF05[30020000]      <1> 	inc dword [timeseconds]
   358 000002E4 2D00CA9A3B          <1> 	sub eax, 1000000000
   359                              <1> nonanosecondrollover:
   360 000002E9 A3[34020000]        <1> 	mov [timenanoseconds], eax
   361 000002EE 58                  <1> 	pop eax
   362 000002EF C3                  <1> 	ret
   363                              <1> 	
   364                              <1> handled2:
   365 000002F0 61                  <1> 	popa
   366                              <1> handled3:
   367 000002F1 FB                  <1> 	sti
   368                              <1> handled:
   369 000002F2 50                  <1> 	push eax
   370 000002F3 B020                <1> 	mov al, 0x20
   371 000002F5 E620                <1> 	out 0x20, al
   372 000002F7 58                  <1> 	pop eax
   373 000002F8 CF                  <1> 	iret
   374                              <1> [BITS 16]
   375                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   376                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   377                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   378 000002F9 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   379 000002FB 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   380                              <1> 
   381 000002FF FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   382 00000301 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   383                              <1> 
   384                              <1> 
   385 00000305 0000                <1> gdt:	dw 0			; limit 15:0
   386 00000307 0000                <1> 	dw 0			; base 15:0
   387 00000309 00                  <1> 	db 0			; base 23:16
   388 0000030A 00                  <1> 	db 0			; type
   389 0000030B 00                  <1> 	db 0			; limit 19:16, flags
   390 0000030C 00                  <1> 	db 0			; base 31:24
   391                              <1> ; linear data segment descriptor
   392                              <1> LINEAR_SEL	equ	$-gdt
   393 0000030D FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   394 0000030F 0000                <1> 	dw 0			; base for this one is always 0
   395 00000311 00                  <1> 	db 0
   396 00000312 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   397 00000313 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   398 00000314 00                  <1> 	db 0
   399                              <1> STACK_SEL	equ $-gdt
   400 00000315 0200                <1> gdts:	dw 2;(stackend)/4096
   401 00000317 0000                <1> 	dw 0
   402 00000319 00                  <1> 	db 0
   403 0000031A 92                  <1> 	db 0x92
   404 0000031B CF                  <1> 	db 0xCF
   405 0000031C 00                  <1> 	db 0
   406                              <1> ; code segment descriptor
   407                              <1> SYS_CODE_SEL	equ	$-gdt
   408 0000031D FFFF                <1> gdt2:	dw 0xFFFF
   409 0000031F 0000                <1> 	dw 0			; (base gets set above)
   410 00000321 00                  <1> 	db 0
   411 00000322 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   412 00000323 CF                  <1> 	db 0xCF
   413 00000324 00                  <1> 	db 0
   414                              <1> ; data segment descriptor
   415                              <1> SYS_DATA_SEL	equ	$-gdt
   416 00000325 FFFF                <1> gdt3:	dw 0xFFFF
   417 00000327 0000                <1> 	dw 0			; (base gets set above)
   418 00000329 00                  <1> 	db 0
   419 0000032A 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   420 0000032B CF                  <1> 	db 0xCF
   421 0000032C 00                  <1> 	db 0
   422                              <1> NEW_CODE_SEL	equ	$-gdt
   423 0000032D FFFF                <1> gdt4:	dw 0xFFFF
   424 0000032F 0000                <1> 	dw 0			; (base gets set above)
   425 00000331 00                  <1> 	db 0
   426 00000332 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   427 00000333 CF                  <1> 	db 0xCF
   428 00000334 00                  <1> 	db 0
   429                              <1> ; data segment descriptor
   430                              <1> NEW_DATA_SEL	equ	$-gdt
   431 00000335 FFFF                <1> gdt5:	dw 0xFFFF
   432 00000337 0000                <1> 	dw 0			; (base gets set above)
   433 00000339 00                  <1> 	db 0
   434 0000033A 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   435 0000033B CF                  <1> 	db 0xCF
   436 0000033C 00                  <1> 	db 0
   437                              <1> V8086_CODE_SEL	equ $-gdt
   438 0000033D FFFF                <1> gdtv8086: dw 0xFFFF
   439 0000033F 0000                <1> 	dw 0
   440 00000341 00                  <1> 	db 0
   441 00000342 9A                  <1> 	db 0x9A
   442 00000343 8F                  <1> 	db 0x8F
   443 00000344 00                  <1> 	db 0
   444                              <1> V8086_DATA_SEL	equ $-gdt
   445 00000345 FFFF                <1> gdtv80862: dw 0xFFFF
   446 00000347 0000                <1> 	dw 0
   447 00000349 00                  <1> 	db 0
   448 0000034A 92                  <1> 	db 0x92
   449 0000034B 8F                  <1> 	db 0x8F
   450 0000034C 00                  <1> 	db 0
   451                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   452 0000034D 0001                <1> gdtdos:	dw 256	;give it 1 MB
   453 0000034F 0000                <1> 	dw 0
   454 00000351 00                  <1> 	db 0
   455 00000352 9A                  <1> 	db 0x9A
   456 00000353 8F                  <1> 	db 0x8F ;16 bit
   457 00000354 00                  <1> 	db 0
   458                              <1> DOS_DATA_SEL 	equ $-gdt
   459 00000355 0001                <1> gdtdos2:	dw 256
   460 00000357 0000                <1> 	dw 0
   461 00000359 00                  <1> 	db 0
   462 0000035A 92                  <1> 	db 0x92
   463 0000035B 8F                  <1> 	db 0x8F ;16 bit
   464 0000035C 00                  <1> 	db 0
   465                              <1> gdt_end:
   466                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   467                              <1> ;	interrupt descriptor table (IDT)
   468                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   469                              <1> ; 32 reserved interrupts:
   470                              <1> idt:	
   471                              <1> %assign i 0
   472                              <1> %rep    32
   473                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   474                              <1> %assign i i+1
   475                              <1> %endrep
   476 0000035D [7E0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   477                              <2> %assign i i+1
   478 00000365 [8A0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   479                              <2> %assign i i+1
   480 0000036D [960C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   481                              <2> %assign i i+1
   482 00000375 [A20C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   483                              <2> %assign i i+1
   484 0000037D [AE0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   485                              <2> %assign i i+1
   486 00000385 [BA0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   487                              <2> %assign i i+1
   488 0000038D [C60C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   489                              <2> %assign i i+1
   490 00000395 [D20C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   491                              <2> %assign i i+1
   492 0000039D [DE0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   493                              <2> %assign i i+1
   494 000003A5 [EA0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   495                              <2> %assign i i+1
   496 000003AD [F60C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   497                              <2> %assign i i+1
   498 000003B5 [020D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   499                              <2> %assign i i+1
   500 000003BD [0E0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   501                              <2> %assign i i+1
   502 000003C5 [1A0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   503                              <2> %assign i i+1
   504 000003CD [260D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   505                              <2> %assign i i+1
   506 000003D5 [320D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   507                              <2> %assign i i+1
   508 000003DD [3E0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   509                              <2> %assign i i+1
   510 000003E5 [4A0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   511                              <2> %assign i i+1
   512 000003ED [560D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   513                              <2> %assign i i+1
   514 000003F5 [620D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   515                              <2> %assign i i+1
   516 000003FD [6E0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   517                              <2> %assign i i+1
   518 00000405 [7A0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   519                              <2> %assign i i+1
   520 0000040D [860D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   521                              <2> %assign i i+1
   522 00000415 [920D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   523                              <2> %assign i i+1
   524 0000041D [9E0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   525                              <2> %assign i i+1
   526 00000425 [AA0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   527                              <2> %assign i i+1
   528 0000042D [B60D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   529                              <2> %assign i i+1
   530 00000435 [C20D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   531                              <2> %assign i i+1
   532 0000043D [CE0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   533                              <2> %assign i i+1
   534 00000445 [DA0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   535                              <2> %assign i i+1
   536 0000044D [E60D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   537                              <2> %assign i i+1
   538 00000455 [F20D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   539                              <2> %assign i i+1
   540 0000045D [FE23]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   541 00000465 [0224]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   542                              <1> %assign i 0x22
   543                              <1> %rep 14
   544                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   545                              <1> %assign i +1
   546                              <1> %endrep
   547 0000046D [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   548                              <2> %assign i +1
   549 00000475 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   550                              <2> %assign i +1
   551 0000047D [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   552                              <2> %assign i +1
   553 00000485 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   554                              <2> %assign i +1
   555 0000048D [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   556                              <2> %assign i +1
   557 00000495 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   558                              <2> %assign i +1
   559 0000049D [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   560                              <2> %assign i +1
   561 000004A5 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   562                              <2> %assign i +1
   563 000004AD [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   564                              <2> %assign i +1
   565 000004B5 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   566                              <2> %assign i +1
   567 000004BD [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   568                              <2> %assign i +1
   569 000004C5 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   570                              <2> %assign i +1
   571 000004CD [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   572                              <2> %assign i +1
   573 000004D5 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   574                              <2> %assign i +1
   575                              <1> ;INT 30h for os use and 3rd party use:
   576 000004DD [C419]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   577                              <1> %assign i 0x31
   578                              <1> %rep 15
   579                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   580                              <1> %assign i +1
   581                              <1> %endrep
   582 000004E5 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   583                              <2> %assign i +1
   584 000004ED [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   585                              <2> %assign i +1
   586 000004F5 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   587                              <2> %assign i +1
   588 000004FD [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   589                              <2> %assign i +1
   590 00000505 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   591                              <2> %assign i +1
   592 0000050D [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   593                              <2> %assign i +1
   594 00000515 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   595                              <2> %assign i +1
   596 0000051D [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   597                              <2> %assign i +1
   598 00000525 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   599                              <2> %assign i +1
   600 0000052D [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   601                              <2> %assign i +1
   602 00000535 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   603                              <2> %assign i +1
   604 0000053D [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   605                              <2> %assign i +1
   606 00000545 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   607                              <2> %assign i +1
   608 0000054D [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   609                              <2> %assign i +1
   610 00000555 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   611                              <2> %assign i +1
   612                              <1> ;and here we are at 0x40
   613                              <1> ;here are all the irq's
   614 0000055D [5C02]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   615 00000565 [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   616 0000056D [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   617 00000575 [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   618 0000057D [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   619                              <1> 	%ifdef sound.included
   620                              <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   621                              <1> 	%else
   622 00000585 [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   623                              <1> 	%endif
   624 0000058D [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   625 00000595 [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   626 0000059D [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   627 000005A5 [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 9
   628 000005AD [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   629                              <1> 	%ifdef rtl8139.included
   630                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   631                              <1> 	%else
   632 000005B5 [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   633                              <1> 	%endif
   634 000005BD [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   635 000005C5 [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   636 000005CD [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   637 000005D5 [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   638                              <1> ;This brings me up to 0x50
   639                              <1> %assign i 0x50
   640                              <1> %rep 176
   641                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   642                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   643                              <1> %assign i +1
   644                              <1> %endrep
   645 000005DD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   646                              <2> 
   647                              <2> %assign i +1
   648 000005E5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   649                              <2> 
   650                              <2> %assign i +1
   651 000005ED [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   652                              <2> 
   653                              <2> %assign i +1
   654 000005F5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   655                              <2> 
   656                              <2> %assign i +1
   657 000005FD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   658                              <2> 
   659                              <2> %assign i +1
   660 00000605 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   661                              <2> 
   662                              <2> %assign i +1
   663 0000060D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   664                              <2> 
   665                              <2> %assign i +1
   666 00000615 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   667                              <2> 
   668                              <2> %assign i +1
   669 0000061D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   670                              <2> 
   671                              <2> %assign i +1
   672 00000625 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   673                              <2> 
   674                              <2> %assign i +1
   675 0000062D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   676                              <2> 
   677                              <2> %assign i +1
   678 00000635 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   679                              <2> 
   680                              <2> %assign i +1
   681 0000063D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   682                              <2> 
   683                              <2> %assign i +1
   684 00000645 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   685                              <2> 
   686                              <2> %assign i +1
   687 0000064D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   688                              <2> 
   689                              <2> %assign i +1
   690 00000655 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   691                              <2> 
   692                              <2> %assign i +1
   693 0000065D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   694                              <2> 
   695                              <2> %assign i +1
   696 00000665 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   697                              <2> 
   698                              <2> %assign i +1
   699 0000066D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   700                              <2> 
   701                              <2> %assign i +1
   702 00000675 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   703                              <2> 
   704                              <2> %assign i +1
   705 0000067D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   706                              <2> 
   707                              <2> %assign i +1
   708 00000685 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   709                              <2> 
   710                              <2> %assign i +1
   711 0000068D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   712                              <2> 
   713                              <2> %assign i +1
   714 00000695 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   715                              <2> 
   716                              <2> %assign i +1
   717 0000069D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   718                              <2> 
   719                              <2> %assign i +1
   720 000006A5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   721                              <2> 
   722                              <2> %assign i +1
   723 000006AD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   724                              <2> 
   725                              <2> %assign i +1
   726 000006B5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   727                              <2> 
   728                              <2> %assign i +1
   729 000006BD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   730                              <2> 
   731                              <2> %assign i +1
   732 000006C5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   733                              <2> 
   734                              <2> %assign i +1
   735 000006CD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   736                              <2> 
   737                              <2> %assign i +1
   738 000006D5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   739                              <2> 
   740                              <2> %assign i +1
   741 000006DD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   742                              <2> 
   743                              <2> %assign i +1
   744 000006E5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   745                              <2> 
   746                              <2> %assign i +1
   747 000006ED [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   748                              <2> 
   749                              <2> %assign i +1
   750 000006F5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   751                              <2> 
   752                              <2> %assign i +1
   753 000006FD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   754                              <2> 
   755                              <2> %assign i +1
   756 00000705 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   757                              <2> 
   758                              <2> %assign i +1
   759 0000070D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   760                              <2> 
   761                              <2> %assign i +1
   762 00000715 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   763                              <2> 
   764                              <2> %assign i +1
   765 0000071D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   766                              <2> 
   767                              <2> %assign i +1
   768 00000725 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   769                              <2> 
   770                              <2> %assign i +1
   771 0000072D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   772                              <2> 
   773                              <2> %assign i +1
   774 00000735 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   775                              <2> 
   776                              <2> %assign i +1
   777 0000073D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   778                              <2> 
   779                              <2> %assign i +1
   780 00000745 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   781                              <2> 
   782                              <2> %assign i +1
   783 0000074D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   784                              <2> 
   785                              <2> %assign i +1
   786 00000755 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   787                              <2> 
   788                              <2> %assign i +1
   789 0000075D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   790                              <2> 
   791                              <2> %assign i +1
   792 00000765 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   793                              <2> 
   794                              <2> %assign i +1
   795 0000076D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   796                              <2> 
   797                              <2> %assign i +1
   798 00000775 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   799                              <2> 
   800                              <2> %assign i +1
   801 0000077D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   802                              <2> 
   803                              <2> %assign i +1
   804 00000785 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   805                              <2> 
   806                              <2> %assign i +1
   807 0000078D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   808                              <2> 
   809                              <2> %assign i +1
   810 00000795 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   811                              <2> 
   812                              <2> %assign i +1
   813 0000079D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   814                              <2> 
   815                              <2> %assign i +1
   816 000007A5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   817                              <2> 
   818                              <2> %assign i +1
   819 000007AD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   820                              <2> 
   821                              <2> %assign i +1
   822 000007B5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   823                              <2> 
   824                              <2> %assign i +1
   825 000007BD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   826                              <2> 
   827                              <2> %assign i +1
   828 000007C5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   829                              <2> 
   830                              <2> %assign i +1
   831 000007CD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   832                              <2> 
   833                              <2> %assign i +1
   834 000007D5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   835                              <2> 
   836                              <2> %assign i +1
   837 000007DD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   838                              <2> 
   839                              <2> %assign i +1
   840 000007E5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   841                              <2> 
   842                              <2> %assign i +1
   843 000007ED [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   844                              <2> 
   845                              <2> %assign i +1
   846 000007F5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   847                              <2> 
   848                              <2> %assign i +1
   849 000007FD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   850                              <2> 
   851                              <2> %assign i +1
   852 00000805 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   853                              <2> 
   854                              <2> %assign i +1
   855 0000080D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   856                              <2> 
   857                              <2> %assign i +1
   858 00000815 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   859                              <2> 
   860                              <2> %assign i +1
   861 0000081D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   862                              <2> 
   863                              <2> %assign i +1
   864 00000825 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   865                              <2> 
   866                              <2> %assign i +1
   867 0000082D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   868                              <2> 
   869                              <2> %assign i +1
   870 00000835 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   871                              <2> 
   872                              <2> %assign i +1
   873 0000083D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   874                              <2> 
   875                              <2> %assign i +1
   876 00000845 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   877                              <2> 
   878                              <2> %assign i +1
   879 0000084D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   880                              <2> 
   881                              <2> %assign i +1
   882 00000855 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   883                              <2> 
   884                              <2> %assign i +1
   885 0000085D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   886                              <2> 
   887                              <2> %assign i +1
   888 00000865 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   889                              <2> 
   890                              <2> %assign i +1
   891 0000086D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   892                              <2> 
   893                              <2> %assign i +1
   894 00000875 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   895                              <2> 
   896                              <2> %assign i +1
   897 0000087D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   898                              <2> 
   899                              <2> %assign i +1
   900 00000885 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   901                              <2> 
   902                              <2> %assign i +1
   903 0000088D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   904                              <2> 
   905                              <2> %assign i +1
   906 00000895 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   907                              <2> 
   908                              <2> %assign i +1
   909 0000089D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   910                              <2> 
   911                              <2> %assign i +1
   912 000008A5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   913                              <2> 
   914                              <2> %assign i +1
   915 000008AD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   916                              <2> 
   917                              <2> %assign i +1
   918 000008B5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   919                              <2> 
   920                              <2> %assign i +1
   921 000008BD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   922                              <2> 
   923                              <2> %assign i +1
   924 000008C5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   925                              <2> 
   926                              <2> %assign i +1
   927 000008CD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   928                              <2> 
   929                              <2> %assign i +1
   930 000008D5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   931                              <2> 
   932                              <2> %assign i +1
   933 000008DD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   934                              <2> 
   935                              <2> %assign i +1
   936 000008E5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   937                              <2> 
   938                              <2> %assign i +1
   939 000008ED [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   940                              <2> 
   941                              <2> %assign i +1
   942 000008F5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   943                              <2> 
   944                              <2> %assign i +1
   945 000008FD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   946                              <2> 
   947                              <2> %assign i +1
   948 00000905 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   949                              <2> 
   950                              <2> %assign i +1
   951 0000090D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   952                              <2> 
   953                              <2> %assign i +1
   954 00000915 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   955                              <2> 
   956                              <2> %assign i +1
   957 0000091D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   958                              <2> 
   959                              <2> %assign i +1
   960 00000925 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   961                              <2> 
   962                              <2> %assign i +1
   963 0000092D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   964                              <2> 
   965                              <2> %assign i +1
   966 00000935 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   967                              <2> 
   968                              <2> %assign i +1
   969 0000093D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   970                              <2> 
   971                              <2> %assign i +1
   972 00000945 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   973                              <2> 
   974                              <2> %assign i +1
   975 0000094D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   976                              <2> 
   977                              <2> %assign i +1
   978 00000955 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   979                              <2> 
   980                              <2> %assign i +1
   981 0000095D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   982                              <2> 
   983                              <2> %assign i +1
   984 00000965 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   985                              <2> 
   986                              <2> %assign i +1
   987 0000096D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   988                              <2> 
   989                              <2> %assign i +1
   990 00000975 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   991                              <2> 
   992                              <2> %assign i +1
   993 0000097D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   994                              <2> 
   995                              <2> %assign i +1
   996 00000985 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   997                              <2> 
   998                              <2> %assign i +1
   999 0000098D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1000                              <2> 
  1001                              <2> %assign i +1
  1002 00000995 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1003                              <2> 
  1004                              <2> %assign i +1
  1005 0000099D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1006                              <2> 
  1007                              <2> %assign i +1
  1008 000009A5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1009                              <2> 
  1010                              <2> %assign i +1
  1011 000009AD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1012                              <2> 
  1013                              <2> %assign i +1
  1014 000009B5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1015                              <2> 
  1016                              <2> %assign i +1
  1017 000009BD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1018                              <2> 
  1019                              <2> %assign i +1
  1020 000009C5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1021                              <2> 
  1022                              <2> %assign i +1
  1023 000009CD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1024                              <2> 
  1025                              <2> %assign i +1
  1026 000009D5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1027                              <2> 
  1028                              <2> %assign i +1
  1029 000009DD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1030                              <2> 
  1031                              <2> %assign i +1
  1032 000009E5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1033                              <2> 
  1034                              <2> %assign i +1
  1035 000009ED [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1036                              <2> 
  1037                              <2> %assign i +1
  1038 000009F5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1039                              <2> 
  1040                              <2> %assign i +1
  1041 000009FD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1042                              <2> 
  1043                              <2> %assign i +1
  1044 00000A05 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1045                              <2> 
  1046                              <2> %assign i +1
  1047 00000A0D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1048                              <2> 
  1049                              <2> %assign i +1
  1050 00000A15 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1051                              <2> 
  1052                              <2> %assign i +1
  1053 00000A1D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1054                              <2> 
  1055                              <2> %assign i +1
  1056 00000A25 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1057                              <2> 
  1058                              <2> %assign i +1
  1059 00000A2D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1060                              <2> 
  1061                              <2> %assign i +1
  1062 00000A35 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1063                              <2> 
  1064                              <2> %assign i +1
  1065 00000A3D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1066                              <2> 
  1067                              <2> %assign i +1
  1068 00000A45 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1069                              <2> 
  1070                              <2> %assign i +1
  1071 00000A4D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1072                              <2> 
  1073                              <2> %assign i +1
  1074 00000A55 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1075                              <2> 
  1076                              <2> %assign i +1
  1077 00000A5D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1078                              <2> 
  1079                              <2> %assign i +1
  1080 00000A65 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1081                              <2> 
  1082                              <2> %assign i +1
  1083 00000A6D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1084                              <2> 
  1085                              <2> %assign i +1
  1086 00000A75 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1087                              <2> 
  1088                              <2> %assign i +1
  1089 00000A7D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1090                              <2> 
  1091                              <2> %assign i +1
  1092 00000A85 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1093                              <2> 
  1094                              <2> %assign i +1
  1095 00000A8D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1096                              <2> 
  1097                              <2> %assign i +1
  1098 00000A95 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1099                              <2> 
  1100                              <2> %assign i +1
  1101 00000A9D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1102                              <2> 
  1103                              <2> %assign i +1
  1104 00000AA5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1105                              <2> 
  1106                              <2> %assign i +1
  1107 00000AAD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1108                              <2> 
  1109                              <2> %assign i +1
  1110 00000AB5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1111                              <2> 
  1112                              <2> %assign i +1
  1113 00000ABD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1114                              <2> 
  1115                              <2> %assign i +1
  1116 00000AC5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1117                              <2> 
  1118                              <2> %assign i +1
  1119 00000ACD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1120                              <2> 
  1121                              <2> %assign i +1
  1122 00000AD5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1123                              <2> 
  1124                              <2> %assign i +1
  1125 00000ADD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1126                              <2> 
  1127                              <2> %assign i +1
  1128 00000AE5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1129                              <2> 
  1130                              <2> %assign i +1
  1131 00000AED [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1132                              <2> 
  1133                              <2> %assign i +1
  1134 00000AF5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1135                              <2> 
  1136                              <2> %assign i +1
  1137 00000AFD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1138                              <2> 
  1139                              <2> %assign i +1
  1140 00000B05 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1141                              <2> 
  1142                              <2> %assign i +1
  1143 00000B0D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1144                              <2> 
  1145                              <2> %assign i +1
  1146 00000B15 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1147                              <2> 
  1148                              <2> %assign i +1
  1149 00000B1D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1150                              <2> 
  1151                              <2> %assign i +1
  1152 00000B25 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1153                              <2> 
  1154                              <2> %assign i +1
  1155 00000B2D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1156                              <2> 
  1157                              <2> %assign i +1
  1158 00000B35 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1159                              <2> 
  1160                              <2> %assign i +1
  1161 00000B3D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1162                              <2> 
  1163                              <2> %assign i +1
  1164 00000B45 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1165                              <2> 
  1166                              <2> %assign i +1
  1167 00000B4D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1168                              <2> 
  1169                              <2> %assign i +1
  1170 00000B55 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1171                              <2> 
  1172                              <2> %assign i +1
  1173                              <1> idt_end:
  1174                              <1> [BITS 32]
  1175                                  	%include "source/realmode.asm"
  1176                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1177                              <1> 			;and the return address is in realmodereturn
  1178 00000B5D FA                  <1> 	cli
  1179 00000B5E A3[700C0000]        <1> 	mov [realmodeeax], eax
  1180 00000B63 891D[6C0C0000]      <1> 	mov [realmodeebx], ebx
  1181 00000B69 8925[5E0C0000]      <1> 	mov [pmodeesp], esp
  1182                              <1> 
  1183 00000B6F BB[680C0000]        <1> 	mov ebx, cr0old
  1184                              <1> rmcopytofirstmbyte:
  1185 00000B74 8B03                <1> 	mov eax, [ebx]
  1186 00000B76 658903              <1> 	mov [gs:ebx], eax
  1187 00000B79 81C304000000        <1> 	add ebx, 4
  1188 00000B7F 81FB[780C0000]      <1> 	cmp ebx, realmodeptr
  1189 00000B85 76ED                <1> 	jbe rmcopytofirstmbyte
  1190                              <1> 
  1191 00000B87 EA[8E0B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1192                              <1> 
  1193                              <1> [BITS 16]
  1194                              <1> protected16bit:
  1195 00000B8E B84000              <1> 	mov ax, V8086_DATA_SEL
  1196 00000B91 8ED8                <1> 	mov ds, ax
  1197 00000B93 8EC0                <1> 	mov es, ax
  1198 00000B95 8EE0                <1> 	mov fs, ax
  1199 00000B97 8EE8                <1> 	mov gs, ax
  1200 00000B99 8ED0                <1> 	mov ss, ax
  1201 00000B9B 66BC[466F0000]      <1> 	mov esp, stackend
  1202 00000BA1 0F20C0              <1> 	mov eax, cr0
  1203 00000BA4 66A3[680C]          <1> 	mov [cr0old], eax
  1204 00000BA8 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1205 00000BAE 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1206 00000BB1 EA[B60B]0010        <1> 	jmp 0x1000:inrealmode
  1207                              <1> 
  1208                              <1> inrealmode:
  1209 00000BB6 8CC8                <1> 	mov ax, cs
  1210 00000BB8 8ED8                <1> 	mov ds, ax
  1211 00000BBA 8EC0                <1> 	mov es, ax
  1212 00000BBC 8EE0                <1> 	mov fs, ax
  1213 00000BBE 8EE8                <1> 	mov gs, ax
  1214 00000BC0 8ED0                <1> 	mov ss, ax
  1215 00000BC2 BC[466F]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1216                              <1> 	
  1217 00000BC5 B011                <1> 	mov al, 0x11
  1218 00000BC7 E620                <1> 	out 0x20, al
  1219 00000BC9 E6A0                <1> 	out 0xA0, al
  1220 00000BCB B008                <1> 	mov al, 0x8		;interrupt for master
  1221 00000BCD E621                <1> 	out 0x21, al
  1222 00000BCF B070                <1> 	mov al, 0x70	;interrupt for slave
  1223 00000BD1 E6A1                <1> 	out 0xA1, al
  1224 00000BD3 B004                <1> 	mov al, 4
  1225 00000BD5 E621                <1> 	out 0x21, al
  1226 00000BD7 B002                <1> 	mov al, 2
  1227 00000BD9 E6A1                <1> 	out 0xA1, al
  1228 00000BDB B001                <1> 	mov al, 0x1
  1229 00000BDD E621                <1> 	out 0x21, al
  1230 00000BDF B001                <1> 	mov al, 0x1
  1231 00000BE1 E6A1                <1> 	out 0xA1, al
  1232                              <1> 	
  1233 00000BE3 0F011E[620C]        <1> 	lidt [idt_real]
  1234 00000BE8 FB                  <1> 	sti
  1235                              <1> 
  1236 00000BE9 66A1[700C]          <1> 	mov eax, [realmodeeax]
  1237 00000BED 668B1E[6C0C]        <1> 	mov ebx, [realmodeebx]
  1238                              <1> 
  1239 00000BF2 FF16[780C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1240                              <1> 
  1241 00000BF6 66A3[700C]          <1> 	mov [realmodeeax], eax
  1242 00000BFA 66891E[6C0C]        <1> 	mov [realmodeebx], ebx
  1243                              <1> 
  1244 00000BFF FA                  <1> 	cli
  1245 00000C00 0F0116[F902]        <1> 	lgdt [gdtr]
  1246 00000C05 0F011E[FF02]        <1> 	lidt [idtr]
  1247 00000C0A 0F20C0              <1> 	mov eax, cr0
  1248 00000C0D 0C01                <1> 	or al, 1
  1249 00000C0F 0F22C0              <1> 	mov cr0,eax
  1250 00000C12 EA[170C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1251                              <1> 
  1252                              <1> [BITS 32]
  1253                              <1> returntopmode:
  1254 00000C17 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1255 00000C1B 8ED8                <1> 	mov ds, ax
  1256 00000C1D 8EC0                <1> 	mov es, ax
  1257 00000C1F 8EE0                <1> 	mov fs, ax
  1258 00000C21 8ED0                <1> 	mov ss, ax
  1259 00000C23 8B25[5E0C0000]      <1> 	mov esp, [pmodeesp]
  1260 00000C29 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1261 00000C2D 8EE8                <1> 	mov gs, ax
  1262                              <1> 
  1263 00000C2F BB[680C0000]        <1> 	mov ebx, cr0old
  1264                              <1> rmcopyfromfirstmbyte:
  1265 00000C34 658B03              <1> 	mov eax, [gs:ebx]
  1266 00000C37 8903                <1> 	mov [ebx], eax
  1267 00000C39 81C304000000        <1> 	add ebx, 4
  1268 00000C3F 81FB[780C0000]      <1> 	cmp ebx, realmodeptr
  1269 00000C45 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1270                              <1> 
  1271 00000C47 E8933A0000          <1> 	call initialize.pic ;reset irq's and masks
  1272 00000C4C FB                  <1> 	sti
  1273 00000C4D A1[700C0000]        <1> 	mov eax, [realmodeeax]
  1274 00000C52 8B1D[6C0C0000]      <1> 	mov ebx, [realmodeebx]
  1275 00000C58 FF25[740C0000]      <1> 	jmp dword [realmodereturn]
  1276                              <1> 	
  1277 00000C5E 00000000            <1> pmodeesp dd 0
  1278                              <1> idt_real:
  1279 00000C62 FF03                <1> 	dw 0x3FF
  1280 00000C64 00000000            <1> 	dd 0
  1281 00000C68 00000000            <1> cr0old dd 0
  1282 00000C6C 00000000            <1> realmodeebx dd 0
  1283 00000C70 00000000            <1> realmodeeax dd 0
  1284 00000C74 00000000            <1> realmodereturn dd 0
  1285 00000C78 0000                <1> realmodeptr dw 0
  1286 00000C7A 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1287                                  [BITS 32]
  1288                                      %include "source/exception.asm"
  1289                              <1> %ifdef exceptions.included
  1290                              <1> unhand:	
  1291                              <1> 	%assign i 0
  1292                              <1> 	%rep 32
  1293                              <1> 	mov byte [intprob], i
  1294                              <1> 	jmp unhand2
  1295                              <1> 	%assign i i+1
  1296                              <1> 	%endrep
  1297 00000C7E C605[C50F0000]00    <2>  mov byte [intprob], i
  1298 00000C85 E974010000          <2>  jmp unhand2
  1299                              <2>  %assign i i+1
  1300 00000C8A C605[C50F0000]01    <2>  mov byte [intprob], i
  1301 00000C91 E968010000          <2>  jmp unhand2
  1302                              <2>  %assign i i+1
  1303 00000C96 C605[C50F0000]02    <2>  mov byte [intprob], i
  1304 00000C9D E95C010000          <2>  jmp unhand2
  1305                              <2>  %assign i i+1
  1306 00000CA2 C605[C50F0000]03    <2>  mov byte [intprob], i
  1307 00000CA9 E950010000          <2>  jmp unhand2
  1308                              <2>  %assign i i+1
  1309 00000CAE C605[C50F0000]04    <2>  mov byte [intprob], i
  1310 00000CB5 E944010000          <2>  jmp unhand2
  1311                              <2>  %assign i i+1
  1312 00000CBA C605[C50F0000]05    <2>  mov byte [intprob], i
  1313 00000CC1 E938010000          <2>  jmp unhand2
  1314                              <2>  %assign i i+1
  1315 00000CC6 C605[C50F0000]06    <2>  mov byte [intprob], i
  1316 00000CCD E92C010000          <2>  jmp unhand2
  1317                              <2>  %assign i i+1
  1318 00000CD2 C605[C50F0000]07    <2>  mov byte [intprob], i
  1319 00000CD9 E920010000          <2>  jmp unhand2
  1320                              <2>  %assign i i+1
  1321 00000CDE C605[C50F0000]08    <2>  mov byte [intprob], i
  1322 00000CE5 E914010000          <2>  jmp unhand2
  1323                              <2>  %assign i i+1
  1324 00000CEA C605[C50F0000]09    <2>  mov byte [intprob], i
  1325 00000CF1 E908010000          <2>  jmp unhand2
  1326                              <2>  %assign i i+1
  1327 00000CF6 C605[C50F0000]0A    <2>  mov byte [intprob], i
  1328 00000CFD E9FC000000          <2>  jmp unhand2
  1329                              <2>  %assign i i+1
  1330 00000D02 C605[C50F0000]0B    <2>  mov byte [intprob], i
  1331 00000D09 E9F0000000          <2>  jmp unhand2
  1332                              <2>  %assign i i+1
  1333 00000D0E C605[C50F0000]0C    <2>  mov byte [intprob], i
  1334 00000D15 E9E4000000          <2>  jmp unhand2
  1335                              <2>  %assign i i+1
  1336 00000D1A C605[C50F0000]0D    <2>  mov byte [intprob], i
  1337 00000D21 E9D8000000          <2>  jmp unhand2
  1338                              <2>  %assign i i+1
  1339 00000D26 C605[C50F0000]0E    <2>  mov byte [intprob], i
  1340 00000D2D E9CC000000          <2>  jmp unhand2
  1341                              <2>  %assign i i+1
  1342 00000D32 C605[C50F0000]0F    <2>  mov byte [intprob], i
  1343 00000D39 E9C0000000          <2>  jmp unhand2
  1344                              <2>  %assign i i+1
  1345 00000D3E C605[C50F0000]10    <2>  mov byte [intprob], i
  1346 00000D45 E9B4000000          <2>  jmp unhand2
  1347                              <2>  %assign i i+1
  1348 00000D4A C605[C50F0000]11    <2>  mov byte [intprob], i
  1349 00000D51 E9A8000000          <2>  jmp unhand2
  1350                              <2>  %assign i i+1
  1351 00000D56 C605[C50F0000]12    <2>  mov byte [intprob], i
  1352 00000D5D E99C000000          <2>  jmp unhand2
  1353                              <2>  %assign i i+1
  1354 00000D62 C605[C50F0000]13    <2>  mov byte [intprob], i
  1355 00000D69 E990000000          <2>  jmp unhand2
  1356                              <2>  %assign i i+1
  1357 00000D6E C605[C50F0000]14    <2>  mov byte [intprob], i
  1358 00000D75 E984000000          <2>  jmp unhand2
  1359                              <2>  %assign i i+1
  1360 00000D7A C605[C50F0000]15    <2>  mov byte [intprob], i
  1361 00000D81 E978000000          <2>  jmp unhand2
  1362                              <2>  %assign i i+1
  1363 00000D86 C605[C50F0000]16    <2>  mov byte [intprob], i
  1364 00000D8D E96C000000          <2>  jmp unhand2
  1365                              <2>  %assign i i+1
  1366 00000D92 C605[C50F0000]17    <2>  mov byte [intprob], i
  1367 00000D99 E960000000          <2>  jmp unhand2
  1368                              <2>  %assign i i+1
  1369 00000D9E C605[C50F0000]18    <2>  mov byte [intprob], i
  1370 00000DA5 E954000000          <2>  jmp unhand2
  1371                              <2>  %assign i i+1
  1372 00000DAA C605[C50F0000]19    <2>  mov byte [intprob], i
  1373 00000DB1 E948000000          <2>  jmp unhand2
  1374                              <2>  %assign i i+1
  1375 00000DB6 C605[C50F0000]1A    <2>  mov byte [intprob], i
  1376 00000DBD E93C000000          <2>  jmp unhand2
  1377                              <2>  %assign i i+1
  1378 00000DC2 C605[C50F0000]1B    <2>  mov byte [intprob], i
  1379 00000DC9 E930000000          <2>  jmp unhand2
  1380                              <2>  %assign i i+1
  1381 00000DCE C605[C50F0000]1C    <2>  mov byte [intprob], i
  1382 00000DD5 E924000000          <2>  jmp unhand2
  1383                              <2>  %assign i i+1
  1384 00000DDA C605[C50F0000]1D    <2>  mov byte [intprob], i
  1385 00000DE1 E918000000          <2>  jmp unhand2
  1386                              <2>  %assign i i+1
  1387 00000DE6 C605[C50F0000]1E    <2>  mov byte [intprob], i
  1388 00000DED E90C000000          <2>  jmp unhand2
  1389                              <2>  %assign i i+1
  1390 00000DF2 C605[C50F0000]1F    <2>  mov byte [intprob], i
  1391 00000DF9 E900000000          <2>  jmp unhand2
  1392                              <2>  %assign i i+1
  1393                              <1> unhand2:
  1394 00000DFE FA                  <1> 	cli
  1395 00000DFF 1E                  <1> 	push ds
  1396 00000E00 06                  <1> 	push es
  1397 00000E01 0FA0                <1> 	push fs
  1398 00000E03 0FA8                <1> 	push gs
  1399 00000E05 16                  <1> 	push ss
  1400 00000E06 60                  <1> 	pushad
  1401                              <1> %ifdef gui.included
  1402                              <1> 	cmp byte [guion], 0
  1403                              <1> 	je near noguiunhandstuff
  1404                              <1> 	mov word [locunhandy], 8
  1405                              <1> 	mov word [locunhandx], 8
  1406                              <1> 	mov bx, [background]
  1407                              <1> 	mov [backgroundcache], bx
  1408                              <1> 	mov byte [mousedisabled],1
  1409                              <1> 	mov bx, 1111100000000000b
  1410                              <1> 	mov [background], bx
  1411                              <1> noguiunhandstuff:
  1412                              <1> %endif
  1413 00000E07 89E6                <1> 	mov esi, esp
  1414 00000E09 8935[B30F0000]      <1> 	mov [espfirst], esi
  1415 00000E0F 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1416 00000E15 8935[AF0F0000]      <1> 	mov [esploc], esi
  1417 00000E1B BE[CE0F0000]        <1> 	mov esi, unhandmsg
  1418 00000E20 8935[B70F0000]      <1> 	mov [esiloc], esi
  1419 00000E26 31C9                <1> 	xor ecx, ecx
  1420 00000E28 8A0D[C50F0000]      <1> 	mov cl, [intprob]
  1421 00000E2E BB[61130000]        <1> 	mov ebx, errortypes
  1422 00000E33 C1E102              <1> 	shl ecx, 2
  1423 00000E36 01CB                <1> 	add ebx, ecx
  1424 00000E38 81FB[A1130000]      <1> 	cmp ebx, errortypesend
  1425 00000E3E 7205                <1> 	jb gooderrortype
  1426 00000E40 BB[A1130000]        <1> 	mov ebx, errortypesend
  1427                              <1> gooderrortype:
  1428 00000E45 8B33                <1> 	mov esi, [ebx]
  1429                              <1> %ifdef gui.included
  1430                              <1> 	cmp byte [guion], 0
  1431                              <1> 	je near errortext
  1432                              <1> 	mov cx, [locunhandy]
  1433                              <1> 	mov dx, [locunhandx]
  1434                              <1> 	mov ax, 1
  1435                              <1> 	xor bx, bx
  1436                              <1> 	call showstring2
  1437                              <1> 	mov [locunhandy], cx
  1438                              <1> 	mov [locunhandx], dx
  1439                              <1> 	jmp errortextdone
  1440                              <1> %endif
  1441                              <1> errortext:
  1442 00000E47 E8B00C0000          <1> 	call print		;;get the error message and print it
  1443                              <1> errortextdone:
  1444 00000E4C 31C9                <1> 	xor ecx, ecx
  1445 00000E4E 8A0D[C50F0000]      <1> 	mov cl, [intprob]
  1446 00000E54 E825010000          <1> 	call expdump
  1447                              <1> dumpstack:
  1448 00000E59 8B35[AF0F0000]      <1> 	mov esi, [esploc]
  1449 00000E5F 39E6                <1> 	cmp esi, esp
  1450 00000E61 7216                <1> 	jb donedump
  1451 00000E63 368B0E              <1> 	mov ecx, [ss:esi]
  1452 00000E66 81EE04000000        <1> 	sub esi, 4
  1453 00000E6C 8935[AF0F0000]      <1> 	mov [esploc], esi
  1454 00000E72 E807010000          <1> 	call expdump
  1455 00000E77 EBE0                <1> 	jmp dumpstack
  1456                              <1> donedump:
  1457 00000E79 0F20C1              <1> 	mov ecx, cr0
  1458 00000E7C E8FD000000          <1> 	call expdump
  1459 00000E81 0F20D1              <1> 	mov ecx, cr2
  1460 00000E84 E8F5000000          <1> 	call expdump
  1461 00000E89 0F20D9              <1> 	mov ecx, cr3
  1462 00000E8C E8ED000000          <1> 	call expdump
  1463 00000E91 0F20E1              <1> 	mov ecx, cr4
  1464 00000E94 E8E5000000          <1> 	call expdump
  1465 00000E99 8B35[AF0F0000]      <1> 	mov esi, [esploc]
  1466 00000E9F 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1467 00000EA4 81C710000000        <1> 	add edi, 16
  1468 00000EAA 893D[CA0F0000]      <1> 	mov [codelocend], edi
  1469 00000EB0 81EF20000000        <1> 	sub edi, 32
  1470                              <1> dumpcodeloop:
  1471 00000EB6 893D[C60F0000]      <1> 	mov [codeloc], edi
  1472 00000EBC 8B0F                <1> 	mov ecx, [edi]
  1473 00000EBE E8BB000000          <1> 	call expdump
  1474 00000EC3 8B3D[C60F0000]      <1> 	mov edi, [codeloc]
  1475 00000EC9 81C704000000        <1> 	add edi, 4
  1476 00000ECF 3B3D[CA0F0000]      <1> 	cmp edi, [codelocend]
  1477 00000ED5 72DF                <1> 	jb dumpcodeloop
  1478 00000ED7 BE[0F0F0000]        <1> 	mov esi, backtoosmsg
  1479                              <1> %ifdef gui.included
  1480                              <1> 	cmp byte [guion], 0
  1481                              <1> 	je backtomsg
  1482                              <1> guibacktomsg:
  1483                              <1> 	mov dx, [locunhandx]
  1484                              <1> 	mov cx, [locunhandy]
  1485                              <1> 	mov ax, 1
  1486                              <1> 	xor bx, bx
  1487                              <1> 	call showstring2
  1488                              <1> 	jmp backtomsgdone
  1489                              <1> backtomsg:
  1490                              <1> %endif
  1491 00000EDC E81B0C0000          <1> 	call print
  1492                              <1> backtomsgdone:
  1493 00000EE1 30C0                <1> 	xor al, al
  1494 00000EE3 E878100000          <1> 	call rdcharint
  1495 00000EE8 803D[C50F0000]03    <1> 	cmp byte [intprob], 3
  1496 00000EEF 7511                <1> 	jne nodebugint
  1497                              <1> %ifdef gui.included
  1498                              <1> 	cmp byte [guion], 0
  1499                              <1> 	je nodebuggui
  1500                              <1> 	mov bx, [backgroundcache]
  1501                              <1> 	mov [background], bx
  1502                              <1> 	xor bx, bx
  1503                              <1> 	mov byte [mousedisabled], 0
  1504                              <1> 	call guiclear
  1505                              <1> 	call reloadallgraphics
  1506                              <1> nodebuggui:
  1507                              <1> %endif
  1508 00000EF1 8B35[B30F0000]      <1> 	mov esi, [espfirst]
  1509 00000EF7 89F4                <1> 	mov esp, esi
  1510 00000EF9 61                  <1> 	popad
  1511 00000EFA 17                  <1> 	pop ss
  1512 00000EFB 0FA9                <1> 	pop gs
  1513 00000EFD 0FA1                <1> 	pop fs
  1514 00000EFF 07                  <1> 	pop es
  1515 00000F00 1F                  <1> 	pop ds
  1516 00000F01 CF                  <1> 	iret
  1517                              <1> nodebugint:
  1518 00000F02 61                  <1> 	popad
  1519 00000F03 17                  <1> 	pop ss
  1520 00000F04 0FA9                <1> 	pop gs
  1521 00000F06 0FA1                <1> 	pop fs
  1522 00000F08 07                  <1> 	pop es
  1523 00000F09 1F                  <1> 	pop ds
  1524                              <1> %ifdef gui.included
  1525                              <1> 	cmp byte [guion], 0
  1526                              <1> 	je returnunhandgui
  1527                              <1> 	mov bx, [backgroundcache]
  1528                              <1> 	mov [background], bx
  1529                              <1> 	xor bx, bx
  1530                              <1> 	mov byte [mousedisabled], 0
  1531                              <1> 	call guiclear
  1532                              <1> 	call reloadallgraphics
  1533                              <1> 	jmp guiboot
  1534                              <1> %endif
  1535                              <1> returnunhandgui:
  1536 00000F0A E9D7170000          <1> 	jmp nwcmd
  1537 00000F0F 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1538 00000F18 737420616E79207072- <1>
  1539 00000F21 6F626C656D7320696E- <1>
  1540 00000F2A 207468652049737375- <1>
  1541 00000F33 65732073656374696F- <1>
  1542 00000F3C 6E20617420736F6C6C- <1>
  1543 00000F45 65726F732E676F6F67- <1>
  1544 00000F4E 6C65636F64652E636F- <1>
  1545 00000F57 6D0A                <1>
  1546 00000F59 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1547 00000F62 206B657920746F2072- <1>
  1548 00000F6B 657475726E20746F20- <1>
  1549 00000F74 536F6C6C65724F530A- <1>
  1550 00000F7D 00                  <1>
  1551                              <1> expdump:
  1552 00000F7E 8B35[B70F0000]      <1> 	mov esi, [esiloc]
  1553 00000F84 89F7                <1> 	mov edi, esi
  1554 00000F86 81C70F000000        <1> 	add edi, 15
  1555 00000F8C 81C604000000        <1> 	add esi, 4
  1556 00000F92 893D[B70F0000]      <1> 	mov [esiloc], edi
  1557 00000F98 81EF03000000        <1> 	sub edi, 3
  1558 00000F9E E8A41B0000          <1> 	call converthex
  1559 00000FA3 81EE04000000        <1> 	sub esi, 4
  1560                              <1> %ifdef gui.included
  1561                              <1> 	cmp byte [guion], 0
  1562                              <1> 	je near expdumptext
  1563                              <1> 	mov cx, [locunhandy]
  1564                              <1> 	mov dx, [locunhandx]
  1565                              <1> 	mov ax, 1
  1566                              <1> 	xor bx, bx
  1567                              <1> 	call showstring2
  1568                              <1> 	mov [locunhandy], cx
  1569                              <1> 	mov [locunhandx], dx
  1570                              <1> 	ret
  1571                              <1> %endif
  1572                              <1> expdumptext:
  1573 00000FA9 E84E0B0000          <1> 	call print
  1574 00000FAE C3                  <1> 	ret
  1575 00000FAF 00000000            <1> esploc dd 0
  1576 00000FB3 00000000            <1> espfirst dd 0
  1577 00000FB7 00000000            <1> esiloc dd 0
  1578 00000FBB 00000000            <1> esiregbuf dd 0
  1579 00000FBF 0100                <1> locunhandy dw 1
  1580 00000FC1 0100                <1> locunhandx dw 1
  1581 00000FC3 0000                <1> backgroundcache dw 0
  1582 00000FC5 00                  <1> intprob db 0
  1583 00000FC6 00000000            <1> codeloc dd 0
  1584 00000FCA 00000000            <1> codelocend dd 0
  1585                              <1> 	unhandmsg:	
  1586 00000FCE 494E543D3030303030- <1> 			db "INT=00000000 ",10,0
  1587 00000FD7 303030200A00        <1>
  1588                              <1> unhndrg:
  1589 00000FDD FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1590 00000FE6 303030202000<rept>  <1>
  1591 00001046 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1592 0000104F 303030200A00        <1>
  1593 00001055 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1594 0000105E 303030202000<rept>  <1>
  1595 000010BE FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1596 000010C7 303030200A00        <1>
  1597 000010CD FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1598 000010D6 303030202000<rept>  <1>
  1599 00001136 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1600 0000113F 303030200A00        <1>
  1601 00001145 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1602 0000114E 303030202000<rept>  <1>
  1603 000011AE FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1604 000011B7 303030200A00        <1>
  1605                              <1> unhandregs:
  1606 000011BD 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1607 000011C6 303030202000        <1>
  1608 000011CC 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1609 000011D5 303030202000        <1>
  1610 000011DB 4549503D3030303030- <1> 			db "EIP=00000000 ",10,0
  1611 000011E4 303030200A00        <1>
  1612 000011EA 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1613 000011F3 303030202000        <1>
  1614 000011F9 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1615 00001202 303030202000        <1>
  1616 00001208 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1617 00001211 303030202000        <1>
  1618 00001217 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1619 00001220 303030202000        <1>
  1620 00001226 53533A3D3030303030- <1> 			db "SS:=00000000 ",10,0
  1621 0000122F 303030200A00        <1>
  1622 00001235 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1623 0000123E 303030202000        <1>
  1624 00001244 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1625 0000124D 303030202000        <1>
  1626 00001253 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1627 0000125C 303030202000        <1>
  1628 00001262 4542583D3030303030- <1> 			db "EBX=00000000 ",10,0
  1629 0000126B 303030200A00        <1>
  1630 00001271 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1631 0000127A 303030202000        <1>
  1632 00001280 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1633 00001289 303030202000        <1>
  1634 0000128F 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1635 00001298 303030202000        <1>
  1636 0000129E 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000 ",10,0
  1637 000012A7 303030200A00        <1>
  1638 000012AD 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1639 000012B6 303030202000        <1>
  1640 000012BC 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1641 000012C5 303030202000        <1>
  1642 000012CB 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1643 000012D4 303030202000        <1>
  1644 000012DA 4352343D3030303030- <1> 			db "CR4=00000000 ",10,0
  1645 000012E3 303030200A00        <1>
  1646 000012E9 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1647 000012F2 303030202000<rept>  <1>
  1648 00001307 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1649 00001310 30303020FF00        <1>
  1650 00001316 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1651 0000131F 3030305D2000        <1>
  1652 00001325 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1653 0000132E 303030202000<rept>  <1>
  1654 00001352 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1655 0000135B 303030FF0A00        <1>
  1656                              <1> unhandmsgend:
  1657                              <1> 
  1658                              <1> errortypes:
  1659 00001361 [A5130000]          <1> 			dd err0
  1660 00001365 [09140000]          <1> 			dd err1
  1661 00001369 [6A140000]          <1> 			dd err2
  1662 0000136D [BF140000]          <1> 			dd err3
  1663 00001371 [23150000]          <1> 			dd err4
  1664 00001375 [75150000]          <1> 			dd err5
  1665 00001379 [DF150000]          <1> 			dd err6
  1666 0000137D [47160000]          <1> 			dd err7
  1667 00001381 [91160000]          <1> 			dd err8
  1668 00001385 [EE160000]          <1> 			dd err9
  1669 00001389 [47170000]          <1> 			dd err10
  1670 0000138D [92170000]          <1> 			dd err11
  1671 00001391 [E2170000]          <1> 			dd err12
  1672 00001395 [3B180000]          <1> 			dd err13
  1673 00001399 [9E180000]          <1> 			dd err14
  1674 0000139D [DA180000]          <1> 			dd err15
  1675                              <1> errortypesend:
  1676 000013A1 [65190000]          <1> 			dd unknownerror
  1677                              <1> 			
  1678 000013A5 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1679 000013AE 6279207A65726F3A0A  <1>
  1680 000013B7 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  1681 000013C0 6C79206C696D2061F6- <1>
  1682 000013C9 78203D20EC20776865- <1>
  1683 000013D2 6E206120697320616E- <1>
  1684 000013DB 79207265616C206E75- <1>
  1685 000013E4 6D6265722E20486170- <1>
  1686 000013ED 707920456173746572- <1>
  1687 000013F6 210A                <1>
  1688 000013F8 202020202020202020- <1> 		db "            x",26,"0",10,0
  1689 00001401 202020781A300A00    <1>
  1690                              <1> 		
  1691 00001409 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1692 00001412 65702F427265616B70- <1>
  1693 0000141B 6F696E743A0A        <1>
  1694 00001421 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1695 0000142A 696E74206661756C74- <1>
  1696 00001433 2C20627265616B706F- <1>
  1697 0000143C 696E7420747261702C- <1>
  1698 00001445 206F722073696E676C- <1>
  1699 0000144E 652D73746570207472- <1>
  1700 00001457 617020776173207472- <1>
  1701 00001460 696767657265642E0A- <1>
  1702 00001469 00                  <1>
  1703                              <1> 		
  1704 0000146A 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1705 00001473 6C6520696E74657272- <1>
  1706 0000147C 7570743A0A          <1>
  1707 00001481 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1708 0000148A 6520696E7465727275- <1>
  1709 00001493 707420776173207472- <1>
  1710 0000149C 696767657265642074- <1>
  1711 000014A5 68617420636F756C64- <1>
  1712 000014AE 206E6F74206265206D- <1>
  1713 000014B7 61736B65642E0A00    <1>
  1714                              <1> 		
  1715 000014BF 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1716 000014C8 743A0A              <1>
  1717 000014CB 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1718 000014D4 727275707420697320- <1>
  1719 000014DD 7573656420696E2070- <1>
  1720 000014E6 726F6772616D732074- <1>
  1721 000014EF 6F2073686F77207468- <1>
  1722 000014F8 6520737461636B2061- <1>
  1723 00001501 6E6420726567697374- <1>
  1724 0000150A 65727320616E642063- <1>
  1725 00001513 616E2062650A        <1>
  1726 00001519 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1727 00001522 00                  <1>
  1728                              <1> 		
  1729 00001523 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1730 0000152C 0A                  <1>
  1731 0000152D 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1732 00001536 73736F722072616E20- <1>
  1733 0000153F 696E746F20616E2049- <1>
  1734 00001548 4E544F20696E737472- <1>
  1735 00001551 756374696F6E207769- <1>
  1736 0000155A 746820746865206F76- <1>
  1737 00001563 6572666C6F7720666C- <1>
  1738 0000156C 6167207365742E0A00  <1>
  1739                              <1> 		
  1740 00001575 426F756E6473206368- <1> err5	db "Bounds check:",10
  1741 0000157E 65636B3A0A          <1>
  1742 00001583 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1743 0000158C 73736F72207265626F- <1>
  1744 00001595 756E6465642066726F- <1>
  1745 0000159E 6D206120424F554E44- <1>
  1746 000015A7 20696E737472756374- <1>
  1747 000015B0 696F6E2072756E206F- <1>
  1748 000015B9 6E20616E206F706572- <1>
  1749 000015C2 616E64207468617420- <1>
  1750 000015CB 776173206F75740A    <1>
  1751 000015D3 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1752 000015DC 2E0A00              <1>
  1753                              <1> 		
  1754 000015DF 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1755 000015E8 70636F64653A0A      <1>
  1756 000015EF 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1757 000015F8 73736F722068617320- <1>
  1758 00001601 6E6F20696465612077- <1>
  1759 0000160A 686174206974207761- <1>
  1760 00001613 7320747279696E6720- <1>
  1761 0000161C 746F20657865637574- <1>
  1762 00001625 652E20446F6E277420- <1>
  1763 0000162E 72756E205353453420- <1>
  1764 00001637 636F64650A          <1>
  1765 0000163C 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1766 00001645 0A00                <1>
  1767                              <1> 		
  1768 00001647 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1769 00001650 6F72206E6F74206176- <1>
  1770 00001659 61696C61626C653A0A  <1>
  1771 00001662 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1772 0000166B 206B6E6F7720746865- <1>
  1773 00001674 7920646F6E2774206D- <1>
  1774 0000167D 616B652074686F7365- <1>
  1775 00001686 20616E796D6F726521- <1>
  1776 0000168F 0A00                <1>
  1777                              <1> 		
  1778 00001691 446F75626C65206661- <1> err8	db "Double fault:",10
  1779 0000169A 756C743A0A          <1>
  1780 0000169F 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1781 000016A8 74696F6E2068616E64- <1>
  1782 000016B1 6C657220636F756C64- <1>
  1783 000016BA 206E6F742068616E64- <1>
  1784 000016C3 6C6520746861742069- <1>
  1785 000016CC 7420636F756C64206E- <1>
  1786 000016D5 6F742068616E646C65- <1>
  1787 000016DE 20616E206578636570- <1>
  1788 000016E7 74696F6E2E0A00      <1>
  1789                              <1> 		
  1790 000016EE 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1791 000016F7 6F72207365676D656E- <1>
  1792 00001700 74206F76657272756E- <1>
  1793 00001709 3A0A00              <1>
  1794 0000170C 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1795 00001715 722068617070656E73- <1>
  1796 0000171E 20696E206D6F646572- <1>
  1797 00001727 6E20636F6D70757465- <1>
  1798 00001730 72732C20616E64206E- <1>
  1799 00001739 657665722073686F75- <1>
  1800 00001742 6C642E0A00          <1>
  1801                              <1> 
  1802 00001747 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1803 00001750 53533A0A            <1>
  1804 00001754 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1805 0000175D 686174207761732073- <1>
  1806 00001766 776974636865642074- <1>
  1807 0000176F 6F20697320696E7661- <1>
  1808 00001778 6C69642E204E6F7468- <1>
  1809 00001781 696E672066756E6E79- <1>
  1810 0000178A 20686572652E0A00    <1>
  1811                              <1> 		
  1812 00001792 5365676D656E74206E- <1> err11	db "Segment not present:",10
  1813 0000179B 6F742070726573656E- <1>
  1814 000017A4 743A0A              <1>
  1815 000017A7 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  1816 000017B0 6E7420626974206F66- <1>
  1817 000017B9 20746865207365676D- <1>
  1818 000017C2 656E74206465736372- <1>
  1819 000017CB 6970746F7220697320- <1>
  1820 000017D4 73657420746F207A65- <1>
  1821 000017DD 726F2E0A00          <1>
  1822                              <1> 		
  1823 000017E2 537461636B20657863- <1> err12	db "Stack exception:",10
  1824 000017EB 657074696F6E3A0A    <1>
  1825 000017F3 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  1826 000017FC 7363726970746F7220- <1>
  1827 00001805 697320696E76616C69- <1>
  1828 0000180E 64206F72206E6F7420- <1>
  1829 00001817 70726573656E74206F- <1>
  1830 00001820 7220697473206C696D- <1>
  1831 00001829 697420697320746F6F- <1>
  1832 00001832 20736D616C6C2E0A00  <1>
  1833                              <1> 		
  1834 0000183B 47656E6572616C2070- <1> err13	db "General protection violation:",10
  1835 00001844 726F74656374696F6E- <1>
  1836 0000184D 2076696F6C6174696F- <1>
  1837 00001856 6E3A0A              <1>
  1838 00001859 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  1839 00001862 746564207468652063- <1>
  1840 0000186B 6F6D70757465722E20- <1>
  1841 00001874 537465702061776179- <1>
  1842 0000187D 20736C6F776C792E20- <1>
  1843 00001886 546865204642492069- <1>
  1844 0000188F 73206F6E2069747320- <1>
  1845 00001898 7761792E0A00        <1>
  1846                              <1> 		
  1847 0000189E 50616765206661756C- <1> err14	db "Page fault:",10
  1848 000018A7 743A0A              <1>
  1849 000018AA 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  1850 000018B3 746861742077617320- <1>
  1851 000018BC 726571756573746564- <1>
  1852 000018C5 20776173206E6F7420- <1>
  1853 000018CE 617661696C61626C65- <1>
  1854 000018D7 2E0A00              <1>
  1855                              <1> 		
  1856 000018DA 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  1857 000018E3 666F7220506C616E20- <1>
  1858 000018EC 523A0A              <1>
  1859 000018EF 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  1860 000018F8 727275707420697320- <1>
  1861 00001901 726573657276656420- <1>
  1862 0000190A 666F72207573616765- <1>
  1863 00001913 206F6E6C7920627920- <1>
  1864 0000191C 746865206D696C6974- <1>
  1865 00001925 617279207768656E20- <1>
  1866 0000192E 6974206973206E6563- <1>
  1867 00001937 6573736172790A      <1>
  1868 0000193E 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  1869 00001947 746520612066756C6C- <1>
  1870 00001950 2D7363616C6520636F- <1>
  1871 00001959 757020642782746174- <1>
  1872 00001962 2E0A00              <1>
  1873                              <1> 		
  1874 00001965 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  1875 0000196E 68656C6C206A757374- <1>
  1876 00001977 2068617070656E6564- <1>
  1877 00001980 3F2049732065766572- <1>
  1878 00001989 796F6E65206F6B6179- <1>
  1879 00001992 3F2048617264206472- <1>
  1880 0000199B 6976653F2056696465- <1>
  1881 000019A4 6F20636172643F0A    <1>
  1882 000019AC 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  1883 000019B5 726520796F75207468- <1>
  1884 000019BE 6572653F0A00        <1>
  1885                              <1> %else
  1886                              <1> unhand:	
  1887                              <1> 	%assign i 0
  1888                              <1> 	%rep 32
  1889                              <1> 	mov byte [intprob], i
  1890                              <1> 	jmp unhand2
  1891                              <1> 	%assign i i+1
  1892                              <1> 	%endrep
  1893                              <1> unhand2:
  1894                              <1> 	cmp byte [intprob], 3
  1895                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  1896                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  1897                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  1898                              <1> 	mov bl, [intprob]
  1899                              <1> 	jmp exitprog
  1900                              <1> intprob db 0
  1901                              <1> %endif
  1902                                      %include "source/ints.asm"
  1903                              <1> newints:	;;for great justice
  1904 000019C4 80FC00              <1> 	cmp ah, 0
  1905 000019C7 0F847F000000        <1> 	je near intx0   ;kills app
  1906 000019CD 80FC01              <1> 	cmp ah, 1
  1907 000019D0 0F84FE000000        <1> 	je near intx1   ;print string
  1908 000019D6 80FC02              <1> 	cmp ah, 2
  1909 000019D9 0F8450010000        <1> 	je near intx2	;read string
  1910 000019DF 80FC03              <1> 	cmp ah, 3
  1911 000019E2 0F8470010000        <1> 	je near intx3	;clear screen
  1912 000019E8 80FC04              <1> 	cmp ah, 4
  1913 000019EB 0F84E7010000        <1> 	je near intx4	;read and print string
  1914 000019F1 80FC05              <1> 	cmp ah, 5
  1915 000019F4 0F845A050000        <1> 	je near intx5	;get char
  1916 000019FA 80FC06              <1> 	cmp ah, 6
  1917 000019FD 0F84AC050000        <1> 	je near intx6	;print char
  1918 00001A03 80FC07              <1> 	cmp ah, 7
  1919 00001A06 0F848E070000        <1> 	je near intx7	;read file
  1920                              <1> ;	cmp ah, 8
  1921                              <1> ;	je near intx8	;write file
  1922 00001A0C 80FC09              <1> 	cmp ah, 9
  1923 00001A0F 0F848F070000        <1> 	je near intx9	;convert number to string
  1924 00001A15 80FC0A              <1> 	cmp ah, 10
  1925 00001A18 0F849E070000        <1> 	je near intx10	;convert string to number
  1926                              <1> %ifdef threads.included
  1927 00001A1E 80FC0B              <1> 	cmp ah, 11
  1928 00001A21 0F849F070000        <1> 	je near intx11	;create thread
  1929                              <1> %endif
  1930 00001A27 80FC0C              <1> 	cmp ah, 12
  1931 00001A2A 0F846D080000        <1> 	je near intx12	;get time
  1932 00001A30 80FC0D              <1> 	cmp ah, 13
  1933 00001A33 0F8479080000        <1> 	je near intx13	;set time
  1934 00001A39 80FC0E              <1> 	cmp ah, 14
  1935 00001A3C 0F8480080000        <1> 	je near intx14	;run program
  1936 00001A42 80FC0F              <1> 	cmp ah, 15
  1937 00001A45 0F848C080000        <1> 	je near intx15	;get program info-location of name/options/number of options/environmental vars
  1938 00001A4B C3                  <1> 	ret
  1939                              <1> 	
  1940                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  1941                              <1> intx0:
  1942                              <1> 	%include 'source/interrupts/0_exit.asm'
  1943                              <2> exitprog:
  1944 00001A4C 66B83000            <2> 	mov ax, NEW_DATA_SEL
  1945 00001A50 8ED8                <2> 	mov ds, ax
  1946 00001A52 8EC0                <2> 	mov es, ax
  1947 00001A54 8EE0                <2> 	mov fs, ax
  1948 00001A56 66B82000            <2> 	mov ax, SYS_DATA_SEL
  1949 00001A5A 8EE8                <2> 	mov gs, ax
  1950 00001A5C C705[674B0000]0000- <2> 	mov dword [currentthread], 0
  1951 00001A64 0000                <2>
  1952 00001A66 C705[624B0000]0400- <2> 	mov dword [lastthread], 4
  1953 00001A6E 0000                <2>
  1954 00001A70 C605[664B0000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  1955 00001A77 8B25[A6730000]      <2> 	mov esp, [previousstack] ;and this
  1956 00001A7D 81FB00000000        <2> 	cmp ebx, 0
  1957 00001A83 0F8501000000        <2> 	jne near .error
  1958 00001A89 C3                  <2> 	ret
  1959                              <2> .error:
  1960 00001A8A 89D9                <2> 	mov ecx, ebx
  1961 00001A8C B006                <2> 	mov al, 6
  1962 00001A8E A2[A52B0000]        <2> 	mov [firsthexshown], al
  1963 00001A93 51                  <2> 	push ecx
  1964 00001A94 BE[AF1A0000]        <2> 	mov esi, .msg1
  1965 00001A99 E840000000          <2> 	call printhighlight
  1966 00001A9E 59                  <2> 	pop ecx
  1967 00001A9F E816110000          <2> 	call showhex
  1968 00001AA4 BE[C41A0000]        <2> 	mov esi, .msg2
  1969 00001AA9 E830000000          <2> 	call printhighlight
  1970 00001AAE C3                  <2> 	ret
  1971                              <2> 	
  1972 00001AAF 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  1973 00001AB8 7461747573206F6620- <2>
  1974 00001AC1 307800              <2>
  1975 00001AC4 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  1976 00001ACD 726E65642E0A00      <2>
  1977                              <1> intx1:
  1978                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  1979 00001AD4 E82A000000          <2> call printint
  1980 00001AD9 E99AE7FFFF          <2> jmp timerinterrupt
  1981                              <2> 
  1982                              <2> 	printhighlight:
  1983 00001ADE 6631C0              <2> 		xor ax, ax
  1984 00001AE1 66BBF000            <2> 		mov bx, 0xF0
  1985 00001AE5 E919000000          <2> 		jmp printint
  1986                              <2> 	printquiet:
  1987 00001AEA 6631C0              <2> 		xor ax, ax
  1988 00001AED A2[2E1B0000]        <2> 		mov [endkeyprint], al
  1989 00001AF2 66BB0700            <2> 		mov bx, 7
  1990 00001AF6 E820000000          <2> 		call printint.b
  1991 00001AFB C3                  <2> 		ret
  1992                              <2>     print:
  1993 00001AFC 6631C0              <2> 		xor ax, ax
  1994 00001AFF 66BB0700            <2> 		mov bx, 7
  1995                              <2> 	printint:	;;print line, al=last key,bl=modifier, esi=buffer
  1996 00001B03 56                  <2> 		push esi
  1997 00001B04 A2[2E1B0000]        <2> 		mov [endkeyprint], al
  1998 00001B09 E80D000000          <2> 		call .b
  1999 00001B0E 89F1                <2> 		mov ecx, esi
  2000 00001B10 5F                  <2> 		pop edi
  2001 00001B11 29F9                <2> 		sub ecx, edi
  2002 00001B13 51                  <2> 		push ecx
  2003 00001B14 E8F4070000          <2> 		call termcopy
  2004 00001B19 59                  <2> 		pop ecx
  2005 00001B1A C3                  <2> 		ret
  2006                              <2> 	.b:
  2007 00001B1B 8A06                <2> 		mov al, [esi]
  2008 00001B1D 3A05[2E1B0000]      <2> 		cmp al, [endkeyprint]
  2009 00001B23 7408                <2> 		je .done
  2010 00001B25 E8AA040000          <2> 		call prcharq
  2011 00001B2A 46                  <2> 		inc esi
  2012 00001B2B EBEE                <2> 		jmp .b
  2013                              <2> 	.done:
  2014 00001B2D C3                  <2> 		ret
  2015                              <2> 
  2016 00001B2E 00                  <2> endkeyprint db 0
  2017                              <1> intx2:
  2018                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2019 00001B2F E805000000          <2> call readint
  2020 00001B34 E93FE7FFFF          <2> jmp timerinterrupt
  2021                              <2> 
  2022                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2023 00001B39 89C3                <2> 		mov ebx, eax
  2024                              <2> 	.b:
  2025 00001B3B 53                  <2> 		push ebx
  2026 00001B3C 57                  <2> 		push edi
  2027 00001B3D 56                  <2> 		push esi
  2028 00001B3E 30C0                <2> 		xor al, al
  2029 00001B40 E81B040000          <2> 		call rdcharint
  2030 00001B45 5E                  <2> 		pop esi
  2031 00001B46 8806                <2> 		mov [esi], al
  2032 00001B48 46                  <2> 		inc esi
  2033 00001B49 5F                  <2> 		pop edi
  2034 00001B4A 5B                  <2> 		pop ebx
  2035 00001B4B 39FE                <2> 		cmp esi, edi
  2036 00001B4D 7304                <2> 		jae .done
  2037 00001B4F 38D8                <2> 		cmp al, bl
  2038 00001B51 75E8                <2> 		jne .b
  2039                              <2> 	.done:
  2040 00001B53 4E                  <2> 		dec esi
  2041 00001B54 C60600              <2> 		mov byte [esi], 0
  2042 00001B57 C3                  <2> 		ret
  2043                              <1> intx3:
  2044                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2045 00001B58 E805000000          <2> call clear
  2046 00001B5D E916E7FFFF          <2> jmp timerinterrupt
  2047                              <2> %ifdef io.serial
  2048                              <2> clear:
  2049                              <2> 	ret
  2050                              <2> %else
  2051                              <2> clear:		
  2052 00001B62 668B0D[96210000]    <2> 		mov cx, [charxy]
  2053 00001B69 BF[3B8E0000]        <2> 		mov edi, videobuf
  2054 00001B6E 6631C0              <2> 		xor ax, ax
  2055 00001B71 66A3[90210000]      <2> 		mov [linebeginpos], ax
  2056 00001B77 66A3[92210000]      <2> 		mov [videobufpos], ax
  2057 00001B7D 6631D2              <2> 		xor dx, dx
  2058 00001B80 66A3[94210000]      <2> 		mov [charpos], ax
  2059 00001B86 B407                <2> 		mov ah, 7
  2060                              <2> 	clearb:
  2061 00001B88 8807                <2> 		mov [edi], al
  2062 00001B8A 886701              <2> 		mov [edi + 1], ah
  2063 00001B8D 81C702000000        <2> 		add edi, 2
  2064 00001B93 FEC9                <2> 		dec cl
  2065 00001B95 80F900              <2> 		cmp cl, 0
  2066 00001B98 75EE                <2> 		jne clearb
  2067 00001B9A 8A0D[96210000]      <2> 		mov cl, [charxy]
  2068 00001BA0 FECD                <2> 		dec ch
  2069 00001BA2 80FD00              <2> 		cmp ch, 0
  2070 00001BA5 75E1                <2> 		jne clearb
  2071                              <2> 	cleardouble:
  2072 00001BA7 BF[FBA00000]        <2> 		mov edi, videobuf2
  2073 00001BAC 668B0D[96210000]    <2> 		mov cx, [charxy]
  2074 00001BB3 31C0                <2> 		xor eax, eax
  2075                              <2> 	clearc:
  2076 00001BB5 668907              <2> 		mov [edi], ax
  2077 00001BB8 81C702000000        <2> 		add edi, 2
  2078 00001BBE FEC9                <2> 		dec cl
  2079 00001BC0 80F900              <2> 		cmp cl, 0
  2080 00001BC3 75F0                <2> 		jne clearc
  2081 00001BC5 8A0D[96210000]      <2> 		mov cl, [charxy]
  2082 00001BCB FECD                <2> 		dec ch
  2083 00001BCD 80FD00              <2> 		cmp ch, 0
  2084 00001BD0 75E3                <2> 		jne clearc
  2085 00001BD2 E836070000          <2> 		call termcopy
  2086 00001BD7 C3                  <2> 		ret
  2087                              <2> %endif
  2088                              <2> 		
  2089                              <1> intx4:
  2090                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2091 00001BD8 E809000000          <2> call rdprint
  2092 00001BDD E996E6FFFF          <2> jmp timerinterrupt
  2093                              <2> 
  2094                              <2> readline:
  2095 00001BE2 B00A                <2>   mov al, 10
  2096 00001BE4 B307                <2>   mov bl, 7
  2097                              <2> 	rdprint:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  2098 00001BE6 8935[491F0000]      <2> 		mov [buftxtloc], esi
  2099 00001BEC A2[411F0000]        <2> 		mov [endkeyrdpr], al
  2100 00001BF1 881D[421F0000]      <2> 		mov [modkeyrdpr], bl
  2101 00001BF7 8935[431F0000]      <2> 		mov [firstesirdpr], esi
  2102 00001BFD 893D[4D1F0000]      <2> 		mov [endbufferrdpr], edi
  2103                              <2> 	rdprintb:
  2104 00001C03 56                  <2> 		push esi
  2105 00001C04 B001                <2> 		mov al, 1
  2106 00001C06 E855030000          <2> 		call rdcharint
  2107 00001C0B 5E                  <2> 		pop esi
  2108                              <2> %ifdef io.serial
  2109                              <2> 		cmp ah, 0x41
  2110                              <2> 		je near rdprup
  2111                              <2> 		cmp ah, 0x42
  2112                              <2> 		je near rdprdown
  2113                              <2> 		cmp ah, 0x43
  2114                              <2> 		je near rdprright
  2115                              <2> 		cmp ah, 0x44
  2116                              <2> 		je near rdprleft
  2117                              <2> 		cmp ah, 0x31
  2118                              <2> 		je near rdprhome
  2119                              <2> 		cmp ah, 0x33
  2120                              <2> 		je near rdprdel
  2121                              <2> 		cmp ah, 0x34
  2122                              <2> 		je near rdprend
  2123                              <2> %else
  2124 00001C0C 803D[95430000]E0    <2> 		cmp byte [specialkey], 0xE0
  2125 00001C13 751B                <2> 		jne notspecialrdprnt
  2126 00001C15 80FC53              <2> 		cmp ah, 0x53
  2127 00001C18 0F84E8020000        <2> 		je near rdprdel
  2128 00001C1E 80FC47              <2> 		cmp ah, 0x47
  2129 00001C21 0F8407010000        <2> 		je near rdprhome
  2130 00001C27 80FC4F              <2> 		cmp ah, 0x4F
  2131 00001C2A 0F841D010000        <2> 		je near rdprend
  2132                              <2> 	notspecialrdprnt:
  2133 00001C30 80FC48              <2> 		cmp ah, 0x48
  2134 00001C33 0F84D5010000        <2> 		je near rdprup
  2135 00001C39 80FC50              <2> 		cmp ah, 0x50
  2136 00001C3C 0F84AF010000        <2> 		je near rdprdown
  2137 00001C42 80FC4D              <2> 		cmp ah, 0x4D
  2138 00001C45 0F845E010000        <2> 		je near rdprright
  2139 00001C4B 80FC4B              <2> 		cmp ah, 0x4B
  2140 00001C4E 0F8416010000        <2> 		je near rdprleft
  2141                              <2> %endif
  2142 00001C54 3C08                <2> 		cmp al, 8
  2143 00001C56 0F84C5020000        <2> 		je near rdprbscheck
  2144 00001C5C 3C00                <2> 		cmp al, 0
  2145 00001C5E 74A3                <2> 		je rdprintb
  2146 00001C60 80FC00              <2> 		cmp ah, 0
  2147 00001C63 749E                <2> 		je rdprintb
  2148 00001C65 8806                <2> 		mov [esi], al
  2149 00001C67 46                  <2> 		inc esi
  2150                              <2> 	bscheckequal:
  2151 00001C68 8A1D[421F0000]      <2> 		mov bl, [modkeyrdpr]
  2152 00001C6E 8A3D[481F0000]      <2> 		mov bh, [txtmask]
  2153 00001C74 80FF00              <2> 		cmp bh, 0
  2154 00001C77 7404                <2> 		je nomasktxt
  2155 00001C79 88F8                <2> 		mov al, bh
  2156 00001C7B 30FF                <2> 		xor bh, bh
  2157                              <2> 	nomasktxt:
  2158 00001C7D E841030000          <2> 		call prcharint
  2159 00001C82 56                  <2> 		push esi
  2160 00001C83 66A3[3F1F0000]      <2> 		mov [axcache], ax
  2161 00001C89 8A25[411F0000]      <2> 		mov ah, [endkeyrdpr]
  2162 00001C8F 38E0                <2> 		cmp al, ah
  2163 00001C91 7429                <2> 		je nobackprintbuftxt2
  2164 00001C93 BE[26860000]        <2> 		mov esi, buftxt2
  2165 00001C98 E84DFEFFFF          <2> 		call printquiet
  2166 00001C9D B020                <2> 		mov al, " "
  2167 00001C9F E830030000          <2> 		call prcharq
  2168 00001CA4 B008                <2> 		mov al, 8
  2169 00001CA6 81FE[26860000]      <2> 		cmp esi, buftxt2
  2170 00001CAC 740E                <2> 		je nobackprintbuftxt2
  2171                              <2> 	backprintbuftxt2:
  2172 00001CAE E821030000          <2> 		call prcharq
  2173 00001CB3 4E                  <2> 		dec esi
  2174 00001CB4 81FE[26860000]      <2> 		cmp esi, buftxt2
  2175 00001CBA 77F2                <2> 		ja backprintbuftxt2
  2176                              <2> 	nobackprintbuftxt2:
  2177 00001CBC 3C0A                <2> 		cmp al, 10
  2178 00001CBE 7405                <2> 		je nonobackprint
  2179 00001CC0 E8FE020000          <2> 		call prcharint
  2180                              <2> 	nonobackprint:
  2181 00001CC5 5E                  <2> 		pop esi
  2182 00001CC6 3B35[4D1F0000]      <2> 		cmp esi, [endbufferrdpr]
  2183 00001CCC 0F8319000000        <2> 		jae near donerdprinc
  2184 00001CD2 66A1[3F1F0000]      <2> 		mov ax, [axcache]
  2185 00001CD8 8A25[411F0000]      <2> 		mov ah, [endkeyrdpr]
  2186 00001CDE 38E0                <2> 		cmp al, ah
  2187 00001CE0 0F851DFFFFFF        <2> 		jne rdprintb
  2188 00001CE6 E901000000          <2> 		jmp donerdprint
  2189                              <2> 	donerdprinc:
  2190 00001CEB 46                  <2> 		inc esi
  2191                              <2> 	donerdprint:
  2192 00001CEC 4E                  <2> 		dec esi
  2193 00001CED BF[26860000]        <2> 		mov edi, buftxt2
  2194                              <2> 	copylaterstuff:
  2195 00001CF2 8A07                <2> 		mov al, [edi]
  2196 00001CF4 3C00                <2> 		cmp al, 0
  2197 00001CF6 7406                <2> 		je nocopylaterstuff
  2198 00001CF8 8806                <2> 		mov [esi], al
  2199 00001CFA 47                  <2> 		inc edi
  2200 00001CFB 46                  <2> 		inc esi
  2201 00001CFC EBF4                <2> 		jmp copylaterstuff
  2202                              <2> 	nocopylaterstuff:
  2203 00001CFE C60600              <2> 		mov byte [esi], 0
  2204 00001D01 E80B000000          <2> 		call clearbuftxt2
  2205 00001D06 89F1                <2> 		mov ecx, esi
  2206 00001D08 8B3D[431F0000]      <2> 		mov edi, [firstesirdpr]
  2207 00001D0E 29F9                <2> 		sub ecx, edi
  2208 00001D10 C3                  <2> 		ret
  2209                              <2> 	
  2210                              <2> 	clearbuftxt2:
  2211 00001D11 30C0                <2> 		xor al, al
  2212 00001D13 BF[26860000]        <2> 		mov edi, buftxt2
  2213                              <2> 	clearbuftxt2lp:
  2214 00001D18 8807                <2> 		mov [edi], al
  2215 00001D1A 47                  <2> 		inc edi
  2216 00001D1B 81FF[268A0000]      <2> 		cmp edi, buftxt
  2217 00001D21 75F5                <2> 		jne clearbuftxt2lp
  2218 00001D23 C3                  <2> 		ret
  2219                              <2> 	
  2220                              <2> 	rdprintb2:
  2221 00001D24 E8E4050000          <2> 		call termcopy
  2222 00001D29 E9D5FEFFFF          <2> 		jmp rdprintb
  2223                              <2> 	
  2224                              <2> 	rdprhome:
  2225 00001D2E 3B35[491F0000]      <2> 		cmp esi, [buftxtloc]
  2226 00001D34 0F84EAFFFFFF        <2> 		je near rdprintb2
  2227 00001D3A BF[26860000]        <2> 		mov edi, buftxt2
  2228 00001D3F 8A07                <2> 		mov al, [edi]
  2229 00001D41 E846000000          <2> 		call shiftbuftxt2
  2230 00001D46 E889020000          <2> 		call prcharq
  2231 00001D4B EBE1                <2> 		jmp rdprhome
  2232                              <2> 		
  2233                              <2> 	rdprend:
  2234 00001D4D BF[26860000]        <2> 		mov edi, buftxt2
  2235 00001D52 8A07                <2> 		mov al, [edi]
  2236 00001D54 3C00                <2> 		cmp al, 0
  2237 00001D56 0F84C8FFFFFF        <2> 		je near rdprintb2
  2238 00001D5C 8806                <2> 		mov [esi], al
  2239 00001D5E E866000000          <2> 		call shiftbuftxt2lft
  2240 00001D63 E86C020000          <2> 		call prcharq
  2241 00001D68 EBE3                <2> 		jmp rdprend
  2242                              <2> 	
  2243                              <2> 	rdprleft:
  2244 00001D6A 3B35[491F0000]      <2> 		cmp esi, [buftxtloc]
  2245 00001D70 0F848DFEFFFF        <2> 		je near rdprintb
  2246 00001D76 BF[26860000]        <2> 		mov edi, buftxt2
  2247 00001D7B 8A07                <2> 		mov al, [edi]
  2248 00001D7D E80A000000          <2> 		call shiftbuftxt2
  2249 00001D82 E83C020000          <2> 		call prcharint
  2250 00001D87 E977FEFFFF          <2> 		jmp rdprintb
  2251                              <2> 	shiftbuftxt2:
  2252 00001D8C 3C00                <2> 		cmp al, 0
  2253 00001D8E 7409                <2> 		je noshiftbuftxt2
  2254 00001D90 47                  <2> 		inc edi
  2255 00001D91 8A27                <2> 		mov ah, [edi]
  2256 00001D93 8807                <2> 		mov [edi], al
  2257 00001D95 88E0                <2> 		mov al, ah
  2258 00001D97 EBF3                <2> 		jmp shiftbuftxt2
  2259                              <2> 	noshiftbuftxt2:
  2260 00001D99 BF[26860000]        <2> 		mov edi, buftxt2
  2261 00001D9E 4E                  <2> 		dec esi
  2262 00001D9F 8A06                <2> 		mov al, [esi]
  2263 00001DA1 8807                <2> 		mov [edi], al
  2264 00001DA3 C60600              <2> 		mov byte [esi], 0
  2265 00001DA6 B008                <2> 		mov al, 8
  2266 00001DA8 C3                  <2> 		ret
  2267                              <2> 		
  2268                              <2> 	rdprright:
  2269 00001DA9 BF[26860000]        <2> 		mov edi, buftxt2
  2270 00001DAE 8A07                <2> 		mov al, [edi]
  2271 00001DB0 3C00                <2> 		cmp al, 0
  2272 00001DB2 0F844BFEFFFF        <2> 		je near rdprintb
  2273 00001DB8 8806                <2> 		mov [esi], al
  2274 00001DBA E80A000000          <2> 		call shiftbuftxt2lft
  2275 00001DBF E8FF010000          <2> 		call prcharint
  2276 00001DC4 E93AFEFFFF          <2> 		jmp rdprintb
  2277                              <2> 	shiftbuftxt2lft:
  2278 00001DC9 3C00                <2> 		cmp al, 0
  2279 00001DCB 7408                <2> 		je noshiftbuftxt2lft
  2280 00001DCD 47                  <2> 		inc edi
  2281 00001DCE 8A07                <2> 		mov al, [edi]
  2282 00001DD0 8847FF              <2> 		mov [edi - 1], al
  2283 00001DD3 EBF4                <2> 		jmp shiftbuftxt2lft
  2284                              <2> 	noshiftbuftxt2lft:
  2285 00001DD5 8A06                <2> 		mov al, [esi]
  2286 00001DD7 46                  <2> 		inc esi
  2287 00001DD8 8A1D[421F0000]      <2> 		mov bl, [modkeyrdpr]
  2288 00001DDE C3                  <2> 		ret
  2289                              <2> 		
  2290                              <2> 	rdprdownbck:
  2291 00001DDF FECC                <2> 		dec ah
  2292 00001DE1 8825[471F0000]      <2> 		mov [commandedit], ah
  2293 00001DE7 E83A000000          <2> 		call rdprbckspc
  2294 00001DEC E912FEFFFF          <2> 		jmp rdprintb
  2295                              <2> 	
  2296                              <2> 	rdprdown:
  2297 00001DF1 8A25[471F0000]      <2> 		mov ah, [commandedit]
  2298 00001DF7 80FC01              <2> 		cmp ah, 1
  2299 00001DFA 0F8603FEFFFF        <2> 		jbe near rdprintb
  2300 00001E00 80FC02              <2> 		cmp ah, 2
  2301 00001E03 74DA                <2> 		je rdprdownbck
  2302 00001E05 80EC02              <2> 		sub ah, 2
  2303 00001E08 8825[471F0000]      <2> 		mov [commandedit], ah
  2304                              <2> 		
  2305                              <2> 	rdprup:
  2306 00001E0E 30C0                <2> 		xor al, al
  2307 00001E10 3805[471F0000]      <2> 		cmp [commandedit], al
  2308 00001E16 0F84E7FDFFFF        <2> 		je near rdprintb
  2309 00001E1C E805000000          <2> 		call rdprbckspc
  2310 00001E21 E941000000          <2> 		jmp getcurrentcommandstr
  2311                              <2> 	rdprbckspc:
  2312 00001E26 3B35[491F0000]      <2> 		cmp esi, [buftxtloc]
  2313 00001E2C 742B                <2> 		je nordprupbck
  2314                              <2> 	rdprupbckspclp:
  2315 00001E2E B008                <2> 		mov al, 8
  2316 00001E30 8A1D[421F0000]      <2> 		mov bl, [modkeyrdpr]
  2317 00001E36 E899010000          <2> 		call prcharq
  2318 00001E3B B020                <2> 		mov al, " "
  2319 00001E3D E892010000          <2> 		call prcharq
  2320 00001E42 B008                <2> 		mov al, 8
  2321 00001E44 E88B010000          <2> 		call prcharq
  2322 00001E49 4E                  <2> 		dec esi
  2323 00001E4A 3B35[491F0000]      <2> 		cmp esi, [buftxtloc]
  2324 00001E50 7402                <2> 		je nordprupbck2
  2325 00001E52 EBDA                <2> 		jmp rdprupbckspclp
  2326                              <2> 	nordprupbck2:
  2327 00001E54 E8B4040000          <2> 		call termcopy
  2328                              <2> 	nordprupbck:
  2329 00001E59 8B3D[FFF00000]      <2> 		mov edi, [commandbufpos]
  2330 00001E5F 81C7[03F10000]      <2> 		add edi, commandbuf
  2331 00001E65 4F                  <2> 		dec edi
  2332 00001E66 C3                  <2> 		ret
  2333                              <2> 	getcurrentcommandstr:
  2334 00001E67 8A25[471F0000]      <2> 		mov ah, [commandedit]
  2335 00001E6D FE05[471F0000]      <2> 		inc byte [commandedit]
  2336                              <2> 	getccmdlp:
  2337 00001E73 4F                  <2> 		dec edi
  2338 00001E74 8A07                <2> 		mov al, [edi]
  2339 00001E76 81FF[03F10000]      <2> 		cmp edi, commandbuf
  2340 00001E7C 7231                <2> 		jb getcmdresetcommandbuf
  2341 00001E7E 81EF[03F10000]      <2> 		sub edi, commandbuf
  2342 00001E84 3B3D[FFF00000]      <2> 		cmp edi, [commandbufpos]
  2343 00001E8A 0F8473FDFFFF        <2> 		je near rdprintb
  2344 00001E90 81C7[03F10000]      <2> 		add edi, commandbuf
  2345 00001E96 3C00                <2> 		cmp al, 0
  2346 00001E98 75D9                <2> 		jne getccmdlp
  2347 00001E9A FECC                <2> 		dec ah
  2348 00001E9C 80FC00              <2> 		cmp ah, 0
  2349 00001E9F 77D2                <2> 		ja getccmdlp
  2350 00001EA1 47                  <2> 		inc edi
  2351 00001EA2 81FF[03010100]      <2> 		cmp edi, commandbufend
  2352 00001EA8 770D                <2> 		ja fixcmdbufb4morerdpr
  2353 00001EAA E915000000          <2> 		jmp morerdprup
  2354                              <2> 	getcmdresetcommandbuf:
  2355 00001EAF BF[03010100]        <2> 		mov edi, commandbufend
  2356 00001EB4 47                  <2> 		inc edi
  2357 00001EB5 EBBC                <2> 		jmp getccmdlp
  2358                              <2> 	fixcmdbufb4morerdpr:
  2359 00001EB7 4F                  <2> 		dec edi
  2360 00001EB8 81EF[03010100]      <2> 		sub edi, commandbufend
  2361 00001EBE 81C7[03F10000]      <2> 		add edi, commandbuf
  2362                              <2> 	morerdprup:
  2363 00001EC4 8A07                <2> 		mov al, [edi]
  2364 00001EC6 47                  <2> 		inc edi
  2365 00001EC7 81EF[03F10000]      <2> 		sub edi, commandbuf
  2366 00001ECD 3C00                <2> 		cmp al, 0
  2367 00001ECF 0F844FFEFFFF        <2> 		je near rdprintb2
  2368 00001ED5 3B3D[FFF00000]      <2> 		cmp edi, [commandbufpos]
  2369 00001EDB 0F8343FEFFFF        <2> 		jae near rdprintb2
  2370 00001EE1 81C7[03F10000]      <2> 		add edi, commandbuf
  2371 00001EE7 8806                <2> 		mov [esi], al
  2372 00001EE9 46                  <2> 		inc esi
  2373 00001EEA 57                  <2> 		push edi
  2374 00001EEB 8A1D[421F0000]      <2> 		mov bl, [modkeyrdpr]
  2375 00001EF1 E8DE000000          <2> 		call prcharq
  2376 00001EF6 5F                  <2> 		pop edi
  2377 00001EF7 81FF[03010100]      <2> 		cmp edi, commandbufend
  2378 00001EFD 76C5                <2> 		jbe morerdprup
  2379 00001EFF BF[03F10000]        <2> 		mov edi, commandbuf
  2380 00001F04 EBBE                <2> 		jmp morerdprup
  2381                              <2> 		
  2382                              <2> 	rdprdel:
  2383 00001F06 BF[26860000]        <2> 		mov edi, buftxt2
  2384 00001F0B 8A07                <2> 		mov al, [edi]
  2385 00001F0D 3C00                <2> 		cmp al, 0
  2386 00001F0F 0F84EEFCFFFF        <2> 		je near rdprintb
  2387 00001F15 8806                <2> 		mov [esi], al
  2388 00001F17 E8ADFEFFFF          <2> 		call shiftbuftxt2lft
  2389 00001F1C E8B3000000          <2> 		call prcharq
  2390                              <2> 		
  2391                              <2> 	rdprbscheck:
  2392 00001F21 3B35[431F0000]      <2> 		cmp esi, [firstesirdpr]
  2393 00001F27 7705                <2> 		ja goodbscheck
  2394 00001F29 E9D5FCFFFF          <2> 		jmp rdprintb
  2395                              <2> 	goodbscheck:
  2396 00001F2E 4E                  <2> 		dec esi
  2397 00001F2F C60600              <2> 		mov byte [esi], 0
  2398 00001F32 8A1D[421F0000]      <2> 		mov bl, [modkeyrdpr]
  2399 00001F38 B008                <2> 		mov al, 8
  2400 00001F3A E929FDFFFF          <2> 		jmp bscheckequal
  2401                              <2> 		
  2402 00001F3F 0000                <2> axcache dw 0
  2403 00001F41 00                  <2> endkeyrdpr db 0
  2404 00001F42 00                  <2> modkeyrdpr db 0
  2405 00001F43 00000000            <2> firstesirdpr dd 0
  2406 00001F47 00                  <2> commandedit db 0
  2407 00001F48 00                  <2> txtmask db 0
  2408 00001F49 00000000            <2> buftxtloc dd 0
  2409 00001F4D 00000000            <2> endbufferrdpr dd 0
  2410 00001F51 082000              <2> backcursor db 8," ",0
  2411                              <1> intx5:
  2412                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2413 00001F54 E807000000          <2> 	call rdcharint
  2414 00001F59 E91AE3FFFF          <2> 	jmp timerinterrupt
  2415                              <2> getchar:
  2416 00001F5E 30C0                <2> 	xor al, al
  2417                              <2> 	rdcharint:		;;get char, if al is 0, wait for key
  2418 00001F60 C605[AE1F0000]01    <2> 		mov byte [trans], 1
  2419 00001F67 3C00                <2> 		cmp al, 0
  2420 00001F69 7507                <2> 		jne transcheck
  2421 00001F6B C605[AE1F0000]00    <2> 		mov byte [trans], 0
  2422                              <2> 	transcheck:
  2423                              <2> 	%ifdef io.serial
  2424                              <2> 		call serial.receive
  2425                              <2> 		cmp al, 13
  2426                              <2> 		je rdenter
  2427                              <2> 	%else
  2428 00001F72 E83E240000          <2> 		call getkey
  2429 00001F77 66A1[AC1F0000]      <2> 		mov ax, [lastkey]
  2430 00001F7D 80FC1C              <2> 		cmp ah, 0x1C
  2431 00001F80 741F                <2> 		je rdenter
  2432                              <2> 	%endif
  2433 00001F82 8A3D[AE1F0000]      <2> 		mov bh, [trans]
  2434 00001F88 803D[95430000]E0    <2> 		cmp byte [specialkey], 0xE0
  2435 00001F8F 7504                <2> 		jne nospecialtrans
  2436 00001F91 88C3                <2> 		mov bl, al
  2437 00001F93 30C0                <2> 		xor al, al
  2438                              <2> 	nospecialtrans:
  2439 00001F95 08C7                <2> 		or bh, al
  2440 00001F97 80FF00              <2> 		cmp bh, 0
  2441 00001F9A 74D6                <2> 		je transcheck
  2442 00001F9C E90A000000          <2> 		jmp rdend
  2443                              <2> 	rdenter:
  2444 00001FA1 B41C                <2> 		mov ah, 0x1C
  2445 00001FA3 B00A                <2> 		mov al, 10
  2446 00001FA5 66A3[AC1F0000]      <2> 		mov [lastkey], ax
  2447                              <2> 	rdend:
  2448 00001FAB C3                  <2> 		ret
  2449                              <2> 		
  2450 00001FAC 0000                <2> lastkey db 0,0
  2451 00001FAE 00                  <2> trans db 0
  2452                              <1> intx6:
  2453                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2454                              <2> %ifdef io.serial
  2455                              <2> 	cmp bl, bh
  2456                              <2> 	call prcharint
  2457                              <2> 	jmp timerinterrupt
  2458                              <2> prcharint:	
  2459                              <2> prcharq:
  2460                              <2> 	call serial.send
  2461                              <2> 	ret
  2462                              <2> %else
  2463 00001FAF 38FB                <2> cmp bl, bh
  2464 00001FB1 740A                <2> je prchar.notimer
  2465 00001FB3 E80B000000          <2> call prcharint
  2466 00001FB8 E9BBE2FFFF          <2> jmp timerinterrupt
  2467                              <2> prchar.notimer:
  2468 00001FBD E812000000          <2> 	call prcharq
  2469 00001FC2 CF                  <2> 	iret
  2470                              <2> 	
  2471                              <2> prcharint:	;;print char, char in al, modifier in bl, if bh = bl then termcopy will not happen, will run termcopy if called as is
  2472 00001FC3 38FB                <2> 	cmp bl, bh
  2473 00001FC5 740D                <2> 	je prcharq
  2474 00001FC7 E808000000          <2> 	call prcharq
  2475 00001FCC E83C030000          <2> 	call termcopy
  2476 00001FD1 C3                  <2> 	ret
  2477 00001FD2 00                  <2> termguion db 0
  2478 00001FD3 00                  <2> termcopyon db 0
  2479                              <2> prcharq:
  2480 00001FD4 88DC                <2> 	mov ah, bl
  2481 00001FD6 66A3[98210000]      <2> 	mov [charbuf], ax
  2482 00001FDC 31DB                <2> 	xor ebx, ebx
  2483 00001FDE 668B1D[92210000]    <2> 	mov bx, [videobufpos]
  2484 00001FE5 BF[3B8E0000]        <2> 	mov edi, videobuf
  2485 00001FEA 01DF                <2> 	add edi, ebx
  2486 00001FEC 66A1[0B230000]      <2> 	mov ax, [removedvideo]
  2487 00001FF2 668907              <2> 	mov [edi], ax
  2488 00001FF5 66A1[98210000]      <2> 	mov ax, [charbuf]
  2489 00001FFB 31D2                <2> 	xor edx, edx
  2490 00001FFD 668B15[94210000]    <2> 	mov dx, [charpos]
  2491 00002004 31C9                <2> 	xor ecx, ecx
  2492 00002006 668B0D[96210000]    <2> 	mov cx, [charxy]
  2493 0000200D 3C09                <2> 	cmp al, 9
  2494 0000200F 0F8463000000        <2> 	je near prtab
  2495 00002015 3C0D                <2> 	cmp al, 13		;I am phasing this out-it is used by windows but not unix based systems
  2496 00002017 0F848B000000        <2> 	je near prcr
  2497 0000201D 3C0A                <2> 	cmp al, 10
  2498 0000201F 0F84B7000000        <2> 	je near prnlcr
  2499 00002025 3C08                <2> 	cmp al, 8
  2500 00002027 0F848F000000        <2> 	je near prbs
  2501 0000202D 3CFF                <2> 	cmp al, 255		;;null character
  2502 0000202F 0F841B000000        <2> 	je near donescr
  2503 00002035 668907              <2> 	mov [edi], ax
  2504 00002038 81C702000000        <2> 	add edi, 2
  2505 0000203E FEC2                <2> 	inc dl
  2506                              <2> donecrnl:
  2507 00002040 38CA                <2> 	cmp dl, cl
  2508 00002042 0F83B9000000        <2> 	jae near preol
  2509                              <2> doneeol:
  2510 00002048 38EE                <2> 	cmp dh, ch
  2511 0000204A 0F83CF000000        <2> 	jae near prscr	
  2512                              <2> donescr:
  2513 00002050 89FB                <2> 	mov ebx, edi
  2514 00002052 668B07              <2> 	mov ax, [edi]
  2515 00002055 66A3[0B230000]      <2> 	mov [removedvideo], ax
  2516 0000205B 81EB[3B8E0000]      <2> 	sub ebx, videobuf
  2517 00002061 66891D[92210000]    <2> 	mov [videobufpos], bx
  2518 00002068 668915[94210000]    <2> 	mov [charpos], dx
  2519 0000206F 66A1[98210000]      <2> 	mov ax, [charbuf]
  2520 00002075 88E3                <2> 	mov bl, ah
  2521 00002077 C3                  <2> 	ret
  2522                              <2> 	
  2523                              <2> 	prtab:
  2524 00002078 31DB                <2> 		xor ebx, ebx
  2525 0000207A 668B1D[90210000]    <2> 		mov bx, [linebeginpos]
  2526 00002081 81EF[3B8E0000]      <2> 		sub edi, videobuf
  2527 00002087 29DF                <2> 		sub edi, ebx
  2528 00002089 C1EF04              <2> 		shr edi, 4
  2529 0000208C C1E704              <2> 		shl edi, 4
  2530 0000208F 81C710000000        <2> 		add edi, 16
  2531 00002095 C0EA03              <2> 		shr dl, 3
  2532 00002098 C0E203              <2> 		shl dl, 3
  2533 0000209B 80C208              <2> 		add dl, 8
  2534 0000209E 81C7[3B8E0000]      <2> 		add edi, videobuf
  2535 000020A4 01DF                <2> 		add edi, ebx
  2536 000020A6 EB98                <2> 		jmp donecrnl
  2537                              <2> 	
  2538                              <2> 	prcr:
  2539 000020A8 30D2                <2> 		xor dl, dl
  2540 000020AA 31DB                <2> 		xor ebx, ebx
  2541 000020AC BF[3B8E0000]        <2> 		mov edi, videobuf
  2542 000020B1 668B1D[90210000]    <2> 		mov bx, [linebeginpos]
  2543 000020B8 01DF                <2> 		add edi, ebx
  2544 000020BA EB84                <2> 		jmp donecrnl
  2545                              <2> 			
  2546                              <2> 	prbs:
  2547 000020BC 80FA00              <2> 		cmp dl, 0
  2548 000020BF 7410                <2> 		je prbackline
  2549                              <2> 	prnobmr:
  2550 000020C1 FECA                <2> 		dec dl
  2551 000020C3 6631C0              <2> 		xor ax, ax
  2552 000020C6 81EF02000000        <2> 		sub edi, 2
  2553 000020CC E96FFFFFFF          <2> 		jmp donecrnl
  2554                              <2> 	prbackline:
  2555 000020D1 88CA                <2> 		mov dl, cl
  2556 000020D3 80FE00              <2> 		cmp dh, 0
  2557 000020D6 74E9                <2> 		je prnobmr
  2558 000020D8 FECE                <2> 		dec dh
  2559 000020DA EBE5                <2> 		jmp prnobmr
  2560                              <2> 		
  2561                              <2> 	prnlcr:
  2562 000020DC FEC6                <2> 		inc dh
  2563 000020DE 31DB                <2> 		xor ebx, ebx
  2564 000020E0 30D2                <2> 		xor dl, dl
  2565 000020E2 88CB                <2> 		mov bl, cl
  2566 000020E4 66D1E3              <2> 		shl bx, 1
  2567 000020E7 BF[3B8E0000]        <2> 		mov edi, videobuf
  2568 000020EC 66031D[90210000]    <2> 		add bx, [linebeginpos]
  2569 000020F3 66891D[90210000]    <2> 		mov [linebeginpos], bx
  2570 000020FA 01DF                <2> 		add edi, ebx
  2571 000020FC E93FFFFFFF          <2> 		jmp donecrnl
  2572                              <2> 		
  2573                              <2> 	preol:
  2574 00002101 30D2                <2> 		xor dl, dl
  2575 00002103 FEC6                <2> 		inc dh
  2576 00002105 31DB                <2> 		xor ebx, ebx
  2577 00002107 88CB                <2> 		mov bl, cl
  2578 00002109 66D1E3              <2> 		shl bx, 1
  2579 0000210C 66031D[90210000]    <2> 		add bx, [linebeginpos]
  2580 00002113 66891D[90210000]    <2> 		mov [linebeginpos], bx
  2581 0000211A E929FFFFFF          <2> 		jmp doneeol
  2582                              <2> 	prscr:
  2583 0000211F FECE                <2> 		dec dh
  2584 00002121 BF[3B8E0000]        <2> 		mov edi, videobuf
  2585 00002126 31DB                <2> 		xor ebx, ebx
  2586 00002128 88CB                <2> 		mov bl, cl
  2587 0000212A 66D1E3              <2> 		shl bx, 1
  2588 0000212D 01FB                <2> 		add ebx, edi
  2589                              <2> 	intscrollloop:
  2590 0000212F 668B03              <2> 		mov ax, [ebx]
  2591 00002132 668907              <2> 		mov [edi], ax
  2592 00002135 81C702000000        <2> 		add edi, 2
  2593 0000213B 81C302000000        <2> 		add ebx, 2
  2594 00002141 FEC9                <2> 		dec cl
  2595 00002143 80F900              <2> 		cmp cl, 0
  2596 00002146 75E7                <2> 		jne intscrollloop
  2597 00002148 8A0D[96210000]      <2> 		mov cl, [charxy]
  2598 0000214E FECD                <2> 		dec ch
  2599 00002150 80FD01              <2> 		cmp ch, 1
  2600 00002153 77DA                <2> 		ja intscrollloop
  2601 00002155 6631C0              <2> 		xor ax, ax
  2602 00002158 81EF[3B8E0000]      <2> 		sub edi, videobuf
  2603 0000215E 66893D[90210000]    <2> 		mov [linebeginpos], di
  2604 00002165 81C7[3B8E0000]      <2> 		add edi, videobuf
  2605 0000216B 89FB                <2> 		mov ebx, edi
  2606                              <2> 	intloopclear:
  2607 0000216D 668903              <2> 		mov [ebx], ax
  2608 00002170 81C302000000        <2> 		add ebx, 2
  2609 00002176 FEC9                <2> 		dec cl
  2610 00002178 80F900              <2> 		cmp cl, 0
  2611 0000217B 75F0                <2> 		jne intloopclear
  2612 0000217D FECD                <2> 		dec ch
  2613 0000217F 80FD00              <2> 		cmp ch, 0
  2614 00002182 75E9                <2> 		jne intloopclear
  2615 00002184 668B0D[96210000]    <2> 		mov cx, [charxy]
  2616 0000218B E9C0FEFFFF          <2> 		jmp donescr
  2617                              <2> 		
  2618 00002190 0000                <2> linebeginpos dw 0
  2619 00002192 0000                <2> videobufpos: dw 0
  2620 00002194 0000                <2> charpos db 0,0
  2621 00002196 501E                <2> charxy db 80,30
  2622 00002198 0000                <2> charbuf dw 0
  2623                              <2> %endif
  2624                              <1> intx7:
  2625                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2626 0000219A E828280000          <2> 	call loadfile
  2627 0000219F E9D4E0FFFF          <2> 	jmp timerinterrupt
  2628                              <1> intx9:
  2629                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2630 000021A4 3C00                <2> 	cmp al, 0
  2631 000021A6 750A                <2> 	jne num2strb
  2632 000021A8 E8D70A0000          <2> 	call showdec
  2633 000021AD E9C6E0FFFF          <2> 	jmp timerinterrupt
  2634                              <2> num2strb:
  2635 000021B2 E8030A0000          <2> 	call showhex
  2636 000021B7 E9BCE0FFFF          <2> 	jmp timerinterrupt
  2637                              <1> intx10:
  2638                              <1> 	%include 'source/interrupts/10_str2num.asm'
  2639 000021BC E8A50B0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2640 000021C1 E9B2E0FFFF          <2> 	jmp timerinterrupt
  2641                              <2> 	
  2642                              <1> %ifdef threads.included
  2643                              <1> intx11:
  2644                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  2645                              <2> threadfork: ;esi is next thread's start address, if 0, fork current thread
  2646                              <2> 			;returns the PID of the new fork in ebx
  2647                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  2648 000021C6 FA                  <2> 	cli
  2649 000021C7 60                  <2> 	pushad
  2650 000021C8 8925[95220000]      <2> 	mov [.espold], esp
  2651 000021CE C605[664B0000]01    <2> 	mov byte [threadson], 1
  2652 000021D5 8B1D[674B0000]      <2> 	mov ebx, [currentthread]
  2653 000021DB C1E302              <2> 	shl ebx, 2
  2654 000021DE 89A3[03010100]      <2> 	mov [threadlist + ebx], esp
  2655 000021E4 C1EB02              <2> 	shr ebx, 2
  2656 000021E7 81FB00000000        <2> 	cmp ebx, 0
  2657 000021ED 750C                <2> 	jne .simplestack
  2658 000021EF BB[466F0000]        <2> 	mov ebx, stackend
  2659 000021F4 29E3                <2> 	sub ebx, esp
  2660 000021F6 E90B000000          <2> 	jmp .stackcalcdone
  2661                              <2> .simplestack:
  2662 000021FB C1E30A              <2> 	shl ebx, 10
  2663 000021FE 81C3[03150100]      <2> 	add ebx, stack1
  2664 00002204 29E3                <2> 	sub ebx, esp
  2665                              <2> .stackcalcdone:
  2666 00002206 29DC                <2> 	sub esp, ebx
  2667 00002208 81C4[03150100]      <2> 	add esp, stack1
  2668 0000220E 8B1D[624B0000]      <2> 	mov ebx, [lastthread]
  2669 00002214 C1E308              <2> 	shl ebx, 8
  2670 00002217 01DC                <2> 	add esp, ebx
  2671 00002219 891D[99220000]      <2> 	mov [.stackend], ebx
  2672                              <2> 
  2673 0000221F 89E5                <2> 	mov ebp, esp
  2674 00002221 8B25[95220000]      <2> 	mov esp, [.espold]
  2675                              <2> 
  2676 00002227 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  2677 0000222A 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  2678                              <2> 
  2679 0000222E 31DB                <2> 	xor ebx, ebx
  2680                              <2> .stackcopy:
  2681 00002230 668B041C            <2> 	mov ax, [esp + ebx]
  2682 00002234 6689441D00          <2> 	mov [ebp + ebx], ax
  2683 00002239 81C302000000        <2> 	add ebx, 2
  2684 0000223F 3B1D[99220000]      <2> 	cmp ebx, [.stackend]
  2685 00002245 72E9                <2> 	jb .stackcopy
  2686                              <2> 
  2687 00002247 31C0                <2> 	xor eax, eax
  2688 00002249 668CC8              <2> 	mov ax, cs
  2689 0000224C 89C2                <2> 	mov edx, eax
  2690 0000224E 8B4C2428            <2> 	mov ecx, [esp + 40]
  2691 00002252 81C900020000        <2> 	or ecx, 0x200
  2692                              <2> 	
  2693 00002258 81FE00000000        <2> 	cmp esi, 0
  2694 0000225E 7504                <2> 	jne .nochangestack
  2695 00002260 8B742420            <2> 	mov esi, [esp + 32]
  2696                              <2> .nochangestack:
  2697 00002264 89F0                <2> 	mov eax, esi
  2698 00002266 89EC                <2> 	mov esp, ebp
  2699                              <2> 
  2700 00002268 89442420            <2> 	mov [esp + 32], eax
  2701 0000226C 89542424            <2> 	mov [esp + 36], edx
  2702 00002270 894C2428            <2> 	mov [esp + 40], ecx
  2703                              <2> 
  2704 00002274 8B1D[624B0000]      <2> 	mov ebx, [lastthread]
  2705 0000227A 89A3[03010100]      <2> 	mov [threadlist + ebx], esp
  2706 00002280 81C304000000        <2> 	add ebx, 4
  2707 00002286 891D[624B0000]      <2> 	mov [lastthread], ebx
  2708 0000228C 8B25[95220000]      <2> 	mov esp, [.espold]
  2709 00002292 61                  <2> 	popad
  2710 00002293 FB                  <2> 	sti
  2711 00002294 CF                  <2> 	iret
  2712                              <2> 
  2713 00002295 00000000            <2> .espold dd 0
  2714 00002299 00000000            <2> .stackend dd 0
  2715                              <1> %endif
  2716                              <1> intx12:
  2717                              <1> 	%include 'source/interrupts/12_gettime.asm'
  2718 0000229D A1[30020000]        <2> 	mov eax, [timeseconds]
  2719 000022A2 8B1D[34020000]      <2> 	mov ebx, [timenanoseconds]
  2720 000022A8 89D9                <2> 	mov ecx, ebx
  2721 000022AA C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2722 000022AD E9C6DFFFFF          <2> 	jmp timerinterrupt
  2723                              <2> 	
  2724                              <1> intx13:
  2725                              <1> 	%include 'source/interrupts/13_settime.asm'
  2726 000022B2 A3[30020000]        <2> 	mov [timeseconds], eax
  2727 000022B7 891D[34020000]      <2> 	mov [timenanoseconds], ebx
  2728 000022BD E9B6DFFFFF          <2> 	jmp timerinterrupt
  2729                              <2> 	
  2730                              <1> intx14:
  2731                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  2732 000022C2 BF[268A0000]        <2> 	mov edi, buftxt
  2733                              <2> cpcmd:
  2734 000022C7 8A06                <2> 	mov al, [esi]
  2735 000022C9 8807                <2> 	mov [edi], al
  2736 000022CB 46                  <2> 	inc esi
  2737 000022CC 47                  <2> 	inc edi
  2738 000022CD 3C00                <2> 	cmp al, 0
  2739 000022CF 75F6                <2> 	jne cpcmd
  2740 000022D1 E8E7050000          <2> 	call run
  2741 000022D6 CF                  <2> 	iret
  2742                              <1> intx15:
  2743                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  2744 000022D7 BB[26760000]        <2> 	mov ebx, variables
  2745 000022DC 8B35[93290000]      <2> 	mov esi, [currentcommandloc]
  2746 000022E2 89F7                <2> 	mov edi, esi
  2747 000022E4 31C9                <2> 	xor ecx, ecx
  2748                              <2> getcommandzeroes:
  2749 000022E6 8A07                <2> 	mov al, [edi]
  2750 000022E8 47                  <2> 	inc edi
  2751 000022E9 3C3B                <2> 	cmp al, ';'
  2752 000022EB 740B                <2> 	je nomorezeroes
  2753 000022ED 3C00                <2> 	cmp al, 0
  2754 000022EF 7407                <2> 	je nomorezeroes
  2755 000022F1 3C20                <2> 	cmp al, ' '
  2756 000022F3 75F1                <2> 	jne getcommandzeroes
  2757 000022F5 41                  <2> 	inc ecx
  2758 000022F6 EBEE                <2> 	jmp getcommandzeroes
  2759                              <2> nomorezeroes:
  2760 000022F8 41                  <2> 	inc ecx
  2761 000022F9 4F                  <2> 	dec edi
  2762 000022FA 8B1D[B2750000]      <2> 	mov ebx, [uid]
  2763 00002300 8B15[674B0000]      <2> 	mov edx, [currentthread]
  2764 00002306 CF                  <2> 	iret
  2765                              <2> 	
  2766                              <1> 		
  2767                              <1> %ifdef io.serial
  2768                              <1> termcopy:
  2769                              <1> 		ret
  2770                              <1> %else
  2771 00002307 00000000            <1> 	termcursorpos dd 0
  2772 0000230B 0000                <1> 	removedvideo dw 0
  2773                              <1> termcopy:	
  2774 0000230D 60                  <1> 	pusha
  2775 0000230E BF[3B8E0000]        <1> 	mov edi, videobuf
  2776 00002313 31DB                <1> 	xor ebx, ebx
  2777 00002315 668B1D[92210000]    <1> 	mov bx, [videobufpos]
  2778 0000231C 01DF                <1> 	add edi, ebx
  2779 0000231E 893D[07230000]      <1> 	mov [termcursorpos], edi
  2780 00002324 E8B0000000          <1> 	call switchtermcursor
  2781 00002329 803D[605D0000]00    <1> 	cmp byte [guion], 0
  2782 00002330 0F8405000000        <1> 	je near nowincopy
  2783                              <1> %ifdef gui.included
  2784                              <1> 	mov byte [mouseselecton], 0
  2785                              <1> 	mov byte [termcopyon], 1
  2786                              <1> 	cmp byte [termguion], 1
  2787                              <1> 	je near windowvideocopy
  2788                              <1> %endif
  2789 00002336 E997000000          <1> 	jmp nocopytermatall
  2790                              <1> nowincopy:
  2791 0000233B BE00000A00          <1> 	mov esi, 0xA0000
  2792 00002340 A1[19020000]        <1> 	mov eax, [basecache]
  2793 00002345 C1E004              <1> 	shl eax, 4
  2794 00002348 29C6                <1> 	sub esi, eax
  2795 0000234A BF[3B8E0000]        <1> 	mov edi, videobuf
  2796 0000234F 31C9                <1> 	xor ecx, ecx
  2797 00002351 668B0D[96210000]    <1> 	mov cx, [charxy]
  2798                              <1> nowincopy2:
  2799 00002358 668B07              <1> 	mov ax, [edi]
  2800 0000235B 81C7C0120000        <1> 	add edi, (videobuf2 - videobuf)
  2801 00002361 668B1F              <1> 	mov bx, [edi]
  2802 00002364 668907              <1> 	mov [edi], ax
  2803 00002367 81EFC0120000        <1> 	sub edi, (videobuf2 - videobuf)
  2804 0000236D 47                  <1> 	inc edi
  2805 0000236E 6639D8              <1> 	cmp ax, bx
  2806 00002371 743E                <1> 	je nopresentwinfont
  2807 00002373 4F                  <1> 	dec edi
  2808 00002374 BB[D94B0000]        <1> 	mov ebx, fonts
  2809 00002379 31C0                <1> 	xor eax, eax
  2810 0000237B 8A07                <1> 	mov al, [edi]
  2811 0000237D C1E004              <1> 	shl eax, 4
  2812 00002380 01C3                <1> 	add ebx, eax
  2813 00002382 47                  <1> 	inc edi
  2814 00002383 8A27                <1> 	mov ah, [edi]
  2815 00002385 31D2                <1> 	xor edx, edx
  2816 00002387 8A15[96210000]      <1> 	mov dl, [charxy]
  2817 0000238D C1C110              <1> 	rol ecx, 16
  2818 00002390 B110                <1> 	mov cl, 16
  2819                              <1> nowinfont:
  2820 00002392 8A03                <1> 	mov al, [ebx]
  2821 00002394 D0C8                <1> 	ror al, 1
  2822 00002396 80FC07              <1> 	cmp ah, 7
  2823 00002399 7602                <1> 	jbe notnotfont
  2824 0000239B F6D0                <1> 	not al
  2825                              <1> notnotfont:
  2826 0000239D 8806                <1> 	mov [esi], al
  2827 0000239F 01D6                <1> 	add esi, edx
  2828 000023A1 43                  <1> 	inc ebx
  2829 000023A2 FEC9                <1> 	dec cl
  2830 000023A4 80F900              <1> 	cmp cl, 0
  2831 000023A7 75E9                <1> 	jne nowinfont
  2832 000023A9 C1E204              <1> 	shl edx, 4
  2833 000023AC 29D6                <1> 	sub esi, edx
  2834 000023AE C1C110              <1> 	rol ecx, 16
  2835                              <1> nopresentwinfont:
  2836 000023B1 47                  <1> 	inc edi
  2837 000023B2 46                  <1> 	inc esi
  2838 000023B3 FEC9                <1> 	dec cl
  2839 000023B5 80F900              <1> 	cmp cl, 0
  2840 000023B8 759E                <1> 	jne nowincopy2
  2841 000023BA 8A0D[96210000]      <1> 	mov cl, [charxy]
  2842 000023C0 31D2                <1> 	xor edx, edx
  2843 000023C2 88CA                <1> 	mov dl, cl
  2844 000023C4 29D6                <1> 	sub esi, edx
  2845 000023C6 C1E204              <1> 	shl edx, 4
  2846 000023C9 01D6                <1> 	add esi, edx
  2847 000023CB FECD                <1> 	dec ch
  2848 000023CD 80FD00              <1> 	cmp ch, 0
  2849 000023D0 7586                <1> 	jne nowincopy2
  2850                              <1> nocopytermatall:
  2851 000023D2 E802000000          <1> 	call switchtermcursor
  2852 000023D7 61                  <1> 	popa
  2853 000023D8 C3                  <1> 	ret
  2854                              <1> 	
  2855                              <1> switchtermcursor:
  2856 000023D9 8B3D[07230000]      <1> 	mov edi, [termcursorpos]
  2857 000023DF 8A4701              <1> 	mov al, [edi + 1]
  2858 000023E2 8A27                <1> 	mov ah, [edi]
  2859 000023E4 3C07                <1> 	cmp al, 7
  2860 000023E6 7607                <1> 	jbe movlargecursorterm
  2861 000023E8 B007                <1> 	mov al, 7
  2862 000023EA E902000000          <1> 	jmp movedcursorterm
  2863                              <1> movlargecursorterm:
  2864 000023EF B0F0                <1> 	mov al, 0xF0
  2865                              <1> movedcursorterm:
  2866 000023F1 884701              <1> 	mov [edi + 1], al
  2867 000023F4 80FC00              <1> 	cmp ah, 0
  2868 000023F7 7504                <1> 	jne fixednocursorterm
  2869 000023F9 B420                <1> 	mov ah, " "
  2870 000023FB 8827                <1> 	mov [edi], ah
  2871                              <1> fixednocursorterm:
  2872 000023FD C3                  <1> 	ret
  2873                              <1> %endif
  2874                                      %include "source/dosints.asm"
  2875                              <1> int20h:
  2876 000023FE 66B8004C            <1> mov ax, 0x4C00
  2877                              <1> int21h:
  2878                              <1> dostosolleros:
  2879 00002402 6650                <1> 	push ax
  2880 00002404 66B83000            <1> 	mov ax, NEW_DATA_SEL
  2881 00002408 8ED8                <1> 	mov ds, ax
  2882 0000240A 8EC0                <1> 	mov es, ax
  2883 0000240C 8EE0                <1> 	mov fs, ax
  2884 0000240E 66B82000            <1> 	mov ax, SYS_DATA_SEL
  2885 00002412 8EE8                <1> 	mov gs, ax
  2886 00002414 6658                <1> 	pop ax
  2887 00002416 9C                  <1> 	pushf
  2888 00002417 60                  <1> 	pusha
  2889 00002418 80FC01              <1> 	cmp ah, 1
  2890 0000241B 0F8449000000        <1> 	je near dosgchar
  2891 00002421 80FC02              <1> 	cmp ah, 2
  2892 00002424 0F8447000000        <1> 	je near doswchar
  2893 0000242A 80FC09              <1> 	cmp ah, 9
  2894 0000242D 0F8449000000        <1> 	je near dosprintstr
  2895 00002433 80FC0A              <1> 	cmp ah, 0xA
  2896 00002436 0F8456000000        <1> 	je near dosgetstr
  2897 0000243C 80FC2B              <1> 	cmp ah, 0x2B
  2898 0000243F 0F8492000000        <1> 	je near dosgetdate
  2899 00002445 80FC2C              <1> 	cmp ah, 0x2C
  2900 00002448 0F84AC000000        <1> 	je near dosgettime
  2901 0000244E 80FC4C              <1> 	cmp ah, 0x4C
  2902 00002451 0F84C1000000        <1> 	je near dosexit
  2903                              <1> backtodos:
  2904 00002457 61                  <1> 	popa
  2905 00002458 9D                  <1> 	popf
  2906 00002459 6650                <1> 	push ax
  2907 0000245B 66B85000            <1> 	mov ax, DOS_DATA_SEL
  2908 0000245F 8ED8                <1> 	mov ds, ax
  2909 00002461 8EC0                <1> 	mov es, ax
  2910 00002463 8EE0                <1> 	mov fs, ax
  2911 00002465 8EE8                <1> 	mov gs, ax
  2912 00002467 6658                <1> 	pop ax
  2913 00002469 CF                  <1> 	iret
  2914                              <1> 
  2915                              <1> dosgchar:
  2916 0000246A E8EFFAFFFF          <1> 	call getchar
  2917 0000246F EBE6                <1> 	jmp backtodos
  2918                              <1> 	
  2919                              <1> doswchar:
  2920 00002471 88D0                <1> 	mov al, dl
  2921 00002473 B307                <1> 	mov bl, 7
  2922 00002475 E849FBFFFF          <1> 	call prcharint
  2923 0000247A EBDB                <1> 	jmp backtodos
  2924                              <1> 	
  2925                              <1> dosprintstr:
  2926 0000247C 31F6                <1> 	xor esi, esi
  2927 0000247E 6689D6              <1> 	mov si, dx
  2928 00002481 81C600004000        <1> 	add esi, dosprogloc
  2929 00002487 B024                <1> 	mov al, "$"
  2930 00002489 B307                <1> 	mov bl, 7
  2931 0000248B E873F6FFFF          <1> 	call printint
  2932 00002490 EBC5                <1> 	jmp backtodos
  2933                              <1> 	
  2934                              <1> dosgetstr:
  2935 00002492 31F6                <1> 	xor esi, esi
  2936 00002494 6689D6              <1> 	mov si, dx
  2937 00002497 81C600004000        <1> 	add esi, dosprogloc
  2938 0000249D B900000000          <1> 	mov ecx, 0
  2939 000024A2 8A0E                <1> 	mov cl, [esi]
  2940 000024A4 81C603000000        <1> 	add esi, 3
  2941 000024AA 89F7                <1> 	mov edi, esi
  2942 000024AC 8935[D3240000]      <1> 	mov [stringstart], esi
  2943 000024B2 01CF                <1> 	add edi, ecx
  2944 000024B4 B00A                <1> 	mov al, 10
  2945 000024B6 B307                <1> 	mov bl, 7
  2946 000024B8 E829F7FFFF          <1> 	call rdprint
  2947 000024BD 89F1                <1> 	mov ecx, esi
  2948 000024BF 2B0D[D3240000]      <1> 	sub ecx, [stringstart]
  2949 000024C5 8B35[D3240000]      <1> 	mov esi, [stringstart]
  2950 000024CB 884EFF              <1> 	mov [esi - 1], cl
  2951 000024CE 884EFE              <1> 	mov [esi - 2], cl
  2952 000024D1 EB84                <1> 	jmp backtodos
  2953 000024D3 00000000            <1> stringstart dd 0
  2954                              <1> 
  2955                              <1> dosgetdate:
  2956 000024D7 E8FF1A0000          <1> 	call time
  2957 000024DC 8A0D[A3410000]      <1> 	mov cl, [RTCtimeYear]
  2958 000024E2 B500                <1> 	mov ch, 0
  2959 000024E4 6681C1D007          <1> 	add cx, 2000
  2960 000024E9 8A35[A2410000]      <1> 	mov dh, [RTCtimeMonth]
  2961 000024EF 8A15[A1410000]      <1> 	mov dl, [RTCtimeDay]
  2962 000024F5 E95DFFFFFF          <1> 	jmp backtodos
  2963                              <1> 
  2964                              <1> dosgettime:
  2965 000024FA E8DC1A0000          <1> 	call time
  2966 000024FF 8A2D[A0410000]      <1> 	mov ch, [RTCtimeHour]
  2967 00002505 8A0D[9F410000]      <1> 	mov cl, [RTCtimeMinute]
  2968 0000250B 8A35[9E410000]      <1> 	mov dh, [RTCtimeSecond]
  2969 00002511 B200                <1> 	mov dl, 0
  2970 00002513 E93FFFFFFF          <1> 	jmp backtodos
  2971                              <1> 	
  2972                              <1> dosexit:
  2973 00002518 61                  <1> 	popa
  2974 00002519 8B25[A6730000]      <1> 	mov esp, [previousstack]
  2975 0000251F 31DB                <1> 	xor ebx, ebx
  2976 00002521 88C3                <1> 	mov bl, al
  2977 00002523 80FB00              <1> 	cmp bl, 0
  2978 00002526 0F855EF5FFFF        <1> 	jne near exitprog.error
  2979 0000252C C3                  <1> 	ret
  2980                                      %include "source/solleros.asm"
  2981                              <1> 	;SOLLEROS.ASM
  2982                              <1> os:
  2983                              <1> setdefenv:
  2984 0000252D B02F                <1> 	mov al, '/'
  2985 0000252F A2[B2730000]        <1> 	mov [currentfolder], al
  2986 00002534 B801000000          <1> 	mov eax, 1
  2987 00002539 A3[AE730000]        <1> 	mov [currentfolderloc], eax
  2988 0000253E E81FF6FFFF          <1> 	call clear
  2989                              <1> bootfilecheck:
  2990 00002543 803D[B6750000]01    <1> 	cmp byte [ranboot], 1
  2991 0000254A 0F8427000000        <1> 	je near nobootfile
  2992 00002550 C605[B6750000]01    <1> 	mov byte [ranboot], 1
  2993 00002557 BF[6B4B0000]        <1> 	mov edi, bootfilename
  2994 0000255C BE00004000          <1> 	mov esi, 0x400000
  2995 00002561 E861240000          <1> 	call loadfile
  2996 00002566 81FA94010000        <1> 	cmp edx, 404
  2997 0000256C 0F8405000000        <1> 	je near nobootfile
  2998 00002572 E89A0D0000          <1> 	call progbatchfound
  2999                              <1> nobootfile:	
  3000                              <1> 
  3001 00002577 BE[00000000]        <1> 	mov esi, signature
  3002                              <1> .sigcopyloop:	;this prevents an odd error
  3003 0000257C 658A06              <1> 	mov al, [gs:esi]
  3004 0000257F 8806                <1> 	mov [esi], al
  3005 00002581 46                  <1> 	inc esi
  3006 00002582 81FE[1A000000]      <1> 	cmp esi, signatureend
  3007 00002588 72F2                <1> 	jb .sigcopyloop
  3008 0000258A BE[00000000]        <1> 	mov esi, signature
  3009 0000258F E868F5FFFF          <1> 	call print
  3010 00002594 8B0D[16000000]      <1> 	mov ecx, [signatureend - 4]
  3011 0000259A E8E5060000          <1> 	call showdec
  3012 0000259F BE[B44B0000]        <1> 	mov esi, line
  3013 000025A4 E853F5FFFF          <1> 	call print
  3014 000025A9 BE[904B0000]        <1> 	mov esi, userask
  3015 000025AE E849F5FFFF          <1> 	call print
  3016                              <1> usercheck:
  3017 000025B3 BE[268A0000]        <1> 	mov esi, buftxt
  3018 000025B8 BF[268E0000]        <1> 	mov edi, buftxtend
  3019 000025BD B00A                <1> 	mov al, 10
  3020 000025BF E822F6FFFF          <1> 	call rdprint
  3021 000025C4 56                  <1> 	push esi
  3022 000025C5 BE[9A4B0000]        <1> 	mov esi, pwdask
  3023 000025CA E82DF5FFFF          <1> 	call print
  3024 000025CF 5E                  <1> 	pop esi
  3025 000025D0 46                  <1> 	inc esi
  3026 000025D1 8935[BB260000]      <1> 	mov [esipass], esi
  3027                              <1> passcheck:
  3028 000025D7 E882F9FFFF          <1> 	call getchar
  3029 000025DC 3C0A                <1> 	cmp al, 10
  3030 000025DE 0F8436000000        <1> 	je near gotpass
  3031 000025E4 3C08                <1> 	cmp al, 8
  3032 000025E6 0F8410000000        <1> 	je near backpass
  3033 000025EC 8806                <1> 	mov [esi], al
  3034 000025EE 46                  <1> 	inc esi
  3035 000025EF B02A                <1> 	mov al, '*'
  3036 000025F1 E8CDF9FFFF          <1> 	call prcharint
  3037 000025F6 EBDF                <1> 	jmp passcheck
  3038 000025F8 08200800            <1> backcursor2 db 8," ",8,0
  3039                              <1> backpass:
  3040 000025FC 3B35[BB260000]      <1> 	cmp esi, [esipass]
  3041 00002602 0F84CFFFFFFF        <1> 	je near passcheck
  3042 00002608 4E                  <1> 	dec esi
  3043 00002609 C60600              <1> 	mov byte [esi], 0
  3044 0000260C 56                  <1> 	push esi
  3045 0000260D BE[F8250000]        <1> 	mov esi, backcursor2
  3046 00002612 E8E5F4FFFF          <1> 	call print
  3047 00002617 5E                  <1> 	pop esi
  3048 00002618 EBBD                <1> 	jmp passcheck
  3049                              <1> gotpass:
  3050 0000261A B00A                <1> 	mov al, 10
  3051 0000261C E8A2F9FFFF          <1> 	call prcharint
  3052 00002621 30C0                <1> 	xor al, al
  3053 00002623 31C9                <1> 	xor ecx, ecx
  3054 00002625 8806                <1> 	mov [esi], al
  3055 00002627 BB[B64B0000]        <1> 	mov ebx, userlst
  3056                              <1> userfind:
  3057 0000262C BE[268A0000]        <1> 	mov esi, buftxt
  3058 00002631 8A06                <1> 	mov al, [esi]
  3059 00002633 3C00                <1> 	cmp al, 0
  3060 00002635 0F84F2FEFFFF        <1> 	je near os
  3061 0000263B 891D[BF260000]      <1> 	mov [usercache], ebx
  3062 00002641 E851030000          <1> 	call tester
  3063 00002646 3C01                <1> 	cmp al, 1
  3064 00002648 7416                <1> 	je pwdtest
  3065 0000264A 41                  <1> 	inc ecx
  3066                              <1> nxtuser:
  3067 0000264B 8A03                <1> 	mov al, [ebx]
  3068 0000264D 43                  <1> 	inc ebx
  3069 0000264E 3C00                <1> 	cmp al, 0
  3070 00002650 75F9                <1> 	jne nxtuser
  3071 00002652 81FB[D94B0000]      <1> 	cmp ebx, userlstend
  3072 00002658 0F83CFFEFFFF        <1> 	jae near os
  3073 0000265E EBCC                <1> 	jmp userfind
  3074                              <1> pwdtest:
  3075 00002660 46                  <1> 	inc esi
  3076 00002661 43                  <1> 	inc ebx
  3077 00002662 E830030000          <1> 	call tester
  3078 00002667 3C01                <1> 	cmp al, 1
  3079 00002669 7402                <1> 	je pwdrgt
  3080 0000266B EBDE                <1> 	jmp nxtuser
  3081                              <1> pwdrgt:
  3082 0000266D D1E9                <1> 	shr ecx, 1
  3083 0000266F 890D[B2750000]      <1> 	mov [uid], ecx
  3084 00002675 E8E8F4FFFF          <1> 	call clear
  3085 0000267A 66B90002            <1> 	mov cx, 200h
  3086 0000267E BE[268A0000]        <1> 	mov esi, buftxt
  3087 00002683 8935[93290000]      <1> 	mov [currentcommandloc], esi
  3088 00002689 E825000000          <1> 	call bufclr
  3089                              <1> clearolddata:
  3090 0000268E 31C0                <1> 	xor eax, eax
  3091 00002690 A2[B7750000]        <1> 	mov [IFON], al
  3092 00002695 A2[B8750000]        <1> 	mov [IFTRUE], al
  3093 0000269A A2[20760000]        <1> 	mov [BATCHISON], al
  3094 0000269F A3[1C760000]        <1> 	mov [BATCHPOS], eax
  3095 000026A4 A2[21760000]        <1> 	mov [LOOPON], al
  3096 000026A9 A3[22760000]        <1> 	mov [LOOPPOS], eax
  3097 000026AE E933000000          <1> 	jmp nwcmd
  3098                              <1> bufclr:	
  3099 000026B3 30C0                <1> 	xor al, al
  3100 000026B5 8806                <1> 	mov [esi], al
  3101 000026B7 46                  <1> 	inc esi
  3102 000026B8 E2F9                <1> 	loop bufclr
  3103 000026BA C3                  <1> 	ret
  3104                              <1> 
  3105 000026BB 00000000            <1> esipass dd 0
  3106 000026BF [B64B0000]          <1> usercache dd userlst
  3107                              <1> 	
  3108                              <1> buftxtclear:
  3109 000026C3 30C0                <1> 	xor al, al
  3110 000026C5 BE[268A0000]        <1> 	mov esi, buftxt
  3111 000026CA 81FE[268E0000]      <1> clearbuftxt: cmp esi, buf2
  3112 000026D0 730E                <1> 	jae retbufclr
  3113 000026D2 8806                <1> 	mov [esi], al
  3114 000026D4 46                  <1> 	inc esi
  3115 000026D5 EBF3                <1> 	jmp clearbuftxt
  3116                              <1> 
  3117 000026D7 39DE                <1> clearitbuf: cmp esi, ebx
  3118 000026D9 7305                <1> 	jae retbufclr
  3119 000026DB 8806                <1> 	mov [esi], al
  3120 000026DD 46                  <1> 	inc esi
  3121 000026DE EBF7                <1> 	jmp clearitbuf
  3122 000026E0 C3                  <1> retbufclr: ret
  3123                              <1> 
  3124 000026E1 E900000000          <1> full:	jmp nwcmd
  3125                              <1> 
  3126                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3127                              <1> nwcmd:
  3128 000026E6 FB                  <1> 	sti
  3129 000026E7 31C0                <1> 	xor eax, eax
  3130 000026E9 3905[B5280000]      <1> 	cmp [nextcommandloc], eax
  3131 000026EF 7413                <1> 	je nomultiplecommand
  3132 000026F1 8B35[B5280000]      <1> 	mov esi, [nextcommandloc]
  3133 000026F7 8935[B9280000]      <1> 	mov [thiscommandloc], esi
  3134 000026FD E8C0010000          <1> 	call fixvariables
  3135 00002702 EBE2                <1> 	jmp nwcmd
  3136                              <1> nomultiplecommand:
  3137 00002704 A3[B9280000]        <1> 	mov [thiscommandloc], eax
  3138 00002709 3805[664B0000]      <1> 	cmp [threadson], al
  3139 0000270F 7405                <1> 	je noclinwcmd
  3140 00002711 A2[664B0000]        <1> 	mov [threadson], al
  3141                              <1> noclinwcmd:
  3142 00002716 B001                <1> 	mov al, 1
  3143 00002718 3805[20760000]      <1> 	cmp [BATCHISON], al
  3144 0000271E 7501                <1> 	jne cancel
  3145 00002720 C3                  <1> 	ret
  3146 00002721 30C0                <1> cancel:	xor al, al
  3147 00002723 A2[B7750000]        <1> 	mov [IFON], al
  3148 00002728 A2[20760000]        <1> 	mov [BATCHISON], al
  3149 0000272D B05B                <1> 	mov al, '['
  3150 0000272F 66BB0700            <1> 	mov bx, 7
  3151 00002733 E89CF8FFFF          <1> 	call prcharq
  3152 00002738 8B35[BF260000]      <1> 	mov esi, [usercache]
  3153 0000273E E8A7F3FFFF          <1> 	call printquiet
  3154 00002743 BE[A44B0000]        <1> 	mov esi, computer
  3155 00002748 E89DF3FFFF          <1> 	call printquiet
  3156 0000274D BE[B2730000]        <1> 	mov esi, currentfolder
  3157 00002752 0335[AA730000]      <1> 	add esi, [lastfolderloc]
  3158 00002758 E88DF3FFFF          <1> 	call printquiet
  3159 0000275D BE[AF4B0000]        <1> 	mov esi, endprompt
  3160 00002762 E895F3FFFF          <1> 	call print
  3161 00002767 E857FFFFFF          <1> 	call buftxtclear
  3162 0000276C BE[268A0000]        <1> 	mov esi, buftxt
  3163 00002771 C605[471F0000]01    <1> 	mov byte [commandedit], 1
  3164 00002778 B00A                <1> 	mov al, 10
  3165 0000277A 66BB0700            <1> 	mov bx, 7
  3166 0000277E BF[268E0000]        <1> 	mov edi, buftxtend
  3167 00002783 E85EF4FFFF          <1> 	call rdprint
  3168 00002788 C605[471F0000]00    <1> 	mov byte [commandedit], 0
  3169 0000278F 803D[268A0000]00    <1> 	cmp byte [buftxt], 0
  3170 00002796 0F844AFFFFFF        <1> 	je near nwcmd
  3171 0000279C 8B35[FFF00000]      <1> gotcmd:	mov esi, [commandbufpos]
  3172 000027A2 8935[FBF00000]      <1> 	mov [lastcommandpos], esi
  3173 000027A8 BF[268A0000]        <1> 	mov edi, buftxt
  3174 000027AD 81C6[03F10000]      <1> 	add esi, commandbuf
  3175 000027B3 81FE[03010100]      <1> 	cmp esi, commandbufend
  3176 000027B9 7605                <1> 	jbe copycommand
  3177 000027BB BE[03F10000]        <1> 	mov esi, commandbuf
  3178                              <1> copycommand:
  3179 000027C0 8A07                <1> 	mov al, [edi]
  3180 000027C2 8806                <1> 	mov [esi], al
  3181 000027C4 47                  <1> 	inc edi
  3182 000027C5 46                  <1> 	inc esi
  3183 000027C6 3C00                <1> 	cmp al, 0
  3184 000027C8 740F                <1> 	je donecopy
  3185 000027CA 81FE[03010100]      <1> 	cmp esi, commandbufend
  3186 000027D0 76EE                <1> 	jbe copycommand
  3187 000027D2 BE[03F10000]        <1> 	mov esi, commandbuf
  3188 000027D7 EBE7                <1> 	jmp copycommand
  3189                              <1> donecopy:
  3190 000027D9 81EE[03F10000]      <1> 	sub esi, commandbuf
  3191 000027DF 8935[FFF00000]      <1> 	mov [commandbufpos], esi
  3192 000027E5 E8D3000000          <1> 	call run
  3193 000027EA E9F7FEFFFF          <1> 	jmp nwcmd
  3194                              <1> 
  3195 000027EF E8CFFEFFFF          <1> input:	call buftxtclear
  3196 000027F4 BE[268A0000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3197 000027F9 BF[268E0000]        <1> 	mov edi, buftxtend
  3198 000027FE B00A                <1> stdin:	mov al, 10
  3199 00002800 B307                <1> 	mov bl, 7
  3200 00002802 E8DFF3FFFF          <1> 	call rdprint
  3201 00002807 C3                  <1> 	ret
  3202                              <1> 
  3203                              <1> replacevariable:
  3204 00002808 8A4601              <1> 	mov al, [esi + 1]
  3205 0000280B C64601FF            <1> 	mov byte [esi + 1], 255
  3206 0000280F 3C24                <1> 	cmp al, "$"
  3207 00002811 0F84AB000000        <1> 	je near fixvariables
  3208 00002817 884601              <1> 	mov [esi + 1], al
  3209 0000281A 56                  <1> 	push esi
  3210 0000281B 81EE[268A0000]      <1> 	sub esi, buftxt
  3211 00002821 89F7                <1> 	mov edi, esi
  3212 00002823 81C6[268A0000]      <1> 	add esi, buftxt
  3213 00002829 47                  <1> 	inc edi
  3214 0000282A BB[26760000]        <1> 	mov ebx, variables
  3215 0000282F E8B5100000          <1> 	call nxtvrech
  3216 00002834 89F7                <1> 	mov edi, esi
  3217 00002836 31DB                <1> 	xor ebx, ebx
  3218 00002838 4E                  <1> 	dec esi
  3219                              <1> findvarname:
  3220 00002839 4E                  <1> 	dec esi
  3221 0000283A 8A06                <1> 	mov al, [esi]
  3222 0000283C 43                  <1> 	inc ebx
  3223 0000283D 3C04                <1> 	cmp al, 4
  3224 0000283F 75F8                <1> 	jne findvarname
  3225 00002841 5E                  <1> 	pop esi
  3226                              <1> replacevarloop:
  3227 00002842 8A07                <1> 	mov al, [edi]
  3228 00002844 81FB00000000        <1> 	cmp ebx, 0
  3229 0000284A 0F841E000000        <1> 	je near expandbuftxt
  3230 00002850 3C00                <1> 	cmp al, 0
  3231 00002852 0F8407000000        <1> 	je near compressbuftxt
  3232 00002858 8806                <1> 	mov [esi], al
  3233 0000285A 4B                  <1> 	dec ebx
  3234 0000285B 46                  <1> 	inc esi
  3235 0000285C 47                  <1> 	inc edi
  3236 0000285D EBE3                <1> 	jmp replacevarloop
  3237                              <1> compressbuftxt:	
  3238 0000285F 8A041E              <1> 	mov al, [esi + ebx]
  3239 00002862 8806                <1> 	mov [esi], al
  3240 00002864 46                  <1> 	inc esi
  3241 00002865 3C00                <1> 	cmp al, 0
  3242 00002867 75F6                <1> 	jne compressbuftxt
  3243 00002869 E954000000          <1> 	jmp fixvariables
  3244                              <1> expandbuftxt:
  3245 0000286E 89F1                <1> 	mov ecx, esi
  3246 00002870 8A26                <1> 	mov ah, [esi]
  3247                              <1> expandbuftxtlp:
  3248 00002872 8A1E                <1> 	mov bl, [esi]
  3249 00002874 46                  <1> 	inc esi
  3250 00002875 8A3E                <1> 	mov bh, [esi]
  3251 00002877 8826                <1> 	mov [esi], ah
  3252 00002879 88FC                <1> 	mov ah, bh
  3253 0000287B 80FB00              <1> 	cmp bl, 0
  3254 0000287E 75F2                <1> 	jne expandbuftxtlp
  3255 00002880 89CE                <1> 	mov esi, ecx
  3256 00002882 8806                <1> 	mov [esi], al
  3257 00002884 47                  <1> 	inc edi
  3258 00002885 8A07                <1> 	mov al, [edi]
  3259 00002887 3C00                <1> 	cmp al, 0
  3260 00002889 0F8433000000        <1> 	je near fixvariables
  3261 0000288F 46                  <1> 	inc esi
  3262 00002890 EBDC                <1> 	jmp expandbuftxt
  3263                              <1> multipleprogline:
  3264 00002892 30E4                <1> 	xor ah, ah
  3265 00002894 8826                <1> 	mov [esi], ah
  3266 00002896 46                  <1> 	inc esi
  3267 00002897 8935[B5280000]      <1> 	mov [nextcommandloc], esi
  3268 0000289D E93E000000          <1> 	jmp donefixvariables
  3269                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3270 000028A2 46                  <1> 	inc esi
  3271 000028A3 8A06                <1> 	mov al, [esi]
  3272 000028A5 C606FF              <1> 	mov byte [esi], 255
  3273 000028A8 3C23                <1> 	cmp al, '#'
  3274 000028AA 7416                <1> 	je fixvariables
  3275 000028AC 4E                  <1> 	dec esi
  3276 000028AD C60600              <1> 	mov byte [esi], 0
  3277 000028B0 E90D000000          <1> 	jmp fixvariables
  3278                              <1> 	
  3279 000028B5 00000000            <1> nextcommandloc dd 0
  3280 000028B9 00000000            <1> thiscommandloc dd 0	
  3281                              <1> run:
  3282 000028BD BE[268A0000]        <1> 	mov esi, buftxt
  3283                              <1> fixvariables:
  3284 000028C2 46                  <1> 	inc esi
  3285 000028C3 8A06                <1> 	mov al, [esi]
  3286 000028C5 3C23                <1> 	cmp al, '#'	;inline comment
  3287 000028C7 74D9                <1> 	je inlinecomment
  3288 000028C9 3C24                <1> 	cmp al, '$' ;variable
  3289 000028CB 0F8437FFFFFF        <1> 	je near replacevariable
  3290 000028D1 3C3B                <1> 	cmp al, ';' ;program list
  3291 000028D3 74BD                <1> 	je multipleprogline
  3292 000028D5 3C00                <1> 	cmp al, 0
  3293 000028D7 75E9                <1> 	jne fixvariables
  3294 000028D9 31C0                <1> 	xor eax, eax
  3295 000028DB A3[B5280000]        <1> 	mov [nextcommandloc], eax
  3296                              <1> donefixvariables:
  3297 000028E0 803D[7E2E0000]00    <1> 	cmp byte [indexdone], 0
  3298 000028E7 7505                <1> 	jne progtest
  3299 000028E9 E8FB040000          <1> 	call indexfiles
  3300                              <1> progtest:
  3301 000028EE 31C0                <1> 	xor eax, eax
  3302 000028F0 BB[A66F0000]        <1> 	mov ebx, fileindex
  3303 000028F5 668B03              <1> prgnxt:	mov ax, [ebx]
  3304 000028F8 B1FF                <1> 	mov cl, 255
  3305 000028FA B52C                <1> 	mov ch, 44
  3306 000028FC 6639C8              <1> 	cmp ax, cx
  3307 000028FF 740B                <1> 	je fndprg
  3308 00002901 43                  <1> 	inc ebx
  3309 00002902 81FB[A6730000]      <1> 	cmp ebx, fileindexend
  3310 00002908 735D                <1> 	jae prgnf
  3311 0000290A EBE9                <1> 	jmp prgnxt
  3312 0000290C 81C302000000        <1> fndprg: add ebx, 2
  3313 00002912 31C9                <1> 	xor ecx, ecx
  3314 00002914 BE[268A0000]        <1> 	mov esi, buftxt
  3315 00002919 390D[B9280000]      <1> 	cmp [thiscommandloc], ecx
  3316 0000291F 7406                <1> 	je noprgtstmultiple
  3317 00002921 8B35[B9280000]      <1> 	mov esi, [thiscommandloc]
  3318                              <1> noprgtstmultiple:
  3319 00002927 E8A6000000          <1> 	call cndtest
  3320 0000292C 3C01                <1> 	cmp al, 1
  3321 0000292E 7302                <1> 	jae prggood
  3322 00002930 EBC3                <1> 	jmp prgnxt
  3323 00002932 81FB[A6730000]      <1> prggood: cmp ebx, fileindexend
  3324 00002938 7358                <1> 	jae prgdn
  3325 0000293A 31C0                <1> 	xor eax, eax
  3326 0000293C BE[268A0000]        <1> 	mov esi, buftxt
  3327 00002941 3905[B9280000]      <1> 	cmp [thiscommandloc], eax
  3328 00002947 7406                <1> 	je noprggoodmul
  3329 00002949 8B35[B9280000]      <1> 	mov esi, [thiscommandloc]
  3330                              <1> noprggoodmul:
  3331 0000294F 8935[93290000]      <1> 	mov [currentcommandloc], esi
  3332 00002955 81C303000000        <1> 	add ebx, 3
  3333 0000295B 8B3B                <1> 	mov edi, [ebx]
  3334 0000295D C605[664B0000]02    <1> 	mov byte [threadson], 2
  3335 00002964 FFD7                <1> 	call edi
  3336 00002966 C3                  <1> 	ret
  3337                              <1> prgnf:	
  3338 00002967 8B35[93290000]      <1> 	mov esi, [currentcommandloc]
  3339 0000296D 8A06                <1> 	mov al, [esi]
  3340 0000296F 3C00                <1> 	cmp al, 0
  3341 00002971 741F                <1> 	je prgdn
  3342 00002973 BE[734B0000]        <1> 	mov esi, notfound1
  3343 00002978 E87FF1FFFF          <1> 	call print
  3344 0000297D 8B35[93290000]      <1> 	mov esi, [currentcommandloc]
  3345 00002983 E874F1FFFF          <1> 	call print
  3346 00002988 BE[7B4B0000]        <1> 	mov esi, notfound2
  3347 0000298D E86AF1FFFF          <1> 	call print
  3348 00002992 C3                  <1> prgdn:	ret
  3349                              <1> 
  3350 00002993 00000000            <1> currentcommandloc dd 0
  3351                              <1> 
  3352                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3353 00002997 6631C0              <1> 	xor ax, ax
  3354 0000299A 8A06                <1> retest:	mov al, [esi]
  3355 0000299C 8A23                <1> 	mov ah, [ebx]
  3356 0000299E 3C00                <1> 	cmp al, 0
  3357 000029A0 7408                <1> 	je testtrue
  3358 000029A2 38E0                <1> 	cmp al, ah
  3359 000029A4 750C                <1> 	jne testfalse
  3360 000029A6 43                  <1> 	inc ebx
  3361 000029A7 46                  <1> 	inc esi
  3362 000029A8 EBF0                <1> 	jmp retest
  3363                              <1> testtrue:
  3364 000029AA 80FC00              <1> 	cmp ah, 0
  3365 000029AD 7503                <1> 	jne testfalse
  3366 000029AF B001                <1> 	mov al, 1
  3367 000029B1 C3                  <1> 	ret
  3368                              <1> testfalse:
  3369 000029B2 30C0                <1> 	xor al, al
  3370 000029B4 C3                  <1> 	ret
  3371                              <1> 
  3372                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3373 000029B5 30C0                <1> 	xor al, al
  3374                              <1> opretest:
  3375 000029B7 8A06                <1> 	mov al, [esi]
  3376 000029B9 8A23                <1> 	mov ah, [ebx]
  3377 000029BB 38E0                <1> 	cmp al, ah
  3378 000029BD 7510                <1> 	jne optestfalse
  3379 000029BF 80FC00              <1> 	cmp ah, 0
  3380 000029C2 7404                <1> 	je optesttrue
  3381 000029C4 43                  <1> 	inc ebx
  3382 000029C5 46                  <1> 	inc esi
  3383 000029C6 EBEF                <1> 	jmp opretest
  3384                              <1> optesttrue:
  3385 000029C8 3C00                <1> 	cmp al, 0
  3386 000029CA 7503                <1> 	jne optestfalse
  3387 000029CC B001                <1> 	mov al, 1
  3388 000029CE C3                  <1> 	ret
  3389                              <1> optestfalse:
  3390 000029CF 30C0                <1> 	xor al, al
  3391 000029D1 C3                  <1> 	ret
  3392                              <1> 
  3393                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3394 000029D2 30C0                <1> 	xor al, al
  3395 000029D4 8A06                <1> cndretest:	mov al, [esi]
  3396 000029D6 8A23                <1> 	mov ah, [ebx]
  3397 000029D8 38CC                <1> 	cmp ah, cl
  3398 000029DA 7408                <1> 	je cndtesttrue
  3399 000029DC 38E0                <1> 	cmp al, ah
  3400 000029DE 750B                <1> 	jne cndtestfalse
  3401 000029E0 43                  <1> 	inc ebx
  3402 000029E1 46                  <1> 	inc esi
  3403 000029E2 EBF0                <1> 	jmp cndretest
  3404                              <1> cndtesttrue:
  3405 000029E4 38C8                <1> 	cmp al, cl
  3406 000029E6 7506                <1> 	jne cndtestalmost
  3407 000029E8 B001                <1> 	mov al, 1
  3408 000029EA C3                  <1> 	ret
  3409                              <1> cndtestfalse:
  3410 000029EB 30C0                <1> 	xor al, al
  3411 000029ED C3                  <1> 	ret
  3412                              <1> cndtestalmost:
  3413 000029EE B002                <1> 	mov al, 2
  3414 000029F0 C3                  <1> 	ret
  3415                              <1> 	
  3416                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3417                              <1> 		                ;ends if array seperator is found backwards after 0
  3418                              <1> 	arnxt:	      
  3419 000029F1 88E8                <1> 		mov al, ch
  3420 000029F3 88CC                <1> 		mov ah, cl        
  3421 000029F5 663906              <1> 		cmp [esi], ax
  3422 000029F8 744D                <1> 		je ardn
  3423 000029FA 66390E              <1> 		cmp [esi], cx
  3424 000029FD 7407                <1> 		je arfnd
  3425 000029FF 46                  <1> 		inc esi
  3426 00002A00 39DE                <1> 		cmp esi, ebx
  3427 00002A02 7343                <1> 		jae ardn
  3428 00002A04 EBEB                <1> 		jmp arnxt
  3429 00002A06 81C602000000        <1> 	arfnd: add esi, 2
  3430 00002A0C 891D[482A0000]      <1> 		mov [arbx], ebx
  3431 00002A12 890D[4C2A0000]      <1> 		mov [arcx], ecx
  3432 00002A18 E8DFF0FFFF          <1> 		call print
  3433 00002A1D 8935[4E2A0000]      <1> 		mov [arsi], esi
  3434 00002A23 BE[B44B0000]        <1> 		mov esi, line
  3435 00002A28 E8CFF0FFFF          <1> 		call print
  3436 00002A2D 8B1D[482A0000]      <1> 		mov ebx, [arbx]
  3437 00002A33 668B0D[4C2A0000]    <1> 		mov cx, [arcx]
  3438 00002A3A 8B35[4E2A0000]      <1> 		mov esi, [arsi]
  3439 00002A40 46                  <1> 		inc esi
  3440 00002A41 39DE                <1> 		cmp esi, ebx
  3441 00002A43 7302                <1> 		jae ardn
  3442 00002A45 EBAA                <1> 		jmp arnxt
  3443 00002A47 C3                  <1> 	ardn:	ret
  3444 00002A48 00000000            <1> arbx:	dw 0,0
  3445 00002A4C 0000                <1> arcx:	db 0,0
  3446 00002A4E 00000000            <1> arsi:	dw 0,0
  3447                              <1> 
  3448                              <1> clearbuffer:
  3449 00002A52 BE[268E0000]        <1> 	mov esi, buf2
  3450 00002A57 B030                <1> 	mov al, '0'
  3451 00002A59 81FE[3A8E0000]      <1> clearbuf: cmp esi, numbuf
  3452 00002A5F 7305                <1> 	jae doneclearbuff
  3453 00002A61 8806                <1> 	mov [esi], al
  3454 00002A63 46                  <1> 	inc esi
  3455 00002A64 EBF3                <1> 	jmp clearbuf
  3456                              <1> doneclearbuff: 
  3457 00002A66 C3                  <1> 		ret
  3458                              <1> 
  3459                              <1> convert:
  3460 00002A67 4E                  <1> 	dec esi
  3461 00002A68 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3462                              <1> .lp:
  3463 00002A6A 89DE                <1> 	mov esi, ebx
  3464 00002A6C 81EE09000000        <1> 	sub esi, 9
  3465 00002A72 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3466 00002A78 720A                <1> 	jb .8
  3467 00002A7A 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3468 00002A80 FE06                <1> 	inc byte [esi]
  3469 00002A82 EBE6                <1> 	jmp .lp
  3470 00002A84 46                  <1> .8:	inc esi
  3471 00002A85 81F900E1F505        <1> 	cmp ecx, 100000000
  3472 00002A8B 720A                <1> 	jb .7
  3473 00002A8D 81E900E1F505        <1> 	sub ecx, 100000000
  3474 00002A93 FE06                <1> 	inc byte [esi]
  3475 00002A95 EBD3                <1> 	jmp .lp
  3476 00002A97 46                  <1> .7:	inc esi
  3477 00002A98 81F980969800        <1> 	cmp ecx, 10000000
  3478 00002A9E 720A                <1> 	jb .6
  3479 00002AA0 81E980969800        <1> 	sub ecx, 10000000
  3480 00002AA6 FE06                <1> 	inc byte [esi]
  3481 00002AA8 EBC0                <1> 	jmp .lp
  3482 00002AAA 46                  <1> .6:	inc esi
  3483 00002AAB 81F940420F00        <1> 	cmp ecx, 1000000
  3484 00002AB1 720A                <1> 	jb .5
  3485 00002AB3 81E940420F00        <1> 	sub ecx, 1000000
  3486 00002AB9 FE06                <1> 	inc byte [esi]
  3487 00002ABB EBAD                <1> 	jmp .lp
  3488 00002ABD 46                  <1> .5:	inc esi
  3489 00002ABE 81F9A0860100        <1> 	cmp ecx, 100000
  3490 00002AC4 720A                <1> 	jb .4
  3491 00002AC6 81E9A0860100        <1> 	sub ecx, 100000
  3492 00002ACC FE06                <1> 	inc byte [esi]
  3493 00002ACE EB9A                <1> 	jmp .lp
  3494 00002AD0 46                  <1> .4:	inc esi
  3495 00002AD1 81F910270000        <1> 	cmp ecx, 10000
  3496 00002AD7 720A                <1> 	jb .3
  3497 00002AD9 81E910270000        <1> 	sub ecx, 10000
  3498 00002ADF FE06                <1> 	inc byte [esi]
  3499 00002AE1 EB87                <1> 	jmp .lp
  3500 00002AE3 46                  <1> .3:	inc esi
  3501 00002AE4 81F9E8030000        <1> 	cmp ecx, 1000
  3502 00002AEA 720D                <1> 	jb .2
  3503 00002AEC 81E9E8030000        <1> 	sub ecx, 1000
  3504 00002AF2 FE06                <1> 	inc byte [esi]
  3505 00002AF4 E971FFFFFF          <1> 	jmp .lp
  3506 00002AF9 46                  <1> .2:	inc esi
  3507 00002AFA 81F964000000        <1> 	cmp ecx, 100
  3508 00002B00 720D                <1> 	jb .1
  3509 00002B02 81E964000000        <1> 	sub ecx, 100
  3510 00002B08 FE06                <1> 	inc byte [esi]
  3511 00002B0A E95BFFFFFF          <1> 	jmp .lp
  3512 00002B0F 46                  <1> .1:	inc esi
  3513 00002B10 81F90A000000        <1> 	cmp ecx, 10
  3514 00002B16 720D                <1> 	jb .0
  3515 00002B18 81E90A000000        <1> 	sub ecx, 10
  3516 00002B1E FE06                <1> 	inc byte [esi]
  3517 00002B20 E945FFFFFF          <1> 	jmp .lp
  3518 00002B25 46                  <1> .0:	inc esi
  3519 00002B26 81F901000000        <1> 	cmp ecx, 1
  3520 00002B2C 720D                <1> 	jb .dn
  3521 00002B2E 81E901000000        <1> 	sub ecx, 1
  3522 00002B34 FE06                <1> 	inc byte [esi]
  3523 00002B36 E92FFFFFFF          <1> 	jmp .lp
  3524                              <1> .dn:
  3525 00002B3B C3                  <1> 	ret
  3526                              <1> 
  3527                              <1> 	
  3528                              <1> 
  3529 00002B3C 00<rept>            <1> hexnumber times 8 db 0
  3530 00002B44 202000              <1> hexnumberend db "  ",0
  3531                              <1> 
  3532                              <1> converthex:
  3533                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3534 00002B47 56                  <1> 	push esi
  3535 00002B48 B030                <1> 	mov al, "0"
  3536 00002B4A 39FE                <1> .clearlp: cmp esi, edi
  3537 00002B4C 7305                <1> 	jae .doneclear
  3538 00002B4E 8806                <1> 	mov [esi], al
  3539 00002B50 46                  <1> 	inc esi
  3540 00002B51 EBF7                <1> 	jmp .clearlp
  3541                              <1> .doneclear:
  3542 00002B53 81EE02000000        <1> 	sub esi, 2
  3543 00002B59 89C8                <1> 	mov eax, ecx
  3544                              <1> .loop:
  3545 00002B5B 30FF                <1> 	xor bh, bh
  3546 00002B5D 88C3                <1> 	mov bl, al
  3547 00002B5F 66C1E304            <1> 	shl bx, 4
  3548 00002B63 C0EB04              <1> 	shr bl, 4
  3549 00002B66 86DF                <1> 	xchg bl, bh ;they are backwards
  3550 00002B68 80C330              <1> 	add bl, 48
  3551 00002B6B 80FB39              <1> 	cmp bl, "9"
  3552 00002B6E 7609                <1> 	jbe .goodbl
  3553 00002B70 80EB30              <1> 	sub bl, 48
  3554 00002B73 80EB0A              <1> 	sub bl, 0xA
  3555 00002B76 80C341              <1> 	add bl, "A"
  3556                              <1> .goodbl:
  3557 00002B79 80C730              <1> 	add bh, 48
  3558 00002B7C 80FF39              <1> 	cmp bh, "9"
  3559 00002B7F 7609                <1> 	jbe .goodbh
  3560 00002B81 80EF30              <1> 	sub bh, 48
  3561 00002B84 80EF0A              <1> 	sub bh, 0xA
  3562 00002B87 80C741              <1> 	add bh, "A"
  3563                              <1> .goodbh:
  3564 00002B8A C1E808              <1> 	shr eax, 8
  3565 00002B8D 66891E              <1> 	mov [esi], bx
  3566 00002B90 81EE02000000        <1> 	sub esi, 2
  3567 00002B96 3B3424              <1> 	cmp esi, [esp]
  3568 00002B99 7207                <1> 	jb .done
  3569 00002B9B 3D00000000          <1> 	cmp eax, 0
  3570 00002BA0 75B9                <1> 	jne .loop
  3571                              <1> .done:
  3572 00002BA2 5E                  <1> 	pop esi
  3573 00002BA3 C3                  <1> 	ret
  3574                              <1> 	
  3575                              <1> 	
  3576 00002BA4 00                  <1> smallhex db 0
  3577 00002BA5 01                  <1> firsthexshown db 1
  3578                              <1> showhexsmall:
  3579 00002BA6 C605[A42B0000]01    <1> 	mov byte [smallhex], 1
  3580 00002BAD E808000000          <1> 	call showhex
  3581 00002BB2 C605[A42B0000]00    <1> 	mov byte [smallhex], 0
  3582 00002BB9 C3                  <1> 	ret
  3583                              <1> showhex:
  3584 00002BBA 60                  <1> 	pusha
  3585 00002BBB BE[3C2B0000]        <1> 	mov esi, hexnumber
  3586 00002BC0 BF[442B0000]        <1> 	mov edi, hexnumberend
  3587 00002BC5 E87DFFFFFF          <1> 	call converthex
  3588 00002BCA 803D[A52B0000]01    <1> 	cmp byte [firsthexshown], 1
  3589 00002BD1 7503                <1> 	jne .show
  3590 00002BD3 6631D2              <1> 	xor dx, dx
  3591                              <1> .show:
  3592 00002BD6 803D[A52B0000]03    <1> 	cmp byte [firsthexshown], 3
  3593 00002BDD 750A                <1> 	jne .nonewhexline
  3594 00002BDF BE[B44B0000]        <1> 	mov esi, line
  3595 00002BE4 E813EFFFFF          <1> 	call print
  3596                              <1> .nonewhexline:
  3597 00002BE9 803D[A52B0000]04    <1> 	cmp byte [firsthexshown], 4
  3598 00002BF0 7527                <1> 	jne .notab
  3599 00002BF2 B1A0                <1> 	mov cl, 160
  3600 00002BF4 28D1                <1> 	sub cl, dl
  3601 00002BF6 C0E905              <1> 	shr cl, 5
  3602 00002BF9 C0E105              <1> 	shl cl, 5
  3603 00002BFC 80F900              <1> 	cmp cl, 0
  3604 00002BFF 750F                <1> 	jne .nonewline
  3605 00002C01 BE[B44B0000]        <1> 	mov esi, line
  3606 00002C06 E8F1EEFFFF          <1> 	call print
  3607 00002C0B E909000000          <1> 	jmp .notab
  3608                              <1> .nonewline:
  3609 00002C10 80C20F              <1> 	add dl, 15
  3610 00002C13 C0EA04              <1> 	shr dl, 4
  3611 00002C16 C0E204              <1> 	shl dl, 4
  3612                              <1> .notab:
  3613 00002C19 BE[3C2B0000]        <1> 	mov esi, hexnumber
  3614 00002C1E 803D[A42B0000]01    <1> 	cmp byte [smallhex],1
  3615 00002C25 7506                <1> 	jne .nosmall
  3616 00002C27 81C606000000        <1> 	add esi, 6
  3617                              <1> .nosmall:
  3618 00002C2D 803D[A52B0000]05    <1> 	cmp byte [firsthexshown], 5
  3619 00002C34 750A                <1> 	jne .noquiet
  3620 00002C36 E8AFEEFFFF          <1> 	call printquiet
  3621 00002C3B E918000000          <1> 	jmp .donequiet
  3622                              <1> .noquiet:
  3623 00002C40 803D[A52B0000]06    <1> 	cmp byte [firsthexshown], 6
  3624 00002C47 750A                <1> 	jne .normal
  3625 00002C49 E890EEFFFF          <1> 	call printhighlight
  3626 00002C4E E905000000          <1> 	jmp .donequiet
  3627                              <1> .normal:
  3628 00002C53 E8A4EEFFFF          <1> 	call print
  3629                              <1> .donequiet:
  3630 00002C58 803D[A52B0000]02    <1> 	cmp byte [firsthexshown], 2
  3631 00002C5F 750A                <1> 	jne .shown
  3632 00002C61 BE[B44B0000]        <1> 	mov esi, line
  3633 00002C66 E891EEFFFF          <1> 	call print
  3634                              <1> .shown:
  3635 00002C6B C605[A52B0000]00    <1> 	mov byte [firsthexshown], 0
  3636 00002C72 61                  <1> 	popa
  3637 00002C73 C3                  <1> 	ret
  3638                              <1> 
  3639                              <1> 
  3640 00002C74 303030303030303030- <1> decnumber db "00000000000000"
  3641 00002C7D 3030303030          <1>
  3642 00002C82 2000                <1> decnumberend: db " ",0
  3643                              <1> 
  3644                              <1> showdec: ;;same as showhex, just uses decimal conversion
  3645 00002C84 60                  <1> 	pusha
  3646 00002C85 BF[742C0000]        <1> 	mov edi, decnumber
  3647 00002C8A BE[822C0000]        <1> 	mov esi, decnumberend
  3648                              <1> .clear:
  3649 00002C8F C60730              <1> 	mov byte [edi], '0'
  3650 00002C92 47                  <1> 	inc edi
  3651 00002C93 39F7                <1> 	cmp edi, esi
  3652 00002C95 72F8                <1> 	jb .clear
  3653 00002C97 BF[742C0000]        <1> 	mov edi, decnumber
  3654 00002C9C E8C6FDFFFF          <1> 	call convert
  3655 00002CA1 803D[A52B0000]01    <1> 	cmp byte [firsthexshown], 1
  3656 00002CA8 7503                <1> 	jne .show
  3657 00002CAA 6631D2              <1> 	xor dx, dx
  3658                              <1> .show:
  3659 00002CAD 803D[A52B0000]03    <1> 	cmp byte [firsthexshown], 3
  3660 00002CB4 750A                <1> 	jne .nonewdecline
  3661 00002CB6 BE[B44B0000]        <1> 	mov esi, line
  3662 00002CBB E83CEEFFFF          <1> 	call print
  3663                              <1> .nonewdecline:
  3664 00002CC0 803D[A52B0000]04    <1> 	cmp byte [firsthexshown], 4
  3665 00002CC7 7527                <1> 	jne .notab
  3666 00002CC9 B1A0                <1> 	mov cl, 160
  3667 00002CCB 28D1                <1> 	sub cl, dl
  3668 00002CCD C0E905              <1> 	shr cl, 5
  3669 00002CD0 C0E105              <1> 	shl cl, 5
  3670 00002CD3 80F900              <1> 	cmp cl, 0
  3671 00002CD6 750F                <1> 	jne .nonewline
  3672 00002CD8 BE[B44B0000]        <1> 	mov esi, line
  3673 00002CDD E81AEEFFFF          <1> 	call print
  3674 00002CE2 E909000000          <1> 	jmp .notab
  3675                              <1> .nonewline:
  3676 00002CE7 80C20F              <1> 	add dl, 15
  3677 00002CEA C0EA04              <1> 	shr dl, 4
  3678 00002CED C0E204              <1> 	shl dl, 4
  3679                              <1> .notab:
  3680 00002CF0 BE[742C0000]        <1> 	mov esi, decnumber
  3681 00002CF5 4E                  <1> 	dec esi
  3682                              <1> .sifind:
  3683 00002CF6 46                  <1> 	inc esi
  3684 00002CF7 803E30              <1> 	cmp byte [esi], '0'
  3685 00002CFA 74FA                <1> 	je .sifind
  3686 00002CFC E8FBEDFFFF          <1> 	call print
  3687 00002D01 803D[A52B0000]02    <1> 	cmp byte [firsthexshown], 2
  3688 00002D08 750A                <1> 	jne .shown
  3689 00002D0A BE[B44B0000]        <1> 	mov esi, line
  3690 00002D0F E8E8EDFFFF          <1> 	call print
  3691                              <1> .shown:
  3692 00002D14 C605[A52B0000]00    <1> 	mov byte [firsthexshown], 0
  3693 00002D1B 61                  <1> 	popa
  3694 00002D1C C3                  <1> 	ret
  3695                              <1> 	
  3696                              <1> cnvrthextxt:
  3697 00002D1D 31C9                <1> 	xor ecx, ecx
  3698 00002D1F 31C0                <1> 	xor eax, eax
  3699 00002D21 31D2                <1> 	xor edx, edx
  3700 00002D23 31DB                <1> 	xor ebx, ebx
  3701 00002D25 4E                  <1> 	dec esi
  3702                              <1> .end:
  3703 00002D26 46                  <1> 	inc esi
  3704 00002D27 8A06                <1> 	mov al, [esi]
  3705 00002D29 3C00                <1> 	cmp al, 0
  3706 00002D2B 75F9                <1> 	jne .end
  3707                              <1> .loop:
  3708 00002D2D 4E                  <1> 	dec esi
  3709 00002D2E 8A06                <1> 	mov al, [esi]
  3710 00002D30 3C41                <1> 	cmp al, "A"
  3711 00002D32 7328                <1> 	jae .char
  3712 00002D34 2C30                <1> 	sub al, 48
  3713 00002D36 3C10                <1> 	cmp al, 16
  3714 00002D38 7721                <1> 	ja .done
  3715                              <1> .donechar:
  3716 00002D3A 81FA00000000        <1> 	cmp edx, 0
  3717 00002D40 740E                <1> 	je .noshl
  3718 00002D42 89D3                <1> 	mov ebx, edx
  3719                              <1> .shl:
  3720 00002D44 C1E004              <1> 	shl eax, 4
  3721 00002D47 4B                  <1> 	dec ebx
  3722 00002D48 81FB00000000        <1> 	cmp ebx, 0
  3723 00002D4E 75F4                <1> 	jne .shl
  3724                              <1> .noshl:
  3725 00002D50 42                  <1> 	inc edx
  3726 00002D51 01C1                <1> 	add ecx, eax
  3727 00002D53 81FA08000000        <1> 	cmp edx, 8
  3728 00002D59 72D2                <1> 	jb .loop
  3729                              <1> .done:
  3730 00002D5B C3                  <1> 	ret
  3731                              <1> .char:
  3732 00002D5C 3C46                <1> 	cmp al, "F"
  3733 00002D5E 77FB                <1> 	ja .done
  3734 00002D60 2C41                <1> 	sub al, "A"
  3735 00002D62 040A                <1> 	add al, 0xA
  3736 00002D64 EBD4                <1> 	jmp .donechar
  3737                              <1> 	
  3738                              <1> 	
  3739                              <1> cnvrttxt: 
  3740 00002D66 31C9                <1> 	xor ecx, ecx
  3741 00002D68 31C0                <1> 	xor eax, eax
  3742 00002D6A 31D2                <1> 	xor edx, edx
  3743 00002D6C 31DB                <1> 	xor ebx, ebx
  3744 00002D6E 4E                  <1> 	dec esi
  3745                              <1> .lp:
  3746 00002D6F 46                  <1> 	inc esi
  3747 00002D70 8A06                <1> 	mov al, [esi]
  3748 00002D72 3C00                <1> 	cmp al, 0
  3749 00002D74 75F9                <1> 	jne .lp
  3750 00002D76 4E                  <1> 	dec esi
  3751 00002D77 8A06                <1> 	mov al, [esi]
  3752 00002D79 3C2E                <1> 	cmp al, '.'
  3753 00002D7B 7503                <1> 	jne .dot
  3754 00002D7D 46                  <1> 	inc esi
  3755 00002D7E EBEF                <1> 	jmp .lp
  3756                              <1> .dot:
  3757 00002D80 3C20                <1> 	cmp al, ' '
  3758 00002D82 7404                <1> 	je .zero
  3759 00002D84 3C30                <1> 	cmp al, '0'
  3760 00002D86 7504                <1> 	jne .txtlp
  3761                              <1> .zero: 
  3762 00002D88 39FE                <1> 		cmp esi, edi
  3763 00002D8A 7458                <1> 		je .done
  3764                              <1> .txtlp:
  3765 00002D8C 31C0                <1> 	xor eax, eax
  3766 00002D8E 8A06                <1> 	mov al, [esi]
  3767 00002D90 3C3D                <1> 	cmp al, '='
  3768 00002D92 7450                <1> 	je .done
  3769 00002D94 3C30                <1> 	cmp al, 48
  3770 00002D96 724C                <1> 	jb .done
  3771 00002D98 3C23                <1> 	cmp al, '#'
  3772 00002D9A 7448                <1> 	je .done
  3773 00002D9C 39FE                <1> 	cmp esi, edi
  3774 00002D9E 7244                <1> 	jb .done
  3775 00002DA0 81F900000000        <1> 	cmp ecx, 0
  3776 00002DA6 7708                <1> 	ja .exp
  3777 00002DA8 2C30                <1> .noexp:	sub al, 48
  3778 00002DAA 01C2                <1> 	add edx, eax
  3779 00002DAC 4E                  <1> 	dec esi
  3780 00002DAD 41                  <1> 	inc ecx
  3781 00002DAE EBDC                <1> 	jmp .txtlp
  3782 00002DB0 81F900000000        <1> .exp:	cmp ecx, 0
  3783 00002DB6 74F0                <1> 	je .noexp
  3784 00002DB8 2C30                <1> 	sub al, 48
  3785 00002DBA 51                  <1> 	push ecx
  3786 00002DBB 89C3                <1> .expmul:	mov ebx, eax
  3787 00002DBD 01D8                <1> 	add eax, ebx
  3788 00002DBF 01D8                <1> 	add eax, ebx
  3789 00002DC1 01D8                <1> 	add eax, ebx
  3790 00002DC3 01D8                <1> 	add eax, ebx
  3791 00002DC5 01D8                <1> 	add eax, ebx
  3792 00002DC7 01D8                <1> 	add eax, ebx
  3793 00002DC9 01D8                <1> 	add eax, ebx
  3794 00002DCB 01D8                <1> 	add eax, ebx
  3795 00002DCD 01D8                <1> 	add eax, ebx
  3796 00002DCF 81E901000000        <1> 	sub ecx, 1
  3797 00002DD5 81F900000000        <1> 	cmp ecx, 0
  3798 00002DDB 77DE                <1> 	ja .expmul
  3799 00002DDD 01C2                <1> 	add edx, eax
  3800 00002DDF 59                  <1> 	pop ecx
  3801 00002DE0 4E                  <1> 	dec esi
  3802 00002DE1 41                  <1> 	inc ecx
  3803 00002DE2 EBA8                <1> 	jmp .txtlp
  3804 00002DE4 89D1                <1> .done: mov ecx, edx
  3805 00002DE6 C3                  <1> 	ret
  3806                                      %include "source/programs.asm"
  3807 00002DE7 FF2C                <1> filetypes db 255,44
  3808                              <1> progstart:		;programs start here
  3809                              <1> indexfiles:
  3810 00002DE9 BE[E92D0000]        <1> 	mov esi, progstart
  3811 00002DEE BB[A66F0000]        <1> 	mov ebx, fileindex
  3812 00002DF3 BF[E92D0000]        <1> 	mov edi, progstart
  3813 00002DF8 81EF02000000        <1> 	sub edi, 2
  3814                              <1> indexloop:
  3815 00002DFE 668B0E              <1> 	mov cx, [esi]
  3816                              <1> 	indexloop2:
  3817 00002E01 663B0F              <1> 		cmp cx, [edi]
  3818 00002E04 7424                <1> 		je indexloop2done
  3819 00002E06 81EF02000000        <1> 		sub edi, 2
  3820 00002E0C 81FF[E72D0000]      <1> 		cmp edi, filetypes
  3821 00002E12 73ED                <1> 		jae indexloop2
  3822 00002E14 BF[E92D0000]        <1> 	mov edi, progstart
  3823 00002E19 81EF02000000        <1> 	sub edi, 2
  3824 00002E1F 46                  <1> 	inc esi
  3825 00002E20 81FE[E5420000]      <1> 	cmp esi, batchprogend
  3826 00002E26 734E                <1> 	jae indexloopdone
  3827 00002E28 EBD4                <1> 	jmp indexloop
  3828                              <1> indexloop2done:
  3829 00002E2A 66890B              <1> 	mov [ebx], cx
  3830 00002E2D 81C302000000        <1> 	add ebx, 2
  3831 00002E33 81C602000000        <1> 	add esi, 2
  3832                              <1> 	nameindex:
  3833 00002E39 8A0E                <1> 		mov cl, [esi]
  3834 00002E3B 80F900              <1> 		cmp cl, 0
  3835 00002E3E 7406                <1> 		je nameindexdone
  3836 00002E40 880B                <1> 		mov [ebx], cl
  3837 00002E42 46                  <1> 		inc esi
  3838 00002E43 43                  <1> 		inc ebx
  3839 00002E44 EBF3                <1> 		jmp nameindex
  3840                              <1> 	nameindexdone:
  3841 00002E46 43                  <1> 		inc ebx
  3842 00002E47 66C7030000          <1> 		mov word [ebx], 0
  3843 00002E4C 81C302000000        <1> 		add ebx, 2
  3844 00002E52 46                  <1> 		inc esi
  3845 00002E53 8933                <1> 		mov [ebx], esi
  3846 00002E55 81C304000000        <1> 		add ebx, 4
  3847 00002E5B 66C7030000          <1> 		mov word [ebx], 0
  3848 00002E60 81C302000000        <1> 		add ebx, 2
  3849 00002E66 81FB[A6730000]      <1> 		cmp ebx, fileindexend
  3850 00002E6C 7308                <1> 		jae indexloopdone
  3851 00002E6E 81C601000000        <1> 		add esi, 1
  3852 00002E74 EB88                <1> 		jmp indexloop
  3853 00002E76 C605[7E2E0000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  3854 00002E7D C3                  <1> 		ret
  3855                              <1> 
  3856 00002E7E 00                  <1> indexdone db 0
  3857                              <1> %include 'source/programs/_comment.asm' ;#
  3858 00002E7F FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  3859 00002E83 C3                  <2> 	ret 
  3860                              <1> %include 'source/programs/_math.asm' ;!
  3861 00002E84 FF2C2100            <2> db 255,44,"!",0
  3862                              <2> 	num:	
  3863 00002E88 E8C5FBFFFF          <2> 		call clearbuffer
  3864 00002E8D C605[0E310000]00    <2> 		mov byte [decimal], 0
  3865 00002E94 C605[0F310000]00    <2> 		mov byte [decimal2], 0
  3866 00002E9B 8B35[93290000]      <2> 		mov esi, [currentcommandloc]
  3867 00002EA1 31C0                <2> 		xor eax, eax
  3868 00002EA3 31C9                <2> 		xor ecx, ecx
  3869 00002EA5 31DB                <2> 		xor ebx, ebx
  3870 00002EA7 8A06                <2> 	num2:	mov al, [esi]
  3871 00002EA9 3C2B                <2> 		cmp al, '+'
  3872 00002EAB 741B                <2> 		je operatorfound
  3873 00002EAD 3C2D                <2> 		cmp al, '-'
  3874 00002EAF 7417                <2> 		je operatorfound
  3875 00002EB1 3C2A                <2> 		cmp al, '*'
  3876 00002EB3 7413                <2> 		je operatorfound
  3877 00002EB5 3C2F                <2> 		cmp al, '/'
  3878 00002EB7 740F                <2> 		je operatorfound
  3879 00002EB9 3C5E                <2> 		cmp al, '^'
  3880 00002EBB 740B                <2> 		je operatorfound
  3881 00002EBD 46                  <2> 		inc esi
  3882 00002EBE 3C00                <2> 		cmp al, 0
  3883 00002EC0 0F8420F8FFFF        <2> 		je near nwcmd
  3884 00002EC6 EBDF                <2> 		jmp num2
  3885 00002EC8 50                  <2> 	operatorfound: push eax
  3886 00002EC9 30E4                <2> 		xor ah, ah
  3887 00002ECB 8826                <2> 		mov [esi], ah
  3888 00002ECD 89F7                <2> 		mov edi, esi
  3889 00002ECF 46                  <2> 		inc esi
  3890 00002ED0 8A06                <2> 		mov al, [esi]
  3891 00002ED2 3C25                <2> 		cmp al, '%'
  3892 00002ED4 0F8462000000        <2> 		je near resultnum1
  3893                              <2> 	varnum2: 
  3894 00002EDA 57                  <2> 		push edi
  3895 00002EDB E8A4000000          <2> 		call checkdecimal
  3896 00002EE0 5F                  <2> 		pop edi
  3897 00002EE1 E880FEFFFF          <2> 		call cnvrttxt
  3898                              <2> 	vrnm2:
  3899 00002EE6 89CB                <2> 		mov ebx, ecx
  3900 00002EE8 53                  <2> 		push ebx
  3901 00002EE9 E864FBFFFF          <2> 		call clearbuffer
  3902 00002EEE 8B35[93290000]      <2> 		mov esi, [currentcommandloc]
  3903 00002EF4 89F7                <2> 		mov edi, esi
  3904 00002EF6 46                  <2> 		inc esi
  3905 00002EF7 8A06                <2> 		mov al, [esi]
  3906 00002EF9 3C25                <2> 		cmp al, '%'
  3907 00002EFB 0F844F000000        <2> 		je near resultnum2
  3908                              <2> 	varnum4: 
  3909 00002F01 57                  <2> 		push edi
  3910 00002F02 E869000000          <2> 		call checkdecimal2
  3911 00002F07 5F                  <2> 		pop edi
  3912 00002F08 E859FEFFFF          <2> 		call cnvrttxt
  3913                              <2> 	vrnm4:
  3914 00002F0D 5B                  <2> 		pop ebx
  3915 00002F0E 58                  <2> 		pop eax
  3916 00002F0F 3C2B                <2> 		cmp al, '+'
  3917 00002F11 0F849B000000        <2> 		je near plusnum
  3918 00002F17 3C2D                <2> 		cmp al, '-'
  3919 00002F19 0F849F000000        <2> 		je near subnum
  3920 00002F1F 3C2A                <2> 		cmp al, '*'
  3921 00002F21 0F84A3000000        <2> 		je near mulnum
  3922 00002F27 3C2F                <2> 		cmp al, '/'
  3923 00002F29 0F84B1000000        <2> 		je near divnum
  3924 00002F2F 3C5E                <2> 		cmp al, '^'
  3925 00002F31 0F84CE000000        <2> 		je near expnum
  3926 00002F37 E9AAF7FFFF          <2> 		jmp nwcmd
  3927                              <2> 	resultnum1:
  3928 00002F3C 8A0D[10310000]      <2> 		mov cl, [decimalresult]
  3929 00002F42 880D[0E310000]      <2> 		mov [decimal], cl
  3930 00002F48 8B0D[11310000]      <2> 		mov ecx, [result]
  3931 00002F4E EB96                <2> 		jmp vrnm2
  3932                              <2> 	resultnum2:
  3933 00002F50 8A0D[0E310000]      <2> 		mov cl, [decimal]
  3934 00002F56 880D[0F310000]      <2> 		mov [decimal2], cl
  3935 00002F5C 8A0D[10310000]      <2> 		mov cl, [decimalresult]
  3936 00002F62 880D[0E310000]      <2> 		mov [decimal], cl
  3937 00002F68 8B0D[11310000]      <2> 		mov ecx, [result]
  3938 00002F6E EB9D                <2> 		jmp vrnm4
  3939                              <2> 	checkdecimal2:
  3940 00002F70 8A25[0E310000]      <2> 		mov ah, [decimal]
  3941 00002F76 8825[0F310000]      <2> 		mov [decimal2], ah
  3942 00002F7C 30E4                <2> 		xor ah, ah
  3943 00002F7E 8825[0E310000]      <2> 		mov [decimal], ah
  3944                              <2> 	checkdecimal:
  3945 00002F84 89F7                <2> 		mov edi, esi
  3946                              <2> 	chkdec1:
  3947 00002F86 8A07                <2> 		mov al, [edi]
  3948 00002F88 3C2E                <2> 		cmp al, '.'
  3949 00002F8A 0F840B000000        <2> 		je near fnddec
  3950 00002F90 3C00                <2> 		cmp al, 0
  3951 00002F92 0F8419000000        <2> 		je near nodecimal
  3952 00002F98 47                  <2> 		inc edi
  3953 00002F99 EBEB                <2> 		jmp chkdec1
  3954                              <2> 	fnddec:
  3955 00002F9B 8A4701              <2> 		mov al, [edi + 1]
  3956 00002F9E 8807                <2> 		mov [edi], al
  3957 00002FA0 3C00                <2> 		cmp al, 0
  3958 00002FA2 0F8409000000        <2> 		je near nodecimal
  3959 00002FA8 FE05[0E310000]      <2> 		inc byte [decimal]
  3960 00002FAE 47                  <2> 		inc edi
  3961 00002FAF EBEA                <2> 		jmp fnddec
  3962                              <2> 	nodecimal:
  3963 00002FB1 C3                  <2> 		ret
  3964                              <2> 	plusnum:
  3965 00002FB2 E815010000          <2> 		call decaddfix
  3966 00002FB7 01D9                <2> 		add ecx, ebx
  3967 00002FB9 E98A000000          <2> 		jmp retnum
  3968                              <2> 	subnum:
  3969 00002FBE E809010000          <2> 		call decaddfix
  3970 00002FC3 29D9                <2> 		sub ecx, ebx
  3971 00002FC5 E97E000000          <2> 		jmp retnum
  3972                              <2> 	mulnum:
  3973 00002FCA A0[0F310000]        <2> 		mov al, [decimal2]
  3974 00002FCF 0005[0E310000]      <2> 		add [decimal], al
  3975 00002FD5 89C8                <2> 		mov eax, ecx
  3976 00002FD7 F7E3                <2> 		mul ebx
  3977 00002FD9 89C1                <2> 		mov ecx, eax
  3978 00002FDB E968000000          <2> 		jmp retnum
  3979                              <2> 	divnum:
  3980 00002FE0 E8E7000000          <2> 		call decaddfix
  3981 00002FE5 30C0                <2> 		xor al, al
  3982 00002FE7 A2[0E310000]        <2> 		mov [decimal], al
  3983 00002FEC 31D2                <2> 		xor edx, edx
  3984 00002FEE 89C8                <2> 		mov eax, ecx
  3985 00002FF0 81FB00000000        <2> 		cmp ebx, 0
  3986 00002FF6 0F844C000000        <2> 		je near retnum
  3987 00002FFC F7F3                <2> 		div ebx
  3988 00002FFE 89C1                <2> 		mov ecx, eax
  3989 00003000 E943000000          <2> 		jmp retnum
  3990                              <2> 	expnum:
  3991 00003005 8A15[0E310000]      <2> 		mov dl, [decimal]
  3992 0000300B 8815[0F310000]      <2> 		mov [decimal2], dl
  3993 00003011 31D2                <2> 		xor edx, edx
  3994 00003013 89C8                <2> 		mov eax, ecx
  3995 00003015 89D9                <2> 		mov ecx, ebx
  3996 00003017 89C3                <2> 		mov ebx, eax
  3997 00003019 81F900000000        <2> 		cmp ecx, 0
  3998 0000301F 7422                <2> 		je noexpnum
  3999 00003021 49                  <2> 		dec ecx
  4000 00003022 81F900000000        <2> 		cmp ecx, 0
  4001 00003028 7412                <2> 		je noexpnumlp
  4002 0000302A F7E3                <2> 	expnumlp: mul ebx
  4003 0000302C 8A15[0F310000]      <2> 		mov dl, [decimal2]
  4004 00003032 0015[0E310000]      <2> 		add [decimal], dl
  4005 00003038 31D2                <2> 		xor edx, edx
  4006 0000303A E2EE                <2> 		loop expnumlp
  4007                              <2> 	noexpnumlp:
  4008 0000303C 89C1                <2> 		mov ecx, eax
  4009 0000303E E905000000          <2> 		jmp retnum
  4010                              <2> 	noexpnum:
  4011 00003043 B901000000          <2> 		mov ecx, 1
  4012                              <2> 	retnum: 
  4013 00003048 BE[3A8E0000]        <2> 		mov esi, numbuf
  4014 0000304D 890D[11310000]      <2> 		mov [result], ecx
  4015 00003053 E80FFAFFFF          <2> 		call convert
  4016 00003058 BE[3A8E0000]        <2> 		mov esi, numbuf
  4017 0000305D 8A25[0E310000]      <2> 		mov ah, [decimal]
  4018 00003063 8825[10310000]      <2> 		mov [decimalresult], ah
  4019 00003069 80FC00              <2> 		cmp ah, 0
  4020 0000306C 0F8425000000        <2> 		je near noputdecimal
  4021                              <2> 	putdecimal:
  4022 00003072 4E                  <2> 		dec esi
  4023 00003073 FECC                <2> 		dec ah
  4024 00003075 80FC00              <2> 		cmp ah, 0
  4025 00003078 0F87F4FFFFFF        <2> 		ja near putdecimal
  4026 0000307E 4E                  <2> 		dec esi
  4027 0000307F 8A06                <2> 		mov al, [esi]
  4028 00003081 C6062E              <2> 		mov byte [esi], '.'
  4029                              <2> 	decputloop:
  4030 00003084 4E                  <2> 		dec esi
  4031 00003085 8A26                <2> 		mov ah, [esi]
  4032 00003087 8806                <2> 		mov [esi], al
  4033 00003089 88E0                <2> 		mov al, ah
  4034 0000308B 81FE[268E0000]      <2> 		cmp esi, buf2
  4035 00003091 0F87EDFFFFFF        <2> 		ja near decputloop
  4036                              <2> 	noputdecimal:
  4037 00003097 BE[268E0000]        <2> 		mov esi, buf2
  4038 0000309C E809000000          <2> 		call chkadd
  4039 000030A1 E940F6FFFF          <2> 		jmp nwcmd
  4040 000030A6 00000000            <2> edxnumbuf dw 0,0
  4041 000030AA 8A06                <2> 	chkadd: mov al, [esi]
  4042 000030AC 3C30                <2> 		cmp al, '0'
  4043 000030AE 750C                <2> 		jne dnadd
  4044 000030B0 46                  <2> 		inc esi
  4045 000030B1 81FE[3A8E0000]      <2> 		cmp esi, numbuf
  4046 000030B7 7402                <2> 		je dnaddm1
  4047 000030B9 EBEF                <2> 		jmp chkadd
  4048 000030BB 4E                  <2> 	dnaddm1: dec esi
  4049 000030BC E83BEAFFFF          <2> 	dnadd:	call print
  4050 000030C1 BE[B44B0000]        <2> 		mov esi, line
  4051 000030C6 E831EAFFFF          <2> 		call print
  4052 000030CB C3                  <2> 		ret
  4053                              <2> 		
  4054                              <2> 	decaddfix:
  4055 000030CC A0[0F310000]        <2> 		mov al, [decimal2]
  4056 000030D1 8A25[0E310000]      <2> 		mov ah, [decimal]
  4057 000030D7 38E0                <2> 		cmp al, ah
  4058 000030D9 7432                <2> 		je gooddecadd
  4059 000030DB 38E0                <2> 		cmp al, ah
  4060 000030DD 721A                <2> 		jb lowdecadd
  4061                              <2> 	highdecadd:
  4062 000030DF FEC4                <2> 		inc ah
  4063 000030E1 89CA                <2> 		mov edx, ecx
  4064 000030E3 C1E103              <2> 		shl ecx, 3
  4065 000030E6 01D1                <2> 		add ecx, edx
  4066 000030E8 01D1                <2> 		add ecx, edx
  4067 000030EA 38E0                <2> 		cmp al, ah
  4068 000030EC 77F1                <2> 		ja highdecadd
  4069 000030EE 8825[0E310000]      <2> 		mov [decimal], ah
  4070 000030F4 E914000000          <2> 		jmp gooddecadd
  4071                              <2> 	lowdecadd:
  4072 000030F9 FEC0                <2> 		inc al
  4073 000030FB 89DA                <2> 		mov edx, ebx
  4074 000030FD C1E303              <2> 		shl ebx, 3
  4075 00003100 01D3                <2> 		add ebx, edx
  4076 00003102 01D3                <2> 		add ebx, edx
  4077 00003104 38E0                <2> 		cmp al, ah
  4078 00003106 72F1                <2> 		jb lowdecadd
  4079 00003108 A2[0E310000]        <2> 		mov [decimal], al
  4080                              <2> 	gooddecadd:
  4081 0000310D C3                  <2> 		ret
  4082                              <2> 		
  4083 0000310E 00                  <2> decimal db 0
  4084 0000310F 00                  <2> decimal2 db 0
  4085 00003110 00                  <2> decimalresult db 0
  4086 00003111 00000000            <2> result dd 0
  4087                              <1> %include 'source/programs/_variables.asm' ;% and $
  4088 00003115 FF2C2500            <2> db 255,44,"%",0
  4089                              <2> 	ans:
  4090 00003119 BE[268E0000]        <2> 		mov esi, buf2
  4091 0000311E E887FFFFFF          <2> 		call chkadd
  4092 00003123 C3                  <2> 		ret
  4093                              <2> 		
  4094 00003124 FF2C2400            <2> db 255,44,"$",0
  4095 00003128 8B35[93290000]      <2> var: mov esi, [currentcommandloc]
  4096 0000312E BB[26760000]        <2> 	mov ebx, variables
  4097 00003133 8A06                <2> lkeq:	mov al, [esi]
  4098 00003135 3C3D                <2> 	cmp al, '='
  4099 00003137 741B                <2> 	je eqfnd	;is there an '=' sign?
  4100 00003139 3C00                <2> 	cmp al, 0
  4101 0000313B 7403                <2> 	je echovars
  4102 0000313D 46                  <2> 	inc esi
  4103 0000313E EBF3                <2> 	jmp lkeq
  4104 00003140 BE[26760000]        <2> echovars: mov esi, variables
  4105 00003145 BB[26860000]        <2> 	mov ebx, varend
  4106 0000314A B105                <2> 	mov cl, 5
  4107 0000314C B504                <2> 	mov ch, 4
  4108 0000314E E89EF8FFFF          <2> 	call array
  4109 00003153 C3                  <2> 	ret
  4110 00003154 46                  <2> eqfnd:	inc esi
  4111 00003155 8A06                <2> 	mov al, [esi]
  4112 00003157 3C00                <2> 	cmp al, 0
  4113 00003159 7410                <2> 	je readvar
  4114 0000315B 8B35[93290000]      <2> 	mov esi, [currentcommandloc]
  4115 00003161 BB[26760000]        <2> 	mov ebx, variables
  4116 00003166 E919000000          <2> 	jmp seek
  4117                              <2> readvar:
  4118 0000316B B00A                <2> 	mov al, 10
  4119 0000316D 66BB0700            <2> 	mov bx, 7
  4120 00003171 C605[471F0000]00    <2> 	mov byte [commandedit], 0
  4121 00003178 BF[268E0000]        <2> 	mov edi, buftxtend
  4122 0000317D E864EAFFFF          <2> 	call rdprint
  4123 00003182 EBA4                <2> 	jmp var
  4124 00003184 668B03              <2> seek:	mov ax, [ebx]
  4125 00003187 B105                <2> 	mov cl, 5
  4126 00003189 B504                <2> 	mov ch, 4
  4127 0000318B 663D0000            <2> 	cmp ax, 0
  4128 0000318F 0F845B000000        <2> 	je near save
  4129 00003195 6639C8              <2> 	cmp ax, cx
  4130 00003198 7403                <2> 	je skfnd
  4131 0000319A 43                  <2> 	inc ebx
  4132 0000319B EBE7                <2> 	jmp seek
  4133 0000319D 8B35[93290000]      <2> skfnd:	mov esi, [currentcommandloc]
  4134 000031A3 46                  <2> 	inc esi
  4135 000031A4 81C302000000        <2> 	add ebx, 2
  4136 000031AA 89DF                <2> 	mov edi, ebx
  4137 000031AC B13D                <2> 	mov cl, '='
  4138 000031AE E81FF8FFFF          <2> 	call cndtest
  4139 000031B3 3C01                <2> 	cmp al, 1	
  4140 000031B5 7418                <2> 	je varfnd
  4141 000031B7 89FB                <2> 	mov ebx, edi
  4142 000031B9 8B35[93290000]      <2> 	mov esi, [currentcommandloc]
  4143 000031BF 668B03              <2> 	mov ax, [ebx]
  4144 000031C2 663D0000            <2> 	cmp ax, 0
  4145 000031C6 0F8424000000        <2> 	je near save
  4146 000031CC 43                  <2> 	inc ebx
  4147 000031CD EBB5                <2> 	jmp seek
  4148 000031CF 8A03                <2> varfnd:	mov al, [ebx]
  4149 000031D1 3C04                <2> 	cmp al, 4
  4150 000031D3 7404                <2> 	je save2
  4151 000031D5 4B                  <2> 	dec ebx
  4152 000031D6 4E                  <2> 	dec esi
  4153 000031D7 EBF6                <2> 	jmp varfnd
  4154 000031D9 4B                  <2> save2:	dec ebx
  4155 000031DA 4E                  <2> 	dec esi
  4156 000031DB 8A03                <2> 	mov al, [ebx]
  4157 000031DD 3C05                <2> 	cmp al, 5
  4158 000031DF 7402                <2> 	je remove
  4159 000031E1 EBEC                <2> 	jmp varfnd
  4160 000031E3 8A03                <2> remove: mov al, [ebx]
  4161 000031E5 3C00                <2> 	cmp al, 0
  4162 000031E7 749B                <2> 	je seek
  4163 000031E9 30C0                <2> 	xor al, al
  4164 000031EB 8803                <2> 	mov [ebx], al
  4165 000031ED 43                  <2> 	inc ebx
  4166 000031EE EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4167 000031F0 8B35[93290000]      <2> save:	mov esi, [currentcommandloc]
  4168 000031F6 43                  <2> 	inc ebx
  4169 000031F7 B005                <2> 	mov al, 5
  4170 000031F9 B404                <2> 	mov ah, 4
  4171 000031FB 668903              <2> 	mov [ebx], ax
  4172 000031FE 43                  <2> 	inc ebx
  4173 000031FF 43                  <2> svhere:	inc ebx
  4174 00003200 46                  <2> 	inc esi
  4175 00003201 8A06                <2> 	mov al, [esi]
  4176 00003203 3C00                <2> 	cmp al, 0
  4177 00003205 0F844A000000        <2> 	je near svdone
  4178 0000320B 3C25                <2> 	cmp al, '%'
  4179 0000320D 7404                <2> 	je ans2
  4180 0000320F 8803                <2> 	mov [ebx], al	
  4181 00003211 EBEC                <2> 	jmp svhere
  4182 00003213 56                  <2> ans2:	push esi
  4183 00003214 BE[268E0000]        <2> 	mov esi, buf2
  4184 00003219 E823000000          <2> 	call ansfnd
  4185 0000321E E803000000          <2> 	call anscp
  4186 00003223 5E                  <2> 	pop esi
  4187 00003224 EBD9                <2> 	jmp svhere
  4188 00003226 8A06                <2> anscp:	mov al, [esi]
  4189 00003228 8803                <2> 	mov [ebx], al
  4190 0000322A 81FE[3A8E0000]      <2> 	cmp esi, numbuf
  4191 00003230 74CD                <2> 	je svhere
  4192 00003232 3C00                <2> 	cmp al, 0
  4193 00003234 74C9                <2> 	je svhere
  4194 00003236 43                  <2> 	inc ebx
  4195 00003237 46                  <2> 	inc esi
  4196 00003238 EBEC                <2> 	jmp anscp
  4197 0000323A 5E                  <2> ansnf:	pop esi
  4198 0000323B 8A06                <2> 	mov al, [esi]
  4199 0000323D 8803                <2> 	mov [ebx], al
  4200 0000323F EBBE                <2> 	jmp svhere
  4201 00003241 46                  <2> ansfnd:	inc esi
  4202 00003242 81FE[398E0000]      <2> 	cmp esi, numbuf - 1
  4203 00003248 740A                <2> 	je fndans
  4204 0000324A 8A06                <2> 	mov al, [esi]
  4205 0000324C 3C00                <2> 	cmp al, 0
  4206 0000324E 74EA                <2> 	je ansnf
  4207 00003250 3C30                <2> 	cmp al, '0'
  4208 00003252 74ED                <2> 	je ansfnd
  4209                              <2> fndans:
  4210 00003254 C3                  <2> 	ret
  4211 00003255 30C0                <2> svdone:	xor al, al
  4212 00003257 8803                <2> 	mov [ebx], al
  4213 00003259 C3                  <2> 	ret
  4214                              <1> %include 'source/programs/_run.asm' ;./
  4215                              <2> 
  4216 0000325A 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4217 0000325E FF2C2E2F00          <2> 	db 255,44,"./",0
  4218                              <2> rundiskprog:
  4219 00003263 8B3D[93290000]      <2> 	mov edi, [currentcommandloc]
  4220 00003269 81C702000000        <2> 	add edi, 2
  4221 0000326F BE00004000          <2> 	mov esi, 0x400000
  4222 00003274 E84E170000          <2> 	call loadfile
  4223 00003279 81FA94010000        <2> 	cmp edx, 404
  4224 0000327F 746A                <2> 	je noprogfound
  4225 00003281 BB00004000          <2> 	mov ebx, 0x400000
  4226 00003286 A1[5A320000]        <2> 	mov eax, [elfstart]
  4227 0000328B 3903                <2> 	cmp [ebx], eax
  4228 0000328D 0F8437000000        <2> 	je near runelf
  4229 00003293 66813B4558          <2> 	cmp word [ebx], "EX"
  4230 00003298 7577                <2> 	jne progbatchfound
  4231 0000329A 81C302000000        <2> 	add ebx, 2
  4232 000032A0 8B3D[93290000]      <2> 	mov edi, [currentcommandloc]
  4233 000032A6 81C702000000        <2> 	add edi, 2
  4234                              <2> findspaceprog:
  4235 000032AC 8A07                <2> 	mov al, [edi]
  4236 000032AE 47                  <2> 	inc edi
  4237 000032AF 3C20                <2> 	cmp al, " "
  4238 000032B1 75F9                <2> 	jne findspaceprog
  4239                              <2> findnonspaceprog:
  4240 000032B3 8A07                <2> 	mov al, [edi]
  4241 000032B5 47                  <2> 	inc edi
  4242 000032B6 3C20                <2> 	cmp al, " "
  4243 000032B8 74F9                <2> 	je findnonspaceprog
  4244 000032BA 4F                  <2> 	dec edi
  4245 000032BB 8925[A6730000]      <2> 	mov [previousstack], esp
  4246 000032C1 FFD3                <2> 	call ebx
  4247 000032C3 8B25[A6730000]      <2> 	mov esp, [previousstack]
  4248 000032C9 C3                  <2> 	ret
  4249                              <2> runelf:
  4250 000032CA 8B3D[93290000]      <2> 	mov edi, [currentcommandloc]
  4251 000032D0 81C702000000        <2> 	add edi, 2
  4252 000032D6 81C380000000        <2> 	add ebx, 0x80
  4253 000032DC 8925[A6730000]      <2> 	mov [previousstack], esp
  4254 000032E2 FFD3                <2> 	call ebx
  4255 000032E4 8B25[A6730000]      <2> 	mov esp, [previousstack]
  4256 000032EA C3                  <2> 	ret
  4257                              <2> noprogfound:
  4258 000032EB BE[734B0000]        <2> 	mov esi, notfound1
  4259 000032F0 E807E8FFFF          <2> 	call print
  4260 000032F5 8B35[93290000]      <2> 	mov esi, [currentcommandloc]
  4261 000032FB 81C602000000        <2> 	add esi, 2
  4262 00003301 E8F6E7FFFF          <2> 	call print
  4263 00003306 BE[7B4B0000]        <2> 	mov esi, notfound2
  4264 0000330B E8ECE7FFFF          <2> 	call print
  4265 00003310 C3                  <2> 	ret
  4266                              <2> progbatchfound:
  4267 00003311 BF00004000          <2> 		mov edi, 0x400000
  4268 00003316 C605[20760000]01    <2> 		mov byte [BATCHISON], 1
  4269                              <2> 	batchrunloop:
  4270 0000331D E8A1F3FFFF          <2> 		call buftxtclear
  4271 00003322 BE[268A0000]        <2> 		mov esi, buftxt
  4272 00003327 8935[93290000]      <2> 		mov [currentcommandloc], esi
  4273                              <2> 	batchrunloop2:
  4274 0000332D B10A                <2> 		mov cl, 10
  4275 0000332F B50D                <2> 		mov ch, 13
  4276 00003331 380F                <2> 		cmp [edi], cl
  4277 00003333 0F8419000000        <2> 		je near nxtbatchrunline
  4278 00003339 382F                <2> 		cmp [edi], ch
  4279 0000333B 0F8411000000        <2> 		je near nxtbatchrunline
  4280 00003341 803F00              <2> 		cmp byte [edi], 0
  4281 00003344 0F8408000000        <2> 		je near nxtbatchrunline
  4282 0000334A 8A07                <2> 		mov al, [edi]
  4283 0000334C 8806                <2> 		mov [esi], al
  4284 0000334E 46                  <2> 		inc esi
  4285 0000334F 47                  <2> 		inc edi
  4286 00003350 EBDB                <2> 		jmp batchrunloop2
  4287                              <2> 	nxtbatchrunline:
  4288 00003352 47                  <2> 		inc edi
  4289 00003353 380F                <2> 		cmp [edi], cl
  4290 00003355 74FB                <2> 		je nxtbatchrunline
  4291 00003357 382F                <2> 		cmp [edi], ch
  4292 00003359 74F7                <2> 		je nxtbatchrunline
  4293 0000335B 893D[B9330000]      <2> 		mov [batchedi], edi
  4294 00003361 893D[1C760000]      <2> 		mov [BATCHPOS], edi
  4295 00003367 C60600              <2> 		mov byte [esi], 0
  4296 0000336A BE[268A0000]        <2> 		mov esi, buftxt
  4297 0000336F 803E00              <2> 		cmp byte [esi], 0
  4298 00003372 0F8439000000        <2> 		je near nobatchfoundrun
  4299 00003378 31DB                <2> 		xor ebx, ebx
  4300 0000337A 8A1D[B7750000]      <2> 		mov bl, [IFON]
  4301 00003380 80FB00              <2> 		cmp bl, 0
  4302 00003383 0F8534000000        <2> 		jne near iftestbatch
  4303                              <2> 	doneiftest:
  4304 00003389 803D[8F340000]00    <2> 		cmp byte [runnextline], 0
  4305 00003390 0F8405000000        <2> 		je near noruniftest
  4306 00003396 E822F5FFFF          <2> 		call run
  4307                              <2> 	noruniftest:
  4308 0000339B C605[8F340000]01    <2> 		mov byte [runnextline], 1
  4309 000033A2 8B3D[B9330000]      <2> 		mov edi, [batchedi]
  4310 000033A8 803F00              <2> 		cmp byte [edi], 0
  4311 000033AB 0F856CFFFFFF        <2> 		jne near batchrunloop
  4312                              <2> 	nobatchfoundrun:
  4313 000033B1 C605[20760000]00    <2> 		mov byte [BATCHISON], 0
  4314 000033B8 C3                  <2> 		ret
  4315                              <2> 	
  4316 000033B9 00000000            <2> batchedi dd 0	
  4317                              <2> 	
  4318                              <2> 	iftestbatch:
  4319 000033BD BE[B8750000]        <2> 		mov esi, IFTRUE
  4320 000033C2 01DE                <2> 		add esi, ebx
  4321 000033C4 803E00              <2> 		cmp byte [esi], 0
  4322 000033C7 0F85BCFFFFFF        <2> 		jne near doneiftest
  4323 000033CD 881D[90340000]      <2> 		mov [iffalsebuf], bl
  4324 000033D3 803D[21760000]01    <2> 		cmp byte [LOOPON], 1
  4325 000033DA 0F8513000000        <2> 		jne near fifindbatch
  4326 000033E0 E938FFFFFF          <2> 		jmp batchrunloop
  4327                              <2> 	elsetestbatch:
  4328 000033E5 C60601              <2> 		mov byte [esi], 1
  4329 000033E8 81C705000000        <2> 		add edi, 5
  4330 000033EE E92AFFFFFF          <2> 		jmp batchrunloop
  4331                              <2> 	fifindbatch:
  4332 000033F3 66B96966            <2> 		mov cx, "if"
  4333 000033F7 66B86669            <2> 		mov ax, "fi"
  4334 000033FB 663907              <2> 		cmp [edi], ax
  4335 000033FE 0F8424000000        <2> 		je near fifoundbatch
  4336 00003404 66390F              <2> 		cmp [edi], cx
  4337 00003407 0F8465000000        <2> 		je near iffoundbatch
  4338 0000340D 803F00              <2> 		cmp byte [edi], 0
  4339 00003410 0F8412000000        <2> 		je near fifoundbatch
  4340 00003416 B8656C7365          <2> 		mov eax, "else"
  4341 0000341B 3907                <2> 		cmp [edi], eax
  4342 0000341D 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4343 00003423 E973FFFFFF          <2> 		jmp noruniftest
  4344                              <2> 	fifoundbatch:
  4345 00003428 81C702000000        <2> 		add edi, 2
  4346 0000342E B00A                <2> 		mov al, 10
  4347 00003430 3807                <2> 		cmp [edi], al
  4348 00003432 0F840B000000        <2> 		je near goodfibatch
  4349 00003438 803F00              <2> 		cmp byte [edi], 0
  4350 0000343B 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4351 00003441 EBB0                <2> 		jmp fifindbatch
  4352                              <2> 	goodfibatch:
  4353 00003443 B001                <2> 		mov al, 1
  4354 00003445 2805[B7750000]      <2> 		sub [IFON], al 
  4355 0000344B A0[B7750000]        <2> 		mov al, [IFON]
  4356 00003450 8A1D[90340000]      <2> 		mov bl, [iffalsebuf]
  4357 00003456 38D8                <2> 		cmp al, bl
  4358 00003458 7799                <2> 		ja fifindbatch
  4359 0000345A 8B35[93290000]      <2> 		mov esi, [currentcommandloc]
  4360 00003460 81EF02000000        <2> 		sub edi, 2
  4361 00003466 C605[8F340000]00    <2> 		mov byte [runnextline], 0
  4362 0000346D E9ABFEFFFF          <2> 		jmp batchrunloop
  4363                              <2> 	iffoundbatch:
  4364 00003472 B020                <2> 		mov al, ' '
  4365 00003474 81C702000000        <2> 		add edi, 2
  4366 0000347A 3807                <2> 		cmp [edi], al
  4367 0000347C 0F8571FFFFFF        <2> 		jne near fifindbatch
  4368 00003482 B001                <2> 		mov al, 1
  4369 00003484 0005[B7750000]      <2> 		add [IFON], al
  4370 0000348A E964FFFFFF          <2> 		jmp fifindbatch
  4371                              <2> 		
  4372                              <2> 		
  4373 0000348F 01                  <2> runnextline db 1
  4374 00003490 00                  <2> iffalsebuf db 0
  4375                              <2> 
  4376 00003491 C3                  <2> notbatch: ret 
  4377                              <1> 
  4378                              <1> %ifdef rtl8139.included
  4379                              <1> 	%include 'source/programs/arp.asm'
  4380                              <1> %endif
  4381                              <1> 
  4382                              <1> %include 'source/programs/batch.asm'
  4383 00003492 FF2C626174636800    <2> db 255,44,"batch",0
  4384                              <2> 	batchst: 
  4385 0000349A 8B3D[93290000]      <2> 		mov edi, [currentcommandloc]
  4386 000034A0 81C706000000        <2> 		add edi, 6
  4387 000034A6 803F00              <2> 		cmp byte [edi], 0
  4388 000034A9 0F846D000000        <2> 		je near nonamefound
  4389 000034AF BE00004000          <2> 		mov esi, 0x400000
  4390 000034B4 E80E150000          <2> 		call loadfile
  4391 000034B9 89D0                <2> 		mov eax, edx
  4392 000034BB 3D94010000          <2> 		cmp eax, 404
  4393 000034C0 7465                <2> 		je goodbatchname
  4394 000034C2 BE[CD340000]        <2> 		mov esi, badbatchname
  4395 000034C7 E830E6FFFF          <2> 		call print
  4396 000034CC C3                  <2> 		ret
  4397 000034CD 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4398 000034D6 20616C726561647920- <2>
  4399 000034DF 657869737473210A00  <2>
  4400 000034E8 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4401 000034F1 746F20747970652061- <2>
  4402 000034FA 206E616D6520616674- <2>
  4403 00003503 65722074686520636F- <2>
  4404 0000350C 6D6D616E642E0A00    <2>
  4405 00003514 00000000            <2> 		esicache3 dd 0
  4406 00003518 00000000            <2> 		esicache2 dd 0
  4407                              <2> 	nonamefound:
  4408 0000351C BE[E8340000]        <2> 		mov esi, namenotfoundbatch
  4409 00003521 E8D6E5FFFF          <2> 		call print
  4410 00003526 C3                  <2> 		ret
  4411                              <2> 	goodbatchname:
  4412 00003527 BE00004000          <2> 		mov esi, 0x400000
  4413                              <2> 	batchcreate:
  4414 0000352C 8935[14350000]      <2> 		mov [esicache3], esi
  4415 00003532 BF00008000          <2> 		mov edi, 0x800000
  4416 00003537 B00A                <2> 		mov al, 10
  4417 00003539 B307                <2> 		mov bl, 7
  4418 0000353B B404                <2> 		mov ah, 4
  4419 0000353D CD30                <2> 		int 30h
  4420 0000353F 8935[18350000]      <2> 		mov [esicache2], esi
  4421 00003545 8A0E                <2> 		mov cl, [esi]
  4422 00003547 8B35[14350000]      <2> 		mov esi, [esicache3]
  4423 0000354D BB[81350000]        <2> 		mov ebx, exitword
  4424 00003552 E87BF4FFFF          <2> 		call cndtest
  4425 00003557 3C01                <2> 		cmp al, 1
  4426 00003559 7411                <2> 		je endbatchcreate
  4427 0000355B 3C02                <2> 		cmp al, 2
  4428 0000355D 740D                <2> 		je endbatchcreate
  4429 0000355F 8B35[18350000]      <2> 		mov esi, [esicache2]
  4430 00003565 B00A                <2> 		mov al, 10
  4431 00003567 8806                <2> 		mov [esi], al
  4432 00003569 46                  <2> 		inc esi
  4433 0000356A EBC0                <2> 		jmp batchcreate
  4434                              <2> 	endbatchcreate:
  4435 0000356C 8B35[14350000]      <2> 		mov esi, [esicache3]
  4436 00003572 31C0                <2> 		xor eax, eax
  4437 00003574 8806                <2> 		mov [esi], al
  4438 00003576 BE00004000          <2> 		mov esi, 0x400000
  4439 0000357B E87CE5FFFF          <2> 		call print
  4440 00003580 C3                  <2> 		ret
  4441                              <2> 	
  4442 00003581 5C7800              <2> 	exitword db "\x",0
  4443 00003584 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4444 0000358D 6F20657869742E0A00  <2>
  4445                              <1> %include 'source/programs/beep.asm'
  4446 00003596 FF2C6265657000      <2> 	db 255,44,"beep",0
  4447 0000359D B8[C2350000]        <2> 	mov eax, beepstart
  4448 000035A2 A3[3B020000]        <2> 	mov [soundpos], eax
  4449 000035A7 B8[C6350000]        <2> 	mov eax, beepend
  4450 000035AC A3[3F020000]        <2> 	mov [soundendpos], eax
  4451 000035B1 C605[38020000]01    <2> 	mov byte [soundon], 1
  4452                              <2> waitforsoundendbeep:
  4453 000035B8 A0[38020000]        <2> 	mov al, [soundon]
  4454 000035BD 3C00                <2> 	cmp al, 0
  4455 000035BF 75F7                <2> 	jne waitforsoundendbeep
  4456 000035C1 C3                  <2> 	ret
  4457                              <2> 	
  4458                              <2> beepstart:
  4459 000035C2 3200D111            <2> 	dw 50, 4561
  4460                              <2> beepend:
  4461                              <1> %include 'source/programs/cd.asm'
  4462 000035C6 FF2C636400          <2> db 255,44,"cd",0
  4463                              <2> cd:
  4464 000035CB 8B35[93290000]      <2> 	mov esi, [currentcommandloc]
  4465 000035D1 81C603000000        <2> 	add esi, 3
  4466 000035D7 8B3D[AE730000]      <2> 	mov edi, [currentfolderloc]
  4467 000035DD 893D[AA730000]      <2> 	mov [lastfolderloc], edi
  4468 000035E3 81C7[B2730000]      <2> 	add edi, currentfolder
  4469                              <2> 	;cmp word [esi], ".."
  4470                              <2> 	;je .moveup
  4471                              <2> .movedown:
  4472 000035E9 8A06                <2> 	mov al, [esi]
  4473 000035EB 8807                <2> 	mov [edi], al
  4474 000035ED 47                  <2> 	inc edi
  4475 000035EE 46                  <2> 	inc esi
  4476 000035EF 3C00                <2> 	cmp al, 0
  4477 000035F1 740A                <2> 	je .donecd
  4478 000035F3 81FF[B2750000]      <2> 	cmp edi, currentfolderend
  4479 000035F9 72EE                <2> 	jb .movedown
  4480 000035FB 30C0                <2> 	xor al, al
  4481                              <2> .donecd:
  4482 000035FD 4F                  <2> 	dec edi
  4483 000035FE C6072F              <2> 	mov byte [edi], '/'
  4484 00003601 47                  <2> 	inc edi
  4485 00003602 81EF[B2730000]      <2> 	sub edi, currentfolder
  4486 00003608 893D[AE730000]      <2> 	mov [currentfolderloc], edi
  4487 0000360E C3                  <2> 	ret
  4488                              <2> ;.moveup:
  4489                              <2> ;	ret
  4490                              <1> %include 'source/programs/charmap.asm'
  4491 0000360F FF2C636861726D6170- <2> db 255,44,"charmap",0
  4492 00003618 00                  <2>
  4493 00003619 66BB0700            <2> 	mov bx, 7
  4494 0000361D B020                <2> 	mov al, " "
  4495 0000361F E8B0E9FFFF          <2> 	call prcharq
  4496 00003624 E8ABE9FFFF          <2> 	call prcharq
  4497 00003629 E8A6E9FFFF          <2> 	call prcharq
  4498 0000362E E8A1E9FFFF          <2> 	call prcharq
  4499 00003633 B030                <2> 	mov al, "0"
  4500                              <2> charmapnumprnt:
  4501 00003635 E89AE9FFFF          <2> 	call prcharq
  4502 0000363A FEC0                <2> 	inc al
  4503 0000363C 6650                <2> 	push ax
  4504 0000363E B020                <2> 	mov al, " "
  4505 00003640 E88FE9FFFF          <2> 	call prcharq
  4506 00003645 6658                <2> 	pop ax
  4507 00003647 3C39                <2> 	cmp al, "9"
  4508 00003649 76EA                <2> 	jbe charmapnumprnt
  4509 0000364B B041                <2> 	mov al, "A"
  4510                              <2> charmapnumprnt2:
  4511 0000364D E882E9FFFF          <2> 	call prcharq
  4512 00003652 FEC0                <2> 	inc al
  4513 00003654 6650                <2> 	push ax
  4514 00003656 B020                <2> 	mov al, " "
  4515 00003658 E877E9FFFF          <2> 	call prcharq
  4516 0000365D 6658                <2> 	pop ax
  4517 0000365F 3C47                <2> 	cmp al, "G"
  4518 00003661 72EA                <2> 	jb charmapnumprnt2
  4519                              <2> 	
  4520 00003663 BE[B44B0000]        <2> 	mov esi, line
  4521 00003668 E87DE4FFFF          <2> 	call printquiet
  4522 0000366D 6631C0              <2> 	xor ax, ax
  4523 00003670 88C1                <2> 	mov cl, al
  4524 00003672 E82FF5FFFF          <2> 	call showhexsmall
  4525 00003677 E955000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  4526                              <2> charmapcopy:
  4527 0000367C FEC0                <2> 	inc al
  4528 0000367E 6650                <2> 	push ax
  4529 00003680 3C08                <2> 	cmp al, 8
  4530 00003682 744D                <2> 	je charmapnocopy
  4531 00003684 3C09                <2> 	cmp al, 9
  4532 00003686 7449                <2> 	je charmapnocopy
  4533 00003688 3C0A                <2> 	cmp al, 10
  4534 0000368A 7445                <2> 	je charmapnocopy
  4535 0000368C 3C0D                <2> 	cmp al, 13
  4536 0000368E 7441                <2> 	je charmapnocopy
  4537 00003690 3CFF                <2> 	cmp al, 255
  4538 00003692 743D                <2> 	je charmapnocopy
  4539 00003694 3C00                <2> 	cmp al, 0
  4540 00003696 7434                <2> 	je nomorecharmap
  4541 00003698 E837E9FFFF          <2> 	call prcharq
  4542 0000369D B020                <2> 	mov al, " "
  4543 0000369F E830E9FFFF          <2> 	call prcharq
  4544 000036A4 6658                <2> 	pop ax
  4545                              <2> charmapcopycheck:
  4546 000036A6 FEC4                <2> 	inc ah
  4547 000036A8 80FC10              <2> 	cmp ah, 16
  4548 000036AB 72CF                <2> 	jb charmapcopy
  4549 000036AD 6650                <2> 	push ax
  4550 000036AF BE[B44B0000]        <2> 	mov esi, line
  4551 000036B4 E831E4FFFF          <2> 	call printquiet
  4552 000036B9 6658                <2> 	pop ax
  4553 000036BB 3CFF                <2> 	cmp al, 255
  4554 000036BD 740D                <2> 	je nomorecharmap
  4555 000036BF 88C1                <2> 	mov cl, al
  4556 000036C1 FEC1                <2> 	inc cl
  4557 000036C3 E8DEF4FFFF          <2> 	call showhexsmall
  4558 000036C8 30E4                <2> 	xor ah, ah
  4559 000036CA EBB0                <2> 	jmp charmapcopy
  4560                              <2> nomorecharmap:
  4561 000036CC E915F0FFFF          <2> 	jmp nwcmd
  4562                              <2> charmapnocopy:
  4563 000036D1 6650                <2> 	push ax
  4564 000036D3 B020                <2> 	mov al, " "
  4565 000036D5 E8FAE8FFFF          <2> 	call prcharq
  4566 000036DA E8F5E8FFFF          <2> 	call prcharq
  4567 000036DF 6658                <2> 	pop ax
  4568 000036E1 EBC3                <2> 	jmp charmapcopycheck
  4569                              <1> %include 'source/programs/clear.asm'
  4570 000036E3 FF2C636C65617200    <2> db 255,44,"clear",0
  4571 000036EB E872E4FFFF          <2> 		call clear
  4572 000036F0 C3                  <2> 		ret 
  4573                              <1> %include 'source/programs/cpuid.asm'
  4574 000036F1 FF2C637075696400    <2> db 255,44,"cpuid",0
  4575 000036F9 31C0                <2> 	xor eax, eax
  4576 000036FB 0FA2                <2> 	cpuid
  4577 000036FD 891D[4E370000]      <2> 	mov [cpuidbuf], ebx
  4578 00003703 8915[52370000]      <2> 	mov [cpuidbuf + 4], edx
  4579 00003709 890D[56370000]      <2> 	mov [cpuidbuf + 8], ecx
  4580 0000370F BE[4E370000]        <2> 	mov esi, cpuidbuf
  4581 00003714 E8E3E3FFFF          <2> 	call print
  4582 00003719 BE[B44B0000]        <2> 	mov esi, line
  4583 0000371E E8D9E3FFFF          <2> 	call print
  4584 00003723 B801000000          <2> 	mov eax, 1
  4585 00003728 0FA2                <2> 	cpuid
  4586 0000372A 89C1                <2> 	mov ecx, eax
  4587 0000372C C605[A52B0000]02    <2> 	mov byte [firsthexshown], 2
  4588 00003733 E882F4FFFF          <2> 	call showhex
  4589 00003738 B808000080          <2> 	mov eax, 0x80000008
  4590 0000373D 0FA2                <2> 	cpuid
  4591 0000373F 89C1                <2> 	mov ecx, eax
  4592 00003741 C605[A52B0000]02    <2> 	mov byte [firsthexshown], 2
  4593 00003748 E86DF4FFFF          <2> 	call showhex
  4594 0000374D C3                  <2> 	ret
  4595                              <2> 	
  4596 0000374E 00<rept>            <2> cpuidbuf times 13 db 0
  4597                              <2> cpuidvendorend:
  4598                              <1> %include 'source/programs/dos.asm'
  4599 0000375B FF2C646F7300        <2> db 255,44,"dos",0
  4600                              <2> dosrunner:
  4601 00003761 8925[A6730000]      <2> 	mov [previousstack], esp
  4602 00003767 8B3D[93290000]      <2> 	mov edi, [currentcommandloc]
  4603 0000376D 81C704000000        <2> 	add edi, 4
  4604 00003773 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  4605 00003778 E84A120000          <2> 	call loadfile
  4606 0000377D 8B3D[93290000]      <2> 	mov edi, [currentcommandloc]
  4607 00003783 81C704000000        <2> 	add edi, 4
  4608 00003789 81FA94010000        <2> 	cmp edx, 404
  4609 0000378F 0F845E000000        <2> 	je near .noprogfound
  4610 00003795 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  4611 0000379A 31C9                <2> 	xor ecx, ecx
  4612                              <2> .findparams:
  4613 0000379C 47                  <2> 	inc edi
  4614 0000379D 8A07                <2> 	mov al, [edi]
  4615 0000379F 3C20                <2> 	cmp al, " "
  4616 000037A1 75F9                <2> 	jne .findparams
  4617                              <2> .copyparams:
  4618 000037A3 8A07                <2> 	mov al, [edi]
  4619 000037A5 8803                <2> 	mov [ebx], al
  4620 000037A7 43                  <2> 	inc ebx
  4621 000037A8 47                  <2> 	inc edi
  4622 000037A9 41                  <2> 	inc ecx
  4623 000037AA 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  4624 000037B0 7304                <2> 	jae .nomoreparams
  4625 000037B2 3C00                <2> 	cmp al, 0
  4626 000037B4 75ED                <2> 	jne .copyparams
  4627                              <2> .nomoreparams:
  4628 000037B6 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  4629 000037BC 66B85000            <2> 	mov ax, DOS_DATA_SEL
  4630 000037C0 8ED8                <2> 	mov ds, ax
  4631 000037C2 8EC0                <2> 	mov es, ax
  4632 000037C4 8EE0                <2> 	mov fs, ax
  4633 000037C6 8EE8                <2> 	mov gs, ax
  4634 000037C8 31C0                <2> 	xor eax, eax
  4635 000037CA 31DB                <2> 	xor ebx, ebx
  4636 000037CC 31C9                <2> 	xor ecx, ecx
  4637 000037CE 31D2                <2> 	xor edx, edx
  4638 000037D0 31FF                <2> 	xor edi, edi
  4639 000037D2 31F6                <2> 	xor esi, esi
  4640 000037D4 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  4641 000037DB 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  4642 000037DF 6689DA              <2> 	mov dx, bx
  4643 000037E2 8EC3                <2> 	mov es, bx
  4644 000037E4 8EE3                <2> 	mov fs, bx
  4645 000037E6 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  4646 000037EA 8EEB                <2> 	mov gs, bx
  4647 000037EC 8B25[A6730000]      <2> 	mov esp, [previousstack]
  4648 000037F2 C3                  <2> 	ret
  4649                              <2> .noprogfound:
  4650 000037F3 BE[734B0000]        <2> 	mov esi, notfound1
  4651 000037F8 E8FFE2FFFF          <2> 	call print
  4652 000037FD 8B35[93290000]      <2> 	mov esi, [currentcommandloc]
  4653 00003803 81C604000000        <2> 	add esi, 4
  4654 00003809 E8EEE2FFFF          <2> 	call print
  4655 0000380E BE[7B4B0000]        <2> 	mov esi, notfound2
  4656 00003813 E8E4E2FFFF          <2> 	call print
  4657 00003818 C3                  <2> 	ret
  4658                              <2> 	
  4659                              <1> %include 'source/programs/dump.asm'
  4660 00003819 FF2C64756D7000      <2> db 255,44,"dump",0
  4661 00003820 8B35[93290000]      <2> 	mov esi, [currentcommandloc]
  4662 00003826 81C605000000        <2> 	add esi, 5
  4663 0000382C 31C9                <2> 	xor ecx, ecx
  4664 0000382E 66B83078            <2> 	mov ax, "0x"
  4665 00003832 663906              <2> 	cmp [esi], ax
  4666 00003835 740A                <2> 	je dumphexin
  4667 00003837 E82AF5FFFF          <2> 	call cnvrttxt
  4668 0000383C E910000000          <2> 	jmp dumphexnow
  4669                              <2> dumphexin:
  4670 00003841 81C602000000        <2> 	add esi, 2
  4671 00003847 E8D1F4FFFF          <2> 	call cnvrthextxt
  4672 0000384C E900000000          <2> 	jmp dumphexnow
  4673                              <2> dumphexnow:
  4674 00003851 89CF                <2> 	mov edi, ecx
  4675 00003853 89FE                <2> 	mov esi, edi
  4676 00003855 81C680030000        <2> 	add esi, 896
  4677                              <2> dumphexloop:
  4678 0000385B 8B0F                <2> 	mov ecx, [edi]
  4679 0000385D C605[A52B0000]05    <2> 	mov byte [firsthexshown],5
  4680 00003864 E851F3FFFF          <2> 	call showhex
  4681 00003869 81C704000000        <2> 	add edi, 4
  4682 0000386F 39F7                <2> 	cmp edi, esi
  4683 00003871 72E8                <2> 	jb dumphexloop
  4684 00003873 E895EAFFFF          <2> 	call termcopy
  4685 00003878 C3                  <2> 	ret 
  4686                              <1> %include 'source/programs/echo.asm'
  4687                              <2> 
  4688 00003879 FF2C6563686F00      <2> db 255,44,"echo",0
  4689                              <2> 	echoprog:
  4690 00003880 8B35[93290000]      <2> 		mov esi, [currentcommandloc]
  4691 00003886 81C605000000        <2> 		add esi, 5
  4692 0000388C 8A06                <2> 		mov al, [esi]
  4693 0000388E E869E2FFFF          <2> 		call print
  4694 00003893 BE[B44B0000]        <2> 		mov esi, line
  4695 00003898 E85FE2FFFF          <2> 		call print
  4696 0000389D C3                  <2> 		ret
  4697 0000389E BB[26760000]        <2> 	echovr:	mov ebx, variables
  4698 000038A3 BF06000000          <2> 		mov edi, 6
  4699 000038A8 E83C000000          <2> 		call nxtvrech
  4700 000038AD E954000000          <2> 		jmp prntvr2
  4701 000038B2 B13D                <2> 	echvar:	mov cl, '='
  4702 000038B4 43                  <2> 		inc ebx
  4703 000038B5 8A03                <2> 		mov al, [ebx]
  4704 000038B7 3C00                <2> 		cmp al, 0
  4705 000038B9 742E                <2> 		je nxtvrech
  4706 000038BB 3C3D                <2> 		cmp al, '='
  4707 000038BD 7422                <2> 		je nxtvrechb1
  4708 000038BF 8B35[93290000]      <2> 		mov esi, [currentcommandloc]
  4709 000038C5 01FE                <2> 		add esi, edi
  4710 000038C7 E806F1FFFF          <2> 		call cndtest
  4711 000038CC 3C02                <2> 		cmp al, 2
  4712 000038CE 7432                <2> 		je prntvr
  4713 000038D0 3C01                <2> 		cmp al, 1
  4714 000038D2 742E                <2> 		je prntvr
  4715 000038D4 8B35[93290000]      <2> 		mov esi, [currentcommandloc]
  4716 000038DA 01FE                <2> 		add esi, edi
  4717 000038DC E908000000          <2> 		jmp nxtvrech
  4718                              <2> 	nxtvrechb1:
  4719 000038E1 81EB02000000        <2> 		sub ebx, 2
  4720 000038E7 EBC9                <2> 		jmp echvar
  4721 000038E9 8A03                <2> 	nxtvrech: mov al, [ebx]
  4722 000038EB 3C05                <2> 		cmp al, 5
  4723 000038ED 740A                <2> 		je nxtvrec2
  4724 000038EF 43                  <2> 		inc ebx
  4725 000038F0 81FB[26860000]      <2> 		cmp ebx, varend
  4726 000038F6 72F1                <2> 		jb nxtvrech
  4727 000038F8 C3                  <2> 		ret
  4728 000038F9 43                  <2> 	nxtvrec2: inc ebx
  4729 000038FA 8A03                <2> 		mov al, [ebx]
  4730 000038FC 3C04                <2> 		cmp al, 4
  4731 000038FE 74B2                <2> 		je echvar
  4732 00003900 EBE7                <2> 		jmp nxtvrech
  4733 00003902 43                  <2> 	prntvr: inc ebx
  4734 00003903 89DE                <2> 		mov esi, ebx
  4735 00003905 C3                  <2> 		ret
  4736 00003906 E8F1E1FFFF          <2> 	prntvr2: call print
  4737 0000390B BE[B44B0000]        <2> 		mov esi, line
  4738 00003910 E8E7E1FFFF          <2> 		call print
  4739 00003915 C3                  <2> 		ret 
  4740                              <1> %include 'source/programs/else.asm'
  4741 00003916 FF2C656C736500      <2> 	db 255,44,"else",0
  4742 0000391D 31C0                <2> elsecmd:	xor eax, eax
  4743 0000391F 3805[20760000]      <2> 	cmp [BATCHISON], al
  4744 00003925 0F8466FBFFFF        <2> 	je near notbatch
  4745 0000392B A0[B7750000]        <2> 	mov al, [IFON]
  4746 00003930 BE[B8750000]        <2> 	mov esi, IFTRUE
  4747 00003935 01C6                <2> 	add esi, eax
  4748 00003937 8A06                <2> 	mov al, [esi]
  4749 00003939 3401                <2> 	xor al, 1
  4750 0000393B 8806                <2> 	mov [esi], al
  4751 0000393D C3                  <2> 	ret 
  4752                              <1> %include 'source/programs/fi.asm'
  4753 0000393E FF2C666900          <2> 	db 255,44,"fi",0
  4754 00003943 30C0                <2> 	xor al, al
  4755 00003945 3805[20760000]      <2> 	cmp [BATCHISON], al
  4756 0000394B 0F8440FBFFFF        <2> 	je near notbatch
  4757 00003951 B001                <2> fi:	mov al, 1
  4758 00003953 2805[B7750000]      <2> 	sub [IFON],al
  4759 00003959 C3                  <2> 	ret 
  4760                              <1> %ifdef gui.included
  4761                              <1> 	%include 'source/programs/gui.asm'
  4762                              <1> %endif
  4763                              <1> %include 'source/programs/help.asm'
  4764 0000395A FF2C68656C7000      <2> db 255,44,"help",0
  4765                              <2> lscmd:	
  4766 00003961 B00D                <2> 		mov al, 13
  4767 00003963 E86CE6FFFF          <2> 		call prcharq
  4768 00003968 BE[E92D0000]        <2> 		mov esi, progstart
  4769 0000396D BB[E5420000]        <2> 		mov ebx, progend
  4770 00003972 BE[A66F0000]        <2> dir:	mov esi, fileindex
  4771 00003977 8A06                <2> 	dirnxt:	mov al, [esi]
  4772 00003979 30E4                <2> 		xor ah, ah
  4773 0000397B 3CFF                <2> 		cmp al, 255
  4774 0000397D 7415                <2> 		je dirfnd
  4775 0000397F 46                  <2> 		inc esi
  4776 00003980 81FE[A6730000]      <2> 		cmp esi,  fileindexend
  4777 00003986 7339                <2> 		jae dirdn
  4778 00003988 EBED                <2> 		jmp dirnxt
  4779                              <2> 	dirfnd3:
  4780 0000398A 46                  <2> 		inc esi
  4781 0000398B 81FE[A6730000]      <2> 		cmp esi, fileindexend
  4782 00003991 76E4                <2> 		jbe dirnxt
  4783 00003993 4E                  <2> 		dec esi
  4784 00003994 46                  <2> 	dirfnd:	inc esi
  4785 00003995 8A06                <2> 		mov al, [esi]
  4786 00003997 30E4                <2> 		xor ah, ah
  4787 00003999 3C2C                <2> 		cmp al, 44
  4788 0000399B 740B                <2> 		je dirfnd2
  4789 0000399D 46                  <2> 		inc esi
  4790 0000399E 81FE[A6730000]      <2> 		cmp esi,  fileindexend
  4791 000039A4 731B                <2> 		jae dirdn
  4792 000039A6 EBCF                <2> 		jmp dirnxt
  4793 000039A8 46                  <2> 	dirfnd2: inc esi
  4794 000039A9 E83CE1FFFF          <2> 		call printquiet
  4795 000039AE 56                  <2> 		push esi
  4796 000039AF B009                <2> 		mov al, 9
  4797 000039B1 E81EE6FFFF          <2> 		call prcharq
  4798 000039B6 5E                  <2> 		pop esi
  4799 000039B7 81FE[A6730000]      <2> 		cmp esi,  fileindexend
  4800 000039BD 7302                <2> 		jae dirdn
  4801 000039BF EBB6                <2> 		jmp dirnxt
  4802 000039C1 BE[B44B0000]        <2> 	dirdn:	mov esi, line
  4803 000039C6 E831E1FFFF          <2> 			call print
  4804 000039CB C3                  <2> 			ret
  4805 000039CC 00                  <2> currentdir db 0
  4806                              <1> %include 'source/programs/if.asm'
  4807 000039CD FF2C696600          <2> 	db 255,44,"if",0
  4808 000039D2 30C0                <2> ifcmd:	xor al, al
  4809 000039D4 3805[20760000]      <2> 	cmp [BATCHISON], al
  4810 000039DA 0F84B1FAFFFF        <2> 	je near notbatch
  4811 000039E0 8B1D[93290000]      <2> 	mov ebx, [currentcommandloc]
  4812 000039E6 81C303000000        <2> 	add ebx, 3
  4813 000039EC 89DE                <2> 	mov esi, ebx
  4814 000039EE 8A06                <2> chkeqsn: mov al, [esi]
  4815 000039F0 3C00                <2> 	cmp al, 0
  4816 000039F2 0F8499FAFFFF        <2> 	je near notbatch
  4817 000039F8 3C3D                <2> 	cmp al, '='
  4818 000039FA 0F8403000000        <2> 	je near chkeqdn
  4819 00003A00 46                  <2> 	inc esi
  4820 00003A01 EBEB                <2> 	jmp chkeqsn
  4821 00003A03 B000                <2> chkeqdn: mov al, 0 
  4822 00003A05 8806                <2> 	mov [esi], al
  4823 00003A07 46                  <2> 	inc esi
  4824 00003A08 E88AEFFFFF          <2> 	call tester
  4825 00003A0D 3C01                <2> 	cmp al, 1
  4826 00003A0F 0F8405000000        <2> 	je near trueif
  4827 00003A15 E91C000000          <2> 	jmp falseif
  4828 00003A1A 31C0                <2> trueif:	xor eax, eax
  4829 00003A1C A0[B7750000]        <2> 	mov al, [IFON]
  4830 00003A21 FEC0                <2> 	inc al
  4831 00003A23 A2[B7750000]        <2> 	mov [IFON], al
  4832 00003A28 30E4                <2> 	xor ah, ah
  4833 00003A2A BE[B8750000]        <2> 	mov esi, IFTRUE
  4834 00003A2F 01C6                <2> 	add esi, eax
  4835 00003A31 B401                <2> 	mov ah, 1
  4836 00003A33 8826                <2> 	mov [esi], ah
  4837 00003A35 C3                  <2> 	ret 
  4838 00003A36 31C0                <2> falseif: xor eax, eax
  4839 00003A38 A0[B7750000]        <2> 	mov al, [IFON]
  4840 00003A3D FEC0                <2> 	inc al
  4841 00003A3F A2[B7750000]        <2> 	mov [IFON], al
  4842 00003A44 30E4                <2> 	xor ah, ah
  4843 00003A46 BE[B8750000]        <2> 	mov esi, IFTRUE
  4844 00003A4B 01C6                <2> 	add esi, eax
  4845 00003A4D 30E4                <2> 	xor ah, ah
  4846 00003A4F 8826                <2> 	mov [esi], ah
  4847 00003A51 C3                  <2> 	ret 
  4848                              <1> %include 'source/programs/keycode.asm'
  4849 00003A52 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  4850 00003A5B 00                  <2>
  4851                              <2> keycode:
  4852 00003A5C C605[AE1F0000]00    <2> 	mov byte [trans], 0
  4853 00003A63 C605[664B0000]00    <2> 	mov byte [threadson], 0
  4854                              <2> %ifdef io.serial
  4855                              <2> .noserial:
  4856                              <2> 	hlt
  4857                              <2> 	mov dx, [serial.address]
  4858                              <2> 	in al, dx
  4859                              <2> 	cmp al, 0
  4860                              <2> 	je .noserial
  4861                              <2> 	mov ah, al
  4862                              <2> 	mov [lastkey], ax
  4863                              <2> .noswitchserial:
  4864                              <2> %else
  4865 00003A6A E846090000          <2> 	call getkey
  4866                              <2> %endif
  4867 00003A6F 31C0                <2> 	xor eax, eax
  4868 00003A71 31C9                <2> 	xor ecx, ecx
  4869 00003A73 8A0D[95430000]      <2> 	mov cl, [specialkey]
  4870 00003A79 80F900              <2> 	cmp cl, 0
  4871 00003A7C 0F8405000000        <2> 	je near .nospecialkeycode
  4872 00003A82 E81FF1FFFF          <2> 	call showhexsmall
  4873                              <2> .nospecialkeycode:
  4874 00003A87 66A1[AC1F0000]      <2> 	mov ax, [lastkey]
  4875 00003A8D 88E1                <2> 	mov cl, ah
  4876 00003A8F E812F1FFFF          <2> 	call showhexsmall
  4877 00003A94 80FC01              <2> 	cmp ah, 1
  4878 00003A97 75C3                <2> 	jne keycode
  4879 00003A99 C3                  <2> 	ret 
  4880                              <1> %include 'source/programs/logout.asm'
  4881 00003A9A FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  4882 00003AA3 E985EAFFFF          <2> 	jmp os
  4883                              <1> %include 'source/programs/loop.asm'
  4884 00003AA8 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  4885 00003AAF 803D[21760000]00    <2> 	cmp byte [LOOPON], 0
  4886 00003AB6 0F8501000000        <2> 	jne near filoop
  4887 00003ABC C3                  <2> 	ret
  4888 00003ABD 8B35[22760000]      <2> filoop: mov esi, [LOOPPOS]
  4889 00003AC3 FE0D[B7750000]      <2> 	dec byte [IFON]
  4890 00003AC9 C605[21760000]00    <2> 	mov byte [LOOPON], 0
  4891 00003AD0 8935[1C760000]      <2> 	mov [BATCHPOS], esi
  4892 00003AD6 8935[B9330000]      <2> 	mov [batchedi], esi
  4893 00003ADC C3                  <2> 	ret 
  4894                              <1> %include 'source/programs/ls.asm'
  4895 00003ADD FF2C6C7300          <2> db 255,44,"ls",0
  4896 00003AE2 BE[D95B0000]        <2> 		mov esi, diskfileindex
  4897                              <2> 	diskindexdir:
  4898 00003AE7 803E5F              <2> 		cmp byte [esi], '_'
  4899 00003AEA 7440                <2> 		je nextdiskindexdir
  4900 00003AEC E8F9DFFFFF          <2> 		call printquiet
  4901 00003AF1 56                  <2> 		push esi
  4902 00003AF2 BE[4C3B0000]        <2> 		mov esi, disktab
  4903 00003AF7 E8EEDFFFFF          <2> 		call printquiet
  4904 00003AFC 5E                  <2> 		pop esi
  4905 00003AFD 8B4E05              <2> 		mov ecx, [esi + 5]
  4906 00003B00 C605[A52B0000]05    <2> 		mov byte [firsthexshown], 5
  4907 00003B07 E878F1FFFF          <2> 		call showdec
  4908 00003B0C 56                  <2> 		push esi
  4909 00003B0D BE[B44B0000]        <2> 		mov esi, line
  4910 00003B12 E8D3DFFFFF          <2> 		call printquiet
  4911 00003B17 5E                  <2> 		pop esi
  4912 00003B18 81C609000000        <2> 		add esi, 9
  4913 00003B1E 81FE[605D0000]      <2> 		cmp esi, enddiskfileindex
  4914 00003B24 72C1                <2> 		jb diskindexdir
  4915 00003B26 E8E2E7FFFF          <2> 		call termcopy
  4916 00003B2B C3                  <2> 		ret
  4917                              <2> 	nextdiskindexdir:
  4918 00003B2C 46                  <2> 		inc esi
  4919 00003B2D 803E00              <2> 		cmp byte [esi], 0
  4920 00003B30 75FA                <2> 		jne nextdiskindexdir
  4921 00003B32 81C609000000        <2> 		add esi, 9
  4922 00003B38 81FE[605D0000]      <2> 		cmp esi, enddiskfileindex
  4923 00003B3E 72A7                <2> 		jb diskindexdir
  4924 00003B40 E8C8E7FFFF          <2> 		call termcopy
  4925 00003B45 C3                  <2> 		ret
  4926                              <2> 		
  4927 00003B46 4469736B2000        <2> 		diskmsg db "Disk ",0
  4928 00003B4C 0D09090900          <2> 		disktab db 13,9,9,9,0
  4929                              <1> %include 'source/programs/memory.asm'
  4930 00003B51 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  4931 00003B5A BE[665D0000]        <2> 	mov esi, memlistbuf
  4932 00003B5F 31FF                <2> 	xor edi, edi
  4933 00003B61 668B3D[A65F0000]    <2> 	mov di, [memlistend]
  4934 00003B68 01F7                <2> 	add edi, esi
  4935                              <2> printmemmap:
  4936 00003B6A 8B0E                <2> 	mov ecx, [esi]
  4937 00003B6C E849F0FFFF          <2> 	call showhex
  4938 00003B71 81C608000000        <2> 	add esi, 8
  4939 00003B77 8B0E                <2> 	mov ecx, [esi]
  4940 00003B79 E83CF0FFFF          <2> 	call showhex
  4941 00003B7E 81C608000000        <2> 	add esi, 8
  4942 00003B84 8B0E                <2> 	mov ecx, [esi]
  4943 00003B86 E82FF0FFFF          <2> 	call showhex
  4944 00003B8B 81C608000000        <2> 	add esi, 8
  4945 00003B91 57                  <2> 	push edi
  4946 00003B92 56                  <2> 	push esi
  4947 00003B93 BE[B44B0000]        <2> 	mov esi, line
  4948 00003B98 E85FDFFFFF          <2> 	call print
  4949 00003B9D 5E                  <2> 	pop esi
  4950 00003B9E 5F                  <2> 	pop edi
  4951 00003B9F 39FE                <2> 	cmp esi, edi
  4952 00003BA1 72C7                <2> 	jb printmemmap
  4953 00003BA3 C3                  <2> 	ret
  4954                              <2> 	
  4955                              <1> %include 'source/programs/pci.asm'
  4956 00003BA4 FF2C70636900        <2> db 255,44,"pci",0
  4957 00003BAA E8AB0B0000          <2> 	call pcidump
  4958 00003BAF C3                  <2> 	ret 
  4959                              <1> %include 'source/programs/play.asm'
  4960 00003BB0 FF2C706C617900      <2> db 255,44,"play",0
  4961 00003BB7 E801000000          <2> 	call playsync
  4962 00003BBC C3                  <2> 	ret
  4963                              <2> playsync:
  4964 00003BBD 8B3D[93290000]      <2> 	mov edi, [currentcommandloc]
  4965 00003BC3 81C705000000        <2> 	add edi, 5
  4966 00003BC9 BE00004000          <2> 	mov esi, 0x400000
  4967 00003BCE E8F40D0000          <2> 	call loadfile
  4968 00003BD3 81FA94010000        <2> 	cmp edx, 404
  4969 00003BD9 7448                <2> 	je nosoundfound
  4970 00003BDB BB00004000          <2> 	mov ebx, 0x400000
  4971 00003BE0 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  4972 00003BE7 0F8464000000        <2> 	je near wave_player
  4973 00003BED 66813B534E          <2> 	cmp word [ebx], "SN"
  4974 00003BF2 752F                <2> 	jne nosoundfound
  4975 00003BF4 81C306000000        <2> 	add ebx, 6
  4976 00003BFA 891D[3B020000]      <2> 	mov [soundpos], ebx
  4977 00003C00 035BFC              <2> 	add ebx, [ebx - 4]
  4978 00003C03 891D[3F020000]      <2> 	mov [soundendpos], ebx
  4979 00003C09 66C705[39020000]00- <2> 	mov word [soundrepititions], 0
  4980 00003C11 00                  <2>
  4981 00003C12 C605[38020000]01    <2> 	mov byte [soundon], 1
  4982                              <2> waitforsoundendplay:
  4983 00003C19 A0[38020000]        <2> 	mov al, [soundon]
  4984 00003C1E 3C00                <2> 	cmp al, 0
  4985 00003C20 75F7                <2> 	jne waitforsoundendplay
  4986 00003C22 C3                  <2> 	ret
  4987                              <2> nosoundfound:
  4988 00003C23 BE[493C0000]        <2> 	mov esi, notfoundsound
  4989 00003C28 E8CFDEFFFF          <2> 	call print
  4990 00003C2D 8B35[93290000]      <2> 	mov esi, [currentcommandloc]
  4991 00003C33 81C605000000        <2> 	add esi, 5
  4992 00003C39 E8BEDEFFFF          <2> 	call print
  4993 00003C3E BE[7B4B0000]        <2> 	mov esi, notfound2
  4994 00003C43 E8B4DEFFFF          <2> 	call print
  4995 00003C48 C3                  <2> 	ret
  4996 00003C49 536F756E64202200    <2> notfoundsound db "Sound ",34,0
  4997                              <2> 
  4998                              <2> %ifdef sound.included
  4999                              <2> sbplay:
  5000                              <2> 		mov esi, 0x400000
  5001                              <2> 		mov ebx, esi
  5002                              <2> 		add esi, 44
  5003                              <2> 		sub edi, esi
  5004                              <2> 		mov [Length1], di
  5005                              <2> 		shr edi, 16
  5006                              <2> 		mov [Length0], di
  5007                              <2> 		mov ecx, [ebx + 24]
  5008                              <2> 		mov [Freq], ecx
  5009                              <2> 		xor eax, eax
  5010                              <2> 		mov	edx, 0x400000 ;location of sound
  5011                              <2> 		add edx, 2048
  5012                              <2> 		add	eax,edx
  5013                              <2> 		xor ebx, ebx
  5014                              <2> 		mov bx, [Length1]
  5015                              <2> 		add ebx, eax
  5016                              <2> 		mov [NextMemLoc], ebx
  5017                              <2> 		mov	[MemLoc],eax
  5018                              <2> 		call DMAPlay
  5019                              <2> 		ret
  5020                              <2> 
  5021                              <2> wave_player:
  5022                              <2> 	cmp byte [SoundBlaster], 1
  5023                              <2> 	je near sbplay
  5024                              <2> 	mov esi, nosoundblaster
  5025                              <2> 	call print
  5026                              <2> 	ret
  5027                              <2> %else
  5028                              <2> 	wave_player:
  5029 00003C51 BE[5C3C0000]        <2> 		mov esi, nosoundblaster
  5030 00003C56 E8A1DEFFFF          <2> 		call print
  5031 00003C5B C3                  <2> 		ret
  5032                              <2> %endif
  5033 00003C5C 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  5034 00003C65 426C61737465722064- <2>
  5035 00003C6E 657465637465642E0A- <2>
  5036 00003C77 00                  <2>
  5037                              <1> %include 'source/programs/pwd.asm'
  5038 00003C78 FF2C70776400        <2> db 255,44,"pwd",0
  5039 00003C7E BE[B2730000]        <2> 	mov esi, currentfolder
  5040 00003C83 E862DEFFFF          <2> 	call printquiet
  5041 00003C88 BE[B44B0000]        <2> 	mov esi, line
  5042 00003C8D E86ADEFFFF          <2> 	call print
  5043 00003C92 C3                  <2> 	ret
  5044                              <2> 	
  5045                              <1> %include 'source/programs/reboot.asm'
  5046 00003C93 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  5047 00003C9C 0F011D[A63C0000]    <2> 		lidt [idtreboot]
  5048 00003CA3 CD00                <2> 		int 0
  5049 00003CA5 F4                  <2> 		hlt
  5050                              <2> 	
  5051 00003CA6 0000                <2> 	idtreboot dw 0
  5052 00003CA8 00000000            <2> 			  dd 0
  5053                              <2> 
  5054                              <2> 	coldboot:
  5055 00003CAC 66B84000            <2> 		MOV AX, 0040h
  5056 00003CB0 8EC0                <2> 		MOV ES, AX
  5057 00003CB2 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  5058 00003CBB 00                  <2>
  5059 00003CBC EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5060 00003CC3 CF                  <2> 		IRET
  5061                              <2> 
  5062                              <2> 	warmboot:
  5063 00003CC4 66B84000            <2> 		MOV AX, 0040h
  5064 00003CC8 8EC0                <2> 		MOV ES, AX
  5065 00003CCA 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  5066 00003CD3 12                  <2>
  5067 00003CD4 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5068 00003CDB CF                  <2> 		IRET
  5069                              <2> 		
  5070                              <1> %include 'source/programs/reg.asm'
  5071 00003CDC FF2C72656700        <2> db 255,44,"reg",0
  5072 00003CE2 CD03                <2> 	int 3
  5073 00003CE4 C3                  <2> 	ret 
  5074                              <1> %include 'source/programs/show.asm'
  5075 00003CE5 FF2C73686F7700      <2> db 255,44,"show",0
  5076 00003CEC 8B3D[93290000]      <2> 		mov edi, [currentcommandloc]
  5077 00003CF2 81C705000000        <2> 		add edi, 5
  5078 00003CF8 BE00008000          <2> 		mov esi, 0x800000
  5079 00003CFD E8C50C0000          <2> 		call loadfile
  5080 00003D02 81FA94010000        <2> 		cmp edx, 404
  5081 00003D08 0F8415000000        <2> 		je near filenotfound
  5082 00003D0E BE00008000          <2> 		mov esi, 0x800000
  5083                              <2> %ifdef gui.included
  5084                              <2> 		cmp word [esi], "BM"
  5085                              <2> 		je bmpfound
  5086                              <2> %endif
  5087 00003D13 E8E4DDFFFF          <2> 		call print
  5088 00003D18 BE[B44B0000]        <2> 		mov esi, line
  5089 00003D1D E8DADDFFFF          <2> 		call print
  5090 00003D22 C3                  <2> 		ret
  5091                              <2> %ifdef gui.included
  5092                              <2> bmpfound:
  5093                              <2> 		cmp byte [guion], 0
  5094                              <2> 		je near noguibmp
  5095                              <2> 		mov esi, 0x800000
  5096                              <2> 		xor ecx, ecx
  5097                              <2> 		xor edx, edx
  5098                              <2> 		xor eax, eax
  5099                              <2> 		xor ebx, ebx
  5100                              <2> 		call showbmp
  5101                              <2> 		xor al, al
  5102                              <2> 		mov ah, 5
  5103                              <2> 		int 30h
  5104                              <2> 		call guiclear
  5105                              <2> 		call clearmousecursor
  5106                              <2> 		call reloadallgraphics
  5107                              <2> 		mov esi, [currentcommandloc]
  5108                              <2> 		add esi, 5
  5109                              <2> 		call print
  5110                              <2> 		mov esi, loadedbmpmsg
  5111                              <2> 		call print
  5112                              <2> 		ret
  5113                              <2> noguibmp:
  5114                              <2> 		mov esi, warnguimsg
  5115                              <2> 		call print
  5116                              <2> 		ret
  5117                              <2> warnguimsg db "This can not be done without the GUI.",10,0
  5118                              <2> %endif
  5119                              <2> 
  5120                              <2> filenotfound:
  5121 00003D23 BE[563D0000]        <2> 		mov esi, filenf
  5122 00003D28 E8CFDDFFFF          <2> 		call print
  5123 00003D2D 8B35[93290000]      <2> 		mov esi, [currentcommandloc]
  5124                              <2> findfilenotfoundzero:
  5125 00003D33 8A06                <2> 		mov al, [esi]
  5126 00003D35 46                  <2> 		inc esi
  5127 00003D36 3C00                <2> 		cmp al, 0
  5128 00003D38 7411                <2> 		je nofilenamenotfound
  5129 00003D3A 81FE[268E0000]      <2> 		cmp esi, buftxtend
  5130 00003D40 7309                <2> 		jae nofilenamenotfound
  5131 00003D42 3C20                <2> 		cmp al, " "
  5132 00003D44 75ED                <2> 		jne findfilenotfoundzero
  5133 00003D46 E8B1DDFFFF          <2> 		call print
  5134                              <2> nofilenamenotfound:
  5135 00003D4B BE[613D0000]        <2> 		mov esi, filenf2
  5136 00003D50 E8A7DDFFFF          <2> 		call print
  5137 00003D55 C3                  <2> 		ret
  5138 00003D56 5468652066696C6520- <2> filenf db "The file ",34,0
  5139 00003D5F 2200                <2>
  5140 00003D61 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  5141 00003D6A 6F7420626520666F75- <2>
  5142 00003D73 6E642E0A00          <2>
  5143                              <2> 		
  5144 00003D78 206C6F616465642E0A- <2> loadedbmpmsg db " loaded.",10,0
  5145 00003D81 00                  <2>
  5146                              <1> %include 'source/programs/shush.asm'
  5147 00003D82 FF2C736875736800    <2> db 255,44,"shush",0
  5148 00003D8A BE[953D0000]        <2> 	mov esi, shushmsg
  5149 00003D8F E868DDFFFF          <2> 	call print
  5150 00003D94 C3                  <2> 	ret
  5151 00003D95 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  5152 00003D9E 6F2074686520536F6C- <2>
  5153 00003DA7 6C65724F5320486172- <2>
  5154 00003DB0 646C7920556E69782D- <2>
  5155 00003DB9 436F6D70617469626C- <2>
  5156 00003DC2 65205368656C6C210A- <2>
  5157 00003DCB 00                  <2>
  5158                              <1> %include 'source/programs/stop.asm'
  5159 00003DCC FF2C73746F7000      <2> 	db 255,44,"stop",0
  5160 00003DD3 30C0                <2> stop:	xor al, al
  5161 00003DD5 A2[20760000]        <2> 	mov [BATCHISON], al
  5162 00003DDA A2[B7750000]        <2> 	mov [IFON], al
  5163 00003DDF A2[B8750000]        <2> 	mov [IFTRUE], al
  5164 00003DE4 A2[21760000]        <2> 	mov [LOOPON], al
  5165 00003DE9 C3                  <2> 	ret 
  5166                              <1> %include 'source/programs/system.asm'
  5167 00003DEA FF2C73797374656D00  <2> 	db 255,44,"system",0
  5168 00003DF3 BE[923E0000]        <2> 	mov esi, systeminfomsg
  5169 00003DF8 E8EDDCFFFF          <2> 	call printquiet
  5170 00003DFD B9[D95B0000]        <2> 	mov ecx, osend
  5171 00003E02 E87DEEFFFF          <2> 	call showdec
  5172 00003E07 BE[A73E0000]        <2> 	mov esi, diskbytemsg
  5173 00003E0C E8D9DCFFFF          <2> 	call printquiet
  5174 00003E11 B9[D95B0000]        <2> 	mov ecx, osend
  5175 00003E16 81C1[03010100]      <2> 	add ecx, commandbufend
  5176 00003E1C 81E9[605D0000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  5177 00003E22 E85DEEFFFF          <2> 	call showdec
  5178 00003E27 BE[BE3E0000]        <2> 	mov esi, membytemsg
  5179 00003E2C E8B9DCFFFF          <2> 	call printquiet
  5180                              <2> getcpuspeed:
  5181 00003E31 B8FE000000          <2> 	mov eax, 0xFE
  5182 00003E36 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  5183 00003E38 B020                <2> 	mov al, 0x20
  5184 00003E3A E620                <2> 	out 0x20, al
  5185 00003E3C 31C0                <2> 	xor eax, eax
  5186 00003E3E F4                  <2> 	hlt
  5187 00003E3F C605[21020000]01    <2> 	mov byte [testingcpuspeed], 1
  5188                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  5189 00003E46 40                  <2> 	inc eax
  5190 00003E47 EBFD                <2> 	jmp cpuspeedloop
  5191                              <2> cpuspeedloopend:
  5192 00003E49 31C0                <2> 	xor eax, eax
  5193 00003E4B E621                <2> 	out 0x21, al
  5194 00003E4D B020                <2> 	mov al, 0x20
  5195 00003E4F E620                <2> 	out 0x20, al
  5196 00003E51 31D2                <2> 	xor edx, edx
  5197 00003E53 31C0                <2> 	xor eax, eax
  5198 00003E55 A1[22020000]        <2> 	mov eax, [cpuspeedperint]
  5199 00003E5A D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  5200                              <2> 				;result by 2
  5201 00003E5C 8B1D[2C020000]      <2> 	mov ebx, [timeinterval]
  5202 00003E62 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  5203 00003E65 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  5204 00003E67 89C1                <2> 	mov ecx, eax
  5205 00003E69 E816EEFFFF          <2> 	call showdec
  5206 00003E6E BE[EB3E0000]        <2> 	mov esi, cpuspeedmsg
  5207 00003E73 E872DCFFFF          <2> 	call printquiet
  5208 00003E78 8B0D[26020000]      <2> 	mov ecx, [memoryspace]
  5209 00003E7E C1E914              <2> 	shr ecx, 20
  5210 00003E81 41                  <2> 	inc ecx	;the reading is one MB behind
  5211 00003E82 E8FDEDFFFF          <2> 	call showdec
  5212 00003E87 BE[F13E0000]        <2> 	mov esi, memoryspacemsg
  5213 00003E8C E86BDCFFFF          <2> 	call print
  5214                              <2> %ifdef sound.included
  5215                              <2> 	cmp byte [SoundBlaster], 0
  5216                              <2> 	je .nosb
  5217                              <2> 	mov esi, soundblastermsg
  5218                              <2> 	call print
  5219                              <2> .nosb:
  5220                              <2> %endif
  5221 00003E91 C3                  <2> 	ret
  5222                              <2> 
  5223 00003E92 4B65726E656C20496E- <2> systeminfomsg db "Kernel Information:",10,0
  5224 00003E9B 666F726D6174696F6E- <2>
  5225 00003EA4 3A0A00              <2>
  5226 00003EA7 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  5227 00003EB0 6B2053706163652055- <2>
  5228 00003EB9 7365640A00          <2>
  5229 00003EBE 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,"System Information:",10,0
  5230 00003EC7 6F7279205370616365- <2>
  5231 00003ED0 20557365640A537973- <2>
  5232 00003ED9 74656D20496E666F72- <2>
  5233 00003EE2 6D6174696F6E3A0A00  <2>
  5234                              <2> %ifdef sound.included
  5235                              <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  5236                              <2> %endif
  5237 00003EEB 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  5238 00003EF1 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space Free",10,0
  5239 00003EFA 205370616365204672- <2>
  5240 00003F03 65650A00            <2>
  5241                              <1> %include 'source/programs/time.asm'
  5242 00003F07 082E30303030303030- <2> timenscache db 8,".000000000"
  5243 00003F10 3030                <2>
  5244 00003F12 200A00              <2> timenscacheend: db " ",10,0
  5245 00003F15 00                  <2> istimeset db 0
  5246 00003F16 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5247 00003F1F 2063757272656E7420- <2>
  5248 00003F28 554E49582074696D65- <2>
  5249 00003F31 3A0A00              <2>
  5250 00003F34 00<rept>            <2> timeinputbuffer times 12 db 0
  5251 00003F40 00                  <2> timeinputbend: db 0
  5252                              <2> 
  5253 00003F41 FF2C74696D6500      <2> db 255,44,"time",0
  5254 00003F48 803D[153F0000]00    <2> 	cmp byte [istimeset], 0
  5255 00003F4F 753A                <2> 	jne timeisset
  5256 00003F51 BE[163F0000]        <2> 	mov esi, settimemsg
  5257 00003F56 E8A1DBFFFF          <2> 	call print
  5258 00003F5B BE[343F0000]        <2> 	mov esi, timeinputbuffer
  5259 00003F60 BF[403F0000]        <2> 	mov edi, timeinputbend
  5260 00003F65 E878DCFFFF          <2> 	call readline
  5261 00003F6A BE[343F0000]        <2> 	mov esi, timeinputbuffer
  5262 00003F6F 31FF                <2> 	xor edi, edi
  5263 00003F71 E8F0EDFFFF          <2> 	call cnvrttxt
  5264 00003F76 890D[30020000]      <2> 	mov [timeseconds], ecx
  5265 00003F7C 31C9                <2> 	xor ecx, ecx
  5266 00003F7E 890D[34020000]      <2> 	mov [timenanoseconds], ecx
  5267 00003F84 C605[153F0000]01    <2> 	mov byte [istimeset], 1
  5268                              <2> timeisset:
  5269 00003F8B 8B0D[30020000]      <2> 	mov ecx, [timeseconds]
  5270 00003F91 E8EEECFFFF          <2> 	call showdec
  5271                              <2> 	
  5272 00003F96 8B0D[34020000]      <2> 	mov ecx, [timenanoseconds]
  5273 00003F9C BE[073F0000]        <2> 	mov esi, timenscache
  5274 00003FA1 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5275 00003FA8 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5276 00003FAF C6460A30            <2> 	mov byte [esi + 10], "0"
  5277 00003FB3 BE[123F0000]        <2> 	mov esi, timenscacheend
  5278 00003FB8 E8AAEAFFFF          <2> 	call convert
  5279 00003FBD BE[073F0000]        <2> 	mov esi, timenscache
  5280 00003FC2 E835DBFFFF          <2> 	call print
  5281                              <2> 	
  5282 00003FC7 E80F000000          <2> 	call time
  5283 00003FCC BE[A7410000]        <2> 	mov esi, timeshow
  5284 00003FD1 E826DBFFFF          <2> 	call print
  5285 00003FD6 E9BC000000          <2> 	jmp findday
  5286                              <2> time:
  5287 00003FDB E84F010000          <2> 	call tstackput1
  5288 00003FE0 B00A                <2> 	mov al,10			;Get RTC register A
  5289 00003FE2 E879010000          <2> 	call tget1
  5290 00003FE7 A880                <2> 	test al,0x80			;Is update in progress?
  5291 00003FE9 75F0                <2> 	jne time				; yes, wait
  5292                              <2> 
  5293 00003FEB B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5294 00003FED E86E010000          <2> 	call tget1
  5295 00003FF2 A2[9E410000]        <2> 	mov [RTCtimeSecond],al
  5296                              <2> 
  5297 00003FF7 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5298 00003FF9 E862010000          <2> 	call tget1
  5299 00003FFE A2[9F410000]        <2> 	mov [RTCtimeMinute],al
  5300                              <2> 
  5301 00004003 B004                <2> 	mov al,0x04			;Get hours (see notes)
  5302 00004005 E856010000          <2> 	call tget1
  5303 0000400A A2[A0410000]        <2> 	mov [RTCtimeHour],al
  5304                              <2> 
  5305 0000400F B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5306 00004011 E84A010000          <2> 	call tget1
  5307 00004016 A2[A1410000]        <2> 	mov [RTCtimeDay],al
  5308                              <2> 
  5309 0000401B B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5310 0000401D E83E010000          <2> 	call tget1
  5311 00004022 A2[A2410000]        <2> 	mov [RTCtimeMonth],al
  5312                              <2> 
  5313 00004027 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5314 00004029 E832010000          <2> 	call tget1
  5315 0000402E A2[A3410000]        <2> 	mov [RTCtimeYear],al
  5316                              <2> 	
  5317 00004033 BE[A7410000]        <2> 	mov esi, timeshow
  5318 00004038 8A2D[A0410000]      <2> 	mov ch, [RTCtimeHour]
  5319 0000403E E828010000          <2> 	call tput1
  5320 00004043 8A2D[9F410000]      <2> 	mov ch, [RTCtimeMinute]
  5321 00004049 E81D010000          <2> 	call tput1
  5322 0000404E 8A2D[9E410000]      <2> 	mov ch, [RTCtimeSecond]
  5323 00004054 E812010000          <2> 	call tput1
  5324 00004059 BE[B0410000]        <2> 	mov esi, dateshow
  5325 0000405E 8A2D[A2410000]      <2> 	mov ch, [RTCtimeMonth]
  5326 00004064 E802010000          <2> 	call tput1
  5327 00004069 8A2D[A1410000]      <2> 	mov ch, [RTCtimeDay]
  5328 0000406F E8F7000000          <2> 	call tput1
  5329 00004074 B520                <2> 	mov ch, 0x20
  5330 00004076 E8F0000000          <2> 	call tput1
  5331 0000407B 4E                  <2> 	dec esi
  5332 0000407C 8A2D[A3410000]      <2> 	mov ch, [RTCtimeYear]
  5333 00004082 E8E4000000          <2> 	call tput1
  5334 00004087 E8BD000000          <2> 	call tstackget1
  5335 0000408C C3                  <2> 	ret
  5336 0000408D BE[A7410000]        <2> 	mov esi, timeshow
  5337 00004092 E865DAFFFF          <2> 	call print
  5338                              <2> ;;get day of week
  5339                              <2> ;;add these:
  5340                              <2> ;;century value
  5341                              <2> ;;last 2 digits of year
  5342                              <2> ;;last 2 digits of year right shifted twice
  5343                              <2> ;;month table value
  5344                              <2> ;;day of the month
  5345                              <2> ;;divide these by 7
  5346                              <2> ;;the remainder is the day
  5347                              <2> findday:
  5348 00004097 31C0                <2> 	xor eax, eax
  5349                              <2> ;;first convert the values from BCD to hex
  5350 00004099 A0[A1410000]        <2> 	mov al, [RTCtimeDay]
  5351 0000409E E873000000          <2> 	call converttohex
  5352 000040A3 8825[A4410000]      <2> 	mov [dayhex], ah
  5353 000040A9 A0[A2410000]        <2> 	mov al, [RTCtimeMonth]
  5354 000040AE E863000000          <2> 	call converttohex
  5355 000040B3 8825[A5410000]      <2> 	mov [monthhex], ah
  5356 000040B9 A0[A3410000]        <2> 	mov al, [RTCtimeYear]
  5357 000040BE E853000000          <2> 	call converttohex
  5358 000040C3 8825[A6410000]      <2> 	mov [yearhex], ah
  5359 000040C9 31C0                <2> 	xor eax, eax
  5360 000040CB A0[A6410000]        <2> 	mov al, [yearhex]
  5361 000040D0 C0E802              <2> 	shr al, 2
  5362 000040D3 0205[A6410000]      <2> 	add al, [yearhex]
  5363 000040D9 0506000000          <2> 	add eax, 6
  5364 000040DE 31DB                <2> 	xor ebx, ebx
  5365 000040E0 8A1D[A5410000]      <2> 	mov bl, [monthhex]
  5366 000040E6 FECB                <2> 	dec bl
  5367 000040E8 81C3[C5410000]      <2> 	add ebx, month
  5368 000040EE 31C9                <2> 	xor ecx, ecx
  5369 000040F0 8A0B                <2> 	mov cl, [ebx]
  5370 000040F2 01C8                <2> 	add eax, ecx
  5371 000040F4 8A0D[A4410000]      <2> 	mov cl, [dayhex]
  5372 000040FA 01C8                <2> 	add eax, ecx
  5373 000040FC 66BB0700            <2> 	mov bx, 7
  5374 00004100 31D2                <2> 	xor edx, edx
  5375 00004102 66F7F3              <2> 	div bx
  5376 00004105 C1E202              <2> 	shl edx, 2
  5377 00004108 81C2[D1410000]      <2> 	add edx, day
  5378 0000410E 8B32                <2> 	mov esi, [edx]
  5379 00004110 E8E7D9FFFF          <2> 	call print
  5380 00004115 C3                  <2> 	ret
  5381                              <2> 	
  5382                              <2> converttohex:
  5383 00004116 88C4                <2> 	mov ah, al
  5384 00004118 C0E804              <2> 	shr al, 4
  5385 0000411B C0E404              <2> 	shl ah, 4
  5386 0000411E C0EC04              <2> 	shr ah, 4
  5387 00004121 3C00                <2> 	cmp al, 0
  5388 00004123 7409                <2> 	je noconverttohex
  5389                              <2> converttohexlp:
  5390 00004125 80C40A              <2> 	add ah, 10
  5391 00004128 FEC8                <2> 	dec al
  5392 0000412A 3C00                <2> 	cmp al, 0
  5393 0000412C 75F7                <2> 	jne converttohexlp
  5394                              <2> noconverttohex:
  5395 0000412E C3                  <2> 	ret
  5396                              <2> 	
  5397                              <2> tstackput1:
  5398 0000412F 8935[9A410000]      <2> 	mov [tstack + 20], esi
  5399 00004135 BE[86410000]        <2> 	mov esi, tstack
  5400 0000413A 8906                <2> 	mov [esi], eax
  5401 0000413C 895E04              <2> 	mov [esi + 4], ebx
  5402 0000413F 894E08              <2> 	mov [esi + 8], ecx
  5403 00004142 89560C              <2> 	mov [esi + 12], edx
  5404 00004145 897E10              <2> 	mov [esi + 16], edi
  5405 00004148 C3                  <2> 	ret
  5406                              <2> 	
  5407                              <2> tstackget1:
  5408 00004149 BE[86410000]        <2> 	mov esi, tstack
  5409 0000414E 8B06                <2> 	mov eax, [esi]
  5410 00004150 8B5E04              <2> 	mov ebx, [esi + 4]
  5411 00004153 8B4E08              <2> 	mov ecx, [esi + 8]
  5412 00004156 8B560C              <2> 	mov edx, [esi + 12]
  5413 00004159 8B7E10              <2> 	mov edi, [esi + 16]
  5414 0000415C 8B7614              <2> 	mov esi, [esi + 20]
  5415 0000415F C3                  <2> 	ret
  5416                              <2> 	
  5417                              <2> tget1:
  5418 00004160 66BA7000            <2> 	mov dx, 0x70
  5419 00004164 EE                  <2> 	out dx, al
  5420 00004165 6642                <2> 	inc dx
  5421 00004167 EC                  <2> 	in al, dx
  5422 00004168 664A                <2> 	dec dx
  5423 0000416A C3                  <2> 	ret
  5424                              <2> 	
  5425                              <2> tput1:
  5426 0000416B 66C1E904            <2> 	shr cx, 4
  5427 0000416F B030                <2> 	mov al, 48
  5428 00004171 00E8                <2> 	add al, ch
  5429 00004173 8806                <2> 	mov [esi], al
  5430 00004175 46                  <2> 	inc esi
  5431 00004176 B030                <2> 	mov al, 48
  5432 00004178 C0E904              <2> 	shr cl, 4
  5433 0000417B 00C8                <2> 	add al, cl
  5434 0000417D 8806                <2> 	mov [esi], al
  5435 0000417F 81C602000000        <2> 	add esi, 2
  5436 00004185 C3                  <2> 	ret
  5437                              <2> 		
  5438 00004186 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5439 0000418F 000000000000000000- <2>
  5440 00004198 000000000000        <2>
  5441 0000419E 00                  <2> 	RTCtimeSecond db 0
  5442 0000419F 00                  <2> 	RTCtimeMinute db 0
  5443 000041A0 00                  <2> 	RTCtimeHour db 0
  5444 000041A1 00                  <2> 	RTCtimeDay db 0
  5445 000041A2 00                  <2> 	RTCtimeMonth db 0
  5446 000041A3 00                  <2> 	RTCtimeYear db 0
  5447 000041A4 00                  <2> 	dayhex db 0
  5448 000041A5 00                  <2> 	monthhex db 0
  5449 000041A6 00                  <2> 	yearhex db 0
  5450 000041A7 30303A30303A30300A  <2> 	timeshow db "00:00:00",10
  5451 000041B0 30302D30302D303030- <2> 	dateshow db "00-00-0000",10,0
  5452 000041B9 300A00              <2>
  5453                              <2> 	oldcentury:	;;from 1700 to 1900
  5454 000041BC 040200              <2> 	db 4,2,0
  5455                              <2> 	century:	;;from 2000 to 2500
  5456 000041BF 060402000604        <2> 	db 6,4,2,0,6,4
  5457                              <2> 	month:
  5458 000041C5 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5459 000041CE 000305              <2>
  5460                              <2> 	day:
  5461 000041D1 [ED410000]          <2> 	dd sunday
  5462 000041D5 [F5410000]          <2> 	dd monday
  5463 000041D9 [FD410000]          <2> 	dd tuesday
  5464 000041DD [06420000]          <2> 	dd wednesday
  5465 000041E1 [11420000]          <2> 	dd thursday
  5466 000041E5 [1B420000]          <2> 	dd friday
  5467 000041E9 [23420000]          <2> 	dd saturday
  5468                              <2> sunday:
  5469 000041ED 53756E6461790A00    <2> 	db "Sunday",10,0
  5470                              <2> monday:
  5471 000041F5 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5472                              <2> tuesday:
  5473 000041FD 547565736461790A00  <2> 	db "Tuesday",10,0
  5474                              <2> wednesday:
  5475 00004206 5765646E6573646179- <2> 	db "Wednesday",10,0
  5476 0000420F 0A00                <2>
  5477                              <2> thursday:
  5478 00004211 54687572736461790A- <2> 	db "Thursday",10,0
  5479 0000421A 00                  <2>
  5480                              <2> friday:
  5481 0000421B 4672696461790A00    <2> 	db "Friday",10,0
  5482                              <2> saturday:
  5483 00004223 53617475726461790A- <2> 	db "Saturday",10,0
  5484 0000422C 00                  <2>
  5485                              <1> %include 'source/programs/turnoff.asm'
  5486 0000422D FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  5487 00004236 00                  <2>
  5488                              <2> 	turnoff:
  5489 00004237 66BB[5242]          <2> 			mov bx, shutdown
  5490 0000423B 66891D[780C0000]    <2> 			mov [realmodeptr], bx
  5491 00004242 BB[7C420000]        <2> 			mov ebx, halt
  5492 00004247 891D[740C0000]      <2> 			mov [realmodereturn], ebx
  5493 0000424D E90BC9FFFF          <2> 			jmp realmode
  5494                              <2> 
  5495                              <2> [BITS 16]
  5496                              <2> 		shutdown:
  5497 00004252 B453                <2> 			mov ah, 0x53
  5498 00004254 B004                <2> 			mov al, 4
  5499 00004256 31DB                <2> 			xor bx, bx
  5500 00004258 CD15                <2> 			int 0x15
  5501                              <2> 			
  5502 0000425A B453                <2> 			mov ah, 0x53
  5503 0000425C B001                <2> 			mov al, 1
  5504 0000425E 31DB                <2> 			xor bx, bx
  5505 00004260 CD15                <2> 			int 0x15
  5506                              <2> 			
  5507 00004262 B453                <2> 			mov ah, 0x53
  5508 00004264 B008                <2> 			mov al, 8
  5509 00004266 BB0100              <2> 			mov bx, 1
  5510 00004269 B90100              <2> 			mov cx, 1
  5511 0000426C CD15                <2> 			int 0x15
  5512                              <2> 			
  5513 0000426E B453                <2> 			mov ah, 0x53
  5514 00004270 B007                <2> 			mov al, 7
  5515 00004272 BB0100              <2> 			mov bx, 1
  5516 00004275 B90300              <2> 			mov cx, 3
  5517 00004278 CD15                <2> 			int 0x15
  5518 0000427A EBFE                <2> 			jmp $
  5519                              <2> 			[BITS 32]
  5520 0000427C EBFE                <2> halt: jmp $
  5521                              <1> %include 'source/programs/wait.asm'
  5522 0000427E FF2C7761697400      <2> db 255,44,"wait",0
  5523                              <2> waitkey:
  5524 00004285 E8D4DCFFFF          <2> 		call getchar
  5525 0000428A C3                  <2> 		ret
  5526                              <1> %include 'source/programs/while.asm'
  5527 0000428B FF2C7768696C6500    <2> db 255,44,"while",0
  5528 00004293 30C0                <2> whilecmd:  xor al, al
  5529 00004295 3805[20760000]      <2> 	cmp [BATCHISON], al
  5530 0000429B 0F84F0F1FFFF        <2> 	je near notbatch
  5531 000042A1 8B35[1C760000]      <2> 	mov esi, [BATCHPOS]
  5532 000042A7 81EE02000000        <2> 	sub esi, 2
  5533 000042AD 4E                  <2> whilefnd: dec esi
  5534 000042AE 8A06                <2> 	mov al, [esi]
  5535 000042B0 3C0A                <2> 	cmp al, 10
  5536 000042B2 0F840A000000        <2> 	je near whilefnd2
  5537 000042B8 3C00                <2> 	cmp al, 0
  5538 000042BA 0F8402000000        <2> 	je near whilefnd2
  5539 000042C0 EBEB                <2> 	jmp whilefnd
  5540                              <2> whilefnd2:
  5541 000042C2 46                  <2> 	inc esi
  5542 000042C3 8935[22760000]      <2> 	mov [LOOPPOS], esi
  5543 000042C9 C605[21760000]01    <2> 	mov BYTE [LOOPON], 1
  5544 000042D0 BE[268A0000]        <2> 	mov esi, buftxt
  5545 000042D5 BB[268A0000]        <2> 	mov ebx, buftxt
  5546 000042DA 81C306000000        <2> 	add ebx, 6
  5547 000042E0 E909F7FFFF          <2> 	jmp chkeqsn
  5548                              <1> progend:		;programs end here	
  5549                              <1> batchprogend:
  5550                                  	%include "source/hardware.asm"
  5551                              <1> %ifdef gui.included
  5552                              <1> 	%include "source/drivers/video/vesa.asm"
  5553                              <1> 	%include "source/drivers/input/mouse.asm"
  5554                              <1> %endif
  5555                              <1> %include "source/drivers/sound/pcspkr.asm"
  5556                              <2> ;PC Speaker Drivers
  5557                              <2> PCSpeakerRAW:
  5558 000042E5 60                  <2> 	pusha
  5559                              <2> nosoundrep:
  5560 000042E6 8B35[3B020000]      <2> 	mov esi, [soundpos]
  5561 000042EC 31C9                <2> 	xor ecx, ecx
  5562 000042EE 668B0D[39020000]    <2> 	mov cx, [soundrepititions]
  5563 000042F5 6681F90000          <2> 	cmp cx, 0
  5564 000042FA 0F8548000000        <2> 	jne near donesetpitch
  5565 00004300 668B0E              <2> 	mov cx, [esi]
  5566 00004303 668B5E02            <2> 	mov bx, [esi + 2]
  5567 00004307 66890D[39020000]    <2> 	mov [soundrepititions], cx
  5568 0000430E 81C604000000        <2> 	add esi, 4
  5569 00004314 8935[3B020000]      <2> 	mov [soundpos], esi
  5570 0000431A 3B35[3F020000]      <2> 	cmp esi, [soundendpos]
  5571 00004320 7735                <2> 	ja stopsound
  5572 00004322 66813D[39020000]00- <2> 	cmp word [soundrepititions], 0
  5573 0000432A 00                  <2>
  5574 0000432B 74B9                <2> 	je nosoundrep
  5575 0000432D 6681FB0000          <2> 	cmp bx, 0
  5576 00004332 740F                <2> 	je nosoundplay
  5577 00004334 E840000000          <2> 	call setpitch
  5578 00004339 E849000000          <2> 	call startsound
  5579 0000433E E905000000          <2> 	jmp donesetpitch
  5580                              <2> nosoundplay:
  5581 00004343 E846000000          <2> 	call killsound
  5582                              <2> donesetpitch:
  5583 00004348 6649                <2> 	dec cx
  5584 0000434A 66890D[39020000]    <2> 	mov [soundrepititions], cx
  5585 00004351 61                  <2> 	popa
  5586 00004352 E921BFFFFF          <2> 	jmp timerinterrupt
  5587                              <2> stopsound:
  5588 00004357 31C0                <2> 	xor eax, eax
  5589 00004359 66A3[39020000]      <2> 	mov [soundrepititions], ax
  5590 0000435F A2[38020000]        <2> 	mov [soundon], al
  5591 00004364 A3[3B020000]        <2> 	mov [soundpos], eax
  5592 00004369 A3[3F020000]        <2> 	mov [soundendpos], eax
  5593 0000436E E81B000000          <2> 	call killsound
  5594 00004373 61                  <2> 	popa
  5595 00004374 E9FFBEFFFF          <2> 	jmp timerinterrupt
  5596                              <2> 
  5597                              <2> 
  5598                              <2> setpitch:
  5599 00004379 B0B6                <2> 	mov al, 0xB6
  5600 0000437B E643                <2> 	out 0x43, al
  5601 0000437D 6689D8              <2> 	mov ax, bx
  5602 00004380 E642                <2> 	out 0x42, al
  5603 00004382 88E0                <2> 	mov al, ah
  5604 00004384 E642                <2> 	out 0x42, al
  5605 00004386 C3                  <2> 	ret
  5606                              <2> startsound:
  5607 00004387 E461                <2> 	in al, 0x61
  5608 00004389 0C03                <2> 	or al, 3
  5609 0000438B E661                <2> 	out 0x61, al
  5610 0000438D C3                  <2> 	ret
  5611                              <2> killsound:
  5612 0000438E E461                <2> 	in al, 0x61
  5613 00004390 24FC                <2> 	and al, 0xFC
  5614 00004392 E661                <2> 	out 0x61, al
  5615 00004394 C3                  <2> 	ret
  5616                              <2> 	
  5617                              <1> %ifdef sound.included
  5618                              <1> 	%include "source/drivers/sound/sblaster.asm"
  5619                              <1> %endif
  5620                              <1> %ifdef rtl8139.included
  5621                              <1> 	%include "source/drivers/network/rtl8139.asm"
  5622                              <1> %endif
  5623                              <1> %ifdef io.serial
  5624                              <1> 	%include "source/drivers/input/serial.asm"
  5625                              <1> %else
  5626                              <1> 	%include "source/drivers/input/keyboard.asm"
  5627 00004395 00                  <2> specialkey db 0
  5628 00004396 00                  <2> charregion db 0
  5629                              <2> waitforinput:		;;this is basically the idle process
  5630                              <2> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  5631                              <2> 					;;this lets the cpu stay at close to 0% instead of 100%
  5632 00004397 6631C0              <2> 	xor ax, ax
  5633 0000439A A0[664B0000]        <2> 	mov al, [threadson]
  5634 0000439F 8825[664B0000]      <2> 	mov [threadson], ah
  5635 000043A5 FB                  <2> 	sti
  5636 000043A6 F4                  <2> 	hlt
  5637 000043A7 A2[664B0000]        <2> 	mov [threadson], al
  5638 000043AC 3A25[AE1F0000]      <2> 	cmp ah, [trans]
  5639 000043B2 7401                <2> 	je getkey
  5640 000043B4 C3                  <2> 	ret
  5641                              <2> getkey:
  5642 000043B5 31C0                <2> 		xor eax, eax
  5643 000043B7 A2[95430000]        <2> 		mov [specialkey], al
  5644 000043BC 66A3[AC1F0000]      <2> 		mov [lastkey], ax
  5645 000043C2 E464                <2> 		in al, 64h ; Status
  5646                              <2> %ifdef gui.included
  5647                              <2> 		test al, 20h ; PS2-Mouse?
  5648                              <2> 		jnz near moused
  5649                              <2> %endif
  5650 000043C4 A801                <2> 		test al, 1 
  5651 000043C6 74CF                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process (only works when it is jz guistartin2, use jz guistartin to disable)
  5652                              <2> 	calckey:
  5653 000043C8 E460                <2> 		in al, 60h
  5654 000043CA 88C4                <2> 		mov ah, al
  5655 000043CC 30C0                <2> 		xor al, al
  5656 000043CE 8825[AD1F0000]      <2> 		mov [lastkey + 1], ah
  5657 000043D4 88E0                <2> 		mov al, ah
  5658 000043D6 BF[6F450000]        <2> 		mov edi, scancode
  5659                              <2> 	searchscan: 
  5660 000043DB 3C3A                <2> 		cmp al, 3Ah
  5661 000043DD 731A                <2> 		jae scanother
  5662 000043DF 30E4                <2> 		xor ah, ah
  5663 000043E1 C0E002              <2> 		shl al, 2
  5664 000043E4 01C7                <2> 		add edi, eax
  5665 000043E6 D0E8                <2> 		shr al, 1
  5666 000043E8 01C7                <2> 		add edi, eax
  5667 000043EA D0E8                <2> 		shr al, 1
  5668 000043EC 8A27                <2> 		mov ah, [edi]
  5669 000043EE 80FC00              <2> 		cmp ah, 0
  5670 000043F1 7406                <2> 		je scanother
  5671 000043F3 E9D7000000          <2> 		jmp scanfound
  5672 000043F8 00                  <2> uppercase db 0
  5673                              <2> scanother:
  5674 000043F9 88C4                <2> 		mov ah, al
  5675 000043FB 30C0                <2> 		xor al, al
  5676 000043FD 66A3[AC1F0000]      <2> 		mov [lastkey], ax
  5677 00004403 80FCE0              <2> 		cmp ah, 0E0h
  5678 00004406 0F847D000000        <2> 		je near getkeyspecial
  5679 0000440C 803D[95430000]E0    <2> 		cmp byte [specialkey], 0xE0
  5680 00004413 752B                <2> 		jne nospecialkey
  5681 00004415 80FC38              <2> 		cmp ah, 38h
  5682 00004418 0F84A0000000        <2> 		je near alton
  5683 0000441E 80FCB8              <2> 		cmp ah, 0B8h
  5684 00004421 0F849F000000        <2> 		je near altoff
  5685 00004427 80FC1D              <2> 		cmp ah, 1Dh
  5686 0000442A 0F847E000000        <2> 		je near ctron
  5687 00004430 80FC9D              <2> 		cmp ah, 9Dh
  5688 00004433 0F847D000000        <2> 		je near ctroff
  5689 00004439 66A3[AC1F0000]      <2> 		mov [lastkey], ax
  5690 0000443F C3                  <2> 		ret
  5691                              <2> nospecialkey:
  5692 00004440 80FC2A              <2> 		cmp ah, 2Ah
  5693 00004443 0F8455000000        <2> 		je near shifton
  5694 00004449 80FC36              <2> 		cmp ah, 36h
  5695 0000444C 0F844C000000        <2> 		je near shifton
  5696 00004452 80FC1C              <2> 		cmp ah, 1Ch
  5697 00004455 0F8473000000        <2> 		je near entdown
  5698 0000445B 80FCAA              <2> 		cmp ah, 0AAh
  5699 0000445E 0F8442000000        <2> 		je near shiftoff
  5700 00004464 80FCB6              <2> 		cmp ah, 0B6h
  5701 00004467 0F8439000000        <2> 		je near shiftoff
  5702 0000446D 80FC3A              <2> 		cmp ah, 3Ah
  5703 00004470 0F84A5000000        <2> 		je near capslock
  5704 00004476 80FC45              <2> 		cmp ah, 0x45
  5705 00004479 0F84AD000000        <2> 		je near numlock
  5706 0000447F 80FC46              <2> 		cmp ah, 0x46
  5707 00004482 0F84BC000000        <2> 		je near scrolllock
  5708 00004488 C3                  <2> 		ret
  5709                              <2> 	getkeyspecial:
  5710 00004489 C605[95430000]E0    <2> 		mov byte [specialkey], 0xE0
  5711 00004490 E933FFFFFF          <2> 		jmp calckey
  5712                              <2> 	shift:
  5713 00004495 A0[F8430000]        <2> 		mov al, [uppercase]
  5714 0000449A 3C01                <2> 		cmp al, 1
  5715 0000449C 7308                <2> 		jae shiftoff
  5716                              <2> 	shifton:
  5717 0000449E C605[F8430000]01    <2> 		mov byte [uppercase], 1
  5718 000044A5 C3                  <2> 		ret
  5719                              <2> 	shiftoff:
  5720 000044A6 C605[F8430000]00    <2> 		mov byte [uppercase], 0
  5721 000044AD C3                  <2> 		ret
  5722                              <2> 	ctron:
  5723 000044AE C605[1A450000]01    <2> 		mov byte [ctrkey], 1
  5724 000044B5 C3                  <2> 		ret
  5725                              <2> 	ctroff:
  5726 000044B6 C605[1A450000]00    <2> 		mov byte [ctrkey], 0
  5727 000044BD C3                  <2> 		ret
  5728                              <2> 	alton:
  5729 000044BE C605[19450000]01    <2> 		mov byte [altkey], 1
  5730 000044C5 C3                  <2> 		ret
  5731                              <2> 	altoff:
  5732 000044C6 C605[19450000]00    <2> 		mov byte [altkey], 0
  5733 000044CD C3                  <2> 		ret
  5734                              <2> 	entdown:
  5735 000044CE C3                  <2> 		ret
  5736                              <2> 	scanfound:
  5737 000044CF 81C704000000        <2> 		add edi, 4
  5738 000044D5 803D[1A450000]01    <2> 		cmp byte [ctrkey], 1
  5739 000044DC 731B                <2> 		jae altin
  5740 000044DE 81EF04000000        <2> 		sub edi, 4
  5741 000044E4 81C702000000        <2> 		add edi, 2
  5742 000044EA 803D[19450000]01    <2> 		cmp byte [altkey], 1
  5743 000044F1 7306                <2> 		jae altin
  5744 000044F3 81EF02000000        <2> 		sub edi, 2
  5745                              <2> altin:
  5746 000044F9 81C701000000        <2> 		add edi, 1
  5747 000044FF 803D[F8430000]01    <2> 		cmp byte [uppercase], 1
  5748 00004506 7306                <2> 		jae uppercaseon
  5749 00004508 81EF01000000        <2> 		sub edi, 1
  5750                              <2> uppercaseon:
  5751 0000450E 8A07                <2> 		mov al,[edi]
  5752 00004510 A2[AC1F0000]        <2> 		mov [lastkey], al
  5753 00004515 C3                  <2> 		ret
  5754                              <2> 		
  5755 00004516 00                  <2> keyboardstatus db 0
  5756 00004517 00                  <2> numlockstatus db 0
  5757 00004518 00                  <2> scrolllockstatus db 0
  5758 00004519 00                  <2> altkey db 0
  5759 0000451A 00                  <2> ctrkey db 0
  5760                              <2> 	capslock:
  5761 0000451B 8035[16450000]04    <2> 		xor byte [keyboardstatus], 00000100b
  5762 00004522 E835000000          <2> 		call updatekblights
  5763 00004527 E969FFFFFF          <2> 		jmp shift
  5764                              <2> 		
  5765                              <2> 	numlock:
  5766 0000452C 8035[16450000]02    <2> 		xor byte [keyboardstatus], 00000010b
  5767 00004533 8035[17450000]01    <2> 		xor byte [numlockstatus], 1
  5768 0000453A E81D000000          <2> 		call updatekblights
  5769 0000453F E971FEFFFF          <2> 		jmp getkey
  5770                              <2> 	
  5771                              <2> 	scrolllock:
  5772 00004544 8035[16450000]01    <2> 		xor byte [keyboardstatus], 00000001b
  5773 0000454B 8035[18450000]01    <2> 		xor byte [scrolllockstatus], 1
  5774 00004552 E805000000          <2> 		call updatekblights
  5775 00004557 E959FEFFFF          <2> 		jmp getkey
  5776                              <2> 		
  5777                              <2> 	updatekblights:
  5778 0000455C B0ED                <2> 		mov al, 0xED
  5779 0000455E 66BA6000            <2> 		mov dx, 0x60
  5780 00004562 EE                  <2> 		out dx, al
  5781                              <2> 	chkkbdack:
  5782 00004563 EC                  <2> 		in al, dx
  5783 00004564 3CFA                <2> 		cmp al, 0xFA
  5784 00004566 75FB                <2> 		jne chkkbdack
  5785 00004568 A0[16450000]        <2> 		mov al, [keyboardstatus]
  5786 0000456D EE                  <2> 		out dx, al
  5787 0000456E C3                  <2> 		ret
  5788                              <2> 		
  5789                              <2> scancode:
  5790 0000456F 000000000000        <2> 	db 0,0,0,0,0,0				;0h
  5791 00004575 000000000000        <2> 	db 0,0,0,0,0,0				;1h
  5792 0000457B 3121AD000000        <2> 	db '1','!',0xAD,0,0,0		;2h
  5793 00004581 3240FDFB0000        <2> 	db '2','@',0xFD,0xFB,0,0	;3h
  5794 00004587 332300000000        <2> 	db '3','#',0,0,0,0			;4h
  5795 0000458D 34249B9C0000        <2> 	db '4','$',0x9B,0x9C,0,0	;5h
  5796 00004593 3525EE000000        <2> 	db '5','%',0xEE,0,0,0		;6h
  5797 00004599 365EAC000000        <2> 	db '6','^',0xAC,0,0,0		;7h
  5798 0000459F 3726AB000000        <2> 	db '7','&',0xAB,0,0,0		;8h
  5799 000045A5 382AEC000000        <2> 	db '8','*',0xEC,0,0,0		;9h
  5800 000045AB 392800000000        <2> 	db '9','(',0,0,0,0			;0Ah
  5801 000045B1 302900000000        <2> 	db '0',')',0,0,0,0			;0Bh
  5802 000045B7 2D5F9DF10000        <2> 	db '-','_',0x9D,0xF1,0,0	;0Ch
  5803 000045BD 3D2BF7F60000        <2> 	db '=','+',0xF7,0xF6,0,0	;0Dh
  5804 000045C3 080800000000        <2> 	db 8,8,0,0,0,0				;0Eh
  5805 000045C9 000000000000        <2> 	db 0,0,0,0,0,0				;0Fh
  5806 000045CF 7151848E0000        <2> 	db 'q','Q',0x84,0x8E,0,0	;10h
  5807 000045D5 7757868F0000        <2> 	db 'w','W',0x86,0x8F,0,0	;11h
  5808 000045DB 65458290EE45        <2> 	db 'e','E',0x82,0x90,0xEE,'E'	;12h
  5809 000045E1 7252898A7050        <2> 	db 'r','R',0x89,0x8A,'p','P'	;13h
  5810 000045E7 7454819AE754        <2> 	db 't','T',0x81,0x9A,0xE7,'T'	;14h
  5811 000045ED 795998007559        <2> 	db 'y','Y',0x98,0,'u','Y'	;15h
  5812 000045F3 7555A3970000        <2> 	db 'u','U',0xA3,0x97,0,0		;16h
  5813 000045F9 6949A18D6949        <2> 	db 'i','I',0xA1,0x8D,'i','I'	;17h
  5814 000045FF 6F4FA29577EA        <2> 	db 'o','O',0xA2,0x95,'w',0xEA	;18h
  5815 00004605 70509499E3EF        <2> 	db 'p','P',0x94,0x99,0xE3,0xEF	;19h
  5816 0000460B 5B7BF4000000        <2> 	db '[','{',0xF4,0,0,0		;1Ah
  5817 00004611 5D7DF5000000        <2> 	db ']','}',0xF5,0,0,0		;1Bh
  5818 00004617 000000000000        <2> 	db 0,0,0,0,0,0				;1Ch
  5819 0000461D 000000000000        <2> 	db 0,0,0,0,0,0				;1Dh
  5820 00004623 6141A085E041        <2> 	db 'a','A',0xA0,133,224,'A'	;1Eh
  5821 00004629 73531500E5E4        <2> 	db 's','S',21,0,229,228		;1Fh
  5822 0000462F 6444F800EB7F        <2> 	db 'd','D',0xF8,0,235,127	;20h
  5823 00004635 66469F00EDE8        <2> 	db 'f','F',159,0,237,232	;21h
  5824 0000463B 6747000079E2        <2> 	db 'g','G',0,0,'y',226		;22h
  5825 00004641 684800006E48        <2> 	db 'h','H',0,0,'n','H'		;23h
  5826 00004647 6A4A00000000        <2> 	db 'j','J',0,0,0,0			;24h
  5827 0000464D 6B4B00006B4B        <2> 	db 'k','K',0,0,'k','K'		;25h
  5828 00004653 6C4C0000E9E9        <2> 	db 'l','L',0,0,233,233		;26h
  5829 00004659 3B3A14000000        <2> 	db ';',':',20,0,0,0			;27h
  5830 0000465F 272200000000        <2> 	db 27h,22h,0,0,0,0			;28h
  5831 00004665 607E00000000        <2> 	db '`','~',0,0,0,0			;29h
  5832 0000466B 000000000000        <2> 	db 0,0,0,0,0,0				;2Ah
  5833 00004671 5C7CAAB30000        <2> 	db 92,'|',170,179,0,0		;2Bh
  5834 00004677 7A5A91927A5A        <2> 	db 'z','Z',145,146,'z','Z'	;2Ch
  5835 0000467D 7858000000F0        <2> 	db 'x','X',0,0,0,240		;2Dh
  5836 00004683 634387800000        <2> 	db 'c','C',135,128,0,0		;2Eh
  5837 00004689 765600000000        <2> 	db 'v','V',0,0,0,0			;2Fh
  5838 0000468F 62420000E142        <2> 	db 'b','B',0,0,225,'B'		;30h
  5839 00004695 6E4EA4A5764E        <2> 	db 'n','N',0xA4,0xA5,'v','N'	;31h
  5840 0000469B 6D4D0000E64D        <2> 	db 'm','M',0,0,230,'M'		;32h
  5841 000046A1 2C3CF3AE0000        <2> 	db ',','<',0xF3,174,0,0		;33h
  5842 000046A7 2E3EF2AF0000        <2> 	db '.','>',0xF2,175,0,0		;34h
  5843 000046AD 2F3FA8000000        <2> 	db '/','?',0xA8,0,0,0		;35h
  5844 000046B3 000000000000        <2> 	db 0,0,0,0,0,0				;36h
  5845 000046B9 000000000000        <2> 	db 0,0,0,0,0,0				;37h
  5846 000046BF 000000000000        <2> 	db 0,0,0,0,0,0				;38h
  5847 000046C5 202000000000        <2> 	db ' ',' ',0,0,0,0			;39h
  5848                              <2> noscan:
  5849                              <2> 
  5850                              <1> %endif
  5851                              <1> ;drivers will soon be handled intelligently
  5852                              <1> ;every driver's source will be scanned for a .init function
  5853                              <1> ;that will be called and if it returns 0
  5854                              <1> ;the hardware was found and the driver initialized properly
  5855                              <1> initialize:
  5856                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  5857 000046CB E80F000000          <1> 	call .pic
  5858 000046D0 E837000000          <1> 	call .pit
  5859 000046D5 E859000000          <1> 	call .fpu
  5860 000046DA 31C0                <1> 	xor eax, eax
  5861 000046DC 31C9                <1> 	xor ecx, ecx
  5862                              <1> %ifdef sound.included
  5863                              <1> 	call sblaster.init
  5864                              <1> %endif
  5865                              <1> %ifdef io.serial
  5866                              <1> 	call serial.init
  5867                              <1> %endif
  5868 000046DE C3                  <1> 	ret
  5869                              <1> 	
  5870                              <1> .pic:
  5871 000046DF B011                <1> 	mov al, 0x11
  5872 000046E1 E620                <1> 	out 0x20, al
  5873 000046E3 E6A0                <1> 	out 0xA0, al
  5874 000046E5 B040                <1> 	mov al, 0x40	;interrupt for master
  5875 000046E7 E621                <1> 	out 0x21, al
  5876 000046E9 B048                <1> 	mov al, 0x48	;interrupt for slave
  5877 000046EB E6A1                <1> 	out 0xA1, al
  5878 000046ED B004                <1> 	mov al, 4
  5879 000046EF E621                <1> 	out 0x21, al
  5880 000046F1 B002                <1> 	mov al, 2
  5881 000046F3 E6A1                <1> 	out 0xA1, al
  5882 000046F5 B001                <1> 	mov al, 0x1
  5883 000046F7 E621                <1> 	out 0x21, al
  5884 000046F9 B001                <1> 	mov al, 0x1
  5885 000046FB E6A1                <1> 	out 0xA1, al
  5886                              <1> 	;masks are set to zero so as not to mask
  5887 000046FD 30C0                <1> 	xor al, al
  5888 000046FF E621                <1> 	out 0x21, al
  5889 00004701 30C0                <1> 	xor al, al
  5890 00004703 E6A1                <1> 	out 0xA1, al
  5891 00004705 B020                <1> 	mov al, 0x20
  5892 00004707 E6A0                <1> 	out 0xA0, al
  5893 00004709 E620                <1> 	out 0x20, al
  5894 0000470B C3                  <1> 	ret
  5895                              <1> .pit:
  5896                              <1> 	;initialize the PIT
  5897 0000470C 66A1[2A020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  5898 00004712 E640                <1> 	out 0x40, al
  5899 00004714 66C1C008            <1> 	rol ax, 8
  5900 00004718 E640                <1> 	out 0x40, al
  5901                              <1> 	;enable rtc interrupt
  5902 0000471A B00B                <1> 	mov al, 0xB
  5903 0000471C E670                <1> 	out 0x70, al
  5904 0000471E 66C1C008            <1> 	rol ax, 8
  5905 00004722 E471                <1> 	in al, 0x71
  5906 00004724 66C1C008            <1> 	rol ax, 8
  5907 00004728 E670                <1> 	out 0x70, al
  5908 0000472A 66C1C008            <1> 	rol ax, 8
  5909 0000472E 0C40                <1> 	or al, 0x40
  5910 00004730 E671                <1> 	out 0x71, al
  5911 00004732 C3                  <1> 	ret
  5912                              <1> .fpu:
  5913                              <1> 	;And now to initialize the fpu
  5914 00004733 0F20E0              <1> 	mov eax, cr4
  5915 00004736 0D00020000          <1> 	or eax, 0x200
  5916 0000473B 0F22E0              <1> 	mov cr4, eax
  5917 0000473E B87F0B0000          <1> 	mov eax, 0xB7F
  5918 00004743 50                  <1> 	push eax
  5919 00004744 D92C24              <1> 	fldcw [esp]
  5920 00004747 58                  <1> 	pop eax
  5921 00004748 C3                  <1> 	ret
  5922                              <1> 	
  5923                                      %include "source/pci.asm"
  5924 00004749 00                  <1> pcibus		db 0
  5925 0000474A 00                  <1> pcidevice	db 0
  5926 0000474B 00                  <1> pcifunction	db 0
  5927 0000474C 00                  <1> pciregister	db 0
  5928 0000474D 00                  <1> pcireqtype db 0
  5929                              <1> 
  5930                              <1> getpciport:
  5931 0000474E B001                <1> 	mov al, 1
  5932 00004750 A2[4D470000]        <1> 	mov [pcireqtype], al
  5933 00004755 E916000000          <1> 	jmp searchpci
  5934                              <1> pcidump:
  5935 0000475A 31C0                <1> 	xor eax, eax
  5936 0000475C A2[4B470000]        <1> 	mov [pcifunction], al
  5937 00004761 A2[49470000]        <1> 	mov [pcibus], al
  5938 00004766 A2[4A470000]        <1> 	mov [pcidevice], al
  5939 0000476B A2[4D470000]        <1> 	mov [pcireqtype], al
  5940                              <1> searchpci:		;;return in ebx, start X in pciX
  5941 00004770 30C0                <1> 	xor al, al
  5942 00004772 A2[4C470000]        <1> 	mov [pciregister], al
  5943 00004777 E855010000          <1> 	call getpciaddr
  5944 0000477C BAF80C0000          <1> 	mov edx, 0xCF8
  5945 00004781 EF                  <1> 	out dx, eax	;;request pci config
  5946 00004782 BAFC0C0000          <1> 	mov edx, 0xCFC
  5947 00004787 ED                  <1> 	in eax, dx 	;;read in pci config
  5948 00004788 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  5949 0000478D 0F8237000000        <1> 	jb near checkpcidevice
  5950                              <1> searchpciret:
  5951                              <1> nextpcidevice:
  5952 00004793 30C0                <1> 	xor al, al
  5953 00004795 A2[4B470000]        <1> 	mov [pcifunction], al
  5954 0000479A A0[4A470000]        <1> 	mov al, [pcidevice]
  5955 0000479F 3C1F                <1> 	cmp al, 11111b
  5956 000047A1 0F83C1000000        <1> 	jae near nextpcibus
  5957 000047A7 FEC0                <1> 	inc al
  5958 000047A9 A2[4A470000]        <1> 	mov [pcidevice], al
  5959 000047AE EBC0                <1> 	jmp searchpci
  5960 000047B0 A0[4B470000]        <1> 	mov al, [pcifunction]
  5961 000047B5 3C07                <1> 	cmp al, 111b
  5962 000047B7 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  5963 000047BD FEC0                <1> 	inc al
  5964 000047BF A2[4B470000]        <1> 	mov [pcifunction], al
  5965 000047C4 EBAA                <1> 	jmp searchpci
  5966 000047C6 00000000            <1> pcitype: db 0,0,0,0
  5967                              <1> checkpcidevice:
  5968 000047CA 30C0                <1> 	xor al, al
  5969 000047CC 3805[4D470000]      <1> 	cmp [pcireqtype], al
  5970 000047D2 0F842B000000        <1> 	je near dumppcidevice
  5971 000047D8 B008                <1> 	mov al, 0x08
  5972 000047DA A2[4C470000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  5973 000047DF E8ED000000          <1> 	call getpciaddr
  5974 000047E4 BAF80C0000          <1> 	mov edx, 0xCF8
  5975 000047E9 EF                  <1> 	out dx, eax
  5976 000047EA BAFC0C0000          <1> 	mov edx, 0xCFC
  5977 000047EF ED                  <1> 	in eax, dx
  5978 000047F0 C1C008              <1> 	rol eax, 8
  5979 000047F3 8A1D[C6470000]      <1> 	mov bl, [pcitype]
  5980 000047F9 38D8                <1> 	cmp al, bl
  5981 000047FB 0F8486000000        <1> 	je near foundpciaddr
  5982 00004801 EB90                <1> 	jmp searchpciret
  5983                              <1> dumppcidevice:
  5984 00004803 30C0                <1> 	xor al, al
  5985 00004805 A2[4C470000]        <1> 	mov [pciregister], al
  5986 0000480A E8C2000000          <1> 	call getpciaddr
  5987 0000480F 89C1                <1> 	mov ecx, eax
  5988 00004811 C605[A52B0000]05    <1> 	mov byte [firsthexshown], 5
  5989 00004818 E89DE3FFFF          <1> 	call showhex
  5990                              <1> dumppcidevicelp:
  5991 0000481D A2[4C470000]        <1> 	mov [pciregister], al
  5992 00004822 E8AA000000          <1> 	call getpciaddr
  5993 00004827 BAF80C0000          <1> 	mov edx, 0xCF8
  5994 0000482C EF                  <1> 	out dx, eax
  5995 0000482D BAFC0C0000          <1> 	mov edx, 0xCFC
  5996 00004832 ED                  <1> 	in eax, dx
  5997 00004833 89C1                <1> 	mov ecx, eax
  5998 00004835 A0[4C470000]        <1> 	mov al, [pciregister]
  5999 0000483A 0404                <1> 	add al, 4
  6000 0000483C C605[A52B0000]05    <1> 	mov byte [firsthexshown], 5
  6001 00004843 E872E3FFFF          <1> 	call showhex
  6002 00004848 3C3C                <1> 	cmp al, 0x3C
  6003 0000484A 72D1                <1> 	jb dumppcidevicelp
  6004                              <1> dumppcidn:
  6005                              <1> %ifdef io.serial
  6006                              <1> %else
  6007 0000484C 803D[94210000]00    <1> 	cmp byte [charpos], 0
  6008 00004853 0F843AFFFFFF        <1> 	je near searchpciret
  6009 00004859 BE[B44B0000]        <1> 	mov esi, line
  6010 0000485E E899D2FFFF          <1> 	call print
  6011                              <1> %endif
  6012 00004863 E92BFFFFFF          <1> 	jmp searchpciret
  6013                              <1> nextpcibus:
  6014 00004868 30C0                <1> 	xor al, al
  6015 0000486A A2[4A470000]        <1> 	mov [pcidevice], al
  6016 0000486F A0[49470000]        <1> 	mov al, [pcibus]
  6017 00004874 3C7F                <1> 	cmp al, 1111111b
  6018 00004876 730C                <1> 	jae donesearchpci
  6019 00004878 FEC0                <1> 	inc al
  6020 0000487A A2[49470000]        <1> 	mov [pcibus], al
  6021 0000487F E9ECFEFFFF          <1> 	jmp searchpci
  6022                              <1> donesearchpci:
  6023 00004884 31D2                <1> 	xor edx, edx
  6024 00004886 C3                  <1> 	ret
  6025                              <1> foundpciaddr:
  6026 00004887 B010                <1> 	mov al, 0x10
  6027 00004889 A2[4C470000]        <1> 	mov [pciregister], al
  6028                              <1> findpciioaddr:
  6029 0000488E E83E000000          <1> 	call getpciaddr
  6030 00004893 BAF80C0000          <1> 	mov edx, 0xCF8
  6031 00004898 EF                  <1> 	out dx, eax
  6032 00004899 BAFC0C0000          <1> 	mov edx, 0xCFC
  6033 0000489E ED                  <1> 	in eax, dx
  6034 0000489F 89C3                <1> 	mov ebx, eax
  6035 000048A1 81E301000000        <1> 	and ebx, 1
  6036 000048A7 81FB00000000        <1> 	cmp ebx, 0
  6037 000048AD 0F8408000000        <1> 	je near notpciioaddr
  6038 000048B3 2D01000000          <1> 	sub eax, 1
  6039 000048B8 89C2                <1> 	mov edx, eax
  6040 000048BA C3                  <1> 	ret
  6041                              <1> notpciioaddr:
  6042 000048BB A0[4C470000]        <1> 	mov al, [pciregister]
  6043 000048C0 0404                <1> 	add al, 4
  6044 000048C2 3C28                <1> 	cmp al, 0x28
  6045 000048C4 0F87C9FEFFFF        <1> 	ja near searchpciret
  6046 000048CA A2[4C470000]        <1> 	mov [pciregister], al
  6047 000048CF EBBD                <1> 	jmp findpciioaddr
  6048                              <1> getpciaddr:		;;puts it in eax and ebx
  6049 000048D1 31C0                <1> 			xor eax, eax
  6050 000048D3 BB00000080          <1> 			mov ebx, 0x80000000
  6051 000048D8 A0[49470000]        <1> 			mov al, [pcibus]
  6052 000048DD C1E010              <1> 			shl eax, 16
  6053 000048E0 01C3                <1> 			add ebx, eax
  6054 000048E2 31C0                <1> 			xor eax, eax
  6055 000048E4 A0[4A470000]        <1> 			mov al, [pcidevice]
  6056 000048E9 C1E00B              <1> 			shl eax, 11
  6057 000048EC 01C3                <1> 			add ebx, eax
  6058 000048EE 31C0                <1> 			xor eax, eax
  6059 000048F0 A0[4B470000]        <1> 			mov al, [pcifunction]
  6060 000048F5 C1E008              <1> 			shl eax, 8
  6061 000048F8 01C3                <1> 			add ebx, eax
  6062 000048FA 31C0                <1> 			xor eax, eax
  6063 000048FC A0[4C470000]        <1> 			mov al, [pciregister]
  6064 00004901 01C3                <1> 			add ebx, eax
  6065 00004903 89D8                <1> 			mov eax, ebx
  6066 00004905 C3                  <1> 			ret
  6067                                      %include "source/disk.asm"
  6068                              <1> ;This loads files using the methods in the loaded driver
  6069                              <1> %ifdef disk.real
  6070                              <1> %include "source/drivers/disk/realmode.asm"
  6071                              <2> diskr:
  6072                              <2> 			;read from disk using real mode-it does not work with large files
  6073                              <2> 			;sector count in cl
  6074                              <2> 			;disk number in ch
  6075                              <2> 			;48 bit address with last 32 bits in ebx
  6076                              <2> 			;buffer in esi
  6077                              <2> 			;puts end of buffer in edi and end lba address in edx
  6078 00004906 880D[33490000]      <2> 	mov [sdlength], cl
  6079 0000490C 891D[34490000]      <2> 	mov [sdaddress], ebx
  6080 00004912 8935[924A0000]      <2> 	mov [oldesireal], esi
  6081 00004918 66BE[3849]          <2> 	mov si, readdiskreal
  6082 0000491C 668935[780C0000]    <2> 	mov [realmodeptr], si
  6083 00004923 BE[74490000]        <2> 	mov esi, backfromrealread
  6084 00004928 8935[740C0000]      <2> 	mov [realmodereturn], esi
  6085 0000492E E92AC2FFFF          <2> 	jmp realmode
  6086 00004933 00                  <2> sdlength db 0
  6087 00004934 00000000            <2> sdaddress dd 0
  6088                              <2> 
  6089                              <2> [BITS 16]
  6090                              <2> readdiskreal:
  6091 00004938 C706[6449]1000      <2> 	mov word [dlen], 0x10
  6092 0000493E C706[6849]0000      <2> 	mov word [daddress], 0
  6093 00004944 C706[6A49]0001      <2> 	mov word [dsegm], 0x100
  6094 0000494A 66891E[6C49]        <2> 	mov [dlbaad], ebx
  6095 0000494F 880E[6649]          <2> 	mov [dreadlen], cl
  6096                              <2> ReadHardDisk:
  6097 00004953 BE[6449]            <2> 	mov si, diskaddresspacket
  6098 00004956 31C0                <2> 	xor ax, ax
  6099 00004958 B442                <2> 	mov ah, 0x42
  6100 0000495A 8A16[6349]          <2> 	mov dl, [dnumber]
  6101 0000495E CD13                <2> 	int 0x13
  6102 00004960 72F1                <2> 	jc ReadHardDisk
  6103 00004962 C3                  <2> 	ret
  6104                              <2> 
  6105 00004963 80                  <2> dnumber db 0x80
  6106                              <2> diskaddresspacket:
  6107 00004964 10                  <2> dlen:	db 0x10 ;size of packet
  6108 00004965 00                  <2> 		db 0
  6109 00004966 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  6110 00004968 0000                <2> daddress:	dw 0x0	;address 0
  6111 0000496A 0001                <2> dsegm:		dw 0x100	;segment
  6112                              <2> 		;start with known value for hd
  6113                              <2> dlbaad:
  6114 0000496C 00000000            <2> 	dd 0	;lba address
  6115 00004970 00000000            <2> 	dd 0
  6116                              <2> [BITS 32]
  6117                              <2> backfromrealread:
  6118 00004974 8B35[924A0000]      <2> 	mov esi, [oldesireal]
  6119 0000497A 8B1D[34490000]      <2> 	mov ebx, [sdaddress]
  6120 00004980 31C9                <2> 	xor ecx, ecx
  6121 00004982 8A0D[33490000]      <2> 	mov cl, [sdlength]
  6122 00004988 01CB                <2> 	add ebx, ecx
  6123 0000498A 66B80800            <2> 	mov ax, LINEAR_SEL
  6124 0000498E 8EE0                <2> 	mov fs, ax
  6125 00004990 BF00100000          <2> 	mov edi, 0x1000
  6126 00004995 B200                <2> 	mov dl, 0
  6127 00004997 D0E1                <2> 	shl cl, 1
  6128                              <2> copyfromrmodedisk:
  6129 00004999 648A07              <2> 	mov al, [fs:edi]
  6130 0000499C 8806                <2> 	mov [esi], al
  6131 0000499E 47                  <2> 	inc edi
  6132 0000499F 46                  <2> 	inc esi
  6133 000049A0 FECA                <2> 	dec dl
  6134 000049A2 80FA00              <2> 	cmp dl, 0
  6135 000049A5 75F2                <2> 	jne copyfromrmodedisk
  6136 000049A7 FEC9                <2> 	dec cl
  6137 000049A9 B200                <2> 	mov dl, 0
  6138 000049AB 80F900              <2> 	cmp cl, 0
  6139 000049AE 75E9                <2> 	jne copyfromrmodedisk
  6140 000049B0 66B83000            <2> 	mov ax, NEW_DATA_SEL
  6141 000049B4 8EE0                <2> 	mov fs, ax
  6142 000049B6 89F7                <2> 	mov edi, esi
  6143 000049B8 8B35[924A0000]      <2> 	mov esi, [oldesireal]
  6144 000049BE 89DA                <2> 	mov edx, ebx
  6145 000049C0 8B1D[34490000]      <2> 	mov ebx, [sdaddress]
  6146 000049C6 C3                  <2> 	ret
  6147                              <2> 	
  6148                              <1> %else
  6149                              <1> 	%ifdef disk.protected
  6150                              <1> 	%include "source/drivers/disk/pata.asm"
  6151                              <1> 	%endif
  6152                              <1> %endif
  6153                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  6154                              <1> 			;returns with err code in edx and file end in edi
  6155 000049C7 803F00              <1> 	cmp byte [edi], 0
  6156 000049CA 0F8448000000        <1> 	je near nofileload
  6157 000049D0 89FA                <1> 	mov edx, edi
  6158 000049D2 BB[D95B0000]        <1> 	mov ebx, diskfileindex
  6159                              <1> nextnamechar:
  6160 000049D7 8A07                <1> 	mov al, [edi]
  6161 000049D9 3C26                <1> 	cmp al, '&'
  6162 000049DB 7440                <1> 	je nullfile
  6163 000049DD 8A23                <1> 	mov ah, [ebx]
  6164 000049DF 47                  <1> 	inc edi
  6165 000049E0 43                  <1> 	inc ebx
  6166 000049E1 88C1                <1> 	mov cl, al
  6167 000049E3 08E1                <1> 	or cl, ah
  6168 000049E5 80F900              <1> 	cmp cl, 0
  6169 000049E8 744E                <1> 	je equalfilenames
  6170 000049EA 80F920              <1> 	cmp cl, ' '
  6171 000049ED 7449                <1> 	je equalfilenames
  6172 000049EF 3C2A                <1> 	cmp al, '*'
  6173 000049F1 742B                <1> 	je equalfilenames2
  6174 000049F3 80FC00              <1> 	cmp ah, 0
  6175 000049F6 7410                <1> 	je nextfilename
  6176 000049F8 3C00                <1> 	cmp al, 0
  6177 000049FA 7404                <1> 	je getebxzero
  6178 000049FC 38E0                <1> 	cmp al, ah
  6179 000049FE 74D7                <1> 	je nextnamechar
  6180                              <1> getebxzero:
  6181 00004A00 8A23                <1> 	mov ah, [ebx]
  6182 00004A02 43                  <1> 	inc ebx
  6183 00004A03 80FC00              <1> 	cmp ah, 0
  6184 00004A06 75F8                <1> 	jne getebxzero
  6185                              <1> nextfilename:
  6186 00004A08 81C308000000        <1> 	add ebx, 8		;next descriptor
  6187 00004A0E 89D7                <1> 	mov edi, edx
  6188 00004A10 81FB[605D0000]      <1> 	cmp ebx, enddiskfileindex
  6189 00004A16 72BF                <1> 	jb nextnamechar
  6190                              <1> nofileload:
  6191 00004A18 BA94010000          <1> 	mov edx, 404	;indicate not found error
  6192                              <1> nullfile:
  6193 00004A1D C3                  <1> 	ret
  6194                              <1> equalfilenames2:
  6195 00004A1E 81EB02000000        <1> 	sub ebx, 2
  6196                              <1> eqfilefind:
  6197 00004A24 43                  <1> 	inc ebx
  6198 00004A25 81FB[605D0000]      <1> 	cmp ebx, enddiskfileindex
  6199 00004A2B 0F83E7FFFFFF        <1> 	jae near nofileload
  6200 00004A31 8A03                <1> 	mov al, [ebx]
  6201 00004A33 3C00                <1> 	cmp al, 0
  6202 00004A35 75ED                <1> 	jne eqfilefind
  6203 00004A37 43                  <1> 	inc ebx
  6204                              <1> equalfilenames:
  6205 00004A38 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  6206 00004A3B 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  6207 00004A3D 031D[625D0000]      <1> 	add ebx, [lbaad]	;add offset to solleros
  6208 00004A43 31C9                <1> 	xor ecx, ecx
  6209 00004A45 88C1                <1> 	mov cl, al			;get excess number of sectors
  6210 00004A47 C0E102              <1> 	shl cl, 2
  6211 00004A4A C0E902              <1> 	shr cl, 2			;cut off at 64
  6212 00004A4D 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  6213 00004A4F B500                <1> 	mov ch, 0			;drive 0
  6214 00004A51 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  6215                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  6216 00004A54 A3[964A0000]        <1> 	mov [filetracks], eax
  6217 00004A59 89F7                <1> 	mov edi, esi		;just in case cl is 0
  6218 00004A5B 89DA                <1> 	mov edx, ebx
  6219 00004A5D 80F900              <1> 	cmp cl, 0
  6220 00004A60 7405                <1> 	je copytracksforfile
  6221 00004A62 E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  6222                              <1> copytracksforfile:
  6223 00004A67 A1[964A0000]        <1> 	mov eax, [filetracks]
  6224 00004A6C 3D00000000          <1> 	cmp eax, 0
  6225 00004A71 7419                <1> 	je donecopyfile
  6226 00004A73 48                  <1> 	dec eax
  6227 00004A74 A3[964A0000]        <1> 	mov [filetracks], eax
  6228 00004A79 89D3                <1> 	mov ebx, edx	;get end lba
  6229 00004A7B B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  6230 00004A7D 8A2D[615D0000]      <1> 	mov ch, [DriveNumber]
  6231 00004A83 89FE                <1> 	mov esi, edi	;reset buffer
  6232 00004A85 E87CFEFFFF          <1> 	call diskr
  6233 00004A8A EBDB                <1> 	jmp copytracksforfile
  6234                              <1> donecopyfile:
  6235 00004A8C BA00000000          <1> 	mov edx, 0	;no error
  6236 00004A91 C3                  <1> 	ret
  6237                              <1> 
  6238 00004A92 00000000            <1> oldesireal dd 0
  6239 00004A96 00000000            <1> filetracks dd 0
  6240 00004A9A 00                  <1> lbad1 db 0
  6241 00004A9B 00                  <1> lbad2 db 0
  6242 00004A9C 00                  <1> lbad3 db 0
  6243 00004A9D 00                  <1> lbad4 db 0
  6244 00004A9E 00                  <1> lbad5 db 0
  6245 00004A9F 00                  <1> lbad6 db 0
  6246 00004AA0 6400                <1> segments dw 100
  6247                              <1> 
  6248                              <1> 
  6249                              <1> 	
  6250                                      %include "source/threads.asm"
  6251                              <1> %ifdef threads.included	
  6252                              <1> nwcmdst:
  6253 00004AA2 31C0                <1> 	xor eax, eax
  6254 00004AA4 BC[466F0000]        <1> 	mov esp, stackend
  6255 00004AA9 A2[664B0000]        <1> 	mov [threadson], al
  6256 00004AAE A3[674B0000]        <1> 	mov [currentthread], eax
  6257 00004AB3 0504000000          <1> 	add eax, 4
  6258 00004AB8 A3[624B0000]        <1> 	mov [lastthread], eax
  6259 00004ABD FB                  <1> 	sti
  6260 00004ABE E923DCFFFF          <1> 	jmp nwcmd
  6261                              <1> 
  6262                              <1> nomorethreadspace:
  6263 00004AC3 BE[D94A0000]        <1> 	mov esi, nmts
  6264 00004AC8 E82FD0FFFF          <1> 	call print
  6265 00004ACD C605[664B0000]00    <1> 	mov byte [threadson], 0
  6266 00004AD4 E90DDCFFFF          <1> 	jmp nwcmd
  6267 00004AD9 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  6268 00004AE2 6572666C6F770A00    <1>
  6269                              <1> 
  6270                              <1> nomorestackspace:
  6271 00004AEA BE[F64A0000]        <1> 	mov esi, nmss
  6272 00004AEF E808D0FFFF          <1> 	call print
  6273 00004AF4 EBAC                <1> 	jmp nwcmdst
  6274 00004AF6 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  6275 00004AFF 72666C6F770A00      <1>
  6276                              <1> 	
  6277                              <1> threadswitch:
  6278 00004B06 FA                  <1> 	cli
  6279 00004B07 60                  <1> 	pushad
  6280 00004B08 BF[03010100]        <1> 	mov edi, threadlist
  6281 00004B0D A1[674B0000]        <1> 	mov eax, [currentthread]
  6282 00004B12 40                  <1> 	inc eax
  6283 00004B13 A3[674B0000]        <1> 	mov [currentthread], eax
  6284 00004B18 6648                <1> 	dec ax
  6285 00004B1A C1E002              <1> 	shl eax, 2
  6286 00004B1D 01C7                <1> 	add edi, eax
  6287 00004B1F 8927                <1> 	mov [edi], esp
  6288 00004B21 81C704000000        <1> 	add edi, 4
  6289 00004B27 81FF[03110100]      <1> 	cmp edi, threadlistend
  6290 00004B2D 0F830D000000        <1> 	jae near nookespthread
  6291 00004B33 8B07                <1> 	mov eax, [edi]
  6292 00004B35 3D00000000          <1> 	cmp eax, 0
  6293 00004B3A 0F8519000000        <1> 	jne near okespthread
  6294                              <1> nookespthread:
  6295 00004B40 BF[03010100]        <1> 	mov edi, threadlist
  6296 00004B45 31C0                <1> 	xor eax, eax
  6297 00004B47 A3[674B0000]        <1> 	mov [currentthread], eax
  6298 00004B4C 8B07                <1> 	mov eax, [edi]
  6299 00004B4E 3D00000000          <1> 	cmp eax, 0
  6300 00004B53 0F8449FFFFFF        <1> 	je near nwcmdst
  6301                              <1> okespthread:
  6302 00004B59 89C4                <1> 	mov esp, eax
  6303 00004B5B B020                <1> 	mov al, 0x20
  6304 00004B5D E620                <1> 	out 0x20, al
  6305 00004B5F 61                  <1> 	popad
  6306 00004B60 FB                  <1> 	sti
  6307 00004B61 CF                  <1> 	iret
  6308                              <1> 
  6309                              <1> %endif
  6310 00004B62 04000000            <1> 	lastthread dd 4
  6311 00004B66 00                  <1> 	threadson db 0
  6312 00004B67 00000000            <1> 	currentthread dd 0
  6313                                  %ifdef gui.included
  6314                                      %include "source/gui/gui.asm"
  6315                                  %endif
  6316                                      %include "source/data.asm"
  6317 00004B6B 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
  6318 00004B73 73687573683A2000    <1> 	notfound1 db "shush: ",0
  6319 00004B7B 3A20636F6D6D616E64- <1> 	notfound2 db  ": command not found",10,0
  6320 00004B84 206E6F7420666F756E- <1>
  6321 00004B8D 640A00              <1>
  6322 00004B90 757365726E616D653A- <1> 	userask db "username:",0
  6323 00004B99 00                  <1>
  6324 00004B9A 70617373776F72643A- <1> 	pwdask	db	"password:",0
  6325 00004BA3 00                  <1>
  6326 00004BA4 40                  <1> 	computer db "@"
  6327                              <1> %ifdef io.serial
  6328                              <1> 	computername	db	"SollerOS.",io.serial," ",0
  6329                              <1> %else
  6330 00004BA5 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
  6331 00004BAE 00                  <1>
  6332                              <1> %endif
  6333 00004BAF 5D242000            <1> 	endprompt db "]$ ",0
  6334 00004BB3 0D                  <1> 	crlf 	db  13
  6335 00004BB4 0A00                <1> 	line	db	10,0
  6336                              <1> 	userlst:
  6337 00004BB6 726F6F7400          <1> 			db "root",0
  6338 00004BBB 617765736F6D65706F- <1> 			db "awesomepower",0
  6339 00004BC4 77657200            <1>
  6340 00004BC8 7573657200          <1> 			db "user",0
  6341 00004BCD 70617373776F726400  <1> 			db "password",0
  6342 00004BD6 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
  6343 00004BD8 00                  <1> 			db 0
  6344                              <1> 	userlstend:
  6345                              <1> 	
  6346                              <1> %ifdef io.serial
  6347                              <1> %else
  6348 00004BD8 <incbin>            <1> fonts:	incbin "source/precompiled/fonts.pak"
  6349                              <1> fontend:
  6350                              <1> %endif
  6351                              <1> osend:	;this is the end of the operating system's space on disk
  6352                                      %include "build/fileindex.asm"
  6353                              <1> diskfileindex:
  6354 00005BD9 617267746573742E65- <1> db "argtest.elf",0
  6355 00005BE2 6C6600              <1>
  6356 00005BE5 2F000000            <1> dd (f0-$$)/512
  6357 00005BE9 06010000            <1> dd (f1-f0)/512
  6358 00005BED 626F6F742E736800    <1> db "boot.sh",0
  6359 00005BF5 35010000            <1> dd (f1-$$)/512
  6360 00005BF9 01000000            <1> dd (f2-f1)/512
  6361 00005BFD 63686172746573742E- <1> db "chartest.elf",0
  6362 00005C06 656C6600            <1>
  6363 00005C0A 36010000            <1> dd (f2-$$)/512
  6364 00005C0E 26010000            <1> dd (f3-f2)/512
  6365 00005C12 646F73746573742E63- <1> db "dostest.com",0
  6366 00005C1B 6F6D00              <1>
  6367 00005C1E 5C020000            <1> dd (f3-$$)/512
  6368 00005C22 01000000            <1> dd (f4-f3)/512
  6369 00005C26 6578656300          <1> db "exec",0
  6370 00005C2B 5D020000            <1> dd (f4-$$)/512
  6371 00005C2F 01000000            <1> dd (f5-f4)/512
  6372 00005C33 66696E616C636F756E- <1> db "finalcount.snd",0
  6373 00005C3C 742E736E6400        <1>
  6374 00005C42 5E020000            <1> dd (f5-$$)/512
  6375 00005C46 01000000            <1> dd (f6-f5)/512
  6376 00005C4A 666F726B00          <1> db "fork",0
  6377 00005C4F 5F020000            <1> dd (f6-$$)/512
  6378 00005C53 01000000            <1> dd (f7-f6)/512
  6379 00005C57 68656C6C6F776F726C- <1> db "helloworld.elf",0
  6380 00005C60 642E656C6600        <1>
  6381 00005C66 60020000            <1> dd (f7-$$)/512
  6382 00005C6A D6010000            <1> dd (f8-f7)/512
  6383 00005C6E 696E7400            <1> db "int",0
  6384 00005C72 36040000            <1> dd (f8-$$)/512
  6385 00005C76 01000000            <1> dd (f9-f8)/512
  6386 00005C7A 6C6F7374776F6F6473- <1> db "lostwoods.snd",0
  6387 00005C83 2E736E6400          <1>
  6388 00005C88 37040000            <1> dd (f9-$$)/512
  6389 00005C8C 01000000            <1> dd (f10-f9)/512
  6390 00005C90 6D6172696F2E736E64- <1> db "mario.snd",0
  6391 00005C99 00                  <1>
  6392 00005C9A 38040000            <1> dd (f10-$$)/512
  6393 00005C9E 01000000            <1> dd (f11-f10)/512
  6394 00005CA2 736F6C6C65726F732E- <1> db "solleros.bmp",0
  6395 00005CAB 626D7000            <1>
  6396 00005CAF 39040000            <1> dd (f11-$$)/512
  6397 00005CB3 B0020000            <1> dd (f12-f11)/512
  6398 00005CB7 736F6C6C65726F732E- <1> db "solleros.txt",0
  6399 00005CC0 74787400            <1>
  6400 00005CC4 E9060000            <1> dd (f12-$$)/512
  6401 00005CC8 01000000            <1> dd (f13-f12)/512
  6402 00005CCC 736F6E676F74696D65- <1> db "songotime.snd",0
  6403 00005CD5 2E736E6400          <1>
  6404 00005CDA EA060000            <1> dd (f13-$$)/512
  6405 00005CDE 01000000            <1> dd (f14-f13)/512
  6406 00005CE2 737464696F74657374- <1> db "stdiotest.elf",0
  6407 00005CEB 2E656C6600          <1>
  6408 00005CF0 EB060000            <1> dd (f14-$$)/512
  6409 00005CF4 27010000            <1> dd (f15-f14)/512
  6410 00005CF8 74656C7900          <1> db "tely",0
  6411 00005CFD 12080000            <1> dd (f15-$$)/512
  6412 00005D01 01000000            <1> dd (f16-f15)/512
  6413 00005D05 74696D65746573742E- <1> db "timetest.elf",0
  6414 00005D0E 656C6600            <1>
  6415 00005D12 13080000            <1> dd (f16-$$)/512
  6416 00005D16 04010000            <1> dd (f17-f16)/512
  6417 00005D1A 7475746F7269616C2E- <1> db "tutorial.sh",0
  6418 00005D23 736800              <1>
  6419 00005D26 17090000            <1> dd (f17-$$)/512
  6420 00005D2A 03000000            <1> dd (f18-f17)/512
  6421 00005D2E 756E667300          <1> db "unfs",0
  6422 00005D33 1A090000            <1> dd (f18-$$)/512
  6423 00005D37 02000000            <1> dd (f19-f18)/512
  6424 00005D3B 766963746F72792E77- <1> db "victory.wav",0
  6425 00005D44 617600              <1>
  6426 00005D47 1C090000            <1> dd (f19-$$)/512
  6427 00005D4B 16000000            <1> dd (f20-f19)/512
  6428 00005D4F 5F696D672E62696E00  <1> db "_img.bin",0
  6429 00005D58 32090000            <1> dd (f20-$$)/512
  6430 00005D5C D7020000            <1> dd (f21-f20)/512
  6431                              <1> enddiskfileindex:
  6432                              <1> 
  6433                                      %include "source/bss.asm"
  6434                              <1> align 4, nop
  6435                              <1> bssstart: equ $
  6436                              <1> guion equ bssstart
  6437                              <1> DriveNumber equ guion + 1
  6438                              <1> lbaad equ DriveNumber + 1
  6439                              <1> memlistbuf equ lbaad + 4
  6440                              <1> memlistend equ memlistbuf + 576
  6441                              <1> bsscopy equ memlistend
  6442                              <1> initialstack equ bsscopy
  6443                              <1> stackend equ initialstack + 4000
  6444                              <1> fileindex: equ stackend + 96
  6445                              <1> fileindexend: equ fileindex + 1024
  6446                              <1> previousstack equ fileindexend
  6447                              <1> lastfolderloc equ previousstack + 4
  6448                              <1> currentfolderloc equ lastfolderloc + 4
  6449                              <1> currentfolder equ currentfolderloc + 4
  6450                              <1> currentfolderend equ currentfolder + 512
  6451                              <1> uid equ currentfolderend
  6452                              <1> ranboot equ uid + 4
  6453                              <1> IFON equ ranboot + 1
  6454                              <1> IFTRUE equ IFON + 1
  6455                              <1> BATCHPOS equ IFTRUE + 100
  6456                              <1> BATCHISON equ BATCHPOS + 4
  6457                              <1> LOOPON equ BATCHISON + 1
  6458                              <1> LOOPPOS	equ LOOPON + 1
  6459                              <1> variables: equ LOOPPOS + 4
  6460                              <1> varend: equ variables + 4096
  6461                              <1> buftxt2: equ varend
  6462                              <1> buftxt: equ buftxt2 + 1024
  6463                              <1> buftxtend: equ buftxt + 1024
  6464                              <1> buf2: equ buftxtend
  6465                              <1> numbuf: equ buf2 + 20
  6466                              <1> %ifdef io.serial
  6467                              <1> 	lastcommandpos equ numbuf + 1
  6468                              <1> %else
  6469                              <1> 	%ifdef gui.included
  6470                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
  6471                              <1> 		graphicstableend equ graphicstable + 200h
  6472                              <1> 		mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
  6473                              <1> 		mcolorend equ mousecolorbuf + 256
  6474                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
  6475                              <1> 		videobufend	equ videobuf + 210*65*2
  6476                              <1> 		videobuf2 equ videobufend
  6477                              <1> 		videobuf2end equ videobuf2 + 210*65*2
  6478                              <1> 	%else
  6479                              <1> 		videobuf equ numbuf + 1
  6480                              <1> 		videobufend equ videobuf + 80*30*2
  6481                              <1> 		videobuf2 equ videobufend
  6482                              <1> 		videobuf2end equ videobuf2 + 160*64*2
  6483                              <1> 	%endif
  6484                              <1> 	lastcommandpos: equ videobuf2end
  6485                              <1> %endif
  6486                              <1> 	commandbufpos: equ lastcommandpos + 4
  6487                              <1> 	commandbuf: equ commandbufpos + 4
  6488                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
  6489                              <1> %ifdef rtl8139.included
  6490                              <1> 	rbuffstart: equ commandbufend ;for use with networking
  6491                              <1> 	rbuffend equ rbuffstart + 8212
  6492                              <1> %else
  6493                              <1> 	rbuffstart equ commandbufend
  6494                              <1> 	rbuffend equ commandbufend
  6495                              <1> %endif
  6496                              <1> %ifdef threads.included
  6497                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
  6498                              <1> 	threadlistend: equ threadlist + 1024*4
  6499                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
  6500                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
  6501                              <1> 	bssend equ stack1 + 1024*1024
  6502                              <1> %else
  6503                              <1> 	bssend equ rbuffend
  6504                              <1> %endif
  6505                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
  6506                                      %include "build/files.asm"
  6507 00005D60 00<rept>            <1> align 512,db 0
  6508                              <1> f0:
  6509 00005D60 <incbin>            <1> incbin "included/argtest.elf"
  6510 000268F2 00<rept>            <1> align 512,db 0
  6511                              <1> f1:
  6512 000268F2 <incbin>            <1> incbin "included/boot.sh"
  6513 00026A33 00<rept>            <1> align 512,db 0
  6514                              <1> f2:
  6515 00026A33 <incbin>            <1> incbin "included/chartest.elf"
  6516 0004B6DB 00<rept>            <1> align 512,db 0
  6517                              <1> f3:
  6518 0004B6DB <incbin>            <1> incbin "included/dostest.com"
  6519 0004B92B 00<rept>            <1> align 512,db 0
  6520                              <1> f4:
  6521 0004B92B <incbin>            <1> incbin "included/exec"
  6522 0004BAD9 00<rept>            <1> align 512,db 0
  6523                              <1> f5:
  6524 0004BAD9 <incbin>            <1> incbin "included/finalcount.snd"
  6525 0004BD02 00<rept>            <1> align 512,db 0
  6526                              <1> f6:
  6527 0004BD02 <incbin>            <1> incbin "included/fork"
  6528 0004BF54 00<rept>            <1> align 512,db 0
  6529                              <1> f7:
  6530 0004BF54 <incbin>            <1> incbin "included/helloworld.elf"
  6531 00086BE3 00<rept>            <1> align 512,db 0
  6532                              <1> f8:
  6533 00086BE3 <incbin>            <1> incbin "included/int"
  6534 00086D9B 00<rept>            <1> align 512,db 0
  6535                              <1> f9:
  6536 00086D9B <incbin>            <1> incbin "included/lostwoods.snd"
  6537 00086E56 00<rept>            <1> align 512,db 0
  6538                              <1> f10:
  6539 00086E56 <incbin>            <1> incbin "included/mario.snd"
  6540 0008703A 00<rept>            <1> align 512,db 0
  6541                              <1> f11:
  6542 0008703A <incbin>            <1> incbin "included/solleros.bmp"
  6543 000DD1E6 00<rept>            <1> align 512,db 0
  6544                              <1> f12:
  6545 000DD1E6 <incbin>            <1> incbin "included/solleros.txt"
  6546 000DD376 00<rept>            <1> align 512,db 0
  6547                              <1> f13:
  6548 000DD376 <incbin>            <1> incbin "included/songotime.snd"
  6549 000DD44A 00<rept>            <1> align 512,db 0
  6550                              <1> f14:
  6551 000DD44A <incbin>            <1> incbin "included/stdiotest.elf"
  6552 00102243 00<rept>            <1> align 512,db 0
  6553                              <1> f15:
  6554 00102243 <incbin>            <1> incbin "included/tely"
  6555 001025B2 00<rept>            <1> align 512,db 0
  6556                              <1> f16:
  6557 001025B2 <incbin>            <1> incbin "included/timetest.elf"
  6558 00122C3D 00<rept>            <1> align 512,db 0
  6559                              <1> f17:
  6560 00122C3D <incbin>            <1> incbin "included/tutorial.sh"
  6561 00123352 00<rept>            <1> align 512,db 0
  6562                              <1> f18:
  6563 00123352 <incbin>            <1> incbin "included/unfs"
  6564                              <1> align 512,db 0
  6565                              <1> f19:
  6566 00123352 <incbin>            <1> incbin "included/victory.wav"
  6567 00126348 00<rept>            <1> align 512,db 0
  6568                              <1> f20:
  6569 00126348 <incbin>            <1> incbin "included/_img.bin"
  6570                              <1> align 512,db 0
  6571                              <1> f21:
