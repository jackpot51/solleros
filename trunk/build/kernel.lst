     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> %define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> %define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> %define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define font.unicode
    29                              <1> ;Include a unicode font. Disable to use an ascii font
    30                              <1> 	
    31                              <1> %define hardware.automatic
    32                              <1> ;Automatically load the sound and network drivers.
    33                              <1> 
    34                              <1> %define threads.included
    35                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    36                              <1> 
    37                              <1> %define exceptions.included
    38                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    39                              <1> 
    40                              <1> ;%define disk.protected
    41                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    42                              <1> 
    43                              <1> %define disk.real
    44                              <1> ;Use real mode for disk access-this gives greater compatibility
    45                              <1> 
    46                              <1> %define sound.included
    47                              <1> ;This includes the sound drivers
    48                              <1> 
    49                              <1> ;%define network.included
    50                              <1> ;This includes the network stack
    51                              <1> 
    52                              <1> ;%define rtl8169.included
    53                              <1> ;This includes the RTL8169 drivers
    54                              <1> 
    55                              <1> ;%define rtl8139.included
    56                              <1> ;This includes the RTL8139 drivers
    57                              <1> 
    58                              <1> ;%define ne2000.included
    59                              <1> ;This includes the ne2000 drivers
    60                              <1> 
    61                              <1> ;%define i8254x.included
    62                              <1> ;This includes the Intel 8254x drivers
    63                              <1> 
    64                              <1> ;%define sector.debug
    65                              <1> ;Dump the contents of the first sector of SollerOS
    66                              <1> 
    67                              <1> ;%define dos.compatible
    68                              <1> ;Make the kernel loadable by dos.
    69                              <1> 
    70                              <1> ;%define system.simple
    71                              <1> ;The smallest possible system, overrides all options
    72                              <1> 
    73                              <1> ;FIX DEPENDANCIES
    74                              <1> %ifdef system.simple
    75                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef dos.compatible
    79                              <1> 	%define UNDEFALL
    80                              <1> %endif
    81                              <1> %ifdef UNDEFALL
    82                              <1> 	%undef io.serial
    83                              <1> 	%undef disk.real
    84                              <1> 	%undef gui.included
    85                              <1> 	%undef gui.alphablending
    86                              <1> 	%undef gui.background
    87                              <1> 	%undef terminal.vsync
    88                              <1> 	%undef font.unicode
    89                              <1> 	%undef hardware.automatic
    90                              <1> 	%undef threads.included
    91                              <1> 	%undef exceptions.included
    92                              <1> 	%undef disk.protected
    93                              <1> 	%undef sound.included
    94                              <1> 	%undef network.included
    95                              <1> 	%undef rtl8139.included
    96                              <1> 	%undef rtl8169.included
    97                              <1> 	%undef ne2000.included
    98                              <1> 	%undef i8254x.included
    99                              <1> 	%undef sector.debug
   100                              <1> 	%undef UNDEFALL
   101                              <1> %endif
   102                              <1> %ifdef system.simple
   103                              <1> 	%define io.serial "1"
   104                              <1> 	%define disk.real
   105                              <1> %endif
   106                              <1> %ifdef gui.included
   107                              <1> 	%undef io.serial
   108                              <1> %else
   109                              <1> 	%undef gui.alphablending
   110                              <1> 	%undef gui.background
   111                              <1> %endif
   112                              <1> %ifdef network.included
   113                              <1> %else
   114                              <1> 	%undef i8254x.included
   115                              <1> 	%undef ne2000.included
   116                              <1> 	%undef rtl8139.included
   117                              <1> 	%undef rtl8169.included
   118                              <1> %endif
   119                              <1> %ifdef disk.protected
   120                              <1> 	%undef disk.real
   121                              <1> %else
   122                              <1> 	%ifdef disk.real
   123                              <1> 	%else
   124                              <1> 		%define disk.none
   125                              <1> 	%endif
   126                              <1> %endif
   127                                  [ORG 0x100]
   128                                  	%include "source/signature.asm"
   129                              <1> header:
   130 00000000 EB12                <1> 	jmp short boot
   131                              <1> signature:
   132 00000002 536F6C6C65724F5320- <1> db "SollerOS ",0 ;Operating system name
   133 0000000B 00                  <1>
   134 0000000C 18010000            <1> dd 280	;version number
   135                              <1> signatureend:
   136 00000010 008E0300                	dd bsscopy - header ;size of kernel data on disk
   137                                  [BITS 16]
   138                                      %include "source/boot.asm"
   139                              <1> boot:
   140 00000014 8CC8                <1> 	mov ax, cs
   141 00000016 8ED8                <1> 	mov ds, ax
   142 00000018 8EC0                <1> 	mov es, ax
   143 0000001A 8ED0                <1> 	mov ss, ax
   144 0000001C 0F31                <1> 	rdtsc
   145 0000001E 66A3[078A]          <1> 	mov [initialtsc], eax
   146 00000022 668916[0B8A]        <1> 	mov [initialtsc + 4], edx
   147 00000027 66A3[0F8A]          <1> 	mov [lasttsc], eax
   148 0000002B 668916[138A]        <1> 	mov [lasttsc + 4], edx
   149 00000030 880E[028A]          <1> 	mov [DriveNumber], cl
   150 00000034 66891E[038A]        <1> 	mov [lbaad], ebx
   151                              <1> %ifdef io.serial
   152                              <1> 	call getmemorysize
   153                              <1> 	mov si, serialmsg
   154                              <1> 	call printrm
   155                              <1> 	jmp pmode
   156                              <1> serialmsg: db 10,13,"SollerOS: Using serial port ",io.serial," for I/O.",0
   157                              <1> %else
   158 00000039 E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   159 0000003C E95400              <1> 	jmp pmode
   160                              <1> %endif
   161                              <1> 	
   162                              <1> vgaset:
   163 0000003F B81200              <1> 	mov ax, 12h
   164 00000042 31DB                <1> 	xor bx, bx
   165 00000044 CD10                <1> 	int 10h
   166 00000046 C606[018A]00        <1> 	mov byte [guion], 0
   167 0000004B E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   168 0000004E C3                  <1> 	ret
   169                              <1> 
   170                              <1> getmemorysize:
   171 0000004F BF[178A]            <1> 	mov di, memlistbuf
   172 00000052 6631DB              <1> 	xor ebx, ebx
   173                              <1> getmemsizeloop:
   174 00000055 66B820E80000        <1> 	mov eax, 0xE820
   175 0000005B 66BA50414D53        <1> 	mov edx, 0x0534D4150
   176 00000061 66B918000000        <1> 	mov ecx, 24
   177 00000067 CD15                <1> 	int 0x15
   178 00000069 81C71800            <1> 	add di, 24
   179 0000006D 81FF[578C]          <1> 	cmp di, memlistend
   180 00000071 7305                <1> 	jae nomoregetmemsize
   181 00000073 6685DB              <1> 	test ebx, ebx
   182 00000076 75DD                <1> 	jnz getmemsizeloop
   183                              <1> nomoregetmemsize:
   184 00000078 81EF[178A]          <1> 	sub di, memlistbuf
   185 0000007C 893E[578C]          <1> 	mov [memlistend], di
   186 00000080 C3                  <1> 	ret
   187                              <1> 	
   188                              <1> printrm:			; 'si' comes in with string address
   189 00000081 BB0700              <1>     mov bx,07		; write to display
   190 00000084 B40E                <1>     mov ah,0Eh		; screen function
   191 00000086 8A04                <1>    .lp:    mov al,[si]         ; get next character
   192 00000088 84C0                <1>     test al,al		; look for terminator 
   193 0000008A 7406                <1>     jz .done	; zero byte at end of string
   194 0000008C CD10                <1>     int 10h		; write character to screen.    
   195 0000008E 46                  <1> 	inc si	     	; move to next character
   196 0000008F E9F4FF              <1>     jmp .lp		; loop
   197 00000092 C3                  <1> .done: ret
   198                                      %include "source/pmode.asm"
   199                              <1> [BITS 16]
   200                              <1> 
   201                              <1> pmode:
   202 00000093 6631C0              <1> 	xor eax, eax
   203 00000096 6631DB              <1> 	xor ebx, ebx
   204 00000099 6631C9              <1> 	xor ecx, ecx
   205 0000009C 6631D2              <1> 	xor edx, edx
   206 0000009F 6631F6              <1> 	xor esi, esi
   207 000000A2 6631FF              <1> 	xor edi, edi
   208 000000A5 BA9200              <1> 	mov dx, 0x92
   209 000000A8 EC                  <1> 	in al, dx	;A20
   210 000000A9 0C02                <1> 	or al, 2
   211 000000AB EE                  <1> 	out dx, al
   212 000000AC 8CCB                <1> 	mov bx,cs		; EBX=segment
   213 000000AE 66C1E304            <1> 	shl ebx,4		;	<< 4
   214 000000B2 6689D8              <1> 	mov eax, ebx		; EAX=linear address of segment base
   215 000000B5 A3[B203]            <1> 	mov [gdt2 + 2],ax
   216 000000B8 A3[BA03]            <1> 	mov [gdt3 + 2],ax
   217 000000BB 66C1E810            <1> 	shr eax,16
   218 000000BF A2[B403]            <1> 	mov [gdt2 + 4],al
   219 000000C2 A2[BC03]            <1> 	mov [gdt3 + 4],al
   220 000000C5 8826[B703]          <1> 	mov [gdt2 + 7],ah
   221 000000C9 8826[BF03]          <1> 	mov [gdt3 + 7],ah
   222                              <1> 
   223 000000CD 66B8[008E0300]      <1> 	mov eax, initialstack
   224 000000D3 660306[4F02]        <1> 	add eax, [newcodecache]
   225 000000D8 A3[AA03]            <1> 	mov [gdts + 2],ax
   226 000000DB 66C1E810            <1> 	shr eax, 16
   227 000000DF A2[AC03]            <1> 	mov [gdts + 4],al
   228 000000E2 8826[AF03]          <1> 	mov [gdts + 7], ah
   229                              <1> 	
   230 000000E6 66A1[4F02]          <1> 	mov eax, [newcodecache]
   231 000000EA A3[C203]            <1> 	mov [gdt4 + 2],ax
   232 000000ED A3[CA03]            <1> 	mov [gdt5 + 2],ax
   233 000000F0 A3[D203]            <1> 	mov [gdtv8086 + 2], ax
   234 000000F3 A3[DA03]            <1> 	mov [gdtv80862 + 2], ax
   235 000000F6 66C1E810            <1> 	shr eax,16
   236 000000FA A2[C403]            <1> 	mov [gdt4 + 4],al
   237 000000FD A2[CC03]            <1> 	mov [gdt5 + 4],al
   238 00000100 A2[D403]            <1> 	mov [gdtv8086 + 4],al
   239 00000103 A2[DC03]            <1> 	mov [gdtv80862 + 4],al
   240 00000106 8826[C703]          <1> 	mov [gdt4 + 7],ah
   241 0000010A 8826[CF03]          <1> 	mov [gdt5 + 7],ah
   242 0000010E 8826[D703]          <1> 	mov [gdtv8086 + 7],ah
   243 00000112 8826[DF03]          <1> 	mov [gdtv80862 + 7],ah
   244                              <1> 	
   245 00000116 66B800004000        <1> 	mov eax, dosprogloc
   246 0000011C 660306[4F02]        <1> 	add eax, [newcodecache]
   247 00000121 A3[E203]            <1> 	mov [gdtdos + 2],ax
   248 00000124 A3[EA03]            <1> 	mov [gdtdos2 + 2],ax
   249 00000127 66C1E810            <1> 	shr eax,16
   250 0000012B A2[E403]            <1> 	mov [gdtdos + 4],al
   251 0000012E A2[EC03]            <1> 	mov [gdtdos2 + 4],al
   252 00000131 8826[E703]          <1> 	mov [gdtdos + 7],ah
   253 00000135 8826[EF03]          <1> 	mov [gdtdos2 + 7],ah
   254                              <1> 	
   255                              <1> ; fix up gdt and idt
   256 00000139 67668D83[98030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   257 00000141 66A3[8E03]          <1> 	mov [gdtr + 2],eax
   258 00000145 67668D83[F0030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   259 0000014D 66A3[9403]          <1> 	mov [idtr + 2],eax
   260 00000151 FA                  <1> 	cli
   261 00000152 0F0116[8C03]        <1> 	lgdt [gdtr]
   262 00000157 0F011E[9203]        <1> 	lidt [idtr]
   263 0000015C 6631DB              <1> 	xor ebx, ebx
   264 0000015F 8CDB                <1> 	mov bx, ds
   265 00000161 66891E[4B02]        <1> 	mov [basecache], ebx
   266 00000166 0F20C0              <1> 	mov eax,cr0
   267 00000169 0C01                <1> 	or al,1
   268 0000016B 0F22C0              <1> 	mov cr0,eax
   269 0000016E EA[7301]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   270                              <1> [BITS 32]
   271                              <1> do_pm:
   272 00000173 31C0                <1> 	xor eax, eax
   273 00000175 66B82000            <1> 	mov ax, SYS_DATA_SEL
   274 00000179 8ED8                <1> 	mov ds, ax
   275 0000017B 8EC0                <1> 	mov es, ax
   276 0000017D 8EE0                <1> 	mov fs, ax
   277 0000017F 66B83000            <1> 	mov ax, NEW_DATA_SEL
   278 00000183 8EE8                <1> 	mov gs, ax
   279                              <1> 	
   280                              <1> copykernel:
   281 00000185 648B06              <1> 	mov eax, [fs:esi]
   282 00000188 658906              <1> 	mov [gs:esi], eax
   283 0000018B 81C604000000        <1> 	add esi, 4
   284 00000191 81FE[008E0300]      <1> 	cmp esi, bsscopy
   285 00000197 72EC                <1> 	jb copykernel
   286 00000199 EA[A0010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   287                              <1> 	
   288                              <1> done_copy:
   289 000001A0 66B83000            <1> 	mov ax, NEW_DATA_SEL	;these MUST be setup AFTER the kernel switches places!!!
   290 000001A4 8ED8                <1> 	mov ds, ax
   291 000001A6 8EC0                <1> 	mov es, ax
   292 000001A8 8EE0                <1> 	mov fs, ax
   293                              <1> 	;mov ax, STACK_SEL
   294 000001AA 8ED0                <1> 	mov ss, ax
   295 000001AC BC[00AE0300]        <1> 	mov esp, stackend
   296 000001B1 66B82000            <1> 	mov ax, SYS_DATA_SEL
   297 000001B5 8EE8                <1> 	mov gs, ax
   298                              <1> 	
   299 000001B7 E8E6620000          <1> 	call initialize	;initialize drivers
   300                              <1> 	
   301 000001BC A1[4F020000]        <1> 	mov eax, [newcodecache]
   302 000001C1 C1E804              <1> 	shr eax, 4
   303 000001C4 A3[4B020000]        <1> 	mov [basecache], eax
   304                              <1> 	
   305 000001C9 BE[3CB64D00]        <1> 	mov esi, bssend
   306 000001CE 31C0                <1> 	xor eax, eax
   307                              <1> clearkernelbuffers:
   308 000001D0 8906                <1> 	mov [esi], eax
   309 000001D2 81EE04000000        <1> 	sub esi, 4
   310 000001D8 81FE[008E0300]      <1> 	cmp esi, bsscopy
   311 000001DE 77F0                <1> 	ja clearkernelbuffers
   312 000001E0 FB                  <1> 	sti
   313                              <1> 
   314                              <1> getmemoryspace:
   315 000001E1 BE[178A0000]        <1> 	mov esi, memlistbuf
   316 000001E6 31FF                <1> 	xor edi, edi
   317 000001E8 668B3D[578C0000]    <1> 	mov di, [memlistend]
   318 000001EF 01F7                <1> 	add edi, esi
   319 000001F1 31C0                <1> 	xor eax, eax
   320                              <1> memoryspaceaddition:
   321 000001F3 39FE                <1> 	cmp esi, edi
   322 000001F5 7325                <1> 	jae finishedmemspacecalc
   323 000001F7 81C608000000        <1> 	add esi, 8
   324 000001FD 8B0E                <1> 	mov ecx, [esi]
   325 000001FF 81C608000000        <1> 	add esi, 8
   326 00000205 8B1E                <1> 	mov ebx, [esi]
   327 00000207 81C608000000        <1> 	add esi, 8
   328 0000020D 81FB01000000        <1> 	cmp ebx, 1
   329 00000213 75DE                <1> 	jne memoryspaceaddition
   330 00000215 01C8                <1> 	add eax, ecx
   331 00000217 E9D7FFFFFF          <1> 	jmp memoryspaceaddition
   332                              <1> finishedmemspacecalc:
   333 0000021C A3[60020000]        <1> 	mov [memoryspace], eax
   334                              <1> %ifdef gui.included
   335 00000221 803D[018A0000]00    <1> 	cmp byte [guion], 0
   336 00000228 741C                <1> 	je normalstartup
   337 0000022A 8B1D[4B020000]      <1> 	mov ebx, [basecache]
   338 00000230 C1E304              <1> 	shl ebx, 4
   339 00000233 8B3D[4D580000]      <1> 	mov edi, [physbaseptr]
   340 00000239 29DF                <1> 	sub edi, ebx
   341 0000023B 893D[4D580000]      <1> 	mov [physbaseptr], edi
   342 00000241 E975680000          <1> 	jmp guiboot
   343                              <1> %endif
   344                              <1> normalstartup:
   345 00000246 E961290000          <1> 	jmp os
   346                              <1> 	
   347 0000024B 00000000            <1> basecache dd 0
   348 0000024F 00001000            <1> newcodecache dd 0x100000
   349                              <1> 
   350 00000253 00                  <1> testingcpuspeed db 0
   351 00000254 00000000            <1> cpuspeedperint dd 0
   352 00000258 0000000000000000    <1> cpuclocksperint dd 0,0
   353 00000260 00000000            <1> memoryspace dd 0
   354 00000264 7D0A                <1> pitdiv dw 2685
   355 00000266 2E562200            <1> timeinterval dd 2250286
   356                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   357                              <1> ;for the pit, note that div=1 gives 838.09ns, the clock runs at 1.193182 MHz
   358                              <1> ;div=451 is 377981.0004, div=902 is 755962.0008,
   359                              <1> ;div=2685 is 2250286.00004ns, div=5370 is 4500572.00007ns
   360                              <1> ;div=55483 is 46500044.000006ns
   361                              <1> ;use one of those values for the minimum error
   362                              <1> 
   363 0000026A 00                  <1> ticks db 0
   364 0000026B 00000000            <1> timeseconds dd 0
   365 0000026F 00000000            <1> timenanoseconds dd 0
   366 00000273 00                  <1> soundon db 0
   367 00000274 0000                <1> soundrepititions dw 0
   368 00000276 00000000            <1> soundpos dd 0
   369 0000027A 00000000            <1> soundendpos dd 0
   370                              <1> 
   371                              <1> cpuspeedend:
   372 0000027E C605[53020000]00    <1> 	mov byte [testingcpuspeed], 0
   373 00000285 A3[54020000]        <1> 	mov [cpuspeedperint], eax
   374 0000028A B8[AF510000]        <1> 	mov eax, cpuspeedloopend
   375 0000028F 890424              <1> 	mov [esp], eax
   376 00000292 E9E5000000          <1> 	jmp handled
   377                              <1> 
   378                              <1> pitinterrupt: ;this controls threading
   379 00000297 803D[53020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   380 0000029E 74DE                <1> 	je cpuspeedend
   381                              <1> 
   382 000002A0 E8B1000000          <1> 	call timekeeper ;this updates the internal time
   383                              <1> 	
   384 000002A5 803D[73020000]01    <1> 	cmp byte [soundon], 1
   385 000002AC 0F847F590000        <1> 	je near PCSpeakerRAW
   386                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   387                              <1> %ifdef threads.included
   388 000002B2 803D[B66A0000]01    <1> 	cmp byte [threadson], 1
   389 000002B9 0F8499670000        <1> 	je near threadswitch
   390                              <1> %endif
   391                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   392 000002BF 803D[B66A0000]00    <1> 	cmp byte [threadson], 0
   393 000002C6 0F84B0000000        <1> 	je near handled
   394                              <1> %ifdef io.serial
   395                              <1> 	jmp handled
   396                              <1> %else
   397                              <1> 	;inc byte [ticks] ;every 256 ticks, check for keys
   398                              <1> 	;jnz near handled
   399                              <1> 	
   400 000002CC 60                  <1> 	pusha
   401 000002CD E464                <1> 	in al, 64h
   402 000002CF A820                <1> 	test al, 20h
   403 000002D1 0F85A4000000        <1> 	jnz near handled2
   404 000002D7 E460                <1> 	in al, 60h
   405 000002D9 3C01                <1> 	cmp al, 1		;escape
   406 000002DB 7405                <1> 	je userint
   407 000002DD E999000000          <1> 	jmp handled2
   408                              <1> ;	cmp al, 0x57
   409                              <1> ;	jne near handled2
   410                              <1> ;pauseint:	;F11 pauses
   411                              <1> ;	in al, 64h
   412                              <1> ;	test al, 20h
   413                              <1> ;	jnz pauseint
   414                              <1> ;	in al, 60h
   415                              <1> ;	cmp al, 0xD7
   416                              <1> ;	jne pauseint
   417                              <1> ;	mov esi, pausemsg
   418                              <1> ;	call print
   419                              <1> ;pauselp:
   420                              <1> ;	in al, 64h
   421                              <1> ;	test al, 20h
   422                              <1> ;	jnz pauselp
   423                              <1> ;	in al, 60h
   424                              <1> ;	cmp al, 0x57
   425                              <1> ;	je near handled2
   426                              <1> ;	jmp pauselp
   427                              <1> ;pausemsg db "Paused",10,0
   428                              <1> userint:
   429 000002E2 31C0                <1> 	xor eax, eax
   430 000002E4 3905[04AE0300]      <1> 	cmp [sigtable], eax
   431 000002EA 7410                <1> 	je .nosighook
   432 000002EC 8B1D[04AE0300]      <1> 	mov ebx, [sigtable]
   433 000002F2 895C2420            <1> 	mov [esp + 32], ebx
   434                              <1> ;	mov [sigtable], eax
   435 000002F6 B020                <1> 	mov al, 0x20
   436 000002F8 E620                <1> 	out 0x20, al
   437 000002FA 61                  <1> 	popa
   438 000002FB CF                  <1> 	iret
   439                              <1> .nosighook:
   440                              <1> 		;UNMASK ALL INTS
   441 000002FC E621                <1> 	out 0x21, al
   442 000002FE E6A1                <1> 	out 0xA1, al
   443 00000300 B020                <1> 	mov al, 0x20
   444 00000302 E6A0                <1> 	out 0xA0, al
   445 00000304 E620                <1> 	out 0x20, al
   446                              <1> 		;RESET PIT DIVISOR
   447 00000306 66A1[64020000]      <1> 	mov ax, [pitdiv]
   448 0000030C E640                <1> 	out 0x40, al
   449 0000030E 66C1C008            <1> 	rol ax, 8
   450 00000312 E640                <1> 	out 0x40, al
   451                              <1> 		;RESET PIC
   452 00000314 B020                <1> 	mov al, 0x20
   453 00000316 E620                <1> 	out 0x20, al
   454 00000318 61                  <1> 	popa
   455 00000319 CC                  <1> 	int3
   456 0000031A 5D                  <1> 	pop ebp
   457 0000031B 5D                  <1> 	pop ebp
   458 0000031C 9D                  <1> 	popf
   459 0000031D BC[00AE0300]        <1> 	mov esp, stackend ;reset stack
   460 00000322 E9E5290000          <1> 	jmp returnfromexp
   461                              <1> %endif
   462 00000327 0A                  <1> rtcrate db 10
   463                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   464                              <1> %ifdef io.serial
   465                              <1> %else
   466                              <1> %ifdef terminal.vsync
   467 00000328 803D[23290000]00    <1> 	cmp byte [termcopyneeded], 0
   468 0000032F 7405                <1> 	je .nocopy
   469 00000331 E8F6250000          <1> 	call newtermcopy
   470                              <1> .nocopy:
   471 00000336 50                  <1> 	push eax
   472 00000337 B00C                <1> 	mov al, 0xC
   473 00000339 E670                <1> 	out 0x70, al
   474 0000033B E471                <1> 	in al, 0x71
   475 0000033D 58                  <1> 	pop eax
   476                              <1> %endif
   477                              <1> %endif
   478 0000033E E940000000          <1> 	jmp handledboth
   479                              <1> %ifdef rtl8139.included
   480                              <1> nextpacket dd rbuffstart
   481                              <1> rtl8139.irq:
   482                              <1> 	pusha
   483                              <1> 	mov dx, [rtl8139.basenicaddr]
   484                              <1> 	add dx, rtl8139.ISR
   485                              <1> 	xor eax, eax
   486                              <1> 	in ax, dx
   487                              <1> 	out dx, ax
   488                              <1> 	test ax, 1
   489                              <1> 	jz  near .norec
   490                              <1> 	mov esi, packetrecvmsg
   491                              <1> 	call print
   492                              <1> 	mov esi, [nextpacket]
   493                              <1> 	cmp esi, rbuffend
   494                              <1> 	jb .goodesi
   495                              <1> 	mov esi, rbuffstart
   496                              <1> .goodesi:
   497                              <1> 	mov ecx, esi
   498                              <1> 	sub ecx, rbuffstart
   499                              <1> 	call showhex
   500                              <1> 	mov ecx, [esi]
   501                              <1> 	test ecx, 1
   502                              <1> 	jz .notgood
   503                              <1> 	call showhex
   504                              <1> 	add esi, 4
   505                              <1> 	xor edi, edi
   506                              <1> 	mov di, [esi - 2]
   507                              <1> 	mov ecx, edi
   508                              <1> 	add edi, esi
   509                              <1> 	sub ecx, 4
   510                              <1> 	call showdec
   511                              <1> 
   512                              <1> 	mov ecx, edi
   513                              <1> 	sub ecx, rbuffstart
   514                              <1> 	add ecx, 3
   515                              <1> 	shr ecx, 2
   516                              <1> 	shl ecx, 2
   517                              <1> 	call showhex
   518                              <1> .notgood	
   519                              <1> 	mov  dx, [rtl8139.basenicaddr]
   520                              <1> 	add dx, rtl8139.CBR
   521                              <1> 	xor eax, eax
   522                              <1> 	in ax, dx
   523                              <1> 	mov ecx, eax
   524                              <1> 	call showhex
   525                              <1> 	
   526                              <1> 	mov dx, [rtl8139.basenicaddr]
   527                              <1> 	add dx, rtl8139.CAPR
   528                              <1> 	out dx, ax
   529                              <1> 	
   530                              <1> 	add eax, rbuffstart
   531                              <1> 	mov [nextpacket], eax
   532                              <1> 	
   533                              <1> ;	int3
   534                              <1> ;.lp:
   535                              <1> ;	mov cl, [esi]
   536                              <1> ;	call showhexsmall
   537                              <1> ;	inc esi
   538                              <1> ;	cmp esi, [nextpacket]
   539                              <1> ;	jb .lp
   540                              <1> ;	mov ecx, [esi]
   541                              <1> ;	call showhex
   542                              <1> ;	call printline
   543                              <1> .norec:
   544                              <1> 	popa
   545                              <1> 	jmp handledboth
   546                              <1> packetrecvmsg db 10,"Packet: ",0
   547                              <1> %endif
   548                              <1> %ifdef sound.included
   549                              <1> sblaster.irq:
   550 00000343 60                  <1> 	pusha
   551 00000344 803D[215F0000]01    <1> 	cmp byte [SoundBlaster], 1
   552 0000034B 0F84CA590000        <1> 	je near sblaster.cont
   553 00000351 E925000000          <1> 	jmp handled2
   554                              <1> %endif
   555                              <1> 	
   556                              <1> timekeeper:
   557 00000356 50                  <1> 	push eax
   558 00000357 A1[6F020000]        <1> 	mov eax, [timenanoseconds]
   559 0000035C 0305[66020000]      <1> 	add eax, [timeinterval]
   560 00000362 3D00CA9A3B          <1> 	cmp eax, 1000000000
   561 00000367 720B                <1> 	jb nonanosecondrollover
   562 00000369 FF05[6B020000]      <1> 	inc dword [timeseconds]
   563 0000036F 2D00CA9A3B          <1> 	sub eax, 1000000000
   564                              <1> 	%ifdef gui.time
   565                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   566                              <1> 		cmp byte [guion], 1
   567                              <1> 		jne nonanosecondrollover
   568                              <1> 		cmp dword [dragging], 0
   569                              <1> 		jne nonanosecondrollover
   570                              <1> 		pusha
   571                              <1> 		call guitime
   572                              <1> 		popa
   573                              <1> 	%endif
   574                              <1> nonanosecondrollover:
   575 00000374 A3[6F020000]        <1> 	mov [timenanoseconds], eax
   576 00000379 58                  <1> 	pop eax
   577 0000037A C3                  <1> 	ret
   578                              <1> 	
   579                              <1> handled2:
   580 0000037B 61                  <1> 	popa
   581                              <1> handled:
   582 0000037C 50                  <1> 	push eax
   583 0000037D B020                <1> 	mov al, 0x20
   584 0000037F E620                <1> 	out 0x20, al
   585 00000381 58                  <1> 	pop eax
   586 00000382 CF                  <1> 	iret
   587                              <1> handledboth:
   588 00000383 50                  <1> 	push eax
   589 00000384 B020                <1> 	mov al, 0x20
   590 00000386 E6A0                <1> 	out 0xA0, al
   591 00000388 E620                <1> 	out 0x20, al
   592 0000038A 58                  <1> 	pop eax
   593 0000038B CF                  <1> 	iret
   594                              <1> 	
   595                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   596 0000038C 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   597 0000038E 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   598                              <1> 
   599 00000392 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   600 00000394 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   601                              <1> 
   602                              <1> 
   603 00000398 0000                <1> gdt:	dw 0			; limit 15:0
   604 0000039A 0000                <1> 	dw 0			; base 15:0
   605 0000039C 00                  <1> 	db 0			; base 23:16
   606 0000039D 00                  <1> 	db 0			; type
   607 0000039E 00                  <1> 	db 0			; limit 19:16, flags
   608 0000039F 00                  <1> 	db 0			; base 31:24
   609                              <1> ; linear data segment descriptor
   610                              <1> LINEAR_SEL	equ	$-gdt
   611 000003A0 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   612 000003A2 0000                <1> 	dw 0			; base for this one is always 0
   613 000003A4 00                  <1> 	db 0
   614 000003A5 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   615 000003A6 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   616 000003A7 00                  <1> 	db 0
   617                              <1> STACK_SEL	equ $-gdt
   618 000003A8 0200                <1> gdts:	dw 2;(stackend)/4096
   619 000003AA 0000                <1> 	dw 0
   620 000003AC 00                  <1> 	db 0
   621 000003AD 92                  <1> 	db 0x92
   622 000003AE CF                  <1> 	db 0xCF
   623 000003AF 00                  <1> 	db 0
   624                              <1> ; code segment descriptor
   625                              <1> SYS_CODE_SEL	equ	$-gdt
   626 000003B0 FFFF                <1> gdt2:	dw 0xFFFF
   627 000003B2 0000                <1> 	dw 0			; (base gets set above)
   628 000003B4 00                  <1> 	db 0
   629 000003B5 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   630 000003B6 CF                  <1> 	db 0xCF
   631 000003B7 00                  <1> 	db 0
   632                              <1> ; data segment descriptor
   633                              <1> SYS_DATA_SEL	equ	$-gdt
   634 000003B8 FFFF                <1> gdt3:	dw 0xFFFF
   635 000003BA 0000                <1> 	dw 0			; (base gets set above)
   636 000003BC 00                  <1> 	db 0
   637 000003BD 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   638 000003BE CF                  <1> 	db 0xCF
   639 000003BF 00                  <1> 	db 0
   640                              <1> NEW_CODE_SEL	equ	$-gdt
   641 000003C0 FFFF                <1> gdt4:	dw 0xFFFF
   642 000003C2 0000                <1> 	dw 0			; (base gets set above)
   643 000003C4 00                  <1> 	db 0
   644 000003C5 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   645 000003C6 CF                  <1> 	db 0xCF
   646 000003C7 00                  <1> 	db 0
   647                              <1> ; data segment descriptor
   648                              <1> NEW_DATA_SEL	equ	$-gdt
   649 000003C8 FFFF                <1> gdt5:	dw 0xFFFF
   650 000003CA 0000                <1> 	dw 0			; (base gets set above)
   651 000003CC 00                  <1> 	db 0
   652 000003CD 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   653 000003CE CF                  <1> 	db 0xCF
   654 000003CF 00                  <1> 	db 0
   655                              <1> V8086_CODE_SEL	equ $-gdt
   656 000003D0 FFFF                <1> gdtv8086: dw 0xFFFF
   657 000003D2 0000                <1> 	dw 0
   658 000003D4 00                  <1> 	db 0
   659 000003D5 9A                  <1> 	db 0x9A
   660 000003D6 8F                  <1> 	db 0x8F
   661 000003D7 00                  <1> 	db 0
   662                              <1> V8086_DATA_SEL	equ $-gdt
   663 000003D8 FFFF                <1> gdtv80862: dw 0xFFFF
   664 000003DA 0000                <1> 	dw 0
   665 000003DC 00                  <1> 	db 0
   666 000003DD 92                  <1> 	db 0x92
   667 000003DE 8F                  <1> 	db 0x8F
   668 000003DF 00                  <1> 	db 0
   669                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   670 000003E0 0001                <1> gdtdos:	dw 256	;give it 1 MB
   671 000003E2 0000                <1> 	dw 0
   672 000003E4 00                  <1> 	db 0
   673 000003E5 9A                  <1> 	db 0x9A
   674 000003E6 8F                  <1> 	db 0x8F ;16 bit
   675 000003E7 00                  <1> 	db 0
   676                              <1> DOS_DATA_SEL 	equ $-gdt
   677 000003E8 0001                <1> gdtdos2:	dw 256
   678 000003EA 0000                <1> 	dw 0
   679 000003EC 00                  <1> 	db 0
   680 000003ED 92                  <1> 	db 0x92
   681 000003EE 8F                  <1> 	db 0x8F ;16 bit
   682 000003EF 00                  <1> 	db 0
   683                              <1> gdt_end:
   684                              <1> 
   685                              <1> ;	interrupt descriptor table (IDT)
   686                              <1> ; 32 reserved interrupts:
   687                              <1> idt:	
   688                              <1> %assign i 0
   689                              <1> %rep    8
   690                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   691                              <1> %assign i i+1
   692                              <1> %endrep
   693 000003F0 [080D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   694                              <2> %assign i i+1
   695 000003F8 [140D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   696                              <2> %assign i i+1
   697 00000400 [200D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   698                              <2> %assign i i+1
   699 00000408 [2C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   700                              <2> %assign i i+1
   701 00000410 [380D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   702                              <2> %assign i i+1
   703 00000418 [440D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   704                              <2> %assign i i+1
   705 00000420 [500D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   706                              <2> %assign i i+1
   707 00000428 [5C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   708                              <2> %assign i i+1
   709 00000430 [680D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   710                              <1> %assign i 9
   711                              <1> %rep    23
   712                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   713                              <1> %assign i i+1
   714                              <1> %endrep
   715 00000438 [740D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i i+1
   717 00000440 [800D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i i+1
   719 00000448 [8C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i i+1
   721 00000450 [980D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i i+1
   723 00000458 [A40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i i+1
   725 00000460 [B00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i i+1
   727 00000468 [BC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i i+1
   729 00000470 [C80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i i+1
   731 00000478 [D40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i i+1
   733 00000480 [E00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i i+1
   735 00000488 [EC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i i+1
   737 00000490 [F80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i i+1
   739 00000498 [040E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   740                              <2> %assign i i+1
   741 000004A0 [100E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   742                              <2> %assign i i+1
   743 000004A8 [1C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   744                              <2> %assign i i+1
   745 000004B0 [280E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   746                              <2> %assign i i+1
   747 000004B8 [340E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   748                              <2> %assign i i+1
   749 000004C0 [400E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   750                              <2> %assign i i+1
   751 000004C8 [4C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   752                              <2> %assign i i+1
   753 000004D0 [580E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   754                              <2> %assign i i+1
   755 000004D8 [640E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   756                              <2> %assign i i+1
   757 000004E0 [700E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   758                              <2> %assign i i+1
   759 000004E8 [7C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   760                              <2> %assign i i+1
   761 000004F0 [622A]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0 ;dos ints
   762 000004F8 [662A]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   763                              <1> %assign i 0x22
   764                              <1> %rep 14
   765                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   766                              <1> %assign i +1
   767                              <1> %endrep
   768 00000500 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 00000508 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772 00000510 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   773                              <2> %assign i +1
   774 00000518 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   775                              <2> %assign i +1
   776 00000520 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   777                              <2> %assign i +1
   778 00000528 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   779                              <2> %assign i +1
   780 00000530 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   781                              <2> %assign i +1
   782 00000538 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   783                              <2> %assign i +1
   784 00000540 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   785                              <2> %assign i +1
   786 00000548 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   787                              <2> %assign i +1
   788 00000550 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   789                              <2> %assign i +1
   790 00000558 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   791                              <2> %assign i +1
   792 00000560 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   793                              <2> %assign i +1
   794 00000568 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   795                              <2> %assign i +1
   796                              <1> ;INT 30h for os use and 3rd party use:
   797 00000570 [0A1C]2800008E0000  <1> 		dw int30h,NEW_CODE_SEL,0x8E00,0
   798                              <1> %assign i 0x31
   799                              <1> %rep 15
   800                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   801                              <1> %assign i +1
   802                              <1> %endrep
   803 00000578 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   804                              <2> %assign i +1
   805 00000580 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   806                              <2> %assign i +1
   807 00000588 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   808                              <2> %assign i +1
   809 00000590 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   810                              <2> %assign i +1
   811 00000598 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   812                              <2> %assign i +1
   813 000005A0 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   814                              <2> %assign i +1
   815 000005A8 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   816                              <2> %assign i +1
   817 000005B0 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   818                              <2> %assign i +1
   819 000005B8 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   820                              <2> %assign i +1
   821 000005C0 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   822                              <2> %assign i +1
   823 000005C8 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   824                              <2> %assign i +1
   825 000005D0 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   826                              <2> %assign i +1
   827 000005D8 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   828                              <2> %assign i +1
   829 000005E0 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   830                              <2> %assign i +1
   831 000005E8 [7C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   832                              <2> %assign i +1
   833                              <1> ;and here we are at 0x40
   834                              <1> ;here are all the irq's
   835 000005F0 [9702]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   836 000005F8 [7C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   837 00000600 [7C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   838 00000608 [7C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   839 00000610 [7C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   840                              <1> 	%ifdef sound.included
   841 00000618 [4303]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   842                              <1> 	%else
   843                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   844                              <1> 	%endif
   845 00000620 [7C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   846 00000628 [7C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   847 00000630 [2803]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   848 00000638 [8303]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   849 00000640 [8303]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   850                              <1> 	%ifdef rtl8139.included
   851                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   852                              <1> 	%else
   853 00000648 [8303]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   854                              <1> 	%endif
   855 00000650 [8303]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   856 00000658 [8303]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   857 00000660 [8303]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   858 00000668 [8303]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   859                              <1> ;This brings me up to 0x50
   860                              <1> %assign i 0x50
   861                              <1> %rep 176
   862                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   863                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   864                              <1> %assign i +1
   865                              <1> %endrep
   866 00000670 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 00000678 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 00000680 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 00000688 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 00000690 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 00000698 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 000006A0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 000006A8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 000006B0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 000006B8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 000006C0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 000006C8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 000006D0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 000006D8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 000006E0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 000006E8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 000006F0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 000006F8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 00000700 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 00000708 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 00000710 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 00000718 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 00000720 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 00000728 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 00000730 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 00000738 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 00000740 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 00000748 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 00000750 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 00000758 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 00000760 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 00000768 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 00000770 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 00000778 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 00000780 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 00000788 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 00000790 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 00000798 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 000007A0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 000007A8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 000007B0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 000007B8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 000007C0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 000007C8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 000007D0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 000007D8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 000007E0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 000007E8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 000007F0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 000007F8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 00000800 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 00000808 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 00000810 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 00000818 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000820 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 00000828 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 00000830 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 00000838 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 00000840 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 00000848 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 00000850 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 00000858 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 00000860 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 00000868 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 00000870 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 00000878 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 00000880 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 00000888 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 00000890 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 00000898 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 000008A0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 000008A8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 000008B0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 000008B8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 000008C0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 000008C8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 000008D0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 000008D8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 000008E0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 000008E8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 000008F0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 000008F8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000900 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 00000908 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 00000910 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 00000918 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000920 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 00000928 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 00000930 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 00000938 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 00000940 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 00000948 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 00000950 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 00000958 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 00000960 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 00000968 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 00000970 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 00000978 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 00000980 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 00000988 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 00000990 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 00000998 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 000009A0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 000009A8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 000009B0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 000009B8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 000009C0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 000009C8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 000009D0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 000009D8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 000009E0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 000009E8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 000009F0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 000009F8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000A00 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000A08 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000A10 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000A18 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000A20 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000A28 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000A30 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000A38 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000A40 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000A48 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000A50 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000A58 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000A60 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000A68 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000A70 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000A78 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000A80 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000A88 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000A90 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000A98 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000AA0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000AA8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000AB0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000AB8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000AC0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000AC8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286 00000AD0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1287                              <2> 
  1288                              <2> %assign i +1
  1289 00000AD8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1290                              <2> 
  1291                              <2> %assign i +1
  1292 00000AE0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1293                              <2> 
  1294                              <2> %assign i +1
  1295 00000AE8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1296                              <2> 
  1297                              <2> %assign i +1
  1298 00000AF0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1299                              <2> 
  1300                              <2> %assign i +1
  1301 00000AF8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1302                              <2> 
  1303                              <2> %assign i +1
  1304 00000B00 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1305                              <2> 
  1306                              <2> %assign i +1
  1307 00000B08 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1308                              <2> 
  1309                              <2> %assign i +1
  1310 00000B10 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1311                              <2> 
  1312                              <2> %assign i +1
  1313 00000B18 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1314                              <2> 
  1315                              <2> %assign i +1
  1316 00000B20 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1317                              <2> 
  1318                              <2> %assign i +1
  1319 00000B28 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1320                              <2> 
  1321                              <2> %assign i +1
  1322 00000B30 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1323                              <2> 
  1324                              <2> %assign i +1
  1325 00000B38 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1326                              <2> 
  1327                              <2> %assign i +1
  1328 00000B40 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1329                              <2> 
  1330                              <2> %assign i +1
  1331 00000B48 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1332                              <2> 
  1333                              <2> %assign i +1
  1334 00000B50 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1335                              <2> 
  1336                              <2> %assign i +1
  1337 00000B58 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1338                              <2> 
  1339                              <2> %assign i +1
  1340 00000B60 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1341                              <2> 
  1342                              <2> %assign i +1
  1343 00000B68 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1344                              <2> 
  1345                              <2> %assign i +1
  1346 00000B70 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1347                              <2> 
  1348                              <2> %assign i +1
  1349 00000B78 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1350                              <2> 
  1351                              <2> %assign i +1
  1352 00000B80 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1353                              <2> 
  1354                              <2> %assign i +1
  1355 00000B88 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1356                              <2> 
  1357                              <2> %assign i +1
  1358 00000B90 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1359                              <2> 
  1360                              <2> %assign i +1
  1361 00000B98 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1362                              <2> 
  1363                              <2> %assign i +1
  1364 00000BA0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1365                              <2> 
  1366                              <2> %assign i +1
  1367 00000BA8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1368                              <2> 
  1369                              <2> %assign i +1
  1370 00000BB0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1371                              <2> 
  1372                              <2> %assign i +1
  1373 00000BB8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1374                              <2> 
  1375                              <2> %assign i +1
  1376 00000BC0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1377                              <2> 
  1378                              <2> %assign i +1
  1379 00000BC8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1380                              <2> 
  1381                              <2> %assign i +1
  1382 00000BD0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1383                              <2> 
  1384                              <2> %assign i +1
  1385 00000BD8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1386                              <2> 
  1387                              <2> %assign i +1
  1388 00000BE0 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1389                              <2> 
  1390                              <2> %assign i +1
  1391 00000BE8 [7C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1392                              <2> 
  1393                              <2> %assign i +1
  1394                              <1> idt_end:
  1395                                  	%include "source/realmode.asm"
  1396                              <1> realmode:	;make sure the real mode program's address is in realmodeptr
  1397                              <1> 
  1398 00000BF0 FA                  <1> 	cli
  1399 00000BF1 A3[FE0C0000]        <1> 	mov [realmodeeax], eax
  1400 00000BF6 891D[FA0C0000]      <1> 	mov [realmodeebx], ebx
  1401 00000BFC 8925[EC0C0000]      <1> 	mov [pmodeesp], esp
  1402                              <1> 
  1403 00000C02 BB[F60C0000]        <1> 	mov ebx, cr0old
  1404                              <1> rmcopytofirstmbyte:
  1405 00000C07 8B03                <1> 	mov eax, [ebx]
  1406 00000C09 658903              <1> 	mov [gs:ebx], eax
  1407 00000C0C 81C304000000        <1> 	add ebx, 4
  1408 00000C12 81FB[020D0000]      <1> 	cmp ebx, realmodeptr
  1409 00000C18 76ED                <1> 	jbe rmcopytofirstmbyte
  1410                              <1> 
  1411 00000C1A EA[210C0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1412                              <1> 
  1413                              <1> [BITS 16]
  1414                              <1> protected16bit:
  1415 00000C21 B84000              <1> 	mov ax, V8086_DATA_SEL
  1416 00000C24 8ED8                <1> 	mov ds, ax
  1417 00000C26 8EC0                <1> 	mov es, ax
  1418 00000C28 8EE0                <1> 	mov fs, ax
  1419 00000C2A 8EE8                <1> 	mov gs, ax
  1420 00000C2C 8ED0                <1> 	mov ss, ax
  1421 00000C2E 66BC[00AE0300]      <1> 	mov esp, stackend
  1422 00000C34 0F20C0              <1> 	mov eax, cr0
  1423 00000C37 66A3[F60C]          <1> 	mov [cr0old], eax
  1424 00000C3B 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1425 00000C41 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1426 00000C44 EA[490C]0010        <1> 	jmp 0x1000:inrealmode
  1427                              <1> 
  1428                              <1> inrealmode:
  1429 00000C49 8CC8                <1> 	mov ax, cs
  1430 00000C4B 8ED8                <1> 	mov ds, ax
  1431 00000C4D 8EC0                <1> 	mov es, ax
  1432 00000C4F 8EE0                <1> 	mov fs, ax
  1433 00000C51 8EE8                <1> 	mov gs, ax
  1434 00000C53 8ED0                <1> 	mov ss, ax
  1435 00000C55 BC[00AE]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1436                              <1> 	
  1437 00000C58 B011                <1> 	mov al, 0x11
  1438 00000C5A E620                <1> 	out 0x20, al
  1439 00000C5C E6A0                <1> 	out 0xA0, al
  1440 00000C5E B008                <1> 	mov al, 0x8		;interrupt for master
  1441 00000C60 E621                <1> 	out 0x21, al
  1442 00000C62 B070                <1> 	mov al, 0x70	;interrupt for slave
  1443 00000C64 E6A1                <1> 	out 0xA1, al
  1444 00000C66 B004                <1> 	mov al, 4
  1445 00000C68 E621                <1> 	out 0x21, al
  1446 00000C6A B002                <1> 	mov al, 2
  1447 00000C6C E6A1                <1> 	out 0xA1, al
  1448 00000C6E B001                <1> 	mov al, 0x1
  1449 00000C70 E621                <1> 	out 0x21, al
  1450 00000C72 B001                <1> 	mov al, 0x1
  1451 00000C74 E6A1                <1> 	out 0xA1, al
  1452                              <1> 	
  1453 00000C76 0F011E[F00C]        <1> 	lidt [idt_real]
  1454 00000C7B FB                  <1> 	sti
  1455                              <1> 
  1456 00000C7C 66A1[FE0C]          <1> 	mov eax, [realmodeeax]
  1457 00000C80 668B1E[FA0C]        <1> 	mov ebx, [realmodeebx]
  1458                              <1> 
  1459 00000C85 FF16[020D]          <1> 	call word [realmodeptr] ;call the real mode program here
  1460                              <1> 
  1461 00000C89 66A3[FE0C]          <1> 	mov [realmodeeax], eax
  1462 00000C8D 66891E[FA0C]        <1> 	mov [realmodeebx], ebx
  1463                              <1> 
  1464 00000C92 FA                  <1> 	cli
  1465 00000C93 0F0116[8C03]        <1> 	lgdt [gdtr]
  1466 00000C98 0F011E[9203]        <1> 	lidt [idtr]
  1467 00000C9D 0F20C0              <1> 	mov eax, cr0
  1468 00000CA0 0C01                <1> 	or al, 1
  1469 00000CA2 0F22C0              <1> 	mov cr0,eax
  1470 00000CA5 EA[AA0C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1471                              <1> 
  1472                              <1> [BITS 32]
  1473                              <1> returntopmode:
  1474 00000CAA 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1475 00000CAE 8ED8                <1> 	mov ds, ax
  1476 00000CB0 8EC0                <1> 	mov es, ax
  1477 00000CB2 8EE0                <1> 	mov fs, ax
  1478 00000CB4 8ED0                <1> 	mov ss, ax
  1479 00000CB6 8B25[EC0C0000]      <1> 	mov esp, [pmodeesp]
  1480 00000CBC 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1481 00000CC0 8EE8                <1> 	mov gs, ax
  1482                              <1> 
  1483 00000CC2 BB[F60C0000]        <1> 	mov ebx, cr0old
  1484                              <1> rmcopyfromfirstmbyte:
  1485 00000CC7 658B03              <1> 	mov eax, [gs:ebx]
  1486 00000CCA 8903                <1> 	mov [ebx], eax
  1487 00000CCC 81C304000000        <1> 	add ebx, 4
  1488 00000CD2 81FB[020D0000]      <1> 	cmp ebx, realmodeptr
  1489 00000CD8 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1490                              <1> 
  1491 00000CDA E806580000          <1> 	call initialize.pic ;reset irq's and masks
  1492 00000CDF FB                  <1> 	sti
  1493 00000CE0 A1[FE0C0000]        <1> 	mov eax, [realmodeeax]
  1494 00000CE5 8B1D[FA0C0000]      <1> 	mov ebx, [realmodeebx]
  1495 00000CEB C3                  <1> 	ret
  1496                              <1> 	
  1497 00000CEC 00000000            <1> pmodeesp dd 0
  1498                              <1> idt_real:
  1499 00000CF0 FF03                <1> 	dw 0x3FF
  1500 00000CF2 00000000            <1> 	dd 0
  1501 00000CF6 00000000            <1> cr0old dd 0
  1502 00000CFA 00000000            <1> realmodeebx dd 0
  1503 00000CFE 00000000            <1> realmodeeax dd 0
  1504 00000D02 0000                <1> realmodeptr dw 0
  1505 00000D04 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1506                                  [BITS 32]
  1507                                      %include "source/exception.asm"
  1508                              <1> %ifdef exceptions.included
  1509                              <1> unhand:	
  1510                              <1> 	%assign i 0
  1511                              <1> 	%rep 32
  1512                              <1> 	mov byte [intprob], i
  1513                              <1> 	jmp unhand2
  1514                              <1> 	%assign i i+1
  1515                              <1> 	%endrep
  1516 00000D08 C605[C3110000]00    <2>  mov byte [intprob], i
  1517 00000D0F E974010000          <2>  jmp unhand2
  1518                              <2>  %assign i i+1
  1519 00000D14 C605[C3110000]01    <2>  mov byte [intprob], i
  1520 00000D1B E968010000          <2>  jmp unhand2
  1521                              <2>  %assign i i+1
  1522 00000D20 C605[C3110000]02    <2>  mov byte [intprob], i
  1523 00000D27 E95C010000          <2>  jmp unhand2
  1524                              <2>  %assign i i+1
  1525 00000D2C C605[C3110000]03    <2>  mov byte [intprob], i
  1526 00000D33 E950010000          <2>  jmp unhand2
  1527                              <2>  %assign i i+1
  1528 00000D38 C605[C3110000]04    <2>  mov byte [intprob], i
  1529 00000D3F E944010000          <2>  jmp unhand2
  1530                              <2>  %assign i i+1
  1531 00000D44 C605[C3110000]05    <2>  mov byte [intprob], i
  1532 00000D4B E938010000          <2>  jmp unhand2
  1533                              <2>  %assign i i+1
  1534 00000D50 C605[C3110000]06    <2>  mov byte [intprob], i
  1535 00000D57 E92C010000          <2>  jmp unhand2
  1536                              <2>  %assign i i+1
  1537 00000D5C C605[C3110000]07    <2>  mov byte [intprob], i
  1538 00000D63 E920010000          <2>  jmp unhand2
  1539                              <2>  %assign i i+1
  1540 00000D68 C605[C3110000]08    <2>  mov byte [intprob], i
  1541 00000D6F E914010000          <2>  jmp unhand2
  1542                              <2>  %assign i i+1
  1543 00000D74 C605[C3110000]09    <2>  mov byte [intprob], i
  1544 00000D7B E908010000          <2>  jmp unhand2
  1545                              <2>  %assign i i+1
  1546 00000D80 C605[C3110000]0A    <2>  mov byte [intprob], i
  1547 00000D87 E9FC000000          <2>  jmp unhand2
  1548                              <2>  %assign i i+1
  1549 00000D8C C605[C3110000]0B    <2>  mov byte [intprob], i
  1550 00000D93 E9F0000000          <2>  jmp unhand2
  1551                              <2>  %assign i i+1
  1552 00000D98 C605[C3110000]0C    <2>  mov byte [intprob], i
  1553 00000D9F E9E4000000          <2>  jmp unhand2
  1554                              <2>  %assign i i+1
  1555 00000DA4 C605[C3110000]0D    <2>  mov byte [intprob], i
  1556 00000DAB E9D8000000          <2>  jmp unhand2
  1557                              <2>  %assign i i+1
  1558 00000DB0 C605[C3110000]0E    <2>  mov byte [intprob], i
  1559 00000DB7 E9CC000000          <2>  jmp unhand2
  1560                              <2>  %assign i i+1
  1561 00000DBC C605[C3110000]0F    <2>  mov byte [intprob], i
  1562 00000DC3 E9C0000000          <2>  jmp unhand2
  1563                              <2>  %assign i i+1
  1564 00000DC8 C605[C3110000]10    <2>  mov byte [intprob], i
  1565 00000DCF E9B4000000          <2>  jmp unhand2
  1566                              <2>  %assign i i+1
  1567 00000DD4 C605[C3110000]11    <2>  mov byte [intprob], i
  1568 00000DDB E9A8000000          <2>  jmp unhand2
  1569                              <2>  %assign i i+1
  1570 00000DE0 C605[C3110000]12    <2>  mov byte [intprob], i
  1571 00000DE7 E99C000000          <2>  jmp unhand2
  1572                              <2>  %assign i i+1
  1573 00000DEC C605[C3110000]13    <2>  mov byte [intprob], i
  1574 00000DF3 E990000000          <2>  jmp unhand2
  1575                              <2>  %assign i i+1
  1576 00000DF8 C605[C3110000]14    <2>  mov byte [intprob], i
  1577 00000DFF E984000000          <2>  jmp unhand2
  1578                              <2>  %assign i i+1
  1579 00000E04 C605[C3110000]15    <2>  mov byte [intprob], i
  1580 00000E0B E978000000          <2>  jmp unhand2
  1581                              <2>  %assign i i+1
  1582 00000E10 C605[C3110000]16    <2>  mov byte [intprob], i
  1583 00000E17 E96C000000          <2>  jmp unhand2
  1584                              <2>  %assign i i+1
  1585 00000E1C C605[C3110000]17    <2>  mov byte [intprob], i
  1586 00000E23 E960000000          <2>  jmp unhand2
  1587                              <2>  %assign i i+1
  1588 00000E28 C605[C3110000]18    <2>  mov byte [intprob], i
  1589 00000E2F E954000000          <2>  jmp unhand2
  1590                              <2>  %assign i i+1
  1591 00000E34 C605[C3110000]19    <2>  mov byte [intprob], i
  1592 00000E3B E948000000          <2>  jmp unhand2
  1593                              <2>  %assign i i+1
  1594 00000E40 C605[C3110000]1A    <2>  mov byte [intprob], i
  1595 00000E47 E93C000000          <2>  jmp unhand2
  1596                              <2>  %assign i i+1
  1597 00000E4C C605[C3110000]1B    <2>  mov byte [intprob], i
  1598 00000E53 E930000000          <2>  jmp unhand2
  1599                              <2>  %assign i i+1
  1600 00000E58 C605[C3110000]1C    <2>  mov byte [intprob], i
  1601 00000E5F E924000000          <2>  jmp unhand2
  1602                              <2>  %assign i i+1
  1603 00000E64 C605[C3110000]1D    <2>  mov byte [intprob], i
  1604 00000E6B E918000000          <2>  jmp unhand2
  1605                              <2>  %assign i i+1
  1606 00000E70 C605[C3110000]1E    <2>  mov byte [intprob], i
  1607 00000E77 E90C000000          <2>  jmp unhand2
  1608                              <2>  %assign i i+1
  1609 00000E7C C605[C3110000]1F    <2>  mov byte [intprob], i
  1610 00000E83 E900000000          <2>  jmp unhand2
  1611                              <2>  %assign i i+1
  1612                              <1> unhand2:
  1613 00000E88 FA                  <1> 	cli
  1614 00000E89 1E                  <1> 	push ds
  1615 00000E8A 06                  <1> 	push es
  1616 00000E8B 0FA0                <1> 	push fs
  1617 00000E8D 0FA8                <1> 	push gs
  1618 00000E8F 16                  <1> 	push ss
  1619 00000E90 60                  <1> 	pushad
  1620                              <1> %ifdef gui.included
  1621 00000E91 803D[018A0000]00    <1> 	cmp byte [guion], 0
  1622 00000E98 0F8432000000        <1> 	je near noguiunhandstuff
  1623 00000E9E 66C705[BD110000]08- <1> 	mov word [locunhandy], 8
  1624 00000EA6 00                  <1>
  1625 00000EA7 66C705[BF110000]08- <1> 	mov word [locunhandx], 8
  1626 00000EAF 00                  <1>
  1627 00000EB0 668B1D[26720000]    <1> 	mov bx, [background]
  1628 00000EB7 66891D[C1110000]    <1> 	mov [backgroundcache], bx
  1629 00000EBE C605[29590000]01    <1> 	mov byte [mousedisabled],1
  1630 00000EC5 66BB00F8            <1> 	mov bx, 1111100000000000b
  1631 00000EC9 66891D[26720000]    <1> 	mov [background], bx
  1632                              <1> noguiunhandstuff:
  1633                              <1> %endif
  1634 00000ED0 89E6                <1> 	mov esi, esp
  1635 00000ED2 8935[B1110000]      <1> 	mov [espfirst], esi
  1636 00000ED8 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1637 00000EDE 8935[AD110000]      <1> 	mov [esploc], esi
  1638 00000EE4 BE[D2110000]        <1> 	mov esi, unhandmsg
  1639 00000EE9 8935[B5110000]      <1> 	mov [esiloc], esi
  1640 00000EEF 31C9                <1> 	xor ecx, ecx
  1641 00000EF1 8A0D[C3110000]      <1> 	mov cl, [intprob]
  1642 00000EF7 BB[A1150000]        <1> 	mov ebx, errortypes
  1643 00000EFC C1E102              <1> 	shl ecx, 2
  1644 00000EFF 01CB                <1> 	add ebx, ecx
  1645 00000F01 81FB[E1150000]      <1> 	cmp ebx, errortypesend
  1646 00000F07 7205                <1> 	jb gooderrortype
  1647 00000F09 BB[E1150000]        <1> 	mov ebx, errortypesend
  1648                              <1> gooderrortype:
  1649 00000F0E 8B33                <1> 	mov esi, [ebx]
  1650                              <1> %ifdef gui.included
  1651 00000F10 803D[018A0000]00    <1> 	cmp byte [guion], 0
  1652 00000F17 0F842D000000        <1> 	je near errortext
  1653 00000F1D 668B0D[BD110000]    <1> 	mov cx, [locunhandy]
  1654 00000F24 668B15[BF110000]    <1> 	mov dx, [locunhandx]
  1655 00000F2B 66B80100            <1> 	mov ax, 1
  1656 00000F2F 6631DB              <1> 	xor bx, bx
  1657 00000F32 E85E690000          <1> 	call showstring2
  1658 00000F37 66890D[BD110000]    <1> 	mov [locunhandy], cx
  1659 00000F3E 668915[BF110000]    <1> 	mov [locunhandx], dx
  1660 00000F45 E905000000          <1> 	jmp errortextdone
  1661                              <1> %endif
  1662                              <1> errortext:
  1663 00000F4A E8160E0000          <1> 	call print		;get the error message and print it
  1664                              <1> errortextdone:
  1665 00000F4F 31C9                <1> 	xor ecx, ecx
  1666 00000F51 8A0D[C3110000]      <1> 	mov cl, [intprob]
  1667 00000F57 E8EA010000          <1> 	call expdump
  1668                              <1> dumpstack:
  1669 00000F5C 8B35[AD110000]      <1> 	mov esi, [esploc]
  1670 00000F62 39E6                <1> 	cmp esi, esp
  1671 00000F64 7219                <1> 	jb donedump
  1672 00000F66 368B0E              <1> 	mov ecx, [ss:esi]
  1673 00000F69 81EE04000000        <1> 	sub esi, 4
  1674 00000F6F 8935[AD110000]      <1> 	mov [esploc], esi
  1675 00000F75 E8CC010000          <1> 	call expdump
  1676 00000F7A E9DDFFFFFF          <1> 	jmp dumpstack
  1677                              <1> donedump:
  1678 00000F7F 0F20C1              <1> 	mov ecx, cr0
  1679 00000F82 E8BF010000          <1> 	call expdump
  1680 00000F87 0F20D1              <1> 	mov ecx, cr2
  1681 00000F8A E8B7010000          <1> 	call expdump
  1682 00000F8F 0F20D9              <1> 	mov ecx, cr3
  1683 00000F92 E8AF010000          <1> 	call expdump
  1684 00000F97 0F20E1              <1> 	mov ecx, cr4
  1685 00000F9A E8A7010000          <1> 	call expdump
  1686 00000F9F 0F00C9              <1> 	str ecx
  1687 00000FA2 E89F010000          <1> 	call expdump
  1688 00000FA7 0F010D[CC110000]    <1> 	sidt [igdtcache]
  1689 00000FAE 8B0D[CE110000]      <1> 	mov ecx, [igdtcache + 2]
  1690 00000FB4 E88D010000          <1> 	call expdump
  1691 00000FB9 0F0105[CC110000]    <1> 	sgdt [igdtcache]
  1692 00000FC0 8B0D[CE110000]      <1> 	mov ecx, [igdtcache + 2]
  1693 00000FC6 E87B010000          <1> 	call expdump
  1694 00000FCB 0F00C1              <1> 	sldt ecx
  1695 00000FCE E873010000          <1> 	call expdump
  1696 00000FD3 8B35[AD110000]      <1> 	mov esi, [esploc]
  1697 00000FD9 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1698 00000FDE 81C710000000        <1> 	add edi, 16
  1699 00000FE4 893D[C8110000]      <1> 	mov [codelocend], edi
  1700 00000FEA 81EF20000000        <1> 	sub edi, 32
  1701                              <1> dumpcodeloop:
  1702 00000FF0 893D[C4110000]      <1> 	mov [codeloc], edi
  1703 00000FF6 8B0F                <1> 	mov ecx, [edi]
  1704 00000FF8 E849010000          <1> 	call expdump
  1705 00000FFD 8B3D[C4110000]      <1> 	mov edi, [codeloc]
  1706 00001003 81C704000000        <1> 	add edi, 4
  1707 00001009 3B3D[C8110000]      <1> 	cmp edi, [codelocend]
  1708 0000100F 72DF                <1> 	jb dumpcodeloop
  1709 00001011 BE[D7100000]        <1> 	mov esi, backtoosmsg
  1710                              <1> %ifdef gui.included
  1711 00001016 803D[018A0000]00    <1> 	cmp byte [guion], 0
  1712 0000101D 741F                <1> 	je backtomsg
  1713                              <1> guibacktomsg:
  1714 0000101F 668B15[BF110000]    <1> 	mov dx, [locunhandx]
  1715 00001026 668B0D[BD110000]    <1> 	mov cx, [locunhandy]
  1716 0000102D 66B80100            <1> 	mov ax, 1
  1717 00001031 6631DB              <1> 	xor bx, bx
  1718 00001034 E85C680000          <1> 	call showstring2
  1719 00001039 E905000000          <1> 	jmp backtomsgdone
  1720                              <1> backtomsg:
  1721                              <1> %endif
  1722 0000103E E8220D0000          <1> 	call print
  1723                              <1> backtomsgdone:
  1724 00001043 30C0                <1> 	xor al, al
  1725 00001045 E839130000          <1> 	call rdcharint
  1726 0000104A 803D[C3110000]03    <1> 	cmp byte [intprob], 3
  1727 00001051 7541                <1> 	jne nodebugint
  1728                              <1> %ifdef gui.included
  1729 00001053 803D[018A0000]00    <1> 	cmp byte [guion], 0
  1730 0000105A 7427                <1> 	je nodebuggui
  1731 0000105C 668B1D[C1110000]    <1> 	mov bx, [backgroundcache]
  1732 00001063 66891D[26720000]    <1> 	mov [background], bx
  1733 0000106A 6631DB              <1> 	xor bx, bx
  1734 0000106D C605[29590000]00    <1> 	mov byte [mousedisabled], 0
  1735 00001074 E81E610000          <1> 	call guiclear
  1736 00001079 E8AC610000          <1> 	call reloadallgraphics
  1737 0000107E E898180000          <1> 	call termcopy
  1738                              <1> nodebuggui:
  1739                              <1> %endif
  1740 00001083 8B35[B1110000]      <1> 	mov esi, [espfirst]
  1741 00001089 89F4                <1> 	mov esp, esi
  1742 0000108B 61                  <1> 	popad
  1743 0000108C 17                  <1> 	pop ss
  1744 0000108D 0FA9                <1> 	pop gs
  1745 0000108F 0FA1                <1> 	pop fs
  1746 00001091 07                  <1> 	pop es
  1747 00001092 1F                  <1> 	pop ds
  1748 00001093 CF                  <1> 	iret
  1749                              <1> nodebugint:
  1750 00001094 61                  <1> 	popad
  1751 00001095 17                  <1> 	pop ss
  1752 00001096 0FA9                <1> 	pop gs
  1753 00001098 0FA1                <1> 	pop fs
  1754 0000109A 07                  <1> 	pop es
  1755 0000109B 1F                  <1> 	pop ds
  1756 0000109C 81C408000000        <1> 	add esp, 8
  1757                              <1> ;	popf ;pop the cs segment selector into eflags
  1758                              <1> ;	popf ;then pop the flags
  1759                              <1> %ifdef gui.included
  1760 000010A2 803D[018A0000]00    <1> 	cmp byte [guion], 0
  1761 000010A9 7427                <1> 	je returnunhandgui
  1762 000010AB 668B1D[C1110000]    <1> 	mov bx, [backgroundcache]
  1763 000010B2 66891D[26720000]    <1> 	mov [background], bx
  1764 000010B9 6631DB              <1> 	xor bx, bx
  1765 000010BC C605[29590000]00    <1> 	mov byte [mousedisabled], 0
  1766 000010C3 E8CF600000          <1> 	call guiclear
  1767 000010C8 E85D610000          <1> 	call reloadallgraphics
  1768 000010CD E849180000          <1> 	call termcopy
  1769                              <1> %endif
  1770                              <1> returnunhandgui:
  1771 000010D2 E9A71C0000          <1> 	jmp nwcmd
  1772 000010D7 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1773 000010E0 737420616E79207072- <1>
  1774 000010E9 6F626C656D7320696E- <1>
  1775 000010F2 207468652049737375- <1>
  1776 000010FB 65732073656374696F- <1>
  1777 00001104 6E20617420736F6C6C- <1>
  1778 0000110D 65726F732E676F6F67- <1>
  1779 00001116 6C65636F64652E636F- <1>
  1780 0000111F 6D0A                <1>
  1781 00001121 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1782 0000112A 206B657920746F2072- <1>
  1783 00001133 657475726E20746F20- <1>
  1784 0000113C 536F6C6C65724F530A- <1>
  1785 00001145 00                  <1>
  1786                              <1> expdump:
  1787 00001146 8B35[B5110000]      <1> 	mov esi, [esiloc]
  1788 0000114C 89F7                <1> 	mov edi, esi
  1789 0000114E 81C70F000000        <1> 	add edi, 15
  1790 00001154 81C604000000        <1> 	add esi, 4
  1791 0000115A 893D[B5110000]      <1> 	mov [esiloc], edi
  1792 00001160 81EF03000000        <1> 	sub edi, 3
  1793 00001166 E8AB200000          <1> 	call converthex
  1794 0000116B 81EE04000000        <1> 	sub esi, 4
  1795                              <1> %ifdef gui.included
  1796 00001171 803D[018A0000]00    <1> 	cmp byte [guion], 0
  1797 00001178 0F8429000000        <1> 	je near expdumptext
  1798 0000117E 668B0D[BD110000]    <1> 	mov cx, [locunhandy]
  1799 00001185 668B15[BF110000]    <1> 	mov dx, [locunhandx]
  1800 0000118C 66B80100            <1> 	mov ax, 1
  1801 00001190 6631DB              <1> 	xor bx, bx
  1802 00001193 E8FD660000          <1> 	call showstring2
  1803 00001198 66890D[BD110000]    <1> 	mov [locunhandy], cx
  1804 0000119F 668915[BF110000]    <1> 	mov [locunhandx], dx
  1805 000011A6 C3                  <1> 	ret
  1806                              <1> %endif
  1807                              <1> expdumptext:
  1808 000011A7 E8B90B0000          <1> 	call print
  1809 000011AC C3                  <1> 	ret
  1810 000011AD 00000000            <1> esploc dd 0
  1811 000011B1 00000000            <1> espfirst dd 0
  1812 000011B5 00000000            <1> esiloc dd 0
  1813 000011B9 00000000            <1> esiregbuf dd 0
  1814 000011BD 0100                <1> locunhandy dw 1
  1815 000011BF 0100                <1> locunhandx dw 1
  1816 000011C1 0000                <1> backgroundcache dw 0
  1817 000011C3 00                  <1> intprob db 0
  1818 000011C4 00000000            <1> codeloc dd 0
  1819 000011C8 00000000            <1> codelocend dd 0
  1820 000011CC 000000000000        <1> igdtcache dw 0,0,0
  1821                              <1> 	unhandmsg:	
  1822 000011D2 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1823 000011DB 303030FF0A00        <1>
  1824                              <1> unhndrg:
  1825 000011E1 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;this dumps the stack before the stack frame in question
  1826 000011EA 303030202000<rept>  <1>
  1827 0000124A FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1828 00001253 303030FF0A00        <1>
  1829 00001259 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1830 00001262 303030202000<rept>  <1>
  1831 000012C2 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1832 000012CB 303030FF0A00        <1>
  1833 000012D1 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1834 000012DA 303030202000<rept>  <1>
  1835 0000133A FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1836 00001343 303030FF0A00        <1>
  1837 00001349 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1838 00001352 303030202000<rept>  <1>
  1839 000013B2 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1840 000013BB 303030FF0A00        <1>
  1841                              <1> unhandregs:
  1842 000013C1 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1843 000013CA 303030202000        <1>
  1844 000013D0 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1845 000013D9 303030202000        <1>
  1846 000013DF 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1847 000013E8 303030FF0A00        <1>
  1848 000013EE 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1849 000013F7 303030202000        <1>
  1850 000013FD 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1851 00001406 303030202000        <1>
  1852 0000140C 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1853 00001415 303030202000        <1>
  1854 0000141B 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1855 00001424 303030202000        <1>
  1856 0000142A 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1857 00001433 303030FF0A00        <1>
  1858 00001439 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1859 00001442 303030202000        <1>
  1860 00001448 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1861 00001451 303030202000        <1>
  1862 00001457 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1863 00001460 303030202000        <1>
  1864 00001466 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1865 0000146F 303030FF0A00        <1>
  1866 00001475 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1867 0000147E 303030202000        <1>
  1868 00001484 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1869 0000148D 303030202000        <1>
  1870 00001493 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1871 0000149C 303030202000        <1>
  1872 000014A2 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1873 000014AB 303030FF0A00        <1>
  1874 000014B1 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1875 000014BA 303030202000        <1>
  1876 000014C0 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1877 000014C9 303030202000        <1>
  1878 000014CF 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1879 000014D8 303030202000        <1>
  1880 000014DE 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1881 000014E7 303030FF0A00        <1>
  1882 000014ED 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1883 000014F6 303030202000        <1>
  1884 000014FC 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1885 00001505 303030202000        <1>
  1886 0000150B 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1887 00001514 303030202000        <1>
  1888 0000151A 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1889 00001523 303030FF0A00        <1>
  1890 00001529 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;this dumps the code before and after the interrupt in question
  1891 00001532 303030202000<rept>  <1>
  1892 00001547 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1893 00001550 30303020FF00        <1>
  1894 00001556 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1895 0000155F 3030305D2000        <1>
  1896 00001565 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1897 0000156E 303030202000<rept>  <1>
  1898 00001592 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1899 0000159B 303030FF0A00        <1>
  1900                              <1> unhandmsgend:
  1901                              <1> 
  1902                              <1> errortypes:
  1903 000015A1 [E5150000]          <1> 			dd err0
  1904 000015A5 [4E160000]          <1> 			dd err1
  1905 000015A9 [AF160000]          <1> 			dd err2
  1906 000015AD [04170000]          <1> 			dd err3
  1907 000015B1 [68170000]          <1> 			dd err4
  1908 000015B5 [BA170000]          <1> 			dd err5
  1909 000015B9 [24180000]          <1> 			dd err6
  1910 000015BD [8C180000]          <1> 			dd err7
  1911 000015C1 [D6180000]          <1> 			dd err8
  1912 000015C5 [33190000]          <1> 			dd err9
  1913 000015C9 [8C190000]          <1> 			dd err10
  1914 000015CD [D7190000]          <1> 			dd err11
  1915 000015D1 [271A0000]          <1> 			dd err12
  1916 000015D5 [801A0000]          <1> 			dd err13
  1917 000015D9 [E31A0000]          <1> 			dd err14
  1918 000015DD [1F1B0000]          <1> 			dd err15
  1919                              <1> errortypesend:
  1920 000015E1 [AB1B0000]          <1> 			dd unknownerror
  1921                              <1> 			
  1922 000015E5 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1923 000015EE 6279207A65726F3A0A  <1>
  1924 000015F7 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1925 00001600 6C79206C696D2061C3- <1>
  1926 00001609 B778203D20E2889E20- <1>
  1927 00001612 7768656E2061206973- <1>
  1928 0000161B 20616E79207265616C- <1>
  1929 00001624 206E756D6265722E20- <1>
  1930 0000162D 486170707920456173- <1>
  1931 00001636 746572210A          <1>
  1932 0000163B 202020202020202020- <1> 		db "            x→0",10,0
  1933 00001644 20202078E28692300A- <1>
  1934 0000164D 00                  <1>
  1935                              <1> 		
  1936 0000164E 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1937 00001657 65702F427265616B70- <1>
  1938 00001660 6F696E743A0A        <1>
  1939 00001666 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1940 0000166F 696E74206661756C74- <1>
  1941 00001678 2C20627265616B706F- <1>
  1942 00001681 696E7420747261702C- <1>
  1943 0000168A 206F722073696E676C- <1>
  1944 00001693 652D73746570207472- <1>
  1945 0000169C 617020776173207472- <1>
  1946 000016A5 696767657265642E0A- <1>
  1947 000016AE 00                  <1>
  1948                              <1> 		
  1949 000016AF 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1950 000016B8 6C6520696E74657272- <1>
  1951 000016C1 7570743A0A          <1>
  1952 000016C6 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1953 000016CF 6520696E7465727275- <1>
  1954 000016D8 707420776173207472- <1>
  1955 000016E1 696767657265642074- <1>
  1956 000016EA 68617420636F756C64- <1>
  1957 000016F3 206E6F74206265206D- <1>
  1958 000016FC 61736B65642E0A00    <1>
  1959                              <1> 		
  1960 00001704 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1961 0000170D 743A0A              <1>
  1962 00001710 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1963 00001719 727275707420697320- <1>
  1964 00001722 7573656420696E2070- <1>
  1965 0000172B 726F6772616D732074- <1>
  1966 00001734 6F2073686F77207468- <1>
  1967 0000173D 6520737461636B2061- <1>
  1968 00001746 6E6420726567697374- <1>
  1969 0000174F 65727320616E642063- <1>
  1970 00001758 616E2062650A        <1>
  1971 0000175E 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1972 00001767 00                  <1>
  1973                              <1> 		
  1974 00001768 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1975 00001771 0A                  <1>
  1976 00001772 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1977 0000177B 73736F722072616E20- <1>
  1978 00001784 696E746F20616E2049- <1>
  1979 0000178D 4E544F20696E737472- <1>
  1980 00001796 756374696F6E207769- <1>
  1981 0000179F 746820746865206F76- <1>
  1982 000017A8 6572666C6F7720666C- <1>
  1983 000017B1 6167207365742E0A00  <1>
  1984                              <1> 		
  1985 000017BA 426F756E6473206368- <1> err5	db "Bounds check:",10
  1986 000017C3 65636B3A0A          <1>
  1987 000017C8 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1988 000017D1 73736F72207265626F- <1>
  1989 000017DA 756E6465642066726F- <1>
  1990 000017E3 6D206120424F554E44- <1>
  1991 000017EC 20696E737472756374- <1>
  1992 000017F5 696F6E2072756E206F- <1>
  1993 000017FE 6E20616E206F706572- <1>
  1994 00001807 616E64207468617420- <1>
  1995 00001810 776173206F75740A    <1>
  1996 00001818 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1997 00001821 2E0A00              <1>
  1998                              <1> 		
  1999 00001824 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  2000 0000182D 70636F64653A0A      <1>
  2001 00001834 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  2002 0000183D 73736F722068617320- <1>
  2003 00001846 6E6F20696465612077- <1>
  2004 0000184F 686174206974207761- <1>
  2005 00001858 7320747279696E6720- <1>
  2006 00001861 746F20657865637574- <1>
  2007 0000186A 652E20446F6E277420- <1>
  2008 00001873 72756E205353453420- <1>
  2009 0000187C 636F64650A          <1>
  2010 00001881 6F6E20343836277321- <1> 		db "on 486's!",10,0
  2011 0000188A 0A00                <1>
  2012                              <1> 		
  2013 0000188C 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  2014 00001895 6F72206E6F74206176- <1>
  2015 0000189E 61696C61626C653A0A  <1>
  2016 000018A7 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  2017 000018B0 206B6E6F7720746865- <1>
  2018 000018B9 7920646F6E2774206D- <1>
  2019 000018C2 616B652074686F7365- <1>
  2020 000018CB 20616E796D6F726521- <1>
  2021 000018D4 0A00                <1>
  2022                              <1> 		
  2023 000018D6 446F75626C65206661- <1> err8	db "Double fault:",10
  2024 000018DF 756C743A0A          <1>
  2025 000018E4 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  2026 000018ED 74696F6E2068616E64- <1>
  2027 000018F6 6C657220636F756C64- <1>
  2028 000018FF 206E6F742068616E64- <1>
  2029 00001908 6C6520746861742069- <1>
  2030 00001911 7420636F756C64206E- <1>
  2031 0000191A 6F742068616E646C65- <1>
  2032 00001923 20616E206578636570- <1>
  2033 0000192C 74696F6E2E0A00      <1>
  2034                              <1> 		
  2035 00001933 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  2036 0000193C 6F72207365676D656E- <1>
  2037 00001945 74206F76657272756E- <1>
  2038 0000194E 3A0A00              <1>
  2039 00001951 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  2040 0000195A 722068617070656E73- <1>
  2041 00001963 20696E206D6F646572- <1>
  2042 0000196C 6E20636F6D70757465- <1>
  2043 00001975 72732C20616E64206E- <1>
  2044 0000197E 657665722073686F75- <1>
  2045 00001987 6C642E0A00          <1>
  2046                              <1> 
  2047 0000198C 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  2048 00001995 53533A0A            <1>
  2049 00001999 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  2050 000019A2 686174207761732073- <1>
  2051 000019AB 776974636865642074- <1>
  2052 000019B4 6F20697320696E7661- <1>
  2053 000019BD 6C69642E204E6F7468- <1>
  2054 000019C6 696E672066756E6E79- <1>
  2055 000019CF 20686572652E0A00    <1>
  2056                              <1> 		
  2057 000019D7 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2058 000019E0 6F742070726573656E- <1>
  2059 000019E9 743A0A              <1>
  2060 000019EC 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2061 000019F5 6E7420626974206F66- <1>
  2062 000019FE 20746865207365676D- <1>
  2063 00001A07 656E74206465736372- <1>
  2064 00001A10 6970746F7220697320- <1>
  2065 00001A19 73657420746F207A65- <1>
  2066 00001A22 726F2E0A00          <1>
  2067                              <1> 		
  2068 00001A27 537461636B20657863- <1> err12	db "Stack exception:",10
  2069 00001A30 657074696F6E3A0A    <1>
  2070 00001A38 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2071 00001A41 7363726970746F7220- <1>
  2072 00001A4A 697320696E76616C69- <1>
  2073 00001A53 64206F72206E6F7420- <1>
  2074 00001A5C 70726573656E74206F- <1>
  2075 00001A65 7220697473206C696D- <1>
  2076 00001A6E 697420697320746F6F- <1>
  2077 00001A77 20736D616C6C2E0A00  <1>
  2078                              <1> 		
  2079 00001A80 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2080 00001A89 726F74656374696F6E- <1>
  2081 00001A92 2076696F6C6174696F- <1>
  2082 00001A9B 6E3A0A              <1>
  2083 00001A9E 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2084 00001AA7 746564207468652063- <1>
  2085 00001AB0 6F6D70757465722E20- <1>
  2086 00001AB9 537465702061776179- <1>
  2087 00001AC2 20736C6F776C792E20- <1>
  2088 00001ACB 546865204642492069- <1>
  2089 00001AD4 73206F6E2069747320- <1>
  2090 00001ADD 7761792E0A00        <1>
  2091                              <1> 		
  2092 00001AE3 50616765206661756C- <1> err14	db "Page fault:",10
  2093 00001AEC 743A0A              <1>
  2094 00001AEF 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2095 00001AF8 746861742077617320- <1>
  2096 00001B01 726571756573746564- <1>
  2097 00001B0A 20776173206E6F7420- <1>
  2098 00001B13 617661696C61626C65- <1>
  2099 00001B1C 2E0A00              <1>
  2100                              <1> 		
  2101 00001B1F 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2102 00001B28 666F7220506C616E20- <1>
  2103 00001B31 523A0A              <1>
  2104 00001B34 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2105 00001B3D 727275707420697320- <1>
  2106 00001B46 726573657276656420- <1>
  2107 00001B4F 666F72207573616765- <1>
  2108 00001B58 206F6E6C7920627920- <1>
  2109 00001B61 746865206D696C6974- <1>
  2110 00001B6A 617279207768656E20- <1>
  2111 00001B73 6974206973206E6563- <1>
  2112 00001B7C 6573736172790A      <1>
  2113 00001B83 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'état.",10,0
  2114 00001B8C 746520612066756C6C- <1>
  2115 00001B95 2D7363616C6520636F- <1>
  2116 00001B9E 7570206427C3A97461- <1>
  2117 00001BA7 742E0A00            <1>
  2118                              <1> 		
  2119 00001BAB 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2120 00001BB4 68656C6C206A757374- <1>
  2121 00001BBD 2068617070656E6564- <1>
  2122 00001BC6 3F2049732065766572- <1>
  2123 00001BCF 796F6E65206F6B6179- <1>
  2124 00001BD8 3F2048617264206472- <1>
  2125 00001BE1 6976653F2056696465- <1>
  2126 00001BEA 6F20636172643F0A    <1>
  2127 00001BF2 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2128 00001BFB 726520796F75207468- <1>
  2129 00001C04 6572653F0A00        <1>
  2130                              <1> %else
  2131                              <1> unhand:	
  2132                              <1> 	%assign i 0
  2133                              <1> 	%rep 32
  2134                              <1> 	mov byte [intprob], i
  2135                              <1> 	jmp unhand2
  2136                              <1> 	%assign i i+1
  2137                              <1> 	%endrep
  2138                              <1> unhand2:
  2139                              <1> 	cmp byte [intprob], 3
  2140                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2141                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2142                              <1> 					;CD is the machine instruction for interrupt
  2143                              <1> 					;DEAD shows that the program died because of the int
  2144                              <1> 	mov bl, [intprob]
  2145                              <1> 	jmp exitprog
  2146                              <1> intprob db 0
  2147                              <1> %endif
  2148                                      %include "source/ints.asm"
  2149                              <1> int30h:	;for great justice
  2150 00001C0A 80FC00              <1> 	cmp ah, 0
  2151 00001C0D 0F849A000000        <1> 	je near exitprog   ;kills app
  2152 00001C13 80FC01              <1> 	cmp ah, 1
  2153 00001C16 0F8419010000        <1> 	je near prntstr  ;print string
  2154 00001C1C 80FC02              <1> 	cmp ah, 2
  2155 00001C1F 0F84C2010000        <1> 	je near readstr	;read string
  2156 00001C25 80FC03              <1> 	cmp ah, 3
  2157 00001C28 0F84E2010000        <1> 	je near clearscrn	;clear screen
  2158 00001C2E 80FC04              <1> 	cmp ah, 4
  2159 00001C31 0F8457020000        <1> 	je near prntreadstr	;read and print string
  2160 00001C37 80FC05              <1> 	cmp ah, 5
  2161 00001C3A 0F8437070000        <1> 	je near readchar	;get char
  2162 00001C40 80FC06              <1> 	cmp ah, 6
  2163 00001C43 0F849E070000        <1> 	je near prntchar	;print char
  2164 00001C49 80FC07              <1> 	cmp ah, 7
  2165 00001C4C 0F84BD090000        <1> 	je near openfile	;read file
  2166                              <1> ;	cmp ah, 8
  2167                              <1> ;	je near closefile	;close file
  2168 00001C52 80FC09              <1> 	cmp ah, 9
  2169 00001C55 0F84BE090000        <1> 	je near num2str	;convert number to string
  2170 00001C5B 80FC0A              <1> 	cmp ah, 10
  2171 00001C5E 0F84CD090000        <1> 	je near str2num	;convert string to number
  2172                              <1> %ifdef threads.included
  2173 00001C64 80FC0B              <1> 	cmp ah, 11
  2174 00001C67 0F84D0090000        <1> 	je near forkthread	;create thread
  2175                              <1> %endif
  2176 00001C6D 80FC0C              <1> 	cmp ah, 12
  2177 00001C70 0F849E0A0000        <1> 	je near gettime	;get time
  2178 00001C76 80FC0D              <1> 	cmp ah, 13
  2179 00001C79 0F84AA0A0000        <1> 	je near settime	;set time
  2180 00001C7F 80FC0E              <1> 	cmp ah, 14
  2181 00001C82 0F84B10A0000        <1> 	je near runcmd	;run program
  2182 00001C88 80FC0F              <1> 	cmp ah, 15
  2183 00001C8B 0F84BD0A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2184 00001C91 80FC10              <1> 	cmp ah, 16
  2185 00001C94 0F84E20A0000        <1> 	je near hooksig	;hook code to a signal
  2186                              <1> %ifdef gui.included
  2187 00001C9A 80FC11              <1> 	cmp ah, 17
  2188 00001C9D 0F84E90A0000        <1> 	je near guiint	;GUI operations
  2189                              <1> %endif
  2190                              <1> %ifdef sound.included
  2191 00001CA3 80FC12              <1> 	cmp ah, 18
  2192 00001CA6 0F846A0C0000        <1> 	je near soundint	;sound operations
  2193                              <1> %endif
  2194                              <1> %ifdef network.included
  2195                              <1> 	cmp ah, 19
  2196                              <1> 	je near netint	;networking operations
  2197                              <1> %endif
  2198 00001CAC CF                  <1> 	iret
  2199                              <1> 
  2200                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2201                              <2> exitprog:
  2202 00001CAD 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2203 00001CB1 8ED8                <2> 	mov ds, ax
  2204 00001CB3 8EC0                <2> 	mov es, ax
  2205 00001CB5 8EE0                <2> 	mov fs, ax
  2206 00001CB7 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2207 00001CBB 8EE8                <2> 	mov gs, ax
  2208 00001CBD C705[B76A0000]0000- <2> 	mov dword [currentthread], 0
  2209 00001CC5 0000                <2>
  2210 00001CC7 C705[B26A0000]0400- <2> 	mov dword [lastthread], 4
  2211 00001CCF 0000                <2>
  2212 00001CD1 C605[B66A0000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2213 00001CD8 8B25[08B20300]      <2> 	mov esp, [previousstack] ;and this
  2214 00001CDE 81FB00000000        <2> 	cmp ebx, 0
  2215 00001CE4 0F8501000000        <2> 	jne near .error
  2216 00001CEA C3                  <2> 	ret
  2217                              <2> .error:
  2218 00001CEB 89D9                <2> 	mov ecx, ebx
  2219 00001CED B006                <2> 	mov al, 6
  2220 00001CEF A2[77320000]        <2> 	mov [firsthexshown], al
  2221 00001CF4 51                  <2> 	push ecx
  2222 00001CF5 BE[101D0000]        <2> 	mov esi, .msg1
  2223 00001CFA E855000000          <2> 	call printhighlight
  2224 00001CFF 59                  <2> 	pop ecx
  2225 00001D00 E887150000          <2> 	call showhex
  2226 00001D05 BE[251D0000]        <2> 	mov esi, .msg2
  2227 00001D0A E845000000          <2> 	call printhighlight
  2228 00001D0F C3                  <2> 	ret
  2229                              <2> 	
  2230 00001D10 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2231 00001D19 7461747573206F6620- <2>
  2232 00001D22 307800              <2>
  2233 00001D25 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2234 00001D2E 726E65642E0A00      <2>
  2235                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2236                              <2> prntstr:
  2237 00001D35 30E4                <2> xor ah, ah
  2238 00001D37 E830000000          <2> call printint
  2239 00001D3C E971E5FFFF          <2> jmp timerinterrupt
  2240                              <2> 
  2241                              <2> 	printquiet:
  2242 00001D41 6631C0              <2> 		xor ax, ax
  2243 00001D44 66A3[E51D0000]      <2> 		mov [endkeyprint], ax
  2244 00001D4A 66BB0700            <2> 		mov bx, 7
  2245 00001D4E E832000000          <2> 		call printint.b
  2246 00001D53 C3                  <2> 		ret
  2247                              <2> 
  2248                              <2> 	printhighlight:
  2249 00001D54 6631C0              <2> 		xor ax, ax
  2250 00001D57 66BBF000            <2> 		mov bx, 0xF0
  2251 00001D5B E90C000000          <2> 		jmp printint
  2252                              <2> 
  2253                              <2> 	printline:
  2254 00001D60 BE[DC890000]        <2> 		mov esi, line
  2255                              <2>     print:
  2256 00001D65 6631C0              <2> 		xor ax, ax
  2257 00001D68 66BB0700            <2> 		mov bx, 7
  2258                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2259 00001D6C 56                  <2> 		push esi
  2260 00001D6D 66A3[E51D0000]      <2> 		mov [endkeyprint], ax
  2261 00001D73 E80D000000          <2> 		call .b
  2262 00001D78 89F1                <2> 		mov ecx, esi
  2263 00001D7A 5F                  <2> 		pop edi
  2264 00001D7B 29F9                <2> 		sub ecx, edi
  2265 00001D7D 51                  <2> 		push ecx
  2266 00001D7E E8980B0000          <2> 		call termcopy
  2267 00001D83 59                  <2> 		pop ecx
  2268 00001D84 C3                  <2> 		ret
  2269                              <2> 	.b:	
  2270 00001D85 53                  <2> 		push ebx
  2271 00001D86 31C0                <2> 		xor eax, eax
  2272 00001D88 8A06                <2> 		mov al, [esi]
  2273 00001D8A 3CFF                <2> 		cmp al, 0xFF
  2274 00001D8C 7506                <2> 		jne .notnull
  2275 00001D8E 5B                  <2> 		pop ebx
  2276 00001D8F E94A000000          <2> 		jmp .noprint
  2277                              <2> 	.notnull:
  2278 00001D94 3CC0                <2> 		cmp al, 0xC0
  2279 00001D96 7231                <2> 		jb .doneutf
  2280 00001D98 3CE0                <2> 		cmp al, 0xE0
  2281 00001D9A 721A                <2> 		jb .two
  2282 00001D9C 46                  <2> 		inc esi
  2283 00001D9D 8A2E                <2> 		mov ch, [esi]
  2284 00001D9F 46                  <2> 		inc esi
  2285 00001DA0 8A0E                <2> 		mov cl, [esi]
  2286 00001DA2 C0E004              <2> 		shl al, 4
  2287 00001DA5 C0E102              <2> 		shl cl, 2
  2288 00001DA8 66C1E902            <2> 		shr cx, 2
  2289 00001DAC 08C5                <2> 		or ch, al
  2290 00001DAE 6689C8              <2> 		mov ax, cx
  2291 00001DB1 E913000000          <2> 		jmp .doneutf
  2292                              <2> 	.two:
  2293 00001DB6 8A2E                <2> 		mov ch, [esi]
  2294 00001DB8 46                  <2> 		inc esi
  2295 00001DB9 8A0E                <2> 		mov cl, [esi]
  2296 00001DBB 66C1E102            <2> 		shl cx, 2
  2297 00001DBF C0ED02              <2> 		shr ch, 2
  2298 00001DC2 66C1E902            <2> 		shr cx, 2
  2299 00001DC6 6689C8              <2> 		mov ax, cx
  2300                              <2> 	.doneutf:
  2301 00001DC9 5B                  <2> 		pop ebx
  2302 00001DCA 663B05[E51D0000]    <2> 		cmp ax, [endkeyprint]
  2303 00001DD1 7411                <2> 		je .done
  2304 00001DD3 663DFFFE            <2> 		cmp ax, 0xFEFF
  2305 00001DD7 7405                <2> 		je .noprint
  2306 00001DD9 E836060000          <2> 		call prcharq
  2307                              <2> 	.noprint:
  2308 00001DDE 46                  <2> 		inc esi
  2309 00001DDF E9A1FFFFFF          <2> 		jmp .b
  2310                              <2> 	.done:
  2311 00001DE4 C3                  <2> 		ret
  2312                              <2> 
  2313 00001DE5 0000                <2> endkeyprint dw 0
  2314                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2315                              <2> readstr:
  2316 00001DE7 E805000000          <2> call readint
  2317 00001DEC E9C1E4FFFF          <2> jmp timerinterrupt
  2318                              <2> 
  2319                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2320 00001DF1 89C3                <2> 		mov ebx, eax
  2321                              <2> 	.b:
  2322 00001DF3 53                  <2> 		push ebx
  2323 00001DF4 57                  <2> 		push edi
  2324 00001DF5 56                  <2> 		push esi
  2325 00001DF6 30C0                <2> 		xor al, al
  2326 00001DF8 E886050000          <2> 		call rdcharint
  2327 00001DFD 5E                  <2> 		pop esi
  2328 00001DFE 8806                <2> 		mov [esi], al
  2329 00001E00 46                  <2> 		inc esi
  2330 00001E01 5F                  <2> 		pop edi
  2331 00001E02 5B                  <2> 		pop ebx
  2332 00001E03 39FE                <2> 		cmp esi, edi
  2333 00001E05 7304                <2> 		jae .done
  2334 00001E07 38D8                <2> 		cmp al, bl
  2335 00001E09 75E8                <2> 		jne .b
  2336                              <2> 	.done:
  2337 00001E0B 4E                  <2> 		dec esi
  2338 00001E0C C60600              <2> 		mov byte [esi], 0
  2339 00001E0F C3                  <2> 		ret
  2340                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2341                              <2> clearscrn:
  2342 00001E10 E805000000          <2> call clear
  2343 00001E15 E998E4FFFF          <2> jmp timerinterrupt
  2344                              <2> %ifdef io.serial
  2345                              <2> clear:
  2346                              <2> 	mov esi, .str
  2347                              <2> 	call print
  2348                              <2> 	ret
  2349                              <2> .str db 27,"[2J",27,"[f",0
  2350                              <2> %else
  2351                              <2> clear:
  2352 00001E1A 668B0D[09260000]    <2> 		mov cx, [charxy]
  2353 00001E21 BF[9CE32B00]        <2> 		mov edi, videobuf
  2354 00001E26 31C0                <2> 		xor eax, eax
  2355 00001E28 A3[FF250000]        <2> 		mov [linebeginpos], eax
  2356 00001E2D A3[03260000]        <2> 		mov [videobufpos], eax
  2357 00001E32 6631D2              <2> 		xor dx, dx
  2358 00001E35 66A3[07260000]      <2> 		mov [charpos], ax
  2359 00001E3B 66B80700            <2> 		mov ax, 7
  2360 00001E3F C1E010              <2> 		shl eax, 16
  2361                              <2> 	clearb:
  2362 00001E42 8907                <2> 		mov [edi], eax
  2363 00001E44 81C704000000        <2> 		add edi, 4
  2364 00001E4A FEC9                <2> 		dec cl
  2365 00001E4C 80F900              <2> 		cmp cl, 0
  2366 00001E4F 75F1                <2> 		jne clearb
  2367 00001E51 8A0D[09260000]      <2> 		mov cl, [charxy]
  2368 00001E57 FECD                <2> 		dec ch
  2369 00001E59 80FD00              <2> 		cmp ch, 0
  2370 00001E5C 75E4                <2> 		jne clearb
  2371                              <2> 	cleardouble:
  2372 00001E5E BF[E4B82C00]        <2> 		mov edi, videobuf2
  2373 00001E63 668B0D[09260000]    <2> 		mov cx, [charxy]
  2374 00001E6A 31C0                <2> 		xor eax, eax
  2375                              <2> 	clearc:
  2376 00001E6C 8907                <2> 		mov [edi], eax
  2377 00001E6E 81C704000000        <2> 		add edi, 4
  2378 00001E74 FEC9                <2> 		dec cl
  2379 00001E76 80F900              <2> 		cmp cl, 0
  2380 00001E79 75F1                <2> 		jne clearc
  2381 00001E7B 8A0D[09260000]      <2> 		mov cl, [charxy]
  2382 00001E81 FECD                <2> 		dec ch
  2383 00001E83 80FD00              <2> 		cmp ch, 0
  2384 00001E86 75E4                <2> 		jne clearc
  2385 00001E88 E88E0A0000          <2> 		call termcopy
  2386 00001E8D C3                  <2> 		ret
  2387                              <2> %endif
  2388                              <2> 		
  2389                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2390                              <2> prntreadstr:
  2391 00001E8E E80B000000          <2> call rdprint
  2392 00001E93 E91AE4FFFF          <2> jmp timerinterrupt
  2393                              <2> 
  2394                              <2> readline:
  2395 00001E98 B00A                <2>   mov al, 10
  2396 00001E9A 66BB0700            <2>   mov bx, 7
  2397                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2398 00001E9E E80F000000          <2> 	call rdprintdos
  2399 00001EA3 50                  <2> 	push eax
  2400 00001EA4 A0[62230000]        <2> 	mov al, [endkeyrdpr]
  2401 00001EA9 30E4                <2> 	xor ah, ah
  2402 00001EAB E84D050000          <2> 	call prcharint
  2403 00001EB0 58                  <2> 	pop eax
  2404 00001EB1 C3                  <2> 	ret
  2405                              <2> 
  2406                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2407 00001EB2 8935[6C230000]      <2> 		mov [buftxtloc], esi
  2408 00001EB8 A2[62230000]        <2> 		mov [endkeyrdpr], al
  2409 00001EBD 66891D[64230000]    <2> 		mov [modkeyrdpr], bx
  2410 00001EC4 8935[66230000]      <2> 		mov [firstesirdpr], esi
  2411 00001ECA 893D[70230000]      <2> 		mov [endbufferrdpr], edi
  2412 00001ED0 8B3D[388E2D00]      <2> 		mov edi, [commandsentered]
  2413 00001ED6 893D[348E2D00]      <2> 		mov [commandlistentries], edi
  2414                              <2> 	rdprintb:
  2415 00001EDC 56                  <2> 		push esi
  2416 00001EDD B001                <2> 		mov al, 1
  2417 00001EDF E89F040000          <2> 		call rdcharint
  2418 00001EE4 8A25[E3230000]      <2> 		mov ah, [lastkey + 2]
  2419 00001EEA 88E1                <2> 		mov cl, ah
  2420 00001EEC 5E                  <2> 		pop esi
  2421                              <2> %ifdef io.serial
  2422                              <2> 		cmp ah, 0x41
  2423                              <2> 		je near rdprup
  2424                              <2> 		cmp ah, 0x42
  2425                              <2> 		je near rdprdown
  2426                              <2> 		cmp ah, 0x43
  2427                              <2> 		je near rdprright
  2428                              <2> 		cmp ah, 0x44
  2429                              <2> 		je near rdprleft
  2430                              <2> 		cmp ah, 0x31
  2431                              <2> 		je near rdprhome
  2432                              <2> 		cmp ah, 0x48
  2433                              <2> 		je near rdprhome
  2434                              <2> 		cmp ah, 0x46
  2435                              <2> 		je near rdprend
  2436                              <2> 		cmp ah, 0x33
  2437                              <2> 		je near rdprdel
  2438                              <2> 		cmp ah, 0x34
  2439                              <2> 		je near rdprend
  2440                              <2> %else
  2441 00001EED 803D[225F0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2442 00001EF4 753F                <2> 		jne notspecialrdprnt
  2443 00001EF6 80FC53              <2> 		cmp ah, 0x53
  2444 00001EF9 0F84C9030000        <2> 		je near rdprdel
  2445 00001EFF 80FC47              <2> 		cmp ah, 0x47
  2446 00001F02 0F8481010000        <2> 		je near rdprhome
  2447 00001F08 80FC4F              <2> 		cmp ah, 0x4F
  2448 00001F0B 0F849A010000        <2> 		je near rdprend
  2449 00001F11 80FC50              <2> 		cmp ah, 0x50
  2450 00001F14 0F8430020000        <2> 		je near rdprdown
  2451 00001F1A 80FC4D              <2> 		cmp ah, 0x4D
  2452 00001F1D 0F84CA010000        <2> 		je near rdprright
  2453 00001F23 80FC4B              <2> 		cmp ah, 0x4B
  2454 00001F26 0F849F010000        <2> 		je near rdprleft
  2455 00001F2C 80FC48              <2> 		cmp ah, 0x48
  2456 00001F2F 0F8458020000        <2> 		je near rdprup
  2457                              <2> 	notspecialrdprnt:
  2458                              <2> %endif
  2459 00001F35 66A1[E1230000]      <2> 		mov ax, [lastkey]
  2460 00001F3B 663D0800            <2> 		cmp ax, 8
  2461 00001F3F 0F84B8030000        <2> 		je near rdprbscheck
  2462 00001F45 663D0000            <2> 		cmp ax, 0
  2463 00001F49 7491                <2> 		je rdprintb
  2464 00001F4B 80F900              <2> 		cmp cl, 0
  2465 00001F4E 748C                <2> 		je rdprintb
  2466 00001F50 663D8000            <2> 		cmp ax, 0x80
  2467 00001F54 7257                <2> 		jb .normal
  2468 00001F56 663D0008            <2> 		cmp ax, 0x800
  2469 00001F5A 7321                <2> 		jae .three
  2470 00001F5C 46                  <2> 		inc esi
  2471 00001F5D 3B35[70230000]      <2> 		cmp esi, [endbufferrdpr]
  2472 00001F63 0F83DA000000        <2> 		jae near donerdprinc
  2473 00001F69 66C1E002            <2> 		shl ax, 2
  2474 00001F6D C0E802              <2> 		shr al, 2
  2475 00001F70 0C80                <2> 		or al, 10000000b
  2476 00001F72 80CCC0              <2> 		or ah, 11000000b
  2477 00001F75 8866FF              <2> 		mov [esi - 1], ah
  2478 00001F78 E930000000          <2> 		jmp .normal
  2479                              <2> .three:	
  2480 00001F7D 81C602000000        <2> 		add esi, 2
  2481 00001F83 3B35[70230000]      <2> 		cmp esi, [endbufferrdpr]
  2482 00001F89 0F83B4000000        <2> 		jae near donerdprinc
  2483 00001F8F 88E1                <2> 		mov cl, ah
  2484 00001F91 C0E904              <2> 		shr cl, 4
  2485 00001F94 80C9E0              <2> 		or cl, 11100000b
  2486 00001F97 884EFE              <2> 		mov [esi - 2], cl
  2487 00001F9A 66C1E004            <2> 		shl ax, 4
  2488 00001F9E 66C1E802            <2> 		shr ax, 2
  2489 00001FA2 80CC80              <2> 		or ah, 10000000b
  2490 00001FA5 C0E802              <2> 		shr al, 2
  2491 00001FA8 0C80                <2> 		or al, 10000000b
  2492 00001FAA 8866FF              <2> 		mov [esi - 1], ah
  2493                              <2> .normal:
  2494 00001FAD 8806                <2> 		mov [esi], al
  2495 00001FAF 46                  <2> 		inc esi
  2496 00001FB0 66A1[E1230000]      <2> 		mov ax, [lastkey]
  2497                              <2> 	bscheckequal:
  2498 00001FB6 668B1D[64230000]    <2> 		mov bx, [modkeyrdpr]
  2499 00001FBD 803D[6B230000]00    <2> 		cmp byte [txtmask], 0
  2500 00001FC4 7407                <2> 		je nomasktxt
  2501 00001FC6 30E4                <2> 		xor ah, ah
  2502 00001FC8 A0[6B230000]        <2> 		mov al, [txtmask]
  2503                              <2> 	nomasktxt:
  2504 00001FCD 56                  <2> 		push esi
  2505 00001FCE 66A3[60230000]      <2> 		mov [axcache], ax
  2506 00001FD4 668B1D[62230000]    <2> 		mov bx, [endkeyrdpr]
  2507 00001FDB 6639D8              <2> 		cmp ax, bx
  2508 00001FDE 7432                <2> 		je nobackprintbuftxt2
  2509 00001FE0 E818040000          <2> 		call prcharint
  2510 00001FE5 BE[88C40300]        <2> 		mov esi, buftxt2
  2511 00001FEA E852FDFFFF          <2> 		call printquiet
  2512 00001FEF 66B82000            <2> 		mov ax, " "
  2513 00001FF3 E81C040000          <2> 		call prcharq
  2514 00001FF8 66B80800            <2> 		mov ax, 8
  2515 00001FFC 81FE[88C40300]      <2> 		cmp esi, buftxt2
  2516 00002002 740E                <2> 		je nobackprintbuftxt2
  2517                              <2> 	backprintbuftxt2:
  2518 00002004 E80B040000          <2> 		call prcharq
  2519 00002009 4E                  <2> 		dec esi
  2520 0000200A 81FE[88C40300]      <2> 		cmp esi, buftxt2
  2521 00002010 77F2                <2> 		ja backprintbuftxt2
  2522                              <2> 	nobackprintbuftxt2:
  2523 00002012 663D0A00            <2> 		cmp ax, 10
  2524 00002016 7405                <2> 		je nonobackprint
  2525 00002018 E8E0030000          <2> 		call prcharint
  2526                              <2> 	nonobackprint:
  2527 0000201D 5E                  <2> 		pop esi
  2528 0000201E 3B35[70230000]      <2> 		cmp esi, [endbufferrdpr]
  2529 00002024 0F8319000000        <2> 		jae near donerdprinc
  2530 0000202A 66A1[60230000]      <2> 		mov ax, [axcache]
  2531 00002030 8A25[62230000]      <2> 		mov ah, [endkeyrdpr]
  2532 00002036 38E0                <2> 		cmp al, ah
  2533 00002038 0F859EFEFFFF        <2> 		jne rdprintb
  2534 0000203E E901000000          <2> 		jmp donerdprint
  2535                              <2> 	donerdprinc:
  2536 00002043 46                  <2> 		inc esi
  2537                              <2> 	donerdprint:
  2538 00002044 4E                  <2> 		dec esi
  2539 00002045 BF[88C40300]        <2> 		mov edi, buftxt2
  2540                              <2> 	copylaterstuff:
  2541 0000204A 8A07                <2> 		mov al, [edi]
  2542 0000204C 3C00                <2> 		cmp al, 0
  2543 0000204E 7409                <2> 		je nocopylaterstuff
  2544 00002050 8806                <2> 		mov [esi], al
  2545 00002052 47                  <2> 		inc edi
  2546 00002053 46                  <2> 		inc esi
  2547 00002054 E9F1FFFFFF          <2> 		jmp copylaterstuff
  2548                              <2> 	nocopylaterstuff:
  2549 00002059 C60600              <2> 		mov byte [esi], 0
  2550 0000205C E80B000000          <2> 		call clearbuftxt2
  2551 00002061 89F1                <2> 		mov ecx, esi
  2552 00002063 8B3D[66230000]      <2> 		mov edi, [firstesirdpr]
  2553 00002069 29F9                <2> 		sub ecx, edi
  2554 0000206B C3                  <2> 		ret
  2555                              <2> 	
  2556                              <2> 	clearbuftxt2:
  2557 0000206C 30C0                <2> 		xor al, al
  2558 0000206E BF[88C40300]        <2> 		mov edi, buftxt2
  2559                              <2> 	clearbuftxt2lp:
  2560 00002073 8807                <2> 		mov [edi], al
  2561 00002075 47                  <2> 		inc edi
  2562 00002076 81FF[88C80300]      <2> 		cmp edi, buftxt
  2563 0000207C 75F5                <2> 		jne clearbuftxt2lp
  2564 0000207E C3                  <2> 		ret
  2565                              <2> 	
  2566                              <2> 	rdprintb2:
  2567 0000207F E897080000          <2> 		call termcopy
  2568 00002084 E953FEFFFF          <2> 		jmp rdprintb
  2569                              <2> 	
  2570                              <2> 	rdprhome:
  2571 00002089 3B35[6C230000]      <2> 		cmp esi, [buftxtloc]
  2572 0000208F 0F84EAFFFFFF        <2> 		je near rdprintb2
  2573 00002095 BF[88C40300]        <2> 		mov edi, buftxt2
  2574 0000209A 8A07                <2> 		mov al, [edi]
  2575 0000209C E88E020000          <2> 		call shiftbuftxt2
  2576 000020A1 E86E030000          <2> 		call prcharq
  2577 000020A6 E9DEFFFFFF          <2> 		jmp rdprhome
  2578                              <2> 		
  2579                              <2> 	rdprend:
  2580 000020AB BF[88C40300]        <2> 		mov edi, buftxt2
  2581 000020B0 8A07                <2> 		mov al, [edi]
  2582 000020B2 3C00                <2> 		cmp al, 0
  2583 000020B4 0F84C5FFFFFF        <2> 		je near rdprintb2
  2584 000020BA 8806                <2> 		mov [esi], al
  2585 000020BC E84C000000          <2> 		call shiftbuftxt2lft
  2586 000020C1 E84E030000          <2> 		call prcharq
  2587 000020C6 E9E0FFFFFF          <2> 		jmp rdprend
  2588                              <2> 	
  2589                              <2> 	rdprleft:
  2590 000020CB 3B35[6C230000]      <2> 		cmp esi, [buftxtloc]
  2591 000020D1 0F8405FEFFFF        <2> 		je near rdprintb
  2592 000020D7 BF[88C40300]        <2> 		mov edi, buftxt2
  2593 000020DC 8A07                <2> 		mov al, [edi]
  2594 000020DE E84C020000          <2> 		call shiftbuftxt2
  2595 000020E3 E815030000          <2> 		call prcharint
  2596 000020E8 E9EFFDFFFF          <2> 		jmp rdprintb
  2597                              <2> 		
  2598                              <2> 	rdprright:
  2599 000020ED BF[88C40300]        <2> 		mov edi, buftxt2
  2600 000020F2 8A07                <2> 		mov al, [edi]
  2601 000020F4 3C00                <2> 		cmp al, 0
  2602 000020F6 0F84E0FDFFFF        <2> 		je near rdprintb
  2603 000020FC 8806                <2> 		mov [esi], al
  2604 000020FE E80A000000          <2> 		call shiftbuftxt2lft
  2605 00002103 E8F5020000          <2> 		call prcharint
  2606 00002108 E9CFFDFFFF          <2> 		jmp rdprintb
  2607                              <2> 		
  2608                              <2> 	shiftbuftxt2lft:
  2609 0000210D 55                  <2> 		push ebp
  2610 0000210E 89FD                <2> 		mov ebp, edi
  2611                              <2> 	.lp:
  2612 00002110 3C00                <2> 		cmp al, 0
  2613 00002112 740B                <2> 		je noshiftbuftxt2lft
  2614 00002114 47                  <2> 		inc edi
  2615 00002115 8A07                <2> 		mov al, [edi]
  2616 00002117 8847FF              <2> 		mov [edi - 1], al
  2617 0000211A E9F1FFFFFF          <2> 		jmp .lp
  2618                              <2> 	noshiftbuftxt2lft:
  2619 0000211F 8A4500              <2> 		mov al, [ebp]
  2620 00002122 5D                  <2> 		pop ebp
  2621 00002123 3CC0                <2> 		cmp al, 0xC0
  2622 00002125 7304                <2> 		jae .nofix
  2623 00002127 3C80                <2> 		cmp al, 0x80
  2624 00002129 73E2                <2> 		jae shiftbuftxt2lft
  2625                              <2> 	.nofix:
  2626 0000212B 8A06                <2> 		mov al, [esi]
  2627 0000212D 30E4                <2> 		xor ah, ah
  2628 0000212F 46                  <2> 		inc esi
  2629 00002130 668B1D[64230000]    <2> 		mov bx, [modkeyrdpr]
  2630 00002137 C3                  <2> 		ret
  2631                              <2> 		
  2632                              <2> 	rdprdownbck:
  2633 00002138 FECC                <2> 		dec ah
  2634 0000213A 8825[6A230000]      <2> 		mov [commandedit], ah
  2635 00002140 E890000000          <2> 		call rdprbckspc
  2636 00002145 E992FDFFFF          <2> 		jmp rdprintb
  2637                              <2> 	
  2638                              <2> 	rdprdown:
  2639 0000214A 8A25[6A230000]      <2> 		mov ah, [commandedit]
  2640 00002150 80FC01              <2> 		cmp ah, 1
  2641 00002153 0F8683FDFFFF        <2> 		jbe near rdprintb
  2642 00002159 8B3D[388E2D00]      <2> 		mov edi, [commandsentered]
  2643 0000215F 3B3D[348E2D00]      <2> 		cmp edi, [commandlistentries]
  2644 00002165 7618                <2> 		jbe .nofix
  2645 00002167 8105[348E2D00]0200- <2> 		add dword [commandlistentries], 2
  2646 0000216F 0000                <2>
  2647 00002171 3B3D[348E2D00]      <2> 		cmp edi, [commandlistentries]
  2648 00002177 7706                <2> 		ja .nofix
  2649 00002179 893D[348E2D00]      <2> 		mov [commandlistentries], edi
  2650                              <2> 	.nofix:
  2651 0000217F 80FC02              <2> 		cmp ah, 2
  2652 00002182 74B4                <2> 		je rdprdownbck
  2653 00002184 80EC02              <2> 		sub ah, 2
  2654 00002187 8825[6A230000]      <2> 		mov [commandedit], ah
  2655                              <2> 		
  2656                              <2> 	rdprup:
  2657 0000218D 3805[6A230000]      <2> 		cmp [commandedit], al
  2658 00002193 0F8443FDFFFF        <2> 		je near rdprintb
  2659 00002199 813D[348E2D00]0000- <2> 		cmp dword [commandlistentries], 0
  2660 000021A1 0000                <2>
  2661 000021A3 0F8433FDFFFF        <2> 		je near rdprintb
  2662 000021A9 FF0D[348E2D00]      <2> 		dec dword [commandlistentries]
  2663                              <2> 	.lp:
  2664 000021AF BF[88C40300]        <2> 		mov edi, buftxt2
  2665 000021B4 8A07                <2> 		mov al, [edi]
  2666 000021B6 3C00                <2> 		cmp al, 0
  2667 000021B8 7411                <2> 		je .start
  2668 000021BA 8806                <2> 		mov [esi], al
  2669 000021BC E84CFFFFFF          <2> 		call shiftbuftxt2lft
  2670 000021C1 E84E020000          <2> 		call prcharq
  2671 000021C6 E9E4FFFFFF          <2> 		jmp .lp
  2672                              <2> 	.start:
  2673 000021CB E805000000          <2> 		call rdprbckspc
  2674 000021D0 E94B000000          <2> 		jmp getcurrentcommandstr
  2675                              <2> 	rdprbckspc:
  2676 000021D5 3B35[6C230000]      <2> 		cmp esi, [buftxtloc]
  2677 000021DB 7435                <2> 		je nordprupbck
  2678                              <2> 	rdprupbckspclp:
  2679 000021DD 66B80800            <2> 		mov ax, 8
  2680 000021E1 668B1D[64230000]    <2> 		mov bx, [modkeyrdpr]
  2681 000021E8 E827020000          <2> 		call prcharq
  2682 000021ED 66B82000            <2> 		mov ax, ' '
  2683 000021F1 E81E020000          <2> 		call prcharq
  2684 000021F6 66B80800            <2> 		mov ax, 8
  2685 000021FA E815020000          <2> 		call prcharq
  2686 000021FF 4E                  <2> 		dec esi
  2687 00002200 3B35[6C230000]      <2> 		cmp esi, [buftxtloc]
  2688 00002206 7405                <2> 		je nordprupbck2
  2689 00002208 E9D0FFFFFF          <2> 		jmp rdprupbckspclp
  2690                              <2> 	nordprupbck2:
  2691 0000220D E809070000          <2> 		call termcopy
  2692                              <2> 	nordprupbck:
  2693 00002212 8B3D[308E2D00]      <2> 		mov edi, [commandbufpos]
  2694 00002218 81C7[3C8E2D00]      <2> 		add edi, commandbuf
  2695 0000221E 4F                  <2> 		dec edi
  2696 0000221F C3                  <2> 		ret
  2697                              <2> 	getcurrentcommandstr:
  2698 00002220 8A25[6A230000]      <2> 		mov ah, [commandedit]
  2699 00002226 FE05[6A230000]      <2> 		inc byte [commandedit]
  2700                              <2> 	getccmdlp:
  2701 0000222C 4F                  <2> 		dec edi
  2702 0000222D 8A07                <2> 		mov al, [edi]
  2703 0000222F 81FF[3C8E2D00]      <2> 		cmp edi, commandbuf
  2704 00002235 7231                <2> 		jb getcmdresetcommandbuf
  2705 00002237 81EF[3C8E2D00]      <2> 		sub edi, commandbuf
  2706 0000223D 3B3D[308E2D00]      <2> 		cmp edi, [commandbufpos]
  2707 00002243 0F8493FCFFFF        <2> 		je near rdprintb
  2708 00002249 81C7[3C8E2D00]      <2> 		add edi, commandbuf
  2709 0000224F 3C00                <2> 		cmp al, 0
  2710 00002251 75D9                <2> 		jne getccmdlp
  2711 00002253 FECC                <2> 		dec ah
  2712 00002255 80FC00              <2> 		cmp ah, 0
  2713 00002258 77D2                <2> 		ja getccmdlp
  2714 0000225A 47                  <2> 		inc edi
  2715 0000225B 81FF[3C9E2D00]      <2> 		cmp edi, commandbufend
  2716 00002261 7710                <2> 		ja fixcmdbufb4morerdpr
  2717 00002263 E918000000          <2> 		jmp morerdprup
  2718                              <2> 	getcmdresetcommandbuf:
  2719 00002268 BF[3C9E2D00]        <2> 		mov edi, commandbufend
  2720 0000226D 47                  <2> 		inc edi
  2721 0000226E E9B9FFFFFF          <2> 		jmp getccmdlp
  2722                              <2> 	fixcmdbufb4morerdpr:
  2723 00002273 4F                  <2> 		dec edi
  2724 00002274 81EF[3C9E2D00]      <2> 		sub edi, commandbufend
  2725 0000227A 81C7[3C8E2D00]      <2> 		add edi, commandbuf
  2726                              <2> 	morerdprup:
  2727 00002280 8A07                <2> 		mov al, [edi]
  2728 00002282 47                  <2> 		inc edi
  2729 00002283 81EF[3C8E2D00]      <2> 		sub edi, commandbuf
  2730 00002289 3C00                <2> 		cmp al, 0
  2731 0000228B 0F84EEFDFFFF        <2> 		je near rdprintb2
  2732 00002291 3B3D[308E2D00]      <2> 		cmp edi, [commandbufpos]
  2733 00002297 0F83E2FDFFFF        <2> 		jae near rdprintb2
  2734 0000229D 81C7[3C8E2D00]      <2> 		add edi, commandbuf
  2735 000022A3 8806                <2> 		mov [esi], al
  2736 000022A5 46                  <2> 		inc esi
  2737 000022A6 57                  <2> 		push edi
  2738 000022A7 668B1D[64230000]    <2> 		mov bx, [modkeyrdpr]
  2739 000022AE 30E4                <2> 		xor ah, ah
  2740 000022B0 E85F010000          <2> 		call prcharq
  2741 000022B5 5F                  <2> 		pop edi
  2742 000022B6 81FF[3C9E2D00]      <2> 		cmp edi, commandbufend
  2743 000022BC 76C2                <2> 		jbe morerdprup
  2744 000022BE BF[3C8E2D00]        <2> 		mov edi, commandbuf
  2745 000022C3 E9B8FFFFFF          <2> 		jmp morerdprup
  2746                              <2> 
  2747                              <2> 	rdprdel:
  2748 000022C8 BF[88C40300]        <2> 		mov edi, buftxt2
  2749 000022CD 8A07                <2> 		mov al, [edi]
  2750 000022CF 3C00                <2> 		cmp al, 0
  2751 000022D1 0F8405FCFFFF        <2> 		je near rdprintb
  2752 000022D7 8806                <2> 		mov [esi], al
  2753 000022D9 3C80                <2> 		cmp al, 0x80
  2754 000022DB 7216                <2> 		jb .fn
  2755                              <2> 	.lp:
  2756 000022DD 46                  <2> 		inc esi
  2757 000022DE 47                  <2> 		inc edi
  2758 000022DF 8A07                <2> 		mov al, [edi]
  2759 000022E1 3C00                <2> 		cmp al, 0
  2760 000022E3 0F84F3FBFFFF        <2> 		je near rdprintb
  2761 000022E9 8806                <2> 		mov [esi], al
  2762 000022EB 3C80                <2> 		cmp al, 0x80
  2763 000022ED 7204                <2> 		jb .fn
  2764 000022EF 3CC0                <2> 		cmp al, 0xC0
  2765 000022F1 72EA                <2> 		jb .lp
  2766                              <2> 	.fn:
  2767 000022F3 E815FEFFFF          <2> 		call shiftbuftxt2lft
  2768 000022F8 E817010000          <2> 		call prcharq
  2769                              <2> 		
  2770                              <2> 	rdprbscheck:
  2771 000022FD 3B35[66230000]      <2> 		cmp esi, [firstesirdpr]
  2772 00002303 0F86D3FBFFFF        <2> 		jbe near rdprintb
  2773                              <2> 	goodbscheck:
  2774 00002309 4E                  <2> 		dec esi
  2775 0000230A 8A46FF              <2> 		mov al, [esi - 1]
  2776 0000230D C60600              <2> 		mov byte [esi], 0
  2777 00002310 3CC0                <2> 		cmp al, 0xC0
  2778 00002312 7309                <2> 		jae .onemore
  2779 00002314 3C80                <2> 		cmp al, 0x80
  2780 00002316 73F1                <2> 		jae goodbscheck
  2781 00002318 E904000000          <2> 		jmp .nomore
  2782                              <2> 	.onemore:
  2783 0000231D 4E                  <2> 		dec esi
  2784 0000231E C60600              <2> 		mov byte [esi], 0		
  2785                              <2> 	.nomore:
  2786 00002321 668B1D[64230000]    <2> 		mov bx, [modkeyrdpr]
  2787 00002328 B008                <2> 		mov al, 8
  2788 0000232A E987FCFFFF          <2> 		jmp bscheckequal
  2789                              <2> 		
  2790                              <2> 	shiftbuftxt2:
  2791 0000232F 55                  <2> 		push ebp
  2792 00002330 89FD                <2> 		mov ebp, edi
  2793                              <2> 	.lp:
  2794 00002332 3C00                <2> 		cmp al, 0
  2795 00002334 740C                <2> 		je noshiftbuftxt2
  2796 00002336 47                  <2> 		inc edi
  2797 00002337 8A27                <2> 		mov ah, [edi]
  2798 00002339 8807                <2> 		mov [edi], al
  2799 0000233B 88E0                <2> 		mov al, ah
  2800 0000233D E9F0FFFFFF          <2> 		jmp .lp
  2801                              <2> 	noshiftbuftxt2:
  2802 00002342 8A4500              <2> 		mov al, [ebp]
  2803 00002345 5D                  <2> 		pop ebp
  2804 00002346 3CC0                <2> 		cmp al, 0xC0
  2805 00002348 7304                <2> 		jae .nofix
  2806 0000234A 3C80                <2> 		cmp al, 0x80
  2807 0000234C 73E1                <2> 		jae shiftbuftxt2
  2808                              <2> 	.nofix:
  2809 0000234E BF[88C40300]        <2> 		mov edi, buftxt2
  2810 00002353 4E                  <2> 		dec esi
  2811 00002354 8A06                <2> 		mov al, [esi]
  2812 00002356 8807                <2> 		mov [edi], al
  2813 00002358 C60600              <2> 		mov byte [esi], 0
  2814 0000235B 66B80800            <2> 		mov ax, 8
  2815 0000235F C3                  <2> 		ret
  2816                              <2> 		
  2817 00002360 0000                <2> axcache dw 0
  2818 00002362 0000                <2> endkeyrdpr dw 0
  2819 00002364 0000                <2> modkeyrdpr dw 0
  2820 00002366 00000000            <2> firstesirdpr dd 0
  2821 0000236A 00                  <2> commandedit db 0
  2822 0000236B 00                  <2> txtmask db 0
  2823 0000236C 00000000            <2> buftxtloc dd 0
  2824 00002370 00000000            <2> endbufferrdpr dd 0
  2825 00002374 082000              <2> backcursor db 8," ",0
  2826                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2827                              <2> readchar:
  2828 00002377 E807000000          <2> 	call rdcharint
  2829 0000237C E931DFFFFF          <2> 	jmp timerinterrupt
  2830                              <2> getchar:
  2831 00002381 30C0                <2> 	xor al, al
  2832                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2833 00002383 66C705[E5230000]01- <2> 		mov word [trans], 1
  2834 0000238B 00                  <2>
  2835 0000238C 3C00                <2> 		cmp al, 0
  2836 0000238E 7509                <2> 		jne transcheck
  2837 00002390 66C705[E5230000]00- <2> 		mov word [trans], 0
  2838 00002398 00                  <2>
  2839                              <2> 	transcheck:
  2840                              <2> 	%ifdef io.serial
  2841                              <2> 		call serial.receive
  2842                              <2> 		xor ah, ah
  2843                              <2> 		cmp al, 13
  2844                              <2> 		je rdenter
  2845                              <2> 	%else
  2846 00002399 E8A83B0000          <2> 		call getkey
  2847 0000239E 66A1[E3230000]      <2> 		mov ax, [lastkey + 2]
  2848 000023A4 663D1C00            <2> 		cmp ax, 0x1C
  2849 000023A8 7425                <2> 		je rdenter
  2850                              <2> 	%endif
  2851 000023AA 66A1[E1230000]      <2> 		mov ax, [lastkey]
  2852 000023B0 668B1D[E5230000]    <2> 		mov bx, [trans]
  2853 000023B7 803D[225F0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2854 000023BE 7500                <2> 		jne nospecialtrans
  2855                              <2> 	nospecialtrans:
  2856 000023C0 6609C3              <2> 		or bx, ax
  2857 000023C3 6681FB0000          <2> 		cmp bx, 0
  2858 000023C8 74CF                <2> 		je transcheck
  2859 000023CA E90C000000          <2> 		jmp rdend
  2860                              <2> 	rdenter:
  2861 000023CF C1E010              <2> 		shl eax, 16
  2862 000023D2 66B80A00            <2> 		mov ax, 10
  2863 000023D6 A3[E1230000]        <2> 		mov [lastkey], eax
  2864                              <2> 	rdend:
  2865 000023DB A1[E1230000]        <2> 		mov eax, [lastkey]
  2866 000023E0 C3                  <2> 		ret
  2867                              <2> 		
  2868 000023E1 00000000            <2> lastkey dd 0
  2869 000023E5 0000                <2> trans dw 0
  2870                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2871                              <2> prntchar:
  2872 000023E7 30E4                <2> 	xor ah, ah ;this kills unicode from the outside unfortunately
  2873                              <2> %ifdef io.serial
  2874                              <2> 	call prcharint
  2875                              <2> 	jmp timerinterrupt
  2876                              <2> prcharint:	
  2877                              <2> prcharq:
  2878                              <2> 	call serial.send
  2879                              <2> 	ret
  2880                              <2> %else
  2881 000023E9 38FB                <2> cmp bl, bh
  2882 000023EB 740A                <2> je prchar.notimer
  2883 000023ED E80B000000          <2> call prcharint
  2884 000023F2 E9BBDEFFFF          <2> jmp timerinterrupt
  2885                              <2> prchar.notimer:
  2886 000023F7 E818000000          <2> 	call prcharq
  2887 000023FC CF                  <2> 	iret
  2888                              <2> 	
  2889                              <2> prcharint:	;print char, char in ax, modifier in bx, if ecx is eax then termcopy will not happen, will run termcopy if called as is
  2890 000023FD 663DFFFE            <2> 	cmp ax, 0xFEFF
  2891 00002401 740E                <2> 	je .ret
  2892 00002403 39C1                <2> 	cmp ecx, eax
  2893 00002405 740D                <2> 	je prcharq
  2894 00002407 E808000000          <2> 	call prcharq
  2895 0000240C E80A050000          <2> 	call termcopy
  2896                              <2> .ret:
  2897 00002411 C3                  <2> 	ret
  2898 00002412 00                  <2> termguion db 0
  2899 00002413 00                  <2> termcopyon db 0
  2900                              <2> prcharq:
  2901 00002414 C1E310              <2> 	shl ebx, 16
  2902 00002417 6689C3              <2> 	mov bx, ax
  2903 0000241A 89D8                <2> 	mov eax, ebx
  2904 0000241C A3[0B260000]        <2> 	mov [charbuf], eax
  2905 00002421 8B1D[03260000]      <2> 	mov ebx, [videobufpos]
  2906 00002427 BF[9CE32B00]        <2> 	mov edi, videobuf
  2907 0000242C 01DF                <2> 	add edi, ebx
  2908 0000242E A1[28290000]        <2> 	mov eax, [removedvideo]
  2909 00002433 8907                <2> 	mov [edi], eax
  2910 00002435 A1[0B260000]        <2> 	mov eax, [charbuf]
  2911 0000243A 31D2                <2> 	xor edx, edx
  2912 0000243C 668B15[07260000]    <2> 	mov dx, [charpos]
  2913 00002443 31C9                <2> 	xor ecx, ecx
  2914 00002445 668B0D[09260000]    <2> 	mov cx, [charxy]
  2915 0000244C 663D0900            <2> 	cmp ax, 9
  2916 00002450 0F8472000000        <2> 	je near prtab
  2917 00002456 663D0D00            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2918 0000245A 0F8498000000        <2> 	je near prcr
  2919 00002460 663D0A00            <2> 	cmp ax, 10
  2920 00002464 0F84E7000000        <2> 	je near prnlcr
  2921 0000246A 663D0800            <2> 	cmp ax, 8
  2922 0000246E 0F8498000000        <2> 	je near prbs
  2923 00002474 663D0030            <2> 	cmp ax, (fontend - fonts)/16
  2924 00002478 0F8341000000        <2> 	jae near prnofont
  2925                              <2> donepr:
  2926 0000247E 8907                <2> 	mov [edi], eax
  2927 00002480 81C704000000        <2> 	add edi, 4
  2928 00002486 FEC2                <2> 	inc dl
  2929                              <2> donecrnl:
  2930 00002488 38CA                <2> 	cmp dl, cl
  2931 0000248A 0F83E5000000        <2> 	jae near preol
  2932                              <2> doneeol:
  2933 00002490 38EE                <2> 	cmp dh, ch
  2934 00002492 0F83FA000000        <2> 	jae near prscr	
  2935                              <2> donescr:
  2936 00002498 89FB                <2> 	mov ebx, edi
  2937 0000249A 8B07                <2> 	mov eax, [edi]
  2938 0000249C A3[28290000]        <2> 	mov [removedvideo], eax
  2939 000024A1 81EB[9CE32B00]      <2> 	sub ebx, videobuf
  2940 000024A7 891D[03260000]      <2> 	mov [videobufpos], ebx
  2941 000024AD 668915[07260000]    <2> 	mov [charpos], dx
  2942 000024B4 A1[0B260000]        <2> 	mov eax, [charbuf]
  2943 000024B9 89C3                <2> 	mov ebx, eax
  2944 000024BB C1EB10              <2> 	shr ebx, 16
  2945 000024BE C3                  <2> 	ret
  2946                              <2> 	
  2947                              <2> 	prnofont:
  2948 000024BF 66B80200            <2> 		mov ax, 2
  2949 000024C3 E9B6FFFFFF          <2> 		jmp donepr
  2950                              <2> 	prtab:
  2951 000024C8 8B1D[FF250000]      <2> 		mov ebx, [linebeginpos]
  2952 000024CE 81EF[9CE32B00]      <2> 		sub edi, videobuf
  2953 000024D4 29DF                <2> 		sub edi, ebx
  2954 000024D6 C1EF05              <2> 		shr edi, 5
  2955 000024D9 C1E705              <2> 		shl edi, 5
  2956 000024DC 81C720000000        <2> 		add edi, 32
  2957 000024E2 C0EA03              <2> 		shr dl, 3
  2958 000024E5 C0E203              <2> 		shl dl, 3
  2959 000024E8 80C208              <2> 		add dl, 8
  2960 000024EB 81C7[9CE32B00]      <2> 		add edi, videobuf
  2961 000024F1 01DF                <2> 		add edi, ebx
  2962 000024F3 E990FFFFFF          <2> 		jmp donecrnl
  2963                              <2> 	
  2964                              <2> 	prcr:
  2965 000024F8 30D2                <2> 		xor dl, dl
  2966 000024FA BF[9CE32B00]        <2> 		mov edi, videobuf
  2967 000024FF 8B1D[FF250000]      <2> 		mov ebx, [linebeginpos]
  2968 00002505 01DF                <2> 		add edi, ebx
  2969 00002507 E97CFFFFFF          <2> 		jmp donecrnl
  2970                              <2> 			
  2971                              <2> 	prbs:
  2972 0000250C 8B1D[FF250000]      <2> 		mov ebx, [linebeginpos]
  2973 00002512 80FA00              <2> 		cmp dl, 0
  2974 00002515 7415                <2> 		je prbackline
  2975                              <2> 	prnobmr:
  2976 00002517 891D[FF250000]      <2> 		mov [linebeginpos], ebx
  2977 0000251D FECA                <2> 		dec dl
  2978 0000251F 31C0                <2> 		xor eax, eax
  2979 00002521 81EF04000000        <2> 		sub edi, 4
  2980 00002527 E95CFFFFFF          <2> 		jmp donecrnl
  2981                              <2> 	prbackline:
  2982 0000252C 6631DB              <2> 		xor bx, bx
  2983 0000252F 88CA                <2> 		mov dl, cl
  2984 00002531 80FE00              <2> 		cmp dh, 0
  2985 00002534 74E1                <2> 		je prnobmr
  2986 00002536 8B1D[FF250000]      <2> 		mov ebx, [linebeginpos]
  2987 0000253C 6651                <2> 		push cx
  2988 0000253E 31C9                <2> 		xor ecx, ecx
  2989 00002540 8A0C24              <2> 		mov cl, [esp]
  2990 00002543 C1E102              <2> 		shl ecx, 2
  2991 00002546 29CB                <2> 		sub ebx, ecx
  2992 00002548 6659                <2> 		pop cx
  2993 0000254A FECE                <2> 		dec dh
  2994 0000254C E9C6FFFFFF          <2> 		jmp prnobmr
  2995                              <2> 		
  2996                              <2> 	prnlcr:
  2997 00002551 FEC6                <2> 		inc dh
  2998 00002553 31DB                <2> 		xor ebx, ebx
  2999 00002555 30D2                <2> 		xor dl, dl
  3000 00002557 88CB                <2> 		mov bl, cl
  3001 00002559 66C1E302            <2> 		shl bx, 2
  3002 0000255D BF[9CE32B00]        <2> 		mov edi, videobuf
  3003 00002562 031D[FF250000]      <2> 		add ebx, [linebeginpos]
  3004 00002568 891D[FF250000]      <2> 		mov [linebeginpos], ebx
  3005 0000256E 01DF                <2> 		add edi, ebx
  3006 00002570 E913FFFFFF          <2> 		jmp donecrnl
  3007                              <2> 		
  3008                              <2> 	preol:
  3009 00002575 30D2                <2> 		xor dl, dl
  3010 00002577 FEC6                <2> 		inc dh
  3011 00002579 31DB                <2> 		xor ebx, ebx
  3012 0000257B 88CB                <2> 		mov bl, cl
  3013 0000257D 66C1E302            <2> 		shl bx, 2
  3014 00002581 031D[FF250000]      <2> 		add ebx, [linebeginpos]
  3015 00002587 891D[FF250000]      <2> 		mov [linebeginpos], ebx
  3016 0000258D E9FEFEFFFF          <2> 		jmp doneeol
  3017                              <2> 	prscr:
  3018 00002592 FECE                <2> 		dec dh
  3019 00002594 BF[9CE32B00]        <2> 		mov edi, videobuf
  3020 00002599 31DB                <2> 		xor ebx, ebx
  3021 0000259B 88CB                <2> 		mov bl, cl
  3022 0000259D 66C1E302            <2> 		shl bx, 2
  3023 000025A1 01FB                <2> 		add ebx, edi
  3024                              <2> 	intscrollloop:
  3025 000025A3 8B03                <2> 		mov eax, [ebx]
  3026 000025A5 8907                <2> 		mov [edi], eax
  3027 000025A7 81C704000000        <2> 		add edi, 4
  3028 000025AD 81C304000000        <2> 		add ebx, 4
  3029 000025B3 FEC9                <2> 		dec cl
  3030 000025B5 80F900              <2> 		cmp cl, 0
  3031 000025B8 75E9                <2> 		jne intscrollloop
  3032 000025BA 8A0D[09260000]      <2> 		mov cl, [charxy]
  3033 000025C0 FECD                <2> 		dec ch
  3034 000025C2 80FD01              <2> 		cmp ch, 1
  3035 000025C5 77DC                <2> 		ja intscrollloop
  3036 000025C7 31C0                <2> 		xor eax, eax
  3037 000025C9 81EF[9CE32B00]      <2> 		sub edi, videobuf
  3038 000025CF 893D[FF250000]      <2> 		mov [linebeginpos], edi
  3039 000025D5 81C7[9CE32B00]      <2> 		add edi, videobuf
  3040 000025DB 89FB                <2> 		mov ebx, edi
  3041                              <2> 	intloopclear:
  3042 000025DD 8903                <2> 		mov [ebx], eax
  3043 000025DF 81C304000000        <2> 		add ebx, 4
  3044 000025E5 FEC9                <2> 		dec cl
  3045 000025E7 80F900              <2> 		cmp cl, 0
  3046 000025EA 75F1                <2> 		jne intloopclear
  3047 000025EC FECD                <2> 		dec ch
  3048 000025EE 80FD00              <2> 		cmp ch, 0
  3049 000025F1 75EA                <2> 		jne intloopclear
  3050 000025F3 668B0D[09260000]    <2> 		mov cx, [charxy]
  3051 000025FA E999FEFFFF          <2> 		jmp donescr
  3052                              <2> 		
  3053 000025FF 00000000            <2> linebeginpos dd 0
  3054 00002603 00000000            <2> videobufpos: dd 0
  3055 00002607 0000                <2> charpos db 0,0
  3056 00002609 501E                <2> charxy db 80,30
  3057 0000260B 00000000            <2> charbuf dd 0
  3058                              <2> %endif
  3059                              <1> 	%include 'source/interrupts/7_openfile.asm'
  3060                              <2> openfile:
  3061 0000260F E8DF420000          <2> 	call loadfile
  3062 00002614 E999DCFFFF          <2> 	jmp timerinterrupt
  3063                              <1> 	%include 'source/interrupts/9_num2str.asm'
  3064                              <2> num2str:
  3065 00002619 3C00                <2> 	cmp al, 0
  3066 0000261B 750A                <2> 	jne num2strb
  3067 0000261D E8250D0000          <2> 	call showdec
  3068 00002622 E98BDCFFFF          <2> 	jmp timerinterrupt
  3069                              <2> num2strb:
  3070 00002627 E8600C0000          <2> 	call showhex
  3071 0000262C E981DCFFFF          <2> 	jmp timerinterrupt
  3072                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3073                              <2> str2num:
  3074 00002631 89F7                <2> 	mov edi, esi
  3075 00002633 E8ED0D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3076 00002638 E975DCFFFF          <2> 	jmp timerinterrupt
  3077                              <2> 	
  3078                              <1> %ifdef threads.included
  3079                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3080                              <2> forkthread:
  3081                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  3082                              <2> 			;returns the PID of the new fork in ebx
  3083                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  3084 0000263D FA                  <2> 	cli
  3085 0000263E 60                  <2> 	pushad
  3086 0000263F 8925[0C270000]      <2> 	mov [.espold], esp
  3087 00002645 C605[B66A0000]01    <2> 	mov byte [threadson], 1
  3088 0000264C 8B1D[B76A0000]      <2> 	mov ebx, [currentthread]
  3089 00002652 C1E302              <2> 	shl ebx, 2
  3090 00002655 89A3[3C9E2D00]      <2> 	mov [threadlist + ebx], esp
  3091 0000265B C1EB02              <2> 	shr ebx, 2
  3092 0000265E 81FB00000000        <2> 	cmp ebx, 0
  3093 00002664 750C                <2> 	jne .simplestack
  3094 00002666 BB[00AE0300]        <2> 	mov ebx, stackend
  3095 0000266B 29E3                <2> 	sub ebx, esp
  3096 0000266D E90B000000          <2> 	jmp .stackcalcdone
  3097                              <2> .simplestack:
  3098 00002672 C1E30A              <2> 	shl ebx, 10
  3099 00002675 81C3[3CB62D00]      <2> 	add ebx, stack1
  3100 0000267B 29E3                <2> 	sub ebx, esp
  3101                              <2> .stackcalcdone:
  3102 0000267D 29DC                <2> 	sub esp, ebx
  3103 0000267F 81C4[3CB62D00]      <2> 	add esp, stack1
  3104 00002685 8B1D[B26A0000]      <2> 	mov ebx, [lastthread]
  3105 0000268B C1E308              <2> 	shl ebx, 8
  3106 0000268E 01DC                <2> 	add esp, ebx
  3107 00002690 891D[10270000]      <2> 	mov [.stackend], ebx
  3108                              <2> 
  3109 00002696 89E5                <2> 	mov ebp, esp
  3110 00002698 8B25[0C270000]      <2> 	mov esp, [.espold]
  3111                              <2> 
  3112 0000269E C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3113 000026A1 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3114                              <2> 
  3115 000026A5 31DB                <2> 	xor ebx, ebx
  3116                              <2> .stackcopy:
  3117 000026A7 668B041C            <2> 	mov ax, [esp + ebx]
  3118 000026AB 6689441D00          <2> 	mov [ebp + ebx], ax
  3119 000026B0 81C302000000        <2> 	add ebx, 2
  3120 000026B6 3B1D[10270000]      <2> 	cmp ebx, [.stackend]
  3121 000026BC 72E9                <2> 	jb .stackcopy
  3122                              <2> 
  3123 000026BE 31C0                <2> 	xor eax, eax
  3124 000026C0 668CC8              <2> 	mov ax, cs
  3125 000026C3 89C2                <2> 	mov edx, eax
  3126 000026C5 8B4C2428            <2> 	mov ecx, [esp + 40]
  3127 000026C9 81C900020000        <2> 	or ecx, 0x200
  3128                              <2> 	
  3129 000026CF 81FE00000000        <2> 	cmp esi, 0
  3130 000026D5 7504                <2> 	jne .nochangestack
  3131 000026D7 8B742420            <2> 	mov esi, [esp + 32]
  3132                              <2> .nochangestack:
  3133 000026DB 89F0                <2> 	mov eax, esi
  3134 000026DD 89EC                <2> 	mov esp, ebp
  3135                              <2> 
  3136 000026DF 89442420            <2> 	mov [esp + 32], eax
  3137 000026E3 89542424            <2> 	mov [esp + 36], edx
  3138 000026E7 894C2428            <2> 	mov [esp + 40], ecx
  3139                              <2> 
  3140 000026EB 8B1D[B26A0000]      <2> 	mov ebx, [lastthread]
  3141 000026F1 89A3[3C9E2D00]      <2> 	mov [threadlist + ebx], esp
  3142 000026F7 81C304000000        <2> 	add ebx, 4
  3143 000026FD 891D[B26A0000]      <2> 	mov [lastthread], ebx
  3144 00002703 8B25[0C270000]      <2> 	mov esp, [.espold]
  3145 00002709 61                  <2> 	popad
  3146 0000270A FB                  <2> 	sti
  3147 0000270B CF                  <2> 	iret
  3148                              <2> 
  3149 0000270C 00000000            <2> .espold dd 0
  3150 00002710 00000000            <2> .stackend dd 0
  3151                              <1> %endif
  3152                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3153                              <2> gettime:
  3154 00002714 A1[6B020000]        <2> 	mov eax, [timeseconds]
  3155 00002719 8B1D[6F020000]      <2> 	mov ebx, [timenanoseconds]
  3156 0000271F 89D9                <2> 	mov ecx, ebx
  3157 00002721 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3158 00002724 E989DBFFFF          <2> 	jmp timerinterrupt
  3159                              <1> 	%include 'source/interrupts/13_settime.asm'
  3160                              <2> settime:
  3161 00002729 A3[6B020000]        <2> 	mov [timeseconds], eax
  3162 0000272E 891D[6F020000]      <2> 	mov [timenanoseconds], ebx
  3163 00002734 E979DBFFFF          <2> 	jmp timerinterrupt
  3164                              <2> 	
  3165                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3166                              <2> runcmd:
  3167 00002739 BF[88C80300]        <2> 	mov edi, buftxt
  3168                              <2> cpcmd:
  3169 0000273E 8A06                <2> 	mov al, [esi]
  3170 00002740 8807                <2> 	mov [edi], al
  3171 00002742 46                  <2> 	inc esi
  3172 00002743 47                  <2> 	inc edi
  3173 00002744 3C00                <2> 	cmp al, 0
  3174 00002746 75F6                <2> 	jne cpcmd
  3175 00002748 E81A080000          <2> 	call run
  3176 0000274D CF                  <2> 	iret
  3177                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3178                              <2> proginfo:
  3179                              <2> 	;mov ebx, variables
  3180 0000274E 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  3181 00002754 89F7                <2> 	mov edi, esi
  3182 00002756 31C9                <2> 	xor ecx, ecx
  3183                              <2> getcommandzeroes:
  3184 00002758 8A07                <2> 	mov al, [edi]
  3185 0000275A 47                  <2> 	inc edi
  3186 0000275B 3C3B                <2> 	cmp al, ';'
  3187 0000275D 740E                <2> 	je nomorezeroes
  3188 0000275F 3C00                <2> 	cmp al, 0
  3189 00002761 740A                <2> 	je nomorezeroes
  3190 00002763 3C20                <2> 	cmp al, ' '
  3191 00002765 75F1                <2> 	jne getcommandzeroes
  3192 00002767 41                  <2> 	inc ecx
  3193 00002768 E9EBFFFFFF          <2> 	jmp getcommandzeroes
  3194                              <2> nomorezeroes:
  3195 0000276D 41                  <2> 	inc ecx
  3196 0000276E 4F                  <2> 	dec edi
  3197 0000276F 8B1D[14B40300]      <2> 	mov ebx, [uid]
  3198 00002775 8B15[B76A0000]      <2> 	mov edx, [currentthread]
  3199 0000277B CF                  <2> 	iret
  3200                              <2> 	
  3201                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3202                              <2> hooksig: ;hook code in ESI to signal in AL
  3203 0000277C 3C00                <2> 	cmp al, 0
  3204 0000277E 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3205                              <2> ;	xor ebx, ebx
  3206                              <2> ;	mov bl, al
  3207                              <2> ;	shl bl, 2
  3208 00002780 BF[04AE0300]        <2> 	mov edi, sigtable
  3209 00002785 8937                <2> 	mov [edi], esi
  3210                              <2> .quit:
  3211 00002787 E926DBFFFF          <2> 	jmp timerinterrupt
  3212                              <1> %ifdef gui.included
  3213                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3214                              <2> guiint:
  3215 0000278C 3CFD                <2> 	cmp al, 253
  3216 0000278E 0F8491000000        <2> 	je near .getinfo
  3217 00002794 803D[018A0000]01    <2> 	cmp byte [guion], 1
  3218 0000279B 0F8550000000        <2> 	jne near .nogui
  3219 000027A1 3C00                <2> 	cmp al, 0
  3220 000027A3 0F844D000000        <2> 	je near .clear
  3221 000027A9 3C01                <2> 	cmp al, 1
  3222 000027AB 0F84E4000000        <2> 	je near .putpixel
  3223 000027B1 3C02                <2> 	cmp al, 2
  3224 000027B3 0F84E9000000        <2> 	je near .drawtext
  3225 000027B9 3C03                <2> 	cmp al, 3
  3226 000027BB 0F84FC000000        <2> 	je near .drawline
  3227 000027C1 3C04                <2> 	cmp al, 4
  3228 000027C3 0F8407010000        <2> 	je near .drawcircle
  3229 000027C9 3C05                <2> 	cmp al, 5
  3230 000027CB 0F840F010000        <2> 	je near .fillcircle
  3231 000027D1 3C06                <2> 	cmp al, 6
  3232 000027D3 0F8417010000        <2> 	je near .drawsquare
  3233 000027D9 3C07                <2> 	cmp al, 7
  3234 000027DB 0F8422010000        <2> 	je near .fillsquare
  3235 000027E1 3CFE                <2> 	cmp al, 254
  3236 000027E3 0F8464000000        <2> 	je near .setinfo
  3237 000027E9 3CFF                <2> 	cmp al, 255
  3238 000027EB 0F8461000000        <2> 	je near .reset
  3239                              <2> .nogui:
  3240 000027F1 E9BCDAFFFF          <2> 	jmp timerinterrupt
  3241                              <2> 
  3242                              <2> .clear:		;color in bx
  3243 000027F6 66891D[26720000]    <2> 	mov [background], bx
  3244                              <2> %ifdef gui.background
  3245 000027FD 8B1D[F8710000]      <2> 	mov ebx, [backgroundimage]
  3246 00002803 81FB00000000        <2> 	cmp ebx, 0
  3247 00002809 7410                <2> 	je .clearit
  3248 0000280B C705[F8710000]0000- <2> 	mov dword [backgroundimage], 0
  3249 00002813 0000                <2>
  3250 00002815 891D[91280000]      <2> 	mov [.bgi], ebx
  3251                              <2> .clearit:
  3252                              <2> %endif
  3253 0000281B E877490000          <2> 	call guiclear
  3254 00002820 E98DDAFFFF          <2> 	jmp timerinterrupt
  3255                              <2> 	
  3256                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3257 00002825 31DB                <2> 	xor ebx, ebx
  3258 00002827 31C9                <2> 	xor ecx, ecx
  3259 00002829 31D2                <2> 	xor edx, edx
  3260 0000282B 381D[018A0000]      <2> 	cmp [guion], bl
  3261 00002831 74BE                <2> 	je .nogui
  3262 00002833 668B1D[26720000]    <2> 	mov bx, [background]
  3263 0000283A 668B15[37580000]    <2> 	mov dx, [resolutionx]
  3264 00002841 668B0D[39580000]    <2> 	mov cx, [resolutiony]
  3265 00002848 E965DAFFFF          <2> 	jmp timerinterrupt
  3266                              <2> 	
  3267                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3268 0000284D E960DAFFFF          <2> 	jmp timerinterrupt
  3269                              <2> .reset:		;resets the screen to the original settings
  3270 00002852 66BBCF7B            <2> 	mov bx, background.original
  3271 00002856 66891D[26720000]    <2> 	mov [background], bx
  3272 0000285D 66BBFFFF            <2> 	mov bx, 0xFFFF
  3273 00002861 66891D[08790000]    <2> 	mov [colorfont2], bx
  3274                              <2> %ifdef gui.background
  3275 00002868 8B1D[F8710000]      <2> 	mov ebx, [backgroundimage]
  3276 0000286E 81FB00000000        <2> 	cmp ebx, 0
  3277 00002874 750C                <2> 	jne .resetit
  3278 00002876 8B1D[91280000]      <2> 	mov ebx, [.bgi]
  3279 0000287C 891D[F8710000]      <2> 	mov [backgroundimage], ebx
  3280                              <2> .resetit:
  3281                              <2> %endif
  3282 00002882 E810490000          <2> 	call guiclear
  3283 00002887 E89E490000          <2> 	call reloadallgraphics
  3284 0000288C E921DAFFFF          <2> 	jmp timerinterrupt
  3285                              <2> 
  3286                              <2> %ifdef gui.background
  3287 00002891 00000000            <2> 	.bgi dd 0
  3288                              <2> %endif
  3289                              <2> 	
  3290                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3291 00002895 6689DE              <2> 	mov si, bx
  3292 00002898 E894600000          <2> 	call putpixel
  3293 0000289D E910DAFFFF          <2> 	jmp timerinterrupt
  3294                              <2> 
  3295                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3296 000028A2 66D1E2              <2> 	shl dx, 1
  3297 000028A5 66891D[08790000]    <2> 	mov [colorfont2], bx
  3298 000028AC 66893D[26720000]    <2> 	mov [background], di
  3299 000028B3 E8DD4F0000          <2> 	call showstring2
  3300 000028B8 E9F5D9FFFF          <2> 	jmp timerinterrupt
  3301                              <2> 
  3302                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3303 000028BD 6689F0              <2> 	mov ax, si
  3304 000028C0 6689DE              <2> 	mov si, bx
  3305 000028C3 6689FB              <2> 	mov bx, di
  3306 000028C6 E8A0470000          <2> 	call drawline
  3307 000028CB E9E2D9FFFF          <2> 	jmp timerinterrupt
  3308                              <2> 
  3309                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3310 000028D0 6689F0              <2> 	mov ax, si
  3311 000028D3 6689DE              <2> 	mov si, bx
  3312 000028D6 E8D5420000          <2> 	call drawcircle
  3313 000028DB E9D2D9FFFF          <2> 	jmp timerinterrupt
  3314                              <2> 
  3315                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3316 000028E0 6689F0              <2> 	mov ax, si
  3317 000028E3 6689DE              <2> 	mov si, bx
  3318 000028E6 E8D7430000          <2> 	call fillcircle
  3319 000028EB E9C2D9FFFF          <2> 	jmp timerinterrupt
  3320                              <2> 	
  3321                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3322 000028F0 6689F0              <2> 	mov ax, si
  3323 000028F3 6689DE              <2> 	mov si, bx
  3324 000028F6 6689FB              <2> 	mov bx, di
  3325 000028F9 E80B4A0000          <2> 	call drawsquare
  3326 000028FE E9AFD9FFFF          <2> 	jmp timerinterrupt
  3327                              <2> 
  3328                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3329 00002903 6689F0              <2> 	mov ax, si
  3330 00002906 6689DE              <2> 	mov si, bx
  3331 00002909 6689FB              <2> 	mov bx, di
  3332 0000290C E8704A0000          <2> 	call fillsquare
  3333 00002911 E99CD9FFFF          <2> 	jmp timerinterrupt
  3334                              <1> %endif
  3335                              <1> %ifdef sound.included
  3336                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3337                              <2> soundint:
  3338 00002916 E997D9FFFF          <2> 	jmp timerinterrupt
  3339                              <1> %endif
  3340                              <1> %ifdef network.included
  3341                              <1> 	%include 'source/interrupts/19_netint.asm'
  3342                              <1> %endif
  3343                              <1> 
  3344                              <1> termcopy:
  3345                              <1> %ifdef io.serial
  3346                              <1> 	ret
  3347                              <1> %else
  3348                              <1> %ifdef terminal.vsync
  3349 0000291B C605[23290000]01    <1> 	mov byte [termcopyneeded], 1
  3350 00002922 C3                  <1> 	ret
  3351                              <1> %else
  3352                              <1> 	call newtermcopy
  3353                              <1> 	ret
  3354                              <1> %endif
  3355 00002923 00                  <1> 	termcopyneeded db 0
  3356 00002924 00000000            <1> 	termcursorpos dd 0
  3357 00002928 00000000            <1> 	removedvideo dd 0
  3358                              <1> newtermcopy:
  3359 0000292C 60                  <1> 	pusha
  3360 0000292D BF[9CE32B00]        <1> 	mov edi, videobuf
  3361 00002932 31DB                <1> 	xor ebx, ebx
  3362 00002934 881D[23290000]      <1> 	mov [termcopyneeded], bl
  3363 0000293A 8B1D[03260000]      <1> 	mov ebx, [videobufpos]
  3364 00002940 01DF                <1> 	add edi, ebx
  3365 00002942 893D[24290000]      <1> 	mov [termcursorpos], edi
  3366 00002948 E8E2000000          <1> 	call switchtermcursor
  3367 0000294D 803D[018A0000]00    <1> 	cmp byte [guion], 0
  3368 00002954 0F8420000000        <1> 	je near nowincopy
  3369                              <1> %ifdef gui.included
  3370 0000295A C605[17810000]00    <1> 	mov byte [mouseselecton], 0
  3371 00002961 C605[13240000]01    <1> 	mov byte [termcopyon], 1
  3372 00002968 803D[12240000]01    <1> 	cmp byte [termguion], 1
  3373 0000296F 0F848D540000        <1> 	je near windowvideocopy
  3374                              <1> %endif
  3375 00002975 E9AE000000          <1> 	jmp nocopytermatall
  3376                              <1> nowincopy:
  3377 0000297A BE00000A00          <1> 	mov esi, 0xA0000
  3378 0000297F A1[4B020000]        <1> 	mov eax, [basecache]
  3379 00002984 C1E004              <1> 	shl eax, 4
  3380 00002987 29C6                <1> 	sub esi, eax
  3381 00002989 BF[9CE32B00]        <1> 	mov edi, videobuf
  3382 0000298E 31C9                <1> 	xor ecx, ecx
  3383 00002990 668B0D[09260000]    <1> 	mov cx, [charxy]
  3384                              <1> nowincopy2:
  3385 00002997 8B07                <1> 	mov eax, [edi]
  3386 00002999 81C748D50000        <1> 	add edi, (videobuf2 - videobuf)
  3387 0000299F 8B1F                <1> 	mov ebx, [edi]
  3388 000029A1 8907                <1> 	mov [edi], eax
  3389 000029A3 81EF48D50000        <1> 	sub edi, (videobuf2 - videobuf)
  3390 000029A9 81C702000000        <1> 	add edi, 2
  3391 000029AF 39D8                <1> 	cmp eax, ebx
  3392 000029B1 744B                <1> 	je nopresentwinfont
  3393 000029B3 81EF02000000        <1> 	sub edi, 2
  3394 000029B9 BD[5B8C0000]        <1> 	mov ebp, fonts
  3395 000029BE 31C0                <1> 	xor eax, eax
  3396 000029C0 668B07              <1> 	mov ax, [edi]
  3397 000029C3 C1E004              <1> 	shl eax, 4
  3398 000029C6 01C5                <1> 	add ebp, eax
  3399 000029C8 81C702000000        <1> 	add edi, 2
  3400 000029CE 668B1F              <1> 	mov bx, [edi]
  3401 000029D1 31D2                <1> 	xor edx, edx
  3402 000029D3 8A15[09260000]      <1> 	mov dl, [charxy]
  3403 000029D9 C1C110              <1> 	rol ecx, 16
  3404 000029DC B110                <1> 	mov cl, 16
  3405                              <1> nowinfont:
  3406 000029DE 8A4500              <1> 	mov al, [ebp]
  3407 000029E1 D0C8                <1> 	ror al, 1
  3408 000029E3 80FB80              <1> 	cmp bl, 0x80
  3409 000029E6 7202                <1> 	jb notnotfont
  3410 000029E8 F6D0                <1> 	not al
  3411                              <1> notnotfont:
  3412 000029EA 8806                <1> 	mov [esi], al
  3413 000029EC 01D6                <1> 	add esi, edx
  3414 000029EE 45                  <1> 	inc ebp
  3415 000029EF FEC9                <1> 	dec cl
  3416 000029F1 80F900              <1> 	cmp cl, 0
  3417 000029F4 75E8                <1> 	jne nowinfont
  3418 000029F6 C1E204              <1> 	shl edx, 4
  3419 000029F9 29D6                <1> 	sub esi, edx
  3420 000029FB C1C110              <1> 	rol ecx, 16
  3421                              <1> nopresentwinfont:
  3422 000029FE 81C702000000        <1> 	add edi, 2
  3423 00002A04 46                  <1> 	inc esi
  3424 00002A05 FEC9                <1> 	dec cl
  3425 00002A07 80F900              <1> 	cmp cl, 0
  3426 00002A0A 758B                <1> 	jne nowincopy2
  3427 00002A0C 8A0D[09260000]      <1> 	mov cl, [charxy]
  3428 00002A12 31D2                <1> 	xor edx, edx
  3429 00002A14 88CA                <1> 	mov dl, cl
  3430 00002A16 29D6                <1> 	sub esi, edx
  3431 00002A18 C1E204              <1> 	shl edx, 4
  3432 00002A1B 01D6                <1> 	add esi, edx
  3433 00002A1D FECD                <1> 	dec ch
  3434 00002A1F 80FD00              <1> 	cmp ch, 0
  3435 00002A22 0F856FFFFFFF        <1> 	jne nowincopy2
  3436                              <1> nocopytermatall:
  3437 00002A28 E802000000          <1> 	call switchtermcursor
  3438 00002A2D 61                  <1> 	popa
  3439 00002A2E C3                  <1> 	ret
  3440                              <1> 	
  3441                              <1> switchtermcursor:
  3442 00002A2F 8B3D[24290000]      <1> 	mov edi, [termcursorpos]
  3443 00002A35 668B4702            <1> 	mov ax, [edi + 2]
  3444 00002A39 668B1F              <1> 	mov bx, [edi]
  3445 00002A3C 663D8000            <1> 	cmp ax, 0x80
  3446 00002A40 7209                <1> 	jb movlargecursorterm
  3447 00002A42 66B80700            <1> 	mov ax, 7
  3448 00002A46 E904000000          <1> 	jmp movedcursorterm
  3449                              <1> movlargecursorterm:
  3450 00002A4B 66B8F000            <1> 	mov ax, 0xF0
  3451                              <1> movedcursorterm:
  3452 00002A4F 66894702            <1> 	mov [edi + 2], ax
  3453 00002A53 6681FB0000          <1> 	cmp bx, 0
  3454 00002A58 7507                <1> 	jne fixednocursorterm
  3455 00002A5A 66BB2000            <1> 	mov bx, ' '
  3456 00002A5E 66891F              <1> 	mov [edi], bx
  3457                              <1> fixednocursorterm:
  3458 00002A61 C3                  <1> 	ret
  3459                              <1> %endif
  3460                                      %include "source/dosints.asm"
  3461                              <1> int20h:
  3462 00002A62 66B8004C            <1> mov ax, 0x4C00
  3463                              <1> int21h:
  3464                              <1> dostosolleros:
  3465 00002A66 6650                <1> 	push ax
  3466 00002A68 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3467 00002A6C 8ED8                <1> 	mov ds, ax
  3468 00002A6E 8EC0                <1> 	mov es, ax
  3469 00002A70 8EE0                <1> 	mov fs, ax
  3470 00002A72 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3471 00002A76 8EE8                <1> 	mov gs, ax
  3472 00002A78 6658                <1> 	pop ax
  3473 00002A7A 9C                  <1> 	pushf
  3474 00002A7B 60                  <1> 	pusha
  3475 00002A7C 80FC01              <1> 	cmp ah, 1
  3476 00002A7F 0F8449000000        <1> 	je near dosgchar
  3477 00002A85 80FC02              <1> 	cmp ah, 2
  3478 00002A88 0F844A000000        <1> 	je near doswchar
  3479 00002A8E 80FC09              <1> 	cmp ah, 9
  3480 00002A91 0F8451000000        <1> 	je near dosprintstr
  3481 00002A97 80FC0A              <1> 	cmp ah, 0xA
  3482 00002A9A 0F8463000000        <1> 	je near dosgetstr
  3483 00002AA0 80FC2B              <1> 	cmp ah, 0x2B
  3484 00002AA3 0F84A2000000        <1> 	je near dosgetdate
  3485 00002AA9 80FC2C              <1> 	cmp ah, 0x2C
  3486 00002AAC 0F84BC000000        <1> 	je near dosgettime
  3487 00002AB2 80FC4C              <1> 	cmp ah, 0x4C
  3488 00002AB5 0F84D1000000        <1> 	je near dosexit
  3489                              <1> backtodos:
  3490 00002ABB 61                  <1> 	popa
  3491 00002ABC 9D                  <1> 	popf
  3492 00002ABD 6650                <1> 	push ax
  3493 00002ABF 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3494 00002AC3 8ED8                <1> 	mov ds, ax
  3495 00002AC5 8EC0                <1> 	mov es, ax
  3496 00002AC7 8EE0                <1> 	mov fs, ax
  3497 00002AC9 8EE8                <1> 	mov gs, ax
  3498 00002ACB 6658                <1> 	pop ax
  3499 00002ACD CF                  <1> 	iret
  3500                              <1> 
  3501                              <1> dosgchar:
  3502 00002ACE E8AEF8FFFF          <1> 	call getchar
  3503 00002AD3 E9E3FFFFFF          <1> 	jmp backtodos
  3504                              <1> 	
  3505                              <1> doswchar:
  3506 00002AD8 88D0                <1> 	mov al, dl
  3507 00002ADA 30E4                <1> 	xor ah, ah
  3508 00002ADC B307                <1> 	mov bl, 7
  3509 00002ADE E81AF9FFFF          <1> 	call prcharint
  3510 00002AE3 E9D3FFFFFF          <1> 	jmp backtodos
  3511                              <1> 	
  3512                              <1> dosprintstr:
  3513 00002AE8 31F6                <1> 	xor esi, esi
  3514 00002AEA 6689D6              <1> 	mov si, dx
  3515 00002AED 81C600004000        <1> 	add esi, dosprogloc
  3516 00002AF3 66B82400            <1> 	mov ax, "$"
  3517 00002AF7 B307                <1> 	mov bl, 7
  3518 00002AF9 E86EF2FFFF          <1> 	call printint
  3519 00002AFE E9B8FFFFFF          <1> 	jmp backtodos
  3520                              <1> 	
  3521                              <1> dosgetstr:
  3522 00002B03 31F6                <1> 	xor esi, esi
  3523 00002B05 6689D6              <1> 	mov si, dx
  3524 00002B08 81C600004000        <1> 	add esi, dosprogloc
  3525 00002B0E B900000000          <1> 	mov ecx, 0
  3526 00002B13 8A0E                <1> 	mov cl, [esi]
  3527 00002B15 81C602000000        <1> 	add esi, 2
  3528 00002B1B 89F7                <1> 	mov edi, esi
  3529 00002B1D 8935[472B0000]      <1> 	mov [stringstart], esi
  3530 00002B23 01CF                <1> 	add edi, ecx
  3531 00002B25 B00A                <1> 	mov al, 10
  3532 00002B27 B307                <1> 	mov bl, 7
  3533 00002B29 E884F3FFFF          <1> 	call rdprintdos
  3534 00002B2E 89F1                <1> 	mov ecx, esi
  3535 00002B30 2B0D[472B0000]      <1> 	sub ecx, [stringstart]
  3536 00002B36 8B35[472B0000]      <1> 	mov esi, [stringstart]
  3537 00002B3C 884EFF              <1> 	mov [esi - 1], cl
  3538 00002B3F 884EFE              <1> 	mov [esi - 2], cl
  3539 00002B42 E974FFFFFF          <1> 	jmp backtodos
  3540 00002B47 00000000            <1> stringstart dd 0
  3541                              <1> 
  3542                              <1> dosgetdate:
  3543 00002B4B E88F160000          <1> 	call time
  3544 00002B50 8A0D[F6440000]      <1> 	mov cl, [RTCtimeYear]
  3545 00002B56 B500                <1> 	mov ch, 0
  3546 00002B58 6681C1D007          <1> 	add cx, 2000
  3547 00002B5D 8A35[F5440000]      <1> 	mov dh, [RTCtimeMonth]
  3548 00002B63 8A15[F4440000]      <1> 	mov dl, [RTCtimeDay]
  3549 00002B69 E94DFFFFFF          <1> 	jmp backtodos
  3550                              <1> 
  3551                              <1> dosgettime:
  3552 00002B6E E86C160000          <1> 	call time
  3553 00002B73 8A2D[F3440000]      <1> 	mov ch, [RTCtimeHour]
  3554 00002B79 8A0D[F2440000]      <1> 	mov cl, [RTCtimeMinute]
  3555 00002B7F 8A35[F1440000]      <1> 	mov dh, [RTCtimeSecond]
  3556 00002B85 B200                <1> 	mov dl, 0
  3557 00002B87 E92FFFFFFF          <1> 	jmp backtodos
  3558                              <1> 	
  3559                              <1> dosexit:
  3560 00002B8C BE[DC890000]        <1> 	mov esi, line
  3561 00002B91 E8CFF1FFFF          <1> 	call print
  3562 00002B96 61                  <1> 	popa
  3563 00002B97 9D                  <1> 	popf
  3564 00002B98 8B25[08B20300]      <1> 	mov esp, [previousstack]
  3565 00002B9E 31DB                <1> 	xor ebx, ebx
  3566 00002BA0 88C3                <1> 	mov bl, al
  3567 00002BA2 80FB00              <1> 	cmp bl, 0
  3568 00002BA5 0F8540F1FFFF        <1> 	jne near exitprog.error
  3569 00002BAB C3                  <1> 	ret
  3570                                      %include "source/shush.asm"
  3571                              <1> os:
  3572                              <1> setdefenv:
  3573 00002BAC C605[14B20300]2F    <1> 	mov byte [currentfolder], '/'
  3574 00002BB3 C705[10B20300]0100- <1> 	mov dword [currentfolderloc], 1
  3575 00002BBB 0000                <1>
  3576 00002BBD E858F2FFFF          <1> 	call clear
  3577                              <1> 	
  3578                              <1> bootfilecheck:
  3579 00002BC2 803D[18B40300]01    <1> 	cmp byte [ranboot], 1
  3580 00002BC9 0F8421000000        <1> 	je near nobootfile
  3581                              <1> 	%ifdef hardware.automatic
  3582 00002BCF E8C8380000          <1> 		call initializelater ;Initialize components that have debug messages
  3583                              <1> 	%endif
  3584                              <1> 	%ifdef disk.none
  3585                              <1> 	%else
  3586 00002BD4 BF[9B890000]        <1> 		mov edi, bootfilename
  3587 00002BD9 BE00004000          <1> 		mov esi, 0x400000
  3588 00002BDE E8103D0000          <1> 		call loadfile
  3589 00002BE3 81FA00000000        <1> 		cmp edx, 0
  3590 00002BE9 7505                <1> 		jne nobootfile
  3591 00002BEB E84E0E0000          <1> 		call progbatchfound
  3592                              <1> 	%endif
  3593                              <1> nobootfile:	
  3594 00002BF0 C605[18B40300]01    <1> 	mov byte [ranboot], 1
  3595                              <1> 
  3596 00002BF7 BE[02000000]        <1> 	mov esi, signature
  3597                              <1> .sigcopyloop:	;this prevents an odd error
  3598 00002BFC 658A06              <1> 	mov al, [gs:esi]
  3599 00002BFF 8806                <1> 	mov [esi], al
  3600 00002C01 46                  <1> 	inc esi
  3601 00002C02 81FE[10000000]      <1> 	cmp esi, signatureend
  3602 00002C08 72F2                <1> 	jb .sigcopyloop
  3603                              <1> 	
  3604 00002C0A BE[02000000]        <1> 	mov esi, signature
  3605 00002C0F E851F1FFFF          <1> 	call print
  3606 00002C14 8B0D[0C000000]      <1> 	mov ecx, [signatureend - 4]
  3607 00002C1A E828070000          <1> 	call showdec
  3608 00002C1F E83CF1FFFF          <1> 	call printline
  3609 00002C24 BE[B8890000]        <1> 	mov esi, userask
  3610 00002C29 E837F1FFFF          <1> 	call print
  3611                              <1> 
  3612                              <1> usercheck:
  3613 00002C2E BE[88C80300]        <1> 	mov esi, buftxt
  3614 00002C33 BF[88CC0300]        <1> 	mov edi, buftxtend
  3615 00002C38 B00A                <1> 	mov al, 10
  3616 00002C3A E85FF2FFFF          <1> 	call rdprint
  3617 00002C3F 56                  <1> 	push esi
  3618 00002C40 BE[C2890000]        <1> 	mov esi, pwdask
  3619 00002C45 E81BF1FFFF          <1> 	call print
  3620 00002C4A 5E                  <1> 	pop esi
  3621 00002C4B 46                  <1> 	inc esi
  3622 00002C4C 8935[4D2D0000]      <1> 	mov [esipass], esi
  3623                              <1> passcheck:
  3624 00002C52 E82AF7FFFF          <1> 	call getchar
  3625 00002C57 3C0A                <1> 	cmp al, 10
  3626 00002C59 0F843E000000        <1> 	je near gotpass
  3627 00002C5F 3C08                <1> 	cmp al, 8
  3628 00002C61 0F8415000000        <1> 	je near backpass
  3629 00002C67 8806                <1> 	mov [esi], al
  3630 00002C69 46                  <1> 	inc esi
  3631 00002C6A 30E4                <1> 	xor ah, ah
  3632 00002C6C B02A                <1> 	mov al, "*"
  3633 00002C6E E88AF7FFFF          <1> 	call prcharint
  3634 00002C73 E9DAFFFFFF          <1> 	jmp passcheck
  3635 00002C78 08200800            <1> backcursor2 db 8," ",8,0
  3636                              <1> backpass:
  3637 00002C7C 3B35[4D2D0000]      <1> 	cmp esi, [esipass]
  3638 00002C82 0F84CAFFFFFF        <1> 	je near passcheck
  3639 00002C88 4E                  <1> 	dec esi
  3640 00002C89 C60600              <1> 	mov byte [esi], 0
  3641 00002C8C 56                  <1> 	push esi
  3642 00002C8D BE[782C0000]        <1> 	mov esi, backcursor2
  3643 00002C92 E8CEF0FFFF          <1> 	call print
  3644 00002C97 5E                  <1> 	pop esi
  3645 00002C98 E9B5FFFFFF          <1> 	jmp passcheck
  3646                              <1> gotpass:
  3647 00002C9D B00A                <1> 	mov al, 10
  3648 00002C9F E859F7FFFF          <1> 	call prcharint
  3649 00002CA4 30C0                <1> 	xor al, al
  3650 00002CA6 31C9                <1> 	xor ecx, ecx
  3651 00002CA8 8806                <1> 	mov [esi], al
  3652 00002CAA BB[DE890000]        <1> 	mov ebx, userlst
  3653                              <1> userfind:
  3654 00002CAF BE[88C80300]        <1> 	mov esi, buftxt
  3655 00002CB4 8A06                <1> 	mov al, [esi]
  3656 00002CB6 3C00                <1> 	cmp al, 0
  3657 00002CB8 0F84EEFEFFFF        <1> 	je near os
  3658 00002CBE 891D[512D0000]      <1> 	mov [usercache], ebx
  3659 00002CC4 E87E030000          <1> 	call tester
  3660 00002CC9 3C01                <1> 	cmp al, 1
  3661 00002CCB 7419                <1> 	je pwdtest
  3662 00002CCD 41                  <1> 	inc ecx
  3663                              <1> nxtuser:
  3664 00002CCE 8A03                <1> 	mov al, [ebx]
  3665 00002CD0 43                  <1> 	inc ebx
  3666 00002CD1 3C00                <1> 	cmp al, 0
  3667 00002CD3 75F9                <1> 	jne nxtuser
  3668 00002CD5 81FB[018A0000]      <1> 	cmp ebx, userlstend
  3669 00002CDB 0F83CBFEFFFF        <1> 	jae near os
  3670 00002CE1 E9C9FFFFFF          <1> 	jmp userfind
  3671                              <1> pwdtest:
  3672 00002CE6 46                  <1> 	inc esi
  3673 00002CE7 43                  <1> 	inc ebx
  3674 00002CE8 E85A030000          <1> 	call tester
  3675 00002CED 3C01                <1> 	cmp al, 1
  3676 00002CEF 7405                <1> 	je pwdrgt
  3677 00002CF1 E9D8FFFFFF          <1> 	jmp nxtuser
  3678                              <1> pwdrgt:
  3679 00002CF6 D1E9                <1> 	shr ecx, 1
  3680 00002CF8 890D[14B40300]      <1> 	mov [uid], ecx
  3681 00002CFE E817F1FFFF          <1> 	call clear
  3682 00002D03 31C9                <1> 	xor ecx, ecx
  3683 00002D05 41                  <1> 	inc ecx
  3684 00002D06 890D[308E2D00]      <1> 	mov [commandbufpos], ecx
  3685                              <1> returnfromexp:
  3686 00002D0C 66B90002            <1> 	mov cx, 200h
  3687 00002D10 BE[88C80300]        <1> 	mov esi, buftxt
  3688 00002D15 8935[43300000]      <1> 	mov [currentcommandloc], esi
  3689 00002D1B E825000000          <1> 	call bufclr
  3690                              <1> clearolddata:
  3691 00002D20 31C0                <1> 	xor eax, eax
  3692 00002D22 A2[19B40300]        <1> 	mov [IFON], al
  3693 00002D27 A2[1AB40300]        <1> 	mov [IFTRUE], al
  3694 00002D2C A2[82B40300]        <1> 	mov [BATCHISON], al
  3695 00002D31 A3[7EB40300]        <1> 	mov [BATCHPOS], eax
  3696 00002D36 A2[83B40300]        <1> 	mov [LOOPON], al
  3697 00002D3B A3[84B40300]        <1> 	mov [LOOPPOS], eax
  3698 00002D40 E939000000          <1> 	jmp nwcmd
  3699                              <1> bufclr:	
  3700 00002D45 30C0                <1> 	xor al, al
  3701 00002D47 8806                <1> 	mov [esi], al
  3702 00002D49 46                  <1> 	inc esi
  3703 00002D4A E2F9                <1> 	loop bufclr
  3704 00002D4C C3                  <1> 	ret
  3705                              <1> 
  3706 00002D4D 00000000            <1> esipass dd 0
  3707 00002D51 [DE890000]          <1> usercache dd userlst
  3708                              <1> 	
  3709                              <1> buftxtclear:
  3710 00002D55 30C0                <1> 	xor al, al
  3711 00002D57 BE[88C80300]        <1> 	mov esi, buftxt
  3712 00002D5C 81FE[88CC0300]      <1> clearbuftxt: cmp esi, buf2
  3713 00002D62 7314                <1> 	jae retbufclr
  3714 00002D64 8806                <1> 	mov [esi], al
  3715 00002D66 46                  <1> 	inc esi
  3716 00002D67 E9F0FFFFFF          <1> 	jmp clearbuftxt
  3717                              <1> 
  3718 00002D6C 39DE                <1> clearitbuf: cmp esi, ebx
  3719 00002D6E 7308                <1> 	jae retbufclr
  3720 00002D70 8806                <1> 	mov [esi], al
  3721 00002D72 46                  <1> 	inc esi
  3722 00002D73 E9F4FFFFFF          <1> 	jmp clearitbuf
  3723 00002D78 C3                  <1> retbufclr: ret
  3724                              <1> 
  3725 00002D79 E900000000          <1> full:	jmp nwcmd
  3726                              <1> 
  3727                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3728                              <1> nwcmd:
  3729 00002D7E FB                  <1> 	sti
  3730 00002D7F 31C0                <1> 	xor eax, eax
  3731 00002D81 3905[5F2F0000]      <1> 	cmp [nextcommandloc], eax
  3732 00002D87 7416                <1> 	je nomultiplecommand
  3733 00002D89 8B35[5F2F0000]      <1> 	mov esi, [nextcommandloc]
  3734 00002D8F 8935[632F0000]      <1> 	mov [thiscommandloc], esi
  3735 00002D95 E8D2010000          <1> 	call fixvariables
  3736 00002D9A E9DFFFFFFF          <1> 	jmp nwcmd
  3737                              <1> nomultiplecommand:
  3738 00002D9F A3[632F0000]        <1> 	mov [thiscommandloc], eax
  3739 00002DA4 3805[B66A0000]      <1> 	cmp [threadson], al
  3740 00002DAA 7405                <1> 	je noclinwcmd
  3741 00002DAC A2[B66A0000]        <1> 	mov [threadson], al
  3742                              <1> noclinwcmd:
  3743 00002DB1 B001                <1> 	mov al, 1
  3744 00002DB3 3805[82B40300]      <1> 	cmp [BATCHISON], al
  3745 00002DB9 7501                <1> 	jne cancel
  3746 00002DBB C3                  <1> 	ret
  3747 00002DBC 30C0                <1> cancel:	xor al, al
  3748 00002DBE A2[19B40300]        <1> 	mov [IFON], al
  3749 00002DC3 A2[82B40300]        <1> 	mov [BATCHISON], al
  3750 00002DC8 B05B                <1> 	mov al, '['
  3751 00002DCA 66BB0700            <1> 	mov bx, 7
  3752 00002DCE E841F6FFFF          <1> 	call prcharq
  3753 00002DD3 8B35[512D0000]      <1> 	mov esi, [usercache]
  3754 00002DD9 E863EFFFFF          <1> 	call printquiet
  3755 00002DDE BE[CC890000]        <1> 	mov esi, computer
  3756 00002DE3 E859EFFFFF          <1> 	call printquiet
  3757 00002DE8 BE[14B20300]        <1> 	mov esi, currentfolder
  3758 00002DED 0335[0CB20300]      <1> 	add esi, [lastfolderloc]
  3759 00002DF3 E849EFFFFF          <1> 	call printquiet
  3760 00002DF8 BE[D7890000]        <1> 	mov esi, endprompt
  3761 00002DFD E863EFFFFF          <1> 	call print
  3762 00002E02 E84EFFFFFF          <1> 	call buftxtclear
  3763 00002E07 BE[88C80300]        <1> 	mov esi, buftxt
  3764 00002E0C C605[6A230000]01    <1> 	mov byte [commandedit], 1
  3765 00002E13 B00A                <1> 	mov al, 10
  3766 00002E15 66BB0700            <1> 	mov bx, 7
  3767 00002E19 BF[88CC0300]        <1> 	mov edi, buftxtend
  3768 00002E1E E87BF0FFFF          <1> 	call rdprint
  3769 00002E23 C605[6A230000]00    <1> 	mov byte [commandedit], 0
  3770 00002E2A 803D[88C80300]00    <1> 	cmp byte [buftxt], 0
  3771 00002E31 0F8447FFFFFF        <1> 	je near nwcmd
  3772 00002E37 8B35[308E2D00]      <1> gotcmd:	mov esi, [commandbufpos]
  3773 00002E3D 8935[2C8E2D00]      <1> 	mov [lastcommandpos], esi
  3774 00002E43 FF05[388E2D00]      <1> 	inc dword [commandsentered]
  3775 00002E49 BF[88C80300]        <1> 	mov edi, buftxt
  3776 00002E4E 81C6[3C8E2D00]      <1> 	add esi, commandbuf
  3777 00002E54 81FE[3C9E2D00]      <1> 	cmp esi, commandbufend
  3778 00002E5A 7605                <1> 	jbe copycommand
  3779 00002E5C BE[3C8E2D00]        <1> 	mov esi, commandbuf
  3780                              <1> copycommand:
  3781 00002E61 8A07                <1> 	mov al, [edi]
  3782 00002E63 8806                <1> 	mov [esi], al
  3783 00002E65 47                  <1> 	inc edi
  3784 00002E66 46                  <1> 	inc esi
  3785 00002E67 3C00                <1> 	cmp al, 0
  3786 00002E69 7412                <1> 	je donecopy
  3787 00002E6B 81FE[3C9E2D00]      <1> 	cmp esi, commandbufend
  3788 00002E71 76EE                <1> 	jbe copycommand
  3789 00002E73 BE[3C8E2D00]        <1> 	mov esi, commandbuf
  3790 00002E78 E9E4FFFFFF          <1> 	jmp copycommand
  3791                              <1> donecopy:
  3792 00002E7D 81EE[3C8E2D00]      <1> 	sub esi, commandbuf
  3793 00002E83 8935[308E2D00]      <1> 	mov [commandbufpos], esi
  3794 00002E89 E8D9000000          <1> 	call run
  3795 00002E8E E9EBFEFFFF          <1> 	jmp nwcmd
  3796                              <1> 
  3797 00002E93 E8BDFEFFFF          <1> input:	call buftxtclear
  3798 00002E98 BE[88C80300]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3799 00002E9D BF[88CC0300]        <1> 	mov edi, buftxtend
  3800 00002EA2 B00A                <1> stdin:	mov al, 10
  3801 00002EA4 B307                <1> 	mov bl, 7
  3802 00002EA6 E8F3EFFFFF          <1> 	call rdprint
  3803 00002EAB C3                  <1> 	ret
  3804                              <1> 
  3805                              <1> replacevariable:
  3806 00002EAC 8A4601              <1> 	mov al, [esi + 1]
  3807 00002EAF C64601FF            <1> 	mov byte [esi + 1], 255
  3808 00002EB3 3C24                <1> 	cmp al, "$"
  3809 00002EB5 0F84B1000000        <1> 	je near fixvariables
  3810 00002EBB 884601              <1> 	mov [esi + 1], al
  3811 00002EBE 56                  <1> 	push esi
  3812 00002EBF 81EE[88C80300]      <1> 	sub esi, buftxt
  3813 00002EC5 89F7                <1> 	mov edi, esi
  3814 00002EC7 81C6[88C80300]      <1> 	add esi, buftxt
  3815 00002ECD 47                  <1> 	inc edi
  3816 00002ECE BB[88B40300]        <1> 	mov ebx, variables
  3817 00002ED3 E834180000          <1> 	call nxtvrech
  3818 00002ED8 89F7                <1> 	mov edi, esi
  3819 00002EDA 31DB                <1> 	xor ebx, ebx
  3820 00002EDC 4E                  <1> 	dec esi
  3821                              <1> findvarname:
  3822 00002EDD 4E                  <1> 	dec esi
  3823 00002EDE 8A06                <1> 	mov al, [esi]
  3824 00002EE0 43                  <1> 	inc ebx
  3825 00002EE1 3C04                <1> 	cmp al, 4
  3826 00002EE3 75F8                <1> 	jne findvarname
  3827 00002EE5 5E                  <1> 	pop esi
  3828                              <1> replacevarloop:
  3829 00002EE6 8A07                <1> 	mov al, [edi]
  3830 00002EE8 3C00                <1> 	cmp al, 0
  3831 00002EEA 0F8416000000        <1> 	je near compressbuftxt
  3832 00002EF0 81FB00000000        <1> 	cmp ebx, 0
  3833 00002EF6 0F8419000000        <1> 	je near expandbuftxt
  3834 00002EFC 8806                <1> 	mov [esi], al
  3835 00002EFE 4B                  <1> 	dec ebx
  3836 00002EFF 46                  <1> 	inc esi
  3837 00002F00 47                  <1> 	inc edi
  3838 00002F01 E9E0FFFFFF          <1> 	jmp replacevarloop
  3839                              <1> compressbuftxt:
  3840 00002F06 8A041E              <1> 	mov al, [esi + ebx]
  3841 00002F09 8806                <1> 	mov [esi], al
  3842 00002F0B 46                  <1> 	inc esi
  3843 00002F0C 3C00                <1> 	cmp al, 0
  3844 00002F0E 75F6                <1> 	jne compressbuftxt
  3845 00002F10 E957000000          <1> 	jmp fixvariables
  3846                              <1> expandbuftxt:
  3847 00002F15 89F1                <1> 	mov ecx, esi
  3848 00002F17 8A26                <1> 	mov ah, [esi]
  3849                              <1> expandbuftxtlp:
  3850 00002F19 8A1E                <1> 	mov bl, [esi]
  3851 00002F1B 46                  <1> 	inc esi
  3852 00002F1C 8A3E                <1> 	mov bh, [esi]
  3853 00002F1E 8826                <1> 	mov [esi], ah
  3854 00002F20 88FC                <1> 	mov ah, bh
  3855 00002F22 80FB00              <1> 	cmp bl, 0
  3856 00002F25 75F2                <1> 	jne expandbuftxtlp
  3857 00002F27 89CE                <1> 	mov esi, ecx
  3858 00002F29 8806                <1> 	mov [esi], al
  3859 00002F2B 47                  <1> 	inc edi
  3860 00002F2C 8A07                <1> 	mov al, [edi]
  3861 00002F2E 3C00                <1> 	cmp al, 0
  3862 00002F30 0F8436000000        <1> 	je near fixvariables
  3863 00002F36 46                  <1> 	inc esi
  3864 00002F37 E9D9FFFFFF          <1> 	jmp expandbuftxt
  3865                              <1> multipleprogline:
  3866 00002F3C 30E4                <1> 	xor ah, ah
  3867 00002F3E 8826                <1> 	mov [esi], ah
  3868 00002F40 46                  <1> 	inc esi
  3869 00002F41 8935[5F2F0000]      <1> 	mov [nextcommandloc], esi
  3870 00002F47 E93E000000          <1> 	jmp donefixvariables
  3871                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3872 00002F4C 46                  <1> 	inc esi
  3873 00002F4D 8A06                <1> 	mov al, [esi]
  3874 00002F4F C606FF              <1> 	mov byte [esi], 255
  3875 00002F52 3C23                <1> 	cmp al, '#'
  3876 00002F54 7416                <1> 	je fixvariables
  3877 00002F56 4E                  <1> 	dec esi
  3878 00002F57 C60600              <1> 	mov byte [esi], 0
  3879 00002F5A E90D000000          <1> 	jmp fixvariables
  3880                              <1> 	
  3881 00002F5F 00000000            <1> nextcommandloc dd 0
  3882 00002F63 00000000            <1> thiscommandloc dd 0	
  3883                              <1> run:
  3884 00002F67 BE[88C80300]        <1> 	mov esi, buftxt
  3885                              <1> fixvariables:
  3886 00002F6C 46                  <1> 	inc esi
  3887 00002F6D 8A06                <1> 	mov al, [esi]
  3888 00002F6F 3C23                <1> 	cmp al, '#'	;inline comment
  3889 00002F71 74D9                <1> 	je inlinecomment
  3890 00002F73 3C24                <1> 	cmp al, '$' ;variable
  3891 00002F75 0F8431FFFFFF        <1> 	je near replacevariable
  3892 00002F7B 3C3B                <1> 	cmp al, ';' ;program list
  3893 00002F7D 74BD                <1> 	je multipleprogline
  3894 00002F7F 3C00                <1> 	cmp al, 0
  3895 00002F81 75E9                <1> 	jne fixvariables
  3896 00002F83 31C0                <1> 	xor eax, eax
  3897 00002F85 A3[5F2F0000]        <1> 	mov [nextcommandloc], eax
  3898                              <1> donefixvariables:
  3899 00002F8A 803D[8D350000]00    <1> 	cmp byte [indexdone], 0
  3900 00002F91 7505                <1> 	jne progtest
  3901 00002F93 E857050000          <1> 	call indexfiles
  3902                              <1> progtest:
  3903 00002F98 31C0                <1> 	xor eax, eax
  3904 00002F9A BB[08AE0300]        <1> 	mov ebx, fileindex
  3905 00002F9F 668B03              <1> prgnxt:	mov ax, [ebx]
  3906 00002FA2 B1FF                <1> 	mov cl, 255
  3907 00002FA4 B52C                <1> 	mov ch, 44
  3908 00002FA6 6639C8              <1> 	cmp ax, cx
  3909 00002FA9 740E                <1> 	je fndprg
  3910 00002FAB 43                  <1> 	inc ebx
  3911 00002FAC 81FB[08B20300]      <1> 	cmp ebx, fileindexend
  3912 00002FB2 7363                <1> 	jae prgnf
  3913 00002FB4 E9E6FFFFFF          <1> 	jmp prgnxt
  3914 00002FB9 81C302000000        <1> fndprg: add ebx, 2
  3915 00002FBF 31C9                <1> 	xor ecx, ecx
  3916 00002FC1 BE[88C80300]        <1> 	mov esi, buftxt
  3917 00002FC6 390D[632F0000]      <1> 	cmp [thiscommandloc], ecx
  3918 00002FCC 7406                <1> 	je noprgtstmultiple
  3919 00002FCE 8B35[632F0000]      <1> 	mov esi, [thiscommandloc]
  3920                              <1> noprgtstmultiple:
  3921 00002FD4 E8AF000000          <1> 	call cndtest
  3922 00002FD9 3C01                <1> 	cmp al, 1
  3923 00002FDB 7305                <1> 	jae prggood
  3924 00002FDD E9BDFFFFFF          <1> 	jmp prgnxt
  3925 00002FE2 81FB[08B20300]      <1> prggood: cmp ebx, fileindexend
  3926 00002FE8 7358                <1> 	jae prgdn
  3927 00002FEA 31C0                <1> 	xor eax, eax
  3928 00002FEC BE[88C80300]        <1> 	mov esi, buftxt
  3929 00002FF1 3905[632F0000]      <1> 	cmp [thiscommandloc], eax
  3930 00002FF7 7406                <1> 	je noprggoodmul
  3931 00002FF9 8B35[632F0000]      <1> 	mov esi, [thiscommandloc]
  3932                              <1> noprggoodmul:
  3933 00002FFF 8935[43300000]      <1> 	mov [currentcommandloc], esi
  3934 00003005 81C303000000        <1> 	add ebx, 3
  3935 0000300B 8B3B                <1> 	mov edi, [ebx]
  3936 0000300D C605[B66A0000]02    <1> 	mov byte [threadson], 2
  3937 00003014 FFD7                <1> 	call edi
  3938 00003016 C3                  <1> 	ret
  3939                              <1> prgnf:	
  3940 00003017 8B35[43300000]      <1> 	mov esi, [currentcommandloc]
  3941 0000301D 8A06                <1> 	mov al, [esi]
  3942 0000301F 3C00                <1> 	cmp al, 0
  3943 00003021 741F                <1> 	je prgdn
  3944 00003023 BE[A3890000]        <1> 	mov esi, notfound1
  3945 00003028 E838EDFFFF          <1> 	call print
  3946 0000302D 8B35[43300000]      <1> 	mov esi, [currentcommandloc]
  3947 00003033 E82DEDFFFF          <1> 	call print
  3948 00003038 BE[AB890000]        <1> 	mov esi, notfound2
  3949 0000303D E823EDFFFF          <1> 	call print
  3950 00003042 C3                  <1> prgdn:	ret
  3951                              <1> 
  3952 00003043 00000000            <1> currentcommandloc dd 0
  3953                              <1> 
  3954                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3955 00003047 6631C0              <1> 	xor ax, ax
  3956 0000304A 8A06                <1> retest:	mov al, [esi]
  3957 0000304C 8A23                <1> 	mov ah, [ebx]
  3958 0000304E 3C00                <1> 	cmp al, 0
  3959 00003050 740B                <1> 	je testtrue
  3960 00003052 38E0                <1> 	cmp al, ah
  3961 00003054 750F                <1> 	jne testfalse
  3962 00003056 43                  <1> 	inc ebx
  3963 00003057 46                  <1> 	inc esi
  3964 00003058 E9EDFFFFFF          <1> 	jmp retest
  3965                              <1> testtrue:
  3966 0000305D 80FC00              <1> 	cmp ah, 0
  3967 00003060 7503                <1> 	jne testfalse
  3968 00003062 B001                <1> 	mov al, 1
  3969 00003064 C3                  <1> 	ret
  3970                              <1> testfalse:
  3971 00003065 30C0                <1> 	xor al, al
  3972 00003067 C3                  <1> 	ret
  3973                              <1> 
  3974                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3975 00003068 30C0                <1> 	xor al, al
  3976                              <1> opretest:
  3977 0000306A 8A06                <1> 	mov al, [esi]
  3978 0000306C 8A23                <1> 	mov ah, [ebx]
  3979 0000306E 38E0                <1> 	cmp al, ah
  3980 00003070 7513                <1> 	jne optestfalse
  3981 00003072 80FC00              <1> 	cmp ah, 0
  3982 00003075 7407                <1> 	je optesttrue
  3983 00003077 43                  <1> 	inc ebx
  3984 00003078 46                  <1> 	inc esi
  3985 00003079 E9ECFFFFFF          <1> 	jmp opretest
  3986                              <1> optesttrue:
  3987 0000307E 3C00                <1> 	cmp al, 0
  3988 00003080 7503                <1> 	jne optestfalse
  3989 00003082 B001                <1> 	mov al, 1
  3990 00003084 C3                  <1> 	ret
  3991                              <1> optestfalse:
  3992 00003085 30C0                <1> 	xor al, al
  3993 00003087 C3                  <1> 	ret
  3994                              <1> 
  3995                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3996 00003088 30C0                <1> 	xor al, al
  3997 0000308A 8A06                <1> cndretest:	mov al, [esi]
  3998 0000308C 8A23                <1> 	mov ah, [ebx]
  3999 0000308E 38CC                <1> 	cmp ah, cl
  4000 00003090 740B                <1> 	je cndtesttrue
  4001 00003092 38E0                <1> 	cmp al, ah
  4002 00003094 750E                <1> 	jne cndtestfalse
  4003 00003096 43                  <1> 	inc ebx
  4004 00003097 46                  <1> 	inc esi
  4005 00003098 E9EDFFFFFF          <1> 	jmp cndretest
  4006                              <1> cndtesttrue:
  4007 0000309D 38C8                <1> 	cmp al, cl
  4008 0000309F 7506                <1> 	jne cndtestalmost
  4009 000030A1 B001                <1> 	mov al, 1
  4010 000030A3 C3                  <1> 	ret
  4011                              <1> cndtestfalse:
  4012 000030A4 30C0                <1> 	xor al, al
  4013 000030A6 C3                  <1> 	ret
  4014                              <1> cndtestalmost:
  4015 000030A7 B002                <1> 	mov al, 2
  4016 000030A9 C3                  <1> 	ret
  4017                              <1> 	
  4018                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  4019                              <1> 		                ;ends if array seperator is found backwards after 0
  4020                              <1> 	arnxt:	      
  4021 000030AA 88E8                <1> 		mov al, ch
  4022 000030AC 88CC                <1> 		mov ah, cl        
  4023 000030AE 663906              <1> 		cmp [esi], ax
  4024 000030B1 744E                <1> 		je ardn
  4025 000030B3 66390E              <1> 		cmp [esi], cx
  4026 000030B6 740A                <1> 		je arfnd
  4027 000030B8 46                  <1> 		inc esi
  4028 000030B9 39DE                <1> 		cmp esi, ebx
  4029 000030BB 7344                <1> 		jae ardn
  4030 000030BD E9E8FFFFFF          <1> 		jmp arnxt
  4031 000030C2 81C602000000        <1> 	arfnd: add esi, 2
  4032 000030C8 891D[02310000]      <1> 		mov [arbx], ebx
  4033 000030CE 890D[06310000]      <1> 		mov [arcx], ecx
  4034 000030D4 E88CECFFFF          <1> 		call print
  4035 000030D9 8935[08310000]      <1> 		mov [arsi], esi
  4036 000030DF E87CECFFFF          <1> 		call printline
  4037 000030E4 8B1D[02310000]      <1> 		mov ebx, [arbx]
  4038 000030EA 668B0D[06310000]    <1> 		mov cx, [arcx]
  4039 000030F1 8B35[08310000]      <1> 		mov esi, [arsi]
  4040 000030F7 46                  <1> 		inc esi
  4041 000030F8 39DE                <1> 		cmp esi, ebx
  4042 000030FA 7305                <1> 		jae ardn
  4043 000030FC E9A9FFFFFF          <1> 		jmp arnxt
  4044 00003101 C3                  <1> 	ardn:	ret
  4045 00003102 00000000            <1> arbx:	dw 0,0
  4046 00003106 0000                <1> arcx:	db 0,0
  4047 00003108 00000000            <1> arsi:	dw 0,0
  4048                              <1> 
  4049                              <1> clearbuffer:
  4050 0000310C BE[88CC0300]        <1> 	mov esi, buf2
  4051 00003111 B030                <1> 	mov al, '0'
  4052 00003113 81FE[9CCC0300]      <1> clearbuf: cmp esi, numbuf
  4053 00003119 7308                <1> 	jae doneclearbuff
  4054 0000311B 8806                <1> 	mov [esi], al
  4055 0000311D 46                  <1> 	inc esi
  4056 0000311E E9F0FFFFFF          <1> 	jmp clearbuf
  4057                              <1> doneclearbuff: 
  4058 00003123 C3                  <1> 		ret
  4059                              <1> 
  4060                              <1> convert:
  4061 00003124 4E                  <1> 	dec esi
  4062 00003125 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  4063                              <1> .lp:
  4064 00003127 89DE                <1> 	mov esi, ebx
  4065 00003129 81EE09000000        <1> 	sub esi, 9
  4066 0000312F 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  4067 00003135 720D                <1> 	jb .8
  4068 00003137 81E900CA9A3B        <1> 	sub ecx, 1000000000
  4069 0000313D FE06                <1> 	inc byte [esi]
  4070 0000313F E9E3FFFFFF          <1> 	jmp .lp
  4071 00003144 46                  <1> .8:	inc esi
  4072 00003145 81F900E1F505        <1> 	cmp ecx, 100000000
  4073 0000314B 720D                <1> 	jb .7
  4074 0000314D 81E900E1F505        <1> 	sub ecx, 100000000
  4075 00003153 FE06                <1> 	inc byte [esi]
  4076 00003155 E9CDFFFFFF          <1> 	jmp .lp
  4077 0000315A 46                  <1> .7:	inc esi
  4078 0000315B 81F980969800        <1> 	cmp ecx, 10000000
  4079 00003161 720D                <1> 	jb .6
  4080 00003163 81E980969800        <1> 	sub ecx, 10000000
  4081 00003169 FE06                <1> 	inc byte [esi]
  4082 0000316B E9B7FFFFFF          <1> 	jmp .lp
  4083 00003170 46                  <1> .6:	inc esi
  4084 00003171 81F940420F00        <1> 	cmp ecx, 1000000
  4085 00003177 720D                <1> 	jb .5
  4086 00003179 81E940420F00        <1> 	sub ecx, 1000000
  4087 0000317F FE06                <1> 	inc byte [esi]
  4088 00003181 E9A1FFFFFF          <1> 	jmp .lp
  4089 00003186 46                  <1> .5:	inc esi
  4090 00003187 81F9A0860100        <1> 	cmp ecx, 100000
  4091 0000318D 720D                <1> 	jb .4
  4092 0000318F 81E9A0860100        <1> 	sub ecx, 100000
  4093 00003195 FE06                <1> 	inc byte [esi]
  4094 00003197 E98BFFFFFF          <1> 	jmp .lp
  4095 0000319C 46                  <1> .4:	inc esi
  4096 0000319D 81F910270000        <1> 	cmp ecx, 10000
  4097 000031A3 720D                <1> 	jb .3
  4098 000031A5 81E910270000        <1> 	sub ecx, 10000
  4099 000031AB FE06                <1> 	inc byte [esi]
  4100 000031AD E975FFFFFF          <1> 	jmp .lp
  4101 000031B2 46                  <1> .3:	inc esi
  4102 000031B3 81F9E8030000        <1> 	cmp ecx, 1000
  4103 000031B9 720D                <1> 	jb .2
  4104 000031BB 81E9E8030000        <1> 	sub ecx, 1000
  4105 000031C1 FE06                <1> 	inc byte [esi]
  4106 000031C3 E95FFFFFFF          <1> 	jmp .lp
  4107 000031C8 46                  <1> .2:	inc esi
  4108 000031C9 81F964000000        <1> 	cmp ecx, 100
  4109 000031CF 720D                <1> 	jb .1
  4110 000031D1 81E964000000        <1> 	sub ecx, 100
  4111 000031D7 FE06                <1> 	inc byte [esi]
  4112 000031D9 E949FFFFFF          <1> 	jmp .lp
  4113 000031DE 46                  <1> .1:	inc esi
  4114 000031DF 81F90A000000        <1> 	cmp ecx, 10
  4115 000031E5 720D                <1> 	jb .0
  4116 000031E7 81E90A000000        <1> 	sub ecx, 10
  4117 000031ED FE06                <1> 	inc byte [esi]
  4118 000031EF E933FFFFFF          <1> 	jmp .lp
  4119 000031F4 46                  <1> .0:	inc esi
  4120 000031F5 81F901000000        <1> 	cmp ecx, 1
  4121 000031FB 720D                <1> 	jb .dn
  4122 000031FD 81E901000000        <1> 	sub ecx, 1
  4123 00003203 FE06                <1> 	inc byte [esi]
  4124 00003205 E91DFFFFFF          <1> 	jmp .lp
  4125                              <1> .dn:
  4126 0000320A C3                  <1> 	ret
  4127                              <1> 
  4128                              <1> 	
  4129                              <1> 
  4130 0000320B 00<rept>            <1> hexnumber times 8 db 0
  4131 00003213 202000              <1> hexnumberend db "  ",0
  4132                              <1> 
  4133                              <1> converthex:
  4134                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  4135 00003216 56                  <1> 	push esi
  4136 00003217 B030                <1> 	mov al, "0"
  4137 00003219 39FE                <1> .clearlp: cmp esi, edi
  4138 0000321B 7308                <1> 	jae .doneclear
  4139 0000321D 8806                <1> 	mov [esi], al
  4140 0000321F 46                  <1> 	inc esi
  4141 00003220 E9F4FFFFFF          <1> 	jmp .clearlp
  4142                              <1> .doneclear:
  4143 00003225 81EE02000000        <1> 	sub esi, 2
  4144 0000322B 89C8                <1> 	mov eax, ecx
  4145                              <1> .loop:
  4146 0000322D 30FF                <1> 	xor bh, bh
  4147 0000322F 88C3                <1> 	mov bl, al
  4148 00003231 66C1E304            <1> 	shl bx, 4
  4149 00003235 C0EB04              <1> 	shr bl, 4
  4150 00003238 86DF                <1> 	xchg bl, bh ;they are backwards
  4151 0000323A 80C330              <1> 	add bl, 48
  4152 0000323D 80FB39              <1> 	cmp bl, "9"
  4153 00003240 7609                <1> 	jbe .goodbl
  4154 00003242 80EB30              <1> 	sub bl, 48
  4155 00003245 80EB0A              <1> 	sub bl, 0xA
  4156 00003248 80C341              <1> 	add bl, "A"
  4157                              <1> .goodbl:
  4158 0000324B 80C730              <1> 	add bh, 48
  4159 0000324E 80FF39              <1> 	cmp bh, "9"
  4160 00003251 7609                <1> 	jbe .goodbh
  4161 00003253 80EF30              <1> 	sub bh, 48
  4162 00003256 80EF0A              <1> 	sub bh, 0xA
  4163 00003259 80C741              <1> 	add bh, "A"
  4164                              <1> .goodbh:
  4165 0000325C C1E808              <1> 	shr eax, 8
  4166 0000325F 66891E              <1> 	mov [esi], bx
  4167 00003262 81EE02000000        <1> 	sub esi, 2
  4168 00003268 3B3424              <1> 	cmp esi, [esp]
  4169 0000326B 7207                <1> 	jb .done
  4170 0000326D 3D00000000          <1> 	cmp eax, 0
  4171 00003272 75B9                <1> 	jne .loop
  4172                              <1> .done:
  4173 00003274 5E                  <1> 	pop esi
  4174 00003275 C3                  <1> 	ret
  4175                              <1> 	
  4176                              <1> 	
  4177 00003276 00                  <1> smallhex db 0
  4178 00003277 01                  <1> firsthexshown db 1
  4179                              <1> showhexsmall:
  4180 00003278 C605[76320000]01    <1> 	mov byte [smallhex], 1
  4181 0000327F E808000000          <1> 	call showhex
  4182 00003284 C605[76320000]00    <1> 	mov byte [smallhex], 0
  4183 0000328B C3                  <1> 	ret
  4184                              <1> showhex:
  4185 0000328C 60                  <1> 	pusha
  4186 0000328D BE[0B320000]        <1> 	mov esi, hexnumber
  4187 00003292 BF[13320000]        <1> 	mov edi, hexnumberend
  4188 00003297 E87AFFFFFF          <1> 	call converthex
  4189 0000329C 803D[77320000]01    <1> 	cmp byte [firsthexshown], 1
  4190 000032A3 7503                <1> 	jne .show
  4191 000032A5 6631D2              <1> 	xor dx, dx
  4192                              <1> .show:
  4193 000032A8 803D[77320000]03    <1> 	cmp byte [firsthexshown], 3
  4194 000032AF 7505                <1> 	jne .nonewhexline
  4195 000032B1 E8AAEAFFFF          <1> 	call printline
  4196                              <1> .nonewhexline:
  4197 000032B6 803D[77320000]04    <1> 	cmp byte [firsthexshown], 4
  4198 000032BD 7522                <1> 	jne .notab
  4199 000032BF B1A0                <1> 	mov cl, 160
  4200 000032C1 28D1                <1> 	sub cl, dl
  4201 000032C3 C0E905              <1> 	shr cl, 5
  4202 000032C6 C0E105              <1> 	shl cl, 5
  4203 000032C9 80F900              <1> 	cmp cl, 0
  4204 000032CC 750A                <1> 	jne .nonewline
  4205 000032CE E88DEAFFFF          <1> 	call printline
  4206 000032D3 E909000000          <1> 	jmp .notab
  4207                              <1> .nonewline:
  4208 000032D8 80C20F              <1> 	add dl, 15
  4209 000032DB C0EA04              <1> 	shr dl, 4
  4210 000032DE C0E204              <1> 	shl dl, 4
  4211                              <1> .notab:
  4212 000032E1 BE[0B320000]        <1> 	mov esi, hexnumber
  4213 000032E6 803D[76320000]01    <1> 	cmp byte [smallhex],1
  4214 000032ED 7506                <1> 	jne .nosmall
  4215 000032EF 81C606000000        <1> 	add esi, 6
  4216                              <1> .nosmall:
  4217 000032F5 803D[77320000]05    <1> 	cmp byte [firsthexshown], 5
  4218 000032FC 750A                <1> 	jne .noquiet
  4219 000032FE E83EEAFFFF          <1> 	call printquiet
  4220 00003303 E918000000          <1> 	jmp .donequiet
  4221                              <1> .noquiet:
  4222 00003308 803D[77320000]06    <1> 	cmp byte [firsthexshown], 6
  4223 0000330F 750A                <1> 	jne .normal
  4224 00003311 E83EEAFFFF          <1> 	call printhighlight
  4225 00003316 E905000000          <1> 	jmp .donequiet
  4226                              <1> .normal:
  4227 0000331B E845EAFFFF          <1> 	call print
  4228                              <1> .donequiet:
  4229 00003320 803D[77320000]02    <1> 	cmp byte [firsthexshown], 2
  4230 00003327 7505                <1> 	jne .shown
  4231 00003329 E832EAFFFF          <1> 	call printline
  4232                              <1> .shown:
  4233 0000332E C605[77320000]00    <1> 	mov byte [firsthexshown], 0
  4234 00003335 61                  <1> 	popa
  4235 00003336 C3                  <1> 	ret
  4236                              <1> 
  4237                              <1> 
  4238 00003337 303030303030303030- <1> decnumber db "00000000000000"
  4239 00003340 3030303030          <1>
  4240 00003345 2000                <1> decnumberend: db " ",0
  4241                              <1> 
  4242                              <1> showdec: ;same as showhex, just uses decimal conversion
  4243 00003347 60                  <1> 	pusha
  4244 00003348 BF[37330000]        <1> 	mov edi, decnumber
  4245 0000334D BE[45330000]        <1> 	mov esi, decnumberend
  4246                              <1> .clear:
  4247 00003352 C60730              <1> 	mov byte [edi], '0'
  4248 00003355 47                  <1> 	inc edi
  4249 00003356 39F7                <1> 	cmp edi, esi
  4250 00003358 72F8                <1> 	jb .clear
  4251 0000335A BF[37330000]        <1> 	mov edi, decnumber
  4252 0000335F E8C0FDFFFF          <1> 	call convert
  4253 00003364 803D[77320000]01    <1> 	cmp byte [firsthexshown], 1
  4254 0000336B 7503                <1> 	jne .show
  4255 0000336D 6631D2              <1> 	xor dx, dx
  4256                              <1> .show:
  4257 00003370 803D[77320000]03    <1> 	cmp byte [firsthexshown], 3
  4258 00003377 7505                <1> 	jne .nonewdecline
  4259 00003379 E8E2E9FFFF          <1> 	call printline
  4260                              <1> .nonewdecline:
  4261 0000337E 803D[77320000]04    <1> 	cmp byte [firsthexshown], 4
  4262 00003385 7522                <1> 	jne .notab
  4263 00003387 B1A0                <1> 	mov cl, 160
  4264 00003389 28D1                <1> 	sub cl, dl
  4265 0000338B C0E905              <1> 	shr cl, 5
  4266 0000338E C0E105              <1> 	shl cl, 5
  4267 00003391 80F900              <1> 	cmp cl, 0
  4268 00003394 750A                <1> 	jne .nonewline
  4269 00003396 E8C5E9FFFF          <1> 	call printline
  4270 0000339B E909000000          <1> 	jmp .notab
  4271                              <1> .nonewline:
  4272 000033A0 80C20F              <1> 	add dl, 15
  4273 000033A3 C0EA04              <1> 	shr dl, 4
  4274 000033A6 C0E204              <1> 	shl dl, 4
  4275                              <1> .notab:
  4276 000033A9 BE[37330000]        <1> 	mov esi, decnumber
  4277 000033AE 4E                  <1> 	dec esi
  4278                              <1> .sifind:
  4279 000033AF 46                  <1> 	inc esi
  4280 000033B0 81FE[44330000]      <1> 	cmp esi, decnumberend - 1
  4281 000033B6 7305                <1> 	jae .nosifind
  4282 000033B8 803E30              <1> 	cmp byte [esi], '0'
  4283 000033BB 74F2                <1> 	je .sifind
  4284                              <1> .nosifind:
  4285 000033BD E8A3E9FFFF          <1> 	call print
  4286 000033C2 803D[77320000]02    <1> 	cmp byte [firsthexshown], 2
  4287 000033C9 7505                <1> 	jne .shown
  4288 000033CB E890E9FFFF          <1> 	call printline
  4289                              <1> .shown:
  4290 000033D0 C605[77320000]00    <1> 	mov byte [firsthexshown], 0
  4291 000033D7 61                  <1> 	popa
  4292 000033D8 C3                  <1> 	ret
  4293                              <1> 	
  4294                              <1> cnvrthextxt:
  4295 000033D9 31C9                <1> 	xor ecx, ecx
  4296 000033DB 31C0                <1> 	xor eax, eax
  4297 000033DD 31D2                <1> 	xor edx, edx
  4298 000033DF 31DB                <1> 	xor ebx, ebx
  4299 000033E1 4E                  <1> 	dec esi
  4300                              <1> .end:
  4301 000033E2 46                  <1> 	inc esi
  4302 000033E3 8A06                <1> 	mov al, [esi]
  4303 000033E5 3C00                <1> 	cmp al, 0
  4304 000033E7 75F9                <1> 	jne .end
  4305                              <1> .loop:
  4306 000033E9 4E                  <1> 	dec esi
  4307 000033EA 8A06                <1> 	mov al, [esi]
  4308 000033EC 3C41                <1> 	cmp al, "A"
  4309 000033EE 7328                <1> 	jae .char
  4310 000033F0 2C30                <1> 	sub al, 48
  4311 000033F2 3C10                <1> 	cmp al, 16
  4312 000033F4 7721                <1> 	ja .done
  4313                              <1> .donechar:
  4314 000033F6 81FA00000000        <1> 	cmp edx, 0
  4315 000033FC 740E                <1> 	je .noshl
  4316 000033FE 89D3                <1> 	mov ebx, edx
  4317                              <1> .shl:
  4318 00003400 C1E004              <1> 	shl eax, 4
  4319 00003403 4B                  <1> 	dec ebx
  4320 00003404 81FB00000000        <1> 	cmp ebx, 0
  4321 0000340A 75F4                <1> 	jne .shl
  4322                              <1> .noshl:
  4323 0000340C 42                  <1> 	inc edx
  4324 0000340D 01C1                <1> 	add ecx, eax
  4325 0000340F 81FA08000000        <1> 	cmp edx, 8
  4326 00003415 72D2                <1> 	jb .loop
  4327                              <1> .done:
  4328 00003417 C3                  <1> 	ret
  4329                              <1> .char:
  4330 00003418 3C46                <1> 	cmp al, "F"
  4331 0000341A 77FB                <1> 	ja .done
  4332 0000341C 2C41                <1> 	sub al, "A"
  4333 0000341E 040A                <1> 	add al, 0xA
  4334 00003420 E9D1FFFFFF          <1> 	jmp .donechar
  4335                              <1> 	
  4336                              <1> 	
  4337                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4338 00003425 31C9                <1> 	xor ecx, ecx
  4339 00003427 31C0                <1> 	xor eax, eax
  4340 00003429 31D2                <1> 	xor edx, edx
  4341 0000342B 31DB                <1> 	xor ebx, ebx
  4342 0000342D 4E                  <1> 	dec esi
  4343                              <1> .lp:
  4344 0000342E 46                  <1> 	inc esi
  4345 0000342F 8A06                <1> 	mov al, [esi]
  4346 00003431 3C00                <1> 	cmp al, 0
  4347 00003433 75F9                <1> 	jne .lp
  4348 00003435 4E                  <1> 	dec esi
  4349 00003436 8A06                <1> 	mov al, [esi]
  4350 00003438 3C2E                <1> 	cmp al, '.'
  4351 0000343A 7506                <1> 	jne .dot
  4352 0000343C 46                  <1> 	inc esi
  4353 0000343D E9ECFFFFFF          <1> 	jmp .lp
  4354                              <1> .dot:
  4355 00003442 3C20                <1> 	cmp al, ' '
  4356 00003444 7404                <1> 	je .zero
  4357 00003446 3C30                <1> 	cmp al, '0'
  4358 00003448 7504                <1> 	jne .txtlp
  4359                              <1> .zero: 
  4360 0000344A 39FE                <1> 		cmp esi, edi
  4361 0000344C 744B                <1> 		je .done
  4362                              <1> .txtlp:
  4363 0000344E 31C0                <1> 	xor eax, eax
  4364 00003450 8A06                <1> 	mov al, [esi]
  4365 00003452 3C3D                <1> 	cmp al, '='
  4366 00003454 7443                <1> 	je .done
  4367 00003456 3C30                <1> 	cmp al, 48
  4368 00003458 723F                <1> 	jb .done
  4369 0000345A 3C3A                <1> 	cmp al, 58
  4370 0000345C 733B                <1> 	jae .done
  4371 0000345E 3C23                <1> 	cmp al, '#'
  4372 00003460 7437                <1> 	je .done
  4373 00003462 39FE                <1> 	cmp esi, edi
  4374 00003464 7233                <1> 	jb .done
  4375 00003466 81F900000000        <1> 	cmp ecx, 0
  4376 0000346C 770B                <1> 	ja .exp
  4377 0000346E 2C30                <1> .noexp:	sub al, 48
  4378 00003470 01C2                <1> 	add edx, eax
  4379 00003472 4E                  <1> 	dec esi
  4380 00003473 41                  <1> 	inc ecx
  4381 00003474 E9D5FFFFFF          <1> 	jmp .txtlp
  4382 00003479 81F900000000        <1> .exp:	cmp ecx, 0
  4383 0000347F 74ED                <1> 	je .noexp
  4384 00003481 2C30                <1> 	sub al, 48
  4385 00003483 51                  <1> 	push ecx
  4386                              <1> .expmul:
  4387 00003484 89C3                <1> 	mov ebx, eax
  4388 00003486 01D8                <1> 	add eax, ebx
  4389 00003488 C1E303              <1> 	shl ebx, 3
  4390 0000348B 01D8                <1> 	add eax, ebx
  4391 0000348D E2F5                <1> 	loop .expmul
  4392 0000348F 01C2                <1> 	add edx, eax
  4393 00003491 59                  <1> 	pop ecx
  4394 00003492 4E                  <1> 	dec esi
  4395 00003493 41                  <1> 	inc ecx
  4396 00003494 E9B5FFFFFF          <1> 	jmp .txtlp
  4397 00003499 89D1                <1> .done: mov ecx, edx
  4398 0000349B C3                  <1> 	ret
  4399                              <1> 
  4400                              <1> benchmarki: ;output number of clocks since initial value
  4401 0000349C 0F31                <1> 	rdtsc
  4402 0000349E 8B1D[078A0000]      <1> 	mov ebx, [initialtsc]
  4403 000034A4 8B0D[0B8A0000]      <1> 	mov ecx, [initialtsc + 4]
  4404 000034AA E90E000000          <1> 	jmp benchmarkl.calc
  4405                              <1> 
  4406                              <1> benchmarkl: ;output number of clocks since last benchmark
  4407 000034AF 0F31                <1> 	rdtsc
  4408 000034B1 8B1D[0F8A0000]      <1> 	mov ebx, [lasttsc]
  4409 000034B7 8B0D[138A0000]      <1> 	mov ecx, [lasttsc + 4]
  4410                              <1> .calc:
  4411 000034BD 29D8                <1> 	sub eax, ebx
  4412 000034BF 7701                <1> 	ja .noover
  4413 000034C1 4A                  <1> 	dec edx
  4414                              <1> .noover:
  4415 000034C2 29CA                <1> 	sub edx, ecx
  4416 000034C4 8B0C24              <1> 	mov ecx, [esp]
  4417 000034C7 E8C0FDFFFF          <1> 	call showhex
  4418 000034CC 89D1                <1> 	mov ecx, edx
  4419 000034CE E8B9FDFFFF          <1> 	call showhex
  4420 000034D3 89C1                <1> 	mov ecx, eax
  4421 000034D5 E8B2FDFFFF          <1> 	call showhex
  4422 000034DA E881E8FFFF          <1> 	call printline
  4423 000034DF 0F31                <1> 	rdtsc
  4424 000034E1 A3[0F8A0000]        <1> 	mov [lasttsc], eax
  4425 000034E6 8915[138A0000]      <1> 	mov [lasttsc + 4], edx
  4426 000034EC C3                  <1> 	ret
  4427                                      %include "source/programs.asm"
  4428 000034ED FF2C                <1> filetypes db 255,44
  4429                              <1> progstart:		;programs start here
  4430                              <1> indexfiles:
  4431 000034EF BE[EF340000]        <1> 	mov esi, progstart
  4432 000034F4 BB[08AE0300]        <1> 	mov ebx, fileindex
  4433 000034F9 BF[EF340000]        <1> 	mov edi, progstart
  4434 000034FE 81EF02000000        <1> 	sub edi, 2
  4435                              <1> indexloop:
  4436 00003504 668B0E              <1> 	mov cx, [esi]
  4437                              <1> 	indexloop2:
  4438 00003507 663B0F              <1> 		cmp cx, [edi]
  4439 0000350A 7427                <1> 		je indexloop2done
  4440 0000350C 81EF02000000        <1> 		sub edi, 2
  4441 00003512 81FF[ED340000]      <1> 		cmp edi, filetypes
  4442 00003518 73ED                <1> 		jae indexloop2
  4443 0000351A BF[EF340000]        <1> 	mov edi, progstart
  4444 0000351F 81EF02000000        <1> 	sub edi, 2
  4445 00003525 46                  <1> 	inc esi
  4446 00003526 81FE[33540000]      <1> 	cmp esi, batchprogend
  4447 0000352C 7357                <1> 	jae indexloopdone
  4448 0000352E E9D1FFFFFF          <1> 	jmp indexloop
  4449                              <1> indexloop2done:
  4450 00003533 66890B              <1> 	mov [ebx], cx
  4451 00003536 81C302000000        <1> 	add ebx, 2
  4452 0000353C 81C602000000        <1> 	add esi, 2
  4453                              <1> 	nameindex:
  4454 00003542 8A0E                <1> 		mov cl, [esi]
  4455 00003544 80F900              <1> 		cmp cl, 0
  4456 00003547 7409                <1> 		je nameindexdone
  4457 00003549 880B                <1> 		mov [ebx], cl
  4458 0000354B 46                  <1> 		inc esi
  4459 0000354C 43                  <1> 		inc ebx
  4460 0000354D E9F0FFFFFF          <1> 		jmp nameindex
  4461                              <1> 	nameindexdone:
  4462 00003552 43                  <1> 		inc ebx
  4463 00003553 66C7030000          <1> 		mov word [ebx], 0
  4464 00003558 81C302000000        <1> 		add ebx, 2
  4465 0000355E 46                  <1> 		inc esi
  4466 0000355F 8933                <1> 		mov [ebx], esi
  4467 00003561 81C304000000        <1> 		add ebx, 4
  4468 00003567 66C7030000          <1> 		mov word [ebx], 0
  4469 0000356C 81C302000000        <1> 		add ebx, 2
  4470 00003572 81FB[08B20300]      <1> 		cmp ebx, fileindexend
  4471 00003578 730B                <1> 		jae indexloopdone
  4472 0000357A 81C601000000        <1> 		add esi, 1
  4473 00003580 E97FFFFFFF          <1> 		jmp indexloop
  4474 00003585 C605[8D350000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4475 0000358C C3                  <1> 		ret
  4476 0000358D 00                  <1> indexdone db 0
  4477                              <1> %include 'source/programs/_comment.asm' ;#
  4478 0000358E FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4479 00003592 C3                  <2> 	ret 
  4480                              <1> %include 'source/programs/_math.asm' ;!
  4481 00003593 FF2C2100            <2> db 255,44,"!",0
  4482                              <2> 	num:	
  4483 00003597 E870FBFFFF          <2> 		call clearbuffer
  4484 0000359C C605[1A380000]00    <2> 		mov byte [decimal], 0
  4485 000035A3 C605[1B380000]00    <2> 		mov byte [decimal2], 0
  4486 000035AA 8B35[43300000]      <2> 		mov esi, [currentcommandloc]
  4487 000035B0 31C0                <2> 		xor eax, eax
  4488 000035B2 31C9                <2> 		xor ecx, ecx
  4489 000035B4 31DB                <2> 		xor ebx, ebx
  4490 000035B6 8A06                <2> 	num2:	mov al, [esi]
  4491 000035B8 3C2B                <2> 		cmp al, '+'
  4492 000035BA 7416                <2> 		je operatorfound
  4493 000035BC 3C2D                <2> 		cmp al, '-'
  4494 000035BE 7412                <2> 		je operatorfound
  4495 000035C0 3C2A                <2> 		cmp al, '*'
  4496 000035C2 740E                <2> 		je operatorfound
  4497 000035C4 3C2F                <2> 		cmp al, '/'
  4498 000035C6 740A                <2> 		je operatorfound
  4499 000035C8 3C5E                <2> 		cmp al, '^'
  4500 000035CA 7406                <2> 		je operatorfound
  4501 000035CC 46                  <2> 		inc esi
  4502 000035CD 84C0                <2> 		test al, al
  4503 000035CF 75E5                <2> 		jnz num2
  4504 000035D1 C3                  <2> 		ret
  4505 000035D2 50                  <2> 	operatorfound: push eax
  4506 000035D3 30E4                <2> 		xor ah, ah
  4507 000035D5 8826                <2> 		mov [esi], ah
  4508 000035D7 89F7                <2> 		mov edi, esi
  4509 000035D9 46                  <2> 		inc esi
  4510 000035DA 8A06                <2> 		mov al, [esi]
  4511 000035DC 3C25                <2> 		cmp al, '%'
  4512 000035DE 0F845E000000        <2> 		je near resultnum1
  4513                              <2> 	varnum2: 
  4514 000035E4 57                  <2> 		push edi
  4515 000035E5 E8A6000000          <2> 		call checkdecimal
  4516 000035EA 5F                  <2> 		pop edi
  4517 000035EB E835FEFFFF          <2> 		call cnvrttxt
  4518                              <2> 	vrnm2:
  4519 000035F0 89CB                <2> 		mov ebx, ecx
  4520 000035F2 53                  <2> 		push ebx
  4521 000035F3 E814FBFFFF          <2> 		call clearbuffer
  4522 000035F8 8B35[43300000]      <2> 		mov esi, [currentcommandloc]
  4523 000035FE 89F7                <2> 		mov edi, esi
  4524 00003600 46                  <2> 		inc esi
  4525 00003601 8A06                <2> 		mov al, [esi]
  4526 00003603 3C25                <2> 		cmp al, '%'
  4527 00003605 0F844E000000        <2> 		je near resultnum2
  4528                              <2> 	varnum4: 
  4529 0000360B 57                  <2> 		push edi
  4530 0000360C E86B000000          <2> 		call checkdecimal2
  4531 00003611 5F                  <2> 		pop edi
  4532 00003612 E80EFEFFFF          <2> 		call cnvrttxt
  4533                              <2> 	vrnm4:
  4534 00003617 5B                  <2> 		pop ebx
  4535 00003618 58                  <2> 		pop eax
  4536 00003619 3C2B                <2> 		cmp al, '+'
  4537 0000361B 0F84A3000000        <2> 		je near plusnum
  4538 00003621 3C2D                <2> 		cmp al, '-'
  4539 00003623 0F84A7000000        <2> 		je near subnum
  4540 00003629 3C2A                <2> 		cmp al, '*'
  4541 0000362B 0F84AB000000        <2> 		je near mulnum
  4542 00003631 3C2F                <2> 		cmp al, '/'
  4543 00003633 0F84B9000000        <2> 		je near divnum
  4544 00003639 3C5E                <2> 		cmp al, '^'
  4545 0000363B 0F84D6000000        <2> 		je near expnum
  4546 00003641 C3                  <2> 		ret
  4547                              <2> 	resultnum1:
  4548 00003642 8A0D[1C380000]      <2> 		mov cl, [decimalresult]
  4549 00003648 880D[1A380000]      <2> 		mov [decimal], cl
  4550 0000364E 8B0D[1D380000]      <2> 		mov ecx, [result]
  4551 00003654 E997FFFFFF          <2> 		jmp vrnm2
  4552                              <2> 	resultnum2:
  4553 00003659 8A0D[1A380000]      <2> 		mov cl, [decimal]
  4554 0000365F 880D[1B380000]      <2> 		mov [decimal2], cl
  4555 00003665 8A0D[1C380000]      <2> 		mov cl, [decimalresult]
  4556 0000366B 880D[1A380000]      <2> 		mov [decimal], cl
  4557 00003671 8B0D[1D380000]      <2> 		mov ecx, [result]
  4558 00003677 E99BFFFFFF          <2> 		jmp vrnm4
  4559                              <2> 	checkdecimal2:
  4560 0000367C 8A25[1A380000]      <2> 		mov ah, [decimal]
  4561 00003682 8825[1B380000]      <2> 		mov [decimal2], ah
  4562 00003688 30E4                <2> 		xor ah, ah
  4563 0000368A 8825[1A380000]      <2> 		mov [decimal], ah
  4564                              <2> 	checkdecimal:
  4565 00003690 89F7                <2> 		mov edi, esi
  4566                              <2> 	chkdec1:
  4567 00003692 8A07                <2> 		mov al, [edi]
  4568 00003694 3C2E                <2> 		cmp al, '.'
  4569 00003696 0F840E000000        <2> 		je near fnddec
  4570 0000369C 3C00                <2> 		cmp al, 0
  4571 0000369E 0F841F000000        <2> 		je near nodecimal
  4572 000036A4 47                  <2> 		inc edi
  4573 000036A5 E9E8FFFFFF          <2> 		jmp chkdec1
  4574                              <2> 	fnddec:
  4575 000036AA 8A4701              <2> 		mov al, [edi + 1]
  4576 000036AD 8807                <2> 		mov [edi], al
  4577 000036AF 3C00                <2> 		cmp al, 0
  4578 000036B1 0F840C000000        <2> 		je near nodecimal
  4579 000036B7 FE05[1A380000]      <2> 		inc byte [decimal]
  4580 000036BD 47                  <2> 		inc edi
  4581 000036BE E9E7FFFFFF          <2> 		jmp fnddec
  4582                              <2> 	nodecimal:
  4583 000036C3 C3                  <2> 		ret
  4584                              <2> 	plusnum:
  4585 000036C4 E80F010000          <2> 		call decaddfix
  4586 000036C9 01D9                <2> 		add ecx, ebx
  4587 000036CB E98A000000          <2> 		jmp retnum
  4588                              <2> 	subnum:
  4589 000036D0 E803010000          <2> 		call decaddfix
  4590 000036D5 29D9                <2> 		sub ecx, ebx
  4591 000036D7 E97E000000          <2> 		jmp retnum
  4592                              <2> 	mulnum:
  4593 000036DC A0[1B380000]        <2> 		mov al, [decimal2]
  4594 000036E1 0005[1A380000]      <2> 		add [decimal], al
  4595 000036E7 89C8                <2> 		mov eax, ecx
  4596 000036E9 F7E3                <2> 		mul ebx
  4597 000036EB 89C1                <2> 		mov ecx, eax
  4598 000036ED E968000000          <2> 		jmp retnum
  4599                              <2> 	divnum:
  4600 000036F2 E8E1000000          <2> 		call decaddfix
  4601 000036F7 30C0                <2> 		xor al, al
  4602 000036F9 A2[1A380000]        <2> 		mov [decimal], al
  4603 000036FE 31D2                <2> 		xor edx, edx
  4604 00003700 89C8                <2> 		mov eax, ecx
  4605 00003702 81FB00000000        <2> 		cmp ebx, 0
  4606 00003708 0F844C000000        <2> 		je near retnum
  4607 0000370E F7F3                <2> 		div ebx
  4608 00003710 89C1                <2> 		mov ecx, eax
  4609 00003712 E943000000          <2> 		jmp retnum
  4610                              <2> 	expnum:
  4611 00003717 8A15[1A380000]      <2> 		mov dl, [decimal]
  4612 0000371D 8815[1B380000]      <2> 		mov [decimal2], dl
  4613 00003723 31D2                <2> 		xor edx, edx
  4614 00003725 89C8                <2> 		mov eax, ecx
  4615 00003727 89D9                <2> 		mov ecx, ebx
  4616 00003729 89C3                <2> 		mov ebx, eax
  4617 0000372B 81F900000000        <2> 		cmp ecx, 0
  4618 00003731 7422                <2> 		je noexpnum
  4619 00003733 49                  <2> 		dec ecx
  4620 00003734 81F900000000        <2> 		cmp ecx, 0
  4621 0000373A 7412                <2> 		je noexpnumlp
  4622 0000373C F7E3                <2> 	expnumlp: mul ebx
  4623 0000373E 8A15[1B380000]      <2> 		mov dl, [decimal2]
  4624 00003744 0015[1A380000]      <2> 		add [decimal], dl
  4625 0000374A 31D2                <2> 		xor edx, edx
  4626 0000374C E2EE                <2> 		loop expnumlp
  4627                              <2> 	noexpnumlp:
  4628 0000374E 89C1                <2> 		mov ecx, eax
  4629 00003750 E905000000          <2> 		jmp retnum
  4630                              <2> 	noexpnum:
  4631 00003755 B901000000          <2> 		mov ecx, 1
  4632                              <2> 	retnum: 
  4633 0000375A BE[9CCC0300]        <2> 		mov esi, numbuf
  4634 0000375F 890D[1D380000]      <2> 		mov [result], ecx
  4635 00003765 E8BAF9FFFF          <2> 		call convert
  4636 0000376A BE[9CCC0300]        <2> 		mov esi, numbuf
  4637 0000376F 8A25[1A380000]      <2> 		mov ah, [decimal]
  4638 00003775 8825[1C380000]      <2> 		mov [decimalresult], ah
  4639 0000377B 80FC00              <2> 		cmp ah, 0
  4640 0000377E 0F8425000000        <2> 		je near noputdecimal
  4641                              <2> 	putdecimal:
  4642 00003784 4E                  <2> 		dec esi
  4643 00003785 FECC                <2> 		dec ah
  4644 00003787 80FC00              <2> 		cmp ah, 0
  4645 0000378A 0F87F4FFFFFF        <2> 		ja near putdecimal
  4646 00003790 4E                  <2> 		dec esi
  4647 00003791 8A06                <2> 		mov al, [esi]
  4648 00003793 C6062E              <2> 		mov byte [esi], '.'
  4649                              <2> 	decputloop:
  4650 00003796 4E                  <2> 		dec esi
  4651 00003797 8A26                <2> 		mov ah, [esi]
  4652 00003799 8806                <2> 		mov [esi], al
  4653 0000379B 88E0                <2> 		mov al, ah
  4654 0000379D 81FE[88CC0300]      <2> 		cmp esi, buf2
  4655 000037A3 0F87EDFFFFFF        <2> 		ja near decputloop
  4656                              <2> 	noputdecimal:
  4657 000037A9 BE[88CC0300]        <2> 		mov esi, buf2
  4658 000037AE E805000000          <2> 		call chkadd
  4659 000037B3 C3                  <2> 		ret
  4660 000037B4 00000000            <2> edxnumbuf dw 0,0
  4661 000037B8 8A06                <2> 	chkadd: mov al, [esi]
  4662 000037BA 3C30                <2> 		cmp al, '0'
  4663 000037BC 750F                <2> 		jne dnadd
  4664 000037BE 46                  <2> 		inc esi
  4665 000037BF 81FE[9CCC0300]      <2> 		cmp esi, numbuf
  4666 000037C5 7405                <2> 		je dnaddm1
  4667 000037C7 E9ECFFFFFF          <2> 		jmp chkadd
  4668 000037CC 4E                  <2> 	dnaddm1: dec esi
  4669 000037CD E893E5FFFF          <2> 	dnadd:	call print
  4670 000037D2 E889E5FFFF          <2> 		call printline
  4671 000037D7 C3                  <2> 		ret
  4672                              <2> 		
  4673                              <2> 	decaddfix:
  4674 000037D8 A0[1B380000]        <2> 		mov al, [decimal2]
  4675 000037DD 8A25[1A380000]      <2> 		mov ah, [decimal]
  4676 000037E3 38E0                <2> 		cmp al, ah
  4677 000037E5 7432                <2> 		je gooddecadd
  4678 000037E7 38E0                <2> 		cmp al, ah
  4679 000037E9 721A                <2> 		jb lowdecadd
  4680                              <2> 	highdecadd:
  4681 000037EB FEC4                <2> 		inc ah
  4682 000037ED 89CA                <2> 		mov edx, ecx
  4683 000037EF C1E103              <2> 		shl ecx, 3
  4684 000037F2 01D1                <2> 		add ecx, edx
  4685 000037F4 01D1                <2> 		add ecx, edx
  4686 000037F6 38E0                <2> 		cmp al, ah
  4687 000037F8 77F1                <2> 		ja highdecadd
  4688 000037FA 8825[1A380000]      <2> 		mov [decimal], ah
  4689 00003800 E914000000          <2> 		jmp gooddecadd
  4690                              <2> 	lowdecadd:
  4691 00003805 FEC0                <2> 		inc al
  4692 00003807 89DA                <2> 		mov edx, ebx
  4693 00003809 C1E303              <2> 		shl ebx, 3
  4694 0000380C 01D3                <2> 		add ebx, edx
  4695 0000380E 01D3                <2> 		add ebx, edx
  4696 00003810 38E0                <2> 		cmp al, ah
  4697 00003812 72F1                <2> 		jb lowdecadd
  4698 00003814 A2[1A380000]        <2> 		mov [decimal], al
  4699                              <2> 	gooddecadd:
  4700 00003819 C3                  <2> 		ret
  4701                              <2> 		
  4702 0000381A 00                  <2> decimal db 0
  4703 0000381B 00                  <2> decimal2 db 0
  4704 0000381C 00                  <2> decimalresult db 0
  4705 0000381D 00000000            <2> result dd 0
  4706                              <1> %include 'source/programs/_variables.asm' ;% and $
  4707 00003821 FF2C2500            <2> db 255,44,"%",0
  4708                              <2> 	ans:
  4709 00003825 BE[88CC0300]        <2> 		mov esi, buf2
  4710 0000382A E889FFFFFF          <2> 		call chkadd
  4711 0000382F C3                  <2> 		ret
  4712                              <2> 		
  4713 00003830 FF2C2400            <2> db 255,44,"$",0
  4714 00003834 8B35[43300000]      <2> var: mov esi, [currentcommandloc]
  4715 0000383A BB[88B40300]        <2> 	mov ebx, variables
  4716 0000383F 8A06                <2> lkeq:	mov al, [esi]
  4717 00003841 3C3D                <2> 	cmp al, '='
  4718 00003843 741E                <2> 	je eqfnd	;is there an '=' sign?
  4719 00003845 3C00                <2> 	cmp al, 0
  4720 00003847 7406                <2> 	je echovars
  4721 00003849 46                  <2> 	inc esi
  4722 0000384A E9F0FFFFFF          <2> 	jmp lkeq
  4723 0000384F BE[88B40300]        <2> echovars: mov esi, variables
  4724 00003854 BB[88C40300]        <2> 	mov ebx, varend
  4725 00003859 B105                <2> 	mov cl, 5
  4726 0000385B B504                <2> 	mov ch, 4
  4727 0000385D E848F8FFFF          <2> 	call array
  4728 00003862 C3                  <2> 	ret
  4729 00003863 46                  <2> eqfnd:	inc esi
  4730 00003864 8A06                <2> 	mov al, [esi]
  4731 00003866 3C00                <2> 	cmp al, 0
  4732 00003868 7410                <2> 	je readvar
  4733 0000386A 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  4734 00003870 BB[88B40300]        <2> 	mov ebx, variables
  4735 00003875 E91C000000          <2> 	jmp seek
  4736                              <2> readvar:
  4737 0000387A B00A                <2> 	mov al, 10
  4738 0000387C 66BB0700            <2> 	mov bx, 7
  4739 00003880 C605[6A230000]00    <2> 	mov byte [commandedit], 0
  4740 00003887 BF[88CC0300]        <2> 	mov edi, buftxtend
  4741 0000388C E80DE6FFFF          <2> 	call rdprint
  4742 00003891 E99EFFFFFF          <2> 	jmp var
  4743 00003896 668B03              <2> seek:	mov ax, [ebx]
  4744 00003899 B105                <2> 	mov cl, 5
  4745 0000389B B504                <2> 	mov ch, 4
  4746 0000389D 663D0000            <2> 	cmp ax, 0
  4747 000038A1 0F846A000000        <2> 	je near save
  4748 000038A7 6639C8              <2> 	cmp ax, cx
  4749 000038AA 7406                <2> 	je skfnd
  4750 000038AC 43                  <2> 	inc ebx
  4751 000038AD E9E4FFFFFF          <2> 	jmp seek
  4752 000038B2 8B35[43300000]      <2> skfnd:	mov esi, [currentcommandloc]
  4753 000038B8 46                  <2> 	inc esi
  4754 000038B9 81C302000000        <2> 	add ebx, 2
  4755 000038BF 89DF                <2> 	mov edi, ebx
  4756 000038C1 B13D                <2> 	mov cl, '='
  4757 000038C3 E8C0F7FFFF          <2> 	call cndtest
  4758 000038C8 3C01                <2> 	cmp al, 1	
  4759 000038CA 741B                <2> 	je varfnd
  4760 000038CC 89FB                <2> 	mov ebx, edi
  4761 000038CE 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  4762 000038D4 668B03              <2> 	mov ax, [ebx]
  4763 000038D7 663D0000            <2> 	cmp ax, 0
  4764 000038DB 0F8430000000        <2> 	je near save
  4765 000038E1 43                  <2> 	inc ebx
  4766 000038E2 E9AFFFFFFF          <2> 	jmp seek
  4767 000038E7 8A03                <2> varfnd:	mov al, [ebx]
  4768 000038E9 3C04                <2> 	cmp al, 4
  4769 000038EB 7407                <2> 	je save2
  4770 000038ED 4B                  <2> 	dec ebx
  4771 000038EE 4E                  <2> 	dec esi
  4772 000038EF E9F3FFFFFF          <2> 	jmp varfnd
  4773 000038F4 4B                  <2> save2:	dec ebx
  4774 000038F5 4E                  <2> 	dec esi
  4775 000038F6 8A03                <2> 	mov al, [ebx]
  4776 000038F8 3C05                <2> 	cmp al, 5
  4777 000038FA 7405                <2> 	je remove
  4778 000038FC E9E6FFFFFF          <2> 	jmp varfnd
  4779 00003901 8A03                <2> remove: mov al, [ebx]
  4780 00003903 3C00                <2> 	cmp al, 0
  4781 00003905 748F                <2> 	je seek
  4782 00003907 30C0                <2> 	xor al, al
  4783 00003909 8803                <2> 	mov [ebx], al
  4784 0000390B 43                  <2> 	inc ebx
  4785 0000390C E9F0FFFFFF          <2> 	jmp remove	;do not need for now-need defragmentation
  4786 00003911 8B35[43300000]      <2> save:	mov esi, [currentcommandloc]
  4787 00003917 43                  <2> 	inc ebx
  4788 00003918 B005                <2> 	mov al, 5
  4789 0000391A B404                <2> 	mov ah, 4
  4790 0000391C 668903              <2> 	mov [ebx], ax
  4791 0000391F 43                  <2> 	inc ebx
  4792 00003920 43                  <2> svhere:	inc ebx
  4793 00003921 46                  <2> 	inc esi
  4794 00003922 8A06                <2> 	mov al, [esi]
  4795 00003924 3C00                <2> 	cmp al, 0
  4796 00003926 0F8456000000        <2> 	je near svdone
  4797 0000392C 3C25                <2> 	cmp al, '%'
  4798 0000392E 7407                <2> 	je ans2
  4799 00003930 8803                <2> 	mov [ebx], al	
  4800 00003932 E9E9FFFFFF          <2> 	jmp svhere
  4801 00003937 56                  <2> ans2:	push esi
  4802 00003938 BE[88CC0300]        <2> 	mov esi, buf2
  4803 0000393D E82C000000          <2> 	call ansfnd
  4804 00003942 E806000000          <2> 	call anscp
  4805 00003947 5E                  <2> 	pop esi
  4806 00003948 E9D3FFFFFF          <2> 	jmp svhere
  4807 0000394D 8A06                <2> anscp:	mov al, [esi]
  4808 0000394F 8803                <2> 	mov [ebx], al
  4809 00003951 81FE[9CCC0300]      <2> 	cmp esi, numbuf
  4810 00003957 74C7                <2> 	je svhere
  4811 00003959 3C00                <2> 	cmp al, 0
  4812 0000395B 74C3                <2> 	je svhere
  4813 0000395D 43                  <2> 	inc ebx
  4814 0000395E 46                  <2> 	inc esi
  4815 0000395F E9E9FFFFFF          <2> 	jmp anscp
  4816 00003964 5E                  <2> ansnf:	pop esi
  4817 00003965 8A06                <2> 	mov al, [esi]
  4818 00003967 8803                <2> 	mov [ebx], al
  4819 00003969 E9B2FFFFFF          <2> 	jmp svhere
  4820 0000396E 46                  <2> ansfnd:	inc esi
  4821 0000396F 81FE[9BCC0300]      <2> 	cmp esi, numbuf - 1
  4822 00003975 740A                <2> 	je fndans
  4823 00003977 8A06                <2> 	mov al, [esi]
  4824 00003979 3C00                <2> 	cmp al, 0
  4825 0000397B 74E7                <2> 	je ansnf
  4826 0000397D 3C30                <2> 	cmp al, '0'
  4827 0000397F 74ED                <2> 	je ansfnd
  4828                              <2> fndans:
  4829 00003981 C3                  <2> 	ret
  4830 00003982 30C0                <2> svdone:	xor al, al
  4831 00003984 8803                <2> 	mov [ebx], al
  4832 00003986 C3                  <2> 	ret
  4833                              <1> %include 'source/programs/_run.asm' ;./
  4834 00003987 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4835 0000398B FF2C2E2F00          <2> 	db 255,44,"./",0
  4836                              <2> rundiskprog:
  4837 00003990 8B3D[43300000]      <2> 	mov edi, [currentcommandloc]
  4838 00003996 81C702000000        <2> 	add edi, 2
  4839 0000399C BE00004000          <2> 	mov esi, 0x400000
  4840 000039A1 E84D2F0000          <2> 	call loadfile
  4841 000039A6 81FA94010000        <2> 	cmp edx, 404
  4842 000039AC 746A                <2> 	je noprogfound
  4843 000039AE BB00004000          <2> 	mov ebx, 0x400000
  4844 000039B3 A1[87390000]        <2> 	mov eax, [elfstart]
  4845 000039B8 3903                <2> 	cmp [ebx], eax
  4846 000039BA 0F8437000000        <2> 	je near runelf
  4847 000039C0 66813B4558          <2> 	cmp word [ebx], "EX"
  4848 000039C5 7577                <2> 	jne progbatchfound
  4849 000039C7 81C302000000        <2> 	add ebx, 2
  4850 000039CD 8B3D[43300000]      <2> 	mov edi, [currentcommandloc]
  4851 000039D3 81C702000000        <2> 	add edi, 2
  4852                              <2> findspaceprog:
  4853 000039D9 8A07                <2> 	mov al, [edi]
  4854 000039DB 47                  <2> 	inc edi
  4855 000039DC 3C20                <2> 	cmp al, " "
  4856 000039DE 75F9                <2> 	jne findspaceprog
  4857                              <2> findnonspaceprog:
  4858 000039E0 8A07                <2> 	mov al, [edi]
  4859 000039E2 47                  <2> 	inc edi
  4860 000039E3 3C20                <2> 	cmp al, " "
  4861 000039E5 74F9                <2> 	je findnonspaceprog
  4862 000039E7 4F                  <2> 	dec edi
  4863 000039E8 8925[08B20300]      <2> 	mov [previousstack], esp
  4864 000039EE FFD3                <2> 	call ebx
  4865 000039F0 8B25[08B20300]      <2> 	mov esp, [previousstack]
  4866 000039F6 C3                  <2> 	ret
  4867                              <2> runelf:
  4868 000039F7 8B3D[43300000]      <2> 	mov edi, [currentcommandloc]
  4869 000039FD 81C702000000        <2> 	add edi, 2
  4870 00003A03 81C380000000        <2> 	add ebx, 0x80
  4871 00003A09 8925[08B20300]      <2> 	mov [previousstack], esp
  4872 00003A0F FFD3                <2> 	call ebx
  4873 00003A11 8B25[08B20300]      <2> 	mov esp, [previousstack]
  4874 00003A17 C3                  <2> 	ret
  4875                              <2> noprogfound:
  4876 00003A18 BE[A3890000]        <2> 	mov esi, notfound1
  4877 00003A1D E843E3FFFF          <2> 	call print
  4878 00003A22 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  4879 00003A28 81C602000000        <2> 	add esi, 2
  4880 00003A2E E832E3FFFF          <2> 	call print
  4881 00003A33 BE[AB890000]        <2> 	mov esi, notfound2
  4882 00003A38 E828E3FFFF          <2> 	call print
  4883 00003A3D C3                  <2> 	ret
  4884                              <2> progbatchfound:
  4885 00003A3E BF00004000          <2> 		mov edi, 0x400000
  4886 00003A43 C605[82B40300]01    <2> 		mov byte [BATCHISON], 1
  4887                              <2> 	batchrunloop:
  4888 00003A4A E806F3FFFF          <2> 		call buftxtclear
  4889 00003A4F BE[88C80300]        <2> 		mov esi, buftxt
  4890 00003A54 8935[43300000]      <2> 		mov [currentcommandloc], esi
  4891                              <2> 	batchrunloop2:
  4892 00003A5A B10A                <2> 		mov cl, 10
  4893 00003A5C B50D                <2> 		mov ch, 13
  4894 00003A5E 380F                <2> 		cmp [edi], cl
  4895 00003A60 0F841C000000        <2> 		je near nxtbatchrunline
  4896 00003A66 382F                <2> 		cmp [edi], ch
  4897 00003A68 0F8414000000        <2> 		je near nxtbatchrunline
  4898 00003A6E 803F00              <2> 		cmp byte [edi], 0
  4899 00003A71 0F840B000000        <2> 		je near nxtbatchrunline
  4900 00003A77 8A07                <2> 		mov al, [edi]
  4901 00003A79 8806                <2> 		mov [esi], al
  4902 00003A7B 46                  <2> 		inc esi
  4903 00003A7C 47                  <2> 		inc edi
  4904 00003A7D E9D8FFFFFF          <2> 		jmp batchrunloop2
  4905                              <2> 	nxtbatchrunline:
  4906 00003A82 47                  <2> 		inc edi
  4907 00003A83 380F                <2> 		cmp [edi], cl
  4908 00003A85 74FB                <2> 		je nxtbatchrunline
  4909 00003A87 382F                <2> 		cmp [edi], ch
  4910 00003A89 74F7                <2> 		je nxtbatchrunline
  4911 00003A8B 893D[E93A0000]      <2> 		mov [batchedi], edi
  4912 00003A91 893D[7EB40300]      <2> 		mov [BATCHPOS], edi
  4913 00003A97 C60600              <2> 		mov byte [esi], 0
  4914 00003A9A BE[88C80300]        <2> 		mov esi, buftxt
  4915 00003A9F 803E00              <2> 		cmp byte [esi], 0
  4916 00003AA2 0F8439000000        <2> 		je near nobatchfoundrun
  4917 00003AA8 31DB                <2> 		xor ebx, ebx
  4918 00003AAA 8A1D[19B40300]      <2> 		mov bl, [IFON]
  4919 00003AB0 80FB00              <2> 		cmp bl, 0
  4920 00003AB3 0F8534000000        <2> 		jne near iftestbatch
  4921                              <2> 	doneiftest:
  4922 00003AB9 803D[C23B0000]00    <2> 		cmp byte [runnextline], 0
  4923 00003AC0 0F8405000000        <2> 		je near noruniftest
  4924 00003AC6 E89CF4FFFF          <2> 		call run
  4925                              <2> 	noruniftest:
  4926 00003ACB C605[C23B0000]01    <2> 		mov byte [runnextline], 1
  4927 00003AD2 8B3D[E93A0000]      <2> 		mov edi, [batchedi]
  4928 00003AD8 803F00              <2> 		cmp byte [edi], 0
  4929 00003ADB 0F8569FFFFFF        <2> 		jne near batchrunloop
  4930                              <2> 	nobatchfoundrun:
  4931 00003AE1 C605[82B40300]00    <2> 		mov byte [BATCHISON], 0
  4932 00003AE8 C3                  <2> 		ret
  4933                              <2> 	
  4934 00003AE9 00000000            <2> batchedi dd 0	
  4935                              <2> 	
  4936                              <2> 	iftestbatch:
  4937 00003AED BE[1AB40300]        <2> 		mov esi, IFTRUE
  4938 00003AF2 01DE                <2> 		add esi, ebx
  4939 00003AF4 803E00              <2> 		cmp byte [esi], 0
  4940 00003AF7 0F85BCFFFFFF        <2> 		jne near doneiftest
  4941 00003AFD 881D[C33B0000]      <2> 		mov [iffalsebuf], bl
  4942 00003B03 803D[83B40300]01    <2> 		cmp byte [LOOPON], 1
  4943 00003B0A 0F8513000000        <2> 		jne near fifindbatch
  4944 00003B10 E935FFFFFF          <2> 		jmp batchrunloop
  4945                              <2> 	elsetestbatch:
  4946 00003B15 C60601              <2> 		mov byte [esi], 1
  4947 00003B18 81C705000000        <2> 		add edi, 5
  4948 00003B1E E927FFFFFF          <2> 		jmp batchrunloop
  4949                              <2> 	fifindbatch:
  4950 00003B23 66B96966            <2> 		mov cx, "if"
  4951 00003B27 66B86669            <2> 		mov ax, "fi"
  4952 00003B2B 663907              <2> 		cmp [edi], ax
  4953 00003B2E 0F8424000000        <2> 		je near fifoundbatch
  4954 00003B34 66390F              <2> 		cmp [edi], cx
  4955 00003B37 0F8468000000        <2> 		je near iffoundbatch
  4956 00003B3D 803F00              <2> 		cmp byte [edi], 0
  4957 00003B40 0F8412000000        <2> 		je near fifoundbatch
  4958 00003B46 B8656C7365          <2> 		mov eax, "else"
  4959 00003B4B 3907                <2> 		cmp [edi], eax
  4960 00003B4D 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4961 00003B53 E973FFFFFF          <2> 		jmp noruniftest
  4962                              <2> 	fifoundbatch:
  4963 00003B58 81C702000000        <2> 		add edi, 2
  4964 00003B5E B00A                <2> 		mov al, 10
  4965 00003B60 3807                <2> 		cmp [edi], al
  4966 00003B62 0F840E000000        <2> 		je near goodfibatch
  4967 00003B68 803F00              <2> 		cmp byte [edi], 0
  4968 00003B6B 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4969 00003B71 E9ADFFFFFF          <2> 		jmp fifindbatch
  4970                              <2> 	goodfibatch:
  4971 00003B76 B001                <2> 		mov al, 1
  4972 00003B78 2805[19B40300]      <2> 		sub [IFON], al 
  4973 00003B7E A0[19B40300]        <2> 		mov al, [IFON]
  4974 00003B83 8A1D[C33B0000]      <2> 		mov bl, [iffalsebuf]
  4975 00003B89 38D8                <2> 		cmp al, bl
  4976 00003B8B 7796                <2> 		ja fifindbatch
  4977 00003B8D 8B35[43300000]      <2> 		mov esi, [currentcommandloc]
  4978 00003B93 81EF02000000        <2> 		sub edi, 2
  4979 00003B99 C605[C23B0000]00    <2> 		mov byte [runnextline], 0
  4980 00003BA0 E9A5FEFFFF          <2> 		jmp batchrunloop
  4981                              <2> 	iffoundbatch:
  4982 00003BA5 B020                <2> 		mov al, ' '
  4983 00003BA7 81C702000000        <2> 		add edi, 2
  4984 00003BAD 3807                <2> 		cmp [edi], al
  4985 00003BAF 0F856EFFFFFF        <2> 		jne near fifindbatch
  4986 00003BB5 B001                <2> 		mov al, 1
  4987 00003BB7 0005[19B40300]      <2> 		add [IFON], al
  4988 00003BBD E961FFFFFF          <2> 		jmp fifindbatch
  4989                              <2> 		
  4990                              <2> 		
  4991 00003BC2 01                  <2> runnextline db 1
  4992 00003BC3 00                  <2> iffalsebuf db 0
  4993 00003BC4 C3                  <2> notbatch: ret 
  4994                              <1> %ifdef network.included
  4995                              <1> 	%include 'source/programs/arp.asm'
  4996                              <1> %endif
  4997                              <1> %include 'source/programs/batch.asm'
  4998 00003BC5 FF2C626174636800    <2> db 255,44,"batch",0
  4999                              <2> 	batchst: 
  5000 00003BCD 8B3D[43300000]      <2> 		mov edi, [currentcommandloc]
  5001 00003BD3 81C706000000        <2> 		add edi, 6
  5002 00003BD9 803F00              <2> 		cmp byte [edi], 0
  5003 00003BDC 0F846D000000        <2> 		je near nonamefound
  5004 00003BE2 BE00004000          <2> 		mov esi, 0x400000
  5005 00003BE7 E8072D0000          <2> 		call loadfile
  5006 00003BEC 89D0                <2> 		mov eax, edx
  5007 00003BEE 3D94010000          <2> 		cmp eax, 404
  5008 00003BF3 7465                <2> 		je goodbatchname
  5009 00003BF5 BE[003C0000]        <2> 		mov esi, badbatchname
  5010 00003BFA E866E1FFFF          <2> 		call print
  5011 00003BFF C3                  <2> 		ret
  5012 00003C00 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  5013 00003C09 20616C726561647920- <2>
  5014 00003C12 657869737473210A00  <2>
  5015 00003C1B 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  5016 00003C24 746F20747970652061- <2>
  5017 00003C2D 206E616D6520616674- <2>
  5018 00003C36 65722074686520636F- <2>
  5019 00003C3F 6D6D616E642E0A00    <2>
  5020 00003C47 00000000            <2> 		esicache3 dd 0
  5021 00003C4B 00000000            <2> 		esicache2 dd 0
  5022                              <2> 	nonamefound:
  5023 00003C4F BE[1B3C0000]        <2> 		mov esi, namenotfoundbatch
  5024 00003C54 E80CE1FFFF          <2> 		call print
  5025 00003C59 C3                  <2> 		ret
  5026                              <2> 	goodbatchname:
  5027 00003C5A BE00004000          <2> 		mov esi, 0x400000
  5028                              <2> 	batchcreate:
  5029 00003C5F 8935[473C0000]      <2> 		mov [esicache3], esi
  5030 00003C65 BF00008000          <2> 		mov edi, 0x800000
  5031 00003C6A B00A                <2> 		mov al, 10
  5032 00003C6C B307                <2> 		mov bl, 7
  5033 00003C6E B404                <2> 		mov ah, 4
  5034 00003C70 CD30                <2> 		int 30h
  5035 00003C72 8935[4B3C0000]      <2> 		mov [esicache2], esi
  5036 00003C78 8A0E                <2> 		mov cl, [esi]
  5037 00003C7A 8B35[473C0000]      <2> 		mov esi, [esicache3]
  5038 00003C80 BB[B73C0000]        <2> 		mov ebx, exitword
  5039 00003C85 E8FEF3FFFF          <2> 		call cndtest
  5040 00003C8A 3C01                <2> 		cmp al, 1
  5041 00003C8C 7414                <2> 		je endbatchcreate
  5042 00003C8E 3C02                <2> 		cmp al, 2
  5043 00003C90 7410                <2> 		je endbatchcreate
  5044 00003C92 8B35[4B3C0000]      <2> 		mov esi, [esicache2]
  5045 00003C98 B00A                <2> 		mov al, 10
  5046 00003C9A 8806                <2> 		mov [esi], al
  5047 00003C9C 46                  <2> 		inc esi
  5048 00003C9D E9BDFFFFFF          <2> 		jmp batchcreate
  5049                              <2> 	endbatchcreate:
  5050 00003CA2 8B35[473C0000]      <2> 		mov esi, [esicache3]
  5051 00003CA8 31C0                <2> 		xor eax, eax
  5052 00003CAA 8806                <2> 		mov [esi], al
  5053 00003CAC BE00004000          <2> 		mov esi, 0x400000
  5054 00003CB1 E8AFE0FFFF          <2> 		call print
  5055 00003CB6 C3                  <2> 		ret
  5056                              <2> 	
  5057 00003CB7 5C7800              <2> 	exitword db "\x",0
  5058 00003CBA 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  5059 00003CC3 6F20657869742E0A00  <2>
  5060                              <1> %ifdef gui.background
  5061                              <1> 	%include 'source/programs/background.asm'
  5062 00003CCC FF2C6261636B67726F- <2> db 255,44,"background",0
  5063 00003CD5 756E6400            <2>
  5064 00003CD9 8B3D[43300000]      <2> 		mov edi, [currentcommandloc]
  5065 00003CDF 81C70B000000        <2> 		add edi, 11
  5066 00003CE5 BE00008000          <2> 		mov esi, 0x800000
  5067 00003CEA E8042C0000          <2> 		call loadfile
  5068 00003CEF 81FA94010000        <2> 		cmp edx, 404
  5069 00003CF5 0F84C9120000        <2> 		je near filenotfound
  5070 00003CFB BE00008000          <2> 		mov esi, 0x800000
  5071 00003D00 66813E424D          <2> 		cmp word [esi], "BM"
  5072 00003D05 7401                <2> 		je .bmpfound
  5073 00003D07 C3                  <2> 		ret
  5074                              <2> .bmpfound:
  5075 00003D08 8B3D[4D580000]      <2> 		mov edi, [physbaseptr]
  5076 00003D0E 57                  <2> 		push edi
  5077 00003D0F BE[9CCE0300]        <2> 		mov esi, backgroundbuffer
  5078 00003D14 8935[F8710000]      <2> 		mov [backgroundimage], esi
  5079 00003D1A 8935[4D580000]      <2> 		mov [physbaseptr], esi
  5080 00003D20 31C0                <2> 		xor eax, eax
  5081                              <2> .clearlp:
  5082 00003D22 8906                <2> 		mov [esi], eax
  5083 00003D24 81C604000000        <2> 		add esi, 4
  5084 00003D2A 81FE[9CE22B00]      <2> 		cmp esi, backgroundbufferend
  5085 00003D30 72F0                <2> 		jb .clearlp
  5086 00003D32 BE00008000          <2> 		mov esi, 0x800000
  5087 00003D37 31C9                <2> 		xor ecx, ecx
  5088 00003D39 31D2                <2> 		xor edx, edx
  5089 00003D3B 31DB                <2> 		xor ebx, ebx
  5090 00003D3D E89C2D0000          <2> 		call showbmp
  5091 00003D42 5F                  <2> 		pop edi
  5092 00003D43 893D[4D580000]      <2> 		mov [physbaseptr], edi
  5093 00003D49 803D[018A0000]00    <2> 		cmp byte [guion], 0
  5094 00003D50 740F                <2> 		je .noclear
  5095 00003D52 E840340000          <2> 		call guiclear
  5096 00003D57 E8DB300000          <2> 		call clearmousecursor
  5097 00003D5C E8C9340000          <2> 		call reloadallgraphics
  5098                              <2> .noclear:
  5099 00003D61 C3                  <2> 		ret
  5100                              <1> %endif
  5101                              <1> %include 'source/programs/beep.asm'
  5102 00003D62 FF2C6265657000      <2> 	db 255,44,"beep",0
  5103                              <2> beep:
  5104 00003D69 B8[8E3D0000]        <2> 	mov eax, beepstart
  5105 00003D6E A3[76020000]        <2> 	mov [soundpos], eax
  5106 00003D73 B8[923D0000]        <2> 	mov eax, beepend
  5107 00003D78 A3[7A020000]        <2> 	mov [soundendpos], eax
  5108 00003D7D C605[73020000]01    <2> 	mov byte [soundon], 1
  5109                              <2> waitforsoundendbeep:
  5110 00003D84 A0[73020000]        <2> 	mov al, [soundon]
  5111 00003D89 3C00                <2> 	cmp al, 0
  5112 00003D8B 75F7                <2> 	jne waitforsoundendbeep
  5113 00003D8D C3                  <2> 	ret
  5114                              <2> 	
  5115                              <2> beepstart:
  5116 00003D8E 3200D111            <2> 	dw 50, 4561
  5117                              <2> beepend:
  5118                              <1> %ifdef dos.compatible
  5119                              <1> %else
  5120                              <1> 	%include 'source/programs/boot.asm'
  5121 00003D92 FF2C626F6F7400      <2> db 255,44,"boot",0
  5122                              <2> quickboot:
  5123                              <2> 	;load and jump to the bootloader
  5124                              <2> 	; mov ecx, 1
  5125                              <2> 	; xor ebx, ebx
  5126                              <2> 	; mov esi, 0x400000
  5127                              <2> 	; call diskr
  5128                              <2> 	; mov ax, LINEAR_SEL
  5129                              <2> 	; mov fs, ax
  5130                              <2> 	; mov esi, 0x400000
  5131                              <2> 	; mov edi, 0x7C00
  5132                              <2> 	; xor ebx, ebx
  5133                              <2> ; .lp:
  5134                              <2> 	; mov ecx, [esi+ebx]
  5135                              <2> 	; mov [fs:edi+ebx], ecx
  5136                              <2> 	; add ebx, 4
  5137                              <2> 	; cmp ebx, 512
  5138                              <2> 	; jb .lp
  5139 00003D99 66BB[A93D]          <2> 	mov bx, bootload
  5140 00003D9D 66891D[020D0000]    <2> 	mov [realmodeptr], bx
  5141 00003DA4 E947CEFFFF          <2> 	jmp realmode
  5142                              <2> [BITS 16]
  5143                              <2> bootload:
  5144 00003DA9 B80300              <2> 	mov ax, 3
  5145 00003DAC 31DB                <2> 	xor bx, bx
  5146 00003DAE CD10                <2> 	int 10h
  5147 00003DB0 EA007C0000          <2> 	jmp 0:0x7C00
  5148                              <2> [BITS 32]
  5149                              <1> %endif
  5150                              <1> %include 'source/programs/cd.asm'
  5151 00003DB5 FF2C636400          <2> db 255,44,"cd",0
  5152                              <2> cd:
  5153 00003DBA 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  5154 00003DC0 81C603000000        <2> 	add esi, 3
  5155 00003DC6 8B3D[10B20300]      <2> 	mov edi, [currentfolderloc]
  5156 00003DCC 89F9                <2> 	mov ecx, edi
  5157 00003DCE E8B9F4FFFF          <2> 	call showhex
  5158 00003DD3 893D[0CB20300]      <2> 	mov [lastfolderloc], edi
  5159 00003DD9 81C7[14B20300]      <2> 	add edi, currentfolder
  5160 00003DDF 4F                  <2> 	dec edi
  5161 00003DE0 803E2F              <2> 	cmp byte [esi], '/'
  5162 00003DE3 751C                <2> 	jne .noroot
  5163 00003DE5 31FF                <2> 	xor edi, edi
  5164 00003DE7 893D[10B20300]      <2> 	mov [currentfolderloc], edi
  5165 00003DED 893D[0CB20300]      <2> 	mov [lastfolderloc], edi
  5166 00003DF3 81C7[14B20300]      <2> 	add edi, currentfolder
  5167 00003DF9 4F                  <2> 	dec edi
  5168 00003DFA 46                  <2> 	inc esi
  5169 00003DFB 803E00              <2> 	cmp byte [esi], 0
  5170 00003DFE 7401                <2> 	je .noroot
  5171 00003E00 4E                  <2> 	dec esi
  5172                              <2> .noroot:
  5173 00003E01 66813E2E2E          <2> 	cmp word [esi], ".."
  5174 00003E06 742A                <2> 	je .moveup
  5175 00003E08 47                  <2> 	inc edi
  5176                              <2> .movedown:
  5177 00003E09 8A06                <2> 	mov al, [esi]
  5178 00003E0B 8807                <2> 	mov [edi], al
  5179 00003E0D 47                  <2> 	inc edi
  5180 00003E0E 46                  <2> 	inc esi
  5181 00003E0F 3C00                <2> 	cmp al, 0
  5182 00003E11 740A                <2> 	je .donecd
  5183 00003E13 81FF[14B40300]      <2> 	cmp edi, currentfolderend
  5184 00003E19 72EE                <2> 	jb .movedown
  5185 00003E1B 30C0                <2> 	xor al, al
  5186                              <2> .donecd:
  5187 00003E1D 4F                  <2> 	dec edi
  5188 00003E1E C6072F              <2> 	mov byte [edi], '/'
  5189 00003E21 47                  <2> 	inc edi
  5190 00003E22 C60700              <2> 	mov byte [edi], 0
  5191 00003E25 81EF[14B20300]      <2> 	sub edi, currentfolder
  5192 00003E2B 893D[10B20300]      <2> 	mov [currentfolderloc], edi
  5193 00003E31 C3                  <2> 	ret
  5194                              <2> .moveup:
  5195 00003E32 31C0                <2> 	xor eax, eax
  5196 00003E34 A3[0CB20300]        <2> 	mov [lastfolderloc], eax
  5197                              <2> .moveuploop:
  5198 00003E39 4F                  <2> 	dec edi
  5199 00003E3A 8A07                <2> 	mov al, [edi]
  5200 00003E3C 81FF[14B20300]      <2> 	cmp edi, currentfolder
  5201 00003E42 763B                <2> 	jbe .moveupover
  5202 00003E44 3C2F                <2> 	cmp al, '/'
  5203 00003E46 75F1                <2> 	jne .moveuploop
  5204 00003E48 C6072F              <2> 	mov byte [edi], '/'
  5205 00003E4B 47                  <2> 	inc edi
  5206 00003E4C C60700              <2> 	mov byte [edi], 0
  5207 00003E4F 81EF[14B20300]      <2> 	sub edi, currentfolder
  5208 00003E55 893D[10B20300]      <2> 	mov [currentfolderloc], edi
  5209 00003E5B 81C7[14B20300]      <2> 	add edi, currentfolder
  5210 00003E61 4F                  <2> 	dec edi
  5211                              <2> .lastfolder:
  5212 00003E62 4F                  <2> 	dec edi
  5213 00003E63 8A07                <2> 	mov al, [edi]
  5214 00003E65 81FF[14B20300]      <2> 	cmp edi, currentfolder
  5215 00003E6B 7604                <2> 	jbe .donemoveup
  5216 00003E6D 3C2F                <2> 	cmp al, '/'
  5217 00003E6F 75F1                <2> 	jne .lastfolder
  5218                              <2> .donemoveup:
  5219 00003E71 47                  <2> 	inc edi
  5220 00003E72 81EF[14B20300]      <2> 	sub edi, currentfolder
  5221 00003E78 893D[0CB20300]      <2> 	mov [lastfolderloc], edi
  5222 00003E7E C3                  <2> 	ret
  5223                              <2> .moveupover:
  5224 00003E7F BF[14B20300]        <2> 	mov edi, currentfolder
  5225 00003E84 C6072F              <2> 	mov byte [edi], '/'
  5226 00003E87 47                  <2> 	inc edi
  5227 00003E88 C60700              <2> 	mov byte [edi], 0
  5228 00003E8B 31C0                <2> 	xor eax, eax
  5229 00003E8D A3[0CB20300]        <2> 	mov [lastfolderloc], eax
  5230 00003E92 40                  <2> 	inc eax
  5231 00003E93 A3[10B20300]        <2> 	mov [currentfolderloc], eax
  5232 00003E98 C3                  <2> 	ret
  5233                              <1> %include 'source/programs/charmap.asm'
  5234 00003E99 00                  <2> charmapnum db 0
  5235 00003E9A FF2C636861726D6170- <2> db 255,44,"charmap",0
  5236 00003EA3 00                  <2>
  5237 00003EA4 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  5238 00003EAA 81C608000000        <2> 	add esi, 8
  5239 00003EB0 803E00              <2> 	cmp byte [esi], 0
  5240 00003EB3 7412                <2> 	je .nospecific
  5241 00003EB5 E81FF5FFFF          <2> 	call cnvrthextxt
  5242 00003EBA 6689C8              <2> 	mov ax, cx
  5243 00003EBD 66BB0700            <2> 	mov bx, 7
  5244 00003EC1 E84EE5FFFF          <2> 	call prcharq
  5245 00003EC6 C3                  <2> 	ret
  5246                              <2> .nospecific:
  5247 00003EC7 66BB0700            <2> 	mov bx, 7
  5248 00003ECB 66B82000            <2> 	mov ax, " "
  5249 00003ECF C605[993E0000]00    <2> 	mov byte [charmapnum], 0
  5250 00003ED6 E839E5FFFF          <2> 	call prcharq
  5251 00003EDB E834E5FFFF          <2> 	call prcharq
  5252 00003EE0 E82FE5FFFF          <2> 	call prcharq
  5253 00003EE5 E82AE5FFFF          <2> 	call prcharq
  5254 00003EEA 66B83000            <2> 	mov ax, "0"
  5255                              <2> charmapnumprnt:
  5256 00003EEE E821E5FFFF          <2> 	call prcharq
  5257 00003EF3 6640                <2> 	inc ax
  5258 00003EF5 6650                <2> 	push ax
  5259 00003EF7 66B82000            <2> 	mov ax, " "
  5260 00003EFB E814E5FFFF          <2> 	call prcharq
  5261 00003F00 6658                <2> 	pop ax
  5262 00003F02 663D3900            <2> 	cmp ax, "9"
  5263 00003F06 76E6                <2> 	jbe charmapnumprnt
  5264 00003F08 66B84100            <2> 	mov ax, "A"
  5265                              <2> charmapnumprnt2:
  5266 00003F0C E803E5FFFF          <2> 	call prcharq
  5267 00003F11 6640                <2> 	inc ax
  5268 00003F13 6650                <2> 	push ax
  5269 00003F15 66B82000            <2> 	mov ax, " "
  5270 00003F19 E8F6E4FFFF          <2> 	call prcharq
  5271 00003F1E 6658                <2> 	pop ax
  5272 00003F20 663D4700            <2> 	cmp ax, "G"
  5273 00003F24 72E6                <2> 	jb charmapnumprnt2
  5274                              <2> 	
  5275 00003F26 BE[DC890000]        <2> 	mov esi, line
  5276 00003F2B E811DEFFFF          <2> 	call printquiet
  5277 00003F30 6631C0              <2> 	xor ax, ax
  5278 00003F33 6689C1              <2> 	mov cx, ax
  5279 00003F36 E83DF3FFFF          <2> 	call showhexsmall
  5280 00003F3B E925000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5281                              <2> charmapcopy:
  5282 00003F40 6640                <2> 	inc ax
  5283 00003F42 663D0800            <2> 	cmp ax, 8
  5284 00003F46 741D                <2> 	je charmapnocopy
  5285 00003F48 663D0900            <2> 	cmp ax, 9
  5286 00003F4C 7417                <2> 	je charmapnocopy
  5287 00003F4E 663D0A00            <2> 	cmp ax, 10
  5288 00003F52 7411                <2> 	je charmapnocopy
  5289 00003F54 663D0D00            <2> 	cmp ax, 13
  5290 00003F58 740B                <2> 	je charmapnocopy
  5291 00003F5A 663D0001            <2> 	cmp ax, 256
  5292 00003F5E 744D                <2> 	je nomorecharmap
  5293 00003F60 E904000000          <2> 	jmp okchar
  5294                              <2> charmapnocopy:
  5295 00003F65 66B82000            <2> 	mov ax, " "
  5296                              <2> okchar:
  5297 00003F69 6650                <2> 	push ax
  5298 00003F6B E8A4E4FFFF          <2> 	call prcharq
  5299 00003F70 66B82000            <2> 	mov ax, " "
  5300 00003F74 E89BE4FFFF          <2> 	call prcharq
  5301 00003F79 6658                <2> 	pop ax
  5302                              <2> charmapcopycheck:
  5303 00003F7B FE05[993E0000]      <2> 	inc byte [charmapnum]
  5304 00003F81 803D[993E0000]10    <2> 	cmp byte [charmapnum], 16
  5305 00003F88 72B6                <2> 	jb charmapcopy
  5306 00003F8A 6650                <2> 	push ax
  5307 00003F8C BE[DC890000]        <2> 	mov esi, line
  5308 00003F91 E8ABDDFFFF          <2> 	call printquiet
  5309 00003F96 6658                <2> 	pop ax
  5310 00003F98 88C1                <2> 	mov cl, al
  5311 00003F9A FEC1                <2> 	inc cl
  5312 00003F9C E8D7F2FFFF          <2> 	call showhexsmall
  5313 00003FA1 C605[993E0000]00    <2> 	mov byte [charmapnum], 0
  5314 00003FA8 E993FFFFFF          <2> 	jmp charmapcopy
  5315                              <2> nomorecharmap:
  5316 00003FAD C3                  <2> 	ret
  5317                              <1> %ifdef gui.included
  5318                              <1> 	%include 'source/programs/circle.asm'
  5319 00003FAE FF2C636972636C6500  <2> db 255,44,"circle",0
  5320                              <2> circle:
  5321 00003FB7 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  5322 00003FBD 81C607000000        <2> 	add esi, 7
  5323 00003FC3 66B91000            <2> 	mov cx, 16
  5324 00003FC7 30C0                <2> 	xor al, al
  5325 00003FC9 3806                <2> 	cmp [esi], al
  5326 00003FCB 7405                <2> 	je .nocmdline
  5327 00003FCD E853F4FFFF          <2> 	call cnvrttxt
  5328                              <2> .nocmdline:
  5329 00003FD2 E80A0B0000          <2> 	call linetester.stime
  5330 00003FD7 E857000000          <2> 	call fcircle.nocmdline
  5331 00003FDC E8180B0000          <2> 	call linetester.etime
  5332 00003FE1 53                  <2> 	push ebx
  5333 00003FE2 57                  <2> 	push edi
  5334 00003FE3 E899E3FFFF          <2> 	call getchar
  5335 00003FE8 59                  <2> 	pop ecx
  5336 00003FE9 E859F3FFFF          <2> 	call showdec
  5337 00003FEE BE[874B0000]        <2> 	mov esi, linetester.msgcircle
  5338 00003FF3 E849DDFFFF          <2> 	call printquiet
  5339 00003FF8 59                  <2> 	pop ecx
  5340 00003FF9 E849F3FFFF          <2> 	call showdec
  5341 00003FFE BE[9E4B0000]        <2> 	mov esi, linetester.msgtime
  5342 00004003 E839DDFFFF          <2> 	call printquiet
  5343 00004008 E81D320000          <2> 	call reloadallgraphics
  5344 0000400D C3                  <2> 	ret
  5345                              <2> 	
  5346 0000400E FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5347 00004017 00                  <2>
  5348                              <2> fcircle:	
  5349 00004018 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  5350 0000401E 81C608000000        <2> 	add esi, 8
  5351 00004024 66B91000            <2> 	mov cx, 16
  5352 00004028 30C0                <2> 	xor al, al
  5353 0000402A 3806                <2> 	cmp [esi], al
  5354 0000402C 7405                <2> 	je .nocmdline
  5355 0000402E E8F2F3FFFF          <2> 	call cnvrttxt
  5356                              <2> .nocmdline:
  5357 00004033 6689C8              <2> 	mov ax, cx
  5358 00004036 66D1E1              <2> 	shl cx, 1
  5359 00004039 6689CA              <2> 	mov dx, cx
  5360 0000403C 663B15[37580000]    <2> 	cmp dx, [resolutionx]
  5361 00004043 731B                <2> 	jae .done
  5362 00004045 663B0D[39580000]    <2> 	cmp cx, [resolutiony]
  5363 0000404C 7312                <2> 	jae .done
  5364 0000404E 668B35[71020000]    <2> 	mov si, [timenanoseconds + 2]
  5365 00004055 31FF                <2> 	xor edi, edi
  5366 00004057 803D[018A0000]01    <2> 	cmp byte [guion], 1
  5367 0000405E 7401                <2> 	je .lp
  5368 00004060 C3                  <2> .done ret
  5369                              <2> .lp:
  5370 00004061 6629C2              <2> 	sub dx, ax
  5371 00004064 6629C1              <2> 	sub cx, ax
  5372 00004067 60                  <2> 	pusha
  5373 00004068 E8552C0000          <2> 	call fillcircle
  5374 0000406D 61                  <2> 	popa
  5375 0000406E 47                  <2> 	inc edi
  5376 0000406F 660335[6F020000]    <2> 	add si, [timenanoseconds]
  5377 00004076 6601C2              <2> 	add dx, ax
  5378 00004079 6601C2              <2> 	add dx, ax
  5379 0000407C 6601C2              <2> 	add dx, ax
  5380 0000407F 6601C1              <2> 	add cx, ax
  5381 00004082 663B15[37580000]    <2> 	cmp dx, [resolutionx]
  5382 00004089 72D6                <2> 	jb .lp
  5383 0000408B 6689C2              <2> 	mov dx, ax
  5384 0000408E 6601C2              <2> 	add dx, ax
  5385 00004091 6601C1              <2> 	add cx, ax
  5386 00004094 6601C1              <2> 	add cx, ax
  5387 00004097 663B0D[39580000]    <2> 	cmp cx, [resolutiony]
  5388 0000409E 72C1                <2> 	jb .lp
  5389 000040A0 C3                  <2> 	ret
  5390                              <1> %endif
  5391                              <1> %include 'source/programs/clear.asm'
  5392 000040A1 FF2C636C65617200    <2> db 255,44,"clear",0
  5393 000040A9 E86CDDFFFF          <2> 		call clear
  5394 000040AE C3                  <2> 		ret 
  5395                              <1> %include 'source/programs/cpuid.asm'
  5396 000040AF FF2C637075696400    <2> db 255,44,"cpuid",0
  5397 000040B7 31C0                <2> 	xor eax, eax
  5398 000040B9 0FA2                <2> 	cpuid
  5399 000040BB 891D[0C410000]      <2> 	mov [cpuidbuf], ebx
  5400 000040C1 8915[10410000]      <2> 	mov [cpuidbuf + 4], edx
  5401 000040C7 890D[14410000]      <2> 	mov [cpuidbuf + 8], ecx
  5402 000040CD BE[0C410000]        <2> 	mov esi, cpuidbuf
  5403 000040D2 E88EDCFFFF          <2> 	call print
  5404 000040D7 BE[DC890000]        <2> 	mov esi, line
  5405 000040DC E884DCFFFF          <2> 	call print
  5406 000040E1 B801000000          <2> 	mov eax, 1
  5407 000040E6 0FA2                <2> 	cpuid
  5408 000040E8 89C1                <2> 	mov ecx, eax
  5409 000040EA C605[77320000]02    <2> 	mov byte [firsthexshown], 2
  5410 000040F1 E896F1FFFF          <2> 	call showhex
  5411 000040F6 B808000080          <2> 	mov eax, 0x80000008
  5412 000040FB 0FA2                <2> 	cpuid
  5413 000040FD 89C1                <2> 	mov ecx, eax
  5414 000040FF C605[77320000]02    <2> 	mov byte [firsthexshown], 2
  5415 00004106 E881F1FFFF          <2> 	call showhex
  5416 0000410B C3                  <2> 	ret
  5417                              <2> 	
  5418 0000410C 00<rept>            <2> cpuidbuf times 13 db 0
  5419                              <2> cpuidvendorend:
  5420                              <1> %include 'source/programs/date.asm'
  5421 00004119 082E30303030303030- <2> timenscache db 8,".000000000"
  5422 00004122 3030                <2>
  5423 00004124 200A00              <2> timenscacheend: db " ",10,0
  5424 00004127 00                  <2> istimeset db 0
  5425 00004128 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5426 00004131 2063757272656E7420- <2>
  5427 0000413A 554E49582074696D65- <2>
  5428 00004143 3A0A00              <2>
  5429 00004146 00<rept>            <2> timeinputbuffer times 12 db 0
  5430 00004152 00                  <2> timeinputbend: db 0
  5431                              <2> 
  5432 00004153 FF2C6461746500      <2> db 255,44,"date",0
  5433                              <2> 	;cmp byte [istimeset], 0
  5434                              <2> 	;jne timeisset
  5435 0000415A E880000000          <2> 	call time
  5436 0000415F E828020000          <2> 	call timeconvert	
  5437                              <2> 	; mov esi, settimemsg
  5438                              <2> 	; call print
  5439                              <2> 	; mov esi, timeinputbuffer
  5440                              <2> 	; mov edi, timeinputbend
  5441                              <2> 	; call readline
  5442                              <2> 	; mov esi, timeinputbuffer
  5443                              <2> 	; xor edi, edi
  5444                              <2> 	; call cnvrttxt
  5445 00004164 890D[6B020000]      <2> 	mov [timeseconds], ecx
  5446                              <2> 	;xor ecx, ecx
  5447                              <2> 	;mov [timenanoseconds], ecx
  5448 0000416A C605[27410000]01    <2> 	mov byte [istimeset], 1
  5449                              <2> timeisset:
  5450 00004171 8B0D[6B020000]      <2> 	mov ecx, [timeseconds]
  5451 00004177 E8CBF1FFFF          <2> 	call showdec
  5452                              <2> 	
  5453 0000417C 8B0D[6F020000]      <2> 	mov ecx, [timenanoseconds]
  5454 00004182 BE[19410000]        <2> 	mov esi, timenscache
  5455 00004187 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5456 0000418E C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5457 00004195 C6460A30            <2> 	mov byte [esi + 10], "0"
  5458 00004199 BE[24410000]        <2> 	mov esi, timenscacheend
  5459 0000419E E881EFFFFF          <2> 	call convert
  5460 000041A3 BE[19410000]        <2> 	mov esi, timenscache
  5461 000041A8 E894DBFFFF          <2> 	call printquiet
  5462                              <2> 	
  5463 000041AD E82D000000          <2> 	call time
  5464 000041B2 BE[FA440000]        <2> 	mov esi, timeshow
  5465 000041B7 E885DBFFFF          <2> 	call printquiet
  5466 000041BC BE[DC890000]        <2> 	mov esi, line
  5467 000041C1 E87BDBFFFF          <2> 	call printquiet
  5468 000041C6 BE[03450000]        <2> 	mov esi, dateshow
  5469 000041CB E871DBFFFF          <2> 	call printquiet
  5470 000041D0 BE[DC890000]        <2> 	mov esi, line
  5471 000041D5 E867DBFFFF          <2> 	call printquiet
  5472 000041DA E9BE000000          <2> 	jmp findday
  5473                              <2> time:
  5474 000041DF E851010000          <2> 	call tstackput1
  5475 000041E4 B00A                <2> 	mov al,10			;Get RTC register A
  5476 000041E6 E87B010000          <2> 	call tget1
  5477 000041EB A880                <2> 	test al,0x80			;Is update in progress?
  5478 000041ED 75F0                <2> 	jne time				; yes, wait
  5479                              <2> 
  5480 000041EF B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5481 000041F1 E870010000          <2> 	call tget1
  5482 000041F6 A2[F1440000]        <2> 	mov [RTCtimeSecond],al
  5483                              <2> 
  5484 000041FB B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5485 000041FD E864010000          <2> 	call tget1
  5486 00004202 A2[F2440000]        <2> 	mov [RTCtimeMinute],al
  5487                              <2> 
  5488 00004207 B004                <2> 	mov al,0x04			;Get hours (see notes)
  5489 00004209 E858010000          <2> 	call tget1
  5490 0000420E A2[F3440000]        <2> 	mov [RTCtimeHour],al
  5491                              <2> 
  5492 00004213 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5493 00004215 E84C010000          <2> 	call tget1
  5494 0000421A A2[F4440000]        <2> 	mov [RTCtimeDay],al
  5495                              <2> 
  5496 0000421F B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5497 00004221 E840010000          <2> 	call tget1
  5498 00004226 241F                <2> 	and al, 11111b
  5499 00004228 A2[F5440000]        <2> 	mov [RTCtimeMonth],al
  5500                              <2> 
  5501 0000422D B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5502 0000422F E832010000          <2> 	call tget1
  5503 00004234 A2[F6440000]        <2> 	mov [RTCtimeYear],al
  5504                              <2> 	
  5505 00004239 BE[FA440000]        <2> 	mov esi, timeshow
  5506 0000423E 8A2D[F3440000]      <2> 	mov ch, [RTCtimeHour]
  5507 00004244 E828010000          <2> 	call tput1
  5508 00004249 8A2D[F2440000]      <2> 	mov ch, [RTCtimeMinute]
  5509 0000424F E81D010000          <2> 	call tput1
  5510 00004254 8A2D[F1440000]      <2> 	mov ch, [RTCtimeSecond]
  5511 0000425A E812010000          <2> 	call tput1
  5512 0000425F BE[03450000]        <2> 	mov esi, dateshow
  5513 00004264 8A2D[F5440000]      <2> 	mov ch, [RTCtimeMonth]
  5514 0000426A E802010000          <2> 	call tput1
  5515 0000426F 8A2D[F4440000]      <2> 	mov ch, [RTCtimeDay]
  5516 00004275 E8F7000000          <2> 	call tput1
  5517 0000427A B520                <2> 	mov ch, 0x20
  5518 0000427C E8F0000000          <2> 	call tput1
  5519 00004281 4E                  <2> 	dec esi
  5520 00004282 8A2D[F6440000]      <2> 	mov ch, [RTCtimeYear]
  5521 00004288 E8E4000000          <2> 	call tput1
  5522 0000428D E8BD000000          <2> 	call tstackget1
  5523 00004292 C3                  <2> 	ret
  5524 00004293 BE[FA440000]        <2> 	mov esi, timeshow
  5525 00004298 E8C8DAFFFF          <2> 	call print
  5526                              <2> ;get day of week
  5527                              <2> ;add these:
  5528                              <2> ;century value
  5529                              <2> ;last 2 digits of year
  5530                              <2> ;last 2 digits of year right shifted twice
  5531                              <2> ;month table value
  5532                              <2> ;day of the month
  5533                              <2> ;divide these by 7
  5534                              <2> ;the remainder is the day
  5535                              <2> findday:
  5536 0000429D 31C0                <2> 	xor eax, eax
  5537                              <2> ;first convert the values from BCD to hex
  5538 0000429F A0[F4440000]        <2> 	mov al, [RTCtimeDay]
  5539 000042A4 E873000000          <2> 	call converttohex
  5540 000042A9 8825[F7440000]      <2> 	mov [dayhex], ah
  5541 000042AF A0[F5440000]        <2> 	mov al, [RTCtimeMonth]
  5542 000042B4 E863000000          <2> 	call converttohex
  5543 000042B9 8825[F8440000]      <2> 	mov [monthhex], ah
  5544 000042BF A0[F6440000]        <2> 	mov al, [RTCtimeYear]
  5545 000042C4 E853000000          <2> 	call converttohex
  5546 000042C9 8825[F9440000]      <2> 	mov [yearhex], ah
  5547 000042CF 31C0                <2> 	xor eax, eax
  5548 000042D1 A0[F9440000]        <2> 	mov al, [yearhex]
  5549 000042D6 C0E802              <2> 	shr al, 2
  5550 000042D9 0205[F9440000]      <2> 	add al, [yearhex]
  5551 000042DF 0506000000          <2> 	add eax, 6
  5552 000042E4 31DB                <2> 	xor ebx, ebx
  5553 000042E6 8A1D[F8440000]      <2> 	mov bl, [monthhex]
  5554 000042EC FECB                <2> 	dec bl
  5555 000042EE 81C3[18450000]      <2> 	add ebx, month
  5556 000042F4 31C9                <2> 	xor ecx, ecx
  5557 000042F6 8A0B                <2> 	mov cl, [ebx]
  5558 000042F8 01C8                <2> 	add eax, ecx
  5559 000042FA 8A0D[F7440000]      <2> 	mov cl, [dayhex]
  5560 00004300 01C8                <2> 	add eax, ecx
  5561 00004302 66BB0700            <2> 	mov bx, 7
  5562 00004306 31D2                <2> 	xor edx, edx
  5563 00004308 66F7F3              <2> 	div bx
  5564 0000430B C1E202              <2> 	shl edx, 2
  5565 0000430E 81C2[24450000]      <2> 	add edx, day
  5566 00004314 8B32                <2> 	mov esi, [edx]
  5567 00004316 E84ADAFFFF          <2> 	call print
  5568 0000431B C3                  <2> 	ret
  5569                              <2> 	
  5570                              <2> converttohex:
  5571 0000431C 88C4                <2> 	mov ah, al
  5572 0000431E C0E804              <2> 	shr al, 4
  5573 00004321 C0E404              <2> 	shl ah, 4
  5574 00004324 C0EC04              <2> 	shr ah, 4
  5575 00004327 3C00                <2> 	cmp al, 0
  5576 00004329 7409                <2> 	je noconverttohex
  5577                              <2> converttohexlp:
  5578 0000432B 80C40A              <2> 	add ah, 10
  5579 0000432E FEC8                <2> 	dec al
  5580 00004330 3C00                <2> 	cmp al, 0
  5581 00004332 75F7                <2> 	jne converttohexlp
  5582                              <2> noconverttohex:
  5583 00004334 C3                  <2> 	ret
  5584                              <2> 	
  5585                              <2> tstackput1:
  5586 00004335 8935[ED440000]      <2> 	mov [tstack + 20], esi
  5587 0000433B BE[D9440000]        <2> 	mov esi, tstack
  5588 00004340 8906                <2> 	mov [esi], eax
  5589 00004342 895E04              <2> 	mov [esi + 4], ebx
  5590 00004345 894E08              <2> 	mov [esi + 8], ecx
  5591 00004348 89560C              <2> 	mov [esi + 12], edx
  5592 0000434B 897E10              <2> 	mov [esi + 16], edi
  5593 0000434E C3                  <2> 	ret
  5594                              <2> 	
  5595                              <2> tstackget1:
  5596 0000434F BE[D9440000]        <2> 	mov esi, tstack
  5597 00004354 8B06                <2> 	mov eax, [esi]
  5598 00004356 8B5E04              <2> 	mov ebx, [esi + 4]
  5599 00004359 8B4E08              <2> 	mov ecx, [esi + 8]
  5600 0000435C 8B560C              <2> 	mov edx, [esi + 12]
  5601 0000435F 8B7E10              <2> 	mov edi, [esi + 16]
  5602 00004362 8B7614              <2> 	mov esi, [esi + 20]
  5603 00004365 C3                  <2> 	ret
  5604                              <2> 	
  5605                              <2> tget1:
  5606 00004366 66BA7000            <2> 	mov dx, 0x70
  5607 0000436A EE                  <2> 	out dx, al
  5608 0000436B 6642                <2> 	inc dx
  5609 0000436D EC                  <2> 	in al, dx
  5610 0000436E 664A                <2> 	dec dx
  5611 00004370 C3                  <2> 	ret
  5612                              <2> 	
  5613                              <2> tput1:
  5614 00004371 66C1E904            <2> 	shr cx, 4
  5615 00004375 B030                <2> 	mov al, 48
  5616 00004377 00E8                <2> 	add al, ch
  5617 00004379 8806                <2> 	mov [esi], al
  5618 0000437B 46                  <2> 	inc esi
  5619 0000437C B030                <2> 	mov al, 48
  5620 0000437E C0E904              <2> 	shr cl, 4
  5621 00004381 00C8                <2> 	add al, cl
  5622 00004383 8806                <2> 	mov [esi], al
  5623 00004385 81C602000000        <2> 	add esi, 2
  5624 0000438B C3                  <2> 	ret
  5625                              <2> 	
  5626                              <2> timeconvert: ;return time in the RTCtime stuff in ecx
  5627 0000438C 31DB                <2> 	xor ebx, ebx
  5628 0000438E 31C9                <2> 	xor ecx, ecx
  5629 00004390 31FF                <2> 	xor edi, edi
  5630 00004392 31F6                <2> 	xor esi, esi
  5631                              <2> 	
  5632 00004394 A0[F1440000]        <2> 	mov al, [RTCtimeSecond]
  5633 00004399 E87EFFFFFF          <2> 	call converttohex
  5634 0000439E 88E1                <2> 	mov cl, ah
  5635                              <2> 	
  5636 000043A0 A0[F2440000]        <2> 	mov al, [RTCtimeMinute]
  5637 000043A5 E872FFFFFF          <2> 	call converttohex
  5638 000043AA 88E3                <2> 	mov bl, ah
  5639 000043AC B83C000000          <2> 	mov eax, 60
  5640 000043B1 31D2                <2> 	xor edx, edx
  5641 000043B3 F7E3                <2> 	mul ebx
  5642 000043B5 01C1                <2> 	add ecx, eax
  5643                              <2> 	
  5644 000043B7 A0[F3440000]        <2> 	mov al, [RTCtimeHour]
  5645 000043BC E85BFFFFFF          <2> 	call converttohex
  5646 000043C1 88E3                <2> 	mov bl, ah
  5647 000043C3 B8100E0000          <2> 	mov eax, 3600
  5648 000043C8 31D2                <2> 	xor edx, edx
  5649 000043CA F7E3                <2> 	mul ebx
  5650 000043CC 01C1                <2> 	add ecx, eax
  5651                              <2> 		
  5652 000043CE 31C0                <2> 	xor eax, eax
  5653 000043D0 A0[F6440000]        <2> 	mov al, [RTCtimeYear]
  5654 000043D5 E842FFFFFF          <2> 	call converttohex
  5655 000043DA 6689C6              <2> 	mov si, ax
  5656 000043DD 66C1EE08            <2> 	shr si, 8
  5657 000043E1 6681FE4600          <2> 	cmp si, 70
  5658 000043E6 7705                <2> 	ja .no100
  5659 000043E8 6681C66400          <2> 	add si, 100
  5660                              <2> .no100:
  5661 000043ED 6681C66C07          <2> 	add si, 1900
  5662                              <2> 	
  5663 000043F2 BB[CB440000]        <2> 	mov ebx, .month
  5664 000043F7 A0[F4440000]        <2> 	mov al, [RTCtimeDay]
  5665 000043FC E81BFFFFFF          <2> 	call converttohex
  5666 00004401 88E0                <2> 	mov al, ah
  5667 00004403 FEC8                <2> 	dec al
  5668 00004405 31D2                <2> 	xor edx, edx
  5669 00004407 88C2                <2> 	mov dl, al
  5670 00004409 A0[F5440000]        <2> 	mov al, [RTCtimeMonth]
  5671 0000440E E809FFFFFF          <2> 	call converttohex
  5672 00004413 88D0                <2> 	mov al, dl
  5673 00004415 88E2                <2> 	mov dl, ah
  5674 00004417 30E4                <2> 	xor ah, ah
  5675 00004419 6689D5              <2> 	mov bp, dx
  5676                              <2> 	
  5677 0000441C 6689F7              <2> 	mov di, si
  5678 0000441F 66C1EF02            <2> 	shr di, 2
  5679 00004423 66C1E702            <2> 	shl di, 2
  5680 00004427 C605[CC440000]1C    <2> 	mov byte [.month + 1], 28
  5681 0000442E 6639F7              <2> 	cmp di, si
  5682 00004431 7506                <2> 	jne .nofebmod
  5683 00004433 FE05[CC440000]      <2> 	inc byte [.month + 1]
  5684                              <2> .nofebmod:
  5685 00004439 664D                <2> 	dec bp
  5686 0000443B 6681FD0000          <2> 	cmp bp, 0
  5687 00004440 740A                <2> 	je .ylp
  5688 00004442 8A13                <2> 	mov dl, [ebx]
  5689 00004444 01D0                <2> 	add eax, edx
  5690 00004446 43                  <2> 	inc ebx
  5691 00004447 E9EDFFFFFF          <2> 	jmp .nofebmod
  5692                              <2> 	
  5693                              <2> .ylp:
  5694 0000444C 6689F7              <2> 	mov di, si
  5695 0000444F 66C1EF02            <2> 	shr di, 2
  5696 00004453 66C1E702            <2> 	shl di, 2
  5697 00004457 81C18033E101        <2> 	add ecx, 31536000
  5698 0000445D 6639F7              <2> 	cmp di, si
  5699 00004460 7506                <2> 	jne .noymod
  5700 00004462 81C180510100        <2> 	add ecx, 86400
  5701                              <2> .noymod:
  5702 00004468 664E                <2> 	dec si
  5703 0000446A 6681FEB207          <2> 	cmp si, 1970
  5704 0000446F 77DB                <2> 	ja .ylp
  5705                              <2> 	
  5706 00004471 BB80510100          <2> 	mov ebx, 86400
  5707 00004476 31D2                <2> 	xor edx, edx
  5708 00004478 F7E3                <2> 	mul ebx
  5709 0000447A 01C1                <2> 	add ecx, eax
  5710                              <2> 	
  5711 0000447C 31DB                <2> 	xor ebx, ebx
  5712 0000447E 31D2                <2> 	xor edx, edx
  5713 00004480 B8100E0000          <2> 	mov eax, 3600
  5714 00004485 8A3D[D7440000]      <2> 	mov bh, [timezoneh]
  5715 0000448B 80FF80              <2> 	cmp bh, 128
  5716 0000448E 720D                <2> 	jb .posh
  5717 00004490 28FB                <2> 	sub bl, bh
  5718 00004492 30FF                <2> 	xor bh, bh
  5719 00004494 F7E3                <2> 	mul ebx
  5720 00004496 01C1                <2> 	add ecx, eax
  5721 00004498 E906000000          <2> 	jmp .doneth
  5722                              <2> .posh:
  5723 0000449D 86DF                <2> 	xchg bl, bh
  5724 0000449F F7E3                <2> 	mul ebx
  5725 000044A1 29C1                <2> 	sub ecx, eax
  5726                              <2> .doneth:
  5727                              <2> 
  5728 000044A3 31DB                <2> 	xor ebx, ebx	
  5729 000044A5 31D2                <2> 	xor edx, edx
  5730 000044A7 B83C000000          <2> 	mov eax, 60
  5731 000044AC 8A3D[D8440000]      <2> 	mov bh, [timezonem]
  5732 000044B2 80FF80              <2> 	cmp bh, 128
  5733 000044B5 720D                <2> 	jb .posm
  5734 000044B7 28FB                <2> 	sub bl, bh
  5735 000044B9 30FF                <2> 	xor bh, bh
  5736 000044BB F7E3                <2> 	mul ebx
  5737 000044BD 01C1                <2> 	add ecx, eax
  5738 000044BF E906000000          <2> 	jmp .donetm
  5739                              <2> .posm:
  5740 000044C4 86DF                <2> 	xchg bl, bh
  5741 000044C6 F7E3                <2> 	mul ebx
  5742 000044C8 29C1                <2> 	sub ecx, eax
  5743                              <2> .donetm:
  5744                              <2> 
  5745 000044CA C3                  <2> 	ret
  5746                              <2> 	
  5747                              <2> 
  5748 000044CB 1F1C1F1E1F1E1F1F1E- <2> .month db 31,28,31,30,31,30,31,31,30,31,30,31
  5749 000044D4 1F1E1F              <2>
  5750                              <2> 
  5751 000044D7 FA                  <2> 	timezoneh db -6
  5752 000044D8 00                  <2> 	timezonem db 0
  5753 000044D9 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5754 000044E2 000000000000000000- <2>
  5755 000044EB 000000000000        <2>
  5756 000044F1 00                  <2> 	RTCtimeSecond db 0
  5757 000044F2 00                  <2> 	RTCtimeMinute db 0
  5758 000044F3 00                  <2> 	RTCtimeHour db 0
  5759 000044F4 00                  <2> 	RTCtimeDay db 0
  5760 000044F5 00                  <2> 	RTCtimeMonth db 0
  5761 000044F6 00                  <2> 	RTCtimeYear db 0
  5762 000044F7 00                  <2> 	dayhex db 0
  5763 000044F8 00                  <2> 	monthhex db 0
  5764 000044F9 00                  <2> 	yearhex db 0
  5765 000044FA 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  5766 00004503 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  5767 0000450C 302000              <2>
  5768                              <2> 	oldcentury:	;from 1700 to 1900
  5769 0000450F 040200              <2> 	db 4,2,0
  5770                              <2> 	century:	;from 2000 to 2500
  5771 00004512 060402000604        <2> 	db 6,4,2,0,6,4
  5772                              <2> 	month:
  5773 00004518 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5774 00004521 000305              <2>
  5775                              <2> 	day:
  5776 00004524 [40450000]          <2> 	dd sunday
  5777 00004528 [48450000]          <2> 	dd monday
  5778 0000452C [50450000]          <2> 	dd tuesday
  5779 00004530 [59450000]          <2> 	dd wednesday
  5780 00004534 [64450000]          <2> 	dd thursday
  5781 00004538 [6E450000]          <2> 	dd friday
  5782 0000453C [76450000]          <2> 	dd saturday
  5783                              <2> sunday:
  5784 00004540 53756E6461790A00    <2> 	db "Sunday",10,0
  5785                              <2> monday:
  5786 00004548 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5787                              <2> tuesday:
  5788 00004550 547565736461790A00  <2> 	db "Tuesday",10,0
  5789                              <2> wednesday:
  5790 00004559 5765646E6573646179- <2> 	db "Wednesday",10,0
  5791 00004562 0A00                <2>
  5792                              <2> thursday:
  5793 00004564 54687572736461790A- <2> 	db "Thursday",10,0
  5794 0000456D 00                  <2>
  5795                              <2> friday:
  5796 0000456E 4672696461790A00    <2> 	db "Friday",10,0
  5797                              <2> saturday:
  5798 00004576 53617475726461790A- <2> 	db "Saturday",10,0
  5799 0000457F 00                  <2>
  5800                              <1> %ifdef network.included
  5801                              <1> 	%include 'source/programs/dhcp.asm'
  5802                              <1> %endif
  5803                              <1> %ifdef disk.none
  5804                              <1> %else
  5805                              <1> 	%include 'source/programs/dos.asm'
  5806 00004580 FF2C646F7300        <2> db 255,44,"dos",0
  5807                              <2> dosrunner:
  5808 00004586 8925[08B20300]      <2> 	mov [previousstack], esp
  5809 0000458C 8B3D[43300000]      <2> 	mov edi, [currentcommandloc]
  5810 00004592 81C704000000        <2> 	add edi, 4
  5811 00004598 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5812 0000459D E851230000          <2> 	call loadfile
  5813 000045A2 8B3D[43300000]      <2> 	mov edi, [currentcommandloc]
  5814 000045A8 81C704000000        <2> 	add edi, 4
  5815 000045AE 81FA94010000        <2> 	cmp edx, 404
  5816 000045B4 0F845E000000        <2> 	je near .noprogfound
  5817 000045BA BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5818 000045BF 31C9                <2> 	xor ecx, ecx
  5819                              <2> .findparams:
  5820 000045C1 47                  <2> 	inc edi
  5821 000045C2 8A07                <2> 	mov al, [edi]
  5822 000045C4 3C20                <2> 	cmp al, " "
  5823 000045C6 75F9                <2> 	jne .findparams
  5824                              <2> .copyparams:
  5825 000045C8 8A07                <2> 	mov al, [edi]
  5826 000045CA 8803                <2> 	mov [ebx], al
  5827 000045CC 43                  <2> 	inc ebx
  5828 000045CD 47                  <2> 	inc edi
  5829 000045CE 41                  <2> 	inc ecx
  5830 000045CF 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5831 000045D5 7304                <2> 	jae .nomoreparams
  5832 000045D7 3C00                <2> 	cmp al, 0
  5833 000045D9 75ED                <2> 	jne .copyparams
  5834                              <2> .nomoreparams:
  5835 000045DB 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5836 000045E1 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5837 000045E5 8ED8                <2> 	mov ds, ax
  5838 000045E7 8EC0                <2> 	mov es, ax
  5839 000045E9 8EE0                <2> 	mov fs, ax
  5840 000045EB 8EE8                <2> 	mov gs, ax
  5841 000045ED 31C0                <2> 	xor eax, eax
  5842 000045EF 31DB                <2> 	xor ebx, ebx
  5843 000045F1 31C9                <2> 	xor ecx, ecx
  5844 000045F3 31D2                <2> 	xor edx, edx
  5845 000045F5 31FF                <2> 	xor edi, edi
  5846 000045F7 31F6                <2> 	xor esi, esi
  5847 000045F9 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5848 00004600 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5849 00004604 6689DA              <2> 	mov dx, bx
  5850 00004607 8EC3                <2> 	mov es, bx
  5851 00004609 8EE3                <2> 	mov fs, bx
  5852 0000460B 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5853 0000460F 8EEB                <2> 	mov gs, bx
  5854 00004611 8B25[08B20300]      <2> 	mov esp, [previousstack]
  5855 00004617 C3                  <2> 	ret
  5856                              <2> .noprogfound:
  5857 00004618 BE[A3890000]        <2> 	mov esi, notfound1
  5858 0000461D E843D7FFFF          <2> 	call print
  5859 00004622 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  5860 00004628 81C604000000        <2> 	add esi, 4
  5861 0000462E E832D7FFFF          <2> 	call print
  5862 00004633 BE[AB890000]        <2> 	mov esi, notfound2
  5863 00004638 E828D7FFFF          <2> 	call print
  5864 0000463D C3                  <2> 	ret
  5865                              <2> 	
  5866                              <1> %endif
  5867                              <1> %include 'source/programs/dump.asm'
  5868 0000463E FF2C64756D7000      <2> db 255,44,"dump",0
  5869 00004645 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  5870 0000464B 81C605000000        <2> 	add esi, 5
  5871 00004651 31C9                <2> 	xor ecx, ecx
  5872 00004653 66B83078            <2> 	mov ax, "0x"
  5873 00004657 663906              <2> 	cmp [esi], ax
  5874 0000465A 740A                <2> 	je dumphexin
  5875 0000465C E8C4EDFFFF          <2> 	call cnvrttxt
  5876 00004661 E910000000          <2> 	jmp dumphexnow
  5877                              <2> dumphexin:
  5878 00004666 81C602000000        <2> 	add esi, 2
  5879 0000466C E868EDFFFF          <2> 	call cnvrthextxt
  5880 00004671 E900000000          <2> 	jmp dumphexnow
  5881                              <2> dumphexnow:
  5882 00004676 89CF                <2> 	mov edi, ecx
  5883 00004678 89FE                <2> 	mov esi, edi
  5884 0000467A 81C680030000        <2> 	add esi, 896
  5885                              <2> dumphexloop:
  5886 00004680 8B0F                <2> 	mov ecx, [edi]
  5887 00004682 C605[77320000]05    <2> 	mov byte [firsthexshown],5
  5888 00004689 E8FEEBFFFF          <2> 	call showhex
  5889 0000468E 81C704000000        <2> 	add edi, 4
  5890 00004694 39F7                <2> 	cmp edi, esi
  5891 00004696 72E8                <2> 	jb dumphexloop
  5892 00004698 E87EE2FFFF          <2> 	call termcopy
  5893 0000469D C3                  <2> 	ret 
  5894                              <1> %include 'source/programs/echo.asm'
  5895 0000469E FF2C6563686F00      <2> db 255,44,"echo",0
  5896                              <2> 	echoprog:
  5897 000046A5 8B35[43300000]      <2> 		mov esi, [currentcommandloc]
  5898 000046AB 81C605000000        <2> 		add esi, 5
  5899 000046B1 8A06                <2> 		mov al, [esi]
  5900 000046B3 E889D6FFFF          <2> 		call printquiet
  5901 000046B8 E8A3D6FFFF          <2> 		call printline
  5902 000046BD C3                  <2> 		ret
  5903 000046BE BB[88B40300]        <2> 	echovr:	mov ebx, variables
  5904 000046C3 BF06000000          <2> 		mov edi, 6
  5905 000046C8 E83F000000          <2> 		call nxtvrech
  5906 000046CD E95A000000          <2> 		jmp prntvr2
  5907 000046D2 B13D                <2> 	echvar:	mov cl, '='
  5908 000046D4 43                  <2> 		inc ebx
  5909 000046D5 8A03                <2> 		mov al, [ebx]
  5910 000046D7 3C00                <2> 		cmp al, 0
  5911 000046D9 7431                <2> 		je nxtvrech
  5912 000046DB 3C3D                <2> 		cmp al, '='
  5913 000046DD 7422                <2> 		je nxtvrechb1
  5914 000046DF 8B35[43300000]      <2> 		mov esi, [currentcommandloc]
  5915 000046E5 01FE                <2> 		add esi, edi
  5916 000046E7 E89CE9FFFF          <2> 		call cndtest
  5917 000046EC 3C02                <2> 		cmp al, 2
  5918 000046EE 7438                <2> 		je prntvr
  5919 000046F0 3C01                <2> 		cmp al, 1
  5920 000046F2 7434                <2> 		je prntvr
  5921 000046F4 8B35[43300000]      <2> 		mov esi, [currentcommandloc]
  5922 000046FA 01FE                <2> 		add esi, edi
  5923 000046FC E90B000000          <2> 		jmp nxtvrech
  5924                              <2> 	nxtvrechb1:
  5925 00004701 81EB02000000        <2> 		sub ebx, 2
  5926 00004707 E9C6FFFFFF          <2> 		jmp echvar
  5927 0000470C 8A03                <2> 	nxtvrech: mov al, [ebx]
  5928 0000470E 3C05                <2> 		cmp al, 5
  5929 00004710 740A                <2> 		je nxtvrec2
  5930 00004712 43                  <2> 		inc ebx
  5931 00004713 81FB[88C40300]      <2> 		cmp ebx, varend
  5932 00004719 72F1                <2> 		jb nxtvrech
  5933 0000471B C3                  <2> 		ret
  5934 0000471C 43                  <2> 	nxtvrec2: inc ebx
  5935 0000471D 8A03                <2> 		mov al, [ebx]
  5936 0000471F 3C04                <2> 		cmp al, 4
  5937 00004721 74AF                <2> 		je echvar
  5938 00004723 E9E4FFFFFF          <2> 		jmp nxtvrech
  5939 00004728 43                  <2> 	prntvr: inc ebx
  5940 00004729 89DE                <2> 		mov esi, ebx
  5941 0000472B C3                  <2> 		ret
  5942 0000472C E834D6FFFF          <2> 	prntvr2: call print
  5943 00004731 BE[DC890000]        <2> 		mov esi, line
  5944 00004736 E82AD6FFFF          <2> 		call print
  5945 0000473B C3                  <2> 		ret 
  5946                              <1> %include 'source/programs/else.asm'
  5947 0000473C FF2C656C736500      <2> 	db 255,44,"else",0
  5948 00004743 31C0                <2> elsecmd:	xor eax, eax
  5949 00004745 3805[82B40300]      <2> 	cmp [BATCHISON], al
  5950 0000474B 0F8473F4FFFF        <2> 	je near notbatch
  5951 00004751 A0[19B40300]        <2> 	mov al, [IFON]
  5952 00004756 BE[1AB40300]        <2> 	mov esi, IFTRUE
  5953 0000475B 01C6                <2> 	add esi, eax
  5954 0000475D 8A06                <2> 	mov al, [esi]
  5955 0000475F 3401                <2> 	xor al, 1
  5956 00004761 8806                <2> 	mov [esi], al
  5957 00004763 C3                  <2> 	ret 
  5958                              <1> %include 'source/programs/exit.asm'
  5959 00004764 FF2C6578697400      <2> db 255,44,"exit",0
  5960 0000476B 803D[18B40300]01    <2> 	cmp byte [ranboot], 1
  5961 00004772 0F8494E5FFFF        <2> 	je near returnfromexp
  5962 00004778 E973E4FFFF          <2> 	jmp nobootfile
  5963                              <1> %include 'source/programs/fi.asm'
  5964 0000477D FF2C666900          <2> 	db 255,44,"fi",0
  5965 00004782 30C0                <2> 	xor al, al
  5966 00004784 3805[82B40300]      <2> 	cmp [BATCHISON], al
  5967 0000478A 0F8434F4FFFF        <2> 	je near notbatch
  5968 00004790 B001                <2> fi:	mov al, 1
  5969 00004792 2805[19B40300]      <2> 	sub [IFON],al
  5970 00004798 C3                  <2> 	ret 
  5971                              <1> %ifdef gui.included
  5972                              <1> 	%include 'source/programs/gui.asm'
  5973 00004799 FF2C67756900        <2> db 255,44,"gui",0
  5974                              <2> guiswitcher:
  5975 0000479F 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  5976 000047A5 81C604000000        <2> 	add esi, 4
  5977 000047AB 31C9                <2> 	xor ecx, ecx
  5978 000047AD 803E00              <2> 	cmp byte [esi], 0
  5979 000047B0 740A                <2> 	je .nomodepref
  5980 000047B2 E822ECFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5981 000047B7 E907000000          <2> 	jmp .modepref
  5982                              <2> .nomodepref:
  5983 000047BC 51                  <2> 	push ecx
  5984 000047BD E858D6FFFF          <2> 	call clear
  5985 000047C2 59                  <2> 	pop ecx
  5986                              <2> .modepref:
  5987 000047C3 66C705[020D0000]-   <2> 	mov word [realmodeptr], guiswitch
  5988 000047CA [3354]              <2>
  5989 000047CC E81FC4FFFF          <2> 	call realmode
  5990                              <2> guiswitchret:
  5991 000047D1 65803D[018A0000]01  <2> 	cmp byte [gs:guion], 1
  5992 000047D9 7401                <2> 	je .cont
  5993 000047DB C3                  <2> 	ret
  5994                              <2> .cont:
  5995 000047DC BF[25560000]        <2> 	mov edi, VBEMODEBLOCK
  5996                              <2> .loop:
  5997 000047E1 658B07              <2> 	mov eax, [gs:edi]
  5998 000047E4 8907                <2> 	mov [edi], eax
  5999 000047E6 47                  <2> 	inc edi
  6000 000047E7 81FF[29590000]      <2> 	cmp edi, VBEEND
  6001 000047ED 72F2                <2> 	jb .loop
  6002 000047EF A1[4D580000]        <2> 	mov eax, [physbaseptr]
  6003 000047F4 8B1D[4B020000]      <2> 	mov ebx, [basecache]
  6004 000047FA C1E304              <2> 	shl ebx, 4
  6005 000047FD 29D8                <2> 	sub eax, ebx
  6006 000047FF A3[4D580000]        <2> 	mov [physbaseptr], eax
  6007 00004804 C605[12240000]00    <2> 	mov byte [termguion], 0
  6008 0000480B BE[9CCC0300]        <2> 	mov esi, graphicstable
  6009 00004810 30C0                <2> 	xor al, al
  6010                              <2> .clear:
  6011 00004812 8806                <2> 	mov [esi], al
  6012 00004814 46                  <2> 	inc esi
  6013 00004815 81FE[9CCE0300]      <2> 	cmp esi, graphicstableend
  6014 0000481B 72F5                <2> 	jb .clear
  6015 0000481D E8B32B0000          <2> 	call guisetup
  6016                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  6017 00004822 668B15[37580000]    <2> 	mov dx, [resolutionx]
  6018 00004829 668B0D[39580000]    <2> 	mov cx, [resolutiony]
  6019 00004830 6689D3              <2> 	mov bx, dx
  6020 00004833 6689C8              <2> 	mov ax, cx
  6021 00004836 66D1EB              <2> 	shr bx, 1
  6022 00004839 66D1E8              <2> 	shr ax, 1
  6023 0000483C 6689DA              <2> 	mov dx, bx
  6024 0000483F 66D1EA              <2> 	shr dx, 1
  6025 00004842 6689C1              <2> 	mov cx, ax
  6026 00004845 66D1E9              <2> 	shr cx, 1
  6027 00004848 6601D3              <2> 	add bx, dx
  6028 0000484B 6601C8              <2> 	add ax, cx
  6029 0000484E 66D1E9              <2> 	shr cx, 1
  6030 00004851 66C1EB03            <2> 	shr bx, 3
  6031 00004855 66C1E303            <2> 	shl bx, 3
  6032 00004859 66C1E804            <2> 	shr ax, 4
  6033 0000485D 66C1E004            <2> 	shl ax, 4
  6034 00004861 66891D[E2750000]    <2> 	mov [termwindow], bx
  6035 00004868 66A3[E4750000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6036 0000486E BE[E2750000]        <2> 	mov esi, termwindow
  6037 00004873 31DB                <2> 	xor ebx, ebx
  6038 00004875 6631C0              <2> 	xor ax, ax
  6039 00004878 E8A6320000          <2> 	call showwindow
  6040 0000487D E8A8100000          <2> 	call cursorgui
  6041 00004882 E893D5FFFF          <2> 	call clear
  6042 00004887 C3                  <2> 	ret
  6043                              <2> 	
  6044                              <1> %endif
  6045                              <1> %include 'source/programs/help.asm'
  6046 00004888 FF2C68656C7000      <2> db 255,44,"help",0
  6047                              <2> lscmd:	
  6048 0000488F B00D                <2> 		mov al, 13
  6049 00004891 E87EDBFFFF          <2> 		call prcharq
  6050 00004896 BE[EF340000]        <2> 		mov esi, progstart
  6051 0000489B BB[33540000]        <2> 		mov ebx, progend
  6052 000048A0 BE[08AE0300]        <2> dir:	mov esi, fileindex
  6053 000048A5 8A06                <2> 	dirnxt:	mov al, [esi]
  6054 000048A7 30E4                <2> 		xor ah, ah
  6055 000048A9 3CFF                <2> 		cmp al, 255
  6056 000048AB 7418                <2> 		je dirfnd
  6057 000048AD 46                  <2> 		inc esi
  6058 000048AE 81FE[08B20300]      <2> 		cmp esi,  fileindexend
  6059 000048B4 7342                <2> 		jae dirdn
  6060 000048B6 E9EAFFFFFF          <2> 		jmp dirnxt
  6061                              <2> 	dirfnd3:
  6062 000048BB 46                  <2> 		inc esi
  6063 000048BC 81FE[08B20300]      <2> 		cmp esi, fileindexend
  6064 000048C2 76E1                <2> 		jbe dirnxt
  6065 000048C4 4E                  <2> 		dec esi
  6066 000048C5 46                  <2> 	dirfnd:	inc esi
  6067 000048C6 8A06                <2> 		mov al, [esi]
  6068 000048C8 30E4                <2> 		xor ah, ah
  6069 000048CA 3C2C                <2> 		cmp al, 44
  6070 000048CC 740E                <2> 		je dirfnd2
  6071 000048CE 46                  <2> 		inc esi
  6072 000048CF 81FE[08B20300]      <2> 		cmp esi,  fileindexend
  6073 000048D5 7321                <2> 		jae dirdn
  6074 000048D7 E9C9FFFFFF          <2> 		jmp dirnxt
  6075 000048DC 46                  <2> 	dirfnd2: inc esi
  6076 000048DD E85FD4FFFF          <2> 		call printquiet
  6077 000048E2 56                  <2> 		push esi
  6078 000048E3 B009                <2> 		mov al, 9
  6079 000048E5 E82ADBFFFF          <2> 		call prcharq
  6080 000048EA 5E                  <2> 		pop esi
  6081 000048EB 81FE[08B20300]      <2> 		cmp esi,  fileindexend
  6082 000048F1 7305                <2> 		jae dirdn
  6083 000048F3 E9ADFFFFFF          <2> 		jmp dirnxt
  6084 000048F8 BE[DC890000]        <2> 	dirdn:	mov esi, line
  6085 000048FD E863D4FFFF          <2> 			call print
  6086 00004902 C3                  <2> 			ret
  6087 00004903 00                  <2> currentdir db 0
  6088                              <1> %include 'source/programs/if.asm'
  6089 00004904 FF2C696600          <2> 	db 255,44,"if",0
  6090 00004909 30C0                <2> ifcmd:	xor al, al
  6091 0000490B 3805[82B40300]      <2> 	cmp [BATCHISON], al
  6092 00004911 0F84ADF2FFFF        <2> 	je near notbatch
  6093 00004917 8B1D[43300000]      <2> 	mov ebx, [currentcommandloc]
  6094 0000491D 81C303000000        <2> 	add ebx, 3
  6095 00004923 89DE                <2> 	mov esi, ebx
  6096 00004925 8A06                <2> chkeqsn: mov al, [esi]
  6097 00004927 3C00                <2> 	cmp al, 0
  6098 00004929 0F8495F2FFFF        <2> 	je near notbatch
  6099 0000492F 3C3D                <2> 	cmp al, '='
  6100 00004931 0F8406000000        <2> 	je near chkeqdn
  6101 00004937 46                  <2> 	inc esi
  6102 00004938 E9E8FFFFFF          <2> 	jmp chkeqsn
  6103 0000493D B000                <2> chkeqdn: mov al, 0 
  6104 0000493F 8806                <2> 	mov [esi], al
  6105 00004941 46                  <2> 	inc esi
  6106 00004942 E800E7FFFF          <2> 	call tester
  6107 00004947 3C01                <2> 	cmp al, 1
  6108 00004949 0F8405000000        <2> 	je near trueif
  6109 0000494F E91C000000          <2> 	jmp falseif
  6110 00004954 31C0                <2> trueif:	xor eax, eax
  6111 00004956 A0[19B40300]        <2> 	mov al, [IFON]
  6112 0000495B FEC0                <2> 	inc al
  6113 0000495D A2[19B40300]        <2> 	mov [IFON], al
  6114 00004962 30E4                <2> 	xor ah, ah
  6115 00004964 BE[1AB40300]        <2> 	mov esi, IFTRUE
  6116 00004969 01C6                <2> 	add esi, eax
  6117 0000496B B401                <2> 	mov ah, 1
  6118 0000496D 8826                <2> 	mov [esi], ah
  6119 0000496F C3                  <2> 	ret 
  6120 00004970 31C0                <2> falseif: xor eax, eax
  6121 00004972 A0[19B40300]        <2> 	mov al, [IFON]
  6122 00004977 FEC0                <2> 	inc al
  6123 00004979 A2[19B40300]        <2> 	mov [IFON], al
  6124 0000497E 30E4                <2> 	xor ah, ah
  6125 00004980 BE[1AB40300]        <2> 	mov esi, IFTRUE
  6126 00004985 01C6                <2> 	add esi, eax
  6127 00004987 30E4                <2> 	xor ah, ah
  6128 00004989 8826                <2> 	mov [esi], ah
  6129 0000498B C3                  <2> 	ret 
  6130                              <1> %ifdef network.included
  6131                              <1> 	%include 'source/programs/ipconfig.asm'
  6132                              <1> %endif
  6133                              <1> %include 'source/programs/keycode.asm'
  6134 0000498C FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  6135 00004995 00                  <2>
  6136                              <2> keycode:
  6137 00004996 66C705[E5230000]00- <2> 	mov word [trans], 0
  6138 0000499E 00                  <2>
  6139 0000499F C605[B66A0000]00    <2> 	mov byte [threadson], 0
  6140                              <2> %ifdef io.serial
  6141                              <2> .noserial:
  6142                              <2> 	hlt
  6143                              <2> 	mov dx, [serial.address]
  6144                              <2> 	in al, dx
  6145                              <2> 	cmp al, 0
  6146                              <2> 	je .noserial
  6147                              <2> 	mov cl, al
  6148                              <2> 	call showhexsmall
  6149                              <2> 	cmp al, 0x1B
  6150                              <2> 	jne .noserial
  6151                              <2> 	in al, dx
  6152                              <2> 	mov cl, al
  6153                              <2> 	call showhexsmall
  6154                              <2> 	cmp cl, 0x5B
  6155                              <2> 	je .noserial
  6156                              <2> 	ret
  6157                              <2> %else
  6158 000049A6 E89B150000          <2> 	call getkey
  6159 000049AB 31C0                <2> 	xor eax, eax
  6160 000049AD 31C9                <2> 	xor ecx, ecx
  6161 000049AF 8A0D[225F0000]      <2> 	mov cl, [specialkey]
  6162 000049B5 80F900              <2> 	cmp cl, 0
  6163 000049B8 0F8405000000        <2> 	je near .nospecialkeycode
  6164 000049BE E8B5E8FFFF          <2> 	call showhexsmall
  6165                              <2> .nospecialkeycode:
  6166 000049C3 668B0D[E3230000]    <2> 	mov cx, [lastkey + 2]
  6167 000049CA E8A9E8FFFF          <2> 	call showhexsmall
  6168 000049CF 80F901              <2> 	cmp cl, 1
  6169 000049D2 75C2                <2> 	jne keycode
  6170 000049D4 C3                  <2> 	ret
  6171                              <2> %endif
  6172                              <1> %ifdef gui.included
  6173                              <1> 	%include 'source/programs/line.asm'
  6174 000049D5 FF2C6C696E6500      <2> db 255,44,"line",0
  6175                              <2> linetester:
  6176 000049DC 803D[018A0000]00    <2> 	cmp byte [guion], 0
  6177 000049E3 0F841B000000        <2> 	je near .done
  6178 000049E9 668B35[71020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  6179 000049F0 BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  6180 000049F5 E868000000          <2> 	call .circletest
  6181 000049FA BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  6182 000049FF E801000000          <2> 	call .linetest
  6183                              <2> .done:
  6184 00004A04 C3                  <2> 	ret
  6185                              <2> 
  6186                              <2> .linetest:
  6187 00004A05 53                  <2> 	push ebx
  6188 00004A06 E8D6000000          <2> 	call .stime
  6189 00004A0B 5B                  <2> 	pop ebx
  6190 00004A0C 31FF                <2> 	xor edi, edi
  6191                              <2> .ltlp:
  6192 00004A0E 53                  <2> 	push ebx
  6193 00004A0F E81C010000          <2> 	call .st
  6194 00004A14 66F7D6              <2> 	not si
  6195 00004A17 E814010000          <2> 	call .st
  6196 00004A1C 5B                  <2> 	pop ebx
  6197 00004A1D 66F7D6              <2> 	not si
  6198 00004A20 660335[6F020000]    <2> 	add si, [timenanoseconds]
  6199 00004A27 4B                  <2> 	dec ebx
  6200 00004A28 81FB00000000        <2> 	cmp ebx, 0
  6201 00004A2E 77DE                <2> 	ja .ltlp
  6202 00004A30 E8C4000000          <2> 	call .etime
  6203 00004A35 53                  <2> 	push ebx	
  6204 00004A36 57                  <2> 	push edi
  6205 00004A37 E85B270000          <2> 	call guiclear
  6206 00004A3C E8E9270000          <2> 	call reloadallgraphics
  6207 00004A41 59                  <2> 	pop ecx
  6208 00004A42 E800E9FFFF          <2> 	call showdec
  6209 00004A47 BE[724B0000]        <2> 	mov esi, .msg
  6210 00004A4C E814D3FFFF          <2> 	call print
  6211 00004A51 59                  <2> 	pop ecx
  6212 00004A52 E8F0E8FFFF          <2> 	call showdec
  6213 00004A57 BE[9E4B0000]        <2> 	mov esi, .msgtime
  6214 00004A5C E804D3FFFF          <2> 	call print
  6215 00004A61 C3                  <2> 	ret
  6216                              <2> 	
  6217                              <2> .circletest:
  6218 00004A62 53                  <2> 	push ebx
  6219 00004A63 E879000000          <2> 	call .stime
  6220 00004A68 5B                  <2> 	pop ebx
  6221 00004A69 31FF                <2> 	xor edi, edi
  6222                              <2> .ctlp:
  6223 00004A6B 53                  <2> 	push ebx
  6224 00004A6C 668B0D[39580000]    <2> 	mov cx, [resolutiony]
  6225 00004A73 66D1E9              <2> 	shr cx, 1
  6226 00004A76 668B15[37580000]    <2> 	mov dx, [resolutionx]
  6227 00004A7D 66D1EA              <2> 	shr dx, 1
  6228 00004A80 6689C8              <2> 	mov ax, cx
  6229                              <2> .circle:
  6230 00004A83 60                  <2> 	pusha
  6231 00004A84 E827210000          <2> 	call drawcircle
  6232 00004A89 61                  <2> 	popa
  6233 00004A8A 6648                <2> 	dec ax
  6234 00004A8C 47                  <2> 	inc edi
  6235 00004A8D 663D0100            <2> 	cmp ax, 1
  6236 00004A91 77F0                <2> 	ja .circle
  6237 00004A93 66F7D6              <2> 	not si
  6238                              <2> .circle2:
  6239 00004A96 60                  <2> 	pusha
  6240 00004A97 E814210000          <2> 	call drawcircle
  6241 00004A9C 61                  <2> 	popa
  6242 00004A9D 47                  <2> 	inc edi
  6243 00004A9E 6640                <2> 	inc ax
  6244 00004AA0 6639C8              <2> 	cmp ax, cx
  6245 00004AA3 76F1                <2> 	jbe .circle2
  6246 00004AA5 5B                  <2> 	pop ebx
  6247 00004AA6 66F7D6              <2> 	not si
  6248 00004AA9 660335[6F020000]    <2> 	add si, [timenanoseconds]
  6249 00004AB0 4B                  <2> 	dec ebx
  6250 00004AB1 81FB00000000        <2> 	cmp ebx, 0
  6251 00004AB7 77B2                <2> 	ja .ctlp
  6252 00004AB9 E83B000000          <2> 	call .etime
  6253 00004ABE 53                  <2> 	push ebx
  6254 00004ABF 57                  <2> 	push edi
  6255 00004AC0 59                  <2> 	pop ecx
  6256 00004AC1 E881E8FFFF          <2> 	call showdec
  6257 00004AC6 BE[874B0000]        <2> 	mov esi, .msgcircle
  6258 00004ACB E895D2FFFF          <2> 	call print
  6259 00004AD0 59                  <2> 	pop ecx
  6260 00004AD1 E871E8FFFF          <2> 	call showdec
  6261 00004AD6 BE[9E4B0000]        <2> 	mov esi, .msgtime
  6262 00004ADB E885D2FFFF          <2> 	call print
  6263 00004AE0 C3                  <2> 	ret
  6264                              <2> 	
  6265                              <2> .stime:
  6266 00004AE1 F4                  <2> 	hlt
  6267 00004AE2 A1[6B020000]        <2> 	mov eax, [timeseconds]
  6268 00004AE7 8B1D[6F020000]      <2> 	mov ebx, [timenanoseconds]
  6269 00004AED A3[AD4B0000]        <2> 	mov [.time], eax
  6270 00004AF2 891D[B14B0000]      <2> 	mov [.time + 4], ebx
  6271 00004AF8 C3                  <2> 	ret
  6272                              <2> 	
  6273                              <2> .etime:
  6274 00004AF9 A1[6B020000]        <2> 	mov eax, [timeseconds]
  6275 00004AFE 8B1D[6F020000]      <2> 	mov ebx, [timenanoseconds]
  6276 00004B04 8B0D[AD4B0000]      <2> 	mov ecx, [.time]
  6277 00004B0A 8B15[B14B0000]      <2> 	mov edx, [.time + 4]
  6278 00004B10 C1EA0A              <2> 	shr edx, 10
  6279 00004B13 C1EB0A              <2> 	shr ebx, 10
  6280 00004B16 29C8                <2> 	sub eax, ecx
  6281 00004B18 3D00000000          <2> 	cmp eax, 0
  6282 00004B1D 740E                <2> 	je .notclp
  6283                              <2> .tclp:
  6284 00004B1F 81C340420F00        <2> 	add ebx, 1000000
  6285 00004B25 48                  <2> 	dec eax
  6286 00004B26 3D00000000          <2> 	cmp eax, 0
  6287 00004B2B 75F2                <2> 	jne .tclp
  6288                              <2> .notclp:
  6289 00004B2D 29D3                <2> 	sub ebx, edx
  6290 00004B2F C3                  <2> 	ret
  6291                              <2> 	
  6292                              <2> .st:
  6293 00004B30 6631C0              <2> 	xor ax, ax
  6294 00004B33 6631DB              <2> 	xor bx, bx
  6295 00004B36 668B0D[39580000]    <2> 	mov cx, [resolutiony]
  6296 00004B3D 668B15[37580000]    <2> 	mov dx, [resolutionx]
  6297                              <2> .lp:
  6298 00004B44 60                  <2> 	pusha
  6299 00004B45 E821250000          <2> 	call drawline
  6300 00004B4A 61                  <2> 	popa
  6301                              <2> .noswitch:
  6302 00004B4B 47                  <2> 	inc edi
  6303 00004B4C 6643                <2> 	inc bx
  6304 00004B4E 664A                <2> 	dec dx
  6305 00004B50 6681FB0000          <2> 	cmp bx, 0
  6306 00004B55 74ED                <2> 	je .lp
  6307 00004B57 6681FA0000          <2> 	cmp dx, 0
  6308 00004B5C 75E6                <2> 	jne .lp
  6309                              <2> .lp2:
  6310 00004B5E 60                  <2> 	pusha
  6311 00004B5F E807250000          <2> 	call drawline
  6312 00004B64 61                  <2> 	popa
  6313 00004B65 47                  <2> 	inc edi
  6314 00004B66 6640                <2> 	inc ax
  6315 00004B68 6649                <2> 	dec cx
  6316 00004B6A 6681F90000          <2> 	cmp cx, 0
  6317 00004B6F 75ED                <2> 	jne .lp2
  6318 00004B71 C3                  <2> 	ret
  6319                              <2> 	
  6320 00004B72 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  6321 00004B7B 6520647261776E2069- <2>
  6322 00004B84 6E2000              <2>
  6323 00004B87 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  6324 00004B90 65726520647261776E- <2>
  6325 00004B99 20696E2000          <2>
  6326 00004B9E 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  6327 00004BA7 6E64732E0A00        <2>
  6328 00004BAD 0000000000000000    <2> .time dd 0,0	
  6329                              <1> %endif
  6330                              <1> %include 'source/programs/logout.asm'
  6331 00004BB5 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  6332 00004BBE E9E9DFFFFF          <2> 	jmp os
  6333                              <1> %include 'source/programs/loop.asm'
  6334 00004BC3 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  6335 00004BCA 803D[83B40300]00    <2> 	cmp byte [LOOPON], 0
  6336 00004BD1 0F8501000000        <2> 	jne near filoop
  6337 00004BD7 C3                  <2> 	ret
  6338 00004BD8 8B35[84B40300]      <2> filoop: mov esi, [LOOPPOS]
  6339 00004BDE FE0D[19B40300]      <2> 	dec byte [IFON]
  6340 00004BE4 C605[83B40300]00    <2> 	mov byte [LOOPON], 0
  6341 00004BEB 8935[7EB40300]      <2> 	mov [BATCHPOS], esi
  6342 00004BF1 8935[E93A0000]      <2> 	mov [batchedi], esi
  6343 00004BF7 C3                  <2> 	ret 
  6344                              <1> %ifdef disk.none
  6345                              <1> %else
  6346                              <1> 	%include 'source/programs/ls.asm'
  6347 00004BF8 FF2C6C7300          <2> db 255,44,"ls",0
  6348 00004BFD BE[5B8C0300]        <2> 		mov esi, diskfileindex
  6349                              <2> 	diskindexdir:
  6350 00004C02 803E5F              <2> 		cmp byte [esi], '_'
  6351 00004C05 7440                <2> 		je nextdiskindexdir
  6352 00004C07 E835D1FFFF          <2> 		call printquiet
  6353 00004C0C 56                  <2> 		push esi
  6354 00004C0D BE[674C0000]        <2> 		mov esi, disktab
  6355 00004C12 E82AD1FFFF          <2> 		call printquiet
  6356 00004C17 5E                  <2> 		pop esi
  6357 00004C18 8B4E05              <2> 		mov ecx, [esi + 5]
  6358 00004C1B C605[77320000]05    <2> 		mov byte [firsthexshown], 5
  6359 00004C22 E820E7FFFF          <2> 		call showdec
  6360 00004C27 56                  <2> 		push esi
  6361 00004C28 BE[DC890000]        <2> 		mov esi, line
  6362 00004C2D E80FD1FFFF          <2> 		call printquiet
  6363 00004C32 5E                  <2> 		pop esi
  6364 00004C33 81C609000000        <2> 		add esi, 9
  6365 00004C39 81FE[518D0300]      <2> 		cmp esi, enddiskfileindex
  6366 00004C3F 72C1                <2> 		jb diskindexdir
  6367 00004C41 E8D5DCFFFF          <2> 		call termcopy
  6368 00004C46 C3                  <2> 		ret
  6369                              <2> 	nextdiskindexdir:
  6370 00004C47 46                  <2> 		inc esi
  6371 00004C48 803E00              <2> 		cmp byte [esi], 0
  6372 00004C4B 75FA                <2> 		jne nextdiskindexdir
  6373 00004C4D 81C609000000        <2> 		add esi, 9
  6374 00004C53 81FE[518D0300]      <2> 		cmp esi, enddiskfileindex
  6375 00004C59 72A7                <2> 		jb diskindexdir
  6376 00004C5B E8BBDCFFFF          <2> 		call termcopy
  6377 00004C60 C3                  <2> 		ret
  6378                              <2> 		
  6379 00004C61 4469736B2000        <2> 		diskmsg db "Disk ",0
  6380 00004C67 0D09090900          <2> 		disktab db 13,9,9,9,0
  6381                              <1> %endif
  6382                              <1> %include 'source/programs/memory.asm'
  6383 00004C6C FF2C6D656D6F727900  <2> db 255,44,"memory",0
  6384 00004C75 BE[178A0000]        <2> 	mov esi, memlistbuf
  6385 00004C7A 31FF                <2> 	xor edi, edi
  6386 00004C7C 668B3D[578C0000]    <2> 	mov di, [memlistend]
  6387 00004C83 01F7                <2> 	add edi, esi
  6388                              <2> printmemmap:
  6389 00004C85 8B0E                <2> 	mov ecx, [esi]
  6390 00004C87 E800E6FFFF          <2> 	call showhex
  6391 00004C8C 81C608000000        <2> 	add esi, 8
  6392 00004C92 8B0E                <2> 	mov ecx, [esi]
  6393 00004C94 E8F3E5FFFF          <2> 	call showhex
  6394 00004C99 81C608000000        <2> 	add esi, 8
  6395 00004C9F 8B0E                <2> 	mov ecx, [esi]
  6396 00004CA1 E8E6E5FFFF          <2> 	call showhex
  6397 00004CA6 81C608000000        <2> 	add esi, 8
  6398 00004CAC 57                  <2> 	push edi
  6399 00004CAD 56                  <2> 	push esi
  6400 00004CAE E8ADD0FFFF          <2> 	call printline
  6401 00004CB3 5E                  <2> 	pop esi
  6402 00004CB4 5F                  <2> 	pop edi
  6403 00004CB5 39FE                <2> 	cmp esi, edi
  6404 00004CB7 72CC                <2> 	jb printmemmap
  6405 00004CB9 C3                  <2> 	ret
  6406                              <2> 	
  6407                              <1> %include 'source/programs/pci.asm'
  6408 00004CBA FF2C70636900        <2> db 255,44,"pci",0
  6409 00004CC0 E8F9180000          <2> 	call pcidump
  6410 00004CC5 C3                  <2> 	ret 
  6411                              <1> %ifdef network.included
  6412                              <1> 	%include 'source/programs/ping.asm'
  6413                              <1> %endif
  6414                              <1> %ifdef disk.none
  6415                              <1> %else
  6416                              <1> 	%include 'source/programs/play.asm'
  6417 00004CC6 FF2C706C61796100    <2> db 255,44,"playa",0
  6418 00004CCE 8B3D[43300000]      <2> 	mov edi, [currentcommandloc]
  6419 00004CD4 81C706000000        <2> 	add edi, 6
  6420 00004CDA E835000000          <2> 	call playasync
  6421 00004CDF C3                  <2> 	ret
  6422 00004CE0 FF2C706C61792000    <2> db 255,44,"play ",0
  6423                              <2> play:
  6424 00004CE8 8B3D[43300000]      <2> 	mov edi, [currentcommandloc]
  6425 00004CEE 81C705000000        <2> 	add edi, 5
  6426 00004CF4 E81B000000          <2> 	call playasync
  6427                              <2> .waitforsound:
  6428 00004CF9 F4                  <2> 	hlt
  6429                              <2> %ifdef sound.included
  6430 00004CFA A1[0C5F0000]        <2> 	mov eax, [Length0]
  6431 00004CFF 660B05[105F0000]    <2> 	or ax, [Length1]
  6432                              <2> %endif
  6433 00004D06 0A05[73020000]      <2> 	or al, [soundon]
  6434 00004D0C 3D00000000          <2> 	cmp eax, 0
  6435 00004D11 75E6                <2> 	jne .waitforsound
  6436 00004D13 C3                  <2> 	ret
  6437                              <2> playasync:
  6438 00004D14 BE0000C000          <2> 	mov esi, 0xC00000
  6439 00004D19 E8D51B0000          <2> 	call loadfile
  6440 00004D1E 81FA94010000        <2> 	cmp edx, 404
  6441 00004D24 743F                <2> 	je nosoundfound
  6442 00004D26 BB0000C000          <2> 	mov ebx, 0xC00000
  6443 00004D2B 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6444 00004D32 0F843F010000        <2> 	je near wave_player
  6445 00004D38 66813B534E          <2> 	cmp word [ebx], "SN"
  6446 00004D3D 7526                <2> 	jne nosoundfound
  6447 00004D3F 81C306000000        <2> 	add ebx, 6
  6448 00004D45 891D[76020000]      <2> 	mov [soundpos], ebx
  6449 00004D4B 035BFC              <2> 	add ebx, [ebx - 4]
  6450 00004D4E 891D[7A020000]      <2> 	mov [soundendpos], ebx
  6451 00004D54 66C705[74020000]00- <2> 	mov word [soundrepititions], 0
  6452 00004D5C 00                  <2>
  6453 00004D5D C605[73020000]01    <2> 	mov byte [soundon], 1
  6454 00004D64 C3                  <2> 	ret
  6455                              <2> nosoundfound:
  6456 00004D65 BE[8B4D0000]        <2> 	mov esi, notfoundsound
  6457 00004D6A E8F6CFFFFF          <2> 	call print
  6458 00004D6F 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  6459 00004D75 81C605000000        <2> 	add esi, 5
  6460 00004D7B E8E5CFFFFF          <2> 	call print
  6461 00004D80 BE[AB890000]        <2> 	mov esi, notfound2
  6462 00004D85 E8DBCFFFFF          <2> 	call print
  6463 00004D8A C3                  <2> 	ret
  6464 00004D8B 706C61793A2000      <2> notfoundsound db "play: ",0
  6465                              <2> 
  6466                              <2> %ifdef sound.included
  6467                              <2> sbplay:
  6468 00004D92 BE0000C000          <2> 		mov esi, 0xC00000
  6469 00004D97 89F3                <2> 		mov ebx, esi
  6470 00004D99 81C62C000000        <2> 		add esi, WAVSTART
  6471 00004D9F 29F7                <2> 		sub edi, esi
  6472 00004DA1 66893D[105F0000]    <2> 		mov [Length1], di
  6473 00004DA8 C1EF0F              <2> 		shr edi, 15
  6474 00004DAB 893D[0C5F0000]      <2> 		mov [Length0], edi
  6475 00004DB1 8B4B18              <2> 		mov ecx, [ebx + 24]
  6476 00004DB4 890D[1D5F0000]      <2> 		mov [Freq], ecx
  6477 00004DBA 31C0                <2> 		xor eax, eax
  6478 00004DBC BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  6479 00004DC1 81C22C000000        <2> 		add edx, WAVSTART
  6480 00004DC7 01D0                <2> 		add	eax, edx
  6481 00004DC9 89C6                <2> 		mov esi, eax
  6482 00004DCB 31C9                <2> 		xor ecx, ecx
  6483 00004DCD 31DB                <2> 		xor ebx, ebx
  6484 00004DCF 66891D[1A5F0000]    <2> 		mov [SegLoc], bx
  6485 00004DD6 81C300000800        <2> 		add ebx, 0x80000
  6486 00004DDC 66B9FFFF            <2> 		mov cx, 0xFFFF
  6487 00004DE0 6681FF0000          <2> 		cmp di, 0
  6488 00004DE5 7520                <2> 		jne .autoinit
  6489 00004DE7 668B0D[105F0000]    <2> 		mov cx, [Length1]
  6490 00004DEE C605[0B5F0000]01    <2> 		mov byte [OddLength], 1
  6491 00004DF5 6681F90080          <2> 		cmp cx, 32768
  6492 00004DFA 730B                <2> 		jae .autoinit
  6493 00004DFC C605[0B5F0000]00    <2> 		mov byte [OddLength], 0
  6494 00004E03 66D1E1              <2> 		shl cx, 1
  6495 00004E06 47                  <2> 		inc edi
  6496                              <2> .autoinit:
  6497 00004E07 4F                  <2> 		dec edi
  6498 00004E08 893D[0C5F0000]      <2> 		mov [Length0], edi
  6499 00004E0E 66890D[105F0000]    <2> 		mov [Length1], cx
  6500 00004E15 66D1E9              <2> 		shr cx, 1
  6501 00004E18 6641                <2> 		inc cx
  6502 00004E1A 01C8                <2> 		add eax, ecx
  6503 00004E1C A3[125F0000]        <2> 		mov [NextMemLoc], eax
  6504 00004E21 8935[165F0000]      <2> 		mov	[MemLoc], esi
  6505 00004E27 E8850F0000          <2> 		call DMACopy
  6506 00004E2C 31DB                <2> 		xor ebx, ebx
  6507 00004E2E 668B1D[1A5F0000]    <2> 		mov bx, [SegLoc]
  6508 00004E35 31C9                <2> 		xor ecx, ecx
  6509 00004E37 668B0D[105F0000]    <2> 		mov cx, [Length1]
  6510 00004E3E 66D1E9              <2> 		shr cx, 1
  6511 00004E41 6641                <2> 		inc cx
  6512 00004E43 01CB                <2> 		add ebx, ecx
  6513 00004E45 66891D[1A5F0000]    <2> 		mov [SegLoc], bx
  6514 00004E4C 81C300000800        <2> 		add ebx, 0x80000
  6515 00004E52 8B35[125F0000]      <2> 		mov esi, [NextMemLoc]
  6516 00004E58 89F0                <2> 		mov eax, esi
  6517 00004E5A 01C8                <2> 		add eax, ecx
  6518 00004E5C A3[125F0000]        <2> 		mov [NextMemLoc], eax
  6519 00004E61 8935[165F0000]      <2> 		mov	[MemLoc], esi
  6520 00004E67 E8450F0000          <2> 		call DMACopy
  6521 00004E6C E8630F0000          <2> 		call DMAPlay
  6522 00004E71 E8ED0F0000          <2> 		call PlayDSP
  6523 00004E76 C3                  <2> 		ret
  6524                              <2> WAVSTART equ 44
  6525                              <2> wave_player:
  6526 00004E77 803D[215F0000]01    <2> 	cmp byte [SoundBlaster], 1
  6527 00004E7E 0F840EFFFFFF        <2> 	je near sbplay
  6528 00004E84 BE[8F4E0000]        <2> 	mov esi, nosoundblaster
  6529 00004E89 E8D7CEFFFF          <2> 	call print
  6530 00004E8E C3                  <2> 	ret
  6531                              <2> %else
  6532                              <2> 	wave_player:
  6533                              <2> 		mov esi, nosoundblaster
  6534                              <2> 		call print
  6535                              <2> 		ret
  6536                              <2> %endif
  6537 00004E8F 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6538 00004E98 426C61737465722064- <2>
  6539 00004EA1 657465637465642E0A- <2>
  6540 00004EAA 00                  <2>
  6541                              <1> %endif
  6542                              <1> %include 'source/programs/pwd.asm'
  6543 00004EAB FF2C70776400        <2> db 255,44,"pwd",0
  6544 00004EB1 BE[14B20300]        <2> 	mov esi, currentfolder
  6545 00004EB6 E886CEFFFF          <2> 	call printquiet
  6546 00004EBB E8A0CEFFFF          <2> 	call printline
  6547 00004EC0 C3                  <2> 	ret
  6548                              <2> 	
  6549                              <1> %include 'source/programs/reboot.asm'
  6550 00004EC1 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6551 00004ECA 0F011D[D44E0000]    <2> 		lidt [idtreboot]
  6552 00004ED1 CD00                <2> 		int 0
  6553 00004ED3 F4                  <2> 		hlt
  6554                              <2> 	
  6555 00004ED4 0000                <2> 	idtreboot dw 0
  6556 00004ED6 00000000            <2> 			  dd 0
  6557                              <2> 
  6558                              <2> 	coldboot:
  6559 00004EDA 66B84000            <2> 		MOV AX, 0040h
  6560 00004EDE 8EC0                <2> 		MOV ES, AX
  6561 00004EE0 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6562 00004EE9 00                  <2>
  6563 00004EEA EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6564 00004EF1 CF                  <2> 		IRET
  6565                              <2> 
  6566                              <2> 	warmboot:
  6567 00004EF2 66B84000            <2> 		MOV AX, 0040h
  6568 00004EF6 8EC0                <2> 		MOV ES, AX
  6569 00004EF8 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6570 00004F01 12                  <2>
  6571 00004F02 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6572 00004F09 CF                  <2> 		IRET
  6573                              <2> 		
  6574                              <1> %include 'source/programs/reg.asm'
  6575 00004F0A FF2C72656700        <2> db 255,44,"reg",0
  6576 00004F10 CD03                <2> 	int 3
  6577 00004F12 C3                  <2> 	ret 
  6578                              <1> %ifdef disk.none
  6579                              <1> %else
  6580                              <1> 	%include 'source/programs/show.asm'
  6581 00004F13 FF2C73686F7700      <2> db 255,44,"show",0
  6582                              <2> showprog:
  6583 00004F1A 8B3D[43300000]      <2> 		mov edi, [currentcommandloc]
  6584 00004F20 81C705000000        <2> 		add edi, 5
  6585 00004F26 BE00004000          <2> 		mov esi, 0x400000
  6586 00004F2B 803F26              <2> 		cmp byte [edi], '&'
  6587 00004F2E 741B                <2> 		je .nullfile
  6588 00004F30 BE00008000          <2> 		mov esi, 0x800000
  6589 00004F35 E8B9190000          <2> 		call loadfile
  6590 00004F3A 81FA94010000        <2> 		cmp edx, 404
  6591 00004F40 0F847E000000        <2> 		je near filenotfound
  6592 00004F46 BE00008000          <2> 		mov esi, 0x800000
  6593                              <2> .nullfile:
  6594                              <2> %ifdef gui.included
  6595 00004F4B 66813E424D          <2> 		cmp word [esi], "BM"
  6596 00004F50 740B                <2> 		je bmpfound
  6597                              <2> %endif
  6598 00004F52 E80ECEFFFF          <2> 		call print
  6599 00004F57 E804CEFFFF          <2> 		call printline
  6600 00004F5C C3                  <2> 		ret
  6601                              <2> %ifdef gui.included
  6602                              <2> bmpfound:
  6603 00004F5D 803D[018A0000]00    <2> 		cmp byte [guion], 0
  6604 00004F64 0F8428000000        <2> 		je near noguibmp
  6605 00004F6A BE00008000          <2> 		mov esi, 0x800000
  6606 00004F6F 31C9                <2> 		xor ecx, ecx
  6607 00004F71 31D2                <2> 		xor edx, edx
  6608 00004F73 31C0                <2> 		xor eax, eax
  6609 00004F75 31DB                <2> 		xor ebx, ebx
  6610 00004F77 E8621B0000          <2> 		call showbmp
  6611 00004F7C 30C0                <2> 		xor al, al
  6612 00004F7E B405                <2> 		mov ah, 5
  6613 00004F80 CD30                <2> 		int 30h
  6614 00004F82 E810220000          <2> 		call guiclear
  6615 00004F87 E8AB1E0000          <2> 		call clearmousecursor
  6616 00004F8C E899220000          <2> 		call reloadallgraphics
  6617 00004F91 C3                  <2> 		ret
  6618                              <2> noguibmp:
  6619 00004F92 BE[9D4F0000]        <2> 		mov esi, warnguimsg
  6620 00004F97 E8C9CDFFFF          <2> 		call print
  6621 00004F9C C3                  <2> 		ret
  6622 00004F9D 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6623 00004FA6 6E6F7420626520646F- <2>
  6624 00004FAF 6E6520776974686F75- <2>
  6625 00004FB8 742074686520475549- <2>
  6626 00004FC1 2E0A00              <2>
  6627                              <2> %endif
  6628                              <2> 
  6629                              <2> filenotfound:
  6630 00004FC4 BE[F74F0000]        <2> 		mov esi, filenf
  6631 00004FC9 E897CDFFFF          <2> 		call print
  6632 00004FCE 8B35[43300000]      <2> 		mov esi, [currentcommandloc]
  6633                              <2> findfilenotfoundzero:
  6634 00004FD4 8A06                <2> 		mov al, [esi]
  6635 00004FD6 46                  <2> 		inc esi
  6636 00004FD7 3C00                <2> 		cmp al, 0
  6637 00004FD9 7411                <2> 		je nofilenamenotfound
  6638 00004FDB 81FE[88CC0300]      <2> 		cmp esi, buftxtend
  6639 00004FE1 7309                <2> 		jae nofilenamenotfound
  6640 00004FE3 3C20                <2> 		cmp al, " "
  6641 00004FE5 75ED                <2> 		jne findfilenotfoundzero
  6642 00004FE7 E879CDFFFF          <2> 		call print
  6643                              <2> nofilenamenotfound:
  6644 00004FEC BE[02500000]        <2> 		mov esi, filenf2
  6645 00004FF1 E86FCDFFFF          <2> 		call print
  6646 00004FF6 C3                  <2> 		ret
  6647 00004FF7 5468652066696C6520- <2> filenf db "The file ",34,0
  6648 00005000 2200                <2>
  6649 00005002 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6650 0000500B 6F7420626520666F75- <2>
  6651 00005014 6E642E0A00          <2>
  6652                              <1> %endif
  6653                              <1> %include 'source/programs/shush.asm'
  6654 00005019 FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6655                              <2> shushprog:
  6656                              <2> %ifdef gui.included
  6657 00005021 803D[018A0000]00    <2> 	cmp byte [guion], 0
  6658 00005028 0F84B9000000        <2> 	je near .noswitchsize
  6659 0000502E 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  6660 00005034 81C606000000        <2> 	add esi, 6
  6661 0000503A 56                  <2> 	push esi
  6662 0000503B 4E                  <2> 	dec esi
  6663                              <2> .findspace:
  6664 0000503C 46                  <2> 	inc esi
  6665 0000503D 8A06                <2> 	mov al, [esi]
  6666 0000503F 3C00                <2> 	cmp al, 0
  6667 00005041 0F84A0000000        <2> 	je near .noswitchsize
  6668 00005047 3C58                <2> 	cmp al, "X"
  6669 00005049 7408                <2> 	je .donefind
  6670 0000504B 3C78                <2> 	cmp al, "x"
  6671 0000504D 7404                <2> 	je .donefind
  6672 0000504F 3C20                <2> 	cmp al, " "
  6673 00005051 75E9                <2> 	jne .findspace
  6674                              <2> .donefind:
  6675 00005053 30C0                <2> 	xor al, al
  6676 00005055 8806                <2> 	mov [esi], al
  6677 00005057 46                  <2> 	inc esi
  6678 00005058 89F7                <2> 	mov edi, esi
  6679 0000505A E8C6E3FFFF          <2> 	call cnvrttxt
  6680 0000505F 89C8                <2> 	mov eax, ecx
  6681 00005061 5E                  <2> 	pop esi
  6682 00005062 50                  <2> 	push eax
  6683 00005063 89F7                <2> 	mov edi, esi
  6684 00005065 E8BBE3FFFF          <2> 	call cnvrttxt
  6685 0000506A 89CB                <2> 	mov ebx, ecx
  6686 0000506C 58                  <2> 	pop eax	
  6687 0000506D 6681FB0000          <2> 	cmp bx, 0
  6688 00005072 0F846F000000        <2> 	je near .noswitchsize
  6689 00005078 663D0000            <2> 	cmp ax, 0
  6690 0000507C 0F8465000000        <2> 	je near .noswitchsize
  6691 00005082 66C1E303            <2> 	shl bx, 3
  6692 00005086 66C1E004            <2> 	shl ax, 4
  6693 0000508A 663B1D[37580000]    <2> 	cmp bx, [resolutionx]
  6694 00005091 7607                <2> 	jbe .nofixx
  6695 00005093 668B1D[37580000]    <2> 	mov bx, [resolutionx]
  6696                              <2> .nofixx:
  6697 0000509A 66051000            <2> 	add ax, 16
  6698 0000509E 663B05[39580000]    <2> 	cmp ax, [resolutiony]
  6699 000050A5 7606                <2> 	jbe .nofixy
  6700 000050A7 66A1[39580000]      <2> 	mov ax, [resolutiony]
  6701                              <2> .nofixy:
  6702 000050AD 662D1000            <2> 	sub ax, 16
  6703 000050B1 6631C9              <2> 	xor cx, cx
  6704 000050B4 6631D2              <2> 	xor dx, dx
  6705 000050B7 66891D[E2750000]    <2> 	mov [termwindow], bx
  6706 000050BE 66A3[E4750000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6707 000050C4 BE[E2750000]        <2> 	mov esi, termwindow
  6708 000050C9 31DB                <2> 	xor ebx, ebx
  6709 000050CB 6631C0              <2> 	xor ax, ax
  6710 000050CE E8502A0000          <2> 	call showwindow
  6711 000050D3 E8BF200000          <2> 	call guiclear
  6712 000050D8 E83DCDFFFF          <2> 	call clear
  6713 000050DD E848210000          <2> 	call reloadallgraphics
  6714 000050E2 E84C1E0000          <2> 	call switchmousepos2
  6715                              <2> .noswitchsize:
  6716                              <2> %endif
  6717 000050E7 BE[F2500000]        <2> 	mov esi, shushmsg
  6718 000050EC E874CCFFFF          <2> 	call print
  6719 000050F1 C3                  <2> 	ret
  6720 000050F2 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6721 000050FB 6F2074686520536F6C- <2>
  6722 00005104 6C65724F5320486172- <2>
  6723 0000510D 646C7920556E69782D- <2>
  6724 00005116 436F6D70617469626C- <2>
  6725 0000511F 65205368656C6C210A- <2>
  6726 00005128 00                  <2>
  6727                              <1> %include 'source/programs/system.asm'
  6728 00005129 FF2C73797374656D00  <2> 	db 255,44,"system",0
  6729 00005132 BE[45520000]        <2> 	mov esi, kernelinfomsg
  6730 00005137 E805CCFFFF          <2> 	call printquiet
  6731 0000513C B9[5B8C0300]        <2> 	mov ecx, osend
  6732 00005141 E801E2FFFF          <2> 	call showdec
  6733 00005146 BE[5A520000]        <2> 	mov esi, diskbytemsg
  6734 0000514B E8F1CBFFFF          <2> 	call printquiet
  6735 00005150 B9[5B8C0300]        <2> 	mov ecx, osend
  6736 00005155 81C1[3C9E2D00]      <2> 	add ecx, commandbufend
  6737 0000515B 81E9[008E0300]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6738 00005161 E8E1E1FFFF          <2> 	call showdec
  6739 00005166 BE[71520000]        <2> 	mov esi, membytemsg
  6740 0000516B E8D1CBFFFF          <2> 	call printquiet
  6741 00005170 BE[D4520000]        <2> 	mov esi, endofmemmsg
  6742 00005175 E8C7CBFFFF          <2> 	call printquiet
  6743 0000517A B9[3CB64D00]        <2> 	mov ecx, bssend
  6744 0000517F E808E1FFFF          <2> 	call showhex
  6745 00005184 BE[8A520000]        <2> 	mov esi, systeminfomsg
  6746 00005189 E8B3CBFFFF          <2> 	call printquiet
  6747                              <2> getcpuspeed:
  6748 0000518E B8FE000000          <2> 	mov eax, 0xFE
  6749 00005193 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6750 00005195 B020                <2> 	mov al, 0x20
  6751 00005197 E620                <2> 	out 0x20, al
  6752 00005199 F4                  <2> 	hlt
  6753 0000519A 0F31                <2> 	rdtsc
  6754 0000519C 89D6                <2> 	mov esi, edx
  6755 0000519E 89C7                <2> 	mov edi, eax
  6756 000051A0 31C0                <2> 	xor eax, eax
  6757 000051A2 C605[53020000]01    <2> 	mov byte [testingcpuspeed], 1
  6758                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6759 000051A9 40                  <2> 	inc eax
  6760 000051AA E9FAFFFFFF          <2> 	jmp cpuspeedloop
  6761                              <2> cpuspeedloopend:
  6762 000051AF 0F31                <2> 	rdtsc
  6763 000051B1 29F8                <2> 	sub eax, edi
  6764 000051B3 29F2                <2> 	sub edx, esi
  6765 000051B5 8915[5C020000]      <2> 	mov [cpuclocksperint + 4], edx
  6766 000051BB A3[58020000]        <2> 	mov [cpuclocksperint], eax
  6767 000051C0 31C0                <2> 	xor eax, eax
  6768 000051C2 E621                <2> 	out 0x21, al
  6769 000051C4 B020                <2> 	mov al, 0x20
  6770 000051C6 E620                <2> 	out 0x20, al
  6771 000051C8 31D2                <2> 	xor edx, edx
  6772 000051CA 31C0                <2> 	xor eax, eax
  6773 000051CC A1[54020000]        <2> 	mov eax, [cpuspeedperint]
  6774 000051D1 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6775                              <2> 				;result by 2
  6776 000051D3 8B1D[66020000]      <2> 	mov ebx, [timeinterval]
  6777 000051D9 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6778 000051DC F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6779 000051DE 89C1                <2> 	mov ecx, eax
  6780 000051E0 E862E1FFFF          <2> 	call showdec
  6781 000051E5 BE[B8520000]        <2> 	mov esi, cpuspeedmsg
  6782 000051EA E852CBFFFF          <2> 	call printquiet
  6783 000051EF 31D2                <2> 	xor edx, edx
  6784 000051F1 A1[58020000]        <2> 	mov eax, [cpuclocksperint]
  6785 000051F6 8B15[5C020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6786 000051FC 8B1D[66020000]      <2> 	mov ebx, [timeinterval]
  6787 00005202 C1EB0A              <2> 	shr ebx, 10
  6788 00005205 F7F3                <2> 	div ebx
  6789 00005207 89C1                <2> 	mov ecx, eax
  6790 00005209 E839E1FFFF          <2> 	call showdec
  6791 0000520E BE[BE520000]        <2> 	mov esi, cpuclockmsg
  6792 00005213 E829CBFFFF          <2> 	call printquiet
  6793 00005218 8B0D[60020000]      <2> 	mov ecx, [memoryspace]
  6794 0000521E C1E914              <2> 	shr ecx, 20
  6795 00005221 41                  <2> 	inc ecx	;the reading is one MB behind
  6796 00005222 E820E1FFFF          <2> 	call showdec
  6797 00005227 BE[C3520000]        <2> 	mov esi, memoryspacemsg
  6798 0000522C E834CBFFFF          <2> 	call print
  6799                              <2> %ifdef sound.included
  6800 00005231 803D[215F0000]00    <2> 	cmp byte [SoundBlaster], 0
  6801 00005238 740A                <2> 	je .nosb
  6802 0000523A BE[A0520000]        <2> 	mov esi, soundblastermsg
  6803 0000523F E821CBFFFF          <2> 	call print
  6804                              <2> .nosb:
  6805                              <2> %endif
  6806 00005244 C3                  <2> 	ret
  6807                              <2> 
  6808 00005245 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6809 0000524E 666F726D6174696F6E- <2>
  6810 00005257 3A0A00              <2>
  6811 0000525A 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6812 00005263 6B2053706163652055- <2>
  6813 0000526C 7365640A00          <2>
  6814 00005271 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6815 0000527A 6F7279205370616365- <2>
  6816 00005283 20557365640A00      <2>
  6817 0000528A 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6818 00005293 6E666F726D6174696F- <2>
  6819 0000529C 6E3A0A00            <2>
  6820                              <2> %ifdef sound.included
  6821 000052A0 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6822 000052A9 746572204465746563- <2>
  6823 000052B2 7465642E0A00        <2>
  6824                              <2> %endif
  6825 000052B8 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6826 000052BE 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6827 000052C3 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6828 000052CC 2053706163650A00    <2>
  6829 000052D4 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6830 000052DD 6D6F72792053706163- <2>
  6831 000052E6 653A20307800        <2>
  6832                              <1> %include 'source/programs/time.asm'
  6833 000052EC FF2C74696D6500      <2> db 255,44,"time",0	
  6834                              <2> timer:
  6835 000052F3 8B35[43300000]      <2> 	mov esi, [currentcommandloc]
  6836 000052F9 81C604000000        <2> 	add esi, 4
  6837 000052FF 803E00              <2> 	cmp byte [esi], 0
  6838 00005302 7477                <2> 	je .norun
  6839 00005304 46                  <2> 	inc esi
  6840 00005305 8B0D[6B020000]      <2> 	mov ecx, [timeseconds]
  6841 0000530B 51                  <2> 	push ecx
  6842 0000530C 8B0D[6F020000]      <2> 	mov ecx, [timenanoseconds]
  6843 00005312 51                  <2> 	push ecx
  6844 00005313 BF[88C80300]        <2> 	mov edi, buftxt
  6845                              <2> .cpcmd:
  6846 00005318 8A06                <2> 	mov al, [esi]
  6847 0000531A 8807                <2> 	mov [edi], al
  6848 0000531C 46                  <2> 	inc esi
  6849 0000531D 47                  <2> 	inc edi
  6850 0000531E 3C00                <2> 	cmp al, 0
  6851 00005320 75F6                <2> 	jne .cpcmd
  6852 00005322 E840DCFFFF          <2> 	call run
  6853 00005327 5A                  <2> 	pop edx
  6854 00005328 58                  <2> 	pop eax
  6855                              <2> 
  6856 00005329 8B0D[6B020000]      <2> 	mov ecx, [timeseconds]
  6857 0000532F 29C1                <2> 	sub ecx, eax
  6858 00005331 8B1D[6F020000]      <2> 	mov ebx, [timenanoseconds]
  6859 00005337 29D3                <2> 	sub ebx, edx
  6860 00005339 7307                <2> 	jae .nosign
  6861 0000533B 81C300CA9A3B        <2> 	add ebx, 1000000000
  6862 00005341 49                  <2> 	dec ecx
  6863                              <2> .nosign:
  6864 00005342 E800E0FFFF          <2> 	call showdec
  6865                              <2> 	
  6866 00005347 89D9                <2> 	mov ecx, ebx
  6867 00005349 BE[19410000]        <2> 	mov esi, timenscache
  6868 0000534E C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6869 00005355 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6870 0000535C C6460A30            <2> 	mov byte [esi + 10], "0"
  6871 00005360 BE[24410000]        <2> 	mov esi, timenscacheend
  6872 00005365 E8BADDFFFF          <2> 	call convert
  6873 0000536A BE[19410000]        <2> 	mov esi, timenscache
  6874 0000536F E8F1C9FFFF          <2> 	call print
  6875 00005374 C605[19410000]08    <2> 	mov byte [timenscache], 8
  6876                              <2> .norun:
  6877 0000537B C3                  <2> 	ret
  6878                              <2> 	
  6879                              <1> %include 'source/programs/turnoff.asm'
  6880 0000537C FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6881 00005385 00                  <2>
  6882                              <2> 	turnoff:
  6883 00005386 66C705[020D0000]-   <2> 			mov word [realmodeptr], shutdown
  6884 0000538D [9953]              <2>
  6885 0000538F BB[C4530000]        <2> 			mov ebx, halt
  6886 00005394 E857B8FFFF          <2> 			call realmode
  6887                              <2> 
  6888                              <2> [BITS 16]
  6889                              <2> 		shutdown:
  6890 00005399 B453                <2> 			mov ah, 0x53
  6891 0000539B B004                <2> 			mov al, 4
  6892 0000539D 31DB                <2> 			xor bx, bx
  6893 0000539F CD15                <2> 			int 0x15
  6894                              <2> 			
  6895 000053A1 B453                <2> 			mov ah, 0x53
  6896 000053A3 B001                <2> 			mov al, 1
  6897 000053A5 31DB                <2> 			xor bx, bx
  6898 000053A7 CD15                <2> 			int 0x15
  6899                              <2> 			
  6900 000053A9 B453                <2> 			mov ah, 0x53
  6901 000053AB B008                <2> 			mov al, 8
  6902 000053AD BB0100              <2> 			mov bx, 1
  6903 000053B0 B90100              <2> 			mov cx, 1
  6904 000053B3 CD15                <2> 			int 0x15
  6905                              <2> 			
  6906 000053B5 B453                <2> 			mov ah, 0x53
  6907 000053B7 B007                <2> 			mov al, 7
  6908 000053B9 BB0100              <2> 			mov bx, 1
  6909 000053BC B90300              <2> 			mov cx, 3
  6910 000053BF CD15                <2> 			int 0x15
  6911 000053C1 E9FDFF              <2> 			jmp $
  6912                              <2> 			[BITS 32]
  6913 000053C4 E9FBFFFFFF          <2> halt: jmp $
  6914                              <1> %include 'source/programs/wait.asm'
  6915 000053C9 FF2C7761697400      <2> db 255,44,"wait",0
  6916                              <2> waitkey:
  6917 000053D0 E8ACCFFFFF          <2> 		call getchar
  6918 000053D5 C3                  <2> 		ret
  6919                              <1> %include 'source/programs/while.asm'
  6920 000053D6 FF2C7768696C6500    <2> db 255,44,"while",0
  6921 000053DE 30C0                <2> whilecmd:  xor al, al
  6922 000053E0 3805[82B40300]      <2> 	cmp [BATCHISON], al
  6923 000053E6 0F84D8E7FFFF        <2> 	je near notbatch
  6924 000053EC 8B35[7EB40300]      <2> 	mov esi, [BATCHPOS]
  6925 000053F2 81EE02000000        <2> 	sub esi, 2
  6926 000053F8 4E                  <2> whilefnd: dec esi
  6927 000053F9 8A06                <2> 	mov al, [esi]
  6928 000053FB 3C0A                <2> 	cmp al, 10
  6929 000053FD 0F840D000000        <2> 	je near whilefnd2
  6930 00005403 3C00                <2> 	cmp al, 0
  6931 00005405 0F8405000000        <2> 	je near whilefnd2
  6932 0000540B E9E8FFFFFF          <2> 	jmp whilefnd
  6933                              <2> whilefnd2:
  6934 00005410 46                  <2> 	inc esi
  6935 00005411 8935[84B40300]      <2> 	mov [LOOPPOS], esi
  6936 00005417 C605[83B40300]01    <2> 	mov BYTE [LOOPON], 1
  6937 0000541E BE[88C80300]        <2> 	mov esi, buftxt
  6938 00005423 BB[88C80300]        <2> 	mov ebx, buftxt
  6939 00005428 81C306000000        <2> 	add ebx, 6
  6940 0000542E E9F2F4FFFF          <2> 	jmp chkeqsn
  6941                              <1> progend:		;programs end here	
  6942                              <1> batchprogend:
  6943                                  	%include "source/hardware.asm"
  6944                              <1> %ifdef gui.included
  6945                              <1> 	%include "source/drivers/video/vesa.asm"
  6946                              <2> [BITS 16]
  6947                              <2> guiswitch:
  6948 00005433 81F90000            <2> 	cmp cx, 0
  6949 00005437 750B                <2> 	jne guiswitchdefnum
  6950 00005439 B81200              <2> 	mov ax, 12h
  6951 0000543C 31DB                <2> 	xor bx, bx
  6952 0000543E CD10                <2> 	int 10h
  6953 00005440 E85100              <2> 	call guiloadagain
  6954                              <2> guiswitchnocando:
  6955 00005443 C3                  <2> 	ret	;return without switching as mode number is bad
  6956                              <2> guiswitchdefnum:	;switch to a defined mode number
  6957 00005444 B8004F              <2> 	mov ax, 0x4F00
  6958 00005447 BF[2556]            <2> 	mov di, VBEMODEBLOCK
  6959 0000544A CD10                <2> 	int 10h
  6960 0000544C BE[4756]            <2> 	mov si, reserved
  6961 0000544F 81EE0200            <2> 	sub si, 2
  6962                              <2> .loop:
  6963 00005453 81C60200            <2> 	add si, 2
  6964 00005457 81FE[2557]          <2> 	cmp si, oemdata
  6965 0000545B 74E6                <2> 	je guiswitchnocando
  6966 0000545D 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6967 00005461 74E0                <2> 	je guiswitchnocando
  6968 00005463 390C                <2> 	cmp [si], cx
  6969 00005465 75EC                <2> 	jne .loop
  6970 00005467 8936[7B55]          <2> 	mov [videomodecache], si
  6971 0000546B 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6972 0000546F B8014F              <2> 	mov ax, 0x4F01
  6973 00005472 BF[2558]            <2> 	mov di, VBEMODEINFOBLOCK
  6974 00005475 890E[7955]          <2> 	mov [vesamode], cx
  6975 00005479 CD10                <2> 	int 10h
  6976 0000547B E9DB00              <2> 	jmp selectedvesa
  6977                              <2> guiload:
  6978 0000547E BE[FD55]            <2> 	mov si, bootmsg
  6979 00005481 E8FDAB              <2> 	call printrm
  6980 00005484 31C0                <2> 	xor ax, ax
  6981 00005486 CD16                <2> 	int 16h
  6982 00005488 3C79                <2> 	cmp al, "y"
  6983 0000548A 0F85B1AB            <2> 	jne near vgaset
  6984 0000548E BE[DB89]            <2> 	mov si, crlf
  6985 00005491 E8EDAB              <2> 	call printrm
  6986                              <2> guiloadagain:
  6987 00005494 B8004F              <2> 	mov ax, 04F00h
  6988 00005497 BF[2556]            <2> 	mov di, VBEMODEBLOCK
  6989 0000549A CD10                <2> 	int 10h
  6990 0000549C BE[4756]            <2> 	mov si, reserved
  6991 0000549F 81EE0200            <2> 	sub si, 2
  6992                              <2> findvideomodes:
  6993 000054A3 81C60200            <2> 	add si, 2
  6994 000054A7 8B0C                <2> 	mov cx, [si]
  6995 000054A9 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6996 000054AD 0F840B00            <2> 	je near nextvmode
  6997 000054B1 81FE[2557]          <2> 	cmp si, oemdata
  6998 000054B5 0F8386AB            <2> 	jae near vgaset	;kill if no valid list is found
  6999 000054B9 E9E7FF              <2> 	jmp findvideomodes 	
  7000                              <2> ;debug,shows vmodes available
  7001                              <2> nextvmode:
  7002 000054BC 81EE0200            <2> 	sub si, 2
  7003 000054C0 81FE[4756]          <2> 	cmp si, reserved
  7004 000054C4 0F82CCFF            <2> 	jb near guiloadagain
  7005 000054C8 8B0C                <2> 	mov cx, [si]
  7006 000054CA 81F9FFFF            <2> 	cmp cx, 0xFFFF
  7007 000054CE 0F84EAFF            <2> 	je near nextvmode
  7008 000054D2 81C90040            <2> 	or cx, 0x4000 		;Linear Frame Buffer
  7009 000054D6 B8014F              <2> 	mov ax, 04F01h
  7010 000054D9 BF[2558]            <2> 	mov di, VBEMODEINFOBLOCK
  7011 000054DC 890E[7955]          <2> 	mov [vesamode], cx
  7012 000054E0 CD10                <2> 	int 10h
  7013 000054E2 A0[3E58]            <2> 	mov al, [bitsperpixel]
  7014 000054E5 3C10                <2> 	cmp al, 16
  7015 000054E7 75D3                <2> 	jne nextvmode
  7016 000054E9 8936[7B55]          <2> 	mov [videomodecache], si
  7017 000054ED 84E4                <2> 	test ah, ah
  7018 000054EF 0F842300            <2> 	jz near setvesamode
  7019 000054F3 E9C6FF              <2> 	jmp nextvmode
  7020 000054F6 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  7021 000054FF 20766964656F206D6F- <2>
  7022 00005508 6465204F4B3F28792F- <2>
  7023 00005511 6E290D0A00          <2>
  7024                              <2> setvesamode:
  7025 00005516 8B36[7B55]          <2> 	mov si, [videomodecache]
  7026 0000551A 8B0C                <2> 	mov cx, [si]
  7027 0000551C E86500              <2> 	call decshow
  7028 0000551F B03A                <2> 	mov al, ':'
  7029 00005521 E8D100              <2> 	call char
  7030 00005524 8B0E[3758]          <2> 	mov cx, [resolutionx]
  7031 00005528 E85900              <2> 	call decshow
  7032 0000552B B078                <2> 	mov al, "x"
  7033 0000552D E8C500              <2> 	call char
  7034 00005530 8B0E[3958]          <2> 	mov cx, [resolutiony]
  7035 00005534 E84D00              <2> 	call decshow
  7036 00005537 B040                <2> 	mov al, "@"
  7037 00005539 E8B900              <2> 	call char
  7038 0000553C 31C9                <2> 	xor cx, cx
  7039 0000553E 8A0E[3E58]          <2> 	mov cl, [bitsperpixel]
  7040 00005542 E83F00              <2> 	call decshow
  7041 00005545 BE[F654]            <2> 	mov si, isthisvideook
  7042 00005548 E836AB              <2> 	call printrm
  7043 0000554B 31C0                <2> 	xor ax, ax
  7044 0000554D CD16                <2> 	int 16h
  7045 0000554F 8B36[7B55]          <2> 	mov si, [videomodecache]
  7046 00005553 3C79                <2> 	cmp al, "y"
  7047 00005555 0F8563FF            <2> 	jne near nextvmode
  7048                              <2> selectedvesa:
  7049 00005559 8B16[3758]          <2> 	mov dx, [resolutionx]
  7050 0000555D 01D2                <2> 	add dx, dx
  7051 0000555F 8916[2559]          <2> 	mov [resolutionx2], dx
  7052 00005563 31D2                <2> 	xor dx, dx
  7053 00005565 31C9                <2> 	xor cx, cx
  7054 00005567 B8024F              <2> 	mov ax, 04F02h
  7055 0000556A 8B1E[7955]          <2> 	mov bx, [vesamode]
  7056 0000556E CD10                <2> 	int 10h		;enter VESA mode
  7057 00005570 C606[018A]01        <2> 	mov byte [guion], 1
  7058 00005575 E8D7AA              <2> 	call getmemorysize;get the memory map after the video is initialized
  7059 00005578 C3                  <2> 	ret
  7060                              <2> 	
  7061 00005579 0000                <2> vesamode dw 0
  7062 0000557B 0000                <2> videomodecache dw 0
  7063                              <2> 
  7064 0000557D 0000000000          <2> dcnm db 0,0,0,0,0
  7065 00005582 0000                <2> dcnmend db 0,0
  7066                              <2> 
  7067                              <2> 
  7068                              <2> decshow:
  7069 00005584 BE[7D55]            <2> 	mov si, dcnm
  7070                              <2> decclear:
  7071 00005587 B030                <2> 	mov al, "0"
  7072 00005589 8804                <2> 	mov [si], al
  7073 0000558B 46                  <2> 	inc si
  7074 0000558C 81FE[8255]          <2> 	cmp si, dcnmend
  7075 00005590 76F5                <2> 	jbe decclear
  7076 00005592 4E                  <2> 	dec si
  7077 00005593 E81500              <2> 	call convertrm
  7078 00005596 BE[7D55]            <2> 	mov si, dcnm
  7079                              <2> dectst:
  7080 00005599 8A04                <2> 	mov al, [si]
  7081 0000559B 46                  <2> 	inc si
  7082 0000559C 81FE[8255]          <2> 	cmp si, dcnmend
  7083 000055A0 7704                <2> 	ja dectstend
  7084 000055A2 3C30                <2> 	cmp al, "0"
  7085 000055A4 76F3                <2> 	jbe dectst
  7086                              <2> dectstend:
  7087 000055A6 4E                  <2> 	dec si
  7088 000055A7 E8D7AA              <2> 	call printrm
  7089 000055AA C3                  <2> 	ret
  7090                              <2> 	
  7091                              <2> 	
  7092                              <2> convertrm:
  7093 000055AB 4E                  <2> 	dec si
  7094 000055AC 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  7095                              <2> cnvrtrm:
  7096 000055AE 89DE                <2> 	mov si, bx
  7097 000055B0 81EE0300            <2> 	sub si, 3
  7098 000055B4 46                  <2> ten3rm:	inc si
  7099 000055B5 81F9E803            <2> 	cmp cx, 1000
  7100 000055B9 7209                <2> 	jb ten2rm
  7101 000055BB 81E9E803            <2> 	sub cx, 1000
  7102 000055BF FE04                <2> 	inc byte [si]
  7103 000055C1 E9EAFF              <2> 	jmp cnvrtrm
  7104 000055C4 46                  <2> ten2rm:	inc si
  7105 000055C5 81F96400            <2> 	cmp cx, 100
  7106 000055C9 7209                <2> 	jb ten1rm
  7107 000055CB 81E96400            <2> 	sub cx, 100
  7108 000055CF FE04                <2> 	inc byte [si]
  7109 000055D1 E9DAFF              <2> 	jmp cnvrtrm
  7110 000055D4 46                  <2> ten1rm:	inc si
  7111 000055D5 81F90A00            <2> 	cmp cx, 10
  7112 000055D9 7209                <2> 	jb ten0rm
  7113 000055DB 81E90A00            <2> 	sub cx, 10
  7114 000055DF FE04                <2> 	inc byte [si]
  7115 000055E1 E9CAFF              <2> 	jmp cnvrtrm
  7116 000055E4 46                  <2> ten0rm:	inc si
  7117 000055E5 81F90100            <2> 	cmp cx, 1
  7118 000055E9 7209                <2> 	jb tendnrm
  7119 000055EB 81E90100            <2> 	sub cx, 1
  7120 000055EF FE04                <2> 	inc byte [si]
  7121 000055F1 E9BAFF              <2> 	jmp cnvrtrm
  7122                              <2> tendnrm:
  7123 000055F4 C3                  <2> 	ret
  7124                              <2> 
  7125                              <2>     char: 		    ;char must be in al
  7126 000055F5 BB0700              <2>        mov bx, 07
  7127 000055F8 B40E                <2> 	   mov ah, 0Eh
  7128 000055FA CD10                <2> 	   int 10h
  7129 000055FC C3                  <2> 	   ret
  7130                              <2> 
  7131 000055FD 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  7132 00005606 20746865204755493F- <2>
  7133 0000560F 28792F6E2900        <2>
  7134                              <2> 
  7135                              <2> 
  7136                              <2> mcursor:
  7137 00005615 01                  <2> 	db	00000001b
  7138 00005616 81                  <2> 	db	10000001b
  7139 00005617 C1                  <2> 	db	11000001b
  7140 00005618 E1                  <2> 	db	11100001b
  7141 00005619 F1                  <2> 	db	11110001b
  7142 0000561A F9                  <2> 	db	11111001b
  7143 0000561B FD                  <2> 	db	11111101b
  7144 0000561C FF                  <2> 	db	11111111b
  7145 0000561D F9                  <2> 	db	11111001b
  7146 0000561E B9                  <2> 	db	10111001b
  7147 0000561F 39                  <2> 	db	00111001b
  7148 00005620 1C                  <2> 	db	00011100b
  7149 00005621 1C                  <2> 	db	00011100b
  7150 00005622 0E                  <2> 	db	00001110b
  7151 00005623 0E                  <2> 	db	00001110b
  7152 00005624 0C                  <2> 	db	00001100b
  7153                              <2> mcursorend:
  7154                              <2> 
  7155                              <2> 
  7156                              <2> VBEMODEBLOCK:
  7157 00005625 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  7158 00005629 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  7159 0000562B 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  7160 0000562F 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  7161 00005633 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  7162 00005637 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  7163 00005639 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  7164 0000563B 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  7165 0000563F 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  7166 00005643 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  7167 00005647 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  7168 00005725 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  7169                              <2> 
  7170                              <2> VBEMODEINFOBLOCK:
  7171                              <2> ;Mandatory information for all VBE revision
  7172 00005825 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  7173 00005827 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  7174 00005828 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  7175 00005829 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  7176 0000582B 00<rept>            <2> winsize          	times  2 db 0	;Window size
  7177 0000582D 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  7178 0000582F 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  7179 00005831 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  7180 00005835 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  7181                              <2> 
  7182                              <2> ;Mandatory information for VBE 1.2 and above
  7183 00005837 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  7184 00005839 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  7185 0000583B 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  7186 0000583C 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  7187 0000583D 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  7188 0000583E 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  7189 0000583F 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  7190 00005840 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  7191 00005841 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  7192 00005842 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  7193 00005843 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  7194                              <2> 
  7195                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  7196 00005844 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  7197 00005845 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  7198 00005846 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  7199 00005847 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  7200 00005848 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  7201 00005849 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  7202 0000584A 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  7203 0000584B 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  7204 0000584C 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  7205                              <2> 
  7206                              <2> ;Mandatory information for VBE 2.0 and above
  7207 0000584D 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  7208 00005851 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  7209 00005855 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  7210 00005857 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  7211                              <2> 
  7212 00005925 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  7213                              <2> VBEEND:
  7214                              <2> [BITS 32]
  7215                              <1> 	%include "source/drivers/input/mouse.asm"
  7216 00005929 00                  <2> mousedisabled db 0
  7217                              <2> 	
  7218                              <2> 	cursorgui:
  7219 0000592A 803D[93890000]01    <2> 		cmp byte [mouseon], 1
  7220 00005931 0F8432000000        <2> 		je near mousedaemon
  7221 00005937 803D[018A0000]00    <2> 		cmp byte [guion], 0
  7222 0000593E 0F8415070000        <2> 		je near entdown
  7223                              <2> 	initmouse:
  7224 00005944 803D[018A0000]00    <2> 		cmp byte [guion], 0
  7225 0000594B 7405                <2> 		je noswmsposinit
  7226 0000594D E8E1150000          <2> 		call switchmousepos2
  7227                              <2> 	noswmsposinit:
  7228 00005952 E85D020000          <2> 	  	call PS2SET
  7229 00005957 E886020000          <2> 		call ACTMOUS
  7230 0000595C C605[93890000]01    <2> 		mov byte [mouseon],1
  7231 00005963 E89F020000          <2> 		call GETB 	;Get the responce byte of the mouse (like: Hey i am active)
  7232                              <2> 		;call GETB
  7233                              <2> 				;if the bytes are mixed up,
  7234                              <2> 				;remove this line or add another of this line.
  7235                              <2> 	nomouse:
  7236 00005968 C3                  <2> 		ret
  7237                              <2> 		
  7238                              <2> 	mousedaemon:
  7239 00005969 803D[93890000]01    <2> 		cmp byte [mouseon], 1
  7240 00005970 75D2                <2> 		jne initmouse
  7241 00005972 E464                <2> 		in al, 64h ; Status
  7242 00005974 A820                <2> 		test al, 20h ; PS2-Mouse?
  7243 00005976 0F8502000000        <2> 		jnz near moused
  7244 0000597C F4                  <2> 		hlt
  7245 0000597D C3                  <2> 		ret
  7246                              <2> 	moused:
  7247 0000597E 803D[29590000]01    <2> 		cmp byte [mousedisabled], 1
  7248 00005985 74E1                <2> 		je nomouse
  7249 00005987 E87B020000          <2> 		  call GETB
  7250 0000598C 88C3                <2> 		  mov  bl, al
  7251 0000598E 80E301              <2> 		  and  bl, 1
  7252 00005991 881D[2C5C0000]      <2> 		  mov  BYTE [LBUTTON], bl
  7253 00005997 88C3                <2> 		  mov  bl, al
  7254 00005999 80E302              <2> 		  and  bl, 2
  7255 0000599C D0EB                <2> 		  shr  bl, 1
  7256 0000599E 881D[2D5C0000]      <2> 		  mov  BYTE [RBUTTON], bl
  7257 000059A4 88C3                <2> 		  mov  bl, al
  7258 000059A6 80E304              <2> 		  and  bl, 4
  7259 000059A9 C0EB02              <2> 		  shr  bl, 2
  7260 000059AC 881D[2E5C0000]      <2> 		  mov  BYTE [MBUTTON], bl
  7261 000059B2 E850020000          <2> 		  call GETB
  7262 000059B7 A2[2F5C0000]        <2> 		  mov  BYTE [XCOORD], al
  7263 000059BC E846020000          <2> 		  call GETB
  7264 000059C1 A2[305C0000]        <2> 		  mov  BYTE [YCOORD], al
  7265                              <2> 
  7266                              <2> 	showpixelcursor:
  7267 000059C6 668B15[1B5B0000]    <2> 		mov dx, [mousecursorposition]
  7268 000059CD 668B0D[1D5B0000]    <2> 		mov cx, [mousecursorposition + 2]
  7269 000059D4 668915[175B0000]    <2> 		mov [lastmouseposition], dx
  7270 000059DB 66890D[195B0000]    <2> 		mov [lastmouseposition + 2], cx
  7271 000059E2 A0[2F5C0000]        <2> 		mov al, [XCOORD]
  7272 000059E7 3C80                <2> 		cmp al, 128
  7273 000059E9 730C                <2> 		jae subxcoord
  7274 000059EB 00C0                <2> 		add al, al
  7275 000059ED 30E4                <2> 		xor ah, ah
  7276 000059EF 6601C2              <2> 		add dx, ax
  7277 000059F2 E90B000000          <2> 		jmp subxcoorddn
  7278                              <2> 	subxcoord:
  7279 000059F7 00C0                <2> 		add al, al
  7280 000059F9 30DB                <2> 		xor bl, bl
  7281 000059FB 28C3                <2> 		sub bl, al
  7282 000059FD 30FF                <2> 		xor bh, bh
  7283 000059FF 6629DA              <2> 		sub dx, bx
  7284                              <2> 	subxcoorddn:
  7285 00005A02 8A1D[305C0000]      <2> 		mov bl, [YCOORD]
  7286 00005A08 30C0                <2> 		xor al, al
  7287 00005A0A 28D8                <2> 		sub al, bl
  7288 00005A0C 3C80                <2> 		cmp al, 128
  7289 00005A0E 730A                <2> 		jae subycoord
  7290 00005A10 30E4                <2> 		xor ah, ah
  7291 00005A12 6601C1              <2> 		add cx, ax
  7292 00005A15 E909000000          <2> 		jmp subycoorddn
  7293                              <2> 	subycoord:
  7294 00005A1A 30DB                <2> 		xor bl, bl
  7295 00005A1C 28C3                <2> 		sub bl, al
  7296 00005A1E 30FF                <2> 		xor bh, bh
  7297 00005A20 6629D9              <2> 		sub cx, bx
  7298                              <2> 	subycoorddn:
  7299 00005A23 6681FA204E          <2> 		cmp dx, 20000
  7300 00005A28 7603                <2> 		jbe nooriginx2
  7301 00005A2A 6631D2              <2> 		xor dx, dx
  7302                              <2> 	nooriginx2:
  7303 00005A2D 6681F9204E          <2> 		cmp cx, 20000
  7304 00005A32 7603                <2> 		jbe nooriginy2
  7305 00005A34 6631C9              <2> 		xor cx, cx
  7306                              <2> 	nooriginy2:
  7307 00005A37 6681FA0000          <2> 		cmp dx, 0
  7308 00005A3C 7415                <2> 		je nofixxcolumn2
  7309 00005A3E 663B15[25590000]    <2> 		cmp dx, [resolutionx2]
  7310 00005A45 720C                <2> 		jb nofixxcolumn2
  7311 00005A47 668B15[25590000]    <2> 		mov dx, [resolutionx2]
  7312 00005A4E 6681EA0200          <2> 		sub dx, 2
  7313                              <2> 	nofixxcolumn2:
  7314 00005A53 6681F90000          <2> 		cmp cx, 0
  7315 00005A58 7415                <2> 		je nofixyrow2
  7316 00005A5A 663B0D[39580000]    <2> 		cmp cx, [resolutiony]
  7317 00005A61 720C                <2> 		jb nofixyrow2
  7318 00005A63 668B0D[39580000]    <2> 		mov cx, [resolutiony]
  7319 00005A6A 6681E90100          <2> 		sub cx, 1
  7320                              <2> 	nofixyrow2:
  7321 00005A6F 668915[1B5B0000]    <2> 		mov [mousecursorposition], dx
  7322 00005A76 66890D[1D5B0000]    <2> 		mov [mousecursorposition + 2], cx
  7323 00005A7D 803D[018A0000]00    <2> 		cmp byte [guion], 0
  7324 00005A84 0F8495000000        <2> 		je near termmouse
  7325 00005A8A E844140000          <2> 		call switchmousepos ;use dragging code to ensure proper icon drag
  7326 00005A8F 803D[2C5C0000]01    <2> 		cmp byte [LBUTTON], 1
  7327 00005A96 0F848F260000        <2> 		je near clickicon
  7328 00005A9C 803D[2D5C0000]01    <2> 		cmp byte [RBUTTON], 1
  7329 00005AA3 0F8482260000        <2> 		je near clickicon
  7330 00005AA9 A0[18810000]        <2> 		mov al, [pbutton]
  7331 00005AAE C705[1B810000]0000- <2> 		mov dword [dragging], 0
  7332 00005AB6 0000                <2>
  7333 00005AB8 3C00                <2> 		cmp al, 0
  7334 00005ABA 740F                <2> 		je nopreviousbutton
  7335 00005ABC E876130000          <2> 		call clearmousecursor
  7336 00005AC1 E864170000          <2> 		call reloadallgraphics
  7337                              <2> 	windowtermcopyend:
  7338 00005AC6 E868140000          <2> 		call switchmousepos2
  7339                              <2> 	nopreviousbutton:
  7340 00005ACB 30C0                <2> 		xor al, al
  7341 00005ACD A2[18810000]        <2> 		mov [pbutton], al
  7342 00005AD2 A2[82860000]        <2> 		mov [windrag], al
  7343 00005AD7 A0[2C5C0000]        <2> 		mov al, [LBUTTON]
  7344 00005ADC A2[19810000]        <2> 		mov [pLBUTTON], al
  7345 00005AE1 A0[2D5C0000]        <2> 		mov al, [RBUTTON]
  7346 00005AE6 A2[1A810000]        <2> 		mov [pRBUTTON], al
  7347 00005AEB 31D2                <2> 		xor edx, edx
  7348 00005AED 668B15[1B5B0000]    <2> 		mov dx, [mousecursorposition]
  7349 00005AF4 668B0D[1D5B0000]    <2> 		mov cx, [mousecursorposition + 2]
  7350 00005AFB 66BB18C7            <2> 		mov bx, 1100011100011000b
  7351 00005AFF 66B80100            <2> 		mov ax, 1
  7352 00005B03 C605[15810000]01    <2> 		mov byte [showcursorfonton], 1
  7353 00005B0A E80A1E0000          <2> 		call showfontvesa
  7354 00005B0F C605[15810000]00    <2> 		mov byte [showcursorfonton], 0
  7355 00005B16 C3                  <2> 		ret
  7356                              <2> 
  7357 00005B17 00000000            <2> lastmouseposition dw 0,0
  7358 00005B1B 00000000            <2> mousecursorposition dw 0,0	
  7359                              <2> 
  7360                              <2> termmouse:
  7361 00005B1F BE[9CE32B00]        <2> 		mov esi, videobuf
  7362 00005B24 31D2                <2> 		xor edx, edx
  7363 00005B26 668B15[175B0000]    <2> 		mov dx, [lastmouseposition]
  7364 00005B2D 668B0D[195B0000]    <2> 		mov cx, [lastmouseposition + 2]
  7365 00005B34 66A1[B25B0000]      <2> 		mov ax, [cursorcache]
  7366 00005B3A 663D0000            <2> 		cmp ax, 0
  7367 00005B3E 7425                <2> 		je nocopycursorcache
  7368 00005B40 66C1E104            <2> 		shl cx, 4
  7369 00005B44 66C1E203            <2> 		shl dx, 3
  7370 00005B48 01D6                <2> 		add esi, edx
  7371 00005B4A 6631D2              <2> 		xor dx, dx
  7372 00005B4D 8A15[09260000]      <2> 		mov dl, [charxy]
  7373 00005B53 6641                <2> 		inc cx
  7374                              <2> termmousecplp1:
  7375 00005B55 01D6                <2> 		add esi, edx
  7376 00005B57 6649                <2> 		dec cx
  7377 00005B59 6681F90000          <2> 		cmp cx, 0
  7378 00005B5E 75F5                <2> 		jne termmousecplp1
  7379 00005B60 29D6                <2> 		sub esi, edx
  7380 00005B62 668906              <2> 		mov [esi], ax
  7381                              <2> nocopycursorcache:
  7382 00005B65 BE[9CE32B00]        <2> 		mov esi, videobuf
  7383 00005B6A 31D2                <2> 		xor edx, edx
  7384 00005B6C 668B15[1B5B0000]    <2> 		mov dx, [mousecursorposition]
  7385 00005B73 668B0D[1D5B0000]    <2> 		mov cx, [mousecursorposition + 2]
  7386 00005B7A 66C1E104            <2> 		shl cx, 4
  7387 00005B7E 66C1E203            <2> 		shl dx, 3
  7388 00005B82 01D6                <2> 		add esi, edx
  7389 00005B84 6631D2              <2> 		xor dx, dx
  7390 00005B87 8A15[09260000]      <2> 		mov dl, [charxy]
  7391 00005B8D 6641                <2> 		inc cx
  7392                              <2> termmousecplp2:
  7393 00005B8F 01D6                <2> 		add esi, edx
  7394 00005B91 6649                <2> 		dec cx
  7395 00005B93 6681F90000          <2> 		cmp cx, 0
  7396 00005B98 75F5                <2> 		jne termmousecplp2
  7397 00005B9A 29D6                <2> 		sub esi, edx
  7398 00005B9C 668B06              <2> 		mov ax, [esi]
  7399 00005B9F 66A3[B25B0000]      <2> 		mov [cursorcache], ax
  7400 00005BA5 B080                <2> 		mov al, 128
  7401 00005BA7 B407                <2> 		mov ah, 7
  7402 00005BA9 668906              <2> 		mov [esi], ax
  7403 00005BAC E86ACDFFFF          <2> 		call termcopy
  7404 00005BB1 C3                  <2> 		ret
  7405 00005BB2 0000                <2> cursorcache db 0,0
  7406                              <2> 
  7407                              <2> PS2SET:
  7408 00005BB4 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7409 00005BB6 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7410 00005BB8 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7411 00005BBD C3                  <2> ret
  7412                              <2> 
  7413                              <2> CHKPRT:
  7414 00005BBE 66B96400            <2>   mov  cx, 100
  7415                              <2>  .again:
  7416 00005BC2 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7417 00005BC4 A802                <2>   test al, 2		; Check if input buffer is empty
  7418 00005BC6 7402                <2>   je .go
  7419 00005BC8 E2F8                <2>   loop .again
  7420                              <2>  .go:
  7421 00005BCA C3                  <2> ret
  7422                              <2> 
  7423                              <2> WMOUS:
  7424 00005BCB B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7425 00005BCD E664                <2>   out  0x64, al		; write to keyboardcontroller
  7426 00005BCF E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7427 00005BD4 C3                  <2> ret
  7428                              <2> 
  7429                              <2> MBUFFUL:
  7430 00005BD5 66B96400            <2>   mov cx, 100
  7431                              <2>  .mn:
  7432 00005BD9 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7433 00005BDB A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7434 00005BDD 7402                <2>   jz  .mnn
  7435 00005BDF E2F8                <2>   loop .mn
  7436                              <2>  .mnn:
  7437 00005BE1 C3                  <2> ret
  7438                              <2> 
  7439                              <2> 
  7440                              <2> ACTMOUS:
  7441 00005BE2 E8E4FFFFFF          <2>   call WMOUS
  7442 00005BE7 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7443 00005BE9 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7444 00005BEB E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7445 00005BF0 E801000000          <2>   call CHKMOUS		; check if a byte is available
  7446 00005BF5 C3                  <2> ret
  7447                              <2> 
  7448                              <2> CHKMOUS:
  7449 00005BF6 B300                <2>   mov  bl, 0
  7450 00005BF8 66B96400            <2>   mov cx, 100
  7451                              <2>  .vrd:
  7452 00005BFC E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7453 00005BFE A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7454 00005C00 7504                <2>   jnz .yy
  7455 00005C02 E2F8                <2>   loop .vrd
  7456 00005C04 B301                <2>   mov  bl, 1
  7457                              <2>  .yy:
  7458 00005C06 C3                  <2> ret
  7459                              <2> 
  7460                              <2> GETB:
  7461                              <2>  .cagain:
  7462 00005C07 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7463 00005C0C 08DB                <2>   or bl, bl
  7464 00005C0E 75F7                <2>   jnz .cagain
  7465 00005C10 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7466 00005C12 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7467 00005C14 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7468 00005C19 6631C0              <2>   xor  ax, ax
  7469 00005C1C E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7470 00005C1E 88C2                <2>   mov  dl, al
  7471 00005C20 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7472 00005C22 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7473 00005C24 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7474 00005C29 88D0                <2>   mov  al, dl
  7475 00005C2B C3                  <2> ret
  7476                              <2> 
  7477 00005C2C 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7478 00005C2D 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7479 00005C2E 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7480 00005C2F 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7481 00005C30 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7482                              <1> %endif
  7483                              <1> %include "source/drivers/sound/pcspkr.asm"
  7484                              <2> ;PC Speaker Drivers
  7485                              <2> PCSpeakerRAW:
  7486 00005C31 60                  <2> 	pusha
  7487                              <2> nosoundrep:
  7488 00005C32 8B35[76020000]      <2> 	mov esi, [soundpos]
  7489 00005C38 31C9                <2> 	xor ecx, ecx
  7490 00005C3A 668B0D[74020000]    <2> 	mov cx, [soundrepititions]
  7491 00005C41 6681F90000          <2> 	cmp cx, 0
  7492 00005C46 0F8548000000        <2> 	jne near donesetpitch
  7493 00005C4C 668B0E              <2> 	mov cx, [esi]
  7494 00005C4F 668B5E02            <2> 	mov bx, [esi + 2]
  7495 00005C53 66890D[74020000]    <2> 	mov [soundrepititions], cx
  7496 00005C5A 81C604000000        <2> 	add esi, 4
  7497 00005C60 8935[76020000]      <2> 	mov [soundpos], esi
  7498 00005C66 3B35[7A020000]      <2> 	cmp esi, [soundendpos]
  7499 00005C6C 7735                <2> 	ja stopsound
  7500 00005C6E 66813D[74020000]00- <2> 	cmp word [soundrepititions], 0
  7501 00005C76 00                  <2>
  7502 00005C77 74B9                <2> 	je nosoundrep
  7503 00005C79 6681FB0000          <2> 	cmp bx, 0
  7504 00005C7E 740F                <2> 	je nosoundplay
  7505 00005C80 E840000000          <2> 	call setpitch
  7506 00005C85 E849000000          <2> 	call startsound
  7507 00005C8A E905000000          <2> 	jmp donesetpitch
  7508                              <2> nosoundplay:
  7509 00005C8F E846000000          <2> 	call killsound
  7510                              <2> donesetpitch:
  7511 00005C94 6649                <2> 	dec cx
  7512 00005C96 66890D[74020000]    <2> 	mov [soundrepititions], cx
  7513 00005C9D 61                  <2> 	popa
  7514 00005C9E E90FA6FFFF          <2> 	jmp timerinterrupt
  7515                              <2> stopsound:
  7516 00005CA3 31C0                <2> 	xor eax, eax
  7517 00005CA5 66A3[74020000]      <2> 	mov [soundrepititions], ax
  7518 00005CAB A2[73020000]        <2> 	mov [soundon], al
  7519 00005CB0 A3[76020000]        <2> 	mov [soundpos], eax
  7520 00005CB5 A3[7A020000]        <2> 	mov [soundendpos], eax
  7521 00005CBA E81B000000          <2> 	call killsound
  7522 00005CBF 61                  <2> 	popa
  7523 00005CC0 E9EDA5FFFF          <2> 	jmp timerinterrupt
  7524                              <2> 
  7525                              <2> 
  7526                              <2> setpitch:
  7527 00005CC5 B0B6                <2> 	mov al, 0xB6
  7528 00005CC7 E643                <2> 	out 0x43, al
  7529 00005CC9 6689D8              <2> 	mov ax, bx
  7530 00005CCC E642                <2> 	out 0x42, al
  7531 00005CCE 88E0                <2> 	mov al, ah
  7532 00005CD0 E642                <2> 	out 0x42, al
  7533 00005CD2 C3                  <2> 	ret
  7534                              <2> startsound:
  7535 00005CD3 E461                <2> 	in al, 0x61
  7536 00005CD5 0C03                <2> 	or al, 3
  7537 00005CD7 E661                <2> 	out 0x61, al
  7538 00005CD9 C3                  <2> 	ret
  7539                              <2> killsound:
  7540 00005CDA E461                <2> 	in al, 0x61
  7541 00005CDC 24FC                <2> 	and al, 0xFC
  7542 00005CDE E661                <2> 	out 0x61, al
  7543 00005CE0 C3                  <2> 	ret
  7544                              <2> 	
  7545                              <1> %ifdef sound.included
  7546                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7547                              <2> ;Sound Blaster Drivers
  7548                              <2> sblaster:
  7549                              <2> .init:
  7550 00005CE1 E8E1010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  7551 00005CE6 A2[215F0000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  7552 00005CEB 3C00                <2> 		cmp al, 0
  7553 00005CED 7418                <2> 		je .noinit
  7554 00005CEF B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  7555 00005CF1 E805020000          <2> 		call WriteDSP
  7556 00005CF6 B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  7557 00005CF8 E8BB010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  7558 00005CFD BE[085D0000]        <2> 		mov esi, .initmsg
  7559 00005D02 E85EC0FFFF          <2> 		call print
  7560                              <2> .noinit:
  7561 00005D07 C3                  <2> 		ret
  7562 00005D08 5342313620496E6974- <2> .initmsg db "SB16 Initialized.",10,0
  7563 00005D11 69616C697A65642E0A- <2>
  7564 00005D1A 00                  <2>
  7565                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  7566 00005D1B 813D[0C5F0000]0000- <2> 	cmp dword [Length0], 0
  7567 00005D23 0000                <2>
  7568 00005D25 0F8462000000        <2> 	je near .done
  7569 00005D2B FF0D[0C5F0000]      <2> 	dec dword [Length0]
  7570 00005D31 E908000000          <2> 	jmp .notodd
  7571                              <2> .oddlength:
  7572 00005D36 31C9                <2> 	xor ecx, ecx
  7573 00005D38 880D[0B5F0000]      <2> 	mov [OddLength], cl
  7574                              <2> .notodd:
  7575 00005D3E 8B35[125F0000]      <2> 	mov esi, [NextMemLoc]
  7576 00005D44 31C9                <2> 	xor ecx, ecx
  7577 00005D46 668B0D[105F0000]    <2> 	mov cx, [Length1]
  7578 00005D4D D1E9                <2> 	shr ecx, 1
  7579 00005D4F 6641                <2> 	inc cx
  7580 00005D51 31DB                <2> 	xor ebx, ebx
  7581 00005D53 668B1D[1A5F0000]    <2> 	mov bx, [SegLoc]
  7582 00005D5A 6601CB              <2> 	add bx, cx
  7583 00005D5D 66891D[1A5F0000]    <2> 	mov [SegLoc], bx
  7584 00005D64 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  7585 00005D6A 8935[165F0000]      <2> 	mov [MemLoc], esi
  7586 00005D70 89C8                <2> 	mov eax, ecx
  7587 00005D72 01F0                <2> 	add eax, esi
  7588 00005D74 A3[125F0000]        <2> 	mov [NextMemLoc], eax
  7589 00005D79 E833000000          <2> 	call DMACopy
  7590                              <2> 	;call DMAPlay
  7591 00005D7E E8E0000000          <2> 	call PlayDSP
  7592 00005D83 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7593 00005D87 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7594 00005D88 E9EEA5FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  7595                              <2> .done:
  7596 00005D8D 803D[0B5F0000]01    <2> 	cmp byte [OddLength], 1
  7597 00005D94 74A0                <2> 	je .oddlength
  7598 00005D96 31C0                <2> 	xor eax, eax
  7599 00005D98 66A3[105F0000]      <2> 	mov [Length1], ax
  7600 00005D9E 66B8D000            <2> 	mov ax, 0xD0
  7601 00005DA2 E854010000          <2> 	call WriteDSP
  7602 00005DA7 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7603 00005DAB EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7604 00005DAC E9CAA5FFFF          <2> 	jmp handled2
  7605                              <2> 	
  7606                              <2> DMACopy:
  7607 00005DB1 66B80800            <2> 		mov ax, LINEAR_SEL
  7608 00005DB5 8EE0                <2> 		mov fs, ax
  7609 00005DB7 C1E902              <2> 		shr ecx, 2
  7610                              <2> .loop:
  7611 00005DBA 8B06                <2> 		mov eax, [esi]
  7612 00005DBC 648903              <2> 		mov [fs:ebx], eax
  7613 00005DBF 81C604000000        <2> 		add esi, 4
  7614 00005DC5 81C304000000        <2> 		add ebx, 4
  7615 00005DCB E2ED                <2> 		loop .loop
  7616 00005DCD 66B83000            <2> 		mov ax, NEW_DATA_SEL
  7617 00005DD1 8EE0                <2> 		mov fs, ax
  7618 00005DD3 C3                  <2> 		ret
  7619                              <2> 		
  7620                              <2> 
  7621                              <2> DMAPlay:    ;uses eax ebx edx
  7622 00005DD4 C605[1C5F0000]00    <2> 		mov	byte [Page1],00h
  7623                              <2> 
  7624 00005DDB B005                <2> 		mov	al,(Channel+4)
  7625 00005DDD 66BA0A00            <2> 		mov	dx,0Ah
  7626 00005DE1 EE                  <2> 		out	dx,al
  7627 00005DE2 30C0                <2> 		xor	al,al
  7628 00005DE4 66BA0C00            <2> 		mov	dx,0Ch
  7629 00005DE8 EE                  <2> 		out	dx,al
  7630 00005DE9 B059                <2> 		mov	al,ModeReg
  7631 00005DEB 66BA0B00            <2> 		mov	dx,0Bh
  7632 00005DEF EE                  <2> 		out	dx,al
  7633 00005DF0 B800000800          <2> 		mov	eax,0x80000
  7634 00005DF5 66BA0200            <2> 		mov	dx,AddPort
  7635 00005DF9 EE                  <2> 		out	dx,al
  7636 00005DFA 86C4                <2> 		xchg al,ah
  7637 00005DFC EE                  <2> 		out	dx,al
  7638 00005DFD B800000800          <2> 		mov	eax,0x80000
  7639 00005E02 89C2                <2> 		mov	edx,eax
  7640 00005E04 2500000100          <2> 		and	eax,65536
  7641 00005E09 7406                <2> 		jz	MemLocN1
  7642 00005E0B FE05[1C5F0000]      <2> 		inc	byte [Page1]
  7643                              <2> MemLocN1:
  7644 00005E11 89D0                <2> 		mov	eax,edx
  7645 00005E13 2500000200          <2> 		and	eax,131072
  7646 00005E18 7407                <2> 		jz	MemLocN2
  7647 00005E1A 8005[1C5F0000]02    <2> 		add	byte [Page1],02
  7648                              <2> MemLocN2:
  7649 00005E21 89D0                <2> 		mov	eax,edx
  7650 00005E23 2500000400          <2> 		and	eax,262144
  7651 00005E28 7407                <2> 		jz	MemLocN3
  7652 00005E2A 8005[1C5F0000]04    <2> 		add	byte [Page1],04
  7653                              <2> MemLocN3:
  7654 00005E31 89D0                <2> 		mov	eax,edx
  7655 00005E33 2500000800          <2> 		and	eax,524288
  7656 00005E38 7407                <2> 		jz	MemLocN4
  7657 00005E3A 8005[1C5F0000]08    <2> 		add	byte [Page1],08
  7658                              <2> MemLocN4:
  7659 00005E41 66BA8300            <2> 		mov	dx,PgPort
  7660 00005E45 A0[1C5F0000]        <2> 		mov	al,[Page1]
  7661 00005E4A EE                  <2> 		out	dx,al
  7662 00005E4B 66BA0300            <2> 		mov	dx,LenPort
  7663 00005E4F 66A1[105F0000]      <2> 		mov	ax,[Length1]
  7664 00005E55 6648                <2> 		dec ax
  7665 00005E57 EE                  <2> 		out	dx,al
  7666 00005E58 86C4                <2> 		xchg al,ah
  7667 00005E5A EE                  <2> 		out	dx,al
  7668 00005E5B 66BA0A00            <2> 		mov	dx,0Ah
  7669 00005E5F B001                <2> 		mov	al,Channel
  7670 00005E61 EE                  <2> 		out	dx,al
  7671 00005E62 C3                  <2> 		ret
  7672                              <2> 		
  7673                              <2> PlayDSP:
  7674 00005E63 B040                <2> 		mov	al,40h
  7675 00005E65 E891000000          <2> 		call WriteDSP
  7676 00005E6A 31D2                <2> 		xor	edx,edx
  7677 00005E6C B840420F00          <2> 		mov	eax,1000000
  7678 00005E71 8B1D[1D5F0000]      <2> 		mov	ebx,[Freq]
  7679 00005E77 803D[0A5F0000]00    <2> 		cmp byte [Stereo], 0
  7680 00005E7E 7402                <2> 		je .nost
  7681 00005E80 D1E3                <2> 		shl ebx, 1
  7682                              <2> .nost:
  7683 00005E82 F7F3                <2> 		div	ebx
  7684 00005E84 89C3                <2> 		mov	ebx,eax
  7685 00005E86 B800010000          <2> 		mov	eax,256
  7686 00005E8B 29D8                <2> 		sub	eax,ebx
  7687 00005E8D E869000000          <2> 		call WriteDSP
  7688 00005E92 B014                <2> 		mov	al,14h	;write the mode
  7689 00005E94 803D[0A5F0000]00    <2> 		cmp byte [Stereo], 0
  7690 00005E9B 7400                <2> 		je .nost2
  7691                              <2> 		
  7692                              <2> .nost2:
  7693 00005E9D E859000000          <2> 		call WriteDSP
  7694 00005EA2 66A1[105F0000]      <2> 		mov	ax,[Length1]
  7695 00005EA8 66D1E8              <2> 		shr ax, 1
  7696 00005EAB E84B000000          <2> 		call WriteDSP
  7697 00005EB0 86C4                <2> 		xchg al,ah
  7698 00005EB2 E844000000          <2> 		call WriteDSP
  7699 00005EB7 C3                  <2> 		ret
  7700                              <2> 
  7701                              <2> MstrVol:    ;uses ax dx
  7702 00005EB8 6650                <2> 	   push ax
  7703 00005EBA 66BA2402            <2> 	   mov	dx,(BasePort+4)
  7704 00005EBE B022                <2> 	   mov	al,22h
  7705 00005EC0 EE                  <2> 	   out	dx,al
  7706 00005EC1 6658                <2> 	   pop	ax
  7707 00005EC3 6642                <2> 	   inc	dx
  7708 00005EC5 EE                  <2> 	   out	dx,al
  7709 00005EC6 C3                  <2> 	   ret
  7710                              <2> 	   
  7711                              <2> ResetDSP:   ; uses cx dx
  7712 00005EC7 66BA2602            <2> 			mov	dx,(BasePort+6)
  7713 00005ECB B001                <2> 			mov	al,01
  7714 00005ECD EE                  <2> 			out	dx,al
  7715 00005ECE 66B93200            <2> 			mov	cx,50
  7716 00005ED2 EC                  <2> WaitIt1:	in	al,dx
  7717 00005ED3 E2FD                <2> 			loop WaitIt1
  7718 00005ED5 30C0                <2> 			xor	al,al
  7719 00005ED7 EE                  <2> 			out	dx,al
  7720 00005ED8 66B93200            <2> 			mov	cx,50
  7721 00005EDC EC                  <2> WaitIt2:	in	al,dx
  7722 00005EDD E2FD                <2> 			loop WaitIt2
  7723 00005EDF B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  7724 00005EE1 66BA2E02            <2> 			mov	dx,(BasePort+14)
  7725 00005EE5 EC                  <2> 			in	al,dx
  7726 00005EE6 2480                <2> 			and	al,80h
  7727 00005EE8 3C80                <2> 			cmp	al,80h
  7728 00005EEA 750C                <2> 			jne	ResetErr
  7729 00005EEC 66BA2A02            <2> 			mov	dx,(BasePort+10)
  7730 00005EF0 EC                  <2> 			in	al,dx
  7731 00005EF1 3CAA                <2> 			cmp	al,0AAh
  7732 00005EF3 7503                <2> 			jne	ResetErr
  7733 00005EF5 B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  7734 00005EF7 C3                  <2> 			ret
  7735 00005EF8 30C0                <2> ResetErr:	xor al, al
  7736 00005EFA C3                  <2> 			ret
  7737                              <2> 
  7738                              <2> WriteDSP:   ;uses ax dx
  7739 00005EFB 6650                <2> 		push ax
  7740 00005EFD 66BA2C02            <2> 		mov	dx,(BasePort+12)
  7741 00005F01 EC                  <2> WaitIt:	in	al,dx
  7742 00005F02 2480                <2> 		and	al,80h
  7743 00005F04 75FB                <2> 		jnz	WaitIt
  7744 00005F06 6658                <2> 		pop	ax
  7745 00005F08 EE                  <2> 		out	dx,al
  7746 00005F09 C3                  <2> 		ret
  7747                              <2> 
  7748 00005F0A 00                  <2> Stereo db 0
  7749 00005F0B 00                  <2> OddLength db 0
  7750 00005F0C 00000000            <2> Length0 dd	0
  7751 00005F10 0000                <2> Length1	dw  0
  7752 00005F12 00000000            <2> NextMemLoc dd 0
  7753 00005F16 00000000            <2> MemLoc	dd  0
  7754 00005F1A 0000                <2> SegLoc  dw 0
  7755 00005F1C 00                  <2> Page1	db  0
  7756 00005F1D 00000000            <2> Freq	dd	0
  7757                              <2> PgPort	equ 83h
  7758                              <2> AddPort	equ 02h
  7759                              <2> LenPort	equ 03h
  7760                              <2> ModeReg	equ 59h
  7761                              <2> Channel	equ 01h
  7762                              <2> BasePort	equ 220h
  7763 00005F21 00                  <2> SoundBlaster	db 0
  7764                              <1> %endif
  7765                              <1> %ifdef io.serial
  7766                              <1> 	%include "source/drivers/input/serial.asm"
  7767                              <1> %else
  7768                              <1> 	%include "source/drivers/input/keyboard.asm"
  7769 00005F22 00                  <2> specialkey db 0
  7770                              <2> ;charregion db 0
  7771                              <2> waitforinput:		;this is basically the idle process
  7772                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  7773                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  7774 00005F23 6631C0              <2> 	xor ax, ax
  7775 00005F26 A0[B66A0000]        <2> 	mov al, [threadson]
  7776 00005F2B 8825[B66A0000]      <2> 	mov [threadson], ah
  7777 00005F31 9C                  <2> 	pushf
  7778 00005F32 FB                  <2> 	sti
  7779 00005F33 F4                  <2> 	hlt
  7780 00005F34 9D                  <2> 	popf
  7781 00005F35 A2[B66A0000]        <2> 	mov [threadson], al
  7782 00005F3A 66813D[E5230000]00- <2> 	cmp word [trans], 0
  7783 00005F42 00                  <2>
  7784 00005F43 7401                <2> 	je getkey
  7785 00005F45 C3                  <2> 	ret
  7786                              <2> getkey:
  7787 00005F46 31C0                <2> 		xor eax, eax
  7788 00005F48 A2[225F0000]        <2> 		mov [specialkey], al
  7789 00005F4D A3[E1230000]        <2> 		mov [lastkey], eax
  7790 00005F52 E464                <2> 		in al, 64h ; Status
  7791                              <2> 	%ifdef gui.included
  7792 00005F54 A820                <2> 		test al, 20h ; PS2-Mouse?
  7793 00005F56 0F8522FAFFFF        <2> 		jnz near moused
  7794                              <2> 	%endif
  7795 00005F5C A801                <2> 		test al, 1 
  7796 00005F5E 74C3                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7797                              <2> 	calckey:
  7798 00005F60 E460                <2> 		in al, 60h
  7799 00005F62 30E4                <2> 		xor ah, ah
  7800 00005F64 6689C3              <2> 		mov bx, ax
  7801 00005F67 66A3[E3230000]      <2> 		mov [lastkey + 2], ax
  7802 00005F6D BF[FC600000]        <2> 		mov edi, scancode
  7803                              <2> 	searchscan: 
  7804 00005F72 80FB3A              <2> 		cmp bl, 3Ah
  7805 00005F75 7314                <2> 		jae scanother
  7806 00005F77 C1E004              <2> 		shl eax, 4
  7807 00005F7A 01C7                <2> 		add edi, eax
  7808 00005F7C 668B07              <2> 		mov ax, [edi]
  7809 00005F7F 663D0000            <2> 		cmp ax, 0
  7810 00005F83 7406                <2> 		je scanother
  7811 00005F85 E9D0000000          <2> 		jmp scanfound
  7812 00005F8A 00                  <2> uppercase db 0
  7813                              <2> scanother:
  7814 00005F8B 6631C0              <2> 		xor ax, ax
  7815 00005F8E 66A3[E1230000]      <2> 		mov [lastkey], ax
  7816 00005F94 80FBE0              <2> 		cmp bl, 0E0h
  7817 00005F97 0F8477000000        <2> 		je near getkeyspecial
  7818 00005F9D 803D[225F0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7819 00005FA4 7525                <2> 		jne nospecialkey
  7820 00005FA6 80FB38              <2> 		cmp bl, 38h
  7821 00005FA9 0F849A000000        <2> 		je near alton
  7822 00005FAF 80FBB8              <2> 		cmp bl, 0B8h
  7823 00005FB2 0F8499000000        <2> 		je near altoff
  7824 00005FB8 80FB1D              <2> 		cmp bl, 1Dh
  7825 00005FBB 0F8478000000        <2> 		je near ctron
  7826 00005FC1 80FB9D              <2> 		cmp bl, 9Dh
  7827 00005FC4 0F8477000000        <2> 		je near ctroff
  7828 00005FCA C3                  <2> 		ret
  7829                              <2> nospecialkey:
  7830 00005FCB 80FB2A              <2> 		cmp bl, 2Ah
  7831 00005FCE 0F8455000000        <2> 		je near shifton
  7832 00005FD4 80FB36              <2> 		cmp bl, 36h
  7833 00005FD7 0F844C000000        <2> 		je near shifton
  7834 00005FDD 80FB1C              <2> 		cmp bl, 1Ch
  7835 00005FE0 0F8473000000        <2> 		je near entdown
  7836 00005FE6 80FBAA              <2> 		cmp bl, 0AAh
  7837 00005FE9 0F8442000000        <2> 		je near shiftoff
  7838 00005FEF 80FBB6              <2> 		cmp bl, 0B6h
  7839 00005FF2 0F8439000000        <2> 		je near shiftoff
  7840 00005FF8 80FB3A              <2> 		cmp bl, 3Ah
  7841 00005FFB 0F84A7000000        <2> 		je near capslock
  7842 00006001 80FB45              <2> 		cmp bl, 0x45
  7843 00006004 0F84AF000000        <2> 		je near numlock
  7844 0000600A 80FB46              <2> 		cmp bl, 0x46
  7845 0000600D 0F84BE000000        <2> 		je near scrolllock
  7846 00006013 C3                  <2> 		ret
  7847                              <2> 	getkeyspecial:
  7848 00006014 C605[225F0000]E0    <2> 		mov byte [specialkey], 0xE0
  7849 0000601B E940FFFFFF          <2> 		jmp calckey
  7850                              <2> 	shift:
  7851 00006020 A0[8A5F0000]        <2> 		mov al, [uppercase]
  7852 00006025 3C01                <2> 		cmp al, 1
  7853 00006027 7308                <2> 		jae shiftoff
  7854                              <2> 	shifton:
  7855 00006029 C605[8A5F0000]01    <2> 		mov byte [uppercase], 1
  7856 00006030 C3                  <2> 		ret
  7857                              <2> 	shiftoff:
  7858 00006031 C605[8A5F0000]00    <2> 		mov byte [uppercase], 0
  7859 00006038 C3                  <2> 		ret
  7860                              <2> 	ctron:
  7861 00006039 C605[A7600000]01    <2> 		mov byte [ctrkey], 1
  7862 00006040 C3                  <2> 		ret
  7863                              <2> 	ctroff:
  7864 00006041 C605[A7600000]00    <2> 		mov byte [ctrkey], 0
  7865 00006048 C3                  <2> 		ret
  7866                              <2> 	alton:
  7867 00006049 C605[A6600000]01    <2> 		mov byte [altkey], 1
  7868 00006050 C3                  <2> 		ret
  7869                              <2> 	altoff:
  7870 00006051 C605[A6600000]00    <2> 		mov byte [altkey], 0
  7871 00006058 C3                  <2> 		ret
  7872                              <2> 	entdown:
  7873 00006059 C3                  <2> 		ret
  7874                              <2> scanfound:
  7875 0000605A 81C708000000        <2> 		add edi, 8
  7876 00006060 803D[A7600000]01    <2> 		cmp byte [ctrkey], 1
  7877 00006067 7306                <2> 		jae ctrlin
  7878 00006069 81EF08000000        <2> 		sub edi, 8
  7879                              <2> 	ctrlin:
  7880 0000606F 81C704000000        <2> 		add edi, 4
  7881 00006075 803D[A6600000]01    <2> 		cmp byte [altkey], 1
  7882 0000607C 7306                <2> 		jae altin
  7883 0000607E 81EF04000000        <2> 		sub edi, 4
  7884                              <2> 	altin:
  7885 00006084 81C702000000        <2> 		add edi, 2
  7886 0000608A 803D[8A5F0000]01    <2> 		cmp byte [uppercase], 1
  7887 00006091 7306                <2> 		jae uppercaseon
  7888 00006093 81EF02000000        <2> 		sub edi, 2
  7889                              <2> 	uppercaseon:
  7890 00006099 668B07              <2> 		mov ax,[edi]
  7891 0000609C 66A3[E1230000]      <2> 		mov [lastkey], ax
  7892 000060A2 C3                  <2> 		ret
  7893                              <2> 		
  7894 000060A3 00                  <2> keyboardstatus db 0
  7895 000060A4 00                  <2> numlockstatus db 0
  7896 000060A5 00                  <2> scrolllockstatus db 0
  7897 000060A6 00                  <2> altkey db 0
  7898 000060A7 00                  <2> ctrkey db 0
  7899                              <2> 	capslock:
  7900 000060A8 8035[A3600000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7901 000060AF E835000000          <2> 		call updatekblights
  7902 000060B4 E967FFFFFF          <2> 		jmp shift
  7903                              <2> 		
  7904                              <2> 	numlock:
  7905 000060B9 8035[A3600000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7906 000060C0 8035[A4600000]01    <2> 		xor byte [numlockstatus], 1
  7907 000060C7 E81D000000          <2> 		call updatekblights
  7908 000060CC E975FEFFFF          <2> 		jmp getkey
  7909                              <2> 	
  7910                              <2> 	scrolllock:
  7911 000060D1 8035[A3600000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7912 000060D8 8035[A5600000]01    <2> 		xor byte [scrolllockstatus], 1
  7913 000060DF E805000000          <2> 		call updatekblights
  7914 000060E4 E95DFEFFFF          <2> 		jmp getkey
  7915                              <2> 		
  7916                              <2> 	updatekblights:
  7917 000060E9 B0ED                <2> 		mov al, 0xED
  7918 000060EB 66BA6000            <2> 		mov dx, 0x60
  7919 000060EF EE                  <2> 		out dx, al
  7920                              <2> 	chkkbdack:
  7921 000060F0 EC                  <2> 		in al, dx
  7922 000060F1 3CFA                <2> 		cmp al, 0xFA
  7923 000060F3 75FB                <2> 		jne chkkbdack
  7924 000060F5 A0[A3600000]        <2> 		mov al, [keyboardstatus]
  7925 000060FA EE                  <2> 		out dx, al
  7926 000060FB C3                  <2> 		ret
  7927                              <2> 		
  7928                              <2> scancode:
  7929                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  7930 000060FC 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7931 00006105 00000000000000      <2>
  7932 0000610C 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7933 00006115 00000000000000      <2>
  7934 0000611C 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  7935 00006125 00000000000000      <2>
  7936 0000612C 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  7937 00006135 00000000000000      <2>
  7938 0000613C 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  7939 00006145 00000000000000      <2>
  7940 0000614C 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  7941 00006155 00000000000000      <2>
  7942 0000615C 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  7943 00006165 00000000000000      <2>
  7944 0000616C 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  7945 00006175 00000000000000      <2>
  7946 0000617C 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  7947 00006185 00000000000000      <2>
  7948 0000618C 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  7949 00006195 00000000000000      <2>
  7950 0000619C 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  7951 000061A5 00000000000000      <2>
  7952 000061AC 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  7953 000061B5 00000000000000      <2>
  7954 000061BC 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  7955 000061C5 00000000000000      <2>
  7956 000061CC 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  7957 000061D5 00000000000000      <2>
  7958 000061DC 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  7959 000061E5 00000000000000      <2>
  7960 000061EC 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7961 000061F5 00000000000000      <2>
  7962 000061FC 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  7963 00006204 003A0039041904      <2>
  7964 0000620C 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  7965 00006215 03000046042604      <2>
  7966 0000621C 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  7967 00006225 03950343042304      <2>
  7968 0000622C 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  7969 00006235 03A1033A041A04      <2>
  7970 0000623C 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  7971 00006245 03A40335041504      <2>
  7972 0000624C 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  7973 00006255 03A5033D041D04      <2>
  7974 0000625C 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  7975 00006265 03980333041304      <2>
  7976 0000626C 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  7977 00006275 03990348042804      <2>
  7978 0000627C 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  7979 00006285 039F0349042904      <2>
  7980 0000628C 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  7981 00006295 03A00337041704      <2>
  7982 0000629C 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  7983 000062A5 00000045042504      <2>
  7984 000062AC 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  7985 000062B5 0000004A042A04      <2>
  7986 000062BC 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7987 000062C5 00000000000000      <2>
  7988 000062CC 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7989 000062D5 00000000000000      <2>
  7990 000062DC 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  7991 000062E5 03910344042404      <2>
  7992 000062EC 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  7993 000062F5 03A3034B042B04      <2>
  7994 000062FC 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  7995 00006305 03940332041204      <2>
  7996 0000630C 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  7997 00006315 03A60330041004      <2>
  7998 0000631C 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  7999 00006325 0393033F041F04      <2>
  8000 0000632C 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  8001 00006335 03970340042004      <2>
  8002 0000633C 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  8003 00006345 039E033E041E04      <2>
  8004 0000634C 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  8005 00006355 039A033B041B04      <2>
  8006 0000635C 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  8007 00006365 039B0334041404      <2>
  8008 0000636C 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  8009 00006375 00000036041604      <2>
  8010 0000637C 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  8011 00006385 0000004D042D04      <2>
  8012 0000638C 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  8013 00006395 00000051040104      <2>
  8014 0000639C 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8015 000063A5 00000000000000      <2>
  8016 000063AC 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  8017 000063B5 0000002F005C00      <2>
  8018 000063BC 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  8019 000063C5 0396034F042F04      <2>
  8020 000063CC 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  8021 000063D5 03A70347042704      <2>
  8022 000063DC 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  8023 000063E5 03A80341042104      <2>
  8024 000063EC 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  8025 000063F5 03A9033C041C04      <2>
  8026 000063FC 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  8027 00006405 03920338041804      <2>
  8028 0000640C 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  8029 00006415 039D0342042204      <2>
  8030 0000641C 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  8031 00006425 039C034C042C04      <2>
  8032 0000642C 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  8033 00006435 00000031041104      <2>
  8034 0000643C 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  8035 00006445 0000004E042E04      <2>
  8036 0000644C 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  8037 00006455 0000002E002C00      <2>
  8038 0000645C 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8039 00006465 00000000000000      <2>
  8040 0000646C 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8041 00006475 00000000000000      <2>
  8042 0000647C 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8043 00006485 00000000000000      <2>
  8044 0000648C 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  8045 00006495 00000000000000      <2>
  8046                              <2> noscan:
  8047                              <2> 
  8048                              <1> %endif
  8049                              <1> ;drivers will soon be handled intelligently
  8050                              <1> ;every driver's source will be scanned for a .init function
  8051                              <1> ;that will be called and if it returns 0
  8052                              <1> ;the hardware was found and the driver initialized properly
  8053                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  8054                              <1> 	%ifdef sound.included
  8055 0000649C E840F8FFFF          <1> 		call sblaster.init
  8056                              <1> 	%endif
  8057                              <1> 	%ifdef network.included
  8058                              <1> 		call network.init
  8059                              <1> 	%endif
  8060 000064A1 C3                  <1> 	ret
  8061                              <1> initialize:
  8062                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  8063 000064A2 E83E000000          <1> 	call .pic
  8064                              <1> %ifdef terminal.vsync
  8065 000064A7 E866000000          <1> 	call .rtc
  8066                              <1> %endif
  8067 000064AC E896000000          <1> 	call .pit
  8068 000064B1 E8B8000000          <1> 	call .fpu
  8069 000064B6 E8C9000000          <1> 	call .sse
  8070 000064BB 31C0                <1> 	xor eax, eax
  8071 000064BD 31C9                <1> 	xor ecx, ecx
  8072                              <1> %ifdef io.serial
  8073                              <1> 	call serial.init
  8074                              <1> %endif
  8075 000064BF E801000000          <1> 	call .time
  8076 000064C4 C3                  <1> 	ret
  8077                              <1> 	
  8078                              <1> .time:
  8079 000064C5 E815DDFFFF          <1> 	call time
  8080 000064CA E8BDDEFFFF          <1> 	call timeconvert
  8081 000064CF 890D[6B020000]      <1> 	mov [timeseconds], ecx
  8082 000064D5 31C9                <1> 	xor ecx, ecx
  8083 000064D7 890D[6F020000]      <1> 	mov [timenanoseconds], ecx
  8084 000064DD C605[27410000]01    <1> 	mov byte [istimeset], 1
  8085 000064E4 C3                  <1> 	ret
  8086                              <1> 	
  8087                              <1> .pic:
  8088 000064E5 B011                <1> 	mov al, 0x11
  8089 000064E7 E620                <1> 	out 0x20, al
  8090 000064E9 E6A0                <1> 	out 0xA0, al
  8091 000064EB B040                <1> 	mov al, 0x40	;interrupt for master
  8092 000064ED E621                <1> 	out 0x21, al
  8093 000064EF B048                <1> 	mov al, 0x48	;interrupt for slave
  8094 000064F1 E6A1                <1> 	out 0xA1, al
  8095 000064F3 B004                <1> 	mov al, 4
  8096 000064F5 E621                <1> 	out 0x21, al
  8097 000064F7 B002                <1> 	mov al, 2
  8098 000064F9 E6A1                <1> 	out 0xA1, al
  8099 000064FB B001                <1> 	mov al, 0x1
  8100 000064FD E621                <1> 	out 0x21, al
  8101 000064FF B001                <1> 	mov al, 0x1
  8102 00006501 E6A1                <1> 	out 0xA1, al
  8103                              <1> 	;masks are set to zero so as not to mask
  8104 00006503 30C0                <1> 	xor al, al
  8105 00006505 E621                <1> 	out 0x21, al
  8106 00006507 30C0                <1> 	xor al, al
  8107 00006509 E6A1                <1> 	out 0xA1, al
  8108 0000650B B020                <1> 	mov al, 0x20
  8109 0000650D E6A0                <1> 	out 0xA0, al
  8110 0000650F E620                <1> 	out 0x20, al
  8111 00006511 C3                  <1> 	ret
  8112                              <1> .rtc:
  8113 00006512 B008                <1> 	mov al, 0x8
  8114 00006514 88C4                <1> 	mov ah, al
  8115 00006516 66BA7000            <1> 	mov dx, 0x70
  8116 0000651A EE                  <1> 	out dx, al
  8117 0000651B 6642                <1> 	inc dx
  8118 0000651D EC                  <1> 	in al, dx
  8119 0000651E 86C4                <1> 	xchg al, ah
  8120 00006520 664A                <1> 	dec dx
  8121 00006522 EE                  <1> 	out dx, al
  8122 00006523 6642                <1> 	inc dx
  8123 00006525 86C4                <1> 	xchg al, ah
  8124 00006527 0C40                <1> 	or al, 0x40
  8125 00006529 EE                  <1> 	out dx, al
  8126                              <1> 	
  8127 0000652A B00A                <1> 	mov al, 0xA
  8128 0000652C 664A                <1> 	dec dx
  8129 0000652E EE                  <1> 	out dx, al
  8130 0000652F 86C4                <1> 	xchg al, ah
  8131 00006531 6642                <1> 	inc dx
  8132 00006533 EC                  <1> 	in al, dx
  8133 00006534 24F0                <1> 	and al, 0xF0
  8134 00006536 0A05[27030000]      <1> 	or al, [rtcrate]
  8135 0000653C 86C4                <1> 	xchg al, ah
  8136 0000653E 664A                <1> 	dec dx
  8137 00006540 EE                  <1> 	out dx, al
  8138 00006541 6642                <1> 	inc dx
  8139 00006543 86C4                <1> 	xchg al, ah
  8140 00006545 EE                  <1> 	out dx, al
  8141 00006546 C3                  <1> 	ret
  8142                              <1> 	
  8143                              <1> .pit:
  8144                              <1> 	;initialize the PIT
  8145 00006547 66A1[64020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  8146 0000654D E640                <1> 	out 0x40, al
  8147 0000654F 66C1C008            <1> 	rol ax, 8
  8148 00006553 E640                <1> 	out 0x40, al
  8149                              <1> 	;enable rtc interrupt
  8150 00006555 B00B                <1> 	mov al, 0xB
  8151 00006557 E670                <1> 	out 0x70, al
  8152 00006559 66C1C008            <1> 	rol ax, 8
  8153 0000655D E471                <1> 	in al, 0x71
  8154 0000655F 66C1C008            <1> 	rol ax, 8
  8155 00006563 E670                <1> 	out 0x70, al
  8156 00006565 66C1C008            <1> 	rol ax, 8
  8157 00006569 0C40                <1> 	or al, 0x40
  8158 0000656B E671                <1> 	out 0x71, al
  8159 0000656D C3                  <1> 	ret
  8160                              <1> .fpu:
  8161                              <1> 	;And now to initialize the fpu
  8162 0000656E 0F20E0              <1> 	mov eax, cr4
  8163 00006571 0D00020000          <1> 	or eax, 0x200
  8164 00006576 0F22E0              <1> 	mov cr4, eax
  8165 00006579 B87F0B0000          <1> 	mov eax, 0xB7F
  8166 0000657E 50                  <1> 	push eax
  8167 0000657F D92C24              <1> 	fldcw [esp]
  8168 00006582 58                  <1> 	pop eax
  8169 00006583 C3                  <1> 	ret
  8170                              <1> 	
  8171                              <1> .sse:
  8172 00006584 0F20C0              <1> 	mov eax, cr0
  8173 00006587 24FB                <1> 	and al, 11111011b
  8174 00006589 0C02                <1> 	or al, 00000010b
  8175 0000658B 0F22C0              <1> 	mov cr0, eax
  8176 0000658E 0F20E0              <1> 	mov eax, cr4
  8177 00006591 660D0006            <1> 	or ax, 0000011000000000b
  8178 00006595 0F22E0              <1> 	mov cr4, eax
  8179 00006598 C3                  <1> 	ret
  8180                                      %include "source/pci.asm"
  8181 00006599 00                  <1> pcibus		db 0
  8182 0000659A 00                  <1> pcidevice	db 0
  8183 0000659B 00                  <1> pcifunction	db 0
  8184 0000659C 00                  <1> pciregister	db 0
  8185 0000659D 00                  <1> pcireqtype	db 0
  8186 0000659E 00000000            <1> pcidevid	dd 0
  8187 000065A2 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  8188                              <1> getpcimem:
  8189 000065A6 B002                <1> 	mov al, 2
  8190 000065A8 A2[9D650000]        <1> 	mov [pcireqtype], al
  8191 000065AD E922000000          <1> 	jmp searchpci
  8192                              <1> getpciport:
  8193 000065B2 B001                <1> 	mov al, 1
  8194 000065B4 A2[9D650000]        <1> 	mov [pcireqtype], al
  8195 000065B9 E916000000          <1> 	jmp searchpci
  8196                              <1> pcidump:
  8197 000065BE 31C0                <1> 	xor eax, eax
  8198 000065C0 A2[9B650000]        <1> 	mov [pcifunction], al
  8199 000065C5 A2[99650000]        <1> 	mov [pcibus], al
  8200 000065CA A2[9A650000]        <1> 	mov [pcidevice], al
  8201 000065CF A2[9D650000]        <1> 	mov [pcireqtype], al
  8202                              <1> searchpci:		;return in ebx, start X in pciX
  8203 000065D4 30C0                <1> 	xor al, al
  8204 000065D6 A2[9C650000]        <1> 	mov [pciregister], al
  8205 000065DB E823020000          <1> 	call getpciaddr
  8206 000065E0 BAF80C0000          <1> 	mov edx, 0xCF8
  8207 000065E5 EF                  <1> 	out dx, eax	;request pci config
  8208 000065E6 BAFC0C0000          <1> 	mov edx, 0xCFC
  8209 000065EB ED                  <1> 	in eax, dx 	;read in pci config
  8210 000065EC 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  8211 000065F1 0F823D000000        <1> 	jb near checkpcidevice
  8212                              <1> searchpciret:
  8213                              <1> nextpcidevice:
  8214 000065F7 30C0                <1> 	xor al, al
  8215 000065F9 A2[9B650000]        <1> 	mov [pcifunction], al
  8216 000065FE A0[9A650000]        <1> 	mov al, [pcidevice]
  8217 00006603 3C1F                <1> 	cmp al, 11111b
  8218 00006605 0F8306010000        <1> 	jae near nextpcibus
  8219 0000660B FEC0                <1> 	inc al
  8220 0000660D A2[9A650000]        <1> 	mov [pcidevice], al
  8221 00006612 E9BDFFFFFF          <1> 	jmp searchpci
  8222 00006617 A0[9B650000]        <1> 	mov al, [pcifunction]
  8223 0000661C 3C07                <1> 	cmp al, 111b
  8224 0000661E 0F83D3FFFFFF        <1> 	jae near nextpcidevice
  8225 00006624 FEC0                <1> 	inc al
  8226 00006626 A2[9B650000]        <1> 	mov [pcifunction], al
  8227 0000662B E9A4FFFFFF          <1> 	jmp searchpci
  8228 00006630 00000000            <1> pcitype: db 0,0,0,0
  8229                              <1> checkpcidevice:
  8230 00006634 31C0                <1> 	xor eax, eax
  8231 00006636 3905[9E650000]      <1> 	cmp [pcidevid], eax
  8232 0000663C 0F8430000000        <1> 	je near .good
  8233 00006642 A2[9C650000]        <1> 	mov [pciregister], al	;device id, vendor id
  8234 00006647 E8B7010000          <1> 	call getpciaddr
  8235 0000664C BAF80C0000          <1> 	mov edx, 0xCF8
  8236 00006651 EF                  <1> 	out dx, eax
  8237 00006652 BAFC0C0000          <1> 	mov edx, 0xCFC
  8238 00006657 ED                  <1> 	in eax, dx
  8239 00006658 2305[A2650000]      <1> 	and eax, [pcidevidmask]
  8240 0000665E 8B1D[9E650000]      <1> 	mov ebx, [pcidevid]
  8241 00006664 231D[A2650000]      <1> 	and ebx, [pcidevidmask]
  8242 0000666A 39D8                <1> 	cmp eax, ebx
  8243 0000666C 0F8585FFFFFF        <1> 	jne near searchpciret
  8244                              <1> .good:
  8245 00006672 30C0                <1> 	xor al, al
  8246 00006674 3805[9D650000]      <1> 	cmp [pcireqtype], al
  8247 0000667A 0F842C000000        <1> 	je near dumppcidevice
  8248 00006680 B008                <1> 	mov al, 0x08
  8249 00006682 A2[9C650000]        <1> 	mov [pciregister], al	;class code, subclass, revision id
  8250 00006687 E877010000          <1> 	call getpciaddr
  8251 0000668C BAF80C0000          <1> 	mov edx, 0xCF8
  8252 00006691 EF                  <1> 	out dx, eax
  8253 00006692 BAFC0C0000          <1> 	mov edx, 0xCFC
  8254 00006697 ED                  <1> 	in eax, dx
  8255 00006698 C1C008              <1> 	rol eax, 8
  8256 0000669B 3A05[30660000]      <1> 	cmp al, [pcitype]
  8257 000066A1 0F84A0000000        <1> 	je near foundpciaddr
  8258 000066A7 E94BFFFFFF          <1> 	jmp searchpciret
  8259                              <1> dumppcidevice:
  8260 000066AC 30C0                <1> 	xor al, al
  8261 000066AE A2[9C650000]        <1> 	mov [pciregister], al
  8262 000066B3 E84B010000          <1> 	call getpciaddr
  8263 000066B8 89C1                <1> 	mov ecx, eax
  8264 000066BA C605[77320000]05    <1> 	mov byte [firsthexshown], 5
  8265 000066C1 E8C6CBFFFF          <1> 	call showhex
  8266                              <1> dumppcidevicelp:
  8267 000066C6 A2[9C650000]        <1> 	mov [pciregister], al
  8268 000066CB E833010000          <1> 	call getpciaddr
  8269 000066D0 BAF80C0000          <1> 	mov edx, 0xCF8
  8270 000066D5 EF                  <1> 	out dx, eax
  8271 000066D6 BAFC0C0000          <1> 	mov edx, 0xCFC
  8272 000066DB ED                  <1> 	in eax, dx
  8273 000066DC 89C1                <1> 	mov ecx, eax
  8274 000066DE A0[9C650000]        <1> 	mov al, [pciregister]
  8275 000066E3 0404                <1> 	add al, 4
  8276 000066E5 C605[77320000]05    <1> 	mov byte [firsthexshown], 5
  8277 000066EC E89BCBFFFF          <1> 	call showhex
  8278 000066F1 3C3C                <1> 	cmp al, 0x3C
  8279 000066F3 72D1                <1> 	jb dumppcidevicelp
  8280                              <1> dumppcidn:
  8281                              <1> %ifdef io.serial
  8282                              <1> 	mov esi, line
  8283                              <1> 	call print
  8284                              <1> %else
  8285 000066F5 803D[07260000]00    <1> 	cmp byte [charpos], 0
  8286 000066FC 0F84F5FEFFFF        <1> 	je near searchpciret
  8287 00006702 BE[DC890000]        <1> 	mov esi, line
  8288 00006707 E859B6FFFF          <1> 	call print
  8289                              <1> %endif
  8290 0000670C E9E6FEFFFF          <1> 	jmp searchpciret
  8291                              <1> nextpcibus:
  8292 00006711 30C0                <1> 	xor al, al
  8293 00006713 A2[9A650000]        <1> 	mov [pcidevice], al
  8294 00006718 A0[99650000]        <1> 	mov al, [pcibus]
  8295 0000671D 3C7F                <1> 	cmp al, 1111111b
  8296 0000671F 730C                <1> 	jae donesearchpci
  8297 00006721 FEC0                <1> 	inc al
  8298 00006723 A2[99650000]        <1> 	mov [pcibus], al
  8299 00006728 E9A7FEFFFF          <1> 	jmp searchpci
  8300                              <1> donesearchpci:
  8301 0000672D BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  8302 00006732 31D2                <1> 	xor edx, edx
  8303 00006734 8815[30660000]      <1> 	mov [pcitype], dl
  8304 0000673A 8915[9E650000]      <1> 	mov [pcidevid], edx
  8305 00006740 891D[A2650000]      <1> 	mov [pcidevidmask], ebx
  8306 00006746 C3                  <1> 	ret
  8307                              <1> foundpciaddr:
  8308 00006747 B010                <1> 	mov al, 0x10
  8309 00006749 A2[9C650000]        <1> 	mov [pciregister], al
  8310 0000674E 803D[9D650000]02    <1> 	cmp byte [pcireqtype], 2
  8311 00006755 7443                <1> 	je findpcimemaddr
  8312                              <1> findpciioaddr:
  8313 00006757 E8A7000000          <1> 	call getpciaddr
  8314 0000675C BAF80C0000          <1> 	mov edx, 0xCF8
  8315 00006761 EF                  <1> 	out dx, eax
  8316 00006762 BAFC0C0000          <1> 	mov edx, 0xCFC
  8317 00006767 ED                  <1> 	in eax, dx
  8318 00006768 89C3                <1> 	mov ebx, eax
  8319 0000676A 81E301000000        <1> 	and ebx, 1
  8320 00006770 81FB00000000        <1> 	cmp ebx, 0
  8321 00006776 0F846E000000        <1> 	je near notpciioaddr
  8322 0000677C 2D01000000          <1> 	sub eax, 1
  8323 00006781 89C2                <1> 	mov edx, eax
  8324 00006783 31DB                <1> 	xor ebx, ebx
  8325 00006785 4B                  <1> 	dec ebx
  8326 00006786 891D[A2650000]      <1> 	mov [pcidevidmask], ebx
  8327 0000678C 43                  <1> 	inc ebx
  8328 0000678D 881D[30660000]      <1> 	mov [pcitype], bl
  8329 00006793 891D[9E650000]      <1> 	mov [pcidevid], ebx
  8330 00006799 C3                  <1> 	ret
  8331                              <1> findpcimemaddr:
  8332 0000679A E864000000          <1> 	call getpciaddr
  8333 0000679F BAF80C0000          <1> 	mov edx, 0xCF8
  8334 000067A4 EF                  <1> 	out dx, eax
  8335 000067A5 BAFC0C0000          <1> 	mov edx, 0xCFC
  8336 000067AA ED                  <1> 	in eax, dx
  8337 000067AB 89C3                <1> 	mov ebx, eax
  8338 000067AD 81E301000000        <1> 	and ebx, 1
  8339 000067B3 81FB01000000        <1> 	cmp ebx, 1
  8340 000067B9 0F842B000000        <1> 	je near notpciioaddr
  8341 000067BF C1E804              <1> 	shr eax, 4
  8342 000067C2 C1E004              <1> 	shl eax, 4	;remove prefetch and type
  8343 000067C5 89C2                <1> 	mov edx, eax
  8344 000067C7 50                  <1> 	push eax
  8345 000067C8 A1[4B020000]        <1> 	mov eax, [basecache]
  8346 000067CD C1E004              <1> 	shl eax, 4
  8347 000067D0 29C2                <1> 	sub edx, eax
  8348 000067D2 58                  <1> 	pop eax
  8349 000067D3 31DB                <1> 	xor ebx, ebx
  8350 000067D5 4B                  <1> 	dec ebx
  8351 000067D6 891D[A2650000]      <1> 	mov [pcidevidmask], ebx
  8352 000067DC 43                  <1> 	inc ebx
  8353 000067DD 881D[30660000]      <1> 	mov [pcitype], bl
  8354 000067E3 891D[9E650000]      <1> 	mov [pcidevid], ebx
  8355 000067E9 C3                  <1> 	ret
  8356                              <1> notpciioaddr:
  8357 000067EA A0[9C650000]        <1> 	mov al, [pciregister]
  8358 000067EF 0404                <1> 	add al, 4
  8359 000067F1 3C28                <1> 	cmp al, 0x28
  8360 000067F3 0F87FEFDFFFF        <1> 	ja near searchpciret
  8361 000067F9 A2[9C650000]        <1> 	mov [pciregister], al
  8362 000067FE E954FFFFFF          <1> 	jmp findpciioaddr
  8363                              <1> getpciaddr:		;puts it in eax and ebx
  8364 00006803 31C0                <1> 			xor eax, eax
  8365 00006805 BB00000080          <1> 			mov ebx, 0x80000000
  8366 0000680A A0[99650000]        <1> 			mov al, [pcibus]
  8367 0000680F C1E010              <1> 			shl eax, 16
  8368 00006812 01C3                <1> 			add ebx, eax
  8369 00006814 31C0                <1> 			xor eax, eax
  8370 00006816 A0[9A650000]        <1> 			mov al, [pcidevice]
  8371 0000681B C1E00B              <1> 			shl eax, 11
  8372 0000681E 01C3                <1> 			add ebx, eax
  8373 00006820 31C0                <1> 			xor eax, eax
  8374 00006822 A0[9B650000]        <1> 			mov al, [pcifunction]
  8375 00006827 C1E008              <1> 			shl eax, 8
  8376 0000682A 01C3                <1> 			add ebx, eax
  8377 0000682C 31C0                <1> 			xor eax, eax
  8378 0000682E A0[9C650000]        <1> 			mov al, [pciregister]
  8379 00006833 01C3                <1> 			add ebx, eax
  8380 00006835 89D8                <1> 			mov eax, ebx
  8381 00006837 C3                  <1> 			ret
  8382                                      %include "source/disk.asm"
  8383                              <1> %ifdef disk.real
  8384                              <1> 	%include "source/drivers/disk/realmode.asm"
  8385                              <2> diskr:
  8386                              <2> 			;sector count in cl
  8387                              <2> 			;disk number in ch
  8388                              <2> 			;48 bit address with last 32 bits in ebx
  8389                              <2> 			;buffer in esi
  8390                              <2> 			;puts end of buffer in edi and end lba address in edx
  8391 00006838 880D[5F680000]      <2> 	mov [sdlength], cl
  8392 0000683E 891D[60680000]      <2> 	mov [sdaddress], ebx
  8393 00006844 8935[E1690000]      <2> 	mov [oldesireal], esi
  8394 0000684A 66BE[6468]          <2> 	mov si, readdiskreal
  8395 0000684E 668935[020D0000]    <2> 	mov [realmodeptr], si
  8396 00006855 E896A3FFFF          <2> 	call realmode
  8397 0000685A E941000000          <2> 	jmp backfromrealread
  8398 0000685F 00                  <2> sdlength db 0
  8399 00006860 00000000            <2> sdaddress dd 0
  8400                              <2> 
  8401                              <2> [BITS 16]
  8402                              <2> readdiskreal:
  8403 00006864 C706[9068]1000      <2> 	mov word [dlen], 0x10
  8404 0000686A C706[9468]0000      <2> 	mov word [daddress], 0
  8405 00006870 C706[9668]0001      <2> 	mov word [dsegm], 0x100
  8406 00006876 66891E[9868]        <2> 	mov [dlbaad], ebx
  8407 0000687B 880E[9268]          <2> 	mov [dreadlen], cl
  8408                              <2> ReadHardDisk:
  8409 0000687F BE[9068]            <2> 	mov si, diskaddresspacket
  8410 00006882 31C0                <2> 	xor ax, ax
  8411 00006884 B442                <2> 	mov ah, 0x42
  8412 00006886 8A16[8F68]          <2> 	mov dl, [dnumber]
  8413 0000688A CD13                <2> 	int 0x13
  8414 0000688C 72F1                <2> 	jc ReadHardDisk
  8415 0000688E C3                  <2> 	ret
  8416                              <2> 
  8417 0000688F 80                  <2> dnumber db 0x80
  8418                              <2> diskaddresspacket:
  8419 00006890 10                  <2> dlen:	db 0x10 ;size of packet
  8420 00006891 00                  <2> 		db 0
  8421 00006892 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8422 00006894 0000                <2> daddress:	dw 0	;address 0
  8423 00006896 0001                <2> dsegm:		dw 0x100	;segment
  8424                              <2> 		;start with known value for hd
  8425                              <2> dlbaad:
  8426 00006898 00000000            <2> 	dd 0	;lba address
  8427 0000689C 00000000            <2> 	dd 0
  8428                              <2> [BITS 32]
  8429                              <2> backfromrealread:
  8430 000068A0 8B35[E1690000]      <2> 	mov esi, [oldesireal]
  8431 000068A6 8B1D[60680000]      <2> 	mov ebx, [sdaddress]
  8432 000068AC 31C9                <2> 	xor ecx, ecx
  8433 000068AE 8A0D[5F680000]      <2> 	mov cl, [sdlength]
  8434 000068B4 01CB                <2> 	add ebx, ecx
  8435 000068B6 66B80800            <2> 	mov ax, LINEAR_SEL
  8436 000068BA 8EE0                <2> 	mov fs, ax
  8437 000068BC BF00100000          <2> 	mov edi, 0x1000
  8438 000068C1 B200                <2> 	mov dl, 0
  8439 000068C3 D0E1                <2> 	shl cl, 1
  8440                              <2> copyfromrmodedisk:
  8441 000068C5 648A07              <2> 	mov al, [fs:edi]
  8442 000068C8 8806                <2> 	mov [esi], al
  8443 000068CA 47                  <2> 	inc edi
  8444 000068CB 46                  <2> 	inc esi
  8445 000068CC FECA                <2> 	dec dl
  8446 000068CE 80FA00              <2> 	cmp dl, 0
  8447 000068D1 75F2                <2> 	jne copyfromrmodedisk
  8448 000068D3 FEC9                <2> 	dec cl
  8449 000068D5 B200                <2> 	mov dl, 0
  8450 000068D7 80F900              <2> 	cmp cl, 0
  8451 000068DA 75E9                <2> 	jne copyfromrmodedisk
  8452 000068DC 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8453 000068E0 8EE0                <2> 	mov fs, ax
  8454 000068E2 89F7                <2> 	mov edi, esi
  8455 000068E4 8B35[E1690000]      <2> 	mov esi, [oldesireal]
  8456 000068EA 89DA                <2> 	mov edx, ebx
  8457 000068EC 8B1D[60680000]      <2> 	mov ebx, [sdaddress]
  8458 000068F2 C3                  <2> 	ret
  8459                              <2> 	
  8460                              <1> %else
  8461                              <1> 	%ifdef disk.protected
  8462                              <1> 		%include "source/drivers/disk/pata.asm"
  8463                              <1> 	%endif
  8464                              <1> %endif
  8465                              <1> %ifdef disk.none
  8466                              <1> loadfile:	xor edx, edx
  8467                              <1> 			cmp byte [edi], '&'
  8468                              <1> 			je .ret
  8469                              <1> 			mov edx, 404	;no files are found except &
  8470                              <1> 		.ret:
  8471                              <1> 			ret
  8472                              <1> %else
  8473                              <1> ;This loads files using the methods in the loaded driver
  8474                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8475                              <1> 			;returns with err code in edx and file end in edi
  8476 000068F3 803F00              <1> 	cmp byte [edi], 0
  8477 000068F6 0F8448000000        <1> 	je near nofileload
  8478 000068FC 89FA                <1> 	mov edx, edi
  8479 000068FE BB[5B8C0300]        <1> 	mov ebx, diskfileindex
  8480                              <1> nextnamechar:
  8481 00006903 8A07                <1> 	mov al, [edi]
  8482 00006905 3C26                <1> 	cmp al, '&'
  8483 00006907 7440                <1> 	je nullfile
  8484 00006909 8A23                <1> 	mov ah, [ebx]
  8485 0000690B 47                  <1> 	inc edi
  8486 0000690C 43                  <1> 	inc ebx
  8487 0000690D 88C1                <1> 	mov cl, al
  8488 0000690F 08E1                <1> 	or cl, ah
  8489 00006911 80F900              <1> 	cmp cl, 0
  8490 00006914 746E                <1> 	je equalfilenames
  8491 00006916 80F920              <1> 	cmp cl, ' '
  8492 00006919 7469                <1> 	je equalfilenames
  8493 0000691B 3C2A                <1> 	cmp al, '*'
  8494 0000691D 742B                <1> 	je asteriskcheck
  8495 0000691F 80FC00              <1> 	cmp ah, 0
  8496 00006922 7410                <1> 	je nextfilename
  8497 00006924 3C00                <1> 	cmp al, 0
  8498 00006926 7404                <1> 	je getebxzero
  8499 00006928 38E0                <1> 	cmp al, ah
  8500 0000692A 74D7                <1> 	je nextnamechar
  8501                              <1> getebxzero:
  8502 0000692C 8A23                <1> 	mov ah, [ebx]
  8503 0000692E 43                  <1> 	inc ebx
  8504 0000692F 80FC00              <1> 	cmp ah, 0
  8505 00006932 75F8                <1> 	jne getebxzero
  8506                              <1> nextfilename:
  8507 00006934 81C308000000        <1> 	add ebx, 8		;next descriptor
  8508 0000693A 89D7                <1> 	mov edi, edx
  8509 0000693C 81FB[518D0300]      <1> 	cmp ebx, enddiskfileindex
  8510 00006942 72BF                <1> 	jb nextnamechar
  8511                              <1> nofileload:
  8512 00006944 BA94010000          <1> 	mov edx, 404	;indicate not found error
  8513                              <1> nullfile:
  8514 00006949 C3                  <1> 	ret
  8515                              <1> asteriskcheck:
  8516 0000694A 4B                  <1> 	dec ebx
  8517 0000694B 8A07                <1> 	mov al, [edi]
  8518 0000694D 3C2A                <1> 	cmp al, '*'
  8519 0000694F 74F9                <1> 	je asteriskcheck ;remove multiple asterisks
  8520 00006951 3C20                <1> 	cmp al, ' '
  8521 00006953 7415                <1> 	je equalfilenames2
  8522 00006955 3C00                <1> 	cmp al, 0
  8523 00006957 7411                <1> 	je equalfilenames2
  8524                              <1> .lp:
  8525 00006959 8A23                <1> 	mov ah, [ebx]
  8526 0000695B 80FC00              <1> 	cmp ah, 0
  8527 0000695E 74D4                <1> 	je nextfilename
  8528 00006960 38E0                <1> 	cmp al, ah
  8529 00006962 749F                <1> 	je nextnamechar
  8530 00006964 43                  <1> 	inc ebx
  8531 00006965 E9EFFFFFFF          <1> 	jmp .lp
  8532                              <1> equalfilenames2:
  8533 0000696A 81EB02000000        <1> 	sub ebx, 2
  8534                              <1> eqfilefind:
  8535 00006970 43                  <1> 	inc ebx
  8536 00006971 81FB[518D0300]      <1> 	cmp ebx, enddiskfileindex
  8537 00006977 0F83C7FFFFFF        <1> 	jae near nofileload
  8538 0000697D 8A03                <1> 	mov al, [ebx]
  8539 0000697F 3C00                <1> 	cmp al, 0
  8540 00006981 75ED                <1> 	jne eqfilefind
  8541 00006983 43                  <1> 	inc ebx
  8542                              <1> equalfilenames:
  8543 00006984 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8544 00006987 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8545 00006989 031D[038A0000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  8546 0000698F 31C9                <1> 	xor ecx, ecx
  8547 00006991 88C1                <1> 	mov cl, al			;get excess number of sectors
  8548 00006993 C0E102              <1> 	shl cl, 2
  8549 00006996 C0E902              <1> 	shr cl, 2			;cut off at 64
  8550 00006999 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8551 0000699B B500                <1> 	mov ch, 0			;drive 0
  8552 0000699D C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8553                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8554 000069A0 A3[E5690000]        <1> 	mov [filetracks], eax
  8555 000069A5 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8556 000069A7 89DA                <1> 	mov edx, ebx
  8557 000069A9 80F900              <1> 	cmp cl, 0
  8558 000069AC 7405                <1> 	je copytracksforfile
  8559 000069AE E885FEFFFF          <1> 	call diskr	;take care of excess sectors
  8560                              <1> copytracksforfile:
  8561 000069B3 A1[E5690000]        <1> 	mov eax, [filetracks]
  8562 000069B8 3D00000000          <1> 	cmp eax, 0
  8563 000069BD 741C                <1> 	je donecopyfile
  8564 000069BF 48                  <1> 	dec eax
  8565 000069C0 A3[E5690000]        <1> 	mov [filetracks], eax
  8566 000069C5 89D3                <1> 	mov ebx, edx	;get end lba
  8567 000069C7 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8568 000069C9 8A2D[028A0000]      <1> 	mov ch, [DriveNumber]
  8569 000069CF 89FE                <1> 	mov esi, edi	;reset buffer
  8570 000069D1 E862FEFFFF          <1> 	call diskr
  8571 000069D6 E9D8FFFFFF          <1> 	jmp copytracksforfile
  8572                              <1> donecopyfile:
  8573 000069DB BA00000000          <1> 	mov edx, 0	;no error
  8574 000069E0 C3                  <1> 	ret
  8575                              <1> 
  8576 000069E1 00000000            <1> oldesireal dd 0
  8577 000069E5 00000000            <1> filetracks dd 0
  8578 000069E9 00                  <1> lbad1 db 0
  8579 000069EA 00                  <1> lbad2 db 0
  8580 000069EB 00                  <1> lbad3 db 0
  8581 000069EC 00                  <1> lbad4 db 0
  8582 000069ED 00                  <1> lbad5 db 0
  8583 000069EE 00                  <1> lbad6 db 0
  8584 000069EF 6400                <1> segments dw 100
  8585                              <1> %endif
  8586                                      %include "source/threads.asm"
  8587                              <1> %ifdef threads.included	
  8588                              <1> nwcmdst:
  8589 000069F1 31C0                <1> 	xor eax, eax
  8590 000069F3 BC[00AE0300]        <1> 	mov esp, stackend
  8591 000069F8 A2[B66A0000]        <1> 	mov [threadson], al
  8592 000069FD A3[B76A0000]        <1> 	mov [currentthread], eax
  8593 00006A02 0504000000          <1> 	add eax, 4
  8594 00006A07 A3[B26A0000]        <1> 	mov [lastthread], eax
  8595 00006A0C FB                  <1> 	sti
  8596 00006A0D E96CC3FFFF          <1> 	jmp nwcmd
  8597                              <1> 
  8598                              <1> nomorethreadspace:
  8599 00006A12 BE[286A0000]        <1> 	mov esi, nmts
  8600 00006A17 E849B3FFFF          <1> 	call print
  8601 00006A1C C605[B66A0000]00    <1> 	mov byte [threadson], 0
  8602 00006A23 E956C3FFFF          <1> 	jmp nwcmd
  8603 00006A28 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8604 00006A31 6572666C6F770A00    <1>
  8605                              <1> 
  8606                              <1> nomorestackspace:
  8607 00006A39 BE[486A0000]        <1> 	mov esi, nmss
  8608 00006A3E E822B3FFFF          <1> 	call print
  8609 00006A43 E9A9FFFFFF          <1> 	jmp nwcmdst
  8610 00006A48 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8611 00006A51 72666C6F770A00      <1>
  8612                              <1> 	
  8613                              <1> threadswitch:
  8614 00006A58 60                  <1> 	pushad 
  8615 00006A59 BF[3C9E2D00]        <1> 	mov edi, threadlist
  8616 00006A5E A1[B76A0000]        <1> 	mov eax, [currentthread]
  8617 00006A63 40                  <1> 	inc eax
  8618 00006A64 A3[B76A0000]        <1> 	mov [currentthread], eax
  8619 00006A69 6648                <1> 	dec ax
  8620 00006A6B C1E002              <1> 	shl eax, 2
  8621 00006A6E 01C7                <1> 	add edi, eax
  8622 00006A70 8927                <1> 	mov [edi], esp
  8623 00006A72 81C704000000        <1> 	add edi, 4
  8624 00006A78 81FF[3CAE2D00]      <1> 	cmp edi, threadlistend
  8625 00006A7E 0F830D000000        <1> 	jae near nookespthread
  8626 00006A84 8B07                <1> 	mov eax, [edi]
  8627 00006A86 3D00000000          <1> 	cmp eax, 0
  8628 00006A8B 0F8519000000        <1> 	jne near okespthread
  8629                              <1> nookespthread:
  8630 00006A91 BF[3C9E2D00]        <1> 	mov edi, threadlist
  8631 00006A96 31C0                <1> 	xor eax, eax
  8632 00006A98 A3[B76A0000]        <1> 	mov [currentthread], eax
  8633 00006A9D 8B07                <1> 	mov eax, [edi]
  8634 00006A9F 3D00000000          <1> 	cmp eax, 0
  8635 00006AA4 0F8447FFFFFF        <1> 	je near nwcmdst
  8636                              <1> okespthread:
  8637 00006AAA 89C4                <1> 	mov esp, eax
  8638 00006AAC B020                <1> 	mov al, 0x20
  8639 00006AAE E620                <1> 	out 0x20, al
  8640 00006AB0 61                  <1> 	popad
  8641 00006AB1 CF                  <1> 	iret
  8642                              <1> 
  8643                              <1> %endif
  8644 00006AB2 04000000            <1> 	lastthread dd 4
  8645 00006AB6 00                  <1> 	threadson db 0
  8646 00006AB7 00000000            <1> 	currentthread dd 0
  8647                                  %ifdef gui.included
  8648                                      %include "source/gui/gui.asm"
  8649                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8650 00006ABB 31C0                <1> 	xor eax, eax
  8651 00006ABD 31DB                <1> 	xor ebx, ebx
  8652 00006ABF 31C9                <1> 	xor ecx, ecx
  8653 00006AC1 31D2                <1> 	xor edx, edx
  8654 00006AC3 E80D090000          <1> 	call guisetup
  8655                              <1> guiloop:
  8656 00006AC8 E85DEEFFFF          <1> 	call cursorgui
  8657                              <1> guistart:
  8658 00006ACD E874F4FFFF          <1> 	call getkey
  8659 00006AD2 C605[11810000]00    <1> 	mov byte [copygui], 0
  8660 00006AD9 E9EFFFFFFF          <1> 	jmp guistart
  8661                              <1> 
  8662                              <1> %include "source/gui/bmp.asm"
  8663                              <2> showbmp:
  8664 00006ADE 668B06              <2> 	mov ax, [esi]
  8665 00006AE1 663D424D            <2> 	cmp ax, "BM"
  8666 00006AE5 0F85BB000000        <2> 	jne near endedbmp
  8667 00006AEB 8B3D[4D580000]      <2> 	mov edi, [physbaseptr]
  8668 00006AF1 6689D0              <2> 	mov ax, dx
  8669 00006AF4 6689CB              <2> 	mov bx, cx
  8670 00006AF7 31C9                <2> 	xor ecx, ecx
  8671 00006AF9 31D2                <2> 	xor edx, edx
  8672 00006AFB 6689D9              <2> 	mov cx, bx
  8673 00006AFE 6689C2              <2> 	mov dx, ax
  8674 00006B01 01D7                <2> 	add edi, edx
  8675 00006B03 01D7                <2> 	add edi, edx
  8676 00006B05 31D2                <2> 	xor edx, edx
  8677 00006B07 668B15[25590000]    <2> 	mov dx, [resolutionx2]
  8678 00006B0E 034E16              <2> 	add ecx, [esi + 22]
  8679                              <2> bmplocloop:
  8680 00006B11 52                  <2> 	push edx
  8681 00006B12 31C0                <2> 	xor eax, eax
  8682 00006B14 6689D0              <2> 	mov ax, dx
  8683 00006B17 F7E1                <2> 	mul ecx
  8684 00006B19 5A                  <2> 	pop edx
  8685 00006B1A 663B0D[39580000]    <2> 	cmp cx, [resolutiony]
  8686 00006B21 7609                <2> 	jbe .nofixy
  8687 00006B23 31C9                <2> 	xor ecx, ecx
  8688 00006B25 668B0D[39580000]    <2> 	mov cx, [resolutiony]
  8689                              <2> .nofixy:
  8690 00006B2C 01C7                <2> 	add edi, eax
  8691 00006B2E 8B5612              <2> 	mov edx, [esi + 18]
  8692 00006B31 8B4E16              <2> 	mov ecx, [esi + 22]
  8693 00006B34 8B460A              <2> 	mov eax, [esi + 10]
  8694 00006B37 8B5E02              <2> 	mov ebx, [esi + 2]
  8695 00006B3A 01F3                <2> 	add ebx, esi
  8696 00006B3C 891D[AC6B0000]      <2> 	mov [bmpend], ebx
  8697 00006B42 89D3                <2> 	mov ebx, edx
  8698 00006B44 01C6                <2> 	add esi, eax
  8699                              <2> ldxbmp2:
  8700 00006B46 31D2                <2> 	xor edx, edx
  8701 00006B48 668B15[37580000]    <2> 	mov dx, [resolutionx]
  8702 00006B4F 39D3                <2> 	cmp ebx, edx
  8703 00006B51 7702                <2> 	ja ldxbmp
  8704 00006B53 89DA                <2> 	mov edx, ebx
  8705                              <2> ldxbmp:
  8706 00006B55 668B06              <2> 	mov ax, [esi]
  8707 00006B58 668907              <2> 	mov [edi], ax
  8708 00006B5B 81C702000000        <2> 	add edi, 2
  8709 00006B61 81C602000000        <2> 	add esi, 2
  8710 00006B67 3B35[AC6B0000]      <2> 	cmp esi, [bmpend]
  8711 00006B6D 7737                <2> 	ja endedbmp
  8712 00006B6F 4A                  <2> 	dec edx
  8713 00006B70 81FA00000000        <2> 	cmp edx, 0
  8714 00006B76 77DD                <2> 	ja ldxbmp
  8715 00006B78 31D2                <2> 	xor edx, edx
  8716 00006B7A 668B15[37580000]    <2> 	mov dx, [resolutionx]
  8717 00006B81 39D3                <2> 	cmp ebx, edx
  8718 00006B83 7610                <2> 	jbe .notover
  8719                              <2> .over:
  8720 00006B85 01DE                <2> 	add esi, ebx
  8721 00006B87 01DE                <2> 	add esi, ebx
  8722 00006B89 29D6                <2> 	sub esi, edx
  8723 00006B8B 29D6                <2> 	sub esi, edx
  8724 00006B8D 01DF                <2> 	add edi, ebx
  8725 00006B8F 01DF                <2> 	add edi, ebx
  8726 00006B91 29D7                <2> 	sub edi, edx
  8727 00006B93 29D7                <2> 	sub edi, edx
  8728                              <2> .notover:
  8729 00006B95 29DF                <2> 	sub edi, ebx
  8730 00006B97 29DF                <2> 	sub edi, ebx
  8731 00006B99 29D7                <2> 	sub edi, edx
  8732 00006B9B 29D7                <2> 	sub edi, edx
  8733 00006B9D 49                  <2> 	dec ecx
  8734 00006B9E 81F900000000        <2> 	cmp ecx, 0
  8735 00006BA4 77A0                <2> 	ja ldxbmp2
  8736                              <2> endedbmp:
  8737 00006BA6 E888030000          <2> 	call switchmousepos2
  8738 00006BAB C3                  <2> 	ret
  8739                              <2> 	
  8740 00006BAC 00000000            <2> 	bmpend dd 0
  8741                              <1> %include "source/gui/circle.asm"
  8742                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8743 00006BB0 55                  <2> 	push ebp
  8744 00006BB1 663D0000            <2> 	cmp ax, 0
  8745 00006BB5 770A                <2> 	ja .nozerocircle
  8746 00006BB7 E8751D0000          <2> 	call putpixel	;the easiest circle ever
  8747 00006BBC E9F7000000          <2> 	jmp .done
  8748                              <2> .nozerocircle:
  8749 00006BC1 6689F5              <2> 	mov bp, si
  8750 00006BC4 6650                <2> 	push ax
  8751 00006BC6 E8A71D0000          <2> 	call getpixelmem
  8752 00006BCB 31C0                <2> 	xor eax, eax
  8753 00006BCD 6658                <2> 	pop ax
  8754 00006BCF BE01000000          <2> 	mov esi, 1
  8755 00006BD4 29C6                <2> 	sub esi, eax
  8756 00006BD6 89C1                <2> 	mov ecx, eax
  8757 00006BD8 31C0                <2> 	xor eax, eax
  8758 00006BDA 66A1[25590000]      <2> 	mov ax, [resolutionx2]
  8759 00006BE0 F7E1                <2> 	mul ecx
  8760 00006BE2 50                  <2> 	push eax
  8761 00006BE3 31D2                <2> 	xor edx, edx
  8762 00006BE5 01C7                <2> 	add edi, eax
  8763 00006BE7 66892F              <2> 	mov [edi], bp
  8764 00006BEA 29C7                <2> 	sub edi, eax
  8765 00006BEC 29C7                <2> 	sub edi, eax
  8766 00006BEE 66892F              <2> 	mov [edi], bp
  8767 00006BF1 01C7                <2> 	add edi, eax
  8768 00006BF3 D1E1                <2> 	shl ecx, 1
  8769 00006BF5 01CF                <2> 	add edi, ecx
  8770 00006BF7 66892F              <2> 	mov [edi], bp
  8771 00006BFA D1E1                <2> 	shl ecx, 1
  8772 00006BFC 29CF                <2> 	sub edi, ecx
  8773 00006BFE 66892F              <2> 	mov [edi], bp
  8774 00006C01 D1E9                <2> 	shr ecx, 1
  8775 00006C03 01CF                <2> 	add edi, ecx
  8776 00006C05 D1E9                <2> 	shr ecx, 1
  8777 00006C07 B802000000          <2> 	mov eax, 2
  8778 00006C0C F7E1                <2> 	mul ecx
  8779 00006C0E 48                  <2> 	dec eax
  8780 00006C0F F7D0                <2> 	not eax ;make it negative
  8781 00006C11 A3[BE6C0000]        <2> 	mov [.ddF_y], eax
  8782 00006C16 58                  <2> 	pop eax
  8783 00006C17 BB01000000          <2> 	mov ebx, 1
  8784 00006C1C 891D[BA6C0000]      <2> 	mov [.ddF_x], ebx
  8785 00006C22 4B                  <2> 	dec ebx
  8786 00006C23 31D2                <2> 	xor edx, edx
  8787 00006C25 E904000000          <2> 	jmp .lp
  8788                              <2> .lpb:
  8789 00006C2A D1EA                <2> 	shr edx, 1
  8790 00006C2C D1E9                <2> 	shr ecx, 1
  8791                              <2> .lp:	;it starts this with the center in edi
  8792                              <2> 		;color in bp
  8793                              <2> 		;ddF_x in memory
  8794                              <2> 		;x*resolutionx2 in ebx
  8795                              <2> 		;x in edx
  8796                              <2> 		;ddF_y in memory
  8797                              <2> 		;y*resolutionx2 in eax
  8798                              <2> 		;f in esi
  8799                              <2> 		;y in ecx
  8800 00006C2E 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8801 00006C34 7717                <2> 	ja	.noddF_y
  8802 00006C36 49                  <2> 	dec ecx
  8803 00006C37 2B05[25590000]      <2> 	sub eax, [resolutionx2]
  8804 00006C3D 8105[BE6C0000]0200- <2> 	add dword [.ddF_y], 2
  8805 00006C45 0000                <2>
  8806 00006C47 0335[BE6C0000]      <2> 	add esi, [.ddF_y]
  8807                              <2> .noddF_y:
  8808 00006C4D 42                  <2> 	inc edx
  8809 00006C4E 031D[25590000]      <2> 	add ebx, [resolutionx2]
  8810 00006C54 8105[BA6C0000]0200- <2> 	add dword [.ddF_x], 2
  8811 00006C5C 0000                <2>
  8812 00006C5E 0335[BA6C0000]      <2> 	add esi, [.ddF_x]
  8813                              <2> 
  8814 00006C64 D1E2                <2> 	shl edx, 1
  8815 00006C66 D1E1                <2> 	shl ecx, 1
  8816 00006C68 01D7                <2> 	add edi, edx
  8817 00006C6A 01C7                <2> 	add edi, eax
  8818 00006C6C 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  8819 00006C6F D1E2                <2> 	shl edx, 1
  8820 00006C71 29D7                <2> 	sub edi, edx
  8821 00006C73 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8822 00006C76 D1E0                <2> 	shl eax, 1
  8823 00006C78 29C7                <2> 	sub edi, eax
  8824 00006C7A 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  8825 00006C7D 01D7                <2> 	add edi, edx
  8826 00006C7F 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8827 00006C82 D1E8                <2> 	shr eax, 1
  8828 00006C84 D1EA                <2> 	shr edx, 1
  8829 00006C86 01C7                <2> 	add edi, eax
  8830 00006C88 29D7                <2> 	sub edi, edx
  8831                              <2> 
  8832 00006C8A 39D1                <2> 	cmp ecx, edx
  8833 00006C8C 749C                <2> 	je .lpb
  8834                              <2> 
  8835 00006C8E 01DF                <2> 	add edi, ebx
  8836 00006C90 01CF                <2> 	add edi, ecx
  8837 00006C92 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8838 00006C95 D1E1                <2> 	shl ecx, 1
  8839 00006C97 29CF                <2> 	sub edi, ecx
  8840 00006C99 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8841 00006C9C D1E3                <2> 	shl ebx, 1
  8842 00006C9E 29DF                <2> 	sub edi, ebx
  8843 00006CA0 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8844 00006CA3 01CF                <2> 	add edi, ecx
  8845 00006CA5 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8846 00006CA8 D1EB                <2> 	shr ebx, 1
  8847 00006CAA D1E9                <2> 	shr ecx, 1
  8848 00006CAC 01DF                <2> 	add edi, ebx
  8849 00006CAE 29CF                <2> 	sub edi, ecx
  8850 00006CB0 39CA                <2> 	cmp edx, ecx
  8851 00006CB2 0F8272FFFFFF        <2> 	jb .lpb
  8852                              <2> .done:
  8853 00006CB8 5D                  <2> 	pop ebp
  8854 00006CB9 C3                  <2> 	ret
  8855                              <2> 	
  8856 00006CBA 00000000            <2> .ddF_x dd 0
  8857 00006CBE 00000000            <2> .ddF_y dd 0
  8858                              <2> 
  8859                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  8860 00006CC2 55                  <2> 	push ebp
  8861 00006CC3 663D0000            <2> 	cmp ax, 0
  8862 00006CC7 770A                <2> 	ja .nozerocircle
  8863 00006CC9 E8631C0000          <2> 	call putpixel	;the easiest circle ever
  8864 00006CCE E95A010000          <2> 	jmp .done
  8865                              <2> .nozerocircle:
  8866 00006CD3 6689F5              <2> 	mov bp, si
  8867 00006CD6 6650                <2> 	push ax
  8868 00006CD8 E8951C0000          <2> 	call getpixelmem
  8869 00006CDD 31C0                <2> 	xor eax, eax
  8870 00006CDF 6658                <2> 	pop ax
  8871 00006CE1 BE01000000          <2> 	mov esi, 1
  8872 00006CE6 29C6                <2> 	sub esi, eax
  8873 00006CE8 89C1                <2> 	mov ecx, eax
  8874 00006CEA 31C0                <2> 	xor eax, eax
  8875 00006CEC 66A1[25590000]      <2> 	mov ax, [resolutionx2]
  8876 00006CF2 F7E1                <2> 	mul ecx
  8877 00006CF4 50                  <2> 	push eax
  8878 00006CF5 31D2                <2> 	xor edx, edx
  8879 00006CF7 01C7                <2> 	add edi, eax
  8880 00006CF9 66892F              <2> 	mov [edi], bp
  8881 00006CFC 29C7                <2> 	sub edi, eax
  8882 00006CFE 29C7                <2> 	sub edi, eax
  8883 00006D00 66892F              <2> 	mov [edi], bp
  8884 00006D03 01C7                <2> 	add edi, eax
  8885 00006D05 D1E1                <2> 	shl ecx, 1
  8886 00006D07 01CF                <2> 	add edi, ecx
  8887 00006D09 51                  <2> 	push ecx
  8888                              <2> .s0:
  8889 00006D0A 66892F              <2> 	mov [edi], bp
  8890 00006D0D 81EF02000000        <2> 	sub edi, 2
  8891 00006D13 49                  <2> 	dec ecx
  8892 00006D14 81F900000000        <2> 	cmp ecx, 0
  8893 00006D1A 75EE                <2> 	jne .s0
  8894 00006D1C 66892F              <2> 	mov [edi], bp
  8895 00006D1F 59                  <2> 	pop ecx
  8896 00006D20 01CF                <2> 	add edi, ecx
  8897 00006D22 D1E9                <2> 	shr ecx, 1
  8898 00006D24 B802000000          <2> 	mov eax, 2
  8899 00006D29 F7E1                <2> 	mul ecx
  8900 00006D2B 48                  <2> 	dec eax
  8901 00006D2C F7D0                <2> 	not eax ;make it negative
  8902 00006D2E A3[336E0000]        <2> 	mov [.ddF_y], eax
  8903 00006D33 58                  <2> 	pop eax
  8904 00006D34 BB01000000          <2> 	mov ebx, 1
  8905 00006D39 891D[2F6E0000]      <2> 	mov [.ddF_x], ebx
  8906 00006D3F 4B                  <2> 	dec ebx
  8907 00006D40 31D2                <2> 	xor edx, edx
  8908 00006D42 E904000000          <2> 	jmp .lp
  8909                              <2> .lpb:
  8910 00006D47 D1EA                <2> 	shr edx, 1
  8911 00006D49 D1E9                <2> 	shr ecx, 1
  8912                              <2> .lp:	;it starts this with the center in edi
  8913                              <2> 		;color in bp
  8914                              <2> 		;ddF_x in memory
  8915                              <2> 		;x*resolutionx2 in ebx
  8916                              <2> 		;x in edx
  8917                              <2> 		;ddF_y in memory
  8918                              <2> 		;y*resolutionx2 in eax
  8919                              <2> 		;f in esi
  8920                              <2> 		;y in ecx
  8921 00006D4B 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8922 00006D51 7717                <2> 	ja	.noddF_y
  8923 00006D53 49                  <2> 	dec ecx
  8924 00006D54 2B05[25590000]      <2> 	sub eax, [resolutionx2]
  8925 00006D5A 8105[336E0000]0200- <2> 	add dword [.ddF_y], 2
  8926 00006D62 0000                <2>
  8927 00006D64 0335[336E0000]      <2> 	add esi, [.ddF_y]
  8928                              <2> .noddF_y:
  8929 00006D6A 42                  <2> 	inc edx
  8930 00006D6B 031D[25590000]      <2> 	add ebx, [resolutionx2]
  8931 00006D71 8105[2F6E0000]0200- <2> 	add dword [.ddF_x], 2
  8932 00006D79 0000                <2>
  8933 00006D7B 0335[2F6E0000]      <2> 	add esi, [.ddF_x]
  8934                              <2> 
  8935 00006D81 D1E2                <2> 	shl edx, 1
  8936 00006D83 D1E1                <2> 	shl ecx, 1
  8937 00006D85 52                  <2> 	push edx
  8938 00006D86 29D7                <2> 	sub edi, edx
  8939 00006D88 01C7                <2> 	add edi, eax
  8940 00006D8A 81FA00000000        <2> 	cmp edx, 0
  8941 00006D90 7412                <2> 	je .nos1
  8942                              <2> .s1:
  8943 00006D92 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8944 00006D95 81C702000000        <2> 	add edi, 2
  8945 00006D9B 4A                  <2> 	dec edx
  8946 00006D9C 81FA00000000        <2> 	cmp edx, 0
  8947 00006DA2 75EE                <2> 	jne .s1
  8948                              <2> .nos1:
  8949 00006DA4 66892F              <2> 	mov [edi], bp
  8950 00006DA7 5A                  <2> 	pop edx
  8951 00006DA8 52                  <2> 	push edx
  8952 00006DA9 29C7                <2> 	sub edi, eax
  8953 00006DAB 29C7                <2> 	sub edi, eax
  8954 00006DAD 81FA00000000        <2> 	cmp edx, 0
  8955 00006DB3 7412                <2> 	je .nos2
  8956                              <2> .s2:
  8957 00006DB5 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8958 00006DB8 81EF02000000        <2> 	sub edi, 2
  8959 00006DBE 4A                  <2> 	dec edx
  8960 00006DBF 81FA00000000        <2> 	cmp edx, 0
  8961 00006DC5 75EE                <2> 	jne .s2
  8962                              <2> .nos2:
  8963 00006DC7 66892F              <2> 	mov [edi], bp
  8964 00006DCA 5A                  <2> 	pop edx
  8965 00006DCB 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  8966 00006DCD 01D7                <2> 	add edi, edx
  8967                              <2> 
  8968 00006DCF 39D1                <2> 	cmp ecx, edx
  8969 00006DD1 0F8470FFFFFF        <2> 	je .lpb
  8970                              <2> 
  8971 00006DD7 51                  <2> 	push ecx
  8972 00006DD8 01DF                <2> 	add edi, ebx
  8973 00006DDA 29CF                <2> 	sub edi, ecx
  8974 00006DDC 81F900000000        <2> 	cmp ecx, 0
  8975 00006DE2 7412                <2> 	je .nos3
  8976                              <2> .s3:
  8977 00006DE4 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8978 00006DE7 81C702000000        <2> 	add edi, 2
  8979 00006DED 49                  <2> 	dec ecx
  8980 00006DEE 81F900000000        <2> 	cmp ecx, 0
  8981 00006DF4 75EE                <2> 	jne .s3
  8982                              <2> .nos3:
  8983 00006DF6 66892F              <2> 	mov [edi], bp
  8984 00006DF9 59                  <2> 	pop ecx
  8985 00006DFA 51                  <2> 	push ecx
  8986 00006DFB 29DF                <2> 	sub edi, ebx
  8987 00006DFD 29DF                <2> 	sub edi, ebx
  8988 00006DFF 81F900000000        <2> 	cmp ecx, 0
  8989 00006E05 7412                <2> 	je .nos4
  8990                              <2> .s4:
  8991 00006E07 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8992 00006E0A 81EF02000000        <2> 	sub edi, 2
  8993 00006E10 49                  <2> 	dec ecx
  8994 00006E11 81F900000000        <2> 	cmp ecx, 0
  8995 00006E17 75EE                <2> 	jne .s4
  8996                              <2> .nos4:
  8997 00006E19 66892F              <2> 	mov [edi], bp
  8998 00006E1C 59                  <2> 	pop ecx
  8999 00006E1D 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  9000 00006E1F 01CF                <2> 	add edi, ecx
  9001                              <2> 
  9002 00006E21 D1EA                <2> 	shr edx, 1
  9003 00006E23 D1E9                <2> 	shr ecx, 1
  9004 00006E25 39CA                <2> 	cmp edx, ecx
  9005 00006E27 0F821EFFFFFF        <2> 	jb .lp
  9006                              <2> .done:
  9007 00006E2D 5D                  <2> 	pop ebp
  9008 00006E2E C3                  <2> 	ret
  9009                              <2> 	
  9010 00006E2F 00000000            <2> .ddF_x dd 0
  9011 00006E33 00000000            <2> .ddF_y dd 0
  9012                              <1> %include "source/gui/cursor.asm"
  9013                              <2> clearmousecursor:
  9014 00006E37 BE[26720000]        <2> 		mov esi, background
  9015 00006E3C 8B3D[4D580000]      <2> 		mov edi, [physbaseptr]
  9016 00006E42 31D2                <2> 		xor edx, edx
  9017 00006E44 31C9                <2> 		xor ecx, ecx
  9018 00006E46 668B15[175B0000]    <2> 		mov dx, [lastmouseposition]
  9019 00006E4D 668B0D[195B0000]    <2> 		mov cx, [lastmouseposition + 2]
  9020 00006E54 01D7                <2> 		add edi, edx
  9021 00006E56 31D2                <2> 		xor edx, edx
  9022 00006E58 668B15[25590000]    <2> 		mov dx, [resolutionx2]
  9023 00006E5F 81F900000000        <2> 		cmp ecx, 0
  9024 00006E65 7408                <2> 		je .nomul
  9025 00006E67 52                  <2> 		push edx
  9026 00006E68 89D0                <2> 		mov eax, edx
  9027 00006E6A F7E1                <2> 		mul ecx
  9028 00006E6C 01C7                <2> 		add edi, eax
  9029 00006E6E 5A                  <2> 		pop edx
  9030                              <2> .nomul:
  9031                              <2> %ifdef 	gui.background
  9032 00006E6F 813D[F8710000]0000- <2> 		cmp dword [backgroundimage], 0
  9033 00006E77 0000                <2>
  9034 00006E79 7438                <2> 		je .noyclr
  9035 00006E7B 8B35[F8710000]      <2> 		mov esi, [backgroundimage]
  9036 00006E81 2B3D[4D580000]      <2> 		sub edi, [physbaseptr]
  9037 00006E87 01FE                <2> 		add esi, edi
  9038 00006E89 033D[4D580000]      <2> 		add edi, [physbaseptr]
  9039                              <2> .backlp:
  9040 00006E8F 31DB                <2> 		xor ebx, ebx
  9041                              <2> .noyback:
  9042 00006E91 8B041E              <2> 		mov eax, [esi + ebx]
  9043 00006E94 89041F              <2> 		mov [edi + ebx], eax
  9044 00006E97 81C304000000        <2> 		add ebx, 4
  9045 00006E9D 81FB10000000        <2> 		cmp ebx, 16
  9046 00006EA3 75EC                <2> 		jne .noyback
  9047 00006EA5 01D7                <2> 		add edi, edx
  9048 00006EA7 01D6                <2> 		add esi, edx
  9049 00006EA9 6641                <2> 		inc cx
  9050 00006EAB 6681F91000          <2> 		cmp cx, 16
  9051 00006EB0 72DD                <2> 		jb .backlp
  9052 00006EB2 C3                  <2> 		ret
  9053                              <2> %endif
  9054                              <2> .noyclr:
  9055 00006EB3 668B06              <2> 		mov ax, [esi]
  9056 00006EB6 C1C010              <2> 		rol eax, 16
  9057 00006EB9 668B06              <2> 		mov ax, [esi]
  9058 00006EBC 8907                <2> 		mov [edi], eax
  9059 00006EBE 894704              <2> 		mov [edi + 4], eax
  9060 00006EC1 894708              <2> 		mov [edi + 8], eax
  9061 00006EC4 89470C              <2> 		mov [edi + 12], eax
  9062 00006EC7 01D7                <2> 		add edi, edx
  9063 00006EC9 6641                <2> 		inc cx
  9064 00006ECB 6681F91000          <2> 		cmp cx, 16
  9065 00006ED0 72E1                <2> 		jb .noyclr
  9066 00006ED2 C3                  <2> 		ret
  9067                              <2> 
  9068                              <2> switchmousepos:		;;switch were the mouse is located
  9069 00006ED3 BE[9CE22B00]        <2> 		mov esi, mousecolorbuf
  9070 00006ED8 8B3D[4D580000]      <2> 		mov edi, [physbaseptr]
  9071 00006EDE 31D2                <2> 		xor edx, edx
  9072 00006EE0 31C9                <2> 		xor ecx, ecx
  9073 00006EE2 668B15[175B0000]    <2> 		mov dx, [lastmouseposition]
  9074 00006EE9 668B0D[195B0000]    <2> 		mov cx, [lastmouseposition + 2]
  9075 00006EF0 01D7                <2> 		add edi, edx
  9076 00006EF2 31D2                <2> 		xor edx, edx
  9077 00006EF4 668B15[25590000]    <2> 		mov dx, [resolutionx2]
  9078 00006EFB 6681F90000          <2> 		cmp cx, 0
  9079 00006F00 740B                <2> 		je noswmsy
  9080 00006F02 01D7                <2> swmsy:		add edi, edx
  9081 00006F04 6649                <2> 		dec cx
  9082 00006F06 6681F90000          <2> 		cmp cx, 0
  9083 00006F0B 75F5                <2> 		jne swmsy
  9084 00006F0D 8B06                <2> noswmsy:	mov eax, [esi]
  9085 00006F0F 8B5E04              <2> 		mov ebx, [esi + 4]
  9086 00006F12 8907                <2> 		mov [edi], eax
  9087 00006F14 895F04              <2> 		mov [edi + 4], ebx
  9088 00006F17 8B4608              <2> 		mov eax, [esi + 8]
  9089 00006F1A 8B5E0C              <2> 		mov ebx, [esi + 12]
  9090 00006F1D 894708              <2> 		mov [edi + 8], eax
  9091 00006F20 895F0C              <2> 		mov [edi + 12], ebx
  9092 00006F23 01D7                <2> 		add edi, edx
  9093 00006F25 81C610000000        <2> 		add esi, 16
  9094 00006F2B 81FE[9CE32B00]      <2> 		cmp esi, mcolorend
  9095 00006F31 72DA                <2> 		jb noswmsy
  9096                              <2> 		
  9097                              <2> switchmousepos2:
  9098 00006F33 BE[9CE22B00]        <2> 		mov esi, mousecolorbuf
  9099 00006F38 8B3D[4D580000]      <2> 		mov edi, [physbaseptr]
  9100 00006F3E 31D2                <2> 		xor edx, edx
  9101 00006F40 31C9                <2> 		xor ecx, ecx
  9102 00006F42 668B15[1B5B0000]    <2> 		mov dx, [mousecursorposition]
  9103 00006F49 668B0D[1D5B0000]    <2> 		mov cx, [mousecursorposition + 2]
  9104 00006F50 01D7                <2> 		add edi, edx
  9105 00006F52 31D2                <2> 		xor edx, edx
  9106 00006F54 668B15[25590000]    <2> 		mov dx, [resolutionx2]
  9107 00006F5B 6681F90000          <2> 		cmp cx, 0
  9108 00006F60 740B                <2> 		je noswmsy2
  9109 00006F62 01D7                <2> swmsy2:		add edi, edx
  9110 00006F64 6649                <2> 		dec cx
  9111 00006F66 6681F90000          <2> 		cmp cx, 0
  9112 00006F6B 75F5                <2> 		jne swmsy2
  9113 00006F6D 8B07                <2> noswmsy2:	mov eax, [edi]
  9114 00006F6F 8B5F04              <2> 		mov ebx, [edi + 4]
  9115 00006F72 8906                <2> 		mov [esi], eax
  9116 00006F74 895E04              <2> 		mov [esi + 4], ebx
  9117 00006F77 8B4708              <2> 		mov eax, [edi + 8]
  9118 00006F7A 8B5F0C              <2> 		mov ebx, [edi + 12]
  9119 00006F7D 894608              <2> 		mov [esi + 8], eax
  9120 00006F80 895E0C              <2> 		mov [esi + 12], ebx
  9121 00006F83 01D7                <2> 		add edi, edx
  9122 00006F85 81C610000000        <2> 		add esi, 16
  9123 00006F8B 81FE[9CE32B00]      <2> 		cmp esi, mcolorend
  9124 00006F91 72DA                <2> 		jb noswmsy2
  9125 00006F93 C3                  <2> 		ret
  9126                              <2> 		
  9127                              <1> %include "source/gui/icon.asm"
  9128 00006F94 0000                <2> iconcolor dw 0
  9129                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  9130 00006F96 A2[9A890000]        <2> 		mov [iconselected], al
  9131 00006F9B 8025[9A890000]01    <2> 		and byte [iconselected], 1
  9132 00006FA2 B401                <2> 		mov ah, 1
  9133 00006FA4 E8F2160000          <2> 		call graphicsadd
  9134                              <2> 	showicon2:
  9135 00006FA9 8B3D[4D580000]      <2> 		mov edi, [physbaseptr]
  9136 00006FAF 6601D2              <2> 		add dx, dx
  9137 00006FB2 663B15[25590000]    <2> 		cmp dx, [resolutionx2]
  9138 00006FB9 720C                <2> 		jb screenxgood
  9139 00006FBB 668B15[25590000]    <2> 		mov dx, [resolutionx2]
  9140 00006FC2 6681EA4000          <2> 		sub dx, 64
  9141                              <2> 	screenxgood:
  9142 00006FC7 6681F90000          <2> 		cmp cx, 0
  9143 00006FCC 742B                <2> 		je noscreenygoodchk
  9144 00006FCE 663B0D[39580000]    <2> 		cmp cx, [resolutiony]
  9145 00006FD5 720C                <2> 		jb screenygood
  9146 00006FD7 668B0D[39580000]    <2> 		mov cx, [resolutiony]
  9147 00006FDE 6681E92000          <2> 		sub cx, 32
  9148                              <2> 	screenygood:
  9149 00006FE3 50                  <2> 		push eax
  9150 00006FE4 52                  <2> 		push edx
  9151 00006FE5 31C0                <2> 		xor eax, eax
  9152 00006FE7 31DB                <2> 		xor ebx, ebx
  9153 00006FE9 668B1D[25590000]    <2> 		mov bx, [resolutionx2]
  9154 00006FF0 6689C8              <2> 		mov ax, cx
  9155 00006FF3 F7E3                <2> 		mul ebx
  9156 00006FF5 01C7                <2> 		add edi, eax
  9157 00006FF7 5A                  <2> 		pop edx
  9158 00006FF8 58                  <2> 		pop eax
  9159                              <2> 	noscreenygoodchk:
  9160 00006FF9 31DB                <2> 		xor ebx, ebx
  9161 00006FFB 6689D3              <2> 		mov bx, dx
  9162 00006FFE 01DF                <2> 		add edi, ebx
  9163 00007000 6631C9              <2> 		xor cx, cx
  9164 00007003 668B06              <2> 		mov ax, [esi]
  9165 00007006 81C602000000        <2> 		add esi, 2
  9166 0000700C 66A3[946F0000]      <2> 		mov [iconcolor], ax
  9167                              <2> 	writeicon:
  9168 00007012 8B06                <2> 		mov eax, [esi]
  9169 00007014 D1C0                <2> 		rol eax, 1
  9170 00007016 30C9                <2> 		xor cl, cl
  9171                              <2> 	writeiconline:
  9172 00007018 B201                <2> 		mov dl, 1
  9173 0000701A 20C2                <2> 		and dl, al
  9174 0000701C 3215[9A890000]      <2> 		xor dl, [iconselected]
  9175 00007022 668B1D[26720000]    <2> 		mov bx, [background]
  9176 00007029 66891F              <2> 		mov [edi], bx
  9177 0000702C 80FA00              <2> 		cmp dl, 0
  9178 0000702F 740A                <2> 		je noiconline
  9179 00007031 668B15[946F0000]    <2> 		mov dx, [iconcolor]
  9180 00007038 668917              <2> 		mov [edi], dx
  9181                              <2> 	noiconline:
  9182 0000703B 81C702000000        <2> 		add edi, 2
  9183 00007041 D1C0                <2> 		rol eax, 1
  9184 00007043 FEC1                <2> 		inc cl
  9185 00007045 80F920              <2> 		cmp cl, 32
  9186 00007048 72CE                <2> 		jb writeiconline
  9187 0000704A 81C604000000        <2> 		add esi, 4
  9188 00007050 FEC5                <2> 		inc ch
  9189 00007052 31D2                <2> 		xor edx, edx
  9190 00007054 668B15[25590000]    <2> 		mov dx, [resolutionx2]
  9191 0000705B 01D7                <2> 		add edi, edx
  9192 0000705D 81EF40000000        <2> 		sub edi, 64
  9193 00007063 80FD20              <2> 		cmp ch, 32
  9194 00007066 72AA                <2> 		jb writeicon
  9195 00007068 31C0                <2> 		xor eax, eax
  9196 0000706A C3                  <2> 		ret
  9197                              <1> %include "source/gui/line.asm"
  9198                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  9199 0000706B 668935[8D710000]    <2> 	mov [.color], si
  9200 00007072 C605[8F710000]00    <2> 	mov byte [.steep], 0
  9201 00007079 C605[90710000]00    <2> 	mov byte [.yreversed], 0
  9202 00007080 E907000000          <2> 	jmp .notsteep
  9203                              <2> .steeploop:
  9204 00007085 C605[8F710000]01    <2> 	mov byte [.steep], 1
  9205                              <2> .notsteep:
  9206 0000708C 31FF                <2> 	xor edi, edi
  9207 0000708E 31F6                <2> 	xor esi, esi
  9208 00007090 6639DA              <2> 	cmp dx, bx
  9209 00007093 7705                <2> 	ja .noreversex
  9210 00007095 6687D3              <2> 	xchg dx, bx
  9211 00007098 6691                <2> 	xchg cx, ax
  9212                              <2> .noreversex:
  9213 0000709A 6689D7              <2> 	mov di, dx
  9214 0000709D 6629DF              <2> 	sub di, bx
  9215                              <2> 	
  9216 000070A0 6639C1              <2> 	cmp cx, ax
  9217 000070A3 720B                <2> 	jb .reversey
  9218 000070A5 6689CE              <2> 	mov si, cx
  9219 000070A8 6629C6              <2> 	sub si, ax
  9220 000070AB E90D000000          <2> 	jmp .normal
  9221                              <2> .reversey:
  9222 000070B0 C605[90710000]02    <2> 	mov byte [.yreversed], 2
  9223 000070B7 6689C6              <2> 	mov si, ax
  9224 000070BA 6629CE              <2> 	sub si, cx	
  9225                              <2> .normal:
  9226 000070BD 6687CA              <2> 	xchg cx, dx
  9227 000070C0 6693                <2> 	xchg ax, bx
  9228 000070C2 6639FE              <2> 	cmp si, di
  9229 000070C5 77BE                <2> 	ja .steeploop
  9230 000070C7 6687CA              <2> 	xchg cx, dx
  9231 000070CA 6693                <2> 	xchg ax, bx
  9232                              <2> 	
  9233 000070CC 6691                <2> 	xchg ax, cx
  9234 000070CE 6687DA              <2> 	xchg bx, dx
  9235 000070D1 66893D[93710000]    <2> 	mov [.xdelta], di
  9236 000070D8 668935[95710000]    <2> 	mov [.ydelta], si
  9237 000070DF 668B35[8D710000]    <2> 	mov si, [.color]
  9238 000070E6 66891D[91710000]    <2> 	mov [.endline], bx
  9239 000070ED 6652                <2> 	push dx
  9240 000070EF 6651                <2> 	push cx
  9241 000070F1 6687CA              <2> 	xchg cx, dx
  9242 000070F4 803D[8F710000]01    <2> 	cmp byte [.steep], 1
  9243 000070FB 7403                <2> 	je .xchg
  9244 000070FD 6687D1              <2> 	xchg dx, cx
  9245                              <2> .xchg:
  9246 00007100 E86D180000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9247 00007105 6659                <2> 	pop cx
  9248 00007107 665A                <2> 	pop dx
  9249 00007109 31C0                <2> 	xor eax, eax
  9250 0000710B 66A1[93710000]      <2> 	mov ax, [.xdelta]
  9251 00007111 66D1E8              <2> 	shr ax, 1
  9252 00007114 8A0D[8F710000]      <2> 	mov cl, [.steep]
  9253 0000711A 0A0D[90710000]      <2> 	or cl, [.yreversed]
  9254 00007120 55                  <2> 	push ebp
  9255 00007121 668B2D[91710000]    <2> 	mov bp, [.endline]
  9256 00007128 6629D5              <2> 	sub bp, dx
  9257 0000712B 668B15[95710000]    <2> 	mov dx, [.ydelta]
  9258                              <2> .lp:
  9259 00007132 668937              <2> 	mov [edi], si
  9260 00007135 6639D0              <2> 	cmp ax, dx
  9261 00007138 7332                <2> 	jae .noaddx
  9262 0000713A F6C102              <2> 	test cl, 2
  9263 0000713D 7414                <2> 	jz .nodecy
  9264 0000713F F6C101              <2> 	test cl, 1
  9265 00007142 7509                <2> 	jnz .steepy
  9266 00007144 29DF                <2> 	sub edi, ebx
  9267 00007146 29DF                <2> 	sub edi, ebx
  9268 00007148 E906000000          <2> 	jmp .nodecy
  9269                              <2> .steepy:
  9270 0000714D 81EF04000000        <2> 	sub edi, 4
  9271                              <2> .nodecy:
  9272 00007153 660305[93710000]    <2> 	add ax, [.xdelta]
  9273 0000715A F6C101              <2> 	test cl, 1
  9274 0000715D 7507                <2> 	jnz .steepx
  9275 0000715F 01DF                <2> 	add edi, ebx
  9276 00007161 E906000000          <2> 	jmp .noaddx
  9277                              <2> .steepx:
  9278 00007166 81C702000000        <2> 	add edi, 2
  9279                              <2> .noaddx:
  9280 0000716C 6629D0              <2> 	sub ax, dx
  9281 0000716F 664D                <2> 	dec bp
  9282 00007171 81C702000000        <2> 	add edi, 2
  9283 00007177 F6C101              <2> 	test cl, 1
  9284 0000717A 7408                <2> 	jz .nosteepx
  9285 0000717C 81EF02000000        <2> 	sub edi, 2
  9286 00007182 01DF                <2> 	add edi, ebx
  9287                              <2> .nosteepx:
  9288 00007184 6681FD0000          <2> 	cmp bp, 0
  9289 00007189 75A7                <2> 	jne .lp
  9290                              <2> .done:
  9291 0000718B 5D                  <2> 	pop ebp
  9292 0000718C C3                  <2> 	ret
  9293                              <2> 	
  9294 0000718D 0000                <2> .color dw 0
  9295 0000718F 00                  <2> .steep db 0
  9296 00007190 00                  <2> .yreversed db 0
  9297 00007191 0000                <2> .endline dw 0
  9298 00007193 0000                <2> .xdelta dw 0
  9299 00007195 0000                <2> .ydelta dw 0
  9300                              <1> %include "source/gui/refresh.asm"
  9301                              <2> guiclear:
  9302 00007197 8B3D[4D580000]      <2> 	mov edi, [physbaseptr]
  9303 0000719D 668B15[37580000]    <2> 	mov dx, [resolutionx]
  9304 000071A4 668B0D[39580000]    <2> 	mov cx, [resolutiony]
  9305 000071AB 668B1D[26720000]    <2> 	mov bx, [background]
  9306 000071B2 66891D[28720000]    <2> 	mov [background + 2], bx
  9307                              <2> %ifdef gui.background
  9308 000071B9 813D[F8710000]0000- <2> 	cmp dword [backgroundimage], 0
  9309 000071C1 0000                <2>
  9310 000071C3 7437                <2> 	je guiclear.noback
  9311 000071C5 8B35[F8710000]      <2> 		mov esi, [backgroundimage]
  9312                              <2> 	.lp:
  9313                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  9314                              <2> 		;movdqa [edi], xmm0
  9315                              <2> 		;add esi, 16
  9316                              <2> 		;add edi, 16
  9317                              <2> 		;sub dx, 8
  9318 000071CB 8B06                <2> 		mov eax, [esi]
  9319 000071CD 8907                <2> 		mov [edi], eax
  9320 000071CF 81C604000000        <2> 		add esi, 4
  9321 000071D5 81C704000000        <2> 		add edi, 4
  9322 000071DB 6681EA0200          <2> 		sub dx, 2
  9323 000071E0 6681FA0000          <2> 		cmp dx, 0
  9324 000071E5 77E4                <2> 		ja .lp
  9325 000071E7 6649                <2> 		dec cx
  9326 000071E9 668B15[37580000]    <2> 		mov dx, [resolutionx]
  9327 000071F0 6681F90000          <2> 		cmp cx, 0
  9328 000071F5 77D4                <2> 		ja .lp
  9329 000071F7 C3                  <2> 		ret
  9330 000071F8 00000000            <2> 	backgroundimage dd 0
  9331                              <2> %endif
  9332                              <2> guiclear.noback:
  9333 000071FC A1[26720000]        <2> 	mov eax, [background]
  9334                              <2> guiclearloop:
  9335 00007201 8907                <2> 	mov [edi], eax
  9336 00007203 81C704000000        <2> 	add edi, 4
  9337 00007209 6681EA0200          <2> 	sub dx, 2
  9338 0000720E 6681FA0000          <2> 	cmp dx, 0
  9339 00007213 77EC                <2> 	ja guiclearloop
  9340 00007215 6649                <2> 	dec cx
  9341 00007217 668B15[37580000]    <2> 	mov dx, [resolutionx]
  9342 0000721E 6681F90000          <2> 	cmp cx, 0
  9343 00007223 77DC                <2> 	ja guiclearloop
  9344 00007225 C3                  <2> 	ret
  9345                              <2> 
  9346 00007226 CF7B<rept>          <2> background times 2 dw 0111101111001111b
  9347                              <2> 	.original equ 0111101111001111b
  9348                              <2> 
  9349                              <2> reloadallgraphics:
  9350 0000722A BF[9CCC0300]        <2> 		mov edi, graphicstable
  9351                              <2> reloadgraphicsloop:
  9352 0000722F 8B7702              <2> 		mov esi, [edi + 2]
  9353 00007232 668B5706            <2> 		mov dx, [edi + 6]
  9354 00007236 668B4F08            <2> 		mov cx, [edi + 8]
  9355 0000723A 668B07              <2> 		mov ax, [edi]
  9356 0000723D 668B5F0A            <2> 		mov bx, [edi + 10]
  9357 00007241 893D[87860000]      <2> 		mov [grpctblpos], edi
  9358 00007247 3B3D[1B810000]      <2> 		cmp edi, [dragging]
  9359 0000724D 741E                <2> 		je loadedgraphic
  9360 0000724F 663D0100            <2> 		cmp ax, 1
  9361 00007253 0F843C000000        <2> 		je near icongraphic
  9362 00007259 663D0200            <2> 		cmp ax, 2
  9363 0000725D 0F8445000000        <2> 		je near stringgraphic
  9364 00007263 663D0300            <2> 		cmp ax, 3
  9365 00007267 0F8419000000        <2> 		je near windowgraphic
  9366 0000726D 8B3D[87860000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  9367 00007273 81C710000000        <2> 		add edi, 16
  9368 00007279 81FF[9CCE0300]      <2> 		cmp edi, graphicstableend
  9369 0000727F 733A                <2> 		jae donereloadgraphics
  9370 00007281 E9A9FFFFFF          <2> 		jmp reloadgraphicsloop
  9371                              <2> windowgraphic:
  9372 00007286 E852090000          <2> 		call showwindow2
  9373 0000728B E8CEABFFFF          <2> 		call cleardouble
  9374 00007290 E9D8FFFFFF          <2> 		jmp loadedgraphic
  9375 00007295 80E301              <2> icongraphic:	and bl, 1
  9376 00007298 881D[9A890000]      <2> 		mov [iconselected], bl
  9377 0000729E E806FDFFFF          <2> 		call showicon2
  9378 000072A3 E9C5FFFFFF          <2> 		jmp loadedgraphic
  9379 000072A8 80E301              <2> stringgraphic:  and bl, 1
  9380 000072AB 881D[17810000]      <2> 		mov [mouseselecton], bl
  9381 000072B1 E8DF050000          <2> 		call showstring2
  9382 000072B6 E9B2FFFFFF          <2> 		jmp loadedgraphic
  9383                              <2> donereloadgraphics:
  9384 000072BB 8B3D[1B810000]      <2> 		mov edi, [dragging]
  9385 000072C1 81FF[9CCC0300]      <2> 		cmp edi, graphicstable
  9386 000072C7 7226                <2> 		jb notcorrectdrag
  9387 000072C9 668B07              <2> 		mov ax, [edi]
  9388 000072CC 8B7702              <2> 		mov esi, [edi + 2]
  9389 000072CF 668B5706            <2> 		mov dx, [edi + 6]
  9390 000072D3 668B4F08            <2> 		mov cx, [edi + 8]
  9391 000072D7 668B5F0A            <2> 		mov bx, [edi + 10]
  9392 000072DB 663D0100            <2> 		cmp ax, 1
  9393 000072DF 750F                <2> 		jne noticondragging
  9394 000072E1 80E301              <2> 		and bl, 1
  9395 000072E4 881D[9A890000]      <2> 		mov [iconselected], bl
  9396 000072EA E8BAFCFFFF          <2> 		call showicon2
  9397                              <2> notcorrectdrag:
  9398 000072EF C3                  <2> 		ret
  9399                              <2> 
  9400                              <2> 	noticondragging:
  9401 000072F0 663D0200            <2> 		cmp ax, 2
  9402 000072F4 75F9                <2> 		jne notcorrectdrag
  9403 000072F6 80E301              <2> 		and bl, 1
  9404 000072F9 881D[17810000]      <2> 		mov [mouseselecton], bl
  9405 000072FF E891050000          <2> 		call showstring2
  9406 00007304 E9E6FFFFFF          <2> 		jmp notcorrectdrag
  9407                              <1> %include "source/gui/square.asm"
  9408                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  9409 00007309 6639D3              <2> 	cmp bx, dx
  9410 0000730C 7303                <2> 	jae .noxchgx
  9411 0000730E 6687DA              <2> 	xchg bx, dx
  9412                              <2> .noxchgx:
  9413 00007311 6639C8              <2> 	cmp ax, cx
  9414 00007314 7302                <2> 	jae .noxchgy
  9415 00007316 6691                <2> 	xchg ax, cx
  9416                              <2> .noxchgy:
  9417 00007318 6650                <2> 	push ax
  9418 0000731A 6653                <2> 	push bx
  9419 0000731C 6652                <2> 	push dx
  9420 0000731E E84F160000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9421 00007323 31D2                <2> 	xor edx, edx
  9422 00007325 665A                <2> 	pop dx
  9423 00007327 31DB                <2> 	xor ebx, ebx
  9424 00007329 665B                <2> 	pop bx
  9425 0000732B 6658                <2> 	pop ax
  9426                              <2> .lp0:
  9427 0000732D 6652                <2> 	push dx
  9428                              <2> .lp:
  9429 0000732F 668937              <2> 	mov [edi], si
  9430 00007332 81C702000000        <2> 	add edi, 2
  9431 00007338 6642                <2> 	inc dx
  9432 0000733A 6639DA              <2> 	cmp dx, bx
  9433 0000733D 76F0                <2> 	jbe .lp
  9434 0000733F 665A                <2> 	pop dx
  9435 00007341 81EF02000000        <2> 	sub edi, 2
  9436 00007347 29DF                <2> 	sub edi, ebx
  9437 00007349 29DF                <2> 	sub edi, ebx
  9438 0000734B 01D7                <2> 	add edi, edx
  9439 0000734D 01D7                <2> 	add edi, edx
  9440 0000734F 033D[25590000]      <2> 	add edi, [resolutionx2]
  9441 00007355 6641                <2> 	inc cx
  9442 00007357 6639C1              <2> 	cmp cx, ax
  9443 0000735A 7203                <2> 	jb .lp2
  9444 0000735C 74CF                <2> 	je .lp0
  9445 0000735E C3                  <2> 	ret
  9446                              <2> .lp2:
  9447 0000735F 57                  <2> 	push edi
  9448 00007360 668937              <2> 	mov [edi], si
  9449 00007363 29D7                <2> 	sub edi, edx
  9450 00007365 29D7                <2> 	sub edi, edx
  9451 00007367 01DF                <2> 	add edi, ebx
  9452 00007369 01DF                <2> 	add edi, ebx
  9453 0000736B 668937              <2> 	mov [edi], si
  9454 0000736E 5F                  <2> 	pop edi
  9455 0000736F 033D[25590000]      <2> 	add edi, [resolutionx2]
  9456 00007375 6641                <2> 	inc cx
  9457 00007377 6639C1              <2> 	cmp cx, ax
  9458 0000737A 72E3                <2> 	jb .lp2
  9459 0000737C E9ACFFFFFF          <2> 	jmp .lp0
  9460                              <2> 
  9461                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  9462 00007381 6639D3              <2> 	cmp bx, dx
  9463 00007384 7303                <2> 	jae .noxchgx
  9464 00007386 6687DA              <2> 	xchg bx, dx
  9465                              <2> .noxchgx:
  9466 00007389 6639C8              <2> 	cmp ax, cx
  9467 0000738C 7302                <2> 	jae .noxchgy
  9468 0000738E 6691                <2> 	xchg ax, cx
  9469                              <2> .noxchgy:
  9470 00007390 6650                <2> 	push ax
  9471 00007392 6653                <2> 	push bx
  9472 00007394 6652                <2> 	push dx
  9473 00007396 E8D7150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9474 0000739B 31D2                <2> 	xor edx, edx
  9475 0000739D 665A                <2> 	pop dx
  9476 0000739F 31DB                <2> 	xor ebx, ebx
  9477 000073A1 665B                <2> 	pop bx
  9478 000073A3 6658                <2> 	pop ax
  9479                              <2> .lp2:
  9480 000073A5 6652                <2> 	push dx
  9481                              <2> .lp:
  9482 000073A7 668937              <2> 	mov [edi], si
  9483 000073AA 81C702000000        <2> 	add edi, 2
  9484 000073B0 6642                <2> 	inc dx
  9485 000073B2 6639DA              <2> 	cmp dx, bx
  9486 000073B5 76F0                <2> 	jbe .lp
  9487 000073B7 665A                <2> 	pop dx
  9488 000073B9 81EF02000000        <2> 	sub edi, 2
  9489 000073BF 29DF                <2> 	sub edi, ebx
  9490 000073C1 29DF                <2> 	sub edi, ebx
  9491 000073C3 01D7                <2> 	add edi, edx
  9492 000073C5 01D7                <2> 	add edi, edx
  9493 000073C7 033D[25590000]      <2> 	add edi, [resolutionx2]
  9494 000073CD 6641                <2> 	inc cx
  9495 000073CF 6639C1              <2> 	cmp cx, ax
  9496 000073D2 76D1                <2> 	jbe .lp2
  9497 000073D4 C3                  <2> 	ret
  9498                              <1> %include "source/gui/startup.asm"
  9499                              <2> guisetup:
  9500                              <2> 	%ifdef gui.background
  9501 000073D5 31DB                <2> 	xor ebx, ebx
  9502 000073D7 891D[F8710000]      <2> 	mov [backgroundimage], ebx
  9503                              <2> 	%endif
  9504 000073DD E8B5FDFFFF          <2> 	call guiclear
  9505 000073E2 C605[018A0000]01    <2> 	mov byte [guion], 1
  9506 000073E9 C605[17810000]00    <2> 	mov byte [mouseselecton], 0
  9507 000073F0 31C0                <2> 	xor eax, eax
  9508 000073F2 31DB                <2> 	xor ebx, ebx
  9509 000073F4 31C9                <2> 	xor ecx, ecx
  9510 000073F6 31D2                <2> 	xor edx, edx
  9511                              <2> 	
  9512 000073F8 BE[BA750000]        <2> 	mov esi, pacmsg
  9513 000073FD 30E4                <2> 	xor ah, ah
  9514 000073FF B010                <2> 	mov al, 00010000b
  9515 00007401 31DB                <2> 	xor ebx, ebx
  9516 00007403 66B99000            <2> 	mov cx, 144
  9517 00007407 66BA0400            <2> 	mov dx, 4
  9518 0000740B E872040000          <2> 	call showstring
  9519                              <2> 	
  9520 00007410 BE[F8750000]        <2> 	mov esi, interneticon
  9521 00007415 30E4                <2> 	xor ah, ah
  9522 00007417 B010                <2> 	mov al, 00010000b
  9523 00007419 BB[E3740000]        <2> 	mov ebx, noie
  9524 0000741E 66B91800            <2> 	mov cx, 24
  9525 00007422 66BA0400            <2> 	mov dx, 4
  9526 00007426 E86BFBFFFF          <2> 	call showicon
  9527                              <2> 	
  9528 0000742B BE[7A760000]        <2> 	mov esi, wordicon
  9529 00007430 30E4                <2> 	xor ah, ah
  9530 00007432 B010                <2> 	mov al, 00010000b
  9531 00007434 31DB                <2> 	xor ebx, ebx
  9532 00007436 66B91800            <2> 	mov cx, 24
  9533 0000743A 66BA3000            <2> 	mov dx, 48
  9534 0000743E E853FBFFFF          <2> 	call showicon
  9535                              <2> 	
  9536 00007443 BE[FC760000]        <2> 	mov esi, pacmanpellet
  9537 00007448 30E4                <2> 	xor ah, ah
  9538 0000744A B010                <2> 	mov al, 00010000b
  9539 0000744C 31DB                <2> 	xor ebx, ebx
  9540 0000744E 66B94000            <2> 	mov cx, 64
  9541 00007452 66BA0400            <2> 	mov dx, 4
  9542 00007456 E83BFBFFFF          <2> 	call showicon
  9543                              <2> 	
  9544 0000745B BE[00780000]        <2> 	mov esi, pacman
  9545 00007460 30E4                <2> 	xor ah, ah
  9546 00007462 B010                <2> 	mov al, 00010000b
  9547 00007464 BB[CC740000]        <2> 	mov ebx, pacmannomnom
  9548 00007469 66B94000            <2> 	mov cx, 64
  9549 0000746D 66BA3000            <2> 	mov dx, 48
  9550 00007471 E820FBFFFF          <2> 	call showicon
  9551                              <2> 	
  9552 00007476 BE[7E770000]        <2> 	mov esi, ghostie
  9553 0000747B 30E4                <2> 	xor ah, ah
  9554 0000747D B010                <2> 	mov al, 00010000b
  9555 0000747F BB[B5740000]        <2> 	mov ebx, boo
  9556 00007484 66B96C00            <2> 	mov cx, 108
  9557 00007488 66BA0400            <2> 	mov dx, 4
  9558 0000748C E805FBFFFF          <2> 	call showicon
  9559                              <2> 	
  9560 00007491 BE[9C750000]        <2> 	mov esi, start
  9561 00007496 668B0D[39580000]    <2> 	mov cx, [resolutiony]
  9562 0000749D 6681E91000          <2> 	sub cx, 16
  9563 000074A2 66BA0200            <2> 	mov dx, 2
  9564 000074A6 30E4                <2> 	xor ah, ah
  9565 000074A8 B010                <2> 	mov al, 00010000b
  9566 000074AA BB[58750000]        <2> 	mov ebx, winblows
  9567 000074AF E8CE030000          <2> 	call showstring
  9568                              <2> 
  9569                              <2> %ifdef gui.time	
  9570                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9571                              <2> %endif
  9572 000074B4 C3                  <2> 	ret
  9573                              <2> 
  9574                              <2> 	boo:
  9575 000074B5 BE[B5750000]        <2> 		mov esi, boomsg
  9576 000074BA 66BA6400            <2> 		mov dx, 100
  9577 000074BE 66B94001            <2> 		mov cx, 320
  9578 000074C2 31DB                <2> 		xor ebx, ebx
  9579 000074C4 6631C0              <2> 		xor ax, ax
  9580 000074C7 E9B6030000          <2> 		jmp showstring
  9581                              <2> 
  9582                              <2> 	pacmannomnom:
  9583 000074CC BE[D3750000]        <2> 		mov esi, pacnom
  9584 000074D1 66BA8200            <2> 		mov dx, 130
  9585 000074D5 66B93C00            <2> 		mov cx, 60
  9586 000074D9 31DB                <2> 		xor ebx, ebx
  9587 000074DB 6631C0              <2> 		xor ax, ax
  9588 000074DE E99F030000          <2> 		jmp showstring	
  9589                              <2> 	
  9590                              <2> 	noie:
  9591 000074E3 66C705[E2750000]80- <2> 		mov word [termwindow], 640
  9592 000074EB 02                  <2>
  9593 000074EC 66C705[E4750000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9594 000074F4 01                  <2>
  9595 000074F5 BE[E2750000]        <2> 		mov esi, termwindow
  9596 000074FA 66BA1000            <2> 		mov dx, 16
  9597 000074FE 66B91000            <2> 		mov cx, 16
  9598 00007502 31DB                <2> 		xor ebx, ebx
  9599 00007504 6631C0              <2> 		xor ax, ax
  9600 00007507 E817060000          <2> 		call showwindow
  9601 0000750C E99BB6FFFF          <2> 		jmp os
  9602                              <2> 
  9603                              <2> 	gotomenuboot:
  9604 00007511 31D2                <2> 		xor edx, edx
  9605 00007513 31C9                <2> 		xor ecx, ecx
  9606 00007515 668B15[37580000]    <2> 		mov dx, [resolutionx]
  9607 0000751C 668B0D[39580000]    <2> 		mov cx, [resolutiony]
  9608 00007523 66C1E904            <2> 		shr cx, 4
  9609 00007527 6681E90100          <2> 		sub cx, 1
  9610 0000752C 66C1E104            <2> 		shl cx, 4
  9611 00007530 668915[E2750000]    <2> 		mov [termwindow], dx
  9612 00007537 66890D[E4750000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9613 0000753E BE[E2750000]        <2> 		mov esi, termwindow
  9614 00007543 6631D2              <2> 		xor dx, dx
  9615 00007546 6631C9              <2> 		xor cx, cx
  9616 00007549 31DB                <2> 		xor ebx, ebx
  9617 0000754B 6631C0              <2> 		xor ax, ax
  9618 0000754E E8D0050000          <2> 		call showwindow
  9619 00007553 E954B6FFFF          <2> 		jmp os
  9620                              <2> 
  9621                              <2> 	winblows:
  9622 00007558 BE[AB750000]        <2> 		mov esi, turnoffmsg
  9623 0000755D BB[86530000]        <2> 		mov ebx, turnoff
  9624 00007562 668B0D[39580000]    <2> 		mov cx, [resolutiony]
  9625 00007569 6681E92000          <2> 		sub cx, 32
  9626 0000756E 6631D2              <2> 		xor dx, dx
  9627 00007571 30E4                <2> 		xor ah, ah
  9628 00007573 B010                <2> 		mov al, 00010000b
  9629 00007575 E808030000          <2> 		call showstring
  9630 0000757A BE[A2750000]        <2> 		mov esi, gotomenu
  9631 0000757F 668B0D[39580000]    <2> 		mov cx, [resolutiony]
  9632 00007586 6681E93000          <2> 		sub cx, 48
  9633 0000758B 6631D2              <2> 		xor dx, dx
  9634 0000758E 30E4                <2> 		xor ah, ah
  9635 00007590 B010                <2> 		mov al, 00010000b
  9636 00007592 BB[11750000]        <2> 		mov ebx, gotomenuboot
  9637 00007597 E9E6020000          <2> 		jmp showstring
  9638                              <2> 		
  9639                              <2> 
  9640 0000759C 737461727400        <2> 	start	db "start",0
  9641 000075A2 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9642 000075AB 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9643 000075B4 00                  <2>
  9644 000075B5 426F6F2100          <2> 	boomsg db "Boo!",0
  9645 000075BA 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9646 000075C3 73206561737920746F- <2>
  9647 000075CC 20647261772E00      <2>
  9648 000075D3 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9649 000075DC 6D206E6F6D00        <2>
  9650                              <2> 
  9651 000075E2 20035802            <2> 	termwindow:	dw 800,600	;window size
  9652 000075E6 FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9653 000075EA [9CE32B00]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9654 000075EE [E4B82C00]          <2>
  9655 000075F2 534855536800        <2> 	termmsg:	db "SHUSh",0	;window title
  9656                              <2> 	
  9657 000075F8 <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9658 0000767A <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9659 000076FC <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9660 0000777E <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9661 00007800 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9662                              <2> 
  9663                              <2> %ifdef gui.time
  9664                              <2> guitime:
  9665                              <2> 		call time	;get rtc in timeshow & dateshow
  9666                              <2> 		xor ebx, ebx
  9667                              <2> 		mov dx, [resolutionx2]
  9668                              <2> 		xor cx, cx
  9669                              <2> 		sub dx, 304
  9670                              <2> 		mov esi, dateshow
  9671                              <2> 		mov al, 00010001b
  9672                              <2> 		call showstring
  9673                              <2> 		mov esi, timeshow
  9674                              <2> 		xor ebx, ebx
  9675                              <2> 		mov al, 00010001b
  9676                              <2> 		call showstring
  9677                              <2> 		ret
  9678                              <2> %endif
  9679                              <1> %include "source/gui/text.asm"
  9680                              <2> 	showstring:
  9681 00007882 A2[17810000]        <2> 		mov [mouseselecton], al
  9682 00007887 8025[17810000]01    <2> 		and byte [mouseselecton], 1
  9683 0000788E B402                <2> 		mov ah, 2
  9684 00007890 E8060E0000          <2> 		call graphicsadd
  9685                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9686 00007895 30E4                <2> 		xor ah, ah
  9687 00007897 8A06                <2> 		mov al, [esi]
  9688 00007899 3CFF                <2> 		cmp al, 0xFF
  9689 0000789B 7506                <2> 		jne .notnull
  9690 0000789D 46                  <2> 		inc esi
  9691 0000789E E9F2FFFFFF          <2> 		jmp showstring2
  9692                              <2> .notnull:
  9693 000078A3 3CC0                <2> 		cmp al, 0xC0
  9694 000078A5 7234                <2> 		jb .doneutf
  9695 000078A7 3CE0                <2> 		cmp al, 0xE0
  9696 000078A9 721D                <2> 		jb .two
  9697 000078AB 46                  <2> 		inc esi
  9698 000078AC 668B1E              <2> 		mov bx, [esi]
  9699 000078AF 46                  <2> 		inc esi
  9700 000078B0 C0E004              <2> 		shl al, 4
  9701 000078B3 66C1E302            <2> 		shl bx, 2
  9702 000078B7 C0EF02              <2> 		shr bh, 2
  9703 000078BA 66C1EB02            <2> 		shr bx, 2
  9704 000078BE 08C7                <2> 		or bh, al
  9705 000078C0 6689D8              <2> 		mov ax, bx
  9706 000078C3 E913000000          <2> 		jmp .doneutf
  9707                              <2> 	.two:
  9708 000078C8 8A3E                <2> 		mov bh, [esi]
  9709 000078CA 46                  <2> 		inc esi
  9710 000078CB 8A1E                <2> 		mov bl, [esi]
  9711 000078CD 66C1E302            <2> 		shl bx, 2
  9712 000078D1 C0EF02              <2> 		shr bh, 2
  9713 000078D4 66C1EB02            <2> 		shr bx, 2
  9714 000078D8 6689D8              <2> 		mov ax, bx
  9715                              <2> 	.doneutf:
  9716 000078DB 663D0000            <2> 		cmp ax, 0
  9717 000078DF 741F                <2> 		je doneshowstring
  9718 000078E1 46                  <2> 		inc esi
  9719 000078E2 56                  <2> 		push esi
  9720 000078E3 668B1D[08790000]    <2> 		mov bx, [colorfont2]
  9721 000078EA E82A000000          <2> 		call showfontvesa
  9722 000078EF 663D0A00            <2> 		cmp ax, 10
  9723 000078F3 7405                <2> 		je noproceedshst
  9724 000078F5 6681C20800          <2> 		add dx, 8
  9725                              <2> 	noproceedshst:
  9726 000078FA 5E                  <2> 		pop esi
  9727 000078FB E995FFFFFF          <2> 		jmp showstring2
  9728                              <2> 	doneshowstring:
  9729 00007900 C605[17810000]00    <2> 		mov byte [mouseselecton], 0
  9730 00007907 C3                  <2> 		ret
  9731                              <2> 
  9732 00007908 FFFF                <2> colorfont2 dw 0xFFFF
  9733 0000790A 00                  <2> colorcache db 0
  9734                              <2> 
  9735 0000790B 02                  <2> resolutionbytes db 2
  9736 0000790C 0000                <2> posxvesa dw 0
  9737 0000790E 0000                <2> posyvesa dw 0
  9738 00007910 FFFF                <2> colorfont dw 0xFFFF
  9739                              <2> savefontvesa:		;same rules as showfontvesa
  9740 00007912 C605[16810000]01    <2> 	mov byte [savefonton], 1
  9741                              <2> showfontvesa:		;position in (dx,cx), color in bx, char in ax
  9742 00007919 663DFF00            <2> 	cmp ax, 255
  9743 0000791D 7501                <2> 	jne nostopshowfont
  9744 0000791F C3                  <2> 	ret
  9745                              <2> nostopshowfont:
  9746 00007920 55                  <2> 	push ebp
  9747 00007921 66890D[0E790000]    <2> 	mov [posyvesa], cx
  9748 00007928 663D0A00            <2> 	cmp ax, 10
  9749 0000792C 0F8424000000        <2> 	je near goodvesafontx
  9750 00007932 31C9                <2> 	xor ecx, ecx
  9751 00007934 668B0D[25590000]    <2> 	mov cx, [resolutionx2]
  9752 0000793B 6639CA              <2> 	cmp dx, cx
  9753 0000793E 7616                <2> 	jbe goodvesafontx
  9754 00007940 6631D2              <2> 	xor dx, dx
  9755 00007943 668B0D[0E790000]    <2> 	mov cx, [posyvesa]
  9756 0000794A 6681C11000          <2> 	add cx, 16
  9757 0000794F 66890D[0E790000]    <2> 	mov [posyvesa], cx
  9758                              <2> goodvesafontx:
  9759 00007956 668B0D[0E790000]    <2> 	mov cx, [posyvesa]
  9760 0000795D 668915[0C790000]    <2> 	mov [posxvesa], dx
  9761 00007964 8B3D[4D580000]      <2> 	mov edi, [physbaseptr]
  9762 0000796A 66891D[10790000]    <2> 	mov [colorfont], bx
  9763 00007971 668B2D[10790000]    <2> 	mov bp, [colorfont]
  9764 00007978 31DB                <2> 	xor ebx, ebx
  9765 0000797A 6689C3              <2> 	mov bx, ax
  9766 0000797D 31C0                <2> 	xor eax, eax
  9767 0000797F 6689D8              <2> 	mov ax, bx
  9768 00007982 6689D3              <2> 	mov bx, dx
  9769 00007985 89DA                <2> 	mov edx, ebx
  9770 00007987 31DB                <2> 	xor ebx, ebx
  9771 00007989 6681F90000          <2> 	cmp cx, 0
  9772 0000798E 7414                <2> 	je vesaposloopdn
  9773 00007990 668B1D[25590000]    <2> 	mov bx, [resolutionx2]
  9774                              <2> vesaposloop:
  9775 00007997 52                  <2> 	push edx
  9776 00007998 50                  <2> 	push eax
  9777 00007999 31C0                <2> 	xor eax, eax
  9778 0000799B 6689C8              <2> 	mov ax, cx
  9779 0000799E F7E3                <2> 	mul ebx
  9780 000079A0 01C7                <2> 	add edi, eax
  9781 000079A2 58                  <2> 	pop eax
  9782 000079A3 5A                  <2> 	pop edx
  9783                              <2> vesaposloopdn:
  9784 000079A4 01D7                <2> 	add edi, edx
  9785 000079A6 BE[5B8C0000]        <2> 	mov esi, fonts
  9786                              <2> findfontvesa:
  9787 000079AB 663D0A00            <2> 	cmp ax, 10
  9788 000079AF 0F84EB000000        <2> 	je near nwlinevesa
  9789 000079B5 C1E004              <2> 	shl eax, 4
  9790 000079B8 01C6                <2> 	add esi, eax
  9791 000079BA C1E804              <2> 	shr eax, 4
  9792 000079BD 81FE[5B8C0300]      <2> 	cmp esi, fontend
  9793 000079C3 0F83AB000000        <2> 	jae near donefontvesa
  9794 000079C9 4E                  <2> 	dec esi
  9795                              <2> foundfontvesa:
  9796 000079CA 46                  <2> 	inc esi
  9797 000079CB 803D[16810000]01    <2> 	cmp byte [savefonton], 1
  9798 000079D2 0F84EA000000        <2> 	je near vesafontsaver
  9799 000079D8 30C9                <2> 	xor cl, cl
  9800 000079DA 8A06                <2> 	mov al, [esi]
  9801 000079DC 668B15[25590000]    <2> 	mov dx, [resolutionx2]
  9802 000079E3 662B15[0C790000]    <2> 	sub dx, [posxvesa]
  9803 000079EA 6681FA1000          <2> 	cmp dx, 16
  9804 000079EF 7708                <2> 	ja paintfontvesa
  9805 000079F1 D0EA                <2> 	shr dl, 1
  9806 000079F3 8815[9F7A0000]      <2> 	mov [charwidth], dl
  9807                              <2> paintfontvesa:
  9808 000079F9 B201                <2> 	mov dl, 1
  9809 000079FB 20C2                <2> 	and dl, al
  9810 000079FD 803D[15810000]01    <2> 	cmp byte [showcursorfonton], 1
  9811 00007A04 0F842E000000        <2> 	je near nodelpaintedfont
  9812 00007A0A 803D[15810000]02    <2> 	cmp byte [showcursorfonton], 2
  9813 00007A11 0F8511000000        <2> 	jne near noswitchcursorfonton
  9814 00007A17 80FA00              <2> 	cmp dl, 0
  9815 00007A1A 0F8420000000        <2> 	je near nopixelset
  9816 00007A20 66892F              <2> 	mov [edi], bp
  9817 00007A23 E918000000          <2> 	jmp nopixelset
  9818                              <2> noswitchcursorfonton:
  9819 00007A28 3215[17810000]      <2> 	xor dl, [mouseselecton]
  9820 00007A2E 668B1D[26720000]    <2> 	mov bx, [background]
  9821 00007A35 66891F              <2> 	mov [edi], bx
  9822                              <2> nodelpaintedfont:
  9823 00007A38 80FA00              <2> 	cmp dl, 0
  9824 00007A3B 7403                <2> 	je nopixelset
  9825 00007A3D 66892F              <2> 	mov [edi], bp
  9826                              <2> nopixelset:
  9827 00007A40 81C702000000        <2> 	add edi, 2
  9828 00007A46 D0C0                <2> 	rol al, 1
  9829 00007A48 FEC1                <2> 	inc cl
  9830 00007A4A 3A0D[9F7A0000]      <2> 	cmp cl, [charwidth]
  9831 00007A50 72A7                <2> 	jb paintfontvesa
  9832 00007A52 FEC5                <2> 	inc ch
  9833 00007A54 31D2                <2> 	xor edx, edx
  9834 00007A56 668B15[25590000]    <2> 	mov dx, [resolutionx2]
  9835 00007A5D 01D7                <2> 	add edi, edx
  9836 00007A5F 31D2                <2> 	xor edx, edx
  9837 00007A61 8A15[9F7A0000]      <2> 	mov dl, [charwidth]
  9838 00007A67 00D2                <2> 	add dl, dl
  9839 00007A69 29D7                <2> 	sub edi, edx
  9840 00007A6B 80FD10              <2> 	cmp ch, 16
  9841 00007A6E 0F8256FFFFFF        <2> 	jb foundfontvesa
  9842                              <2> donefontvesa:
  9843 00007A74 C605[9F7A0000]08    <2> 	mov byte [charwidth], 8
  9844 00007A7B 668B15[0C790000]    <2> 	mov dx, [posxvesa]
  9845 00007A82 8A1D[9F7A0000]      <2> 	mov bl, [charwidth]
  9846 00007A88 30FF                <2> 	xor bh, bh
  9847 00007A8A 6601DA              <2> 	add dx, bx
  9848 00007A8D 6689EB              <2> 	mov bx, bp
  9849 00007A90 668B0D[0E790000]    <2> 	mov cx, [posyvesa]
  9850 00007A97 883D[16810000]      <2> 	mov [savefonton], bh
  9851 00007A9D 5D                  <2> 	pop ebp
  9852 00007A9E C3                  <2> 	ret
  9853 00007A9F 08                  <2> charwidth db 8
  9854                              <2> nwlinevesa:
  9855 00007AA0 6631D2              <2> 	xor dx, dx
  9856 00007AA3 668915[0C790000]    <2> 	mov [posxvesa], dx
  9857 00007AAA 668B0D[0E790000]    <2> 	mov cx, [posyvesa]
  9858 00007AB1 6681C11000          <2> 	add cx, 16
  9859 00007AB6 66890D[0E790000]    <2> 	mov [posyvesa], cx
  9860 00007ABD E9B2FFFFFF          <2> 	jmp donefontvesa
  9861                              <2> vesafontsaver:
  9862 00007AC2 30C0                <2> 	xor al, al
  9863 00007AC4 30C9                <2> 	xor cl, cl
  9864                              <2> vesafontsaver2:
  9865 00007AC6 66392F              <2> 	cmp [edi], bp
  9866 00007AC9 742F                <2> 	je colorfontmatch
  9867                              <2> donecolormatch:
  9868 00007ACB 81C702000000        <2> 	add edi, 2
  9869 00007AD1 D0C0                <2> 	rol al, 1
  9870 00007AD3 FEC1                <2> 	inc cl
  9871 00007AD5 80F908              <2> 	cmp cl, 8
  9872 00007AD8 72EC                <2> 	jb vesafontsaver2
  9873 00007ADA 8806                <2> 	mov [esi], al
  9874 00007ADC 46                  <2> 	inc esi
  9875 00007ADD FEC5                <2> 	inc ch
  9876 00007ADF 31D2                <2> 	xor edx, edx
  9877 00007AE1 668B15[25590000]    <2> 	mov dx, [resolutionx2]
  9878 00007AE8 01D7                <2> 	add edi, edx
  9879 00007AEA 81EF10000000        <2> 	sub edi, 16
  9880 00007AF0 80FD10              <2> 	cmp ch, 16
  9881 00007AF3 72CD                <2> 	jb vesafontsaver
  9882 00007AF5 E97AFFFFFF          <2> 	jmp donefontvesa
  9883                              <2> colorfontmatch:
  9884 00007AFA 0401                <2> 	add al, 1
  9885 00007AFC E9CAFFFFFF          <2> 	jmp donecolormatch
  9886                              <1> %include "source/gui/window.asm"
  9887 00007B01 0000                <2> winvcopystx dw 0
  9888 00007B03 0000                <2> winvcopysty dw 0
  9889 00007B05 0000                <2> winvcopydx dw 0
  9890 00007B07 0000                <2> winvcopycx dw 0
  9891 00007B09 FFFF0000            <2> windowcolor dw 0xFFFF,0
  9892 00007B0D 00000000            <2> windowbufloc: dd 0
  9893 00007B11 00000000            <2> windowvideobuf dd 0
  9894 00007B15 00000000            <2> windowvideobuf2 dd 0
  9895 00007B19 00000000            <2> windowinfobuf dd 0
  9896 00007B1D 0000                <2> termcol dw 0
  9897 00007B1F 00000000            <2> wincopyendpos dd 0
  9898                              <2> 
  9899                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9900 00007B23 C605[12240000]01    <2> 		mov byte [termguion], 1
  9901 00007B2A 6681C11000          <2> 		add cx, 16
  9902 00007B2F 668915[017B0000]    <2> 		mov [winvcopystx], dx
  9903 00007B36 66890D[037B0000]    <2> 		mov [winvcopysty], cx
  9904 00007B3D 8935[197B0000]      <2> 		mov [windowinfobuf], esi
  9905 00007B43 668B16              <2> 		mov dx, [esi]
  9906 00007B46 668B4E02            <2> 		mov cx, [esi + 2]
  9907 00007B4A 31C0                <2> 		xor eax, eax
  9908 00007B4C 31DB                <2> 		xor ebx, ebx
  9909 00007B4E 6689D0              <2> 		mov ax, dx
  9910 00007B51 6689CB              <2> 		mov bx, cx
  9911 00007B54 66C1E803            <2> 		shr ax, 3
  9912 00007B58 66C1EB04            <2> 		shr bx, 4
  9913 00007B5C 66A3[1D7B0000]      <2> 		mov [termcol], ax
  9914 00007B62 A2[09260000]        <2> 		mov [charxy], al
  9915 00007B67 881D[0A260000]      <2> 		mov [charxy + 1], bl
  9916 00007B6D 8B7E04              <2> 		mov edi, [esi + 4]
  9917 00007B70 893D[097B0000]      <2> 		mov [windowcolor], edi
  9918 00007B76 8B7E0C              <2> 		mov edi, [esi + 12]
  9919 00007B79 893D[157B0000]      <2> 		mov [windowvideobuf2], edi
  9920 00007B7F 8B7E08              <2> 		mov edi, [esi + 8]
  9921 00007B82 893D[117B0000]      <2> 		mov [windowvideobuf], edi
  9922 00007B88 81FB00000000        <2> 		cmp ebx, 0
  9923 00007B8E 0F8460050000        <2> 		je near donewincopynow
  9924                              <2> 	findendposwin:
  9925 00007B94 C1E002              <2> 		shl eax, 2
  9926 00007B97 31D2                <2> 		xor edx, edx
  9927 00007B99 F7E3                <2> 		mul ebx
  9928 00007B9B 01C7                <2> 		add edi, eax
  9929 00007B9D 893D[1F7B0000]      <2> 		mov [wincopyendpos], edi
  9930 00007BA3 31FF                <2> 		xor edi, edi
  9931 00007BA5 6631C0              <2> 		xor ax, ax
  9932 00007BA8 6631DB              <2> 		xor bx, bx
  9933 00007BAB 6601D2              <2> 		add dx, dx
  9934 00007BAE 668915[057B0000]    <2> 		mov [winvcopydx], dx
  9935 00007BB5 66890D[077B0000]    <2> 		mov [winvcopycx], cx
  9936 00007BBC 668B0D[037B0000]    <2> 		mov cx, [winvcopysty]
  9937 00007BC3 6681E91000          <2> 		sub cx, 16
  9938 00007BC8 668B15[017B0000]    <2> 		mov dx, [winvcopystx]
  9939 00007BCF C605[13240000]00    <2> 		mov byte [termcopyon], 0
  9940 00007BD6 B403                <2> 		mov ah, 3
  9941 00007BD8 E8BE0A0000          <2> 		call graphicsadd
  9942                              <2> 	showwindow2:
  9943 00007BDD 6681C11000          <2> 		add cx, 16
  9944 00007BE2 668915[017B0000]    <2> 		mov [winvcopystx], dx
  9945 00007BE9 66890D[037B0000]    <2> 		mov [winvcopysty], cx
  9946 00007BF0 668B16              <2> 		mov dx, [esi]
  9947 00007BF3 668B4E02            <2> 		mov cx, [esi + 2]
  9948 00007BF7 6601D2              <2> 		add dx, dx
  9949 00007BFA 668915[057B0000]    <2> 		mov [winvcopydx], dx
  9950 00007C01 66890D[077B0000]    <2> 		mov [winvcopycx], cx
  9951 00007C08 E818000000          <2> 		call reloadwindowtitle
  9952 00007C0D 803D[82860000]01    <2> 		cmp byte [windrag], 1
  9953 00007C14 0F83E9040000        <2> 		jae near forgetresetstuff
  9954 00007C1A 8B3D[0D7B0000]      <2> 		mov edi, [windowbufloc]
  9955 00007C20 E96E020000          <2> 		jmp windowvideocopyset
  9956                              <2> 		
  9957                              <2> 	reloadwindowtitle:
  9958 00007C25 8B3D[0D7B0000]      <2> 		mov edi, [windowbufloc]
  9959 00007C2B 31D2                <2> 		xor edx, edx
  9960 00007C2D 668B15[25590000]    <2> 		mov dx, [resolutionx2]
  9961 00007C34 C1E204              <2> 		shl edx, 4
  9962 00007C37 29D7                <2> 		sub edi, edx
  9963 00007C39 803D[13240000]00    <2> 		cmp byte [termcopyon], 0
  9964 00007C40 7532                <2> 		jne nocleartitlebarpos
  9965 00007C42 8B3D[4D580000]      <2> 		mov edi, [physbaseptr]
  9966 00007C48 31D2                <2> 		xor edx, edx
  9967 00007C4A 668B15[017B0000]    <2> 		mov dx, [winvcopystx]
  9968 00007C51 01D7                <2> 		add edi, edx
  9969 00007C53 31C9                <2> 		xor ecx, ecx
  9970 00007C55 668B0D[037B0000]    <2> 		mov cx, [winvcopysty]
  9971 00007C5C 6681E91000          <2> 		sub cx, 16
  9972 00007C61 6681F90000          <2> 		cmp cx, 0
  9973 00007C66 740C                <2> 		je nocleartitlebarpos
  9974                              <2> 	cleartitlebarpos:
  9975 00007C68 31C0                <2> 		xor eax, eax
  9976 00007C6A 66A1[25590000]      <2> 		mov ax, [resolutionx2]
  9977 00007C70 F7E1                <2> 		mul ecx
  9978 00007C72 01C7                <2> 		add edi, eax
  9979                              <2> 	nocleartitlebarpos:
  9980 00007C74 66B91000            <2> 		mov cx, 16
  9981 00007C78 668B15[057B0000]    <2> 		mov dx, [winvcopydx]
  9982 00007C7F 6681F90000          <2> 		cmp cx, 0
  9983 00007C84 0F8448000000        <2> 		je near canceltitlebarput
  9984 00007C8A 6681FA0000          <2> 		cmp dx, 0
  9985 00007C8F 0F843D000000        <2> 		je near canceltitlebarput
  9986                              <2> 	titlebarput:
  9987 00007C95 66A1[097B0000]      <2> 		mov ax, [windowcolor]
  9988 00007C9B 668907              <2> 		mov [edi], ax
  9989 00007C9E 6681EA0200          <2> 		sub dx, 2
  9990 00007CA3 81C702000000        <2> 		add edi, 2
  9991 00007CA9 6681FA0000          <2> 		cmp dx, 0
  9992 00007CAE 75E5                <2> 		jne titlebarput
  9993 00007CB0 31D2                <2> 		xor edx, edx
  9994 00007CB2 668B15[25590000]    <2> 		mov dx, [resolutionx2]
  9995 00007CB9 6649                <2> 		dec cx
  9996 00007CBB 662B15[057B0000]    <2> 		sub dx, [winvcopydx]
  9997 00007CC2 01D7                <2> 		add edi, edx
  9998 00007CC4 668B15[057B0000]    <2> 		mov dx, [winvcopydx]
  9999 00007CCB 6681F90000          <2> 		cmp cx, 0
 10000 00007CD0 75C3                <2> 		jne titlebarput
 10001                              <2> 	canceltitlebarput:
 10002 00007CD2 893D[0D7B0000]      <2> 		mov [windowbufloc], edi
 10003 00007CD8 803D[13240000]02    <2> 		cmp byte [termcopyon], 2
 10004 00007CDF 0F841C010000        <2> 		je near winvcpst
 10005 00007CE5 668B1D[26720000]    <2> 		mov bx, [background]
 10006 00007CEC 6653                <2> 		push bx
 10007 00007CEE 6631DB              <2> 		xor bx, bx
 10008 00007CF1 66891D[26720000]    <2> 		mov [background], bx
 10009 00007CF8 6631C0              <2> 		xor ax, ax
 10010 00007CFB 81C610000000        <2> 		add esi, 16
 10011 00007D01 668B15[017B0000]    <2> 		mov dx, [winvcopystx]
 10012 00007D08 668B0D[037B0000]    <2> 		mov cx, [winvcopysty]
 10013 00007D0F 6681E91000          <2> 		sub cx, 16
 10014 00007D14 668B1D[097B0000]    <2> 		mov bx, [windowcolor]
 10015 00007D1B C605[17810000]01    <2> 		mov byte [mouseselecton], 1
 10016 00007D22 E86EFBFFFF          <2> 		call showstring2	;Show window title
 10017 00007D27 8B35[512D0000]      <2> 		mov esi, [usercache]
 10018 00007D2D 6681C21000          <2> 		add dx, 16
 10019 00007D32 C605[17810000]01    <2> 		mov byte [mouseselecton], 1
 10020 00007D39 E857FBFFFF          <2> 		call showstring2	;Show user name
 10021 00007D3E BE[CC890000]        <2> 		mov esi, computer
 10022 00007D43 C605[17810000]01    <2> 		mov byte [mouseselecton], 1
 10023 00007D4A E846FBFFFF          <2> 		call showstring2	;Show computer name
 10024 00007D4F 66B85800            <2> 		mov ax, "X"
 10025 00007D53 66BB00F8            <2> 		mov bx, 1111100000000000b
 10026 00007D57 668B15[017B0000]    <2> 		mov dx, [winvcopystx]
 10027 00007D5E 668B0D[037B0000]    <2> 		mov cx, [winvcopysty]
 10028 00007D65 6681E91000          <2> 		sub cx, 16
 10029 00007D6A 6681EA1000          <2> 		sub dx, 16
 10030 00007D6F 660315[057B0000]    <2> 		add dx, [winvcopydx]
 10031 00007D76 C605[17810000]01    <2> 		mov byte [mouseselecton], 1
 10032 00007D7D 663B15[25590000]    <2> 		cmp dx, [resolutionx2]
 10033 00007D84 7305                <2> 		jae .nox
 10034 00007D86 E88EFBFFFF          <2> 		call showfontvesa
 10035                              <2> .nox:
 10036 00007D8B 668B1D[26720000]    <2> 		mov bx, [background]
 10037 00007D92 6681EA1800          <2> 		sub dx, 24
 10038 00007D97 66B82B00            <2> 		mov ax, "+"
 10039 00007D9B 66BBE007            <2> 		mov bx, 0000011111100000b
 10040 00007D9F C605[17810000]01    <2> 		mov byte [mouseselecton], 1
 10041 00007DA6 663B15[25590000]    <2> 		cmp dx, [resolutionx2]
 10042 00007DAD 7305                <2> 		jae .noplus
 10043 00007DAF E865FBFFFF          <2> 		call showfontvesa
 10044                              <2> .noplus:
 10045 00007DB4 6681EA1800          <2> 		sub dx, 24
 10046 00007DB9 66B82D00            <2> 		mov ax, "-"
 10047 00007DBD 66BBE0FF            <2> 		mov bx, 1111111111100000b
 10048 00007DC1 C605[17810000]01    <2> 		mov byte [mouseselecton], 1
 10049 00007DC8 663B15[25590000]    <2> 		cmp dx, [resolutionx2]
 10050 00007DCF 7305                <2> 		jae .nominus
 10051 00007DD1 E843FBFFFF          <2> 		call showfontvesa
 10052                              <2> .nominus:
 10053 00007DD6 6681EA1800          <2> 		sub dx, 24
 10054 00007DDB 66B83F00            <2> 		mov ax, "?"
 10055 00007DDF 66BB1F00            <2> 		mov bx, 0000000000011111b
 10056 00007DE3 C605[17810000]01    <2> 		mov byte [mouseselecton], 1
 10057 00007DEA 663B15[25590000]    <2> 		cmp dx, [resolutionx2]
 10058 00007DF1 7305                <2> 		jae .noquestion
 10059 00007DF3 E821FBFFFF          <2> 		call showfontvesa
 10060                              <2> .noquestion:
 10061 00007DF8 665B                <2> 		pop bx
 10062 00007DFA 66891D[26720000]    <2> 		mov [background], bx
 10063                              <2> 	winvcpst:
 10064 00007E01 C3                  <2> 		ret
 10065                              <2> 
 10066                              <2> 	windowvideocopy:
 10067 00007E02 8B35[197B0000]      <2> 		mov esi, [windowinfobuf]
 10068 00007E08 668B16              <2> 		mov dx, [esi]
 10069 00007E0B 668B4E02            <2> 		mov cx, [esi + 2]
 10070 00007E0F 8B7E04              <2> 		mov edi, [esi + 4]
 10071 00007E12 893D[097B0000]      <2> 		mov [windowcolor], edi
 10072 00007E18 8B7E08              <2> 		mov edi, [esi + 8]
 10073 00007E1B 8B5E0C              <2> 		mov ebx, [esi + 12]
 10074 00007E1E 893D[117B0000]      <2> 		mov [windowvideobuf], edi
 10075 00007E24 891D[157B0000]      <2> 		mov [windowvideobuf2], ebx
 10076 00007E2A 31C0                <2> 		xor eax, eax
 10077 00007E2C 31DB                <2> 		xor ebx, ebx
 10078 00007E2E 6689D0              <2> 		mov ax, dx
 10079 00007E31 6689CB              <2> 		mov bx, cx
 10080 00007E34 66C1E803            <2> 		shr ax, 3
 10081 00007E38 66C1EB04            <2> 		shr bx, 4
 10082 00007E3C 66A3[1D7B0000]      <2> 		mov [termcol], ax
 10083 00007E42 A2[09260000]        <2> 		mov [charxy], al
 10084 00007E47 881D[0A260000]      <2> 		mov [charxy + 1], bl
 10085 00007E4D 8B3D[0D7B0000]      <2> 		mov edi, [windowbufloc]
 10086 00007E53 3B3D[4D580000]      <2> 		cmp edi, [physbaseptr]
 10087 00007E59 0F8334000000        <2> 		jae near windowvideocopyset
 10088 00007E5F 31C9                <2> 		xor ecx, ecx
 10089 00007E61 31D2                <2> 		xor edx, edx
 10090 00007E63 668B15[017B0000]    <2> 		mov dx, [winvcopystx]
 10091 00007E6A 668B0D[037B0000]    <2> 		mov cx, [winvcopysty]
 10092 00007E71 8B3D[4D580000]      <2> 		mov edi, [physbaseptr]
 10093 00007E77 01D7                <2> 		add edi, edx
 10094 00007E79 81F900000000        <2> 		cmp ecx, 0
 10095 00007E7F 7412                <2> 		je windowvideocopyset
 10096                              <2> 	yrescopylp:
 10097 00007E81 31C0                <2> 		xor eax, eax
 10098 00007E83 66A1[25590000]      <2> 		mov ax, [resolutionx2]
 10099 00007E89 F7E1                <2> 		mul ecx
 10100 00007E8B 01C7                <2> 		add edi, eax
 10101 00007E8D 893D[0D7B0000]      <2> 		mov [windowbufloc], edi
 10102                              <2> 	windowvideocopyset:
 10103 00007E93 6631C9              <2> 		xor cx, cx
 10104 00007E96 6649                <2> 		dec cx
 10105 00007E98 66890D[0B810000]    <2> 		mov [charposline], cx
 10106 00007E9F 89FE                <2> 		mov esi, edi
 10107 00007EA1 81EE10000000        <2> 		sub esi, 16
 10108 00007EA7 31D2                <2> 		xor edx, edx
 10109 00007EA9 668B15[25590000]    <2> 		mov dx, [resolutionx2]
 10110 00007EB0 C1E204              <2> 		shl edx, 4
 10111 00007EB3 01D6                <2> 		add esi, edx
 10112 00007EB5 8B3D[117B0000]      <2> 		mov edi, [windowvideobuf]
 10113 00007EBB 81EF04000000        <2> 		sub edi, 4
 10114 00007EC1 893D[0D810000]      <2> 		mov [charposvbuf], edi
 10115 00007EC7 E91B010000          <2> 		jmp nextcharwin
 10116                              <2> 	win.write:	;adjusted this to use alpha
 10117                              <2> 				;5R, 6G, 5B
 10118                              <2> %ifdef gui.alphablending
 10119 00007ECC 56                  <2> 		push esi
 10120 00007ECD 6653                <2> 		push bx
 10121 00007ECF 6651                <2> 		push cx
 10122 00007ED1 6652                <2> 		push dx
 10123                              <2> %ifdef gui.background
 10124 00007ED3 89FE                <2> 		mov esi, edi
 10125 00007ED5 2B35[4D580000]      <2> 		sub esi, [physbaseptr]
 10126 00007EDB 0335[F8710000]      <2> 		add esi, [backgroundimage]
 10127 00007EE1 813D[F8710000]0000- <2> 		cmp dword [backgroundimage], 0
 10128 00007EE9 0000                <2>
 10129 00007EEB 7505                <2> 		jne .red
 10130                              <2> %endif
 10131 00007EED BE[26720000]        <2> 		mov esi, background
 10132                              <2> 	.red:
 10133 00007EF2 668B0E              <2> 		mov cx, [esi]
 10134 00007EF5 66C1E90B            <2> 		shr cx, 11
 10135 00007EF9 6689C3              <2> 		mov bx, ax
 10136 00007EFC 66C1EB0B            <2> 		shr bx, 11
 10137 00007F00 6601D9              <2> 		add cx, bx
 10138 00007F03 6601D9              <2> 		add cx, bx
 10139 00007F06 6601D9              <2> 		add cx, bx
 10140 00007F09 66C1E902            <2> 		shr cx, 2
 10141 00007F0D 66C1E10B            <2> 		shl cx, 11
 10142 00007F11 6689CA              <2> 		mov dx, cx
 10143                              <2> 	.green:
 10144 00007F14 668B0E              <2> 		mov cx, [esi]
 10145 00007F17 66C1E105            <2> 		shl cx, 5
 10146 00007F1B 66C1E90A            <2> 		shr cx, 10
 10147 00007F1F 6689C3              <2> 		mov bx, ax
 10148 00007F22 66C1E305            <2> 		shl bx, 5
 10149 00007F26 66C1EB0A            <2> 		shr bx, 10
 10150 00007F2A 6601D9              <2> 		add cx, bx
 10151 00007F2D 6601D9              <2> 		add cx, bx
 10152 00007F30 6601D9              <2> 		add cx, bx
 10153 00007F33 66C1E902            <2> 		shr cx, 2
 10154 00007F37 66C1E105            <2> 		shl cx, 5
 10155 00007F3B 6601CA              <2> 		add dx, cx
 10156                              <2> 	.blue:
 10157 00007F3E 668B0E              <2> 		mov cx, [esi]
 10158 00007F41 66C1E10B            <2> 		shl cx, 11
 10159 00007F45 66C1E90B            <2> 		shr cx, 11
 10160 00007F49 6689C3              <2> 		mov bx, ax
 10161 00007F4C 66C1E30B            <2> 		shl bx, 11
 10162 00007F50 66C1EB0B            <2> 		shr bx, 11
 10163 00007F54 6601D9              <2> 		add cx, bx
 10164 00007F57 6601D9              <2> 		add cx, bx
 10165 00007F5A 6601D9              <2> 		add cx, bx
 10166 00007F5D 66C1E902            <2> 		shr cx, 2
 10167 00007F61 6601CA              <2> 		add dx, cx
 10168 00007F64 668917              <2> 		mov [edi], dx
 10169 00007F67 665A                <2> 		pop dx
 10170 00007F69 6659                <2> 		pop cx
 10171 00007F6B 665B                <2> 		pop bx
 10172 00007F6D 5E                  <2> 		pop esi
 10173                              <2> %else
 10174                              <2> 		mov [edi], ax
 10175                              <2> %endif
 10176 00007F6E C3                  <2> 		ret
 10177                              <2> 	copywindow:
 10178 00007F6F B201                <2> 		mov dl, 1
 10179 00007F71 D0C6                <2> 		rol dh, 1
 10180 00007F73 20F2                <2> 		and dl, dh
 10181 00007F75 66813D[0A790000]80- <2> 		cmp word [colorcache], 0x80
 10182 00007F7D 00                  <2>
 10183 00007F7E 7320                <2> 		jae switchwincolors
 10184 00007F80 66A1[0B7B0000]      <2> 		mov ax, [windowcolor + 2]
 10185 00007F86 E841FFFFFF          <2> 		call win.write
 10186 00007F8B 80FA00              <2> 		cmp dl, 0
 10187 00007F8E 742B                <2> 		je nowritewin
 10188 00007F90 66A1[097B0000]      <2> 		mov ax, [windowcolor]
 10189 00007F96 E831FFFFFF          <2> 		call win.write
 10190 00007F9B E91B000000          <2> 		jmp nowritewin
 10191                              <2> 	switchwincolors:
 10192 00007FA0 66A1[097B0000]      <2> 		mov ax, [windowcolor]
 10193 00007FA6 E821FFFFFF          <2> 		call win.write
 10194 00007FAB 80FA00              <2> 		cmp dl, 0
 10195 00007FAE 740B                <2> 		je nowritewin
 10196 00007FB0 66A1[0B7B0000]      <2> 		mov ax, [windowcolor + 2]
 10197 00007FB6 E811FFFFFF          <2> 		call win.write
 10198                              <2> 	nowritewin:
 10199 00007FBB 81C702000000        <2> 		add edi, 2
 10200 00007FC1 FEC1                <2> 		inc cl
 10201 00007FC3 80F908              <2> 		cmp cl, 8
 10202 00007FC6 75A7                <2> 		jne copywindow
 10203 00007FC8 43                  <2> 		inc ebx
 10204 00007FC9 30C9                <2> 		xor cl, cl
 10205 00007FCB 31D2                <2> 		xor edx, edx
 10206 00007FCD 668B15[25590000]    <2> 		mov dx, [resolutionx2]
 10207 00007FD4 01D6                <2> 		add esi, edx
 10208 00007FD6 89F7                <2> 		mov edi, esi
 10209 00007FD8 8AB3[5B8C0000]      <2> 		mov dh, [fonts + ebx]
 10210 00007FDE D0CE                <2> 		ror dh, 1
 10211 00007FE0 FEC5                <2> 		inc ch
 10212 00007FE2 80FD10              <2> 		cmp ch, 16
 10213 00007FE5 7588                <2> 		jne copywindow
 10214                              <2> 	nextcharwin:
 10215 00007FE7 6631C9              <2> 		xor cx, cx
 10216 00007FEA 8B3D[0D810000]      <2> 		mov edi, [charposvbuf]
 10217 00007FF0 81C704000000        <2> 		add edi, 4
 10218 00007FF6 3B3D[1F7B0000]      <2> 		cmp edi, [wincopyendpos]
 10219 00007FFC 0F83F2000000        <2> 		jae near donewincopynow
 10220 00008002 668B5F02            <2> 		mov bx, [edi + 2]
 10221 00008006 6681FB0000          <2> 		cmp bx, 0
 10222 0000800B 7508                <2> 		jne nofixcolorwin
 10223 0000800D 66BB0700            <2> 		mov bx, 7
 10224 00008011 66895F02            <2> 		mov [edi + 2], bx
 10225                              <2> 	nofixcolorwin:
 10226 00008015 66891D[0A790000]    <2> 		mov [colorcache], bx
 10227 0000801C 8B1F                <2> 		mov ebx, [edi]
 10228 0000801E 893D[0D810000]      <2> 		mov [charposvbuf], edi
 10229 00008024 813D[157B0000]0000- <2> 		cmp dword [windowvideobuf2], 0
 10230 0000802C 0000                <2>
 10231 0000802E 7455                <2> 		je noskipcharcopy
 10232 00008030 2B3D[117B0000]      <2> 		sub edi, [windowvideobuf]
 10233 00008036 033D[157B0000]      <2> 		add edi, [windowvideobuf2]
 10234 0000803C 8B07                <2> 		mov eax, [edi]
 10235 0000803E 39D8                <2> 		cmp eax, ebx
 10236 00008040 7543                <2> 		jne noskipcharcopy
 10237                              <2> 	skipcharcopy:
 10238 00008042 81C610000000        <2> 		add esi, 16
 10239 00008048 668B0D[0B810000]    <2> 		mov cx, [charposline]
 10240 0000804F 6641                <2> 		inc cx
 10241 00008051 66890D[0B810000]    <2> 		mov [charposline], cx
 10242 00008058 663B0D[1D7B0000]    <2> 		cmp cx, [termcol]
 10243 0000805F 7286                <2> 		jb nextcharwin
 10244 00008061 6631C9              <2> 		xor cx, cx
 10245 00008064 66890D[0B810000]    <2> 		mov [charposline], cx
 10246 0000806B 31D2                <2> 		xor edx, edx
 10247 0000806D 668B15[25590000]    <2> 		mov dx, [resolutionx2]
 10248 00008074 C1E204              <2> 		shl edx, 4
 10249 00008077 662B15[057B0000]    <2> 		sub dx, [winvcopydx]
 10250 0000807E 01D6                <2> 		add esi, edx
 10251 00008080 E962FFFFFF          <2> 		jmp nextcharwin
 10252                              <2> 	noskipcharcopy:
 10253 00008085 891F                <2> 		mov [edi], ebx
 10254 00008087 8B3D[0D810000]      <2> 		mov edi, [charposvbuf]
 10255 0000808D C1E310              <2> 		shl ebx, 16
 10256 00008090 C1EB0C              <2> 		shr ebx, 12
 10257 00008093 31D2                <2> 		xor edx, edx
 10258 00008095 668B15[25590000]    <2> 		mov dx, [resolutionx2]
 10259 0000809C C1E204              <2> 		shl edx, 4
 10260 0000809F 29D6                <2> 		sub esi, edx
 10261 000080A1 81C610000000        <2> 		add esi, 16
 10262 000080A7 89F7                <2> 		mov edi, esi
 10263 000080A9 668B0D[0B810000]    <2> 		mov cx, [charposline]
 10264 000080B0 6641                <2> 		inc cx
 10265 000080B2 663B0D[1D7B0000]    <2> 		cmp cx, [termcol]
 10266 000080B9 7317                <2> 		jae fixwindowcopy
 10267 000080BB 66890D[0B810000]    <2> 		mov [charposline], cx
 10268 000080C2 6631C9              <2> 		xor cx, cx
 10269 000080C5 8AB3[5B8C0000]      <2> 		mov dh, [fonts + ebx]
 10270 000080CB D0CE                <2> 		ror dh, 1
 10271 000080CD E99DFEFFFF          <2> 		jmp copywindow
 10272                              <2> fixwindowcopy:
 10273 000080D2 6631C9              <2> 		xor cx, cx
 10274 000080D5 66890D[0B810000]    <2> 		mov [charposline], cx
 10275 000080DC 662B15[057B0000]    <2> 		sub dx, [winvcopydx]
 10276 000080E3 01D6                <2> 		add esi, edx
 10277 000080E5 89F7                <2> 		mov edi, esi
 10278 000080E7 8AB3[5B8C0000]      <2> 		mov dh, [fonts + ebx]
 10279 000080ED D0CE                <2> 		ror dh, 1
 10280 000080EF E97BFEFFFF          <2> 		jmp copywindow
 10281                              <2> donewincopynow:
 10282 000080F4 803D[13240000]01    <2> 		cmp byte [termcopyon], 1
 10283 000080FB 7506                <2> 		jne forgetresetstuff
 10284 000080FD E82DA9FFFF          <2> 		call switchtermcursor
 10285 00008102 61                  <2> 		popa
 10286                              <2> forgetresetstuff:
 10287 00008103 C605[13240000]00    <2> 		mov byte [termcopyon], 0
 10288 0000810A C3                  <2> 		ret
 10289                              <2> 		
 10290 0000810B 0000                <2> charposline dw 0
 10291 0000810D 00000000            <2> charposvbuf dw 0,0
 10292                              <1> 				
 10293 00008111 00                  <1> copygui db 0
 10294 00008112 00                  <1> graphicsset db 0
 10295 00008113 0000                <1> graphicspos db 0,0
 10296 00008115 00                  <1> showcursorfonton db 0
 10297 00008116 00                  <1> savefonton db 0
 10298 00008117 00                  <1> mouseselecton db 0
 10299                              <1> 
 10300 00008118 00                  <1> pbutton db 0
 10301 00008119 00                  <1> pLBUTTON db 0
 10302 0000811A 00                  <1> pRBUTTON db 0
 10303 0000811B 00000000            <1> dragging dw 0,0
 10304 0000811F 0000000000000000    <1> lastpos dw 0,0,0,0
 10305 00008127 00000000            <1> colorbuf dw 0,0
 10306                              <1> 	
 10307                              <1> 	clickicon:
 10308 0000812B B001                <1> 		mov al, 1
 10309 0000812D A2[18810000]        <1> 		mov [pbutton], al
 10310 00008132 A0[19810000]        <1> 		mov al, [pLBUTTON]
 10311 00008137 2205[2C5C0000]      <1> 		and al, [LBUTTON]
 10312 0000813D 8A25[1A810000]      <1> 		mov ah, [pRBUTTON]
 10313 00008143 2225[2D5C0000]      <1> 		and ah, [RBUTTON]
 10314 00008149 08E0                <1> 		or al, ah
 10315 0000814B 3C00                <1> 		cmp al, 0
 10316 0000814D 741B                <1> 		je nodragclick
 10317 0000814F 813D[1B810000]0100- <1> 		cmp dword [dragging], 1
 10318 00008157 0000                <1>
 10319 00008159 732F                <1> 		jae dragclick
 10320 0000815B C705[1B810000]0100- <1> 		mov dword [dragging], 1
 10321 00008163 0000                <1>
 10322 00008165 E920000000          <1> 		jmp dragclick
 10323                              <1> 	nodragclick:
 10324 0000816A 31C0                <1> 		xor eax, eax
 10325 0000816C A3[1B810000]        <1> 		mov dword [dragging], eax
 10326 00008171 A2[18810000]        <1> 		mov [pbutton], al
 10327 00008176 A0[2C5C0000]        <1> 		mov al, [LBUTTON]
 10328 0000817B A2[19810000]        <1> 		mov [pLBUTTON], al
 10329 00008180 A0[2D5C0000]        <1> 		mov al, [RBUTTON]
 10330 00008185 A2[1A810000]        <1> 		mov [pRBUTTON], al
 10331                              <1> 	dragclick:
 10332 0000818A 6631C0              <1> 		xor ax, ax
 10333 0000818D BE[9CCC0300]        <1> 		mov esi, graphicstable
 10334 00008192 C705[96890000]0000- <1> 		mov dword [codepointer], 0
 10335 0000819A 0000                <1>
 10336                              <1> 	clicon2:
 10337 0000819C 31D2                <1> 		xor edx, edx
 10338 0000819E 31C9                <1> 		xor ecx, ecx
 10339 000081A0 66813E0100          <1> 		cmp word [esi], 1
 10340 000081A5 0F841B000000        <1> 		je near iconselect
 10341 000081AB 66813E0200          <1> 		cmp word [esi], 2
 10342 000081B0 0F8472010000        <1> 		je near textselected
 10343 000081B6 66813E0300          <1> 		cmp word [esi], 3
 10344 000081BB 0F84CA020000        <1> 		je near windowselect
 10345 000081C1 E913040000          <1> 		jmp nexticonsel
 10346                              <1> 	iconselect:
 10347 000081C6 668B5606            <1> 		mov dx, [esi + 6]
 10348 000081CA 6689D0              <1> 		mov ax, dx
 10349 000081CD 668B4E08            <1> 		mov cx, [esi + 8]
 10350 000081D1 6689CB              <1> 		mov bx, cx
 10351 000081D4 6681C32000          <1> 		add bx, 32
 10352 000081D9 6601D0              <1> 		add ax, dx
 10353 000081DC 813D[1B810000]0100- <1> 		cmp dword [dragging], 1
 10354 000081E4 0000                <1>
 10355 000081E6 746F                <1> 		je dragicon
 10356 000081E8 813D[1B810000]0000- <1> 		cmp dword [dragging], 0
 10357 000081F0 0000                <1>
 10358 000081F2 7411                <1> 		je nodragiconcheck
 10359 000081F4 3935[1B810000]      <1> 		cmp dword [dragging], esi
 10360 000081FA 0F85D9030000        <1> 		jne near nexticonsel
 10361 00008200 E952000000          <1> 		jmp dragicon
 10362                              <1> 	nodragiconcheck:
 10363 00008205 663905[1B5B0000]    <1> 		cmp [mousecursorposition], ax
 10364 0000820C 0F82C7030000        <1> 		jb near nexticonsel
 10365 00008212 66054000            <1> 		add ax, 64
 10366 00008216 663905[1B5B0000]    <1> 		cmp [mousecursorposition], ax
 10367 0000821D 0F87B6030000        <1> 		ja near nexticonsel
 10368 00008223 6629D0              <1> 		sub ax, dx
 10369 00008226 66390D[1D5B0000]    <1> 		cmp [mousecursorposition + 2], cx
 10370 0000822D 0F82A6030000        <1> 		jb near nexticonsel
 10371 00008233 66391D[1D5B0000]    <1> 		cmp [mousecursorposition + 2], bx
 10372 0000823A 0F8799030000        <1> 		ja near nexticonsel
 10373 00008240 668B460A            <1> 		mov ax, [esi + 10]
 10374 00008244 66250100            <1> 		and ax, 1
 10375 00008248 663D0100            <1> 		cmp ax, 1
 10376 0000824C 0F84B6000000        <1> 		je near unselecticon
 10377 00008252 E98D000000          <1> 		jmp nodragicon
 10378                              <1> 	dragicon:
 10379 00008257 663905[175B0000]    <1> 		cmp [lastmouseposition], ax
 10380 0000825E 0F8275030000        <1> 		jb near nexticonsel
 10381 00008264 66054000            <1> 		add ax, 64
 10382 00008268 663905[175B0000]    <1> 		cmp [lastmouseposition], ax
 10383 0000826F 0F8764030000        <1> 		ja near nexticonsel
 10384 00008275 6629D0              <1> 		sub ax, dx
 10385 00008278 66390D[195B0000]    <1> 		cmp [lastmouseposition + 2], cx
 10386 0000827F 0F8254030000        <1> 		jb near nexticonsel
 10387 00008285 66391D[195B0000]    <1> 		cmp [lastmouseposition + 2], bx
 10388 0000828C 0F8747030000        <1> 		ja near nexticonsel
 10389 00008292 668B460A            <1> 		mov ax, [esi + 10]
 10390 00008296 2410                <1> 		and al, 00010000b
 10391 00008298 3C10                <1> 		cmp al, 00010000b
 10392 0000829A 7448                <1> 		je nodragicon
 10393 0000829C 8935[1B810000]      <1> 		mov [dragging], esi
 10394 000082A2 66D1E2              <1> 		shl dx, 1
 10395 000082A5 662B15[175B0000]    <1> 		sub dx, [lastmouseposition]
 10396 000082AC 660315[1B5B0000]    <1> 		add dx, [mousecursorposition]
 10397 000082B3 66D1EA              <1> 		shr dx, 1
 10398 000082B6 66030D[1D5B0000]    <1> 		add cx, [mousecursorposition + 2]
 10399 000082BD 662B0D[195B0000]    <1> 		sub cx, [lastmouseposition + 2]
 10400 000082C4 663B15[25590000]    <1> 		cmp dx, [resolutionx2]
 10401 000082CB 7607                <1> 		jbe chkyresdrgicn
 10402 000082CD 668B15[1B5B0000]    <1> 		mov dx, [mousecursorposition]
 10403                              <1> 	chkyresdrgicn:
 10404 000082D4 663B0D[39580000]    <1> 		cmp cx, [resolutiony]
 10405 000082DB 7607                <1> 		jbe nodragicon
 10406 000082DD 668B0D[1D5B0000]    <1> 		mov cx, [mousecursorposition + 2]
 10407                              <1> 	nodragicon:
 10408 000082E4 66814E0A0100        <1> 		or word [esi + 10], 1
 10409 000082EA 8B5E0C              <1> 		mov ebx, [esi + 12]
 10410 000082ED 668B460A            <1> 		mov ax, [esi + 10]
 10411 000082F1 8B7602              <1> 		mov esi, [esi + 2]
 10412 000082F4 C705[96890000]0000- <1> 		mov dword [codepointer], 0
 10413 000082FC 0000                <1>
 10414 000082FE E893ECFFFF          <1> 		call showicon
 10415 00008303 E9EA020000          <1> 		jmp doneiconsel
 10416                              <1> 	unselecticon:
 10417 00008308 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10418 0000830E 8B5E0C              <1> 		mov ebx, [esi + 12]
 10419 00008311 668B460A            <1> 		mov ax, [esi + 10]
 10420 00008315 8B7602              <1> 		mov esi, [esi + 2]
 10421 00008318 891D[96890000]      <1> 		mov [codepointer], ebx
 10422 0000831E E873ECFFFF          <1> 		call showicon
 10423 00008323 E9CA020000          <1> 		jmp doneiconsel
 10424                              <1> 	textselected:
 10425 00008328 8B5E02              <1> 		mov ebx, [esi + 2]
 10426 0000832B 668B5606            <1> 		mov dx, [esi + 6]
 10427 0000832F 6689D0              <1> 		mov ax, dx
 10428 00008332 668B4E08            <1> 		mov cx, [esi + 8]
 10429                              <1> 	lengthtesttext:
 10430 00008336 803B00              <1> 		cmp byte [ebx], 0
 10431 00008339 740A                <1> 		je donetesttextlength
 10432 0000833B 43                  <1> 		inc ebx
 10433 0000833C 66051000            <1> 		add ax, 16
 10434 00008340 E9F1FFFFFF          <1> 		jmp lengthtesttext
 10435                              <1> 	donetesttextlength:
 10436 00008345 6689CB              <1> 		mov bx, cx
 10437 00008348 6681C30F00          <1> 		add bx, 15
 10438 0000834D 813D[1B810000]0100- <1> 		cmp dword [dragging], 1
 10439 00008355 0000                <1>
 10440 00008357 7468                <1> 		je dragtext
 10441 00008359 813D[1B810000]0000- <1> 		cmp dword [dragging], 0
 10442 00008361 0000                <1>
 10443 00008363 7411                <1> 		je nodragtextcheck
 10444 00008365 3935[1B810000]      <1> 		cmp dword [dragging], esi
 10445 0000836B 0F8568020000        <1> 		jne near nexticonsel
 10446 00008371 E94B000000          <1> 		jmp dragtext
 10447                              <1> 	nodragtextcheck:
 10448 00008376 663915[1B5B0000]    <1> 		cmp [mousecursorposition], dx
 10449 0000837D 0F8256020000        <1> 		jb near nexticonsel
 10450 00008383 663905[1B5B0000]    <1> 		cmp [mousecursorposition], ax
 10451 0000838A 0F8749020000        <1> 		ja near nexticonsel
 10452 00008390 66390D[1D5B0000]    <1> 		cmp [mousecursorposition + 2], cx
 10453 00008397 0F823C020000        <1> 		jb near nexticonsel
 10454 0000839D 66391D[1D5B0000]    <1> 		cmp [mousecursorposition + 2], bx
 10455 000083A4 0F872F020000        <1> 		ja near nexticonsel
 10456 000083AA 668B460A            <1> 		mov ax, [esi + 10]
 10457 000083AE 66250100            <1> 		and ax, 1
 10458 000083B2 663D0100            <1> 		cmp ax, 1
 10459 000083B6 0F84AB000000        <1> 		je near unselecttext
 10460 000083BC E986000000          <1> 		jmp nodragtext
 10461                              <1> 	dragtext:
 10462 000083C1 663915[175B0000]    <1> 		cmp [lastmouseposition], dx
 10463 000083C8 0F820B020000        <1> 		jb near nexticonsel
 10464 000083CE 663905[175B0000]    <1> 		cmp [lastmouseposition], ax
 10465 000083D5 0F87FE010000        <1> 		ja near nexticonsel
 10466 000083DB 66390D[195B0000]    <1> 		cmp [lastmouseposition + 2], cx
 10467 000083E2 0F82F1010000        <1> 		jb near nexticonsel
 10468 000083E8 66391D[195B0000]    <1> 		cmp [lastmouseposition + 2], bx
 10469 000083EF 0F87E4010000        <1> 		ja near nexticonsel
 10470 000083F5 668B460A            <1> 		mov ax, [esi + 10]
 10471 000083F9 2410                <1> 		and al, 00010000b
 10472 000083FB 663D1000            <1> 		cmp ax, 00010000b
 10473 000083FF 0F8442000000        <1> 		je near nodragtext
 10474 00008405 8935[1B810000]      <1> 		mov [dragging], esi
 10475 0000840B 662B15[175B0000]    <1> 		sub dx, [lastmouseposition]
 10476 00008412 660315[1B5B0000]    <1> 		add dx, [mousecursorposition]
 10477 00008419 66030D[1D5B0000]    <1> 		add cx, [mousecursorposition + 2]
 10478 00008420 662B0D[195B0000]    <1> 		sub cx, [lastmouseposition + 2]
 10479 00008427 663B15[25590000]    <1> 		cmp dx, [resolutionx2]
 10480 0000842E 7607                <1> 		jbe chkyresdrgtxt
 10481 00008430 668B15[1B5B0000]    <1> 		mov dx, [mousecursorposition]
 10482                              <1> 	chkyresdrgtxt:
 10483 00008437 663B0D[39580000]    <1> 		cmp cx, [resolutiony]
 10484 0000843E 7607                <1> 		jbe nodragtext
 10485 00008440 668B0D[1D5B0000]    <1> 		mov cx, [mousecursorposition + 2]
 10486                              <1> 	nodragtext:
 10487 00008447 66814E0A0100        <1> 		or word [esi + 10], 1
 10488 0000844D 8B5E0C              <1> 		mov ebx, [esi + 12]
 10489 00008450 891D[96890000]      <1> 		mov [codepointer], ebx
 10490 00008456 668B460A            <1> 		mov ax, [esi + 10]
 10491 0000845A 8B7602              <1> 		mov esi, [esi + 2]
 10492 0000845D E820F4FFFF          <1> 		call showstring
 10493 00008462 E98B010000          <1> 		jmp doneiconsel
 10494                              <1> 	unselecttext:
 10495 00008467 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10496 0000846D 8B5E0C              <1> 		mov ebx, [esi + 12]
 10497 00008470 668B460A            <1> 		mov ax, [esi + 10]
 10498 00008474 8B7602              <1> 		mov esi, [esi + 2]
 10499 00008477 C705[96890000]0000- <1> 		mov dword [codepointer], 0
 10500 0000847F 0000                <1>
 10501 00008481 E8FCF3FFFF          <1> 		call showstring
 10502 00008486 E967010000          <1> 		jmp doneiconsel
 10503                              <1> windowselect:
 10504 0000848B 8B7E02              <1> 		mov edi, [esi + 2]
 10505 0000848E 668B5606            <1> 		mov dx, [esi + 6]
 10506 00008492 6689D0              <1> 		mov ax, dx
 10507 00008495 668B4E08            <1> 		mov cx, [esi + 8]
 10508 00008499 6689CB              <1> 		mov bx, cx
 10509 0000849C 6681C31000          <1> 		add bx, 16
 10510 000084A1 813D[1B810000]0100- <1> 		cmp dword [dragging], 1
 10511 000084A9 0000                <1>
 10512 000084AB 746D                <1> 		je dragwin
 10513 000084AD 813D[1B810000]0000- <1> 		cmp dword [dragging], 0
 10514 000084B5 0000                <1>
 10515 000084B7 7411                <1> 		je nodragwincheck
 10516 000084B9 3935[1B810000]      <1> 		cmp dword [dragging], esi
 10517 000084BF 0F8514010000        <1> 		jne near nexticonsel
 10518 000084C5 E950000000          <1> 		jmp dragwin
 10519                              <1> 	nodragwincheck:
 10520 000084CA 663905[1B5B0000]    <1> 		cmp [mousecursorposition], ax
 10521 000084D1 0F8202010000        <1> 		jb near nexticonsel
 10522 000084D7 660307              <1> 		add ax, [edi]
 10523 000084DA 660307              <1> 		add ax, [edi]
 10524 000084DD 663905[1B5B0000]    <1> 		cmp [mousecursorposition], ax
 10525 000084E4 0F87EF000000        <1> 		ja near nexticonsel
 10526 000084EA 66390D[1D5B0000]    <1> 		cmp [mousecursorposition + 2], cx
 10527 000084F1 0F82E2000000        <1> 		jb near nexticonsel
 10528 000084F7 66391D[1D5B0000]    <1> 		cmp [mousecursorposition + 2], bx
 10529 000084FE 0F87D5000000        <1> 		ja near nexticonsel
 10530 00008504 662D1400            <1> 		sub ax, 20
 10531 00008508 663905[1B5B0000]    <1> 		cmp [mousecursorposition], ax
 10532 0000850F 0F87A4000000        <1> 		ja near killwin
 10533 00008515 E98B000000          <1> 		jmp nodragwin
 10534                              <1> 	dragwin:
 10535 0000851A 663905[175B0000]    <1> 		cmp [lastmouseposition], ax
 10536 00008521 0F82B2000000        <1> 		jb near nexticonsel
 10537 00008527 660307              <1> 		add ax, [edi]
 10538 0000852A 660307              <1> 		add ax, [edi]
 10539 0000852D 663905[175B0000]    <1> 		cmp [lastmouseposition], ax
 10540 00008534 0F879F000000        <1> 		ja near nexticonsel
 10541 0000853A 66390D[195B0000]    <1> 		cmp [lastmouseposition + 2], cx
 10542 00008541 0F8292000000        <1> 		jb near nexticonsel
 10543 00008547 66391D[195B0000]    <1> 		cmp [lastmouseposition + 2], bx
 10544 0000854E 0F8785000000        <1> 		ja near nexticonsel
 10545 00008554 8935[1B810000]      <1> 		mov [dragging], esi
 10546 0000855A 803D[82860000]01    <1> 		cmp byte [windrag], 1
 10547 00008561 7706                <1> 		ja .nochangewindrag
 10548 00008563 FE05[82860000]      <1> 		inc byte [windrag]
 10549                              <1> 	.nochangewindrag:
 10550 00008569 662B15[175B0000]    <1> 		sub dx, [lastmouseposition]
 10551 00008570 660315[1B5B0000]    <1> 		add dx, [mousecursorposition]
 10552 00008577 66030D[1D5B0000]    <1> 		add cx, [mousecursorposition + 2]
 10553 0000857E 662B0D[195B0000]    <1> 		sub cx, [lastmouseposition + 2]
 10554 00008585 663B15[25590000]    <1> 		cmp dx, [resolutionx2]
 10555 0000858C 7607                <1> 		jbe chkyresdrgwin
 10556 0000858E 668B15[1B5B0000]    <1> 		mov dx, [mousecursorposition]
 10557                              <1> 	chkyresdrgwin:
 10558 00008595 663B0D[39580000]    <1> 		cmp cx, [resolutiony]
 10559 0000859C 7607                <1> 		jbe nodragwin
 10560 0000859E 668B0D[1D5B0000]    <1> 		mov cx, [mousecursorposition + 2]
 10561                              <1> 	nodragwin:
 10562 000085A5 8B5E0C              <1> 		mov ebx, [esi + 12]
 10563 000085A8 668B460A            <1> 		mov ax, [esi + 10]
 10564 000085AC 8B7602              <1> 		mov esi, [esi + 2]
 10565 000085AF E86FF5FFFF          <1> 		call showwindow
 10566 000085B4 E939000000          <1> 		jmp doneiconsel
 10567                              <1> 	killwin:
 10568 000085B9 66C7060000          <1> 		mov word [esi], 0
 10569 000085BE C605[12240000]00    <1> 		mov byte [termguion], 0
 10570 000085C5 E8CDEBFFFF          <1> 		call guiclear
 10571 000085CA E85BECFFFF          <1> 		call reloadallgraphics
 10572 000085CF E85FE9FFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10573 000085D4 E9F4E4FFFF          <1> 		jmp guistart
 10574                              <1> 	nexticonsel:
 10575 000085D9 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10576 000085DF 81C610000000        <1> 		add esi, 16
 10577 000085E5 81FE[9CCE0300]      <1> 		cmp esi, graphicstableend
 10578 000085EB 7305                <1> 		jae doneiconsel
 10579 000085ED E9AAFBFFFF          <1> 		jmp clicon2
 10580                              <1> 	doneiconsel:
 10581 000085F2 813D[1B810000]0100- <1> 		cmp dword [dragging], 1
 10582 000085FA 0000                <1>
 10583 000085FC 731A                <1> 		jae doneiconsel2
 10584 000085FE A2[82860000]        <1> 		mov [windrag], al
 10585 00008603 813D[96890000]0000- <1> 		cmp dword [codepointer], 0
 10586 0000860B 0000                <1>
 10587 0000860D 7409                <1> 		je doneiconsel2
 10588 0000860F 8B1D[96890000]      <1> 		mov ebx, [codepointer]
 10589 00008615 FFD3                <1> 		call ebx
 10590 00008617 C3                  <1> 		ret
 10591                              <1> 	doneiconsel2:
 10592 00008618 A0[2C5C0000]        <1> 		mov al, [LBUTTON]
 10593 0000861D A2[19810000]        <1> 		mov [pLBUTTON], al
 10594 00008622 A0[2D5C0000]        <1> 		mov al, [RBUTTON]
 10595 00008627 A2[1A810000]        <1> 		mov [pRBUTTON], al
 10596 0000862C 813D[1B810000]0100- <1> 		cmp dword [dragging], 1
 10597 00008634 0000                <1>
 10598 00008636 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10599 0000863C E8F2E8FFFF          <1> 		call switchmousepos2
 10600 00008641 803D[82860000]01    <1> 		cmp byte [windrag], 1
 10601 00008648 7305                <1> 		jae noclearcursorcl
 10602 0000864A E8E8E7FFFF          <1> 		call clearmousecursor
 10603                              <1> noclearcursorcl:
 10604 0000864F E8D6EBFFFF          <1> 		call reloadallgraphics
 10605                              <1> noreloadgraphicsclick:
 10606 00008654 30E4                <1> 		xor ah, ah
 10607 00008656 31C9                <1> 		xor ecx, ecx
 10608 00008658 31D2                <1> 		xor edx, edx
 10609 0000865A B001                <1> 		mov al, 1
 10610 0000865C 668B15[1B5B0000]    <1> 		mov dx, [mousecursorposition]
 10611 00008663 668B0D[1D5B0000]    <1> 		mov cx, [mousecursorposition + 2]
 10612 0000866A 66BBE738            <1> 		mov bx, 0011100011100111b
 10613 0000866E C605[15810000]01    <1> 		mov byte [showcursorfonton], 1
 10614 00008675 E89FF2FFFF          <1> 		call showfontvesa
 10615 0000867A C605[15810000]00    <1> 		mov byte [showcursorfonton], 0
 10616 00008681 C3                  <1> 		ret
 10617 00008682 00                  <1> windrag db 0
 10618 00008683 00000000            <1> lastdrag dw 0,0
 10619 00008687 00000000            <1> grpctblpos dw 0,0
 10620                              <1> 
 10621                              <1> 
 10622                              <1> 
 10623 0000868B 00<rept>            <1> grphbuf times 16 db 0
 10624                              <1> 	graphicsadd:
 10625 0000869B BF[9CCC0300]        <1> 		mov edi, graphicstable
 10626                              <1> 	shwgrph1:
 10627 000086A0 397702              <1> 		cmp dword [edi + 2], esi
 10628 000086A3 7417                <1> 		je showgraphicsreplace2
 10629 000086A5 81C710000000        <1> 		add edi, 16
 10630 000086AB 81FF[9CCE0300]      <1> 		cmp edi, graphicstableend
 10631 000086B1 0F835F020000        <1> 		jae near showgraphicsnew
 10632 000086B7 E9E4FFFFFF          <1> 		jmp shwgrph1
 10633                              <1> 	showgraphicsreplace2:
 10634 000086BC 8935[8D860000]      <1> 		mov [grphbuf + 2], esi
 10635 000086C2 668915[91860000]    <1> 		mov [grphbuf + 6], dx
 10636 000086C9 66890D[93860000]    <1> 		mov [grphbuf + 8], cx
 10637 000086D0 891D[97860000]      <1> 		mov [grphbuf + 12], ebx
 10638 000086D6 30FF                <1> 		xor bh, bh
 10639 000086D8 88E3                <1> 		mov bl, ah
 10640 000086DA 30E4                <1> 		xor ah, ah
 10641 000086DC 66A3[95860000]      <1> 		mov [grphbuf + 10], ax	
 10642 000086E2 66891D[8B860000]    <1> 		mov [grphbuf], bx
 10643 000086E9 66A1[8B860000]      <1> 		mov ax, [grphbuf]
 10644 000086EF 663D0100            <1> 		cmp ax, 1
 10645 000086F3 0F8419000000        <1> 		je near replaceicon
 10646 000086F9 663D0200            <1> 		cmp ax, 2
 10647 000086FD 0F8493000000        <1> 		je near replacestring
 10648 00008703 663D0300            <1> 		cmp ax, 3
 10649 00008707 0F840F010000        <1> 		je near replacewindow
 10650 0000870D E9E1010000          <1> 		jmp showgraphicsreplace
 10651                              <1> 	replaceicon:
 10652 00008712 893D[1F810000]      <1> 		mov [lastpos], edi
 10653 00008718 8935[23810000]      <1> 		mov [lastpos + 4], esi
 10654 0000871E 8B7702              <1> 		mov esi, [edi + 2]
 10655 00008721 668B5F0C            <1> 		mov bx, [edi + 12]
 10656 00008725 668B5706            <1> 		mov dx, [edi + 6]
 10657 00008729 668B4F08            <1> 		mov cx, [edi + 8]
 10658 0000872D 668B06              <1> 		mov ax, [esi]
 10659 00008730 66A3[27810000]      <1> 		mov [colorbuf], ax
 10660 00008736 66A1[26720000]      <1> 		mov ax, [background]
 10661 0000873C 668906              <1> 		mov [esi], ax
 10662 0000873F 8B5F0C              <1> 		mov ebx, [edi + 12]
 10663 00008742 668B470A            <1> 		mov ax, [edi + 10]
 10664 00008746 2401                <1> 		and al, 1
 10665 00008748 A2[9A890000]        <1> 		mov [iconselected], al
 10666 0000874D 668B470A            <1> 		mov ax, [edi + 10]
 10667 00008751 E853E8FFFF          <1> 		call showicon2
 10668 00008756 8B3D[1F810000]      <1> 		mov edi, [lastpos]
 10669 0000875C 8B7702              <1> 		mov esi, [edi + 2]
 10670 0000875F 66A1[27810000]      <1> 		mov ax, [colorbuf]
 10671 00008765 668906              <1> 		mov [esi], ax
 10672 00008768 8B35[23810000]      <1> 		mov esi, [lastpos + 4]
 10673 0000876E 668B15[91860000]    <1> 		mov dx, [grphbuf + 6]
 10674 00008775 668B0D[93860000]    <1> 		mov cx, [grphbuf + 8]
 10675 0000877C 668B1D[8B860000]    <1> 		mov bx, [grphbuf]
 10676 00008783 66A1[95860000]      <1> 		mov ax, [grphbuf + 10]
 10677 00008789 88DC                <1> 		mov ah, bl
 10678 0000878B 8B1D[97860000]      <1> 		mov ebx, [grphbuf + 12]
 10679 00008791 E95D010000          <1> 		jmp showgraphicsreplace
 10680                              <1> 	replacestring:
 10681 00008796 893D[1F810000]      <1> 		mov [lastpos], edi
 10682 0000879C 8935[23810000]      <1> 		mov [lastpos + 4], esi
 10683 000087A2 8B5F0C              <1> 		mov ebx, [edi + 12]
 10684 000087A5 8B7702              <1> 		mov esi, [edi + 2]
 10685 000087A8 668B5706            <1> 		mov dx, [edi + 6]
 10686 000087AC 668B4F08            <1> 		mov cx, [edi + 8]
 10687 000087B0 66A1[08790000]      <1> 		mov ax, [colorfont2]
 10688 000087B6 66A3[27810000]      <1> 		mov [colorbuf], ax
 10689 000087BC 66A1[26720000]      <1> 		mov ax, [background]
 10690 000087C2 66A3[08790000]      <1> 		mov [colorfont2], ax		
 10691 000087C8 8B5F0C              <1> 		mov ebx, [edi + 12]
 10692 000087CB 668B470A            <1> 		mov ax, [edi + 10]
 10693 000087CF 2401                <1> 		and al, 1
 10694 000087D1 A2[17810000]        <1> 		mov [mouseselecton], al
 10695 000087D6 668B470A            <1> 		mov ax, [edi + 10]
 10696 000087DA E8B6F0FFFF          <1> 		call showstring2
 10697 000087DF 66A1[27810000]      <1> 		mov ax, [colorbuf]
 10698 000087E5 66A3[08790000]      <1> 		mov [colorfont2], ax
 10699 000087EB 8B3D[1F810000]      <1> 		mov edi, [lastpos]
 10700 000087F1 8B7702              <1> 		mov esi, [edi + 2]
 10701 000087F4 668B15[91860000]    <1> 		mov dx, [grphbuf + 6]
 10702 000087FB 668B0D[93860000]    <1> 		mov cx, [grphbuf + 8]
 10703 00008802 668B1D[8B860000]    <1> 		mov bx, [grphbuf]
 10704 00008809 66A1[95860000]      <1> 		mov ax, [grphbuf + 10]
 10705 0000880F 88DC                <1> 		mov ah, bl
 10706 00008811 8B1D[97860000]      <1> 		mov ebx, [grphbuf + 12]
 10707 00008817 E9D7000000          <1> 		jmp showgraphicsreplace
 10708                              <1> 	replacewindow:
 10709 0000881C 893D[1F810000]      <1> 		mov [lastpos], edi
 10710 00008822 8935[23810000]      <1> 		mov [lastpos + 4], esi
 10711 00008828 8B7702              <1> 		mov esi, [edi + 2]
 10712 0000882B 8B3D[0D7B0000]      <1> 		mov edi, [windowbufloc]
 10713 00008831 31D2                <1> 		xor edx, edx
 10714 00008833 668B15[25590000]    <1> 		mov dx, [resolutionx2]
 10715 0000883A C1E204              <1> 		shl edx, 4
 10716 0000883D 29D7                <1> 		sub edi, edx
 10717 0000883F 31D2                <1> 		xor edx, edx
 10718 00008841 668B16              <1> 		mov dx, [esi]
 10719 00008844 660316              <1> 		add dx, [esi]
 10720 00008847 668B4E02            <1> 		mov cx, [esi + 2]
 10721 0000884B 6681C11000          <1> 		add cx, 16
 10722 00008850 66A1[26720000]      <1> 		mov ax, [background]
 10723 00008856 803D[82860000]01    <1> 		cmp byte [windrag], 1
 10724 0000885D 7604                <1> 		jbe clearwindow
 10725 0000885F 662B4E02            <1> 		sub cx, [esi + 2]
 10726                              <1> 	clearwindow:
 10727                              <1> 		%ifdef gui.background
 10728 00008863 813D[F8710000]0000- <1> 			cmp dword [backgroundimage], 0
 10729 0000886B 0000                <1>
 10730 0000886D 7419                <1> 			je .noback
 10731 0000886F 56                  <1> 			push esi
 10732 00008870 8B35[F8710000]      <1> 			mov esi, [backgroundimage]
 10733 00008876 2B3D[4D580000]      <1> 			sub edi, [physbaseptr]
 10734 0000887C 01FE                <1> 			add esi, edi
 10735 0000887E 033D[4D580000]      <1> 			add edi, [physbaseptr]
 10736 00008884 668B06              <1> 			mov ax, [esi]
 10737 00008887 5E                  <1> 			pop esi
 10738                              <1> 		.noback:
 10739                              <1> 		%endif
 10740 00008888 668907              <1> 		mov [edi], ax
 10741 0000888B 81C702000000        <1> 		add edi, 2
 10742 00008891 81EA02000000        <1> 		sub edx, 2
 10743 00008897 81FA00000000        <1> 		cmp edx, 0
 10744 0000889D 75C4                <1> 		jne clearwindow
 10745 0000889F 6649                <1> 		dec cx
 10746 000088A1 668B15[25590000]    <1> 		mov dx, [resolutionx2]
 10747 000088A8 662B16              <1> 		sub dx, [esi]
 10748 000088AB 662B16              <1> 		sub dx, [esi]
 10749 000088AE 01D7                <1> 		add edi, edx
 10750 000088B0 668B16              <1> 		mov dx, [esi]
 10751 000088B3 660316              <1> 		add dx, [esi]
 10752 000088B6 6681F90000          <1> 		cmp cx, 0
 10753 000088BB 75A6                <1> 		jne clearwindow
 10754                              <1> 	endwindowclear:
 10755 000088BD C605[13240000]00    <1> 		mov byte [termcopyon], 0
 10756 000088C4 8B3D[1F810000]      <1> 		mov edi, [lastpos]
 10757 000088CA 8B35[8D860000]      <1> 		mov esi, [grphbuf + 2]
 10758 000088D0 668B15[91860000]    <1> 		mov dx, [grphbuf + 6]
 10759 000088D7 668B0D[93860000]    <1> 		mov cx, [grphbuf + 8]
 10760 000088DE 668B1D[8B860000]    <1> 		mov bx, [grphbuf]
 10761 000088E5 66A1[95860000]      <1> 		mov ax, [grphbuf + 10]
 10762 000088EB 88DC                <1> 		mov ah, bl
 10763 000088ED 8B1D[97860000]      <1> 		mov ebx, [grphbuf + 12]
 10764                              <1> 	showgraphicsreplace:
 10765 000088F3 897702              <1> 		mov [edi + 2], esi
 10766 000088F6 66895706            <1> 		mov [edi + 6], dx
 10767 000088FA 66894F08            <1> 		mov [edi + 8], cx
 10768 000088FE 895F0C              <1> 		mov [edi + 12], ebx
 10769 00008901 30FF                <1> 		xor bh, bh
 10770 00008903 88E3                <1> 		mov bl, ah
 10771 00008905 30E4                <1> 		xor ah, ah
 10772 00008907 6689470A            <1> 		mov [edi + 10], ax
 10773 0000890B 66891F              <1> 		mov [edi], bx
 10774 0000890E 8B5F0C              <1> 		mov ebx, [edi + 12]
 10775 00008911 668B470A            <1> 		mov ax, [edi + 10]
 10776 00008915 C3                  <1> 		ret
 10777                              <1> 	showgraphicsnew:
 10778 00008916 BF[9CCC0300]        <1> 		mov edi, graphicstable
 10779                              <1> 	shwgrph2:
 10780 0000891B 66813F0000          <1> 		cmp word [edi], 0
 10781 00008920 74D1                <1> 		je showgraphicsreplace
 10782 00008922 81C710000000        <1> 		add edi, 16
 10783 00008928 81FF[9CCE0300]      <1> 		cmp edi, graphicstableend
 10784 0000892E 72EB                <1> 		jb shwgrph2
 10785                              <1> 	showgraphicsdone:
 10786 00008930 C3                  <1> 		ret
 10787                              <1> 	
 10788                              <1> putpixel: ;color in si, point is (dx,cx)
 10789                              <1> 		;destroys edi, ebx, eax
 10790 00008931 6650                <1> 	push ax
 10791 00008933 6653                <1> 	push bx
 10792 00008935 31C0                <1> 	xor eax, eax
 10793 00008937 31DB                <1> 	xor ebx, ebx
 10794 00008939 31FF                <1> 	xor edi, edi
 10795 0000893B 668B1D[39580000]    <1> 	mov bx, [resolutiony]
 10796 00008942 66A1[37580000]      <1> 	mov ax, [resolutionx]
 10797 00008948 6639C2              <1> 	cmp dx, ax
 10798 0000894B 7720                <1> 	ja .doneput
 10799 0000894D 66D1E0              <1> 	shl ax, 1
 10800 00008950 6639D9              <1> 	cmp cx, bx
 10801 00008953 7718                <1> 	ja .doneput
 10802 00008955 6689CB              <1> 	mov bx, cx
 10803 00008958 52                  <1> 	push edx
 10804 00008959 F7E3                <1> 	mul ebx
 10805 0000895B 5A                  <1> 	pop edx
 10806 0000895C 6601D7              <1> 	add di, dx
 10807 0000895F 6601D7              <1> 	add di, dx
 10808 00008962 01C7                <1> 	add edi, eax
 10809 00008964 033D[4D580000]      <1> 	add edi, [physbaseptr]
 10810 0000896A 668937              <1> 	mov [edi], si
 10811                              <1> .doneput:
 10812 0000896D 665B                <1> 	pop bx
 10813 0000896F 6658                <1> 	pop ax
 10814 00008971 C3                  <1> 	ret
 10815                              <1> 	
 10816                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10817 00008972 31FF                <1> 	xor edi, edi
 10818 00008974 31C0                <1> 	xor eax, eax
 10819 00008976 31DB                <1> 	xor ebx, ebx
 10820 00008978 668B1D[25590000]    <1> 	mov bx, [resolutionx2]
 10821 0000897F 6689D7              <1> 	mov di, dx
 10822 00008982 6601D7              <1> 	add di, dx
 10823 00008985 6689C8              <1> 	mov ax, cx
 10824 00008988 F7E3                <1> 	mul ebx
 10825 0000898A 01C7                <1> 	add edi, eax
 10826 0000898C 033D[4D580000]      <1> 	add edi, [physbaseptr]
 10827 00008992 C3                  <1> 	ret
 10828                              <1> 
 10829 00008993 00                  <1> 	mouseon db 0
 10830 00008994 0000                <1> 	icon dw 0	;pointer to icon
 10831 00008996 00000000            <1> 	codepointer dd 0 ;pointer to code
 10832 0000899A 00                  <1> 	iconselected db 0
 10833                                  %endif
 10834                                  %ifdef network.included
 10835                                  	%include "source/network.asm"
 10836                                  %endif
 10837                                      %include "source/data.asm"
 10838 0000899B 626F6F742E736800    <1> 	bootfilename db	"boot.sh",0
 10839 000089A3 73687573683A2000    <1> 	notfound1 db	"shush: ",0
 10840 000089AB 3A206E6F7420666F75- <1> 	notfound2 db	": not found",10,0
 10841 000089B4 6E640A00            <1>
 10842 000089B8 757365726E616D653A- <1> 	userask db	"username:",0
 10843 000089C1 00                  <1>
 10844 000089C2 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10845 000089CB 00                  <1>
 10846 000089CC 40                  <1> 	computer db	"@"
 10847                              <1> %ifdef io.serial
 10848                              <1> 	computername db	"SollerOS.",io.serial," ",0
 10849                              <1> %else
 10850 000089CD 536F6C6C65724F5320- <1> 	computername db	"SollerOS ",0
 10851 000089D6 00                  <1>
 10852                              <1> %endif
 10853 000089D7 5D242000            <1> 	endprompt db "]$ ",0
 10854 000089DB 0D                  <1> 	crlf 	db	13
 10855 000089DC 0A00                <1> 	line	db	10,0
 10856                              <1> 	userlst:
 10857 000089DE 726F6F7400          <1> 			db "root",0
 10858 000089E3 617765736F6D65706F- <1> 			db "awesomepower",0
 10859 000089EC 77657200            <1>
 10860 000089F0 7573657200          <1> 			db "user",0
 10861 000089F5 70617373776F726400  <1> 			db "password",0
 10862 000089FE 6E00                <1> 			db "n",0	;abuse for quick entry-a quick double n followed by a double enter will get you in
 10863 00008A00 00                  <1> 			db 0
 10864                              <1> 	userlstend:
 10865                              <1> 	
 10866 00008A01 00                  <1> 	guion db 0
 10867 00008A02 00                  <1> 	DriveNumber db 0
 10868 00008A03 00000000            <1> 	lbaad dd 0
 10869 00008A07 0000000000000000    <1> 	initialtsc dd 0,0
 10870 00008A0F 0000000000000000    <1> 	lasttsc dd 0,0
 10871 00008A17 00<rept>            <1> 	memlistbuf times 576 db 0
 10872 00008C57 00000000            <1> 	memlistend: dd 0
 10873                              <1> %ifdef io.serial
 10874                              <1> %else
 10875                              <1> fonts:
 10876                              <1> %ifdef font.unicode
 10877 00008C5B <incbin>            <1> 	incbin "source/fonts/fonts-unicode.pak"
 10878                              <1> %else
 10879                              <1> 	incbin "source/fonts/fonts-ascii.pak"
 10880                              <1> %endif
 10881                              <1> fontend:
 10882                              <1> %endif
 10883                              <1> osend:	;this is the end of the operating system's space on disk
 10884                                  %ifdef disk.none
 10885                                  	diskfileindex:
 10886                                  	enddiskfileindex:
 10887                                      %include "source/bss.asm"
 10888                                  %else
 10889                                      %include "build/fileindex.asm"
 10890                              <1> diskfileindex:
 10891 00038C5B 5F696D672E62696E00  <1> db "_img.bin",0
 10892 00038C64 C7010000            <1> dd (f0-$$)/512
 10893 00038C68 0C000000            <1> dd (f1-f0)/512
 10894 00038C6C 626F6F742E736800    <1> db "boot.sh",0
 10895 00038C74 D3010000            <1> dd (f1-$$)/512
 10896 00038C78 01000000            <1> dd (f2-f1)/512
 10897 00038C7C 646F73746573742E63- <1> db "dostest.com",0
 10898 00038C85 6F6D00              <1>
 10899 00038C88 D4010000            <1> dd (f2-$$)/512
 10900 00038C8C 01000000            <1> dd (f3-f2)/512
 10901 00038C90 6578656300          <1> db "exec",0
 10902 00038C95 D5010000            <1> dd (f3-$$)/512
 10903 00038C99 01000000            <1> dd (f4-f3)/512
 10904 00038C9D 66696E616C636F756E- <1> db "finalcount.sn",0
 10905 00038CA6 742E736E00          <1>
 10906 00038CAB D6010000            <1> dd (f4-$$)/512
 10907 00038CAF 01000000            <1> dd (f5-f4)/512
 10908 00038CB3 666F726B00          <1> db "fork",0
 10909 00038CB8 D7010000            <1> dd (f5-$$)/512
 10910 00038CBC 01000000            <1> dd (f6-f5)/512
 10911 00038CC0 6775697465737400    <1> db "guitest",0
 10912 00038CC8 D8010000            <1> dd (f6-$$)/512
 10913 00038CCC 03000000            <1> dd (f7-f6)/512
 10914 00038CD0 696E7400            <1> db "int",0
 10915 00038CD4 DB010000            <1> dd (f7-$$)/512
 10916 00038CD8 01000000            <1> dd (f8-f7)/512
 10917 00038CDC 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 10918 00038CE5 2E736E00            <1>
 10919 00038CE9 DC010000            <1> dd (f8-$$)/512
 10920 00038CED 01000000            <1> dd (f9-f8)/512
 10921 00038CF1 6D6172696F2E736E00  <1> db "mario.sn",0
 10922 00038CFA DD010000            <1> dd (f9-$$)/512
 10923 00038CFE 01000000            <1> dd (f10-f9)/512
 10924 00038D02 736F6E676F74696D65- <1> db "songotime.sn",0
 10925 00038D0B 2E736E00            <1>
 10926 00038D0F DE010000            <1> dd (f10-$$)/512
 10927 00038D13 01000000            <1> dd (f11-f10)/512
 10928 00038D17 73736500            <1> db "sse",0
 10929 00038D1B DF010000            <1> dd (f11-$$)/512
 10930 00038D1F 02000000            <1> dd (f12-f11)/512
 10931 00038D23 74656C7900          <1> db "tely",0
 10932 00038D28 E1010000            <1> dd (f12-$$)/512
 10933 00038D2C 01000000            <1> dd (f13-f12)/512
 10934 00038D30 7475746F7269616C2E- <1> db "tutorial.sh",0
 10935 00038D39 736800              <1>
 10936 00038D3C E2010000            <1> dd (f13-$$)/512
 10937 00038D40 03000000            <1> dd (f14-f13)/512
 10938 00038D44 756E667300          <1> db "unfs",0
 10939 00038D49 E5010000            <1> dd (f14-$$)/512
 10940 00038D4D 02000000            <1> dd (f15-f14)/512
 10941                              <1> enddiskfileindex:
 10942                              <1> 
 10943                                      %include "source/bss.asm"
 10944 00038D51 00<rept>            <1> align 512, db 0
 10945                              <1> bssstart equ $
 10946                              <1> bsscopy equ $
 10947                              <1> initialstack equ bsscopy
 10948                              <1> stackend equ initialstack + 8192
 10949                              <1> sigtable equ stackend + 4
 10950                              <1> fileindex equ sigtable + 4
 10951                              <1> fileindexend equ fileindex + 1024
 10952                              <1> previousstack equ fileindexend
 10953                              <1> lastfolderloc equ previousstack + 4
 10954                              <1> currentfolderloc equ lastfolderloc + 4
 10955                              <1> currentfolder equ currentfolderloc + 4
 10956                              <1> currentfolderend equ currentfolder + 512
 10957                              <1> uid equ currentfolderend
 10958                              <1> ranboot equ uid + 4
 10959                              <1> IFON equ ranboot + 1
 10960                              <1> IFTRUE equ IFON + 1
 10961                              <1> BATCHPOS equ IFTRUE + 100
 10962                              <1> BATCHISON equ BATCHPOS + 4
 10963                              <1> LOOPON equ BATCHISON + 1
 10964                              <1> LOOPPOS	equ LOOPON + 1
 10965                              <1> variables equ LOOPPOS + 4
 10966                              <1> varend equ variables + 4096
 10967                              <1> buftxt2 equ varend
 10968                              <1> buftxt equ buftxt2 + 1024
 10969                              <1> buftxtend equ buftxt + 1024
 10970                              <1> buf2 equ buftxtend
 10971                              <1> numbuf equ buf2 + 20
 10972                              <1> %ifdef io.serial
 10973                              <1> 	lastcommandpos equ numbuf
 10974                              <1> %else
 10975                              <1> 	%ifdef gui.included
 10976                              <1> 		graphicstable equ numbuf ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 10977                              <1> 		graphicstableend equ graphicstable + 512
 10978                              <1> 		%ifdef gui.background
 10979                              <1> 			backgroundbuffer equ graphicstableend
 10980                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 10981                              <1> 			mousecolorbuf equ backgroundbufferend
 10982                              <1> 		%else
 10983                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 10984                              <1> 		%endif
 10985                              <1> 		mcolorend equ mousecolorbuf + 256
 10986                              <1> 		videobuf equ mcolorend	;1680x1050 pixels in characters
 10987                              <1> 		videobufend	equ videobuf + 210*65*4;2
 10988                              <1> 		videobuf2 equ videobufend
 10989                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
 10990                              <1> 	%else
 10991                              <1> 		videobuf equ numbuf
 10992                              <1> 		videobufend equ videobuf + 80*30*4
 10993                              <1> 		videobuf2 equ videobufend
 10994                              <1> 		videobuf2end equ videobuf2 + 80*30*4
 10995                              <1> 	%endif
 10996                              <1> 	lastcommandpos: equ videobuf2end
 10997                              <1> %endif
 10998                              <1> 	commandbufpos: equ lastcommandpos + 4
 10999                              <1> 	commandlistentries: equ commandbufpos + 4
 11000                              <1> 	commandsentered: equ commandlistentries + 4
 11001                              <1> 	commandbuf: equ commandsentered + 4
 11002                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 11003                              <1> %ifdef network.included
 11004                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 11005                              <1> 	rbuffend equ rbuffstart + 8192 + 16 ;extra space used for the WRAP bit in rtl8139
 11006                              <1> 	rbuffoverflow equ rbuffend + 1500
 11007                              <1> %else
 11008                              <1> 	rbuffstart equ commandbufend
 11009                              <1> 	rbuffend equ commandbufend
 11010                              <1> %endif
 11011                              <1> %ifdef threads.included
 11012                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 1024
 11013                              <1> 	threadlistend: equ threadlist + 1024*4
 11014                              <1> 	stacks:	equ threadlistend ;NOT TRUE:i use SS now for proper stack management. This makes sure stacks never screw with other memory
 11015                              <1> 	stack1: equ stacks + 2048  ;woah, thats a lot of space for stacks
 11016                              <1> 	bssend equ stack1 + 1024*2048
 11017                              <1> %else
 11018                              <1> 	bssend equ rbuffend
 11019                              <1> %endif
 11020                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 11021                                      %include "build/files.asm"
 11022                              <1> align 512,db 0
 11023                              <1> f0:
 11024 00038E00 <incbin>            <1> incbin "included/_img.bin"
 11025                              <1> align 512,db 0
 11026                              <1> f1:
 11027 0003A600 <incbin>            <1> incbin "included/boot.sh"
 11028 0003A718 00<rept>            <1> align 512,db 0
 11029                              <1> f2:
 11030 0003A800 <incbin>            <1> incbin "included/dostest.com"
 11031 0003A931 00<rept>            <1> align 512,db 0
 11032                              <1> f3:
 11033 0003AA00 <incbin>            <1> incbin "included/exec"
 11034 0003AAF1 00<rept>            <1> align 512,db 0
 11035                              <1> f4:
 11036 0003AC00 <incbin>            <1> incbin "included/finalcount.sn"
 11037 0003AD02 00<rept>            <1> align 512,db 0
 11038                              <1> f5:
 11039 0003AE00 <incbin>            <1> incbin "included/fork"
 11040 0003AF61 00<rept>            <1> align 512,db 0
 11041                              <1> f6:
 11042 0003B000 <incbin>            <1> incbin "included/guitest"
 11043 0003B43D 00<rept>            <1> align 512,db 0
 11044                              <1> f7:
 11045 0003B600 <incbin>            <1> incbin "included/int"
 11046 0003B7B2 00<rept>            <1> align 512,db 0
 11047                              <1> f8:
 11048 0003B800 <incbin>            <1> incbin "included/lostwoods.sn"
 11049 0003B8AE 00<rept>            <1> align 512,db 0
 11050                              <1> f9:
 11051 0003BA00 <incbin>            <1> incbin "included/mario.sn"
 11052 0003BA3A 00<rept>            <1> align 512,db 0
 11053                              <1> f10:
 11054 0003BC00 <incbin>            <1> incbin "included/songotime.sn"
 11055 0003BC4A 00<rept>            <1> align 512,db 0
 11056                              <1> f11:
 11057 0003BE00 <incbin>            <1> incbin "included/sse"
 11058 0003C0AA 00<rept>            <1> align 512,db 0
 11059                              <1> f12:
 11060 0003C200 <incbin>            <1> incbin "included/tely"
 11061 0003C3C6 00<rept>            <1> align 512,db 0
 11062                              <1> f13:
 11063 0003C400 <incbin>            <1> incbin "included/tutorial.sh"
 11064 0003C952 00<rept>            <1> align 512,db 0
 11065                              <1> f14:
 11066 0003CA00 <incbin>            <1> incbin "included/unfs"
 11067                              <1> align 512,db 0
 11068                              <1> f15:
 11069                                  %endif
