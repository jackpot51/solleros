     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> %define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> %define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> %define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define font.unicode
    29                              <1> ;Include a unicode font. Disable to use an ascii font
    30                              <1> 	
    31                              <1> %define hardware.automatic
    32                              <1> ;Automatically load the sound and network drivers.
    33                              <1> 
    34                              <1> %define threads.included
    35                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    36                              <1> 
    37                              <1> %define exceptions.included
    38                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    39                              <1> 
    40                              <1> ;%define disk.protected
    41                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    42                              <1> 
    43                              <1> %define disk.real
    44                              <1> ;Use real mode for disk access-this gives greater compatibility
    45                              <1> 
    46                              <1> %define sound.included
    47                              <1> ;This includes the sound drivers
    48                              <1> 
    49                              <1> ;%define network.included
    50                              <1> ;This includes the network stack
    51                              <1> 
    52                              <1> ;%define rtl8169.included
    53                              <1> ;This includes the RTL8169 drivers
    54                              <1> 
    55                              <1> ;%define rtl8139.included
    56                              <1> ;This includes the RTL8139 drivers
    57                              <1> 
    58                              <1> ;%define ne2000.included
    59                              <1> ;This includes the ne2000 drivers
    60                              <1> 
    61                              <1> ;%define i8254x.included
    62                              <1> ;This includes the Intel 8254x drivers
    63                              <1> 
    64                              <1> ;%define sector.debug
    65                              <1> ;Dump the contents of the first sector of SollerOS
    66                              <1> 
    67                              <1> ;%define dos.compatible
    68                              <1> ;Make the kernel loadable by dos.
    69                              <1> 
    70                              <1> ;%define system.simple
    71                              <1> ;The smallest possible system, overrides all options
    72                              <1> 
    73                              <1> ;FIX DEPENDANCIES
    74                              <1> %ifdef system.simple
    75                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef dos.compatible
    79                              <1> 	%define UNDEFALL
    80                              <1> %endif
    81                              <1> %ifdef UNDEFALL
    82                              <1> 	%undef io.serial
    83                              <1> 	%undef disk.real
    84                              <1> 	%undef gui.included
    85                              <1> 	%undef gui.alphablending
    86                              <1> 	%undef gui.background
    87                              <1> 	%undef terminal.vsync
    88                              <1> 	%undef font.unicode
    89                              <1> 	%undef hardware.automatic
    90                              <1> 	%undef threads.included
    91                              <1> 	%undef exceptions.included
    92                              <1> 	%undef disk.protected
    93                              <1> 	%undef sound.included
    94                              <1> 	%undef network.included
    95                              <1> 	%undef rtl8139.included
    96                              <1> 	%undef rtl8169.included
    97                              <1> 	%undef ne2000.included
    98                              <1> 	%undef i8254x.included
    99                              <1> 	%undef sector.debug
   100                              <1> 	%undef UNDEFALL
   101                              <1> %endif
   102                              <1> %ifdef system.simple
   103                              <1> 	%define io.serial "1"
   104                              <1> 	%define disk.real
   105                              <1> %endif
   106                              <1> %ifdef gui.included
   107                              <1> 	%undef io.serial
   108                              <1> %else
   109                              <1> 	%undef gui.alphablending
   110                              <1> 	%undef gui.background
   111                              <1> %endif
   112                              <1> %ifdef network.included
   113                              <1> %else
   114                              <1> 	%undef i8254x.included
   115                              <1> 	%undef ne2000.included
   116                              <1> 	%undef rtl8139.included
   117                              <1> 	%undef rtl8169.included
   118                              <1> %endif
   119                              <1> %ifdef disk.protected
   120                              <1> 	%undef disk.real
   121                              <1> %else
   122                              <1> 	%ifdef disk.real
   123                              <1> 	%else
   124                              <1> 		%define disk.none
   125                              <1> 	%endif
   126                              <1> %endif
   127                                  [ORG 0x100]
   128                                  	%include "source/signature.asm"
   129                              <1> header:
   130 00000000 EB12                <1> 	jmp short boot
   131                              <1> signature:
   132 00000002 536F6C6C65724F5320- <1> db "SollerOS ",0 ;Operating system name
   133 0000000B 00                  <1>
   134 0000000C 18010000            <1> dd 280	;version number
   135                              <1> signatureend:
   136 00000010 008A0300                	dd bsscopy - header ;size of kernel data on disk
   137                                  [BITS 16]
   138                                      %include "source/boot.asm"
   139                              <1> boot:
   140 00000014 8CC8                <1> 	mov ax, cs
   141 00000016 8ED8                <1> 	mov ds, ax
   142 00000018 8EC0                <1> 	mov es, ax
   143 0000001A 8ED0                <1> 	mov ss, ax
   144 0000001C 0F31                <1> 	rdtsc
   145 0000001E 66A3[1085]          <1> 	mov [initialtsc], eax
   146 00000022 668916[1485]        <1> 	mov [initialtsc + 4], edx
   147 00000027 66A3[1885]          <1> 	mov [lasttsc], eax
   148 0000002B 668916[1C85]        <1> 	mov [lasttsc + 4], edx
   149 00000030 880E[0B85]          <1> 	mov [DriveNumber], cl
   150 00000034 66891E[0C85]        <1> 	mov [lbaad], ebx
   151                              <1> %ifdef io.serial
   152                              <1> 	call getmemorysize
   153                              <1> 	mov si, serialmsg
   154                              <1> 	call printrm
   155                              <1> 	jmp pmode
   156                              <1> serialmsg: db 10,13,"SollerOS: Using serial port ",io.serial," for I/O.",0
   157                              <1> %else
   158 00000039 E80200              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   159 0000003C EB52                <1> 	jmp pmode
   160                              <1> %endif
   161                              <1> 	
   162                              <1> vgaset:
   163 0000003E B81200              <1> 	mov ax, 12h
   164 00000041 31DB                <1> 	xor bx, bx
   165 00000043 CD10                <1> 	int 10h
   166 00000045 C606[0A85]00        <1> 	mov byte [guion], 0
   167 0000004A E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   168 0000004D C3                  <1> 	ret
   169                              <1> 
   170                              <1> getmemorysize:
   171 0000004E BF[2085]            <1> 	mov di, memlistbuf
   172 00000051 6631DB              <1> 	xor ebx, ebx
   173                              <1> getmemsizeloop:
   174 00000054 66B820E80000        <1> 	mov eax, 0xE820
   175 0000005A 66BA50414D53        <1> 	mov edx, 0x0534D4150
   176 00000060 66B918000000        <1> 	mov ecx, 24
   177 00000066 CD15                <1> 	int 0x15
   178 00000068 83C718              <1> 	add di, 24
   179 0000006B 81FF[6087]          <1> 	cmp di, memlistend
   180 0000006F 7305                <1> 	jae nomoregetmemsize
   181 00000071 6685DB              <1> 	test ebx, ebx
   182 00000074 75DE                <1> 	jnz getmemsizeloop
   183                              <1> nomoregetmemsize:
   184 00000076 81EF[2085]          <1> 	sub di, memlistbuf
   185 0000007A 893E[6087]          <1> 	mov [memlistend], di
   186 0000007E C3                  <1> 	ret
   187                              <1> 	
   188                              <1> printrm:			; 'si' comes in with string address
   189 0000007F BB0700              <1>     mov bx,07		; write to display
   190 00000082 B40E                <1>     mov ah,0Eh		; screen function
   191 00000084 8A04                <1>    .lp:    mov al,[si]         ; get next character
   192 00000086 84C0                <1>     test al,al		; look for terminator 
   193 00000088 7405                <1>     jz .done	; zero byte at end of string
   194 0000008A CD10                <1>     int 10h		; write character to screen.    
   195 0000008C 46                  <1> 	inc si	     	; move to next character
   196 0000008D EBF5                <1>     jmp .lp		; loop
   197 0000008F C3                  <1> .done: ret
   198                                      %include "source/pmode.asm"
   199                              <1> [BITS 16]
   200                              <1> 
   201                              <1> pmode:
   202 00000090 6631C0              <1> 	xor eax, eax
   203 00000093 6631DB              <1> 	xor ebx, ebx
   204 00000096 6631C9              <1> 	xor ecx, ecx
   205 00000099 6631D2              <1> 	xor edx, edx
   206 0000009C 6631F6              <1> 	xor esi, esi
   207 0000009F 6631FF              <1> 	xor edi, edi
   208 000000A2 BA9200              <1> 	mov dx, 0x92
   209 000000A5 EC                  <1> 	in al, dx	;A20
   210 000000A6 0C02                <1> 	or al, 2
   211 000000A8 EE                  <1> 	out dx, al
   212 000000A9 8CCB                <1> 	mov bx,cs		; EBX=segment
   213 000000AB 66C1E304            <1> 	shl ebx,4		;	<< 4
   214 000000AF 6689D8              <1> 	mov eax, ebx		; EAX=linear address of segment base
   215 000000B2 A3[8803]            <1> 	mov [gdt2 + 2],ax
   216 000000B5 A3[9003]            <1> 	mov [gdt3 + 2],ax
   217 000000B8 66C1E810            <1> 	shr eax,16
   218 000000BC A2[8A03]            <1> 	mov [gdt2 + 4],al
   219 000000BF A2[9203]            <1> 	mov [gdt3 + 4],al
   220 000000C2 8826[8D03]          <1> 	mov [gdt2 + 7],ah
   221 000000C6 8826[9503]          <1> 	mov [gdt3 + 7],ah
   222                              <1> 
   223 000000CA 66B8[008A0300]      <1> 	mov eax, initialstack
   224 000000D0 660306[3702]        <1> 	add eax, [newcodecache]
   225 000000D5 A3[8003]            <1> 	mov [gdts + 2],ax
   226 000000D8 66C1E810            <1> 	shr eax, 16
   227 000000DC A2[8203]            <1> 	mov [gdts + 4],al
   228 000000DF 8826[8503]          <1> 	mov [gdts + 7], ah
   229                              <1> 	
   230 000000E3 66A1[3702]          <1> 	mov eax, [newcodecache]
   231 000000E7 A3[9803]            <1> 	mov [gdt4 + 2],ax
   232 000000EA A3[A003]            <1> 	mov [gdt5 + 2],ax
   233 000000ED A3[A803]            <1> 	mov [gdtv8086 + 2], ax
   234 000000F0 A3[B003]            <1> 	mov [gdtv80862 + 2], ax
   235 000000F3 66C1E810            <1> 	shr eax,16
   236 000000F7 A2[9A03]            <1> 	mov [gdt4 + 4],al
   237 000000FA A2[A203]            <1> 	mov [gdt5 + 4],al
   238 000000FD A2[AA03]            <1> 	mov [gdtv8086 + 4],al
   239 00000100 A2[B203]            <1> 	mov [gdtv80862 + 4],al
   240 00000103 8826[9D03]          <1> 	mov [gdt4 + 7],ah
   241 00000107 8826[A503]          <1> 	mov [gdt5 + 7],ah
   242 0000010B 8826[AD03]          <1> 	mov [gdtv8086 + 7],ah
   243 0000010F 8826[B503]          <1> 	mov [gdtv80862 + 7],ah
   244                              <1> 	
   245 00000113 66B800004000        <1> 	mov eax, dosprogloc
   246 00000119 660306[3702]        <1> 	add eax, [newcodecache]
   247 0000011E A3[B803]            <1> 	mov [gdtdos + 2],ax
   248 00000121 A3[C003]            <1> 	mov [gdtdos2 + 2],ax
   249 00000124 66C1E810            <1> 	shr eax,16
   250 00000128 A2[BA03]            <1> 	mov [gdtdos + 4],al
   251 0000012B A2[C203]            <1> 	mov [gdtdos2 + 4],al
   252 0000012E 8826[BD03]          <1> 	mov [gdtdos + 7],ah
   253 00000132 8826[C503]          <1> 	mov [gdtdos2 + 7],ah
   254                              <1> 	
   255                              <1> ; fix up gdt and idt
   256 00000136 67668D83[6E030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   257 0000013E 66A3[6403]          <1> 	mov [gdtr + 2],eax
   258 00000142 67668D83[C6030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   259 0000014A 66A3[6A03]          <1> 	mov [idtr + 2],eax
   260 0000014E FA                  <1> 	cli
   261 0000014F 0F0116[6203]        <1> 	lgdt [gdtr]
   262 00000154 0F011E[6803]        <1> 	lidt [idtr]
   263 00000159 6631DB              <1> 	xor ebx, ebx
   264 0000015C 8CDB                <1> 	mov bx, ds
   265 0000015E 66891E[3302]        <1> 	mov [basecache], ebx
   266 00000163 0F20C0              <1> 	mov eax,cr0
   267 00000166 0C01                <1> 	or al,1
   268 00000168 0F22C0              <1> 	mov cr0,eax
   269 0000016B EA[7001]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   270                              <1> [BITS 32]
   271                              <1> do_pm:
   272 00000170 31C0                <1> 	xor eax, eax
   273 00000172 66B82000            <1> 	mov ax, SYS_DATA_SEL
   274 00000176 8ED8                <1> 	mov ds, ax
   275 00000178 8EC0                <1> 	mov es, ax
   276 0000017A 8EE0                <1> 	mov fs, ax
   277 0000017C 66B83000            <1> 	mov ax, NEW_DATA_SEL
   278 00000180 8EE8                <1> 	mov gs, ax
   279                              <1> 	
   280                              <1> copykernel:
   281 00000182 648B06              <1> 	mov eax, [fs:esi]
   282 00000185 658906              <1> 	mov [gs:esi], eax
   283 00000188 83C604              <1> 	add esi, 4
   284 0000018B 81FE[008A0300]      <1> 	cmp esi, bsscopy
   285 00000191 72EF                <1> 	jb copykernel
   286 00000193 EA[9A010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   287                              <1> 	
   288                              <1> done_copy:
   289 0000019A 66B83000            <1> 	mov ax, NEW_DATA_SEL	;these MUST be setup AFTER the kernel switches places!!!
   290 0000019E 8ED8                <1> 	mov ds, ax
   291 000001A0 8EC0                <1> 	mov es, ax
   292 000001A2 8EE0                <1> 	mov fs, ax
   293                              <1> 	;mov ax, STACK_SEL
   294 000001A4 8ED0                <1> 	mov ss, ax
   295 000001A6 BC[00AA0300]        <1> 	mov esp, stackend
   296 000001AB 66B82000            <1> 	mov ax, SYS_DATA_SEL
   297 000001AF 8EE8                <1> 	mov gs, ax
   298                              <1> 	
   299 000001B1 E8A85F0000          <1> 	call initialize	;initialize drivers
   300                              <1> 	
   301 000001B6 A1[37020000]        <1> 	mov eax, [newcodecache]
   302 000001BB C1E804              <1> 	shr eax, 4
   303 000001BE A3[33020000]        <1> 	mov [basecache], eax
   304                              <1> 	
   305 000001C3 BE[3CB24D00]        <1> 	mov esi, bssend
   306 000001C8 31C0                <1> 	xor eax, eax
   307                              <1> clearkernelbuffers:
   308 000001CA 8906                <1> 	mov [esi], eax
   309 000001CC 83EE04              <1> 	sub esi, 4
   310 000001CF 81FE[008A0300]      <1> 	cmp esi, bsscopy
   311 000001D5 77F3                <1> 	ja clearkernelbuffers
   312 000001D7 FB                  <1> 	sti
   313                              <1> 
   314                              <1> getmemoryspace:
   315 000001D8 BE[20850000]        <1> 	mov esi, memlistbuf
   316 000001DD 31FF                <1> 	xor edi, edi
   317 000001DF 668B3D[60870000]    <1> 	mov di, [memlistend]
   318 000001E6 01F7                <1> 	add edi, esi
   319 000001E8 31C0                <1> 	xor eax, eax
   320                              <1> memoryspaceaddition:
   321 000001EA 39FE                <1> 	cmp esi, edi
   322 000001EC 7316                <1> 	jae finishedmemspacecalc
   323 000001EE 83C608              <1> 	add esi, 8
   324 000001F1 8B0E                <1> 	mov ecx, [esi]
   325 000001F3 83C608              <1> 	add esi, 8
   326 000001F6 8B1E                <1> 	mov ebx, [esi]
   327 000001F8 83C608              <1> 	add esi, 8
   328 000001FB 83FB01              <1> 	cmp ebx, 1
   329 000001FE 75EA                <1> 	jne memoryspaceaddition
   330 00000200 01C8                <1> 	add eax, ecx
   331 00000202 EBE6                <1> 	jmp memoryspaceaddition
   332                              <1> finishedmemspacecalc:
   333 00000204 A3[48020000]        <1> 	mov [memoryspace], eax
   334                              <1> %ifdef gui.included
   335 00000209 803D[0A850000]00    <1> 	cmp byte [guion], 0
   336 00000210 741C                <1> 	je normalstartup
   337 00000212 8B1D[33020000]      <1> 	mov ebx, [basecache]
   338 00000218 C1E304              <1> 	shl ebx, 4
   339 0000021B 8B3D[3D550000]      <1> 	mov edi, [physbaseptr]
   340 00000221 29DF                <1> 	sub edi, ebx
   341 00000223 893D[3D550000]      <1> 	mov [physbaseptr], edi
   342 00000229 E90E650000          <1> 	jmp guiboot
   343                              <1> %endif
   344                              <1> normalstartup:
   345 0000022E E98E280000          <1> 	jmp os
   346                              <1> 	
   347 00000233 00000000            <1> basecache dd 0
   348 00000237 00001000            <1> newcodecache dd 0x100000
   349                              <1> 
   350 0000023B 00                  <1> testingcpuspeed db 0
   351 0000023C 00000000            <1> cpuspeedperint dd 0
   352 00000240 0000000000000000    <1> cpuclocksperint dd 0,0
   353 00000248 00000000            <1> memoryspace dd 0
   354 0000024C 7D0A                <1> pitdiv dw 2685
   355 0000024E 2E562200            <1> timeinterval dd 2250286
   356                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   357                              <1> ;for the pit, note that div=1 gives 838.09ns, the clock runs at 1.193182 MHz
   358                              <1> ;div=451 is 377981.0004, div=902 is 755962.0008,
   359                              <1> ;div=2685 is 2250286.00004ns, div=5370 is 4500572.00007ns
   360                              <1> ;div=55483 is 46500044.000006ns
   361                              <1> ;use one of those values for the minimum error
   362                              <1> 
   363 00000252 00000000            <1> timeseconds dd 0
   364 00000256 00000000            <1> timenanoseconds dd 0
   365 0000025A 00                  <1> soundon db 0
   366 0000025B 0000                <1> soundrepititions dw 0
   367 0000025D 00000000            <1> soundpos dd 0
   368 00000261 00000000            <1> soundendpos dd 0
   369                              <1> 
   370                              <1> cpuspeedend:
   371 00000265 C605[3B020000]00    <1> 	mov byte [testingcpuspeed], 0
   372 0000026C A3[3C020000]        <1> 	mov [cpuspeedperint], eax
   373 00000271 B8[C54E0000]        <1> 	mov eax, cpuspeedloopend
   374 00000276 890424              <1> 	mov [esp], eax
   375 00000279 E9D4000000          <1> 	jmp handled
   376                              <1> 
   377                              <1> pitinterrupt: ;this controls threading
   378 0000027E 803D[3B020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   379 00000285 74DE                <1> 	je cpuspeedend
   380                              <1> 
   381 00000287 E8A0000000          <1> 	call timekeeper ;this updates the internal time
   382                              <1> 	
   383 0000028C 803D[5A020000]01    <1> 	cmp byte [soundon], 1
   384 00000293 0F847C560000        <1> 	je near PCSpeakerRAW
   385                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   386                              <1> %ifdef threads.included
   387 00000299 803D[37670000]01    <1> 	cmp byte [threadson], 1
   388 000002A0 0F843A640000        <1> 	je near threadswitch
   389                              <1> %endif
   390                              <1> 
   391                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   392 000002A6 E9A7000000          <1> 	jmp handled
   393 000002AB 803D[37670000]00    <1> 	cmp byte [threadson], 0
   394 000002B2 0F849A000000        <1> 	je near handled
   395                              <1> %ifdef io.serial
   396                              <1> 	jmp handled
   397                              <1> %else
   398 000002B8 50                  <1> 	push eax
   399 000002B9 E464                <1> 	in al, 0x64
   400 000002BB A820                <1> 	test al, 0x20
   401 000002BD 0F8590000000        <1> 	jnz near handledeax
   402 000002C3 E460                <1> 	in al, 0x60
   403 000002C5 3C01                <1> 	cmp al, 1		;escape
   404 000002C7 7406                <1> 	je userint
   405 000002C9 58                  <1> 	pop eax
   406 000002CA E983000000          <1> 	jmp handled
   407                              <1> userint:
   408 000002CF 31C0                <1> 	xor eax, eax
   409 000002D1 3905[04AA0300]      <1> 	cmp [sigtable], eax
   410 000002D7 7408                <1> 	je .nosighook
   411 000002D9 FF15[04AA0300]      <1> 	call [sigtable]
   412 000002DF EB72                <1> 	jmp handledeax
   413                              <1> .nosighook:
   414                              <1> 		;UNMASK ALL INTS
   415 000002E1 E621                <1> 	out 0x21, al
   416 000002E3 E6A1                <1> 	out 0xA1, al
   417 000002E5 B020                <1> 	mov al, 0x20
   418 000002E7 E6A0                <1> 	out 0xA0, al
   419 000002E9 E620                <1> 	out 0x20, al
   420                              <1> 		;RESET PIT DIVISOR
   421 000002EB 66A1[4C020000]      <1> 	mov ax, [pitdiv]
   422 000002F1 E640                <1> 	out 0x40, al
   423 000002F3 66C1C008            <1> 	rol ax, 8
   424 000002F7 E640                <1> 	out 0x40, al
   425                              <1> 		;RESET PIC
   426 000002F9 B020                <1> 	mov al, 0x20
   427 000002FB E620                <1> 	out 0x20, al
   428 000002FD 58                  <1> 	pop eax
   429 000002FE E9E1090000          <1> 	jmp unhand + 12
   430                              <1> 	;pop ebp
   431                              <1> 	;pop ebp
   432                              <1> 	;popf
   433                              <1> 	;mov esp, stackend ;reset stack
   434                              <1> 	;jmp returnfromexp
   435                              <1> %endif
   436 00000303 0A                  <1> rtcrate db 10
   437                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   438                              <1> %ifdef io.serial
   439                              <1> %else
   440                              <1> %ifdef terminal.vsync
   441 00000304 803D[57280000]00    <1> 	cmp byte [termcopyneeded], 0
   442 0000030B 7405                <1> 	je .nocopy
   443 0000030D E84E250000          <1> 	call newtermcopy
   444                              <1> .nocopy:
   445 00000312 50                  <1> 	push eax
   446 00000313 B00C                <1> 	mov al, 0xC
   447 00000315 E670                <1> 	out 0x70, al
   448 00000317 E471                <1> 	in al, 0x71
   449 00000319 58                  <1> 	pop eax
   450                              <1> %endif
   451                              <1> %endif
   452 0000031A EB3D                <1> 	jmp handledboth
   453                              <1> %ifdef rtl8139.included
   454                              <1> nextpacket dd rbuffstart
   455                              <1> rtl8139.irq:
   456                              <1> 	pusha
   457                              <1> 	mov dx, [rtl8139.basenicaddr]
   458                              <1> 	add dx, rtl8139.ISR
   459                              <1> 	xor eax, eax
   460                              <1> 	in ax, dx
   461                              <1> 	out dx, ax
   462                              <1> 	test ax, 1
   463                              <1> 	jz  near .norec
   464                              <1> 	mov esi, packetrecvmsg
   465                              <1> 	call print
   466                              <1> 	mov esi, [nextpacket]
   467                              <1> 	cmp esi, rbuffend
   468                              <1> 	jb .goodesi
   469                              <1> 	mov esi, rbuffstart
   470                              <1> .goodesi:
   471                              <1> 	mov ecx, esi
   472                              <1> 	sub ecx, rbuffstart
   473                              <1> 	call showhex
   474                              <1> 	mov ecx, [esi]
   475                              <1> 	test ecx, 1
   476                              <1> 	jz .notgood
   477                              <1> 	call showhex
   478                              <1> 	add esi, 4
   479                              <1> 	xor edi, edi
   480                              <1> 	mov di, [esi - 2]
   481                              <1> 	mov ecx, edi
   482                              <1> 	add edi, esi
   483                              <1> 	sub ecx, 4
   484                              <1> 	call showdec
   485                              <1> 
   486                              <1> 	mov ecx, edi
   487                              <1> 	sub ecx, rbuffstart
   488                              <1> 	add ecx, 3
   489                              <1> 	shr ecx, 2
   490                              <1> 	shl ecx, 2
   491                              <1> 	call showhex
   492                              <1> .notgood	
   493                              <1> 	mov  dx, [rtl8139.basenicaddr]
   494                              <1> 	add dx, rtl8139.CBR
   495                              <1> 	xor eax, eax
   496                              <1> 	in ax, dx
   497                              <1> 	mov ecx, eax
   498                              <1> 	call showhex
   499                              <1> 	
   500                              <1> 	mov dx, [rtl8139.basenicaddr]
   501                              <1> 	add dx, rtl8139.CAPR
   502                              <1> 	out dx, ax
   503                              <1> 	
   504                              <1> 	add eax, rbuffstart
   505                              <1> 	mov [nextpacket], eax
   506                              <1> 	
   507                              <1> ;	int3
   508                              <1> ;.lp:
   509                              <1> ;	mov cl, [esi]
   510                              <1> ;	call showhexsmall
   511                              <1> ;	inc esi
   512                              <1> ;	cmp esi, [nextpacket]
   513                              <1> ;	jb .lp
   514                              <1> ;	mov ecx, [esi]
   515                              <1> ;	call showhex
   516                              <1> ;	call printline
   517                              <1> .norec:
   518                              <1> 	popa
   519                              <1> 	jmp handledboth
   520                              <1> packetrecvmsg db 10,"Packet: ",0
   521                              <1> %endif
   522                              <1> %ifdef sound.included
   523                              <1> sblaster.irq:
   524 0000031C 60                  <1> 	pusha
   525 0000031D 803D[F05B0000]01    <1> 	cmp byte [SoundBlaster], 1
   526 00000324 0F84CC560000        <1> 	je near sblaster.cont
   527 0000032A EB25                <1> 	jmp handled2
   528                              <1> %endif
   529                              <1> 	
   530                              <1> timekeeper:
   531 0000032C 50                  <1> 	push eax
   532 0000032D A1[56020000]        <1> 	mov eax, [timenanoseconds]
   533 00000332 0305[4E020000]      <1> 	add eax, [timeinterval]
   534 00000338 3D00CA9A3B          <1> 	cmp eax, 1000000000
   535 0000033D 720B                <1> 	jb nonanosecondrollover
   536 0000033F FF05[52020000]      <1> 	inc dword [timeseconds]
   537 00000345 2D00CA9A3B          <1> 	sub eax, 1000000000
   538                              <1> 	%ifdef gui.time
   539                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   540                              <1> 		cmp byte [guion], 1
   541                              <1> 		jne nonanosecondrollover
   542                              <1> 		cmp dword [dragging], 0
   543                              <1> 		jne nonanosecondrollover
   544                              <1> 		pusha
   545                              <1> 		call guitime
   546                              <1> 		popa
   547                              <1> 	%endif
   548                              <1> nonanosecondrollover:
   549 0000034A A3[56020000]        <1> 	mov [timenanoseconds], eax
   550 0000034F 58                  <1> 	pop eax
   551 00000350 C3                  <1> 	ret
   552                              <1> 	
   553                              <1> handled2:
   554 00000351 61                  <1> 	popa
   555                              <1> handled:
   556 00000352 50                  <1> 	push eax
   557                              <1> handledeax:
   558 00000353 B020                <1> 	mov al, 0x20
   559 00000355 E620                <1> 	out 0x20, al
   560 00000357 58                  <1> 	pop eax
   561 00000358 CF                  <1> 	iret
   562                              <1> handledboth:
   563 00000359 50                  <1> 	push eax
   564 0000035A B020                <1> 	mov al, 0x20
   565 0000035C E6A0                <1> 	out 0xA0, al
   566 0000035E E620                <1> 	out 0x20, al
   567 00000360 58                  <1> 	pop eax
   568 00000361 CF                  <1> 	iret
   569                              <1> 
   570                              <1> 	
   571                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   572 00000362 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   573 00000364 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   574                              <1> 
   575 00000368 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   576 0000036A 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   577                              <1> 
   578                              <1> 
   579 0000036E 0000                <1> gdt:	dw 0			; limit 15:0
   580 00000370 0000                <1> 	dw 0			; base 15:0
   581 00000372 00                  <1> 	db 0			; base 23:16
   582 00000373 00                  <1> 	db 0			; type
   583 00000374 00                  <1> 	db 0			; limit 19:16, flags
   584 00000375 00                  <1> 	db 0			; base 31:24
   585                              <1> ; linear data segment descriptor
   586                              <1> LINEAR_SEL	equ	$-gdt
   587 00000376 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   588 00000378 0000                <1> 	dw 0			; base for this one is always 0
   589 0000037A 00                  <1> 	db 0
   590 0000037B 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   591 0000037C CF                  <1> 	db 0xCF			; page-granular, 32-bit
   592 0000037D 00                  <1> 	db 0
   593                              <1> STACK_SEL	equ $-gdt
   594 0000037E 0200                <1> gdts:	dw 2;(stackend)/4096
   595 00000380 0000                <1> 	dw 0
   596 00000382 00                  <1> 	db 0
   597 00000383 92                  <1> 	db 0x92
   598 00000384 CF                  <1> 	db 0xCF
   599 00000385 00                  <1> 	db 0
   600                              <1> ; code segment descriptor
   601                              <1> SYS_CODE_SEL	equ	$-gdt
   602 00000386 FFFF                <1> gdt2:	dw 0xFFFF
   603 00000388 0000                <1> 	dw 0			; (base gets set above)
   604 0000038A 00                  <1> 	db 0
   605 0000038B 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   606 0000038C CF                  <1> 	db 0xCF
   607 0000038D 00                  <1> 	db 0
   608                              <1> ; data segment descriptor
   609                              <1> SYS_DATA_SEL	equ	$-gdt
   610 0000038E FFFF                <1> gdt3:	dw 0xFFFF
   611 00000390 0000                <1> 	dw 0			; (base gets set above)
   612 00000392 00                  <1> 	db 0
   613 00000393 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   614 00000394 CF                  <1> 	db 0xCF
   615 00000395 00                  <1> 	db 0
   616                              <1> NEW_CODE_SEL	equ	$-gdt
   617 00000396 FFFF                <1> gdt4:	dw 0xFFFF
   618 00000398 0000                <1> 	dw 0			; (base gets set above)
   619 0000039A 00                  <1> 	db 0
   620 0000039B 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   621 0000039C CF                  <1> 	db 0xCF
   622 0000039D 00                  <1> 	db 0
   623                              <1> ; data segment descriptor
   624                              <1> NEW_DATA_SEL	equ	$-gdt
   625 0000039E FFFF                <1> gdt5:	dw 0xFFFF
   626 000003A0 0000                <1> 	dw 0			; (base gets set above)
   627 000003A2 00                  <1> 	db 0
   628 000003A3 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   629 000003A4 CF                  <1> 	db 0xCF
   630 000003A5 00                  <1> 	db 0
   631                              <1> V8086_CODE_SEL	equ $-gdt
   632 000003A6 FFFF                <1> gdtv8086: dw 0xFFFF
   633 000003A8 0000                <1> 	dw 0
   634 000003AA 00                  <1> 	db 0
   635 000003AB 9A                  <1> 	db 0x9A
   636 000003AC 8F                  <1> 	db 0x8F
   637 000003AD 00                  <1> 	db 0
   638                              <1> V8086_DATA_SEL	equ $-gdt
   639 000003AE FFFF                <1> gdtv80862: dw 0xFFFF
   640 000003B0 0000                <1> 	dw 0
   641 000003B2 00                  <1> 	db 0
   642 000003B3 92                  <1> 	db 0x92
   643 000003B4 8F                  <1> 	db 0x8F
   644 000003B5 00                  <1> 	db 0
   645                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   646 000003B6 0001                <1> gdtdos:	dw 256	;give it 1 MB
   647 000003B8 0000                <1> 	dw 0
   648 000003BA 00                  <1> 	db 0
   649 000003BB 9A                  <1> 	db 0x9A
   650 000003BC 8F                  <1> 	db 0x8F ;16 bit
   651 000003BD 00                  <1> 	db 0
   652                              <1> DOS_DATA_SEL 	equ $-gdt
   653 000003BE 0001                <1> gdtdos2:	dw 256
   654 000003C0 0000                <1> 	dw 0
   655 000003C2 00                  <1> 	db 0
   656 000003C3 92                  <1> 	db 0x92
   657 000003C4 8F                  <1> 	db 0x8F ;16 bit
   658 000003C5 00                  <1> 	db 0
   659                              <1> gdt_end:
   660                              <1> 
   661                              <1> ;	interrupt descriptor table (IDT)
   662                              <1> ; 32 reserved interrupts:
   663                              <1> idt:	
   664                              <1> %assign i 0
   665                              <1> %rep    8
   666                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   667                              <1> %assign i i+1
   668                              <1> %endrep
   669 000003C6 [D80C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   670                              <2> %assign i i+1
   671 000003CE [E40C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   672                              <2> %assign i i+1
   673 000003D6 [F00C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   674                              <2> %assign i i+1
   675 000003DE [FC0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   676                              <2> %assign i i+1
   677 000003E6 [080D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   678                              <2> %assign i i+1
   679 000003EE [140D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   680                              <2> %assign i i+1
   681 000003F6 [200D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   682                              <2> %assign i i+1
   683 000003FE [2C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   684                              <2> %assign i i+1
   685 00000406 [380D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   686                              <1> %assign i 9
   687                              <1> %rep    23
   688                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   689                              <1> %assign i i+1
   690                              <1> %endrep
   691 0000040E [440D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   692                              <2> %assign i i+1
   693 00000416 [500D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   694                              <2> %assign i i+1
   695 0000041E [5C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   696                              <2> %assign i i+1
   697 00000426 [680D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   698                              <2> %assign i i+1
   699 0000042E [740D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   700                              <2> %assign i i+1
   701 00000436 [800D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   702                              <2> %assign i i+1
   703 0000043E [8C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   704                              <2> %assign i i+1
   705 00000446 [980D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   706                              <2> %assign i i+1
   707 0000044E [A40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   708                              <2> %assign i i+1
   709 00000456 [B00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   710                              <2> %assign i i+1
   711 0000045E [BC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   712                              <2> %assign i i+1
   713 00000466 [C80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   714                              <2> %assign i i+1
   715 0000046E [D40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i i+1
   717 00000476 [E00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i i+1
   719 0000047E [EC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i i+1
   721 00000486 [F80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i i+1
   723 0000048E [040E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i i+1
   725 00000496 [100E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i i+1
   727 0000049E [1C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i i+1
   729 000004A6 [280E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i i+1
   731 000004AE [340E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i i+1
   733 000004B6 [400E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i i+1
   735 000004BE [4C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i i+1
   737 000004C6 [8629]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0 ;dos ints
   738 000004CE [8A29]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   739                              <1> %assign i 0x22
   740                              <1> %rep 14
   741                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   742                              <1> %assign i +1
   743                              <1> %endrep
   744 000004D6 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   745                              <2> %assign i +1
   746 000004DE [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   747                              <2> %assign i +1
   748 000004E6 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   749                              <2> %assign i +1
   750 000004EE [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   751                              <2> %assign i +1
   752 000004F6 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   753                              <2> %assign i +1
   754 000004FE [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   755                              <2> %assign i +1
   756 00000506 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   757                              <2> %assign i +1
   758 0000050E [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   759                              <2> %assign i +1
   760 00000516 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   761                              <2> %assign i +1
   762 0000051E [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   763                              <2> %assign i +1
   764 00000526 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   765                              <2> %assign i +1
   766 0000052E [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   767                              <2> %assign i +1
   768 00000536 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 0000053E [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772                              <1> ;INT 30h for os use and 3rd party use:
   773 00000546 [BA1B]2800008E0000  <1> 		dw int30h,NEW_CODE_SEL,0x8E00,0
   774                              <1> %assign i 0x31
   775                              <1> %rep 15
   776                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   777                              <1> %assign i +1
   778                              <1> %endrep
   779 0000054E [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   780                              <2> %assign i +1
   781 00000556 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   782                              <2> %assign i +1
   783 0000055E [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   784                              <2> %assign i +1
   785 00000566 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   786                              <2> %assign i +1
   787 0000056E [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   788                              <2> %assign i +1
   789 00000576 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   790                              <2> %assign i +1
   791 0000057E [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   792                              <2> %assign i +1
   793 00000586 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   794                              <2> %assign i +1
   795 0000058E [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   796                              <2> %assign i +1
   797 00000596 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   798                              <2> %assign i +1
   799 0000059E [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   800                              <2> %assign i +1
   801 000005A6 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   802                              <2> %assign i +1
   803 000005AE [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   804                              <2> %assign i +1
   805 000005B6 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   806                              <2> %assign i +1
   807 000005BE [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   808                              <2> %assign i +1
   809                              <1> ;and here we are at 0x40
   810                              <1> ;here are all the irq's
   811 000005C6 [7E02]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   812 000005CE [A602]2800008E0000  <1> 		dw keyinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   813 000005D6 [5203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   814 000005DE [5203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   815 000005E6 [5203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   816                              <1> 	%ifdef sound.included
   817 000005EE [1C03]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   818                              <1> 	%else
   819                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   820                              <1> 	%endif
   821 000005F6 [5203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   822 000005FE [5203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   823 00000606 [0403]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   824 0000060E [5903]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   825 00000616 [5903]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   826                              <1> 	%ifdef rtl8139.included
   827                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   828                              <1> 	%else
   829 0000061E [5903]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   830                              <1> 	%endif
   831 00000626 [5903]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   832 0000062E [5903]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   833 00000636 [5903]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   834 0000063E [5903]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   835                              <1> ;This brings me up to 0x50
   836                              <1> %assign i 0x50
   837                              <1> %rep 176
   838                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   839                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   840                              <1> %assign i +1
   841                              <1> %endrep
   842 00000646 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   843                              <2> 
   844                              <2> %assign i +1
   845 0000064E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   846                              <2> 
   847                              <2> %assign i +1
   848 00000656 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   849                              <2> 
   850                              <2> %assign i +1
   851 0000065E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   852                              <2> 
   853                              <2> %assign i +1
   854 00000666 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   855                              <2> 
   856                              <2> %assign i +1
   857 0000066E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   858                              <2> 
   859                              <2> %assign i +1
   860 00000676 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   861                              <2> 
   862                              <2> %assign i +1
   863 0000067E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   864                              <2> 
   865                              <2> %assign i +1
   866 00000686 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 0000068E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 00000696 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 0000069E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 000006A6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 000006AE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 000006B6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 000006BE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 000006C6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 000006CE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 000006D6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 000006DE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 000006E6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 000006EE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 000006F6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 000006FE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 00000706 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 0000070E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 00000716 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 0000071E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 00000726 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 0000072E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 00000736 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 0000073E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 00000746 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 0000074E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 00000756 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 0000075E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 00000766 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 0000076E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 00000776 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 0000077E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 00000786 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 0000078E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 00000796 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 0000079E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 000007A6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 000007AE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 000007B6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 000007BE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 000007C6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 000007CE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 000007D6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 000007DE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 000007E6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 000007EE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 000007F6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 000007FE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 00000806 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 0000080E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 00000816 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 0000081E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 00000826 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 0000082E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000836 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 0000083E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 00000846 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 0000084E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 00000856 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 0000085E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 00000866 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 0000086E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 00000876 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 0000087E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 00000886 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 0000088E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 00000896 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 0000089E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 000008A6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 000008AE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 000008B6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 000008BE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 000008C6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 000008CE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 000008D6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 000008DE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 000008E6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 000008EE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 000008F6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 000008FE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 00000906 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 0000090E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000916 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 0000091E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 00000926 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 0000092E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000936 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 0000093E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 00000946 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 0000094E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 00000956 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 0000095E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 00000966 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 0000096E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 00000976 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 0000097E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 00000986 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 0000098E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 00000996 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 0000099E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 000009A6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 000009AE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 000009B6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 000009BE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 000009C6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 000009CE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 000009D6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 000009DE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 000009E6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 000009EE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 000009F6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 000009FE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 00000A06 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 00000A0E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000A16 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000A1E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000A26 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000A2E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000A36 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000A3E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000A46 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000A4E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000A56 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000A5E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000A66 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000A6E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000A76 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000A7E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000A86 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000A8E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000A96 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000A9E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000AA6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000AAE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000AB6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000ABE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000AC6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000ACE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000AD6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000ADE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286 00000AE6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1287                              <2> 
  1288                              <2> %assign i +1
  1289 00000AEE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1290                              <2> 
  1291                              <2> %assign i +1
  1292 00000AF6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1293                              <2> 
  1294                              <2> %assign i +1
  1295 00000AFE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1296                              <2> 
  1297                              <2> %assign i +1
  1298 00000B06 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1299                              <2> 
  1300                              <2> %assign i +1
  1301 00000B0E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1302                              <2> 
  1303                              <2> %assign i +1
  1304 00000B16 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1305                              <2> 
  1306                              <2> %assign i +1
  1307 00000B1E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1308                              <2> 
  1309                              <2> %assign i +1
  1310 00000B26 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1311                              <2> 
  1312                              <2> %assign i +1
  1313 00000B2E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1314                              <2> 
  1315                              <2> %assign i +1
  1316 00000B36 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1317                              <2> 
  1318                              <2> %assign i +1
  1319 00000B3E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1320                              <2> 
  1321                              <2> %assign i +1
  1322 00000B46 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1323                              <2> 
  1324                              <2> %assign i +1
  1325 00000B4E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1326                              <2> 
  1327                              <2> %assign i +1
  1328 00000B56 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1329                              <2> 
  1330                              <2> %assign i +1
  1331 00000B5E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1332                              <2> 
  1333                              <2> %assign i +1
  1334 00000B66 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1335                              <2> 
  1336                              <2> %assign i +1
  1337 00000B6E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1338                              <2> 
  1339                              <2> %assign i +1
  1340 00000B76 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1341                              <2> 
  1342                              <2> %assign i +1
  1343 00000B7E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1344                              <2> 
  1345                              <2> %assign i +1
  1346 00000B86 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1347                              <2> 
  1348                              <2> %assign i +1
  1349 00000B8E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1350                              <2> 
  1351                              <2> %assign i +1
  1352 00000B96 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1353                              <2> 
  1354                              <2> %assign i +1
  1355 00000B9E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1356                              <2> 
  1357                              <2> %assign i +1
  1358 00000BA6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1359                              <2> 
  1360                              <2> %assign i +1
  1361 00000BAE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1362                              <2> 
  1363                              <2> %assign i +1
  1364 00000BB6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1365                              <2> 
  1366                              <2> %assign i +1
  1367 00000BBE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1368                              <2> 
  1369                              <2> %assign i +1
  1370                              <1> idt_end:
  1371                                  	%include "source/realmode.asm"
  1372                              <1> realmode:	;make sure the real mode program's address is in realmodeptr
  1373                              <1> 
  1374 00000BC6 FA                  <1> 	cli
  1375 00000BC7 A3[CE0C0000]        <1> 	mov [realmodeeax], eax
  1376 00000BCC 891D[CA0C0000]      <1> 	mov [realmodeebx], ebx
  1377 00000BD2 8925[BC0C0000]      <1> 	mov [pmodeesp], esp
  1378                              <1> 
  1379 00000BD8 BB[C60C0000]        <1> 	mov ebx, cr0old
  1380                              <1> rmcopytofirstmbyte:
  1381 00000BDD 8B03                <1> 	mov eax, [ebx]
  1382 00000BDF 658903              <1> 	mov [gs:ebx], eax
  1383 00000BE2 83C304              <1> 	add ebx, 4
  1384 00000BE5 81FB[D20C0000]      <1> 	cmp ebx, realmodeptr
  1385 00000BEB 76F0                <1> 	jbe rmcopytofirstmbyte
  1386                              <1> 
  1387 00000BED EA[F40B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1388                              <1> 
  1389                              <1> [BITS 16]
  1390                              <1> protected16bit:
  1391 00000BF4 B84000              <1> 	mov ax, V8086_DATA_SEL
  1392 00000BF7 8ED8                <1> 	mov ds, ax
  1393 00000BF9 8EC0                <1> 	mov es, ax
  1394 00000BFB 8EE0                <1> 	mov fs, ax
  1395 00000BFD 8EE8                <1> 	mov gs, ax
  1396 00000BFF 8ED0                <1> 	mov ss, ax
  1397 00000C01 66BC[00AA0300]      <1> 	mov esp, stackend
  1398 00000C07 0F20C0              <1> 	mov eax, cr0
  1399 00000C0A 66A3[C60C]          <1> 	mov [cr0old], eax
  1400 00000C0E 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1401 00000C14 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1402 00000C17 EA[1C0C]0010        <1> 	jmp 0x1000:inrealmode
  1403                              <1> 
  1404                              <1> inrealmode:
  1405 00000C1C 8CC8                <1> 	mov ax, cs
  1406 00000C1E 8ED8                <1> 	mov ds, ax
  1407 00000C20 8EC0                <1> 	mov es, ax
  1408 00000C22 8EE0                <1> 	mov fs, ax
  1409 00000C24 8EE8                <1> 	mov gs, ax
  1410 00000C26 8ED0                <1> 	mov ss, ax
  1411 00000C28 BC[00AA]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1412                              <1> 	
  1413 00000C2B B011                <1> 	mov al, 0x11
  1414 00000C2D E620                <1> 	out 0x20, al
  1415 00000C2F E6A0                <1> 	out 0xA0, al
  1416 00000C31 B008                <1> 	mov al, 0x8		;interrupt for master
  1417 00000C33 E621                <1> 	out 0x21, al
  1418 00000C35 B070                <1> 	mov al, 0x70	;interrupt for slave
  1419 00000C37 E6A1                <1> 	out 0xA1, al
  1420 00000C39 B004                <1> 	mov al, 4
  1421 00000C3B E621                <1> 	out 0x21, al
  1422 00000C3D B002                <1> 	mov al, 2
  1423 00000C3F E6A1                <1> 	out 0xA1, al
  1424 00000C41 B001                <1> 	mov al, 0x1
  1425 00000C43 E621                <1> 	out 0x21, al
  1426 00000C45 B001                <1> 	mov al, 0x1
  1427 00000C47 E6A1                <1> 	out 0xA1, al
  1428                              <1> 	
  1429 00000C49 0F011E[C00C]        <1> 	lidt [idt_real]
  1430 00000C4E FB                  <1> 	sti
  1431                              <1> 
  1432 00000C4F 66A1[CE0C]          <1> 	mov eax, [realmodeeax]
  1433 00000C53 668B1E[CA0C]        <1> 	mov ebx, [realmodeebx]
  1434                              <1> 
  1435 00000C58 FF16[D20C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1436                              <1> 
  1437 00000C5C 66A3[CE0C]          <1> 	mov [realmodeeax], eax
  1438 00000C60 66891E[CA0C]        <1> 	mov [realmodeebx], ebx
  1439                              <1> 
  1440 00000C65 FA                  <1> 	cli
  1441 00000C66 0F0116[6203]        <1> 	lgdt [gdtr]
  1442 00000C6B 0F011E[6803]        <1> 	lidt [idtr]
  1443 00000C70 0F20C0              <1> 	mov eax, cr0
  1444 00000C73 0C01                <1> 	or al, 1
  1445 00000C75 0F22C0              <1> 	mov cr0,eax
  1446 00000C78 EA[7D0C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1447                              <1> 
  1448                              <1> [BITS 32]
  1449                              <1> returntopmode:
  1450 00000C7D 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1451 00000C81 8ED8                <1> 	mov ds, ax
  1452 00000C83 8EC0                <1> 	mov es, ax
  1453 00000C85 8EE0                <1> 	mov fs, ax
  1454 00000C87 8ED0                <1> 	mov ss, ax
  1455 00000C89 8B25[BC0C0000]      <1> 	mov esp, [pmodeesp]
  1456 00000C8F 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1457 00000C93 8EE8                <1> 	mov gs, ax
  1458                              <1> 
  1459 00000C95 BB[C60C0000]        <1> 	mov ebx, cr0old
  1460                              <1> rmcopyfromfirstmbyte:
  1461 00000C9A 658B03              <1> 	mov eax, [gs:ebx]
  1462 00000C9D 8903                <1> 	mov [ebx], eax
  1463 00000C9F 83C304              <1> 	add ebx, 4
  1464 00000CA2 81FB[D20C0000]      <1> 	cmp ebx, realmodeptr
  1465 00000CA8 76F0                <1> 	jbe rmcopyfromfirstmbyte
  1466                              <1> 
  1467 00000CAA E8F2540000          <1> 	call initialize.pic ;reset irq's and masks
  1468 00000CAF FB                  <1> 	sti
  1469 00000CB0 A1[CE0C0000]        <1> 	mov eax, [realmodeeax]
  1470 00000CB5 8B1D[CA0C0000]      <1> 	mov ebx, [realmodeebx]
  1471 00000CBB C3                  <1> 	ret
  1472                              <1> 	
  1473 00000CBC 00000000            <1> pmodeesp dd 0
  1474                              <1> idt_real:
  1475 00000CC0 FF03                <1> 	dw 0x3FF
  1476 00000CC2 00000000            <1> 	dd 0
  1477 00000CC6 00000000            <1> cr0old dd 0
  1478 00000CCA 00000000            <1> realmodeebx dd 0
  1479 00000CCE 00000000            <1> realmodeeax dd 0
  1480 00000CD2 0000                <1> realmodeptr dw 0
  1481 00000CD4 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1482                                  [BITS 32]
  1483                                      %include "source/exception.asm"
  1484                              <1> %ifdef exceptions.included
  1485                              <1> unhand:	
  1486                              <1> 	%assign i 0
  1487                              <1> 	%rep 32
  1488                              <1> 	mov byte [intprob], i
  1489                              <1> 	jmp unhand2
  1490                              <1> 	%assign i i+1
  1491                              <1> 	%endrep
  1492 00000CD8 C605[73110000]00    <2>  mov byte [intprob], i
  1493 00000CDF E947010000          <2>  jmp unhand2
  1494                              <2>  %assign i i+1
  1495 00000CE4 C605[73110000]01    <2>  mov byte [intprob], i
  1496 00000CEB E93B010000          <2>  jmp unhand2
  1497                              <2>  %assign i i+1
  1498 00000CF0 C605[73110000]02    <2>  mov byte [intprob], i
  1499 00000CF7 E92F010000          <2>  jmp unhand2
  1500                              <2>  %assign i i+1
  1501 00000CFC C605[73110000]03    <2>  mov byte [intprob], i
  1502 00000D03 E923010000          <2>  jmp unhand2
  1503                              <2>  %assign i i+1
  1504 00000D08 C605[73110000]04    <2>  mov byte [intprob], i
  1505 00000D0F E917010000          <2>  jmp unhand2
  1506                              <2>  %assign i i+1
  1507 00000D14 C605[73110000]05    <2>  mov byte [intprob], i
  1508 00000D1B E90B010000          <2>  jmp unhand2
  1509                              <2>  %assign i i+1
  1510 00000D20 C605[73110000]06    <2>  mov byte [intprob], i
  1511 00000D27 E9FF000000          <2>  jmp unhand2
  1512                              <2>  %assign i i+1
  1513 00000D2C C605[73110000]07    <2>  mov byte [intprob], i
  1514 00000D33 E9F3000000          <2>  jmp unhand2
  1515                              <2>  %assign i i+1
  1516 00000D38 C605[73110000]08    <2>  mov byte [intprob], i
  1517 00000D3F E9E7000000          <2>  jmp unhand2
  1518                              <2>  %assign i i+1
  1519 00000D44 C605[73110000]09    <2>  mov byte [intprob], i
  1520 00000D4B E9DB000000          <2>  jmp unhand2
  1521                              <2>  %assign i i+1
  1522 00000D50 C605[73110000]0A    <2>  mov byte [intprob], i
  1523 00000D57 E9CF000000          <2>  jmp unhand2
  1524                              <2>  %assign i i+1
  1525 00000D5C C605[73110000]0B    <2>  mov byte [intprob], i
  1526 00000D63 E9C3000000          <2>  jmp unhand2
  1527                              <2>  %assign i i+1
  1528 00000D68 C605[73110000]0C    <2>  mov byte [intprob], i
  1529 00000D6F E9B7000000          <2>  jmp unhand2
  1530                              <2>  %assign i i+1
  1531 00000D74 C605[73110000]0D    <2>  mov byte [intprob], i
  1532 00000D7B E9AB000000          <2>  jmp unhand2
  1533                              <2>  %assign i i+1
  1534 00000D80 C605[73110000]0E    <2>  mov byte [intprob], i
  1535 00000D87 E99F000000          <2>  jmp unhand2
  1536                              <2>  %assign i i+1
  1537 00000D8C C605[73110000]0F    <2>  mov byte [intprob], i
  1538 00000D93 E993000000          <2>  jmp unhand2
  1539                              <2>  %assign i i+1
  1540 00000D98 C605[73110000]10    <2>  mov byte [intprob], i
  1541 00000D9F E987000000          <2>  jmp unhand2
  1542                              <2>  %assign i i+1
  1543 00000DA4 C605[73110000]11    <2>  mov byte [intprob], i
  1544 00000DAB EB7E                <2>  jmp unhand2
  1545                              <2>  %assign i i+1
  1546 00000DAD C605[73110000]12    <2>  mov byte [intprob], i
  1547 00000DB4 EB75                <2>  jmp unhand2
  1548                              <2>  %assign i i+1
  1549 00000DB6 C605[73110000]13    <2>  mov byte [intprob], i
  1550 00000DBD EB6C                <2>  jmp unhand2
  1551                              <2>  %assign i i+1
  1552 00000DBF C605[73110000]14    <2>  mov byte [intprob], i
  1553 00000DC6 EB63                <2>  jmp unhand2
  1554                              <2>  %assign i i+1
  1555 00000DC8 C605[73110000]15    <2>  mov byte [intprob], i
  1556 00000DCF EB5A                <2>  jmp unhand2
  1557                              <2>  %assign i i+1
  1558 00000DD1 C605[73110000]16    <2>  mov byte [intprob], i
  1559 00000DD8 EB51                <2>  jmp unhand2
  1560                              <2>  %assign i i+1
  1561 00000DDA C605[73110000]17    <2>  mov byte [intprob], i
  1562 00000DE1 EB48                <2>  jmp unhand2
  1563                              <2>  %assign i i+1
  1564 00000DE3 C605[73110000]18    <2>  mov byte [intprob], i
  1565 00000DEA EB3F                <2>  jmp unhand2
  1566                              <2>  %assign i i+1
  1567 00000DEC C605[73110000]19    <2>  mov byte [intprob], i
  1568 00000DF3 EB36                <2>  jmp unhand2
  1569                              <2>  %assign i i+1
  1570 00000DF5 C605[73110000]1A    <2>  mov byte [intprob], i
  1571 00000DFC EB2D                <2>  jmp unhand2
  1572                              <2>  %assign i i+1
  1573 00000DFE C605[73110000]1B    <2>  mov byte [intprob], i
  1574 00000E05 EB24                <2>  jmp unhand2
  1575                              <2>  %assign i i+1
  1576 00000E07 C605[73110000]1C    <2>  mov byte [intprob], i
  1577 00000E0E EB1B                <2>  jmp unhand2
  1578                              <2>  %assign i i+1
  1579 00000E10 C605[73110000]1D    <2>  mov byte [intprob], i
  1580 00000E17 EB12                <2>  jmp unhand2
  1581                              <2>  %assign i i+1
  1582 00000E19 C605[73110000]1E    <2>  mov byte [intprob], i
  1583 00000E20 EB09                <2>  jmp unhand2
  1584                              <2>  %assign i i+1
  1585 00000E22 C605[73110000]1F    <2>  mov byte [intprob], i
  1586 00000E29 EB00                <2>  jmp unhand2
  1587                              <2>  %assign i i+1
  1588                              <1> unhand2:
  1589 00000E2B FA                  <1> 	cli
  1590 00000E2C 1E                  <1> 	push ds
  1591 00000E2D 06                  <1> 	push es
  1592 00000E2E 0FA0                <1> 	push fs
  1593 00000E30 0FA8                <1> 	push gs
  1594 00000E32 16                  <1> 	push ss
  1595 00000E33 60                  <1> 	pushad
  1596                              <1> %ifdef gui.included
  1597 00000E34 803D[0A850000]00    <1> 	cmp byte [guion], 0
  1598 00000E3B 0F8432000000        <1> 	je near noguiunhandstuff
  1599 00000E41 66C705[6D110000]08- <1> 	mov word [locunhandy], 8
  1600 00000E49 00                  <1>
  1601 00000E4A 66C705[6F110000]08- <1> 	mov word [locunhandx], 8
  1602 00000E52 00                  <1>
  1603 00000E53 668B1D[066E0000]    <1> 	mov bx, [background]
  1604 00000E5A 66891D[71110000]    <1> 	mov [backgroundcache], bx
  1605 00000E61 C605[19560000]01    <1> 	mov byte [mousedisabled],1
  1606 00000E68 66BB00F8            <1> 	mov bx, 1111100000000000b
  1607 00000E6C 66891D[066E0000]    <1> 	mov [background], bx
  1608                              <1> noguiunhandstuff:
  1609                              <1> %endif
  1610 00000E73 89E6                <1> 	mov esi, esp
  1611 00000E75 8935[61110000]      <1> 	mov [espfirst], esi
  1612 00000E7B 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1613 00000E81 8935[5D110000]      <1> 	mov [esploc], esi
  1614 00000E87 BE[82110000]        <1> 	mov esi, unhandmsg
  1615 00000E8C 8935[65110000]      <1> 	mov [esiloc], esi
  1616 00000E92 31C9                <1> 	xor ecx, ecx
  1617 00000E94 8A0D[73110000]      <1> 	mov cl, [intprob]
  1618 00000E9A BB[51150000]        <1> 	mov ebx, errortypes
  1619 00000E9F C1E102              <1> 	shl ecx, 2
  1620 00000EA2 01CB                <1> 	add ebx, ecx
  1621 00000EA4 81FB[91150000]      <1> 	cmp ebx, errortypesend
  1622 00000EAA 7205                <1> 	jb gooderrortype
  1623 00000EAC BB[91150000]        <1> 	mov ebx, errortypesend
  1624                              <1> gooderrortype:
  1625 00000EB1 8B33                <1> 	mov esi, [ebx]
  1626                              <1> %ifdef gui.included
  1627 00000EB3 803D[0A850000]00    <1> 	cmp byte [guion], 0
  1628 00000EBA 0F842A000000        <1> 	je near errortext
  1629 00000EC0 668B0D[6D110000]    <1> 	mov cx, [locunhandy]
  1630 00000EC7 668B15[6F110000]    <1> 	mov dx, [locunhandx]
  1631 00000ECE 66B80100            <1> 	mov ax, 1
  1632 00000ED2 6631DB              <1> 	xor bx, bx
  1633 00000ED5 E876650000          <1> 	call showstring2
  1634 00000EDA 66890D[6D110000]    <1> 	mov [locunhandy], cx
  1635 00000EE1 668915[6F110000]    <1> 	mov [locunhandx], dx
  1636 00000EE8 EB05                <1> 	jmp errortextdone
  1637                              <1> %endif
  1638                              <1> errortext:
  1639 00000EEA E8200E0000          <1> 	call print		;get the error message and print it
  1640                              <1> errortextdone:
  1641 00000EEF 31C9                <1> 	xor ecx, ecx
  1642 00000EF1 8A0D[73110000]      <1> 	mov cl, [intprob]
  1643 00000EF7 E806020000          <1> 	call expdump
  1644                              <1> dumpstack:
  1645 00000EFC 8B35[5D110000]      <1> 	mov esi, [esploc]
  1646 00000F02 39E6                <1> 	cmp esi, esp
  1647 00000F04 7213                <1> 	jb donedump
  1648 00000F06 368B0E              <1> 	mov ecx, [ss:esi]
  1649 00000F09 83EE04              <1> 	sub esi, 4
  1650 00000F0C 8935[5D110000]      <1> 	mov [esploc], esi
  1651 00000F12 E8EB010000          <1> 	call expdump
  1652 00000F17 EBE3                <1> 	jmp dumpstack
  1653                              <1> donedump:
  1654 00000F19 0F20C1              <1> 	mov ecx, cr0
  1655 00000F1C E8E1010000          <1> 	call expdump
  1656 00000F21 0F20D1              <1> 	mov ecx, cr2
  1657 00000F24 E8D9010000          <1> 	call expdump
  1658 00000F29 0F20D9              <1> 	mov ecx, cr3
  1659 00000F2C E8D1010000          <1> 	call expdump
  1660 00000F31 0F20E1              <1> 	mov ecx, cr4
  1661 00000F34 E8C9010000          <1> 	call expdump
  1662 00000F39 0F00C9              <1> 	str ecx
  1663 00000F3C E8C1010000          <1> 	call expdump
  1664 00000F41 0F010D[7C110000]    <1> 	sidt [igdtcache]
  1665 00000F48 8B0D[7E110000]      <1> 	mov ecx, [igdtcache + 2]
  1666 00000F4E E8AF010000          <1> 	call expdump
  1667 00000F53 0F0105[7C110000]    <1> 	sgdt [igdtcache]
  1668 00000F5A 8B0D[7E110000]      <1> 	mov ecx, [igdtcache + 2]
  1669 00000F60 E89D010000          <1> 	call expdump
  1670 00000F65 0F00C1              <1> 	sldt ecx
  1671 00000F68 E895010000          <1> 	call expdump
  1672 00000F6D 8B35[5D110000]      <1> 	mov esi, [esploc]
  1673 00000F73 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1674 00000F78 83C710              <1> 	add edi, 16
  1675 00000F7B 893D[78110000]      <1> 	mov [codelocend], edi
  1676 00000F81 83EF20              <1> 	sub edi, 32
  1677                              <1> dumpcodeloop:
  1678 00000F84 893D[74110000]      <1> 	mov [codeloc], edi
  1679 00000F8A 8B0F                <1> 	mov ecx, [edi]
  1680 00000F8C E871010000          <1> 	call expdump
  1681 00000F91 8B3D[74110000]      <1> 	mov edi, [codeloc]
  1682 00000F97 83C704              <1> 	add edi, 4
  1683 00000F9A 3B3D[78110000]      <1> 	cmp edi, [codelocend]
  1684 00000FA0 72E2                <1> 	jb dumpcodeloop
  1685 00000FA2 BE[7D100000]        <1> 	mov esi, backtoosmsg
  1686                              <1> %ifdef gui.included
  1687 00000FA7 803D[0A850000]00    <1> 	cmp byte [guion], 0
  1688 00000FAE 741C                <1> 	je backtomsg
  1689                              <1> guibacktomsg:
  1690 00000FB0 668B15[6F110000]    <1> 	mov dx, [locunhandx]
  1691 00000FB7 668B0D[6D110000]    <1> 	mov cx, [locunhandy]
  1692 00000FBE 66B80100            <1> 	mov ax, 1
  1693 00000FC2 6631DB              <1> 	xor bx, bx
  1694 00000FC5 E886640000          <1> 	call showstring2
  1695 00000FCA EB05                <1> 	jmp backtomsgdone
  1696                              <1> backtomsg:
  1697                              <1> %endif
  1698 00000FCC E83E0D0000          <1> 	call print
  1699                              <1> backtomsgdone:
  1700 00000FD1 30C0                <1> 	xor al, al
  1701 00000FD3 E813130000          <1> 	call rdcharint
  1702 00000FD8 3D00000100          <1> 	cmp eax, 0x10000
  1703 00000FDD 745E                <1> 	je nodebugint
  1704 00000FDF 803D[73110000]01    <1> 	cmp byte [intprob], 1
  1705 00000FE6 7414                <1> 	je debugint
  1706 00000FE8 803D[73110000]03    <1> 	cmp byte [intprob], 3
  1707 00000FEF 740B                <1> 	je debugint
  1708 00000FF1 803D[73110000]04    <1> 	cmp byte [intprob], 4
  1709 00000FF8 7402                <1> 	je debugint
  1710 00000FFA EB41                <1> 	jmp nodebugint
  1711                              <1> debugint:
  1712                              <1> %ifdef gui.included
  1713 00000FFC 803D[0A850000]00    <1> 	cmp byte [guion], 0
  1714 00001003 7427                <1> 	je nodebuggui
  1715 00001005 668B1D[71110000]    <1> 	mov bx, [backgroundcache]
  1716 0000100C 66891D[066E0000]    <1> 	mov [background], bx
  1717 00001013 6631DB              <1> 	xor bx, bx
  1718 00001016 C605[19560000]00    <1> 	mov byte [mousedisabled], 0
  1719 0000101D E8675D0000          <1> 	call guiclear
  1720 00001022 E8E35D0000          <1> 	call reloadallgraphics
  1721 00001027 E823180000          <1> 	call termcopy
  1722                              <1> nodebuggui:
  1723                              <1> %endif
  1724 0000102C 8B35[61110000]      <1> 	mov esi, [espfirst]
  1725 00001032 89F4                <1> 	mov esp, esi
  1726 00001034 61                  <1> 	popad
  1727 00001035 17                  <1> 	pop ss
  1728 00001036 0FA9                <1> 	pop gs
  1729 00001038 0FA1                <1> 	pop fs
  1730 0000103A 07                  <1> 	pop es
  1731 0000103B 1F                  <1> 	pop ds
  1732 0000103C CF                  <1> 	iret
  1733                              <1> nodebugint:
  1734 0000103D 61                  <1> 	popad
  1735 0000103E 17                  <1> 	pop ss
  1736 0000103F 0FA9                <1> 	pop gs
  1737 00001041 0FA1                <1> 	pop fs
  1738 00001043 07                  <1> 	pop es
  1739 00001044 1F                  <1> 	pop ds
  1740 00001045 83C408              <1> 	add esp, 8
  1741                              <1> ;	popf ;pop the cs segment selector into eflags
  1742                              <1> ;	popf ;then pop the flags
  1743                              <1> %ifdef gui.included
  1744 00001048 803D[0A850000]00    <1> 	cmp byte [guion], 0
  1745 0000104F 7427                <1> 	je .nogui
  1746 00001051 668B1D[71110000]    <1> 	mov bx, [backgroundcache]
  1747 00001058 66891D[066E0000]    <1> 	mov [background], bx
  1748 0000105F 6631DB              <1> 	xor bx, bx
  1749 00001062 C605[19560000]00    <1> 	mov byte [mousedisabled], 0
  1750 00001069 E81B5D0000          <1> 	call guiclear
  1751 0000106E E8975D0000          <1> 	call reloadallgraphics
  1752 00001073 E8D7170000          <1> 	call termcopy
  1753                              <1> .nogui:
  1754                              <1> %endif
  1755 00001078 E901560000          <1> 	jmp nwcmdst
  1756 0000107D 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1757 00001086 737420616E79207072- <1>
  1758 0000108F 6F626C656D7320696E- <1>
  1759 00001098 207468652049737375- <1>
  1760 000010A1 65732073656374696F- <1>
  1761 000010AA 6E20617420736F6C6C- <1>
  1762 000010B3 65726F732E676F6F67- <1>
  1763 000010BC 6C65636F64652E636F- <1>
  1764 000010C5 6D0A                <1>
  1765 000010C7 507265737320455343- <1> 			db "Press ESC to return to SollerOS or any key to continue...",10,0
  1766 000010D0 20746F207265747572- <1>
  1767 000010D9 6E20746F20536F6C6C- <1>
  1768 000010E2 65724F53206F722061- <1>
  1769 000010EB 6E79206B657920746F- <1>
  1770 000010F4 20636F6E74696E7565- <1>
  1771 000010FD 2E2E2E0A00          <1>
  1772                              <1> expdump:
  1773 00001102 8B35[65110000]      <1> 	mov esi, [esiloc]
  1774 00001108 89F7                <1> 	mov edi, esi
  1775 0000110A 83C70F              <1> 	add edi, 15
  1776 0000110D 83C604              <1> 	add esi, 4
  1777 00001110 893D[65110000]      <1> 	mov [esiloc], edi
  1778 00001116 83EF03              <1> 	sub edi, 3
  1779 00001119 E8921F0000          <1> 	call converthex
  1780 0000111E 83EE04              <1> 	sub esi, 4
  1781                              <1> %ifdef gui.included
  1782 00001121 803D[0A850000]00    <1> 	cmp byte [guion], 0
  1783 00001128 0F8429000000        <1> 	je near expdumptext
  1784 0000112E 668B0D[6D110000]    <1> 	mov cx, [locunhandy]
  1785 00001135 668B15[6F110000]    <1> 	mov dx, [locunhandx]
  1786 0000113C 66B80100            <1> 	mov ax, 1
  1787 00001140 6631DB              <1> 	xor bx, bx
  1788 00001143 E808630000          <1> 	call showstring2
  1789 00001148 66890D[6D110000]    <1> 	mov [locunhandy], cx
  1790 0000114F 668915[6F110000]    <1> 	mov [locunhandx], dx
  1791 00001156 C3                  <1> 	ret
  1792                              <1> %endif
  1793                              <1> expdumptext:
  1794 00001157 E8B30B0000          <1> 	call print
  1795 0000115C C3                  <1> 	ret
  1796 0000115D 00000000            <1> esploc dd 0
  1797 00001161 00000000            <1> espfirst dd 0
  1798 00001165 00000000            <1> esiloc dd 0
  1799 00001169 00000000            <1> esiregbuf dd 0
  1800 0000116D 0100                <1> locunhandy dw 1
  1801 0000116F 0100                <1> locunhandx dw 1
  1802 00001171 0000                <1> backgroundcache dw 0
  1803 00001173 00                  <1> intprob db 0
  1804 00001174 00000000            <1> codeloc dd 0
  1805 00001178 00000000            <1> codelocend dd 0
  1806 0000117C 000000000000        <1> igdtcache dw 0,0,0
  1807                              <1> 	unhandmsg:	
  1808 00001182 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1809 0000118B 303030FF0A00        <1>
  1810                              <1> unhndrg:
  1811 00001191 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;this dumps the stack before the stack frame in question
  1812 0000119A 303030202000<rept>  <1>
  1813 000011FA FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1814 00001203 303030FF0A00        <1>
  1815 00001209 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1816 00001212 303030202000<rept>  <1>
  1817 00001272 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1818 0000127B 303030FF0A00        <1>
  1819 00001281 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1820 0000128A 303030202000<rept>  <1>
  1821 000012EA FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1822 000012F3 303030FF0A00        <1>
  1823 000012F9 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1824 00001302 303030202000<rept>  <1>
  1825 00001362 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1826 0000136B 303030FF0A00        <1>
  1827                              <1> unhandregs:
  1828 00001371 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1829 0000137A 303030202000        <1>
  1830 00001380 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1831 00001389 303030202000        <1>
  1832 0000138F 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1833 00001398 303030FF0A00        <1>
  1834 0000139E 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1835 000013A7 303030202000        <1>
  1836 000013AD 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1837 000013B6 303030202000        <1>
  1838 000013BC 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1839 000013C5 303030202000        <1>
  1840 000013CB 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1841 000013D4 303030202000        <1>
  1842 000013DA 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1843 000013E3 303030FF0A00        <1>
  1844 000013E9 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1845 000013F2 303030202000        <1>
  1846 000013F8 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1847 00001401 303030202000        <1>
  1848 00001407 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1849 00001410 303030202000        <1>
  1850 00001416 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1851 0000141F 303030FF0A00        <1>
  1852 00001425 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1853 0000142E 303030202000        <1>
  1854 00001434 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1855 0000143D 303030202000        <1>
  1856 00001443 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1857 0000144C 303030202000        <1>
  1858 00001452 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1859 0000145B 303030FF0A00        <1>
  1860 00001461 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1861 0000146A 303030202000        <1>
  1862 00001470 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1863 00001479 303030202000        <1>
  1864 0000147F 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1865 00001488 303030202000        <1>
  1866 0000148E 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1867 00001497 303030FF0A00        <1>
  1868 0000149D 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1869 000014A6 303030202000        <1>
  1870 000014AC 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1871 000014B5 303030202000        <1>
  1872 000014BB 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1873 000014C4 303030202000        <1>
  1874 000014CA 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1875 000014D3 303030FF0A00        <1>
  1876 000014D9 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;this dumps the code before and after the interrupt in question
  1877 000014E2 303030202000<rept>  <1>
  1878 000014F7 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1879 00001500 30303020FF00        <1>
  1880 00001506 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1881 0000150F 3030305D2000        <1>
  1882 00001515 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1883 0000151E 303030202000<rept>  <1>
  1884 00001542 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1885 0000154B 303030FF0A00        <1>
  1886                              <1> unhandmsgend:
  1887                              <1> 
  1888                              <1> errortypes:
  1889 00001551 [95150000]          <1> 			dd err0
  1890 00001555 [FE150000]          <1> 			dd err1
  1891 00001559 [5F160000]          <1> 			dd err2
  1892 0000155D [B4160000]          <1> 			dd err3
  1893 00001561 [18170000]          <1> 			dd err4
  1894 00001565 [6A170000]          <1> 			dd err5
  1895 00001569 [D4170000]          <1> 			dd err6
  1896 0000156D [3C180000]          <1> 			dd err7
  1897 00001571 [86180000]          <1> 			dd err8
  1898 00001575 [E3180000]          <1> 			dd err9
  1899 00001579 [3C190000]          <1> 			dd err10
  1900 0000157D [87190000]          <1> 			dd err11
  1901 00001581 [D7190000]          <1> 			dd err12
  1902 00001585 [301A0000]          <1> 			dd err13
  1903 00001589 [931A0000]          <1> 			dd err14
  1904 0000158D [CF1A0000]          <1> 			dd err15
  1905                              <1> errortypesend:
  1906 00001591 [5B1B0000]          <1> 			dd unknownerror
  1907                              <1> 			
  1908 00001595 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1909 0000159E 6279207A65726F3A0A  <1>
  1910 000015A7 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1911 000015B0 6C79206C696D2061C3- <1>
  1912 000015B9 B778203D20E2889E20- <1>
  1913 000015C2 7768656E2061206973- <1>
  1914 000015CB 20616E79207265616C- <1>
  1915 000015D4 206E756D6265722E20- <1>
  1916 000015DD 486170707920456173- <1>
  1917 000015E6 746572210A          <1>
  1918 000015EB 202020202020202020- <1> 		db "            x→0",10,0
  1919 000015F4 20202078E28692300A- <1>
  1920 000015FD 00                  <1>
  1921                              <1> 		
  1922 000015FE 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1923 00001607 65702F427265616B70- <1>
  1924 00001610 6F696E743A0A        <1>
  1925 00001616 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1926 0000161F 696E74206661756C74- <1>
  1927 00001628 2C20627265616B706F- <1>
  1928 00001631 696E7420747261702C- <1>
  1929 0000163A 206F722073696E676C- <1>
  1930 00001643 652D73746570207472- <1>
  1931 0000164C 617020776173207472- <1>
  1932 00001655 696767657265642E0A- <1>
  1933 0000165E 00                  <1>
  1934                              <1> 		
  1935 0000165F 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1936 00001668 6C6520696E74657272- <1>
  1937 00001671 7570743A0A          <1>
  1938 00001676 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1939 0000167F 6520696E7465727275- <1>
  1940 00001688 707420776173207472- <1>
  1941 00001691 696767657265642074- <1>
  1942 0000169A 68617420636F756C64- <1>
  1943 000016A3 206E6F74206265206D- <1>
  1944 000016AC 61736B65642E0A00    <1>
  1945                              <1> 		
  1946 000016B4 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1947 000016BD 743A0A              <1>
  1948 000016C0 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1949 000016C9 727275707420697320- <1>
  1950 000016D2 7573656420696E2070- <1>
  1951 000016DB 726F6772616D732074- <1>
  1952 000016E4 6F2073686F77207468- <1>
  1953 000016ED 6520737461636B2061- <1>
  1954 000016F6 6E6420726567697374- <1>
  1955 000016FF 65727320616E642063- <1>
  1956 00001708 616E2062650A        <1>
  1957 0000170E 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1958 00001717 00                  <1>
  1959                              <1> 		
  1960 00001718 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1961 00001721 0A                  <1>
  1962 00001722 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1963 0000172B 73736F722072616E20- <1>
  1964 00001734 696E746F20616E2049- <1>
  1965 0000173D 4E544F20696E737472- <1>
  1966 00001746 756374696F6E207769- <1>
  1967 0000174F 746820746865206F76- <1>
  1968 00001758 6572666C6F7720666C- <1>
  1969 00001761 6167207365742E0A00  <1>
  1970                              <1> 		
  1971 0000176A 426F756E6473206368- <1> err5	db "Bounds check:",10
  1972 00001773 65636B3A0A          <1>
  1973 00001778 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1974 00001781 73736F72207265626F- <1>
  1975 0000178A 756E6465642066726F- <1>
  1976 00001793 6D206120424F554E44- <1>
  1977 0000179C 20696E737472756374- <1>
  1978 000017A5 696F6E2072756E206F- <1>
  1979 000017AE 6E20616E206F706572- <1>
  1980 000017B7 616E64207468617420- <1>
  1981 000017C0 776173206F75740A    <1>
  1982 000017C8 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1983 000017D1 2E0A00              <1>
  1984                              <1> 		
  1985 000017D4 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1986 000017DD 70636F64653A0A      <1>
  1987 000017E4 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1988 000017ED 73736F722068617320- <1>
  1989 000017F6 6E6F20696465612077- <1>
  1990 000017FF 686174206974207761- <1>
  1991 00001808 7320747279696E6720- <1>
  1992 00001811 746F20657865637574- <1>
  1993 0000181A 652E20446F6E277420- <1>
  1994 00001823 72756E205353453420- <1>
  1995 0000182C 636F64650A          <1>
  1996 00001831 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1997 0000183A 0A00                <1>
  1998                              <1> 		
  1999 0000183C 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  2000 00001845 6F72206E6F74206176- <1>
  2001 0000184E 61696C61626C653A0A  <1>
  2002 00001857 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  2003 00001860 206B6E6F7720746865- <1>
  2004 00001869 7920646F6E2774206D- <1>
  2005 00001872 616B652074686F7365- <1>
  2006 0000187B 20616E796D6F726521- <1>
  2007 00001884 0A00                <1>
  2008                              <1> 		
  2009 00001886 446F75626C65206661- <1> err8	db "Double fault:",10
  2010 0000188F 756C743A0A          <1>
  2011 00001894 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  2012 0000189D 74696F6E2068616E64- <1>
  2013 000018A6 6C657220636F756C64- <1>
  2014 000018AF 206E6F742068616E64- <1>
  2015 000018B8 6C6520746861742069- <1>
  2016 000018C1 7420636F756C64206E- <1>
  2017 000018CA 6F742068616E646C65- <1>
  2018 000018D3 20616E206578636570- <1>
  2019 000018DC 74696F6E2E0A00      <1>
  2020                              <1> 		
  2021 000018E3 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  2022 000018EC 6F72207365676D656E- <1>
  2023 000018F5 74206F76657272756E- <1>
  2024 000018FE 3A0A00              <1>
  2025 00001901 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  2026 0000190A 722068617070656E73- <1>
  2027 00001913 20696E206D6F646572- <1>
  2028 0000191C 6E20636F6D70757465- <1>
  2029 00001925 72732C20616E64206E- <1>
  2030 0000192E 657665722073686F75- <1>
  2031 00001937 6C642E0A00          <1>
  2032                              <1> 
  2033 0000193C 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  2034 00001945 53533A0A            <1>
  2035 00001949 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  2036 00001952 686174207761732073- <1>
  2037 0000195B 776974636865642074- <1>
  2038 00001964 6F20697320696E7661- <1>
  2039 0000196D 6C69642E204E6F7468- <1>
  2040 00001976 696E672066756E6E79- <1>
  2041 0000197F 20686572652E0A00    <1>
  2042                              <1> 		
  2043 00001987 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2044 00001990 6F742070726573656E- <1>
  2045 00001999 743A0A              <1>
  2046 0000199C 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2047 000019A5 6E7420626974206F66- <1>
  2048 000019AE 20746865207365676D- <1>
  2049 000019B7 656E74206465736372- <1>
  2050 000019C0 6970746F7220697320- <1>
  2051 000019C9 73657420746F207A65- <1>
  2052 000019D2 726F2E0A00          <1>
  2053                              <1> 		
  2054 000019D7 537461636B20657863- <1> err12	db "Stack exception:",10
  2055 000019E0 657074696F6E3A0A    <1>
  2056 000019E8 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2057 000019F1 7363726970746F7220- <1>
  2058 000019FA 697320696E76616C69- <1>
  2059 00001A03 64206F72206E6F7420- <1>
  2060 00001A0C 70726573656E74206F- <1>
  2061 00001A15 7220697473206C696D- <1>
  2062 00001A1E 697420697320746F6F- <1>
  2063 00001A27 20736D616C6C2E0A00  <1>
  2064                              <1> 		
  2065 00001A30 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2066 00001A39 726F74656374696F6E- <1>
  2067 00001A42 2076696F6C6174696F- <1>
  2068 00001A4B 6E3A0A              <1>
  2069 00001A4E 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2070 00001A57 746564207468652063- <1>
  2071 00001A60 6F6D70757465722E20- <1>
  2072 00001A69 537465702061776179- <1>
  2073 00001A72 20736C6F776C792E20- <1>
  2074 00001A7B 546865204642492069- <1>
  2075 00001A84 73206F6E2069747320- <1>
  2076 00001A8D 7761792E0A00        <1>
  2077                              <1> 		
  2078 00001A93 50616765206661756C- <1> err14	db "Page fault:",10
  2079 00001A9C 743A0A              <1>
  2080 00001A9F 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2081 00001AA8 746861742077617320- <1>
  2082 00001AB1 726571756573746564- <1>
  2083 00001ABA 20776173206E6F7420- <1>
  2084 00001AC3 617661696C61626C65- <1>
  2085 00001ACC 2E0A00              <1>
  2086                              <1> 		
  2087 00001ACF 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2088 00001AD8 666F7220506C616E20- <1>
  2089 00001AE1 523A0A              <1>
  2090 00001AE4 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2091 00001AED 727275707420697320- <1>
  2092 00001AF6 726573657276656420- <1>
  2093 00001AFF 666F72207573616765- <1>
  2094 00001B08 206F6E6C7920627920- <1>
  2095 00001B11 746865206D696C6974- <1>
  2096 00001B1A 617279207768656E20- <1>
  2097 00001B23 6974206973206E6563- <1>
  2098 00001B2C 6573736172790A      <1>
  2099 00001B33 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'état.",10,0
  2100 00001B3C 746520612066756C6C- <1>
  2101 00001B45 2D7363616C6520636F- <1>
  2102 00001B4E 7570206427C3A97461- <1>
  2103 00001B57 742E0A00            <1>
  2104                              <1> 		
  2105 00001B5B 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2106 00001B64 68656C6C206A757374- <1>
  2107 00001B6D 2068617070656E6564- <1>
  2108 00001B76 3F2049732065766572- <1>
  2109 00001B7F 796F6E65206F6B6179- <1>
  2110 00001B88 3F2048617264206472- <1>
  2111 00001B91 6976653F2056696465- <1>
  2112 00001B9A 6F20636172643F0A    <1>
  2113 00001BA2 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2114 00001BAB 726520796F75207468- <1>
  2115 00001BB4 6572653F0A00        <1>
  2116                              <1> %else
  2117                              <1> unhand:	
  2118                              <1> 	%assign i 0
  2119                              <1> 	%rep 32
  2120                              <1> 	mov byte [intprob], i
  2121                              <1> 	jmp unhand2
  2122                              <1> 	%assign i i+1
  2123                              <1> 	%endrep
  2124                              <1> unhand2:
  2125                              <1> 	cmp byte [intprob], 3
  2126                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2127                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2128                              <1> 					;CD is the machine instruction for interrupt
  2129                              <1> 					;DEAD shows that the program died because of the int
  2130                              <1> 	mov bl, [intprob]
  2131                              <1> 	jmp exitprog
  2132                              <1> intprob db 0
  2133                              <1> %endif
  2134                                      %include "source/ints.asm"
  2135                              <1> int30h:	;for great justice
  2136 00001BBA 80FC00              <1> 	cmp ah, 0
  2137 00001BBD 0F849A000000        <1> 	je near exitprog   ;kills app
  2138 00001BC3 80FC01              <1> 	cmp ah, 1
  2139 00001BC6 0F8416010000        <1> 	je near prntstr  ;print string
  2140 00001BCC 80FC02              <1> 	cmp ah, 2
  2141 00001BCF 0F84B3010000        <1> 	je near readstr	;read string
  2142 00001BD5 80FC03              <1> 	cmp ah, 3
  2143 00001BD8 0F84D3010000        <1> 	je near clearscrn	;clear screen
  2144 00001BDE 80FC04              <1> 	cmp ah, 4
  2145 00001BE1 0F8442020000        <1> 	je near prntreadstr	;read and print string
  2146 00001BE7 80FC05              <1> 	cmp ah, 5
  2147 00001BEA 0F84EF060000        <1> 	je near readchar	;get char
  2148 00001BF0 80FC06              <1> 	cmp ah, 6
  2149 00001BF3 0F8458070000        <1> 	je near prntchar	;print char
  2150 00001BF9 80FC07              <1> 	cmp ah, 7
  2151 00001BFC 0F8459090000        <1> 	je near openfile	;read file
  2152                              <1> ;	cmp ah, 8
  2153                              <1> ;	je near closefile	;close file
  2154 00001C02 80FC09              <1> 	cmp ah, 9
  2155 00001C05 0F845A090000        <1> 	je near num2str	;convert number to string
  2156 00001C0B 80FC0A              <1> 	cmp ah, 10
  2157 00001C0E 0F8469090000        <1> 	je near str2num	;convert string to number
  2158                              <1> %ifdef threads.included
  2159 00001C14 80FC0B              <1> 	cmp ah, 11
  2160 00001C17 0F846C090000        <1> 	je near forkthread	;create thread
  2161                              <1> %endif
  2162 00001C1D 80FC0C              <1> 	cmp ah, 12
  2163 00001C20 0F842B0A0000        <1> 	je near gettime	;get time
  2164 00001C26 80FC0D              <1> 	cmp ah, 13
  2165 00001C29 0F84370A0000        <1> 	je near settime	;set time
  2166 00001C2F 80FC0E              <1> 	cmp ah, 14
  2167 00001C32 0F843E0A0000        <1> 	je near runcmd	;run program
  2168 00001C38 80FC0F              <1> 	cmp ah, 15
  2169 00001C3B 0F844A0A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2170 00001C41 80FC10              <1> 	cmp ah, 16
  2171 00001C44 0F846C0A0000        <1> 	je near hooksig	;hook code to a signal
  2172                              <1> %ifdef gui.included
  2173 00001C4A 80FC11              <1> 	cmp ah, 17
  2174 00001C4D 0F84730A0000        <1> 	je near guiint	;GUI operations
  2175                              <1> %endif
  2176                              <1> %ifdef sound.included
  2177 00001C53 80FC12              <1> 	cmp ah, 18
  2178 00001C56 0F84EE0B0000        <1> 	je near soundint	;sound operations
  2179                              <1> %endif
  2180                              <1> %ifdef network.included
  2181                              <1> 	cmp ah, 19
  2182                              <1> 	je near netint	;networking operations
  2183                              <1> %endif
  2184 00001C5C CF                  <1> 	iret
  2185                              <1> 
  2186                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2187                              <2> exitprog:
  2188 00001C5D 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2189 00001C61 8ED8                <2> 	mov ds, ax
  2190 00001C63 8EC0                <2> 	mov es, ax
  2191 00001C65 8EE0                <2> 	mov fs, ax
  2192 00001C67 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2193 00001C6B 8EE8                <2> 	mov gs, ax
  2194 00001C6D C705[38670000]0000- <2> 	mov dword [currentthread], 0
  2195 00001C75 0000                <2>
  2196 00001C77 C705[33670000]0400- <2> 	mov dword [lastthread], 4
  2197 00001C7F 0000                <2>
  2198 00001C81 C605[37670000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2199 00001C88 8B25[08AE0300]      <2> 	mov esp, [previousstack] ;and this
  2200 00001C8E 83FB00              <2> 	cmp ebx, 0
  2201 00001C91 0F8501000000        <2> 	jne near .error
  2202 00001C97 C3                  <2> 	ret
  2203                              <2> .error:
  2204 00001C98 89D9                <2> 	mov ecx, ebx
  2205 00001C9A B006                <2> 	mov al, 6
  2206 00001C9C A2[06310000]        <2> 	mov [firsthexshown], al
  2207 00001CA1 51                  <2> 	push ecx
  2208 00001CA2 BE[BD1C0000]        <2> 	mov esi, .msg1
  2209 00001CA7 E855000000          <2> 	call printhighlight
  2210 00001CAC 59                  <2> 	pop ecx
  2211 00001CAD E869140000          <2> 	call showhex
  2212 00001CB2 BE[D21C0000]        <2> 	mov esi, .msg2
  2213 00001CB7 E845000000          <2> 	call printhighlight
  2214 00001CBC C3                  <2> 	ret
  2215                              <2> 	
  2216 00001CBD 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2217 00001CC6 7461747573206F6620- <2>
  2218 00001CCF 307800              <2>
  2219 00001CD2 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2220 00001CDB 726E65642E0A00      <2>
  2221                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2222                              <2> prntstr:
  2223 00001CE2 30E4                <2> xor ah, ah
  2224 00001CE4 E82D000000          <2> call printint
  2225 00001CE9 E9ABE5FFFF          <2> jmp timerinterrupt
  2226                              <2> 
  2227                              <2> 	printquiet:
  2228 00001CEE 6631C0              <2> 		xor ax, ax
  2229 00001CF1 66A3[861D0000]      <2> 		mov [endkeyprint], ax
  2230 00001CF7 66BB0700            <2> 		mov bx, 7
  2231 00001CFB E82F000000          <2> 		call printint.b
  2232 00001D00 C3                  <2> 		ret
  2233                              <2> 
  2234                              <2> 	printhighlight:
  2235 00001D01 6631C0              <2> 		xor ax, ax
  2236 00001D04 66BBF000            <2> 		mov bx, 0xF0
  2237 00001D08 EB0C                <2> 		jmp printint
  2238                              <2> 
  2239                              <2> 	printline:
  2240 00001D0A BE[E5840000]        <2> 		mov esi, line
  2241                              <2>     print:
  2242 00001D0F 6631C0              <2> 		xor ax, ax
  2243 00001D12 66BB0700            <2> 		mov bx, 7
  2244                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2245 00001D16 56                  <2> 		push esi
  2246 00001D17 66A3[861D0000]      <2> 		mov [endkeyprint], ax
  2247 00001D1D E80D000000          <2> 		call .b
  2248 00001D22 89F1                <2> 		mov ecx, esi
  2249 00001D24 5F                  <2> 		pop edi
  2250 00001D25 29F9                <2> 		sub ecx, edi
  2251 00001D27 51                  <2> 		push ecx
  2252 00001D28 E8220B0000          <2> 		call termcopy
  2253 00001D2D 59                  <2> 		pop ecx
  2254 00001D2E C3                  <2> 		ret
  2255                              <2> 	.b:	
  2256 00001D2F 53                  <2> 		push ebx
  2257 00001D30 31C0                <2> 		xor eax, eax
  2258 00001D32 8A06                <2> 		mov al, [esi]
  2259 00001D34 3CFF                <2> 		cmp al, 0xFF
  2260 00001D36 7503                <2> 		jne .notnull
  2261 00001D38 5B                  <2> 		pop ebx
  2262 00001D39 EB47                <2> 		jmp .noprint
  2263                              <2> 	.notnull:
  2264 00001D3B 3CC0                <2> 		cmp al, 0xC0
  2265 00001D3D 722E                <2> 		jb .doneutf
  2266 00001D3F 3CE0                <2> 		cmp al, 0xE0
  2267 00001D41 7217                <2> 		jb .two
  2268 00001D43 46                  <2> 		inc esi
  2269 00001D44 8A2E                <2> 		mov ch, [esi]
  2270 00001D46 46                  <2> 		inc esi
  2271 00001D47 8A0E                <2> 		mov cl, [esi]
  2272 00001D49 C0E004              <2> 		shl al, 4
  2273 00001D4C C0E102              <2> 		shl cl, 2
  2274 00001D4F 66C1E902            <2> 		shr cx, 2
  2275 00001D53 08C5                <2> 		or ch, al
  2276 00001D55 6689C8              <2> 		mov ax, cx
  2277 00001D58 EB13                <2> 		jmp .doneutf
  2278                              <2> 	.two:
  2279 00001D5A 8A2E                <2> 		mov ch, [esi]
  2280 00001D5C 46                  <2> 		inc esi
  2281 00001D5D 8A0E                <2> 		mov cl, [esi]
  2282 00001D5F 66C1E102            <2> 		shl cx, 2
  2283 00001D63 C0ED02              <2> 		shr ch, 2
  2284 00001D66 66C1E902            <2> 		shr cx, 2
  2285 00001D6A 6689C8              <2> 		mov ax, cx
  2286                              <2> 	.doneutf:
  2287 00001D6D 5B                  <2> 		pop ebx
  2288 00001D6E 663B05[861D0000]    <2> 		cmp ax, [endkeyprint]
  2289 00001D75 740E                <2> 		je .done
  2290 00001D77 663DFFFE            <2> 		cmp ax, 0xFEFF
  2291 00001D7B 7405                <2> 		je .noprint
  2292 00001D7D E8FC050000          <2> 		call prcharq
  2293                              <2> 	.noprint:
  2294 00001D82 46                  <2> 		inc esi
  2295 00001D83 EBAA                <2> 		jmp .b
  2296                              <2> 	.done:
  2297 00001D85 C3                  <2> 		ret
  2298                              <2> 
  2299 00001D86 0000                <2> endkeyprint dw 0
  2300                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2301                              <2> readstr:
  2302 00001D88 E805000000          <2> call readint
  2303 00001D8D E907E5FFFF          <2> jmp timerinterrupt
  2304                              <2> 
  2305                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2306 00001D92 89C3                <2> 		mov ebx, eax
  2307                              <2> 	.b:
  2308 00001D94 53                  <2> 		push ebx
  2309 00001D95 57                  <2> 		push edi
  2310 00001D96 56                  <2> 		push esi
  2311 00001D97 30C0                <2> 		xor al, al
  2312 00001D99 E84D050000          <2> 		call rdcharint
  2313 00001D9E 5E                  <2> 		pop esi
  2314 00001D9F 8806                <2> 		mov [esi], al
  2315 00001DA1 46                  <2> 		inc esi
  2316 00001DA2 5F                  <2> 		pop edi
  2317 00001DA3 5B                  <2> 		pop ebx
  2318 00001DA4 39FE                <2> 		cmp esi, edi
  2319 00001DA6 7304                <2> 		jae .done
  2320 00001DA8 38D8                <2> 		cmp al, bl
  2321 00001DAA 75E8                <2> 		jne .b
  2322                              <2> 	.done:
  2323 00001DAC 4E                  <2> 		dec esi
  2324 00001DAD C60600              <2> 		mov byte [esi], 0
  2325 00001DB0 C3                  <2> 		ret
  2326                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2327                              <2> clearscrn:
  2328 00001DB1 E805000000          <2> call clear
  2329 00001DB6 E9DEE4FFFF          <2> jmp timerinterrupt
  2330                              <2> %ifdef io.serial
  2331                              <2> clear:
  2332                              <2> 	mov esi, .str
  2333                              <2> 	call print
  2334                              <2> 	ret
  2335                              <2> .str db 27,"[2J",27,"[f",0
  2336                              <2> %else
  2337                              <2> clear:
  2338 00001DBB 668B0D[55250000]    <2> 		mov cx, [charxy]
  2339 00001DC2 BF[9CDF2B00]        <2> 		mov edi, videobuf
  2340 00001DC7 31C0                <2> 		xor eax, eax
  2341 00001DC9 A3[4B250000]        <2> 		mov [linebeginpos], eax
  2342 00001DCE A3[4F250000]        <2> 		mov [videobufpos], eax
  2343 00001DD3 6631D2              <2> 		xor dx, dx
  2344 00001DD6 66A3[53250000]      <2> 		mov [charpos], ax
  2345 00001DDC 66B80700            <2> 		mov ax, 7
  2346 00001DE0 C1E010              <2> 		shl eax, 16
  2347                              <2> 	clearb:
  2348 00001DE3 8907                <2> 		mov [edi], eax
  2349 00001DE5 83C704              <2> 		add edi, 4
  2350 00001DE8 FEC9                <2> 		dec cl
  2351 00001DEA 80F900              <2> 		cmp cl, 0
  2352 00001DED 75F4                <2> 		jne clearb
  2353 00001DEF 8A0D[55250000]      <2> 		mov cl, [charxy]
  2354 00001DF5 FECD                <2> 		dec ch
  2355 00001DF7 80FD00              <2> 		cmp ch, 0
  2356 00001DFA 75E7                <2> 		jne clearb
  2357                              <2> 	cleardouble:
  2358 00001DFC BF[E4B42C00]        <2> 		mov edi, videobuf2
  2359 00001E01 668B0D[55250000]    <2> 		mov cx, [charxy]
  2360 00001E08 31C0                <2> 		xor eax, eax
  2361                              <2> 	clearc:
  2362 00001E0A 8907                <2> 		mov [edi], eax
  2363 00001E0C 83C704              <2> 		add edi, 4
  2364 00001E0F FEC9                <2> 		dec cl
  2365 00001E11 80F900              <2> 		cmp cl, 0
  2366 00001E14 75F4                <2> 		jne clearc
  2367 00001E16 8A0D[55250000]      <2> 		mov cl, [charxy]
  2368 00001E1C FECD                <2> 		dec ch
  2369 00001E1E 80FD00              <2> 		cmp ch, 0
  2370 00001E21 75E7                <2> 		jne clearc
  2371 00001E23 E8270A0000          <2> 		call termcopy
  2372 00001E28 C3                  <2> 		ret
  2373                              <2> %endif
  2374                              <2> 		
  2375                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2376                              <2> prntreadstr:
  2377 00001E29 E80B000000          <2> call rdprint
  2378 00001E2E E966E4FFFF          <2> jmp timerinterrupt
  2379                              <2> 
  2380                              <2> readline:
  2381 00001E33 B00A                <2>   mov al, 10
  2382 00001E35 66BB0700            <2>   mov bx, 7
  2383                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2384 00001E39 E80F000000          <2> 	call rdprintdos
  2385 00001E3E 50                  <2> 	push eax
  2386 00001E3F A0[CA220000]        <2> 	mov al, [endkeyrdpr]
  2387 00001E44 30E4                <2> 	xor ah, ah
  2388 00001E46 E81C050000          <2> 	call prcharint
  2389 00001E4B 58                  <2> 	pop eax
  2390 00001E4C C3                  <2> 	ret
  2391                              <2> 
  2392                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2393 00001E4D 8935[D4220000]      <2> 		mov [buftxtloc], esi
  2394 00001E53 A2[CA220000]        <2> 		mov [endkeyrdpr], al
  2395 00001E58 66891D[CC220000]    <2> 		mov [modkeyrdpr], bx
  2396 00001E5F 8935[CE220000]      <2> 		mov [firstesirdpr], esi
  2397 00001E65 893D[D8220000]      <2> 		mov [endbufferrdpr], edi
  2398 00001E6B 8B3D[388A2D00]      <2> 		mov edi, [commandsentered]
  2399 00001E71 893D[348A2D00]      <2> 		mov [commandlistentries], edi
  2400                              <2> 	rdprintb:
  2401 00001E77 56                  <2> 		push esi
  2402 00001E78 B001                <2> 		mov al, 1
  2403 00001E7A E86C040000          <2> 		call rdcharint
  2404 00001E7F 8A25[4D230000]      <2> 		mov ah, [lastkey + 2]
  2405 00001E85 88E1                <2> 		mov cl, ah
  2406 00001E87 5E                  <2> 		pop esi
  2407                              <2> %ifdef io.serial
  2408                              <2> 		cmp ah, 0x41
  2409                              <2> 		je near rdprup
  2410                              <2> 		cmp ah, 0x42
  2411                              <2> 		je near rdprdown
  2412                              <2> 		cmp ah, 0x43
  2413                              <2> 		je near rdprright
  2414                              <2> 		cmp ah, 0x44
  2415                              <2> 		je near rdprleft
  2416                              <2> 		cmp ah, 0x31
  2417                              <2> 		je near rdprhome
  2418                              <2> 		cmp ah, 0x48
  2419                              <2> 		je near rdprhome
  2420                              <2> 		cmp ah, 0x46
  2421                              <2> 		je near rdprend
  2422                              <2> 		cmp ah, 0x33
  2423                              <2> 		je near rdprdel
  2424                              <2> 		cmp ah, 0x34
  2425                              <2> 		je near rdprend
  2426                              <2> %else
  2427 00001E88 803D[F15B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2428 00001E8F 753F                <2> 		jne notspecialrdprnt
  2429 00001E91 80FC53              <2> 		cmp ah, 0x53
  2430 00001E94 0F849C030000        <2> 		je near rdprdel
  2431 00001E9A 80FC47              <2> 		cmp ah, 0x47
  2432 00001E9D 0F8475010000        <2> 		je near rdprhome
  2433 00001EA3 80FC4F              <2> 		cmp ah, 0x4F
  2434 00001EA6 0F848B010000        <2> 		je near rdprend
  2435 00001EAC 80FC50              <2> 		cmp ah, 0x50
  2436 00001EAF 0F841B020000        <2> 		je near rdprdown
  2437 00001EB5 80FC4D              <2> 		cmp ah, 0x4D
  2438 00001EB8 0F84B8010000        <2> 		je near rdprright
  2439 00001EBE 80FC4B              <2> 		cmp ah, 0x4B
  2440 00001EC1 0F848D010000        <2> 		je near rdprleft
  2441 00001EC7 80FC48              <2> 		cmp ah, 0x48
  2442 00001ECA 0F8440020000        <2> 		je near rdprup
  2443                              <2> 	notspecialrdprnt:
  2444                              <2> %endif
  2445 00001ED0 66A1[4B230000]      <2> 		mov ax, [lastkey]
  2446 00001ED6 6683F808            <2> 		cmp ax, 8
  2447 00001EDA 0F848B030000        <2> 		je near rdprbscheck
  2448 00001EE0 6683F800            <2> 		cmp ax, 0
  2449 00001EE4 7491                <2> 		je rdprintb
  2450 00001EE6 80F900              <2> 		cmp cl, 0
  2451 00001EE9 748C                <2> 		je rdprintb
  2452 00001EEB 663D8000            <2> 		cmp ax, 0x80
  2453 00001EEF 7251                <2> 		jb .normal
  2454 00001EF1 663D0008            <2> 		cmp ax, 0x800
  2455 00001EF5 731E                <2> 		jae .three
  2456 00001EF7 46                  <2> 		inc esi
  2457 00001EF8 3B35[D8220000]      <2> 		cmp esi, [endbufferrdpr]
  2458 00001EFE 0F83D1000000        <2> 		jae near donerdprinc
  2459 00001F04 66C1E002            <2> 		shl ax, 2
  2460 00001F08 C0E802              <2> 		shr al, 2
  2461 00001F0B 0C80                <2> 		or al, 10000000b
  2462 00001F0D 80CCC0              <2> 		or ah, 11000000b
  2463 00001F10 8866FF              <2> 		mov [esi - 1], ah
  2464 00001F13 EB2D                <2> 		jmp .normal
  2465                              <2> .three:	
  2466 00001F15 83C602              <2> 		add esi, 2
  2467 00001F18 3B35[D8220000]      <2> 		cmp esi, [endbufferrdpr]
  2468 00001F1E 0F83B1000000        <2> 		jae near donerdprinc
  2469 00001F24 88E1                <2> 		mov cl, ah
  2470 00001F26 C0E904              <2> 		shr cl, 4
  2471 00001F29 80C9E0              <2> 		or cl, 11100000b
  2472 00001F2C 884EFE              <2> 		mov [esi - 2], cl
  2473 00001F2F 66C1E004            <2> 		shl ax, 4
  2474 00001F33 66C1E802            <2> 		shr ax, 2
  2475 00001F37 80CC80              <2> 		or ah, 10000000b
  2476 00001F3A C0E802              <2> 		shr al, 2
  2477 00001F3D 0C80                <2> 		or al, 10000000b
  2478 00001F3F 8866FF              <2> 		mov [esi - 1], ah
  2479                              <2> .normal:
  2480 00001F42 8806                <2> 		mov [esi], al
  2481 00001F44 46                  <2> 		inc esi
  2482 00001F45 66A1[4B230000]      <2> 		mov ax, [lastkey]
  2483                              <2> 	bscheckequal:
  2484 00001F4B 668B1D[CC220000]    <2> 		mov bx, [modkeyrdpr]
  2485 00001F52 803D[D3220000]00    <2> 		cmp byte [txtmask], 0
  2486 00001F59 7407                <2> 		je nomasktxt
  2487 00001F5B 30E4                <2> 		xor ah, ah
  2488 00001F5D A0[D3220000]        <2> 		mov al, [txtmask]
  2489                              <2> 	nomasktxt:
  2490 00001F62 56                  <2> 		push esi
  2491 00001F63 66A3[C8220000]      <2> 		mov [axcache], ax
  2492 00001F69 668B1D[CA220000]    <2> 		mov bx, [endkeyrdpr]
  2493 00001F70 6639D8              <2> 		cmp ax, bx
  2494 00001F73 7432                <2> 		je nobackprintbuftxt2
  2495 00001F75 E8ED030000          <2> 		call prcharint
  2496 00001F7A BE[88C00300]        <2> 		mov esi, buftxt2
  2497 00001F7F E86AFDFFFF          <2> 		call printquiet
  2498 00001F84 66B82000            <2> 		mov ax, " "
  2499 00001F88 E8F1030000          <2> 		call prcharq
  2500 00001F8D 66B80800            <2> 		mov ax, 8
  2501 00001F91 81FE[88C00300]      <2> 		cmp esi, buftxt2
  2502 00001F97 740E                <2> 		je nobackprintbuftxt2
  2503                              <2> 	backprintbuftxt2:
  2504 00001F99 E8E0030000          <2> 		call prcharq
  2505 00001F9E 4E                  <2> 		dec esi
  2506 00001F9F 81FE[88C00300]      <2> 		cmp esi, buftxt2
  2507 00001FA5 77F2                <2> 		ja backprintbuftxt2
  2508                              <2> 	nobackprintbuftxt2:
  2509 00001FA7 6683F80A            <2> 		cmp ax, 10
  2510 00001FAB 7405                <2> 		je nonobackprint
  2511 00001FAD E8B5030000          <2> 		call prcharint
  2512                              <2> 	nonobackprint:
  2513 00001FB2 5E                  <2> 		pop esi
  2514 00001FB3 3B35[D8220000]      <2> 		cmp esi, [endbufferrdpr]
  2515 00001FB9 0F8316000000        <2> 		jae near donerdprinc
  2516 00001FBF 66A1[C8220000]      <2> 		mov ax, [axcache]
  2517 00001FC5 8A25[CA220000]      <2> 		mov ah, [endkeyrdpr]
  2518 00001FCB 38E0                <2> 		cmp al, ah
  2519 00001FCD 0F85A4FEFFFF        <2> 		jne rdprintb
  2520 00001FD3 EB01                <2> 		jmp donerdprint
  2521                              <2> 	donerdprinc:
  2522 00001FD5 46                  <2> 		inc esi
  2523                              <2> 	donerdprint:
  2524 00001FD6 4E                  <2> 		dec esi
  2525 00001FD7 BF[88C00300]        <2> 		mov edi, buftxt2
  2526                              <2> 	copylaterstuff:
  2527 00001FDC 8A07                <2> 		mov al, [edi]
  2528 00001FDE 3C00                <2> 		cmp al, 0
  2529 00001FE0 7406                <2> 		je nocopylaterstuff
  2530 00001FE2 8806                <2> 		mov [esi], al
  2531 00001FE4 47                  <2> 		inc edi
  2532 00001FE5 46                  <2> 		inc esi
  2533 00001FE6 EBF4                <2> 		jmp copylaterstuff
  2534                              <2> 	nocopylaterstuff:
  2535 00001FE8 C60600              <2> 		mov byte [esi], 0
  2536 00001FEB E80B000000          <2> 		call clearbuftxt2
  2537 00001FF0 89F1                <2> 		mov ecx, esi
  2538 00001FF2 8B3D[CE220000]      <2> 		mov edi, [firstesirdpr]
  2539 00001FF8 29F9                <2> 		sub ecx, edi
  2540 00001FFA C3                  <2> 		ret
  2541                              <2> 	
  2542                              <2> 	clearbuftxt2:
  2543 00001FFB 30C0                <2> 		xor al, al
  2544 00001FFD BF[88C00300]        <2> 		mov edi, buftxt2
  2545                              <2> 	clearbuftxt2lp:
  2546 00002002 8807                <2> 		mov [edi], al
  2547 00002004 47                  <2> 		inc edi
  2548 00002005 81FF[88C40300]      <2> 		cmp edi, buftxt
  2549 0000200B 75F5                <2> 		jne clearbuftxt2lp
  2550 0000200D C3                  <2> 		ret
  2551                              <2> 	
  2552                              <2> 	rdprintb2:
  2553 0000200E E83C080000          <2> 		call termcopy
  2554 00002013 E95FFEFFFF          <2> 		jmp rdprintb
  2555                              <2> 	
  2556                              <2> 	rdprhome:
  2557 00002018 3B35[D4220000]      <2> 		cmp esi, [buftxtloc]
  2558 0000201E 0F84EAFFFFFF        <2> 		je near rdprintb2
  2559 00002024 BF[88C00300]        <2> 		mov edi, buftxt2
  2560 00002029 8A07                <2> 		mov al, [edi]
  2561 0000202B E86A020000          <2> 		call shiftbuftxt2
  2562 00002030 E849030000          <2> 		call prcharq
  2563 00002035 EBE1                <2> 		jmp rdprhome
  2564                              <2> 		
  2565                              <2> 	rdprend:
  2566 00002037 BF[88C00300]        <2> 		mov edi, buftxt2
  2567 0000203C 8A07                <2> 		mov al, [edi]
  2568 0000203E 3C00                <2> 		cmp al, 0
  2569 00002040 0F84C8FFFFFF        <2> 		je near rdprintb2
  2570 00002046 8806                <2> 		mov [esi], al
  2571 00002048 E849000000          <2> 		call shiftbuftxt2lft
  2572 0000204D E82C030000          <2> 		call prcharq
  2573 00002052 EBE3                <2> 		jmp rdprend
  2574                              <2> 	
  2575                              <2> 	rdprleft:
  2576 00002054 3B35[D4220000]      <2> 		cmp esi, [buftxtloc]
  2577 0000205A 0F8417FEFFFF        <2> 		je near rdprintb
  2578 00002060 BF[88C00300]        <2> 		mov edi, buftxt2
  2579 00002065 8A07                <2> 		mov al, [edi]
  2580 00002067 E82E020000          <2> 		call shiftbuftxt2
  2581 0000206C E8F6020000          <2> 		call prcharint
  2582 00002071 E901FEFFFF          <2> 		jmp rdprintb
  2583                              <2> 		
  2584                              <2> 	rdprright:
  2585 00002076 BF[88C00300]        <2> 		mov edi, buftxt2
  2586 0000207B 8A07                <2> 		mov al, [edi]
  2587 0000207D 3C00                <2> 		cmp al, 0
  2588 0000207F 0F84F2FDFFFF        <2> 		je near rdprintb
  2589 00002085 8806                <2> 		mov [esi], al
  2590 00002087 E80A000000          <2> 		call shiftbuftxt2lft
  2591 0000208C E8D6020000          <2> 		call prcharint
  2592 00002091 E9E1FDFFFF          <2> 		jmp rdprintb
  2593                              <2> 		
  2594                              <2> 	shiftbuftxt2lft:
  2595 00002096 55                  <2> 		push ebp
  2596 00002097 89FD                <2> 		mov ebp, edi
  2597                              <2> 	.lp:
  2598 00002099 3C00                <2> 		cmp al, 0
  2599 0000209B 7408                <2> 		je noshiftbuftxt2lft
  2600 0000209D 47                  <2> 		inc edi
  2601 0000209E 8A07                <2> 		mov al, [edi]
  2602 000020A0 8847FF              <2> 		mov [edi - 1], al
  2603 000020A3 EBF4                <2> 		jmp .lp
  2604                              <2> 	noshiftbuftxt2lft:
  2605 000020A5 8A4500              <2> 		mov al, [ebp]
  2606 000020A8 5D                  <2> 		pop ebp
  2607 000020A9 3CC0                <2> 		cmp al, 0xC0
  2608 000020AB 7304                <2> 		jae .nofix
  2609 000020AD 3C80                <2> 		cmp al, 0x80
  2610 000020AF 73E5                <2> 		jae shiftbuftxt2lft
  2611                              <2> 	.nofix:
  2612 000020B1 8A06                <2> 		mov al, [esi]
  2613 000020B3 30E4                <2> 		xor ah, ah
  2614 000020B5 46                  <2> 		inc esi
  2615 000020B6 668B1D[CC220000]    <2> 		mov bx, [modkeyrdpr]
  2616 000020BD C3                  <2> 		ret
  2617                              <2> 		
  2618                              <2> 	rdprdownbck:
  2619 000020BE FECC                <2> 		dec ah
  2620 000020C0 8825[D2220000]      <2> 		mov [commandedit], ah
  2621 000020C6 E884000000          <2> 		call rdprbckspc
  2622 000020CB E9A7FDFFFF          <2> 		jmp rdprintb
  2623                              <2> 	
  2624                              <2> 	rdprdown:
  2625 000020D0 8A25[D2220000]      <2> 		mov ah, [commandedit]
  2626 000020D6 80FC01              <2> 		cmp ah, 1
  2627 000020D9 0F8698FDFFFF        <2> 		jbe near rdprintb
  2628 000020DF 8B3D[388A2D00]      <2> 		mov edi, [commandsentered]
  2629 000020E5 3B3D[348A2D00]      <2> 		cmp edi, [commandlistentries]
  2630 000020EB 7615                <2> 		jbe .nofix
  2631 000020ED 8305[348A2D00]02    <2> 		add dword [commandlistentries], 2
  2632 000020F4 3B3D[348A2D00]      <2> 		cmp edi, [commandlistentries]
  2633 000020FA 7706                <2> 		ja .nofix
  2634 000020FC 893D[348A2D00]      <2> 		mov [commandlistentries], edi
  2635                              <2> 	.nofix:
  2636 00002102 80FC02              <2> 		cmp ah, 2
  2637 00002105 74B7                <2> 		je rdprdownbck
  2638 00002107 80EC02              <2> 		sub ah, 2
  2639 0000210A 8825[D2220000]      <2> 		mov [commandedit], ah
  2640                              <2> 		
  2641                              <2> 	rdprup:
  2642 00002110 3805[D2220000]      <2> 		cmp [commandedit], al
  2643 00002116 0F845BFDFFFF        <2> 		je near rdprintb
  2644 0000211C 833D[348A2D00]00    <2> 		cmp dword [commandlistentries], 0
  2645 00002123 0F844EFDFFFF        <2> 		je near rdprintb
  2646 00002129 FF0D[348A2D00]      <2> 		dec dword [commandlistentries]
  2647                              <2> 	.lp:
  2648 0000212F BF[88C00300]        <2> 		mov edi, buftxt2
  2649 00002134 8A07                <2> 		mov al, [edi]
  2650 00002136 3C00                <2> 		cmp al, 0
  2651 00002138 740E                <2> 		je .start
  2652 0000213A 8806                <2> 		mov [esi], al
  2653 0000213C E855FFFFFF          <2> 		call shiftbuftxt2lft
  2654 00002141 E838020000          <2> 		call prcharq
  2655 00002146 EBE7                <2> 		jmp .lp
  2656                              <2> 	.start:
  2657 00002148 E802000000          <2> 		call rdprbckspc
  2658 0000214D EB48                <2> 		jmp getcurrentcommandstr
  2659                              <2> 	rdprbckspc:
  2660 0000214F 3B35[D4220000]      <2> 		cmp esi, [buftxtloc]
  2661 00002155 7432                <2> 		je nordprupbck
  2662                              <2> 	rdprupbckspclp:
  2663 00002157 66B80800            <2> 		mov ax, 8
  2664 0000215B 668B1D[CC220000]    <2> 		mov bx, [modkeyrdpr]
  2665 00002162 E817020000          <2> 		call prcharq
  2666 00002167 66B82000            <2> 		mov ax, ' '
  2667 0000216B E80E020000          <2> 		call prcharq
  2668 00002170 66B80800            <2> 		mov ax, 8
  2669 00002174 E805020000          <2> 		call prcharq
  2670 00002179 4E                  <2> 		dec esi
  2671 0000217A 3B35[D4220000]      <2> 		cmp esi, [buftxtloc]
  2672 00002180 7402                <2> 		je nordprupbck2
  2673 00002182 EBD3                <2> 		jmp rdprupbckspclp
  2674                              <2> 	nordprupbck2:
  2675 00002184 E8C6060000          <2> 		call termcopy
  2676                              <2> 	nordprupbck:
  2677 00002189 8B3D[308A2D00]      <2> 		mov edi, [commandbufpos]
  2678 0000218F 81C7[3C8A2D00]      <2> 		add edi, commandbuf
  2679 00002195 4F                  <2> 		dec edi
  2680 00002196 C3                  <2> 		ret
  2681                              <2> 	getcurrentcommandstr:
  2682 00002197 8A25[D2220000]      <2> 		mov ah, [commandedit]
  2683 0000219D FE05[D2220000]      <2> 		inc byte [commandedit]
  2684                              <2> 	getccmdlp:
  2685 000021A3 4F                  <2> 		dec edi
  2686 000021A4 8A07                <2> 		mov al, [edi]
  2687 000021A6 81FF[3C8A2D00]      <2> 		cmp edi, commandbuf
  2688 000021AC 722E                <2> 		jb getcmdresetcommandbuf
  2689 000021AE 81EF[3C8A2D00]      <2> 		sub edi, commandbuf
  2690 000021B4 3B3D[308A2D00]      <2> 		cmp edi, [commandbufpos]
  2691 000021BA 0F84B7FCFFFF        <2> 		je near rdprintb
  2692 000021C0 81C7[3C8A2D00]      <2> 		add edi, commandbuf
  2693 000021C6 3C00                <2> 		cmp al, 0
  2694 000021C8 75D9                <2> 		jne getccmdlp
  2695 000021CA FECC                <2> 		dec ah
  2696 000021CC 80FC00              <2> 		cmp ah, 0
  2697 000021CF 77D2                <2> 		ja getccmdlp
  2698 000021D1 47                  <2> 		inc edi
  2699 000021D2 81FF[3C9A2D00]      <2> 		cmp edi, commandbufend
  2700 000021D8 770A                <2> 		ja fixcmdbufb4morerdpr
  2701 000021DA EB15                <2> 		jmp morerdprup
  2702                              <2> 	getcmdresetcommandbuf:
  2703 000021DC BF[3C9A2D00]        <2> 		mov edi, commandbufend
  2704 000021E1 47                  <2> 		inc edi
  2705 000021E2 EBBF                <2> 		jmp getccmdlp
  2706                              <2> 	fixcmdbufb4morerdpr:
  2707 000021E4 4F                  <2> 		dec edi
  2708 000021E5 81EF[3C9A2D00]      <2> 		sub edi, commandbufend
  2709 000021EB 81C7[3C8A2D00]      <2> 		add edi, commandbuf
  2710                              <2> 	morerdprup:
  2711 000021F1 8A07                <2> 		mov al, [edi]
  2712 000021F3 47                  <2> 		inc edi
  2713 000021F4 81EF[3C8A2D00]      <2> 		sub edi, commandbuf
  2714 000021FA 3C00                <2> 		cmp al, 0
  2715 000021FC 0F840CFEFFFF        <2> 		je near rdprintb2
  2716 00002202 3B3D[308A2D00]      <2> 		cmp edi, [commandbufpos]
  2717 00002208 0F8300FEFFFF        <2> 		jae near rdprintb2
  2718 0000220E 81C7[3C8A2D00]      <2> 		add edi, commandbuf
  2719 00002214 8806                <2> 		mov [esi], al
  2720 00002216 46                  <2> 		inc esi
  2721 00002217 57                  <2> 		push edi
  2722 00002218 668B1D[CC220000]    <2> 		mov bx, [modkeyrdpr]
  2723 0000221F 30E4                <2> 		xor ah, ah
  2724 00002221 E858010000          <2> 		call prcharq
  2725 00002226 5F                  <2> 		pop edi
  2726 00002227 81FF[3C9A2D00]      <2> 		cmp edi, commandbufend
  2727 0000222D 76C2                <2> 		jbe morerdprup
  2728 0000222F BF[3C8A2D00]        <2> 		mov edi, commandbuf
  2729 00002234 EBBB                <2> 		jmp morerdprup
  2730                              <2> 
  2731                              <2> 	rdprdel:
  2732 00002236 BF[88C00300]        <2> 		mov edi, buftxt2
  2733 0000223B 8A07                <2> 		mov al, [edi]
  2734 0000223D 3C00                <2> 		cmp al, 0
  2735 0000223F 0F8432FCFFFF        <2> 		je near rdprintb
  2736 00002245 8806                <2> 		mov [esi], al
  2737 00002247 3C80                <2> 		cmp al, 0x80
  2738 00002249 7216                <2> 		jb .fn
  2739                              <2> 	.lp:
  2740 0000224B 46                  <2> 		inc esi
  2741 0000224C 47                  <2> 		inc edi
  2742 0000224D 8A07                <2> 		mov al, [edi]
  2743 0000224F 3C00                <2> 		cmp al, 0
  2744 00002251 0F8420FCFFFF        <2> 		je near rdprintb
  2745 00002257 8806                <2> 		mov [esi], al
  2746 00002259 3C80                <2> 		cmp al, 0x80
  2747 0000225B 7204                <2> 		jb .fn
  2748 0000225D 3CC0                <2> 		cmp al, 0xC0
  2749 0000225F 72EA                <2> 		jb .lp
  2750                              <2> 	.fn:
  2751 00002261 E830FEFFFF          <2> 		call shiftbuftxt2lft
  2752 00002266 E813010000          <2> 		call prcharq
  2753                              <2> 		
  2754                              <2> 	rdprbscheck:
  2755 0000226B 3B35[CE220000]      <2> 		cmp esi, [firstesirdpr]
  2756 00002271 0F8600FCFFFF        <2> 		jbe near rdprintb
  2757                              <2> 	goodbscheck:
  2758 00002277 4E                  <2> 		dec esi
  2759 00002278 8A46FF              <2> 		mov al, [esi - 1]
  2760 0000227B C60600              <2> 		mov byte [esi], 0
  2761 0000227E 3CC0                <2> 		cmp al, 0xC0
  2762 00002280 7306                <2> 		jae .onemore
  2763 00002282 3C80                <2> 		cmp al, 0x80
  2764 00002284 73F1                <2> 		jae goodbscheck
  2765 00002286 EB04                <2> 		jmp .nomore
  2766                              <2> 	.onemore:
  2767 00002288 4E                  <2> 		dec esi
  2768 00002289 C60600              <2> 		mov byte [esi], 0		
  2769                              <2> 	.nomore:
  2770 0000228C 668B1D[CC220000]    <2> 		mov bx, [modkeyrdpr]
  2771 00002293 B008                <2> 		mov al, 8
  2772 00002295 E9B1FCFFFF          <2> 		jmp bscheckequal
  2773                              <2> 		
  2774                              <2> 	shiftbuftxt2:
  2775 0000229A 55                  <2> 		push ebp
  2776 0000229B 89FD                <2> 		mov ebp, edi
  2777                              <2> 	.lp:
  2778 0000229D 3C00                <2> 		cmp al, 0
  2779 0000229F 7409                <2> 		je noshiftbuftxt2
  2780 000022A1 47                  <2> 		inc edi
  2781 000022A2 8A27                <2> 		mov ah, [edi]
  2782 000022A4 8807                <2> 		mov [edi], al
  2783 000022A6 88E0                <2> 		mov al, ah
  2784 000022A8 EBF3                <2> 		jmp .lp
  2785                              <2> 	noshiftbuftxt2:
  2786 000022AA 8A4500              <2> 		mov al, [ebp]
  2787 000022AD 5D                  <2> 		pop ebp
  2788 000022AE 3CC0                <2> 		cmp al, 0xC0
  2789 000022B0 7304                <2> 		jae .nofix
  2790 000022B2 3C80                <2> 		cmp al, 0x80
  2791 000022B4 73E4                <2> 		jae shiftbuftxt2
  2792                              <2> 	.nofix:
  2793 000022B6 BF[88C00300]        <2> 		mov edi, buftxt2
  2794 000022BB 4E                  <2> 		dec esi
  2795 000022BC 8A06                <2> 		mov al, [esi]
  2796 000022BE 8807                <2> 		mov [edi], al
  2797 000022C0 C60600              <2> 		mov byte [esi], 0
  2798 000022C3 66B80800            <2> 		mov ax, 8
  2799 000022C7 C3                  <2> 		ret
  2800                              <2> 		
  2801 000022C8 0000                <2> axcache dw 0
  2802 000022CA 0000                <2> endkeyrdpr dw 0
  2803 000022CC 0000                <2> modkeyrdpr dw 0
  2804 000022CE 00000000            <2> firstesirdpr dd 0
  2805 000022D2 00                  <2> commandedit db 0
  2806 000022D3 00                  <2> txtmask db 0
  2807 000022D4 00000000            <2> buftxtloc dd 0
  2808 000022D8 00000000            <2> endbufferrdpr dd 0
  2809 000022DC 082000              <2> backcursor db 8," ",0
  2810                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2811                              <2> readchar:
  2812 000022DF E807000000          <2> 	call rdcharint
  2813 000022E4 E9B0DFFFFF          <2> 	jmp timerinterrupt
  2814                              <2> getchar:
  2815 000022E9 30C0                <2> 	xor al, al
  2816                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2817 000022EB 66C705[4F230000]01- <2> 		mov word [trans], 1
  2818 000022F3 00                  <2>
  2819 000022F4 3C00                <2> 		cmp al, 0
  2820 000022F6 7509                <2> 		jne transcheck
  2821 000022F8 66C705[4F230000]00- <2> 		mov word [trans], 0
  2822 00002300 00                  <2>
  2823                              <2> 	transcheck:
  2824                              <2> 	%ifdef io.serial
  2825                              <2> 		call serial.receive
  2826                              <2> 		xor ah, ah
  2827                              <2> 		cmp al, 13
  2828                              <2> 		je rdenter
  2829                              <2> 	%else
  2830 00002301 E80E390000          <2> 		call getkey
  2831 00002306 66A1[4D230000]      <2> 		mov ax, [lastkey + 2]
  2832 0000230C 6683F801            <2> 		cmp ax, 1
  2833 00002310 7433                <2> 		je rdend ;return if ESC
  2834 00002312 6683F81C            <2> 		cmp ax, 0x1C
  2835 00002316 7421                <2> 		je rdenter
  2836                              <2> 	%endif
  2837 00002318 66A1[4B230000]      <2> 		mov ax, [lastkey]
  2838 0000231E 668B1D[4F230000]    <2> 		mov bx, [trans]
  2839 00002325 803D[F15B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2840 0000232C 7500                <2> 		jne nospecialtrans
  2841                              <2> 	nospecialtrans:
  2842 0000232E 6609C3              <2> 		or bx, ax
  2843 00002331 6683FB00            <2> 		cmp bx, 0
  2844 00002335 74CA                <2> 		je transcheck
  2845 00002337 EB0C                <2> 		jmp rdend
  2846                              <2> 	rdenter:
  2847 00002339 C1E010              <2> 		shl eax, 16
  2848 0000233C 66B80A00            <2> 		mov ax, 10
  2849 00002340 A3[4B230000]        <2> 		mov [lastkey], eax
  2850                              <2> 	rdend:
  2851 00002345 A1[4B230000]        <2> 		mov eax, [lastkey]
  2852 0000234A C3                  <2> 		ret
  2853                              <2> 		
  2854 0000234B 00000000            <2> lastkey dd 0
  2855 0000234F 0000                <2> trans dw 0
  2856                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2857                              <2> prntchar:
  2858 00002351 30E4                <2> 	xor ah, ah ;this kills unicode from the outside unfortunately
  2859                              <2> %ifdef io.serial
  2860                              <2> 	call prcharint
  2861                              <2> 	jmp timerinterrupt
  2862                              <2> prcharint:	
  2863                              <2> prcharq:
  2864                              <2> 	call serial.send
  2865                              <2> 	ret
  2866                              <2> %else
  2867 00002353 38FB                <2> cmp bl, bh
  2868 00002355 740A                <2> je prchar.notimer
  2869 00002357 E80B000000          <2> call prcharint
  2870 0000235C E938DFFFFF          <2> jmp timerinterrupt
  2871                              <2> prchar.notimer:
  2872 00002361 E818000000          <2> 	call prcharq
  2873 00002366 CF                  <2> 	iret
  2874                              <2> 	
  2875                              <2> prcharint:	;print char, char in ax, modifier in bx, if ecx is eax then termcopy will not happen, will run termcopy if called as is
  2876 00002367 663DFFFE            <2> 	cmp ax, 0xFEFF
  2877 0000236B 740E                <2> 	je .ret
  2878 0000236D 39C1                <2> 	cmp ecx, eax
  2879 0000236F 740D                <2> 	je prcharq
  2880 00002371 E808000000          <2> 	call prcharq
  2881 00002376 E8D4040000          <2> 	call termcopy
  2882                              <2> .ret:
  2883 0000237B C3                  <2> 	ret
  2884 0000237C 00                  <2> termguion db 0
  2885 0000237D 00                  <2> termcopyon db 0
  2886                              <2> prcharq:
  2887 0000237E C1E310              <2> 	shl ebx, 16
  2888 00002381 6689C3              <2> 	mov bx, ax
  2889 00002384 89D8                <2> 	mov eax, ebx
  2890 00002386 A3[57250000]        <2> 	mov [charbuf], eax
  2891 0000238B 8B1D[4F250000]      <2> 	mov ebx, [videobufpos]
  2892 00002391 BF[9CDF2B00]        <2> 	mov edi, videobuf
  2893 00002396 01DF                <2> 	add edi, ebx
  2894 00002398 A1[5C280000]        <2> 	mov eax, [removedvideo]
  2895 0000239D 8907                <2> 	mov [edi], eax
  2896 0000239F A1[57250000]        <2> 	mov eax, [charbuf]
  2897 000023A4 31D2                <2> 	xor edx, edx
  2898 000023A6 668B15[53250000]    <2> 	mov dx, [charpos]
  2899 000023AD 31C9                <2> 	xor ecx, ecx
  2900 000023AF 668B0D[55250000]    <2> 	mov cx, [charxy]
  2901 000023B6 6683F809            <2> 	cmp ax, 9
  2902 000023BA 0F846C000000        <2> 	je near prtab
  2903 000023C0 6683F80D            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2904 000023C4 0F848C000000        <2> 	je near prcr
  2905 000023CA 6683F80A            <2> 	cmp ax, 10
  2906 000023CE 0F84D2000000        <2> 	je near prnlcr
  2907 000023D4 6683F808            <2> 	cmp ax, 8
  2908 000023D8 0F8489000000        <2> 	je near prbs
  2909 000023DE 663D0030            <2> 	cmp ax, (fontend - fonts)/16
  2910 000023E2 0F833E000000        <2> 	jae near prnofont
  2911                              <2> donepr:
  2912 000023E8 8907                <2> 	mov [edi], eax
  2913 000023EA 83C704              <2> 	add edi, 4
  2914 000023ED FEC2                <2> 	inc dl
  2915                              <2> donecrnl:
  2916 000023EF 38CA                <2> 	cmp dl, cl
  2917 000023F1 0F83D3000000        <2> 	jae near preol
  2918                              <2> doneeol:
  2919 000023F7 38EE                <2> 	cmp dh, ch
  2920 000023F9 0F83E8000000        <2> 	jae near prscr	
  2921                              <2> donescr:
  2922 000023FF 89FB                <2> 	mov ebx, edi
  2923 00002401 8B07                <2> 	mov eax, [edi]
  2924 00002403 A3[5C280000]        <2> 	mov [removedvideo], eax
  2925 00002408 81EB[9CDF2B00]      <2> 	sub ebx, videobuf
  2926 0000240E 891D[4F250000]      <2> 	mov [videobufpos], ebx
  2927 00002414 668915[53250000]    <2> 	mov [charpos], dx
  2928 0000241B A1[57250000]        <2> 	mov eax, [charbuf]
  2929 00002420 89C3                <2> 	mov ebx, eax
  2930 00002422 C1EB10              <2> 	shr ebx, 16
  2931 00002425 C3                  <2> 	ret
  2932                              <2> 	
  2933                              <2> 	prnofont:
  2934 00002426 66B80200            <2> 		mov ax, 2
  2935 0000242A EBBC                <2> 		jmp donepr
  2936                              <2> 	prtab:
  2937 0000242C 8B1D[4B250000]      <2> 		mov ebx, [linebeginpos]
  2938 00002432 81EF[9CDF2B00]      <2> 		sub edi, videobuf
  2939 00002438 29DF                <2> 		sub edi, ebx
  2940 0000243A C1EF05              <2> 		shr edi, 5
  2941 0000243D C1E705              <2> 		shl edi, 5
  2942 00002440 83C720              <2> 		add edi, 32
  2943 00002443 C0EA03              <2> 		shr dl, 3
  2944 00002446 C0E203              <2> 		shl dl, 3
  2945 00002449 80C208              <2> 		add dl, 8
  2946 0000244C 81C7[9CDF2B00]      <2> 		add edi, videobuf
  2947 00002452 01DF                <2> 		add edi, ebx
  2948 00002454 EB99                <2> 		jmp donecrnl
  2949                              <2> 	
  2950                              <2> 	prcr:
  2951 00002456 30D2                <2> 		xor dl, dl
  2952 00002458 BF[9CDF2B00]        <2> 		mov edi, videobuf
  2953 0000245D 8B1D[4B250000]      <2> 		mov ebx, [linebeginpos]
  2954 00002463 01DF                <2> 		add edi, ebx
  2955 00002465 EB88                <2> 		jmp donecrnl
  2956                              <2> 			
  2957                              <2> 	prbs:
  2958 00002467 8B1D[4B250000]      <2> 		mov ebx, [linebeginpos]
  2959 0000246D 80FA00              <2> 		cmp dl, 0
  2960 00002470 7412                <2> 		je prbackline
  2961                              <2> 	prnobmr:
  2962 00002472 891D[4B250000]      <2> 		mov [linebeginpos], ebx
  2963 00002478 FECA                <2> 		dec dl
  2964 0000247A 31C0                <2> 		xor eax, eax
  2965 0000247C 83EF04              <2> 		sub edi, 4
  2966 0000247F E96BFFFFFF          <2> 		jmp donecrnl
  2967                              <2> 	prbackline:
  2968 00002484 6631DB              <2> 		xor bx, bx
  2969 00002487 88CA                <2> 		mov dl, cl
  2970 00002489 80FE00              <2> 		cmp dh, 0
  2971 0000248C 74E4                <2> 		je prnobmr
  2972 0000248E 8B1D[4B250000]      <2> 		mov ebx, [linebeginpos]
  2973 00002494 6651                <2> 		push cx
  2974 00002496 31C9                <2> 		xor ecx, ecx
  2975 00002498 8A0C24              <2> 		mov cl, [esp]
  2976 0000249B C1E102              <2> 		shl ecx, 2
  2977 0000249E 29CB                <2> 		sub ebx, ecx
  2978 000024A0 6659                <2> 		pop cx
  2979 000024A2 FECE                <2> 		dec dh
  2980 000024A4 EBCC                <2> 		jmp prnobmr
  2981                              <2> 		
  2982                              <2> 	prnlcr:
  2983 000024A6 FEC6                <2> 		inc dh
  2984 000024A8 31DB                <2> 		xor ebx, ebx
  2985 000024AA 30D2                <2> 		xor dl, dl
  2986 000024AC 88CB                <2> 		mov bl, cl
  2987 000024AE 66C1E302            <2> 		shl bx, 2
  2988 000024B2 BF[9CDF2B00]        <2> 		mov edi, videobuf
  2989 000024B7 031D[4B250000]      <2> 		add ebx, [linebeginpos]
  2990 000024BD 891D[4B250000]      <2> 		mov [linebeginpos], ebx
  2991 000024C3 01DF                <2> 		add edi, ebx
  2992 000024C5 E925FFFFFF          <2> 		jmp donecrnl
  2993                              <2> 		
  2994                              <2> 	preol:
  2995 000024CA 30D2                <2> 		xor dl, dl
  2996 000024CC FEC6                <2> 		inc dh
  2997 000024CE 31DB                <2> 		xor ebx, ebx
  2998 000024D0 88CB                <2> 		mov bl, cl
  2999 000024D2 66C1E302            <2> 		shl bx, 2
  3000 000024D6 031D[4B250000]      <2> 		add ebx, [linebeginpos]
  3001 000024DC 891D[4B250000]      <2> 		mov [linebeginpos], ebx
  3002 000024E2 E910FFFFFF          <2> 		jmp doneeol
  3003                              <2> 	prscr:
  3004 000024E7 FECE                <2> 		dec dh
  3005 000024E9 BF[9CDF2B00]        <2> 		mov edi, videobuf
  3006 000024EE 31DB                <2> 		xor ebx, ebx
  3007 000024F0 88CB                <2> 		mov bl, cl
  3008 000024F2 66C1E302            <2> 		shl bx, 2
  3009 000024F6 01FB                <2> 		add ebx, edi
  3010                              <2> 	intscrollloop:
  3011 000024F8 8B03                <2> 		mov eax, [ebx]
  3012 000024FA 8907                <2> 		mov [edi], eax
  3013 000024FC 83C704              <2> 		add edi, 4
  3014 000024FF 83C304              <2> 		add ebx, 4
  3015 00002502 FEC9                <2> 		dec cl
  3016 00002504 80F900              <2> 		cmp cl, 0
  3017 00002507 75EF                <2> 		jne intscrollloop
  3018 00002509 8A0D[55250000]      <2> 		mov cl, [charxy]
  3019 0000250F FECD                <2> 		dec ch
  3020 00002511 80FD01              <2> 		cmp ch, 1
  3021 00002514 77E2                <2> 		ja intscrollloop
  3022 00002516 31C0                <2> 		xor eax, eax
  3023 00002518 81EF[9CDF2B00]      <2> 		sub edi, videobuf
  3024 0000251E 893D[4B250000]      <2> 		mov [linebeginpos], edi
  3025 00002524 81C7[9CDF2B00]      <2> 		add edi, videobuf
  3026 0000252A 89FB                <2> 		mov ebx, edi
  3027                              <2> 	intloopclear:
  3028 0000252C 8903                <2> 		mov [ebx], eax
  3029 0000252E 83C304              <2> 		add ebx, 4
  3030 00002531 FEC9                <2> 		dec cl
  3031 00002533 80F900              <2> 		cmp cl, 0
  3032 00002536 75F4                <2> 		jne intloopclear
  3033 00002538 FECD                <2> 		dec ch
  3034 0000253A 80FD00              <2> 		cmp ch, 0
  3035 0000253D 75ED                <2> 		jne intloopclear
  3036 0000253F 668B0D[55250000]    <2> 		mov cx, [charxy]
  3037 00002546 E9B4FEFFFF          <2> 		jmp donescr
  3038                              <2> 		
  3039 0000254B 00000000            <2> linebeginpos dd 0
  3040 0000254F 00000000            <2> videobufpos: dd 0
  3041 00002553 0000                <2> charpos db 0,0
  3042 00002555 501E                <2> charxy db 80,30
  3043 00002557 00000000            <2> charbuf dd 0
  3044                              <2> %endif
  3045                              <1> 	%include 'source/interrupts/7_openfile.asm'
  3046                              <2> openfile:
  3047 0000255B E82E400000          <2> 	call loadfile
  3048 00002560 E934DDFFFF          <2> 	jmp timerinterrupt
  3049                              <1> 	%include 'source/interrupts/9_num2str.asm'
  3050                              <2> num2str:
  3051 00002565 3C00                <2> 	cmp al, 0
  3052 00002567 750A                <2> 	jne num2strb
  3053 00002569 E85C0C0000          <2> 	call showdec
  3054 0000256E E926DDFFFF          <2> 	jmp timerinterrupt
  3055                              <2> num2strb:
  3056 00002573 E8A30B0000          <2> 	call showhex
  3057 00002578 E91CDDFFFF          <2> 	jmp timerinterrupt
  3058                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3059                              <2> str2num:
  3060 0000257D 89F7                <2> 	mov edi, esi
  3061 0000257F E8150D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3062 00002584 E910DDFFFF          <2> 	jmp timerinterrupt
  3063                              <2> 	
  3064                              <1> %ifdef threads.included
  3065                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3066                              <2> forkthread:
  3067                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  3068                              <2> 			;returns the PID of the new fork in ebx
  3069                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK INCLUDING FPU AND SSE REGISTERS
  3070 00002589 FA                  <2> 	cli
  3071 0000258A 60                  <2> 	pushad
  3072 0000258B 8925[49260000]      <2> 	mov [.espold], esp
  3073 00002591 C605[37670000]01    <2> 	mov byte [threadson], 1
  3074 00002598 8B1D[38670000]      <2> 	mov ebx, [currentthread]
  3075 0000259E C1E302              <2> 	shl ebx, 2
  3076 000025A1 89A3[3C9A2D00]      <2> 	mov [threadlist + ebx], esp
  3077 000025A7 C1EB02              <2> 	shr ebx, 2
  3078 000025AA 83FB00              <2> 	cmp ebx, 0
  3079 000025AD 7509                <2> 	jne .simplestack
  3080 000025AF BB[00AA0300]        <2> 	mov ebx, stackend
  3081 000025B4 29E3                <2> 	sub ebx, esp
  3082 000025B6 EB0B                <2> 	jmp .stackcalcdone
  3083                              <2> .simplestack:
  3084 000025B8 C1E30A              <2> 	shl ebx, 10
  3085 000025BB 81C3[3CB22D00]      <2> 	add ebx, stack1
  3086 000025C1 29E3                <2> 	sub ebx, esp
  3087                              <2> .stackcalcdone:
  3088 000025C3 29DC                <2> 	sub esp, ebx
  3089 000025C5 81C4[3CB22D00]      <2> 	add esp, stack1
  3090 000025CB 8B1D[33670000]      <2> 	mov ebx, [lastthread]
  3091 000025D1 C1E308              <2> 	shl ebx, 8
  3092 000025D4 01DC                <2> 	add esp, ebx
  3093 000025D6 891D[4D260000]      <2> 	mov [.stackend], ebx
  3094                              <2> 
  3095 000025DC 89E5                <2> 	mov ebp, esp
  3096 000025DE 8B25[49260000]      <2> 	mov esp, [.espold]
  3097                              <2> 
  3098 000025E4 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3099 000025E7 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3100                              <2> 
  3101 000025EB 31DB                <2> 	xor ebx, ebx
  3102                              <2> .stackcopy:
  3103 000025ED 668B041C            <2> 	mov ax, [esp + ebx]
  3104 000025F1 6689441D00          <2> 	mov [ebp + ebx], ax
  3105 000025F6 83C302              <2> 	add ebx, 2
  3106 000025F9 3B1D[4D260000]      <2> 	cmp ebx, [.stackend]
  3107 000025FF 72EC                <2> 	jb .stackcopy
  3108                              <2> 
  3109 00002601 31C0                <2> 	xor eax, eax
  3110 00002603 668CC8              <2> 	mov ax, cs
  3111 00002606 89C2                <2> 	mov edx, eax
  3112 00002608 8B4C2428            <2> 	mov ecx, [esp + 40]
  3113 0000260C 81C900020000        <2> 	or ecx, 0x200
  3114                              <2> 	
  3115 00002612 83FE00              <2> 	cmp esi, 0
  3116 00002615 7504                <2> 	jne .nochangestack
  3117 00002617 8B742420            <2> 	mov esi, [esp + 32]
  3118                              <2> .nochangestack:
  3119 0000261B 89F0                <2> 	mov eax, esi
  3120 0000261D 89EC                <2> 	mov esp, ebp
  3121                              <2> 
  3122 0000261F 89442420            <2> 	mov [esp + 32], eax
  3123 00002623 89542424            <2> 	mov [esp + 36], edx
  3124 00002627 894C2428            <2> 	mov [esp + 40], ecx
  3125                              <2> 
  3126 0000262B 8B1D[33670000]      <2> 	mov ebx, [lastthread]
  3127 00002631 89A3[3C9A2D00]      <2> 	mov [threadlist + ebx], esp
  3128 00002637 83C304              <2> 	add ebx, 4
  3129 0000263A 891D[33670000]      <2> 	mov [lastthread], ebx
  3130 00002640 8B25[49260000]      <2> 	mov esp, [.espold]
  3131 00002646 61                  <2> 	popad
  3132 00002647 FB                  <2> 	sti
  3133 00002648 CF                  <2> 	iret
  3134                              <2> 
  3135 00002649 00000000            <2> .espold dd 0
  3136 0000264D 00000000            <2> .stackend dd 0
  3137                              <1> %endif
  3138                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3139                              <2> gettime:
  3140 00002651 A1[52020000]        <2> 	mov eax, [timeseconds]
  3141 00002656 8B1D[56020000]      <2> 	mov ebx, [timenanoseconds]
  3142 0000265C 89D9                <2> 	mov ecx, ebx
  3143 0000265E C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3144 00002661 E933DCFFFF          <2> 	jmp timerinterrupt
  3145                              <1> 	%include 'source/interrupts/13_settime.asm'
  3146                              <2> settime:
  3147 00002666 A3[52020000]        <2> 	mov [timeseconds], eax
  3148 0000266B 891D[56020000]      <2> 	mov [timenanoseconds], ebx
  3149 00002671 E923DCFFFF          <2> 	jmp timerinterrupt
  3150                              <2> 	
  3151                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3152                              <2> runcmd:
  3153 00002676 BF[88C40300]        <2> 	mov edi, buftxt
  3154                              <2> cpcmd:
  3155 0000267B 8A06                <2> 	mov al, [esi]
  3156 0000267D 8807                <2> 	mov [edi], al
  3157 0000267F 46                  <2> 	inc esi
  3158 00002680 47                  <2> 	inc edi
  3159 00002681 3C00                <2> 	cmp al, 0
  3160 00002683 75F6                <2> 	jne cpcmd
  3161 00002685 E8BF070000          <2> 	call run
  3162 0000268A CF                  <2> 	iret
  3163                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3164                              <2> proginfo:
  3165                              <2> 	;mov ebx, variables
  3166 0000268B 8B35[192F0000]      <2> 	mov esi, [currentcommandloc]
  3167 00002691 89F7                <2> 	mov edi, esi
  3168 00002693 31C9                <2> 	xor ecx, ecx
  3169                              <2> getcommandzeroes:
  3170 00002695 8A07                <2> 	mov al, [edi]
  3171 00002697 47                  <2> 	inc edi
  3172 00002698 3C3B                <2> 	cmp al, ';'
  3173 0000269A 740B                <2> 	je nomorezeroes
  3174 0000269C 3C00                <2> 	cmp al, 0
  3175 0000269E 7407                <2> 	je nomorezeroes
  3176 000026A0 3C20                <2> 	cmp al, ' '
  3177 000026A2 75F1                <2> 	jne getcommandzeroes
  3178 000026A4 41                  <2> 	inc ecx
  3179 000026A5 EBEE                <2> 	jmp getcommandzeroes
  3180                              <2> nomorezeroes:
  3181 000026A7 41                  <2> 	inc ecx
  3182 000026A8 4F                  <2> 	dec edi
  3183 000026A9 8B1D[14B00300]      <2> 	mov ebx, [uid]
  3184 000026AF 8B15[38670000]      <2> 	mov edx, [currentthread]
  3185 000026B5 CF                  <2> 	iret
  3186                              <2> 	
  3187                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3188                              <2> hooksig: ;hook code in ESI to signal in AL
  3189 000026B6 3C00                <2> 	cmp al, 0
  3190 000026B8 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3191                              <2> ;	xor ebx, ebx
  3192                              <2> ;	mov bl, al
  3193                              <2> ;	shl bl, 2
  3194 000026BA BF[04AA0300]        <2> 	mov edi, sigtable
  3195 000026BF 8937                <2> 	mov [edi], esi
  3196                              <2> .quit:
  3197 000026C1 E9D3DBFFFF          <2> 	jmp timerinterrupt
  3198                              <1> %ifdef gui.included
  3199                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3200                              <2> guiint:
  3201 000026C6 3CFD                <2> 	cmp al, 253
  3202 000026C8 0F848E000000        <2> 	je near .getinfo
  3203 000026CE 803D[0A850000]01    <2> 	cmp byte [guion], 1
  3204 000026D5 0F8550000000        <2> 	jne near .nogui
  3205 000026DB 3C00                <2> 	cmp al, 0
  3206 000026DD 0F844D000000        <2> 	je near .clear
  3207 000026E3 3C01                <2> 	cmp al, 1
  3208 000026E5 0F84DE000000        <2> 	je near .putpixel
  3209 000026EB 3C02                <2> 	cmp al, 2
  3210 000026ED 0F84E3000000        <2> 	je near .drawtext
  3211 000026F3 3C03                <2> 	cmp al, 3
  3212 000026F5 0F84F6000000        <2> 	je near .drawline
  3213 000026FB 3C04                <2> 	cmp al, 4
  3214 000026FD 0F8401010000        <2> 	je near .drawcircle
  3215 00002703 3C05                <2> 	cmp al, 5
  3216 00002705 0F8409010000        <2> 	je near .fillcircle
  3217 0000270B 3C06                <2> 	cmp al, 6
  3218 0000270D 0F8411010000        <2> 	je near .drawsquare
  3219 00002713 3C07                <2> 	cmp al, 7
  3220 00002715 0F841C010000        <2> 	je near .fillsquare
  3221 0000271B 3CFE                <2> 	cmp al, 254
  3222 0000271D 0F8461000000        <2> 	je near .setinfo
  3223 00002723 3CFF                <2> 	cmp al, 255
  3224 00002725 0F845E000000        <2> 	je near .reset
  3225                              <2> .nogui:
  3226 0000272B E969DBFFFF          <2> 	jmp timerinterrupt
  3227                              <2> 
  3228                              <2> .clear:		;color in bx
  3229 00002730 66891D[066E0000]    <2> 	mov [background], bx
  3230                              <2> %ifdef gui.background
  3231 00002737 8B1D[DE6D0000]      <2> 	mov ebx, [backgroundimage]
  3232 0000273D 83FB00              <2> 	cmp ebx, 0
  3233 00002740 7410                <2> 	je .clearit
  3234 00002742 C705[DE6D0000]0000- <2> 	mov dword [backgroundimage], 0
  3235 0000274A 0000                <2>
  3236 0000274C 891D[C5270000]      <2> 	mov [.bgi], ebx
  3237                              <2> .clearit:
  3238                              <2> %endif
  3239 00002752 E832460000          <2> 	call guiclear
  3240 00002757 E93DDBFFFF          <2> 	jmp timerinterrupt
  3241                              <2> 	
  3242                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3243 0000275C 31DB                <2> 	xor ebx, ebx
  3244 0000275E 31C9                <2> 	xor ecx, ecx
  3245 00002760 31D2                <2> 	xor edx, edx
  3246 00002762 381D[0A850000]      <2> 	cmp [guion], bl
  3247 00002768 74C1                <2> 	je .nogui
  3248 0000276A 668B1D[066E0000]    <2> 	mov bx, [background]
  3249 00002771 668B15[27550000]    <2> 	mov dx, [resolutionx]
  3250 00002778 668B0D[29550000]    <2> 	mov cx, [resolutiony]
  3251 0000277F E915DBFFFF          <2> 	jmp timerinterrupt
  3252                              <2> 	
  3253                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3254 00002784 E910DBFFFF          <2> 	jmp timerinterrupt
  3255                              <2> .reset:		;resets the screen to the original settings
  3256 00002789 66BBCF7B            <2> 	mov bx, background.original
  3257 0000278D 66891D[066E0000]    <2> 	mov [background], bx
  3258 00002794 66BBFFFF            <2> 	mov bx, 0xFFFF
  3259 00002798 66891D[B9740000]    <2> 	mov [colorfont2], bx
  3260                              <2> %ifdef gui.background
  3261 0000279F 8B1D[DE6D0000]      <2> 	mov ebx, [backgroundimage]
  3262 000027A5 83FB00              <2> 	cmp ebx, 0
  3263 000027A8 750C                <2> 	jne .resetit
  3264 000027AA 8B1D[C5270000]      <2> 	mov ebx, [.bgi]
  3265 000027B0 891D[DE6D0000]      <2> 	mov [backgroundimage], ebx
  3266                              <2> .resetit:
  3267                              <2> %endif
  3268 000027B6 E8CE450000          <2> 	call guiclear
  3269 000027BB E84A460000          <2> 	call reloadallgraphics
  3270 000027C0 E9D4DAFFFF          <2> 	jmp timerinterrupt
  3271                              <2> 
  3272                              <2> %ifdef gui.background
  3273 000027C5 00000000            <2> 	.bgi dd 0
  3274                              <2> %endif
  3275                              <2> 	
  3276                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3277 000027C9 6689DE              <2> 	mov si, bx
  3278 000027CC E8695C0000          <2> 	call putpixel
  3279 000027D1 E9C3DAFFFF          <2> 	jmp timerinterrupt
  3280                              <2> 
  3281                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3282 000027D6 66D1E2              <2> 	shl dx, 1
  3283 000027D9 66891D[B9740000]    <2> 	mov [colorfont2], bx
  3284 000027E0 66893D[066E0000]    <2> 	mov [background], di
  3285 000027E7 E8644C0000          <2> 	call showstring2
  3286 000027EC E9A8DAFFFF          <2> 	jmp timerinterrupt
  3287                              <2> 
  3288                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3289 000027F1 6689F0              <2> 	mov ax, si
  3290 000027F4 6689DE              <2> 	mov si, bx
  3291 000027F7 6689FB              <2> 	mov bx, di
  3292 000027FA E877440000          <2> 	call drawline
  3293 000027FF E995DAFFFF          <2> 	jmp timerinterrupt
  3294                              <2> 
  3295                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3296 00002804 6689F0              <2> 	mov ax, si
  3297 00002807 6689DE              <2> 	mov si, bx
  3298 0000280A E813400000          <2> 	call drawcircle
  3299 0000280F E985DAFFFF          <2> 	jmp timerinterrupt
  3300                              <2> 
  3301                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3302 00002814 6689F0              <2> 	mov ax, si
  3303 00002817 6689DE              <2> 	mov si, bx
  3304 0000281A E80C410000          <2> 	call fillcircle
  3305 0000281F E975DAFFFF          <2> 	jmp timerinterrupt
  3306                              <2> 	
  3307                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3308 00002824 6689F0              <2> 	mov ax, si
  3309 00002827 6689DE              <2> 	mov si, bx
  3310 0000282A 6689FB              <2> 	mov bx, di
  3311 0000282D E8A5460000          <2> 	call drawsquare
  3312 00002832 E962DAFFFF          <2> 	jmp timerinterrupt
  3313                              <2> 
  3314                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3315 00002837 6689F0              <2> 	mov ax, si
  3316 0000283A 6689DE              <2> 	mov si, bx
  3317 0000283D 6689FB              <2> 	mov bx, di
  3318 00002840 E801470000          <2> 	call fillsquare
  3319 00002845 E94FDAFFFF          <2> 	jmp timerinterrupt
  3320                              <1> %endif
  3321                              <1> %ifdef sound.included
  3322                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3323                              <2> soundint:
  3324 0000284A E94ADAFFFF          <2> 	jmp timerinterrupt
  3325                              <1> %endif
  3326                              <1> %ifdef network.included
  3327                              <1> 	%include 'source/interrupts/19_netint.asm'
  3328                              <1> %endif
  3329                              <1> 
  3330                              <1> termcopy:
  3331                              <1> %ifdef io.serial
  3332                              <1> 	ret
  3333                              <1> %else
  3334                              <1> %ifdef terminal.vsync
  3335 0000284F C605[57280000]01    <1> 	mov byte [termcopyneeded], 1
  3336 00002856 C3                  <1> 	ret
  3337                              <1> %else
  3338                              <1> 	call newtermcopy
  3339                              <1> 	ret
  3340                              <1> %endif
  3341 00002857 00                  <1> 	termcopyneeded db 0
  3342 00002858 00000000            <1> 	termcursorpos dd 0
  3343 0000285C 00000000            <1> 	removedvideo dd 0
  3344                              <1> newtermcopy:
  3345 00002860 60                  <1> 	pusha
  3346 00002861 BF[9CDF2B00]        <1> 	mov edi, videobuf
  3347 00002866 31DB                <1> 	xor ebx, ebx
  3348 00002868 881D[57280000]      <1> 	mov [termcopyneeded], bl
  3349 0000286E 8B1D[4F250000]      <1> 	mov ebx, [videobufpos]
  3350 00002874 01DF                <1> 	add edi, ebx
  3351 00002876 893D[58280000]      <1> 	mov [termcursorpos], edi
  3352 0000287C E8D6000000          <1> 	call switchtermcursor
  3353 00002881 803D[0A850000]00    <1> 	cmp byte [guion], 0
  3354 00002888 0F8420000000        <1> 	je near nowincopy
  3355                              <1> %ifdef gui.included
  3356 0000288E C605[767C0000]00    <1> 	mov byte [mouseselecton], 0
  3357 00002895 C605[7D230000]01    <1> 	mov byte [termcopyon], 1
  3358 0000289C 803D[7C230000]01    <1> 	cmp byte [termguion], 1
  3359 000028A3 0F84D7500000        <1> 	je near windowvideocopy
  3360                              <1> %endif
  3361 000028A9 E9A2000000          <1> 	jmp nocopytermatall
  3362                              <1> nowincopy:
  3363 000028AE BE00000A00          <1> 	mov esi, 0xA0000
  3364 000028B3 A1[33020000]        <1> 	mov eax, [basecache]
  3365 000028B8 C1E004              <1> 	shl eax, 4
  3366 000028BB 29C6                <1> 	sub esi, eax
  3367 000028BD BF[9CDF2B00]        <1> 	mov edi, videobuf
  3368 000028C2 31C9                <1> 	xor ecx, ecx
  3369 000028C4 668B0D[55250000]    <1> 	mov cx, [charxy]
  3370                              <1> nowincopy2:
  3371 000028CB 8B07                <1> 	mov eax, [edi]
  3372 000028CD 81C748D50000        <1> 	add edi, (videobuf2 - videobuf)
  3373 000028D3 8B1F                <1> 	mov ebx, [edi]
  3374 000028D5 8907                <1> 	mov [edi], eax
  3375 000028D7 81EF48D50000        <1> 	sub edi, (videobuf2 - videobuf)
  3376 000028DD 83C702              <1> 	add edi, 2
  3377 000028E0 39D8                <1> 	cmp eax, ebx
  3378 000028E2 7445                <1> 	je nopresentwinfont
  3379 000028E4 83EF02              <1> 	sub edi, 2
  3380 000028E7 BD[64870000]        <1> 	mov ebp, fonts
  3381 000028EC 31C0                <1> 	xor eax, eax
  3382 000028EE 668B07              <1> 	mov ax, [edi]
  3383 000028F1 C1E004              <1> 	shl eax, 4
  3384 000028F4 01C5                <1> 	add ebp, eax
  3385 000028F6 83C702              <1> 	add edi, 2
  3386 000028F9 668B1F              <1> 	mov bx, [edi]
  3387 000028FC 31D2                <1> 	xor edx, edx
  3388 000028FE 8A15[55250000]      <1> 	mov dl, [charxy]
  3389 00002904 C1C110              <1> 	rol ecx, 16
  3390 00002907 B110                <1> 	mov cl, 16
  3391                              <1> nowinfont:
  3392 00002909 8A4500              <1> 	mov al, [ebp]
  3393 0000290C D0C8                <1> 	ror al, 1
  3394 0000290E 80FB80              <1> 	cmp bl, 0x80
  3395 00002911 7202                <1> 	jb notnotfont
  3396 00002913 F6D0                <1> 	not al
  3397                              <1> notnotfont:
  3398 00002915 8806                <1> 	mov [esi], al
  3399 00002917 01D6                <1> 	add esi, edx
  3400 00002919 45                  <1> 	inc ebp
  3401 0000291A FEC9                <1> 	dec cl
  3402 0000291C 80F900              <1> 	cmp cl, 0
  3403 0000291F 75E8                <1> 	jne nowinfont
  3404 00002921 C1E204              <1> 	shl edx, 4
  3405 00002924 29D6                <1> 	sub esi, edx
  3406 00002926 C1C110              <1> 	rol ecx, 16
  3407                              <1> nopresentwinfont:
  3408 00002929 83C702              <1> 	add edi, 2
  3409 0000292C 46                  <1> 	inc esi
  3410 0000292D FEC9                <1> 	dec cl
  3411 0000292F 80F900              <1> 	cmp cl, 0
  3412 00002932 7597                <1> 	jne nowincopy2
  3413 00002934 8A0D[55250000]      <1> 	mov cl, [charxy]
  3414 0000293A 31D2                <1> 	xor edx, edx
  3415 0000293C 88CA                <1> 	mov dl, cl
  3416 0000293E 29D6                <1> 	sub esi, edx
  3417 00002940 C1E204              <1> 	shl edx, 4
  3418 00002943 01D6                <1> 	add esi, edx
  3419 00002945 FECD                <1> 	dec ch
  3420 00002947 80FD00              <1> 	cmp ch, 0
  3421 0000294A 0F857BFFFFFF        <1> 	jne nowincopy2
  3422                              <1> nocopytermatall:
  3423 00002950 E802000000          <1> 	call switchtermcursor
  3424 00002955 61                  <1> 	popa
  3425 00002956 C3                  <1> 	ret
  3426                              <1> 	
  3427                              <1> switchtermcursor:
  3428 00002957 8B3D[58280000]      <1> 	mov edi, [termcursorpos]
  3429 0000295D 668B4702            <1> 	mov ax, [edi + 2]
  3430 00002961 668B1F              <1> 	mov bx, [edi]
  3431 00002964 663D8000            <1> 	cmp ax, 0x80
  3432 00002968 7206                <1> 	jb movlargecursorterm
  3433 0000296A 66B80700            <1> 	mov ax, 7
  3434 0000296E EB04                <1> 	jmp movedcursorterm
  3435                              <1> movlargecursorterm:
  3436 00002970 66B8F000            <1> 	mov ax, 0xF0
  3437                              <1> movedcursorterm:
  3438 00002974 66894702            <1> 	mov [edi + 2], ax
  3439 00002978 6683FB00            <1> 	cmp bx, 0
  3440 0000297C 7507                <1> 	jne fixednocursorterm
  3441 0000297E 66BB2000            <1> 	mov bx, ' '
  3442 00002982 66891F              <1> 	mov [edi], bx
  3443                              <1> fixednocursorterm:
  3444 00002985 C3                  <1> 	ret
  3445                              <1> %endif
  3446                                      %include "source/dosints.asm"
  3447                              <1> int20h:
  3448 00002986 66B8004C            <1> mov ax, 0x4C00
  3449                              <1> int21h:
  3450                              <1> dostosolleros:
  3451 0000298A 6650                <1> 	push ax
  3452 0000298C 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3453 00002990 8ED8                <1> 	mov ds, ax
  3454 00002992 8EC0                <1> 	mov es, ax
  3455 00002994 8EE0                <1> 	mov fs, ax
  3456 00002996 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3457 0000299A 8EE8                <1> 	mov gs, ax
  3458 0000299C 6658                <1> 	pop ax
  3459 0000299E 9C                  <1> 	pushf
  3460 0000299F 60                  <1> 	pusha
  3461 000029A0 80FC01              <1> 	cmp ah, 1
  3462 000029A3 0F8449000000        <1> 	je near dosgchar
  3463 000029A9 80FC02              <1> 	cmp ah, 2
  3464 000029AC 0F8447000000        <1> 	je near doswchar
  3465 000029B2 80FC09              <1> 	cmp ah, 9
  3466 000029B5 0F844B000000        <1> 	je near dosprintstr
  3467 000029BB 80FC0A              <1> 	cmp ah, 0xA
  3468 000029BE 0F845A000000        <1> 	je near dosgetstr
  3469 000029C4 80FC2B              <1> 	cmp ah, 0x2B
  3470 000029C7 0F8493000000        <1> 	je near dosgetdate
  3471 000029CD 80FC2C              <1> 	cmp ah, 0x2C
  3472 000029D0 0F84AD000000        <1> 	je near dosgettime
  3473 000029D6 80FC4C              <1> 	cmp ah, 0x4C
  3474 000029D9 0F84C2000000        <1> 	je near dosexit
  3475                              <1> backtodos:
  3476 000029DF 61                  <1> 	popa
  3477 000029E0 9D                  <1> 	popf
  3478 000029E1 6650                <1> 	push ax
  3479 000029E3 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3480 000029E7 8ED8                <1> 	mov ds, ax
  3481 000029E9 8EC0                <1> 	mov es, ax
  3482 000029EB 8EE0                <1> 	mov fs, ax
  3483 000029ED 8EE8                <1> 	mov gs, ax
  3484 000029EF 6658                <1> 	pop ax
  3485 000029F1 CF                  <1> 	iret
  3486                              <1> 
  3487                              <1> dosgchar:
  3488 000029F2 E8F2F8FFFF          <1> 	call getchar
  3489 000029F7 EBE6                <1> 	jmp backtodos
  3490                              <1> 	
  3491                              <1> doswchar:
  3492 000029F9 88D0                <1> 	mov al, dl
  3493 000029FB 30E4                <1> 	xor ah, ah
  3494 000029FD B307                <1> 	mov bl, 7
  3495 000029FF E863F9FFFF          <1> 	call prcharint
  3496 00002A04 EBD9                <1> 	jmp backtodos
  3497                              <1> 	
  3498                              <1> dosprintstr:
  3499 00002A06 31F6                <1> 	xor esi, esi
  3500 00002A08 6689D6              <1> 	mov si, dx
  3501 00002A0B 81C600004000        <1> 	add esi, dosprogloc
  3502 00002A11 66B82400            <1> 	mov ax, "$"
  3503 00002A15 B307                <1> 	mov bl, 7
  3504 00002A17 E8FAF2FFFF          <1> 	call printint
  3505 00002A1C EBC1                <1> 	jmp backtodos
  3506                              <1> 	
  3507                              <1> dosgetstr:
  3508 00002A1E 31F6                <1> 	xor esi, esi
  3509 00002A20 6689D6              <1> 	mov si, dx
  3510 00002A23 81C600004000        <1> 	add esi, dosprogloc
  3511 00002A29 B900000000          <1> 	mov ecx, 0
  3512 00002A2E 8A0E                <1> 	mov cl, [esi]
  3513 00002A30 83C602              <1> 	add esi, 2
  3514 00002A33 89F7                <1> 	mov edi, esi
  3515 00002A35 8935[5C2A0000]      <1> 	mov [stringstart], esi
  3516 00002A3B 01CF                <1> 	add edi, ecx
  3517 00002A3D B00A                <1> 	mov al, 10
  3518 00002A3F B307                <1> 	mov bl, 7
  3519 00002A41 E807F4FFFF          <1> 	call rdprintdos
  3520 00002A46 89F1                <1> 	mov ecx, esi
  3521 00002A48 2B0D[5C2A0000]      <1> 	sub ecx, [stringstart]
  3522 00002A4E 8B35[5C2A0000]      <1> 	mov esi, [stringstart]
  3523 00002A54 884EFF              <1> 	mov [esi - 1], cl
  3524 00002A57 884EFE              <1> 	mov [esi - 2], cl
  3525 00002A5A EB83                <1> 	jmp backtodos
  3526 00002A5C 00000000            <1> stringstart dd 0
  3527                              <1> 
  3528                              <1> dosgetdate:
  3529 00002A60 E81E150000          <1> 	call time
  3530 00002A65 8A0D[89420000]      <1> 	mov cl, [RTCtimeYear]
  3531 00002A6B B500                <1> 	mov ch, 0
  3532 00002A6D 6681C1D007          <1> 	add cx, 2000
  3533 00002A72 8A35[88420000]      <1> 	mov dh, [RTCtimeMonth]
  3534 00002A78 8A15[87420000]      <1> 	mov dl, [RTCtimeDay]
  3535 00002A7E E95CFFFFFF          <1> 	jmp backtodos
  3536                              <1> 
  3537                              <1> dosgettime:
  3538 00002A83 E8FB140000          <1> 	call time
  3539 00002A88 8A2D[86420000]      <1> 	mov ch, [RTCtimeHour]
  3540 00002A8E 8A0D[85420000]      <1> 	mov cl, [RTCtimeMinute]
  3541 00002A94 8A35[84420000]      <1> 	mov dh, [RTCtimeSecond]
  3542 00002A9A B200                <1> 	mov dl, 0
  3543 00002A9C E93EFFFFFF          <1> 	jmp backtodos
  3544                              <1> 	
  3545                              <1> dosexit:
  3546 00002AA1 BE[E5840000]        <1> 	mov esi, line
  3547 00002AA6 E864F2FFFF          <1> 	call print
  3548 00002AAB 61                  <1> 	popa
  3549 00002AAC 9D                  <1> 	popf
  3550 00002AAD 8B25[08AE0300]      <1> 	mov esp, [previousstack]
  3551 00002AB3 31DB                <1> 	xor ebx, ebx
  3552 00002AB5 88C3                <1> 	mov bl, al
  3553 00002AB7 80FB00              <1> 	cmp bl, 0
  3554 00002ABA 0F85D8F1FFFF        <1> 	jne near exitprog.error
  3555 00002AC0 C3                  <1> 	ret
  3556                                      %include "source/shush.asm"
  3557                              <1> os:
  3558                              <1> setdefenv:
  3559 00002AC1 C605[14AE0300]2F    <1> 	mov byte [currentfolder], '/'
  3560 00002AC8 C705[10AE0300]0100- <1> 	mov dword [currentfolderloc], 1
  3561 00002AD0 0000                <1>
  3562 00002AD2 E8E4F2FFFF          <1> 	call clear
  3563                              <1> 	
  3564                              <1> bootfilecheck:
  3565 00002AD7 803D[18B00300]01    <1> 	cmp byte [ranboot], 1
  3566 00002ADE 0F841E000000        <1> 	je near nobootfile
  3567                              <1> 	%ifdef hardware.automatic
  3568 00002AE4 E86F360000          <1> 		call initializelater ;Initialize components that have debug messages
  3569                              <1> 	%endif
  3570                              <1> 	%ifdef disk.none
  3571                              <1> 	%else
  3572 00002AE9 BF[A4840000]        <1> 		mov edi, bootfilename
  3573 00002AEE BE00004000          <1> 		mov esi, 0x400000
  3574 00002AF3 E8963A0000          <1> 		call loadfile
  3575 00002AF8 83FA00              <1> 		cmp edx, 0
  3576 00002AFB 7505                <1> 		jne nobootfile
  3577 00002AFD E81A0D0000          <1> 		call progbatchfound
  3578                              <1> 	%endif
  3579                              <1> nobootfile:	
  3580 00002B02 C605[18B00300]01    <1> 	mov byte [ranboot], 1
  3581                              <1> 
  3582 00002B09 BE[02000000]        <1> 	mov esi, signature
  3583                              <1> .sigcopyloop:	;this prevents an odd error
  3584 00002B0E 658A06              <1> 	mov al, [gs:esi]
  3585 00002B11 8806                <1> 	mov [esi], al
  3586 00002B13 46                  <1> 	inc esi
  3587 00002B14 81FE[10000000]      <1> 	cmp esi, signatureend
  3588 00002B1A 72F2                <1> 	jb .sigcopyloop
  3589                              <1> 	
  3590 00002B1C BE[02000000]        <1> 	mov esi, signature
  3591 00002B21 E8E9F1FFFF          <1> 	call print
  3592 00002B26 8B0D[0C000000]      <1> 	mov ecx, [signatureend - 4]
  3593 00002B2C E899060000          <1> 	call showdec
  3594 00002B31 E8D4F1FFFF          <1> 	call printline
  3595 00002B36 BE[C1840000]        <1> 	mov esi, userask
  3596 00002B3B E8CFF1FFFF          <1> 	call print
  3597                              <1> 
  3598                              <1> usercheck:
  3599 00002B40 BE[88C40300]        <1> 	mov esi, buftxt
  3600 00002B45 BF[88C80300]        <1> 	mov edi, buftxtend
  3601 00002B4A B00A                <1> 	mov al, 10
  3602 00002B4C E8E8F2FFFF          <1> 	call rdprint
  3603 00002B51 56                  <1> 	push esi
  3604 00002B52 BE[CB840000]        <1> 	mov esi, pwdask
  3605 00002B57 E8B3F1FFFF          <1> 	call print
  3606 00002B5C 5E                  <1> 	pop esi
  3607 00002B5D 46                  <1> 	inc esi
  3608 00002B5E 8935[502C0000]      <1> 	mov [esipass], esi
  3609                              <1> passcheck:
  3610 00002B64 E880F7FFFF          <1> 	call getchar
  3611 00002B69 3C0A                <1> 	cmp al, 10
  3612 00002B6B 0F8438000000        <1> 	je near gotpass
  3613 00002B71 3C08                <1> 	cmp al, 8
  3614 00002B73 0F8412000000        <1> 	je near backpass
  3615 00002B79 8806                <1> 	mov [esi], al
  3616 00002B7B 46                  <1> 	inc esi
  3617 00002B7C 30E4                <1> 	xor ah, ah
  3618 00002B7E B02A                <1> 	mov al, "*"
  3619 00002B80 E8E2F7FFFF          <1> 	call prcharint
  3620 00002B85 EBDD                <1> 	jmp passcheck
  3621 00002B87 08200800            <1> backcursor2 db 8," ",8,0
  3622                              <1> backpass:
  3623 00002B8B 3B35[502C0000]      <1> 	cmp esi, [esipass]
  3624 00002B91 0F84CDFFFFFF        <1> 	je near passcheck
  3625 00002B97 4E                  <1> 	dec esi
  3626 00002B98 C60600              <1> 	mov byte [esi], 0
  3627 00002B9B 56                  <1> 	push esi
  3628 00002B9C BE[872B0000]        <1> 	mov esi, backcursor2
  3629 00002BA1 E869F1FFFF          <1> 	call print
  3630 00002BA6 5E                  <1> 	pop esi
  3631 00002BA7 EBBB                <1> 	jmp passcheck
  3632                              <1> gotpass:
  3633 00002BA9 B00A                <1> 	mov al, 10
  3634 00002BAB E8B7F7FFFF          <1> 	call prcharint
  3635 00002BB0 30C0                <1> 	xor al, al
  3636 00002BB2 31C9                <1> 	xor ecx, ecx
  3637 00002BB4 8806                <1> 	mov [esi], al
  3638 00002BB6 BB[E7840000]        <1> 	mov ebx, userlst
  3639                              <1> userfind:
  3640 00002BBB BE[88C40300]        <1> 	mov esi, buftxt
  3641 00002BC0 8A06                <1> 	mov al, [esi]
  3642 00002BC2 3C00                <1> 	cmp al, 0
  3643 00002BC4 0F84F7FEFFFF        <1> 	je near os
  3644 00002BCA 891D[542C0000]      <1> 	mov [usercache], ebx
  3645 00002BD0 E848030000          <1> 	call tester
  3646 00002BD5 3C01                <1> 	cmp al, 1
  3647 00002BD7 7416                <1> 	je pwdtest
  3648 00002BD9 41                  <1> 	inc ecx
  3649                              <1> nxtuser:
  3650 00002BDA 8A03                <1> 	mov al, [ebx]
  3651 00002BDC 43                  <1> 	inc ebx
  3652 00002BDD 3C00                <1> 	cmp al, 0
  3653 00002BDF 75F9                <1> 	jne nxtuser
  3654 00002BE1 81FB[0A850000]      <1> 	cmp ebx, userlstend
  3655 00002BE7 0F83D4FEFFFF        <1> 	jae near os
  3656 00002BED EBCC                <1> 	jmp userfind
  3657                              <1> pwdtest:
  3658 00002BEF 46                  <1> 	inc esi
  3659 00002BF0 43                  <1> 	inc ebx
  3660 00002BF1 E827030000          <1> 	call tester
  3661 00002BF6 3C01                <1> 	cmp al, 1
  3662 00002BF8 7402                <1> 	je pwdrgt
  3663 00002BFA EBDE                <1> 	jmp nxtuser
  3664                              <1> pwdrgt:
  3665 00002BFC D1E9                <1> 	shr ecx, 1
  3666 00002BFE 890D[14B00300]      <1> 	mov [uid], ecx
  3667 00002C04 E8B2F1FFFF          <1> 	call clear
  3668 00002C09 31C9                <1> 	xor ecx, ecx
  3669 00002C0B 41                  <1> 	inc ecx
  3670 00002C0C 890D[308A2D00]      <1> 	mov [commandbufpos], ecx
  3671                              <1> returnfromexp:
  3672 00002C12 66B90002            <1> 	mov cx, 200h
  3673 00002C16 BE[88C40300]        <1> 	mov esi, buftxt
  3674 00002C1B 8935[192F0000]      <1> 	mov [currentcommandloc], esi
  3675 00002C21 E822000000          <1> 	call bufclr
  3676                              <1> clearolddata:
  3677 00002C26 31C0                <1> 	xor eax, eax
  3678 00002C28 A2[19B00300]        <1> 	mov [IFON], al
  3679 00002C2D A2[1AB00300]        <1> 	mov [IFTRUE], al
  3680 00002C32 A2[82B00300]        <1> 	mov [BATCHISON], al
  3681 00002C37 A3[7EB00300]        <1> 	mov [BATCHPOS], eax
  3682 00002C3C A2[83B00300]        <1> 	mov [LOOPON], al
  3683 00002C41 A3[84B00300]        <1> 	mov [LOOPPOS], eax
  3684 00002C46 EB30                <1> 	jmp nwcmd
  3685                              <1> bufclr:	
  3686 00002C48 30C0                <1> 	xor al, al
  3687 00002C4A 8806                <1> 	mov [esi], al
  3688 00002C4C 46                  <1> 	inc esi
  3689 00002C4D E2F9                <1> 	loop bufclr
  3690 00002C4F C3                  <1> 	ret
  3691                              <1> 
  3692 00002C50 00000000            <1> esipass dd 0
  3693 00002C54 [E7840000]          <1> usercache dd userlst
  3694                              <1> 	
  3695                              <1> buftxtclear:
  3696 00002C58 30C0                <1> 	xor al, al
  3697 00002C5A BE[88C40300]        <1> 	mov esi, buftxt
  3698 00002C5F 81FE[88C80300]      <1> clearbuftxt: cmp esi, buf2
  3699 00002C65 730E                <1> 	jae retbufclr
  3700 00002C67 8806                <1> 	mov [esi], al
  3701 00002C69 46                  <1> 	inc esi
  3702 00002C6A EBF3                <1> 	jmp clearbuftxt
  3703                              <1> 
  3704 00002C6C 39DE                <1> clearitbuf: cmp esi, ebx
  3705 00002C6E 7305                <1> 	jae retbufclr
  3706 00002C70 8806                <1> 	mov [esi], al
  3707 00002C72 46                  <1> 	inc esi
  3708 00002C73 EBF7                <1> 	jmp clearitbuf
  3709 00002C75 C3                  <1> retbufclr: ret
  3710                              <1> 
  3711 00002C76 EB00                <1> full:	jmp nwcmd
  3712                              <1> 
  3713                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3714                              <1> nwcmd:
  3715 00002C78 FB                  <1> 	sti
  3716 00002C79 31C0                <1> 	xor eax, eax
  3717 00002C7B 3905[412E0000]      <1> 	cmp [nextcommandloc], eax
  3718 00002C81 7413                <1> 	je nomultiplecommand
  3719 00002C83 8B35[412E0000]      <1> 	mov esi, [nextcommandloc]
  3720 00002C89 8935[452E0000]      <1> 	mov [thiscommandloc], esi
  3721 00002C8F E8BA010000          <1> 	call fixvariables
  3722 00002C94 EBE2                <1> 	jmp nwcmd
  3723                              <1> nomultiplecommand:
  3724 00002C96 A3[452E0000]        <1> 	mov [thiscommandloc], eax
  3725 00002C9B 3805[37670000]      <1> 	cmp [threadson], al
  3726 00002CA1 7405                <1> 	je noclinwcmd
  3727 00002CA3 A2[37670000]        <1> 	mov [threadson], al
  3728                              <1> noclinwcmd:
  3729 00002CA8 B001                <1> 	mov al, 1
  3730 00002CAA 3805[82B00300]      <1> 	cmp [BATCHISON], al
  3731 00002CB0 7501                <1> 	jne cancel
  3732 00002CB2 C3                  <1> 	ret
  3733 00002CB3 30C0                <1> cancel:	xor al, al
  3734 00002CB5 A2[19B00300]        <1> 	mov [IFON], al
  3735 00002CBA A2[82B00300]        <1> 	mov [BATCHISON], al
  3736 00002CBF B05B                <1> 	mov al, '['
  3737 00002CC1 66BB0700            <1> 	mov bx, 7
  3738 00002CC5 E8B4F6FFFF          <1> 	call prcharq
  3739 00002CCA 8B35[542C0000]      <1> 	mov esi, [usercache]
  3740 00002CD0 E819F0FFFF          <1> 	call printquiet
  3741 00002CD5 BE[D5840000]        <1> 	mov esi, computer
  3742 00002CDA E80FF0FFFF          <1> 	call printquiet
  3743 00002CDF BE[14AE0300]        <1> 	mov esi, currentfolder
  3744 00002CE4 0335[0CAE0300]      <1> 	add esi, [lastfolderloc]
  3745 00002CEA E8FFEFFFFF          <1> 	call printquiet
  3746 00002CEF BE[E0840000]        <1> 	mov esi, endprompt
  3747 00002CF4 E816F0FFFF          <1> 	call print
  3748 00002CF9 E85AFFFFFF          <1> 	call buftxtclear
  3749 00002CFE BE[88C40300]        <1> 	mov esi, buftxt
  3750 00002D03 C605[D2220000]01    <1> 	mov byte [commandedit], 1
  3751 00002D0A B00A                <1> 	mov al, 10
  3752 00002D0C 66BB0700            <1> 	mov bx, 7
  3753 00002D10 BF[88C80300]        <1> 	mov edi, buftxtend
  3754 00002D15 E81FF1FFFF          <1> 	call rdprint
  3755 00002D1A C605[D2220000]00    <1> 	mov byte [commandedit], 0
  3756 00002D21 803D[88C40300]00    <1> 	cmp byte [buftxt], 0
  3757 00002D28 0F844AFFFFFF        <1> 	je near nwcmd
  3758 00002D2E 8B35[308A2D00]      <1> gotcmd:	mov esi, [commandbufpos]
  3759 00002D34 8935[2C8A2D00]      <1> 	mov [lastcommandpos], esi
  3760 00002D3A FF05[388A2D00]      <1> 	inc dword [commandsentered]
  3761 00002D40 BF[88C40300]        <1> 	mov edi, buftxt
  3762 00002D45 81C6[3C8A2D00]      <1> 	add esi, commandbuf
  3763 00002D4B 81FE[3C9A2D00]      <1> 	cmp esi, commandbufend
  3764 00002D51 7605                <1> 	jbe copycommand
  3765 00002D53 BE[3C8A2D00]        <1> 	mov esi, commandbuf
  3766                              <1> copycommand:
  3767 00002D58 8A07                <1> 	mov al, [edi]
  3768 00002D5A 8806                <1> 	mov [esi], al
  3769 00002D5C 47                  <1> 	inc edi
  3770 00002D5D 46                  <1> 	inc esi
  3771 00002D5E 3C00                <1> 	cmp al, 0
  3772 00002D60 740F                <1> 	je donecopy
  3773 00002D62 81FE[3C9A2D00]      <1> 	cmp esi, commandbufend
  3774 00002D68 76EE                <1> 	jbe copycommand
  3775 00002D6A BE[3C8A2D00]        <1> 	mov esi, commandbuf
  3776 00002D6F EBE7                <1> 	jmp copycommand
  3777                              <1> donecopy:
  3778 00002D71 81EE[3C8A2D00]      <1> 	sub esi, commandbuf
  3779 00002D77 8935[308A2D00]      <1> 	mov [commandbufpos], esi
  3780 00002D7D E8C7000000          <1> 	call run
  3781 00002D82 E9F1FEFFFF          <1> 	jmp nwcmd
  3782                              <1> 
  3783 00002D87 E8CCFEFFFF          <1> input:	call buftxtclear
  3784 00002D8C BE[88C40300]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3785 00002D91 BF[88C80300]        <1> 	mov edi, buftxtend
  3786 00002D96 B00A                <1> stdin:	mov al, 10
  3787 00002D98 B307                <1> 	mov bl, 7
  3788 00002D9A E89AF0FFFF          <1> 	call rdprint
  3789 00002D9F C3                  <1> 	ret
  3790                              <1> 
  3791                              <1> replacevariable:
  3792 00002DA0 8A4601              <1> 	mov al, [esi + 1]
  3793 00002DA3 C64601FF            <1> 	mov byte [esi + 1], 255
  3794 00002DA7 3C24                <1> 	cmp al, "$"
  3795 00002DA9 0F849F000000        <1> 	je near fixvariables
  3796 00002DAF 884601              <1> 	mov [esi + 1], al
  3797 00002DB2 56                  <1> 	push esi
  3798 00002DB3 81EE[88C40300]      <1> 	sub esi, buftxt
  3799 00002DB9 89F7                <1> 	mov edi, esi
  3800 00002DBB 81C6[88C40300]      <1> 	add esi, buftxt
  3801 00002DC1 47                  <1> 	inc edi
  3802 00002DC2 BB[88B00300]        <1> 	mov ebx, variables
  3803 00002DC7 E8AC160000          <1> 	call nxtvrech
  3804 00002DCC 89F7                <1> 	mov edi, esi
  3805 00002DCE 31DB                <1> 	xor ebx, ebx
  3806 00002DD0 4E                  <1> 	dec esi
  3807                              <1> findvarname:
  3808 00002DD1 4E                  <1> 	dec esi
  3809 00002DD2 8A06                <1> 	mov al, [esi]
  3810 00002DD4 43                  <1> 	inc ebx
  3811 00002DD5 3C04                <1> 	cmp al, 4
  3812 00002DD7 75F8                <1> 	jne findvarname
  3813 00002DD9 5E                  <1> 	pop esi
  3814                              <1> replacevarloop:
  3815 00002DDA 8A07                <1> 	mov al, [edi]
  3816 00002DDC 3C00                <1> 	cmp al, 0
  3817 00002DDE 0F8410000000        <1> 	je near compressbuftxt
  3818 00002DE4 83FB00              <1> 	cmp ebx, 0
  3819 00002DE7 0F8413000000        <1> 	je near expandbuftxt
  3820 00002DED 8806                <1> 	mov [esi], al
  3821 00002DEF 4B                  <1> 	dec ebx
  3822 00002DF0 46                  <1> 	inc esi
  3823 00002DF1 47                  <1> 	inc edi
  3824 00002DF2 EBE6                <1> 	jmp replacevarloop
  3825                              <1> compressbuftxt:
  3826 00002DF4 8A041E              <1> 	mov al, [esi + ebx]
  3827 00002DF7 8806                <1> 	mov [esi], al
  3828 00002DF9 46                  <1> 	inc esi
  3829 00002DFA 3C00                <1> 	cmp al, 0
  3830 00002DFC 75F6                <1> 	jne compressbuftxt
  3831 00002DFE EB4E                <1> 	jmp fixvariables
  3832                              <1> expandbuftxt:
  3833 00002E00 89F1                <1> 	mov ecx, esi
  3834 00002E02 8A26                <1> 	mov ah, [esi]
  3835                              <1> expandbuftxtlp:
  3836 00002E04 8A1E                <1> 	mov bl, [esi]
  3837 00002E06 46                  <1> 	inc esi
  3838 00002E07 8A3E                <1> 	mov bh, [esi]
  3839 00002E09 8826                <1> 	mov [esi], ah
  3840 00002E0B 88FC                <1> 	mov ah, bh
  3841 00002E0D 80FB00              <1> 	cmp bl, 0
  3842 00002E10 75F2                <1> 	jne expandbuftxtlp
  3843 00002E12 89CE                <1> 	mov esi, ecx
  3844 00002E14 8806                <1> 	mov [esi], al
  3845 00002E16 47                  <1> 	inc edi
  3846 00002E17 8A07                <1> 	mov al, [edi]
  3847 00002E19 3C00                <1> 	cmp al, 0
  3848 00002E1B 0F842D000000        <1> 	je near fixvariables
  3849 00002E21 46                  <1> 	inc esi
  3850 00002E22 EBDC                <1> 	jmp expandbuftxt
  3851                              <1> multipleprogline:
  3852 00002E24 30E4                <1> 	xor ah, ah
  3853 00002E26 8826                <1> 	mov [esi], ah
  3854 00002E28 46                  <1> 	inc esi
  3855 00002E29 8935[412E0000]      <1> 	mov [nextcommandloc], esi
  3856 00002E2F EB3B                <1> 	jmp donefixvariables
  3857                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3858 00002E31 46                  <1> 	inc esi
  3859 00002E32 8A06                <1> 	mov al, [esi]
  3860 00002E34 C606FF              <1> 	mov byte [esi], 255
  3861 00002E37 3C23                <1> 	cmp al, '#'
  3862 00002E39 7413                <1> 	je fixvariables
  3863 00002E3B 4E                  <1> 	dec esi
  3864 00002E3C C60600              <1> 	mov byte [esi], 0
  3865 00002E3F EB0D                <1> 	jmp fixvariables
  3866                              <1> 	
  3867 00002E41 00000000            <1> nextcommandloc dd 0
  3868 00002E45 00000000            <1> thiscommandloc dd 0	
  3869                              <1> run:
  3870 00002E49 BE[88C40300]        <1> 	mov esi, buftxt
  3871                              <1> fixvariables:
  3872 00002E4E 46                  <1> 	inc esi
  3873 00002E4F 8A06                <1> 	mov al, [esi]
  3874 00002E51 3C23                <1> 	cmp al, '#'	;inline comment
  3875 00002E53 74DC                <1> 	je inlinecomment
  3876 00002E55 3C24                <1> 	cmp al, '$' ;variable
  3877 00002E57 0F8443FFFFFF        <1> 	je near replacevariable
  3878 00002E5D 3C3B                <1> 	cmp al, ';' ;program list
  3879 00002E5F 74C3                <1> 	je multipleprogline
  3880 00002E61 3C00                <1> 	cmp al, 0
  3881 00002E63 75E9                <1> 	jne fixvariables
  3882 00002E65 31C0                <1> 	xor eax, eax
  3883 00002E67 A3[412E0000]        <1> 	mov [nextcommandloc], eax
  3884                              <1> donefixvariables:
  3885 00002E6C 803D[CB330000]00    <1> 	cmp byte [indexdone], 0
  3886 00002E73 7505                <1> 	jne progtest
  3887 00002E75 E8D7040000          <1> 	call indexfiles
  3888                              <1> progtest:
  3889 00002E7A 31C0                <1> 	xor eax, eax
  3890 00002E7C BB[08AA0300]        <1> 	mov ebx, fileindex
  3891 00002E81 668B03              <1> prgnxt:	mov ax, [ebx]
  3892 00002E84 B1FF                <1> 	mov cl, 255
  3893 00002E86 B52C                <1> 	mov ch, 44
  3894 00002E88 6639C8              <1> 	cmp ax, cx
  3895 00002E8B 740B                <1> 	je fndprg
  3896 00002E8D 43                  <1> 	inc ebx
  3897 00002E8E 81FB[08AE0300]      <1> 	cmp ebx, fileindexend
  3898 00002E94 7357                <1> 	jae prgnf
  3899 00002E96 EBE9                <1> 	jmp prgnxt
  3900 00002E98 83C302              <1> fndprg: add ebx, 2
  3901 00002E9B 31C9                <1> 	xor ecx, ecx
  3902 00002E9D BE[88C40300]        <1> 	mov esi, buftxt
  3903 00002EA2 390D[452E0000]      <1> 	cmp [thiscommandloc], ecx
  3904 00002EA8 7406                <1> 	je noprgtstmultiple
  3905 00002EAA 8B35[452E0000]      <1> 	mov esi, [thiscommandloc]
  3906                              <1> noprgtstmultiple:
  3907 00002EB0 E8A3000000          <1> 	call cndtest
  3908 00002EB5 3C01                <1> 	cmp al, 1
  3909 00002EB7 7302                <1> 	jae prggood
  3910 00002EB9 EBC6                <1> 	jmp prgnxt
  3911 00002EBB 81FB[08AE0300]      <1> prggood: cmp ebx, fileindexend
  3912 00002EC1 7355                <1> 	jae prgdn
  3913 00002EC3 31C0                <1> 	xor eax, eax
  3914 00002EC5 BE[88C40300]        <1> 	mov esi, buftxt
  3915 00002ECA 3905[452E0000]      <1> 	cmp [thiscommandloc], eax
  3916 00002ED0 7406                <1> 	je noprggoodmul
  3917 00002ED2 8B35[452E0000]      <1> 	mov esi, [thiscommandloc]
  3918                              <1> noprggoodmul:
  3919 00002ED8 8935[192F0000]      <1> 	mov [currentcommandloc], esi
  3920 00002EDE 83C303              <1> 	add ebx, 3
  3921 00002EE1 8B3B                <1> 	mov edi, [ebx]
  3922 00002EE3 C605[37670000]02    <1> 	mov byte [threadson], 2
  3923 00002EEA FFD7                <1> 	call edi
  3924 00002EEC C3                  <1> 	ret
  3925                              <1> prgnf:	
  3926 00002EED 8B35[192F0000]      <1> 	mov esi, [currentcommandloc]
  3927 00002EF3 8A06                <1> 	mov al, [esi]
  3928 00002EF5 3C00                <1> 	cmp al, 0
  3929 00002EF7 741F                <1> 	je prgdn
  3930 00002EF9 BE[AC840000]        <1> 	mov esi, notfound1
  3931 00002EFE E80CEEFFFF          <1> 	call print
  3932 00002F03 8B35[192F0000]      <1> 	mov esi, [currentcommandloc]
  3933 00002F09 E801EEFFFF          <1> 	call print
  3934 00002F0E BE[B4840000]        <1> 	mov esi, notfound2
  3935 00002F13 E8F7EDFFFF          <1> 	call print
  3936 00002F18 C3                  <1> prgdn:	ret
  3937                              <1> 
  3938 00002F19 00000000            <1> currentcommandloc dd 0
  3939                              <1> 
  3940                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3941 00002F1D 6631C0              <1> 	xor ax, ax
  3942 00002F20 8A06                <1> retest:	mov al, [esi]
  3943 00002F22 8A23                <1> 	mov ah, [ebx]
  3944 00002F24 3C00                <1> 	cmp al, 0
  3945 00002F26 7408                <1> 	je testtrue
  3946 00002F28 38E0                <1> 	cmp al, ah
  3947 00002F2A 750C                <1> 	jne testfalse
  3948 00002F2C 43                  <1> 	inc ebx
  3949 00002F2D 46                  <1> 	inc esi
  3950 00002F2E EBF0                <1> 	jmp retest
  3951                              <1> testtrue:
  3952 00002F30 80FC00              <1> 	cmp ah, 0
  3953 00002F33 7503                <1> 	jne testfalse
  3954 00002F35 B001                <1> 	mov al, 1
  3955 00002F37 C3                  <1> 	ret
  3956                              <1> testfalse:
  3957 00002F38 30C0                <1> 	xor al, al
  3958 00002F3A C3                  <1> 	ret
  3959                              <1> 
  3960                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3961 00002F3B 30C0                <1> 	xor al, al
  3962                              <1> opretest:
  3963 00002F3D 8A06                <1> 	mov al, [esi]
  3964 00002F3F 8A23                <1> 	mov ah, [ebx]
  3965 00002F41 38E0                <1> 	cmp al, ah
  3966 00002F43 7510                <1> 	jne optestfalse
  3967 00002F45 80FC00              <1> 	cmp ah, 0
  3968 00002F48 7404                <1> 	je optesttrue
  3969 00002F4A 43                  <1> 	inc ebx
  3970 00002F4B 46                  <1> 	inc esi
  3971 00002F4C EBEF                <1> 	jmp opretest
  3972                              <1> optesttrue:
  3973 00002F4E 3C00                <1> 	cmp al, 0
  3974 00002F50 7503                <1> 	jne optestfalse
  3975 00002F52 B001                <1> 	mov al, 1
  3976 00002F54 C3                  <1> 	ret
  3977                              <1> optestfalse:
  3978 00002F55 30C0                <1> 	xor al, al
  3979 00002F57 C3                  <1> 	ret
  3980                              <1> 
  3981                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3982 00002F58 30C0                <1> 	xor al, al
  3983 00002F5A 8A06                <1> cndretest:	mov al, [esi]
  3984 00002F5C 8A23                <1> 	mov ah, [ebx]
  3985 00002F5E 38CC                <1> 	cmp ah, cl
  3986 00002F60 7408                <1> 	je cndtesttrue
  3987 00002F62 38E0                <1> 	cmp al, ah
  3988 00002F64 750B                <1> 	jne cndtestfalse
  3989 00002F66 43                  <1> 	inc ebx
  3990 00002F67 46                  <1> 	inc esi
  3991 00002F68 EBF0                <1> 	jmp cndretest
  3992                              <1> cndtesttrue:
  3993 00002F6A 38C8                <1> 	cmp al, cl
  3994 00002F6C 7506                <1> 	jne cndtestalmost
  3995 00002F6E B001                <1> 	mov al, 1
  3996 00002F70 C3                  <1> 	ret
  3997                              <1> cndtestfalse:
  3998 00002F71 30C0                <1> 	xor al, al
  3999 00002F73 C3                  <1> 	ret
  4000                              <1> cndtestalmost:
  4001 00002F74 B002                <1> 	mov al, 2
  4002 00002F76 C3                  <1> 	ret
  4003                              <1> 	
  4004                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  4005                              <1> 		                ;ends if array seperator is found backwards after 0
  4006                              <1> 	arnxt:	      
  4007 00002F77 88E8                <1> 		mov al, ch
  4008 00002F79 88CC                <1> 		mov ah, cl        
  4009 00002F7B 663906              <1> 		cmp [esi], ax
  4010 00002F7E 7445                <1> 		je ardn
  4011 00002F80 66390E              <1> 		cmp [esi], cx
  4012 00002F83 7407                <1> 		je arfnd
  4013 00002F85 46                  <1> 		inc esi
  4014 00002F86 39DE                <1> 		cmp esi, ebx
  4015 00002F88 733B                <1> 		jae ardn
  4016 00002F8A EBEB                <1> 		jmp arnxt
  4017 00002F8C 83C602              <1> 	arfnd: add esi, 2
  4018 00002F8F 891D[C62F0000]      <1> 		mov [arbx], ebx
  4019 00002F95 890D[CA2F0000]      <1> 		mov [arcx], ecx
  4020 00002F9B E86FEDFFFF          <1> 		call print
  4021 00002FA0 8935[CC2F0000]      <1> 		mov [arsi], esi
  4022 00002FA6 E85FEDFFFF          <1> 		call printline
  4023 00002FAB 8B1D[C62F0000]      <1> 		mov ebx, [arbx]
  4024 00002FB1 668B0D[CA2F0000]    <1> 		mov cx, [arcx]
  4025 00002FB8 8B35[CC2F0000]      <1> 		mov esi, [arsi]
  4026 00002FBE 46                  <1> 		inc esi
  4027 00002FBF 39DE                <1> 		cmp esi, ebx
  4028 00002FC1 7302                <1> 		jae ardn
  4029 00002FC3 EBB2                <1> 		jmp arnxt
  4030 00002FC5 C3                  <1> 	ardn:	ret
  4031 00002FC6 00000000            <1> arbx:	dw 0,0
  4032 00002FCA 0000                <1> arcx:	db 0,0
  4033 00002FCC 00000000            <1> arsi:	dw 0,0
  4034                              <1> 
  4035                              <1> clearbuffer:
  4036 00002FD0 BE[88C80300]        <1> 	mov esi, buf2
  4037 00002FD5 B030                <1> 	mov al, '0'
  4038 00002FD7 81FE[9CC80300]      <1> clearbuf: cmp esi, numbuf
  4039 00002FDD 7305                <1> 	jae doneclearbuff
  4040 00002FDF 8806                <1> 	mov [esi], al
  4041 00002FE1 46                  <1> 	inc esi
  4042 00002FE2 EBF3                <1> 	jmp clearbuf
  4043                              <1> doneclearbuff: 
  4044 00002FE4 C3                  <1> 		ret
  4045                              <1> 
  4046                              <1> convert:
  4047 00002FE5 4E                  <1> 	dec esi
  4048 00002FE6 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  4049                              <1> .lp:
  4050 00002FE8 89DE                <1> 	mov esi, ebx
  4051 00002FEA 83EE09              <1> 	sub esi, 9
  4052 00002FED 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  4053 00002FF3 720A                <1> 	jb .8
  4054 00002FF5 81E900CA9A3B        <1> 	sub ecx, 1000000000
  4055 00002FFB FE06                <1> 	inc byte [esi]
  4056 00002FFD EBE9                <1> 	jmp .lp
  4057 00002FFF 46                  <1> .8:	inc esi
  4058 00003000 81F900E1F505        <1> 	cmp ecx, 100000000
  4059 00003006 720A                <1> 	jb .7
  4060 00003008 81E900E1F505        <1> 	sub ecx, 100000000
  4061 0000300E FE06                <1> 	inc byte [esi]
  4062 00003010 EBD6                <1> 	jmp .lp
  4063 00003012 46                  <1> .7:	inc esi
  4064 00003013 81F980969800        <1> 	cmp ecx, 10000000
  4065 00003019 720A                <1> 	jb .6
  4066 0000301B 81E980969800        <1> 	sub ecx, 10000000
  4067 00003021 FE06                <1> 	inc byte [esi]
  4068 00003023 EBC3                <1> 	jmp .lp
  4069 00003025 46                  <1> .6:	inc esi
  4070 00003026 81F940420F00        <1> 	cmp ecx, 1000000
  4071 0000302C 720A                <1> 	jb .5
  4072 0000302E 81E940420F00        <1> 	sub ecx, 1000000
  4073 00003034 FE06                <1> 	inc byte [esi]
  4074 00003036 EBB0                <1> 	jmp .lp
  4075 00003038 46                  <1> .5:	inc esi
  4076 00003039 81F9A0860100        <1> 	cmp ecx, 100000
  4077 0000303F 720A                <1> 	jb .4
  4078 00003041 81E9A0860100        <1> 	sub ecx, 100000
  4079 00003047 FE06                <1> 	inc byte [esi]
  4080 00003049 EB9D                <1> 	jmp .lp
  4081 0000304B 46                  <1> .4:	inc esi
  4082 0000304C 81F910270000        <1> 	cmp ecx, 10000
  4083 00003052 720A                <1> 	jb .3
  4084 00003054 81E910270000        <1> 	sub ecx, 10000
  4085 0000305A FE06                <1> 	inc byte [esi]
  4086 0000305C EB8A                <1> 	jmp .lp
  4087 0000305E 46                  <1> .3:	inc esi
  4088 0000305F 81F9E8030000        <1> 	cmp ecx, 1000
  4089 00003065 720D                <1> 	jb .2
  4090 00003067 81E9E8030000        <1> 	sub ecx, 1000
  4091 0000306D FE06                <1> 	inc byte [esi]
  4092 0000306F E974FFFFFF          <1> 	jmp .lp
  4093 00003074 46                  <1> .2:	inc esi
  4094 00003075 83F964              <1> 	cmp ecx, 100
  4095 00003078 720A                <1> 	jb .1
  4096 0000307A 83E964              <1> 	sub ecx, 100
  4097 0000307D FE06                <1> 	inc byte [esi]
  4098 0000307F E964FFFFFF          <1> 	jmp .lp
  4099 00003084 46                  <1> .1:	inc esi
  4100 00003085 83F90A              <1> 	cmp ecx, 10
  4101 00003088 720A                <1> 	jb .0
  4102 0000308A 83E90A              <1> 	sub ecx, 10
  4103 0000308D FE06                <1> 	inc byte [esi]
  4104 0000308F E954FFFFFF          <1> 	jmp .lp
  4105 00003094 46                  <1> .0:	inc esi
  4106 00003095 83F901              <1> 	cmp ecx, 1
  4107 00003098 720A                <1> 	jb .dn
  4108 0000309A 83E901              <1> 	sub ecx, 1
  4109 0000309D FE06                <1> 	inc byte [esi]
  4110 0000309F E944FFFFFF          <1> 	jmp .lp
  4111                              <1> .dn:
  4112 000030A4 C3                  <1> 	ret
  4113                              <1> 
  4114                              <1> 	
  4115                              <1> 
  4116 000030A5 00<rept>            <1> hexnumber times 8 db 0
  4117 000030AD 202000              <1> hexnumberend db "  ",0
  4118                              <1> 
  4119                              <1> converthex:
  4120                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  4121 000030B0 56                  <1> 	push esi
  4122 000030B1 B030                <1> 	mov al, "0"
  4123 000030B3 39FE                <1> .clearlp: cmp esi, edi
  4124 000030B5 7305                <1> 	jae .doneclear
  4125 000030B7 8806                <1> 	mov [esi], al
  4126 000030B9 46                  <1> 	inc esi
  4127 000030BA EBF7                <1> 	jmp .clearlp
  4128                              <1> .doneclear:
  4129 000030BC 83EE02              <1> 	sub esi, 2
  4130 000030BF 89C8                <1> 	mov eax, ecx
  4131                              <1> .loop:
  4132 000030C1 30FF                <1> 	xor bh, bh
  4133 000030C3 88C3                <1> 	mov bl, al
  4134 000030C5 66C1E304            <1> 	shl bx, 4
  4135 000030C9 C0EB04              <1> 	shr bl, 4
  4136 000030CC 86DF                <1> 	xchg bl, bh ;they are backwards
  4137 000030CE 80C330              <1> 	add bl, 48
  4138 000030D1 80FB39              <1> 	cmp bl, "9"
  4139 000030D4 7609                <1> 	jbe .goodbl
  4140 000030D6 80EB30              <1> 	sub bl, 48
  4141 000030D9 80EB0A              <1> 	sub bl, 0xA
  4142 000030DC 80C341              <1> 	add bl, "A"
  4143                              <1> .goodbl:
  4144 000030DF 80C730              <1> 	add bh, 48
  4145 000030E2 80FF39              <1> 	cmp bh, "9"
  4146 000030E5 7609                <1> 	jbe .goodbh
  4147 000030E7 80EF30              <1> 	sub bh, 48
  4148 000030EA 80EF0A              <1> 	sub bh, 0xA
  4149 000030ED 80C741              <1> 	add bh, "A"
  4150                              <1> .goodbh:
  4151 000030F0 C1E808              <1> 	shr eax, 8
  4152 000030F3 66891E              <1> 	mov [esi], bx
  4153 000030F6 83EE02              <1> 	sub esi, 2
  4154 000030F9 3B3424              <1> 	cmp esi, [esp]
  4155 000030FC 7205                <1> 	jb .done
  4156 000030FE 83F800              <1> 	cmp eax, 0
  4157 00003101 75BE                <1> 	jne .loop
  4158                              <1> .done:
  4159 00003103 5E                  <1> 	pop esi
  4160 00003104 C3                  <1> 	ret
  4161                              <1> 	
  4162                              <1> 	
  4163 00003105 00                  <1> smallhex db 0
  4164 00003106 01                  <1> firsthexshown db 1
  4165                              <1> showhexsmall:
  4166 00003107 C605[05310000]01    <1> 	mov byte [smallhex], 1
  4167 0000310E E808000000          <1> 	call showhex
  4168 00003113 C605[05310000]00    <1> 	mov byte [smallhex], 0
  4169 0000311A C3                  <1> 	ret
  4170                              <1> showhex:
  4171 0000311B 60                  <1> 	pusha
  4172 0000311C BE[A5300000]        <1> 	mov esi, hexnumber
  4173 00003121 BF[AD300000]        <1> 	mov edi, hexnumberend
  4174 00003126 E885FFFFFF          <1> 	call converthex
  4175 0000312B 803D[06310000]01    <1> 	cmp byte [firsthexshown], 1
  4176 00003132 7503                <1> 	jne .show
  4177 00003134 6631D2              <1> 	xor dx, dx
  4178                              <1> .show:
  4179 00003137 803D[06310000]03    <1> 	cmp byte [firsthexshown], 3
  4180 0000313E 7505                <1> 	jne .nonewhexline
  4181 00003140 E8C5EBFFFF          <1> 	call printline
  4182                              <1> .nonewhexline:
  4183 00003145 803D[06310000]04    <1> 	cmp byte [firsthexshown], 4
  4184 0000314C 751F                <1> 	jne .notab
  4185 0000314E B1A0                <1> 	mov cl, 160
  4186 00003150 28D1                <1> 	sub cl, dl
  4187 00003152 C0E905              <1> 	shr cl, 5
  4188 00003155 C0E105              <1> 	shl cl, 5
  4189 00003158 80F900              <1> 	cmp cl, 0
  4190 0000315B 7507                <1> 	jne .nonewline
  4191 0000315D E8A8EBFFFF          <1> 	call printline
  4192 00003162 EB09                <1> 	jmp .notab
  4193                              <1> .nonewline:
  4194 00003164 80C20F              <1> 	add dl, 15
  4195 00003167 C0EA04              <1> 	shr dl, 4
  4196 0000316A C0E204              <1> 	shl dl, 4
  4197                              <1> .notab:
  4198 0000316D BE[A5300000]        <1> 	mov esi, hexnumber
  4199 00003172 803D[05310000]01    <1> 	cmp byte [smallhex],1
  4200 00003179 7503                <1> 	jne .nosmall
  4201 0000317B 83C606              <1> 	add esi, 6
  4202                              <1> .nosmall:
  4203 0000317E 803D[06310000]05    <1> 	cmp byte [firsthexshown], 5
  4204 00003185 7507                <1> 	jne .noquiet
  4205 00003187 E862EBFFFF          <1> 	call printquiet
  4206 0000318C EB15                <1> 	jmp .donequiet
  4207                              <1> .noquiet:
  4208 0000318E 803D[06310000]06    <1> 	cmp byte [firsthexshown], 6
  4209 00003195 7507                <1> 	jne .normal
  4210 00003197 E865EBFFFF          <1> 	call printhighlight
  4211 0000319C EB05                <1> 	jmp .donequiet
  4212                              <1> .normal:
  4213 0000319E E86CEBFFFF          <1> 	call print
  4214                              <1> .donequiet:
  4215 000031A3 803D[06310000]02    <1> 	cmp byte [firsthexshown], 2
  4216 000031AA 7505                <1> 	jne .shown
  4217 000031AC E859EBFFFF          <1> 	call printline
  4218                              <1> .shown:
  4219 000031B1 C605[06310000]00    <1> 	mov byte [firsthexshown], 0
  4220 000031B8 61                  <1> 	popa
  4221 000031B9 C3                  <1> 	ret
  4222                              <1> 
  4223                              <1> 
  4224 000031BA 303030303030303030- <1> decnumber db "00000000000000"
  4225 000031C3 3030303030          <1>
  4226 000031C8 2000                <1> decnumberend: db " ",0
  4227                              <1> 
  4228                              <1> showdec: ;same as showhex, just uses decimal conversion
  4229 000031CA 60                  <1> 	pusha
  4230 000031CB BF[BA310000]        <1> 	mov edi, decnumber
  4231 000031D0 BE[C8310000]        <1> 	mov esi, decnumberend
  4232                              <1> .clear:
  4233 000031D5 C60730              <1> 	mov byte [edi], '0'
  4234 000031D8 47                  <1> 	inc edi
  4235 000031D9 39F7                <1> 	cmp edi, esi
  4236 000031DB 72F8                <1> 	jb .clear
  4237 000031DD BF[BA310000]        <1> 	mov edi, decnumber
  4238 000031E2 E8FEFDFFFF          <1> 	call convert
  4239 000031E7 803D[06310000]01    <1> 	cmp byte [firsthexshown], 1
  4240 000031EE 7503                <1> 	jne .show
  4241 000031F0 6631D2              <1> 	xor dx, dx
  4242                              <1> .show:
  4243 000031F3 803D[06310000]03    <1> 	cmp byte [firsthexshown], 3
  4244 000031FA 7505                <1> 	jne .nonewdecline
  4245 000031FC E809EBFFFF          <1> 	call printline
  4246                              <1> .nonewdecline:
  4247 00003201 803D[06310000]04    <1> 	cmp byte [firsthexshown], 4
  4248 00003208 751F                <1> 	jne .notab
  4249 0000320A B1A0                <1> 	mov cl, 160
  4250 0000320C 28D1                <1> 	sub cl, dl
  4251 0000320E C0E905              <1> 	shr cl, 5
  4252 00003211 C0E105              <1> 	shl cl, 5
  4253 00003214 80F900              <1> 	cmp cl, 0
  4254 00003217 7507                <1> 	jne .nonewline
  4255 00003219 E8ECEAFFFF          <1> 	call printline
  4256 0000321E EB09                <1> 	jmp .notab
  4257                              <1> .nonewline:
  4258 00003220 80C20F              <1> 	add dl, 15
  4259 00003223 C0EA04              <1> 	shr dl, 4
  4260 00003226 C0E204              <1> 	shl dl, 4
  4261                              <1> .notab:
  4262 00003229 BE[BA310000]        <1> 	mov esi, decnumber
  4263 0000322E 4E                  <1> 	dec esi
  4264                              <1> .sifind:
  4265 0000322F 46                  <1> 	inc esi
  4266 00003230 81FE[C7310000]      <1> 	cmp esi, decnumberend - 1
  4267 00003236 7305                <1> 	jae .nosifind
  4268 00003238 803E30              <1> 	cmp byte [esi], '0'
  4269 0000323B 74F2                <1> 	je .sifind
  4270                              <1> .nosifind:
  4271 0000323D E8CDEAFFFF          <1> 	call print
  4272 00003242 803D[06310000]02    <1> 	cmp byte [firsthexshown], 2
  4273 00003249 7505                <1> 	jne .shown
  4274 0000324B E8BAEAFFFF          <1> 	call printline
  4275                              <1> .shown:
  4276 00003250 C605[06310000]00    <1> 	mov byte [firsthexshown], 0
  4277 00003257 61                  <1> 	popa
  4278 00003258 C3                  <1> 	ret
  4279                              <1> 	
  4280                              <1> cnvrthextxt:
  4281 00003259 31C9                <1> 	xor ecx, ecx
  4282 0000325B 31C0                <1> 	xor eax, eax
  4283 0000325D 31D2                <1> 	xor edx, edx
  4284 0000325F 31DB                <1> 	xor ebx, ebx
  4285 00003261 4E                  <1> 	dec esi
  4286                              <1> .end:
  4287 00003262 46                  <1> 	inc esi
  4288 00003263 8A06                <1> 	mov al, [esi]
  4289 00003265 3C00                <1> 	cmp al, 0
  4290 00003267 75F9                <1> 	jne .end
  4291                              <1> .loop:
  4292 00003269 4E                  <1> 	dec esi
  4293 0000326A 8A06                <1> 	mov al, [esi]
  4294 0000326C 3C41                <1> 	cmp al, "A"
  4295 0000326E 731F                <1> 	jae .char
  4296 00003270 2C30                <1> 	sub al, 48
  4297 00003272 3C10                <1> 	cmp al, 16
  4298 00003274 7718                <1> 	ja .done
  4299                              <1> .donechar:
  4300 00003276 83FA00              <1> 	cmp edx, 0
  4301 00003279 740B                <1> 	je .noshl
  4302 0000327B 89D3                <1> 	mov ebx, edx
  4303                              <1> .shl:
  4304 0000327D C1E004              <1> 	shl eax, 4
  4305 00003280 4B                  <1> 	dec ebx
  4306 00003281 83FB00              <1> 	cmp ebx, 0
  4307 00003284 75F7                <1> 	jne .shl
  4308                              <1> .noshl:
  4309 00003286 42                  <1> 	inc edx
  4310 00003287 01C1                <1> 	add ecx, eax
  4311 00003289 83FA08              <1> 	cmp edx, 8
  4312 0000328C 72DB                <1> 	jb .loop
  4313                              <1> .done:
  4314 0000328E C3                  <1> 	ret
  4315                              <1> .char:
  4316 0000328F 3C46                <1> 	cmp al, "F"
  4317 00003291 77FB                <1> 	ja .done
  4318 00003293 2C41                <1> 	sub al, "A"
  4319 00003295 040A                <1> 	add al, 0xA
  4320 00003297 EBDD                <1> 	jmp .donechar
  4321                              <1> 	
  4322                              <1> 	
  4323                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4324 00003299 31C9                <1> 	xor ecx, ecx
  4325 0000329B 31C0                <1> 	xor eax, eax
  4326 0000329D 31D2                <1> 	xor edx, edx
  4327 0000329F 31DB                <1> 	xor ebx, ebx
  4328 000032A1 4E                  <1> 	dec esi
  4329                              <1> .lp:
  4330 000032A2 46                  <1> 	inc esi
  4331 000032A3 8A06                <1> 	mov al, [esi]
  4332 000032A5 3C00                <1> 	cmp al, 0
  4333 000032A7 75F9                <1> 	jne .lp
  4334 000032A9 4E                  <1> 	dec esi
  4335 000032AA 8A06                <1> 	mov al, [esi]
  4336 000032AC 3C2E                <1> 	cmp al, '.'
  4337 000032AE 7503                <1> 	jne .dot
  4338 000032B0 46                  <1> 	inc esi
  4339 000032B1 EBEF                <1> 	jmp .lp
  4340                              <1> .dot:
  4341 000032B3 3C20                <1> 	cmp al, ' '
  4342 000032B5 7404                <1> 	je .zero
  4343 000032B7 3C30                <1> 	cmp al, '0'
  4344 000032B9 7504                <1> 	jne .txtlp
  4345                              <1> .zero: 
  4346 000032BB 39FE                <1> 		cmp esi, edi
  4347 000032BD 743F                <1> 		je .done
  4348                              <1> .txtlp:
  4349 000032BF 31C0                <1> 	xor eax, eax
  4350 000032C1 8A06                <1> 	mov al, [esi]
  4351 000032C3 3C3D                <1> 	cmp al, '='
  4352 000032C5 7437                <1> 	je .done
  4353 000032C7 3C30                <1> 	cmp al, 48
  4354 000032C9 7233                <1> 	jb .done
  4355 000032CB 3C3A                <1> 	cmp al, 58
  4356 000032CD 732F                <1> 	jae .done
  4357 000032CF 3C23                <1> 	cmp al, '#'
  4358 000032D1 742B                <1> 	je .done
  4359 000032D3 39FE                <1> 	cmp esi, edi
  4360 000032D5 7227                <1> 	jb .done
  4361 000032D7 83F900              <1> 	cmp ecx, 0
  4362 000032DA 7708                <1> 	ja .exp
  4363 000032DC 2C30                <1> .noexp:	sub al, 48
  4364 000032DE 01C2                <1> 	add edx, eax
  4365 000032E0 4E                  <1> 	dec esi
  4366 000032E1 41                  <1> 	inc ecx
  4367 000032E2 EBDB                <1> 	jmp .txtlp
  4368 000032E4 83F900              <1> .exp:	cmp ecx, 0
  4369 000032E7 74F3                <1> 	je .noexp
  4370 000032E9 2C30                <1> 	sub al, 48
  4371 000032EB 51                  <1> 	push ecx
  4372                              <1> .expmul:
  4373 000032EC 89C3                <1> 	mov ebx, eax
  4374 000032EE 01D8                <1> 	add eax, ebx
  4375 000032F0 C1E303              <1> 	shl ebx, 3
  4376 000032F3 01D8                <1> 	add eax, ebx
  4377 000032F5 E2F5                <1> 	loop .expmul
  4378 000032F7 01C2                <1> 	add edx, eax
  4379 000032F9 59                  <1> 	pop ecx
  4380 000032FA 4E                  <1> 	dec esi
  4381 000032FB 41                  <1> 	inc ecx
  4382 000032FC EBC1                <1> 	jmp .txtlp
  4383 000032FE 89D1                <1> .done: mov ecx, edx
  4384 00003300 C3                  <1> 	ret
  4385                              <1> 
  4386                              <1> benchmarki: ;output number of clocks since initial value
  4387 00003301 0F31                <1> 	rdtsc
  4388 00003303 8B1D[10850000]      <1> 	mov ebx, [initialtsc]
  4389 00003309 8B0D[14850000]      <1> 	mov ecx, [initialtsc + 4]
  4390 0000330F EB0E                <1> 	jmp benchmarkl.calc
  4391                              <1> 
  4392                              <1> benchmarkl: ;output number of clocks since last benchmark
  4393 00003311 0F31                <1> 	rdtsc
  4394 00003313 8B1D[18850000]      <1> 	mov ebx, [lasttsc]
  4395 00003319 8B0D[1C850000]      <1> 	mov ecx, [lasttsc + 4]
  4396                              <1> .calc:
  4397 0000331F 29D8                <1> 	sub eax, ebx
  4398 00003321 7701                <1> 	ja .noover
  4399 00003323 4A                  <1> 	dec edx
  4400                              <1> .noover:
  4401 00003324 29CA                <1> 	sub edx, ecx
  4402 00003326 8B0C24              <1> 	mov ecx, [esp]
  4403 00003329 E8EDFDFFFF          <1> 	call showhex
  4404 0000332E 89D1                <1> 	mov ecx, edx
  4405 00003330 E8E6FDFFFF          <1> 	call showhex
  4406 00003335 89C1                <1> 	mov ecx, eax
  4407 00003337 E8DFFDFFFF          <1> 	call showhex
  4408 0000333C E8C9E9FFFF          <1> 	call printline
  4409 00003341 0F31                <1> 	rdtsc
  4410 00003343 A3[18850000]        <1> 	mov [lasttsc], eax
  4411 00003348 8915[1C850000]      <1> 	mov [lasttsc + 4], edx
  4412 0000334E C3                  <1> 	ret
  4413                                      %include "source/programs.asm"
  4414 0000334F FF2C                <1> filetypes db 255,44
  4415                              <1> progstart:		;programs start here
  4416                              <1> indexfiles:
  4417 00003351 BE[51330000]        <1> 	mov esi, progstart
  4418 00003356 BB[08AA0300]        <1> 	mov ebx, fileindex
  4419 0000335B BF[51330000]        <1> 	mov edi, progstart
  4420 00003360 83EF02              <1> 	sub edi, 2
  4421                              <1> indexloop:
  4422 00003363 668B0E              <1> 	mov cx, [esi]
  4423                              <1> 	indexloop2:
  4424 00003366 663B0F              <1> 		cmp cx, [edi]
  4425 00003369 741E                <1> 		je indexloop2done
  4426 0000336B 83EF02              <1> 		sub edi, 2
  4427 0000336E 81FF[4F330000]      <1> 		cmp edi, filetypes
  4428 00003374 73F0                <1> 		jae indexloop2
  4429 00003376 BF[51330000]        <1> 	mov edi, progstart
  4430 0000337B 83EF02              <1> 	sub edi, 2
  4431 0000337E 46                  <1> 	inc esi
  4432 0000337F 81FE[39510000]      <1> 	cmp esi, batchprogend
  4433 00003385 733C                <1> 	jae indexloopdone
  4434 00003387 EBDA                <1> 	jmp indexloop
  4435                              <1> indexloop2done:
  4436 00003389 66890B              <1> 	mov [ebx], cx
  4437 0000338C 83C302              <1> 	add ebx, 2
  4438 0000338F 83C602              <1> 	add esi, 2
  4439                              <1> 	nameindex:
  4440 00003392 8A0E                <1> 		mov cl, [esi]
  4441 00003394 80F900              <1> 		cmp cl, 0
  4442 00003397 7406                <1> 		je nameindexdone
  4443 00003399 880B                <1> 		mov [ebx], cl
  4444 0000339B 46                  <1> 		inc esi
  4445 0000339C 43                  <1> 		inc ebx
  4446 0000339D EBF3                <1> 		jmp nameindex
  4447                              <1> 	nameindexdone:
  4448 0000339F 43                  <1> 		inc ebx
  4449 000033A0 66C7030000          <1> 		mov word [ebx], 0
  4450 000033A5 83C302              <1> 		add ebx, 2
  4451 000033A8 46                  <1> 		inc esi
  4452 000033A9 8933                <1> 		mov [ebx], esi
  4453 000033AB 83C304              <1> 		add ebx, 4
  4454 000033AE 66C7030000          <1> 		mov word [ebx], 0
  4455 000033B3 83C302              <1> 		add ebx, 2
  4456 000033B6 81FB[08AE0300]      <1> 		cmp ebx, fileindexend
  4457 000033BC 7305                <1> 		jae indexloopdone
  4458 000033BE 83C601              <1> 		add esi, 1
  4459 000033C1 EBA0                <1> 		jmp indexloop
  4460 000033C3 C605[CB330000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4461 000033CA C3                  <1> 		ret
  4462 000033CB 00                  <1> indexdone db 0
  4463                              <1> %include 'source/programs/_comment.asm' ;#
  4464 000033CC FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4465 000033D0 C3                  <2> 	ret 
  4466                              <1> %include 'source/programs/_math.asm' ;!
  4467 000033D1 FF2C2100            <2> db 255,44,"!",0
  4468                              <2> 	num:	
  4469 000033D5 E8F6FBFFFF          <2> 		call clearbuffer
  4470 000033DA C605[2E360000]00    <2> 		mov byte [decimal], 0
  4471 000033E1 C605[2F360000]00    <2> 		mov byte [decimal2], 0
  4472 000033E8 8B35[192F0000]      <2> 		mov esi, [currentcommandloc]
  4473 000033EE 31C0                <2> 		xor eax, eax
  4474 000033F0 31C9                <2> 		xor ecx, ecx
  4475 000033F2 31DB                <2> 		xor ebx, ebx
  4476 000033F4 8A06                <2> 	num2:	mov al, [esi]
  4477 000033F6 3C2B                <2> 		cmp al, '+'
  4478 000033F8 7416                <2> 		je operatorfound
  4479 000033FA 3C2D                <2> 		cmp al, '-'
  4480 000033FC 7412                <2> 		je operatorfound
  4481 000033FE 3C2A                <2> 		cmp al, '*'
  4482 00003400 740E                <2> 		je operatorfound
  4483 00003402 3C2F                <2> 		cmp al, '/'
  4484 00003404 740A                <2> 		je operatorfound
  4485 00003406 3C5E                <2> 		cmp al, '^'
  4486 00003408 7406                <2> 		je operatorfound
  4487 0000340A 46                  <2> 		inc esi
  4488 0000340B 84C0                <2> 		test al, al
  4489 0000340D 75E5                <2> 		jnz num2
  4490 0000340F C3                  <2> 		ret
  4491 00003410 50                  <2> 	operatorfound: push eax
  4492 00003411 30E4                <2> 		xor ah, ah
  4493 00003413 8826                <2> 		mov [esi], ah
  4494 00003415 89F7                <2> 		mov edi, esi
  4495 00003417 46                  <2> 		inc esi
  4496 00003418 8A06                <2> 		mov al, [esi]
  4497 0000341A 3C25                <2> 		cmp al, '%'
  4498 0000341C 0F845E000000        <2> 		je near resultnum1
  4499                              <2> 	varnum2: 
  4500 00003422 57                  <2> 		push edi
  4501 00003423 E8A0000000          <2> 		call checkdecimal
  4502 00003428 5F                  <2> 		pop edi
  4503 00003429 E86BFEFFFF          <2> 		call cnvrttxt
  4504                              <2> 	vrnm2:
  4505 0000342E 89CB                <2> 		mov ebx, ecx
  4506 00003430 53                  <2> 		push ebx
  4507 00003431 E89AFBFFFF          <2> 		call clearbuffer
  4508 00003436 8B35[192F0000]      <2> 		mov esi, [currentcommandloc]
  4509 0000343C 89F7                <2> 		mov edi, esi
  4510 0000343E 46                  <2> 		inc esi
  4511 0000343F 8A06                <2> 		mov al, [esi]
  4512 00003441 3C25                <2> 		cmp al, '%'
  4513 00003443 0F844B000000        <2> 		je near resultnum2
  4514                              <2> 	varnum4: 
  4515 00003449 57                  <2> 		push edi
  4516 0000344A E865000000          <2> 		call checkdecimal2
  4517 0000344F 5F                  <2> 		pop edi
  4518 00003450 E844FEFFFF          <2> 		call cnvrttxt
  4519                              <2> 	vrnm4:
  4520 00003455 5B                  <2> 		pop ebx
  4521 00003456 58                  <2> 		pop eax
  4522 00003457 3C2B                <2> 		cmp al, '+'
  4523 00003459 0F8497000000        <2> 		je near plusnum
  4524 0000345F 3C2D                <2> 		cmp al, '-'
  4525 00003461 0F8498000000        <2> 		je near subnum
  4526 00003467 3C2A                <2> 		cmp al, '*'
  4527 00003469 0F8499000000        <2> 		je near mulnum
  4528 0000346F 3C2F                <2> 		cmp al, '/'
  4529 00003471 0F84A4000000        <2> 		je near divnum
  4530 00003477 3C5E                <2> 		cmp al, '^'
  4531 00003479 0F84BB000000        <2> 		je near expnum
  4532 0000347F C3                  <2> 		ret
  4533                              <2> 	resultnum1:
  4534 00003480 8A0D[30360000]      <2> 		mov cl, [decimalresult]
  4535 00003486 880D[2E360000]      <2> 		mov [decimal], cl
  4536 0000348C 8B0D[31360000]      <2> 		mov ecx, [result]
  4537 00003492 EB9A                <2> 		jmp vrnm2
  4538                              <2> 	resultnum2:
  4539 00003494 8A0D[2E360000]      <2> 		mov cl, [decimal]
  4540 0000349A 880D[2F360000]      <2> 		mov [decimal2], cl
  4541 000034A0 8A0D[30360000]      <2> 		mov cl, [decimalresult]
  4542 000034A6 880D[2E360000]      <2> 		mov [decimal], cl
  4543 000034AC 8B0D[31360000]      <2> 		mov ecx, [result]
  4544 000034B2 EBA1                <2> 		jmp vrnm4
  4545                              <2> 	checkdecimal2:
  4546 000034B4 8A25[2E360000]      <2> 		mov ah, [decimal]
  4547 000034BA 8825[2F360000]      <2> 		mov [decimal2], ah
  4548 000034C0 30E4                <2> 		xor ah, ah
  4549 000034C2 8825[2E360000]      <2> 		mov [decimal], ah
  4550                              <2> 	checkdecimal:
  4551 000034C8 89F7                <2> 		mov edi, esi
  4552                              <2> 	chkdec1:
  4553 000034CA 8A07                <2> 		mov al, [edi]
  4554 000034CC 3C2E                <2> 		cmp al, '.'
  4555 000034CE 0F840B000000        <2> 		je near fnddec
  4556 000034D4 3C00                <2> 		cmp al, 0
  4557 000034D6 0F8419000000        <2> 		je near nodecimal
  4558 000034DC 47                  <2> 		inc edi
  4559 000034DD EBEB                <2> 		jmp chkdec1
  4560                              <2> 	fnddec:
  4561 000034DF 8A4701              <2> 		mov al, [edi + 1]
  4562 000034E2 8807                <2> 		mov [edi], al
  4563 000034E4 3C00                <2> 		cmp al, 0
  4564 000034E6 0F8409000000        <2> 		je near nodecimal
  4565 000034EC FE05[2E360000]      <2> 		inc byte [decimal]
  4566 000034F2 47                  <2> 		inc edi
  4567 000034F3 EBEA                <2> 		jmp fnddec
  4568                              <2> 	nodecimal:
  4569 000034F5 C3                  <2> 		ret
  4570                              <2> 	plusnum:
  4571 000034F6 E8F4000000          <2> 		call decaddfix
  4572 000034FB 01D9                <2> 		add ecx, ebx
  4573 000034FD EB75                <2> 		jmp retnum
  4574                              <2> 	subnum:
  4575 000034FF E8EB000000          <2> 		call decaddfix
  4576 00003504 29D9                <2> 		sub ecx, ebx
  4577 00003506 EB6C                <2> 		jmp retnum
  4578                              <2> 	mulnum:
  4579 00003508 A0[2F360000]        <2> 		mov al, [decimal2]
  4580 0000350D 0005[2E360000]      <2> 		add [decimal], al
  4581 00003513 89C8                <2> 		mov eax, ecx
  4582 00003515 F7E3                <2> 		mul ebx
  4583 00003517 89C1                <2> 		mov ecx, eax
  4584 00003519 EB59                <2> 		jmp retnum
  4585                              <2> 	divnum:
  4586 0000351B E8CF000000          <2> 		call decaddfix
  4587 00003520 30C0                <2> 		xor al, al
  4588 00003522 A2[2E360000]        <2> 		mov [decimal], al
  4589 00003527 31D2                <2> 		xor edx, edx
  4590 00003529 89C8                <2> 		mov eax, ecx
  4591 0000352B 83FB00              <2> 		cmp ebx, 0
  4592 0000352E 0F8440000000        <2> 		je near retnum
  4593 00003534 F7F3                <2> 		div ebx
  4594 00003536 89C1                <2> 		mov ecx, eax
  4595 00003538 EB3A                <2> 		jmp retnum
  4596                              <2> 	expnum:
  4597 0000353A 8A15[2E360000]      <2> 		mov dl, [decimal]
  4598 00003540 8815[2F360000]      <2> 		mov [decimal2], dl
  4599 00003546 31D2                <2> 		xor edx, edx
  4600 00003548 89C8                <2> 		mov eax, ecx
  4601 0000354A 89D9                <2> 		mov ecx, ebx
  4602 0000354C 89C3                <2> 		mov ebx, eax
  4603 0000354E 83F900              <2> 		cmp ecx, 0
  4604 00003551 741C                <2> 		je noexpnum
  4605 00003553 49                  <2> 		dec ecx
  4606 00003554 83F900              <2> 		cmp ecx, 0
  4607 00003557 7412                <2> 		je noexpnumlp
  4608 00003559 F7E3                <2> 	expnumlp: mul ebx
  4609 0000355B 8A15[2F360000]      <2> 		mov dl, [decimal2]
  4610 00003561 0015[2E360000]      <2> 		add [decimal], dl
  4611 00003567 31D2                <2> 		xor edx, edx
  4612 00003569 E2EE                <2> 		loop expnumlp
  4613                              <2> 	noexpnumlp:
  4614 0000356B 89C1                <2> 		mov ecx, eax
  4615 0000356D EB05                <2> 		jmp retnum
  4616                              <2> 	noexpnum:
  4617 0000356F B901000000          <2> 		mov ecx, 1
  4618                              <2> 	retnum: 
  4619 00003574 BE[9CC80300]        <2> 		mov esi, numbuf
  4620 00003579 890D[31360000]      <2> 		mov [result], ecx
  4621 0000357F E861FAFFFF          <2> 		call convert
  4622 00003584 BE[9CC80300]        <2> 		mov esi, numbuf
  4623 00003589 8A25[2E360000]      <2> 		mov ah, [decimal]
  4624 0000358F 8825[30360000]      <2> 		mov [decimalresult], ah
  4625 00003595 80FC00              <2> 		cmp ah, 0
  4626 00003598 0F8425000000        <2> 		je near noputdecimal
  4627                              <2> 	putdecimal:
  4628 0000359E 4E                  <2> 		dec esi
  4629 0000359F FECC                <2> 		dec ah
  4630 000035A1 80FC00              <2> 		cmp ah, 0
  4631 000035A4 0F87F4FFFFFF        <2> 		ja near putdecimal
  4632 000035AA 4E                  <2> 		dec esi
  4633 000035AB 8A06                <2> 		mov al, [esi]
  4634 000035AD C6062E              <2> 		mov byte [esi], '.'
  4635                              <2> 	decputloop:
  4636 000035B0 4E                  <2> 		dec esi
  4637 000035B1 8A26                <2> 		mov ah, [esi]
  4638 000035B3 8806                <2> 		mov [esi], al
  4639 000035B5 88E0                <2> 		mov al, ah
  4640 000035B7 81FE[88C80300]      <2> 		cmp esi, buf2
  4641 000035BD 0F87EDFFFFFF        <2> 		ja near decputloop
  4642                              <2> 	noputdecimal:
  4643 000035C3 BE[88C80300]        <2> 		mov esi, buf2
  4644 000035C8 E805000000          <2> 		call chkadd
  4645 000035CD C3                  <2> 		ret
  4646 000035CE 00000000            <2> edxnumbuf dw 0,0
  4647 000035D2 8A06                <2> 	chkadd: mov al, [esi]
  4648 000035D4 3C30                <2> 		cmp al, '0'
  4649 000035D6 750C                <2> 		jne dnadd
  4650 000035D8 46                  <2> 		inc esi
  4651 000035D9 81FE[9CC80300]      <2> 		cmp esi, numbuf
  4652 000035DF 7402                <2> 		je dnaddm1
  4653 000035E1 EBEF                <2> 		jmp chkadd
  4654 000035E3 4E                  <2> 	dnaddm1: dec esi
  4655 000035E4 E826E7FFFF          <2> 	dnadd:	call print
  4656 000035E9 E81CE7FFFF          <2> 		call printline
  4657 000035EE C3                  <2> 		ret
  4658                              <2> 		
  4659                              <2> 	decaddfix:
  4660 000035EF A0[2F360000]        <2> 		mov al, [decimal2]
  4661 000035F4 8A25[2E360000]      <2> 		mov ah, [decimal]
  4662 000035FA 38E0                <2> 		cmp al, ah
  4663 000035FC 742F                <2> 		je gooddecadd
  4664 000035FE 38E0                <2> 		cmp al, ah
  4665 00003600 7217                <2> 		jb lowdecadd
  4666                              <2> 	highdecadd:
  4667 00003602 FEC4                <2> 		inc ah
  4668 00003604 89CA                <2> 		mov edx, ecx
  4669 00003606 C1E103              <2> 		shl ecx, 3
  4670 00003609 01D1                <2> 		add ecx, edx
  4671 0000360B 01D1                <2> 		add ecx, edx
  4672 0000360D 38E0                <2> 		cmp al, ah
  4673 0000360F 77F1                <2> 		ja highdecadd
  4674 00003611 8825[2E360000]      <2> 		mov [decimal], ah
  4675 00003617 EB14                <2> 		jmp gooddecadd
  4676                              <2> 	lowdecadd:
  4677 00003619 FEC0                <2> 		inc al
  4678 0000361B 89DA                <2> 		mov edx, ebx
  4679 0000361D C1E303              <2> 		shl ebx, 3
  4680 00003620 01D3                <2> 		add ebx, edx
  4681 00003622 01D3                <2> 		add ebx, edx
  4682 00003624 38E0                <2> 		cmp al, ah
  4683 00003626 72F1                <2> 		jb lowdecadd
  4684 00003628 A2[2E360000]        <2> 		mov [decimal], al
  4685                              <2> 	gooddecadd:
  4686 0000362D C3                  <2> 		ret
  4687                              <2> 		
  4688 0000362E 00                  <2> decimal db 0
  4689 0000362F 00                  <2> decimal2 db 0
  4690 00003630 00                  <2> decimalresult db 0
  4691 00003631 00000000            <2> result dd 0
  4692                              <1> %include 'source/programs/_variables.asm' ;% and $
  4693 00003635 FF2C2500            <2> db 255,44,"%",0
  4694                              <2> 	ans:
  4695 00003639 BE[88C80300]        <2> 		mov esi, buf2
  4696 0000363E E88FFFFFFF          <2> 		call chkadd
  4697 00003643 C3                  <2> 		ret
  4698                              <2> 		
  4699 00003644 FF2C2400            <2> db 255,44,"$",0
  4700 00003648 8B35[192F0000]      <2> var: mov esi, [currentcommandloc]
  4701 0000364E BB[88B00300]        <2> 	mov ebx, variables
  4702 00003653 8A06                <2> lkeq:	mov al, [esi]
  4703 00003655 3C3D                <2> 	cmp al, '='
  4704 00003657 741B                <2> 	je eqfnd	;is there an '=' sign?
  4705 00003659 3C00                <2> 	cmp al, 0
  4706 0000365B 7403                <2> 	je echovars
  4707 0000365D 46                  <2> 	inc esi
  4708 0000365E EBF3                <2> 	jmp lkeq
  4709 00003660 BE[88B00300]        <2> echovars: mov esi, variables
  4710 00003665 BB[88C00300]        <2> 	mov ebx, varend
  4711 0000366A B105                <2> 	mov cl, 5
  4712 0000366C B504                <2> 	mov ch, 4
  4713 0000366E E804F9FFFF          <2> 	call array
  4714 00003673 C3                  <2> 	ret
  4715 00003674 46                  <2> eqfnd:	inc esi
  4716 00003675 8A06                <2> 	mov al, [esi]
  4717 00003677 3C00                <2> 	cmp al, 0
  4718 00003679 740D                <2> 	je readvar
  4719 0000367B 8B35[192F0000]      <2> 	mov esi, [currentcommandloc]
  4720 00003681 BB[88B00300]        <2> 	mov ebx, variables
  4721 00003686 EB19                <2> 	jmp seek
  4722                              <2> readvar:
  4723 00003688 B00A                <2> 	mov al, 10
  4724 0000368A 66BB0700            <2> 	mov bx, 7
  4725 0000368E C605[D2220000]00    <2> 	mov byte [commandedit], 0
  4726 00003695 BF[88C80300]        <2> 	mov edi, buftxtend
  4727 0000369A E89AE7FFFF          <2> 	call rdprint
  4728 0000369F EBA7                <2> 	jmp var
  4729 000036A1 668B03              <2> seek:	mov ax, [ebx]
  4730 000036A4 B105                <2> 	mov cl, 5
  4731 000036A6 B504                <2> 	mov ch, 4
  4732 000036A8 6683F800            <2> 	cmp ax, 0
  4733 000036AC 0F8458000000        <2> 	je near save
  4734 000036B2 6639C8              <2> 	cmp ax, cx
  4735 000036B5 7403                <2> 	je skfnd
  4736 000036B7 43                  <2> 	inc ebx
  4737 000036B8 EBE7                <2> 	jmp seek
  4738 000036BA 8B35[192F0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4739 000036C0 46                  <2> 	inc esi
  4740 000036C1 83C302              <2> 	add ebx, 2
  4741 000036C4 89DF                <2> 	mov edi, ebx
  4742 000036C6 B13D                <2> 	mov cl, '='
  4743 000036C8 E88BF8FFFF          <2> 	call cndtest
  4744 000036CD 3C01                <2> 	cmp al, 1	
  4745 000036CF 7418                <2> 	je varfnd
  4746 000036D1 89FB                <2> 	mov ebx, edi
  4747 000036D3 8B35[192F0000]      <2> 	mov esi, [currentcommandloc]
  4748 000036D9 668B03              <2> 	mov ax, [ebx]
  4749 000036DC 6683F800            <2> 	cmp ax, 0
  4750 000036E0 0F8424000000        <2> 	je near save
  4751 000036E6 43                  <2> 	inc ebx
  4752 000036E7 EBB8                <2> 	jmp seek
  4753 000036E9 8A03                <2> varfnd:	mov al, [ebx]
  4754 000036EB 3C04                <2> 	cmp al, 4
  4755 000036ED 7404                <2> 	je save2
  4756 000036EF 4B                  <2> 	dec ebx
  4757 000036F0 4E                  <2> 	dec esi
  4758 000036F1 EBF6                <2> 	jmp varfnd
  4759 000036F3 4B                  <2> save2:	dec ebx
  4760 000036F4 4E                  <2> 	dec esi
  4761 000036F5 8A03                <2> 	mov al, [ebx]
  4762 000036F7 3C05                <2> 	cmp al, 5
  4763 000036F9 7402                <2> 	je remove
  4764 000036FB EBEC                <2> 	jmp varfnd
  4765 000036FD 8A03                <2> remove: mov al, [ebx]
  4766 000036FF 3C00                <2> 	cmp al, 0
  4767 00003701 749E                <2> 	je seek
  4768 00003703 30C0                <2> 	xor al, al
  4769 00003705 8803                <2> 	mov [ebx], al
  4770 00003707 43                  <2> 	inc ebx
  4771 00003708 EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4772 0000370A 8B35[192F0000]      <2> save:	mov esi, [currentcommandloc]
  4773 00003710 43                  <2> 	inc ebx
  4774 00003711 B005                <2> 	mov al, 5
  4775 00003713 B404                <2> 	mov ah, 4
  4776 00003715 668903              <2> 	mov [ebx], ax
  4777 00003718 43                  <2> 	inc ebx
  4778 00003719 43                  <2> svhere:	inc ebx
  4779 0000371A 46                  <2> 	inc esi
  4780 0000371B 8A06                <2> 	mov al, [esi]
  4781 0000371D 3C00                <2> 	cmp al, 0
  4782 0000371F 0F844A000000        <2> 	je near svdone
  4783 00003725 3C25                <2> 	cmp al, '%'
  4784 00003727 7404                <2> 	je ans2
  4785 00003729 8803                <2> 	mov [ebx], al	
  4786 0000372B EBEC                <2> 	jmp svhere
  4787 0000372D 56                  <2> ans2:	push esi
  4788 0000372E BE[88C80300]        <2> 	mov esi, buf2
  4789 00003733 E823000000          <2> 	call ansfnd
  4790 00003738 E803000000          <2> 	call anscp
  4791 0000373D 5E                  <2> 	pop esi
  4792 0000373E EBD9                <2> 	jmp svhere
  4793 00003740 8A06                <2> anscp:	mov al, [esi]
  4794 00003742 8803                <2> 	mov [ebx], al
  4795 00003744 81FE[9CC80300]      <2> 	cmp esi, numbuf
  4796 0000374A 74CD                <2> 	je svhere
  4797 0000374C 3C00                <2> 	cmp al, 0
  4798 0000374E 74C9                <2> 	je svhere
  4799 00003750 43                  <2> 	inc ebx
  4800 00003751 46                  <2> 	inc esi
  4801 00003752 EBEC                <2> 	jmp anscp
  4802 00003754 5E                  <2> ansnf:	pop esi
  4803 00003755 8A06                <2> 	mov al, [esi]
  4804 00003757 8803                <2> 	mov [ebx], al
  4805 00003759 EBBE                <2> 	jmp svhere
  4806 0000375B 46                  <2> ansfnd:	inc esi
  4807 0000375C 81FE[9BC80300]      <2> 	cmp esi, numbuf - 1
  4808 00003762 740A                <2> 	je fndans
  4809 00003764 8A06                <2> 	mov al, [esi]
  4810 00003766 3C00                <2> 	cmp al, 0
  4811 00003768 74EA                <2> 	je ansnf
  4812 0000376A 3C30                <2> 	cmp al, '0'
  4813 0000376C 74ED                <2> 	je ansfnd
  4814                              <2> fndans:
  4815 0000376E C3                  <2> 	ret
  4816 0000376F 30C0                <2> svdone:	xor al, al
  4817 00003771 8803                <2> 	mov [ebx], al
  4818 00003773 C3                  <2> 	ret
  4819                              <1> %include 'source/programs/_run.asm' ;./
  4820 00003774 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4821 00003778 FF2C2E2F00          <2> 	db 255,44,"./",0
  4822                              <2> rundiskprog:
  4823 0000377D 8B3D[192F0000]      <2> 	mov edi, [currentcommandloc]
  4824 00003783 83C702              <2> 	add edi, 2
  4825 00003786 BE00004000          <2> 	mov esi, 0x400000
  4826 0000378B E8FE2D0000          <2> 	call loadfile
  4827 00003790 81FA94010000        <2> 	cmp edx, 404
  4828 00003796 7461                <2> 	je noprogfound
  4829 00003798 BB00004000          <2> 	mov ebx, 0x400000
  4830 0000379D A1[74370000]        <2> 	mov eax, [elfstart]
  4831 000037A2 3903                <2> 	cmp [ebx], eax
  4832 000037A4 0F8431000000        <2> 	je near runelf
  4833 000037AA 66813B4558          <2> 	cmp word [ebx], "EX"
  4834 000037AF 756B                <2> 	jne progbatchfound
  4835 000037B1 83C302              <2> 	add ebx, 2
  4836 000037B4 8B3D[192F0000]      <2> 	mov edi, [currentcommandloc]
  4837 000037BA 83C702              <2> 	add edi, 2
  4838                              <2> findspaceprog:
  4839 000037BD 8A07                <2> 	mov al, [edi]
  4840 000037BF 47                  <2> 	inc edi
  4841 000037C0 3C20                <2> 	cmp al, " "
  4842 000037C2 75F9                <2> 	jne findspaceprog
  4843                              <2> findnonspaceprog:
  4844 000037C4 8A07                <2> 	mov al, [edi]
  4845 000037C6 47                  <2> 	inc edi
  4846 000037C7 3C20                <2> 	cmp al, " "
  4847 000037C9 74F9                <2> 	je findnonspaceprog
  4848 000037CB 4F                  <2> 	dec edi
  4849 000037CC 8925[08AE0300]      <2> 	mov [previousstack], esp
  4850 000037D2 FFD3                <2> 	call ebx
  4851 000037D4 8B25[08AE0300]      <2> 	mov esp, [previousstack]
  4852 000037DA C3                  <2> 	ret
  4853                              <2> runelf:
  4854 000037DB 8B3D[192F0000]      <2> 	mov edi, [currentcommandloc]
  4855 000037E1 83C702              <2> 	add edi, 2
  4856 000037E4 81C380000000        <2> 	add ebx, 0x80
  4857 000037EA 8925[08AE0300]      <2> 	mov [previousstack], esp
  4858 000037F0 FFD3                <2> 	call ebx
  4859 000037F2 8B25[08AE0300]      <2> 	mov esp, [previousstack]
  4860 000037F8 C3                  <2> 	ret
  4861                              <2> noprogfound:
  4862 000037F9 BE[AC840000]        <2> 	mov esi, notfound1
  4863 000037FE E80CE5FFFF          <2> 	call print
  4864 00003803 8B35[192F0000]      <2> 	mov esi, [currentcommandloc]
  4865 00003809 83C602              <2> 	add esi, 2
  4866 0000380C E8FEE4FFFF          <2> 	call print
  4867 00003811 BE[B4840000]        <2> 	mov esi, notfound2
  4868 00003816 E8F4E4FFFF          <2> 	call print
  4869 0000381B C3                  <2> 	ret
  4870                              <2> progbatchfound:
  4871 0000381C BF00004000          <2> 		mov edi, 0x400000
  4872 00003821 C605[82B00300]01    <2> 		mov byte [BATCHISON], 1
  4873                              <2> 	batchrunloop:
  4874 00003828 E82BF4FFFF          <2> 		call buftxtclear
  4875 0000382D BE[88C40300]        <2> 		mov esi, buftxt
  4876 00003832 8935[192F0000]      <2> 		mov [currentcommandloc], esi
  4877                              <2> 	batchrunloop2:
  4878 00003838 B10A                <2> 		mov cl, 10
  4879 0000383A B50D                <2> 		mov ch, 13
  4880 0000383C 380F                <2> 		cmp [edi], cl
  4881 0000383E 0F8419000000        <2> 		je near nxtbatchrunline
  4882 00003844 382F                <2> 		cmp [edi], ch
  4883 00003846 0F8411000000        <2> 		je near nxtbatchrunline
  4884 0000384C 803F00              <2> 		cmp byte [edi], 0
  4885 0000384F 0F8408000000        <2> 		je near nxtbatchrunline
  4886 00003855 8A07                <2> 		mov al, [edi]
  4887 00003857 8806                <2> 		mov [esi], al
  4888 00003859 46                  <2> 		inc esi
  4889 0000385A 47                  <2> 		inc edi
  4890 0000385B EBDB                <2> 		jmp batchrunloop2
  4891                              <2> 	nxtbatchrunline:
  4892 0000385D 47                  <2> 		inc edi
  4893 0000385E 380F                <2> 		cmp [edi], cl
  4894 00003860 74FB                <2> 		je nxtbatchrunline
  4895 00003862 382F                <2> 		cmp [edi], ch
  4896 00003864 74F7                <2> 		je nxtbatchrunline
  4897 00003866 893D[C4380000]      <2> 		mov [batchedi], edi
  4898 0000386C 893D[7EB00300]      <2> 		mov [BATCHPOS], edi
  4899 00003872 C60600              <2> 		mov byte [esi], 0
  4900 00003875 BE[88C40300]        <2> 		mov esi, buftxt
  4901 0000387A 803E00              <2> 		cmp byte [esi], 0
  4902 0000387D 0F8439000000        <2> 		je near nobatchfoundrun
  4903 00003883 31DB                <2> 		xor ebx, ebx
  4904 00003885 8A1D[19B00300]      <2> 		mov bl, [IFON]
  4905 0000388B 80FB00              <2> 		cmp bl, 0
  4906 0000388E 0F8534000000        <2> 		jne near iftestbatch
  4907                              <2> 	doneiftest:
  4908 00003894 803D[8E390000]00    <2> 		cmp byte [runnextline], 0
  4909 0000389B 0F8405000000        <2> 		je near noruniftest
  4910 000038A1 E8A3F5FFFF          <2> 		call run
  4911                              <2> 	noruniftest:
  4912 000038A6 C605[8E390000]01    <2> 		mov byte [runnextline], 1
  4913 000038AD 8B3D[C4380000]      <2> 		mov edi, [batchedi]
  4914 000038B3 803F00              <2> 		cmp byte [edi], 0
  4915 000038B6 0F856CFFFFFF        <2> 		jne near batchrunloop
  4916                              <2> 	nobatchfoundrun:
  4917 000038BC C605[82B00300]00    <2> 		mov byte [BATCHISON], 0
  4918 000038C3 C3                  <2> 		ret
  4919                              <2> 	
  4920 000038C4 00000000            <2> batchedi dd 0	
  4921                              <2> 	
  4922                              <2> 	iftestbatch:
  4923 000038C8 BE[1AB00300]        <2> 		mov esi, IFTRUE
  4924 000038CD 01DE                <2> 		add esi, ebx
  4925 000038CF 803E00              <2> 		cmp byte [esi], 0
  4926 000038D2 0F85BCFFFFFF        <2> 		jne near doneiftest
  4927 000038D8 881D[8F390000]      <2> 		mov [iffalsebuf], bl
  4928 000038DE 803D[83B00300]01    <2> 		cmp byte [LOOPON], 1
  4929 000038E5 0F8510000000        <2> 		jne near fifindbatch
  4930 000038EB E938FFFFFF          <2> 		jmp batchrunloop
  4931                              <2> 	elsetestbatch:
  4932 000038F0 C60601              <2> 		mov byte [esi], 1
  4933 000038F3 83C705              <2> 		add edi, 5
  4934 000038F6 E92DFFFFFF          <2> 		jmp batchrunloop
  4935                              <2> 	fifindbatch:
  4936 000038FB 66B96966            <2> 		mov cx, "if"
  4937 000038FF 66B86669            <2> 		mov ax, "fi"
  4938 00003903 663907              <2> 		cmp [edi], ax
  4939 00003906 0F8424000000        <2> 		je near fifoundbatch
  4940 0000390C 66390F              <2> 		cmp [edi], cx
  4941 0000390F 0F845F000000        <2> 		je near iffoundbatch
  4942 00003915 803F00              <2> 		cmp byte [edi], 0
  4943 00003918 0F8412000000        <2> 		je near fifoundbatch
  4944 0000391E B8656C7365          <2> 		mov eax, "else"
  4945 00003923 3907                <2> 		cmp [edi], eax
  4946 00003925 0F84C5FFFFFF        <2> 		je near elsetestbatch
  4947 0000392B E976FFFFFF          <2> 		jmp noruniftest
  4948                              <2> 	fifoundbatch:
  4949 00003930 83C702              <2> 		add edi, 2
  4950 00003933 B00A                <2> 		mov al, 10
  4951 00003935 3807                <2> 		cmp [edi], al
  4952 00003937 0F840B000000        <2> 		je near goodfibatch
  4953 0000393D 803F00              <2> 		cmp byte [edi], 0
  4954 00003940 0F8476FFFFFF        <2> 		je near nobatchfoundrun
  4955 00003946 EBB3                <2> 		jmp fifindbatch
  4956                              <2> 	goodfibatch:
  4957 00003948 B001                <2> 		mov al, 1
  4958 0000394A 2805[19B00300]      <2> 		sub [IFON], al 
  4959 00003950 A0[19B00300]        <2> 		mov al, [IFON]
  4960 00003955 8A1D[8F390000]      <2> 		mov bl, [iffalsebuf]
  4961 0000395B 38D8                <2> 		cmp al, bl
  4962 0000395D 779C                <2> 		ja fifindbatch
  4963 0000395F 8B35[192F0000]      <2> 		mov esi, [currentcommandloc]
  4964 00003965 83EF02              <2> 		sub edi, 2
  4965 00003968 C605[8E390000]00    <2> 		mov byte [runnextline], 0
  4966 0000396F E9B4FEFFFF          <2> 		jmp batchrunloop
  4967                              <2> 	iffoundbatch:
  4968 00003974 B020                <2> 		mov al, ' '
  4969 00003976 83C702              <2> 		add edi, 2
  4970 00003979 3807                <2> 		cmp [edi], al
  4971 0000397B 0F857AFFFFFF        <2> 		jne near fifindbatch
  4972 00003981 B001                <2> 		mov al, 1
  4973 00003983 0005[19B00300]      <2> 		add [IFON], al
  4974 00003989 E96DFFFFFF          <2> 		jmp fifindbatch
  4975                              <2> 		
  4976                              <2> 		
  4977 0000398E 01                  <2> runnextline db 1
  4978 0000398F 00                  <2> iffalsebuf db 0
  4979 00003990 C3                  <2> notbatch: ret 
  4980                              <1> %ifdef network.included
  4981                              <1> 	%include 'source/programs/arp.asm'
  4982                              <1> %endif
  4983                              <1> %include 'source/programs/batch.asm'
  4984 00003991 FF2C626174636800    <2> db 255,44,"batch",0
  4985                              <2> 	batchst: 
  4986 00003999 8B3D[192F0000]      <2> 		mov edi, [currentcommandloc]
  4987 0000399F 83C706              <2> 		add edi, 6
  4988 000039A2 803F00              <2> 		cmp byte [edi], 0
  4989 000039A5 0F846D000000        <2> 		je near nonamefound
  4990 000039AB BE00004000          <2> 		mov esi, 0x400000
  4991 000039B0 E8D92B0000          <2> 		call loadfile
  4992 000039B5 89D0                <2> 		mov eax, edx
  4993 000039B7 3D94010000          <2> 		cmp eax, 404
  4994 000039BC 7465                <2> 		je goodbatchname
  4995 000039BE BE[C9390000]        <2> 		mov esi, badbatchname
  4996 000039C3 E847E3FFFF          <2> 		call print
  4997 000039C8 C3                  <2> 		ret
  4998 000039C9 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4999 000039D2 20616C726561647920- <2>
  5000 000039DB 657869737473210A00  <2>
  5001 000039E4 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  5002 000039ED 746F20747970652061- <2>
  5003 000039F6 206E616D6520616674- <2>
  5004 000039FF 65722074686520636F- <2>
  5005 00003A08 6D6D616E642E0A00    <2>
  5006 00003A10 00000000            <2> 		esicache3 dd 0
  5007 00003A14 00000000            <2> 		esicache2 dd 0
  5008                              <2> 	nonamefound:
  5009 00003A18 BE[E4390000]        <2> 		mov esi, namenotfoundbatch
  5010 00003A1D E8EDE2FFFF          <2> 		call print
  5011 00003A22 C3                  <2> 		ret
  5012                              <2> 	goodbatchname:
  5013 00003A23 BE00004000          <2> 		mov esi, 0x400000
  5014                              <2> 	batchcreate:
  5015 00003A28 8935[103A0000]      <2> 		mov [esicache3], esi
  5016 00003A2E BF00008000          <2> 		mov edi, 0x800000
  5017 00003A33 B00A                <2> 		mov al, 10
  5018 00003A35 B307                <2> 		mov bl, 7
  5019 00003A37 B404                <2> 		mov ah, 4
  5020 00003A39 CD30                <2> 		int 30h
  5021 00003A3B 8935[143A0000]      <2> 		mov [esicache2], esi
  5022 00003A41 8A0E                <2> 		mov cl, [esi]
  5023 00003A43 8B35[103A0000]      <2> 		mov esi, [esicache3]
  5024 00003A49 BB[7D3A0000]        <2> 		mov ebx, exitword
  5025 00003A4E E805F5FFFF          <2> 		call cndtest
  5026 00003A53 3C01                <2> 		cmp al, 1
  5027 00003A55 7411                <2> 		je endbatchcreate
  5028 00003A57 3C02                <2> 		cmp al, 2
  5029 00003A59 740D                <2> 		je endbatchcreate
  5030 00003A5B 8B35[143A0000]      <2> 		mov esi, [esicache2]
  5031 00003A61 B00A                <2> 		mov al, 10
  5032 00003A63 8806                <2> 		mov [esi], al
  5033 00003A65 46                  <2> 		inc esi
  5034 00003A66 EBC0                <2> 		jmp batchcreate
  5035                              <2> 	endbatchcreate:
  5036 00003A68 8B35[103A0000]      <2> 		mov esi, [esicache3]
  5037 00003A6E 31C0                <2> 		xor eax, eax
  5038 00003A70 8806                <2> 		mov [esi], al
  5039 00003A72 BE00004000          <2> 		mov esi, 0x400000
  5040 00003A77 E893E2FFFF          <2> 		call print
  5041 00003A7C C3                  <2> 		ret
  5042                              <2> 	
  5043 00003A7D 5C7800              <2> 	exitword db "\x",0
  5044 00003A80 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  5045 00003A89 6F20657869742E0A00  <2>
  5046                              <1> %ifdef gui.background
  5047                              <1> 	%include 'source/programs/background.asm'
  5048 00003A92 FF2C6261636B67726F- <2> db 255,44,"background",0
  5049 00003A9B 756E6400            <2>
  5050 00003A9F 8B3D[192F0000]      <2> 		mov edi, [currentcommandloc]
  5051 00003AA5 83C70B              <2> 		add edi, 11
  5052 00003AA8 BE00008000          <2> 		mov esi, 0x800000
  5053 00003AAD E8DC2A0000          <2> 		call loadfile
  5054 00003AB2 81FA94010000        <2> 		cmp edx, 404
  5055 00003AB8 0F8423120000        <2> 		je near filenotfound
  5056 00003ABE BE00008000          <2> 		mov esi, 0x800000
  5057 00003AC3 66813E424D          <2> 		cmp word [esi], "BM"
  5058 00003AC8 7401                <2> 		je .bmpfound
  5059 00003ACA C3                  <2> 		ret
  5060                              <2> .bmpfound:
  5061 00003ACB 8B3D[3D550000]      <2> 		mov edi, [physbaseptr]
  5062 00003AD1 57                  <2> 		push edi
  5063 00003AD2 BE[9CCA0300]        <2> 		mov esi, backgroundbuffer
  5064 00003AD7 8935[DE6D0000]      <2> 		mov [backgroundimage], esi
  5065 00003ADD 8935[3D550000]      <2> 		mov [physbaseptr], esi
  5066 00003AE3 31C0                <2> 		xor eax, eax
  5067                              <2> .clearlp:
  5068 00003AE5 8906                <2> 		mov [esi], eax
  5069 00003AE7 83C604              <2> 		add esi, 4
  5070 00003AEA 81FE[9CDE2B00]      <2> 		cmp esi, backgroundbufferend
  5071 00003AF0 72F3                <2> 		jb .clearlp
  5072 00003AF2 BE00008000          <2> 		mov esi, 0x800000
  5073 00003AF7 31C9                <2> 		xor ecx, ecx
  5074 00003AF9 31D2                <2> 		xor edx, edx
  5075 00003AFB 31DB                <2> 		xor ebx, ebx
  5076 00003AFD E85A2C0000          <2> 		call showbmp
  5077 00003B02 5F                  <2> 		pop edi
  5078 00003B03 893D[3D550000]      <2> 		mov [physbaseptr], edi
  5079 00003B09 803D[0A850000]00    <2> 		cmp byte [guion], 0
  5080 00003B10 740F                <2> 		je .noclear
  5081 00003B12 E872320000          <2> 		call guiclear
  5082 00003B17 E84D2F0000          <2> 		call clearmousecursor
  5083 00003B1C E8E9320000          <2> 		call reloadallgraphics
  5084                              <2> .noclear:
  5085 00003B21 C3                  <2> 		ret
  5086                              <1> %endif
  5087                              <1> %include 'source/programs/beep.asm'
  5088 00003B22 FF2C6265657000      <2> 	db 255,44,"beep",0
  5089                              <2> beep:
  5090 00003B29 B8[4E3B0000]        <2> 	mov eax, beepstart
  5091 00003B2E A3[5D020000]        <2> 	mov [soundpos], eax
  5092 00003B33 B8[523B0000]        <2> 	mov eax, beepend
  5093 00003B38 A3[61020000]        <2> 	mov [soundendpos], eax
  5094 00003B3D C605[5A020000]01    <2> 	mov byte [soundon], 1
  5095                              <2> waitforsoundendbeep:
  5096 00003B44 A0[5A020000]        <2> 	mov al, [soundon]
  5097 00003B49 3C00                <2> 	cmp al, 0
  5098 00003B4B 75F7                <2> 	jne waitforsoundendbeep
  5099 00003B4D C3                  <2> 	ret
  5100                              <2> 	
  5101                              <2> beepstart:
  5102 00003B4E 3200D111            <2> 	dw 50, 4561
  5103                              <2> beepend:
  5104                              <1> %ifdef dos.compatible
  5105                              <1> %else
  5106                              <1> 	%include 'source/programs/boot.asm'
  5107 00003B52 FF2C626F6F7400      <2> db 255,44,"boot",0
  5108                              <2> quickboot:
  5109                              <2> 	;load and jump to the bootloader
  5110                              <2> 	; mov ecx, 1
  5111                              <2> 	; xor ebx, ebx
  5112                              <2> 	; mov esi, 0x400000
  5113                              <2> 	; call diskr
  5114                              <2> 	; mov ax, LINEAR_SEL
  5115                              <2> 	; mov fs, ax
  5116                              <2> 	; mov esi, 0x400000
  5117                              <2> 	; mov edi, 0x7C00
  5118                              <2> 	; xor ebx, ebx
  5119                              <2> ; .lp:
  5120                              <2> 	; mov ecx, [esi+ebx]
  5121                              <2> 	; mov [fs:edi+ebx], ecx
  5122                              <2> 	; add ebx, 4
  5123                              <2> 	; cmp ebx, 512
  5124                              <2> 	; jb .lp
  5125 00003B59 66BB[693B]          <2> 	mov bx, bootload
  5126 00003B5D 66891D[D20C0000]    <2> 	mov [realmodeptr], bx
  5127 00003B64 E95DD0FFFF          <2> 	jmp realmode
  5128                              <2> [BITS 16]
  5129                              <2> bootload:
  5130 00003B69 B80300              <2> 	mov ax, 3
  5131 00003B6C 31DB                <2> 	xor bx, bx
  5132 00003B6E CD10                <2> 	int 10h
  5133 00003B70 EA007C0000          <2> 	jmp 0:0x7C00
  5134                              <2> [BITS 32]
  5135                              <1> %endif
  5136                              <1> %include 'source/programs/cd.asm'
  5137 00003B75 FF2C636400          <2> db 255,44,"cd",0
  5138                              <2> cd:
  5139 00003B7A 8B35[192F0000]      <2> 	mov esi, [currentcommandloc]
  5140 00003B80 83C603              <2> 	add esi, 3
  5141 00003B83 8B3D[10AE0300]      <2> 	mov edi, [currentfolderloc]
  5142 00003B89 893D[0CAE0300]      <2> 	mov [lastfolderloc], edi
  5143 00003B8F 81C7[14AE0300]      <2> 	add edi, currentfolder
  5144 00003B95 4F                  <2> 	dec edi
  5145 00003B96 803E2F              <2> 	cmp byte [esi], '/'
  5146 00003B99 751C                <2> 	jne .noroot
  5147 00003B9B 31FF                <2> 	xor edi, edi
  5148 00003B9D 893D[10AE0300]      <2> 	mov [currentfolderloc], edi
  5149 00003BA3 893D[0CAE0300]      <2> 	mov [lastfolderloc], edi
  5150 00003BA9 81C7[14AE0300]      <2> 	add edi, currentfolder
  5151 00003BAF 4F                  <2> 	dec edi
  5152 00003BB0 46                  <2> 	inc esi
  5153 00003BB1 803E00              <2> 	cmp byte [esi], 0
  5154 00003BB4 7401                <2> 	je .noroot
  5155 00003BB6 4E                  <2> 	dec esi
  5156                              <2> .noroot:
  5157 00003BB7 66813E2E2E          <2> 	cmp word [esi], ".."
  5158 00003BBC 742A                <2> 	je .moveup
  5159 00003BBE 47                  <2> 	inc edi
  5160                              <2> .movedown:
  5161 00003BBF 8A06                <2> 	mov al, [esi]
  5162 00003BC1 8807                <2> 	mov [edi], al
  5163 00003BC3 47                  <2> 	inc edi
  5164 00003BC4 46                  <2> 	inc esi
  5165 00003BC5 3C00                <2> 	cmp al, 0
  5166 00003BC7 740A                <2> 	je .donecd
  5167 00003BC9 81FF[14B00300]      <2> 	cmp edi, currentfolderend
  5168 00003BCF 72EE                <2> 	jb .movedown
  5169 00003BD1 30C0                <2> 	xor al, al
  5170                              <2> .donecd:
  5171 00003BD3 4F                  <2> 	dec edi
  5172 00003BD4 C6072F              <2> 	mov byte [edi], '/'
  5173 00003BD7 47                  <2> 	inc edi
  5174 00003BD8 C60700              <2> 	mov byte [edi], 0
  5175 00003BDB 81EF[14AE0300]      <2> 	sub edi, currentfolder
  5176 00003BE1 893D[10AE0300]      <2> 	mov [currentfolderloc], edi
  5177 00003BE7 C3                  <2> 	ret
  5178                              <2> .moveup:
  5179 00003BE8 31C0                <2> 	xor eax, eax
  5180 00003BEA A3[0CAE0300]        <2> 	mov [lastfolderloc], eax
  5181                              <2> .moveuploop:
  5182 00003BEF 4F                  <2> 	dec edi
  5183 00003BF0 8A07                <2> 	mov al, [edi]
  5184 00003BF2 81FF[14AE0300]      <2> 	cmp edi, currentfolder
  5185 00003BF8 763B                <2> 	jbe .moveupover
  5186 00003BFA 3C2F                <2> 	cmp al, '/'
  5187 00003BFC 75F1                <2> 	jne .moveuploop
  5188 00003BFE C6072F              <2> 	mov byte [edi], '/'
  5189 00003C01 47                  <2> 	inc edi
  5190 00003C02 C60700              <2> 	mov byte [edi], 0
  5191 00003C05 81EF[14AE0300]      <2> 	sub edi, currentfolder
  5192 00003C0B 893D[10AE0300]      <2> 	mov [currentfolderloc], edi
  5193 00003C11 81C7[14AE0300]      <2> 	add edi, currentfolder
  5194 00003C17 4F                  <2> 	dec edi
  5195                              <2> .lastfolder:
  5196 00003C18 4F                  <2> 	dec edi
  5197 00003C19 8A07                <2> 	mov al, [edi]
  5198 00003C1B 81FF[14AE0300]      <2> 	cmp edi, currentfolder
  5199 00003C21 7604                <2> 	jbe .donemoveup
  5200 00003C23 3C2F                <2> 	cmp al, '/'
  5201 00003C25 75F1                <2> 	jne .lastfolder
  5202                              <2> .donemoveup:
  5203 00003C27 47                  <2> 	inc edi
  5204 00003C28 81EF[14AE0300]      <2> 	sub edi, currentfolder
  5205 00003C2E 893D[0CAE0300]      <2> 	mov [lastfolderloc], edi
  5206 00003C34 C3                  <2> 	ret
  5207                              <2> .moveupover:
  5208 00003C35 BF[14AE0300]        <2> 	mov edi, currentfolder
  5209 00003C3A C6072F              <2> 	mov byte [edi], '/'
  5210 00003C3D 47                  <2> 	inc edi
  5211 00003C3E C60700              <2> 	mov byte [edi], 0
  5212 00003C41 31C0                <2> 	xor eax, eax
  5213 00003C43 A3[0CAE0300]        <2> 	mov [lastfolderloc], eax
  5214 00003C48 40                  <2> 	inc eax
  5215 00003C49 A3[10AE0300]        <2> 	mov [currentfolderloc], eax
  5216 00003C4E C3                  <2> 	ret
  5217                              <1> %include 'source/programs/charmap.asm'
  5218 00003C4F 00                  <2> charmapnum db 0
  5219 00003C50 FF2C636861726D6170- <2> db 255,44,"charmap",0
  5220 00003C59 00                  <2>
  5221 00003C5A 8B35[192F0000]      <2> 	mov esi, [currentcommandloc]
  5222 00003C60 83C608              <2> 	add esi, 8
  5223 00003C63 803E00              <2> 	cmp byte [esi], 0
  5224 00003C66 7412                <2> 	je .nospecific
  5225 00003C68 E8ECF5FFFF          <2> 	call cnvrthextxt
  5226 00003C6D 6689C8              <2> 	mov ax, cx
  5227 00003C70 66BB0700            <2> 	mov bx, 7
  5228 00003C74 E805E7FFFF          <2> 	call prcharq
  5229 00003C79 C3                  <2> 	ret
  5230                              <2> .nospecific:
  5231 00003C7A 66BB0700            <2> 	mov bx, 7
  5232 00003C7E 66B82000            <2> 	mov ax, " "
  5233 00003C82 C605[4F3C0000]00    <2> 	mov byte [charmapnum], 0
  5234 00003C89 E8F0E6FFFF          <2> 	call prcharq
  5235 00003C8E E8EBE6FFFF          <2> 	call prcharq
  5236 00003C93 E8E6E6FFFF          <2> 	call prcharq
  5237 00003C98 E8E1E6FFFF          <2> 	call prcharq
  5238 00003C9D 66B83000            <2> 	mov ax, "0"
  5239                              <2> charmapnumprnt:
  5240 00003CA1 E8D8E6FFFF          <2> 	call prcharq
  5241 00003CA6 6640                <2> 	inc ax
  5242 00003CA8 6650                <2> 	push ax
  5243 00003CAA 66B82000            <2> 	mov ax, " "
  5244 00003CAE E8CBE6FFFF          <2> 	call prcharq
  5245 00003CB3 6658                <2> 	pop ax
  5246 00003CB5 6683F839            <2> 	cmp ax, "9"
  5247 00003CB9 76E6                <2> 	jbe charmapnumprnt
  5248 00003CBB 66B84100            <2> 	mov ax, "A"
  5249                              <2> charmapnumprnt2:
  5250 00003CBF E8BAE6FFFF          <2> 	call prcharq
  5251 00003CC4 6640                <2> 	inc ax
  5252 00003CC6 6650                <2> 	push ax
  5253 00003CC8 66B82000            <2> 	mov ax, " "
  5254 00003CCC E8ADE6FFFF          <2> 	call prcharq
  5255 00003CD1 6658                <2> 	pop ax
  5256 00003CD3 6683F847            <2> 	cmp ax, "G"
  5257 00003CD7 72E6                <2> 	jb charmapnumprnt2
  5258                              <2> 	
  5259 00003CD9 BE[E5840000]        <2> 	mov esi, line
  5260 00003CDE E80BE0FFFF          <2> 	call printquiet
  5261 00003CE3 6631C0              <2> 	xor ax, ax
  5262 00003CE6 6689C1              <2> 	mov cx, ax
  5263 00003CE9 E819F4FFFF          <2> 	call showhexsmall
  5264 00003CEE EB22                <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5265                              <2> charmapcopy:
  5266 00003CF0 6640                <2> 	inc ax
  5267 00003CF2 6683F808            <2> 	cmp ax, 8
  5268 00003CF6 741A                <2> 	je charmapnocopy
  5269 00003CF8 6683F809            <2> 	cmp ax, 9
  5270 00003CFC 7414                <2> 	je charmapnocopy
  5271 00003CFE 6683F80A            <2> 	cmp ax, 10
  5272 00003D02 740E                <2> 	je charmapnocopy
  5273 00003D04 6683F80D            <2> 	cmp ax, 13
  5274 00003D08 7408                <2> 	je charmapnocopy
  5275 00003D0A 663D0001            <2> 	cmp ax, 256
  5276 00003D0E 7447                <2> 	je nomorecharmap
  5277 00003D10 EB04                <2> 	jmp okchar
  5278                              <2> charmapnocopy:
  5279 00003D12 66B82000            <2> 	mov ax, " "
  5280                              <2> okchar:
  5281 00003D16 6650                <2> 	push ax
  5282 00003D18 E861E6FFFF          <2> 	call prcharq
  5283 00003D1D 66B82000            <2> 	mov ax, " "
  5284 00003D21 E858E6FFFF          <2> 	call prcharq
  5285 00003D26 6658                <2> 	pop ax
  5286                              <2> charmapcopycheck:
  5287 00003D28 FE05[4F3C0000]      <2> 	inc byte [charmapnum]
  5288 00003D2E 803D[4F3C0000]10    <2> 	cmp byte [charmapnum], 16
  5289 00003D35 72B9                <2> 	jb charmapcopy
  5290 00003D37 6650                <2> 	push ax
  5291 00003D39 BE[E5840000]        <2> 	mov esi, line
  5292 00003D3E E8ABDFFFFF          <2> 	call printquiet
  5293 00003D43 6658                <2> 	pop ax
  5294 00003D45 88C1                <2> 	mov cl, al
  5295 00003D47 FEC1                <2> 	inc cl
  5296 00003D49 E8B9F3FFFF          <2> 	call showhexsmall
  5297 00003D4E C605[4F3C0000]00    <2> 	mov byte [charmapnum], 0
  5298 00003D55 EB99                <2> 	jmp charmapcopy
  5299                              <2> nomorecharmap:
  5300 00003D57 C3                  <2> 	ret
  5301                              <1> %ifdef gui.included
  5302                              <1> 	%include 'source/programs/circle.asm'
  5303 00003D58 FF2C636972636C6500  <2> db 255,44,"circle",0
  5304                              <2> circle:
  5305 00003D61 8B35[192F0000]      <2> 	mov esi, [currentcommandloc]
  5306 00003D67 83C607              <2> 	add esi, 7
  5307 00003D6A 66B91000            <2> 	mov cx, 16
  5308 00003D6E 30C0                <2> 	xor al, al
  5309 00003D70 3806                <2> 	cmp [esi], al
  5310 00003D72 7405                <2> 	je .nocmdline
  5311 00003D74 E820F5FFFF          <2> 	call cnvrttxt
  5312                              <2> .nocmdline:
  5313 00003D79 E8AE0A0000          <2> 	call linetester.stime
  5314 00003D7E E854000000          <2> 	call fcircle.nocmdline
  5315 00003D83 E8BC0A0000          <2> 	call linetester.etime
  5316 00003D88 53                  <2> 	push ebx
  5317 00003D89 57                  <2> 	push edi
  5318 00003D8A E85AE5FFFF          <2> 	call getchar
  5319 00003D8F 59                  <2> 	pop ecx
  5320 00003D90 E835F4FFFF          <2> 	call showdec
  5321 00003D95 BE[CB480000]        <2> 	mov esi, linetester.msgcircle
  5322 00003D9A E84FDFFFFF          <2> 	call printquiet
  5323 00003D9F 59                  <2> 	pop ecx
  5324 00003DA0 E825F4FFFF          <2> 	call showdec
  5325 00003DA5 BE[E2480000]        <2> 	mov esi, linetester.msgtime
  5326 00003DAA E83FDFFFFF          <2> 	call printquiet
  5327 00003DAF E856300000          <2> 	call reloadallgraphics
  5328 00003DB4 C3                  <2> 	ret
  5329                              <2> 	
  5330 00003DB5 FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5331 00003DBE 00                  <2>
  5332                              <2> fcircle:	
  5333 00003DBF 8B35[192F0000]      <2> 	mov esi, [currentcommandloc]
  5334 00003DC5 83C608              <2> 	add esi, 8
  5335 00003DC8 66B91000            <2> 	mov cx, 16
  5336 00003DCC 30C0                <2> 	xor al, al
  5337 00003DCE 3806                <2> 	cmp [esi], al
  5338 00003DD0 7405                <2> 	je .nocmdline
  5339 00003DD2 E8C2F4FFFF          <2> 	call cnvrttxt
  5340                              <2> .nocmdline:
  5341 00003DD7 6689C8              <2> 	mov ax, cx
  5342 00003DDA 66D1E1              <2> 	shl cx, 1
  5343 00003DDD 6689CA              <2> 	mov dx, cx
  5344 00003DE0 663B15[27550000]    <2> 	cmp dx, [resolutionx]
  5345 00003DE7 731B                <2> 	jae .done
  5346 00003DE9 663B0D[29550000]    <2> 	cmp cx, [resolutiony]
  5347 00003DF0 7312                <2> 	jae .done
  5348 00003DF2 668B35[58020000]    <2> 	mov si, [timenanoseconds + 2]
  5349 00003DF9 31FF                <2> 	xor edi, edi
  5350 00003DFB 803D[0A850000]01    <2> 	cmp byte [guion], 1
  5351 00003E02 7401                <2> 	je .lp
  5352 00003E04 C3                  <2> .done ret
  5353                              <2> .lp:
  5354 00003E05 6629C2              <2> 	sub dx, ax
  5355 00003E08 6629C1              <2> 	sub cx, ax
  5356 00003E0B 60                  <2> 	pusha
  5357 00003E0C E81A2B0000          <2> 	call fillcircle
  5358 00003E11 61                  <2> 	popa
  5359 00003E12 47                  <2> 	inc edi
  5360 00003E13 660335[56020000]    <2> 	add si, [timenanoseconds]
  5361 00003E1A 6601C2              <2> 	add dx, ax
  5362 00003E1D 6601C2              <2> 	add dx, ax
  5363 00003E20 6601C2              <2> 	add dx, ax
  5364 00003E23 6601C1              <2> 	add cx, ax
  5365 00003E26 663B15[27550000]    <2> 	cmp dx, [resolutionx]
  5366 00003E2D 72D6                <2> 	jb .lp
  5367 00003E2F 6689C2              <2> 	mov dx, ax
  5368 00003E32 6601C2              <2> 	add dx, ax
  5369 00003E35 6601C1              <2> 	add cx, ax
  5370 00003E38 6601C1              <2> 	add cx, ax
  5371 00003E3B 663B0D[29550000]    <2> 	cmp cx, [resolutiony]
  5372 00003E42 72C1                <2> 	jb .lp
  5373 00003E44 C3                  <2> 	ret
  5374                              <1> %endif
  5375                              <1> %include 'source/programs/clear.asm'
  5376 00003E45 FF2C636C65617200    <2> db 255,44,"clear",0
  5377 00003E4D E869DFFFFF          <2> 		call clear
  5378 00003E52 C3                  <2> 		ret 
  5379                              <1> %include 'source/programs/cpuid.asm'
  5380 00003E53 FF2C637075696400    <2> db 255,44,"cpuid",0
  5381 00003E5B 31C0                <2> 	xor eax, eax
  5382 00003E5D 0FA2                <2> 	cpuid
  5383 00003E5F 891D[B03E0000]      <2> 	mov [cpuidbuf], ebx
  5384 00003E65 8915[B43E0000]      <2> 	mov [cpuidbuf + 4], edx
  5385 00003E6B 890D[B83E0000]      <2> 	mov [cpuidbuf + 8], ecx
  5386 00003E71 BE[B03E0000]        <2> 	mov esi, cpuidbuf
  5387 00003E76 E894DEFFFF          <2> 	call print
  5388 00003E7B BE[E5840000]        <2> 	mov esi, line
  5389 00003E80 E88ADEFFFF          <2> 	call print
  5390 00003E85 B801000000          <2> 	mov eax, 1
  5391 00003E8A 0FA2                <2> 	cpuid
  5392 00003E8C 89C1                <2> 	mov ecx, eax
  5393 00003E8E C605[06310000]02    <2> 	mov byte [firsthexshown], 2
  5394 00003E95 E881F2FFFF          <2> 	call showhex
  5395 00003E9A B808000080          <2> 	mov eax, 0x80000008
  5396 00003E9F 0FA2                <2> 	cpuid
  5397 00003EA1 89C1                <2> 	mov ecx, eax
  5398 00003EA3 C605[06310000]02    <2> 	mov byte [firsthexshown], 2
  5399 00003EAA E86CF2FFFF          <2> 	call showhex
  5400 00003EAF C3                  <2> 	ret
  5401                              <2> 	
  5402 00003EB0 00<rept>            <2> cpuidbuf times 13 db 0
  5403                              <2> cpuidvendorend:
  5404                              <1> %include 'source/programs/date.asm'
  5405 00003EBD 082E30303030303030- <2> timenscache db 8,".000000000"
  5406 00003EC6 3030                <2>
  5407 00003EC8 200A00              <2> timenscacheend: db " ",10,0
  5408 00003ECB 00                  <2> istimeset db 0
  5409 00003ECC 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5410 00003ED5 2063757272656E7420- <2>
  5411 00003EDE 554E49582074696D65- <2>
  5412 00003EE7 3A0A00              <2>
  5413 00003EEA 00<rept>            <2> timeinputbuffer times 12 db 0
  5414 00003EF6 00                  <2> timeinputbend: db 0
  5415                              <2> 
  5416 00003EF7 FF2C6461746500      <2> db 255,44,"date",0
  5417                              <2> 	;cmp byte [istimeset], 0
  5418                              <2> 	;jne timeisset
  5419 00003EFE E880000000          <2> 	call time
  5420 00003F03 E823020000          <2> 	call timeconvert	
  5421                              <2> 	; mov esi, settimemsg
  5422                              <2> 	; call print
  5423                              <2> 	; mov esi, timeinputbuffer
  5424                              <2> 	; mov edi, timeinputbend
  5425                              <2> 	; call readline
  5426                              <2> 	; mov esi, timeinputbuffer
  5427                              <2> 	; xor edi, edi
  5428                              <2> 	; call cnvrttxt
  5429 00003F08 890D[52020000]      <2> 	mov [timeseconds], ecx
  5430                              <2> 	;xor ecx, ecx
  5431                              <2> 	;mov [timenanoseconds], ecx
  5432 00003F0E C605[CB3E0000]01    <2> 	mov byte [istimeset], 1
  5433                              <2> timeisset:
  5434 00003F15 8B0D[52020000]      <2> 	mov ecx, [timeseconds]
  5435 00003F1B E8AAF2FFFF          <2> 	call showdec
  5436                              <2> 	
  5437 00003F20 8B0D[56020000]      <2> 	mov ecx, [timenanoseconds]
  5438 00003F26 BE[BD3E0000]        <2> 	mov esi, timenscache
  5439 00003F2B C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5440 00003F32 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5441 00003F39 C6460A30            <2> 	mov byte [esi + 10], "0"
  5442 00003F3D BE[C83E0000]        <2> 	mov esi, timenscacheend
  5443 00003F42 E89EF0FFFF          <2> 	call convert
  5444 00003F47 BE[BD3E0000]        <2> 	mov esi, timenscache
  5445 00003F4C E89DDDFFFF          <2> 	call printquiet
  5446                              <2> 	
  5447 00003F51 E82D000000          <2> 	call time
  5448 00003F56 BE[8D420000]        <2> 	mov esi, timeshow
  5449 00003F5B E88EDDFFFF          <2> 	call printquiet
  5450 00003F60 BE[E5840000]        <2> 	mov esi, line
  5451 00003F65 E884DDFFFF          <2> 	call printquiet
  5452 00003F6A BE[96420000]        <2> 	mov esi, dateshow
  5453 00003F6F E87ADDFFFF          <2> 	call printquiet
  5454 00003F74 BE[E5840000]        <2> 	mov esi, line
  5455 00003F79 E870DDFFFF          <2> 	call printquiet
  5456 00003F7E E9BE000000          <2> 	jmp findday
  5457                              <2> time:
  5458 00003F83 E84F010000          <2> 	call tstackput1
  5459 00003F88 B00A                <2> 	mov al,10			;Get RTC register A
  5460 00003F8A E879010000          <2> 	call tget1
  5461 00003F8F A880                <2> 	test al,0x80			;Is update in progress?
  5462 00003F91 75F0                <2> 	jne time				; yes, wait
  5463                              <2> 
  5464 00003F93 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5465 00003F95 E86E010000          <2> 	call tget1
  5466 00003F9A A2[84420000]        <2> 	mov [RTCtimeSecond],al
  5467                              <2> 
  5468 00003F9F B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5469 00003FA1 E862010000          <2> 	call tget1
  5470 00003FA6 A2[85420000]        <2> 	mov [RTCtimeMinute],al
  5471                              <2> 
  5472 00003FAB B004                <2> 	mov al,0x04			;Get hours (see notes)
  5473 00003FAD E856010000          <2> 	call tget1
  5474 00003FB2 A2[86420000]        <2> 	mov [RTCtimeHour],al
  5475                              <2> 
  5476 00003FB7 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5477 00003FB9 E84A010000          <2> 	call tget1
  5478 00003FBE A2[87420000]        <2> 	mov [RTCtimeDay],al
  5479                              <2> 
  5480 00003FC3 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5481 00003FC5 E83E010000          <2> 	call tget1
  5482 00003FCA 241F                <2> 	and al, 11111b
  5483 00003FCC A2[88420000]        <2> 	mov [RTCtimeMonth],al
  5484                              <2> 
  5485 00003FD1 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5486 00003FD3 E830010000          <2> 	call tget1
  5487 00003FD8 A2[89420000]        <2> 	mov [RTCtimeYear],al
  5488                              <2> 	
  5489 00003FDD BE[8D420000]        <2> 	mov esi, timeshow
  5490 00003FE2 8A2D[86420000]      <2> 	mov ch, [RTCtimeHour]
  5491 00003FE8 E826010000          <2> 	call tput1
  5492 00003FED 8A2D[85420000]      <2> 	mov ch, [RTCtimeMinute]
  5493 00003FF3 E81B010000          <2> 	call tput1
  5494 00003FF8 8A2D[84420000]      <2> 	mov ch, [RTCtimeSecond]
  5495 00003FFE E810010000          <2> 	call tput1
  5496 00004003 BE[96420000]        <2> 	mov esi, dateshow
  5497 00004008 8A2D[88420000]      <2> 	mov ch, [RTCtimeMonth]
  5498 0000400E E800010000          <2> 	call tput1
  5499 00004013 8A2D[87420000]      <2> 	mov ch, [RTCtimeDay]
  5500 00004019 E8F5000000          <2> 	call tput1
  5501 0000401E B520                <2> 	mov ch, 0x20
  5502 00004020 E8EE000000          <2> 	call tput1
  5503 00004025 4E                  <2> 	dec esi
  5504 00004026 8A2D[89420000]      <2> 	mov ch, [RTCtimeYear]
  5505 0000402C E8E2000000          <2> 	call tput1
  5506 00004031 E8BB000000          <2> 	call tstackget1
  5507 00004036 C3                  <2> 	ret
  5508 00004037 BE[8D420000]        <2> 	mov esi, timeshow
  5509 0000403C E8CEDCFFFF          <2> 	call print
  5510                              <2> ;get day of week
  5511                              <2> ;add these:
  5512                              <2> ;century value
  5513                              <2> ;last 2 digits of year
  5514                              <2> ;last 2 digits of year right shifted twice
  5515                              <2> ;month table value
  5516                              <2> ;day of the month
  5517                              <2> ;divide these by 7
  5518                              <2> ;the remainder is the day
  5519                              <2> findday:
  5520 00004041 31C0                <2> 	xor eax, eax
  5521                              <2> ;first convert the values from BCD to hex
  5522 00004043 A0[87420000]        <2> 	mov al, [RTCtimeDay]
  5523 00004048 E871000000          <2> 	call converttohex
  5524 0000404D 8825[8A420000]      <2> 	mov [dayhex], ah
  5525 00004053 A0[88420000]        <2> 	mov al, [RTCtimeMonth]
  5526 00004058 E861000000          <2> 	call converttohex
  5527 0000405D 8825[8B420000]      <2> 	mov [monthhex], ah
  5528 00004063 A0[89420000]        <2> 	mov al, [RTCtimeYear]
  5529 00004068 E851000000          <2> 	call converttohex
  5530 0000406D 8825[8C420000]      <2> 	mov [yearhex], ah
  5531 00004073 31C0                <2> 	xor eax, eax
  5532 00004075 A0[8C420000]        <2> 	mov al, [yearhex]
  5533 0000407A C0E802              <2> 	shr al, 2
  5534 0000407D 0205[8C420000]      <2> 	add al, [yearhex]
  5535 00004083 83C006              <2> 	add eax, 6
  5536 00004086 31DB                <2> 	xor ebx, ebx
  5537 00004088 8A1D[8B420000]      <2> 	mov bl, [monthhex]
  5538 0000408E FECB                <2> 	dec bl
  5539 00004090 81C3[AB420000]      <2> 	add ebx, month
  5540 00004096 31C9                <2> 	xor ecx, ecx
  5541 00004098 8A0B                <2> 	mov cl, [ebx]
  5542 0000409A 01C8                <2> 	add eax, ecx
  5543 0000409C 8A0D[8A420000]      <2> 	mov cl, [dayhex]
  5544 000040A2 01C8                <2> 	add eax, ecx
  5545 000040A4 66BB0700            <2> 	mov bx, 7
  5546 000040A8 31D2                <2> 	xor edx, edx
  5547 000040AA 66F7F3              <2> 	div bx
  5548 000040AD C1E202              <2> 	shl edx, 2
  5549 000040B0 81C2[B7420000]      <2> 	add edx, day
  5550 000040B6 8B32                <2> 	mov esi, [edx]
  5551 000040B8 E852DCFFFF          <2> 	call print
  5552 000040BD C3                  <2> 	ret
  5553                              <2> 	
  5554                              <2> converttohex:
  5555 000040BE 88C4                <2> 	mov ah, al
  5556 000040C0 C0E804              <2> 	shr al, 4
  5557 000040C3 C0E404              <2> 	shl ah, 4
  5558 000040C6 C0EC04              <2> 	shr ah, 4
  5559 000040C9 3C00                <2> 	cmp al, 0
  5560 000040CB 7409                <2> 	je noconverttohex
  5561                              <2> converttohexlp:
  5562 000040CD 80C40A              <2> 	add ah, 10
  5563 000040D0 FEC8                <2> 	dec al
  5564 000040D2 3C00                <2> 	cmp al, 0
  5565 000040D4 75F7                <2> 	jne converttohexlp
  5566                              <2> noconverttohex:
  5567 000040D6 C3                  <2> 	ret
  5568                              <2> 	
  5569                              <2> tstackput1:
  5570 000040D7 8935[80420000]      <2> 	mov [tstack + 20], esi
  5571 000040DD BE[6C420000]        <2> 	mov esi, tstack
  5572 000040E2 8906                <2> 	mov [esi], eax
  5573 000040E4 895E04              <2> 	mov [esi + 4], ebx
  5574 000040E7 894E08              <2> 	mov [esi + 8], ecx
  5575 000040EA 89560C              <2> 	mov [esi + 12], edx
  5576 000040ED 897E10              <2> 	mov [esi + 16], edi
  5577 000040F0 C3                  <2> 	ret
  5578                              <2> 	
  5579                              <2> tstackget1:
  5580 000040F1 BE[6C420000]        <2> 	mov esi, tstack
  5581 000040F6 8B06                <2> 	mov eax, [esi]
  5582 000040F8 8B5E04              <2> 	mov ebx, [esi + 4]
  5583 000040FB 8B4E08              <2> 	mov ecx, [esi + 8]
  5584 000040FE 8B560C              <2> 	mov edx, [esi + 12]
  5585 00004101 8B7E10              <2> 	mov edi, [esi + 16]
  5586 00004104 8B7614              <2> 	mov esi, [esi + 20]
  5587 00004107 C3                  <2> 	ret
  5588                              <2> 	
  5589                              <2> tget1:
  5590 00004108 66BA7000            <2> 	mov dx, 0x70
  5591 0000410C EE                  <2> 	out dx, al
  5592 0000410D 6642                <2> 	inc dx
  5593 0000410F EC                  <2> 	in al, dx
  5594 00004110 664A                <2> 	dec dx
  5595 00004112 C3                  <2> 	ret
  5596                              <2> 	
  5597                              <2> tput1:
  5598 00004113 66C1E904            <2> 	shr cx, 4
  5599 00004117 B030                <2> 	mov al, 48
  5600 00004119 00E8                <2> 	add al, ch
  5601 0000411B 8806                <2> 	mov [esi], al
  5602 0000411D 46                  <2> 	inc esi
  5603 0000411E B030                <2> 	mov al, 48
  5604 00004120 C0E904              <2> 	shr cl, 4
  5605 00004123 00C8                <2> 	add al, cl
  5606 00004125 8806                <2> 	mov [esi], al
  5607 00004127 83C602              <2> 	add esi, 2
  5608 0000412A C3                  <2> 	ret
  5609                              <2> 	
  5610                              <2> timeconvert: ;return time in the RTCtime stuff in ecx
  5611 0000412B 31DB                <2> 	xor ebx, ebx
  5612 0000412D 31C9                <2> 	xor ecx, ecx
  5613 0000412F 31FF                <2> 	xor edi, edi
  5614 00004131 31F6                <2> 	xor esi, esi
  5615                              <2> 	
  5616 00004133 A0[84420000]        <2> 	mov al, [RTCtimeSecond]
  5617 00004138 E881FFFFFF          <2> 	call converttohex
  5618 0000413D 88E1                <2> 	mov cl, ah
  5619                              <2> 	
  5620 0000413F A0[85420000]        <2> 	mov al, [RTCtimeMinute]
  5621 00004144 E875FFFFFF          <2> 	call converttohex
  5622 00004149 88E3                <2> 	mov bl, ah
  5623 0000414B B83C000000          <2> 	mov eax, 60
  5624 00004150 31D2                <2> 	xor edx, edx
  5625 00004152 F7E3                <2> 	mul ebx
  5626 00004154 01C1                <2> 	add ecx, eax
  5627                              <2> 	
  5628 00004156 A0[86420000]        <2> 	mov al, [RTCtimeHour]
  5629 0000415B E85EFFFFFF          <2> 	call converttohex
  5630 00004160 88E3                <2> 	mov bl, ah
  5631 00004162 B8100E0000          <2> 	mov eax, 3600
  5632 00004167 31D2                <2> 	xor edx, edx
  5633 00004169 F7E3                <2> 	mul ebx
  5634 0000416B 01C1                <2> 	add ecx, eax
  5635                              <2> 		
  5636 0000416D 31C0                <2> 	xor eax, eax
  5637 0000416F A0[89420000]        <2> 	mov al, [RTCtimeYear]
  5638 00004174 E845FFFFFF          <2> 	call converttohex
  5639 00004179 6689C6              <2> 	mov si, ax
  5640 0000417C 66C1EE08            <2> 	shr si, 8
  5641 00004180 6683FE46            <2> 	cmp si, 70
  5642 00004184 7704                <2> 	ja .no100
  5643 00004186 6683C664            <2> 	add si, 100
  5644                              <2> .no100:
  5645 0000418A 6681C66C07          <2> 	add si, 1900
  5646                              <2> 	
  5647 0000418F BB[5E420000]        <2> 	mov ebx, .month
  5648 00004194 A0[87420000]        <2> 	mov al, [RTCtimeDay]
  5649 00004199 E820FFFFFF          <2> 	call converttohex
  5650 0000419E 88E0                <2> 	mov al, ah
  5651 000041A0 FEC8                <2> 	dec al
  5652 000041A2 31D2                <2> 	xor edx, edx
  5653 000041A4 88C2                <2> 	mov dl, al
  5654 000041A6 A0[88420000]        <2> 	mov al, [RTCtimeMonth]
  5655 000041AB E80EFFFFFF          <2> 	call converttohex
  5656 000041B0 88D0                <2> 	mov al, dl
  5657 000041B2 88E2                <2> 	mov dl, ah
  5658 000041B4 30E4                <2> 	xor ah, ah
  5659 000041B6 6689D5              <2> 	mov bp, dx
  5660                              <2> 	
  5661 000041B9 6689F7              <2> 	mov di, si
  5662 000041BC 66C1EF02            <2> 	shr di, 2
  5663 000041C0 66C1E702            <2> 	shl di, 2
  5664 000041C4 C605[5F420000]1C    <2> 	mov byte [.month + 1], 28
  5665 000041CB 6639F7              <2> 	cmp di, si
  5666 000041CE 7506                <2> 	jne .nofebmod
  5667 000041D0 FE05[5F420000]      <2> 	inc byte [.month + 1]
  5668                              <2> .nofebmod:
  5669 000041D6 664D                <2> 	dec bp
  5670 000041D8 6683FD00            <2> 	cmp bp, 0
  5671 000041DC 7407                <2> 	je .ylp
  5672 000041DE 8A13                <2> 	mov dl, [ebx]
  5673 000041E0 01D0                <2> 	add eax, edx
  5674 000041E2 43                  <2> 	inc ebx
  5675 000041E3 EBF1                <2> 	jmp .nofebmod
  5676                              <2> 	
  5677                              <2> .ylp:
  5678 000041E5 6689F7              <2> 	mov di, si
  5679 000041E8 66C1EF02            <2> 	shr di, 2
  5680 000041EC 66C1E702            <2> 	shl di, 2
  5681 000041F0 81C18033E101        <2> 	add ecx, 31536000
  5682 000041F6 6639F7              <2> 	cmp di, si
  5683 000041F9 7506                <2> 	jne .noymod
  5684 000041FB 81C180510100        <2> 	add ecx, 86400
  5685                              <2> .noymod:
  5686 00004201 664E                <2> 	dec si
  5687 00004203 6681FEB207          <2> 	cmp si, 1970
  5688 00004208 77DB                <2> 	ja .ylp
  5689                              <2> 	
  5690 0000420A BB80510100          <2> 	mov ebx, 86400
  5691 0000420F 31D2                <2> 	xor edx, edx
  5692 00004211 F7E3                <2> 	mul ebx
  5693 00004213 01C1                <2> 	add ecx, eax
  5694                              <2> 	
  5695 00004215 31DB                <2> 	xor ebx, ebx
  5696 00004217 31D2                <2> 	xor edx, edx
  5697 00004219 B8100E0000          <2> 	mov eax, 3600
  5698 0000421E 8A3D[6A420000]      <2> 	mov bh, [timezoneh]
  5699 00004224 80FF80              <2> 	cmp bh, 128
  5700 00004227 720A                <2> 	jb .posh
  5701 00004229 28FB                <2> 	sub bl, bh
  5702 0000422B 30FF                <2> 	xor bh, bh
  5703 0000422D F7E3                <2> 	mul ebx
  5704 0000422F 01C1                <2> 	add ecx, eax
  5705 00004231 EB06                <2> 	jmp .doneth
  5706                              <2> .posh:
  5707 00004233 86DF                <2> 	xchg bl, bh
  5708 00004235 F7E3                <2> 	mul ebx
  5709 00004237 29C1                <2> 	sub ecx, eax
  5710                              <2> .doneth:
  5711                              <2> 
  5712 00004239 31DB                <2> 	xor ebx, ebx	
  5713 0000423B 31D2                <2> 	xor edx, edx
  5714 0000423D B83C000000          <2> 	mov eax, 60
  5715 00004242 8A3D[6B420000]      <2> 	mov bh, [timezonem]
  5716 00004248 80FF80              <2> 	cmp bh, 128
  5717 0000424B 720A                <2> 	jb .posm
  5718 0000424D 28FB                <2> 	sub bl, bh
  5719 0000424F 30FF                <2> 	xor bh, bh
  5720 00004251 F7E3                <2> 	mul ebx
  5721 00004253 01C1                <2> 	add ecx, eax
  5722 00004255 EB06                <2> 	jmp .donetm
  5723                              <2> .posm:
  5724 00004257 86DF                <2> 	xchg bl, bh
  5725 00004259 F7E3                <2> 	mul ebx
  5726 0000425B 29C1                <2> 	sub ecx, eax
  5727                              <2> .donetm:
  5728                              <2> 
  5729 0000425D C3                  <2> 	ret
  5730                              <2> 	
  5731                              <2> 
  5732 0000425E 1F1C1F1E1F1E1F1F1E- <2> .month db 31,28,31,30,31,30,31,31,30,31,30,31
  5733 00004267 1F1E1F              <2>
  5734                              <2> 
  5735 0000426A FA                  <2> 	timezoneh db -6
  5736 0000426B 00                  <2> 	timezonem db 0
  5737 0000426C 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5738 00004275 000000000000000000- <2>
  5739 0000427E 000000000000        <2>
  5740 00004284 00                  <2> 	RTCtimeSecond db 0
  5741 00004285 00                  <2> 	RTCtimeMinute db 0
  5742 00004286 00                  <2> 	RTCtimeHour db 0
  5743 00004287 00                  <2> 	RTCtimeDay db 0
  5744 00004288 00                  <2> 	RTCtimeMonth db 0
  5745 00004289 00                  <2> 	RTCtimeYear db 0
  5746 0000428A 00                  <2> 	dayhex db 0
  5747 0000428B 00                  <2> 	monthhex db 0
  5748 0000428C 00                  <2> 	yearhex db 0
  5749 0000428D 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  5750 00004296 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  5751 0000429F 302000              <2>
  5752                              <2> 	oldcentury:	;from 1700 to 1900
  5753 000042A2 040200              <2> 	db 4,2,0
  5754                              <2> 	century:	;from 2000 to 2500
  5755 000042A5 060402000604        <2> 	db 6,4,2,0,6,4
  5756                              <2> 	month:
  5757 000042AB 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5758 000042B4 000305              <2>
  5759                              <2> 	day:
  5760 000042B7 [D3420000]          <2> 	dd sunday
  5761 000042BB [DB420000]          <2> 	dd monday
  5762 000042BF [E3420000]          <2> 	dd tuesday
  5763 000042C3 [EC420000]          <2> 	dd wednesday
  5764 000042C7 [F7420000]          <2> 	dd thursday
  5765 000042CB [01430000]          <2> 	dd friday
  5766 000042CF [09430000]          <2> 	dd saturday
  5767                              <2> sunday:
  5768 000042D3 53756E6461790A00    <2> 	db "Sunday",10,0
  5769                              <2> monday:
  5770 000042DB 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5771                              <2> tuesday:
  5772 000042E3 547565736461790A00  <2> 	db "Tuesday",10,0
  5773                              <2> wednesday:
  5774 000042EC 5765646E6573646179- <2> 	db "Wednesday",10,0
  5775 000042F5 0A00                <2>
  5776                              <2> thursday:
  5777 000042F7 54687572736461790A- <2> 	db "Thursday",10,0
  5778 00004300 00                  <2>
  5779                              <2> friday:
  5780 00004301 4672696461790A00    <2> 	db "Friday",10,0
  5781                              <2> saturday:
  5782 00004309 53617475726461790A- <2> 	db "Saturday",10,0
  5783 00004312 00                  <2>
  5784                              <1> %ifdef network.included
  5785                              <1> 	%include 'source/programs/dhcp.asm'
  5786                              <1> %endif
  5787                              <1> %ifdef disk.none
  5788                              <1> %else
  5789                              <1> 	%include 'source/programs/dos.asm'
  5790 00004313 FF2C646F7300        <2> db 255,44,"dos",0
  5791                              <2> dosrunner:
  5792 00004319 8925[08AE0300]      <2> 	mov [previousstack], esp
  5793 0000431F 8B3D[192F0000]      <2> 	mov edi, [currentcommandloc]
  5794 00004325 83C704              <2> 	add edi, 4
  5795 00004328 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5796 0000432D E85C220000          <2> 	call loadfile
  5797 00004332 8B3D[192F0000]      <2> 	mov edi, [currentcommandloc]
  5798 00004338 83C704              <2> 	add edi, 4
  5799 0000433B 81FA94010000        <2> 	cmp edx, 404
  5800 00004341 0F845E000000        <2> 	je near .noprogfound
  5801 00004347 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5802 0000434C 31C9                <2> 	xor ecx, ecx
  5803                              <2> .findparams:
  5804 0000434E 47                  <2> 	inc edi
  5805 0000434F 8A07                <2> 	mov al, [edi]
  5806 00004351 3C20                <2> 	cmp al, " "
  5807 00004353 75F9                <2> 	jne .findparams
  5808                              <2> .copyparams:
  5809 00004355 8A07                <2> 	mov al, [edi]
  5810 00004357 8803                <2> 	mov [ebx], al
  5811 00004359 43                  <2> 	inc ebx
  5812 0000435A 47                  <2> 	inc edi
  5813 0000435B 41                  <2> 	inc ecx
  5814 0000435C 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5815 00004362 7304                <2> 	jae .nomoreparams
  5816 00004364 3C00                <2> 	cmp al, 0
  5817 00004366 75ED                <2> 	jne .copyparams
  5818                              <2> .nomoreparams:
  5819 00004368 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5820 0000436E 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5821 00004372 8ED8                <2> 	mov ds, ax
  5822 00004374 8EC0                <2> 	mov es, ax
  5823 00004376 8EE0                <2> 	mov fs, ax
  5824 00004378 8EE8                <2> 	mov gs, ax
  5825 0000437A 31C0                <2> 	xor eax, eax
  5826 0000437C 31DB                <2> 	xor ebx, ebx
  5827 0000437E 31C9                <2> 	xor ecx, ecx
  5828 00004380 31D2                <2> 	xor edx, edx
  5829 00004382 31FF                <2> 	xor edi, edi
  5830 00004384 31F6                <2> 	xor esi, esi
  5831 00004386 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5832 0000438D 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5833 00004391 6689DA              <2> 	mov dx, bx
  5834 00004394 8EC3                <2> 	mov es, bx
  5835 00004396 8EE3                <2> 	mov fs, bx
  5836 00004398 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5837 0000439C 8EEB                <2> 	mov gs, bx
  5838 0000439E 8B25[08AE0300]      <2> 	mov esp, [previousstack]
  5839 000043A4 C3                  <2> 	ret
  5840                              <2> .noprogfound:
  5841 000043A5 BE[AC840000]        <2> 	mov esi, notfound1
  5842 000043AA E860D9FFFF          <2> 	call print
  5843 000043AF 8B35[192F0000]      <2> 	mov esi, [currentcommandloc]
  5844 000043B5 83C604              <2> 	add esi, 4
  5845 000043B8 E852D9FFFF          <2> 	call print
  5846 000043BD BE[B4840000]        <2> 	mov esi, notfound2
  5847 000043C2 E848D9FFFF          <2> 	call print
  5848 000043C7 C3                  <2> 	ret
  5849                              <2> 	
  5850                              <1> %endif
  5851                              <1> %include 'source/programs/dump.asm'
  5852 000043C8 FF2C64756D7000      <2> db 255,44,"dump",0
  5853 000043CF 8B35[192F0000]      <2> 	mov esi, [currentcommandloc]
  5854 000043D5 83C605              <2> 	add esi, 5
  5855 000043D8 31C9                <2> 	xor ecx, ecx
  5856 000043DA 66B83078            <2> 	mov ax, "0x"
  5857 000043DE 663906              <2> 	cmp [esi], ax
  5858 000043E1 7407                <2> 	je dumphexin
  5859 000043E3 E8B1EEFFFF          <2> 	call cnvrttxt
  5860 000043E8 EB0A                <2> 	jmp dumphexnow
  5861                              <2> dumphexin:
  5862 000043EA 83C602              <2> 	add esi, 2
  5863 000043ED E867EEFFFF          <2> 	call cnvrthextxt
  5864 000043F2 EB00                <2> 	jmp dumphexnow
  5865                              <2> dumphexnow:
  5866 000043F4 89CF                <2> 	mov edi, ecx
  5867 000043F6 89FE                <2> 	mov esi, edi
  5868 000043F8 81C680030000        <2> 	add esi, 896
  5869                              <2> dumphexloop:
  5870 000043FE 8B0F                <2> 	mov ecx, [edi]
  5871 00004400 C605[06310000]05    <2> 	mov byte [firsthexshown],5
  5872 00004407 E80FEDFFFF          <2> 	call showhex
  5873 0000440C 83C704              <2> 	add edi, 4
  5874 0000440F 39F7                <2> 	cmp edi, esi
  5875 00004411 72EB                <2> 	jb dumphexloop
  5876 00004413 E837E4FFFF          <2> 	call termcopy
  5877 00004418 C3                  <2> 	ret 
  5878                              <1> %include 'source/programs/echo.asm'
  5879 00004419 FF2C6563686F00      <2> db 255,44,"echo",0
  5880                              <2> 	echoprog:
  5881 00004420 8B35[192F0000]      <2> 		mov esi, [currentcommandloc]
  5882 00004426 83C605              <2> 		add esi, 5
  5883 00004429 8A06                <2> 		mov al, [esi]
  5884 0000442B E8BED8FFFF          <2> 		call printquiet
  5885 00004430 E8D5D8FFFF          <2> 		call printline
  5886 00004435 C3                  <2> 		ret
  5887 00004436 BB[88B00300]        <2> 	echovr:	mov ebx, variables
  5888 0000443B BF06000000          <2> 		mov edi, 6
  5889 00004440 E833000000          <2> 		call nxtvrech
  5890 00004445 EB4E                <2> 		jmp prntvr2
  5891 00004447 B13D                <2> 	echvar:	mov cl, '='
  5892 00004449 43                  <2> 		inc ebx
  5893 0000444A 8A03                <2> 		mov al, [ebx]
  5894 0000444C 3C00                <2> 		cmp al, 0
  5895 0000444E 7428                <2> 		je nxtvrech
  5896 00004450 3C3D                <2> 		cmp al, '='
  5897 00004452 741F                <2> 		je nxtvrechb1
  5898 00004454 8B35[192F0000]      <2> 		mov esi, [currentcommandloc]
  5899 0000445A 01FE                <2> 		add esi, edi
  5900 0000445C E8F7EAFFFF          <2> 		call cndtest
  5901 00004461 3C02                <2> 		cmp al, 2
  5902 00004463 742C                <2> 		je prntvr
  5903 00004465 3C01                <2> 		cmp al, 1
  5904 00004467 7428                <2> 		je prntvr
  5905 00004469 8B35[192F0000]      <2> 		mov esi, [currentcommandloc]
  5906 0000446F 01FE                <2> 		add esi, edi
  5907 00004471 EB05                <2> 		jmp nxtvrech
  5908                              <2> 	nxtvrechb1:
  5909 00004473 83EB02              <2> 		sub ebx, 2
  5910 00004476 EBCF                <2> 		jmp echvar
  5911 00004478 8A03                <2> 	nxtvrech: mov al, [ebx]
  5912 0000447A 3C05                <2> 		cmp al, 5
  5913 0000447C 740A                <2> 		je nxtvrec2
  5914 0000447E 43                  <2> 		inc ebx
  5915 0000447F 81FB[88C00300]      <2> 		cmp ebx, varend
  5916 00004485 72F1                <2> 		jb nxtvrech
  5917 00004487 C3                  <2> 		ret
  5918 00004488 43                  <2> 	nxtvrec2: inc ebx
  5919 00004489 8A03                <2> 		mov al, [ebx]
  5920 0000448B 3C04                <2> 		cmp al, 4
  5921 0000448D 74B8                <2> 		je echvar
  5922 0000448F EBE7                <2> 		jmp nxtvrech
  5923 00004491 43                  <2> 	prntvr: inc ebx
  5924 00004492 89DE                <2> 		mov esi, ebx
  5925 00004494 C3                  <2> 		ret
  5926 00004495 E875D8FFFF          <2> 	prntvr2: call print
  5927 0000449A BE[E5840000]        <2> 		mov esi, line
  5928 0000449F E86BD8FFFF          <2> 		call print
  5929 000044A4 C3                  <2> 		ret 
  5930                              <1> %include 'source/programs/else.asm'
  5931 000044A5 FF2C656C736500      <2> 	db 255,44,"else",0
  5932 000044AC 31C0                <2> elsecmd:	xor eax, eax
  5933 000044AE 3805[82B00300]      <2> 	cmp [BATCHISON], al
  5934 000044B4 0F84D6F4FFFF        <2> 	je near notbatch
  5935 000044BA A0[19B00300]        <2> 	mov al, [IFON]
  5936 000044BF BE[1AB00300]        <2> 	mov esi, IFTRUE
  5937 000044C4 01C6                <2> 	add esi, eax
  5938 000044C6 8A06                <2> 	mov al, [esi]
  5939 000044C8 3401                <2> 	xor al, 1
  5940 000044CA 8806                <2> 	mov [esi], al
  5941 000044CC C3                  <2> 	ret 
  5942                              <1> %include 'source/programs/exit.asm'
  5943 000044CD FF2C6578697400      <2> db 255,44,"exit",0
  5944 000044D4 803D[18B00300]01    <2> 	cmp byte [ranboot], 1
  5945 000044DB 0F8431E7FFFF        <2> 	je near returnfromexp
  5946 000044E1 E91CE6FFFF          <2> 	jmp nobootfile
  5947                              <1> %include 'source/programs/fi.asm'
  5948 000044E6 FF2C666900          <2> 	db 255,44,"fi",0
  5949 000044EB 30C0                <2> 	xor al, al
  5950 000044ED 3805[82B00300]      <2> 	cmp [BATCHISON], al
  5951 000044F3 0F8497F4FFFF        <2> 	je near notbatch
  5952 000044F9 B001                <2> fi:	mov al, 1
  5953 000044FB 2805[19B00300]      <2> 	sub [IFON],al
  5954 00004501 C3                  <2> 	ret 
  5955                              <1> %ifdef gui.included
  5956                              <1> 	%include 'source/programs/gui.asm'
  5957 00004502 FF2C67756900        <2> db 255,44,"gui",0
  5958                              <2> guiswitcher:
  5959 00004508 8B35[192F0000]      <2> 	mov esi, [currentcommandloc]
  5960 0000450E 83C604              <2> 	add esi, 4
  5961 00004511 31C9                <2> 	xor ecx, ecx
  5962 00004513 803E00              <2> 	cmp byte [esi], 0
  5963 00004516 7407                <2> 	je .nomodepref
  5964 00004518 E83CEDFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5965 0000451D EB07                <2> 	jmp .modepref
  5966                              <2> .nomodepref:
  5967 0000451F 51                  <2> 	push ecx
  5968 00004520 E896D8FFFF          <2> 	call clear
  5969 00004525 59                  <2> 	pop ecx
  5970                              <2> .modepref:
  5971 00004526 66C705[D20C0000]-   <2> 	mov word [realmodeptr], guiswitch
  5972 0000452D [3951]              <2>
  5973 0000452F E892C6FFFF          <2> 	call realmode
  5974                              <2> guiswitchret:
  5975 00004534 65803D[0A850000]01  <2> 	cmp byte [gs:guion], 1
  5976 0000453C 7401                <2> 	je .cont
  5977 0000453E C3                  <2> 	ret
  5978                              <2> .cont:
  5979 0000453F BF[15530000]        <2> 	mov edi, VBEMODEBLOCK
  5980                              <2> .loop:
  5981 00004544 658B07              <2> 	mov eax, [gs:edi]
  5982 00004547 8907                <2> 	mov [edi], eax
  5983 00004549 47                  <2> 	inc edi
  5984 0000454A 81FF[19560000]      <2> 	cmp edi, VBEEND
  5985 00004550 72F2                <2> 	jb .loop
  5986 00004552 A1[3D550000]        <2> 	mov eax, [physbaseptr]
  5987 00004557 8B1D[33020000]      <2> 	mov ebx, [basecache]
  5988 0000455D C1E304              <2> 	shl ebx, 4
  5989 00004560 29D8                <2> 	sub eax, ebx
  5990 00004562 A3[3D550000]        <2> 	mov [physbaseptr], eax
  5991 00004567 C605[7C230000]00    <2> 	mov byte [termguion], 0
  5992 0000456E BE[9CC80300]        <2> 	mov esi, graphicstable
  5993 00004573 30C0                <2> 	xor al, al
  5994                              <2> .clear:
  5995 00004575 8806                <2> 	mov [esi], al
  5996 00004577 46                  <2> 	inc esi
  5997 00004578 81FE[9CCA0300]      <2> 	cmp esi, graphicstableend
  5998 0000457E 72F5                <2> 	jb .clear
  5999 00004580 E80F2A0000          <2> 	call guisetup
  6000                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  6001 00004585 668B15[27550000]    <2> 	mov dx, [resolutionx]
  6002 0000458C 668B0D[29550000]    <2> 	mov cx, [resolutiony]
  6003 00004593 6689D3              <2> 	mov bx, dx
  6004 00004596 6689C8              <2> 	mov ax, cx
  6005 00004599 66D1EB              <2> 	shr bx, 1
  6006 0000459C 66D1E8              <2> 	shr ax, 1
  6007 0000459F 6689DA              <2> 	mov dx, bx
  6008 000045A2 66D1EA              <2> 	shr dx, 1
  6009 000045A5 6689C1              <2> 	mov cx, ax
  6010 000045A8 66D1E9              <2> 	shr cx, 1
  6011 000045AB 6601D3              <2> 	add bx, dx
  6012 000045AE 6601C8              <2> 	add ax, cx
  6013 000045B1 66D1E9              <2> 	shr cx, 1
  6014 000045B4 66C1EB03            <2> 	shr bx, 3
  6015 000045B8 66C1E303            <2> 	shl bx, 3
  6016 000045BC 66C1E804            <2> 	shr ax, 4
  6017 000045C0 66C1E004            <2> 	shl ax, 4
  6018 000045C4 66891D[9D710000]    <2> 	mov [termwindow], bx
  6019 000045CB 66A3[9F710000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6020 000045D1 BE[9D710000]        <2> 	mov esi, termwindow
  6021 000045D6 31DB                <2> 	xor ebx, ebx
  6022 000045D8 6631C0              <2> 	xor ax, ax
  6023 000045DB E8DB300000          <2> 	call showwindow
  6024 000045E0 E835100000          <2> 	call cursorgui
  6025 000045E5 E8D1D7FFFF          <2> 	call clear
  6026 000045EA C3                  <2> 	ret
  6027                              <2> 	
  6028                              <1> %endif
  6029                              <1> %include 'source/programs/help.asm'
  6030 000045EB FF2C68656C7000      <2> db 255,44,"help",0
  6031                              <2> lscmd:	
  6032 000045F2 B00D                <2> 		mov al, 13
  6033 000045F4 E885DDFFFF          <2> 		call prcharq
  6034 000045F9 BE[51330000]        <2> 		mov esi, progstart
  6035 000045FE BB[39510000]        <2> 		mov ebx, progend
  6036 00004603 BE[08AA0300]        <2> dir:	mov esi, fileindex
  6037 00004608 8A06                <2> 	dirnxt:	mov al, [esi]
  6038 0000460A 30E4                <2> 		xor ah, ah
  6039 0000460C 3CFF                <2> 		cmp al, 255
  6040 0000460E 7415                <2> 		je dirfnd
  6041 00004610 46                  <2> 		inc esi
  6042 00004611 81FE[08AE0300]      <2> 		cmp esi,  fileindexend
  6043 00004617 7339                <2> 		jae dirdn
  6044 00004619 EBED                <2> 		jmp dirnxt
  6045                              <2> 	dirfnd3:
  6046 0000461B 46                  <2> 		inc esi
  6047 0000461C 81FE[08AE0300]      <2> 		cmp esi, fileindexend
  6048 00004622 76E4                <2> 		jbe dirnxt
  6049 00004624 4E                  <2> 		dec esi
  6050 00004625 46                  <2> 	dirfnd:	inc esi
  6051 00004626 8A06                <2> 		mov al, [esi]
  6052 00004628 30E4                <2> 		xor ah, ah
  6053 0000462A 3C2C                <2> 		cmp al, 44
  6054 0000462C 740B                <2> 		je dirfnd2
  6055 0000462E 46                  <2> 		inc esi
  6056 0000462F 81FE[08AE0300]      <2> 		cmp esi,  fileindexend
  6057 00004635 731B                <2> 		jae dirdn
  6058 00004637 EBCF                <2> 		jmp dirnxt
  6059 00004639 46                  <2> 	dirfnd2: inc esi
  6060 0000463A E8AFD6FFFF          <2> 		call printquiet
  6061 0000463F 56                  <2> 		push esi
  6062 00004640 B009                <2> 		mov al, 9
  6063 00004642 E837DDFFFF          <2> 		call prcharq
  6064 00004647 5E                  <2> 		pop esi
  6065 00004648 81FE[08AE0300]      <2> 		cmp esi,  fileindexend
  6066 0000464E 7302                <2> 		jae dirdn
  6067 00004650 EBB6                <2> 		jmp dirnxt
  6068 00004652 BE[E5840000]        <2> 	dirdn:	mov esi, line
  6069 00004657 E8B3D6FFFF          <2> 			call print
  6070 0000465C C3                  <2> 			ret
  6071 0000465D 00                  <2> currentdir db 0
  6072                              <1> %include 'source/programs/if.asm'
  6073 0000465E FF2C696600          <2> 	db 255,44,"if",0
  6074 00004663 30C0                <2> ifcmd:	xor al, al
  6075 00004665 3805[82B00300]      <2> 	cmp [BATCHISON], al
  6076 0000466B 0F841FF3FFFF        <2> 	je near notbatch
  6077 00004671 8B1D[192F0000]      <2> 	mov ebx, [currentcommandloc]
  6078 00004677 83C303              <2> 	add ebx, 3
  6079 0000467A 89DE                <2> 	mov esi, ebx
  6080 0000467C 8A06                <2> chkeqsn: mov al, [esi]
  6081 0000467E 3C00                <2> 	cmp al, 0
  6082 00004680 0F840AF3FFFF        <2> 	je near notbatch
  6083 00004686 3C3D                <2> 	cmp al, '='
  6084 00004688 0F8403000000        <2> 	je near chkeqdn
  6085 0000468E 46                  <2> 	inc esi
  6086 0000468F EBEB                <2> 	jmp chkeqsn
  6087 00004691 B000                <2> chkeqdn: mov al, 0 
  6088 00004693 8806                <2> 	mov [esi], al
  6089 00004695 46                  <2> 	inc esi
  6090 00004696 E882E8FFFF          <2> 	call tester
  6091 0000469B 3C01                <2> 	cmp al, 1
  6092 0000469D 0F8402000000        <2> 	je near trueif
  6093 000046A3 EB1C                <2> 	jmp falseif
  6094 000046A5 31C0                <2> trueif:	xor eax, eax
  6095 000046A7 A0[19B00300]        <2> 	mov al, [IFON]
  6096 000046AC FEC0                <2> 	inc al
  6097 000046AE A2[19B00300]        <2> 	mov [IFON], al
  6098 000046B3 30E4                <2> 	xor ah, ah
  6099 000046B5 BE[1AB00300]        <2> 	mov esi, IFTRUE
  6100 000046BA 01C6                <2> 	add esi, eax
  6101 000046BC B401                <2> 	mov ah, 1
  6102 000046BE 8826                <2> 	mov [esi], ah
  6103 000046C0 C3                  <2> 	ret 
  6104 000046C1 31C0                <2> falseif: xor eax, eax
  6105 000046C3 A0[19B00300]        <2> 	mov al, [IFON]
  6106 000046C8 FEC0                <2> 	inc al
  6107 000046CA A2[19B00300]        <2> 	mov [IFON], al
  6108 000046CF 30E4                <2> 	xor ah, ah
  6109 000046D1 BE[1AB00300]        <2> 	mov esi, IFTRUE
  6110 000046D6 01C6                <2> 	add esi, eax
  6111 000046D8 30E4                <2> 	xor ah, ah
  6112 000046DA 8826                <2> 	mov [esi], ah
  6113 000046DC C3                  <2> 	ret 
  6114                              <1> %ifdef network.included
  6115                              <1> 	%include 'source/programs/ipconfig.asm'
  6116                              <1> %endif
  6117                              <1> %include 'source/programs/keycode.asm'
  6118 000046DD FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  6119 000046E6 00                  <2>
  6120                              <2> keycode:
  6121 000046E7 66C705[4F230000]00- <2> 	mov word [trans], 0
  6122 000046EF 00                  <2>
  6123 000046F0 C605[37670000]00    <2> 	mov byte [threadson], 0
  6124                              <2> %ifdef io.serial
  6125                              <2> .noserial:
  6126                              <2> 	hlt
  6127                              <2> 	mov dx, [serial.address]
  6128                              <2> 	in al, dx
  6129                              <2> 	cmp al, 0
  6130                              <2> 	je .noserial
  6131                              <2> 	mov cl, al
  6132                              <2> 	call showhexsmall
  6133                              <2> 	cmp al, 0x1B
  6134                              <2> 	jne .noserial
  6135                              <2> 	in al, dx
  6136                              <2> 	mov cl, al
  6137                              <2> 	call showhexsmall
  6138                              <2> 	cmp cl, 0x5B
  6139                              <2> 	je .noserial
  6140                              <2> 	ret
  6141                              <2> %else
  6142 000046F7 E818150000          <2> 	call getkey
  6143 000046FC 31C0                <2> 	xor eax, eax
  6144 000046FE 31C9                <2> 	xor ecx, ecx
  6145 00004700 8A0D[F15B0000]      <2> 	mov cl, [specialkey]
  6146 00004706 80F900              <2> 	cmp cl, 0
  6147 00004709 0F8405000000        <2> 	je near .nospecialkeycode
  6148 0000470F E8F3E9FFFF          <2> 	call showhexsmall
  6149                              <2> .nospecialkeycode:
  6150 00004714 668B0D[4D230000]    <2> 	mov cx, [lastkey + 2]
  6151 0000471B E8E7E9FFFF          <2> 	call showhexsmall
  6152 00004720 80F901              <2> 	cmp cl, 1
  6153 00004723 75C2                <2> 	jne keycode
  6154 00004725 C3                  <2> 	ret
  6155                              <2> %endif
  6156                              <1> %ifdef gui.included
  6157                              <1> 	%include 'source/programs/line.asm'
  6158 00004726 FF2C6C696E6500      <2> db 255,44,"line",0
  6159                              <2> linetester:
  6160 0000472D 803D[0A850000]00    <2> 	cmp byte [guion], 0
  6161 00004734 0F841B000000        <2> 	je near .done
  6162 0000473A 668B35[58020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  6163 00004741 BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  6164 00004746 E865000000          <2> 	call .circletest
  6165 0000474B BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  6166 00004750 E801000000          <2> 	call .linetest
  6167                              <2> .done:
  6168 00004755 C3                  <2> 	ret
  6169                              <2> 
  6170                              <2> .linetest:
  6171 00004756 53                  <2> 	push ebx
  6172 00004757 E8D0000000          <2> 	call .stime
  6173 0000475C 5B                  <2> 	pop ebx
  6174 0000475D 31FF                <2> 	xor edi, edi
  6175                              <2> .ltlp:
  6176 0000475F 53                  <2> 	push ebx
  6177 00004760 E812010000          <2> 	call .st
  6178 00004765 66F7D6              <2> 	not si
  6179 00004768 E80A010000          <2> 	call .st
  6180 0000476D 5B                  <2> 	pop ebx
  6181 0000476E 66F7D6              <2> 	not si
  6182 00004771 660335[56020000]    <2> 	add si, [timenanoseconds]
  6183 00004778 4B                  <2> 	dec ebx
  6184 00004779 83FB00              <2> 	cmp ebx, 0
  6185 0000477C 77E1                <2> 	ja .ltlp
  6186 0000477E E8C1000000          <2> 	call .etime
  6187 00004783 53                  <2> 	push ebx	
  6188 00004784 57                  <2> 	push edi
  6189 00004785 E8FF250000          <2> 	call guiclear
  6190 0000478A E87B260000          <2> 	call reloadallgraphics
  6191 0000478F 59                  <2> 	pop ecx
  6192 00004790 E835EAFFFF          <2> 	call showdec
  6193 00004795 BE[B6480000]        <2> 	mov esi, .msg
  6194 0000479A E870D5FFFF          <2> 	call print
  6195 0000479F 59                  <2> 	pop ecx
  6196 000047A0 E825EAFFFF          <2> 	call showdec
  6197 000047A5 BE[E2480000]        <2> 	mov esi, .msgtime
  6198 000047AA E860D5FFFF          <2> 	call print
  6199 000047AF C3                  <2> 	ret
  6200                              <2> 	
  6201                              <2> .circletest:
  6202 000047B0 53                  <2> 	push ebx
  6203 000047B1 E876000000          <2> 	call .stime
  6204 000047B6 5B                  <2> 	pop ebx
  6205 000047B7 31FF                <2> 	xor edi, edi
  6206                              <2> .ctlp:
  6207 000047B9 53                  <2> 	push ebx
  6208 000047BA 668B0D[29550000]    <2> 	mov cx, [resolutiony]
  6209 000047C1 66D1E9              <2> 	shr cx, 1
  6210 000047C4 668B15[27550000]    <2> 	mov dx, [resolutionx]
  6211 000047CB 66D1EA              <2> 	shr dx, 1
  6212 000047CE 6689C8              <2> 	mov ax, cx
  6213                              <2> .circle:
  6214 000047D1 60                  <2> 	pusha
  6215 000047D2 E84B200000          <2> 	call drawcircle
  6216 000047D7 61                  <2> 	popa
  6217 000047D8 6648                <2> 	dec ax
  6218 000047DA 47                  <2> 	inc edi
  6219 000047DB 6683F801            <2> 	cmp ax, 1
  6220 000047DF 77F0                <2> 	ja .circle
  6221 000047E1 66F7D6              <2> 	not si
  6222                              <2> .circle2:
  6223 000047E4 60                  <2> 	pusha
  6224 000047E5 E838200000          <2> 	call drawcircle
  6225 000047EA 61                  <2> 	popa
  6226 000047EB 47                  <2> 	inc edi
  6227 000047EC 6640                <2> 	inc ax
  6228 000047EE 6639C8              <2> 	cmp ax, cx
  6229 000047F1 76F1                <2> 	jbe .circle2
  6230 000047F3 5B                  <2> 	pop ebx
  6231 000047F4 66F7D6              <2> 	not si
  6232 000047F7 660335[56020000]    <2> 	add si, [timenanoseconds]
  6233 000047FE 4B                  <2> 	dec ebx
  6234 000047FF 83FB00              <2> 	cmp ebx, 0
  6235 00004802 77B5                <2> 	ja .ctlp
  6236 00004804 E83B000000          <2> 	call .etime
  6237 00004809 53                  <2> 	push ebx
  6238 0000480A 57                  <2> 	push edi
  6239 0000480B 59                  <2> 	pop ecx
  6240 0000480C E8B9E9FFFF          <2> 	call showdec
  6241 00004811 BE[CB480000]        <2> 	mov esi, .msgcircle
  6242 00004816 E8F4D4FFFF          <2> 	call print
  6243 0000481B 59                  <2> 	pop ecx
  6244 0000481C E8A9E9FFFF          <2> 	call showdec
  6245 00004821 BE[E2480000]        <2> 	mov esi, .msgtime
  6246 00004826 E8E4D4FFFF          <2> 	call print
  6247 0000482B C3                  <2> 	ret
  6248                              <2> 	
  6249                              <2> .stime:
  6250 0000482C F4                  <2> 	hlt
  6251 0000482D A1[52020000]        <2> 	mov eax, [timeseconds]
  6252 00004832 8B1D[56020000]      <2> 	mov ebx, [timenanoseconds]
  6253 00004838 A3[F1480000]        <2> 	mov [.time], eax
  6254 0000483D 891D[F5480000]      <2> 	mov [.time + 4], ebx
  6255 00004843 C3                  <2> 	ret
  6256                              <2> 	
  6257                              <2> .etime:
  6258 00004844 A1[52020000]        <2> 	mov eax, [timeseconds]
  6259 00004849 8B1D[56020000]      <2> 	mov ebx, [timenanoseconds]
  6260 0000484F 8B0D[F1480000]      <2> 	mov ecx, [.time]
  6261 00004855 8B15[F5480000]      <2> 	mov edx, [.time + 4]
  6262 0000485B C1EA0A              <2> 	shr edx, 10
  6263 0000485E C1EB0A              <2> 	shr ebx, 10
  6264 00004861 29C8                <2> 	sub eax, ecx
  6265 00004863 83F800              <2> 	cmp eax, 0
  6266 00004866 740C                <2> 	je .notclp
  6267                              <2> .tclp:
  6268 00004868 81C340420F00        <2> 	add ebx, 1000000
  6269 0000486E 48                  <2> 	dec eax
  6270 0000486F 83F800              <2> 	cmp eax, 0
  6271 00004872 75F4                <2> 	jne .tclp
  6272                              <2> .notclp:
  6273 00004874 29D3                <2> 	sub ebx, edx
  6274 00004876 C3                  <2> 	ret
  6275                              <2> 	
  6276                              <2> .st:
  6277 00004877 6631C0              <2> 	xor ax, ax
  6278 0000487A 6631DB              <2> 	xor bx, bx
  6279 0000487D 668B0D[29550000]    <2> 	mov cx, [resolutiony]
  6280 00004884 668B15[27550000]    <2> 	mov dx, [resolutionx]
  6281                              <2> .lp:
  6282 0000488B 60                  <2> 	pusha
  6283 0000488C E8E5230000          <2> 	call drawline
  6284 00004891 61                  <2> 	popa
  6285                              <2> .noswitch:
  6286 00004892 47                  <2> 	inc edi
  6287 00004893 6643                <2> 	inc bx
  6288 00004895 664A                <2> 	dec dx
  6289 00004897 6683FB00            <2> 	cmp bx, 0
  6290 0000489B 74EE                <2> 	je .lp
  6291 0000489D 6683FA00            <2> 	cmp dx, 0
  6292 000048A1 75E8                <2> 	jne .lp
  6293                              <2> .lp2:
  6294 000048A3 60                  <2> 	pusha
  6295 000048A4 E8CD230000          <2> 	call drawline
  6296 000048A9 61                  <2> 	popa
  6297 000048AA 47                  <2> 	inc edi
  6298 000048AB 6640                <2> 	inc ax
  6299 000048AD 6649                <2> 	dec cx
  6300 000048AF 6683F900            <2> 	cmp cx, 0
  6301 000048B3 75EE                <2> 	jne .lp2
  6302 000048B5 C3                  <2> 	ret
  6303                              <2> 	
  6304 000048B6 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  6305 000048BF 6520647261776E2069- <2>
  6306 000048C8 6E2000              <2>
  6307 000048CB 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  6308 000048D4 65726520647261776E- <2>
  6309 000048DD 20696E2000          <2>
  6310 000048E2 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  6311 000048EB 6E64732E0A00        <2>
  6312 000048F1 0000000000000000    <2> .time dd 0,0	
  6313                              <1> %endif
  6314                              <1> %include 'source/programs/logout.asm'
  6315 000048F9 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  6316 00004902 E9BAE1FFFF          <2> 	jmp os
  6317                              <1> %include 'source/programs/loop.asm'
  6318 00004907 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  6319 0000490E 803D[83B00300]00    <2> 	cmp byte [LOOPON], 0
  6320 00004915 0F8501000000        <2> 	jne near filoop
  6321 0000491B C3                  <2> 	ret
  6322 0000491C 8B35[84B00300]      <2> filoop: mov esi, [LOOPPOS]
  6323 00004922 FE0D[19B00300]      <2> 	dec byte [IFON]
  6324 00004928 C605[83B00300]00    <2> 	mov byte [LOOPON], 0
  6325 0000492F 8935[7EB00300]      <2> 	mov [BATCHPOS], esi
  6326 00004935 8935[C4380000]      <2> 	mov [batchedi], esi
  6327 0000493B C3                  <2> 	ret 
  6328                              <1> %ifdef disk.none
  6329                              <1> %else
  6330                              <1> 	%include 'source/programs/ls.asm'
  6331 0000493C FF2C6C7300          <2> db 255,44,"ls",0
  6332 00004941 BE[64870300]        <2> 		mov esi, diskfileindex
  6333                              <2> 	diskindexdir:
  6334 00004946 803E5F              <2> 		cmp byte [esi], '_'
  6335 00004949 743D                <2> 		je nextdiskindexdir
  6336 0000494B E89ED3FFFF          <2> 		call printquiet
  6337 00004950 56                  <2> 		push esi
  6338 00004951 BE[A5490000]        <2> 		mov esi, disktab
  6339 00004956 E893D3FFFF          <2> 		call printquiet
  6340 0000495B 5E                  <2> 		pop esi
  6341 0000495C 8B4E05              <2> 		mov ecx, [esi + 5]
  6342 0000495F C605[06310000]05    <2> 		mov byte [firsthexshown], 5
  6343 00004966 E85FE8FFFF          <2> 		call showdec
  6344 0000496B 56                  <2> 		push esi
  6345 0000496C BE[E5840000]        <2> 		mov esi, line
  6346 00004971 E878D3FFFF          <2> 		call printquiet
  6347 00004976 5E                  <2> 		pop esi
  6348 00004977 83C609              <2> 		add esi, 9
  6349 0000497A 81FE[6F880300]      <2> 		cmp esi, enddiskfileindex
  6350 00004980 72C4                <2> 		jb diskindexdir
  6351 00004982 E8C8DEFFFF          <2> 		call termcopy
  6352 00004987 C3                  <2> 		ret
  6353                              <2> 	nextdiskindexdir:
  6354 00004988 46                  <2> 		inc esi
  6355 00004989 803E00              <2> 		cmp byte [esi], 0
  6356 0000498C 75FA                <2> 		jne nextdiskindexdir
  6357 0000498E 83C609              <2> 		add esi, 9
  6358 00004991 81FE[6F880300]      <2> 		cmp esi, enddiskfileindex
  6359 00004997 72AD                <2> 		jb diskindexdir
  6360 00004999 E8B1DEFFFF          <2> 		call termcopy
  6361 0000499E C3                  <2> 		ret
  6362                              <2> 		
  6363 0000499F 4469736B2000        <2> 		diskmsg db "Disk ",0
  6364 000049A5 0D09090900          <2> 		disktab db 13,9,9,9,0
  6365                              <1> %endif
  6366                              <1> %include 'source/programs/memory.asm'
  6367 000049AA FF2C6D656D6F727900  <2> db 255,44,"memory",0
  6368 000049B3 BE[20850000]        <2> 	mov esi, memlistbuf
  6369 000049B8 31FF                <2> 	xor edi, edi
  6370 000049BA 668B3D[60870000]    <2> 	mov di, [memlistend]
  6371 000049C1 01F7                <2> 	add edi, esi
  6372                              <2> printmemmap:
  6373 000049C3 8B0E                <2> 	mov ecx, [esi]
  6374 000049C5 E851E7FFFF          <2> 	call showhex
  6375 000049CA 83C608              <2> 	add esi, 8
  6376 000049CD 8B0E                <2> 	mov ecx, [esi]
  6377 000049CF E847E7FFFF          <2> 	call showhex
  6378 000049D4 83C608              <2> 	add esi, 8
  6379 000049D7 8B0E                <2> 	mov ecx, [esi]
  6380 000049D9 E83DE7FFFF          <2> 	call showhex
  6381 000049DE 83C608              <2> 	add esi, 8
  6382 000049E1 57                  <2> 	push edi
  6383 000049E2 56                  <2> 	push esi
  6384 000049E3 E822D3FFFF          <2> 	call printline
  6385 000049E8 5E                  <2> 	pop esi
  6386 000049E9 5F                  <2> 	pop edi
  6387 000049EA 39FE                <2> 	cmp esi, edi
  6388 000049EC 72D5                <2> 	jb printmemmap
  6389 000049EE C3                  <2> 	ret
  6390                              <2> 	
  6391                              <1> %include 'source/programs/pci.asm'
  6392 000049EF FF2C70636900        <2> db 255,44,"pci",0
  6393 000049F5 E876180000          <2> 	call pcidump
  6394 000049FA C3                  <2> 	ret 
  6395                              <1> %ifdef network.included
  6396                              <1> 	%include 'source/programs/ping.asm'
  6397                              <1> %endif
  6398                              <1> %ifdef disk.none
  6399                              <1> %else
  6400                              <1> 	%include 'source/programs/play.asm'
  6401 000049FB FF2C706C61796100    <2> db 255,44,"playa",0
  6402 00004A03 8B3D[192F0000]      <2> 	mov edi, [currentcommandloc]
  6403 00004A09 83C706              <2> 	add edi, 6
  6404 00004A0C E830000000          <2> 	call playasync
  6405 00004A11 C3                  <2> 	ret
  6406 00004A12 FF2C706C61792000    <2> db 255,44,"play ",0
  6407                              <2> play:
  6408 00004A1A 8B3D[192F0000]      <2> 	mov edi, [currentcommandloc]
  6409 00004A20 83C705              <2> 	add edi, 5
  6410 00004A23 E819000000          <2> 	call playasync
  6411                              <2> .waitforsound:
  6412 00004A28 F4                  <2> 	hlt
  6413                              <2> %ifdef sound.included
  6414 00004A29 A1[DB5B0000]        <2> 	mov eax, [Length0]
  6415 00004A2E 660B05[DF5B0000]    <2> 	or ax, [Length1]
  6416                              <2> %endif
  6417 00004A35 0A05[5A020000]      <2> 	or al, [soundon]
  6418 00004A3B 83F800              <2> 	cmp eax, 0
  6419 00004A3E 75E8                <2> 	jne .waitforsound
  6420 00004A40 C3                  <2> 	ret
  6421                              <2> playasync:
  6422 00004A41 BE0000C000          <2> 	mov esi, 0xC00000
  6423 00004A46 E8431B0000          <2> 	call loadfile
  6424 00004A4B 81FA94010000        <2> 	cmp edx, 404
  6425 00004A51 743C                <2> 	je nosoundfound
  6426 00004A53 BB0000C000          <2> 	mov ebx, 0xC00000
  6427 00004A58 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6428 00004A5F 0F8432010000        <2> 	je near wave_player
  6429 00004A65 66813B534E          <2> 	cmp word [ebx], "SN"
  6430 00004A6A 7523                <2> 	jne nosoundfound
  6431 00004A6C 83C306              <2> 	add ebx, 6
  6432 00004A6F 891D[5D020000]      <2> 	mov [soundpos], ebx
  6433 00004A75 035BFC              <2> 	add ebx, [ebx - 4]
  6434 00004A78 891D[61020000]      <2> 	mov [soundendpos], ebx
  6435 00004A7E 66C705[5B020000]00- <2> 	mov word [soundrepititions], 0
  6436 00004A86 00                  <2>
  6437 00004A87 C605[5A020000]01    <2> 	mov byte [soundon], 1
  6438 00004A8E C3                  <2> 	ret
  6439                              <2> nosoundfound:
  6440 00004A8F BE[B24A0000]        <2> 	mov esi, notfoundsound
  6441 00004A94 E876D2FFFF          <2> 	call print
  6442 00004A99 8B35[192F0000]      <2> 	mov esi, [currentcommandloc]
  6443 00004A9F 83C605              <2> 	add esi, 5
  6444 00004AA2 E868D2FFFF          <2> 	call print
  6445 00004AA7 BE[B4840000]        <2> 	mov esi, notfound2
  6446 00004AAC E85ED2FFFF          <2> 	call print
  6447 00004AB1 C3                  <2> 	ret
  6448 00004AB2 706C61793A2000      <2> notfoundsound db "play: ",0
  6449                              <2> 
  6450                              <2> %ifdef sound.included
  6451                              <2> sbplay:
  6452 00004AB9 BE0000C000          <2> 		mov esi, 0xC00000
  6453 00004ABE 89F3                <2> 		mov ebx, esi
  6454 00004AC0 83C62C              <2> 		add esi, WAVSTART
  6455 00004AC3 29F7                <2> 		sub edi, esi
  6456 00004AC5 66893D[DF5B0000]    <2> 		mov [Length1], di
  6457 00004ACC C1EF0F              <2> 		shr edi, 15
  6458 00004ACF 893D[DB5B0000]      <2> 		mov [Length0], edi
  6459 00004AD5 8B4B18              <2> 		mov ecx, [ebx + 24]
  6460 00004AD8 890D[EC5B0000]      <2> 		mov [Freq], ecx
  6461 00004ADE 31C0                <2> 		xor eax, eax
  6462 00004AE0 BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  6463 00004AE5 83C22C              <2> 		add edx, WAVSTART
  6464 00004AE8 01D0                <2> 		add	eax, edx
  6465 00004AEA 89C6                <2> 		mov esi, eax
  6466 00004AEC 31C9                <2> 		xor ecx, ecx
  6467 00004AEE 31DB                <2> 		xor ebx, ebx
  6468 00004AF0 66891D[E95B0000]    <2> 		mov [SegLoc], bx
  6469 00004AF7 81C300000800        <2> 		add ebx, 0x80000
  6470 00004AFD 66B9FFFF            <2> 		mov cx, 0xFFFF
  6471 00004B01 6683FF00            <2> 		cmp di, 0
  6472 00004B05 7520                <2> 		jne .autoinit
  6473 00004B07 668B0D[DF5B0000]    <2> 		mov cx, [Length1]
  6474 00004B0E C605[DA5B0000]01    <2> 		mov byte [OddLength], 1
  6475 00004B15 6681F90080          <2> 		cmp cx, 32768
  6476 00004B1A 730B                <2> 		jae .autoinit
  6477 00004B1C C605[DA5B0000]00    <2> 		mov byte [OddLength], 0
  6478 00004B23 66D1E1              <2> 		shl cx, 1
  6479 00004B26 47                  <2> 		inc edi
  6480                              <2> .autoinit:
  6481 00004B27 4F                  <2> 		dec edi
  6482 00004B28 893D[DB5B0000]      <2> 		mov [Length0], edi
  6483 00004B2E 66890D[DF5B0000]    <2> 		mov [Length1], cx
  6484 00004B35 66D1E9              <2> 		shr cx, 1
  6485 00004B38 6641                <2> 		inc cx
  6486 00004B3A 01C8                <2> 		add eax, ecx
  6487 00004B3C A3[E15B0000]        <2> 		mov [NextMemLoc], eax
  6488 00004B41 8935[E55B0000]      <2> 		mov	[MemLoc], esi
  6489 00004B47 E83A0F0000          <2> 		call DMACopy
  6490 00004B4C 31DB                <2> 		xor ebx, ebx
  6491 00004B4E 668B1D[E95B0000]    <2> 		mov bx, [SegLoc]
  6492 00004B55 31C9                <2> 		xor ecx, ecx
  6493 00004B57 668B0D[DF5B0000]    <2> 		mov cx, [Length1]
  6494 00004B5E 66D1E9              <2> 		shr cx, 1
  6495 00004B61 6641                <2> 		inc cx
  6496 00004B63 01CB                <2> 		add ebx, ecx
  6497 00004B65 66891D[E95B0000]    <2> 		mov [SegLoc], bx
  6498 00004B6C 81C300000800        <2> 		add ebx, 0x80000
  6499 00004B72 8B35[E15B0000]      <2> 		mov esi, [NextMemLoc]
  6500 00004B78 89F0                <2> 		mov eax, esi
  6501 00004B7A 01C8                <2> 		add eax, ecx
  6502 00004B7C A3[E15B0000]        <2> 		mov [NextMemLoc], eax
  6503 00004B81 8935[E55B0000]      <2> 		mov	[MemLoc], esi
  6504 00004B87 E8FA0E0000          <2> 		call DMACopy
  6505 00004B8C E8120F0000          <2> 		call DMAPlay
  6506 00004B91 E89C0F0000          <2> 		call PlayDSP
  6507 00004B96 C3                  <2> 		ret
  6508                              <2> WAVSTART equ 44
  6509                              <2> wave_player:
  6510 00004B97 803D[F05B0000]01    <2> 	cmp byte [SoundBlaster], 1
  6511 00004B9E 0F8415FFFFFF        <2> 	je near sbplay
  6512 00004BA4 BE[AF4B0000]        <2> 	mov esi, nosoundblaster
  6513 00004BA9 E861D1FFFF          <2> 	call print
  6514 00004BAE C3                  <2> 	ret
  6515                              <2> %else
  6516                              <2> 	wave_player:
  6517                              <2> 		mov esi, nosoundblaster
  6518                              <2> 		call print
  6519                              <2> 		ret
  6520                              <2> %endif
  6521 00004BAF 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6522 00004BB8 426C61737465722064- <2>
  6523 00004BC1 657465637465642E0A- <2>
  6524 00004BCA 00                  <2>
  6525                              <1> %endif
  6526                              <1> %include 'source/programs/pwd.asm'
  6527 00004BCB FF2C70776400        <2> db 255,44,"pwd",0
  6528 00004BD1 BE[14AE0300]        <2> 	mov esi, currentfolder
  6529 00004BD6 E813D1FFFF          <2> 	call printquiet
  6530 00004BDB E82AD1FFFF          <2> 	call printline
  6531 00004BE0 C3                  <2> 	ret
  6532                              <2> 	
  6533                              <1> %include 'source/programs/reboot.asm'
  6534 00004BE1 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6535 00004BEA 0F011D[F44B0000]    <2> 		lidt [idtreboot]
  6536 00004BF1 CD00                <2> 		int 0
  6537 00004BF3 F4                  <2> 		hlt
  6538                              <2> 	
  6539 00004BF4 0000                <2> 	idtreboot dw 0
  6540 00004BF6 00000000            <2> 			  dd 0
  6541                              <2> 
  6542                              <2> 	coldboot:
  6543 00004BFA 66B84000            <2> 		MOV AX, 0040h
  6544 00004BFE 8EC0                <2> 		MOV ES, AX
  6545 00004C00 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6546 00004C09 00                  <2>
  6547 00004C0A EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6548 00004C11 CF                  <2> 		IRET
  6549                              <2> 
  6550                              <2> 	warmboot:
  6551 00004C12 66B84000            <2> 		MOV AX, 0040h
  6552 00004C16 8EC0                <2> 		MOV ES, AX
  6553 00004C18 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6554 00004C21 12                  <2>
  6555 00004C22 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6556 00004C29 CF                  <2> 		IRET
  6557                              <2> 		
  6558                              <1> %include 'source/programs/reg.asm'
  6559 00004C2A FF2C72656700        <2> db 255,44,"reg",0
  6560 00004C30 CD03                <2> 	int 3
  6561 00004C32 C3                  <2> 	ret 
  6562                              <1> %ifdef disk.none
  6563                              <1> %else
  6564                              <1> 	%include 'source/programs/show.asm'
  6565 00004C33 FF2C73686F7700      <2> db 255,44,"show",0
  6566                              <2> showprog:
  6567 00004C3A 8B3D[192F0000]      <2> 		mov edi, [currentcommandloc]
  6568 00004C40 83C705              <2> 		add edi, 5
  6569 00004C43 BE00004000          <2> 		mov esi, 0x400000
  6570 00004C48 803F26              <2> 		cmp byte [edi], '&'
  6571 00004C4B 741B                <2> 		je .nullfile
  6572 00004C4D BE00008000          <2> 		mov esi, 0x800000
  6573 00004C52 E837190000          <2> 		call loadfile
  6574 00004C57 81FA94010000        <2> 		cmp edx, 404
  6575 00004C5D 0F847E000000        <2> 		je near filenotfound
  6576 00004C63 BE00008000          <2> 		mov esi, 0x800000
  6577                              <2> .nullfile:
  6578                              <2> %ifdef gui.included
  6579 00004C68 66813E424D          <2> 		cmp word [esi], "BM"
  6580 00004C6D 740B                <2> 		je bmpfound
  6581                              <2> %endif
  6582 00004C6F E89BD0FFFF          <2> 		call print
  6583 00004C74 E891D0FFFF          <2> 		call printline
  6584 00004C79 C3                  <2> 		ret
  6585                              <2> %ifdef gui.included
  6586                              <2> bmpfound:
  6587 00004C7A 803D[0A850000]00    <2> 		cmp byte [guion], 0
  6588 00004C81 0F8428000000        <2> 		je near noguibmp
  6589 00004C87 BE00008000          <2> 		mov esi, 0x800000
  6590 00004C8C 31C9                <2> 		xor ecx, ecx
  6591 00004C8E 31D2                <2> 		xor edx, edx
  6592 00004C90 31C0                <2> 		xor eax, eax
  6593 00004C92 31DB                <2> 		xor ebx, ebx
  6594 00004C94 E8C31A0000          <2> 		call showbmp
  6595 00004C99 30C0                <2> 		xor al, al
  6596 00004C9B B405                <2> 		mov ah, 5
  6597 00004C9D CD30                <2> 		int 30h
  6598 00004C9F E8E5200000          <2> 		call guiclear
  6599 00004CA4 E8C01D0000          <2> 		call clearmousecursor
  6600 00004CA9 E85C210000          <2> 		call reloadallgraphics
  6601 00004CAE C3                  <2> 		ret
  6602                              <2> noguibmp:
  6603 00004CAF BE[BA4C0000]        <2> 		mov esi, warnguimsg
  6604 00004CB4 E856D0FFFF          <2> 		call print
  6605 00004CB9 C3                  <2> 		ret
  6606 00004CBA 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6607 00004CC3 6E6F7420626520646F- <2>
  6608 00004CCC 6E6520776974686F75- <2>
  6609 00004CD5 742074686520475549- <2>
  6610 00004CDE 2E0A00              <2>
  6611                              <2> %endif
  6612                              <2> 
  6613                              <2> filenotfound:
  6614 00004CE1 BE[144D0000]        <2> 		mov esi, filenf
  6615 00004CE6 E824D0FFFF          <2> 		call print
  6616 00004CEB 8B35[192F0000]      <2> 		mov esi, [currentcommandloc]
  6617                              <2> findfilenotfoundzero:
  6618 00004CF1 8A06                <2> 		mov al, [esi]
  6619 00004CF3 46                  <2> 		inc esi
  6620 00004CF4 3C00                <2> 		cmp al, 0
  6621 00004CF6 7411                <2> 		je nofilenamenotfound
  6622 00004CF8 81FE[88C80300]      <2> 		cmp esi, buftxtend
  6623 00004CFE 7309                <2> 		jae nofilenamenotfound
  6624 00004D00 3C20                <2> 		cmp al, " "
  6625 00004D02 75ED                <2> 		jne findfilenotfoundzero
  6626 00004D04 E806D0FFFF          <2> 		call print
  6627                              <2> nofilenamenotfound:
  6628 00004D09 BE[1F4D0000]        <2> 		mov esi, filenf2
  6629 00004D0E E8FCCFFFFF          <2> 		call print
  6630 00004D13 C3                  <2> 		ret
  6631 00004D14 5468652066696C6520- <2> filenf db "The file ",34,0
  6632 00004D1D 2200                <2>
  6633 00004D1F 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6634 00004D28 6F7420626520666F75- <2>
  6635 00004D31 6E642E0A00          <2>
  6636                              <1> %endif
  6637                              <1> %include 'source/programs/shush.asm'
  6638 00004D36 FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6639                              <2> shushprog:
  6640                              <2> %ifdef gui.included
  6641 00004D3E 803D[0A850000]00    <2> 	cmp byte [guion], 0
  6642 00004D45 0F84B5000000        <2> 	je near .noswitchsize
  6643 00004D4B 8B35[192F0000]      <2> 	mov esi, [currentcommandloc]
  6644 00004D51 83C606              <2> 	add esi, 6
  6645 00004D54 56                  <2> 	push esi
  6646 00004D55 4E                  <2> 	dec esi
  6647                              <2> .findspace:
  6648 00004D56 46                  <2> 	inc esi
  6649 00004D57 8A06                <2> 	mov al, [esi]
  6650 00004D59 3C00                <2> 	cmp al, 0
  6651 00004D5B 0F849F000000        <2> 	je near .noswitchsize
  6652 00004D61 3C58                <2> 	cmp al, "X"
  6653 00004D63 7408                <2> 	je .donefind
  6654 00004D65 3C78                <2> 	cmp al, "x"
  6655 00004D67 7404                <2> 	je .donefind
  6656 00004D69 3C20                <2> 	cmp al, " "
  6657 00004D6B 75E9                <2> 	jne .findspace
  6658                              <2> .donefind:
  6659 00004D6D 30C0                <2> 	xor al, al
  6660 00004D6F 8806                <2> 	mov [esi], al
  6661 00004D71 46                  <2> 	inc esi
  6662 00004D72 89F7                <2> 	mov edi, esi
  6663 00004D74 E820E5FFFF          <2> 	call cnvrttxt
  6664 00004D79 89C8                <2> 	mov eax, ecx
  6665 00004D7B 5E                  <2> 	pop esi
  6666 00004D7C 50                  <2> 	push eax
  6667 00004D7D 89F7                <2> 	mov edi, esi
  6668 00004D7F E815E5FFFF          <2> 	call cnvrttxt
  6669 00004D84 89CB                <2> 	mov ebx, ecx
  6670 00004D86 58                  <2> 	pop eax	
  6671 00004D87 6683FB00            <2> 	cmp bx, 0
  6672 00004D8B 0F846F000000        <2> 	je near .noswitchsize
  6673 00004D91 6683F800            <2> 	cmp ax, 0
  6674 00004D95 0F8465000000        <2> 	je near .noswitchsize
  6675 00004D9B 66C1E303            <2> 	shl bx, 3
  6676 00004D9F 66C1E004            <2> 	shl ax, 4
  6677 00004DA3 663B1D[27550000]    <2> 	cmp bx, [resolutionx]
  6678 00004DAA 7607                <2> 	jbe .nofixx
  6679 00004DAC 668B1D[27550000]    <2> 	mov bx, [resolutionx]
  6680                              <2> .nofixx:
  6681 00004DB3 6683C010            <2> 	add ax, 16
  6682 00004DB7 663B05[29550000]    <2> 	cmp ax, [resolutiony]
  6683 00004DBE 7606                <2> 	jbe .nofixy
  6684 00004DC0 66A1[29550000]      <2> 	mov ax, [resolutiony]
  6685                              <2> .nofixy:
  6686 00004DC6 6683E810            <2> 	sub ax, 16
  6687 00004DCA 6631C9              <2> 	xor cx, cx
  6688 00004DCD 6631D2              <2> 	xor dx, dx
  6689 00004DD0 66891D[9D710000]    <2> 	mov [termwindow], bx
  6690 00004DD7 66A3[9F710000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6691 00004DDD BE[9D710000]        <2> 	mov esi, termwindow
  6692 00004DE2 31DB                <2> 	xor ebx, ebx
  6693 00004DE4 6631C0              <2> 	xor ax, ax
  6694 00004DE7 E8CF280000          <2> 	call showwindow
  6695 00004DEC E8981F0000          <2> 	call guiclear
  6696 00004DF1 E8C5CFFFFF          <2> 	call clear
  6697 00004DF6 E80F200000          <2> 	call reloadallgraphics
  6698 00004DFB E8521D0000          <2> 	call switchmousepos2
  6699                              <2> .noswitchsize:
  6700                              <2> %endif
  6701 00004E00 BE[0B4E0000]        <2> 	mov esi, shushmsg
  6702 00004E05 E805CFFFFF          <2> 	call print
  6703 00004E0A C3                  <2> 	ret
  6704 00004E0B 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6705 00004E14 6F2074686520536F6C- <2>
  6706 00004E1D 6C65724F5320486172- <2>
  6707 00004E26 646C7920556E69782D- <2>
  6708 00004E2F 436F6D70617469626C- <2>
  6709 00004E38 65205368656C6C210A- <2>
  6710 00004E41 00                  <2>
  6711                              <1> %include 'source/programs/system.asm'
  6712 00004E42 FF2C73797374656D00  <2> 	db 255,44,"system",0
  6713 00004E4B BE[5B4F0000]        <2> 	mov esi, kernelinfomsg
  6714 00004E50 E899CEFFFF          <2> 	call printquiet
  6715 00004E55 B9[64870300]        <2> 	mov ecx, osend
  6716 00004E5A E86BE3FFFF          <2> 	call showdec
  6717 00004E5F BE[704F0000]        <2> 	mov esi, diskbytemsg
  6718 00004E64 E885CEFFFF          <2> 	call printquiet
  6719 00004E69 B9[64870300]        <2> 	mov ecx, osend
  6720 00004E6E 81C1[3C9A2D00]      <2> 	add ecx, commandbufend
  6721 00004E74 81E9[008A0300]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6722 00004E7A E84BE3FFFF          <2> 	call showdec
  6723 00004E7F BE[874F0000]        <2> 	mov esi, membytemsg
  6724 00004E84 E865CEFFFF          <2> 	call printquiet
  6725 00004E89 BE[EA4F0000]        <2> 	mov esi, endofmemmsg
  6726 00004E8E E85BCEFFFF          <2> 	call printquiet
  6727 00004E93 B9[3CB24D00]        <2> 	mov ecx, bssend
  6728 00004E98 E87EE2FFFF          <2> 	call showhex
  6729 00004E9D BE[A04F0000]        <2> 	mov esi, systeminfomsg
  6730 00004EA2 E847CEFFFF          <2> 	call printquiet
  6731                              <2> getcpuspeed:
  6732 00004EA7 B8FE000000          <2> 	mov eax, 0xFE
  6733 00004EAC E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6734 00004EAE B020                <2> 	mov al, 0x20
  6735 00004EB0 E620                <2> 	out 0x20, al
  6736 00004EB2 F4                  <2> 	hlt
  6737 00004EB3 0F31                <2> 	rdtsc
  6738 00004EB5 89D6                <2> 	mov esi, edx
  6739 00004EB7 89C7                <2> 	mov edi, eax
  6740 00004EB9 31C0                <2> 	xor eax, eax
  6741 00004EBB C605[3B020000]01    <2> 	mov byte [testingcpuspeed], 1
  6742                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6743 00004EC2 40                  <2> 	inc eax
  6744 00004EC3 EBFD                <2> 	jmp cpuspeedloop
  6745                              <2> cpuspeedloopend:
  6746 00004EC5 0F31                <2> 	rdtsc
  6747 00004EC7 29F8                <2> 	sub eax, edi
  6748 00004EC9 29F2                <2> 	sub edx, esi
  6749 00004ECB 8915[44020000]      <2> 	mov [cpuclocksperint + 4], edx
  6750 00004ED1 A3[40020000]        <2> 	mov [cpuclocksperint], eax
  6751 00004ED6 31C0                <2> 	xor eax, eax
  6752 00004ED8 E621                <2> 	out 0x21, al
  6753 00004EDA B020                <2> 	mov al, 0x20
  6754 00004EDC E620                <2> 	out 0x20, al
  6755 00004EDE 31D2                <2> 	xor edx, edx
  6756 00004EE0 31C0                <2> 	xor eax, eax
  6757 00004EE2 A1[3C020000]        <2> 	mov eax, [cpuspeedperint]
  6758 00004EE7 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6759                              <2> 				;result by 2
  6760 00004EE9 8B1D[4E020000]      <2> 	mov ebx, [timeinterval]
  6761 00004EEF C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6762 00004EF2 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6763 00004EF4 89C1                <2> 	mov ecx, eax
  6764 00004EF6 E8CFE2FFFF          <2> 	call showdec
  6765 00004EFB BE[CE4F0000]        <2> 	mov esi, cpuspeedmsg
  6766 00004F00 E8E9CDFFFF          <2> 	call printquiet
  6767 00004F05 31D2                <2> 	xor edx, edx
  6768 00004F07 A1[40020000]        <2> 	mov eax, [cpuclocksperint]
  6769 00004F0C 8B15[44020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6770 00004F12 8B1D[4E020000]      <2> 	mov ebx, [timeinterval]
  6771 00004F18 C1EB0A              <2> 	shr ebx, 10
  6772 00004F1B F7F3                <2> 	div ebx
  6773 00004F1D 89C1                <2> 	mov ecx, eax
  6774 00004F1F E8A6E2FFFF          <2> 	call showdec
  6775 00004F24 BE[D44F0000]        <2> 	mov esi, cpuclockmsg
  6776 00004F29 E8C0CDFFFF          <2> 	call printquiet
  6777 00004F2E 8B0D[48020000]      <2> 	mov ecx, [memoryspace]
  6778 00004F34 C1E914              <2> 	shr ecx, 20
  6779 00004F37 41                  <2> 	inc ecx	;the reading is one MB behind
  6780 00004F38 E88DE2FFFF          <2> 	call showdec
  6781 00004F3D BE[D94F0000]        <2> 	mov esi, memoryspacemsg
  6782 00004F42 E8C8CDFFFF          <2> 	call print
  6783                              <2> %ifdef sound.included
  6784 00004F47 803D[F05B0000]00    <2> 	cmp byte [SoundBlaster], 0
  6785 00004F4E 740A                <2> 	je .nosb
  6786 00004F50 BE[B64F0000]        <2> 	mov esi, soundblastermsg
  6787 00004F55 E8B5CDFFFF          <2> 	call print
  6788                              <2> .nosb:
  6789                              <2> %endif
  6790 00004F5A C3                  <2> 	ret
  6791                              <2> 
  6792 00004F5B 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6793 00004F64 666F726D6174696F6E- <2>
  6794 00004F6D 3A0A00              <2>
  6795 00004F70 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6796 00004F79 6B2053706163652055- <2>
  6797 00004F82 7365640A00          <2>
  6798 00004F87 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6799 00004F90 6F7279205370616365- <2>
  6800 00004F99 20557365640A00      <2>
  6801 00004FA0 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6802 00004FA9 6E666F726D6174696F- <2>
  6803 00004FB2 6E3A0A00            <2>
  6804                              <2> %ifdef sound.included
  6805 00004FB6 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6806 00004FBF 746572204465746563- <2>
  6807 00004FC8 7465642E0A00        <2>
  6808                              <2> %endif
  6809 00004FCE 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6810 00004FD4 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6811 00004FD9 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6812 00004FE2 2053706163650A00    <2>
  6813 00004FEA 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6814 00004FF3 6D6F72792053706163- <2>
  6815 00004FFC 653A20307800        <2>
  6816                              <1> %include 'source/programs/time.asm'
  6817 00005002 FF2C74696D6500      <2> db 255,44,"time",0	
  6818                              <2> timer:
  6819 00005009 8B35[192F0000]      <2> 	mov esi, [currentcommandloc]
  6820 0000500F 83C604              <2> 	add esi, 4
  6821 00005012 803E00              <2> 	cmp byte [esi], 0
  6822 00005015 7477                <2> 	je .norun
  6823 00005017 46                  <2> 	inc esi
  6824 00005018 8B0D[52020000]      <2> 	mov ecx, [timeseconds]
  6825 0000501E 51                  <2> 	push ecx
  6826 0000501F 8B0D[56020000]      <2> 	mov ecx, [timenanoseconds]
  6827 00005025 51                  <2> 	push ecx
  6828 00005026 BF[88C40300]        <2> 	mov edi, buftxt
  6829                              <2> .cpcmd:
  6830 0000502B 8A06                <2> 	mov al, [esi]
  6831 0000502D 8807                <2> 	mov [edi], al
  6832 0000502F 46                  <2> 	inc esi
  6833 00005030 47                  <2> 	inc edi
  6834 00005031 3C00                <2> 	cmp al, 0
  6835 00005033 75F6                <2> 	jne .cpcmd
  6836 00005035 E80FDEFFFF          <2> 	call run
  6837 0000503A 5A                  <2> 	pop edx
  6838 0000503B 58                  <2> 	pop eax
  6839                              <2> 
  6840 0000503C 8B0D[52020000]      <2> 	mov ecx, [timeseconds]
  6841 00005042 29C1                <2> 	sub ecx, eax
  6842 00005044 8B1D[56020000]      <2> 	mov ebx, [timenanoseconds]
  6843 0000504A 29D3                <2> 	sub ebx, edx
  6844 0000504C 7307                <2> 	jae .nosign
  6845 0000504E 81C300CA9A3B        <2> 	add ebx, 1000000000
  6846 00005054 49                  <2> 	dec ecx
  6847                              <2> .nosign:
  6848 00005055 E870E1FFFF          <2> 	call showdec
  6849                              <2> 	
  6850 0000505A 89D9                <2> 	mov ecx, ebx
  6851 0000505C BE[BD3E0000]        <2> 	mov esi, timenscache
  6852 00005061 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6853 00005068 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6854 0000506F C6460A30            <2> 	mov byte [esi + 10], "0"
  6855 00005073 BE[C83E0000]        <2> 	mov esi, timenscacheend
  6856 00005078 E868DFFFFF          <2> 	call convert
  6857 0000507D BE[BD3E0000]        <2> 	mov esi, timenscache
  6858 00005082 E888CCFFFF          <2> 	call print
  6859 00005087 C605[BD3E0000]08    <2> 	mov byte [timenscache], 8
  6860                              <2> .norun:
  6861 0000508E C3                  <2> 	ret
  6862                              <2> 	
  6863                              <1> %include 'source/programs/turnoff.asm'
  6864 0000508F FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6865 00005098 00                  <2>
  6866                              <2> 	turnoff:
  6867 00005099 66C705[D20C0000]-   <2> 			mov word [realmodeptr], shutdown
  6868 000050A0 [AC50]              <2>
  6869 000050A2 BB[D6500000]        <2> 			mov ebx, halt
  6870 000050A7 E81ABBFFFF          <2> 			call realmode
  6871                              <2> 
  6872                              <2> [BITS 16]
  6873                              <2> 		shutdown:
  6874 000050AC B453                <2> 			mov ah, 0x53
  6875 000050AE B004                <2> 			mov al, 4
  6876 000050B0 31DB                <2> 			xor bx, bx
  6877 000050B2 CD15                <2> 			int 0x15
  6878                              <2> 			
  6879 000050B4 B453                <2> 			mov ah, 0x53
  6880 000050B6 B001                <2> 			mov al, 1
  6881 000050B8 31DB                <2> 			xor bx, bx
  6882 000050BA CD15                <2> 			int 0x15
  6883                              <2> 			
  6884 000050BC B453                <2> 			mov ah, 0x53
  6885 000050BE B008                <2> 			mov al, 8
  6886 000050C0 BB0100              <2> 			mov bx, 1
  6887 000050C3 B90100              <2> 			mov cx, 1
  6888 000050C6 CD15                <2> 			int 0x15
  6889                              <2> 			
  6890 000050C8 B453                <2> 			mov ah, 0x53
  6891 000050CA B007                <2> 			mov al, 7
  6892 000050CC BB0100              <2> 			mov bx, 1
  6893 000050CF B90300              <2> 			mov cx, 3
  6894 000050D2 CD15                <2> 			int 0x15
  6895 000050D4 EBFE                <2> 			jmp $
  6896                              <2> 			[BITS 32]
  6897 000050D6 EBFE                <2> halt: jmp $
  6898                              <1> %include 'source/programs/wait.asm'
  6899 000050D8 FF2C7761697400      <2> db 255,44,"wait",0
  6900                              <2> waitkey:
  6901 000050DF E805D2FFFF          <2> 		call getchar
  6902 000050E4 C3                  <2> 		ret
  6903                              <1> %include 'source/programs/while.asm'
  6904 000050E5 FF2C7768696C6500    <2> db 255,44,"while",0
  6905 000050ED 30C0                <2> whilecmd:  xor al, al
  6906 000050EF 3805[82B00300]      <2> 	cmp [BATCHISON], al
  6907 000050F5 0F8495E8FFFF        <2> 	je near notbatch
  6908 000050FB 8B35[7EB00300]      <2> 	mov esi, [BATCHPOS]
  6909 00005101 83EE02              <2> 	sub esi, 2
  6910 00005104 4E                  <2> whilefnd: dec esi
  6911 00005105 8A06                <2> 	mov al, [esi]
  6912 00005107 3C0A                <2> 	cmp al, 10
  6913 00005109 0F840A000000        <2> 	je near whilefnd2
  6914 0000510F 3C00                <2> 	cmp al, 0
  6915 00005111 0F8402000000        <2> 	je near whilefnd2
  6916 00005117 EBEB                <2> 	jmp whilefnd
  6917                              <2> whilefnd2:
  6918 00005119 46                  <2> 	inc esi
  6919 0000511A 8935[84B00300]      <2> 	mov [LOOPPOS], esi
  6920 00005120 C605[83B00300]01    <2> 	mov BYTE [LOOPON], 1
  6921 00005127 BE[88C40300]        <2> 	mov esi, buftxt
  6922 0000512C BB[88C40300]        <2> 	mov ebx, buftxt
  6923 00005131 83C306              <2> 	add ebx, 6
  6924 00005134 E943F5FFFF          <2> 	jmp chkeqsn
  6925                              <1> progend:		;programs end here	
  6926                              <1> batchprogend:
  6927                                  	%include "source/hardware.asm"
  6928                              <1> %ifdef gui.included
  6929                              <1> 	%include "source/drivers/video/vesa.asm"
  6930                              <2> [BITS 16]
  6931                              <2> guiswitch:
  6932 00005139 83F900              <2> 	cmp cx, 0
  6933 0000513C 750B                <2> 	jne guiswitchdefnum
  6934 0000513E B81200              <2> 	mov ax, 12h
  6935 00005141 31DB                <2> 	xor bx, bx
  6936 00005143 CD10                <2> 	int 10h
  6937 00005145 E84E00              <2> 	call guiloadagain
  6938                              <2> guiswitchnocando:
  6939 00005148 C3                  <2> 	ret	;return without switching as mode number is bad
  6940                              <2> guiswitchdefnum:	;switch to a defined mode number
  6941 00005149 B8004F              <2> 	mov ax, 0x4F00
  6942 0000514C BF[1553]            <2> 	mov di, VBEMODEBLOCK
  6943 0000514F CD10                <2> 	int 10h
  6944 00005151 BE[3753]            <2> 	mov si, reserved
  6945 00005154 83EE02              <2> 	sub si, 2
  6946                              <2> .loop:
  6947 00005157 83C602              <2> 	add si, 2
  6948 0000515A 81FE[1554]          <2> 	cmp si, oemdata
  6949 0000515E 74E8                <2> 	je guiswitchnocando
  6950 00005160 833CFF              <2> 	cmp word [si], 0xFFFF
  6951 00005163 74E3                <2> 	je guiswitchnocando
  6952 00005165 390C                <2> 	cmp [si], cx
  6953 00005167 75EE                <2> 	jne .loop
  6954 00005169 8936[7652]          <2> 	mov [videomodecache], si
  6955 0000516D 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6956 00005171 B8014F              <2> 	mov ax, 0x4F01
  6957 00005174 BF[1555]            <2> 	mov di, VBEMODEINFOBLOCK
  6958 00005177 890E[7452]          <2> 	mov [vesamode], cx
  6959 0000517B CD10                <2> 	int 10h
  6960 0000517D E9D400              <2> 	jmp selectedvesa
  6961                              <2> guiload:
  6962 00005180 BE[ED52]            <2> 	mov si, bootmsg
  6963 00005183 E8F9AE              <2> 	call printrm
  6964 00005186 31C0                <2> 	xor ax, ax
  6965 00005188 CD16                <2> 	int 16h
  6966 0000518A 3C79                <2> 	cmp al, "y"
  6967 0000518C 0F85AEAE            <2> 	jne near vgaset
  6968 00005190 BE[E484]            <2> 	mov si, crlf
  6969 00005193 E8E9AE              <2> 	call printrm
  6970                              <2> guiloadagain:
  6971 00005196 B8004F              <2> 	mov ax, 04F00h
  6972 00005199 BF[1553]            <2> 	mov di, VBEMODEBLOCK
  6973 0000519C CD10                <2> 	int 10h
  6974 0000519E BE[3753]            <2> 	mov si, reserved
  6975 000051A1 83EE02              <2> 	sub si, 2
  6976                              <2> findvideomodes:
  6977 000051A4 83C602              <2> 	add si, 2
  6978 000051A7 8B0C                <2> 	mov cx, [si]
  6979 000051A9 83F9FF              <2> 	cmp cx, 0xFFFF
  6980 000051AC 0F840A00            <2> 	je near nextvmode
  6981 000051B0 81FE[1554]          <2> 	cmp si, oemdata
  6982 000051B4 0F8386AE            <2> 	jae near vgaset	;kill if no valid list is found
  6983 000051B8 EBEA                <2> 	jmp findvideomodes 	
  6984                              <2> ;debug,shows vmodes available
  6985                              <2> nextvmode:
  6986 000051BA 83EE02              <2> 	sub si, 2
  6987 000051BD 81FE[3753]          <2> 	cmp si, reserved
  6988 000051C1 0F82D1FF            <2> 	jb near guiloadagain
  6989 000051C5 8B0C                <2> 	mov cx, [si]
  6990 000051C7 83F9FF              <2> 	cmp cx, 0xFFFF
  6991 000051CA 0F84ECFF            <2> 	je near nextvmode
  6992 000051CE 81C90040            <2> 	or cx, 0x4000 		;Linear Frame Buffer
  6993 000051D2 B8014F              <2> 	mov ax, 04F01h
  6994 000051D5 BF[1555]            <2> 	mov di, VBEMODEINFOBLOCK
  6995 000051D8 890E[7452]          <2> 	mov [vesamode], cx
  6996 000051DC CD10                <2> 	int 10h
  6997 000051DE A0[2E55]            <2> 	mov al, [bitsperpixel]
  6998 000051E1 3C10                <2> 	cmp al, 16
  6999 000051E3 75D5                <2> 	jne nextvmode
  7000 000051E5 8936[7652]          <2> 	mov [videomodecache], si
  7001 000051E9 84E4                <2> 	test ah, ah
  7002 000051EB 0F842200            <2> 	jz near setvesamode
  7003 000051EF EBC9                <2> 	jmp nextvmode
  7004 000051F1 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  7005 000051FA 20766964656F206D6F- <2>
  7006 00005203 6465204F4B3F28792F- <2>
  7007 0000520C 6E290D0A00          <2>
  7008                              <2> setvesamode:
  7009 00005211 8B36[7652]          <2> 	mov si, [videomodecache]
  7010 00005215 8B0C                <2> 	mov cx, [si]
  7011 00005217 E86500              <2> 	call decshow
  7012 0000521A B03A                <2> 	mov al, ':'
  7013 0000521C E8C600              <2> 	call char
  7014 0000521F 8B0E[2755]          <2> 	mov cx, [resolutionx]
  7015 00005223 E85900              <2> 	call decshow
  7016 00005226 B078                <2> 	mov al, "x"
  7017 00005228 E8BA00              <2> 	call char
  7018 0000522B 8B0E[2955]          <2> 	mov cx, [resolutiony]
  7019 0000522F E84D00              <2> 	call decshow
  7020 00005232 B040                <2> 	mov al, "@"
  7021 00005234 E8AE00              <2> 	call char
  7022 00005237 31C9                <2> 	xor cx, cx
  7023 00005239 8A0E[2E55]          <2> 	mov cl, [bitsperpixel]
  7024 0000523D E83F00              <2> 	call decshow
  7025 00005240 BE[F151]            <2> 	mov si, isthisvideook
  7026 00005243 E839AE              <2> 	call printrm
  7027 00005246 31C0                <2> 	xor ax, ax
  7028 00005248 CD16                <2> 	int 16h
  7029 0000524A 8B36[7652]          <2> 	mov si, [videomodecache]
  7030 0000524E 3C79                <2> 	cmp al, "y"
  7031 00005250 0F8566FF            <2> 	jne near nextvmode
  7032                              <2> selectedvesa:
  7033 00005254 8B16[2755]          <2> 	mov dx, [resolutionx]
  7034 00005258 01D2                <2> 	add dx, dx
  7035 0000525A 8916[1556]          <2> 	mov [resolutionx2], dx
  7036 0000525E 31D2                <2> 	xor dx, dx
  7037 00005260 31C9                <2> 	xor cx, cx
  7038 00005262 B8024F              <2> 	mov ax, 04F02h
  7039 00005265 8B1E[7452]          <2> 	mov bx, [vesamode]
  7040 00005269 CD10                <2> 	int 10h		;enter VESA mode
  7041 0000526B C606[0A85]01        <2> 	mov byte [guion], 1
  7042 00005270 E8DBAD              <2> 	call getmemorysize;get the memory map after the video is initialized
  7043 00005273 C3                  <2> 	ret
  7044                              <2> 	
  7045 00005274 0000                <2> vesamode dw 0
  7046 00005276 0000                <2> videomodecache dw 0
  7047                              <2> 
  7048 00005278 0000000000          <2> dcnm db 0,0,0,0,0
  7049 0000527D 0000                <2> dcnmend db 0,0
  7050                              <2> 
  7051                              <2> 
  7052                              <2> decshow:
  7053 0000527F BE[7852]            <2> 	mov si, dcnm
  7054                              <2> decclear:
  7055 00005282 B030                <2> 	mov al, "0"
  7056 00005284 8804                <2> 	mov [si], al
  7057 00005286 46                  <2> 	inc si
  7058 00005287 81FE[7D52]          <2> 	cmp si, dcnmend
  7059 0000528B 76F5                <2> 	jbe decclear
  7060 0000528D 4E                  <2> 	dec si
  7061 0000528E E81500              <2> 	call convertrm
  7062 00005291 BE[7852]            <2> 	mov si, dcnm
  7063                              <2> dectst:
  7064 00005294 8A04                <2> 	mov al, [si]
  7065 00005296 46                  <2> 	inc si
  7066 00005297 81FE[7D52]          <2> 	cmp si, dcnmend
  7067 0000529B 7704                <2> 	ja dectstend
  7068 0000529D 3C30                <2> 	cmp al, "0"
  7069 0000529F 76F3                <2> 	jbe dectst
  7070                              <2> dectstend:
  7071 000052A1 4E                  <2> 	dec si
  7072 000052A2 E8DAAD              <2> 	call printrm
  7073 000052A5 C3                  <2> 	ret
  7074                              <2> 	
  7075                              <2> 	
  7076                              <2> convertrm:
  7077 000052A6 4E                  <2> 	dec si
  7078 000052A7 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  7079                              <2> cnvrtrm:
  7080 000052A9 89DE                <2> 	mov si, bx
  7081 000052AB 83EE03              <2> 	sub si, 3
  7082 000052AE 46                  <2> ten3rm:	inc si
  7083 000052AF 81F9E803            <2> 	cmp cx, 1000
  7084 000052B3 7208                <2> 	jb ten2rm
  7085 000052B5 81E9E803            <2> 	sub cx, 1000
  7086 000052B9 FE04                <2> 	inc byte [si]
  7087 000052BB EBEC                <2> 	jmp cnvrtrm
  7088 000052BD 46                  <2> ten2rm:	inc si
  7089 000052BE 83F964              <2> 	cmp cx, 100
  7090 000052C1 7207                <2> 	jb ten1rm
  7091 000052C3 83E964              <2> 	sub cx, 100
  7092 000052C6 FE04                <2> 	inc byte [si]
  7093 000052C8 EBDF                <2> 	jmp cnvrtrm
  7094 000052CA 46                  <2> ten1rm:	inc si
  7095 000052CB 83F90A              <2> 	cmp cx, 10
  7096 000052CE 7207                <2> 	jb ten0rm
  7097 000052D0 83E90A              <2> 	sub cx, 10
  7098 000052D3 FE04                <2> 	inc byte [si]
  7099 000052D5 EBD2                <2> 	jmp cnvrtrm
  7100 000052D7 46                  <2> ten0rm:	inc si
  7101 000052D8 83F901              <2> 	cmp cx, 1
  7102 000052DB 7207                <2> 	jb tendnrm
  7103 000052DD 83E901              <2> 	sub cx, 1
  7104 000052E0 FE04                <2> 	inc byte [si]
  7105 000052E2 EBC5                <2> 	jmp cnvrtrm
  7106                              <2> tendnrm:
  7107 000052E4 C3                  <2> 	ret
  7108                              <2> 
  7109                              <2>     char: 		    ;char must be in al
  7110 000052E5 BB0700              <2>        mov bx, 07
  7111 000052E8 B40E                <2> 	   mov ah, 0Eh
  7112 000052EA CD10                <2> 	   int 10h
  7113 000052EC C3                  <2> 	   ret
  7114                              <2> 
  7115 000052ED 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  7116 000052F6 20746865204755493F- <2>
  7117 000052FF 28792F6E2900        <2>
  7118                              <2> 
  7119                              <2> 
  7120                              <2> mcursor:
  7121 00005305 01                  <2> 	db	00000001b
  7122 00005306 81                  <2> 	db	10000001b
  7123 00005307 C1                  <2> 	db	11000001b
  7124 00005308 E1                  <2> 	db	11100001b
  7125 00005309 F1                  <2> 	db	11110001b
  7126 0000530A F9                  <2> 	db	11111001b
  7127 0000530B FD                  <2> 	db	11111101b
  7128 0000530C FF                  <2> 	db	11111111b
  7129 0000530D F9                  <2> 	db	11111001b
  7130 0000530E B9                  <2> 	db	10111001b
  7131 0000530F 39                  <2> 	db	00111001b
  7132 00005310 1C                  <2> 	db	00011100b
  7133 00005311 1C                  <2> 	db	00011100b
  7134 00005312 0E                  <2> 	db	00001110b
  7135 00005313 0E                  <2> 	db	00001110b
  7136 00005314 0C                  <2> 	db	00001100b
  7137                              <2> mcursorend:
  7138                              <2> 
  7139                              <2> 
  7140                              <2> VBEMODEBLOCK:
  7141 00005315 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  7142 00005319 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  7143 0000531B 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  7144 0000531F 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  7145 00005323 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  7146 00005327 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  7147 00005329 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  7148 0000532B 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  7149 0000532F 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  7150 00005333 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  7151 00005337 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  7152 00005415 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  7153                              <2> 
  7154                              <2> VBEMODEINFOBLOCK:
  7155                              <2> ;Mandatory information for all VBE revision
  7156 00005515 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  7157 00005517 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  7158 00005518 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  7159 00005519 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  7160 0000551B 00<rept>            <2> winsize          	times  2 db 0	;Window size
  7161 0000551D 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  7162 0000551F 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  7163 00005521 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  7164 00005525 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  7165                              <2> 
  7166                              <2> ;Mandatory information for VBE 1.2 and above
  7167 00005527 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  7168 00005529 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  7169 0000552B 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  7170 0000552C 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  7171 0000552D 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  7172 0000552E 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  7173 0000552F 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  7174 00005530 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  7175 00005531 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  7176 00005532 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  7177 00005533 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  7178                              <2> 
  7179                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  7180 00005534 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  7181 00005535 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  7182 00005536 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  7183 00005537 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  7184 00005538 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  7185 00005539 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  7186 0000553A 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  7187 0000553B 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  7188 0000553C 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  7189                              <2> 
  7190                              <2> ;Mandatory information for VBE 2.0 and above
  7191 0000553D 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  7192 00005541 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  7193 00005545 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  7194 00005547 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  7195                              <2> 
  7196 00005615 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  7197                              <2> VBEEND:
  7198                              <2> [BITS 32]
  7199                              <1> 	%include "source/drivers/input/mouse.asm"
  7200 00005619 00                  <2> mousedisabled db 0
  7201                              <2> 	
  7202                              <2> 	cursorgui:
  7203 0000561A 803D[9C840000]01    <2> 		cmp byte [mouseon], 1
  7204 00005621 0F8432000000        <2> 		je near mousedaemon
  7205 00005627 803D[0A850000]00    <2> 		cmp byte [guion], 0
  7206 0000562E 0F84F3060000        <2> 		je near entdown
  7207                              <2> 	initmouse:
  7208 00005634 803D[0A850000]00    <2> 		cmp byte [guion], 0
  7209 0000563B 7405                <2> 		je noswmsposinit
  7210 0000563D E810150000          <2> 		call switchmousepos2
  7211                              <2> 	noswmsposinit:
  7212 00005642 E851020000          <2> 	  	call PS2SET
  7213 00005647 E87A020000          <2> 		call ACTMOUS
  7214 0000564C C605[9C840000]01    <2> 		mov byte [mouseon],1
  7215 00005653 E893020000          <2> 		call GETB 	;Get the responce byte of the mouse (like: Hey i am active)
  7216                              <2> 		;call GETB
  7217                              <2> 				;if the bytes are mixed up,
  7218                              <2> 				;remove this line or add another of this line.
  7219                              <2> 	nomouse:
  7220 00005658 C3                  <2> 		ret
  7221                              <2> 		
  7222                              <2> 	mousedaemon:
  7223 00005659 803D[9C840000]01    <2> 		cmp byte [mouseon], 1
  7224 00005660 75D2                <2> 		jne initmouse
  7225 00005662 E464                <2> 		in al, 64h ; Status
  7226 00005664 A820                <2> 		test al, 20h ; PS2-Mouse?
  7227 00005666 0F8502000000        <2> 		jnz near moused
  7228 0000566C F4                  <2> 		hlt
  7229 0000566D C3                  <2> 		ret
  7230                              <2> 	moused:
  7231 0000566E 803D[19560000]01    <2> 		cmp byte [mousedisabled], 1
  7232 00005675 74E1                <2> 		je nomouse
  7233 00005677 E86F020000          <2> 		  call GETB
  7234 0000567C 88C3                <2> 		  mov  bl, al
  7235 0000567E 80E301              <2> 		  and  bl, 1
  7236 00005681 881D[10590000]      <2> 		  mov  BYTE [LBUTTON], bl
  7237 00005687 88C3                <2> 		  mov  bl, al
  7238 00005689 80E302              <2> 		  and  bl, 2
  7239 0000568C D0EB                <2> 		  shr  bl, 1
  7240 0000568E 881D[11590000]      <2> 		  mov  BYTE [RBUTTON], bl
  7241 00005694 88C3                <2> 		  mov  bl, al
  7242 00005696 80E304              <2> 		  and  bl, 4
  7243 00005699 C0EB02              <2> 		  shr  bl, 2
  7244 0000569C 881D[12590000]      <2> 		  mov  BYTE [MBUTTON], bl
  7245 000056A2 E844020000          <2> 		  call GETB
  7246 000056A7 A2[13590000]        <2> 		  mov  BYTE [XCOORD], al
  7247 000056AC E83A020000          <2> 		  call GETB
  7248 000056B1 A2[14590000]        <2> 		  mov  BYTE [YCOORD], al
  7249                              <2> 
  7250                              <2> 	showpixelcursor:
  7251 000056B6 668B15[01580000]    <2> 		mov dx, [mousecursorposition]
  7252 000056BD 668B0D[03580000]    <2> 		mov cx, [mousecursorposition + 2]
  7253 000056C4 668915[FD570000]    <2> 		mov [lastmouseposition], dx
  7254 000056CB 66890D[FF570000]    <2> 		mov [lastmouseposition + 2], cx
  7255 000056D2 A0[13590000]        <2> 		mov al, [XCOORD]
  7256 000056D7 3C80                <2> 		cmp al, 128
  7257 000056D9 7309                <2> 		jae subxcoord
  7258 000056DB 00C0                <2> 		add al, al
  7259 000056DD 30E4                <2> 		xor ah, ah
  7260 000056DF 6601C2              <2> 		add dx, ax
  7261 000056E2 EB0B                <2> 		jmp subxcoorddn
  7262                              <2> 	subxcoord:
  7263 000056E4 00C0                <2> 		add al, al
  7264 000056E6 30DB                <2> 		xor bl, bl
  7265 000056E8 28C3                <2> 		sub bl, al
  7266 000056EA 30FF                <2> 		xor bh, bh
  7267 000056EC 6629DA              <2> 		sub dx, bx
  7268                              <2> 	subxcoorddn:
  7269 000056EF 8A1D[14590000]      <2> 		mov bl, [YCOORD]
  7270 000056F5 30C0                <2> 		xor al, al
  7271 000056F7 28D8                <2> 		sub al, bl
  7272 000056F9 3C80                <2> 		cmp al, 128
  7273 000056FB 7307                <2> 		jae subycoord
  7274 000056FD 30E4                <2> 		xor ah, ah
  7275 000056FF 6601C1              <2> 		add cx, ax
  7276 00005702 EB09                <2> 		jmp subycoorddn
  7277                              <2> 	subycoord:
  7278 00005704 30DB                <2> 		xor bl, bl
  7279 00005706 28C3                <2> 		sub bl, al
  7280 00005708 30FF                <2> 		xor bh, bh
  7281 0000570A 6629D9              <2> 		sub cx, bx
  7282                              <2> 	subycoorddn:
  7283 0000570D 6681FA204E          <2> 		cmp dx, 20000
  7284 00005712 7603                <2> 		jbe nooriginx2
  7285 00005714 6631D2              <2> 		xor dx, dx
  7286                              <2> 	nooriginx2:
  7287 00005717 6681F9204E          <2> 		cmp cx, 20000
  7288 0000571C 7603                <2> 		jbe nooriginy2
  7289 0000571E 6631C9              <2> 		xor cx, cx
  7290                              <2> 	nooriginy2:
  7291 00005721 6683FA00            <2> 		cmp dx, 0
  7292 00005725 7414                <2> 		je nofixxcolumn2
  7293 00005727 663B15[15560000]    <2> 		cmp dx, [resolutionx2]
  7294 0000572E 720B                <2> 		jb nofixxcolumn2
  7295 00005730 668B15[15560000]    <2> 		mov dx, [resolutionx2]
  7296 00005737 6683EA02            <2> 		sub dx, 2
  7297                              <2> 	nofixxcolumn2:
  7298 0000573B 6683F900            <2> 		cmp cx, 0
  7299 0000573F 7414                <2> 		je nofixyrow2
  7300 00005741 663B0D[29550000]    <2> 		cmp cx, [resolutiony]
  7301 00005748 720B                <2> 		jb nofixyrow2
  7302 0000574A 668B0D[29550000]    <2> 		mov cx, [resolutiony]
  7303 00005751 6683E901            <2> 		sub cx, 1
  7304                              <2> 	nofixyrow2:
  7305 00005755 668915[01580000]    <2> 		mov [mousecursorposition], dx
  7306 0000575C 66890D[03580000]    <2> 		mov [mousecursorposition + 2], cx
  7307 00005763 803D[0A850000]00    <2> 		cmp byte [guion], 0
  7308 0000576A 0F8495000000        <2> 		je near termmouse
  7309 00005770 E882130000          <2> 		call switchmousepos ;use dragging code to ensure proper icon drag
  7310 00005775 803D[10590000]01    <2> 		cmp byte [LBUTTON], 1
  7311 0000577C 0F8408250000        <2> 		je near clickicon
  7312 00005782 803D[11590000]01    <2> 		cmp byte [RBUTTON], 1
  7313 00005789 0F84FB240000        <2> 		je near clickicon
  7314 0000578F A0[777C0000]        <2> 		mov al, [pbutton]
  7315 00005794 C705[7A7C0000]0000- <2> 		mov dword [dragging], 0
  7316 0000579C 0000                <2>
  7317 0000579E 3C00                <2> 		cmp al, 0
  7318 000057A0 740F                <2> 		je nopreviousbutton
  7319 000057A2 E8C2120000          <2> 		call clearmousecursor
  7320 000057A7 E85E160000          <2> 		call reloadallgraphics
  7321                              <2> 	windowtermcopyend:
  7322 000057AC E8A1130000          <2> 		call switchmousepos2
  7323                              <2> 	nopreviousbutton:
  7324 000057B1 30C0                <2> 		xor al, al
  7325 000057B3 A2[777C0000]        <2> 		mov [pbutton], al
  7326 000057B8 A2[A3810000]        <2> 		mov [windrag], al
  7327 000057BD A0[10590000]        <2> 		mov al, [LBUTTON]
  7328 000057C2 A2[787C0000]        <2> 		mov [pLBUTTON], al
  7329 000057C7 A0[11590000]        <2> 		mov al, [RBUTTON]
  7330 000057CC A2[797C0000]        <2> 		mov [pRBUTTON], al
  7331 000057D1 31D2                <2> 		xor edx, edx
  7332 000057D3 668B15[01580000]    <2> 		mov dx, [mousecursorposition]
  7333 000057DA 668B0D[03580000]    <2> 		mov cx, [mousecursorposition + 2]
  7334 000057E1 66BB18C7            <2> 		mov bx, 1100011100011000b
  7335 000057E5 66B80100            <2> 		mov ax, 1
  7336 000057E9 C605[747C0000]01    <2> 		mov byte [showcursorfonton], 1
  7337 000057F0 E8D51C0000          <2> 		call showfontvesa
  7338 000057F5 C605[747C0000]00    <2> 		mov byte [showcursorfonton], 0
  7339 000057FC C3                  <2> 		ret
  7340                              <2> 
  7341 000057FD 00000000            <2> lastmouseposition dw 0,0
  7342 00005801 00000000            <2> mousecursorposition dw 0,0	
  7343                              <2> 
  7344                              <2> termmouse:
  7345 00005805 BE[9CDF2B00]        <2> 		mov esi, videobuf
  7346 0000580A 31D2                <2> 		xor edx, edx
  7347 0000580C 668B15[FD570000]    <2> 		mov dx, [lastmouseposition]
  7348 00005813 668B0D[FF570000]    <2> 		mov cx, [lastmouseposition + 2]
  7349 0000581A 66A1[96580000]      <2> 		mov ax, [cursorcache]
  7350 00005820 6683F800            <2> 		cmp ax, 0
  7351 00005824 7424                <2> 		je nocopycursorcache
  7352 00005826 66C1E104            <2> 		shl cx, 4
  7353 0000582A 66C1E203            <2> 		shl dx, 3
  7354 0000582E 01D6                <2> 		add esi, edx
  7355 00005830 6631D2              <2> 		xor dx, dx
  7356 00005833 8A15[55250000]      <2> 		mov dl, [charxy]
  7357 00005839 6641                <2> 		inc cx
  7358                              <2> termmousecplp1:
  7359 0000583B 01D6                <2> 		add esi, edx
  7360 0000583D 6649                <2> 		dec cx
  7361 0000583F 6683F900            <2> 		cmp cx, 0
  7362 00005843 75F6                <2> 		jne termmousecplp1
  7363 00005845 29D6                <2> 		sub esi, edx
  7364 00005847 668906              <2> 		mov [esi], ax
  7365                              <2> nocopycursorcache:
  7366 0000584A BE[9CDF2B00]        <2> 		mov esi, videobuf
  7367 0000584F 31D2                <2> 		xor edx, edx
  7368 00005851 668B15[01580000]    <2> 		mov dx, [mousecursorposition]
  7369 00005858 668B0D[03580000]    <2> 		mov cx, [mousecursorposition + 2]
  7370 0000585F 66C1E104            <2> 		shl cx, 4
  7371 00005863 66C1E203            <2> 		shl dx, 3
  7372 00005867 01D6                <2> 		add esi, edx
  7373 00005869 6631D2              <2> 		xor dx, dx
  7374 0000586C 8A15[55250000]      <2> 		mov dl, [charxy]
  7375 00005872 6641                <2> 		inc cx
  7376                              <2> termmousecplp2:
  7377 00005874 01D6                <2> 		add esi, edx
  7378 00005876 6649                <2> 		dec cx
  7379 00005878 6683F900            <2> 		cmp cx, 0
  7380 0000587C 75F6                <2> 		jne termmousecplp2
  7381 0000587E 29D6                <2> 		sub esi, edx
  7382 00005880 668B06              <2> 		mov ax, [esi]
  7383 00005883 66A3[96580000]      <2> 		mov [cursorcache], ax
  7384 00005889 B080                <2> 		mov al, 128
  7385 0000588B B407                <2> 		mov ah, 7
  7386 0000588D 668906              <2> 		mov [esi], ax
  7387 00005890 E8BACFFFFF          <2> 		call termcopy
  7388 00005895 C3                  <2> 		ret
  7389 00005896 0000                <2> cursorcache db 0,0
  7390                              <2> 
  7391                              <2> PS2SET:
  7392 00005898 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7393 0000589A E664                <2>   out  0x64, al		; write to keyboardcontroller
  7394 0000589C E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7395 000058A1 C3                  <2> ret
  7396                              <2> 
  7397                              <2> CHKPRT:
  7398 000058A2 66B96400            <2>   mov  cx, 100
  7399                              <2>  .again:
  7400 000058A6 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7401 000058A8 A802                <2>   test al, 2		; Check if input buffer is empty
  7402 000058AA 7402                <2>   je .go
  7403 000058AC E2F8                <2>   loop .again
  7404                              <2>  .go:
  7405 000058AE C3                  <2> ret
  7406                              <2> 
  7407                              <2> WMOUS:
  7408 000058AF B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7409 000058B1 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7410 000058B3 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7411 000058B8 C3                  <2> ret
  7412                              <2> 
  7413                              <2> MBUFFUL:
  7414 000058B9 66B96400            <2>   mov cx, 100
  7415                              <2>  .mn:
  7416 000058BD E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7417 000058BF A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7418 000058C1 7402                <2>   jz  .mnn
  7419 000058C3 E2F8                <2>   loop .mn
  7420                              <2>  .mnn:
  7421 000058C5 C3                  <2> ret
  7422                              <2> 
  7423                              <2> 
  7424                              <2> ACTMOUS:
  7425 000058C6 E8E4FFFFFF          <2>   call WMOUS
  7426 000058CB B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7427 000058CD E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7428 000058CF E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7429 000058D4 E801000000          <2>   call CHKMOUS		; check if a byte is available
  7430 000058D9 C3                  <2> ret
  7431                              <2> 
  7432                              <2> CHKMOUS:
  7433 000058DA B300                <2>   mov  bl, 0
  7434 000058DC 66B96400            <2>   mov cx, 100
  7435                              <2>  .vrd:
  7436 000058E0 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7437 000058E2 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7438 000058E4 7504                <2>   jnz .yy
  7439 000058E6 E2F8                <2>   loop .vrd
  7440 000058E8 B301                <2>   mov  bl, 1
  7441                              <2>  .yy:
  7442 000058EA C3                  <2> ret
  7443                              <2> 
  7444                              <2> GETB:
  7445                              <2>  .cagain:
  7446 000058EB E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7447 000058F0 08DB                <2>   or bl, bl
  7448 000058F2 75F7                <2>   jnz .cagain
  7449 000058F4 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7450 000058F6 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7451 000058F8 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7452 000058FD 6631C0              <2>   xor  ax, ax
  7453 00005900 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7454 00005902 88C2                <2>   mov  dl, al
  7455 00005904 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7456 00005906 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7457 00005908 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7458 0000590D 88D0                <2>   mov  al, dl
  7459 0000590F C3                  <2> ret
  7460                              <2> 
  7461 00005910 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7462 00005911 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7463 00005912 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7464 00005913 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7465 00005914 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7466                              <1> %endif
  7467                              <1> %include "source/drivers/sound/pcspkr.asm"
  7468                              <2> ;PC Speaker Drivers
  7469                              <2> PCSpeakerRAW:
  7470 00005915 60                  <2> 	pusha
  7471                              <2> nosoundrep:
  7472 00005916 8B35[5D020000]      <2> 	mov esi, [soundpos]
  7473 0000591C 31C9                <2> 	xor ecx, ecx
  7474 0000591E 668B0D[5B020000]    <2> 	mov cx, [soundrepititions]
  7475 00005925 6683F900            <2> 	cmp cx, 0
  7476 00005929 0F8540000000        <2> 	jne near donesetpitch
  7477 0000592F 668B0E              <2> 	mov cx, [esi]
  7478 00005932 668B5E02            <2> 	mov bx, [esi + 2]
  7479 00005936 66890D[5B020000]    <2> 	mov [soundrepititions], cx
  7480 0000593D 83C604              <2> 	add esi, 4
  7481 00005940 8935[5D020000]      <2> 	mov [soundpos], esi
  7482 00005946 3B35[61020000]      <2> 	cmp esi, [soundendpos]
  7483 0000594C 7730                <2> 	ja stopsound
  7484 0000594E 66833D[5B020000]00  <2> 	cmp word [soundrepititions], 0
  7485 00005956 74BE                <2> 	je nosoundrep
  7486 00005958 6683FB00            <2> 	cmp bx, 0
  7487 0000595C 740C                <2> 	je nosoundplay
  7488 0000595E E83D000000          <2> 	call setpitch
  7489 00005963 E846000000          <2> 	call startsound
  7490 00005968 EB05                <2> 	jmp donesetpitch
  7491                              <2> nosoundplay:
  7492 0000596A E846000000          <2> 	call killsound
  7493                              <2> donesetpitch:
  7494 0000596F 6649                <2> 	dec cx
  7495 00005971 66890D[5B020000]    <2> 	mov [soundrepititions], cx
  7496 00005978 61                  <2> 	popa
  7497 00005979 E91BA9FFFF          <2> 	jmp timerinterrupt
  7498                              <2> stopsound:
  7499 0000597E 31C0                <2> 	xor eax, eax
  7500 00005980 66A3[5B020000]      <2> 	mov [soundrepititions], ax
  7501 00005986 A2[5A020000]        <2> 	mov [soundon], al
  7502 0000598B A3[5D020000]        <2> 	mov [soundpos], eax
  7503 00005990 A3[61020000]        <2> 	mov [soundendpos], eax
  7504 00005995 E81B000000          <2> 	call killsound
  7505 0000599A 61                  <2> 	popa
  7506 0000599B E9F9A8FFFF          <2> 	jmp timerinterrupt
  7507                              <2> 
  7508                              <2> 
  7509                              <2> setpitch:
  7510 000059A0 B0B6                <2> 	mov al, 0xB6
  7511 000059A2 E643                <2> 	out 0x43, al
  7512 000059A4 6689D8              <2> 	mov ax, bx
  7513 000059A7 E642                <2> 	out 0x42, al
  7514 000059A9 88E0                <2> 	mov al, ah
  7515 000059AB E642                <2> 	out 0x42, al
  7516 000059AD C3                  <2> 	ret
  7517                              <2> startsound:
  7518 000059AE E461                <2> 	in al, 0x61
  7519 000059B0 0C03                <2> 	or al, 3
  7520 000059B2 E661                <2> 	out 0x61, al
  7521 000059B4 C3                  <2> 	ret
  7522                              <2> killsound:
  7523 000059B5 E461                <2> 	in al, 0x61
  7524 000059B7 24FC                <2> 	and al, 0xFC
  7525 000059B9 E661                <2> 	out 0x61, al
  7526 000059BB C3                  <2> 	ret
  7527                              <2> 	
  7528                              <1> %ifdef sound.included
  7529                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7530                              <2> ;Sound Blaster Drivers
  7531                              <2> sblaster:
  7532                              <2> .init:
  7533 000059BC E8D5010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  7534 000059C1 A2[F05B0000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  7535 000059C6 3C00                <2> 		cmp al, 0
  7536 000059C8 7418                <2> 		je .noinit
  7537 000059CA B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  7538 000059CC E8F9010000          <2> 		call WriteDSP
  7539 000059D1 B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  7540 000059D3 E8AF010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  7541 000059D8 BE[E3590000]        <2> 		mov esi, .initmsg
  7542 000059DD E82DC3FFFF          <2> 		call print
  7543                              <2> .noinit:
  7544 000059E2 C3                  <2> 		ret
  7545 000059E3 5342313620496E6974- <2> .initmsg db "SB16 Initialized.",10,0
  7546 000059EC 69616C697A65642E0A- <2>
  7547 000059F5 00                  <2>
  7548                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  7549 000059F6 833D[DB5B0000]00    <2> 	cmp dword [Length0], 0
  7550 000059FD 0F845F000000        <2> 	je near .done
  7551 00005A03 FF0D[DB5B0000]      <2> 	dec dword [Length0]
  7552 00005A09 EB08                <2> 	jmp .notodd
  7553                              <2> .oddlength:
  7554 00005A0B 31C9                <2> 	xor ecx, ecx
  7555 00005A0D 880D[DA5B0000]      <2> 	mov [OddLength], cl
  7556                              <2> .notodd:
  7557 00005A13 8B35[E15B0000]      <2> 	mov esi, [NextMemLoc]
  7558 00005A19 31C9                <2> 	xor ecx, ecx
  7559 00005A1B 668B0D[DF5B0000]    <2> 	mov cx, [Length1]
  7560 00005A22 D1E9                <2> 	shr ecx, 1
  7561 00005A24 6641                <2> 	inc cx
  7562 00005A26 31DB                <2> 	xor ebx, ebx
  7563 00005A28 668B1D[E95B0000]    <2> 	mov bx, [SegLoc]
  7564 00005A2F 6601CB              <2> 	add bx, cx
  7565 00005A32 66891D[E95B0000]    <2> 	mov [SegLoc], bx
  7566 00005A39 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  7567 00005A3F 8935[E55B0000]      <2> 	mov [MemLoc], esi
  7568 00005A45 89C8                <2> 	mov eax, ecx
  7569 00005A47 01F0                <2> 	add eax, esi
  7570 00005A49 A3[E15B0000]        <2> 	mov [NextMemLoc], eax
  7571 00005A4E E833000000          <2> 	call DMACopy
  7572                              <2> 	;call DMAPlay
  7573 00005A53 E8DA000000          <2> 	call PlayDSP
  7574 00005A58 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7575 00005A5C EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7576 00005A5D E9EFA8FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  7577                              <2> .done:
  7578 00005A62 803D[DA5B0000]01    <2> 	cmp byte [OddLength], 1
  7579 00005A69 74A0                <2> 	je .oddlength
  7580 00005A6B 31C0                <2> 	xor eax, eax
  7581 00005A6D 66A3[DF5B0000]      <2> 	mov [Length1], ax
  7582 00005A73 66B8D000            <2> 	mov ax, 0xD0
  7583 00005A77 E84E010000          <2> 	call WriteDSP
  7584 00005A7C 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7585 00005A80 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7586 00005A81 E9CBA8FFFF          <2> 	jmp handled2
  7587                              <2> 	
  7588                              <2> DMACopy:
  7589 00005A86 66B80800            <2> 		mov ax, LINEAR_SEL
  7590 00005A8A 8EE0                <2> 		mov fs, ax
  7591 00005A8C C1E902              <2> 		shr ecx, 2
  7592                              <2> .loop:
  7593 00005A8F 8B06                <2> 		mov eax, [esi]
  7594 00005A91 648903              <2> 		mov [fs:ebx], eax
  7595 00005A94 83C604              <2> 		add esi, 4
  7596 00005A97 83C304              <2> 		add ebx, 4
  7597 00005A9A E2F3                <2> 		loop .loop
  7598 00005A9C 66B83000            <2> 		mov ax, NEW_DATA_SEL
  7599 00005AA0 8EE0                <2> 		mov fs, ax
  7600 00005AA2 C3                  <2> 		ret
  7601                              <2> 		
  7602                              <2> 
  7603                              <2> DMAPlay:    ;uses eax ebx edx
  7604 00005AA3 C605[EB5B0000]00    <2> 		mov	byte [Page1],00h
  7605                              <2> 
  7606 00005AAA B005                <2> 		mov	al,(Channel+4)
  7607 00005AAC 66BA0A00            <2> 		mov	dx,0Ah
  7608 00005AB0 EE                  <2> 		out	dx,al
  7609 00005AB1 30C0                <2> 		xor	al,al
  7610 00005AB3 66BA0C00            <2> 		mov	dx,0Ch
  7611 00005AB7 EE                  <2> 		out	dx,al
  7612 00005AB8 B059                <2> 		mov	al,ModeReg
  7613 00005ABA 66BA0B00            <2> 		mov	dx,0Bh
  7614 00005ABE EE                  <2> 		out	dx,al
  7615 00005ABF B800000800          <2> 		mov	eax,0x80000
  7616 00005AC4 66BA0200            <2> 		mov	dx,AddPort
  7617 00005AC8 EE                  <2> 		out	dx,al
  7618 00005AC9 86C4                <2> 		xchg al,ah
  7619 00005ACB EE                  <2> 		out	dx,al
  7620 00005ACC B800000800          <2> 		mov	eax,0x80000
  7621 00005AD1 89C2                <2> 		mov	edx,eax
  7622 00005AD3 2500000100          <2> 		and	eax,65536
  7623 00005AD8 7406                <2> 		jz	MemLocN1
  7624 00005ADA FE05[EB5B0000]      <2> 		inc	byte [Page1]
  7625                              <2> MemLocN1:
  7626 00005AE0 89D0                <2> 		mov	eax,edx
  7627 00005AE2 2500000200          <2> 		and	eax,131072
  7628 00005AE7 7407                <2> 		jz	MemLocN2
  7629 00005AE9 8005[EB5B0000]02    <2> 		add	byte [Page1],02
  7630                              <2> MemLocN2:
  7631 00005AF0 89D0                <2> 		mov	eax,edx
  7632 00005AF2 2500000400          <2> 		and	eax,262144
  7633 00005AF7 7407                <2> 		jz	MemLocN3
  7634 00005AF9 8005[EB5B0000]04    <2> 		add	byte [Page1],04
  7635                              <2> MemLocN3:
  7636 00005B00 89D0                <2> 		mov	eax,edx
  7637 00005B02 2500000800          <2> 		and	eax,524288
  7638 00005B07 7407                <2> 		jz	MemLocN4
  7639 00005B09 8005[EB5B0000]08    <2> 		add	byte [Page1],08
  7640                              <2> MemLocN4:
  7641 00005B10 66BA8300            <2> 		mov	dx,PgPort
  7642 00005B14 A0[EB5B0000]        <2> 		mov	al,[Page1]
  7643 00005B19 EE                  <2> 		out	dx,al
  7644 00005B1A 66BA0300            <2> 		mov	dx,LenPort
  7645 00005B1E 66A1[DF5B0000]      <2> 		mov	ax,[Length1]
  7646 00005B24 6648                <2> 		dec ax
  7647 00005B26 EE                  <2> 		out	dx,al
  7648 00005B27 86C4                <2> 		xchg al,ah
  7649 00005B29 EE                  <2> 		out	dx,al
  7650 00005B2A 66BA0A00            <2> 		mov	dx,0Ah
  7651 00005B2E B001                <2> 		mov	al,Channel
  7652 00005B30 EE                  <2> 		out	dx,al
  7653 00005B31 C3                  <2> 		ret
  7654                              <2> 		
  7655                              <2> PlayDSP:
  7656 00005B32 B040                <2> 		mov	al,40h
  7657 00005B34 E891000000          <2> 		call WriteDSP
  7658 00005B39 31D2                <2> 		xor	edx,edx
  7659 00005B3B B840420F00          <2> 		mov	eax,1000000
  7660 00005B40 8B1D[EC5B0000]      <2> 		mov	ebx,[Freq]
  7661 00005B46 803D[D95B0000]00    <2> 		cmp byte [Stereo], 0
  7662 00005B4D 7402                <2> 		je .nost
  7663 00005B4F D1E3                <2> 		shl ebx, 1
  7664                              <2> .nost:
  7665 00005B51 F7F3                <2> 		div	ebx
  7666 00005B53 89C3                <2> 		mov	ebx,eax
  7667 00005B55 B800010000          <2> 		mov	eax,256
  7668 00005B5A 29D8                <2> 		sub	eax,ebx
  7669 00005B5C E869000000          <2> 		call WriteDSP
  7670 00005B61 B014                <2> 		mov	al,14h	;write the mode
  7671 00005B63 803D[D95B0000]00    <2> 		cmp byte [Stereo], 0
  7672 00005B6A 7400                <2> 		je .nost2
  7673                              <2> 		
  7674                              <2> .nost2:
  7675 00005B6C E859000000          <2> 		call WriteDSP
  7676 00005B71 66A1[DF5B0000]      <2> 		mov	ax,[Length1]
  7677 00005B77 66D1E8              <2> 		shr ax, 1
  7678 00005B7A E84B000000          <2> 		call WriteDSP
  7679 00005B7F 86C4                <2> 		xchg al,ah
  7680 00005B81 E844000000          <2> 		call WriteDSP
  7681 00005B86 C3                  <2> 		ret
  7682                              <2> 
  7683                              <2> MstrVol:    ;uses ax dx
  7684 00005B87 6650                <2> 	   push ax
  7685 00005B89 66BA2402            <2> 	   mov	dx,(BasePort+4)
  7686 00005B8D B022                <2> 	   mov	al,22h
  7687 00005B8F EE                  <2> 	   out	dx,al
  7688 00005B90 6658                <2> 	   pop	ax
  7689 00005B92 6642                <2> 	   inc	dx
  7690 00005B94 EE                  <2> 	   out	dx,al
  7691 00005B95 C3                  <2> 	   ret
  7692                              <2> 	   
  7693                              <2> ResetDSP:   ; uses cx dx
  7694 00005B96 66BA2602            <2> 			mov	dx,(BasePort+6)
  7695 00005B9A B001                <2> 			mov	al,01
  7696 00005B9C EE                  <2> 			out	dx,al
  7697 00005B9D 66B93200            <2> 			mov	cx,50
  7698 00005BA1 EC                  <2> WaitIt1:	in	al,dx
  7699 00005BA2 E2FD                <2> 			loop WaitIt1
  7700 00005BA4 30C0                <2> 			xor	al,al
  7701 00005BA6 EE                  <2> 			out	dx,al
  7702 00005BA7 66B93200            <2> 			mov	cx,50
  7703 00005BAB EC                  <2> WaitIt2:	in	al,dx
  7704 00005BAC E2FD                <2> 			loop WaitIt2
  7705 00005BAE B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  7706 00005BB0 66BA2E02            <2> 			mov	dx,(BasePort+14)
  7707 00005BB4 EC                  <2> 			in	al,dx
  7708 00005BB5 2480                <2> 			and	al,80h
  7709 00005BB7 3C80                <2> 			cmp	al,80h
  7710 00005BB9 750C                <2> 			jne	ResetErr
  7711 00005BBB 66BA2A02            <2> 			mov	dx,(BasePort+10)
  7712 00005BBF EC                  <2> 			in	al,dx
  7713 00005BC0 3CAA                <2> 			cmp	al,0AAh
  7714 00005BC2 7503                <2> 			jne	ResetErr
  7715 00005BC4 B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  7716 00005BC6 C3                  <2> 			ret
  7717 00005BC7 30C0                <2> ResetErr:	xor al, al
  7718 00005BC9 C3                  <2> 			ret
  7719                              <2> 
  7720                              <2> WriteDSP:   ;uses ax dx
  7721 00005BCA 6650                <2> 		push ax
  7722 00005BCC 66BA2C02            <2> 		mov	dx,(BasePort+12)
  7723 00005BD0 EC                  <2> WaitIt:	in	al,dx
  7724 00005BD1 2480                <2> 		and	al,80h
  7725 00005BD3 75FB                <2> 		jnz	WaitIt
  7726 00005BD5 6658                <2> 		pop	ax
  7727 00005BD7 EE                  <2> 		out	dx,al
  7728 00005BD8 C3                  <2> 		ret
  7729                              <2> 
  7730 00005BD9 00                  <2> Stereo db 0
  7731 00005BDA 00                  <2> OddLength db 0
  7732 00005BDB 00000000            <2> Length0 dd	0
  7733 00005BDF 0000                <2> Length1	dw  0
  7734 00005BE1 00000000            <2> NextMemLoc dd 0
  7735 00005BE5 00000000            <2> MemLoc	dd  0
  7736 00005BE9 0000                <2> SegLoc  dw 0
  7737 00005BEB 00                  <2> Page1	db  0
  7738 00005BEC 00000000            <2> Freq	dd	0
  7739                              <2> PgPort	equ 83h
  7740                              <2> AddPort	equ 02h
  7741                              <2> LenPort	equ 03h
  7742                              <2> ModeReg	equ 59h
  7743                              <2> Channel	equ 01h
  7744                              <2> BasePort	equ 220h
  7745 00005BF0 00                  <2> SoundBlaster	db 0
  7746                              <1> %endif
  7747                              <1> %ifdef io.serial
  7748                              <1> 	%include "source/drivers/input/serial.asm"
  7749                              <1> %else
  7750                              <1> 	%include "source/drivers/input/keyboard.asm"
  7751 00005BF1 00                  <2> specialkey db 0
  7752                              <2> ;charregion db 0
  7753                              <2> waitforinput:		;this is basically the idle process
  7754                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  7755                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  7756 00005BF2 6631C0              <2> 	xor ax, ax
  7757 00005BF5 A0[37670000]        <2> 	mov al, [threadson]
  7758 00005BFA 8825[37670000]      <2> 	mov [threadson], ah
  7759 00005C00 9C                  <2> 	pushf
  7760 00005C01 FB                  <2> 	sti
  7761 00005C02 F4                  <2> 	hlt
  7762 00005C03 9D                  <2> 	popf
  7763 00005C04 A2[37670000]        <2> 	mov [threadson], al
  7764 00005C09 66833D[4F230000]00  <2> 	cmp word [trans], 0
  7765 00005C11 7401                <2> 	je getkey
  7766 00005C13 C3                  <2> 	ret
  7767                              <2> getkey:
  7768 00005C14 31C0                <2> 		xor eax, eax
  7769 00005C16 A2[F15B0000]        <2> 		mov [specialkey], al
  7770 00005C1B A3[4B230000]        <2> 		mov [lastkey], eax
  7771 00005C20 E464                <2> 		in al, 64h ; Status
  7772                              <2> 	%ifdef gui.included
  7773 00005C22 A820                <2> 		test al, 20h ; PS2-Mouse?
  7774 00005C24 0F8544FAFFFF        <2> 		jnz near moused
  7775                              <2> 	%endif
  7776 00005C2A A801                <2> 		test al, 1 
  7777 00005C2C 74C4                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7778                              <2> 	calckey:
  7779 00005C2E E460                <2> 		in al, 60h
  7780 00005C30 30E4                <2> 		xor ah, ah
  7781 00005C32 6689C3              <2> 		mov bx, ax
  7782 00005C35 66A3[4D230000]      <2> 		mov [lastkey + 2], ax
  7783 00005C3B BF[B85D0000]        <2> 		mov edi, scancode
  7784                              <2> 	searchscan: 
  7785 00005C40 80FB3A              <2> 		cmp bl, 3Ah
  7786 00005C43 7314                <2> 		jae scanother
  7787 00005C45 C1E004              <2> 		shl eax, 4
  7788 00005C48 01C7                <2> 		add edi, eax
  7789 00005C4A 668B07              <2> 		mov ax, [edi]
  7790 00005C4D 6683F800            <2> 		cmp ax, 0
  7791 00005C51 7406                <2> 		je scanother
  7792 00005C53 E9D0000000          <2> 		jmp scanfound
  7793 00005C58 00                  <2> uppercase db 0
  7794                              <2> scanother:
  7795 00005C59 6631C0              <2> 		xor ax, ax
  7796 00005C5C 66A3[4B230000]      <2> 		mov [lastkey], ax
  7797 00005C62 80FBE0              <2> 		cmp bl, 0E0h
  7798 00005C65 0F8477000000        <2> 		je near getkeyspecial
  7799 00005C6B 803D[F15B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7800 00005C72 7525                <2> 		jne nospecialkey
  7801 00005C74 80FB38              <2> 		cmp bl, 38h
  7802 00005C77 0F849A000000        <2> 		je near alton
  7803 00005C7D 80FBB8              <2> 		cmp bl, 0B8h
  7804 00005C80 0F8499000000        <2> 		je near altoff
  7805 00005C86 80FB1D              <2> 		cmp bl, 1Dh
  7806 00005C89 0F8478000000        <2> 		je near ctron
  7807 00005C8F 80FB9D              <2> 		cmp bl, 9Dh
  7808 00005C92 0F8477000000        <2> 		je near ctroff
  7809 00005C98 C3                  <2> 		ret
  7810                              <2> nospecialkey:
  7811 00005C99 80FB2A              <2> 		cmp bl, 2Ah
  7812 00005C9C 0F8455000000        <2> 		je near shifton
  7813 00005CA2 80FB36              <2> 		cmp bl, 36h
  7814 00005CA5 0F844C000000        <2> 		je near shifton
  7815 00005CAB 80FB1C              <2> 		cmp bl, 1Ch
  7816 00005CAE 0F8473000000        <2> 		je near entdown
  7817 00005CB4 80FBAA              <2> 		cmp bl, 0AAh
  7818 00005CB7 0F8442000000        <2> 		je near shiftoff
  7819 00005CBD 80FBB6              <2> 		cmp bl, 0B6h
  7820 00005CC0 0F8439000000        <2> 		je near shiftoff
  7821 00005CC6 80FB3A              <2> 		cmp bl, 3Ah
  7822 00005CC9 0F8495000000        <2> 		je near capslock
  7823 00005CCF 80FB45              <2> 		cmp bl, 0x45
  7824 00005CD2 0F849D000000        <2> 		je near numlock
  7825 00005CD8 80FB46              <2> 		cmp bl, 0x46
  7826 00005CDB 0F84AC000000        <2> 		je near scrolllock
  7827 00005CE1 C3                  <2> 		ret
  7828                              <2> 	getkeyspecial:
  7829 00005CE2 C605[F15B0000]E0    <2> 		mov byte [specialkey], 0xE0
  7830 00005CE9 E940FFFFFF          <2> 		jmp calckey
  7831                              <2> 	shift:
  7832 00005CEE A0[585C0000]        <2> 		mov al, [uppercase]
  7833 00005CF3 3C01                <2> 		cmp al, 1
  7834 00005CF5 7308                <2> 		jae shiftoff
  7835                              <2> 	shifton:
  7836 00005CF7 C605[585C0000]01    <2> 		mov byte [uppercase], 1
  7837 00005CFE C3                  <2> 		ret
  7838                              <2> 	shiftoff:
  7839 00005CFF C605[585C0000]00    <2> 		mov byte [uppercase], 0
  7840 00005D06 C3                  <2> 		ret
  7841                              <2> 	ctron:
  7842 00005D07 C605[635D0000]01    <2> 		mov byte [ctrkey], 1
  7843 00005D0E C3                  <2> 		ret
  7844                              <2> 	ctroff:
  7845 00005D0F C605[635D0000]00    <2> 		mov byte [ctrkey], 0
  7846 00005D16 C3                  <2> 		ret
  7847                              <2> 	alton:
  7848 00005D17 C605[625D0000]01    <2> 		mov byte [altkey], 1
  7849 00005D1E C3                  <2> 		ret
  7850                              <2> 	altoff:
  7851 00005D1F C605[625D0000]00    <2> 		mov byte [altkey], 0
  7852 00005D26 C3                  <2> 		ret
  7853                              <2> 	entdown:
  7854 00005D27 C3                  <2> 		ret
  7855                              <2> scanfound:
  7856 00005D28 83C708              <2> 		add edi, 8
  7857 00005D2B 803D[635D0000]01    <2> 		cmp byte [ctrkey], 1
  7858 00005D32 7303                <2> 		jae ctrlin
  7859 00005D34 83EF08              <2> 		sub edi, 8
  7860                              <2> 	ctrlin:
  7861 00005D37 83C704              <2> 		add edi, 4
  7862 00005D3A 803D[625D0000]01    <2> 		cmp byte [altkey], 1
  7863 00005D41 7303                <2> 		jae altin
  7864 00005D43 83EF04              <2> 		sub edi, 4
  7865                              <2> 	altin:
  7866 00005D46 83C702              <2> 		add edi, 2
  7867 00005D49 803D[585C0000]01    <2> 		cmp byte [uppercase], 1
  7868 00005D50 7303                <2> 		jae uppercaseon
  7869 00005D52 83EF02              <2> 		sub edi, 2
  7870                              <2> 	uppercaseon:
  7871 00005D55 668B07              <2> 		mov ax,[edi]
  7872 00005D58 66A3[4B230000]      <2> 		mov [lastkey], ax
  7873 00005D5E C3                  <2> 		ret
  7874                              <2> 		
  7875 00005D5F 00                  <2> keyboardstatus db 0
  7876 00005D60 00                  <2> numlockstatus db 0
  7877 00005D61 00                  <2> scrolllockstatus db 0
  7878 00005D62 00                  <2> altkey db 0
  7879 00005D63 00                  <2> ctrkey db 0
  7880                              <2> 	capslock:
  7881 00005D64 8035[5F5D0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7882 00005D6B E835000000          <2> 		call updatekblights
  7883 00005D70 E979FFFFFF          <2> 		jmp shift
  7884                              <2> 		
  7885                              <2> 	numlock:
  7886 00005D75 8035[5F5D0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7887 00005D7C 8035[605D0000]01    <2> 		xor byte [numlockstatus], 1
  7888 00005D83 E81D000000          <2> 		call updatekblights
  7889 00005D88 E987FEFFFF          <2> 		jmp getkey
  7890                              <2> 	
  7891                              <2> 	scrolllock:
  7892 00005D8D 8035[5F5D0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7893 00005D94 8035[615D0000]01    <2> 		xor byte [scrolllockstatus], 1
  7894 00005D9B E805000000          <2> 		call updatekblights
  7895 00005DA0 E96FFEFFFF          <2> 		jmp getkey
  7896                              <2> 		
  7897                              <2> 	updatekblights:
  7898 00005DA5 B0ED                <2> 		mov al, 0xED
  7899 00005DA7 66BA6000            <2> 		mov dx, 0x60
  7900 00005DAB EE                  <2> 		out dx, al
  7901                              <2> 	chkkbdack:
  7902 00005DAC EC                  <2> 		in al, dx
  7903 00005DAD 3CFA                <2> 		cmp al, 0xFA
  7904 00005DAF 75FB                <2> 		jne chkkbdack
  7905 00005DB1 A0[5F5D0000]        <2> 		mov al, [keyboardstatus]
  7906 00005DB6 EE                  <2> 		out dx, al
  7907 00005DB7 C3                  <2> 		ret
  7908                              <2> 		
  7909                              <2> scancode:
  7910                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  7911 00005DB8 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7912 00005DC1 00000000000000      <2>
  7913 00005DC8 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7914 00005DD1 00000000000000      <2>
  7915 00005DD8 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  7916 00005DE1 00000000000000      <2>
  7917 00005DE8 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  7918 00005DF1 00000000000000      <2>
  7919 00005DF8 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  7920 00005E01 00000000000000      <2>
  7921 00005E08 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  7922 00005E11 00000000000000      <2>
  7923 00005E18 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  7924 00005E21 00000000000000      <2>
  7925 00005E28 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  7926 00005E31 00000000000000      <2>
  7927 00005E38 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  7928 00005E41 00000000000000      <2>
  7929 00005E48 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  7930 00005E51 00000000000000      <2>
  7931 00005E58 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  7932 00005E61 00000000000000      <2>
  7933 00005E68 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  7934 00005E71 00000000000000      <2>
  7935 00005E78 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  7936 00005E81 00000000000000      <2>
  7937 00005E88 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  7938 00005E91 00000000000000      <2>
  7939 00005E98 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  7940 00005EA1 00000000000000      <2>
  7941 00005EA8 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7942 00005EB1 00000000000000      <2>
  7943 00005EB8 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  7944 00005EC0 003A0039041904      <2>
  7945 00005EC8 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  7946 00005ED1 03000046042604      <2>
  7947 00005ED8 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  7948 00005EE1 03950343042304      <2>
  7949 00005EE8 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  7950 00005EF1 03A1033A041A04      <2>
  7951 00005EF8 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  7952 00005F01 03A40335041504      <2>
  7953 00005F08 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  7954 00005F11 03A5033D041D04      <2>
  7955 00005F18 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  7956 00005F21 03980333041304      <2>
  7957 00005F28 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  7958 00005F31 03990348042804      <2>
  7959 00005F38 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  7960 00005F41 039F0349042904      <2>
  7961 00005F48 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  7962 00005F51 03A00337041704      <2>
  7963 00005F58 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  7964 00005F61 00000045042504      <2>
  7965 00005F68 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  7966 00005F71 0000004A042A04      <2>
  7967 00005F78 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7968 00005F81 00000000000000      <2>
  7969 00005F88 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7970 00005F91 00000000000000      <2>
  7971 00005F98 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  7972 00005FA1 03910344042404      <2>
  7973 00005FA8 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  7974 00005FB1 03A3034B042B04      <2>
  7975 00005FB8 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  7976 00005FC1 03940332041204      <2>
  7977 00005FC8 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  7978 00005FD1 03A60330041004      <2>
  7979 00005FD8 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  7980 00005FE1 0393033F041F04      <2>
  7981 00005FE8 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  7982 00005FF1 03970340042004      <2>
  7983 00005FF8 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  7984 00006001 039E033E041E04      <2>
  7985 00006008 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  7986 00006011 039A033B041B04      <2>
  7987 00006018 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  7988 00006021 039B0334041404      <2>
  7989 00006028 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  7990 00006031 00000036041604      <2>
  7991 00006038 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  7992 00006041 0000004D042D04      <2>
  7993 00006048 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  7994 00006051 00000051040104      <2>
  7995 00006058 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7996 00006061 00000000000000      <2>
  7997 00006068 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  7998 00006071 0000002F005C00      <2>
  7999 00006078 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  8000 00006081 0396034F042F04      <2>
  8001 00006088 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  8002 00006091 03A70347042704      <2>
  8003 00006098 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  8004 000060A1 03A80341042104      <2>
  8005 000060A8 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  8006 000060B1 03A9033C041C04      <2>
  8007 000060B8 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  8008 000060C1 03920338041804      <2>
  8009 000060C8 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  8010 000060D1 039D0342042204      <2>
  8011 000060D8 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  8012 000060E1 039C034C042C04      <2>
  8013 000060E8 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  8014 000060F1 00000031041104      <2>
  8015 000060F8 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  8016 00006101 0000004E042E04      <2>
  8017 00006108 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  8018 00006111 0000002E002C00      <2>
  8019 00006118 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8020 00006121 00000000000000      <2>
  8021 00006128 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8022 00006131 00000000000000      <2>
  8023 00006138 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8024 00006141 00000000000000      <2>
  8025 00006148 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  8026 00006151 00000000000000      <2>
  8027                              <2> noscan:
  8028                              <2> 
  8029                              <1> %endif
  8030                              <1> ;drivers will soon be handled intelligently
  8031                              <1> ;every driver's source will be scanned for a .init function
  8032                              <1> ;that will be called and if it returns 0
  8033                              <1> ;the hardware was found and the driver initialized properly
  8034                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  8035                              <1> 	%ifdef sound.included
  8036 00006158 E85FF8FFFF          <1> 		call sblaster.init
  8037                              <1> 	%endif
  8038                              <1> 	%ifdef network.included
  8039                              <1> 		call network.init
  8040                              <1> 	%endif
  8041 0000615D C3                  <1> 	ret
  8042                              <1> initialize:
  8043                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  8044 0000615E E83E000000          <1> 	call .pic
  8045                              <1> %ifdef terminal.vsync
  8046 00006163 E862000000          <1> 	call .rtc
  8047                              <1> %endif
  8048 00006168 E892000000          <1> 	call .pit
  8049 0000616D E8B4000000          <1> 	call .fpu
  8050 00006172 E8C5000000          <1> 	call .sse
  8051 00006177 31C0                <1> 	xor eax, eax
  8052 00006179 31C9                <1> 	xor ecx, ecx
  8053                              <1> %ifdef io.serial
  8054                              <1> 	call serial.init
  8055                              <1> %endif
  8056 0000617B E801000000          <1> 	call .time
  8057 00006180 C3                  <1> 	ret
  8058                              <1> 	
  8059                              <1> .time:
  8060 00006181 E8FDDDFFFF          <1> 	call time
  8061 00006186 E8A0DFFFFF          <1> 	call timeconvert
  8062 0000618B 890D[52020000]      <1> 	mov [timeseconds], ecx
  8063 00006191 31C9                <1> 	xor ecx, ecx
  8064 00006193 890D[56020000]      <1> 	mov [timenanoseconds], ecx
  8065 00006199 C605[CB3E0000]01    <1> 	mov byte [istimeset], 1
  8066 000061A0 C3                  <1> 	ret
  8067                              <1> 	
  8068                              <1> .pic:
  8069 000061A1 B011                <1> 	mov al, 0x11
  8070 000061A3 E620                <1> 	out 0x20, al
  8071 000061A5 E6A0                <1> 	out 0xA0, al
  8072 000061A7 B040                <1> 	mov al, 0x40	;interrupt for master
  8073 000061A9 E621                <1> 	out 0x21, al
  8074 000061AB B048                <1> 	mov al, 0x48	;interrupt for slave
  8075 000061AD E6A1                <1> 	out 0xA1, al
  8076 000061AF B004                <1> 	mov al, 4
  8077 000061B1 E621                <1> 	out 0x21, al
  8078 000061B3 B002                <1> 	mov al, 2
  8079 000061B5 E6A1                <1> 	out 0xA1, al
  8080 000061B7 B001                <1> 	mov al, 0x1
  8081 000061B9 E621                <1> 	out 0x21, al
  8082 000061BB E6A1                <1> 	out 0xA1, al
  8083                              <1> 	;masks are set to zero so as not to mask
  8084 000061BD 30C0                <1> 	xor al, al
  8085 000061BF E621                <1> 	out 0x21, al
  8086 000061C1 E6A1                <1> 	out 0xA1, al
  8087 000061C3 B020                <1> 	mov al, 0x20
  8088 000061C5 E6A0                <1> 	out 0xA0, al
  8089 000061C7 E620                <1> 	out 0x20, al
  8090 000061C9 C3                  <1> 	ret
  8091                              <1> .rtc:
  8092 000061CA B008                <1> 	mov al, 0x8
  8093 000061CC 88C4                <1> 	mov ah, al
  8094 000061CE 66BA7000            <1> 	mov dx, 0x70
  8095 000061D2 EE                  <1> 	out dx, al
  8096 000061D3 6642                <1> 	inc dx
  8097 000061D5 EC                  <1> 	in al, dx
  8098 000061D6 86C4                <1> 	xchg al, ah
  8099 000061D8 664A                <1> 	dec dx
  8100 000061DA EE                  <1> 	out dx, al
  8101 000061DB 6642                <1> 	inc dx
  8102 000061DD 86C4                <1> 	xchg al, ah
  8103 000061DF 0C40                <1> 	or al, 0x40
  8104 000061E1 EE                  <1> 	out dx, al
  8105                              <1> 	
  8106 000061E2 B00A                <1> 	mov al, 0xA
  8107 000061E4 664A                <1> 	dec dx
  8108 000061E6 EE                  <1> 	out dx, al
  8109 000061E7 86C4                <1> 	xchg al, ah
  8110 000061E9 6642                <1> 	inc dx
  8111 000061EB EC                  <1> 	in al, dx
  8112 000061EC 24F0                <1> 	and al, 0xF0
  8113 000061EE 0A05[03030000]      <1> 	or al, [rtcrate]
  8114 000061F4 86C4                <1> 	xchg al, ah
  8115 000061F6 664A                <1> 	dec dx
  8116 000061F8 EE                  <1> 	out dx, al
  8117 000061F9 6642                <1> 	inc dx
  8118 000061FB 86C4                <1> 	xchg al, ah
  8119 000061FD EE                  <1> 	out dx, al
  8120 000061FE C3                  <1> 	ret
  8121                              <1> 	
  8122                              <1> .pit:
  8123                              <1> 	;initialize the PIT
  8124 000061FF 66A1[4C020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  8125 00006205 E640                <1> 	out 0x40, al
  8126 00006207 66C1C008            <1> 	rol ax, 8
  8127 0000620B E640                <1> 	out 0x40, al
  8128                              <1> 	;enable rtc interrupt
  8129 0000620D B00B                <1> 	mov al, 0xB
  8130 0000620F E670                <1> 	out 0x70, al
  8131 00006211 66C1C008            <1> 	rol ax, 8
  8132 00006215 E471                <1> 	in al, 0x71
  8133 00006217 66C1C008            <1> 	rol ax, 8
  8134 0000621B E670                <1> 	out 0x70, al
  8135 0000621D 66C1C008            <1> 	rol ax, 8
  8136 00006221 0C40                <1> 	or al, 0x40
  8137 00006223 E671                <1> 	out 0x71, al
  8138 00006225 C3                  <1> 	ret
  8139                              <1> .fpu:
  8140                              <1> 	;And now to initialize the fpu
  8141 00006226 0F20E0              <1> 	mov eax, cr4
  8142 00006229 0D00020000          <1> 	or eax, 0x200
  8143 0000622E 0F22E0              <1> 	mov cr4, eax
  8144 00006231 B87F0B0000          <1> 	mov eax, 0xB7F
  8145 00006236 50                  <1> 	push eax
  8146 00006237 D92C24              <1> 	fldcw [esp]
  8147 0000623A 58                  <1> 	pop eax
  8148 0000623B C3                  <1> 	ret
  8149                              <1> 	
  8150                              <1> .sse:
  8151 0000623C 0F20C0              <1> 	mov eax, cr0
  8152 0000623F 24FB                <1> 	and al, 11111011b
  8153 00006241 0C02                <1> 	or al, 00000010b
  8154 00006243 0F22C0              <1> 	mov cr0, eax
  8155 00006246 0F20E0              <1> 	mov eax, cr4
  8156 00006249 660D0006            <1> 	or ax, 0000011000000000b
  8157 0000624D 0F22E0              <1> 	mov cr4, eax
  8158 00006250 C3                  <1> 	ret
  8159                                      %include "source/pci.asm"
  8160 00006251 00                  <1> pcibus		db 0
  8161 00006252 00                  <1> pcidevice	db 0
  8162 00006253 00                  <1> pcifunction	db 0
  8163 00006254 00                  <1> pciregister	db 0
  8164 00006255 00                  <1> pcireqtype	db 0
  8165 00006256 00000000            <1> pcidevid	dd 0
  8166 0000625A FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  8167                              <1> getpcimem:
  8168 0000625E B002                <1> 	mov al, 2
  8169 00006260 A2[55620000]        <1> 	mov [pcireqtype], al
  8170 00006265 EB1F                <1> 	jmp searchpci
  8171                              <1> getpciport:
  8172 00006267 B001                <1> 	mov al, 1
  8173 00006269 A2[55620000]        <1> 	mov [pcireqtype], al
  8174 0000626E EB16                <1> 	jmp searchpci
  8175                              <1> pcidump:
  8176 00006270 31C0                <1> 	xor eax, eax
  8177 00006272 A2[53620000]        <1> 	mov [pcifunction], al
  8178 00006277 A2[51620000]        <1> 	mov [pcibus], al
  8179 0000627C A2[52620000]        <1> 	mov [pcidevice], al
  8180 00006281 A2[55620000]        <1> 	mov [pcireqtype], al
  8181                              <1> searchpci:		;return in ebx, start X in pciX
  8182 00006286 30C0                <1> 	xor al, al
  8183 00006288 A2[54620000]        <1> 	mov [pciregister], al
  8184 0000628D E80F020000          <1> 	call getpciaddr
  8185 00006292 BAF80C0000          <1> 	mov edx, 0xCF8
  8186 00006297 EF                  <1> 	out dx, eax	;request pci config
  8187 00006298 BAFC0C0000          <1> 	mov edx, 0xCFC
  8188 0000629D ED                  <1> 	in eax, dx 	;read in pci config
  8189 0000629E 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  8190 000062A3 0F8237000000        <1> 	jb near checkpcidevice
  8191                              <1> searchpciret:
  8192                              <1> nextpcidevice:
  8193 000062A9 30C0                <1> 	xor al, al
  8194 000062AB A2[53620000]        <1> 	mov [pcifunction], al
  8195 000062B0 A0[52620000]        <1> 	mov al, [pcidevice]
  8196 000062B5 3C1F                <1> 	cmp al, 11111b
  8197 000062B7 0F8300010000        <1> 	jae near nextpcibus
  8198 000062BD FEC0                <1> 	inc al
  8199 000062BF A2[52620000]        <1> 	mov [pcidevice], al
  8200 000062C4 EBC0                <1> 	jmp searchpci
  8201 000062C6 A0[53620000]        <1> 	mov al, [pcifunction]
  8202 000062CB 3C07                <1> 	cmp al, 111b
  8203 000062CD 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  8204 000062D3 FEC0                <1> 	inc al
  8205 000062D5 A2[53620000]        <1> 	mov [pcifunction], al
  8206 000062DA EBAA                <1> 	jmp searchpci
  8207 000062DC 00000000            <1> pcitype: db 0,0,0,0
  8208                              <1> checkpcidevice:
  8209 000062E0 31C0                <1> 	xor eax, eax
  8210 000062E2 3905[56620000]      <1> 	cmp [pcidevid], eax
  8211 000062E8 0F8430000000        <1> 	je near .good
  8212 000062EE A2[54620000]        <1> 	mov [pciregister], al	;device id, vendor id
  8213 000062F3 E8A9010000          <1> 	call getpciaddr
  8214 000062F8 BAF80C0000          <1> 	mov edx, 0xCF8
  8215 000062FD EF                  <1> 	out dx, eax
  8216 000062FE BAFC0C0000          <1> 	mov edx, 0xCFC
  8217 00006303 ED                  <1> 	in eax, dx
  8218 00006304 2305[5A620000]      <1> 	and eax, [pcidevidmask]
  8219 0000630A 8B1D[56620000]      <1> 	mov ebx, [pcidevid]
  8220 00006310 231D[5A620000]      <1> 	and ebx, [pcidevidmask]
  8221 00006316 39D8                <1> 	cmp eax, ebx
  8222 00006318 0F858BFFFFFF        <1> 	jne near searchpciret
  8223                              <1> .good:
  8224 0000631E 30C0                <1> 	xor al, al
  8225 00006320 3805[55620000]      <1> 	cmp [pcireqtype], al
  8226 00006326 0F842C000000        <1> 	je near dumppcidevice
  8227 0000632C B008                <1> 	mov al, 0x08
  8228 0000632E A2[54620000]        <1> 	mov [pciregister], al	;class code, subclass, revision id
  8229 00006333 E869010000          <1> 	call getpciaddr
  8230 00006338 BAF80C0000          <1> 	mov edx, 0xCF8
  8231 0000633D EF                  <1> 	out dx, eax
  8232 0000633E BAFC0C0000          <1> 	mov edx, 0xCFC
  8233 00006343 ED                  <1> 	in eax, dx
  8234 00006344 C1C008              <1> 	rol eax, 8
  8235 00006347 3A05[DC620000]      <1> 	cmp al, [pcitype]
  8236 0000634D 0F84A0000000        <1> 	je near foundpciaddr
  8237 00006353 E951FFFFFF          <1> 	jmp searchpciret
  8238                              <1> dumppcidevice:
  8239 00006358 30C0                <1> 	xor al, al
  8240 0000635A A2[54620000]        <1> 	mov [pciregister], al
  8241 0000635F E83D010000          <1> 	call getpciaddr
  8242 00006364 89C1                <1> 	mov ecx, eax
  8243 00006366 C605[06310000]05    <1> 	mov byte [firsthexshown], 5
  8244 0000636D E8A9CDFFFF          <1> 	call showhex
  8245                              <1> dumppcidevicelp:
  8246 00006372 A2[54620000]        <1> 	mov [pciregister], al
  8247 00006377 E825010000          <1> 	call getpciaddr
  8248 0000637C BAF80C0000          <1> 	mov edx, 0xCF8
  8249 00006381 EF                  <1> 	out dx, eax
  8250 00006382 BAFC0C0000          <1> 	mov edx, 0xCFC
  8251 00006387 ED                  <1> 	in eax, dx
  8252 00006388 89C1                <1> 	mov ecx, eax
  8253 0000638A A0[54620000]        <1> 	mov al, [pciregister]
  8254 0000638F 0404                <1> 	add al, 4
  8255 00006391 C605[06310000]05    <1> 	mov byte [firsthexshown], 5
  8256 00006398 E87ECDFFFF          <1> 	call showhex
  8257 0000639D 3C3C                <1> 	cmp al, 0x3C
  8258 0000639F 72D1                <1> 	jb dumppcidevicelp
  8259                              <1> dumppcidn:
  8260                              <1> %ifdef io.serial
  8261                              <1> 	mov esi, line
  8262                              <1> 	call print
  8263                              <1> %else
  8264 000063A1 803D[53250000]00    <1> 	cmp byte [charpos], 0
  8265 000063A8 0F84FBFEFFFF        <1> 	je near searchpciret
  8266 000063AE BE[E5840000]        <1> 	mov esi, line
  8267 000063B3 E857B9FFFF          <1> 	call print
  8268                              <1> %endif
  8269 000063B8 E9ECFEFFFF          <1> 	jmp searchpciret
  8270                              <1> nextpcibus:
  8271 000063BD 30C0                <1> 	xor al, al
  8272 000063BF A2[52620000]        <1> 	mov [pcidevice], al
  8273 000063C4 A0[51620000]        <1> 	mov al, [pcibus]
  8274 000063C9 3C7F                <1> 	cmp al, 1111111b
  8275 000063CB 730C                <1> 	jae donesearchpci
  8276 000063CD FEC0                <1> 	inc al
  8277 000063CF A2[51620000]        <1> 	mov [pcibus], al
  8278 000063D4 E9ADFEFFFF          <1> 	jmp searchpci
  8279                              <1> donesearchpci:
  8280 000063D9 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  8281 000063DE 31D2                <1> 	xor edx, edx
  8282 000063E0 8815[DC620000]      <1> 	mov [pcitype], dl
  8283 000063E6 8915[56620000]      <1> 	mov [pcidevid], edx
  8284 000063EC 891D[5A620000]      <1> 	mov [pcidevidmask], ebx
  8285 000063F2 C3                  <1> 	ret
  8286                              <1> foundpciaddr:
  8287 000063F3 B010                <1> 	mov al, 0x10
  8288 000063F5 A2[54620000]        <1> 	mov [pciregister], al
  8289 000063FA 803D[55620000]02    <1> 	cmp byte [pcireqtype], 2
  8290 00006401 743B                <1> 	je findpcimemaddr
  8291                              <1> findpciioaddr:
  8292 00006403 E899000000          <1> 	call getpciaddr
  8293 00006408 BAF80C0000          <1> 	mov edx, 0xCF8
  8294 0000640D EF                  <1> 	out dx, eax
  8295 0000640E BAFC0C0000          <1> 	mov edx, 0xCFC
  8296 00006413 ED                  <1> 	in eax, dx
  8297 00006414 89C3                <1> 	mov ebx, eax
  8298 00006416 83E301              <1> 	and ebx, 1
  8299 00006419 83FB00              <1> 	cmp ebx, 0
  8300 0000641C 0F8466000000        <1> 	je near notpciioaddr
  8301 00006422 83E801              <1> 	sub eax, 1
  8302 00006425 89C2                <1> 	mov edx, eax
  8303 00006427 31DB                <1> 	xor ebx, ebx
  8304 00006429 4B                  <1> 	dec ebx
  8305 0000642A 891D[5A620000]      <1> 	mov [pcidevidmask], ebx
  8306 00006430 43                  <1> 	inc ebx
  8307 00006431 881D[DC620000]      <1> 	mov [pcitype], bl
  8308 00006437 891D[56620000]      <1> 	mov [pcidevid], ebx
  8309 0000643D C3                  <1> 	ret
  8310                              <1> findpcimemaddr:
  8311 0000643E E85E000000          <1> 	call getpciaddr
  8312 00006443 BAF80C0000          <1> 	mov edx, 0xCF8
  8313 00006448 EF                  <1> 	out dx, eax
  8314 00006449 BAFC0C0000          <1> 	mov edx, 0xCFC
  8315 0000644E ED                  <1> 	in eax, dx
  8316 0000644F 89C3                <1> 	mov ebx, eax
  8317 00006451 83E301              <1> 	and ebx, 1
  8318 00006454 83FB01              <1> 	cmp ebx, 1
  8319 00006457 0F842B000000        <1> 	je near notpciioaddr
  8320 0000645D C1E804              <1> 	shr eax, 4
  8321 00006460 C1E004              <1> 	shl eax, 4	;remove prefetch and type
  8322 00006463 89C2                <1> 	mov edx, eax
  8323 00006465 50                  <1> 	push eax
  8324 00006466 A1[33020000]        <1> 	mov eax, [basecache]
  8325 0000646B C1E004              <1> 	shl eax, 4
  8326 0000646E 29C2                <1> 	sub edx, eax
  8327 00006470 58                  <1> 	pop eax
  8328 00006471 31DB                <1> 	xor ebx, ebx
  8329 00006473 4B                  <1> 	dec ebx
  8330 00006474 891D[5A620000]      <1> 	mov [pcidevidmask], ebx
  8331 0000647A 43                  <1> 	inc ebx
  8332 0000647B 881D[DC620000]      <1> 	mov [pcitype], bl
  8333 00006481 891D[56620000]      <1> 	mov [pcidevid], ebx
  8334 00006487 C3                  <1> 	ret
  8335                              <1> notpciioaddr:
  8336 00006488 A0[54620000]        <1> 	mov al, [pciregister]
  8337 0000648D 0404                <1> 	add al, 4
  8338 0000648F 3C28                <1> 	cmp al, 0x28
  8339 00006491 0F8712FEFFFF        <1> 	ja near searchpciret
  8340 00006497 A2[54620000]        <1> 	mov [pciregister], al
  8341 0000649C E962FFFFFF          <1> 	jmp findpciioaddr
  8342                              <1> getpciaddr:		;puts it in eax and ebx
  8343 000064A1 31C0                <1> 			xor eax, eax
  8344 000064A3 BB00000080          <1> 			mov ebx, 0x80000000
  8345 000064A8 A0[51620000]        <1> 			mov al, [pcibus]
  8346 000064AD C1E010              <1> 			shl eax, 16
  8347 000064B0 01C3                <1> 			add ebx, eax
  8348 000064B2 31C0                <1> 			xor eax, eax
  8349 000064B4 A0[52620000]        <1> 			mov al, [pcidevice]
  8350 000064B9 C1E00B              <1> 			shl eax, 11
  8351 000064BC 01C3                <1> 			add ebx, eax
  8352 000064BE 31C0                <1> 			xor eax, eax
  8353 000064C0 A0[53620000]        <1> 			mov al, [pcifunction]
  8354 000064C5 C1E008              <1> 			shl eax, 8
  8355 000064C8 01C3                <1> 			add ebx, eax
  8356 000064CA 31C0                <1> 			xor eax, eax
  8357 000064CC A0[54620000]        <1> 			mov al, [pciregister]
  8358 000064D1 01C3                <1> 			add ebx, eax
  8359 000064D3 89D8                <1> 			mov eax, ebx
  8360 000064D5 C3                  <1> 			ret
  8361                                      %include "source/disk.asm"
  8362                              <1> %ifdef disk.real
  8363                              <1> 	%include "source/drivers/disk/realmode.asm"
  8364                              <2> diskr:
  8365                              <2> 			;sector count in cl
  8366                              <2> 			;disk number in ch
  8367                              <2> 			;48 bit address with last 32 bits in ebx
  8368                              <2> 			;buffer in esi
  8369                              <2> 			;puts end of buffer in edi and end lba address in edx
  8370 000064D6 880D[FA640000]      <2> 	mov [sdlength], cl
  8371 000064DC 891D[FB640000]      <2> 	mov [sdaddress], ebx
  8372 000064E2 8935[6E660000]      <2> 	mov [oldesireal], esi
  8373 000064E8 66BE[FF64]          <2> 	mov si, readdiskreal
  8374 000064EC 668935[D20C0000]    <2> 	mov [realmodeptr], si
  8375 000064F3 E8CEA6FFFF          <2> 	call realmode
  8376 000064F8 EB41                <2> 	jmp backfromrealread
  8377 000064FA 00                  <2> sdlength db 0
  8378 000064FB 00000000            <2> sdaddress dd 0
  8379                              <2> 
  8380                              <2> [BITS 16]
  8381                              <2> readdiskreal:
  8382 000064FF C706[2B65]1000      <2> 	mov word [dlen], 0x10
  8383 00006505 C706[2F65]0000      <2> 	mov word [daddress], 0
  8384 0000650B C706[3165]0001      <2> 	mov word [dsegm], 0x100
  8385 00006511 66891E[3365]        <2> 	mov [dlbaad], ebx
  8386 00006516 880E[2D65]          <2> 	mov [dreadlen], cl
  8387                              <2> ReadHardDisk:
  8388 0000651A BE[2B65]            <2> 	mov si, diskaddresspacket
  8389 0000651D 31C0                <2> 	xor ax, ax
  8390 0000651F B442                <2> 	mov ah, 0x42
  8391 00006521 8A16[2A65]          <2> 	mov dl, [dnumber]
  8392 00006525 CD13                <2> 	int 0x13
  8393 00006527 72F1                <2> 	jc ReadHardDisk
  8394 00006529 C3                  <2> 	ret
  8395                              <2> 
  8396 0000652A 80                  <2> dnumber db 0x80
  8397                              <2> diskaddresspacket:
  8398 0000652B 10                  <2> dlen:	db 0x10 ;size of packet
  8399 0000652C 00                  <2> 		db 0
  8400 0000652D 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8401 0000652F 0000                <2> daddress:	dw 0	;address 0
  8402 00006531 0001                <2> dsegm:		dw 0x100	;segment
  8403                              <2> 		;start with known value for hd
  8404                              <2> dlbaad:
  8405 00006533 00000000            <2> 	dd 0	;lba address
  8406 00006537 00000000            <2> 	dd 0
  8407                              <2> [BITS 32]
  8408                              <2> backfromrealread:
  8409 0000653B 8B35[6E660000]      <2> 	mov esi, [oldesireal]
  8410 00006541 8B1D[FB640000]      <2> 	mov ebx, [sdaddress]
  8411 00006547 31C9                <2> 	xor ecx, ecx
  8412 00006549 8A0D[FA640000]      <2> 	mov cl, [sdlength]
  8413 0000654F 01CB                <2> 	add ebx, ecx
  8414 00006551 66B80800            <2> 	mov ax, LINEAR_SEL
  8415 00006555 8EE0                <2> 	mov fs, ax
  8416 00006557 BF00100000          <2> 	mov edi, 0x1000
  8417 0000655C B200                <2> 	mov dl, 0
  8418 0000655E D0E1                <2> 	shl cl, 1
  8419                              <2> copyfromrmodedisk:
  8420 00006560 648A07              <2> 	mov al, [fs:edi]
  8421 00006563 8806                <2> 	mov [esi], al
  8422 00006565 47                  <2> 	inc edi
  8423 00006566 46                  <2> 	inc esi
  8424 00006567 FECA                <2> 	dec dl
  8425 00006569 80FA00              <2> 	cmp dl, 0
  8426 0000656C 75F2                <2> 	jne copyfromrmodedisk
  8427 0000656E FEC9                <2> 	dec cl
  8428 00006570 B200                <2> 	mov dl, 0
  8429 00006572 80F900              <2> 	cmp cl, 0
  8430 00006575 75E9                <2> 	jne copyfromrmodedisk
  8431 00006577 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8432 0000657B 8EE0                <2> 	mov fs, ax
  8433 0000657D 89F7                <2> 	mov edi, esi
  8434 0000657F 8B35[6E660000]      <2> 	mov esi, [oldesireal]
  8435 00006585 89DA                <2> 	mov edx, ebx
  8436 00006587 8B1D[FB640000]      <2> 	mov ebx, [sdaddress]
  8437 0000658D C3                  <2> 	ret
  8438                              <2> 	
  8439                              <1> %else
  8440                              <1> 	%ifdef disk.protected
  8441                              <1> 		%include "source/drivers/disk/pata.asm"
  8442                              <1> 	%endif
  8443                              <1> %endif
  8444                              <1> %ifdef disk.none
  8445                              <1> loadfile:	xor edx, edx
  8446                              <1> 			cmp byte [edi], '&'
  8447                              <1> 			je .ret
  8448                              <1> 			mov edx, 404	;no files are found except &
  8449                              <1> 		.ret:
  8450                              <1> 			ret
  8451                              <1> %else
  8452                              <1> ;This loads files using the methods in the loaded driver
  8453                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8454                              <1> 			;returns with err code in edx and file end in edi
  8455 0000658E 803F00              <1> 	cmp byte [edi], 0
  8456 00006591 0F8445000000        <1> 	je near nofileload
  8457 00006597 89FA                <1> 	mov edx, edi
  8458 00006599 BB[64870300]        <1> 	mov ebx, diskfileindex
  8459                              <1> nextnamechar:
  8460 0000659E 8A07                <1> 	mov al, [edi]
  8461 000065A0 3C26                <1> 	cmp al, '&'
  8462 000065A2 743D                <1> 	je nullfile
  8463 000065A4 8A23                <1> 	mov ah, [ebx]
  8464 000065A6 47                  <1> 	inc edi
  8465 000065A7 43                  <1> 	inc ebx
  8466 000065A8 88C1                <1> 	mov cl, al
  8467 000065AA 08E1                <1> 	or cl, ah
  8468 000065AC 80F900              <1> 	cmp cl, 0
  8469 000065AF 7465                <1> 	je equalfilenames
  8470 000065B1 80F920              <1> 	cmp cl, ' '
  8471 000065B4 7460                <1> 	je equalfilenames
  8472 000065B6 3C2A                <1> 	cmp al, '*'
  8473 000065B8 7428                <1> 	je asteriskcheck
  8474 000065BA 80FC00              <1> 	cmp ah, 0
  8475 000065BD 7410                <1> 	je nextfilename
  8476 000065BF 3C00                <1> 	cmp al, 0
  8477 000065C1 7404                <1> 	je getebxzero
  8478 000065C3 38E0                <1> 	cmp al, ah
  8479 000065C5 74D7                <1> 	je nextnamechar
  8480                              <1> getebxzero:
  8481 000065C7 8A23                <1> 	mov ah, [ebx]
  8482 000065C9 43                  <1> 	inc ebx
  8483 000065CA 80FC00              <1> 	cmp ah, 0
  8484 000065CD 75F8                <1> 	jne getebxzero
  8485                              <1> nextfilename:
  8486 000065CF 83C308              <1> 	add ebx, 8		;next descriptor
  8487 000065D2 89D7                <1> 	mov edi, edx
  8488 000065D4 81FB[6F880300]      <1> 	cmp ebx, enddiskfileindex
  8489 000065DA 72C2                <1> 	jb nextnamechar
  8490                              <1> nofileload:
  8491 000065DC BA94010000          <1> 	mov edx, 404	;indicate not found error
  8492                              <1> nullfile:
  8493 000065E1 C3                  <1> 	ret
  8494                              <1> asteriskcheck:
  8495 000065E2 4B                  <1> 	dec ebx
  8496 000065E3 8A07                <1> 	mov al, [edi]
  8497 000065E5 3C2A                <1> 	cmp al, '*'
  8498 000065E7 74F9                <1> 	je asteriskcheck ;remove multiple asterisks
  8499 000065E9 3C20                <1> 	cmp al, ' '
  8500 000065EB 7412                <1> 	je equalfilenames2
  8501 000065ED 3C00                <1> 	cmp al, 0
  8502 000065EF 740E                <1> 	je equalfilenames2
  8503                              <1> .lp:
  8504 000065F1 8A23                <1> 	mov ah, [ebx]
  8505 000065F3 80FC00              <1> 	cmp ah, 0
  8506 000065F6 74D7                <1> 	je nextfilename
  8507 000065F8 38E0                <1> 	cmp al, ah
  8508 000065FA 74A2                <1> 	je nextnamechar
  8509 000065FC 43                  <1> 	inc ebx
  8510 000065FD EBF2                <1> 	jmp .lp
  8511                              <1> equalfilenames2:
  8512 000065FF 83EB02              <1> 	sub ebx, 2
  8513                              <1> eqfilefind:
  8514 00006602 43                  <1> 	inc ebx
  8515 00006603 81FB[6F880300]      <1> 	cmp ebx, enddiskfileindex
  8516 00006609 0F83CDFFFFFF        <1> 	jae near nofileload
  8517 0000660F 8A03                <1> 	mov al, [ebx]
  8518 00006611 3C00                <1> 	cmp al, 0
  8519 00006613 75ED                <1> 	jne eqfilefind
  8520 00006615 43                  <1> 	inc ebx
  8521                              <1> equalfilenames:
  8522 00006616 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8523 00006619 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8524 0000661B 031D[0C850000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  8525 00006621 31C9                <1> 	xor ecx, ecx
  8526 00006623 88C1                <1> 	mov cl, al			;get excess number of sectors
  8527 00006625 C0E102              <1> 	shl cl, 2
  8528 00006628 C0E902              <1> 	shr cl, 2			;cut off at 64
  8529 0000662B 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8530 0000662D B500                <1> 	mov ch, 0			;drive 0
  8531 0000662F C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8532                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8533 00006632 A3[72660000]        <1> 	mov [filetracks], eax
  8534 00006637 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8535 00006639 89DA                <1> 	mov edx, ebx
  8536 0000663B 80F900              <1> 	cmp cl, 0
  8537 0000663E 7405                <1> 	je copytracksforfile
  8538 00006640 E891FEFFFF          <1> 	call diskr	;take care of excess sectors
  8539                              <1> copytracksforfile:
  8540 00006645 A1[72660000]        <1> 	mov eax, [filetracks]
  8541 0000664A 83F800              <1> 	cmp eax, 0
  8542 0000664D 7419                <1> 	je donecopyfile
  8543 0000664F 48                  <1> 	dec eax
  8544 00006650 A3[72660000]        <1> 	mov [filetracks], eax
  8545 00006655 89D3                <1> 	mov ebx, edx	;get end lba
  8546 00006657 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8547 00006659 8A2D[0B850000]      <1> 	mov ch, [DriveNumber]
  8548 0000665F 89FE                <1> 	mov esi, edi	;reset buffer
  8549 00006661 E870FEFFFF          <1> 	call diskr
  8550 00006666 EBDD                <1> 	jmp copytracksforfile
  8551                              <1> donecopyfile:
  8552 00006668 BA00000000          <1> 	mov edx, 0	;no error
  8553 0000666D C3                  <1> 	ret
  8554                              <1> 
  8555 0000666E 00000000            <1> oldesireal dd 0
  8556 00006672 00000000            <1> filetracks dd 0
  8557 00006676 00                  <1> lbad1 db 0
  8558 00006677 00                  <1> lbad2 db 0
  8559 00006678 00                  <1> lbad3 db 0
  8560 00006679 00                  <1> lbad4 db 0
  8561 0000667A 00                  <1> lbad5 db 0
  8562 0000667B 00                  <1> lbad6 db 0
  8563 0000667C 6400                <1> segments dw 100
  8564                              <1> %endif
  8565                                      %include "source/threads.asm"
  8566                              <1> %ifdef threads.included	
  8567                              <1> nwcmdst:
  8568 0000667E 31C0                <1> 	xor eax, eax
  8569 00006680 BC[00AA0300]        <1> 	mov esp, stackend
  8570 00006685 A2[37670000]        <1> 	mov [threadson], al
  8571 0000668A A3[38670000]        <1> 	mov [currentthread], eax
  8572 0000668F 83C004              <1> 	add eax, 4
  8573 00006692 A3[33670000]        <1> 	mov [lastthread], eax
  8574 00006697 FB                  <1> 	sti
  8575 00006698 E9DBC5FFFF          <1> 	jmp nwcmd
  8576                              <1> 
  8577                              <1> nomorethreadspace:
  8578 0000669D BE[B3660000]        <1> 	mov esi, nmts
  8579 000066A2 E868B6FFFF          <1> 	call print
  8580 000066A7 C605[37670000]00    <1> 	mov byte [threadson], 0
  8581 000066AE E9C5C5FFFF          <1> 	jmp nwcmd
  8582 000066B3 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8583 000066BC 6572666C6F770A00    <1>
  8584                              <1> 
  8585                              <1> nomorestackspace:
  8586 000066C4 BE[D0660000]        <1> 	mov esi, nmss
  8587 000066C9 E841B6FFFF          <1> 	call print
  8588 000066CE EBAE                <1> 	jmp nwcmdst
  8589 000066D0 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8590 000066D9 72666C6F770A00      <1>
  8591                              <1> 	
  8592                              <1> threadswitch:
  8593 000066E0 60                  <1> 	pushad
  8594 000066E1 BF[3C9A2D00]        <1> 	mov edi, threadlist
  8595 000066E6 A1[38670000]        <1> 	mov eax, [currentthread]
  8596 000066EB 40                  <1> 	inc eax
  8597 000066EC A3[38670000]        <1> 	mov [currentthread], eax
  8598 000066F1 6648                <1> 	dec ax
  8599 000066F3 C1E002              <1> 	shl eax, 2
  8600 000066F6 01C7                <1> 	add edi, eax
  8601 000066F8 8927                <1> 	mov [edi], esp
  8602                              <1> 	;mov ebx, esp
  8603                              <1> 	;sub ebx, 512
  8604                              <1> 	;shr ebx, 4
  8605                              <1> 	;shl ebx, 4
  8606                              <1> 	;fxsave [ebx]
  8607 000066FA 83C704              <1> 	add edi, 4
  8608 000066FD 81FF[3CAA2D00]      <1> 	cmp edi, threadlistend
  8609 00006703 0F830B000000        <1> 	jae near nookespthread
  8610 00006709 8B07                <1> 	mov eax, [edi]
  8611 0000670B 83F800              <1> 	cmp eax, 0
  8612 0000670E 0F8517000000        <1> 	jne near okespthread
  8613                              <1> nookespthread:
  8614 00006714 BF[3C9A2D00]        <1> 	mov edi, threadlist
  8615 00006719 31C0                <1> 	xor eax, eax
  8616 0000671B A3[38670000]        <1> 	mov [currentthread], eax
  8617 00006720 8B07                <1> 	mov eax, [edi]
  8618 00006722 83F800              <1> 	cmp eax, 0
  8619 00006725 0F8453FFFFFF        <1> 	je near nwcmdst
  8620                              <1> okespthread:
  8621 0000672B 89C4                <1> 	mov esp, eax
  8622                              <1> 	;sub eax, 512
  8623                              <1> 	;shr eax, 4
  8624                              <1> 	;shl eax, 4
  8625                              <1> 	;fxrstor [eax]
  8626 0000672D B020                <1> 	mov al, 0x20
  8627 0000672F E620                <1> 	out 0x20, al
  8628 00006731 61                  <1> 	popad
  8629 00006732 CF                  <1> 	iret
  8630                              <1> 
  8631                              <1> %endif
  8632 00006733 04000000            <1> 	lastthread dd 4
  8633 00006737 00                  <1> 	threadson db 0
  8634 00006738 00000000            <1> 	currentthread dd 0
  8635                                  %ifdef gui.included
  8636                                      %include "source/gui/gui.asm"
  8637                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8638 0000673C 31C0                <1> 	xor eax, eax
  8639 0000673E 31DB                <1> 	xor ebx, ebx
  8640 00006740 31C9                <1> 	xor ecx, ecx
  8641 00006742 31D2                <1> 	xor edx, edx
  8642 00006744 E84B080000          <1> 	call guisetup
  8643                              <1> guiloop:
  8644 00006749 E8CCEEFFFF          <1> 	call cursorgui
  8645                              <1> guistart:
  8646 0000674E E8C1F4FFFF          <1> 	call getkey
  8647 00006753 C605[707C0000]00    <1> 	mov byte [copygui], 0
  8648 0000675A EBF2                <1> 	jmp guistart
  8649                              <1> 
  8650                              <1> %include "source/gui/bmp.asm"
  8651                              <2> showbmp:
  8652 0000675C 668B06              <2> 	mov ax, [esi]
  8653 0000675F 663D424D            <2> 	cmp ax, "BM"
  8654 00006763 0F85AF000000        <2> 	jne near endedbmp
  8655 00006769 8B3D[3D550000]      <2> 	mov edi, [physbaseptr]
  8656 0000676F 6689D0              <2> 	mov ax, dx
  8657 00006772 6689CB              <2> 	mov bx, cx
  8658 00006775 31C9                <2> 	xor ecx, ecx
  8659 00006777 31D2                <2> 	xor edx, edx
  8660 00006779 6689D9              <2> 	mov cx, bx
  8661 0000677C 6689C2              <2> 	mov dx, ax
  8662 0000677F 01D7                <2> 	add edi, edx
  8663 00006781 01D7                <2> 	add edi, edx
  8664 00006783 31D2                <2> 	xor edx, edx
  8665 00006785 668B15[15560000]    <2> 	mov dx, [resolutionx2]
  8666 0000678C 034E16              <2> 	add ecx, [esi + 22]
  8667                              <2> bmplocloop:
  8668 0000678F 52                  <2> 	push edx
  8669 00006790 31C0                <2> 	xor eax, eax
  8670 00006792 6689D0              <2> 	mov ax, dx
  8671 00006795 F7E1                <2> 	mul ecx
  8672 00006797 5A                  <2> 	pop edx
  8673 00006798 663B0D[29550000]    <2> 	cmp cx, [resolutiony]
  8674 0000679F 7609                <2> 	jbe .nofixy
  8675 000067A1 31C9                <2> 	xor ecx, ecx
  8676 000067A3 668B0D[29550000]    <2> 	mov cx, [resolutiony]
  8677                              <2> .nofixy:
  8678 000067AA 01C7                <2> 	add edi, eax
  8679 000067AC 8B5612              <2> 	mov edx, [esi + 18]
  8680 000067AF 8B4E16              <2> 	mov ecx, [esi + 22]
  8681 000067B2 8B460A              <2> 	mov eax, [esi + 10]
  8682 000067B5 8B5E02              <2> 	mov ebx, [esi + 2]
  8683 000067B8 01F3                <2> 	add ebx, esi
  8684 000067BA 891D[1E680000]      <2> 	mov [bmpend], ebx
  8685 000067C0 89D3                <2> 	mov ebx, edx
  8686 000067C2 01C6                <2> 	add esi, eax
  8687                              <2> ldxbmp2:
  8688 000067C4 31D2                <2> 	xor edx, edx
  8689 000067C6 668B15[27550000]    <2> 	mov dx, [resolutionx]
  8690 000067CD 39D3                <2> 	cmp ebx, edx
  8691 000067CF 7702                <2> 	ja ldxbmp
  8692 000067D1 89DA                <2> 	mov edx, ebx
  8693                              <2> ldxbmp:
  8694 000067D3 668B06              <2> 	mov ax, [esi]
  8695 000067D6 668907              <2> 	mov [edi], ax
  8696 000067D9 83C702              <2> 	add edi, 2
  8697 000067DC 83C602              <2> 	add esi, 2
  8698 000067DF 3B35[1E680000]      <2> 	cmp esi, [bmpend]
  8699 000067E5 7731                <2> 	ja endedbmp
  8700 000067E7 4A                  <2> 	dec edx
  8701 000067E8 83FA00              <2> 	cmp edx, 0
  8702 000067EB 77E6                <2> 	ja ldxbmp
  8703 000067ED 31D2                <2> 	xor edx, edx
  8704 000067EF 668B15[27550000]    <2> 	mov dx, [resolutionx]
  8705 000067F6 39D3                <2> 	cmp ebx, edx
  8706 000067F8 7610                <2> 	jbe .notover
  8707                              <2> .over:
  8708 000067FA 01DE                <2> 	add esi, ebx
  8709 000067FC 01DE                <2> 	add esi, ebx
  8710 000067FE 29D6                <2> 	sub esi, edx
  8711 00006800 29D6                <2> 	sub esi, edx
  8712 00006802 01DF                <2> 	add edi, ebx
  8713 00006804 01DF                <2> 	add edi, ebx
  8714 00006806 29D7                <2> 	sub edi, edx
  8715 00006808 29D7                <2> 	sub edi, edx
  8716                              <2> .notover:
  8717 0000680A 29DF                <2> 	sub edi, ebx
  8718 0000680C 29DF                <2> 	sub edi, ebx
  8719 0000680E 29D7                <2> 	sub edi, edx
  8720 00006810 29D7                <2> 	sub edi, edx
  8721 00006812 49                  <2> 	dec ecx
  8722 00006813 83F900              <2> 	cmp ecx, 0
  8723 00006816 77AC                <2> 	ja ldxbmp2
  8724                              <2> endedbmp:
  8725 00006818 E835030000          <2> 	call switchmousepos2
  8726 0000681D C3                  <2> 	ret
  8727                              <2> 	
  8728 0000681E 00000000            <2> 	bmpend dd 0
  8729                              <1> %include "source/gui/circle.asm"
  8730                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8731 00006822 55                  <2> 	push ebp
  8732 00006823 6683F800            <2> 	cmp ax, 0
  8733 00006827 770A                <2> 	ja .nozerocircle
  8734 00006829 E80C1C0000          <2> 	call putpixel	;the easiest circle ever
  8735 0000682E E9EE000000          <2> 	jmp .done
  8736                              <2> .nozerocircle:
  8737 00006833 6689F5              <2> 	mov bp, si
  8738 00006836 6650                <2> 	push ax
  8739 00006838 E83E1C0000          <2> 	call getpixelmem
  8740 0000683D 31C0                <2> 	xor eax, eax
  8741 0000683F 6658                <2> 	pop ax
  8742 00006841 BE01000000          <2> 	mov esi, 1
  8743 00006846 29C6                <2> 	sub esi, eax
  8744 00006848 89C1                <2> 	mov ecx, eax
  8745 0000684A 31C0                <2> 	xor eax, eax
  8746 0000684C 66A1[15560000]      <2> 	mov ax, [resolutionx2]
  8747 00006852 F7E1                <2> 	mul ecx
  8748 00006854 50                  <2> 	push eax
  8749 00006855 31D2                <2> 	xor edx, edx
  8750 00006857 01C7                <2> 	add edi, eax
  8751 00006859 66892F              <2> 	mov [edi], bp
  8752 0000685C 29C7                <2> 	sub edi, eax
  8753 0000685E 29C7                <2> 	sub edi, eax
  8754 00006860 66892F              <2> 	mov [edi], bp
  8755 00006863 01C7                <2> 	add edi, eax
  8756 00006865 D1E1                <2> 	shl ecx, 1
  8757 00006867 01CF                <2> 	add edi, ecx
  8758 00006869 66892F              <2> 	mov [edi], bp
  8759 0000686C D1E1                <2> 	shl ecx, 1
  8760 0000686E 29CF                <2> 	sub edi, ecx
  8761 00006870 66892F              <2> 	mov [edi], bp
  8762 00006873 D1E9                <2> 	shr ecx, 1
  8763 00006875 01CF                <2> 	add edi, ecx
  8764 00006877 D1E9                <2> 	shr ecx, 1
  8765 00006879 B802000000          <2> 	mov eax, 2
  8766 0000687E F7E1                <2> 	mul ecx
  8767 00006880 48                  <2> 	dec eax
  8768 00006881 F7D0                <2> 	not eax ;make it negative
  8769 00006883 A3[27690000]        <2> 	mov [.ddF_y], eax
  8770 00006888 58                  <2> 	pop eax
  8771 00006889 BB01000000          <2> 	mov ebx, 1
  8772 0000688E 891D[23690000]      <2> 	mov [.ddF_x], ebx
  8773 00006894 4B                  <2> 	dec ebx
  8774 00006895 31D2                <2> 	xor edx, edx
  8775 00006897 EB04                <2> 	jmp .lp
  8776                              <2> .lpb:
  8777 00006899 D1EA                <2> 	shr edx, 1
  8778 0000689B D1E9                <2> 	shr ecx, 1
  8779                              <2> .lp:	;it starts this with the center in edi
  8780                              <2> 		;color in bp
  8781                              <2> 		;ddF_x in memory
  8782                              <2> 		;x*resolutionx2 in ebx
  8783                              <2> 		;x in edx
  8784                              <2> 		;ddF_y in memory
  8785                              <2> 		;y*resolutionx2 in eax
  8786                              <2> 		;f in esi
  8787                              <2> 		;y in ecx
  8788 0000689D 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8789 000068A3 7714                <2> 	ja	.noddF_y
  8790 000068A5 49                  <2> 	dec ecx
  8791 000068A6 2B05[15560000]      <2> 	sub eax, [resolutionx2]
  8792 000068AC 8305[27690000]02    <2> 	add dword [.ddF_y], 2
  8793 000068B3 0335[27690000]      <2> 	add esi, [.ddF_y]
  8794                              <2> .noddF_y:
  8795 000068B9 42                  <2> 	inc edx
  8796 000068BA 031D[15560000]      <2> 	add ebx, [resolutionx2]
  8797 000068C0 8305[23690000]02    <2> 	add dword [.ddF_x], 2
  8798 000068C7 0335[23690000]      <2> 	add esi, [.ddF_x]
  8799                              <2> 
  8800 000068CD D1E2                <2> 	shl edx, 1
  8801 000068CF D1E1                <2> 	shl ecx, 1
  8802 000068D1 01D7                <2> 	add edi, edx
  8803 000068D3 01C7                <2> 	add edi, eax
  8804 000068D5 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  8805 000068D8 D1E2                <2> 	shl edx, 1
  8806 000068DA 29D7                <2> 	sub edi, edx
  8807 000068DC 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8808 000068DF D1E0                <2> 	shl eax, 1
  8809 000068E1 29C7                <2> 	sub edi, eax
  8810 000068E3 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  8811 000068E6 01D7                <2> 	add edi, edx
  8812 000068E8 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8813 000068EB D1E8                <2> 	shr eax, 1
  8814 000068ED D1EA                <2> 	shr edx, 1
  8815 000068EF 01C7                <2> 	add edi, eax
  8816 000068F1 29D7                <2> 	sub edi, edx
  8817                              <2> 
  8818 000068F3 39D1                <2> 	cmp ecx, edx
  8819 000068F5 74A2                <2> 	je .lpb
  8820                              <2> 
  8821 000068F7 01DF                <2> 	add edi, ebx
  8822 000068F9 01CF                <2> 	add edi, ecx
  8823 000068FB 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8824 000068FE D1E1                <2> 	shl ecx, 1
  8825 00006900 29CF                <2> 	sub edi, ecx
  8826 00006902 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8827 00006905 D1E3                <2> 	shl ebx, 1
  8828 00006907 29DF                <2> 	sub edi, ebx
  8829 00006909 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8830 0000690C 01CF                <2> 	add edi, ecx
  8831 0000690E 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8832 00006911 D1EB                <2> 	shr ebx, 1
  8833 00006913 D1E9                <2> 	shr ecx, 1
  8834 00006915 01DF                <2> 	add edi, ebx
  8835 00006917 29CF                <2> 	sub edi, ecx
  8836 00006919 39CA                <2> 	cmp edx, ecx
  8837 0000691B 0F8278FFFFFF        <2> 	jb .lpb
  8838                              <2> .done:
  8839 00006921 5D                  <2> 	pop ebp
  8840 00006922 C3                  <2> 	ret
  8841                              <2> 	
  8842 00006923 00000000            <2> .ddF_x dd 0
  8843 00006927 00000000            <2> .ddF_y dd 0
  8844                              <2> 
  8845                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  8846 0000692B 55                  <2> 	push ebp
  8847 0000692C 6683F800            <2> 	cmp ax, 0
  8848 00006930 770A                <2> 	ja .nozerocircle
  8849 00006932 E8031B0000          <2> 	call putpixel	;the easiest circle ever
  8850 00006937 E923010000          <2> 	jmp .done
  8851                              <2> .nozerocircle:
  8852 0000693C 6689F5              <2> 	mov bp, si
  8853 0000693F 6650                <2> 	push ax
  8854 00006941 E8351B0000          <2> 	call getpixelmem
  8855 00006946 31C0                <2> 	xor eax, eax
  8856 00006948 6658                <2> 	pop ax
  8857 0000694A BE01000000          <2> 	mov esi, 1
  8858 0000694F 29C6                <2> 	sub esi, eax
  8859 00006951 89C1                <2> 	mov ecx, eax
  8860 00006953 31C0                <2> 	xor eax, eax
  8861 00006955 66A1[15560000]      <2> 	mov ax, [resolutionx2]
  8862 0000695B F7E1                <2> 	mul ecx
  8863 0000695D 50                  <2> 	push eax
  8864 0000695E 31D2                <2> 	xor edx, edx
  8865 00006960 01C7                <2> 	add edi, eax
  8866 00006962 66892F              <2> 	mov [edi], bp
  8867 00006965 29C7                <2> 	sub edi, eax
  8868 00006967 29C7                <2> 	sub edi, eax
  8869 00006969 66892F              <2> 	mov [edi], bp
  8870 0000696C 01C7                <2> 	add edi, eax
  8871 0000696E D1E1                <2> 	shl ecx, 1
  8872 00006970 01CF                <2> 	add edi, ecx
  8873 00006972 51                  <2> 	push ecx
  8874                              <2> .s0:
  8875 00006973 66892F              <2> 	mov [edi], bp
  8876 00006976 83EF02              <2> 	sub edi, 2
  8877 00006979 49                  <2> 	dec ecx
  8878 0000697A 83F900              <2> 	cmp ecx, 0
  8879 0000697D 75F4                <2> 	jne .s0
  8880 0000697F 66892F              <2> 	mov [edi], bp
  8881 00006982 59                  <2> 	pop ecx
  8882 00006983 01CF                <2> 	add edi, ecx
  8883 00006985 D1E9                <2> 	shr ecx, 1
  8884 00006987 B802000000          <2> 	mov eax, 2
  8885 0000698C F7E1                <2> 	mul ecx
  8886 0000698E 48                  <2> 	dec eax
  8887 0000698F F7D0                <2> 	not eax ;make it negative
  8888 00006991 A3[656A0000]        <2> 	mov [.ddF_y], eax
  8889 00006996 58                  <2> 	pop eax
  8890 00006997 BB01000000          <2> 	mov ebx, 1
  8891 0000699C 891D[616A0000]      <2> 	mov [.ddF_x], ebx
  8892 000069A2 4B                  <2> 	dec ebx
  8893 000069A3 31D2                <2> 	xor edx, edx
  8894 000069A5 EB04                <2> 	jmp .lp
  8895                              <2> .lpb:
  8896 000069A7 D1EA                <2> 	shr edx, 1
  8897 000069A9 D1E9                <2> 	shr ecx, 1
  8898                              <2> .lp:	;it starts this with the center in edi
  8899                              <2> 		;color in bp
  8900                              <2> 		;ddF_x in memory
  8901                              <2> 		;x*resolutionx2 in ebx
  8902                              <2> 		;x in edx
  8903                              <2> 		;ddF_y in memory
  8904                              <2> 		;y*resolutionx2 in eax
  8905                              <2> 		;f in esi
  8906                              <2> 		;y in ecx
  8907 000069AB 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8908 000069B1 7714                <2> 	ja	.noddF_y
  8909 000069B3 49                  <2> 	dec ecx
  8910 000069B4 2B05[15560000]      <2> 	sub eax, [resolutionx2]
  8911 000069BA 8305[656A0000]02    <2> 	add dword [.ddF_y], 2
  8912 000069C1 0335[656A0000]      <2> 	add esi, [.ddF_y]
  8913                              <2> .noddF_y:
  8914 000069C7 42                  <2> 	inc edx
  8915 000069C8 031D[15560000]      <2> 	add ebx, [resolutionx2]
  8916 000069CE 8305[616A0000]02    <2> 	add dword [.ddF_x], 2
  8917 000069D5 0335[616A0000]      <2> 	add esi, [.ddF_x]
  8918                              <2> 
  8919 000069DB D1E2                <2> 	shl edx, 1
  8920 000069DD D1E1                <2> 	shl ecx, 1
  8921 000069DF 52                  <2> 	push edx
  8922 000069E0 29D7                <2> 	sub edi, edx
  8923 000069E2 01C7                <2> 	add edi, eax
  8924 000069E4 83FA00              <2> 	cmp edx, 0
  8925 000069E7 740C                <2> 	je .nos1
  8926                              <2> .s1:
  8927 000069E9 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8928 000069EC 83C702              <2> 	add edi, 2
  8929 000069EF 4A                  <2> 	dec edx
  8930 000069F0 83FA00              <2> 	cmp edx, 0
  8931 000069F3 75F4                <2> 	jne .s1
  8932                              <2> .nos1:
  8933 000069F5 66892F              <2> 	mov [edi], bp
  8934 000069F8 5A                  <2> 	pop edx
  8935 000069F9 52                  <2> 	push edx
  8936 000069FA 29C7                <2> 	sub edi, eax
  8937 000069FC 29C7                <2> 	sub edi, eax
  8938 000069FE 83FA00              <2> 	cmp edx, 0
  8939 00006A01 740C                <2> 	je .nos2
  8940                              <2> .s2:
  8941 00006A03 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8942 00006A06 83EF02              <2> 	sub edi, 2
  8943 00006A09 4A                  <2> 	dec edx
  8944 00006A0A 83FA00              <2> 	cmp edx, 0
  8945 00006A0D 75F4                <2> 	jne .s2
  8946                              <2> .nos2:
  8947 00006A0F 66892F              <2> 	mov [edi], bp
  8948 00006A12 5A                  <2> 	pop edx
  8949 00006A13 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  8950 00006A15 01D7                <2> 	add edi, edx
  8951                              <2> 
  8952 00006A17 39D1                <2> 	cmp ecx, edx
  8953 00006A19 748C                <2> 	je .lpb
  8954                              <2> 
  8955 00006A1B 51                  <2> 	push ecx
  8956 00006A1C 01DF                <2> 	add edi, ebx
  8957 00006A1E 29CF                <2> 	sub edi, ecx
  8958 00006A20 83F900              <2> 	cmp ecx, 0
  8959 00006A23 740C                <2> 	je .nos3
  8960                              <2> .s3:
  8961 00006A25 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8962 00006A28 83C702              <2> 	add edi, 2
  8963 00006A2B 49                  <2> 	dec ecx
  8964 00006A2C 83F900              <2> 	cmp ecx, 0
  8965 00006A2F 75F4                <2> 	jne .s3
  8966                              <2> .nos3:
  8967 00006A31 66892F              <2> 	mov [edi], bp
  8968 00006A34 59                  <2> 	pop ecx
  8969 00006A35 51                  <2> 	push ecx
  8970 00006A36 29DF                <2> 	sub edi, ebx
  8971 00006A38 29DF                <2> 	sub edi, ebx
  8972 00006A3A 83F900              <2> 	cmp ecx, 0
  8973 00006A3D 740C                <2> 	je .nos4
  8974                              <2> .s4:
  8975 00006A3F 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8976 00006A42 83EF02              <2> 	sub edi, 2
  8977 00006A45 49                  <2> 	dec ecx
  8978 00006A46 83F900              <2> 	cmp ecx, 0
  8979 00006A49 75F4                <2> 	jne .s4
  8980                              <2> .nos4:
  8981 00006A4B 66892F              <2> 	mov [edi], bp
  8982 00006A4E 59                  <2> 	pop ecx
  8983 00006A4F 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  8984 00006A51 01CF                <2> 	add edi, ecx
  8985                              <2> 
  8986 00006A53 D1EA                <2> 	shr edx, 1
  8987 00006A55 D1E9                <2> 	shr ecx, 1
  8988 00006A57 39CA                <2> 	cmp edx, ecx
  8989 00006A59 0F824CFFFFFF        <2> 	jb .lp
  8990                              <2> .done:
  8991 00006A5F 5D                  <2> 	pop ebp
  8992 00006A60 C3                  <2> 	ret
  8993                              <2> 	
  8994 00006A61 00000000            <2> .ddF_x dd 0
  8995 00006A65 00000000            <2> .ddF_y dd 0
  8996                              <1> %include "source/gui/cursor.asm"
  8997                              <2> clearmousecursor:
  8998 00006A69 BE[066E0000]        <2> 		mov esi, background
  8999 00006A6E 8B3D[3D550000]      <2> 		mov edi, [physbaseptr]
  9000 00006A74 31D2                <2> 		xor edx, edx
  9001 00006A76 31C9                <2> 		xor ecx, ecx
  9002 00006A78 668B15[FD570000]    <2> 		mov dx, [lastmouseposition]
  9003 00006A7F 668B0D[FF570000]    <2> 		mov cx, [lastmouseposition + 2]
  9004 00006A86 01D7                <2> 		add edi, edx
  9005 00006A88 31D2                <2> 		xor edx, edx
  9006 00006A8A 668B15[15560000]    <2> 		mov dx, [resolutionx2]
  9007 00006A91 83F900              <2> 		cmp ecx, 0
  9008 00006A94 7408                <2> 		je .nomul
  9009 00006A96 52                  <2> 		push edx
  9010 00006A97 89D0                <2> 		mov eax, edx
  9011 00006A99 F7E1                <2> 		mul ecx
  9012 00006A9B 01C7                <2> 		add edi, eax
  9013 00006A9D 5A                  <2> 		pop edx
  9014                              <2> .nomul:
  9015                              <2> %ifdef 	gui.background
  9016 00006A9E 833D[DE6D0000]00    <2> 		cmp dword [backgroundimage], 0
  9017 00006AA5 7431                <2> 		je .noyclr
  9018 00006AA7 8B35[DE6D0000]      <2> 		mov esi, [backgroundimage]
  9019 00006AAD 2B3D[3D550000]      <2> 		sub edi, [physbaseptr]
  9020 00006AB3 01FE                <2> 		add esi, edi
  9021 00006AB5 033D[3D550000]      <2> 		add edi, [physbaseptr]
  9022                              <2> .backlp:
  9023 00006ABB 31DB                <2> 		xor ebx, ebx
  9024                              <2> .noyback:
  9025 00006ABD 8B041E              <2> 		mov eax, [esi + ebx]
  9026 00006AC0 89041F              <2> 		mov [edi + ebx], eax
  9027 00006AC3 83C304              <2> 		add ebx, 4
  9028 00006AC6 83FB10              <2> 		cmp ebx, 16
  9029 00006AC9 75F2                <2> 		jne .noyback
  9030 00006ACB 01D7                <2> 		add edi, edx
  9031 00006ACD 01D6                <2> 		add esi, edx
  9032 00006ACF 6641                <2> 		inc cx
  9033 00006AD1 6683F910            <2> 		cmp cx, 16
  9034 00006AD5 72E4                <2> 		jb .backlp
  9035 00006AD7 C3                  <2> 		ret
  9036                              <2> %endif
  9037                              <2> .noyclr:
  9038 00006AD8 668B06              <2> 		mov ax, [esi]
  9039 00006ADB C1C010              <2> 		rol eax, 16
  9040 00006ADE 668B06              <2> 		mov ax, [esi]
  9041 00006AE1 8907                <2> 		mov [edi], eax
  9042 00006AE3 894704              <2> 		mov [edi + 4], eax
  9043 00006AE6 894708              <2> 		mov [edi + 8], eax
  9044 00006AE9 89470C              <2> 		mov [edi + 12], eax
  9045 00006AEC 01D7                <2> 		add edi, edx
  9046 00006AEE 6641                <2> 		inc cx
  9047 00006AF0 6683F910            <2> 		cmp cx, 16
  9048 00006AF4 72E2                <2> 		jb .noyclr
  9049 00006AF6 C3                  <2> 		ret
  9050                              <2> 
  9051                              <2> switchmousepos:		;;switch were the mouse is located
  9052 00006AF7 BE[9CDE2B00]        <2> 		mov esi, mousecolorbuf
  9053 00006AFC 8B3D[3D550000]      <2> 		mov edi, [physbaseptr]
  9054 00006B02 31D2                <2> 		xor edx, edx
  9055 00006B04 31C9                <2> 		xor ecx, ecx
  9056 00006B06 668B15[FD570000]    <2> 		mov dx, [lastmouseposition]
  9057 00006B0D 668B0D[FF570000]    <2> 		mov cx, [lastmouseposition + 2]
  9058 00006B14 01D7                <2> 		add edi, edx
  9059 00006B16 31D2                <2> 		xor edx, edx
  9060 00006B18 668B15[15560000]    <2> 		mov dx, [resolutionx2]
  9061 00006B1F 6683F900            <2> 		cmp cx, 0
  9062 00006B23 740A                <2> 		je noswmsy
  9063 00006B25 01D7                <2> swmsy:		add edi, edx
  9064 00006B27 6649                <2> 		dec cx
  9065 00006B29 6683F900            <2> 		cmp cx, 0
  9066 00006B2D 75F6                <2> 		jne swmsy
  9067 00006B2F 8B06                <2> noswmsy:	mov eax, [esi]
  9068 00006B31 8B5E04              <2> 		mov ebx, [esi + 4]
  9069 00006B34 8907                <2> 		mov [edi], eax
  9070 00006B36 895F04              <2> 		mov [edi + 4], ebx
  9071 00006B39 8B4608              <2> 		mov eax, [esi + 8]
  9072 00006B3C 8B5E0C              <2> 		mov ebx, [esi + 12]
  9073 00006B3F 894708              <2> 		mov [edi + 8], eax
  9074 00006B42 895F0C              <2> 		mov [edi + 12], ebx
  9075 00006B45 01D7                <2> 		add edi, edx
  9076 00006B47 83C610              <2> 		add esi, 16
  9077 00006B4A 81FE[9CDF2B00]      <2> 		cmp esi, mcolorend
  9078 00006B50 72DD                <2> 		jb noswmsy
  9079                              <2> 		
  9080                              <2> switchmousepos2:
  9081 00006B52 BE[9CDE2B00]        <2> 		mov esi, mousecolorbuf
  9082 00006B57 8B3D[3D550000]      <2> 		mov edi, [physbaseptr]
  9083 00006B5D 31D2                <2> 		xor edx, edx
  9084 00006B5F 31C9                <2> 		xor ecx, ecx
  9085 00006B61 668B15[01580000]    <2> 		mov dx, [mousecursorposition]
  9086 00006B68 668B0D[03580000]    <2> 		mov cx, [mousecursorposition + 2]
  9087 00006B6F 01D7                <2> 		add edi, edx
  9088 00006B71 31D2                <2> 		xor edx, edx
  9089 00006B73 668B15[15560000]    <2> 		mov dx, [resolutionx2]
  9090 00006B7A 6683F900            <2> 		cmp cx, 0
  9091 00006B7E 740A                <2> 		je noswmsy2
  9092 00006B80 01D7                <2> swmsy2:		add edi, edx
  9093 00006B82 6649                <2> 		dec cx
  9094 00006B84 6683F900            <2> 		cmp cx, 0
  9095 00006B88 75F6                <2> 		jne swmsy2
  9096 00006B8A 8B07                <2> noswmsy2:	mov eax, [edi]
  9097 00006B8C 8B5F04              <2> 		mov ebx, [edi + 4]
  9098 00006B8F 8906                <2> 		mov [esi], eax
  9099 00006B91 895E04              <2> 		mov [esi + 4], ebx
  9100 00006B94 8B4708              <2> 		mov eax, [edi + 8]
  9101 00006B97 8B5F0C              <2> 		mov ebx, [edi + 12]
  9102 00006B9A 894608              <2> 		mov [esi + 8], eax
  9103 00006B9D 895E0C              <2> 		mov [esi + 12], ebx
  9104 00006BA0 01D7                <2> 		add edi, edx
  9105 00006BA2 83C610              <2> 		add esi, 16
  9106 00006BA5 81FE[9CDF2B00]      <2> 		cmp esi, mcolorend
  9107 00006BAB 72DD                <2> 		jb noswmsy2
  9108 00006BAD C3                  <2> 		ret
  9109                              <2> 		
  9110                              <1> %include "source/gui/icon.asm"
  9111 00006BAE 0000                <2> iconcolor dw 0
  9112                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  9113 00006BB0 A2[A3840000]        <2> 		mov [iconselected], al
  9114 00006BB5 8025[A3840000]01    <2> 		and byte [iconselected], 1
  9115 00006BBC B401                <2> 		mov ah, 1
  9116 00006BBE E8F9150000          <2> 		call graphicsadd
  9117                              <2> 	showicon2:
  9118 00006BC3 8B3D[3D550000]      <2> 		mov edi, [physbaseptr]
  9119 00006BC9 6601D2              <2> 		add dx, dx
  9120 00006BCC 663B15[15560000]    <2> 		cmp dx, [resolutionx2]
  9121 00006BD3 720B                <2> 		jb screenxgood
  9122 00006BD5 668B15[15560000]    <2> 		mov dx, [resolutionx2]
  9123 00006BDC 6683EA40            <2> 		sub dx, 64
  9124                              <2> 	screenxgood:
  9125 00006BE0 6683F900            <2> 		cmp cx, 0
  9126 00006BE4 742A                <2> 		je noscreenygoodchk
  9127 00006BE6 663B0D[29550000]    <2> 		cmp cx, [resolutiony]
  9128 00006BED 720B                <2> 		jb screenygood
  9129 00006BEF 668B0D[29550000]    <2> 		mov cx, [resolutiony]
  9130 00006BF6 6683E920            <2> 		sub cx, 32
  9131                              <2> 	screenygood:
  9132 00006BFA 50                  <2> 		push eax
  9133 00006BFB 52                  <2> 		push edx
  9134 00006BFC 31C0                <2> 		xor eax, eax
  9135 00006BFE 31DB                <2> 		xor ebx, ebx
  9136 00006C00 668B1D[15560000]    <2> 		mov bx, [resolutionx2]
  9137 00006C07 6689C8              <2> 		mov ax, cx
  9138 00006C0A F7E3                <2> 		mul ebx
  9139 00006C0C 01C7                <2> 		add edi, eax
  9140 00006C0E 5A                  <2> 		pop edx
  9141 00006C0F 58                  <2> 		pop eax
  9142                              <2> 	noscreenygoodchk:
  9143 00006C10 31DB                <2> 		xor ebx, ebx
  9144 00006C12 6689D3              <2> 		mov bx, dx
  9145 00006C15 01DF                <2> 		add edi, ebx
  9146 00006C17 6631C9              <2> 		xor cx, cx
  9147 00006C1A 668B06              <2> 		mov ax, [esi]
  9148 00006C1D 83C602              <2> 		add esi, 2
  9149 00006C20 66A3[AE6B0000]      <2> 		mov [iconcolor], ax
  9150                              <2> 	writeicon:
  9151 00006C26 8B06                <2> 		mov eax, [esi]
  9152 00006C28 D1C0                <2> 		rol eax, 1
  9153 00006C2A 30C9                <2> 		xor cl, cl
  9154                              <2> 	writeiconline:
  9155 00006C2C B201                <2> 		mov dl, 1
  9156 00006C2E 20C2                <2> 		and dl, al
  9157 00006C30 3215[A3840000]      <2> 		xor dl, [iconselected]
  9158 00006C36 668B1D[066E0000]    <2> 		mov bx, [background]
  9159 00006C3D 66891F              <2> 		mov [edi], bx
  9160 00006C40 80FA00              <2> 		cmp dl, 0
  9161 00006C43 740A                <2> 		je noiconline
  9162 00006C45 668B15[AE6B0000]    <2> 		mov dx, [iconcolor]
  9163 00006C4C 668917              <2> 		mov [edi], dx
  9164                              <2> 	noiconline:
  9165 00006C4F 83C702              <2> 		add edi, 2
  9166 00006C52 D1C0                <2> 		rol eax, 1
  9167 00006C54 FEC1                <2> 		inc cl
  9168 00006C56 80F920              <2> 		cmp cl, 32
  9169 00006C59 72D1                <2> 		jb writeiconline
  9170 00006C5B 83C604              <2> 		add esi, 4
  9171 00006C5E FEC5                <2> 		inc ch
  9172 00006C60 31D2                <2> 		xor edx, edx
  9173 00006C62 668B15[15560000]    <2> 		mov dx, [resolutionx2]
  9174 00006C69 01D7                <2> 		add edi, edx
  9175 00006C6B 83EF40              <2> 		sub edi, 64
  9176 00006C6E 80FD20              <2> 		cmp ch, 32
  9177 00006C71 72B3                <2> 		jb writeicon
  9178 00006C73 31C0                <2> 		xor eax, eax
  9179 00006C75 C3                  <2> 		ret
  9180                              <1> %include "source/gui/line.asm"
  9181                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  9182 00006C76 668935[7F6D0000]    <2> 	mov [.color], si
  9183 00006C7D C605[816D0000]00    <2> 	mov byte [.steep], 0
  9184 00006C84 C605[826D0000]00    <2> 	mov byte [.yreversed], 0
  9185 00006C8B EB07                <2> 	jmp .notsteep
  9186                              <2> .steeploop:
  9187 00006C8D C605[816D0000]01    <2> 	mov byte [.steep], 1
  9188                              <2> .notsteep:
  9189 00006C94 31FF                <2> 	xor edi, edi
  9190 00006C96 31F6                <2> 	xor esi, esi
  9191 00006C98 6639DA              <2> 	cmp dx, bx
  9192 00006C9B 7705                <2> 	ja .noreversex
  9193 00006C9D 6687D3              <2> 	xchg dx, bx
  9194 00006CA0 6691                <2> 	xchg cx, ax
  9195                              <2> .noreversex:
  9196 00006CA2 6689D7              <2> 	mov di, dx
  9197 00006CA5 6629DF              <2> 	sub di, bx
  9198                              <2> 	
  9199 00006CA8 6639C1              <2> 	cmp cx, ax
  9200 00006CAB 7208                <2> 	jb .reversey
  9201 00006CAD 6689CE              <2> 	mov si, cx
  9202 00006CB0 6629C6              <2> 	sub si, ax
  9203 00006CB3 EB0D                <2> 	jmp .normal
  9204                              <2> .reversey:
  9205 00006CB5 C605[826D0000]02    <2> 	mov byte [.yreversed], 2
  9206 00006CBC 6689C6              <2> 	mov si, ax
  9207 00006CBF 6629CE              <2> 	sub si, cx	
  9208                              <2> .normal:
  9209 00006CC2 6687CA              <2> 	xchg cx, dx
  9210 00006CC5 6693                <2> 	xchg ax, bx
  9211 00006CC7 6639FE              <2> 	cmp si, di
  9212 00006CCA 77C1                <2> 	ja .steeploop
  9213 00006CCC 6687CA              <2> 	xchg cx, dx
  9214 00006CCF 6693                <2> 	xchg ax, bx
  9215                              <2> 	
  9216 00006CD1 6691                <2> 	xchg ax, cx
  9217 00006CD3 6687DA              <2> 	xchg bx, dx
  9218 00006CD6 66893D[856D0000]    <2> 	mov [.xdelta], di
  9219 00006CDD 668935[876D0000]    <2> 	mov [.ydelta], si
  9220 00006CE4 668B35[7F6D0000]    <2> 	mov si, [.color]
  9221 00006CEB 66891D[836D0000]    <2> 	mov [.endline], bx
  9222 00006CF2 6652                <2> 	push dx
  9223 00006CF4 6651                <2> 	push cx
  9224 00006CF6 6687CA              <2> 	xchg cx, dx
  9225 00006CF9 803D[816D0000]01    <2> 	cmp byte [.steep], 1
  9226 00006D00 7403                <2> 	je .xchg
  9227 00006D02 6687D1              <2> 	xchg dx, cx
  9228                              <2> .xchg:
  9229 00006D05 E871170000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9230 00006D0A 6659                <2> 	pop cx
  9231 00006D0C 665A                <2> 	pop dx
  9232 00006D0E 31C0                <2> 	xor eax, eax
  9233 00006D10 66A1[856D0000]      <2> 	mov ax, [.xdelta]
  9234 00006D16 66D1E8              <2> 	shr ax, 1
  9235 00006D19 8A0D[816D0000]      <2> 	mov cl, [.steep]
  9236 00006D1F 0A0D[826D0000]      <2> 	or cl, [.yreversed]
  9237 00006D25 55                  <2> 	push ebp
  9238 00006D26 668B2D[836D0000]    <2> 	mov bp, [.endline]
  9239 00006D2D 6629D5              <2> 	sub bp, dx
  9240 00006D30 668B15[876D0000]    <2> 	mov dx, [.ydelta]
  9241                              <2> .lp:
  9242 00006D37 668937              <2> 	mov [edi], si
  9243 00006D3A 6639D0              <2> 	cmp ax, dx
  9244 00006D3D 7326                <2> 	jae .noaddx
  9245 00006D3F F6C102              <2> 	test cl, 2
  9246 00006D42 740E                <2> 	jz .nodecy
  9247 00006D44 F6C101              <2> 	test cl, 1
  9248 00006D47 7506                <2> 	jnz .steepy
  9249 00006D49 29DF                <2> 	sub edi, ebx
  9250 00006D4B 29DF                <2> 	sub edi, ebx
  9251 00006D4D EB03                <2> 	jmp .nodecy
  9252                              <2> .steepy:
  9253 00006D4F 83EF04              <2> 	sub edi, 4
  9254                              <2> .nodecy:
  9255 00006D52 660305[856D0000]    <2> 	add ax, [.xdelta]
  9256 00006D59 F6C101              <2> 	test cl, 1
  9257 00006D5C 7504                <2> 	jnz .steepx
  9258 00006D5E 01DF                <2> 	add edi, ebx
  9259 00006D60 EB03                <2> 	jmp .noaddx
  9260                              <2> .steepx:
  9261 00006D62 83C702              <2> 	add edi, 2
  9262                              <2> .noaddx:
  9263 00006D65 6629D0              <2> 	sub ax, dx
  9264 00006D68 664D                <2> 	dec bp
  9265 00006D6A 83C702              <2> 	add edi, 2
  9266 00006D6D F6C101              <2> 	test cl, 1
  9267 00006D70 7405                <2> 	jz .nosteepx
  9268 00006D72 83EF02              <2> 	sub edi, 2
  9269 00006D75 01DF                <2> 	add edi, ebx
  9270                              <2> .nosteepx:
  9271 00006D77 6683FD00            <2> 	cmp bp, 0
  9272 00006D7B 75BA                <2> 	jne .lp
  9273                              <2> .done:
  9274 00006D7D 5D                  <2> 	pop ebp
  9275 00006D7E C3                  <2> 	ret
  9276                              <2> 	
  9277 00006D7F 0000                <2> .color dw 0
  9278 00006D81 00                  <2> .steep db 0
  9279 00006D82 00                  <2> .yreversed db 0
  9280 00006D83 0000                <2> .endline dw 0
  9281 00006D85 0000                <2> .xdelta dw 0
  9282 00006D87 0000                <2> .ydelta dw 0
  9283                              <1> %include "source/gui/refresh.asm"
  9284                              <2> guiclear:
  9285 00006D89 8B3D[3D550000]      <2> 	mov edi, [physbaseptr]
  9286 00006D8F 668B15[27550000]    <2> 	mov dx, [resolutionx]
  9287 00006D96 668B0D[29550000]    <2> 	mov cx, [resolutiony]
  9288 00006D9D 668B1D[066E0000]    <2> 	mov bx, [background]
  9289 00006DA4 66891D[086E0000]    <2> 	mov [background + 2], bx
  9290                              <2> %ifdef gui.background
  9291 00006DAB 833D[DE6D0000]00    <2> 	cmp dword [backgroundimage], 0
  9292 00006DB2 742E                <2> 	je guiclear.noback
  9293 00006DB4 8B35[DE6D0000]      <2> 		mov esi, [backgroundimage]
  9294                              <2> 	.lp:
  9295                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  9296                              <2> 		;movdqa [edi], xmm0
  9297                              <2> 		;add esi, 16
  9298                              <2> 		;add edi, 16
  9299                              <2> 		;sub dx, 8
  9300 00006DBA 8B06                <2> 		mov eax, [esi]
  9301 00006DBC 8907                <2> 		mov [edi], eax
  9302 00006DBE 83C604              <2> 		add esi, 4
  9303 00006DC1 83C704              <2> 		add edi, 4
  9304 00006DC4 6683EA02            <2> 		sub dx, 2
  9305 00006DC8 6683FA00            <2> 		cmp dx, 0
  9306 00006DCC 77EC                <2> 		ja .lp
  9307 00006DCE 6649                <2> 		dec cx
  9308 00006DD0 668B15[27550000]    <2> 		mov dx, [resolutionx]
  9309 00006DD7 6683F900            <2> 		cmp cx, 0
  9310 00006DDB 77DD                <2> 		ja .lp
  9311 00006DDD C3                  <2> 		ret
  9312 00006DDE 00000000            <2> 	backgroundimage dd 0
  9313                              <2> %endif
  9314                              <2> guiclear.noback:
  9315 00006DE2 A1[066E0000]        <2> 	mov eax, [background]
  9316                              <2> guiclearloop:
  9317 00006DE7 8907                <2> 	mov [edi], eax
  9318 00006DE9 83C704              <2> 	add edi, 4
  9319 00006DEC 6683EA02            <2> 	sub dx, 2
  9320 00006DF0 6683FA00            <2> 	cmp dx, 0
  9321 00006DF4 77F1                <2> 	ja guiclearloop
  9322 00006DF6 6649                <2> 	dec cx
  9323 00006DF8 668B15[27550000]    <2> 	mov dx, [resolutionx]
  9324 00006DFF 6683F900            <2> 	cmp cx, 0
  9325 00006E03 77E2                <2> 	ja guiclearloop
  9326 00006E05 C3                  <2> 	ret
  9327                              <2> 
  9328 00006E06 CF7B<rept>          <2> background times 2 dw 0111101111001111b
  9329                              <2> 	.original equ 0111101111001111b
  9330                              <2> 
  9331                              <2> reloadallgraphics:
  9332 00006E0A BF[9CC80300]        <2> 		mov edi, graphicstable
  9333                              <2> reloadgraphicsloop:
  9334 00006E0F 8B7702              <2> 		mov esi, [edi + 2]
  9335 00006E12 668B5706            <2> 		mov dx, [edi + 6]
  9336 00006E16 668B4F08            <2> 		mov cx, [edi + 8]
  9337 00006E1A 668B07              <2> 		mov ax, [edi]
  9338 00006E1D 668B5F0A            <2> 		mov bx, [edi + 10]
  9339 00006E21 893D[A8810000]      <2> 		mov [grpctblpos], edi
  9340 00006E27 3B3D[7A7C0000]      <2> 		cmp edi, [dragging]
  9341 00006E2D 741E                <2> 		je loadedgraphic
  9342 00006E2F 6683F801            <2> 		cmp ax, 1
  9343 00006E33 0F8433000000        <2> 		je near icongraphic
  9344 00006E39 6683F802            <2> 		cmp ax, 2
  9345 00006E3D 0F8439000000        <2> 		je near stringgraphic
  9346 00006E43 6683F803            <2> 		cmp ax, 3
  9347 00006E47 0F8413000000        <2> 		je near windowgraphic
  9348 00006E4D 8B3D[A8810000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  9349 00006E53 83C710              <2> 		add edi, 16
  9350 00006E56 81FF[9CCA0300]      <2> 		cmp edi, graphicstableend
  9351 00006E5C 732E                <2> 		jae donereloadgraphics
  9352 00006E5E EBAF                <2> 		jmp reloadgraphicsloop
  9353                              <2> windowgraphic:
  9354 00006E60 E80B090000          <2> 		call showwindow2
  9355 00006E65 E892AFFFFF          <2> 		call cleardouble
  9356 00006E6A EBE1                <2> 		jmp loadedgraphic
  9357 00006E6C 80E301              <2> icongraphic:	and bl, 1
  9358 00006E6F 881D[A3840000]      <2> 		mov [iconselected], bl
  9359 00006E75 E849FDFFFF          <2> 		call showicon2
  9360 00006E7A EBD1                <2> 		jmp loadedgraphic
  9361 00006E7C 80E301              <2> stringgraphic:  and bl, 1
  9362 00006E7F 881D[767C0000]      <2> 		mov [mouseselecton], bl
  9363 00006E85 E8C6050000          <2> 		call showstring2
  9364 00006E8A EBC1                <2> 		jmp loadedgraphic
  9365                              <2> donereloadgraphics:
  9366 00006E8C 8B3D[7A7C0000]      <2> 		mov edi, [dragging]
  9367 00006E92 81FF[9CC80300]      <2> 		cmp edi, graphicstable
  9368 00006E98 7226                <2> 		jb notcorrectdrag
  9369 00006E9A 668B07              <2> 		mov ax, [edi]
  9370 00006E9D 8B7702              <2> 		mov esi, [edi + 2]
  9371 00006EA0 668B5706            <2> 		mov dx, [edi + 6]
  9372 00006EA4 668B4F08            <2> 		mov cx, [edi + 8]
  9373 00006EA8 668B5F0A            <2> 		mov bx, [edi + 10]
  9374 00006EAC 6683F801            <2> 		cmp ax, 1
  9375 00006EB0 750F                <2> 		jne noticondragging
  9376 00006EB2 80E301              <2> 		and bl, 1
  9377 00006EB5 881D[A3840000]      <2> 		mov [iconselected], bl
  9378 00006EBB E803FDFFFF          <2> 		call showicon2
  9379                              <2> notcorrectdrag:
  9380 00006EC0 C3                  <2> 		ret
  9381                              <2> 
  9382                              <2> 	noticondragging:
  9383 00006EC1 6683F802            <2> 		cmp ax, 2
  9384 00006EC5 75F9                <2> 		jne notcorrectdrag
  9385 00006EC7 80E301              <2> 		and bl, 1
  9386 00006ECA 881D[767C0000]      <2> 		mov [mouseselecton], bl
  9387 00006ED0 E87B050000          <2> 		call showstring2
  9388 00006ED5 EBE9                <2> 		jmp notcorrectdrag
  9389                              <1> %include "source/gui/square.asm"
  9390                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  9391 00006ED7 6639D3              <2> 	cmp bx, dx
  9392 00006EDA 7303                <2> 	jae .noxchgx
  9393 00006EDC 6687DA              <2> 	xchg bx, dx
  9394                              <2> .noxchgx:
  9395 00006EDF 6639C8              <2> 	cmp ax, cx
  9396 00006EE2 7302                <2> 	jae .noxchgy
  9397 00006EE4 6691                <2> 	xchg ax, cx
  9398                              <2> .noxchgy:
  9399 00006EE6 6650                <2> 	push ax
  9400 00006EE8 6653                <2> 	push bx
  9401 00006EEA 6652                <2> 	push dx
  9402 00006EEC E88A150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9403 00006EF1 31D2                <2> 	xor edx, edx
  9404 00006EF3 665A                <2> 	pop dx
  9405 00006EF5 31DB                <2> 	xor ebx, ebx
  9406 00006EF7 665B                <2> 	pop bx
  9407 00006EF9 6658                <2> 	pop ax
  9408                              <2> .lp0:
  9409 00006EFB 6652                <2> 	push dx
  9410                              <2> .lp:
  9411 00006EFD 668937              <2> 	mov [edi], si
  9412 00006F00 83C702              <2> 	add edi, 2
  9413 00006F03 6642                <2> 	inc dx
  9414 00006F05 6639DA              <2> 	cmp dx, bx
  9415 00006F08 76F3                <2> 	jbe .lp
  9416 00006F0A 665A                <2> 	pop dx
  9417 00006F0C 83EF02              <2> 	sub edi, 2
  9418 00006F0F 29DF                <2> 	sub edi, ebx
  9419 00006F11 29DF                <2> 	sub edi, ebx
  9420 00006F13 01D7                <2> 	add edi, edx
  9421 00006F15 01D7                <2> 	add edi, edx
  9422 00006F17 033D[15560000]      <2> 	add edi, [resolutionx2]
  9423 00006F1D 6641                <2> 	inc cx
  9424 00006F1F 6639C1              <2> 	cmp cx, ax
  9425 00006F22 7203                <2> 	jb .lp2
  9426 00006F24 74D5                <2> 	je .lp0
  9427 00006F26 C3                  <2> 	ret
  9428                              <2> .lp2:
  9429 00006F27 57                  <2> 	push edi
  9430 00006F28 668937              <2> 	mov [edi], si
  9431 00006F2B 29D7                <2> 	sub edi, edx
  9432 00006F2D 29D7                <2> 	sub edi, edx
  9433 00006F2F 01DF                <2> 	add edi, ebx
  9434 00006F31 01DF                <2> 	add edi, ebx
  9435 00006F33 668937              <2> 	mov [edi], si
  9436 00006F36 5F                  <2> 	pop edi
  9437 00006F37 033D[15560000]      <2> 	add edi, [resolutionx2]
  9438 00006F3D 6641                <2> 	inc cx
  9439 00006F3F 6639C1              <2> 	cmp cx, ax
  9440 00006F42 72E3                <2> 	jb .lp2
  9441 00006F44 EBB5                <2> 	jmp .lp0
  9442                              <2> 
  9443                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  9444 00006F46 6639D3              <2> 	cmp bx, dx
  9445 00006F49 7303                <2> 	jae .noxchgx
  9446 00006F4B 6687DA              <2> 	xchg bx, dx
  9447                              <2> .noxchgx:
  9448 00006F4E 6639C8              <2> 	cmp ax, cx
  9449 00006F51 7302                <2> 	jae .noxchgy
  9450 00006F53 6691                <2> 	xchg ax, cx
  9451                              <2> .noxchgy:
  9452 00006F55 6650                <2> 	push ax
  9453 00006F57 6653                <2> 	push bx
  9454 00006F59 6652                <2> 	push dx
  9455 00006F5B E81B150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9456 00006F60 31D2                <2> 	xor edx, edx
  9457 00006F62 665A                <2> 	pop dx
  9458 00006F64 31DB                <2> 	xor ebx, ebx
  9459 00006F66 665B                <2> 	pop bx
  9460 00006F68 6658                <2> 	pop ax
  9461                              <2> .lp2:
  9462 00006F6A 6652                <2> 	push dx
  9463                              <2> .lp:
  9464 00006F6C 668937              <2> 	mov [edi], si
  9465 00006F6F 83C702              <2> 	add edi, 2
  9466 00006F72 6642                <2> 	inc dx
  9467 00006F74 6639DA              <2> 	cmp dx, bx
  9468 00006F77 76F3                <2> 	jbe .lp
  9469 00006F79 665A                <2> 	pop dx
  9470 00006F7B 83EF02              <2> 	sub edi, 2
  9471 00006F7E 29DF                <2> 	sub edi, ebx
  9472 00006F80 29DF                <2> 	sub edi, ebx
  9473 00006F82 01D7                <2> 	add edi, edx
  9474 00006F84 01D7                <2> 	add edi, edx
  9475 00006F86 033D[15560000]      <2> 	add edi, [resolutionx2]
  9476 00006F8C 6641                <2> 	inc cx
  9477 00006F8E 6639C1              <2> 	cmp cx, ax
  9478 00006F91 76D7                <2> 	jbe .lp2
  9479 00006F93 C3                  <2> 	ret
  9480                              <1> %include "source/gui/startup.asm"
  9481                              <2> guisetup:
  9482                              <2> 	%ifdef gui.background
  9483 00006F94 31DB                <2> 	xor ebx, ebx
  9484 00006F96 891D[DE6D0000]      <2> 	mov [backgroundimage], ebx
  9485                              <2> 	%endif
  9486 00006F9C E8E8FDFFFF          <2> 	call guiclear
  9487 00006FA1 C605[0A850000]01    <2> 	mov byte [guion], 1
  9488 00006FA8 C605[767C0000]00    <2> 	mov byte [mouseselecton], 0
  9489 00006FAF 31C0                <2> 	xor eax, eax
  9490 00006FB1 31DB                <2> 	xor ebx, ebx
  9491 00006FB3 31C9                <2> 	xor ecx, ecx
  9492 00006FB5 31D2                <2> 	xor edx, edx
  9493                              <2> 	
  9494 00006FB7 BE[75710000]        <2> 	mov esi, pacmsg
  9495 00006FBC 30E4                <2> 	xor ah, ah
  9496 00006FBE B010                <2> 	mov al, 00010000b
  9497 00006FC0 31DB                <2> 	xor ebx, ebx
  9498 00006FC2 66B99000            <2> 	mov cx, 144
  9499 00006FC6 66BA0400            <2> 	mov dx, 4
  9500 00006FCA E86E040000          <2> 	call showstring
  9501                              <2> 	
  9502 00006FCF BE[B3710000]        <2> 	mov esi, interneticon
  9503 00006FD4 30E4                <2> 	xor ah, ah
  9504 00006FD6 B010                <2> 	mov al, 00010000b
  9505 00006FD8 BB[A1700000]        <2> 	mov ebx, noie
  9506 00006FDD 66B91800            <2> 	mov cx, 24
  9507 00006FE1 66BA0400            <2> 	mov dx, 4
  9508 00006FE5 E8C6FBFFFF          <2> 	call showicon
  9509                              <2> 	
  9510 00006FEA BE[35720000]        <2> 	mov esi, wordicon
  9511 00006FEF 30E4                <2> 	xor ah, ah
  9512 00006FF1 B010                <2> 	mov al, 00010000b
  9513 00006FF3 31DB                <2> 	xor ebx, ebx
  9514 00006FF5 66B91800            <2> 	mov cx, 24
  9515 00006FF9 66BA3000            <2> 	mov dx, 48
  9516 00006FFD E8AEFBFFFF          <2> 	call showicon
  9517                              <2> 	
  9518 00007002 BE[B7720000]        <2> 	mov esi, pacmanpellet
  9519 00007007 30E4                <2> 	xor ah, ah
  9520 00007009 B010                <2> 	mov al, 00010000b
  9521 0000700B 31DB                <2> 	xor ebx, ebx
  9522 0000700D 66B94000            <2> 	mov cx, 64
  9523 00007011 66BA0400            <2> 	mov dx, 4
  9524 00007015 E896FBFFFF          <2> 	call showicon
  9525                              <2> 	
  9526 0000701A BE[BB730000]        <2> 	mov esi, pacman
  9527 0000701F 30E4                <2> 	xor ah, ah
  9528 00007021 B010                <2> 	mov al, 00010000b
  9529 00007023 BB[8A700000]        <2> 	mov ebx, pacmannomnom
  9530 00007028 66B94000            <2> 	mov cx, 64
  9531 0000702C 66BA3000            <2> 	mov dx, 48
  9532 00007030 E87BFBFFFF          <2> 	call showicon
  9533                              <2> 	
  9534 00007035 BE[39730000]        <2> 	mov esi, ghostie
  9535 0000703A 30E4                <2> 	xor ah, ah
  9536 0000703C B010                <2> 	mov al, 00010000b
  9537 0000703E BB[73700000]        <2> 	mov ebx, boo
  9538 00007043 66B96C00            <2> 	mov cx, 108
  9539 00007047 66BA0400            <2> 	mov dx, 4
  9540 0000704B E860FBFFFF          <2> 	call showicon
  9541                              <2> 	
  9542 00007050 BE[57710000]        <2> 	mov esi, start
  9543 00007055 668B0D[29550000]    <2> 	mov cx, [resolutiony]
  9544 0000705C 6683E910            <2> 	sub cx, 16
  9545 00007060 66BA0200            <2> 	mov dx, 2
  9546 00007064 30E4                <2> 	xor ah, ah
  9547 00007066 B010                <2> 	mov al, 00010000b
  9548 00007068 BB[15710000]        <2> 	mov ebx, winblows
  9549 0000706D E8CB030000          <2> 	call showstring
  9550                              <2> 
  9551                              <2> %ifdef gui.time	
  9552                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9553                              <2> %endif
  9554 00007072 C3                  <2> 	ret
  9555                              <2> 
  9556                              <2> 	boo:
  9557 00007073 BE[70710000]        <2> 		mov esi, boomsg
  9558 00007078 66BA6400            <2> 		mov dx, 100
  9559 0000707C 66B94001            <2> 		mov cx, 320
  9560 00007080 31DB                <2> 		xor ebx, ebx
  9561 00007082 6631C0              <2> 		xor ax, ax
  9562 00007085 E9B3030000          <2> 		jmp showstring
  9563                              <2> 
  9564                              <2> 	pacmannomnom:
  9565 0000708A BE[8E710000]        <2> 		mov esi, pacnom
  9566 0000708F 66BA8200            <2> 		mov dx, 130
  9567 00007093 66B93C00            <2> 		mov cx, 60
  9568 00007097 31DB                <2> 		xor ebx, ebx
  9569 00007099 6631C0              <2> 		xor ax, ax
  9570 0000709C E99C030000          <2> 		jmp showstring	
  9571                              <2> 	
  9572                              <2> 	noie:
  9573 000070A1 66C705[9D710000]80- <2> 		mov word [termwindow], 640
  9574 000070A9 02                  <2>
  9575 000070AA 66C705[9F710000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9576 000070B2 01                  <2>
  9577 000070B3 BE[9D710000]        <2> 		mov esi, termwindow
  9578 000070B8 66BA1000            <2> 		mov dx, 16
  9579 000070BC 66B91000            <2> 		mov cx, 16
  9580 000070C0 31DB                <2> 		xor ebx, ebx
  9581 000070C2 6631C0              <2> 		xor ax, ax
  9582 000070C5 E8F1050000          <2> 		call showwindow
  9583 000070CA E9F2B9FFFF          <2> 		jmp os
  9584                              <2> 
  9585                              <2> 	gotomenuboot:
  9586 000070CF 31D2                <2> 		xor edx, edx
  9587 000070D1 31C9                <2> 		xor ecx, ecx
  9588 000070D3 668B15[27550000]    <2> 		mov dx, [resolutionx]
  9589 000070DA 668B0D[29550000]    <2> 		mov cx, [resolutiony]
  9590 000070E1 66C1E904            <2> 		shr cx, 4
  9591 000070E5 6683E901            <2> 		sub cx, 1
  9592 000070E9 66C1E104            <2> 		shl cx, 4
  9593 000070ED 668915[9D710000]    <2> 		mov [termwindow], dx
  9594 000070F4 66890D[9F710000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9595 000070FB BE[9D710000]        <2> 		mov esi, termwindow
  9596 00007100 6631D2              <2> 		xor dx, dx
  9597 00007103 6631C9              <2> 		xor cx, cx
  9598 00007106 31DB                <2> 		xor ebx, ebx
  9599 00007108 6631C0              <2> 		xor ax, ax
  9600 0000710B E8AB050000          <2> 		call showwindow
  9601 00007110 E9ACB9FFFF          <2> 		jmp os
  9602                              <2> 
  9603                              <2> 	winblows:
  9604 00007115 BE[66710000]        <2> 		mov esi, turnoffmsg
  9605 0000711A BB[99500000]        <2> 		mov ebx, turnoff
  9606 0000711F 668B0D[29550000]    <2> 		mov cx, [resolutiony]
  9607 00007126 6683E920            <2> 		sub cx, 32
  9608 0000712A 6631D2              <2> 		xor dx, dx
  9609 0000712D 30E4                <2> 		xor ah, ah
  9610 0000712F B010                <2> 		mov al, 00010000b
  9611 00007131 E807030000          <2> 		call showstring
  9612 00007136 BE[5D710000]        <2> 		mov esi, gotomenu
  9613 0000713B 668B0D[29550000]    <2> 		mov cx, [resolutiony]
  9614 00007142 6683E930            <2> 		sub cx, 48
  9615 00007146 6631D2              <2> 		xor dx, dx
  9616 00007149 30E4                <2> 		xor ah, ah
  9617 0000714B B010                <2> 		mov al, 00010000b
  9618 0000714D BB[CF700000]        <2> 		mov ebx, gotomenuboot
  9619 00007152 E9E6020000          <2> 		jmp showstring
  9620                              <2> 		
  9621                              <2> 
  9622 00007157 737461727400        <2> 	start	db "start",0
  9623 0000715D 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9624 00007166 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9625 0000716F 00                  <2>
  9626 00007170 426F6F2100          <2> 	boomsg db "Boo!",0
  9627 00007175 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9628 0000717E 73206561737920746F- <2>
  9629 00007187 20647261772E00      <2>
  9630 0000718E 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9631 00007197 6D206E6F6D00        <2>
  9632                              <2> 
  9633 0000719D 20035802            <2> 	termwindow:	dw 800,600	;window size
  9634 000071A1 FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9635 000071A5 [9CDF2B00]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9636 000071A9 [E4B42C00]          <2>
  9637 000071AD 534855536800        <2> 	termmsg:	db "SHUSh",0	;window title
  9638                              <2> 	
  9639 000071B3 <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9640 00007235 <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9641 000072B7 <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9642 00007339 <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9643 000073BB <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9644                              <2> 
  9645                              <2> %ifdef gui.time
  9646                              <2> guitime:
  9647                              <2> 		call time	;get rtc in timeshow & dateshow
  9648                              <2> 		xor ebx, ebx
  9649                              <2> 		mov dx, [resolutionx2]
  9650                              <2> 		xor cx, cx
  9651                              <2> 		sub dx, 304
  9652                              <2> 		mov esi, dateshow
  9653                              <2> 		mov al, 00010001b
  9654                              <2> 		call showstring
  9655                              <2> 		mov esi, timeshow
  9656                              <2> 		xor ebx, ebx
  9657                              <2> 		mov al, 00010001b
  9658                              <2> 		call showstring
  9659                              <2> 		ret
  9660                              <2> %endif
  9661                              <1> %include "source/gui/text.asm"
  9662                              <2> 	showstring:
  9663 0000743D A2[767C0000]        <2> 		mov [mouseselecton], al
  9664 00007442 8025[767C0000]01    <2> 		and byte [mouseselecton], 1
  9665 00007449 B402                <2> 		mov ah, 2
  9666 0000744B E86C0D0000          <2> 		call graphicsadd
  9667                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9668 00007450 30E4                <2> 		xor ah, ah
  9669 00007452 8A06                <2> 		mov al, [esi]
  9670 00007454 3CFF                <2> 		cmp al, 0xFF
  9671 00007456 7503                <2> 		jne .notnull
  9672 00007458 46                  <2> 		inc esi
  9673 00007459 EBF5                <2> 		jmp showstring2
  9674                              <2> .notnull:
  9675 0000745B 3CC0                <2> 		cmp al, 0xC0
  9676 0000745D 7231                <2> 		jb .doneutf
  9677 0000745F 3CE0                <2> 		cmp al, 0xE0
  9678 00007461 721A                <2> 		jb .two
  9679 00007463 46                  <2> 		inc esi
  9680 00007464 668B1E              <2> 		mov bx, [esi]
  9681 00007467 46                  <2> 		inc esi
  9682 00007468 C0E004              <2> 		shl al, 4
  9683 0000746B 66C1E302            <2> 		shl bx, 2
  9684 0000746F C0EF02              <2> 		shr bh, 2
  9685 00007472 66C1EB02            <2> 		shr bx, 2
  9686 00007476 08C7                <2> 		or bh, al
  9687 00007478 6689D8              <2> 		mov ax, bx
  9688 0000747B EB13                <2> 		jmp .doneutf
  9689                              <2> 	.two:
  9690 0000747D 8A3E                <2> 		mov bh, [esi]
  9691 0000747F 46                  <2> 		inc esi
  9692 00007480 8A1E                <2> 		mov bl, [esi]
  9693 00007482 66C1E302            <2> 		shl bx, 2
  9694 00007486 C0EF02              <2> 		shr bh, 2
  9695 00007489 66C1EB02            <2> 		shr bx, 2
  9696 0000748D 6689D8              <2> 		mov ax, bx
  9697                              <2> 	.doneutf:
  9698 00007490 6683F800            <2> 		cmp ax, 0
  9699 00007494 741B                <2> 		je doneshowstring
  9700 00007496 46                  <2> 		inc esi
  9701 00007497 56                  <2> 		push esi
  9702 00007498 668B1D[B9740000]    <2> 		mov bx, [colorfont2]
  9703 0000749F E826000000          <2> 		call showfontvesa
  9704 000074A4 6683F80A            <2> 		cmp ax, 10
  9705 000074A8 7404                <2> 		je noproceedshst
  9706 000074AA 6683C208            <2> 		add dx, 8
  9707                              <2> 	noproceedshst:
  9708 000074AE 5E                  <2> 		pop esi
  9709 000074AF EB9F                <2> 		jmp showstring2
  9710                              <2> 	doneshowstring:
  9711 000074B1 C605[767C0000]00    <2> 		mov byte [mouseselecton], 0
  9712 000074B8 C3                  <2> 		ret
  9713                              <2> 
  9714 000074B9 FFFF                <2> colorfont2 dw 0xFFFF
  9715 000074BB 00                  <2> colorcache db 0
  9716                              <2> 
  9717 000074BC 02                  <2> resolutionbytes db 2
  9718 000074BD 0000                <2> posxvesa dw 0
  9719 000074BF 0000                <2> posyvesa dw 0
  9720 000074C1 FFFF                <2> colorfont dw 0xFFFF
  9721                              <2> savefontvesa:		;same rules as showfontvesa
  9722 000074C3 C605[757C0000]01    <2> 	mov byte [savefonton], 1
  9723                              <2> showfontvesa:		;position in (dx,cx), color in bx, char in ax
  9724 000074CA 663DFF00            <2> 	cmp ax, 255
  9725 000074CE 7501                <2> 	jne nostopshowfont
  9726 000074D0 C3                  <2> 	ret
  9727                              <2> nostopshowfont:
  9728 000074D1 55                  <2> 	push ebp
  9729 000074D2 66890D[BF740000]    <2> 	mov [posyvesa], cx
  9730 000074D9 6683F80A            <2> 	cmp ax, 10
  9731 000074DD 0F8423000000        <2> 	je near goodvesafontx
  9732 000074E3 31C9                <2> 	xor ecx, ecx
  9733 000074E5 668B0D[15560000]    <2> 	mov cx, [resolutionx2]
  9734 000074EC 6639CA              <2> 	cmp dx, cx
  9735 000074EF 7615                <2> 	jbe goodvesafontx
  9736 000074F1 6631D2              <2> 	xor dx, dx
  9737 000074F4 668B0D[BF740000]    <2> 	mov cx, [posyvesa]
  9738 000074FB 6683C110            <2> 	add cx, 16
  9739 000074FF 66890D[BF740000]    <2> 	mov [posyvesa], cx
  9740                              <2> goodvesafontx:
  9741 00007506 668B0D[BF740000]    <2> 	mov cx, [posyvesa]
  9742 0000750D 668915[BD740000]    <2> 	mov [posxvesa], dx
  9743 00007514 8B3D[3D550000]      <2> 	mov edi, [physbaseptr]
  9744 0000751A 66891D[C1740000]    <2> 	mov [colorfont], bx
  9745 00007521 668B2D[C1740000]    <2> 	mov bp, [colorfont]
  9746 00007528 31DB                <2> 	xor ebx, ebx
  9747 0000752A 6689C3              <2> 	mov bx, ax
  9748 0000752D 31C0                <2> 	xor eax, eax
  9749 0000752F 6689D8              <2> 	mov ax, bx
  9750 00007532 6689D3              <2> 	mov bx, dx
  9751 00007535 89DA                <2> 	mov edx, ebx
  9752 00007537 31DB                <2> 	xor ebx, ebx
  9753 00007539 6683F900            <2> 	cmp cx, 0
  9754 0000753D 7414                <2> 	je vesaposloopdn
  9755 0000753F 668B1D[15560000]    <2> 	mov bx, [resolutionx2]
  9756                              <2> vesaposloop:
  9757 00007546 52                  <2> 	push edx
  9758 00007547 50                  <2> 	push eax
  9759 00007548 31C0                <2> 	xor eax, eax
  9760 0000754A 6689C8              <2> 	mov ax, cx
  9761 0000754D F7E3                <2> 	mul ebx
  9762 0000754F 01C7                <2> 	add edi, eax
  9763 00007551 58                  <2> 	pop eax
  9764 00007552 5A                  <2> 	pop edx
  9765                              <2> vesaposloopdn:
  9766 00007553 01D7                <2> 	add edi, edx
  9767 00007555 BE[64870000]        <2> 	mov esi, fonts
  9768                              <2> findfontvesa:
  9769 0000755A 6683F80A            <2> 	cmp ax, 10
  9770 0000755E 0F84E4000000        <2> 	je near nwlinevesa
  9771 00007564 C1E004              <2> 	shl eax, 4
  9772 00007567 01C6                <2> 	add esi, eax
  9773 00007569 C1E804              <2> 	shr eax, 4
  9774 0000756C 81FE[64870300]      <2> 	cmp esi, fontend
  9775 00007572 0F83A4000000        <2> 	jae near donefontvesa
  9776 00007578 4E                  <2> 	dec esi
  9777                              <2> foundfontvesa:
  9778 00007579 46                  <2> 	inc esi
  9779 0000757A 803D[757C0000]01    <2> 	cmp byte [savefonton], 1
  9780 00007581 0F84DF000000        <2> 	je near vesafontsaver
  9781 00007587 30C9                <2> 	xor cl, cl
  9782 00007589 8A06                <2> 	mov al, [esi]
  9783 0000758B 668B15[15560000]    <2> 	mov dx, [resolutionx2]
  9784 00007592 662B15[BD740000]    <2> 	sub dx, [posxvesa]
  9785 00007599 6683FA10            <2> 	cmp dx, 16
  9786 0000759D 7708                <2> 	ja paintfontvesa
  9787 0000759F D0EA                <2> 	shr dl, 1
  9788 000075A1 8815[47760000]      <2> 	mov [charwidth], dl
  9789                              <2> paintfontvesa:
  9790 000075A7 B201                <2> 	mov dl, 1
  9791 000075A9 20C2                <2> 	and dl, al
  9792 000075AB 803D[747C0000]01    <2> 	cmp byte [showcursorfonton], 1
  9793 000075B2 0F842B000000        <2> 	je near nodelpaintedfont
  9794 000075B8 803D[747C0000]02    <2> 	cmp byte [showcursorfonton], 2
  9795 000075BF 0F850E000000        <2> 	jne near noswitchcursorfonton
  9796 000075C5 80FA00              <2> 	cmp dl, 0
  9797 000075C8 0F841D000000        <2> 	je near nopixelset
  9798 000075CE 66892F              <2> 	mov [edi], bp
  9799 000075D1 EB18                <2> 	jmp nopixelset
  9800                              <2> noswitchcursorfonton:
  9801 000075D3 3215[767C0000]      <2> 	xor dl, [mouseselecton]
  9802 000075D9 668B1D[066E0000]    <2> 	mov bx, [background]
  9803 000075E0 66891F              <2> 	mov [edi], bx
  9804                              <2> nodelpaintedfont:
  9805 000075E3 80FA00              <2> 	cmp dl, 0
  9806 000075E6 7403                <2> 	je nopixelset
  9807 000075E8 66892F              <2> 	mov [edi], bp
  9808                              <2> nopixelset:
  9809 000075EB 83C702              <2> 	add edi, 2
  9810 000075EE D0C0                <2> 	rol al, 1
  9811 000075F0 FEC1                <2> 	inc cl
  9812 000075F2 3A0D[47760000]      <2> 	cmp cl, [charwidth]
  9813 000075F8 72AD                <2> 	jb paintfontvesa
  9814 000075FA FEC5                <2> 	inc ch
  9815 000075FC 31D2                <2> 	xor edx, edx
  9816 000075FE 668B15[15560000]    <2> 	mov dx, [resolutionx2]
  9817 00007605 01D7                <2> 	add edi, edx
  9818 00007607 31D2                <2> 	xor edx, edx
  9819 00007609 8A15[47760000]      <2> 	mov dl, [charwidth]
  9820 0000760F 00D2                <2> 	add dl, dl
  9821 00007611 29D7                <2> 	sub edi, edx
  9822 00007613 80FD10              <2> 	cmp ch, 16
  9823 00007616 0F825DFFFFFF        <2> 	jb foundfontvesa
  9824                              <2> donefontvesa:
  9825 0000761C C605[47760000]08    <2> 	mov byte [charwidth], 8
  9826 00007623 668B15[BD740000]    <2> 	mov dx, [posxvesa]
  9827 0000762A 8A1D[47760000]      <2> 	mov bl, [charwidth]
  9828 00007630 30FF                <2> 	xor bh, bh
  9829 00007632 6601DA              <2> 	add dx, bx
  9830 00007635 6689EB              <2> 	mov bx, bp
  9831 00007638 668B0D[BF740000]    <2> 	mov cx, [posyvesa]
  9832 0000763F 883D[757C0000]      <2> 	mov [savefonton], bh
  9833 00007645 5D                  <2> 	pop ebp
  9834 00007646 C3                  <2> 	ret
  9835 00007647 08                  <2> charwidth db 8
  9836                              <2> nwlinevesa:
  9837 00007648 6631D2              <2> 	xor dx, dx
  9838 0000764B 668915[BD740000]    <2> 	mov [posxvesa], dx
  9839 00007652 668B0D[BF740000]    <2> 	mov cx, [posyvesa]
  9840 00007659 6683C110            <2> 	add cx, 16
  9841 0000765D 66890D[BF740000]    <2> 	mov [posyvesa], cx
  9842 00007664 EBB6                <2> 	jmp donefontvesa
  9843                              <2> vesafontsaver:
  9844 00007666 30C0                <2> 	xor al, al
  9845 00007668 30C9                <2> 	xor cl, cl
  9846                              <2> vesafontsaver2:
  9847 0000766A 66392F              <2> 	cmp [edi], bp
  9848 0000766D 7426                <2> 	je colorfontmatch
  9849                              <2> donecolormatch:
  9850 0000766F 83C702              <2> 	add edi, 2
  9851 00007672 D0C0                <2> 	rol al, 1
  9852 00007674 FEC1                <2> 	inc cl
  9853 00007676 80F908              <2> 	cmp cl, 8
  9854 00007679 72EF                <2> 	jb vesafontsaver2
  9855 0000767B 8806                <2> 	mov [esi], al
  9856 0000767D 46                  <2> 	inc esi
  9857 0000767E FEC5                <2> 	inc ch
  9858 00007680 31D2                <2> 	xor edx, edx
  9859 00007682 668B15[15560000]    <2> 	mov dx, [resolutionx2]
  9860 00007689 01D7                <2> 	add edi, edx
  9861 0000768B 83EF10              <2> 	sub edi, 16
  9862 0000768E 80FD10              <2> 	cmp ch, 16
  9863 00007691 72D3                <2> 	jb vesafontsaver
  9864 00007693 EB87                <2> 	jmp donefontvesa
  9865                              <2> colorfontmatch:
  9866 00007695 0401                <2> 	add al, 1
  9867 00007697 EBD6                <2> 	jmp donecolormatch
  9868                              <1> %include "source/gui/window.asm"
  9869 00007699 0000                <2> winvcopystx dw 0
  9870 0000769B 0000                <2> winvcopysty dw 0
  9871 0000769D 0000                <2> winvcopydx dw 0
  9872 0000769F 0000                <2> winvcopycx dw 0
  9873 000076A1 FFFF0000            <2> windowcolor dw 0xFFFF,0
  9874 000076A5 00000000            <2> windowbufloc: dd 0
  9875 000076A9 00000000            <2> windowvideobuf dd 0
  9876 000076AD 00000000            <2> windowvideobuf2 dd 0
  9877 000076B1 00000000            <2> windowinfobuf dd 0
  9878 000076B5 0000                <2> termcol dw 0
  9879 000076B7 00000000            <2> wincopyendpos dd 0
  9880                              <2> 
  9881                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9882 000076BB C605[7C230000]01    <2> 		mov byte [termguion], 1
  9883 000076C2 6683C110            <2> 		add cx, 16
  9884 000076C6 668915[99760000]    <2> 		mov [winvcopystx], dx
  9885 000076CD 66890D[9B760000]    <2> 		mov [winvcopysty], cx
  9886 000076D4 8935[B1760000]      <2> 		mov [windowinfobuf], esi
  9887 000076DA 668B16              <2> 		mov dx, [esi]
  9888 000076DD 668B4E02            <2> 		mov cx, [esi + 2]
  9889 000076E1 31C0                <2> 		xor eax, eax
  9890 000076E3 31DB                <2> 		xor ebx, ebx
  9891 000076E5 6689D0              <2> 		mov ax, dx
  9892 000076E8 6689CB              <2> 		mov bx, cx
  9893 000076EB 66C1E803            <2> 		shr ax, 3
  9894 000076EF 66C1EB04            <2> 		shr bx, 4
  9895 000076F3 66A3[B5760000]      <2> 		mov [termcol], ax
  9896 000076F9 A2[55250000]        <2> 		mov [charxy], al
  9897 000076FE 881D[56250000]      <2> 		mov [charxy + 1], bl
  9898 00007704 8B7E04              <2> 		mov edi, [esi + 4]
  9899 00007707 893D[A1760000]      <2> 		mov [windowcolor], edi
  9900 0000770D 8B7E0C              <2> 		mov edi, [esi + 12]
  9901 00007710 893D[AD760000]      <2> 		mov [windowvideobuf2], edi
  9902 00007716 8B7E08              <2> 		mov edi, [esi + 8]
  9903 00007719 893D[A9760000]      <2> 		mov [windowvideobuf], edi
  9904 0000771F 83FB00              <2> 		cmp ebx, 0
  9905 00007722 0F842B050000        <2> 		je near donewincopynow
  9906                              <2> 	findendposwin:
  9907 00007728 C1E002              <2> 		shl eax, 2
  9908 0000772B 31D2                <2> 		xor edx, edx
  9909 0000772D F7E3                <2> 		mul ebx
  9910 0000772F 01C7                <2> 		add edi, eax
  9911 00007731 893D[B7760000]      <2> 		mov [wincopyendpos], edi
  9912 00007737 31FF                <2> 		xor edi, edi
  9913 00007739 6631C0              <2> 		xor ax, ax
  9914 0000773C 6631DB              <2> 		xor bx, bx
  9915 0000773F 6601D2              <2> 		add dx, dx
  9916 00007742 668915[9D760000]    <2> 		mov [winvcopydx], dx
  9917 00007749 66890D[9F760000]    <2> 		mov [winvcopycx], cx
  9918 00007750 668B0D[9B760000]    <2> 		mov cx, [winvcopysty]
  9919 00007757 6683E910            <2> 		sub cx, 16
  9920 0000775B 668B15[99760000]    <2> 		mov dx, [winvcopystx]
  9921 00007762 C605[7D230000]00    <2> 		mov byte [termcopyon], 0
  9922 00007769 B403                <2> 		mov ah, 3
  9923 0000776B E84C0A0000          <2> 		call graphicsadd
  9924                              <2> 	showwindow2:
  9925 00007770 6683C110            <2> 		add cx, 16
  9926 00007774 668915[99760000]    <2> 		mov [winvcopystx], dx
  9927 0000777B 66890D[9B760000]    <2> 		mov [winvcopysty], cx
  9928 00007782 668B16              <2> 		mov dx, [esi]
  9929 00007785 668B4E02            <2> 		mov cx, [esi + 2]
  9930 00007789 6601D2              <2> 		add dx, dx
  9931 0000778C 668915[9D760000]    <2> 		mov [winvcopydx], dx
  9932 00007793 66890D[9F760000]    <2> 		mov [winvcopycx], cx
  9933 0000779A E818000000          <2> 		call reloadwindowtitle
  9934 0000779F 803D[A3810000]01    <2> 		cmp byte [windrag], 1
  9935 000077A6 0F83B6040000        <2> 		jae near forgetresetstuff
  9936 000077AC 8B3D[A5760000]      <2> 		mov edi, [windowbufloc]
  9937 000077B2 E957020000          <2> 		jmp windowvideocopyset
  9938                              <2> 		
  9939                              <2> 	reloadwindowtitle:
  9940 000077B7 8B3D[A5760000]      <2> 		mov edi, [windowbufloc]
  9941 000077BD 31D2                <2> 		xor edx, edx
  9942 000077BF 668B15[15560000]    <2> 		mov dx, [resolutionx2]
  9943 000077C6 C1E204              <2> 		shl edx, 4
  9944 000077C9 29D7                <2> 		sub edi, edx
  9945 000077CB 803D[7D230000]00    <2> 		cmp byte [termcopyon], 0
  9946 000077D2 7530                <2> 		jne nocleartitlebarpos
  9947 000077D4 8B3D[3D550000]      <2> 		mov edi, [physbaseptr]
  9948 000077DA 31D2                <2> 		xor edx, edx
  9949 000077DC 668B15[99760000]    <2> 		mov dx, [winvcopystx]
  9950 000077E3 01D7                <2> 		add edi, edx
  9951 000077E5 31C9                <2> 		xor ecx, ecx
  9952 000077E7 668B0D[9B760000]    <2> 		mov cx, [winvcopysty]
  9953 000077EE 6683E910            <2> 		sub cx, 16
  9954 000077F2 6683F900            <2> 		cmp cx, 0
  9955 000077F6 740C                <2> 		je nocleartitlebarpos
  9956                              <2> 	cleartitlebarpos:
  9957 000077F8 31C0                <2> 		xor eax, eax
  9958 000077FA 66A1[15560000]      <2> 		mov ax, [resolutionx2]
  9959 00007800 F7E1                <2> 		mul ecx
  9960 00007802 01C7                <2> 		add edi, eax
  9961                              <2> 	nocleartitlebarpos:
  9962 00007804 66B91000            <2> 		mov cx, 16
  9963 00007808 668B15[9D760000]    <2> 		mov dx, [winvcopydx]
  9964 0000780F 6683F900            <2> 		cmp cx, 0
  9965 00007813 0F8441000000        <2> 		je near canceltitlebarput
  9966 00007819 6683FA00            <2> 		cmp dx, 0
  9967 0000781D 0F8437000000        <2> 		je near canceltitlebarput
  9968                              <2> 	titlebarput:
  9969 00007823 66A1[A1760000]      <2> 		mov ax, [windowcolor]
  9970 00007829 668907              <2> 		mov [edi], ax
  9971 0000782C 6683EA02            <2> 		sub dx, 2
  9972 00007830 83C702              <2> 		add edi, 2
  9973 00007833 6683FA00            <2> 		cmp dx, 0
  9974 00007837 75EA                <2> 		jne titlebarput
  9975 00007839 31D2                <2> 		xor edx, edx
  9976 0000783B 668B15[15560000]    <2> 		mov dx, [resolutionx2]
  9977 00007842 6649                <2> 		dec cx
  9978 00007844 662B15[9D760000]    <2> 		sub dx, [winvcopydx]
  9979 0000784B 01D7                <2> 		add edi, edx
  9980 0000784D 668B15[9D760000]    <2> 		mov dx, [winvcopydx]
  9981 00007854 6683F900            <2> 		cmp cx, 0
  9982 00007858 75C9                <2> 		jne titlebarput
  9983                              <2> 	canceltitlebarput:
  9984 0000785A 893D[A5760000]      <2> 		mov [windowbufloc], edi
  9985 00007860 803D[7D230000]02    <2> 		cmp byte [termcopyon], 2
  9986 00007867 0F8412010000        <2> 		je near winvcpst
  9987 0000786D 668B1D[066E0000]    <2> 		mov bx, [background]
  9988 00007874 6653                <2> 		push bx
  9989 00007876 6631DB              <2> 		xor bx, bx
  9990 00007879 66891D[066E0000]    <2> 		mov [background], bx
  9991 00007880 6631C0              <2> 		xor ax, ax
  9992 00007883 83C610              <2> 		add esi, 16
  9993 00007886 668B15[99760000]    <2> 		mov dx, [winvcopystx]
  9994 0000788D 668B0D[9B760000]    <2> 		mov cx, [winvcopysty]
  9995 00007894 6683E910            <2> 		sub cx, 16
  9996 00007898 668B1D[A1760000]    <2> 		mov bx, [windowcolor]
  9997 0000789F C605[767C0000]01    <2> 		mov byte [mouseselecton], 1
  9998 000078A6 E8A5FBFFFF          <2> 		call showstring2	;Show window title
  9999 000078AB 8B35[542C0000]      <2> 		mov esi, [usercache]
 10000 000078B1 6683C210            <2> 		add dx, 16
 10001 000078B5 C605[767C0000]01    <2> 		mov byte [mouseselecton], 1
 10002 000078BC E88FFBFFFF          <2> 		call showstring2	;Show user name
 10003 000078C1 BE[D5840000]        <2> 		mov esi, computer
 10004 000078C6 C605[767C0000]01    <2> 		mov byte [mouseselecton], 1
 10005 000078CD E87EFBFFFF          <2> 		call showstring2	;Show computer name
 10006 000078D2 66B85800            <2> 		mov ax, "X"
 10007 000078D6 66BB00F8            <2> 		mov bx, 1111100000000000b
 10008 000078DA 668B15[99760000]    <2> 		mov dx, [winvcopystx]
 10009 000078E1 668B0D[9B760000]    <2> 		mov cx, [winvcopysty]
 10010 000078E8 6683E910            <2> 		sub cx, 16
 10011 000078EC 6683EA10            <2> 		sub dx, 16
 10012 000078F0 660315[9D760000]    <2> 		add dx, [winvcopydx]
 10013 000078F7 C605[767C0000]01    <2> 		mov byte [mouseselecton], 1
 10014 000078FE 663B15[15560000]    <2> 		cmp dx, [resolutionx2]
 10015 00007905 7305                <2> 		jae .nox
 10016 00007907 E8BEFBFFFF          <2> 		call showfontvesa
 10017                              <2> .nox:
 10018 0000790C 668B1D[066E0000]    <2> 		mov bx, [background]
 10019 00007913 6683EA18            <2> 		sub dx, 24
 10020 00007917 66B82B00            <2> 		mov ax, "+"
 10021 0000791B 66BBE007            <2> 		mov bx, 0000011111100000b
 10022 0000791F C605[767C0000]01    <2> 		mov byte [mouseselecton], 1
 10023 00007926 663B15[15560000]    <2> 		cmp dx, [resolutionx2]
 10024 0000792D 7305                <2> 		jae .noplus
 10025 0000792F E896FBFFFF          <2> 		call showfontvesa
 10026                              <2> .noplus:
 10027 00007934 6683EA18            <2> 		sub dx, 24
 10028 00007938 66B82D00            <2> 		mov ax, "-"
 10029 0000793C 66BBE0FF            <2> 		mov bx, 1111111111100000b
 10030 00007940 C605[767C0000]01    <2> 		mov byte [mouseselecton], 1
 10031 00007947 663B15[15560000]    <2> 		cmp dx, [resolutionx2]
 10032 0000794E 7305                <2> 		jae .nominus
 10033 00007950 E875FBFFFF          <2> 		call showfontvesa
 10034                              <2> .nominus:
 10035 00007955 6683EA18            <2> 		sub dx, 24
 10036 00007959 66B83F00            <2> 		mov ax, "?"
 10037 0000795D 66BB1F00            <2> 		mov bx, 0000000000011111b
 10038 00007961 C605[767C0000]01    <2> 		mov byte [mouseselecton], 1
 10039 00007968 663B15[15560000]    <2> 		cmp dx, [resolutionx2]
 10040 0000796F 7305                <2> 		jae .noquestion
 10041 00007971 E854FBFFFF          <2> 		call showfontvesa
 10042                              <2> .noquestion:
 10043 00007976 665B                <2> 		pop bx
 10044 00007978 66891D[066E0000]    <2> 		mov [background], bx
 10045                              <2> 	winvcpst:
 10046 0000797F C3                  <2> 		ret
 10047                              <2> 
 10048                              <2> 	windowvideocopy:
 10049 00007980 8B35[B1760000]      <2> 		mov esi, [windowinfobuf]
 10050 00007986 668B16              <2> 		mov dx, [esi]
 10051 00007989 668B4E02            <2> 		mov cx, [esi + 2]
 10052 0000798D 8B7E04              <2> 		mov edi, [esi + 4]
 10053 00007990 893D[A1760000]      <2> 		mov [windowcolor], edi
 10054 00007996 8B7E08              <2> 		mov edi, [esi + 8]
 10055 00007999 8B5E0C              <2> 		mov ebx, [esi + 12]
 10056 0000799C 893D[A9760000]      <2> 		mov [windowvideobuf], edi
 10057 000079A2 891D[AD760000]      <2> 		mov [windowvideobuf2], ebx
 10058 000079A8 31C0                <2> 		xor eax, eax
 10059 000079AA 31DB                <2> 		xor ebx, ebx
 10060 000079AC 6689D0              <2> 		mov ax, dx
 10061 000079AF 6689CB              <2> 		mov bx, cx
 10062 000079B2 66C1E803            <2> 		shr ax, 3
 10063 000079B6 66C1EB04            <2> 		shr bx, 4
 10064 000079BA 66A3[B5760000]      <2> 		mov [termcol], ax
 10065 000079C0 A2[55250000]        <2> 		mov [charxy], al
 10066 000079C5 881D[56250000]      <2> 		mov [charxy + 1], bl
 10067 000079CB 8B3D[A5760000]      <2> 		mov edi, [windowbufloc]
 10068 000079D1 3B3D[3D550000]      <2> 		cmp edi, [physbaseptr]
 10069 000079D7 0F8331000000        <2> 		jae near windowvideocopyset
 10070 000079DD 31C9                <2> 		xor ecx, ecx
 10071 000079DF 31D2                <2> 		xor edx, edx
 10072 000079E1 668B15[99760000]    <2> 		mov dx, [winvcopystx]
 10073 000079E8 668B0D[9B760000]    <2> 		mov cx, [winvcopysty]
 10074 000079EF 8B3D[3D550000]      <2> 		mov edi, [physbaseptr]
 10075 000079F5 01D7                <2> 		add edi, edx
 10076 000079F7 83F900              <2> 		cmp ecx, 0
 10077 000079FA 7412                <2> 		je windowvideocopyset
 10078                              <2> 	yrescopylp:
 10079 000079FC 31C0                <2> 		xor eax, eax
 10080 000079FE 66A1[15560000]      <2> 		mov ax, [resolutionx2]
 10081 00007A04 F7E1                <2> 		mul ecx
 10082 00007A06 01C7                <2> 		add edi, eax
 10083 00007A08 893D[A5760000]      <2> 		mov [windowbufloc], edi
 10084                              <2> 	windowvideocopyset:
 10085 00007A0E 6631C9              <2> 		xor cx, cx
 10086 00007A11 6649                <2> 		dec cx
 10087 00007A13 66890D[6A7C0000]    <2> 		mov [charposline], cx
 10088 00007A1A 89FE                <2> 		mov esi, edi
 10089 00007A1C 83EE10              <2> 		sub esi, 16
 10090 00007A1F 31D2                <2> 		xor edx, edx
 10091 00007A21 668B15[15560000]    <2> 		mov dx, [resolutionx2]
 10092 00007A28 C1E204              <2> 		shl edx, 4
 10093 00007A2B 01D6                <2> 		add esi, edx
 10094 00007A2D 8B3D[A9760000]      <2> 		mov edi, [windowvideobuf]
 10095 00007A33 83EF04              <2> 		sub edi, 4
 10096 00007A36 893D[6C7C0000]      <2> 		mov [charposvbuf], edi
 10097 00007A3C E912010000          <2> 		jmp nextcharwin
 10098                              <2> 	win.write:	;adjusted this to use alpha
 10099                              <2> 				;5R, 6G, 5B
 10100                              <2> %ifdef gui.alphablending
 10101 00007A41 56                  <2> 		push esi
 10102 00007A42 6653                <2> 		push bx
 10103 00007A44 6651                <2> 		push cx
 10104 00007A46 6652                <2> 		push dx
 10105                              <2> %ifdef gui.background
 10106 00007A48 89FE                <2> 		mov esi, edi
 10107 00007A4A 2B35[3D550000]      <2> 		sub esi, [physbaseptr]
 10108 00007A50 0335[DE6D0000]      <2> 		add esi, [backgroundimage]
 10109 00007A56 833D[DE6D0000]00    <2> 		cmp dword [backgroundimage], 0
 10110 00007A5D 7505                <2> 		jne .red
 10111                              <2> %endif
 10112 00007A5F BE[066E0000]        <2> 		mov esi, background
 10113                              <2> 	.red:
 10114 00007A64 668B0E              <2> 		mov cx, [esi]
 10115 00007A67 66C1E90B            <2> 		shr cx, 11
 10116 00007A6B 6689C3              <2> 		mov bx, ax
 10117 00007A6E 66C1EB0B            <2> 		shr bx, 11
 10118 00007A72 6601D9              <2> 		add cx, bx
 10119 00007A75 6601D9              <2> 		add cx, bx
 10120 00007A78 6601D9              <2> 		add cx, bx
 10121 00007A7B 66C1E902            <2> 		shr cx, 2
 10122 00007A7F 66C1E10B            <2> 		shl cx, 11
 10123 00007A83 6689CA              <2> 		mov dx, cx
 10124                              <2> 	.green:
 10125 00007A86 668B0E              <2> 		mov cx, [esi]
 10126 00007A89 66C1E105            <2> 		shl cx, 5
 10127 00007A8D 66C1E90A            <2> 		shr cx, 10
 10128 00007A91 6689C3              <2> 		mov bx, ax
 10129 00007A94 66C1E305            <2> 		shl bx, 5
 10130 00007A98 66C1EB0A            <2> 		shr bx, 10
 10131 00007A9C 6601D9              <2> 		add cx, bx
 10132 00007A9F 6601D9              <2> 		add cx, bx
 10133 00007AA2 6601D9              <2> 		add cx, bx
 10134 00007AA5 66C1E902            <2> 		shr cx, 2
 10135 00007AA9 66C1E105            <2> 		shl cx, 5
 10136 00007AAD 6601CA              <2> 		add dx, cx
 10137                              <2> 	.blue:
 10138 00007AB0 668B0E              <2> 		mov cx, [esi]
 10139 00007AB3 66C1E10B            <2> 		shl cx, 11
 10140 00007AB7 66C1E90B            <2> 		shr cx, 11
 10141 00007ABB 6689C3              <2> 		mov bx, ax
 10142 00007ABE 66C1E30B            <2> 		shl bx, 11
 10143 00007AC2 66C1EB0B            <2> 		shr bx, 11
 10144 00007AC6 6601D9              <2> 		add cx, bx
 10145 00007AC9 6601D9              <2> 		add cx, bx
 10146 00007ACC 6601D9              <2> 		add cx, bx
 10147 00007ACF 66C1E902            <2> 		shr cx, 2
 10148 00007AD3 6601CA              <2> 		add dx, cx
 10149 00007AD6 668917              <2> 		mov [edi], dx
 10150 00007AD9 665A                <2> 		pop dx
 10151 00007ADB 6659                <2> 		pop cx
 10152 00007ADD 665B                <2> 		pop bx
 10153 00007ADF 5E                  <2> 		pop esi
 10154                              <2> %else
 10155                              <2> 		mov [edi], ax
 10156                              <2> %endif
 10157 00007AE0 C3                  <2> 		ret
 10158                              <2> 	copywindow:
 10159 00007AE1 B201                <2> 		mov dl, 1
 10160 00007AE3 D0C6                <2> 		rol dh, 1
 10161 00007AE5 20F2                <2> 		and dl, dh
 10162 00007AE7 66813D[BB740000]80- <2> 		cmp word [colorcache], 0x80
 10163 00007AEF 00                  <2>
 10164 00007AF0 731D                <2> 		jae switchwincolors
 10165 00007AF2 66A1[A3760000]      <2> 		mov ax, [windowcolor + 2]
 10166 00007AF8 E844FFFFFF          <2> 		call win.write
 10167 00007AFD 80FA00              <2> 		cmp dl, 0
 10168 00007B00 7428                <2> 		je nowritewin
 10169 00007B02 66A1[A1760000]      <2> 		mov ax, [windowcolor]
 10170 00007B08 E834FFFFFF          <2> 		call win.write
 10171 00007B0D EB1B                <2> 		jmp nowritewin
 10172                              <2> 	switchwincolors:
 10173 00007B0F 66A1[A1760000]      <2> 		mov ax, [windowcolor]
 10174 00007B15 E827FFFFFF          <2> 		call win.write
 10175 00007B1A 80FA00              <2> 		cmp dl, 0
 10176 00007B1D 740B                <2> 		je nowritewin
 10177 00007B1F 66A1[A3760000]      <2> 		mov ax, [windowcolor + 2]
 10178 00007B25 E817FFFFFF          <2> 		call win.write
 10179                              <2> 	nowritewin:
 10180 00007B2A 83C702              <2> 		add edi, 2
 10181 00007B2D FEC1                <2> 		inc cl
 10182 00007B2F 80F908              <2> 		cmp cl, 8
 10183 00007B32 75AD                <2> 		jne copywindow
 10184 00007B34 43                  <2> 		inc ebx
 10185 00007B35 30C9                <2> 		xor cl, cl
 10186 00007B37 31D2                <2> 		xor edx, edx
 10187 00007B39 668B15[15560000]    <2> 		mov dx, [resolutionx2]
 10188 00007B40 01D6                <2> 		add esi, edx
 10189 00007B42 89F7                <2> 		mov edi, esi
 10190 00007B44 8AB3[64870000]      <2> 		mov dh, [fonts + ebx]
 10191 00007B4A D0CE                <2> 		ror dh, 1
 10192 00007B4C FEC5                <2> 		inc ch
 10193 00007B4E 80FD10              <2> 		cmp ch, 16
 10194 00007B51 758E                <2> 		jne copywindow
 10195                              <2> 	nextcharwin:
 10196 00007B53 6631C9              <2> 		xor cx, cx
 10197 00007B56 8B3D[6C7C0000]      <2> 		mov edi, [charposvbuf]
 10198 00007B5C 83C704              <2> 		add edi, 4
 10199 00007B5F 3B3D[B7760000]      <2> 		cmp edi, [wincopyendpos]
 10200 00007B65 0F83E8000000        <2> 		jae near donewincopynow
 10201 00007B6B 668B5F02            <2> 		mov bx, [edi + 2]
 10202 00007B6F 6683FB00            <2> 		cmp bx, 0
 10203 00007B73 7508                <2> 		jne nofixcolorwin
 10204 00007B75 66BB0700            <2> 		mov bx, 7
 10205 00007B79 66895F02            <2> 		mov [edi + 2], bx
 10206                              <2> 	nofixcolorwin:
 10207 00007B7D 66891D[BB740000]    <2> 		mov [colorcache], bx
 10208 00007B84 8B1F                <2> 		mov ebx, [edi]
 10209 00007B86 893D[6C7C0000]      <2> 		mov [charposvbuf], edi
 10210 00007B8C 833D[AD760000]00    <2> 		cmp dword [windowvideobuf2], 0
 10211 00007B93 7452                <2> 		je noskipcharcopy
 10212 00007B95 2B3D[A9760000]      <2> 		sub edi, [windowvideobuf]
 10213 00007B9B 033D[AD760000]      <2> 		add edi, [windowvideobuf2]
 10214 00007BA1 8B07                <2> 		mov eax, [edi]
 10215 00007BA3 39D8                <2> 		cmp eax, ebx
 10216 00007BA5 7540                <2> 		jne noskipcharcopy
 10217                              <2> 	skipcharcopy:
 10218 00007BA7 83C610              <2> 		add esi, 16
 10219 00007BAA 668B0D[6A7C0000]    <2> 		mov cx, [charposline]
 10220 00007BB1 6641                <2> 		inc cx
 10221 00007BB3 66890D[6A7C0000]    <2> 		mov [charposline], cx
 10222 00007BBA 663B0D[B5760000]    <2> 		cmp cx, [termcol]
 10223 00007BC1 7290                <2> 		jb nextcharwin
 10224 00007BC3 6631C9              <2> 		xor cx, cx
 10225 00007BC6 66890D[6A7C0000]    <2> 		mov [charposline], cx
 10226 00007BCD 31D2                <2> 		xor edx, edx
 10227 00007BCF 668B15[15560000]    <2> 		mov dx, [resolutionx2]
 10228 00007BD6 C1E204              <2> 		shl edx, 4
 10229 00007BD9 662B15[9D760000]    <2> 		sub dx, [winvcopydx]
 10230 00007BE0 01D6                <2> 		add esi, edx
 10231 00007BE2 E96CFFFFFF          <2> 		jmp nextcharwin
 10232                              <2> 	noskipcharcopy:
 10233 00007BE7 891F                <2> 		mov [edi], ebx
 10234 00007BE9 8B3D[6C7C0000]      <2> 		mov edi, [charposvbuf]
 10235 00007BEF C1E310              <2> 		shl ebx, 16
 10236 00007BF2 C1EB0C              <2> 		shr ebx, 12
 10237 00007BF5 31D2                <2> 		xor edx, edx
 10238 00007BF7 668B15[15560000]    <2> 		mov dx, [resolutionx2]
 10239 00007BFE C1E204              <2> 		shl edx, 4
 10240 00007C01 29D6                <2> 		sub esi, edx
 10241 00007C03 83C610              <2> 		add esi, 16
 10242 00007C06 89F7                <2> 		mov edi, esi
 10243 00007C08 668B0D[6A7C0000]    <2> 		mov cx, [charposline]
 10244 00007C0F 6641                <2> 		inc cx
 10245 00007C11 663B0D[B5760000]    <2> 		cmp cx, [termcol]
 10246 00007C18 7317                <2> 		jae fixwindowcopy
 10247 00007C1A 66890D[6A7C0000]    <2> 		mov [charposline], cx
 10248 00007C21 6631C9              <2> 		xor cx, cx
 10249 00007C24 8AB3[64870000]      <2> 		mov dh, [fonts + ebx]
 10250 00007C2A D0CE                <2> 		ror dh, 1
 10251 00007C2C E9B0FEFFFF          <2> 		jmp copywindow
 10252                              <2> fixwindowcopy:
 10253 00007C31 6631C9              <2> 		xor cx, cx
 10254 00007C34 66890D[6A7C0000]    <2> 		mov [charposline], cx
 10255 00007C3B 662B15[9D760000]    <2> 		sub dx, [winvcopydx]
 10256 00007C42 01D6                <2> 		add esi, edx
 10257 00007C44 89F7                <2> 		mov edi, esi
 10258 00007C46 8AB3[64870000]      <2> 		mov dh, [fonts + ebx]
 10259 00007C4C D0CE                <2> 		ror dh, 1
 10260 00007C4E E98EFEFFFF          <2> 		jmp copywindow
 10261                              <2> donewincopynow:
 10262 00007C53 803D[7D230000]01    <2> 		cmp byte [termcopyon], 1
 10263 00007C5A 7506                <2> 		jne forgetresetstuff
 10264 00007C5C E8F6ACFFFF          <2> 		call switchtermcursor
 10265 00007C61 61                  <2> 		popa
 10266                              <2> forgetresetstuff:
 10267 00007C62 C605[7D230000]00    <2> 		mov byte [termcopyon], 0
 10268 00007C69 C3                  <2> 		ret
 10269                              <2> 		
 10270 00007C6A 0000                <2> charposline dw 0
 10271 00007C6C 00000000            <2> charposvbuf dw 0,0
 10272                              <1> 				
 10273 00007C70 00                  <1> copygui db 0
 10274 00007C71 00                  <1> graphicsset db 0
 10275 00007C72 0000                <1> graphicspos db 0,0
 10276 00007C74 00                  <1> showcursorfonton db 0
 10277 00007C75 00                  <1> savefonton db 0
 10278 00007C76 00                  <1> mouseselecton db 0
 10279                              <1> 
 10280 00007C77 00                  <1> pbutton db 0
 10281 00007C78 00                  <1> pLBUTTON db 0
 10282 00007C79 00                  <1> pRBUTTON db 0
 10283 00007C7A 00000000            <1> dragging dw 0,0
 10284 00007C7E 0000000000000000    <1> lastpos dw 0,0,0,0
 10285 00007C86 00000000            <1> colorbuf dw 0,0
 10286                              <1> 	
 10287                              <1> 	clickicon:
 10288 00007C8A B001                <1> 		mov al, 1
 10289 00007C8C A2[777C0000]        <1> 		mov [pbutton], al
 10290 00007C91 A0[787C0000]        <1> 		mov al, [pLBUTTON]
 10291 00007C96 2205[10590000]      <1> 		and al, [LBUTTON]
 10292 00007C9C 8A25[797C0000]      <1> 		mov ah, [pRBUTTON]
 10293 00007CA2 2225[11590000]      <1> 		and ah, [RBUTTON]
 10294 00007CA8 08E0                <1> 		or al, ah
 10295 00007CAA 3C00                <1> 		cmp al, 0
 10296 00007CAC 7415                <1> 		je nodragclick
 10297 00007CAE 833D[7A7C0000]01    <1> 		cmp dword [dragging], 1
 10298 00007CB5 732C                <1> 		jae dragclick
 10299 00007CB7 C705[7A7C0000]0100- <1> 		mov dword [dragging], 1
 10300 00007CBF 0000                <1>
 10301 00007CC1 EB20                <1> 		jmp dragclick
 10302                              <1> 	nodragclick:
 10303 00007CC3 31C0                <1> 		xor eax, eax
 10304 00007CC5 A3[7A7C0000]        <1> 		mov dword [dragging], eax
 10305 00007CCA A2[777C0000]        <1> 		mov [pbutton], al
 10306 00007CCF A0[10590000]        <1> 		mov al, [LBUTTON]
 10307 00007CD4 A2[787C0000]        <1> 		mov [pLBUTTON], al
 10308 00007CD9 A0[11590000]        <1> 		mov al, [RBUTTON]
 10309 00007CDE A2[797C0000]        <1> 		mov [pRBUTTON], al
 10310                              <1> 	dragclick:
 10311 00007CE3 6631C0              <1> 		xor ax, ax
 10312 00007CE6 BE[9CC80300]        <1> 		mov esi, graphicstable
 10313 00007CEB C705[9F840000]0000- <1> 		mov dword [codepointer], 0
 10314 00007CF3 0000                <1>
 10315                              <1> 	clicon2:
 10316 00007CF5 31D2                <1> 		xor edx, edx
 10317 00007CF7 31C9                <1> 		xor ecx, ecx
 10318 00007CF9 66833E01            <1> 		cmp word [esi], 1
 10319 00007CFD 0F8419000000        <1> 		je near iconselect
 10320 00007D03 66833E02            <1> 		cmp word [esi], 2
 10321 00007D07 0F8465010000        <1> 		je near textselected
 10322 00007D0D 66833E03            <1> 		cmp word [esi], 3
 10323 00007D11 0F84AF020000        <1> 		je near windowselect
 10324 00007D17 E9EB030000          <1> 		jmp nexticonsel
 10325                              <1> 	iconselect:
 10326 00007D1C 668B5606            <1> 		mov dx, [esi + 6]
 10327 00007D20 6689D0              <1> 		mov ax, dx
 10328 00007D23 668B4E08            <1> 		mov cx, [esi + 8]
 10329 00007D27 6689CB              <1> 		mov bx, cx
 10330 00007D2A 6683C320            <1> 		add bx, 32
 10331 00007D2E 6601D0              <1> 		add ax, dx
 10332 00007D31 833D[7A7C0000]01    <1> 		cmp dword [dragging], 1
 10333 00007D38 7469                <1> 		je dragicon
 10334 00007D3A 833D[7A7C0000]00    <1> 		cmp dword [dragging], 0
 10335 00007D41 740E                <1> 		je nodragiconcheck
 10336 00007D43 3935[7A7C0000]      <1> 		cmp dword [dragging], esi
 10337 00007D49 0F85B8030000        <1> 		jne near nexticonsel
 10338 00007D4F EB52                <1> 		jmp dragicon
 10339                              <1> 	nodragiconcheck:
 10340 00007D51 663905[01580000]    <1> 		cmp [mousecursorposition], ax
 10341 00007D58 0F82A9030000        <1> 		jb near nexticonsel
 10342 00007D5E 6683C040            <1> 		add ax, 64
 10343 00007D62 663905[01580000]    <1> 		cmp [mousecursorposition], ax
 10344 00007D69 0F8798030000        <1> 		ja near nexticonsel
 10345 00007D6F 6629D0              <1> 		sub ax, dx
 10346 00007D72 66390D[03580000]    <1> 		cmp [mousecursorposition + 2], cx
 10347 00007D79 0F8288030000        <1> 		jb near nexticonsel
 10348 00007D7F 66391D[03580000]    <1> 		cmp [mousecursorposition + 2], bx
 10349 00007D86 0F877B030000        <1> 		ja near nexticonsel
 10350 00007D8C 668B460A            <1> 		mov ax, [esi + 10]
 10351 00007D90 6683E001            <1> 		and ax, 1
 10352 00007D94 6683F801            <1> 		cmp ax, 1
 10353 00007D98 0F84B5000000        <1> 		je near unselecticon
 10354 00007D9E E98D000000          <1> 		jmp nodragicon
 10355                              <1> 	dragicon:
 10356 00007DA3 663905[FD570000]    <1> 		cmp [lastmouseposition], ax
 10357 00007DAA 0F8257030000        <1> 		jb near nexticonsel
 10358 00007DB0 6683C040            <1> 		add ax, 64
 10359 00007DB4 663905[FD570000]    <1> 		cmp [lastmouseposition], ax
 10360 00007DBB 0F8746030000        <1> 		ja near nexticonsel
 10361 00007DC1 6629D0              <1> 		sub ax, dx
 10362 00007DC4 66390D[FF570000]    <1> 		cmp [lastmouseposition + 2], cx
 10363 00007DCB 0F8236030000        <1> 		jb near nexticonsel
 10364 00007DD1 66391D[FF570000]    <1> 		cmp [lastmouseposition + 2], bx
 10365 00007DD8 0F8729030000        <1> 		ja near nexticonsel
 10366 00007DDE 668B460A            <1> 		mov ax, [esi + 10]
 10367 00007DE2 2410                <1> 		and al, 00010000b
 10368 00007DE4 3C10                <1> 		cmp al, 00010000b
 10369 00007DE6 7448                <1> 		je nodragicon
 10370 00007DE8 8935[7A7C0000]      <1> 		mov [dragging], esi
 10371 00007DEE 66D1E2              <1> 		shl dx, 1
 10372 00007DF1 662B15[FD570000]    <1> 		sub dx, [lastmouseposition]
 10373 00007DF8 660315[01580000]    <1> 		add dx, [mousecursorposition]
 10374 00007DFF 66D1EA              <1> 		shr dx, 1
 10375 00007E02 66030D[03580000]    <1> 		add cx, [mousecursorposition + 2]
 10376 00007E09 662B0D[FF570000]    <1> 		sub cx, [lastmouseposition + 2]
 10377 00007E10 663B15[15560000]    <1> 		cmp dx, [resolutionx2]
 10378 00007E17 7607                <1> 		jbe chkyresdrgicn
 10379 00007E19 668B15[01580000]    <1> 		mov dx, [mousecursorposition]
 10380                              <1> 	chkyresdrgicn:
 10381 00007E20 663B0D[29550000]    <1> 		cmp cx, [resolutiony]
 10382 00007E27 7607                <1> 		jbe nodragicon
 10383 00007E29 668B0D[03580000]    <1> 		mov cx, [mousecursorposition + 2]
 10384                              <1> 	nodragicon:
 10385 00007E30 66834E0A01          <1> 		or word [esi + 10], 1
 10386 00007E35 8B5E0C              <1> 		mov ebx, [esi + 12]
 10387 00007E38 668B460A            <1> 		mov ax, [esi + 10]
 10388 00007E3C 8B7602              <1> 		mov esi, [esi + 2]
 10389 00007E3F C705[9F840000]0000- <1> 		mov dword [codepointer], 0
 10390 00007E47 0000                <1>
 10391 00007E49 E862EDFFFF          <1> 		call showicon
 10392 00007E4E E9C9020000          <1> 		jmp doneiconsel
 10393                              <1> 	unselecticon:
 10394 00007E53 6683660AFE          <1> 		and word [esi + 10], 0xFFFE
 10395 00007E58 8B5E0C              <1> 		mov ebx, [esi + 12]
 10396 00007E5B 668B460A            <1> 		mov ax, [esi + 10]
 10397 00007E5F 8B7602              <1> 		mov esi, [esi + 2]
 10398 00007E62 891D[9F840000]      <1> 		mov [codepointer], ebx
 10399 00007E68 E843EDFFFF          <1> 		call showicon
 10400 00007E6D E9AA020000          <1> 		jmp doneiconsel
 10401                              <1> 	textselected:
 10402 00007E72 8B5E02              <1> 		mov ebx, [esi + 2]
 10403 00007E75 668B5606            <1> 		mov dx, [esi + 6]
 10404 00007E79 6689D0              <1> 		mov ax, dx
 10405 00007E7C 668B4E08            <1> 		mov cx, [esi + 8]
 10406                              <1> 	lengthtesttext:
 10407 00007E80 803B00              <1> 		cmp byte [ebx], 0
 10408 00007E83 7407                <1> 		je donetesttextlength
 10409 00007E85 43                  <1> 		inc ebx
 10410 00007E86 6683C010            <1> 		add ax, 16
 10411 00007E8A EBF4                <1> 		jmp lengthtesttext
 10412                              <1> 	donetesttextlength:
 10413 00007E8C 6689CB              <1> 		mov bx, cx
 10414 00007E8F 6683C30F            <1> 		add bx, 15
 10415 00007E93 833D[7A7C0000]01    <1> 		cmp dword [dragging], 1
 10416 00007E9A 7462                <1> 		je dragtext
 10417 00007E9C 833D[7A7C0000]00    <1> 		cmp dword [dragging], 0
 10418 00007EA3 740E                <1> 		je nodragtextcheck
 10419 00007EA5 3935[7A7C0000]      <1> 		cmp dword [dragging], esi
 10420 00007EAB 0F8556020000        <1> 		jne near nexticonsel
 10421 00007EB1 EB4B                <1> 		jmp dragtext
 10422                              <1> 	nodragtextcheck:
 10423 00007EB3 663915[01580000]    <1> 		cmp [mousecursorposition], dx
 10424 00007EBA 0F8247020000        <1> 		jb near nexticonsel
 10425 00007EC0 663905[01580000]    <1> 		cmp [mousecursorposition], ax
 10426 00007EC7 0F873A020000        <1> 		ja near nexticonsel
 10427 00007ECD 66390D[03580000]    <1> 		cmp [mousecursorposition + 2], cx
 10428 00007ED4 0F822D020000        <1> 		jb near nexticonsel
 10429 00007EDA 66391D[03580000]    <1> 		cmp [mousecursorposition + 2], bx
 10430 00007EE1 0F8720020000        <1> 		ja near nexticonsel
 10431 00007EE7 668B460A            <1> 		mov ax, [esi + 10]
 10432 00007EEB 6683E001            <1> 		and ax, 1
 10433 00007EEF 6683F801            <1> 		cmp ax, 1
 10434 00007EF3 0F84AA000000        <1> 		je near unselecttext
 10435 00007EF9 E986000000          <1> 		jmp nodragtext
 10436                              <1> 	dragtext:
 10437 00007EFE 663915[FD570000]    <1> 		cmp [lastmouseposition], dx
 10438 00007F05 0F82FC010000        <1> 		jb near nexticonsel
 10439 00007F0B 663905[FD570000]    <1> 		cmp [lastmouseposition], ax
 10440 00007F12 0F87EF010000        <1> 		ja near nexticonsel
 10441 00007F18 66390D[FF570000]    <1> 		cmp [lastmouseposition + 2], cx
 10442 00007F1F 0F82E2010000        <1> 		jb near nexticonsel
 10443 00007F25 66391D[FF570000]    <1> 		cmp [lastmouseposition + 2], bx
 10444 00007F2C 0F87D5010000        <1> 		ja near nexticonsel
 10445 00007F32 668B460A            <1> 		mov ax, [esi + 10]
 10446 00007F36 2410                <1> 		and al, 00010000b
 10447 00007F38 6683F810            <1> 		cmp ax, 00010000b
 10448 00007F3C 0F8442000000        <1> 		je near nodragtext
 10449 00007F42 8935[7A7C0000]      <1> 		mov [dragging], esi
 10450 00007F48 662B15[FD570000]    <1> 		sub dx, [lastmouseposition]
 10451 00007F4F 660315[01580000]    <1> 		add dx, [mousecursorposition]
 10452 00007F56 66030D[03580000]    <1> 		add cx, [mousecursorposition + 2]
 10453 00007F5D 662B0D[FF570000]    <1> 		sub cx, [lastmouseposition + 2]
 10454 00007F64 663B15[15560000]    <1> 		cmp dx, [resolutionx2]
 10455 00007F6B 7607                <1> 		jbe chkyresdrgtxt
 10456 00007F6D 668B15[01580000]    <1> 		mov dx, [mousecursorposition]
 10457                              <1> 	chkyresdrgtxt:
 10458 00007F74 663B0D[29550000]    <1> 		cmp cx, [resolutiony]
 10459 00007F7B 7607                <1> 		jbe nodragtext
 10460 00007F7D 668B0D[03580000]    <1> 		mov cx, [mousecursorposition + 2]
 10461                              <1> 	nodragtext:
 10462 00007F84 66834E0A01          <1> 		or word [esi + 10], 1
 10463 00007F89 8B5E0C              <1> 		mov ebx, [esi + 12]
 10464 00007F8C 891D[9F840000]      <1> 		mov [codepointer], ebx
 10465 00007F92 668B460A            <1> 		mov ax, [esi + 10]
 10466 00007F96 8B7602              <1> 		mov esi, [esi + 2]
 10467 00007F99 E89FF4FFFF          <1> 		call showstring
 10468 00007F9E E979010000          <1> 		jmp doneiconsel
 10469                              <1> 	unselecttext:
 10470 00007FA3 6683660AFE          <1> 		and word [esi + 10], 0xFFFE
 10471 00007FA8 8B5E0C              <1> 		mov ebx, [esi + 12]
 10472 00007FAB 668B460A            <1> 		mov ax, [esi + 10]
 10473 00007FAF 8B7602              <1> 		mov esi, [esi + 2]
 10474 00007FB2 C705[9F840000]0000- <1> 		mov dword [codepointer], 0
 10475 00007FBA 0000                <1>
 10476 00007FBC E87CF4FFFF          <1> 		call showstring
 10477 00007FC1 E956010000          <1> 		jmp doneiconsel
 10478                              <1> windowselect:
 10479 00007FC6 8B7E02              <1> 		mov edi, [esi + 2]
 10480 00007FC9 668B5606            <1> 		mov dx, [esi + 6]
 10481 00007FCD 6689D0              <1> 		mov ax, dx
 10482 00007FD0 668B4E08            <1> 		mov cx, [esi + 8]
 10483 00007FD4 6689CB              <1> 		mov bx, cx
 10484 00007FD7 6683C310            <1> 		add bx, 16
 10485 00007FDB 833D[7A7C0000]01    <1> 		cmp dword [dragging], 1
 10486 00007FE2 7467                <1> 		je dragwin
 10487 00007FE4 833D[7A7C0000]00    <1> 		cmp dword [dragging], 0
 10488 00007FEB 740E                <1> 		je nodragwincheck
 10489 00007FED 3935[7A7C0000]      <1> 		cmp dword [dragging], esi
 10490 00007FF3 0F850E010000        <1> 		jne near nexticonsel
 10491 00007FF9 EB50                <1> 		jmp dragwin
 10492                              <1> 	nodragwincheck:
 10493 00007FFB 663905[01580000]    <1> 		cmp [mousecursorposition], ax
 10494 00008002 0F82FF000000        <1> 		jb near nexticonsel
 10495 00008008 660307              <1> 		add ax, [edi]
 10496 0000800B 660307              <1> 		add ax, [edi]
 10497 0000800E 663905[01580000]    <1> 		cmp [mousecursorposition], ax
 10498 00008015 0F87EC000000        <1> 		ja near nexticonsel
 10499 0000801B 66390D[03580000]    <1> 		cmp [mousecursorposition + 2], cx
 10500 00008022 0F82DF000000        <1> 		jb near nexticonsel
 10501 00008028 66391D[03580000]    <1> 		cmp [mousecursorposition + 2], bx
 10502 0000802F 0F87D2000000        <1> 		ja near nexticonsel
 10503 00008035 6683E814            <1> 		sub ax, 20
 10504 00008039 663905[01580000]    <1> 		cmp [mousecursorposition], ax
 10505 00008040 0F87A1000000        <1> 		ja near killwin
 10506 00008046 E98B000000          <1> 		jmp nodragwin
 10507                              <1> 	dragwin:
 10508 0000804B 663905[FD570000]    <1> 		cmp [lastmouseposition], ax
 10509 00008052 0F82AF000000        <1> 		jb near nexticonsel
 10510 00008058 660307              <1> 		add ax, [edi]
 10511 0000805B 660307              <1> 		add ax, [edi]
 10512 0000805E 663905[FD570000]    <1> 		cmp [lastmouseposition], ax
 10513 00008065 0F879C000000        <1> 		ja near nexticonsel
 10514 0000806B 66390D[FF570000]    <1> 		cmp [lastmouseposition + 2], cx
 10515 00008072 0F828F000000        <1> 		jb near nexticonsel
 10516 00008078 66391D[FF570000]    <1> 		cmp [lastmouseposition + 2], bx
 10517 0000807F 0F8782000000        <1> 		ja near nexticonsel
 10518 00008085 8935[7A7C0000]      <1> 		mov [dragging], esi
 10519 0000808B 803D[A3810000]01    <1> 		cmp byte [windrag], 1
 10520 00008092 7706                <1> 		ja .nochangewindrag
 10521 00008094 FE05[A3810000]      <1> 		inc byte [windrag]
 10522                              <1> 	.nochangewindrag:
 10523 0000809A 662B15[FD570000]    <1> 		sub dx, [lastmouseposition]
 10524 000080A1 660315[01580000]    <1> 		add dx, [mousecursorposition]
 10525 000080A8 66030D[03580000]    <1> 		add cx, [mousecursorposition + 2]
 10526 000080AF 662B0D[FF570000]    <1> 		sub cx, [lastmouseposition + 2]
 10527 000080B6 663B15[15560000]    <1> 		cmp dx, [resolutionx2]
 10528 000080BD 7607                <1> 		jbe chkyresdrgwin
 10529 000080BF 668B15[01580000]    <1> 		mov dx, [mousecursorposition]
 10530                              <1> 	chkyresdrgwin:
 10531 000080C6 663B0D[29550000]    <1> 		cmp cx, [resolutiony]
 10532 000080CD 7607                <1> 		jbe nodragwin
 10533 000080CF 668B0D[03580000]    <1> 		mov cx, [mousecursorposition + 2]
 10534                              <1> 	nodragwin:
 10535 000080D6 8B5E0C              <1> 		mov ebx, [esi + 12]
 10536 000080D9 668B460A            <1> 		mov ax, [esi + 10]
 10537 000080DD 8B7602              <1> 		mov esi, [esi + 2]
 10538 000080E0 E8D6F5FFFF          <1> 		call showwindow
 10539 000080E5 EB35                <1> 		jmp doneiconsel
 10540                              <1> 	killwin:
 10541 000080E7 66C7060000          <1> 		mov word [esi], 0
 10542 000080EC C605[7C230000]00    <1> 		mov byte [termguion], 0
 10543 000080F3 E891ECFFFF          <1> 		call guiclear
 10544 000080F8 E80DEDFFFF          <1> 		call reloadallgraphics
 10545 000080FD E850EAFFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10546 00008102 E947E6FFFF          <1> 		jmp guistart
 10547                              <1> 	nexticonsel:
 10548 00008107 6683660AFE          <1> 		and word [esi + 10], 0xFFFE
 10549 0000810C 83C610              <1> 		add esi, 16
 10550 0000810F 81FE[9CCA0300]      <1> 		cmp esi, graphicstableend
 10551 00008115 7305                <1> 		jae doneiconsel
 10552 00008117 E9D9FBFFFF          <1> 		jmp clicon2
 10553                              <1> 	doneiconsel:
 10554 0000811C 833D[7A7C0000]01    <1> 		cmp dword [dragging], 1
 10555 00008123 7317                <1> 		jae doneiconsel2
 10556 00008125 A2[A3810000]        <1> 		mov [windrag], al
 10557 0000812A 833D[9F840000]00    <1> 		cmp dword [codepointer], 0
 10558 00008131 7409                <1> 		je doneiconsel2
 10559 00008133 8B1D[9F840000]      <1> 		mov ebx, [codepointer]
 10560 00008139 FFD3                <1> 		call ebx
 10561 0000813B C3                  <1> 		ret
 10562                              <1> 	doneiconsel2:
 10563 0000813C A0[10590000]        <1> 		mov al, [LBUTTON]
 10564 00008141 A2[787C0000]        <1> 		mov [pLBUTTON], al
 10565 00008146 A0[11590000]        <1> 		mov al, [RBUTTON]
 10566 0000814B A2[797C0000]        <1> 		mov [pRBUTTON], al
 10567 00008150 833D[7A7C0000]01    <1> 		cmp dword [dragging], 1
 10568 00008157 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10569 0000815D E8F0E9FFFF          <1> 		call switchmousepos2
 10570 00008162 803D[A3810000]01    <1> 		cmp byte [windrag], 1
 10571 00008169 7305                <1> 		jae noclearcursorcl
 10572 0000816B E8F9E8FFFF          <1> 		call clearmousecursor
 10573                              <1> noclearcursorcl:
 10574 00008170 E895ECFFFF          <1> 		call reloadallgraphics
 10575                              <1> noreloadgraphicsclick:
 10576 00008175 30E4                <1> 		xor ah, ah
 10577 00008177 31C9                <1> 		xor ecx, ecx
 10578 00008179 31D2                <1> 		xor edx, edx
 10579 0000817B B001                <1> 		mov al, 1
 10580 0000817D 668B15[01580000]    <1> 		mov dx, [mousecursorposition]
 10581 00008184 668B0D[03580000]    <1> 		mov cx, [mousecursorposition + 2]
 10582 0000818B 66BBE738            <1> 		mov bx, 0011100011100111b
 10583 0000818F C605[747C0000]01    <1> 		mov byte [showcursorfonton], 1
 10584 00008196 E82FF3FFFF          <1> 		call showfontvesa
 10585 0000819B C605[747C0000]00    <1> 		mov byte [showcursorfonton], 0
 10586 000081A2 C3                  <1> 		ret
 10587 000081A3 00                  <1> windrag db 0
 10588 000081A4 00000000            <1> lastdrag dw 0,0
 10589 000081A8 00000000            <1> grpctblpos dw 0,0
 10590                              <1> 
 10591                              <1> 
 10592                              <1> 
 10593 000081AC 00<rept>            <1> grphbuf times 16 db 0
 10594                              <1> 	graphicsadd:
 10595 000081BC BF[9CC80300]        <1> 		mov edi, graphicstable
 10596                              <1> 	shwgrph1:
 10597 000081C1 397702              <1> 		cmp dword [edi + 2], esi
 10598 000081C4 7411                <1> 		je showgraphicsreplace2
 10599 000081C6 83C710              <1> 		add edi, 16
 10600 000081C9 81FF[9CCA0300]      <1> 		cmp edi, graphicstableend
 10601 000081CF 0F834E020000        <1> 		jae near showgraphicsnew
 10602 000081D5 EBEA                <1> 		jmp shwgrph1
 10603                              <1> 	showgraphicsreplace2:
 10604 000081D7 8935[AE810000]      <1> 		mov [grphbuf + 2], esi
 10605 000081DD 668915[B2810000]    <1> 		mov [grphbuf + 6], dx
 10606 000081E4 66890D[B4810000]    <1> 		mov [grphbuf + 8], cx
 10607 000081EB 891D[B8810000]      <1> 		mov [grphbuf + 12], ebx
 10608 000081F1 30FF                <1> 		xor bh, bh
 10609 000081F3 88E3                <1> 		mov bl, ah
 10610 000081F5 30E4                <1> 		xor ah, ah
 10611 000081F7 66A3[B6810000]      <1> 		mov [grphbuf + 10], ax	
 10612 000081FD 66891D[AC810000]    <1> 		mov [grphbuf], bx
 10613 00008204 66A1[AC810000]      <1> 		mov ax, [grphbuf]
 10614 0000820A 6683F801            <1> 		cmp ax, 1
 10615 0000820E 0F8419000000        <1> 		je near replaceicon
 10616 00008214 6683F802            <1> 		cmp ax, 2
 10617 00008218 0F8493000000        <1> 		je near replacestring
 10618 0000821E 6683F803            <1> 		cmp ax, 3
 10619 00008222 0F840F010000        <1> 		je near replacewindow
 10620 00008228 E9D3010000          <1> 		jmp showgraphicsreplace
 10621                              <1> 	replaceicon:
 10622 0000822D 893D[7E7C0000]      <1> 		mov [lastpos], edi
 10623 00008233 8935[827C0000]      <1> 		mov [lastpos + 4], esi
 10624 00008239 8B7702              <1> 		mov esi, [edi + 2]
 10625 0000823C 668B5F0C            <1> 		mov bx, [edi + 12]
 10626 00008240 668B5706            <1> 		mov dx, [edi + 6]
 10627 00008244 668B4F08            <1> 		mov cx, [edi + 8]
 10628 00008248 668B06              <1> 		mov ax, [esi]
 10629 0000824B 66A3[867C0000]      <1> 		mov [colorbuf], ax
 10630 00008251 66A1[066E0000]      <1> 		mov ax, [background]
 10631 00008257 668906              <1> 		mov [esi], ax
 10632 0000825A 8B5F0C              <1> 		mov ebx, [edi + 12]
 10633 0000825D 668B470A            <1> 		mov ax, [edi + 10]
 10634 00008261 2401                <1> 		and al, 1
 10635 00008263 A2[A3840000]        <1> 		mov [iconselected], al
 10636 00008268 668B470A            <1> 		mov ax, [edi + 10]
 10637 0000826C E852E9FFFF          <1> 		call showicon2
 10638 00008271 8B3D[7E7C0000]      <1> 		mov edi, [lastpos]
 10639 00008277 8B7702              <1> 		mov esi, [edi + 2]
 10640 0000827A 66A1[867C0000]      <1> 		mov ax, [colorbuf]
 10641 00008280 668906              <1> 		mov [esi], ax
 10642 00008283 8B35[827C0000]      <1> 		mov esi, [lastpos + 4]
 10643 00008289 668B15[B2810000]    <1> 		mov dx, [grphbuf + 6]
 10644 00008290 668B0D[B4810000]    <1> 		mov cx, [grphbuf + 8]
 10645 00008297 668B1D[AC810000]    <1> 		mov bx, [grphbuf]
 10646 0000829E 66A1[B6810000]      <1> 		mov ax, [grphbuf + 10]
 10647 000082A4 88DC                <1> 		mov ah, bl
 10648 000082A6 8B1D[B8810000]      <1> 		mov ebx, [grphbuf + 12]
 10649 000082AC E94F010000          <1> 		jmp showgraphicsreplace
 10650                              <1> 	replacestring:
 10651 000082B1 893D[7E7C0000]      <1> 		mov [lastpos], edi
 10652 000082B7 8935[827C0000]      <1> 		mov [lastpos + 4], esi
 10653 000082BD 8B5F0C              <1> 		mov ebx, [edi + 12]
 10654 000082C0 8B7702              <1> 		mov esi, [edi + 2]
 10655 000082C3 668B5706            <1> 		mov dx, [edi + 6]
 10656 000082C7 668B4F08            <1> 		mov cx, [edi + 8]
 10657 000082CB 66A1[B9740000]      <1> 		mov ax, [colorfont2]
 10658 000082D1 66A3[867C0000]      <1> 		mov [colorbuf], ax
 10659 000082D7 66A1[066E0000]      <1> 		mov ax, [background]
 10660 000082DD 66A3[B9740000]      <1> 		mov [colorfont2], ax		
 10661 000082E3 8B5F0C              <1> 		mov ebx, [edi + 12]
 10662 000082E6 668B470A            <1> 		mov ax, [edi + 10]
 10663 000082EA 2401                <1> 		and al, 1
 10664 000082EC A2[767C0000]        <1> 		mov [mouseselecton], al
 10665 000082F1 668B470A            <1> 		mov ax, [edi + 10]
 10666 000082F5 E856F1FFFF          <1> 		call showstring2
 10667 000082FA 66A1[867C0000]      <1> 		mov ax, [colorbuf]
 10668 00008300 66A3[B9740000]      <1> 		mov [colorfont2], ax
 10669 00008306 8B3D[7E7C0000]      <1> 		mov edi, [lastpos]
 10670 0000830C 8B7702              <1> 		mov esi, [edi + 2]
 10671 0000830F 668B15[B2810000]    <1> 		mov dx, [grphbuf + 6]
 10672 00008316 668B0D[B4810000]    <1> 		mov cx, [grphbuf + 8]
 10673 0000831D 668B1D[AC810000]    <1> 		mov bx, [grphbuf]
 10674 00008324 66A1[B6810000]      <1> 		mov ax, [grphbuf + 10]
 10675 0000832A 88DC                <1> 		mov ah, bl
 10676 0000832C 8B1D[B8810000]      <1> 		mov ebx, [grphbuf + 12]
 10677 00008332 E9C9000000          <1> 		jmp showgraphicsreplace
 10678                              <1> 	replacewindow:
 10679 00008337 893D[7E7C0000]      <1> 		mov [lastpos], edi
 10680 0000833D 8935[827C0000]      <1> 		mov [lastpos + 4], esi
 10681 00008343 8B7702              <1> 		mov esi, [edi + 2]
 10682 00008346 8B3D[A5760000]      <1> 		mov edi, [windowbufloc]
 10683 0000834C 31D2                <1> 		xor edx, edx
 10684 0000834E 668B15[15560000]    <1> 		mov dx, [resolutionx2]
 10685 00008355 C1E204              <1> 		shl edx, 4
 10686 00008358 29D7                <1> 		sub edi, edx
 10687 0000835A 31D2                <1> 		xor edx, edx
 10688 0000835C 668B16              <1> 		mov dx, [esi]
 10689 0000835F 660316              <1> 		add dx, [esi]
 10690 00008362 668B4E02            <1> 		mov cx, [esi + 2]
 10691 00008366 6683C110            <1> 		add cx, 16
 10692 0000836A 66A1[066E0000]      <1> 		mov ax, [background]
 10693 00008370 803D[A3810000]01    <1> 		cmp byte [windrag], 1
 10694 00008377 7604                <1> 		jbe clearwindow
 10695 00008379 662B4E02            <1> 		sub cx, [esi + 2]
 10696                              <1> 	clearwindow:
 10697                              <1> 		%ifdef gui.background
 10698 0000837D 833D[DE6D0000]00    <1> 			cmp dword [backgroundimage], 0
 10699 00008384 7419                <1> 			je .noback
 10700 00008386 56                  <1> 			push esi
 10701 00008387 8B35[DE6D0000]      <1> 			mov esi, [backgroundimage]
 10702 0000838D 2B3D[3D550000]      <1> 			sub edi, [physbaseptr]
 10703 00008393 01FE                <1> 			add esi, edi
 10704 00008395 033D[3D550000]      <1> 			add edi, [physbaseptr]
 10705 0000839B 668B06              <1> 			mov ax, [esi]
 10706 0000839E 5E                  <1> 			pop esi
 10707                              <1> 		.noback:
 10708                              <1> 		%endif
 10709 0000839F 668907              <1> 		mov [edi], ax
 10710 000083A2 83C702              <1> 		add edi, 2
 10711 000083A5 83EA02              <1> 		sub edx, 2
 10712 000083A8 83FA00              <1> 		cmp edx, 0
 10713 000083AB 75D0                <1> 		jne clearwindow
 10714 000083AD 6649                <1> 		dec cx
 10715 000083AF 668B15[15560000]    <1> 		mov dx, [resolutionx2]
 10716 000083B6 662B16              <1> 		sub dx, [esi]
 10717 000083B9 662B16              <1> 		sub dx, [esi]
 10718 000083BC 01D7                <1> 		add edi, edx
 10719 000083BE 668B16              <1> 		mov dx, [esi]
 10720 000083C1 660316              <1> 		add dx, [esi]
 10721 000083C4 6683F900            <1> 		cmp cx, 0
 10722 000083C8 75B3                <1> 		jne clearwindow
 10723                              <1> 	endwindowclear:
 10724 000083CA C605[7D230000]00    <1> 		mov byte [termcopyon], 0
 10725 000083D1 8B3D[7E7C0000]      <1> 		mov edi, [lastpos]
 10726 000083D7 8B35[AE810000]      <1> 		mov esi, [grphbuf + 2]
 10727 000083DD 668B15[B2810000]    <1> 		mov dx, [grphbuf + 6]
 10728 000083E4 668B0D[B4810000]    <1> 		mov cx, [grphbuf + 8]
 10729 000083EB 668B1D[AC810000]    <1> 		mov bx, [grphbuf]
 10730 000083F2 66A1[B6810000]      <1> 		mov ax, [grphbuf + 10]
 10731 000083F8 88DC                <1> 		mov ah, bl
 10732 000083FA 8B1D[B8810000]      <1> 		mov ebx, [grphbuf + 12]
 10733                              <1> 	showgraphicsreplace:
 10734 00008400 897702              <1> 		mov [edi + 2], esi
 10735 00008403 66895706            <1> 		mov [edi + 6], dx
 10736 00008407 66894F08            <1> 		mov [edi + 8], cx
 10737 0000840B 895F0C              <1> 		mov [edi + 12], ebx
 10738 0000840E 30FF                <1> 		xor bh, bh
 10739 00008410 88E3                <1> 		mov bl, ah
 10740 00008412 30E4                <1> 		xor ah, ah
 10741 00008414 6689470A            <1> 		mov [edi + 10], ax
 10742 00008418 66891F              <1> 		mov [edi], bx
 10743 0000841B 8B5F0C              <1> 		mov ebx, [edi + 12]
 10744 0000841E 668B470A            <1> 		mov ax, [edi + 10]
 10745 00008422 C3                  <1> 		ret
 10746                              <1> 	showgraphicsnew:
 10747 00008423 BF[9CC80300]        <1> 		mov edi, graphicstable
 10748                              <1> 	shwgrph2:
 10749 00008428 66833F00            <1> 		cmp word [edi], 0
 10750 0000842C 74D2                <1> 		je showgraphicsreplace
 10751 0000842E 83C710              <1> 		add edi, 16
 10752 00008431 81FF[9CCA0300]      <1> 		cmp edi, graphicstableend
 10753 00008437 72EF                <1> 		jb shwgrph2
 10754                              <1> 	showgraphicsdone:
 10755 00008439 C3                  <1> 		ret
 10756                              <1> 	
 10757                              <1> putpixel: ;color in si, point is (dx,cx)
 10758                              <1> 		;destroys edi, ebx, eax
 10759 0000843A 6650                <1> 	push ax
 10760 0000843C 6653                <1> 	push bx
 10761 0000843E 31C0                <1> 	xor eax, eax
 10762 00008440 31DB                <1> 	xor ebx, ebx
 10763 00008442 31FF                <1> 	xor edi, edi
 10764 00008444 668B1D[29550000]    <1> 	mov bx, [resolutiony]
 10765 0000844B 66A1[27550000]      <1> 	mov ax, [resolutionx]
 10766 00008451 6639C2              <1> 	cmp dx, ax
 10767 00008454 7720                <1> 	ja .doneput
 10768 00008456 66D1E0              <1> 	shl ax, 1
 10769 00008459 6639D9              <1> 	cmp cx, bx
 10770 0000845C 7718                <1> 	ja .doneput
 10771 0000845E 6689CB              <1> 	mov bx, cx
 10772 00008461 52                  <1> 	push edx
 10773 00008462 F7E3                <1> 	mul ebx
 10774 00008464 5A                  <1> 	pop edx
 10775 00008465 6601D7              <1> 	add di, dx
 10776 00008468 6601D7              <1> 	add di, dx
 10777 0000846B 01C7                <1> 	add edi, eax
 10778 0000846D 033D[3D550000]      <1> 	add edi, [physbaseptr]
 10779 00008473 668937              <1> 	mov [edi], si
 10780                              <1> .doneput:
 10781 00008476 665B                <1> 	pop bx
 10782 00008478 6658                <1> 	pop ax
 10783 0000847A C3                  <1> 	ret
 10784                              <1> 	
 10785                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10786 0000847B 31FF                <1> 	xor edi, edi
 10787 0000847D 31C0                <1> 	xor eax, eax
 10788 0000847F 31DB                <1> 	xor ebx, ebx
 10789 00008481 668B1D[15560000]    <1> 	mov bx, [resolutionx2]
 10790 00008488 6689D7              <1> 	mov di, dx
 10791 0000848B 6601D7              <1> 	add di, dx
 10792 0000848E 6689C8              <1> 	mov ax, cx
 10793 00008491 F7E3                <1> 	mul ebx
 10794 00008493 01C7                <1> 	add edi, eax
 10795 00008495 033D[3D550000]      <1> 	add edi, [physbaseptr]
 10796 0000849B C3                  <1> 	ret
 10797                              <1> 
 10798 0000849C 00                  <1> 	mouseon db 0
 10799 0000849D 0000                <1> 	icon dw 0	;pointer to icon
 10800 0000849F 00000000            <1> 	codepointer dd 0 ;pointer to code
 10801 000084A3 00                  <1> 	iconselected db 0
 10802                                  %endif
 10803                                  %ifdef network.included
 10804                                  	%include "source/network.asm"
 10805                                  %endif
 10806                                      %include "source/data.asm"
 10807 000084A4 626F6F742E736800    <1> 	bootfilename db	"boot.sh",0
 10808 000084AC 73687573683A2000    <1> 	notfound1 db	"shush: ",0
 10809 000084B4 3A206E6F7420666F75- <1> 	notfound2 db	": not found",10,0
 10810 000084BD 6E640A00            <1>
 10811 000084C1 757365726E616D653A- <1> 	userask db	"username:",0
 10812 000084CA 00                  <1>
 10813 000084CB 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10814 000084D4 00                  <1>
 10815 000084D5 40                  <1> 	computer db	"@"
 10816                              <1> %ifdef io.serial
 10817                              <1> 	computername db	"SollerOS.",io.serial," ",0
 10818                              <1> %else
 10819 000084D6 536F6C6C65724F5320- <1> 	computername db	"SollerOS ",0
 10820 000084DF 00                  <1>
 10821                              <1> %endif
 10822 000084E0 5D242000            <1> 	endprompt db "]$ ",0
 10823 000084E4 0D                  <1> 	crlf 	db	13
 10824 000084E5 0A00                <1> 	line	db	10,0
 10825                              <1> 	userlst:
 10826 000084E7 726F6F7400          <1> 			db "root",0
 10827 000084EC 617765736F6D65706F- <1> 			db "awesomepower",0
 10828 000084F5 77657200            <1>
 10829 000084F9 7573657200          <1> 			db "user",0
 10830 000084FE 70617373776F726400  <1> 			db "password",0
 10831 00008507 6E00                <1> 			db "n",0	;abuse for quick entry-a quick double n followed by a double enter will get you in
 10832 00008509 00                  <1> 			db 0
 10833                              <1> 	userlstend:
 10834                              <1> 	
 10835 0000850A 00                  <1> 	guion db 0
 10836 0000850B 00                  <1> 	DriveNumber db 0
 10837 0000850C 00000000            <1> 	lbaad dd 0
 10838 00008510 0000000000000000    <1> 	initialtsc dd 0,0
 10839 00008518 0000000000000000    <1> 	lasttsc dd 0,0
 10840 00008520 00<rept>            <1> 	memlistbuf times 576 db 0
 10841 00008760 00000000            <1> 	memlistend: dd 0
 10842                              <1> %ifdef io.serial
 10843                              <1> %else
 10844                              <1> fonts:
 10845                              <1> %ifdef font.unicode
 10846 00008764 <incbin>            <1> 	incbin "source/fonts/fonts-unicode.pak"
 10847                              <1> %else
 10848                              <1> 	incbin "source/fonts/fonts-ascii.pak"
 10849                              <1> %endif
 10850                              <1> fontend:
 10851                              <1> %endif
 10852                              <1> osend:	;this is the end of the operating system's space on disk
 10853                                  %ifdef disk.none
 10854                                  	diskfileindex:
 10855                                  	enddiskfileindex:
 10856                                      %include "source/bss.asm"
 10857                                  %else
 10858                                      %include "build/fileindex.asm"
 10859                              <1> diskfileindex:
 10860 00038764 5F696D672E62696E00  <1> db "_img.bin",0
 10861 0003876D C5010000            <1> dd (f0-$$)/512
 10862 00038771 0C000000            <1> dd (f1-f0)/512
 10863 00038775 626F6F742E736800    <1> db "boot.sh",0
 10864 0003877D D1010000            <1> dd (f1-$$)/512
 10865 00038781 01000000            <1> dd (f2-f1)/512
 10866 00038785 646F73746573742E63- <1> db "dostest.com",0
 10867 0003878E 6F6D00              <1>
 10868 00038791 D2010000            <1> dd (f2-$$)/512
 10869 00038795 01000000            <1> dd (f3-f2)/512
 10870 00038799 6578656300          <1> db "exec",0
 10871 0003879E D3010000            <1> dd (f3-$$)/512
 10872 000387A2 01000000            <1> dd (f4-f3)/512
 10873 000387A6 66696E616C636F756E- <1> db "finalcount.sn",0
 10874 000387AF 742E736E00          <1>
 10875 000387B4 D4010000            <1> dd (f4-$$)/512
 10876 000387B8 01000000            <1> dd (f5-f4)/512
 10877 000387BC 666F726B00          <1> db "fork",0
 10878 000387C1 D5010000            <1> dd (f5-$$)/512
 10879 000387C5 01000000            <1> dd (f6-f5)/512
 10880 000387C9 6775697465737400    <1> db "guitest",0
 10881 000387D1 D6010000            <1> dd (f6-$$)/512
 10882 000387D5 03000000            <1> dd (f7-f6)/512
 10883 000387D9 696E7400            <1> db "int",0
 10884 000387DD D9010000            <1> dd (f7-$$)/512
 10885 000387E1 01000000            <1> dd (f8-f7)/512
 10886 000387E5 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 10887 000387EE 2E736E00            <1>
 10888 000387F2 DA010000            <1> dd (f8-$$)/512
 10889 000387F6 01000000            <1> dd (f9-f8)/512
 10890 000387FA 6D6172696F2E736E00  <1> db "mario.sn",0
 10891 00038803 DB010000            <1> dd (f9-$$)/512
 10892 00038807 01000000            <1> dd (f10-f9)/512
 10893 0003880B 72617974726163652E- <1> db "raytrace.elf",0
 10894 00038814 656C6600            <1>
 10895 00038818 DC010000            <1> dd (f10-$$)/512
 10896 0003881C 1E000000            <1> dd (f11-f10)/512
 10897 00038820 736F6E676F74696D65- <1> db "songotime.sn",0
 10898 00038829 2E736E00            <1>
 10899 0003882D FA010000            <1> dd (f11-$$)/512
 10900 00038831 01000000            <1> dd (f12-f11)/512
 10901 00038835 73736500            <1> db "sse",0
 10902 00038839 FB010000            <1> dd (f12-$$)/512
 10903 0003883D 02000000            <1> dd (f13-f12)/512
 10904 00038841 74656C7900          <1> db "tely",0
 10905 00038846 FD010000            <1> dd (f13-$$)/512
 10906 0003884A 02000000            <1> dd (f14-f13)/512
 10907 0003884E 7475746F7269616C2E- <1> db "tutorial.sh",0
 10908 00038857 736800              <1>
 10909 0003885A FF010000            <1> dd (f14-$$)/512
 10910 0003885E 03000000            <1> dd (f15-f14)/512
 10911 00038862 756E667300          <1> db "unfs",0
 10912 00038867 02020000            <1> dd (f15-$$)/512
 10913 0003886B 02000000            <1> dd (f16-f15)/512
 10914                              <1> enddiskfileindex:
 10915                              <1> 
 10916                                      %include "source/bss.asm"
 10917 0003886F 00<rept>            <1> align 512, db 0
 10918                              <1> bssstart equ $
 10919                              <1> bsscopy equ $
 10920                              <1> initialstack equ bsscopy
 10921                              <1> stackend equ initialstack + 8192
 10922                              <1> sigtable equ stackend + 4
 10923                              <1> fileindex equ sigtable + 4
 10924                              <1> fileindexend equ fileindex + 1024
 10925                              <1> previousstack equ fileindexend
 10926                              <1> lastfolderloc equ previousstack + 4
 10927                              <1> currentfolderloc equ lastfolderloc + 4
 10928                              <1> currentfolder equ currentfolderloc + 4
 10929                              <1> currentfolderend equ currentfolder + 512
 10930                              <1> uid equ currentfolderend
 10931                              <1> ranboot equ uid + 4
 10932                              <1> IFON equ ranboot + 1
 10933                              <1> IFTRUE equ IFON + 1
 10934                              <1> BATCHPOS equ IFTRUE + 100
 10935                              <1> BATCHISON equ BATCHPOS + 4
 10936                              <1> LOOPON equ BATCHISON + 1
 10937                              <1> LOOPPOS	equ LOOPON + 1
 10938                              <1> variables equ LOOPPOS + 4
 10939                              <1> varend equ variables + 4096
 10940                              <1> buftxt2 equ varend
 10941                              <1> buftxt equ buftxt2 + 1024
 10942                              <1> buftxtend equ buftxt + 1024
 10943                              <1> buf2 equ buftxtend
 10944                              <1> numbuf equ buf2 + 20
 10945                              <1> %ifdef io.serial
 10946                              <1> 	lastcommandpos equ numbuf
 10947                              <1> %else
 10948                              <1> 	%ifdef gui.included
 10949                              <1> 		graphicstable equ numbuf ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 10950                              <1> 		graphicstableend equ graphicstable + 512
 10951                              <1> 		%ifdef gui.background
 10952                              <1> 			backgroundbuffer equ graphicstableend
 10953                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 10954                              <1> 			mousecolorbuf equ backgroundbufferend
 10955                              <1> 		%else
 10956                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 10957                              <1> 		%endif
 10958                              <1> 		mcolorend equ mousecolorbuf + 256
 10959                              <1> 		videobuf equ mcolorend	;1680x1050 pixels in characters
 10960                              <1> 		videobufend	equ videobuf + 210*65*4;2
 10961                              <1> 		videobuf2 equ videobufend
 10962                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
 10963                              <1> 	%else
 10964                              <1> 		videobuf equ numbuf
 10965                              <1> 		videobufend equ videobuf + 80*30*4
 10966                              <1> 		videobuf2 equ videobufend
 10967                              <1> 		videobuf2end equ videobuf2 + 80*30*4
 10968                              <1> 	%endif
 10969                              <1> 	lastcommandpos: equ videobuf2end
 10970                              <1> %endif
 10971                              <1> 	commandbufpos: equ lastcommandpos + 4
 10972                              <1> 	commandlistentries: equ commandbufpos + 4
 10973                              <1> 	commandsentered: equ commandlistentries + 4
 10974                              <1> 	commandbuf: equ commandsentered + 4
 10975                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 10976                              <1> %ifdef network.included
 10977                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 10978                              <1> 	rbuffend equ rbuffstart + 8192 + 16 ;extra space used for the WRAP bit in rtl8139
 10979                              <1> 	rbuffoverflow equ rbuffend + 1500
 10980                              <1> %else
 10981                              <1> 	rbuffstart equ commandbufend
 10982                              <1> 	rbuffend equ commandbufend
 10983                              <1> %endif
 10984                              <1> %ifdef threads.included
 10985                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 1024
 10986                              <1> 	threadlistend: equ threadlist + 1024*4
 10987                              <1> 	stacks:	equ threadlistend ;NOT TRUE:i use SS now for proper stack management. This makes sure stacks never screw with other memory
 10988                              <1> 	stack1: equ stacks + 2048  ;woah, thats a lot of space for stacks
 10989                              <1> 	bssend equ stack1 + 1024*2048
 10990                              <1> %else
 10991                              <1> 	bssend equ rbuffend
 10992                              <1> %endif
 10993                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 10994                                      %include "build/files.asm"
 10995                              <1> align 512,db 0
 10996                              <1> f0:
 10997 00038A00 <incbin>            <1> incbin "included/_img.bin"
 10998                              <1> align 512,db 0
 10999                              <1> f1:
 11000 0003A200 <incbin>            <1> incbin "included/boot.sh"
 11001 0003A318 00<rept>            <1> align 512,db 0
 11002                              <1> f2:
 11003 0003A400 <incbin>            <1> incbin "included/dostest.com"
 11004 0003A52F 00<rept>            <1> align 512,db 0
 11005                              <1> f3:
 11006 0003A600 <incbin>            <1> incbin "included/exec"
 11007 0003A6E9 00<rept>            <1> align 512,db 0
 11008                              <1> f4:
 11009 0003A800 <incbin>            <1> incbin "included/finalcount.sn"
 11010 0003A902 00<rept>            <1> align 512,db 0
 11011                              <1> f5:
 11012 0003AA00 <incbin>            <1> incbin "included/fork"
 11013 0003AB4C 00<rept>            <1> align 512,db 0
 11014                              <1> f6:
 11015 0003AC00 <incbin>            <1> incbin "included/guitest"
 11016 0003B02E 00<rept>            <1> align 512,db 0
 11017                              <1> f7:
 11018 0003B200 <incbin>            <1> incbin "included/int"
 11019 0003B3A6 00<rept>            <1> align 512,db 0
 11020                              <1> f8:
 11021 0003B400 <incbin>            <1> incbin "included/lostwoods.sn"
 11022 0003B4AE 00<rept>            <1> align 512,db 0
 11023                              <1> f9:
 11024 0003B600 <incbin>            <1> incbin "included/mario.sn"
 11025 0003B63A 00<rept>            <1> align 512,db 0
 11026                              <1> f10:
 11027 0003B800 <incbin>            <1> incbin "included/raytrace.elf"
 11028 0003F320 00<rept>            <1> align 512,db 0
 11029                              <1> f11:
 11030 0003F400 <incbin>            <1> incbin "included/songotime.sn"
 11031 0003F44A 00<rept>            <1> align 512,db 0
 11032                              <1> f12:
 11033 0003F600 <incbin>            <1> incbin "included/sse"
 11034 0003F88A 00<rept>            <1> align 512,db 0
 11035                              <1> f13:
 11036 0003FA00 <incbin>            <1> incbin "included/tely"
 11037 0003FC1B 00<rept>            <1> align 512,db 0
 11038                              <1> f14:
 11039 0003FE00 <incbin>            <1> incbin "included/tutorial.sh"
 11040 00040352 00<rept>            <1> align 512,db 0
 11041                              <1> f15:
 11042 00040400 <incbin>            <1> incbin "included/unfs"
 11043                              <1> align 512,db 0
 11044                              <1> f16:
 11045                                  %endif
