     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define hardware.automatic
    29                              <1> ;Automatically load the sound and network drivers.
    30                              <1> 
    31                              <1> %define threads.included
    32                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    33                              <1> 
    34                              <1> %define exceptions.included
    35                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    36                              <1> 
    37                              <1> ;%define disk.protected
    38                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking
    39                              <1> 
    40                              <1> %define disk.real
    41                              <1> ;Use real mode for disk access-this gives greater compatibility
    42                              <1> 
    43                              <1> %define sound.included
    44                              <1> ;This includes the sound drivers
    45                              <1> 
    46                              <1> %define network.included
    47                              <1> ;This includes the network stack
    48                              <1> 
    49                              <1> %define rtl8169.included
    50                              <1> ;This includes the RTL8169 drivers
    51                              <1> 
    52                              <1> %define rtl8139.included
    53                              <1> ;This includes the RTL8139 drivers
    54                              <1> 
    55                              <1> %define ne2000.included
    56                              <1> ;This includes the ne2000 drivers
    57                              <1> 
    58                              <1> %define i8254x.included
    59                              <1> ;This includes the Intel 8254x drivers
    60                              <1> 
    61                              <1> ;%define sector.debug
    62                              <1> ;Dump the contents of the first sector of SollerOS
    63                              <1> 
    64                              <1> ;%define system.simple 
    65                              <1> ;The smallest possible system, overrides all options
    66                              <1> 
    67                              <1> ;FIX DEPENDANCIES
    68                              <1> %ifdef gui.included
    69                              <1> 	%undef io.serial
    70                              <1> %else
    71                              <1> 	%undef gui.alphablending
    72                              <1> 	%undef gui.background
    73                              <1> %endif
    74                              <1> %ifdef disk.protected
    75                              <1> 	%undef disk.real
    76                              <1> %endif
    77                              <1> %ifdef network.included
    78                              <1> %else
    79                              <1> 	%undef i8254x.included
    80                              <1> 	%undef ne2000.included
    81                              <1> 	%undef rtl8139.included
    82                              <1> 	%undef rtl8169.included
    83                              <1> %endif
    84                              <1> %ifdef system.simple
    85                              <1> 	%define io.serial "1"
    86                              <1> 	%define disk.real
    87                              <1> 	%undef gui.included
    88                              <1> 	%undef gui.alphablending
    89                              <1> 	%undef gui.background
    90                              <1> 	%undef terminal.vsync
    91                              <1> 	%undef hardware.automatic
    92                              <1> 	%undef threads.included
    93                              <1> 	%undef exceptions.included
    94                              <1> 	%undef disk.protected
    95                              <1> 	%undef sound.included
    96                              <1> 	%undef network.included
    97                              <1> 	%undef rtl8139.included
    98                              <1> 	%undef rtl8169.included
    99                              <1> 	%undef ne2000.included
   100                              <1> 	%undef i8254x.included
   101                              <1> 	%undef sector.debug
   102                              <1> %endif
   103                                  [BITS 16]
   104                                      %include "source/boot.asm"
   105                              <1>     ; MENU.ASM
   106                              <1> %include 'source/signature.asm'
   107                              <2> signature:
   108 00000000 536F6C6C65724F53    <2> db "SollerOS" ;Operating system name
   109 00000008 20416C706861204275- <2> db " Alpha Build ",0	;Soller OS development level
   110 00000011 696C642000          <2>
   111 00000016 F0000000            <2> dd 240	;version number
   112                              <2> signatureend:
   113                              <1> boot:
   114 0000001A 8CC8                <1> 	mov ax, cs
   115 0000001C 8ED8                <1> 	mov ds, ax
   116 0000001E 8EC0                <1> 	mov es, ax
   117 00000020 8ED0                <1> 	mov ss, ax
   118 00000022 880E[5DA3]          <1> 	mov [DriveNumber], cl
   119 00000026 668916[5EA3]        <1> 	mov [lbaad], edx
   120                              <1> %ifdef io.serial
   121                              <1> 	call getmemorysize
   122                              <1> 	mov si, serialmsg
   123                              <1> 	call printrm
   124                              <1> 	jmp pmode
   125                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
   126                              <1> %else
   127 0000002B E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   128 0000002E E95700              <1> 	jmp pmode
   129                              <1> %endif
   130                              <1> 	
   131                              <1> vgaset:
   132 00000031 B81200              <1> 	mov ax, 12h
   133 00000034 31DB                <1> 	xor bx, bx
   134 00000036 CD10                <1> 	int 10h
   135 00000038 C606[5CA3]00        <1> 	mov byte [guion], 0
   136 0000003D E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   137 00000040 C3                  <1> 	ret
   138                              <1> 
   139                              <1> getmemorysize:
   140 00000041 BF[62A3]            <1> 	mov di, memlistbuf
   141 00000044 6631DB              <1> 	xor ebx, ebx
   142                              <1> getmemsizeloop:
   143 00000047 66B820E80000        <1> 	mov eax, 0xE820
   144 0000004D 66BA50414D53        <1> 	mov edx, 0x0534D4150
   145 00000053 66B918000000        <1> 	mov ecx, 24
   146 00000059 CD15                <1> 	int 0x15
   147 0000005B 81C71800            <1> 	add di, 24
   148 0000005F 81FF[A2A5]          <1> 	cmp di, memlistend
   149 00000063 7309                <1> 	jae nomoregetmemsize
   150 00000065 6681FB00000000      <1> 	cmp ebx, 0
   151 0000006C 75D9                <1> 	jne getmemsizeloop
   152                              <1> nomoregetmemsize:
   153 0000006E 81EF[62A3]          <1> 	sub di, memlistbuf
   154 00000072 893E[A2A5]          <1> 	mov [memlistend], di
   155 00000076 C3                  <1> 	ret
   156                              <1> 	
   157                              <1> printrm:			; 'si' comes in with string address
   158 00000077 BB0700              <1>     mov bx,07		; write to display
   159 0000007A B40E                <1>     mov ah,0Eh		; screen function
   160 0000007C 8A04                <1>    .lp:    mov al,[si]         ; get next character
   161 0000007E 3C00                <1>     cmp al,0		; look for terminator 
   162 00000080 7405                <1>     je .done		; zero byte at end of string
   163 00000082 CD10                <1>     int 10h		; write character to screen.    
   164 00000084 46                  <1> 	inc si	     	; move to next character
   165 00000085 EBF5                <1>     jmp .lp		; loop
   166 00000087 C3                  <1> .done: ret
   167                                      %include "source/pmode.asm"
   168                              <1> [BITS 16]
   169                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   170                              <1> ;	16-bit real mode
   171                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   172                              <1> 
   173                              <1> pmode:
   174 00000088 6631C0              <1> 	xor eax, eax
   175 0000008B 6631DB              <1> 	xor ebx, ebx
   176 0000008E 6631C9              <1> 	xor ecx, ecx
   177 00000091 6631D2              <1> 	xor edx, edx
   178 00000094 6631F6              <1> 	xor esi, esi
   179 00000097 6631FF              <1> 	xor edi, edi
   180 0000009A BA9200              <1> 	mov dx, 0x92
   181 0000009D EC                  <1> 	in al, dx	;;A20
   182 0000009E 0C02                <1> 	or al, 2
   183 000000A0 EE                  <1> 	out dx, al
   184 000000A1 8CCB                <1> 	mov bx,cs		; EBX=segment
   185 000000A3 66C1E304            <1> 	shl ebx,4		;	<< 4
   186 000000A7 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   187 000000AB A3[AC03]            <1> 	mov [gdt2 + 2],ax
   188 000000AE A3[B403]            <1> 	mov [gdt3 + 2],ax
   189 000000B1 66C1E810            <1> 	shr eax,16
   190 000000B5 A2[AE03]            <1> 	mov [gdt2 + 4],al
   191 000000B8 A2[B603]            <1> 	mov [gdt3 + 4],al
   192 000000BB 8826[B103]          <1> 	mov [gdt2 + 7],ah
   193 000000BF 8826[B903]          <1> 	mov [gdt3 + 7],ah
   194                              <1> 
   195 000000C3 66B8[A2A50000]      <1> 	mov eax, initialstack
   196 000000C9 660306[4202]        <1> 	add eax, [newcodecache]
   197 000000CE A3[A403]            <1> 	mov [gdts + 2],ax
   198 000000D1 66C1E810            <1> 	shr eax, 16
   199 000000D5 A2[A603]            <1> 	mov [gdts + 4],al
   200 000000D8 8826[A903]          <1> 	mov [gdts + 7], ah
   201                              <1> 	
   202 000000DC 66A1[4202]          <1> 	mov eax, [newcodecache]
   203 000000E0 A3[BC03]            <1> 	mov [gdt4 + 2],ax
   204 000000E3 A3[C403]            <1> 	mov [gdt5 + 2],ax
   205 000000E6 A3[CC03]            <1> 	mov [gdtv8086 + 2], ax
   206 000000E9 A3[D403]            <1> 	mov [gdtv80862 + 2], ax
   207 000000EC 66C1E810            <1> 	shr eax,16
   208 000000F0 A2[BE03]            <1> 	mov [gdt4 + 4],al
   209 000000F3 A2[C603]            <1> 	mov [gdt5 + 4],al
   210 000000F6 A2[CE03]            <1> 	mov [gdtv8086 + 4],al
   211 000000F9 A2[D603]            <1> 	mov [gdtv80862 + 4],al
   212 000000FC 8826[C103]          <1> 	mov [gdt4 + 7],ah
   213 00000100 8826[C903]          <1> 	mov [gdt5 + 7],ah
   214 00000104 8826[D103]          <1> 	mov [gdtv8086 + 7],ah
   215 00000108 8826[D903]          <1> 	mov [gdtv80862 + 7],ah
   216                              <1> 	
   217 0000010C 66B800004000        <1> 	mov eax, dosprogloc
   218 00000112 660306[4202]        <1> 	add eax, [newcodecache]
   219 00000117 A3[DC03]            <1> 	mov [gdtdos + 2],ax
   220 0000011A A3[E403]            <1> 	mov [gdtdos2 + 2],ax
   221 0000011D 66C1E810            <1> 	shr eax,16
   222 00000121 A2[DE03]            <1> 	mov [gdtdos + 4],al
   223 00000124 A2[E603]            <1> 	mov [gdtdos2 + 4],al
   224 00000127 8826[E103]          <1> 	mov [gdtdos + 7],ah
   225 0000012B 8826[E903]          <1> 	mov [gdtdos2 + 7],ah
   226                              <1> 	
   227                              <1> ; fix up gdt and idt
   228 0000012F 67668D83[92030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   229 00000137 66A3[8803]          <1> 	mov [gdtr + 2],eax
   230 0000013B 67668D83[EA030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   231 00000143 66A3[8E03]          <1> 	mov [idtr + 2],eax
   232 00000147 FA                  <1> 	cli
   233 00000148 0F0116[8603]        <1> 	lgdt [gdtr]
   234 0000014D 0F011E[8C03]        <1> 	lidt [idtr]
   235 00000152 6631DB              <1> 	xor ebx, ebx
   236 00000155 8CDB                <1> 	mov bx, ds
   237 00000157 66891E[3E02]        <1> 	mov [basecache], ebx
   238 0000015C 0F20C0              <1> 	mov eax,cr0
   239 0000015F 0C01                <1> 	or al,1
   240 00000161 0F22C0              <1> 	mov cr0,eax
   241 00000164 EA[6901]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   242                              <1> [BITS 32]
   243                              <1> do_pm:
   244 00000169 31C0                <1> 	xor eax, eax
   245 0000016B 66B82000            <1> 	mov ax, SYS_DATA_SEL
   246 0000016F 8ED8                <1> 	mov ds, ax
   247 00000171 8EC0                <1> 	mov es, ax
   248 00000173 8EE0                <1> 	mov fs, ax
   249 00000175 66B83000            <1> 	mov ax, NEW_DATA_SEL
   250 00000179 8EE8                <1> 	mov gs, ax
   251                              <1> 	
   252                              <1> copykernel:
   253 0000017B 648B06              <1> 	mov eax, [fs:esi]
   254 0000017E 658906              <1> 	mov [gs:esi], eax
   255 00000181 81C604000000        <1> 	add esi, 4
   256 00000187 81FE[A2A50000]      <1> 	cmp esi, bsscopy
   257 0000018D 72EC                <1> 	jb copykernel
   258 0000018F EA[96010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   259                              <1> 	
   260                              <1> done_copy:
   261 00000196 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   262 0000019A 8ED8                <1> 	mov ds, ax
   263 0000019C 8EC0                <1> 	mov es, ax
   264 0000019E 8EE0                <1> 	mov fs, ax
   265                              <1> 	;mov ax, STACK_SEL
   266 000001A0 8ED0                <1> 	mov ss, ax
   267 000001A2 BC[42B50000]        <1> 	mov esp, stackend
   268 000001A7 66B82000            <1> 	mov ax, SYS_DATA_SEL
   269 000001AB 8EE8                <1> 	mov gs, ax
   270                              <1> 	
   271 000001AD E8A15F0000          <1> 	call initialize	;initialize drivers
   272                              <1> 	
   273 000001B2 A1[42020000]        <1> 	mov eax, [newcodecache]
   274 000001B7 C1E804              <1> 	shr eax, 4
   275 000001BA A3[3E020000]        <1> 	mov [basecache], eax
   276                              <1> 	
   277 000001BF BE[A8F01100]        <1> 	mov esi, bssend
   278 000001C4 31C0                <1> 	xor eax, eax
   279                              <1> clearkernelbuffers:
   280 000001C6 8906                <1> 	mov [esi], eax
   281 000001C8 81EE04000000        <1> 	sub esi, 4
   282 000001CE 81FE[A2A50000]      <1> 	cmp esi, bsscopy
   283 000001D4 77F0                <1> 	ja clearkernelbuffers
   284 000001D6 FB                  <1> 	sti
   285                              <1> 
   286                              <1> getmemoryspace:
   287 000001D7 BE[62A30000]        <1> 	mov esi, memlistbuf
   288 000001DC 31FF                <1> 	xor edi, edi
   289 000001DE 668B3D[A2A50000]    <1> 	mov di, [memlistend]
   290 000001E5 01F7                <1> 	add edi, esi
   291 000001E7 31C0                <1> 	xor eax, eax
   292                              <1> memoryspaceaddition:
   293 000001E9 39FE                <1> 	cmp esi, edi
   294 000001EB 7322                <1> 	jae finishedmemspacecalc
   295 000001ED 81C608000000        <1> 	add esi, 8
   296 000001F3 8B0E                <1> 	mov ecx, [esi]
   297 000001F5 81C608000000        <1> 	add esi, 8
   298 000001FB 8B1E                <1> 	mov ebx, [esi]
   299 000001FD 81C608000000        <1> 	add esi, 8
   300 00000203 81FB01000000        <1> 	cmp ebx, 1
   301 00000209 75DE                <1> 	jne memoryspaceaddition
   302 0000020B 01C8                <1> 	add eax, ecx
   303 0000020D EBDA                <1> 	jmp memoryspaceaddition
   304                              <1> finishedmemspacecalc:
   305 0000020F A3[53020000]        <1> 	mov [memoryspace], eax
   306                              <1> %ifdef gui.included
   307 00000214 803D[5CA30000]00    <1> 	cmp byte [guion], 0
   308 0000021B 741C                <1> 	je normalstartup
   309 0000021D 8B1D[3E020000]      <1> 	mov ebx, [basecache]
   310 00000223 C1E304              <1> 	shl ebx, 4
   311 00000226 8B3D[3F570000]      <1> 	mov edi, [physbaseptr]
   312 0000022C 29DF                <1> 	sub edi, ebx
   313 0000022E 893D[3F570000]      <1> 	mov [physbaseptr], edi
   314 00000234 E9DF640000          <1> 	jmp guiboot
   315                              <1> %endif
   316                              <1> normalstartup:
   317 00000239 E969270000          <1> 	jmp os
   318                              <1> 	
   319 0000023E 00000000            <1> basecache dd 0
   320 00000242 00001000            <1> newcodecache dd 0x100000
   321                              <1> 
   322 00000246 00                  <1> testingcpuspeed db 0
   323 00000247 00000000            <1> cpuspeedperint dd 0
   324 0000024B 0000000000000000    <1> cpuclocksperint dd 0,0
   325 00000253 00000000            <1> memoryspace dd 0
   326 00000257 7D0A                <1> pitdiv dw 2685
   327 00000259 2E562200            <1> timeinterval dd 2250286
   328 0000025D 00000000            <1> timeseconds dd 0
   329 00000261 00000000            <1> timenanoseconds dd 0
   330 00000265 00                  <1> soundon db 0
   331 00000266 0000                <1> soundrepititions dw 0
   332 00000268 00000000            <1> soundpos dd 0
   333 0000026C 00000000            <1> soundendpos dd 0
   334                              <1> 
   335                              <1> cpuspeedend:
   336 00000270 C605[46020000]00    <1> 	mov byte [testingcpuspeed], 0
   337 00000277 A3[47020000]        <1> 	mov [cpuspeedperint], eax
   338 0000027C B8[004E0000]        <1> 	mov eax, cpuspeedloopend
   339 00000281 890424              <1> 	mov [esp], eax
   340 00000284 E9ED000000          <1> 	jmp handled
   341                              <1> 
   342                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   343                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   344                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   345                              <1> 
   346                              <1> pitinterrupt: ;this controls threading
   347 00000289 FA                  <1> 	cli
   348 0000028A 803D[46020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   349 00000291 74DD                <1> 	je cpuspeedend
   350                              <1> 		
   351 00000293 E8B7000000          <1> 	call timekeeper ;this updates the internal time
   352                              <1> 	
   353 00000298 803D[65020000]01    <1> 	cmp byte [soundon], 1
   354 0000029F 0F847E580000        <1> 	je near PCSpeakerRAW
   355                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   356                              <1> %ifdef threads.included
   357 000002A5 803D[13670000]01    <1> 	cmp byte [threadson], 1
   358 000002AC 0F8401640000        <1> 	je near threadswitch
   359                              <1> %endif
   360                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   361 000002B2 803D[13670000]00    <1> 	cmp byte [threadson], 0
   362 000002B9 0F84B7000000        <1> 	je near handled
   363                              <1> %ifdef io.serial
   364                              <1> 	jmp handled
   365                              <1> %else
   366 000002BF 60                  <1> 	pusha
   367 000002C0 E464                <1> 	in al, 64h
   368 000002C2 A820                <1> 	test al, 20h
   369 000002C4 0F85AA000000        <1> 	jnz near handled2
   370 000002CA E460                <1> 	in al, 60h
   371 000002CC 3C01                <1> 	cmp al, 1		;escape
   372 000002CE 7405                <1> 	je userint
   373 000002D0 E99F000000          <1> 	jmp handled2
   374                              <1> ;	cmp al, 0x57
   375                              <1> ;	jne near handled2
   376                              <1> ;pauseint:	;F11 pauses
   377                              <1> ;	in al, 64h
   378                              <1> ;	test al, 20h
   379                              <1> ;	jnz pauseint
   380                              <1> ;	in al, 60h
   381                              <1> ;	cmp al, 0xD7
   382                              <1> ;	jne pauseint
   383                              <1> ;	mov esi, pausemsg
   384                              <1> ;	call print
   385                              <1> ;	cli
   386                              <1> ;pauselp:
   387                              <1> ;	nop
   388                              <1> ;	in al, 64h
   389                              <1> ;	test al, 20h
   390                              <1> ;	jnz pauselp
   391                              <1> ;	in al, 60h
   392                              <1> ;	cmp al, 0x57
   393                              <1> ;	je near handled2
   394                              <1> ;	jmp pauselp
   395                              <1> ;pausemsg db "Paused",10,0
   396                              <1> userint:
   397 000002D5 31C0                <1> 	xor eax, eax
   398 000002D7 3905[A2B50000]      <1> 	cmp [sigtable], eax
   399 000002DD 7411                <1> 	je .nosighook
   400 000002DF 8B1D[A2B50000]      <1> 	mov ebx, [sigtable]
   401 000002E5 895C2420            <1> 	mov [esp + 32], ebx
   402                              <1> ;	mov [sigtable], eax
   403 000002E9 B020                <1> 	mov al, 0x20
   404 000002EB E620                <1> 	out 0x20, al
   405 000002ED 61                  <1> 	popa
   406 000002EE FB                  <1> 	sti
   407 000002EF CF                  <1> 	iret
   408                              <1> .nosighook:
   409                              <1> 		;UNMASK ALL INTS
   410 000002F0 E621                <1> 	out 0x21, al
   411 000002F2 E6A1                <1> 	out 0xA1, al
   412 000002F4 B020                <1> 	mov al, 0x20
   413 000002F6 E6A0                <1> 	out 0xA0, al
   414 000002F8 E620                <1> 	out 0x20, al
   415                              <1> 		;RESET PIT DIVISOR
   416 000002FA 66A1[57020000]      <1> 	mov ax, [pitdiv]
   417 00000300 E640                <1> 	out 0x40, al
   418 00000302 66C1C008            <1> 	rol ax, 8
   419 00000306 E640                <1> 	out 0x40, al
   420                              <1> 		;RESET PIC
   421 00000308 B020                <1> 	mov al, 0x20
   422 0000030A E620                <1> 	out 0x20, al
   423 0000030C 61                  <1> 	popa
   424 0000030D FB                  <1> 	sti
   425 0000030E BC[42B50000]        <1> 	mov esp, stackend ;reset stack
   426 00000313 E9E6270000          <1> 	jmp returnfromexp
   427                              <1> %endif
   428 00000318 0A                  <1> rtcrate db 10
   429                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   430                              <1> %ifdef io.serial
   431                              <1> %else
   432                              <1> %ifdef terminal.vsync
   433                              <1> 	cli
   434                              <1> 	cmp byte [termcopyneeded], 0
   435                              <1> 	je .nocopy
   436                              <1> 	call newtermcopy
   437                              <1> .nocopy
   438                              <1> 	push eax
   439                              <1> 	mov al, 0xC
   440                              <1> 	out 0x70, al
   441                              <1> 	in al, 0x71
   442                              <1> 	pop eax
   443                              <1> 	sti
   444                              <1> %endif
   445                              <1> %endif
   446 00000319 E95F000000          <1> 	jmp handled4
   447                              <1> %ifdef rtl8139.included
   448                              <1> rtl8139.irq:
   449 0000031E FA                  <1> 	cli
   450 0000031F 52                  <1> 	push edx
   451 00000320 50                  <1> 	push eax
   452 00000321 8B15[03860000]      <1> 	mov edx, [rtl8139.basenicaddr]
   453 00000327 81C23E000000        <1> 	add edx, rtl8139.ISR
   454 0000032D 31C0                <1> 	xor eax, eax
   455 0000032F 66ED                <1> 	in ax, dx
   456 00000331 66EF                <1> 	out dx, ax
   457 00000333 58                  <1> 	pop eax
   458 00000334 5A                  <1> 	pop edx
   459 00000335 FB                  <1> 	sti
   460 00000336 E942000000          <1> 	jmp handled4
   461                              <1> %endif
   462                              <1> %ifdef sound.included
   463                              <1> sblaster.irq:
   464 0000033B FA                  <1> 	cli
   465 0000033C 60                  <1> 	pusha
   466 0000033D 803D[095E0000]01    <1> 	cmp byte [SoundBlaster], 1
   467 00000344 0F84CA580000        <1> 	je near sblaster.cont
   468 0000034A E925000000          <1> 	jmp handled2
   469                              <1> %endif
   470                              <1> 	
   471                              <1> timekeeper:
   472 0000034F 50                  <1> 	push eax
   473 00000350 A1[61020000]        <1> 	mov eax, [timenanoseconds]
   474 00000355 0305[59020000]      <1> 	add eax, [timeinterval]
   475 0000035B 3D00CA9A3B          <1> 	cmp eax, 1000000000
   476 00000360 720B                <1> 	jb nonanosecondrollover
   477 00000362 FF05[5D020000]      <1> 	inc dword [timeseconds]
   478 00000368 2D00CA9A3B          <1> 	sub eax, 1000000000
   479                              <1> 	%ifdef gui.time
   480                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   481                              <1> 		cmp byte [guion], 1
   482                              <1> 		jne nonanosecondrollover
   483                              <1> 		cmp dword [dragging], 0
   484                              <1> 		jne nonanosecondrollover
   485                              <1> 		pusha
   486                              <1> 		call guitime
   487                              <1> 		popa
   488                              <1> 	%endif
   489                              <1> nonanosecondrollover:
   490 0000036D A3[61020000]        <1> 	mov [timenanoseconds], eax
   491 00000372 58                  <1> 	pop eax
   492 00000373 C3                  <1> 	ret
   493                              <1> 	
   494                              <1> handled2:
   495 00000374 61                  <1> 	popa
   496                              <1> handled3:
   497 00000375 FB                  <1> 	sti
   498                              <1> handled:
   499 00000376 50                  <1> 	push eax
   500 00000377 B020                <1> 	mov al, 0x20
   501 00000379 E620                <1> 	out 0x20, al
   502 0000037B 58                  <1> 	pop eax
   503 0000037C CF                  <1> 	iret
   504                              <1> handled4:
   505 0000037D 50                  <1> 	push eax
   506 0000037E B020                <1> 	mov al, 0x20
   507 00000380 E6A0                <1> 	out 0xA0, al
   508 00000382 E620                <1> 	out 0x20, al
   509 00000384 58                  <1> 	pop eax
   510 00000385 CF                  <1> 	iret
   511                              <1> [BITS 16]
   512                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   513                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   514                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   515 00000386 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   516 00000388 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   517                              <1> 
   518 0000038C FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   519 0000038E 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   520                              <1> 
   521                              <1> 
   522 00000392 0000                <1> gdt:	dw 0			; limit 15:0
   523 00000394 0000                <1> 	dw 0			; base 15:0
   524 00000396 00                  <1> 	db 0			; base 23:16
   525 00000397 00                  <1> 	db 0			; type
   526 00000398 00                  <1> 	db 0			; limit 19:16, flags
   527 00000399 00                  <1> 	db 0			; base 31:24
   528                              <1> ; linear data segment descriptor
   529                              <1> LINEAR_SEL	equ	$-gdt
   530 0000039A FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   531 0000039C 0000                <1> 	dw 0			; base for this one is always 0
   532 0000039E 00                  <1> 	db 0
   533 0000039F 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   534 000003A0 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   535 000003A1 00                  <1> 	db 0
   536                              <1> STACK_SEL	equ $-gdt
   537 000003A2 0200                <1> gdts:	dw 2;(stackend)/4096
   538 000003A4 0000                <1> 	dw 0
   539 000003A6 00                  <1> 	db 0
   540 000003A7 92                  <1> 	db 0x92
   541 000003A8 CF                  <1> 	db 0xCF
   542 000003A9 00                  <1> 	db 0
   543                              <1> ; code segment descriptor
   544                              <1> SYS_CODE_SEL	equ	$-gdt
   545 000003AA FFFF                <1> gdt2:	dw 0xFFFF
   546 000003AC 0000                <1> 	dw 0			; (base gets set above)
   547 000003AE 00                  <1> 	db 0
   548 000003AF 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   549 000003B0 CF                  <1> 	db 0xCF
   550 000003B1 00                  <1> 	db 0
   551                              <1> ; data segment descriptor
   552                              <1> SYS_DATA_SEL	equ	$-gdt
   553 000003B2 FFFF                <1> gdt3:	dw 0xFFFF
   554 000003B4 0000                <1> 	dw 0			; (base gets set above)
   555 000003B6 00                  <1> 	db 0
   556 000003B7 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   557 000003B8 CF                  <1> 	db 0xCF
   558 000003B9 00                  <1> 	db 0
   559                              <1> NEW_CODE_SEL	equ	$-gdt
   560 000003BA FFFF                <1> gdt4:	dw 0xFFFF
   561 000003BC 0000                <1> 	dw 0			; (base gets set above)
   562 000003BE 00                  <1> 	db 0
   563 000003BF 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   564 000003C0 CF                  <1> 	db 0xCF
   565 000003C1 00                  <1> 	db 0
   566                              <1> ; data segment descriptor
   567                              <1> NEW_DATA_SEL	equ	$-gdt
   568 000003C2 FFFF                <1> gdt5:	dw 0xFFFF
   569 000003C4 0000                <1> 	dw 0			; (base gets set above)
   570 000003C6 00                  <1> 	db 0
   571 000003C7 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   572 000003C8 CF                  <1> 	db 0xCF
   573 000003C9 00                  <1> 	db 0
   574                              <1> V8086_CODE_SEL	equ $-gdt
   575 000003CA FFFF                <1> gdtv8086: dw 0xFFFF
   576 000003CC 0000                <1> 	dw 0
   577 000003CE 00                  <1> 	db 0
   578 000003CF 9A                  <1> 	db 0x9A
   579 000003D0 8F                  <1> 	db 0x8F
   580 000003D1 00                  <1> 	db 0
   581                              <1> V8086_DATA_SEL	equ $-gdt
   582 000003D2 FFFF                <1> gdtv80862: dw 0xFFFF
   583 000003D4 0000                <1> 	dw 0
   584 000003D6 00                  <1> 	db 0
   585 000003D7 92                  <1> 	db 0x92
   586 000003D8 8F                  <1> 	db 0x8F
   587 000003D9 00                  <1> 	db 0
   588                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   589 000003DA 0001                <1> gdtdos:	dw 256	;give it 1 MB
   590 000003DC 0000                <1> 	dw 0
   591 000003DE 00                  <1> 	db 0
   592 000003DF 9A                  <1> 	db 0x9A
   593 000003E0 8F                  <1> 	db 0x8F ;16 bit
   594 000003E1 00                  <1> 	db 0
   595                              <1> DOS_DATA_SEL 	equ $-gdt
   596 000003E2 0001                <1> gdtdos2:	dw 256
   597 000003E4 0000                <1> 	dw 0
   598 000003E6 00                  <1> 	db 0
   599 000003E7 92                  <1> 	db 0x92
   600 000003E8 8F                  <1> 	db 0x8F ;16 bit
   601 000003E9 00                  <1> 	db 0
   602                              <1> gdt_end:
   603                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   604                              <1> ;	interrupt descriptor table (IDT)
   605                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   606                              <1> ; 32 reserved interrupts:
   607                              <1> idt:	
   608                              <1> %assign i 0
   609                              <1> %rep    8
   610                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   611                              <1> %assign i i+1
   612                              <1> %endrep
   613 000003EA [0B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   614                              <2> %assign i i+1
   615 000003F2 [170D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   616                              <2> %assign i i+1
   617 000003FA [230D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   618                              <2> %assign i i+1
   619 00000402 [2F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   620                              <2> %assign i i+1
   621 0000040A [3B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   622                              <2> %assign i i+1
   623 00000412 [470D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   624                              <2> %assign i i+1
   625 0000041A [530D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   626                              <2> %assign i i+1
   627 00000422 [5F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   628                              <2> %assign i i+1
   629 0000042A [6B0D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   630                              <1> %assign i 9
   631                              <1> %rep    23
   632                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   633                              <1> %assign i i+1
   634                              <1> %endrep
   635 00000432 [770D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   636                              <2> %assign i i+1
   637 0000043A [830D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   638                              <2> %assign i i+1
   639 00000442 [8F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   640                              <2> %assign i i+1
   641 0000044A [9B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   642                              <2> %assign i i+1
   643 00000452 [A70D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   644                              <2> %assign i i+1
   645 0000045A [B30D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   646                              <2> %assign i i+1
   647 00000462 [BF0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   648                              <2> %assign i i+1
   649 0000046A [CB0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   650                              <2> %assign i i+1
   651 00000472 [D70D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   652                              <2> %assign i i+1
   653 0000047A [E30D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   654                              <2> %assign i i+1
   655 00000482 [EF0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   656                              <2> %assign i i+1
   657 0000048A [FB0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   658                              <2> %assign i i+1
   659 00000492 [070E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   660                              <2> %assign i i+1
   661 0000049A [130E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   662                              <2> %assign i i+1
   663 000004A2 [1F0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   664                              <2> %assign i i+1
   665 000004AA [2B0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   666                              <2> %assign i i+1
   667 000004B2 [370E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   668                              <2> %assign i i+1
   669 000004BA [430E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   670                              <2> %assign i i+1
   671 000004C2 [4F0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   672                              <2> %assign i i+1
   673 000004CA [5B0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   674                              <2> %assign i i+1
   675 000004D2 [670E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   676                              <2> %assign i i+1
   677 000004DA [730E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   678                              <2> %assign i i+1
   679 000004E2 [7F0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   680                              <2> %assign i i+1
   681 000004EA [6D28]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   682 000004F2 [7128]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   683                              <1> %assign i 0x22
   684                              <1> %rep 14
   685                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   686                              <1> %assign i +1
   687                              <1> %endrep
   688 000004FA [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i +1
   690 00000502 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i +1
   692 0000050A [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i +1
   694 00000512 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i +1
   696 0000051A [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i +1
   698 00000522 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i +1
   700 0000052A [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i +1
   702 00000532 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i +1
   704 0000053A [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   705                              <2> %assign i +1
   706 00000542 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   707                              <2> %assign i +1
   708 0000054A [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   709                              <2> %assign i +1
   710 00000552 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   711                              <2> %assign i +1
   712 0000055A [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   713                              <2> %assign i +1
   714 00000562 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   715                              <2> %assign i +1
   716                              <1> ;INT 30h for os use and 3rd party use:
   717 0000056A [FE1B]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   718                              <1> %assign i 0x31
   719                              <1> %rep 15
   720                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   721                              <1> %assign i +1
   722                              <1> %endrep
   723 00000572 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i +1
   725 0000057A [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i +1
   727 00000582 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i +1
   729 0000058A [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i +1
   731 00000592 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i +1
   733 0000059A [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i +1
   735 000005A2 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i +1
   737 000005AA [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i +1
   739 000005B2 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   740                              <2> %assign i +1
   741 000005BA [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   742                              <2> %assign i +1
   743 000005C2 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   744                              <2> %assign i +1
   745 000005CA [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   746                              <2> %assign i +1
   747 000005D2 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   748                              <2> %assign i +1
   749 000005DA [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   750                              <2> %assign i +1
   751 000005E2 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   752                              <2> %assign i +1
   753                              <1> ;and here we are at 0x40
   754                              <1> ;here are all the irq's
   755 000005EA [8902]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   756 000005F2 [7603]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   757 000005FA [7603]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   758 00000602 [7603]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   759 0000060A [7603]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   760                              <1> 	%ifdef sound.included
   761 00000612 [3B03]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   762                              <1> 	%else
   763                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   764                              <1> 	%endif
   765 0000061A [7603]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   766 00000622 [7603]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   767 0000062A [1903]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   768 00000632 [7D03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   769 0000063A [7D03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   770                              <1> 	%ifdef rtl8139.included
   771 00000642 [1E03]2800008E0000  <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   772                              <1> 	%else
   773                              <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   774                              <1> 	%endif
   775 0000064A [7D03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   776 00000652 [7D03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   777 0000065A [7D03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   778 00000662 [7D03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   779                              <1> ;This brings me up to 0x50
   780                              <1> %assign i 0x50
   781                              <1> %rep 176
   782                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   783                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   784                              <1> %assign i +1
   785                              <1> %endrep
   786 0000066A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   787                              <2> 
   788                              <2> %assign i +1
   789 00000672 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   790                              <2> 
   791                              <2> %assign i +1
   792 0000067A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   793                              <2> 
   794                              <2> %assign i +1
   795 00000682 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   796                              <2> 
   797                              <2> %assign i +1
   798 0000068A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   799                              <2> 
   800                              <2> %assign i +1
   801 00000692 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   802                              <2> 
   803                              <2> %assign i +1
   804 0000069A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   805                              <2> 
   806                              <2> %assign i +1
   807 000006A2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   808                              <2> 
   809                              <2> %assign i +1
   810 000006AA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   811                              <2> 
   812                              <2> %assign i +1
   813 000006B2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   814                              <2> 
   815                              <2> %assign i +1
   816 000006BA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   817                              <2> 
   818                              <2> %assign i +1
   819 000006C2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   820                              <2> 
   821                              <2> %assign i +1
   822 000006CA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   823                              <2> 
   824                              <2> %assign i +1
   825 000006D2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   826                              <2> 
   827                              <2> %assign i +1
   828 000006DA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   829                              <2> 
   830                              <2> %assign i +1
   831 000006E2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   832                              <2> 
   833                              <2> %assign i +1
   834 000006EA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   835                              <2> 
   836                              <2> %assign i +1
   837 000006F2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   838                              <2> 
   839                              <2> %assign i +1
   840 000006FA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   841                              <2> 
   842                              <2> %assign i +1
   843 00000702 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   844                              <2> 
   845                              <2> %assign i +1
   846 0000070A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   847                              <2> 
   848                              <2> %assign i +1
   849 00000712 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   850                              <2> 
   851                              <2> %assign i +1
   852 0000071A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   853                              <2> 
   854                              <2> %assign i +1
   855 00000722 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   856                              <2> 
   857                              <2> %assign i +1
   858 0000072A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   859                              <2> 
   860                              <2> %assign i +1
   861 00000732 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   862                              <2> 
   863                              <2> %assign i +1
   864 0000073A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   865                              <2> 
   866                              <2> %assign i +1
   867 00000742 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   868                              <2> 
   869                              <2> %assign i +1
   870 0000074A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   871                              <2> 
   872                              <2> %assign i +1
   873 00000752 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   874                              <2> 
   875                              <2> %assign i +1
   876 0000075A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   877                              <2> 
   878                              <2> %assign i +1
   879 00000762 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   880                              <2> 
   881                              <2> %assign i +1
   882 0000076A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   883                              <2> 
   884                              <2> %assign i +1
   885 00000772 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   886                              <2> 
   887                              <2> %assign i +1
   888 0000077A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   889                              <2> 
   890                              <2> %assign i +1
   891 00000782 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   892                              <2> 
   893                              <2> %assign i +1
   894 0000078A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   895                              <2> 
   896                              <2> %assign i +1
   897 00000792 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   898                              <2> 
   899                              <2> %assign i +1
   900 0000079A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   901                              <2> 
   902                              <2> %assign i +1
   903 000007A2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   904                              <2> 
   905                              <2> %assign i +1
   906 000007AA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   907                              <2> 
   908                              <2> %assign i +1
   909 000007B2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   910                              <2> 
   911                              <2> %assign i +1
   912 000007BA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   913                              <2> 
   914                              <2> %assign i +1
   915 000007C2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   916                              <2> 
   917                              <2> %assign i +1
   918 000007CA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   919                              <2> 
   920                              <2> %assign i +1
   921 000007D2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   922                              <2> 
   923                              <2> %assign i +1
   924 000007DA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   925                              <2> 
   926                              <2> %assign i +1
   927 000007E2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   928                              <2> 
   929                              <2> %assign i +1
   930 000007EA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   931                              <2> 
   932                              <2> %assign i +1
   933 000007F2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   934                              <2> 
   935                              <2> %assign i +1
   936 000007FA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   937                              <2> 
   938                              <2> %assign i +1
   939 00000802 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   940                              <2> 
   941                              <2> %assign i +1
   942 0000080A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   943                              <2> 
   944                              <2> %assign i +1
   945 00000812 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   946                              <2> 
   947                              <2> %assign i +1
   948 0000081A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   949                              <2> 
   950                              <2> %assign i +1
   951 00000822 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   952                              <2> 
   953                              <2> %assign i +1
   954 0000082A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   955                              <2> 
   956                              <2> %assign i +1
   957 00000832 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   958                              <2> 
   959                              <2> %assign i +1
   960 0000083A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   961                              <2> 
   962                              <2> %assign i +1
   963 00000842 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   964                              <2> 
   965                              <2> %assign i +1
   966 0000084A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   967                              <2> 
   968                              <2> %assign i +1
   969 00000852 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   970                              <2> 
   971                              <2> %assign i +1
   972 0000085A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   973                              <2> 
   974                              <2> %assign i +1
   975 00000862 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   976                              <2> 
   977                              <2> %assign i +1
   978 0000086A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   979                              <2> 
   980                              <2> %assign i +1
   981 00000872 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   982                              <2> 
   983                              <2> %assign i +1
   984 0000087A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   985                              <2> 
   986                              <2> %assign i +1
   987 00000882 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   988                              <2> 
   989                              <2> %assign i +1
   990 0000088A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   991                              <2> 
   992                              <2> %assign i +1
   993 00000892 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   994                              <2> 
   995                              <2> %assign i +1
   996 0000089A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   997                              <2> 
   998                              <2> %assign i +1
   999 000008A2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1000                              <2> 
  1001                              <2> %assign i +1
  1002 000008AA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1003                              <2> 
  1004                              <2> %assign i +1
  1005 000008B2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1006                              <2> 
  1007                              <2> %assign i +1
  1008 000008BA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1009                              <2> 
  1010                              <2> %assign i +1
  1011 000008C2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1012                              <2> 
  1013                              <2> %assign i +1
  1014 000008CA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1015                              <2> 
  1016                              <2> %assign i +1
  1017 000008D2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1018                              <2> 
  1019                              <2> %assign i +1
  1020 000008DA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1021                              <2> 
  1022                              <2> %assign i +1
  1023 000008E2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1024                              <2> 
  1025                              <2> %assign i +1
  1026 000008EA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1027                              <2> 
  1028                              <2> %assign i +1
  1029 000008F2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1030                              <2> 
  1031                              <2> %assign i +1
  1032 000008FA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1033                              <2> 
  1034                              <2> %assign i +1
  1035 00000902 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1036                              <2> 
  1037                              <2> %assign i +1
  1038 0000090A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1039                              <2> 
  1040                              <2> %assign i +1
  1041 00000912 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1042                              <2> 
  1043                              <2> %assign i +1
  1044 0000091A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1045                              <2> 
  1046                              <2> %assign i +1
  1047 00000922 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1048                              <2> 
  1049                              <2> %assign i +1
  1050 0000092A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1051                              <2> 
  1052                              <2> %assign i +1
  1053 00000932 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1054                              <2> 
  1055                              <2> %assign i +1
  1056 0000093A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1057                              <2> 
  1058                              <2> %assign i +1
  1059 00000942 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1060                              <2> 
  1061                              <2> %assign i +1
  1062 0000094A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1063                              <2> 
  1064                              <2> %assign i +1
  1065 00000952 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1066                              <2> 
  1067                              <2> %assign i +1
  1068 0000095A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1069                              <2> 
  1070                              <2> %assign i +1
  1071 00000962 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1072                              <2> 
  1073                              <2> %assign i +1
  1074 0000096A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1075                              <2> 
  1076                              <2> %assign i +1
  1077 00000972 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1078                              <2> 
  1079                              <2> %assign i +1
  1080 0000097A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1081                              <2> 
  1082                              <2> %assign i +1
  1083 00000982 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1084                              <2> 
  1085                              <2> %assign i +1
  1086 0000098A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1087                              <2> 
  1088                              <2> %assign i +1
  1089 00000992 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1090                              <2> 
  1091                              <2> %assign i +1
  1092 0000099A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1093                              <2> 
  1094                              <2> %assign i +1
  1095 000009A2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1096                              <2> 
  1097                              <2> %assign i +1
  1098 000009AA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1099                              <2> 
  1100                              <2> %assign i +1
  1101 000009B2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1102                              <2> 
  1103                              <2> %assign i +1
  1104 000009BA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1105                              <2> 
  1106                              <2> %assign i +1
  1107 000009C2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1108                              <2> 
  1109                              <2> %assign i +1
  1110 000009CA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1111                              <2> 
  1112                              <2> %assign i +1
  1113 000009D2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1114                              <2> 
  1115                              <2> %assign i +1
  1116 000009DA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1117                              <2> 
  1118                              <2> %assign i +1
  1119 000009E2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1120                              <2> 
  1121                              <2> %assign i +1
  1122 000009EA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1123                              <2> 
  1124                              <2> %assign i +1
  1125 000009F2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1126                              <2> 
  1127                              <2> %assign i +1
  1128 000009FA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1129                              <2> 
  1130                              <2> %assign i +1
  1131 00000A02 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1132                              <2> 
  1133                              <2> %assign i +1
  1134 00000A0A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1135                              <2> 
  1136                              <2> %assign i +1
  1137 00000A12 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1138                              <2> 
  1139                              <2> %assign i +1
  1140 00000A1A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1141                              <2> 
  1142                              <2> %assign i +1
  1143 00000A22 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1144                              <2> 
  1145                              <2> %assign i +1
  1146 00000A2A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1147                              <2> 
  1148                              <2> %assign i +1
  1149 00000A32 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1150                              <2> 
  1151                              <2> %assign i +1
  1152 00000A3A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1153                              <2> 
  1154                              <2> %assign i +1
  1155 00000A42 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1156                              <2> 
  1157                              <2> %assign i +1
  1158 00000A4A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1159                              <2> 
  1160                              <2> %assign i +1
  1161 00000A52 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1162                              <2> 
  1163                              <2> %assign i +1
  1164 00000A5A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1165                              <2> 
  1166                              <2> %assign i +1
  1167 00000A62 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1168                              <2> 
  1169                              <2> %assign i +1
  1170 00000A6A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1171                              <2> 
  1172                              <2> %assign i +1
  1173 00000A72 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1174                              <2> 
  1175                              <2> %assign i +1
  1176 00000A7A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1177                              <2> 
  1178                              <2> %assign i +1
  1179 00000A82 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1180                              <2> 
  1181                              <2> %assign i +1
  1182 00000A8A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1183                              <2> 
  1184                              <2> %assign i +1
  1185 00000A92 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1186                              <2> 
  1187                              <2> %assign i +1
  1188 00000A9A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1189                              <2> 
  1190                              <2> %assign i +1
  1191 00000AA2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1192                              <2> 
  1193                              <2> %assign i +1
  1194 00000AAA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1195                              <2> 
  1196                              <2> %assign i +1
  1197 00000AB2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1198                              <2> 
  1199                              <2> %assign i +1
  1200 00000ABA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1201                              <2> 
  1202                              <2> %assign i +1
  1203 00000AC2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1204                              <2> 
  1205                              <2> %assign i +1
  1206 00000ACA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1207                              <2> 
  1208                              <2> %assign i +1
  1209 00000AD2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1210                              <2> 
  1211                              <2> %assign i +1
  1212 00000ADA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1213                              <2> 
  1214                              <2> %assign i +1
  1215 00000AE2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1216                              <2> 
  1217                              <2> %assign i +1
  1218 00000AEA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1219                              <2> 
  1220                              <2> %assign i +1
  1221 00000AF2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1222                              <2> 
  1223                              <2> %assign i +1
  1224 00000AFA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1225                              <2> 
  1226                              <2> %assign i +1
  1227 00000B02 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1228                              <2> 
  1229                              <2> %assign i +1
  1230 00000B0A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1231                              <2> 
  1232                              <2> %assign i +1
  1233 00000B12 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1234                              <2> 
  1235                              <2> %assign i +1
  1236 00000B1A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1237                              <2> 
  1238                              <2> %assign i +1
  1239 00000B22 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1240                              <2> 
  1241                              <2> %assign i +1
  1242 00000B2A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1243                              <2> 
  1244                              <2> %assign i +1
  1245 00000B32 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1246                              <2> 
  1247                              <2> %assign i +1
  1248 00000B3A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1249                              <2> 
  1250                              <2> %assign i +1
  1251 00000B42 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1252                              <2> 
  1253                              <2> %assign i +1
  1254 00000B4A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1255                              <2> 
  1256                              <2> %assign i +1
  1257 00000B52 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1258                              <2> 
  1259                              <2> %assign i +1
  1260 00000B5A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1261                              <2> 
  1262                              <2> %assign i +1
  1263 00000B62 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1264                              <2> 
  1265                              <2> %assign i +1
  1266 00000B6A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1267                              <2> 
  1268                              <2> %assign i +1
  1269 00000B72 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1270                              <2> 
  1271                              <2> %assign i +1
  1272 00000B7A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1273                              <2> 
  1274                              <2> %assign i +1
  1275 00000B82 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1276                              <2> 
  1277                              <2> %assign i +1
  1278 00000B8A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1279                              <2> 
  1280                              <2> %assign i +1
  1281 00000B92 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1282                              <2> 
  1283                              <2> %assign i +1
  1284 00000B9A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1285                              <2> 
  1286                              <2> %assign i +1
  1287 00000BA2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1288                              <2> 
  1289                              <2> %assign i +1
  1290 00000BAA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1291                              <2> 
  1292                              <2> %assign i +1
  1293 00000BB2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1294                              <2> 
  1295                              <2> %assign i +1
  1296 00000BBA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1297                              <2> 
  1298                              <2> %assign i +1
  1299 00000BC2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1300                              <2> 
  1301                              <2> %assign i +1
  1302 00000BCA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1303                              <2> 
  1304                              <2> %assign i +1
  1305 00000BD2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1306                              <2> 
  1307                              <2> %assign i +1
  1308 00000BDA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1309                              <2> 
  1310                              <2> %assign i +1
  1311 00000BE2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1312                              <2> 
  1313                              <2> %assign i +1
  1314                              <1> idt_end:
  1315                              <1> [BITS 32]
  1316                                  	%include "source/realmode.asm"
  1317                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1318                              <1> 			;and the return address is in realmodereturn
  1319 00000BEA FA                  <1> 	cli
  1320 00000BEB A3[FD0C0000]        <1> 	mov [realmodeeax], eax
  1321 00000BF0 891D[F90C0000]      <1> 	mov [realmodeebx], ebx
  1322 00000BF6 8925[EB0C0000]      <1> 	mov [pmodeesp], esp
  1323                              <1> 
  1324 00000BFC BB[F50C0000]        <1> 	mov ebx, cr0old
  1325                              <1> rmcopytofirstmbyte:
  1326 00000C01 8B03                <1> 	mov eax, [ebx]
  1327 00000C03 658903              <1> 	mov [gs:ebx], eax
  1328 00000C06 81C304000000        <1> 	add ebx, 4
  1329 00000C0C 81FB[050D0000]      <1> 	cmp ebx, realmodeptr
  1330 00000C12 76ED                <1> 	jbe rmcopytofirstmbyte
  1331                              <1> 
  1332 00000C14 EA[1B0C0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1333                              <1> 
  1334                              <1> [BITS 16]
  1335                              <1> protected16bit:
  1336 00000C1B B84000              <1> 	mov ax, V8086_DATA_SEL
  1337 00000C1E 8ED8                <1> 	mov ds, ax
  1338 00000C20 8EC0                <1> 	mov es, ax
  1339 00000C22 8EE0                <1> 	mov fs, ax
  1340 00000C24 8EE8                <1> 	mov gs, ax
  1341 00000C26 8ED0                <1> 	mov ss, ax
  1342 00000C28 66BC[42B50000]      <1> 	mov esp, stackend
  1343 00000C2E 0F20C0              <1> 	mov eax, cr0
  1344 00000C31 66A3[F50C]          <1> 	mov [cr0old], eax
  1345 00000C35 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1346 00000C3B 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1347 00000C3E EA[430C]0010        <1> 	jmp 0x1000:inrealmode
  1348                              <1> 
  1349                              <1> inrealmode:
  1350 00000C43 8CC8                <1> 	mov ax, cs
  1351 00000C45 8ED8                <1> 	mov ds, ax
  1352 00000C47 8EC0                <1> 	mov es, ax
  1353 00000C49 8EE0                <1> 	mov fs, ax
  1354 00000C4B 8EE8                <1> 	mov gs, ax
  1355 00000C4D 8ED0                <1> 	mov ss, ax
  1356 00000C4F BC[42B5]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1357                              <1> 	
  1358 00000C52 B011                <1> 	mov al, 0x11
  1359 00000C54 E620                <1> 	out 0x20, al
  1360 00000C56 E6A0                <1> 	out 0xA0, al
  1361 00000C58 B008                <1> 	mov al, 0x8		;interrupt for master
  1362 00000C5A E621                <1> 	out 0x21, al
  1363 00000C5C B070                <1> 	mov al, 0x70	;interrupt for slave
  1364 00000C5E E6A1                <1> 	out 0xA1, al
  1365 00000C60 B004                <1> 	mov al, 4
  1366 00000C62 E621                <1> 	out 0x21, al
  1367 00000C64 B002                <1> 	mov al, 2
  1368 00000C66 E6A1                <1> 	out 0xA1, al
  1369 00000C68 B001                <1> 	mov al, 0x1
  1370 00000C6A E621                <1> 	out 0x21, al
  1371 00000C6C B001                <1> 	mov al, 0x1
  1372 00000C6E E6A1                <1> 	out 0xA1, al
  1373                              <1> 	
  1374 00000C70 0F011E[EF0C]        <1> 	lidt [idt_real]
  1375 00000C75 FB                  <1> 	sti
  1376                              <1> 
  1377 00000C76 66A1[FD0C]          <1> 	mov eax, [realmodeeax]
  1378 00000C7A 668B1E[F90C]        <1> 	mov ebx, [realmodeebx]
  1379                              <1> 
  1380 00000C7F FF16[050D]          <1> 	call word [realmodeptr] ;call the real mode program here
  1381                              <1> 
  1382 00000C83 66A3[FD0C]          <1> 	mov [realmodeeax], eax
  1383 00000C87 66891E[F90C]        <1> 	mov [realmodeebx], ebx
  1384                              <1> 
  1385 00000C8C FA                  <1> 	cli
  1386 00000C8D 0F0116[8603]        <1> 	lgdt [gdtr]
  1387 00000C92 0F011E[8C03]        <1> 	lidt [idtr]
  1388 00000C97 0F20C0              <1> 	mov eax, cr0
  1389 00000C9A 0C01                <1> 	or al, 1
  1390 00000C9C 0F22C0              <1> 	mov cr0,eax
  1391 00000C9F EA[A40C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1392                              <1> 
  1393                              <1> [BITS 32]
  1394                              <1> returntopmode:
  1395 00000CA4 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1396 00000CA8 8ED8                <1> 	mov ds, ax
  1397 00000CAA 8EC0                <1> 	mov es, ax
  1398 00000CAC 8EE0                <1> 	mov fs, ax
  1399 00000CAE 8ED0                <1> 	mov ss, ax
  1400 00000CB0 8B25[EB0C0000]      <1> 	mov esp, [pmodeesp]
  1401 00000CB6 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1402 00000CBA 8EE8                <1> 	mov gs, ax
  1403                              <1> 
  1404 00000CBC BB[F50C0000]        <1> 	mov ebx, cr0old
  1405                              <1> rmcopyfromfirstmbyte:
  1406 00000CC1 658B03              <1> 	mov eax, [gs:ebx]
  1407 00000CC4 8903                <1> 	mov [ebx], eax
  1408 00000CC6 81C304000000        <1> 	add ebx, 4
  1409 00000CCC 81FB[050D0000]      <1> 	cmp ebx, realmodeptr
  1410 00000CD2 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1411                              <1> 
  1412 00000CD4 E893540000          <1> 	call initialize.pic ;reset irq's and masks
  1413 00000CD9 FB                  <1> 	sti
  1414 00000CDA A1[FD0C0000]        <1> 	mov eax, [realmodeeax]
  1415 00000CDF 8B1D[F90C0000]      <1> 	mov ebx, [realmodeebx]
  1416 00000CE5 FF25[010D0000]      <1> 	jmp dword [realmodereturn]
  1417                              <1> 	
  1418 00000CEB 00000000            <1> pmodeesp dd 0
  1419                              <1> idt_real:
  1420 00000CEF FF03                <1> 	dw 0x3FF
  1421 00000CF1 00000000            <1> 	dd 0
  1422 00000CF5 00000000            <1> cr0old dd 0
  1423 00000CF9 00000000            <1> realmodeebx dd 0
  1424 00000CFD 00000000            <1> realmodeeax dd 0
  1425 00000D01 00000000            <1> realmodereturn dd 0
  1426 00000D05 0000                <1> realmodeptr dw 0
  1427 00000D07 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1428                                  [BITS 32]
  1429                                      %include "source/exception.asm"
  1430                              <1> %ifdef exceptions.included
  1431                              <1> unhand:	
  1432                              <1> 	%assign i 0
  1433                              <1> 	%rep 32
  1434                              <1> 	mov byte [intprob], i
  1435                              <1> 	jmp unhand2
  1436                              <1> 	%assign i i+1
  1437                              <1> 	%endrep
  1438 00000D0B C605[BD110000]00    <2>  mov byte [intprob], i
  1439 00000D12 E974010000          <2>  jmp unhand2
  1440                              <2>  %assign i i+1
  1441 00000D17 C605[BD110000]01    <2>  mov byte [intprob], i
  1442 00000D1E E968010000          <2>  jmp unhand2
  1443                              <2>  %assign i i+1
  1444 00000D23 C605[BD110000]02    <2>  mov byte [intprob], i
  1445 00000D2A E95C010000          <2>  jmp unhand2
  1446                              <2>  %assign i i+1
  1447 00000D2F C605[BD110000]03    <2>  mov byte [intprob], i
  1448 00000D36 E950010000          <2>  jmp unhand2
  1449                              <2>  %assign i i+1
  1450 00000D3B C605[BD110000]04    <2>  mov byte [intprob], i
  1451 00000D42 E944010000          <2>  jmp unhand2
  1452                              <2>  %assign i i+1
  1453 00000D47 C605[BD110000]05    <2>  mov byte [intprob], i
  1454 00000D4E E938010000          <2>  jmp unhand2
  1455                              <2>  %assign i i+1
  1456 00000D53 C605[BD110000]06    <2>  mov byte [intprob], i
  1457 00000D5A E92C010000          <2>  jmp unhand2
  1458                              <2>  %assign i i+1
  1459 00000D5F C605[BD110000]07    <2>  mov byte [intprob], i
  1460 00000D66 E920010000          <2>  jmp unhand2
  1461                              <2>  %assign i i+1
  1462 00000D6B C605[BD110000]08    <2>  mov byte [intprob], i
  1463 00000D72 E914010000          <2>  jmp unhand2
  1464                              <2>  %assign i i+1
  1465 00000D77 C605[BD110000]09    <2>  mov byte [intprob], i
  1466 00000D7E E908010000          <2>  jmp unhand2
  1467                              <2>  %assign i i+1
  1468 00000D83 C605[BD110000]0A    <2>  mov byte [intprob], i
  1469 00000D8A E9FC000000          <2>  jmp unhand2
  1470                              <2>  %assign i i+1
  1471 00000D8F C605[BD110000]0B    <2>  mov byte [intprob], i
  1472 00000D96 E9F0000000          <2>  jmp unhand2
  1473                              <2>  %assign i i+1
  1474 00000D9B C605[BD110000]0C    <2>  mov byte [intprob], i
  1475 00000DA2 E9E4000000          <2>  jmp unhand2
  1476                              <2>  %assign i i+1
  1477 00000DA7 C605[BD110000]0D    <2>  mov byte [intprob], i
  1478 00000DAE E9D8000000          <2>  jmp unhand2
  1479                              <2>  %assign i i+1
  1480 00000DB3 C605[BD110000]0E    <2>  mov byte [intprob], i
  1481 00000DBA E9CC000000          <2>  jmp unhand2
  1482                              <2>  %assign i i+1
  1483 00000DBF C605[BD110000]0F    <2>  mov byte [intprob], i
  1484 00000DC6 E9C0000000          <2>  jmp unhand2
  1485                              <2>  %assign i i+1
  1486 00000DCB C605[BD110000]10    <2>  mov byte [intprob], i
  1487 00000DD2 E9B4000000          <2>  jmp unhand2
  1488                              <2>  %assign i i+1
  1489 00000DD7 C605[BD110000]11    <2>  mov byte [intprob], i
  1490 00000DDE E9A8000000          <2>  jmp unhand2
  1491                              <2>  %assign i i+1
  1492 00000DE3 C605[BD110000]12    <2>  mov byte [intprob], i
  1493 00000DEA E99C000000          <2>  jmp unhand2
  1494                              <2>  %assign i i+1
  1495 00000DEF C605[BD110000]13    <2>  mov byte [intprob], i
  1496 00000DF6 E990000000          <2>  jmp unhand2
  1497                              <2>  %assign i i+1
  1498 00000DFB C605[BD110000]14    <2>  mov byte [intprob], i
  1499 00000E02 E984000000          <2>  jmp unhand2
  1500                              <2>  %assign i i+1
  1501 00000E07 C605[BD110000]15    <2>  mov byte [intprob], i
  1502 00000E0E E978000000          <2>  jmp unhand2
  1503                              <2>  %assign i i+1
  1504 00000E13 C605[BD110000]16    <2>  mov byte [intprob], i
  1505 00000E1A E96C000000          <2>  jmp unhand2
  1506                              <2>  %assign i i+1
  1507 00000E1F C605[BD110000]17    <2>  mov byte [intprob], i
  1508 00000E26 E960000000          <2>  jmp unhand2
  1509                              <2>  %assign i i+1
  1510 00000E2B C605[BD110000]18    <2>  mov byte [intprob], i
  1511 00000E32 E954000000          <2>  jmp unhand2
  1512                              <2>  %assign i i+1
  1513 00000E37 C605[BD110000]19    <2>  mov byte [intprob], i
  1514 00000E3E E948000000          <2>  jmp unhand2
  1515                              <2>  %assign i i+1
  1516 00000E43 C605[BD110000]1A    <2>  mov byte [intprob], i
  1517 00000E4A E93C000000          <2>  jmp unhand2
  1518                              <2>  %assign i i+1
  1519 00000E4F C605[BD110000]1B    <2>  mov byte [intprob], i
  1520 00000E56 E930000000          <2>  jmp unhand2
  1521                              <2>  %assign i i+1
  1522 00000E5B C605[BD110000]1C    <2>  mov byte [intprob], i
  1523 00000E62 E924000000          <2>  jmp unhand2
  1524                              <2>  %assign i i+1
  1525 00000E67 C605[BD110000]1D    <2>  mov byte [intprob], i
  1526 00000E6E E918000000          <2>  jmp unhand2
  1527                              <2>  %assign i i+1
  1528 00000E73 C605[BD110000]1E    <2>  mov byte [intprob], i
  1529 00000E7A E90C000000          <2>  jmp unhand2
  1530                              <2>  %assign i i+1
  1531 00000E7F C605[BD110000]1F    <2>  mov byte [intprob], i
  1532 00000E86 E900000000          <2>  jmp unhand2
  1533                              <2>  %assign i i+1
  1534                              <1> unhand2:
  1535 00000E8B FA                  <1> 	cli
  1536 00000E8C 1E                  <1> 	push ds
  1537 00000E8D 06                  <1> 	push es
  1538 00000E8E 0FA0                <1> 	push fs
  1539 00000E90 0FA8                <1> 	push gs
  1540 00000E92 16                  <1> 	push ss
  1541 00000E93 60                  <1> 	pushad
  1542                              <1> %ifdef gui.included
  1543 00000E94 803D[5CA30000]00    <1> 	cmp byte [guion], 0
  1544 00000E9B 0F8432000000        <1> 	je near noguiunhandstuff
  1545 00000EA1 66C705[B7110000]08- <1> 	mov word [locunhandy], 8
  1546 00000EA9 00                  <1>
  1547 00000EAA 66C705[B9110000]08- <1> 	mov word [locunhandx], 8
  1548 00000EB2 00                  <1>
  1549 00000EB3 668B1D[F96D0000]    <1> 	mov bx, [background]
  1550 00000EBA 66891D[BB110000]    <1> 	mov [backgroundcache], bx
  1551 00000EC1 C605[1B580000]01    <1> 	mov byte [mousedisabled],1
  1552 00000EC8 66BB00F8            <1> 	mov bx, 1111100000000000b
  1553 00000ECC 66891D[F96D0000]    <1> 	mov [background], bx
  1554                              <1> noguiunhandstuff:
  1555                              <1> %endif
  1556 00000ED3 89E6                <1> 	mov esi, esp
  1557 00000ED5 8935[AB110000]      <1> 	mov [espfirst], esi
  1558 00000EDB 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1559 00000EE1 8935[A7110000]      <1> 	mov [esploc], esi
  1560 00000EE7 BE[CC110000]        <1> 	mov esi, unhandmsg
  1561 00000EEC 8935[AF110000]      <1> 	mov [esiloc], esi
  1562 00000EF2 31C9                <1> 	xor ecx, ecx
  1563 00000EF4 8A0D[BD110000]      <1> 	mov cl, [intprob]
  1564 00000EFA BB[9B150000]        <1> 	mov ebx, errortypes
  1565 00000EFF C1E102              <1> 	shl ecx, 2
  1566 00000F02 01CB                <1> 	add ebx, ecx
  1567 00000F04 81FB[DB150000]      <1> 	cmp ebx, errortypesend
  1568 00000F0A 7205                <1> 	jb gooderrortype
  1569 00000F0C BB[DB150000]        <1> 	mov ebx, errortypesend
  1570                              <1> gooderrortype:
  1571 00000F11 8B33                <1> 	mov esi, [ebx]
  1572                              <1> %ifdef gui.included
  1573 00000F13 803D[5CA30000]00    <1> 	cmp byte [guion], 0
  1574 00000F1A 0F842D000000        <1> 	je near errortext
  1575 00000F20 668B0D[B7110000]    <1> 	mov cx, [locunhandy]
  1576 00000F27 668B15[B9110000]    <1> 	mov dx, [locunhandx]
  1577 00000F2E 66B80100            <1> 	mov ax, 1
  1578 00000F32 6631DB              <1> 	xor bx, bx
  1579 00000F35 E814650000          <1> 	call showstring2
  1580 00000F3A 66890D[B7110000]    <1> 	mov [locunhandy], cx
  1581 00000F41 668915[B9110000]    <1> 	mov [locunhandx], dx
  1582 00000F48 E905000000          <1> 	jmp errortextdone
  1583                              <1> %endif
  1584                              <1> errortext:
  1585 00000F4D E8080E0000          <1> 	call print		;;get the error message and print it
  1586                              <1> errortextdone:
  1587 00000F52 31C9                <1> 	xor ecx, ecx
  1588 00000F54 8A0D[BD110000]      <1> 	mov cl, [intprob]
  1589 00000F5A E8E1010000          <1> 	call expdump
  1590                              <1> dumpstack:
  1591 00000F5F 8B35[A7110000]      <1> 	mov esi, [esploc]
  1592 00000F65 39E6                <1> 	cmp esi, esp
  1593 00000F67 7216                <1> 	jb donedump
  1594 00000F69 368B0E              <1> 	mov ecx, [ss:esi]
  1595 00000F6C 81EE04000000        <1> 	sub esi, 4
  1596 00000F72 8935[A7110000]      <1> 	mov [esploc], esi
  1597 00000F78 E8C3010000          <1> 	call expdump
  1598 00000F7D EBE0                <1> 	jmp dumpstack
  1599                              <1> donedump:
  1600 00000F7F 0F20C1              <1> 	mov ecx, cr0
  1601 00000F82 E8B9010000          <1> 	call expdump
  1602 00000F87 0F20D1              <1> 	mov ecx, cr2
  1603 00000F8A E8B1010000          <1> 	call expdump
  1604 00000F8F 0F20D9              <1> 	mov ecx, cr3
  1605 00000F92 E8A9010000          <1> 	call expdump
  1606 00000F97 0F20E1              <1> 	mov ecx, cr4
  1607 00000F9A E8A1010000          <1> 	call expdump
  1608 00000F9F 0F00C9              <1> 	str ecx
  1609 00000FA2 E899010000          <1> 	call expdump
  1610 00000FA7 0F010D[C6110000]    <1> 	sidt [igdtcache]
  1611 00000FAE 8B0D[C8110000]      <1> 	mov ecx, [igdtcache + 2]
  1612 00000FB4 E887010000          <1> 	call expdump
  1613 00000FB9 0F0105[C6110000]    <1> 	sgdt [igdtcache]
  1614 00000FC0 8B0D[C8110000]      <1> 	mov ecx, [igdtcache + 2]
  1615 00000FC6 E875010000          <1> 	call expdump
  1616 00000FCB 0F00C1              <1> 	sldt ecx
  1617 00000FCE E86D010000          <1> 	call expdump
  1618 00000FD3 8B35[A7110000]      <1> 	mov esi, [esploc]
  1619 00000FD9 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1620 00000FDE 81C710000000        <1> 	add edi, 16
  1621 00000FE4 893D[C2110000]      <1> 	mov [codelocend], edi
  1622 00000FEA 81EF20000000        <1> 	sub edi, 32
  1623                              <1> dumpcodeloop:
  1624 00000FF0 893D[BE110000]      <1> 	mov [codeloc], edi
  1625 00000FF6 8B0F                <1> 	mov ecx, [edi]
  1626 00000FF8 E843010000          <1> 	call expdump
  1627 00000FFD 8B3D[BE110000]      <1> 	mov edi, [codeloc]
  1628 00001003 81C704000000        <1> 	add edi, 4
  1629 00001009 3B3D[C2110000]      <1> 	cmp edi, [codelocend]
  1630 0000100F 72DF                <1> 	jb dumpcodeloop
  1631 00001011 BE[D1100000]        <1> 	mov esi, backtoosmsg
  1632                              <1> %ifdef gui.included
  1633 00001016 803D[5CA30000]00    <1> 	cmp byte [guion], 0
  1634 0000101D 741F                <1> 	je backtomsg
  1635                              <1> guibacktomsg:
  1636 0000101F 668B15[B9110000]    <1> 	mov dx, [locunhandx]
  1637 00001026 668B0D[B7110000]    <1> 	mov cx, [locunhandy]
  1638 0000102D 66B80100            <1> 	mov ax, 1
  1639 00001031 6631DB              <1> 	xor bx, bx
  1640 00001034 E815640000          <1> 	call showstring2
  1641 00001039 E905000000          <1> 	jmp backtomsgdone
  1642                              <1> backtomsg:
  1643                              <1> %endif
  1644 0000103E E8170D0000          <1> 	call print
  1645                              <1> backtomsgdone:
  1646 00001043 30C0                <1> 	xor al, al
  1647 00001045 E8E0110000          <1> 	call rdcharint
  1648 0000104A 803D[BD110000]03    <1> 	cmp byte [intprob], 3
  1649 00001051 7541                <1> 	jne nodebugint
  1650                              <1> %ifdef gui.included
  1651 00001053 803D[5CA30000]00    <1> 	cmp byte [guion], 0
  1652 0000105A 7427                <1> 	je nodebuggui
  1653 0000105C 668B1D[BB110000]    <1> 	mov bx, [backgroundcache]
  1654 00001063 66891D[F96D0000]    <1> 	mov [background], bx
  1655 0000106A 6631DB              <1> 	xor bx, bx
  1656 0000106D C605[1B580000]00    <1> 	mov byte [mousedisabled], 0
  1657 00001074 E8345D0000          <1> 	call guiclear
  1658 00001079 E87F5D0000          <1> 	call reloadallgraphics
  1659 0000107E E8CC160000          <1> 	call termcopy
  1660                              <1> nodebuggui:
  1661                              <1> %endif
  1662 00001083 8B35[AB110000]      <1> 	mov esi, [espfirst]
  1663 00001089 89F4                <1> 	mov esp, esi
  1664 0000108B 61                  <1> 	popad
  1665 0000108C 17                  <1> 	pop ss
  1666 0000108D 0FA9                <1> 	pop gs
  1667 0000108F 0FA1                <1> 	pop fs
  1668 00001091 07                  <1> 	pop es
  1669 00001092 1F                  <1> 	pop ds
  1670 00001093 CF                  <1> 	iret
  1671                              <1> nodebugint:
  1672 00001094 61                  <1> 	popad
  1673 00001095 17                  <1> 	pop ss
  1674 00001096 0FA9                <1> 	pop gs
  1675 00001098 0FA1                <1> 	pop fs
  1676 0000109A 07                  <1> 	pop es
  1677 0000109B 1F                  <1> 	pop ds
  1678                              <1> %ifdef gui.included
  1679 0000109C 803D[5CA30000]00    <1> 	cmp byte [guion], 0
  1680 000010A3 7427                <1> 	je returnunhandgui
  1681 000010A5 668B1D[BB110000]    <1> 	mov bx, [backgroundcache]
  1682 000010AC 66891D[F96D0000]    <1> 	mov [background], bx
  1683 000010B3 6631DB              <1> 	xor bx, bx
  1684 000010B6 C605[1B580000]00    <1> 	mov byte [mousedisabled], 0
  1685 000010BD E8EB5C0000          <1> 	call guiclear
  1686 000010C2 E8365D0000          <1> 	call reloadallgraphics
  1687 000010C7 E883160000          <1> 	call termcopy
  1688                              <1> %endif
  1689                              <1> returnunhandgui:
  1690 000010CC E9991A0000          <1> 	jmp nwcmd
  1691 000010D1 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1692 000010DA 737420616E79207072- <1>
  1693 000010E3 6F626C656D7320696E- <1>
  1694 000010EC 207468652049737375- <1>
  1695 000010F5 65732073656374696F- <1>
  1696 000010FE 6E20617420736F6C6C- <1>
  1697 00001107 65726F732E676F6F67- <1>
  1698 00001110 6C65636F64652E636F- <1>
  1699 00001119 6D0A                <1>
  1700 0000111B 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1701 00001124 206B657920746F2072- <1>
  1702 0000112D 657475726E20746F20- <1>
  1703 00001136 536F6C6C65724F530A- <1>
  1704 0000113F 00                  <1>
  1705                              <1> expdump:
  1706 00001140 8B35[AF110000]      <1> 	mov esi, [esiloc]
  1707 00001146 89F7                <1> 	mov edi, esi
  1708 00001148 81C70F000000        <1> 	add edi, 15
  1709 0000114E 81C604000000        <1> 	add esi, 4
  1710 00001154 893D[AF110000]      <1> 	mov [esiloc], edi
  1711 0000115A 81EF03000000        <1> 	sub edi, 3
  1712 00001160 E86C1E0000          <1> 	call converthex
  1713 00001165 81EE04000000        <1> 	sub esi, 4
  1714                              <1> %ifdef gui.included
  1715 0000116B 803D[5CA30000]00    <1> 	cmp byte [guion], 0
  1716 00001172 0F8429000000        <1> 	je near expdumptext
  1717 00001178 668B0D[B7110000]    <1> 	mov cx, [locunhandy]
  1718 0000117F 668B15[B9110000]    <1> 	mov dx, [locunhandx]
  1719 00001186 66B80100            <1> 	mov ax, 1
  1720 0000118A 6631DB              <1> 	xor bx, bx
  1721 0000118D E8BC620000          <1> 	call showstring2
  1722 00001192 66890D[B7110000]    <1> 	mov [locunhandy], cx
  1723 00001199 668915[B9110000]    <1> 	mov [locunhandx], dx
  1724 000011A0 C3                  <1> 	ret
  1725                              <1> %endif
  1726                              <1> expdumptext:
  1727 000011A1 E8B40B0000          <1> 	call print
  1728 000011A6 C3                  <1> 	ret
  1729 000011A7 00000000            <1> esploc dd 0
  1730 000011AB 00000000            <1> espfirst dd 0
  1731 000011AF 00000000            <1> esiloc dd 0
  1732 000011B3 00000000            <1> esiregbuf dd 0
  1733 000011B7 0100                <1> locunhandy dw 1
  1734 000011B9 0100                <1> locunhandx dw 1
  1735 000011BB 0000                <1> backgroundcache dw 0
  1736 000011BD 00                  <1> intprob db 0
  1737 000011BE 00000000            <1> codeloc dd 0
  1738 000011C2 00000000            <1> codelocend dd 0
  1739 000011C6 000000000000        <1> igdtcache dw 0,0,0
  1740                              <1> 	unhandmsg:	
  1741 000011CC 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1742 000011D5 303030FF0A00        <1>
  1743                              <1> unhndrg:
  1744 000011DB FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1745 000011E4 303030202000<rept>  <1>
  1746 00001244 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1747 0000124D 303030FF0A00        <1>
  1748 00001253 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1749 0000125C 303030202000<rept>  <1>
  1750 000012BC FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1751 000012C5 303030FF0A00        <1>
  1752 000012CB FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1753 000012D4 303030202000<rept>  <1>
  1754 00001334 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1755 0000133D 303030FF0A00        <1>
  1756 00001343 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1757 0000134C 303030202000<rept>  <1>
  1758 000013AC FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1759 000013B5 303030FF0A00        <1>
  1760                              <1> unhandregs:
  1761 000013BB 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1762 000013C4 303030202000        <1>
  1763 000013CA 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1764 000013D3 303030202000        <1>
  1765 000013D9 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1766 000013E2 303030FF0A00        <1>
  1767 000013E8 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1768 000013F1 303030202000        <1>
  1769 000013F7 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1770 00001400 303030202000        <1>
  1771 00001406 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1772 0000140F 303030202000        <1>
  1773 00001415 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1774 0000141E 303030202000        <1>
  1775 00001424 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1776 0000142D 303030FF0A00        <1>
  1777 00001433 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1778 0000143C 303030202000        <1>
  1779 00001442 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1780 0000144B 303030202000        <1>
  1781 00001451 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1782 0000145A 303030202000        <1>
  1783 00001460 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1784 00001469 303030FF0A00        <1>
  1785 0000146F 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1786 00001478 303030202000        <1>
  1787 0000147E 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1788 00001487 303030202000        <1>
  1789 0000148D 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1790 00001496 303030202000        <1>
  1791 0000149C 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1792 000014A5 303030FF0A00        <1>
  1793 000014AB 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1794 000014B4 303030202000        <1>
  1795 000014BA 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1796 000014C3 303030202000        <1>
  1797 000014C9 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1798 000014D2 303030202000        <1>
  1799 000014D8 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1800 000014E1 303030FF0A00        <1>
  1801 000014E7 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1802 000014F0 303030202000        <1>
  1803 000014F6 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1804 000014FF 303030202000        <1>
  1805 00001505 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1806 0000150E 303030202000        <1>
  1807 00001514 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1808 0000151D 303030FF0A00        <1>
  1809 00001523 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1810 0000152C 303030202000<rept>  <1>
  1811 00001541 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1812 0000154A 30303020FF00        <1>
  1813 00001550 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1814 00001559 3030305D2000        <1>
  1815 0000155F FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1816 00001568 303030202000<rept>  <1>
  1817 0000158C FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1818 00001595 303030FF0A00        <1>
  1819                              <1> unhandmsgend:
  1820                              <1> 
  1821                              <1> errortypes:
  1822 0000159B [DF150000]          <1> 			dd err0
  1823 0000159F [43160000]          <1> 			dd err1
  1824 000015A3 [A4160000]          <1> 			dd err2
  1825 000015A7 [F9160000]          <1> 			dd err3
  1826 000015AB [5D170000]          <1> 			dd err4
  1827 000015AF [AF170000]          <1> 			dd err5
  1828 000015B3 [19180000]          <1> 			dd err6
  1829 000015B7 [81180000]          <1> 			dd err7
  1830 000015BB [CB180000]          <1> 			dd err8
  1831 000015BF [28190000]          <1> 			dd err9
  1832 000015C3 [81190000]          <1> 			dd err10
  1833 000015C7 [CC190000]          <1> 			dd err11
  1834 000015CB [1C1A0000]          <1> 			dd err12
  1835 000015CF [751A0000]          <1> 			dd err13
  1836 000015D3 [D81A0000]          <1> 			dd err14
  1837 000015D7 [141B0000]          <1> 			dd err15
  1838                              <1> errortypesend:
  1839 000015DB [9F1B0000]          <1> 			dd unknownerror
  1840                              <1> 			
  1841 000015DF 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1842 000015E8 6279207A65726F3A0A  <1>
  1843 000015F1 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  1844 000015FA 6C79206C696D2061F6- <1>
  1845 00001603 78203D20EC20776865- <1>
  1846 0000160C 6E206120697320616E- <1>
  1847 00001615 79207265616C206E75- <1>
  1848 0000161E 6D6265722E20486170- <1>
  1849 00001627 707920456173746572- <1>
  1850 00001630 210A                <1>
  1851 00001632 202020202020202020- <1> 		db "            x",26,"0",10,0
  1852 0000163B 202020781A300A00    <1>
  1853                              <1> 		
  1854 00001643 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1855 0000164C 65702F427265616B70- <1>
  1856 00001655 6F696E743A0A        <1>
  1857 0000165B 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1858 00001664 696E74206661756C74- <1>
  1859 0000166D 2C20627265616B706F- <1>
  1860 00001676 696E7420747261702C- <1>
  1861 0000167F 206F722073696E676C- <1>
  1862 00001688 652D73746570207472- <1>
  1863 00001691 617020776173207472- <1>
  1864 0000169A 696767657265642E0A- <1>
  1865 000016A3 00                  <1>
  1866                              <1> 		
  1867 000016A4 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1868 000016AD 6C6520696E74657272- <1>
  1869 000016B6 7570743A0A          <1>
  1870 000016BB 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1871 000016C4 6520696E7465727275- <1>
  1872 000016CD 707420776173207472- <1>
  1873 000016D6 696767657265642074- <1>
  1874 000016DF 68617420636F756C64- <1>
  1875 000016E8 206E6F74206265206D- <1>
  1876 000016F1 61736B65642E0A00    <1>
  1877                              <1> 		
  1878 000016F9 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1879 00001702 743A0A              <1>
  1880 00001705 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1881 0000170E 727275707420697320- <1>
  1882 00001717 7573656420696E2070- <1>
  1883 00001720 726F6772616D732074- <1>
  1884 00001729 6F2073686F77207468- <1>
  1885 00001732 6520737461636B2061- <1>
  1886 0000173B 6E6420726567697374- <1>
  1887 00001744 65727320616E642063- <1>
  1888 0000174D 616E2062650A        <1>
  1889 00001753 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1890 0000175C 00                  <1>
  1891                              <1> 		
  1892 0000175D 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1893 00001766 0A                  <1>
  1894 00001767 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1895 00001770 73736F722072616E20- <1>
  1896 00001779 696E746F20616E2049- <1>
  1897 00001782 4E544F20696E737472- <1>
  1898 0000178B 756374696F6E207769- <1>
  1899 00001794 746820746865206F76- <1>
  1900 0000179D 6572666C6F7720666C- <1>
  1901 000017A6 6167207365742E0A00  <1>
  1902                              <1> 		
  1903 000017AF 426F756E6473206368- <1> err5	db "Bounds check:",10
  1904 000017B8 65636B3A0A          <1>
  1905 000017BD 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1906 000017C6 73736F72207265626F- <1>
  1907 000017CF 756E6465642066726F- <1>
  1908 000017D8 6D206120424F554E44- <1>
  1909 000017E1 20696E737472756374- <1>
  1910 000017EA 696F6E2072756E206F- <1>
  1911 000017F3 6E20616E206F706572- <1>
  1912 000017FC 616E64207468617420- <1>
  1913 00001805 776173206F75740A    <1>
  1914 0000180D 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1915 00001816 2E0A00              <1>
  1916                              <1> 		
  1917 00001819 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1918 00001822 70636F64653A0A      <1>
  1919 00001829 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1920 00001832 73736F722068617320- <1>
  1921 0000183B 6E6F20696465612077- <1>
  1922 00001844 686174206974207761- <1>
  1923 0000184D 7320747279696E6720- <1>
  1924 00001856 746F20657865637574- <1>
  1925 0000185F 652E20446F6E277420- <1>
  1926 00001868 72756E205353453420- <1>
  1927 00001871 636F64650A          <1>
  1928 00001876 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1929 0000187F 0A00                <1>
  1930                              <1> 		
  1931 00001881 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1932 0000188A 6F72206E6F74206176- <1>
  1933 00001893 61696C61626C653A0A  <1>
  1934 0000189C 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1935 000018A5 206B6E6F7720746865- <1>
  1936 000018AE 7920646F6E2774206D- <1>
  1937 000018B7 616B652074686F7365- <1>
  1938 000018C0 20616E796D6F726521- <1>
  1939 000018C9 0A00                <1>
  1940                              <1> 		
  1941 000018CB 446F75626C65206661- <1> err8	db "Double fault:",10
  1942 000018D4 756C743A0A          <1>
  1943 000018D9 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1944 000018E2 74696F6E2068616E64- <1>
  1945 000018EB 6C657220636F756C64- <1>
  1946 000018F4 206E6F742068616E64- <1>
  1947 000018FD 6C6520746861742069- <1>
  1948 00001906 7420636F756C64206E- <1>
  1949 0000190F 6F742068616E646C65- <1>
  1950 00001918 20616E206578636570- <1>
  1951 00001921 74696F6E2E0A00      <1>
  1952                              <1> 		
  1953 00001928 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1954 00001931 6F72207365676D656E- <1>
  1955 0000193A 74206F76657272756E- <1>
  1956 00001943 3A0A00              <1>
  1957 00001946 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1958 0000194F 722068617070656E73- <1>
  1959 00001958 20696E206D6F646572- <1>
  1960 00001961 6E20636F6D70757465- <1>
  1961 0000196A 72732C20616E64206E- <1>
  1962 00001973 657665722073686F75- <1>
  1963 0000197C 6C642E0A00          <1>
  1964                              <1> 
  1965 00001981 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1966 0000198A 53533A0A            <1>
  1967 0000198E 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1968 00001997 686174207761732073- <1>
  1969 000019A0 776974636865642074- <1>
  1970 000019A9 6F20697320696E7661- <1>
  1971 000019B2 6C69642E204E6F7468- <1>
  1972 000019BB 696E672066756E6E79- <1>
  1973 000019C4 20686572652E0A00    <1>
  1974                              <1> 		
  1975 000019CC 5365676D656E74206E- <1> err11	db "Segment not present:",10
  1976 000019D5 6F742070726573656E- <1>
  1977 000019DE 743A0A              <1>
  1978 000019E1 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  1979 000019EA 6E7420626974206F66- <1>
  1980 000019F3 20746865207365676D- <1>
  1981 000019FC 656E74206465736372- <1>
  1982 00001A05 6970746F7220697320- <1>
  1983 00001A0E 73657420746F207A65- <1>
  1984 00001A17 726F2E0A00          <1>
  1985                              <1> 		
  1986 00001A1C 537461636B20657863- <1> err12	db "Stack exception:",10
  1987 00001A25 657074696F6E3A0A    <1>
  1988 00001A2D 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  1989 00001A36 7363726970746F7220- <1>
  1990 00001A3F 697320696E76616C69- <1>
  1991 00001A48 64206F72206E6F7420- <1>
  1992 00001A51 70726573656E74206F- <1>
  1993 00001A5A 7220697473206C696D- <1>
  1994 00001A63 697420697320746F6F- <1>
  1995 00001A6C 20736D616C6C2E0A00  <1>
  1996                              <1> 		
  1997 00001A75 47656E6572616C2070- <1> err13	db "General protection violation:",10
  1998 00001A7E 726F74656374696F6E- <1>
  1999 00001A87 2076696F6C6174696F- <1>
  2000 00001A90 6E3A0A              <1>
  2001 00001A93 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2002 00001A9C 746564207468652063- <1>
  2003 00001AA5 6F6D70757465722E20- <1>
  2004 00001AAE 537465702061776179- <1>
  2005 00001AB7 20736C6F776C792E20- <1>
  2006 00001AC0 546865204642492069- <1>
  2007 00001AC9 73206F6E2069747320- <1>
  2008 00001AD2 7761792E0A00        <1>
  2009                              <1> 		
  2010 00001AD8 50616765206661756C- <1> err14	db "Page fault:",10
  2011 00001AE1 743A0A              <1>
  2012 00001AE4 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2013 00001AED 746861742077617320- <1>
  2014 00001AF6 726571756573746564- <1>
  2015 00001AFF 20776173206E6F7420- <1>
  2016 00001B08 617661696C61626C65- <1>
  2017 00001B11 2E0A00              <1>
  2018                              <1> 		
  2019 00001B14 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2020 00001B1D 666F7220506C616E20- <1>
  2021 00001B26 523A0A              <1>
  2022 00001B29 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2023 00001B32 727275707420697320- <1>
  2024 00001B3B 726573657276656420- <1>
  2025 00001B44 666F72207573616765- <1>
  2026 00001B4D 206F6E6C7920627920- <1>
  2027 00001B56 746865206D696C6974- <1>
  2028 00001B5F 617279207768656E20- <1>
  2029 00001B68 6974206973206E6563- <1>
  2030 00001B71 6573736172790A      <1>
  2031 00001B78 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  2032 00001B81 746520612066756C6C- <1>
  2033 00001B8A 2D7363616C6520636F- <1>
  2034 00001B93 757020642782746174- <1>
  2035 00001B9C 2E0A00              <1>
  2036                              <1> 		
  2037 00001B9F 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2038 00001BA8 68656C6C206A757374- <1>
  2039 00001BB1 2068617070656E6564- <1>
  2040 00001BBA 3F2049732065766572- <1>
  2041 00001BC3 796F6E65206F6B6179- <1>
  2042 00001BCC 3F2048617264206472- <1>
  2043 00001BD5 6976653F2056696465- <1>
  2044 00001BDE 6F20636172643F0A    <1>
  2045 00001BE6 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2046 00001BEF 726520796F75207468- <1>
  2047 00001BF8 6572653F0A00        <1>
  2048                              <1> %else
  2049                              <1> unhand:	
  2050                              <1> 	%assign i 0
  2051                              <1> 	%rep 32
  2052                              <1> 	mov byte [intprob], i
  2053                              <1> 	jmp unhand2
  2054                              <1> 	%assign i i+1
  2055                              <1> 	%endrep
  2056                              <1> unhand2:
  2057                              <1> 	cmp byte [intprob], 3
  2058                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2059                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2060                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2061                              <1> 	mov bl, [intprob]
  2062                              <1> 	jmp exitprog
  2063                              <1> intprob db 0
  2064                              <1> %endif
  2065                                      %include "source/ints.asm"
  2066                              <1> newints:	;for great justice
  2067 00001BFE 80FC00              <1> 	cmp ah, 0
  2068 00001C01 0F84A3000000        <1> 	je near exitprog   ;kills app
  2069 00001C07 80FC01              <1> 	cmp ah, 1
  2070 00001C0A 0F8422010000        <1> 	je near prntstr  ;print string
  2071 00001C10 80FC02              <1> 	cmp ah, 2
  2072 00001C13 0F8474010000        <1> 	je near readstr	;read string
  2073 00001C19 80FC03              <1> 	cmp ah, 3
  2074 00001C1C 0F8494010000        <1> 	je near clearscrn	;clear screen
  2075 00001C22 80FC04              <1> 	cmp ah, 4
  2076 00001C25 0F8406020000        <1> 	je near prntreadstr	;read and print string
  2077 00001C2B 80FC05              <1> 	cmp ah, 5
  2078 00001C2E 0F84EA050000        <1> 	je near readchar	;get char
  2079 00001C34 80FC06              <1> 	cmp ah, 6
  2080 00001C37 0F843C060000        <1> 	je near prntchar	;print char
  2081 00001C3D 80FC07              <1> 	cmp ah, 7
  2082 00001C40 0F8434080000        <1> 	je near openfile	;read file
  2083                              <1> ;	cmp ah, 8
  2084                              <1> ;	je near closefile	;close file
  2085 00001C46 80FC09              <1> 	cmp ah, 9
  2086 00001C49 0F8435080000        <1> 	je near num2str	;convert number to string
  2087 00001C4F 80FC0A              <1> 	cmp ah, 10
  2088 00001C52 0F8444080000        <1> 	je near str2num	;convert string to number
  2089                              <1> %ifdef threads.included
  2090 00001C58 80FC0B              <1> 	cmp ah, 11
  2091 00001C5B 0F8447080000        <1> 	je near forkthread	;create thread
  2092                              <1> %endif
  2093 00001C61 80FC0C              <1> 	cmp ah, 12
  2094 00001C64 0F8415090000        <1> 	je near gettime	;get time
  2095 00001C6A 80FC0D              <1> 	cmp ah, 13
  2096 00001C6D 0F8421090000        <1> 	je near settime	;set time
  2097 00001C73 80FC0E              <1> 	cmp ah, 14
  2098 00001C76 0F8428090000        <1> 	je near runcmd	;run program
  2099 00001C7C 80FC0F              <1> 	cmp ah, 15
  2100 00001C7F 0F8434090000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2101 00001C85 80FC10              <1> 	cmp ah, 16
  2102 00001C88 0F8456090000        <1> 	je near hooksig	;hook code to a signal
  2103                              <1> %ifdef gui.included
  2104 00001C8E 80FC11              <1> 	cmp ah, 17
  2105 00001C91 0F845D090000        <1> 	je near guiint	;GUI operations
  2106                              <1> %endif
  2107                              <1> %ifdef sound.included
  2108 00001C97 80FC12              <1> 	cmp ah, 18
  2109 00001C9A 0F8454090000        <1> 	je near guiint	;sound operations
  2110                              <1> %endif
  2111                              <1> %ifdef network.included
  2112 00001CA0 80FC13              <1> 	cmp ah, 19
  2113 00001CA3 0F84A10A0000        <1> 	je near netint	;networking operations
  2114                              <1> %endif
  2115 00001CA9 CF                  <1> 	iret
  2116                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2117                              <2> exitprog:
  2118 00001CAA 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2119 00001CAE 8ED8                <2> 	mov ds, ax
  2120 00001CB0 8EC0                <2> 	mov es, ax
  2121 00001CB2 8EE0                <2> 	mov fs, ax
  2122 00001CB4 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2123 00001CB8 8EE8                <2> 	mov gs, ax
  2124 00001CBA C705[14670000]0000- <2> 	mov dword [currentthread], 0
  2125 00001CC2 0000                <2>
  2126 00001CC4 C705[0F670000]0400- <2> 	mov dword [lastthread], 4
  2127 00001CCC 0000                <2>
  2128 00001CCE C605[13670000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2129 00001CD5 8B25[A6B90000]      <2> 	mov esp, [previousstack] ;and this
  2130 00001CDB 81FB00000000        <2> 	cmp ebx, 0
  2131 00001CE1 0F8501000000        <2> 	jne near .error
  2132 00001CE7 C3                  <2> 	ret
  2133                              <2> .error:
  2134 00001CE8 89D9                <2> 	mov ecx, ebx
  2135 00001CEA B006                <2> 	mov al, 6
  2136 00001CEC A2[2F300000]        <2> 	mov [firsthexshown], al
  2137 00001CF1 51                  <2> 	push ecx
  2138 00001CF2 BE[0D1D0000]        <2> 	mov esi, .msg1
  2139 00001CF7 E840000000          <2> 	call printhighlight
  2140 00001CFC 59                  <2> 	pop ecx
  2141 00001CFD E842130000          <2> 	call showhex
  2142 00001D02 BE[221D0000]        <2> 	mov esi, .msg2
  2143 00001D07 E830000000          <2> 	call printhighlight
  2144 00001D0C C3                  <2> 	ret
  2145                              <2> 	
  2146 00001D0D 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2147 00001D16 7461747573206F6620- <2>
  2148 00001D1F 307800              <2>
  2149 00001D22 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2150 00001D2B 726E65642E0A00      <2>
  2151                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2152                              <2> prntstr:
  2153 00001D32 E82A000000          <2> call printint
  2154 00001D37 E969E5FFFF          <2> jmp timerinterrupt
  2155                              <2> 
  2156                              <2> 	printhighlight:
  2157 00001D3C 6631C0              <2> 		xor ax, ax
  2158 00001D3F 66BBF000            <2> 		mov bx, 0xF0
  2159 00001D43 E919000000          <2> 		jmp printint
  2160                              <2> 	printquiet:
  2161 00001D48 6631C0              <2> 		xor ax, ax
  2162 00001D4B A2[8C1D0000]        <2> 		mov [endkeyprint], al
  2163 00001D50 66BB0700            <2> 		mov bx, 7
  2164 00001D54 E820000000          <2> 		call printint.b
  2165 00001D59 C3                  <2> 		ret
  2166                              <2>     print:
  2167 00001D5A 6631C0              <2> 		xor ax, ax
  2168 00001D5D 66BB0700            <2> 		mov bx, 7
  2169                              <2> 	printint:	;;print line, al=last key,bl=modifier, esi=buffer
  2170 00001D61 56                  <2> 		push esi
  2171 00001D62 A2[8C1D0000]        <2> 		mov [endkeyprint], al
  2172 00001D67 E80D000000          <2> 		call .b
  2173 00001D6C 89F1                <2> 		mov ecx, esi
  2174 00001D6E 5F                  <2> 		pop edi
  2175 00001D6F 29F9                <2> 		sub ecx, edi
  2176 00001D71 51                  <2> 		push ecx
  2177 00001D72 E8D8090000          <2> 		call termcopy
  2178 00001D77 59                  <2> 		pop ecx
  2179 00001D78 C3                  <2> 		ret
  2180                              <2> 	.b:
  2181 00001D79 8A06                <2> 		mov al, [esi]
  2182 00001D7B 3A05[8C1D0000]      <2> 		cmp al, [endkeyprint]
  2183 00001D81 7408                <2> 		je .done
  2184 00001D83 E816050000          <2> 		call prcharq
  2185 00001D88 46                  <2> 		inc esi
  2186 00001D89 EBEE                <2> 		jmp .b
  2187                              <2> 	.done:
  2188 00001D8B C3                  <2> 		ret
  2189                              <2> 
  2190 00001D8C 00                  <2> endkeyprint db 0
  2191                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2192                              <2> readstr:
  2193 00001D8D E805000000          <2> call readint
  2194 00001D92 E90EE5FFFF          <2> jmp timerinterrupt
  2195                              <2> 
  2196                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2197 00001D97 89C3                <2> 		mov ebx, eax
  2198                              <2> 	.b:
  2199 00001D99 53                  <2> 		push ebx
  2200 00001D9A 57                  <2> 		push edi
  2201 00001D9B 56                  <2> 		push esi
  2202 00001D9C 30C0                <2> 		xor al, al
  2203 00001D9E E887040000          <2> 		call rdcharint
  2204 00001DA3 5E                  <2> 		pop esi
  2205 00001DA4 8806                <2> 		mov [esi], al
  2206 00001DA6 46                  <2> 		inc esi
  2207 00001DA7 5F                  <2> 		pop edi
  2208 00001DA8 5B                  <2> 		pop ebx
  2209 00001DA9 39FE                <2> 		cmp esi, edi
  2210 00001DAB 7304                <2> 		jae .done
  2211 00001DAD 38D8                <2> 		cmp al, bl
  2212 00001DAF 75E8                <2> 		jne .b
  2213                              <2> 	.done:
  2214 00001DB1 4E                  <2> 		dec esi
  2215 00001DB2 C60600              <2> 		mov byte [esi], 0
  2216 00001DB5 C3                  <2> 		ret
  2217                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2218                              <2> clearscrn:
  2219 00001DB6 E805000000          <2> call clear
  2220 00001DBB E9E5E4FFFF          <2> jmp timerinterrupt
  2221                              <2> %ifdef io.serial
  2222                              <2> clear:
  2223                              <2> 	ret
  2224                              <2> %else
  2225                              <2> clear:		
  2226 00001DC0 668B0D[76240000]    <2> 		mov cx, [charxy]
  2227 00001DC7 BF[3CD70000]        <2> 		mov edi, videobuf
  2228 00001DCC 31C0                <2> 		xor eax, eax
  2229 00001DCE A3[6C240000]        <2> 		mov [linebeginpos], eax
  2230 00001DD3 A3[70240000]        <2> 		mov [videobufpos], eax
  2231 00001DD8 6631D2              <2> 		xor dx, dx
  2232 00001DDB 66A3[74240000]      <2> 		mov [charpos], ax
  2233 00001DE1 B407                <2> 		mov ah, 7
  2234                              <2> 	clearb:
  2235 00001DE3 668907              <2> 		mov [edi], ax
  2236 00001DE6 81C702000000        <2> 		add edi, 2
  2237 00001DEC FEC9                <2> 		dec cl
  2238 00001DEE 80F900              <2> 		cmp cl, 0
  2239 00001DF1 75F0                <2> 		jne clearb
  2240 00001DF3 8A0D[76240000]      <2> 		mov cl, [charxy]
  2241 00001DF9 FECD                <2> 		dec ch
  2242 00001DFB 80FD00              <2> 		cmp ch, 0
  2243 00001DFE 75E3                <2> 		jne clearb
  2244                              <2> 	cleardouble:
  2245 00001E00 BF[E0410100]        <2> 		mov edi, videobuf2
  2246 00001E05 668B0D[76240000]    <2> 		mov cx, [charxy]
  2247 00001E0C 31C0                <2> 		xor eax, eax
  2248                              <2> 	clearc:
  2249 00001E0E 668907              <2> 		mov [edi], ax
  2250 00001E11 81C702000000        <2> 		add edi, 2
  2251 00001E17 FEC9                <2> 		dec cl
  2252 00001E19 80F900              <2> 		cmp cl, 0
  2253 00001E1C 75F0                <2> 		jne clearc
  2254 00001E1E 8A0D[76240000]      <2> 		mov cl, [charxy]
  2255 00001E24 FECD                <2> 		dec ch
  2256 00001E26 80FD00              <2> 		cmp ch, 0
  2257 00001E29 75E3                <2> 		jne clearc
  2258 00001E2B E81F090000          <2> 		call termcopy
  2259 00001E30 C3                  <2> 		ret
  2260                              <2> %endif
  2261                              <2> 		
  2262                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2263                              <2> prntreadstr:
  2264 00001E31 E809000000          <2> call rdprint
  2265 00001E36 E96AE4FFFF          <2> jmp timerinterrupt
  2266                              <2> 
  2267                              <2> readline:
  2268 00001E3B B00A                <2>   mov al, 10
  2269 00001E3D B307                <2>   mov bl, 7
  2270                              <2> rdprint:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  2271 00001E3F E80D000000          <2> 	call rdprintdos
  2272 00001E44 50                  <2> 	push eax
  2273 00001E45 A0[0B220000]        <2> 	mov al, [endkeyrdpr]
  2274 00001E4A E83E040000          <2> 	call prcharint
  2275 00001E4F 58                  <2> 	pop eax
  2276 00001E50 C3                  <2> 	ret
  2277                              <2> 
  2278                              <2> 	rdprintdos:
  2279 00001E51 8935[13220000]      <2> 		mov [buftxtloc], esi
  2280 00001E57 A2[0B220000]        <2> 		mov [endkeyrdpr], al
  2281 00001E5C 881D[0C220000]      <2> 		mov [modkeyrdpr], bl
  2282 00001E62 8935[0D220000]      <2> 		mov [firstesirdpr], esi
  2283 00001E68 893D[17220000]      <2> 		mov [endbufferrdpr], edi
  2284 00001E6E 8B3D[90AC0100]      <2> 		mov edi, [commandsentered]
  2285 00001E74 893D[8CAC0100]      <2> 		mov [commandlistentries], edi
  2286                              <2> 	rdprintb:
  2287 00001E7A 56                  <2> 		push esi
  2288 00001E7B B001                <2> 		mov al, 1
  2289 00001E7D E8A8030000          <2> 		call rdcharint
  2290 00001E82 5E                  <2> 		pop esi
  2291                              <2> %ifdef io.serial
  2292                              <2> 		cmp ah, 0x41
  2293                              <2> 		je near rdprup
  2294                              <2> 		cmp ah, 0x42
  2295                              <2> 		je near rdprdown
  2296                              <2> 		cmp ah, 0x43
  2297                              <2> 		je near rdprright
  2298                              <2> 		cmp ah, 0x44
  2299                              <2> 		je near rdprleft
  2300                              <2> 		cmp ah, 0x31
  2301                              <2> 		je near rdprhome
  2302                              <2> 		cmp ah, 0x48
  2303                              <2> 		je near rdprhome
  2304                              <2> 		cmp ah, 0x46
  2305                              <2> 		je near rdprend
  2306                              <2> 		cmp ah, 0x33
  2307                              <2> 		je near rdprdel
  2308                              <2> 		cmp ah, 0x34
  2309                              <2> 		je near rdprend
  2310                              <2> %else
  2311 00001E83 803D[0A5E0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2312 00001E8A 751B                <2> 		jne notspecialrdprnt
  2313 00001E8C 80FC53              <2> 		cmp ah, 0x53
  2314 00001E8F 0F841E030000        <2> 		je near rdprdel
  2315 00001E95 80FC47              <2> 		cmp ah, 0x47
  2316 00001E98 0F8407010000        <2> 		je near rdprhome
  2317 00001E9E 80FC4F              <2> 		cmp ah, 0x4F
  2318 00001EA1 0F841D010000        <2> 		je near rdprend
  2319                              <2> 	notspecialrdprnt:
  2320 00001EA7 80FC50              <2> 		cmp ah, 0x50
  2321 00001EAA 0F849B010000        <2> 		je near rdprdown
  2322 00001EB0 80FC4D              <2> 		cmp ah, 0x4D
  2323 00001EB3 0F844A010000        <2> 		je near rdprright
  2324 00001EB9 80FC4B              <2> 		cmp ah, 0x4B
  2325 00001EBC 0F841F010000        <2> 		je near rdprleft
  2326 00001EC2 80FC48              <2> 		cmp ah, 0x48
  2327 00001EC5 0F84C3010000        <2> 		je near rdprup
  2328                              <2> %endif
  2329 00001ECB 3C08                <2> 		cmp al, 8
  2330 00001ECD 0F84FB020000        <2> 		je near rdprbscheck
  2331 00001ED3 3C00                <2> 		cmp al, 0
  2332 00001ED5 74A3                <2> 		je rdprintb
  2333 00001ED7 80FC00              <2> 		cmp ah, 0
  2334 00001EDA 749E                <2> 		je rdprintb
  2335 00001EDC 8806                <2> 		mov [esi], al
  2336 00001EDE 46                  <2> 		inc esi
  2337                              <2> 	bscheckequal:
  2338 00001EDF 8A1D[0C220000]      <2> 		mov bl, [modkeyrdpr]
  2339 00001EE5 8A3D[12220000]      <2> 		mov bh, [txtmask]
  2340 00001EEB 80FF00              <2> 		cmp bh, 0
  2341 00001EEE 7404                <2> 		je nomasktxt
  2342 00001EF0 88F8                <2> 		mov al, bh
  2343 00001EF2 30FF                <2> 		xor bh, bh
  2344                              <2> 	nomasktxt:
  2345 00001EF4 56                  <2> 		push esi
  2346 00001EF5 66A3[09220000]      <2> 		mov [axcache], ax
  2347 00001EFB 8A25[0B220000]      <2> 		mov ah, [endkeyrdpr]
  2348 00001F01 38E0                <2> 		cmp al, ah
  2349 00001F03 742E                <2> 		je nobackprintbuftxt2
  2350 00001F05 E883030000          <2> 		call prcharint
  2351 00001F0A BE[26CC0000]        <2> 		mov esi, buftxt2
  2352 00001F0F E834FEFFFF          <2> 		call printquiet
  2353 00001F14 B020                <2> 		mov al, " "
  2354 00001F16 E883030000          <2> 		call prcharq
  2355 00001F1B B008                <2> 		mov al, 8
  2356 00001F1D 81FE[26CC0000]      <2> 		cmp esi, buftxt2
  2357 00001F23 740E                <2> 		je nobackprintbuftxt2
  2358                              <2> 	backprintbuftxt2:
  2359 00001F25 E874030000          <2> 		call prcharq
  2360 00001F2A 4E                  <2> 		dec esi
  2361 00001F2B 81FE[26CC0000]      <2> 		cmp esi, buftxt2
  2362 00001F31 77F2                <2> 		ja backprintbuftxt2
  2363                              <2> 	nobackprintbuftxt2:
  2364 00001F33 3C0A                <2> 		cmp al, 10
  2365 00001F35 7405                <2> 		je nonobackprint
  2366 00001F37 E851030000          <2> 		call prcharint
  2367                              <2> 	nonobackprint:
  2368 00001F3C 5E                  <2> 		pop esi
  2369 00001F3D 3B35[17220000]      <2> 		cmp esi, [endbufferrdpr]
  2370 00001F43 0F8319000000        <2> 		jae near donerdprinc
  2371 00001F49 66A1[09220000]      <2> 		mov ax, [axcache]
  2372 00001F4F 8A25[0B220000]      <2> 		mov ah, [endkeyrdpr]
  2373 00001F55 38E0                <2> 		cmp al, ah
  2374 00001F57 0F851DFFFFFF        <2> 		jne rdprintb
  2375 00001F5D E901000000          <2> 		jmp donerdprint
  2376                              <2> 	donerdprinc:
  2377 00001F62 46                  <2> 		inc esi
  2378                              <2> 	donerdprint:
  2379 00001F63 4E                  <2> 		dec esi
  2380 00001F64 BF[26CC0000]        <2> 		mov edi, buftxt2
  2381                              <2> 	copylaterstuff:
  2382 00001F69 8A07                <2> 		mov al, [edi]
  2383 00001F6B 3C00                <2> 		cmp al, 0
  2384 00001F6D 7406                <2> 		je nocopylaterstuff
  2385 00001F6F 8806                <2> 		mov [esi], al
  2386 00001F71 47                  <2> 		inc edi
  2387 00001F72 46                  <2> 		inc esi
  2388 00001F73 EBF4                <2> 		jmp copylaterstuff
  2389                              <2> 	nocopylaterstuff:
  2390 00001F75 C60600              <2> 		mov byte [esi], 0
  2391 00001F78 E80B000000          <2> 		call clearbuftxt2
  2392 00001F7D 89F1                <2> 		mov ecx, esi
  2393 00001F7F 8B3D[0D220000]      <2> 		mov edi, [firstesirdpr]
  2394 00001F85 29F9                <2> 		sub ecx, edi
  2395 00001F87 C3                  <2> 		ret
  2396                              <2> 	
  2397                              <2> 	clearbuftxt2:
  2398 00001F88 30C0                <2> 		xor al, al
  2399 00001F8A BF[26CC0000]        <2> 		mov edi, buftxt2
  2400                              <2> 	clearbuftxt2lp:
  2401 00001F8F 8807                <2> 		mov [edi], al
  2402 00001F91 47                  <2> 		inc edi
  2403 00001F92 81FF[26D00000]      <2> 		cmp edi, buftxt
  2404 00001F98 75F5                <2> 		jne clearbuftxt2lp
  2405 00001F9A C3                  <2> 		ret
  2406                              <2> 	
  2407                              <2> 	rdprintb2:
  2408 00001F9B E8AF070000          <2> 		call termcopy
  2409 00001FA0 E9D5FEFFFF          <2> 		jmp rdprintb
  2410                              <2> 	
  2411                              <2> 	rdprhome:
  2412 00001FA5 3B35[13220000]      <2> 		cmp esi, [buftxtloc]
  2413 00001FAB 0F84EAFFFFFF        <2> 		je near rdprintb2
  2414 00001FB1 BF[26CC0000]        <2> 		mov edi, buftxt2
  2415 00001FB6 8A07                <2> 		mov al, [edi]
  2416 00001FB8 E82F020000          <2> 		call shiftbuftxt2
  2417 00001FBD E8DC020000          <2> 		call prcharq
  2418 00001FC2 EBE1                <2> 		jmp rdprhome
  2419                              <2> 		
  2420                              <2> 	rdprend:
  2421 00001FC4 BF[26CC0000]        <2> 		mov edi, buftxt2
  2422 00001FC9 8A07                <2> 		mov al, [edi]
  2423 00001FCB 3C00                <2> 		cmp al, 0
  2424 00001FCD 0F84C8FFFFFF        <2> 		je near rdprintb2
  2425 00001FD3 8806                <2> 		mov [esi], al
  2426 00001FD5 E849000000          <2> 		call shiftbuftxt2lft
  2427 00001FDA E8BF020000          <2> 		call prcharq
  2428 00001FDF EBE3                <2> 		jmp rdprend
  2429                              <2> 	
  2430                              <2> 	rdprleft:
  2431 00001FE1 3B35[13220000]      <2> 		cmp esi, [buftxtloc]
  2432 00001FE7 0F848DFEFFFF        <2> 		je near rdprintb
  2433 00001FED BF[26CC0000]        <2> 		mov edi, buftxt2
  2434 00001FF2 8A07                <2> 		mov al, [edi]
  2435 00001FF4 E8F3010000          <2> 		call shiftbuftxt2
  2436 00001FF9 E88F020000          <2> 		call prcharint
  2437 00001FFE E977FEFFFF          <2> 		jmp rdprintb
  2438                              <2> 		
  2439                              <2> 	rdprright:
  2440 00002003 BF[26CC0000]        <2> 		mov edi, buftxt2
  2441 00002008 8A07                <2> 		mov al, [edi]
  2442 0000200A 3C00                <2> 		cmp al, 0
  2443 0000200C 0F8468FEFFFF        <2> 		je near rdprintb
  2444 00002012 8806                <2> 		mov [esi], al
  2445 00002014 E80A000000          <2> 		call shiftbuftxt2lft
  2446 00002019 E86F020000          <2> 		call prcharint
  2447 0000201E E957FEFFFF          <2> 		jmp rdprintb
  2448                              <2> 	shiftbuftxt2lft:
  2449 00002023 3C00                <2> 		cmp al, 0
  2450 00002025 7408                <2> 		je noshiftbuftxt2lft
  2451 00002027 47                  <2> 		inc edi
  2452 00002028 8A07                <2> 		mov al, [edi]
  2453 0000202A 8847FF              <2> 		mov [edi - 1], al
  2454 0000202D EBF4                <2> 		jmp shiftbuftxt2lft
  2455                              <2> 	noshiftbuftxt2lft:
  2456 0000202F 8A06                <2> 		mov al, [esi]
  2457 00002031 46                  <2> 		inc esi
  2458 00002032 8A1D[0C220000]      <2> 		mov bl, [modkeyrdpr]
  2459 00002038 C3                  <2> 		ret
  2460                              <2> 		
  2461                              <2> 	rdprdownbck:
  2462 00002039 FECC                <2> 		dec ah
  2463 0000203B 8825[11220000]      <2> 		mov [commandedit], ah
  2464 00002041 E88D000000          <2> 		call rdprbckspc
  2465 00002046 E92FFEFFFF          <2> 		jmp rdprintb
  2466                              <2> 	
  2467                              <2> 	rdprdown:
  2468 0000204B 8A25[11220000]      <2> 		mov ah, [commandedit]
  2469 00002051 80FC01              <2> 		cmp ah, 1
  2470 00002054 0F8620FEFFFF        <2> 		jbe near rdprintb
  2471 0000205A 8B3D[90AC0100]      <2> 		mov edi, [commandsentered]
  2472 00002060 3B3D[8CAC0100]      <2> 		cmp edi, [commandlistentries]
  2473 00002066 7618                <2> 		jbe .nofix
  2474 00002068 8105[8CAC0100]0200- <2> 		add dword [commandlistentries], 2
  2475 00002070 0000                <2>
  2476 00002072 3B3D[8CAC0100]      <2> 		cmp edi, [commandlistentries]
  2477 00002078 7706                <2> 		ja .nofix
  2478 0000207A 893D[8CAC0100]      <2> 		mov [commandlistentries], edi
  2479                              <2> 	.nofix:
  2480 00002080 80FC02              <2> 		cmp ah, 2
  2481 00002083 74B4                <2> 		je rdprdownbck
  2482 00002085 80EC02              <2> 		sub ah, 2
  2483 00002088 8825[11220000]      <2> 		mov [commandedit], ah
  2484                              <2> 		
  2485                              <2> 	rdprup:
  2486 0000208E 3805[11220000]      <2> 		cmp [commandedit], al
  2487 00002094 0F84E0FDFFFF        <2> 		je near rdprintb
  2488 0000209A 813D[8CAC0100]0000- <2> 		cmp dword [commandlistentries], 0
  2489 000020A2 0000                <2>
  2490 000020A4 0F84D0FDFFFF        <2> 		je near rdprintb
  2491 000020AA FF0D[8CAC0100]      <2> 		dec dword [commandlistentries]
  2492                              <2> 	.lp:
  2493 000020B0 BF[26CC0000]        <2> 		mov edi, buftxt2
  2494 000020B5 8A07                <2> 		mov al, [edi]
  2495 000020B7 3C00                <2> 		cmp al, 0
  2496 000020B9 740E                <2> 		je .start
  2497 000020BB 8806                <2> 		mov [esi], al
  2498 000020BD E861FFFFFF          <2> 		call shiftbuftxt2lft
  2499 000020C2 E8D7010000          <2> 		call prcharq
  2500 000020C7 EBE7                <2> 		jmp .lp
  2501                              <2> 	.start:
  2502 000020C9 E805000000          <2> 		call rdprbckspc
  2503 000020CE E941000000          <2> 		jmp getcurrentcommandstr
  2504                              <2> 	rdprbckspc:
  2505 000020D3 3B35[13220000]      <2> 		cmp esi, [buftxtloc]
  2506 000020D9 742B                <2> 		je nordprupbck
  2507                              <2> 	rdprupbckspclp:
  2508 000020DB B008                <2> 		mov al, 8
  2509 000020DD 8A1D[0C220000]      <2> 		mov bl, [modkeyrdpr]
  2510 000020E3 E8B6010000          <2> 		call prcharq
  2511 000020E8 B020                <2> 		mov al, ' '
  2512 000020EA E8AF010000          <2> 		call prcharq
  2513 000020EF B008                <2> 		mov al, 8
  2514 000020F1 E8A8010000          <2> 		call prcharq
  2515 000020F6 4E                  <2> 		dec esi
  2516 000020F7 3B35[13220000]      <2> 		cmp esi, [buftxtloc]
  2517 000020FD 7402                <2> 		je nordprupbck2
  2518 000020FF EBDA                <2> 		jmp rdprupbckspclp
  2519                              <2> 	nordprupbck2:
  2520 00002101 E849060000          <2> 		call termcopy
  2521                              <2> 	nordprupbck:
  2522 00002106 8B3D[88AC0100]      <2> 		mov edi, [commandbufpos]
  2523 0000210C 81C7[94AC0100]      <2> 		add edi, commandbuf
  2524 00002112 4F                  <2> 		dec edi
  2525 00002113 C3                  <2> 		ret
  2526                              <2> 	getcurrentcommandstr:
  2527 00002114 8A25[11220000]      <2> 		mov ah, [commandedit]
  2528 0000211A FE05[11220000]      <2> 		inc byte [commandedit]
  2529                              <2> 	getccmdlp:
  2530 00002120 4F                  <2> 		dec edi
  2531 00002121 8A07                <2> 		mov al, [edi]
  2532 00002123 81FF[94AC0100]      <2> 		cmp edi, commandbuf
  2533 00002129 7231                <2> 		jb getcmdresetcommandbuf
  2534 0000212B 81EF[94AC0100]      <2> 		sub edi, commandbuf
  2535 00002131 3B3D[88AC0100]      <2> 		cmp edi, [commandbufpos]
  2536 00002137 0F843DFDFFFF        <2> 		je near rdprintb
  2537 0000213D 81C7[94AC0100]      <2> 		add edi, commandbuf
  2538 00002143 3C00                <2> 		cmp al, 0
  2539 00002145 75D9                <2> 		jne getccmdlp
  2540 00002147 FECC                <2> 		dec ah
  2541 00002149 80FC00              <2> 		cmp ah, 0
  2542 0000214C 77D2                <2> 		ja getccmdlp
  2543 0000214E 47                  <2> 		inc edi
  2544 0000214F 81FF[94BC0100]      <2> 		cmp edi, commandbufend
  2545 00002155 770D                <2> 		ja fixcmdbufb4morerdpr
  2546 00002157 E915000000          <2> 		jmp morerdprup
  2547                              <2> 	getcmdresetcommandbuf:
  2548 0000215C BF[94BC0100]        <2> 		mov edi, commandbufend
  2549 00002161 47                  <2> 		inc edi
  2550 00002162 EBBC                <2> 		jmp getccmdlp
  2551                              <2> 	fixcmdbufb4morerdpr:
  2552 00002164 4F                  <2> 		dec edi
  2553 00002165 81EF[94BC0100]      <2> 		sub edi, commandbufend
  2554 0000216B 81C7[94AC0100]      <2> 		add edi, commandbuf
  2555                              <2> 	morerdprup:
  2556 00002171 8A07                <2> 		mov al, [edi]
  2557 00002173 47                  <2> 		inc edi
  2558 00002174 81EF[94AC0100]      <2> 		sub edi, commandbuf
  2559 0000217A 3C00                <2> 		cmp al, 0
  2560 0000217C 0F8419FEFFFF        <2> 		je near rdprintb2
  2561 00002182 3B3D[88AC0100]      <2> 		cmp edi, [commandbufpos]
  2562 00002188 0F830DFEFFFF        <2> 		jae near rdprintb2
  2563 0000218E 81C7[94AC0100]      <2> 		add edi, commandbuf
  2564 00002194 8806                <2> 		mov [esi], al
  2565 00002196 46                  <2> 		inc esi
  2566 00002197 57                  <2> 		push edi
  2567 00002198 8A1D[0C220000]      <2> 		mov bl, [modkeyrdpr]
  2568 0000219E E8FB000000          <2> 		call prcharq
  2569 000021A3 5F                  <2> 		pop edi
  2570 000021A4 81FF[94BC0100]      <2> 		cmp edi, commandbufend
  2571 000021AA 76C5                <2> 		jbe morerdprup
  2572 000021AC BF[94AC0100]        <2> 		mov edi, commandbuf
  2573 000021B1 EBBE                <2> 		jmp morerdprup
  2574                              <2> 		
  2575                              <2> 	rdprdel:
  2576 000021B3 BF[26CC0000]        <2> 		mov edi, buftxt2
  2577 000021B8 8A07                <2> 		mov al, [edi]
  2578 000021BA 3C00                <2> 		cmp al, 0
  2579 000021BC 0F84B8FCFFFF        <2> 		je near rdprintb
  2580 000021C2 8806                <2> 		mov [esi], al
  2581 000021C4 E85AFEFFFF          <2> 		call shiftbuftxt2lft
  2582 000021C9 E8D0000000          <2> 		call prcharq
  2583                              <2> 		
  2584                              <2> 	rdprbscheck:
  2585 000021CE 3B35[0D220000]      <2> 		cmp esi, [firstesirdpr]
  2586 000021D4 7705                <2> 		ja goodbscheck
  2587 000021D6 E99FFCFFFF          <2> 		jmp rdprintb
  2588                              <2> 	goodbscheck:
  2589 000021DB 4E                  <2> 		dec esi
  2590 000021DC C60600              <2> 		mov byte [esi], 0
  2591 000021DF 8A1D[0C220000]      <2> 		mov bl, [modkeyrdpr]
  2592 000021E5 B008                <2> 		mov al, 8
  2593 000021E7 E9F3FCFFFF          <2> 		jmp bscheckequal
  2594                              <2> 		
  2595                              <2> 	shiftbuftxt2:
  2596 000021EC 3C00                <2> 		cmp al, 0
  2597 000021EE 7409                <2> 		je noshiftbuftxt2
  2598 000021F0 47                  <2> 		inc edi
  2599 000021F1 8A27                <2> 		mov ah, [edi]
  2600 000021F3 8807                <2> 		mov [edi], al
  2601 000021F5 88E0                <2> 		mov al, ah
  2602 000021F7 EBF3                <2> 		jmp shiftbuftxt2
  2603                              <2> 	noshiftbuftxt2:
  2604 000021F9 BF[26CC0000]        <2> 		mov edi, buftxt2
  2605 000021FE 4E                  <2> 		dec esi
  2606 000021FF 8A06                <2> 		mov al, [esi]
  2607 00002201 8807                <2> 		mov [edi], al
  2608 00002203 C60600              <2> 		mov byte [esi], 0
  2609 00002206 B008                <2> 		mov al, 8
  2610 00002208 C3                  <2> 		ret
  2611                              <2> 		
  2612 00002209 0000                <2> axcache dw 0
  2613 0000220B 00                  <2> endkeyrdpr db 0
  2614 0000220C 00                  <2> modkeyrdpr db 0
  2615 0000220D 00000000            <2> firstesirdpr dd 0
  2616 00002211 00                  <2> commandedit db 0
  2617 00002212 00                  <2> txtmask db 0
  2618 00002213 00000000            <2> buftxtloc dd 0
  2619 00002217 00000000            <2> endbufferrdpr dd 0
  2620 0000221B 082000              <2> backcursor db 8," ",0
  2621                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2622                              <2> readchar:
  2623 0000221E E807000000          <2> 	call rdcharint
  2624 00002223 E97DE0FFFF          <2> 	jmp timerinterrupt
  2625                              <2> getchar:
  2626 00002228 30C0                <2> 	xor al, al
  2627                              <2> 	rdcharint:		;;get char, if al is 0, wait for key
  2628 0000222A C605[78220000]01    <2> 		mov byte [trans], 1
  2629 00002231 3C00                <2> 		cmp al, 0
  2630 00002233 7507                <2> 		jne transcheck
  2631 00002235 C605[78220000]00    <2> 		mov byte [trans], 0
  2632                              <2> 	transcheck:
  2633                              <2> 	%ifdef io.serial
  2634                              <2> 		call serial.receive
  2635                              <2> 		cmp al, 13
  2636                              <2> 		je rdenter
  2637                              <2> 	%else
  2638 0000223C E8E93B0000          <2> 		call getkey
  2639 00002241 66A1[76220000]      <2> 		mov ax, [lastkey]
  2640 00002247 80FC1C              <2> 		cmp ah, 0x1C
  2641 0000224A 741F                <2> 		je rdenter
  2642                              <2> 	%endif
  2643 0000224C 8A3D[78220000]      <2> 		mov bh, [trans]
  2644 00002252 803D[0A5E0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2645 00002259 7504                <2> 		jne nospecialtrans
  2646 0000225B 88C3                <2> 		mov bl, al
  2647 0000225D 30C0                <2> 		xor al, al
  2648                              <2> 	nospecialtrans:
  2649 0000225F 08C7                <2> 		or bh, al
  2650 00002261 80FF00              <2> 		cmp bh, 0
  2651 00002264 74D6                <2> 		je transcheck
  2652 00002266 E90A000000          <2> 		jmp rdend
  2653                              <2> 	rdenter:
  2654 0000226B B41C                <2> 		mov ah, 0x1C
  2655 0000226D B00A                <2> 		mov al, 10
  2656 0000226F 66A3[76220000]      <2> 		mov [lastkey], ax
  2657                              <2> 	rdend:
  2658 00002275 C3                  <2> 		ret
  2659                              <2> 		
  2660 00002276 0000                <2> lastkey db 0,0
  2661 00002278 00                  <2> trans db 0
  2662                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2663                              <2> prntchar:
  2664                              <2> %ifdef io.serial
  2665                              <2> 	cmp bl, bh
  2666                              <2> 	call prcharint
  2667                              <2> 	jmp timerinterrupt
  2668                              <2> prcharint:	
  2669                              <2> prcharq:
  2670                              <2> 	call serial.send
  2671                              <2> 	ret
  2672                              <2> %else
  2673 00002279 38FB                <2> cmp bl, bh
  2674 0000227B 740A                <2> je prchar.notimer
  2675 0000227D E80B000000          <2> call prcharint
  2676 00002282 E91EE0FFFF          <2> jmp timerinterrupt
  2677                              <2> prchar.notimer:
  2678 00002287 E812000000          <2> 	call prcharq
  2679 0000228C CF                  <2> 	iret
  2680                              <2> 	
  2681                              <2> prcharint:	;;print char, char in al, modifier in bl, if bh = bl then termcopy will not happen, will run termcopy if called as is
  2682 0000228D 38FB                <2> 	cmp bl, bh
  2683 0000228F 740D                <2> 	je prcharq
  2684 00002291 E808000000          <2> 	call prcharq
  2685 00002296 E8B4040000          <2> 	call termcopy
  2686 0000229B C3                  <2> 	ret
  2687 0000229C 00                  <2> termguion db 0
  2688 0000229D 00                  <2> termcopyon db 0
  2689                              <2> prcharq:
  2690 0000229E 88DC                <2> 	mov ah, bl
  2691 000022A0 66A3[78240000]      <2> 	mov [charbuf], ax
  2692 000022A6 8B1D[70240000]      <2> 	mov ebx, [videobufpos]
  2693 000022AC BF[3CD70000]        <2> 	mov edi, videobuf
  2694 000022B1 01DF                <2> 	add edi, ebx
  2695 000022B3 66A1[5A270000]      <2> 	mov ax, [removedvideo]
  2696 000022B9 668907              <2> 	mov [edi], ax
  2697 000022BC 66A1[78240000]      <2> 	mov ax, [charbuf]
  2698 000022C2 31D2                <2> 	xor edx, edx
  2699 000022C4 668B15[74240000]    <2> 	mov dx, [charpos]
  2700 000022CB 31C9                <2> 	xor ecx, ecx
  2701 000022CD 668B0D[76240000]    <2> 	mov cx, [charxy]
  2702 000022D4 3C09                <2> 	cmp al, 9
  2703 000022D6 0F8462000000        <2> 	je near prtab
  2704 000022DC 3C0D                <2> 	cmp al, 13		;I am phasing this out-it is used by windows but not unix based systems
  2705 000022DE 0F8487000000        <2> 	je near prcr
  2706 000022E4 3C0A                <2> 	cmp al, 10
  2707 000022E6 0F84D1000000        <2> 	je near prnlcr
  2708 000022EC 3C08                <2> 	cmp al, 8
  2709 000022EE 0F8488000000        <2> 	je near prbs
  2710 000022F4 3CFF                <2> 	cmp al, 255		;;null character
  2711 000022F6 0F841B000000        <2> 	je near donescr
  2712 000022FC 668907              <2> 	mov [edi], ax
  2713 000022FF 81C702000000        <2> 	add edi, 2
  2714 00002305 FEC2                <2> 	inc dl
  2715                              <2> donecrnl:
  2716 00002307 38CA                <2> 	cmp dl, cl
  2717 00002309 0F83D1000000        <2> 	jae near preol
  2718                              <2> doneeol:
  2719 0000230F 38EE                <2> 	cmp dh, ch
  2720 00002311 0F83E5000000        <2> 	jae near prscr	
  2721                              <2> donescr:
  2722 00002317 89FB                <2> 	mov ebx, edi
  2723 00002319 668B07              <2> 	mov ax, [edi]
  2724 0000231C 66A3[5A270000]      <2> 	mov [removedvideo], ax
  2725 00002322 81EB[3CD70000]      <2> 	sub ebx, videobuf
  2726 00002328 891D[70240000]      <2> 	mov [videobufpos], ebx
  2727 0000232E 668915[74240000]    <2> 	mov [charpos], dx
  2728 00002335 66A1[78240000]      <2> 	mov ax, [charbuf]
  2729 0000233B 88E3                <2> 	mov bl, ah
  2730 0000233D C3                  <2> 	ret
  2731                              <2> 	
  2732                              <2> 	prtab:
  2733 0000233E 8B1D[6C240000]      <2> 		mov ebx, [linebeginpos]
  2734 00002344 81EF[3CD70000]      <2> 		sub edi, videobuf
  2735 0000234A 29DF                <2> 		sub edi, ebx
  2736 0000234C C1EF04              <2> 		shr edi, 4
  2737 0000234F C1E704              <2> 		shl edi, 4
  2738 00002352 81C710000000        <2> 		add edi, 16
  2739 00002358 C0EA03              <2> 		shr dl, 3
  2740 0000235B C0E203              <2> 		shl dl, 3
  2741 0000235E 80C208              <2> 		add dl, 8
  2742 00002361 81C7[3CD70000]      <2> 		add edi, videobuf
  2743 00002367 01DF                <2> 		add edi, ebx
  2744 00002369 EB9C                <2> 		jmp donecrnl
  2745                              <2> 	
  2746                              <2> 	prcr:
  2747 0000236B 30D2                <2> 		xor dl, dl
  2748 0000236D BF[3CD70000]        <2> 		mov edi, videobuf
  2749 00002372 8B1D[6C240000]      <2> 		mov ebx, [linebeginpos]
  2750 00002378 01DF                <2> 		add edi, ebx
  2751 0000237A EB8B                <2> 		jmp donecrnl
  2752                              <2> 			
  2753                              <2> 	prbs:
  2754 0000237C 8B1D[6C240000]      <2> 		mov ebx, [linebeginpos]
  2755 00002382 80FA00              <2> 		cmp dl, 0
  2756 00002385 7416                <2> 		je prbackline
  2757                              <2> 	prnobmr:
  2758 00002387 891D[6C240000]      <2> 		mov [linebeginpos], ebx
  2759 0000238D FECA                <2> 		dec dl
  2760 0000238F 6631C0              <2> 		xor ax, ax
  2761 00002392 81EF02000000        <2> 		sub edi, 2
  2762 00002398 E96AFFFFFF          <2> 		jmp donecrnl
  2763                              <2> 	prbackline:
  2764 0000239D 6631DB              <2> 		xor bx, bx
  2765 000023A0 88CA                <2> 		mov dl, cl
  2766 000023A2 80FE00              <2> 		cmp dh, 0
  2767 000023A5 74E0                <2> 		je prnobmr
  2768 000023A7 8B1D[6C240000]      <2> 		mov ebx, [linebeginpos]
  2769 000023AD 6651                <2> 		push cx
  2770 000023AF 30ED                <2> 		xor ch, ch
  2771 000023B1 6629CB              <2> 		sub bx, cx
  2772 000023B4 6629CB              <2> 		sub bx, cx
  2773 000023B7 6659                <2> 		pop cx
  2774 000023B9 FECE                <2> 		dec dh
  2775 000023BB EBCA                <2> 		jmp prnobmr
  2776                              <2> 		
  2777                              <2> 	prnlcr:
  2778 000023BD FEC6                <2> 		inc dh
  2779 000023BF 31DB                <2> 		xor ebx, ebx
  2780 000023C1 30D2                <2> 		xor dl, dl
  2781 000023C3 88CB                <2> 		mov bl, cl
  2782 000023C5 66D1E3              <2> 		shl bx, 1
  2783 000023C8 BF[3CD70000]        <2> 		mov edi, videobuf
  2784 000023CD 031D[6C240000]      <2> 		add ebx, [linebeginpos]
  2785 000023D3 891D[6C240000]      <2> 		mov [linebeginpos], ebx
  2786 000023D9 01DF                <2> 		add edi, ebx
  2787 000023DB E927FFFFFF          <2> 		jmp donecrnl
  2788                              <2> 		
  2789                              <2> 	preol:
  2790 000023E0 30D2                <2> 		xor dl, dl
  2791 000023E2 FEC6                <2> 		inc dh
  2792 000023E4 31DB                <2> 		xor ebx, ebx
  2793 000023E6 88CB                <2> 		mov bl, cl
  2794 000023E8 66D1E3              <2> 		shl bx, 1
  2795 000023EB 031D[6C240000]      <2> 		add ebx, [linebeginpos]
  2796 000023F1 891D[6C240000]      <2> 		mov [linebeginpos], ebx
  2797 000023F7 E913FFFFFF          <2> 		jmp doneeol
  2798                              <2> 	prscr:
  2799 000023FC FECE                <2> 		dec dh
  2800 000023FE BF[3CD70000]        <2> 		mov edi, videobuf
  2801 00002403 31DB                <2> 		xor ebx, ebx
  2802 00002405 88CB                <2> 		mov bl, cl
  2803 00002407 66D1E3              <2> 		shl bx, 1
  2804 0000240A 01FB                <2> 		add ebx, edi
  2805                              <2> 	intscrollloop:
  2806 0000240C 668B03              <2> 		mov ax, [ebx]
  2807 0000240F 668907              <2> 		mov [edi], ax
  2808 00002412 81C702000000        <2> 		add edi, 2
  2809 00002418 81C302000000        <2> 		add ebx, 2
  2810 0000241E FEC9                <2> 		dec cl
  2811 00002420 80F900              <2> 		cmp cl, 0
  2812 00002423 75E7                <2> 		jne intscrollloop
  2813 00002425 8A0D[76240000]      <2> 		mov cl, [charxy]
  2814 0000242B FECD                <2> 		dec ch
  2815 0000242D 80FD01              <2> 		cmp ch, 1
  2816 00002430 77DA                <2> 		ja intscrollloop
  2817 00002432 6631C0              <2> 		xor ax, ax
  2818 00002435 81EF[3CD70000]      <2> 		sub edi, videobuf
  2819 0000243B 893D[6C240000]      <2> 		mov [linebeginpos], edi
  2820 00002441 81C7[3CD70000]      <2> 		add edi, videobuf
  2821 00002447 89FB                <2> 		mov ebx, edi
  2822                              <2> 	intloopclear:
  2823 00002449 668903              <2> 		mov [ebx], ax
  2824 0000244C 81C302000000        <2> 		add ebx, 2
  2825 00002452 FEC9                <2> 		dec cl
  2826 00002454 80F900              <2> 		cmp cl, 0
  2827 00002457 75F0                <2> 		jne intloopclear
  2828 00002459 FECD                <2> 		dec ch
  2829 0000245B 80FD00              <2> 		cmp ch, 0
  2830 0000245E 75E9                <2> 		jne intloopclear
  2831 00002460 668B0D[76240000]    <2> 		mov cx, [charxy]
  2832 00002467 E9ABFEFFFF          <2> 		jmp donescr
  2833                              <2> 		
  2834 0000246C 00000000            <2> linebeginpos dd 0
  2835 00002470 00000000            <2> videobufpos: dd 0
  2836 00002474 0000                <2> charpos db 0,0
  2837 00002476 501E                <2> charxy db 80,30
  2838 00002478 0000                <2> charbuf dw 0
  2839                              <2> %endif
  2840                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2841                              <2> openfile:
  2842 0000247A E8F5400000          <2> 	call loadfile
  2843 0000247F E921DEFFFF          <2> 	jmp timerinterrupt
  2844                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2845                              <2> num2str:
  2846 00002484 3C00                <2> 	cmp al, 0
  2847 00002486 750A                <2> 	jne num2strb
  2848 00002488 E8810C0000          <2> 	call showdec
  2849 0000248D E913DEFFFF          <2> 	jmp timerinterrupt
  2850                              <2> num2strb:
  2851 00002492 E8AD0B0000          <2> 	call showhex
  2852 00002497 E909DEFFFF          <2> 	jmp timerinterrupt
  2853                              <1> 	%include 'source/interrupts/10_str2num.asm'
  2854                              <2> str2num:
  2855 0000249C 89F7                <2> 	mov edi, esi
  2856 0000249E E84D0D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2857 000024A3 E9FDDDFFFF          <2> 	jmp timerinterrupt
  2858                              <2> 	
  2859                              <1> %ifdef threads.included
  2860                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  2861                              <2> forkthread:
  2862                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  2863                              <2> 			;returns the PID of the new fork in ebx
  2864                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  2865 000024A8 FA                  <2> 	cli
  2866 000024A9 60                  <2> 	pushad
  2867 000024AA 8925[77250000]      <2> 	mov [.espold], esp
  2868 000024B0 C605[13670000]01    <2> 	mov byte [threadson], 1
  2869 000024B7 8B1D[14670000]      <2> 	mov ebx, [currentthread]
  2870 000024BD C1E302              <2> 	shl ebx, 2
  2871 000024C0 89A3[A8DC0100]      <2> 	mov [threadlist + ebx], esp
  2872 000024C6 C1EB02              <2> 	shr ebx, 2
  2873 000024C9 81FB00000000        <2> 	cmp ebx, 0
  2874 000024CF 750C                <2> 	jne .simplestack
  2875 000024D1 BB[42B50000]        <2> 	mov ebx, stackend
  2876 000024D6 29E3                <2> 	sub ebx, esp
  2877 000024D8 E90B000000          <2> 	jmp .stackcalcdone
  2878                              <2> .simplestack:
  2879 000024DD C1E30A              <2> 	shl ebx, 10
  2880 000024E0 81C3[A8F00100]      <2> 	add ebx, stack1
  2881 000024E6 29E3                <2> 	sub ebx, esp
  2882                              <2> .stackcalcdone:
  2883 000024E8 29DC                <2> 	sub esp, ebx
  2884 000024EA 81C4[A8F00100]      <2> 	add esp, stack1
  2885 000024F0 8B1D[0F670000]      <2> 	mov ebx, [lastthread]
  2886 000024F6 C1E308              <2> 	shl ebx, 8
  2887 000024F9 01DC                <2> 	add esp, ebx
  2888 000024FB 891D[7B250000]      <2> 	mov [.stackend], ebx
  2889                              <2> 
  2890 00002501 89E5                <2> 	mov ebp, esp
  2891 00002503 8B25[77250000]      <2> 	mov esp, [.espold]
  2892                              <2> 
  2893 00002509 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  2894 0000250C 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  2895                              <2> 
  2896 00002510 31DB                <2> 	xor ebx, ebx
  2897                              <2> .stackcopy:
  2898 00002512 668B041C            <2> 	mov ax, [esp + ebx]
  2899 00002516 6689441D00          <2> 	mov [ebp + ebx], ax
  2900 0000251B 81C302000000        <2> 	add ebx, 2
  2901 00002521 3B1D[7B250000]      <2> 	cmp ebx, [.stackend]
  2902 00002527 72E9                <2> 	jb .stackcopy
  2903                              <2> 
  2904 00002529 31C0                <2> 	xor eax, eax
  2905 0000252B 668CC8              <2> 	mov ax, cs
  2906 0000252E 89C2                <2> 	mov edx, eax
  2907 00002530 8B4C2428            <2> 	mov ecx, [esp + 40]
  2908 00002534 81C900020000        <2> 	or ecx, 0x200
  2909                              <2> 	
  2910 0000253A 81FE00000000        <2> 	cmp esi, 0
  2911 00002540 7504                <2> 	jne .nochangestack
  2912 00002542 8B742420            <2> 	mov esi, [esp + 32]
  2913                              <2> .nochangestack:
  2914 00002546 89F0                <2> 	mov eax, esi
  2915 00002548 89EC                <2> 	mov esp, ebp
  2916                              <2> 
  2917 0000254A 89442420            <2> 	mov [esp + 32], eax
  2918 0000254E 89542424            <2> 	mov [esp + 36], edx
  2919 00002552 894C2428            <2> 	mov [esp + 40], ecx
  2920                              <2> 
  2921 00002556 8B1D[0F670000]      <2> 	mov ebx, [lastthread]
  2922 0000255C 89A3[A8DC0100]      <2> 	mov [threadlist + ebx], esp
  2923 00002562 81C304000000        <2> 	add ebx, 4
  2924 00002568 891D[0F670000]      <2> 	mov [lastthread], ebx
  2925 0000256E 8B25[77250000]      <2> 	mov esp, [.espold]
  2926 00002574 61                  <2> 	popad
  2927 00002575 FB                  <2> 	sti
  2928 00002576 CF                  <2> 	iret
  2929                              <2> 
  2930 00002577 00000000            <2> .espold dd 0
  2931 0000257B 00000000            <2> .stackend dd 0
  2932                              <1> %endif
  2933                              <1> 	%include 'source/interrupts/12_gettime.asm'
  2934                              <2> gettime:
  2935 0000257F A1[5D020000]        <2> 	mov eax, [timeseconds]
  2936 00002584 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  2937 0000258A 89D9                <2> 	mov ecx, ebx
  2938 0000258C C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2939 0000258F E911DDFFFF          <2> 	jmp timerinterrupt
  2940                              <1> 	%include 'source/interrupts/13_settime.asm'
  2941                              <2> settime:
  2942 00002594 A3[5D020000]        <2> 	mov [timeseconds], eax
  2943 00002599 891D[61020000]      <2> 	mov [timenanoseconds], ebx
  2944 0000259F E901DDFFFF          <2> 	jmp timerinterrupt
  2945                              <2> 	
  2946                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  2947                              <2> runcmd:
  2948 000025A4 BF[26D00000]        <2> 	mov edi, buftxt
  2949                              <2> cpcmd:
  2950 000025A9 8A06                <2> 	mov al, [esi]
  2951 000025AB 8807                <2> 	mov [edi], al
  2952 000025AD 46                  <2> 	inc esi
  2953 000025AE 47                  <2> 	inc edi
  2954 000025AF 3C00                <2> 	cmp al, 0
  2955 000025B1 75F6                <2> 	jne cpcmd
  2956 000025B3 E88F070000          <2> 	call run
  2957 000025B8 CF                  <2> 	iret
  2958                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  2959                              <2> proginfo:
  2960                              <2> 	;mov ebx, variables
  2961 000025B9 8B35[1D2E0000]      <2> 	mov esi, [currentcommandloc]
  2962 000025BF 89F7                <2> 	mov edi, esi
  2963 000025C1 31C9                <2> 	xor ecx, ecx
  2964                              <2> getcommandzeroes:
  2965 000025C3 8A07                <2> 	mov al, [edi]
  2966 000025C5 47                  <2> 	inc edi
  2967 000025C6 3C3B                <2> 	cmp al, ';'
  2968 000025C8 740B                <2> 	je nomorezeroes
  2969 000025CA 3C00                <2> 	cmp al, 0
  2970 000025CC 7407                <2> 	je nomorezeroes
  2971 000025CE 3C20                <2> 	cmp al, ' '
  2972 000025D0 75F1                <2> 	jne getcommandzeroes
  2973 000025D2 41                  <2> 	inc ecx
  2974 000025D3 EBEE                <2> 	jmp getcommandzeroes
  2975                              <2> nomorezeroes:
  2976 000025D5 41                  <2> 	inc ecx
  2977 000025D6 4F                  <2> 	dec edi
  2978 000025D7 8B1D[B2BB0000]      <2> 	mov ebx, [uid]
  2979 000025DD 8B15[14670000]      <2> 	mov edx, [currentthread]
  2980 000025E3 CF                  <2> 	iret
  2981                              <2> 	
  2982                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  2983                              <2> hooksig: ;hook code in ESI to signal in AL
  2984 000025E4 3C00                <2> 	cmp al, 0
  2985 000025E6 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  2986                              <2> ;	xor ebx, ebx
  2987                              <2> ;	mov bl, al
  2988                              <2> ;	shl bl, 2
  2989 000025E8 BF[A2B50000]        <2> 	mov edi, sigtable
  2990 000025ED 8937                <2> 	mov [edi], esi
  2991                              <2> .quit:
  2992 000025EF E9B1DCFFFF          <2> 	jmp timerinterrupt
  2993                              <1> %ifdef gui.included
  2994                              <1> 	%include 'source/interrupts/17_guiint.asm'
  2995                              <2> guiint:
  2996 000025F4 3CFD                <2> 	cmp al, 253
  2997 000025F6 0F8473000000        <2> 	je near .getinfo
  2998 000025FC 803D[5CA30000]01    <2> 	cmp byte [guion], 1
  2999 00002603 0F8550000000        <2> 	jne near .nogui
  3000 00002609 3C00                <2> 	cmp al, 0
  3001 0000260B 0F844D000000        <2> 	je near .clear
  3002 00002611 3C01                <2> 	cmp al, 1
  3003 00002613 0F84AB000000        <2> 	je near .putpixel
  3004 00002619 3C02                <2> 	cmp al, 2
  3005 0000261B 0F84B0000000        <2> 	je near .drawtext
  3006 00002621 3C03                <2> 	cmp al, 3
  3007 00002623 0F84C3000000        <2> 	je near .drawline
  3008 00002629 3C04                <2> 	cmp al, 4
  3009 0000262B 0F84CE000000        <2> 	je near .drawcircle
  3010 00002631 3C05                <2> 	cmp al, 5
  3011 00002633 0F84D6000000        <2> 	je near .fillcircle
  3012 00002639 3C06                <2> 	cmp al, 6
  3013 0000263B 0F84DE000000        <2> 	je near .drawsquare
  3014 00002641 3C07                <2> 	cmp al, 7
  3015 00002643 0F84E9000000        <2> 	je near .fillsquare
  3016 00002649 3CFE                <2> 	cmp al, 254
  3017 0000264B 0F8449000000        <2> 	je near .setinfo
  3018 00002651 3CFF                <2> 	cmp al, 255
  3019 00002653 0F8446000000        <2> 	je near .reset
  3020                              <2> .nogui:
  3021 00002659 E947DCFFFF          <2> 	jmp timerinterrupt
  3022                              <2> 
  3023                              <2> .clear:		;color in bx
  3024 0000265E 66891D[F96D0000]    <2> 	mov [background], bx
  3025                              <2> %ifdef gui.background
  3026                              <2> 	mov ebx, [backgroundimage]
  3027                              <2> 	cmp ebx, 0
  3028                              <2> 	je .clearit
  3029                              <2> 	mov dword [backgroundimage], 0
  3030                              <2> 	mov [.bgi], ebx
  3031                              <2> .clearit:
  3032                              <2> %endif
  3033 00002665 E843470000          <2> 	call guiclear
  3034 0000266A E936DCFFFF          <2> 	jmp timerinterrupt
  3035                              <2> 	
  3036                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3037 0000266F 6631DB              <2> 	xor bx, bx
  3038 00002672 6631C9              <2> 	xor cx, cx
  3039 00002675 6631D2              <2> 	xor dx, dx
  3040 00002678 381D[5CA30000]      <2> 	cmp [guion], bl
  3041 0000267E 74D9                <2> 	je .nogui
  3042 00002680 668B1D[F96D0000]    <2> 	mov bx, [background]
  3043 00002687 668B15[29570000]    <2> 	mov dx, [resolutionx]
  3044 0000268E 668B0D[2B570000]    <2> 	mov cx, [resolutiony]
  3045 00002695 E90BDCFFFF          <2> 	jmp timerinterrupt
  3046                              <2> 	
  3047                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3048 0000269A E906DCFFFF          <2> 	jmp timerinterrupt
  3049                              <2> .reset:		;resets the screen to the original settings
  3050 0000269F 66BBCF7B            <2> 	mov bx, background.original
  3051 000026A3 66891D[F96D0000]    <2> 	mov [background], bx
  3052 000026AA 66BBFFFF            <2> 	mov bx, 0xFFFF
  3053 000026AE 66891D[7C740000]    <2> 	mov [colorfont2], bx
  3054                              <2> %ifdef gui.background
  3055                              <2> 	mov ebx, [backgroundimage]
  3056                              <2> 	cmp ebx, 0
  3057                              <2> 	jne .resetit
  3058                              <2> 	mov ebx, [.bgi]
  3059                              <2> 	mov [backgroundimage], ebx
  3060                              <2> .resetit:
  3061                              <2> %endif
  3062 000026B5 E8F3460000          <2> 	call guiclear
  3063 000026BA E83E470000          <2> 	call reloadallgraphics
  3064 000026BF E9E1DBFFFF          <2> 	jmp timerinterrupt
  3065                              <2> 
  3066                              <2> %ifdef gui.background
  3067                              <2> 	.bgi dd 0
  3068                              <2> %endif
  3069                              <2> 	
  3070                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3071 000026C4 6689DE              <2> 	mov si, bx
  3072 000026C7 E8165D0000          <2> 	call putpixel
  3073 000026CC E9D4DBFFFF          <2> 	jmp timerinterrupt
  3074                              <2> 
  3075                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3076 000026D1 66D1E2              <2> 	shl dx, 1
  3077 000026D4 66891D[7C740000]    <2> 	mov [colorfont2], bx
  3078 000026DB 66893D[F96D0000]    <2> 	mov [background], di
  3079 000026E2 E8674D0000          <2> 	call showstring2
  3080 000026E7 E9B9DBFFFF          <2> 	jmp timerinterrupt
  3081                              <2> 
  3082                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3083 000026EC 6689F0              <2> 	mov ax, si
  3084 000026EF 6689DE              <2> 	mov si, bx
  3085 000026F2 6689FB              <2> 	mov bx, di
  3086 000026F5 E887450000          <2> 	call drawline
  3087 000026FA E9A6DBFFFF          <2> 	jmp timerinterrupt
  3088                              <2> 
  3089                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3090 000026FF 6689F0              <2> 	mov ax, si
  3091 00002702 6689DE              <2> 	mov si, bx
  3092 00002705 E800410000          <2> 	call drawcircle
  3093 0000270A E996DBFFFF          <2> 	jmp timerinterrupt
  3094                              <2> 
  3095                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3096 0000270F 6689F0              <2> 	mov ax, si
  3097 00002712 6689DE              <2> 	mov si, bx
  3098 00002715 E802420000          <2> 	call fillcircle
  3099 0000271A E986DBFFFF          <2> 	jmp timerinterrupt
  3100                              <2> 	
  3101                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3102 0000271F 6689F0              <2> 	mov ax, si
  3103 00002722 6689DE              <2> 	mov si, bx
  3104 00002725 6689FB              <2> 	mov bx, di
  3105 00002728 E8A0470000          <2> 	call drawsquare
  3106 0000272D E973DBFFFF          <2> 	jmp timerinterrupt
  3107                              <2> 
  3108                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3109 00002732 6689F0              <2> 	mov ax, si
  3110 00002735 6689DE              <2> 	mov si, bx
  3111 00002738 6689FB              <2> 	mov bx, di
  3112 0000273B E802480000          <2> 	call fillsquare
  3113 00002740 E960DBFFFF          <2> 	jmp timerinterrupt
  3114                              <1> %endif
  3115                              <1> %ifdef gui.included
  3116                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3117                              <2> soundint:
  3118 00002745 E95BDBFFFF          <2> 	jmp timerinterrupt
  3119                              <1> %endif
  3120                              <1> %ifdef network.included
  3121                              <1> 	%include 'source/interrupts/19_netint.asm'
  3122                              <2> netint:
  3123 0000274A E956DBFFFF          <2> 	jmp timerinterrupt
  3124                              <1> %endif
  3125                              <1> 
  3126                              <1> termcopy:
  3127                              <1> %ifdef io.serial
  3128                              <1> 	ret
  3129                              <1> %else
  3130                              <1> %ifdef terminal.vsync
  3131                              <1> 	mov byte [termcopyneeded], 1
  3132                              <1> 	ret
  3133                              <1> %else
  3134 0000274F E808000000          <1> 	call newtermcopy
  3135 00002754 C3                  <1> 	ret
  3136                              <1> %endif
  3137 00002755 00                  <1> 	termcopyneeded db 0
  3138 00002756 00000000            <1> 	termcursorpos dd 0
  3139 0000275A 0000                <1> 	removedvideo dw 0
  3140                              <1> newtermcopy:
  3141 0000275C 60                  <1> 	pusha
  3142 0000275D BF[3CD70000]        <1> 	mov edi, videobuf
  3143 00002762 31DB                <1> 	xor ebx, ebx
  3144 00002764 881D[55270000]      <1> 	mov [termcopyneeded], bl
  3145 0000276A 8B1D[70240000]      <1> 	mov ebx, [videobufpos]
  3146 00002770 01DF                <1> 	add edi, ebx
  3147 00002772 893D[56270000]      <1> 	mov [termcursorpos], edi
  3148 00002778 E8CB000000          <1> 	call switchtermcursor
  3149 0000277D 803D[5CA30000]00    <1> 	cmp byte [guion], 0
  3150 00002784 0F8420000000        <1> 	je near nowincopy
  3151                              <1> %ifdef gui.included
  3152 0000278A C605[F37B0000]00    <1> 	mov byte [mouseselecton], 0
  3153 00002791 C605[9D220000]01    <1> 	mov byte [termcopyon], 1
  3154 00002798 803D[9C220000]01    <1> 	cmp byte [termguion], 1
  3155 0000279F 0F84DC510000        <1> 	je near windowvideocopy
  3156                              <1> %endif
  3157 000027A5 E997000000          <1> 	jmp nocopytermatall
  3158                              <1> nowincopy:
  3159 000027AA BE00000A00          <1> 	mov esi, 0xA0000
  3160 000027AF A1[3E020000]        <1> 	mov eax, [basecache]
  3161 000027B4 C1E004              <1> 	shl eax, 4
  3162 000027B7 29C6                <1> 	sub esi, eax
  3163 000027B9 BF[3CD70000]        <1> 	mov edi, videobuf
  3164 000027BE 31C9                <1> 	xor ecx, ecx
  3165 000027C0 668B0D[76240000]    <1> 	mov cx, [charxy]
  3166                              <1> nowincopy2:
  3167 000027C7 668B07              <1> 	mov ax, [edi]
  3168 000027CA 81C7A46A0000        <1> 	add edi, (videobuf2 - videobuf)
  3169 000027D0 668B1F              <1> 	mov bx, [edi]
  3170 000027D3 668907              <1> 	mov [edi], ax
  3171 000027D6 81EFA46A0000        <1> 	sub edi, (videobuf2 - videobuf)
  3172 000027DC 47                  <1> 	inc edi
  3173 000027DD 6639D8              <1> 	cmp ax, bx
  3174 000027E0 743E                <1> 	je nopresentwinfont
  3175 000027E2 4F                  <1> 	dec edi
  3176 000027E3 BB[83910000]        <1> 	mov ebx, fonts
  3177 000027E8 31C0                <1> 	xor eax, eax
  3178 000027EA 8A07                <1> 	mov al, [edi]
  3179 000027EC C1E004              <1> 	shl eax, 4
  3180 000027EF 01C3                <1> 	add ebx, eax
  3181 000027F1 47                  <1> 	inc edi
  3182 000027F2 8A27                <1> 	mov ah, [edi]
  3183 000027F4 31D2                <1> 	xor edx, edx
  3184 000027F6 8A15[76240000]      <1> 	mov dl, [charxy]
  3185 000027FC C1C110              <1> 	rol ecx, 16
  3186 000027FF B110                <1> 	mov cl, 16
  3187                              <1> nowinfont:
  3188 00002801 8A03                <1> 	mov al, [ebx]
  3189 00002803 D0C8                <1> 	ror al, 1
  3190 00002805 80FC07              <1> 	cmp ah, 7
  3191 00002808 7602                <1> 	jbe notnotfont
  3192 0000280A F6D0                <1> 	not al
  3193                              <1> notnotfont:
  3194 0000280C 8806                <1> 	mov [esi], al
  3195 0000280E 01D6                <1> 	add esi, edx
  3196 00002810 43                  <1> 	inc ebx
  3197 00002811 FEC9                <1> 	dec cl
  3198 00002813 80F900              <1> 	cmp cl, 0
  3199 00002816 75E9                <1> 	jne nowinfont
  3200 00002818 C1E204              <1> 	shl edx, 4
  3201 0000281B 29D6                <1> 	sub esi, edx
  3202 0000281D C1C110              <1> 	rol ecx, 16
  3203                              <1> nopresentwinfont:
  3204 00002820 47                  <1> 	inc edi
  3205 00002821 46                  <1> 	inc esi
  3206 00002822 FEC9                <1> 	dec cl
  3207 00002824 80F900              <1> 	cmp cl, 0
  3208 00002827 759E                <1> 	jne nowincopy2
  3209 00002829 8A0D[76240000]      <1> 	mov cl, [charxy]
  3210 0000282F 31D2                <1> 	xor edx, edx
  3211 00002831 88CA                <1> 	mov dl, cl
  3212 00002833 29D6                <1> 	sub esi, edx
  3213 00002835 C1E204              <1> 	shl edx, 4
  3214 00002838 01D6                <1> 	add esi, edx
  3215 0000283A FECD                <1> 	dec ch
  3216 0000283C 80FD00              <1> 	cmp ch, 0
  3217 0000283F 7586                <1> 	jne nowincopy2
  3218                              <1> nocopytermatall:
  3219 00002841 E802000000          <1> 	call switchtermcursor
  3220 00002846 61                  <1> 	popa
  3221 00002847 C3                  <1> 	ret
  3222                              <1> 	
  3223                              <1> switchtermcursor:
  3224 00002848 8B3D[56270000]      <1> 	mov edi, [termcursorpos]
  3225 0000284E 8A4701              <1> 	mov al, [edi + 1]
  3226 00002851 8A27                <1> 	mov ah, [edi]
  3227 00002853 3C07                <1> 	cmp al, 7
  3228 00002855 7607                <1> 	jbe movlargecursorterm
  3229 00002857 B007                <1> 	mov al, 7
  3230 00002859 E902000000          <1> 	jmp movedcursorterm
  3231                              <1> movlargecursorterm:
  3232 0000285E B0F0                <1> 	mov al, 0xF0
  3233                              <1> movedcursorterm:
  3234 00002860 884701              <1> 	mov [edi + 1], al
  3235 00002863 80FC00              <1> 	cmp ah, 0
  3236 00002866 7504                <1> 	jne fixednocursorterm
  3237 00002868 B420                <1> 	mov ah, " "
  3238 0000286A 8827                <1> 	mov [edi], ah
  3239                              <1> fixednocursorterm:
  3240 0000286C C3                  <1> 	ret
  3241                              <1> %endif
  3242                                      %include "source/dosints.asm"
  3243                              <1> int20h:
  3244 0000286D 66B8004C            <1> mov ax, 0x4C00
  3245                              <1> int21h:
  3246                              <1> dostosolleros:
  3247 00002871 6650                <1> 	push ax
  3248 00002873 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3249 00002877 8ED8                <1> 	mov ds, ax
  3250 00002879 8EC0                <1> 	mov es, ax
  3251 0000287B 8EE0                <1> 	mov fs, ax
  3252 0000287D 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3253 00002881 8EE8                <1> 	mov gs, ax
  3254 00002883 6658                <1> 	pop ax
  3255 00002885 9C                  <1> 	pushf
  3256 00002886 60                  <1> 	pusha
  3257 00002887 80FC01              <1> 	cmp ah, 1
  3258 0000288A 0F8449000000        <1> 	je near dosgchar
  3259 00002890 80FC02              <1> 	cmp ah, 2
  3260 00002893 0F8447000000        <1> 	je near doswchar
  3261 00002899 80FC09              <1> 	cmp ah, 9
  3262 0000289C 0F8449000000        <1> 	je near dosprintstr
  3263 000028A2 80FC0A              <1> 	cmp ah, 0xA
  3264 000028A5 0F8456000000        <1> 	je near dosgetstr
  3265 000028AB 80FC2B              <1> 	cmp ah, 0x2B
  3266 000028AE 0F8492000000        <1> 	je near dosgetdate
  3267 000028B4 80FC2C              <1> 	cmp ah, 0x2C
  3268 000028B7 0F84AC000000        <1> 	je near dosgettime
  3269 000028BD 80FC4C              <1> 	cmp ah, 0x4C
  3270 000028C0 0F84C1000000        <1> 	je near dosexit
  3271                              <1> backtodos:
  3272 000028C6 61                  <1> 	popa
  3273 000028C7 9D                  <1> 	popf
  3274 000028C8 6650                <1> 	push ax
  3275 000028CA 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3276 000028CE 8ED8                <1> 	mov ds, ax
  3277 000028D0 8EC0                <1> 	mov es, ax
  3278 000028D2 8EE0                <1> 	mov fs, ax
  3279 000028D4 8EE8                <1> 	mov gs, ax
  3280 000028D6 6658                <1> 	pop ax
  3281 000028D8 CF                  <1> 	iret
  3282                              <1> 
  3283                              <1> dosgchar:
  3284 000028D9 E84AF9FFFF          <1> 	call getchar
  3285 000028DE EBE6                <1> 	jmp backtodos
  3286                              <1> 	
  3287                              <1> doswchar:
  3288 000028E0 88D0                <1> 	mov al, dl
  3289 000028E2 B307                <1> 	mov bl, 7
  3290 000028E4 E8A4F9FFFF          <1> 	call prcharint
  3291 000028E9 EBDB                <1> 	jmp backtodos
  3292                              <1> 	
  3293                              <1> dosprintstr:
  3294 000028EB 31F6                <1> 	xor esi, esi
  3295 000028ED 6689D6              <1> 	mov si, dx
  3296 000028F0 81C600004000        <1> 	add esi, dosprogloc
  3297 000028F6 B024                <1> 	mov al, "$"
  3298 000028F8 B307                <1> 	mov bl, 7
  3299 000028FA E862F4FFFF          <1> 	call printint
  3300 000028FF EBC5                <1> 	jmp backtodos
  3301                              <1> 	
  3302                              <1> dosgetstr:
  3303 00002901 31F6                <1> 	xor esi, esi
  3304 00002903 6689D6              <1> 	mov si, dx
  3305 00002906 81C600004000        <1> 	add esi, dosprogloc
  3306 0000290C B900000000          <1> 	mov ecx, 0
  3307 00002911 8A0E                <1> 	mov cl, [esi]
  3308 00002913 81C602000000        <1> 	add esi, 2
  3309 00002919 89F7                <1> 	mov edi, esi
  3310 0000291B 8935[42290000]      <1> 	mov [stringstart], esi
  3311 00002921 01CF                <1> 	add edi, ecx
  3312 00002923 B00A                <1> 	mov al, 10
  3313 00002925 B307                <1> 	mov bl, 7
  3314 00002927 E825F5FFFF          <1> 	call rdprintdos
  3315 0000292C 89F1                <1> 	mov ecx, esi
  3316 0000292E 2B0D[42290000]      <1> 	sub ecx, [stringstart]
  3317 00002934 8B35[42290000]      <1> 	mov esi, [stringstart]
  3318 0000293A 884EFF              <1> 	mov [esi - 1], cl
  3319 0000293D 884EFE              <1> 	mov [esi - 2], cl
  3320 00002940 EB84                <1> 	jmp backtodos
  3321 00002942 00000000            <1> stringstart dd 0
  3322                              <1> 
  3323                              <1> dosgetdate:
  3324 00002946 E8E4260000          <1> 	call time
  3325 0000294B 8A0D[F7510000]      <1> 	mov cl, [RTCtimeYear]
  3326 00002951 B500                <1> 	mov ch, 0
  3327 00002953 6681C1D007          <1> 	add cx, 2000
  3328 00002958 8A35[F6510000]      <1> 	mov dh, [RTCtimeMonth]
  3329 0000295E 8A15[F5510000]      <1> 	mov dl, [RTCtimeDay]
  3330 00002964 E95DFFFFFF          <1> 	jmp backtodos
  3331                              <1> 
  3332                              <1> dosgettime:
  3333 00002969 E8C1260000          <1> 	call time
  3334 0000296E 8A2D[F4510000]      <1> 	mov ch, [RTCtimeHour]
  3335 00002974 8A0D[F3510000]      <1> 	mov cl, [RTCtimeMinute]
  3336 0000297A 8A35[F2510000]      <1> 	mov dh, [RTCtimeSecond]
  3337 00002980 B200                <1> 	mov dl, 0
  3338 00002982 E93FFFFFFF          <1> 	jmp backtodos
  3339                              <1> 	
  3340                              <1> dosexit:
  3341 00002987 BE[5E910000]        <1> 	mov esi, line
  3342 0000298C E8C9F3FFFF          <1> 	call print
  3343 00002991 61                  <1> 	popa
  3344 00002992 9D                  <1> 	popf
  3345 00002993 8B25[A6B90000]      <1> 	mov esp, [previousstack]
  3346 00002999 31DB                <1> 	xor ebx, ebx
  3347 0000299B 88C3                <1> 	mov bl, al
  3348 0000299D 80FB00              <1> 	cmp bl, 0
  3349 000029A0 0F8542F3FFFF        <1> 	jne near exitprog.error
  3350 000029A6 C3                  <1> 	ret
  3351                                      %include "source/solleros.asm"
  3352                              <1> 	;SOLLEROS.ASM
  3353                              <1> os:
  3354                              <1> setdefenv:
  3355 000029A7 B02F                <1> 	mov al, '/'
  3356 000029A9 A2[B2B90000]        <1> 	mov [currentfolder], al
  3357 000029AE B801000000          <1> 	mov eax, 1
  3358 000029B3 A3[AEB90000]        <1> 	mov [currentfolderloc], eax
  3359 000029B8 E803F4FFFF          <1> 	call clear
  3360                              <1> 	
  3361                              <1> bootfilecheck:
  3362 000029BD 803D[B6BB0000]01    <1> 	cmp byte [ranboot], 1
  3363 000029C4 0F8421000000        <1> 	je near nobootfile
  3364                              <1> 	%ifdef hardware.automatic
  3365 000029CA E879370000          <1> 		call initializelater ;Initialize components that have debug messages
  3366                              <1> 	%endif
  3367 000029CF BF[1D910000]        <1> 	mov edi, bootfilename
  3368 000029D4 BE00004000          <1> 	mov esi, 0x400000
  3369 000029D9 E8963B0000          <1> 	call loadfile
  3370 000029DE 81FA00000000        <1> 	cmp edx, 0
  3371 000029E4 7505                <1> 	jne nobootfile
  3372 000029E6 E8B00D0000          <1> 	call progbatchfound
  3373                              <1> nobootfile:	
  3374 000029EB C605[B6BB0000]01    <1> 	mov byte [ranboot], 1
  3375                              <1> 
  3376 000029F2 BE[00000000]        <1> 	mov esi, signature
  3377                              <1> .sigcopyloop:	;this prevents an odd error
  3378 000029F7 658A06              <1> 	mov al, [gs:esi]
  3379 000029FA 8806                <1> 	mov [esi], al
  3380 000029FC 46                  <1> 	inc esi
  3381 000029FD 81FE[1A000000]      <1> 	cmp esi, signatureend
  3382 00002A03 72F2                <1> 	jb .sigcopyloop
  3383                              <1> 	
  3384 00002A05 BE[00000000]        <1> 	mov esi, signature
  3385 00002A0A E84BF3FFFF          <1> 	call print
  3386 00002A0F 8B0D[16000000]      <1> 	mov ecx, [signatureend - 4]
  3387 00002A15 E8F4060000          <1> 	call showdec
  3388 00002A1A BE[5E910000]        <1> 	mov esi, line
  3389 00002A1F E836F3FFFF          <1> 	call print
  3390 00002A24 BE[3A910000]        <1> 	mov esi, userask
  3391 00002A29 E82CF3FFFF          <1> 	call print
  3392                              <1> usercheck:
  3393 00002A2E BE[26D00000]        <1> 	mov esi, buftxt
  3394 00002A33 BF[26D40000]        <1> 	mov edi, buftxtend
  3395 00002A38 B00A                <1> 	mov al, 10
  3396 00002A3A E800F4FFFF          <1> 	call rdprint
  3397 00002A3F 56                  <1> 	push esi
  3398 00002A40 BE[44910000]        <1> 	mov esi, pwdask
  3399 00002A45 E810F3FFFF          <1> 	call print
  3400 00002A4A 5E                  <1> 	pop esi
  3401 00002A4B 46                  <1> 	inc esi
  3402 00002A4C 8935[3F2B0000]      <1> 	mov [esipass], esi
  3403                              <1> passcheck:
  3404 00002A52 E8D1F7FFFF          <1> 	call getchar
  3405 00002A57 3C0A                <1> 	cmp al, 10
  3406 00002A59 0F8436000000        <1> 	je near gotpass
  3407 00002A5F 3C08                <1> 	cmp al, 8
  3408 00002A61 0F8410000000        <1> 	je near backpass
  3409 00002A67 8806                <1> 	mov [esi], al
  3410 00002A69 46                  <1> 	inc esi
  3411 00002A6A B02A                <1> 	mov al, "*"
  3412 00002A6C E81CF8FFFF          <1> 	call prcharint
  3413 00002A71 EBDF                <1> 	jmp passcheck
  3414 00002A73 08200800            <1> backcursor2 db 8," ",8,0
  3415                              <1> backpass:
  3416 00002A77 3B35[3F2B0000]      <1> 	cmp esi, [esipass]
  3417 00002A7D 0F84CFFFFFFF        <1> 	je near passcheck
  3418 00002A83 4E                  <1> 	dec esi
  3419 00002A84 C60600              <1> 	mov byte [esi], 0
  3420 00002A87 56                  <1> 	push esi
  3421 00002A88 BE[732A0000]        <1> 	mov esi, backcursor2
  3422 00002A8D E8C8F2FFFF          <1> 	call print
  3423 00002A92 5E                  <1> 	pop esi
  3424 00002A93 EBBD                <1> 	jmp passcheck
  3425                              <1> gotpass:
  3426 00002A95 B00A                <1> 	mov al, 10
  3427 00002A97 E8F1F7FFFF          <1> 	call prcharint
  3428 00002A9C 30C0                <1> 	xor al, al
  3429 00002A9E 31C9                <1> 	xor ecx, ecx
  3430 00002AA0 8806                <1> 	mov [esi], al
  3431 00002AA2 BB[60910000]        <1> 	mov ebx, userlst
  3432                              <1> userfind:
  3433 00002AA7 BE[26D00000]        <1> 	mov esi, buftxt
  3434 00002AAC 8A06                <1> 	mov al, [esi]
  3435 00002AAE 3C00                <1> 	cmp al, 0
  3436 00002AB0 0F84F1FEFFFF        <1> 	je near os
  3437 00002AB6 891D[432B0000]      <1> 	mov [usercache], ebx
  3438 00002ABC E860030000          <1> 	call tester
  3439 00002AC1 3C01                <1> 	cmp al, 1
  3440 00002AC3 7416                <1> 	je pwdtest
  3441 00002AC5 41                  <1> 	inc ecx
  3442                              <1> nxtuser:
  3443 00002AC6 8A03                <1> 	mov al, [ebx]
  3444 00002AC8 43                  <1> 	inc ebx
  3445 00002AC9 3C00                <1> 	cmp al, 0
  3446 00002ACB 75F9                <1> 	jne nxtuser
  3447 00002ACD 81FB[83910000]      <1> 	cmp ebx, userlstend
  3448 00002AD3 0F83CEFEFFFF        <1> 	jae near os
  3449 00002AD9 EBCC                <1> 	jmp userfind
  3450                              <1> pwdtest:
  3451 00002ADB 46                  <1> 	inc esi
  3452 00002ADC 43                  <1> 	inc ebx
  3453 00002ADD E83F030000          <1> 	call tester
  3454 00002AE2 3C01                <1> 	cmp al, 1
  3455 00002AE4 7402                <1> 	je pwdrgt
  3456 00002AE6 EBDE                <1> 	jmp nxtuser
  3457                              <1> pwdrgt:
  3458 00002AE8 D1E9                <1> 	shr ecx, 1
  3459 00002AEA 890D[B2BB0000]      <1> 	mov [uid], ecx
  3460 00002AF0 E8CBF2FFFF          <1> 	call clear
  3461 00002AF5 31C9                <1> 	xor ecx, ecx
  3462 00002AF7 41                  <1> 	inc ecx
  3463 00002AF8 890D[88AC0100]      <1> 	mov [commandbufpos], ecx
  3464                              <1> returnfromexp:
  3465 00002AFE 66B90002            <1> 	mov cx, 200h
  3466 00002B02 BE[26D00000]        <1> 	mov esi, buftxt
  3467 00002B07 8935[1D2E0000]      <1> 	mov [currentcommandloc], esi
  3468 00002B0D E825000000          <1> 	call bufclr
  3469                              <1> clearolddata:
  3470 00002B12 31C0                <1> 	xor eax, eax
  3471 00002B14 A2[B7BB0000]        <1> 	mov [IFON], al
  3472 00002B19 A2[B8BB0000]        <1> 	mov [IFTRUE], al
  3473 00002B1E A2[20BC0000]        <1> 	mov [BATCHISON], al
  3474 00002B23 A3[1CBC0000]        <1> 	mov [BATCHPOS], eax
  3475 00002B28 A2[21BC0000]        <1> 	mov [LOOPON], al
  3476 00002B2D A3[22BC0000]        <1> 	mov [LOOPPOS], eax
  3477 00002B32 E933000000          <1> 	jmp nwcmd
  3478                              <1> bufclr:	
  3479 00002B37 30C0                <1> 	xor al, al
  3480 00002B39 8806                <1> 	mov [esi], al
  3481 00002B3B 46                  <1> 	inc esi
  3482 00002B3C E2F9                <1> 	loop bufclr
  3483 00002B3E C3                  <1> 	ret
  3484                              <1> 
  3485 00002B3F 00000000            <1> esipass dd 0
  3486 00002B43 [60910000]          <1> usercache dd userlst
  3487                              <1> 	
  3488                              <1> buftxtclear:
  3489 00002B47 30C0                <1> 	xor al, al
  3490 00002B49 BE[26D00000]        <1> 	mov esi, buftxt
  3491 00002B4E 81FE[26D40000]      <1> clearbuftxt: cmp esi, buf2
  3492 00002B54 730E                <1> 	jae retbufclr
  3493 00002B56 8806                <1> 	mov [esi], al
  3494 00002B58 46                  <1> 	inc esi
  3495 00002B59 EBF3                <1> 	jmp clearbuftxt
  3496                              <1> 
  3497 00002B5B 39DE                <1> clearitbuf: cmp esi, ebx
  3498 00002B5D 7305                <1> 	jae retbufclr
  3499 00002B5F 8806                <1> 	mov [esi], al
  3500 00002B61 46                  <1> 	inc esi
  3501 00002B62 EBF7                <1> 	jmp clearitbuf
  3502 00002B64 C3                  <1> retbufclr: ret
  3503                              <1> 
  3504 00002B65 E900000000          <1> full:	jmp nwcmd
  3505                              <1> 
  3506                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3507                              <1> nwcmd:
  3508 00002B6A FB                  <1> 	sti
  3509 00002B6B 31C0                <1> 	xor eax, eax
  3510 00002B6D 3905[3F2D0000]      <1> 	cmp [nextcommandloc], eax
  3511 00002B73 7413                <1> 	je nomultiplecommand
  3512 00002B75 8B35[3F2D0000]      <1> 	mov esi, [nextcommandloc]
  3513 00002B7B 8935[432D0000]      <1> 	mov [thiscommandloc], esi
  3514 00002B81 E8C6010000          <1> 	call fixvariables
  3515 00002B86 EBE2                <1> 	jmp nwcmd
  3516                              <1> nomultiplecommand:
  3517 00002B88 A3[432D0000]        <1> 	mov [thiscommandloc], eax
  3518 00002B8D 3805[13670000]      <1> 	cmp [threadson], al
  3519 00002B93 7405                <1> 	je noclinwcmd
  3520 00002B95 A2[13670000]        <1> 	mov [threadson], al
  3521                              <1> noclinwcmd:
  3522 00002B9A B001                <1> 	mov al, 1
  3523 00002B9C 3805[20BC0000]      <1> 	cmp [BATCHISON], al
  3524 00002BA2 7501                <1> 	jne cancel
  3525 00002BA4 C3                  <1> 	ret
  3526 00002BA5 30C0                <1> cancel:	xor al, al
  3527 00002BA7 A2[B7BB0000]        <1> 	mov [IFON], al
  3528 00002BAC A2[20BC0000]        <1> 	mov [BATCHISON], al
  3529 00002BB1 B05B                <1> 	mov al, '['
  3530 00002BB3 66BB0700            <1> 	mov bx, 7
  3531 00002BB7 E8E2F6FFFF          <1> 	call prcharq
  3532 00002BBC 8B35[432B0000]      <1> 	mov esi, [usercache]
  3533 00002BC2 E881F1FFFF          <1> 	call printquiet
  3534 00002BC7 BE[4E910000]        <1> 	mov esi, computer
  3535 00002BCC E877F1FFFF          <1> 	call printquiet
  3536 00002BD1 BE[B2B90000]        <1> 	mov esi, currentfolder
  3537 00002BD6 0335[AAB90000]      <1> 	add esi, [lastfolderloc]
  3538 00002BDC E867F1FFFF          <1> 	call printquiet
  3539 00002BE1 BE[59910000]        <1> 	mov esi, endprompt
  3540 00002BE6 E86FF1FFFF          <1> 	call print
  3541 00002BEB E857FFFFFF          <1> 	call buftxtclear
  3542 00002BF0 BE[26D00000]        <1> 	mov esi, buftxt
  3543 00002BF5 C605[11220000]01    <1> 	mov byte [commandedit], 1
  3544 00002BFC B00A                <1> 	mov al, 10
  3545 00002BFE 66BB0700            <1> 	mov bx, 7
  3546 00002C02 BF[26D40000]        <1> 	mov edi, buftxtend
  3547 00002C07 E833F2FFFF          <1> 	call rdprint
  3548 00002C0C C605[11220000]00    <1> 	mov byte [commandedit], 0
  3549 00002C13 803D[26D00000]00    <1> 	cmp byte [buftxt], 0
  3550 00002C1A 0F844AFFFFFF        <1> 	je near nwcmd
  3551 00002C20 8B35[88AC0100]      <1> gotcmd:	mov esi, [commandbufpos]
  3552 00002C26 8935[84AC0100]      <1> 	mov [lastcommandpos], esi
  3553 00002C2C FF05[90AC0100]      <1> 	inc dword [commandsentered]
  3554 00002C32 BF[26D00000]        <1> 	mov edi, buftxt
  3555 00002C37 81C6[94AC0100]      <1> 	add esi, commandbuf
  3556 00002C3D 81FE[94BC0100]      <1> 	cmp esi, commandbufend
  3557 00002C43 7605                <1> 	jbe copycommand
  3558 00002C45 BE[94AC0100]        <1> 	mov esi, commandbuf
  3559                              <1> copycommand:
  3560 00002C4A 8A07                <1> 	mov al, [edi]
  3561 00002C4C 8806                <1> 	mov [esi], al
  3562 00002C4E 47                  <1> 	inc edi
  3563 00002C4F 46                  <1> 	inc esi
  3564 00002C50 3C00                <1> 	cmp al, 0
  3565 00002C52 740F                <1> 	je donecopy
  3566 00002C54 81FE[94BC0100]      <1> 	cmp esi, commandbufend
  3567 00002C5A 76EE                <1> 	jbe copycommand
  3568 00002C5C BE[94AC0100]        <1> 	mov esi, commandbuf
  3569 00002C61 EBE7                <1> 	jmp copycommand
  3570                              <1> donecopy:
  3571 00002C63 81EE[94AC0100]      <1> 	sub esi, commandbuf
  3572 00002C69 8935[88AC0100]      <1> 	mov [commandbufpos], esi
  3573 00002C6F E8D3000000          <1> 	call run
  3574 00002C74 E9F1FEFFFF          <1> 	jmp nwcmd
  3575                              <1> 
  3576 00002C79 E8C9FEFFFF          <1> input:	call buftxtclear
  3577 00002C7E BE[26D00000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3578 00002C83 BF[26D40000]        <1> 	mov edi, buftxtend
  3579 00002C88 B00A                <1> stdin:	mov al, 10
  3580 00002C8A B307                <1> 	mov bl, 7
  3581 00002C8C E8AEF1FFFF          <1> 	call rdprint
  3582 00002C91 C3                  <1> 	ret
  3583                              <1> 
  3584                              <1> replacevariable:
  3585 00002C92 8A4601              <1> 	mov al, [esi + 1]
  3586 00002C95 C64601FF            <1> 	mov byte [esi + 1], 255
  3587 00002C99 3C24                <1> 	cmp al, "$"
  3588 00002C9B 0F84AB000000        <1> 	je near fixvariables
  3589 00002CA1 884601              <1> 	mov [esi + 1], al
  3590 00002CA4 56                  <1> 	push esi
  3591 00002CA5 81EE[26D00000]      <1> 	sub esi, buftxt
  3592 00002CAB 89F7                <1> 	mov edi, esi
  3593 00002CAD 81C6[26D00000]      <1> 	add esi, buftxt
  3594 00002CB3 47                  <1> 	inc edi
  3595 00002CB4 BB[26BC0000]        <1> 	mov ebx, variables
  3596 00002CB9 E800150000          <1> 	call nxtvrech
  3597 00002CBE 89F7                <1> 	mov edi, esi
  3598 00002CC0 31DB                <1> 	xor ebx, ebx
  3599 00002CC2 4E                  <1> 	dec esi
  3600                              <1> findvarname:
  3601 00002CC3 4E                  <1> 	dec esi
  3602 00002CC4 8A06                <1> 	mov al, [esi]
  3603 00002CC6 43                  <1> 	inc ebx
  3604 00002CC7 3C04                <1> 	cmp al, 4
  3605 00002CC9 75F8                <1> 	jne findvarname
  3606 00002CCB 5E                  <1> 	pop esi
  3607                              <1> replacevarloop:
  3608 00002CCC 8A07                <1> 	mov al, [edi]
  3609 00002CCE 3C00                <1> 	cmp al, 0
  3610 00002CD0 0F8413000000        <1> 	je near compressbuftxt
  3611 00002CD6 81FB00000000        <1> 	cmp ebx, 0
  3612 00002CDC 0F8416000000        <1> 	je near expandbuftxt
  3613 00002CE2 8806                <1> 	mov [esi], al
  3614 00002CE4 4B                  <1> 	dec ebx
  3615 00002CE5 46                  <1> 	inc esi
  3616 00002CE6 47                  <1> 	inc edi
  3617 00002CE7 EBE3                <1> 	jmp replacevarloop
  3618                              <1> compressbuftxt:
  3619 00002CE9 8A041E              <1> 	mov al, [esi + ebx]
  3620 00002CEC 8806                <1> 	mov [esi], al
  3621 00002CEE 46                  <1> 	inc esi
  3622 00002CEF 3C00                <1> 	cmp al, 0
  3623 00002CF1 75F6                <1> 	jne compressbuftxt
  3624 00002CF3 E954000000          <1> 	jmp fixvariables
  3625                              <1> expandbuftxt:
  3626 00002CF8 89F1                <1> 	mov ecx, esi
  3627 00002CFA 8A26                <1> 	mov ah, [esi]
  3628                              <1> expandbuftxtlp:
  3629 00002CFC 8A1E                <1> 	mov bl, [esi]
  3630 00002CFE 46                  <1> 	inc esi
  3631 00002CFF 8A3E                <1> 	mov bh, [esi]
  3632 00002D01 8826                <1> 	mov [esi], ah
  3633 00002D03 88FC                <1> 	mov ah, bh
  3634 00002D05 80FB00              <1> 	cmp bl, 0
  3635 00002D08 75F2                <1> 	jne expandbuftxtlp
  3636 00002D0A 89CE                <1> 	mov esi, ecx
  3637 00002D0C 8806                <1> 	mov [esi], al
  3638 00002D0E 47                  <1> 	inc edi
  3639 00002D0F 8A07                <1> 	mov al, [edi]
  3640 00002D11 3C00                <1> 	cmp al, 0
  3641 00002D13 0F8433000000        <1> 	je near fixvariables
  3642 00002D19 46                  <1> 	inc esi
  3643 00002D1A EBDC                <1> 	jmp expandbuftxt
  3644                              <1> multipleprogline:
  3645 00002D1C 30E4                <1> 	xor ah, ah
  3646 00002D1E 8826                <1> 	mov [esi], ah
  3647 00002D20 46                  <1> 	inc esi
  3648 00002D21 8935[3F2D0000]      <1> 	mov [nextcommandloc], esi
  3649 00002D27 E93E000000          <1> 	jmp donefixvariables
  3650                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3651 00002D2C 46                  <1> 	inc esi
  3652 00002D2D 8A06                <1> 	mov al, [esi]
  3653 00002D2F C606FF              <1> 	mov byte [esi], 255
  3654 00002D32 3C23                <1> 	cmp al, '#'
  3655 00002D34 7416                <1> 	je fixvariables
  3656 00002D36 4E                  <1> 	dec esi
  3657 00002D37 C60600              <1> 	mov byte [esi], 0
  3658 00002D3A E90D000000          <1> 	jmp fixvariables
  3659                              <1> 	
  3660 00002D3F 00000000            <1> nextcommandloc dd 0
  3661 00002D43 00000000            <1> thiscommandloc dd 0	
  3662                              <1> run:
  3663 00002D47 BE[26D00000]        <1> 	mov esi, buftxt
  3664 00002D4C 46                  <1> fixvariables:	inc esi
  3665 00002D4D 8A06                <1> 	mov al, [esi]
  3666 00002D4F 3C23                <1> 	cmp al, '#'	;inline comment
  3667 00002D51 74D9                <1> 	je inlinecomment
  3668 00002D53 3C24                <1> 	cmp al, '$' ;variable
  3669 00002D55 0F8437FFFFFF        <1> 	je near replacevariable
  3670 00002D5B 3C3B                <1> 	cmp al, ';' ;program list
  3671 00002D5D 74BD                <1> 	je multipleprogline
  3672 00002D5F 3C00                <1> 	cmp al, 0
  3673 00002D61 75E9                <1> 	jne fixvariables
  3674 00002D63 31C0                <1> 	xor eax, eax
  3675 00002D65 A3[3F2D0000]        <1> 	mov [nextcommandloc], eax
  3676                              <1> donefixvariables:
  3677 00002D6A 803D[08330000]00    <1> 	cmp byte [indexdone], 0
  3678 00002D71 7505                <1> 	jne progtest
  3679 00002D73 E8FB040000          <1> 	call indexfiles
  3680                              <1> progtest:
  3681 00002D78 31C0                <1> 	xor eax, eax
  3682 00002D7A BB[A6B50000]        <1> 	mov ebx, fileindex
  3683 00002D7F 668B03              <1> prgnxt:	mov ax, [ebx]
  3684 00002D82 B1FF                <1> 	mov cl, 255
  3685 00002D84 B52C                <1> 	mov ch, 44
  3686 00002D86 6639C8              <1> 	cmp ax, cx
  3687 00002D89 740B                <1> 	je fndprg
  3688 00002D8B 43                  <1> 	inc ebx
  3689 00002D8C 81FB[A6B90000]      <1> 	cmp ebx, fileindexend
  3690 00002D92 735D                <1> 	jae prgnf
  3691 00002D94 EBE9                <1> 	jmp prgnxt
  3692 00002D96 81C302000000        <1> fndprg: add ebx, 2
  3693 00002D9C 31C9                <1> 	xor ecx, ecx
  3694 00002D9E BE[26D00000]        <1> 	mov esi, buftxt
  3695 00002DA3 390D[432D0000]      <1> 	cmp [thiscommandloc], ecx
  3696 00002DA9 7406                <1> 	je noprgtstmultiple
  3697 00002DAB 8B35[432D0000]      <1> 	mov esi, [thiscommandloc]
  3698                              <1> noprgtstmultiple:
  3699 00002DB1 E8A6000000          <1> 	call cndtest
  3700 00002DB6 3C01                <1> 	cmp al, 1
  3701 00002DB8 7302                <1> 	jae prggood
  3702 00002DBA EBC3                <1> 	jmp prgnxt
  3703 00002DBC 81FB[A6B90000]      <1> prggood: cmp ebx, fileindexend
  3704 00002DC2 7358                <1> 	jae prgdn
  3705 00002DC4 31C0                <1> 	xor eax, eax
  3706 00002DC6 BE[26D00000]        <1> 	mov esi, buftxt
  3707 00002DCB 3905[432D0000]      <1> 	cmp [thiscommandloc], eax
  3708 00002DD1 7406                <1> 	je noprggoodmul
  3709 00002DD3 8B35[432D0000]      <1> 	mov esi, [thiscommandloc]
  3710                              <1> noprggoodmul:
  3711 00002DD9 8935[1D2E0000]      <1> 	mov [currentcommandloc], esi
  3712 00002DDF 81C303000000        <1> 	add ebx, 3
  3713 00002DE5 8B3B                <1> 	mov edi, [ebx]
  3714 00002DE7 C605[13670000]02    <1> 	mov byte [threadson], 2
  3715 00002DEE FFD7                <1> 	call edi
  3716 00002DF0 C3                  <1> 	ret
  3717                              <1> prgnf:	
  3718 00002DF1 8B35[1D2E0000]      <1> 	mov esi, [currentcommandloc]
  3719 00002DF7 8A06                <1> 	mov al, [esi]
  3720 00002DF9 3C00                <1> 	cmp al, 0
  3721 00002DFB 741F                <1> 	je prgdn
  3722 00002DFD BE[25910000]        <1> 	mov esi, notfound1
  3723 00002E02 E853EFFFFF          <1> 	call print
  3724 00002E07 8B35[1D2E0000]      <1> 	mov esi, [currentcommandloc]
  3725 00002E0D E848EFFFFF          <1> 	call print
  3726 00002E12 BE[2D910000]        <1> 	mov esi, notfound2
  3727 00002E17 E83EEFFFFF          <1> 	call print
  3728 00002E1C C3                  <1> prgdn:	ret
  3729                              <1> 
  3730 00002E1D 00000000            <1> currentcommandloc dd 0
  3731                              <1> 
  3732                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3733 00002E21 6631C0              <1> 	xor ax, ax
  3734 00002E24 8A06                <1> retest:	mov al, [esi]
  3735 00002E26 8A23                <1> 	mov ah, [ebx]
  3736 00002E28 3C00                <1> 	cmp al, 0
  3737 00002E2A 7408                <1> 	je testtrue
  3738 00002E2C 38E0                <1> 	cmp al, ah
  3739 00002E2E 750C                <1> 	jne testfalse
  3740 00002E30 43                  <1> 	inc ebx
  3741 00002E31 46                  <1> 	inc esi
  3742 00002E32 EBF0                <1> 	jmp retest
  3743                              <1> testtrue:
  3744 00002E34 80FC00              <1> 	cmp ah, 0
  3745 00002E37 7503                <1> 	jne testfalse
  3746 00002E39 B001                <1> 	mov al, 1
  3747 00002E3B C3                  <1> 	ret
  3748                              <1> testfalse:
  3749 00002E3C 30C0                <1> 	xor al, al
  3750 00002E3E C3                  <1> 	ret
  3751                              <1> 
  3752                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3753 00002E3F 30C0                <1> 	xor al, al
  3754                              <1> opretest:
  3755 00002E41 8A06                <1> 	mov al, [esi]
  3756 00002E43 8A23                <1> 	mov ah, [ebx]
  3757 00002E45 38E0                <1> 	cmp al, ah
  3758 00002E47 7510                <1> 	jne optestfalse
  3759 00002E49 80FC00              <1> 	cmp ah, 0
  3760 00002E4C 7404                <1> 	je optesttrue
  3761 00002E4E 43                  <1> 	inc ebx
  3762 00002E4F 46                  <1> 	inc esi
  3763 00002E50 EBEF                <1> 	jmp opretest
  3764                              <1> optesttrue:
  3765 00002E52 3C00                <1> 	cmp al, 0
  3766 00002E54 7503                <1> 	jne optestfalse
  3767 00002E56 B001                <1> 	mov al, 1
  3768 00002E58 C3                  <1> 	ret
  3769                              <1> optestfalse:
  3770 00002E59 30C0                <1> 	xor al, al
  3771 00002E5B C3                  <1> 	ret
  3772                              <1> 
  3773                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3774 00002E5C 30C0                <1> 	xor al, al
  3775 00002E5E 8A06                <1> cndretest:	mov al, [esi]
  3776 00002E60 8A23                <1> 	mov ah, [ebx]
  3777 00002E62 38CC                <1> 	cmp ah, cl
  3778 00002E64 7408                <1> 	je cndtesttrue
  3779 00002E66 38E0                <1> 	cmp al, ah
  3780 00002E68 750B                <1> 	jne cndtestfalse
  3781 00002E6A 43                  <1> 	inc ebx
  3782 00002E6B 46                  <1> 	inc esi
  3783 00002E6C EBF0                <1> 	jmp cndretest
  3784                              <1> cndtesttrue:
  3785 00002E6E 38C8                <1> 	cmp al, cl
  3786 00002E70 7506                <1> 	jne cndtestalmost
  3787 00002E72 B001                <1> 	mov al, 1
  3788 00002E74 C3                  <1> 	ret
  3789                              <1> cndtestfalse:
  3790 00002E75 30C0                <1> 	xor al, al
  3791 00002E77 C3                  <1> 	ret
  3792                              <1> cndtestalmost:
  3793 00002E78 B002                <1> 	mov al, 2
  3794 00002E7A C3                  <1> 	ret
  3795                              <1> 	
  3796                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3797                              <1> 		                ;ends if array seperator is found backwards after 0
  3798                              <1> 	arnxt:	      
  3799 00002E7B 88E8                <1> 		mov al, ch
  3800 00002E7D 88CC                <1> 		mov ah, cl        
  3801 00002E7F 663906              <1> 		cmp [esi], ax
  3802 00002E82 744D                <1> 		je ardn
  3803 00002E84 66390E              <1> 		cmp [esi], cx
  3804 00002E87 7407                <1> 		je arfnd
  3805 00002E89 46                  <1> 		inc esi
  3806 00002E8A 39DE                <1> 		cmp esi, ebx
  3807 00002E8C 7343                <1> 		jae ardn
  3808 00002E8E EBEB                <1> 		jmp arnxt
  3809 00002E90 81C602000000        <1> 	arfnd: add esi, 2
  3810 00002E96 891D[D22E0000]      <1> 		mov [arbx], ebx
  3811 00002E9C 890D[D62E0000]      <1> 		mov [arcx], ecx
  3812 00002EA2 E8B3EEFFFF          <1> 		call print
  3813 00002EA7 8935[D82E0000]      <1> 		mov [arsi], esi
  3814 00002EAD BE[5E910000]        <1> 		mov esi, line
  3815 00002EB2 E8A3EEFFFF          <1> 		call print
  3816 00002EB7 8B1D[D22E0000]      <1> 		mov ebx, [arbx]
  3817 00002EBD 668B0D[D62E0000]    <1> 		mov cx, [arcx]
  3818 00002EC4 8B35[D82E0000]      <1> 		mov esi, [arsi]
  3819 00002ECA 46                  <1> 		inc esi
  3820 00002ECB 39DE                <1> 		cmp esi, ebx
  3821 00002ECD 7302                <1> 		jae ardn
  3822 00002ECF EBAA                <1> 		jmp arnxt
  3823 00002ED1 C3                  <1> 	ardn:	ret
  3824 00002ED2 00000000            <1> arbx:	dw 0,0
  3825 00002ED6 0000                <1> arcx:	db 0,0
  3826 00002ED8 00000000            <1> arsi:	dw 0,0
  3827                              <1> 
  3828                              <1> clearbuffer:
  3829 00002EDC BE[26D40000]        <1> 	mov esi, buf2
  3830 00002EE1 B030                <1> 	mov al, '0'
  3831 00002EE3 81FE[3AD40000]      <1> clearbuf: cmp esi, numbuf
  3832 00002EE9 7305                <1> 	jae doneclearbuff
  3833 00002EEB 8806                <1> 	mov [esi], al
  3834 00002EED 46                  <1> 	inc esi
  3835 00002EEE EBF3                <1> 	jmp clearbuf
  3836                              <1> doneclearbuff: 
  3837 00002EF0 C3                  <1> 		ret
  3838                              <1> 
  3839                              <1> convert:
  3840 00002EF1 4E                  <1> 	dec esi
  3841 00002EF2 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3842                              <1> .lp:
  3843 00002EF4 89DE                <1> 	mov esi, ebx
  3844 00002EF6 81EE09000000        <1> 	sub esi, 9
  3845 00002EFC 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3846 00002F02 720A                <1> 	jb .8
  3847 00002F04 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3848 00002F0A FE06                <1> 	inc byte [esi]
  3849 00002F0C EBE6                <1> 	jmp .lp
  3850 00002F0E 46                  <1> .8:	inc esi
  3851 00002F0F 81F900E1F505        <1> 	cmp ecx, 100000000
  3852 00002F15 720A                <1> 	jb .7
  3853 00002F17 81E900E1F505        <1> 	sub ecx, 100000000
  3854 00002F1D FE06                <1> 	inc byte [esi]
  3855 00002F1F EBD3                <1> 	jmp .lp
  3856 00002F21 46                  <1> .7:	inc esi
  3857 00002F22 81F980969800        <1> 	cmp ecx, 10000000
  3858 00002F28 720A                <1> 	jb .6
  3859 00002F2A 81E980969800        <1> 	sub ecx, 10000000
  3860 00002F30 FE06                <1> 	inc byte [esi]
  3861 00002F32 EBC0                <1> 	jmp .lp
  3862 00002F34 46                  <1> .6:	inc esi
  3863 00002F35 81F940420F00        <1> 	cmp ecx, 1000000
  3864 00002F3B 720A                <1> 	jb .5
  3865 00002F3D 81E940420F00        <1> 	sub ecx, 1000000
  3866 00002F43 FE06                <1> 	inc byte [esi]
  3867 00002F45 EBAD                <1> 	jmp .lp
  3868 00002F47 46                  <1> .5:	inc esi
  3869 00002F48 81F9A0860100        <1> 	cmp ecx, 100000
  3870 00002F4E 720A                <1> 	jb .4
  3871 00002F50 81E9A0860100        <1> 	sub ecx, 100000
  3872 00002F56 FE06                <1> 	inc byte [esi]
  3873 00002F58 EB9A                <1> 	jmp .lp
  3874 00002F5A 46                  <1> .4:	inc esi
  3875 00002F5B 81F910270000        <1> 	cmp ecx, 10000
  3876 00002F61 720A                <1> 	jb .3
  3877 00002F63 81E910270000        <1> 	sub ecx, 10000
  3878 00002F69 FE06                <1> 	inc byte [esi]
  3879 00002F6B EB87                <1> 	jmp .lp
  3880 00002F6D 46                  <1> .3:	inc esi
  3881 00002F6E 81F9E8030000        <1> 	cmp ecx, 1000
  3882 00002F74 720D                <1> 	jb .2
  3883 00002F76 81E9E8030000        <1> 	sub ecx, 1000
  3884 00002F7C FE06                <1> 	inc byte [esi]
  3885 00002F7E E971FFFFFF          <1> 	jmp .lp
  3886 00002F83 46                  <1> .2:	inc esi
  3887 00002F84 81F964000000        <1> 	cmp ecx, 100
  3888 00002F8A 720D                <1> 	jb .1
  3889 00002F8C 81E964000000        <1> 	sub ecx, 100
  3890 00002F92 FE06                <1> 	inc byte [esi]
  3891 00002F94 E95BFFFFFF          <1> 	jmp .lp
  3892 00002F99 46                  <1> .1:	inc esi
  3893 00002F9A 81F90A000000        <1> 	cmp ecx, 10
  3894 00002FA0 720D                <1> 	jb .0
  3895 00002FA2 81E90A000000        <1> 	sub ecx, 10
  3896 00002FA8 FE06                <1> 	inc byte [esi]
  3897 00002FAA E945FFFFFF          <1> 	jmp .lp
  3898 00002FAF 46                  <1> .0:	inc esi
  3899 00002FB0 81F901000000        <1> 	cmp ecx, 1
  3900 00002FB6 720D                <1> 	jb .dn
  3901 00002FB8 81E901000000        <1> 	sub ecx, 1
  3902 00002FBE FE06                <1> 	inc byte [esi]
  3903 00002FC0 E92FFFFFFF          <1> 	jmp .lp
  3904                              <1> .dn:
  3905 00002FC5 C3                  <1> 	ret
  3906                              <1> 
  3907                              <1> 	
  3908                              <1> 
  3909 00002FC6 00<rept>            <1> hexnumber times 8 db 0
  3910 00002FCE 202000              <1> hexnumberend db "  ",0
  3911                              <1> 
  3912                              <1> converthex:
  3913                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3914 00002FD1 56                  <1> 	push esi
  3915 00002FD2 B030                <1> 	mov al, "0"
  3916 00002FD4 39FE                <1> .clearlp: cmp esi, edi
  3917 00002FD6 7305                <1> 	jae .doneclear
  3918 00002FD8 8806                <1> 	mov [esi], al
  3919 00002FDA 46                  <1> 	inc esi
  3920 00002FDB EBF7                <1> 	jmp .clearlp
  3921                              <1> .doneclear:
  3922 00002FDD 81EE02000000        <1> 	sub esi, 2
  3923 00002FE3 89C8                <1> 	mov eax, ecx
  3924                              <1> .loop:
  3925 00002FE5 30FF                <1> 	xor bh, bh
  3926 00002FE7 88C3                <1> 	mov bl, al
  3927 00002FE9 66C1E304            <1> 	shl bx, 4
  3928 00002FED C0EB04              <1> 	shr bl, 4
  3929 00002FF0 86DF                <1> 	xchg bl, bh ;they are backwards
  3930 00002FF2 80C330              <1> 	add bl, 48
  3931 00002FF5 80FB39              <1> 	cmp bl, "9"
  3932 00002FF8 7609                <1> 	jbe .goodbl
  3933 00002FFA 80EB30              <1> 	sub bl, 48
  3934 00002FFD 80EB0A              <1> 	sub bl, 0xA
  3935 00003000 80C341              <1> 	add bl, "A"
  3936                              <1> .goodbl:
  3937 00003003 80C730              <1> 	add bh, 48
  3938 00003006 80FF39              <1> 	cmp bh, "9"
  3939 00003009 7609                <1> 	jbe .goodbh
  3940 0000300B 80EF30              <1> 	sub bh, 48
  3941 0000300E 80EF0A              <1> 	sub bh, 0xA
  3942 00003011 80C741              <1> 	add bh, "A"
  3943                              <1> .goodbh:
  3944 00003014 C1E808              <1> 	shr eax, 8
  3945 00003017 66891E              <1> 	mov [esi], bx
  3946 0000301A 81EE02000000        <1> 	sub esi, 2
  3947 00003020 3B3424              <1> 	cmp esi, [esp]
  3948 00003023 7207                <1> 	jb .done
  3949 00003025 3D00000000          <1> 	cmp eax, 0
  3950 0000302A 75B9                <1> 	jne .loop
  3951                              <1> .done:
  3952 0000302C 5E                  <1> 	pop esi
  3953 0000302D C3                  <1> 	ret
  3954                              <1> 	
  3955                              <1> 	
  3956 0000302E 00                  <1> smallhex db 0
  3957 0000302F 01                  <1> firsthexshown db 1
  3958                              <1> showhexsmall:
  3959 00003030 C605[2E300000]01    <1> 	mov byte [smallhex], 1
  3960 00003037 E808000000          <1> 	call showhex
  3961 0000303C C605[2E300000]00    <1> 	mov byte [smallhex], 0
  3962 00003043 C3                  <1> 	ret
  3963                              <1> showhex:
  3964 00003044 60                  <1> 	pusha
  3965 00003045 BE[C62F0000]        <1> 	mov esi, hexnumber
  3966 0000304A BF[CE2F0000]        <1> 	mov edi, hexnumberend
  3967 0000304F E87DFFFFFF          <1> 	call converthex
  3968 00003054 803D[2F300000]01    <1> 	cmp byte [firsthexshown], 1
  3969 0000305B 7503                <1> 	jne .show
  3970 0000305D 6631D2              <1> 	xor dx, dx
  3971                              <1> .show:
  3972 00003060 803D[2F300000]03    <1> 	cmp byte [firsthexshown], 3
  3973 00003067 750A                <1> 	jne .nonewhexline
  3974 00003069 BE[5E910000]        <1> 	mov esi, line
  3975 0000306E E8E7ECFFFF          <1> 	call print
  3976                              <1> .nonewhexline:
  3977 00003073 803D[2F300000]04    <1> 	cmp byte [firsthexshown], 4
  3978 0000307A 7527                <1> 	jne .notab
  3979 0000307C B1A0                <1> 	mov cl, 160
  3980 0000307E 28D1                <1> 	sub cl, dl
  3981 00003080 C0E905              <1> 	shr cl, 5
  3982 00003083 C0E105              <1> 	shl cl, 5
  3983 00003086 80F900              <1> 	cmp cl, 0
  3984 00003089 750F                <1> 	jne .nonewline
  3985 0000308B BE[5E910000]        <1> 	mov esi, line
  3986 00003090 E8C5ECFFFF          <1> 	call print
  3987 00003095 E909000000          <1> 	jmp .notab
  3988                              <1> .nonewline:
  3989 0000309A 80C20F              <1> 	add dl, 15
  3990 0000309D C0EA04              <1> 	shr dl, 4
  3991 000030A0 C0E204              <1> 	shl dl, 4
  3992                              <1> .notab:
  3993 000030A3 BE[C62F0000]        <1> 	mov esi, hexnumber
  3994 000030A8 803D[2E300000]01    <1> 	cmp byte [smallhex],1
  3995 000030AF 7506                <1> 	jne .nosmall
  3996 000030B1 81C606000000        <1> 	add esi, 6
  3997                              <1> .nosmall:
  3998 000030B7 803D[2F300000]05    <1> 	cmp byte [firsthexshown], 5
  3999 000030BE 750A                <1> 	jne .noquiet
  4000 000030C0 E883ECFFFF          <1> 	call printquiet
  4001 000030C5 E918000000          <1> 	jmp .donequiet
  4002                              <1> .noquiet:
  4003 000030CA 803D[2F300000]06    <1> 	cmp byte [firsthexshown], 6
  4004 000030D1 750A                <1> 	jne .normal
  4005 000030D3 E864ECFFFF          <1> 	call printhighlight
  4006 000030D8 E905000000          <1> 	jmp .donequiet
  4007                              <1> .normal:
  4008 000030DD E878ECFFFF          <1> 	call print
  4009                              <1> .donequiet:
  4010 000030E2 803D[2F300000]02    <1> 	cmp byte [firsthexshown], 2
  4011 000030E9 750A                <1> 	jne .shown
  4012 000030EB BE[5E910000]        <1> 	mov esi, line
  4013 000030F0 E865ECFFFF          <1> 	call print
  4014                              <1> .shown:
  4015 000030F5 C605[2F300000]00    <1> 	mov byte [firsthexshown], 0
  4016 000030FC 61                  <1> 	popa
  4017 000030FD C3                  <1> 	ret
  4018                              <1> 
  4019                              <1> 
  4020 000030FE 303030303030303030- <1> decnumber db "00000000000000"
  4021 00003107 3030303030          <1>
  4022 0000310C 2000                <1> decnumberend: db " ",0
  4023                              <1> 
  4024                              <1> showdec: ;;same as showhex, just uses decimal conversion
  4025 0000310E 60                  <1> 	pusha
  4026 0000310F BF[FE300000]        <1> 	mov edi, decnumber
  4027 00003114 BE[0C310000]        <1> 	mov esi, decnumberend
  4028                              <1> .clear:
  4029 00003119 C60730              <1> 	mov byte [edi], '0'
  4030 0000311C 47                  <1> 	inc edi
  4031 0000311D 39F7                <1> 	cmp edi, esi
  4032 0000311F 72F8                <1> 	jb .clear
  4033 00003121 BF[FE300000]        <1> 	mov edi, decnumber
  4034 00003126 E8C6FDFFFF          <1> 	call convert
  4035 0000312B 803D[2F300000]01    <1> 	cmp byte [firsthexshown], 1
  4036 00003132 7503                <1> 	jne .show
  4037 00003134 6631D2              <1> 	xor dx, dx
  4038                              <1> .show:
  4039 00003137 803D[2F300000]03    <1> 	cmp byte [firsthexshown], 3
  4040 0000313E 750A                <1> 	jne .nonewdecline
  4041 00003140 BE[5E910000]        <1> 	mov esi, line
  4042 00003145 E810ECFFFF          <1> 	call print
  4043                              <1> .nonewdecline:
  4044 0000314A 803D[2F300000]04    <1> 	cmp byte [firsthexshown], 4
  4045 00003151 7527                <1> 	jne .notab
  4046 00003153 B1A0                <1> 	mov cl, 160
  4047 00003155 28D1                <1> 	sub cl, dl
  4048 00003157 C0E905              <1> 	shr cl, 5
  4049 0000315A C0E105              <1> 	shl cl, 5
  4050 0000315D 80F900              <1> 	cmp cl, 0
  4051 00003160 750F                <1> 	jne .nonewline
  4052 00003162 BE[5E910000]        <1> 	mov esi, line
  4053 00003167 E8EEEBFFFF          <1> 	call print
  4054 0000316C E909000000          <1> 	jmp .notab
  4055                              <1> .nonewline:
  4056 00003171 80C20F              <1> 	add dl, 15
  4057 00003174 C0EA04              <1> 	shr dl, 4
  4058 00003177 C0E204              <1> 	shl dl, 4
  4059                              <1> .notab:
  4060 0000317A BE[FE300000]        <1> 	mov esi, decnumber
  4061 0000317F 4E                  <1> 	dec esi
  4062                              <1> .sifind:
  4063 00003180 46                  <1> 	inc esi
  4064 00003181 803E30              <1> 	cmp byte [esi], '0'
  4065 00003184 74FA                <1> 	je .sifind
  4066 00003186 E8CFEBFFFF          <1> 	call print
  4067 0000318B 803D[2F300000]02    <1> 	cmp byte [firsthexshown], 2
  4068 00003192 750A                <1> 	jne .shown
  4069 00003194 BE[5E910000]        <1> 	mov esi, line
  4070 00003199 E8BCEBFFFF          <1> 	call print
  4071                              <1> .shown:
  4072 0000319E C605[2F300000]00    <1> 	mov byte [firsthexshown], 0
  4073 000031A5 61                  <1> 	popa
  4074 000031A6 C3                  <1> 	ret
  4075                              <1> 	
  4076                              <1> cnvrthextxt:
  4077 000031A7 31C9                <1> 	xor ecx, ecx
  4078 000031A9 31C0                <1> 	xor eax, eax
  4079 000031AB 31D2                <1> 	xor edx, edx
  4080 000031AD 31DB                <1> 	xor ebx, ebx
  4081 000031AF 4E                  <1> 	dec esi
  4082                              <1> .end:
  4083 000031B0 46                  <1> 	inc esi
  4084 000031B1 8A06                <1> 	mov al, [esi]
  4085 000031B3 3C00                <1> 	cmp al, 0
  4086 000031B5 75F9                <1> 	jne .end
  4087                              <1> .loop:
  4088 000031B7 4E                  <1> 	dec esi
  4089 000031B8 8A06                <1> 	mov al, [esi]
  4090 000031BA 3C41                <1> 	cmp al, "A"
  4091 000031BC 7328                <1> 	jae .char
  4092 000031BE 2C30                <1> 	sub al, 48
  4093 000031C0 3C10                <1> 	cmp al, 16
  4094 000031C2 7721                <1> 	ja .done
  4095                              <1> .donechar:
  4096 000031C4 81FA00000000        <1> 	cmp edx, 0
  4097 000031CA 740E                <1> 	je .noshl
  4098 000031CC 89D3                <1> 	mov ebx, edx
  4099                              <1> .shl:
  4100 000031CE C1E004              <1> 	shl eax, 4
  4101 000031D1 4B                  <1> 	dec ebx
  4102 000031D2 81FB00000000        <1> 	cmp ebx, 0
  4103 000031D8 75F4                <1> 	jne .shl
  4104                              <1> .noshl:
  4105 000031DA 42                  <1> 	inc edx
  4106 000031DB 01C1                <1> 	add ecx, eax
  4107 000031DD 81FA08000000        <1> 	cmp edx, 8
  4108 000031E3 72D2                <1> 	jb .loop
  4109                              <1> .done:
  4110 000031E5 C3                  <1> 	ret
  4111                              <1> .char:
  4112 000031E6 3C46                <1> 	cmp al, "F"
  4113 000031E8 77FB                <1> 	ja .done
  4114 000031EA 2C41                <1> 	sub al, "A"
  4115 000031EC 040A                <1> 	add al, 0xA
  4116 000031EE EBD4                <1> 	jmp .donechar
  4117                              <1> 	
  4118                              <1> 	
  4119                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4120 000031F0 31C9                <1> 	xor ecx, ecx
  4121 000031F2 31C0                <1> 	xor eax, eax
  4122 000031F4 31D2                <1> 	xor edx, edx
  4123 000031F6 31DB                <1> 	xor ebx, ebx
  4124 000031F8 4E                  <1> 	dec esi
  4125                              <1> .lp:
  4126 000031F9 46                  <1> 	inc esi
  4127 000031FA 8A06                <1> 	mov al, [esi]
  4128 000031FC 3C00                <1> 	cmp al, 0
  4129 000031FE 75F9                <1> 	jne .lp
  4130 00003200 4E                  <1> 	dec esi
  4131 00003201 8A06                <1> 	mov al, [esi]
  4132 00003203 3C2E                <1> 	cmp al, '.'
  4133 00003205 7503                <1> 	jne .dot
  4134 00003207 46                  <1> 	inc esi
  4135 00003208 EBEF                <1> 	jmp .lp
  4136                              <1> .dot:
  4137 0000320A 3C20                <1> 	cmp al, ' '
  4138 0000320C 7404                <1> 	je .zero
  4139 0000320E 3C30                <1> 	cmp al, '0'
  4140 00003210 7504                <1> 	jne .txtlp
  4141                              <1> .zero: 
  4142 00003212 39FE                <1> 		cmp esi, edi
  4143 00003214 7458                <1> 		je .done
  4144                              <1> .txtlp:
  4145 00003216 31C0                <1> 	xor eax, eax
  4146 00003218 8A06                <1> 	mov al, [esi]
  4147 0000321A 3C3D                <1> 	cmp al, '='
  4148 0000321C 7450                <1> 	je .done
  4149 0000321E 3C30                <1> 	cmp al, 48
  4150 00003220 724C                <1> 	jb .done
  4151 00003222 3C23                <1> 	cmp al, '#'
  4152 00003224 7448                <1> 	je .done
  4153 00003226 39FE                <1> 	cmp esi, edi
  4154 00003228 7244                <1> 	jb .done
  4155 0000322A 81F900000000        <1> 	cmp ecx, 0
  4156 00003230 7708                <1> 	ja .exp
  4157 00003232 2C30                <1> .noexp:	sub al, 48
  4158 00003234 01C2                <1> 	add edx, eax
  4159 00003236 4E                  <1> 	dec esi
  4160 00003237 41                  <1> 	inc ecx
  4161 00003238 EBDC                <1> 	jmp .txtlp
  4162 0000323A 81F900000000        <1> .exp:	cmp ecx, 0
  4163 00003240 74F0                <1> 	je .noexp
  4164 00003242 2C30                <1> 	sub al, 48
  4165 00003244 51                  <1> 	push ecx
  4166 00003245 89C3                <1> .expmul:	mov ebx, eax
  4167 00003247 01D8                <1> 	add eax, ebx
  4168 00003249 01D8                <1> 	add eax, ebx
  4169 0000324B 01D8                <1> 	add eax, ebx
  4170 0000324D 01D8                <1> 	add eax, ebx
  4171 0000324F 01D8                <1> 	add eax, ebx
  4172 00003251 01D8                <1> 	add eax, ebx
  4173 00003253 01D8                <1> 	add eax, ebx
  4174 00003255 01D8                <1> 	add eax, ebx
  4175 00003257 01D8                <1> 	add eax, ebx
  4176 00003259 81E901000000        <1> 	sub ecx, 1
  4177 0000325F 81F900000000        <1> 	cmp ecx, 0
  4178 00003265 77DE                <1> 	ja .expmul
  4179 00003267 01C2                <1> 	add edx, eax
  4180 00003269 59                  <1> 	pop ecx
  4181 0000326A 4E                  <1> 	dec esi
  4182 0000326B 41                  <1> 	inc ecx
  4183 0000326C EBA8                <1> 	jmp .txtlp
  4184 0000326E 89D1                <1> .done: mov ecx, edx
  4185 00003270 C3                  <1> 	ret
  4186                                      %include "source/programs.asm"
  4187 00003271 FF2C                <1> filetypes db 255,44
  4188                              <1> progstart:		;programs start here
  4189                              <1> indexfiles:
  4190 00003273 BE[73320000]        <1> 	mov esi, progstart
  4191 00003278 BB[A6B50000]        <1> 	mov ebx, fileindex
  4192 0000327D BF[73320000]        <1> 	mov edi, progstart
  4193 00003282 81EF02000000        <1> 	sub edi, 2
  4194                              <1> indexloop:
  4195 00003288 668B0E              <1> 	mov cx, [esi]
  4196                              <1> 	indexloop2:
  4197 0000328B 663B0F              <1> 		cmp cx, [edi]
  4198 0000328E 7424                <1> 		je indexloop2done
  4199 00003290 81EF02000000        <1> 		sub edi, 2
  4200 00003296 81FF[71320000]      <1> 		cmp edi, filetypes
  4201 0000329C 73ED                <1> 		jae indexloop2
  4202 0000329E BF[73320000]        <1> 	mov edi, progstart
  4203 000032A3 81EF02000000        <1> 	sub edi, 2
  4204 000032A9 46                  <1> 	inc esi
  4205 000032AA 81FE[39530000]      <1> 	cmp esi, batchprogend
  4206 000032B0 734E                <1> 	jae indexloopdone
  4207 000032B2 EBD4                <1> 	jmp indexloop
  4208                              <1> indexloop2done:
  4209 000032B4 66890B              <1> 	mov [ebx], cx
  4210 000032B7 81C302000000        <1> 	add ebx, 2
  4211 000032BD 81C602000000        <1> 	add esi, 2
  4212                              <1> 	nameindex:
  4213 000032C3 8A0E                <1> 		mov cl, [esi]
  4214 000032C5 80F900              <1> 		cmp cl, 0
  4215 000032C8 7406                <1> 		je nameindexdone
  4216 000032CA 880B                <1> 		mov [ebx], cl
  4217 000032CC 46                  <1> 		inc esi
  4218 000032CD 43                  <1> 		inc ebx
  4219 000032CE EBF3                <1> 		jmp nameindex
  4220                              <1> 	nameindexdone:
  4221 000032D0 43                  <1> 		inc ebx
  4222 000032D1 66C7030000          <1> 		mov word [ebx], 0
  4223 000032D6 81C302000000        <1> 		add ebx, 2
  4224 000032DC 46                  <1> 		inc esi
  4225 000032DD 8933                <1> 		mov [ebx], esi
  4226 000032DF 81C304000000        <1> 		add ebx, 4
  4227 000032E5 66C7030000          <1> 		mov word [ebx], 0
  4228 000032EA 81C302000000        <1> 		add ebx, 2
  4229 000032F0 81FB[A6B90000]      <1> 		cmp ebx, fileindexend
  4230 000032F6 7308                <1> 		jae indexloopdone
  4231 000032F8 81C601000000        <1> 		add esi, 1
  4232 000032FE EB88                <1> 		jmp indexloop
  4233 00003300 C605[08330000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4234 00003307 C3                  <1> 		ret
  4235 00003308 00                  <1> indexdone db 0
  4236                              <1> %include 'source/programs/_comment.asm' ;#
  4237 00003309 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4238 0000330D C3                  <2> 	ret 
  4239                              <1> %include 'source/programs/_math.asm' ;!
  4240 0000330E FF2C2100            <2> db 255,44,"!",0
  4241                              <2> 	num:	
  4242 00003312 E8C5FBFFFF          <2> 		call clearbuffer
  4243 00003317 C605[98350000]00    <2> 		mov byte [decimal], 0
  4244 0000331E C605[99350000]00    <2> 		mov byte [decimal2], 0
  4245 00003325 8B35[1D2E0000]      <2> 		mov esi, [currentcommandloc]
  4246 0000332B 31C0                <2> 		xor eax, eax
  4247 0000332D 31C9                <2> 		xor ecx, ecx
  4248 0000332F 31DB                <2> 		xor ebx, ebx
  4249 00003331 8A06                <2> 	num2:	mov al, [esi]
  4250 00003333 3C2B                <2> 		cmp al, '+'
  4251 00003335 741B                <2> 		je operatorfound
  4252 00003337 3C2D                <2> 		cmp al, '-'
  4253 00003339 7417                <2> 		je operatorfound
  4254 0000333B 3C2A                <2> 		cmp al, '*'
  4255 0000333D 7413                <2> 		je operatorfound
  4256 0000333F 3C2F                <2> 		cmp al, '/'
  4257 00003341 740F                <2> 		je operatorfound
  4258 00003343 3C5E                <2> 		cmp al, '^'
  4259 00003345 740B                <2> 		je operatorfound
  4260 00003347 46                  <2> 		inc esi
  4261 00003348 3C00                <2> 		cmp al, 0
  4262 0000334A 0F841AF8FFFF        <2> 		je near nwcmd
  4263 00003350 EBDF                <2> 		jmp num2
  4264 00003352 50                  <2> 	operatorfound: push eax
  4265 00003353 30E4                <2> 		xor ah, ah
  4266 00003355 8826                <2> 		mov [esi], ah
  4267 00003357 89F7                <2> 		mov edi, esi
  4268 00003359 46                  <2> 		inc esi
  4269 0000335A 8A06                <2> 		mov al, [esi]
  4270 0000335C 3C25                <2> 		cmp al, '%'
  4271 0000335E 0F8462000000        <2> 		je near resultnum1
  4272                              <2> 	varnum2: 
  4273 00003364 57                  <2> 		push edi
  4274 00003365 E8A4000000          <2> 		call checkdecimal
  4275 0000336A 5F                  <2> 		pop edi
  4276 0000336B E880FEFFFF          <2> 		call cnvrttxt
  4277                              <2> 	vrnm2:
  4278 00003370 89CB                <2> 		mov ebx, ecx
  4279 00003372 53                  <2> 		push ebx
  4280 00003373 E864FBFFFF          <2> 		call clearbuffer
  4281 00003378 8B35[1D2E0000]      <2> 		mov esi, [currentcommandloc]
  4282 0000337E 89F7                <2> 		mov edi, esi
  4283 00003380 46                  <2> 		inc esi
  4284 00003381 8A06                <2> 		mov al, [esi]
  4285 00003383 3C25                <2> 		cmp al, '%'
  4286 00003385 0F844F000000        <2> 		je near resultnum2
  4287                              <2> 	varnum4: 
  4288 0000338B 57                  <2> 		push edi
  4289 0000338C E869000000          <2> 		call checkdecimal2
  4290 00003391 5F                  <2> 		pop edi
  4291 00003392 E859FEFFFF          <2> 		call cnvrttxt
  4292                              <2> 	vrnm4:
  4293 00003397 5B                  <2> 		pop ebx
  4294 00003398 58                  <2> 		pop eax
  4295 00003399 3C2B                <2> 		cmp al, '+'
  4296 0000339B 0F849B000000        <2> 		je near plusnum
  4297 000033A1 3C2D                <2> 		cmp al, '-'
  4298 000033A3 0F849F000000        <2> 		je near subnum
  4299 000033A9 3C2A                <2> 		cmp al, '*'
  4300 000033AB 0F84A3000000        <2> 		je near mulnum
  4301 000033B1 3C2F                <2> 		cmp al, '/'
  4302 000033B3 0F84B1000000        <2> 		je near divnum
  4303 000033B9 3C5E                <2> 		cmp al, '^'
  4304 000033BB 0F84CE000000        <2> 		je near expnum
  4305 000033C1 E9A4F7FFFF          <2> 		jmp nwcmd
  4306                              <2> 	resultnum1:
  4307 000033C6 8A0D[9A350000]      <2> 		mov cl, [decimalresult]
  4308 000033CC 880D[98350000]      <2> 		mov [decimal], cl
  4309 000033D2 8B0D[9B350000]      <2> 		mov ecx, [result]
  4310 000033D8 EB96                <2> 		jmp vrnm2
  4311                              <2> 	resultnum2:
  4312 000033DA 8A0D[98350000]      <2> 		mov cl, [decimal]
  4313 000033E0 880D[99350000]      <2> 		mov [decimal2], cl
  4314 000033E6 8A0D[9A350000]      <2> 		mov cl, [decimalresult]
  4315 000033EC 880D[98350000]      <2> 		mov [decimal], cl
  4316 000033F2 8B0D[9B350000]      <2> 		mov ecx, [result]
  4317 000033F8 EB9D                <2> 		jmp vrnm4
  4318                              <2> 	checkdecimal2:
  4319 000033FA 8A25[98350000]      <2> 		mov ah, [decimal]
  4320 00003400 8825[99350000]      <2> 		mov [decimal2], ah
  4321 00003406 30E4                <2> 		xor ah, ah
  4322 00003408 8825[98350000]      <2> 		mov [decimal], ah
  4323                              <2> 	checkdecimal:
  4324 0000340E 89F7                <2> 		mov edi, esi
  4325                              <2> 	chkdec1:
  4326 00003410 8A07                <2> 		mov al, [edi]
  4327 00003412 3C2E                <2> 		cmp al, '.'
  4328 00003414 0F840B000000        <2> 		je near fnddec
  4329 0000341A 3C00                <2> 		cmp al, 0
  4330 0000341C 0F8419000000        <2> 		je near nodecimal
  4331 00003422 47                  <2> 		inc edi
  4332 00003423 EBEB                <2> 		jmp chkdec1
  4333                              <2> 	fnddec:
  4334 00003425 8A4701              <2> 		mov al, [edi + 1]
  4335 00003428 8807                <2> 		mov [edi], al
  4336 0000342A 3C00                <2> 		cmp al, 0
  4337 0000342C 0F8409000000        <2> 		je near nodecimal
  4338 00003432 FE05[98350000]      <2> 		inc byte [decimal]
  4339 00003438 47                  <2> 		inc edi
  4340 00003439 EBEA                <2> 		jmp fnddec
  4341                              <2> 	nodecimal:
  4342 0000343B C3                  <2> 		ret
  4343                              <2> 	plusnum:
  4344 0000343C E815010000          <2> 		call decaddfix
  4345 00003441 01D9                <2> 		add ecx, ebx
  4346 00003443 E98A000000          <2> 		jmp retnum
  4347                              <2> 	subnum:
  4348 00003448 E809010000          <2> 		call decaddfix
  4349 0000344D 29D9                <2> 		sub ecx, ebx
  4350 0000344F E97E000000          <2> 		jmp retnum
  4351                              <2> 	mulnum:
  4352 00003454 A0[99350000]        <2> 		mov al, [decimal2]
  4353 00003459 0005[98350000]      <2> 		add [decimal], al
  4354 0000345F 89C8                <2> 		mov eax, ecx
  4355 00003461 F7E3                <2> 		mul ebx
  4356 00003463 89C1                <2> 		mov ecx, eax
  4357 00003465 E968000000          <2> 		jmp retnum
  4358                              <2> 	divnum:
  4359 0000346A E8E7000000          <2> 		call decaddfix
  4360 0000346F 30C0                <2> 		xor al, al
  4361 00003471 A2[98350000]        <2> 		mov [decimal], al
  4362 00003476 31D2                <2> 		xor edx, edx
  4363 00003478 89C8                <2> 		mov eax, ecx
  4364 0000347A 81FB00000000        <2> 		cmp ebx, 0
  4365 00003480 0F844C000000        <2> 		je near retnum
  4366 00003486 F7F3                <2> 		div ebx
  4367 00003488 89C1                <2> 		mov ecx, eax
  4368 0000348A E943000000          <2> 		jmp retnum
  4369                              <2> 	expnum:
  4370 0000348F 8A15[98350000]      <2> 		mov dl, [decimal]
  4371 00003495 8815[99350000]      <2> 		mov [decimal2], dl
  4372 0000349B 31D2                <2> 		xor edx, edx
  4373 0000349D 89C8                <2> 		mov eax, ecx
  4374 0000349F 89D9                <2> 		mov ecx, ebx
  4375 000034A1 89C3                <2> 		mov ebx, eax
  4376 000034A3 81F900000000        <2> 		cmp ecx, 0
  4377 000034A9 7422                <2> 		je noexpnum
  4378 000034AB 49                  <2> 		dec ecx
  4379 000034AC 81F900000000        <2> 		cmp ecx, 0
  4380 000034B2 7412                <2> 		je noexpnumlp
  4381 000034B4 F7E3                <2> 	expnumlp: mul ebx
  4382 000034B6 8A15[99350000]      <2> 		mov dl, [decimal2]
  4383 000034BC 0015[98350000]      <2> 		add [decimal], dl
  4384 000034C2 31D2                <2> 		xor edx, edx
  4385 000034C4 E2EE                <2> 		loop expnumlp
  4386                              <2> 	noexpnumlp:
  4387 000034C6 89C1                <2> 		mov ecx, eax
  4388 000034C8 E905000000          <2> 		jmp retnum
  4389                              <2> 	noexpnum:
  4390 000034CD B901000000          <2> 		mov ecx, 1
  4391                              <2> 	retnum: 
  4392 000034D2 BE[3AD40000]        <2> 		mov esi, numbuf
  4393 000034D7 890D[9B350000]      <2> 		mov [result], ecx
  4394 000034DD E80FFAFFFF          <2> 		call convert
  4395 000034E2 BE[3AD40000]        <2> 		mov esi, numbuf
  4396 000034E7 8A25[98350000]      <2> 		mov ah, [decimal]
  4397 000034ED 8825[9A350000]      <2> 		mov [decimalresult], ah
  4398 000034F3 80FC00              <2> 		cmp ah, 0
  4399 000034F6 0F8425000000        <2> 		je near noputdecimal
  4400                              <2> 	putdecimal:
  4401 000034FC 4E                  <2> 		dec esi
  4402 000034FD FECC                <2> 		dec ah
  4403 000034FF 80FC00              <2> 		cmp ah, 0
  4404 00003502 0F87F4FFFFFF        <2> 		ja near putdecimal
  4405 00003508 4E                  <2> 		dec esi
  4406 00003509 8A06                <2> 		mov al, [esi]
  4407 0000350B C6062E              <2> 		mov byte [esi], '.'
  4408                              <2> 	decputloop:
  4409 0000350E 4E                  <2> 		dec esi
  4410 0000350F 8A26                <2> 		mov ah, [esi]
  4411 00003511 8806                <2> 		mov [esi], al
  4412 00003513 88E0                <2> 		mov al, ah
  4413 00003515 81FE[26D40000]      <2> 		cmp esi, buf2
  4414 0000351B 0F87EDFFFFFF        <2> 		ja near decputloop
  4415                              <2> 	noputdecimal:
  4416 00003521 BE[26D40000]        <2> 		mov esi, buf2
  4417 00003526 E809000000          <2> 		call chkadd
  4418 0000352B E93AF6FFFF          <2> 		jmp nwcmd
  4419 00003530 00000000            <2> edxnumbuf dw 0,0
  4420 00003534 8A06                <2> 	chkadd: mov al, [esi]
  4421 00003536 3C30                <2> 		cmp al, '0'
  4422 00003538 750C                <2> 		jne dnadd
  4423 0000353A 46                  <2> 		inc esi
  4424 0000353B 81FE[3AD40000]      <2> 		cmp esi, numbuf
  4425 00003541 7402                <2> 		je dnaddm1
  4426 00003543 EBEF                <2> 		jmp chkadd
  4427 00003545 4E                  <2> 	dnaddm1: dec esi
  4428 00003546 E80FE8FFFF          <2> 	dnadd:	call print
  4429 0000354B BE[5E910000]        <2> 		mov esi, line
  4430 00003550 E805E8FFFF          <2> 		call print
  4431 00003555 C3                  <2> 		ret
  4432                              <2> 		
  4433                              <2> 	decaddfix:
  4434 00003556 A0[99350000]        <2> 		mov al, [decimal2]
  4435 0000355B 8A25[98350000]      <2> 		mov ah, [decimal]
  4436 00003561 38E0                <2> 		cmp al, ah
  4437 00003563 7432                <2> 		je gooddecadd
  4438 00003565 38E0                <2> 		cmp al, ah
  4439 00003567 721A                <2> 		jb lowdecadd
  4440                              <2> 	highdecadd:
  4441 00003569 FEC4                <2> 		inc ah
  4442 0000356B 89CA                <2> 		mov edx, ecx
  4443 0000356D C1E103              <2> 		shl ecx, 3
  4444 00003570 01D1                <2> 		add ecx, edx
  4445 00003572 01D1                <2> 		add ecx, edx
  4446 00003574 38E0                <2> 		cmp al, ah
  4447 00003576 77F1                <2> 		ja highdecadd
  4448 00003578 8825[98350000]      <2> 		mov [decimal], ah
  4449 0000357E E914000000          <2> 		jmp gooddecadd
  4450                              <2> 	lowdecadd:
  4451 00003583 FEC0                <2> 		inc al
  4452 00003585 89DA                <2> 		mov edx, ebx
  4453 00003587 C1E303              <2> 		shl ebx, 3
  4454 0000358A 01D3                <2> 		add ebx, edx
  4455 0000358C 01D3                <2> 		add ebx, edx
  4456 0000358E 38E0                <2> 		cmp al, ah
  4457 00003590 72F1                <2> 		jb lowdecadd
  4458 00003592 A2[98350000]        <2> 		mov [decimal], al
  4459                              <2> 	gooddecadd:
  4460 00003597 C3                  <2> 		ret
  4461                              <2> 		
  4462 00003598 00                  <2> decimal db 0
  4463 00003599 00                  <2> decimal2 db 0
  4464 0000359A 00                  <2> decimalresult db 0
  4465 0000359B 00000000            <2> result dd 0
  4466                              <1> %include 'source/programs/_variables.asm' ;% and $
  4467 0000359F FF2C2500            <2> db 255,44,"%",0
  4468                              <2> 	ans:
  4469 000035A3 BE[26D40000]        <2> 		mov esi, buf2
  4470 000035A8 E887FFFFFF          <2> 		call chkadd
  4471 000035AD C3                  <2> 		ret
  4472                              <2> 		
  4473 000035AE FF2C2400            <2> db 255,44,"$",0
  4474 000035B2 8B35[1D2E0000]      <2> var: mov esi, [currentcommandloc]
  4475 000035B8 BB[26BC0000]        <2> 	mov ebx, variables
  4476 000035BD 8A06                <2> lkeq:	mov al, [esi]
  4477 000035BF 3C3D                <2> 	cmp al, '='
  4478 000035C1 741B                <2> 	je eqfnd	;is there an '=' sign?
  4479 000035C3 3C00                <2> 	cmp al, 0
  4480 000035C5 7403                <2> 	je echovars
  4481 000035C7 46                  <2> 	inc esi
  4482 000035C8 EBF3                <2> 	jmp lkeq
  4483 000035CA BE[26BC0000]        <2> echovars: mov esi, variables
  4484 000035CF BB[26CC0000]        <2> 	mov ebx, varend
  4485 000035D4 B105                <2> 	mov cl, 5
  4486 000035D6 B504                <2> 	mov ch, 4
  4487 000035D8 E89EF8FFFF          <2> 	call array
  4488 000035DD C3                  <2> 	ret
  4489 000035DE 46                  <2> eqfnd:	inc esi
  4490 000035DF 8A06                <2> 	mov al, [esi]
  4491 000035E1 3C00                <2> 	cmp al, 0
  4492 000035E3 7410                <2> 	je readvar
  4493 000035E5 8B35[1D2E0000]      <2> 	mov esi, [currentcommandloc]
  4494 000035EB BB[26BC0000]        <2> 	mov ebx, variables
  4495 000035F0 E919000000          <2> 	jmp seek
  4496                              <2> readvar:
  4497 000035F5 B00A                <2> 	mov al, 10
  4498 000035F7 66BB0700            <2> 	mov bx, 7
  4499 000035FB C605[11220000]00    <2> 	mov byte [commandedit], 0
  4500 00003602 BF[26D40000]        <2> 	mov edi, buftxtend
  4501 00003607 E833E8FFFF          <2> 	call rdprint
  4502 0000360C EBA4                <2> 	jmp var
  4503 0000360E 668B03              <2> seek:	mov ax, [ebx]
  4504 00003611 B105                <2> 	mov cl, 5
  4505 00003613 B504                <2> 	mov ch, 4
  4506 00003615 663D0000            <2> 	cmp ax, 0
  4507 00003619 0F845B000000        <2> 	je near save
  4508 0000361F 6639C8              <2> 	cmp ax, cx
  4509 00003622 7403                <2> 	je skfnd
  4510 00003624 43                  <2> 	inc ebx
  4511 00003625 EBE7                <2> 	jmp seek
  4512 00003627 8B35[1D2E0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4513 0000362D 46                  <2> 	inc esi
  4514 0000362E 81C302000000        <2> 	add ebx, 2
  4515 00003634 89DF                <2> 	mov edi, ebx
  4516 00003636 B13D                <2> 	mov cl, '='
  4517 00003638 E81FF8FFFF          <2> 	call cndtest
  4518 0000363D 3C01                <2> 	cmp al, 1	
  4519 0000363F 7418                <2> 	je varfnd
  4520 00003641 89FB                <2> 	mov ebx, edi
  4521 00003643 8B35[1D2E0000]      <2> 	mov esi, [currentcommandloc]
  4522 00003649 668B03              <2> 	mov ax, [ebx]
  4523 0000364C 663D0000            <2> 	cmp ax, 0
  4524 00003650 0F8424000000        <2> 	je near save
  4525 00003656 43                  <2> 	inc ebx
  4526 00003657 EBB5                <2> 	jmp seek
  4527 00003659 8A03                <2> varfnd:	mov al, [ebx]
  4528 0000365B 3C04                <2> 	cmp al, 4
  4529 0000365D 7404                <2> 	je save2
  4530 0000365F 4B                  <2> 	dec ebx
  4531 00003660 4E                  <2> 	dec esi
  4532 00003661 EBF6                <2> 	jmp varfnd
  4533 00003663 4B                  <2> save2:	dec ebx
  4534 00003664 4E                  <2> 	dec esi
  4535 00003665 8A03                <2> 	mov al, [ebx]
  4536 00003667 3C05                <2> 	cmp al, 5
  4537 00003669 7402                <2> 	je remove
  4538 0000366B EBEC                <2> 	jmp varfnd
  4539 0000366D 8A03                <2> remove: mov al, [ebx]
  4540 0000366F 3C00                <2> 	cmp al, 0
  4541 00003671 749B                <2> 	je seek
  4542 00003673 30C0                <2> 	xor al, al
  4543 00003675 8803                <2> 	mov [ebx], al
  4544 00003677 43                  <2> 	inc ebx
  4545 00003678 EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4546 0000367A 8B35[1D2E0000]      <2> save:	mov esi, [currentcommandloc]
  4547 00003680 43                  <2> 	inc ebx
  4548 00003681 B005                <2> 	mov al, 5
  4549 00003683 B404                <2> 	mov ah, 4
  4550 00003685 668903              <2> 	mov [ebx], ax
  4551 00003688 43                  <2> 	inc ebx
  4552 00003689 43                  <2> svhere:	inc ebx
  4553 0000368A 46                  <2> 	inc esi
  4554 0000368B 8A06                <2> 	mov al, [esi]
  4555 0000368D 3C00                <2> 	cmp al, 0
  4556 0000368F 0F844A000000        <2> 	je near svdone
  4557 00003695 3C25                <2> 	cmp al, '%'
  4558 00003697 7404                <2> 	je ans2
  4559 00003699 8803                <2> 	mov [ebx], al	
  4560 0000369B EBEC                <2> 	jmp svhere
  4561 0000369D 56                  <2> ans2:	push esi
  4562 0000369E BE[26D40000]        <2> 	mov esi, buf2
  4563 000036A3 E823000000          <2> 	call ansfnd
  4564 000036A8 E803000000          <2> 	call anscp
  4565 000036AD 5E                  <2> 	pop esi
  4566 000036AE EBD9                <2> 	jmp svhere
  4567 000036B0 8A06                <2> anscp:	mov al, [esi]
  4568 000036B2 8803                <2> 	mov [ebx], al
  4569 000036B4 81FE[3AD40000]      <2> 	cmp esi, numbuf
  4570 000036BA 74CD                <2> 	je svhere
  4571 000036BC 3C00                <2> 	cmp al, 0
  4572 000036BE 74C9                <2> 	je svhere
  4573 000036C0 43                  <2> 	inc ebx
  4574 000036C1 46                  <2> 	inc esi
  4575 000036C2 EBEC                <2> 	jmp anscp
  4576 000036C4 5E                  <2> ansnf:	pop esi
  4577 000036C5 8A06                <2> 	mov al, [esi]
  4578 000036C7 8803                <2> 	mov [ebx], al
  4579 000036C9 EBBE                <2> 	jmp svhere
  4580 000036CB 46                  <2> ansfnd:	inc esi
  4581 000036CC 81FE[39D40000]      <2> 	cmp esi, numbuf - 1
  4582 000036D2 740A                <2> 	je fndans
  4583 000036D4 8A06                <2> 	mov al, [esi]
  4584 000036D6 3C00                <2> 	cmp al, 0
  4585 000036D8 74EA                <2> 	je ansnf
  4586 000036DA 3C30                <2> 	cmp al, '0'
  4587 000036DC 74ED                <2> 	je ansfnd
  4588                              <2> fndans:
  4589 000036DE C3                  <2> 	ret
  4590 000036DF 30C0                <2> svdone:	xor al, al
  4591 000036E1 8803                <2> 	mov [ebx], al
  4592 000036E3 C3                  <2> 	ret
  4593                              <1> %include 'source/programs/_run.asm' ;./
  4594                              <2> 
  4595 000036E4 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4596 000036E8 FF2C2E2F00          <2> 	db 255,44,"./",0
  4597                              <2> rundiskprog:
  4598 000036ED 8B3D[1D2E0000]      <2> 	mov edi, [currentcommandloc]
  4599 000036F3 81C702000000        <2> 	add edi, 2
  4600 000036F9 BE00004000          <2> 	mov esi, 0x400000
  4601 000036FE E8712E0000          <2> 	call loadfile
  4602 00003703 81FA94010000        <2> 	cmp edx, 404
  4603 00003709 746A                <2> 	je noprogfound
  4604 0000370B BB00004000          <2> 	mov ebx, 0x400000
  4605 00003710 A1[E4360000]        <2> 	mov eax, [elfstart]
  4606 00003715 3903                <2> 	cmp [ebx], eax
  4607 00003717 0F8437000000        <2> 	je near runelf
  4608 0000371D 66813B4558          <2> 	cmp word [ebx], "EX"
  4609 00003722 7577                <2> 	jne progbatchfound
  4610 00003724 81C302000000        <2> 	add ebx, 2
  4611 0000372A 8B3D[1D2E0000]      <2> 	mov edi, [currentcommandloc]
  4612 00003730 81C702000000        <2> 	add edi, 2
  4613                              <2> findspaceprog:
  4614 00003736 8A07                <2> 	mov al, [edi]
  4615 00003738 47                  <2> 	inc edi
  4616 00003739 3C20                <2> 	cmp al, " "
  4617 0000373B 75F9                <2> 	jne findspaceprog
  4618                              <2> findnonspaceprog:
  4619 0000373D 8A07                <2> 	mov al, [edi]
  4620 0000373F 47                  <2> 	inc edi
  4621 00003740 3C20                <2> 	cmp al, " "
  4622 00003742 74F9                <2> 	je findnonspaceprog
  4623 00003744 4F                  <2> 	dec edi
  4624 00003745 8925[A6B90000]      <2> 	mov [previousstack], esp
  4625 0000374B FFD3                <2> 	call ebx
  4626 0000374D 8B25[A6B90000]      <2> 	mov esp, [previousstack]
  4627 00003753 C3                  <2> 	ret
  4628                              <2> runelf:
  4629 00003754 8B3D[1D2E0000]      <2> 	mov edi, [currentcommandloc]
  4630 0000375A 81C702000000        <2> 	add edi, 2
  4631 00003760 81C380000000        <2> 	add ebx, 0x80
  4632 00003766 8925[A6B90000]      <2> 	mov [previousstack], esp
  4633 0000376C FFD3                <2> 	call ebx
  4634 0000376E 8B25[A6B90000]      <2> 	mov esp, [previousstack]
  4635 00003774 C3                  <2> 	ret
  4636                              <2> noprogfound:
  4637 00003775 BE[25910000]        <2> 	mov esi, notfound1
  4638 0000377A E8DBE5FFFF          <2> 	call print
  4639 0000377F 8B35[1D2E0000]      <2> 	mov esi, [currentcommandloc]
  4640 00003785 81C602000000        <2> 	add esi, 2
  4641 0000378B E8CAE5FFFF          <2> 	call print
  4642 00003790 BE[2D910000]        <2> 	mov esi, notfound2
  4643 00003795 E8C0E5FFFF          <2> 	call print
  4644 0000379A C3                  <2> 	ret
  4645                              <2> progbatchfound:
  4646 0000379B BF00004000          <2> 		mov edi, 0x400000
  4647 000037A0 C605[20BC0000]01    <2> 		mov byte [BATCHISON], 1
  4648                              <2> 	batchrunloop:
  4649 000037A7 E89BF3FFFF          <2> 		call buftxtclear
  4650 000037AC BE[26D00000]        <2> 		mov esi, buftxt
  4651 000037B1 8935[1D2E0000]      <2> 		mov [currentcommandloc], esi
  4652                              <2> 	batchrunloop2:
  4653 000037B7 B10A                <2> 		mov cl, 10
  4654 000037B9 B50D                <2> 		mov ch, 13
  4655 000037BB 380F                <2> 		cmp [edi], cl
  4656 000037BD 0F8419000000        <2> 		je near nxtbatchrunline
  4657 000037C3 382F                <2> 		cmp [edi], ch
  4658 000037C5 0F8411000000        <2> 		je near nxtbatchrunline
  4659 000037CB 803F00              <2> 		cmp byte [edi], 0
  4660 000037CE 0F8408000000        <2> 		je near nxtbatchrunline
  4661 000037D4 8A07                <2> 		mov al, [edi]
  4662 000037D6 8806                <2> 		mov [esi], al
  4663 000037D8 46                  <2> 		inc esi
  4664 000037D9 47                  <2> 		inc edi
  4665 000037DA EBDB                <2> 		jmp batchrunloop2
  4666                              <2> 	nxtbatchrunline:
  4667 000037DC 47                  <2> 		inc edi
  4668 000037DD 380F                <2> 		cmp [edi], cl
  4669 000037DF 74FB                <2> 		je nxtbatchrunline
  4670 000037E1 382F                <2> 		cmp [edi], ch
  4671 000037E3 74F7                <2> 		je nxtbatchrunline
  4672 000037E5 893D[43380000]      <2> 		mov [batchedi], edi
  4673 000037EB 893D[1CBC0000]      <2> 		mov [BATCHPOS], edi
  4674 000037F1 C60600              <2> 		mov byte [esi], 0
  4675 000037F4 BE[26D00000]        <2> 		mov esi, buftxt
  4676 000037F9 803E00              <2> 		cmp byte [esi], 0
  4677 000037FC 0F8439000000        <2> 		je near nobatchfoundrun
  4678 00003802 31DB                <2> 		xor ebx, ebx
  4679 00003804 8A1D[B7BB0000]      <2> 		mov bl, [IFON]
  4680 0000380A 80FB00              <2> 		cmp bl, 0
  4681 0000380D 0F8534000000        <2> 		jne near iftestbatch
  4682                              <2> 	doneiftest:
  4683 00003813 803D[19390000]00    <2> 		cmp byte [runnextline], 0
  4684 0000381A 0F8405000000        <2> 		je near noruniftest
  4685 00003820 E822F5FFFF          <2> 		call run
  4686                              <2> 	noruniftest:
  4687 00003825 C605[19390000]01    <2> 		mov byte [runnextline], 1
  4688 0000382C 8B3D[43380000]      <2> 		mov edi, [batchedi]
  4689 00003832 803F00              <2> 		cmp byte [edi], 0
  4690 00003835 0F856CFFFFFF        <2> 		jne near batchrunloop
  4691                              <2> 	nobatchfoundrun:
  4692 0000383B C605[20BC0000]00    <2> 		mov byte [BATCHISON], 0
  4693 00003842 C3                  <2> 		ret
  4694                              <2> 	
  4695 00003843 00000000            <2> batchedi dd 0	
  4696                              <2> 	
  4697                              <2> 	iftestbatch:
  4698 00003847 BE[B8BB0000]        <2> 		mov esi, IFTRUE
  4699 0000384C 01DE                <2> 		add esi, ebx
  4700 0000384E 803E00              <2> 		cmp byte [esi], 0
  4701 00003851 0F85BCFFFFFF        <2> 		jne near doneiftest
  4702 00003857 881D[1A390000]      <2> 		mov [iffalsebuf], bl
  4703 0000385D 803D[21BC0000]01    <2> 		cmp byte [LOOPON], 1
  4704 00003864 0F8513000000        <2> 		jne near fifindbatch
  4705 0000386A E938FFFFFF          <2> 		jmp batchrunloop
  4706                              <2> 	elsetestbatch:
  4707 0000386F C60601              <2> 		mov byte [esi], 1
  4708 00003872 81C705000000        <2> 		add edi, 5
  4709 00003878 E92AFFFFFF          <2> 		jmp batchrunloop
  4710                              <2> 	fifindbatch:
  4711 0000387D 66B96966            <2> 		mov cx, "if"
  4712 00003881 66B86669            <2> 		mov ax, "fi"
  4713 00003885 663907              <2> 		cmp [edi], ax
  4714 00003888 0F8424000000        <2> 		je near fifoundbatch
  4715 0000388E 66390F              <2> 		cmp [edi], cx
  4716 00003891 0F8465000000        <2> 		je near iffoundbatch
  4717 00003897 803F00              <2> 		cmp byte [edi], 0
  4718 0000389A 0F8412000000        <2> 		je near fifoundbatch
  4719 000038A0 B8656C7365          <2> 		mov eax, "else"
  4720 000038A5 3907                <2> 		cmp [edi], eax
  4721 000038A7 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4722 000038AD E973FFFFFF          <2> 		jmp noruniftest
  4723                              <2> 	fifoundbatch:
  4724 000038B2 81C702000000        <2> 		add edi, 2
  4725 000038B8 B00A                <2> 		mov al, 10
  4726 000038BA 3807                <2> 		cmp [edi], al
  4727 000038BC 0F840B000000        <2> 		je near goodfibatch
  4728 000038C2 803F00              <2> 		cmp byte [edi], 0
  4729 000038C5 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4730 000038CB EBB0                <2> 		jmp fifindbatch
  4731                              <2> 	goodfibatch:
  4732 000038CD B001                <2> 		mov al, 1
  4733 000038CF 2805[B7BB0000]      <2> 		sub [IFON], al 
  4734 000038D5 A0[B7BB0000]        <2> 		mov al, [IFON]
  4735 000038DA 8A1D[1A390000]      <2> 		mov bl, [iffalsebuf]
  4736 000038E0 38D8                <2> 		cmp al, bl
  4737 000038E2 7799                <2> 		ja fifindbatch
  4738 000038E4 8B35[1D2E0000]      <2> 		mov esi, [currentcommandloc]
  4739 000038EA 81EF02000000        <2> 		sub edi, 2
  4740 000038F0 C605[19390000]00    <2> 		mov byte [runnextline], 0
  4741 000038F7 E9ABFEFFFF          <2> 		jmp batchrunloop
  4742                              <2> 	iffoundbatch:
  4743 000038FC B020                <2> 		mov al, ' '
  4744 000038FE 81C702000000        <2> 		add edi, 2
  4745 00003904 3807                <2> 		cmp [edi], al
  4746 00003906 0F8571FFFFFF        <2> 		jne near fifindbatch
  4747 0000390C B001                <2> 		mov al, 1
  4748 0000390E 0005[B7BB0000]      <2> 		add [IFON], al
  4749 00003914 E964FFFFFF          <2> 		jmp fifindbatch
  4750                              <2> 		
  4751                              <2> 		
  4752 00003919 01                  <2> runnextline db 1
  4753 0000391A 00                  <2> iffalsebuf db 0
  4754                              <2> 
  4755 0000391B C3                  <2> notbatch: ret 
  4756                              <1> %ifdef network.included
  4757                              <1> 	%include 'source/programs/arp.asm'
  4758 0000391C FF2C61727000        <2> db 255,44,"arp",0
  4759                              <2> 	;ARP TESTING
  4760                              <2> arptest:
  4761 00003922 8B35[1D2E0000]      <2> 	mov esi, [currentcommandloc]
  4762 00003928 81C604000000        <2> 	add esi, 4
  4763 0000392E E8F7560000          <2> 	call strtoip
  4764 00003933 890D[DA390000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4765 00003939 E832570000          <2> 	call showip
  4766 0000393E 803D[DE390000]01    <2> 	cmp byte [arpconfig], 1
  4767 00003945 7405                <2> 	je arptest2
  4768 00003947 E841000000          <2> 	call arpinit
  4769                              <2> arptest2:	;try to reach 192.168.0.1
  4770 0000394C 8B0D[17910000]      <2> 	mov ecx, [sysmac]
  4771 00003952 668B1D[1B910000]    <2> 	mov bx, [sysmac + 4]
  4772 00003959 890D[BA390000]      <2> 	mov [sourcemac], ecx
  4773 0000395F 66891D[BE390000]    <2> 	mov [sourcemac + 4],bx
  4774 00003966 890D[CA390000]      <2> 	mov [arpsenderinfo], ecx
  4775 0000396C 66891D[CE390000]    <2> 	mov [arpsenderinfo + 4], bx
  4776 00003973 BF[B4390000]        <2> 	mov edi, frame
  4777 00003978 BE[DE390000]        <2> 	mov esi, framend
  4778 0000397D E85F560000          <2> 	call sendpacket
  4779 00003982 BE[5E910000]        <2> 	mov esi, line
  4780 00003987 E8CEE3FFFF          <2> 	call print
  4781 0000398C C3                  <2> 	ret
  4782                              <2> 	
  4783                              <2> arpinit:
  4784 0000398D BE[DF390000]        <2> 	mov esi, arptable
  4785 00003992 BF[17910000]        <2> 	mov edi, sysmac
  4786 00003997 BB[13910000]        <2> 	mov ebx, sysip
  4787 0000399C 8B0F                <2> 	mov ecx, [edi]
  4788 0000399E 890E                <2> 	mov [esi], ecx
  4789 000039A0 668B4F04            <2> 	mov cx, [edi + 4]
  4790 000039A4 894E04              <2> 	mov [esi + 4], ecx
  4791 000039A7 8B0B                <2> 	mov ecx, [ebx]
  4792 000039A9 894E06              <2> 	mov [esi + 6], ecx
  4793 000039AC C605[DE390000]01    <2> 	mov byte [arpconfig], 1
  4794 000039B3 C3                  <2> 	ret
  4795                              <2> 	
  4796                              <2> ;example frame
  4797                              <2> frame:
  4798 000039B4 FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4799 000039BA 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4800 000039C0 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4801                              <2> 	;;example packet
  4802 000039C2 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4803 000039C4 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4804 000039C6 0604                <2> 					db 6,4			;length of mac, length of ip
  4805 000039C8 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4806 000039CA 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4807 000039D0 C0A80073            <2> 					db 192,168,0,115		;ip
  4808 000039D4 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4809 000039DA C0A80000            <2> 					db 192,168,0,0			;ip
  4810                              <2> framend:
  4811                              <2> 
  4812 000039DE 00                  <2> arpconfig db 0
  4813                              <2> arptable:	;;mac,ip
  4814 000039DF 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4815 000039E8 00<rept>            <2>
  4816                              <2> arptableend:	
  4817                              <1> %endif
  4818                              <1> %include 'source/programs/batch.asm'
  4819 00003A43 FF2C626174636800    <2> db 255,44,"batch",0
  4820                              <2> 	batchst: 
  4821 00003A4B 8B3D[1D2E0000]      <2> 		mov edi, [currentcommandloc]
  4822 00003A51 81C706000000        <2> 		add edi, 6
  4823 00003A57 803F00              <2> 		cmp byte [edi], 0
  4824 00003A5A 0F846D000000        <2> 		je near nonamefound
  4825 00003A60 BE00004000          <2> 		mov esi, 0x400000
  4826 00003A65 E80A2B0000          <2> 		call loadfile
  4827 00003A6A 89D0                <2> 		mov eax, edx
  4828 00003A6C 3D94010000          <2> 		cmp eax, 404
  4829 00003A71 7465                <2> 		je goodbatchname
  4830 00003A73 BE[7E3A0000]        <2> 		mov esi, badbatchname
  4831 00003A78 E8DDE2FFFF          <2> 		call print
  4832 00003A7D C3                  <2> 		ret
  4833 00003A7E 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4834 00003A87 20616C726561647920- <2>
  4835 00003A90 657869737473210A00  <2>
  4836 00003A99 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4837 00003AA2 746F20747970652061- <2>
  4838 00003AAB 206E616D6520616674- <2>
  4839 00003AB4 65722074686520636F- <2>
  4840 00003ABD 6D6D616E642E0A00    <2>
  4841 00003AC5 00000000            <2> 		esicache3 dd 0
  4842 00003AC9 00000000            <2> 		esicache2 dd 0
  4843                              <2> 	nonamefound:
  4844 00003ACD BE[993A0000]        <2> 		mov esi, namenotfoundbatch
  4845 00003AD2 E883E2FFFF          <2> 		call print
  4846 00003AD7 C3                  <2> 		ret
  4847                              <2> 	goodbatchname:
  4848 00003AD8 BE00004000          <2> 		mov esi, 0x400000
  4849                              <2> 	batchcreate:
  4850 00003ADD 8935[C53A0000]      <2> 		mov [esicache3], esi
  4851 00003AE3 BF00008000          <2> 		mov edi, 0x800000
  4852 00003AE8 B00A                <2> 		mov al, 10
  4853 00003AEA B307                <2> 		mov bl, 7
  4854 00003AEC B404                <2> 		mov ah, 4
  4855 00003AEE CD30                <2> 		int 30h
  4856 00003AF0 8935[C93A0000]      <2> 		mov [esicache2], esi
  4857 00003AF6 8A0E                <2> 		mov cl, [esi]
  4858 00003AF8 8B35[C53A0000]      <2> 		mov esi, [esicache3]
  4859 00003AFE BB[323B0000]        <2> 		mov ebx, exitword
  4860 00003B03 E854F3FFFF          <2> 		call cndtest
  4861 00003B08 3C01                <2> 		cmp al, 1
  4862 00003B0A 7411                <2> 		je endbatchcreate
  4863 00003B0C 3C02                <2> 		cmp al, 2
  4864 00003B0E 740D                <2> 		je endbatchcreate
  4865 00003B10 8B35[C93A0000]      <2> 		mov esi, [esicache2]
  4866 00003B16 B00A                <2> 		mov al, 10
  4867 00003B18 8806                <2> 		mov [esi], al
  4868 00003B1A 46                  <2> 		inc esi
  4869 00003B1B EBC0                <2> 		jmp batchcreate
  4870                              <2> 	endbatchcreate:
  4871 00003B1D 8B35[C53A0000]      <2> 		mov esi, [esicache3]
  4872 00003B23 31C0                <2> 		xor eax, eax
  4873 00003B25 8806                <2> 		mov [esi], al
  4874 00003B27 BE00004000          <2> 		mov esi, 0x400000
  4875 00003B2C E829E2FFFF          <2> 		call print
  4876 00003B31 C3                  <2> 		ret
  4877                              <2> 	
  4878 00003B32 5C7800              <2> 	exitword db "\x",0
  4879 00003B35 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4880 00003B3E 6F20657869742E0A00  <2>
  4881                              <1> %ifdef gui.background
  4882                              <1> 	%include 'source/programs/background.asm'
  4883                              <1> %endif
  4884                              <1> %include 'source/programs/beep.asm'
  4885 00003B47 FF2C6265657000      <2> 	db 255,44,"beep",0
  4886                              <2> beep:
  4887 00003B4E B8[733B0000]        <2> 	mov eax, beepstart
  4888 00003B53 A3[68020000]        <2> 	mov [soundpos], eax
  4889 00003B58 B8[773B0000]        <2> 	mov eax, beepend
  4890 00003B5D A3[6C020000]        <2> 	mov [soundendpos], eax
  4891 00003B62 C605[65020000]01    <2> 	mov byte [soundon], 1
  4892                              <2> waitforsoundendbeep:
  4893 00003B69 A0[65020000]        <2> 	mov al, [soundon]
  4894 00003B6E 3C00                <2> 	cmp al, 0
  4895 00003B70 75F7                <2> 	jne waitforsoundendbeep
  4896 00003B72 C3                  <2> 	ret
  4897                              <2> 	
  4898                              <2> beepstart:
  4899 00003B73 3200D111            <2> 	dw 50, 4561
  4900                              <2> beepend:
  4901                              <1> %include 'source/programs/cd.asm'
  4902 00003B77 FF2C636400          <2> db 255,44,"cd",0
  4903                              <2> cd:
  4904 00003B7C 8B35[1D2E0000]      <2> 	mov esi, [currentcommandloc]
  4905 00003B82 81C603000000        <2> 	add esi, 3
  4906 00003B88 8B3D[AEB90000]      <2> 	mov edi, [currentfolderloc]
  4907 00003B8E 893D[AAB90000]      <2> 	mov [lastfolderloc], edi
  4908 00003B94 81C7[B2B90000]      <2> 	add edi, currentfolder
  4909 00003B9A 4F                  <2> 	dec edi
  4910 00003B9B 66813E2E2E          <2> 	cmp word [esi], ".."
  4911 00003BA0 742A                <2> 	je .moveup
  4912 00003BA2 47                  <2> 	inc edi
  4913                              <2> .movedown:
  4914 00003BA3 8A06                <2> 	mov al, [esi]
  4915 00003BA5 8807                <2> 	mov [edi], al
  4916 00003BA7 47                  <2> 	inc edi
  4917 00003BA8 46                  <2> 	inc esi
  4918 00003BA9 3C00                <2> 	cmp al, 0
  4919 00003BAB 740A                <2> 	je .donecd
  4920 00003BAD 81FF[B2BB0000]      <2> 	cmp edi, currentfolderend
  4921 00003BB3 72EE                <2> 	jb .movedown
  4922 00003BB5 30C0                <2> 	xor al, al
  4923                              <2> .donecd:
  4924 00003BB7 4F                  <2> 	dec edi
  4925 00003BB8 C6072F              <2> 	mov byte [edi], '/'
  4926 00003BBB 47                  <2> 	inc edi
  4927 00003BBC C60700              <2> 	mov byte [edi], 0
  4928 00003BBF 81EF[B2B90000]      <2> 	sub edi, currentfolder
  4929 00003BC5 893D[AEB90000]      <2> 	mov [currentfolderloc], edi
  4930 00003BCB C3                  <2> 	ret
  4931                              <2> .moveup:
  4932 00003BCC 31C0                <2> 	xor eax, eax
  4933 00003BCE A3[AAB90000]        <2> 	mov [lastfolderloc], eax
  4934                              <2> .moveuploop:
  4935 00003BD3 4F                  <2> 	dec edi
  4936 00003BD4 8A07                <2> 	mov al, [edi]
  4937 00003BD6 81FF[B2B90000]      <2> 	cmp edi, currentfolder
  4938 00003BDC 763B                <2> 	jbe .moveupover
  4939 00003BDE 3C2F                <2> 	cmp al, '/'
  4940 00003BE0 75F1                <2> 	jne .moveuploop
  4941 00003BE2 C6072F              <2> 	mov byte [edi], '/'
  4942 00003BE5 47                  <2> 	inc edi
  4943 00003BE6 C60700              <2> 	mov byte [edi], 0
  4944 00003BE9 81EF[B2B90000]      <2> 	sub edi, currentfolder
  4945 00003BEF 893D[AEB90000]      <2> 	mov [currentfolderloc], edi
  4946 00003BF5 81C7[B2B90000]      <2> 	add edi, currentfolder
  4947 00003BFB 4F                  <2> 	dec edi
  4948                              <2> .lastfolder:
  4949 00003BFC 4F                  <2> 	dec edi
  4950 00003BFD 8A07                <2> 	mov al, [edi]
  4951 00003BFF 81FF[B2B90000]      <2> 	cmp edi, currentfolder
  4952 00003C05 7604                <2> 	jbe .donemoveup
  4953 00003C07 3C2F                <2> 	cmp al, '/'
  4954 00003C09 75F1                <2> 	jne .lastfolder
  4955                              <2> .donemoveup:
  4956 00003C0B 47                  <2> 	inc edi
  4957 00003C0C 81EF[B2B90000]      <2> 	sub edi, currentfolder
  4958 00003C12 893D[AAB90000]      <2> 	mov [lastfolderloc], edi
  4959 00003C18 C3                  <2> 	ret
  4960                              <2> .moveupover:
  4961 00003C19 BF[B2B90000]        <2> 	mov edi, currentfolder
  4962 00003C1E C6072F              <2> 	mov byte [edi], '/'
  4963 00003C21 47                  <2> 	inc edi
  4964 00003C22 C60700              <2> 	mov byte [edi], 0
  4965 00003C25 31C0                <2> 	xor eax, eax
  4966 00003C27 A3[AAB90000]        <2> 	mov [lastfolderloc], eax
  4967 00003C2C 40                  <2> 	inc eax
  4968 00003C2D A3[AEB90000]        <2> 	mov [currentfolderloc], eax
  4969 00003C32 C3                  <2> 	ret
  4970                              <1> %include 'source/programs/charmap.asm'
  4971 00003C33 FF2C636861726D6170- <2> db 255,44,"charmap",0
  4972 00003C3C 00                  <2>
  4973 00003C3D 66BB0700            <2> 	mov bx, 7
  4974 00003C41 B020                <2> 	mov al, " "
  4975 00003C43 E856E6FFFF          <2> 	call prcharq
  4976 00003C48 E851E6FFFF          <2> 	call prcharq
  4977 00003C4D E84CE6FFFF          <2> 	call prcharq
  4978 00003C52 E847E6FFFF          <2> 	call prcharq
  4979 00003C57 B030                <2> 	mov al, "0"
  4980                              <2> charmapnumprnt:
  4981 00003C59 E840E6FFFF          <2> 	call prcharq
  4982 00003C5E FEC0                <2> 	inc al
  4983 00003C60 6650                <2> 	push ax
  4984 00003C62 B020                <2> 	mov al, " "
  4985 00003C64 E835E6FFFF          <2> 	call prcharq
  4986 00003C69 6658                <2> 	pop ax
  4987 00003C6B 3C39                <2> 	cmp al, "9"
  4988 00003C6D 76EA                <2> 	jbe charmapnumprnt
  4989 00003C6F B041                <2> 	mov al, "A"
  4990                              <2> charmapnumprnt2:
  4991 00003C71 E828E6FFFF          <2> 	call prcharq
  4992 00003C76 FEC0                <2> 	inc al
  4993 00003C78 6650                <2> 	push ax
  4994 00003C7A B020                <2> 	mov al, " "
  4995 00003C7C E81DE6FFFF          <2> 	call prcharq
  4996 00003C81 6658                <2> 	pop ax
  4997 00003C83 3C47                <2> 	cmp al, "G"
  4998 00003C85 72EA                <2> 	jb charmapnumprnt2
  4999                              <2> 	
  5000 00003C87 BE[5E910000]        <2> 	mov esi, line
  5001 00003C8C E8B7E0FFFF          <2> 	call printquiet
  5002 00003C91 6631C0              <2> 	xor ax, ax
  5003 00003C94 88C1                <2> 	mov cl, al
  5004 00003C96 E895F3FFFF          <2> 	call showhexsmall
  5005 00003C9B E955000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5006                              <2> charmapcopy:
  5007 00003CA0 FEC0                <2> 	inc al
  5008 00003CA2 6650                <2> 	push ax
  5009 00003CA4 3C08                <2> 	cmp al, 8
  5010 00003CA6 744D                <2> 	je charmapnocopy
  5011 00003CA8 3C09                <2> 	cmp al, 9
  5012 00003CAA 7449                <2> 	je charmapnocopy
  5013 00003CAC 3C0A                <2> 	cmp al, 10
  5014 00003CAE 7445                <2> 	je charmapnocopy
  5015 00003CB0 3C0D                <2> 	cmp al, 13
  5016 00003CB2 7441                <2> 	je charmapnocopy
  5017 00003CB4 3CFF                <2> 	cmp al, 255
  5018 00003CB6 743D                <2> 	je charmapnocopy
  5019 00003CB8 3C00                <2> 	cmp al, 0
  5020 00003CBA 7434                <2> 	je nomorecharmap
  5021 00003CBC E8DDE5FFFF          <2> 	call prcharq
  5022 00003CC1 B020                <2> 	mov al, " "
  5023 00003CC3 E8D6E5FFFF          <2> 	call prcharq
  5024 00003CC8 6658                <2> 	pop ax
  5025                              <2> charmapcopycheck:
  5026 00003CCA FEC4                <2> 	inc ah
  5027 00003CCC 80FC10              <2> 	cmp ah, 16
  5028 00003CCF 72CF                <2> 	jb charmapcopy
  5029 00003CD1 6650                <2> 	push ax
  5030 00003CD3 BE[5E910000]        <2> 	mov esi, line
  5031 00003CD8 E86BE0FFFF          <2> 	call printquiet
  5032 00003CDD 6658                <2> 	pop ax
  5033 00003CDF 3CFF                <2> 	cmp al, 255
  5034 00003CE1 740D                <2> 	je nomorecharmap
  5035 00003CE3 88C1                <2> 	mov cl, al
  5036 00003CE5 FEC1                <2> 	inc cl
  5037 00003CE7 E844F3FFFF          <2> 	call showhexsmall
  5038 00003CEC 30E4                <2> 	xor ah, ah
  5039 00003CEE EBB0                <2> 	jmp charmapcopy
  5040                              <2> nomorecharmap:
  5041 00003CF0 E975EEFFFF          <2> 	jmp nwcmd
  5042                              <2> charmapnocopy:
  5043 00003CF5 6650                <2> 	push ax
  5044 00003CF7 B020                <2> 	mov al, " "
  5045 00003CF9 E8A0E5FFFF          <2> 	call prcharq
  5046 00003CFE E89BE5FFFF          <2> 	call prcharq
  5047 00003D03 6658                <2> 	pop ax
  5048 00003D05 EBC3                <2> 	jmp charmapcopycheck
  5049                              <1> %ifdef gui.included
  5050                              <1> 	%include 'source/programs/circle.asm'
  5051 00003D07 FF2C636972636C6500  <2> db 255,44,"circle",0
  5052                              <2> circle:
  5053 00003D10 8B35[1D2E0000]      <2> 	mov esi, [currentcommandloc]
  5054 00003D16 81C607000000        <2> 	add esi, 7
  5055 00003D1C 66B91000            <2> 	mov cx, 16
  5056 00003D20 30C0                <2> 	xor al, al
  5057 00003D22 3806                <2> 	cmp [esi], al
  5058 00003D24 7405                <2> 	je .nocmdline
  5059 00003D26 E8C5F4FFFF          <2> 	call cnvrttxt
  5060                              <2> .nocmdline:
  5061 00003D2B E833090000          <2> 	call linetester.stime
  5062 00003D30 E857000000          <2> 	call fcircle.nocmdline
  5063 00003D35 E841090000          <2> 	call linetester.etime
  5064 00003D3A 53                  <2> 	push ebx
  5065 00003D3B 57                  <2> 	push edi
  5066 00003D3C E8E7E4FFFF          <2> 	call getchar
  5067 00003D41 59                  <2> 	pop ecx
  5068 00003D42 E8C7F3FFFF          <2> 	call showdec
  5069 00003D47 BE[09470000]        <2> 	mov esi, linetester.msgcircle
  5070 00003D4C E8F7DFFFFF          <2> 	call printquiet
  5071 00003D51 59                  <2> 	pop ecx
  5072 00003D52 E8B7F3FFFF          <2> 	call showdec
  5073 00003D57 BE[20470000]        <2> 	mov esi, linetester.msgtime
  5074 00003D5C E8E7DFFFFF          <2> 	call printquiet
  5075 00003D61 E897300000          <2> 	call reloadallgraphics
  5076 00003D66 C3                  <2> 	ret
  5077                              <2> 	
  5078 00003D67 FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5079 00003D70 00                  <2>
  5080                              <2> fcircle:	
  5081 00003D71 8B35[1D2E0000]      <2> 	mov esi, [currentcommandloc]
  5082 00003D77 81C608000000        <2> 	add esi, 8
  5083 00003D7D 66B91000            <2> 	mov cx, 16
  5084 00003D81 30C0                <2> 	xor al, al
  5085 00003D83 3806                <2> 	cmp [esi], al
  5086 00003D85 7405                <2> 	je .nocmdline
  5087 00003D87 E864F4FFFF          <2> 	call cnvrttxt
  5088                              <2> .nocmdline:
  5089 00003D8C 6689C8              <2> 	mov ax, cx
  5090 00003D8F 66D1E1              <2> 	shl cx, 1
  5091 00003D92 6689CA              <2> 	mov dx, cx
  5092 00003D95 663B15[29570000]    <2> 	cmp dx, [resolutionx]
  5093 00003D9C 731B                <2> 	jae .done
  5094 00003D9E 663B0D[2B570000]    <2> 	cmp cx, [resolutiony]
  5095 00003DA5 7312                <2> 	jae .done
  5096 00003DA7 668B35[63020000]    <2> 	mov si, [timenanoseconds + 2]
  5097 00003DAE 31FF                <2> 	xor edi, edi
  5098 00003DB0 803D[5CA30000]01    <2> 	cmp byte [guion], 1
  5099 00003DB7 7401                <2> 	je .lp
  5100 00003DB9 C3                  <2> .done ret
  5101                              <2> .lp:
  5102 00003DBA 6629C2              <2> 	sub dx, ax
  5103 00003DBD 6629C1              <2> 	sub cx, ax
  5104 00003DC0 60                  <2> 	pusha
  5105 00003DC1 E8562B0000          <2> 	call fillcircle
  5106 00003DC6 61                  <2> 	popa
  5107 00003DC7 47                  <2> 	inc edi
  5108 00003DC8 660335[61020000]    <2> 	add si, [timenanoseconds]
  5109 00003DCF 6601C2              <2> 	add dx, ax
  5110 00003DD2 6601C2              <2> 	add dx, ax
  5111 00003DD5 6601C2              <2> 	add dx, ax
  5112 00003DD8 6601C1              <2> 	add cx, ax
  5113 00003DDB 663B15[29570000]    <2> 	cmp dx, [resolutionx]
  5114 00003DE2 72D6                <2> 	jb .lp
  5115 00003DE4 6689C2              <2> 	mov dx, ax
  5116 00003DE7 6601C2              <2> 	add dx, ax
  5117 00003DEA 6601C1              <2> 	add cx, ax
  5118 00003DED 6601C1              <2> 	add cx, ax
  5119 00003DF0 663B0D[2B570000]    <2> 	cmp cx, [resolutiony]
  5120 00003DF7 72C1                <2> 	jb .lp
  5121 00003DF9 C3                  <2> 	ret
  5122                              <1> %endif
  5123                              <1> %include 'source/programs/clear.asm'
  5124 00003DFA FF2C636C65617200    <2> db 255,44,"clear",0
  5125 00003E02 E8B9DFFFFF          <2> 		call clear
  5126 00003E07 C3                  <2> 		ret 
  5127                              <1> %include 'source/programs/cpuid.asm'
  5128 00003E08 FF2C637075696400    <2> db 255,44,"cpuid",0
  5129 00003E10 31C0                <2> 	xor eax, eax
  5130 00003E12 0FA2                <2> 	cpuid
  5131 00003E14 891D[653E0000]      <2> 	mov [cpuidbuf], ebx
  5132 00003E1A 8915[693E0000]      <2> 	mov [cpuidbuf + 4], edx
  5133 00003E20 890D[6D3E0000]      <2> 	mov [cpuidbuf + 8], ecx
  5134 00003E26 BE[653E0000]        <2> 	mov esi, cpuidbuf
  5135 00003E2B E82ADFFFFF          <2> 	call print
  5136 00003E30 BE[5E910000]        <2> 	mov esi, line
  5137 00003E35 E820DFFFFF          <2> 	call print
  5138 00003E3A B801000000          <2> 	mov eax, 1
  5139 00003E3F 0FA2                <2> 	cpuid
  5140 00003E41 89C1                <2> 	mov ecx, eax
  5141 00003E43 C605[2F300000]02    <2> 	mov byte [firsthexshown], 2
  5142 00003E4A E8F5F1FFFF          <2> 	call showhex
  5143 00003E4F B808000080          <2> 	mov eax, 0x80000008
  5144 00003E54 0FA2                <2> 	cpuid
  5145 00003E56 89C1                <2> 	mov ecx, eax
  5146 00003E58 C605[2F300000]02    <2> 	mov byte [firsthexshown], 2
  5147 00003E5F E8E0F1FFFF          <2> 	call showhex
  5148 00003E64 C3                  <2> 	ret
  5149                              <2> 	
  5150 00003E65 00<rept>            <2> cpuidbuf times 13 db 0
  5151                              <2> cpuidvendorend:
  5152                              <1> %ifdef network.included
  5153                              <1> 	%include 'source/programs/dhcp.asm'
  5154 00003E72 FF2C6468637000      <2> db 255,44,"dhcp",0
  5155                              <2> dhcp:
  5156 00003E79 BE[393F0000]        <2> 	mov esi, .dhcp.mac
  5157 00003E7E BB[19400000]        <2> 	mov ebx, .dhcp.option.mac
  5158 00003E83 BF[F93E0000]        <2> 	mov edi, .mac
  5159 00003E88 31C9                <2> 	xor ecx, ecx
  5160 00003E8A 66890D[0B3F0000]    <2> 	mov [.ip.checksum], cx
  5161 00003E91 66890D[1B3F0000]    <2> 	mov [.udp.checksum], cx
  5162 00003E98 8B0D[17910000]      <2> 	mov ecx, [sysmac]
  5163 00003E9E 890B                <2> 	mov [ebx], ecx
  5164 00003EA0 890F                <2> 	mov [edi], ecx
  5165 00003EA2 890E                <2> 	mov [esi], ecx
  5166 00003EA4 668B0D[1B910000]    <2> 	mov cx, [sysmac + 4]
  5167 00003EAB 66894B04            <2> 	mov [ebx + 4], cx
  5168 00003EAF 66894E04            <2> 	mov [esi + 4], cx
  5169 00003EB3 66894F04            <2> 	mov [edi + 4], cx
  5170 00003EB7 BF[013F0000]        <2> 	mov edi, .ip.header
  5171 00003EBC BE[153F0000]        <2> 	mov esi, .ip.headerend
  5172 00003EC1 E83C510000          <2> 	call getchecksum
  5173 00003EC6 66890D[0B3F0000]    <2> 	mov [.ip.checksum], cx
  5174 00003ECD BF[153F0000]        <2> 	mov edi, .udp.header
  5175 00003ED2 BE[30400000]        <2> 	mov esi, .udp.end
  5176 00003ED7 E826510000          <2> 	call getchecksum
  5177 00003EDC 66890D[1B3F0000]    <2> 	mov [.udp.checksum], cx
  5178 00003EE3 BF[F33E0000]        <2> 	mov edi, .frame
  5179 00003EE8 BE[30400000]        <2> 	mov esi, .udp.end
  5180 00003EED E8EF500000          <2> 	call sendpacket
  5181 00003EF2 C3                  <2> 	ret
  5182                              <2> .frame:
  5183 00003EF3 FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5184 00003EF9 000000000000        <2> 	.mac db 0,0,0,0,0,0
  5185 00003EFF 0800                <2> 	db 8,0
  5186                              <2> .ip.header:
  5187 00003F01 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  5188 00003F02 00                  <2> 	db 0
  5189 00003F03 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header)
  5190 00003F05 0000                <2> 	dw 0
  5191 00003F07 0000                <2> 	dw 0
  5192 00003F09 80                  <2> 	db 0x80
  5193 00003F0A 11                  <2> 	db 17
  5194 00003F0B 0000                <2> .ip.checksum dw 0
  5195 00003F0D 00000000            <2> 	db 0,0,0,0
  5196 00003F11 FFFFFFFF            <2> 	db 255,255,255,255	
  5197                              <2> .ip.headerend:
  5198                              <2> .udp.header:
  5199 00003F15 0044                <2> 	db 0,68	;source port
  5200 00003F17 0043                <2> 	db 0,67 ;destination port
  5201 00003F19 011B                <2> 	db (.udp.end - .udp.header)/256, (.udp.end - .udp.header)
  5202 00003F1B 0000                <2> .udp.checksum dw 0
  5203                              <2> .udp.headerend:
  5204                              <2> .dhcp.data:
  5205 00003F1D 01                  <2> 	db 1	;message type
  5206 00003F1E 01                  <2> 	db 1	;hardware type
  5207 00003F1F 06                  <2> 	db 6	;hardware address length
  5208 00003F20 00                  <2> 	db 0	;hops
  5209 00003F21 EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  5210 00003F25 0000                <2> 	db 0,0	;seconds elapsed
  5211 00003F27 0000                <2> 	db 0,0	;flags
  5212 00003F29 00000000            <2> 	db 0,0,0,0	;client ip address
  5213 00003F2D 00000000            <2> 	db 0,0,0,0	;your ip address
  5214 00003F31 00000000            <2> 	db 0,0,0,0	;server ip address
  5215 00003F35 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  5216 00003F39 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  5217 00003F3F 00<rept>            <2> 	times 10 db 0	;padding
  5218 00003F49 00<rept>            <2> 	times 64 db 0	;server host name
  5219 00003F89 00<rept>            <2> 	times 128 db 0	;boot file name
  5220 00004009 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  5221                              <2> .dhcp.option.type:
  5222 0000400D 350103              <2> 	db 53,1,3	;DHCP Request
  5223 00004010 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  5224 00004016 3D07                <2> 	db 61,7 ;client id(mac)
  5225 00004018 01                  <2> 	db 1	;Type=Ethernet
  5226 00004019 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  5227 0000401F 0C08                <2> 	db 12,8 ;host name
  5228 00004021 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  5229 00004029 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  5230 0000402F FF                  <2> 	db 0xFF	;end DHCP options
  5231                              <2> .dhcp.end:
  5232                              <2> .udp.end:
  5233                              <2> 	
  5234                              <1> %endif
  5235                              <1> %include 'source/programs/dos.asm'
  5236 00004030 FF2C646F7300        <2> db 255,44,"dos",0
  5237                              <2> dosrunner:
  5238 00004036 8925[A6B90000]      <2> 	mov [previousstack], esp
  5239 0000403C 8B3D[1D2E0000]      <2> 	mov edi, [currentcommandloc]
  5240 00004042 81C704000000        <2> 	add edi, 4
  5241 00004048 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5242 0000404D E822250000          <2> 	call loadfile
  5243 00004052 8B3D[1D2E0000]      <2> 	mov edi, [currentcommandloc]
  5244 00004058 81C704000000        <2> 	add edi, 4
  5245 0000405E 81FA94010000        <2> 	cmp edx, 404
  5246 00004064 0F845E000000        <2> 	je near .noprogfound
  5247 0000406A BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5248 0000406F 31C9                <2> 	xor ecx, ecx
  5249                              <2> .findparams:
  5250 00004071 47                  <2> 	inc edi
  5251 00004072 8A07                <2> 	mov al, [edi]
  5252 00004074 3C20                <2> 	cmp al, " "
  5253 00004076 75F9                <2> 	jne .findparams
  5254                              <2> .copyparams:
  5255 00004078 8A07                <2> 	mov al, [edi]
  5256 0000407A 8803                <2> 	mov [ebx], al
  5257 0000407C 43                  <2> 	inc ebx
  5258 0000407D 47                  <2> 	inc edi
  5259 0000407E 41                  <2> 	inc ecx
  5260 0000407F 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5261 00004085 7304                <2> 	jae .nomoreparams
  5262 00004087 3C00                <2> 	cmp al, 0
  5263 00004089 75ED                <2> 	jne .copyparams
  5264                              <2> .nomoreparams:
  5265 0000408B 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5266 00004091 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5267 00004095 8ED8                <2> 	mov ds, ax
  5268 00004097 8EC0                <2> 	mov es, ax
  5269 00004099 8EE0                <2> 	mov fs, ax
  5270 0000409B 8EE8                <2> 	mov gs, ax
  5271 0000409D 31C0                <2> 	xor eax, eax
  5272 0000409F 31DB                <2> 	xor ebx, ebx
  5273 000040A1 31C9                <2> 	xor ecx, ecx
  5274 000040A3 31D2                <2> 	xor edx, edx
  5275 000040A5 31FF                <2> 	xor edi, edi
  5276 000040A7 31F6                <2> 	xor esi, esi
  5277 000040A9 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5278 000040B0 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5279 000040B4 6689DA              <2> 	mov dx, bx
  5280 000040B7 8EC3                <2> 	mov es, bx
  5281 000040B9 8EE3                <2> 	mov fs, bx
  5282 000040BB 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5283 000040BF 8EEB                <2> 	mov gs, bx
  5284 000040C1 8B25[A6B90000]      <2> 	mov esp, [previousstack]
  5285 000040C7 C3                  <2> 	ret
  5286                              <2> .noprogfound:
  5287 000040C8 BE[25910000]        <2> 	mov esi, notfound1
  5288 000040CD E888DCFFFF          <2> 	call print
  5289 000040D2 8B35[1D2E0000]      <2> 	mov esi, [currentcommandloc]
  5290 000040D8 81C604000000        <2> 	add esi, 4
  5291 000040DE E877DCFFFF          <2> 	call print
  5292 000040E3 BE[2D910000]        <2> 	mov esi, notfound2
  5293 000040E8 E86DDCFFFF          <2> 	call print
  5294 000040ED C3                  <2> 	ret
  5295                              <2> 	
  5296                              <1> %include 'source/programs/dump.asm'
  5297 000040EE FF2C64756D7000      <2> db 255,44,"dump",0
  5298 000040F5 8B35[1D2E0000]      <2> 	mov esi, [currentcommandloc]
  5299 000040FB 81C605000000        <2> 	add esi, 5
  5300 00004101 31C9                <2> 	xor ecx, ecx
  5301 00004103 66B83078            <2> 	mov ax, "0x"
  5302 00004107 663906              <2> 	cmp [esi], ax
  5303 0000410A 740A                <2> 	je dumphexin
  5304 0000410C E8DFF0FFFF          <2> 	call cnvrttxt
  5305 00004111 E910000000          <2> 	jmp dumphexnow
  5306                              <2> dumphexin:
  5307 00004116 81C602000000        <2> 	add esi, 2
  5308 0000411C E886F0FFFF          <2> 	call cnvrthextxt
  5309 00004121 E900000000          <2> 	jmp dumphexnow
  5310                              <2> dumphexnow:
  5311 00004126 89CF                <2> 	mov edi, ecx
  5312 00004128 89FE                <2> 	mov esi, edi
  5313 0000412A 81C680030000        <2> 	add esi, 896
  5314                              <2> dumphexloop:
  5315 00004130 8B0F                <2> 	mov ecx, [edi]
  5316 00004132 C605[2F300000]05    <2> 	mov byte [firsthexshown],5
  5317 00004139 E806EFFFFF          <2> 	call showhex
  5318 0000413E 81C704000000        <2> 	add edi, 4
  5319 00004144 39F7                <2> 	cmp edi, esi
  5320 00004146 72E8                <2> 	jb dumphexloop
  5321 00004148 E802E6FFFF          <2> 	call termcopy
  5322 0000414D C3                  <2> 	ret 
  5323                              <1> %include 'source/programs/echo.asm'
  5324                              <2> 
  5325 0000414E FF2C6563686F00      <2> db 255,44,"echo",0
  5326                              <2> 	echoprog:
  5327 00004155 8B35[1D2E0000]      <2> 		mov esi, [currentcommandloc]
  5328 0000415B 81C605000000        <2> 		add esi, 5
  5329 00004161 8A06                <2> 		mov al, [esi]
  5330 00004163 E8F2DBFFFF          <2> 		call print
  5331 00004168 BE[5E910000]        <2> 		mov esi, line
  5332 0000416D E8E8DBFFFF          <2> 		call print
  5333 00004172 C3                  <2> 		ret
  5334 00004173 BB[26BC0000]        <2> 	echovr:	mov ebx, variables
  5335 00004178 BF06000000          <2> 		mov edi, 6
  5336 0000417D E83C000000          <2> 		call nxtvrech
  5337 00004182 E954000000          <2> 		jmp prntvr2
  5338 00004187 B13D                <2> 	echvar:	mov cl, '='
  5339 00004189 43                  <2> 		inc ebx
  5340 0000418A 8A03                <2> 		mov al, [ebx]
  5341 0000418C 3C00                <2> 		cmp al, 0
  5342 0000418E 742E                <2> 		je nxtvrech
  5343 00004190 3C3D                <2> 		cmp al, '='
  5344 00004192 7422                <2> 		je nxtvrechb1
  5345 00004194 8B35[1D2E0000]      <2> 		mov esi, [currentcommandloc]
  5346 0000419A 01FE                <2> 		add esi, edi
  5347 0000419C E8BBECFFFF          <2> 		call cndtest
  5348 000041A1 3C02                <2> 		cmp al, 2
  5349 000041A3 7432                <2> 		je prntvr
  5350 000041A5 3C01                <2> 		cmp al, 1
  5351 000041A7 742E                <2> 		je prntvr
  5352 000041A9 8B35[1D2E0000]      <2> 		mov esi, [currentcommandloc]
  5353 000041AF 01FE                <2> 		add esi, edi
  5354 000041B1 E908000000          <2> 		jmp nxtvrech
  5355                              <2> 	nxtvrechb1:
  5356 000041B6 81EB02000000        <2> 		sub ebx, 2
  5357 000041BC EBC9                <2> 		jmp echvar
  5358 000041BE 8A03                <2> 	nxtvrech: mov al, [ebx]
  5359 000041C0 3C05                <2> 		cmp al, 5
  5360 000041C2 740A                <2> 		je nxtvrec2
  5361 000041C4 43                  <2> 		inc ebx
  5362 000041C5 81FB[26CC0000]      <2> 		cmp ebx, varend
  5363 000041CB 72F1                <2> 		jb nxtvrech
  5364 000041CD C3                  <2> 		ret
  5365 000041CE 43                  <2> 	nxtvrec2: inc ebx
  5366 000041CF 8A03                <2> 		mov al, [ebx]
  5367 000041D1 3C04                <2> 		cmp al, 4
  5368 000041D3 74B2                <2> 		je echvar
  5369 000041D5 EBE7                <2> 		jmp nxtvrech
  5370 000041D7 43                  <2> 	prntvr: inc ebx
  5371 000041D8 89DE                <2> 		mov esi, ebx
  5372 000041DA C3                  <2> 		ret
  5373 000041DB E87ADBFFFF          <2> 	prntvr2: call print
  5374 000041E0 BE[5E910000]        <2> 		mov esi, line
  5375 000041E5 E870DBFFFF          <2> 		call print
  5376 000041EA C3                  <2> 		ret 
  5377                              <1> %include 'source/programs/else.asm'
  5378 000041EB FF2C656C736500      <2> 	db 255,44,"else",0
  5379 000041F2 31C0                <2> elsecmd:	xor eax, eax
  5380 000041F4 3805[20BC0000]      <2> 	cmp [BATCHISON], al
  5381 000041FA 0F841BF7FFFF        <2> 	je near notbatch
  5382 00004200 A0[B7BB0000]        <2> 	mov al, [IFON]
  5383 00004205 BE[B8BB0000]        <2> 	mov esi, IFTRUE
  5384 0000420A 01C6                <2> 	add esi, eax
  5385 0000420C 8A06                <2> 	mov al, [esi]
  5386 0000420E 3401                <2> 	xor al, 1
  5387 00004210 8806                <2> 	mov [esi], al
  5388 00004212 C3                  <2> 	ret 
  5389                              <1> %include 'source/programs/exit.asm'
  5390 00004213 FF2C6578697400      <2> db 255,44,"exit",0
  5391 0000421A 803D[B6BB0000]01    <2> 	cmp byte [ranboot], 1
  5392 00004221 0F84D7E8FFFF        <2> 	je near returnfromexp
  5393 00004227 E9BFE7FFFF          <2> 	jmp nobootfile
  5394                              <1> %include 'source/programs/fi.asm'
  5395 0000422C FF2C666900          <2> 	db 255,44,"fi",0
  5396 00004231 30C0                <2> 	xor al, al
  5397 00004233 3805[20BC0000]      <2> 	cmp [BATCHISON], al
  5398 00004239 0F84DCF6FFFF        <2> 	je near notbatch
  5399 0000423F B001                <2> fi:	mov al, 1
  5400 00004241 2805[B7BB0000]      <2> 	sub [IFON],al
  5401 00004247 C3                  <2> 	ret 
  5402                              <1> %ifdef gui.included
  5403                              <1> 	%include 'source/programs/gui.asm'
  5404 00004248 FF2C67756900        <2> db 255,44,"gui",0
  5405                              <2> guiswitcher:
  5406 0000424E 8B35[1D2E0000]      <2> 	mov esi, [currentcommandloc]
  5407 00004254 81C604000000        <2> 	add esi, 4
  5408 0000425A 31C9                <2> 	xor ecx, ecx
  5409 0000425C 803E00              <2> 	cmp byte [esi], 0
  5410 0000425F 740A                <2> 	je .nomodepref
  5411 00004261 E841EFFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5412 00004266 E907000000          <2> 	jmp .modepref
  5413                              <2> .nomodepref:
  5414 0000426B 51                  <2> 	push ecx
  5415 0000426C E84FDBFFFF          <2> 	call clear
  5416 00004271 59                  <2> 	pop ecx
  5417                              <2> .modepref:
  5418 00004272 66BB[3953]          <2> 	mov bx, guiswitch
  5419 00004276 66891D[050D0000]    <2> 	mov [realmodeptr], bx
  5420 0000427D BB[8D420000]        <2> 	mov ebx, guiswitchret
  5421 00004282 891D[010D0000]      <2> 	mov [realmodereturn], ebx
  5422 00004288 E95DC9FFFF          <2> 	jmp realmode
  5423                              <2> guiswitchret:
  5424 0000428D 65803D[5CA30000]01  <2> 	cmp byte [gs:guion], 1
  5425 00004295 7401                <2> 	je .cont
  5426 00004297 C3                  <2> 	ret
  5427                              <2> .cont:
  5428 00004298 BF[17550000]        <2> 	mov edi, VBEMODEBLOCK
  5429                              <2> .loop:
  5430 0000429D 658B07              <2> 	mov eax, [gs:edi]
  5431 000042A0 8907                <2> 	mov [edi], eax
  5432 000042A2 47                  <2> 	inc edi
  5433 000042A3 81FF[1B580000]      <2> 	cmp edi, VBEEND
  5434 000042A9 72F2                <2> 	jb .loop
  5435 000042AB A1[3F570000]        <2> 	mov eax, [physbaseptr]
  5436 000042B0 2D00001000          <2> 	sub eax, 0x100000
  5437 000042B5 A3[3F570000]        <2> 	mov [physbaseptr], eax
  5438 000042BA C605[9C220000]00    <2> 	mov byte [termguion], 0
  5439 000042C1 BE[3BD40000]        <2> 	mov esi, graphicstable
  5440 000042C6 30C0                <2> 	xor al, al
  5441                              <2> .clear:
  5442 000042C8 8806                <2> 	mov [esi], al
  5443 000042CA 46                  <2> 	inc esi
  5444 000042CB 81FE[3BD60000]      <2> 	cmp esi, graphicstableend
  5445 000042D1 72F5                <2> 	jb .clear
  5446 000042D3 E8BE2C0000          <2> 	call guisetup
  5447                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5448 000042D8 668B15[29570000]    <2> 	mov dx, [resolutionx]
  5449 000042DF 668B0D[2B570000]    <2> 	mov cx, [resolutiony]
  5450 000042E6 6689D3              <2> 	mov bx, dx
  5451 000042E9 6689C8              <2> 	mov ax, cx
  5452 000042EC 66D1EB              <2> 	shr bx, 1
  5453 000042EF 66D1E8              <2> 	shr ax, 1
  5454 000042F2 6689DA              <2> 	mov dx, bx
  5455 000042F5 66D1EA              <2> 	shr dx, 1
  5456 000042F8 6689C1              <2> 	mov cx, ax
  5457 000042FB 66D1E9              <2> 	shr cx, 1
  5458 000042FE 6601D3              <2> 	add bx, dx
  5459 00004301 6601C8              <2> 	add ax, cx
  5460 00004304 66D1E9              <2> 	shr cx, 1
  5461 00004307 66C1EB03            <2> 	shr bx, 3
  5462 0000430B 66C1E303            <2> 	shl bx, 3
  5463 0000430F 66C1E804            <2> 	shr ax, 4
  5464 00004313 66C1E004            <2> 	shl ax, 4
  5465 00004317 66891D[9B710000]    <2> 	mov [termwindow], bx
  5466 0000431E 66A3[9D710000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5467 00004324 BE[9B710000]        <2> 	mov esi, termwindow
  5468 00004329 31DB                <2> 	xor ebx, ebx
  5469 0000432B 6631C0              <2> 	xor ax, ax
  5470 0000432E E871330000          <2> 	call showwindow
  5471 00004333 E8E4140000          <2> 	call cursorgui
  5472 00004338 E883DAFFFF          <2> 	call clear
  5473 0000433D C3                  <2> 	ret
  5474                              <2> 	
  5475                              <1> %endif
  5476                              <1> %include 'source/programs/help.asm'
  5477 0000433E FF2C68656C7000      <2> db 255,44,"help",0
  5478                              <2> lscmd:	
  5479 00004345 B00D                <2> 		mov al, 13
  5480 00004347 E852DFFFFF          <2> 		call prcharq
  5481 0000434C BE[73320000]        <2> 		mov esi, progstart
  5482 00004351 BB[39530000]        <2> 		mov ebx, progend
  5483 00004356 BE[A6B50000]        <2> dir:	mov esi, fileindex
  5484 0000435B 8A06                <2> 	dirnxt:	mov al, [esi]
  5485 0000435D 30E4                <2> 		xor ah, ah
  5486 0000435F 3CFF                <2> 		cmp al, 255
  5487 00004361 7415                <2> 		je dirfnd
  5488 00004363 46                  <2> 		inc esi
  5489 00004364 81FE[A6B90000]      <2> 		cmp esi,  fileindexend
  5490 0000436A 7339                <2> 		jae dirdn
  5491 0000436C EBED                <2> 		jmp dirnxt
  5492                              <2> 	dirfnd3:
  5493 0000436E 46                  <2> 		inc esi
  5494 0000436F 81FE[A6B90000]      <2> 		cmp esi, fileindexend
  5495 00004375 76E4                <2> 		jbe dirnxt
  5496 00004377 4E                  <2> 		dec esi
  5497 00004378 46                  <2> 	dirfnd:	inc esi
  5498 00004379 8A06                <2> 		mov al, [esi]
  5499 0000437B 30E4                <2> 		xor ah, ah
  5500 0000437D 3C2C                <2> 		cmp al, 44
  5501 0000437F 740B                <2> 		je dirfnd2
  5502 00004381 46                  <2> 		inc esi
  5503 00004382 81FE[A6B90000]      <2> 		cmp esi,  fileindexend
  5504 00004388 731B                <2> 		jae dirdn
  5505 0000438A EBCF                <2> 		jmp dirnxt
  5506 0000438C 46                  <2> 	dirfnd2: inc esi
  5507 0000438D E8B6D9FFFF          <2> 		call printquiet
  5508 00004392 56                  <2> 		push esi
  5509 00004393 B009                <2> 		mov al, 9
  5510 00004395 E804DFFFFF          <2> 		call prcharq
  5511 0000439A 5E                  <2> 		pop esi
  5512 0000439B 81FE[A6B90000]      <2> 		cmp esi,  fileindexend
  5513 000043A1 7302                <2> 		jae dirdn
  5514 000043A3 EBB6                <2> 		jmp dirnxt
  5515 000043A5 BE[5E910000]        <2> 	dirdn:	mov esi, line
  5516 000043AA E8ABD9FFFF          <2> 			call print
  5517 000043AF C3                  <2> 			ret
  5518 000043B0 00                  <2> currentdir db 0
  5519                              <1> %include 'source/programs/if.asm'
  5520 000043B1 FF2C696600          <2> 	db 255,44,"if",0
  5521 000043B6 30C0                <2> ifcmd:	xor al, al
  5522 000043B8 3805[20BC0000]      <2> 	cmp [BATCHISON], al
  5523 000043BE 0F8457F5FFFF        <2> 	je near notbatch
  5524 000043C4 8B1D[1D2E0000]      <2> 	mov ebx, [currentcommandloc]
  5525 000043CA 81C303000000        <2> 	add ebx, 3
  5526 000043D0 89DE                <2> 	mov esi, ebx
  5527 000043D2 8A06                <2> chkeqsn: mov al, [esi]
  5528 000043D4 3C00                <2> 	cmp al, 0
  5529 000043D6 0F843FF5FFFF        <2> 	je near notbatch
  5530 000043DC 3C3D                <2> 	cmp al, '='
  5531 000043DE 0F8403000000        <2> 	je near chkeqdn
  5532 000043E4 46                  <2> 	inc esi
  5533 000043E5 EBEB                <2> 	jmp chkeqsn
  5534 000043E7 B000                <2> chkeqdn: mov al, 0 
  5535 000043E9 8806                <2> 	mov [esi], al
  5536 000043EB 46                  <2> 	inc esi
  5537 000043EC E830EAFFFF          <2> 	call tester
  5538 000043F1 3C01                <2> 	cmp al, 1
  5539 000043F3 0F8405000000        <2> 	je near trueif
  5540 000043F9 E91C000000          <2> 	jmp falseif
  5541 000043FE 31C0                <2> trueif:	xor eax, eax
  5542 00004400 A0[B7BB0000]        <2> 	mov al, [IFON]
  5543 00004405 FEC0                <2> 	inc al
  5544 00004407 A2[B7BB0000]        <2> 	mov [IFON], al
  5545 0000440C 30E4                <2> 	xor ah, ah
  5546 0000440E BE[B8BB0000]        <2> 	mov esi, IFTRUE
  5547 00004413 01C6                <2> 	add esi, eax
  5548 00004415 B401                <2> 	mov ah, 1
  5549 00004417 8826                <2> 	mov [esi], ah
  5550 00004419 C3                  <2> 	ret 
  5551 0000441A 31C0                <2> falseif: xor eax, eax
  5552 0000441C A0[B7BB0000]        <2> 	mov al, [IFON]
  5553 00004421 FEC0                <2> 	inc al
  5554 00004423 A2[B7BB0000]        <2> 	mov [IFON], al
  5555 00004428 30E4                <2> 	xor ah, ah
  5556 0000442A BE[B8BB0000]        <2> 	mov esi, IFTRUE
  5557 0000442F 01C6                <2> 	add esi, eax
  5558 00004431 30E4                <2> 	xor ah, ah
  5559 00004433 8826                <2> 	mov [esi], ah
  5560 00004435 C3                  <2> 	ret 
  5561                              <1> %ifdef network.included
  5562                              <1> 	%include 'source/programs/ipconfig.asm'
  5563 00004436 FF2C6970636F6E6669- <2> db 255,44,"ipconfig",0
  5564 0000443F 6700                <2>
  5565                              <2> ifconfig:
  5566 00004441 8B35[1D2E0000]      <2> 	mov esi, [currentcommandloc]
  5567 00004447 81C609000000        <2> 	add esi, 9
  5568 0000444D 803E00              <2> 	cmp byte [esi], 0
  5569 00004450 740B                <2> 	je .noip
  5570 00004452 E8D34B0000          <2> 	call strtoip
  5571 00004457 890D[13910000]      <2> 	mov [sysip], ecx
  5572                              <2> .noip:
  5573                              <2> %ifdef ne2000.included
  5574 0000445D 803D[1D8D0000]01    <2> 	cmp byte [ne2000.nicconfig], 1
  5575 00004464 751E                <2> 	jne .none2000
  5576 00004466 BE[1E8D0000]        <2> 	mov esi, ne2000.name
  5577 0000446B E8EAD8FFFF          <2> 	call print
  5578 00004470 B9[408D0000]        <2> 	mov ecx, ne2000.mac
  5579 00004475 E8324C0000          <2> 	call showmac
  5580 0000447A BE[5E910000]        <2> 	mov esi, line
  5581 0000447F E8D6D8FFFF          <2> 	call print
  5582                              <2> .none2000:
  5583                              <2> %endif
  5584                              <2> %ifdef rtl8139.included
  5585 00004484 803D[07860000]01    <2> 	cmp byte [rtl8139.nicconfig], 1
  5586 0000448B 751E                <2> 	jne .nortl8139
  5587 0000448D BE[0E860000]        <2> 	mov esi, rtl8139.name
  5588 00004492 E8C3D8FFFF          <2> 	call print
  5589 00004497 B9[08860000]        <2> 	mov ecx, rtl8139.mac
  5590 0000449C E80B4C0000          <2> 	call showmac
  5591 000044A1 BE[5E910000]        <2> 	mov esi, line
  5592 000044A6 E8AFD8FFFF          <2> 	call print
  5593                              <2> .nortl8139:
  5594                              <2> %endif
  5595                              <2> %ifdef rtl8169.included
  5596 000044AB 803D[08880000]01    <2> 	cmp byte [rtl8169.nicconfig], 1
  5597 000044B2 751E                <2> 	jne .nortl8169
  5598 000044B4 BE[0F880000]        <2> 	mov esi, rtl8169.name
  5599 000044B9 E89CD8FFFF          <2> 	call print
  5600 000044BE B9[09880000]        <2> 	mov ecx, rtl8169.mac
  5601 000044C3 E8E44B0000          <2> 	call showmac
  5602 000044C8 BE[5E910000]        <2> 	mov esi, line
  5603 000044CD E888D8FFFF          <2> 	call print
  5604                              <2> .nortl8169:
  5605                              <2> %endif
  5606                              <2> %ifdef i8254x.included
  5607 000044D2 803D[398F0000]01    <2> 	cmp byte [i8254x.nicconfig], 1
  5608 000044D9 751E                <2> 	jne .noi8254x
  5609 000044DB BE[408F0000]        <2> 	mov esi, i8254x.name
  5610 000044E0 E875D8FFFF          <2> 	call print
  5611 000044E5 B9[3A8F0000]        <2> 	mov ecx, i8254x.mac
  5612 000044EA E8BD4B0000          <2> 	call showmac
  5613 000044EF BE[5E910000]        <2> 	mov esi, line
  5614 000044F4 E861D8FFFF          <2> 	call print
  5615                              <2> .noi8254x:
  5616                              <2> %endif
  5617 000044F9 8B0D[13910000]      <2> 	mov ecx, [sysip]
  5618 000044FF E86C4B0000          <2> 	call showip
  5619 00004504 BE[5E910000]        <2> 	mov esi, line
  5620 00004509 E84CD8FFFF          <2> 	call print
  5621 0000450E C3                  <2> 	ret
  5622                              <2> 	
  5623                              <1> %endif
  5624                              <1> %include 'source/programs/keycode.asm'
  5625 0000450F FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5626 00004518 00                  <2>
  5627                              <2> keycode:
  5628 00004519 C605[78220000]00    <2> 	mov byte [trans], 0
  5629 00004520 C605[13670000]00    <2> 	mov byte [threadson], 0
  5630                              <2> %ifdef io.serial
  5631                              <2> .noserial:
  5632                              <2> 	hlt
  5633                              <2> 	mov dx, [serial.address]
  5634                              <2> 	in al, dx
  5635                              <2> 	cmp al, 0
  5636                              <2> 	je .noserial
  5637                              <2> 	mov cl, al
  5638                              <2> 	call showhexsmall
  5639                              <2> 	cmp al, 0x1B
  5640                              <2> 	jne .noserial
  5641                              <2> 	in al, dx
  5642                              <2> 	mov cl, al
  5643                              <2> 	call showhexsmall
  5644                              <2> 	cmp cl, 0x5B
  5645                              <2> 	je .noserial
  5646                              <2> 	ret
  5647                              <2> %else
  5648 00004527 E8FE180000          <2> 	call getkey
  5649 0000452C 31C0                <2> 	xor eax, eax
  5650 0000452E 31C9                <2> 	xor ecx, ecx
  5651 00004530 8A0D[0A5E0000]      <2> 	mov cl, [specialkey]
  5652 00004536 80F900              <2> 	cmp cl, 0
  5653 00004539 0F8405000000        <2> 	je near .nospecialkeycode
  5654 0000453F E8ECEAFFFF          <2> 	call showhexsmall
  5655                              <2> .nospecialkeycode:
  5656 00004544 66A1[76220000]      <2> 	mov ax, [lastkey]
  5657 0000454A 88E1                <2> 	mov cl, ah
  5658 0000454C E8DFEAFFFF          <2> 	call showhexsmall
  5659 00004551 80FC01              <2> 	cmp ah, 1
  5660 00004554 75C3                <2> 	jne keycode
  5661 00004556 C3                  <2> 	ret
  5662                              <2> %endif
  5663                              <1> %ifdef gui.included
  5664                              <1> 	%include 'source/programs/line.asm'
  5665 00004557 FF2C6C696E6500      <2> db 255,44,"line",0
  5666                              <2> linetester:
  5667 0000455E 803D[5CA30000]00    <2> 	cmp byte [guion], 0
  5668 00004565 0F841B000000        <2> 	je near .done
  5669 0000456B 668B35[63020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  5670 00004572 BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  5671 00004577 E868000000          <2> 	call .circletest
  5672 0000457C BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  5673 00004581 E801000000          <2> 	call .linetest
  5674                              <2> .done:
  5675 00004586 C3                  <2> 	ret
  5676                              <2> 
  5677                              <2> .linetest:
  5678 00004587 53                  <2> 	push ebx
  5679 00004588 E8D6000000          <2> 	call .stime
  5680 0000458D 5B                  <2> 	pop ebx
  5681 0000458E 31FF                <2> 	xor edi, edi
  5682                              <2> .ltlp:
  5683 00004590 53                  <2> 	push ebx
  5684 00004591 E81C010000          <2> 	call .st
  5685 00004596 66F7D6              <2> 	not si
  5686 00004599 E814010000          <2> 	call .st
  5687 0000459E 5B                  <2> 	pop ebx
  5688 0000459F 66F7D6              <2> 	not si
  5689 000045A2 660335[61020000]    <2> 	add si, [timenanoseconds]
  5690 000045A9 4B                  <2> 	dec ebx
  5691 000045AA 81FB00000000        <2> 	cmp ebx, 0
  5692 000045B0 77DE                <2> 	ja .ltlp
  5693 000045B2 E8C4000000          <2> 	call .etime
  5694 000045B7 53                  <2> 	push ebx	
  5695 000045B8 57                  <2> 	push edi
  5696 000045B9 E8EF270000          <2> 	call guiclear
  5697 000045BE E83A280000          <2> 	call reloadallgraphics
  5698 000045C3 59                  <2> 	pop ecx
  5699 000045C4 E845EBFFFF          <2> 	call showdec
  5700 000045C9 BE[F4460000]        <2> 	mov esi, .msg
  5701 000045CE E887D7FFFF          <2> 	call print
  5702 000045D3 59                  <2> 	pop ecx
  5703 000045D4 E835EBFFFF          <2> 	call showdec
  5704 000045D9 BE[20470000]        <2> 	mov esi, .msgtime
  5705 000045DE E877D7FFFF          <2> 	call print
  5706 000045E3 C3                  <2> 	ret
  5707                              <2> 	
  5708                              <2> .circletest:
  5709 000045E4 53                  <2> 	push ebx
  5710 000045E5 E879000000          <2> 	call .stime
  5711 000045EA 5B                  <2> 	pop ebx
  5712 000045EB 31FF                <2> 	xor edi, edi
  5713                              <2> .ctlp:
  5714 000045ED 53                  <2> 	push ebx
  5715 000045EE 668B0D[2B570000]    <2> 	mov cx, [resolutiony]
  5716 000045F5 66D1E9              <2> 	shr cx, 1
  5717 000045F8 668B15[29570000]    <2> 	mov dx, [resolutionx]
  5718 000045FF 66D1EA              <2> 	shr dx, 1
  5719 00004602 6689C8              <2> 	mov ax, cx
  5720                              <2> .circle:
  5721 00004605 60                  <2> 	pusha
  5722 00004606 E8FF210000          <2> 	call drawcircle
  5723 0000460B 61                  <2> 	popa
  5724 0000460C 6648                <2> 	dec ax
  5725 0000460E 47                  <2> 	inc edi
  5726 0000460F 663D0100            <2> 	cmp ax, 1
  5727 00004613 77F0                <2> 	ja .circle
  5728 00004615 66F7D6              <2> 	not si
  5729                              <2> .circle2:
  5730 00004618 60                  <2> 	pusha
  5731 00004619 E8EC210000          <2> 	call drawcircle
  5732 0000461E 61                  <2> 	popa
  5733 0000461F 47                  <2> 	inc edi
  5734 00004620 6640                <2> 	inc ax
  5735 00004622 6639C8              <2> 	cmp ax, cx
  5736 00004625 76F1                <2> 	jbe .circle2
  5737 00004627 5B                  <2> 	pop ebx
  5738 00004628 66F7D6              <2> 	not si
  5739 0000462B 660335[61020000]    <2> 	add si, [timenanoseconds]
  5740 00004632 4B                  <2> 	dec ebx
  5741 00004633 81FB00000000        <2> 	cmp ebx, 0
  5742 00004639 77B2                <2> 	ja .ctlp
  5743 0000463B E83B000000          <2> 	call .etime
  5744 00004640 53                  <2> 	push ebx
  5745 00004641 57                  <2> 	push edi
  5746 00004642 59                  <2> 	pop ecx
  5747 00004643 E8C6EAFFFF          <2> 	call showdec
  5748 00004648 BE[09470000]        <2> 	mov esi, .msgcircle
  5749 0000464D E808D7FFFF          <2> 	call print
  5750 00004652 59                  <2> 	pop ecx
  5751 00004653 E8B6EAFFFF          <2> 	call showdec
  5752 00004658 BE[20470000]        <2> 	mov esi, .msgtime
  5753 0000465D E8F8D6FFFF          <2> 	call print
  5754 00004662 C3                  <2> 	ret
  5755                              <2> 	
  5756                              <2> .stime:
  5757 00004663 F4                  <2> 	hlt
  5758 00004664 A1[5D020000]        <2> 	mov eax, [timeseconds]
  5759 00004669 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  5760 0000466F A3[2F470000]        <2> 	mov [.time], eax
  5761 00004674 891D[33470000]      <2> 	mov [.time + 4], ebx
  5762 0000467A C3                  <2> 	ret
  5763                              <2> 	
  5764                              <2> .etime:
  5765 0000467B A1[5D020000]        <2> 	mov eax, [timeseconds]
  5766 00004680 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  5767 00004686 8B0D[2F470000]      <2> 	mov ecx, [.time]
  5768 0000468C 8B15[33470000]      <2> 	mov edx, [.time + 4]
  5769 00004692 C1EA0A              <2> 	shr edx, 10
  5770 00004695 C1EB0A              <2> 	shr ebx, 10
  5771 00004698 29C8                <2> 	sub eax, ecx
  5772 0000469A 3D00000000          <2> 	cmp eax, 0
  5773 0000469F 740E                <2> 	je .notclp
  5774                              <2> .tclp:
  5775 000046A1 81C340420F00        <2> 	add ebx, 1000000
  5776 000046A7 48                  <2> 	dec eax
  5777 000046A8 3D00000000          <2> 	cmp eax, 0
  5778 000046AD 75F2                <2> 	jne .tclp
  5779                              <2> .notclp:
  5780 000046AF 29D3                <2> 	sub ebx, edx
  5781 000046B1 C3                  <2> 	ret
  5782                              <2> 	
  5783                              <2> .st:
  5784 000046B2 6631C0              <2> 	xor ax, ax
  5785 000046B5 6631DB              <2> 	xor bx, bx
  5786 000046B8 668B0D[2B570000]    <2> 	mov cx, [resolutiony]
  5787 000046BF 668B15[29570000]    <2> 	mov dx, [resolutionx]
  5788                              <2> .lp:
  5789 000046C6 60                  <2> 	pusha
  5790 000046C7 E8B5250000          <2> 	call drawline
  5791 000046CC 61                  <2> 	popa
  5792                              <2> .noswitch:
  5793 000046CD 47                  <2> 	inc edi
  5794 000046CE 6643                <2> 	inc bx
  5795 000046D0 664A                <2> 	dec dx
  5796 000046D2 6681FB0000          <2> 	cmp bx, 0
  5797 000046D7 74ED                <2> 	je .lp
  5798 000046D9 6681FA0000          <2> 	cmp dx, 0
  5799 000046DE 75E6                <2> 	jne .lp
  5800                              <2> .lp2:
  5801 000046E0 60                  <2> 	pusha
  5802 000046E1 E89B250000          <2> 	call drawline
  5803 000046E6 61                  <2> 	popa
  5804 000046E7 47                  <2> 	inc edi
  5805 000046E8 6640                <2> 	inc ax
  5806 000046EA 6649                <2> 	dec cx
  5807 000046EC 6681F90000          <2> 	cmp cx, 0
  5808 000046F1 75ED                <2> 	jne .lp2
  5809 000046F3 C3                  <2> 	ret
  5810                              <2> 	
  5811 000046F4 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  5812 000046FD 6520647261776E2069- <2>
  5813 00004706 6E2000              <2>
  5814 00004709 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  5815 00004712 65726520647261776E- <2>
  5816 0000471B 20696E2000          <2>
  5817 00004720 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  5818 00004729 6E64732E0A00        <2>
  5819 0000472F 0000000000000000    <2> .time dd 0,0	
  5820                              <1> %endif
  5821                              <1> %include 'source/programs/logout.asm'
  5822 00004737 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5823 00004740 E962E2FFFF          <2> 	jmp os
  5824                              <1> %include 'source/programs/loop.asm'
  5825 00004745 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5826 0000474C 803D[21BC0000]00    <2> 	cmp byte [LOOPON], 0
  5827 00004753 0F8501000000        <2> 	jne near filoop
  5828 00004759 C3                  <2> 	ret
  5829 0000475A 8B35[22BC0000]      <2> filoop: mov esi, [LOOPPOS]
  5830 00004760 FE0D[B7BB0000]      <2> 	dec byte [IFON]
  5831 00004766 C605[21BC0000]00    <2> 	mov byte [LOOPON], 0
  5832 0000476D 8935[1CBC0000]      <2> 	mov [BATCHPOS], esi
  5833 00004773 8935[43380000]      <2> 	mov [batchedi], esi
  5834 00004779 C3                  <2> 	ret 
  5835                              <1> %include 'source/programs/ls.asm'
  5836 0000477A FF2C6C7300          <2> db 255,44,"ls",0
  5837 0000477F BE[83A10000]        <2> 		mov esi, diskfileindex
  5838                              <2> 	diskindexdir:
  5839 00004784 803E5F              <2> 		cmp byte [esi], '_'
  5840 00004787 7440                <2> 		je nextdiskindexdir
  5841 00004789 E8BAD5FFFF          <2> 		call printquiet
  5842 0000478E 56                  <2> 		push esi
  5843 0000478F BE[E9470000]        <2> 		mov esi, disktab
  5844 00004794 E8AFD5FFFF          <2> 		call printquiet
  5845 00004799 5E                  <2> 		pop esi
  5846 0000479A 8B4E05              <2> 		mov ecx, [esi + 5]
  5847 0000479D C605[2F300000]05    <2> 		mov byte [firsthexshown], 5
  5848 000047A4 E865E9FFFF          <2> 		call showdec
  5849 000047A9 56                  <2> 		push esi
  5850 000047AA BE[5E910000]        <2> 		mov esi, line
  5851 000047AF E894D5FFFF          <2> 		call printquiet
  5852 000047B4 5E                  <2> 		pop esi
  5853 000047B5 81C609000000        <2> 		add esi, 9
  5854 000047BB 81FE[5CA30000]      <2> 		cmp esi, enddiskfileindex
  5855 000047C1 72C1                <2> 		jb diskindexdir
  5856 000047C3 E887DFFFFF          <2> 		call termcopy
  5857 000047C8 C3                  <2> 		ret
  5858                              <2> 	nextdiskindexdir:
  5859 000047C9 46                  <2> 		inc esi
  5860 000047CA 803E00              <2> 		cmp byte [esi], 0
  5861 000047CD 75FA                <2> 		jne nextdiskindexdir
  5862 000047CF 81C609000000        <2> 		add esi, 9
  5863 000047D5 81FE[5CA30000]      <2> 		cmp esi, enddiskfileindex
  5864 000047DB 72A7                <2> 		jb diskindexdir
  5865 000047DD E86DDFFFFF          <2> 		call termcopy
  5866 000047E2 C3                  <2> 		ret
  5867                              <2> 		
  5868 000047E3 4469736B2000        <2> 		diskmsg db "Disk ",0
  5869 000047E9 0D09090900          <2> 		disktab db 13,9,9,9,0
  5870                              <1> %include 'source/programs/memory.asm'
  5871 000047EE FF2C6D656D6F727900  <2> db 255,44,"memory",0
  5872 000047F7 BE[62A30000]        <2> 	mov esi, memlistbuf
  5873 000047FC 31FF                <2> 	xor edi, edi
  5874 000047FE 668B3D[A2A50000]    <2> 	mov di, [memlistend]
  5875 00004805 01F7                <2> 	add edi, esi
  5876                              <2> printmemmap:
  5877 00004807 8B0E                <2> 	mov ecx, [esi]
  5878 00004809 E836E8FFFF          <2> 	call showhex
  5879 0000480E 81C608000000        <2> 	add esi, 8
  5880 00004814 8B0E                <2> 	mov ecx, [esi]
  5881 00004816 E829E8FFFF          <2> 	call showhex
  5882 0000481B 81C608000000        <2> 	add esi, 8
  5883 00004821 8B0E                <2> 	mov ecx, [esi]
  5884 00004823 E81CE8FFFF          <2> 	call showhex
  5885 00004828 81C608000000        <2> 	add esi, 8
  5886 0000482E 57                  <2> 	push edi
  5887 0000482F 56                  <2> 	push esi
  5888 00004830 BE[5E910000]        <2> 	mov esi, line
  5889 00004835 E820D5FFFF          <2> 	call print
  5890 0000483A 5E                  <2> 	pop esi
  5891 0000483B 5F                  <2> 	pop edi
  5892 0000483C 39FE                <2> 	cmp esi, edi
  5893 0000483E 72C7                <2> 	jb printmemmap
  5894 00004840 C3                  <2> 	ret
  5895                              <2> 	
  5896                              <1> %include 'source/programs/pci.asm'
  5897 00004841 FF2C70636900        <2> db 255,44,"pci",0
  5898 00004847 E8F9190000          <2> 	call pcidump
  5899 0000484C C3                  <2> 	ret 
  5900                              <1> %ifdef network.included
  5901                              <1> 	%include 'source/programs/ping.asm'
  5902 0000484D FF2C70696E6700      <2> db 255,44,"ping",0
  5903                              <2> ping:
  5904 00004854 8B35[1D2E0000]      <2> 	mov esi, [currentcommandloc]
  5905 0000485A 81C605000000        <2> 	add esi, 5
  5906 00004860 E8C5470000          <2> 	call strtoip
  5907 00004865 890D[F0480000]      <2> 	mov [.destip], ecx
  5908 0000486B E800480000          <2> 	call showip
  5909 00004870 8B0D[13910000]      <2> 	mov ecx, [sysip]
  5910 00004876 890D[EC480000]      <2> 	mov [.sourceip]. ecx
  5911 0000487C 31C0                <2> 	xor eax, eax
  5912 0000487E 31DB                <2> 	xor ebx, ebx
  5913 00004880 66A3[EA480000]      <2> 	mov [.checksum], ax
  5914 00004886 66A3[F6480000]      <2> 	mov [.icmpchecksum], ax
  5915 0000488C BF[E0480000]        <2> 	mov edi, .header
  5916 00004891 BE[F4480000]        <2> 	mov esi, .headerend
  5917 00004896 E867470000          <2> 	call getchecksum
  5918 0000489B 66890D[EA480000]    <2> 	mov [.checksum], cx
  5919 000048A2 BF[F4480000]        <2> 	mov edi, .icmp
  5920 000048A7 BE[1C490000]        <2> 	mov esi, .packetend
  5921 000048AC E851470000          <2> 	call getchecksum
  5922 000048B1 66890D[F6480000]    <2> 	mov [.icmpchecksum], cx
  5923 000048B8 BF[D2480000]        <2> 	mov edi, .packet
  5924 000048BD BE[1C490000]        <2> 	mov esi, .packetend
  5925 000048C2 E81A470000          <2> 	call sendpacket
  5926 000048C7 BE[5E910000]        <2> 	mov esi, line
  5927 000048CC E889D4FFFF          <2> 	call print
  5928 000048D1 C3                  <2> 	ret
  5929                              <2> 	
  5930                              <2> 	
  5931                              <2> 	
  5932                              <2> .packet:
  5933 000048D2 FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5934 000048D8 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  5935 000048DE 0800                <2> .ethertype	db 8,0	;ip is 0x800
  5936                              <2> .header:
  5937 000048E0 45                  <2> .version	db 0x45
  5938 000048E1 00                  <2> .services	db 0
  5939 000048E2 003C                <2> .length	db 0,0x3C
  5940 000048E4 0000                <2> .id		dw 0
  5941 000048E6 00                  <2> .flags	db 0
  5942 000048E7 00                  <2> .fragment db 0
  5943 000048E8 80                  <2> .ttl	db 128
  5944 000048E9 01                  <2> .protocol db 1 ;ICMP
  5945 000048EA 0000                <2> .checksum dw 0
  5946 000048EC 00000000            <2> .sourceip dd 0
  5947 000048F0 00000000            <2> .destip dd 0
  5948                              <2> .headerend:
  5949                              <2> .icmp:
  5950 000048F4 08                  <2> .icmptype db 8 ;Ping request
  5951 000048F5 00                  <2> .icmpcode db 0
  5952 000048F6 0000                <2> .icmpchecksum dw 0
  5953 000048F8 0001                <2> .icmpid db 0,1
  5954 000048FA 0000                <2> .sequence dw 0
  5955 000048FC 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  5956 00004905 6A6B6C6D6E6F707172- <2>
  5957 0000490E 737475767761626364- <2>
  5958 00004917 6566676869          <2>
  5959                              <2> .packetend:
  5960                              <1> %endif
  5961                              <1> %include 'source/programs/play.asm'
  5962 0000491C FF2C706C61796100    <2> db 255,44,"playa",0
  5963 00004924 8B3D[1D2E0000]      <2> 	mov edi, [currentcommandloc]
  5964 0000492A 81C706000000        <2> 	add edi, 6
  5965 00004930 E833000000          <2> 	call playasync
  5966 00004935 C3                  <2> 	ret
  5967 00004936 FF2C706C617900      <2> db 255,44,"play",0
  5968                              <2> play:
  5969 0000493D 8B3D[1D2E0000]      <2> 	mov edi, [currentcommandloc]
  5970 00004943 81C705000000        <2> 	add edi, 5
  5971 00004949 E81A000000          <2> 	call playasync
  5972                              <2> .waitforsound:
  5973                              <2> %ifdef sound.included
  5974 0000494E A1[F35D0000]        <2> 	mov eax, [Length0]
  5975 00004953 660B05[F75D0000]    <2> 	or ax, [Length1]
  5976                              <2> %endif
  5977 0000495A 0A05[65020000]      <2> 	or al, [soundon]
  5978 00004960 3D00000000          <2> 	cmp eax, 0
  5979 00004965 75E7                <2> 	jne .waitforsound
  5980 00004967 C3                  <2> 	ret
  5981                              <2> playasync:
  5982 00004968 BE0000C000          <2> 	mov esi, 0xC00000
  5983 0000496D E8021C0000          <2> 	call loadfile
  5984 00004972 81FA94010000        <2> 	cmp edx, 404
  5985 00004978 743F                <2> 	je nosoundfound
  5986 0000497A BB0000C000          <2> 	mov ebx, 0xC00000
  5987 0000497F 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  5988 00004986 0F843F010000        <2> 	je near wave_player
  5989 0000498C 66813B534E          <2> 	cmp word [ebx], "SN"
  5990 00004991 7526                <2> 	jne nosoundfound
  5991 00004993 81C306000000        <2> 	add ebx, 6
  5992 00004999 891D[68020000]      <2> 	mov [soundpos], ebx
  5993 0000499F 035BFC              <2> 	add ebx, [ebx - 4]
  5994 000049A2 891D[6C020000]      <2> 	mov [soundendpos], ebx
  5995 000049A8 66C705[66020000]00- <2> 	mov word [soundrepititions], 0
  5996 000049B0 00                  <2>
  5997 000049B1 C605[65020000]01    <2> 	mov byte [soundon], 1
  5998 000049B8 C3                  <2> 	ret
  5999                              <2> nosoundfound:
  6000 000049B9 BE[DF490000]        <2> 	mov esi, notfoundsound
  6001 000049BE E897D3FFFF          <2> 	call print
  6002 000049C3 8B35[1D2E0000]      <2> 	mov esi, [currentcommandloc]
  6003 000049C9 81C605000000        <2> 	add esi, 5
  6004 000049CF E886D3FFFF          <2> 	call print
  6005 000049D4 BE[2D910000]        <2> 	mov esi, notfound2
  6006 000049D9 E87CD3FFFF          <2> 	call print
  6007 000049DE C3                  <2> 	ret
  6008 000049DF 706C61793A2000      <2> notfoundsound db "play: ",0
  6009                              <2> 
  6010                              <2> %ifdef sound.included
  6011                              <2> sbplay:
  6012 000049E6 BE0000C000          <2> 		mov esi, 0xC00000
  6013 000049EB 89F3                <2> 		mov ebx, esi
  6014 000049ED 81C640000000        <2> 		add esi, WAVSTART
  6015 000049F3 29F7                <2> 		sub edi, esi
  6016 000049F5 66893D[F75D0000]    <2> 		mov [Length1], di
  6017 000049FC C1EF0F              <2> 		shr edi, 15
  6018 000049FF 893D[F35D0000]      <2> 		mov [Length0], edi
  6019 00004A05 8B4B18              <2> 		mov ecx, [ebx + 24]
  6020 00004A08 890D[045E0000]      <2> 		mov [Freq], ecx
  6021 00004A0E 31C0                <2> 		xor eax, eax
  6022 00004A10 BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  6023 00004A15 81C240000000        <2> 		add edx, WAVSTART
  6024 00004A1B 01D0                <2> 		add	eax, edx
  6025 00004A1D 89C6                <2> 		mov esi, eax
  6026 00004A1F 31C9                <2> 		xor ecx, ecx
  6027 00004A21 31DB                <2> 		xor ebx, ebx
  6028 00004A23 66891D[015E0000]    <2> 		mov [SegLoc], bx
  6029 00004A2A 81C300000800        <2> 		add ebx, 0x80000
  6030 00004A30 66B9FFFF            <2> 		mov cx, 0xFFFF
  6031 00004A34 6681FF0000          <2> 		cmp di, 0
  6032 00004A39 7520                <2> 		jne .autoinit
  6033 00004A3B 668B0D[F75D0000]    <2> 		mov cx, [Length1]
  6034 00004A42 C605[F25D0000]01    <2> 		mov byte [OddLength], 1
  6035 00004A49 6681F90080          <2> 		cmp cx, 32768
  6036 00004A4E 730B                <2> 		jae .autoinit
  6037 00004A50 C605[F25D0000]00    <2> 		mov byte [OddLength], 0
  6038 00004A57 66D1E1              <2> 		shl cx, 1
  6039 00004A5A 47                  <2> 		inc edi
  6040                              <2> .autoinit:
  6041 00004A5B 4F                  <2> 		dec edi
  6042 00004A5C 893D[F35D0000]      <2> 		mov [Length0], edi
  6043 00004A62 66890D[F75D0000]    <2> 		mov [Length1], cx
  6044 00004A69 66D1E9              <2> 		shr cx, 1
  6045 00004A6C 6641                <2> 		inc cx
  6046 00004A6E 01C8                <2> 		add eax, ecx
  6047 00004A70 A3[F95D0000]        <2> 		mov [NextMemLoc], eax
  6048 00004A75 8935[FD5D0000]      <2> 		mov	[MemLoc], esi
  6049 00004A7B E82A120000          <2> 		call DMACopy
  6050 00004A80 31DB                <2> 		xor ebx, ebx
  6051 00004A82 668B1D[015E0000]    <2> 		mov bx, [SegLoc]
  6052 00004A89 31C9                <2> 		xor ecx, ecx
  6053 00004A8B 668B0D[F75D0000]    <2> 		mov cx, [Length1]
  6054 00004A92 66D1E9              <2> 		shr cx, 1
  6055 00004A95 6641                <2> 		inc cx
  6056 00004A97 01CB                <2> 		add ebx, ecx
  6057 00004A99 66891D[015E0000]    <2> 		mov [SegLoc], bx
  6058 00004AA0 81C300000800        <2> 		add ebx, 0x80000
  6059 00004AA6 8B35[F95D0000]      <2> 		mov esi, [NextMemLoc]
  6060 00004AAC 89F0                <2> 		mov eax, esi
  6061 00004AAE 01C8                <2> 		add eax, ecx
  6062 00004AB0 A3[F95D0000]        <2> 		mov [NextMemLoc], eax
  6063 00004AB5 8935[FD5D0000]      <2> 		mov	[MemLoc], esi
  6064 00004ABB E8EA110000          <2> 		call DMACopy
  6065 00004AC0 E808120000          <2> 		call DMAPlay
  6066 00004AC5 E892120000          <2> 		call PlayDSP
  6067 00004ACA C3                  <2> 		ret
  6068                              <2> WAVSTART equ 64;44
  6069                              <2> wave_player:
  6070 00004ACB 803D[095E0000]01    <2> 	cmp byte [SoundBlaster], 1
  6071 00004AD2 0F840EFFFFFF        <2> 	je near sbplay
  6072 00004AD8 BE[E34A0000]        <2> 	mov esi, nosoundblaster
  6073 00004ADD E878D2FFFF          <2> 	call print
  6074 00004AE2 C3                  <2> 	ret
  6075                              <2> %else
  6076                              <2> 	wave_player:
  6077                              <2> 		mov esi, nosoundblaster
  6078                              <2> 		call print
  6079                              <2> 		ret
  6080                              <2> %endif
  6081 00004AE3 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6082 00004AEC 426C61737465722064- <2>
  6083 00004AF5 657465637465642E0A- <2>
  6084 00004AFE 00                  <2>
  6085                              <1> %include 'source/programs/pwd.asm'
  6086 00004AFF FF2C70776400        <2> db 255,44,"pwd",0
  6087 00004B05 BE[B2B90000]        <2> 	mov esi, currentfolder
  6088 00004B0A E839D2FFFF          <2> 	call printquiet
  6089 00004B0F BE[5E910000]        <2> 	mov esi, line
  6090 00004B14 E841D2FFFF          <2> 	call print
  6091 00004B19 C3                  <2> 	ret
  6092                              <2> 	
  6093                              <1> %include 'source/programs/reboot.asm'
  6094 00004B1A FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6095 00004B23 0F011D[2D4B0000]    <2> 		lidt [idtreboot]
  6096 00004B2A CD00                <2> 		int 0
  6097 00004B2C F4                  <2> 		hlt
  6098                              <2> 	
  6099 00004B2D 0000                <2> 	idtreboot dw 0
  6100 00004B2F 00000000            <2> 			  dd 0
  6101                              <2> 
  6102                              <2> 	coldboot:
  6103 00004B33 66B84000            <2> 		MOV AX, 0040h
  6104 00004B37 8EC0                <2> 		MOV ES, AX
  6105 00004B39 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6106 00004B42 00                  <2>
  6107 00004B43 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6108 00004B4A CF                  <2> 		IRET
  6109                              <2> 
  6110                              <2> 	warmboot:
  6111 00004B4B 66B84000            <2> 		MOV AX, 0040h
  6112 00004B4F 8EC0                <2> 		MOV ES, AX
  6113 00004B51 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6114 00004B5A 12                  <2>
  6115 00004B5B EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6116 00004B62 CF                  <2> 		IRET
  6117                              <2> 		
  6118                              <1> %include 'source/programs/reg.asm'
  6119 00004B63 FF2C72656700        <2> db 255,44,"reg",0
  6120 00004B69 CD03                <2> 	int 3
  6121 00004B6B C3                  <2> 	ret 
  6122                              <1> %include 'source/programs/show.asm'
  6123 00004B6C FF2C73686F7700      <2> db 255,44,"show",0
  6124 00004B73 8B3D[1D2E0000]      <2> 		mov edi, [currentcommandloc]
  6125 00004B79 81C705000000        <2> 		add edi, 5
  6126 00004B7F BE00008000          <2> 		mov esi, 0x800000
  6127 00004B84 E8EB190000          <2> 		call loadfile
  6128 00004B89 81FA94010000        <2> 		cmp edx, 404
  6129 00004B8F 0F8483000000        <2> 		je near filenotfound
  6130 00004B95 BE00008000          <2> 		mov esi, 0x800000
  6131                              <2> %ifdef gui.included
  6132 00004B9A 66813E424D          <2> 		cmp word [esi], "BM"
  6133 00004B9F 7410                <2> 		je bmpfound
  6134                              <2> %endif
  6135 00004BA1 E8B4D1FFFF          <2> 		call print
  6136 00004BA6 BE[5E910000]        <2> 		mov esi, line
  6137 00004BAB E8AAD1FFFF          <2> 		call print
  6138 00004BB0 C3                  <2> 		ret
  6139                              <2> %ifdef gui.included
  6140                              <2> bmpfound:
  6141 00004BB1 803D[5CA30000]00    <2> 		cmp byte [guion], 0
  6142 00004BB8 0F8428000000        <2> 		je near noguibmp
  6143 00004BBE BE00008000          <2> 		mov esi, 0x800000
  6144 00004BC3 31C9                <2> 		xor ecx, ecx
  6145 00004BC5 31D2                <2> 		xor edx, edx
  6146 00004BC7 31C0                <2> 		xor eax, eax
  6147 00004BC9 31DB                <2> 		xor ebx, ebx
  6148 00004BCB E8681B0000          <2> 		call showbmp
  6149 00004BD0 30C0                <2> 		xor al, al
  6150 00004BD2 B405                <2> 		mov ah, 5
  6151 00004BD4 CD30                <2> 		int 30h
  6152 00004BD6 E8D2210000          <2> 		call guiclear
  6153 00004BDB E8B11E0000          <2> 		call clearmousecursor
  6154 00004BE0 E818220000          <2> 		call reloadallgraphics
  6155 00004BE5 C3                  <2> 		ret
  6156                              <2> noguibmp:
  6157 00004BE6 BE[F14B0000]        <2> 		mov esi, warnguimsg
  6158 00004BEB E86AD1FFFF          <2> 		call print
  6159 00004BF0 C3                  <2> 		ret
  6160 00004BF1 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6161 00004BFA 6E6F7420626520646F- <2>
  6162 00004C03 6E6520776974686F75- <2>
  6163 00004C0C 742074686520475549- <2>
  6164 00004C15 2E0A00              <2>
  6165                              <2> %endif
  6166                              <2> 
  6167                              <2> filenotfound:
  6168 00004C18 BE[4B4C0000]        <2> 		mov esi, filenf
  6169 00004C1D E838D1FFFF          <2> 		call print
  6170 00004C22 8B35[1D2E0000]      <2> 		mov esi, [currentcommandloc]
  6171                              <2> findfilenotfoundzero:
  6172 00004C28 8A06                <2> 		mov al, [esi]
  6173 00004C2A 46                  <2> 		inc esi
  6174 00004C2B 3C00                <2> 		cmp al, 0
  6175 00004C2D 7411                <2> 		je nofilenamenotfound
  6176 00004C2F 81FE[26D40000]      <2> 		cmp esi, buftxtend
  6177 00004C35 7309                <2> 		jae nofilenamenotfound
  6178 00004C37 3C20                <2> 		cmp al, " "
  6179 00004C39 75ED                <2> 		jne findfilenotfoundzero
  6180 00004C3B E81AD1FFFF          <2> 		call print
  6181                              <2> nofilenamenotfound:
  6182 00004C40 BE[564C0000]        <2> 		mov esi, filenf2
  6183 00004C45 E810D1FFFF          <2> 		call print
  6184 00004C4A C3                  <2> 		ret
  6185 00004C4B 5468652066696C6520- <2> filenf db "The file ",34,0
  6186 00004C54 2200                <2>
  6187 00004C56 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6188 00004C5F 6F7420626520666F75- <2>
  6189 00004C68 6E642E0A00          <2>
  6190                              <1> %include 'source/programs/shush.asm'
  6191 00004C6D FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6192                              <2> shushprog:
  6193                              <2> %ifdef gui.included
  6194 00004C75 803D[5CA30000]00    <2> 	cmp byte [guion], 0
  6195 00004C7C 0F84B9000000        <2> 	je near .noswitchsize
  6196 00004C82 8B35[1D2E0000]      <2> 	mov esi, [currentcommandloc]
  6197 00004C88 81C606000000        <2> 	add esi, 6
  6198 00004C8E 56                  <2> 	push esi
  6199 00004C8F 4E                  <2> 	dec esi
  6200                              <2> .findspace:
  6201 00004C90 46                  <2> 	inc esi
  6202 00004C91 8A06                <2> 	mov al, [esi]
  6203 00004C93 3C00                <2> 	cmp al, 0
  6204 00004C95 0F84A0000000        <2> 	je near .noswitchsize
  6205 00004C9B 3C58                <2> 	cmp al, "X"
  6206 00004C9D 7408                <2> 	je .donefind
  6207 00004C9F 3C78                <2> 	cmp al, "x"
  6208 00004CA1 7404                <2> 	je .donefind
  6209 00004CA3 3C20                <2> 	cmp al, " "
  6210 00004CA5 75E9                <2> 	jne .findspace
  6211                              <2> .donefind:
  6212 00004CA7 30C0                <2> 	xor al, al
  6213 00004CA9 8806                <2> 	mov [esi], al
  6214 00004CAB 46                  <2> 	inc esi
  6215 00004CAC 89F7                <2> 	mov edi, esi
  6216 00004CAE E83DE5FFFF          <2> 	call cnvrttxt
  6217 00004CB3 89C8                <2> 	mov eax, ecx
  6218 00004CB5 5E                  <2> 	pop esi
  6219 00004CB6 50                  <2> 	push eax
  6220 00004CB7 89F7                <2> 	mov edi, esi
  6221 00004CB9 E832E5FFFF          <2> 	call cnvrttxt
  6222 00004CBE 89CB                <2> 	mov ebx, ecx
  6223 00004CC0 58                  <2> 	pop eax	
  6224 00004CC1 6681FB0000          <2> 	cmp bx, 0
  6225 00004CC6 0F846F000000        <2> 	je near .noswitchsize
  6226 00004CCC 663D0000            <2> 	cmp ax, 0
  6227 00004CD0 0F8465000000        <2> 	je near .noswitchsize
  6228 00004CD6 66C1E303            <2> 	shl bx, 3
  6229 00004CDA 66C1E004            <2> 	shl ax, 4
  6230 00004CDE 663B1D[29570000]    <2> 	cmp bx, [resolutionx]
  6231 00004CE5 7607                <2> 	jbe .nofixx
  6232 00004CE7 668B1D[29570000]    <2> 	mov bx, [resolutionx]
  6233                              <2> .nofixx:
  6234 00004CEE 66051000            <2> 	add ax, 16
  6235 00004CF2 663B05[2B570000]    <2> 	cmp ax, [resolutiony]
  6236 00004CF9 7606                <2> 	jbe .nofixy
  6237 00004CFB 66A1[2B570000]      <2> 	mov ax, [resolutiony]
  6238                              <2> .nofixy:
  6239 00004D01 662D1000            <2> 	sub ax, 16
  6240 00004D05 6631C9              <2> 	xor cx, cx
  6241 00004D08 6631D2              <2> 	xor dx, dx
  6242 00004D0B 66891D[9B710000]    <2> 	mov [termwindow], bx
  6243 00004D12 66A3[9D710000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6244 00004D18 BE[9B710000]        <2> 	mov esi, termwindow
  6245 00004D1D 31DB                <2> 	xor ebx, ebx
  6246 00004D1F 6631C0              <2> 	xor ax, ax
  6247 00004D22 E87D290000          <2> 	call showwindow
  6248 00004D27 E881200000          <2> 	call guiclear
  6249 00004D2C E88FD0FFFF          <2> 	call clear
  6250 00004D31 E8C7200000          <2> 	call reloadallgraphics
  6251 00004D36 E80E1E0000          <2> 	call switchmousepos2
  6252                              <2> .noswitchsize:
  6253                              <2> %endif
  6254 00004D3B BE[464D0000]        <2> 	mov esi, shushmsg
  6255 00004D40 E815D0FFFF          <2> 	call print
  6256 00004D45 C3                  <2> 	ret
  6257 00004D46 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6258 00004D4F 6F2074686520536F6C- <2>
  6259 00004D58 6C65724F5320486172- <2>
  6260 00004D61 646C7920556E69782D- <2>
  6261 00004D6A 436F6D70617469626C- <2>
  6262 00004D73 65205368656C6C210A- <2>
  6263 00004D7C 00                  <2>
  6264                              <1> %include 'source/programs/system.asm'
  6265 00004D7D FF2C73797374656D00  <2> 	db 255,44,"system",0
  6266 00004D86 BE[964E0000]        <2> 	mov esi, kernelinfomsg
  6267 00004D8B E8B8CFFFFF          <2> 	call printquiet
  6268 00004D90 B9[83A10000]        <2> 	mov ecx, osend
  6269 00004D95 E874E3FFFF          <2> 	call showdec
  6270 00004D9A BE[AB4E0000]        <2> 	mov esi, diskbytemsg
  6271 00004D9F E8A4CFFFFF          <2> 	call printquiet
  6272 00004DA4 B9[83A10000]        <2> 	mov ecx, osend
  6273 00004DA9 81C1[94BC0100]      <2> 	add ecx, commandbufend
  6274 00004DAF 81E9[5CA30000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6275 00004DB5 E854E3FFFF          <2> 	call showdec
  6276 00004DBA BE[C24E0000]        <2> 	mov esi, membytemsg
  6277 00004DBF E884CFFFFF          <2> 	call printquiet
  6278 00004DC4 BE[254F0000]        <2> 	mov esi, endofmemmsg
  6279 00004DC9 E87ACFFFFF          <2> 	call printquiet
  6280 00004DCE B9[A8F01100]        <2> 	mov ecx, bssend
  6281 00004DD3 E86CE2FFFF          <2> 	call showhex
  6282 00004DD8 BE[DB4E0000]        <2> 	mov esi, systeminfomsg
  6283 00004DDD E866CFFFFF          <2> 	call printquiet
  6284                              <2> getcpuspeed:
  6285 00004DE2 B8FE000000          <2> 	mov eax, 0xFE
  6286 00004DE7 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6287 00004DE9 B020                <2> 	mov al, 0x20
  6288 00004DEB E620                <2> 	out 0x20, al
  6289 00004DED F4                  <2> 	hlt
  6290 00004DEE 0F31                <2> 	rdtsc
  6291 00004DF0 89D6                <2> 	mov esi, edx
  6292 00004DF2 89C7                <2> 	mov edi, eax
  6293 00004DF4 31C0                <2> 	xor eax, eax
  6294 00004DF6 C605[46020000]01    <2> 	mov byte [testingcpuspeed], 1
  6295                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6296 00004DFD 40                  <2> 	inc eax
  6297 00004DFE EBFD                <2> 	jmp cpuspeedloop
  6298                              <2> cpuspeedloopend:
  6299 00004E00 0F31                <2> 	rdtsc
  6300 00004E02 29F8                <2> 	sub eax, edi
  6301 00004E04 29F2                <2> 	sub edx, esi
  6302 00004E06 8915[4F020000]      <2> 	mov [cpuclocksperint + 4], edx
  6303 00004E0C A3[4B020000]        <2> 	mov [cpuclocksperint], eax
  6304 00004E11 31C0                <2> 	xor eax, eax
  6305 00004E13 E621                <2> 	out 0x21, al
  6306 00004E15 B020                <2> 	mov al, 0x20
  6307 00004E17 E620                <2> 	out 0x20, al
  6308 00004E19 31D2                <2> 	xor edx, edx
  6309 00004E1B 31C0                <2> 	xor eax, eax
  6310 00004E1D A1[47020000]        <2> 	mov eax, [cpuspeedperint]
  6311 00004E22 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6312                              <2> 				;result by 2
  6313 00004E24 8B1D[59020000]      <2> 	mov ebx, [timeinterval]
  6314 00004E2A C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6315 00004E2D F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6316 00004E2F 89C1                <2> 	mov ecx, eax
  6317 00004E31 E8D8E2FFFF          <2> 	call showdec
  6318 00004E36 BE[094F0000]        <2> 	mov esi, cpuspeedmsg
  6319 00004E3B E808CFFFFF          <2> 	call printquiet
  6320 00004E40 31D2                <2> 	xor edx, edx
  6321 00004E42 A1[4B020000]        <2> 	mov eax, [cpuclocksperint]
  6322 00004E47 8B15[4F020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6323 00004E4D 8B1D[59020000]      <2> 	mov ebx, [timeinterval]
  6324 00004E53 C1EB0A              <2> 	shr ebx, 10
  6325 00004E56 F7F3                <2> 	div ebx
  6326 00004E58 89C1                <2> 	mov ecx, eax
  6327 00004E5A E8AFE2FFFF          <2> 	call showdec
  6328 00004E5F BE[0F4F0000]        <2> 	mov esi, cpuclockmsg
  6329 00004E64 E8DFCEFFFF          <2> 	call printquiet
  6330 00004E69 8B0D[53020000]      <2> 	mov ecx, [memoryspace]
  6331 00004E6F C1E914              <2> 	shr ecx, 20
  6332 00004E72 41                  <2> 	inc ecx	;the reading is one MB behind
  6333 00004E73 E896E2FFFF          <2> 	call showdec
  6334 00004E78 BE[144F0000]        <2> 	mov esi, memoryspacemsg
  6335 00004E7D E8D8CEFFFF          <2> 	call print
  6336                              <2> %ifdef sound.included
  6337 00004E82 803D[095E0000]00    <2> 	cmp byte [SoundBlaster], 0
  6338 00004E89 740A                <2> 	je .nosb
  6339 00004E8B BE[F14E0000]        <2> 	mov esi, soundblastermsg
  6340 00004E90 E8C5CEFFFF          <2> 	call print
  6341                              <2> .nosb:
  6342                              <2> %endif
  6343 00004E95 C3                  <2> 	ret
  6344                              <2> 
  6345 00004E96 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6346 00004E9F 666F726D6174696F6E- <2>
  6347 00004EA8 3A0A00              <2>
  6348 00004EAB 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6349 00004EB4 6B2053706163652055- <2>
  6350 00004EBD 7365640A00          <2>
  6351 00004EC2 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6352 00004ECB 6F7279205370616365- <2>
  6353 00004ED4 20557365640A00      <2>
  6354 00004EDB 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6355 00004EE4 6E666F726D6174696F- <2>
  6356 00004EED 6E3A0A00            <2>
  6357                              <2> %ifdef sound.included
  6358 00004EF1 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6359 00004EFA 746572204465746563- <2>
  6360 00004F03 7465642E0A00        <2>
  6361                              <2> %endif
  6362 00004F09 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6363 00004F0F 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6364 00004F14 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6365 00004F1D 2053706163650A00    <2>
  6366 00004F25 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6367 00004F2E 6D6F72792053706163- <2>
  6368 00004F37 653A20307800        <2>
  6369                              <1> %include 'source/programs/time.asm'
  6370 00004F3D 082E30303030303030- <2> timenscache db 8,".000000000"
  6371 00004F46 3030                <2>
  6372 00004F48 200A00              <2> timenscacheend: db " ",10,0
  6373 00004F4B 00                  <2> istimeset db 0
  6374 00004F4C 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  6375 00004F55 2063757272656E7420- <2>
  6376 00004F5E 554E49582074696D65- <2>
  6377 00004F67 3A0A00              <2>
  6378 00004F6A 00<rept>            <2> timeinputbuffer times 12 db 0
  6379 00004F76 00                  <2> timeinputbend: db 0
  6380                              <2> 
  6381 00004F77 FF2C74696D6500      <2> db 255,44,"time",0
  6382 00004F7E 803D[4B4F0000]00    <2> 	cmp byte [istimeset], 0
  6383 00004F85 753A                <2> 	jne timeisset
  6384 00004F87 BE[4C4F0000]        <2> 	mov esi, settimemsg
  6385 00004F8C E8C9CDFFFF          <2> 	call print
  6386 00004F91 BE[6A4F0000]        <2> 	mov esi, timeinputbuffer
  6387 00004F96 BF[764F0000]        <2> 	mov edi, timeinputbend
  6388 00004F9B E89BCEFFFF          <2> 	call readline
  6389 00004FA0 BE[6A4F0000]        <2> 	mov esi, timeinputbuffer
  6390 00004FA5 31FF                <2> 	xor edi, edi
  6391 00004FA7 E844E2FFFF          <2> 	call cnvrttxt
  6392 00004FAC 890D[5D020000]      <2> 	mov [timeseconds], ecx
  6393 00004FB2 31C9                <2> 	xor ecx, ecx
  6394 00004FB4 890D[61020000]      <2> 	mov [timenanoseconds], ecx
  6395 00004FBA C605[4B4F0000]01    <2> 	mov byte [istimeset], 1
  6396                              <2> timeisset:
  6397 00004FC1 8B0D[5D020000]      <2> 	mov ecx, [timeseconds]
  6398 00004FC7 E842E1FFFF          <2> 	call showdec
  6399                              <2> 	
  6400 00004FCC 8B0D[61020000]      <2> 	mov ecx, [timenanoseconds]
  6401 00004FD2 BE[3D4F0000]        <2> 	mov esi, timenscache
  6402 00004FD7 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6403 00004FDE C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6404 00004FE5 C6460A30            <2> 	mov byte [esi + 10], "0"
  6405 00004FE9 BE[484F0000]        <2> 	mov esi, timenscacheend
  6406 00004FEE E8FEDEFFFF          <2> 	call convert
  6407 00004FF3 BE[3D4F0000]        <2> 	mov esi, timenscache
  6408 00004FF8 E84BCDFFFF          <2> 	call printquiet
  6409                              <2> 	
  6410 00004FFD E82D000000          <2> 	call time
  6411 00005002 BE[FB510000]        <2> 	mov esi, timeshow
  6412 00005007 E83CCDFFFF          <2> 	call printquiet
  6413 0000500C BE[5E910000]        <2> 	mov esi, line
  6414 00005011 E832CDFFFF          <2> 	call printquiet
  6415 00005016 BE[04520000]        <2> 	mov esi, dateshow
  6416 0000501B E828CDFFFF          <2> 	call printquiet
  6417 00005020 BE[5E910000]        <2> 	mov esi, line
  6418 00005025 E81ECDFFFF          <2> 	call printquiet
  6419 0000502A E9BC000000          <2> 	jmp findday
  6420                              <2> time:
  6421 0000502F E84F010000          <2> 	call tstackput1
  6422 00005034 B00A                <2> 	mov al,10			;Get RTC register A
  6423 00005036 E879010000          <2> 	call tget1
  6424 0000503B A880                <2> 	test al,0x80			;Is update in progress?
  6425 0000503D 75F0                <2> 	jne time				; yes, wait
  6426                              <2> 
  6427 0000503F B000                <2> 	mov al,0			;Get seconds (00 to 59)
  6428 00005041 E86E010000          <2> 	call tget1
  6429 00005046 A2[F2510000]        <2> 	mov [RTCtimeSecond],al
  6430                              <2> 
  6431 0000504B B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  6432 0000504D E862010000          <2> 	call tget1
  6433 00005052 A2[F3510000]        <2> 	mov [RTCtimeMinute],al
  6434                              <2> 
  6435 00005057 B004                <2> 	mov al,0x04			;Get hours (see notes)
  6436 00005059 E856010000          <2> 	call tget1
  6437 0000505E A2[F4510000]        <2> 	mov [RTCtimeHour],al
  6438                              <2> 
  6439 00005063 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  6440 00005065 E84A010000          <2> 	call tget1
  6441 0000506A A2[F5510000]        <2> 	mov [RTCtimeDay],al
  6442                              <2> 
  6443 0000506F B008                <2> 	mov al,0x08			;Get month (01 to 12)
  6444 00005071 E83E010000          <2> 	call tget1
  6445 00005076 A2[F6510000]        <2> 	mov [RTCtimeMonth],al
  6446                              <2> 
  6447 0000507B B009                <2> 	mov al,0x09			;Get year (00 to 99)
  6448 0000507D E832010000          <2> 	call tget1
  6449 00005082 A2[F7510000]        <2> 	mov [RTCtimeYear],al
  6450                              <2> 	
  6451 00005087 BE[FB510000]        <2> 	mov esi, timeshow
  6452 0000508C 8A2D[F4510000]      <2> 	mov ch, [RTCtimeHour]
  6453 00005092 E828010000          <2> 	call tput1
  6454 00005097 8A2D[F3510000]      <2> 	mov ch, [RTCtimeMinute]
  6455 0000509D E81D010000          <2> 	call tput1
  6456 000050A2 8A2D[F2510000]      <2> 	mov ch, [RTCtimeSecond]
  6457 000050A8 E812010000          <2> 	call tput1
  6458 000050AD BE[04520000]        <2> 	mov esi, dateshow
  6459 000050B2 8A2D[F6510000]      <2> 	mov ch, [RTCtimeMonth]
  6460 000050B8 E802010000          <2> 	call tput1
  6461 000050BD 8A2D[F5510000]      <2> 	mov ch, [RTCtimeDay]
  6462 000050C3 E8F7000000          <2> 	call tput1
  6463 000050C8 B520                <2> 	mov ch, 0x20
  6464 000050CA E8F0000000          <2> 	call tput1
  6465 000050CF 4E                  <2> 	dec esi
  6466 000050D0 8A2D[F7510000]      <2> 	mov ch, [RTCtimeYear]
  6467 000050D6 E8E4000000          <2> 	call tput1
  6468 000050DB E8BD000000          <2> 	call tstackget1
  6469 000050E0 C3                  <2> 	ret
  6470 000050E1 BE[FB510000]        <2> 	mov esi, timeshow
  6471 000050E6 E86FCCFFFF          <2> 	call print
  6472                              <2> ;;get day of week
  6473                              <2> ;;add these:
  6474                              <2> ;;century value
  6475                              <2> ;;last 2 digits of year
  6476                              <2> ;;last 2 digits of year right shifted twice
  6477                              <2> ;;month table value
  6478                              <2> ;;day of the month
  6479                              <2> ;;divide these by 7
  6480                              <2> ;;the remainder is the day
  6481                              <2> findday:
  6482 000050EB 31C0                <2> 	xor eax, eax
  6483                              <2> ;;first convert the values from BCD to hex
  6484 000050ED A0[F5510000]        <2> 	mov al, [RTCtimeDay]
  6485 000050F2 E873000000          <2> 	call converttohex
  6486 000050F7 8825[F8510000]      <2> 	mov [dayhex], ah
  6487 000050FD A0[F6510000]        <2> 	mov al, [RTCtimeMonth]
  6488 00005102 E863000000          <2> 	call converttohex
  6489 00005107 8825[F9510000]      <2> 	mov [monthhex], ah
  6490 0000510D A0[F7510000]        <2> 	mov al, [RTCtimeYear]
  6491 00005112 E853000000          <2> 	call converttohex
  6492 00005117 8825[FA510000]      <2> 	mov [yearhex], ah
  6493 0000511D 31C0                <2> 	xor eax, eax
  6494 0000511F A0[FA510000]        <2> 	mov al, [yearhex]
  6495 00005124 C0E802              <2> 	shr al, 2
  6496 00005127 0205[FA510000]      <2> 	add al, [yearhex]
  6497 0000512D 0506000000          <2> 	add eax, 6
  6498 00005132 31DB                <2> 	xor ebx, ebx
  6499 00005134 8A1D[F9510000]      <2> 	mov bl, [monthhex]
  6500 0000513A FECB                <2> 	dec bl
  6501 0000513C 81C3[19520000]      <2> 	add ebx, month
  6502 00005142 31C9                <2> 	xor ecx, ecx
  6503 00005144 8A0B                <2> 	mov cl, [ebx]
  6504 00005146 01C8                <2> 	add eax, ecx
  6505 00005148 8A0D[F8510000]      <2> 	mov cl, [dayhex]
  6506 0000514E 01C8                <2> 	add eax, ecx
  6507 00005150 66BB0700            <2> 	mov bx, 7
  6508 00005154 31D2                <2> 	xor edx, edx
  6509 00005156 66F7F3              <2> 	div bx
  6510 00005159 C1E202              <2> 	shl edx, 2
  6511 0000515C 81C2[25520000]      <2> 	add edx, day
  6512 00005162 8B32                <2> 	mov esi, [edx]
  6513 00005164 E8F1CBFFFF          <2> 	call print
  6514 00005169 C3                  <2> 	ret
  6515                              <2> 	
  6516                              <2> converttohex:
  6517 0000516A 88C4                <2> 	mov ah, al
  6518 0000516C C0E804              <2> 	shr al, 4
  6519 0000516F C0E404              <2> 	shl ah, 4
  6520 00005172 C0EC04              <2> 	shr ah, 4
  6521 00005175 3C00                <2> 	cmp al, 0
  6522 00005177 7409                <2> 	je noconverttohex
  6523                              <2> converttohexlp:
  6524 00005179 80C40A              <2> 	add ah, 10
  6525 0000517C FEC8                <2> 	dec al
  6526 0000517E 3C00                <2> 	cmp al, 0
  6527 00005180 75F7                <2> 	jne converttohexlp
  6528                              <2> noconverttohex:
  6529 00005182 C3                  <2> 	ret
  6530                              <2> 	
  6531                              <2> tstackput1:
  6532 00005183 8935[EE510000]      <2> 	mov [tstack + 20], esi
  6533 00005189 BE[DA510000]        <2> 	mov esi, tstack
  6534 0000518E 8906                <2> 	mov [esi], eax
  6535 00005190 895E04              <2> 	mov [esi + 4], ebx
  6536 00005193 894E08              <2> 	mov [esi + 8], ecx
  6537 00005196 89560C              <2> 	mov [esi + 12], edx
  6538 00005199 897E10              <2> 	mov [esi + 16], edi
  6539 0000519C C3                  <2> 	ret
  6540                              <2> 	
  6541                              <2> tstackget1:
  6542 0000519D BE[DA510000]        <2> 	mov esi, tstack
  6543 000051A2 8B06                <2> 	mov eax, [esi]
  6544 000051A4 8B5E04              <2> 	mov ebx, [esi + 4]
  6545 000051A7 8B4E08              <2> 	mov ecx, [esi + 8]
  6546 000051AA 8B560C              <2> 	mov edx, [esi + 12]
  6547 000051AD 8B7E10              <2> 	mov edi, [esi + 16]
  6548 000051B0 8B7614              <2> 	mov esi, [esi + 20]
  6549 000051B3 C3                  <2> 	ret
  6550                              <2> 	
  6551                              <2> tget1:
  6552 000051B4 66BA7000            <2> 	mov dx, 0x70
  6553 000051B8 EE                  <2> 	out dx, al
  6554 000051B9 6642                <2> 	inc dx
  6555 000051BB EC                  <2> 	in al, dx
  6556 000051BC 664A                <2> 	dec dx
  6557 000051BE C3                  <2> 	ret
  6558                              <2> 	
  6559                              <2> tput1:
  6560 000051BF 66C1E904            <2> 	shr cx, 4
  6561 000051C3 B030                <2> 	mov al, 48
  6562 000051C5 00E8                <2> 	add al, ch
  6563 000051C7 8806                <2> 	mov [esi], al
  6564 000051C9 46                  <2> 	inc esi
  6565 000051CA B030                <2> 	mov al, 48
  6566 000051CC C0E904              <2> 	shr cl, 4
  6567 000051CF 00C8                <2> 	add al, cl
  6568 000051D1 8806                <2> 	mov [esi], al
  6569 000051D3 81C602000000        <2> 	add esi, 2
  6570 000051D9 C3                  <2> 	ret
  6571                              <2> 		
  6572 000051DA 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  6573 000051E3 000000000000000000- <2>
  6574 000051EC 000000000000        <2>
  6575 000051F2 00                  <2> 	RTCtimeSecond db 0
  6576 000051F3 00                  <2> 	RTCtimeMinute db 0
  6577 000051F4 00                  <2> 	RTCtimeHour db 0
  6578 000051F5 00                  <2> 	RTCtimeDay db 0
  6579 000051F6 00                  <2> 	RTCtimeMonth db 0
  6580 000051F7 00                  <2> 	RTCtimeYear db 0
  6581 000051F8 00                  <2> 	dayhex db 0
  6582 000051F9 00                  <2> 	monthhex db 0
  6583 000051FA 00                  <2> 	yearhex db 0
  6584 000051FB 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  6585 00005204 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  6586 0000520D 302000              <2>
  6587                              <2> 	oldcentury:	;;from 1700 to 1900
  6588 00005210 040200              <2> 	db 4,2,0
  6589                              <2> 	century:	;;from 2000 to 2500
  6590 00005213 060402000604        <2> 	db 6,4,2,0,6,4
  6591                              <2> 	month:
  6592 00005219 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  6593 00005222 000305              <2>
  6594                              <2> 	day:
  6595 00005225 [41520000]          <2> 	dd sunday
  6596 00005229 [49520000]          <2> 	dd monday
  6597 0000522D [51520000]          <2> 	dd tuesday
  6598 00005231 [5A520000]          <2> 	dd wednesday
  6599 00005235 [65520000]          <2> 	dd thursday
  6600 00005239 [6F520000]          <2> 	dd friday
  6601 0000523D [77520000]          <2> 	dd saturday
  6602                              <2> sunday:
  6603 00005241 53756E6461790A00    <2> 	db "Sunday",10,0
  6604                              <2> monday:
  6605 00005249 4D6F6E6461790A00    <2> 	db "Monday",10,0
  6606                              <2> tuesday:
  6607 00005251 547565736461790A00  <2> 	db "Tuesday",10,0
  6608                              <2> wednesday:
  6609 0000525A 5765646E6573646179- <2> 	db "Wednesday",10,0
  6610 00005263 0A00                <2>
  6611                              <2> thursday:
  6612 00005265 54687572736461790A- <2> 	db "Thursday",10,0
  6613 0000526E 00                  <2>
  6614                              <2> friday:
  6615 0000526F 4672696461790A00    <2> 	db "Friday",10,0
  6616                              <2> saturday:
  6617 00005277 53617475726461790A- <2> 	db "Saturday",10,0
  6618 00005280 00                  <2>
  6619                              <1> %include 'source/programs/turnoff.asm'
  6620 00005281 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6621 0000528A 00                  <2>
  6622                              <2> 	turnoff:
  6623 0000528B 66BB[A652]          <2> 			mov bx, shutdown
  6624 0000528F 66891D[050D0000]    <2> 			mov [realmodeptr], bx
  6625 00005296 BB[D0520000]        <2> 			mov ebx, halt
  6626 0000529B 891D[010D0000]      <2> 			mov [realmodereturn], ebx
  6627 000052A1 E944B9FFFF          <2> 			jmp realmode
  6628                              <2> 
  6629                              <2> [BITS 16]
  6630                              <2> 		shutdown:
  6631 000052A6 B453                <2> 			mov ah, 0x53
  6632 000052A8 B004                <2> 			mov al, 4
  6633 000052AA 31DB                <2> 			xor bx, bx
  6634 000052AC CD15                <2> 			int 0x15
  6635                              <2> 			
  6636 000052AE B453                <2> 			mov ah, 0x53
  6637 000052B0 B001                <2> 			mov al, 1
  6638 000052B2 31DB                <2> 			xor bx, bx
  6639 000052B4 CD15                <2> 			int 0x15
  6640                              <2> 			
  6641 000052B6 B453                <2> 			mov ah, 0x53
  6642 000052B8 B008                <2> 			mov al, 8
  6643 000052BA BB0100              <2> 			mov bx, 1
  6644 000052BD B90100              <2> 			mov cx, 1
  6645 000052C0 CD15                <2> 			int 0x15
  6646                              <2> 			
  6647 000052C2 B453                <2> 			mov ah, 0x53
  6648 000052C4 B007                <2> 			mov al, 7
  6649 000052C6 BB0100              <2> 			mov bx, 1
  6650 000052C9 B90300              <2> 			mov cx, 3
  6651 000052CC CD15                <2> 			int 0x15
  6652 000052CE EBFE                <2> 			jmp $
  6653                              <2> 			[BITS 32]
  6654 000052D0 EBFE                <2> halt: jmp $
  6655                              <1> %include 'source/programs/wait.asm'
  6656 000052D2 FF2C7761697400      <2> db 255,44,"wait",0
  6657                              <2> waitkey:
  6658 000052D9 E84ACFFFFF          <2> 		call getchar
  6659 000052DE C3                  <2> 		ret
  6660                              <1> %include 'source/programs/while.asm'
  6661 000052DF FF2C7768696C6500    <2> db 255,44,"while",0
  6662 000052E7 30C0                <2> whilecmd:  xor al, al
  6663 000052E9 3805[20BC0000]      <2> 	cmp [BATCHISON], al
  6664 000052EF 0F8426E6FFFF        <2> 	je near notbatch
  6665 000052F5 8B35[1CBC0000]      <2> 	mov esi, [BATCHPOS]
  6666 000052FB 81EE02000000        <2> 	sub esi, 2
  6667 00005301 4E                  <2> whilefnd: dec esi
  6668 00005302 8A06                <2> 	mov al, [esi]
  6669 00005304 3C0A                <2> 	cmp al, 10
  6670 00005306 0F840A000000        <2> 	je near whilefnd2
  6671 0000530C 3C00                <2> 	cmp al, 0
  6672 0000530E 0F8402000000        <2> 	je near whilefnd2
  6673 00005314 EBEB                <2> 	jmp whilefnd
  6674                              <2> whilefnd2:
  6675 00005316 46                  <2> 	inc esi
  6676 00005317 8935[22BC0000]      <2> 	mov [LOOPPOS], esi
  6677 0000531D C605[21BC0000]01    <2> 	mov BYTE [LOOPON], 1
  6678 00005324 BE[26D00000]        <2> 	mov esi, buftxt
  6679 00005329 BB[26D00000]        <2> 	mov ebx, buftxt
  6680 0000532E 81C306000000        <2> 	add ebx, 6
  6681 00005334 E999F0FFFF          <2> 	jmp chkeqsn
  6682                              <1> progend:		;programs end here	
  6683                              <1> batchprogend:
  6684                                  	%include "source/hardware.asm"
  6685                              <1> %ifdef gui.included
  6686                              <1> 	%include "source/drivers/video/vesa.asm"
  6687                              <2> [BITS 16]
  6688                              <2> guiswitch:
  6689 00005339 81F90000            <2> 	cmp cx, 0
  6690 0000533D 750B                <2> 	jne guiswitchdefnum
  6691 0000533F B81200              <2> 	mov ax, 12h
  6692 00005342 31DB                <2> 	xor bx, bx
  6693 00005344 CD10                <2> 	int 10h
  6694 00005346 E85100              <2> 	call guiloadagain
  6695                              <2> guiswitchnocando:
  6696 00005349 C3                  <2> 	ret	;return without switching as mode number is bad
  6697                              <2> guiswitchdefnum:	;switch to a defined mode number
  6698 0000534A B8004F              <2> 	mov ax, 0x4F00
  6699 0000534D BF[1755]            <2> 	mov di, VBEMODEBLOCK
  6700 00005350 CD10                <2> 	int 10h
  6701 00005352 BE[3955]            <2> 	mov si, reserved
  6702 00005355 81EE0200            <2> 	sub si, 2
  6703                              <2> .loop:
  6704 00005359 81C60200            <2> 	add si, 2
  6705 0000535D 81FE[1756]          <2> 	cmp si, oemdata
  6706 00005361 74E6                <2> 	je guiswitchnocando
  6707 00005363 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6708 00005367 74E0                <2> 	je guiswitchnocando
  6709 00005369 390C                <2> 	cmp [si], cx
  6710 0000536B 75EC                <2> 	jne .loop
  6711 0000536D 8936[7154]          <2> 	mov [videomodecache], si
  6712 00005371 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6713 00005375 B8014F              <2> 	mov ax, 0x4F01
  6714 00005378 BF[1757]            <2> 	mov di, VBEMODEINFOBLOCK
  6715 0000537B 890E[6F54]          <2> 	mov [vesamode], cx
  6716 0000537F CD10                <2> 	int 10h
  6717 00005381 E9CB00              <2> 	jmp selectedvesa
  6718                              <2> guiload:
  6719 00005384 BE[EF54]            <2> 	mov si, bootmsg
  6720 00005387 E8EDAC              <2> 	call printrm
  6721 0000538A 31C0                <2> 	xor ax, ax
  6722 0000538C CD16                <2> 	int 16h
  6723 0000538E 3C79                <2> 	cmp al, "y"
  6724 00005390 0F859DAC            <2> 	jne near vgaset
  6725 00005394 BE[5D91]            <2> 	mov si, crlf
  6726 00005397 E8DDAC              <2> 	call printrm
  6727                              <2> guiloadagain:
  6728 0000539A B8004F              <2> 	mov ax, 04F00h
  6729 0000539D BF[1755]            <2> 	mov di, VBEMODEBLOCK
  6730 000053A0 CD10                <2> 	int 10h
  6731 000053A2 BE[3955]            <2> 	mov si, reserved
  6732 000053A5 81EE0200            <2> 	sub si, 2
  6733                              <2> findvideomodes:
  6734 000053A9 81C60200            <2> 	add si, 2
  6735 000053AD 8B0C                <2> 	mov cx, [si]
  6736 000053AF 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6737 000053B3 0F840A00            <2> 	je near nextvmode
  6738 000053B7 81FE[1756]          <2> 	cmp si, oemdata
  6739 000053BB 0F8372AC            <2> 	jae near vgaset	;;kill if no valid list is found
  6740 000053BF EBE8                <2> 	jmp findvideomodes 	
  6741                              <2> ;;debug,shows vmodes available
  6742                              <2> nextvmode:
  6743 000053C1 81EE0200            <2> 	sub si, 2
  6744 000053C5 81FE[3955]          <2> 	cmp si, reserved
  6745 000053C9 0F82CDFF            <2> 	jb near guiloadagain
  6746 000053CD 8B0C                <2> 	mov cx, [si]
  6747 000053CF 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6748 000053D3 0F84EAFF            <2> 	je near nextvmode
  6749 000053D7 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  6750 000053DB B8014F              <2> 	mov ax, 04F01h
  6751 000053DE BF[1757]            <2> 	mov di, VBEMODEINFOBLOCK
  6752 000053E1 890E[6F54]          <2> 	mov [vesamode], cx
  6753 000053E5 CD10                <2> 	int 10h
  6754 000053E7 A0[3057]            <2> 	mov al, [bitsperpixel]
  6755 000053EA 3C10                <2> 	cmp al, 16
  6756 000053EC 75D3                <2> 	jne nextvmode
  6757 000053EE 8936[7154]          <2> 	mov [videomodecache], si
  6758 000053F2 84E4                <2> 	test ah, ah
  6759 000053F4 0F842200            <2> 	jz near setvesamode
  6760 000053F8 EBC7                <2> 	jmp nextvmode
  6761 000053FA 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  6762 00005403 20766964656F206D6F- <2>
  6763 0000540C 6465204F4B3F28792F- <2>
  6764 00005415 6E290D0A00          <2>
  6765                              <2> setvesamode:
  6766 0000541A 8B0E[2957]          <2> 	mov cx, [resolutionx]
  6767 0000541E E85900              <2> 	call decshow
  6768 00005421 B078                <2> 	mov al, "x"
  6769 00005423 E8C100              <2> 	call char
  6770 00005426 8B0E[2B57]          <2> 	mov cx, [resolutiony]
  6771 0000542A E84D00              <2> 	call decshow
  6772 0000542D B040                <2> 	mov al, "@"
  6773 0000542F E8B500              <2> 	call char
  6774 00005432 31C9                <2> 	xor cx, cx
  6775 00005434 8A0E[3057]          <2> 	mov cl, [bitsperpixel]
  6776 00005438 E83F00              <2> 	call decshow
  6777 0000543B BE[FA53]            <2> 	mov si, isthisvideook
  6778 0000543E E836AC              <2> 	call printrm
  6779 00005441 31C0                <2> 	xor ax, ax
  6780 00005443 CD16                <2> 	int 16h
  6781 00005445 8B36[7154]          <2> 	mov si, [videomodecache]
  6782 00005449 3C79                <2> 	cmp al, "y"
  6783 0000544B 0F8572FF            <2> 	jne near nextvmode
  6784                              <2> selectedvesa:
  6785 0000544F 8B16[2957]          <2> 	mov dx, [resolutionx]
  6786 00005453 01D2                <2> 	add dx, dx
  6787 00005455 8916[1758]          <2> 	mov [resolutionx2], dx
  6788 00005459 31D2                <2> 	xor dx, dx
  6789 0000545B 31C9                <2> 	xor cx, cx
  6790 0000545D B8024F              <2> 	mov ax, 04F02h
  6791 00005460 8B1E[6F54]          <2> 	mov bx, [vesamode]
  6792 00005464 CD10                <2> 	int 10h		;;enter VESA mode
  6793 00005466 C606[5CA3]01        <2> 	mov byte [guion], 1
  6794 0000546B E8D3AB              <2> 	call getmemorysize;get the memory map after the video is initialized
  6795 0000546E C3                  <2> 	ret
  6796                              <2> 	
  6797 0000546F 0000                <2> vesamode dw 0
  6798 00005471 0000                <2> videomodecache dw 0
  6799                              <2> 
  6800 00005473 0000000000          <2> dcnm db 0,0,0,0,0
  6801 00005478 0000                <2> dcnmend db 0,0
  6802                              <2> 
  6803                              <2> 
  6804                              <2> decshow:
  6805 0000547A BE[7354]            <2> 	mov si, dcnm
  6806                              <2> decclear:
  6807 0000547D B030                <2> 	mov al, "0"
  6808 0000547F 8804                <2> 	mov [si], al
  6809 00005481 46                  <2> 	inc si
  6810 00005482 81FE[7854]          <2> 	cmp si, dcnmend
  6811 00005486 76F5                <2> 	jbe decclear
  6812 00005488 4E                  <2> 	dec si
  6813 00005489 E81500              <2> 	call convertrm
  6814 0000548C BE[7354]            <2> 	mov si, dcnm
  6815                              <2> dectst:
  6816 0000548F 8A04                <2> 	mov al, [si]
  6817 00005491 46                  <2> 	inc si
  6818 00005492 81FE[7854]          <2> 	cmp si, dcnmend
  6819 00005496 7704                <2> 	ja dectstend
  6820 00005498 3C30                <2> 	cmp al, "0"
  6821 0000549A 76F3                <2> 	jbe dectst
  6822                              <2> dectstend:
  6823 0000549C 4E                  <2> 	dec si
  6824 0000549D E8D7AB              <2> 	call printrm
  6825 000054A0 C3                  <2> 	ret
  6826                              <2> 	
  6827                              <2> 	
  6828                              <2> convertrm:
  6829 000054A1 4E                  <2> 	dec si
  6830 000054A2 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  6831                              <2> cnvrtrm:
  6832 000054A4 89DE                <2> 	mov si, bx
  6833 000054A6 81EE0300            <2> 	sub si, 3
  6834 000054AA 46                  <2> ten3rm:	inc si
  6835 000054AB 81F9E803            <2> 	cmp cx, 1000
  6836 000054AF 7208                <2> 	jb ten2rm
  6837 000054B1 81E9E803            <2> 	sub cx, 1000
  6838 000054B5 FE04                <2> 	inc byte [si]
  6839 000054B7 EBEB                <2> 	jmp cnvrtrm
  6840 000054B9 46                  <2> ten2rm:	inc si
  6841 000054BA 81F96400            <2> 	cmp cx, 100
  6842 000054BE 7208                <2> 	jb ten1rm
  6843 000054C0 81E96400            <2> 	sub cx, 100
  6844 000054C4 FE04                <2> 	inc byte [si]
  6845 000054C6 EBDC                <2> 	jmp cnvrtrm
  6846 000054C8 46                  <2> ten1rm:	inc si
  6847 000054C9 81F90A00            <2> 	cmp cx, 10
  6848 000054CD 7208                <2> 	jb ten0rm
  6849 000054CF 81E90A00            <2> 	sub cx, 10
  6850 000054D3 FE04                <2> 	inc byte [si]
  6851 000054D5 EBCD                <2> 	jmp cnvrtrm
  6852 000054D7 46                  <2> ten0rm:	inc si
  6853 000054D8 81F90100            <2> 	cmp cx, 1
  6854 000054DC 7208                <2> 	jb tendnrm
  6855 000054DE 81E90100            <2> 	sub cx, 1
  6856 000054E2 FE04                <2> 	inc byte [si]
  6857 000054E4 EBBE                <2> 	jmp cnvrtrm
  6858                              <2> tendnrm:
  6859 000054E6 C3                  <2> 	ret
  6860                              <2> 
  6861                              <2>     char: 		    ;char must be in al
  6862 000054E7 BB0700              <2>        mov bx, 07
  6863 000054EA B40E                <2> 	   mov ah, 0Eh
  6864 000054EC CD10                <2> 	   int 10h
  6865 000054EE C3                  <2> 	   ret
  6866                              <2> 
  6867 000054EF 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  6868 000054F8 20746865204755493F- <2>
  6869 00005501 28792F6E2900        <2>
  6870                              <2> 
  6871                              <2> 
  6872                              <2> mcursor:
  6873 00005507 01                  <2> 	db	00000001b
  6874 00005508 81                  <2> 	db	10000001b
  6875 00005509 C1                  <2> 	db	11000001b
  6876 0000550A E1                  <2> 	db	11100001b
  6877 0000550B F1                  <2> 	db	11110001b
  6878 0000550C F9                  <2> 	db	11111001b
  6879 0000550D FD                  <2> 	db	11111101b
  6880 0000550E FF                  <2> 	db	11111111b
  6881 0000550F F9                  <2> 	db	11111001b
  6882 00005510 B9                  <2> 	db	10111001b
  6883 00005511 39                  <2> 	db	00111001b
  6884 00005512 1C                  <2> 	db	00011100b
  6885 00005513 1C                  <2> 	db	00011100b
  6886 00005514 0E                  <2> 	db	00001110b
  6887 00005515 0E                  <2> 	db	00001110b
  6888 00005516 0C                  <2> 	db	00001100b
  6889                              <2> mcursorend:
  6890                              <2> 
  6891                              <2> 
  6892                              <2> VBEMODEBLOCK:
  6893 00005517 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  6894 0000551B 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  6895 0000551D 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  6896 00005521 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  6897 00005525 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  6898 00005529 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  6899 0000552B 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  6900 0000552D 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  6901 00005531 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  6902 00005535 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  6903 00005539 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  6904 00005617 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  6905                              <2> 
  6906                              <2> VBEMODEINFOBLOCK:
  6907                              <2> ;Mandatory information for all VBE revision
  6908 00005717 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  6909 00005719 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  6910 0000571A 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  6911 0000571B 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  6912 0000571D 00<rept>            <2> winsize          	times  2 db 0	;Window size
  6913 0000571F 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  6914 00005721 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  6915 00005723 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  6916 00005727 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  6917                              <2> 
  6918                              <2> ;Mandatory information for VBE 1.2 and above
  6919 00005729 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  6920 0000572B 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  6921 0000572D 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  6922 0000572E 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  6923 0000572F 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  6924 00005730 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  6925 00005731 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  6926 00005732 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  6927 00005733 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  6928 00005734 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  6929 00005735 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  6930                              <2> 
  6931                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  6932 00005736 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  6933 00005737 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  6934 00005738 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  6935 00005739 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  6936 0000573A 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  6937 0000573B 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  6938 0000573C 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  6939 0000573D 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  6940 0000573E 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  6941                              <2> 
  6942                              <2> ;Mandatory information for VBE 2.0 and above
  6943 0000573F 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  6944 00005743 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  6945 00005747 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  6946 00005749 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  6947                              <2> 
  6948 00005817 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  6949                              <2> VBEEND:
  6950                              <2> [BITS 32]
  6951                              <1> 	%include "source/drivers/input/mouse.asm"
  6952 0000581B 00                  <2> mousedisabled db 0
  6953                              <2> 	
  6954                              <2> 	cursorgui:
  6955 0000581C 803D[44840000]01    <2> 		cmp byte [mouseon], 1
  6956 00005823 0F8432000000        <2> 		je near mousedaemon
  6957 00005829 803D[5CA30000]00    <2> 		cmp byte [guion], 0
  6958 00005830 0F8415070000        <2> 		je near entdown
  6959                              <2> 	initmouse:
  6960 00005836 803D[5CA30000]00    <2> 		cmp byte [guion], 0
  6961 0000583D 7405                <2> 		je noswmsposinit
  6962 0000583F E805130000          <2> 		call switchmousepos2
  6963                              <2> 	noswmsposinit:
  6964 00005844 E85D020000          <2> 	  	call PS2SET
  6965 00005849 E886020000          <2> 		call ACTMOUS
  6966 0000584E C605[44840000]01    <2> 		mov byte [mouseon],1
  6967 00005855 E89F020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  6968                              <2> 		;call GETB
  6969                              <2> 				;;If the bytes are mixed up,
  6970                              <2> 				;;remove this line or add another of this line.
  6971                              <2> 	nomouse:
  6972 0000585A C3                  <2> 		ret
  6973                              <2> 		
  6974                              <2> 	mousedaemon:
  6975 0000585B 803D[44840000]01    <2> 		cmp byte [mouseon], 1
  6976 00005862 75D2                <2> 		jne initmouse
  6977 00005864 E464                <2> 		in al, 64h ; Status
  6978 00005866 A820                <2> 		test al, 20h ; PS2-Mouse?
  6979 00005868 0F8502000000        <2> 		jnz near moused
  6980 0000586E F4                  <2> 		hlt
  6981 0000586F C3                  <2> 		ret
  6982                              <2> 	moused:
  6983 00005870 803D[1B580000]01    <2> 		cmp byte [mousedisabled], 1
  6984 00005877 74E1                <2> 		je nomouse
  6985 00005879 E87B020000          <2> 		  call GETB
  6986 0000587E 88C3                <2> 		  mov  bl, al
  6987 00005880 80E301              <2> 		  and  bl, 1
  6988 00005883 881D[1E5B0000]      <2> 		  mov  BYTE [LBUTTON], bl
  6989 00005889 88C3                <2> 		  mov  bl, al
  6990 0000588B 80E302              <2> 		  and  bl, 2
  6991 0000588E D0EB                <2> 		  shr  bl, 1
  6992 00005890 881D[1F5B0000]      <2> 		  mov  BYTE [RBUTTON], bl
  6993 00005896 88C3                <2> 		  mov  bl, al
  6994 00005898 80E304              <2> 		  and  bl, 4
  6995 0000589B C0EB02              <2> 		  shr  bl, 2
  6996 0000589E 881D[205B0000]      <2> 		  mov  BYTE [MBUTTON], bl
  6997 000058A4 E850020000          <2> 		  call GETB
  6998 000058A9 A2[215B0000]        <2> 		  mov  BYTE [XCOORD], al
  6999 000058AE E846020000          <2> 		  call GETB
  7000 000058B3 A2[225B0000]        <2> 		  mov  BYTE [YCOORD], al
  7001                              <2> 
  7002                              <2> 	showpixelcursor:
  7003 000058B8 668B15[0D5A0000]    <2> 		mov dx, [mousecursorposition]
  7004 000058BF 668B0D[0F5A0000]    <2> 		mov cx, [mousecursorposition + 2]
  7005 000058C6 668915[095A0000]    <2> 		mov [lastmouseposition], dx
  7006 000058CD 66890D[0B5A0000]    <2> 		mov [lastmouseposition + 2], cx
  7007 000058D4 A0[215B0000]        <2> 		mov al, [XCOORD]
  7008 000058D9 3C80                <2> 		cmp al, 128
  7009 000058DB 730C                <2> 		jae subxcoord
  7010 000058DD 00C0                <2> 		add al, al
  7011 000058DF 30E4                <2> 		xor ah, ah
  7012 000058E1 6601C2              <2> 		add dx, ax
  7013 000058E4 E90B000000          <2> 		jmp subxcoorddn
  7014                              <2> 	subxcoord:
  7015 000058E9 00C0                <2> 		add al, al
  7016 000058EB 30DB                <2> 		xor bl, bl
  7017 000058ED 28C3                <2> 		sub bl, al
  7018 000058EF 30FF                <2> 		xor bh, bh
  7019 000058F1 6629DA              <2> 		sub dx, bx
  7020                              <2> 	subxcoorddn:
  7021 000058F4 8A1D[225B0000]      <2> 		mov bl, [YCOORD]
  7022 000058FA 30C0                <2> 		xor al, al
  7023 000058FC 28D8                <2> 		sub al, bl
  7024 000058FE 3C80                <2> 		cmp al, 128
  7025 00005900 730A                <2> 		jae subycoord
  7026 00005902 30E4                <2> 		xor ah, ah
  7027 00005904 6601C1              <2> 		add cx, ax
  7028 00005907 E909000000          <2> 		jmp subycoorddn
  7029                              <2> 	subycoord:
  7030 0000590C 30DB                <2> 		xor bl, bl
  7031 0000590E 28C3                <2> 		sub bl, al
  7032 00005910 30FF                <2> 		xor bh, bh
  7033 00005912 6629D9              <2> 		sub cx, bx
  7034                              <2> 	subycoorddn:
  7035 00005915 6681FA204E          <2> 		cmp dx, 20000
  7036 0000591A 7603                <2> 		jbe nooriginx2
  7037 0000591C 6631D2              <2> 		xor dx, dx
  7038                              <2> 	nooriginx2:
  7039 0000591F 6681F9204E          <2> 		cmp cx, 20000
  7040 00005924 7603                <2> 		jbe nooriginy2
  7041 00005926 6631C9              <2> 		xor cx, cx
  7042                              <2> 	nooriginy2:
  7043 00005929 6681FA0000          <2> 		cmp dx, 0
  7044 0000592E 7415                <2> 		je nofixxcolumn2
  7045 00005930 663B15[17580000]    <2> 		cmp dx, [resolutionx2]
  7046 00005937 720C                <2> 		jb nofixxcolumn2
  7047 00005939 668B15[17580000]    <2> 		mov dx, [resolutionx2]
  7048 00005940 6681EA0200          <2> 		sub dx, 2
  7049                              <2> 	nofixxcolumn2:
  7050 00005945 6681F90000          <2> 		cmp cx, 0
  7051 0000594A 7415                <2> 		je nofixyrow2
  7052 0000594C 663B0D[2B570000]    <2> 		cmp cx, [resolutiony]
  7053 00005953 720C                <2> 		jb nofixyrow2
  7054 00005955 668B0D[2B570000]    <2> 		mov cx, [resolutiony]
  7055 0000595C 6681E90100          <2> 		sub cx, 1
  7056                              <2> 	nofixyrow2:
  7057 00005961 668915[0D5A0000]    <2> 		mov [mousecursorposition], dx
  7058 00005968 66890D[0F5A0000]    <2> 		mov [mousecursorposition + 2], cx
  7059 0000596F 803D[5CA30000]00    <2> 		cmp byte [guion], 0
  7060 00005976 0F8495000000        <2> 		je near termmouse
  7061 0000597C E868110000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  7062 00005981 803D[1E5B0000]01    <2> 		cmp byte [LBUTTON], 1
  7063 00005988 0F8479220000        <2> 		je near clickicon
  7064 0000598E 803D[1F5B0000]01    <2> 		cmp byte [RBUTTON], 1
  7065 00005995 0F846C220000        <2> 		je near clickicon
  7066 0000599B A0[F47B0000]        <2> 		mov al, [pbutton]
  7067 000059A0 C705[F77B0000]0000- <2> 		mov dword [dragging], 0
  7068 000059A8 0000                <2>
  7069 000059AA 3C00                <2> 		cmp al, 0
  7070 000059AC 740F                <2> 		je nopreviousbutton
  7071 000059AE E8DE100000          <2> 		call clearmousecursor
  7072 000059B3 E845140000          <2> 		call reloadallgraphics
  7073                              <2> 	windowtermcopyend:
  7074 000059B8 E88C110000          <2> 		call switchmousepos2
  7075                              <2> 	nopreviousbutton:
  7076 000059BD 30C0                <2> 		xor al, al
  7077 000059BF A2[F47B0000]        <2> 		mov [pbutton], al
  7078 000059C4 A2[5B810000]        <2> 		mov [windrag], al
  7079 000059C9 A0[1E5B0000]        <2> 		mov al, [LBUTTON]
  7080 000059CE A2[F57B0000]        <2> 		mov [pLBUTTON], al
  7081 000059D3 A0[1F5B0000]        <2> 		mov al, [RBUTTON]
  7082 000059D8 A2[F67B0000]        <2> 		mov [pRBUTTON], al
  7083 000059DD 31D2                <2> 		xor edx, edx
  7084 000059DF 668B15[0D5A0000]    <2> 		mov dx, [mousecursorposition]
  7085 000059E6 668B0D[0F5A0000]    <2> 		mov cx, [mousecursorposition + 2]
  7086 000059ED 66BB18C7            <2> 		mov bx, 1100011100011000b
  7087 000059F1 30E4                <2> 		xor ah, ah
  7088 000059F3 B0FE                <2> 		mov al, 254
  7089 000059F5 C605[F17B0000]01    <2> 		mov byte [showcursorfonton], 1
  7090 000059FC E88C1A0000          <2> 		call showfontvesa
  7091 00005A01 C605[F17B0000]00    <2> 		mov byte [showcursorfonton], 0
  7092 00005A08 C3                  <2> 		ret
  7093                              <2> 
  7094 00005A09 00000000            <2> lastmouseposition dw 0,0
  7095 00005A0D 00000000            <2> mousecursorposition dw 0,0	
  7096                              <2> 
  7097                              <2> termmouse:
  7098 00005A11 BE[3CD70000]        <2> 		mov esi, videobuf
  7099 00005A16 31D2                <2> 		xor edx, edx
  7100 00005A18 668B15[095A0000]    <2> 		mov dx, [lastmouseposition]
  7101 00005A1F 668B0D[0B5A0000]    <2> 		mov cx, [lastmouseposition + 2]
  7102 00005A26 66A1[A45A0000]      <2> 		mov ax, [cursorcache]
  7103 00005A2C 663D0000            <2> 		cmp ax, 0
  7104 00005A30 7425                <2> 		je nocopycursorcache
  7105 00005A32 66C1E104            <2> 		shl cx, 4
  7106 00005A36 66C1E203            <2> 		shl dx, 3
  7107 00005A3A 01D6                <2> 		add esi, edx
  7108 00005A3C 6631D2              <2> 		xor dx, dx
  7109 00005A3F 8A15[76240000]      <2> 		mov dl, [charxy]
  7110 00005A45 6641                <2> 		inc cx
  7111                              <2> termmousecplp1:
  7112 00005A47 01D6                <2> 		add esi, edx
  7113 00005A49 6649                <2> 		dec cx
  7114 00005A4B 6681F90000          <2> 		cmp cx, 0
  7115 00005A50 75F5                <2> 		jne termmousecplp1
  7116 00005A52 29D6                <2> 		sub esi, edx
  7117 00005A54 668906              <2> 		mov [esi], ax
  7118                              <2> nocopycursorcache:
  7119 00005A57 BE[3CD70000]        <2> 		mov esi, videobuf
  7120 00005A5C 31D2                <2> 		xor edx, edx
  7121 00005A5E 668B15[0D5A0000]    <2> 		mov dx, [mousecursorposition]
  7122 00005A65 668B0D[0F5A0000]    <2> 		mov cx, [mousecursorposition + 2]
  7123 00005A6C 66C1E104            <2> 		shl cx, 4
  7124 00005A70 66C1E203            <2> 		shl dx, 3
  7125 00005A74 01D6                <2> 		add esi, edx
  7126 00005A76 6631D2              <2> 		xor dx, dx
  7127 00005A79 8A15[76240000]      <2> 		mov dl, [charxy]
  7128 00005A7F 6641                <2> 		inc cx
  7129                              <2> termmousecplp2:
  7130 00005A81 01D6                <2> 		add esi, edx
  7131 00005A83 6649                <2> 		dec cx
  7132 00005A85 6681F90000          <2> 		cmp cx, 0
  7133 00005A8A 75F5                <2> 		jne termmousecplp2
  7134 00005A8C 29D6                <2> 		sub esi, edx
  7135 00005A8E 668B06              <2> 		mov ax, [esi]
  7136 00005A91 66A3[A45A0000]      <2> 		mov [cursorcache], ax
  7137 00005A97 B080                <2> 		mov al, 128
  7138 00005A99 B407                <2> 		mov ah, 7
  7139 00005A9B 668906              <2> 		mov [esi], ax
  7140 00005A9E E8ACCCFFFF          <2> 		call termcopy
  7141 00005AA3 C3                  <2> 		ret
  7142 00005AA4 0000                <2> cursorcache db 0,0
  7143                              <2> 
  7144                              <2> PS2SET:
  7145 00005AA6 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7146 00005AA8 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7147 00005AAA E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7148 00005AAF C3                  <2> ret
  7149                              <2> 
  7150                              <2> CHKPRT:
  7151 00005AB0 66B96400            <2>   mov  cx, 100
  7152                              <2>  .again:
  7153 00005AB4 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7154 00005AB6 A802                <2>   test al, 2		; Check if input buffer is empty
  7155 00005AB8 7402                <2>   je .go
  7156 00005ABA E2F8                <2>   loop .again
  7157                              <2>  .go:
  7158 00005ABC C3                  <2> ret
  7159                              <2> 
  7160                              <2> WMOUS:
  7161 00005ABD B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7162 00005ABF E664                <2>   out  0x64, al		; write to keyboardcontroller
  7163 00005AC1 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7164 00005AC6 C3                  <2> ret
  7165                              <2> 
  7166                              <2> MBUFFUL:
  7167 00005AC7 66B96400            <2>   mov cx, 100
  7168                              <2>  .mn:
  7169 00005ACB E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7170 00005ACD A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7171 00005ACF 7402                <2>   jz  .mnn
  7172 00005AD1 E2F8                <2>   loop .mn
  7173                              <2>  .mnn:
  7174 00005AD3 C3                  <2> ret
  7175                              <2> 
  7176                              <2> 
  7177                              <2> ACTMOUS:
  7178 00005AD4 E8E4FFFFFF          <2>   call WMOUS
  7179 00005AD9 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7180 00005ADB E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7181 00005ADD E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7182 00005AE2 E801000000          <2>   call CHKMOUS		; check if a byte is available
  7183 00005AE7 C3                  <2> ret
  7184                              <2> 
  7185                              <2> CHKMOUS:
  7186 00005AE8 B300                <2>   mov  bl, 0
  7187 00005AEA 66B96400            <2>   mov cx, 100
  7188                              <2>  .vrd:
  7189 00005AEE E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7190 00005AF0 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7191 00005AF2 7504                <2>   jnz .yy
  7192 00005AF4 E2F8                <2>   loop .vrd
  7193 00005AF6 B301                <2>   mov  bl, 1
  7194                              <2>  .yy:
  7195 00005AF8 C3                  <2> ret
  7196                              <2> 
  7197                              <2> GETB:
  7198                              <2>  .cagain:
  7199 00005AF9 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7200 00005AFE 08DB                <2>   or bl, bl
  7201 00005B00 75F7                <2>   jnz .cagain
  7202 00005B02 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7203 00005B04 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7204 00005B06 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7205 00005B0B 6631C0              <2>   xor  ax, ax
  7206 00005B0E E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7207 00005B10 88C2                <2>   mov  dl, al
  7208 00005B12 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7209 00005B14 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7210 00005B16 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7211 00005B1B 88D0                <2>   mov  al, dl
  7212 00005B1D C3                  <2> ret
  7213                              <2> 
  7214 00005B1E 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7215 00005B1F 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7216 00005B20 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7217 00005B21 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7218 00005B22 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7219                              <1> %endif
  7220                              <1> %include "source/drivers/sound/pcspkr.asm"
  7221                              <2> ;PC Speaker Drivers
  7222                              <2> PCSpeakerRAW:
  7223 00005B23 60                  <2> 	pusha
  7224                              <2> nosoundrep:
  7225 00005B24 8B35[68020000]      <2> 	mov esi, [soundpos]
  7226 00005B2A 31C9                <2> 	xor ecx, ecx
  7227 00005B2C 668B0D[66020000]    <2> 	mov cx, [soundrepititions]
  7228 00005B33 6681F90000          <2> 	cmp cx, 0
  7229 00005B38 0F8548000000        <2> 	jne near donesetpitch
  7230 00005B3E 668B0E              <2> 	mov cx, [esi]
  7231 00005B41 668B5E02            <2> 	mov bx, [esi + 2]
  7232 00005B45 66890D[66020000]    <2> 	mov [soundrepititions], cx
  7233 00005B4C 81C604000000        <2> 	add esi, 4
  7234 00005B52 8935[68020000]      <2> 	mov [soundpos], esi
  7235 00005B58 3B35[6C020000]      <2> 	cmp esi, [soundendpos]
  7236 00005B5E 7735                <2> 	ja stopsound
  7237 00005B60 66813D[66020000]00- <2> 	cmp word [soundrepititions], 0
  7238 00005B68 00                  <2>
  7239 00005B69 74B9                <2> 	je nosoundrep
  7240 00005B6B 6681FB0000          <2> 	cmp bx, 0
  7241 00005B70 740F                <2> 	je nosoundplay
  7242 00005B72 E840000000          <2> 	call setpitch
  7243 00005B77 E849000000          <2> 	call startsound
  7244 00005B7C E905000000          <2> 	jmp donesetpitch
  7245                              <2> nosoundplay:
  7246 00005B81 E846000000          <2> 	call killsound
  7247                              <2> donesetpitch:
  7248 00005B86 6649                <2> 	dec cx
  7249 00005B88 66890D[66020000]    <2> 	mov [soundrepititions], cx
  7250 00005B8F 61                  <2> 	popa
  7251 00005B90 E910A7FFFF          <2> 	jmp timerinterrupt
  7252                              <2> stopsound:
  7253 00005B95 31C0                <2> 	xor eax, eax
  7254 00005B97 66A3[66020000]      <2> 	mov [soundrepititions], ax
  7255 00005B9D A2[65020000]        <2> 	mov [soundon], al
  7256 00005BA2 A3[68020000]        <2> 	mov [soundpos], eax
  7257 00005BA7 A3[6C020000]        <2> 	mov [soundendpos], eax
  7258 00005BAC E81B000000          <2> 	call killsound
  7259 00005BB1 61                  <2> 	popa
  7260 00005BB2 E9EEA6FFFF          <2> 	jmp timerinterrupt
  7261                              <2> 
  7262                              <2> 
  7263                              <2> setpitch:
  7264 00005BB7 B0B6                <2> 	mov al, 0xB6
  7265 00005BB9 E643                <2> 	out 0x43, al
  7266 00005BBB 6689D8              <2> 	mov ax, bx
  7267 00005BBE E642                <2> 	out 0x42, al
  7268 00005BC0 88E0                <2> 	mov al, ah
  7269 00005BC2 E642                <2> 	out 0x42, al
  7270 00005BC4 C3                  <2> 	ret
  7271                              <2> startsound:
  7272 00005BC5 E461                <2> 	in al, 0x61
  7273 00005BC7 0C03                <2> 	or al, 3
  7274 00005BC9 E661                <2> 	out 0x61, al
  7275 00005BCB C3                  <2> 	ret
  7276                              <2> killsound:
  7277 00005BCC E461                <2> 	in al, 0x61
  7278 00005BCE 24FC                <2> 	and al, 0xFC
  7279 00005BD0 E661                <2> 	out 0x61, al
  7280 00005BD2 C3                  <2> 	ret
  7281                              <2> 	
  7282                              <1> %ifdef sound.included
  7283                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7284                              <2> ;Sound Blaster Drivers
  7285                              <2> sblaster:
  7286                              <2> .init:
  7287 00005BD3 E8D7010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  7288 00005BD8 A2[095E0000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  7289 00005BDD 3C00                <2> 		cmp al, 0
  7290 00005BDF 7418                <2> 		je .noinit
  7291 00005BE1 B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  7292 00005BE3 E8FB010000          <2> 		call WriteDSP
  7293 00005BE8 B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  7294 00005BEA E8B1010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  7295 00005BEF BE[FA5B0000]        <2> 		mov esi, .initmsg
  7296 00005BF4 E861C1FFFF          <2> 		call print
  7297                              <2> .noinit:
  7298 00005BF9 C3                  <2> 		ret
  7299 00005BFA 536F756E64626C6173- <2> .initmsg db "Soundblaster Initialized",10,0
  7300 00005C03 74657220496E697469- <2>
  7301 00005C0C 616C697A65640A00    <2>
  7302                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  7303 00005C14 813D[F35D0000]0000- <2> 	cmp dword [Length0], 0
  7304 00005C1C 0000                <2>
  7305 00005C1E 0F8462000000        <2> 	je near .done
  7306 00005C24 FF0D[F35D0000]      <2> 	dec dword [Length0]
  7307 00005C2A E908000000          <2> 	jmp .notodd
  7308                              <2> .oddlength:
  7309 00005C2F 31C9                <2> 	xor ecx, ecx
  7310 00005C31 880D[F25D0000]      <2> 	mov [OddLength], cl
  7311                              <2> .notodd:
  7312 00005C37 8B35[F95D0000]      <2> 	mov esi, [NextMemLoc]
  7313 00005C3D 31C9                <2> 	xor ecx, ecx
  7314 00005C3F 668B0D[F75D0000]    <2> 	mov cx, [Length1]
  7315 00005C46 D1E9                <2> 	shr ecx, 1
  7316 00005C48 6641                <2> 	inc cx
  7317 00005C4A 31DB                <2> 	xor ebx, ebx
  7318 00005C4C 668B1D[015E0000]    <2> 	mov bx, [SegLoc]
  7319 00005C53 6601CB              <2> 	add bx, cx
  7320 00005C56 66891D[015E0000]    <2> 	mov [SegLoc], bx
  7321 00005C5D 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  7322 00005C63 8935[FD5D0000]      <2> 	mov [MemLoc], esi
  7323 00005C69 89C8                <2> 	mov eax, ecx
  7324 00005C6B 01F0                <2> 	add eax, esi
  7325 00005C6D A3[F95D0000]        <2> 	mov [NextMemLoc], eax
  7326 00005C72 E833000000          <2> 	call DMACopy
  7327                              <2> 	;call DMAPlay
  7328 00005C77 E8E0000000          <2> 	call PlayDSP
  7329 00005C7C 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7330 00005C80 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7331 00005C81 E9EEA6FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  7332                              <2> .done:
  7333 00005C86 803D[F25D0000]01    <2> 	cmp byte [OddLength], 1
  7334 00005C8D 74A0                <2> 	je .oddlength
  7335 00005C8F 31C0                <2> 	xor eax, eax
  7336 00005C91 66A3[F75D0000]      <2> 	mov [Length1], ax
  7337 00005C97 66B8D000            <2> 	mov ax, 0xD0
  7338 00005C9B E843010000          <2> 	call WriteDSP
  7339 00005CA0 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7340 00005CA4 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7341 00005CA5 E9CAA6FFFF          <2> 	jmp handled2
  7342                              <2> 	
  7343                              <2> DMACopy:
  7344 00005CAA 66B80800            <2> 		mov ax, LINEAR_SEL
  7345 00005CAE 8EE0                <2> 		mov fs, ax
  7346 00005CB0 C1E902              <2> 		shr ecx, 2
  7347                              <2> .loop:
  7348 00005CB3 8B06                <2> 		mov eax, [esi]
  7349 00005CB5 648903              <2> 		mov [fs:ebx], eax
  7350 00005CB8 81C604000000        <2> 		add esi, 4
  7351 00005CBE 81C304000000        <2> 		add ebx, 4
  7352 00005CC4 E2ED                <2> 		loop .loop
  7353 00005CC6 66B83000            <2> 		mov ax, NEW_DATA_SEL
  7354 00005CCA 8EE0                <2> 		mov fs, ax
  7355 00005CCC C3                  <2> 		ret
  7356                              <2> 		
  7357                              <2> 
  7358                              <2> DMAPlay:    ;uses eax ebx edx
  7359 00005CCD C605[035E0000]00    <2> 		mov	byte [Page1],00h
  7360                              <2> 
  7361 00005CD4 B005                <2> 		mov	al,(Channel+4)
  7362 00005CD6 66BA0A00            <2> 		mov	dx,0Ah
  7363 00005CDA EE                  <2> 		out	dx,al
  7364 00005CDB 30C0                <2> 		xor	al,al
  7365 00005CDD 66BA0C00            <2> 		mov	dx,0Ch
  7366 00005CE1 EE                  <2> 		out	dx,al
  7367 00005CE2 B059                <2> 		mov	al,ModeReg
  7368 00005CE4 66BA0B00            <2> 		mov	dx,0Bh
  7369 00005CE8 EE                  <2> 		out	dx,al
  7370 00005CE9 B800000800          <2> 		mov	eax,0x80000
  7371 00005CEE 66BA0200            <2> 		mov	dx,AddPort
  7372 00005CF2 EE                  <2> 		out	dx,al
  7373 00005CF3 86C4                <2> 		xchg al,ah
  7374 00005CF5 EE                  <2> 		out	dx,al
  7375 00005CF6 B800000800          <2> 		mov	eax,0x80000
  7376 00005CFB 89C2                <2> 		mov	edx,eax
  7377 00005CFD 2500000100          <2> 		and	eax,65536
  7378 00005D02 7406                <2> 		jz	MemLocN1
  7379 00005D04 FE05[035E0000]      <2> 		inc	byte [Page1]
  7380                              <2> MemLocN1:
  7381 00005D0A 89D0                <2> 		mov	eax,edx
  7382 00005D0C 2500000200          <2> 		and	eax,131072
  7383 00005D11 7407                <2> 		jz	MemLocN2
  7384 00005D13 8005[035E0000]02    <2> 		add	byte [Page1],02
  7385                              <2> MemLocN2:
  7386 00005D1A 89D0                <2> 		mov	eax,edx
  7387 00005D1C 2500000400          <2> 		and	eax,262144
  7388 00005D21 7407                <2> 		jz	MemLocN3
  7389 00005D23 8005[035E0000]04    <2> 		add	byte [Page1],04
  7390                              <2> MemLocN3:
  7391 00005D2A 89D0                <2> 		mov	eax,edx
  7392 00005D2C 2500000800          <2> 		and	eax,524288
  7393 00005D31 7407                <2> 		jz	MemLocN4
  7394 00005D33 8005[035E0000]08    <2> 		add	byte [Page1],08
  7395                              <2> MemLocN4:
  7396 00005D3A 66BA8300            <2> 		mov	dx,PgPort
  7397 00005D3E A0[035E0000]        <2> 		mov	al,[Page1]
  7398 00005D43 EE                  <2> 		out	dx,al
  7399 00005D44 66BA0300            <2> 		mov	dx,LenPort
  7400 00005D48 66A1[F75D0000]      <2> 		mov	ax,[Length1]
  7401 00005D4E 6648                <2> 		dec ax
  7402 00005D50 EE                  <2> 		out	dx,al
  7403 00005D51 86C4                <2> 		xchg al,ah
  7404 00005D53 EE                  <2> 		out	dx,al
  7405 00005D54 66BA0A00            <2> 		mov	dx,0Ah
  7406 00005D58 B001                <2> 		mov	al,Channel
  7407 00005D5A EE                  <2> 		out	dx,al
  7408 00005D5B C3                  <2> 		ret
  7409                              <2> 		
  7410                              <2> PlayDSP:
  7411 00005D5C B040                <2> 		mov	al,40h
  7412 00005D5E E880000000          <2> 		call WriteDSP
  7413 00005D63 31D2                <2> 		xor	edx,edx
  7414 00005D65 B840420F00          <2> 		mov	eax,1000000
  7415 00005D6A 8B1D[045E0000]      <2> 		mov	ebx,[Freq]
  7416 00005D70 F7F3                <2> 		div	ebx
  7417 00005D72 89C3                <2> 		mov	ebx,eax
  7418 00005D74 B800010000          <2> 		mov	eax,256
  7419 00005D79 29D8                <2> 		sub	eax,ebx
  7420 00005D7B E863000000          <2> 		call WriteDSP
  7421 00005D80 A0[085E0000]        <2> 		mov	al,[WAVEMode]	;write the mode
  7422 00005D85 E859000000          <2> 		call WriteDSP
  7423 00005D8A 66A1[F75D0000]      <2> 		mov	ax,[Length1]
  7424 00005D90 66D1E8              <2> 		shr ax, 1
  7425 00005D93 E84B000000          <2> 		call WriteDSP
  7426 00005D98 86C4                <2> 		xchg al,ah
  7427 00005D9A E844000000          <2> 		call WriteDSP
  7428 00005D9F C3                  <2> 		ret
  7429                              <2> 
  7430                              <2> MstrVol:    ;uses ax dx
  7431 00005DA0 6650                <2> 	   push ax
  7432 00005DA2 66BA2402            <2> 	   mov	dx,(BasePort+4)
  7433 00005DA6 B022                <2> 	   mov	al,22h
  7434 00005DA8 EE                  <2> 	   out	dx,al
  7435 00005DA9 6658                <2> 	   pop	ax
  7436 00005DAB 6642                <2> 	   inc	dx
  7437 00005DAD EE                  <2> 	   out	dx,al
  7438 00005DAE C3                  <2> 	   ret
  7439                              <2> 	   
  7440                              <2> ResetDSP:   ; uses cx dx
  7441 00005DAF 66BA2602            <2> 			mov	dx,(BasePort+6)
  7442 00005DB3 B001                <2> 			mov	al,01
  7443 00005DB5 EE                  <2> 			out	dx,al
  7444 00005DB6 66B93200            <2> 			mov	cx,50
  7445 00005DBA EC                  <2> WaitIt1:	in	al,dx
  7446 00005DBB E2FD                <2> 			loop WaitIt1
  7447 00005DBD 30C0                <2> 			xor	al,al
  7448 00005DBF EE                  <2> 			out	dx,al
  7449 00005DC0 66B93200            <2> 			mov	cx,50
  7450 00005DC4 EC                  <2> WaitIt2:	in	al,dx
  7451 00005DC5 E2FD                <2> 			loop WaitIt2
  7452 00005DC7 B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  7453 00005DC9 66BA2E02            <2> 			mov	dx,(BasePort+14)
  7454 00005DCD EC                  <2> 			in	al,dx
  7455 00005DCE 2480                <2> 			and	al,80h
  7456 00005DD0 3C80                <2> 			cmp	al,80h
  7457 00005DD2 750C                <2> 			jne	ResetErr
  7458 00005DD4 66BA2A02            <2> 			mov	dx,(BasePort+10)
  7459 00005DD8 EC                  <2> 			in	al,dx
  7460 00005DD9 3CAA                <2> 			cmp	al,0AAh
  7461 00005DDB 7503                <2> 			jne	ResetErr
  7462 00005DDD B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  7463 00005DDF C3                  <2> 			ret
  7464 00005DE0 30C0                <2> ResetErr:	xor al, al
  7465 00005DE2 C3                  <2> 			ret
  7466                              <2> 
  7467                              <2> WriteDSP:   ;uses ax dx
  7468 00005DE3 6650                <2> 		push ax
  7469 00005DE5 66BA2C02            <2> 		mov	dx,(BasePort+12)
  7470 00005DE9 EC                  <2> WaitIt:	in	al,dx
  7471 00005DEA 2480                <2> 		and	al,80h
  7472 00005DEC 75FB                <2> 		jnz	WaitIt
  7473 00005DEE 6658                <2> 		pop	ax
  7474 00005DF0 EE                  <2> 		out	dx,al
  7475 00005DF1 C3                  <2> 		ret
  7476                              <2> 
  7477 00005DF2 00                  <2> OddLength db 0
  7478 00005DF3 00000000            <2> Length0 dd	0
  7479 00005DF7 0000                <2> Length1	dw  0
  7480 00005DF9 00000000            <2> NextMemLoc dd 0
  7481 00005DFD 00000000            <2> MemLoc	dd  0
  7482 00005E01 0000                <2> SegLoc  dw 0
  7483 00005E03 00                  <2> Page1	db  0
  7484 00005E04 00000000            <2> Freq	dd	0
  7485 00005E08 14                  <2> WAVEMode db 14h
  7486                              <2> PgPort	equ 83h
  7487                              <2> AddPort	equ 02h
  7488                              <2> LenPort	equ 03h
  7489                              <2> ModeReg	equ 59h
  7490                              <2> Channel	equ 01h
  7491                              <2> BasePort	equ 220h
  7492 00005E09 00                  <2> SoundBlaster	db 0
  7493                              <1> %endif
  7494                              <1> %ifdef io.serial
  7495                              <1> 	%include "source/drivers/input/serial.asm"
  7496                              <1> %else
  7497                              <1> 	%include "source/drivers/input/keyboard.asm"
  7498 00005E0A 00                  <2> specialkey db 0
  7499 00005E0B 00                  <2> charregion db 0
  7500                              <2> waitforinput:		;;this is basically the idle process
  7501                              <2> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  7502                              <2> 					;;this lets the cpu stay at close to 0% instead of 100%
  7503 00005E0C 6631C0              <2> 	xor ax, ax
  7504 00005E0F A0[13670000]        <2> 	mov al, [threadson]
  7505 00005E14 8825[13670000]      <2> 	mov [threadson], ah
  7506 00005E1A FB                  <2> 	sti
  7507 00005E1B F4                  <2> 	hlt
  7508 00005E1C A2[13670000]        <2> 	mov [threadson], al
  7509 00005E21 3A25[78220000]      <2> 	cmp ah, [trans]
  7510 00005E27 7401                <2> 	je getkey
  7511 00005E29 C3                  <2> 	ret
  7512                              <2> getkey:
  7513 00005E2A 31C0                <2> 		xor eax, eax
  7514 00005E2C A2[0A5E0000]        <2> 		mov [specialkey], al
  7515 00005E31 66A3[76220000]      <2> 		mov [lastkey], ax
  7516 00005E37 E464                <2> 		in al, 64h ; Status
  7517                              <2> 	%ifdef gui.included
  7518 00005E39 A820                <2> 		test al, 20h ; PS2-Mouse?
  7519 00005E3B 0F852FFAFFFF        <2> 		jnz near moused
  7520                              <2> 	%endif
  7521 00005E41 A801                <2> 		test al, 1 
  7522 00005E43 74C7                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7523                              <2> 	calckey:
  7524 00005E45 E460                <2> 		in al, 60h
  7525 00005E47 88C4                <2> 		mov ah, al
  7526 00005E49 30C0                <2> 		xor al, al
  7527 00005E4B 8825[77220000]      <2> 		mov [lastkey + 1], ah
  7528 00005E51 88E0                <2> 		mov al, ah
  7529 00005E53 BF[EC5F0000]        <2> 		mov edi, scancode
  7530                              <2> 	searchscan: 
  7531 00005E58 3C3A                <2> 		cmp al, 3Ah
  7532 00005E5A 731A                <2> 		jae scanother
  7533 00005E5C 30E4                <2> 		xor ah, ah
  7534 00005E5E C0E002              <2> 		shl al, 2
  7535 00005E61 01C7                <2> 		add edi, eax
  7536 00005E63 D0E8                <2> 		shr al, 1
  7537 00005E65 01C7                <2> 		add edi, eax
  7538 00005E67 D0E8                <2> 		shr al, 1
  7539 00005E69 8A27                <2> 		mov ah, [edi]
  7540 00005E6B 80FC00              <2> 		cmp ah, 0
  7541 00005E6E 7406                <2> 		je scanother
  7542 00005E70 E9D7000000          <2> 		jmp scanfound
  7543 00005E75 00                  <2> uppercase db 0
  7544                              <2> scanother:
  7545 00005E76 88C4                <2> 		mov ah, al
  7546 00005E78 30C0                <2> 		xor al, al
  7547 00005E7A 66A3[76220000]      <2> 		mov [lastkey], ax
  7548 00005E80 80FCE0              <2> 		cmp ah, 0E0h
  7549 00005E83 0F847D000000        <2> 		je near getkeyspecial
  7550 00005E89 803D[0A5E0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7551 00005E90 752B                <2> 		jne nospecialkey
  7552 00005E92 80FC38              <2> 		cmp ah, 38h
  7553 00005E95 0F84A0000000        <2> 		je near alton
  7554 00005E9B 80FCB8              <2> 		cmp ah, 0B8h
  7555 00005E9E 0F849F000000        <2> 		je near altoff
  7556 00005EA4 80FC1D              <2> 		cmp ah, 1Dh
  7557 00005EA7 0F847E000000        <2> 		je near ctron
  7558 00005EAD 80FC9D              <2> 		cmp ah, 9Dh
  7559 00005EB0 0F847D000000        <2> 		je near ctroff
  7560 00005EB6 66A3[76220000]      <2> 		mov [lastkey], ax
  7561 00005EBC C3                  <2> 		ret
  7562                              <2> nospecialkey:
  7563 00005EBD 80FC2A              <2> 		cmp ah, 2Ah
  7564 00005EC0 0F8455000000        <2> 		je near shifton
  7565 00005EC6 80FC36              <2> 		cmp ah, 36h
  7566 00005EC9 0F844C000000        <2> 		je near shifton
  7567 00005ECF 80FC1C              <2> 		cmp ah, 1Ch
  7568 00005ED2 0F8473000000        <2> 		je near entdown
  7569 00005ED8 80FCAA              <2> 		cmp ah, 0AAh
  7570 00005EDB 0F8442000000        <2> 		je near shiftoff
  7571 00005EE1 80FCB6              <2> 		cmp ah, 0B6h
  7572 00005EE4 0F8439000000        <2> 		je near shiftoff
  7573 00005EEA 80FC3A              <2> 		cmp ah, 3Ah
  7574 00005EED 0F84A5000000        <2> 		je near capslock
  7575 00005EF3 80FC45              <2> 		cmp ah, 0x45
  7576 00005EF6 0F84AD000000        <2> 		je near numlock
  7577 00005EFC 80FC46              <2> 		cmp ah, 0x46
  7578 00005EFF 0F84BC000000        <2> 		je near scrolllock
  7579 00005F05 C3                  <2> 		ret
  7580                              <2> 	getkeyspecial:
  7581 00005F06 C605[0A5E0000]E0    <2> 		mov byte [specialkey], 0xE0
  7582 00005F0D E933FFFFFF          <2> 		jmp calckey
  7583                              <2> 	shift:
  7584 00005F12 A0[755E0000]        <2> 		mov al, [uppercase]
  7585 00005F17 3C01                <2> 		cmp al, 1
  7586 00005F19 7308                <2> 		jae shiftoff
  7587                              <2> 	shifton:
  7588 00005F1B C605[755E0000]01    <2> 		mov byte [uppercase], 1
  7589 00005F22 C3                  <2> 		ret
  7590                              <2> 	shiftoff:
  7591 00005F23 C605[755E0000]00    <2> 		mov byte [uppercase], 0
  7592 00005F2A C3                  <2> 		ret
  7593                              <2> 	ctron:
  7594 00005F2B C605[975F0000]01    <2> 		mov byte [ctrkey], 1
  7595 00005F32 C3                  <2> 		ret
  7596                              <2> 	ctroff:
  7597 00005F33 C605[975F0000]00    <2> 		mov byte [ctrkey], 0
  7598 00005F3A C3                  <2> 		ret
  7599                              <2> 	alton:
  7600 00005F3B C605[965F0000]01    <2> 		mov byte [altkey], 1
  7601 00005F42 C3                  <2> 		ret
  7602                              <2> 	altoff:
  7603 00005F43 C605[965F0000]00    <2> 		mov byte [altkey], 0
  7604 00005F4A C3                  <2> 		ret
  7605                              <2> 	entdown:
  7606 00005F4B C3                  <2> 		ret
  7607                              <2> 	scanfound:
  7608 00005F4C 81C704000000        <2> 		add edi, 4
  7609 00005F52 803D[975F0000]01    <2> 		cmp byte [ctrkey], 1
  7610 00005F59 731B                <2> 		jae altin
  7611 00005F5B 81EF04000000        <2> 		sub edi, 4
  7612 00005F61 81C702000000        <2> 		add edi, 2
  7613 00005F67 803D[965F0000]01    <2> 		cmp byte [altkey], 1
  7614 00005F6E 7306                <2> 		jae altin
  7615 00005F70 81EF02000000        <2> 		sub edi, 2
  7616                              <2> altin:
  7617 00005F76 81C701000000        <2> 		add edi, 1
  7618 00005F7C 803D[755E0000]01    <2> 		cmp byte [uppercase], 1
  7619 00005F83 7306                <2> 		jae uppercaseon
  7620 00005F85 81EF01000000        <2> 		sub edi, 1
  7621                              <2> uppercaseon:
  7622 00005F8B 8A07                <2> 		mov al,[edi]
  7623 00005F8D A2[76220000]        <2> 		mov [lastkey], al
  7624 00005F92 C3                  <2> 		ret
  7625                              <2> 		
  7626 00005F93 00                  <2> keyboardstatus db 0
  7627 00005F94 00                  <2> numlockstatus db 0
  7628 00005F95 00                  <2> scrolllockstatus db 0
  7629 00005F96 00                  <2> altkey db 0
  7630 00005F97 00                  <2> ctrkey db 0
  7631                              <2> 	capslock:
  7632 00005F98 8035[935F0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7633 00005F9F E835000000          <2> 		call updatekblights
  7634 00005FA4 E969FFFFFF          <2> 		jmp shift
  7635                              <2> 		
  7636                              <2> 	numlock:
  7637 00005FA9 8035[935F0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7638 00005FB0 8035[945F0000]01    <2> 		xor byte [numlockstatus], 1
  7639 00005FB7 E81D000000          <2> 		call updatekblights
  7640 00005FBC E969FEFFFF          <2> 		jmp getkey
  7641                              <2> 	
  7642                              <2> 	scrolllock:
  7643 00005FC1 8035[935F0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7644 00005FC8 8035[955F0000]01    <2> 		xor byte [scrolllockstatus], 1
  7645 00005FCF E805000000          <2> 		call updatekblights
  7646 00005FD4 E951FEFFFF          <2> 		jmp getkey
  7647                              <2> 		
  7648                              <2> 	updatekblights:
  7649 00005FD9 B0ED                <2> 		mov al, 0xED
  7650 00005FDB 66BA6000            <2> 		mov dx, 0x60
  7651 00005FDF EE                  <2> 		out dx, al
  7652                              <2> 	chkkbdack:
  7653 00005FE0 EC                  <2> 		in al, dx
  7654 00005FE1 3CFA                <2> 		cmp al, 0xFA
  7655 00005FE3 75FB                <2> 		jne chkkbdack
  7656 00005FE5 A0[935F0000]        <2> 		mov al, [keyboardstatus]
  7657 00005FEA EE                  <2> 		out dx, al
  7658 00005FEB C3                  <2> 		ret
  7659                              <2> 		
  7660                              <2> scancode:
  7661                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY
  7662 00005FEC 000000000000        <2> 	db 0,0,0,0,0,0				;0h
  7663 00005FF2 000000000000        <2> 	db 0,0,0,0,0,0				;1h
  7664 00005FF8 3121AD130000        <2> 	db '1','!',0xAD,0x13,0,0	;2h
  7665 00005FFE 3240FDFB0000        <2> 	db '2','@',0xFD,0xFB,0,0	;3h
  7666 00006004 332300000000        <2> 	db '3','#',0,0,0,0			;4h
  7667 0000600A 34249B9C0000        <2> 	db '4','$',0x9B,0x9C,0,0	;5h
  7668 00006010 3525EE000000        <2> 	db '5','%',0xEE,0,0,0		;6h
  7669 00006016 365EACFC0000        <2> 	db '6','^',0xAC,0xFC,0,0	;7h
  7670 0000601C 3726AB000000        <2> 	db '7','&',0xAB,0,0,0		;8h
  7671 00006022 382AEC070000        <2> 	db '8','*',0xEC,0x7,0,0		;9h
  7672 00006028 392800000000        <2> 	db '9','(',0,0,0,0			;0Ah
  7673 0000602E 302900000000        <2> 	db '0',')',0,0,0,0			;0Bh
  7674 00006034 2D5F9DF10000        <2> 	db '-','_',0x9D,0xF1,0,0	;0Ch
  7675 0000603A 3D2BF7F60000        <2> 	db '=','+',0xF7,0xF6,0,0	;0Dh
  7676 00006040 080800000000        <2> 	db 8,8,0,0,0,0				;0Eh
  7677 00006046 000000000000        <2> 	db 0,0,0,0,0,0				;0Fh
  7678 0000604C 7151848E0000        <2> 	db 'q','Q',0x84,0x8E,0,0	;10h
  7679 00006052 7757868F0000        <2> 	db 'w','W',0x86,0x8F,0,0	;11h
  7680 00006058 65458290EE45        <2> 	db 'e','E',0x82,0x90,0xEE,'E'	;12h
  7681 0000605E 7252898A7050        <2> 	db 'r','R',0x89,0x8A,'p','P'	;13h
  7682 00006064 7454819AE754        <2> 	db 't','T',0x81,0x9A,0xE7,'T'	;14h
  7683 0000606A 795998007559        <2> 	db 'y','Y',0x98,0,'u','Y'	;15h
  7684 00006070 7555A3970000        <2> 	db 'u','U',0xA3,0x97,0,0		;16h
  7685 00006076 6949A18D6949        <2> 	db 'i','I',0xA1,0x8D,'i','I'	;17h
  7686 0000607C 6F4FA29577EA        <2> 	db 'o','O',0xA2,0x95,'w',0xEA	;18h
  7687 00006082 70509499E3EF        <2> 	db 'p','P',0x94,0x99,0xE3,0xEF	;19h
  7688 00006088 5B7BF4000000        <2> 	db '[','{',0xF4,0,0,0		;1Ah
  7689 0000608E 5D7DF5000000        <2> 	db ']','}',0xF5,0,0,0		;1Bh
  7690 00006094 000000000000        <2> 	db 0,0,0,0,0,0				;1Ch
  7691 0000609A 000000000000        <2> 	db 0,0,0,0,0,0				;1Dh
  7692 000060A0 6141A085E041        <2> 	db 'a','A',0xA0,133,224,'A'	;1Eh
  7693 000060A6 73531500E5E4        <2> 	db 's','S',21,0,229,228		;1Fh
  7694 000060AC 6444F800EB7F        <2> 	db 'd','D',0xF8,0,235,127	;20h
  7695 000060B2 66469F0CEDE8        <2> 	db 'f','F',159,0xC,237,232	;21h
  7696 000060B8 6747000079E2        <2> 	db 'g','G',0,0,'y',226		;22h
  7697 000060BE 684800006E48        <2> 	db 'h','H',0,0,'n','H'		;23h
  7698 000060C4 6A4A00000000        <2> 	db 'j','J',0,0,0,0			;24h
  7699 000060CA 6B4B00006B4B        <2> 	db 'k','K',0,0,'k','K'		;25h
  7700 000060D0 6C4C0000E9E9        <2> 	db 'l','L',0,0,233,233		;26h
  7701 000060D6 3B3A14DC0000        <2> 	db ';',':',20,0xDC,0,0			;27h
  7702 000060DC 272200000000        <2> 	db 27h,22h,0,0,0,0			;28h
  7703 000060E2 607E00000000        <2> 	db '`','~',0,0,0,0			;29h
  7704 000060E8 000000000000        <2> 	db 0,0,0,0,0,0				;2Ah
  7705 000060EE 5C7CAAB30000        <2> 	db 92,'|',170,179,0,0		;2Bh
  7706 000060F4 7A5A91927A5A        <2> 	db 'z','Z',145,146,'z','Z'	;2Ch
  7707 000060FA 7858000000F0        <2> 	db 'x','X',0,0,0,240		;2Dh
  7708 00006100 634387800000        <2> 	db 'c','C',135,128,0,0		;2Eh
  7709 00006106 765600000000        <2> 	db 'v','V',0,0,0,0			;2Fh
  7710 0000610C 62420000E142        <2> 	db 'b','B',0,0,225,'B'		;30h
  7711 00006112 6E4EA4A5764E        <2> 	db 'n','N',0xA4,0xA5,'v','N'	;31h
  7712 00006118 6D4D0E0BE64D        <2> 	db 'm','M',0xE,0xB,230,'M'		;32h
  7713 0000611E 2C3CF3AE0000        <2> 	db ',','<',0xF3,174,0,0		;33h
  7714 00006124 2E3EF2AF0000        <2> 	db '.','>',0xF2,175,0,0		;34h
  7715 0000612A 2F3FA8000000        <2> 	db '/','?',0xA8,0,0,0		;35h
  7716 00006130 000000000000        <2> 	db 0,0,0,0,0,0				;36h
  7717 00006136 000000000000        <2> 	db 0,0,0,0,0,0				;37h
  7718 0000613C 000000000000        <2> 	db 0,0,0,0,0,0				;38h
  7719 00006142 202000000000        <2> 	db ' ',' ',0,0,0,0			;39h
  7720                              <2> noscan:
  7721                              <2> 
  7722                              <1> %endif
  7723                              <1> ;drivers will soon be handled intelligently
  7724                              <1> ;every driver's source will be scanned for a .init function
  7725                              <1> ;that will be called and if it returns 0
  7726                              <1> ;the hardware was found and the driver initialized properly
  7727                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7728                              <1> 	%ifdef sound.included
  7729 00006148 E886FAFFFF          <1> 		call sblaster.init
  7730                              <1> 	%endif
  7731                              <1> 	%ifdef network.included
  7732 0000614D E8FA220000          <1> 		call network.init
  7733                              <1> 	%endif
  7734 00006152 C3                  <1> 	ret
  7735                              <1> initialize:
  7736                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7737 00006153 E814000000          <1> 	call .pic
  7738                              <1> %ifdef terminal.vsync
  7739                              <1> 	call .rtc
  7740                              <1> %endif
  7741 00006158 E871000000          <1> 	call .pit
  7742 0000615D E893000000          <1> 	call .fpu
  7743 00006162 E8A4000000          <1> 	call .sse
  7744 00006167 31C0                <1> 	xor eax, eax
  7745 00006169 31C9                <1> 	xor ecx, ecx
  7746                              <1> %ifdef io.serial
  7747                              <1> 	call serial.init
  7748                              <1> %endif
  7749 0000616B C3                  <1> 	ret
  7750                              <1> 	
  7751                              <1> .pic:
  7752 0000616C B011                <1> 	mov al, 0x11
  7753 0000616E E620                <1> 	out 0x20, al
  7754 00006170 E6A0                <1> 	out 0xA0, al
  7755 00006172 B040                <1> 	mov al, 0x40	;interrupt for master
  7756 00006174 E621                <1> 	out 0x21, al
  7757 00006176 B048                <1> 	mov al, 0x48	;interrupt for slave
  7758 00006178 E6A1                <1> 	out 0xA1, al
  7759 0000617A B004                <1> 	mov al, 4
  7760 0000617C E621                <1> 	out 0x21, al
  7761 0000617E B002                <1> 	mov al, 2
  7762 00006180 E6A1                <1> 	out 0xA1, al
  7763 00006182 B001                <1> 	mov al, 0x1
  7764 00006184 E621                <1> 	out 0x21, al
  7765 00006186 B001                <1> 	mov al, 0x1
  7766 00006188 E6A1                <1> 	out 0xA1, al
  7767                              <1> 	;masks are set to zero so as not to mask
  7768 0000618A 30C0                <1> 	xor al, al
  7769 0000618C E621                <1> 	out 0x21, al
  7770 0000618E 30C0                <1> 	xor al, al
  7771 00006190 E6A1                <1> 	out 0xA1, al
  7772 00006192 B020                <1> 	mov al, 0x20
  7773 00006194 E6A0                <1> 	out 0xA0, al
  7774 00006196 E620                <1> 	out 0x20, al
  7775 00006198 C3                  <1> 	ret
  7776                              <1> .rtc:
  7777 00006199 B008                <1> 	mov al, 0x8
  7778 0000619B 88C4                <1> 	mov ah, al
  7779 0000619D 66BA7000            <1> 	mov dx, 0x70
  7780 000061A1 EE                  <1> 	out dx, al
  7781 000061A2 6642                <1> 	inc dx
  7782 000061A4 EC                  <1> 	in al, dx
  7783 000061A5 86C4                <1> 	xchg al, ah
  7784 000061A7 664A                <1> 	dec dx
  7785 000061A9 EE                  <1> 	out dx, al
  7786 000061AA 6642                <1> 	inc dx
  7787 000061AC 86C4                <1> 	xchg al, ah
  7788 000061AE 0C40                <1> 	or al, 0x40
  7789 000061B0 EE                  <1> 	out dx, al
  7790                              <1> 	
  7791 000061B1 B00A                <1> 	mov al, 0xA
  7792 000061B3 664A                <1> 	dec dx
  7793 000061B5 EE                  <1> 	out dx, al
  7794 000061B6 86C4                <1> 	xchg al, ah
  7795 000061B8 6642                <1> 	inc dx
  7796 000061BA EC                  <1> 	in al, dx
  7797 000061BB 24F0                <1> 	and al, 0xF0
  7798 000061BD 0A05[18030000]      <1> 	or al, [rtcrate]
  7799 000061C3 86C4                <1> 	xchg al, ah
  7800 000061C5 664A                <1> 	dec dx
  7801 000061C7 EE                  <1> 	out dx, al
  7802 000061C8 6642                <1> 	inc dx
  7803 000061CA 86C4                <1> 	xchg al, ah
  7804 000061CC EE                  <1> 	out dx, al
  7805 000061CD C3                  <1> 	ret
  7806                              <1> 	
  7807                              <1> .pit:
  7808                              <1> 	;initialize the PIT
  7809 000061CE 66A1[57020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7810 000061D4 E640                <1> 	out 0x40, al
  7811 000061D6 66C1C008            <1> 	rol ax, 8
  7812 000061DA E640                <1> 	out 0x40, al
  7813                              <1> 	;enable rtc interrupt
  7814 000061DC B00B                <1> 	mov al, 0xB
  7815 000061DE E670                <1> 	out 0x70, al
  7816 000061E0 66C1C008            <1> 	rol ax, 8
  7817 000061E4 E471                <1> 	in al, 0x71
  7818 000061E6 66C1C008            <1> 	rol ax, 8
  7819 000061EA E670                <1> 	out 0x70, al
  7820 000061EC 66C1C008            <1> 	rol ax, 8
  7821 000061F0 0C40                <1> 	or al, 0x40
  7822 000061F2 E671                <1> 	out 0x71, al
  7823 000061F4 C3                  <1> 	ret
  7824                              <1> .fpu:
  7825                              <1> 	;And now to initialize the fpu
  7826 000061F5 0F20E0              <1> 	mov eax, cr4
  7827 000061F8 0D00020000          <1> 	or eax, 0x200
  7828 000061FD 0F22E0              <1> 	mov cr4, eax
  7829 00006200 B87F0B0000          <1> 	mov eax, 0xB7F
  7830 00006205 50                  <1> 	push eax
  7831 00006206 D92C24              <1> 	fldcw [esp]
  7832 00006209 58                  <1> 	pop eax
  7833 0000620A C3                  <1> 	ret
  7834                              <1> 	
  7835                              <1> .sse:
  7836 0000620B 0F20C0              <1> 	mov eax, cr0
  7837 0000620E 24FB                <1> 	and al, 11111011b
  7838 00006210 0C02                <1> 	or al, 00000010b
  7839 00006212 0F22C0              <1> 	mov cr0, eax
  7840 00006215 0F20E0              <1> 	mov eax, cr4
  7841 00006218 660D0006            <1> 	or ax, 0000011000000000b
  7842 0000621C 0F22E0              <1> 	mov cr4, eax
  7843 0000621F C3                  <1> 	ret
  7844                                      %include "source/pci.asm"
  7845 00006220 00                  <1> pcibus		db 0
  7846 00006221 00                  <1> pcidevice	db 0
  7847 00006222 00                  <1> pcifunction	db 0
  7848 00006223 00                  <1> pciregister	db 0
  7849 00006224 00                  <1> pcireqtype	db 0
  7850 00006225 00000000            <1> pcidevid	dd 0
  7851 00006229 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  7852                              <1> getpcimem:
  7853 0000622D B002                <1> 	mov al, 2
  7854 0000622F A2[24620000]        <1> 	mov [pcireqtype], al
  7855 00006234 E922000000          <1> 	jmp searchpci
  7856                              <1> getpciport:
  7857 00006239 B001                <1> 	mov al, 1
  7858 0000623B A2[24620000]        <1> 	mov [pcireqtype], al
  7859 00006240 E916000000          <1> 	jmp searchpci
  7860                              <1> pcidump:
  7861 00006245 31C0                <1> 	xor eax, eax
  7862 00006247 A2[22620000]        <1> 	mov [pcifunction], al
  7863 0000624C A2[20620000]        <1> 	mov [pcibus], al
  7864 00006251 A2[21620000]        <1> 	mov [pcidevice], al
  7865 00006256 A2[24620000]        <1> 	mov [pcireqtype], al
  7866                              <1> searchpci:		;;return in ebx, start X in pciX
  7867 0000625B 30C0                <1> 	xor al, al
  7868 0000625D A2[23620000]        <1> 	mov [pciregister], al
  7869 00006262 E817020000          <1> 	call getpciaddr
  7870 00006267 BAF80C0000          <1> 	mov edx, 0xCF8
  7871 0000626C EF                  <1> 	out dx, eax	;;request pci config
  7872 0000626D BAFC0C0000          <1> 	mov edx, 0xCFC
  7873 00006272 ED                  <1> 	in eax, dx 	;;read in pci config
  7874 00006273 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7875 00006278 0F8237000000        <1> 	jb near checkpcidevice
  7876                              <1> searchpciret:
  7877                              <1> nextpcidevice:
  7878 0000627E 30C0                <1> 	xor al, al
  7879 00006280 A2[22620000]        <1> 	mov [pcifunction], al
  7880 00006285 A0[21620000]        <1> 	mov al, [pcidevice]
  7881 0000628A 3C1F                <1> 	cmp al, 11111b
  7882 0000628C 0F8300010000        <1> 	jae near nextpcibus
  7883 00006292 FEC0                <1> 	inc al
  7884 00006294 A2[21620000]        <1> 	mov [pcidevice], al
  7885 00006299 EBC0                <1> 	jmp searchpci
  7886 0000629B A0[22620000]        <1> 	mov al, [pcifunction]
  7887 000062A0 3C07                <1> 	cmp al, 111b
  7888 000062A2 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7889 000062A8 FEC0                <1> 	inc al
  7890 000062AA A2[22620000]        <1> 	mov [pcifunction], al
  7891 000062AF EBAA                <1> 	jmp searchpci
  7892 000062B1 00000000            <1> pcitype: db 0,0,0,0
  7893                              <1> checkpcidevice:
  7894 000062B5 31C0                <1> 	xor eax, eax
  7895 000062B7 3905[25620000]      <1> 	cmp [pcidevid], eax
  7896 000062BD 0F8430000000        <1> 	je near .good
  7897 000062C3 A2[23620000]        <1> 	mov [pciregister], al	;device id, vendor id
  7898 000062C8 E8B1010000          <1> 	call getpciaddr
  7899 000062CD BAF80C0000          <1> 	mov edx, 0xCF8
  7900 000062D2 EF                  <1> 	out dx, eax
  7901 000062D3 BAFC0C0000          <1> 	mov edx, 0xCFC
  7902 000062D8 ED                  <1> 	in eax, dx
  7903 000062D9 2305[29620000]      <1> 	and eax, [pcidevidmask]
  7904 000062DF 8B1D[25620000]      <1> 	mov ebx, [pcidevid]
  7905 000062E5 231D[29620000]      <1> 	and ebx, [pcidevidmask]
  7906 000062EB 39D8                <1> 	cmp eax, ebx
  7907 000062ED 0F858BFFFFFF        <1> 	jne near searchpciret
  7908                              <1> .good:
  7909 000062F3 30C0                <1> 	xor al, al
  7910 000062F5 3805[24620000]      <1> 	cmp [pcireqtype], al
  7911 000062FB 0F842C000000        <1> 	je near dumppcidevice
  7912 00006301 B008                <1> 	mov al, 0x08
  7913 00006303 A2[23620000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7914 00006308 E871010000          <1> 	call getpciaddr
  7915 0000630D BAF80C0000          <1> 	mov edx, 0xCF8
  7916 00006312 EF                  <1> 	out dx, eax
  7917 00006313 BAFC0C0000          <1> 	mov edx, 0xCFC
  7918 00006318 ED                  <1> 	in eax, dx
  7919 00006319 C1C008              <1> 	rol eax, 8
  7920 0000631C 3A05[B1620000]      <1> 	cmp al, [pcitype]
  7921 00006322 0F84A0000000        <1> 	je near foundpciaddr
  7922 00006328 E951FFFFFF          <1> 	jmp searchpciret
  7923                              <1> dumppcidevice:
  7924 0000632D 30C0                <1> 	xor al, al
  7925 0000632F A2[23620000]        <1> 	mov [pciregister], al
  7926 00006334 E845010000          <1> 	call getpciaddr
  7927 00006339 89C1                <1> 	mov ecx, eax
  7928 0000633B C605[2F300000]05    <1> 	mov byte [firsthexshown], 5
  7929 00006342 E8FDCCFFFF          <1> 	call showhex
  7930                              <1> dumppcidevicelp:
  7931 00006347 A2[23620000]        <1> 	mov [pciregister], al
  7932 0000634C E82D010000          <1> 	call getpciaddr
  7933 00006351 BAF80C0000          <1> 	mov edx, 0xCF8
  7934 00006356 EF                  <1> 	out dx, eax
  7935 00006357 BAFC0C0000          <1> 	mov edx, 0xCFC
  7936 0000635C ED                  <1> 	in eax, dx
  7937 0000635D 89C1                <1> 	mov ecx, eax
  7938 0000635F A0[23620000]        <1> 	mov al, [pciregister]
  7939 00006364 0404                <1> 	add al, 4
  7940 00006366 C605[2F300000]05    <1> 	mov byte [firsthexshown], 5
  7941 0000636D E8D2CCFFFF          <1> 	call showhex
  7942 00006372 3C3C                <1> 	cmp al, 0x3C
  7943 00006374 72D1                <1> 	jb dumppcidevicelp
  7944                              <1> dumppcidn:
  7945                              <1> %ifdef io.serial
  7946                              <1> 	mov esi, line
  7947                              <1> 	call print
  7948                              <1> %else
  7949 00006376 803D[74240000]00    <1> 	cmp byte [charpos], 0
  7950 0000637D 0F84FBFEFFFF        <1> 	je near searchpciret
  7951 00006383 BE[5E910000]        <1> 	mov esi, line
  7952 00006388 E8CDB9FFFF          <1> 	call print
  7953                              <1> %endif
  7954 0000638D E9ECFEFFFF          <1> 	jmp searchpciret
  7955                              <1> nextpcibus:
  7956 00006392 30C0                <1> 	xor al, al
  7957 00006394 A2[21620000]        <1> 	mov [pcidevice], al
  7958 00006399 A0[20620000]        <1> 	mov al, [pcibus]
  7959 0000639E 3C7F                <1> 	cmp al, 1111111b
  7960 000063A0 730C                <1> 	jae donesearchpci
  7961 000063A2 FEC0                <1> 	inc al
  7962 000063A4 A2[20620000]        <1> 	mov [pcibus], al
  7963 000063A9 E9ADFEFFFF          <1> 	jmp searchpci
  7964                              <1> donesearchpci:
  7965 000063AE BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  7966 000063B3 31D2                <1> 	xor edx, edx
  7967 000063B5 8815[B1620000]      <1> 	mov [pcitype], dl
  7968 000063BB 8915[25620000]      <1> 	mov [pcidevid], edx
  7969 000063C1 891D[29620000]      <1> 	mov [pcidevidmask], ebx
  7970 000063C7 C3                  <1> 	ret
  7971                              <1> foundpciaddr:
  7972 000063C8 B010                <1> 	mov al, 0x10
  7973 000063CA A2[23620000]        <1> 	mov [pciregister], al
  7974 000063CF 803D[24620000]02    <1> 	cmp byte [pcireqtype], 2
  7975 000063D6 7443                <1> 	je findpcimemaddr
  7976                              <1> findpciioaddr:
  7977 000063D8 E8A1000000          <1> 	call getpciaddr
  7978 000063DD BAF80C0000          <1> 	mov edx, 0xCF8
  7979 000063E2 EF                  <1> 	out dx, eax
  7980 000063E3 BAFC0C0000          <1> 	mov edx, 0xCFC
  7981 000063E8 ED                  <1> 	in eax, dx
  7982 000063E9 89C3                <1> 	mov ebx, eax
  7983 000063EB 81E301000000        <1> 	and ebx, 1
  7984 000063F1 81FB00000000        <1> 	cmp ebx, 0
  7985 000063F7 0F8468000000        <1> 	je near notpciioaddr
  7986 000063FD 2D01000000          <1> 	sub eax, 1
  7987 00006402 89C2                <1> 	mov edx, eax
  7988 00006404 31DB                <1> 	xor ebx, ebx
  7989 00006406 4B                  <1> 	dec ebx
  7990 00006407 891D[29620000]      <1> 	mov [pcidevidmask], ebx
  7991 0000640D 43                  <1> 	inc ebx
  7992 0000640E 881D[B1620000]      <1> 	mov [pcitype], bl
  7993 00006414 891D[25620000]      <1> 	mov [pcidevid], ebx
  7994 0000641A C3                  <1> 	ret
  7995                              <1> findpcimemaddr:
  7996 0000641B E85E000000          <1> 	call getpciaddr
  7997 00006420 BAF80C0000          <1> 	mov edx, 0xCF8
  7998 00006425 EF                  <1> 	out dx, eax
  7999 00006426 BAFC0C0000          <1> 	mov edx, 0xCFC
  8000 0000642B ED                  <1> 	in eax, dx
  8001 0000642C 89C3                <1> 	mov ebx, eax
  8002 0000642E 81E301000000        <1> 	and ebx, 1
  8003 00006434 81FB01000000        <1> 	cmp ebx, 1
  8004 0000643A 0F8425000000        <1> 	je near notpciioaddr
  8005 00006440 89C2                <1> 	mov edx, eax
  8006 00006442 50                  <1> 	push eax
  8007 00006443 A1[3E020000]        <1> 	mov eax, [basecache]
  8008 00006448 C1E004              <1> 	shl eax, 4
  8009 0000644B 29C2                <1> 	sub edx, eax
  8010 0000644D 58                  <1> 	pop eax
  8011 0000644E 31DB                <1> 	xor ebx, ebx
  8012 00006450 4B                  <1> 	dec ebx
  8013 00006451 891D[29620000]      <1> 	mov [pcidevidmask], ebx
  8014 00006457 43                  <1> 	inc ebx
  8015 00006458 881D[B1620000]      <1> 	mov [pcitype], bl
  8016 0000645E 891D[25620000]      <1> 	mov [pcidevid], ebx
  8017 00006464 C3                  <1> 	ret
  8018                              <1> notpciioaddr:
  8019 00006465 A0[23620000]        <1> 	mov al, [pciregister]
  8020 0000646A 0404                <1> 	add al, 4
  8021 0000646C 3C28                <1> 	cmp al, 0x28
  8022 0000646E 0F870AFEFFFF        <1> 	ja near searchpciret
  8023 00006474 A2[23620000]        <1> 	mov [pciregister], al
  8024 00006479 E95AFFFFFF          <1> 	jmp findpciioaddr
  8025                              <1> getpciaddr:		;;puts it in eax and ebx
  8026 0000647E 31C0                <1> 			xor eax, eax
  8027 00006480 BB00000080          <1> 			mov ebx, 0x80000000
  8028 00006485 A0[20620000]        <1> 			mov al, [pcibus]
  8029 0000648A C1E010              <1> 			shl eax, 16
  8030 0000648D 01C3                <1> 			add ebx, eax
  8031 0000648F 31C0                <1> 			xor eax, eax
  8032 00006491 A0[21620000]        <1> 			mov al, [pcidevice]
  8033 00006496 C1E00B              <1> 			shl eax, 11
  8034 00006499 01C3                <1> 			add ebx, eax
  8035 0000649B 31C0                <1> 			xor eax, eax
  8036 0000649D A0[22620000]        <1> 			mov al, [pcifunction]
  8037 000064A2 C1E008              <1> 			shl eax, 8
  8038 000064A5 01C3                <1> 			add ebx, eax
  8039 000064A7 31C0                <1> 			xor eax, eax
  8040 000064A9 A0[23620000]        <1> 			mov al, [pciregister]
  8041 000064AE 01C3                <1> 			add ebx, eax
  8042 000064B0 89D8                <1> 			mov eax, ebx
  8043 000064B2 C3                  <1> 			ret
  8044                                      %include "source/disk.asm"
  8045                              <1> ;This loads files using the methods in the loaded driver
  8046                              <1> %ifdef disk.real
  8047                              <1> %include "source/drivers/disk/realmode.asm"
  8048                              <2> diskr:
  8049                              <2> 			;read from disk using real mode-it does not work with large files
  8050                              <2> 			;sector count in cl
  8051                              <2> 			;disk number in ch
  8052                              <2> 			;48 bit address with last 32 bits in ebx
  8053                              <2> 			;buffer in esi
  8054                              <2> 			;puts end of buffer in edi and end lba address in edx
  8055 000064B3 880D[E0640000]      <2> 	mov [sdlength], cl
  8056 000064B9 891D[E1640000]      <2> 	mov [sdaddress], ebx
  8057 000064BF 8935[3F660000]      <2> 	mov [oldesireal], esi
  8058 000064C5 66BE[E564]          <2> 	mov si, readdiskreal
  8059 000064C9 668935[050D0000]    <2> 	mov [realmodeptr], si
  8060 000064D0 BE[21650000]        <2> 	mov esi, backfromrealread
  8061 000064D5 8935[010D0000]      <2> 	mov [realmodereturn], esi
  8062 000064DB E90AA7FFFF          <2> 	jmp realmode
  8063 000064E0 00                  <2> sdlength db 0
  8064 000064E1 00000000            <2> sdaddress dd 0
  8065                              <2> 
  8066                              <2> [BITS 16]
  8067                              <2> readdiskreal:
  8068 000064E5 C706[1165]1000      <2> 	mov word [dlen], 0x10
  8069 000064EB C706[1565]0000      <2> 	mov word [daddress], 0
  8070 000064F1 C706[1765]0001      <2> 	mov word [dsegm], 0x100
  8071 000064F7 66891E[1965]        <2> 	mov [dlbaad], ebx
  8072 000064FC 880E[1365]          <2> 	mov [dreadlen], cl
  8073                              <2> ReadHardDisk:
  8074 00006500 BE[1165]            <2> 	mov si, diskaddresspacket
  8075 00006503 31C0                <2> 	xor ax, ax
  8076 00006505 B442                <2> 	mov ah, 0x42
  8077 00006507 8A16[1065]          <2> 	mov dl, [dnumber]
  8078 0000650B CD13                <2> 	int 0x13
  8079 0000650D 72F1                <2> 	jc ReadHardDisk
  8080 0000650F C3                  <2> 	ret
  8081                              <2> 
  8082 00006510 80                  <2> dnumber db 0x80
  8083                              <2> diskaddresspacket:
  8084 00006511 10                  <2> dlen:	db 0x10 ;size of packet
  8085 00006512 00                  <2> 		db 0
  8086 00006513 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8087 00006515 0000                <2> daddress:	dw 0x0	;address 0
  8088 00006517 0001                <2> dsegm:		dw 0x100	;segment
  8089                              <2> 		;start with known value for hd
  8090                              <2> dlbaad:
  8091 00006519 00000000            <2> 	dd 0	;lba address
  8092 0000651D 00000000            <2> 	dd 0
  8093                              <2> [BITS 32]
  8094                              <2> backfromrealread:
  8095 00006521 8B35[3F660000]      <2> 	mov esi, [oldesireal]
  8096 00006527 8B1D[E1640000]      <2> 	mov ebx, [sdaddress]
  8097 0000652D 31C9                <2> 	xor ecx, ecx
  8098 0000652F 8A0D[E0640000]      <2> 	mov cl, [sdlength]
  8099 00006535 01CB                <2> 	add ebx, ecx
  8100 00006537 66B80800            <2> 	mov ax, LINEAR_SEL
  8101 0000653B 8EE0                <2> 	mov fs, ax
  8102 0000653D BF00100000          <2> 	mov edi, 0x1000
  8103 00006542 B200                <2> 	mov dl, 0
  8104 00006544 D0E1                <2> 	shl cl, 1
  8105                              <2> copyfromrmodedisk:
  8106 00006546 648A07              <2> 	mov al, [fs:edi]
  8107 00006549 8806                <2> 	mov [esi], al
  8108 0000654B 47                  <2> 	inc edi
  8109 0000654C 46                  <2> 	inc esi
  8110 0000654D FECA                <2> 	dec dl
  8111 0000654F 80FA00              <2> 	cmp dl, 0
  8112 00006552 75F2                <2> 	jne copyfromrmodedisk
  8113 00006554 FEC9                <2> 	dec cl
  8114 00006556 B200                <2> 	mov dl, 0
  8115 00006558 80F900              <2> 	cmp cl, 0
  8116 0000655B 75E9                <2> 	jne copyfromrmodedisk
  8117 0000655D 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8118 00006561 8EE0                <2> 	mov fs, ax
  8119 00006563 89F7                <2> 	mov edi, esi
  8120 00006565 8B35[3F660000]      <2> 	mov esi, [oldesireal]
  8121 0000656B 89DA                <2> 	mov edx, ebx
  8122 0000656D 8B1D[E1640000]      <2> 	mov ebx, [sdaddress]
  8123 00006573 C3                  <2> 	ret
  8124                              <2> 	
  8125                              <1> %else
  8126                              <1> 	%ifdef disk.protected
  8127                              <1> 	%include "source/drivers/disk/pata.asm"
  8128                              <1> 	%endif
  8129                              <1> %endif
  8130                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8131                              <1> 			;returns with err code in edx and file end in edi
  8132 00006574 803F00              <1> 	cmp byte [edi], 0
  8133 00006577 0F8448000000        <1> 	je near nofileload
  8134 0000657D 89FA                <1> 	mov edx, edi
  8135 0000657F BB[83A10000]        <1> 	mov ebx, diskfileindex
  8136                              <1> nextnamechar:
  8137 00006584 8A07                <1> 	mov al, [edi]
  8138 00006586 3C26                <1> 	cmp al, '&'
  8139 00006588 7440                <1> 	je nullfile
  8140 0000658A 8A23                <1> 	mov ah, [ebx]
  8141 0000658C 47                  <1> 	inc edi
  8142 0000658D 43                  <1> 	inc ebx
  8143 0000658E 88C1                <1> 	mov cl, al
  8144 00006590 08E1                <1> 	or cl, ah
  8145 00006592 80F900              <1> 	cmp cl, 0
  8146 00006595 744E                <1> 	je equalfilenames
  8147 00006597 80F920              <1> 	cmp cl, ' '
  8148 0000659A 7449                <1> 	je equalfilenames
  8149 0000659C 3C2A                <1> 	cmp al, '*'
  8150 0000659E 742B                <1> 	je equalfilenames2
  8151 000065A0 80FC00              <1> 	cmp ah, 0
  8152 000065A3 7410                <1> 	je nextfilename
  8153 000065A5 3C00                <1> 	cmp al, 0
  8154 000065A7 7404                <1> 	je getebxzero
  8155 000065A9 38E0                <1> 	cmp al, ah
  8156 000065AB 74D7                <1> 	je nextnamechar
  8157                              <1> getebxzero:
  8158 000065AD 8A23                <1> 	mov ah, [ebx]
  8159 000065AF 43                  <1> 	inc ebx
  8160 000065B0 80FC00              <1> 	cmp ah, 0
  8161 000065B3 75F8                <1> 	jne getebxzero
  8162                              <1> nextfilename:
  8163 000065B5 81C308000000        <1> 	add ebx, 8		;next descriptor
  8164 000065BB 89D7                <1> 	mov edi, edx
  8165 000065BD 81FB[5CA30000]      <1> 	cmp ebx, enddiskfileindex
  8166 000065C3 72BF                <1> 	jb nextnamechar
  8167                              <1> nofileload:
  8168 000065C5 BA94010000          <1> 	mov edx, 404	;indicate not found error
  8169                              <1> nullfile:
  8170 000065CA C3                  <1> 	ret
  8171                              <1> equalfilenames2:
  8172 000065CB 81EB02000000        <1> 	sub ebx, 2
  8173                              <1> eqfilefind:
  8174 000065D1 43                  <1> 	inc ebx
  8175 000065D2 81FB[5CA30000]      <1> 	cmp ebx, enddiskfileindex
  8176 000065D8 0F83E7FFFFFF        <1> 	jae near nofileload
  8177 000065DE 8A03                <1> 	mov al, [ebx]
  8178 000065E0 3C00                <1> 	cmp al, 0
  8179 000065E2 75ED                <1> 	jne eqfilefind
  8180 000065E4 43                  <1> 	inc ebx
  8181                              <1> equalfilenames:
  8182 000065E5 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8183 000065E8 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8184 000065EA 031D[5EA30000]      <1> 	add ebx, [lbaad]	;add offset to solleros
  8185 000065F0 31C9                <1> 	xor ecx, ecx
  8186 000065F2 88C1                <1> 	mov cl, al			;get excess number of sectors
  8187 000065F4 C0E102              <1> 	shl cl, 2
  8188 000065F7 C0E902              <1> 	shr cl, 2			;cut off at 64
  8189 000065FA 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8190 000065FC B500                <1> 	mov ch, 0			;drive 0
  8191 000065FE C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8192                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8193 00006601 A3[43660000]        <1> 	mov [filetracks], eax
  8194 00006606 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8195 00006608 89DA                <1> 	mov edx, ebx
  8196 0000660A 80F900              <1> 	cmp cl, 0
  8197 0000660D 7405                <1> 	je copytracksforfile
  8198 0000660F E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  8199                              <1> copytracksforfile:
  8200 00006614 A1[43660000]        <1> 	mov eax, [filetracks]
  8201 00006619 3D00000000          <1> 	cmp eax, 0
  8202 0000661E 7419                <1> 	je donecopyfile
  8203 00006620 48                  <1> 	dec eax
  8204 00006621 A3[43660000]        <1> 	mov [filetracks], eax
  8205 00006626 89D3                <1> 	mov ebx, edx	;get end lba
  8206 00006628 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8207 0000662A 8A2D[5DA30000]      <1> 	mov ch, [DriveNumber]
  8208 00006630 89FE                <1> 	mov esi, edi	;reset buffer
  8209 00006632 E87CFEFFFF          <1> 	call diskr
  8210 00006637 EBDB                <1> 	jmp copytracksforfile
  8211                              <1> donecopyfile:
  8212 00006639 BA00000000          <1> 	mov edx, 0	;no error
  8213 0000663E C3                  <1> 	ret
  8214                              <1> 
  8215 0000663F 00000000            <1> oldesireal dd 0
  8216 00006643 00000000            <1> filetracks dd 0
  8217 00006647 00                  <1> lbad1 db 0
  8218 00006648 00                  <1> lbad2 db 0
  8219 00006649 00                  <1> lbad3 db 0
  8220 0000664A 00                  <1> lbad4 db 0
  8221 0000664B 00                  <1> lbad5 db 0
  8222 0000664C 00                  <1> lbad6 db 0
  8223 0000664D 6400                <1> segments dw 100
  8224                              <1> 
  8225                              <1> 
  8226                              <1> 	
  8227                                      %include "source/threads.asm"
  8228                              <1> %ifdef threads.included	
  8229                              <1> nwcmdst:
  8230 0000664F 31C0                <1> 	xor eax, eax
  8231 00006651 BC[42B50000]        <1> 	mov esp, stackend
  8232 00006656 A2[13670000]        <1> 	mov [threadson], al
  8233 0000665B A3[14670000]        <1> 	mov [currentthread], eax
  8234 00006660 0504000000          <1> 	add eax, 4
  8235 00006665 A3[0F670000]        <1> 	mov [lastthread], eax
  8236 0000666A FB                  <1> 	sti
  8237 0000666B E9FAC4FFFF          <1> 	jmp nwcmd
  8238                              <1> 
  8239                              <1> nomorethreadspace:
  8240 00006670 BE[86660000]        <1> 	mov esi, nmts
  8241 00006675 E8E0B6FFFF          <1> 	call print
  8242 0000667A C605[13670000]00    <1> 	mov byte [threadson], 0
  8243 00006681 E9E4C4FFFF          <1> 	jmp nwcmd
  8244 00006686 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8245 0000668F 6572666C6F770A00    <1>
  8246                              <1> 
  8247                              <1> nomorestackspace:
  8248 00006697 BE[A3660000]        <1> 	mov esi, nmss
  8249 0000669C E8B9B6FFFF          <1> 	call print
  8250 000066A1 EBAC                <1> 	jmp nwcmdst
  8251 000066A3 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8252 000066AC 72666C6F770A00      <1>
  8253                              <1> 	
  8254                              <1> threadswitch:
  8255 000066B3 FA                  <1> 	cli
  8256 000066B4 60                  <1> 	pushad
  8257 000066B5 BF[A8DC0100]        <1> 	mov edi, threadlist
  8258 000066BA A1[14670000]        <1> 	mov eax, [currentthread]
  8259 000066BF 40                  <1> 	inc eax
  8260 000066C0 A3[14670000]        <1> 	mov [currentthread], eax
  8261 000066C5 6648                <1> 	dec ax
  8262 000066C7 C1E002              <1> 	shl eax, 2
  8263 000066CA 01C7                <1> 	add edi, eax
  8264 000066CC 8927                <1> 	mov [edi], esp
  8265 000066CE 81C704000000        <1> 	add edi, 4
  8266 000066D4 81FF[A8EC0100]      <1> 	cmp edi, threadlistend
  8267 000066DA 0F830D000000        <1> 	jae near nookespthread
  8268 000066E0 8B07                <1> 	mov eax, [edi]
  8269 000066E2 3D00000000          <1> 	cmp eax, 0
  8270 000066E7 0F8519000000        <1> 	jne near okespthread
  8271                              <1> nookespthread:
  8272 000066ED BF[A8DC0100]        <1> 	mov edi, threadlist
  8273 000066F2 31C0                <1> 	xor eax, eax
  8274 000066F4 A3[14670000]        <1> 	mov [currentthread], eax
  8275 000066F9 8B07                <1> 	mov eax, [edi]
  8276 000066FB 3D00000000          <1> 	cmp eax, 0
  8277 00006700 0F8449FFFFFF        <1> 	je near nwcmdst
  8278                              <1> okespthread:
  8279 00006706 89C4                <1> 	mov esp, eax
  8280 00006708 B020                <1> 	mov al, 0x20
  8281 0000670A E620                <1> 	out 0x20, al
  8282 0000670C 61                  <1> 	popad
  8283 0000670D FB                  <1> 	sti
  8284 0000670E CF                  <1> 	iret
  8285                              <1> 
  8286                              <1> %endif
  8287 0000670F 04000000            <1> 	lastthread dd 4
  8288 00006713 00                  <1> 	threadson db 0
  8289 00006714 00000000            <1> 	currentthread dd 0
  8290                                  %ifdef gui.included
  8291                                      %include "source/gui/gui.asm"
  8292                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8293 00006718 31C0                <1> 	xor eax, eax
  8294 0000671A 31DB                <1> 	xor ebx, ebx
  8295 0000671C 31C9                <1> 	xor ecx, ecx
  8296 0000671E 31D2                <1> 	xor edx, edx
  8297 00006720 E871080000          <1> 	call guisetup
  8298                              <1> guiloop:
  8299 00006725 E8F2F0FFFF          <1> 	call cursorgui
  8300                              <1> guistart:
  8301 0000672A E8FBF6FFFF          <1> 	call getkey
  8302 0000672F C605[ED7B0000]00    <1> 	mov byte [copygui], 0
  8303 00006736 EBF2                <1> 	jmp guistart
  8304                              <1> 
  8305                              <1> %include "source/gui/bmp.asm"
  8306                              <2> showbmp:
  8307 00006738 668B06              <2> 	mov ax, [esi]
  8308 0000673B 663D424D            <2> 	cmp ax, "BM"
  8309 0000673F 0F85BB000000        <2> 	jne near endedbmp
  8310 00006745 8B3D[3F570000]      <2> 	mov edi, [physbaseptr]
  8311 0000674B 6689D0              <2> 	mov ax, dx
  8312 0000674E 6689CB              <2> 	mov bx, cx
  8313 00006751 31C9                <2> 	xor ecx, ecx
  8314 00006753 31D2                <2> 	xor edx, edx
  8315 00006755 6689D9              <2> 	mov cx, bx
  8316 00006758 6689C2              <2> 	mov dx, ax
  8317 0000675B 01D7                <2> 	add edi, edx
  8318 0000675D 01D7                <2> 	add edi, edx
  8319 0000675F 31D2                <2> 	xor edx, edx
  8320 00006761 668B15[17580000]    <2> 	mov dx, [resolutionx2]
  8321 00006768 034E16              <2> 	add ecx, [esi + 22]
  8322                              <2> bmplocloop:
  8323 0000676B 52                  <2> 	push edx
  8324 0000676C 31C0                <2> 	xor eax, eax
  8325 0000676E 6689D0              <2> 	mov ax, dx
  8326 00006771 F7E1                <2> 	mul ecx
  8327 00006773 5A                  <2> 	pop edx
  8328 00006774 663B0D[2B570000]    <2> 	cmp cx, [resolutiony]
  8329 0000677B 7609                <2> 	jbe .nofixy
  8330 0000677D 31C9                <2> 	xor ecx, ecx
  8331 0000677F 668B0D[2B570000]    <2> 	mov cx, [resolutiony]
  8332                              <2> .nofixy:
  8333 00006786 01C7                <2> 	add edi, eax
  8334 00006788 8B5612              <2> 	mov edx, [esi + 18]
  8335 0000678B 8B4E16              <2> 	mov ecx, [esi + 22]
  8336 0000678E 8B460A              <2> 	mov eax, [esi + 10]
  8337 00006791 8B5E02              <2> 	mov ebx, [esi + 2]
  8338 00006794 01F3                <2> 	add ebx, esi
  8339 00006796 891D[06680000]      <2> 	mov [bmpend], ebx
  8340 0000679C 89D3                <2> 	mov ebx, edx
  8341 0000679E 01C6                <2> 	add esi, eax
  8342                              <2> ldxbmp2:
  8343 000067A0 31D2                <2> 	xor edx, edx
  8344 000067A2 668B15[29570000]    <2> 	mov dx, [resolutionx]
  8345 000067A9 39D3                <2> 	cmp ebx, edx
  8346 000067AB 7702                <2> 	ja ldxbmp
  8347 000067AD 89DA                <2> 	mov edx, ebx
  8348                              <2> ldxbmp:
  8349 000067AF 668B06              <2> 	mov ax, [esi]
  8350 000067B2 668907              <2> 	mov [edi], ax
  8351 000067B5 81C702000000        <2> 	add edi, 2
  8352 000067BB 81C602000000        <2> 	add esi, 2
  8353 000067C1 3B35[06680000]      <2> 	cmp esi, [bmpend]
  8354 000067C7 7737                <2> 	ja endedbmp
  8355 000067C9 4A                  <2> 	dec edx
  8356 000067CA 81FA00000000        <2> 	cmp edx, 0
  8357 000067D0 77DD                <2> 	ja ldxbmp
  8358 000067D2 31D2                <2> 	xor edx, edx
  8359 000067D4 668B15[29570000]    <2> 	mov dx, [resolutionx]
  8360 000067DB 39D3                <2> 	cmp ebx, edx
  8361 000067DD 7610                <2> 	jbe .notover
  8362                              <2> .over:
  8363 000067DF 01DE                <2> 	add esi, ebx
  8364 000067E1 01DE                <2> 	add esi, ebx
  8365 000067E3 29D6                <2> 	sub esi, edx
  8366 000067E5 29D6                <2> 	sub esi, edx
  8367 000067E7 01DF                <2> 	add edi, ebx
  8368 000067E9 01DF                <2> 	add edi, ebx
  8369 000067EB 29D7                <2> 	sub edi, edx
  8370 000067ED 29D7                <2> 	sub edi, edx
  8371                              <2> .notover:
  8372 000067EF 29DF                <2> 	sub edi, ebx
  8373 000067F1 29DF                <2> 	sub edi, ebx
  8374 000067F3 29D7                <2> 	sub edi, edx
  8375 000067F5 29D7                <2> 	sub edi, edx
  8376 000067F7 49                  <2> 	dec ecx
  8377 000067F8 81F900000000        <2> 	cmp ecx, 0
  8378 000067FE 77A0                <2> 	ja ldxbmp2
  8379                              <2> endedbmp:
  8380 00006800 E844030000          <2> 	call switchmousepos2
  8381 00006805 C3                  <2> 	ret
  8382                              <2> 	
  8383 00006806 00000000            <2> 	bmpend dd 0
  8384                              <1> %include "source/gui/circle.asm"
  8385                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8386 0000680A 55                  <2> 	push ebp
  8387 0000680B 663D0000            <2> 	cmp ax, 0
  8388 0000680F 770A                <2> 	ja .nozerocircle
  8389 00006811 E8CC1B0000          <2> 	call putpixel	;the easiest circle ever
  8390 00006816 E9F7000000          <2> 	jmp .done
  8391                              <2> .nozerocircle:
  8392 0000681B 6689F5              <2> 	mov bp, si
  8393 0000681E 6650                <2> 	push ax
  8394 00006820 E8FE1B0000          <2> 	call getpixelmem
  8395 00006825 31C0                <2> 	xor eax, eax
  8396 00006827 6658                <2> 	pop ax
  8397 00006829 BE01000000          <2> 	mov esi, 1
  8398 0000682E 29C6                <2> 	sub esi, eax
  8399 00006830 89C1                <2> 	mov ecx, eax
  8400 00006832 31C0                <2> 	xor eax, eax
  8401 00006834 66A1[17580000]      <2> 	mov ax, [resolutionx2]
  8402 0000683A F7E1                <2> 	mul ecx
  8403 0000683C 50                  <2> 	push eax
  8404 0000683D 31D2                <2> 	xor edx, edx
  8405 0000683F 01C7                <2> 	add edi, eax
  8406 00006841 66892F              <2> 	mov [edi], bp
  8407 00006844 29C7                <2> 	sub edi, eax
  8408 00006846 29C7                <2> 	sub edi, eax
  8409 00006848 66892F              <2> 	mov [edi], bp
  8410 0000684B 01C7                <2> 	add edi, eax
  8411 0000684D D1E1                <2> 	shl ecx, 1
  8412 0000684F 01CF                <2> 	add edi, ecx
  8413 00006851 66892F              <2> 	mov [edi], bp
  8414 00006854 D1E1                <2> 	shl ecx, 1
  8415 00006856 29CF                <2> 	sub edi, ecx
  8416 00006858 66892F              <2> 	mov [edi], bp
  8417 0000685B D1E9                <2> 	shr ecx, 1
  8418 0000685D 01CF                <2> 	add edi, ecx
  8419 0000685F D1E9                <2> 	shr ecx, 1
  8420 00006861 B802000000          <2> 	mov eax, 2
  8421 00006866 F7E1                <2> 	mul ecx
  8422 00006868 48                  <2> 	dec eax
  8423 00006869 F7D0                <2> 	not eax ;make it negative
  8424 0000686B A3[18690000]        <2> 	mov [.ddF_y], eax
  8425 00006870 58                  <2> 	pop eax
  8426 00006871 BB01000000          <2> 	mov ebx, 1
  8427 00006876 891D[14690000]      <2> 	mov [.ddF_x], ebx
  8428 0000687C 4B                  <2> 	dec ebx
  8429 0000687D 31D2                <2> 	xor edx, edx
  8430 0000687F E904000000          <2> 	jmp .lp
  8431                              <2> .lpb:
  8432 00006884 D1EA                <2> 	shr edx, 1
  8433 00006886 D1E9                <2> 	shr ecx, 1
  8434                              <2> .lp:	;it starts this with the center in edi
  8435                              <2> 		;color in bp
  8436                              <2> 		;ddF_x in memory
  8437                              <2> 		;x*resolutionx2 in ebx
  8438                              <2> 		;x in edx
  8439                              <2> 		;ddF_y in memory
  8440                              <2> 		;y*resolutionx2 in eax
  8441                              <2> 		;f in esi
  8442                              <2> 		;y in ecx
  8443 00006888 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8444 0000688E 7717                <2> 	ja	.noddF_y
  8445 00006890 49                  <2> 	dec ecx
  8446 00006891 2B05[17580000]      <2> 	sub eax, [resolutionx2]
  8447 00006897 8105[18690000]0200- <2> 	add dword [.ddF_y], 2
  8448 0000689F 0000                <2>
  8449 000068A1 0335[18690000]      <2> 	add esi, [.ddF_y]
  8450                              <2> .noddF_y:
  8451 000068A7 42                  <2> 	inc edx
  8452 000068A8 031D[17580000]      <2> 	add ebx, [resolutionx2]
  8453 000068AE 8105[14690000]0200- <2> 	add dword [.ddF_x], 2
  8454 000068B6 0000                <2>
  8455 000068B8 0335[14690000]      <2> 	add esi, [.ddF_x]
  8456                              <2> 
  8457 000068BE D1E2                <2> 	shl edx, 1
  8458 000068C0 D1E1                <2> 	shl ecx, 1
  8459 000068C2 01D7                <2> 	add edi, edx
  8460 000068C4 01C7                <2> 	add edi, eax
  8461 000068C6 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  8462 000068C9 D1E2                <2> 	shl edx, 1
  8463 000068CB 29D7                <2> 	sub edi, edx
  8464 000068CD 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8465 000068D0 D1E0                <2> 	shl eax, 1
  8466 000068D2 29C7                <2> 	sub edi, eax
  8467 000068D4 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  8468 000068D7 01D7                <2> 	add edi, edx
  8469 000068D9 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8470 000068DC D1E8                <2> 	shr eax, 1
  8471 000068DE D1EA                <2> 	shr edx, 1
  8472 000068E0 01C7                <2> 	add edi, eax
  8473 000068E2 29D7                <2> 	sub edi, edx
  8474                              <2> 
  8475 000068E4 39D1                <2> 	cmp ecx, edx
  8476 000068E6 749C                <2> 	je .lpb
  8477                              <2> 
  8478 000068E8 01DF                <2> 	add edi, ebx
  8479 000068EA 01CF                <2> 	add edi, ecx
  8480 000068EC 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8481 000068EF D1E1                <2> 	shl ecx, 1
  8482 000068F1 29CF                <2> 	sub edi, ecx
  8483 000068F3 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8484 000068F6 D1E3                <2> 	shl ebx, 1
  8485 000068F8 29DF                <2> 	sub edi, ebx
  8486 000068FA 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8487 000068FD 01CF                <2> 	add edi, ecx
  8488 000068FF 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8489 00006902 D1EB                <2> 	shr ebx, 1
  8490 00006904 D1E9                <2> 	shr ecx, 1
  8491 00006906 01DF                <2> 	add edi, ebx
  8492 00006908 29CF                <2> 	sub edi, ecx
  8493 0000690A 39CA                <2> 	cmp edx, ecx
  8494 0000690C 0F8272FFFFFF        <2> 	jb .lpb
  8495                              <2> .done:
  8496 00006912 5D                  <2> 	pop ebp
  8497 00006913 C3                  <2> 	ret
  8498                              <2> 	
  8499 00006914 00000000            <2> .ddF_x dd 0
  8500 00006918 00000000            <2> .ddF_y dd 0
  8501                              <2> 
  8502                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  8503 0000691C 55                  <2> 	push ebp
  8504 0000691D 663D0000            <2> 	cmp ax, 0
  8505 00006921 770A                <2> 	ja .nozerocircle
  8506 00006923 E8BA1A0000          <2> 	call putpixel	;the easiest circle ever
  8507 00006928 E95A010000          <2> 	jmp .done
  8508                              <2> .nozerocircle:
  8509 0000692D 6689F5              <2> 	mov bp, si
  8510 00006930 6650                <2> 	push ax
  8511 00006932 E8EC1A0000          <2> 	call getpixelmem
  8512 00006937 31C0                <2> 	xor eax, eax
  8513 00006939 6658                <2> 	pop ax
  8514 0000693B BE01000000          <2> 	mov esi, 1
  8515 00006940 29C6                <2> 	sub esi, eax
  8516 00006942 89C1                <2> 	mov ecx, eax
  8517 00006944 31C0                <2> 	xor eax, eax
  8518 00006946 66A1[17580000]      <2> 	mov ax, [resolutionx2]
  8519 0000694C F7E1                <2> 	mul ecx
  8520 0000694E 50                  <2> 	push eax
  8521 0000694F 31D2                <2> 	xor edx, edx
  8522 00006951 01C7                <2> 	add edi, eax
  8523 00006953 66892F              <2> 	mov [edi], bp
  8524 00006956 29C7                <2> 	sub edi, eax
  8525 00006958 29C7                <2> 	sub edi, eax
  8526 0000695A 66892F              <2> 	mov [edi], bp
  8527 0000695D 01C7                <2> 	add edi, eax
  8528 0000695F D1E1                <2> 	shl ecx, 1
  8529 00006961 01CF                <2> 	add edi, ecx
  8530 00006963 51                  <2> 	push ecx
  8531                              <2> .s0:
  8532 00006964 66892F              <2> 	mov [edi], bp
  8533 00006967 81EF02000000        <2> 	sub edi, 2
  8534 0000696D 49                  <2> 	dec ecx
  8535 0000696E 81F900000000        <2> 	cmp ecx, 0
  8536 00006974 75EE                <2> 	jne .s0
  8537 00006976 66892F              <2> 	mov [edi], bp
  8538 00006979 59                  <2> 	pop ecx
  8539 0000697A 01CF                <2> 	add edi, ecx
  8540 0000697C D1E9                <2> 	shr ecx, 1
  8541 0000697E B802000000          <2> 	mov eax, 2
  8542 00006983 F7E1                <2> 	mul ecx
  8543 00006985 48                  <2> 	dec eax
  8544 00006986 F7D0                <2> 	not eax ;make it negative
  8545 00006988 A3[8D6A0000]        <2> 	mov [.ddF_y], eax
  8546 0000698D 58                  <2> 	pop eax
  8547 0000698E BB01000000          <2> 	mov ebx, 1
  8548 00006993 891D[896A0000]      <2> 	mov [.ddF_x], ebx
  8549 00006999 4B                  <2> 	dec ebx
  8550 0000699A 31D2                <2> 	xor edx, edx
  8551 0000699C E904000000          <2> 	jmp .lp
  8552                              <2> .lpb:
  8553 000069A1 D1EA                <2> 	shr edx, 1
  8554 000069A3 D1E9                <2> 	shr ecx, 1
  8555                              <2> .lp:	;it starts this with the center in edi
  8556                              <2> 		;color in bp
  8557                              <2> 		;ddF_x in memory
  8558                              <2> 		;x*resolutionx2 in ebx
  8559                              <2> 		;x in edx
  8560                              <2> 		;ddF_y in memory
  8561                              <2> 		;y*resolutionx2 in eax
  8562                              <2> 		;f in esi
  8563                              <2> 		;y in ecx
  8564 000069A5 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8565 000069AB 7717                <2> 	ja	.noddF_y
  8566 000069AD 49                  <2> 	dec ecx
  8567 000069AE 2B05[17580000]      <2> 	sub eax, [resolutionx2]
  8568 000069B4 8105[8D6A0000]0200- <2> 	add dword [.ddF_y], 2
  8569 000069BC 0000                <2>
  8570 000069BE 0335[8D6A0000]      <2> 	add esi, [.ddF_y]
  8571                              <2> .noddF_y:
  8572 000069C4 42                  <2> 	inc edx
  8573 000069C5 031D[17580000]      <2> 	add ebx, [resolutionx2]
  8574 000069CB 8105[896A0000]0200- <2> 	add dword [.ddF_x], 2
  8575 000069D3 0000                <2>
  8576 000069D5 0335[896A0000]      <2> 	add esi, [.ddF_x]
  8577                              <2> 
  8578 000069DB D1E2                <2> 	shl edx, 1
  8579 000069DD D1E1                <2> 	shl ecx, 1
  8580 000069DF 52                  <2> 	push edx
  8581 000069E0 29D7                <2> 	sub edi, edx
  8582 000069E2 01C7                <2> 	add edi, eax
  8583 000069E4 81FA00000000        <2> 	cmp edx, 0
  8584 000069EA 7412                <2> 	je .nos1
  8585                              <2> .s1:
  8586 000069EC 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8587 000069EF 81C702000000        <2> 	add edi, 2
  8588 000069F5 4A                  <2> 	dec edx
  8589 000069F6 81FA00000000        <2> 	cmp edx, 0
  8590 000069FC 75EE                <2> 	jne .s1
  8591                              <2> .nos1:
  8592 000069FE 66892F              <2> 	mov [edi], bp
  8593 00006A01 5A                  <2> 	pop edx
  8594 00006A02 52                  <2> 	push edx
  8595 00006A03 29C7                <2> 	sub edi, eax
  8596 00006A05 29C7                <2> 	sub edi, eax
  8597 00006A07 81FA00000000        <2> 	cmp edx, 0
  8598 00006A0D 7412                <2> 	je .nos2
  8599                              <2> .s2:
  8600 00006A0F 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8601 00006A12 81EF02000000        <2> 	sub edi, 2
  8602 00006A18 4A                  <2> 	dec edx
  8603 00006A19 81FA00000000        <2> 	cmp edx, 0
  8604 00006A1F 75EE                <2> 	jne .s2
  8605                              <2> .nos2:
  8606 00006A21 66892F              <2> 	mov [edi], bp
  8607 00006A24 5A                  <2> 	pop edx
  8608 00006A25 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  8609 00006A27 01D7                <2> 	add edi, edx
  8610                              <2> 
  8611 00006A29 39D1                <2> 	cmp ecx, edx
  8612 00006A2B 0F8470FFFFFF        <2> 	je .lpb
  8613                              <2> 
  8614 00006A31 51                  <2> 	push ecx
  8615 00006A32 01DF                <2> 	add edi, ebx
  8616 00006A34 29CF                <2> 	sub edi, ecx
  8617 00006A36 81F900000000        <2> 	cmp ecx, 0
  8618 00006A3C 7412                <2> 	je .nos3
  8619                              <2> .s3:
  8620 00006A3E 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8621 00006A41 81C702000000        <2> 	add edi, 2
  8622 00006A47 49                  <2> 	dec ecx
  8623 00006A48 81F900000000        <2> 	cmp ecx, 0
  8624 00006A4E 75EE                <2> 	jne .s3
  8625                              <2> .nos3:
  8626 00006A50 66892F              <2> 	mov [edi], bp
  8627 00006A53 59                  <2> 	pop ecx
  8628 00006A54 51                  <2> 	push ecx
  8629 00006A55 29DF                <2> 	sub edi, ebx
  8630 00006A57 29DF                <2> 	sub edi, ebx
  8631 00006A59 81F900000000        <2> 	cmp ecx, 0
  8632 00006A5F 7412                <2> 	je .nos4
  8633                              <2> .s4:
  8634 00006A61 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8635 00006A64 81EF02000000        <2> 	sub edi, 2
  8636 00006A6A 49                  <2> 	dec ecx
  8637 00006A6B 81F900000000        <2> 	cmp ecx, 0
  8638 00006A71 75EE                <2> 	jne .s4
  8639                              <2> .nos4:
  8640 00006A73 66892F              <2> 	mov [edi], bp
  8641 00006A76 59                  <2> 	pop ecx
  8642 00006A77 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  8643 00006A79 01CF                <2> 	add edi, ecx
  8644                              <2> 
  8645 00006A7B D1EA                <2> 	shr edx, 1
  8646 00006A7D D1E9                <2> 	shr ecx, 1
  8647 00006A7F 39CA                <2> 	cmp edx, ecx
  8648 00006A81 0F821EFFFFFF        <2> 	jb .lp
  8649                              <2> .done:
  8650 00006A87 5D                  <2> 	pop ebp
  8651 00006A88 C3                  <2> 	ret
  8652                              <2> 	
  8653 00006A89 00000000            <2> .ddF_x dd 0
  8654 00006A8D 00000000            <2> .ddF_y dd 0
  8655                              <1> %include "source/gui/cursor.asm"
  8656                              <2> clearmousecursor:
  8657 00006A91 BE[F96D0000]        <2> 		mov esi, background
  8658 00006A96 8B3D[3F570000]      <2> 		mov edi, [physbaseptr]
  8659 00006A9C 31D2                <2> 		xor edx, edx
  8660 00006A9E 31C9                <2> 		xor ecx, ecx
  8661 00006AA0 668B15[095A0000]    <2> 		mov dx, [lastmouseposition]
  8662 00006AA7 668B0D[0B5A0000]    <2> 		mov cx, [lastmouseposition + 2]
  8663 00006AAE 01D7                <2> 		add edi, edx
  8664 00006AB0 31D2                <2> 		xor edx, edx
  8665 00006AB2 668B15[17580000]    <2> 		mov dx, [resolutionx2]
  8666 00006AB9 81F900000000        <2> 		cmp ecx, 0
  8667 00006ABF 7408                <2> 		je .nomul
  8668 00006AC1 52                  <2> 		push edx
  8669 00006AC2 89D0                <2> 		mov eax, edx
  8670 00006AC4 F7E1                <2> 		mul ecx
  8671 00006AC6 01C7                <2> 		add edi, eax
  8672 00006AC8 5A                  <2> 		pop edx
  8673                              <2> .nomul:
  8674                              <2> %ifdef 	gui.background
  8675                              <2> 		cmp dword [backgroundimage], 0
  8676                              <2> 		je .noyclr
  8677                              <2> 		mov esi, [backgroundimage]
  8678                              <2> 		sub edi, [physbaseptr]
  8679                              <2> 		add esi, edi
  8680                              <2> 		add edi, [physbaseptr]
  8681                              <2> .backlp:
  8682                              <2> 		xor ebx, ebx
  8683                              <2> .noyback:
  8684                              <2> 		mov eax, [esi + ebx]
  8685                              <2> 		mov [edi + ebx], eax
  8686                              <2> 		add ebx, 4
  8687                              <2> 		cmp ebx, 16
  8688                              <2> 		jne .noyback
  8689                              <2> 		add edi, edx
  8690                              <2> 		add esi, edx
  8691                              <2> 		inc cx
  8692                              <2> 		cmp cx, 16
  8693                              <2> 		jb .backlp
  8694                              <2> 		ret
  8695                              <2> %endif
  8696                              <2> .noyclr:
  8697 00006AC9 668B06              <2> 		mov ax, [esi]
  8698 00006ACC C1C010              <2> 		rol eax, 16
  8699 00006ACF 668B06              <2> 		mov ax, [esi]
  8700 00006AD2 8907                <2> 		mov [edi], eax
  8701 00006AD4 894704              <2> 		mov [edi + 4], eax
  8702 00006AD7 894708              <2> 		mov [edi + 8], eax
  8703 00006ADA 89470C              <2> 		mov [edi + 12], eax
  8704 00006ADD 01D7                <2> 		add edi, edx
  8705 00006ADF 6641                <2> 		inc cx
  8706 00006AE1 6681F91000          <2> 		cmp cx, 16
  8707 00006AE6 72E1                <2> 		jb .noyclr
  8708 00006AE8 C3                  <2> 		ret
  8709                              <2> 
  8710                              <2> switchmousepos:		;;switch were the mouse is located
  8711 00006AE9 BE[3BD60000]        <2> 		mov esi, mousecolorbuf
  8712 00006AEE 8B3D[3F570000]      <2> 		mov edi, [physbaseptr]
  8713 00006AF4 31D2                <2> 		xor edx, edx
  8714 00006AF6 31C9                <2> 		xor ecx, ecx
  8715 00006AF8 668B15[095A0000]    <2> 		mov dx, [lastmouseposition]
  8716 00006AFF 668B0D[0B5A0000]    <2> 		mov cx, [lastmouseposition + 2]
  8717 00006B06 01D7                <2> 		add edi, edx
  8718 00006B08 31D2                <2> 		xor edx, edx
  8719 00006B0A 668B15[17580000]    <2> 		mov dx, [resolutionx2]
  8720 00006B11 6681F90000          <2> 		cmp cx, 0
  8721 00006B16 740B                <2> 		je noswmsy
  8722 00006B18 01D7                <2> swmsy:		add edi, edx
  8723 00006B1A 6649                <2> 		dec cx
  8724 00006B1C 6681F90000          <2> 		cmp cx, 0
  8725 00006B21 75F5                <2> 		jne swmsy
  8726 00006B23 8B06                <2> noswmsy:	mov eax, [esi]
  8727 00006B25 8B5E04              <2> 		mov ebx, [esi + 4]
  8728 00006B28 8907                <2> 		mov [edi], eax
  8729 00006B2A 895F04              <2> 		mov [edi + 4], ebx
  8730 00006B2D 8B4608              <2> 		mov eax, [esi + 8]
  8731 00006B30 8B5E0C              <2> 		mov ebx, [esi + 12]
  8732 00006B33 894708              <2> 		mov [edi + 8], eax
  8733 00006B36 895F0C              <2> 		mov [edi + 12], ebx
  8734 00006B39 01D7                <2> 		add edi, edx
  8735 00006B3B 81C610000000        <2> 		add esi, 16
  8736 00006B41 81FE[3BD70000]      <2> 		cmp esi, mcolorend
  8737 00006B47 72DA                <2> 		jb noswmsy
  8738                              <2> 		
  8739                              <2> switchmousepos2:
  8740 00006B49 BE[3BD60000]        <2> 		mov esi, mousecolorbuf
  8741 00006B4E 8B3D[3F570000]      <2> 		mov edi, [physbaseptr]
  8742 00006B54 31D2                <2> 		xor edx, edx
  8743 00006B56 31C9                <2> 		xor ecx, ecx
  8744 00006B58 668B15[0D5A0000]    <2> 		mov dx, [mousecursorposition]
  8745 00006B5F 668B0D[0F5A0000]    <2> 		mov cx, [mousecursorposition + 2]
  8746 00006B66 01D7                <2> 		add edi, edx
  8747 00006B68 31D2                <2> 		xor edx, edx
  8748 00006B6A 668B15[17580000]    <2> 		mov dx, [resolutionx2]
  8749 00006B71 6681F90000          <2> 		cmp cx, 0
  8750 00006B76 740B                <2> 		je noswmsy2
  8751 00006B78 01D7                <2> swmsy2:		add edi, edx
  8752 00006B7A 6649                <2> 		dec cx
  8753 00006B7C 6681F90000          <2> 		cmp cx, 0
  8754 00006B81 75F5                <2> 		jne swmsy2
  8755 00006B83 8B07                <2> noswmsy2:	mov eax, [edi]
  8756 00006B85 8B5F04              <2> 		mov ebx, [edi + 4]
  8757 00006B88 8906                <2> 		mov [esi], eax
  8758 00006B8A 895E04              <2> 		mov [esi + 4], ebx
  8759 00006B8D 8B4708              <2> 		mov eax, [edi + 8]
  8760 00006B90 8B5F0C              <2> 		mov ebx, [edi + 12]
  8761 00006B93 894608              <2> 		mov [esi + 8], eax
  8762 00006B96 895E0C              <2> 		mov [esi + 12], ebx
  8763 00006B99 01D7                <2> 		add edi, edx
  8764 00006B9B 81C610000000        <2> 		add esi, 16
  8765 00006BA1 81FE[3BD70000]      <2> 		cmp esi, mcolorend
  8766 00006BA7 72DA                <2> 		jb noswmsy2
  8767 00006BA9 C3                  <2> 		ret
  8768                              <2> 		
  8769                              <1> %include "source/gui/icon.asm"
  8770 00006BAA 0000                <2> iconcolor dw 0
  8771                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8772 00006BAC A2[4B840000]        <2> 		mov [iconselected], al
  8773 00006BB1 8025[4B840000]01    <2> 		and byte [iconselected], 1
  8774 00006BB8 B401                <2> 		mov ah, 1
  8775 00006BBA E8B5150000          <2> 		call graphicsadd
  8776                              <2> 	showicon2:
  8777 00006BBF 8B3D[3F570000]      <2> 		mov edi, [physbaseptr]
  8778 00006BC5 6601D2              <2> 		add dx, dx
  8779 00006BC8 663B15[17580000]    <2> 		cmp dx, [resolutionx2]
  8780 00006BCF 720C                <2> 		jb screenxgood
  8781 00006BD1 668B15[17580000]    <2> 		mov dx, [resolutionx2]
  8782 00006BD8 6681EA4000          <2> 		sub dx, 64
  8783                              <2> 	screenxgood:
  8784 00006BDD 6681F90000          <2> 		cmp cx, 0
  8785 00006BE2 742B                <2> 		je noscreenygoodchk
  8786 00006BE4 663B0D[2B570000]    <2> 		cmp cx, [resolutiony]
  8787 00006BEB 720C                <2> 		jb screenygood
  8788 00006BED 668B0D[2B570000]    <2> 		mov cx, [resolutiony]
  8789 00006BF4 6681E92000          <2> 		sub cx, 32
  8790                              <2> 	screenygood:
  8791 00006BF9 50                  <2> 		push eax
  8792 00006BFA 52                  <2> 		push edx
  8793 00006BFB 31C0                <2> 		xor eax, eax
  8794 00006BFD 31DB                <2> 		xor ebx, ebx
  8795 00006BFF 668B1D[17580000]    <2> 		mov bx, [resolutionx2]
  8796 00006C06 6689C8              <2> 		mov ax, cx
  8797 00006C09 F7E3                <2> 		mul ebx
  8798 00006C0B 01C7                <2> 		add edi, eax
  8799 00006C0D 5A                  <2> 		pop edx
  8800 00006C0E 58                  <2> 		pop eax
  8801                              <2> 	noscreenygoodchk:
  8802 00006C0F 31DB                <2> 		xor ebx, ebx
  8803 00006C11 6689D3              <2> 		mov bx, dx
  8804 00006C14 01DF                <2> 		add edi, ebx
  8805 00006C16 6631C9              <2> 		xor cx, cx
  8806 00006C19 668B06              <2> 		mov ax, [esi]
  8807 00006C1C 81C602000000        <2> 		add esi, 2
  8808 00006C22 66A3[AA6B0000]      <2> 		mov [iconcolor], ax
  8809                              <2> 	writeicon:
  8810 00006C28 8B06                <2> 		mov eax, [esi]
  8811 00006C2A D1C0                <2> 		rol eax, 1
  8812 00006C2C 30C9                <2> 		xor cl, cl
  8813                              <2> 	writeiconline:
  8814 00006C2E B201                <2> 		mov dl, 1
  8815 00006C30 20C2                <2> 		and dl, al
  8816 00006C32 3215[4B840000]      <2> 		xor dl, [iconselected]
  8817 00006C38 668B1D[F96D0000]    <2> 		mov bx, [background]
  8818 00006C3F 66891F              <2> 		mov [edi], bx
  8819 00006C42 80FA00              <2> 		cmp dl, 0
  8820 00006C45 740A                <2> 		je noiconline
  8821 00006C47 668B15[AA6B0000]    <2> 		mov dx, [iconcolor]
  8822 00006C4E 668917              <2> 		mov [edi], dx
  8823                              <2> 	noiconline:
  8824 00006C51 81C702000000        <2> 		add edi, 2
  8825 00006C57 D1C0                <2> 		rol eax, 1
  8826 00006C59 FEC1                <2> 		inc cl
  8827 00006C5B 80F920              <2> 		cmp cl, 32
  8828 00006C5E 72CE                <2> 		jb writeiconline
  8829 00006C60 81C604000000        <2> 		add esi, 4
  8830 00006C66 FEC5                <2> 		inc ch
  8831 00006C68 31D2                <2> 		xor edx, edx
  8832 00006C6A 668B15[17580000]    <2> 		mov dx, [resolutionx2]
  8833 00006C71 01D7                <2> 		add edi, edx
  8834 00006C73 81EF40000000        <2> 		sub edi, 64
  8835 00006C79 80FD20              <2> 		cmp ch, 32
  8836 00006C7C 72AA                <2> 		jb writeicon
  8837 00006C7E 31C0                <2> 		xor eax, eax
  8838 00006C80 C3                  <2> 		ret
  8839                              <1> %include "source/gui/line.asm"
  8840                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  8841 00006C81 668935[A36D0000]    <2> 	mov [.color], si
  8842 00006C88 C605[A56D0000]00    <2> 	mov byte [.steep], 0
  8843 00006C8F C605[A66D0000]00    <2> 	mov byte [.yreversed], 0
  8844 00006C96 E907000000          <2> 	jmp .notsteep
  8845                              <2> .steeploop:
  8846 00006C9B C605[A56D0000]01    <2> 	mov byte [.steep], 1
  8847                              <2> .notsteep:
  8848 00006CA2 31FF                <2> 	xor edi, edi
  8849 00006CA4 31F6                <2> 	xor esi, esi
  8850 00006CA6 6639DA              <2> 	cmp dx, bx
  8851 00006CA9 7705                <2> 	ja .noreversex
  8852 00006CAB 6687D3              <2> 	xchg dx, bx
  8853 00006CAE 6691                <2> 	xchg cx, ax
  8854                              <2> .noreversex:
  8855 00006CB0 6689D7              <2> 	mov di, dx
  8856 00006CB3 6629DF              <2> 	sub di, bx
  8857                              <2> 	
  8858 00006CB6 6639C1              <2> 	cmp cx, ax
  8859 00006CB9 720B                <2> 	jb .reversey
  8860 00006CBB 6689CE              <2> 	mov si, cx
  8861 00006CBE 6629C6              <2> 	sub si, ax
  8862 00006CC1 E90D000000          <2> 	jmp .normal
  8863                              <2> .reversey:
  8864 00006CC6 C605[A66D0000]02    <2> 	mov byte [.yreversed], 2
  8865 00006CCD 6689C6              <2> 	mov si, ax
  8866 00006CD0 6629CE              <2> 	sub si, cx	
  8867                              <2> .normal:
  8868 00006CD3 6687CA              <2> 	xchg cx, dx
  8869 00006CD6 6693                <2> 	xchg ax, bx
  8870 00006CD8 6639FE              <2> 	cmp si, di
  8871 00006CDB 77BE                <2> 	ja .steeploop
  8872 00006CDD 6687CA              <2> 	xchg cx, dx
  8873 00006CE0 6693                <2> 	xchg ax, bx
  8874                              <2> 	
  8875 00006CE2 6691                <2> 	xchg ax, cx
  8876 00006CE4 6687DA              <2> 	xchg bx, dx
  8877 00006CE7 66893D[A96D0000]    <2> 	mov [.xdelta], di
  8878 00006CEE 668935[AB6D0000]    <2> 	mov [.ydelta], si
  8879 00006CF5 668B35[A36D0000]    <2> 	mov si, [.color]
  8880 00006CFC 66891D[A76D0000]    <2> 	mov [.endline], bx
  8881 00006D03 6652                <2> 	push dx
  8882 00006D05 6651                <2> 	push cx
  8883 00006D07 6687CA              <2> 	xchg cx, dx
  8884 00006D0A 803D[A56D0000]01    <2> 	cmp byte [.steep], 1
  8885 00006D11 7403                <2> 	je .xchg
  8886 00006D13 6687D1              <2> 	xchg dx, cx
  8887                              <2> .xchg:
  8888 00006D16 E808170000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  8889 00006D1B 6659                <2> 	pop cx
  8890 00006D1D 665A                <2> 	pop dx
  8891 00006D1F 31C0                <2> 	xor eax, eax
  8892 00006D21 66A1[A96D0000]      <2> 	mov ax, [.xdelta]
  8893 00006D27 66D1E8              <2> 	shr ax, 1
  8894 00006D2A 8A0D[A56D0000]      <2> 	mov cl, [.steep]
  8895 00006D30 0A0D[A66D0000]      <2> 	or cl, [.yreversed]
  8896 00006D36 55                  <2> 	push ebp
  8897 00006D37 668B2D[A76D0000]    <2> 	mov bp, [.endline]
  8898 00006D3E 6629D5              <2> 	sub bp, dx
  8899 00006D41 668B15[AB6D0000]    <2> 	mov dx, [.ydelta]
  8900                              <2> .lp:
  8901 00006D48 668937              <2> 	mov [edi], si
  8902 00006D4B 6639D0              <2> 	cmp ax, dx
  8903 00006D4E 7332                <2> 	jae .noaddx
  8904 00006D50 F6C102              <2> 	test cl, 2
  8905 00006D53 7414                <2> 	jz .nodecy
  8906 00006D55 F6C101              <2> 	test cl, 1
  8907 00006D58 7509                <2> 	jnz .steepy
  8908 00006D5A 29DF                <2> 	sub edi, ebx
  8909 00006D5C 29DF                <2> 	sub edi, ebx
  8910 00006D5E E906000000          <2> 	jmp .nodecy
  8911                              <2> .steepy:
  8912 00006D63 81EF04000000        <2> 	sub edi, 4
  8913                              <2> .nodecy:
  8914 00006D69 660305[A96D0000]    <2> 	add ax, [.xdelta]
  8915 00006D70 F6C101              <2> 	test cl, 1
  8916 00006D73 7507                <2> 	jnz .steepx
  8917 00006D75 01DF                <2> 	add edi, ebx
  8918 00006D77 E906000000          <2> 	jmp .noaddx
  8919                              <2> .steepx:
  8920 00006D7C 81C702000000        <2> 	add edi, 2
  8921                              <2> .noaddx:
  8922 00006D82 6629D0              <2> 	sub ax, dx
  8923 00006D85 664D                <2> 	dec bp
  8924 00006D87 81C702000000        <2> 	add edi, 2
  8925 00006D8D F6C101              <2> 	test cl, 1
  8926 00006D90 7408                <2> 	jz .nosteepx
  8927 00006D92 81EF02000000        <2> 	sub edi, 2
  8928 00006D98 01DF                <2> 	add edi, ebx
  8929                              <2> .nosteepx:
  8930 00006D9A 6681FD0000          <2> 	cmp bp, 0
  8931 00006D9F 75A7                <2> 	jne .lp
  8932                              <2> .done:
  8933 00006DA1 5D                  <2> 	pop ebp
  8934 00006DA2 C3                  <2> 	ret
  8935                              <2> 	
  8936 00006DA3 0000                <2> .color dw 0
  8937 00006DA5 00                  <2> .steep db 0
  8938 00006DA6 00                  <2> .yreversed db 0
  8939 00006DA7 0000                <2> .endline dw 0
  8940 00006DA9 0000                <2> .xdelta dw 0
  8941 00006DAB 0000                <2> .ydelta dw 0
  8942                              <1> %include "source/gui/refresh.asm"
  8943                              <2> guiclear:
  8944 00006DAD 8B3D[3F570000]      <2> 	mov edi, [physbaseptr]
  8945 00006DB3 668B15[29570000]    <2> 	mov dx, [resolutionx]
  8946 00006DBA 668B0D[2B570000]    <2> 	mov cx, [resolutiony]
  8947 00006DC1 668B1D[F96D0000]    <2> 	mov bx, [background]
  8948 00006DC8 66891D[FB6D0000]    <2> 	mov [background + 2], bx
  8949                              <2> %ifdef gui.background
  8950                              <2> 	cmp dword [backgroundimage], 0
  8951                              <2> 	je guiclear.noback
  8952                              <2> 		mov esi, [backgroundimage]
  8953                              <2> 	.lp:
  8954                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  8955                              <2> 		;movdqa [edi], xmm0
  8956                              <2> 		;add esi, 16
  8957                              <2> 		;add edi, 16
  8958                              <2> 		;sub dx, 8
  8959                              <2> 		mov eax, [esi]
  8960                              <2> 		mov [edi], eax
  8961                              <2> 		add esi, 4
  8962                              <2> 		add edi, 4
  8963                              <2> 		sub dx, 2
  8964                              <2> 		cmp dx, 0
  8965                              <2> 		ja .lp
  8966                              <2> 		dec cx
  8967                              <2> 		mov dx, [resolutionx]
  8968                              <2> 		cmp cx, 0
  8969                              <2> 		ja .lp
  8970                              <2> 		ret
  8971                              <2> 	backgroundimage dd 0
  8972                              <2> %endif
  8973                              <2> guiclear.noback:
  8974 00006DCF A1[F96D0000]        <2> 	mov eax, [background]
  8975                              <2> guiclearloop:
  8976 00006DD4 8907                <2> 	mov [edi], eax
  8977 00006DD6 81C704000000        <2> 	add edi, 4
  8978 00006DDC 6681EA0200          <2> 	sub dx, 2
  8979 00006DE1 6681FA0000          <2> 	cmp dx, 0
  8980 00006DE6 77EC                <2> 	ja guiclearloop
  8981 00006DE8 6649                <2> 	dec cx
  8982 00006DEA 668B15[29570000]    <2> 	mov dx, [resolutionx]
  8983 00006DF1 6681F90000          <2> 	cmp cx, 0
  8984 00006DF6 77DC                <2> 	ja guiclearloop
  8985 00006DF8 C3                  <2> 	ret
  8986                              <2> 
  8987 00006DF9 CF7B<rept>          <2> background times 2 dw 0111101111001111b
  8988                              <2> 	.original equ 0111101111001111b
  8989                              <2> 
  8990                              <2> reloadallgraphics:
  8991 00006DFD BF[3BD40000]        <2> 		mov edi, graphicstable
  8992                              <2> reloadgraphicsloop:
  8993 00006E02 8B7702              <2> 		mov esi, [edi + 2]
  8994 00006E05 668B5706            <2> 		mov dx, [edi + 6]
  8995 00006E09 668B4F08            <2> 		mov cx, [edi + 8]
  8996 00006E0D 668B07              <2> 		mov ax, [edi]
  8997 00006E10 668B5F0A            <2> 		mov bx, [edi + 10]
  8998 00006E14 893D[60810000]      <2> 		mov [grpctblpos], edi
  8999 00006E1A 3B3D[F77B0000]      <2> 		cmp edi, [dragging]
  9000 00006E20 741E                <2> 		je loadedgraphic
  9001 00006E22 663D0100            <2> 		cmp ax, 1
  9002 00006E26 0F8436000000        <2> 		je near icongraphic
  9003 00006E2C 663D0200            <2> 		cmp ax, 2
  9004 00006E30 0F843C000000        <2> 		je near stringgraphic
  9005 00006E36 663D0300            <2> 		cmp ax, 3
  9006 00006E3A 0F8416000000        <2> 		je near windowgraphic
  9007 00006E40 8B3D[60810000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  9008 00006E46 81C710000000        <2> 		add edi, 16
  9009 00006E4C 81FF[3BD60000]      <2> 		cmp edi, graphicstableend
  9010 00006E52 732E                <2> 		jae donereloadgraphics
  9011 00006E54 EBAC                <2> 		jmp reloadgraphicsloop
  9012                              <2> windowgraphic:
  9013 00006E56 E807090000          <2> 		call showwindow2
  9014 00006E5B E8A0AFFFFF          <2> 		call cleardouble
  9015 00006E60 EBDE                <2> 		jmp loadedgraphic
  9016 00006E62 80E301              <2> icongraphic:	and bl, 1
  9017 00006E65 881D[4B840000]      <2> 		mov [iconselected], bl
  9018 00006E6B E84FFDFFFF          <2> 		call showicon2
  9019 00006E70 EBCE                <2> 		jmp loadedgraphic
  9020 00006E72 80E301              <2> stringgraphic:  and bl, 1
  9021 00006E75 881D[F37B0000]      <2> 		mov [mouseselecton], bl
  9022 00006E7B E8CE050000          <2> 		call showstring2
  9023 00006E80 EBBE                <2> 		jmp loadedgraphic
  9024                              <2> donereloadgraphics:
  9025 00006E82 8B3D[F77B0000]      <2> 		mov edi, [dragging]
  9026 00006E88 81FF[3BD40000]      <2> 		cmp edi, graphicstable
  9027 00006E8E 7226                <2> 		jb notcorrectdrag
  9028 00006E90 668B07              <2> 		mov ax, [edi]
  9029 00006E93 8B7702              <2> 		mov esi, [edi + 2]
  9030 00006E96 668B5706            <2> 		mov dx, [edi + 6]
  9031 00006E9A 668B4F08            <2> 		mov cx, [edi + 8]
  9032 00006E9E 668B5F0A            <2> 		mov bx, [edi + 10]
  9033 00006EA2 663D0100            <2> 		cmp ax, 1
  9034 00006EA6 750F                <2> 		jne noticondragging
  9035 00006EA8 80E301              <2> 		and bl, 1
  9036 00006EAB 881D[4B840000]      <2> 		mov [iconselected], bl
  9037 00006EB1 E809FDFFFF          <2> 		call showicon2
  9038                              <2> notcorrectdrag:
  9039 00006EB6 C3                  <2> 		ret
  9040                              <2> 
  9041                              <2> 	noticondragging:
  9042 00006EB7 663D0200            <2> 		cmp ax, 2
  9043 00006EBB 75F9                <2> 		jne notcorrectdrag
  9044 00006EBD 80E301              <2> 		and bl, 1
  9045 00006EC0 881D[F37B0000]      <2> 		mov [mouseselecton], bl
  9046 00006EC6 E883050000          <2> 		call showstring2
  9047 00006ECB EBE9                <2> 		jmp notcorrectdrag
  9048                              <1> %include "source/gui/square.asm"
  9049                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  9050 00006ECD 6639D3              <2> 	cmp bx, dx
  9051 00006ED0 7303                <2> 	jae .noxchgx
  9052 00006ED2 6687DA              <2> 	xchg bx, dx
  9053                              <2> .noxchgx:
  9054 00006ED5 6639C8              <2> 	cmp ax, cx
  9055 00006ED8 7302                <2> 	jae .noxchgy
  9056 00006EDA 6691                <2> 	xchg ax, cx
  9057                              <2> .noxchgy:
  9058 00006EDC 6650                <2> 	push ax
  9059 00006EDE 6653                <2> 	push bx
  9060 00006EE0 6652                <2> 	push dx
  9061 00006EE2 E83C150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9062 00006EE7 31D2                <2> 	xor edx, edx
  9063 00006EE9 665A                <2> 	pop dx
  9064 00006EEB 31DB                <2> 	xor ebx, ebx
  9065 00006EED 665B                <2> 	pop bx
  9066 00006EEF 6658                <2> 	pop ax
  9067                              <2> .lp0:
  9068 00006EF1 6652                <2> 	push dx
  9069                              <2> .lp:
  9070 00006EF3 668937              <2> 	mov [edi], si
  9071 00006EF6 81C702000000        <2> 	add edi, 2
  9072 00006EFC 6642                <2> 	inc dx
  9073 00006EFE 6639DA              <2> 	cmp dx, bx
  9074 00006F01 76F0                <2> 	jbe .lp
  9075 00006F03 665A                <2> 	pop dx
  9076 00006F05 81EF02000000        <2> 	sub edi, 2
  9077 00006F0B 29DF                <2> 	sub edi, ebx
  9078 00006F0D 29DF                <2> 	sub edi, ebx
  9079 00006F0F 01D7                <2> 	add edi, edx
  9080 00006F11 01D7                <2> 	add edi, edx
  9081 00006F13 033D[17580000]      <2> 	add edi, [resolutionx2]
  9082 00006F19 6641                <2> 	inc cx
  9083 00006F1B 6639C1              <2> 	cmp cx, ax
  9084 00006F1E 7203                <2> 	jb .lp2
  9085 00006F20 74CF                <2> 	je .lp0
  9086 00006F22 C3                  <2> 	ret
  9087                              <2> .lp2:
  9088 00006F23 57                  <2> 	push edi
  9089 00006F24 668937              <2> 	mov [edi], si
  9090 00006F27 29D7                <2> 	sub edi, edx
  9091 00006F29 29D7                <2> 	sub edi, edx
  9092 00006F2B 01DF                <2> 	add edi, ebx
  9093 00006F2D 01DF                <2> 	add edi, ebx
  9094 00006F2F 668937              <2> 	mov [edi], si
  9095 00006F32 5F                  <2> 	pop edi
  9096 00006F33 033D[17580000]      <2> 	add edi, [resolutionx2]
  9097 00006F39 6641                <2> 	inc cx
  9098 00006F3B 6639C1              <2> 	cmp cx, ax
  9099 00006F3E 72E3                <2> 	jb .lp2
  9100 00006F40 EBAF                <2> 	jmp .lp0
  9101                              <2> 
  9102                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  9103 00006F42 6639D3              <2> 	cmp bx, dx
  9104 00006F45 7303                <2> 	jae .noxchgx
  9105 00006F47 6687DA              <2> 	xchg bx, dx
  9106                              <2> .noxchgx:
  9107 00006F4A 6639C8              <2> 	cmp ax, cx
  9108 00006F4D 7302                <2> 	jae .noxchgy
  9109 00006F4F 6691                <2> 	xchg ax, cx
  9110                              <2> .noxchgy:
  9111 00006F51 6650                <2> 	push ax
  9112 00006F53 6653                <2> 	push bx
  9113 00006F55 6652                <2> 	push dx
  9114 00006F57 E8C7140000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9115 00006F5C 31D2                <2> 	xor edx, edx
  9116 00006F5E 665A                <2> 	pop dx
  9117 00006F60 31DB                <2> 	xor ebx, ebx
  9118 00006F62 665B                <2> 	pop bx
  9119 00006F64 6658                <2> 	pop ax
  9120                              <2> .lp2
  9121 00006F66 6652                <2> 	push dx
  9122                              <2> .lp:
  9123 00006F68 668937              <2> 	mov [edi], si
  9124 00006F6B 81C702000000        <2> 	add edi, 2
  9125 00006F71 6642                <2> 	inc dx
  9126 00006F73 6639DA              <2> 	cmp dx, bx
  9127 00006F76 76F0                <2> 	jbe .lp
  9128 00006F78 665A                <2> 	pop dx
  9129 00006F7A 81EF02000000        <2> 	sub edi, 2
  9130 00006F80 29DF                <2> 	sub edi, ebx
  9131 00006F82 29DF                <2> 	sub edi, ebx
  9132 00006F84 01D7                <2> 	add edi, edx
  9133 00006F86 01D7                <2> 	add edi, edx
  9134 00006F88 033D[17580000]      <2> 	add edi, [resolutionx2]
  9135 00006F8E 6641                <2> 	inc cx
  9136 00006F90 6639C1              <2> 	cmp cx, ax
  9137 00006F93 76D1                <2> 	jbe .lp2
  9138 00006F95 C3                  <2> 	ret
  9139                              <1> %include "source/gui/startup.asm"
  9140                              <2> guisetup:
  9141                              <2> 	%ifdef gui.background
  9142                              <2> 	xor ebx, ebx
  9143                              <2> 	mov [backgroundimage], ebx
  9144                              <2> 	%endif
  9145 00006F96 E812FEFFFF          <2> 	call guiclear
  9146 00006F9B C605[5CA30000]01    <2> 	mov byte [guion], 1
  9147 00006FA2 C605[F37B0000]00    <2> 	mov byte [mouseselecton], 0
  9148 00006FA9 31C0                <2> 	xor eax, eax
  9149 00006FAB 31DB                <2> 	xor ebx, ebx
  9150 00006FAD 31C9                <2> 	xor ecx, ecx
  9151 00006FAF 31D2                <2> 	xor edx, edx
  9152                              <2> 	
  9153 00006FB1 BE[73710000]        <2> 	mov esi, pacmsg
  9154 00006FB6 30E4                <2> 	xor ah, ah
  9155 00006FB8 B010                <2> 	mov al, 00010000b
  9156 00006FBA 31DB                <2> 	xor ebx, ebx
  9157 00006FBC 66B99000            <2> 	mov cx, 144
  9158 00006FC0 66BA0400            <2> 	mov dx, 4
  9159 00006FC4 E872040000          <2> 	call showstring
  9160                              <2> 	
  9161 00006FC9 BE[B1710000]        <2> 	mov esi, interneticon
  9162 00006FCE 30E4                <2> 	xor ah, ah
  9163 00006FD0 B010                <2> 	mov al, 00010000b
  9164 00006FD2 BB[9C700000]        <2> 	mov ebx, noie
  9165 00006FD7 66B91800            <2> 	mov cx, 24
  9166 00006FDB 66BA0400            <2> 	mov dx, 4
  9167 00006FDF E8C8FBFFFF          <2> 	call showicon
  9168                              <2> 	
  9169 00006FE4 BE[33720000]        <2> 	mov esi, wordicon
  9170 00006FE9 30E4                <2> 	xor ah, ah
  9171 00006FEB B010                <2> 	mov al, 00010000b
  9172 00006FED 31DB                <2> 	xor ebx, ebx
  9173 00006FEF 66B91800            <2> 	mov cx, 24
  9174 00006FF3 66BA3000            <2> 	mov dx, 48
  9175 00006FF7 E8B0FBFFFF          <2> 	call showicon
  9176                              <2> 	
  9177 00006FFC BE[B5720000]        <2> 	mov esi, pacmanpellet
  9178 00007001 30E4                <2> 	xor ah, ah
  9179 00007003 B010                <2> 	mov al, 00010000b
  9180 00007005 31DB                <2> 	xor ebx, ebx
  9181 00007007 66B94000            <2> 	mov cx, 64
  9182 0000700B 66BA0400            <2> 	mov dx, 4
  9183 0000700F E898FBFFFF          <2> 	call showicon
  9184                              <2> 	
  9185 00007014 BE[B9730000]        <2> 	mov esi, pacman
  9186 00007019 30E4                <2> 	xor ah, ah
  9187 0000701B B010                <2> 	mov al, 00010000b
  9188 0000701D BB[85700000]        <2> 	mov ebx, pacmannomnom
  9189 00007022 66B94000            <2> 	mov cx, 64
  9190 00007026 66BA3000            <2> 	mov dx, 48
  9191 0000702A E87DFBFFFF          <2> 	call showicon
  9192                              <2> 	
  9193 0000702F BE[37730000]        <2> 	mov esi, ghostie
  9194 00007034 30E4                <2> 	xor ah, ah
  9195 00007036 B010                <2> 	mov al, 00010000b
  9196 00007038 BB[6E700000]        <2> 	mov ebx, boo
  9197 0000703D 66B96C00            <2> 	mov cx, 108
  9198 00007041 66BA0400            <2> 	mov dx, 4
  9199 00007045 E862FBFFFF          <2> 	call showicon
  9200                              <2> 	
  9201 0000704A BE[55710000]        <2> 	mov esi, start
  9202 0000704F 668B0D[2B570000]    <2> 	mov cx, [resolutiony]
  9203 00007056 6681E91000          <2> 	sub cx, 16
  9204 0000705B 66BA0200            <2> 	mov dx, 2
  9205 0000705F 30E4                <2> 	xor ah, ah
  9206 00007061 B010                <2> 	mov al, 00010000b
  9207 00007063 BB[11710000]        <2> 	mov ebx, winblows
  9208 00007068 E8CE030000          <2> 	call showstring
  9209                              <2> 
  9210                              <2> %ifdef gui.time	
  9211                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9212                              <2> %endif
  9213 0000706D C3                  <2> 	ret
  9214                              <2> 
  9215                              <2> 	boo:
  9216 0000706E BE[6E710000]        <2> 		mov esi, boomsg
  9217 00007073 66BA6400            <2> 		mov dx, 100
  9218 00007077 66B94001            <2> 		mov cx, 320
  9219 0000707B 31DB                <2> 		xor ebx, ebx
  9220 0000707D 6631C0              <2> 		xor ax, ax
  9221 00007080 E9B6030000          <2> 		jmp showstring
  9222                              <2> 
  9223                              <2> 	pacmannomnom:
  9224 00007085 BE[8C710000]        <2> 		mov esi, pacnom
  9225 0000708A 66BA8200            <2> 		mov dx, 130
  9226 0000708E 66B93C00            <2> 		mov cx, 60
  9227 00007092 31DB                <2> 		xor ebx, ebx
  9228 00007094 6631C0              <2> 		xor ax, ax
  9229 00007097 E99F030000          <2> 		jmp showstring	
  9230                              <2> 	
  9231                              <2> 	noie:
  9232 0000709C 66C705[9B710000]80- <2> 		mov word [termwindow], 640
  9233 000070A4 02                  <2>
  9234 000070A5 66C705[9D710000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9235 000070AD 01                  <2>
  9236 000070AE BE[9B710000]        <2> 		mov esi, termwindow
  9237 000070B3 66BA1000            <2> 		mov dx, 16
  9238 000070B7 66B91000            <2> 		mov cx, 16
  9239 000070BB 31DB                <2> 		xor ebx, ebx
  9240 000070BD 6631C0              <2> 		xor ax, ax
  9241 000070C0 E8DF050000          <2> 		call showwindow
  9242 000070C5 E9DDB8FFFF          <2> 		jmp os
  9243                              <2> 
  9244                              <2> 	gotomenuboot:
  9245 000070CA 31D2                <2> 		xor edx, edx
  9246 000070CC 31C9                <2> 		xor ecx, ecx
  9247 000070CE 668B15[29570000]    <2> 		mov dx, [resolutionx]
  9248 000070D5 668B0D[2B570000]    <2> 		mov cx, [resolutiony]
  9249 000070DC 66C1E904            <2> 		shr cx, 4
  9250 000070E0 6681E90100          <2> 		sub cx, 1
  9251 000070E5 66C1E104            <2> 		shl cx, 4
  9252 000070E9 668915[9B710000]    <2> 		mov [termwindow], dx
  9253 000070F0 66890D[9D710000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9254 000070F7 BE[9B710000]        <2> 		mov esi, termwindow
  9255 000070FC 6631D2              <2> 		xor dx, dx
  9256 000070FF 6631C9              <2> 		xor cx, cx
  9257 00007102 31DB                <2> 		xor ebx, ebx
  9258 00007104 6631C0              <2> 		xor ax, ax
  9259 00007107 E898050000          <2> 		call showwindow
  9260 0000710C E996B8FFFF          <2> 		jmp os
  9261                              <2> 
  9262                              <2> 	winblows:
  9263 00007111 BE[64710000]        <2> 		mov esi, turnoffmsg
  9264 00007116 BB[8B520000]        <2> 		mov ebx, turnoff
  9265 0000711B 668B0D[2B570000]    <2> 		mov cx, [resolutiony]
  9266 00007122 6681E92000          <2> 		sub cx, 32
  9267 00007127 6631D2              <2> 		xor dx, dx
  9268 0000712A 30E4                <2> 		xor ah, ah
  9269 0000712C B010                <2> 		mov al, 00010000b
  9270 0000712E E808030000          <2> 		call showstring
  9271 00007133 BE[5B710000]        <2> 		mov esi, gotomenu
  9272 00007138 668B0D[2B570000]    <2> 		mov cx, [resolutiony]
  9273 0000713F 6681E93000          <2> 		sub cx, 48
  9274 00007144 6631D2              <2> 		xor dx, dx
  9275 00007147 30E4                <2> 		xor ah, ah
  9276 00007149 B010                <2> 		mov al, 00010000b
  9277 0000714B BB[CA700000]        <2> 		mov ebx, gotomenuboot
  9278 00007150 E9E6020000          <2> 		jmp showstring
  9279                              <2> 		
  9280                              <2> 
  9281 00007155 737461727400        <2> 	start	db "start",0
  9282 0000715B 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9283 00007164 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9284 0000716D 00                  <2>
  9285 0000716E 426F6F2100          <2> 	boomsg db "Boo!",0
  9286 00007173 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9287 0000717C 73206561737920746F- <2>
  9288 00007185 20647261772E00      <2>
  9289 0000718C 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9290 00007195 6D206E6F6D00        <2>
  9291                              <2> 
  9292 0000719B 20035802            <2> 	termwindow:	dw 800,600	;window size
  9293 0000719F FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9294 000071A3 [3CD70000]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9295 000071A7 [E0410100]          <2>
  9296 000071AB 534855536800        <2> 	termmsg:	db "SHUSh",0	;;window title
  9297                              <2> 	
  9298 000071AB <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9299 000071AB <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9300 000071AB <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9301 000071AB <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9302 000071AB <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9303                              <2> 
  9304                              <2> %ifdef gui.time
  9305                              <2> guitime:
  9306                              <2> 		call time	;get rtc in timeshow & dateshow
  9307                              <2> 		xor ebx, ebx
  9308                              <2> 		mov dx, [resolutionx2]
  9309                              <2> 		xor cx, cx
  9310                              <2> 		sub dx, 304
  9311                              <2> 		mov esi, dateshow
  9312                              <2> 		mov al, 00010001b
  9313                              <2> 		call showstring
  9314                              <2> 		mov esi, timeshow
  9315                              <2> 		xor ebx, ebx
  9316                              <2> 		mov al, 00010001b
  9317                              <2> 		call showstring
  9318                              <2> 		ret
  9319                              <2> %endif
  9320                              <1> %include "source/gui/text.asm"
  9321                              <2> 	showstring:
  9322 0000743B A2[F37B0000]        <2> 		mov [mouseselecton], al
  9323 00007440 8025[F37B0000]01    <2> 		and byte [mouseselecton], 1
  9324 00007447 B402                <2> 		mov ah, 2
  9325 00007449 E8260D0000          <2> 		call graphicsadd
  9326                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9327 0000744E 30E4                <2> 		xor ah, ah
  9328 00007450 8A06                <2> 		mov al, [esi]
  9329 00007452 3C00                <2> 		cmp al, 0
  9330 00007454 741E                <2> 		je doneshowstring
  9331 00007456 46                  <2> 		inc esi
  9332 00007457 3CFF                <2> 		cmp al, 255
  9333 00007459 74F3                <2> 		je showstring2
  9334 0000745B 56                  <2> 		push esi
  9335 0000745C 668B1D[7C740000]    <2> 		mov bx, [colorfont2]
  9336 00007463 E825000000          <2> 		call showfontvesa
  9337 00007468 3C0A                <2> 		cmp al, 10
  9338 0000746A 7405                <2> 		je noproceedshst
  9339 0000746C 6681C20800          <2> 		add dx, 8
  9340                              <2> 	noproceedshst:
  9341 00007471 5E                  <2> 		pop esi
  9342 00007472 EBDA                <2> 		jmp showstring2
  9343                              <2> 	doneshowstring:
  9344 00007474 C605[F37B0000]00    <2> 		mov byte [mouseselecton], 0
  9345 0000747B C3                  <2> 		ret
  9346                              <2> 
  9347 0000747C FFFF                <2> colorfont2 dw 0xFFFF
  9348 0000747E 00                  <2> colorcache db 0
  9349                              <2> 
  9350 0000747F 02                  <2> resolutionbytes db 2
  9351 00007480 0000                <2> posxvesa dw 0
  9352 00007482 0000                <2> posyvesa dw 0
  9353 00007484 FFFF                <2> colorfont dw 0xFFFF
  9354                              <2> savefontvesa:		;;same rules as showfontvesa
  9355 00007486 C605[F27B0000]01    <2> 	mov byte [savefonton], 1
  9356                              <2> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  9357 0000748D 3CFF                <2> 	cmp al, 255
  9358 0000748F 7501                <2> 	jne nostopshowfont
  9359 00007491 C3                  <2> 	ret
  9360                              <2> nostopshowfont:
  9361 00007492 66890D[82740000]    <2> 	mov [posyvesa], cx
  9362 00007499 3C0A                <2> 	cmp al, 10
  9363 0000749B 0F8424000000        <2> 	je near goodvesafontx
  9364 000074A1 31C9                <2> 	xor ecx, ecx
  9365 000074A3 668B0D[17580000]    <2> 	mov cx, [resolutionx2]
  9366 000074AA 6639CA              <2> 	cmp dx, cx
  9367 000074AD 7616                <2> 	jbe goodvesafontx
  9368 000074AF 6631D2              <2> 	xor dx, dx
  9369 000074B2 668B0D[82740000]    <2> 	mov cx, [posyvesa]
  9370 000074B9 6681C11000          <2> 	add cx, 16
  9371 000074BE 66890D[82740000]    <2> 	mov [posyvesa], cx
  9372                              <2> goodvesafontx:
  9373 000074C5 668B0D[82740000]    <2> 	mov cx, [posyvesa]
  9374 000074CC 668915[80740000]    <2> 	mov [posxvesa], dx
  9375 000074D3 8B3D[3F570000]      <2> 	mov edi, [physbaseptr]
  9376 000074D9 66891D[84740000]    <2> 	mov [colorfont], bx
  9377 000074E0 31DB                <2> 	xor ebx, ebx
  9378 000074E2 88C3                <2> 	mov bl, al
  9379 000074E4 31C0                <2> 	xor eax, eax
  9380 000074E6 88D8                <2> 	mov al, bl
  9381 000074E8 6689D3              <2> 	mov bx, dx
  9382 000074EB 89DA                <2> 	mov edx, ebx
  9383 000074ED 31DB                <2> 	xor ebx, ebx
  9384 000074EF 6681F90000          <2> 	cmp cx, 0
  9385 000074F4 7414                <2> 	je vesaposloopdn
  9386 000074F6 668B1D[17580000]    <2> 	mov bx, [resolutionx2]
  9387                              <2> vesaposloop:
  9388 000074FD 52                  <2> 	push edx
  9389 000074FE 50                  <2> 	push eax
  9390 000074FF 31C0                <2> 	xor eax, eax
  9391 00007501 6689C8              <2> 	mov ax, cx
  9392 00007504 F7E3                <2> 	mul ebx
  9393 00007506 01C7                <2> 	add edi, eax
  9394 00007508 58                  <2> 	pop eax
  9395 00007509 5A                  <2> 	pop edx
  9396                              <2> vesaposloopdn:
  9397 0000750A 01D7                <2> 	add edi, edx
  9398 0000750C BE[83910000]        <2> 	mov esi, fonts
  9399                              <2> findfontvesa:
  9400 00007511 30E4                <2> 	xor ah, ah
  9401 00007513 3C0A                <2> 	cmp al, 10
  9402 00007515 0F84FE000000        <2> 	je near nwlinevesa
  9403 0000751B C1E004              <2> 	shl eax, 4
  9404 0000751E 01C6                <2> 	add esi, eax
  9405 00007520 C1E804              <2> 	shr eax, 4
  9406 00007523 81FE[83A10000]      <2> 	cmp esi, fontend
  9407 00007529 0F83B9000000        <2> 	jae near donefontvesa
  9408 0000752F 4E                  <2> 	dec esi
  9409                              <2> foundfontvesa:
  9410 00007530 46                  <2> 	inc esi
  9411 00007531 803D[F27B0000]01    <2> 	cmp byte [savefonton], 1
  9412 00007538 0F8401010000        <2> 	je near vesafontsaver
  9413 0000753E 30C9                <2> 	xor cl, cl
  9414 00007540 8A06                <2> 	mov al, [esi]
  9415 00007542 668B15[17580000]    <2> 	mov dx, [resolutionx2]
  9416 00007549 662B15[80740000]    <2> 	sub dx, [posxvesa]
  9417 00007550 6681FA1000          <2> 	cmp dx, 16
  9418 00007555 7708                <2> 	ja paintfontvesa
  9419 00007557 D0EA                <2> 	shr dl, 1
  9420 00007559 8815[18760000]      <2> 	mov [charwidth], dl
  9421                              <2> paintfontvesa:
  9422 0000755F B201                <2> 	mov dl, 1
  9423 00007561 20C2                <2> 	and dl, al
  9424 00007563 803D[F17B0000]01    <2> 	cmp byte [showcursorfonton], 1
  9425 0000756A 0F8435000000        <2> 	je near nodelpaintedfont
  9426 00007570 803D[F17B0000]02    <2> 	cmp byte [showcursorfonton], 2
  9427 00007577 0F8518000000        <2> 	jne near noswitchcursorfonton
  9428 0000757D 80FA00              <2> 	cmp dl, 0
  9429 00007580 0F842E000000        <2> 	je near nopixelset
  9430 00007586 668B1D[84740000]    <2> 	mov bx, [colorfont]
  9431 0000758D 66891F              <2> 	mov [edi], bx
  9432 00007590 E91F000000          <2> 	jmp nopixelset
  9433                              <2> noswitchcursorfonton:
  9434 00007595 3215[F37B0000]      <2> 	xor dl, [mouseselecton]
  9435 0000759B 668B1D[F96D0000]    <2> 	mov bx, [background]
  9436 000075A2 66891F              <2> 	mov [edi], bx
  9437                              <2> nodelpaintedfont:
  9438 000075A5 80FA00              <2> 	cmp dl, 0
  9439 000075A8 740A                <2> 	je nopixelset
  9440 000075AA 668B15[84740000]    <2> 	mov dx, [colorfont]
  9441 000075B1 668917              <2> 	mov [edi], dx
  9442                              <2> nopixelset:
  9443 000075B4 81C702000000        <2> 	add edi, 2
  9444 000075BA D0C0                <2> 	rol al, 1
  9445 000075BC FEC1                <2> 	inc cl
  9446 000075BE 3A0D[18760000]      <2> 	cmp cl, [charwidth]
  9447 000075C4 7299                <2> 	jb paintfontvesa
  9448 000075C6 FEC5                <2> 	inc ch
  9449 000075C8 31D2                <2> 	xor edx, edx
  9450 000075CA 668B15[17580000]    <2> 	mov dx, [resolutionx2]
  9451 000075D1 01D7                <2> 	add edi, edx
  9452 000075D3 31D2                <2> 	xor edx, edx
  9453 000075D5 8A15[18760000]      <2> 	mov dl, [charwidth]
  9454 000075DB 00D2                <2> 	add dl, dl
  9455 000075DD 29D7                <2> 	sub edi, edx
  9456 000075DF 80FD10              <2> 	cmp ch, 16
  9457 000075E2 0F8248FFFFFF        <2> 	jb foundfontvesa
  9458                              <2> donefontvesa:
  9459 000075E8 B208                <2> 	mov dl, 8
  9460 000075EA 8815[18760000]      <2> 	mov [charwidth], dl
  9461 000075F0 668B15[80740000]    <2> 	mov dx, [posxvesa]
  9462 000075F7 8A1D[18760000]      <2> 	mov bl, [charwidth]
  9463 000075FD 30FF                <2> 	xor bh, bh
  9464 000075FF 6601DA              <2> 	add dx, bx
  9465 00007602 668B1D[84740000]    <2> 	mov bx, [colorfont]
  9466 00007609 668B0D[82740000]    <2> 	mov cx, [posyvesa]
  9467 00007610 C605[F27B0000]00    <2> 	mov byte [savefonton], 0
  9468 00007617 C3                  <2> 	ret
  9469 00007618 08                  <2> charwidth db 8
  9470                              <2> nwlinevesa:
  9471 00007619 668B15[80740000]    <2> 	mov dx, [posxvesa]
  9472 00007620 6631D2              <2> 	xor dx, dx
  9473 00007623 668915[80740000]    <2> 	mov [posxvesa], dx
  9474 0000762A 668B0D[82740000]    <2> 	mov cx, [posyvesa]
  9475 00007631 6681C11000          <2> 	add cx, 16
  9476 00007636 66890D[82740000]    <2> 	mov [posyvesa], cx
  9477 0000763D EBA9                <2> 	jmp donefontvesa
  9478                              <2> vesafontsaver:
  9479 0000763F 30C0                <2> 	xor al, al
  9480 00007641 30C9                <2> 	xor cl, cl
  9481                              <2> vesafontsaver2:
  9482 00007643 668B17              <2> 	mov dx, [edi]
  9483 00007646 663B15[84740000]    <2> 	cmp dx, [colorfont]
  9484 0000764D 742F                <2> 	je colorfontmatch
  9485                              <2> donecolormatch:
  9486 0000764F 81C702000000        <2> 	add edi, 2
  9487 00007655 D0C0                <2> 	rol al, 1
  9488 00007657 FEC1                <2> 	inc cl
  9489 00007659 80F908              <2> 	cmp cl, 8
  9490 0000765C 72E5                <2> 	jb vesafontsaver2
  9491 0000765E 8806                <2> 	mov [esi], al
  9492 00007660 46                  <2> 	inc esi
  9493 00007661 FEC5                <2> 	inc ch
  9494 00007663 31D2                <2> 	xor edx, edx
  9495 00007665 668B15[17580000]    <2> 	mov dx, [resolutionx2]
  9496 0000766C 01D7                <2> 	add edi, edx
  9497 0000766E 81EF10000000        <2> 	sub edi, 16
  9498 00007674 80FD10              <2> 	cmp ch, 16
  9499 00007677 72C6                <2> 	jb vesafontsaver
  9500 00007679 E96AFFFFFF          <2> 	jmp donefontvesa
  9501                              <2> colorfontmatch:
  9502 0000767E 0401                <2> 	add al, 1
  9503 00007680 EBCD                <2> 	jmp donecolormatch
  9504                              <1> %include "source/gui/window.asm"
  9505 00007682 0000                <2> winvcopystx dw 0
  9506 00007684 0000                <2> winvcopysty dw 0
  9507 00007686 0000                <2> winvcopydx dw 0
  9508 00007688 0000                <2> winvcopycx dw 0
  9509 0000768A FFFF0000            <2> windowcolor dw 0xFFFF,0
  9510 0000768E 00000000            <2> windowbufloc: dd 0
  9511 00007692 00000000            <2> windowvideobuf dd 0
  9512 00007696 00000000            <2> windowvideobuf2 dd 0
  9513 0000769A 00000000            <2> windowinfobuf dd 0
  9514 0000769E 0000                <2> termcol dw 0
  9515 000076A0 00000000            <2> wincopyendpos dd 0
  9516                              <2> 
  9517                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9518 000076A4 C605[9C220000]01    <2> 		mov byte [termguion], 1
  9519 000076AB 6681C11000          <2> 		add cx, 16
  9520 000076B0 668915[82760000]    <2> 		mov [winvcopystx], dx
  9521 000076B7 66890D[84760000]    <2> 		mov [winvcopysty], cx
  9522 000076BE 8935[9A760000]      <2> 		mov [windowinfobuf], esi
  9523 000076C4 668B16              <2> 		mov dx, [esi]
  9524 000076C7 668B4E02            <2> 		mov cx, [esi + 2]
  9525 000076CB 31C0                <2> 		xor eax, eax
  9526 000076CD 31DB                <2> 		xor ebx, ebx
  9527 000076CF 6689D0              <2> 		mov ax, dx
  9528 000076D2 6689CB              <2> 		mov bx, cx
  9529 000076D5 66C1E803            <2> 		shr ax, 3
  9530 000076D9 66C1EB04            <2> 		shr bx, 4
  9531 000076DD 66A3[9E760000]      <2> 		mov [termcol], ax
  9532 000076E3 A2[76240000]        <2> 		mov [charxy], al
  9533 000076E8 881D[77240000]      <2> 		mov [charxy + 1], bl
  9534 000076EE 8B7E04              <2> 		mov edi, [esi + 4]
  9535 000076F1 893D[8A760000]      <2> 		mov [windowcolor], edi
  9536 000076F7 8B7E0C              <2> 		mov edi, [esi + 12]
  9537 000076FA 893D[96760000]      <2> 		mov [windowvideobuf2], edi
  9538 00007700 8B7E08              <2> 		mov edi, [esi + 8]
  9539 00007703 893D[92760000]      <2> 		mov [windowvideobuf], edi
  9540 00007709 81FB00000000        <2> 		cmp ebx, 0
  9541 0000770F 0F84BB040000        <2> 		je near donewincopynow
  9542                              <2> 	findendposwin:
  9543 00007715 01C7                <2> 		add edi, eax
  9544 00007717 01C7                <2> 		add edi, eax
  9545 00007719 4B                  <2> 		dec ebx
  9546 0000771A 81FB00000000        <2> 		cmp ebx, 0
  9547 00007720 77F3                <2> 		ja findendposwin
  9548 00007722 893D[A0760000]      <2> 		mov [wincopyendpos], edi
  9549 00007728 31FF                <2> 		xor edi, edi
  9550 0000772A 6631C0              <2> 		xor ax, ax
  9551 0000772D 6631DB              <2> 		xor bx, bx
  9552 00007730 6601D2              <2> 		add dx, dx
  9553 00007733 668915[86760000]    <2> 		mov [winvcopydx], dx
  9554 0000773A 66890D[88760000]    <2> 		mov [winvcopycx], cx
  9555 00007741 668B0D[84760000]    <2> 		mov cx, [winvcopysty]
  9556 00007748 6681E91000          <2> 		sub cx, 16
  9557 0000774D 668B15[82760000]    <2> 		mov dx, [winvcopystx]
  9558 00007754 C605[9D220000]00    <2> 		mov byte [termcopyon], 0
  9559 0000775B B403                <2> 		mov ah, 3
  9560 0000775D E8120A0000          <2> 		call graphicsadd
  9561                              <2> 	showwindow2:
  9562 00007762 6681C11000          <2> 		add cx, 16
  9563 00007767 668915[82760000]    <2> 		mov [winvcopystx], dx
  9564 0000776E 66890D[84760000]    <2> 		mov [winvcopysty], cx
  9565 00007775 668B16              <2> 		mov dx, [esi]
  9566 00007778 668B4E02            <2> 		mov cx, [esi + 2]
  9567 0000777C 6601D2              <2> 		add dx, dx
  9568 0000777F 668915[86760000]    <2> 		mov [winvcopydx], dx
  9569 00007786 66890D[88760000]    <2> 		mov [winvcopycx], cx
  9570 0000778D E818000000          <2> 		call reloadwindowtitle
  9571 00007792 803D[5B810000]01    <2> 		cmp byte [windrag], 1
  9572 00007799 0F8340040000        <2> 		jae near forgetresetstuff
  9573 0000779F 8B3D[8E760000]      <2> 		mov edi, [windowbufloc]
  9574 000077A5 E968020000          <2> 		jmp windowvideocopyset
  9575                              <2> 		
  9576                              <2> 	reloadwindowtitle:
  9577 000077AA 8B3D[8E760000]      <2> 		mov edi, [windowbufloc]
  9578 000077B0 31D2                <2> 		xor edx, edx
  9579 000077B2 668B15[17580000]    <2> 		mov dx, [resolutionx2]
  9580 000077B9 C1E204              <2> 		shl edx, 4
  9581 000077BC 29D7                <2> 		sub edi, edx
  9582 000077BE 803D[9D220000]00    <2> 		cmp byte [termcopyon], 0
  9583 000077C5 7532                <2> 		jne nocleartitlebarpos
  9584 000077C7 8B3D[3F570000]      <2> 		mov edi, [physbaseptr]
  9585 000077CD 31D2                <2> 		xor edx, edx
  9586 000077CF 668B15[82760000]    <2> 		mov dx, [winvcopystx]
  9587 000077D6 01D7                <2> 		add edi, edx
  9588 000077D8 31C9                <2> 		xor ecx, ecx
  9589 000077DA 668B0D[84760000]    <2> 		mov cx, [winvcopysty]
  9590 000077E1 6681E91000          <2> 		sub cx, 16
  9591 000077E6 6681F90000          <2> 		cmp cx, 0
  9592 000077EB 740C                <2> 		je nocleartitlebarpos
  9593                              <2> 	cleartitlebarpos:
  9594 000077ED 31C0                <2> 		xor eax, eax
  9595 000077EF 66A1[17580000]      <2> 		mov ax, [resolutionx2]
  9596 000077F5 F7E1                <2> 		mul ecx
  9597 000077F7 01C7                <2> 		add edi, eax
  9598                              <2> 	nocleartitlebarpos:
  9599 000077F9 66B91000            <2> 		mov cx, 16
  9600 000077FD 668B15[86760000]    <2> 		mov dx, [winvcopydx]
  9601 00007804 6681F90000          <2> 		cmp cx, 0
  9602 00007809 0F8448000000        <2> 		je near canceltitlebarput
  9603 0000780F 6681FA0000          <2> 		cmp dx, 0
  9604 00007814 0F843D000000        <2> 		je near canceltitlebarput
  9605                              <2> 	titlebarput:
  9606 0000781A 66A1[8A760000]      <2> 		mov ax, [windowcolor]
  9607 00007820 668907              <2> 		mov [edi], ax
  9608 00007823 6681EA0200          <2> 		sub dx, 2
  9609 00007828 81C702000000        <2> 		add edi, 2
  9610 0000782E 6681FA0000          <2> 		cmp dx, 0
  9611 00007833 75E5                <2> 		jne titlebarput
  9612 00007835 31D2                <2> 		xor edx, edx
  9613 00007837 668B15[17580000]    <2> 		mov dx, [resolutionx2]
  9614 0000783E 6649                <2> 		dec cx
  9615 00007840 662B15[86760000]    <2> 		sub dx, [winvcopydx]
  9616 00007847 01D7                <2> 		add edi, edx
  9617 00007849 668B15[86760000]    <2> 		mov dx, [winvcopydx]
  9618 00007850 6681F90000          <2> 		cmp cx, 0
  9619 00007855 75C3                <2> 		jne titlebarput
  9620                              <2> 	canceltitlebarput:
  9621 00007857 893D[8E760000]      <2> 		mov [windowbufloc], edi
  9622 0000785D 803D[9D220000]02    <2> 		cmp byte [termcopyon], 2
  9623 00007864 0F8416010000        <2> 		je near winvcpst
  9624 0000786A 668B1D[F96D0000]    <2> 		mov bx, [background]
  9625 00007871 6653                <2> 		push bx
  9626                              <2> 		;mov bx, 1111111111111111b
  9627 00007873 6631DB              <2> 		xor bx, bx
  9628 00007876 66891D[F96D0000]    <2> 		mov [background], bx
  9629 0000787D 6631C0              <2> 		xor ax, ax
  9630 00007880 81C610000000        <2> 		add esi, 16
  9631 00007886 668B15[82760000]    <2> 		mov dx, [winvcopystx]
  9632 0000788D 668B0D[84760000]    <2> 		mov cx, [winvcopysty]
  9633 00007894 6681E91000          <2> 		sub cx, 16
  9634 00007899 668B1D[8A760000]    <2> 		mov bx, [windowcolor]
  9635 000078A0 C605[F37B0000]01    <2> 		mov byte [mouseselecton], 1
  9636 000078A7 E8A2FBFFFF          <2> 		call showstring2	;Show window title
  9637 000078AC 8B35[432B0000]      <2> 		mov esi, [usercache]
  9638 000078B2 6681C21000          <2> 		add dx, 16
  9639 000078B7 C605[F37B0000]01    <2> 		mov byte [mouseselecton], 1
  9640 000078BE E88BFBFFFF          <2> 		call showstring2	;Show user name
  9641 000078C3 BE[4E910000]        <2> 		mov esi, computer
  9642 000078C8 C605[F37B0000]01    <2> 		mov byte [mouseselecton], 1
  9643 000078CF E87AFBFFFF          <2> 		call showstring2	;Show computer name
  9644 000078D4 B058                <2> 		mov al, "X"
  9645 000078D6 30E4                <2> 		xor ah, ah
  9646 000078D8 66BB00F8            <2> 		mov bx, 1111100000000000b
  9647 000078DC 668B15[82760000]    <2> 		mov dx, [winvcopystx]
  9648 000078E3 668B0D[84760000]    <2> 		mov cx, [winvcopysty]
  9649 000078EA 6681E91000          <2> 		sub cx, 16
  9650 000078EF 6681EA1000          <2> 		sub dx, 16
  9651 000078F4 660315[86760000]    <2> 		add dx, [winvcopydx]
  9652 000078FB C605[F37B0000]01    <2> 		mov byte [mouseselecton], 1
  9653 00007902 663B15[17580000]    <2> 		cmp dx, [resolutionx2]
  9654 00007909 7305                <2> 		jae .nox
  9655 0000790B E87DFBFFFF          <2> 		call showfontvesa
  9656                              <2> .nox:
  9657 00007910 668B1D[F96D0000]    <2> 		mov bx, [background]
  9658 00007917 6681EA1800          <2> 		sub dx, 24
  9659 0000791C B02B                <2> 		mov al, "+"
  9660 0000791E 66BBE007            <2> 		mov bx, 0000011111100000b
  9661 00007922 C605[F37B0000]01    <2> 		mov byte [mouseselecton], 1
  9662 00007929 663B15[17580000]    <2> 		cmp dx, [resolutionx2]
  9663 00007930 7305                <2> 		jae .noplus
  9664 00007932 E856FBFFFF          <2> 		call showfontvesa
  9665                              <2> .noplus:
  9666 00007937 6681EA1800          <2> 		sub dx, 24
  9667 0000793C B02D                <2> 		mov al, "-"
  9668 0000793E 66BBE0FF            <2> 		mov bx, 1111111111100000b
  9669 00007942 C605[F37B0000]01    <2> 		mov byte [mouseselecton], 1
  9670 00007949 663B15[17580000]    <2> 		cmp dx, [resolutionx2]
  9671 00007950 7305                <2> 		jae .nominus
  9672 00007952 E836FBFFFF          <2> 		call showfontvesa
  9673                              <2> .nominus:
  9674 00007957 6681EA1800          <2> 		sub dx, 24
  9675 0000795C B03F                <2> 		mov al, "?"
  9676 0000795E 66BB1F00            <2> 		mov bx, 0000000000011111b
  9677 00007962 C605[F37B0000]01    <2> 		mov byte [mouseselecton], 1
  9678 00007969 663B15[17580000]    <2> 		cmp dx, [resolutionx2]
  9679 00007970 7305                <2> 		jae .noquestion
  9680 00007972 E816FBFFFF          <2> 		call showfontvesa
  9681                              <2> .noquestion:
  9682 00007977 665B                <2> 		pop bx
  9683 00007979 66891D[F96D0000]    <2> 		mov [background], bx
  9684                              <2> 	winvcpst:
  9685 00007980 C3                  <2> 		ret
  9686                              <2> 
  9687                              <2> 	windowvideocopy:
  9688 00007981 8B35[9A760000]      <2> 		mov esi, [windowinfobuf]
  9689 00007987 668B16              <2> 		mov dx, [esi]
  9690 0000798A 668B4E02            <2> 		mov cx, [esi + 2]
  9691 0000798E 8B7E04              <2> 		mov edi, [esi + 4]
  9692 00007991 893D[8A760000]      <2> 		mov [windowcolor], edi
  9693 00007997 8B7E08              <2> 		mov edi, [esi + 8]
  9694 0000799A 8B5E0C              <2> 		mov ebx, [esi + 12]
  9695 0000799D 893D[92760000]      <2> 		mov [windowvideobuf], edi
  9696 000079A3 891D[96760000]      <2> 		mov [windowvideobuf2], ebx
  9697 000079A9 31C0                <2> 		xor eax, eax
  9698 000079AB 31DB                <2> 		xor ebx, ebx
  9699 000079AD 6689D0              <2> 		mov ax, dx
  9700 000079B0 6689CB              <2> 		mov bx, cx
  9701 000079B3 66C1E803            <2> 		shr ax, 3
  9702 000079B7 66C1EB04            <2> 		shr bx, 4
  9703 000079BB 66A3[9E760000]      <2> 		mov [termcol], ax
  9704 000079C1 A2[76240000]        <2> 		mov [charxy], al
  9705 000079C6 881D[77240000]      <2> 		mov [charxy + 1], bl
  9706 000079CC 8B3D[8E760000]      <2> 		mov edi, [windowbufloc]
  9707 000079D2 3B3D[3F570000]      <2> 		cmp edi, [physbaseptr]
  9708 000079D8 0F8334000000        <2> 		jae near windowvideocopyset
  9709 000079DE 31C9                <2> 		xor ecx, ecx
  9710 000079E0 31D2                <2> 		xor edx, edx
  9711 000079E2 668B15[82760000]    <2> 		mov dx, [winvcopystx]
  9712 000079E9 668B0D[84760000]    <2> 		mov cx, [winvcopysty]
  9713 000079F0 8B3D[3F570000]      <2> 		mov edi, [physbaseptr]
  9714 000079F6 01D7                <2> 		add edi, edx
  9715 000079F8 81F900000000        <2> 		cmp ecx, 0
  9716 000079FE 7412                <2> 		je windowvideocopyset
  9717                              <2> 	yrescopylp:
  9718 00007A00 31C0                <2> 		xor eax, eax
  9719 00007A02 66A1[17580000]      <2> 		mov ax, [resolutionx2]
  9720 00007A08 F7E1                <2> 		mul ecx
  9721 00007A0A 01C7                <2> 		add edi, eax
  9722 00007A0C 893D[8E760000]      <2> 		mov [windowbufloc], edi
  9723                              <2> 	windowvideocopyset:
  9724 00007A12 6631C9              <2> 		xor cx, cx
  9725 00007A15 6649                <2> 		dec cx
  9726 00007A17 66890D[E77B0000]    <2> 		mov [charposline], cx
  9727 00007A1E 89FE                <2> 		mov esi, edi
  9728 00007A20 81EE10000000        <2> 		sub esi, 16
  9729 00007A26 31D2                <2> 		xor edx, edx
  9730 00007A28 668B15[17580000]    <2> 		mov dx, [resolutionx2]
  9731 00007A2F C1E204              <2> 		shl edx, 4
  9732 00007A32 01D6                <2> 		add esi, edx
  9733 00007A34 8B3D[92760000]      <2> 		mov edi, [windowvideobuf]
  9734 00007A3A 81EF02000000        <2> 		sub edi, 2
  9735 00007A40 893D[E97B0000]      <2> 		mov [charposvbuf], edi
  9736 00007A46 E97A000000          <2> 		jmp nextcharwin
  9737                              <2> 	win.write:	;adjusted this to use alpha
  9738                              <2> 				;5R, 6G, 5B
  9739                              <2> %ifdef gui.alphablending
  9740                              <2> 		push esi
  9741                              <2> 		push bx
  9742                              <2> 		push cx
  9743                              <2> 		push dx
  9744                              <2> %ifdef gui.background
  9745                              <2> 		mov esi, edi
  9746                              <2> 		sub esi, [physbaseptr]
  9747                              <2> 		add esi, [backgroundimage]
  9748                              <2> 		cmp dword [backgroundimage], 0
  9749                              <2> 		jne .red
  9750                              <2> %endif
  9751                              <2> 		mov esi, background
  9752                              <2> 	.red:
  9753                              <2> 		mov cx, [esi]
  9754                              <2> 		shr cx, 11
  9755                              <2> 		mov bx, ax
  9756                              <2> 		shr bx, 11
  9757                              <2> 		add cx, bx
  9758                              <2> 		add cx, bx
  9759                              <2> 		add cx, bx
  9760                              <2> 		shr cx, 2
  9761                              <2> 		shl cx, 11
  9762                              <2> 		mov dx, cx
  9763                              <2> 	.green:
  9764                              <2> 		mov cx, [esi]
  9765                              <2> 		shl cx, 5
  9766                              <2> 		shr cx, 10
  9767                              <2> 		mov bx, ax
  9768                              <2> 		shl bx, 5
  9769                              <2> 		shr bx, 10
  9770                              <2> 		add cx, bx
  9771                              <2> 		add cx, bx
  9772                              <2> 		add cx, bx
  9773                              <2> 		shr cx, 2
  9774                              <2> 		shl cx, 5
  9775                              <2> 		add dx, cx
  9776                              <2> 	.blue:
  9777                              <2> 		mov cx, [esi]
  9778                              <2> 		shl cx, 11
  9779                              <2> 		shr cx, 11
  9780                              <2> 		mov bx, ax
  9781                              <2> 		shl bx, 11
  9782                              <2> 		shr bx, 11
  9783                              <2> 		add cx, bx
  9784                              <2> 		add cx, bx
  9785                              <2> 		add cx, bx
  9786                              <2> 		shr cx, 2
  9787                              <2> 		add dx, cx
  9788                              <2> 		mov [edi], dx
  9789                              <2> 		pop dx
  9790                              <2> 		pop cx
  9791                              <2> 		pop bx
  9792                              <2> 		pop esi
  9793                              <2> %else
  9794 00007A4B 668907              <2> 		mov [edi], ax
  9795                              <2> %endif
  9796 00007A4E C3                  <2> 		ret
  9797                              <2> 	copywindow:
  9798 00007A4F B201                <2> 		mov dl, 1
  9799 00007A51 D0C6                <2> 		rol dh, 1
  9800 00007A53 20F2                <2> 		and dl, dh
  9801 00007A55 803D[7E740000]10    <2> 		cmp byte [colorcache], 0x10
  9802 00007A5C 7320                <2> 		jae switchwincolors
  9803 00007A5E 66A1[8C760000]      <2> 		mov ax, [windowcolor + 2]
  9804 00007A64 E8E2FFFFFF          <2> 		call win.write
  9805 00007A69 80FA00              <2> 		cmp dl, 0
  9806 00007A6C 742B                <2> 		je nowritewin
  9807 00007A6E 66A1[8A760000]      <2> 		mov ax, [windowcolor]
  9808 00007A74 E8D2FFFFFF          <2> 		call win.write
  9809 00007A79 E91B000000          <2> 		jmp nowritewin
  9810                              <2> 	switchwincolors:
  9811 00007A7E 66A1[8A760000]      <2> 		mov ax, [windowcolor]
  9812 00007A84 E8C2FFFFFF          <2> 		call win.write
  9813 00007A89 80FA00              <2> 		cmp dl, 0
  9814 00007A8C 740B                <2> 		je nowritewin
  9815 00007A8E 66A1[8C760000]      <2> 		mov ax, [windowcolor + 2]
  9816 00007A94 E8B2FFFFFF          <2> 		call win.write
  9817                              <2> 	nowritewin:
  9818 00007A99 81C702000000        <2> 		add edi, 2
  9819 00007A9F FEC1                <2> 		inc cl
  9820 00007AA1 80F908              <2> 		cmp cl, 8
  9821 00007AA4 75A9                <2> 		jne copywindow
  9822 00007AA6 6643                <2> 		inc bx
  9823 00007AA8 30C9                <2> 		xor cl, cl
  9824 00007AAA 31D2                <2> 		xor edx, edx
  9825 00007AAC 668B15[17580000]    <2> 		mov dx, [resolutionx2]
  9826 00007AB3 01D6                <2> 		add esi, edx
  9827 00007AB5 89F7                <2> 		mov edi, esi
  9828 00007AB7 678AB7[8391]        <2> 		mov dh, [fonts + bx]
  9829 00007ABC D0CE                <2> 		ror dh, 1
  9830 00007ABE FEC5                <2> 		inc ch
  9831 00007AC0 80FD10              <2> 		cmp ch, 16
  9832 00007AC3 758A                <2> 		jne copywindow
  9833                              <2> 	nextcharwin:
  9834 00007AC5 6631C9              <2> 		xor cx, cx
  9835 00007AC8 8B3D[E97B0000]      <2> 		mov edi, [charposvbuf]
  9836 00007ACE 81C702000000        <2> 		add edi, 2
  9837 00007AD4 3B3D[A0760000]      <2> 		cmp edi, [wincopyendpos]
  9838 00007ADA 0F83F0000000        <2> 		jae near donewincopynow
  9839 00007AE0 8A7F01              <2> 		mov bh, [edi + 1]
  9840 00007AE3 80FF00              <2> 		cmp bh, 0
  9841 00007AE6 7505                <2> 		jne nofixcolorwin
  9842 00007AE8 B707                <2> 		mov bh, 7
  9843 00007AEA 887F01              <2> 		mov [edi + 1], bh
  9844                              <2> 	nofixcolorwin:
  9845 00007AED 883D[7E740000]      <2> 		mov [colorcache], bh
  9846 00007AF3 8A1F                <2> 		mov bl, [edi]
  9847 00007AF5 893D[E97B0000]      <2> 		mov [charposvbuf], edi
  9848 00007AFB 813D[96760000]0000- <2> 		cmp dword [windowvideobuf2], 0
  9849 00007B03 0000                <2>
  9850 00007B05 7459                <2> 		je noskipcharcopy
  9851 00007B07 2B3D[92760000]      <2> 		sub edi, [windowvideobuf]
  9852 00007B0D 033D[96760000]      <2> 		add edi, [windowvideobuf2]
  9853 00007B13 8A6701              <2> 		mov ah, [edi + 1]
  9854 00007B16 8A07                <2> 		mov al, [edi]
  9855 00007B18 6639D8              <2> 		cmp ax, bx
  9856 00007B1B 7543                <2> 		jne noskipcharcopy
  9857                              <2> 	skipcharcopy:
  9858 00007B1D 81C610000000        <2> 		add esi, 16
  9859 00007B23 668B0D[E77B0000]    <2> 		mov cx, [charposline]
  9860 00007B2A 6641                <2> 		inc cx
  9861 00007B2C 66890D[E77B0000]    <2> 		mov [charposline], cx
  9862 00007B33 663B0D[9E760000]    <2> 		cmp cx, [termcol]
  9863 00007B3A 7289                <2> 		jb nextcharwin
  9864 00007B3C 6631C9              <2> 		xor cx, cx
  9865 00007B3F 66890D[E77B0000]    <2> 		mov [charposline], cx
  9866 00007B46 31D2                <2> 		xor edx, edx
  9867 00007B48 668B15[17580000]    <2> 		mov dx, [resolutionx2]
  9868 00007B4F C1E204              <2> 		shl edx, 4
  9869 00007B52 662B15[86760000]    <2> 		sub dx, [winvcopydx]
  9870 00007B59 01D6                <2> 		add esi, edx
  9871 00007B5B E965FFFFFF          <2> 		jmp nextcharwin
  9872                              <2> 	noskipcharcopy:
  9873 00007B60 881F                <2> 		mov [edi], bl
  9874 00007B62 887F01              <2> 		mov [edi + 1], bh
  9875 00007B65 8B3D[E97B0000]      <2> 		mov edi, [charposvbuf]
  9876 00007B6B 30FF                <2> 		xor bh, bh
  9877 00007B6D 66C1E304            <2> 		shl bx, 4
  9878 00007B71 31D2                <2> 		xor edx, edx
  9879 00007B73 668B15[17580000]    <2> 		mov dx, [resolutionx2]
  9880 00007B7A C1E204              <2> 		shl edx, 4
  9881 00007B7D 29D6                <2> 		sub esi, edx
  9882 00007B7F 81C610000000        <2> 		add esi, 16
  9883 00007B85 89F7                <2> 		mov edi, esi
  9884 00007B87 668B0D[E77B0000]    <2> 		mov cx, [charposline]
  9885 00007B8E 6641                <2> 		inc cx
  9886 00007B90 663B0D[9E760000]    <2> 		cmp cx, [termcol]
  9887 00007B97 7316                <2> 		jae fixwindowcopy
  9888 00007B99 66890D[E77B0000]    <2> 		mov [charposline], cx
  9889 00007BA0 6631C9              <2> 		xor cx, cx
  9890 00007BA3 678AB7[8391]        <2> 		mov dh, [fonts + bx]
  9891 00007BA8 D0CE                <2> 		ror dh, 1
  9892 00007BAA E9A0FEFFFF          <2> 		jmp copywindow
  9893                              <2> fixwindowcopy:
  9894 00007BAF 6631C9              <2> 		xor cx, cx
  9895 00007BB2 66890D[E77B0000]    <2> 		mov [charposline], cx
  9896 00007BB9 662B15[86760000]    <2> 		sub dx, [winvcopydx]
  9897 00007BC0 01D6                <2> 		add esi, edx
  9898 00007BC2 89F7                <2> 		mov edi, esi
  9899 00007BC4 678AB7[8391]        <2> 		mov dh, [fonts + bx]
  9900 00007BC9 D0CE                <2> 		ror dh, 1
  9901 00007BCB E97FFEFFFF          <2> 		jmp copywindow
  9902                              <2> donewincopynow:
  9903 00007BD0 803D[9D220000]01    <2> 		cmp byte [termcopyon], 1
  9904 00007BD7 7506                <2> 		jne forgetresetstuff
  9905 00007BD9 E86AACFFFF          <2> 		call switchtermcursor
  9906 00007BDE 61                  <2> 		popa
  9907                              <2> forgetresetstuff:
  9908 00007BDF C605[9D220000]00    <2> 		mov byte [termcopyon], 0
  9909 00007BE6 C3                  <2> 		ret
  9910                              <2> 		
  9911 00007BE7 0000                <2> charposline dw 0
  9912 00007BE9 00000000            <2> charposvbuf dw 0,0
  9913                              <1> 				
  9914 00007BED 00                  <1> copygui db 0
  9915 00007BEE 00                  <1> graphicsset db 0
  9916 00007BEF 0000                <1> graphicspos db 0,0
  9917 00007BF1 00                  <1> showcursorfonton db 0
  9918 00007BF2 00                  <1> savefonton db 0
  9919 00007BF3 00                  <1> mouseselecton db 0
  9920                              <1> 
  9921 00007BF4 00                  <1> pbutton db 0
  9922 00007BF5 00                  <1> pLBUTTON db 0
  9923 00007BF6 00                  <1> pRBUTTON db 0
  9924 00007BF7 00000000            <1> dragging dw 0,0
  9925 00007BFB 0000000000000000    <1> lastpos dw 0,0,0,0
  9926 00007C03 00000000            <1> colorbuf dw 0,0
  9927                              <1> 	
  9928                              <1> 	clickicon:
  9929 00007C07 B001                <1> 		mov al, 1
  9930 00007C09 A2[F47B0000]        <1> 		mov [pbutton], al
  9931 00007C0E A0[F57B0000]        <1> 		mov al, [pLBUTTON]
  9932 00007C13 2205[1E5B0000]      <1> 		and al, [LBUTTON]
  9933 00007C19 8A25[F67B0000]      <1> 		mov ah, [pRBUTTON]
  9934 00007C1F 2225[1F5B0000]      <1> 		and ah, [RBUTTON]
  9935 00007C25 08E0                <1> 		or al, ah
  9936 00007C27 3C00                <1> 		cmp al, 0
  9937 00007C29 741B                <1> 		je nodragclick
  9938 00007C2B 813D[F77B0000]0100- <1> 		cmp dword [dragging], 1
  9939 00007C33 0000                <1>
  9940 00007C35 732F                <1> 		jae dragclick
  9941 00007C37 C705[F77B0000]0100- <1> 		mov dword [dragging], 1
  9942 00007C3F 0000                <1>
  9943 00007C41 E920000000          <1> 		jmp dragclick
  9944                              <1> 	nodragclick:
  9945 00007C46 31C0                <1> 		xor eax, eax
  9946 00007C48 A3[F77B0000]        <1> 		mov dword [dragging], eax
  9947 00007C4D A2[F47B0000]        <1> 		mov [pbutton], al
  9948 00007C52 A0[1E5B0000]        <1> 		mov al, [LBUTTON]
  9949 00007C57 A2[F57B0000]        <1> 		mov [pLBUTTON], al
  9950 00007C5C A0[1F5B0000]        <1> 		mov al, [RBUTTON]
  9951 00007C61 A2[F67B0000]        <1> 		mov [pRBUTTON], al
  9952                              <1> 	dragclick:
  9953 00007C66 6631C0              <1> 		xor ax, ax
  9954 00007C69 BE[3BD40000]        <1> 		mov esi, graphicstable
  9955 00007C6E C705[47840000]0000- <1> 		mov dword [codepointer], 0
  9956 00007C76 0000                <1>
  9957                              <1> 	clicon2:
  9958 00007C78 31D2                <1> 		xor edx, edx
  9959 00007C7A 31C9                <1> 		xor ecx, ecx
  9960 00007C7C 66813E0100          <1> 		cmp word [esi], 1
  9961 00007C81 0F841B000000        <1> 		je near iconselect
  9962 00007C87 66813E0200          <1> 		cmp word [esi], 2
  9963 00007C8C 0F8472010000        <1> 		je near textselected
  9964 00007C92 66813E0300          <1> 		cmp word [esi], 3
  9965 00007C97 0F84C7020000        <1> 		je near windowselect
  9966 00007C9D E910040000          <1> 		jmp nexticonsel
  9967                              <1> 	iconselect:
  9968 00007CA2 668B5606            <1> 		mov dx, [esi + 6]
  9969 00007CA6 6689D0              <1> 		mov ax, dx
  9970 00007CA9 668B4E08            <1> 		mov cx, [esi + 8]
  9971 00007CAD 6689CB              <1> 		mov bx, cx
  9972 00007CB0 6681C32000          <1> 		add bx, 32
  9973 00007CB5 6601D0              <1> 		add ax, dx
  9974 00007CB8 813D[F77B0000]0100- <1> 		cmp dword [dragging], 1
  9975 00007CC0 0000                <1>
  9976 00007CC2 746F                <1> 		je dragicon
  9977 00007CC4 813D[F77B0000]0000- <1> 		cmp dword [dragging], 0
  9978 00007CCC 0000                <1>
  9979 00007CCE 7411                <1> 		je nodragiconcheck
  9980 00007CD0 3935[F77B0000]      <1> 		cmp dword [dragging], esi
  9981 00007CD6 0F85D6030000        <1> 		jne near nexticonsel
  9982 00007CDC E952000000          <1> 		jmp dragicon
  9983                              <1> 	nodragiconcheck:
  9984 00007CE1 663905[0D5A0000]    <1> 		cmp [mousecursorposition], ax
  9985 00007CE8 0F82C4030000        <1> 		jb near nexticonsel
  9986 00007CEE 66054000            <1> 		add ax, 64
  9987 00007CF2 663905[0D5A0000]    <1> 		cmp [mousecursorposition], ax
  9988 00007CF9 0F87B3030000        <1> 		ja near nexticonsel
  9989 00007CFF 6629D0              <1> 		sub ax, dx
  9990 00007D02 66390D[0F5A0000]    <1> 		cmp [mousecursorposition + 2], cx
  9991 00007D09 0F82A3030000        <1> 		jb near nexticonsel
  9992 00007D0F 66391D[0F5A0000]    <1> 		cmp [mousecursorposition + 2], bx
  9993 00007D16 0F8796030000        <1> 		ja near nexticonsel
  9994 00007D1C 668B460A            <1> 		mov ax, [esi + 10]
  9995 00007D20 66250100            <1> 		and ax, 1
  9996 00007D24 663D0100            <1> 		cmp ax, 1
  9997 00007D28 0F84B6000000        <1> 		je near unselecticon
  9998 00007D2E E98D000000          <1> 		jmp nodragicon
  9999                              <1> 	dragicon:
 10000 00007D33 663905[095A0000]    <1> 		cmp [lastmouseposition], ax
 10001 00007D3A 0F8272030000        <1> 		jb near nexticonsel
 10002 00007D40 66054000            <1> 		add ax, 64
 10003 00007D44 663905[095A0000]    <1> 		cmp [lastmouseposition], ax
 10004 00007D4B 0F8761030000        <1> 		ja near nexticonsel
 10005 00007D51 6629D0              <1> 		sub ax, dx
 10006 00007D54 66390D[0B5A0000]    <1> 		cmp [lastmouseposition + 2], cx
 10007 00007D5B 0F8251030000        <1> 		jb near nexticonsel
 10008 00007D61 66391D[0B5A0000]    <1> 		cmp [lastmouseposition + 2], bx
 10009 00007D68 0F8744030000        <1> 		ja near nexticonsel
 10010 00007D6E 668B460A            <1> 		mov ax, [esi + 10]
 10011 00007D72 2410                <1> 		and al, 00010000b
 10012 00007D74 3C10                <1> 		cmp al, 00010000b
 10013 00007D76 7448                <1> 		je nodragicon
 10014 00007D78 8935[F77B0000]      <1> 		mov [dragging], esi
 10015 00007D7E 66D1E2              <1> 		shl dx, 1
 10016 00007D81 662B15[095A0000]    <1> 		sub dx, [lastmouseposition]
 10017 00007D88 660315[0D5A0000]    <1> 		add dx, [mousecursorposition]
 10018 00007D8F 66D1EA              <1> 		shr dx, 1
 10019 00007D92 66030D[0F5A0000]    <1> 		add cx, [mousecursorposition + 2]
 10020 00007D99 662B0D[0B5A0000]    <1> 		sub cx, [lastmouseposition + 2]
 10021 00007DA0 663B15[17580000]    <1> 		cmp dx, [resolutionx2]
 10022 00007DA7 7607                <1> 		jbe chkyresdrgicn
 10023 00007DA9 668B15[0D5A0000]    <1> 		mov dx, [mousecursorposition]
 10024                              <1> 	chkyresdrgicn:
 10025 00007DB0 663B0D[2B570000]    <1> 		cmp cx, [resolutiony]
 10026 00007DB7 7607                <1> 		jbe nodragicon
 10027 00007DB9 668B0D[0F5A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10028                              <1> 	nodragicon:
 10029 00007DC0 66814E0A0100        <1> 		or word [esi + 10], 1
 10030 00007DC6 8B5E0C              <1> 		mov ebx, [esi + 12]
 10031 00007DC9 668B460A            <1> 		mov ax, [esi + 10]
 10032 00007DCD 8B7602              <1> 		mov esi, [esi + 2]
 10033 00007DD0 C705[47840000]0000- <1> 		mov dword [codepointer], 0
 10034 00007DD8 0000                <1>
 10035 00007DDA E8CDEDFFFF          <1> 		call showicon
 10036 00007DDF E9E7020000          <1> 		jmp doneiconsel
 10037                              <1> 	unselecticon:
 10038 00007DE4 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10039 00007DEA 8B5E0C              <1> 		mov ebx, [esi + 12]
 10040 00007DED 668B460A            <1> 		mov ax, [esi + 10]
 10041 00007DF1 8B7602              <1> 		mov esi, [esi + 2]
 10042 00007DF4 891D[47840000]      <1> 		mov [codepointer], ebx
 10043 00007DFA E8ADEDFFFF          <1> 		call showicon
 10044 00007DFF E9C7020000          <1> 		jmp doneiconsel
 10045                              <1> 	textselected:
 10046 00007E04 8B5E02              <1> 		mov ebx, [esi + 2]
 10047 00007E07 668B5606            <1> 		mov dx, [esi + 6]
 10048 00007E0B 6689D0              <1> 		mov ax, dx
 10049 00007E0E 668B4E08            <1> 		mov cx, [esi + 8]
 10050                              <1> 	lengthtesttext:
 10051 00007E12 803B00              <1> 		cmp byte [ebx], 0
 10052 00007E15 7407                <1> 		je donetesttextlength
 10053 00007E17 43                  <1> 		inc ebx
 10054 00007E18 66051000            <1> 		add ax, 16
 10055 00007E1C EBF4                <1> 		jmp lengthtesttext
 10056                              <1> 	donetesttextlength:
 10057 00007E1E 6689CB              <1> 		mov bx, cx
 10058 00007E21 6681C30F00          <1> 		add bx, 15
 10059 00007E26 813D[F77B0000]0100- <1> 		cmp dword [dragging], 1
 10060 00007E2E 0000                <1>
 10061 00007E30 7468                <1> 		je dragtext
 10062 00007E32 813D[F77B0000]0000- <1> 		cmp dword [dragging], 0
 10063 00007E3A 0000                <1>
 10064 00007E3C 7411                <1> 		je nodragtextcheck
 10065 00007E3E 3935[F77B0000]      <1> 		cmp dword [dragging], esi
 10066 00007E44 0F8568020000        <1> 		jne near nexticonsel
 10067 00007E4A E94B000000          <1> 		jmp dragtext
 10068                              <1> 	nodragtextcheck:
 10069 00007E4F 663915[0D5A0000]    <1> 		cmp [mousecursorposition], dx
 10070 00007E56 0F8256020000        <1> 		jb near nexticonsel
 10071 00007E5C 663905[0D5A0000]    <1> 		cmp [mousecursorposition], ax
 10072 00007E63 0F8749020000        <1> 		ja near nexticonsel
 10073 00007E69 66390D[0F5A0000]    <1> 		cmp [mousecursorposition + 2], cx
 10074 00007E70 0F823C020000        <1> 		jb near nexticonsel
 10075 00007E76 66391D[0F5A0000]    <1> 		cmp [mousecursorposition + 2], bx
 10076 00007E7D 0F872F020000        <1> 		ja near nexticonsel
 10077 00007E83 668B460A            <1> 		mov ax, [esi + 10]
 10078 00007E87 66250100            <1> 		and ax, 1
 10079 00007E8B 663D0100            <1> 		cmp ax, 1
 10080 00007E8F 0F84AB000000        <1> 		je near unselecttext
 10081 00007E95 E986000000          <1> 		jmp nodragtext
 10082                              <1> 	dragtext:
 10083 00007E9A 663915[095A0000]    <1> 		cmp [lastmouseposition], dx
 10084 00007EA1 0F820B020000        <1> 		jb near nexticonsel
 10085 00007EA7 663905[095A0000]    <1> 		cmp [lastmouseposition], ax
 10086 00007EAE 0F87FE010000        <1> 		ja near nexticonsel
 10087 00007EB4 66390D[0B5A0000]    <1> 		cmp [lastmouseposition + 2], cx
 10088 00007EBB 0F82F1010000        <1> 		jb near nexticonsel
 10089 00007EC1 66391D[0B5A0000]    <1> 		cmp [lastmouseposition + 2], bx
 10090 00007EC8 0F87E4010000        <1> 		ja near nexticonsel
 10091 00007ECE 668B460A            <1> 		mov ax, [esi + 10]
 10092 00007ED2 2410                <1> 		and al, 00010000b
 10093 00007ED4 663D1000            <1> 		cmp ax, 00010000b
 10094 00007ED8 0F8442000000        <1> 		je near nodragtext
 10095 00007EDE 8935[F77B0000]      <1> 		mov [dragging], esi
 10096 00007EE4 662B15[095A0000]    <1> 		sub dx, [lastmouseposition]
 10097 00007EEB 660315[0D5A0000]    <1> 		add dx, [mousecursorposition]
 10098 00007EF2 66030D[0F5A0000]    <1> 		add cx, [mousecursorposition + 2]
 10099 00007EF9 662B0D[0B5A0000]    <1> 		sub cx, [lastmouseposition + 2]
 10100 00007F00 663B15[17580000]    <1> 		cmp dx, [resolutionx2]
 10101 00007F07 7607                <1> 		jbe chkyresdrgtxt
 10102 00007F09 668B15[0D5A0000]    <1> 		mov dx, [mousecursorposition]
 10103                              <1> 	chkyresdrgtxt:
 10104 00007F10 663B0D[2B570000]    <1> 		cmp cx, [resolutiony]
 10105 00007F17 7607                <1> 		jbe nodragtext
 10106 00007F19 668B0D[0F5A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10107                              <1> 	nodragtext:
 10108 00007F20 66814E0A0100        <1> 		or word [esi + 10], 1
 10109 00007F26 8B5E0C              <1> 		mov ebx, [esi + 12]
 10110 00007F29 891D[47840000]      <1> 		mov [codepointer], ebx
 10111 00007F2F 668B460A            <1> 		mov ax, [esi + 10]
 10112 00007F33 8B7602              <1> 		mov esi, [esi + 2]
 10113 00007F36 E800F5FFFF          <1> 		call showstring
 10114 00007F3B E98B010000          <1> 		jmp doneiconsel
 10115                              <1> 	unselecttext:
 10116 00007F40 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10117 00007F46 8B5E0C              <1> 		mov ebx, [esi + 12]
 10118 00007F49 668B460A            <1> 		mov ax, [esi + 10]
 10119 00007F4D 8B7602              <1> 		mov esi, [esi + 2]
 10120 00007F50 C705[47840000]0000- <1> 		mov dword [codepointer], 0
 10121 00007F58 0000                <1>
 10122 00007F5A E8DCF4FFFF          <1> 		call showstring
 10123 00007F5F E967010000          <1> 		jmp doneiconsel
 10124                              <1> windowselect:
 10125 00007F64 8B7E02              <1> 		mov edi, [esi + 2]
 10126 00007F67 668B5606            <1> 		mov dx, [esi + 6]
 10127 00007F6B 6689D0              <1> 		mov ax, dx
 10128 00007F6E 668B4E08            <1> 		mov cx, [esi + 8]
 10129 00007F72 6689CB              <1> 		mov bx, cx
 10130 00007F75 6681C31000          <1> 		add bx, 16
 10131 00007F7A 813D[F77B0000]0100- <1> 		cmp dword [dragging], 1
 10132 00007F82 0000                <1>
 10133 00007F84 746D                <1> 		je dragwin
 10134 00007F86 813D[F77B0000]0000- <1> 		cmp dword [dragging], 0
 10135 00007F8E 0000                <1>
 10136 00007F90 7411                <1> 		je nodragwincheck
 10137 00007F92 3935[F77B0000]      <1> 		cmp dword [dragging], esi
 10138 00007F98 0F8514010000        <1> 		jne near nexticonsel
 10139 00007F9E E950000000          <1> 		jmp dragwin
 10140                              <1> 	nodragwincheck:
 10141 00007FA3 663905[0D5A0000]    <1> 		cmp [mousecursorposition], ax
 10142 00007FAA 0F8202010000        <1> 		jb near nexticonsel
 10143 00007FB0 660307              <1> 		add ax, [edi]
 10144 00007FB3 660307              <1> 		add ax, [edi]
 10145 00007FB6 663905[0D5A0000]    <1> 		cmp [mousecursorposition], ax
 10146 00007FBD 0F87EF000000        <1> 		ja near nexticonsel
 10147 00007FC3 66390D[0F5A0000]    <1> 		cmp [mousecursorposition + 2], cx
 10148 00007FCA 0F82E2000000        <1> 		jb near nexticonsel
 10149 00007FD0 66391D[0F5A0000]    <1> 		cmp [mousecursorposition + 2], bx
 10150 00007FD7 0F87D5000000        <1> 		ja near nexticonsel
 10151 00007FDD 662D1400            <1> 		sub ax, 20
 10152 00007FE1 663905[0D5A0000]    <1> 		cmp [mousecursorposition], ax
 10153 00007FE8 0F87A4000000        <1> 		ja near killwin
 10154 00007FEE E98B000000          <1> 		jmp nodragwin
 10155                              <1> 	dragwin:
 10156 00007FF3 663905[095A0000]    <1> 		cmp [lastmouseposition], ax
 10157 00007FFA 0F82B2000000        <1> 		jb near nexticonsel
 10158 00008000 660307              <1> 		add ax, [edi]
 10159 00008003 660307              <1> 		add ax, [edi]
 10160 00008006 663905[095A0000]    <1> 		cmp [lastmouseposition], ax
 10161 0000800D 0F879F000000        <1> 		ja near nexticonsel
 10162 00008013 66390D[0B5A0000]    <1> 		cmp [lastmouseposition + 2], cx
 10163 0000801A 0F8292000000        <1> 		jb near nexticonsel
 10164 00008020 66391D[0B5A0000]    <1> 		cmp [lastmouseposition + 2], bx
 10165 00008027 0F8785000000        <1> 		ja near nexticonsel
 10166 0000802D 8935[F77B0000]      <1> 		mov [dragging], esi
 10167 00008033 803D[5B810000]01    <1> 		cmp byte [windrag], 1
 10168 0000803A 7706                <1> 		ja .nochangewindrag
 10169 0000803C FE05[5B810000]      <1> 		inc byte [windrag]
 10170                              <1> 	.nochangewindrag:
 10171 00008042 662B15[095A0000]    <1> 		sub dx, [lastmouseposition]
 10172 00008049 660315[0D5A0000]    <1> 		add dx, [mousecursorposition]
 10173 00008050 66030D[0F5A0000]    <1> 		add cx, [mousecursorposition + 2]
 10174 00008057 662B0D[0B5A0000]    <1> 		sub cx, [lastmouseposition + 2]
 10175 0000805E 663B15[17580000]    <1> 		cmp dx, [resolutionx2]
 10176 00008065 7607                <1> 		jbe chkyresdrgwin
 10177 00008067 668B15[0D5A0000]    <1> 		mov dx, [mousecursorposition]
 10178                              <1> 	chkyresdrgwin:
 10179 0000806E 663B0D[2B570000]    <1> 		cmp cx, [resolutiony]
 10180 00008075 7607                <1> 		jbe nodragwin
 10181 00008077 668B0D[0F5A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10182                              <1> 	nodragwin:
 10183 0000807E 8B5E0C              <1> 		mov ebx, [esi + 12]
 10184 00008081 668B460A            <1> 		mov ax, [esi + 10]
 10185 00008085 8B7602              <1> 		mov esi, [esi + 2]
 10186 00008088 E817F6FFFF          <1> 		call showwindow
 10187 0000808D E939000000          <1> 		jmp doneiconsel
 10188                              <1> 	killwin:
 10189 00008092 66C7060000          <1> 		mov word [esi], 0
 10190 00008097 C605[9C220000]00    <1> 		mov byte [termguion], 0
 10191 0000809E E80AEDFFFF          <1> 		call guiclear
 10192 000080A3 E855EDFFFF          <1> 		call reloadallgraphics
 10193 000080A8 E89CEAFFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10194 000080AD E978E6FFFF          <1> 		jmp guistart
 10195                              <1> 	nexticonsel:
 10196 000080B2 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10197 000080B8 81C610000000        <1> 		add esi, 16
 10198 000080BE 81FE[3BD60000]      <1> 		cmp esi, graphicstableend
 10199 000080C4 7305                <1> 		jae doneiconsel
 10200 000080C6 E9ADFBFFFF          <1> 		jmp clicon2
 10201                              <1> 	doneiconsel:
 10202 000080CB 813D[F77B0000]0100- <1> 		cmp dword [dragging], 1
 10203 000080D3 0000                <1>
 10204 000080D5 731A                <1> 		jae doneiconsel2
 10205 000080D7 A2[5B810000]        <1> 		mov [windrag], al
 10206 000080DC 813D[47840000]0000- <1> 		cmp dword [codepointer], 0
 10207 000080E4 0000                <1>
 10208 000080E6 7409                <1> 		je doneiconsel2
 10209 000080E8 8B1D[47840000]      <1> 		mov ebx, [codepointer]
 10210 000080EE FFD3                <1> 		call ebx
 10211 000080F0 C3                  <1> 		ret
 10212                              <1> 	doneiconsel2:
 10213 000080F1 A0[1E5B0000]        <1> 		mov al, [LBUTTON]
 10214 000080F6 A2[F57B0000]        <1> 		mov [pLBUTTON], al
 10215 000080FB A0[1F5B0000]        <1> 		mov al, [RBUTTON]
 10216 00008100 A2[F67B0000]        <1> 		mov [pRBUTTON], al
 10217 00008105 813D[F77B0000]0100- <1> 		cmp dword [dragging], 1
 10218 0000810D 0000                <1>
 10219 0000810F 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10220 00008115 E82FEAFFFF          <1> 		call switchmousepos2
 10221 0000811A 803D[5B810000]01    <1> 		cmp byte [windrag], 1
 10222 00008121 7305                <1> 		jae noclearcursorcl
 10223 00008123 E869E9FFFF          <1> 		call clearmousecursor
 10224                              <1> noclearcursorcl:
 10225 00008128 E8D0ECFFFF          <1> 		call reloadallgraphics
 10226                              <1> noreloadgraphicsclick:
 10227 0000812D 30E4                <1> 		xor ah, ah
 10228 0000812F 31C9                <1> 		xor ecx, ecx
 10229 00008131 31D2                <1> 		xor edx, edx
 10230 00008133 B0FE                <1> 		mov al, 254
 10231 00008135 668B15[0D5A0000]    <1> 		mov dx, [mousecursorposition]
 10232 0000813C 668B0D[0F5A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10233 00008143 66BBE738            <1> 		mov bx, 0011100011100111b
 10234 00008147 C605[F17B0000]01    <1> 		mov byte [showcursorfonton], 1
 10235 0000814E E83AF3FFFF          <1> 		call showfontvesa
 10236 00008153 C605[F17B0000]00    <1> 		mov byte [showcursorfonton], 0
 10237 0000815A C3                  <1> 		ret
 10238 0000815B 00                  <1> windrag db 0
 10239 0000815C 00000000            <1> lastdrag dw 0,0
 10240 00008160 00000000            <1> grpctblpos dw 0,0
 10241                              <1> 
 10242                              <1> 
 10243                              <1> 
 10244 00008164 00<rept>            <1> grphbuf times 16 db 0
 10245                              <1> 	graphicsadd:
 10246 00008174 BF[3BD40000]        <1> 		mov edi, graphicstable
 10247                              <1> 	shwgrph1:
 10248 00008179 397702              <1> 		cmp dword [edi + 2], esi
 10249 0000817C 7414                <1> 		je showgraphicsreplace2
 10250 0000817E 81C710000000        <1> 		add edi, 16
 10251 00008184 81FF[3BD60000]      <1> 		cmp edi, graphicstableend
 10252 0000818A 0F8337020000        <1> 		jae near showgraphicsnew
 10253 00008190 EBE7                <1> 		jmp shwgrph1
 10254                              <1> 	showgraphicsreplace2:
 10255 00008192 8935[66810000]      <1> 		mov [grphbuf + 2], esi
 10256 00008198 668915[6A810000]    <1> 		mov [grphbuf + 6], dx
 10257 0000819F 66890D[6C810000]    <1> 		mov [grphbuf + 8], cx
 10258 000081A6 891D[70810000]      <1> 		mov [grphbuf + 12], ebx
 10259 000081AC 30FF                <1> 		xor bh, bh
 10260 000081AE 88E3                <1> 		mov bl, ah
 10261 000081B0 30E4                <1> 		xor ah, ah
 10262 000081B2 66A3[6E810000]      <1> 		mov [grphbuf + 10], ax	
 10263 000081B8 66891D[64810000]    <1> 		mov [grphbuf], bx
 10264 000081BF 66A1[64810000]      <1> 		mov ax, [grphbuf]
 10265 000081C5 663D0100            <1> 		cmp ax, 1
 10266 000081C9 0F8419000000        <1> 		je near replaceicon
 10267 000081CF 663D0200            <1> 		cmp ax, 2
 10268 000081D3 0F8493000000        <1> 		je near replacestring
 10269 000081D9 663D0300            <1> 		cmp ax, 3
 10270 000081DD 0F840F010000        <1> 		je near replacewindow
 10271 000081E3 E9BC010000          <1> 		jmp showgraphicsreplace
 10272                              <1> 	replaceicon:
 10273 000081E8 893D[FB7B0000]      <1> 		mov [lastpos], edi
 10274 000081EE 8935[FF7B0000]      <1> 		mov [lastpos + 4], esi
 10275 000081F4 8B7702              <1> 		mov esi, [edi + 2]
 10276 000081F7 668B5F0C            <1> 		mov bx, [edi + 12]
 10277 000081FB 668B5706            <1> 		mov dx, [edi + 6]
 10278 000081FF 668B4F08            <1> 		mov cx, [edi + 8]
 10279 00008203 668B06              <1> 		mov ax, [esi]
 10280 00008206 66A3[037C0000]      <1> 		mov [colorbuf], ax
 10281 0000820C 66A1[F96D0000]      <1> 		mov ax, [background]
 10282 00008212 668906              <1> 		mov [esi], ax
 10283 00008215 8B5F0C              <1> 		mov ebx, [edi + 12]
 10284 00008218 668B470A            <1> 		mov ax, [edi + 10]
 10285 0000821C 2401                <1> 		and al, 1
 10286 0000821E A2[4B840000]        <1> 		mov [iconselected], al
 10287 00008223 668B470A            <1> 		mov ax, [edi + 10]
 10288 00008227 E893E9FFFF          <1> 		call showicon2
 10289 0000822C 8B3D[FB7B0000]      <1> 		mov edi, [lastpos]
 10290 00008232 8B7702              <1> 		mov esi, [edi + 2]
 10291 00008235 66A1[037C0000]      <1> 		mov ax, [colorbuf]
 10292 0000823B 668906              <1> 		mov [esi], ax
 10293 0000823E 8B35[FF7B0000]      <1> 		mov esi, [lastpos + 4]
 10294 00008244 668B15[6A810000]    <1> 		mov dx, [grphbuf + 6]
 10295 0000824B 668B0D[6C810000]    <1> 		mov cx, [grphbuf + 8]
 10296 00008252 668B1D[64810000]    <1> 		mov bx, [grphbuf]
 10297 00008259 66A1[6E810000]      <1> 		mov ax, [grphbuf + 10]
 10298 0000825F 88DC                <1> 		mov ah, bl
 10299 00008261 8B1D[70810000]      <1> 		mov ebx, [grphbuf + 12]
 10300 00008267 E938010000          <1> 		jmp showgraphicsreplace
 10301                              <1> 	replacestring:
 10302 0000826C 893D[FB7B0000]      <1> 		mov [lastpos], edi
 10303 00008272 8935[FF7B0000]      <1> 		mov [lastpos + 4], esi
 10304 00008278 8B5F0C              <1> 		mov ebx, [edi + 12]
 10305 0000827B 8B7702              <1> 		mov esi, [edi + 2]
 10306 0000827E 668B5706            <1> 		mov dx, [edi + 6]
 10307 00008282 668B4F08            <1> 		mov cx, [edi + 8]
 10308 00008286 66A1[7C740000]      <1> 		mov ax, [colorfont2]
 10309 0000828C 66A3[037C0000]      <1> 		mov [colorbuf], ax
 10310 00008292 66A1[F96D0000]      <1> 		mov ax, [background]
 10311 00008298 66A3[7C740000]      <1> 		mov [colorfont2], ax		
 10312 0000829E 8B5F0C              <1> 		mov ebx, [edi + 12]
 10313 000082A1 668B470A            <1> 		mov ax, [edi + 10]
 10314 000082A5 2401                <1> 		and al, 1
 10315 000082A7 A2[F37B0000]        <1> 		mov [mouseselecton], al
 10316 000082AC 668B470A            <1> 		mov ax, [edi + 10]
 10317 000082B0 E899F1FFFF          <1> 		call showstring2
 10318 000082B5 66A1[037C0000]      <1> 		mov ax, [colorbuf]
 10319 000082BB 66A3[7C740000]      <1> 		mov [colorfont2], ax
 10320 000082C1 8B3D[FB7B0000]      <1> 		mov edi, [lastpos]
 10321 000082C7 8B7702              <1> 		mov esi, [edi + 2]
 10322 000082CA 668B15[6A810000]    <1> 		mov dx, [grphbuf + 6]
 10323 000082D1 668B0D[6C810000]    <1> 		mov cx, [grphbuf + 8]
 10324 000082D8 668B1D[64810000]    <1> 		mov bx, [grphbuf]
 10325 000082DF 66A1[6E810000]      <1> 		mov ax, [grphbuf + 10]
 10326 000082E5 88DC                <1> 		mov ah, bl
 10327 000082E7 8B1D[70810000]      <1> 		mov ebx, [grphbuf + 12]
 10328 000082ED E9B2000000          <1> 		jmp showgraphicsreplace
 10329                              <1> 	replacewindow:
 10330 000082F2 893D[FB7B0000]      <1> 		mov [lastpos], edi
 10331 000082F8 8935[FF7B0000]      <1> 		mov [lastpos + 4], esi
 10332 000082FE 8B7702              <1> 		mov esi, [edi + 2]
 10333 00008301 8B3D[8E760000]      <1> 		mov edi, [windowbufloc]
 10334 00008307 31D2                <1> 		xor edx, edx
 10335 00008309 668B15[17580000]    <1> 		mov dx, [resolutionx2]
 10336 00008310 C1E204              <1> 		shl edx, 4
 10337 00008313 29D7                <1> 		sub edi, edx
 10338 00008315 31D2                <1> 		xor edx, edx
 10339 00008317 668B16              <1> 		mov dx, [esi]
 10340 0000831A 660316              <1> 		add dx, [esi]
 10341 0000831D 668B4E02            <1> 		mov cx, [esi + 2]
 10342 00008321 6681C11000          <1> 		add cx, 16
 10343 00008326 66A1[F96D0000]      <1> 		mov ax, [background]
 10344 0000832C 803D[5B810000]01    <1> 		cmp byte [windrag], 1
 10345 00008333 7604                <1> 		jbe clearwindow
 10346 00008335 662B4E02            <1> 		sub cx, [esi + 2]
 10347                              <1> 	clearwindow:
 10348                              <1> 		%ifdef gui.background
 10349                              <1> 			cmp dword [backgroundimage], 0
 10350                              <1> 			je .noback
 10351                              <1> 			push esi
 10352                              <1> 			mov esi, [backgroundimage]
 10353                              <1> 			sub edi, [physbaseptr]
 10354                              <1> 			add esi, edi
 10355                              <1> 			add edi, [physbaseptr]
 10356                              <1> 			mov ax, [esi]
 10357                              <1> 			pop esi
 10358                              <1> 		.noback:
 10359                              <1> 		%endif
 10360 00008339 668907              <1> 		mov [edi], ax
 10361 0000833C 81C702000000        <1> 		add edi, 2
 10362 00008342 81EA02000000        <1> 		sub edx, 2
 10363 00008348 81FA00000000        <1> 		cmp edx, 0
 10364 0000834E 75E9                <1> 		jne clearwindow
 10365 00008350 6649                <1> 		dec cx
 10366 00008352 668B15[17580000]    <1> 		mov dx, [resolutionx2]
 10367 00008359 662B16              <1> 		sub dx, [esi]
 10368 0000835C 662B16              <1> 		sub dx, [esi]
 10369 0000835F 01D7                <1> 		add edi, edx
 10370 00008361 668B16              <1> 		mov dx, [esi]
 10371 00008364 660316              <1> 		add dx, [esi]
 10372 00008367 6681F90000          <1> 		cmp cx, 0
 10373 0000836C 75CB                <1> 		jne clearwindow
 10374                              <1> 	endwindowclear:
 10375 0000836E C605[9D220000]00    <1> 		mov byte [termcopyon], 0
 10376 00008375 8B3D[FB7B0000]      <1> 		mov edi, [lastpos]
 10377 0000837B 8B35[66810000]      <1> 		mov esi, [grphbuf + 2]
 10378 00008381 668B15[6A810000]    <1> 		mov dx, [grphbuf + 6]
 10379 00008388 668B0D[6C810000]    <1> 		mov cx, [grphbuf + 8]
 10380 0000838F 668B1D[64810000]    <1> 		mov bx, [grphbuf]
 10381 00008396 66A1[6E810000]      <1> 		mov ax, [grphbuf + 10]
 10382 0000839C 88DC                <1> 		mov ah, bl
 10383 0000839E 8B1D[70810000]      <1> 		mov ebx, [grphbuf + 12]
 10384                              <1> 	showgraphicsreplace:
 10385 000083A4 897702              <1> 		mov [edi + 2], esi
 10386 000083A7 66895706            <1> 		mov [edi + 6], dx
 10387 000083AB 66894F08            <1> 		mov [edi + 8], cx
 10388 000083AF 895F0C              <1> 		mov [edi + 12], ebx
 10389 000083B2 30FF                <1> 		xor bh, bh
 10390 000083B4 88E3                <1> 		mov bl, ah
 10391 000083B6 30E4                <1> 		xor ah, ah
 10392 000083B8 6689470A            <1> 		mov [edi + 10], ax
 10393 000083BC 66891F              <1> 		mov [edi], bx
 10394 000083BF 8B5F0C              <1> 		mov ebx, [edi + 12]
 10395 000083C2 668B470A            <1> 		mov ax, [edi + 10]
 10396 000083C6 C3                  <1> 		ret
 10397                              <1> 	showgraphicsnew:
 10398 000083C7 BF[3BD40000]        <1> 		mov edi, graphicstable
 10399                              <1> 	shwgrph2:
 10400 000083CC 66813F0000          <1> 		cmp word [edi], 0
 10401 000083D1 74D1                <1> 		je showgraphicsreplace
 10402 000083D3 81C710000000        <1> 		add edi, 16
 10403 000083D9 81FF[3BD60000]      <1> 		cmp edi, graphicstableend
 10404 000083DF 72EB                <1> 		jb shwgrph2
 10405                              <1> 	showgraphicsdone:
 10406 000083E1 C3                  <1> 		ret
 10407                              <1> 	
 10408                              <1> putpixel: ;color in si, point is (dx,cx)
 10409                              <1> 		;destroys edi, ebx, eax
 10410 000083E2 6650                <1> 	push ax
 10411 000083E4 6653                <1> 	push bx
 10412 000083E6 31C0                <1> 	xor eax, eax
 10413 000083E8 31DB                <1> 	xor ebx, ebx
 10414 000083EA 31FF                <1> 	xor edi, edi
 10415 000083EC 668B1D[2B570000]    <1> 	mov bx, [resolutiony]
 10416 000083F3 66A1[29570000]      <1> 	mov ax, [resolutionx]
 10417 000083F9 6639C2              <1> 	cmp dx, ax
 10418 000083FC 7720                <1> 	ja .doneput
 10419 000083FE 66D1E0              <1> 	shl ax, 1
 10420 00008401 6639D9              <1> 	cmp cx, bx
 10421 00008404 7718                <1> 	ja .doneput
 10422 00008406 6689CB              <1> 	mov bx, cx
 10423 00008409 52                  <1> 	push edx
 10424 0000840A F7E3                <1> 	mul ebx
 10425 0000840C 5A                  <1> 	pop edx
 10426 0000840D 6601D7              <1> 	add di, dx
 10427 00008410 6601D7              <1> 	add di, dx
 10428 00008413 01C7                <1> 	add edi, eax
 10429 00008415 033D[3F570000]      <1> 	add edi, [physbaseptr]
 10430 0000841B 668937              <1> 	mov [edi], si
 10431                              <1> .doneput:
 10432 0000841E 665B                <1> 	pop bx
 10433 00008420 6658                <1> 	pop ax
 10434 00008422 C3                  <1> 	ret
 10435                              <1> 	
 10436                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10437 00008423 31FF                <1> 	xor edi, edi
 10438 00008425 31C0                <1> 	xor eax, eax
 10439 00008427 31DB                <1> 	xor ebx, ebx
 10440 00008429 668B1D[17580000]    <1> 	mov bx, [resolutionx2]
 10441 00008430 6689D7              <1> 	mov di, dx
 10442 00008433 6601D7              <1> 	add di, dx
 10443 00008436 6689C8              <1> 	mov ax, cx
 10444 00008439 F7E3                <1> 	mul ebx
 10445 0000843B 01C7                <1> 	add edi, eax
 10446 0000843D 033D[3F570000]      <1> 	add edi, [physbaseptr]
 10447 00008443 C3                  <1> 	ret
 10448                              <1> 
 10449 00008444 00                  <1> 	mouseon db 0
 10450 00008445 0000                <1> 	icon dw 0	;pointer to icon
 10451 00008447 00000000            <1> 	codepointer dd 0 ;pointer to code
 10452 0000844B 00                  <1> 	iconselected db 0
 10453                                  %endif
 10454                                  %ifdef network.included
 10455                                  	%include "source/network.asm"
 10456                              <1> network.init:
 10457                              <1> %ifdef rtl8139.included
 10458                              <1> 	%include "source/drivers/network/rtl8139.asm"
 10459                              <2> ;RTL8139 NIC DRIVER
 10460                              <2> rtl8139:
 10461 0000844C E805000000          <2> 	call .init
 10462 00008451 E9CE010000          <2> 	jmp .end
 10463                              <2> 
 10464                              <2> .RBSTART equ 0x30
 10465                              <2> .IMR equ 0x3C
 10466                              <2> .ISR equ 0x3E
 10467                              <2> .CMD equ 0x37
 10468                              <2> .RCR equ 0x44
 10469                              <2> .CONFIG1 equ 0x52
 10470                              <2> .TSD0 equ 0x10
 10471                              <2> .TSAD0 equ 0x20
 10472                              <2> .init:	;should find card, get mac, and initialize card
 10473 00008456 31C0                <2> 	xor eax, eax
 10474 00008458 A2[22620000]        <2> 	mov [pcifunction], al
 10475 0000845D A2[20620000]        <2> 	mov [pcibus], al
 10476 00008462 A2[21620000]        <2> 	mov [pcidevice], al
 10477 00008467 B002                <2> 	mov al, 0x02 ;type code
 10478 00008469 A2[B1620000]        <2> 	mov [pcitype], al
 10479 0000846E B8EC103981          <2> 	mov eax, 0x813910EC
 10480 00008473 A3[25620000]        <2> 	mov [pcidevid], eax
 10481 00008478 E8BCDDFFFF          <2> 	call getpciport
 10482 0000847D 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10483 00008483 7501                <2> 	jne .initnic
 10484 00008485 C3                  <2> 	ret
 10485                              <2> .initnic:
 10486 00008486 8915[03860000]      <2> 	mov [.basenicaddr], edx
 10487 0000848C 89D1                <2> 	mov ecx, edx
 10488 0000848E E8B1ABFFFF          <2> 	call showhex	;for debugging, please remove
 10489 00008493 BE[94BC0100]        <2> 	mov esi, rbuffstart
 10490 00008498 B900200000          <2> 	mov ecx, 8192
 10491 0000849D 31C0                <2> 	xor eax, eax
 10492                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 10493 0000849F 8806                <2> 	mov [esi], al
 10494 000084A1 46                  <2> 	inc esi
 10495 000084A2 6649                <2> 	dec cx
 10496 000084A4 6681F90000          <2> 	cmp cx, 0
 10497 000084A9 75F4                <2> 	jne .clearrbuff
 10498                              <2> .findmac:
 10499 000084AB 8B15[03860000]      <2> 	mov edx, [.basenicaddr]
 10500 000084B1 BF[08860000]        <2> 	mov edi, .mac
 10501 000084B6 B906000000          <2> 	mov ecx, 6
 10502                              <2> .macputloop:
 10503 000084BB EC                  <2> 	in al, dx
 10504 000084BC 8807                <2> 	mov [edi], al
 10505 000084BE 47                  <2> 	inc edi
 10506 000084BF 42                  <2> 	inc edx
 10507 000084C0 49                  <2> 	dec ecx
 10508 000084C1 75F8                <2> 	jnz .macputloop
 10509 000084C3 B9[08860000]        <2> 	mov ecx, .mac
 10510 000084C8 E8DF0B0000          <2> 	call showmac
 10511 000084CD E817000000          <2> 	call .resetnic
 10512 000084D2 BE[0E860000]        <2> 	mov esi, .name
 10513 000084D7 E87E98FFFF          <2> 	call print
 10514 000084DC BE[17860000]        <2> 	mov esi, .initmsg
 10515 000084E1 E87498FFFF          <2> 	call print
 10516 000084E6 31DB                <2> 	xor ebx, ebx
 10517 000084E8 C3                  <2> 	ret
 10518                              <2> .resetnic:
 10519 000084E9 8B15[03860000]      <2> 	mov edx, [.basenicaddr]
 10520 000084EF 81C252000000        <2> 	add edx, .CONFIG1
 10521 000084F5 30C0                <2> 	xor al, al
 10522 000084F7 EE                  <2> 	out dx, al	;WAKE UP!!!!
 10523 000084F8 8B15[03860000]      <2> 	mov edx, [.basenicaddr]
 10524 000084FE 81C237000000        <2> 	add edx, .CMD
 10525 00008504 B010                <2> 	mov al, 0x10
 10526 00008506 EE                  <2> 	out dx, al	;Reset
 10527                              <2> .resetnicwait:
 10528 00008507 EC                  <2> 	in al, dx
 10529 00008508 A810                <2> 	test al, 0x10
 10530 0000850A 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
 10531 00008510 8B15[03860000]      <2> 	mov edx, [.basenicaddr]
 10532 00008516 81C230000000        <2> 	add edx, .RBSTART
 10533 0000851C B8[94BC0100]        <2> 	mov eax, rbuffstart
 10534 00008521 0500001000          <2> 	add eax, 0x100000 ;change virtual to physical address
 10535 00008526 EF                  <2> 	out dx, eax	;give nic receive buffer location
 10536 00008527 8B15[03860000]      <2> 	mov edx, [.basenicaddr]
 10537 0000852D 81C23C000000        <2> 	add edx, .IMR
 10538                              <2> 	;in ax, dx
 10539 00008533 66B80500            <2> 	mov ax, 5
 10540 00008537 66EF                <2> 	out dx, ax	;set both TOK and ROK interrupts
 10541 00008539 8B15[03860000]      <2> 	mov edx, [.basenicaddr]
 10542 0000853F 81C244000000        <2> 	add edx, .RCR
 10543 00008545 B802000000          <2> 	mov eax, 000010b ;receive only physical matches
 10544 0000854A 0580000000          <2> 	add eax, 128 ;enable wrap option
 10545 0000854F EF                  <2> 	out dx, eax	;recieve packets from all matches
 10546 00008550 8B15[03860000]      <2> 	mov edx, [.basenicaddr]
 10547 00008556 81C237000000        <2> 	add edx, .CMD
 10548 0000855C B00C                <2> 	mov al, 0x0C
 10549 0000855E EE                  <2> 	out dx, al	;use transmit and receive
 10550 0000855F C605[07860000]01    <2> 	mov byte [.nicconfig], 1
 10551 00008566 C3                  <2> 	ret
 10552                              <2> 	
 10553                              <2> .sendpacket:	;packet with beginning in edi and end in esi
 10554 00008567 56                  <2> 	push esi
 10555 00008568 57                  <2> 	push edi
 10556 00008569 803D[07860000]01    <2> 	cmp byte [.nicconfig], 1
 10557 00008570 7410                <2> 	je .sendit
 10558 00008572 E8DFFEFFFF          <2> 	call .init
 10559 00008577 5F                  <2> 	pop edi
 10560 00008578 5E                  <2> 	pop esi
 10561 00008579 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10562 0000857F 75E6                <2> 	jne .sendpacket
 10563 00008581 C3                  <2> 	ret
 10564                              <2> .sendit:
 10565 00008582 E862FFFFFF          <2> 	call .resetnic
 10566 00008587 8B15[03860000]      <2> 	mov edx, [.basenicaddr]
 10567 0000858D 81C220000000        <2> 	add edx, .TSAD0
 10568 00008593 5F                  <2> 	pop edi
 10569 00008594 8B0D[08860000]      <2> 	mov ecx, [.mac]
 10570 0000859A 894F06              <2> 	mov [edi + 6], ecx
 10571 0000859D 668B0D[0C860000]    <2> 	mov cx, [.mac + 4]
 10572 000085A4 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 10573 000085A8 A1[3E020000]        <2> 	mov eax, [basecache]
 10574 000085AD C1E004              <2> 	shl eax, 4
 10575 000085B0 01F8                <2> 	add eax, edi
 10576 000085B2 EF                  <2> 	out dx, eax	;here's Johnny!
 10577 000085B3 5E                  <2> 	pop esi
 10578 000085B4 29FE                <2> 	sub esi, edi
 10579 000085B6 8B15[03860000]      <2> 	mov edx, [.basenicaddr]
 10580 000085BC 81C210000000        <2> 	add edx, .TSD0
 10581 000085C2 ED                  <2> 	in eax, dx ;get tsd
 10582 000085C3 2500E0FFFF          <2> 	and eax, 0xFFFFE000 ;clear off thirteen bits
 10583 000085C8 01F0                <2> 	add eax, esi ;add length to tsd
 10584 000085CA 25FFDFFFFF          <2> 	and eax, 0xFFFFDFFF ;clear own bit
 10585 000085CF EF                  <2> 	out dx, eax
 10586                              <2> .checknicownbit:
 10587 000085D0 8B15[03860000]      <2> 	mov edx, [.basenicaddr]
 10588 000085D6 81C210000000        <2> 	add edx, .TSD0
 10589 000085DC ED                  <2> 	in eax, dx
 10590 000085DD 2500200000          <2> 	and eax, 0x2000 ;check own bit
 10591 000085E2 3D00200000          <2> 	cmp eax, 0x2000
 10592 000085E7 75E7                <2> 	jne .checknicownbit
 10593                              <2> .checknictokbit:
 10594 000085E9 8B15[03860000]      <2> 	mov edx, [.basenicaddr]
 10595 000085EF 81C210000000        <2> 	add edx, .TSD0
 10596 000085F5 ED                  <2> 	in eax, dx
 10597 000085F6 2500800000          <2> 	and eax, 0x8000	;check tok bit
 10598 000085FB 3D00800000          <2> 	cmp eax, 0x8000
 10599 00008600 75E7                <2> 	jne .checknictokbit
 10600 00008602 C3                  <2> 	ret
 10601 00008603 00000000            <2> .basenicaddr dd 0
 10602 00008607 00                  <2> .nicconfig db 0
 10603 00008608 000000000000        <2> .mac db 0,0,0,0,0,0
 10604 0000860E 52544C383133392000  <2> .name db "RTL8139 ",0
 10605 00008617 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10606 00008620 65640A00            <2>
 10607                              <2> 
 10608                              <2> .end:
 10609                              <1> %endif
 10610                              <1> %ifdef rtl8169.included
 10611                              <1> 	%include "source/drivers/network/rtl8169.asm"
 10612                              <2> ;RTL8169 NIC DRIVER
 10613                              <2> rtl8169:
 10614 00008624 E805000000          <2> 	call .init
 10615 00008629 E9E2030000          <2> 	jmp .end
 10616                              <2> 
 10617                              <2> ;REGISTERS
 10618                              <2> .CMD equ 0x37
 10619                              <2> .TXPOLL equ 0x38
 10620                              <2> .TCR equ 0x40
 10621                              <2> .RCR equ 0x44
 10622                              <2> .IMR equ 0x3C
 10623                              <2> .ISR equ 0x3E
 10624                              <2> .LOCK equ 0x50
 10625                              <2> .CONFIG1 equ 0x52
 10626                              <2> .TDSAR equ 0x20
 10627                              <2> .RDSAR equ 0xE4
 10628                              <2> .MAXRX equ 0xDA
 10629                              <2> .MAXTX equ 0xEC
 10630                              <2> ;IMPORTANT VALUES
 10631                              <2> .OWN equ 0x80000000
 10632                              <2> .EOR equ 0x40000000
 10633                              <2> .POLLING equ 0x40
 10634                              <2> ;CODE
 10635                              <2> .init:	;should find card, get mac, and initialize card
 10636 0000862E 31C0                <2> 	xor eax, eax
 10637 00008630 A2[22620000]        <2> 	mov [pcifunction], al
 10638 00008635 A2[20620000]        <2> 	mov [pcibus], al
 10639 0000863A A2[21620000]        <2> 	mov [pcidevice], al
 10640 0000863F B002                <2> 	mov al, 0x02 ;type code
 10641 00008641 A2[B1620000]        <2> 	mov [pcitype], al
 10642 00008646 B8EC106981          <2> 	mov eax, 0x816910EC
 10643 0000864B A3[25620000]        <2> 	mov [pcidevid], eax
 10644 00008650 BBFFFFF0FF          <2> 	mov ebx, 0xFFF0FFFF
 10645 00008655 891D[29620000]      <2> 	mov [pcidevidmask], ebx
 10646 0000865B E8D9DBFFFF          <2> 	call getpciport
 10647 00008660 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10648 00008666 7501                <2> 	jne .initnic
 10649 00008668 C3                  <2> 	ret
 10650                              <2> .initnic:
 10651 00008669 8915[04880000]      <2> 	mov [.basenicaddr], edx
 10652 0000866F 89D1                <2> 	mov ecx, edx
 10653 00008671 E8CEA9FFFF          <2> 	call showhex	;for debugging, please remove
 10654 00008676 BE[94BC0100]        <2> 	mov esi, rbuffstart
 10655 0000867B B900200000          <2> 	mov ecx, 8192
 10656 00008680 31C0                <2> 	xor eax, eax
 10657                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 10658 00008682 8806                <2> 	mov [esi], al
 10659 00008684 46                  <2> 	inc esi
 10660 00008685 6649                <2> 	dec cx
 10661 00008687 6681F90000          <2> 	cmp cx, 0
 10662 0000868C 75F4                <2> 	jne .clearrbuff
 10663                              <2> .findmac:
 10664 0000868E 8B15[04880000]      <2> 	mov edx, [.basenicaddr]
 10665 00008694 BF[09880000]        <2> 	mov edi, .mac
 10666 00008699 B906000000          <2> 	mov ecx, 6
 10667                              <2> .macputloop:
 10668 0000869E EC                  <2> 	in al, dx
 10669 0000869F 8807                <2> 	mov [edi], al
 10670 000086A1 47                  <2> 	inc edi
 10671 000086A2 42                  <2> 	inc edx
 10672 000086A3 49                  <2> 	dec ecx
 10673 000086A4 75F8                <2> 	jnz .macputloop
 10674 000086A6 B9[09880000]        <2> 	mov ecx, .mac
 10675 000086AB E8FC090000          <2> 	call showmac
 10676 000086B0 E817000000          <2> 	call .resetnic
 10677 000086B5 BE[0F880000]        <2> 	mov esi, .name
 10678 000086BA E89B96FFFF          <2> 	call print
 10679 000086BF BE[18880000]        <2> 	mov esi, .initmsg
 10680 000086C4 E89196FFFF          <2> 	call print
 10681 000086C9 31DB                <2> 	xor ebx, ebx
 10682 000086CB C3                  <2> 	ret
 10683                              <2> .resetnic:
 10684 000086CC 8B15[04880000]      <2> 	mov edx, [.basenicaddr]
 10685 000086D2 81C237000000        <2> 	add edx, .CMD
 10686 000086D8 B010                <2> 	mov al, 0x10
 10687 000086DA EE                  <2> 	out dx, al	;Reset
 10688                              <2> .resetnicwait:
 10689 000086DB EC                  <2> 	in al, dx
 10690 000086DC A810                <2> 	test al, 0x10
 10691 000086DE 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
 10692 000086E4 8B15[04880000]      <2> 	mov edx, [.basenicaddr]
 10693 000086EA 81C250000000        <2> 	add edx, .LOCK
 10694 000086F0 B0C0                <2> 	mov al, 0xC0
 10695 000086F2 EE                  <2> 	out dx, al	;unlock config registers
 10696 000086F3 8B15[04880000]      <2> 	mov edx, [.basenicaddr]
 10697 000086F9 81C244000000        <2> 	add edx, .RCR
 10698 000086FF B80FE70000          <2> 	mov eax, 0x0000E70F
 10699 00008704 EF                  <2> 	out dx, eax	;recieve packets from all matches
 10700 00008705 8B15[04880000]      <2> 	mov edx, [.basenicaddr]
 10701 0000870B 81C240000000        <2> 	add edx, .TCR
 10702 00008711 B800070003          <2> 	mov eax, 0x03000700
 10703 00008716 EF                  <2> 	out dx, eax	;set up tcr
 10704 00008717 8B15[04880000]      <2> 	mov edx, [.basenicaddr]
 10705 0000871D 81C2DA000000        <2> 	add edx, .MAXRX
 10706 00008723 66B8FF1F            <2> 	mov ax, 0x1FFF
 10707 00008727 66EF                <2> 	out dx, ax	;setup max rx size
 10708 00008729 8B15[04880000]      <2> 	mov edx, [.basenicaddr]
 10709 0000872F 81C2EC000000        <2> 	add edx, .MAXTX
 10710 00008735 B03B                <2> 	mov al, 0x3B
 10711 00008737 EE                  <2> 	out dx, al	;setup max tx size
 10712 00008738 8B15[04880000]      <2> 	mov edx, [.basenicaddr]
 10713 0000873E 81C220000000        <2> 	add edx, .TDSAR
 10714 00008744 A1[3E020000]        <2> 	mov eax, [basecache]
 10715 00008749 C1E004              <2> 	shl eax, 4
 10716 0000874C 05[00890000]        <2> 	add eax, .txdesc
 10717 00008751 EF                  <2> 	out dx, eax
 10718 00008752 8B15[04880000]      <2> 	mov edx, [.basenicaddr]
 10719 00008758 81C2E4000000        <2> 	add edx, .RDSAR
 10720 0000875E A1[3E020000]        <2> 	mov eax, [basecache]
 10721 00008763 C1E004              <2> 	shl eax, 4
 10722 00008766 05[008A0000]        <2> 	add eax, .rxdesc
 10723 0000876B EF                  <2> 	out dx, eax
 10724 0000876C 8B15[04880000]      <2> 	mov edx, [.basenicaddr]
 10725 00008772 81C237000000        <2> 	add edx, .CMD
 10726 00008778 B00C                <2> 	mov al, 0x0C
 10727 0000877A EE                  <2> 	out dx, al	;use transmit and receive
 10728 0000877B 8B15[04880000]      <2> 	mov edx, [.basenicaddr]
 10729 00008781 81C250000000        <2> 	add edx, .LOCK
 10730 00008787 30C0                <2> 	xor al, al
 10731 00008789 EE                  <2> 	out dx, al
 10732 0000878A C605[08880000]01    <2> 	mov byte [.nicconfig], 1
 10733 00008791 C3                  <2> 	ret
 10734                              <2> 	
 10735                              <2> .sendpacket:	;packet with beginning in edi and end in esi
 10736 00008792 803D[08880000]01    <2> 	cmp byte [.nicconfig], 1
 10737 00008799 7412                <2> 	je .sendcachedata
 10738 0000879B 56                  <2> 	push esi
 10739 0000879C 57                  <2> 	push edi
 10740 0000879D E88CFEFFFF          <2> 	call .init
 10741 000087A2 5F                  <2> 	pop edi
 10742 000087A3 5E                  <2> 	pop esi
 10743 000087A4 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10744 000087AA 75E6                <2> 	jne .sendpacket
 10745 000087AC C3                  <2> 	ret
 10746                              <2> .sendcachedata:
 10747 000087AD 8B0D[09880000]      <2> 	mov ecx, [.mac]
 10748 000087B3 894F06              <2> 	mov [edi + 6], ecx
 10749 000087B6 668B0D[0D880000]    <2> 	mov cx, [.mac + 4]
 10750 000087BD 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 10751 000087C1 A1[3E020000]        <2> 	mov eax, [basecache]
 10752 000087C6 C1E004              <2> 	shl eax, 4
 10753 000087C9 01F8                <2> 	add eax, edi
 10754 000087CB A3[08890000]        <2> 	mov [.txdesc + 8], eax	;put packet start in tx descriptor
 10755 000087D0 29FE                <2> 	sub esi, edi
 10756 000087D2 668935[00890000]    <2> 	mov [.txdesc], si	;put packet size in tx descriptor
 10757 000087D9 810D[00890000]0000- <2> 	or dword [.txdesc], .OWN	;set own bit
 10758 000087E1 0080                <2>
 10759 000087E3 8B15[04880000]      <2> 	mov edx, [.basenicaddr]
 10760 000087E9 81C238000000        <2> 	add edx, .TXPOLL
 10761 000087EF B040                <2> 	mov al, .POLLING
 10762 000087F1 EE                  <2> 	out dx, al	;set up TX Polling
 10763                              <2> .sendloop:
 10764 000087F2 A1[00890000]        <2> 	mov eax, [.txdesc]
 10765 000087F7 2500000080          <2> 	and eax, .OWN
 10766 000087FC 3D00000080          <2> 	cmp eax, .OWN
 10767 00008801 74EF                <2> 	je .sendloop
 10768 00008803 C3                  <2> 	ret
 10769                              <2> 	
 10770 00008804 00000000            <2> .basenicaddr dd 0
 10771 00008808 00                  <2> .nicconfig db 0
 10772 00008809 000000000000        <2> .mac db 0,0,0,0,0,0
 10773 0000880F 52544C383136392000  <2> .name db "RTL8169 ",0
 10774 00008818 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10775 00008821 65640A00            <2>
 10776 00008825 90<rept>            <2> align 256, nop
 10777                              <2> .txdesc:
 10778 00008900 00000040            <2> 	dd .EOR	;command
 10779 00008904 00000000            <2> 	dd 0	;vlan
 10780 00008908 00000000            <2> 	dd 0	;low buf
 10781 0000890C 00000000            <2> 	dd 0	;high buf
 10782 00008910 90<rept>            <2> align 256, nop
 10783                              <2> .rxdesc:
 10784 00008A00 142000C0            <2> 	dd .OWN | .EOR | (rbuffend - rbuffstart)	;command
 10785 00008A04 00000000            <2> 	dd 0	;vlan
 10786 00008A08 [94BC0100]          <2> 	dd rbuffstart	;low buf
 10787 00008A0C 00000000            <2> 	dd 0	;high buf
 10788                              <2> .end:
 10789                              <1> %endif
 10790                              <1> %ifdef ne2000.included
 10791                              <1> 	%include "source/drivers/network/ne2000.asm"
 10792                              <2> ne2000:
 10793 00008A10 E805000000          <2> 	call .init
 10794 00008A15 E93C030000          <2> 	jmp .end
 10795                              <2> 
 10796                              <2> ;	PAGE0			PAGE 1			PAGE 2
 10797                              <2> ;	READ	WRITE	READ	WRITE	READ	WRITE
 10798                              <2> ;0	CR		CR		CR		CR		CR		CR
 10799                              <2> ;1	CLDA0 	PSTART	PAR0	PAR0	PSTART	CLDA0
 10800                              <2> ;2	CLDA1	PSTOP	PAR1	PAR1	PSTOP	CLDA1
 10801                              <2> ;3	BNRY	BNRY	PAR2	PAR2	RNPP	RNPP
 10802                              <2> ;4	TSR		TPSR	PAR3	PAR3	TPSR	N/A
 10803                              <2> ;5	NCR		TBCR0	PAR4	PAR4	LNPP	LNPP
 10804                              <2> ;6	FIFO	TCBR1	PAR5	PAR5	ACU		ACU
 10805                              <2> ;7	ISR		ISR		CURR	CURR	ACL		ACL
 10806                              <2> ;8	CRDA0	RSAR0	MAR0	MAR0	N/A		N/A
 10807                              <2> ;9	CRDA1	RSAR1	MAR1	MAR1	N/A		N/A
 10808                              <2> ;A	N/A		RBCR0	MAR2	MAR2	N/A		N/A
 10809                              <2> ;B	N/A		RBCR1	MAR3	MAR3	N/A		N/A
 10810                              <2> ;C	RSR		RCR		MAR4	MAR4	RCR		N/A
 10811                              <2> ;D	CNTR0	TCR		MAR5	MAR5	TCR		N/A
 10812                              <2> ;E	CNTR1	DCR		MAR6	MAR6	DCR		N/A
 10813                              <2> ;F	CNTR2	IMR		MAR7	MAR7	IMR		N/A
 10814                              <2> .CR equ 0
 10815                              <2> 	.CR.STP	equ 1		;Stop
 10816                              <2> 	.CR.STA equ 2		;Start
 10817                              <2> 	.CR.TXP equ 4		;Transmit
 10818                              <2> 	.CR.RD0 equ 8		;Remote DMA 0
 10819                              <2> 	.CR.RD1 equ 0x10	;Remote DMA 1
 10820                              <2> 	.CR.RD2 equ 0x20	;Remote DMA 2
 10821                              <2> 	.CR.PS0 equ 0x40	;Page Select 0
 10822                              <2> 	.CR.PS1 equ 0x80	;Page Select 1
 10823                              <2> .PSTART equ 1
 10824                              <2> .PSTOP equ 2
 10825                              <2> .BNRY equ 3
 10826                              <2> .ISR equ 7
 10827                              <2> 	.ISR.PRX equ 1		;Packet Received
 10828                              <2> 	.ISR.PTX equ 2		;Packet Transmitted
 10829                              <2> 	.ISR.RXE equ 4		;Receive Error
 10830                              <2> 	.ISR.TXE equ 8		;Transmission Error
 10831                              <2> 	.ISR.OVW equ 0x10	;Overwrite
 10832                              <2> 	.ISR.CNT equ 0x20	;Counter Overflow
 10833                              <2> 	.ISR.RDC equ 0x40	;Remote Data Complete
 10834                              <2> 	.ISR.RST equ 0x80	;Reset status
 10835                              <2> .RSAR0 equ 8
 10836                              <2> .RSAR1 equ 9
 10837                              <2> .RBCR0 equ 0xA
 10838                              <2> .RBCR1 equ 0xB
 10839                              <2> .RCR equ 0xC
 10840                              <2> 	.RCR.SEP equ 1		;Save Errored Packets
 10841                              <2> 	.RCR.AR equ 2		;Accept Runt packet
 10842                              <2> 	.RCR.AB equ 4		;Accept Broadcast
 10843                              <2> 	.RCR.AM equ 8		;Accept Multicast
 10844                              <2> 	.RCR.PRO equ 0x10	;Promiscuous Physical
 10845                              <2> 	.RCR.MON equ 0x20	;Monitor Mode
 10846                              <2> .DCR equ 0xE
 10847                              <2> 	.DCR.WTS equ 1		;Word Transfer Select
 10848                              <2> 	.DCR.BOS equ 2		;Byte Order Select
 10849                              <2> 	.DCR.LAS equ 4		;Long Address Select
 10850                              <2> 	.DCR.LS equ 8		;Loopback Select
 10851                              <2> 	.DCR.AR equ 0x10	;Auto-initialize Remote
 10852                              <2> 	.DCR.FT0 equ 0x20	;FIFO Threshold Select 0
 10853                              <2> 	.DCR.FT1 equ 0x40	;FIFO Threshold Select 1
 10854                              <2> .ASIC equ 0x10
 10855                              <2> .RESET equ 0x1F
 10856                              <2> 
 10857                              <2> .init:
 10858 00008A1A BBFFFFFFFF          <2> 	mov ebx, 0xFFFFFFFF
 10859 00008A1F 31C0                <2> 	xor eax, eax
 10860 00008A21 A2[22620000]        <2> 	mov [pcifunction], al
 10861 00008A26 A2[20620000]        <2> 	mov [pcibus], al
 10862 00008A2B A2[21620000]        <2> 	mov [pcidevice], al
 10863 00008A30 B002                <2> 	mov al, 2 ;type code
 10864 00008A32 A2[B1620000]        <2> 	mov [pcitype], al
 10865 00008A37 B8EC102980          <2> 	mov eax, 0x802910EC
 10866 00008A3C A3[25620000]        <2> 	mov [pcidevid], eax
 10867 00008A41 E8F3D7FFFF          <2> 	call getpciport
 10868 00008A46 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10869 00008A4C 7501                <2> 	jne .good0
 10870 00008A4E C3                  <2> 	ret
 10871                              <2> .good0:
 10872 00008A4F 8915[198D0000]      <2> 	mov [.basenicaddr], edx
 10873 00008A55 89D1                <2> 	mov ecx, edx
 10874                              <2> .test:
 10875 00008A57 E854000000          <2> 	call .reset
 10876 00008A5C E87B000000          <2> 	call .stop
 10877 00008A61 89CA                <2> 	mov edx, ecx
 10878 00008A63 B9FF000000          <2> 	mov ecx, 0xFF
 10879 00008A68 E2FE                <2> 	loop $ ;wait for ~100 us
 10880 00008A6A 89D1                <2> 	mov ecx, edx
 10881 00008A6C EC                  <2> 	in al, dx
 10882 00008A6D 2427                <2> 	and al, (.CR.RD2 | .CR.TXP | .CR.STA | .CR.STP)
 10883 00008A6F 3C21                <2> 	cmp al, (.CR.RD2 | .CR.STP)
 10884 00008A71 7410                <2> 	je .good1
 10885 00008A73 89CA                <2> 	mov edx, ecx
 10886 00008A75 81C207000000        <2> 	add edx, .ISR
 10887 00008A7B EC                  <2> 	in al, dx
 10888 00008A7C 2480                <2> 	and al, .ISR.RST
 10889 00008A7E 3C80                <2> 	cmp al, .ISR.RST
 10890 00008A80 7401                <2> 	je .good1
 10891 00008A82 C3                  <2> 	ret
 10892                              <2> .good1:
 10893 00008A83 E8BCA5FFFF          <2> call showhex	;for debugging, please remove
 10894 00008A88 E85B000000          <2> 	call .setup
 10895 00008A8D E81A060000          <2> call showmac
 10896 00008A92 BE[1E8D0000]        <2> mov esi, .name
 10897 00008A97 E8BE92FFFF          <2> call print
 10898 00008A9C BE[268D0000]        <2> mov esi, .initmsg
 10899 00008AA1 E8B492FFFF          <2> call print
 10900 00008AA6 C605[1D8D0000]01    <2> 	mov byte [.nicconfig], 1
 10901 00008AAD 31DB                <2> 	xor ebx, ebx
 10902 00008AAF C3                  <2> 	ret
 10903                              <2> .reset:
 10904 00008AB0 8B15[198D0000]      <2> 	mov edx, [.basenicaddr]
 10905 00008AB6 81C21F000000        <2> 	add edx, .RESET
 10906 00008ABC EC                  <2> 	in al, dx
 10907 00008ABD EE                  <2> 	out dx, al ;write its contents to itself
 10908 00008ABE C3                  <2> 	ret
 10909                              <2> .page:
 10910 00008ABF 66C1E00E            <2> 	shl ax, 14
 10911 00008AC3 8B15[198D0000]      <2> 	mov edx, [.basenicaddr]
 10912 00008AC9 EC                  <2> 	in al, dx
 10913 00008ACA 243F                <2> 	and al, 00111111b
 10914 00008ACC 08E0                <2> 	or al, ah
 10915 00008ACE EE                  <2> 	out dx, al
 10916 00008ACF C3                  <2> 	ret
 10917                              <2> .start:
 10918 00008AD0 8B15[198D0000]      <2> 	mov edx, [.basenicaddr]
 10919 00008AD6 B020                <2> 	mov al, .CR.RD2
 10920 00008AD8 B002                <2> 	mov al, .CR.STA
 10921 00008ADA EE                  <2> 	out dx, al
 10922 00008ADB C3                  <2> 	ret
 10923                              <2> .stop:
 10924 00008ADC 8B15[198D0000]      <2> 	mov edx, [.basenicaddr]
 10925 00008AE2 B020                <2> 	mov al, .CR.RD2
 10926 00008AE4 0C01                <2> 	or al, .CR.STP
 10927 00008AE6 EE                  <2> 	out dx, al
 10928 00008AE7 C3                  <2> 	ret
 10929                              <2> .setup:
 10930 00008AE8 E8EFFFFFFF          <2> 	call .stop
 10931 00008AED 8B15[198D0000]      <2> 	mov edx, [.basenicaddr]
 10932 00008AF3 81C20E000000        <2> 	add edx, .DCR
 10933 00008AF9 B040                <2> 	mov al, .DCR.FT1
 10934 00008AFB 0C01                <2> 	or al, .DCR.WTS
 10935 00008AFD 0C08                <2> 	or al, .DCR.LS
 10936 00008AFF EE                  <2> 	out dx, al ;Set FIFO threshold, byte order, word-wide DMA
 10937 00008B00 E8B9000000          <2> 	call .getmac
 10938 00008B05 E8D2FFFFFF          <2> 	call .stop
 10939 00008B0A 30C0                <2> 	xor al, al
 10940 00008B0C 8B15[198D0000]      <2> 	mov edx, [.basenicaddr]
 10941 00008B12 81C20A000000        <2> 	add edx, .RBCR0
 10942 00008B18 EE                  <2> 	out dx, al
 10943 00008B19 6642                <2> 	inc dx
 10944 00008B1B EE                  <2> 	out dx, al ;Clear byte count
 10945 00008B1C B800400000          <2> 	mov eax, 16*1024
 10946 00008B21 A3[388D0000]        <2> 	mov [.ringstart], eax
 10947 00008B26 C1E808              <2> 	shr eax, 8
 10948 00008B29 66A3[348D0000]      <2> 	mov [.pagestart], ax
 10949 00008B2F 0534000000          <2> 	add eax, 64-2*6
 10950 00008B34 A3[368D0000]        <2> 	mov [.pageend], eax
 10951 00008B39 C1E008              <2> 	shl eax, 8
 10952 00008B3C 66A3[3C8D0000]      <2> 	mov [.ringend], ax ;set page and ring starts and ends
 10953 00008B42 8B15[198D0000]      <2> 	mov edx, [.basenicaddr]
 10954 00008B48 81C201000000        <2> 	add edx, .PSTART
 10955 00008B4E A0[348D0000]        <2> 	mov al, [.pagestart]
 10956 00008B53 EE                  <2> 	out dx, al
 10957 00008B54 A0[368D0000]        <2> 	mov al, [.pageend]
 10958 00008B59 6642                <2> 	inc dx
 10959 00008B5B EE                  <2> 	out dx, al
 10960 00008B5C A0[348D0000]        <2> 	mov al, [.pagestart]
 10961 00008B61 6642                <2> 	inc dx
 10962 00008B63 EE                  <2> 	out dx, al
 10963 00008B64 E873FFFFFF          <2> 	call .stop
 10964                              <2> ;INSERT INTERRUPT ENABLE HERE
 10965 00008B69 B001                <2> 	mov al, 1
 10966 00008B6B E84FFFFFFF          <2> 	call .page
 10967 00008B70 8B15[198D0000]      <2> 	mov edx, [.basenicaddr]
 10968 00008B76 BF[468D0000]        <2> 	mov edi, .rom
 10969                              <2> .copymactocard:
 10970 00008B7B 42                  <2> 	inc edx
 10971 00008B7C 6E                  <2> 	outsb
 10972 00008B7D 81C702000000        <2> 	add edi, 2
 10973 00008B83 81FA06000000        <2> 	cmp edx, 6
 10974 00008B89 76F0                <2> 	jbe .copymactocard
 10975 00008B8B 8B15[198D0000]      <2> 	mov edx, [.basenicaddr]
 10976 00008B91 81C207000000        <2> 	add edx, 7
 10977 00008B97 A0[348D0000]        <2> 	mov al, [.pagestart]
 10978 00008B9C FEC0                <2> 	inc al
 10979 00008B9E EE                  <2> 	out dx, al ;set page in CURR register
 10980                              <2> ;INSERT MULTICAST INIT HERE
 10981 00008B9F E838FFFFFF          <2> 	call .stop
 10982 00008BA4 8B15[198D0000]      <2> 	mov edx, [.basenicaddr]
 10983 00008BAA 81C20C000000        <2> 	add edx, .RCR
 10984 00008BB0 B004                <2> 	mov al, .RCR.AB
 10985 00008BB2 EE                  <2> 	out dx, al ;accept broadcast
 10986 00008BB3 6642                <2> 	inc dx
 10987 00008BB5 30C0                <2> 	xor al, al
 10988 00008BB7 EE                  <2> 	out dx, al ;stop loopback
 10989 00008BB8 E813FFFFFF          <2> 	call .start
 10990 00008BBD C3                  <2> 	ret
 10991                              <2> .getmac:
 10992 00008BBE 8B15[198D0000]      <2> 	mov edx, [.basenicaddr]
 10993 00008BC4 B020                <2> 	mov al, 0x20
 10994 00008BC6 0C02                <2> 	or al, 2
 10995 00008BC8 EE                  <2> 	out dx, al	;set STA and RD2 bits
 10996 00008BC9 6681C20A00          <2> 	add dx, .RBCR0
 10997 00008BCE B010                <2> 	mov al, 16
 10998 00008BD0 EE                  <2> 	out dx, al
 10999 00008BD1 6642                <2> 	inc dx
 11000 00008BD3 30C0                <2> 	xor al, al
 11001 00008BD5 EE                  <2> 	out dx, al
 11002 00008BD6 8B15[198D0000]      <2> 	mov edx, [.basenicaddr]
 11003 00008BDC 6681C20800          <2> 	add dx, .RSAR0
 11004 00008BE1 EE                  <2> 	out dx, al
 11005 00008BE2 6642                <2> 	inc dx
 11006 00008BE4 EE                  <2> 	out dx, al
 11007 00008BE5 668B15[198D0000]    <2> 	mov dx, [.basenicaddr]
 11008 00008BEC B008                <2> 	mov al, 8
 11009 00008BEE 0C02                <2> 	or al, 2
 11010 00008BF0 EE                  <2> 	out dx, al
 11011 00008BF1 668B15[198D0000]    <2> 	mov dx, [.basenicaddr]
 11012 00008BF8 6681C21000          <2> 	add dx, .ASIC
 11013 00008BFD B908000000          <2> 	mov ecx, 8
 11014 00008C02 BF[468D0000]        <2> 	mov edi, .rom
 11015 00008C07 F3666D              <2> 	rep insw
 11016                              <2> .copymac:
 11017 00008C0A BF[468D0000]        <2> 	mov edi, .rom
 11018 00008C0F BE[408D0000]        <2> 	mov esi, .mac
 11019 00008C14 B906000000          <2> 	mov ecx, 6
 11020                              <2> .lpmac:
 11021 00008C19 8A07                <2> 	mov al, [edi]
 11022 00008C1B 8806                <2> 	mov [esi], al
 11023 00008C1D 81C702000000        <2> 	add edi, 2
 11024 00008C23 46                  <2> 	inc esi
 11025 00008C24 E2F3                <2> 	loop .lpmac
 11026 00008C26 B9[408D0000]        <2> 	mov ecx, .mac
 11027 00008C2B C3                  <2> 	ret
 11028                              <2> .sendpacket:
 11029 00008C2C 803D[1D8D0000]00    <2> 	cmp byte [.nicconfig], 0
 11030 00008C33 7512                <2> 	jne .sendit
 11031 00008C35 56                  <2> 	push esi
 11032 00008C36 57                  <2> 	push edi
 11033 00008C37 E8DEFDFFFF          <2> 	call .init
 11034 00008C3C 5F                  <2> 	pop edi
 11035 00008C3D 5E                  <2> 	pop esi
 11036 00008C3E 81FB00000000        <2> 	cmp ebx, 0
 11037 00008C44 7401                <2> 	je .sendit
 11038 00008C46 C3                  <2> 	ret
 11039                              <2> .sendit: ;packet start in edi, end in esi
 11040 00008C47 87F7                <2> 	xchg esi, edi ;this helps with the outsw
 11041                              <2> 	;now the packet start is in esi, end in edi
 11042 00008C49 8B0D[408D0000]      <2> 	mov ecx, [.mac]
 11043 00008C4F 894E06              <2> 	mov [esi + 6], ecx
 11044 00008C52 668B0D[448D0000]    <2> 	mov cx, [.mac + 4]
 11045 00008C59 66894E0A            <2> 	mov [esi + 10], cx	;copy the correct mac
 11046 00008C5D 8B15[198D0000]      <2> 	mov edx, [.basenicaddr]
 11047 00008C63 B020                <2> 	mov al, .CR.RD2
 11048 00008C65 0C02                <2> 	or al, .CR.STA
 11049 00008C67 EE                  <2> 	out dx, al ;set RD2 and STA
 11050 00008C68 81C207000000        <2> 	add edx, .ISR ; ISR
 11051 00008C6E B040                <2> 	mov al, .ISR.RDC
 11052 00008C70 EE                  <2> 	out dx, al ;set RDC flag
 11053 00008C71 8B15[198D0000]      <2> 	mov edx, [.basenicaddr]
 11054 00008C77 6681C20A00          <2> 	add dx, .RBCR0
 11055 00008C7C 89F8                <2> 	mov eax, edi
 11056 00008C7E 29F0                <2> 	sub eax, esi
 11057 00008C80 BB01000000          <2> 	mov ebx, 1
 11058 00008C85 21C3                <2> 	and ebx, eax
 11059 00008C87 81FB01000000        <2> 	cmp ebx, 1
 11060 00008C8D 7501                <2> 	jne .nofixword
 11061 00008C8F 40                  <2> 	inc eax
 11062                              <2> .nofixword:
 11063 00008C90 89C1                <2> 	mov ecx, eax ;save length in ecx
 11064 00008C92 EE                  <2> 	out dx, al
 11065 00008C93 86C4                <2> 	xchg al, ah
 11066 00008C95 6642                <2> 	inc dx
 11067 00008C97 EE                  <2> 	out dx, al ;send size
 11068 00008C98 8B15[198D0000]      <2> 	mov edx, [.basenicaddr]
 11069 00008C9E 6681C20800          <2> 	add dx, .RSAR0
 11070 00008CA3 66A1[348D0000]      <2> 	mov ax, [.pagestart]
 11071 00008CA9 C1E008              <2> 	shl eax, 8
 11072 00008CAC EE                  <2> 	out dx, al
 11073 00008CAD 86C4                <2> 	xchg al, ah
 11074 00008CAF 6642                <2> 	inc dx
 11075 00008CB1 EE                  <2> 	out dx, al ;send address in NIC memory
 11076 00008CB2 8B15[198D0000]      <2> 	mov edx, [.basenicaddr]
 11077 00008CB8 B010                <2> 	mov al, .CR.RD1
 11078 00008CBA 0C02                <2> 	or al, .CR.STA
 11079 00008CBC EE                  <2> 	out dx, al ;set RD and STA
 11080 00008CBD 89CB                <2> 	mov ebx, ecx ;save length in ebx
 11081 00008CBF D1E9                <2> 	shr ecx, 1
 11082 00008CC1 8B15[198D0000]      <2> 	mov edx, [.basenicaddr]
 11083 00008CC7 6681C21000          <2> 	add dx, 0x10
 11084 00008CCC F3666F              <2> 	rep outsw ;Send the packet data
 11085 00008CCF 8B15[198D0000]      <2> 	mov edx, [.basenicaddr]
 11086 00008CD5 6681C20700          <2> 	add dx, .ISR
 11087                              <2> .chkcopylp:
 11088 00008CDA B440                <2> 	mov ah, .ISR.RDC
 11089 00008CDC EC                  <2> 	in al, dx
 11090 00008CDD 20C4                <2> 	and ah, al
 11091 00008CDF 80FC40              <2> 	cmp ah, 0x40
 11092 00008CE2 75F6                <2> 	jne .chkcopylp	
 11093 00008CE4 8B15[198D0000]      <2> 	mov edx, [.basenicaddr]
 11094 00008CEA 6681C20400          <2> 	add dx, 4
 11095 00008CEF A0[348D0000]        <2> 	mov al, [.pagestart]
 11096 00008CF4 EE                  <2> 	out dx, al ;send start address in pages
 11097 00008CF5 8B15[198D0000]      <2> 	mov edx, [.basenicaddr]
 11098 00008CFB 81C205000000        <2> 	add edx, 0x5
 11099 00008D01 89D8                <2> 	mov eax, ebx
 11100 00008D03 EE                  <2> 	out dx, al
 11101 00008D04 86C4                <2> 	xchg al, ah
 11102 00008D06 6642                <2> 	inc dx
 11103 00008D08 EE                  <2> 	out dx, al ;send length
 11104 00008D09 8B15[198D0000]      <2> 	mov edx, [.basenicaddr]
 11105 00008D0F B020                <2> 	mov al, 0x20
 11106 00008D11 0C04                <2> 	or al, 4
 11107 00008D13 0C02                <2> 	or al, 2
 11108 00008D15 EE                  <2> 	out dx, al ;set RD2, TXP, and STA
 11109 00008D16 31DB                <2> 	xor ebx, ebx
 11110 00008D18 C3                  <2> 	ret
 11111 00008D19 00000000            <2> .basenicaddr dd 0
 11112 00008D1D 00                  <2> .nicconfig db 0
 11113 00008D1E 4E45323030302000    <2> .name db "NE2000 ",0
 11114 00008D26 496E697469616C697A- <2> .initmsg db "Initialized.",10,0
 11115 00008D2F 65642E0A00          <2>
 11116                              <2> align 2, nop
 11117 00008D34 0000                <2> .pagestart dw 0
 11118 00008D36 0000                <2> .pageend dw 0
 11119 00008D38 00000000            <2> .ringstart dd 0
 11120 00008D3C 00000000            <2> .ringend dd 0
 11121 00008D40 000000000000        <2> .mac db 0,0,0,0,0,0
 11122 00008D46 00<rept>            <2> .rom times 16 db 0
 11123                              <2> 
 11124                              <2> .end:
 11125                              <1> %endif
 11126                              <1> %ifdef i8254x.included
 11127                              <1> 	%include "source/drivers/network/i8254x.asm"
 11128                              <2> ;Intel 8254x NIC DRIVER
 11129                              <2> i8254x:
 11130 00008D56 E805000000          <2> 	call .init
 11131 00008D5B E980020000          <2> 	jmp .end
 11132                              <2> 
 11133                              <2> ;REGISTERS
 11134                              <2> .EEC equ 0x10
 11135                              <2> .EERD equ 0x14
 11136                              <2> .TCTL equ 0x400
 11137                              <2> .TIPG equ 0x410
 11138                              <2> .TDBAL equ 0x3800
 11139                              <2> .TDBAH equ 0x3804
 11140                              <2> .TDLEN equ 0x3808
 11141                              <2> .TDH equ 0x3810
 11142                              <2> .TDT equ 0x3818
 11143                              <2> .RAL equ 0x5400
 11144                              <2> .RAH equ 0x5404
 11145                              <2> ;CODE
 11146                              <2> .init:	;should find card, get mac, and initialize card
 11147 00008D60 31C0                <2> 	xor eax, eax
 11148 00008D62 A2[22620000]        <2> 	mov [pcifunction], al
 11149 00008D67 A2[20620000]        <2> 	mov [pcibus], al
 11150 00008D6C A2[21620000]        <2> 	mov [pcidevice], al
 11151 00008D71 B002                <2> 	mov al, 0x02 ;type code
 11152 00008D73 A2[B1620000]        <2> 	mov [pcitype], al
 11153 00008D78 B886800010          <2> 	mov eax, 0x10008086
 11154 00008D7D A3[25620000]        <2> 	mov [pcidevid], eax
 11155 00008D82 BBFFFF00FE          <2> 	mov ebx, 0xFE00FFFF
 11156 00008D87 891D[29620000]      <2> 	mov [pcidevidmask], ebx
 11157 00008D8D E89BD4FFFF          <2> 	call getpcimem
 11158 00008D92 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 11159 00008D98 7501                <2> 	jne .initnic
 11160 00008D9A C3                  <2> 	ret
 11161                              <2> .initnic:
 11162 00008D9B 8915[358F0000]      <2> 	mov [.basenicaddr], edx
 11163 00008DA1 89D1                <2> 	mov ecx, edx
 11164 00008DA3 E89CA2FFFF          <2> 	call showhex	;for debugging, please remove
 11165 00008DA8 BE[94BC0100]        <2> 	mov esi, rbuffstart
 11166 00008DAD B900200000          <2> 	mov ecx, 8192
 11167 00008DB2 31C0                <2> 	xor eax, eax
 11168                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 11169 00008DB4 8806                <2> 	mov [esi], al
 11170 00008DB6 46                  <2> 	inc esi
 11171 00008DB7 6649                <2> 	dec cx
 11172 00008DB9 6681F90000          <2> 	cmp cx, 0
 11173 00008DBE 75F4                <2> 	jne .clearrbuff
 11174                              <2> .findmac:
 11175 00008DC0 8B1D[358F0000]      <2> 	mov ebx, [.basenicaddr]
 11176                              <2> 	; Setup Control Register
 11177 00008DC6 B861030000          <2> 	mov eax, 0x361
 11178 00008DCB 8903                <2> 	mov [ebx], eax
 11179                              <2> 	; Setup Transmission Descriptors
 11180 00008DCD BF[608F0000]        <2> 	mov edi, .tdesc
 11181 00008DD2 A1[3E020000]        <2> 	mov eax, [basecache]
 11182 00008DD7 C1E004              <2> 	shl eax, 4
 11183 00008DDA 01F8                <2> 	add eax, edi
 11184 00008DDC 898300380000        <2> 	mov [ebx + .TDBAL], eax
 11185 00008DE2 31C0                <2> 	xor eax, eax
 11186 00008DE4 898310380000        <2> 	mov [ebx + .TDH], eax
 11187 00008DEA 898318380000        <2> 	mov [ebx + .TDT], eax
 11188 00008DF0 898304380000        <2> 	mov [ebx + .TDBAH], eax
 11189 00008DF6 66B88000            <2> 	mov ax, 128
 11190 00008DFA 898308380000        <2> 	mov [ebx + .TDLEN], eax
 11191 00008E00 B80A010401          <2> 	mov eax, 0x104010A
 11192 00008E05 898300040000        <2> 	mov [ebx + .TCTL], eax	;turn on transmission, set up other registers
 11193 00008E0B B80A285000          <2> 	mov eax, 0x50280A
 11194 00008E10 898310040000        <2> 	mov [ebx + .TIPG], eax	;setup TIPG
 11195                              <2> 	;Setup Receive Registers
 11196 00008E16 BF[3A8F0000]        <2> 	mov edi, .mac
 11197 00008E1B 81C300540000        <2> 	add ebx, .RAL
 11198 00008E21 31D2                <2> 	xor edx, edx
 11199 00008E23 B903000000          <2> 	mov ecx, 3
 11200                              <2> .macloop:
 11201 00008E28 E8BC000000          <2> 	call .eepromread
 11202 00008E2D 668907              <2> 	mov [edi], ax
 11203 00008E30 668903              <2> 	mov [ebx], ax
 11204 00008E33 42                  <2> 	inc edx
 11205 00008E34 81C302000000        <2> 	add ebx, 2
 11206 00008E3A 81C702000000        <2> 	add edi, 2
 11207 00008E40 E2E6                <2> 	loop .macloop
 11208 00008E42 66B80080            <2> 	mov ax, 0x8000
 11209 00008E46 668903              <2> 	mov [ebx], ax	;set address valid bit
 11210                              <2> 
 11211 00008E49 B9[3A8F0000]        <2> 	mov ecx, .mac
 11212 00008E4E E859020000          <2> 	call showmac
 11213 00008E53 BE[408F0000]        <2> 	mov esi, .name
 11214 00008E58 E8FD8EFFFF          <2> 	call print
 11215 00008E5D BE[488F0000]        <2> 	mov esi, .initmsg
 11216 00008E62 E8F38EFFFF          <2> 	call print
 11217 00008E67 C605[398F0000]01    <2> 	mov byte [.nicconfig], 1
 11218 00008E6E 31DB                <2> 	xor ebx, ebx
 11219 00008E70 C3                  <2> 	ret
 11220                              <2> 	
 11221                              <2> .sendpacket:
 11222 00008E71 803D[398F0000]00    <2> 	cmp byte [.nicconfig], 0
 11223 00008E78 7512                <2> 	jne .sendit
 11224 00008E7A 56                  <2> 	push esi
 11225 00008E7B 57                  <2> 	push edi
 11226 00008E7C E8DFFEFFFF          <2> 	call .init
 11227 00008E81 5F                  <2> 	pop edi
 11228 00008E82 5E                  <2> 	pop esi
 11229 00008E83 81FB00000000        <2> 	cmp ebx, 0
 11230 00008E89 7401                <2> 	je .sendit
 11231 00008E8B C3                  <2> 	ret
 11232                              <2> .sendit:	;packet start in edi, packet end in esi
 11233 00008E8C 8B0D[3A8F0000]      <2> 	mov ecx, [.mac]
 11234 00008E92 894F06              <2> 	mov [edi + 6], ecx
 11235 00008E95 668B0D[3E8F0000]    <2> 	mov cx, [.mac + 4]
 11236 00008E9C 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 11237 00008EA0 8B1D[358F0000]      <2> 	mov ebx, [.basenicaddr]
 11238 00008EA6 29FE                <2> 	sub esi, edi
 11239 00008EA8 A1[3E020000]        <2> 	mov eax, [basecache]
 11240 00008EAD C1E004              <2> 	shl eax, 4
 11241 00008EB0 01F8                <2> 	add eax, edi	;ALWAYS ADD THE VIRTUAL MEMORY OFFSET!
 11242 00008EB2 A3[608F0000]        <2> 	mov [.tdesc], eax	;Low Address
 11243 00008EB7 8935[688F0000]      <2> 	mov [.tdesc + 8], esi	;Length
 11244 00008EBD B8000B0000          <2> 	mov eax, 0xB00
 11245 00008EC2 A3[6A8F0000]        <2> 	mov [.tdesc + 10], eax	;Command
 11246 00008EC7 B810000000          <2> 	mov eax, 16
 11247 00008ECC 898318380000        <2> 	mov [ebx + .TDT], eax	;Trail of TDESC ring buffer
 11248                              <2> .checksta:
 11249 00008ED2 8B0D[6C8F0000]      <2> 	mov ecx, [.tdesc + 12]
 11250 00008ED8 81E101000000        <2> 	and ecx, 1
 11251 00008EDE 81F900000000        <2> 	cmp ecx, 0
 11252 00008EE4 74EC                <2> 	je .checksta
 11253 00008EE6 31DB                <2> 	xor ebx, ebx
 11254 00008EE8 C3                  <2> 	ret
 11255                              <2> 	
 11256                              <2> .eepromread:	;location in EEPROM in edx (actually just dl)
 11257 00008EE9 8B35[358F0000]      <2> 	mov esi, [.basenicaddr]
 11258 00008EEF 8B4610              <2> 	mov eax, [esi + .EEC]
 11259 00008EF2 0D40000000          <2> 	or eax, 1000000b
 11260 00008EF7 894610              <2> 	mov [esi + .EEC], eax	;turn software access on
 11261                              <2> .waiteeprom:
 11262 00008EFA 8B4610              <2> 	mov eax, [esi + .EEC]
 11263 00008EFD 2580000000          <2> 	and eax, 10000000b
 11264 00008F02 3D80000000          <2> 	cmp eax, 10000000b
 11265 00008F07 75F1                <2> 	jne .waiteeprom
 11266 00008F09 8B4614              <2> 	mov eax, [esi + .EERD]
 11267 00008F0C 31C0                <2> 	xor eax, eax
 11268 00008F0E 88D4                <2> 	mov ah, dl 	;eeprom address
 11269 00008F10 0C01                <2> 	or al, 1	;start read
 11270 00008F12 894614              <2> 	mov [esi + .EERD], eax
 11271                              <2> .waiteepromread:
 11272 00008F15 8B4614              <2> 	mov eax, [esi + .EERD]
 11273 00008F18 2510000000          <2> 	and eax, 10000b
 11274 00008F1D 3D10000000          <2> 	cmp eax, 10000b
 11275 00008F22 75F1                <2> 	jne .waiteepromread
 11276 00008F24 8B4614              <2> 	mov eax, [esi + .EERD]
 11277 00008F27 668B4610            <2> 	mov ax, [esi + .EEC]
 11278 00008F2B 24BF                <2> 	and al, 10111111b
 11279 00008F2D 66894610            <2> 	mov [esi + .EEC], ax	;turn software access off
 11280 00008F31 C1E810              <2> 	shr eax, 16	;AX has the requested word
 11281 00008F34 C3                  <2> 	ret
 11282                              <2> 
 11283 00008F35 00000000            <2> .basenicaddr dd 0
 11284 00008F39 00                  <2> .nicconfig db 0
 11285 00008F3A 000000000000        <2> .mac db 0,0,0,0,0,0
 11286 00008F40 4938323534582000    <2> .name db "I8254X ",0
 11287 00008F48 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 11288 00008F51 65640A00            <2>
 11289 00008F55 00<rept>            <2> align 16, db 0
 11290                              <2> .tdesc:
 11291 00008F60 00000000            <2> 	dd 0	;Address Low = 0
 11292 00008F64 00000000            <2> 	dd 0	;Address High = 4
 11293 00008F68 0000                <2> 	dw 0	;Length = 8
 11294 00008F6A 00                  <2> 	db 0	;CSO = 10
 11295 00008F6B 00                  <2> 	db 0	;CMD = 11
 11296 00008F6C 00                  <2> 	db 0	;STA, RSV = 12
 11297 00008F6D 00                  <2> 	db 0	;CSS = 13
 11298 00008F6E 0000                <2> 	dw 0	;Special = 14
 11299 00008F70 00<rept>            <2> times (128-16) db 0
 11300                              <2> .end:
 11301                              <1> %endif
 11302 00008FE0 C3                  <1> 	ret
 11303                              <1> 
 11304                              <1> sendpacket: ;packet start in edi, end in esi
 11305                              <1> 	%ifdef rtl8139.included
 11306 00008FE1 57                  <1> 		push edi
 11307 00008FE2 56                  <1> 		push esi
 11308 00008FE3 E87FF5FFFF          <1> 		call rtl8139.sendpacket
 11309 00008FE8 5E                  <1> 		pop esi
 11310 00008FE9 5F                  <1> 		pop edi
 11311                              <1> 	%endif
 11312                              <1> 	%ifdef rtl8169.included
 11313 00008FEA 57                  <1> 		push edi
 11314 00008FEB 56                  <1> 		push esi
 11315 00008FEC E8A1F7FFFF          <1> 		call rtl8169.sendpacket
 11316 00008FF1 5E                  <1> 		pop esi
 11317 00008FF2 5F                  <1> 		pop edi
 11318                              <1> 	%endif
 11319                              <1> 	%ifdef ne2000.included
 11320 00008FF3 57                  <1> 		push edi
 11321 00008FF4 56                  <1> 		push esi
 11322 00008FF5 E832FCFFFF          <1> 		call ne2000.sendpacket
 11323 00008FFA 5E                  <1> 		pop esi
 11324 00008FFB 5F                  <1> 		pop edi
 11325                              <1> 	%endif
 11326                              <1> 	%ifdef i8254x.included
 11327 00008FFC E870FEFFFF          <1> 		call i8254x.sendpacket
 11328                              <1> 	%endif
 11329 00009001 C3                  <1> 	ret
 11330                              <1> 
 11331                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
 11332 00009002 31C0                <1> 	xor eax, eax
 11333 00009004 31DB                <1> 	xor ebx, ebx
 11334 00009006 31C9                <1> 	xor ecx, ecx
 11335                              <1> .lp:
 11336 00009008 8A07                <1> 	mov al, [edi]
 11337 0000900A 8A6701              <1> 	mov ah, [edi + 1]
 11338 0000900D 01C3                <1> 	add ebx, eax
 11339 0000900F 81C702000000        <1> 	add edi, 2
 11340 00009015 39F7                <1> 	cmp edi, esi
 11341 00009017 72EF                <1> 	jb .lp
 11342 00009019 66B9FFFF            <1> 	mov cx, 0xFFFF
 11343 0000901D 6689D8              <1> 	mov ax, bx
 11344 00009020 C1EB10              <1> 	shr ebx, 16
 11345 00009023 6601D8              <1> 	add ax, bx
 11346 00009026 6629C1              <1> 	sub cx, ax
 11347 00009029 C3                  <1> 	ret
 11348                              <1> 	
 11349                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
 11350 0000902A 31DB                <1> 	xor ebx, ebx
 11351 0000902C 31C9                <1> 	xor ecx, ecx
 11352 0000902E 31D2                <1> 	xor edx, edx
 11353                              <1> .mlp:
 11354 00009030 89F7                <1> 	mov edi, esi
 11355 00009032 4F                  <1> 	dec edi
 11356                              <1> .lp:
 11357 00009033 47                  <1> 	inc edi
 11358 00009034 8A07                <1> 	mov al, [edi]
 11359 00009036 3C20                <1> 	cmp al, " "
 11360 00009038 7408                <1> 	je .dnlp
 11361 0000903A 3C00                <1> 	cmp al, 0
 11362 0000903C 7404                <1> 	je .dnlp
 11363 0000903E 3C2E                <1> 	cmp al, "."
 11364 00009040 75F1                <1> 	jne .lp
 11365                              <1> .dnlp:
 11366 00009042 30C0                <1> 	xor al, al
 11367 00009044 8807                <1> 	mov [edi], al
 11368 00009046 53                  <1> 	push ebx
 11369 00009047 56                  <1> 	push esi
 11370 00009048 57                  <1> 	push edi
 11371 00009049 31FF                <1> 	xor edi, edi
 11372 0000904B E8A0A1FFFF          <1> 	call cnvrttxt
 11373 00009050 5E                  <1> 	pop esi
 11374 00009051 5F                  <1> 	pop edi ;i intentionally switch them
 11375 00009052 5B                  <1> 	pop ebx
 11376 00009053 46                  <1> 	inc esi
 11377 00009054 BF[6C900000]        <1> 	mov edi, ipstr
 11378 00009059 880C1F              <1> 	mov [edi + ebx], cl
 11379 0000905C 43                  <1> 	inc ebx
 11380 0000905D 81FB04000000        <1> 	cmp ebx, 4
 11381 00009063 72CB                <1> 	jb .mlp
 11382 00009065 8B0D[6C900000]      <1> 	mov ecx, [ipstr]
 11383 0000906B C3                  <1> 	ret
 11384 0000906C 00000000            <1> ipstr dd 0
 11385                              <1> showip: 	;put the ip address in ecx
 11386 00009070 89C8                <1> 	mov eax, ecx
 11387 00009072 30DB                <1> 	xor bl, bl
 11388                              <1> .lp:
 11389 00009074 3C00                <1> 	cmp al, 0
 11390 00009076 750B                <1> 	jne .nozeroprint
 11391 00009078 B030                <1> 	mov al, "0"
 11392 0000907A 50                  <1> 	push eax
 11393 0000907B E81E92FFFF          <1> 	call prcharq
 11394 00009080 58                  <1> 	pop eax
 11395 00009081 30C0                <1> 	xor al, al
 11396                              <1> .nozeroprint:
 11397 00009083 31C9                <1> 	xor ecx, ecx
 11398 00009085 88C1                <1> 	mov cl, al
 11399 00009087 E882A0FFFF          <1> 	call showdec
 11400 0000908C C1E808              <1> 	shr eax, 8
 11401 0000908F FEC3                <1> 	inc bl
 11402 00009091 80FB04              <1> 	cmp bl, 4
 11403 00009094 7312                <1> 	jae .done
 11404 00009096 50                  <1> 	push eax
 11405 00009097 6653                <1> 	push bx
 11406 00009099 BE[A9900000]        <1> 	mov esi, .dot
 11407 0000909E E8B78CFFFF          <1> 	call print
 11408 000090A3 665B                <1> 	pop bx
 11409 000090A5 58                  <1> 	pop eax
 11410 000090A6 EBCC                <1> 	jmp .lp
 11411                              <1> .done:
 11412 000090A8 C3                  <1> 	ret
 11413 000090A9 082E00              <1> .dot db 8,".",0
 11414                              <1> showmac:	;mac begins in [ecx]
 11415 000090AC BE[FC900000]        <1> 	mov esi, macprint
 11416 000090B1 89CF                <1> 	mov edi, ecx
 11417 000090B3 81C106000000        <1> 	add ecx, 6
 11418                              <1> showmacloop:
 11419 000090B9 8A07                <1> 	mov al, [edi]
 11420 000090BB 8A27                <1> 	mov ah, [edi]
 11421 000090BD C0E804              <1> 	shr al, 4
 11422 000090C0 C0E404              <1> 	shl ah, 4
 11423 000090C3 C0EC04              <1> 	shr ah, 4
 11424 000090C6 0430                <1> 	add al, 48
 11425 000090C8 3C39                <1> 	cmp al, "9"
 11426 000090CA 7606                <1> 	jbe .goodal
 11427 000090CC 2C30                <1> 	sub al, 48
 11428 000090CE 2C0A                <1> 	sub al, 0xA
 11429 000090D0 0441                <1> 	add al, "A"
 11430                              <1> .goodal:
 11431 000090D2 80C430              <1> 	add ah, 48
 11432 000090D5 80FC39              <1> 	cmp ah, "9"
 11433 000090D8 7609                <1> 	jbe .goodah
 11434 000090DA 80EC30              <1> 	sub ah, 48
 11435 000090DD 80EC0A              <1> 	sub ah, 0xA
 11436 000090E0 80C441              <1> 	add ah, "A"
 11437                              <1> .goodah:
 11438 000090E3 668906              <1> 	mov [esi], ax
 11439 000090E6 81C603000000        <1> 	add esi, 3
 11440 000090EC 47                  <1> 	inc edi
 11441 000090ED 39CF                <1> 	cmp edi, ecx
 11442 000090EF 72C8                <1> 	jb showmacloop
 11443 000090F1 BE[FC900000]        <1> 	mov esi, macprint
 11444 000090F6 E85F8CFFFF          <1> 	call print
 11445 000090FB C3                  <1> 	ret
 11446                              <1> 	
 11447 000090FC 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
 11448 00009105 30303A30303A303020- <1>
 11449 0000910E 00                  <1>
 11450 0000910F 00000000            <1> ethernetend dw 0,0
 11451 00009113 C0A80002            <1> sysip db 192,168,0,2
 11452 00009117 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
 11453                                  %endif
 11454                                      %include "source/data.asm"
 11455 0000911D 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
 11456 00009125 73687573683A2000    <1> 	notfound1 db "shush: ",0
 11457 0000912D 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
 11458 00009136 6E640A00            <1>
 11459 0000913A 757365726E616D653A- <1> 	userask db "username:",0
 11460 00009143 00                  <1>
 11461 00009144 70617373776F72643A- <1> 	pwdask	db	"password:",0
 11462 0000914D 00                  <1>
 11463 0000914E 40                  <1> 	computer db "@"
 11464                              <1> %ifdef io.serial
 11465                              <1> 	computername	db	"SollerOS.",io.serial," ",0
 11466                              <1> %else
 11467 0000914F 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
 11468 00009158 00                  <1>
 11469                              <1> %endif
 11470 00009159 5D242000            <1> 	endprompt db "]$ ",0
 11471 0000915D 0D                  <1> 	crlf 	db  13
 11472 0000915E 0A00                <1> 	line	db	10,0
 11473                              <1> 	userlst:
 11474 00009160 726F6F7400          <1> 			db "root",0
 11475 00009165 617765736F6D65706F- <1> 			db "awesomepower",0
 11476 0000916E 77657200            <1>
 11477 00009172 7573657200          <1> 			db "user",0
 11478 00009177 70617373776F726400  <1> 			db "password",0
 11479 00009180 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
 11480 00009182 00                  <1> 			db 0
 11481                              <1> 	userlstend:
 11482                              <1> 	
 11483                              <1> %ifdef io.serial
 11484                              <1> %else
 11485 00009182 <incbin>            <1> fonts:	incbin "source/precompiled/fonts.pak"
 11486                              <1> fontend:
 11487                              <1> %endif
 11488                              <1> osend:	;this is the end of the operating system's space on disk
 11489                                      %include "build/fileindex.asm"
 11490                              <1> diskfileindex:
 11491 0000A183 617267746573742E65- <1> db "argtest.elf",0
 11492 0000A18C 6C6600              <1>
 11493 0000A18F 52000000            <1> dd (f0-$$)/512
 11494 0000A193 06010000            <1> dd (f1-f0)/512
 11495 0000A197 6261636B67726F756E- <1> db "background.bmp",0
 11496 0000A1A0 642E626D7000        <1>
 11497 0000A1A6 58010000            <1> dd (f1-$$)/512
 11498 0000A1AA 01140000            <1> dd (f2-f1)/512
 11499 0000A1AE 626F6F742E736800    <1> db "boot.sh",0
 11500 0000A1B6 59150000            <1> dd (f2-$$)/512
 11501 0000A1BA 01000000            <1> dd (f3-f2)/512
 11502 0000A1BE 63686172746573742E- <1> db "chartest.elf",0
 11503 0000A1C7 656C6600            <1>
 11504 0000A1CB 5A150000            <1> dd (f3-$$)/512
 11505 0000A1CF 26010000            <1> dd (f4-f3)/512
 11506 0000A1D3 646F73746573742E63- <1> db "dostest.com",0
 11507 0000A1DC 6F6D00              <1>
 11508 0000A1DF 80160000            <1> dd (f4-$$)/512
 11509 0000A1E3 01000000            <1> dd (f5-f4)/512
 11510 0000A1E7 6578656300          <1> db "exec",0
 11511 0000A1EC 81160000            <1> dd (f5-$$)/512
 11512 0000A1F0 01000000            <1> dd (f6-f5)/512
 11513 0000A1F4 66696E616C636F756E- <1> db "finalcount.sn",0
 11514 0000A1FD 742E736E00          <1>
 11515 0000A202 82160000            <1> dd (f6-$$)/512
 11516 0000A206 01000000            <1> dd (f7-f6)/512
 11517 0000A20A 666F726B00          <1> db "fork",0
 11518 0000A20F 83160000            <1> dd (f7-$$)/512
 11519 0000A213 01000000            <1> dd (f8-f7)/512
 11520 0000A217 677261766974792E65- <1> db "gravity.elf",0
 11521 0000A220 6C6600              <1>
 11522 0000A223 84160000            <1> dd (f8-$$)/512
 11523 0000A227 E0000000            <1> dd (f9-f8)/512
 11524 0000A22B 6775697465737400    <1> db "guitest",0
 11525 0000A233 64170000            <1> dd (f9-$$)/512
 11526 0000A237 03000000            <1> dd (f10-f9)/512
 11527 0000A23B 68656C6C6F776F726C- <1> db "helloworld.elf",0
 11528 0000A244 642E656C6600        <1>
 11529 0000A24A 67170000            <1> dd (f10-$$)/512
 11530 0000A24E D6010000            <1> dd (f11-f10)/512
 11531 0000A252 696E7400            <1> db "int",0
 11532 0000A256 3D190000            <1> dd (f11-$$)/512
 11533 0000A25A 01000000            <1> dd (f12-f11)/512
 11534 0000A25E 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 11535 0000A267 2E736E00            <1>
 11536 0000A26B 3E190000            <1> dd (f12-$$)/512
 11537 0000A26F 01000000            <1> dd (f13-f12)/512
 11538 0000A273 6D6172696F2E736E00  <1> db "mario.sn",0
 11539 0000A27C 3F190000            <1> dd (f13-$$)/512
 11540 0000A280 01000000            <1> dd (f14-f13)/512
 11541 0000A284 70692E656C6600      <1> db "pi.elf",0
 11542 0000A28B 40190000            <1> dd (f14-$$)/512
 11543 0000A28F 1F010000            <1> dd (f15-f14)/512
 11544 0000A293 736F6C6C65726F732E- <1> db "solleros.bmp",0
 11545 0000A29C 626D7000            <1>
 11546 0000A2A0 5F1A0000            <1> dd (f15-$$)/512
 11547 0000A2A4 B0020000            <1> dd (f16-f15)/512
 11548 0000A2A8 736F6C6C65726F732E- <1> db "solleros.txt",0
 11549 0000A2B1 74787400            <1>
 11550 0000A2B5 0F1D0000            <1> dd (f16-$$)/512
 11551 0000A2B9 01000000            <1> dd (f17-f16)/512
 11552 0000A2BD 736F6E676F74696D65- <1> db "songotime.sn",0
 11553 0000A2C6 2E736E00            <1>
 11554 0000A2CA 101D0000            <1> dd (f17-$$)/512
 11555 0000A2CE 01000000            <1> dd (f18-f17)/512
 11556 0000A2D2 73736500            <1> db "sse",0
 11557 0000A2D6 111D0000            <1> dd (f18-$$)/512
 11558 0000A2DA 02000000            <1> dd (f19-f18)/512
 11559 0000A2DE 737464696F74657374- <1> db "stdiotest.elf",0
 11560 0000A2E7 2E656C6600          <1>
 11561 0000A2EC 131D0000            <1> dd (f19-$$)/512
 11562 0000A2F0 27010000            <1> dd (f20-f19)/512
 11563 0000A2F4 74656C7900          <1> db "tely",0
 11564 0000A2F9 3A1E0000            <1> dd (f20-$$)/512
 11565 0000A2FD 01000000            <1> dd (f21-f20)/512
 11566 0000A301 74696D65746573742E- <1> db "timetest.elf",0
 11567 0000A30A 656C6600            <1>
 11568 0000A30E 3B1E0000            <1> dd (f21-$$)/512
 11569 0000A312 04010000            <1> dd (f22-f21)/512
 11570 0000A316 7475746F7269616C2E- <1> db "tutorial.sh",0
 11571 0000A31F 736800              <1>
 11572 0000A322 3F1F0000            <1> dd (f22-$$)/512
 11573 0000A326 03000000            <1> dd (f23-f22)/512
 11574 0000A32A 756E667300          <1> db "unfs",0
 11575 0000A32F 421F0000            <1> dd (f23-$$)/512
 11576 0000A333 02000000            <1> dd (f24-f23)/512
 11577 0000A337 766963746F72792E77- <1> db "victory.wav",0
 11578 0000A340 617600              <1>
 11579 0000A343 441F0000            <1> dd (f24-$$)/512
 11580 0000A347 16000000            <1> dd (f25-f24)/512
 11581 0000A34B 5F696D672E62696E00  <1> db "_img.bin",0
 11582 0000A354 5A1F0000            <1> dd (f25-$$)/512
 11583 0000A358 D7020000            <1> dd (f26-f25)/512
 11584                              <1> enddiskfileindex:
 11585                              <1> 
 11586                                      %include "source/bss.asm"
 11587                              <1> align 4, nop
 11588                              <1> bssstart: equ $
 11589                              <1> guion equ bssstart
 11590                              <1> DriveNumber equ guion + 1
 11591                              <1> lbaad equ DriveNumber + 1
 11592                              <1> memlistbuf equ lbaad + 4
 11593                              <1> memlistend equ memlistbuf + 576
 11594                              <1> bsscopy equ memlistend
 11595                              <1> initialstack equ bsscopy
 11596                              <1> stackend equ initialstack + 4000
 11597                              <1> sigtable equ stackend + 96
 11598                              <1> fileindex: equ sigtable + 4
 11599                              <1> fileindexend: equ fileindex + 1024
 11600                              <1> previousstack equ fileindexend
 11601                              <1> lastfolderloc equ previousstack + 4
 11602                              <1> currentfolderloc equ lastfolderloc + 4
 11603                              <1> currentfolder equ currentfolderloc + 4
 11604                              <1> currentfolderend equ currentfolder + 512
 11605                              <1> uid equ currentfolderend
 11606                              <1> ranboot equ uid + 4
 11607                              <1> IFON equ ranboot + 1
 11608                              <1> IFTRUE equ IFON + 1
 11609                              <1> BATCHPOS equ IFTRUE + 100
 11610                              <1> BATCHISON equ BATCHPOS + 4
 11611                              <1> LOOPON equ BATCHISON + 1
 11612                              <1> LOOPPOS	equ LOOPON + 1
 11613                              <1> variables: equ LOOPPOS + 4
 11614                              <1> varend: equ variables + 4096
 11615                              <1> buftxt2: equ varend
 11616                              <1> buftxt: equ buftxt2 + 1024
 11617                              <1> buftxtend: equ buftxt + 1024
 11618                              <1> buf2: equ buftxtend
 11619                              <1> numbuf: equ buf2 + 20
 11620                              <1> %ifdef io.serial
 11621                              <1> 	lastcommandpos equ numbuf + 1
 11622                              <1> %else
 11623                              <1> 	%ifdef gui.included
 11624                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 11625                              <1> 		graphicstableend equ graphicstable + 200h
 11626                              <1> 		%ifdef gui.background
 11627                              <1> 			backgroundbuffer equ graphicstableend
 11628                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 11629                              <1> 			mousecolorbuf equ backgroundbufferend
 11630                              <1> 		%else
 11631                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 11632                              <1> 		%endif
 11633                              <1> 		mcolorend equ mousecolorbuf + 256
 11634                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 11635                              <1> 		videobufend	equ videobuf + 210*65*2
 11636                              <1> 		videobuf2 equ videobufend
 11637                              <1> 		videobuf2end equ videobuf2 + 210*65*2
 11638                              <1> 	%else
 11639                              <1> 		videobuf equ numbuf + 1
 11640                              <1> 		videobufend equ videobuf + 80*30*2
 11641                              <1> 		videobuf2 equ videobufend
 11642                              <1> 		videobuf2end equ videobuf2 + 80*30*2
 11643                              <1> 	%endif
 11644                              <1> 	lastcommandpos: equ videobuf2end
 11645                              <1> %endif
 11646                              <1> 	commandbufpos: equ lastcommandpos + 4
 11647                              <1> 	commandlistentries: equ commandbufpos + 4
 11648                              <1> 	commandsentered: equ commandlistentries + 4
 11649                              <1> 	commandbuf: equ commandsentered + 4
 11650                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 11651                              <1> %ifdef network.included
 11652                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 11653                              <1> 	rbuffend equ rbuffstart + 8212
 11654                              <1> %else
 11655                              <1> 	rbuffstart equ commandbufend
 11656                              <1> 	rbuffend equ commandbufend
 11657                              <1> %endif
 11658                              <1> %ifdef threads.included
 11659                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 11660                              <1> 	threadlistend: equ threadlist + 1024*4
 11661                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
 11662                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
 11663                              <1> 	bssend equ stack1 + 1024*1024
 11664                              <1> %else
 11665                              <1> 	bssend equ rbuffend
 11666                              <1> %endif
 11667                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 11668                                      %include "build/files.asm"
 11669 0000A35C 00<rept>            <1> align 512,db 0
 11670                              <1> f0:
 11671 0000A35C <incbin>            <1> incbin "included/argtest.elf"
 11672 0002AEF2 00<rept>            <1> align 512,db 0
 11673                              <1> f1:
 11674 0002AEF2 <incbin>            <1> incbin "included/background.bmp"
 11675 002AB046 00<rept>            <1> align 512,db 0
 11676                              <1> f2:
 11677 002AB046 <incbin>            <1> incbin "included/boot.sh"
 11678 002AB2FF 00<rept>            <1> align 512,db 0
 11679                              <1> f3:
 11680 002AB2FF <incbin>            <1> incbin "included/chartest.elf"
 11681 002CFEDB 00<rept>            <1> align 512,db 0
 11682                              <1> f4:
 11683 002CFEDB <incbin>            <1> incbin "included/dostest.com"
 11684 002D0131 00<rept>            <1> align 512,db 0
 11685                              <1> f5:
 11686 002D0131 <incbin>            <1> incbin "included/exec"
 11687 002D02E9 00<rept>            <1> align 512,db 0
 11688                              <1> f6:
 11689 002D02E9 <incbin>            <1> incbin "included/finalcount.sn"
 11690 002D0502 00<rept>            <1> align 512,db 0
 11691                              <1> f7:
 11692 002D0502 <incbin>            <1> incbin "included/fork"
 11693 002D0761 00<rept>            <1> align 512,db 0
 11694                              <1> f8:
 11695 002D0761 <incbin>            <1> incbin "included/gravity.elf"
 11696 002EC6C2 00<rept>            <1> align 512,db 0
 11697                              <1> f9:
 11698 002EC6C2 <incbin>            <1> incbin "included/guitest"
 11699 002ECC2E 00<rept>            <1> align 512,db 0
 11700                              <1> f10:
 11701 002ECC2E <incbin>            <1> incbin "included/helloworld.elf"
 11702 003279E3 00<rept>            <1> align 512,db 0
 11703                              <1> f11:
 11704 003279E3 <incbin>            <1> incbin "included/int"
 11705 00327BB2 00<rept>            <1> align 512,db 0
 11706                              <1> f12:
 11707 00327BB2 <incbin>            <1> incbin "included/lostwoods.sn"
 11708 00327C56 00<rept>            <1> align 512,db 0
 11709                              <1> f13:
 11710 00327C56 <incbin>            <1> incbin "included/mario.sn"
 11711 00327E3A 00<rept>            <1> align 512,db 0
 11712                              <1> f14:
 11713 00327E3A <incbin>            <1> incbin "included/pi.elf"
 11714 0034BD31 00<rept>            <1> align 512,db 0
 11715                              <1> f15:
 11716 0034BD31 <incbin>            <1> incbin "included/solleros.bmp"
 11717 003A1DE6 00<rept>            <1> align 512,db 0
 11718                              <1> f16:
 11719 003A1DE6 <incbin>            <1> incbin "included/solleros.txt"
 11720 003A1F74 00<rept>            <1> align 512,db 0
 11721                              <1> f17:
 11722 003A1F74 <incbin>            <1> incbin "included/songotime.sn"
 11723 003A204A 00<rept>            <1> align 512,db 0
 11724                              <1> f18:
 11725 003A204A <incbin>            <1> incbin "included/sse"
 11726 003A24A8 00<rept>            <1> align 512,db 0
 11727                              <1> f19:
 11728 003A24A8 <incbin>            <1> incbin "included/stdiotest.elf"
 11729 003C7243 00<rept>            <1> align 512,db 0
 11730                              <1> f20:
 11731 003C7243 <incbin>            <1> incbin "included/tely"
 11732 003C75C6 00<rept>            <1> align 512,db 0
 11733                              <1> f21:
 11734 003C75C6 <incbin>            <1> incbin "included/timetest.elf"
 11735 003E7C3D 00<rept>            <1> align 512,db 0
 11736                              <1> f22:
 11737 003E7C3D <incbin>            <1> incbin "included/tutorial.sh"
 11738 003E8352 00<rept>            <1> align 512,db 0
 11739                              <1> f23:
 11740 003E8352 <incbin>            <1> incbin "included/unfs"
 11741                              <1> align 512,db 0
 11742                              <1> f24:
 11743 003E8352 <incbin>            <1> incbin "included/victory.wav"
 11744 003EB348 00<rept>            <1> align 512,db 0
 11745                              <1> f25:
 11746 003EB348 <incbin>            <1> incbin "included/_img.bin"
 11747                              <1> align 512,db 0
 11748                              <1> f26:
