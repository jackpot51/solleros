     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define hardware.automatic
    29                              <1> ;Automatically load the sound and network drivers.
    30                              <1> 
    31                              <1> %define threads.included
    32                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    33                              <1> 
    34                              <1> %define exceptions.included
    35                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    36                              <1> 
    37                              <1> ;%define disk.protected
    38                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    39                              <1> 
    40                              <1> %define disk.real
    41                              <1> ;Use real mode for disk access-this gives greater compatibility
    42                              <1> 
    43                              <1> %define sound.included
    44                              <1> ;This includes the sound drivers
    45                              <1> 
    46                              <1> %define network.included
    47                              <1> ;This includes the network stack
    48                              <1> 
    49                              <1> ;%define rtl8169.included
    50                              <1> ;This includes the RTL8169 drivers
    51                              <1> 
    52                              <1> ;%define rtl8139.included
    53                              <1> ;This includes the RTL8139 drivers
    54                              <1> 
    55                              <1> ;%define ne2000.included
    56                              <1> ;This includes the ne2000 drivers
    57                              <1> 
    58                              <1> %define i8254x.included
    59                              <1> ;This includes the Intel 8254x drivers
    60                              <1> 
    61                              <1> ;%define sector.debug
    62                              <1> ;Dump the contents of the first sector of SollerOS
    63                              <1> 
    64                              <1> ;%define dos.compatible
    65                              <1> ;Make the kernel loadable by dos.
    66                              <1> 
    67                              <1> ;%define system.simple
    68                              <1> ;The smallest possible system, overrides all options
    69                              <1> 
    70                              <1> ;FIX DEPENDANCIES
    71                              <1> %ifdef system.simple
    72                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    73                              <1> 	%define UNDEFALL
    74                              <1> %endif
    75                              <1> %ifdef dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef UNDEFALL
    79                              <1> 	%undef io.serial
    80                              <1> 	%undef disk.real
    81                              <1> 	%undef gui.included
    82                              <1> 	%undef gui.alphablending
    83                              <1> 	%undef gui.background
    84                              <1> 	%undef terminal.vsync
    85                              <1> 	%undef hardware.automatic
    86                              <1> 	%undef threads.included
    87                              <1> 	%undef exceptions.included
    88                              <1> 	%undef disk.protected
    89                              <1> 	%undef sound.included
    90                              <1> 	%undef network.included
    91                              <1> 	%undef rtl8139.included
    92                              <1> 	%undef rtl8169.included
    93                              <1> 	%undef ne2000.included
    94                              <1> 	%undef i8254x.included
    95                              <1> 	%undef sector.debug
    96                              <1> 	%undef UNDEFALL
    97                              <1> %endif
    98                              <1> %ifdef system.simple
    99                              <1> 	%define io.serial "1"
   100                              <1> 	%define disk.real
   101                              <1> %endif
   102                              <1> %ifdef gui.included
   103                              <1> 	%undef io.serial
   104                              <1> %else
   105                              <1> 	%undef gui.alphablending
   106                              <1> 	%undef gui.background
   107                              <1> %endif
   108                              <1> %ifdef network.included
   109                              <1> %else
   110                              <1> 	%undef i8254x.included
   111                              <1> 	%undef ne2000.included
   112                              <1> 	%undef rtl8139.included
   113                              <1> 	%undef rtl8169.included
   114                              <1> %endif
   115                              <1> %ifdef disk.protected
   116                              <1> 	%undef disk.real
   117                              <1> %else
   118                              <1> 	%ifdef disk.real
   119                              <1> 	%else
   120                              <1> 		%define disk.none
   121                              <1> 	%endif
   122                              <1> %endif
   123                                  [ORG 0x100]
   124                                  	%include "source/signature.asm"
   125                              <1> sigjump:
   126 00000000 E91A00              <1> 	jmp signatureend
   127                              <1> signature:
   128 00000003 536F6C6C65724F53    <1> db "SollerOS" ;Operating system name
   129 0000000B 20416C706861204275- <1> db " Alpha Build ",0	;Soller OS development level
   130 00000014 696C642000          <1>
   131 00000019 00010000            <1> dd 256	;version number
   132                              <1> signatureend:
   133                                  [BITS 16]
   134                                      %include "source/boot.asm"
   135                              <1>     ; MENU.ASM
   136                              <1> boot:
   137 0000001D 8CC8                <1> 	mov ax, cs
   138 0000001F 8ED8                <1> 	mov ds, ax
   139 00000021 8EC0                <1> 	mov es, ax
   140 00000023 8ED0                <1> 	mov ss, ax
   141 00000025 880E[398C]          <1> 	mov [DriveNumber], cl
   142 00000029 668916[3A8C]        <1> 	mov [lbaad], edx
   143                              <1> %ifdef io.serial
   144                              <1> 	call getmemorysize
   145                              <1> 	mov si, serialmsg
   146                              <1> 	call printrm
   147                              <1> 	jmp pmode
   148                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
   149                              <1> %else
   150 0000002E E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   151 00000031 E95700              <1> 	jmp pmode
   152                              <1> %endif
   153                              <1> 	
   154                              <1> vgaset:
   155 00000034 B81200              <1> 	mov ax, 12h
   156 00000037 31DB                <1> 	xor bx, bx
   157 00000039 CD10                <1> 	int 10h
   158 0000003B C606[388C]00        <1> 	mov byte [guion], 0
   159 00000040 E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   160 00000043 C3                  <1> 	ret
   161                              <1> 
   162                              <1> getmemorysize:
   163 00000044 BF[3E8C]            <1> 	mov di, memlistbuf
   164 00000047 6631DB              <1> 	xor ebx, ebx
   165                              <1> getmemsizeloop:
   166 0000004A 66B820E80000        <1> 	mov eax, 0xE820
   167 00000050 66BA50414D53        <1> 	mov edx, 0x0534D4150
   168 00000056 66B918000000        <1> 	mov ecx, 24
   169 0000005C CD15                <1> 	int 0x15
   170 0000005E 81C71800            <1> 	add di, 24
   171 00000062 81FF[7E8E]          <1> 	cmp di, memlistend
   172 00000066 7309                <1> 	jae nomoregetmemsize
   173 00000068 6681FB00000000      <1> 	cmp ebx, 0
   174 0000006F 75D9                <1> 	jne getmemsizeloop
   175                              <1> nomoregetmemsize:
   176 00000071 81EF[3E8C]          <1> 	sub di, memlistbuf
   177 00000075 893E[7E8E]          <1> 	mov [memlistend], di
   178 00000079 C3                  <1> 	ret
   179                              <1> 	
   180                              <1> printrm:			; 'si' comes in with string address
   181 0000007A BB0700              <1>     mov bx,07		; write to display
   182 0000007D B40E                <1>     mov ah,0Eh		; screen function
   183 0000007F 8A04                <1>    .lp:    mov al,[si]         ; get next character
   184 00000081 3C00                <1>     cmp al,0		; look for terminator 
   185 00000083 7405                <1>     je .done		; zero byte at end of string
   186 00000085 CD10                <1>     int 10h		; write character to screen.    
   187 00000087 46                  <1> 	inc si	     	; move to next character
   188 00000088 EBF5                <1>     jmp .lp		; loop
   189 0000008A C3                  <1> .done: ret
   190                                      %include "source/pmode.asm"
   191                              <1> [BITS 16]
   192                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   193                              <1> ;	16-bit real mode
   194                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   195                              <1> 
   196                              <1> pmode:
   197 0000008B 6631C0              <1> 	xor eax, eax
   198 0000008E 6631DB              <1> 	xor ebx, ebx
   199 00000091 6631C9              <1> 	xor ecx, ecx
   200 00000094 6631D2              <1> 	xor edx, edx
   201 00000097 6631F6              <1> 	xor esi, esi
   202 0000009A 6631FF              <1> 	xor edi, edi
   203 0000009D BA9200              <1> 	mov dx, 0x92
   204 000000A0 EC                  <1> 	in al, dx	;;A20
   205 000000A1 0C02                <1> 	or al, 2
   206 000000A3 EE                  <1> 	out dx, al
   207 000000A4 8CCB                <1> 	mov bx,cs		; EBX=segment
   208 000000A6 66C1E304            <1> 	shl ebx,4		;	<< 4
   209 000000AA 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   210 000000AE A3[9203]            <1> 	mov [gdt2 + 2],ax
   211 000000B1 A3[9A03]            <1> 	mov [gdt3 + 2],ax
   212 000000B4 66C1E810            <1> 	shr eax,16
   213 000000B8 A2[9403]            <1> 	mov [gdt2 + 4],al
   214 000000BB A2[9C03]            <1> 	mov [gdt3 + 4],al
   215 000000BE 8826[9703]          <1> 	mov [gdt2 + 7],ah
   216 000000C2 8826[9F03]          <1> 	mov [gdt3 + 7],ah
   217                              <1> 
   218 000000C6 66B8[94900300]      <1> 	mov eax, initialstack
   219 000000CC 660306[4502]        <1> 	add eax, [newcodecache]
   220 000000D1 A3[8A03]            <1> 	mov [gdts + 2],ax
   221 000000D4 66C1E810            <1> 	shr eax, 16
   222 000000D8 A2[8C03]            <1> 	mov [gdts + 4],al
   223 000000DB 8826[8F03]          <1> 	mov [gdts + 7], ah
   224                              <1> 	
   225 000000DF 66A1[4502]          <1> 	mov eax, [newcodecache]
   226 000000E3 A3[A203]            <1> 	mov [gdt4 + 2],ax
   227 000000E6 A3[AA03]            <1> 	mov [gdt5 + 2],ax
   228 000000E9 A3[B203]            <1> 	mov [gdtv8086 + 2], ax
   229 000000EC A3[BA03]            <1> 	mov [gdtv80862 + 2], ax
   230 000000EF 66C1E810            <1> 	shr eax,16
   231 000000F3 A2[A403]            <1> 	mov [gdt4 + 4],al
   232 000000F6 A2[AC03]            <1> 	mov [gdt5 + 4],al
   233 000000F9 A2[B403]            <1> 	mov [gdtv8086 + 4],al
   234 000000FC A2[BC03]            <1> 	mov [gdtv80862 + 4],al
   235 000000FF 8826[A703]          <1> 	mov [gdt4 + 7],ah
   236 00000103 8826[AF03]          <1> 	mov [gdt5 + 7],ah
   237 00000107 8826[B703]          <1> 	mov [gdtv8086 + 7],ah
   238 0000010B 8826[BF03]          <1> 	mov [gdtv80862 + 7],ah
   239                              <1> 	
   240 0000010F 66B800004000        <1> 	mov eax, dosprogloc
   241 00000115 660306[4502]        <1> 	add eax, [newcodecache]
   242 0000011A A3[C203]            <1> 	mov [gdtdos + 2],ax
   243 0000011D A3[CA03]            <1> 	mov [gdtdos2 + 2],ax
   244 00000120 66C1E810            <1> 	shr eax,16
   245 00000124 A2[C403]            <1> 	mov [gdtdos + 4],al
   246 00000127 A2[CC03]            <1> 	mov [gdtdos2 + 4],al
   247 0000012A 8826[C703]          <1> 	mov [gdtdos + 7],ah
   248 0000012E 8826[CF03]          <1> 	mov [gdtdos2 + 7],ah
   249                              <1> 	
   250                              <1> ; fix up gdt and idt
   251 00000132 67668D83[78030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   252 0000013A 66A3[6E03]          <1> 	mov [gdtr + 2],eax
   253 0000013E 67668D83[D0030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   254 00000146 66A3[7403]          <1> 	mov [idtr + 2],eax
   255 0000014A FA                  <1> 	cli
   256 0000014B 0F0116[6C03]        <1> 	lgdt [gdtr]
   257 00000150 0F011E[7203]        <1> 	lidt [idtr]
   258 00000155 6631DB              <1> 	xor ebx, ebx
   259 00000158 8CDB                <1> 	mov bx, ds
   260 0000015A 66891E[4102]        <1> 	mov [basecache], ebx
   261 0000015F 0F20C0              <1> 	mov eax,cr0
   262 00000162 0C01                <1> 	or al,1
   263 00000164 0F22C0              <1> 	mov cr0,eax
   264 00000167 EA[6C01]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   265                              <1> [BITS 32]
   266                              <1> do_pm:
   267 0000016C 31C0                <1> 	xor eax, eax
   268 0000016E 66B82000            <1> 	mov ax, SYS_DATA_SEL
   269 00000172 8ED8                <1> 	mov ds, ax
   270 00000174 8EC0                <1> 	mov es, ax
   271 00000176 8EE0                <1> 	mov fs, ax
   272 00000178 66B83000            <1> 	mov ax, NEW_DATA_SEL
   273 0000017C 8EE8                <1> 	mov gs, ax
   274                              <1> 	
   275                              <1> copykernel:
   276 0000017E 648B06              <1> 	mov eax, [fs:esi]
   277 00000181 658906              <1> 	mov [gs:esi], eax
   278 00000184 81C604000000        <1> 	add esi, 4
   279 0000018A 81FE[94900300]      <1> 	cmp esi, bsscopy
   280 00000190 72EC                <1> 	jb copykernel
   281 00000192 EA[99010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   282                              <1> 	
   283                              <1> done_copy:
   284 00000199 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   285 0000019D 8ED8                <1> 	mov ds, ax
   286 0000019F 8EC0                <1> 	mov es, ax
   287 000001A1 8EE0                <1> 	mov fs, ax
   288                              <1> 	;mov ax, STACK_SEL
   289 000001A3 8ED0                <1> 	mov ss, ax
   290 000001A5 BC[34A00300]        <1> 	mov esp, stackend
   291 000001AA 66B82000            <1> 	mov ax, SYS_DATA_SEL
   292 000001AE 8EE8                <1> 	mov gs, ax
   293                              <1> 	
   294 000001B0 E847630000          <1> 	call initialize	;initialize drivers
   295                              <1> 	
   296 000001B5 A1[45020000]        <1> 	mov eax, [newcodecache]
   297 000001BA C1E804              <1> 	shr eax, 4
   298 000001BD A3[41020000]        <1> 	mov [basecache], eax
   299                              <1> 	
   300 000001C2 BE[E2B01500]        <1> 	mov esi, bssend
   301 000001C7 31C0                <1> 	xor eax, eax
   302                              <1> clearkernelbuffers:
   303 000001C9 8906                <1> 	mov [esi], eax
   304 000001CB 81EE04000000        <1> 	sub esi, 4
   305 000001D1 81FE[94900300]      <1> 	cmp esi, bsscopy
   306 000001D7 77F0                <1> 	ja clearkernelbuffers
   307 000001D9 FB                  <1> 	sti
   308                              <1> 
   309                              <1> getmemoryspace:
   310 000001DA BE[3E8C0000]        <1> 	mov esi, memlistbuf
   311 000001DF 31FF                <1> 	xor edi, edi
   312 000001E1 668B3D[7E8E0000]    <1> 	mov di, [memlistend]
   313 000001E8 01F7                <1> 	add edi, esi
   314 000001EA 31C0                <1> 	xor eax, eax
   315                              <1> memoryspaceaddition:
   316 000001EC 39FE                <1> 	cmp esi, edi
   317 000001EE 7322                <1> 	jae finishedmemspacecalc
   318 000001F0 81C608000000        <1> 	add esi, 8
   319 000001F6 8B0E                <1> 	mov ecx, [esi]
   320 000001F8 81C608000000        <1> 	add esi, 8
   321 000001FE 8B1E                <1> 	mov ebx, [esi]
   322 00000200 81C608000000        <1> 	add esi, 8
   323 00000206 81FB01000000        <1> 	cmp ebx, 1
   324 0000020C 75DE                <1> 	jne memoryspaceaddition
   325 0000020E 01C8                <1> 	add eax, ecx
   326 00000210 EBDA                <1> 	jmp memoryspaceaddition
   327                              <1> finishedmemspacecalc:
   328 00000212 A3[56020000]        <1> 	mov [memoryspace], eax
   329                              <1> %ifdef gui.included
   330 00000217 803D[388C0000]00    <1> 	cmp byte [guion], 0
   331 0000021E 741C                <1> 	je normalstartup
   332 00000220 8B1D[41020000]      <1> 	mov ebx, [basecache]
   333 00000226 C1E304              <1> 	shl ebx, 4
   334 00000229 8B3D[AE580000]      <1> 	mov edi, [physbaseptr]
   335 0000022F 29DF                <1> 	sub edi, ebx
   336 00000231 893D[AE580000]      <1> 	mov [physbaseptr], edi
   337 00000237 E98B680000          <1> 	jmp guiboot
   338                              <1> %endif
   339                              <1> normalstartup:
   340 0000023C E9DF280000          <1> 	jmp os
   341                              <1> 	
   342 00000241 00000000            <1> basecache dd 0
   343 00000245 00001000            <1> newcodecache dd 0x100000
   344                              <1> 
   345 00000249 00                  <1> testingcpuspeed db 0
   346 0000024A 00000000            <1> cpuspeedperint dd 0
   347 0000024E 0000000000000000    <1> cpuclocksperint dd 0,0
   348 00000256 00000000            <1> memoryspace dd 0
   349 0000025A 7D0A                <1> pitdiv dw 2685
   350 0000025C 2E562200            <1> timeinterval dd 2250286
   351 00000260 00000000            <1> timeseconds dd 0
   352 00000264 00000000            <1> timenanoseconds dd 0
   353 00000268 00                  <1> soundon db 0
   354 00000269 0000                <1> soundrepititions dw 0
   355 0000026B 00000000            <1> soundpos dd 0
   356 0000026F 00000000            <1> soundendpos dd 0
   357                              <1> 
   358                              <1> cpuspeedend:
   359 00000273 C605[49020000]00    <1> 	mov byte [testingcpuspeed], 0
   360 0000027A A3[4A020000]        <1> 	mov [cpuspeedperint], eax
   361 0000027F B8[6F4F0000]        <1> 	mov eax, cpuspeedloopend
   362 00000284 890424              <1> 	mov [esp], eax
   363 00000287 E9D0000000          <1> 	jmp handled
   364                              <1> 
   365                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   366                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   367                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   368                              <1> 
   369                              <1> pitinterrupt: ;this controls threading
   370 0000028C FA                  <1> 	cli
   371 0000028D 803D[49020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   372 00000294 74DD                <1> 	je cpuspeedend
   373                              <1> 		
   374 00000296 E89A000000          <1> 	call timekeeper ;this updates the internal time
   375                              <1> 	
   376 0000029B 803D[68020000]01    <1> 	cmp byte [soundon], 1
   377 000002A2 0F84EA590000        <1> 	je near PCSpeakerRAW
   378                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   379                              <1> %ifdef threads.included
   380 000002A8 803D[C26A0000]01    <1> 	cmp byte [threadson], 1
   381 000002AF 0F84AD670000        <1> 	je near threadswitch
   382                              <1> %endif
   383                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   384 000002B5 803D[C26A0000]00    <1> 	cmp byte [threadson], 0
   385 000002BC 0F849A000000        <1> 	je near handled
   386                              <1> %ifdef io.serial
   387                              <1> 	jmp handled
   388                              <1> %else
   389 000002C2 60                  <1> 	pusha
   390 000002C3 E464                <1> 	in al, 64h
   391 000002C5 A820                <1> 	test al, 20h
   392 000002C7 0F858D000000        <1> 	jnz near handled2
   393 000002CD E460                <1> 	in al, 60h
   394 000002CF 3C01                <1> 	cmp al, 1		;escape
   395 000002D1 7405                <1> 	je userint
   396 000002D3 E982000000          <1> 	jmp handled2
   397                              <1> ;	cmp al, 0x57
   398                              <1> ;	jne near handled2
   399                              <1> ;pauseint:	;F11 pauses
   400                              <1> ;	in al, 64h
   401                              <1> ;	test al, 20h
   402                              <1> ;	jnz pauseint
   403                              <1> ;	in al, 60h
   404                              <1> ;	cmp al, 0xD7
   405                              <1> ;	jne pauseint
   406                              <1> ;	mov esi, pausemsg
   407                              <1> ;	call print
   408                              <1> ;	cli
   409                              <1> ;pauselp:
   410                              <1> ;	nop
   411                              <1> ;	in al, 64h
   412                              <1> ;	test al, 20h
   413                              <1> ;	jnz pauselp
   414                              <1> ;	in al, 60h
   415                              <1> ;	cmp al, 0x57
   416                              <1> ;	je near handled2
   417                              <1> ;	jmp pauselp
   418                              <1> ;pausemsg db "Paused",10,0
   419                              <1> userint:
   420 000002D8 31C0                <1> 	xor eax, eax
   421 000002DA 3905[94A00300]      <1> 	cmp [sigtable], eax
   422 000002E0 7411                <1> 	je .nosighook
   423 000002E2 8B1D[94A00300]      <1> 	mov ebx, [sigtable]
   424 000002E8 895C2420            <1> 	mov [esp + 32], ebx
   425                              <1> ;	mov [sigtable], eax
   426 000002EC B020                <1> 	mov al, 0x20
   427 000002EE E620                <1> 	out 0x20, al
   428 000002F0 61                  <1> 	popa
   429 000002F1 FB                  <1> 	sti
   430 000002F2 CF                  <1> 	iret
   431                              <1> .nosighook:
   432                              <1> 		;UNMASK ALL INTS
   433 000002F3 E621                <1> 	out 0x21, al
   434 000002F5 E6A1                <1> 	out 0xA1, al
   435 000002F7 B020                <1> 	mov al, 0x20
   436 000002F9 E6A0                <1> 	out 0xA0, al
   437 000002FB E620                <1> 	out 0x20, al
   438                              <1> 		;RESET PIT DIVISOR
   439 000002FD 66A1[5A020000]      <1> 	mov ax, [pitdiv]
   440 00000303 E640                <1> 	out 0x40, al
   441 00000305 66C1C008            <1> 	rol ax, 8
   442 00000309 E640                <1> 	out 0x40, al
   443                              <1> 		;RESET PIC
   444 0000030B B020                <1> 	mov al, 0x20
   445 0000030D E620                <1> 	out 0x20, al
   446 0000030F 61                  <1> 	popa
   447 00000310 FB                  <1> 	sti
   448 00000311 BC[34A00300]        <1> 	mov esp, stackend ;reset stack
   449 00000316 E95E290000          <1> 	jmp returnfromexp
   450                              <1> %endif
   451 0000031B 0A                  <1> rtcrate db 10
   452                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   453                              <1> %ifdef io.serial
   454                              <1> %else
   455                              <1> %ifdef terminal.vsync
   456                              <1> 	cli
   457                              <1> 	cmp byte [termcopyneeded], 0
   458                              <1> 	je .nocopy
   459                              <1> 	call newtermcopy
   460                              <1> .nocopy
   461                              <1> 	push eax
   462                              <1> 	mov al, 0xC
   463                              <1> 	out 0x70, al
   464                              <1> 	in al, 0x71
   465                              <1> 	pop eax
   466                              <1> 	sti
   467                              <1> %endif
   468                              <1> %endif
   469 0000031C E942000000          <1> 	jmp handled4
   470                              <1> %ifdef rtl8139.included
   471                              <1> rtl8139.irq:
   472                              <1> 	cli
   473                              <1> 	push edx
   474                              <1> 	push eax
   475                              <1> 	mov edx, [rtl8139.basenicaddr]
   476                              <1> 	add edx, rtl8139.ISR
   477                              <1> 	xor eax, eax
   478                              <1> 	in ax, dx
   479                              <1> 	out dx, ax
   480                              <1> 	pop eax
   481                              <1> 	pop edx
   482                              <1> 	sti
   483                              <1> 	jmp handled4
   484                              <1> %endif
   485                              <1> %ifdef sound.included
   486                              <1> sblaster.irq:
   487 00000321 FA                  <1> 	cli
   488 00000322 60                  <1> 	pusha
   489 00000323 803D[785F0000]01    <1> 	cmp byte [SoundBlaster], 1
   490 0000032A 0F84535A0000        <1> 	je near sblaster.cont
   491 00000330 E925000000          <1> 	jmp handled2
   492                              <1> %endif
   493                              <1> 	
   494                              <1> timekeeper:
   495 00000335 50                  <1> 	push eax
   496 00000336 A1[64020000]        <1> 	mov eax, [timenanoseconds]
   497 0000033B 0305[5C020000]      <1> 	add eax, [timeinterval]
   498 00000341 3D00CA9A3B          <1> 	cmp eax, 1000000000
   499 00000346 720B                <1> 	jb nonanosecondrollover
   500 00000348 FF05[60020000]      <1> 	inc dword [timeseconds]
   501 0000034E 2D00CA9A3B          <1> 	sub eax, 1000000000
   502                              <1> 	%ifdef gui.time
   503                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   504                              <1> 		cmp byte [guion], 1
   505                              <1> 		jne nonanosecondrollover
   506                              <1> 		cmp dword [dragging], 0
   507                              <1> 		jne nonanosecondrollover
   508                              <1> 		pusha
   509                              <1> 		call guitime
   510                              <1> 		popa
   511                              <1> 	%endif
   512                              <1> nonanosecondrollover:
   513 00000353 A3[64020000]        <1> 	mov [timenanoseconds], eax
   514 00000358 58                  <1> 	pop eax
   515 00000359 C3                  <1> 	ret
   516                              <1> 	
   517                              <1> handled2:
   518 0000035A 61                  <1> 	popa
   519                              <1> handled3:
   520 0000035B FB                  <1> 	sti
   521                              <1> handled:
   522 0000035C 50                  <1> 	push eax
   523 0000035D B020                <1> 	mov al, 0x20
   524 0000035F E620                <1> 	out 0x20, al
   525 00000361 58                  <1> 	pop eax
   526 00000362 CF                  <1> 	iret
   527                              <1> handled4:
   528 00000363 50                  <1> 	push eax
   529 00000364 B020                <1> 	mov al, 0x20
   530 00000366 E6A0                <1> 	out 0xA0, al
   531 00000368 E620                <1> 	out 0x20, al
   532 0000036A 58                  <1> 	pop eax
   533 0000036B CF                  <1> 	iret
   534                              <1> [BITS 16]
   535                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   536                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   537                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   538 0000036C 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   539 0000036E 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   540                              <1> 
   541 00000372 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   542 00000374 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   543                              <1> 
   544                              <1> 
   545 00000378 0000                <1> gdt:	dw 0			; limit 15:0
   546 0000037A 0000                <1> 	dw 0			; base 15:0
   547 0000037C 00                  <1> 	db 0			; base 23:16
   548 0000037D 00                  <1> 	db 0			; type
   549 0000037E 00                  <1> 	db 0			; limit 19:16, flags
   550 0000037F 00                  <1> 	db 0			; base 31:24
   551                              <1> ; linear data segment descriptor
   552                              <1> LINEAR_SEL	equ	$-gdt
   553 00000380 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   554 00000382 0000                <1> 	dw 0			; base for this one is always 0
   555 00000384 00                  <1> 	db 0
   556 00000385 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   557 00000386 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   558 00000387 00                  <1> 	db 0
   559                              <1> STACK_SEL	equ $-gdt
   560 00000388 0200                <1> gdts:	dw 2;(stackend)/4096
   561 0000038A 0000                <1> 	dw 0
   562 0000038C 00                  <1> 	db 0
   563 0000038D 92                  <1> 	db 0x92
   564 0000038E CF                  <1> 	db 0xCF
   565 0000038F 00                  <1> 	db 0
   566                              <1> ; code segment descriptor
   567                              <1> SYS_CODE_SEL	equ	$-gdt
   568 00000390 FFFF                <1> gdt2:	dw 0xFFFF
   569 00000392 0000                <1> 	dw 0			; (base gets set above)
   570 00000394 00                  <1> 	db 0
   571 00000395 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   572 00000396 CF                  <1> 	db 0xCF
   573 00000397 00                  <1> 	db 0
   574                              <1> ; data segment descriptor
   575                              <1> SYS_DATA_SEL	equ	$-gdt
   576 00000398 FFFF                <1> gdt3:	dw 0xFFFF
   577 0000039A 0000                <1> 	dw 0			; (base gets set above)
   578 0000039C 00                  <1> 	db 0
   579 0000039D 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   580 0000039E CF                  <1> 	db 0xCF
   581 0000039F 00                  <1> 	db 0
   582                              <1> NEW_CODE_SEL	equ	$-gdt
   583 000003A0 FFFF                <1> gdt4:	dw 0xFFFF
   584 000003A2 0000                <1> 	dw 0			; (base gets set above)
   585 000003A4 00                  <1> 	db 0
   586 000003A5 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   587 000003A6 CF                  <1> 	db 0xCF
   588 000003A7 00                  <1> 	db 0
   589                              <1> ; data segment descriptor
   590                              <1> NEW_DATA_SEL	equ	$-gdt
   591 000003A8 FFFF                <1> gdt5:	dw 0xFFFF
   592 000003AA 0000                <1> 	dw 0			; (base gets set above)
   593 000003AC 00                  <1> 	db 0
   594 000003AD 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   595 000003AE CF                  <1> 	db 0xCF
   596 000003AF 00                  <1> 	db 0
   597                              <1> V8086_CODE_SEL	equ $-gdt
   598 000003B0 FFFF                <1> gdtv8086: dw 0xFFFF
   599 000003B2 0000                <1> 	dw 0
   600 000003B4 00                  <1> 	db 0
   601 000003B5 9A                  <1> 	db 0x9A
   602 000003B6 8F                  <1> 	db 0x8F
   603 000003B7 00                  <1> 	db 0
   604                              <1> V8086_DATA_SEL	equ $-gdt
   605 000003B8 FFFF                <1> gdtv80862: dw 0xFFFF
   606 000003BA 0000                <1> 	dw 0
   607 000003BC 00                  <1> 	db 0
   608 000003BD 92                  <1> 	db 0x92
   609 000003BE 8F                  <1> 	db 0x8F
   610 000003BF 00                  <1> 	db 0
   611                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   612 000003C0 0001                <1> gdtdos:	dw 256	;give it 1 MB
   613 000003C2 0000                <1> 	dw 0
   614 000003C4 00                  <1> 	db 0
   615 000003C5 9A                  <1> 	db 0x9A
   616 000003C6 8F                  <1> 	db 0x8F ;16 bit
   617 000003C7 00                  <1> 	db 0
   618                              <1> DOS_DATA_SEL 	equ $-gdt
   619 000003C8 0001                <1> gdtdos2:	dw 256
   620 000003CA 0000                <1> 	dw 0
   621 000003CC 00                  <1> 	db 0
   622 000003CD 92                  <1> 	db 0x92
   623 000003CE 8F                  <1> 	db 0x8F ;16 bit
   624 000003CF 00                  <1> 	db 0
   625                              <1> gdt_end:
   626                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   627                              <1> ;	interrupt descriptor table (IDT)
   628                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   629                              <1> ; 32 reserved interrupts:
   630                              <1> idt:	
   631                              <1> %assign i 0
   632                              <1> %rep    8
   633                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   634                              <1> %assign i i+1
   635                              <1> %endrep
   636 000003D0 [F10C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   637                              <2> %assign i i+1
   638 000003D8 [FD0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   639                              <2> %assign i i+1
   640 000003E0 [090D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   641                              <2> %assign i i+1
   642 000003E8 [150D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   643                              <2> %assign i i+1
   644 000003F0 [210D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   645                              <2> %assign i i+1
   646 000003F8 [2D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   647                              <2> %assign i i+1
   648 00000400 [390D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   649                              <2> %assign i i+1
   650 00000408 [450D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   651                              <2> %assign i i+1
   652 00000410 [510D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   653                              <1> %assign i 9
   654                              <1> %rep    23
   655                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   656                              <1> %assign i i+1
   657                              <1> %endrep
   658 00000418 [5D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   659                              <2> %assign i i+1
   660 00000420 [690D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   661                              <2> %assign i i+1
   662 00000428 [750D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   663                              <2> %assign i i+1
   664 00000430 [810D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   665                              <2> %assign i i+1
   666 00000438 [8D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   667                              <2> %assign i i+1
   668 00000440 [990D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   669                              <2> %assign i i+1
   670 00000448 [A50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i i+1
   672 00000450 [B10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i i+1
   674 00000458 [BD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i i+1
   676 00000460 [C90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i i+1
   678 00000468 [D50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i i+1
   680 00000470 [E10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i i+1
   682 00000478 [ED0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i i+1
   684 00000480 [F90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i i+1
   686 00000488 [050E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i i+1
   688 00000490 [110E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i i+1
   690 00000498 [1D0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i i+1
   692 000004A0 [290E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i i+1
   694 000004A8 [350E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i i+1
   696 000004B0 [410E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i i+1
   698 000004B8 [4D0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i i+1
   700 000004C0 [590E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i i+1
   702 000004C8 [650E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i i+1
   704 000004D0 [E629]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   705 000004D8 [EA29]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   706                              <1> %assign i 0x22
   707                              <1> %rep 14
   708                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   709                              <1> %assign i +1
   710                              <1> %endrep
   711 000004E0 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   712                              <2> %assign i +1
   713 000004E8 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   714                              <2> %assign i +1
   715 000004F0 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i +1
   717 000004F8 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i +1
   719 00000500 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i +1
   721 00000508 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i +1
   723 00000510 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i +1
   725 00000518 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i +1
   727 00000520 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i +1
   729 00000528 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i +1
   731 00000530 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i +1
   733 00000538 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i +1
   735 00000540 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i +1
   737 00000548 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i +1
   739                              <1> ;INT 30h for os use and 3rd party use:
   740 00000550 [E91B]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   741                              <1> %assign i 0x31
   742                              <1> %rep 15
   743                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   744                              <1> %assign i +1
   745                              <1> %endrep
   746 00000558 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   747                              <2> %assign i +1
   748 00000560 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   749                              <2> %assign i +1
   750 00000568 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   751                              <2> %assign i +1
   752 00000570 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   753                              <2> %assign i +1
   754 00000578 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   755                              <2> %assign i +1
   756 00000580 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   757                              <2> %assign i +1
   758 00000588 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   759                              <2> %assign i +1
   760 00000590 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   761                              <2> %assign i +1
   762 00000598 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   763                              <2> %assign i +1
   764 000005A0 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   765                              <2> %assign i +1
   766 000005A8 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   767                              <2> %assign i +1
   768 000005B0 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 000005B8 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772 000005C0 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   773                              <2> %assign i +1
   774 000005C8 [5C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   775                              <2> %assign i +1
   776                              <1> ;and here we are at 0x40
   777                              <1> ;here are all the irq's
   778 000005D0 [8C02]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   779 000005D8 [5C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   780 000005E0 [5C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   781 000005E8 [5C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   782 000005F0 [5C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   783                              <1> 	%ifdef sound.included
   784 000005F8 [2103]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   785                              <1> 	%else
   786                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   787                              <1> 	%endif
   788 00000600 [5C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   789 00000608 [5C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   790 00000610 [1C03]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   791 00000618 [6303]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   792 00000620 [6303]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   793                              <1> 	%ifdef rtl8139.included
   794                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   795                              <1> 	%else
   796 00000628 [6303]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   797                              <1> 	%endif
   798 00000630 [6303]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   799 00000638 [6303]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   800 00000640 [6303]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   801 00000648 [6303]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   802                              <1> ;This brings me up to 0x50
   803                              <1> %assign i 0x50
   804                              <1> %rep 176
   805                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   806                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   807                              <1> %assign i +1
   808                              <1> %endrep
   809 00000650 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   810                              <2> 
   811                              <2> %assign i +1
   812 00000658 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   813                              <2> 
   814                              <2> %assign i +1
   815 00000660 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   816                              <2> 
   817                              <2> %assign i +1
   818 00000668 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   819                              <2> 
   820                              <2> %assign i +1
   821 00000670 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   822                              <2> 
   823                              <2> %assign i +1
   824 00000678 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   825                              <2> 
   826                              <2> %assign i +1
   827 00000680 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   828                              <2> 
   829                              <2> %assign i +1
   830 00000688 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   831                              <2> 
   832                              <2> %assign i +1
   833 00000690 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   834                              <2> 
   835                              <2> %assign i +1
   836 00000698 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   837                              <2> 
   838                              <2> %assign i +1
   839 000006A0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   840                              <2> 
   841                              <2> %assign i +1
   842 000006A8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   843                              <2> 
   844                              <2> %assign i +1
   845 000006B0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   846                              <2> 
   847                              <2> %assign i +1
   848 000006B8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   849                              <2> 
   850                              <2> %assign i +1
   851 000006C0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   852                              <2> 
   853                              <2> %assign i +1
   854 000006C8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   855                              <2> 
   856                              <2> %assign i +1
   857 000006D0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   858                              <2> 
   859                              <2> %assign i +1
   860 000006D8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   861                              <2> 
   862                              <2> %assign i +1
   863 000006E0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   864                              <2> 
   865                              <2> %assign i +1
   866 000006E8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 000006F0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 000006F8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 00000700 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 00000708 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 00000710 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 00000718 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 00000720 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 00000728 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 00000730 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 00000738 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 00000740 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 00000748 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 00000750 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 00000758 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 00000760 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 00000768 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 00000770 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 00000778 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 00000780 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 00000788 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 00000790 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 00000798 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 000007A0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 000007A8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 000007B0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 000007B8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 000007C0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 000007C8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 000007D0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 000007D8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 000007E0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 000007E8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 000007F0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 000007F8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 00000800 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 00000808 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 00000810 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 00000818 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 00000820 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 00000828 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 00000830 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 00000838 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 00000840 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 00000848 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 00000850 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 00000858 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 00000860 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 00000868 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 00000870 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 00000878 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 00000880 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 00000888 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 00000890 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000898 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 000008A0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 000008A8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 000008B0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 000008B8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 000008C0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 000008C8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 000008D0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 000008D8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 000008E0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 000008E8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 000008F0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 000008F8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 00000900 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 00000908 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 00000910 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 00000918 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 00000920 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 00000928 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 00000930 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 00000938 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 00000940 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 00000948 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 00000950 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 00000958 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 00000960 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 00000968 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 00000970 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000978 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 00000980 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 00000988 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 00000990 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000998 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 000009A0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 000009A8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 000009B0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 000009B8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 000009C0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 000009C8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 000009D0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 000009D8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 000009E0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 000009E8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 000009F0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 000009F8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 00000A00 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 00000A08 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 00000A10 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 00000A18 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 00000A20 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 00000A28 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 00000A30 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 00000A38 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 00000A40 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 00000A48 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 00000A50 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 00000A58 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 00000A60 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 00000A68 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 00000A70 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000A78 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000A80 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000A88 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000A90 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000A98 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000AA0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000AA8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000AB0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000AB8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000AC0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000AC8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000AD0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000AD8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000AE0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000AE8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000AF0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000AF8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000B00 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000B08 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000B10 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000B18 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000B20 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000B28 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000B30 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000B38 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000B40 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286 00000B48 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1287                              <2> 
  1288                              <2> %assign i +1
  1289 00000B50 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1290                              <2> 
  1291                              <2> %assign i +1
  1292 00000B58 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1293                              <2> 
  1294                              <2> %assign i +1
  1295 00000B60 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1296                              <2> 
  1297                              <2> %assign i +1
  1298 00000B68 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1299                              <2> 
  1300                              <2> %assign i +1
  1301 00000B70 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1302                              <2> 
  1303                              <2> %assign i +1
  1304 00000B78 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1305                              <2> 
  1306                              <2> %assign i +1
  1307 00000B80 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1308                              <2> 
  1309                              <2> %assign i +1
  1310 00000B88 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1311                              <2> 
  1312                              <2> %assign i +1
  1313 00000B90 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1314                              <2> 
  1315                              <2> %assign i +1
  1316 00000B98 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1317                              <2> 
  1318                              <2> %assign i +1
  1319 00000BA0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1320                              <2> 
  1321                              <2> %assign i +1
  1322 00000BA8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1323                              <2> 
  1324                              <2> %assign i +1
  1325 00000BB0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1326                              <2> 
  1327                              <2> %assign i +1
  1328 00000BB8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1329                              <2> 
  1330                              <2> %assign i +1
  1331 00000BC0 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1332                              <2> 
  1333                              <2> %assign i +1
  1334 00000BC8 [5C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1335                              <2> 
  1336                              <2> %assign i +1
  1337                              <1> idt_end:
  1338                              <1> [BITS 32]
  1339                                  	%include "source/realmode.asm"
  1340                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1341                              <1> 			;and the return address is in realmodereturn
  1342 00000BD0 FA                  <1> 	cli
  1343 00000BD1 A3[E30C0000]        <1> 	mov [realmodeeax], eax
  1344 00000BD6 891D[DF0C0000]      <1> 	mov [realmodeebx], ebx
  1345 00000BDC 8925[D10C0000]      <1> 	mov [pmodeesp], esp
  1346                              <1> 
  1347 00000BE2 BB[DB0C0000]        <1> 	mov ebx, cr0old
  1348                              <1> rmcopytofirstmbyte:
  1349 00000BE7 8B03                <1> 	mov eax, [ebx]
  1350 00000BE9 658903              <1> 	mov [gs:ebx], eax
  1351 00000BEC 81C304000000        <1> 	add ebx, 4
  1352 00000BF2 81FB[EB0C0000]      <1> 	cmp ebx, realmodeptr
  1353 00000BF8 76ED                <1> 	jbe rmcopytofirstmbyte
  1354                              <1> 
  1355 00000BFA EA[010C0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1356                              <1> 
  1357                              <1> [BITS 16]
  1358                              <1> protected16bit:
  1359 00000C01 B84000              <1> 	mov ax, V8086_DATA_SEL
  1360 00000C04 8ED8                <1> 	mov ds, ax
  1361 00000C06 8EC0                <1> 	mov es, ax
  1362 00000C08 8EE0                <1> 	mov fs, ax
  1363 00000C0A 8EE8                <1> 	mov gs, ax
  1364 00000C0C 8ED0                <1> 	mov ss, ax
  1365 00000C0E 66BC[34A00300]      <1> 	mov esp, stackend
  1366 00000C14 0F20C0              <1> 	mov eax, cr0
  1367 00000C17 66A3[DB0C]          <1> 	mov [cr0old], eax
  1368 00000C1B 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1369 00000C21 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1370 00000C24 EA[290C]0010        <1> 	jmp 0x1000:inrealmode
  1371                              <1> 
  1372                              <1> inrealmode:
  1373 00000C29 8CC8                <1> 	mov ax, cs
  1374 00000C2B 8ED8                <1> 	mov ds, ax
  1375 00000C2D 8EC0                <1> 	mov es, ax
  1376 00000C2F 8EE0                <1> 	mov fs, ax
  1377 00000C31 8EE8                <1> 	mov gs, ax
  1378 00000C33 8ED0                <1> 	mov ss, ax
  1379 00000C35 BC[34A0]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1380                              <1> 	
  1381 00000C38 B011                <1> 	mov al, 0x11
  1382 00000C3A E620                <1> 	out 0x20, al
  1383 00000C3C E6A0                <1> 	out 0xA0, al
  1384 00000C3E B008                <1> 	mov al, 0x8		;interrupt for master
  1385 00000C40 E621                <1> 	out 0x21, al
  1386 00000C42 B070                <1> 	mov al, 0x70	;interrupt for slave
  1387 00000C44 E6A1                <1> 	out 0xA1, al
  1388 00000C46 B004                <1> 	mov al, 4
  1389 00000C48 E621                <1> 	out 0x21, al
  1390 00000C4A B002                <1> 	mov al, 2
  1391 00000C4C E6A1                <1> 	out 0xA1, al
  1392 00000C4E B001                <1> 	mov al, 0x1
  1393 00000C50 E621                <1> 	out 0x21, al
  1394 00000C52 B001                <1> 	mov al, 0x1
  1395 00000C54 E6A1                <1> 	out 0xA1, al
  1396                              <1> 	
  1397 00000C56 0F011E[D50C]        <1> 	lidt [idt_real]
  1398 00000C5B FB                  <1> 	sti
  1399                              <1> 
  1400 00000C5C 66A1[E30C]          <1> 	mov eax, [realmodeeax]
  1401 00000C60 668B1E[DF0C]        <1> 	mov ebx, [realmodeebx]
  1402                              <1> 
  1403 00000C65 FF16[EB0C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1404                              <1> 
  1405 00000C69 66A3[E30C]          <1> 	mov [realmodeeax], eax
  1406 00000C6D 66891E[DF0C]        <1> 	mov [realmodeebx], ebx
  1407                              <1> 
  1408 00000C72 FA                  <1> 	cli
  1409 00000C73 0F0116[6C03]        <1> 	lgdt [gdtr]
  1410 00000C78 0F011E[7203]        <1> 	lidt [idtr]
  1411 00000C7D 0F20C0              <1> 	mov eax, cr0
  1412 00000C80 0C01                <1> 	or al, 1
  1413 00000C82 0F22C0              <1> 	mov cr0,eax
  1414 00000C85 EA[8A0C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1415                              <1> 
  1416                              <1> [BITS 32]
  1417                              <1> returntopmode:
  1418 00000C8A 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1419 00000C8E 8ED8                <1> 	mov ds, ax
  1420 00000C90 8EC0                <1> 	mov es, ax
  1421 00000C92 8EE0                <1> 	mov fs, ax
  1422 00000C94 8ED0                <1> 	mov ss, ax
  1423 00000C96 8B25[D10C0000]      <1> 	mov esp, [pmodeesp]
  1424 00000C9C 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1425 00000CA0 8EE8                <1> 	mov gs, ax
  1426                              <1> 
  1427 00000CA2 BB[DB0C0000]        <1> 	mov ebx, cr0old
  1428                              <1> rmcopyfromfirstmbyte:
  1429 00000CA7 658B03              <1> 	mov eax, [gs:ebx]
  1430 00000CAA 8903                <1> 	mov [ebx], eax
  1431 00000CAC 81C304000000        <1> 	add ebx, 4
  1432 00000CB2 81FB[EB0C0000]      <1> 	cmp ebx, realmodeptr
  1433 00000CB8 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1434                              <1> 
  1435 00000CBA E856580000          <1> 	call initialize.pic ;reset irq's and masks
  1436 00000CBF FB                  <1> 	sti
  1437 00000CC0 A1[E30C0000]        <1> 	mov eax, [realmodeeax]
  1438 00000CC5 8B1D[DF0C0000]      <1> 	mov ebx, [realmodeebx]
  1439 00000CCB FF25[E70C0000]      <1> 	jmp dword [realmodereturn]
  1440                              <1> 	
  1441 00000CD1 00000000            <1> pmodeesp dd 0
  1442                              <1> idt_real:
  1443 00000CD5 FF03                <1> 	dw 0x3FF
  1444 00000CD7 00000000            <1> 	dd 0
  1445 00000CDB 00000000            <1> cr0old dd 0
  1446 00000CDF 00000000            <1> realmodeebx dd 0
  1447 00000CE3 00000000            <1> realmodeeax dd 0
  1448 00000CE7 00000000            <1> realmodereturn dd 0
  1449 00000CEB 0000                <1> realmodeptr dw 0
  1450 00000CED 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1451                                  [BITS 32]
  1452                                      %include "source/exception.asm"
  1453                              <1> %ifdef exceptions.included
  1454                              <1> unhand:	
  1455                              <1> 	%assign i 0
  1456                              <1> 	%rep 32
  1457                              <1> 	mov byte [intprob], i
  1458                              <1> 	jmp unhand2
  1459                              <1> 	%assign i i+1
  1460                              <1> 	%endrep
  1461 00000CF1 C605[A3110000]00    <2>  mov byte [intprob], i
  1462 00000CF8 E974010000          <2>  jmp unhand2
  1463                              <2>  %assign i i+1
  1464 00000CFD C605[A3110000]01    <2>  mov byte [intprob], i
  1465 00000D04 E968010000          <2>  jmp unhand2
  1466                              <2>  %assign i i+1
  1467 00000D09 C605[A3110000]02    <2>  mov byte [intprob], i
  1468 00000D10 E95C010000          <2>  jmp unhand2
  1469                              <2>  %assign i i+1
  1470 00000D15 C605[A3110000]03    <2>  mov byte [intprob], i
  1471 00000D1C E950010000          <2>  jmp unhand2
  1472                              <2>  %assign i i+1
  1473 00000D21 C605[A3110000]04    <2>  mov byte [intprob], i
  1474 00000D28 E944010000          <2>  jmp unhand2
  1475                              <2>  %assign i i+1
  1476 00000D2D C605[A3110000]05    <2>  mov byte [intprob], i
  1477 00000D34 E938010000          <2>  jmp unhand2
  1478                              <2>  %assign i i+1
  1479 00000D39 C605[A3110000]06    <2>  mov byte [intprob], i
  1480 00000D40 E92C010000          <2>  jmp unhand2
  1481                              <2>  %assign i i+1
  1482 00000D45 C605[A3110000]07    <2>  mov byte [intprob], i
  1483 00000D4C E920010000          <2>  jmp unhand2
  1484                              <2>  %assign i i+1
  1485 00000D51 C605[A3110000]08    <2>  mov byte [intprob], i
  1486 00000D58 E914010000          <2>  jmp unhand2
  1487                              <2>  %assign i i+1
  1488 00000D5D C605[A3110000]09    <2>  mov byte [intprob], i
  1489 00000D64 E908010000          <2>  jmp unhand2
  1490                              <2>  %assign i i+1
  1491 00000D69 C605[A3110000]0A    <2>  mov byte [intprob], i
  1492 00000D70 E9FC000000          <2>  jmp unhand2
  1493                              <2>  %assign i i+1
  1494 00000D75 C605[A3110000]0B    <2>  mov byte [intprob], i
  1495 00000D7C E9F0000000          <2>  jmp unhand2
  1496                              <2>  %assign i i+1
  1497 00000D81 C605[A3110000]0C    <2>  mov byte [intprob], i
  1498 00000D88 E9E4000000          <2>  jmp unhand2
  1499                              <2>  %assign i i+1
  1500 00000D8D C605[A3110000]0D    <2>  mov byte [intprob], i
  1501 00000D94 E9D8000000          <2>  jmp unhand2
  1502                              <2>  %assign i i+1
  1503 00000D99 C605[A3110000]0E    <2>  mov byte [intprob], i
  1504 00000DA0 E9CC000000          <2>  jmp unhand2
  1505                              <2>  %assign i i+1
  1506 00000DA5 C605[A3110000]0F    <2>  mov byte [intprob], i
  1507 00000DAC E9C0000000          <2>  jmp unhand2
  1508                              <2>  %assign i i+1
  1509 00000DB1 C605[A3110000]10    <2>  mov byte [intprob], i
  1510 00000DB8 E9B4000000          <2>  jmp unhand2
  1511                              <2>  %assign i i+1
  1512 00000DBD C605[A3110000]11    <2>  mov byte [intprob], i
  1513 00000DC4 E9A8000000          <2>  jmp unhand2
  1514                              <2>  %assign i i+1
  1515 00000DC9 C605[A3110000]12    <2>  mov byte [intprob], i
  1516 00000DD0 E99C000000          <2>  jmp unhand2
  1517                              <2>  %assign i i+1
  1518 00000DD5 C605[A3110000]13    <2>  mov byte [intprob], i
  1519 00000DDC E990000000          <2>  jmp unhand2
  1520                              <2>  %assign i i+1
  1521 00000DE1 C605[A3110000]14    <2>  mov byte [intprob], i
  1522 00000DE8 E984000000          <2>  jmp unhand2
  1523                              <2>  %assign i i+1
  1524 00000DED C605[A3110000]15    <2>  mov byte [intprob], i
  1525 00000DF4 E978000000          <2>  jmp unhand2
  1526                              <2>  %assign i i+1
  1527 00000DF9 C605[A3110000]16    <2>  mov byte [intprob], i
  1528 00000E00 E96C000000          <2>  jmp unhand2
  1529                              <2>  %assign i i+1
  1530 00000E05 C605[A3110000]17    <2>  mov byte [intprob], i
  1531 00000E0C E960000000          <2>  jmp unhand2
  1532                              <2>  %assign i i+1
  1533 00000E11 C605[A3110000]18    <2>  mov byte [intprob], i
  1534 00000E18 E954000000          <2>  jmp unhand2
  1535                              <2>  %assign i i+1
  1536 00000E1D C605[A3110000]19    <2>  mov byte [intprob], i
  1537 00000E24 E948000000          <2>  jmp unhand2
  1538                              <2>  %assign i i+1
  1539 00000E29 C605[A3110000]1A    <2>  mov byte [intprob], i
  1540 00000E30 E93C000000          <2>  jmp unhand2
  1541                              <2>  %assign i i+1
  1542 00000E35 C605[A3110000]1B    <2>  mov byte [intprob], i
  1543 00000E3C E930000000          <2>  jmp unhand2
  1544                              <2>  %assign i i+1
  1545 00000E41 C605[A3110000]1C    <2>  mov byte [intprob], i
  1546 00000E48 E924000000          <2>  jmp unhand2
  1547                              <2>  %assign i i+1
  1548 00000E4D C605[A3110000]1D    <2>  mov byte [intprob], i
  1549 00000E54 E918000000          <2>  jmp unhand2
  1550                              <2>  %assign i i+1
  1551 00000E59 C605[A3110000]1E    <2>  mov byte [intprob], i
  1552 00000E60 E90C000000          <2>  jmp unhand2
  1553                              <2>  %assign i i+1
  1554 00000E65 C605[A3110000]1F    <2>  mov byte [intprob], i
  1555 00000E6C E900000000          <2>  jmp unhand2
  1556                              <2>  %assign i i+1
  1557                              <1> unhand2:
  1558 00000E71 FA                  <1> 	cli
  1559 00000E72 1E                  <1> 	push ds
  1560 00000E73 06                  <1> 	push es
  1561 00000E74 0FA0                <1> 	push fs
  1562 00000E76 0FA8                <1> 	push gs
  1563 00000E78 16                  <1> 	push ss
  1564 00000E79 60                  <1> 	pushad
  1565                              <1> %ifdef gui.included
  1566 00000E7A 803D[388C0000]00    <1> 	cmp byte [guion], 0
  1567 00000E81 0F8432000000        <1> 	je near noguiunhandstuff
  1568 00000E87 66C705[9D110000]08- <1> 	mov word [locunhandy], 8
  1569 00000E8F 00                  <1>
  1570 00000E90 66C705[9F110000]08- <1> 	mov word [locunhandx], 8
  1571 00000E98 00                  <1>
  1572 00000E99 668B1D[A8710000]    <1> 	mov bx, [background]
  1573 00000EA0 66891D[A1110000]    <1> 	mov [backgroundcache], bx
  1574 00000EA7 C605[8A590000]01    <1> 	mov byte [mousedisabled],1
  1575 00000EAE 66BB00F8            <1> 	mov bx, 1111100000000000b
  1576 00000EB2 66891D[A8710000]    <1> 	mov [background], bx
  1577                              <1> noguiunhandstuff:
  1578                              <1> %endif
  1579 00000EB9 89E6                <1> 	mov esi, esp
  1580 00000EBB 8935[91110000]      <1> 	mov [espfirst], esi
  1581 00000EC1 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1582 00000EC7 8935[8D110000]      <1> 	mov [esploc], esi
  1583 00000ECD BE[B2110000]        <1> 	mov esi, unhandmsg
  1584 00000ED2 8935[95110000]      <1> 	mov [esiloc], esi
  1585 00000ED8 31C9                <1> 	xor ecx, ecx
  1586 00000EDA 8A0D[A3110000]      <1> 	mov cl, [intprob]
  1587 00000EE0 BB[81150000]        <1> 	mov ebx, errortypes
  1588 00000EE5 C1E102              <1> 	shl ecx, 2
  1589 00000EE8 01CB                <1> 	add ebx, ecx
  1590 00000EEA 81FB[C1150000]      <1> 	cmp ebx, errortypesend
  1591 00000EF0 7205                <1> 	jb gooderrortype
  1592 00000EF2 BB[C1150000]        <1> 	mov ebx, errortypesend
  1593                              <1> gooderrortype:
  1594 00000EF7 8B33                <1> 	mov esi, [ebx]
  1595                              <1> %ifdef gui.included
  1596 00000EF9 803D[388C0000]00    <1> 	cmp byte [guion], 0
  1597 00000F00 0F842D000000        <1> 	je near errortext
  1598 00000F06 668B0D[9D110000]    <1> 	mov cx, [locunhandy]
  1599 00000F0D 668B15[9F110000]    <1> 	mov dx, [locunhandx]
  1600 00000F14 66B80100            <1> 	mov ax, 1
  1601 00000F18 6631DB              <1> 	xor bx, bx
  1602 00000F1B E8DD680000          <1> 	call showstring2
  1603 00000F20 66890D[9D110000]    <1> 	mov [locunhandy], cx
  1604 00000F27 668915[9F110000]    <1> 	mov [locunhandx], dx
  1605 00000F2E E905000000          <1> 	jmp errortextdone
  1606                              <1> %endif
  1607                              <1> errortext:
  1608 00000F33 E8100E0000          <1> 	call print		;;get the error message and print it
  1609                              <1> errortextdone:
  1610 00000F38 31C9                <1> 	xor ecx, ecx
  1611 00000F3A 8A0D[A3110000]      <1> 	mov cl, [intprob]
  1612 00000F40 E8E1010000          <1> 	call expdump
  1613                              <1> dumpstack:
  1614 00000F45 8B35[8D110000]      <1> 	mov esi, [esploc]
  1615 00000F4B 39E6                <1> 	cmp esi, esp
  1616 00000F4D 7216                <1> 	jb donedump
  1617 00000F4F 368B0E              <1> 	mov ecx, [ss:esi]
  1618 00000F52 81EE04000000        <1> 	sub esi, 4
  1619 00000F58 8935[8D110000]      <1> 	mov [esploc], esi
  1620 00000F5E E8C3010000          <1> 	call expdump
  1621 00000F63 EBE0                <1> 	jmp dumpstack
  1622                              <1> donedump:
  1623 00000F65 0F20C1              <1> 	mov ecx, cr0
  1624 00000F68 E8B9010000          <1> 	call expdump
  1625 00000F6D 0F20D1              <1> 	mov ecx, cr2
  1626 00000F70 E8B1010000          <1> 	call expdump
  1627 00000F75 0F20D9              <1> 	mov ecx, cr3
  1628 00000F78 E8A9010000          <1> 	call expdump
  1629 00000F7D 0F20E1              <1> 	mov ecx, cr4
  1630 00000F80 E8A1010000          <1> 	call expdump
  1631 00000F85 0F00C9              <1> 	str ecx
  1632 00000F88 E899010000          <1> 	call expdump
  1633 00000F8D 0F010D[AC110000]    <1> 	sidt [igdtcache]
  1634 00000F94 8B0D[AE110000]      <1> 	mov ecx, [igdtcache + 2]
  1635 00000F9A E887010000          <1> 	call expdump
  1636 00000F9F 0F0105[AC110000]    <1> 	sgdt [igdtcache]
  1637 00000FA6 8B0D[AE110000]      <1> 	mov ecx, [igdtcache + 2]
  1638 00000FAC E875010000          <1> 	call expdump
  1639 00000FB1 0F00C1              <1> 	sldt ecx
  1640 00000FB4 E86D010000          <1> 	call expdump
  1641 00000FB9 8B35[8D110000]      <1> 	mov esi, [esploc]
  1642 00000FBF 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1643 00000FC4 81C710000000        <1> 	add edi, 16
  1644 00000FCA 893D[A8110000]      <1> 	mov [codelocend], edi
  1645 00000FD0 81EF20000000        <1> 	sub edi, 32
  1646                              <1> dumpcodeloop:
  1647 00000FD6 893D[A4110000]      <1> 	mov [codeloc], edi
  1648 00000FDC 8B0F                <1> 	mov ecx, [edi]
  1649 00000FDE E843010000          <1> 	call expdump
  1650 00000FE3 8B3D[A4110000]      <1> 	mov edi, [codeloc]
  1651 00000FE9 81C704000000        <1> 	add edi, 4
  1652 00000FEF 3B3D[A8110000]      <1> 	cmp edi, [codelocend]
  1653 00000FF5 72DF                <1> 	jb dumpcodeloop
  1654 00000FF7 BE[B7100000]        <1> 	mov esi, backtoosmsg
  1655                              <1> %ifdef gui.included
  1656 00000FFC 803D[388C0000]00    <1> 	cmp byte [guion], 0
  1657 00001003 741F                <1> 	je backtomsg
  1658                              <1> guibacktomsg:
  1659 00001005 668B15[9F110000]    <1> 	mov dx, [locunhandx]
  1660 0000100C 668B0D[9D110000]    <1> 	mov cx, [locunhandy]
  1661 00001013 66B80100            <1> 	mov ax, 1
  1662 00001017 6631DB              <1> 	xor bx, bx
  1663 0000101A E8DE670000          <1> 	call showstring2
  1664 0000101F E905000000          <1> 	jmp backtomsgdone
  1665                              <1> backtomsg:
  1666                              <1> %endif
  1667 00001024 E81F0D0000          <1> 	call print
  1668                              <1> backtomsgdone:
  1669 00001029 30C0                <1> 	xor al, al
  1670 0000102B E815130000          <1> 	call rdcharint
  1671 00001030 803D[A3110000]03    <1> 	cmp byte [intprob], 3
  1672 00001037 7541                <1> 	jne nodebugint
  1673                              <1> %ifdef gui.included
  1674 00001039 803D[388C0000]00    <1> 	cmp byte [guion], 0
  1675 00001040 7427                <1> 	je nodebuggui
  1676 00001042 668B1D[A1110000]    <1> 	mov bx, [backgroundcache]
  1677 00001049 66891D[A8710000]    <1> 	mov [background], bx
  1678 00001050 6631DB              <1> 	xor bx, bx
  1679 00001053 C605[8A590000]00    <1> 	mov byte [mousedisabled], 0
  1680 0000105A E8FD600000          <1> 	call guiclear
  1681 0000105F E848610000          <1> 	call reloadallgraphics
  1682 00001064 E838180000          <1> 	call termcopy
  1683                              <1> nodebuggui:
  1684                              <1> %endif
  1685 00001069 8B35[91110000]      <1> 	mov esi, [espfirst]
  1686 0000106F 89F4                <1> 	mov esp, esi
  1687 00001071 61                  <1> 	popad
  1688 00001072 17                  <1> 	pop ss
  1689 00001073 0FA9                <1> 	pop gs
  1690 00001075 0FA1                <1> 	pop fs
  1691 00001077 07                  <1> 	pop es
  1692 00001078 1F                  <1> 	pop ds
  1693 00001079 CF                  <1> 	iret
  1694                              <1> nodebugint:
  1695 0000107A 61                  <1> 	popad
  1696 0000107B 17                  <1> 	pop ss
  1697 0000107C 0FA9                <1> 	pop gs
  1698 0000107E 0FA1                <1> 	pop fs
  1699 00001080 07                  <1> 	pop es
  1700 00001081 1F                  <1> 	pop ds
  1701                              <1> %ifdef gui.included
  1702 00001082 803D[388C0000]00    <1> 	cmp byte [guion], 0
  1703 00001089 7427                <1> 	je returnunhandgui
  1704 0000108B 668B1D[A1110000]    <1> 	mov bx, [backgroundcache]
  1705 00001092 66891D[A8710000]    <1> 	mov [background], bx
  1706 00001099 6631DB              <1> 	xor bx, bx
  1707 0000109C C605[8A590000]00    <1> 	mov byte [mousedisabled], 0
  1708 000010A3 E8B4600000          <1> 	call guiclear
  1709 000010A8 E8FF600000          <1> 	call reloadallgraphics
  1710 000010AD E8EF170000          <1> 	call termcopy
  1711                              <1> %endif
  1712                              <1> returnunhandgui:
  1713 000010B2 E92E1C0000          <1> 	jmp nwcmd
  1714 000010B7 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1715 000010C0 737420616E79207072- <1>
  1716 000010C9 6F626C656D7320696E- <1>
  1717 000010D2 207468652049737375- <1>
  1718 000010DB 65732073656374696F- <1>
  1719 000010E4 6E20617420736F6C6C- <1>
  1720 000010ED 65726F732E676F6F67- <1>
  1721 000010F6 6C65636F64652E636F- <1>
  1722 000010FF 6D0A                <1>
  1723 00001101 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1724 0000110A 206B657920746F2072- <1>
  1725 00001113 657475726E20746F20- <1>
  1726 0000111C 536F6C6C65724F530A- <1>
  1727 00001125 00                  <1>
  1728                              <1> expdump:
  1729 00001126 8B35[95110000]      <1> 	mov esi, [esiloc]
  1730 0000112C 89F7                <1> 	mov edi, esi
  1731 0000112E 81C70F000000        <1> 	add edi, 15
  1732 00001134 81C604000000        <1> 	add esi, 4
  1733 0000113A 893D[95110000]      <1> 	mov [esiloc], edi
  1734 00001140 81EF03000000        <1> 	sub edi, 3
  1735 00001146 E801200000          <1> 	call converthex
  1736 0000114B 81EE04000000        <1> 	sub esi, 4
  1737                              <1> %ifdef gui.included
  1738 00001151 803D[388C0000]00    <1> 	cmp byte [guion], 0
  1739 00001158 0F8429000000        <1> 	je near expdumptext
  1740 0000115E 668B0D[9D110000]    <1> 	mov cx, [locunhandy]
  1741 00001165 668B15[9F110000]    <1> 	mov dx, [locunhandx]
  1742 0000116C 66B80100            <1> 	mov ax, 1
  1743 00001170 6631DB              <1> 	xor bx, bx
  1744 00001173 E885660000          <1> 	call showstring2
  1745 00001178 66890D[9D110000]    <1> 	mov [locunhandy], cx
  1746 0000117F 668915[9F110000]    <1> 	mov [locunhandx], dx
  1747 00001186 C3                  <1> 	ret
  1748                              <1> %endif
  1749                              <1> expdumptext:
  1750 00001187 E8BC0B0000          <1> 	call print
  1751 0000118C C3                  <1> 	ret
  1752 0000118D 00000000            <1> esploc dd 0
  1753 00001191 00000000            <1> espfirst dd 0
  1754 00001195 00000000            <1> esiloc dd 0
  1755 00001199 00000000            <1> esiregbuf dd 0
  1756 0000119D 0100                <1> locunhandy dw 1
  1757 0000119F 0100                <1> locunhandx dw 1
  1758 000011A1 0000                <1> backgroundcache dw 0
  1759 000011A3 00                  <1> intprob db 0
  1760 000011A4 00000000            <1> codeloc dd 0
  1761 000011A8 00000000            <1> codelocend dd 0
  1762 000011AC 000000000000        <1> igdtcache dw 0,0,0
  1763                              <1> 	unhandmsg:	
  1764 000011B2 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1765 000011BB 303030FF0A00        <1>
  1766                              <1> unhndrg:
  1767 000011C1 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1768 000011CA 303030202000<rept>  <1>
  1769 0000122A FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1770 00001233 303030FF0A00        <1>
  1771 00001239 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1772 00001242 303030202000<rept>  <1>
  1773 000012A2 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1774 000012AB 303030FF0A00        <1>
  1775 000012B1 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1776 000012BA 303030202000<rept>  <1>
  1777 0000131A FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1778 00001323 303030FF0A00        <1>
  1779 00001329 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1780 00001332 303030202000<rept>  <1>
  1781 00001392 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1782 0000139B 303030FF0A00        <1>
  1783                              <1> unhandregs:
  1784 000013A1 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1785 000013AA 303030202000        <1>
  1786 000013B0 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1787 000013B9 303030202000        <1>
  1788 000013BF 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1789 000013C8 303030FF0A00        <1>
  1790 000013CE 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1791 000013D7 303030202000        <1>
  1792 000013DD 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1793 000013E6 303030202000        <1>
  1794 000013EC 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1795 000013F5 303030202000        <1>
  1796 000013FB 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1797 00001404 303030202000        <1>
  1798 0000140A 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1799 00001413 303030FF0A00        <1>
  1800 00001419 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1801 00001422 303030202000        <1>
  1802 00001428 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1803 00001431 303030202000        <1>
  1804 00001437 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1805 00001440 303030202000        <1>
  1806 00001446 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1807 0000144F 303030FF0A00        <1>
  1808 00001455 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1809 0000145E 303030202000        <1>
  1810 00001464 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1811 0000146D 303030202000        <1>
  1812 00001473 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1813 0000147C 303030202000        <1>
  1814 00001482 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1815 0000148B 303030FF0A00        <1>
  1816 00001491 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1817 0000149A 303030202000        <1>
  1818 000014A0 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1819 000014A9 303030202000        <1>
  1820 000014AF 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1821 000014B8 303030202000        <1>
  1822 000014BE 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1823 000014C7 303030FF0A00        <1>
  1824 000014CD 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1825 000014D6 303030202000        <1>
  1826 000014DC 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1827 000014E5 303030202000        <1>
  1828 000014EB 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1829 000014F4 303030202000        <1>
  1830 000014FA 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1831 00001503 303030FF0A00        <1>
  1832 00001509 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1833 00001512 303030202000<rept>  <1>
  1834 00001527 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1835 00001530 30303020FF00        <1>
  1836 00001536 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1837 0000153F 3030305D2000        <1>
  1838 00001545 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1839 0000154E 303030202000<rept>  <1>
  1840 00001572 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1841 0000157B 303030FF0A00        <1>
  1842                              <1> unhandmsgend:
  1843                              <1> 
  1844                              <1> errortypes:
  1845 00001581 [C5150000]          <1> 			dd err0
  1846 00001585 [2E160000]          <1> 			dd err1
  1847 00001589 [8F160000]          <1> 			dd err2
  1848 0000158D [E4160000]          <1> 			dd err3
  1849 00001591 [48170000]          <1> 			dd err4
  1850 00001595 [9A170000]          <1> 			dd err5
  1851 00001599 [04180000]          <1> 			dd err6
  1852 0000159D [6C180000]          <1> 			dd err7
  1853 000015A1 [B6180000]          <1> 			dd err8
  1854 000015A5 [13190000]          <1> 			dd err9
  1855 000015A9 [6C190000]          <1> 			dd err10
  1856 000015AD [B7190000]          <1> 			dd err11
  1857 000015B1 [071A0000]          <1> 			dd err12
  1858 000015B5 [601A0000]          <1> 			dd err13
  1859 000015B9 [C31A0000]          <1> 			dd err14
  1860 000015BD [FF1A0000]          <1> 			dd err15
  1861                              <1> errortypesend:
  1862 000015C1 [8A1B0000]          <1> 			dd unknownerror
  1863                              <1> 			
  1864 000015C5 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1865 000015CE 6279207A65726F3A0A  <1>
  1866 000015D7 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1867 000015E0 6C79206C696D2061C3- <1>
  1868 000015E9 B778203D20E2889E20- <1>
  1869 000015F2 7768656E2061206973- <1>
  1870 000015FB 20616E79207265616C- <1>
  1871 00001604 206E756D6265722E20- <1>
  1872 0000160D 486170707920456173- <1>
  1873 00001616 746572210A          <1>
  1874 0000161B 202020202020202020- <1> 		db "            x→0",10,0
  1875 00001624 20202078E28692300A- <1>
  1876 0000162D 00                  <1>
  1877                              <1> 		
  1878 0000162E 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1879 00001637 65702F427265616B70- <1>
  1880 00001640 6F696E743A0A        <1>
  1881 00001646 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1882 0000164F 696E74206661756C74- <1>
  1883 00001658 2C20627265616B706F- <1>
  1884 00001661 696E7420747261702C- <1>
  1885 0000166A 206F722073696E676C- <1>
  1886 00001673 652D73746570207472- <1>
  1887 0000167C 617020776173207472- <1>
  1888 00001685 696767657265642E0A- <1>
  1889 0000168E 00                  <1>
  1890                              <1> 		
  1891 0000168F 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1892 00001698 6C6520696E74657272- <1>
  1893 000016A1 7570743A0A          <1>
  1894 000016A6 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1895 000016AF 6520696E7465727275- <1>
  1896 000016B8 707420776173207472- <1>
  1897 000016C1 696767657265642074- <1>
  1898 000016CA 68617420636F756C64- <1>
  1899 000016D3 206E6F74206265206D- <1>
  1900 000016DC 61736B65642E0A00    <1>
  1901                              <1> 		
  1902 000016E4 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1903 000016ED 743A0A              <1>
  1904 000016F0 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1905 000016F9 727275707420697320- <1>
  1906 00001702 7573656420696E2070- <1>
  1907 0000170B 726F6772616D732074- <1>
  1908 00001714 6F2073686F77207468- <1>
  1909 0000171D 6520737461636B2061- <1>
  1910 00001726 6E6420726567697374- <1>
  1911 0000172F 65727320616E642063- <1>
  1912 00001738 616E2062650A        <1>
  1913 0000173E 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1914 00001747 00                  <1>
  1915                              <1> 		
  1916 00001748 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1917 00001751 0A                  <1>
  1918 00001752 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1919 0000175B 73736F722072616E20- <1>
  1920 00001764 696E746F20616E2049- <1>
  1921 0000176D 4E544F20696E737472- <1>
  1922 00001776 756374696F6E207769- <1>
  1923 0000177F 746820746865206F76- <1>
  1924 00001788 6572666C6F7720666C- <1>
  1925 00001791 6167207365742E0A00  <1>
  1926                              <1> 		
  1927 0000179A 426F756E6473206368- <1> err5	db "Bounds check:",10
  1928 000017A3 65636B3A0A          <1>
  1929 000017A8 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1930 000017B1 73736F72207265626F- <1>
  1931 000017BA 756E6465642066726F- <1>
  1932 000017C3 6D206120424F554E44- <1>
  1933 000017CC 20696E737472756374- <1>
  1934 000017D5 696F6E2072756E206F- <1>
  1935 000017DE 6E20616E206F706572- <1>
  1936 000017E7 616E64207468617420- <1>
  1937 000017F0 776173206F75740A    <1>
  1938 000017F8 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1939 00001801 2E0A00              <1>
  1940                              <1> 		
  1941 00001804 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1942 0000180D 70636F64653A0A      <1>
  1943 00001814 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1944 0000181D 73736F722068617320- <1>
  1945 00001826 6E6F20696465612077- <1>
  1946 0000182F 686174206974207761- <1>
  1947 00001838 7320747279696E6720- <1>
  1948 00001841 746F20657865637574- <1>
  1949 0000184A 652E20446F6E277420- <1>
  1950 00001853 72756E205353453420- <1>
  1951 0000185C 636F64650A          <1>
  1952 00001861 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1953 0000186A 0A00                <1>
  1954                              <1> 		
  1955 0000186C 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1956 00001875 6F72206E6F74206176- <1>
  1957 0000187E 61696C61626C653A0A  <1>
  1958 00001887 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1959 00001890 206B6E6F7720746865- <1>
  1960 00001899 7920646F6E2774206D- <1>
  1961 000018A2 616B652074686F7365- <1>
  1962 000018AB 20616E796D6F726521- <1>
  1963 000018B4 0A00                <1>
  1964                              <1> 		
  1965 000018B6 446F75626C65206661- <1> err8	db "Double fault:",10
  1966 000018BF 756C743A0A          <1>
  1967 000018C4 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1968 000018CD 74696F6E2068616E64- <1>
  1969 000018D6 6C657220636F756C64- <1>
  1970 000018DF 206E6F742068616E64- <1>
  1971 000018E8 6C6520746861742069- <1>
  1972 000018F1 7420636F756C64206E- <1>
  1973 000018FA 6F742068616E646C65- <1>
  1974 00001903 20616E206578636570- <1>
  1975 0000190C 74696F6E2E0A00      <1>
  1976                              <1> 		
  1977 00001913 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1978 0000191C 6F72207365676D656E- <1>
  1979 00001925 74206F76657272756E- <1>
  1980 0000192E 3A0A00              <1>
  1981 00001931 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1982 0000193A 722068617070656E73- <1>
  1983 00001943 20696E206D6F646572- <1>
  1984 0000194C 6E20636F6D70757465- <1>
  1985 00001955 72732C20616E64206E- <1>
  1986 0000195E 657665722073686F75- <1>
  1987 00001967 6C642E0A00          <1>
  1988                              <1> 
  1989 0000196C 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1990 00001975 53533A0A            <1>
  1991 00001979 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1992 00001982 686174207761732073- <1>
  1993 0000198B 776974636865642074- <1>
  1994 00001994 6F20697320696E7661- <1>
  1995 0000199D 6C69642E204E6F7468- <1>
  1996 000019A6 696E672066756E6E79- <1>
  1997 000019AF 20686572652E0A00    <1>
  1998                              <1> 		
  1999 000019B7 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2000 000019C0 6F742070726573656E- <1>
  2001 000019C9 743A0A              <1>
  2002 000019CC 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2003 000019D5 6E7420626974206F66- <1>
  2004 000019DE 20746865207365676D- <1>
  2005 000019E7 656E74206465736372- <1>
  2006 000019F0 6970746F7220697320- <1>
  2007 000019F9 73657420746F207A65- <1>
  2008 00001A02 726F2E0A00          <1>
  2009                              <1> 		
  2010 00001A07 537461636B20657863- <1> err12	db "Stack exception:",10
  2011 00001A10 657074696F6E3A0A    <1>
  2012 00001A18 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2013 00001A21 7363726970746F7220- <1>
  2014 00001A2A 697320696E76616C69- <1>
  2015 00001A33 64206F72206E6F7420- <1>
  2016 00001A3C 70726573656E74206F- <1>
  2017 00001A45 7220697473206C696D- <1>
  2018 00001A4E 697420697320746F6F- <1>
  2019 00001A57 20736D616C6C2E0A00  <1>
  2020                              <1> 		
  2021 00001A60 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2022 00001A69 726F74656374696F6E- <1>
  2023 00001A72 2076696F6C6174696F- <1>
  2024 00001A7B 6E3A0A              <1>
  2025 00001A7E 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2026 00001A87 746564207468652063- <1>
  2027 00001A90 6F6D70757465722E20- <1>
  2028 00001A99 537465702061776179- <1>
  2029 00001AA2 20736C6F776C792E20- <1>
  2030 00001AAB 546865204642492069- <1>
  2031 00001AB4 73206F6E2069747320- <1>
  2032 00001ABD 7761792E0A00        <1>
  2033                              <1> 		
  2034 00001AC3 50616765206661756C- <1> err14	db "Page fault:",10
  2035 00001ACC 743A0A              <1>
  2036 00001ACF 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2037 00001AD8 746861742077617320- <1>
  2038 00001AE1 726571756573746564- <1>
  2039 00001AEA 20776173206E6F7420- <1>
  2040 00001AF3 617661696C61626C65- <1>
  2041 00001AFC 2E0A00              <1>
  2042                              <1> 		
  2043 00001AFF 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2044 00001B08 666F7220506C616E20- <1>
  2045 00001B11 523A0A              <1>
  2046 00001B14 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2047 00001B1D 727275707420697320- <1>
  2048 00001B26 726573657276656420- <1>
  2049 00001B2F 666F72207573616765- <1>
  2050 00001B38 206F6E6C7920627920- <1>
  2051 00001B41 746865206D696C6974- <1>
  2052 00001B4A 617279207768656E20- <1>
  2053 00001B53 6974206973206E6563- <1>
  2054 00001B5C 6573736172790A      <1>
  2055 00001B63 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  2056 00001B6C 746520612066756C6C- <1>
  2057 00001B75 2D7363616C6520636F- <1>
  2058 00001B7E 757020642782746174- <1>
  2059 00001B87 2E0A00              <1>
  2060                              <1> 		
  2061 00001B8A 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2062 00001B93 68656C6C206A757374- <1>
  2063 00001B9C 2068617070656E6564- <1>
  2064 00001BA5 3F2049732065766572- <1>
  2065 00001BAE 796F6E65206F6B6179- <1>
  2066 00001BB7 3F2048617264206472- <1>
  2067 00001BC0 6976653F2056696465- <1>
  2068 00001BC9 6F20636172643F0A    <1>
  2069 00001BD1 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2070 00001BDA 726520796F75207468- <1>
  2071 00001BE3 6572653F0A00        <1>
  2072                              <1> %else
  2073                              <1> unhand:	
  2074                              <1> 	%assign i 0
  2075                              <1> 	%rep 32
  2076                              <1> 	mov byte [intprob], i
  2077                              <1> 	jmp unhand2
  2078                              <1> 	%assign i i+1
  2079                              <1> 	%endrep
  2080                              <1> unhand2:
  2081                              <1> 	cmp byte [intprob], 3
  2082                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2083                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2084                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2085                              <1> 	mov bl, [intprob]
  2086                              <1> 	jmp exitprog
  2087                              <1> intprob db 0
  2088                              <1> %endif
  2089                                      %include "source/ints.asm"
  2090                              <1> newints:	;for great justice
  2091 00001BE9 80FC00              <1> 	cmp ah, 0
  2092 00001BEC 0F84A3000000        <1> 	je near exitprog   ;kills app
  2093 00001BF2 80FC01              <1> 	cmp ah, 1
  2094 00001BF5 0F8422010000        <1> 	je near prntstr  ;print string
  2095 00001BFB 80FC02              <1> 	cmp ah, 2
  2096 00001BFE 0F84C0010000        <1> 	je near readstr	;read string
  2097 00001C04 80FC03              <1> 	cmp ah, 3
  2098 00001C07 0F84E0010000        <1> 	je near clearscrn	;clear screen
  2099 00001C0D 80FC04              <1> 	cmp ah, 4
  2100 00001C10 0F8455020000        <1> 	je near prntreadstr	;read and print string
  2101 00001C16 80FC05              <1> 	cmp ah, 5
  2102 00001C19 0F841A070000        <1> 	je near readchar	;get char
  2103 00001C1F 80FC06              <1> 	cmp ah, 6
  2104 00001C22 0F8481070000        <1> 	je near prntchar	;print char
  2105 00001C28 80FC07              <1> 	cmp ah, 7
  2106 00001C2B 0F849E090000        <1> 	je near openfile	;read file
  2107                              <1> ;	cmp ah, 8
  2108                              <1> ;	je near closefile	;close file
  2109 00001C31 80FC09              <1> 	cmp ah, 9
  2110 00001C34 0F849F090000        <1> 	je near num2str	;convert number to string
  2111 00001C3A 80FC0A              <1> 	cmp ah, 10
  2112 00001C3D 0F84AE090000        <1> 	je near str2num	;convert string to number
  2113                              <1> %ifdef threads.included
  2114 00001C43 80FC0B              <1> 	cmp ah, 11
  2115 00001C46 0F84B1090000        <1> 	je near forkthread	;create thread
  2116                              <1> %endif
  2117 00001C4C 80FC0C              <1> 	cmp ah, 12
  2118 00001C4F 0F847F0A0000        <1> 	je near gettime	;get time
  2119 00001C55 80FC0D              <1> 	cmp ah, 13
  2120 00001C58 0F848B0A0000        <1> 	je near settime	;set time
  2121 00001C5E 80FC0E              <1> 	cmp ah, 14
  2122 00001C61 0F84920A0000        <1> 	je near runcmd	;run program
  2123 00001C67 80FC0F              <1> 	cmp ah, 15
  2124 00001C6A 0F849E0A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2125 00001C70 80FC10              <1> 	cmp ah, 16
  2126 00001C73 0F84C00A0000        <1> 	je near hooksig	;hook code to a signal
  2127                              <1> %ifdef gui.included
  2128 00001C79 80FC11              <1> 	cmp ah, 17
  2129 00001C7C 0F84C70A0000        <1> 	je near guiint	;GUI operations
  2130                              <1> %endif
  2131                              <1> %ifdef sound.included
  2132 00001C82 80FC12              <1> 	cmp ah, 18
  2133 00001C85 0F840C0C0000        <1> 	je near soundint	;sound operations
  2134                              <1> %endif
  2135                              <1> %ifdef network.included
  2136 00001C8B 80FC13              <1> 	cmp ah, 19
  2137 00001C8E 0F84080C0000        <1> 	je near netint	;networking operations
  2138                              <1> %endif
  2139 00001C94 CF                  <1> 	iret
  2140                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2141                              <2> exitprog:
  2142 00001C95 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2143 00001C99 8ED8                <2> 	mov ds, ax
  2144 00001C9B 8EC0                <2> 	mov es, ax
  2145 00001C9D 8EE0                <2> 	mov fs, ax
  2146 00001C9F 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2147 00001CA3 8EE8                <2> 	mov gs, ax
  2148 00001CA5 C705[C36A0000]0000- <2> 	mov dword [currentthread], 0
  2149 00001CAD 0000                <2>
  2150 00001CAF C705[BE6A0000]0400- <2> 	mov dword [lastthread], 4
  2151 00001CB7 0000                <2>
  2152 00001CB9 C605[C26A0000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2153 00001CC0 8B25[98A40300]      <2> 	mov esp, [previousstack] ;and this
  2154 00001CC6 81FB00000000        <2> 	cmp ebx, 0
  2155 00001CCC 0F8501000000        <2> 	jne near .error
  2156 00001CD2 C3                  <2> 	ret
  2157                              <2> .error:
  2158 00001CD3 89D9                <2> 	mov ecx, ebx
  2159 00001CD5 B006                <2> 	mov al, 6
  2160 00001CD7 A2[AA310000]        <2> 	mov [firsthexshown], al
  2161 00001CDC 51                  <2> 	push ecx
  2162 00001CDD BE[F81C0000]        <2> 	mov esi, .msg1
  2163 00001CE2 E855000000          <2> 	call printhighlight
  2164 00001CE7 59                  <2> 	pop ecx
  2165 00001CE8 E8D2140000          <2> 	call showhex
  2166 00001CED BE[0D1D0000]        <2> 	mov esi, .msg2
  2167 00001CF2 E845000000          <2> 	call printhighlight
  2168 00001CF7 C3                  <2> 	ret
  2169                              <2> 	
  2170 00001CF8 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2171 00001D01 7461747573206F6620- <2>
  2172 00001D0A 307800              <2>
  2173 00001D0D 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2174 00001D16 726E65642E0A00      <2>
  2175                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2176                              <2> prntstr:
  2177 00001D1D 30E4                <2> xor ah, ah
  2178 00001D1F E82B000000          <2> call printint
  2179 00001D24 E97FE5FFFF          <2> jmp timerinterrupt
  2180                              <2> 
  2181                              <2> 	printquiet:
  2182 00001D29 6631C0              <2> 		xor ax, ax
  2183 00001D2C 66A3[C21D0000]      <2> 		mov [endkeyprint], ax
  2184 00001D32 66BB0700            <2> 		mov bx, 7
  2185 00001D36 E82D000000          <2> 		call printint.b
  2186 00001D3B C3                  <2> 		ret
  2187                              <2> 
  2188                              <2> 	printhighlight:
  2189 00001D3C 6631C0              <2> 		xor ax, ax
  2190 00001D3F 66BBF000            <2> 		mov bx, 0xF0
  2191 00001D43 E907000000          <2> 		jmp printint
  2192                              <2> 
  2193                              <2>     print:
  2194 00001D48 6631C0              <2> 		xor ax, ax
  2195 00001D4B 66BB0700            <2> 		mov bx, 7
  2196                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2197 00001D4F 56                  <2> 		push esi
  2198 00001D50 66A3[C21D0000]      <2> 		mov [endkeyprint], ax
  2199 00001D56 E80D000000          <2> 		call .b
  2200 00001D5B 89F1                <2> 		mov ecx, esi
  2201 00001D5D 5F                  <2> 		pop edi
  2202 00001D5E 29F9                <2> 		sub ecx, edi
  2203 00001D60 51                  <2> 		push ecx
  2204 00001D61 E83B0B0000          <2> 		call termcopy
  2205 00001D66 59                  <2> 		pop ecx
  2206 00001D67 C3                  <2> 		ret
  2207                              <2> 	.b:	
  2208 00001D68 53                  <2> 		push ebx
  2209 00001D69 31C0                <2> 		xor eax, eax
  2210 00001D6B 8A06                <2> 		mov al, [esi]
  2211 00001D6D 3CFF                <2> 		cmp al, 0xFF
  2212 00001D6F 7438                <2> 		je .doneutf
  2213 00001D71 3CC0                <2> 		cmp al, 0xC0
  2214 00001D73 7234                <2> 		jb .doneutf
  2215 00001D75 3CE0                <2> 		cmp al, 0xE0
  2216 00001D77 721D                <2> 		jb .two
  2217 00001D79 46                  <2> 		inc esi
  2218 00001D7A 668B0E              <2> 		mov cx, [esi]
  2219 00001D7D 46                  <2> 		inc esi
  2220 00001D7E C0E004              <2> 		shl al, 4
  2221 00001D81 66C1E102            <2> 		shl cx, 2
  2222 00001D85 C0ED02              <2> 		shr ch, 2
  2223 00001D88 66C1E902            <2> 		shr cx, 2
  2224 00001D8C 08C5                <2> 		or ch, al
  2225 00001D8E 6689C8              <2> 		mov ax, cx
  2226 00001D91 E913000000          <2> 		jmp .doneutf
  2227                              <2> 	.two:
  2228 00001D96 8A2E                <2> 		mov ch, [esi]
  2229 00001D98 46                  <2> 		inc esi
  2230 00001D99 8A0E                <2> 		mov cl, [esi]
  2231 00001D9B 66C1E102            <2> 		shl cx, 2
  2232 00001D9F C0ED02              <2> 		shr ch, 2
  2233 00001DA2 66C1E902            <2> 		shr cx, 2
  2234 00001DA6 6689C8              <2> 		mov ax, cx
  2235                              <2> 	.doneutf:
  2236 00001DA9 5B                  <2> 		pop ebx
  2237 00001DAA 663B05[C21D0000]    <2> 		cmp ax, [endkeyprint]
  2238 00001DB1 740E                <2> 		je .done
  2239 00001DB3 663DFFFE            <2> 		cmp ax, 0xFEFF
  2240 00001DB7 7405                <2> 		je .noprint
  2241 00001DB9 E818060000          <2> 		call prcharq
  2242                              <2> 	.noprint:
  2243 00001DBE 46                  <2> 		inc esi
  2244 00001DBF EBA7                <2> 		jmp .b
  2245                              <2> 	.done:
  2246 00001DC1 C3                  <2> 		ret
  2247                              <2> 
  2248 00001DC2 0000                <2> endkeyprint dw 0
  2249                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2250                              <2> readstr:
  2251 00001DC4 E805000000          <2> call readint
  2252 00001DC9 E9DAE4FFFF          <2> jmp timerinterrupt
  2253                              <2> 
  2254                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2255 00001DCE 89C3                <2> 		mov ebx, eax
  2256                              <2> 	.b:
  2257 00001DD0 53                  <2> 		push ebx
  2258 00001DD1 57                  <2> 		push edi
  2259 00001DD2 56                  <2> 		push esi
  2260 00001DD3 30C0                <2> 		xor al, al
  2261 00001DD5 E86B050000          <2> 		call rdcharint
  2262 00001DDA 5E                  <2> 		pop esi
  2263 00001DDB 8806                <2> 		mov [esi], al
  2264 00001DDD 46                  <2> 		inc esi
  2265 00001DDE 5F                  <2> 		pop edi
  2266 00001DDF 5B                  <2> 		pop ebx
  2267 00001DE0 39FE                <2> 		cmp esi, edi
  2268 00001DE2 7304                <2> 		jae .done
  2269 00001DE4 38D8                <2> 		cmp al, bl
  2270 00001DE6 75E8                <2> 		jne .b
  2271                              <2> 	.done:
  2272 00001DE8 4E                  <2> 		dec esi
  2273 00001DE9 C60600              <2> 		mov byte [esi], 0
  2274 00001DEC C3                  <2> 		ret
  2275                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2276                              <2> clearscrn:
  2277 00001DED E805000000          <2> call clear
  2278 00001DF2 E9B1E4FFFF          <2> jmp timerinterrupt
  2279                              <2> %ifdef io.serial
  2280                              <2> clear:
  2281                              <2> 	ret
  2282                              <2> %else
  2283                              <2> clear:
  2284 00001DF7 668B0D[C9250000]    <2> 		mov cx, [charxy]
  2285 00001DFE BF[2EC20300]        <2> 		mov edi, videobuf
  2286 00001E03 31C0                <2> 		xor eax, eax
  2287 00001E05 A3[BF250000]        <2> 		mov [linebeginpos], eax
  2288 00001E0A A3[C3250000]        <2> 		mov [videobufpos], eax
  2289 00001E0F 6631D2              <2> 		xor dx, dx
  2290 00001E12 66A3[C7250000]      <2> 		mov [charpos], ax
  2291 00001E18 66B80700            <2> 		mov ax, 7
  2292 00001E1C C1E010              <2> 		shl eax, 16
  2293                              <2> 	clearb:
  2294 00001E1F 8907                <2> 		mov [edi], eax
  2295 00001E21 81C704000000        <2> 		add edi, 4
  2296 00001E27 FEC9                <2> 		dec cl
  2297 00001E29 80F900              <2> 		cmp cl, 0
  2298 00001E2C 75F1                <2> 		jne clearb
  2299 00001E2E 8A0D[C9250000]      <2> 		mov cl, [charxy]
  2300 00001E34 FECD                <2> 		dec ch
  2301 00001E36 80FD00              <2> 		cmp ch, 0
  2302 00001E39 75E4                <2> 		jne clearb
  2303                              <2> 	cleardouble:
  2304 00001E3B BF[76970400]        <2> 		mov edi, videobuf2
  2305 00001E40 668B0D[C9250000]    <2> 		mov cx, [charxy]
  2306 00001E47 31C0                <2> 		xor eax, eax
  2307                              <2> 	clearc:
  2308 00001E49 8907                <2> 		mov [edi], eax
  2309 00001E4B 81C704000000        <2> 		add edi, 4
  2310 00001E51 FEC9                <2> 		dec cl
  2311 00001E53 80F900              <2> 		cmp cl, 0
  2312 00001E56 75F1                <2> 		jne clearc
  2313 00001E58 8A0D[C9250000]      <2> 		mov cl, [charxy]
  2314 00001E5E FECD                <2> 		dec ch
  2315 00001E60 80FD00              <2> 		cmp ch, 0
  2316 00001E63 75E4                <2> 		jne clearc
  2317 00001E65 E8370A0000          <2> 		call termcopy
  2318 00001E6A C3                  <2> 		ret
  2319                              <2> %endif
  2320                              <2> 		
  2321                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2322                              <2> prntreadstr:
  2323 00001E6B E80B000000          <2> call rdprint
  2324 00001E70 E933E4FFFF          <2> jmp timerinterrupt
  2325                              <2> 
  2326                              <2> readline:
  2327 00001E75 B00A                <2>   mov al, 10
  2328 00001E77 66BB0700            <2>   mov bx, 7
  2329                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2330 00001E7B E80F000000          <2> 	call rdprintdos
  2331 00001E80 50                  <2> 	push eax
  2332 00001E81 A0[24230000]        <2> 	mov al, [endkeyrdpr]
  2333 00001E86 30E4                <2> 	xor ah, ah
  2334 00001E88 E832050000          <2> 	call prcharint
  2335 00001E8D 58                  <2> 	pop eax
  2336 00001E8E C3                  <2> 	ret
  2337                              <2> 
  2338                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2339 00001E8F 8935[2E230000]      <2> 		mov [buftxtloc], esi
  2340 00001E95 A2[24230000]        <2> 		mov [endkeyrdpr], al
  2341 00001E9A 66891D[26230000]    <2> 		mov [modkeyrdpr], bx
  2342 00001EA1 8935[28230000]      <2> 		mov [firstesirdpr], esi
  2343 00001EA7 893D[32230000]      <2> 		mov [endbufferrdpr], edi
  2344 00001EAD 8B3D[CA6C0500]      <2> 		mov edi, [commandsentered]
  2345 00001EB3 893D[C66C0500]      <2> 		mov [commandlistentries], edi
  2346                              <2> 	rdprintb:
  2347 00001EB9 56                  <2> 		push esi
  2348 00001EBA B001                <2> 		mov al, 1
  2349 00001EBC E884040000          <2> 		call rdcharint
  2350 00001EC1 8A25[A5230000]      <2> 		mov ah, [lastkey + 2]
  2351 00001EC7 88E1                <2> 		mov cl, ah
  2352 00001EC9 5E                  <2> 		pop esi
  2353                              <2> %ifdef io.serial
  2354                              <2> 		cmp ah, 0x41
  2355                              <2> 		je near rdprup
  2356                              <2> 		cmp ah, 0x42
  2357                              <2> 		je near rdprdown
  2358                              <2> 		cmp ah, 0x43
  2359                              <2> 		je near rdprright
  2360                              <2> 		cmp ah, 0x44
  2361                              <2> 		je near rdprleft
  2362                              <2> 		cmp ah, 0x31
  2363                              <2> 		je near rdprhome
  2364                              <2> 		cmp ah, 0x48
  2365                              <2> 		je near rdprhome
  2366                              <2> 		cmp ah, 0x46
  2367                              <2> 		je near rdprend
  2368                              <2> 		cmp ah, 0x33
  2369                              <2> 		je near rdprdel
  2370                              <2> 		cmp ah, 0x34
  2371                              <2> 		je near rdprend
  2372                              <2> %else
  2373 00001ECA 803D[795F0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2374 00001ED1 753F                <2> 		jne notspecialrdprnt
  2375 00001ED3 80FC53              <2> 		cmp ah, 0x53
  2376 00001ED6 0F84B1030000        <2> 		je near rdprdel
  2377 00001EDC 80FC47              <2> 		cmp ah, 0x47
  2378 00001EDF 0F847E010000        <2> 		je near rdprhome
  2379 00001EE5 80FC4F              <2> 		cmp ah, 0x4F
  2380 00001EE8 0F8494010000        <2> 		je near rdprend
  2381 00001EEE 80FC50              <2> 		cmp ah, 0x50
  2382 00001EF1 0F8424020000        <2> 		je near rdprdown
  2383 00001EF7 80FC4D              <2> 		cmp ah, 0x4D
  2384 00001EFA 0F84C1010000        <2> 		je near rdprright
  2385 00001F00 80FC4B              <2> 		cmp ah, 0x4B
  2386 00001F03 0F8496010000        <2> 		je near rdprleft
  2387 00001F09 80FC48              <2> 		cmp ah, 0x48
  2388 00001F0C 0F844C020000        <2> 		je near rdprup
  2389                              <2> 	notspecialrdprnt:
  2390                              <2> %endif
  2391 00001F12 66A1[A3230000]      <2> 		mov ax, [lastkey]
  2392 00001F18 663D0800            <2> 		cmp ax, 8
  2393 00001F1C 0F84A0030000        <2> 		je near rdprbscheck
  2394 00001F22 663D0000            <2> 		cmp ax, 0
  2395 00001F26 7491                <2> 		je rdprintb
  2396 00001F28 80F900              <2> 		cmp cl, 0
  2397 00001F2B 748C                <2> 		je rdprintb
  2398 00001F2D 663D8000            <2> 		cmp ax, 0x80
  2399 00001F31 7257                <2> 		jb .normal
  2400 00001F33 663D0008            <2> 		cmp ax, 0x800
  2401 00001F37 7321                <2> 		jae .three
  2402 00001F39 46                  <2> 		inc esi
  2403 00001F3A 3B35[32230000]      <2> 		cmp esi, [endbufferrdpr]
  2404 00001F40 0F83DA000000        <2> 		jae near donerdprinc
  2405 00001F46 66C1E002            <2> 		shl ax, 2
  2406 00001F4A C0E802              <2> 		shr al, 2
  2407 00001F4D 0C80                <2> 		or al, 10000000b
  2408 00001F4F 80CCC0              <2> 		or ah, 11000000b
  2409 00001F52 8866FF              <2> 		mov [esi - 1], ah
  2410 00001F55 E930000000          <2> 		jmp .normal
  2411                              <2> .three:	
  2412 00001F5A 81C602000000        <2> 		add esi, 2
  2413 00001F60 3B35[32230000]      <2> 		cmp esi, [endbufferrdpr]
  2414 00001F66 0F83B4000000        <2> 		jae near donerdprinc
  2415 00001F6C 88E1                <2> 		mov cl, ah
  2416 00001F6E C0E904              <2> 		shr cl, 4
  2417 00001F71 80C9E0              <2> 		or cl, 11100000b
  2418 00001F74 884EFE              <2> 		mov [esi - 2], cl
  2419 00001F77 66C1E004            <2> 		shl ax, 4
  2420 00001F7B 66C1E802            <2> 		shr ax, 2
  2421 00001F7F 80CC80              <2> 		or ah, 10000000b
  2422 00001F82 C0E802              <2> 		shr al, 2
  2423 00001F85 0C80                <2> 		or al, 10000000b
  2424 00001F87 8866FF              <2> 		mov [esi - 1], ah
  2425                              <2> .normal:
  2426 00001F8A 8806                <2> 		mov [esi], al
  2427 00001F8C 46                  <2> 		inc esi
  2428 00001F8D 66A1[A3230000]      <2> 		mov ax, [lastkey]
  2429                              <2> 	bscheckequal:
  2430 00001F93 668B1D[26230000]    <2> 		mov bx, [modkeyrdpr]
  2431 00001F9A 803D[2D230000]00    <2> 		cmp byte [txtmask], 0
  2432 00001FA1 7407                <2> 		je nomasktxt
  2433 00001FA3 30E4                <2> 		xor ah, ah
  2434 00001FA5 A0[2D230000]        <2> 		mov al, [txtmask]
  2435                              <2> 	nomasktxt:
  2436 00001FAA 56                  <2> 		push esi
  2437 00001FAB 66A3[22230000]      <2> 		mov [axcache], ax
  2438 00001FB1 668B1D[24230000]    <2> 		mov bx, [endkeyrdpr]
  2439 00001FB8 6639D8              <2> 		cmp ax, bx
  2440 00001FBB 7432                <2> 		je nobackprintbuftxt2
  2441 00001FBD E8FD030000          <2> 		call prcharint
  2442 00001FC2 BE[18B70300]        <2> 		mov esi, buftxt2
  2443 00001FC7 E85DFDFFFF          <2> 		call printquiet
  2444 00001FCC 66B82000            <2> 		mov ax, " "
  2445 00001FD0 E801040000          <2> 		call prcharq
  2446 00001FD5 66B80800            <2> 		mov ax, 8
  2447 00001FD9 81FE[18B70300]      <2> 		cmp esi, buftxt2
  2448 00001FDF 740E                <2> 		je nobackprintbuftxt2
  2449                              <2> 	backprintbuftxt2:
  2450 00001FE1 E8F0030000          <2> 		call prcharq
  2451 00001FE6 4E                  <2> 		dec esi
  2452 00001FE7 81FE[18B70300]      <2> 		cmp esi, buftxt2
  2453 00001FED 77F2                <2> 		ja backprintbuftxt2
  2454                              <2> 	nobackprintbuftxt2:
  2455 00001FEF 663D0A00            <2> 		cmp ax, 10
  2456 00001FF3 7405                <2> 		je nonobackprint
  2457 00001FF5 E8C5030000          <2> 		call prcharint
  2458                              <2> 	nonobackprint:
  2459 00001FFA 5E                  <2> 		pop esi
  2460 00001FFB 3B35[32230000]      <2> 		cmp esi, [endbufferrdpr]
  2461 00002001 0F8319000000        <2> 		jae near donerdprinc
  2462 00002007 66A1[22230000]      <2> 		mov ax, [axcache]
  2463 0000200D 8A25[24230000]      <2> 		mov ah, [endkeyrdpr]
  2464 00002013 38E0                <2> 		cmp al, ah
  2465 00002015 0F859EFEFFFF        <2> 		jne rdprintb
  2466 0000201B E901000000          <2> 		jmp donerdprint
  2467                              <2> 	donerdprinc:
  2468 00002020 46                  <2> 		inc esi
  2469                              <2> 	donerdprint:
  2470 00002021 4E                  <2> 		dec esi
  2471 00002022 BF[18B70300]        <2> 		mov edi, buftxt2
  2472                              <2> 	copylaterstuff:
  2473 00002027 8A07                <2> 		mov al, [edi]
  2474 00002029 3C00                <2> 		cmp al, 0
  2475 0000202B 7406                <2> 		je nocopylaterstuff
  2476 0000202D 8806                <2> 		mov [esi], al
  2477 0000202F 47                  <2> 		inc edi
  2478 00002030 46                  <2> 		inc esi
  2479 00002031 EBF4                <2> 		jmp copylaterstuff
  2480                              <2> 	nocopylaterstuff:
  2481 00002033 C60600              <2> 		mov byte [esi], 0
  2482 00002036 E80B000000          <2> 		call clearbuftxt2
  2483 0000203B 89F1                <2> 		mov ecx, esi
  2484 0000203D 8B3D[28230000]      <2> 		mov edi, [firstesirdpr]
  2485 00002043 29F9                <2> 		sub ecx, edi
  2486 00002045 C3                  <2> 		ret
  2487                              <2> 	
  2488                              <2> 	clearbuftxt2:
  2489 00002046 30C0                <2> 		xor al, al
  2490 00002048 BF[18B70300]        <2> 		mov edi, buftxt2
  2491                              <2> 	clearbuftxt2lp:
  2492 0000204D 8807                <2> 		mov [edi], al
  2493 0000204F 47                  <2> 		inc edi
  2494 00002050 81FF[18BB0300]      <2> 		cmp edi, buftxt
  2495 00002056 75F5                <2> 		jne clearbuftxt2lp
  2496 00002058 C3                  <2> 		ret
  2497                              <2> 	
  2498                              <2> 	rdprintb2:
  2499 00002059 E843080000          <2> 		call termcopy
  2500 0000205E E956FEFFFF          <2> 		jmp rdprintb
  2501                              <2> 	
  2502                              <2> 	rdprhome:
  2503 00002063 3B35[2E230000]      <2> 		cmp esi, [buftxtloc]
  2504 00002069 0F84EAFFFFFF        <2> 		je near rdprintb2
  2505 0000206F BF[18B70300]        <2> 		mov edi, buftxt2
  2506 00002074 8A07                <2> 		mov al, [edi]
  2507 00002076 E879020000          <2> 		call shiftbuftxt2
  2508 0000207B E856030000          <2> 		call prcharq
  2509 00002080 EBE1                <2> 		jmp rdprhome
  2510                              <2> 		
  2511                              <2> 	rdprend:
  2512 00002082 BF[18B70300]        <2> 		mov edi, buftxt2
  2513 00002087 8A07                <2> 		mov al, [edi]
  2514 00002089 3C00                <2> 		cmp al, 0
  2515 0000208B 0F84C8FFFFFF        <2> 		je near rdprintb2
  2516 00002091 8806                <2> 		mov [esi], al
  2517 00002093 E849000000          <2> 		call shiftbuftxt2lft
  2518 00002098 E839030000          <2> 		call prcharq
  2519 0000209D EBE3                <2> 		jmp rdprend
  2520                              <2> 	
  2521                              <2> 	rdprleft:
  2522 0000209F 3B35[2E230000]      <2> 		cmp esi, [buftxtloc]
  2523 000020A5 0F840EFEFFFF        <2> 		je near rdprintb
  2524 000020AB BF[18B70300]        <2> 		mov edi, buftxt2
  2525 000020B0 8A07                <2> 		mov al, [edi]
  2526 000020B2 E83D020000          <2> 		call shiftbuftxt2
  2527 000020B7 E803030000          <2> 		call prcharint
  2528 000020BC E9F8FDFFFF          <2> 		jmp rdprintb
  2529                              <2> 		
  2530                              <2> 	rdprright:
  2531 000020C1 BF[18B70300]        <2> 		mov edi, buftxt2
  2532 000020C6 8A07                <2> 		mov al, [edi]
  2533 000020C8 3C00                <2> 		cmp al, 0
  2534 000020CA 0F84E9FDFFFF        <2> 		je near rdprintb
  2535 000020D0 8806                <2> 		mov [esi], al
  2536 000020D2 E80A000000          <2> 		call shiftbuftxt2lft
  2537 000020D7 E8E3020000          <2> 		call prcharint
  2538 000020DC E9D8FDFFFF          <2> 		jmp rdprintb
  2539                              <2> 		
  2540                              <2> 	shiftbuftxt2lft:
  2541 000020E1 55                  <2> 		push ebp
  2542 000020E2 89FD                <2> 		mov ebp, edi
  2543                              <2> 	.lp:
  2544 000020E4 3C00                <2> 		cmp al, 0
  2545 000020E6 7408                <2> 		je noshiftbuftxt2lft
  2546 000020E8 47                  <2> 		inc edi
  2547 000020E9 8A07                <2> 		mov al, [edi]
  2548 000020EB 8847FF              <2> 		mov [edi - 1], al
  2549 000020EE EBF4                <2> 		jmp .lp
  2550                              <2> 	noshiftbuftxt2lft:
  2551 000020F0 8A4500              <2> 		mov al, [ebp]
  2552 000020F3 5D                  <2> 		pop ebp
  2553 000020F4 3CC0                <2> 		cmp al, 0xC0
  2554 000020F6 7304                <2> 		jae .nofix
  2555 000020F8 3C80                <2> 		cmp al, 0x80
  2556 000020FA 73E5                <2> 		jae shiftbuftxt2lft
  2557                              <2> 	.nofix:
  2558 000020FC 8A06                <2> 		mov al, [esi]
  2559 000020FE 30E4                <2> 		xor ah, ah
  2560 00002100 46                  <2> 		inc esi
  2561 00002101 668B1D[26230000]    <2> 		mov bx, [modkeyrdpr]
  2562 00002108 C3                  <2> 		ret
  2563                              <2> 		
  2564                              <2> 	rdprdownbck:
  2565 00002109 FECC                <2> 		dec ah
  2566 0000210B 8825[2C230000]      <2> 		mov [commandedit], ah
  2567 00002111 E88D000000          <2> 		call rdprbckspc
  2568 00002116 E99EFDFFFF          <2> 		jmp rdprintb
  2569                              <2> 	
  2570                              <2> 	rdprdown:
  2571 0000211B 8A25[2C230000]      <2> 		mov ah, [commandedit]
  2572 00002121 80FC01              <2> 		cmp ah, 1
  2573 00002124 0F868FFDFFFF        <2> 		jbe near rdprintb
  2574 0000212A 8B3D[CA6C0500]      <2> 		mov edi, [commandsentered]
  2575 00002130 3B3D[C66C0500]      <2> 		cmp edi, [commandlistentries]
  2576 00002136 7618                <2> 		jbe .nofix
  2577 00002138 8105[C66C0500]0200- <2> 		add dword [commandlistentries], 2
  2578 00002140 0000                <2>
  2579 00002142 3B3D[C66C0500]      <2> 		cmp edi, [commandlistentries]
  2580 00002148 7706                <2> 		ja .nofix
  2581 0000214A 893D[C66C0500]      <2> 		mov [commandlistentries], edi
  2582                              <2> 	.nofix:
  2583 00002150 80FC02              <2> 		cmp ah, 2
  2584 00002153 74B4                <2> 		je rdprdownbck
  2585 00002155 80EC02              <2> 		sub ah, 2
  2586 00002158 8825[2C230000]      <2> 		mov [commandedit], ah
  2587                              <2> 		
  2588                              <2> 	rdprup:
  2589 0000215E 3805[2C230000]      <2> 		cmp [commandedit], al
  2590 00002164 0F844FFDFFFF        <2> 		je near rdprintb
  2591 0000216A 813D[C66C0500]0000- <2> 		cmp dword [commandlistentries], 0
  2592 00002172 0000                <2>
  2593 00002174 0F843FFDFFFF        <2> 		je near rdprintb
  2594 0000217A FF0D[C66C0500]      <2> 		dec dword [commandlistentries]
  2595                              <2> 	.lp:
  2596 00002180 BF[18B70300]        <2> 		mov edi, buftxt2
  2597 00002185 8A07                <2> 		mov al, [edi]
  2598 00002187 3C00                <2> 		cmp al, 0
  2599 00002189 740E                <2> 		je .start
  2600 0000218B 8806                <2> 		mov [esi], al
  2601 0000218D E84FFFFFFF          <2> 		call shiftbuftxt2lft
  2602 00002192 E83F020000          <2> 		call prcharq
  2603 00002197 EBE7                <2> 		jmp .lp
  2604                              <2> 	.start:
  2605 00002199 E805000000          <2> 		call rdprbckspc
  2606 0000219E E948000000          <2> 		jmp getcurrentcommandstr
  2607                              <2> 	rdprbckspc:
  2608 000021A3 3B35[2E230000]      <2> 		cmp esi, [buftxtloc]
  2609 000021A9 7432                <2> 		je nordprupbck
  2610                              <2> 	rdprupbckspclp:
  2611 000021AB 66B80800            <2> 		mov ax, 8
  2612 000021AF 668B1D[26230000]    <2> 		mov bx, [modkeyrdpr]
  2613 000021B6 E81B020000          <2> 		call prcharq
  2614 000021BB 66B82000            <2> 		mov ax, ' '
  2615 000021BF E812020000          <2> 		call prcharq
  2616 000021C4 66B80800            <2> 		mov ax, 8
  2617 000021C8 E809020000          <2> 		call prcharq
  2618 000021CD 4E                  <2> 		dec esi
  2619 000021CE 3B35[2E230000]      <2> 		cmp esi, [buftxtloc]
  2620 000021D4 7402                <2> 		je nordprupbck2
  2621 000021D6 EBD3                <2> 		jmp rdprupbckspclp
  2622                              <2> 	nordprupbck2:
  2623 000021D8 E8C4060000          <2> 		call termcopy
  2624                              <2> 	nordprupbck:
  2625 000021DD 8B3D[C26C0500]      <2> 		mov edi, [commandbufpos]
  2626 000021E3 81C7[CE6C0500]      <2> 		add edi, commandbuf
  2627 000021E9 4F                  <2> 		dec edi
  2628 000021EA C3                  <2> 		ret
  2629                              <2> 	getcurrentcommandstr:
  2630 000021EB 8A25[2C230000]      <2> 		mov ah, [commandedit]
  2631 000021F1 FE05[2C230000]      <2> 		inc byte [commandedit]
  2632                              <2> 	getccmdlp:
  2633 000021F7 4F                  <2> 		dec edi
  2634 000021F8 8A07                <2> 		mov al, [edi]
  2635 000021FA 81FF[CE6C0500]      <2> 		cmp edi, commandbuf
  2636 00002200 7231                <2> 		jb getcmdresetcommandbuf
  2637 00002202 81EF[CE6C0500]      <2> 		sub edi, commandbuf
  2638 00002208 3B3D[C26C0500]      <2> 		cmp edi, [commandbufpos]
  2639 0000220E 0F84A5FCFFFF        <2> 		je near rdprintb
  2640 00002214 81C7[CE6C0500]      <2> 		add edi, commandbuf
  2641 0000221A 3C00                <2> 		cmp al, 0
  2642 0000221C 75D9                <2> 		jne getccmdlp
  2643 0000221E FECC                <2> 		dec ah
  2644 00002220 80FC00              <2> 		cmp ah, 0
  2645 00002223 77D2                <2> 		ja getccmdlp
  2646 00002225 47                  <2> 		inc edi
  2647 00002226 81FF[CE7C0500]      <2> 		cmp edi, commandbufend
  2648 0000222C 770D                <2> 		ja fixcmdbufb4morerdpr
  2649 0000222E E915000000          <2> 		jmp morerdprup
  2650                              <2> 	getcmdresetcommandbuf:
  2651 00002233 BF[CE7C0500]        <2> 		mov edi, commandbufend
  2652 00002238 47                  <2> 		inc edi
  2653 00002239 EBBC                <2> 		jmp getccmdlp
  2654                              <2> 	fixcmdbufb4morerdpr:
  2655 0000223B 4F                  <2> 		dec edi
  2656 0000223C 81EF[CE7C0500]      <2> 		sub edi, commandbufend
  2657 00002242 81C7[CE6C0500]      <2> 		add edi, commandbuf
  2658                              <2> 	morerdprup:
  2659 00002248 8A07                <2> 		mov al, [edi]
  2660 0000224A 47                  <2> 		inc edi
  2661 0000224B 81EF[CE6C0500]      <2> 		sub edi, commandbuf
  2662 00002251 3C00                <2> 		cmp al, 0
  2663 00002253 0F8400FEFFFF        <2> 		je near rdprintb2
  2664 00002259 3B3D[C26C0500]      <2> 		cmp edi, [commandbufpos]
  2665 0000225F 0F83F4FDFFFF        <2> 		jae near rdprintb2
  2666 00002265 81C7[CE6C0500]      <2> 		add edi, commandbuf
  2667 0000226B 8806                <2> 		mov [esi], al
  2668 0000226D 46                  <2> 		inc esi
  2669 0000226E 57                  <2> 		push edi
  2670 0000226F 668B1D[26230000]    <2> 		mov bx, [modkeyrdpr]
  2671 00002276 30E4                <2> 		xor ah, ah
  2672 00002278 E859010000          <2> 		call prcharq
  2673 0000227D 5F                  <2> 		pop edi
  2674 0000227E 81FF[CE7C0500]      <2> 		cmp edi, commandbufend
  2675 00002284 76C2                <2> 		jbe morerdprup
  2676 00002286 BF[CE6C0500]        <2> 		mov edi, commandbuf
  2677 0000228B EBBB                <2> 		jmp morerdprup
  2678                              <2> 
  2679                              <2> 	rdprdel:
  2680 0000228D BF[18B70300]        <2> 		mov edi, buftxt2
  2681 00002292 8A07                <2> 		mov al, [edi]
  2682 00002294 3C00                <2> 		cmp al, 0
  2683 00002296 0F841DFCFFFF        <2> 		je near rdprintb
  2684 0000229C 8806                <2> 		mov [esi], al
  2685 0000229E 3C80                <2> 		cmp al, 0x80
  2686 000022A0 7216                <2> 		jb .fn
  2687                              <2> 	.lp:
  2688 000022A2 46                  <2> 		inc esi
  2689 000022A3 47                  <2> 		inc edi
  2690 000022A4 8A07                <2> 		mov al, [edi]
  2691 000022A6 3C00                <2> 		cmp al, 0
  2692 000022A8 0F840BFCFFFF        <2> 		je near rdprintb
  2693 000022AE 8806                <2> 		mov [esi], al
  2694 000022B0 3C80                <2> 		cmp al, 0x80
  2695 000022B2 7204                <2> 		jb .fn
  2696 000022B4 3CC0                <2> 		cmp al, 0xC0
  2697 000022B6 72EA                <2> 		jb .lp
  2698                              <2> 	.fn:
  2699 000022B8 E824FEFFFF          <2> 		call shiftbuftxt2lft
  2700 000022BD E814010000          <2> 		call prcharq
  2701                              <2> 		
  2702                              <2> 	rdprbscheck:
  2703 000022C2 3B35[28230000]      <2> 		cmp esi, [firstesirdpr]
  2704 000022C8 0F86EBFBFFFF        <2> 		jbe near rdprintb
  2705                              <2> 	goodbscheck:
  2706 000022CE 4E                  <2> 		dec esi
  2707 000022CF 8A46FF              <2> 		mov al, [esi - 1]
  2708 000022D2 C60600              <2> 		mov byte [esi], 0
  2709 000022D5 3CC0                <2> 		cmp al, 0xC0
  2710 000022D7 7309                <2> 		jae .onemore
  2711 000022D9 3C80                <2> 		cmp al, 0x80
  2712 000022DB 73F1                <2> 		jae goodbscheck
  2713 000022DD E904000000          <2> 		jmp .nomore
  2714                              <2> 	.onemore:
  2715 000022E2 4E                  <2> 		dec esi
  2716 000022E3 C60600              <2> 		mov byte [esi], 0		
  2717                              <2> 	.nomore:
  2718 000022E6 668B1D[26230000]    <2> 		mov bx, [modkeyrdpr]
  2719 000022ED B008                <2> 		mov al, 8
  2720 000022EF E99FFCFFFF          <2> 		jmp bscheckequal
  2721                              <2> 		
  2722                              <2> 	shiftbuftxt2:
  2723 000022F4 55                  <2> 		push ebp
  2724 000022F5 89FD                <2> 		mov ebp, edi
  2725                              <2> 	.lp
  2726 000022F7 3C00                <2> 		cmp al, 0
  2727 000022F9 7409                <2> 		je noshiftbuftxt2
  2728 000022FB 47                  <2> 		inc edi
  2729 000022FC 8A27                <2> 		mov ah, [edi]
  2730 000022FE 8807                <2> 		mov [edi], al
  2731 00002300 88E0                <2> 		mov al, ah
  2732 00002302 EBF3                <2> 		jmp .lp
  2733                              <2> 	noshiftbuftxt2:
  2734 00002304 8A4500              <2> 		mov al, [ebp]
  2735 00002307 5D                  <2> 		pop ebp
  2736 00002308 3CC0                <2> 		cmp al, 0xC0
  2737 0000230A 7304                <2> 		jae .nofix
  2738 0000230C 3C80                <2> 		cmp al, 0x80
  2739 0000230E 73E4                <2> 		jae shiftbuftxt2
  2740                              <2> 	.nofix:
  2741 00002310 BF[18B70300]        <2> 		mov edi, buftxt2
  2742 00002315 4E                  <2> 		dec esi
  2743 00002316 8A06                <2> 		mov al, [esi]
  2744 00002318 8807                <2> 		mov [edi], al
  2745 0000231A C60600              <2> 		mov byte [esi], 0
  2746 0000231D 66B80800            <2> 		mov ax, 8
  2747 00002321 C3                  <2> 		ret
  2748                              <2> 		
  2749 00002322 0000                <2> axcache dw 0
  2750 00002324 0000                <2> endkeyrdpr dw 0
  2751 00002326 0000                <2> modkeyrdpr dw 0
  2752 00002328 00000000            <2> firstesirdpr dd 0
  2753 0000232C 00                  <2> commandedit db 0
  2754 0000232D 00                  <2> txtmask db 0
  2755 0000232E 00000000            <2> buftxtloc dd 0
  2756 00002332 00000000            <2> endbufferrdpr dd 0
  2757 00002336 082000              <2> backcursor db 8," ",0
  2758                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2759                              <2> readchar:
  2760 00002339 E807000000          <2> 	call rdcharint
  2761 0000233E E965DFFFFF          <2> 	jmp timerinterrupt
  2762                              <2> getchar:
  2763 00002343 30C0                <2> 	xor al, al
  2764                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2765 00002345 66C705[A7230000]01- <2> 		mov word [trans], 1
  2766 0000234D 00                  <2>
  2767 0000234E 3C00                <2> 		cmp al, 0
  2768 00002350 7509                <2> 		jne transcheck
  2769 00002352 66C705[A7230000]00- <2> 		mov word [trans], 0
  2770 0000235A 00                  <2>
  2771                              <2> 	transcheck:
  2772                              <2> 	%ifdef io.serial
  2773                              <2> 		call serial.receive
  2774                              <2> 		xor ah, ah
  2775                              <2> 		cmp al, 13
  2776                              <2> 		je rdenter
  2777                              <2> 	%else
  2778 0000235B E83B3C0000          <2> 		call getkey
  2779 00002360 66A1[A5230000]      <2> 		mov ax, [lastkey + 2]
  2780 00002366 663D1C00            <2> 		cmp ax, 0x1C
  2781 0000236A 7425                <2> 		je rdenter
  2782                              <2> 	%endif
  2783 0000236C 66A1[A3230000]      <2> 		mov ax, [lastkey]
  2784 00002372 668B1D[A7230000]    <2> 		mov bx, [trans]
  2785 00002379 803D[795F0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2786 00002380 7500                <2> 		jne nospecialtrans
  2787                              <2> 	nospecialtrans:
  2788 00002382 6609C3              <2> 		or bx, ax
  2789 00002385 6681FB0000          <2> 		cmp bx, 0
  2790 0000238A 74CF                <2> 		je transcheck
  2791 0000238C E90C000000          <2> 		jmp rdend
  2792                              <2> 	rdenter:
  2793 00002391 C1E010              <2> 		shl eax, 16
  2794 00002394 66B80A00            <2> 		mov ax, 10
  2795 00002398 A3[A3230000]        <2> 		mov [lastkey], eax
  2796                              <2> 	rdend:
  2797 0000239D A1[A3230000]        <2> 		mov eax, [lastkey]
  2798 000023A2 C3                  <2> 		ret
  2799                              <2> 		
  2800 000023A3 00000000            <2> lastkey dd 0
  2801 000023A7 0000                <2> trans dw 0
  2802                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2803                              <2> prntchar:
  2804 000023A9 30E4                <2> 	xor ah, ah ;this kills unicode from the outside unfortunately
  2805                              <2> %ifdef io.serial
  2806                              <2> 	call prcharint
  2807                              <2> 	jmp timerinterrupt
  2808                              <2> prcharint:	
  2809                              <2> prcharq:
  2810                              <2> 	call serial.send
  2811                              <2> 	ret
  2812                              <2> %else
  2813 000023AB 38FB                <2> cmp bl, bh
  2814 000023AD 740A                <2> je prchar.notimer
  2815 000023AF E80B000000          <2> call prcharint
  2816 000023B4 E9EFDEFFFF          <2> jmp timerinterrupt
  2817                              <2> prchar.notimer:
  2818 000023B9 E818000000          <2> 	call prcharq
  2819 000023BE CF                  <2> 	iret
  2820                              <2> 	
  2821                              <2> prcharint:	;print char, char in ax, modifier in bx, if ecx is eax then termcopy will not happen, will run termcopy if called as is
  2822 000023BF 663DFFFE            <2> 	cmp ax, 0xFEFF
  2823 000023C3 740E                <2> 	je .ret
  2824 000023C5 39C1                <2> 	cmp ecx, eax
  2825 000023C7 740D                <2> 	je prcharq
  2826 000023C9 E808000000          <2> 	call prcharq
  2827 000023CE E8CE040000          <2> 	call termcopy
  2828                              <2> .ret:
  2829 000023D3 C3                  <2> 	ret
  2830 000023D4 00                  <2> termguion db 0
  2831 000023D5 00                  <2> termcopyon db 0
  2832                              <2> prcharq:
  2833 000023D6 C1E310              <2> 	shl ebx, 16
  2834 000023D9 6689C3              <2> 	mov bx, ax
  2835 000023DC 89D8                <2> 	mov eax, ebx
  2836 000023DE A3[CB250000]        <2> 	mov [charbuf], eax
  2837 000023E3 8B1D[C3250000]      <2> 	mov ebx, [videobufpos]
  2838 000023E9 BF[2EC20300]        <2> 	mov edi, videobuf
  2839 000023EE 01DF                <2> 	add edi, ebx
  2840 000023F0 A1[AC280000]        <2> 	mov eax, [removedvideo]
  2841 000023F5 8907                <2> 	mov [edi], eax
  2842 000023F7 A1[CB250000]        <2> 	mov eax, [charbuf]
  2843 000023FC 31D2                <2> 	xor edx, edx
  2844 000023FE 668B15[C7250000]    <2> 	mov dx, [charpos]
  2845 00002405 31C9                <2> 	xor ecx, ecx
  2846 00002407 668B0D[C9250000]    <2> 	mov cx, [charxy]
  2847 0000240E 663D0900            <2> 	cmp ax, 9
  2848 00002412 0F8479000000        <2> 	je near prtab
  2849 00002418 663D0D00            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2850 0000241C 0F849C000000        <2> 	je near prcr
  2851 00002422 663D0A00            <2> 	cmp ax, 10
  2852 00002426 0F84E5000000        <2> 	je near prnlcr
  2853 0000242C 663D0800            <2> 	cmp ax, 8
  2854 00002430 0F8499000000        <2> 	je near prbs
  2855 00002436 663DFF00            <2> 	cmp ax, 255		;null character
  2856 0000243A 0F8424000000        <2> 	je near donescr
  2857 00002440 663D0030            <2> 	cmp ax, (fontend - fonts)/16
  2858 00002444 0F8341000000        <2> 	jae near prnofont
  2859                              <2> donepr:
  2860 0000244A 8907                <2> 	mov [edi], eax
  2861 0000244C 81C704000000        <2> 	add edi, 4
  2862 00002452 FEC2                <2> 	inc dl
  2863                              <2> donecrnl:
  2864 00002454 38CA                <2> 	cmp dl, cl
  2865 00002456 0F83D9000000        <2> 	jae near preol
  2866                              <2> doneeol:
  2867 0000245C 38EE                <2> 	cmp dh, ch
  2868 0000245E 0F83EE000000        <2> 	jae near prscr	
  2869                              <2> donescr:
  2870 00002464 89FB                <2> 	mov ebx, edi
  2871 00002466 8B07                <2> 	mov eax, [edi]
  2872 00002468 A3[AC280000]        <2> 	mov [removedvideo], eax
  2873 0000246D 81EB[2EC20300]      <2> 	sub ebx, videobuf
  2874 00002473 891D[C3250000]      <2> 	mov [videobufpos], ebx
  2875 00002479 668915[C7250000]    <2> 	mov [charpos], dx
  2876 00002480 A1[CB250000]        <2> 	mov eax, [charbuf]
  2877 00002485 89C3                <2> 	mov ebx, eax
  2878 00002487 C1EB10              <2> 	shr ebx, 16
  2879 0000248A C3                  <2> 	ret
  2880                              <2> 	
  2881                              <2> 	prnofont:
  2882 0000248B 66B80200            <2> 		mov ax, 2
  2883 0000248F EBB9                <2> 		jmp donepr
  2884                              <2> 	prtab:
  2885 00002491 8B1D[BF250000]      <2> 		mov ebx, [linebeginpos]
  2886 00002497 81EF[2EC20300]      <2> 		sub edi, videobuf
  2887 0000249D 29DF                <2> 		sub edi, ebx
  2888 0000249F C1EF05              <2> 		shr edi, 5
  2889 000024A2 C1E705              <2> 		shl edi, 5
  2890 000024A5 81C720000000        <2> 		add edi, 32
  2891 000024AB C0EA03              <2> 		shr dl, 3
  2892 000024AE C0E203              <2> 		shl dl, 3
  2893 000024B1 80C208              <2> 		add dl, 8
  2894 000024B4 81C7[2EC20300]      <2> 		add edi, videobuf
  2895 000024BA 01DF                <2> 		add edi, ebx
  2896 000024BC EB96                <2> 		jmp donecrnl
  2897                              <2> 	
  2898                              <2> 	prcr:
  2899 000024BE 30D2                <2> 		xor dl, dl
  2900 000024C0 BF[2EC20300]        <2> 		mov edi, videobuf
  2901 000024C5 8B1D[BF250000]      <2> 		mov ebx, [linebeginpos]
  2902 000024CB 01DF                <2> 		add edi, ebx
  2903 000024CD EB85                <2> 		jmp donecrnl
  2904                              <2> 			
  2905                              <2> 	prbs:
  2906 000024CF 8B1D[BF250000]      <2> 		mov ebx, [linebeginpos]
  2907 000024D5 80FA00              <2> 		cmp dl, 0
  2908 000024D8 7415                <2> 		je prbackline
  2909                              <2> 	prnobmr:
  2910 000024DA 891D[BF250000]      <2> 		mov [linebeginpos], ebx
  2911 000024E0 FECA                <2> 		dec dl
  2912 000024E2 31C0                <2> 		xor eax, eax
  2913 000024E4 81EF04000000        <2> 		sub edi, 4
  2914 000024EA E965FFFFFF          <2> 		jmp donecrnl
  2915                              <2> 	prbackline:
  2916 000024EF 6631DB              <2> 		xor bx, bx
  2917 000024F2 88CA                <2> 		mov dl, cl
  2918 000024F4 80FE00              <2> 		cmp dh, 0
  2919 000024F7 74E1                <2> 		je prnobmr
  2920 000024F9 8B1D[BF250000]      <2> 		mov ebx, [linebeginpos]
  2921 000024FF 6651                <2> 		push cx
  2922 00002501 31C9                <2> 		xor ecx, ecx
  2923 00002503 8A0C24              <2> 		mov cl, [esp]
  2924 00002506 C1E102              <2> 		shl ecx, 2
  2925 00002509 29CB                <2> 		sub ebx, ecx
  2926 0000250B 6659                <2> 		pop cx
  2927 0000250D FECE                <2> 		dec dh
  2928 0000250F EBC9                <2> 		jmp prnobmr
  2929                              <2> 		
  2930                              <2> 	prnlcr:
  2931 00002511 FEC6                <2> 		inc dh
  2932 00002513 31DB                <2> 		xor ebx, ebx
  2933 00002515 30D2                <2> 		xor dl, dl
  2934 00002517 88CB                <2> 		mov bl, cl
  2935 00002519 66C1E302            <2> 		shl bx, 2
  2936 0000251D BF[2EC20300]        <2> 		mov edi, videobuf
  2937 00002522 031D[BF250000]      <2> 		add ebx, [linebeginpos]
  2938 00002528 891D[BF250000]      <2> 		mov [linebeginpos], ebx
  2939 0000252E 01DF                <2> 		add edi, ebx
  2940 00002530 E91FFFFFFF          <2> 		jmp donecrnl
  2941                              <2> 		
  2942                              <2> 	preol:
  2943 00002535 30D2                <2> 		xor dl, dl
  2944 00002537 FEC6                <2> 		inc dh
  2945 00002539 31DB                <2> 		xor ebx, ebx
  2946 0000253B 88CB                <2> 		mov bl, cl
  2947 0000253D 66C1E302            <2> 		shl bx, 2
  2948 00002541 031D[BF250000]      <2> 		add ebx, [linebeginpos]
  2949 00002547 891D[BF250000]      <2> 		mov [linebeginpos], ebx
  2950 0000254D E90AFFFFFF          <2> 		jmp doneeol
  2951                              <2> 	prscr:
  2952 00002552 FECE                <2> 		dec dh
  2953 00002554 BF[2EC20300]        <2> 		mov edi, videobuf
  2954 00002559 31DB                <2> 		xor ebx, ebx
  2955 0000255B 88CB                <2> 		mov bl, cl
  2956 0000255D 66C1E302            <2> 		shl bx, 2
  2957 00002561 01FB                <2> 		add ebx, edi
  2958                              <2> 	intscrollloop:
  2959 00002563 8B03                <2> 		mov eax, [ebx]
  2960 00002565 8907                <2> 		mov [edi], eax
  2961 00002567 81C704000000        <2> 		add edi, 4
  2962 0000256D 81C304000000        <2> 		add ebx, 4
  2963 00002573 FEC9                <2> 		dec cl
  2964 00002575 80F900              <2> 		cmp cl, 0
  2965 00002578 75E9                <2> 		jne intscrollloop
  2966 0000257A 8A0D[C9250000]      <2> 		mov cl, [charxy]
  2967 00002580 FECD                <2> 		dec ch
  2968 00002582 80FD01              <2> 		cmp ch, 1
  2969 00002585 77DC                <2> 		ja intscrollloop
  2970 00002587 31C0                <2> 		xor eax, eax
  2971 00002589 81EF[2EC20300]      <2> 		sub edi, videobuf
  2972 0000258F 893D[BF250000]      <2> 		mov [linebeginpos], edi
  2973 00002595 81C7[2EC20300]      <2> 		add edi, videobuf
  2974 0000259B 89FB                <2> 		mov ebx, edi
  2975                              <2> 	intloopclear:
  2976 0000259D 8903                <2> 		mov [ebx], eax
  2977 0000259F 81C304000000        <2> 		add ebx, 4
  2978 000025A5 FEC9                <2> 		dec cl
  2979 000025A7 80F900              <2> 		cmp cl, 0
  2980 000025AA 75F1                <2> 		jne intloopclear
  2981 000025AC FECD                <2> 		dec ch
  2982 000025AE 80FD00              <2> 		cmp ch, 0
  2983 000025B1 75EA                <2> 		jne intloopclear
  2984 000025B3 668B0D[C9250000]    <2> 		mov cx, [charxy]
  2985 000025BA E9A5FEFFFF          <2> 		jmp donescr
  2986                              <2> 		
  2987 000025BF 00000000            <2> linebeginpos dd 0
  2988 000025C3 00000000            <2> videobufpos: dd 0
  2989 000025C7 0000                <2> charpos db 0,0
  2990 000025C9 501E                <2> charxy db 80,30
  2991 000025CB 00000000            <2> charbuf dd 0
  2992                              <2> %endif
  2993                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2994                              <2> openfile:
  2995 000025CF E84F430000          <2> 	call loadfile
  2996 000025D4 E9CFDCFFFF          <2> 	jmp timerinterrupt
  2997                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2998                              <2> num2str:
  2999 000025D9 3C00                <2> 	cmp al, 0
  3000 000025DB 750A                <2> 	jne num2strb
  3001 000025DD E8A70C0000          <2> 	call showdec
  3002 000025E2 E9C1DCFFFF          <2> 	jmp timerinterrupt
  3003                              <2> num2strb:
  3004 000025E7 E8D30B0000          <2> 	call showhex
  3005 000025EC E9B7DCFFFF          <2> 	jmp timerinterrupt
  3006                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3007                              <2> str2num:
  3008 000025F1 89F7                <2> 	mov edi, esi
  3009 000025F3 E8730D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3010 000025F8 E9ABDCFFFF          <2> 	jmp timerinterrupt
  3011                              <2> 	
  3012                              <1> %ifdef threads.included
  3013                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3014                              <2> forkthread:
  3015                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  3016                              <2> 			;returns the PID of the new fork in ebx
  3017                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  3018 000025FD FA                  <2> 	cli
  3019 000025FE 60                  <2> 	pushad
  3020 000025FF 8925[CC260000]      <2> 	mov [.espold], esp
  3021 00002605 C605[C26A0000]01    <2> 	mov byte [threadson], 1
  3022 0000260C 8B1D[C36A0000]      <2> 	mov ebx, [currentthread]
  3023 00002612 C1E302              <2> 	shl ebx, 2
  3024 00002615 89A3[E29C0500]      <2> 	mov [threadlist + ebx], esp
  3025 0000261B C1EB02              <2> 	shr ebx, 2
  3026 0000261E 81FB00000000        <2> 	cmp ebx, 0
  3027 00002624 750C                <2> 	jne .simplestack
  3028 00002626 BB[34A00300]        <2> 	mov ebx, stackend
  3029 0000262B 29E3                <2> 	sub ebx, esp
  3030 0000262D E90B000000          <2> 	jmp .stackcalcdone
  3031                              <2> .simplestack:
  3032 00002632 C1E30A              <2> 	shl ebx, 10
  3033 00002635 81C3[E2B00500]      <2> 	add ebx, stack1
  3034 0000263B 29E3                <2> 	sub ebx, esp
  3035                              <2> .stackcalcdone:
  3036 0000263D 29DC                <2> 	sub esp, ebx
  3037 0000263F 81C4[E2B00500]      <2> 	add esp, stack1
  3038 00002645 8B1D[BE6A0000]      <2> 	mov ebx, [lastthread]
  3039 0000264B C1E308              <2> 	shl ebx, 8
  3040 0000264E 01DC                <2> 	add esp, ebx
  3041 00002650 891D[D0260000]      <2> 	mov [.stackend], ebx
  3042                              <2> 
  3043 00002656 89E5                <2> 	mov ebp, esp
  3044 00002658 8B25[CC260000]      <2> 	mov esp, [.espold]
  3045                              <2> 
  3046 0000265E C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3047 00002661 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3048                              <2> 
  3049 00002665 31DB                <2> 	xor ebx, ebx
  3050                              <2> .stackcopy:
  3051 00002667 668B041C            <2> 	mov ax, [esp + ebx]
  3052 0000266B 6689441D00          <2> 	mov [ebp + ebx], ax
  3053 00002670 81C302000000        <2> 	add ebx, 2
  3054 00002676 3B1D[D0260000]      <2> 	cmp ebx, [.stackend]
  3055 0000267C 72E9                <2> 	jb .stackcopy
  3056                              <2> 
  3057 0000267E 31C0                <2> 	xor eax, eax
  3058 00002680 668CC8              <2> 	mov ax, cs
  3059 00002683 89C2                <2> 	mov edx, eax
  3060 00002685 8B4C2428            <2> 	mov ecx, [esp + 40]
  3061 00002689 81C900020000        <2> 	or ecx, 0x200
  3062                              <2> 	
  3063 0000268F 81FE00000000        <2> 	cmp esi, 0
  3064 00002695 7504                <2> 	jne .nochangestack
  3065 00002697 8B742420            <2> 	mov esi, [esp + 32]
  3066                              <2> .nochangestack:
  3067 0000269B 89F0                <2> 	mov eax, esi
  3068 0000269D 89EC                <2> 	mov esp, ebp
  3069                              <2> 
  3070 0000269F 89442420            <2> 	mov [esp + 32], eax
  3071 000026A3 89542424            <2> 	mov [esp + 36], edx
  3072 000026A7 894C2428            <2> 	mov [esp + 40], ecx
  3073                              <2> 
  3074 000026AB 8B1D[BE6A0000]      <2> 	mov ebx, [lastthread]
  3075 000026B1 89A3[E29C0500]      <2> 	mov [threadlist + ebx], esp
  3076 000026B7 81C304000000        <2> 	add ebx, 4
  3077 000026BD 891D[BE6A0000]      <2> 	mov [lastthread], ebx
  3078 000026C3 8B25[CC260000]      <2> 	mov esp, [.espold]
  3079 000026C9 61                  <2> 	popad
  3080 000026CA FB                  <2> 	sti
  3081 000026CB CF                  <2> 	iret
  3082                              <2> 
  3083 000026CC 00000000            <2> .espold dd 0
  3084 000026D0 00000000            <2> .stackend dd 0
  3085                              <1> %endif
  3086                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3087                              <2> gettime:
  3088 000026D4 A1[60020000]        <2> 	mov eax, [timeseconds]
  3089 000026D9 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  3090 000026DF 89D9                <2> 	mov ecx, ebx
  3091 000026E1 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3092 000026E4 E9BFDBFFFF          <2> 	jmp timerinterrupt
  3093                              <1> 	%include 'source/interrupts/13_settime.asm'
  3094                              <2> settime:
  3095 000026E9 A3[60020000]        <2> 	mov [timeseconds], eax
  3096 000026EE 891D[64020000]      <2> 	mov [timenanoseconds], ebx
  3097 000026F4 E9AFDBFFFF          <2> 	jmp timerinterrupt
  3098                              <2> 	
  3099                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3100                              <2> runcmd:
  3101 000026F9 BF[18BB0300]        <2> 	mov edi, buftxt
  3102                              <2> cpcmd:
  3103 000026FE 8A06                <2> 	mov al, [esi]
  3104 00002700 8807                <2> 	mov [edi], al
  3105 00002702 46                  <2> 	inc esi
  3106 00002703 47                  <2> 	inc edi
  3107 00002704 3C00                <2> 	cmp al, 0
  3108 00002706 75F6                <2> 	jne cpcmd
  3109 00002708 E8B5070000          <2> 	call run
  3110 0000270D CF                  <2> 	iret
  3111                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3112                              <2> proginfo:
  3113                              <2> 	;mov ebx, variables
  3114 0000270E 8B35[982F0000]      <2> 	mov esi, [currentcommandloc]
  3115 00002714 89F7                <2> 	mov edi, esi
  3116 00002716 31C9                <2> 	xor ecx, ecx
  3117                              <2> getcommandzeroes:
  3118 00002718 8A07                <2> 	mov al, [edi]
  3119 0000271A 47                  <2> 	inc edi
  3120 0000271B 3C3B                <2> 	cmp al, ';'
  3121 0000271D 740B                <2> 	je nomorezeroes
  3122 0000271F 3C00                <2> 	cmp al, 0
  3123 00002721 7407                <2> 	je nomorezeroes
  3124 00002723 3C20                <2> 	cmp al, ' '
  3125 00002725 75F1                <2> 	jne getcommandzeroes
  3126 00002727 41                  <2> 	inc ecx
  3127 00002728 EBEE                <2> 	jmp getcommandzeroes
  3128                              <2> nomorezeroes:
  3129 0000272A 41                  <2> 	inc ecx
  3130 0000272B 4F                  <2> 	dec edi
  3131 0000272C 8B1D[A4A60300]      <2> 	mov ebx, [uid]
  3132 00002732 8B15[C36A0000]      <2> 	mov edx, [currentthread]
  3133 00002738 CF                  <2> 	iret
  3134                              <2> 	
  3135                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3136                              <2> hooksig: ;hook code in ESI to signal in AL
  3137 00002739 3C00                <2> 	cmp al, 0
  3138 0000273B 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3139                              <2> ;	xor ebx, ebx
  3140                              <2> ;	mov bl, al
  3141                              <2> ;	shl bl, 2
  3142 0000273D BF[94A00300]        <2> 	mov edi, sigtable
  3143 00002742 8937                <2> 	mov [edi], esi
  3144                              <2> .quit:
  3145 00002744 E95FDBFFFF          <2> 	jmp timerinterrupt
  3146                              <1> %ifdef gui.included
  3147                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3148                              <2> guiint:
  3149 00002749 3CFD                <2> 	cmp al, 253
  3150 0000274B 0F8473000000        <2> 	je near .getinfo
  3151 00002751 803D[388C0000]01    <2> 	cmp byte [guion], 1
  3152 00002758 0F8550000000        <2> 	jne near .nogui
  3153 0000275E 3C00                <2> 	cmp al, 0
  3154 00002760 0F844D000000        <2> 	je near .clear
  3155 00002766 3C01                <2> 	cmp al, 1
  3156 00002768 0F84A8000000        <2> 	je near .putpixel
  3157 0000276E 3C02                <2> 	cmp al, 2
  3158 00002770 0F84AD000000        <2> 	je near .drawtext
  3159 00002776 3C03                <2> 	cmp al, 3
  3160 00002778 0F84C0000000        <2> 	je near .drawline
  3161 0000277E 3C04                <2> 	cmp al, 4
  3162 00002780 0F84CB000000        <2> 	je near .drawcircle
  3163 00002786 3C05                <2> 	cmp al, 5
  3164 00002788 0F84D3000000        <2> 	je near .fillcircle
  3165 0000278E 3C06                <2> 	cmp al, 6
  3166 00002790 0F84DB000000        <2> 	je near .drawsquare
  3167 00002796 3C07                <2> 	cmp al, 7
  3168 00002798 0F84E6000000        <2> 	je near .fillsquare
  3169 0000279E 3CFE                <2> 	cmp al, 254
  3170 000027A0 0F8446000000        <2> 	je near .setinfo
  3171 000027A6 3CFF                <2> 	cmp al, 255
  3172 000027A8 0F8443000000        <2> 	je near .reset
  3173                              <2> .nogui:
  3174 000027AE E9F5DAFFFF          <2> 	jmp timerinterrupt
  3175                              <2> 
  3176                              <2> .clear:		;color in bx
  3177 000027B3 66891D[A8710000]    <2> 	mov [background], bx
  3178                              <2> %ifdef gui.background
  3179                              <2> 	mov ebx, [backgroundimage]
  3180                              <2> 	cmp ebx, 0
  3181                              <2> 	je .clearit
  3182                              <2> 	mov dword [backgroundimage], 0
  3183                              <2> 	mov [.bgi], ebx
  3184                              <2> .clearit:
  3185                              <2> %endif
  3186 000027BA E89D490000          <2> 	call guiclear
  3187 000027BF E9E4DAFFFF          <2> 	jmp timerinterrupt
  3188                              <2> 	
  3189                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3190 000027C4 31DB                <2> 	xor ebx, ebx
  3191 000027C6 31C9                <2> 	xor ecx, ecx
  3192 000027C8 31D2                <2> 	xor edx, edx
  3193 000027CA 381D[388C0000]      <2> 	cmp [guion], bl
  3194 000027D0 74DC                <2> 	je .nogui
  3195 000027D2 668B1D[A8710000]    <2> 	mov bx, [background]
  3196 000027D9 668B15[98580000]    <2> 	mov dx, [resolutionx]
  3197 000027E0 668B0D[9A580000]    <2> 	mov cx, [resolutiony]
  3198 000027E7 E9BCDAFFFF          <2> 	jmp timerinterrupt
  3199                              <2> 	
  3200                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3201 000027EC E9B7DAFFFF          <2> 	jmp timerinterrupt
  3202                              <2> .reset:		;resets the screen to the original settings
  3203 000027F1 66BBCF7B            <2> 	mov bx, background.original
  3204 000027F5 66891D[A8710000]    <2> 	mov [background], bx
  3205 000027FC 66BBFFFF            <2> 	mov bx, 0xFFFF
  3206 00002800 66891D[65780000]    <2> 	mov [colorfont2], bx
  3207                              <2> %ifdef gui.background
  3208                              <2> 	mov ebx, [backgroundimage]
  3209                              <2> 	cmp ebx, 0
  3210                              <2> 	jne .resetit
  3211                              <2> 	mov ebx, [.bgi]
  3212                              <2> 	mov [backgroundimage], ebx
  3213                              <2> .resetit:
  3214                              <2> %endif
  3215 00002807 E850490000          <2> 	call guiclear
  3216 0000280C E89B490000          <2> 	call reloadallgraphics
  3217 00002811 E992DAFFFF          <2> 	jmp timerinterrupt
  3218                              <2> 
  3219                              <2> %ifdef gui.background
  3220                              <2> 	.bgi dd 0
  3221                              <2> %endif
  3222                              <2> 	
  3223                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3224 00002816 6689DE              <2> 	mov si, bx
  3225 00002819 E89D5F0000          <2> 	call putpixel
  3226 0000281E E985DAFFFF          <2> 	jmp timerinterrupt
  3227                              <2> 
  3228                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3229 00002823 66D1E2              <2> 	shl dx, 1
  3230 00002826 66891D[65780000]    <2> 	mov [colorfont2], bx
  3231 0000282D 66893D[A8710000]    <2> 	mov [background], di
  3232 00002834 E8C44F0000          <2> 	call showstring2
  3233 00002839 E96ADAFFFF          <2> 	jmp timerinterrupt
  3234                              <2> 
  3235                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3236 0000283E 6689F0              <2> 	mov ax, si
  3237 00002841 6689DE              <2> 	mov si, bx
  3238 00002844 6689FB              <2> 	mov bx, di
  3239 00002847 E8E4470000          <2> 	call drawline
  3240 0000284C E957DAFFFF          <2> 	jmp timerinterrupt
  3241                              <2> 
  3242                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3243 00002851 6689F0              <2> 	mov ax, si
  3244 00002854 6689DE              <2> 	mov si, bx
  3245 00002857 E85D430000          <2> 	call drawcircle
  3246 0000285C E947DAFFFF          <2> 	jmp timerinterrupt
  3247                              <2> 
  3248                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3249 00002861 6689F0              <2> 	mov ax, si
  3250 00002864 6689DE              <2> 	mov si, bx
  3251 00002867 E85F440000          <2> 	call fillcircle
  3252 0000286C E937DAFFFF          <2> 	jmp timerinterrupt
  3253                              <2> 	
  3254                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3255 00002871 6689F0              <2> 	mov ax, si
  3256 00002874 6689DE              <2> 	mov si, bx
  3257 00002877 6689FB              <2> 	mov bx, di
  3258 0000287A E8FD490000          <2> 	call drawsquare
  3259 0000287F E924DAFFFF          <2> 	jmp timerinterrupt
  3260                              <2> 
  3261                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3262 00002884 6689F0              <2> 	mov ax, si
  3263 00002887 6689DE              <2> 	mov si, bx
  3264 0000288A 6689FB              <2> 	mov bx, di
  3265 0000288D E85F4A0000          <2> 	call fillsquare
  3266 00002892 E911DAFFFF          <2> 	jmp timerinterrupt
  3267                              <1> %endif
  3268                              <1> %ifdef sound.included
  3269                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3270                              <2> soundint:
  3271 00002897 E90CDAFFFF          <2> 	jmp timerinterrupt
  3272                              <1> %endif
  3273                              <1> %ifdef network.included
  3274                              <1> 	%include 'source/interrupts/19_netint.asm'
  3275                              <2> netint:
  3276 0000289C E907DAFFFF          <2> 	jmp timerinterrupt
  3277                              <1> %endif
  3278                              <1> 
  3279                              <1> termcopy:
  3280                              <1> %ifdef io.serial
  3281                              <1> 	ret
  3282                              <1> %else
  3283                              <1> %ifdef terminal.vsync
  3284                              <1> 	mov byte [termcopyneeded], 1
  3285                              <1> 	ret
  3286                              <1> %else
  3287 000028A1 E80A000000          <1> 	call newtermcopy
  3288 000028A6 C3                  <1> 	ret
  3289                              <1> %endif
  3290 000028A7 00                  <1> 	termcopyneeded db 0
  3291 000028A8 00000000            <1> 	termcursorpos dd 0
  3292 000028AC 00000000            <1> 	removedvideo dd 0
  3293                              <1> newtermcopy:
  3294 000028B0 60                  <1> 	pusha
  3295 000028B1 BF[2EC20300]        <1> 	mov edi, videobuf
  3296 000028B6 31DB                <1> 	xor ebx, ebx
  3297 000028B8 881D[A7280000]      <1> 	mov [termcopyneeded], bl
  3298 000028BE 8B1D[C3250000]      <1> 	mov ebx, [videobufpos]
  3299 000028C4 01DF                <1> 	add edi, ebx
  3300 000028C6 893D[A8280000]      <1> 	mov [termcursorpos], edi
  3301 000028CC E8E2000000          <1> 	call switchtermcursor
  3302 000028D1 803D[388C0000]00    <1> 	cmp byte [guion], 0
  3303 000028D8 0F8420000000        <1> 	je near nowincopy
  3304                              <1> %ifdef gui.included
  3305 000028DE C605[CC7F0000]00    <1> 	mov byte [mouseselecton], 0
  3306 000028E5 C605[D5230000]01    <1> 	mov byte [termcopyon], 1
  3307 000028EC 803D[D4230000]01    <1> 	cmp byte [termguion], 1
  3308 000028F3 0F845D540000        <1> 	je near windowvideocopy
  3309                              <1> %endif
  3310 000028F9 E9AE000000          <1> 	jmp nocopytermatall
  3311                              <1> nowincopy:
  3312 000028FE BE00000A00          <1> 	mov esi, 0xA0000
  3313 00002903 A1[41020000]        <1> 	mov eax, [basecache]
  3314 00002908 C1E004              <1> 	shl eax, 4
  3315 0000290B 29C6                <1> 	sub esi, eax
  3316 0000290D BF[2EC20300]        <1> 	mov edi, videobuf
  3317 00002912 31C9                <1> 	xor ecx, ecx
  3318 00002914 668B0D[C9250000]    <1> 	mov cx, [charxy]
  3319                              <1> nowincopy2:
  3320 0000291B 8B07                <1> 	mov eax, [edi]
  3321 0000291D 81C748D50000        <1> 	add edi, (videobuf2 - videobuf)
  3322 00002923 8B1F                <1> 	mov ebx, [edi]
  3323 00002925 8907                <1> 	mov [edi], eax
  3324 00002927 81EF48D50000        <1> 	sub edi, (videobuf2 - videobuf)
  3325 0000292D 81C702000000        <1> 	add edi, 2
  3326 00002933 39D8                <1> 	cmp eax, ebx
  3327 00002935 744B                <1> 	je nopresentwinfont
  3328 00002937 81EF02000000        <1> 	sub edi, 2
  3329 0000293D BD[828E0000]        <1> 	mov ebp, fonts
  3330 00002942 31C0                <1> 	xor eax, eax
  3331 00002944 668B07              <1> 	mov ax, [edi]
  3332 00002947 C1E004              <1> 	shl eax, 4
  3333 0000294A 01C5                <1> 	add ebp, eax
  3334 0000294C 81C702000000        <1> 	add edi, 2
  3335 00002952 668B1F              <1> 	mov bx, [edi]
  3336 00002955 31D2                <1> 	xor edx, edx
  3337 00002957 8A15[C9250000]      <1> 	mov dl, [charxy]
  3338 0000295D C1C110              <1> 	rol ecx, 16
  3339 00002960 B110                <1> 	mov cl, 16
  3340                              <1> nowinfont:
  3341 00002962 8A4500              <1> 	mov al, [ebp]
  3342 00002965 D0C8                <1> 	ror al, 1
  3343 00002967 80FB80              <1> 	cmp bl, 0x80
  3344 0000296A 7202                <1> 	jb notnotfont
  3345 0000296C F6D0                <1> 	not al
  3346                              <1> notnotfont:
  3347 0000296E 8806                <1> 	mov [esi], al
  3348 00002970 01D6                <1> 	add esi, edx
  3349 00002972 45                  <1> 	inc ebp
  3350 00002973 FEC9                <1> 	dec cl
  3351 00002975 80F900              <1> 	cmp cl, 0
  3352 00002978 75E8                <1> 	jne nowinfont
  3353 0000297A C1E204              <1> 	shl edx, 4
  3354 0000297D 29D6                <1> 	sub esi, edx
  3355 0000297F C1C110              <1> 	rol ecx, 16
  3356                              <1> nopresentwinfont:
  3357 00002982 81C702000000        <1> 	add edi, 2
  3358 00002988 46                  <1> 	inc esi
  3359 00002989 FEC9                <1> 	dec cl
  3360 0000298B 80F900              <1> 	cmp cl, 0
  3361 0000298E 758B                <1> 	jne nowincopy2
  3362 00002990 8A0D[C9250000]      <1> 	mov cl, [charxy]
  3363 00002996 31D2                <1> 	xor edx, edx
  3364 00002998 88CA                <1> 	mov dl, cl
  3365 0000299A 29D6                <1> 	sub esi, edx
  3366 0000299C C1E204              <1> 	shl edx, 4
  3367 0000299F 01D6                <1> 	add esi, edx
  3368 000029A1 FECD                <1> 	dec ch
  3369 000029A3 80FD00              <1> 	cmp ch, 0
  3370 000029A6 0F856FFFFFFF        <1> 	jne nowincopy2
  3371                              <1> nocopytermatall:
  3372 000029AC E802000000          <1> 	call switchtermcursor
  3373 000029B1 61                  <1> 	popa
  3374 000029B2 C3                  <1> 	ret
  3375                              <1> 	
  3376                              <1> switchtermcursor:
  3377 000029B3 8B3D[A8280000]      <1> 	mov edi, [termcursorpos]
  3378 000029B9 668B4702            <1> 	mov ax, [edi + 2]
  3379 000029BD 668B1F              <1> 	mov bx, [edi]
  3380 000029C0 663D8000            <1> 	cmp ax, 0x80
  3381 000029C4 7209                <1> 	jb movlargecursorterm
  3382 000029C6 66B80700            <1> 	mov ax, 7
  3383 000029CA E904000000          <1> 	jmp movedcursorterm
  3384                              <1> movlargecursorterm:
  3385 000029CF 66B8F000            <1> 	mov ax, 0xF0
  3386                              <1> movedcursorterm:
  3387 000029D3 66894702            <1> 	mov [edi + 2], ax
  3388 000029D7 6681FB0000          <1> 	cmp bx, 0
  3389 000029DC 7507                <1> 	jne fixednocursorterm
  3390 000029DE 66BB2000            <1> 	mov bx, ' '
  3391 000029E2 66891F              <1> 	mov [edi], bx
  3392                              <1> fixednocursorterm:
  3393 000029E5 C3                  <1> 	ret
  3394                              <1> %endif
  3395                                      %include "source/dosints.asm"
  3396                              <1> int20h:
  3397 000029E6 66B8004C            <1> mov ax, 0x4C00
  3398                              <1> int21h:
  3399                              <1> dostosolleros:
  3400 000029EA 6650                <1> 	push ax
  3401 000029EC 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3402 000029F0 8ED8                <1> 	mov ds, ax
  3403 000029F2 8EC0                <1> 	mov es, ax
  3404 000029F4 8EE0                <1> 	mov fs, ax
  3405 000029F6 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3406 000029FA 8EE8                <1> 	mov gs, ax
  3407 000029FC 6658                <1> 	pop ax
  3408 000029FE 9C                  <1> 	pushf
  3409 000029FF 60                  <1> 	pusha
  3410 00002A00 80FC01              <1> 	cmp ah, 1
  3411 00002A03 0F8449000000        <1> 	je near dosgchar
  3412 00002A09 80FC02              <1> 	cmp ah, 2
  3413 00002A0C 0F8447000000        <1> 	je near doswchar
  3414 00002A12 80FC09              <1> 	cmp ah, 9
  3415 00002A15 0F8449000000        <1> 	je near dosprintstr
  3416 00002A1B 80FC0A              <1> 	cmp ah, 0xA
  3417 00002A1E 0F8456000000        <1> 	je near dosgetstr
  3418 00002A24 80FC2B              <1> 	cmp ah, 0x2B
  3419 00002A27 0F8492000000        <1> 	je near dosgetdate
  3420 00002A2D 80FC2C              <1> 	cmp ah, 0x2C
  3421 00002A30 0F84AC000000        <1> 	je near dosgettime
  3422 00002A36 80FC4C              <1> 	cmp ah, 0x4C
  3423 00002A39 0F84C1000000        <1> 	je near dosexit
  3424                              <1> backtodos:
  3425 00002A3F 61                  <1> 	popa
  3426 00002A40 9D                  <1> 	popf
  3427 00002A41 6650                <1> 	push ax
  3428 00002A43 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3429 00002A47 8ED8                <1> 	mov ds, ax
  3430 00002A49 8EC0                <1> 	mov es, ax
  3431 00002A4B 8EE0                <1> 	mov fs, ax
  3432 00002A4D 8EE8                <1> 	mov gs, ax
  3433 00002A4F 6658                <1> 	pop ax
  3434 00002A51 CF                  <1> 	iret
  3435                              <1> 
  3436                              <1> dosgchar:
  3437 00002A52 E8ECF8FFFF          <1> 	call getchar
  3438 00002A57 EBE6                <1> 	jmp backtodos
  3439                              <1> 	
  3440                              <1> doswchar:
  3441 00002A59 88D0                <1> 	mov al, dl
  3442 00002A5B B307                <1> 	mov bl, 7
  3443 00002A5D E85DF9FFFF          <1> 	call prcharint
  3444 00002A62 EBDB                <1> 	jmp backtodos
  3445                              <1> 	
  3446                              <1> dosprintstr:
  3447 00002A64 31F6                <1> 	xor esi, esi
  3448 00002A66 6689D6              <1> 	mov si, dx
  3449 00002A69 81C600004000        <1> 	add esi, dosprogloc
  3450 00002A6F B024                <1> 	mov al, "$"
  3451 00002A71 B307                <1> 	mov bl, 7
  3452 00002A73 E8D7F2FFFF          <1> 	call printint
  3453 00002A78 EBC5                <1> 	jmp backtodos
  3454                              <1> 	
  3455                              <1> dosgetstr:
  3456 00002A7A 31F6                <1> 	xor esi, esi
  3457 00002A7C 6689D6              <1> 	mov si, dx
  3458 00002A7F 81C600004000        <1> 	add esi, dosprogloc
  3459 00002A85 B900000000          <1> 	mov ecx, 0
  3460 00002A8A 8A0E                <1> 	mov cl, [esi]
  3461 00002A8C 81C602000000        <1> 	add esi, 2
  3462 00002A92 89F7                <1> 	mov edi, esi
  3463 00002A94 8935[BB2A0000]      <1> 	mov [stringstart], esi
  3464 00002A9A 01CF                <1> 	add edi, ecx
  3465 00002A9C B00A                <1> 	mov al, 10
  3466 00002A9E B307                <1> 	mov bl, 7
  3467 00002AA0 E8EAF3FFFF          <1> 	call rdprintdos
  3468 00002AA5 89F1                <1> 	mov ecx, esi
  3469 00002AA7 2B0D[BB2A0000]      <1> 	sub ecx, [stringstart]
  3470 00002AAD 8B35[BB2A0000]      <1> 	mov esi, [stringstart]
  3471 00002AB3 884EFF              <1> 	mov [esi - 1], cl
  3472 00002AB6 884EFE              <1> 	mov [esi - 2], cl
  3473 00002AB9 EB84                <1> 	jmp backtodos
  3474 00002ABB 00000000            <1> stringstart dd 0
  3475                              <1> 
  3476                              <1> dosgetdate:
  3477 00002ABF E8DA260000          <1> 	call time
  3478 00002AC4 8A0D[66530000]      <1> 	mov cl, [RTCtimeYear]
  3479 00002ACA B500                <1> 	mov ch, 0
  3480 00002ACC 6681C1D007          <1> 	add cx, 2000
  3481 00002AD1 8A35[65530000]      <1> 	mov dh, [RTCtimeMonth]
  3482 00002AD7 8A15[64530000]      <1> 	mov dl, [RTCtimeDay]
  3483 00002ADD E95DFFFFFF          <1> 	jmp backtodos
  3484                              <1> 
  3485                              <1> dosgettime:
  3486 00002AE2 E8B7260000          <1> 	call time
  3487 00002AE7 8A2D[63530000]      <1> 	mov ch, [RTCtimeHour]
  3488 00002AED 8A0D[62530000]      <1> 	mov cl, [RTCtimeMinute]
  3489 00002AF3 8A35[61530000]      <1> 	mov dh, [RTCtimeSecond]
  3490 00002AF9 B200                <1> 	mov dl, 0
  3491 00002AFB E93FFFFFFF          <1> 	jmp backtodos
  3492                              <1> 	
  3493                              <1> dosexit:
  3494 00002B00 BE[138C0000]        <1> 	mov esi, line
  3495 00002B05 E83EF2FFFF          <1> 	call print
  3496 00002B0A 61                  <1> 	popa
  3497 00002B0B 9D                  <1> 	popf
  3498 00002B0C 8B25[98A40300]      <1> 	mov esp, [previousstack]
  3499 00002B12 31DB                <1> 	xor ebx, ebx
  3500 00002B14 88C3                <1> 	mov bl, al
  3501 00002B16 80FB00              <1> 	cmp bl, 0
  3502 00002B19 0F85B4F1FFFF        <1> 	jne near exitprog.error
  3503 00002B1F C3                  <1> 	ret
  3504                                      %include "source/solleros.asm"
  3505                              <1> 	;SOLLEROS.ASM
  3506                              <1> os:
  3507                              <1> setdefenv:
  3508 00002B20 B02F                <1> 	mov al, '/'
  3509 00002B22 A2[A4A40300]        <1> 	mov [currentfolder], al
  3510 00002B27 B801000000          <1> 	mov eax, 1
  3511 00002B2C A3[A0A40300]        <1> 	mov [currentfolderloc], eax
  3512 00002B31 E8C1F2FFFF          <1> 	call clear
  3513                              <1> 	
  3514                              <1> bootfilecheck:
  3515 00002B36 803D[A8A60300]01    <1> 	cmp byte [ranboot], 1
  3516 00002B3D 0F8421000000        <1> 	je near nobootfile
  3517                              <1> 	%ifdef hardware.automatic
  3518 00002B43 E8A9390000          <1> 		call initializelater ;Initialize components that have debug messages
  3519                              <1> 	%endif
  3520 00002B48 BF[D28B0000]        <1> 	mov edi, bootfilename
  3521 00002B4D BE00004000          <1> 	mov esi, 0x400000
  3522 00002B52 E8CC3D0000          <1> 	call loadfile
  3523 00002B57 81FA00000000        <1> 	cmp edx, 0
  3524 00002B5D 7505                <1> 	jne nobootfile
  3525 00002B5F E8B20D0000          <1> 	call progbatchfound
  3526                              <1> nobootfile:	
  3527 00002B64 C605[A8A60300]01    <1> 	mov byte [ranboot], 1
  3528                              <1> 
  3529 00002B6B BE[03000000]        <1> 	mov esi, signature
  3530                              <1> .sigcopyloop:	;this prevents an odd error
  3531 00002B70 658A06              <1> 	mov al, [gs:esi]
  3532 00002B73 8806                <1> 	mov [esi], al
  3533 00002B75 46                  <1> 	inc esi
  3534 00002B76 81FE[1D000000]      <1> 	cmp esi, signatureend
  3535 00002B7C 72F2                <1> 	jb .sigcopyloop
  3536                              <1> 	
  3537 00002B7E BE[03000000]        <1> 	mov esi, signature
  3538 00002B83 E8C0F1FFFF          <1> 	call print
  3539 00002B88 8B0D[19000000]      <1> 	mov ecx, [signatureend - 4]
  3540 00002B8E E8F6060000          <1> 	call showdec
  3541 00002B93 BE[138C0000]        <1> 	mov esi, line
  3542 00002B98 E8ABF1FFFF          <1> 	call print
  3543 00002B9D BE[EF8B0000]        <1> 	mov esi, userask
  3544 00002BA2 E8A1F1FFFF          <1> 	call print
  3545                              <1> usercheck:
  3546 00002BA7 BE[18BB0300]        <1> 	mov esi, buftxt
  3547 00002BAC BF[18BF0300]        <1> 	mov edi, buftxtend
  3548 00002BB1 B00A                <1> 	mov al, 10
  3549 00002BB3 E8C3F2FFFF          <1> 	call rdprint
  3550 00002BB8 56                  <1> 	push esi
  3551 00002BB9 BE[F98B0000]        <1> 	mov esi, pwdask
  3552 00002BBE E885F1FFFF          <1> 	call print
  3553 00002BC3 5E                  <1> 	pop esi
  3554 00002BC4 46                  <1> 	inc esi
  3555 00002BC5 8935[BA2C0000]      <1> 	mov [esipass], esi
  3556                              <1> passcheck:
  3557 00002BCB E873F7FFFF          <1> 	call getchar
  3558 00002BD0 3C0A                <1> 	cmp al, 10
  3559 00002BD2 0F8438000000        <1> 	je near gotpass
  3560 00002BD8 3C08                <1> 	cmp al, 8
  3561 00002BDA 0F8412000000        <1> 	je near backpass
  3562 00002BE0 8806                <1> 	mov [esi], al
  3563 00002BE2 46                  <1> 	inc esi
  3564 00002BE3 30E4                <1> 	xor ah, ah
  3565 00002BE5 B02A                <1> 	mov al, "*"
  3566 00002BE7 E8D3F7FFFF          <1> 	call prcharint
  3567 00002BEC EBDD                <1> 	jmp passcheck
  3568 00002BEE 08200800            <1> backcursor2 db 8," ",8,0
  3569                              <1> backpass:
  3570 00002BF2 3B35[BA2C0000]      <1> 	cmp esi, [esipass]
  3571 00002BF8 0F84CDFFFFFF        <1> 	je near passcheck
  3572 00002BFE 4E                  <1> 	dec esi
  3573 00002BFF C60600              <1> 	mov byte [esi], 0
  3574 00002C02 56                  <1> 	push esi
  3575 00002C03 BE[EE2B0000]        <1> 	mov esi, backcursor2
  3576 00002C08 E83BF1FFFF          <1> 	call print
  3577 00002C0D 5E                  <1> 	pop esi
  3578 00002C0E EBBB                <1> 	jmp passcheck
  3579                              <1> gotpass:
  3580 00002C10 B00A                <1> 	mov al, 10
  3581 00002C12 E8A8F7FFFF          <1> 	call prcharint
  3582 00002C17 30C0                <1> 	xor al, al
  3583 00002C19 31C9                <1> 	xor ecx, ecx
  3584 00002C1B 8806                <1> 	mov [esi], al
  3585 00002C1D BB[158C0000]        <1> 	mov ebx, userlst
  3586                              <1> userfind:
  3587 00002C22 BE[18BB0300]        <1> 	mov esi, buftxt
  3588 00002C27 8A06                <1> 	mov al, [esi]
  3589 00002C29 3C00                <1> 	cmp al, 0
  3590 00002C2B 0F84EFFEFFFF        <1> 	je near os
  3591 00002C31 891D[BE2C0000]      <1> 	mov [usercache], ebx
  3592 00002C37 E860030000          <1> 	call tester
  3593 00002C3C 3C01                <1> 	cmp al, 1
  3594 00002C3E 7416                <1> 	je pwdtest
  3595 00002C40 41                  <1> 	inc ecx
  3596                              <1> nxtuser:
  3597 00002C41 8A03                <1> 	mov al, [ebx]
  3598 00002C43 43                  <1> 	inc ebx
  3599 00002C44 3C00                <1> 	cmp al, 0
  3600 00002C46 75F9                <1> 	jne nxtuser
  3601 00002C48 81FB[388C0000]      <1> 	cmp ebx, userlstend
  3602 00002C4E 0F83CCFEFFFF        <1> 	jae near os
  3603 00002C54 EBCC                <1> 	jmp userfind
  3604                              <1> pwdtest:
  3605 00002C56 46                  <1> 	inc esi
  3606 00002C57 43                  <1> 	inc ebx
  3607 00002C58 E83F030000          <1> 	call tester
  3608 00002C5D 3C01                <1> 	cmp al, 1
  3609 00002C5F 7402                <1> 	je pwdrgt
  3610 00002C61 EBDE                <1> 	jmp nxtuser
  3611                              <1> pwdrgt:
  3612 00002C63 D1E9                <1> 	shr ecx, 1
  3613 00002C65 890D[A4A60300]      <1> 	mov [uid], ecx
  3614 00002C6B E887F1FFFF          <1> 	call clear
  3615 00002C70 31C9                <1> 	xor ecx, ecx
  3616 00002C72 41                  <1> 	inc ecx
  3617 00002C73 890D[C26C0500]      <1> 	mov [commandbufpos], ecx
  3618                              <1> returnfromexp:
  3619 00002C79 66B90002            <1> 	mov cx, 200h
  3620 00002C7D BE[18BB0300]        <1> 	mov esi, buftxt
  3621 00002C82 8935[982F0000]      <1> 	mov [currentcommandloc], esi
  3622 00002C88 E825000000          <1> 	call bufclr
  3623                              <1> clearolddata:
  3624 00002C8D 31C0                <1> 	xor eax, eax
  3625 00002C8F A2[A9A60300]        <1> 	mov [IFON], al
  3626 00002C94 A2[AAA60300]        <1> 	mov [IFTRUE], al
  3627 00002C99 A2[12A70300]        <1> 	mov [BATCHISON], al
  3628 00002C9E A3[0EA70300]        <1> 	mov [BATCHPOS], eax
  3629 00002CA3 A2[13A70300]        <1> 	mov [LOOPON], al
  3630 00002CA8 A3[14A70300]        <1> 	mov [LOOPPOS], eax
  3631 00002CAD E933000000          <1> 	jmp nwcmd
  3632                              <1> bufclr:	
  3633 00002CB2 30C0                <1> 	xor al, al
  3634 00002CB4 8806                <1> 	mov [esi], al
  3635 00002CB6 46                  <1> 	inc esi
  3636 00002CB7 E2F9                <1> 	loop bufclr
  3637 00002CB9 C3                  <1> 	ret
  3638                              <1> 
  3639 00002CBA 00000000            <1> esipass dd 0
  3640 00002CBE [158C0000]          <1> usercache dd userlst
  3641                              <1> 	
  3642                              <1> buftxtclear:
  3643 00002CC2 30C0                <1> 	xor al, al
  3644 00002CC4 BE[18BB0300]        <1> 	mov esi, buftxt
  3645 00002CC9 81FE[18BF0300]      <1> clearbuftxt: cmp esi, buf2
  3646 00002CCF 730E                <1> 	jae retbufclr
  3647 00002CD1 8806                <1> 	mov [esi], al
  3648 00002CD3 46                  <1> 	inc esi
  3649 00002CD4 EBF3                <1> 	jmp clearbuftxt
  3650                              <1> 
  3651 00002CD6 39DE                <1> clearitbuf: cmp esi, ebx
  3652 00002CD8 7305                <1> 	jae retbufclr
  3653 00002CDA 8806                <1> 	mov [esi], al
  3654 00002CDC 46                  <1> 	inc esi
  3655 00002CDD EBF7                <1> 	jmp clearitbuf
  3656 00002CDF C3                  <1> retbufclr: ret
  3657                              <1> 
  3658 00002CE0 E900000000          <1> full:	jmp nwcmd
  3659                              <1> 
  3660                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3661                              <1> nwcmd:
  3662 00002CE5 FB                  <1> 	sti
  3663 00002CE6 31C0                <1> 	xor eax, eax
  3664 00002CE8 3905[BA2E0000]      <1> 	cmp [nextcommandloc], eax
  3665 00002CEE 7413                <1> 	je nomultiplecommand
  3666 00002CF0 8B35[BA2E0000]      <1> 	mov esi, [nextcommandloc]
  3667 00002CF6 8935[BE2E0000]      <1> 	mov [thiscommandloc], esi
  3668 00002CFC E8C6010000          <1> 	call fixvariables
  3669 00002D01 EBE2                <1> 	jmp nwcmd
  3670                              <1> nomultiplecommand:
  3671 00002D03 A3[BE2E0000]        <1> 	mov [thiscommandloc], eax
  3672 00002D08 3805[C26A0000]      <1> 	cmp [threadson], al
  3673 00002D0E 7405                <1> 	je noclinwcmd
  3674 00002D10 A2[C26A0000]        <1> 	mov [threadson], al
  3675                              <1> noclinwcmd:
  3676 00002D15 B001                <1> 	mov al, 1
  3677 00002D17 3805[12A70300]      <1> 	cmp [BATCHISON], al
  3678 00002D1D 7501                <1> 	jne cancel
  3679 00002D1F C3                  <1> 	ret
  3680 00002D20 30C0                <1> cancel:	xor al, al
  3681 00002D22 A2[A9A60300]        <1> 	mov [IFON], al
  3682 00002D27 A2[12A70300]        <1> 	mov [BATCHISON], al
  3683 00002D2C B05B                <1> 	mov al, '['
  3684 00002D2E 66BB0700            <1> 	mov bx, 7
  3685 00002D32 E89FF6FFFF          <1> 	call prcharq
  3686 00002D37 8B35[BE2C0000]      <1> 	mov esi, [usercache]
  3687 00002D3D E8E7EFFFFF          <1> 	call printquiet
  3688 00002D42 BE[038C0000]        <1> 	mov esi, computer
  3689 00002D47 E8DDEFFFFF          <1> 	call printquiet
  3690 00002D4C BE[A4A40300]        <1> 	mov esi, currentfolder
  3691 00002D51 0335[9CA40300]      <1> 	add esi, [lastfolderloc]
  3692 00002D57 E8CDEFFFFF          <1> 	call printquiet
  3693 00002D5C BE[0E8C0000]        <1> 	mov esi, endprompt
  3694 00002D61 E8E2EFFFFF          <1> 	call print
  3695 00002D66 E857FFFFFF          <1> 	call buftxtclear
  3696 00002D6B BE[18BB0300]        <1> 	mov esi, buftxt
  3697 00002D70 C605[2C230000]01    <1> 	mov byte [commandedit], 1
  3698 00002D77 B00A                <1> 	mov al, 10
  3699 00002D79 66BB0700            <1> 	mov bx, 7
  3700 00002D7D BF[18BF0300]        <1> 	mov edi, buftxtend
  3701 00002D82 E8F4F0FFFF          <1> 	call rdprint
  3702 00002D87 C605[2C230000]00    <1> 	mov byte [commandedit], 0
  3703 00002D8E 803D[18BB0300]00    <1> 	cmp byte [buftxt], 0
  3704 00002D95 0F844AFFFFFF        <1> 	je near nwcmd
  3705 00002D9B 8B35[C26C0500]      <1> gotcmd:	mov esi, [commandbufpos]
  3706 00002DA1 8935[BE6C0500]      <1> 	mov [lastcommandpos], esi
  3707 00002DA7 FF05[CA6C0500]      <1> 	inc dword [commandsentered]
  3708 00002DAD BF[18BB0300]        <1> 	mov edi, buftxt
  3709 00002DB2 81C6[CE6C0500]      <1> 	add esi, commandbuf
  3710 00002DB8 81FE[CE7C0500]      <1> 	cmp esi, commandbufend
  3711 00002DBE 7605                <1> 	jbe copycommand
  3712 00002DC0 BE[CE6C0500]        <1> 	mov esi, commandbuf
  3713                              <1> copycommand:
  3714 00002DC5 8A07                <1> 	mov al, [edi]
  3715 00002DC7 8806                <1> 	mov [esi], al
  3716 00002DC9 47                  <1> 	inc edi
  3717 00002DCA 46                  <1> 	inc esi
  3718 00002DCB 3C00                <1> 	cmp al, 0
  3719 00002DCD 740F                <1> 	je donecopy
  3720 00002DCF 81FE[CE7C0500]      <1> 	cmp esi, commandbufend
  3721 00002DD5 76EE                <1> 	jbe copycommand
  3722 00002DD7 BE[CE6C0500]        <1> 	mov esi, commandbuf
  3723 00002DDC EBE7                <1> 	jmp copycommand
  3724                              <1> donecopy:
  3725 00002DDE 81EE[CE6C0500]      <1> 	sub esi, commandbuf
  3726 00002DE4 8935[C26C0500]      <1> 	mov [commandbufpos], esi
  3727 00002DEA E8D3000000          <1> 	call run
  3728 00002DEF E9F1FEFFFF          <1> 	jmp nwcmd
  3729                              <1> 
  3730 00002DF4 E8C9FEFFFF          <1> input:	call buftxtclear
  3731 00002DF9 BE[18BB0300]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3732 00002DFE BF[18BF0300]        <1> 	mov edi, buftxtend
  3733 00002E03 B00A                <1> stdin:	mov al, 10
  3734 00002E05 B307                <1> 	mov bl, 7
  3735 00002E07 E86FF0FFFF          <1> 	call rdprint
  3736 00002E0C C3                  <1> 	ret
  3737                              <1> 
  3738                              <1> replacevariable:
  3739 00002E0D 8A4601              <1> 	mov al, [esi + 1]
  3740 00002E10 C64601FF            <1> 	mov byte [esi + 1], 255
  3741 00002E14 3C24                <1> 	cmp al, "$"
  3742 00002E16 0F84AB000000        <1> 	je near fixvariables
  3743 00002E1C 884601              <1> 	mov [esi + 1], al
  3744 00002E1F 56                  <1> 	push esi
  3745 00002E20 81EE[18BB0300]      <1> 	sub esi, buftxt
  3746 00002E26 89F7                <1> 	mov edi, esi
  3747 00002E28 81C6[18BB0300]      <1> 	add esi, buftxt
  3748 00002E2E 47                  <1> 	inc edi
  3749 00002E2F BB[18A70300]        <1> 	mov ebx, variables
  3750 00002E34 E857150000          <1> 	call nxtvrech
  3751 00002E39 89F7                <1> 	mov edi, esi
  3752 00002E3B 31DB                <1> 	xor ebx, ebx
  3753 00002E3D 4E                  <1> 	dec esi
  3754                              <1> findvarname:
  3755 00002E3E 4E                  <1> 	dec esi
  3756 00002E3F 8A06                <1> 	mov al, [esi]
  3757 00002E41 43                  <1> 	inc ebx
  3758 00002E42 3C04                <1> 	cmp al, 4
  3759 00002E44 75F8                <1> 	jne findvarname
  3760 00002E46 5E                  <1> 	pop esi
  3761                              <1> replacevarloop:
  3762 00002E47 8A07                <1> 	mov al, [edi]
  3763 00002E49 3C00                <1> 	cmp al, 0
  3764 00002E4B 0F8413000000        <1> 	je near compressbuftxt
  3765 00002E51 81FB00000000        <1> 	cmp ebx, 0
  3766 00002E57 0F8416000000        <1> 	je near expandbuftxt
  3767 00002E5D 8806                <1> 	mov [esi], al
  3768 00002E5F 4B                  <1> 	dec ebx
  3769 00002E60 46                  <1> 	inc esi
  3770 00002E61 47                  <1> 	inc edi
  3771 00002E62 EBE3                <1> 	jmp replacevarloop
  3772                              <1> compressbuftxt:
  3773 00002E64 8A041E              <1> 	mov al, [esi + ebx]
  3774 00002E67 8806                <1> 	mov [esi], al
  3775 00002E69 46                  <1> 	inc esi
  3776 00002E6A 3C00                <1> 	cmp al, 0
  3777 00002E6C 75F6                <1> 	jne compressbuftxt
  3778 00002E6E E954000000          <1> 	jmp fixvariables
  3779                              <1> expandbuftxt:
  3780 00002E73 89F1                <1> 	mov ecx, esi
  3781 00002E75 8A26                <1> 	mov ah, [esi]
  3782                              <1> expandbuftxtlp:
  3783 00002E77 8A1E                <1> 	mov bl, [esi]
  3784 00002E79 46                  <1> 	inc esi
  3785 00002E7A 8A3E                <1> 	mov bh, [esi]
  3786 00002E7C 8826                <1> 	mov [esi], ah
  3787 00002E7E 88FC                <1> 	mov ah, bh
  3788 00002E80 80FB00              <1> 	cmp bl, 0
  3789 00002E83 75F2                <1> 	jne expandbuftxtlp
  3790 00002E85 89CE                <1> 	mov esi, ecx
  3791 00002E87 8806                <1> 	mov [esi], al
  3792 00002E89 47                  <1> 	inc edi
  3793 00002E8A 8A07                <1> 	mov al, [edi]
  3794 00002E8C 3C00                <1> 	cmp al, 0
  3795 00002E8E 0F8433000000        <1> 	je near fixvariables
  3796 00002E94 46                  <1> 	inc esi
  3797 00002E95 EBDC                <1> 	jmp expandbuftxt
  3798                              <1> multipleprogline:
  3799 00002E97 30E4                <1> 	xor ah, ah
  3800 00002E99 8826                <1> 	mov [esi], ah
  3801 00002E9B 46                  <1> 	inc esi
  3802 00002E9C 8935[BA2E0000]      <1> 	mov [nextcommandloc], esi
  3803 00002EA2 E93E000000          <1> 	jmp donefixvariables
  3804                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3805 00002EA7 46                  <1> 	inc esi
  3806 00002EA8 8A06                <1> 	mov al, [esi]
  3807 00002EAA C606FF              <1> 	mov byte [esi], 255
  3808 00002EAD 3C23                <1> 	cmp al, '#'
  3809 00002EAF 7416                <1> 	je fixvariables
  3810 00002EB1 4E                  <1> 	dec esi
  3811 00002EB2 C60600              <1> 	mov byte [esi], 0
  3812 00002EB5 E90D000000          <1> 	jmp fixvariables
  3813                              <1> 	
  3814 00002EBA 00000000            <1> nextcommandloc dd 0
  3815 00002EBE 00000000            <1> thiscommandloc dd 0	
  3816                              <1> run:
  3817 00002EC2 BE[18BB0300]        <1> 	mov esi, buftxt
  3818 00002EC7 46                  <1> fixvariables:	inc esi
  3819 00002EC8 8A06                <1> 	mov al, [esi]
  3820 00002ECA 3C23                <1> 	cmp al, '#'	;inline comment
  3821 00002ECC 74D9                <1> 	je inlinecomment
  3822 00002ECE 3C24                <1> 	cmp al, '$' ;variable
  3823 00002ED0 0F8437FFFFFF        <1> 	je near replacevariable
  3824 00002ED6 3C3B                <1> 	cmp al, ';' ;program list
  3825 00002ED8 74BD                <1> 	je multipleprogline
  3826 00002EDA 3C00                <1> 	cmp al, 0
  3827 00002EDC 75E9                <1> 	jne fixvariables
  3828 00002EDE 31C0                <1> 	xor eax, eax
  3829 00002EE0 A3[BA2E0000]        <1> 	mov [nextcommandloc], eax
  3830                              <1> donefixvariables:
  3831 00002EE5 803D[83340000]00    <1> 	cmp byte [indexdone], 0
  3832 00002EEC 7505                <1> 	jne progtest
  3833 00002EEE E8FB040000          <1> 	call indexfiles
  3834                              <1> progtest:
  3835 00002EF3 31C0                <1> 	xor eax, eax
  3836 00002EF5 BB[98A00300]        <1> 	mov ebx, fileindex
  3837 00002EFA 668B03              <1> prgnxt:	mov ax, [ebx]
  3838 00002EFD B1FF                <1> 	mov cl, 255
  3839 00002EFF B52C                <1> 	mov ch, 44
  3840 00002F01 6639C8              <1> 	cmp ax, cx
  3841 00002F04 740B                <1> 	je fndprg
  3842 00002F06 43                  <1> 	inc ebx
  3843 00002F07 81FB[98A40300]      <1> 	cmp ebx, fileindexend
  3844 00002F0D 735D                <1> 	jae prgnf
  3845 00002F0F EBE9                <1> 	jmp prgnxt
  3846 00002F11 81C302000000        <1> fndprg: add ebx, 2
  3847 00002F17 31C9                <1> 	xor ecx, ecx
  3848 00002F19 BE[18BB0300]        <1> 	mov esi, buftxt
  3849 00002F1E 390D[BE2E0000]      <1> 	cmp [thiscommandloc], ecx
  3850 00002F24 7406                <1> 	je noprgtstmultiple
  3851 00002F26 8B35[BE2E0000]      <1> 	mov esi, [thiscommandloc]
  3852                              <1> noprgtstmultiple:
  3853 00002F2C E8A6000000          <1> 	call cndtest
  3854 00002F31 3C01                <1> 	cmp al, 1
  3855 00002F33 7302                <1> 	jae prggood
  3856 00002F35 EBC3                <1> 	jmp prgnxt
  3857 00002F37 81FB[98A40300]      <1> prggood: cmp ebx, fileindexend
  3858 00002F3D 7358                <1> 	jae prgdn
  3859 00002F3F 31C0                <1> 	xor eax, eax
  3860 00002F41 BE[18BB0300]        <1> 	mov esi, buftxt
  3861 00002F46 3905[BE2E0000]      <1> 	cmp [thiscommandloc], eax
  3862 00002F4C 7406                <1> 	je noprggoodmul
  3863 00002F4E 8B35[BE2E0000]      <1> 	mov esi, [thiscommandloc]
  3864                              <1> noprggoodmul:
  3865 00002F54 8935[982F0000]      <1> 	mov [currentcommandloc], esi
  3866 00002F5A 81C303000000        <1> 	add ebx, 3
  3867 00002F60 8B3B                <1> 	mov edi, [ebx]
  3868 00002F62 C605[C26A0000]02    <1> 	mov byte [threadson], 2
  3869 00002F69 FFD7                <1> 	call edi
  3870 00002F6B C3                  <1> 	ret
  3871                              <1> prgnf:	
  3872 00002F6C 8B35[982F0000]      <1> 	mov esi, [currentcommandloc]
  3873 00002F72 8A06                <1> 	mov al, [esi]
  3874 00002F74 3C00                <1> 	cmp al, 0
  3875 00002F76 741F                <1> 	je prgdn
  3876 00002F78 BE[DA8B0000]        <1> 	mov esi, notfound1
  3877 00002F7D E8C6EDFFFF          <1> 	call print
  3878 00002F82 8B35[982F0000]      <1> 	mov esi, [currentcommandloc]
  3879 00002F88 E8BBEDFFFF          <1> 	call print
  3880 00002F8D BE[E28B0000]        <1> 	mov esi, notfound2
  3881 00002F92 E8B1EDFFFF          <1> 	call print
  3882 00002F97 C3                  <1> prgdn:	ret
  3883                              <1> 
  3884 00002F98 00000000            <1> currentcommandloc dd 0
  3885                              <1> 
  3886                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3887 00002F9C 6631C0              <1> 	xor ax, ax
  3888 00002F9F 8A06                <1> retest:	mov al, [esi]
  3889 00002FA1 8A23                <1> 	mov ah, [ebx]
  3890 00002FA3 3C00                <1> 	cmp al, 0
  3891 00002FA5 7408                <1> 	je testtrue
  3892 00002FA7 38E0                <1> 	cmp al, ah
  3893 00002FA9 750C                <1> 	jne testfalse
  3894 00002FAB 43                  <1> 	inc ebx
  3895 00002FAC 46                  <1> 	inc esi
  3896 00002FAD EBF0                <1> 	jmp retest
  3897                              <1> testtrue:
  3898 00002FAF 80FC00              <1> 	cmp ah, 0
  3899 00002FB2 7503                <1> 	jne testfalse
  3900 00002FB4 B001                <1> 	mov al, 1
  3901 00002FB6 C3                  <1> 	ret
  3902                              <1> testfalse:
  3903 00002FB7 30C0                <1> 	xor al, al
  3904 00002FB9 C3                  <1> 	ret
  3905                              <1> 
  3906                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3907 00002FBA 30C0                <1> 	xor al, al
  3908                              <1> opretest:
  3909 00002FBC 8A06                <1> 	mov al, [esi]
  3910 00002FBE 8A23                <1> 	mov ah, [ebx]
  3911 00002FC0 38E0                <1> 	cmp al, ah
  3912 00002FC2 7510                <1> 	jne optestfalse
  3913 00002FC4 80FC00              <1> 	cmp ah, 0
  3914 00002FC7 7404                <1> 	je optesttrue
  3915 00002FC9 43                  <1> 	inc ebx
  3916 00002FCA 46                  <1> 	inc esi
  3917 00002FCB EBEF                <1> 	jmp opretest
  3918                              <1> optesttrue:
  3919 00002FCD 3C00                <1> 	cmp al, 0
  3920 00002FCF 7503                <1> 	jne optestfalse
  3921 00002FD1 B001                <1> 	mov al, 1
  3922 00002FD3 C3                  <1> 	ret
  3923                              <1> optestfalse:
  3924 00002FD4 30C0                <1> 	xor al, al
  3925 00002FD6 C3                  <1> 	ret
  3926                              <1> 
  3927                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3928 00002FD7 30C0                <1> 	xor al, al
  3929 00002FD9 8A06                <1> cndretest:	mov al, [esi]
  3930 00002FDB 8A23                <1> 	mov ah, [ebx]
  3931 00002FDD 38CC                <1> 	cmp ah, cl
  3932 00002FDF 7408                <1> 	je cndtesttrue
  3933 00002FE1 38E0                <1> 	cmp al, ah
  3934 00002FE3 750B                <1> 	jne cndtestfalse
  3935 00002FE5 43                  <1> 	inc ebx
  3936 00002FE6 46                  <1> 	inc esi
  3937 00002FE7 EBF0                <1> 	jmp cndretest
  3938                              <1> cndtesttrue:
  3939 00002FE9 38C8                <1> 	cmp al, cl
  3940 00002FEB 7506                <1> 	jne cndtestalmost
  3941 00002FED B001                <1> 	mov al, 1
  3942 00002FEF C3                  <1> 	ret
  3943                              <1> cndtestfalse:
  3944 00002FF0 30C0                <1> 	xor al, al
  3945 00002FF2 C3                  <1> 	ret
  3946                              <1> cndtestalmost:
  3947 00002FF3 B002                <1> 	mov al, 2
  3948 00002FF5 C3                  <1> 	ret
  3949                              <1> 	
  3950                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3951                              <1> 		                ;ends if array seperator is found backwards after 0
  3952                              <1> 	arnxt:	      
  3953 00002FF6 88E8                <1> 		mov al, ch
  3954 00002FF8 88CC                <1> 		mov ah, cl        
  3955 00002FFA 663906              <1> 		cmp [esi], ax
  3956 00002FFD 744D                <1> 		je ardn
  3957 00002FFF 66390E              <1> 		cmp [esi], cx
  3958 00003002 7407                <1> 		je arfnd
  3959 00003004 46                  <1> 		inc esi
  3960 00003005 39DE                <1> 		cmp esi, ebx
  3961 00003007 7343                <1> 		jae ardn
  3962 00003009 EBEB                <1> 		jmp arnxt
  3963 0000300B 81C602000000        <1> 	arfnd: add esi, 2
  3964 00003011 891D[4D300000]      <1> 		mov [arbx], ebx
  3965 00003017 890D[51300000]      <1> 		mov [arcx], ecx
  3966 0000301D E826EDFFFF          <1> 		call print
  3967 00003022 8935[53300000]      <1> 		mov [arsi], esi
  3968 00003028 BE[138C0000]        <1> 		mov esi, line
  3969 0000302D E816EDFFFF          <1> 		call print
  3970 00003032 8B1D[4D300000]      <1> 		mov ebx, [arbx]
  3971 00003038 668B0D[51300000]    <1> 		mov cx, [arcx]
  3972 0000303F 8B35[53300000]      <1> 		mov esi, [arsi]
  3973 00003045 46                  <1> 		inc esi
  3974 00003046 39DE                <1> 		cmp esi, ebx
  3975 00003048 7302                <1> 		jae ardn
  3976 0000304A EBAA                <1> 		jmp arnxt
  3977 0000304C C3                  <1> 	ardn:	ret
  3978 0000304D 00000000            <1> arbx:	dw 0,0
  3979 00003051 0000                <1> arcx:	db 0,0
  3980 00003053 00000000            <1> arsi:	dw 0,0
  3981                              <1> 
  3982                              <1> clearbuffer:
  3983 00003057 BE[18BF0300]        <1> 	mov esi, buf2
  3984 0000305C B030                <1> 	mov al, '0'
  3985 0000305E 81FE[2CBF0300]      <1> clearbuf: cmp esi, numbuf
  3986 00003064 7305                <1> 	jae doneclearbuff
  3987 00003066 8806                <1> 	mov [esi], al
  3988 00003068 46                  <1> 	inc esi
  3989 00003069 EBF3                <1> 	jmp clearbuf
  3990                              <1> doneclearbuff: 
  3991 0000306B C3                  <1> 		ret
  3992                              <1> 
  3993                              <1> convert:
  3994 0000306C 4E                  <1> 	dec esi
  3995 0000306D 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3996                              <1> .lp:
  3997 0000306F 89DE                <1> 	mov esi, ebx
  3998 00003071 81EE09000000        <1> 	sub esi, 9
  3999 00003077 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  4000 0000307D 720A                <1> 	jb .8
  4001 0000307F 81E900CA9A3B        <1> 	sub ecx, 1000000000
  4002 00003085 FE06                <1> 	inc byte [esi]
  4003 00003087 EBE6                <1> 	jmp .lp
  4004 00003089 46                  <1> .8:	inc esi
  4005 0000308A 81F900E1F505        <1> 	cmp ecx, 100000000
  4006 00003090 720A                <1> 	jb .7
  4007 00003092 81E900E1F505        <1> 	sub ecx, 100000000
  4008 00003098 FE06                <1> 	inc byte [esi]
  4009 0000309A EBD3                <1> 	jmp .lp
  4010 0000309C 46                  <1> .7:	inc esi
  4011 0000309D 81F980969800        <1> 	cmp ecx, 10000000
  4012 000030A3 720A                <1> 	jb .6
  4013 000030A5 81E980969800        <1> 	sub ecx, 10000000
  4014 000030AB FE06                <1> 	inc byte [esi]
  4015 000030AD EBC0                <1> 	jmp .lp
  4016 000030AF 46                  <1> .6:	inc esi
  4017 000030B0 81F940420F00        <1> 	cmp ecx, 1000000
  4018 000030B6 720A                <1> 	jb .5
  4019 000030B8 81E940420F00        <1> 	sub ecx, 1000000
  4020 000030BE FE06                <1> 	inc byte [esi]
  4021 000030C0 EBAD                <1> 	jmp .lp
  4022 000030C2 46                  <1> .5:	inc esi
  4023 000030C3 81F9A0860100        <1> 	cmp ecx, 100000
  4024 000030C9 720A                <1> 	jb .4
  4025 000030CB 81E9A0860100        <1> 	sub ecx, 100000
  4026 000030D1 FE06                <1> 	inc byte [esi]
  4027 000030D3 EB9A                <1> 	jmp .lp
  4028 000030D5 46                  <1> .4:	inc esi
  4029 000030D6 81F910270000        <1> 	cmp ecx, 10000
  4030 000030DC 720A                <1> 	jb .3
  4031 000030DE 81E910270000        <1> 	sub ecx, 10000
  4032 000030E4 FE06                <1> 	inc byte [esi]
  4033 000030E6 EB87                <1> 	jmp .lp
  4034 000030E8 46                  <1> .3:	inc esi
  4035 000030E9 81F9E8030000        <1> 	cmp ecx, 1000
  4036 000030EF 720D                <1> 	jb .2
  4037 000030F1 81E9E8030000        <1> 	sub ecx, 1000
  4038 000030F7 FE06                <1> 	inc byte [esi]
  4039 000030F9 E971FFFFFF          <1> 	jmp .lp
  4040 000030FE 46                  <1> .2:	inc esi
  4041 000030FF 81F964000000        <1> 	cmp ecx, 100
  4042 00003105 720D                <1> 	jb .1
  4043 00003107 81E964000000        <1> 	sub ecx, 100
  4044 0000310D FE06                <1> 	inc byte [esi]
  4045 0000310F E95BFFFFFF          <1> 	jmp .lp
  4046 00003114 46                  <1> .1:	inc esi
  4047 00003115 81F90A000000        <1> 	cmp ecx, 10
  4048 0000311B 720D                <1> 	jb .0
  4049 0000311D 81E90A000000        <1> 	sub ecx, 10
  4050 00003123 FE06                <1> 	inc byte [esi]
  4051 00003125 E945FFFFFF          <1> 	jmp .lp
  4052 0000312A 46                  <1> .0:	inc esi
  4053 0000312B 81F901000000        <1> 	cmp ecx, 1
  4054 00003131 720D                <1> 	jb .dn
  4055 00003133 81E901000000        <1> 	sub ecx, 1
  4056 00003139 FE06                <1> 	inc byte [esi]
  4057 0000313B E92FFFFFFF          <1> 	jmp .lp
  4058                              <1> .dn:
  4059 00003140 C3                  <1> 	ret
  4060                              <1> 
  4061                              <1> 	
  4062                              <1> 
  4063 00003141 00<rept>            <1> hexnumber times 8 db 0
  4064 00003149 202000              <1> hexnumberend db "  ",0
  4065                              <1> 
  4066                              <1> converthex:
  4067                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  4068 0000314C 56                  <1> 	push esi
  4069 0000314D B030                <1> 	mov al, "0"
  4070 0000314F 39FE                <1> .clearlp: cmp esi, edi
  4071 00003151 7305                <1> 	jae .doneclear
  4072 00003153 8806                <1> 	mov [esi], al
  4073 00003155 46                  <1> 	inc esi
  4074 00003156 EBF7                <1> 	jmp .clearlp
  4075                              <1> .doneclear:
  4076 00003158 81EE02000000        <1> 	sub esi, 2
  4077 0000315E 89C8                <1> 	mov eax, ecx
  4078                              <1> .loop:
  4079 00003160 30FF                <1> 	xor bh, bh
  4080 00003162 88C3                <1> 	mov bl, al
  4081 00003164 66C1E304            <1> 	shl bx, 4
  4082 00003168 C0EB04              <1> 	shr bl, 4
  4083 0000316B 86DF                <1> 	xchg bl, bh ;they are backwards
  4084 0000316D 80C330              <1> 	add bl, 48
  4085 00003170 80FB39              <1> 	cmp bl, "9"
  4086 00003173 7609                <1> 	jbe .goodbl
  4087 00003175 80EB30              <1> 	sub bl, 48
  4088 00003178 80EB0A              <1> 	sub bl, 0xA
  4089 0000317B 80C341              <1> 	add bl, "A"
  4090                              <1> .goodbl:
  4091 0000317E 80C730              <1> 	add bh, 48
  4092 00003181 80FF39              <1> 	cmp bh, "9"
  4093 00003184 7609                <1> 	jbe .goodbh
  4094 00003186 80EF30              <1> 	sub bh, 48
  4095 00003189 80EF0A              <1> 	sub bh, 0xA
  4096 0000318C 80C741              <1> 	add bh, "A"
  4097                              <1> .goodbh:
  4098 0000318F C1E808              <1> 	shr eax, 8
  4099 00003192 66891E              <1> 	mov [esi], bx
  4100 00003195 81EE02000000        <1> 	sub esi, 2
  4101 0000319B 3B3424              <1> 	cmp esi, [esp]
  4102 0000319E 7207                <1> 	jb .done
  4103 000031A0 3D00000000          <1> 	cmp eax, 0
  4104 000031A5 75B9                <1> 	jne .loop
  4105                              <1> .done:
  4106 000031A7 5E                  <1> 	pop esi
  4107 000031A8 C3                  <1> 	ret
  4108                              <1> 	
  4109                              <1> 	
  4110 000031A9 00                  <1> smallhex db 0
  4111 000031AA 01                  <1> firsthexshown db 1
  4112                              <1> showhexsmall:
  4113 000031AB C605[A9310000]01    <1> 	mov byte [smallhex], 1
  4114 000031B2 E808000000          <1> 	call showhex
  4115 000031B7 C605[A9310000]00    <1> 	mov byte [smallhex], 0
  4116 000031BE C3                  <1> 	ret
  4117                              <1> showhex:
  4118 000031BF 60                  <1> 	pusha
  4119 000031C0 BE[41310000]        <1> 	mov esi, hexnumber
  4120 000031C5 BF[49310000]        <1> 	mov edi, hexnumberend
  4121 000031CA E87DFFFFFF          <1> 	call converthex
  4122 000031CF 803D[AA310000]01    <1> 	cmp byte [firsthexshown], 1
  4123 000031D6 7503                <1> 	jne .show
  4124 000031D8 6631D2              <1> 	xor dx, dx
  4125                              <1> .show:
  4126 000031DB 803D[AA310000]03    <1> 	cmp byte [firsthexshown], 3
  4127 000031E2 750A                <1> 	jne .nonewhexline
  4128 000031E4 BE[138C0000]        <1> 	mov esi, line
  4129 000031E9 E85AEBFFFF          <1> 	call print
  4130                              <1> .nonewhexline:
  4131 000031EE 803D[AA310000]04    <1> 	cmp byte [firsthexshown], 4
  4132 000031F5 7527                <1> 	jne .notab
  4133 000031F7 B1A0                <1> 	mov cl, 160
  4134 000031F9 28D1                <1> 	sub cl, dl
  4135 000031FB C0E905              <1> 	shr cl, 5
  4136 000031FE C0E105              <1> 	shl cl, 5
  4137 00003201 80F900              <1> 	cmp cl, 0
  4138 00003204 750F                <1> 	jne .nonewline
  4139 00003206 BE[138C0000]        <1> 	mov esi, line
  4140 0000320B E838EBFFFF          <1> 	call print
  4141 00003210 E909000000          <1> 	jmp .notab
  4142                              <1> .nonewline:
  4143 00003215 80C20F              <1> 	add dl, 15
  4144 00003218 C0EA04              <1> 	shr dl, 4
  4145 0000321B C0E204              <1> 	shl dl, 4
  4146                              <1> .notab:
  4147 0000321E BE[41310000]        <1> 	mov esi, hexnumber
  4148 00003223 803D[A9310000]01    <1> 	cmp byte [smallhex],1
  4149 0000322A 7506                <1> 	jne .nosmall
  4150 0000322C 81C606000000        <1> 	add esi, 6
  4151                              <1> .nosmall:
  4152 00003232 803D[AA310000]05    <1> 	cmp byte [firsthexshown], 5
  4153 00003239 750A                <1> 	jne .noquiet
  4154 0000323B E8E9EAFFFF          <1> 	call printquiet
  4155 00003240 E918000000          <1> 	jmp .donequiet
  4156                              <1> .noquiet:
  4157 00003245 803D[AA310000]06    <1> 	cmp byte [firsthexshown], 6
  4158 0000324C 750A                <1> 	jne .normal
  4159 0000324E E8E9EAFFFF          <1> 	call printhighlight
  4160 00003253 E905000000          <1> 	jmp .donequiet
  4161                              <1> .normal:
  4162 00003258 E8EBEAFFFF          <1> 	call print
  4163                              <1> .donequiet:
  4164 0000325D 803D[AA310000]02    <1> 	cmp byte [firsthexshown], 2
  4165 00003264 750A                <1> 	jne .shown
  4166 00003266 BE[138C0000]        <1> 	mov esi, line
  4167 0000326B E8D8EAFFFF          <1> 	call print
  4168                              <1> .shown:
  4169 00003270 C605[AA310000]00    <1> 	mov byte [firsthexshown], 0
  4170 00003277 61                  <1> 	popa
  4171 00003278 C3                  <1> 	ret
  4172                              <1> 
  4173                              <1> 
  4174 00003279 303030303030303030- <1> decnumber db "00000000000000"
  4175 00003282 3030303030          <1>
  4176 00003287 2000                <1> decnumberend: db " ",0
  4177                              <1> 
  4178                              <1> showdec: ;;same as showhex, just uses decimal conversion
  4179 00003289 60                  <1> 	pusha
  4180 0000328A BF[79320000]        <1> 	mov edi, decnumber
  4181 0000328F BE[87320000]        <1> 	mov esi, decnumberend
  4182                              <1> .clear:
  4183 00003294 C60730              <1> 	mov byte [edi], '0'
  4184 00003297 47                  <1> 	inc edi
  4185 00003298 39F7                <1> 	cmp edi, esi
  4186 0000329A 72F8                <1> 	jb .clear
  4187 0000329C BF[79320000]        <1> 	mov edi, decnumber
  4188 000032A1 E8C6FDFFFF          <1> 	call convert
  4189 000032A6 803D[AA310000]01    <1> 	cmp byte [firsthexshown], 1
  4190 000032AD 7503                <1> 	jne .show
  4191 000032AF 6631D2              <1> 	xor dx, dx
  4192                              <1> .show:
  4193 000032B2 803D[AA310000]03    <1> 	cmp byte [firsthexshown], 3
  4194 000032B9 750A                <1> 	jne .nonewdecline
  4195 000032BB BE[138C0000]        <1> 	mov esi, line
  4196 000032C0 E883EAFFFF          <1> 	call print
  4197                              <1> .nonewdecline:
  4198 000032C5 803D[AA310000]04    <1> 	cmp byte [firsthexshown], 4
  4199 000032CC 7527                <1> 	jne .notab
  4200 000032CE B1A0                <1> 	mov cl, 160
  4201 000032D0 28D1                <1> 	sub cl, dl
  4202 000032D2 C0E905              <1> 	shr cl, 5
  4203 000032D5 C0E105              <1> 	shl cl, 5
  4204 000032D8 80F900              <1> 	cmp cl, 0
  4205 000032DB 750F                <1> 	jne .nonewline
  4206 000032DD BE[138C0000]        <1> 	mov esi, line
  4207 000032E2 E861EAFFFF          <1> 	call print
  4208 000032E7 E909000000          <1> 	jmp .notab
  4209                              <1> .nonewline:
  4210 000032EC 80C20F              <1> 	add dl, 15
  4211 000032EF C0EA04              <1> 	shr dl, 4
  4212 000032F2 C0E204              <1> 	shl dl, 4
  4213                              <1> .notab:
  4214 000032F5 BE[79320000]        <1> 	mov esi, decnumber
  4215 000032FA 4E                  <1> 	dec esi
  4216                              <1> .sifind:
  4217 000032FB 46                  <1> 	inc esi
  4218 000032FC 803E30              <1> 	cmp byte [esi], '0'
  4219 000032FF 74FA                <1> 	je .sifind
  4220 00003301 E842EAFFFF          <1> 	call print
  4221 00003306 803D[AA310000]02    <1> 	cmp byte [firsthexshown], 2
  4222 0000330D 750A                <1> 	jne .shown
  4223 0000330F BE[138C0000]        <1> 	mov esi, line
  4224 00003314 E82FEAFFFF          <1> 	call print
  4225                              <1> .shown:
  4226 00003319 C605[AA310000]00    <1> 	mov byte [firsthexshown], 0
  4227 00003320 61                  <1> 	popa
  4228 00003321 C3                  <1> 	ret
  4229                              <1> 	
  4230                              <1> cnvrthextxt:
  4231 00003322 31C9                <1> 	xor ecx, ecx
  4232 00003324 31C0                <1> 	xor eax, eax
  4233 00003326 31D2                <1> 	xor edx, edx
  4234 00003328 31DB                <1> 	xor ebx, ebx
  4235 0000332A 4E                  <1> 	dec esi
  4236                              <1> .end:
  4237 0000332B 46                  <1> 	inc esi
  4238 0000332C 8A06                <1> 	mov al, [esi]
  4239 0000332E 3C00                <1> 	cmp al, 0
  4240 00003330 75F9                <1> 	jne .end
  4241                              <1> .loop:
  4242 00003332 4E                  <1> 	dec esi
  4243 00003333 8A06                <1> 	mov al, [esi]
  4244 00003335 3C41                <1> 	cmp al, "A"
  4245 00003337 7328                <1> 	jae .char
  4246 00003339 2C30                <1> 	sub al, 48
  4247 0000333B 3C10                <1> 	cmp al, 16
  4248 0000333D 7721                <1> 	ja .done
  4249                              <1> .donechar:
  4250 0000333F 81FA00000000        <1> 	cmp edx, 0
  4251 00003345 740E                <1> 	je .noshl
  4252 00003347 89D3                <1> 	mov ebx, edx
  4253                              <1> .shl:
  4254 00003349 C1E004              <1> 	shl eax, 4
  4255 0000334C 4B                  <1> 	dec ebx
  4256 0000334D 81FB00000000        <1> 	cmp ebx, 0
  4257 00003353 75F4                <1> 	jne .shl
  4258                              <1> .noshl:
  4259 00003355 42                  <1> 	inc edx
  4260 00003356 01C1                <1> 	add ecx, eax
  4261 00003358 81FA08000000        <1> 	cmp edx, 8
  4262 0000335E 72D2                <1> 	jb .loop
  4263                              <1> .done:
  4264 00003360 C3                  <1> 	ret
  4265                              <1> .char:
  4266 00003361 3C46                <1> 	cmp al, "F"
  4267 00003363 77FB                <1> 	ja .done
  4268 00003365 2C41                <1> 	sub al, "A"
  4269 00003367 040A                <1> 	add al, 0xA
  4270 00003369 EBD4                <1> 	jmp .donechar
  4271                              <1> 	
  4272                              <1> 	
  4273                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4274 0000336B 31C9                <1> 	xor ecx, ecx
  4275 0000336D 31C0                <1> 	xor eax, eax
  4276 0000336F 31D2                <1> 	xor edx, edx
  4277 00003371 31DB                <1> 	xor ebx, ebx
  4278 00003373 4E                  <1> 	dec esi
  4279                              <1> .lp:
  4280 00003374 46                  <1> 	inc esi
  4281 00003375 8A06                <1> 	mov al, [esi]
  4282 00003377 3C00                <1> 	cmp al, 0
  4283 00003379 75F9                <1> 	jne .lp
  4284 0000337B 4E                  <1> 	dec esi
  4285 0000337C 8A06                <1> 	mov al, [esi]
  4286 0000337E 3C2E                <1> 	cmp al, '.'
  4287 00003380 7503                <1> 	jne .dot
  4288 00003382 46                  <1> 	inc esi
  4289 00003383 EBEF                <1> 	jmp .lp
  4290                              <1> .dot:
  4291 00003385 3C20                <1> 	cmp al, ' '
  4292 00003387 7404                <1> 	je .zero
  4293 00003389 3C30                <1> 	cmp al, '0'
  4294 0000338B 7504                <1> 	jne .txtlp
  4295                              <1> .zero: 
  4296 0000338D 39FE                <1> 		cmp esi, edi
  4297 0000338F 7458                <1> 		je .done
  4298                              <1> .txtlp:
  4299 00003391 31C0                <1> 	xor eax, eax
  4300 00003393 8A06                <1> 	mov al, [esi]
  4301 00003395 3C3D                <1> 	cmp al, '='
  4302 00003397 7450                <1> 	je .done
  4303 00003399 3C30                <1> 	cmp al, 48
  4304 0000339B 724C                <1> 	jb .done
  4305 0000339D 3C23                <1> 	cmp al, '#'
  4306 0000339F 7448                <1> 	je .done
  4307 000033A1 39FE                <1> 	cmp esi, edi
  4308 000033A3 7244                <1> 	jb .done
  4309 000033A5 81F900000000        <1> 	cmp ecx, 0
  4310 000033AB 7708                <1> 	ja .exp
  4311 000033AD 2C30                <1> .noexp:	sub al, 48
  4312 000033AF 01C2                <1> 	add edx, eax
  4313 000033B1 4E                  <1> 	dec esi
  4314 000033B2 41                  <1> 	inc ecx
  4315 000033B3 EBDC                <1> 	jmp .txtlp
  4316 000033B5 81F900000000        <1> .exp:	cmp ecx, 0
  4317 000033BB 74F0                <1> 	je .noexp
  4318 000033BD 2C30                <1> 	sub al, 48
  4319 000033BF 51                  <1> 	push ecx
  4320 000033C0 89C3                <1> .expmul:	mov ebx, eax
  4321 000033C2 01D8                <1> 	add eax, ebx
  4322 000033C4 01D8                <1> 	add eax, ebx
  4323 000033C6 01D8                <1> 	add eax, ebx
  4324 000033C8 01D8                <1> 	add eax, ebx
  4325 000033CA 01D8                <1> 	add eax, ebx
  4326 000033CC 01D8                <1> 	add eax, ebx
  4327 000033CE 01D8                <1> 	add eax, ebx
  4328 000033D0 01D8                <1> 	add eax, ebx
  4329 000033D2 01D8                <1> 	add eax, ebx
  4330 000033D4 81E901000000        <1> 	sub ecx, 1
  4331 000033DA 81F900000000        <1> 	cmp ecx, 0
  4332 000033E0 77DE                <1> 	ja .expmul
  4333 000033E2 01C2                <1> 	add edx, eax
  4334 000033E4 59                  <1> 	pop ecx
  4335 000033E5 4E                  <1> 	dec esi
  4336 000033E6 41                  <1> 	inc ecx
  4337 000033E7 EBA8                <1> 	jmp .txtlp
  4338 000033E9 89D1                <1> .done: mov ecx, edx
  4339 000033EB C3                  <1> 	ret
  4340                                      %include "source/programs.asm"
  4341 000033EC FF2C                <1> filetypes db 255,44
  4342                              <1> progstart:		;programs start here
  4343                              <1> indexfiles:
  4344 000033EE BE[EE330000]        <1> 	mov esi, progstart
  4345 000033F3 BB[98A00300]        <1> 	mov ebx, fileindex
  4346 000033F8 BF[EE330000]        <1> 	mov edi, progstart
  4347 000033FD 81EF02000000        <1> 	sub edi, 2
  4348                              <1> indexloop:
  4349 00003403 668B0E              <1> 	mov cx, [esi]
  4350                              <1> 	indexloop2:
  4351 00003406 663B0F              <1> 		cmp cx, [edi]
  4352 00003409 7424                <1> 		je indexloop2done
  4353 0000340B 81EF02000000        <1> 		sub edi, 2
  4354 00003411 81FF[EC330000]      <1> 		cmp edi, filetypes
  4355 00003417 73ED                <1> 		jae indexloop2
  4356 00003419 BF[EE330000]        <1> 	mov edi, progstart
  4357 0000341E 81EF02000000        <1> 	sub edi, 2
  4358 00003424 46                  <1> 	inc esi
  4359 00003425 81FE[A8540000]      <1> 	cmp esi, batchprogend
  4360 0000342B 734E                <1> 	jae indexloopdone
  4361 0000342D EBD4                <1> 	jmp indexloop
  4362                              <1> indexloop2done:
  4363 0000342F 66890B              <1> 	mov [ebx], cx
  4364 00003432 81C302000000        <1> 	add ebx, 2
  4365 00003438 81C602000000        <1> 	add esi, 2
  4366                              <1> 	nameindex:
  4367 0000343E 8A0E                <1> 		mov cl, [esi]
  4368 00003440 80F900              <1> 		cmp cl, 0
  4369 00003443 7406                <1> 		je nameindexdone
  4370 00003445 880B                <1> 		mov [ebx], cl
  4371 00003447 46                  <1> 		inc esi
  4372 00003448 43                  <1> 		inc ebx
  4373 00003449 EBF3                <1> 		jmp nameindex
  4374                              <1> 	nameindexdone:
  4375 0000344B 43                  <1> 		inc ebx
  4376 0000344C 66C7030000          <1> 		mov word [ebx], 0
  4377 00003451 81C302000000        <1> 		add ebx, 2
  4378 00003457 46                  <1> 		inc esi
  4379 00003458 8933                <1> 		mov [ebx], esi
  4380 0000345A 81C304000000        <1> 		add ebx, 4
  4381 00003460 66C7030000          <1> 		mov word [ebx], 0
  4382 00003465 81C302000000        <1> 		add ebx, 2
  4383 0000346B 81FB[98A40300]      <1> 		cmp ebx, fileindexend
  4384 00003471 7308                <1> 		jae indexloopdone
  4385 00003473 81C601000000        <1> 		add esi, 1
  4386 00003479 EB88                <1> 		jmp indexloop
  4387 0000347B C605[83340000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4388 00003482 C3                  <1> 		ret
  4389 00003483 00                  <1> indexdone db 0
  4390                              <1> %include 'source/programs/_comment.asm' ;#
  4391 00003484 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4392 00003488 C3                  <2> 	ret 
  4393                              <1> %include 'source/programs/_math.asm' ;!
  4394 00003489 FF2C2100            <2> db 255,44,"!",0
  4395                              <2> 	num:	
  4396 0000348D E8C5FBFFFF          <2> 		call clearbuffer
  4397 00003492 C605[13370000]00    <2> 		mov byte [decimal], 0
  4398 00003499 C605[14370000]00    <2> 		mov byte [decimal2], 0
  4399 000034A0 8B35[982F0000]      <2> 		mov esi, [currentcommandloc]
  4400 000034A6 31C0                <2> 		xor eax, eax
  4401 000034A8 31C9                <2> 		xor ecx, ecx
  4402 000034AA 31DB                <2> 		xor ebx, ebx
  4403 000034AC 8A06                <2> 	num2:	mov al, [esi]
  4404 000034AE 3C2B                <2> 		cmp al, '+'
  4405 000034B0 741B                <2> 		je operatorfound
  4406 000034B2 3C2D                <2> 		cmp al, '-'
  4407 000034B4 7417                <2> 		je operatorfound
  4408 000034B6 3C2A                <2> 		cmp al, '*'
  4409 000034B8 7413                <2> 		je operatorfound
  4410 000034BA 3C2F                <2> 		cmp al, '/'
  4411 000034BC 740F                <2> 		je operatorfound
  4412 000034BE 3C5E                <2> 		cmp al, '^'
  4413 000034C0 740B                <2> 		je operatorfound
  4414 000034C2 46                  <2> 		inc esi
  4415 000034C3 3C00                <2> 		cmp al, 0
  4416 000034C5 0F841AF8FFFF        <2> 		je near nwcmd
  4417 000034CB EBDF                <2> 		jmp num2
  4418 000034CD 50                  <2> 	operatorfound: push eax
  4419 000034CE 30E4                <2> 		xor ah, ah
  4420 000034D0 8826                <2> 		mov [esi], ah
  4421 000034D2 89F7                <2> 		mov edi, esi
  4422 000034D4 46                  <2> 		inc esi
  4423 000034D5 8A06                <2> 		mov al, [esi]
  4424 000034D7 3C25                <2> 		cmp al, '%'
  4425 000034D9 0F8462000000        <2> 		je near resultnum1
  4426                              <2> 	varnum2: 
  4427 000034DF 57                  <2> 		push edi
  4428 000034E0 E8A4000000          <2> 		call checkdecimal
  4429 000034E5 5F                  <2> 		pop edi
  4430 000034E6 E880FEFFFF          <2> 		call cnvrttxt
  4431                              <2> 	vrnm2:
  4432 000034EB 89CB                <2> 		mov ebx, ecx
  4433 000034ED 53                  <2> 		push ebx
  4434 000034EE E864FBFFFF          <2> 		call clearbuffer
  4435 000034F3 8B35[982F0000]      <2> 		mov esi, [currentcommandloc]
  4436 000034F9 89F7                <2> 		mov edi, esi
  4437 000034FB 46                  <2> 		inc esi
  4438 000034FC 8A06                <2> 		mov al, [esi]
  4439 000034FE 3C25                <2> 		cmp al, '%'
  4440 00003500 0F844F000000        <2> 		je near resultnum2
  4441                              <2> 	varnum4: 
  4442 00003506 57                  <2> 		push edi
  4443 00003507 E869000000          <2> 		call checkdecimal2
  4444 0000350C 5F                  <2> 		pop edi
  4445 0000350D E859FEFFFF          <2> 		call cnvrttxt
  4446                              <2> 	vrnm4:
  4447 00003512 5B                  <2> 		pop ebx
  4448 00003513 58                  <2> 		pop eax
  4449 00003514 3C2B                <2> 		cmp al, '+'
  4450 00003516 0F849B000000        <2> 		je near plusnum
  4451 0000351C 3C2D                <2> 		cmp al, '-'
  4452 0000351E 0F849F000000        <2> 		je near subnum
  4453 00003524 3C2A                <2> 		cmp al, '*'
  4454 00003526 0F84A3000000        <2> 		je near mulnum
  4455 0000352C 3C2F                <2> 		cmp al, '/'
  4456 0000352E 0F84B1000000        <2> 		je near divnum
  4457 00003534 3C5E                <2> 		cmp al, '^'
  4458 00003536 0F84CE000000        <2> 		je near expnum
  4459 0000353C E9A4F7FFFF          <2> 		jmp nwcmd
  4460                              <2> 	resultnum1:
  4461 00003541 8A0D[15370000]      <2> 		mov cl, [decimalresult]
  4462 00003547 880D[13370000]      <2> 		mov [decimal], cl
  4463 0000354D 8B0D[16370000]      <2> 		mov ecx, [result]
  4464 00003553 EB96                <2> 		jmp vrnm2
  4465                              <2> 	resultnum2:
  4466 00003555 8A0D[13370000]      <2> 		mov cl, [decimal]
  4467 0000355B 880D[14370000]      <2> 		mov [decimal2], cl
  4468 00003561 8A0D[15370000]      <2> 		mov cl, [decimalresult]
  4469 00003567 880D[13370000]      <2> 		mov [decimal], cl
  4470 0000356D 8B0D[16370000]      <2> 		mov ecx, [result]
  4471 00003573 EB9D                <2> 		jmp vrnm4
  4472                              <2> 	checkdecimal2:
  4473 00003575 8A25[13370000]      <2> 		mov ah, [decimal]
  4474 0000357B 8825[14370000]      <2> 		mov [decimal2], ah
  4475 00003581 30E4                <2> 		xor ah, ah
  4476 00003583 8825[13370000]      <2> 		mov [decimal], ah
  4477                              <2> 	checkdecimal:
  4478 00003589 89F7                <2> 		mov edi, esi
  4479                              <2> 	chkdec1:
  4480 0000358B 8A07                <2> 		mov al, [edi]
  4481 0000358D 3C2E                <2> 		cmp al, '.'
  4482 0000358F 0F840B000000        <2> 		je near fnddec
  4483 00003595 3C00                <2> 		cmp al, 0
  4484 00003597 0F8419000000        <2> 		je near nodecimal
  4485 0000359D 47                  <2> 		inc edi
  4486 0000359E EBEB                <2> 		jmp chkdec1
  4487                              <2> 	fnddec:
  4488 000035A0 8A4701              <2> 		mov al, [edi + 1]
  4489 000035A3 8807                <2> 		mov [edi], al
  4490 000035A5 3C00                <2> 		cmp al, 0
  4491 000035A7 0F8409000000        <2> 		je near nodecimal
  4492 000035AD FE05[13370000]      <2> 		inc byte [decimal]
  4493 000035B3 47                  <2> 		inc edi
  4494 000035B4 EBEA                <2> 		jmp fnddec
  4495                              <2> 	nodecimal:
  4496 000035B6 C3                  <2> 		ret
  4497                              <2> 	plusnum:
  4498 000035B7 E815010000          <2> 		call decaddfix
  4499 000035BC 01D9                <2> 		add ecx, ebx
  4500 000035BE E98A000000          <2> 		jmp retnum
  4501                              <2> 	subnum:
  4502 000035C3 E809010000          <2> 		call decaddfix
  4503 000035C8 29D9                <2> 		sub ecx, ebx
  4504 000035CA E97E000000          <2> 		jmp retnum
  4505                              <2> 	mulnum:
  4506 000035CF A0[14370000]        <2> 		mov al, [decimal2]
  4507 000035D4 0005[13370000]      <2> 		add [decimal], al
  4508 000035DA 89C8                <2> 		mov eax, ecx
  4509 000035DC F7E3                <2> 		mul ebx
  4510 000035DE 89C1                <2> 		mov ecx, eax
  4511 000035E0 E968000000          <2> 		jmp retnum
  4512                              <2> 	divnum:
  4513 000035E5 E8E7000000          <2> 		call decaddfix
  4514 000035EA 30C0                <2> 		xor al, al
  4515 000035EC A2[13370000]        <2> 		mov [decimal], al
  4516 000035F1 31D2                <2> 		xor edx, edx
  4517 000035F3 89C8                <2> 		mov eax, ecx
  4518 000035F5 81FB00000000        <2> 		cmp ebx, 0
  4519 000035FB 0F844C000000        <2> 		je near retnum
  4520 00003601 F7F3                <2> 		div ebx
  4521 00003603 89C1                <2> 		mov ecx, eax
  4522 00003605 E943000000          <2> 		jmp retnum
  4523                              <2> 	expnum:
  4524 0000360A 8A15[13370000]      <2> 		mov dl, [decimal]
  4525 00003610 8815[14370000]      <2> 		mov [decimal2], dl
  4526 00003616 31D2                <2> 		xor edx, edx
  4527 00003618 89C8                <2> 		mov eax, ecx
  4528 0000361A 89D9                <2> 		mov ecx, ebx
  4529 0000361C 89C3                <2> 		mov ebx, eax
  4530 0000361E 81F900000000        <2> 		cmp ecx, 0
  4531 00003624 7422                <2> 		je noexpnum
  4532 00003626 49                  <2> 		dec ecx
  4533 00003627 81F900000000        <2> 		cmp ecx, 0
  4534 0000362D 7412                <2> 		je noexpnumlp
  4535 0000362F F7E3                <2> 	expnumlp: mul ebx
  4536 00003631 8A15[14370000]      <2> 		mov dl, [decimal2]
  4537 00003637 0015[13370000]      <2> 		add [decimal], dl
  4538 0000363D 31D2                <2> 		xor edx, edx
  4539 0000363F E2EE                <2> 		loop expnumlp
  4540                              <2> 	noexpnumlp:
  4541 00003641 89C1                <2> 		mov ecx, eax
  4542 00003643 E905000000          <2> 		jmp retnum
  4543                              <2> 	noexpnum:
  4544 00003648 B901000000          <2> 		mov ecx, 1
  4545                              <2> 	retnum: 
  4546 0000364D BE[2CBF0300]        <2> 		mov esi, numbuf
  4547 00003652 890D[16370000]      <2> 		mov [result], ecx
  4548 00003658 E80FFAFFFF          <2> 		call convert
  4549 0000365D BE[2CBF0300]        <2> 		mov esi, numbuf
  4550 00003662 8A25[13370000]      <2> 		mov ah, [decimal]
  4551 00003668 8825[15370000]      <2> 		mov [decimalresult], ah
  4552 0000366E 80FC00              <2> 		cmp ah, 0
  4553 00003671 0F8425000000        <2> 		je near noputdecimal
  4554                              <2> 	putdecimal:
  4555 00003677 4E                  <2> 		dec esi
  4556 00003678 FECC                <2> 		dec ah
  4557 0000367A 80FC00              <2> 		cmp ah, 0
  4558 0000367D 0F87F4FFFFFF        <2> 		ja near putdecimal
  4559 00003683 4E                  <2> 		dec esi
  4560 00003684 8A06                <2> 		mov al, [esi]
  4561 00003686 C6062E              <2> 		mov byte [esi], '.'
  4562                              <2> 	decputloop:
  4563 00003689 4E                  <2> 		dec esi
  4564 0000368A 8A26                <2> 		mov ah, [esi]
  4565 0000368C 8806                <2> 		mov [esi], al
  4566 0000368E 88E0                <2> 		mov al, ah
  4567 00003690 81FE[18BF0300]      <2> 		cmp esi, buf2
  4568 00003696 0F87EDFFFFFF        <2> 		ja near decputloop
  4569                              <2> 	noputdecimal:
  4570 0000369C BE[18BF0300]        <2> 		mov esi, buf2
  4571 000036A1 E809000000          <2> 		call chkadd
  4572 000036A6 E93AF6FFFF          <2> 		jmp nwcmd
  4573 000036AB 00000000            <2> edxnumbuf dw 0,0
  4574 000036AF 8A06                <2> 	chkadd: mov al, [esi]
  4575 000036B1 3C30                <2> 		cmp al, '0'
  4576 000036B3 750C                <2> 		jne dnadd
  4577 000036B5 46                  <2> 		inc esi
  4578 000036B6 81FE[2CBF0300]      <2> 		cmp esi, numbuf
  4579 000036BC 7402                <2> 		je dnaddm1
  4580 000036BE EBEF                <2> 		jmp chkadd
  4581 000036C0 4E                  <2> 	dnaddm1: dec esi
  4582 000036C1 E882E6FFFF          <2> 	dnadd:	call print
  4583 000036C6 BE[138C0000]        <2> 		mov esi, line
  4584 000036CB E878E6FFFF          <2> 		call print
  4585 000036D0 C3                  <2> 		ret
  4586                              <2> 		
  4587                              <2> 	decaddfix:
  4588 000036D1 A0[14370000]        <2> 		mov al, [decimal2]
  4589 000036D6 8A25[13370000]      <2> 		mov ah, [decimal]
  4590 000036DC 38E0                <2> 		cmp al, ah
  4591 000036DE 7432                <2> 		je gooddecadd
  4592 000036E0 38E0                <2> 		cmp al, ah
  4593 000036E2 721A                <2> 		jb lowdecadd
  4594                              <2> 	highdecadd:
  4595 000036E4 FEC4                <2> 		inc ah
  4596 000036E6 89CA                <2> 		mov edx, ecx
  4597 000036E8 C1E103              <2> 		shl ecx, 3
  4598 000036EB 01D1                <2> 		add ecx, edx
  4599 000036ED 01D1                <2> 		add ecx, edx
  4600 000036EF 38E0                <2> 		cmp al, ah
  4601 000036F1 77F1                <2> 		ja highdecadd
  4602 000036F3 8825[13370000]      <2> 		mov [decimal], ah
  4603 000036F9 E914000000          <2> 		jmp gooddecadd
  4604                              <2> 	lowdecadd:
  4605 000036FE FEC0                <2> 		inc al
  4606 00003700 89DA                <2> 		mov edx, ebx
  4607 00003702 C1E303              <2> 		shl ebx, 3
  4608 00003705 01D3                <2> 		add ebx, edx
  4609 00003707 01D3                <2> 		add ebx, edx
  4610 00003709 38E0                <2> 		cmp al, ah
  4611 0000370B 72F1                <2> 		jb lowdecadd
  4612 0000370D A2[13370000]        <2> 		mov [decimal], al
  4613                              <2> 	gooddecadd:
  4614 00003712 C3                  <2> 		ret
  4615                              <2> 		
  4616 00003713 00                  <2> decimal db 0
  4617 00003714 00                  <2> decimal2 db 0
  4618 00003715 00                  <2> decimalresult db 0
  4619 00003716 00000000            <2> result dd 0
  4620                              <1> %include 'source/programs/_variables.asm' ;% and $
  4621 0000371A FF2C2500            <2> db 255,44,"%",0
  4622                              <2> 	ans:
  4623 0000371E BE[18BF0300]        <2> 		mov esi, buf2
  4624 00003723 E887FFFFFF          <2> 		call chkadd
  4625 00003728 C3                  <2> 		ret
  4626                              <2> 		
  4627 00003729 FF2C2400            <2> db 255,44,"$",0
  4628 0000372D 8B35[982F0000]      <2> var: mov esi, [currentcommandloc]
  4629 00003733 BB[18A70300]        <2> 	mov ebx, variables
  4630 00003738 8A06                <2> lkeq:	mov al, [esi]
  4631 0000373A 3C3D                <2> 	cmp al, '='
  4632 0000373C 741B                <2> 	je eqfnd	;is there an '=' sign?
  4633 0000373E 3C00                <2> 	cmp al, 0
  4634 00003740 7403                <2> 	je echovars
  4635 00003742 46                  <2> 	inc esi
  4636 00003743 EBF3                <2> 	jmp lkeq
  4637 00003745 BE[18A70300]        <2> echovars: mov esi, variables
  4638 0000374A BB[18B70300]        <2> 	mov ebx, varend
  4639 0000374F B105                <2> 	mov cl, 5
  4640 00003751 B504                <2> 	mov ch, 4
  4641 00003753 E89EF8FFFF          <2> 	call array
  4642 00003758 C3                  <2> 	ret
  4643 00003759 46                  <2> eqfnd:	inc esi
  4644 0000375A 8A06                <2> 	mov al, [esi]
  4645 0000375C 3C00                <2> 	cmp al, 0
  4646 0000375E 7410                <2> 	je readvar
  4647 00003760 8B35[982F0000]      <2> 	mov esi, [currentcommandloc]
  4648 00003766 BB[18A70300]        <2> 	mov ebx, variables
  4649 0000376B E919000000          <2> 	jmp seek
  4650                              <2> readvar:
  4651 00003770 B00A                <2> 	mov al, 10
  4652 00003772 66BB0700            <2> 	mov bx, 7
  4653 00003776 C605[2C230000]00    <2> 	mov byte [commandedit], 0
  4654 0000377D BF[18BF0300]        <2> 	mov edi, buftxtend
  4655 00003782 E8F4E6FFFF          <2> 	call rdprint
  4656 00003787 EBA4                <2> 	jmp var
  4657 00003789 668B03              <2> seek:	mov ax, [ebx]
  4658 0000378C B105                <2> 	mov cl, 5
  4659 0000378E B504                <2> 	mov ch, 4
  4660 00003790 663D0000            <2> 	cmp ax, 0
  4661 00003794 0F845B000000        <2> 	je near save
  4662 0000379A 6639C8              <2> 	cmp ax, cx
  4663 0000379D 7403                <2> 	je skfnd
  4664 0000379F 43                  <2> 	inc ebx
  4665 000037A0 EBE7                <2> 	jmp seek
  4666 000037A2 8B35[982F0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4667 000037A8 46                  <2> 	inc esi
  4668 000037A9 81C302000000        <2> 	add ebx, 2
  4669 000037AF 89DF                <2> 	mov edi, ebx
  4670 000037B1 B13D                <2> 	mov cl, '='
  4671 000037B3 E81FF8FFFF          <2> 	call cndtest
  4672 000037B8 3C01                <2> 	cmp al, 1	
  4673 000037BA 7418                <2> 	je varfnd
  4674 000037BC 89FB                <2> 	mov ebx, edi
  4675 000037BE 8B35[982F0000]      <2> 	mov esi, [currentcommandloc]
  4676 000037C4 668B03              <2> 	mov ax, [ebx]
  4677 000037C7 663D0000            <2> 	cmp ax, 0
  4678 000037CB 0F8424000000        <2> 	je near save
  4679 000037D1 43                  <2> 	inc ebx
  4680 000037D2 EBB5                <2> 	jmp seek
  4681 000037D4 8A03                <2> varfnd:	mov al, [ebx]
  4682 000037D6 3C04                <2> 	cmp al, 4
  4683 000037D8 7404                <2> 	je save2
  4684 000037DA 4B                  <2> 	dec ebx
  4685 000037DB 4E                  <2> 	dec esi
  4686 000037DC EBF6                <2> 	jmp varfnd
  4687 000037DE 4B                  <2> save2:	dec ebx
  4688 000037DF 4E                  <2> 	dec esi
  4689 000037E0 8A03                <2> 	mov al, [ebx]
  4690 000037E2 3C05                <2> 	cmp al, 5
  4691 000037E4 7402                <2> 	je remove
  4692 000037E6 EBEC                <2> 	jmp varfnd
  4693 000037E8 8A03                <2> remove: mov al, [ebx]
  4694 000037EA 3C00                <2> 	cmp al, 0
  4695 000037EC 749B                <2> 	je seek
  4696 000037EE 30C0                <2> 	xor al, al
  4697 000037F0 8803                <2> 	mov [ebx], al
  4698 000037F2 43                  <2> 	inc ebx
  4699 000037F3 EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4700 000037F5 8B35[982F0000]      <2> save:	mov esi, [currentcommandloc]
  4701 000037FB 43                  <2> 	inc ebx
  4702 000037FC B005                <2> 	mov al, 5
  4703 000037FE B404                <2> 	mov ah, 4
  4704 00003800 668903              <2> 	mov [ebx], ax
  4705 00003803 43                  <2> 	inc ebx
  4706 00003804 43                  <2> svhere:	inc ebx
  4707 00003805 46                  <2> 	inc esi
  4708 00003806 8A06                <2> 	mov al, [esi]
  4709 00003808 3C00                <2> 	cmp al, 0
  4710 0000380A 0F844A000000        <2> 	je near svdone
  4711 00003810 3C25                <2> 	cmp al, '%'
  4712 00003812 7404                <2> 	je ans2
  4713 00003814 8803                <2> 	mov [ebx], al	
  4714 00003816 EBEC                <2> 	jmp svhere
  4715 00003818 56                  <2> ans2:	push esi
  4716 00003819 BE[18BF0300]        <2> 	mov esi, buf2
  4717 0000381E E823000000          <2> 	call ansfnd
  4718 00003823 E803000000          <2> 	call anscp
  4719 00003828 5E                  <2> 	pop esi
  4720 00003829 EBD9                <2> 	jmp svhere
  4721 0000382B 8A06                <2> anscp:	mov al, [esi]
  4722 0000382D 8803                <2> 	mov [ebx], al
  4723 0000382F 81FE[2CBF0300]      <2> 	cmp esi, numbuf
  4724 00003835 74CD                <2> 	je svhere
  4725 00003837 3C00                <2> 	cmp al, 0
  4726 00003839 74C9                <2> 	je svhere
  4727 0000383B 43                  <2> 	inc ebx
  4728 0000383C 46                  <2> 	inc esi
  4729 0000383D EBEC                <2> 	jmp anscp
  4730 0000383F 5E                  <2> ansnf:	pop esi
  4731 00003840 8A06                <2> 	mov al, [esi]
  4732 00003842 8803                <2> 	mov [ebx], al
  4733 00003844 EBBE                <2> 	jmp svhere
  4734 00003846 46                  <2> ansfnd:	inc esi
  4735 00003847 81FE[2BBF0300]      <2> 	cmp esi, numbuf - 1
  4736 0000384D 740A                <2> 	je fndans
  4737 0000384F 8A06                <2> 	mov al, [esi]
  4738 00003851 3C00                <2> 	cmp al, 0
  4739 00003853 74EA                <2> 	je ansnf
  4740 00003855 3C30                <2> 	cmp al, '0'
  4741 00003857 74ED                <2> 	je ansfnd
  4742                              <2> fndans:
  4743 00003859 C3                  <2> 	ret
  4744 0000385A 30C0                <2> svdone:	xor al, al
  4745 0000385C 8803                <2> 	mov [ebx], al
  4746 0000385E C3                  <2> 	ret
  4747                              <1> %include 'source/programs/_run.asm' ;./
  4748                              <2> 
  4749 0000385F 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4750 00003863 FF2C2E2F00          <2> 	db 255,44,"./",0
  4751                              <2> rundiskprog:
  4752 00003868 8B3D[982F0000]      <2> 	mov edi, [currentcommandloc]
  4753 0000386E 81C702000000        <2> 	add edi, 2
  4754 00003874 BE00004000          <2> 	mov esi, 0x400000
  4755 00003879 E8A5300000          <2> 	call loadfile
  4756 0000387E 81FA94010000        <2> 	cmp edx, 404
  4757 00003884 746A                <2> 	je noprogfound
  4758 00003886 BB00004000          <2> 	mov ebx, 0x400000
  4759 0000388B A1[5F380000]        <2> 	mov eax, [elfstart]
  4760 00003890 3903                <2> 	cmp [ebx], eax
  4761 00003892 0F8437000000        <2> 	je near runelf
  4762 00003898 66813B4558          <2> 	cmp word [ebx], "EX"
  4763 0000389D 7577                <2> 	jne progbatchfound
  4764 0000389F 81C302000000        <2> 	add ebx, 2
  4765 000038A5 8B3D[982F0000]      <2> 	mov edi, [currentcommandloc]
  4766 000038AB 81C702000000        <2> 	add edi, 2
  4767                              <2> findspaceprog:
  4768 000038B1 8A07                <2> 	mov al, [edi]
  4769 000038B3 47                  <2> 	inc edi
  4770 000038B4 3C20                <2> 	cmp al, " "
  4771 000038B6 75F9                <2> 	jne findspaceprog
  4772                              <2> findnonspaceprog:
  4773 000038B8 8A07                <2> 	mov al, [edi]
  4774 000038BA 47                  <2> 	inc edi
  4775 000038BB 3C20                <2> 	cmp al, " "
  4776 000038BD 74F9                <2> 	je findnonspaceprog
  4777 000038BF 4F                  <2> 	dec edi
  4778 000038C0 8925[98A40300]      <2> 	mov [previousstack], esp
  4779 000038C6 FFD3                <2> 	call ebx
  4780 000038C8 8B25[98A40300]      <2> 	mov esp, [previousstack]
  4781 000038CE C3                  <2> 	ret
  4782                              <2> runelf:
  4783 000038CF 8B3D[982F0000]      <2> 	mov edi, [currentcommandloc]
  4784 000038D5 81C702000000        <2> 	add edi, 2
  4785 000038DB 81C380000000        <2> 	add ebx, 0x80
  4786 000038E1 8925[98A40300]      <2> 	mov [previousstack], esp
  4787 000038E7 FFD3                <2> 	call ebx
  4788 000038E9 8B25[98A40300]      <2> 	mov esp, [previousstack]
  4789 000038EF C3                  <2> 	ret
  4790                              <2> noprogfound:
  4791 000038F0 BE[DA8B0000]        <2> 	mov esi, notfound1
  4792 000038F5 E84EE4FFFF          <2> 	call print
  4793 000038FA 8B35[982F0000]      <2> 	mov esi, [currentcommandloc]
  4794 00003900 81C602000000        <2> 	add esi, 2
  4795 00003906 E83DE4FFFF          <2> 	call print
  4796 0000390B BE[E28B0000]        <2> 	mov esi, notfound2
  4797 00003910 E833E4FFFF          <2> 	call print
  4798 00003915 C3                  <2> 	ret
  4799                              <2> progbatchfound:
  4800 00003916 BF00004000          <2> 		mov edi, 0x400000
  4801 0000391B C605[12A70300]01    <2> 		mov byte [BATCHISON], 1
  4802                              <2> 	batchrunloop:
  4803 00003922 E89BF3FFFF          <2> 		call buftxtclear
  4804 00003927 BE[18BB0300]        <2> 		mov esi, buftxt
  4805 0000392C 8935[982F0000]      <2> 		mov [currentcommandloc], esi
  4806                              <2> 	batchrunloop2:
  4807 00003932 B10A                <2> 		mov cl, 10
  4808 00003934 B50D                <2> 		mov ch, 13
  4809 00003936 380F                <2> 		cmp [edi], cl
  4810 00003938 0F8419000000        <2> 		je near nxtbatchrunline
  4811 0000393E 382F                <2> 		cmp [edi], ch
  4812 00003940 0F8411000000        <2> 		je near nxtbatchrunline
  4813 00003946 803F00              <2> 		cmp byte [edi], 0
  4814 00003949 0F8408000000        <2> 		je near nxtbatchrunline
  4815 0000394F 8A07                <2> 		mov al, [edi]
  4816 00003951 8806                <2> 		mov [esi], al
  4817 00003953 46                  <2> 		inc esi
  4818 00003954 47                  <2> 		inc edi
  4819 00003955 EBDB                <2> 		jmp batchrunloop2
  4820                              <2> 	nxtbatchrunline:
  4821 00003957 47                  <2> 		inc edi
  4822 00003958 380F                <2> 		cmp [edi], cl
  4823 0000395A 74FB                <2> 		je nxtbatchrunline
  4824 0000395C 382F                <2> 		cmp [edi], ch
  4825 0000395E 74F7                <2> 		je nxtbatchrunline
  4826 00003960 893D[BE390000]      <2> 		mov [batchedi], edi
  4827 00003966 893D[0EA70300]      <2> 		mov [BATCHPOS], edi
  4828 0000396C C60600              <2> 		mov byte [esi], 0
  4829 0000396F BE[18BB0300]        <2> 		mov esi, buftxt
  4830 00003974 803E00              <2> 		cmp byte [esi], 0
  4831 00003977 0F8439000000        <2> 		je near nobatchfoundrun
  4832 0000397D 31DB                <2> 		xor ebx, ebx
  4833 0000397F 8A1D[A9A60300]      <2> 		mov bl, [IFON]
  4834 00003985 80FB00              <2> 		cmp bl, 0
  4835 00003988 0F8534000000        <2> 		jne near iftestbatch
  4836                              <2> 	doneiftest:
  4837 0000398E 803D[943A0000]00    <2> 		cmp byte [runnextline], 0
  4838 00003995 0F8405000000        <2> 		je near noruniftest
  4839 0000399B E822F5FFFF          <2> 		call run
  4840                              <2> 	noruniftest:
  4841 000039A0 C605[943A0000]01    <2> 		mov byte [runnextline], 1
  4842 000039A7 8B3D[BE390000]      <2> 		mov edi, [batchedi]
  4843 000039AD 803F00              <2> 		cmp byte [edi], 0
  4844 000039B0 0F856CFFFFFF        <2> 		jne near batchrunloop
  4845                              <2> 	nobatchfoundrun:
  4846 000039B6 C605[12A70300]00    <2> 		mov byte [BATCHISON], 0
  4847 000039BD C3                  <2> 		ret
  4848                              <2> 	
  4849 000039BE 00000000            <2> batchedi dd 0	
  4850                              <2> 	
  4851                              <2> 	iftestbatch:
  4852 000039C2 BE[AAA60300]        <2> 		mov esi, IFTRUE
  4853 000039C7 01DE                <2> 		add esi, ebx
  4854 000039C9 803E00              <2> 		cmp byte [esi], 0
  4855 000039CC 0F85BCFFFFFF        <2> 		jne near doneiftest
  4856 000039D2 881D[953A0000]      <2> 		mov [iffalsebuf], bl
  4857 000039D8 803D[13A70300]01    <2> 		cmp byte [LOOPON], 1
  4858 000039DF 0F8513000000        <2> 		jne near fifindbatch
  4859 000039E5 E938FFFFFF          <2> 		jmp batchrunloop
  4860                              <2> 	elsetestbatch:
  4861 000039EA C60601              <2> 		mov byte [esi], 1
  4862 000039ED 81C705000000        <2> 		add edi, 5
  4863 000039F3 E92AFFFFFF          <2> 		jmp batchrunloop
  4864                              <2> 	fifindbatch:
  4865 000039F8 66B96966            <2> 		mov cx, "if"
  4866 000039FC 66B86669            <2> 		mov ax, "fi"
  4867 00003A00 663907              <2> 		cmp [edi], ax
  4868 00003A03 0F8424000000        <2> 		je near fifoundbatch
  4869 00003A09 66390F              <2> 		cmp [edi], cx
  4870 00003A0C 0F8465000000        <2> 		je near iffoundbatch
  4871 00003A12 803F00              <2> 		cmp byte [edi], 0
  4872 00003A15 0F8412000000        <2> 		je near fifoundbatch
  4873 00003A1B B8656C7365          <2> 		mov eax, "else"
  4874 00003A20 3907                <2> 		cmp [edi], eax
  4875 00003A22 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4876 00003A28 E973FFFFFF          <2> 		jmp noruniftest
  4877                              <2> 	fifoundbatch:
  4878 00003A2D 81C702000000        <2> 		add edi, 2
  4879 00003A33 B00A                <2> 		mov al, 10
  4880 00003A35 3807                <2> 		cmp [edi], al
  4881 00003A37 0F840B000000        <2> 		je near goodfibatch
  4882 00003A3D 803F00              <2> 		cmp byte [edi], 0
  4883 00003A40 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4884 00003A46 EBB0                <2> 		jmp fifindbatch
  4885                              <2> 	goodfibatch:
  4886 00003A48 B001                <2> 		mov al, 1
  4887 00003A4A 2805[A9A60300]      <2> 		sub [IFON], al 
  4888 00003A50 A0[A9A60300]        <2> 		mov al, [IFON]
  4889 00003A55 8A1D[953A0000]      <2> 		mov bl, [iffalsebuf]
  4890 00003A5B 38D8                <2> 		cmp al, bl
  4891 00003A5D 7799                <2> 		ja fifindbatch
  4892 00003A5F 8B35[982F0000]      <2> 		mov esi, [currentcommandloc]
  4893 00003A65 81EF02000000        <2> 		sub edi, 2
  4894 00003A6B C605[943A0000]00    <2> 		mov byte [runnextline], 0
  4895 00003A72 E9ABFEFFFF          <2> 		jmp batchrunloop
  4896                              <2> 	iffoundbatch:
  4897 00003A77 B020                <2> 		mov al, ' '
  4898 00003A79 81C702000000        <2> 		add edi, 2
  4899 00003A7F 3807                <2> 		cmp [edi], al
  4900 00003A81 0F8571FFFFFF        <2> 		jne near fifindbatch
  4901 00003A87 B001                <2> 		mov al, 1
  4902 00003A89 0005[A9A60300]      <2> 		add [IFON], al
  4903 00003A8F E964FFFFFF          <2> 		jmp fifindbatch
  4904                              <2> 		
  4905                              <2> 		
  4906 00003A94 01                  <2> runnextline db 1
  4907 00003A95 00                  <2> iffalsebuf db 0
  4908 00003A96 C3                  <2> notbatch: ret 
  4909                              <1> %ifdef network.included
  4910                              <1> 	%include 'source/programs/arp.asm'
  4911 00003A97 FF2C61727000        <2> db 255,44,"arp",0
  4912                              <2> 	;ARP TESTING
  4913                              <2> arptest:
  4914 00003A9D 8B35[982F0000]      <2> 	mov esi, [currentcommandloc]
  4915 00003AA3 81C604000000        <2> 	add esi, 4
  4916 00003AA9 E831500000          <2> 	call strtoip
  4917 00003AAE 890D[553B0000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4918 00003AB4 E86C500000          <2> 	call showip
  4919 00003AB9 803D[593B0000]01    <2> 	cmp byte [arpconfig], 1
  4920 00003AC0 7405                <2> 	je arptest2
  4921 00003AC2 E841000000          <2> 	call arpinit
  4922                              <2> arptest2:	;try to reach 192.168.0.1
  4923 00003AC7 8B0D[CC8B0000]      <2> 	mov ecx, [sysmac]
  4924 00003ACD 668B1D[D08B0000]    <2> 	mov bx, [sysmac + 4]
  4925 00003AD4 890D[353B0000]      <2> 	mov [sourcemac], ecx
  4926 00003ADA 66891D[393B0000]    <2> 	mov [sourcemac + 4],bx
  4927 00003AE1 890D[453B0000]      <2> 	mov [arpsenderinfo], ecx
  4928 00003AE7 66891D[493B0000]    <2> 	mov [arpsenderinfo + 4], bx
  4929 00003AEE BF[2F3B0000]        <2> 	mov edi, frame
  4930 00003AF3 BE[593B0000]        <2> 	mov esi, framend
  4931 00003AF8 E8B44F0000          <2> 	call sendpacket
  4932 00003AFD BE[138C0000]        <2> 	mov esi, line
  4933 00003B02 E841E2FFFF          <2> 	call print
  4934 00003B07 C3                  <2> 	ret
  4935                              <2> 	
  4936                              <2> arpinit:
  4937 00003B08 BE[5A3B0000]        <2> 	mov esi, arptable
  4938 00003B0D BF[CC8B0000]        <2> 	mov edi, sysmac
  4939 00003B12 BB[C88B0000]        <2> 	mov ebx, sysip
  4940 00003B17 8B0F                <2> 	mov ecx, [edi]
  4941 00003B19 890E                <2> 	mov [esi], ecx
  4942 00003B1B 668B4F04            <2> 	mov cx, [edi + 4]
  4943 00003B1F 894E04              <2> 	mov [esi + 4], ecx
  4944 00003B22 8B0B                <2> 	mov ecx, [ebx]
  4945 00003B24 894E06              <2> 	mov [esi + 6], ecx
  4946 00003B27 C605[593B0000]01    <2> 	mov byte [arpconfig], 1
  4947 00003B2E C3                  <2> 	ret
  4948                              <2> 	
  4949                              <2> ;example frame
  4950                              <2> frame:
  4951 00003B2F FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4952 00003B35 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4953 00003B3B 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4954                              <2> 	;;example packet
  4955 00003B3D 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4956 00003B3F 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4957 00003B41 0604                <2> 					db 6,4			;length of mac, length of ip
  4958 00003B43 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4959 00003B45 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4960 00003B4B C0A80073            <2> 					db 192,168,0,115		;ip
  4961 00003B4F 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4962 00003B55 C0A80000            <2> 					db 192,168,0,0			;ip
  4963                              <2> framend:
  4964                              <2> 
  4965 00003B59 00                  <2> arpconfig db 0
  4966                              <2> arptable:	;;mac,ip
  4967 00003B5A 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4968 00003B63 00<rept>            <2>
  4969                              <2> arptableend:	
  4970                              <1> %endif
  4971                              <1> %include 'source/programs/batch.asm'
  4972 00003BBE FF2C626174636800    <2> db 255,44,"batch",0
  4973                              <2> 	batchst: 
  4974 00003BC6 8B3D[982F0000]      <2> 		mov edi, [currentcommandloc]
  4975 00003BCC 81C706000000        <2> 		add edi, 6
  4976 00003BD2 803F00              <2> 		cmp byte [edi], 0
  4977 00003BD5 0F846D000000        <2> 		je near nonamefound
  4978 00003BDB BE00004000          <2> 		mov esi, 0x400000
  4979 00003BE0 E83E2D0000          <2> 		call loadfile
  4980 00003BE5 89D0                <2> 		mov eax, edx
  4981 00003BE7 3D94010000          <2> 		cmp eax, 404
  4982 00003BEC 7465                <2> 		je goodbatchname
  4983 00003BEE BE[F93B0000]        <2> 		mov esi, badbatchname
  4984 00003BF3 E850E1FFFF          <2> 		call print
  4985 00003BF8 C3                  <2> 		ret
  4986 00003BF9 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4987 00003C02 20616C726561647920- <2>
  4988 00003C0B 657869737473210A00  <2>
  4989 00003C14 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4990 00003C1D 746F20747970652061- <2>
  4991 00003C26 206E616D6520616674- <2>
  4992 00003C2F 65722074686520636F- <2>
  4993 00003C38 6D6D616E642E0A00    <2>
  4994 00003C40 00000000            <2> 		esicache3 dd 0
  4995 00003C44 00000000            <2> 		esicache2 dd 0
  4996                              <2> 	nonamefound:
  4997 00003C48 BE[143C0000]        <2> 		mov esi, namenotfoundbatch
  4998 00003C4D E8F6E0FFFF          <2> 		call print
  4999 00003C52 C3                  <2> 		ret
  5000                              <2> 	goodbatchname:
  5001 00003C53 BE00004000          <2> 		mov esi, 0x400000
  5002                              <2> 	batchcreate:
  5003 00003C58 8935[403C0000]      <2> 		mov [esicache3], esi
  5004 00003C5E BF00008000          <2> 		mov edi, 0x800000
  5005 00003C63 B00A                <2> 		mov al, 10
  5006 00003C65 B307                <2> 		mov bl, 7
  5007 00003C67 B404                <2> 		mov ah, 4
  5008 00003C69 CD30                <2> 		int 30h
  5009 00003C6B 8935[443C0000]      <2> 		mov [esicache2], esi
  5010 00003C71 8A0E                <2> 		mov cl, [esi]
  5011 00003C73 8B35[403C0000]      <2> 		mov esi, [esicache3]
  5012 00003C79 BB[AD3C0000]        <2> 		mov ebx, exitword
  5013 00003C7E E854F3FFFF          <2> 		call cndtest
  5014 00003C83 3C01                <2> 		cmp al, 1
  5015 00003C85 7411                <2> 		je endbatchcreate
  5016 00003C87 3C02                <2> 		cmp al, 2
  5017 00003C89 740D                <2> 		je endbatchcreate
  5018 00003C8B 8B35[443C0000]      <2> 		mov esi, [esicache2]
  5019 00003C91 B00A                <2> 		mov al, 10
  5020 00003C93 8806                <2> 		mov [esi], al
  5021 00003C95 46                  <2> 		inc esi
  5022 00003C96 EBC0                <2> 		jmp batchcreate
  5023                              <2> 	endbatchcreate:
  5024 00003C98 8B35[403C0000]      <2> 		mov esi, [esicache3]
  5025 00003C9E 31C0                <2> 		xor eax, eax
  5026 00003CA0 8806                <2> 		mov [esi], al
  5027 00003CA2 BE00004000          <2> 		mov esi, 0x400000
  5028 00003CA7 E89CE0FFFF          <2> 		call print
  5029 00003CAC C3                  <2> 		ret
  5030                              <2> 	
  5031 00003CAD 5C7800              <2> 	exitword db "\x",0
  5032 00003CB0 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  5033 00003CB9 6F20657869742E0A00  <2>
  5034                              <1> %ifdef gui.background
  5035                              <1> 	%include 'source/programs/background.asm'
  5036                              <1> %endif
  5037                              <1> %include 'source/programs/beep.asm'
  5038 00003CC2 FF2C6265657000      <2> 	db 255,44,"beep",0
  5039                              <2> beep:
  5040 00003CC9 B8[EE3C0000]        <2> 	mov eax, beepstart
  5041 00003CCE A3[6B020000]        <2> 	mov [soundpos], eax
  5042 00003CD3 B8[F23C0000]        <2> 	mov eax, beepend
  5043 00003CD8 A3[6F020000]        <2> 	mov [soundendpos], eax
  5044 00003CDD C605[68020000]01    <2> 	mov byte [soundon], 1
  5045                              <2> waitforsoundendbeep:
  5046 00003CE4 A0[68020000]        <2> 	mov al, [soundon]
  5047 00003CE9 3C00                <2> 	cmp al, 0
  5048 00003CEB 75F7                <2> 	jne waitforsoundendbeep
  5049 00003CED C3                  <2> 	ret
  5050                              <2> 	
  5051                              <2> beepstart:
  5052 00003CEE 3200D111            <2> 	dw 50, 4561
  5053                              <2> beepend:
  5054                              <1> %include 'source/programs/cd.asm'
  5055 00003CF2 FF2C636400          <2> db 255,44,"cd",0
  5056                              <2> cd:
  5057 00003CF7 8B35[982F0000]      <2> 	mov esi, [currentcommandloc]
  5058 00003CFD 81C603000000        <2> 	add esi, 3
  5059 00003D03 8B3D[A0A40300]      <2> 	mov edi, [currentfolderloc]
  5060 00003D09 893D[9CA40300]      <2> 	mov [lastfolderloc], edi
  5061 00003D0F 81C7[A4A40300]      <2> 	add edi, currentfolder
  5062 00003D15 4F                  <2> 	dec edi
  5063 00003D16 66813E2E2E          <2> 	cmp word [esi], ".."
  5064 00003D1B 742A                <2> 	je .moveup
  5065 00003D1D 47                  <2> 	inc edi
  5066                              <2> .movedown:
  5067 00003D1E 8A06                <2> 	mov al, [esi]
  5068 00003D20 8807                <2> 	mov [edi], al
  5069 00003D22 47                  <2> 	inc edi
  5070 00003D23 46                  <2> 	inc esi
  5071 00003D24 3C00                <2> 	cmp al, 0
  5072 00003D26 740A                <2> 	je .donecd
  5073 00003D28 81FF[A4A60300]      <2> 	cmp edi, currentfolderend
  5074 00003D2E 72EE                <2> 	jb .movedown
  5075 00003D30 30C0                <2> 	xor al, al
  5076                              <2> .donecd:
  5077 00003D32 4F                  <2> 	dec edi
  5078 00003D33 C6072F              <2> 	mov byte [edi], '/'
  5079 00003D36 47                  <2> 	inc edi
  5080 00003D37 C60700              <2> 	mov byte [edi], 0
  5081 00003D3A 81EF[A4A40300]      <2> 	sub edi, currentfolder
  5082 00003D40 893D[A0A40300]      <2> 	mov [currentfolderloc], edi
  5083 00003D46 C3                  <2> 	ret
  5084                              <2> .moveup:
  5085 00003D47 31C0                <2> 	xor eax, eax
  5086 00003D49 A3[9CA40300]        <2> 	mov [lastfolderloc], eax
  5087                              <2> .moveuploop:
  5088 00003D4E 4F                  <2> 	dec edi
  5089 00003D4F 8A07                <2> 	mov al, [edi]
  5090 00003D51 81FF[A4A40300]      <2> 	cmp edi, currentfolder
  5091 00003D57 763B                <2> 	jbe .moveupover
  5092 00003D59 3C2F                <2> 	cmp al, '/'
  5093 00003D5B 75F1                <2> 	jne .moveuploop
  5094 00003D5D C6072F              <2> 	mov byte [edi], '/'
  5095 00003D60 47                  <2> 	inc edi
  5096 00003D61 C60700              <2> 	mov byte [edi], 0
  5097 00003D64 81EF[A4A40300]      <2> 	sub edi, currentfolder
  5098 00003D6A 893D[A0A40300]      <2> 	mov [currentfolderloc], edi
  5099 00003D70 81C7[A4A40300]      <2> 	add edi, currentfolder
  5100 00003D76 4F                  <2> 	dec edi
  5101                              <2> .lastfolder:
  5102 00003D77 4F                  <2> 	dec edi
  5103 00003D78 8A07                <2> 	mov al, [edi]
  5104 00003D7A 81FF[A4A40300]      <2> 	cmp edi, currentfolder
  5105 00003D80 7604                <2> 	jbe .donemoveup
  5106 00003D82 3C2F                <2> 	cmp al, '/'
  5107 00003D84 75F1                <2> 	jne .lastfolder
  5108                              <2> .donemoveup:
  5109 00003D86 47                  <2> 	inc edi
  5110 00003D87 81EF[A4A40300]      <2> 	sub edi, currentfolder
  5111 00003D8D 893D[9CA40300]      <2> 	mov [lastfolderloc], edi
  5112 00003D93 C3                  <2> 	ret
  5113                              <2> .moveupover:
  5114 00003D94 BF[A4A40300]        <2> 	mov edi, currentfolder
  5115 00003D99 C6072F              <2> 	mov byte [edi], '/'
  5116 00003D9C 47                  <2> 	inc edi
  5117 00003D9D C60700              <2> 	mov byte [edi], 0
  5118 00003DA0 31C0                <2> 	xor eax, eax
  5119 00003DA2 A3[9CA40300]        <2> 	mov [lastfolderloc], eax
  5120 00003DA7 40                  <2> 	inc eax
  5121 00003DA8 A3[A0A40300]        <2> 	mov [currentfolderloc], eax
  5122 00003DAD C3                  <2> 	ret
  5123                              <1> %include 'source/programs/charmap.asm'
  5124 00003DAE 00                  <2> charmapnum db 0
  5125 00003DAF FF2C636861726D6170- <2> db 255,44,"charmap",0
  5126 00003DB8 00                  <2>
  5127 00003DB9 8B35[982F0000]      <2> 	mov esi, [currentcommandloc]
  5128 00003DBF 81C609000000        <2> 	add esi, 9
  5129 00003DC5 803E00              <2> 	cmp byte [esi], 0
  5130 00003DC8 7412                <2> 	je .nospecific
  5131 00003DCA E853F5FFFF          <2> 	call cnvrthextxt
  5132 00003DCF 6689C8              <2> 	mov ax, cx
  5133 00003DD2 66BB0700            <2> 	mov bx, 7
  5134 00003DD6 E8FBE5FFFF          <2> 	call prcharq
  5135 00003DDB C3                  <2> 	ret
  5136                              <2> .nospecific:
  5137 00003DDC 66BB0700            <2> 	mov bx, 7
  5138 00003DE0 66B82000            <2> 	mov ax, " "
  5139 00003DE4 C605[AE3D0000]00    <2> 	mov byte [charmapnum], 0
  5140 00003DEB E8E6E5FFFF          <2> 	call prcharq
  5141 00003DF0 E8E1E5FFFF          <2> 	call prcharq
  5142 00003DF5 E8DCE5FFFF          <2> 	call prcharq
  5143 00003DFA E8D7E5FFFF          <2> 	call prcharq
  5144 00003DFF 66B83000            <2> 	mov ax, "0"
  5145                              <2> charmapnumprnt:
  5146 00003E03 E8CEE5FFFF          <2> 	call prcharq
  5147 00003E08 6640                <2> 	inc ax
  5148 00003E0A 6650                <2> 	push ax
  5149 00003E0C 66B82000            <2> 	mov ax, " "
  5150 00003E10 E8C1E5FFFF          <2> 	call prcharq
  5151 00003E15 6658                <2> 	pop ax
  5152 00003E17 663D3900            <2> 	cmp ax, "9"
  5153 00003E1B 76E6                <2> 	jbe charmapnumprnt
  5154 00003E1D 66B84100            <2> 	mov ax, "A"
  5155                              <2> charmapnumprnt2:
  5156 00003E21 E8B0E5FFFF          <2> 	call prcharq
  5157 00003E26 6640                <2> 	inc ax
  5158 00003E28 6650                <2> 	push ax
  5159 00003E2A 66B82000            <2> 	mov ax, " "
  5160 00003E2E E8A3E5FFFF          <2> 	call prcharq
  5161 00003E33 6658                <2> 	pop ax
  5162 00003E35 663D4700            <2> 	cmp ax, "G"
  5163 00003E39 72E6                <2> 	jb charmapnumprnt2
  5164                              <2> 	
  5165 00003E3B BE[138C0000]        <2> 	mov esi, line
  5166 00003E40 E8E4DEFFFF          <2> 	call printquiet
  5167 00003E45 6631C0              <2> 	xor ax, ax
  5168 00003E48 6689C1              <2> 	mov cx, ax
  5169 00003E4B E85BF3FFFF          <2> 	call showhexsmall
  5170 00003E50 E970000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5171                              <2> charmapcopy:
  5172 00003E55 6640                <2> 	inc ax
  5173 00003E57 6650                <2> 	push ax
  5174 00003E59 663D0800            <2> 	cmp ax, 8
  5175 00003E5D 7466                <2> 	je charmapnocopy
  5176 00003E5F 663D0900            <2> 	cmp ax, 9
  5177 00003E63 7460                <2> 	je charmapnocopy
  5178 00003E65 663D0A00            <2> 	cmp ax, 10
  5179 00003E69 745A                <2> 	je charmapnocopy
  5180 00003E6B 663D0D00            <2> 	cmp ax, 13
  5181 00003E6F 7454                <2> 	je charmapnocopy
  5182 00003E71 663DFF00            <2> 	cmp ax, 255
  5183 00003E75 744E                <2> 	je charmapnocopy
  5184 00003E77 663D0001            <2> 	cmp ax, 256
  5185 00003E7B 7443                <2> 	je nomorecharmap
  5186 00003E7D E854E5FFFF          <2> 	call prcharq
  5187 00003E82 66B82000            <2> 	mov ax, " "
  5188 00003E86 E84BE5FFFF          <2> 	call prcharq
  5189 00003E8B 6658                <2> 	pop ax
  5190                              <2> charmapcopycheck:
  5191 00003E8D FE05[AE3D0000]      <2> 	inc byte [charmapnum]
  5192 00003E93 803D[AE3D0000]10    <2> 	cmp byte [charmapnum], 16
  5193 00003E9A 72B9                <2> 	jb charmapcopy
  5194 00003E9C 6650                <2> 	push ax
  5195 00003E9E BE[138C0000]        <2> 	mov esi, line
  5196 00003EA3 E881DEFFFF          <2> 	call printquiet
  5197 00003EA8 6658                <2> 	pop ax
  5198 00003EAA 3CFF                <2> 	cmp al, 255
  5199 00003EAC 7412                <2> 	je nomorecharmap
  5200 00003EAE 88C1                <2> 	mov cl, al
  5201 00003EB0 FEC1                <2> 	inc cl
  5202 00003EB2 E8F4F2FFFF          <2> 	call showhexsmall
  5203 00003EB7 C605[AE3D0000]00    <2> 	mov byte [charmapnum], 0
  5204 00003EBE EB95                <2> 	jmp charmapcopy
  5205                              <2> nomorecharmap:
  5206 00003EC0 E920EEFFFF          <2> 	jmp nwcmd
  5207                              <2> charmapnocopy:
  5208 00003EC5 6650                <2> 	push ax
  5209 00003EC7 66B82000            <2> 	mov ax, " "
  5210 00003ECB E806E5FFFF          <2> 	call prcharq
  5211 00003ED0 E801E5FFFF          <2> 	call prcharq
  5212 00003ED5 6658                <2> 	pop ax
  5213 00003ED7 EBB4                <2> 	jmp charmapcopycheck
  5214                              <1> %ifdef gui.included
  5215                              <1> 	%include 'source/programs/circle.asm'
  5216 00003ED9 FF2C636972636C6500  <2> db 255,44,"circle",0
  5217                              <2> circle:
  5218 00003EE2 8B35[982F0000]      <2> 	mov esi, [currentcommandloc]
  5219 00003EE8 81C607000000        <2> 	add esi, 7
  5220 00003EEE 66B91000            <2> 	mov cx, 16
  5221 00003EF2 30C0                <2> 	xor al, al
  5222 00003EF4 3806                <2> 	cmp [esi], al
  5223 00003EF6 7405                <2> 	je .nocmdline
  5224 00003EF8 E86EF4FFFF          <2> 	call cnvrttxt
  5225                              <2> .nocmdline:
  5226 00003EFD E8C5080000          <2> 	call linetester.stime
  5227 00003F02 E857000000          <2> 	call fcircle.nocmdline
  5228 00003F07 E8D3080000          <2> 	call linetester.etime
  5229 00003F0C 53                  <2> 	push ebx
  5230 00003F0D 57                  <2> 	push edi
  5231 00003F0E E830E4FFFF          <2> 	call getchar
  5232 00003F13 59                  <2> 	pop ecx
  5233 00003F14 E870F3FFFF          <2> 	call showdec
  5234 00003F19 BE[6D480000]        <2> 	mov esi, linetester.msgcircle
  5235 00003F1E E806DEFFFF          <2> 	call printquiet
  5236 00003F23 59                  <2> 	pop ecx
  5237 00003F24 E860F3FFFF          <2> 	call showdec
  5238 00003F29 BE[84480000]        <2> 	mov esi, linetester.msgtime
  5239 00003F2E E8F6DDFFFF          <2> 	call printquiet
  5240 00003F33 E874320000          <2> 	call reloadallgraphics
  5241 00003F38 C3                  <2> 	ret
  5242                              <2> 	
  5243 00003F39 FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5244 00003F42 00                  <2>
  5245                              <2> fcircle:	
  5246 00003F43 8B35[982F0000]      <2> 	mov esi, [currentcommandloc]
  5247 00003F49 81C608000000        <2> 	add esi, 8
  5248 00003F4F 66B91000            <2> 	mov cx, 16
  5249 00003F53 30C0                <2> 	xor al, al
  5250 00003F55 3806                <2> 	cmp [esi], al
  5251 00003F57 7405                <2> 	je .nocmdline
  5252 00003F59 E80DF4FFFF          <2> 	call cnvrttxt
  5253                              <2> .nocmdline:
  5254 00003F5E 6689C8              <2> 	mov ax, cx
  5255 00003F61 66D1E1              <2> 	shl cx, 1
  5256 00003F64 6689CA              <2> 	mov dx, cx
  5257 00003F67 663B15[98580000]    <2> 	cmp dx, [resolutionx]
  5258 00003F6E 731B                <2> 	jae .done
  5259 00003F70 663B0D[9A580000]    <2> 	cmp cx, [resolutiony]
  5260 00003F77 7312                <2> 	jae .done
  5261 00003F79 668B35[66020000]    <2> 	mov si, [timenanoseconds + 2]
  5262 00003F80 31FF                <2> 	xor edi, edi
  5263 00003F82 803D[388C0000]01    <2> 	cmp byte [guion], 1
  5264 00003F89 7401                <2> 	je .lp
  5265 00003F8B C3                  <2> .done ret
  5266                              <2> .lp:
  5267 00003F8C 6629C2              <2> 	sub dx, ax
  5268 00003F8F 6629C1              <2> 	sub cx, ax
  5269 00003F92 60                  <2> 	pusha
  5270 00003F93 E8332D0000          <2> 	call fillcircle
  5271 00003F98 61                  <2> 	popa
  5272 00003F99 47                  <2> 	inc edi
  5273 00003F9A 660335[64020000]    <2> 	add si, [timenanoseconds]
  5274 00003FA1 6601C2              <2> 	add dx, ax
  5275 00003FA4 6601C2              <2> 	add dx, ax
  5276 00003FA7 6601C2              <2> 	add dx, ax
  5277 00003FAA 6601C1              <2> 	add cx, ax
  5278 00003FAD 663B15[98580000]    <2> 	cmp dx, [resolutionx]
  5279 00003FB4 72D6                <2> 	jb .lp
  5280 00003FB6 6689C2              <2> 	mov dx, ax
  5281 00003FB9 6601C2              <2> 	add dx, ax
  5282 00003FBC 6601C1              <2> 	add cx, ax
  5283 00003FBF 6601C1              <2> 	add cx, ax
  5284 00003FC2 663B0D[9A580000]    <2> 	cmp cx, [resolutiony]
  5285 00003FC9 72C1                <2> 	jb .lp
  5286 00003FCB C3                  <2> 	ret
  5287                              <1> %endif
  5288                              <1> %include 'source/programs/clear.asm'
  5289 00003FCC FF2C636C65617200    <2> db 255,44,"clear",0
  5290 00003FD4 E81EDEFFFF          <2> 		call clear
  5291 00003FD9 C3                  <2> 		ret 
  5292                              <1> %include 'source/programs/cpuid.asm'
  5293 00003FDA FF2C637075696400    <2> db 255,44,"cpuid",0
  5294 00003FE2 31C0                <2> 	xor eax, eax
  5295 00003FE4 0FA2                <2> 	cpuid
  5296 00003FE6 891D[37400000]      <2> 	mov [cpuidbuf], ebx
  5297 00003FEC 8915[3B400000]      <2> 	mov [cpuidbuf + 4], edx
  5298 00003FF2 890D[3F400000]      <2> 	mov [cpuidbuf + 8], ecx
  5299 00003FF8 BE[37400000]        <2> 	mov esi, cpuidbuf
  5300 00003FFD E846DDFFFF          <2> 	call print
  5301 00004002 BE[138C0000]        <2> 	mov esi, line
  5302 00004007 E83CDDFFFF          <2> 	call print
  5303 0000400C B801000000          <2> 	mov eax, 1
  5304 00004011 0FA2                <2> 	cpuid
  5305 00004013 89C1                <2> 	mov ecx, eax
  5306 00004015 C605[AA310000]02    <2> 	mov byte [firsthexshown], 2
  5307 0000401C E89EF1FFFF          <2> 	call showhex
  5308 00004021 B808000080          <2> 	mov eax, 0x80000008
  5309 00004026 0FA2                <2> 	cpuid
  5310 00004028 89C1                <2> 	mov ecx, eax
  5311 0000402A C605[AA310000]02    <2> 	mov byte [firsthexshown], 2
  5312 00004031 E889F1FFFF          <2> 	call showhex
  5313 00004036 C3                  <2> 	ret
  5314                              <2> 	
  5315 00004037 00<rept>            <2> cpuidbuf times 13 db 0
  5316                              <2> cpuidvendorend:
  5317                              <1> %ifdef network.included
  5318                              <1> 	%include 'source/programs/dhcp.asm'
  5319 00004044 FF2C6468637000      <2> db 255,44,"dhcp",0
  5320                              <2> dhcp:
  5321 0000404B BE[0B410000]        <2> 	mov esi, .dhcp.mac
  5322 00004050 BB[EB410000]        <2> 	mov ebx, .dhcp.option.mac
  5323 00004055 BF[CB400000]        <2> 	mov edi, .mac
  5324 0000405A 31C9                <2> 	xor ecx, ecx
  5325 0000405C 66890D[DD400000]    <2> 	mov [.ip.checksum], cx
  5326 00004063 66890D[ED400000]    <2> 	mov [.udp.checksum], cx
  5327 0000406A 8B0D[CC8B0000]      <2> 	mov ecx, [sysmac]
  5328 00004070 890B                <2> 	mov [ebx], ecx
  5329 00004072 890F                <2> 	mov [edi], ecx
  5330 00004074 890E                <2> 	mov [esi], ecx
  5331 00004076 668B0D[D08B0000]    <2> 	mov cx, [sysmac + 4]
  5332 0000407D 66894B04            <2> 	mov [ebx + 4], cx
  5333 00004081 66894E04            <2> 	mov [esi + 4], cx
  5334 00004085 66894F04            <2> 	mov [edi + 4], cx
  5335 00004089 BF[D3400000]        <2> 	mov edi, .ip.header
  5336 0000408E BE[E7400000]        <2> 	mov esi, .ip.headerend
  5337 00004093 E81F4A0000          <2> 	call getchecksum
  5338 00004098 66890D[DD400000]    <2> 	mov [.ip.checksum], cx
  5339 0000409F BF[E7400000]        <2> 	mov edi, .udp.header
  5340 000040A4 BE[02420000]        <2> 	mov esi, .udp.end
  5341 000040A9 E8094A0000          <2> 	call getchecksum
  5342 000040AE 66890D[ED400000]    <2> 	mov [.udp.checksum], cx
  5343 000040B5 BF[C5400000]        <2> 	mov edi, .frame
  5344 000040BA BE[02420000]        <2> 	mov esi, .udp.end
  5345 000040BF E8ED490000          <2> 	call sendpacket
  5346 000040C4 C3                  <2> 	ret
  5347                              <2> .frame:
  5348 000040C5 FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5349 000040CB 000000000000        <2> 	.mac db 0,0,0,0,0,0
  5350 000040D1 0800                <2> 	db 8,0
  5351                              <2> .ip.header:
  5352 000040D3 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  5353 000040D4 00                  <2> 	db 0
  5354 000040D5 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header)
  5355 000040D7 0000                <2> 	dw 0
  5356 000040D9 0000                <2> 	dw 0
  5357 000040DB 80                  <2> 	db 0x80
  5358 000040DC 11                  <2> 	db 17
  5359 000040DD 0000                <2> .ip.checksum dw 0
  5360 000040DF 00000000            <2> 	db 0,0,0,0
  5361 000040E3 FFFFFFFF            <2> 	db 255,255,255,255	
  5362                              <2> .ip.headerend:
  5363                              <2> .udp.header:
  5364 000040E7 0044                <2> 	db 0,68	;source port
  5365 000040E9 0043                <2> 	db 0,67 ;destination port
  5366 000040EB 011B                <2> 	db (.udp.end - .udp.header)/256, (.udp.end - .udp.header)
  5367 000040ED 0000                <2> .udp.checksum dw 0
  5368                              <2> .udp.headerend:
  5369                              <2> .dhcp.data:
  5370 000040EF 01                  <2> 	db 1	;message type
  5371 000040F0 01                  <2> 	db 1	;hardware type
  5372 000040F1 06                  <2> 	db 6	;hardware address length
  5373 000040F2 00                  <2> 	db 0	;hops
  5374 000040F3 EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  5375 000040F7 0000                <2> 	db 0,0	;seconds elapsed
  5376 000040F9 0000                <2> 	db 0,0	;flags
  5377 000040FB 00000000            <2> 	db 0,0,0,0	;client ip address
  5378 000040FF 00000000            <2> 	db 0,0,0,0	;your ip address
  5379 00004103 00000000            <2> 	db 0,0,0,0	;server ip address
  5380 00004107 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  5381 0000410B 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  5382 00004111 00<rept>            <2> 	times 10 db 0	;padding
  5383 0000411B 00<rept>            <2> 	times 64 db 0	;server host name
  5384 0000415B 00<rept>            <2> 	times 128 db 0	;boot file name
  5385 000041DB 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  5386                              <2> .dhcp.option.type:
  5387 000041DF 350103              <2> 	db 53,1,3	;DHCP Request
  5388 000041E2 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  5389 000041E8 3D07                <2> 	db 61,7 ;client id(mac)
  5390 000041EA 01                  <2> 	db 1	;Type=Ethernet
  5391 000041EB 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  5392 000041F1 0C08                <2> 	db 12,8 ;host name
  5393 000041F3 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  5394 000041FB 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  5395 00004201 FF                  <2> 	db 0xFF	;end DHCP options
  5396                              <2> .dhcp.end:
  5397                              <2> .udp.end:
  5398                              <2> 	
  5399                              <1> %endif
  5400                              <1> %ifdef disk.none
  5401                              <1> %else
  5402                              <1> 	%include 'source/programs/dos.asm'
  5403 00004202 FF2C646F7300        <2> db 255,44,"dos",0
  5404                              <2> dosrunner:
  5405 00004208 8925[98A40300]      <2> 	mov [previousstack], esp
  5406 0000420E 8B3D[982F0000]      <2> 	mov edi, [currentcommandloc]
  5407 00004214 81C704000000        <2> 	add edi, 4
  5408 0000421A BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5409 0000421F E8FF260000          <2> 	call loadfile
  5410 00004224 8B3D[982F0000]      <2> 	mov edi, [currentcommandloc]
  5411 0000422A 81C704000000        <2> 	add edi, 4
  5412 00004230 81FA94010000        <2> 	cmp edx, 404
  5413 00004236 0F845E000000        <2> 	je near .noprogfound
  5414 0000423C BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5415 00004241 31C9                <2> 	xor ecx, ecx
  5416                              <2> .findparams:
  5417 00004243 47                  <2> 	inc edi
  5418 00004244 8A07                <2> 	mov al, [edi]
  5419 00004246 3C20                <2> 	cmp al, " "
  5420 00004248 75F9                <2> 	jne .findparams
  5421                              <2> .copyparams:
  5422 0000424A 8A07                <2> 	mov al, [edi]
  5423 0000424C 8803                <2> 	mov [ebx], al
  5424 0000424E 43                  <2> 	inc ebx
  5425 0000424F 47                  <2> 	inc edi
  5426 00004250 41                  <2> 	inc ecx
  5427 00004251 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5428 00004257 7304                <2> 	jae .nomoreparams
  5429 00004259 3C00                <2> 	cmp al, 0
  5430 0000425B 75ED                <2> 	jne .copyparams
  5431                              <2> .nomoreparams:
  5432 0000425D 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5433 00004263 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5434 00004267 8ED8                <2> 	mov ds, ax
  5435 00004269 8EC0                <2> 	mov es, ax
  5436 0000426B 8EE0                <2> 	mov fs, ax
  5437 0000426D 8EE8                <2> 	mov gs, ax
  5438 0000426F 31C0                <2> 	xor eax, eax
  5439 00004271 31DB                <2> 	xor ebx, ebx
  5440 00004273 31C9                <2> 	xor ecx, ecx
  5441 00004275 31D2                <2> 	xor edx, edx
  5442 00004277 31FF                <2> 	xor edi, edi
  5443 00004279 31F6                <2> 	xor esi, esi
  5444 0000427B 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5445 00004282 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5446 00004286 6689DA              <2> 	mov dx, bx
  5447 00004289 8EC3                <2> 	mov es, bx
  5448 0000428B 8EE3                <2> 	mov fs, bx
  5449 0000428D 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5450 00004291 8EEB                <2> 	mov gs, bx
  5451 00004293 8B25[98A40300]      <2> 	mov esp, [previousstack]
  5452 00004299 C3                  <2> 	ret
  5453                              <2> .noprogfound:
  5454 0000429A BE[DA8B0000]        <2> 	mov esi, notfound1
  5455 0000429F E8A4DAFFFF          <2> 	call print
  5456 000042A4 8B35[982F0000]      <2> 	mov esi, [currentcommandloc]
  5457 000042AA 81C604000000        <2> 	add esi, 4
  5458 000042B0 E893DAFFFF          <2> 	call print
  5459 000042B5 BE[E28B0000]        <2> 	mov esi, notfound2
  5460 000042BA E889DAFFFF          <2> 	call print
  5461 000042BF C3                  <2> 	ret
  5462                              <2> 	
  5463                              <1> %endif
  5464                              <1> %include 'source/programs/dump.asm'
  5465 000042C0 FF2C64756D7000      <2> db 255,44,"dump",0
  5466 000042C7 8B35[982F0000]      <2> 	mov esi, [currentcommandloc]
  5467 000042CD 81C605000000        <2> 	add esi, 5
  5468 000042D3 31C9                <2> 	xor ecx, ecx
  5469 000042D5 66B83078            <2> 	mov ax, "0x"
  5470 000042D9 663906              <2> 	cmp [esi], ax
  5471 000042DC 740A                <2> 	je dumphexin
  5472 000042DE E888F0FFFF          <2> 	call cnvrttxt
  5473 000042E3 E910000000          <2> 	jmp dumphexnow
  5474                              <2> dumphexin:
  5475 000042E8 81C602000000        <2> 	add esi, 2
  5476 000042EE E82FF0FFFF          <2> 	call cnvrthextxt
  5477 000042F3 E900000000          <2> 	jmp dumphexnow
  5478                              <2> dumphexnow:
  5479 000042F8 89CF                <2> 	mov edi, ecx
  5480 000042FA 89FE                <2> 	mov esi, edi
  5481 000042FC 81C680030000        <2> 	add esi, 896
  5482                              <2> dumphexloop:
  5483 00004302 8B0F                <2> 	mov ecx, [edi]
  5484 00004304 C605[AA310000]05    <2> 	mov byte [firsthexshown],5
  5485 0000430B E8AFEEFFFF          <2> 	call showhex
  5486 00004310 81C704000000        <2> 	add edi, 4
  5487 00004316 39F7                <2> 	cmp edi, esi
  5488 00004318 72E8                <2> 	jb dumphexloop
  5489 0000431A E882E5FFFF          <2> 	call termcopy
  5490 0000431F C3                  <2> 	ret 
  5491                              <1> %include 'source/programs/echo.asm'
  5492                              <2> 
  5493 00004320 FF2C6563686F00      <2> db 255,44,"echo",0
  5494                              <2> 	echoprog:
  5495 00004327 8B35[982F0000]      <2> 		mov esi, [currentcommandloc]
  5496 0000432D 81C605000000        <2> 		add esi, 5
  5497 00004333 8A06                <2> 		mov al, [esi]
  5498 00004335 E80EDAFFFF          <2> 		call print
  5499 0000433A BE[138C0000]        <2> 		mov esi, line
  5500 0000433F E804DAFFFF          <2> 		call print
  5501 00004344 C3                  <2> 		ret
  5502 00004345 BB[18A70300]        <2> 	echovr:	mov ebx, variables
  5503 0000434A BF06000000          <2> 		mov edi, 6
  5504 0000434F E83C000000          <2> 		call nxtvrech
  5505 00004354 E954000000          <2> 		jmp prntvr2
  5506 00004359 B13D                <2> 	echvar:	mov cl, '='
  5507 0000435B 43                  <2> 		inc ebx
  5508 0000435C 8A03                <2> 		mov al, [ebx]
  5509 0000435E 3C00                <2> 		cmp al, 0
  5510 00004360 742E                <2> 		je nxtvrech
  5511 00004362 3C3D                <2> 		cmp al, '='
  5512 00004364 7422                <2> 		je nxtvrechb1
  5513 00004366 8B35[982F0000]      <2> 		mov esi, [currentcommandloc]
  5514 0000436C 01FE                <2> 		add esi, edi
  5515 0000436E E864ECFFFF          <2> 		call cndtest
  5516 00004373 3C02                <2> 		cmp al, 2
  5517 00004375 7432                <2> 		je prntvr
  5518 00004377 3C01                <2> 		cmp al, 1
  5519 00004379 742E                <2> 		je prntvr
  5520 0000437B 8B35[982F0000]      <2> 		mov esi, [currentcommandloc]
  5521 00004381 01FE                <2> 		add esi, edi
  5522 00004383 E908000000          <2> 		jmp nxtvrech
  5523                              <2> 	nxtvrechb1:
  5524 00004388 81EB02000000        <2> 		sub ebx, 2
  5525 0000438E EBC9                <2> 		jmp echvar
  5526 00004390 8A03                <2> 	nxtvrech: mov al, [ebx]
  5527 00004392 3C05                <2> 		cmp al, 5
  5528 00004394 740A                <2> 		je nxtvrec2
  5529 00004396 43                  <2> 		inc ebx
  5530 00004397 81FB[18B70300]      <2> 		cmp ebx, varend
  5531 0000439D 72F1                <2> 		jb nxtvrech
  5532 0000439F C3                  <2> 		ret
  5533 000043A0 43                  <2> 	nxtvrec2: inc ebx
  5534 000043A1 8A03                <2> 		mov al, [ebx]
  5535 000043A3 3C04                <2> 		cmp al, 4
  5536 000043A5 74B2                <2> 		je echvar
  5537 000043A7 EBE7                <2> 		jmp nxtvrech
  5538 000043A9 43                  <2> 	prntvr: inc ebx
  5539 000043AA 89DE                <2> 		mov esi, ebx
  5540 000043AC C3                  <2> 		ret
  5541 000043AD E896D9FFFF          <2> 	prntvr2: call print
  5542 000043B2 BE[138C0000]        <2> 		mov esi, line
  5543 000043B7 E88CD9FFFF          <2> 		call print
  5544 000043BC C3                  <2> 		ret 
  5545                              <1> %include 'source/programs/else.asm'
  5546 000043BD FF2C656C736500      <2> 	db 255,44,"else",0
  5547 000043C4 31C0                <2> elsecmd:	xor eax, eax
  5548 000043C6 3805[12A70300]      <2> 	cmp [BATCHISON], al
  5549 000043CC 0F84C4F6FFFF        <2> 	je near notbatch
  5550 000043D2 A0[A9A60300]        <2> 	mov al, [IFON]
  5551 000043D7 BE[AAA60300]        <2> 	mov esi, IFTRUE
  5552 000043DC 01C6                <2> 	add esi, eax
  5553 000043DE 8A06                <2> 	mov al, [esi]
  5554 000043E0 3401                <2> 	xor al, 1
  5555 000043E2 8806                <2> 	mov [esi], al
  5556 000043E4 C3                  <2> 	ret 
  5557                              <1> %include 'source/programs/exit.asm'
  5558 000043E5 FF2C6578697400      <2> db 255,44,"exit",0
  5559 000043EC 803D[A8A60300]01    <2> 	cmp byte [ranboot], 1
  5560 000043F3 0F8480E8FFFF        <2> 	je near returnfromexp
  5561 000043F9 E966E7FFFF          <2> 	jmp nobootfile
  5562                              <1> %include 'source/programs/fi.asm'
  5563 000043FE FF2C666900          <2> 	db 255,44,"fi",0
  5564 00004403 30C0                <2> 	xor al, al
  5565 00004405 3805[12A70300]      <2> 	cmp [BATCHISON], al
  5566 0000440B 0F8485F6FFFF        <2> 	je near notbatch
  5567 00004411 B001                <2> fi:	mov al, 1
  5568 00004413 2805[A9A60300]      <2> 	sub [IFON],al
  5569 00004419 C3                  <2> 	ret 
  5570                              <1> %ifdef gui.included
  5571                              <1> 	%include 'source/programs/gui.asm'
  5572 0000441A FF2C67756900        <2> db 255,44,"gui",0
  5573                              <2> guiswitcher:
  5574 00004420 8B35[982F0000]      <2> 	mov esi, [currentcommandloc]
  5575 00004426 81C604000000        <2> 	add esi, 4
  5576 0000442C 31C9                <2> 	xor ecx, ecx
  5577 0000442E 803E00              <2> 	cmp byte [esi], 0
  5578 00004431 740A                <2> 	je .nomodepref
  5579 00004433 E8EAEEFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5580 00004438 E907000000          <2> 	jmp .modepref
  5581                              <2> .nomodepref:
  5582 0000443D 51                  <2> 	push ecx
  5583 0000443E E8B4D9FFFF          <2> 	call clear
  5584 00004443 59                  <2> 	pop ecx
  5585                              <2> .modepref:
  5586 00004444 66BB[A854]          <2> 	mov bx, guiswitch
  5587 00004448 66891D[EB0C0000]    <2> 	mov [realmodeptr], bx
  5588 0000444F BB[5F440000]        <2> 	mov ebx, guiswitchret
  5589 00004454 891D[E70C0000]      <2> 	mov [realmodereturn], ebx
  5590 0000445A E971C7FFFF          <2> 	jmp realmode
  5591                              <2> guiswitchret:
  5592 0000445F 65803D[388C0000]01  <2> 	cmp byte [gs:guion], 1
  5593 00004467 7401                <2> 	je .cont
  5594 00004469 C3                  <2> 	ret
  5595                              <2> .cont:
  5596 0000446A BF[86560000]        <2> 	mov edi, VBEMODEBLOCK
  5597                              <2> .loop:
  5598 0000446F 658B07              <2> 	mov eax, [gs:edi]
  5599 00004472 8907                <2> 	mov [edi], eax
  5600 00004474 47                  <2> 	inc edi
  5601 00004475 81FF[8A590000]      <2> 	cmp edi, VBEEND
  5602 0000447B 72F2                <2> 	jb .loop
  5603 0000447D A1[AE580000]        <2> 	mov eax, [physbaseptr]
  5604 00004482 8B1D[41020000]      <2> 	mov ebx, [basecache]
  5605 00004488 C1E304              <2> 	shl ebx, 4
  5606 0000448B 29D8                <2> 	sub eax, ebx
  5607 0000448D A3[AE580000]        <2> 	mov [physbaseptr], eax
  5608 00004492 C605[D4230000]00    <2> 	mov byte [termguion], 0
  5609 00004499 BE[2DBF0300]        <2> 	mov esi, graphicstable
  5610 0000449E 30C0                <2> 	xor al, al
  5611                              <2> .clear:
  5612 000044A0 8806                <2> 	mov [esi], al
  5613 000044A2 46                  <2> 	inc esi
  5614 000044A3 81FE[2DC10300]      <2> 	cmp esi, graphicstableend
  5615 000044A9 72F5                <2> 	jb .clear
  5616 000044AB E8952E0000          <2> 	call guisetup
  5617                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5618 000044B0 668B15[98580000]    <2> 	mov dx, [resolutionx]
  5619 000044B7 668B0D[9A580000]    <2> 	mov cx, [resolutiony]
  5620 000044BE 6689D3              <2> 	mov bx, dx
  5621 000044C1 6689C8              <2> 	mov ax, cx
  5622 000044C4 66D1EB              <2> 	shr bx, 1
  5623 000044C7 66D1E8              <2> 	shr ax, 1
  5624 000044CA 6689DA              <2> 	mov dx, bx
  5625 000044CD 66D1EA              <2> 	shr dx, 1
  5626 000044D0 6689C1              <2> 	mov cx, ax
  5627 000044D3 66D1E9              <2> 	shr cx, 1
  5628 000044D6 6601D3              <2> 	add bx, dx
  5629 000044D9 6601C8              <2> 	add ax, cx
  5630 000044DC 66D1E9              <2> 	shr cx, 1
  5631 000044DF 66C1EB03            <2> 	shr bx, 3
  5632 000044E3 66C1E303            <2> 	shl bx, 3
  5633 000044E7 66C1E804            <2> 	shr ax, 4
  5634 000044EB 66C1E004            <2> 	shl ax, 4
  5635 000044EF 66891D[4A750000]    <2> 	mov [termwindow], bx
  5636 000044F6 66A3[4C750000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5637 000044FC BE[4A750000]        <2> 	mov esi, termwindow
  5638 00004501 31DB                <2> 	xor ebx, ebx
  5639 00004503 6631C0              <2> 	xor ax, ax
  5640 00004506 E86C350000          <2> 	call showwindow
  5641 0000450B E87B140000          <2> 	call cursorgui
  5642 00004510 E8E2D8FFFF          <2> 	call clear
  5643 00004515 C3                  <2> 	ret
  5644                              <2> 	
  5645                              <1> %endif
  5646                              <1> %include 'source/programs/help.asm'
  5647 00004516 FF2C68656C7000      <2> db 255,44,"help",0
  5648                              <2> lscmd:	
  5649 0000451D B00D                <2> 		mov al, 13
  5650 0000451F E8B2DEFFFF          <2> 		call prcharq
  5651 00004524 BE[EE330000]        <2> 		mov esi, progstart
  5652 00004529 BB[A8540000]        <2> 		mov ebx, progend
  5653 0000452E BE[98A00300]        <2> dir:	mov esi, fileindex
  5654 00004533 8A06                <2> 	dirnxt:	mov al, [esi]
  5655 00004535 30E4                <2> 		xor ah, ah
  5656 00004537 3CFF                <2> 		cmp al, 255
  5657 00004539 7415                <2> 		je dirfnd
  5658 0000453B 46                  <2> 		inc esi
  5659 0000453C 81FE[98A40300]      <2> 		cmp esi,  fileindexend
  5660 00004542 7339                <2> 		jae dirdn
  5661 00004544 EBED                <2> 		jmp dirnxt
  5662                              <2> 	dirfnd3:
  5663 00004546 46                  <2> 		inc esi
  5664 00004547 81FE[98A40300]      <2> 		cmp esi, fileindexend
  5665 0000454D 76E4                <2> 		jbe dirnxt
  5666 0000454F 4E                  <2> 		dec esi
  5667 00004550 46                  <2> 	dirfnd:	inc esi
  5668 00004551 8A06                <2> 		mov al, [esi]
  5669 00004553 30E4                <2> 		xor ah, ah
  5670 00004555 3C2C                <2> 		cmp al, 44
  5671 00004557 740B                <2> 		je dirfnd2
  5672 00004559 46                  <2> 		inc esi
  5673 0000455A 81FE[98A40300]      <2> 		cmp esi,  fileindexend
  5674 00004560 731B                <2> 		jae dirdn
  5675 00004562 EBCF                <2> 		jmp dirnxt
  5676 00004564 46                  <2> 	dirfnd2: inc esi
  5677 00004565 E8BFD7FFFF          <2> 		call printquiet
  5678 0000456A 56                  <2> 		push esi
  5679 0000456B B009                <2> 		mov al, 9
  5680 0000456D E864DEFFFF          <2> 		call prcharq
  5681 00004572 5E                  <2> 		pop esi
  5682 00004573 81FE[98A40300]      <2> 		cmp esi,  fileindexend
  5683 00004579 7302                <2> 		jae dirdn
  5684 0000457B EBB6                <2> 		jmp dirnxt
  5685 0000457D BE[138C0000]        <2> 	dirdn:	mov esi, line
  5686 00004582 E8C1D7FFFF          <2> 			call print
  5687 00004587 C3                  <2> 			ret
  5688 00004588 00                  <2> currentdir db 0
  5689                              <1> %include 'source/programs/if.asm'
  5690 00004589 FF2C696600          <2> 	db 255,44,"if",0
  5691 0000458E 30C0                <2> ifcmd:	xor al, al
  5692 00004590 3805[12A70300]      <2> 	cmp [BATCHISON], al
  5693 00004596 0F84FAF4FFFF        <2> 	je near notbatch
  5694 0000459C 8B1D[982F0000]      <2> 	mov ebx, [currentcommandloc]
  5695 000045A2 81C303000000        <2> 	add ebx, 3
  5696 000045A8 89DE                <2> 	mov esi, ebx
  5697 000045AA 8A06                <2> chkeqsn: mov al, [esi]
  5698 000045AC 3C00                <2> 	cmp al, 0
  5699 000045AE 0F84E2F4FFFF        <2> 	je near notbatch
  5700 000045B4 3C3D                <2> 	cmp al, '='
  5701 000045B6 0F8403000000        <2> 	je near chkeqdn
  5702 000045BC 46                  <2> 	inc esi
  5703 000045BD EBEB                <2> 	jmp chkeqsn
  5704 000045BF B000                <2> chkeqdn: mov al, 0 
  5705 000045C1 8806                <2> 	mov [esi], al
  5706 000045C3 46                  <2> 	inc esi
  5707 000045C4 E8D3E9FFFF          <2> 	call tester
  5708 000045C9 3C01                <2> 	cmp al, 1
  5709 000045CB 0F8405000000        <2> 	je near trueif
  5710 000045D1 E91C000000          <2> 	jmp falseif
  5711 000045D6 31C0                <2> trueif:	xor eax, eax
  5712 000045D8 A0[A9A60300]        <2> 	mov al, [IFON]
  5713 000045DD FEC0                <2> 	inc al
  5714 000045DF A2[A9A60300]        <2> 	mov [IFON], al
  5715 000045E4 30E4                <2> 	xor ah, ah
  5716 000045E6 BE[AAA60300]        <2> 	mov esi, IFTRUE
  5717 000045EB 01C6                <2> 	add esi, eax
  5718 000045ED B401                <2> 	mov ah, 1
  5719 000045EF 8826                <2> 	mov [esi], ah
  5720 000045F1 C3                  <2> 	ret 
  5721 000045F2 31C0                <2> falseif: xor eax, eax
  5722 000045F4 A0[A9A60300]        <2> 	mov al, [IFON]
  5723 000045F9 FEC0                <2> 	inc al
  5724 000045FB A2[A9A60300]        <2> 	mov [IFON], al
  5725 00004600 30E4                <2> 	xor ah, ah
  5726 00004602 BE[AAA60300]        <2> 	mov esi, IFTRUE
  5727 00004607 01C6                <2> 	add esi, eax
  5728 00004609 30E4                <2> 	xor ah, ah
  5729 0000460B 8826                <2> 	mov [esi], ah
  5730 0000460D C3                  <2> 	ret 
  5731                              <1> %ifdef network.included
  5732                              <1> 	%include 'source/programs/ipconfig.asm'
  5733 0000460E FF2C6970636F6E6669- <2> db 255,44,"ipconfig",0
  5734 00004617 6700                <2>
  5735                              <2> ifconfig:
  5736 00004619 8B35[982F0000]      <2> 	mov esi, [currentcommandloc]
  5737 0000461F 81C609000000        <2> 	add esi, 9
  5738 00004625 803E00              <2> 	cmp byte [esi], 0
  5739 00004628 740B                <2> 	je .noip
  5740 0000462A E8B0440000          <2> 	call strtoip
  5741 0000462F 890D[C88B0000]      <2> 	mov [sysip], ecx
  5742                              <2> .noip:
  5743                              <2> %ifdef ne2000.included
  5744                              <2> 	cmp byte [ne2000.nicconfig], 1
  5745                              <2> 	jne .none2000
  5746                              <2> 	mov esi, ne2000.name
  5747                              <2> 	call print
  5748                              <2> 	mov ecx, ne2000.mac
  5749                              <2> 	call showmac
  5750                              <2> 	mov esi, line
  5751                              <2> 	call print
  5752                              <2> .none2000:
  5753                              <2> %endif
  5754                              <2> %ifdef rtl8139.included
  5755                              <2> 	cmp byte [rtl8139.nicconfig], 1
  5756                              <2> 	jne .nortl8139
  5757                              <2> 	mov esi, rtl8139.name
  5758                              <2> 	call print
  5759                              <2> 	mov ecx, rtl8139.mac
  5760                              <2> 	call showmac
  5761                              <2> 	mov esi, line
  5762                              <2> 	call print
  5763                              <2> .nortl8139:
  5764                              <2> %endif
  5765                              <2> %ifdef rtl8169.included
  5766                              <2> 	cmp byte [rtl8169.nicconfig], 1
  5767                              <2> 	jne .nortl8169
  5768                              <2> 	mov esi, rtl8169.name
  5769                              <2> 	call print
  5770                              <2> 	mov ecx, rtl8169.mac
  5771                              <2> 	call showmac
  5772                              <2> 	mov esi, line
  5773                              <2> 	call print
  5774                              <2> .nortl8169:
  5775                              <2> %endif
  5776                              <2> %ifdef i8254x.included
  5777 00004635 803D[088A0000]01    <2> 	cmp byte [i8254x.nicconfig], 1
  5778 0000463C 751E                <2> 	jne .noi8254x
  5779 0000463E BE[0F8A0000]        <2> 	mov esi, i8254x.name
  5780 00004643 E800D7FFFF          <2> 	call print
  5781 00004648 B9[098A0000]        <2> 	mov ecx, i8254x.mac
  5782 0000464D E80F450000          <2> 	call showmac
  5783 00004652 BE[138C0000]        <2> 	mov esi, line
  5784 00004657 E8ECD6FFFF          <2> 	call print
  5785                              <2> .noi8254x:
  5786                              <2> %endif
  5787 0000465C 8B0D[C88B0000]      <2> 	mov ecx, [sysip]
  5788 00004662 E8BE440000          <2> 	call showip
  5789 00004667 BE[138C0000]        <2> 	mov esi, line
  5790 0000466C E8D7D6FFFF          <2> 	call print
  5791 00004671 C3                  <2> 	ret
  5792                              <2> 	
  5793                              <1> %endif
  5794                              <1> %include 'source/programs/keycode.asm'
  5795 00004672 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5796 0000467B 00                  <2>
  5797                              <2> keycode:
  5798 0000467C 66C705[A7230000]00- <2> 	mov word [trans], 0
  5799 00004684 00                  <2>
  5800 00004685 C605[C26A0000]00    <2> 	mov byte [threadson], 0
  5801                              <2> %ifdef io.serial
  5802                              <2> .noserial:
  5803                              <2> 	hlt
  5804                              <2> 	mov dx, [serial.address]
  5805                              <2> 	in al, dx
  5806                              <2> 	cmp al, 0
  5807                              <2> 	je .noserial
  5808                              <2> 	mov cl, al
  5809                              <2> 	call showhexsmall
  5810                              <2> 	cmp al, 0x1B
  5811                              <2> 	jne .noserial
  5812                              <2> 	in al, dx
  5813                              <2> 	mov cl, al
  5814                              <2> 	call showhexsmall
  5815                              <2> 	cmp cl, 0x5B
  5816                              <2> 	je .noserial
  5817                              <2> 	ret
  5818                              <2> %else
  5819 0000468C E80A190000          <2> 	call getkey
  5820 00004691 31C0                <2> 	xor eax, eax
  5821 00004693 31C9                <2> 	xor ecx, ecx
  5822 00004695 8A0D[795F0000]      <2> 	mov cl, [specialkey]
  5823 0000469B 80F900              <2> 	cmp cl, 0
  5824 0000469E 0F8405000000        <2> 	je near .nospecialkeycode
  5825 000046A4 E802EBFFFF          <2> 	call showhexsmall
  5826                              <2> .nospecialkeycode:
  5827 000046A9 668B0D[A5230000]    <2> 	mov cx, [lastkey + 2]
  5828 000046B0 E8F6EAFFFF          <2> 	call showhexsmall
  5829 000046B5 80F901              <2> 	cmp cl, 1
  5830 000046B8 75C2                <2> 	jne keycode
  5831 000046BA C3                  <2> 	ret
  5832                              <2> %endif
  5833                              <1> %ifdef gui.included
  5834                              <1> 	%include 'source/programs/line.asm'
  5835 000046BB FF2C6C696E6500      <2> db 255,44,"line",0
  5836                              <2> linetester:
  5837 000046C2 803D[388C0000]00    <2> 	cmp byte [guion], 0
  5838 000046C9 0F841B000000        <2> 	je near .done
  5839 000046CF 668B35[66020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  5840 000046D6 BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  5841 000046DB E868000000          <2> 	call .circletest
  5842 000046E0 BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  5843 000046E5 E801000000          <2> 	call .linetest
  5844                              <2> .done:
  5845 000046EA C3                  <2> 	ret
  5846                              <2> 
  5847                              <2> .linetest:
  5848 000046EB 53                  <2> 	push ebx
  5849 000046EC E8D6000000          <2> 	call .stime
  5850 000046F1 5B                  <2> 	pop ebx
  5851 000046F2 31FF                <2> 	xor edi, edi
  5852                              <2> .ltlp:
  5853 000046F4 53                  <2> 	push ebx
  5854 000046F5 E81C010000          <2> 	call .st
  5855 000046FA 66F7D6              <2> 	not si
  5856 000046FD E814010000          <2> 	call .st
  5857 00004702 5B                  <2> 	pop ebx
  5858 00004703 66F7D6              <2> 	not si
  5859 00004706 660335[64020000]    <2> 	add si, [timenanoseconds]
  5860 0000470D 4B                  <2> 	dec ebx
  5861 0000470E 81FB00000000        <2> 	cmp ebx, 0
  5862 00004714 77DE                <2> 	ja .ltlp
  5863 00004716 E8C4000000          <2> 	call .etime
  5864 0000471B 53                  <2> 	push ebx	
  5865 0000471C 57                  <2> 	push edi
  5866 0000471D E83A2A0000          <2> 	call guiclear
  5867 00004722 E8852A0000          <2> 	call reloadallgraphics
  5868 00004727 59                  <2> 	pop ecx
  5869 00004728 E85CEBFFFF          <2> 	call showdec
  5870 0000472D BE[58480000]        <2> 	mov esi, .msg
  5871 00004732 E811D6FFFF          <2> 	call print
  5872 00004737 59                  <2> 	pop ecx
  5873 00004738 E84CEBFFFF          <2> 	call showdec
  5874 0000473D BE[84480000]        <2> 	mov esi, .msgtime
  5875 00004742 E801D6FFFF          <2> 	call print
  5876 00004747 C3                  <2> 	ret
  5877                              <2> 	
  5878                              <2> .circletest:
  5879 00004748 53                  <2> 	push ebx
  5880 00004749 E879000000          <2> 	call .stime
  5881 0000474E 5B                  <2> 	pop ebx
  5882 0000474F 31FF                <2> 	xor edi, edi
  5883                              <2> .ctlp:
  5884 00004751 53                  <2> 	push ebx
  5885 00004752 668B0D[9A580000]    <2> 	mov cx, [resolutiony]
  5886 00004759 66D1E9              <2> 	shr cx, 1
  5887 0000475C 668B15[98580000]    <2> 	mov dx, [resolutionx]
  5888 00004763 66D1EA              <2> 	shr dx, 1
  5889 00004766 6689C8              <2> 	mov ax, cx
  5890                              <2> .circle:
  5891 00004769 60                  <2> 	pusha
  5892 0000476A E84A240000          <2> 	call drawcircle
  5893 0000476F 61                  <2> 	popa
  5894 00004770 6648                <2> 	dec ax
  5895 00004772 47                  <2> 	inc edi
  5896 00004773 663D0100            <2> 	cmp ax, 1
  5897 00004777 77F0                <2> 	ja .circle
  5898 00004779 66F7D6              <2> 	not si
  5899                              <2> .circle2:
  5900 0000477C 60                  <2> 	pusha
  5901 0000477D E837240000          <2> 	call drawcircle
  5902 00004782 61                  <2> 	popa
  5903 00004783 47                  <2> 	inc edi
  5904 00004784 6640                <2> 	inc ax
  5905 00004786 6639C8              <2> 	cmp ax, cx
  5906 00004789 76F1                <2> 	jbe .circle2
  5907 0000478B 5B                  <2> 	pop ebx
  5908 0000478C 66F7D6              <2> 	not si
  5909 0000478F 660335[64020000]    <2> 	add si, [timenanoseconds]
  5910 00004796 4B                  <2> 	dec ebx
  5911 00004797 81FB00000000        <2> 	cmp ebx, 0
  5912 0000479D 77B2                <2> 	ja .ctlp
  5913 0000479F E83B000000          <2> 	call .etime
  5914 000047A4 53                  <2> 	push ebx
  5915 000047A5 57                  <2> 	push edi
  5916 000047A6 59                  <2> 	pop ecx
  5917 000047A7 E8DDEAFFFF          <2> 	call showdec
  5918 000047AC BE[6D480000]        <2> 	mov esi, .msgcircle
  5919 000047B1 E892D5FFFF          <2> 	call print
  5920 000047B6 59                  <2> 	pop ecx
  5921 000047B7 E8CDEAFFFF          <2> 	call showdec
  5922 000047BC BE[84480000]        <2> 	mov esi, .msgtime
  5923 000047C1 E882D5FFFF          <2> 	call print
  5924 000047C6 C3                  <2> 	ret
  5925                              <2> 	
  5926                              <2> .stime:
  5927 000047C7 F4                  <2> 	hlt
  5928 000047C8 A1[60020000]        <2> 	mov eax, [timeseconds]
  5929 000047CD 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  5930 000047D3 A3[93480000]        <2> 	mov [.time], eax
  5931 000047D8 891D[97480000]      <2> 	mov [.time + 4], ebx
  5932 000047DE C3                  <2> 	ret
  5933                              <2> 	
  5934                              <2> .etime:
  5935 000047DF A1[60020000]        <2> 	mov eax, [timeseconds]
  5936 000047E4 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  5937 000047EA 8B0D[93480000]      <2> 	mov ecx, [.time]
  5938 000047F0 8B15[97480000]      <2> 	mov edx, [.time + 4]
  5939 000047F6 C1EA0A              <2> 	shr edx, 10
  5940 000047F9 C1EB0A              <2> 	shr ebx, 10
  5941 000047FC 29C8                <2> 	sub eax, ecx
  5942 000047FE 3D00000000          <2> 	cmp eax, 0
  5943 00004803 740E                <2> 	je .notclp
  5944                              <2> .tclp:
  5945 00004805 81C340420F00        <2> 	add ebx, 1000000
  5946 0000480B 48                  <2> 	dec eax
  5947 0000480C 3D00000000          <2> 	cmp eax, 0
  5948 00004811 75F2                <2> 	jne .tclp
  5949                              <2> .notclp:
  5950 00004813 29D3                <2> 	sub ebx, edx
  5951 00004815 C3                  <2> 	ret
  5952                              <2> 	
  5953                              <2> .st:
  5954 00004816 6631C0              <2> 	xor ax, ax
  5955 00004819 6631DB              <2> 	xor bx, bx
  5956 0000481C 668B0D[9A580000]    <2> 	mov cx, [resolutiony]
  5957 00004823 668B15[98580000]    <2> 	mov dx, [resolutionx]
  5958                              <2> .lp:
  5959 0000482A 60                  <2> 	pusha
  5960 0000482B E800280000          <2> 	call drawline
  5961 00004830 61                  <2> 	popa
  5962                              <2> .noswitch:
  5963 00004831 47                  <2> 	inc edi
  5964 00004832 6643                <2> 	inc bx
  5965 00004834 664A                <2> 	dec dx
  5966 00004836 6681FB0000          <2> 	cmp bx, 0
  5967 0000483B 74ED                <2> 	je .lp
  5968 0000483D 6681FA0000          <2> 	cmp dx, 0
  5969 00004842 75E6                <2> 	jne .lp
  5970                              <2> .lp2:
  5971 00004844 60                  <2> 	pusha
  5972 00004845 E8E6270000          <2> 	call drawline
  5973 0000484A 61                  <2> 	popa
  5974 0000484B 47                  <2> 	inc edi
  5975 0000484C 6640                <2> 	inc ax
  5976 0000484E 6649                <2> 	dec cx
  5977 00004850 6681F90000          <2> 	cmp cx, 0
  5978 00004855 75ED                <2> 	jne .lp2
  5979 00004857 C3                  <2> 	ret
  5980                              <2> 	
  5981 00004858 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  5982 00004861 6520647261776E2069- <2>
  5983 0000486A 6E2000              <2>
  5984 0000486D 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  5985 00004876 65726520647261776E- <2>
  5986 0000487F 20696E2000          <2>
  5987 00004884 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  5988 0000488D 6E64732E0A00        <2>
  5989 00004893 0000000000000000    <2> .time dd 0,0	
  5990                              <1> %endif
  5991                              <1> %include 'source/programs/logout.asm'
  5992 0000489B FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5993 000048A4 E977E2FFFF          <2> 	jmp os
  5994                              <1> %include 'source/programs/loop.asm'
  5995 000048A9 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5996 000048B0 803D[13A70300]00    <2> 	cmp byte [LOOPON], 0
  5997 000048B7 0F8501000000        <2> 	jne near filoop
  5998 000048BD C3                  <2> 	ret
  5999 000048BE 8B35[14A70300]      <2> filoop: mov esi, [LOOPPOS]
  6000 000048C4 FE0D[A9A60300]      <2> 	dec byte [IFON]
  6001 000048CA C605[13A70300]00    <2> 	mov byte [LOOPON], 0
  6002 000048D1 8935[0EA70300]      <2> 	mov [BATCHPOS], esi
  6003 000048D7 8935[BE390000]      <2> 	mov [batchedi], esi
  6004 000048DD C3                  <2> 	ret 
  6005                              <1> %ifdef disk.none
  6006                              <1> %else
  6007                              <1> 	%include 'source/programs/ls.asm'
  6008 000048DE FF2C6C7300          <2> db 255,44,"ls",0
  6009 000048E3 BE[828E0300]        <2> 		mov esi, diskfileindex
  6010                              <2> 	diskindexdir:
  6011 000048E8 803E5F              <2> 		cmp byte [esi], '_'
  6012 000048EB 7440                <2> 		je nextdiskindexdir
  6013 000048ED E837D4FFFF          <2> 		call printquiet
  6014 000048F2 56                  <2> 		push esi
  6015 000048F3 BE[4D490000]        <2> 		mov esi, disktab
  6016 000048F8 E82CD4FFFF          <2> 		call printquiet
  6017 000048FD 5E                  <2> 		pop esi
  6018 000048FE 8B4E05              <2> 		mov ecx, [esi + 5]
  6019 00004901 C605[AA310000]05    <2> 		mov byte [firsthexshown], 5
  6020 00004908 E87CE9FFFF          <2> 		call showdec
  6021 0000490D 56                  <2> 		push esi
  6022 0000490E BE[138C0000]        <2> 		mov esi, line
  6023 00004913 E811D4FFFF          <2> 		call printquiet
  6024 00004918 5E                  <2> 		pop esi
  6025 00004919 81C609000000        <2> 		add esi, 9
  6026 0000491F 81FE[93900300]      <2> 		cmp esi, enddiskfileindex
  6027 00004925 72C1                <2> 		jb diskindexdir
  6028 00004927 E875DFFFFF          <2> 		call termcopy
  6029 0000492C C3                  <2> 		ret
  6030                              <2> 	nextdiskindexdir:
  6031 0000492D 46                  <2> 		inc esi
  6032 0000492E 803E00              <2> 		cmp byte [esi], 0
  6033 00004931 75FA                <2> 		jne nextdiskindexdir
  6034 00004933 81C609000000        <2> 		add esi, 9
  6035 00004939 81FE[93900300]      <2> 		cmp esi, enddiskfileindex
  6036 0000493F 72A7                <2> 		jb diskindexdir
  6037 00004941 E85BDFFFFF          <2> 		call termcopy
  6038 00004946 C3                  <2> 		ret
  6039                              <2> 		
  6040 00004947 4469736B2000        <2> 		diskmsg db "Disk ",0
  6041 0000494D 0D09090900          <2> 		disktab db 13,9,9,9,0
  6042                              <1> %endif
  6043                              <1> %include 'source/programs/memory.asm'
  6044 00004952 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  6045 0000495B BE[3E8C0000]        <2> 	mov esi, memlistbuf
  6046 00004960 31FF                <2> 	xor edi, edi
  6047 00004962 668B3D[7E8E0000]    <2> 	mov di, [memlistend]
  6048 00004969 01F7                <2> 	add edi, esi
  6049                              <2> printmemmap:
  6050 0000496B 8B0E                <2> 	mov ecx, [esi]
  6051 0000496D E84DE8FFFF          <2> 	call showhex
  6052 00004972 81C608000000        <2> 	add esi, 8
  6053 00004978 8B0E                <2> 	mov ecx, [esi]
  6054 0000497A E840E8FFFF          <2> 	call showhex
  6055 0000497F 81C608000000        <2> 	add esi, 8
  6056 00004985 8B0E                <2> 	mov ecx, [esi]
  6057 00004987 E833E8FFFF          <2> 	call showhex
  6058 0000498C 81C608000000        <2> 	add esi, 8
  6059 00004992 57                  <2> 	push edi
  6060 00004993 56                  <2> 	push esi
  6061 00004994 BE[138C0000]        <2> 	mov esi, line
  6062 00004999 E8AAD3FFFF          <2> 	call print
  6063 0000499E 5E                  <2> 	pop esi
  6064 0000499F 5F                  <2> 	pop edi
  6065 000049A0 39FE                <2> 	cmp esi, edi
  6066 000049A2 72C7                <2> 	jb printmemmap
  6067 000049A4 C3                  <2> 	ret
  6068                              <2> 	
  6069                              <1> %include 'source/programs/pci.asm'
  6070 000049A5 FF2C70636900        <2> db 255,44,"pci",0
  6071 000049AB E83E1C0000          <2> 	call pcidump
  6072 000049B0 C3                  <2> 	ret 
  6073                              <1> %ifdef network.included
  6074                              <1> 	%include 'source/programs/ping.asm'
  6075 000049B1 FF2C70696E6700      <2> db 255,44,"ping",0
  6076                              <2> ping:
  6077 000049B8 8B35[982F0000]      <2> 	mov esi, [currentcommandloc]
  6078 000049BE 81C605000000        <2> 	add esi, 5
  6079 000049C4 E816410000          <2> 	call strtoip
  6080 000049C9 890D[544A0000]      <2> 	mov [.destip], ecx
  6081 000049CF E851410000          <2> 	call showip
  6082 000049D4 8B0D[C88B0000]      <2> 	mov ecx, [sysip]
  6083 000049DA 890D[504A0000]      <2> 	mov [.sourceip]. ecx
  6084 000049E0 31C0                <2> 	xor eax, eax
  6085 000049E2 31DB                <2> 	xor ebx, ebx
  6086 000049E4 66A3[4E4A0000]      <2> 	mov [.checksum], ax
  6087 000049EA 66A3[5A4A0000]      <2> 	mov [.icmpchecksum], ax
  6088 000049F0 BF[444A0000]        <2> 	mov edi, .header
  6089 000049F5 BE[584A0000]        <2> 	mov esi, .headerend
  6090 000049FA E8B8400000          <2> 	call getchecksum
  6091 000049FF 66890D[4E4A0000]    <2> 	mov [.checksum], cx
  6092 00004A06 BF[584A0000]        <2> 	mov edi, .icmp
  6093 00004A0B BE[804A0000]        <2> 	mov esi, .packetend
  6094 00004A10 E8A2400000          <2> 	call getchecksum
  6095 00004A15 66890D[5A4A0000]    <2> 	mov [.icmpchecksum], cx
  6096 00004A1C BF[364A0000]        <2> 	mov edi, .packet
  6097 00004A21 BE[804A0000]        <2> 	mov esi, .packetend
  6098 00004A26 E886400000          <2> 	call sendpacket
  6099 00004A2B BE[138C0000]        <2> 	mov esi, line
  6100 00004A30 E813D3FFFF          <2> 	call print
  6101 00004A35 C3                  <2> 	ret
  6102                              <2> 	
  6103                              <2> 	
  6104                              <2> 	
  6105                              <2> .packet:
  6106 00004A36 FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  6107 00004A3C 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  6108 00004A42 0800                <2> .ethertype	db 8,0	;ip is 0x800
  6109                              <2> .header:
  6110 00004A44 45                  <2> .version	db 0x45
  6111 00004A45 00                  <2> .services	db 0
  6112 00004A46 003C                <2> .length	db 0,0x3C
  6113 00004A48 0000                <2> .id		dw 0
  6114 00004A4A 00                  <2> .flags	db 0
  6115 00004A4B 00                  <2> .fragment db 0
  6116 00004A4C 80                  <2> .ttl	db 128
  6117 00004A4D 01                  <2> .protocol db 1 ;ICMP
  6118 00004A4E 0000                <2> .checksum dw 0
  6119 00004A50 00000000            <2> .sourceip dd 0
  6120 00004A54 00000000            <2> .destip dd 0
  6121                              <2> .headerend:
  6122                              <2> .icmp:
  6123 00004A58 08                  <2> .icmptype db 8 ;Ping request
  6124 00004A59 00                  <2> .icmpcode db 0
  6125 00004A5A 0000                <2> .icmpchecksum dw 0
  6126 00004A5C 0001                <2> .icmpid db 0,1
  6127 00004A5E 0000                <2> .sequence dw 0
  6128 00004A60 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  6129 00004A69 6A6B6C6D6E6F707172- <2>
  6130 00004A72 737475767761626364- <2>
  6131 00004A7B 6566676869          <2>
  6132                              <2> .packetend:
  6133                              <1> %endif
  6134                              <1> %ifdef disk.none
  6135                              <1> %else
  6136                              <1> 	%include 'source/programs/play.asm'
  6137 00004A80 FF2C706C61796100    <2> db 255,44,"playa",0
  6138 00004A88 8B3D[982F0000]      <2> 	mov edi, [currentcommandloc]
  6139 00004A8E 81C706000000        <2> 	add edi, 6
  6140 00004A94 E834000000          <2> 	call playasync
  6141 00004A99 C3                  <2> 	ret
  6142 00004A9A FF2C706C617900      <2> db 255,44,"play",0
  6143                              <2> play:
  6144 00004AA1 8B3D[982F0000]      <2> 	mov edi, [currentcommandloc]
  6145 00004AA7 81C705000000        <2> 	add edi, 5
  6146 00004AAD E81B000000          <2> 	call playasync
  6147                              <2> .waitforsound:
  6148 00004AB2 F4                  <2> 	hlt
  6149                              <2> %ifdef sound.included
  6150 00004AB3 A1[625F0000]        <2> 	mov eax, [Length0]
  6151 00004AB8 660B05[665F0000]    <2> 	or ax, [Length1]
  6152                              <2> %endif
  6153 00004ABF 0A05[68020000]      <2> 	or al, [soundon]
  6154 00004AC5 3D00000000          <2> 	cmp eax, 0
  6155 00004ACA 75E6                <2> 	jne .waitforsound
  6156 00004ACC C3                  <2> 	ret
  6157                              <2> playasync:
  6158 00004ACD BE0000C000          <2> 	mov esi, 0xC00000
  6159 00004AD2 E84C1E0000          <2> 	call loadfile
  6160 00004AD7 81FA94010000        <2> 	cmp edx, 404
  6161 00004ADD 743F                <2> 	je nosoundfound
  6162 00004ADF BB0000C000          <2> 	mov ebx, 0xC00000
  6163 00004AE4 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6164 00004AEB 0F843F010000        <2> 	je near wave_player
  6165 00004AF1 66813B534E          <2> 	cmp word [ebx], "SN"
  6166 00004AF6 7526                <2> 	jne nosoundfound
  6167 00004AF8 81C306000000        <2> 	add ebx, 6
  6168 00004AFE 891D[6B020000]      <2> 	mov [soundpos], ebx
  6169 00004B04 035BFC              <2> 	add ebx, [ebx - 4]
  6170 00004B07 891D[6F020000]      <2> 	mov [soundendpos], ebx
  6171 00004B0D 66C705[69020000]00- <2> 	mov word [soundrepititions], 0
  6172 00004B15 00                  <2>
  6173 00004B16 C605[68020000]01    <2> 	mov byte [soundon], 1
  6174 00004B1D C3                  <2> 	ret
  6175                              <2> nosoundfound:
  6176 00004B1E BE[444B0000]        <2> 	mov esi, notfoundsound
  6177 00004B23 E820D2FFFF          <2> 	call print
  6178 00004B28 8B35[982F0000]      <2> 	mov esi, [currentcommandloc]
  6179 00004B2E 81C605000000        <2> 	add esi, 5
  6180 00004B34 E80FD2FFFF          <2> 	call print
  6181 00004B39 BE[E28B0000]        <2> 	mov esi, notfound2
  6182 00004B3E E805D2FFFF          <2> 	call print
  6183 00004B43 C3                  <2> 	ret
  6184 00004B44 706C61793A2000      <2> notfoundsound db "play: ",0
  6185                              <2> 
  6186                              <2> %ifdef sound.included
  6187                              <2> sbplay:
  6188 00004B4B BE0000C000          <2> 		mov esi, 0xC00000
  6189 00004B50 89F3                <2> 		mov ebx, esi
  6190 00004B52 81C640000000        <2> 		add esi, WAVSTART
  6191 00004B58 29F7                <2> 		sub edi, esi
  6192 00004B5A 66893D[665F0000]    <2> 		mov [Length1], di
  6193 00004B61 C1EF0F              <2> 		shr edi, 15
  6194 00004B64 893D[625F0000]      <2> 		mov [Length0], edi
  6195 00004B6A 8B4B18              <2> 		mov ecx, [ebx + 24]
  6196 00004B6D 890D[735F0000]      <2> 		mov [Freq], ecx
  6197 00004B73 31C0                <2> 		xor eax, eax
  6198 00004B75 BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  6199 00004B7A 81C240000000        <2> 		add edx, WAVSTART
  6200 00004B80 01D0                <2> 		add	eax, edx
  6201 00004B82 89C6                <2> 		mov esi, eax
  6202 00004B84 31C9                <2> 		xor ecx, ecx
  6203 00004B86 31DB                <2> 		xor ebx, ebx
  6204 00004B88 66891D[705F0000]    <2> 		mov [SegLoc], bx
  6205 00004B8F 81C300000800        <2> 		add ebx, 0x80000
  6206 00004B95 66B9FFFF            <2> 		mov cx, 0xFFFF
  6207 00004B99 6681FF0000          <2> 		cmp di, 0
  6208 00004B9E 7520                <2> 		jne .autoinit
  6209 00004BA0 668B0D[665F0000]    <2> 		mov cx, [Length1]
  6210 00004BA7 C605[615F0000]01    <2> 		mov byte [OddLength], 1
  6211 00004BAE 6681F90080          <2> 		cmp cx, 32768
  6212 00004BB3 730B                <2> 		jae .autoinit
  6213 00004BB5 C605[615F0000]00    <2> 		mov byte [OddLength], 0
  6214 00004BBC 66D1E1              <2> 		shl cx, 1
  6215 00004BBF 47                  <2> 		inc edi
  6216                              <2> .autoinit:
  6217 00004BC0 4F                  <2> 		dec edi
  6218 00004BC1 893D[625F0000]      <2> 		mov [Length0], edi
  6219 00004BC7 66890D[665F0000]    <2> 		mov [Length1], cx
  6220 00004BCE 66D1E9              <2> 		shr cx, 1
  6221 00004BD1 6641                <2> 		inc cx
  6222 00004BD3 01C8                <2> 		add eax, ecx
  6223 00004BD5 A3[685F0000]        <2> 		mov [NextMemLoc], eax
  6224 00004BDA 8935[6C5F0000]      <2> 		mov	[MemLoc], esi
  6225 00004BE0 E834120000          <2> 		call DMACopy
  6226 00004BE5 31DB                <2> 		xor ebx, ebx
  6227 00004BE7 668B1D[705F0000]    <2> 		mov bx, [SegLoc]
  6228 00004BEE 31C9                <2> 		xor ecx, ecx
  6229 00004BF0 668B0D[665F0000]    <2> 		mov cx, [Length1]
  6230 00004BF7 66D1E9              <2> 		shr cx, 1
  6231 00004BFA 6641                <2> 		inc cx
  6232 00004BFC 01CB                <2> 		add ebx, ecx
  6233 00004BFE 66891D[705F0000]    <2> 		mov [SegLoc], bx
  6234 00004C05 81C300000800        <2> 		add ebx, 0x80000
  6235 00004C0B 8B35[685F0000]      <2> 		mov esi, [NextMemLoc]
  6236 00004C11 89F0                <2> 		mov eax, esi
  6237 00004C13 01C8                <2> 		add eax, ecx
  6238 00004C15 A3[685F0000]        <2> 		mov [NextMemLoc], eax
  6239 00004C1A 8935[6C5F0000]      <2> 		mov	[MemLoc], esi
  6240 00004C20 E8F4110000          <2> 		call DMACopy
  6241 00004C25 E812120000          <2> 		call DMAPlay
  6242 00004C2A E89C120000          <2> 		call PlayDSP
  6243 00004C2F C3                  <2> 		ret
  6244                              <2> WAVSTART equ 64;44
  6245                              <2> wave_player:
  6246 00004C30 803D[785F0000]01    <2> 	cmp byte [SoundBlaster], 1
  6247 00004C37 0F840EFFFFFF        <2> 	je near sbplay
  6248 00004C3D BE[484C0000]        <2> 	mov esi, nosoundblaster
  6249 00004C42 E801D1FFFF          <2> 	call print
  6250 00004C47 C3                  <2> 	ret
  6251                              <2> %else
  6252                              <2> 	wave_player:
  6253                              <2> 		mov esi, nosoundblaster
  6254                              <2> 		call print
  6255                              <2> 		ret
  6256                              <2> %endif
  6257 00004C48 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6258 00004C51 426C61737465722064- <2>
  6259 00004C5A 657465637465642E0A- <2>
  6260 00004C63 00                  <2>
  6261                              <1> %endif
  6262                              <1> %include 'source/programs/pwd.asm'
  6263 00004C64 FF2C70776400        <2> db 255,44,"pwd",0
  6264 00004C6A BE[A4A40300]        <2> 	mov esi, currentfolder
  6265 00004C6F E8B5D0FFFF          <2> 	call printquiet
  6266 00004C74 BE[138C0000]        <2> 	mov esi, line
  6267 00004C79 E8CAD0FFFF          <2> 	call print
  6268 00004C7E C3                  <2> 	ret
  6269                              <2> 	
  6270                              <1> %include 'source/programs/reboot.asm'
  6271 00004C7F FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6272 00004C88 0F011D[924C0000]    <2> 		lidt [idtreboot]
  6273 00004C8F CD00                <2> 		int 0
  6274 00004C91 F4                  <2> 		hlt
  6275                              <2> 	
  6276 00004C92 0000                <2> 	idtreboot dw 0
  6277 00004C94 00000000            <2> 			  dd 0
  6278                              <2> 
  6279                              <2> 	coldboot:
  6280 00004C98 66B84000            <2> 		MOV AX, 0040h
  6281 00004C9C 8EC0                <2> 		MOV ES, AX
  6282 00004C9E 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6283 00004CA7 00                  <2>
  6284 00004CA8 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6285 00004CAF CF                  <2> 		IRET
  6286                              <2> 
  6287                              <2> 	warmboot:
  6288 00004CB0 66B84000            <2> 		MOV AX, 0040h
  6289 00004CB4 8EC0                <2> 		MOV ES, AX
  6290 00004CB6 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6291 00004CBF 12                  <2>
  6292 00004CC0 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6293 00004CC7 CF                  <2> 		IRET
  6294                              <2> 		
  6295                              <1> %include 'source/programs/reg.asm'
  6296 00004CC8 FF2C72656700        <2> db 255,44,"reg",0
  6297 00004CCE CD03                <2> 	int 3
  6298 00004CD0 C3                  <2> 	ret 
  6299                              <1> %ifdef disk.none
  6300                              <1> %else
  6301                              <1> 	%include 'source/programs/show.asm'
  6302 00004CD1 FF2C73686F7700      <2> db 255,44,"show",0
  6303                              <2> showprog:
  6304 00004CD8 8B3D[982F0000]      <2> 		mov edi, [currentcommandloc]
  6305 00004CDE 81C705000000        <2> 		add edi, 5
  6306 00004CE4 BE00004000          <2> 		mov esi, 0x400000
  6307 00004CE9 803F26              <2> 		cmp byte [edi], '&'
  6308 00004CEC 741B                <2> 		je .nullfile
  6309 00004CEE BE00008000          <2> 		mov esi, 0x800000
  6310 00004CF3 E82B1C0000          <2> 		call loadfile
  6311 00004CF8 81FA94010000        <2> 		cmp edx, 404
  6312 00004CFE 0F8483000000        <2> 		je near filenotfound
  6313 00004D04 BE00008000          <2> 		mov esi, 0x800000
  6314                              <2> .nullfile:
  6315                              <2> %ifdef gui.included
  6316 00004D09 66813E424D          <2> 		cmp word [esi], "BM"
  6317 00004D0E 7410                <2> 		je bmpfound
  6318                              <2> %endif
  6319 00004D10 E833D0FFFF          <2> 		call print
  6320 00004D15 BE[138C0000]        <2> 		mov esi, line
  6321 00004D1A E829D0FFFF          <2> 		call print
  6322 00004D1F C3                  <2> 		ret
  6323                              <2> %ifdef gui.included
  6324                              <2> bmpfound:
  6325 00004D20 803D[388C0000]00    <2> 		cmp byte [guion], 0
  6326 00004D27 0F8428000000        <2> 		je near noguibmp
  6327 00004D2D BE00008000          <2> 		mov esi, 0x800000
  6328 00004D32 31C9                <2> 		xor ecx, ecx
  6329 00004D34 31D2                <2> 		xor edx, edx
  6330 00004D36 31C0                <2> 		xor eax, eax
  6331 00004D38 31DB                <2> 		xor ebx, ebx
  6332 00004D3A E8A81D0000          <2> 		call showbmp
  6333 00004D3F 30C0                <2> 		xor al, al
  6334 00004D41 B405                <2> 		mov ah, 5
  6335 00004D43 CD30                <2> 		int 30h
  6336 00004D45 E812240000          <2> 		call guiclear
  6337 00004D4A E8F1200000          <2> 		call clearmousecursor
  6338 00004D4F E858240000          <2> 		call reloadallgraphics
  6339 00004D54 C3                  <2> 		ret
  6340                              <2> noguibmp:
  6341 00004D55 BE[604D0000]        <2> 		mov esi, warnguimsg
  6342 00004D5A E8E9CFFFFF          <2> 		call print
  6343 00004D5F C3                  <2> 		ret
  6344 00004D60 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6345 00004D69 6E6F7420626520646F- <2>
  6346 00004D72 6E6520776974686F75- <2>
  6347 00004D7B 742074686520475549- <2>
  6348 00004D84 2E0A00              <2>
  6349                              <2> %endif
  6350                              <2> 
  6351                              <2> filenotfound:
  6352 00004D87 BE[BA4D0000]        <2> 		mov esi, filenf
  6353 00004D8C E8B7CFFFFF          <2> 		call print
  6354 00004D91 8B35[982F0000]      <2> 		mov esi, [currentcommandloc]
  6355                              <2> findfilenotfoundzero:
  6356 00004D97 8A06                <2> 		mov al, [esi]
  6357 00004D99 46                  <2> 		inc esi
  6358 00004D9A 3C00                <2> 		cmp al, 0
  6359 00004D9C 7411                <2> 		je nofilenamenotfound
  6360 00004D9E 81FE[18BF0300]      <2> 		cmp esi, buftxtend
  6361 00004DA4 7309                <2> 		jae nofilenamenotfound
  6362 00004DA6 3C20                <2> 		cmp al, " "
  6363 00004DA8 75ED                <2> 		jne findfilenotfoundzero
  6364 00004DAA E899CFFFFF          <2> 		call print
  6365                              <2> nofilenamenotfound:
  6366 00004DAF BE[C54D0000]        <2> 		mov esi, filenf2
  6367 00004DB4 E88FCFFFFF          <2> 		call print
  6368 00004DB9 C3                  <2> 		ret
  6369 00004DBA 5468652066696C6520- <2> filenf db "The file ",34,0
  6370 00004DC3 2200                <2>
  6371 00004DC5 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6372 00004DCE 6F7420626520666F75- <2>
  6373 00004DD7 6E642E0A00          <2>
  6374                              <1> %endif
  6375                              <1> %include 'source/programs/shush.asm'
  6376 00004DDC FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6377                              <2> shushprog:
  6378                              <2> %ifdef gui.included
  6379 00004DE4 803D[388C0000]00    <2> 	cmp byte [guion], 0
  6380 00004DEB 0F84B9000000        <2> 	je near .noswitchsize
  6381 00004DF1 8B35[982F0000]      <2> 	mov esi, [currentcommandloc]
  6382 00004DF7 81C606000000        <2> 	add esi, 6
  6383 00004DFD 56                  <2> 	push esi
  6384 00004DFE 4E                  <2> 	dec esi
  6385                              <2> .findspace:
  6386 00004DFF 46                  <2> 	inc esi
  6387 00004E00 8A06                <2> 	mov al, [esi]
  6388 00004E02 3C00                <2> 	cmp al, 0
  6389 00004E04 0F84A0000000        <2> 	je near .noswitchsize
  6390 00004E0A 3C58                <2> 	cmp al, "X"
  6391 00004E0C 7408                <2> 	je .donefind
  6392 00004E0E 3C78                <2> 	cmp al, "x"
  6393 00004E10 7404                <2> 	je .donefind
  6394 00004E12 3C20                <2> 	cmp al, " "
  6395 00004E14 75E9                <2> 	jne .findspace
  6396                              <2> .donefind:
  6397 00004E16 30C0                <2> 	xor al, al
  6398 00004E18 8806                <2> 	mov [esi], al
  6399 00004E1A 46                  <2> 	inc esi
  6400 00004E1B 89F7                <2> 	mov edi, esi
  6401 00004E1D E849E5FFFF          <2> 	call cnvrttxt
  6402 00004E22 89C8                <2> 	mov eax, ecx
  6403 00004E24 5E                  <2> 	pop esi
  6404 00004E25 50                  <2> 	push eax
  6405 00004E26 89F7                <2> 	mov edi, esi
  6406 00004E28 E83EE5FFFF          <2> 	call cnvrttxt
  6407 00004E2D 89CB                <2> 	mov ebx, ecx
  6408 00004E2F 58                  <2> 	pop eax	
  6409 00004E30 6681FB0000          <2> 	cmp bx, 0
  6410 00004E35 0F846F000000        <2> 	je near .noswitchsize
  6411 00004E3B 663D0000            <2> 	cmp ax, 0
  6412 00004E3F 0F8465000000        <2> 	je near .noswitchsize
  6413 00004E45 66C1E303            <2> 	shl bx, 3
  6414 00004E49 66C1E004            <2> 	shl ax, 4
  6415 00004E4D 663B1D[98580000]    <2> 	cmp bx, [resolutionx]
  6416 00004E54 7607                <2> 	jbe .nofixx
  6417 00004E56 668B1D[98580000]    <2> 	mov bx, [resolutionx]
  6418                              <2> .nofixx:
  6419 00004E5D 66051000            <2> 	add ax, 16
  6420 00004E61 663B05[9A580000]    <2> 	cmp ax, [resolutiony]
  6421 00004E68 7606                <2> 	jbe .nofixy
  6422 00004E6A 66A1[9A580000]      <2> 	mov ax, [resolutiony]
  6423                              <2> .nofixy:
  6424 00004E70 662D1000            <2> 	sub ax, 16
  6425 00004E74 6631C9              <2> 	xor cx, cx
  6426 00004E77 6631D2              <2> 	xor dx, dx
  6427 00004E7A 66891D[4A750000]    <2> 	mov [termwindow], bx
  6428 00004E81 66A3[4C750000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6429 00004E87 BE[4A750000]        <2> 	mov esi, termwindow
  6430 00004E8C 31DB                <2> 	xor ebx, ebx
  6431 00004E8E 6631C0              <2> 	xor ax, ax
  6432 00004E91 E8E12B0000          <2> 	call showwindow
  6433 00004E96 E8C1220000          <2> 	call guiclear
  6434 00004E9B E857CFFFFF          <2> 	call clear
  6435 00004EA0 E807230000          <2> 	call reloadallgraphics
  6436 00004EA5 E84E200000          <2> 	call switchmousepos2
  6437                              <2> .noswitchsize:
  6438                              <2> %endif
  6439 00004EAA BE[B54E0000]        <2> 	mov esi, shushmsg
  6440 00004EAF E894CEFFFF          <2> 	call print
  6441 00004EB4 C3                  <2> 	ret
  6442 00004EB5 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6443 00004EBE 6F2074686520536F6C- <2>
  6444 00004EC7 6C65724F5320486172- <2>
  6445 00004ED0 646C7920556E69782D- <2>
  6446 00004ED9 436F6D70617469626C- <2>
  6447 00004EE2 65205368656C6C210A- <2>
  6448 00004EEB 00                  <2>
  6449                              <1> %include 'source/programs/system.asm'
  6450 00004EEC FF2C73797374656D00  <2> 	db 255,44,"system",0
  6451 00004EF5 BE[05500000]        <2> 	mov esi, kernelinfomsg
  6452 00004EFA E82ACEFFFF          <2> 	call printquiet
  6453 00004EFF B9[828E0300]        <2> 	mov ecx, osend
  6454 00004F04 E880E3FFFF          <2> 	call showdec
  6455 00004F09 BE[1A500000]        <2> 	mov esi, diskbytemsg
  6456 00004F0E E816CEFFFF          <2> 	call printquiet
  6457 00004F13 B9[828E0300]        <2> 	mov ecx, osend
  6458 00004F18 81C1[CE7C0500]      <2> 	add ecx, commandbufend
  6459 00004F1E 81E9[94900300]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6460 00004F24 E860E3FFFF          <2> 	call showdec
  6461 00004F29 BE[31500000]        <2> 	mov esi, membytemsg
  6462 00004F2E E8F6CDFFFF          <2> 	call printquiet
  6463 00004F33 BE[94500000]        <2> 	mov esi, endofmemmsg
  6464 00004F38 E8ECCDFFFF          <2> 	call printquiet
  6465 00004F3D B9[E2B01500]        <2> 	mov ecx, bssend
  6466 00004F42 E878E2FFFF          <2> 	call showhex
  6467 00004F47 BE[4A500000]        <2> 	mov esi, systeminfomsg
  6468 00004F4C E8D8CDFFFF          <2> 	call printquiet
  6469                              <2> getcpuspeed:
  6470 00004F51 B8FE000000          <2> 	mov eax, 0xFE
  6471 00004F56 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6472 00004F58 B020                <2> 	mov al, 0x20
  6473 00004F5A E620                <2> 	out 0x20, al
  6474 00004F5C F4                  <2> 	hlt
  6475 00004F5D 0F31                <2> 	rdtsc
  6476 00004F5F 89D6                <2> 	mov esi, edx
  6477 00004F61 89C7                <2> 	mov edi, eax
  6478 00004F63 31C0                <2> 	xor eax, eax
  6479 00004F65 C605[49020000]01    <2> 	mov byte [testingcpuspeed], 1
  6480                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6481 00004F6C 40                  <2> 	inc eax
  6482 00004F6D EBFD                <2> 	jmp cpuspeedloop
  6483                              <2> cpuspeedloopend:
  6484 00004F6F 0F31                <2> 	rdtsc
  6485 00004F71 29F8                <2> 	sub eax, edi
  6486 00004F73 29F2                <2> 	sub edx, esi
  6487 00004F75 8915[52020000]      <2> 	mov [cpuclocksperint + 4], edx
  6488 00004F7B A3[4E020000]        <2> 	mov [cpuclocksperint], eax
  6489 00004F80 31C0                <2> 	xor eax, eax
  6490 00004F82 E621                <2> 	out 0x21, al
  6491 00004F84 B020                <2> 	mov al, 0x20
  6492 00004F86 E620                <2> 	out 0x20, al
  6493 00004F88 31D2                <2> 	xor edx, edx
  6494 00004F8A 31C0                <2> 	xor eax, eax
  6495 00004F8C A1[4A020000]        <2> 	mov eax, [cpuspeedperint]
  6496 00004F91 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6497                              <2> 				;result by 2
  6498 00004F93 8B1D[5C020000]      <2> 	mov ebx, [timeinterval]
  6499 00004F99 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6500 00004F9C F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6501 00004F9E 89C1                <2> 	mov ecx, eax
  6502 00004FA0 E8E4E2FFFF          <2> 	call showdec
  6503 00004FA5 BE[78500000]        <2> 	mov esi, cpuspeedmsg
  6504 00004FAA E87ACDFFFF          <2> 	call printquiet
  6505 00004FAF 31D2                <2> 	xor edx, edx
  6506 00004FB1 A1[4E020000]        <2> 	mov eax, [cpuclocksperint]
  6507 00004FB6 8B15[52020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6508 00004FBC 8B1D[5C020000]      <2> 	mov ebx, [timeinterval]
  6509 00004FC2 C1EB0A              <2> 	shr ebx, 10
  6510 00004FC5 F7F3                <2> 	div ebx
  6511 00004FC7 89C1                <2> 	mov ecx, eax
  6512 00004FC9 E8BBE2FFFF          <2> 	call showdec
  6513 00004FCE BE[7E500000]        <2> 	mov esi, cpuclockmsg
  6514 00004FD3 E851CDFFFF          <2> 	call printquiet
  6515 00004FD8 8B0D[56020000]      <2> 	mov ecx, [memoryspace]
  6516 00004FDE C1E914              <2> 	shr ecx, 20
  6517 00004FE1 41                  <2> 	inc ecx	;the reading is one MB behind
  6518 00004FE2 E8A2E2FFFF          <2> 	call showdec
  6519 00004FE7 BE[83500000]        <2> 	mov esi, memoryspacemsg
  6520 00004FEC E857CDFFFF          <2> 	call print
  6521                              <2> %ifdef sound.included
  6522 00004FF1 803D[785F0000]00    <2> 	cmp byte [SoundBlaster], 0
  6523 00004FF8 740A                <2> 	je .nosb
  6524 00004FFA BE[60500000]        <2> 	mov esi, soundblastermsg
  6525 00004FFF E844CDFFFF          <2> 	call print
  6526                              <2> .nosb:
  6527                              <2> %endif
  6528 00005004 C3                  <2> 	ret
  6529                              <2> 
  6530 00005005 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6531 0000500E 666F726D6174696F6E- <2>
  6532 00005017 3A0A00              <2>
  6533 0000501A 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6534 00005023 6B2053706163652055- <2>
  6535 0000502C 7365640A00          <2>
  6536 00005031 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6537 0000503A 6F7279205370616365- <2>
  6538 00005043 20557365640A00      <2>
  6539 0000504A 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6540 00005053 6E666F726D6174696F- <2>
  6541 0000505C 6E3A0A00            <2>
  6542                              <2> %ifdef sound.included
  6543 00005060 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6544 00005069 746572204465746563- <2>
  6545 00005072 7465642E0A00        <2>
  6546                              <2> %endif
  6547 00005078 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6548 0000507E 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6549 00005083 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6550 0000508C 2053706163650A00    <2>
  6551 00005094 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6552 0000509D 6D6F72792053706163- <2>
  6553 000050A6 653A20307800        <2>
  6554                              <1> %include 'source/programs/time.asm'
  6555 000050AC 082E30303030303030- <2> timenscache db 8,".000000000"
  6556 000050B5 3030                <2>
  6557 000050B7 200A00              <2> timenscacheend: db " ",10,0
  6558 000050BA 00                  <2> istimeset db 0
  6559 000050BB 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  6560 000050C4 2063757272656E7420- <2>
  6561 000050CD 554E49582074696D65- <2>
  6562 000050D6 3A0A00              <2>
  6563 000050D9 00<rept>            <2> timeinputbuffer times 12 db 0
  6564 000050E5 00                  <2> timeinputbend: db 0
  6565                              <2> 
  6566 000050E6 FF2C74696D6500      <2> db 255,44,"time",0
  6567 000050ED 803D[BA500000]00    <2> 	cmp byte [istimeset], 0
  6568 000050F4 753A                <2> 	jne timeisset
  6569 000050F6 BE[BB500000]        <2> 	mov esi, settimemsg
  6570 000050FB E848CCFFFF          <2> 	call print
  6571 00005100 BE[D9500000]        <2> 	mov esi, timeinputbuffer
  6572 00005105 BF[E5500000]        <2> 	mov edi, timeinputbend
  6573 0000510A E866CDFFFF          <2> 	call readline
  6574 0000510F BE[D9500000]        <2> 	mov esi, timeinputbuffer
  6575 00005114 31FF                <2> 	xor edi, edi
  6576 00005116 E850E2FFFF          <2> 	call cnvrttxt
  6577 0000511B 890D[60020000]      <2> 	mov [timeseconds], ecx
  6578 00005121 31C9                <2> 	xor ecx, ecx
  6579 00005123 890D[64020000]      <2> 	mov [timenanoseconds], ecx
  6580 00005129 C605[BA500000]01    <2> 	mov byte [istimeset], 1
  6581                              <2> timeisset:
  6582 00005130 8B0D[60020000]      <2> 	mov ecx, [timeseconds]
  6583 00005136 E84EE1FFFF          <2> 	call showdec
  6584                              <2> 	
  6585 0000513B 8B0D[64020000]      <2> 	mov ecx, [timenanoseconds]
  6586 00005141 BE[AC500000]        <2> 	mov esi, timenscache
  6587 00005146 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6588 0000514D C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6589 00005154 C6460A30            <2> 	mov byte [esi + 10], "0"
  6590 00005158 BE[B7500000]        <2> 	mov esi, timenscacheend
  6591 0000515D E80ADFFFFF          <2> 	call convert
  6592 00005162 BE[AC500000]        <2> 	mov esi, timenscache
  6593 00005167 E8BDCBFFFF          <2> 	call printquiet
  6594                              <2> 	
  6595 0000516C E82D000000          <2> 	call time
  6596 00005171 BE[6A530000]        <2> 	mov esi, timeshow
  6597 00005176 E8AECBFFFF          <2> 	call printquiet
  6598 0000517B BE[138C0000]        <2> 	mov esi, line
  6599 00005180 E8A4CBFFFF          <2> 	call printquiet
  6600 00005185 BE[73530000]        <2> 	mov esi, dateshow
  6601 0000518A E89ACBFFFF          <2> 	call printquiet
  6602 0000518F BE[138C0000]        <2> 	mov esi, line
  6603 00005194 E890CBFFFF          <2> 	call printquiet
  6604 00005199 E9BC000000          <2> 	jmp findday
  6605                              <2> time:
  6606 0000519E E84F010000          <2> 	call tstackput1
  6607 000051A3 B00A                <2> 	mov al,10			;Get RTC register A
  6608 000051A5 E879010000          <2> 	call tget1
  6609 000051AA A880                <2> 	test al,0x80			;Is update in progress?
  6610 000051AC 75F0                <2> 	jne time				; yes, wait
  6611                              <2> 
  6612 000051AE B000                <2> 	mov al,0			;Get seconds (00 to 59)
  6613 000051B0 E86E010000          <2> 	call tget1
  6614 000051B5 A2[61530000]        <2> 	mov [RTCtimeSecond],al
  6615                              <2> 
  6616 000051BA B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  6617 000051BC E862010000          <2> 	call tget1
  6618 000051C1 A2[62530000]        <2> 	mov [RTCtimeMinute],al
  6619                              <2> 
  6620 000051C6 B004                <2> 	mov al,0x04			;Get hours (see notes)
  6621 000051C8 E856010000          <2> 	call tget1
  6622 000051CD A2[63530000]        <2> 	mov [RTCtimeHour],al
  6623                              <2> 
  6624 000051D2 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  6625 000051D4 E84A010000          <2> 	call tget1
  6626 000051D9 A2[64530000]        <2> 	mov [RTCtimeDay],al
  6627                              <2> 
  6628 000051DE B008                <2> 	mov al,0x08			;Get month (01 to 12)
  6629 000051E0 E83E010000          <2> 	call tget1
  6630 000051E5 A2[65530000]        <2> 	mov [RTCtimeMonth],al
  6631                              <2> 
  6632 000051EA B009                <2> 	mov al,0x09			;Get year (00 to 99)
  6633 000051EC E832010000          <2> 	call tget1
  6634 000051F1 A2[66530000]        <2> 	mov [RTCtimeYear],al
  6635                              <2> 	
  6636 000051F6 BE[6A530000]        <2> 	mov esi, timeshow
  6637 000051FB 8A2D[63530000]      <2> 	mov ch, [RTCtimeHour]
  6638 00005201 E828010000          <2> 	call tput1
  6639 00005206 8A2D[62530000]      <2> 	mov ch, [RTCtimeMinute]
  6640 0000520C E81D010000          <2> 	call tput1
  6641 00005211 8A2D[61530000]      <2> 	mov ch, [RTCtimeSecond]
  6642 00005217 E812010000          <2> 	call tput1
  6643 0000521C BE[73530000]        <2> 	mov esi, dateshow
  6644 00005221 8A2D[65530000]      <2> 	mov ch, [RTCtimeMonth]
  6645 00005227 E802010000          <2> 	call tput1
  6646 0000522C 8A2D[64530000]      <2> 	mov ch, [RTCtimeDay]
  6647 00005232 E8F7000000          <2> 	call tput1
  6648 00005237 B520                <2> 	mov ch, 0x20
  6649 00005239 E8F0000000          <2> 	call tput1
  6650 0000523E 4E                  <2> 	dec esi
  6651 0000523F 8A2D[66530000]      <2> 	mov ch, [RTCtimeYear]
  6652 00005245 E8E4000000          <2> 	call tput1
  6653 0000524A E8BD000000          <2> 	call tstackget1
  6654 0000524F C3                  <2> 	ret
  6655 00005250 BE[6A530000]        <2> 	mov esi, timeshow
  6656 00005255 E8EECAFFFF          <2> 	call print
  6657                              <2> ;;get day of week
  6658                              <2> ;;add these:
  6659                              <2> ;;century value
  6660                              <2> ;;last 2 digits of year
  6661                              <2> ;;last 2 digits of year right shifted twice
  6662                              <2> ;;month table value
  6663                              <2> ;;day of the month
  6664                              <2> ;;divide these by 7
  6665                              <2> ;;the remainder is the day
  6666                              <2> findday:
  6667 0000525A 31C0                <2> 	xor eax, eax
  6668                              <2> ;;first convert the values from BCD to hex
  6669 0000525C A0[64530000]        <2> 	mov al, [RTCtimeDay]
  6670 00005261 E873000000          <2> 	call converttohex
  6671 00005266 8825[67530000]      <2> 	mov [dayhex], ah
  6672 0000526C A0[65530000]        <2> 	mov al, [RTCtimeMonth]
  6673 00005271 E863000000          <2> 	call converttohex
  6674 00005276 8825[68530000]      <2> 	mov [monthhex], ah
  6675 0000527C A0[66530000]        <2> 	mov al, [RTCtimeYear]
  6676 00005281 E853000000          <2> 	call converttohex
  6677 00005286 8825[69530000]      <2> 	mov [yearhex], ah
  6678 0000528C 31C0                <2> 	xor eax, eax
  6679 0000528E A0[69530000]        <2> 	mov al, [yearhex]
  6680 00005293 C0E802              <2> 	shr al, 2
  6681 00005296 0205[69530000]      <2> 	add al, [yearhex]
  6682 0000529C 0506000000          <2> 	add eax, 6
  6683 000052A1 31DB                <2> 	xor ebx, ebx
  6684 000052A3 8A1D[68530000]      <2> 	mov bl, [monthhex]
  6685 000052A9 FECB                <2> 	dec bl
  6686 000052AB 81C3[88530000]      <2> 	add ebx, month
  6687 000052B1 31C9                <2> 	xor ecx, ecx
  6688 000052B3 8A0B                <2> 	mov cl, [ebx]
  6689 000052B5 01C8                <2> 	add eax, ecx
  6690 000052B7 8A0D[67530000]      <2> 	mov cl, [dayhex]
  6691 000052BD 01C8                <2> 	add eax, ecx
  6692 000052BF 66BB0700            <2> 	mov bx, 7
  6693 000052C3 31D2                <2> 	xor edx, edx
  6694 000052C5 66F7F3              <2> 	div bx
  6695 000052C8 C1E202              <2> 	shl edx, 2
  6696 000052CB 81C2[94530000]      <2> 	add edx, day
  6697 000052D1 8B32                <2> 	mov esi, [edx]
  6698 000052D3 E870CAFFFF          <2> 	call print
  6699 000052D8 C3                  <2> 	ret
  6700                              <2> 	
  6701                              <2> converttohex:
  6702 000052D9 88C4                <2> 	mov ah, al
  6703 000052DB C0E804              <2> 	shr al, 4
  6704 000052DE C0E404              <2> 	shl ah, 4
  6705 000052E1 C0EC04              <2> 	shr ah, 4
  6706 000052E4 3C00                <2> 	cmp al, 0
  6707 000052E6 7409                <2> 	je noconverttohex
  6708                              <2> converttohexlp:
  6709 000052E8 80C40A              <2> 	add ah, 10
  6710 000052EB FEC8                <2> 	dec al
  6711 000052ED 3C00                <2> 	cmp al, 0
  6712 000052EF 75F7                <2> 	jne converttohexlp
  6713                              <2> noconverttohex:
  6714 000052F1 C3                  <2> 	ret
  6715                              <2> 	
  6716                              <2> tstackput1:
  6717 000052F2 8935[5D530000]      <2> 	mov [tstack + 20], esi
  6718 000052F8 BE[49530000]        <2> 	mov esi, tstack
  6719 000052FD 8906                <2> 	mov [esi], eax
  6720 000052FF 895E04              <2> 	mov [esi + 4], ebx
  6721 00005302 894E08              <2> 	mov [esi + 8], ecx
  6722 00005305 89560C              <2> 	mov [esi + 12], edx
  6723 00005308 897E10              <2> 	mov [esi + 16], edi
  6724 0000530B C3                  <2> 	ret
  6725                              <2> 	
  6726                              <2> tstackget1:
  6727 0000530C BE[49530000]        <2> 	mov esi, tstack
  6728 00005311 8B06                <2> 	mov eax, [esi]
  6729 00005313 8B5E04              <2> 	mov ebx, [esi + 4]
  6730 00005316 8B4E08              <2> 	mov ecx, [esi + 8]
  6731 00005319 8B560C              <2> 	mov edx, [esi + 12]
  6732 0000531C 8B7E10              <2> 	mov edi, [esi + 16]
  6733 0000531F 8B7614              <2> 	mov esi, [esi + 20]
  6734 00005322 C3                  <2> 	ret
  6735                              <2> 	
  6736                              <2> tget1:
  6737 00005323 66BA7000            <2> 	mov dx, 0x70
  6738 00005327 EE                  <2> 	out dx, al
  6739 00005328 6642                <2> 	inc dx
  6740 0000532A EC                  <2> 	in al, dx
  6741 0000532B 664A                <2> 	dec dx
  6742 0000532D C3                  <2> 	ret
  6743                              <2> 	
  6744                              <2> tput1:
  6745 0000532E 66C1E904            <2> 	shr cx, 4
  6746 00005332 B030                <2> 	mov al, 48
  6747 00005334 00E8                <2> 	add al, ch
  6748 00005336 8806                <2> 	mov [esi], al
  6749 00005338 46                  <2> 	inc esi
  6750 00005339 B030                <2> 	mov al, 48
  6751 0000533B C0E904              <2> 	shr cl, 4
  6752 0000533E 00C8                <2> 	add al, cl
  6753 00005340 8806                <2> 	mov [esi], al
  6754 00005342 81C602000000        <2> 	add esi, 2
  6755 00005348 C3                  <2> 	ret
  6756                              <2> 		
  6757 00005349 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  6758 00005352 000000000000000000- <2>
  6759 0000535B 000000000000        <2>
  6760 00005361 00                  <2> 	RTCtimeSecond db 0
  6761 00005362 00                  <2> 	RTCtimeMinute db 0
  6762 00005363 00                  <2> 	RTCtimeHour db 0
  6763 00005364 00                  <2> 	RTCtimeDay db 0
  6764 00005365 00                  <2> 	RTCtimeMonth db 0
  6765 00005366 00                  <2> 	RTCtimeYear db 0
  6766 00005367 00                  <2> 	dayhex db 0
  6767 00005368 00                  <2> 	monthhex db 0
  6768 00005369 00                  <2> 	yearhex db 0
  6769 0000536A 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  6770 00005373 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  6771 0000537C 302000              <2>
  6772                              <2> 	oldcentury:	;;from 1700 to 1900
  6773 0000537F 040200              <2> 	db 4,2,0
  6774                              <2> 	century:	;;from 2000 to 2500
  6775 00005382 060402000604        <2> 	db 6,4,2,0,6,4
  6776                              <2> 	month:
  6777 00005388 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  6778 00005391 000305              <2>
  6779                              <2> 	day:
  6780 00005394 [B0530000]          <2> 	dd sunday
  6781 00005398 [B8530000]          <2> 	dd monday
  6782 0000539C [C0530000]          <2> 	dd tuesday
  6783 000053A0 [C9530000]          <2> 	dd wednesday
  6784 000053A4 [D4530000]          <2> 	dd thursday
  6785 000053A8 [DE530000]          <2> 	dd friday
  6786 000053AC [E6530000]          <2> 	dd saturday
  6787                              <2> sunday:
  6788 000053B0 53756E6461790A00    <2> 	db "Sunday",10,0
  6789                              <2> monday:
  6790 000053B8 4D6F6E6461790A00    <2> 	db "Monday",10,0
  6791                              <2> tuesday:
  6792 000053C0 547565736461790A00  <2> 	db "Tuesday",10,0
  6793                              <2> wednesday:
  6794 000053C9 5765646E6573646179- <2> 	db "Wednesday",10,0
  6795 000053D2 0A00                <2>
  6796                              <2> thursday:
  6797 000053D4 54687572736461790A- <2> 	db "Thursday",10,0
  6798 000053DD 00                  <2>
  6799                              <2> friday:
  6800 000053DE 4672696461790A00    <2> 	db "Friday",10,0
  6801                              <2> saturday:
  6802 000053E6 53617475726461790A- <2> 	db "Saturday",10,0
  6803 000053EF 00                  <2>
  6804                              <1> %include 'source/programs/turnoff.asm'
  6805 000053F0 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6806 000053F9 00                  <2>
  6807                              <2> 	turnoff:
  6808 000053FA 66BB[1554]          <2> 			mov bx, shutdown
  6809 000053FE 66891D[EB0C0000]    <2> 			mov [realmodeptr], bx
  6810 00005405 BB[3F540000]        <2> 			mov ebx, halt
  6811 0000540A 891D[E70C0000]      <2> 			mov [realmodereturn], ebx
  6812 00005410 E9BBB7FFFF          <2> 			jmp realmode
  6813                              <2> 
  6814                              <2> [BITS 16]
  6815                              <2> 		shutdown:
  6816 00005415 B453                <2> 			mov ah, 0x53
  6817 00005417 B004                <2> 			mov al, 4
  6818 00005419 31DB                <2> 			xor bx, bx
  6819 0000541B CD15                <2> 			int 0x15
  6820                              <2> 			
  6821 0000541D B453                <2> 			mov ah, 0x53
  6822 0000541F B001                <2> 			mov al, 1
  6823 00005421 31DB                <2> 			xor bx, bx
  6824 00005423 CD15                <2> 			int 0x15
  6825                              <2> 			
  6826 00005425 B453                <2> 			mov ah, 0x53
  6827 00005427 B008                <2> 			mov al, 8
  6828 00005429 BB0100              <2> 			mov bx, 1
  6829 0000542C B90100              <2> 			mov cx, 1
  6830 0000542F CD15                <2> 			int 0x15
  6831                              <2> 			
  6832 00005431 B453                <2> 			mov ah, 0x53
  6833 00005433 B007                <2> 			mov al, 7
  6834 00005435 BB0100              <2> 			mov bx, 1
  6835 00005438 B90300              <2> 			mov cx, 3
  6836 0000543B CD15                <2> 			int 0x15
  6837 0000543D EBFE                <2> 			jmp $
  6838                              <2> 			[BITS 32]
  6839 0000543F EBFE                <2> halt: jmp $
  6840                              <1> %include 'source/programs/wait.asm'
  6841 00005441 FF2C7761697400      <2> db 255,44,"wait",0
  6842                              <2> waitkey:
  6843 00005448 E8F6CEFFFF          <2> 		call getchar
  6844 0000544D C3                  <2> 		ret
  6845                              <1> %include 'source/programs/while.asm'
  6846 0000544E FF2C7768696C6500    <2> db 255,44,"while",0
  6847 00005456 30C0                <2> whilecmd:  xor al, al
  6848 00005458 3805[12A70300]      <2> 	cmp [BATCHISON], al
  6849 0000545E 0F8432E6FFFF        <2> 	je near notbatch
  6850 00005464 8B35[0EA70300]      <2> 	mov esi, [BATCHPOS]
  6851 0000546A 81EE02000000        <2> 	sub esi, 2
  6852 00005470 4E                  <2> whilefnd: dec esi
  6853 00005471 8A06                <2> 	mov al, [esi]
  6854 00005473 3C0A                <2> 	cmp al, 10
  6855 00005475 0F840A000000        <2> 	je near whilefnd2
  6856 0000547B 3C00                <2> 	cmp al, 0
  6857 0000547D 0F8402000000        <2> 	je near whilefnd2
  6858 00005483 EBEB                <2> 	jmp whilefnd
  6859                              <2> whilefnd2:
  6860 00005485 46                  <2> 	inc esi
  6861 00005486 8935[14A70300]      <2> 	mov [LOOPPOS], esi
  6862 0000548C C605[13A70300]01    <2> 	mov BYTE [LOOPON], 1
  6863 00005493 BE[18BB0300]        <2> 	mov esi, buftxt
  6864 00005498 BB[18BB0300]        <2> 	mov ebx, buftxt
  6865 0000549D 81C306000000        <2> 	add ebx, 6
  6866 000054A3 E902F1FFFF          <2> 	jmp chkeqsn
  6867                              <1> progend:		;programs end here	
  6868                              <1> batchprogend:
  6869                                  	%include "source/hardware.asm"
  6870                              <1> %ifdef gui.included
  6871                              <1> 	%include "source/drivers/video/vesa.asm"
  6872                              <2> [BITS 16]
  6873                              <2> guiswitch:
  6874 000054A8 81F90000            <2> 	cmp cx, 0
  6875 000054AC 750B                <2> 	jne guiswitchdefnum
  6876 000054AE B81200              <2> 	mov ax, 12h
  6877 000054B1 31DB                <2> 	xor bx, bx
  6878 000054B3 CD10                <2> 	int 10h
  6879 000054B5 E85100              <2> 	call guiloadagain
  6880                              <2> guiswitchnocando:
  6881 000054B8 C3                  <2> 	ret	;return without switching as mode number is bad
  6882                              <2> guiswitchdefnum:	;switch to a defined mode number
  6883 000054B9 B8004F              <2> 	mov ax, 0x4F00
  6884 000054BC BF[8656]            <2> 	mov di, VBEMODEBLOCK
  6885 000054BF CD10                <2> 	int 10h
  6886 000054C1 BE[A856]            <2> 	mov si, reserved
  6887 000054C4 81EE0200            <2> 	sub si, 2
  6888                              <2> .loop:
  6889 000054C8 81C60200            <2> 	add si, 2
  6890 000054CC 81FE[8657]          <2> 	cmp si, oemdata
  6891 000054D0 74E6                <2> 	je guiswitchnocando
  6892 000054D2 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6893 000054D6 74E0                <2> 	je guiswitchnocando
  6894 000054D8 390C                <2> 	cmp [si], cx
  6895 000054DA 75EC                <2> 	jne .loop
  6896 000054DC 8936[E055]          <2> 	mov [videomodecache], si
  6897 000054E0 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6898 000054E4 B8014F              <2> 	mov ax, 0x4F01
  6899 000054E7 BF[8658]            <2> 	mov di, VBEMODEINFOBLOCK
  6900 000054EA 890E[DE55]          <2> 	mov [vesamode], cx
  6901 000054EE CD10                <2> 	int 10h
  6902 000054F0 E9CB00              <2> 	jmp selectedvesa
  6903                              <2> guiload:
  6904 000054F3 BE[5E56]            <2> 	mov si, bootmsg
  6905 000054F6 E881AB              <2> 	call printrm
  6906 000054F9 31C0                <2> 	xor ax, ax
  6907 000054FB CD16                <2> 	int 16h
  6908 000054FD 3C79                <2> 	cmp al, "y"
  6909 000054FF 0F8531AB            <2> 	jne near vgaset
  6910 00005503 BE[128C]            <2> 	mov si, crlf
  6911 00005506 E871AB              <2> 	call printrm
  6912                              <2> guiloadagain:
  6913 00005509 B8004F              <2> 	mov ax, 04F00h
  6914 0000550C BF[8656]            <2> 	mov di, VBEMODEBLOCK
  6915 0000550F CD10                <2> 	int 10h
  6916 00005511 BE[A856]            <2> 	mov si, reserved
  6917 00005514 81EE0200            <2> 	sub si, 2
  6918                              <2> findvideomodes:
  6919 00005518 81C60200            <2> 	add si, 2
  6920 0000551C 8B0C                <2> 	mov cx, [si]
  6921 0000551E 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6922 00005522 0F840A00            <2> 	je near nextvmode
  6923 00005526 81FE[8657]          <2> 	cmp si, oemdata
  6924 0000552A 0F8306AB            <2> 	jae near vgaset	;;kill if no valid list is found
  6925 0000552E EBE8                <2> 	jmp findvideomodes 	
  6926                              <2> ;;debug,shows vmodes available
  6927                              <2> nextvmode:
  6928 00005530 81EE0200            <2> 	sub si, 2
  6929 00005534 81FE[A856]          <2> 	cmp si, reserved
  6930 00005538 0F82CDFF            <2> 	jb near guiloadagain
  6931 0000553C 8B0C                <2> 	mov cx, [si]
  6932 0000553E 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6933 00005542 0F84EAFF            <2> 	je near nextvmode
  6934 00005546 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  6935 0000554A B8014F              <2> 	mov ax, 04F01h
  6936 0000554D BF[8658]            <2> 	mov di, VBEMODEINFOBLOCK
  6937 00005550 890E[DE55]          <2> 	mov [vesamode], cx
  6938 00005554 CD10                <2> 	int 10h
  6939 00005556 A0[9F58]            <2> 	mov al, [bitsperpixel]
  6940 00005559 3C10                <2> 	cmp al, 16
  6941 0000555B 75D3                <2> 	jne nextvmode
  6942 0000555D 8936[E055]          <2> 	mov [videomodecache], si
  6943 00005561 84E4                <2> 	test ah, ah
  6944 00005563 0F842200            <2> 	jz near setvesamode
  6945 00005567 EBC7                <2> 	jmp nextvmode
  6946 00005569 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  6947 00005572 20766964656F206D6F- <2>
  6948 0000557B 6465204F4B3F28792F- <2>
  6949 00005584 6E290D0A00          <2>
  6950                              <2> setvesamode:
  6951 00005589 8B0E[9858]          <2> 	mov cx, [resolutionx]
  6952 0000558D E85900              <2> 	call decshow
  6953 00005590 B078                <2> 	mov al, "x"
  6954 00005592 E8C100              <2> 	call char
  6955 00005595 8B0E[9A58]          <2> 	mov cx, [resolutiony]
  6956 00005599 E84D00              <2> 	call decshow
  6957 0000559C B040                <2> 	mov al, "@"
  6958 0000559E E8B500              <2> 	call char
  6959 000055A1 31C9                <2> 	xor cx, cx
  6960 000055A3 8A0E[9F58]          <2> 	mov cl, [bitsperpixel]
  6961 000055A7 E83F00              <2> 	call decshow
  6962 000055AA BE[6955]            <2> 	mov si, isthisvideook
  6963 000055AD E8CAAA              <2> 	call printrm
  6964 000055B0 31C0                <2> 	xor ax, ax
  6965 000055B2 CD16                <2> 	int 16h
  6966 000055B4 8B36[E055]          <2> 	mov si, [videomodecache]
  6967 000055B8 3C79                <2> 	cmp al, "y"
  6968 000055BA 0F8572FF            <2> 	jne near nextvmode
  6969                              <2> selectedvesa:
  6970 000055BE 8B16[9858]          <2> 	mov dx, [resolutionx]
  6971 000055C2 01D2                <2> 	add dx, dx
  6972 000055C4 8916[8659]          <2> 	mov [resolutionx2], dx
  6973 000055C8 31D2                <2> 	xor dx, dx
  6974 000055CA 31C9                <2> 	xor cx, cx
  6975 000055CC B8024F              <2> 	mov ax, 04F02h
  6976 000055CF 8B1E[DE55]          <2> 	mov bx, [vesamode]
  6977 000055D3 CD10                <2> 	int 10h		;;enter VESA mode
  6978 000055D5 C606[388C]01        <2> 	mov byte [guion], 1
  6979 000055DA E867AA              <2> 	call getmemorysize;get the memory map after the video is initialized
  6980 000055DD C3                  <2> 	ret
  6981                              <2> 	
  6982 000055DE 0000                <2> vesamode dw 0
  6983 000055E0 0000                <2> videomodecache dw 0
  6984                              <2> 
  6985 000055E2 0000000000          <2> dcnm db 0,0,0,0,0
  6986 000055E7 0000                <2> dcnmend db 0,0
  6987                              <2> 
  6988                              <2> 
  6989                              <2> decshow:
  6990 000055E9 BE[E255]            <2> 	mov si, dcnm
  6991                              <2> decclear:
  6992 000055EC B030                <2> 	mov al, "0"
  6993 000055EE 8804                <2> 	mov [si], al
  6994 000055F0 46                  <2> 	inc si
  6995 000055F1 81FE[E755]          <2> 	cmp si, dcnmend
  6996 000055F5 76F5                <2> 	jbe decclear
  6997 000055F7 4E                  <2> 	dec si
  6998 000055F8 E81500              <2> 	call convertrm
  6999 000055FB BE[E255]            <2> 	mov si, dcnm
  7000                              <2> dectst:
  7001 000055FE 8A04                <2> 	mov al, [si]
  7002 00005600 46                  <2> 	inc si
  7003 00005601 81FE[E755]          <2> 	cmp si, dcnmend
  7004 00005605 7704                <2> 	ja dectstend
  7005 00005607 3C30                <2> 	cmp al, "0"
  7006 00005609 76F3                <2> 	jbe dectst
  7007                              <2> dectstend:
  7008 0000560B 4E                  <2> 	dec si
  7009 0000560C E86BAA              <2> 	call printrm
  7010 0000560F C3                  <2> 	ret
  7011                              <2> 	
  7012                              <2> 	
  7013                              <2> convertrm:
  7014 00005610 4E                  <2> 	dec si
  7015 00005611 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  7016                              <2> cnvrtrm:
  7017 00005613 89DE                <2> 	mov si, bx
  7018 00005615 81EE0300            <2> 	sub si, 3
  7019 00005619 46                  <2> ten3rm:	inc si
  7020 0000561A 81F9E803            <2> 	cmp cx, 1000
  7021 0000561E 7208                <2> 	jb ten2rm
  7022 00005620 81E9E803            <2> 	sub cx, 1000
  7023 00005624 FE04                <2> 	inc byte [si]
  7024 00005626 EBEB                <2> 	jmp cnvrtrm
  7025 00005628 46                  <2> ten2rm:	inc si
  7026 00005629 81F96400            <2> 	cmp cx, 100
  7027 0000562D 7208                <2> 	jb ten1rm
  7028 0000562F 81E96400            <2> 	sub cx, 100
  7029 00005633 FE04                <2> 	inc byte [si]
  7030 00005635 EBDC                <2> 	jmp cnvrtrm
  7031 00005637 46                  <2> ten1rm:	inc si
  7032 00005638 81F90A00            <2> 	cmp cx, 10
  7033 0000563C 7208                <2> 	jb ten0rm
  7034 0000563E 81E90A00            <2> 	sub cx, 10
  7035 00005642 FE04                <2> 	inc byte [si]
  7036 00005644 EBCD                <2> 	jmp cnvrtrm
  7037 00005646 46                  <2> ten0rm:	inc si
  7038 00005647 81F90100            <2> 	cmp cx, 1
  7039 0000564B 7208                <2> 	jb tendnrm
  7040 0000564D 81E90100            <2> 	sub cx, 1
  7041 00005651 FE04                <2> 	inc byte [si]
  7042 00005653 EBBE                <2> 	jmp cnvrtrm
  7043                              <2> tendnrm:
  7044 00005655 C3                  <2> 	ret
  7045                              <2> 
  7046                              <2>     char: 		    ;char must be in al
  7047 00005656 BB0700              <2>        mov bx, 07
  7048 00005659 B40E                <2> 	   mov ah, 0Eh
  7049 0000565B CD10                <2> 	   int 10h
  7050 0000565D C3                  <2> 	   ret
  7051                              <2> 
  7052 0000565E 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  7053 00005667 20746865204755493F- <2>
  7054 00005670 28792F6E2900        <2>
  7055                              <2> 
  7056                              <2> 
  7057                              <2> mcursor:
  7058 00005676 01                  <2> 	db	00000001b
  7059 00005677 81                  <2> 	db	10000001b
  7060 00005678 C1                  <2> 	db	11000001b
  7061 00005679 E1                  <2> 	db	11100001b
  7062 0000567A F1                  <2> 	db	11110001b
  7063 0000567B F9                  <2> 	db	11111001b
  7064 0000567C FD                  <2> 	db	11111101b
  7065 0000567D FF                  <2> 	db	11111111b
  7066 0000567E F9                  <2> 	db	11111001b
  7067 0000567F B9                  <2> 	db	10111001b
  7068 00005680 39                  <2> 	db	00111001b
  7069 00005681 1C                  <2> 	db	00011100b
  7070 00005682 1C                  <2> 	db	00011100b
  7071 00005683 0E                  <2> 	db	00001110b
  7072 00005684 0E                  <2> 	db	00001110b
  7073 00005685 0C                  <2> 	db	00001100b
  7074                              <2> mcursorend:
  7075                              <2> 
  7076                              <2> 
  7077                              <2> VBEMODEBLOCK:
  7078 00005686 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  7079 0000568A 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  7080 0000568C 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  7081 00005690 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  7082 00005694 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  7083 00005698 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  7084 0000569A 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  7085 0000569C 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  7086 000056A0 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  7087 000056A4 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  7088 000056A8 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  7089 00005786 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  7090                              <2> 
  7091                              <2> VBEMODEINFOBLOCK:
  7092                              <2> ;Mandatory information for all VBE revision
  7093 00005886 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  7094 00005888 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  7095 00005889 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  7096 0000588A 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  7097 0000588C 00<rept>            <2> winsize          	times  2 db 0	;Window size
  7098 0000588E 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  7099 00005890 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  7100 00005892 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  7101 00005896 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  7102                              <2> 
  7103                              <2> ;Mandatory information for VBE 1.2 and above
  7104 00005898 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  7105 0000589A 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  7106 0000589C 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  7107 0000589D 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  7108 0000589E 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  7109 0000589F 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  7110 000058A0 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  7111 000058A1 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  7112 000058A2 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  7113 000058A3 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  7114 000058A4 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  7115                              <2> 
  7116                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  7117 000058A5 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  7118 000058A6 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  7119 000058A7 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  7120 000058A8 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  7121 000058A9 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  7122 000058AA 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  7123 000058AB 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  7124 000058AC 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  7125 000058AD 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  7126                              <2> 
  7127                              <2> ;Mandatory information for VBE 2.0 and above
  7128 000058AE 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  7129 000058B2 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  7130 000058B6 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  7131 000058B8 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  7132                              <2> 
  7133 00005986 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  7134                              <2> VBEEND:
  7135                              <2> [BITS 32]
  7136                              <1> 	%include "source/drivers/input/mouse.asm"
  7137 0000598A 00                  <2> mousedisabled db 0
  7138                              <2> 	
  7139                              <2> 	cursorgui:
  7140 0000598B 803D[1D880000]01    <2> 		cmp byte [mouseon], 1
  7141 00005992 0F8432000000        <2> 		je near mousedaemon
  7142 00005998 803D[388C0000]00    <2> 		cmp byte [guion], 0
  7143 0000599F 0F8409070000        <2> 		je near entdown
  7144                              <2> 	initmouse:
  7145 000059A5 803D[388C0000]00    <2> 		cmp byte [guion], 0
  7146 000059AC 7405                <2> 		je noswmsposinit
  7147 000059AE E845150000          <2> 		call switchmousepos2
  7148                              <2> 	noswmsposinit:
  7149 000059B3 E85D020000          <2> 	  	call PS2SET
  7150 000059B8 E886020000          <2> 		call ACTMOUS
  7151 000059BD C605[1D880000]01    <2> 		mov byte [mouseon],1
  7152 000059C4 E89F020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  7153                              <2> 		;call GETB
  7154                              <2> 				;;If the bytes are mixed up,
  7155                              <2> 				;;remove this line or add another of this line.
  7156                              <2> 	nomouse:
  7157 000059C9 C3                  <2> 		ret
  7158                              <2> 		
  7159                              <2> 	mousedaemon:
  7160 000059CA 803D[1D880000]01    <2> 		cmp byte [mouseon], 1
  7161 000059D1 75D2                <2> 		jne initmouse
  7162 000059D3 E464                <2> 		in al, 64h ; Status
  7163 000059D5 A820                <2> 		test al, 20h ; PS2-Mouse?
  7164 000059D7 0F8502000000        <2> 		jnz near moused
  7165 000059DD F4                  <2> 		hlt
  7166 000059DE C3                  <2> 		ret
  7167                              <2> 	moused:
  7168 000059DF 803D[8A590000]01    <2> 		cmp byte [mousedisabled], 1
  7169 000059E6 74E1                <2> 		je nomouse
  7170 000059E8 E87B020000          <2> 		  call GETB
  7171 000059ED 88C3                <2> 		  mov  bl, al
  7172 000059EF 80E301              <2> 		  and  bl, 1
  7173 000059F2 881D[8D5C0000]      <2> 		  mov  BYTE [LBUTTON], bl
  7174 000059F8 88C3                <2> 		  mov  bl, al
  7175 000059FA 80E302              <2> 		  and  bl, 2
  7176 000059FD D0EB                <2> 		  shr  bl, 1
  7177 000059FF 881D[8E5C0000]      <2> 		  mov  BYTE [RBUTTON], bl
  7178 00005A05 88C3                <2> 		  mov  bl, al
  7179 00005A07 80E304              <2> 		  and  bl, 4
  7180 00005A0A C0EB02              <2> 		  shr  bl, 2
  7181 00005A0D 881D[8F5C0000]      <2> 		  mov  BYTE [MBUTTON], bl
  7182 00005A13 E850020000          <2> 		  call GETB
  7183 00005A18 A2[905C0000]        <2> 		  mov  BYTE [XCOORD], al
  7184 00005A1D E846020000          <2> 		  call GETB
  7185 00005A22 A2[915C0000]        <2> 		  mov  BYTE [YCOORD], al
  7186                              <2> 
  7187                              <2> 	showpixelcursor:
  7188 00005A27 668B15[7C5B0000]    <2> 		mov dx, [mousecursorposition]
  7189 00005A2E 668B0D[7E5B0000]    <2> 		mov cx, [mousecursorposition + 2]
  7190 00005A35 668915[785B0000]    <2> 		mov [lastmouseposition], dx
  7191 00005A3C 66890D[7A5B0000]    <2> 		mov [lastmouseposition + 2], cx
  7192 00005A43 A0[905C0000]        <2> 		mov al, [XCOORD]
  7193 00005A48 3C80                <2> 		cmp al, 128
  7194 00005A4A 730C                <2> 		jae subxcoord
  7195 00005A4C 00C0                <2> 		add al, al
  7196 00005A4E 30E4                <2> 		xor ah, ah
  7197 00005A50 6601C2              <2> 		add dx, ax
  7198 00005A53 E90B000000          <2> 		jmp subxcoorddn
  7199                              <2> 	subxcoord:
  7200 00005A58 00C0                <2> 		add al, al
  7201 00005A5A 30DB                <2> 		xor bl, bl
  7202 00005A5C 28C3                <2> 		sub bl, al
  7203 00005A5E 30FF                <2> 		xor bh, bh
  7204 00005A60 6629DA              <2> 		sub dx, bx
  7205                              <2> 	subxcoorddn:
  7206 00005A63 8A1D[915C0000]      <2> 		mov bl, [YCOORD]
  7207 00005A69 30C0                <2> 		xor al, al
  7208 00005A6B 28D8                <2> 		sub al, bl
  7209 00005A6D 3C80                <2> 		cmp al, 128
  7210 00005A6F 730A                <2> 		jae subycoord
  7211 00005A71 30E4                <2> 		xor ah, ah
  7212 00005A73 6601C1              <2> 		add cx, ax
  7213 00005A76 E909000000          <2> 		jmp subycoorddn
  7214                              <2> 	subycoord:
  7215 00005A7B 30DB                <2> 		xor bl, bl
  7216 00005A7D 28C3                <2> 		sub bl, al
  7217 00005A7F 30FF                <2> 		xor bh, bh
  7218 00005A81 6629D9              <2> 		sub cx, bx
  7219                              <2> 	subycoorddn:
  7220 00005A84 6681FA204E          <2> 		cmp dx, 20000
  7221 00005A89 7603                <2> 		jbe nooriginx2
  7222 00005A8B 6631D2              <2> 		xor dx, dx
  7223                              <2> 	nooriginx2:
  7224 00005A8E 6681F9204E          <2> 		cmp cx, 20000
  7225 00005A93 7603                <2> 		jbe nooriginy2
  7226 00005A95 6631C9              <2> 		xor cx, cx
  7227                              <2> 	nooriginy2:
  7228 00005A98 6681FA0000          <2> 		cmp dx, 0
  7229 00005A9D 7415                <2> 		je nofixxcolumn2
  7230 00005A9F 663B15[86590000]    <2> 		cmp dx, [resolutionx2]
  7231 00005AA6 720C                <2> 		jb nofixxcolumn2
  7232 00005AA8 668B15[86590000]    <2> 		mov dx, [resolutionx2]
  7233 00005AAF 6681EA0200          <2> 		sub dx, 2
  7234                              <2> 	nofixxcolumn2:
  7235 00005AB4 6681F90000          <2> 		cmp cx, 0
  7236 00005AB9 7415                <2> 		je nofixyrow2
  7237 00005ABB 663B0D[9A580000]    <2> 		cmp cx, [resolutiony]
  7238 00005AC2 720C                <2> 		jb nofixyrow2
  7239 00005AC4 668B0D[9A580000]    <2> 		mov cx, [resolutiony]
  7240 00005ACB 6681E90100          <2> 		sub cx, 1
  7241                              <2> 	nofixyrow2:
  7242 00005AD0 668915[7C5B0000]    <2> 		mov [mousecursorposition], dx
  7243 00005AD7 66890D[7E5B0000]    <2> 		mov [mousecursorposition + 2], cx
  7244 00005ADE 803D[388C0000]00    <2> 		cmp byte [guion], 0
  7245 00005AE5 0F8495000000        <2> 		je near termmouse
  7246 00005AEB E8A8130000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  7247 00005AF0 803D[8D5C0000]01    <2> 		cmp byte [LBUTTON], 1
  7248 00005AF7 0F84E3240000        <2> 		je near clickicon
  7249 00005AFD 803D[8E5C0000]01    <2> 		cmp byte [RBUTTON], 1
  7250 00005B04 0F84D6240000        <2> 		je near clickicon
  7251 00005B0A A0[CD7F0000]        <2> 		mov al, [pbutton]
  7252 00005B0F C705[D07F0000]0000- <2> 		mov dword [dragging], 0
  7253 00005B17 0000                <2>
  7254 00005B19 3C00                <2> 		cmp al, 0
  7255 00005B1B 740F                <2> 		je nopreviousbutton
  7256 00005B1D E81E130000          <2> 		call clearmousecursor
  7257 00005B22 E885160000          <2> 		call reloadallgraphics
  7258                              <2> 	windowtermcopyend:
  7259 00005B27 E8CC130000          <2> 		call switchmousepos2
  7260                              <2> 	nopreviousbutton:
  7261 00005B2C 30C0                <2> 		xor al, al
  7262 00005B2E A2[CD7F0000]        <2> 		mov [pbutton], al
  7263 00005B33 A2[34850000]        <2> 		mov [windrag], al
  7264 00005B38 A0[8D5C0000]        <2> 		mov al, [LBUTTON]
  7265 00005B3D A2[CE7F0000]        <2> 		mov [pLBUTTON], al
  7266 00005B42 A0[8E5C0000]        <2> 		mov al, [RBUTTON]
  7267 00005B47 A2[CF7F0000]        <2> 		mov [pRBUTTON], al
  7268 00005B4C 31D2                <2> 		xor edx, edx
  7269 00005B4E 668B15[7C5B0000]    <2> 		mov dx, [mousecursorposition]
  7270 00005B55 668B0D[7E5B0000]    <2> 		mov cx, [mousecursorposition + 2]
  7271 00005B5C 66BB18C7            <2> 		mov bx, 1100011100011000b
  7272 00005B60 66B80100            <2> 		mov ax, 1
  7273 00005B64 C605[CA7F0000]01    <2> 		mov byte [showcursorfonton], 1
  7274 00005B6B E8061D0000          <2> 		call showfontvesa
  7275 00005B70 C605[CA7F0000]00    <2> 		mov byte [showcursorfonton], 0
  7276 00005B77 C3                  <2> 		ret
  7277                              <2> 
  7278 00005B78 00000000            <2> lastmouseposition dw 0,0
  7279 00005B7C 00000000            <2> mousecursorposition dw 0,0	
  7280                              <2> 
  7281                              <2> termmouse:
  7282 00005B80 BE[2EC20300]        <2> 		mov esi, videobuf
  7283 00005B85 31D2                <2> 		xor edx, edx
  7284 00005B87 668B15[785B0000]    <2> 		mov dx, [lastmouseposition]
  7285 00005B8E 668B0D[7A5B0000]    <2> 		mov cx, [lastmouseposition + 2]
  7286 00005B95 66A1[135C0000]      <2> 		mov ax, [cursorcache]
  7287 00005B9B 663D0000            <2> 		cmp ax, 0
  7288 00005B9F 7425                <2> 		je nocopycursorcache
  7289 00005BA1 66C1E104            <2> 		shl cx, 4
  7290 00005BA5 66C1E203            <2> 		shl dx, 3
  7291 00005BA9 01D6                <2> 		add esi, edx
  7292 00005BAB 6631D2              <2> 		xor dx, dx
  7293 00005BAE 8A15[C9250000]      <2> 		mov dl, [charxy]
  7294 00005BB4 6641                <2> 		inc cx
  7295                              <2> termmousecplp1:
  7296 00005BB6 01D6                <2> 		add esi, edx
  7297 00005BB8 6649                <2> 		dec cx
  7298 00005BBA 6681F90000          <2> 		cmp cx, 0
  7299 00005BBF 75F5                <2> 		jne termmousecplp1
  7300 00005BC1 29D6                <2> 		sub esi, edx
  7301 00005BC3 668906              <2> 		mov [esi], ax
  7302                              <2> nocopycursorcache:
  7303 00005BC6 BE[2EC20300]        <2> 		mov esi, videobuf
  7304 00005BCB 31D2                <2> 		xor edx, edx
  7305 00005BCD 668B15[7C5B0000]    <2> 		mov dx, [mousecursorposition]
  7306 00005BD4 668B0D[7E5B0000]    <2> 		mov cx, [mousecursorposition + 2]
  7307 00005BDB 66C1E104            <2> 		shl cx, 4
  7308 00005BDF 66C1E203            <2> 		shl dx, 3
  7309 00005BE3 01D6                <2> 		add esi, edx
  7310 00005BE5 6631D2              <2> 		xor dx, dx
  7311 00005BE8 8A15[C9250000]      <2> 		mov dl, [charxy]
  7312 00005BEE 6641                <2> 		inc cx
  7313                              <2> termmousecplp2:
  7314 00005BF0 01D6                <2> 		add esi, edx
  7315 00005BF2 6649                <2> 		dec cx
  7316 00005BF4 6681F90000          <2> 		cmp cx, 0
  7317 00005BF9 75F5                <2> 		jne termmousecplp2
  7318 00005BFB 29D6                <2> 		sub esi, edx
  7319 00005BFD 668B06              <2> 		mov ax, [esi]
  7320 00005C00 66A3[135C0000]      <2> 		mov [cursorcache], ax
  7321 00005C06 B080                <2> 		mov al, 128
  7322 00005C08 B407                <2> 		mov ah, 7
  7323 00005C0A 668906              <2> 		mov [esi], ax
  7324 00005C0D E88FCCFFFF          <2> 		call termcopy
  7325 00005C12 C3                  <2> 		ret
  7326 00005C13 0000                <2> cursorcache db 0,0
  7327                              <2> 
  7328                              <2> PS2SET:
  7329 00005C15 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7330 00005C17 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7331 00005C19 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7332 00005C1E C3                  <2> ret
  7333                              <2> 
  7334                              <2> CHKPRT:
  7335 00005C1F 66B96400            <2>   mov  cx, 100
  7336                              <2>  .again:
  7337 00005C23 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7338 00005C25 A802                <2>   test al, 2		; Check if input buffer is empty
  7339 00005C27 7402                <2>   je .go
  7340 00005C29 E2F8                <2>   loop .again
  7341                              <2>  .go:
  7342 00005C2B C3                  <2> ret
  7343                              <2> 
  7344                              <2> WMOUS:
  7345 00005C2C B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7346 00005C2E E664                <2>   out  0x64, al		; write to keyboardcontroller
  7347 00005C30 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7348 00005C35 C3                  <2> ret
  7349                              <2> 
  7350                              <2> MBUFFUL:
  7351 00005C36 66B96400            <2>   mov cx, 100
  7352                              <2>  .mn:
  7353 00005C3A E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7354 00005C3C A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7355 00005C3E 7402                <2>   jz  .mnn
  7356 00005C40 E2F8                <2>   loop .mn
  7357                              <2>  .mnn:
  7358 00005C42 C3                  <2> ret
  7359                              <2> 
  7360                              <2> 
  7361                              <2> ACTMOUS:
  7362 00005C43 E8E4FFFFFF          <2>   call WMOUS
  7363 00005C48 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7364 00005C4A E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7365 00005C4C E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7366 00005C51 E801000000          <2>   call CHKMOUS		; check if a byte is available
  7367 00005C56 C3                  <2> ret
  7368                              <2> 
  7369                              <2> CHKMOUS:
  7370 00005C57 B300                <2>   mov  bl, 0
  7371 00005C59 66B96400            <2>   mov cx, 100
  7372                              <2>  .vrd:
  7373 00005C5D E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7374 00005C5F A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7375 00005C61 7504                <2>   jnz .yy
  7376 00005C63 E2F8                <2>   loop .vrd
  7377 00005C65 B301                <2>   mov  bl, 1
  7378                              <2>  .yy:
  7379 00005C67 C3                  <2> ret
  7380                              <2> 
  7381                              <2> GETB:
  7382                              <2>  .cagain:
  7383 00005C68 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7384 00005C6D 08DB                <2>   or bl, bl
  7385 00005C6F 75F7                <2>   jnz .cagain
  7386 00005C71 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7387 00005C73 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7388 00005C75 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7389 00005C7A 6631C0              <2>   xor  ax, ax
  7390 00005C7D E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7391 00005C7F 88C2                <2>   mov  dl, al
  7392 00005C81 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7393 00005C83 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7394 00005C85 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7395 00005C8A 88D0                <2>   mov  al, dl
  7396 00005C8C C3                  <2> ret
  7397                              <2> 
  7398 00005C8D 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7399 00005C8E 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7400 00005C8F 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7401 00005C90 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7402 00005C91 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7403                              <1> %endif
  7404                              <1> %include "source/drivers/sound/pcspkr.asm"
  7405                              <2> ;PC Speaker Drivers
  7406                              <2> PCSpeakerRAW:
  7407 00005C92 60                  <2> 	pusha
  7408                              <2> nosoundrep:
  7409 00005C93 8B35[6B020000]      <2> 	mov esi, [soundpos]
  7410 00005C99 31C9                <2> 	xor ecx, ecx
  7411 00005C9B 668B0D[69020000]    <2> 	mov cx, [soundrepititions]
  7412 00005CA2 6681F90000          <2> 	cmp cx, 0
  7413 00005CA7 0F8548000000        <2> 	jne near donesetpitch
  7414 00005CAD 668B0E              <2> 	mov cx, [esi]
  7415 00005CB0 668B5E02            <2> 	mov bx, [esi + 2]
  7416 00005CB4 66890D[69020000]    <2> 	mov [soundrepititions], cx
  7417 00005CBB 81C604000000        <2> 	add esi, 4
  7418 00005CC1 8935[6B020000]      <2> 	mov [soundpos], esi
  7419 00005CC7 3B35[6F020000]      <2> 	cmp esi, [soundendpos]
  7420 00005CCD 7735                <2> 	ja stopsound
  7421 00005CCF 66813D[69020000]00- <2> 	cmp word [soundrepititions], 0
  7422 00005CD7 00                  <2>
  7423 00005CD8 74B9                <2> 	je nosoundrep
  7424 00005CDA 6681FB0000          <2> 	cmp bx, 0
  7425 00005CDF 740F                <2> 	je nosoundplay
  7426 00005CE1 E840000000          <2> 	call setpitch
  7427 00005CE6 E849000000          <2> 	call startsound
  7428 00005CEB E905000000          <2> 	jmp donesetpitch
  7429                              <2> nosoundplay:
  7430 00005CF0 E846000000          <2> 	call killsound
  7431                              <2> donesetpitch:
  7432 00005CF5 6649                <2> 	dec cx
  7433 00005CF7 66890D[69020000]    <2> 	mov [soundrepititions], cx
  7434 00005CFE 61                  <2> 	popa
  7435 00005CFF E9A4A5FFFF          <2> 	jmp timerinterrupt
  7436                              <2> stopsound:
  7437 00005D04 31C0                <2> 	xor eax, eax
  7438 00005D06 66A3[69020000]      <2> 	mov [soundrepititions], ax
  7439 00005D0C A2[68020000]        <2> 	mov [soundon], al
  7440 00005D11 A3[6B020000]        <2> 	mov [soundpos], eax
  7441 00005D16 A3[6F020000]        <2> 	mov [soundendpos], eax
  7442 00005D1B E81B000000          <2> 	call killsound
  7443 00005D20 61                  <2> 	popa
  7444 00005D21 E982A5FFFF          <2> 	jmp timerinterrupt
  7445                              <2> 
  7446                              <2> 
  7447                              <2> setpitch:
  7448 00005D26 B0B6                <2> 	mov al, 0xB6
  7449 00005D28 E643                <2> 	out 0x43, al
  7450 00005D2A 6689D8              <2> 	mov ax, bx
  7451 00005D2D E642                <2> 	out 0x42, al
  7452 00005D2F 88E0                <2> 	mov al, ah
  7453 00005D31 E642                <2> 	out 0x42, al
  7454 00005D33 C3                  <2> 	ret
  7455                              <2> startsound:
  7456 00005D34 E461                <2> 	in al, 0x61
  7457 00005D36 0C03                <2> 	or al, 3
  7458 00005D38 E661                <2> 	out 0x61, al
  7459 00005D3A C3                  <2> 	ret
  7460                              <2> killsound:
  7461 00005D3B E461                <2> 	in al, 0x61
  7462 00005D3D 24FC                <2> 	and al, 0xFC
  7463 00005D3F E661                <2> 	out 0x61, al
  7464 00005D41 C3                  <2> 	ret
  7465                              <2> 	
  7466                              <1> %ifdef sound.included
  7467                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7468                              <2> ;Sound Blaster Drivers
  7469                              <2> sblaster:
  7470                              <2> .init:
  7471 00005D42 E8D7010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  7472 00005D47 A2[785F0000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  7473 00005D4C 3C00                <2> 		cmp al, 0
  7474 00005D4E 7418                <2> 		je .noinit
  7475 00005D50 B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  7476 00005D52 E8FB010000          <2> 		call WriteDSP
  7477 00005D57 B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  7478 00005D59 E8B1010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  7479 00005D5E BE[695D0000]        <2> 		mov esi, .initmsg
  7480 00005D63 E8E0BFFFFF          <2> 		call print
  7481                              <2> .noinit:
  7482 00005D68 C3                  <2> 		ret
  7483 00005D69 536F756E64626C6173- <2> .initmsg db "Soundblaster Initialized",10,0
  7484 00005D72 74657220496E697469- <2>
  7485 00005D7B 616C697A65640A00    <2>
  7486                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  7487 00005D83 813D[625F0000]0000- <2> 	cmp dword [Length0], 0
  7488 00005D8B 0000                <2>
  7489 00005D8D 0F8462000000        <2> 	je near .done
  7490 00005D93 FF0D[625F0000]      <2> 	dec dword [Length0]
  7491 00005D99 E908000000          <2> 	jmp .notodd
  7492                              <2> .oddlength:
  7493 00005D9E 31C9                <2> 	xor ecx, ecx
  7494 00005DA0 880D[615F0000]      <2> 	mov [OddLength], cl
  7495                              <2> .notodd:
  7496 00005DA6 8B35[685F0000]      <2> 	mov esi, [NextMemLoc]
  7497 00005DAC 31C9                <2> 	xor ecx, ecx
  7498 00005DAE 668B0D[665F0000]    <2> 	mov cx, [Length1]
  7499 00005DB5 D1E9                <2> 	shr ecx, 1
  7500 00005DB7 6641                <2> 	inc cx
  7501 00005DB9 31DB                <2> 	xor ebx, ebx
  7502 00005DBB 668B1D[705F0000]    <2> 	mov bx, [SegLoc]
  7503 00005DC2 6601CB              <2> 	add bx, cx
  7504 00005DC5 66891D[705F0000]    <2> 	mov [SegLoc], bx
  7505 00005DCC 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  7506 00005DD2 8935[6C5F0000]      <2> 	mov [MemLoc], esi
  7507 00005DD8 89C8                <2> 	mov eax, ecx
  7508 00005DDA 01F0                <2> 	add eax, esi
  7509 00005DDC A3[685F0000]        <2> 	mov [NextMemLoc], eax
  7510 00005DE1 E833000000          <2> 	call DMACopy
  7511                              <2> 	;call DMAPlay
  7512 00005DE6 E8E0000000          <2> 	call PlayDSP
  7513 00005DEB 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7514 00005DEF EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7515 00005DF0 E965A5FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  7516                              <2> .done:
  7517 00005DF5 803D[615F0000]01    <2> 	cmp byte [OddLength], 1
  7518 00005DFC 74A0                <2> 	je .oddlength
  7519 00005DFE 31C0                <2> 	xor eax, eax
  7520 00005E00 66A3[665F0000]      <2> 	mov [Length1], ax
  7521 00005E06 66B8D000            <2> 	mov ax, 0xD0
  7522 00005E0A E843010000          <2> 	call WriteDSP
  7523 00005E0F 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7524 00005E13 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7525 00005E14 E941A5FFFF          <2> 	jmp handled2
  7526                              <2> 	
  7527                              <2> DMACopy:
  7528 00005E19 66B80800            <2> 		mov ax, LINEAR_SEL
  7529 00005E1D 8EE0                <2> 		mov fs, ax
  7530 00005E1F C1E902              <2> 		shr ecx, 2
  7531                              <2> .loop:
  7532 00005E22 8B06                <2> 		mov eax, [esi]
  7533 00005E24 648903              <2> 		mov [fs:ebx], eax
  7534 00005E27 81C604000000        <2> 		add esi, 4
  7535 00005E2D 81C304000000        <2> 		add ebx, 4
  7536 00005E33 E2ED                <2> 		loop .loop
  7537 00005E35 66B83000            <2> 		mov ax, NEW_DATA_SEL
  7538 00005E39 8EE0                <2> 		mov fs, ax
  7539 00005E3B C3                  <2> 		ret
  7540                              <2> 		
  7541                              <2> 
  7542                              <2> DMAPlay:    ;uses eax ebx edx
  7543 00005E3C C605[725F0000]00    <2> 		mov	byte [Page1],00h
  7544                              <2> 
  7545 00005E43 B005                <2> 		mov	al,(Channel+4)
  7546 00005E45 66BA0A00            <2> 		mov	dx,0Ah
  7547 00005E49 EE                  <2> 		out	dx,al
  7548 00005E4A 30C0                <2> 		xor	al,al
  7549 00005E4C 66BA0C00            <2> 		mov	dx,0Ch
  7550 00005E50 EE                  <2> 		out	dx,al
  7551 00005E51 B059                <2> 		mov	al,ModeReg
  7552 00005E53 66BA0B00            <2> 		mov	dx,0Bh
  7553 00005E57 EE                  <2> 		out	dx,al
  7554 00005E58 B800000800          <2> 		mov	eax,0x80000
  7555 00005E5D 66BA0200            <2> 		mov	dx,AddPort
  7556 00005E61 EE                  <2> 		out	dx,al
  7557 00005E62 86C4                <2> 		xchg al,ah
  7558 00005E64 EE                  <2> 		out	dx,al
  7559 00005E65 B800000800          <2> 		mov	eax,0x80000
  7560 00005E6A 89C2                <2> 		mov	edx,eax
  7561 00005E6C 2500000100          <2> 		and	eax,65536
  7562 00005E71 7406                <2> 		jz	MemLocN1
  7563 00005E73 FE05[725F0000]      <2> 		inc	byte [Page1]
  7564                              <2> MemLocN1:
  7565 00005E79 89D0                <2> 		mov	eax,edx
  7566 00005E7B 2500000200          <2> 		and	eax,131072
  7567 00005E80 7407                <2> 		jz	MemLocN2
  7568 00005E82 8005[725F0000]02    <2> 		add	byte [Page1],02
  7569                              <2> MemLocN2:
  7570 00005E89 89D0                <2> 		mov	eax,edx
  7571 00005E8B 2500000400          <2> 		and	eax,262144
  7572 00005E90 7407                <2> 		jz	MemLocN3
  7573 00005E92 8005[725F0000]04    <2> 		add	byte [Page1],04
  7574                              <2> MemLocN3:
  7575 00005E99 89D0                <2> 		mov	eax,edx
  7576 00005E9B 2500000800          <2> 		and	eax,524288
  7577 00005EA0 7407                <2> 		jz	MemLocN4
  7578 00005EA2 8005[725F0000]08    <2> 		add	byte [Page1],08
  7579                              <2> MemLocN4:
  7580 00005EA9 66BA8300            <2> 		mov	dx,PgPort
  7581 00005EAD A0[725F0000]        <2> 		mov	al,[Page1]
  7582 00005EB2 EE                  <2> 		out	dx,al
  7583 00005EB3 66BA0300            <2> 		mov	dx,LenPort
  7584 00005EB7 66A1[665F0000]      <2> 		mov	ax,[Length1]
  7585 00005EBD 6648                <2> 		dec ax
  7586 00005EBF EE                  <2> 		out	dx,al
  7587 00005EC0 86C4                <2> 		xchg al,ah
  7588 00005EC2 EE                  <2> 		out	dx,al
  7589 00005EC3 66BA0A00            <2> 		mov	dx,0Ah
  7590 00005EC7 B001                <2> 		mov	al,Channel
  7591 00005EC9 EE                  <2> 		out	dx,al
  7592 00005ECA C3                  <2> 		ret
  7593                              <2> 		
  7594                              <2> PlayDSP:
  7595 00005ECB B040                <2> 		mov	al,40h
  7596 00005ECD E880000000          <2> 		call WriteDSP
  7597 00005ED2 31D2                <2> 		xor	edx,edx
  7598 00005ED4 B840420F00          <2> 		mov	eax,1000000
  7599 00005ED9 8B1D[735F0000]      <2> 		mov	ebx,[Freq]
  7600 00005EDF F7F3                <2> 		div	ebx
  7601 00005EE1 89C3                <2> 		mov	ebx,eax
  7602 00005EE3 B800010000          <2> 		mov	eax,256
  7603 00005EE8 29D8                <2> 		sub	eax,ebx
  7604 00005EEA E863000000          <2> 		call WriteDSP
  7605 00005EEF A0[775F0000]        <2> 		mov	al,[WAVEMode]	;write the mode
  7606 00005EF4 E859000000          <2> 		call WriteDSP
  7607 00005EF9 66A1[665F0000]      <2> 		mov	ax,[Length1]
  7608 00005EFF 66D1E8              <2> 		shr ax, 1
  7609 00005F02 E84B000000          <2> 		call WriteDSP
  7610 00005F07 86C4                <2> 		xchg al,ah
  7611 00005F09 E844000000          <2> 		call WriteDSP
  7612 00005F0E C3                  <2> 		ret
  7613                              <2> 
  7614                              <2> MstrVol:    ;uses ax dx
  7615 00005F0F 6650                <2> 	   push ax
  7616 00005F11 66BA2402            <2> 	   mov	dx,(BasePort+4)
  7617 00005F15 B022                <2> 	   mov	al,22h
  7618 00005F17 EE                  <2> 	   out	dx,al
  7619 00005F18 6658                <2> 	   pop	ax
  7620 00005F1A 6642                <2> 	   inc	dx
  7621 00005F1C EE                  <2> 	   out	dx,al
  7622 00005F1D C3                  <2> 	   ret
  7623                              <2> 	   
  7624                              <2> ResetDSP:   ; uses cx dx
  7625 00005F1E 66BA2602            <2> 			mov	dx,(BasePort+6)
  7626 00005F22 B001                <2> 			mov	al,01
  7627 00005F24 EE                  <2> 			out	dx,al
  7628 00005F25 66B93200            <2> 			mov	cx,50
  7629 00005F29 EC                  <2> WaitIt1:	in	al,dx
  7630 00005F2A E2FD                <2> 			loop WaitIt1
  7631 00005F2C 30C0                <2> 			xor	al,al
  7632 00005F2E EE                  <2> 			out	dx,al
  7633 00005F2F 66B93200            <2> 			mov	cx,50
  7634 00005F33 EC                  <2> WaitIt2:	in	al,dx
  7635 00005F34 E2FD                <2> 			loop WaitIt2
  7636 00005F36 B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  7637 00005F38 66BA2E02            <2> 			mov	dx,(BasePort+14)
  7638 00005F3C EC                  <2> 			in	al,dx
  7639 00005F3D 2480                <2> 			and	al,80h
  7640 00005F3F 3C80                <2> 			cmp	al,80h
  7641 00005F41 750C                <2> 			jne	ResetErr
  7642 00005F43 66BA2A02            <2> 			mov	dx,(BasePort+10)
  7643 00005F47 EC                  <2> 			in	al,dx
  7644 00005F48 3CAA                <2> 			cmp	al,0AAh
  7645 00005F4A 7503                <2> 			jne	ResetErr
  7646 00005F4C B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  7647 00005F4E C3                  <2> 			ret
  7648 00005F4F 30C0                <2> ResetErr:	xor al, al
  7649 00005F51 C3                  <2> 			ret
  7650                              <2> 
  7651                              <2> WriteDSP:   ;uses ax dx
  7652 00005F52 6650                <2> 		push ax
  7653 00005F54 66BA2C02            <2> 		mov	dx,(BasePort+12)
  7654 00005F58 EC                  <2> WaitIt:	in	al,dx
  7655 00005F59 2480                <2> 		and	al,80h
  7656 00005F5B 75FB                <2> 		jnz	WaitIt
  7657 00005F5D 6658                <2> 		pop	ax
  7658 00005F5F EE                  <2> 		out	dx,al
  7659 00005F60 C3                  <2> 		ret
  7660                              <2> 
  7661 00005F61 00                  <2> OddLength db 0
  7662 00005F62 00000000            <2> Length0 dd	0
  7663 00005F66 0000                <2> Length1	dw  0
  7664 00005F68 00000000            <2> NextMemLoc dd 0
  7665 00005F6C 00000000            <2> MemLoc	dd  0
  7666 00005F70 0000                <2> SegLoc  dw 0
  7667 00005F72 00                  <2> Page1	db  0
  7668 00005F73 00000000            <2> Freq	dd	0
  7669 00005F77 14                  <2> WAVEMode db 14h
  7670                              <2> PgPort	equ 83h
  7671                              <2> AddPort	equ 02h
  7672                              <2> LenPort	equ 03h
  7673                              <2> ModeReg	equ 59h
  7674                              <2> Channel	equ 01h
  7675                              <2> BasePort	equ 220h
  7676 00005F78 00                  <2> SoundBlaster	db 0
  7677                              <1> %endif
  7678                              <1> %ifdef io.serial
  7679                              <1> 	%include "source/drivers/input/serial.asm"
  7680                              <1> %else
  7681                              <1> 	%include "source/drivers/input/keyboard.asm"
  7682 00005F79 00                  <2> specialkey db 0
  7683                              <2> ;charregion db 0
  7684                              <2> waitforinput:		;this is basically the idle process
  7685                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  7686                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  7687 00005F7A 6631C0              <2> 	xor ax, ax
  7688 00005F7D A0[C26A0000]        <2> 	mov al, [threadson]
  7689 00005F82 8825[C26A0000]      <2> 	mov [threadson], ah
  7690 00005F88 FB                  <2> 	sti
  7691 00005F89 F4                  <2> 	hlt
  7692 00005F8A A2[C26A0000]        <2> 	mov [threadson], al
  7693 00005F8F 66813D[A7230000]00- <2> 	cmp word [trans], 0
  7694 00005F97 00                  <2>
  7695 00005F98 7401                <2> 	je getkey
  7696 00005F9A C3                  <2> 	ret
  7697                              <2> getkey:
  7698 00005F9B 31C0                <2> 		xor eax, eax
  7699 00005F9D A2[795F0000]        <2> 		mov [specialkey], al
  7700 00005FA2 A3[A3230000]        <2> 		mov [lastkey], eax
  7701 00005FA7 E464                <2> 		in al, 64h ; Status
  7702                              <2> 	%ifdef gui.included
  7703 00005FA9 A820                <2> 		test al, 20h ; PS2-Mouse?
  7704 00005FAB 0F852EFAFFFF        <2> 		jnz near moused
  7705                              <2> 	%endif
  7706 00005FB1 A801                <2> 		test al, 1 
  7707 00005FB3 74C5                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7708                              <2> 	calckey:
  7709 00005FB5 E460                <2> 		in al, 60h
  7710 00005FB7 30E4                <2> 		xor ah, ah
  7711 00005FB9 6689C3              <2> 		mov bx, ax
  7712 00005FBC 66A3[A5230000]      <2> 		mov [lastkey + 2], ax
  7713 00005FC2 BF[51610000]        <2> 		mov edi, scancode
  7714                              <2> 	searchscan: 
  7715 00005FC7 80FB3A              <2> 		cmp bl, 3Ah
  7716 00005FCA 7314                <2> 		jae scanother
  7717 00005FCC C1E004              <2> 		shl eax, 4
  7718 00005FCF 01C7                <2> 		add edi, eax
  7719 00005FD1 668B07              <2> 		mov ax, [edi]
  7720 00005FD4 663D0000            <2> 		cmp ax, 0
  7721 00005FD8 7406                <2> 		je scanother
  7722 00005FDA E9D0000000          <2> 		jmp scanfound
  7723 00005FDF 00                  <2> uppercase db 0
  7724                              <2> scanother:
  7725 00005FE0 6631C0              <2> 		xor ax, ax
  7726 00005FE3 66A3[A3230000]      <2> 		mov [lastkey], ax
  7727 00005FE9 80FBE0              <2> 		cmp bl, 0E0h
  7728 00005FEC 0F8477000000        <2> 		je near getkeyspecial
  7729 00005FF2 803D[795F0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7730 00005FF9 7525                <2> 		jne nospecialkey
  7731 00005FFB 80FB38              <2> 		cmp bl, 38h
  7732 00005FFE 0F849A000000        <2> 		je near alton
  7733 00006004 80FBB8              <2> 		cmp bl, 0B8h
  7734 00006007 0F8499000000        <2> 		je near altoff
  7735 0000600D 80FB1D              <2> 		cmp bl, 1Dh
  7736 00006010 0F8478000000        <2> 		je near ctron
  7737 00006016 80FB9D              <2> 		cmp bl, 9Dh
  7738 00006019 0F8477000000        <2> 		je near ctroff
  7739 0000601F C3                  <2> 		ret
  7740                              <2> nospecialkey:
  7741 00006020 80FB2A              <2> 		cmp bl, 2Ah
  7742 00006023 0F8455000000        <2> 		je near shifton
  7743 00006029 80FB36              <2> 		cmp bl, 36h
  7744 0000602C 0F844C000000        <2> 		je near shifton
  7745 00006032 80FB1C              <2> 		cmp bl, 1Ch
  7746 00006035 0F8473000000        <2> 		je near entdown
  7747 0000603B 80FBAA              <2> 		cmp bl, 0AAh
  7748 0000603E 0F8442000000        <2> 		je near shiftoff
  7749 00006044 80FBB6              <2> 		cmp bl, 0B6h
  7750 00006047 0F8439000000        <2> 		je near shiftoff
  7751 0000604D 80FB3A              <2> 		cmp bl, 3Ah
  7752 00006050 0F84A7000000        <2> 		je near capslock
  7753 00006056 80FB45              <2> 		cmp bl, 0x45
  7754 00006059 0F84AF000000        <2> 		je near numlock
  7755 0000605F 80FB46              <2> 		cmp bl, 0x46
  7756 00006062 0F84BE000000        <2> 		je near scrolllock
  7757 00006068 C3                  <2> 		ret
  7758                              <2> 	getkeyspecial:
  7759 00006069 C605[795F0000]E0    <2> 		mov byte [specialkey], 0xE0
  7760 00006070 E940FFFFFF          <2> 		jmp calckey
  7761                              <2> 	shift:
  7762 00006075 A0[DF5F0000]        <2> 		mov al, [uppercase]
  7763 0000607A 3C01                <2> 		cmp al, 1
  7764 0000607C 7308                <2> 		jae shiftoff
  7765                              <2> 	shifton:
  7766 0000607E C605[DF5F0000]01    <2> 		mov byte [uppercase], 1
  7767 00006085 C3                  <2> 		ret
  7768                              <2> 	shiftoff:
  7769 00006086 C605[DF5F0000]00    <2> 		mov byte [uppercase], 0
  7770 0000608D C3                  <2> 		ret
  7771                              <2> 	ctron:
  7772 0000608E C605[FC600000]01    <2> 		mov byte [ctrkey], 1
  7773 00006095 C3                  <2> 		ret
  7774                              <2> 	ctroff:
  7775 00006096 C605[FC600000]00    <2> 		mov byte [ctrkey], 0
  7776 0000609D C3                  <2> 		ret
  7777                              <2> 	alton:
  7778 0000609E C605[FB600000]01    <2> 		mov byte [altkey], 1
  7779 000060A5 C3                  <2> 		ret
  7780                              <2> 	altoff:
  7781 000060A6 C605[FB600000]00    <2> 		mov byte [altkey], 0
  7782 000060AD C3                  <2> 		ret
  7783                              <2> 	entdown:
  7784 000060AE C3                  <2> 		ret
  7785                              <2> scanfound:
  7786 000060AF 81C708000000        <2> 		add edi, 8
  7787 000060B5 803D[FC600000]01    <2> 		cmp byte [ctrkey], 1
  7788 000060BC 7306                <2> 		jae ctrlin
  7789 000060BE 81EF08000000        <2> 		sub edi, 8
  7790                              <2> 	ctrlin:
  7791 000060C4 81C704000000        <2> 		add edi, 4
  7792 000060CA 803D[FB600000]01    <2> 		cmp byte [altkey], 1
  7793 000060D1 7306                <2> 		jae altin
  7794 000060D3 81EF04000000        <2> 		sub edi, 4
  7795                              <2> 	altin:
  7796 000060D9 81C702000000        <2> 		add edi, 2
  7797 000060DF 803D[DF5F0000]01    <2> 		cmp byte [uppercase], 1
  7798 000060E6 7306                <2> 		jae uppercaseon
  7799 000060E8 81EF02000000        <2> 		sub edi, 2
  7800                              <2> 	uppercaseon:
  7801 000060EE 668B07              <2> 		mov ax,[edi]
  7802 000060F1 66A3[A3230000]      <2> 		mov [lastkey], ax
  7803 000060F7 C3                  <2> 		ret
  7804                              <2> 		
  7805 000060F8 00                  <2> keyboardstatus db 0
  7806 000060F9 00                  <2> numlockstatus db 0
  7807 000060FA 00                  <2> scrolllockstatus db 0
  7808 000060FB 00                  <2> altkey db 0
  7809 000060FC 00                  <2> ctrkey db 0
  7810                              <2> 	capslock:
  7811 000060FD 8035[F8600000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7812 00006104 E835000000          <2> 		call updatekblights
  7813 00006109 E967FFFFFF          <2> 		jmp shift
  7814                              <2> 		
  7815                              <2> 	numlock:
  7816 0000610E 8035[F8600000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7817 00006115 8035[F9600000]01    <2> 		xor byte [numlockstatus], 1
  7818 0000611C E81D000000          <2> 		call updatekblights
  7819 00006121 E975FEFFFF          <2> 		jmp getkey
  7820                              <2> 	
  7821                              <2> 	scrolllock:
  7822 00006126 8035[F8600000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7823 0000612D 8035[FA600000]01    <2> 		xor byte [scrolllockstatus], 1
  7824 00006134 E805000000          <2> 		call updatekblights
  7825 00006139 E95DFEFFFF          <2> 		jmp getkey
  7826                              <2> 		
  7827                              <2> 	updatekblights:
  7828 0000613E B0ED                <2> 		mov al, 0xED
  7829 00006140 66BA6000            <2> 		mov dx, 0x60
  7830 00006144 EE                  <2> 		out dx, al
  7831                              <2> 	chkkbdack:
  7832 00006145 EC                  <2> 		in al, dx
  7833 00006146 3CFA                <2> 		cmp al, 0xFA
  7834 00006148 75FB                <2> 		jne chkkbdack
  7835 0000614A A0[F8600000]        <2> 		mov al, [keyboardstatus]
  7836 0000614F EE                  <2> 		out dx, al
  7837 00006150 C3                  <2> 		ret
  7838                              <2> 		
  7839                              <2> scancode:
  7840                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  7841 00006151 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7842 0000615A 00000000000000      <2>
  7843 00006161 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7844 0000616A 00000000000000      <2>
  7845 00006171 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  7846 0000617A 00000000000000      <2>
  7847 00006181 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  7848 0000618A 00000000000000      <2>
  7849 00006191 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  7850 0000619A 00000000000000      <2>
  7851 000061A1 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  7852 000061AA 00000000000000      <2>
  7853 000061B1 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  7854 000061BA 00000000000000      <2>
  7855 000061C1 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  7856 000061CA 00000000000000      <2>
  7857 000061D1 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  7858 000061DA 00000000000000      <2>
  7859 000061E1 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  7860 000061EA 00000000000000      <2>
  7861 000061F1 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  7862 000061FA 00000000000000      <2>
  7863 00006201 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  7864 0000620A 00000000000000      <2>
  7865 00006211 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  7866 0000621A 00000000000000      <2>
  7867 00006221 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  7868 0000622A 00000000000000      <2>
  7869 00006231 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  7870 0000623A 00000000000000      <2>
  7871 00006241 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7872 0000624A 00000000000000      <2>
  7873 00006251 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  7874 00006259 003A0039041904      <2>
  7875 00006261 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  7876 0000626A 03000046042604      <2>
  7877 00006271 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  7878 0000627A 03950343042304      <2>
  7879 00006281 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  7880 0000628A 03A1033A041A04      <2>
  7881 00006291 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  7882 0000629A 03A40335041504      <2>
  7883 000062A1 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  7884 000062AA 03A5033D041D04      <2>
  7885 000062B1 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  7886 000062BA 03980333041304      <2>
  7887 000062C1 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  7888 000062CA 03990348042804      <2>
  7889 000062D1 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  7890 000062DA 039F0349042904      <2>
  7891 000062E1 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  7892 000062EA 03A00337041704      <2>
  7893 000062F1 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  7894 000062FA 00000045042504      <2>
  7895 00006301 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  7896 0000630A 0000004A042A04      <2>
  7897 00006311 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7898 0000631A 00000000000000      <2>
  7899 00006321 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7900 0000632A 00000000000000      <2>
  7901 00006331 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  7902 0000633A 03910344042404      <2>
  7903 00006341 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  7904 0000634A 03A3034B042B04      <2>
  7905 00006351 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  7906 0000635A 03940332041204      <2>
  7907 00006361 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  7908 0000636A 03A60330041004      <2>
  7909 00006371 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  7910 0000637A 0393033F041F04      <2>
  7911 00006381 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  7912 0000638A 03970340042004      <2>
  7913 00006391 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  7914 0000639A 039E033E041E04      <2>
  7915 000063A1 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  7916 000063AA 039A033B041B04      <2>
  7917 000063B1 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  7918 000063BA 039B0334041404      <2>
  7919 000063C1 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  7920 000063CA 00000036041604      <2>
  7921 000063D1 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  7922 000063DA 0000004D042D04      <2>
  7923 000063E1 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  7924 000063EA 00000051040104      <2>
  7925 000063F1 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7926 000063FA 00000000000000      <2>
  7927 00006401 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  7928 0000640A 0000002F005C00      <2>
  7929 00006411 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  7930 0000641A 0396034F042F04      <2>
  7931 00006421 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  7932 0000642A 03A70347042704      <2>
  7933 00006431 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  7934 0000643A 03A80341042104      <2>
  7935 00006441 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  7936 0000644A 03A9033C041C04      <2>
  7937 00006451 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  7938 0000645A 03920338041804      <2>
  7939 00006461 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  7940 0000646A 039D0342042204      <2>
  7941 00006471 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  7942 0000647A 039C034C042C04      <2>
  7943 00006481 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  7944 0000648A 00000031041104      <2>
  7945 00006491 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  7946 0000649A 0000004E042E04      <2>
  7947 000064A1 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  7948 000064AA 0000002E002C00      <2>
  7949 000064B1 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7950 000064BA 00000000000000      <2>
  7951 000064C1 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7952 000064CA 00000000000000      <2>
  7953 000064D1 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7954 000064DA 00000000000000      <2>
  7955 000064E1 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  7956 000064EA 00000000000000      <2>
  7957                              <2> noscan:
  7958                              <2> 
  7959                              <1> %endif
  7960                              <1> ;drivers will soon be handled intelligently
  7961                              <1> ;every driver's source will be scanned for a .init function
  7962                              <1> ;that will be called and if it returns 0
  7963                              <1> ;the hardware was found and the driver initialized properly
  7964                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7965                              <1> 	%ifdef sound.included
  7966 000064F1 E84CF8FFFF          <1> 		call sblaster.init
  7967                              <1> 	%endif
  7968                              <1> 	%ifdef network.included
  7969 000064F6 E82A230000          <1> 		call network.init
  7970                              <1> 	%endif
  7971 000064FB C3                  <1> 	ret
  7972                              <1> initialize:
  7973                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7974 000064FC E814000000          <1> 	call .pic
  7975                              <1> %ifdef terminal.vsync
  7976                              <1> 	call .rtc
  7977                              <1> %endif
  7978 00006501 E871000000          <1> 	call .pit
  7979 00006506 E893000000          <1> 	call .fpu
  7980 0000650B E8A4000000          <1> 	call .sse
  7981 00006510 31C0                <1> 	xor eax, eax
  7982 00006512 31C9                <1> 	xor ecx, ecx
  7983                              <1> %ifdef io.serial
  7984                              <1> 	call serial.init
  7985                              <1> %endif
  7986 00006514 C3                  <1> 	ret
  7987                              <1> 	
  7988                              <1> .pic:
  7989 00006515 B011                <1> 	mov al, 0x11
  7990 00006517 E620                <1> 	out 0x20, al
  7991 00006519 E6A0                <1> 	out 0xA0, al
  7992 0000651B B040                <1> 	mov al, 0x40	;interrupt for master
  7993 0000651D E621                <1> 	out 0x21, al
  7994 0000651F B048                <1> 	mov al, 0x48	;interrupt for slave
  7995 00006521 E6A1                <1> 	out 0xA1, al
  7996 00006523 B004                <1> 	mov al, 4
  7997 00006525 E621                <1> 	out 0x21, al
  7998 00006527 B002                <1> 	mov al, 2
  7999 00006529 E6A1                <1> 	out 0xA1, al
  8000 0000652B B001                <1> 	mov al, 0x1
  8001 0000652D E621                <1> 	out 0x21, al
  8002 0000652F B001                <1> 	mov al, 0x1
  8003 00006531 E6A1                <1> 	out 0xA1, al
  8004                              <1> 	;masks are set to zero so as not to mask
  8005 00006533 30C0                <1> 	xor al, al
  8006 00006535 E621                <1> 	out 0x21, al
  8007 00006537 30C0                <1> 	xor al, al
  8008 00006539 E6A1                <1> 	out 0xA1, al
  8009 0000653B B020                <1> 	mov al, 0x20
  8010 0000653D E6A0                <1> 	out 0xA0, al
  8011 0000653F E620                <1> 	out 0x20, al
  8012 00006541 C3                  <1> 	ret
  8013                              <1> .rtc:
  8014 00006542 B008                <1> 	mov al, 0x8
  8015 00006544 88C4                <1> 	mov ah, al
  8016 00006546 66BA7000            <1> 	mov dx, 0x70
  8017 0000654A EE                  <1> 	out dx, al
  8018 0000654B 6642                <1> 	inc dx
  8019 0000654D EC                  <1> 	in al, dx
  8020 0000654E 86C4                <1> 	xchg al, ah
  8021 00006550 664A                <1> 	dec dx
  8022 00006552 EE                  <1> 	out dx, al
  8023 00006553 6642                <1> 	inc dx
  8024 00006555 86C4                <1> 	xchg al, ah
  8025 00006557 0C40                <1> 	or al, 0x40
  8026 00006559 EE                  <1> 	out dx, al
  8027                              <1> 	
  8028 0000655A B00A                <1> 	mov al, 0xA
  8029 0000655C 664A                <1> 	dec dx
  8030 0000655E EE                  <1> 	out dx, al
  8031 0000655F 86C4                <1> 	xchg al, ah
  8032 00006561 6642                <1> 	inc dx
  8033 00006563 EC                  <1> 	in al, dx
  8034 00006564 24F0                <1> 	and al, 0xF0
  8035 00006566 0A05[1B030000]      <1> 	or al, [rtcrate]
  8036 0000656C 86C4                <1> 	xchg al, ah
  8037 0000656E 664A                <1> 	dec dx
  8038 00006570 EE                  <1> 	out dx, al
  8039 00006571 6642                <1> 	inc dx
  8040 00006573 86C4                <1> 	xchg al, ah
  8041 00006575 EE                  <1> 	out dx, al
  8042 00006576 C3                  <1> 	ret
  8043                              <1> 	
  8044                              <1> .pit:
  8045                              <1> 	;initialize the PIT
  8046 00006577 66A1[5A020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  8047 0000657D E640                <1> 	out 0x40, al
  8048 0000657F 66C1C008            <1> 	rol ax, 8
  8049 00006583 E640                <1> 	out 0x40, al
  8050                              <1> 	;enable rtc interrupt
  8051 00006585 B00B                <1> 	mov al, 0xB
  8052 00006587 E670                <1> 	out 0x70, al
  8053 00006589 66C1C008            <1> 	rol ax, 8
  8054 0000658D E471                <1> 	in al, 0x71
  8055 0000658F 66C1C008            <1> 	rol ax, 8
  8056 00006593 E670                <1> 	out 0x70, al
  8057 00006595 66C1C008            <1> 	rol ax, 8
  8058 00006599 0C40                <1> 	or al, 0x40
  8059 0000659B E671                <1> 	out 0x71, al
  8060 0000659D C3                  <1> 	ret
  8061                              <1> .fpu:
  8062                              <1> 	;And now to initialize the fpu
  8063 0000659E 0F20E0              <1> 	mov eax, cr4
  8064 000065A1 0D00020000          <1> 	or eax, 0x200
  8065 000065A6 0F22E0              <1> 	mov cr4, eax
  8066 000065A9 B87F0B0000          <1> 	mov eax, 0xB7F
  8067 000065AE 50                  <1> 	push eax
  8068 000065AF D92C24              <1> 	fldcw [esp]
  8069 000065B2 58                  <1> 	pop eax
  8070 000065B3 C3                  <1> 	ret
  8071                              <1> 	
  8072                              <1> .sse:
  8073 000065B4 0F20C0              <1> 	mov eax, cr0
  8074 000065B7 24FB                <1> 	and al, 11111011b
  8075 000065B9 0C02                <1> 	or al, 00000010b
  8076 000065BB 0F22C0              <1> 	mov cr0, eax
  8077 000065BE 0F20E0              <1> 	mov eax, cr4
  8078 000065C1 660D0006            <1> 	or ax, 0000011000000000b
  8079 000065C5 0F22E0              <1> 	mov cr4, eax
  8080 000065C8 C3                  <1> 	ret
  8081                                      %include "source/pci.asm"
  8082 000065C9 00                  <1> pcibus		db 0
  8083 000065CA 00                  <1> pcidevice	db 0
  8084 000065CB 00                  <1> pcifunction	db 0
  8085 000065CC 00                  <1> pciregister	db 0
  8086 000065CD 00                  <1> pcireqtype	db 0
  8087 000065CE 00000000            <1> pcidevid	dd 0
  8088 000065D2 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  8089                              <1> getpcimem:
  8090 000065D6 B002                <1> 	mov al, 2
  8091 000065D8 A2[CD650000]        <1> 	mov [pcireqtype], al
  8092 000065DD E922000000          <1> 	jmp searchpci
  8093                              <1> getpciport:
  8094 000065E2 B001                <1> 	mov al, 1
  8095 000065E4 A2[CD650000]        <1> 	mov [pcireqtype], al
  8096 000065E9 E916000000          <1> 	jmp searchpci
  8097                              <1> pcidump:
  8098 000065EE 31C0                <1> 	xor eax, eax
  8099 000065F0 A2[CB650000]        <1> 	mov [pcifunction], al
  8100 000065F5 A2[C9650000]        <1> 	mov [pcibus], al
  8101 000065FA A2[CA650000]        <1> 	mov [pcidevice], al
  8102 000065FF A2[CD650000]        <1> 	mov [pcireqtype], al
  8103                              <1> searchpci:		;;return in ebx, start X in pciX
  8104 00006604 30C0                <1> 	xor al, al
  8105 00006606 A2[CC650000]        <1> 	mov [pciregister], al
  8106 0000660B E81D020000          <1> 	call getpciaddr
  8107 00006610 BAF80C0000          <1> 	mov edx, 0xCF8
  8108 00006615 EF                  <1> 	out dx, eax	;;request pci config
  8109 00006616 BAFC0C0000          <1> 	mov edx, 0xCFC
  8110 0000661B ED                  <1> 	in eax, dx 	;;read in pci config
  8111 0000661C 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  8112 00006621 0F8237000000        <1> 	jb near checkpcidevice
  8113                              <1> searchpciret:
  8114                              <1> nextpcidevice:
  8115 00006627 30C0                <1> 	xor al, al
  8116 00006629 A2[CB650000]        <1> 	mov [pcifunction], al
  8117 0000662E A0[CA650000]        <1> 	mov al, [pcidevice]
  8118 00006633 3C1F                <1> 	cmp al, 11111b
  8119 00006635 0F8300010000        <1> 	jae near nextpcibus
  8120 0000663B FEC0                <1> 	inc al
  8121 0000663D A2[CA650000]        <1> 	mov [pcidevice], al
  8122 00006642 EBC0                <1> 	jmp searchpci
  8123 00006644 A0[CB650000]        <1> 	mov al, [pcifunction]
  8124 00006649 3C07                <1> 	cmp al, 111b
  8125 0000664B 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  8126 00006651 FEC0                <1> 	inc al
  8127 00006653 A2[CB650000]        <1> 	mov [pcifunction], al
  8128 00006658 EBAA                <1> 	jmp searchpci
  8129 0000665A 00000000            <1> pcitype: db 0,0,0,0
  8130                              <1> checkpcidevice:
  8131 0000665E 31C0                <1> 	xor eax, eax
  8132 00006660 3905[CE650000]      <1> 	cmp [pcidevid], eax
  8133 00006666 0F8430000000        <1> 	je near .good
  8134 0000666C A2[CC650000]        <1> 	mov [pciregister], al	;device id, vendor id
  8135 00006671 E8B7010000          <1> 	call getpciaddr
  8136 00006676 BAF80C0000          <1> 	mov edx, 0xCF8
  8137 0000667B EF                  <1> 	out dx, eax
  8138 0000667C BAFC0C0000          <1> 	mov edx, 0xCFC
  8139 00006681 ED                  <1> 	in eax, dx
  8140 00006682 2305[D2650000]      <1> 	and eax, [pcidevidmask]
  8141 00006688 8B1D[CE650000]      <1> 	mov ebx, [pcidevid]
  8142 0000668E 231D[D2650000]      <1> 	and ebx, [pcidevidmask]
  8143 00006694 39D8                <1> 	cmp eax, ebx
  8144 00006696 0F858BFFFFFF        <1> 	jne near searchpciret
  8145                              <1> .good:
  8146 0000669C 30C0                <1> 	xor al, al
  8147 0000669E 3805[CD650000]      <1> 	cmp [pcireqtype], al
  8148 000066A4 0F842C000000        <1> 	je near dumppcidevice
  8149 000066AA B008                <1> 	mov al, 0x08
  8150 000066AC A2[CC650000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  8151 000066B1 E877010000          <1> 	call getpciaddr
  8152 000066B6 BAF80C0000          <1> 	mov edx, 0xCF8
  8153 000066BB EF                  <1> 	out dx, eax
  8154 000066BC BAFC0C0000          <1> 	mov edx, 0xCFC
  8155 000066C1 ED                  <1> 	in eax, dx
  8156 000066C2 C1C008              <1> 	rol eax, 8
  8157 000066C5 3A05[5A660000]      <1> 	cmp al, [pcitype]
  8158 000066CB 0F84A0000000        <1> 	je near foundpciaddr
  8159 000066D1 E951FFFFFF          <1> 	jmp searchpciret
  8160                              <1> dumppcidevice:
  8161 000066D6 30C0                <1> 	xor al, al
  8162 000066D8 A2[CC650000]        <1> 	mov [pciregister], al
  8163 000066DD E84B010000          <1> 	call getpciaddr
  8164 000066E2 89C1                <1> 	mov ecx, eax
  8165 000066E4 C605[AA310000]05    <1> 	mov byte [firsthexshown], 5
  8166 000066EB E8CFCAFFFF          <1> 	call showhex
  8167                              <1> dumppcidevicelp:
  8168 000066F0 A2[CC650000]        <1> 	mov [pciregister], al
  8169 000066F5 E833010000          <1> 	call getpciaddr
  8170 000066FA BAF80C0000          <1> 	mov edx, 0xCF8
  8171 000066FF EF                  <1> 	out dx, eax
  8172 00006700 BAFC0C0000          <1> 	mov edx, 0xCFC
  8173 00006705 ED                  <1> 	in eax, dx
  8174 00006706 89C1                <1> 	mov ecx, eax
  8175 00006708 A0[CC650000]        <1> 	mov al, [pciregister]
  8176 0000670D 0404                <1> 	add al, 4
  8177 0000670F C605[AA310000]05    <1> 	mov byte [firsthexshown], 5
  8178 00006716 E8A4CAFFFF          <1> 	call showhex
  8179 0000671B 3C3C                <1> 	cmp al, 0x3C
  8180 0000671D 72D1                <1> 	jb dumppcidevicelp
  8181                              <1> dumppcidn:
  8182                              <1> %ifdef io.serial
  8183                              <1> 	mov esi, line
  8184                              <1> 	call print
  8185                              <1> %else
  8186 0000671F 803D[C7250000]00    <1> 	cmp byte [charpos], 0
  8187 00006726 0F84FBFEFFFF        <1> 	je near searchpciret
  8188 0000672C BE[138C0000]        <1> 	mov esi, line
  8189 00006731 E812B6FFFF          <1> 	call print
  8190                              <1> %endif
  8191 00006736 E9ECFEFFFF          <1> 	jmp searchpciret
  8192                              <1> nextpcibus:
  8193 0000673B 30C0                <1> 	xor al, al
  8194 0000673D A2[CA650000]        <1> 	mov [pcidevice], al
  8195 00006742 A0[C9650000]        <1> 	mov al, [pcibus]
  8196 00006747 3C7F                <1> 	cmp al, 1111111b
  8197 00006749 730C                <1> 	jae donesearchpci
  8198 0000674B FEC0                <1> 	inc al
  8199 0000674D A2[C9650000]        <1> 	mov [pcibus], al
  8200 00006752 E9ADFEFFFF          <1> 	jmp searchpci
  8201                              <1> donesearchpci:
  8202 00006757 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  8203 0000675C 31D2                <1> 	xor edx, edx
  8204 0000675E 8815[5A660000]      <1> 	mov [pcitype], dl
  8205 00006764 8915[CE650000]      <1> 	mov [pcidevid], edx
  8206 0000676A 891D[D2650000]      <1> 	mov [pcidevidmask], ebx
  8207 00006770 C3                  <1> 	ret
  8208                              <1> foundpciaddr:
  8209 00006771 B010                <1> 	mov al, 0x10
  8210 00006773 A2[CC650000]        <1> 	mov [pciregister], al
  8211 00006778 803D[CD650000]02    <1> 	cmp byte [pcireqtype], 2
  8212 0000677F 7443                <1> 	je findpcimemaddr
  8213                              <1> findpciioaddr:
  8214 00006781 E8A7000000          <1> 	call getpciaddr
  8215 00006786 BAF80C0000          <1> 	mov edx, 0xCF8
  8216 0000678B EF                  <1> 	out dx, eax
  8217 0000678C BAFC0C0000          <1> 	mov edx, 0xCFC
  8218 00006791 ED                  <1> 	in eax, dx
  8219 00006792 89C3                <1> 	mov ebx, eax
  8220 00006794 81E301000000        <1> 	and ebx, 1
  8221 0000679A 81FB00000000        <1> 	cmp ebx, 0
  8222 000067A0 0F846E000000        <1> 	je near notpciioaddr
  8223 000067A6 2D01000000          <1> 	sub eax, 1
  8224 000067AB 89C2                <1> 	mov edx, eax
  8225 000067AD 31DB                <1> 	xor ebx, ebx
  8226 000067AF 4B                  <1> 	dec ebx
  8227 000067B0 891D[D2650000]      <1> 	mov [pcidevidmask], ebx
  8228 000067B6 43                  <1> 	inc ebx
  8229 000067B7 881D[5A660000]      <1> 	mov [pcitype], bl
  8230 000067BD 891D[CE650000]      <1> 	mov [pcidevid], ebx
  8231 000067C3 C3                  <1> 	ret
  8232                              <1> findpcimemaddr:
  8233 000067C4 E864000000          <1> 	call getpciaddr
  8234 000067C9 BAF80C0000          <1> 	mov edx, 0xCF8
  8235 000067CE EF                  <1> 	out dx, eax
  8236 000067CF BAFC0C0000          <1> 	mov edx, 0xCFC
  8237 000067D4 ED                  <1> 	in eax, dx
  8238 000067D5 89C3                <1> 	mov ebx, eax
  8239 000067D7 81E301000000        <1> 	and ebx, 1
  8240 000067DD 81FB01000000        <1> 	cmp ebx, 1
  8241 000067E3 0F842B000000        <1> 	je near notpciioaddr
  8242 000067E9 C1E804              <1> 	shr eax, 4
  8243 000067EC C1E004              <1> 	shl eax, 4	;remove prefetch and type
  8244 000067EF 89C2                <1> 	mov edx, eax
  8245 000067F1 50                  <1> 	push eax
  8246 000067F2 A1[41020000]        <1> 	mov eax, [basecache]
  8247 000067F7 C1E004              <1> 	shl eax, 4
  8248 000067FA 29C2                <1> 	sub edx, eax
  8249 000067FC 58                  <1> 	pop eax
  8250 000067FD 31DB                <1> 	xor ebx, ebx
  8251 000067FF 4B                  <1> 	dec ebx
  8252 00006800 891D[D2650000]      <1> 	mov [pcidevidmask], ebx
  8253 00006806 43                  <1> 	inc ebx
  8254 00006807 881D[5A660000]      <1> 	mov [pcitype], bl
  8255 0000680D 891D[CE650000]      <1> 	mov [pcidevid], ebx
  8256 00006813 C3                  <1> 	ret
  8257                              <1> notpciioaddr:
  8258 00006814 A0[CC650000]        <1> 	mov al, [pciregister]
  8259 00006819 0404                <1> 	add al, 4
  8260 0000681B 3C28                <1> 	cmp al, 0x28
  8261 0000681D 0F8704FEFFFF        <1> 	ja near searchpciret
  8262 00006823 A2[CC650000]        <1> 	mov [pciregister], al
  8263 00006828 E954FFFFFF          <1> 	jmp findpciioaddr
  8264                              <1> getpciaddr:		;;puts it in eax and ebx
  8265 0000682D 31C0                <1> 			xor eax, eax
  8266 0000682F BB00000080          <1> 			mov ebx, 0x80000000
  8267 00006834 A0[C9650000]        <1> 			mov al, [pcibus]
  8268 00006839 C1E010              <1> 			shl eax, 16
  8269 0000683C 01C3                <1> 			add ebx, eax
  8270 0000683E 31C0                <1> 			xor eax, eax
  8271 00006840 A0[CA650000]        <1> 			mov al, [pcidevice]
  8272 00006845 C1E00B              <1> 			shl eax, 11
  8273 00006848 01C3                <1> 			add ebx, eax
  8274 0000684A 31C0                <1> 			xor eax, eax
  8275 0000684C A0[CB650000]        <1> 			mov al, [pcifunction]
  8276 00006851 C1E008              <1> 			shl eax, 8
  8277 00006854 01C3                <1> 			add ebx, eax
  8278 00006856 31C0                <1> 			xor eax, eax
  8279 00006858 A0[CC650000]        <1> 			mov al, [pciregister]
  8280 0000685D 01C3                <1> 			add ebx, eax
  8281 0000685F 89D8                <1> 			mov eax, ebx
  8282 00006861 C3                  <1> 			ret
  8283                                      %include "source/disk.asm"
  8284                              <1> %ifdef disk.real
  8285                              <1> 	%include "source/drivers/disk/realmode.asm"
  8286                              <2> diskr:
  8287                              <2> 			;read from disk using real mode-it does not work with large files
  8288                              <2> 			;sector count in cl
  8289                              <2> 			;disk number in ch
  8290                              <2> 			;48 bit address with last 32 bits in ebx
  8291                              <2> 			;buffer in esi
  8292                              <2> 			;puts end of buffer in edi and end lba address in edx
  8293 00006862 880D[8F680000]      <2> 	mov [sdlength], cl
  8294 00006868 891D[90680000]      <2> 	mov [sdaddress], ebx
  8295 0000686E 8935[EE690000]      <2> 	mov [oldesireal], esi
  8296 00006874 66BE[9468]          <2> 	mov si, readdiskreal
  8297 00006878 668935[EB0C0000]    <2> 	mov [realmodeptr], si
  8298 0000687F BE[D0680000]        <2> 	mov esi, backfromrealread
  8299 00006884 8935[E70C0000]      <2> 	mov [realmodereturn], esi
  8300 0000688A E941A3FFFF          <2> 	jmp realmode
  8301 0000688F 00                  <2> sdlength db 0
  8302 00006890 00000000            <2> sdaddress dd 0
  8303                              <2> 
  8304                              <2> [BITS 16]
  8305                              <2> readdiskreal:
  8306 00006894 C706[C068]1000      <2> 	mov word [dlen], 0x10
  8307 0000689A C706[C468]0000      <2> 	mov word [daddress], 0
  8308 000068A0 C706[C668]0001      <2> 	mov word [dsegm], 0x100
  8309 000068A6 66891E[C868]        <2> 	mov [dlbaad], ebx
  8310 000068AB 880E[C268]          <2> 	mov [dreadlen], cl
  8311                              <2> ReadHardDisk:
  8312 000068AF BE[C068]            <2> 	mov si, diskaddresspacket
  8313 000068B2 31C0                <2> 	xor ax, ax
  8314 000068B4 B442                <2> 	mov ah, 0x42
  8315 000068B6 8A16[BF68]          <2> 	mov dl, [dnumber]
  8316 000068BA CD13                <2> 	int 0x13
  8317 000068BC 72F1                <2> 	jc ReadHardDisk
  8318 000068BE C3                  <2> 	ret
  8319                              <2> 
  8320 000068BF 80                  <2> dnumber db 0x80
  8321                              <2> diskaddresspacket:
  8322 000068C0 10                  <2> dlen:	db 0x10 ;size of packet
  8323 000068C1 00                  <2> 		db 0
  8324 000068C2 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8325 000068C4 0000                <2> daddress:	dw 0	;address 0
  8326 000068C6 0001                <2> dsegm:		dw 0x100	;segment
  8327                              <2> 		;start with known value for hd
  8328                              <2> dlbaad:
  8329 000068C8 00000000            <2> 	dd 0	;lba address
  8330 000068CC 00000000            <2> 	dd 0
  8331                              <2> [BITS 32]
  8332                              <2> backfromrealread:
  8333 000068D0 8B35[EE690000]      <2> 	mov esi, [oldesireal]
  8334 000068D6 8B1D[90680000]      <2> 	mov ebx, [sdaddress]
  8335 000068DC 31C9                <2> 	xor ecx, ecx
  8336 000068DE 8A0D[8F680000]      <2> 	mov cl, [sdlength]
  8337 000068E4 01CB                <2> 	add ebx, ecx
  8338 000068E6 66B80800            <2> 	mov ax, LINEAR_SEL
  8339 000068EA 8EE0                <2> 	mov fs, ax
  8340 000068EC BF00100000          <2> 	mov edi, 0x1000
  8341 000068F1 B200                <2> 	mov dl, 0
  8342 000068F3 D0E1                <2> 	shl cl, 1
  8343                              <2> copyfromrmodedisk:
  8344 000068F5 648A07              <2> 	mov al, [fs:edi]
  8345 000068F8 8806                <2> 	mov [esi], al
  8346 000068FA 47                  <2> 	inc edi
  8347 000068FB 46                  <2> 	inc esi
  8348 000068FC FECA                <2> 	dec dl
  8349 000068FE 80FA00              <2> 	cmp dl, 0
  8350 00006901 75F2                <2> 	jne copyfromrmodedisk
  8351 00006903 FEC9                <2> 	dec cl
  8352 00006905 B200                <2> 	mov dl, 0
  8353 00006907 80F900              <2> 	cmp cl, 0
  8354 0000690A 75E9                <2> 	jne copyfromrmodedisk
  8355 0000690C 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8356 00006910 8EE0                <2> 	mov fs, ax
  8357 00006912 89F7                <2> 	mov edi, esi
  8358 00006914 8B35[EE690000]      <2> 	mov esi, [oldesireal]
  8359 0000691A 89DA                <2> 	mov edx, ebx
  8360 0000691C 8B1D[90680000]      <2> 	mov ebx, [sdaddress]
  8361 00006922 C3                  <2> 	ret
  8362                              <2> 	
  8363                              <1> %else
  8364                              <1> 	%ifdef disk.protected
  8365                              <1> 		%include "source/drivers/disk/pata.asm"
  8366                              <1> 	%endif
  8367                              <1> %endif
  8368                              <1> %ifdef disk.none
  8369                              <1> loadfile:	xor edx, edx
  8370                              <1> 			cmp byte [edi], '&'
  8371                              <1> 			je .ret
  8372                              <1> 			mov edx, 404	;no files are found except &
  8373                              <1> 		.ret:
  8374                              <1> 			ret
  8375                              <1> %else
  8376                              <1> ;This loads files using the methods in the loaded driver
  8377                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8378                              <1> 			;returns with err code in edx and file end in edi
  8379 00006923 803F00              <1> 	cmp byte [edi], 0
  8380 00006926 0F8448000000        <1> 	je near nofileload
  8381 0000692C 89FA                <1> 	mov edx, edi
  8382 0000692E BB[828E0300]        <1> 	mov ebx, diskfileindex
  8383                              <1> nextnamechar:
  8384 00006933 8A07                <1> 	mov al, [edi]
  8385 00006935 3C26                <1> 	cmp al, '&'
  8386 00006937 7440                <1> 	je nullfile
  8387 00006939 8A23                <1> 	mov ah, [ebx]
  8388 0000693B 47                  <1> 	inc edi
  8389 0000693C 43                  <1> 	inc ebx
  8390 0000693D 88C1                <1> 	mov cl, al
  8391 0000693F 08E1                <1> 	or cl, ah
  8392 00006941 80F900              <1> 	cmp cl, 0
  8393 00006944 744E                <1> 	je equalfilenames
  8394 00006946 80F920              <1> 	cmp cl, ' '
  8395 00006949 7449                <1> 	je equalfilenames
  8396 0000694B 3C2A                <1> 	cmp al, '*'
  8397 0000694D 742B                <1> 	je equalfilenames2
  8398 0000694F 80FC00              <1> 	cmp ah, 0
  8399 00006952 7410                <1> 	je nextfilename
  8400 00006954 3C00                <1> 	cmp al, 0
  8401 00006956 7404                <1> 	je getebxzero
  8402 00006958 38E0                <1> 	cmp al, ah
  8403 0000695A 74D7                <1> 	je nextnamechar
  8404                              <1> getebxzero:
  8405 0000695C 8A23                <1> 	mov ah, [ebx]
  8406 0000695E 43                  <1> 	inc ebx
  8407 0000695F 80FC00              <1> 	cmp ah, 0
  8408 00006962 75F8                <1> 	jne getebxzero
  8409                              <1> nextfilename:
  8410 00006964 81C308000000        <1> 	add ebx, 8		;next descriptor
  8411 0000696A 89D7                <1> 	mov edi, edx
  8412 0000696C 81FB[93900300]      <1> 	cmp ebx, enddiskfileindex
  8413 00006972 72BF                <1> 	jb nextnamechar
  8414                              <1> nofileload:
  8415 00006974 BA94010000          <1> 	mov edx, 404	;indicate not found error
  8416                              <1> nullfile:
  8417 00006979 C3                  <1> 	ret
  8418                              <1> equalfilenames2:
  8419 0000697A 81EB02000000        <1> 	sub ebx, 2
  8420                              <1> eqfilefind:
  8421 00006980 43                  <1> 	inc ebx
  8422 00006981 81FB[93900300]      <1> 	cmp ebx, enddiskfileindex
  8423 00006987 0F83E7FFFFFF        <1> 	jae near nofileload
  8424 0000698D 8A03                <1> 	mov al, [ebx]
  8425 0000698F 3C00                <1> 	cmp al, 0
  8426 00006991 75ED                <1> 	jne eqfilefind
  8427 00006993 43                  <1> 	inc ebx
  8428                              <1> equalfilenames:
  8429 00006994 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8430 00006997 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8431 00006999 031D[3A8C0000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  8432 0000699F 31C9                <1> 	xor ecx, ecx
  8433 000069A1 88C1                <1> 	mov cl, al			;get excess number of sectors
  8434 000069A3 C0E102              <1> 	shl cl, 2
  8435 000069A6 C0E902              <1> 	shr cl, 2			;cut off at 64
  8436 000069A9 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8437 000069AB B500                <1> 	mov ch, 0			;drive 0
  8438 000069AD C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8439                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8440 000069B0 A3[F2690000]        <1> 	mov [filetracks], eax
  8441 000069B5 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8442 000069B7 89DA                <1> 	mov edx, ebx
  8443 000069B9 80F900              <1> 	cmp cl, 0
  8444 000069BC 7405                <1> 	je copytracksforfile
  8445 000069BE E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  8446                              <1> copytracksforfile:
  8447 000069C3 A1[F2690000]        <1> 	mov eax, [filetracks]
  8448 000069C8 3D00000000          <1> 	cmp eax, 0
  8449 000069CD 7419                <1> 	je donecopyfile
  8450 000069CF 48                  <1> 	dec eax
  8451 000069D0 A3[F2690000]        <1> 	mov [filetracks], eax
  8452 000069D5 89D3                <1> 	mov ebx, edx	;get end lba
  8453 000069D7 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8454 000069D9 8A2D[398C0000]      <1> 	mov ch, [DriveNumber]
  8455 000069DF 89FE                <1> 	mov esi, edi	;reset buffer
  8456 000069E1 E87CFEFFFF          <1> 	call diskr
  8457 000069E6 EBDB                <1> 	jmp copytracksforfile
  8458                              <1> donecopyfile:
  8459 000069E8 BA00000000          <1> 	mov edx, 0	;no error
  8460 000069ED C3                  <1> 	ret
  8461                              <1> 
  8462 000069EE 00000000            <1> oldesireal dd 0
  8463 000069F2 00000000            <1> filetracks dd 0
  8464 000069F6 00                  <1> lbad1 db 0
  8465 000069F7 00                  <1> lbad2 db 0
  8466 000069F8 00                  <1> lbad3 db 0
  8467 000069F9 00                  <1> lbad4 db 0
  8468 000069FA 00                  <1> lbad5 db 0
  8469 000069FB 00                  <1> lbad6 db 0
  8470 000069FC 6400                <1> segments dw 100
  8471                              <1> %endif
  8472                                      %include "source/threads.asm"
  8473                              <1> %ifdef threads.included	
  8474                              <1> nwcmdst:
  8475 000069FE 31C0                <1> 	xor eax, eax
  8476 00006A00 BC[34A00300]        <1> 	mov esp, stackend
  8477 00006A05 A2[C26A0000]        <1> 	mov [threadson], al
  8478 00006A0A A3[C36A0000]        <1> 	mov [currentthread], eax
  8479 00006A0F 0504000000          <1> 	add eax, 4
  8480 00006A14 A3[BE6A0000]        <1> 	mov [lastthread], eax
  8481 00006A19 FB                  <1> 	sti
  8482 00006A1A E9C6C2FFFF          <1> 	jmp nwcmd
  8483                              <1> 
  8484                              <1> nomorethreadspace:
  8485 00006A1F BE[356A0000]        <1> 	mov esi, nmts
  8486 00006A24 E81FB3FFFF          <1> 	call print
  8487 00006A29 C605[C26A0000]00    <1> 	mov byte [threadson], 0
  8488 00006A30 E9B0C2FFFF          <1> 	jmp nwcmd
  8489 00006A35 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8490 00006A3E 6572666C6F770A00    <1>
  8491                              <1> 
  8492                              <1> nomorestackspace:
  8493 00006A46 BE[526A0000]        <1> 	mov esi, nmss
  8494 00006A4B E8F8B2FFFF          <1> 	call print
  8495 00006A50 EBAC                <1> 	jmp nwcmdst
  8496 00006A52 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8497 00006A5B 72666C6F770A00      <1>
  8498                              <1> 	
  8499                              <1> threadswitch:
  8500 00006A62 FA                  <1> 	cli
  8501 00006A63 60                  <1> 	pushad
  8502 00006A64 BF[E29C0500]        <1> 	mov edi, threadlist
  8503 00006A69 A1[C36A0000]        <1> 	mov eax, [currentthread]
  8504 00006A6E 40                  <1> 	inc eax
  8505 00006A6F A3[C36A0000]        <1> 	mov [currentthread], eax
  8506 00006A74 6648                <1> 	dec ax
  8507 00006A76 C1E002              <1> 	shl eax, 2
  8508 00006A79 01C7                <1> 	add edi, eax
  8509 00006A7B 8927                <1> 	mov [edi], esp
  8510 00006A7D 81C704000000        <1> 	add edi, 4
  8511 00006A83 81FF[E2AC0500]      <1> 	cmp edi, threadlistend
  8512 00006A89 0F830D000000        <1> 	jae near nookespthread
  8513 00006A8F 8B07                <1> 	mov eax, [edi]
  8514 00006A91 3D00000000          <1> 	cmp eax, 0
  8515 00006A96 0F8519000000        <1> 	jne near okespthread
  8516                              <1> nookespthread:
  8517 00006A9C BF[E29C0500]        <1> 	mov edi, threadlist
  8518 00006AA1 31C0                <1> 	xor eax, eax
  8519 00006AA3 A3[C36A0000]        <1> 	mov [currentthread], eax
  8520 00006AA8 8B07                <1> 	mov eax, [edi]
  8521 00006AAA 3D00000000          <1> 	cmp eax, 0
  8522 00006AAF 0F8449FFFFFF        <1> 	je near nwcmdst
  8523                              <1> okespthread:
  8524 00006AB5 89C4                <1> 	mov esp, eax
  8525 00006AB7 B020                <1> 	mov al, 0x20
  8526 00006AB9 E620                <1> 	out 0x20, al
  8527 00006ABB 61                  <1> 	popad
  8528 00006ABC FB                  <1> 	sti
  8529 00006ABD CF                  <1> 	iret
  8530                              <1> 
  8531                              <1> %endif
  8532 00006ABE 04000000            <1> 	lastthread dd 4
  8533 00006AC2 00                  <1> 	threadson db 0
  8534 00006AC3 00000000            <1> 	currentthread dd 0
  8535                                  %ifdef gui.included
  8536                                      %include "source/gui/gui.asm"
  8537                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8538 00006AC7 31C0                <1> 	xor eax, eax
  8539 00006AC9 31DB                <1> 	xor ebx, ebx
  8540 00006ACB 31C9                <1> 	xor ecx, ecx
  8541 00006ACD 31D2                <1> 	xor edx, edx
  8542 00006ACF E871080000          <1> 	call guisetup
  8543                              <1> guiloop:
  8544 00006AD4 E8B2EEFFFF          <1> 	call cursorgui
  8545                              <1> guistart:
  8546 00006AD9 E8BDF4FFFF          <1> 	call getkey
  8547 00006ADE C605[C67F0000]00    <1> 	mov byte [copygui], 0
  8548 00006AE5 EBF2                <1> 	jmp guistart
  8549                              <1> 
  8550                              <1> %include "source/gui/bmp.asm"
  8551                              <2> showbmp:
  8552 00006AE7 668B06              <2> 	mov ax, [esi]
  8553 00006AEA 663D424D            <2> 	cmp ax, "BM"
  8554 00006AEE 0F85BB000000        <2> 	jne near endedbmp
  8555 00006AF4 8B3D[AE580000]      <2> 	mov edi, [physbaseptr]
  8556 00006AFA 6689D0              <2> 	mov ax, dx
  8557 00006AFD 6689CB              <2> 	mov bx, cx
  8558 00006B00 31C9                <2> 	xor ecx, ecx
  8559 00006B02 31D2                <2> 	xor edx, edx
  8560 00006B04 6689D9              <2> 	mov cx, bx
  8561 00006B07 6689C2              <2> 	mov dx, ax
  8562 00006B0A 01D7                <2> 	add edi, edx
  8563 00006B0C 01D7                <2> 	add edi, edx
  8564 00006B0E 31D2                <2> 	xor edx, edx
  8565 00006B10 668B15[86590000]    <2> 	mov dx, [resolutionx2]
  8566 00006B17 034E16              <2> 	add ecx, [esi + 22]
  8567                              <2> bmplocloop:
  8568 00006B1A 52                  <2> 	push edx
  8569 00006B1B 31C0                <2> 	xor eax, eax
  8570 00006B1D 6689D0              <2> 	mov ax, dx
  8571 00006B20 F7E1                <2> 	mul ecx
  8572 00006B22 5A                  <2> 	pop edx
  8573 00006B23 663B0D[9A580000]    <2> 	cmp cx, [resolutiony]
  8574 00006B2A 7609                <2> 	jbe .nofixy
  8575 00006B2C 31C9                <2> 	xor ecx, ecx
  8576 00006B2E 668B0D[9A580000]    <2> 	mov cx, [resolutiony]
  8577                              <2> .nofixy:
  8578 00006B35 01C7                <2> 	add edi, eax
  8579 00006B37 8B5612              <2> 	mov edx, [esi + 18]
  8580 00006B3A 8B4E16              <2> 	mov ecx, [esi + 22]
  8581 00006B3D 8B460A              <2> 	mov eax, [esi + 10]
  8582 00006B40 8B5E02              <2> 	mov ebx, [esi + 2]
  8583 00006B43 01F3                <2> 	add ebx, esi
  8584 00006B45 891D[B56B0000]      <2> 	mov [bmpend], ebx
  8585 00006B4B 89D3                <2> 	mov ebx, edx
  8586 00006B4D 01C6                <2> 	add esi, eax
  8587                              <2> ldxbmp2:
  8588 00006B4F 31D2                <2> 	xor edx, edx
  8589 00006B51 668B15[98580000]    <2> 	mov dx, [resolutionx]
  8590 00006B58 39D3                <2> 	cmp ebx, edx
  8591 00006B5A 7702                <2> 	ja ldxbmp
  8592 00006B5C 89DA                <2> 	mov edx, ebx
  8593                              <2> ldxbmp:
  8594 00006B5E 668B06              <2> 	mov ax, [esi]
  8595 00006B61 668907              <2> 	mov [edi], ax
  8596 00006B64 81C702000000        <2> 	add edi, 2
  8597 00006B6A 81C602000000        <2> 	add esi, 2
  8598 00006B70 3B35[B56B0000]      <2> 	cmp esi, [bmpend]
  8599 00006B76 7737                <2> 	ja endedbmp
  8600 00006B78 4A                  <2> 	dec edx
  8601 00006B79 81FA00000000        <2> 	cmp edx, 0
  8602 00006B7F 77DD                <2> 	ja ldxbmp
  8603 00006B81 31D2                <2> 	xor edx, edx
  8604 00006B83 668B15[98580000]    <2> 	mov dx, [resolutionx]
  8605 00006B8A 39D3                <2> 	cmp ebx, edx
  8606 00006B8C 7610                <2> 	jbe .notover
  8607                              <2> .over:
  8608 00006B8E 01DE                <2> 	add esi, ebx
  8609 00006B90 01DE                <2> 	add esi, ebx
  8610 00006B92 29D6                <2> 	sub esi, edx
  8611 00006B94 29D6                <2> 	sub esi, edx
  8612 00006B96 01DF                <2> 	add edi, ebx
  8613 00006B98 01DF                <2> 	add edi, ebx
  8614 00006B9A 29D7                <2> 	sub edi, edx
  8615 00006B9C 29D7                <2> 	sub edi, edx
  8616                              <2> .notover:
  8617 00006B9E 29DF                <2> 	sub edi, ebx
  8618 00006BA0 29DF                <2> 	sub edi, ebx
  8619 00006BA2 29D7                <2> 	sub edi, edx
  8620 00006BA4 29D7                <2> 	sub edi, edx
  8621 00006BA6 49                  <2> 	dec ecx
  8622 00006BA7 81F900000000        <2> 	cmp ecx, 0
  8623 00006BAD 77A0                <2> 	ja ldxbmp2
  8624                              <2> endedbmp:
  8625 00006BAF E844030000          <2> 	call switchmousepos2
  8626 00006BB4 C3                  <2> 	ret
  8627                              <2> 	
  8628 00006BB5 00000000            <2> 	bmpend dd 0
  8629                              <1> %include "source/gui/circle.asm"
  8630                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8631 00006BB9 55                  <2> 	push ebp
  8632 00006BBA 663D0000            <2> 	cmp ax, 0
  8633 00006BBE 770A                <2> 	ja .nozerocircle
  8634 00006BC0 E8F61B0000          <2> 	call putpixel	;the easiest circle ever
  8635 00006BC5 E9F7000000          <2> 	jmp .done
  8636                              <2> .nozerocircle:
  8637 00006BCA 6689F5              <2> 	mov bp, si
  8638 00006BCD 6650                <2> 	push ax
  8639 00006BCF E8281C0000          <2> 	call getpixelmem
  8640 00006BD4 31C0                <2> 	xor eax, eax
  8641 00006BD6 6658                <2> 	pop ax
  8642 00006BD8 BE01000000          <2> 	mov esi, 1
  8643 00006BDD 29C6                <2> 	sub esi, eax
  8644 00006BDF 89C1                <2> 	mov ecx, eax
  8645 00006BE1 31C0                <2> 	xor eax, eax
  8646 00006BE3 66A1[86590000]      <2> 	mov ax, [resolutionx2]
  8647 00006BE9 F7E1                <2> 	mul ecx
  8648 00006BEB 50                  <2> 	push eax
  8649 00006BEC 31D2                <2> 	xor edx, edx
  8650 00006BEE 01C7                <2> 	add edi, eax
  8651 00006BF0 66892F              <2> 	mov [edi], bp
  8652 00006BF3 29C7                <2> 	sub edi, eax
  8653 00006BF5 29C7                <2> 	sub edi, eax
  8654 00006BF7 66892F              <2> 	mov [edi], bp
  8655 00006BFA 01C7                <2> 	add edi, eax
  8656 00006BFC D1E1                <2> 	shl ecx, 1
  8657 00006BFE 01CF                <2> 	add edi, ecx
  8658 00006C00 66892F              <2> 	mov [edi], bp
  8659 00006C03 D1E1                <2> 	shl ecx, 1
  8660 00006C05 29CF                <2> 	sub edi, ecx
  8661 00006C07 66892F              <2> 	mov [edi], bp
  8662 00006C0A D1E9                <2> 	shr ecx, 1
  8663 00006C0C 01CF                <2> 	add edi, ecx
  8664 00006C0E D1E9                <2> 	shr ecx, 1
  8665 00006C10 B802000000          <2> 	mov eax, 2
  8666 00006C15 F7E1                <2> 	mul ecx
  8667 00006C17 48                  <2> 	dec eax
  8668 00006C18 F7D0                <2> 	not eax ;make it negative
  8669 00006C1A A3[C76C0000]        <2> 	mov [.ddF_y], eax
  8670 00006C1F 58                  <2> 	pop eax
  8671 00006C20 BB01000000          <2> 	mov ebx, 1
  8672 00006C25 891D[C36C0000]      <2> 	mov [.ddF_x], ebx
  8673 00006C2B 4B                  <2> 	dec ebx
  8674 00006C2C 31D2                <2> 	xor edx, edx
  8675 00006C2E E904000000          <2> 	jmp .lp
  8676                              <2> .lpb:
  8677 00006C33 D1EA                <2> 	shr edx, 1
  8678 00006C35 D1E9                <2> 	shr ecx, 1
  8679                              <2> .lp:	;it starts this with the center in edi
  8680                              <2> 		;color in bp
  8681                              <2> 		;ddF_x in memory
  8682                              <2> 		;x*resolutionx2 in ebx
  8683                              <2> 		;x in edx
  8684                              <2> 		;ddF_y in memory
  8685                              <2> 		;y*resolutionx2 in eax
  8686                              <2> 		;f in esi
  8687                              <2> 		;y in ecx
  8688 00006C37 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8689 00006C3D 7717                <2> 	ja	.noddF_y
  8690 00006C3F 49                  <2> 	dec ecx
  8691 00006C40 2B05[86590000]      <2> 	sub eax, [resolutionx2]
  8692 00006C46 8105[C76C0000]0200- <2> 	add dword [.ddF_y], 2
  8693 00006C4E 0000                <2>
  8694 00006C50 0335[C76C0000]      <2> 	add esi, [.ddF_y]
  8695                              <2> .noddF_y:
  8696 00006C56 42                  <2> 	inc edx
  8697 00006C57 031D[86590000]      <2> 	add ebx, [resolutionx2]
  8698 00006C5D 8105[C36C0000]0200- <2> 	add dword [.ddF_x], 2
  8699 00006C65 0000                <2>
  8700 00006C67 0335[C36C0000]      <2> 	add esi, [.ddF_x]
  8701                              <2> 
  8702 00006C6D D1E2                <2> 	shl edx, 1
  8703 00006C6F D1E1                <2> 	shl ecx, 1
  8704 00006C71 01D7                <2> 	add edi, edx
  8705 00006C73 01C7                <2> 	add edi, eax
  8706 00006C75 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  8707 00006C78 D1E2                <2> 	shl edx, 1
  8708 00006C7A 29D7                <2> 	sub edi, edx
  8709 00006C7C 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8710 00006C7F D1E0                <2> 	shl eax, 1
  8711 00006C81 29C7                <2> 	sub edi, eax
  8712 00006C83 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  8713 00006C86 01D7                <2> 	add edi, edx
  8714 00006C88 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8715 00006C8B D1E8                <2> 	shr eax, 1
  8716 00006C8D D1EA                <2> 	shr edx, 1
  8717 00006C8F 01C7                <2> 	add edi, eax
  8718 00006C91 29D7                <2> 	sub edi, edx
  8719                              <2> 
  8720 00006C93 39D1                <2> 	cmp ecx, edx
  8721 00006C95 749C                <2> 	je .lpb
  8722                              <2> 
  8723 00006C97 01DF                <2> 	add edi, ebx
  8724 00006C99 01CF                <2> 	add edi, ecx
  8725 00006C9B 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8726 00006C9E D1E1                <2> 	shl ecx, 1
  8727 00006CA0 29CF                <2> 	sub edi, ecx
  8728 00006CA2 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8729 00006CA5 D1E3                <2> 	shl ebx, 1
  8730 00006CA7 29DF                <2> 	sub edi, ebx
  8731 00006CA9 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8732 00006CAC 01CF                <2> 	add edi, ecx
  8733 00006CAE 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8734 00006CB1 D1EB                <2> 	shr ebx, 1
  8735 00006CB3 D1E9                <2> 	shr ecx, 1
  8736 00006CB5 01DF                <2> 	add edi, ebx
  8737 00006CB7 29CF                <2> 	sub edi, ecx
  8738 00006CB9 39CA                <2> 	cmp edx, ecx
  8739 00006CBB 0F8272FFFFFF        <2> 	jb .lpb
  8740                              <2> .done:
  8741 00006CC1 5D                  <2> 	pop ebp
  8742 00006CC2 C3                  <2> 	ret
  8743                              <2> 	
  8744 00006CC3 00000000            <2> .ddF_x dd 0
  8745 00006CC7 00000000            <2> .ddF_y dd 0
  8746                              <2> 
  8747                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  8748 00006CCB 55                  <2> 	push ebp
  8749 00006CCC 663D0000            <2> 	cmp ax, 0
  8750 00006CD0 770A                <2> 	ja .nozerocircle
  8751 00006CD2 E8E41A0000          <2> 	call putpixel	;the easiest circle ever
  8752 00006CD7 E95A010000          <2> 	jmp .done
  8753                              <2> .nozerocircle:
  8754 00006CDC 6689F5              <2> 	mov bp, si
  8755 00006CDF 6650                <2> 	push ax
  8756 00006CE1 E8161B0000          <2> 	call getpixelmem
  8757 00006CE6 31C0                <2> 	xor eax, eax
  8758 00006CE8 6658                <2> 	pop ax
  8759 00006CEA BE01000000          <2> 	mov esi, 1
  8760 00006CEF 29C6                <2> 	sub esi, eax
  8761 00006CF1 89C1                <2> 	mov ecx, eax
  8762 00006CF3 31C0                <2> 	xor eax, eax
  8763 00006CF5 66A1[86590000]      <2> 	mov ax, [resolutionx2]
  8764 00006CFB F7E1                <2> 	mul ecx
  8765 00006CFD 50                  <2> 	push eax
  8766 00006CFE 31D2                <2> 	xor edx, edx
  8767 00006D00 01C7                <2> 	add edi, eax
  8768 00006D02 66892F              <2> 	mov [edi], bp
  8769 00006D05 29C7                <2> 	sub edi, eax
  8770 00006D07 29C7                <2> 	sub edi, eax
  8771 00006D09 66892F              <2> 	mov [edi], bp
  8772 00006D0C 01C7                <2> 	add edi, eax
  8773 00006D0E D1E1                <2> 	shl ecx, 1
  8774 00006D10 01CF                <2> 	add edi, ecx
  8775 00006D12 51                  <2> 	push ecx
  8776                              <2> .s0:
  8777 00006D13 66892F              <2> 	mov [edi], bp
  8778 00006D16 81EF02000000        <2> 	sub edi, 2
  8779 00006D1C 49                  <2> 	dec ecx
  8780 00006D1D 81F900000000        <2> 	cmp ecx, 0
  8781 00006D23 75EE                <2> 	jne .s0
  8782 00006D25 66892F              <2> 	mov [edi], bp
  8783 00006D28 59                  <2> 	pop ecx
  8784 00006D29 01CF                <2> 	add edi, ecx
  8785 00006D2B D1E9                <2> 	shr ecx, 1
  8786 00006D2D B802000000          <2> 	mov eax, 2
  8787 00006D32 F7E1                <2> 	mul ecx
  8788 00006D34 48                  <2> 	dec eax
  8789 00006D35 F7D0                <2> 	not eax ;make it negative
  8790 00006D37 A3[3C6E0000]        <2> 	mov [.ddF_y], eax
  8791 00006D3C 58                  <2> 	pop eax
  8792 00006D3D BB01000000          <2> 	mov ebx, 1
  8793 00006D42 891D[386E0000]      <2> 	mov [.ddF_x], ebx
  8794 00006D48 4B                  <2> 	dec ebx
  8795 00006D49 31D2                <2> 	xor edx, edx
  8796 00006D4B E904000000          <2> 	jmp .lp
  8797                              <2> .lpb:
  8798 00006D50 D1EA                <2> 	shr edx, 1
  8799 00006D52 D1E9                <2> 	shr ecx, 1
  8800                              <2> .lp:	;it starts this with the center in edi
  8801                              <2> 		;color in bp
  8802                              <2> 		;ddF_x in memory
  8803                              <2> 		;x*resolutionx2 in ebx
  8804                              <2> 		;x in edx
  8805                              <2> 		;ddF_y in memory
  8806                              <2> 		;y*resolutionx2 in eax
  8807                              <2> 		;f in esi
  8808                              <2> 		;y in ecx
  8809 00006D54 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8810 00006D5A 7717                <2> 	ja	.noddF_y
  8811 00006D5C 49                  <2> 	dec ecx
  8812 00006D5D 2B05[86590000]      <2> 	sub eax, [resolutionx2]
  8813 00006D63 8105[3C6E0000]0200- <2> 	add dword [.ddF_y], 2
  8814 00006D6B 0000                <2>
  8815 00006D6D 0335[3C6E0000]      <2> 	add esi, [.ddF_y]
  8816                              <2> .noddF_y:
  8817 00006D73 42                  <2> 	inc edx
  8818 00006D74 031D[86590000]      <2> 	add ebx, [resolutionx2]
  8819 00006D7A 8105[386E0000]0200- <2> 	add dword [.ddF_x], 2
  8820 00006D82 0000                <2>
  8821 00006D84 0335[386E0000]      <2> 	add esi, [.ddF_x]
  8822                              <2> 
  8823 00006D8A D1E2                <2> 	shl edx, 1
  8824 00006D8C D1E1                <2> 	shl ecx, 1
  8825 00006D8E 52                  <2> 	push edx
  8826 00006D8F 29D7                <2> 	sub edi, edx
  8827 00006D91 01C7                <2> 	add edi, eax
  8828 00006D93 81FA00000000        <2> 	cmp edx, 0
  8829 00006D99 7412                <2> 	je .nos1
  8830                              <2> .s1:
  8831 00006D9B 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8832 00006D9E 81C702000000        <2> 	add edi, 2
  8833 00006DA4 4A                  <2> 	dec edx
  8834 00006DA5 81FA00000000        <2> 	cmp edx, 0
  8835 00006DAB 75EE                <2> 	jne .s1
  8836                              <2> .nos1:
  8837 00006DAD 66892F              <2> 	mov [edi], bp
  8838 00006DB0 5A                  <2> 	pop edx
  8839 00006DB1 52                  <2> 	push edx
  8840 00006DB2 29C7                <2> 	sub edi, eax
  8841 00006DB4 29C7                <2> 	sub edi, eax
  8842 00006DB6 81FA00000000        <2> 	cmp edx, 0
  8843 00006DBC 7412                <2> 	je .nos2
  8844                              <2> .s2:
  8845 00006DBE 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8846 00006DC1 81EF02000000        <2> 	sub edi, 2
  8847 00006DC7 4A                  <2> 	dec edx
  8848 00006DC8 81FA00000000        <2> 	cmp edx, 0
  8849 00006DCE 75EE                <2> 	jne .s2
  8850                              <2> .nos2:
  8851 00006DD0 66892F              <2> 	mov [edi], bp
  8852 00006DD3 5A                  <2> 	pop edx
  8853 00006DD4 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  8854 00006DD6 01D7                <2> 	add edi, edx
  8855                              <2> 
  8856 00006DD8 39D1                <2> 	cmp ecx, edx
  8857 00006DDA 0F8470FFFFFF        <2> 	je .lpb
  8858                              <2> 
  8859 00006DE0 51                  <2> 	push ecx
  8860 00006DE1 01DF                <2> 	add edi, ebx
  8861 00006DE3 29CF                <2> 	sub edi, ecx
  8862 00006DE5 81F900000000        <2> 	cmp ecx, 0
  8863 00006DEB 7412                <2> 	je .nos3
  8864                              <2> .s3:
  8865 00006DED 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8866 00006DF0 81C702000000        <2> 	add edi, 2
  8867 00006DF6 49                  <2> 	dec ecx
  8868 00006DF7 81F900000000        <2> 	cmp ecx, 0
  8869 00006DFD 75EE                <2> 	jne .s3
  8870                              <2> .nos3:
  8871 00006DFF 66892F              <2> 	mov [edi], bp
  8872 00006E02 59                  <2> 	pop ecx
  8873 00006E03 51                  <2> 	push ecx
  8874 00006E04 29DF                <2> 	sub edi, ebx
  8875 00006E06 29DF                <2> 	sub edi, ebx
  8876 00006E08 81F900000000        <2> 	cmp ecx, 0
  8877 00006E0E 7412                <2> 	je .nos4
  8878                              <2> .s4:
  8879 00006E10 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8880 00006E13 81EF02000000        <2> 	sub edi, 2
  8881 00006E19 49                  <2> 	dec ecx
  8882 00006E1A 81F900000000        <2> 	cmp ecx, 0
  8883 00006E20 75EE                <2> 	jne .s4
  8884                              <2> .nos4:
  8885 00006E22 66892F              <2> 	mov [edi], bp
  8886 00006E25 59                  <2> 	pop ecx
  8887 00006E26 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  8888 00006E28 01CF                <2> 	add edi, ecx
  8889                              <2> 
  8890 00006E2A D1EA                <2> 	shr edx, 1
  8891 00006E2C D1E9                <2> 	shr ecx, 1
  8892 00006E2E 39CA                <2> 	cmp edx, ecx
  8893 00006E30 0F821EFFFFFF        <2> 	jb .lp
  8894                              <2> .done:
  8895 00006E36 5D                  <2> 	pop ebp
  8896 00006E37 C3                  <2> 	ret
  8897                              <2> 	
  8898 00006E38 00000000            <2> .ddF_x dd 0
  8899 00006E3C 00000000            <2> .ddF_y dd 0
  8900                              <1> %include "source/gui/cursor.asm"
  8901                              <2> clearmousecursor:
  8902 00006E40 BE[A8710000]        <2> 		mov esi, background
  8903 00006E45 8B3D[AE580000]      <2> 		mov edi, [physbaseptr]
  8904 00006E4B 31D2                <2> 		xor edx, edx
  8905 00006E4D 31C9                <2> 		xor ecx, ecx
  8906 00006E4F 668B15[785B0000]    <2> 		mov dx, [lastmouseposition]
  8907 00006E56 668B0D[7A5B0000]    <2> 		mov cx, [lastmouseposition + 2]
  8908 00006E5D 01D7                <2> 		add edi, edx
  8909 00006E5F 31D2                <2> 		xor edx, edx
  8910 00006E61 668B15[86590000]    <2> 		mov dx, [resolutionx2]
  8911 00006E68 81F900000000        <2> 		cmp ecx, 0
  8912 00006E6E 7408                <2> 		je .nomul
  8913 00006E70 52                  <2> 		push edx
  8914 00006E71 89D0                <2> 		mov eax, edx
  8915 00006E73 F7E1                <2> 		mul ecx
  8916 00006E75 01C7                <2> 		add edi, eax
  8917 00006E77 5A                  <2> 		pop edx
  8918                              <2> .nomul:
  8919                              <2> %ifdef 	gui.background
  8920                              <2> 		cmp dword [backgroundimage], 0
  8921                              <2> 		je .noyclr
  8922                              <2> 		mov esi, [backgroundimage]
  8923                              <2> 		sub edi, [physbaseptr]
  8924                              <2> 		add esi, edi
  8925                              <2> 		add edi, [physbaseptr]
  8926                              <2> .backlp:
  8927                              <2> 		xor ebx, ebx
  8928                              <2> .noyback:
  8929                              <2> 		mov eax, [esi + ebx]
  8930                              <2> 		mov [edi + ebx], eax
  8931                              <2> 		add ebx, 4
  8932                              <2> 		cmp ebx, 16
  8933                              <2> 		jne .noyback
  8934                              <2> 		add edi, edx
  8935                              <2> 		add esi, edx
  8936                              <2> 		inc cx
  8937                              <2> 		cmp cx, 16
  8938                              <2> 		jb .backlp
  8939                              <2> 		ret
  8940                              <2> %endif
  8941                              <2> .noyclr:
  8942 00006E78 668B06              <2> 		mov ax, [esi]
  8943 00006E7B C1C010              <2> 		rol eax, 16
  8944 00006E7E 668B06              <2> 		mov ax, [esi]
  8945 00006E81 8907                <2> 		mov [edi], eax
  8946 00006E83 894704              <2> 		mov [edi + 4], eax
  8947 00006E86 894708              <2> 		mov [edi + 8], eax
  8948 00006E89 89470C              <2> 		mov [edi + 12], eax
  8949 00006E8C 01D7                <2> 		add edi, edx
  8950 00006E8E 6641                <2> 		inc cx
  8951 00006E90 6681F91000          <2> 		cmp cx, 16
  8952 00006E95 72E1                <2> 		jb .noyclr
  8953 00006E97 C3                  <2> 		ret
  8954                              <2> 
  8955                              <2> switchmousepos:		;;switch were the mouse is located
  8956 00006E98 BE[2DC10300]        <2> 		mov esi, mousecolorbuf
  8957 00006E9D 8B3D[AE580000]      <2> 		mov edi, [physbaseptr]
  8958 00006EA3 31D2                <2> 		xor edx, edx
  8959 00006EA5 31C9                <2> 		xor ecx, ecx
  8960 00006EA7 668B15[785B0000]    <2> 		mov dx, [lastmouseposition]
  8961 00006EAE 668B0D[7A5B0000]    <2> 		mov cx, [lastmouseposition + 2]
  8962 00006EB5 01D7                <2> 		add edi, edx
  8963 00006EB7 31D2                <2> 		xor edx, edx
  8964 00006EB9 668B15[86590000]    <2> 		mov dx, [resolutionx2]
  8965 00006EC0 6681F90000          <2> 		cmp cx, 0
  8966 00006EC5 740B                <2> 		je noswmsy
  8967 00006EC7 01D7                <2> swmsy:		add edi, edx
  8968 00006EC9 6649                <2> 		dec cx
  8969 00006ECB 6681F90000          <2> 		cmp cx, 0
  8970 00006ED0 75F5                <2> 		jne swmsy
  8971 00006ED2 8B06                <2> noswmsy:	mov eax, [esi]
  8972 00006ED4 8B5E04              <2> 		mov ebx, [esi + 4]
  8973 00006ED7 8907                <2> 		mov [edi], eax
  8974 00006ED9 895F04              <2> 		mov [edi + 4], ebx
  8975 00006EDC 8B4608              <2> 		mov eax, [esi + 8]
  8976 00006EDF 8B5E0C              <2> 		mov ebx, [esi + 12]
  8977 00006EE2 894708              <2> 		mov [edi + 8], eax
  8978 00006EE5 895F0C              <2> 		mov [edi + 12], ebx
  8979 00006EE8 01D7                <2> 		add edi, edx
  8980 00006EEA 81C610000000        <2> 		add esi, 16
  8981 00006EF0 81FE[2DC20300]      <2> 		cmp esi, mcolorend
  8982 00006EF6 72DA                <2> 		jb noswmsy
  8983                              <2> 		
  8984                              <2> switchmousepos2:
  8985 00006EF8 BE[2DC10300]        <2> 		mov esi, mousecolorbuf
  8986 00006EFD 8B3D[AE580000]      <2> 		mov edi, [physbaseptr]
  8987 00006F03 31D2                <2> 		xor edx, edx
  8988 00006F05 31C9                <2> 		xor ecx, ecx
  8989 00006F07 668B15[7C5B0000]    <2> 		mov dx, [mousecursorposition]
  8990 00006F0E 668B0D[7E5B0000]    <2> 		mov cx, [mousecursorposition + 2]
  8991 00006F15 01D7                <2> 		add edi, edx
  8992 00006F17 31D2                <2> 		xor edx, edx
  8993 00006F19 668B15[86590000]    <2> 		mov dx, [resolutionx2]
  8994 00006F20 6681F90000          <2> 		cmp cx, 0
  8995 00006F25 740B                <2> 		je noswmsy2
  8996 00006F27 01D7                <2> swmsy2:		add edi, edx
  8997 00006F29 6649                <2> 		dec cx
  8998 00006F2B 6681F90000          <2> 		cmp cx, 0
  8999 00006F30 75F5                <2> 		jne swmsy2
  9000 00006F32 8B07                <2> noswmsy2:	mov eax, [edi]
  9001 00006F34 8B5F04              <2> 		mov ebx, [edi + 4]
  9002 00006F37 8906                <2> 		mov [esi], eax
  9003 00006F39 895E04              <2> 		mov [esi + 4], ebx
  9004 00006F3C 8B4708              <2> 		mov eax, [edi + 8]
  9005 00006F3F 8B5F0C              <2> 		mov ebx, [edi + 12]
  9006 00006F42 894608              <2> 		mov [esi + 8], eax
  9007 00006F45 895E0C              <2> 		mov [esi + 12], ebx
  9008 00006F48 01D7                <2> 		add edi, edx
  9009 00006F4A 81C610000000        <2> 		add esi, 16
  9010 00006F50 81FE[2DC20300]      <2> 		cmp esi, mcolorend
  9011 00006F56 72DA                <2> 		jb noswmsy2
  9012 00006F58 C3                  <2> 		ret
  9013                              <2> 		
  9014                              <1> %include "source/gui/icon.asm"
  9015 00006F59 0000                <2> iconcolor dw 0
  9016                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  9017 00006F5B A2[24880000]        <2> 		mov [iconselected], al
  9018 00006F60 8025[24880000]01    <2> 		and byte [iconselected], 1
  9019 00006F67 B401                <2> 		mov ah, 1
  9020 00006F69 E8DF150000          <2> 		call graphicsadd
  9021                              <2> 	showicon2:
  9022 00006F6E 8B3D[AE580000]      <2> 		mov edi, [physbaseptr]
  9023 00006F74 6601D2              <2> 		add dx, dx
  9024 00006F77 663B15[86590000]    <2> 		cmp dx, [resolutionx2]
  9025 00006F7E 720C                <2> 		jb screenxgood
  9026 00006F80 668B15[86590000]    <2> 		mov dx, [resolutionx2]
  9027 00006F87 6681EA4000          <2> 		sub dx, 64
  9028                              <2> 	screenxgood:
  9029 00006F8C 6681F90000          <2> 		cmp cx, 0
  9030 00006F91 742B                <2> 		je noscreenygoodchk
  9031 00006F93 663B0D[9A580000]    <2> 		cmp cx, [resolutiony]
  9032 00006F9A 720C                <2> 		jb screenygood
  9033 00006F9C 668B0D[9A580000]    <2> 		mov cx, [resolutiony]
  9034 00006FA3 6681E92000          <2> 		sub cx, 32
  9035                              <2> 	screenygood:
  9036 00006FA8 50                  <2> 		push eax
  9037 00006FA9 52                  <2> 		push edx
  9038 00006FAA 31C0                <2> 		xor eax, eax
  9039 00006FAC 31DB                <2> 		xor ebx, ebx
  9040 00006FAE 668B1D[86590000]    <2> 		mov bx, [resolutionx2]
  9041 00006FB5 6689C8              <2> 		mov ax, cx
  9042 00006FB8 F7E3                <2> 		mul ebx
  9043 00006FBA 01C7                <2> 		add edi, eax
  9044 00006FBC 5A                  <2> 		pop edx
  9045 00006FBD 58                  <2> 		pop eax
  9046                              <2> 	noscreenygoodchk:
  9047 00006FBE 31DB                <2> 		xor ebx, ebx
  9048 00006FC0 6689D3              <2> 		mov bx, dx
  9049 00006FC3 01DF                <2> 		add edi, ebx
  9050 00006FC5 6631C9              <2> 		xor cx, cx
  9051 00006FC8 668B06              <2> 		mov ax, [esi]
  9052 00006FCB 81C602000000        <2> 		add esi, 2
  9053 00006FD1 66A3[596F0000]      <2> 		mov [iconcolor], ax
  9054                              <2> 	writeicon:
  9055 00006FD7 8B06                <2> 		mov eax, [esi]
  9056 00006FD9 D1C0                <2> 		rol eax, 1
  9057 00006FDB 30C9                <2> 		xor cl, cl
  9058                              <2> 	writeiconline:
  9059 00006FDD B201                <2> 		mov dl, 1
  9060 00006FDF 20C2                <2> 		and dl, al
  9061 00006FE1 3215[24880000]      <2> 		xor dl, [iconselected]
  9062 00006FE7 668B1D[A8710000]    <2> 		mov bx, [background]
  9063 00006FEE 66891F              <2> 		mov [edi], bx
  9064 00006FF1 80FA00              <2> 		cmp dl, 0
  9065 00006FF4 740A                <2> 		je noiconline
  9066 00006FF6 668B15[596F0000]    <2> 		mov dx, [iconcolor]
  9067 00006FFD 668917              <2> 		mov [edi], dx
  9068                              <2> 	noiconline:
  9069 00007000 81C702000000        <2> 		add edi, 2
  9070 00007006 D1C0                <2> 		rol eax, 1
  9071 00007008 FEC1                <2> 		inc cl
  9072 0000700A 80F920              <2> 		cmp cl, 32
  9073 0000700D 72CE                <2> 		jb writeiconline
  9074 0000700F 81C604000000        <2> 		add esi, 4
  9075 00007015 FEC5                <2> 		inc ch
  9076 00007017 31D2                <2> 		xor edx, edx
  9077 00007019 668B15[86590000]    <2> 		mov dx, [resolutionx2]
  9078 00007020 01D7                <2> 		add edi, edx
  9079 00007022 81EF40000000        <2> 		sub edi, 64
  9080 00007028 80FD20              <2> 		cmp ch, 32
  9081 0000702B 72AA                <2> 		jb writeicon
  9082 0000702D 31C0                <2> 		xor eax, eax
  9083 0000702F C3                  <2> 		ret
  9084                              <1> %include "source/gui/line.asm"
  9085                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  9086 00007030 668935[52710000]    <2> 	mov [.color], si
  9087 00007037 C605[54710000]00    <2> 	mov byte [.steep], 0
  9088 0000703E C605[55710000]00    <2> 	mov byte [.yreversed], 0
  9089 00007045 E907000000          <2> 	jmp .notsteep
  9090                              <2> .steeploop:
  9091 0000704A C605[54710000]01    <2> 	mov byte [.steep], 1
  9092                              <2> .notsteep:
  9093 00007051 31FF                <2> 	xor edi, edi
  9094 00007053 31F6                <2> 	xor esi, esi
  9095 00007055 6639DA              <2> 	cmp dx, bx
  9096 00007058 7705                <2> 	ja .noreversex
  9097 0000705A 6687D3              <2> 	xchg dx, bx
  9098 0000705D 6691                <2> 	xchg cx, ax
  9099                              <2> .noreversex:
  9100 0000705F 6689D7              <2> 	mov di, dx
  9101 00007062 6629DF              <2> 	sub di, bx
  9102                              <2> 	
  9103 00007065 6639C1              <2> 	cmp cx, ax
  9104 00007068 720B                <2> 	jb .reversey
  9105 0000706A 6689CE              <2> 	mov si, cx
  9106 0000706D 6629C6              <2> 	sub si, ax
  9107 00007070 E90D000000          <2> 	jmp .normal
  9108                              <2> .reversey:
  9109 00007075 C605[55710000]02    <2> 	mov byte [.yreversed], 2
  9110 0000707C 6689C6              <2> 	mov si, ax
  9111 0000707F 6629CE              <2> 	sub si, cx	
  9112                              <2> .normal:
  9113 00007082 6687CA              <2> 	xchg cx, dx
  9114 00007085 6693                <2> 	xchg ax, bx
  9115 00007087 6639FE              <2> 	cmp si, di
  9116 0000708A 77BE                <2> 	ja .steeploop
  9117 0000708C 6687CA              <2> 	xchg cx, dx
  9118 0000708F 6693                <2> 	xchg ax, bx
  9119                              <2> 	
  9120 00007091 6691                <2> 	xchg ax, cx
  9121 00007093 6687DA              <2> 	xchg bx, dx
  9122 00007096 66893D[58710000]    <2> 	mov [.xdelta], di
  9123 0000709D 668935[5A710000]    <2> 	mov [.ydelta], si
  9124 000070A4 668B35[52710000]    <2> 	mov si, [.color]
  9125 000070AB 66891D[56710000]    <2> 	mov [.endline], bx
  9126 000070B2 6652                <2> 	push dx
  9127 000070B4 6651                <2> 	push cx
  9128 000070B6 6687CA              <2> 	xchg cx, dx
  9129 000070B9 803D[54710000]01    <2> 	cmp byte [.steep], 1
  9130 000070C0 7403                <2> 	je .xchg
  9131 000070C2 6687D1              <2> 	xchg dx, cx
  9132                              <2> .xchg:
  9133 000070C5 E832170000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9134 000070CA 6659                <2> 	pop cx
  9135 000070CC 665A                <2> 	pop dx
  9136 000070CE 31C0                <2> 	xor eax, eax
  9137 000070D0 66A1[58710000]      <2> 	mov ax, [.xdelta]
  9138 000070D6 66D1E8              <2> 	shr ax, 1
  9139 000070D9 8A0D[54710000]      <2> 	mov cl, [.steep]
  9140 000070DF 0A0D[55710000]      <2> 	or cl, [.yreversed]
  9141 000070E5 55                  <2> 	push ebp
  9142 000070E6 668B2D[56710000]    <2> 	mov bp, [.endline]
  9143 000070ED 6629D5              <2> 	sub bp, dx
  9144 000070F0 668B15[5A710000]    <2> 	mov dx, [.ydelta]
  9145                              <2> .lp:
  9146 000070F7 668937              <2> 	mov [edi], si
  9147 000070FA 6639D0              <2> 	cmp ax, dx
  9148 000070FD 7332                <2> 	jae .noaddx
  9149 000070FF F6C102              <2> 	test cl, 2
  9150 00007102 7414                <2> 	jz .nodecy
  9151 00007104 F6C101              <2> 	test cl, 1
  9152 00007107 7509                <2> 	jnz .steepy
  9153 00007109 29DF                <2> 	sub edi, ebx
  9154 0000710B 29DF                <2> 	sub edi, ebx
  9155 0000710D E906000000          <2> 	jmp .nodecy
  9156                              <2> .steepy:
  9157 00007112 81EF04000000        <2> 	sub edi, 4
  9158                              <2> .nodecy:
  9159 00007118 660305[58710000]    <2> 	add ax, [.xdelta]
  9160 0000711F F6C101              <2> 	test cl, 1
  9161 00007122 7507                <2> 	jnz .steepx
  9162 00007124 01DF                <2> 	add edi, ebx
  9163 00007126 E906000000          <2> 	jmp .noaddx
  9164                              <2> .steepx:
  9165 0000712B 81C702000000        <2> 	add edi, 2
  9166                              <2> .noaddx:
  9167 00007131 6629D0              <2> 	sub ax, dx
  9168 00007134 664D                <2> 	dec bp
  9169 00007136 81C702000000        <2> 	add edi, 2
  9170 0000713C F6C101              <2> 	test cl, 1
  9171 0000713F 7408                <2> 	jz .nosteepx
  9172 00007141 81EF02000000        <2> 	sub edi, 2
  9173 00007147 01DF                <2> 	add edi, ebx
  9174                              <2> .nosteepx:
  9175 00007149 6681FD0000          <2> 	cmp bp, 0
  9176 0000714E 75A7                <2> 	jne .lp
  9177                              <2> .done:
  9178 00007150 5D                  <2> 	pop ebp
  9179 00007151 C3                  <2> 	ret
  9180                              <2> 	
  9181 00007152 0000                <2> .color dw 0
  9182 00007154 00                  <2> .steep db 0
  9183 00007155 00                  <2> .yreversed db 0
  9184 00007156 0000                <2> .endline dw 0
  9185 00007158 0000                <2> .xdelta dw 0
  9186 0000715A 0000                <2> .ydelta dw 0
  9187                              <1> %include "source/gui/refresh.asm"
  9188                              <2> guiclear:
  9189 0000715C 8B3D[AE580000]      <2> 	mov edi, [physbaseptr]
  9190 00007162 668B15[98580000]    <2> 	mov dx, [resolutionx]
  9191 00007169 668B0D[9A580000]    <2> 	mov cx, [resolutiony]
  9192 00007170 668B1D[A8710000]    <2> 	mov bx, [background]
  9193 00007177 66891D[AA710000]    <2> 	mov [background + 2], bx
  9194                              <2> %ifdef gui.background
  9195                              <2> 	cmp dword [backgroundimage], 0
  9196                              <2> 	je guiclear.noback
  9197                              <2> 		mov esi, [backgroundimage]
  9198                              <2> 	.lp:
  9199                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  9200                              <2> 		;movdqa [edi], xmm0
  9201                              <2> 		;add esi, 16
  9202                              <2> 		;add edi, 16
  9203                              <2> 		;sub dx, 8
  9204                              <2> 		mov eax, [esi]
  9205                              <2> 		mov [edi], eax
  9206                              <2> 		add esi, 4
  9207                              <2> 		add edi, 4
  9208                              <2> 		sub dx, 2
  9209                              <2> 		cmp dx, 0
  9210                              <2> 		ja .lp
  9211                              <2> 		dec cx
  9212                              <2> 		mov dx, [resolutionx]
  9213                              <2> 		cmp cx, 0
  9214                              <2> 		ja .lp
  9215                              <2> 		ret
  9216                              <2> 	backgroundimage dd 0
  9217                              <2> %endif
  9218                              <2> guiclear.noback:
  9219 0000717E A1[A8710000]        <2> 	mov eax, [background]
  9220                              <2> guiclearloop:
  9221 00007183 8907                <2> 	mov [edi], eax
  9222 00007185 81C704000000        <2> 	add edi, 4
  9223 0000718B 6681EA0200          <2> 	sub dx, 2
  9224 00007190 6681FA0000          <2> 	cmp dx, 0
  9225 00007195 77EC                <2> 	ja guiclearloop
  9226 00007197 6649                <2> 	dec cx
  9227 00007199 668B15[98580000]    <2> 	mov dx, [resolutionx]
  9228 000071A0 6681F90000          <2> 	cmp cx, 0
  9229 000071A5 77DC                <2> 	ja guiclearloop
  9230 000071A7 C3                  <2> 	ret
  9231                              <2> 
  9232 000071A8 CF7B<rept>          <2> background times 2 dw 0111101111001111b
  9233                              <2> 	.original equ 0111101111001111b
  9234                              <2> 
  9235                              <2> reloadallgraphics:
  9236 000071AC BF[2DBF0300]        <2> 		mov edi, graphicstable
  9237                              <2> reloadgraphicsloop:
  9238 000071B1 8B7702              <2> 		mov esi, [edi + 2]
  9239 000071B4 668B5706            <2> 		mov dx, [edi + 6]
  9240 000071B8 668B4F08            <2> 		mov cx, [edi + 8]
  9241 000071BC 668B07              <2> 		mov ax, [edi]
  9242 000071BF 668B5F0A            <2> 		mov bx, [edi + 10]
  9243 000071C3 893D[39850000]      <2> 		mov [grpctblpos], edi
  9244 000071C9 3B3D[D07F0000]      <2> 		cmp edi, [dragging]
  9245 000071CF 741E                <2> 		je loadedgraphic
  9246 000071D1 663D0100            <2> 		cmp ax, 1
  9247 000071D5 0F8436000000        <2> 		je near icongraphic
  9248 000071DB 663D0200            <2> 		cmp ax, 2
  9249 000071DF 0F843C000000        <2> 		je near stringgraphic
  9250 000071E5 663D0300            <2> 		cmp ax, 3
  9251 000071E9 0F8416000000        <2> 		je near windowgraphic
  9252 000071EF 8B3D[39850000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  9253 000071F5 81C710000000        <2> 		add edi, 16
  9254 000071FB 81FF[2DC10300]      <2> 		cmp edi, graphicstableend
  9255 00007201 732E                <2> 		jae donereloadgraphics
  9256 00007203 EBAC                <2> 		jmp reloadgraphicsloop
  9257                              <2> windowgraphic:
  9258 00007205 E827090000          <2> 		call showwindow2
  9259 0000720A E82CACFFFF          <2> 		call cleardouble
  9260 0000720F EBDE                <2> 		jmp loadedgraphic
  9261 00007211 80E301              <2> icongraphic:	and bl, 1
  9262 00007214 881D[24880000]      <2> 		mov [iconselected], bl
  9263 0000721A E84FFDFFFF          <2> 		call showicon2
  9264 0000721F EBCE                <2> 		jmp loadedgraphic
  9265 00007221 80E301              <2> stringgraphic:  and bl, 1
  9266 00007224 881D[CC7F0000]      <2> 		mov [mouseselecton], bl
  9267 0000722A E8CE050000          <2> 		call showstring2
  9268 0000722F EBBE                <2> 		jmp loadedgraphic
  9269                              <2> donereloadgraphics:
  9270 00007231 8B3D[D07F0000]      <2> 		mov edi, [dragging]
  9271 00007237 81FF[2DBF0300]      <2> 		cmp edi, graphicstable
  9272 0000723D 7226                <2> 		jb notcorrectdrag
  9273 0000723F 668B07              <2> 		mov ax, [edi]
  9274 00007242 8B7702              <2> 		mov esi, [edi + 2]
  9275 00007245 668B5706            <2> 		mov dx, [edi + 6]
  9276 00007249 668B4F08            <2> 		mov cx, [edi + 8]
  9277 0000724D 668B5F0A            <2> 		mov bx, [edi + 10]
  9278 00007251 663D0100            <2> 		cmp ax, 1
  9279 00007255 750F                <2> 		jne noticondragging
  9280 00007257 80E301              <2> 		and bl, 1
  9281 0000725A 881D[24880000]      <2> 		mov [iconselected], bl
  9282 00007260 E809FDFFFF          <2> 		call showicon2
  9283                              <2> notcorrectdrag:
  9284 00007265 C3                  <2> 		ret
  9285                              <2> 
  9286                              <2> 	noticondragging:
  9287 00007266 663D0200            <2> 		cmp ax, 2
  9288 0000726A 75F9                <2> 		jne notcorrectdrag
  9289 0000726C 80E301              <2> 		and bl, 1
  9290 0000726F 881D[CC7F0000]      <2> 		mov [mouseselecton], bl
  9291 00007275 E883050000          <2> 		call showstring2
  9292 0000727A EBE9                <2> 		jmp notcorrectdrag
  9293                              <1> %include "source/gui/square.asm"
  9294                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  9295 0000727C 6639D3              <2> 	cmp bx, dx
  9296 0000727F 7303                <2> 	jae .noxchgx
  9297 00007281 6687DA              <2> 	xchg bx, dx
  9298                              <2> .noxchgx:
  9299 00007284 6639C8              <2> 	cmp ax, cx
  9300 00007287 7302                <2> 	jae .noxchgy
  9301 00007289 6691                <2> 	xchg ax, cx
  9302                              <2> .noxchgy:
  9303 0000728B 6650                <2> 	push ax
  9304 0000728D 6653                <2> 	push bx
  9305 0000728F 6652                <2> 	push dx
  9306 00007291 E866150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9307 00007296 31D2                <2> 	xor edx, edx
  9308 00007298 665A                <2> 	pop dx
  9309 0000729A 31DB                <2> 	xor ebx, ebx
  9310 0000729C 665B                <2> 	pop bx
  9311 0000729E 6658                <2> 	pop ax
  9312                              <2> .lp0:
  9313 000072A0 6652                <2> 	push dx
  9314                              <2> .lp:
  9315 000072A2 668937              <2> 	mov [edi], si
  9316 000072A5 81C702000000        <2> 	add edi, 2
  9317 000072AB 6642                <2> 	inc dx
  9318 000072AD 6639DA              <2> 	cmp dx, bx
  9319 000072B0 76F0                <2> 	jbe .lp
  9320 000072B2 665A                <2> 	pop dx
  9321 000072B4 81EF02000000        <2> 	sub edi, 2
  9322 000072BA 29DF                <2> 	sub edi, ebx
  9323 000072BC 29DF                <2> 	sub edi, ebx
  9324 000072BE 01D7                <2> 	add edi, edx
  9325 000072C0 01D7                <2> 	add edi, edx
  9326 000072C2 033D[86590000]      <2> 	add edi, [resolutionx2]
  9327 000072C8 6641                <2> 	inc cx
  9328 000072CA 6639C1              <2> 	cmp cx, ax
  9329 000072CD 7203                <2> 	jb .lp2
  9330 000072CF 74CF                <2> 	je .lp0
  9331 000072D1 C3                  <2> 	ret
  9332                              <2> .lp2:
  9333 000072D2 57                  <2> 	push edi
  9334 000072D3 668937              <2> 	mov [edi], si
  9335 000072D6 29D7                <2> 	sub edi, edx
  9336 000072D8 29D7                <2> 	sub edi, edx
  9337 000072DA 01DF                <2> 	add edi, ebx
  9338 000072DC 01DF                <2> 	add edi, ebx
  9339 000072DE 668937              <2> 	mov [edi], si
  9340 000072E1 5F                  <2> 	pop edi
  9341 000072E2 033D[86590000]      <2> 	add edi, [resolutionx2]
  9342 000072E8 6641                <2> 	inc cx
  9343 000072EA 6639C1              <2> 	cmp cx, ax
  9344 000072ED 72E3                <2> 	jb .lp2
  9345 000072EF EBAF                <2> 	jmp .lp0
  9346                              <2> 
  9347                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  9348 000072F1 6639D3              <2> 	cmp bx, dx
  9349 000072F4 7303                <2> 	jae .noxchgx
  9350 000072F6 6687DA              <2> 	xchg bx, dx
  9351                              <2> .noxchgx:
  9352 000072F9 6639C8              <2> 	cmp ax, cx
  9353 000072FC 7302                <2> 	jae .noxchgy
  9354 000072FE 6691                <2> 	xchg ax, cx
  9355                              <2> .noxchgy:
  9356 00007300 6650                <2> 	push ax
  9357 00007302 6653                <2> 	push bx
  9358 00007304 6652                <2> 	push dx
  9359 00007306 E8F1140000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9360 0000730B 31D2                <2> 	xor edx, edx
  9361 0000730D 665A                <2> 	pop dx
  9362 0000730F 31DB                <2> 	xor ebx, ebx
  9363 00007311 665B                <2> 	pop bx
  9364 00007313 6658                <2> 	pop ax
  9365                              <2> .lp2
  9366 00007315 6652                <2> 	push dx
  9367                              <2> .lp:
  9368 00007317 668937              <2> 	mov [edi], si
  9369 0000731A 81C702000000        <2> 	add edi, 2
  9370 00007320 6642                <2> 	inc dx
  9371 00007322 6639DA              <2> 	cmp dx, bx
  9372 00007325 76F0                <2> 	jbe .lp
  9373 00007327 665A                <2> 	pop dx
  9374 00007329 81EF02000000        <2> 	sub edi, 2
  9375 0000732F 29DF                <2> 	sub edi, ebx
  9376 00007331 29DF                <2> 	sub edi, ebx
  9377 00007333 01D7                <2> 	add edi, edx
  9378 00007335 01D7                <2> 	add edi, edx
  9379 00007337 033D[86590000]      <2> 	add edi, [resolutionx2]
  9380 0000733D 6641                <2> 	inc cx
  9381 0000733F 6639C1              <2> 	cmp cx, ax
  9382 00007342 76D1                <2> 	jbe .lp2
  9383 00007344 C3                  <2> 	ret
  9384                              <1> %include "source/gui/startup.asm"
  9385                              <2> guisetup:
  9386                              <2> 	%ifdef gui.background
  9387                              <2> 	xor ebx, ebx
  9388                              <2> 	mov [backgroundimage], ebx
  9389                              <2> 	%endif
  9390 00007345 E812FEFFFF          <2> 	call guiclear
  9391 0000734A C605[388C0000]01    <2> 	mov byte [guion], 1
  9392 00007351 C605[CC7F0000]00    <2> 	mov byte [mouseselecton], 0
  9393 00007358 31C0                <2> 	xor eax, eax
  9394 0000735A 31DB                <2> 	xor ebx, ebx
  9395 0000735C 31C9                <2> 	xor ecx, ecx
  9396 0000735E 31D2                <2> 	xor edx, edx
  9397                              <2> 	
  9398 00007360 BE[22750000]        <2> 	mov esi, pacmsg
  9399 00007365 30E4                <2> 	xor ah, ah
  9400 00007367 B010                <2> 	mov al, 00010000b
  9401 00007369 31DB                <2> 	xor ebx, ebx
  9402 0000736B 66B99000            <2> 	mov cx, 144
  9403 0000736F 66BA0400            <2> 	mov dx, 4
  9404 00007373 E872040000          <2> 	call showstring
  9405                              <2> 	
  9406 00007378 BE[60750000]        <2> 	mov esi, interneticon
  9407 0000737D 30E4                <2> 	xor ah, ah
  9408 0000737F B010                <2> 	mov al, 00010000b
  9409 00007381 BB[4B740000]        <2> 	mov ebx, noie
  9410 00007386 66B91800            <2> 	mov cx, 24
  9411 0000738A 66BA0400            <2> 	mov dx, 4
  9412 0000738E E8C8FBFFFF          <2> 	call showicon
  9413                              <2> 	
  9414 00007393 BE[E2750000]        <2> 	mov esi, wordicon
  9415 00007398 30E4                <2> 	xor ah, ah
  9416 0000739A B010                <2> 	mov al, 00010000b
  9417 0000739C 31DB                <2> 	xor ebx, ebx
  9418 0000739E 66B91800            <2> 	mov cx, 24
  9419 000073A2 66BA3000            <2> 	mov dx, 48
  9420 000073A6 E8B0FBFFFF          <2> 	call showicon
  9421                              <2> 	
  9422 000073AB BE[64760000]        <2> 	mov esi, pacmanpellet
  9423 000073B0 30E4                <2> 	xor ah, ah
  9424 000073B2 B010                <2> 	mov al, 00010000b
  9425 000073B4 31DB                <2> 	xor ebx, ebx
  9426 000073B6 66B94000            <2> 	mov cx, 64
  9427 000073BA 66BA0400            <2> 	mov dx, 4
  9428 000073BE E898FBFFFF          <2> 	call showicon
  9429                              <2> 	
  9430 000073C3 BE[68770000]        <2> 	mov esi, pacman
  9431 000073C8 30E4                <2> 	xor ah, ah
  9432 000073CA B010                <2> 	mov al, 00010000b
  9433 000073CC BB[34740000]        <2> 	mov ebx, pacmannomnom
  9434 000073D1 66B94000            <2> 	mov cx, 64
  9435 000073D5 66BA3000            <2> 	mov dx, 48
  9436 000073D9 E87DFBFFFF          <2> 	call showicon
  9437                              <2> 	
  9438 000073DE BE[E6760000]        <2> 	mov esi, ghostie
  9439 000073E3 30E4                <2> 	xor ah, ah
  9440 000073E5 B010                <2> 	mov al, 00010000b
  9441 000073E7 BB[1D740000]        <2> 	mov ebx, boo
  9442 000073EC 66B96C00            <2> 	mov cx, 108
  9443 000073F0 66BA0400            <2> 	mov dx, 4
  9444 000073F4 E862FBFFFF          <2> 	call showicon
  9445                              <2> 	
  9446 000073F9 BE[04750000]        <2> 	mov esi, start
  9447 000073FE 668B0D[9A580000]    <2> 	mov cx, [resolutiony]
  9448 00007405 6681E91000          <2> 	sub cx, 16
  9449 0000740A 66BA0200            <2> 	mov dx, 2
  9450 0000740E 30E4                <2> 	xor ah, ah
  9451 00007410 B010                <2> 	mov al, 00010000b
  9452 00007412 BB[C0740000]        <2> 	mov ebx, winblows
  9453 00007417 E8CE030000          <2> 	call showstring
  9454                              <2> 
  9455                              <2> %ifdef gui.time	
  9456                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9457                              <2> %endif
  9458 0000741C C3                  <2> 	ret
  9459                              <2> 
  9460                              <2> 	boo:
  9461 0000741D BE[1D750000]        <2> 		mov esi, boomsg
  9462 00007422 66BA6400            <2> 		mov dx, 100
  9463 00007426 66B94001            <2> 		mov cx, 320
  9464 0000742A 31DB                <2> 		xor ebx, ebx
  9465 0000742C 6631C0              <2> 		xor ax, ax
  9466 0000742F E9B6030000          <2> 		jmp showstring
  9467                              <2> 
  9468                              <2> 	pacmannomnom:
  9469 00007434 BE[3B750000]        <2> 		mov esi, pacnom
  9470 00007439 66BA8200            <2> 		mov dx, 130
  9471 0000743D 66B93C00            <2> 		mov cx, 60
  9472 00007441 31DB                <2> 		xor ebx, ebx
  9473 00007443 6631C0              <2> 		xor ax, ax
  9474 00007446 E99F030000          <2> 		jmp showstring	
  9475                              <2> 	
  9476                              <2> 	noie:
  9477 0000744B 66C705[4A750000]80- <2> 		mov word [termwindow], 640
  9478 00007453 02                  <2>
  9479 00007454 66C705[4C750000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9480 0000745C 01                  <2>
  9481 0000745D BE[4A750000]        <2> 		mov esi, termwindow
  9482 00007462 66BA1000            <2> 		mov dx, 16
  9483 00007466 66B91000            <2> 		mov cx, 16
  9484 0000746A 31DB                <2> 		xor ebx, ebx
  9485 0000746C 6631C0              <2> 		xor ax, ax
  9486 0000746F E803060000          <2> 		call showwindow
  9487 00007474 E9A7B6FFFF          <2> 		jmp os
  9488                              <2> 
  9489                              <2> 	gotomenuboot:
  9490 00007479 31D2                <2> 		xor edx, edx
  9491 0000747B 31C9                <2> 		xor ecx, ecx
  9492 0000747D 668B15[98580000]    <2> 		mov dx, [resolutionx]
  9493 00007484 668B0D[9A580000]    <2> 		mov cx, [resolutiony]
  9494 0000748B 66C1E904            <2> 		shr cx, 4
  9495 0000748F 6681E90100          <2> 		sub cx, 1
  9496 00007494 66C1E104            <2> 		shl cx, 4
  9497 00007498 668915[4A750000]    <2> 		mov [termwindow], dx
  9498 0000749F 66890D[4C750000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9499 000074A6 BE[4A750000]        <2> 		mov esi, termwindow
  9500 000074AB 6631D2              <2> 		xor dx, dx
  9501 000074AE 6631C9              <2> 		xor cx, cx
  9502 000074B1 31DB                <2> 		xor ebx, ebx
  9503 000074B3 6631C0              <2> 		xor ax, ax
  9504 000074B6 E8BC050000          <2> 		call showwindow
  9505 000074BB E960B6FFFF          <2> 		jmp os
  9506                              <2> 
  9507                              <2> 	winblows:
  9508 000074C0 BE[13750000]        <2> 		mov esi, turnoffmsg
  9509 000074C5 BB[FA530000]        <2> 		mov ebx, turnoff
  9510 000074CA 668B0D[9A580000]    <2> 		mov cx, [resolutiony]
  9511 000074D1 6681E92000          <2> 		sub cx, 32
  9512 000074D6 6631D2              <2> 		xor dx, dx
  9513 000074D9 30E4                <2> 		xor ah, ah
  9514 000074DB B010                <2> 		mov al, 00010000b
  9515 000074DD E808030000          <2> 		call showstring
  9516 000074E2 BE[0A750000]        <2> 		mov esi, gotomenu
  9517 000074E7 668B0D[9A580000]    <2> 		mov cx, [resolutiony]
  9518 000074EE 6681E93000          <2> 		sub cx, 48
  9519 000074F3 6631D2              <2> 		xor dx, dx
  9520 000074F6 30E4                <2> 		xor ah, ah
  9521 000074F8 B010                <2> 		mov al, 00010000b
  9522 000074FA BB[79740000]        <2> 		mov ebx, gotomenuboot
  9523 000074FF E9E6020000          <2> 		jmp showstring
  9524                              <2> 		
  9525                              <2> 
  9526 00007504 737461727400        <2> 	start	db "start",0
  9527 0000750A 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9528 00007513 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9529 0000751C 00                  <2>
  9530 0000751D 426F6F2100          <2> 	boomsg db "Boo!",0
  9531 00007522 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9532 0000752B 73206561737920746F- <2>
  9533 00007534 20647261772E00      <2>
  9534 0000753B 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9535 00007544 6D206E6F6D00        <2>
  9536                              <2> 
  9537 0000754A 20035802            <2> 	termwindow:	dw 800,600	;window size
  9538 0000754E FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9539 00007552 [2EC20300]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9540 00007556 [76970400]          <2>
  9541 0000755A 534855536800        <2> 	termmsg:	db "SHUSh",0	;;window title
  9542                              <2> 	
  9543 0000755A <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9544 0000755A <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9545 0000755A <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9546 0000755A <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9547 0000755A <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9548                              <2> 
  9549                              <2> %ifdef gui.time
  9550                              <2> guitime:
  9551                              <2> 		call time	;get rtc in timeshow & dateshow
  9552                              <2> 		xor ebx, ebx
  9553                              <2> 		mov dx, [resolutionx2]
  9554                              <2> 		xor cx, cx
  9555                              <2> 		sub dx, 304
  9556                              <2> 		mov esi, dateshow
  9557                              <2> 		mov al, 00010001b
  9558                              <2> 		call showstring
  9559                              <2> 		mov esi, timeshow
  9560                              <2> 		xor ebx, ebx
  9561                              <2> 		mov al, 00010001b
  9562                              <2> 		call showstring
  9563                              <2> 		ret
  9564                              <2> %endif
  9565                              <1> %include "source/gui/text.asm"
  9566                              <2> 	showstring:
  9567 000077EA A2[CC7F0000]        <2> 		mov [mouseselecton], al
  9568 000077EF 8025[CC7F0000]01    <2> 		and byte [mouseselecton], 1
  9569 000077F6 B402                <2> 		mov ah, 2
  9570 000077F8 E8500D0000          <2> 		call graphicsadd
  9571                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9572 000077FD 30E4                <2> 		xor ah, ah
  9573 000077FF 8A06                <2> 		mov al, [esi]
  9574 00007801 3CC0                <2> 		cmp al, 0xC0
  9575 00007803 7234                <2> 		jb .doneutf
  9576 00007805 3CE0                <2> 		cmp al, 0xE0
  9577 00007807 721D                <2> 		jb .two
  9578 00007809 46                  <2> 		inc esi
  9579 0000780A 668B1E              <2> 		mov bx, [esi]
  9580 0000780D 46                  <2> 		inc esi
  9581 0000780E C0E004              <2> 		shl al, 4
  9582 00007811 66C1E302            <2> 		shl bx, 2
  9583 00007815 C0EF02              <2> 		shr bh, 2
  9584 00007818 66C1EB02            <2> 		shr bx, 2
  9585 0000781C 08C7                <2> 		or bh, al
  9586 0000781E 6689D8              <2> 		mov ax, bx
  9587 00007821 E913000000          <2> 		jmp .doneutf
  9588                              <2> 	.two:
  9589 00007826 8A3E                <2> 		mov bh, [esi]
  9590 00007828 46                  <2> 		inc esi
  9591 00007829 8A1E                <2> 		mov bl, [esi]
  9592 0000782B 66C1E302            <2> 		shl bx, 2
  9593 0000782F C0EF02              <2> 		shr bh, 2
  9594 00007832 66C1EB02            <2> 		shr bx, 2
  9595 00007836 6689D8              <2> 		mov ax, bx
  9596                              <2> 	.doneutf:
  9597 00007839 3C00                <2> 		cmp al, 0
  9598 0000783B 7420                <2> 		je doneshowstring
  9599 0000783D 46                  <2> 		inc esi
  9600 0000783E 3CFF                <2> 		cmp al, 255
  9601 00007840 74BB                <2> 		je showstring2
  9602 00007842 56                  <2> 		push esi
  9603 00007843 668B1D[65780000]    <2> 		mov bx, [colorfont2]
  9604 0000784A E827000000          <2> 		call showfontvesa
  9605 0000784F 663D0A00            <2> 		cmp ax, 10
  9606 00007853 7405                <2> 		je noproceedshst
  9607 00007855 6681C20800          <2> 		add dx, 8
  9608                              <2> 	noproceedshst:
  9609 0000785A 5E                  <2> 		pop esi
  9610 0000785B EBA0                <2> 		jmp showstring2
  9611                              <2> 	doneshowstring:
  9612 0000785D C605[CC7F0000]00    <2> 		mov byte [mouseselecton], 0
  9613 00007864 C3                  <2> 		ret
  9614                              <2> 
  9615 00007865 FFFF                <2> colorfont2 dw 0xFFFF
  9616 00007867 00                  <2> colorcache db 0
  9617                              <2> 
  9618 00007868 02                  <2> resolutionbytes db 2
  9619 00007869 0000                <2> posxvesa dw 0
  9620 0000786B 0000                <2> posyvesa dw 0
  9621 0000786D FFFF                <2> colorfont dw 0xFFFF
  9622                              <2> savefontvesa:		;same rules as showfontvesa
  9623 0000786F C605[CB7F0000]01    <2> 	mov byte [savefonton], 1
  9624                              <2> showfontvesa:		;position in (dx,cx), color in bx, char in ax
  9625 00007876 663DFF00            <2> 	cmp ax, 255
  9626 0000787A 7501                <2> 	jne nostopshowfont
  9627 0000787C C3                  <2> 	ret
  9628                              <2> nostopshowfont:
  9629 0000787D 55                  <2> 	push ebp
  9630 0000787E 66890D[6B780000]    <2> 	mov [posyvesa], cx
  9631 00007885 663D0A00            <2> 	cmp ax, 10
  9632 00007889 0F8424000000        <2> 	je near goodvesafontx
  9633 0000788F 31C9                <2> 	xor ecx, ecx
  9634 00007891 668B0D[86590000]    <2> 	mov cx, [resolutionx2]
  9635 00007898 6639CA              <2> 	cmp dx, cx
  9636 0000789B 7616                <2> 	jbe goodvesafontx
  9637 0000789D 6631D2              <2> 	xor dx, dx
  9638 000078A0 668B0D[6B780000]    <2> 	mov cx, [posyvesa]
  9639 000078A7 6681C11000          <2> 	add cx, 16
  9640 000078AC 66890D[6B780000]    <2> 	mov [posyvesa], cx
  9641                              <2> goodvesafontx:
  9642 000078B3 668B0D[6B780000]    <2> 	mov cx, [posyvesa]
  9643 000078BA 668915[69780000]    <2> 	mov [posxvesa], dx
  9644 000078C1 8B3D[AE580000]      <2> 	mov edi, [physbaseptr]
  9645 000078C7 66891D[6D780000]    <2> 	mov [colorfont], bx
  9646 000078CE 668B2D[6D780000]    <2> 	mov bp, [colorfont]
  9647 000078D5 31DB                <2> 	xor ebx, ebx
  9648 000078D7 6689C3              <2> 	mov bx, ax
  9649 000078DA 31C0                <2> 	xor eax, eax
  9650 000078DC 6689D8              <2> 	mov ax, bx
  9651 000078DF 6689D3              <2> 	mov bx, dx
  9652 000078E2 89DA                <2> 	mov edx, ebx
  9653 000078E4 31DB                <2> 	xor ebx, ebx
  9654 000078E6 6681F90000          <2> 	cmp cx, 0
  9655 000078EB 7414                <2> 	je vesaposloopdn
  9656 000078ED 668B1D[86590000]    <2> 	mov bx, [resolutionx2]
  9657                              <2> vesaposloop:
  9658 000078F4 52                  <2> 	push edx
  9659 000078F5 50                  <2> 	push eax
  9660 000078F6 31C0                <2> 	xor eax, eax
  9661 000078F8 6689C8              <2> 	mov ax, cx
  9662 000078FB F7E3                <2> 	mul ebx
  9663 000078FD 01C7                <2> 	add edi, eax
  9664 000078FF 58                  <2> 	pop eax
  9665 00007900 5A                  <2> 	pop edx
  9666                              <2> vesaposloopdn:
  9667 00007901 01D7                <2> 	add edi, edx
  9668 00007903 BE[828E0000]        <2> 	mov esi, fonts
  9669                              <2> findfontvesa:
  9670 00007908 663D0A00            <2> 	cmp ax, 10
  9671 0000790C 0F84EB000000        <2> 	je near nwlinevesa
  9672 00007912 C1E004              <2> 	shl eax, 4
  9673 00007915 01C6                <2> 	add esi, eax
  9674 00007917 C1E804              <2> 	shr eax, 4
  9675 0000791A 81FE[828E0300]      <2> 	cmp esi, fontend
  9676 00007920 0F83AB000000        <2> 	jae near donefontvesa
  9677 00007926 4E                  <2> 	dec esi
  9678                              <2> foundfontvesa:
  9679 00007927 46                  <2> 	inc esi
  9680 00007928 803D[CB7F0000]01    <2> 	cmp byte [savefonton], 1
  9681 0000792F 0F84E7000000        <2> 	je near vesafontsaver
  9682 00007935 30C9                <2> 	xor cl, cl
  9683 00007937 8A06                <2> 	mov al, [esi]
  9684 00007939 668B15[86590000]    <2> 	mov dx, [resolutionx2]
  9685 00007940 662B15[69780000]    <2> 	sub dx, [posxvesa]
  9686 00007947 6681FA1000          <2> 	cmp dx, 16
  9687 0000794C 7708                <2> 	ja paintfontvesa
  9688 0000794E D0EA                <2> 	shr dl, 1
  9689 00007950 8815[FC790000]      <2> 	mov [charwidth], dl
  9690                              <2> paintfontvesa:
  9691 00007956 B201                <2> 	mov dl, 1
  9692 00007958 20C2                <2> 	and dl, al
  9693 0000795A 803D[CA7F0000]01    <2> 	cmp byte [showcursorfonton], 1
  9694 00007961 0F842E000000        <2> 	je near nodelpaintedfont
  9695 00007967 803D[CA7F0000]02    <2> 	cmp byte [showcursorfonton], 2
  9696 0000796E 0F8511000000        <2> 	jne near noswitchcursorfonton
  9697 00007974 80FA00              <2> 	cmp dl, 0
  9698 00007977 0F8420000000        <2> 	je near nopixelset
  9699 0000797D 66892F              <2> 	mov [edi], bp
  9700 00007980 E918000000          <2> 	jmp nopixelset
  9701                              <2> noswitchcursorfonton:
  9702 00007985 3215[CC7F0000]      <2> 	xor dl, [mouseselecton]
  9703 0000798B 668B1D[A8710000]    <2> 	mov bx, [background]
  9704 00007992 66891F              <2> 	mov [edi], bx
  9705                              <2> nodelpaintedfont:
  9706 00007995 80FA00              <2> 	cmp dl, 0
  9707 00007998 7403                <2> 	je nopixelset
  9708 0000799A 66892F              <2> 	mov [edi], bp
  9709                              <2> nopixelset:
  9710 0000799D 81C702000000        <2> 	add edi, 2
  9711 000079A3 D0C0                <2> 	rol al, 1
  9712 000079A5 FEC1                <2> 	inc cl
  9713 000079A7 3A0D[FC790000]      <2> 	cmp cl, [charwidth]
  9714 000079AD 72A7                <2> 	jb paintfontvesa
  9715 000079AF FEC5                <2> 	inc ch
  9716 000079B1 31D2                <2> 	xor edx, edx
  9717 000079B3 668B15[86590000]    <2> 	mov dx, [resolutionx2]
  9718 000079BA 01D7                <2> 	add edi, edx
  9719 000079BC 31D2                <2> 	xor edx, edx
  9720 000079BE 8A15[FC790000]      <2> 	mov dl, [charwidth]
  9721 000079C4 00D2                <2> 	add dl, dl
  9722 000079C6 29D7                <2> 	sub edi, edx
  9723 000079C8 80FD10              <2> 	cmp ch, 16
  9724 000079CB 0F8256FFFFFF        <2> 	jb foundfontvesa
  9725                              <2> donefontvesa:
  9726 000079D1 C605[FC790000]08    <2> 	mov byte [charwidth], 8
  9727 000079D8 668B15[69780000]    <2> 	mov dx, [posxvesa]
  9728 000079DF 8A1D[FC790000]      <2> 	mov bl, [charwidth]
  9729 000079E5 30FF                <2> 	xor bh, bh
  9730 000079E7 6601DA              <2> 	add dx, bx
  9731 000079EA 6689EB              <2> 	mov bx, bp
  9732 000079ED 668B0D[6B780000]    <2> 	mov cx, [posyvesa]
  9733 000079F4 883D[CB7F0000]      <2> 	mov [savefonton], bh
  9734 000079FA 5D                  <2> 	pop ebp
  9735 000079FB C3                  <2> 	ret
  9736 000079FC 08                  <2> charwidth db 8
  9737                              <2> nwlinevesa:
  9738 000079FD 6631D2              <2> 	xor dx, dx
  9739 00007A00 668915[69780000]    <2> 	mov [posxvesa], dx
  9740 00007A07 668B0D[6B780000]    <2> 	mov cx, [posyvesa]
  9741 00007A0E 6681C11000          <2> 	add cx, 16
  9742 00007A13 66890D[6B780000]    <2> 	mov [posyvesa], cx
  9743 00007A1A EBB5                <2> 	jmp donefontvesa
  9744                              <2> vesafontsaver:
  9745 00007A1C 30C0                <2> 	xor al, al
  9746 00007A1E 30C9                <2> 	xor cl, cl
  9747                              <2> vesafontsaver2:
  9748 00007A20 66392F              <2> 	cmp [edi], bp
  9749 00007A23 742C                <2> 	je colorfontmatch
  9750                              <2> donecolormatch:
  9751 00007A25 81C702000000        <2> 	add edi, 2
  9752 00007A2B D0C0                <2> 	rol al, 1
  9753 00007A2D FEC1                <2> 	inc cl
  9754 00007A2F 80F908              <2> 	cmp cl, 8
  9755 00007A32 72EC                <2> 	jb vesafontsaver2
  9756 00007A34 8806                <2> 	mov [esi], al
  9757 00007A36 46                  <2> 	inc esi
  9758 00007A37 FEC5                <2> 	inc ch
  9759 00007A39 31D2                <2> 	xor edx, edx
  9760 00007A3B 668B15[86590000]    <2> 	mov dx, [resolutionx2]
  9761 00007A42 01D7                <2> 	add edi, edx
  9762 00007A44 81EF10000000        <2> 	sub edi, 16
  9763 00007A4A 80FD10              <2> 	cmp ch, 16
  9764 00007A4D 72CD                <2> 	jb vesafontsaver
  9765 00007A4F EB80                <2> 	jmp donefontvesa
  9766                              <2> colorfontmatch:
  9767 00007A51 0401                <2> 	add al, 1
  9768 00007A53 EBD0                <2> 	jmp donecolormatch
  9769                              <1> %include "source/gui/window.asm"
  9770 00007A55 0000                <2> winvcopystx dw 0
  9771 00007A57 0000                <2> winvcopysty dw 0
  9772 00007A59 0000                <2> winvcopydx dw 0
  9773 00007A5B 0000                <2> winvcopycx dw 0
  9774 00007A5D FFFF0000            <2> windowcolor dw 0xFFFF,0
  9775 00007A61 00000000            <2> windowbufloc: dd 0
  9776 00007A65 00000000            <2> windowvideobuf dd 0
  9777 00007A69 00000000            <2> windowvideobuf2 dd 0
  9778 00007A6D 00000000            <2> windowinfobuf dd 0
  9779 00007A71 0000                <2> termcol dw 0
  9780 00007A73 00000000            <2> wincopyendpos dd 0
  9781                              <2> 
  9782                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9783 00007A77 C605[D4230000]01    <2> 		mov byte [termguion], 1
  9784 00007A7E 6681C11000          <2> 		add cx, 16
  9785 00007A83 668915[557A0000]    <2> 		mov [winvcopystx], dx
  9786 00007A8A 66890D[577A0000]    <2> 		mov [winvcopysty], cx
  9787 00007A91 8935[6D7A0000]      <2> 		mov [windowinfobuf], esi
  9788 00007A97 668B16              <2> 		mov dx, [esi]
  9789 00007A9A 668B4E02            <2> 		mov cx, [esi + 2]
  9790 00007A9E 31C0                <2> 		xor eax, eax
  9791 00007AA0 31DB                <2> 		xor ebx, ebx
  9792 00007AA2 6689D0              <2> 		mov ax, dx
  9793 00007AA5 6689CB              <2> 		mov bx, cx
  9794 00007AA8 66C1E803            <2> 		shr ax, 3
  9795 00007AAC 66C1EB04            <2> 		shr bx, 4
  9796 00007AB0 66A3[717A0000]      <2> 		mov [termcol], ax
  9797 00007AB6 A2[C9250000]        <2> 		mov [charxy], al
  9798 00007ABB 881D[CA250000]      <2> 		mov [charxy + 1], bl
  9799 00007AC1 8B7E04              <2> 		mov edi, [esi + 4]
  9800 00007AC4 893D[5D7A0000]      <2> 		mov [windowcolor], edi
  9801 00007ACA 8B7E0C              <2> 		mov edi, [esi + 12]
  9802 00007ACD 893D[697A0000]      <2> 		mov [windowvideobuf2], edi
  9803 00007AD3 8B7E08              <2> 		mov edi, [esi + 8]
  9804 00007AD6 893D[657A0000]      <2> 		mov [windowvideobuf], edi
  9805 00007ADC 81FB00000000        <2> 		cmp ebx, 0
  9806 00007AE2 0F84C1040000        <2> 		je near donewincopynow
  9807                              <2> 	findendposwin:
  9808 00007AE8 C1E002              <2> 		shl eax, 2
  9809 00007AEB 31D2                <2> 		xor edx, edx
  9810 00007AED F7E3                <2> 		mul ebx
  9811 00007AEF 01C7                <2> 		add edi, eax
  9812 00007AF1 893D[737A0000]      <2> 		mov [wincopyendpos], edi
  9813 00007AF7 31FF                <2> 		xor edi, edi
  9814 00007AF9 6631C0              <2> 		xor ax, ax
  9815 00007AFC 6631DB              <2> 		xor bx, bx
  9816 00007AFF 6601D2              <2> 		add dx, dx
  9817 00007B02 668915[597A0000]    <2> 		mov [winvcopydx], dx
  9818 00007B09 66890D[5B7A0000]    <2> 		mov [winvcopycx], cx
  9819 00007B10 668B0D[577A0000]    <2> 		mov cx, [winvcopysty]
  9820 00007B17 6681E91000          <2> 		sub cx, 16
  9821 00007B1C 668B15[557A0000]    <2> 		mov dx, [winvcopystx]
  9822 00007B23 C605[D5230000]00    <2> 		mov byte [termcopyon], 0
  9823 00007B2A B403                <2> 		mov ah, 3
  9824 00007B2C E81C0A0000          <2> 		call graphicsadd
  9825                              <2> 	showwindow2:
  9826 00007B31 6681C11000          <2> 		add cx, 16
  9827 00007B36 668915[557A0000]    <2> 		mov [winvcopystx], dx
  9828 00007B3D 66890D[577A0000]    <2> 		mov [winvcopysty], cx
  9829 00007B44 668B16              <2> 		mov dx, [esi]
  9830 00007B47 668B4E02            <2> 		mov cx, [esi + 2]
  9831 00007B4B 6601D2              <2> 		add dx, dx
  9832 00007B4E 668915[597A0000]    <2> 		mov [winvcopydx], dx
  9833 00007B55 66890D[5B7A0000]    <2> 		mov [winvcopycx], cx
  9834 00007B5C E818000000          <2> 		call reloadwindowtitle
  9835 00007B61 803D[34850000]01    <2> 		cmp byte [windrag], 1
  9836 00007B68 0F834A040000        <2> 		jae near forgetresetstuff
  9837 00007B6E 8B3D[617A0000]      <2> 		mov edi, [windowbufloc]
  9838 00007B74 E96E020000          <2> 		jmp windowvideocopyset
  9839                              <2> 		
  9840                              <2> 	reloadwindowtitle:
  9841 00007B79 8B3D[617A0000]      <2> 		mov edi, [windowbufloc]
  9842 00007B7F 31D2                <2> 		xor edx, edx
  9843 00007B81 668B15[86590000]    <2> 		mov dx, [resolutionx2]
  9844 00007B88 C1E204              <2> 		shl edx, 4
  9845 00007B8B 29D7                <2> 		sub edi, edx
  9846 00007B8D 803D[D5230000]00    <2> 		cmp byte [termcopyon], 0
  9847 00007B94 7532                <2> 		jne nocleartitlebarpos
  9848 00007B96 8B3D[AE580000]      <2> 		mov edi, [physbaseptr]
  9849 00007B9C 31D2                <2> 		xor edx, edx
  9850 00007B9E 668B15[557A0000]    <2> 		mov dx, [winvcopystx]
  9851 00007BA5 01D7                <2> 		add edi, edx
  9852 00007BA7 31C9                <2> 		xor ecx, ecx
  9853 00007BA9 668B0D[577A0000]    <2> 		mov cx, [winvcopysty]
  9854 00007BB0 6681E91000          <2> 		sub cx, 16
  9855 00007BB5 6681F90000          <2> 		cmp cx, 0
  9856 00007BBA 740C                <2> 		je nocleartitlebarpos
  9857                              <2> 	cleartitlebarpos:
  9858 00007BBC 31C0                <2> 		xor eax, eax
  9859 00007BBE 66A1[86590000]      <2> 		mov ax, [resolutionx2]
  9860 00007BC4 F7E1                <2> 		mul ecx
  9861 00007BC6 01C7                <2> 		add edi, eax
  9862                              <2> 	nocleartitlebarpos:
  9863 00007BC8 66B91000            <2> 		mov cx, 16
  9864 00007BCC 668B15[597A0000]    <2> 		mov dx, [winvcopydx]
  9865 00007BD3 6681F90000          <2> 		cmp cx, 0
  9866 00007BD8 0F8448000000        <2> 		je near canceltitlebarput
  9867 00007BDE 6681FA0000          <2> 		cmp dx, 0
  9868 00007BE3 0F843D000000        <2> 		je near canceltitlebarput
  9869                              <2> 	titlebarput:
  9870 00007BE9 66A1[5D7A0000]      <2> 		mov ax, [windowcolor]
  9871 00007BEF 668907              <2> 		mov [edi], ax
  9872 00007BF2 6681EA0200          <2> 		sub dx, 2
  9873 00007BF7 81C702000000        <2> 		add edi, 2
  9874 00007BFD 6681FA0000          <2> 		cmp dx, 0
  9875 00007C02 75E5                <2> 		jne titlebarput
  9876 00007C04 31D2                <2> 		xor edx, edx
  9877 00007C06 668B15[86590000]    <2> 		mov dx, [resolutionx2]
  9878 00007C0D 6649                <2> 		dec cx
  9879 00007C0F 662B15[597A0000]    <2> 		sub dx, [winvcopydx]
  9880 00007C16 01D7                <2> 		add edi, edx
  9881 00007C18 668B15[597A0000]    <2> 		mov dx, [winvcopydx]
  9882 00007C1F 6681F90000          <2> 		cmp cx, 0
  9883 00007C24 75C3                <2> 		jne titlebarput
  9884                              <2> 	canceltitlebarput:
  9885 00007C26 893D[617A0000]      <2> 		mov [windowbufloc], edi
  9886 00007C2C 803D[D5230000]02    <2> 		cmp byte [termcopyon], 2
  9887 00007C33 0F841C010000        <2> 		je near winvcpst
  9888 00007C39 668B1D[A8710000]    <2> 		mov bx, [background]
  9889 00007C40 6653                <2> 		push bx
  9890 00007C42 6631DB              <2> 		xor bx, bx
  9891 00007C45 66891D[A8710000]    <2> 		mov [background], bx
  9892 00007C4C 6631C0              <2> 		xor ax, ax
  9893 00007C4F 81C610000000        <2> 		add esi, 16
  9894 00007C55 668B15[557A0000]    <2> 		mov dx, [winvcopystx]
  9895 00007C5C 668B0D[577A0000]    <2> 		mov cx, [winvcopysty]
  9896 00007C63 6681E91000          <2> 		sub cx, 16
  9897 00007C68 668B1D[5D7A0000]    <2> 		mov bx, [windowcolor]
  9898 00007C6F C605[CC7F0000]01    <2> 		mov byte [mouseselecton], 1
  9899 00007C76 E882FBFFFF          <2> 		call showstring2	;Show window title
  9900 00007C7B 8B35[BE2C0000]      <2> 		mov esi, [usercache]
  9901 00007C81 6681C21000          <2> 		add dx, 16
  9902 00007C86 C605[CC7F0000]01    <2> 		mov byte [mouseselecton], 1
  9903 00007C8D E86BFBFFFF          <2> 		call showstring2	;Show user name
  9904 00007C92 BE[038C0000]        <2> 		mov esi, computer
  9905 00007C97 C605[CC7F0000]01    <2> 		mov byte [mouseselecton], 1
  9906 00007C9E E85AFBFFFF          <2> 		call showstring2	;Show computer name
  9907 00007CA3 66B85800            <2> 		mov ax, "X"
  9908 00007CA7 66BB00F8            <2> 		mov bx, 1111100000000000b
  9909 00007CAB 668B15[557A0000]    <2> 		mov dx, [winvcopystx]
  9910 00007CB2 668B0D[577A0000]    <2> 		mov cx, [winvcopysty]
  9911 00007CB9 6681E91000          <2> 		sub cx, 16
  9912 00007CBE 6681EA1000          <2> 		sub dx, 16
  9913 00007CC3 660315[597A0000]    <2> 		add dx, [winvcopydx]
  9914 00007CCA C605[CC7F0000]01    <2> 		mov byte [mouseselecton], 1
  9915 00007CD1 663B15[86590000]    <2> 		cmp dx, [resolutionx2]
  9916 00007CD8 7305                <2> 		jae .nox
  9917 00007CDA E897FBFFFF          <2> 		call showfontvesa
  9918                              <2> .nox:
  9919 00007CDF 668B1D[A8710000]    <2> 		mov bx, [background]
  9920 00007CE6 6681EA1800          <2> 		sub dx, 24
  9921 00007CEB 66B82B00            <2> 		mov ax, "+"
  9922 00007CEF 66BBE007            <2> 		mov bx, 0000011111100000b
  9923 00007CF3 C605[CC7F0000]01    <2> 		mov byte [mouseselecton], 1
  9924 00007CFA 663B15[86590000]    <2> 		cmp dx, [resolutionx2]
  9925 00007D01 7305                <2> 		jae .noplus
  9926 00007D03 E86EFBFFFF          <2> 		call showfontvesa
  9927                              <2> .noplus:
  9928 00007D08 6681EA1800          <2> 		sub dx, 24
  9929 00007D0D 66B82D00            <2> 		mov ax, "-"
  9930 00007D11 66BBE0FF            <2> 		mov bx, 1111111111100000b
  9931 00007D15 C605[CC7F0000]01    <2> 		mov byte [mouseselecton], 1
  9932 00007D1C 663B15[86590000]    <2> 		cmp dx, [resolutionx2]
  9933 00007D23 7305                <2> 		jae .nominus
  9934 00007D25 E84CFBFFFF          <2> 		call showfontvesa
  9935                              <2> .nominus:
  9936 00007D2A 6681EA1800          <2> 		sub dx, 24
  9937 00007D2F 66B83F00            <2> 		mov ax, "?"
  9938 00007D33 66BB1F00            <2> 		mov bx, 0000000000011111b
  9939 00007D37 C605[CC7F0000]01    <2> 		mov byte [mouseselecton], 1
  9940 00007D3E 663B15[86590000]    <2> 		cmp dx, [resolutionx2]
  9941 00007D45 7305                <2> 		jae .noquestion
  9942 00007D47 E82AFBFFFF          <2> 		call showfontvesa
  9943                              <2> .noquestion:
  9944 00007D4C 665B                <2> 		pop bx
  9945 00007D4E 66891D[A8710000]    <2> 		mov [background], bx
  9946                              <2> 	winvcpst:
  9947 00007D55 C3                  <2> 		ret
  9948                              <2> 
  9949                              <2> 	windowvideocopy:
  9950 00007D56 8B35[6D7A0000]      <2> 		mov esi, [windowinfobuf]
  9951 00007D5C 668B16              <2> 		mov dx, [esi]
  9952 00007D5F 668B4E02            <2> 		mov cx, [esi + 2]
  9953 00007D63 8B7E04              <2> 		mov edi, [esi + 4]
  9954 00007D66 893D[5D7A0000]      <2> 		mov [windowcolor], edi
  9955 00007D6C 8B7E08              <2> 		mov edi, [esi + 8]
  9956 00007D6F 8B5E0C              <2> 		mov ebx, [esi + 12]
  9957 00007D72 893D[657A0000]      <2> 		mov [windowvideobuf], edi
  9958 00007D78 891D[697A0000]      <2> 		mov [windowvideobuf2], ebx
  9959 00007D7E 31C0                <2> 		xor eax, eax
  9960 00007D80 31DB                <2> 		xor ebx, ebx
  9961 00007D82 6689D0              <2> 		mov ax, dx
  9962 00007D85 6689CB              <2> 		mov bx, cx
  9963 00007D88 66C1E803            <2> 		shr ax, 3
  9964 00007D8C 66C1EB04            <2> 		shr bx, 4
  9965 00007D90 66A3[717A0000]      <2> 		mov [termcol], ax
  9966 00007D96 A2[C9250000]        <2> 		mov [charxy], al
  9967 00007D9B 881D[CA250000]      <2> 		mov [charxy + 1], bl
  9968 00007DA1 8B3D[617A0000]      <2> 		mov edi, [windowbufloc]
  9969 00007DA7 3B3D[AE580000]      <2> 		cmp edi, [physbaseptr]
  9970 00007DAD 0F8334000000        <2> 		jae near windowvideocopyset
  9971 00007DB3 31C9                <2> 		xor ecx, ecx
  9972 00007DB5 31D2                <2> 		xor edx, edx
  9973 00007DB7 668B15[557A0000]    <2> 		mov dx, [winvcopystx]
  9974 00007DBE 668B0D[577A0000]    <2> 		mov cx, [winvcopysty]
  9975 00007DC5 8B3D[AE580000]      <2> 		mov edi, [physbaseptr]
  9976 00007DCB 01D7                <2> 		add edi, edx
  9977 00007DCD 81F900000000        <2> 		cmp ecx, 0
  9978 00007DD3 7412                <2> 		je windowvideocopyset
  9979                              <2> 	yrescopylp:
  9980 00007DD5 31C0                <2> 		xor eax, eax
  9981 00007DD7 66A1[86590000]      <2> 		mov ax, [resolutionx2]
  9982 00007DDD F7E1                <2> 		mul ecx
  9983 00007DDF 01C7                <2> 		add edi, eax
  9984 00007DE1 893D[617A0000]      <2> 		mov [windowbufloc], edi
  9985                              <2> 	windowvideocopyset:
  9986 00007DE7 6631C9              <2> 		xor cx, cx
  9987 00007DEA 6649                <2> 		dec cx
  9988 00007DEC 66890D[C07F0000]    <2> 		mov [charposline], cx
  9989 00007DF3 89FE                <2> 		mov esi, edi
  9990 00007DF5 81EE10000000        <2> 		sub esi, 16
  9991 00007DFB 31D2                <2> 		xor edx, edx
  9992 00007DFD 668B15[86590000]    <2> 		mov dx, [resolutionx2]
  9993 00007E04 C1E204              <2> 		shl edx, 4
  9994 00007E07 01D6                <2> 		add esi, edx
  9995 00007E09 8B3D[657A0000]      <2> 		mov edi, [windowvideobuf]
  9996 00007E0F 81EF04000000        <2> 		sub edi, 4
  9997 00007E15 893D[C27F0000]      <2> 		mov [charposvbuf], edi
  9998 00007E1B E97C000000          <2> 		jmp nextcharwin
  9999                              <2> 	win.write:	;adjusted this to use alpha
 10000                              <2> 				;5R, 6G, 5B
 10001                              <2> %ifdef gui.alphablending
 10002                              <2> 		push esi
 10003                              <2> 		push bx
 10004                              <2> 		push cx
 10005                              <2> 		push dx
 10006                              <2> %ifdef gui.background
 10007                              <2> 		mov esi, edi
 10008                              <2> 		sub esi, [physbaseptr]
 10009                              <2> 		add esi, [backgroundimage]
 10010                              <2> 		cmp dword [backgroundimage], 0
 10011                              <2> 		jne .red
 10012                              <2> %endif
 10013                              <2> 		mov esi, background
 10014                              <2> 	.red:
 10015                              <2> 		mov cx, [esi]
 10016                              <2> 		shr cx, 11
 10017                              <2> 		mov bx, ax
 10018                              <2> 		shr bx, 11
 10019                              <2> 		add cx, bx
 10020                              <2> 		add cx, bx
 10021                              <2> 		add cx, bx
 10022                              <2> 		shr cx, 2
 10023                              <2> 		shl cx, 11
 10024                              <2> 		mov dx, cx
 10025                              <2> 	.green:
 10026                              <2> 		mov cx, [esi]
 10027                              <2> 		shl cx, 5
 10028                              <2> 		shr cx, 10
 10029                              <2> 		mov bx, ax
 10030                              <2> 		shl bx, 5
 10031                              <2> 		shr bx, 10
 10032                              <2> 		add cx, bx
 10033                              <2> 		add cx, bx
 10034                              <2> 		add cx, bx
 10035                              <2> 		shr cx, 2
 10036                              <2> 		shl cx, 5
 10037                              <2> 		add dx, cx
 10038                              <2> 	.blue:
 10039                              <2> 		mov cx, [esi]
 10040                              <2> 		shl cx, 11
 10041                              <2> 		shr cx, 11
 10042                              <2> 		mov bx, ax
 10043                              <2> 		shl bx, 11
 10044                              <2> 		shr bx, 11
 10045                              <2> 		add cx, bx
 10046                              <2> 		add cx, bx
 10047                              <2> 		add cx, bx
 10048                              <2> 		shr cx, 2
 10049                              <2> 		add dx, cx
 10050                              <2> 		mov [edi], dx
 10051                              <2> 		pop dx
 10052                              <2> 		pop cx
 10053                              <2> 		pop bx
 10054                              <2> 		pop esi
 10055                              <2> %else
 10056 00007E20 668907              <2> 		mov [edi], ax
 10057                              <2> %endif
 10058 00007E23 C3                  <2> 		ret
 10059                              <2> 	copywindow:
 10060 00007E24 B201                <2> 		mov dl, 1
 10061 00007E26 D0C6                <2> 		rol dh, 1
 10062 00007E28 20F2                <2> 		and dl, dh
 10063 00007E2A 66813D[67780000]80- <2> 		cmp word [colorcache], 0x80
 10064 00007E32 00                  <2>
 10065 00007E33 7320                <2> 		jae switchwincolors
 10066 00007E35 66A1[5F7A0000]      <2> 		mov ax, [windowcolor + 2]
 10067 00007E3B E8E0FFFFFF          <2> 		call win.write
 10068 00007E40 80FA00              <2> 		cmp dl, 0
 10069 00007E43 742B                <2> 		je nowritewin
 10070 00007E45 66A1[5D7A0000]      <2> 		mov ax, [windowcolor]
 10071 00007E4B E8D0FFFFFF          <2> 		call win.write
 10072 00007E50 E91B000000          <2> 		jmp nowritewin
 10073                              <2> 	switchwincolors:
 10074 00007E55 66A1[5D7A0000]      <2> 		mov ax, [windowcolor]
 10075 00007E5B E8C0FFFFFF          <2> 		call win.write
 10076 00007E60 80FA00              <2> 		cmp dl, 0
 10077 00007E63 740B                <2> 		je nowritewin
 10078 00007E65 66A1[5F7A0000]      <2> 		mov ax, [windowcolor + 2]
 10079 00007E6B E8B0FFFFFF          <2> 		call win.write
 10080                              <2> 	nowritewin:
 10081 00007E70 81C702000000        <2> 		add edi, 2
 10082 00007E76 FEC1                <2> 		inc cl
 10083 00007E78 80F908              <2> 		cmp cl, 8
 10084 00007E7B 75A7                <2> 		jne copywindow
 10085 00007E7D 43                  <2> 		inc ebx
 10086 00007E7E 30C9                <2> 		xor cl, cl
 10087 00007E80 31D2                <2> 		xor edx, edx
 10088 00007E82 668B15[86590000]    <2> 		mov dx, [resolutionx2]
 10089 00007E89 01D6                <2> 		add esi, edx
 10090 00007E8B 89F7                <2> 		mov edi, esi
 10091 00007E8D 8AB3[828E0000]      <2> 		mov dh, [fonts + ebx]
 10092 00007E93 D0CE                <2> 		ror dh, 1
 10093 00007E95 FEC5                <2> 		inc ch
 10094 00007E97 80FD10              <2> 		cmp ch, 16
 10095 00007E9A 7588                <2> 		jne copywindow
 10096                              <2> 	nextcharwin:
 10097 00007E9C 6631C9              <2> 		xor cx, cx
 10098 00007E9F 8B3D[C27F0000]      <2> 		mov edi, [charposvbuf]
 10099 00007EA5 81C704000000        <2> 		add edi, 4
 10100 00007EAB 3B3D[737A0000]      <2> 		cmp edi, [wincopyendpos]
 10101 00007EB1 0F83F2000000        <2> 		jae near donewincopynow
 10102 00007EB7 668B5F02            <2> 		mov bx, [edi + 2]
 10103 00007EBB 6681FB0000          <2> 		cmp bx, 0
 10104 00007EC0 7508                <2> 		jne nofixcolorwin
 10105 00007EC2 66BB0700            <2> 		mov bx, 7
 10106 00007EC6 66895F02            <2> 		mov [edi + 2], bx
 10107                              <2> 	nofixcolorwin:
 10108 00007ECA 66891D[67780000]    <2> 		mov [colorcache], bx
 10109 00007ED1 8B1F                <2> 		mov ebx, [edi]
 10110 00007ED3 893D[C27F0000]      <2> 		mov [charposvbuf], edi
 10111 00007ED9 813D[697A0000]0000- <2> 		cmp dword [windowvideobuf2], 0
 10112 00007EE1 0000                <2>
 10113 00007EE3 7455                <2> 		je noskipcharcopy
 10114 00007EE5 2B3D[657A0000]      <2> 		sub edi, [windowvideobuf]
 10115 00007EEB 033D[697A0000]      <2> 		add edi, [windowvideobuf2]
 10116 00007EF1 8B07                <2> 		mov eax, [edi]
 10117 00007EF3 39D8                <2> 		cmp eax, ebx
 10118 00007EF5 7543                <2> 		jne noskipcharcopy
 10119                              <2> 	skipcharcopy:
 10120 00007EF7 81C610000000        <2> 		add esi, 16
 10121 00007EFD 668B0D[C07F0000]    <2> 		mov cx, [charposline]
 10122 00007F04 6641                <2> 		inc cx
 10123 00007F06 66890D[C07F0000]    <2> 		mov [charposline], cx
 10124 00007F0D 663B0D[717A0000]    <2> 		cmp cx, [termcol]
 10125 00007F14 7286                <2> 		jb nextcharwin
 10126 00007F16 6631C9              <2> 		xor cx, cx
 10127 00007F19 66890D[C07F0000]    <2> 		mov [charposline], cx
 10128 00007F20 31D2                <2> 		xor edx, edx
 10129 00007F22 668B15[86590000]    <2> 		mov dx, [resolutionx2]
 10130 00007F29 C1E204              <2> 		shl edx, 4
 10131 00007F2C 662B15[597A0000]    <2> 		sub dx, [winvcopydx]
 10132 00007F33 01D6                <2> 		add esi, edx
 10133 00007F35 E962FFFFFF          <2> 		jmp nextcharwin
 10134                              <2> 	noskipcharcopy:
 10135 00007F3A 891F                <2> 		mov [edi], ebx
 10136 00007F3C 8B3D[C27F0000]      <2> 		mov edi, [charposvbuf]
 10137 00007F42 C1E310              <2> 		shl ebx, 16
 10138 00007F45 C1EB0C              <2> 		shr ebx, 12
 10139 00007F48 31D2                <2> 		xor edx, edx
 10140 00007F4A 668B15[86590000]    <2> 		mov dx, [resolutionx2]
 10141 00007F51 C1E204              <2> 		shl edx, 4
 10142 00007F54 29D6                <2> 		sub esi, edx
 10143 00007F56 81C610000000        <2> 		add esi, 16
 10144 00007F5C 89F7                <2> 		mov edi, esi
 10145 00007F5E 668B0D[C07F0000]    <2> 		mov cx, [charposline]
 10146 00007F65 6641                <2> 		inc cx
 10147 00007F67 663B0D[717A0000]    <2> 		cmp cx, [termcol]
 10148 00007F6E 7317                <2> 		jae fixwindowcopy
 10149 00007F70 66890D[C07F0000]    <2> 		mov [charposline], cx
 10150 00007F77 6631C9              <2> 		xor cx, cx
 10151 00007F7A 8AB3[828E0000]      <2> 		mov dh, [fonts + ebx]
 10152 00007F80 D0CE                <2> 		ror dh, 1
 10153 00007F82 E99DFEFFFF          <2> 		jmp copywindow
 10154                              <2> fixwindowcopy:
 10155 00007F87 6631C9              <2> 		xor cx, cx
 10156 00007F8A 66890D[C07F0000]    <2> 		mov [charposline], cx
 10157 00007F91 662B15[597A0000]    <2> 		sub dx, [winvcopydx]
 10158 00007F98 01D6                <2> 		add esi, edx
 10159 00007F9A 89F7                <2> 		mov edi, esi
 10160 00007F9C 8AB3[828E0000]      <2> 		mov dh, [fonts + ebx]
 10161 00007FA2 D0CE                <2> 		ror dh, 1
 10162 00007FA4 E97BFEFFFF          <2> 		jmp copywindow
 10163                              <2> donewincopynow:
 10164 00007FA9 803D[D5230000]01    <2> 		cmp byte [termcopyon], 1
 10165 00007FB0 7506                <2> 		jne forgetresetstuff
 10166 00007FB2 E8FCA9FFFF          <2> 		call switchtermcursor
 10167 00007FB7 61                  <2> 		popa
 10168                              <2> forgetresetstuff:
 10169 00007FB8 C605[D5230000]00    <2> 		mov byte [termcopyon], 0
 10170 00007FBF C3                  <2> 		ret
 10171                              <2> 		
 10172 00007FC0 0000                <2> charposline dw 0
 10173 00007FC2 00000000            <2> charposvbuf dw 0,0
 10174                              <1> 				
 10175 00007FC6 00                  <1> copygui db 0
 10176 00007FC7 00                  <1> graphicsset db 0
 10177 00007FC8 0000                <1> graphicspos db 0,0
 10178 00007FCA 00                  <1> showcursorfonton db 0
 10179 00007FCB 00                  <1> savefonton db 0
 10180 00007FCC 00                  <1> mouseselecton db 0
 10181                              <1> 
 10182 00007FCD 00                  <1> pbutton db 0
 10183 00007FCE 00                  <1> pLBUTTON db 0
 10184 00007FCF 00                  <1> pRBUTTON db 0
 10185 00007FD0 00000000            <1> dragging dw 0,0
 10186 00007FD4 0000000000000000    <1> lastpos dw 0,0,0,0
 10187 00007FDC 00000000            <1> colorbuf dw 0,0
 10188                              <1> 	
 10189                              <1> 	clickicon:
 10190 00007FE0 B001                <1> 		mov al, 1
 10191 00007FE2 A2[CD7F0000]        <1> 		mov [pbutton], al
 10192 00007FE7 A0[CE7F0000]        <1> 		mov al, [pLBUTTON]
 10193 00007FEC 2205[8D5C0000]      <1> 		and al, [LBUTTON]
 10194 00007FF2 8A25[CF7F0000]      <1> 		mov ah, [pRBUTTON]
 10195 00007FF8 2225[8E5C0000]      <1> 		and ah, [RBUTTON]
 10196 00007FFE 08E0                <1> 		or al, ah
 10197 00008000 3C00                <1> 		cmp al, 0
 10198 00008002 741B                <1> 		je nodragclick
 10199 00008004 813D[D07F0000]0100- <1> 		cmp dword [dragging], 1
 10200 0000800C 0000                <1>
 10201 0000800E 732F                <1> 		jae dragclick
 10202 00008010 C705[D07F0000]0100- <1> 		mov dword [dragging], 1
 10203 00008018 0000                <1>
 10204 0000801A E920000000          <1> 		jmp dragclick
 10205                              <1> 	nodragclick:
 10206 0000801F 31C0                <1> 		xor eax, eax
 10207 00008021 A3[D07F0000]        <1> 		mov dword [dragging], eax
 10208 00008026 A2[CD7F0000]        <1> 		mov [pbutton], al
 10209 0000802B A0[8D5C0000]        <1> 		mov al, [LBUTTON]
 10210 00008030 A2[CE7F0000]        <1> 		mov [pLBUTTON], al
 10211 00008035 A0[8E5C0000]        <1> 		mov al, [RBUTTON]
 10212 0000803A A2[CF7F0000]        <1> 		mov [pRBUTTON], al
 10213                              <1> 	dragclick:
 10214 0000803F 6631C0              <1> 		xor ax, ax
 10215 00008042 BE[2DBF0300]        <1> 		mov esi, graphicstable
 10216 00008047 C705[20880000]0000- <1> 		mov dword [codepointer], 0
 10217 0000804F 0000                <1>
 10218                              <1> 	clicon2:
 10219 00008051 31D2                <1> 		xor edx, edx
 10220 00008053 31C9                <1> 		xor ecx, ecx
 10221 00008055 66813E0100          <1> 		cmp word [esi], 1
 10222 0000805A 0F841B000000        <1> 		je near iconselect
 10223 00008060 66813E0200          <1> 		cmp word [esi], 2
 10224 00008065 0F8472010000        <1> 		je near textselected
 10225 0000806B 66813E0300          <1> 		cmp word [esi], 3
 10226 00008070 0F84C7020000        <1> 		je near windowselect
 10227 00008076 E910040000          <1> 		jmp nexticonsel
 10228                              <1> 	iconselect:
 10229 0000807B 668B5606            <1> 		mov dx, [esi + 6]
 10230 0000807F 6689D0              <1> 		mov ax, dx
 10231 00008082 668B4E08            <1> 		mov cx, [esi + 8]
 10232 00008086 6689CB              <1> 		mov bx, cx
 10233 00008089 6681C32000          <1> 		add bx, 32
 10234 0000808E 6601D0              <1> 		add ax, dx
 10235 00008091 813D[D07F0000]0100- <1> 		cmp dword [dragging], 1
 10236 00008099 0000                <1>
 10237 0000809B 746F                <1> 		je dragicon
 10238 0000809D 813D[D07F0000]0000- <1> 		cmp dword [dragging], 0
 10239 000080A5 0000                <1>
 10240 000080A7 7411                <1> 		je nodragiconcheck
 10241 000080A9 3935[D07F0000]      <1> 		cmp dword [dragging], esi
 10242 000080AF 0F85D6030000        <1> 		jne near nexticonsel
 10243 000080B5 E952000000          <1> 		jmp dragicon
 10244                              <1> 	nodragiconcheck:
 10245 000080BA 663905[7C5B0000]    <1> 		cmp [mousecursorposition], ax
 10246 000080C1 0F82C4030000        <1> 		jb near nexticonsel
 10247 000080C7 66054000            <1> 		add ax, 64
 10248 000080CB 663905[7C5B0000]    <1> 		cmp [mousecursorposition], ax
 10249 000080D2 0F87B3030000        <1> 		ja near nexticonsel
 10250 000080D8 6629D0              <1> 		sub ax, dx
 10251 000080DB 66390D[7E5B0000]    <1> 		cmp [mousecursorposition + 2], cx
 10252 000080E2 0F82A3030000        <1> 		jb near nexticonsel
 10253 000080E8 66391D[7E5B0000]    <1> 		cmp [mousecursorposition + 2], bx
 10254 000080EF 0F8796030000        <1> 		ja near nexticonsel
 10255 000080F5 668B460A            <1> 		mov ax, [esi + 10]
 10256 000080F9 66250100            <1> 		and ax, 1
 10257 000080FD 663D0100            <1> 		cmp ax, 1
 10258 00008101 0F84B6000000        <1> 		je near unselecticon
 10259 00008107 E98D000000          <1> 		jmp nodragicon
 10260                              <1> 	dragicon:
 10261 0000810C 663905[785B0000]    <1> 		cmp [lastmouseposition], ax
 10262 00008113 0F8272030000        <1> 		jb near nexticonsel
 10263 00008119 66054000            <1> 		add ax, 64
 10264 0000811D 663905[785B0000]    <1> 		cmp [lastmouseposition], ax
 10265 00008124 0F8761030000        <1> 		ja near nexticonsel
 10266 0000812A 6629D0              <1> 		sub ax, dx
 10267 0000812D 66390D[7A5B0000]    <1> 		cmp [lastmouseposition + 2], cx
 10268 00008134 0F8251030000        <1> 		jb near nexticonsel
 10269 0000813A 66391D[7A5B0000]    <1> 		cmp [lastmouseposition + 2], bx
 10270 00008141 0F8744030000        <1> 		ja near nexticonsel
 10271 00008147 668B460A            <1> 		mov ax, [esi + 10]
 10272 0000814B 2410                <1> 		and al, 00010000b
 10273 0000814D 3C10                <1> 		cmp al, 00010000b
 10274 0000814F 7448                <1> 		je nodragicon
 10275 00008151 8935[D07F0000]      <1> 		mov [dragging], esi
 10276 00008157 66D1E2              <1> 		shl dx, 1
 10277 0000815A 662B15[785B0000]    <1> 		sub dx, [lastmouseposition]
 10278 00008161 660315[7C5B0000]    <1> 		add dx, [mousecursorposition]
 10279 00008168 66D1EA              <1> 		shr dx, 1
 10280 0000816B 66030D[7E5B0000]    <1> 		add cx, [mousecursorposition + 2]
 10281 00008172 662B0D[7A5B0000]    <1> 		sub cx, [lastmouseposition + 2]
 10282 00008179 663B15[86590000]    <1> 		cmp dx, [resolutionx2]
 10283 00008180 7607                <1> 		jbe chkyresdrgicn
 10284 00008182 668B15[7C5B0000]    <1> 		mov dx, [mousecursorposition]
 10285                              <1> 	chkyresdrgicn:
 10286 00008189 663B0D[9A580000]    <1> 		cmp cx, [resolutiony]
 10287 00008190 7607                <1> 		jbe nodragicon
 10288 00008192 668B0D[7E5B0000]    <1> 		mov cx, [mousecursorposition + 2]
 10289                              <1> 	nodragicon:
 10290 00008199 66814E0A0100        <1> 		or word [esi + 10], 1
 10291 0000819F 8B5E0C              <1> 		mov ebx, [esi + 12]
 10292 000081A2 668B460A            <1> 		mov ax, [esi + 10]
 10293 000081A6 8B7602              <1> 		mov esi, [esi + 2]
 10294 000081A9 C705[20880000]0000- <1> 		mov dword [codepointer], 0
 10295 000081B1 0000                <1>
 10296 000081B3 E8A3EDFFFF          <1> 		call showicon
 10297 000081B8 E9E7020000          <1> 		jmp doneiconsel
 10298                              <1> 	unselecticon:
 10299 000081BD 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10300 000081C3 8B5E0C              <1> 		mov ebx, [esi + 12]
 10301 000081C6 668B460A            <1> 		mov ax, [esi + 10]
 10302 000081CA 8B7602              <1> 		mov esi, [esi + 2]
 10303 000081CD 891D[20880000]      <1> 		mov [codepointer], ebx
 10304 000081D3 E883EDFFFF          <1> 		call showicon
 10305 000081D8 E9C7020000          <1> 		jmp doneiconsel
 10306                              <1> 	textselected:
 10307 000081DD 8B5E02              <1> 		mov ebx, [esi + 2]
 10308 000081E0 668B5606            <1> 		mov dx, [esi + 6]
 10309 000081E4 6689D0              <1> 		mov ax, dx
 10310 000081E7 668B4E08            <1> 		mov cx, [esi + 8]
 10311                              <1> 	lengthtesttext:
 10312 000081EB 803B00              <1> 		cmp byte [ebx], 0
 10313 000081EE 7407                <1> 		je donetesttextlength
 10314 000081F0 43                  <1> 		inc ebx
 10315 000081F1 66051000            <1> 		add ax, 16
 10316 000081F5 EBF4                <1> 		jmp lengthtesttext
 10317                              <1> 	donetesttextlength:
 10318 000081F7 6689CB              <1> 		mov bx, cx
 10319 000081FA 6681C30F00          <1> 		add bx, 15
 10320 000081FF 813D[D07F0000]0100- <1> 		cmp dword [dragging], 1
 10321 00008207 0000                <1>
 10322 00008209 7468                <1> 		je dragtext
 10323 0000820B 813D[D07F0000]0000- <1> 		cmp dword [dragging], 0
 10324 00008213 0000                <1>
 10325 00008215 7411                <1> 		je nodragtextcheck
 10326 00008217 3935[D07F0000]      <1> 		cmp dword [dragging], esi
 10327 0000821D 0F8568020000        <1> 		jne near nexticonsel
 10328 00008223 E94B000000          <1> 		jmp dragtext
 10329                              <1> 	nodragtextcheck:
 10330 00008228 663915[7C5B0000]    <1> 		cmp [mousecursorposition], dx
 10331 0000822F 0F8256020000        <1> 		jb near nexticonsel
 10332 00008235 663905[7C5B0000]    <1> 		cmp [mousecursorposition], ax
 10333 0000823C 0F8749020000        <1> 		ja near nexticonsel
 10334 00008242 66390D[7E5B0000]    <1> 		cmp [mousecursorposition + 2], cx
 10335 00008249 0F823C020000        <1> 		jb near nexticonsel
 10336 0000824F 66391D[7E5B0000]    <1> 		cmp [mousecursorposition + 2], bx
 10337 00008256 0F872F020000        <1> 		ja near nexticonsel
 10338 0000825C 668B460A            <1> 		mov ax, [esi + 10]
 10339 00008260 66250100            <1> 		and ax, 1
 10340 00008264 663D0100            <1> 		cmp ax, 1
 10341 00008268 0F84AB000000        <1> 		je near unselecttext
 10342 0000826E E986000000          <1> 		jmp nodragtext
 10343                              <1> 	dragtext:
 10344 00008273 663915[785B0000]    <1> 		cmp [lastmouseposition], dx
 10345 0000827A 0F820B020000        <1> 		jb near nexticonsel
 10346 00008280 663905[785B0000]    <1> 		cmp [lastmouseposition], ax
 10347 00008287 0F87FE010000        <1> 		ja near nexticonsel
 10348 0000828D 66390D[7A5B0000]    <1> 		cmp [lastmouseposition + 2], cx
 10349 00008294 0F82F1010000        <1> 		jb near nexticonsel
 10350 0000829A 66391D[7A5B0000]    <1> 		cmp [lastmouseposition + 2], bx
 10351 000082A1 0F87E4010000        <1> 		ja near nexticonsel
 10352 000082A7 668B460A            <1> 		mov ax, [esi + 10]
 10353 000082AB 2410                <1> 		and al, 00010000b
 10354 000082AD 663D1000            <1> 		cmp ax, 00010000b
 10355 000082B1 0F8442000000        <1> 		je near nodragtext
 10356 000082B7 8935[D07F0000]      <1> 		mov [dragging], esi
 10357 000082BD 662B15[785B0000]    <1> 		sub dx, [lastmouseposition]
 10358 000082C4 660315[7C5B0000]    <1> 		add dx, [mousecursorposition]
 10359 000082CB 66030D[7E5B0000]    <1> 		add cx, [mousecursorposition + 2]
 10360 000082D2 662B0D[7A5B0000]    <1> 		sub cx, [lastmouseposition + 2]
 10361 000082D9 663B15[86590000]    <1> 		cmp dx, [resolutionx2]
 10362 000082E0 7607                <1> 		jbe chkyresdrgtxt
 10363 000082E2 668B15[7C5B0000]    <1> 		mov dx, [mousecursorposition]
 10364                              <1> 	chkyresdrgtxt:
 10365 000082E9 663B0D[9A580000]    <1> 		cmp cx, [resolutiony]
 10366 000082F0 7607                <1> 		jbe nodragtext
 10367 000082F2 668B0D[7E5B0000]    <1> 		mov cx, [mousecursorposition + 2]
 10368                              <1> 	nodragtext:
 10369 000082F9 66814E0A0100        <1> 		or word [esi + 10], 1
 10370 000082FF 8B5E0C              <1> 		mov ebx, [esi + 12]
 10371 00008302 891D[20880000]      <1> 		mov [codepointer], ebx
 10372 00008308 668B460A            <1> 		mov ax, [esi + 10]
 10373 0000830C 8B7602              <1> 		mov esi, [esi + 2]
 10374 0000830F E8D6F4FFFF          <1> 		call showstring
 10375 00008314 E98B010000          <1> 		jmp doneiconsel
 10376                              <1> 	unselecttext:
 10377 00008319 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10378 0000831F 8B5E0C              <1> 		mov ebx, [esi + 12]
 10379 00008322 668B460A            <1> 		mov ax, [esi + 10]
 10380 00008326 8B7602              <1> 		mov esi, [esi + 2]
 10381 00008329 C705[20880000]0000- <1> 		mov dword [codepointer], 0
 10382 00008331 0000                <1>
 10383 00008333 E8B2F4FFFF          <1> 		call showstring
 10384 00008338 E967010000          <1> 		jmp doneiconsel
 10385                              <1> windowselect:
 10386 0000833D 8B7E02              <1> 		mov edi, [esi + 2]
 10387 00008340 668B5606            <1> 		mov dx, [esi + 6]
 10388 00008344 6689D0              <1> 		mov ax, dx
 10389 00008347 668B4E08            <1> 		mov cx, [esi + 8]
 10390 0000834B 6689CB              <1> 		mov bx, cx
 10391 0000834E 6681C31000          <1> 		add bx, 16
 10392 00008353 813D[D07F0000]0100- <1> 		cmp dword [dragging], 1
 10393 0000835B 0000                <1>
 10394 0000835D 746D                <1> 		je dragwin
 10395 0000835F 813D[D07F0000]0000- <1> 		cmp dword [dragging], 0
 10396 00008367 0000                <1>
 10397 00008369 7411                <1> 		je nodragwincheck
 10398 0000836B 3935[D07F0000]      <1> 		cmp dword [dragging], esi
 10399 00008371 0F8514010000        <1> 		jne near nexticonsel
 10400 00008377 E950000000          <1> 		jmp dragwin
 10401                              <1> 	nodragwincheck:
 10402 0000837C 663905[7C5B0000]    <1> 		cmp [mousecursorposition], ax
 10403 00008383 0F8202010000        <1> 		jb near nexticonsel
 10404 00008389 660307              <1> 		add ax, [edi]
 10405 0000838C 660307              <1> 		add ax, [edi]
 10406 0000838F 663905[7C5B0000]    <1> 		cmp [mousecursorposition], ax
 10407 00008396 0F87EF000000        <1> 		ja near nexticonsel
 10408 0000839C 66390D[7E5B0000]    <1> 		cmp [mousecursorposition + 2], cx
 10409 000083A3 0F82E2000000        <1> 		jb near nexticonsel
 10410 000083A9 66391D[7E5B0000]    <1> 		cmp [mousecursorposition + 2], bx
 10411 000083B0 0F87D5000000        <1> 		ja near nexticonsel
 10412 000083B6 662D1400            <1> 		sub ax, 20
 10413 000083BA 663905[7C5B0000]    <1> 		cmp [mousecursorposition], ax
 10414 000083C1 0F87A4000000        <1> 		ja near killwin
 10415 000083C7 E98B000000          <1> 		jmp nodragwin
 10416                              <1> 	dragwin:
 10417 000083CC 663905[785B0000]    <1> 		cmp [lastmouseposition], ax
 10418 000083D3 0F82B2000000        <1> 		jb near nexticonsel
 10419 000083D9 660307              <1> 		add ax, [edi]
 10420 000083DC 660307              <1> 		add ax, [edi]
 10421 000083DF 663905[785B0000]    <1> 		cmp [lastmouseposition], ax
 10422 000083E6 0F879F000000        <1> 		ja near nexticonsel
 10423 000083EC 66390D[7A5B0000]    <1> 		cmp [lastmouseposition + 2], cx
 10424 000083F3 0F8292000000        <1> 		jb near nexticonsel
 10425 000083F9 66391D[7A5B0000]    <1> 		cmp [lastmouseposition + 2], bx
 10426 00008400 0F8785000000        <1> 		ja near nexticonsel
 10427 00008406 8935[D07F0000]      <1> 		mov [dragging], esi
 10428 0000840C 803D[34850000]01    <1> 		cmp byte [windrag], 1
 10429 00008413 7706                <1> 		ja .nochangewindrag
 10430 00008415 FE05[34850000]      <1> 		inc byte [windrag]
 10431                              <1> 	.nochangewindrag:
 10432 0000841B 662B15[785B0000]    <1> 		sub dx, [lastmouseposition]
 10433 00008422 660315[7C5B0000]    <1> 		add dx, [mousecursorposition]
 10434 00008429 66030D[7E5B0000]    <1> 		add cx, [mousecursorposition + 2]
 10435 00008430 662B0D[7A5B0000]    <1> 		sub cx, [lastmouseposition + 2]
 10436 00008437 663B15[86590000]    <1> 		cmp dx, [resolutionx2]
 10437 0000843E 7607                <1> 		jbe chkyresdrgwin
 10438 00008440 668B15[7C5B0000]    <1> 		mov dx, [mousecursorposition]
 10439                              <1> 	chkyresdrgwin:
 10440 00008447 663B0D[9A580000]    <1> 		cmp cx, [resolutiony]
 10441 0000844E 7607                <1> 		jbe nodragwin
 10442 00008450 668B0D[7E5B0000]    <1> 		mov cx, [mousecursorposition + 2]
 10443                              <1> 	nodragwin:
 10444 00008457 8B5E0C              <1> 		mov ebx, [esi + 12]
 10445 0000845A 668B460A            <1> 		mov ax, [esi + 10]
 10446 0000845E 8B7602              <1> 		mov esi, [esi + 2]
 10447 00008461 E811F6FFFF          <1> 		call showwindow
 10448 00008466 E939000000          <1> 		jmp doneiconsel
 10449                              <1> 	killwin:
 10450 0000846B 66C7060000          <1> 		mov word [esi], 0
 10451 00008470 C605[D4230000]00    <1> 		mov byte [termguion], 0
 10452 00008477 E8E0ECFFFF          <1> 		call guiclear
 10453 0000847C E82BEDFFFF          <1> 		call reloadallgraphics
 10454 00008481 E872EAFFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10455 00008486 E94EE6FFFF          <1> 		jmp guistart
 10456                              <1> 	nexticonsel:
 10457 0000848B 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10458 00008491 81C610000000        <1> 		add esi, 16
 10459 00008497 81FE[2DC10300]      <1> 		cmp esi, graphicstableend
 10460 0000849D 7305                <1> 		jae doneiconsel
 10461 0000849F E9ADFBFFFF          <1> 		jmp clicon2
 10462                              <1> 	doneiconsel:
 10463 000084A4 813D[D07F0000]0100- <1> 		cmp dword [dragging], 1
 10464 000084AC 0000                <1>
 10465 000084AE 731A                <1> 		jae doneiconsel2
 10466 000084B0 A2[34850000]        <1> 		mov [windrag], al
 10467 000084B5 813D[20880000]0000- <1> 		cmp dword [codepointer], 0
 10468 000084BD 0000                <1>
 10469 000084BF 7409                <1> 		je doneiconsel2
 10470 000084C1 8B1D[20880000]      <1> 		mov ebx, [codepointer]
 10471 000084C7 FFD3                <1> 		call ebx
 10472 000084C9 C3                  <1> 		ret
 10473                              <1> 	doneiconsel2:
 10474 000084CA A0[8D5C0000]        <1> 		mov al, [LBUTTON]
 10475 000084CF A2[CE7F0000]        <1> 		mov [pLBUTTON], al
 10476 000084D4 A0[8E5C0000]        <1> 		mov al, [RBUTTON]
 10477 000084D9 A2[CF7F0000]        <1> 		mov [pRBUTTON], al
 10478 000084DE 813D[D07F0000]0100- <1> 		cmp dword [dragging], 1
 10479 000084E6 0000                <1>
 10480 000084E8 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10481 000084EE E805EAFFFF          <1> 		call switchmousepos2
 10482 000084F3 803D[34850000]01    <1> 		cmp byte [windrag], 1
 10483 000084FA 7305                <1> 		jae noclearcursorcl
 10484 000084FC E83FE9FFFF          <1> 		call clearmousecursor
 10485                              <1> noclearcursorcl:
 10486 00008501 E8A6ECFFFF          <1> 		call reloadallgraphics
 10487                              <1> noreloadgraphicsclick:
 10488 00008506 30E4                <1> 		xor ah, ah
 10489 00008508 31C9                <1> 		xor ecx, ecx
 10490 0000850A 31D2                <1> 		xor edx, edx
 10491 0000850C B001                <1> 		mov al, 1
 10492 0000850E 668B15[7C5B0000]    <1> 		mov dx, [mousecursorposition]
 10493 00008515 668B0D[7E5B0000]    <1> 		mov cx, [mousecursorposition + 2]
 10494 0000851C 66BBE738            <1> 		mov bx, 0011100011100111b
 10495 00008520 C605[CA7F0000]01    <1> 		mov byte [showcursorfonton], 1
 10496 00008527 E84AF3FFFF          <1> 		call showfontvesa
 10497 0000852C C605[CA7F0000]00    <1> 		mov byte [showcursorfonton], 0
 10498 00008533 C3                  <1> 		ret
 10499 00008534 00                  <1> windrag db 0
 10500 00008535 00000000            <1> lastdrag dw 0,0
 10501 00008539 00000000            <1> grpctblpos dw 0,0
 10502                              <1> 
 10503                              <1> 
 10504                              <1> 
 10505 0000853D 00<rept>            <1> grphbuf times 16 db 0
 10506                              <1> 	graphicsadd:
 10507 0000854D BF[2DBF0300]        <1> 		mov edi, graphicstable
 10508                              <1> 	shwgrph1:
 10509 00008552 397702              <1> 		cmp dword [edi + 2], esi
 10510 00008555 7414                <1> 		je showgraphicsreplace2
 10511 00008557 81C710000000        <1> 		add edi, 16
 10512 0000855D 81FF[2DC10300]      <1> 		cmp edi, graphicstableend
 10513 00008563 0F8337020000        <1> 		jae near showgraphicsnew
 10514 00008569 EBE7                <1> 		jmp shwgrph1
 10515                              <1> 	showgraphicsreplace2:
 10516 0000856B 8935[3F850000]      <1> 		mov [grphbuf + 2], esi
 10517 00008571 668915[43850000]    <1> 		mov [grphbuf + 6], dx
 10518 00008578 66890D[45850000]    <1> 		mov [grphbuf + 8], cx
 10519 0000857F 891D[49850000]      <1> 		mov [grphbuf + 12], ebx
 10520 00008585 30FF                <1> 		xor bh, bh
 10521 00008587 88E3                <1> 		mov bl, ah
 10522 00008589 30E4                <1> 		xor ah, ah
 10523 0000858B 66A3[47850000]      <1> 		mov [grphbuf + 10], ax	
 10524 00008591 66891D[3D850000]    <1> 		mov [grphbuf], bx
 10525 00008598 66A1[3D850000]      <1> 		mov ax, [grphbuf]
 10526 0000859E 663D0100            <1> 		cmp ax, 1
 10527 000085A2 0F8419000000        <1> 		je near replaceicon
 10528 000085A8 663D0200            <1> 		cmp ax, 2
 10529 000085AC 0F8493000000        <1> 		je near replacestring
 10530 000085B2 663D0300            <1> 		cmp ax, 3
 10531 000085B6 0F840F010000        <1> 		je near replacewindow
 10532 000085BC E9BC010000          <1> 		jmp showgraphicsreplace
 10533                              <1> 	replaceicon:
 10534 000085C1 893D[D47F0000]      <1> 		mov [lastpos], edi
 10535 000085C7 8935[D87F0000]      <1> 		mov [lastpos + 4], esi
 10536 000085CD 8B7702              <1> 		mov esi, [edi + 2]
 10537 000085D0 668B5F0C            <1> 		mov bx, [edi + 12]
 10538 000085D4 668B5706            <1> 		mov dx, [edi + 6]
 10539 000085D8 668B4F08            <1> 		mov cx, [edi + 8]
 10540 000085DC 668B06              <1> 		mov ax, [esi]
 10541 000085DF 66A3[DC7F0000]      <1> 		mov [colorbuf], ax
 10542 000085E5 66A1[A8710000]      <1> 		mov ax, [background]
 10543 000085EB 668906              <1> 		mov [esi], ax
 10544 000085EE 8B5F0C              <1> 		mov ebx, [edi + 12]
 10545 000085F1 668B470A            <1> 		mov ax, [edi + 10]
 10546 000085F5 2401                <1> 		and al, 1
 10547 000085F7 A2[24880000]        <1> 		mov [iconselected], al
 10548 000085FC 668B470A            <1> 		mov ax, [edi + 10]
 10549 00008600 E869E9FFFF          <1> 		call showicon2
 10550 00008605 8B3D[D47F0000]      <1> 		mov edi, [lastpos]
 10551 0000860B 8B7702              <1> 		mov esi, [edi + 2]
 10552 0000860E 66A1[DC7F0000]      <1> 		mov ax, [colorbuf]
 10553 00008614 668906              <1> 		mov [esi], ax
 10554 00008617 8B35[D87F0000]      <1> 		mov esi, [lastpos + 4]
 10555 0000861D 668B15[43850000]    <1> 		mov dx, [grphbuf + 6]
 10556 00008624 668B0D[45850000]    <1> 		mov cx, [grphbuf + 8]
 10557 0000862B 668B1D[3D850000]    <1> 		mov bx, [grphbuf]
 10558 00008632 66A1[47850000]      <1> 		mov ax, [grphbuf + 10]
 10559 00008638 88DC                <1> 		mov ah, bl
 10560 0000863A 8B1D[49850000]      <1> 		mov ebx, [grphbuf + 12]
 10561 00008640 E938010000          <1> 		jmp showgraphicsreplace
 10562                              <1> 	replacestring:
 10563 00008645 893D[D47F0000]      <1> 		mov [lastpos], edi
 10564 0000864B 8935[D87F0000]      <1> 		mov [lastpos + 4], esi
 10565 00008651 8B5F0C              <1> 		mov ebx, [edi + 12]
 10566 00008654 8B7702              <1> 		mov esi, [edi + 2]
 10567 00008657 668B5706            <1> 		mov dx, [edi + 6]
 10568 0000865B 668B4F08            <1> 		mov cx, [edi + 8]
 10569 0000865F 66A1[65780000]      <1> 		mov ax, [colorfont2]
 10570 00008665 66A3[DC7F0000]      <1> 		mov [colorbuf], ax
 10571 0000866B 66A1[A8710000]      <1> 		mov ax, [background]
 10572 00008671 66A3[65780000]      <1> 		mov [colorfont2], ax		
 10573 00008677 8B5F0C              <1> 		mov ebx, [edi + 12]
 10574 0000867A 668B470A            <1> 		mov ax, [edi + 10]
 10575 0000867E 2401                <1> 		and al, 1
 10576 00008680 A2[CC7F0000]        <1> 		mov [mouseselecton], al
 10577 00008685 668B470A            <1> 		mov ax, [edi + 10]
 10578 00008689 E86FF1FFFF          <1> 		call showstring2
 10579 0000868E 66A1[DC7F0000]      <1> 		mov ax, [colorbuf]
 10580 00008694 66A3[65780000]      <1> 		mov [colorfont2], ax
 10581 0000869A 8B3D[D47F0000]      <1> 		mov edi, [lastpos]
 10582 000086A0 8B7702              <1> 		mov esi, [edi + 2]
 10583 000086A3 668B15[43850000]    <1> 		mov dx, [grphbuf + 6]
 10584 000086AA 668B0D[45850000]    <1> 		mov cx, [grphbuf + 8]
 10585 000086B1 668B1D[3D850000]    <1> 		mov bx, [grphbuf]
 10586 000086B8 66A1[47850000]      <1> 		mov ax, [grphbuf + 10]
 10587 000086BE 88DC                <1> 		mov ah, bl
 10588 000086C0 8B1D[49850000]      <1> 		mov ebx, [grphbuf + 12]
 10589 000086C6 E9B2000000          <1> 		jmp showgraphicsreplace
 10590                              <1> 	replacewindow:
 10591 000086CB 893D[D47F0000]      <1> 		mov [lastpos], edi
 10592 000086D1 8935[D87F0000]      <1> 		mov [lastpos + 4], esi
 10593 000086D7 8B7702              <1> 		mov esi, [edi + 2]
 10594 000086DA 8B3D[617A0000]      <1> 		mov edi, [windowbufloc]
 10595 000086E0 31D2                <1> 		xor edx, edx
 10596 000086E2 668B15[86590000]    <1> 		mov dx, [resolutionx2]
 10597 000086E9 C1E204              <1> 		shl edx, 4
 10598 000086EC 29D7                <1> 		sub edi, edx
 10599 000086EE 31D2                <1> 		xor edx, edx
 10600 000086F0 668B16              <1> 		mov dx, [esi]
 10601 000086F3 660316              <1> 		add dx, [esi]
 10602 000086F6 668B4E02            <1> 		mov cx, [esi + 2]
 10603 000086FA 6681C11000          <1> 		add cx, 16
 10604 000086FF 66A1[A8710000]      <1> 		mov ax, [background]
 10605 00008705 803D[34850000]01    <1> 		cmp byte [windrag], 1
 10606 0000870C 7604                <1> 		jbe clearwindow
 10607 0000870E 662B4E02            <1> 		sub cx, [esi + 2]
 10608                              <1> 	clearwindow:
 10609                              <1> 		%ifdef gui.background
 10610                              <1> 			cmp dword [backgroundimage], 0
 10611                              <1> 			je .noback
 10612                              <1> 			push esi
 10613                              <1> 			mov esi, [backgroundimage]
 10614                              <1> 			sub edi, [physbaseptr]
 10615                              <1> 			add esi, edi
 10616                              <1> 			add edi, [physbaseptr]
 10617                              <1> 			mov ax, [esi]
 10618                              <1> 			pop esi
 10619                              <1> 		.noback:
 10620                              <1> 		%endif
 10621 00008712 668907              <1> 		mov [edi], ax
 10622 00008715 81C702000000        <1> 		add edi, 2
 10623 0000871B 81EA02000000        <1> 		sub edx, 2
 10624 00008721 81FA00000000        <1> 		cmp edx, 0
 10625 00008727 75E9                <1> 		jne clearwindow
 10626 00008729 6649                <1> 		dec cx
 10627 0000872B 668B15[86590000]    <1> 		mov dx, [resolutionx2]
 10628 00008732 662B16              <1> 		sub dx, [esi]
 10629 00008735 662B16              <1> 		sub dx, [esi]
 10630 00008738 01D7                <1> 		add edi, edx
 10631 0000873A 668B16              <1> 		mov dx, [esi]
 10632 0000873D 660316              <1> 		add dx, [esi]
 10633 00008740 6681F90000          <1> 		cmp cx, 0
 10634 00008745 75CB                <1> 		jne clearwindow
 10635                              <1> 	endwindowclear:
 10636 00008747 C605[D5230000]00    <1> 		mov byte [termcopyon], 0
 10637 0000874E 8B3D[D47F0000]      <1> 		mov edi, [lastpos]
 10638 00008754 8B35[3F850000]      <1> 		mov esi, [grphbuf + 2]
 10639 0000875A 668B15[43850000]    <1> 		mov dx, [grphbuf + 6]
 10640 00008761 668B0D[45850000]    <1> 		mov cx, [grphbuf + 8]
 10641 00008768 668B1D[3D850000]    <1> 		mov bx, [grphbuf]
 10642 0000876F 66A1[47850000]      <1> 		mov ax, [grphbuf + 10]
 10643 00008775 88DC                <1> 		mov ah, bl
 10644 00008777 8B1D[49850000]      <1> 		mov ebx, [grphbuf + 12]
 10645                              <1> 	showgraphicsreplace:
 10646 0000877D 897702              <1> 		mov [edi + 2], esi
 10647 00008780 66895706            <1> 		mov [edi + 6], dx
 10648 00008784 66894F08            <1> 		mov [edi + 8], cx
 10649 00008788 895F0C              <1> 		mov [edi + 12], ebx
 10650 0000878B 30FF                <1> 		xor bh, bh
 10651 0000878D 88E3                <1> 		mov bl, ah
 10652 0000878F 30E4                <1> 		xor ah, ah
 10653 00008791 6689470A            <1> 		mov [edi + 10], ax
 10654 00008795 66891F              <1> 		mov [edi], bx
 10655 00008798 8B5F0C              <1> 		mov ebx, [edi + 12]
 10656 0000879B 668B470A            <1> 		mov ax, [edi + 10]
 10657 0000879F C3                  <1> 		ret
 10658                              <1> 	showgraphicsnew:
 10659 000087A0 BF[2DBF0300]        <1> 		mov edi, graphicstable
 10660                              <1> 	shwgrph2:
 10661 000087A5 66813F0000          <1> 		cmp word [edi], 0
 10662 000087AA 74D1                <1> 		je showgraphicsreplace
 10663 000087AC 81C710000000        <1> 		add edi, 16
 10664 000087B2 81FF[2DC10300]      <1> 		cmp edi, graphicstableend
 10665 000087B8 72EB                <1> 		jb shwgrph2
 10666                              <1> 	showgraphicsdone:
 10667 000087BA C3                  <1> 		ret
 10668                              <1> 	
 10669                              <1> putpixel: ;color in si, point is (dx,cx)
 10670                              <1> 		;destroys edi, ebx, eax
 10671 000087BB 6650                <1> 	push ax
 10672 000087BD 6653                <1> 	push bx
 10673 000087BF 31C0                <1> 	xor eax, eax
 10674 000087C1 31DB                <1> 	xor ebx, ebx
 10675 000087C3 31FF                <1> 	xor edi, edi
 10676 000087C5 668B1D[9A580000]    <1> 	mov bx, [resolutiony]
 10677 000087CC 66A1[98580000]      <1> 	mov ax, [resolutionx]
 10678 000087D2 6639C2              <1> 	cmp dx, ax
 10679 000087D5 7720                <1> 	ja .doneput
 10680 000087D7 66D1E0              <1> 	shl ax, 1
 10681 000087DA 6639D9              <1> 	cmp cx, bx
 10682 000087DD 7718                <1> 	ja .doneput
 10683 000087DF 6689CB              <1> 	mov bx, cx
 10684 000087E2 52                  <1> 	push edx
 10685 000087E3 F7E3                <1> 	mul ebx
 10686 000087E5 5A                  <1> 	pop edx
 10687 000087E6 6601D7              <1> 	add di, dx
 10688 000087E9 6601D7              <1> 	add di, dx
 10689 000087EC 01C7                <1> 	add edi, eax
 10690 000087EE 033D[AE580000]      <1> 	add edi, [physbaseptr]
 10691 000087F4 668937              <1> 	mov [edi], si
 10692                              <1> .doneput:
 10693 000087F7 665B                <1> 	pop bx
 10694 000087F9 6658                <1> 	pop ax
 10695 000087FB C3                  <1> 	ret
 10696                              <1> 	
 10697                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10698 000087FC 31FF                <1> 	xor edi, edi
 10699 000087FE 31C0                <1> 	xor eax, eax
 10700 00008800 31DB                <1> 	xor ebx, ebx
 10701 00008802 668B1D[86590000]    <1> 	mov bx, [resolutionx2]
 10702 00008809 6689D7              <1> 	mov di, dx
 10703 0000880C 6601D7              <1> 	add di, dx
 10704 0000880F 6689C8              <1> 	mov ax, cx
 10705 00008812 F7E3                <1> 	mul ebx
 10706 00008814 01C7                <1> 	add edi, eax
 10707 00008816 033D[AE580000]      <1> 	add edi, [physbaseptr]
 10708 0000881C C3                  <1> 	ret
 10709                              <1> 
 10710 0000881D 00                  <1> 	mouseon db 0
 10711 0000881E 0000                <1> 	icon dw 0	;pointer to icon
 10712 00008820 00000000            <1> 	codepointer dd 0 ;pointer to code
 10713 00008824 00                  <1> 	iconselected db 0
 10714                                  %endif
 10715                                  %ifdef network.included
 10716                                  	%include "source/network.asm"
 10717                              <1> network.init:
 10718                              <1> %ifdef rtl8139.included
 10719                              <1> 	%include "source/drivers/network/rtl8139.asm"
 10720                              <1> %endif
 10721                              <1> %ifdef rtl8169.included
 10722                              <1> 	%include "source/drivers/network/rtl8169.asm"
 10723                              <1> %endif
 10724                              <1> %ifdef ne2000.included
 10725                              <1> 	%include "source/drivers/network/ne2000.asm"
 10726                              <1> %endif
 10727                              <1> %ifdef i8254x.included
 10728                              <1> 	%include "source/drivers/network/i8254x.asm"
 10729                              <2> ;Intel 8254x NIC DRIVER
 10730                              <2> i8254x:
 10731 00008825 E805000000          <2> 	call .init
 10732 0000882A E981020000          <2> 	jmp .end
 10733                              <2> 
 10734                              <2> ;REGISTERS
 10735                              <2> .EEC equ 0x10
 10736                              <2> .EERD equ 0x14
 10737                              <2> .TCTL equ 0x400
 10738                              <2> .TIPG equ 0x410
 10739                              <2> .TDBAL equ 0x3800
 10740                              <2> .TDBAH equ 0x3804
 10741                              <2> .TDLEN equ 0x3808
 10742                              <2> .TDH equ 0x3810
 10743                              <2> .TDT equ 0x3818
 10744                              <2> .RAL equ 0x5400
 10745                              <2> .RAH equ 0x5404
 10746                              <2> ;CODE
 10747                              <2> .init:	;should find card, get mac, and initialize card
 10748 0000882F 31C0                <2> 	xor eax, eax
 10749 00008831 A2[CB650000]        <2> 	mov [pcifunction], al
 10750 00008836 A2[C9650000]        <2> 	mov [pcibus], al
 10751 0000883B A2[CA650000]        <2> 	mov [pcidevice], al
 10752 00008840 B002                <2> 	mov al, 0x02 ;type code
 10753 00008842 A2[5A660000]        <2> 	mov [pcitype], al
 10754 00008847 B886800010          <2> 	mov eax, 0x10008086
 10755 0000884C A3[CE650000]        <2> 	mov [pcidevid], eax
 10756 00008851 BBFFFF00FE          <2> 	mov ebx, 0xFE00FFFF
 10757 00008856 891D[D2650000]      <2> 	mov [pcidevidmask], ebx
 10758 0000885C E875DDFFFF          <2> 	call getpcimem
 10759 00008861 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10760 00008867 7501                <2> 	jne .initnic
 10761 00008869 C3                  <2> 	ret
 10762                              <2> .initnic:
 10763 0000886A 8915[048A0000]      <2> 	mov [.basenicaddr], edx
 10764 00008870 89D1                <2> 	mov ecx, edx
 10765 00008872 E848A9FFFF          <2> 	call showhex	;for debugging, please remove
 10766 00008877 BE[CE7C0500]        <2> 	mov esi, rbuffstart
 10767 0000887C B900200000          <2> 	mov ecx, 8192
 10768 00008881 31C0                <2> 	xor eax, eax
 10769                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 10770 00008883 8806                <2> 	mov [esi], al
 10771 00008885 46                  <2> 	inc esi
 10772 00008886 6649                <2> 	dec cx
 10773 00008888 6681F90000          <2> 	cmp cx, 0
 10774 0000888D 75F4                <2> 	jne .clearrbuff
 10775                              <2> .findmac:
 10776 0000888F 8B1D[048A0000]      <2> 	mov ebx, [.basenicaddr]
 10777                              <2> 	; Setup Control Register
 10778 00008895 B861030000          <2> 	mov eax, 0x361
 10779 0000889A 8903                <2> 	mov [ebx], eax
 10780                              <2> 	; Setup Transmission Descriptors
 10781 0000889C BF[308A0000]        <2> 	mov edi, .tdesc
 10782 000088A1 A1[41020000]        <2> 	mov eax, [basecache]
 10783 000088A6 C1E004              <2> 	shl eax, 4
 10784 000088A9 01F8                <2> 	add eax, edi
 10785 000088AB 898300380000        <2> 	mov [ebx + .TDBAL], eax
 10786 000088B1 31C0                <2> 	xor eax, eax
 10787 000088B3 898310380000        <2> 	mov [ebx + .TDH], eax
 10788 000088B9 898318380000        <2> 	mov [ebx + .TDT], eax
 10789 000088BF 898304380000        <2> 	mov [ebx + .TDBAH], eax
 10790 000088C5 66B88000            <2> 	mov ax, 128
 10791 000088C9 898308380000        <2> 	mov [ebx + .TDLEN], eax
 10792 000088CF B80A010401          <2> 	mov eax, 0x104010A
 10793 000088D4 898300040000        <2> 	mov [ebx + .TCTL], eax	;turn on transmission, set up other registers
 10794 000088DA B80A285000          <2> 	mov eax, 0x50280A
 10795 000088DF 898310040000        <2> 	mov [ebx + .TIPG], eax	;setup TIPG
 10796                              <2> 	;Setup Receive Registers
 10797 000088E5 BF[098A0000]        <2> 	mov edi, .mac
 10798 000088EA 81C300540000        <2> 	add ebx, .RAL
 10799 000088F0 31D2                <2> 	xor edx, edx
 10800 000088F2 B903000000          <2> 	mov ecx, 3
 10801                              <2> .macloop:
 10802 000088F7 E8BC000000          <2> 	call .eepromread
 10803 000088FC 668907              <2> 	mov [edi], ax
 10804 000088FF 668903              <2> 	mov [ebx], ax
 10805 00008902 42                  <2> 	inc edx
 10806 00008903 81C302000000        <2> 	add ebx, 2
 10807 00008909 81C702000000        <2> 	add edi, 2
 10808 0000890F E2E6                <2> 	loop .macloop
 10809 00008911 66B80080            <2> 	mov ax, 0x8000
 10810 00008915 668903              <2> 	mov [ebx], ax	;set address valid bit
 10811                              <2> 
 10812 00008918 B9[098A0000]        <2> 	mov ecx, .mac
 10813 0000891D E83F020000          <2> 	call showmac
 10814 00008922 BE[0F8A0000]        <2> 	mov esi, .name
 10815 00008927 E81C94FFFF          <2> 	call print
 10816 0000892C BE[178A0000]        <2> 	mov esi, .initmsg
 10817 00008931 E81294FFFF          <2> 	call print
 10818 00008936 C605[088A0000]01    <2> 	mov byte [.nicconfig], 1
 10819 0000893D 31DB                <2> 	xor ebx, ebx
 10820 0000893F C3                  <2> 	ret
 10821                              <2> 	
 10822                              <2> .sendpacket:
 10823 00008940 803D[088A0000]00    <2> 	cmp byte [.nicconfig], 0
 10824 00008947 7512                <2> 	jne .sendit
 10825 00008949 56                  <2> 	push esi
 10826 0000894A 57                  <2> 	push edi
 10827 0000894B E8DFFEFFFF          <2> 	call .init
 10828 00008950 5F                  <2> 	pop edi
 10829 00008951 5E                  <2> 	pop esi
 10830 00008952 81FB00000000        <2> 	cmp ebx, 0
 10831 00008958 7401                <2> 	je .sendit
 10832 0000895A C3                  <2> 	ret
 10833                              <2> .sendit:	;packet start in edi, packet end in esi
 10834 0000895B 8B0D[098A0000]      <2> 	mov ecx, [.mac]
 10835 00008961 894F06              <2> 	mov [edi + 6], ecx
 10836 00008964 668B0D[0D8A0000]    <2> 	mov cx, [.mac + 4]
 10837 0000896B 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 10838 0000896F 8B1D[048A0000]      <2> 	mov ebx, [.basenicaddr]
 10839 00008975 29FE                <2> 	sub esi, edi
 10840 00008977 A1[41020000]        <2> 	mov eax, [basecache]
 10841 0000897C C1E004              <2> 	shl eax, 4
 10842 0000897F 01F8                <2> 	add eax, edi	;ALWAYS ADD THE VIRTUAL MEMORY OFFSET!
 10843 00008981 A3[308A0000]        <2> 	mov [.tdesc], eax	;Low Address
 10844 00008986 8935[388A0000]      <2> 	mov [.tdesc + 8], esi	;Length
 10845 0000898C B8000B0000          <2> 	mov eax, 0xB00
 10846 00008991 A3[3A8A0000]        <2> 	mov [.tdesc + 10], eax	;Command
 10847 00008996 B810000000          <2> 	mov eax, 16
 10848 0000899B 898318380000        <2> 	mov [ebx + .TDT], eax	;Trail of TDESC ring buffer
 10849                              <2> .checksta:
 10850 000089A1 8B0D[3C8A0000]      <2> 	mov ecx, [.tdesc + 12]
 10851 000089A7 81E101000000        <2> 	and ecx, 1
 10852 000089AD 81F900000000        <2> 	cmp ecx, 0
 10853 000089B3 74EC                <2> 	je .checksta
 10854 000089B5 31DB                <2> 	xor ebx, ebx
 10855 000089B7 C3                  <2> 	ret
 10856                              <2> 	
 10857                              <2> .eepromread:	;location in EEPROM in edx (actually just dl)
 10858 000089B8 8B35[048A0000]      <2> 	mov esi, [.basenicaddr]
 10859 000089BE 8B4610              <2> 	mov eax, [esi + .EEC]
 10860 000089C1 0D40000000          <2> 	or eax, 1000000b
 10861 000089C6 894610              <2> 	mov [esi + .EEC], eax	;turn software access on
 10862                              <2> .waiteeprom:
 10863 000089C9 8B4610              <2> 	mov eax, [esi + .EEC]
 10864 000089CC 2580000000          <2> 	and eax, 10000000b
 10865 000089D1 3D80000000          <2> 	cmp eax, 10000000b
 10866 000089D6 75F1                <2> 	jne .waiteeprom
 10867 000089D8 8B4614              <2> 	mov eax, [esi + .EERD]
 10868 000089DB 31C0                <2> 	xor eax, eax
 10869 000089DD 88D4                <2> 	mov ah, dl 	;eeprom address
 10870 000089DF 0C01                <2> 	or al, 1	;start read
 10871 000089E1 894614              <2> 	mov [esi + .EERD], eax
 10872                              <2> .waiteepromread:
 10873 000089E4 8B4614              <2> 	mov eax, [esi + .EERD]
 10874 000089E7 2510000000          <2> 	and eax, 10000b
 10875 000089EC 3D10000000          <2> 	cmp eax, 10000b
 10876 000089F1 75F1                <2> 	jne .waiteepromread
 10877 000089F3 8B4614              <2> 	mov eax, [esi + .EERD]
 10878 000089F6 668B4610            <2> 	mov ax, [esi + .EEC]
 10879 000089FA 24BF                <2> 	and al, 10111111b
 10880 000089FC 66894610            <2> 	mov [esi + .EEC], ax	;turn software access off
 10881 00008A00 C1E810              <2> 	shr eax, 16	;AX has the requested word
 10882 00008A03 C3                  <2> 	ret
 10883                              <2> 
 10884 00008A04 00000000            <2> .basenicaddr dd 0
 10885 00008A08 00                  <2> .nicconfig db 0
 10886 00008A09 000000000000        <2> .mac db 0,0,0,0,0,0
 10887 00008A0F 4938323534582000    <2> .name db "I8254X ",0
 10888 00008A17 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10889 00008A20 65640A00            <2>
 10890 00008A24 00<rept>            <2> align 16, db 0
 10891                              <2> .tdesc:
 10892 00008A30 00000000            <2> 	dd 0	;Address Low = 0
 10893 00008A34 00000000            <2> 	dd 0	;Address High = 4
 10894 00008A38 0000                <2> 	dw 0	;Length = 8
 10895 00008A3A 00                  <2> 	db 0	;CSO = 10
 10896 00008A3B 00                  <2> 	db 0	;CMD = 11
 10897 00008A3C 00                  <2> 	db 0	;STA, RSV = 12
 10898 00008A3D 00                  <2> 	db 0	;CSS = 13
 10899 00008A3E 0000                <2> 	dw 0	;Special = 14
 10900 00008A40 00<rept>            <2> times (128-16) db 0
 10901                              <2> .end:
 10902                              <1> %endif
 10903 00008AB0 C3                  <1> 	ret
 10904                              <1> 
 10905                              <1> sendpacket: ;packet start in edi, end in esi
 10906                              <1> 	%ifdef rtl8139.included
 10907                              <1> 		push edi
 10908                              <1> 		push esi
 10909                              <1> 		call rtl8139.sendpacket
 10910                              <1> 		pop esi
 10911                              <1> 		pop edi
 10912                              <1> 	%endif
 10913                              <1> 	%ifdef rtl8169.included
 10914                              <1> 		push edi
 10915                              <1> 		push esi
 10916                              <1> 		call rtl8169.sendpacket
 10917                              <1> 		pop esi
 10918                              <1> 		pop edi
 10919                              <1> 	%endif
 10920                              <1> 	%ifdef ne2000.included
 10921                              <1> 		push edi
 10922                              <1> 		push esi
 10923                              <1> 		call ne2000.sendpacket
 10924                              <1> 		pop esi
 10925                              <1> 		pop edi
 10926                              <1> 	%endif
 10927                              <1> 	%ifdef i8254x.included
 10928 00008AB1 E88AFEFFFF          <1> 		call i8254x.sendpacket
 10929                              <1> 	%endif
 10930 00008AB6 C3                  <1> 	ret
 10931                              <1> 
 10932                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
 10933 00008AB7 31C0                <1> 	xor eax, eax
 10934 00008AB9 31DB                <1> 	xor ebx, ebx
 10935 00008ABB 31C9                <1> 	xor ecx, ecx
 10936                              <1> .lp:
 10937 00008ABD 8A07                <1> 	mov al, [edi]
 10938 00008ABF 8A6701              <1> 	mov ah, [edi + 1]
 10939 00008AC2 01C3                <1> 	add ebx, eax
 10940 00008AC4 81C702000000        <1> 	add edi, 2
 10941 00008ACA 39F7                <1> 	cmp edi, esi
 10942 00008ACC 72EF                <1> 	jb .lp
 10943 00008ACE 66B9FFFF            <1> 	mov cx, 0xFFFF
 10944 00008AD2 6689D8              <1> 	mov ax, bx
 10945 00008AD5 C1EB10              <1> 	shr ebx, 16
 10946 00008AD8 6601D8              <1> 	add ax, bx
 10947 00008ADB 6629C1              <1> 	sub cx, ax
 10948 00008ADE C3                  <1> 	ret
 10949                              <1> 	
 10950                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
 10951 00008ADF 31DB                <1> 	xor ebx, ebx
 10952 00008AE1 31C9                <1> 	xor ecx, ecx
 10953 00008AE3 31D2                <1> 	xor edx, edx
 10954                              <1> .mlp:
 10955 00008AE5 89F7                <1> 	mov edi, esi
 10956 00008AE7 4F                  <1> 	dec edi
 10957                              <1> .lp:
 10958 00008AE8 47                  <1> 	inc edi
 10959 00008AE9 8A07                <1> 	mov al, [edi]
 10960 00008AEB 3C20                <1> 	cmp al, " "
 10961 00008AED 7408                <1> 	je .dnlp
 10962 00008AEF 3C00                <1> 	cmp al, 0
 10963 00008AF1 7404                <1> 	je .dnlp
 10964 00008AF3 3C2E                <1> 	cmp al, "."
 10965 00008AF5 75F1                <1> 	jne .lp
 10966                              <1> .dnlp:
 10967 00008AF7 30C0                <1> 	xor al, al
 10968 00008AF9 8807                <1> 	mov [edi], al
 10969 00008AFB 53                  <1> 	push ebx
 10970 00008AFC 56                  <1> 	push esi
 10971 00008AFD 57                  <1> 	push edi
 10972 00008AFE 31FF                <1> 	xor edi, edi
 10973 00008B00 E866A8FFFF          <1> 	call cnvrttxt
 10974 00008B05 5E                  <1> 	pop esi
 10975 00008B06 5F                  <1> 	pop edi ;i intentionally switch them
 10976 00008B07 5B                  <1> 	pop ebx
 10977 00008B08 46                  <1> 	inc esi
 10978 00008B09 BF[218B0000]        <1> 	mov edi, ipstr
 10979 00008B0E 880C1F              <1> 	mov [edi + ebx], cl
 10980 00008B11 43                  <1> 	inc ebx
 10981 00008B12 81FB04000000        <1> 	cmp ebx, 4
 10982 00008B18 72CB                <1> 	jb .mlp
 10983 00008B1A 8B0D[218B0000]      <1> 	mov ecx, [ipstr]
 10984 00008B20 C3                  <1> 	ret
 10985 00008B21 00000000            <1> ipstr dd 0
 10986                              <1> showip: 	;put the ip address in ecx
 10987 00008B25 89C8                <1> 	mov eax, ecx
 10988 00008B27 30DB                <1> 	xor bl, bl
 10989                              <1> .lp:
 10990 00008B29 3C00                <1> 	cmp al, 0
 10991 00008B2B 750B                <1> 	jne .nozeroprint
 10992 00008B2D B030                <1> 	mov al, "0"
 10993 00008B2F 50                  <1> 	push eax
 10994 00008B30 E8A198FFFF          <1> 	call prcharq
 10995 00008B35 58                  <1> 	pop eax
 10996 00008B36 30C0                <1> 	xor al, al
 10997                              <1> .nozeroprint:
 10998 00008B38 31C9                <1> 	xor ecx, ecx
 10999 00008B3A 88C1                <1> 	mov cl, al
 11000 00008B3C E848A7FFFF          <1> 	call showdec
 11001 00008B41 C1E808              <1> 	shr eax, 8
 11002 00008B44 FEC3                <1> 	inc bl
 11003 00008B46 80FB04              <1> 	cmp bl, 4
 11004 00008B49 7312                <1> 	jae .done
 11005 00008B4B 50                  <1> 	push eax
 11006 00008B4C 6653                <1> 	push bx
 11007 00008B4E BE[5E8B0000]        <1> 	mov esi, .dot
 11008 00008B53 E8F091FFFF          <1> 	call print
 11009 00008B58 665B                <1> 	pop bx
 11010 00008B5A 58                  <1> 	pop eax
 11011 00008B5B EBCC                <1> 	jmp .lp
 11012                              <1> .done:
 11013 00008B5D C3                  <1> 	ret
 11014 00008B5E 082E00              <1> .dot db 8,".",0
 11015                              <1> showmac:	;mac begins in [ecx]
 11016 00008B61 BE[B18B0000]        <1> 	mov esi, macprint
 11017 00008B66 89CF                <1> 	mov edi, ecx
 11018 00008B68 81C106000000        <1> 	add ecx, 6
 11019                              <1> showmacloop:
 11020 00008B6E 8A07                <1> 	mov al, [edi]
 11021 00008B70 8A27                <1> 	mov ah, [edi]
 11022 00008B72 C0E804              <1> 	shr al, 4
 11023 00008B75 C0E404              <1> 	shl ah, 4
 11024 00008B78 C0EC04              <1> 	shr ah, 4
 11025 00008B7B 0430                <1> 	add al, 48
 11026 00008B7D 3C39                <1> 	cmp al, "9"
 11027 00008B7F 7606                <1> 	jbe .goodal
 11028 00008B81 2C30                <1> 	sub al, 48
 11029 00008B83 2C0A                <1> 	sub al, 0xA
 11030 00008B85 0441                <1> 	add al, "A"
 11031                              <1> .goodal:
 11032 00008B87 80C430              <1> 	add ah, 48
 11033 00008B8A 80FC39              <1> 	cmp ah, "9"
 11034 00008B8D 7609                <1> 	jbe .goodah
 11035 00008B8F 80EC30              <1> 	sub ah, 48
 11036 00008B92 80EC0A              <1> 	sub ah, 0xA
 11037 00008B95 80C441              <1> 	add ah, "A"
 11038                              <1> .goodah:
 11039 00008B98 668906              <1> 	mov [esi], ax
 11040 00008B9B 81C603000000        <1> 	add esi, 3
 11041 00008BA1 47                  <1> 	inc edi
 11042 00008BA2 39CF                <1> 	cmp edi, ecx
 11043 00008BA4 72C8                <1> 	jb showmacloop
 11044 00008BA6 BE[B18B0000]        <1> 	mov esi, macprint
 11045 00008BAB E89891FFFF          <1> 	call print
 11046 00008BB0 C3                  <1> 	ret
 11047                              <1> 	
 11048 00008BB1 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
 11049 00008BBA 30303A30303A303020- <1>
 11050 00008BC3 00                  <1>
 11051 00008BC4 00000000            <1> ethernetend dw 0,0
 11052 00008BC8 C0A80002            <1> sysip db 192,168,0,2
 11053 00008BCC 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
 11054                                  %endif
 11055                                      %include "source/data.asm"
 11056 00008BD2 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
 11057 00008BDA 73687573683A2000    <1> 	notfound1 db "shush: ",0
 11058 00008BE2 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
 11059 00008BEB 6E640A00            <1>
 11060 00008BEF 757365726E616D653A- <1> 	userask db "username:",0
 11061 00008BF8 00                  <1>
 11062 00008BF9 70617373776F72643A- <1> 	pwdask	db	"password:",0
 11063 00008C02 00                  <1>
 11064 00008C03 40                  <1> 	computer db "@"
 11065                              <1> %ifdef io.serial
 11066                              <1> 	computername	db	"SollerOS.",io.serial," ",0
 11067                              <1> %else
 11068 00008C04 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
 11069 00008C0D 00                  <1>
 11070                              <1> %endif
 11071 00008C0E 5D242000            <1> 	endprompt db "]$ ",0
 11072 00008C12 0D                  <1> 	crlf 	db  13
 11073 00008C13 0A00                <1> 	line	db	10,0
 11074                              <1> 	userlst:
 11075 00008C15 726F6F7400          <1> 			db "root",0
 11076 00008C1A 617765736F6D65706F- <1> 			db "awesomepower",0
 11077 00008C23 77657200            <1>
 11078 00008C27 7573657200          <1> 			db "user",0
 11079 00008C2C 70617373776F726400  <1> 			db "password",0
 11080 00008C35 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
 11081 00008C37 00                  <1> 			db 0
 11082                              <1> 	userlstend:
 11083                              <1> 	
 11084 00008C38 00                  <1> 	guion db 0
 11085 00008C39 00                  <1> 	DriveNumber db 0
 11086 00008C3A 00000000            <1> 	lbaad dd 0
 11087 00008C3E 00<rept>            <1> 	memlistbuf times 576 db 0
 11088 00008E7E 00000000            <1> 	memlistend: dd 0
 11089                              <1> %ifdef io.serial
 11090                              <1> %else
 11091 00008E7E <incbin>            <1> fonts:	incbin "source/fonts/fonts.pak"
 11092                              <1> fontend:
 11093                              <1> %endif
 11094                              <1> osend:	;this is the end of the operating system's space on disk
 11095                                  %ifdef disk.none
 11096                                  	diskfileindex:
 11097                                  	enddiskfileindex:
 11098                                  	align 512, db 0
 11099                                      %include "source/bss.asm"
 11100                                  %else
 11101                                      %include "build/fileindex.asm"
 11102                              <1> diskfileindex:
 11103 00038E82 617267746573742E65- <1> db "argtest.elf",0
 11104 00038E8B 6C6600              <1>
 11105 00038E8E C9010000            <1> dd (f0-$$)/512
 11106 00038E92 06010000            <1> dd (f1-f0)/512
 11107 00038E96 6261636B67726F756E- <1> db "background.bmp",0
 11108 00038E9F 642E626D7000        <1>
 11109 00038EA5 CF020000            <1> dd (f1-$$)/512
 11110 00038EA9 01140000            <1> dd (f2-f1)/512
 11111 00038EAD 626F6F742E736800    <1> db "boot.sh",0
 11112 00038EB5 D0160000            <1> dd (f2-$$)/512
 11113 00038EB9 01000000            <1> dd (f3-f2)/512
 11114 00038EBD 63686172746573742E- <1> db "chartest.elf",0
 11115 00038EC6 656C6600            <1>
 11116 00038ECA D1160000            <1> dd (f3-$$)/512
 11117 00038ECE 26010000            <1> dd (f4-f3)/512
 11118 00038ED2 646F73746573742E63- <1> db "dostest.com",0
 11119 00038EDB 6F6D00              <1>
 11120 00038EDE F7170000            <1> dd (f4-$$)/512
 11121 00038EE2 01000000            <1> dd (f5-f4)/512
 11122 00038EE6 6578656300          <1> db "exec",0
 11123 00038EEB F8170000            <1> dd (f5-$$)/512
 11124 00038EEF 01000000            <1> dd (f6-f5)/512
 11125 00038EF3 66696E616C636F756E- <1> db "finalcount.sn",0
 11126 00038EFC 742E736E00          <1>
 11127 00038F01 F9170000            <1> dd (f6-$$)/512
 11128 00038F05 01000000            <1> dd (f7-f6)/512
 11129 00038F09 666C6F7070792E7478- <1> db "floppy.txt",0
 11130 00038F12 7400                <1>
 11131 00038F14 FA170000            <1> dd (f7-$$)/512
 11132 00038F18 0A000000            <1> dd (f8-f7)/512
 11133 00038F1C 666F726B00          <1> db "fork",0
 11134 00038F21 04180000            <1> dd (f8-$$)/512
 11135 00038F25 01000000            <1> dd (f9-f8)/512
 11136 00038F29 677261766974792E65- <1> db "gravity.elf",0
 11137 00038F32 6C6600              <1>
 11138 00038F35 05180000            <1> dd (f9-$$)/512
 11139 00038F39 E0000000            <1> dd (f10-f9)/512
 11140 00038F3D 6775697465737400    <1> db "guitest",0
 11141 00038F45 E5180000            <1> dd (f10-$$)/512
 11142 00038F49 03000000            <1> dd (f11-f10)/512
 11143 00038F4D 68656C6C6F776F726C- <1> db "helloworld.elf",0
 11144 00038F56 642E656C6600        <1>
 11145 00038F5C E8180000            <1> dd (f11-$$)/512
 11146 00038F60 D7010000            <1> dd (f12-f11)/512
 11147 00038F64 696E7400            <1> db "int",0
 11148 00038F68 BF1A0000            <1> dd (f12-$$)/512
 11149 00038F6C 01000000            <1> dd (f13-f12)/512
 11150 00038F70 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 11151 00038F79 2E736E00            <1>
 11152 00038F7D C01A0000            <1> dd (f13-$$)/512
 11153 00038F81 01000000            <1> dd (f14-f13)/512
 11154 00038F85 6D6172696F2E736E00  <1> db "mario.sn",0
 11155 00038F8E C11A0000            <1> dd (f14-$$)/512
 11156 00038F92 01000000            <1> dd (f15-f14)/512
 11157 00038F96 6D6F6D656E742E7761- <1> db "moment.wav",0
 11158 00038F9F 7600                <1>
 11159 00038FA1 C21A0000            <1> dd (f15-$$)/512
 11160 00038FA5 570A0000            <1> dd (f16-f15)/512
 11161 00038FA9 70692E656C6600      <1> db "pi.elf",0
 11162 00038FB0 19250000            <1> dd (f16-$$)/512
 11163 00038FB4 1F010000            <1> dd (f17-f16)/512
 11164 00038FB8 736F6C6C65726F732E- <1> db "solleros.bmp",0
 11165 00038FC1 626D7000            <1>
 11166 00038FC5 38260000            <1> dd (f17-$$)/512
 11167 00038FC9 B0020000            <1> dd (f18-f17)/512
 11168 00038FCD 736F6C6C65726F732E- <1> db "solleros.txt",0
 11169 00038FD6 74787400            <1>
 11170 00038FDA E8280000            <1> dd (f18-$$)/512
 11171 00038FDE 01000000            <1> dd (f19-f18)/512
 11172 00038FE2 736F6E676F74696D65- <1> db "songotime.sn",0
 11173 00038FEB 2E736E00            <1>
 11174 00038FEF E9280000            <1> dd (f19-$$)/512
 11175 00038FF3 01000000            <1> dd (f20-f19)/512
 11176 00038FF7 73736500            <1> db "sse",0
 11177 00038FFB EA280000            <1> dd (f20-$$)/512
 11178 00038FFF 02000000            <1> dd (f21-f20)/512
 11179 00039003 737464696F74657374- <1> db "stdiotest.elf",0
 11180 0003900C 2E656C6600          <1>
 11181 00039011 EC280000            <1> dd (f21-$$)/512
 11182 00039015 27010000            <1> dd (f22-f21)/512
 11183 00039019 74656C7900          <1> db "tely",0
 11184 0003901E 132A0000            <1> dd (f22-$$)/512
 11185 00039022 01000000            <1> dd (f23-f22)/512
 11186 00039026 74696D65746573742E- <1> db "timetest.elf",0
 11187 0003902F 656C6600            <1>
 11188 00039033 142A0000            <1> dd (f23-$$)/512
 11189 00039037 04010000            <1> dd (f24-f23)/512
 11190 0003903B 7475746F7269616C2E- <1> db "tutorial.sh",0
 11191 00039044 736800              <1>
 11192 00039047 182B0000            <1> dd (f24-$$)/512
 11193 0003904B 03000000            <1> dd (f25-f24)/512
 11194 0003904F 756E667300          <1> db "unfs",0
 11195 00039054 1B2B0000            <1> dd (f25-$$)/512
 11196 00039058 02000000            <1> dd (f26-f25)/512
 11197 0003905C 7574662D382E747874- <1> db "utf-8.txt",0
 11198 00039065 00                  <1>
 11199 00039066 1D2B0000            <1> dd (f26-$$)/512
 11200 0003906A 02000000            <1> dd (f27-f26)/512
 11201 0003906E 766963746F72792E77- <1> db "victory.wav",0
 11202 00039077 617600              <1>
 11203 0003907A 1F2B0000            <1> dd (f27-$$)/512
 11204 0003907E 16000000            <1> dd (f28-f27)/512
 11205 00039082 5F696D672E62696E00  <1> db "_img.bin",0
 11206 0003908B 352B0000            <1> dd (f28-$$)/512
 11207 0003908F D7020000            <1> dd (f29-f28)/512
 11208                              <1> enddiskfileindex:
 11209                              <1> 
 11210                                      %include "source/bss.asm"
 11211 00039093 90                  <1> align 4, nop
 11212                              <1> bssstart: equ $
 11213                              <1> bsscopy equ $
 11214                              <1> initialstack equ bsscopy
 11215                              <1> stackend equ initialstack + 4000
 11216                              <1> sigtable equ stackend + 96
 11217                              <1> fileindex: equ sigtable + 4
 11218                              <1> fileindexend: equ fileindex + 1024
 11219                              <1> previousstack equ fileindexend
 11220                              <1> lastfolderloc equ previousstack + 4
 11221                              <1> currentfolderloc equ lastfolderloc + 4
 11222                              <1> currentfolder equ currentfolderloc + 4
 11223                              <1> currentfolderend equ currentfolder + 512
 11224                              <1> uid equ currentfolderend
 11225                              <1> ranboot equ uid + 4
 11226                              <1> IFON equ ranboot + 1
 11227                              <1> IFTRUE equ IFON + 1
 11228                              <1> BATCHPOS equ IFTRUE + 100
 11229                              <1> BATCHISON equ BATCHPOS + 4
 11230                              <1> LOOPON equ BATCHISON + 1
 11231                              <1> LOOPPOS	equ LOOPON + 1
 11232                              <1> variables: equ LOOPPOS + 4
 11233                              <1> varend: equ variables + 4096
 11234                              <1> buftxt2: equ varend
 11235                              <1> buftxt: equ buftxt2 + 1024
 11236                              <1> buftxtend: equ buftxt + 1024
 11237                              <1> buf2: equ buftxtend
 11238                              <1> numbuf: equ buf2 + 20
 11239                              <1> %ifdef io.serial
 11240                              <1> 	lastcommandpos equ numbuf + 1
 11241                              <1> %else
 11242                              <1> 	%ifdef gui.included
 11243                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 11244                              <1> 		graphicstableend equ graphicstable + 200h
 11245                              <1> 		%ifdef gui.background
 11246                              <1> 			backgroundbuffer equ graphicstableend
 11247                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 11248                              <1> 			mousecolorbuf equ backgroundbufferend
 11249                              <1> 		%else
 11250                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 11251                              <1> 		%endif
 11252                              <1> 		mcolorend equ mousecolorbuf + 256
 11253                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 11254                              <1> 		videobufend	equ videobuf + 210*65*4;2
 11255                              <1> 		videobuf2 equ videobufend
 11256                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
 11257                              <1> 	%else
 11258                              <1> 		videobuf equ numbuf + 1
 11259                              <1> 		videobufend equ videobuf + 80*30*4
 11260                              <1> 		videobuf2 equ videobufend
 11261                              <1> 		videobuf2end equ videobuf2 + 80*30*4
 11262                              <1> 	%endif
 11263                              <1> 	lastcommandpos: equ videobuf2end
 11264                              <1> %endif
 11265                              <1> 	commandbufpos: equ lastcommandpos + 4
 11266                              <1> 	commandlistentries: equ commandbufpos + 4
 11267                              <1> 	commandsentered: equ commandlistentries + 4
 11268                              <1> 	commandbuf: equ commandsentered + 4
 11269                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 11270                              <1> %ifdef network.included
 11271                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 11272                              <1> 	rbuffend equ rbuffstart + 8212
 11273                              <1> %else
 11274                              <1> 	rbuffstart equ commandbufend
 11275                              <1> 	rbuffend equ commandbufend
 11276                              <1> %endif
 11277                              <1> %ifdef threads.included
 11278                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 11279                              <1> 	threadlistend: equ threadlist + 1024*4
 11280                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
 11281                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
 11282                              <1> 	bssend equ stack1 + 1024*1024
 11283                              <1> %else
 11284                              <1> 	bssend equ rbuffend
 11285                              <1> %endif
 11286                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 11287                                      %include "build/files.asm"
 11288 00039094 00<rept>            <1> align 512,db 0
 11289                              <1> f0:
 11290 00039094 <incbin>            <1> incbin "included/argtest.elf"
 11291 00059D37 00<rept>            <1> align 512,db 0
 11292                              <1> f1:
 11293 00059D37 <incbin>            <1> incbin "included/background.bmp"
 11294 002D9E46 00<rept>            <1> align 512,db 0
 11295                              <1> f2:
 11296 002D9E46 <incbin>            <1> incbin "included/boot.sh"
 11297 002DA0FD 00<rept>            <1> align 512,db 0
 11298                              <1> f3:
 11299 002DA0FD <incbin>            <1> incbin "included/chartest.elf"
 11300 002FED24 00<rept>            <1> align 512,db 0
 11301                              <1> f4:
 11302 002FED24 <incbin>            <1> incbin "included/dostest.com"
 11303 002FEF31 00<rept>            <1> align 512,db 0
 11304                              <1> f5:
 11305 002FEF31 <incbin>            <1> incbin "included/exec"
 11306 002FF0E1 00<rept>            <1> align 512,db 0
 11307                              <1> f6:
 11308 002FF0E1 <incbin>            <1> incbin "included/finalcount.sn"
 11309 002FF302 00<rept>            <1> align 512,db 0
 11310                              <1> f7:
 11311 002FF302 <incbin>            <1> incbin "included/floppy.txt"
 11312 00300666 00<rept>            <1> align 512,db 0
 11313                              <1> f8:
 11314 00300666 <incbin>            <1> incbin "included/fork"
 11315 00300958 00<rept>            <1> align 512,db 0
 11316                              <1> f9:
 11317 00300958 <incbin>            <1> incbin "included/gravity.elf"
 11318 0031C91E 00<rept>            <1> align 512,db 0
 11319                              <1> f10:
 11320 0031C91E <incbin>            <1> incbin "included/guitest"
 11321 0031CE2B 00<rept>            <1> align 512,db 0
 11322                              <1> f11:
 11323 0031CE2B <incbin>            <1> incbin "included/helloworld.elf"
 11324 00357C28 00<rept>            <1> align 512,db 0
 11325                              <1> f12:
 11326 00357C28 <incbin>            <1> incbin "included/int"
 11327 00357FAF 00<rept>            <1> align 512,db 0
 11328                              <1> f13:
 11329 00357FAF <incbin>            <1> incbin "included/lostwoods.sn"
 11330 00358056 00<rept>            <1> align 512,db 0
 11331                              <1> f14:
 11332 00358056 <incbin>            <1> incbin "included/mario.sn"
 11333 0035823A 00<rept>            <1> align 512,db 0
 11334                              <1> f15:
 11335 0035823A <incbin>            <1> incbin "included/moment.wav"
 11336 004A303A 00<rept>            <1> align 512,db 0
 11337                              <1> f16:
 11338 004A303A <incbin>            <1> incbin "included/pi.elf"
 11339 004C6F72 00<rept>            <1> align 512,db 0
 11340                              <1> f17:
 11341 004C6F72 <incbin>            <1> incbin "included/solleros.bmp"
 11342 0051CFE6 00<rept>            <1> align 512,db 0
 11343                              <1> f18:
 11344 0051CFE6 <incbin>            <1> incbin "included/solleros.txt"
 11345 0051D174 00<rept>            <1> align 512,db 0
 11346                              <1> f19:
 11347 0051D174 <incbin>            <1> incbin "included/songotime.sn"
 11348 0051D24A 00<rept>            <1> align 512,db 0
 11349                              <1> f20:
 11350 0051D24A <incbin>            <1> incbin "included/sse"
 11351 0051D6A8 00<rept>            <1> align 512,db 0
 11352                              <1> f21:
 11353 0051D6A8 <incbin>            <1> incbin "included/stdiotest.elf"
 11354 00542488 00<rept>            <1> align 512,db 0
 11355                              <1> f22:
 11356 00542488 <incbin>            <1> incbin "included/tely"
 11357 005427BA 00<rept>            <1> align 512,db 0
 11358                              <1> f23:
 11359 005427BA <incbin>            <1> incbin "included/timetest.elf"
 11360 00562E82 00<rept>            <1> align 512,db 0
 11361                              <1> f24:
 11362 00562E82 <incbin>            <1> incbin "included/tutorial.sh"
 11363 00563552 00<rept>            <1> align 512,db 0
 11364                              <1> f25:
 11365 00563552 <incbin>            <1> incbin "included/unfs"
 11366                              <1> align 512,db 0
 11367                              <1> f26:
 11368 00563552 <incbin>            <1> incbin "included/utf-8.txt"
 11369 00563DC8 00<rept>            <1> align 512,db 0
 11370                              <1> f27:
 11371 00563DC8 <incbin>            <1> incbin "included/victory.wav"
 11372 00566948 00<rept>            <1> align 512,db 0
 11373                              <1> f28:
 11374 00566948 <incbin>            <1> incbin "included/_img.bin"
 11375                              <1> align 512,db 0
 11376                              <1> f29:
 11377                                  %endif
