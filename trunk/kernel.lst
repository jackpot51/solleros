     1                                  [BITS 16]
     2                                      %include 'source/menu.asm'
     3                              <1>     ; MENU.ASM
     4                              <1> %include 'source/signature.asm'
     5                              <2> signature:	;used by bootloader to find SollerOS, is totally awesome
     6 00000000 EDA55ED1            <2> dd 0xD15EA5ED	;diseased
     7 00000004 15D000B1            <2> dd 0xB100D015	;blood is
     8 00000008 EDFED2BA            <2> dd 0xBAD2FEED	;bad to feed
     9 0000000C 95D0112A            <2> dd 0x2A11D095	;to all dogs
    10 00000010 52A71CA1            <2> dd 0xA11CA752	;all cats too.
    11 00000014 0F751015            <2> dd 0x1510750F   ;is lots of
    12 00000018 75CAADDE            <2> dd 0xDEADCA75   ;dead cats
    13 0000001C 95D0ADDE            <2> dd 0xDEADD095   ;dead dogs
    14 00000020 18000000            <2> dd 24			;version
    15 00000024 534F4C4C45524F53    <2> db "SOLLEROS"
    16                              <2> signatureend:
    17                              <1> menustart:	
    18 0000002C 8CC8                <1> 	mov ax, cs
    19 0000002E 8ED8                <1> 	mov ds, ax
    20 00000030 8EC0                <1> 	mov es, ax
    21 00000032 8ED0                <1> 	mov ss, ax
    22 00000034 880E[8101]          <1> 	mov [DriveNumber], cl
    23 00000038 668916[8201]        <1> 	mov [lbaad], edx
    24 0000003D B800A0              <1> 	mov ax, 0xA000
    25 00000040 8EE8                <1> 	mov gs, ax
    26 00000042 B81200              <1> 	mov ax, 12h
    27 00000045 31DB                <1> 	xor bx, bx
    28 00000047 CD10                <1> 	int 10h
    29                              <1> guiload:
    30 00000049 BE[8F02]            <1> 	mov si, bootmsg
    31 0000004C E84C01              <1> 	call printrm
    32 0000004F 31C0                <1> 	xor ax, ax
    33 00000051 CD16                <1> 	int 16h
    34 00000053 3C79                <1> 	cmp al, "y"
    35 00000055 0F85F600            <1> 	jne near guiload2
    36                              <1> guiloadagain:
    37 00000059 B8004F              <1> 	mov ax, 04F00h
    38 0000005C BF[D682]            <1> 	mov di, VBEMODEBLOCK
    39 0000005F CD10                <1> 	int 10h
    40 00000061 BE[F882]            <1> 	mov si, reserved
    41 00000064 81EE0200            <1> 	sub si, 2
    42                              <1> findvideomodes:
    43 00000068 81C60200            <1> 	add si, 2
    44 0000006C 8B0C                <1> 	mov cx, [si]
    45 0000006E 81F9FFFF            <1> 	cmp cx, 0xFFFF
    46 00000072 0F840A00            <1> 	je near nextvmode
    47 00000076 81FE[D683]          <1> 	cmp si, oemdata
    48 0000007A 0F83D100            <1> 	jae near guiload2	;;kill if no valid list is found
    49 0000007E EBE8                <1> 	jmp findvideomodes 	
    50                              <1> ;;debug,shows vmodes available
    51                              <1> nextvmode:
    52 00000080 81EE0200            <1> 	sub si, 2
    53 00000084 81FE[F882]          <1> 	cmp si, reserved
    54 00000088 0F82CDFF            <1> 	jb near guiloadagain
    55 0000008C 8B0C                <1> 	mov cx, [si]
    56 0000008E 81F9FFFF            <1> 	cmp cx, 0xFFFF
    57 00000092 0F84EAFF            <1> 	je near nextvmode
    58 00000096 81C10040            <1> 	add cx, 0x4000 		;;Linear Frame Buffer
    59 0000009A B8014F              <1> 	mov ax, 04F01h
    60 0000009D BF[D684]            <1> 	mov di, VBEMODEINFOBLOCK
    61 000000A0 890E[8601]          <1> 	mov [vesamode], cx
    62 000000A4 CD10                <1> 	int 10h
    63 000000A6 A0[EF84]            <1> 	mov al, [bitsperpixel]
    64 000000A9 3C10                <1> 	cmp al, 16
    65 000000AB 75D3                <1> 	jne nextvmode
    66 000000AD 8936[8801]          <1> 	mov [videomodecache], si
    67 000000B1 80FC00              <1> 	cmp ah, 0
    68 000000B4 0F842200            <1> 	je near setvesamode
    69 000000B8 EBC6                <1> 	jmp nextvmode
    70 000000BA 0A0D49732074686973- <1> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
    71 000000C3 20766964656F206D6F- <1>
    72 000000CC 6465204F4B3F28792F- <1>
    73 000000D5 6E290D0A00          <1>
    74                              <1> setvesamode:
    75 000000DA 8B0E[E884]          <1> 	mov cx, [xresolution]
    76 000000DE E8D200              <1> 	call decshow
    77 000000E1 B078                <1> 	mov al, "x"
    78 000000E3 E83A01              <1> 	call char
    79 000000E6 8B0E[EA84]          <1> 	mov cx, [yresolution]
    80 000000EA E8C600              <1> 	call decshow
    81 000000ED B040                <1> 	mov al, "@"
    82 000000EF E82E01              <1> 	call char
    83 000000F2 8A0E[EF84]          <1> 	mov cl, [bitsperpixel]
    84 000000F6 E8BA00              <1> 	call decshow
    85 000000F9 BE[BA00]            <1> 	mov si, isthisvideook
    86 000000FC E89C00              <1> 	call printrm
    87 000000FF 31C0                <1> 	xor ax, ax
    88 00000101 CD16                <1> 	int 16h
    89 00000103 8B36[8801]          <1> 	mov si, [videomodecache]
    90 00000107 3C79                <1> 	cmp al, "y"
    91 00000109 0F8573FF            <1> 	jne near nextvmode
    92 0000010D 8B16[E884]          <1> 	mov dx, [xresolution]
    93 00000111 8B0E[EA84]          <1> 	mov cx, [yresolution]
    94 00000115 8916[975D]          <1> 	mov [resolutionx], dx
    95 00000119 890E[955D]          <1> 	mov [resolutiony], cx
    96 0000011D 01D2                <1> 	add dx, dx
    97 0000011F 8916[995D]          <1> 	mov [resolutionx2], dx
    98 00000123 31D2                <1> 	xor dx, dx
    99 00000125 31C9                <1> 	xor cx, cx
   100 00000127 B8024F              <1> 	mov ax, 04F02h
   101 0000012A 8B1E[8601]          <1> 	mov bx, [vesamode]
   102 0000012E CD10                <1> 	int 10h		;;enter VESA mode
   103 00000130 C606[8A01]00        <1> 	mov byte [guinodo], 0
   104 00000135 C606[164F]01        <1> 	mov byte [guion], 1
   105 0000013A 6631C0              <1> 	xor eax, eax
   106 0000013D 6631DB              <1> 	xor ebx, ebx
   107 00000140 6631C9              <1> 	xor ecx, ecx
   108 00000143 6631D2              <1> 	xor edx, edx
   109 00000146 6631F6              <1> 	xor esi, esi
   110 00000149 6631FF              <1> 	xor edi, edi	;;reset registers
   111 0000014C E95A01              <1> 	jmp pmode
   112                              <1> guiload2:
   113 0000014F B9E001              <1> 	mov cx, 480
   114 00000152 BA8002              <1> 	mov dx, 640
   115 00000155 8916[975D]          <1> 	mov [resolutionx], dx
   116 00000159 01D2                <1> 	add dx, dx
   117 0000015B 8916[995D]          <1> 	mov [resolutionx2], dx
   118 0000015F 890E[955D]          <1> 	mov [resolutiony], cx
   119 00000163 B81200              <1> 	mov ax, 12h
   120 00000166 31DB                <1> 	xor bx, bx
   121 00000168 CD10                <1> 	int 10h
   122 0000016A C606[8A01]01        <1> 	mov byte [guinodo], 1
   123 0000016F 6631DB              <1> 	xor ebx, ebx
   124 00000172 6631C9              <1> 	xor ecx, ecx
   125 00000175 6631D2              <1> 	xor edx, edx
   126 00000178 6631F6              <1> 	xor esi, esi
   127 0000017B 6631FF              <1> 	xor edi, edi
   128 0000017E E92801              <1> 	jmp pmode
   129                              <1> 
   130 00000181 00                  <1> DriveNumber db 0
   131 00000182 00000000            <1> lbaad dd 0
   132                              <1> 	
   133 00000186 0000                <1> vesamode dw 0
   134 00000188 0000                <1> videomodecache dw 0
   135                              <1> 
   136 0000018A 00                  <1> guinodo db 0
   137                              <1> tests:
   138 0000018B BB0700              <1> 	mov bx, 7
   139 0000018E B40E                <1> 	mov ah, 0Eh
   140 00000190 FEC0                <1> 	inc al
   141 00000192 3C02                <1> 	cmp al, 2
   142 00000194 7501                <1> 	jne cnttest
   143 00000196 C3                  <1> 	ret
   144                              <1> cnttest:
   145 00000197 CD10                <1> 	int 10h
   146 00000199 EBF0                <1> 	jmp tests
   147                              <1> 
   148                              <1>     printrm:			; 'si' comes in with string address
   149 0000019B BB0700              <1> 	    mov bx,07		; write to display
   150 0000019E B40E                <1> 	    mov ah,0Eh		; screen function
   151 000001A0 8A04                <1>     prs2:    mov al,[si]         ; get next character
   152 000001A2 3C00                <1> 	    cmp al,0		; look for terminator 
   153 000001A4 7405                <1>             je finpr2		; zero byte at end of string
   154 000001A6 CD10                <1> 	    int 10h		; write character to screen.    
   155 000001A8 46                  <1>      	    inc si	     	; move to next character
   156 000001A9 EBF5                <1> 	    jmp prs2		; loop
   157 000001AB C3                  <1>     finpr2: ret
   158                              <1> 
   159 000001AC 0000000000          <1> dcnm db 0,0,0,0,0
   160 000001B1 0000                <1> dcnmend db 0,0
   161                              <1> 
   162                              <1> 
   163                              <1> decshow:
   164 000001B3 BE[AC01]            <1> 	mov si, dcnm
   165                              <1> decclear:
   166 000001B6 B030                <1> 	mov al, "0"
   167 000001B8 8804                <1> 	mov [si], al
   168 000001BA 46                  <1> 	inc si
   169 000001BB 81FE[B101]          <1> 	cmp si, dcnmend
   170 000001BF 76F5                <1> 	jbe decclear
   171 000001C1 4E                  <1> 	dec si
   172 000001C2 E81500              <1> 	call convertrm
   173 000001C5 BE[AC01]            <1> 	mov si, dcnm
   174                              <1> dectst:
   175 000001C8 8A04                <1> 	mov al, [si]
   176 000001CA 46                  <1> 	inc si
   177 000001CB 81FE[B101]          <1> 	cmp si, dcnmend
   178 000001CF 7704                <1> 	ja dectstend
   179 000001D1 3C30                <1> 	cmp al, "0"
   180 000001D3 76F3                <1> 	jbe dectst
   181                              <1> dectstend:
   182 000001D5 4E                  <1> 	dec si
   183 000001D6 E8C2FF              <1> 	call printrm
   184 000001D9 C3                  <1> 	ret
   185                              <1> 	
   186                              <1> 	
   187                              <1> convertrm:
   188 000001DA 4E                  <1> 	dec si
   189 000001DB 89F3                <1> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
   190                              <1> cnvrtrm:
   191 000001DD 89DE                <1> 	mov si, bx
   192 000001DF 81EE0300            <1> 	sub si, 3
   193 000001E3 46                  <1> ten3rm:	inc si
   194 000001E4 81F9E803            <1> 	cmp cx, 1000
   195 000001E8 7208                <1> 	jb ten2rm
   196 000001EA 81E9E803            <1> 	sub cx, 1000
   197 000001EE FE04                <1> 	inc byte [si]
   198 000001F0 EBEB                <1> 	jmp cnvrtrm
   199 000001F2 46                  <1> ten2rm:	inc si
   200 000001F3 81F96400            <1> 	cmp cx, 100
   201 000001F7 7208                <1> 	jb ten1rm
   202 000001F9 81E96400            <1> 	sub cx, 100
   203 000001FD FE04                <1> 	inc byte [si]
   204 000001FF EBDC                <1> 	jmp cnvrtrm
   205 00000201 46                  <1> ten1rm:	inc si
   206 00000202 81F90A00            <1> 	cmp cx, 10
   207 00000206 7208                <1> 	jb ten0rm
   208 00000208 81E90A00            <1> 	sub cx, 10
   209 0000020C FE04                <1> 	inc byte [si]
   210 0000020E EBCD                <1> 	jmp cnvrtrm
   211 00000210 46                  <1> ten0rm:	inc si
   212 00000211 81F90100            <1> 	cmp cx, 1
   213 00000215 7208                <1> 	jb tendnrm
   214 00000217 81E90100            <1> 	sub cx, 1
   215 0000021B FE04                <1> 	inc byte [si]
   216 0000021D EBBE                <1> 	jmp cnvrtrm
   217                              <1> tendnrm:
   218 0000021F C3                  <1> 	ret
   219                              <1> 
   220                              <1> 
   221                              <1> 
   222                              <1> 
   223                              <1>     char: 		    ;char must be in al
   224 00000220 BB0700              <1>        mov bx, 07
   225 00000223 B40E                <1> 	   mov ah, 0Eh
   226 00000225 CD10                <1> 	   int 10h
   227 00000227 C3                  <1> 	   ret
   228                              <1> 
   229                              <1> 		shutdown:
   230 00000228 0F20C0              <1> 				mov eax, cr0
   231 0000022B 24FE                <1> 				and al,0xFE     ; back to realmode
   232 0000022D 0F22C0              <1> 				mov  cr0, eax   ; by toggling bit again
   233 00000230 FB                  <1> 				sti
   234 00000231 B80053              <1> 			MOV AX, 5300h	; Shuts down APM-Machines.
   235 00000234 31DB                <1> 			XOR BX, BX	; Newer machines automatically
   236 00000236 CD15                <1> 			INT 15h		; shut down
   237 00000238 B80453              <1> 			MOV AX, 5304h
   238 0000023B 31DB                <1> 			XOR BX, BX
   239 0000023D CD15                <1> 			INT 15h		; Interrupt 15h originally was
   240 0000023F B80153              <1> 			MOV AX, 5301h	; used for Cartridges (cassettes)
   241 00000242 31DB                <1> 			XOR BX, BX	; but is still in use for
   242 00000244 CD15                <1> 			INT 15h		; diverse things
   243 00000246 B80753              <1> 			MOV AX, 5307h
   244 00000249 BB0100              <1> 			MOV BX, 1
   245 0000024C B90300              <1> 			MOV CX, 3
   246 0000024F CD15                <1> 			INT 15h
   247 00000251 CF                  <1> 			IRET
   248                              <1> 
   249                              <1> 	coldboot:
   250 00000252 0F20C0              <1> 			   mov eax, cr0
   251 00000255 24FE                <1> 			   and al,0xFE     ; back to realmode
   252 00000257 0F22C0              <1> 			   mov  cr0, eax   ; by toggling bit again
   253 0000025A FB                  <1> 			   sti
   254 0000025B B84000              <1> 			MOV AX, 0040h
   255 0000025E 8EC0                <1> 			MOV ES, AX
   256 00000260 26C70672000000      <1> 			MOV WORD [ES:00072h], 0h
   257 00000267 EA0000FFFF          <1> 			JMP 0FFFFh:0000h
   258 0000026C CF                  <1> 			IRET
   259                              <1> 
   260                              <1> 		warmboot:
   261 0000026D E81200              <1> 			call realmode
   262 00000270 B84000              <1> 			MOV AX, 0040h
   263 00000273 8EC0                <1> 			MOV ES, AX
   264 00000275 26C70672003412      <1> 			MOV WORD [ES:00072h], 01234h
   265 0000027C EA0000FFFF          <1> 			JMP 0FFFFh:0000h
   266 00000281 CF                  <1> 			IRET
   267                              <1> 
   268                              <1> 
   269                              <1> realmode:
   270 00000282 0F20C0              <1>    mov eax, cr0
   271 00000285 24FE                <1>    and al,0xFE     ; back to realmode
   272 00000287 0F22C0              <1>    mov  cr0, eax   ; by toggling bit again
   273 0000028A FB                  <1>    sti
   274 0000028B 6631C0              <1>    xor eax, eax
   275 0000028E C3                  <1>    ret
   276                              <1>    
   277 0000028F 426F6F7420696E746F- <1> bootmsg:	db "Boot into the GUI?(y/n)",10,13,0
   278 00000298 20746865204755493F- <1>
   279 000002A1 28792F6E290A0D00    <1>
   280                                      %include 'source/pmode.asm'
   281                              <1> [BITS 16]
   282                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   283                              <1> ;	16-bit real mode
   284                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   285                              <1> 
   286                              <1> pmode:
   287 000002A9 BA9200              <1> 	mov dx, 0x92
   288 000002AC EC                  <1> 	in al, dx	;;A20
   289 000002AD 0C02                <1> 	or al, 2
   290 000002AF EE                  <1> 	out dx, al
   291 000002B0 6631DB              <1> 	xor ebx, ebx
   292 000002B3 8CCB                <1> 	mov bx,cs		; EBX=segment
   293 000002B5 66C1E304            <1> 	shl ebx,4		;	<< 4
   294 000002B9 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   295 000002BD A3[C204]            <1> 	mov [gdt2 + 2],ax
   296 000002C0 A3[CA04]            <1> 	mov [gdt3 + 2],ax
   297 000002C3 66C1E810            <1> 	shr eax,16
   298 000002C7 A2[C404]            <1> 	mov [gdt2 + 4],al
   299 000002CA A2[CC04]            <1> 	mov [gdt3 + 4],al
   300 000002CD 8826[C704]          <1> 	mov [gdt2 + 7],ah
   301 000002D1 8826[CF04]          <1> 	mov [gdt3 + 7],ah
   302                              <1> 	
   303 000002D5 66B8[00000000]      <1> 	mov eax, stack
   304 000002DB A3[D204]            <1> 	mov [gdts + 2],ax
   305 000002DE 66C1E810            <1> 	shr eax,16
   306 000002E2 A2[D404]            <1> 	mov [gdts + 4],al
   307 000002E5 8826[D704]          <1> 	mov [gdts + 7],ah
   308 000002E9 66A1[2D04]          <1> 	mov eax, [newcodecache]
   309 000002ED A3[DA04]            <1> 	mov [gdt4 + 2],ax
   310 000002F0 A3[E204]            <1> 	mov [gdt5 + 2],ax
   311 000002F3 66C1E810            <1> 	shr eax,16
   312 000002F7 A2[DC04]            <1> 	mov [gdt4 + 4],al
   313 000002FA A2[E404]            <1> 	mov [gdt5 + 4],al
   314 000002FD 8826[DF04]          <1> 	mov [gdt4 + 7],ah
   315 00000301 8826[E704]          <1> 	mov [gdt5 + 7],ah
   316                              <1> 	
   317                              <1> ; fix up gdt and idt
   318 00000305 67668D83[B0040000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   319 0000030D 66A3[A604]          <1> 	mov [gdtr + 2],eax
   320 00000311 67668D83[E8040000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   321 00000319 66A3[AC04]          <1> 	mov [idtr + 2],eax
   322 0000031D FA                  <1> 	cli
   323 0000031E 0F0116[A404]        <1> 	lgdt [gdtr]
   324 00000323 0F011E[AA04]        <1> 	lidt [idtr]
   325 00000328 6631DB              <1> 	xor ebx, ebx
   326 0000032B 8CDB                <1> 	mov bx, ds
   327 0000032D 66891E[2904]        <1> 	mov [basecache], ebx
   328 00000332 0F20C0              <1> 	mov eax,cr0
   329 00000335 0C01                <1> 	or al,1
   330 00000337 0F22C0              <1> 	mov cr0,eax
   331 0000033A EA[4303]1000        <1> 	jmp SYS_CODE_SEL:do_pm
   332                              <1> [BITS 32]
   333 0000033F 90                  <1> 	nop
   334 00000340 90                  <1> 	nop
   335 00000341 90                  <1> 	nop
   336 00000342 90                  <1> 	nop
   337                              <1> do_pm:
   338 00000343 31C0                <1> 	xor eax, eax
   339 00000345 66B81800            <1> 	mov ax, SYS_DATA_SEL
   340 00000349 8ED8                <1> 	mov ds,ax
   341 0000034B 8ED0                <1> 	mov ss,ax	;;can switch back to STACK_SEL later
   342 0000034D BC[00100000]        <1> 	mov esp, stackend	;;can switch back to 4096 later
   343 00000352 90                  <1> 	nop
   344 00000353 90                  <1> 	nop
   345 00000354 8EC0                <1> 	mov es, ax
   346 00000356 8EE0                <1> 	mov fs, ax
   347 00000358 66B83000            <1> 	mov ax, NEW_DATA_SEL
   348 0000035C 8EE8                <1> 	mov gs, ax
   349                              <1> 	
   350                              <1> copykernel:
   351 0000035E 648B06              <1> 	mov eax, [fs:esi]
   352 00000361 658906              <1> 	mov [gs:esi], eax
   353 00000364 81C604000000        <1> 	add esi, 4
   354 0000036A 81FE[00000000]      <1> 	cmp esi, bssstart
   355 00000370 72EC                <1> 	jb copykernel
   356 00000372 EA[79030000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   357                              <1> 	
   358                              <1> done_copy:
   359 00000379 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   360 0000037D 8ED8                <1> 	mov ds, ax
   361 0000037F 8ED0                <1> 	mov ss, ax
   362 00000381 BC[00100000]        <1> 	mov esp, stackend
   363 00000386 90                  <1> 	nop
   364 00000387 90                  <1> 	nop
   365 00000388 66B83000            <1> 	mov ax, NEW_DATA_SEL
   366 0000038C 8EC0                <1> 	mov es, ax
   367 0000038E 8EE0                <1> 	mov fs, ax
   368 00000390 66B81800            <1> 	mov ax, SYS_DATA_SEL
   369 00000394 8EE8                <1> 	mov gs, ax
   370                              <1> 	
   371                              <1> ;Now I will initialise the interrupt controllers and remap irq's
   372 00000396 B011                <1> 	mov al, 0x11
   373 00000398 E620                <1> 	out 0x20, al
   374 0000039A E6A0                <1> 	out 0xA0, al
   375 0000039C B040                <1> 	mov al, 0x40	;interrupt for master
   376 0000039E E621                <1> 	out 0x21, al
   377 000003A0 B048                <1> 	mov al, 0x48	;interrupt for slave
   378 000003A2 E6A1                <1> 	out 0xA1, al
   379 000003A4 B004                <1> 	mov al, 4
   380 000003A6 E621                <1> 	out 0x21, al
   381 000003A8 B002                <1> 	mov al, 2
   382 000003AA E6A1                <1> 	out 0xA1, al
   383 000003AC B001                <1> 	mov al, 0x1
   384 000003AE E621                <1> 	out 0x21, al
   385 000003B0 B001                <1> 	mov al, 0x1
   386 000003B2 E6A1                <1> 	out 0xA1, al
   387                              <1> 	;masks are set to zero so as not to mask
   388 000003B4 30C0                <1> 	xor al, al
   389 000003B6 E621                <1> 	out 0x21, al
   390 000003B8 30C0                <1> 	xor al, al
   391 000003BA E6A1                <1> 	out 0xA1, al
   392 000003BC B020                <1> 	mov al, 0x20
   393 000003BE E6A0                <1> 	out 0xA0, al
   394 000003C0 E620                <1> 	out 0x20, al
   395                              <1> 	;And now to initialize the fpu
   396 000003C2 0F20E0              <1> 	mov eax, cr4
   397 000003C5 0D00020000          <1> 	or eax, 0x200
   398 000003CA 0F22E0              <1> 	mov cr4, eax
   399 000003CD B87F0B0000          <1> 	mov eax, 0xB7F
   400 000003D2 50                  <1> 	push eax
   401 000003D3 D92C24              <1> 	fldcw [esp]
   402 000003D6 58                  <1> 	pop eax
   403 000003D7 31C0                <1> 	xor eax, eax
   404 000003D9 31C9                <1> 	xor ecx, ecx
   405                              <1> 
   406 000003DB A1[2D040000]        <1> 	mov eax, [newcodecache]
   407 000003E0 C1E804              <1> 	shr eax, 4
   408 000003E3 A3[29040000]        <1> 	mov [basecache], eax
   409                              <1> 	
   410 000003E8 89C3                <1> 	mov ebx, eax
   411 000003EA C1E304              <1> 	shl ebx, 4
   412 000003ED 8B3D[FE840000]      <1> 	mov edi, [physbaseptr]
   413 000003F3 29DF                <1> 	sub edi, ebx
   414 000003F5 893D[FE840000]      <1> 	mov [physbaseptr], edi
   415                              <1> 	
   416 000003FB BE[00000000]        <1> 	mov esi, bssstart
   417 00000400 31C0                <1> 	xor eax, eax
   418                              <1> clearkernelbuffers:
   419 00000402 8906                <1> 	mov [esi], eax
   420 00000404 81C604000000        <1> 	add esi, 4
   421 0000040A 81FE[67A22000]      <1> 	cmp esi, bssend
   422 00000410 72F0                <1> 	jb clearkernelbuffers
   423 00000412 803D[8A010000]01    <1> 	cmp byte [guinodo], 1
   424 00000419 7405                <1> 	je guidonot
   425 0000041B E9C3490000          <1> 	jmp gui
   426                              <1> guidonot:
   427 00000420 E9092B0000          <1> 	jmp os
   428                              <1> 	
   429 00000425 00000000            <1> user2codepoint dw 0,0
   430 00000429 00000000            <1> basecache dd 0
   431 0000042D 00001000            <1> newcodecache dd 0x100000
   432                              <1> 
   433 00000431 0A0D4B696C6C207468- <1> surekillmsg db 10,13,"Kill this application?",10,13,0
   434 0000043A 6973206170706C6963- <1>
   435 00000443 6174696F6E3F0A0D00  <1>
   436                              <1> 
   437                              <1> timerinterrupt:
   438 0000044C 803D[6C6B0000]01    <1> 	cmp byte [threadson], 1
   439 00000453 7505                <1> 	jne userinterrupt
   440 00000455 E9CC6C0000          <1> 	jmp threadswitch
   441                              <1> userinterrupt:		;checks for escape, if pressed, it quits the program currently running
   442 0000045A FA                  <1> 	cli
   443 0000045B 803D[6C6B0000]00    <1> 	cmp byte [threadson], 0
   444 00000462 0F8432000000        <1> 	je near handled3
   445 00000468 60                  <1> 	pusha
   446 00000469 E464                <1> 	in al, 64h
   447 0000046B A820                <1> 	test al, 20h
   448 0000046D 752A                <1> 	jnz handled2
   449 0000046F E460                <1> 	in al, 60h
   450 00000471 3C01                <1> 	cmp al, 1		;escape
   451 00000473 7405                <1> 	je userint
   452 00000475 E91F000000          <1> 	jmp handled2
   453                              <1> userint:
   454 0000047A BE[31040000]        <1> 	mov esi, surekillmsg
   455 0000047F E877250000          <1> 	call print
   456 00000484 FB                  <1> 	sti
   457 00000485 E81D250000          <1> 	call getkey
   458 0000048A 3C79                <1> 	cmp al, 'y'
   459 0000048C 750B                <1> 	jne handled2
   460 0000048E B020                <1> 	mov al, 0x20
   461 00000490 E620                <1> 	out 0x20, al
   462 00000492 61                  <1> 	popa
   463 00000493 FB                  <1> 	sti
   464 00000494 E9B92B0000          <1> 	jmp nwcmd
   465                              <1> handled2:
   466 00000499 61                  <1> 	popa
   467                              <1> handled3:
   468 0000049A FB                  <1> 	sti
   469                              <1> handled:
   470 0000049B 50                  <1> 	push eax
   471 0000049C B020                <1> 	mov al, 0x20
   472 0000049E E620                <1> 	out 0x20, al
   473 000004A0 58                  <1> 	pop eax
   474 000004A1 CF                  <1> 	iret
   475 000004A2 EBFE                <1> 	jmp $
   476                              <1> [BITS 16]
   477                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   478                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   479                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   480 000004A4 3700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   481 000004A6 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   482                              <1> 
   483 000004AA FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   484 000004AC 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   485                              <1> 
   486                              <1> 
   487 000004B0 0000                <1> gdt:	dw 0			; limit 15:0
   488 000004B2 0000                <1> 	dw 0			; base 15:0
   489 000004B4 00                  <1> 	db 0			; base 23:16
   490 000004B5 00                  <1> 	db 0			; type
   491 000004B6 00                  <1> 	db 0			; limit 19:16, flags
   492 000004B7 00                  <1> 	db 0			; base 31:24
   493                              <1> ; linear data segment descriptor
   494                              <1> LINEAR_SEL	equ	$-gdt
   495 000004B8 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   496 000004BA 0000                <1> 	dw 0			; base for this one is always 0
   497 000004BC 00                  <1> 	db 0
   498 000004BD 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   499 000004BE CF                  <1> 	db 0xCF			; page-granular, 32-bit
   500 000004BF 00                  <1> 	db 0
   501                              <1> ; code segment descriptor
   502                              <1> SYS_CODE_SEL	equ	$-gdt
   503 000004C0 FFFF                <1> gdt2:	dw 0xFFFF
   504 000004C2 0000                <1> 	dw 0			; (base gets set above)
   505 000004C4 00                  <1> 	db 0
   506 000004C5 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   507 000004C6 CF                  <1> 	db 0xCF
   508 000004C7 00                  <1> 	db 0
   509                              <1> ; data segment descriptor
   510                              <1> SYS_DATA_SEL	equ	$-gdt
   511 000004C8 FFFF                <1> gdt3:	dw 0xFFFF
   512 000004CA 0000                <1> 	dw 0			; (base gets set above)
   513 000004CC 00                  <1> 	db 0
   514 000004CD 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   515 000004CE CF                  <1> 	db 0xCF
   516 000004CF 00                  <1> 	db 0
   517                              <1> STACK_SEL	equ	$-gdt	;;this is no longer used for various reasons
   518 000004D0 0100                <1> gdts:	dw 1
   519 000004D2 0000                <1> 	dw 0			; (base gets set above)
   520 000004D4 00                  <1> 	db 0
   521 000004D5 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   522 000004D6 C0                  <1> 	db 0xC0
   523 000004D7 00                  <1> 	db 0
   524                              <1> NEW_CODE_SEL	equ	$-gdt
   525 000004D8 FFFF                <1> gdt4:	dw 0xFFFF
   526 000004DA 0000                <1> 	dw 0			; (base gets set above)
   527 000004DC 00                  <1> 	db 0
   528 000004DD 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   529 000004DE CF                  <1> 	db 0xCF
   530 000004DF 00                  <1> 	db 0
   531                              <1> ; data segment descriptor
   532                              <1> NEW_DATA_SEL	equ	$-gdt
   533 000004E0 FFFF                <1> gdt5:	dw 0xFFFF
   534 000004E2 0000                <1> 	dw 0			; (base gets set above)
   535 000004E4 00                  <1> 	db 0
   536 000004E5 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   537 000004E6 CF                  <1> 	db 0xCF
   538 000004E7 00                  <1> 	db 0
   539                              <1> gdt_end:
   540                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   541                              <1> ;	interrupt descriptor table (IDT)
   542                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   543                              <1> ; 32 reserved interrupts:
   544                              <1> idt:	
   545                              <1> %assign i 0
   546                              <1> %rep    33
   547                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   548                              <1> %assign i i+1
   549                              <1> %endrep
   550 000004E8 [E80C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   551                              <2> %assign i i+1
   552 000004F0 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   553                              <2> %assign i i+1
   554 000004F8 [020D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   555                              <2> %assign i i+1
   556 00000500 [0F0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   557                              <2> %assign i i+1
   558 00000508 [1C0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   559                              <2> %assign i i+1
   560 00000510 [290D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   561                              <2> %assign i i+1
   562 00000518 [360D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   563                              <2> %assign i i+1
   564 00000520 [430D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   565                              <2> %assign i i+1
   566 00000528 [500D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   567                              <2> %assign i i+1
   568 00000530 [5D0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   569                              <2> %assign i i+1
   570 00000538 [6A0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   571                              <2> %assign i i+1
   572 00000540 [770D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   573                              <2> %assign i i+1
   574 00000548 [840D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   575                              <2> %assign i i+1
   576 00000550 [910D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   577                              <2> %assign i i+1
   578 00000558 [9E0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   579                              <2> %assign i i+1
   580 00000560 [AB0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   581                              <2> %assign i i+1
   582 00000568 [B80D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   583                              <2> %assign i i+1
   584 00000570 [C50D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   585                              <2> %assign i i+1
   586 00000578 [D20D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   587                              <2> %assign i i+1
   588 00000580 [DF0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   589                              <2> %assign i i+1
   590 00000588 [EC0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   591                              <2> %assign i i+1
   592 00000590 [F90D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   593                              <2> %assign i i+1
   594 00000598 [060E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   595                              <2> %assign i i+1
   596 000005A0 [130E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   597                              <2> %assign i i+1
   598 000005A8 [200E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   599                              <2> %assign i i+1
   600 000005B0 [2D0E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   601                              <2> %assign i i+1
   602 000005B8 [3A0E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   603                              <2> %assign i i+1
   604 000005C0 [470E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   605                              <2> %assign i i+1
   606 000005C8 [540E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   607                              <2> %assign i i+1
   608 000005D0 [610E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   609                              <2> %assign i i+1
   610 000005D8 [6E0E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   611                              <2> %assign i i+1
   612 000005E0 [7B0E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   613                              <2> %assign i i+1
   614 000005E8 [880E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   615                              <2> %assign i i+1
   616                              <1> 		;dw handled,NEW_CODE_SEL,0x8E00,0
   617 000005F0 [552E]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   618                              <1> %assign i 0x22
   619                              <1> %rep 14
   620                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   621                              <1> 		;dw handled,NEW_CODE_SEL,0x8E00,0
   622                              <1> %assign i +1
   623                              <1> %endrep
   624 000005F8 [A20E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   625                              <2> 
   626                              <2> %assign i +1
   627 00000600 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   628                              <2> 
   629                              <2> %assign i +1
   630 00000608 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   631                              <2> 
   632                              <2> %assign i +1
   633 00000610 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   634                              <2> 
   635                              <2> %assign i +1
   636 00000618 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   637                              <2> 
   638                              <2> %assign i +1
   639 00000620 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   640                              <2> 
   641                              <2> %assign i +1
   642 00000628 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   643                              <2> 
   644                              <2> %assign i +1
   645 00000630 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   646                              <2> 
   647                              <2> %assign i +1
   648 00000638 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   649                              <2> 
   650                              <2> %assign i +1
   651 00000640 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   652                              <2> 
   653                              <2> %assign i +1
   654 00000648 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   655                              <2> 
   656                              <2> %assign i +1
   657 00000650 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   658                              <2> 
   659                              <2> %assign i +1
   660 00000658 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   661                              <2> 
   662                              <2> %assign i +1
   663 00000660 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   664                              <2> 
   665                              <2> %assign i +1
   666                              <1> ;INT 30h for os use and 3rd party use:
   667 00000668 [0827]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   668                              <1> ;here are all the irq's
   669                              <1> %assign i 0x31
   670                              <1> %rep 15
   671                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   672                              <1> 		;dw handled,NEW_CODE_SEL,0x8E00,0
   673                              <1> %assign i +1
   674                              <1> %endrep
   675 00000670 [650F]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   676                              <2> 
   677                              <2> %assign i +1
   678 00000678 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   679                              <2> 
   680                              <2> %assign i +1
   681 00000680 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   682                              <2> 
   683                              <2> %assign i +1
   684 00000688 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   685                              <2> 
   686                              <2> %assign i +1
   687 00000690 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   688                              <2> 
   689                              <2> %assign i +1
   690 00000698 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   691                              <2> 
   692                              <2> %assign i +1
   693 000006A0 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   694                              <2> 
   695                              <2> %assign i +1
   696 000006A8 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   697                              <2> 
   698                              <2> %assign i +1
   699 000006B0 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   700                              <2> 
   701                              <2> %assign i +1
   702 000006B8 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   703                              <2> 
   704                              <2> %assign i +1
   705 000006C0 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   706                              <2> 
   707                              <2> %assign i +1
   708 000006C8 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   709                              <2> 
   710                              <2> %assign i +1
   711 000006D0 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   712                              <2> 
   713                              <2> %assign i +1
   714 000006D8 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   715                              <2> 
   716                              <2> %assign i +1
   717 000006E0 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   718                              <2> 
   719                              <2> %assign i +1
   720 000006E8 [4C04]2800008E0000  <1> 		dw timerinterrupt,NEW_CODE_SEL,0x8E00,0
   721 000006F0 [5A04]2800008E0000  <1> 		dw userinterrupt,NEW_CODE_SEL,0x8E00,0
   722                              <1> ;%assign i 0x42
   723                              <1> %rep 14
   724                              <1> 		;dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   725                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   726                              <1> ;%assign i +1
   727                              <1> %endrep
   728                              <2> 
   729 000006F8 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   730                              <2> 
   731                              <2> 
   732 00000700 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   733                              <2> 
   734                              <2> 
   735 00000708 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   736                              <2> 
   737                              <2> 
   738 00000710 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   739                              <2> 
   740                              <2> 
   741 00000718 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   742                              <2> 
   743                              <2> 
   744 00000720 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   745                              <2> 
   746                              <2> 
   747 00000728 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   748                              <2> 
   749                              <2> 
   750 00000730 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   751                              <2> 
   752                              <2> 
   753 00000738 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   754                              <2> 
   755                              <2> 
   756 00000740 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   757                              <2> 
   758                              <2> 
   759 00000748 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   760                              <2> 
   761                              <2> 
   762 00000750 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   763                              <2> 
   764                              <2> 
   765 00000758 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   766                              <2> 
   767                              <2> 
   768 00000760 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> 
   770                              <1> ;This brings me up to something
   771                              <1> %assign i 0x50
   772                              <1> %rep 176
   773                              <1> 		dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   774                              <1> 		;dw handled,NEW_CODE_SEL,0x8E00,0
   775                              <1> %assign i +1
   776                              <1> %endrep
   777 00000768 [F810]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   778                              <2> 
   779                              <2> %assign i +1
   780 00000770 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   781                              <2> 
   782                              <2> %assign i +1
   783 00000778 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   784                              <2> 
   785                              <2> %assign i +1
   786 00000780 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   787                              <2> 
   788                              <2> %assign i +1
   789 00000788 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   790                              <2> 
   791                              <2> %assign i +1
   792 00000790 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   793                              <2> 
   794                              <2> %assign i +1
   795 00000798 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   796                              <2> 
   797                              <2> %assign i +1
   798 000007A0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   799                              <2> 
   800                              <2> %assign i +1
   801 000007A8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   802                              <2> 
   803                              <2> %assign i +1
   804 000007B0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   805                              <2> 
   806                              <2> %assign i +1
   807 000007B8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   808                              <2> 
   809                              <2> %assign i +1
   810 000007C0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   811                              <2> 
   812                              <2> %assign i +1
   813 000007C8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   814                              <2> 
   815                              <2> %assign i +1
   816 000007D0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   817                              <2> 
   818                              <2> %assign i +1
   819 000007D8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   820                              <2> 
   821                              <2> %assign i +1
   822 000007E0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   823                              <2> 
   824                              <2> %assign i +1
   825 000007E8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   826                              <2> 
   827                              <2> %assign i +1
   828 000007F0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   829                              <2> 
   830                              <2> %assign i +1
   831 000007F8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   832                              <2> 
   833                              <2> %assign i +1
   834 00000800 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   835                              <2> 
   836                              <2> %assign i +1
   837 00000808 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   838                              <2> 
   839                              <2> %assign i +1
   840 00000810 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   841                              <2> 
   842                              <2> %assign i +1
   843 00000818 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   844                              <2> 
   845                              <2> %assign i +1
   846 00000820 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   847                              <2> 
   848                              <2> %assign i +1
   849 00000828 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   850                              <2> 
   851                              <2> %assign i +1
   852 00000830 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   853                              <2> 
   854                              <2> %assign i +1
   855 00000838 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   856                              <2> 
   857                              <2> %assign i +1
   858 00000840 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   859                              <2> 
   860                              <2> %assign i +1
   861 00000848 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   862                              <2> 
   863                              <2> %assign i +1
   864 00000850 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   865                              <2> 
   866                              <2> %assign i +1
   867 00000858 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   868                              <2> 
   869                              <2> %assign i +1
   870 00000860 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   871                              <2> 
   872                              <2> %assign i +1
   873 00000868 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   874                              <2> 
   875                              <2> %assign i +1
   876 00000870 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   877                              <2> 
   878                              <2> %assign i +1
   879 00000878 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   880                              <2> 
   881                              <2> %assign i +1
   882 00000880 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   883                              <2> 
   884                              <2> %assign i +1
   885 00000888 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   886                              <2> 
   887                              <2> %assign i +1
   888 00000890 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   889                              <2> 
   890                              <2> %assign i +1
   891 00000898 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   892                              <2> 
   893                              <2> %assign i +1
   894 000008A0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   895                              <2> 
   896                              <2> %assign i +1
   897 000008A8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   898                              <2> 
   899                              <2> %assign i +1
   900 000008B0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   901                              <2> 
   902                              <2> %assign i +1
   903 000008B8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   904                              <2> 
   905                              <2> %assign i +1
   906 000008C0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   907                              <2> 
   908                              <2> %assign i +1
   909 000008C8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   910                              <2> 
   911                              <2> %assign i +1
   912 000008D0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   913                              <2> 
   914                              <2> %assign i +1
   915 000008D8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   916                              <2> 
   917                              <2> %assign i +1
   918 000008E0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   919                              <2> 
   920                              <2> %assign i +1
   921 000008E8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   922                              <2> 
   923                              <2> %assign i +1
   924 000008F0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   925                              <2> 
   926                              <2> %assign i +1
   927 000008F8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   928                              <2> 
   929                              <2> %assign i +1
   930 00000900 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   931                              <2> 
   932                              <2> %assign i +1
   933 00000908 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   934                              <2> 
   935                              <2> %assign i +1
   936 00000910 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   937                              <2> 
   938                              <2> %assign i +1
   939 00000918 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   940                              <2> 
   941                              <2> %assign i +1
   942 00000920 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   943                              <2> 
   944                              <2> %assign i +1
   945 00000928 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   946                              <2> 
   947                              <2> %assign i +1
   948 00000930 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   949                              <2> 
   950                              <2> %assign i +1
   951 00000938 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   952                              <2> 
   953                              <2> %assign i +1
   954 00000940 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   955                              <2> 
   956                              <2> %assign i +1
   957 00000948 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   958                              <2> 
   959                              <2> %assign i +1
   960 00000950 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   961                              <2> 
   962                              <2> %assign i +1
   963 00000958 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   964                              <2> 
   965                              <2> %assign i +1
   966 00000960 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   967                              <2> 
   968                              <2> %assign i +1
   969 00000968 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   970                              <2> 
   971                              <2> %assign i +1
   972 00000970 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   973                              <2> 
   974                              <2> %assign i +1
   975 00000978 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   976                              <2> 
   977                              <2> %assign i +1
   978 00000980 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   979                              <2> 
   980                              <2> %assign i +1
   981 00000988 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   982                              <2> 
   983                              <2> %assign i +1
   984 00000990 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   985                              <2> 
   986                              <2> %assign i +1
   987 00000998 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   988                              <2> 
   989                              <2> %assign i +1
   990 000009A0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   991                              <2> 
   992                              <2> %assign i +1
   993 000009A8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   994                              <2> 
   995                              <2> %assign i +1
   996 000009B0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   997                              <2> 
   998                              <2> %assign i +1
   999 000009B8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1000                              <2> 
  1001                              <2> %assign i +1
  1002 000009C0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1003                              <2> 
  1004                              <2> %assign i +1
  1005 000009C8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1006                              <2> 
  1007                              <2> %assign i +1
  1008 000009D0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1009                              <2> 
  1010                              <2> %assign i +1
  1011 000009D8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1012                              <2> 
  1013                              <2> %assign i +1
  1014 000009E0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1015                              <2> 
  1016                              <2> %assign i +1
  1017 000009E8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1018                              <2> 
  1019                              <2> %assign i +1
  1020 000009F0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1021                              <2> 
  1022                              <2> %assign i +1
  1023 000009F8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1024                              <2> 
  1025                              <2> %assign i +1
  1026 00000A00 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1027                              <2> 
  1028                              <2> %assign i +1
  1029 00000A08 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1030                              <2> 
  1031                              <2> %assign i +1
  1032 00000A10 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1033                              <2> 
  1034                              <2> %assign i +1
  1035 00000A18 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1036                              <2> 
  1037                              <2> %assign i +1
  1038 00000A20 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1039                              <2> 
  1040                              <2> %assign i +1
  1041 00000A28 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1042                              <2> 
  1043                              <2> %assign i +1
  1044 00000A30 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1045                              <2> 
  1046                              <2> %assign i +1
  1047 00000A38 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1048                              <2> 
  1049                              <2> %assign i +1
  1050 00000A40 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1051                              <2> 
  1052                              <2> %assign i +1
  1053 00000A48 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1054                              <2> 
  1055                              <2> %assign i +1
  1056 00000A50 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1057                              <2> 
  1058                              <2> %assign i +1
  1059 00000A58 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1060                              <2> 
  1061                              <2> %assign i +1
  1062 00000A60 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1063                              <2> 
  1064                              <2> %assign i +1
  1065 00000A68 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1066                              <2> 
  1067                              <2> %assign i +1
  1068 00000A70 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1069                              <2> 
  1070                              <2> %assign i +1
  1071 00000A78 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1072                              <2> 
  1073                              <2> %assign i +1
  1074 00000A80 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1075                              <2> 
  1076                              <2> %assign i +1
  1077 00000A88 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1078                              <2> 
  1079                              <2> %assign i +1
  1080 00000A90 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1081                              <2> 
  1082                              <2> %assign i +1
  1083 00000A98 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1084                              <2> 
  1085                              <2> %assign i +1
  1086 00000AA0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1087                              <2> 
  1088                              <2> %assign i +1
  1089 00000AA8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1090                              <2> 
  1091                              <2> %assign i +1
  1092 00000AB0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1093                              <2> 
  1094                              <2> %assign i +1
  1095 00000AB8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1096                              <2> 
  1097                              <2> %assign i +1
  1098 00000AC0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1099                              <2> 
  1100                              <2> %assign i +1
  1101 00000AC8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1102                              <2> 
  1103                              <2> %assign i +1
  1104 00000AD0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1105                              <2> 
  1106                              <2> %assign i +1
  1107 00000AD8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1108                              <2> 
  1109                              <2> %assign i +1
  1110 00000AE0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1111                              <2> 
  1112                              <2> %assign i +1
  1113 00000AE8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1114                              <2> 
  1115                              <2> %assign i +1
  1116 00000AF0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1117                              <2> 
  1118                              <2> %assign i +1
  1119 00000AF8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1120                              <2> 
  1121                              <2> %assign i +1
  1122 00000B00 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1123                              <2> 
  1124                              <2> %assign i +1
  1125 00000B08 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1126                              <2> 
  1127                              <2> %assign i +1
  1128 00000B10 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1129                              <2> 
  1130                              <2> %assign i +1
  1131 00000B18 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1132                              <2> 
  1133                              <2> %assign i +1
  1134 00000B20 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1135                              <2> 
  1136                              <2> %assign i +1
  1137 00000B28 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1138                              <2> 
  1139                              <2> %assign i +1
  1140 00000B30 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1141                              <2> 
  1142                              <2> %assign i +1
  1143 00000B38 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1144                              <2> 
  1145                              <2> %assign i +1
  1146 00000B40 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1147                              <2> 
  1148                              <2> %assign i +1
  1149 00000B48 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1150                              <2> 
  1151                              <2> %assign i +1
  1152 00000B50 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1153                              <2> 
  1154                              <2> %assign i +1
  1155 00000B58 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1156                              <2> 
  1157                              <2> %assign i +1
  1158 00000B60 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1159                              <2> 
  1160                              <2> %assign i +1
  1161 00000B68 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1162                              <2> 
  1163                              <2> %assign i +1
  1164 00000B70 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1165                              <2> 
  1166                              <2> %assign i +1
  1167 00000B78 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1168                              <2> 
  1169                              <2> %assign i +1
  1170 00000B80 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1171                              <2> 
  1172                              <2> %assign i +1
  1173 00000B88 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1174                              <2> 
  1175                              <2> %assign i +1
  1176 00000B90 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1177                              <2> 
  1178                              <2> %assign i +1
  1179 00000B98 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1180                              <2> 
  1181                              <2> %assign i +1
  1182 00000BA0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1183                              <2> 
  1184                              <2> %assign i +1
  1185 00000BA8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1186                              <2> 
  1187                              <2> %assign i +1
  1188 00000BB0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1189                              <2> 
  1190                              <2> %assign i +1
  1191 00000BB8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1192                              <2> 
  1193                              <2> %assign i +1
  1194 00000BC0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1195                              <2> 
  1196                              <2> %assign i +1
  1197 00000BC8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1198                              <2> 
  1199                              <2> %assign i +1
  1200 00000BD0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1201                              <2> 
  1202                              <2> %assign i +1
  1203 00000BD8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1204                              <2> 
  1205                              <2> %assign i +1
  1206 00000BE0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1207                              <2> 
  1208                              <2> %assign i +1
  1209 00000BE8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1210                              <2> 
  1211                              <2> %assign i +1
  1212 00000BF0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1213                              <2> 
  1214                              <2> %assign i +1
  1215 00000BF8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1216                              <2> 
  1217                              <2> %assign i +1
  1218 00000C00 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1219                              <2> 
  1220                              <2> %assign i +1
  1221 00000C08 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1222                              <2> 
  1223                              <2> %assign i +1
  1224 00000C10 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1225                              <2> 
  1226                              <2> %assign i +1
  1227 00000C18 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1228                              <2> 
  1229                              <2> %assign i +1
  1230 00000C20 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1231                              <2> 
  1232                              <2> %assign i +1
  1233 00000C28 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1234                              <2> 
  1235                              <2> %assign i +1
  1236 00000C30 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1237                              <2> 
  1238                              <2> %assign i +1
  1239 00000C38 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1240                              <2> 
  1241                              <2> %assign i +1
  1242 00000C40 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1243                              <2> 
  1244                              <2> %assign i +1
  1245 00000C48 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1246                              <2> 
  1247                              <2> %assign i +1
  1248 00000C50 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1249                              <2> 
  1250                              <2> %assign i +1
  1251 00000C58 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1252                              <2> 
  1253                              <2> %assign i +1
  1254 00000C60 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1255                              <2> 
  1256                              <2> %assign i +1
  1257 00000C68 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1258                              <2> 
  1259                              <2> %assign i +1
  1260 00000C70 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1261                              <2> 
  1262                              <2> %assign i +1
  1263 00000C78 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1264                              <2> 
  1265                              <2> %assign i +1
  1266 00000C80 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1267                              <2> 
  1268                              <2> %assign i +1
  1269 00000C88 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1270                              <2> 
  1271                              <2> %assign i +1
  1272 00000C90 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1273                              <2> 
  1274                              <2> %assign i +1
  1275 00000C98 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1276                              <2> 
  1277                              <2> %assign i +1
  1278 00000CA0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1279                              <2> 
  1280                              <2> %assign i +1
  1281 00000CA8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1282                              <2> 
  1283                              <2> %assign i +1
  1284 00000CB0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1285                              <2> 
  1286                              <2> %assign i +1
  1287 00000CB8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1288                              <2> 
  1289                              <2> %assign i +1
  1290 00000CC0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1291                              <2> 
  1292                              <2> %assign i +1
  1293 00000CC8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1294                              <2> 
  1295                              <2> %assign i +1
  1296 00000CD0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1297                              <2> 
  1298                              <2> %assign i +1
  1299 00000CD8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1300                              <2> 
  1301                              <2> %assign i +1
  1302 00000CE0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1303                              <2> 
  1304                              <2> %assign i +1
  1305                              <1> idt_end:
  1306                              <1> [BITS 32]
  1307                                  [BITS 32]
  1308                                  	%include 'source/exception.asm'
  1309                              <1> 
  1310                              <1> unhand:	
  1311                              <1> 	%assign i 0
  1312                              <1> 	%rep 256
  1313                              <1> 	cli
  1314                              <1> 	mov byte [intprob], i
  1315                              <1> 	jmp unhand2
  1316                              <1> 	%assign i i+1
  1317                              <1> 	%endrep
  1318 00000CE8 FA                  <2>  cli
  1319 00000CE9 C605[E31C0000]00    <2>  mov byte [intprob], i
  1320 00000CF0 E9F30C0000          <2>  jmp unhand2
  1321                              <2>  %assign i i+1
  1322 00000CF5 FA                  <2>  cli
  1323 00000CF6 C605[E31C0000]01    <2>  mov byte [intprob], i
  1324 00000CFD E9E60C0000          <2>  jmp unhand2
  1325                              <2>  %assign i i+1
  1326 00000D02 FA                  <2>  cli
  1327 00000D03 C605[E31C0000]02    <2>  mov byte [intprob], i
  1328 00000D0A E9D90C0000          <2>  jmp unhand2
  1329                              <2>  %assign i i+1
  1330 00000D0F FA                  <2>  cli
  1331 00000D10 C605[E31C0000]03    <2>  mov byte [intprob], i
  1332 00000D17 E9CC0C0000          <2>  jmp unhand2
  1333                              <2>  %assign i i+1
  1334 00000D1C FA                  <2>  cli
  1335 00000D1D C605[E31C0000]04    <2>  mov byte [intprob], i
  1336 00000D24 E9BF0C0000          <2>  jmp unhand2
  1337                              <2>  %assign i i+1
  1338 00000D29 FA                  <2>  cli
  1339 00000D2A C605[E31C0000]05    <2>  mov byte [intprob], i
  1340 00000D31 E9B20C0000          <2>  jmp unhand2
  1341                              <2>  %assign i i+1
  1342 00000D36 FA                  <2>  cli
  1343 00000D37 C605[E31C0000]06    <2>  mov byte [intprob], i
  1344 00000D3E E9A50C0000          <2>  jmp unhand2
  1345                              <2>  %assign i i+1
  1346 00000D43 FA                  <2>  cli
  1347 00000D44 C605[E31C0000]07    <2>  mov byte [intprob], i
  1348 00000D4B E9980C0000          <2>  jmp unhand2
  1349                              <2>  %assign i i+1
  1350 00000D50 FA                  <2>  cli
  1351 00000D51 C605[E31C0000]08    <2>  mov byte [intprob], i
  1352 00000D58 E98B0C0000          <2>  jmp unhand2
  1353                              <2>  %assign i i+1
  1354 00000D5D FA                  <2>  cli
  1355 00000D5E C605[E31C0000]09    <2>  mov byte [intprob], i
  1356 00000D65 E97E0C0000          <2>  jmp unhand2
  1357                              <2>  %assign i i+1
  1358 00000D6A FA                  <2>  cli
  1359 00000D6B C605[E31C0000]0A    <2>  mov byte [intprob], i
  1360 00000D72 E9710C0000          <2>  jmp unhand2
  1361                              <2>  %assign i i+1
  1362 00000D77 FA                  <2>  cli
  1363 00000D78 C605[E31C0000]0B    <2>  mov byte [intprob], i
  1364 00000D7F E9640C0000          <2>  jmp unhand2
  1365                              <2>  %assign i i+1
  1366 00000D84 FA                  <2>  cli
  1367 00000D85 C605[E31C0000]0C    <2>  mov byte [intprob], i
  1368 00000D8C E9570C0000          <2>  jmp unhand2
  1369                              <2>  %assign i i+1
  1370 00000D91 FA                  <2>  cli
  1371 00000D92 C605[E31C0000]0D    <2>  mov byte [intprob], i
  1372 00000D99 E94A0C0000          <2>  jmp unhand2
  1373                              <2>  %assign i i+1
  1374 00000D9E FA                  <2>  cli
  1375 00000D9F C605[E31C0000]0E    <2>  mov byte [intprob], i
  1376 00000DA6 E93D0C0000          <2>  jmp unhand2
  1377                              <2>  %assign i i+1
  1378 00000DAB FA                  <2>  cli
  1379 00000DAC C605[E31C0000]0F    <2>  mov byte [intprob], i
  1380 00000DB3 E9300C0000          <2>  jmp unhand2
  1381                              <2>  %assign i i+1
  1382 00000DB8 FA                  <2>  cli
  1383 00000DB9 C605[E31C0000]10    <2>  mov byte [intprob], i
  1384 00000DC0 E9230C0000          <2>  jmp unhand2
  1385                              <2>  %assign i i+1
  1386 00000DC5 FA                  <2>  cli
  1387 00000DC6 C605[E31C0000]11    <2>  mov byte [intprob], i
  1388 00000DCD E9160C0000          <2>  jmp unhand2
  1389                              <2>  %assign i i+1
  1390 00000DD2 FA                  <2>  cli
  1391 00000DD3 C605[E31C0000]12    <2>  mov byte [intprob], i
  1392 00000DDA E9090C0000          <2>  jmp unhand2
  1393                              <2>  %assign i i+1
  1394 00000DDF FA                  <2>  cli
  1395 00000DE0 C605[E31C0000]13    <2>  mov byte [intprob], i
  1396 00000DE7 E9FC0B0000          <2>  jmp unhand2
  1397                              <2>  %assign i i+1
  1398 00000DEC FA                  <2>  cli
  1399 00000DED C605[E31C0000]14    <2>  mov byte [intprob], i
  1400 00000DF4 E9EF0B0000          <2>  jmp unhand2
  1401                              <2>  %assign i i+1
  1402 00000DF9 FA                  <2>  cli
  1403 00000DFA C605[E31C0000]15    <2>  mov byte [intprob], i
  1404 00000E01 E9E20B0000          <2>  jmp unhand2
  1405                              <2>  %assign i i+1
  1406 00000E06 FA                  <2>  cli
  1407 00000E07 C605[E31C0000]16    <2>  mov byte [intprob], i
  1408 00000E0E E9D50B0000          <2>  jmp unhand2
  1409                              <2>  %assign i i+1
  1410 00000E13 FA                  <2>  cli
  1411 00000E14 C605[E31C0000]17    <2>  mov byte [intprob], i
  1412 00000E1B E9C80B0000          <2>  jmp unhand2
  1413                              <2>  %assign i i+1
  1414 00000E20 FA                  <2>  cli
  1415 00000E21 C605[E31C0000]18    <2>  mov byte [intprob], i
  1416 00000E28 E9BB0B0000          <2>  jmp unhand2
  1417                              <2>  %assign i i+1
  1418 00000E2D FA                  <2>  cli
  1419 00000E2E C605[E31C0000]19    <2>  mov byte [intprob], i
  1420 00000E35 E9AE0B0000          <2>  jmp unhand2
  1421                              <2>  %assign i i+1
  1422 00000E3A FA                  <2>  cli
  1423 00000E3B C605[E31C0000]1A    <2>  mov byte [intprob], i
  1424 00000E42 E9A10B0000          <2>  jmp unhand2
  1425                              <2>  %assign i i+1
  1426 00000E47 FA                  <2>  cli
  1427 00000E48 C605[E31C0000]1B    <2>  mov byte [intprob], i
  1428 00000E4F E9940B0000          <2>  jmp unhand2
  1429                              <2>  %assign i i+1
  1430 00000E54 FA                  <2>  cli
  1431 00000E55 C605[E31C0000]1C    <2>  mov byte [intprob], i
  1432 00000E5C E9870B0000          <2>  jmp unhand2
  1433                              <2>  %assign i i+1
  1434 00000E61 FA                  <2>  cli
  1435 00000E62 C605[E31C0000]1D    <2>  mov byte [intprob], i
  1436 00000E69 E97A0B0000          <2>  jmp unhand2
  1437                              <2>  %assign i i+1
  1438 00000E6E FA                  <2>  cli
  1439 00000E6F C605[E31C0000]1E    <2>  mov byte [intprob], i
  1440 00000E76 E96D0B0000          <2>  jmp unhand2
  1441                              <2>  %assign i i+1
  1442 00000E7B FA                  <2>  cli
  1443 00000E7C C605[E31C0000]1F    <2>  mov byte [intprob], i
  1444 00000E83 E9600B0000          <2>  jmp unhand2
  1445                              <2>  %assign i i+1
  1446 00000E88 FA                  <2>  cli
  1447 00000E89 C605[E31C0000]20    <2>  mov byte [intprob], i
  1448 00000E90 E9530B0000          <2>  jmp unhand2
  1449                              <2>  %assign i i+1
  1450 00000E95 FA                  <2>  cli
  1451 00000E96 C605[E31C0000]21    <2>  mov byte [intprob], i
  1452 00000E9D E9460B0000          <2>  jmp unhand2
  1453                              <2>  %assign i i+1
  1454 00000EA2 FA                  <2>  cli
  1455 00000EA3 C605[E31C0000]22    <2>  mov byte [intprob], i
  1456 00000EAA E9390B0000          <2>  jmp unhand2
  1457                              <2>  %assign i i+1
  1458 00000EAF FA                  <2>  cli
  1459 00000EB0 C605[E31C0000]23    <2>  mov byte [intprob], i
  1460 00000EB7 E92C0B0000          <2>  jmp unhand2
  1461                              <2>  %assign i i+1
  1462 00000EBC FA                  <2>  cli
  1463 00000EBD C605[E31C0000]24    <2>  mov byte [intprob], i
  1464 00000EC4 E91F0B0000          <2>  jmp unhand2
  1465                              <2>  %assign i i+1
  1466 00000EC9 FA                  <2>  cli
  1467 00000ECA C605[E31C0000]25    <2>  mov byte [intprob], i
  1468 00000ED1 E9120B0000          <2>  jmp unhand2
  1469                              <2>  %assign i i+1
  1470 00000ED6 FA                  <2>  cli
  1471 00000ED7 C605[E31C0000]26    <2>  mov byte [intprob], i
  1472 00000EDE E9050B0000          <2>  jmp unhand2
  1473                              <2>  %assign i i+1
  1474 00000EE3 FA                  <2>  cli
  1475 00000EE4 C605[E31C0000]27    <2>  mov byte [intprob], i
  1476 00000EEB E9F80A0000          <2>  jmp unhand2
  1477                              <2>  %assign i i+1
  1478 00000EF0 FA                  <2>  cli
  1479 00000EF1 C605[E31C0000]28    <2>  mov byte [intprob], i
  1480 00000EF8 E9EB0A0000          <2>  jmp unhand2
  1481                              <2>  %assign i i+1
  1482 00000EFD FA                  <2>  cli
  1483 00000EFE C605[E31C0000]29    <2>  mov byte [intprob], i
  1484 00000F05 E9DE0A0000          <2>  jmp unhand2
  1485                              <2>  %assign i i+1
  1486 00000F0A FA                  <2>  cli
  1487 00000F0B C605[E31C0000]2A    <2>  mov byte [intprob], i
  1488 00000F12 E9D10A0000          <2>  jmp unhand2
  1489                              <2>  %assign i i+1
  1490 00000F17 FA                  <2>  cli
  1491 00000F18 C605[E31C0000]2B    <2>  mov byte [intprob], i
  1492 00000F1F E9C40A0000          <2>  jmp unhand2
  1493                              <2>  %assign i i+1
  1494 00000F24 FA                  <2>  cli
  1495 00000F25 C605[E31C0000]2C    <2>  mov byte [intprob], i
  1496 00000F2C E9B70A0000          <2>  jmp unhand2
  1497                              <2>  %assign i i+1
  1498 00000F31 FA                  <2>  cli
  1499 00000F32 C605[E31C0000]2D    <2>  mov byte [intprob], i
  1500 00000F39 E9AA0A0000          <2>  jmp unhand2
  1501                              <2>  %assign i i+1
  1502 00000F3E FA                  <2>  cli
  1503 00000F3F C605[E31C0000]2E    <2>  mov byte [intprob], i
  1504 00000F46 E99D0A0000          <2>  jmp unhand2
  1505                              <2>  %assign i i+1
  1506 00000F4B FA                  <2>  cli
  1507 00000F4C C605[E31C0000]2F    <2>  mov byte [intprob], i
  1508 00000F53 E9900A0000          <2>  jmp unhand2
  1509                              <2>  %assign i i+1
  1510 00000F58 FA                  <2>  cli
  1511 00000F59 C605[E31C0000]30    <2>  mov byte [intprob], i
  1512 00000F60 E9830A0000          <2>  jmp unhand2
  1513                              <2>  %assign i i+1
  1514 00000F65 FA                  <2>  cli
  1515 00000F66 C605[E31C0000]31    <2>  mov byte [intprob], i
  1516 00000F6D E9760A0000          <2>  jmp unhand2
  1517                              <2>  %assign i i+1
  1518 00000F72 FA                  <2>  cli
  1519 00000F73 C605[E31C0000]32    <2>  mov byte [intprob], i
  1520 00000F7A E9690A0000          <2>  jmp unhand2
  1521                              <2>  %assign i i+1
  1522 00000F7F FA                  <2>  cli
  1523 00000F80 C605[E31C0000]33    <2>  mov byte [intprob], i
  1524 00000F87 E95C0A0000          <2>  jmp unhand2
  1525                              <2>  %assign i i+1
  1526 00000F8C FA                  <2>  cli
  1527 00000F8D C605[E31C0000]34    <2>  mov byte [intprob], i
  1528 00000F94 E94F0A0000          <2>  jmp unhand2
  1529                              <2>  %assign i i+1
  1530 00000F99 FA                  <2>  cli
  1531 00000F9A C605[E31C0000]35    <2>  mov byte [intprob], i
  1532 00000FA1 E9420A0000          <2>  jmp unhand2
  1533                              <2>  %assign i i+1
  1534 00000FA6 FA                  <2>  cli
  1535 00000FA7 C605[E31C0000]36    <2>  mov byte [intprob], i
  1536 00000FAE E9350A0000          <2>  jmp unhand2
  1537                              <2>  %assign i i+1
  1538 00000FB3 FA                  <2>  cli
  1539 00000FB4 C605[E31C0000]37    <2>  mov byte [intprob], i
  1540 00000FBB E9280A0000          <2>  jmp unhand2
  1541                              <2>  %assign i i+1
  1542 00000FC0 FA                  <2>  cli
  1543 00000FC1 C605[E31C0000]38    <2>  mov byte [intprob], i
  1544 00000FC8 E91B0A0000          <2>  jmp unhand2
  1545                              <2>  %assign i i+1
  1546 00000FCD FA                  <2>  cli
  1547 00000FCE C605[E31C0000]39    <2>  mov byte [intprob], i
  1548 00000FD5 E90E0A0000          <2>  jmp unhand2
  1549                              <2>  %assign i i+1
  1550 00000FDA FA                  <2>  cli
  1551 00000FDB C605[E31C0000]3A    <2>  mov byte [intprob], i
  1552 00000FE2 E9010A0000          <2>  jmp unhand2
  1553                              <2>  %assign i i+1
  1554 00000FE7 FA                  <2>  cli
  1555 00000FE8 C605[E31C0000]3B    <2>  mov byte [intprob], i
  1556 00000FEF E9F4090000          <2>  jmp unhand2
  1557                              <2>  %assign i i+1
  1558 00000FF4 FA                  <2>  cli
  1559 00000FF5 C605[E31C0000]3C    <2>  mov byte [intprob], i
  1560 00000FFC E9E7090000          <2>  jmp unhand2
  1561                              <2>  %assign i i+1
  1562 00001001 FA                  <2>  cli
  1563 00001002 C605[E31C0000]3D    <2>  mov byte [intprob], i
  1564 00001009 E9DA090000          <2>  jmp unhand2
  1565                              <2>  %assign i i+1
  1566 0000100E FA                  <2>  cli
  1567 0000100F C605[E31C0000]3E    <2>  mov byte [intprob], i
  1568 00001016 E9CD090000          <2>  jmp unhand2
  1569                              <2>  %assign i i+1
  1570 0000101B FA                  <2>  cli
  1571 0000101C C605[E31C0000]3F    <2>  mov byte [intprob], i
  1572 00001023 E9C0090000          <2>  jmp unhand2
  1573                              <2>  %assign i i+1
  1574 00001028 FA                  <2>  cli
  1575 00001029 C605[E31C0000]40    <2>  mov byte [intprob], i
  1576 00001030 E9B3090000          <2>  jmp unhand2
  1577                              <2>  %assign i i+1
  1578 00001035 FA                  <2>  cli
  1579 00001036 C605[E31C0000]41    <2>  mov byte [intprob], i
  1580 0000103D E9A6090000          <2>  jmp unhand2
  1581                              <2>  %assign i i+1
  1582 00001042 FA                  <2>  cli
  1583 00001043 C605[E31C0000]42    <2>  mov byte [intprob], i
  1584 0000104A E999090000          <2>  jmp unhand2
  1585                              <2>  %assign i i+1
  1586 0000104F FA                  <2>  cli
  1587 00001050 C605[E31C0000]43    <2>  mov byte [intprob], i
  1588 00001057 E98C090000          <2>  jmp unhand2
  1589                              <2>  %assign i i+1
  1590 0000105C FA                  <2>  cli
  1591 0000105D C605[E31C0000]44    <2>  mov byte [intprob], i
  1592 00001064 E97F090000          <2>  jmp unhand2
  1593                              <2>  %assign i i+1
  1594 00001069 FA                  <2>  cli
  1595 0000106A C605[E31C0000]45    <2>  mov byte [intprob], i
  1596 00001071 E972090000          <2>  jmp unhand2
  1597                              <2>  %assign i i+1
  1598 00001076 FA                  <2>  cli
  1599 00001077 C605[E31C0000]46    <2>  mov byte [intprob], i
  1600 0000107E E965090000          <2>  jmp unhand2
  1601                              <2>  %assign i i+1
  1602 00001083 FA                  <2>  cli
  1603 00001084 C605[E31C0000]47    <2>  mov byte [intprob], i
  1604 0000108B E958090000          <2>  jmp unhand2
  1605                              <2>  %assign i i+1
  1606 00001090 FA                  <2>  cli
  1607 00001091 C605[E31C0000]48    <2>  mov byte [intprob], i
  1608 00001098 E94B090000          <2>  jmp unhand2
  1609                              <2>  %assign i i+1
  1610 0000109D FA                  <2>  cli
  1611 0000109E C605[E31C0000]49    <2>  mov byte [intprob], i
  1612 000010A5 E93E090000          <2>  jmp unhand2
  1613                              <2>  %assign i i+1
  1614 000010AA FA                  <2>  cli
  1615 000010AB C605[E31C0000]4A    <2>  mov byte [intprob], i
  1616 000010B2 E931090000          <2>  jmp unhand2
  1617                              <2>  %assign i i+1
  1618 000010B7 FA                  <2>  cli
  1619 000010B8 C605[E31C0000]4B    <2>  mov byte [intprob], i
  1620 000010BF E924090000          <2>  jmp unhand2
  1621                              <2>  %assign i i+1
  1622 000010C4 FA                  <2>  cli
  1623 000010C5 C605[E31C0000]4C    <2>  mov byte [intprob], i
  1624 000010CC E917090000          <2>  jmp unhand2
  1625                              <2>  %assign i i+1
  1626 000010D1 FA                  <2>  cli
  1627 000010D2 C605[E31C0000]4D    <2>  mov byte [intprob], i
  1628 000010D9 E90A090000          <2>  jmp unhand2
  1629                              <2>  %assign i i+1
  1630 000010DE FA                  <2>  cli
  1631 000010DF C605[E31C0000]4E    <2>  mov byte [intprob], i
  1632 000010E6 E9FD080000          <2>  jmp unhand2
  1633                              <2>  %assign i i+1
  1634 000010EB FA                  <2>  cli
  1635 000010EC C605[E31C0000]4F    <2>  mov byte [intprob], i
  1636 000010F3 E9F0080000          <2>  jmp unhand2
  1637                              <2>  %assign i i+1
  1638 000010F8 FA                  <2>  cli
  1639 000010F9 C605[E31C0000]50    <2>  mov byte [intprob], i
  1640 00001100 E9E3080000          <2>  jmp unhand2
  1641                              <2>  %assign i i+1
  1642 00001105 FA                  <2>  cli
  1643 00001106 C605[E31C0000]51    <2>  mov byte [intprob], i
  1644 0000110D E9D6080000          <2>  jmp unhand2
  1645                              <2>  %assign i i+1
  1646 00001112 FA                  <2>  cli
  1647 00001113 C605[E31C0000]52    <2>  mov byte [intprob], i
  1648 0000111A E9C9080000          <2>  jmp unhand2
  1649                              <2>  %assign i i+1
  1650 0000111F FA                  <2>  cli
  1651 00001120 C605[E31C0000]53    <2>  mov byte [intprob], i
  1652 00001127 E9BC080000          <2>  jmp unhand2
  1653                              <2>  %assign i i+1
  1654 0000112C FA                  <2>  cli
  1655 0000112D C605[E31C0000]54    <2>  mov byte [intprob], i
  1656 00001134 E9AF080000          <2>  jmp unhand2
  1657                              <2>  %assign i i+1
  1658 00001139 FA                  <2>  cli
  1659 0000113A C605[E31C0000]55    <2>  mov byte [intprob], i
  1660 00001141 E9A2080000          <2>  jmp unhand2
  1661                              <2>  %assign i i+1
  1662 00001146 FA                  <2>  cli
  1663 00001147 C605[E31C0000]56    <2>  mov byte [intprob], i
  1664 0000114E E995080000          <2>  jmp unhand2
  1665                              <2>  %assign i i+1
  1666 00001153 FA                  <2>  cli
  1667 00001154 C605[E31C0000]57    <2>  mov byte [intprob], i
  1668 0000115B E988080000          <2>  jmp unhand2
  1669                              <2>  %assign i i+1
  1670 00001160 FA                  <2>  cli
  1671 00001161 C605[E31C0000]58    <2>  mov byte [intprob], i
  1672 00001168 E97B080000          <2>  jmp unhand2
  1673                              <2>  %assign i i+1
  1674 0000116D FA                  <2>  cli
  1675 0000116E C605[E31C0000]59    <2>  mov byte [intprob], i
  1676 00001175 E96E080000          <2>  jmp unhand2
  1677                              <2>  %assign i i+1
  1678 0000117A FA                  <2>  cli
  1679 0000117B C605[E31C0000]5A    <2>  mov byte [intprob], i
  1680 00001182 E961080000          <2>  jmp unhand2
  1681                              <2>  %assign i i+1
  1682 00001187 FA                  <2>  cli
  1683 00001188 C605[E31C0000]5B    <2>  mov byte [intprob], i
  1684 0000118F E954080000          <2>  jmp unhand2
  1685                              <2>  %assign i i+1
  1686 00001194 FA                  <2>  cli
  1687 00001195 C605[E31C0000]5C    <2>  mov byte [intprob], i
  1688 0000119C E947080000          <2>  jmp unhand2
  1689                              <2>  %assign i i+1
  1690 000011A1 FA                  <2>  cli
  1691 000011A2 C605[E31C0000]5D    <2>  mov byte [intprob], i
  1692 000011A9 E93A080000          <2>  jmp unhand2
  1693                              <2>  %assign i i+1
  1694 000011AE FA                  <2>  cli
  1695 000011AF C605[E31C0000]5E    <2>  mov byte [intprob], i
  1696 000011B6 E92D080000          <2>  jmp unhand2
  1697                              <2>  %assign i i+1
  1698 000011BB FA                  <2>  cli
  1699 000011BC C605[E31C0000]5F    <2>  mov byte [intprob], i
  1700 000011C3 E920080000          <2>  jmp unhand2
  1701                              <2>  %assign i i+1
  1702 000011C8 FA                  <2>  cli
  1703 000011C9 C605[E31C0000]60    <2>  mov byte [intprob], i
  1704 000011D0 E913080000          <2>  jmp unhand2
  1705                              <2>  %assign i i+1
  1706 000011D5 FA                  <2>  cli
  1707 000011D6 C605[E31C0000]61    <2>  mov byte [intprob], i
  1708 000011DD E906080000          <2>  jmp unhand2
  1709                              <2>  %assign i i+1
  1710 000011E2 FA                  <2>  cli
  1711 000011E3 C605[E31C0000]62    <2>  mov byte [intprob], i
  1712 000011EA E9F9070000          <2>  jmp unhand2
  1713                              <2>  %assign i i+1
  1714 000011EF FA                  <2>  cli
  1715 000011F0 C605[E31C0000]63    <2>  mov byte [intprob], i
  1716 000011F7 E9EC070000          <2>  jmp unhand2
  1717                              <2>  %assign i i+1
  1718 000011FC FA                  <2>  cli
  1719 000011FD C605[E31C0000]64    <2>  mov byte [intprob], i
  1720 00001204 E9DF070000          <2>  jmp unhand2
  1721                              <2>  %assign i i+1
  1722 00001209 FA                  <2>  cli
  1723 0000120A C605[E31C0000]65    <2>  mov byte [intprob], i
  1724 00001211 E9D2070000          <2>  jmp unhand2
  1725                              <2>  %assign i i+1
  1726 00001216 FA                  <2>  cli
  1727 00001217 C605[E31C0000]66    <2>  mov byte [intprob], i
  1728 0000121E E9C5070000          <2>  jmp unhand2
  1729                              <2>  %assign i i+1
  1730 00001223 FA                  <2>  cli
  1731 00001224 C605[E31C0000]67    <2>  mov byte [intprob], i
  1732 0000122B E9B8070000          <2>  jmp unhand2
  1733                              <2>  %assign i i+1
  1734 00001230 FA                  <2>  cli
  1735 00001231 C605[E31C0000]68    <2>  mov byte [intprob], i
  1736 00001238 E9AB070000          <2>  jmp unhand2
  1737                              <2>  %assign i i+1
  1738 0000123D FA                  <2>  cli
  1739 0000123E C605[E31C0000]69    <2>  mov byte [intprob], i
  1740 00001245 E99E070000          <2>  jmp unhand2
  1741                              <2>  %assign i i+1
  1742 0000124A FA                  <2>  cli
  1743 0000124B C605[E31C0000]6A    <2>  mov byte [intprob], i
  1744 00001252 E991070000          <2>  jmp unhand2
  1745                              <2>  %assign i i+1
  1746 00001257 FA                  <2>  cli
  1747 00001258 C605[E31C0000]6B    <2>  mov byte [intprob], i
  1748 0000125F E984070000          <2>  jmp unhand2
  1749                              <2>  %assign i i+1
  1750 00001264 FA                  <2>  cli
  1751 00001265 C605[E31C0000]6C    <2>  mov byte [intprob], i
  1752 0000126C E977070000          <2>  jmp unhand2
  1753                              <2>  %assign i i+1
  1754 00001271 FA                  <2>  cli
  1755 00001272 C605[E31C0000]6D    <2>  mov byte [intprob], i
  1756 00001279 E96A070000          <2>  jmp unhand2
  1757                              <2>  %assign i i+1
  1758 0000127E FA                  <2>  cli
  1759 0000127F C605[E31C0000]6E    <2>  mov byte [intprob], i
  1760 00001286 E95D070000          <2>  jmp unhand2
  1761                              <2>  %assign i i+1
  1762 0000128B FA                  <2>  cli
  1763 0000128C C605[E31C0000]6F    <2>  mov byte [intprob], i
  1764 00001293 E950070000          <2>  jmp unhand2
  1765                              <2>  %assign i i+1
  1766 00001298 FA                  <2>  cli
  1767 00001299 C605[E31C0000]70    <2>  mov byte [intprob], i
  1768 000012A0 E943070000          <2>  jmp unhand2
  1769                              <2>  %assign i i+1
  1770 000012A5 FA                  <2>  cli
  1771 000012A6 C605[E31C0000]71    <2>  mov byte [intprob], i
  1772 000012AD E936070000          <2>  jmp unhand2
  1773                              <2>  %assign i i+1
  1774 000012B2 FA                  <2>  cli
  1775 000012B3 C605[E31C0000]72    <2>  mov byte [intprob], i
  1776 000012BA E929070000          <2>  jmp unhand2
  1777                              <2>  %assign i i+1
  1778 000012BF FA                  <2>  cli
  1779 000012C0 C605[E31C0000]73    <2>  mov byte [intprob], i
  1780 000012C7 E91C070000          <2>  jmp unhand2
  1781                              <2>  %assign i i+1
  1782 000012CC FA                  <2>  cli
  1783 000012CD C605[E31C0000]74    <2>  mov byte [intprob], i
  1784 000012D4 E90F070000          <2>  jmp unhand2
  1785                              <2>  %assign i i+1
  1786 000012D9 FA                  <2>  cli
  1787 000012DA C605[E31C0000]75    <2>  mov byte [intprob], i
  1788 000012E1 E902070000          <2>  jmp unhand2
  1789                              <2>  %assign i i+1
  1790 000012E6 FA                  <2>  cli
  1791 000012E7 C605[E31C0000]76    <2>  mov byte [intprob], i
  1792 000012EE E9F5060000          <2>  jmp unhand2
  1793                              <2>  %assign i i+1
  1794 000012F3 FA                  <2>  cli
  1795 000012F4 C605[E31C0000]77    <2>  mov byte [intprob], i
  1796 000012FB E9E8060000          <2>  jmp unhand2
  1797                              <2>  %assign i i+1
  1798 00001300 FA                  <2>  cli
  1799 00001301 C605[E31C0000]78    <2>  mov byte [intprob], i
  1800 00001308 E9DB060000          <2>  jmp unhand2
  1801                              <2>  %assign i i+1
  1802 0000130D FA                  <2>  cli
  1803 0000130E C605[E31C0000]79    <2>  mov byte [intprob], i
  1804 00001315 E9CE060000          <2>  jmp unhand2
  1805                              <2>  %assign i i+1
  1806 0000131A FA                  <2>  cli
  1807 0000131B C605[E31C0000]7A    <2>  mov byte [intprob], i
  1808 00001322 E9C1060000          <2>  jmp unhand2
  1809                              <2>  %assign i i+1
  1810 00001327 FA                  <2>  cli
  1811 00001328 C605[E31C0000]7B    <2>  mov byte [intprob], i
  1812 0000132F E9B4060000          <2>  jmp unhand2
  1813                              <2>  %assign i i+1
  1814 00001334 FA                  <2>  cli
  1815 00001335 C605[E31C0000]7C    <2>  mov byte [intprob], i
  1816 0000133C E9A7060000          <2>  jmp unhand2
  1817                              <2>  %assign i i+1
  1818 00001341 FA                  <2>  cli
  1819 00001342 C605[E31C0000]7D    <2>  mov byte [intprob], i
  1820 00001349 E99A060000          <2>  jmp unhand2
  1821                              <2>  %assign i i+1
  1822 0000134E FA                  <2>  cli
  1823 0000134F C605[E31C0000]7E    <2>  mov byte [intprob], i
  1824 00001356 E98D060000          <2>  jmp unhand2
  1825                              <2>  %assign i i+1
  1826 0000135B FA                  <2>  cli
  1827 0000135C C605[E31C0000]7F    <2>  mov byte [intprob], i
  1828 00001363 E980060000          <2>  jmp unhand2
  1829                              <2>  %assign i i+1
  1830 00001368 FA                  <2>  cli
  1831 00001369 C605[E31C0000]80    <2>  mov byte [intprob], i
  1832 00001370 E973060000          <2>  jmp unhand2
  1833                              <2>  %assign i i+1
  1834 00001375 FA                  <2>  cli
  1835 00001376 C605[E31C0000]81    <2>  mov byte [intprob], i
  1836 0000137D E966060000          <2>  jmp unhand2
  1837                              <2>  %assign i i+1
  1838 00001382 FA                  <2>  cli
  1839 00001383 C605[E31C0000]82    <2>  mov byte [intprob], i
  1840 0000138A E959060000          <2>  jmp unhand2
  1841                              <2>  %assign i i+1
  1842 0000138F FA                  <2>  cli
  1843 00001390 C605[E31C0000]83    <2>  mov byte [intprob], i
  1844 00001397 E94C060000          <2>  jmp unhand2
  1845                              <2>  %assign i i+1
  1846 0000139C FA                  <2>  cli
  1847 0000139D C605[E31C0000]84    <2>  mov byte [intprob], i
  1848 000013A4 E93F060000          <2>  jmp unhand2
  1849                              <2>  %assign i i+1
  1850 000013A9 FA                  <2>  cli
  1851 000013AA C605[E31C0000]85    <2>  mov byte [intprob], i
  1852 000013B1 E932060000          <2>  jmp unhand2
  1853                              <2>  %assign i i+1
  1854 000013B6 FA                  <2>  cli
  1855 000013B7 C605[E31C0000]86    <2>  mov byte [intprob], i
  1856 000013BE E925060000          <2>  jmp unhand2
  1857                              <2>  %assign i i+1
  1858 000013C3 FA                  <2>  cli
  1859 000013C4 C605[E31C0000]87    <2>  mov byte [intprob], i
  1860 000013CB E918060000          <2>  jmp unhand2
  1861                              <2>  %assign i i+1
  1862 000013D0 FA                  <2>  cli
  1863 000013D1 C605[E31C0000]88    <2>  mov byte [intprob], i
  1864 000013D8 E90B060000          <2>  jmp unhand2
  1865                              <2>  %assign i i+1
  1866 000013DD FA                  <2>  cli
  1867 000013DE C605[E31C0000]89    <2>  mov byte [intprob], i
  1868 000013E5 E9FE050000          <2>  jmp unhand2
  1869                              <2>  %assign i i+1
  1870 000013EA FA                  <2>  cli
  1871 000013EB C605[E31C0000]8A    <2>  mov byte [intprob], i
  1872 000013F2 E9F1050000          <2>  jmp unhand2
  1873                              <2>  %assign i i+1
  1874 000013F7 FA                  <2>  cli
  1875 000013F8 C605[E31C0000]8B    <2>  mov byte [intprob], i
  1876 000013FF E9E4050000          <2>  jmp unhand2
  1877                              <2>  %assign i i+1
  1878 00001404 FA                  <2>  cli
  1879 00001405 C605[E31C0000]8C    <2>  mov byte [intprob], i
  1880 0000140C E9D7050000          <2>  jmp unhand2
  1881                              <2>  %assign i i+1
  1882 00001411 FA                  <2>  cli
  1883 00001412 C605[E31C0000]8D    <2>  mov byte [intprob], i
  1884 00001419 E9CA050000          <2>  jmp unhand2
  1885                              <2>  %assign i i+1
  1886 0000141E FA                  <2>  cli
  1887 0000141F C605[E31C0000]8E    <2>  mov byte [intprob], i
  1888 00001426 E9BD050000          <2>  jmp unhand2
  1889                              <2>  %assign i i+1
  1890 0000142B FA                  <2>  cli
  1891 0000142C C605[E31C0000]8F    <2>  mov byte [intprob], i
  1892 00001433 E9B0050000          <2>  jmp unhand2
  1893                              <2>  %assign i i+1
  1894 00001438 FA                  <2>  cli
  1895 00001439 C605[E31C0000]90    <2>  mov byte [intprob], i
  1896 00001440 E9A3050000          <2>  jmp unhand2
  1897                              <2>  %assign i i+1
  1898 00001445 FA                  <2>  cli
  1899 00001446 C605[E31C0000]91    <2>  mov byte [intprob], i
  1900 0000144D E996050000          <2>  jmp unhand2
  1901                              <2>  %assign i i+1
  1902 00001452 FA                  <2>  cli
  1903 00001453 C605[E31C0000]92    <2>  mov byte [intprob], i
  1904 0000145A E989050000          <2>  jmp unhand2
  1905                              <2>  %assign i i+1
  1906 0000145F FA                  <2>  cli
  1907 00001460 C605[E31C0000]93    <2>  mov byte [intprob], i
  1908 00001467 E97C050000          <2>  jmp unhand2
  1909                              <2>  %assign i i+1
  1910 0000146C FA                  <2>  cli
  1911 0000146D C605[E31C0000]94    <2>  mov byte [intprob], i
  1912 00001474 E96F050000          <2>  jmp unhand2
  1913                              <2>  %assign i i+1
  1914 00001479 FA                  <2>  cli
  1915 0000147A C605[E31C0000]95    <2>  mov byte [intprob], i
  1916 00001481 E962050000          <2>  jmp unhand2
  1917                              <2>  %assign i i+1
  1918 00001486 FA                  <2>  cli
  1919 00001487 C605[E31C0000]96    <2>  mov byte [intprob], i
  1920 0000148E E955050000          <2>  jmp unhand2
  1921                              <2>  %assign i i+1
  1922 00001493 FA                  <2>  cli
  1923 00001494 C605[E31C0000]97    <2>  mov byte [intprob], i
  1924 0000149B E948050000          <2>  jmp unhand2
  1925                              <2>  %assign i i+1
  1926 000014A0 FA                  <2>  cli
  1927 000014A1 C605[E31C0000]98    <2>  mov byte [intprob], i
  1928 000014A8 E93B050000          <2>  jmp unhand2
  1929                              <2>  %assign i i+1
  1930 000014AD FA                  <2>  cli
  1931 000014AE C605[E31C0000]99    <2>  mov byte [intprob], i
  1932 000014B5 E92E050000          <2>  jmp unhand2
  1933                              <2>  %assign i i+1
  1934 000014BA FA                  <2>  cli
  1935 000014BB C605[E31C0000]9A    <2>  mov byte [intprob], i
  1936 000014C2 E921050000          <2>  jmp unhand2
  1937                              <2>  %assign i i+1
  1938 000014C7 FA                  <2>  cli
  1939 000014C8 C605[E31C0000]9B    <2>  mov byte [intprob], i
  1940 000014CF E914050000          <2>  jmp unhand2
  1941                              <2>  %assign i i+1
  1942 000014D4 FA                  <2>  cli
  1943 000014D5 C605[E31C0000]9C    <2>  mov byte [intprob], i
  1944 000014DC E907050000          <2>  jmp unhand2
  1945                              <2>  %assign i i+1
  1946 000014E1 FA                  <2>  cli
  1947 000014E2 C605[E31C0000]9D    <2>  mov byte [intprob], i
  1948 000014E9 E9FA040000          <2>  jmp unhand2
  1949                              <2>  %assign i i+1
  1950 000014EE FA                  <2>  cli
  1951 000014EF C605[E31C0000]9E    <2>  mov byte [intprob], i
  1952 000014F6 E9ED040000          <2>  jmp unhand2
  1953                              <2>  %assign i i+1
  1954 000014FB FA                  <2>  cli
  1955 000014FC C605[E31C0000]9F    <2>  mov byte [intprob], i
  1956 00001503 E9E0040000          <2>  jmp unhand2
  1957                              <2>  %assign i i+1
  1958 00001508 FA                  <2>  cli
  1959 00001509 C605[E31C0000]A0    <2>  mov byte [intprob], i
  1960 00001510 E9D3040000          <2>  jmp unhand2
  1961                              <2>  %assign i i+1
  1962 00001515 FA                  <2>  cli
  1963 00001516 C605[E31C0000]A1    <2>  mov byte [intprob], i
  1964 0000151D E9C6040000          <2>  jmp unhand2
  1965                              <2>  %assign i i+1
  1966 00001522 FA                  <2>  cli
  1967 00001523 C605[E31C0000]A2    <2>  mov byte [intprob], i
  1968 0000152A E9B9040000          <2>  jmp unhand2
  1969                              <2>  %assign i i+1
  1970 0000152F FA                  <2>  cli
  1971 00001530 C605[E31C0000]A3    <2>  mov byte [intprob], i
  1972 00001537 E9AC040000          <2>  jmp unhand2
  1973                              <2>  %assign i i+1
  1974 0000153C FA                  <2>  cli
  1975 0000153D C605[E31C0000]A4    <2>  mov byte [intprob], i
  1976 00001544 E99F040000          <2>  jmp unhand2
  1977                              <2>  %assign i i+1
  1978 00001549 FA                  <2>  cli
  1979 0000154A C605[E31C0000]A5    <2>  mov byte [intprob], i
  1980 00001551 E992040000          <2>  jmp unhand2
  1981                              <2>  %assign i i+1
  1982 00001556 FA                  <2>  cli
  1983 00001557 C605[E31C0000]A6    <2>  mov byte [intprob], i
  1984 0000155E E985040000          <2>  jmp unhand2
  1985                              <2>  %assign i i+1
  1986 00001563 FA                  <2>  cli
  1987 00001564 C605[E31C0000]A7    <2>  mov byte [intprob], i
  1988 0000156B E978040000          <2>  jmp unhand2
  1989                              <2>  %assign i i+1
  1990 00001570 FA                  <2>  cli
  1991 00001571 C605[E31C0000]A8    <2>  mov byte [intprob], i
  1992 00001578 E96B040000          <2>  jmp unhand2
  1993                              <2>  %assign i i+1
  1994 0000157D FA                  <2>  cli
  1995 0000157E C605[E31C0000]A9    <2>  mov byte [intprob], i
  1996 00001585 E95E040000          <2>  jmp unhand2
  1997                              <2>  %assign i i+1
  1998 0000158A FA                  <2>  cli
  1999 0000158B C605[E31C0000]AA    <2>  mov byte [intprob], i
  2000 00001592 E951040000          <2>  jmp unhand2
  2001                              <2>  %assign i i+1
  2002 00001597 FA                  <2>  cli
  2003 00001598 C605[E31C0000]AB    <2>  mov byte [intprob], i
  2004 0000159F E944040000          <2>  jmp unhand2
  2005                              <2>  %assign i i+1
  2006 000015A4 FA                  <2>  cli
  2007 000015A5 C605[E31C0000]AC    <2>  mov byte [intprob], i
  2008 000015AC E937040000          <2>  jmp unhand2
  2009                              <2>  %assign i i+1
  2010 000015B1 FA                  <2>  cli
  2011 000015B2 C605[E31C0000]AD    <2>  mov byte [intprob], i
  2012 000015B9 E92A040000          <2>  jmp unhand2
  2013                              <2>  %assign i i+1
  2014 000015BE FA                  <2>  cli
  2015 000015BF C605[E31C0000]AE    <2>  mov byte [intprob], i
  2016 000015C6 E91D040000          <2>  jmp unhand2
  2017                              <2>  %assign i i+1
  2018 000015CB FA                  <2>  cli
  2019 000015CC C605[E31C0000]AF    <2>  mov byte [intprob], i
  2020 000015D3 E910040000          <2>  jmp unhand2
  2021                              <2>  %assign i i+1
  2022 000015D8 FA                  <2>  cli
  2023 000015D9 C605[E31C0000]B0    <2>  mov byte [intprob], i
  2024 000015E0 E903040000          <2>  jmp unhand2
  2025                              <2>  %assign i i+1
  2026 000015E5 FA                  <2>  cli
  2027 000015E6 C605[E31C0000]B1    <2>  mov byte [intprob], i
  2028 000015ED E9F6030000          <2>  jmp unhand2
  2029                              <2>  %assign i i+1
  2030 000015F2 FA                  <2>  cli
  2031 000015F3 C605[E31C0000]B2    <2>  mov byte [intprob], i
  2032 000015FA E9E9030000          <2>  jmp unhand2
  2033                              <2>  %assign i i+1
  2034 000015FF FA                  <2>  cli
  2035 00001600 C605[E31C0000]B3    <2>  mov byte [intprob], i
  2036 00001607 E9DC030000          <2>  jmp unhand2
  2037                              <2>  %assign i i+1
  2038 0000160C FA                  <2>  cli
  2039 0000160D C605[E31C0000]B4    <2>  mov byte [intprob], i
  2040 00001614 E9CF030000          <2>  jmp unhand2
  2041                              <2>  %assign i i+1
  2042 00001619 FA                  <2>  cli
  2043 0000161A C605[E31C0000]B5    <2>  mov byte [intprob], i
  2044 00001621 E9C2030000          <2>  jmp unhand2
  2045                              <2>  %assign i i+1
  2046 00001626 FA                  <2>  cli
  2047 00001627 C605[E31C0000]B6    <2>  mov byte [intprob], i
  2048 0000162E E9B5030000          <2>  jmp unhand2
  2049                              <2>  %assign i i+1
  2050 00001633 FA                  <2>  cli
  2051 00001634 C605[E31C0000]B7    <2>  mov byte [intprob], i
  2052 0000163B E9A8030000          <2>  jmp unhand2
  2053                              <2>  %assign i i+1
  2054 00001640 FA                  <2>  cli
  2055 00001641 C605[E31C0000]B8    <2>  mov byte [intprob], i
  2056 00001648 E99B030000          <2>  jmp unhand2
  2057                              <2>  %assign i i+1
  2058 0000164D FA                  <2>  cli
  2059 0000164E C605[E31C0000]B9    <2>  mov byte [intprob], i
  2060 00001655 E98E030000          <2>  jmp unhand2
  2061                              <2>  %assign i i+1
  2062 0000165A FA                  <2>  cli
  2063 0000165B C605[E31C0000]BA    <2>  mov byte [intprob], i
  2064 00001662 E981030000          <2>  jmp unhand2
  2065                              <2>  %assign i i+1
  2066 00001667 FA                  <2>  cli
  2067 00001668 C605[E31C0000]BB    <2>  mov byte [intprob], i
  2068 0000166F E974030000          <2>  jmp unhand2
  2069                              <2>  %assign i i+1
  2070 00001674 FA                  <2>  cli
  2071 00001675 C605[E31C0000]BC    <2>  mov byte [intprob], i
  2072 0000167C E967030000          <2>  jmp unhand2
  2073                              <2>  %assign i i+1
  2074 00001681 FA                  <2>  cli
  2075 00001682 C605[E31C0000]BD    <2>  mov byte [intprob], i
  2076 00001689 E95A030000          <2>  jmp unhand2
  2077                              <2>  %assign i i+1
  2078 0000168E FA                  <2>  cli
  2079 0000168F C605[E31C0000]BE    <2>  mov byte [intprob], i
  2080 00001696 E94D030000          <2>  jmp unhand2
  2081                              <2>  %assign i i+1
  2082 0000169B FA                  <2>  cli
  2083 0000169C C605[E31C0000]BF    <2>  mov byte [intprob], i
  2084 000016A3 E940030000          <2>  jmp unhand2
  2085                              <2>  %assign i i+1
  2086 000016A8 FA                  <2>  cli
  2087 000016A9 C605[E31C0000]C0    <2>  mov byte [intprob], i
  2088 000016B0 E933030000          <2>  jmp unhand2
  2089                              <2>  %assign i i+1
  2090 000016B5 FA                  <2>  cli
  2091 000016B6 C605[E31C0000]C1    <2>  mov byte [intprob], i
  2092 000016BD E926030000          <2>  jmp unhand2
  2093                              <2>  %assign i i+1
  2094 000016C2 FA                  <2>  cli
  2095 000016C3 C605[E31C0000]C2    <2>  mov byte [intprob], i
  2096 000016CA E919030000          <2>  jmp unhand2
  2097                              <2>  %assign i i+1
  2098 000016CF FA                  <2>  cli
  2099 000016D0 C605[E31C0000]C3    <2>  mov byte [intprob], i
  2100 000016D7 E90C030000          <2>  jmp unhand2
  2101                              <2>  %assign i i+1
  2102 000016DC FA                  <2>  cli
  2103 000016DD C605[E31C0000]C4    <2>  mov byte [intprob], i
  2104 000016E4 E9FF020000          <2>  jmp unhand2
  2105                              <2>  %assign i i+1
  2106 000016E9 FA                  <2>  cli
  2107 000016EA C605[E31C0000]C5    <2>  mov byte [intprob], i
  2108 000016F1 E9F2020000          <2>  jmp unhand2
  2109                              <2>  %assign i i+1
  2110 000016F6 FA                  <2>  cli
  2111 000016F7 C605[E31C0000]C6    <2>  mov byte [intprob], i
  2112 000016FE E9E5020000          <2>  jmp unhand2
  2113                              <2>  %assign i i+1
  2114 00001703 FA                  <2>  cli
  2115 00001704 C605[E31C0000]C7    <2>  mov byte [intprob], i
  2116 0000170B E9D8020000          <2>  jmp unhand2
  2117                              <2>  %assign i i+1
  2118 00001710 FA                  <2>  cli
  2119 00001711 C605[E31C0000]C8    <2>  mov byte [intprob], i
  2120 00001718 E9CB020000          <2>  jmp unhand2
  2121                              <2>  %assign i i+1
  2122 0000171D FA                  <2>  cli
  2123 0000171E C605[E31C0000]C9    <2>  mov byte [intprob], i
  2124 00001725 E9BE020000          <2>  jmp unhand2
  2125                              <2>  %assign i i+1
  2126 0000172A FA                  <2>  cli
  2127 0000172B C605[E31C0000]CA    <2>  mov byte [intprob], i
  2128 00001732 E9B1020000          <2>  jmp unhand2
  2129                              <2>  %assign i i+1
  2130 00001737 FA                  <2>  cli
  2131 00001738 C605[E31C0000]CB    <2>  mov byte [intprob], i
  2132 0000173F E9A4020000          <2>  jmp unhand2
  2133                              <2>  %assign i i+1
  2134 00001744 FA                  <2>  cli
  2135 00001745 C605[E31C0000]CC    <2>  mov byte [intprob], i
  2136 0000174C E997020000          <2>  jmp unhand2
  2137                              <2>  %assign i i+1
  2138 00001751 FA                  <2>  cli
  2139 00001752 C605[E31C0000]CD    <2>  mov byte [intprob], i
  2140 00001759 E98A020000          <2>  jmp unhand2
  2141                              <2>  %assign i i+1
  2142 0000175E FA                  <2>  cli
  2143 0000175F C605[E31C0000]CE    <2>  mov byte [intprob], i
  2144 00001766 E97D020000          <2>  jmp unhand2
  2145                              <2>  %assign i i+1
  2146 0000176B FA                  <2>  cli
  2147 0000176C C605[E31C0000]CF    <2>  mov byte [intprob], i
  2148 00001773 E970020000          <2>  jmp unhand2
  2149                              <2>  %assign i i+1
  2150 00001778 FA                  <2>  cli
  2151 00001779 C605[E31C0000]D0    <2>  mov byte [intprob], i
  2152 00001780 E963020000          <2>  jmp unhand2
  2153                              <2>  %assign i i+1
  2154 00001785 FA                  <2>  cli
  2155 00001786 C605[E31C0000]D1    <2>  mov byte [intprob], i
  2156 0000178D E956020000          <2>  jmp unhand2
  2157                              <2>  %assign i i+1
  2158 00001792 FA                  <2>  cli
  2159 00001793 C605[E31C0000]D2    <2>  mov byte [intprob], i
  2160 0000179A E949020000          <2>  jmp unhand2
  2161                              <2>  %assign i i+1
  2162 0000179F FA                  <2>  cli
  2163 000017A0 C605[E31C0000]D3    <2>  mov byte [intprob], i
  2164 000017A7 E93C020000          <2>  jmp unhand2
  2165                              <2>  %assign i i+1
  2166 000017AC FA                  <2>  cli
  2167 000017AD C605[E31C0000]D4    <2>  mov byte [intprob], i
  2168 000017B4 E92F020000          <2>  jmp unhand2
  2169                              <2>  %assign i i+1
  2170 000017B9 FA                  <2>  cli
  2171 000017BA C605[E31C0000]D5    <2>  mov byte [intprob], i
  2172 000017C1 E922020000          <2>  jmp unhand2
  2173                              <2>  %assign i i+1
  2174 000017C6 FA                  <2>  cli
  2175 000017C7 C605[E31C0000]D6    <2>  mov byte [intprob], i
  2176 000017CE E915020000          <2>  jmp unhand2
  2177                              <2>  %assign i i+1
  2178 000017D3 FA                  <2>  cli
  2179 000017D4 C605[E31C0000]D7    <2>  mov byte [intprob], i
  2180 000017DB E908020000          <2>  jmp unhand2
  2181                              <2>  %assign i i+1
  2182 000017E0 FA                  <2>  cli
  2183 000017E1 C605[E31C0000]D8    <2>  mov byte [intprob], i
  2184 000017E8 E9FB010000          <2>  jmp unhand2
  2185                              <2>  %assign i i+1
  2186 000017ED FA                  <2>  cli
  2187 000017EE C605[E31C0000]D9    <2>  mov byte [intprob], i
  2188 000017F5 E9EE010000          <2>  jmp unhand2
  2189                              <2>  %assign i i+1
  2190 000017FA FA                  <2>  cli
  2191 000017FB C605[E31C0000]DA    <2>  mov byte [intprob], i
  2192 00001802 E9E1010000          <2>  jmp unhand2
  2193                              <2>  %assign i i+1
  2194 00001807 FA                  <2>  cli
  2195 00001808 C605[E31C0000]DB    <2>  mov byte [intprob], i
  2196 0000180F E9D4010000          <2>  jmp unhand2
  2197                              <2>  %assign i i+1
  2198 00001814 FA                  <2>  cli
  2199 00001815 C605[E31C0000]DC    <2>  mov byte [intprob], i
  2200 0000181C E9C7010000          <2>  jmp unhand2
  2201                              <2>  %assign i i+1
  2202 00001821 FA                  <2>  cli
  2203 00001822 C605[E31C0000]DD    <2>  mov byte [intprob], i
  2204 00001829 E9BA010000          <2>  jmp unhand2
  2205                              <2>  %assign i i+1
  2206 0000182E FA                  <2>  cli
  2207 0000182F C605[E31C0000]DE    <2>  mov byte [intprob], i
  2208 00001836 E9AD010000          <2>  jmp unhand2
  2209                              <2>  %assign i i+1
  2210 0000183B FA                  <2>  cli
  2211 0000183C C605[E31C0000]DF    <2>  mov byte [intprob], i
  2212 00001843 E9A0010000          <2>  jmp unhand2
  2213                              <2>  %assign i i+1
  2214 00001848 FA                  <2>  cli
  2215 00001849 C605[E31C0000]E0    <2>  mov byte [intprob], i
  2216 00001850 E993010000          <2>  jmp unhand2
  2217                              <2>  %assign i i+1
  2218 00001855 FA                  <2>  cli
  2219 00001856 C605[E31C0000]E1    <2>  mov byte [intprob], i
  2220 0000185D E986010000          <2>  jmp unhand2
  2221                              <2>  %assign i i+1
  2222 00001862 FA                  <2>  cli
  2223 00001863 C605[E31C0000]E2    <2>  mov byte [intprob], i
  2224 0000186A E979010000          <2>  jmp unhand2
  2225                              <2>  %assign i i+1
  2226 0000186F FA                  <2>  cli
  2227 00001870 C605[E31C0000]E3    <2>  mov byte [intprob], i
  2228 00001877 E96C010000          <2>  jmp unhand2
  2229                              <2>  %assign i i+1
  2230 0000187C FA                  <2>  cli
  2231 0000187D C605[E31C0000]E4    <2>  mov byte [intprob], i
  2232 00001884 E95F010000          <2>  jmp unhand2
  2233                              <2>  %assign i i+1
  2234 00001889 FA                  <2>  cli
  2235 0000188A C605[E31C0000]E5    <2>  mov byte [intprob], i
  2236 00001891 E952010000          <2>  jmp unhand2
  2237                              <2>  %assign i i+1
  2238 00001896 FA                  <2>  cli
  2239 00001897 C605[E31C0000]E6    <2>  mov byte [intprob], i
  2240 0000189E E945010000          <2>  jmp unhand2
  2241                              <2>  %assign i i+1
  2242 000018A3 FA                  <2>  cli
  2243 000018A4 C605[E31C0000]E7    <2>  mov byte [intprob], i
  2244 000018AB E938010000          <2>  jmp unhand2
  2245                              <2>  %assign i i+1
  2246 000018B0 FA                  <2>  cli
  2247 000018B1 C605[E31C0000]E8    <2>  mov byte [intprob], i
  2248 000018B8 E92B010000          <2>  jmp unhand2
  2249                              <2>  %assign i i+1
  2250 000018BD FA                  <2>  cli
  2251 000018BE C605[E31C0000]E9    <2>  mov byte [intprob], i
  2252 000018C5 E91E010000          <2>  jmp unhand2
  2253                              <2>  %assign i i+1
  2254 000018CA FA                  <2>  cli
  2255 000018CB C605[E31C0000]EA    <2>  mov byte [intprob], i
  2256 000018D2 E911010000          <2>  jmp unhand2
  2257                              <2>  %assign i i+1
  2258 000018D7 FA                  <2>  cli
  2259 000018D8 C605[E31C0000]EB    <2>  mov byte [intprob], i
  2260 000018DF E904010000          <2>  jmp unhand2
  2261                              <2>  %assign i i+1
  2262 000018E4 FA                  <2>  cli
  2263 000018E5 C605[E31C0000]EC    <2>  mov byte [intprob], i
  2264 000018EC E9F7000000          <2>  jmp unhand2
  2265                              <2>  %assign i i+1
  2266 000018F1 FA                  <2>  cli
  2267 000018F2 C605[E31C0000]ED    <2>  mov byte [intprob], i
  2268 000018F9 E9EA000000          <2>  jmp unhand2
  2269                              <2>  %assign i i+1
  2270 000018FE FA                  <2>  cli
  2271 000018FF C605[E31C0000]EE    <2>  mov byte [intprob], i
  2272 00001906 E9DD000000          <2>  jmp unhand2
  2273                              <2>  %assign i i+1
  2274 0000190B FA                  <2>  cli
  2275 0000190C C605[E31C0000]EF    <2>  mov byte [intprob], i
  2276 00001913 E9D0000000          <2>  jmp unhand2
  2277                              <2>  %assign i i+1
  2278 00001918 FA                  <2>  cli
  2279 00001919 C605[E31C0000]F0    <2>  mov byte [intprob], i
  2280 00001920 E9C3000000          <2>  jmp unhand2
  2281                              <2>  %assign i i+1
  2282 00001925 FA                  <2>  cli
  2283 00001926 C605[E31C0000]F1    <2>  mov byte [intprob], i
  2284 0000192D E9B6000000          <2>  jmp unhand2
  2285                              <2>  %assign i i+1
  2286 00001932 FA                  <2>  cli
  2287 00001933 C605[E31C0000]F2    <2>  mov byte [intprob], i
  2288 0000193A E9A9000000          <2>  jmp unhand2
  2289                              <2>  %assign i i+1
  2290 0000193F FA                  <2>  cli
  2291 00001940 C605[E31C0000]F3    <2>  mov byte [intprob], i
  2292 00001947 E99C000000          <2>  jmp unhand2
  2293                              <2>  %assign i i+1
  2294 0000194C FA                  <2>  cli
  2295 0000194D C605[E31C0000]F4    <2>  mov byte [intprob], i
  2296 00001954 E98F000000          <2>  jmp unhand2
  2297                              <2>  %assign i i+1
  2298 00001959 FA                  <2>  cli
  2299 0000195A C605[E31C0000]F5    <2>  mov byte [intprob], i
  2300 00001961 E982000000          <2>  jmp unhand2
  2301                              <2>  %assign i i+1
  2302 00001966 FA                  <2>  cli
  2303 00001967 C605[E31C0000]F6    <2>  mov byte [intprob], i
  2304 0000196E E975000000          <2>  jmp unhand2
  2305                              <2>  %assign i i+1
  2306 00001973 FA                  <2>  cli
  2307 00001974 C605[E31C0000]F7    <2>  mov byte [intprob], i
  2308 0000197B E968000000          <2>  jmp unhand2
  2309                              <2>  %assign i i+1
  2310 00001980 FA                  <2>  cli
  2311 00001981 C605[E31C0000]F8    <2>  mov byte [intprob], i
  2312 00001988 E95B000000          <2>  jmp unhand2
  2313                              <2>  %assign i i+1
  2314 0000198D FA                  <2>  cli
  2315 0000198E C605[E31C0000]F9    <2>  mov byte [intprob], i
  2316 00001995 E94E000000          <2>  jmp unhand2
  2317                              <2>  %assign i i+1
  2318 0000199A FA                  <2>  cli
  2319 0000199B C605[E31C0000]FA    <2>  mov byte [intprob], i
  2320 000019A2 E941000000          <2>  jmp unhand2
  2321                              <2>  %assign i i+1
  2322 000019A7 FA                  <2>  cli
  2323 000019A8 C605[E31C0000]FB    <2>  mov byte [intprob], i
  2324 000019AF E934000000          <2>  jmp unhand2
  2325                              <2>  %assign i i+1
  2326 000019B4 FA                  <2>  cli
  2327 000019B5 C605[E31C0000]FC    <2>  mov byte [intprob], i
  2328 000019BC E927000000          <2>  jmp unhand2
  2329                              <2>  %assign i i+1
  2330 000019C1 FA                  <2>  cli
  2331 000019C2 C605[E31C0000]FD    <2>  mov byte [intprob], i
  2332 000019C9 E91A000000          <2>  jmp unhand2
  2333                              <2>  %assign i i+1
  2334 000019CE FA                  <2>  cli
  2335 000019CF C605[E31C0000]FE    <2>  mov byte [intprob], i
  2336 000019D6 E90D000000          <2>  jmp unhand2
  2337                              <2>  %assign i i+1
  2338 000019DB FA                  <2>  cli
  2339 000019DC C605[E31C0000]FF    <2>  mov byte [intprob], i
  2340 000019E3 E900000000          <2>  jmp unhand2
  2341                              <2>  %assign i i+1
  2342                              <1> unhand2:
  2343 000019E8 FA                  <1> 	cli
  2344 000019E9 1E                  <1> 	push ds
  2345 000019EA 06                  <1> 	push es
  2346 000019EB 0FA0                <1> 	push fs
  2347 000019ED 0FA8                <1> 	push gs
  2348 000019EF 16                  <1> 	push ss
  2349 000019F0 60                  <1> 	pushad
  2350 000019F1 803D[164F0000]00    <1> 	cmp byte [guion], 0
  2351 000019F8 0F8432000000        <1> 	je near noguiunhandstuff
  2352 000019FE 66C705[DD1C0000]08- <1> 	mov word [locunhandy], 8
  2353 00001A06 00                  <1>
  2354 00001A07 66C705[DF1C0000]08- <1> 	mov word [locunhandx], 8
  2355 00001A0F 00                  <1>
  2356 00001A10 668B1D[E14D0000]    <1> 	mov bx, [background]
  2357 00001A17 66891D[E11C0000]    <1> 	mov [backgroundcache], bx
  2358 00001A1E C605[E5470000]01    <1> 	mov byte [mousedisabled],1
  2359 00001A25 66BB00F8            <1> 	mov bx, 1111100000000000b
  2360 00001A29 66891D[E14D0000]    <1> 	mov [background], bx
  2361                              <1> noguiunhandstuff:
  2362 00001A30 89E6                <1> 	mov esi, esp
  2363 00001A32 8935[D11C0000]      <1> 	mov [espfirst], esi
  2364 00001A38 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  2365 00001A3E 8935[CD1C0000]      <1> 	mov [esploc], esi
  2366 00001A44 BE[EC1C0000]        <1> 	mov esi, unhandmsg
  2367 00001A49 8935[D51C0000]      <1> 	mov [esiloc], esi
  2368 00001A4F 31C9                <1> 	xor ecx, ecx
  2369 00001A51 8A0D[E31C0000]      <1> 	mov cl, [intprob]
  2370 00001A57 BB[7F200000]        <1> 	mov ebx, errortypes
  2371 00001A5C C1E102              <1> 	shl ecx, 2
  2372 00001A5F 01CB                <1> 	add ebx, ecx
  2373 00001A61 81FB[BF200000]      <1> 	cmp ebx, errortypesend
  2374 00001A67 7205                <1> 	jb gooderrortype
  2375 00001A69 BB[BF200000]        <1> 	mov ebx, errortypesend
  2376                              <1> gooderrortype:
  2377 00001A6E 8B33                <1> 	mov esi, [ebx]
  2378 00001A70 803D[164F0000]00    <1> 	cmp byte [guion], 0
  2379 00001A77 0F842D000000        <1> 	je near errortext
  2380 00001A7D 668B0D[DD1C0000]    <1> 	mov cx, [locunhandy]
  2381 00001A84 668B15[DF1C0000]    <1> 	mov dx, [locunhandx]
  2382 00001A8B 66B80100            <1> 	mov ax, 1
  2383 00001A8F 6631DB              <1> 	xor bx, bx
  2384 00001A92 E8433E0000          <1> 	call showstring2
  2385 00001A97 66890D[DD1C0000]    <1> 	mov [locunhandy], cx
  2386 00001A9E 668915[DF1C0000]    <1> 	mov [locunhandx], dx
  2387 00001AA5 E905000000          <1> 	jmp errortextdone
  2388                              <1> errortext:
  2389 00001AAA E84C0F0000          <1> 	call print		;;get the error message and print it
  2390                              <1> errortextdone:
  2391 00001AAF 31C9                <1> 	xor ecx, ecx
  2392 00001AB1 8A0D[E31C0000]      <1> 	mov cl, [intprob]
  2393 00001AB7 E8AA010000          <1> 	call expdump
  2394                              <1> dumpstack:
  2395 00001ABC 8B35[CD1C0000]      <1> 	mov esi, [esploc]
  2396 00001AC2 39E6                <1> 	cmp esi, esp
  2397 00001AC4 7216                <1> 	jb donedump
  2398 00001AC6 368B0E              <1> 	mov ecx, [ss:esi]
  2399 00001AC9 81EE04000000        <1> 	sub esi, 4
  2400 00001ACF 8935[CD1C0000]      <1> 	mov [esploc], esi
  2401 00001AD5 E88C010000          <1> 	call expdump
  2402 00001ADA EBE0                <1> 	jmp dumpstack
  2403                              <1> donedump:
  2404 00001ADC 0F20C1              <1> 	mov ecx, cr0
  2405 00001ADF E882010000          <1> 	call expdump
  2406 00001AE4 0F20D1              <1> 	mov ecx, cr2
  2407 00001AE7 E87A010000          <1> 	call expdump
  2408 00001AEC 0F20D9              <1> 	mov ecx, cr3
  2409 00001AEF E872010000          <1> 	call expdump
  2410 00001AF4 0F20E1              <1> 	mov ecx, cr4
  2411 00001AF7 E86A010000          <1> 	call expdump
  2412 00001AFC 8B35[CD1C0000]      <1> 	mov esi, [esploc]
  2413 00001B02 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  2414 00001B07 81C710000000        <1> 	add edi, 16
  2415 00001B0D 893D[E81C0000]      <1> 	mov [codelocend], edi
  2416 00001B13 81EF20000000        <1> 	sub edi, 32
  2417                              <1> dumpcodeloop:
  2418 00001B19 893D[E41C0000]      <1> 	mov [codeloc], edi
  2419 00001B1F 8B0F                <1> 	mov ecx, [edi]
  2420 00001B21 E840010000          <1> 	call expdump
  2421 00001B26 8B3D[E41C0000]      <1> 	mov edi, [codeloc]
  2422 00001B2C 81C704000000        <1> 	add edi, 4
  2423 00001B32 3B3D[E81C0000]      <1> 	cmp edi, [codelocend]
  2424 00001B38 72DF                <1> 	jb dumpcodeloop
  2425 00001B3A BE[F51B0000]        <1> 	mov esi, backtoosmsg
  2426 00001B3F 803D[164F0000]00    <1> 	cmp byte [guion], 0
  2427 00001B46 750A                <1> 	jne guibacktomsg
  2428 00001B48 E8AE0E0000          <1> 	call print
  2429 00001B4D E91A000000          <1> 	jmp backtomsgdone
  2430                              <1> guibacktomsg:
  2431 00001B52 668B15[DF1C0000]    <1> 	mov dx, [locunhandx]
  2432 00001B59 668B0D[DD1C0000]    <1> 	mov cx, [locunhandy]
  2433 00001B60 66B80100            <1> 	mov ax, 1
  2434 00001B64 6631DB              <1> 	xor bx, bx
  2435 00001B67 E86E3D0000          <1> 	call showstring2
  2436                              <1> backtomsgdone:
  2437 00001B6C 30C0                <1> 	xor al, al
  2438 00001B6E E8360E0000          <1> 	call int302
  2439 00001B73 803D[E31C0000]03    <1> 	cmp byte [intprob], 3
  2440 00001B7A 753C                <1> 	jne nodebugint
  2441 00001B7C 803D[164F0000]00    <1> 	cmp byte [guion], 0
  2442 00001B83 7422                <1> 	je nodebuggui
  2443 00001B85 668B1D[E11C0000]    <1> 	mov bx, [backgroundcache]
  2444 00001B8C 66891D[E14D0000]    <1> 	mov [background], bx
  2445 00001B93 6631DB              <1> 	xor bx, bx
  2446 00001B96 C605[E5470000]00    <1> 	mov byte [mousedisabled], 0
  2447 00001B9D E802320000          <1> 	call guiclear
  2448 00001BA2 E8DF390000          <1> 	call reloadallgraphics
  2449                              <1> nodebuggui:
  2450 00001BA7 8B35[D11C0000]      <1> 	mov esi, [espfirst]
  2451 00001BAD 89F4                <1> 	mov esp, esi
  2452 00001BAF 61                  <1> 	popad
  2453 00001BB0 17                  <1> 	pop ss
  2454 00001BB1 0FA9                <1> 	pop gs
  2455 00001BB3 0FA1                <1> 	pop fs
  2456 00001BB5 07                  <1> 	pop es
  2457 00001BB6 1F                  <1> 	pop ds
  2458 00001BB7 CF                  <1> 	iret
  2459                              <1> nodebugint:
  2460 00001BB8 61                  <1> 	popad
  2461 00001BB9 17                  <1> 	pop ss
  2462 00001BBA 0FA9                <1> 	pop gs
  2463 00001BBC 0FA1                <1> 	pop fs
  2464 00001BBE 07                  <1> 	pop es
  2465 00001BBF 1F                  <1> 	pop ds
  2466 00001BC0 803D[164F0000]00    <1> 	cmp byte [guion], 0
  2467 00001BC7 7427                <1> 	je returnunhandgui
  2468 00001BC9 668B1D[E11C0000]    <1> 	mov bx, [backgroundcache]
  2469 00001BD0 66891D[E14D0000]    <1> 	mov [background], bx
  2470 00001BD7 6631DB              <1> 	xor bx, bx
  2471 00001BDA C605[E5470000]00    <1> 	mov byte [mousedisabled], 0
  2472 00001BE1 E8BE310000          <1> 	call guiclear
  2473 00001BE6 E89B390000          <1> 	call reloadallgraphics
  2474 00001BEB E9F3310000          <1> 	jmp gui
  2475                              <1> returnunhandgui:
  2476 00001BF0 E95D140000          <1> 	jmp nwcmd
  2477 00001BF5 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10,13
  2478 00001BFE 737420616E79207072- <1>
  2479 00001C07 6F626C656D7320696E- <1>
  2480 00001C10 207468652049737375- <1>
  2481 00001C19 65732073656374696F- <1>
  2482 00001C22 6E20617420736F6C6C- <1>
  2483 00001C2B 65726F732E676F6F67- <1>
  2484 00001C34 6C65636F64652E636F- <1>
  2485 00001C3D 6D0A0D              <1>
  2486 00001C40 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,13,0
  2487 00001C49 206B657920746F2072- <1>
  2488 00001C52 657475726E20746F20- <1>
  2489 00001C5B 536F6C6C65724F530A- <1>
  2490 00001C64 0D00                <1>
  2491                              <1> expdump:
  2492 00001C66 8B35[D51C0000]      <1> 	mov esi, [esiloc]
  2493 00001C6C 89F7                <1> 	mov edi, esi
  2494 00001C6E 81C70F000000        <1> 	add edi, 15
  2495 00001C74 81C604000000        <1> 	add esi, 4
  2496 00001C7A 893D[D51C0000]      <1> 	mov [esiloc], edi
  2497 00001C80 81EF03000000        <1> 	sub edi, 3
  2498 00001C86 E838180000          <1> 	call converthex
  2499 00001C8B 81EE04000000        <1> 	sub esi, 4
  2500 00001C91 803D[164F0000]00    <1> 	cmp byte [guion], 0
  2501 00001C98 0F8429000000        <1> 	je near expdumptext
  2502 00001C9E 668B0D[DD1C0000]    <1> 	mov cx, [locunhandy]
  2503 00001CA5 668B15[DF1C0000]    <1> 	mov dx, [locunhandx]
  2504 00001CAC 66B80100            <1> 	mov ax, 1
  2505 00001CB0 6631DB              <1> 	xor bx, bx
  2506 00001CB3 E8223C0000          <1> 	call showstring2
  2507 00001CB8 66890D[DD1C0000]    <1> 	mov [locunhandy], cx
  2508 00001CBF 668915[DF1C0000]    <1> 	mov [locunhandx], dx
  2509 00001CC6 C3                  <1> 	ret
  2510                              <1> expdumptext:
  2511 00001CC7 E82F0D0000          <1> 	call print
  2512 00001CCC C3                  <1> 	ret
  2513 00001CCD 00000000            <1> esploc dd 0
  2514 00001CD1 00000000            <1> espfirst dd 0
  2515 00001CD5 00000000            <1> esiloc dd 0
  2516 00001CD9 00000000            <1> esiregbuf dd 0
  2517 00001CDD 0100                <1> locunhandy dw 1
  2518 00001CDF 0100                <1> locunhandx dw 1
  2519 00001CE1 0000                <1> backgroundcache dw 0
  2520 00001CE3 00                  <1> intprob db 0
  2521 00001CE4 00000000            <1> codeloc dd 0
  2522 00001CE8 00000000            <1> codelocend dd 0
  2523                              <1> 	unhandmsg:	
  2524 00001CEC 494E543D3030303030- <1> 			db "INT=00000000",10,13,0
  2525 00001CF5 3030300A0D00        <1>
  2526                              <1> unhndrg:
  2527 00001CFB FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  2528 00001D04 303030202000<rept>  <1>
  2529 00001D64 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2530 00001D6D 3030300A0D00        <1>
  2531 00001D73 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  2532 00001D7C 303030202000<rept>  <1>
  2533 00001DDC FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2534 00001DE5 3030300A0D00        <1>
  2535 00001DEB FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  2536 00001DF4 303030202000<rept>  <1>
  2537 00001E54 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2538 00001E5D 3030300A0D00        <1>
  2539 00001E63 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  2540 00001E6C 303030202000<rept>  <1>
  2541 00001ECC FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2542 00001ED5 3030300A0D00        <1>
  2543                              <1> unhandregs:
  2544 00001EDB 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  2545 00001EE4 303030202000        <1>
  2546 00001EEA 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  2547 00001EF3 303030202000        <1>
  2548 00001EF9 4549503D3030303030- <1> 			db "EIP=00000000",10,13,0
  2549 00001F02 3030300A0D00        <1>
  2550 00001F08 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  2551 00001F11 303030202000        <1>
  2552 00001F17 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  2553 00001F20 303030202000        <1>
  2554 00001F26 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  2555 00001F2F 303030202000        <1>
  2556 00001F35 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  2557 00001F3E 303030202000        <1>
  2558 00001F44 53533A3D3030303030- <1> 			db "SS:=00000000",10,13,0
  2559 00001F4D 3030300A0D00        <1>
  2560 00001F53 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  2561 00001F5C 303030202000        <1>
  2562 00001F62 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  2563 00001F6B 303030202000        <1>
  2564 00001F71 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  2565 00001F7A 303030202000        <1>
  2566 00001F80 4542583D3030303030- <1> 			db "EBX=00000000",10,13,0
  2567 00001F89 3030300A0D00        <1>
  2568 00001F8F 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  2569 00001F98 303030202000        <1>
  2570 00001F9E 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  2571 00001FA7 303030202000        <1>
  2572 00001FAD 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  2573 00001FB6 303030202000        <1>
  2574 00001FBC 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",10,13,0
  2575 00001FC5 3030300A0D00        <1>
  2576 00001FCB 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  2577 00001FD4 303030202000        <1>
  2578 00001FDA 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  2579 00001FE3 303030202000        <1>
  2580 00001FE9 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  2581 00001FF2 303030202000        <1>
  2582 00001FF8 4352343D3030303030- <1> 			db "CR4=00000000",10,13,0
  2583 00002001 3030300A0D00        <1>
  2584 00002007 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  2585 00002010 303030202000<rept>  <1>
  2586 00002025 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  2587 0000202E 30303020FF00        <1>
  2588 00002034 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  2589 0000203D 3030305D2000        <1>
  2590 00002043 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  2591 0000204C 303030202000<rept>  <1>
  2592 00002070 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2593 00002079 3030300A0D00        <1>
  2594                              <1> unhandmsgend:
  2595                              <1> 
  2596                              <1> errortypes:
  2597 0000207F [C3200000]          <1> 			dd err0
  2598 00002083 [2A210000]          <1> 			dd err1
  2599 00002087 [8D210000]          <1> 			dd err2
  2600 0000208B [E3210000]          <1> 			dd err3
  2601 0000208F [4A220000]          <1> 			dd err4
  2602 00002093 [9E220000]          <1> 			dd err5
  2603 00002097 [0B230000]          <1> 			dd err6
  2604 0000209B [76230000]          <1> 			dd err7
  2605 0000209F [C2230000]          <1> 			dd err8
  2606 000020A3 [21240000]          <1> 			dd err9
  2607 000020A7 [7C240000]          <1> 			dd err10
  2608 000020AB [C9240000]          <1> 			dd err11
  2609 000020AF [1B250000]          <1> 			dd err12
  2610 000020B3 [76250000]          <1> 			dd err13
  2611 000020B7 [DB250000]          <1> 			dd err14
  2612 000020BB [19260000]          <1> 			dd err15
  2613                              <1> errortypesend:
  2614 000020BF [A7260000]          <1> 			dd unknownerror
  2615                              <1> 			
  2616 000020C3 4469766973696F6E20- <1> err0	db "Division by zero:",10,13
  2617 000020CC 6279207A65726F3A0A- <1>
  2618 000020D5 0D                  <1>
  2619 000020D6 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10,13
  2620 000020DF 6C79206C696D2061F6- <1>
  2621 000020E8 78203D20EC20776865- <1>
  2622 000020F1 6E206120697320616E- <1>
  2623 000020FA 79207265616C206E75- <1>
  2624 00002103 6D6265722E20486170- <1>
  2625 0000210C 707920456173746572- <1>
  2626 00002115 210A0D              <1>
  2627 00002118 202020202020202020- <1> 		db "            x",26,"0",10,13,0
  2628 00002121 202020781A300A0D00  <1>
  2629                              <1> 		
  2630 0000212A 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10,13
  2631 00002133 65702F427265616B70- <1>
  2632 0000213C 6F696E743A0A0D      <1>
  2633 00002143 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,13,0
  2634 0000214C 696E74206661756C74- <1>
  2635 00002155 2C20627265616B706F- <1>
  2636 0000215E 696E7420747261702C- <1>
  2637 00002167 206F722073696E676C- <1>
  2638 00002170 652D73746570207472- <1>
  2639 00002179 617020776173207472- <1>
  2640 00002182 696767657265642E0A- <1>
  2641 0000218B 0D00                <1>
  2642                              <1> 		
  2643 0000218D 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10,13
  2644 00002196 6C6520696E74657272- <1>
  2645 0000219F 7570743A0A0D        <1>
  2646 000021A5 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked",10,13,0
  2647 000021AE 6520696E7465727275- <1>
  2648 000021B7 707420776173207472- <1>
  2649 000021C0 696767657265642074- <1>
  2650 000021C9 68617420636F756C64- <1>
  2651 000021D2 206E6F74206265206D- <1>
  2652 000021DB 61736B65640A0D00    <1>
  2653                              <1> 		
  2654 000021E3 427265616B706F696E- <1> err3	db "Breakpoint:",10,13
  2655 000021EC 743A0A0D            <1>
  2656 000021F0 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10,13
  2657 000021F9 727275707420697320- <1>
  2658 00002202 7573656420696E2070- <1>
  2659 0000220B 726F6772616D732074- <1>
  2660 00002214 6F2073686F77207468- <1>
  2661 0000221D 6520737461636B2061- <1>
  2662 00002226 6E6420726567697374- <1>
  2663 0000222F 65727320616E642063- <1>
  2664 00002238 616E2062650A0D      <1>
  2665 0000223F 69676E6F7265642E0A- <1> 		db "ignored.",10,13,0
  2666 00002248 0D00                <1>
  2667                              <1> 		
  2668 0000224A 4F766572666C6F773A- <1> err4	db "Overflow:",10,13
  2669 00002253 0A0D                <1>
  2670 00002255 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,13,0
  2671 0000225E 73736F722072616E20- <1>
  2672 00002267 696E746F20616E2049- <1>
  2673 00002270 4E544F20696E737472- <1>
  2674 00002279 756374696F6E207769- <1>
  2675 00002282 746820746865206F76- <1>
  2676 0000228B 6572666C6F7720666C- <1>
  2677 00002294 6167207365742E0A0D- <1>
  2678 0000229D 00                  <1>
  2679                              <1> 		
  2680 0000229E 426F756E6473206368- <1> err5	db "Bounds check:",10,13
  2681 000022A7 65636B3A0A0D        <1>
  2682 000022AD 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10,13
  2683 000022B6 73736F72207265626F- <1>
  2684 000022BF 756E6465642066726F- <1>
  2685 000022C8 6D206120424F554E44- <1>
  2686 000022D1 20696E737472756374- <1>
  2687 000022DA 696F6E2072756E206F- <1>
  2688 000022E3 6E20616E206F706572- <1>
  2689 000022EC 616E64207468617420- <1>
  2690 000022F5 776173206F75740A0D  <1>
  2691 000022FE 6F6620626F756E6473- <1> 		db "of bounds.",10,13,0
  2692 00002307 2E0A0D00            <1>
  2693                              <1> 		
  2694 0000230B 496E76616C6964206F- <1> err6	db "Invalid opcode:",10,13
  2695 00002314 70636F64653A0A0D    <1>
  2696 0000231C 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10,13
  2697 00002325 73736F722068617320- <1>
  2698 0000232E 6E6F20696465612077- <1>
  2699 00002337 686174206974207761- <1>
  2700 00002340 7320747279696E6720- <1>
  2701 00002349 746F20657865637574- <1>
  2702 00002352 652E20446F6E277420- <1>
  2703 0000235B 72756E205353453420- <1>
  2704 00002364 636F64650A0D        <1>
  2705 0000236A 6F6E20343836277321- <1> 		db "on 486's!",10,13,0
  2706 00002373 0A0D00              <1>
  2707                              <1> 		
  2708 00002376 436F70726F63657373- <1> err7	db "Coprocessor not available:",10,13
  2709 0000237F 6F72206E6F74206176- <1>
  2710 00002388 61696C61626C653A0A- <1>
  2711 00002391 0D                  <1>
  2712 00002392 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,13,0
  2713 0000239B 206B6E6F7720746865- <1>
  2714 000023A4 7920646F6E2774206D- <1>
  2715 000023AD 616B652074686F7365- <1>
  2716 000023B6 20616E796D6F726521- <1>
  2717 000023BF 0A0D00              <1>
  2718                              <1> 		
  2719 000023C2 446F75626C65206661- <1> err8	db "Double fault:",10,13
  2720 000023CB 756C743A0A0D        <1>
  2721 000023D1 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,13,0
  2722 000023DA 74696F6E2068616E64- <1>
  2723 000023E3 6C657220636F756C64- <1>
  2724 000023EC 206E6F742068616E64- <1>
  2725 000023F5 6C6520746861742069- <1>
  2726 000023FE 7420636F756C64206E- <1>
  2727 00002407 6F742068616E646C65- <1>
  2728 00002410 20616E206578636570- <1>
  2729 00002419 74696F6E2E0A0D00    <1>
  2730                              <1> 		
  2731 00002421 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,13,0
  2732 0000242A 6F72207365676D656E- <1>
  2733 00002433 74206F76657272756E- <1>
  2734 0000243C 3A0A0D00            <1>
  2735 00002440 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,13,0
  2736 00002449 722068617070656E73- <1>
  2737 00002452 20696E206D6F646572- <1>
  2738 0000245B 6E20636F6D70757465- <1>
  2739 00002464 72732C20616E64206E- <1>
  2740 0000246D 657665722073686F75- <1>
  2741 00002476 6C642E0A0D00        <1>
  2742                              <1> 
  2743 0000247C 496E76616C69642054- <1> err10	db "Invalid TSS:",10,13
  2744 00002485 53533A0A0D          <1>
  2745 0000248A 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,13,0
  2746 00002493 686174207761732073- <1>
  2747 0000249C 776974636865642074- <1>
  2748 000024A5 6F20697320696E7661- <1>
  2749 000024AE 6C69642E204E6F7468- <1>
  2750 000024B7 696E672066756E6E79- <1>
  2751 000024C0 20686572652E0A0D00  <1>
  2752                              <1> 		
  2753 000024C9 5365676D656E74206E- <1> err11	db "Segment not present:",10,13
  2754 000024D2 6F742070726573656E- <1>
  2755 000024DB 743A0A0D            <1>
  2756 000024DF 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,13,0
  2757 000024E8 6E7420626974206F66- <1>
  2758 000024F1 20746865207365676D- <1>
  2759 000024FA 656E74206465736372- <1>
  2760 00002503 6970746F7220697320- <1>
  2761 0000250C 73657420746F207A65- <1>
  2762 00002515 726F2E0A0D00        <1>
  2763                              <1> 		
  2764 0000251B 537461636B20657863- <1> err12	db "Stack exception:",10,13
  2765 00002524 657074696F6E3A0A0D  <1>
  2766 0000252D 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,13,0
  2767 00002536 7363726970746F7220- <1>
  2768 0000253F 697320696E76616C69- <1>
  2769 00002548 64206F72206E6F7420- <1>
  2770 00002551 70726573656E74206F- <1>
  2771 0000255A 7220697473206C696D- <1>
  2772 00002563 697420697320746F6F- <1>
  2773 0000256C 20736D616C6C2E0A0D- <1>
  2774 00002575 00                  <1>
  2775                              <1> 		
  2776 00002576 47656E6572616C2070- <1> err13	db "General protection violation:",10,13
  2777 0000257F 726F74656374696F6E- <1>
  2778 00002588 2076696F6C6174696F- <1>
  2779 00002591 6E3A0A0D            <1>
  2780 00002595 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,13,0
  2781 0000259E 746564207468652063- <1>
  2782 000025A7 6F6D70757465722E20- <1>
  2783 000025B0 537465702061776179- <1>
  2784 000025B9 20736C6F776C792E20- <1>
  2785 000025C2 546865204642492069- <1>
  2786 000025CB 73206F6E2069747320- <1>
  2787 000025D4 7761792E0A0D00      <1>
  2788                              <1> 		
  2789 000025DB 50616765206661756C- <1> err14	db "Page fault:",10,13
  2790 000025E4 743A0A0D            <1>
  2791 000025E8 546865207061676520- <1> 		db "The page that was requested was not available.",10,13,0
  2792 000025F1 746861742077617320- <1>
  2793 000025FA 726571756573746564- <1>
  2794 00002603 20776173206E6F7420- <1>
  2795 0000260C 617661696C61626C65- <1>
  2796 00002615 2E0A0D00            <1>
  2797                              <1> 		
  2798 00002619 526573657276656420- <1> err15	db "Reserved for Plan R:",10,13
  2799 00002622 666F7220506C616E20- <1>
  2800 0000262B 523A0A0D            <1>
  2801 0000262F 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10,13
  2802 00002638 727275707420697320- <1>
  2803 00002641 726573657276656420- <1>
  2804 0000264A 666F72207573616765- <1>
  2805 00002653 206F6E6C7920627920- <1>
  2806 0000265C 746865206D696C6974- <1>
  2807 00002665 617279207768656E20- <1>
  2808 0000266E 6974206973206E6563- <1>
  2809 00002677 6573736172790A0D    <1>
  2810 0000267F 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,13,0
  2811 00002688 746520612066756C6C- <1>
  2812 00002691 2D7363616C6520636F- <1>
  2813 0000269A 757020642782746174- <1>
  2814 000026A3 2E0A0D00            <1>
  2815                              <1> 		
  2816 000026A7 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10,13
  2817 000026B0 68656C6C206A757374- <1>
  2818 000026B9 2068617070656E6564- <1>
  2819 000026C2 3F2049732065766572- <1>
  2820 000026CB 796F6E65206F6B6179- <1>
  2821 000026D4 3F2048617264206472- <1>
  2822 000026DD 6976653F2056696465- <1>
  2823 000026E6 6F20636172643F0A0D  <1>
  2824 000026EF 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,13,0
  2825 000026F8 726520796F75207468- <1>
  2826 00002701 6572653F0A0D00      <1>
  2827                                      %include 'source/ints.asm'
  2828                              <1> newints:	;;for great justice
  2829 00002708 80FC00              <1> 	cmp ah, 0		;;originally 0
  2830 0000270B 0F845B000000        <1> 	je near intx0   ;;0=kills app
  2831 00002711 80FC01              <1> 	cmp ah, 1		;;originally 1
  2832 00002714 0F8457000000        <1> 	je near intx1   ;;3=print string
  2833 0000271A 80FC02              <1> 	cmp ah, 2		;;originally 2
  2834 0000271D 0F8458000000        <1> 	je near intx2	;;4=read string
  2835 00002723 80FC03              <1> 	cmp ah, 3		;;originally 3
  2836 00002726 0F8459000000        <1> 	je near intx3	;;6=clear screen
  2837 0000272C 80FC04              <1> 	cmp ah, 4		;;originally 4
  2838 0000272F 0F845A000000        <1> 	je near intx4	;;5=read and print string
  2839 00002735 80FC05              <1> 	cmp ah, 5		;;originally 5		
  2840 00002738 0F845B000000        <1> 	je near intx5	;;2=get char
  2841 0000273E 80FC06              <1> 	cmp ah, 6		;;originally 6
  2842 00002741 0F845C000000        <1> 	je near intx6	;;1=print char
  2843 00002747 80FC07              <1> 	cmp ah, 7
  2844 0000274A 0F845D000000        <1> 	je near intx7	;;read file
  2845 00002750 80FC09              <1> 	cmp ah, 9
  2846 00002753 0F845E000000        <1> 	je near intx9	;;convert number to string
  2847 00002759 80FC0A              <1> 	cmp ah, 10
  2848 0000275C 0F846D000000        <1> 	je near intx10	;;convert string to number
  2849 00002762 80FC0B              <1> 	cmp ah, 11
  2850 00002765 0F846A000000        <1> 	je near intx11	;;create thread
  2851 0000276B C3                  <1> 	ret
  2852                              <1> 	
  2853                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  2854                              <1> 	
  2855                              <1> intx0:
  2856 0000276C E9E1080000          <1> 	jmp nwcmd
  2857                              <1> intx1:
  2858 00002771 E88C020000          <1> 	call int303
  2859 00002776 E9D1DCFFFF          <1> 	jmp timerinterrupt
  2860                              <1> intx2:
  2861 0000277B E8AA020000          <1> 	call int304
  2862 00002780 E9C7DCFFFF          <1> 	jmp timerinterrupt
  2863                              <1> intx3:
  2864 00002785 E88E050000          <1> 	call int306
  2865 0000278A E9BDDCFFFF          <1> 	jmp timerinterrupt
  2866                              <1> intx4:
  2867 0000278F E8D5020000          <1> 	call int305
  2868 00002794 E9B3DCFFFF          <1> 	jmp timerinterrupt
  2869                              <1> intx5:
  2870 00002799 E80B020000          <1> 	call int302
  2871 0000279E E9A9DCFFFF          <1> 	jmp timerinterrupt
  2872                              <1> intx6:
  2873 000027A3 E83D000000          <1> 	call int301
  2874 000027A8 E99FDCFFFF          <1> 	jmp timerinterrupt
  2875                              <1> intx7:
  2876 000027AD E88A410000          <1> 	call loadfile
  2877 000027B2 E995DCFFFF          <1> 	jmp timerinterrupt
  2878                              <1> intx9:
  2879 000027B7 3C00                <1> 	cmp al, 0
  2880 000027B9 750A                <1> 	jne intx9B
  2881 000027BB E8510E0000          <1> 	call showdec
  2882 000027C0 E987DCFFFF          <1> 	jmp timerinterrupt
  2883                              <1> intx9B:
  2884 000027C5 E8A30D0000          <1> 	call showhex
  2885 000027CA E97DDCFFFF          <1> 	jmp timerinterrupt
  2886                              <1> intx10:
  2887 000027CF E8D60E0000          <1> 	call cnvrttxt	;the string goes into esi, number into ecx
  2888 000027D4 CF                  <1> 	iret
  2889                              <1> intx11:
  2890 000027D5 E89B470000          <1> 	call threadfork
  2891 000027DA CF                  <1> 	iret
  2892                              <1> 	
  2893 000027DB 0000                <1> linebeginpos dw 0
  2894 000027DD 0000                <1> videobufpos: dw 0
  2895 000027DF 0000                <1> charpos db 0,0
  2896 000027E1 501E                <1> charxy db 80,30
  2897 000027E3 0000                <1> charbuf dw 0
  2898                              <1> 	
  2899                              <1> int301:	;;print char, char in al, modifier in bl, will run videobufcopy if called as is
  2900 000027E5 E808000000          <1> 	call int301prnt
  2901 000027EA E876050000          <1> 	call termcopy
  2902 000027EF C3                  <1> 	ret
  2903 000027F0 00                  <1> termguion db 0
  2904 000027F1 00                  <1> termcopyon db 0
  2905                              <1> int301prnt:
  2906 000027F2 88DC                <1> 	mov ah, bl
  2907 000027F4 66A3[E3270000]      <1> 	mov [charbuf], ax
  2908 000027FA 31DB                <1> 	xor ebx, ebx
  2909 000027FC 668B1D[DD270000]    <1> 	mov bx, [videobufpos]
  2910 00002803 BF[8F1D0000]        <1> 	mov edi, videobuf
  2911 00002808 01DF                <1> 	add edi, ebx
  2912 0000280A 66A1[632D0000]      <1> 	mov ax, [removedvideo]
  2913 00002810 668907              <1> 	mov [edi], ax
  2914 00002813 66A1[E3270000]      <1> 	mov ax, [charbuf]
  2915 00002819 31D2                <1> 	xor edx, edx
  2916 0000281B 668B15[DF270000]    <1> 	mov dx, [charpos]
  2917 00002822 31C9                <1> 	xor ecx, ecx
  2918 00002824 668B0D[E1270000]    <1> 	mov cx, [charxy]
  2919 0000282B 3C09                <1> 	cmp al, 9
  2920 0000282D 0F8463000000        <1> 	je near int301tab
  2921 00002833 3C0D                <1> 	cmp al, 13
  2922 00002835 0F8478000000        <1> 	je near int301cr
  2923 0000283B 3C0A                <1> 	cmp al, 10
  2924 0000283D 0F84A1000000        <1> 	je near int301nl
  2925 00002843 3C08                <1> 	cmp al, 8
  2926 00002845 0F847C000000        <1> 	je near int301bs
  2927 0000284B 3CFF                <1> 	cmp al, 255		;;null character
  2928 0000284D 0F841B000000        <1> 	je near donescr
  2929 00002853 668907              <1> 	mov [edi], ax
  2930 00002856 81C702000000        <1> 	add edi, 2
  2931 0000285C FEC2                <1> 	inc dl
  2932                              <1> donecrnl:
  2933 0000285E 38CA                <1> 	cmp dl, cl
  2934 00002860 0F83AF000000        <1> 	jae near int301eol
  2935                              <1> doneeol:
  2936 00002866 38EE                <1> 	cmp dh, ch
  2937 00002868 0F83C5000000        <1> 	jae near int301scr	
  2938                              <1> donescr:
  2939 0000286E 89FB                <1> 	mov ebx, edi
  2940 00002870 668B07              <1> 	mov ax, [edi]
  2941 00002873 66A3[632D0000]      <1> 	mov [removedvideo], ax
  2942 00002879 81EB[8F1D0000]      <1> 	sub ebx, videobuf
  2943 0000287F 66891D[DD270000]    <1> 	mov [videobufpos], bx
  2944 00002886 668915[DF270000]    <1> 	mov [charpos], dx
  2945 0000288D 66A1[E3270000]      <1> 	mov ax, [charbuf]
  2946 00002893 88E3                <1> 	mov bl, ah
  2947 00002895 C3                  <1> 	ret
  2948                              <1> 	
  2949                              <1> 	int301tab:
  2950 00002896 47                  <1> 		inc edi
  2951 00002897 FEC2                <1> 		inc dl	;make sure it works
  2952 00002899 C1EF04              <1> 		shr edi, 4
  2953 0000289C C1E704              <1> 		shl edi, 4
  2954 0000289F 81C710000000        <1> 		add edi, 16
  2955 000028A5 C0EA03              <1> 		shr dl, 3
  2956 000028A8 C0E203              <1> 		shl dl, 3
  2957 000028AB 80C208              <1> 		add dl, 8
  2958 000028AE 4F                  <1> 		dec edi
  2959 000028AF FECA                <1> 		dec dl
  2960 000028B1 EBAB                <1> 		jmp donecrnl
  2961                              <1> 	
  2962                              <1> 	int301cr:
  2963 000028B3 30D2                <1> 		xor dl, dl
  2964 000028B5 31DB                <1> 		xor ebx, ebx
  2965 000028B7 BF[8F1D0000]        <1> 		mov edi, videobuf
  2966 000028BC 668B1D[DB270000]    <1> 		mov bx, [linebeginpos]
  2967 000028C3 01DF                <1> 		add edi, ebx
  2968 000028C5 EB97                <1> 		jmp donecrnl
  2969                              <1> 			
  2970                              <1> 	int301bs:
  2971 000028C7 80FA00              <1> 		cmp dl, 0
  2972 000028CA 740D                <1> 		je int301backline
  2973                              <1> 	int301nobmr:
  2974 000028CC FECA                <1> 		dec dl
  2975 000028CE 6631C0              <1> 		xor ax, ax
  2976 000028D1 81EF02000000        <1> 		sub edi, 2
  2977 000028D7 EB85                <1> 		jmp donecrnl
  2978                              <1> 	int301backline:
  2979 000028D9 88CA                <1> 		mov dl, cl
  2980 000028DB 80FE00              <1> 		cmp dh, 0
  2981 000028DE 74EC                <1> 		je int301nobmr
  2982 000028E0 FECE                <1> 		dec dh
  2983 000028E2 EBE8                <1> 		jmp int301nobmr
  2984                              <1> 		
  2985                              <1> 	int301nl:
  2986 000028E4 FEC6                <1> 		inc dh
  2987 000028E6 31DB                <1> 		xor ebx, ebx
  2988 000028E8 88CB                <1> 		mov bl, cl
  2989 000028EA 66D1E3              <1> 		shl bx, 1
  2990 000028ED BF[8F1D0000]        <1> 		mov edi, videobuf
  2991 000028F2 66031D[DD270000]    <1> 		add bx, [videobufpos]
  2992 000028F9 01DF                <1> 		add edi, ebx
  2993 000028FB 31DB                <1> 		xor ebx, ebx
  2994 000028FD 88CB                <1> 		mov bl, cl
  2995 000028FF 66D1E3              <1> 		shl bx, 1
  2996 00002902 66031D[DB270000]    <1> 		add bx, [linebeginpos]
  2997 00002909 66891D[DB270000]    <1> 		mov [linebeginpos], bx
  2998 00002910 E949FFFFFF          <1> 		jmp donecrnl
  2999                              <1> 		
  3000                              <1> 	int301eol:
  3001 00002915 30D2                <1> 		xor dl, dl
  3002 00002917 FEC6                <1> 		inc dh
  3003 00002919 31DB                <1> 		xor ebx, ebx
  3004 0000291B 88CB                <1> 		mov bl, cl
  3005 0000291D 66D1E3              <1> 		shl bx, 1
  3006 00002920 66031D[DB270000]    <1> 		add bx, [linebeginpos]
  3007 00002927 66891D[DB270000]    <1> 		mov [linebeginpos], bx
  3008 0000292E E933FFFFFF          <1> 		jmp doneeol
  3009                              <1> 	int301scr:
  3010 00002933 FECE                <1> 		dec dh
  3011 00002935 BF[8F1D0000]        <1> 		mov edi, videobuf
  3012 0000293A 31DB                <1> 		xor ebx, ebx
  3013 0000293C 88CB                <1> 		mov bl, cl
  3014 0000293E 66D1E3              <1> 		shl bx, 1
  3015 00002941 01FB                <1> 		add ebx, edi
  3016                              <1> 	intscrollloop:
  3017 00002943 668B03              <1> 		mov ax, [ebx]
  3018 00002946 668907              <1> 		mov [edi], ax
  3019 00002949 81C702000000        <1> 		add edi, 2
  3020 0000294F 81C302000000        <1> 		add ebx, 2
  3021 00002955 FEC9                <1> 		dec cl
  3022 00002957 80F900              <1> 		cmp cl, 0
  3023 0000295A 75E7                <1> 		jne intscrollloop
  3024 0000295C 8A0D[E1270000]      <1> 		mov cl, [charxy]
  3025 00002962 FECD                <1> 		dec ch
  3026 00002964 80FD01              <1> 		cmp ch, 1
  3027 00002967 77DA                <1> 		ja intscrollloop
  3028 00002969 6631C0              <1> 		xor ax, ax
  3029 0000296C 81EF[8F1D0000]      <1> 		sub edi, videobuf
  3030 00002972 66893D[DB270000]    <1> 		mov [linebeginpos], di
  3031 00002979 81C7[8F1D0000]      <1> 		add edi, videobuf
  3032 0000297F 89FB                <1> 		mov ebx, edi
  3033                              <1> 	intloopclear:
  3034 00002981 668903              <1> 		mov [ebx], ax
  3035 00002984 81C302000000        <1> 		add ebx, 2
  3036 0000298A FEC9                <1> 		dec cl
  3037 0000298C 80F900              <1> 		cmp cl, 0
  3038 0000298F 75F0                <1> 		jne intloopclear
  3039 00002991 FECD                <1> 		dec ch
  3040 00002993 80FD00              <1> 		cmp ch, 0
  3041 00002996 75E9                <1> 		jne intloopclear
  3042 00002998 668B0D[E1270000]    <1> 		mov cx, [charxy]
  3043 0000299F E9CAFEFFFF          <1> 		jmp donescr
  3044                              <1> 		
  3045                              <1> 		
  3046 000029A4 0000                <1> lastkey db 0,0
  3047 000029A6 00                  <1> trans db 0
  3048                              <1> getkey:
  3049 000029A7 30C0                <1> 	xor al, al
  3050                              <1> 	int302:		;;get char, if al is 0, wait for key
  3051 000029A9 C605[A6290000]01    <1> 		mov byte [trans], 1
  3052 000029B0 3C01                <1> 		cmp al, 1
  3053 000029B2 7307                <1> 		jae transcheck
  3054 000029B4 C605[A6290000]00    <1> 		mov byte [trans], 0
  3055                              <1> 	transcheck:
  3056 000029BB E84B1E0000          <1> 		call guistartin
  3057 000029C0 8A3D[A6290000]      <1> 		mov bh, [trans]
  3058 000029C6 66A1[A4290000]      <1> 		mov ax, [lastkey]
  3059 000029CC 80FC1C              <1> 		cmp ah, 1Ch
  3060 000029CF 7419                <1> 		je int302enter
  3061 000029D1 803D[E6470000]E0    <1> 		cmp byte [specialkey], 0xE0
  3062 000029D8 7504                <1> 		jne nospecialtrans
  3063 000029DA 88C3                <1> 		mov bl, al
  3064 000029DC 30C0                <1> 		xor al, al
  3065                              <1> 	nospecialtrans:
  3066 000029DE 08C7                <1> 		or bh, al
  3067 000029E0 80FF00              <1> 		cmp bh, 0
  3068 000029E3 74D6                <1> 		je transcheck
  3069 000029E5 E902000000          <1> 		jmp int302end
  3070                              <1> 	int302enter:
  3071 000029EA B00D                <1> 		mov al, 13
  3072                              <1> 	int302end:
  3073 000029EC C3                  <1> 		ret
  3074                              <1> 	
  3075 000029ED 00                  <1> endkey303 db 0
  3076                              <1> 	printquiet:
  3077 000029EE 6631C0              <1> 		xor ax, ax
  3078 000029F1 66BB0700            <1> 		mov bx, 7
  3079 000029F5 E818000000          <1> 		call int303b
  3080 000029FA C3                  <1> 		ret
  3081                              <1>     print:
  3082 000029FB 6631C0              <1> 		xor ax, ax
  3083 000029FE 66BB0700            <1> 		mov bx, 7
  3084                              <1> 	int303:	;;print line, al=last key,bl=modifier, esi=buffer
  3085 00002A02 A2[ED290000]        <1> 		mov [endkey303], al
  3086 00002A07 E806000000          <1> 		call int303b
  3087 00002A0C E854030000          <1> 		call termcopy
  3088 00002A11 C3                  <1> 		ret
  3089                              <1> 	int303b:
  3090 00002A12 8A06                <1> 		mov al, [esi]
  3091 00002A14 3A05[ED290000]      <1> 		cmp al, [endkey303]
  3092 00002A1A 7408                <1> 		je doneint303
  3093 00002A1C E8D1FDFFFF          <1> 		call int301prnt
  3094 00002A21 46                  <1> 		inc esi
  3095 00002A22 EBEE                <1> 		jmp int303b
  3096                              <1> 	doneint303:
  3097 00002A24 C3                  <1> 		ret
  3098                              <1> 		
  3099 00002A25 00                  <1> endkey304 db 0
  3100 00002A26 00000000            <1> endbuffer304 dd 0
  3101                              <1> 	int304:	;;get line, al=last key, esi = buffer, edi = endbuffer
  3102 00002A2A A2[252A0000]        <1> 		mov [endkey304], al
  3103 00002A2F 893D[262A0000]      <1> 		mov [endbuffer304], edi
  3104                              <1> 	int304b:
  3105 00002A35 56                  <1> 		push esi
  3106 00002A36 30C0                <1> 		xor al, al
  3107 00002A38 E86CFFFFFF          <1> 		call int302
  3108 00002A3D 5E                  <1> 		pop esi
  3109 00002A3E 8806                <1> 		mov [esi], al
  3110 00002A40 46                  <1> 		inc esi
  3111 00002A41 3B35[262A0000]      <1> 		cmp esi, [endbuffer304]
  3112 00002A47 7308                <1> 		jae int304done
  3113 00002A49 3A05[252A0000]      <1> 		cmp al, [endkey304]
  3114 00002A4F 75E4                <1> 		jne int304b
  3115                              <1> 	int304done:
  3116 00002A51 4E                  <1> 		dec esi
  3117 00002A52 C60600              <1> 		mov byte [esi], 0
  3118 00002A55 C3                  <1> 	ret
  3119                              <1> 	
  3120 00002A56 00                  <1> endkey305 db 0
  3121 00002A57 00                  <1> modkey305 db 0
  3122 00002A58 00000000            <1> firstesi305 dd 0
  3123 00002A5C 00                  <1> commandedit db 0
  3124 00002A5D 00                  <1> txtmask db 0
  3125 00002A5E 00000000            <1> buftxtloc dd 0
  3126 00002A62 00000000            <1> endbuffer305 dd 0
  3127 00002A66 082000              <1> backcursor db 8," ",0
  3128                              <1> 	int305:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  3129 00002A69 8935[5E2A0000]      <1> 		mov [buftxtloc], esi
  3130 00002A6F A2[562A0000]        <1> 		mov [endkey305], al
  3131 00002A74 881D[572A0000]      <1> 		mov [modkey305], bl
  3132 00002A7A 8935[582A0000]      <1> 		mov [firstesi305], esi
  3133 00002A80 893D[622A0000]      <1> 		mov [endbuffer305], edi
  3134                              <1> 	int305b:
  3135 00002A86 56                  <1> 		push esi
  3136 00002A87 B001                <1> 		mov al, 1
  3137 00002A89 E81BFFFFFF          <1> 		call int302	;then get it
  3138 00002A8E 5E                  <1> 		pop esi
  3139 00002A8F 80FC48              <1> 		cmp ah, 0x48
  3140 00002A92 0F846F010000        <1> 		je near int305up
  3141 00002A98 80FC50              <1> 		cmp ah, 0x50
  3142 00002A9B 0F8449010000        <1> 		je near int305down
  3143 00002AA1 80FC4D              <1> 		cmp ah, 0x4D
  3144 00002AA4 0F84FE000000        <1> 		je near int305right
  3145 00002AAA 80FC4B              <1> 		cmp ah, 0x4B
  3146 00002AAD 0F84BC000000        <1> 		je near int305left
  3147 00002AB3 3C08                <1> 		cmp al, 8
  3148 00002AB5 0F843F020000        <1> 		je near int305bscheck
  3149 00002ABB 3C00                <1> 		cmp al, 0
  3150 00002ABD 74C7                <1> 		je int305b
  3151 00002ABF 80FC00              <1> 		cmp ah, 0
  3152 00002AC2 74C2                <1> 		je int305b
  3153 00002AC4 8806                <1> 		mov [esi], al
  3154 00002AC6 46                  <1> 		inc esi
  3155                              <1> 	bscheckequal:
  3156 00002AC7 8A1D[572A0000]      <1> 		mov bl, [modkey305]
  3157 00002ACD 8A3D[5D2A0000]      <1> 		mov bh, [txtmask]
  3158 00002AD3 80FF00              <1> 		cmp bh, 0
  3159 00002AD6 7402                <1> 		je nomasktxt
  3160 00002AD8 88F8                <1> 		mov al, bh
  3161                              <1> 	nomasktxt:
  3162 00002ADA E806FDFFFF          <1> 		call int301
  3163 00002ADF 56                  <1> 		push esi
  3164 00002AE0 66A3[6D2B0000]      <1> 		mov [int305axcache], ax
  3165 00002AE6 8A25[562A0000]      <1> 		mov ah, [endkey305]
  3166 00002AEC 38E0                <1> 		cmp al, ah
  3167 00002AEE 7429                <1> 		je nobackprintbuftxt2
  3168 00002AF0 BE[701A0000]        <1> 		mov esi, buftxt2
  3169 00002AF5 E8F4FEFFFF          <1> 		call printquiet
  3170 00002AFA B020                <1> 		mov al, " "
  3171 00002AFC E8F1FCFFFF          <1> 		call int301prnt
  3172 00002B01 B008                <1> 		mov al, 8
  3173 00002B03 81FE[701A0000]      <1> 		cmp esi, buftxt2
  3174 00002B09 740E                <1> 		je nobackprintbuftxt2
  3175                              <1> 	backprintbuftxt2:
  3176 00002B0B E8E2FCFFFF          <1> 		call int301prnt
  3177 00002B10 4E                  <1> 		dec esi
  3178 00002B11 81FE[701A0000]      <1> 		cmp esi, buftxt2
  3179 00002B17 77F2                <1> 		ja backprintbuftxt2
  3180                              <1> 	nobackprintbuftxt2:
  3181 00002B19 E8C7FCFFFF          <1> 		call int301
  3182 00002B1E 5E                  <1> 		pop esi
  3183 00002B1F 3B35[622A0000]      <1> 		cmp esi, [endbuffer305]
  3184 00002B25 0F8314000000        <1> 		jae near doneint305
  3185 00002B2B 66A1[6D2B0000]      <1> 		mov ax, [int305axcache]
  3186 00002B31 8A25[562A0000]      <1> 		mov ah, [endkey305]
  3187 00002B37 38E0                <1> 		cmp al, ah
  3188 00002B39 0F8547FFFFFF        <1> 		jne int305b
  3189                              <1> 	doneint305:
  3190 00002B3F 4E                  <1> 		dec esi
  3191 00002B40 BF[701A0000]        <1> 		mov edi, buftxt2
  3192                              <1> 	copylaterstuff:
  3193 00002B45 8A07                <1> 		mov al, [edi]
  3194 00002B47 3C00                <1> 		cmp al, 0
  3195 00002B49 7406                <1> 		je nocopylaterstuff
  3196 00002B4B 8806                <1> 		mov [esi], al
  3197 00002B4D 47                  <1> 		inc edi
  3198 00002B4E 46                  <1> 		inc esi
  3199 00002B4F EBF4                <1> 		jmp copylaterstuff
  3200                              <1> 	nocopylaterstuff:
  3201 00002B51 C60600              <1> 		mov byte [esi], 0
  3202 00002B54 E801000000          <1> 		call clearbuftxt2
  3203 00002B59 C3                  <1> 		ret
  3204                              <1> 	
  3205                              <1> 	clearbuftxt2:
  3206 00002B5A 30C0                <1> 		xor al, al
  3207 00002B5C BF[701A0000]        <1> 		mov edi, buftxt2
  3208                              <1> 	clearbuftxt2lp:
  3209 00002B61 8807                <1> 		mov [edi], al
  3210 00002B63 47                  <1> 		inc edi
  3211 00002B64 81FF[7A1B0000]      <1> 		cmp edi, buftxt
  3212 00002B6A 75F5                <1> 		jne clearbuftxt2lp
  3213 00002B6C C3                  <1> 		ret
  3214                              <1> 		
  3215 00002B6D 0000                <1> 	int305axcache dw 0
  3216                              <1> 		
  3217                              <1> 	int305left:
  3218 00002B6F 3B35[5E2A0000]      <1> 		cmp esi, [buftxtloc]
  3219 00002B75 0F840BFFFFFF        <1> 		je near int305b
  3220 00002B7B BF[701A0000]        <1> 		mov edi, buftxt2
  3221 00002B80 8A07                <1> 		mov al, [edi]
  3222                              <1> 	shiftbuftxt2:
  3223 00002B82 3C00                <1> 		cmp al, 0
  3224 00002B84 7409                <1> 		je noshiftbuftxt2
  3225 00002B86 47                  <1> 		inc edi
  3226 00002B87 8A27                <1> 		mov ah, [edi]
  3227 00002B89 8807                <1> 		mov [edi], al
  3228 00002B8B 88E0                <1> 		mov al, ah
  3229 00002B8D EBF3                <1> 		jmp shiftbuftxt2
  3230                              <1> 	noshiftbuftxt2:
  3231 00002B8F BF[701A0000]        <1> 		mov edi, buftxt2
  3232 00002B94 4E                  <1> 		dec esi
  3233 00002B95 8A06                <1> 		mov al, [esi]
  3234 00002B97 8807                <1> 		mov [edi], al
  3235 00002B99 C60600              <1> 		mov byte [esi], 0
  3236 00002B9C B008                <1> 		mov al, 8
  3237 00002B9E E842FCFFFF          <1> 		call int301
  3238 00002BA3 E9DEFEFFFF          <1> 		jmp int305b
  3239                              <1> 		
  3240                              <1> 	int305right:
  3241 00002BA8 BF[701A0000]        <1> 		mov edi, buftxt2
  3242 00002BAD 8A07                <1> 		mov al, [edi]
  3243 00002BAF 3C00                <1> 		cmp al, 0
  3244 00002BB1 0F84CFFEFFFF        <1> 		je near int305b
  3245 00002BB7 8806                <1> 		mov [esi], al
  3246                              <1> 	shiftbuftxt2lft:
  3247 00002BB9 3C00                <1> 		cmp al, 0
  3248 00002BBB 7408                <1> 		je noshiftbuftxt2lft
  3249 00002BBD 47                  <1> 		inc edi
  3250 00002BBE 8A07                <1> 		mov al, [edi]
  3251 00002BC0 8847FF              <1> 		mov [edi - 1], al
  3252 00002BC3 EBF4                <1> 		jmp shiftbuftxt2lft
  3253                              <1> 	noshiftbuftxt2lft:
  3254 00002BC5 8A06                <1> 		mov al, [esi]
  3255 00002BC7 46                  <1> 		inc esi
  3256 00002BC8 8A1D[572A0000]      <1> 		mov bl, [modkey305]
  3257 00002BCE E812FCFFFF          <1> 		call int301
  3258 00002BD3 E9AEFEFFFF          <1> 		jmp int305b
  3259                              <1> 		
  3260                              <1> 	int305downbck:
  3261 00002BD8 FECC                <1> 		dec ah
  3262 00002BDA 8825[5C2A0000]      <1> 		mov [commandedit], ah
  3263 00002BE0 E83A000000          <1> 		call int305bckspc
  3264 00002BE5 E99CFEFFFF          <1> 		jmp int305b
  3265                              <1> 	
  3266                              <1> 	int305down:
  3267 00002BEA 8A25[5C2A0000]      <1> 		mov ah, [commandedit]
  3268 00002BF0 80FC01              <1> 		cmp ah, 1
  3269 00002BF3 0F868DFEFFFF        <1> 		jbe near int305b
  3270 00002BF9 80FC02              <1> 		cmp ah, 2
  3271 00002BFC 74DA                <1> 		je int305downbck
  3272 00002BFE 80EC02              <1> 		sub ah, 2
  3273 00002C01 8825[5C2A0000]      <1> 		mov [commandedit], ah
  3274                              <1> 		
  3275                              <1> 	int305up:
  3276                              <1> 		;cmp bl, 0xE0
  3277                              <1> 		;jne int305b
  3278 00002C07 30C0                <1> 		xor al, al
  3279 00002C09 3805[5C2A0000]      <1> 		cmp [commandedit], al
  3280 00002C0F 0F8471FEFFFF        <1> 		je near int305b
  3281 00002C15 E805000000          <1> 		call int305bckspc
  3282 00002C1A E93C000000          <1> 		jmp getcurrentcommandstr
  3283                              <1> 	int305bckspc:
  3284 00002C1F 3B35[5E2A0000]      <1> 		cmp esi, [buftxtloc]
  3285 00002C25 7426                <1> 		je noint305upbck
  3286                              <1> 	int305upbckspclp:
  3287 00002C27 B008                <1> 		mov al, 8
  3288 00002C29 8A1D[572A0000]      <1> 		mov bl, [modkey305]
  3289 00002C2F E8BEFBFFFF          <1> 		call int301prnt
  3290 00002C34 B020                <1> 		mov al, " "
  3291 00002C36 E8B7FBFFFF          <1> 		call int301prnt
  3292 00002C3B B008                <1> 		mov al, 8
  3293 00002C3D E8A3FBFFFF          <1> 		call int301
  3294 00002C42 4E                  <1> 		dec esi
  3295 00002C43 3B35[5E2A0000]      <1> 		cmp esi, [buftxtloc]
  3296 00002C49 7402                <1> 		je noint305upbck
  3297 00002C4B EBDA                <1> 		jmp int305upbckspclp
  3298                              <1> 	noint305upbck:
  3299 00002C4D 8B3D[5B6E0000]      <1> 		mov edi, [currentcommandpos]
  3300 00002C53 81C7[5F6E0000]      <1> 		add edi, commandbuf
  3301 00002C59 4F                  <1> 		dec edi
  3302 00002C5A C3                  <1> 		ret
  3303                              <1> 	getcurrentcommandstr:
  3304 00002C5B 8A25[5C2A0000]      <1> 		mov ah, [commandedit]
  3305 00002C61 FE05[5C2A0000]      <1> 		inc byte [commandedit]
  3306                              <1> 	getccmdlp:
  3307 00002C67 4F                  <1> 		dec edi
  3308 00002C68 8A07                <1> 		mov al, [edi]
  3309 00002C6A 81FF[5F6E0000]      <1> 		cmp edi, commandbuf
  3310 00002C70 7231                <1> 		jb getcmdresetcommandbuf
  3311 00002C72 81EF[5F6E0000]      <1> 		sub edi, commandbuf
  3312 00002C78 3B3D[5B6E0000]      <1> 		cmp edi, [currentcommandpos]
  3313 00002C7E 0F8402FEFFFF        <1> 		je near int305b
  3314 00002C84 81C7[5F6E0000]      <1> 		add edi, commandbuf
  3315 00002C8A 3C00                <1> 		cmp al, 0
  3316 00002C8C 75D9                <1> 		jne getccmdlp
  3317 00002C8E FECC                <1> 		dec ah
  3318 00002C90 80FC00              <1> 		cmp ah, 0
  3319 00002C93 77D2                <1> 		ja getccmdlp
  3320 00002C95 47                  <1> 		inc edi
  3321 00002C96 81FF[5F720000]      <1> 		cmp edi, commandbufend
  3322 00002C9C 770D                <1> 		ja fixcmdbufb4moreint305
  3323 00002C9E E915000000          <1> 		jmp moreint305up
  3324                              <1> 	getcmdresetcommandbuf:
  3325 00002CA3 BF[5F720000]        <1> 		mov edi, commandbufend
  3326 00002CA8 47                  <1> 		inc edi
  3327 00002CA9 EBBC                <1> 		jmp getccmdlp
  3328                              <1> 	fixcmdbufb4moreint305:
  3329 00002CAB 4F                  <1> 		dec edi
  3330 00002CAC 81EF[5F720000]      <1> 		sub edi, commandbufend
  3331 00002CB2 81C7[5F6E0000]      <1> 		add edi, commandbuf
  3332                              <1> 	moreint305up:
  3333 00002CB8 8A07                <1> 		mov al, [edi]
  3334 00002CBA 47                  <1> 		inc edi
  3335 00002CBB 81EF[5F6E0000]      <1> 		sub edi, commandbuf
  3336 00002CC1 3C00                <1> 		cmp al, 0
  3337 00002CC3 0F84BDFDFFFF        <1> 		je near int305b
  3338 00002CC9 3B3D[5B6E0000]      <1> 		cmp edi, [currentcommandpos]
  3339 00002CCF 0F83B1FDFFFF        <1> 		jae near int305b
  3340 00002CD5 81C7[5F6E0000]      <1> 		add edi, commandbuf
  3341 00002CDB 8806                <1> 		mov [esi], al
  3342 00002CDD 46                  <1> 		inc esi
  3343 00002CDE 57                  <1> 		push edi
  3344 00002CDF 8A1D[572A0000]      <1> 		mov bl, [modkey305]
  3345 00002CE5 E8FBFAFFFF          <1> 		call int301
  3346 00002CEA 5F                  <1> 		pop edi
  3347 00002CEB 81FF[5F720000]      <1> 		cmp edi, commandbufend
  3348 00002CF1 76C5                <1> 		jbe moreint305up
  3349 00002CF3 BF[5F6E0000]        <1> 		mov edi, commandbuf
  3350 00002CF8 EBBE                <1> 		jmp moreint305up
  3351                              <1> 	int305bscheck:
  3352 00002CFA 3B35[582A0000]      <1> 		cmp esi, [firstesi305]
  3353 00002D00 7705                <1> 		ja goodbscheck
  3354 00002D02 E97FFDFFFF          <1> 		jmp int305b
  3355                              <1> 	goodbscheck:
  3356 00002D07 4E                  <1> 		dec esi
  3357 00002D08 C60600              <1> 		mov byte [esi], 0
  3358 00002D0B 8A1D[572A0000]      <1> 		mov bl, [modkey305]
  3359 00002D11 B008                <1> 		mov al, 8
  3360 00002D13 E9AFFDFFFF          <1> 		jmp bscheckequal
  3361                              <1> 	
  3362                              <1> 		
  3363                              <1> 	clear:		
  3364                              <1> 	
  3365                              <1> 	int306:	;;clear screen
  3366 00002D18 668B0D[E1270000]    <1> 		mov cx, [charxy]
  3367 00002D1F BF[8F1D0000]        <1> 		mov edi, videobuf
  3368 00002D24 6631C0              <1> 		xor ax, ax
  3369 00002D27 66A3[DB270000]      <1> 		mov [linebeginpos], ax
  3370 00002D2D 66A3[DD270000]      <1> 		mov [videobufpos], ax
  3371 00002D33 6631D2              <1> 		xor dx, dx
  3372 00002D36 66A3[DF270000]      <1> 		mov [charpos], ax
  3373                              <1> 	int306b:
  3374 00002D3C 668907              <1> 		mov [edi], ax
  3375 00002D3F 81C702000000        <1> 		add edi, 2
  3376 00002D45 FEC9                <1> 		dec cl
  3377 00002D47 80F900              <1> 		cmp cl, 0
  3378 00002D4A 75F0                <1> 		jne int306b
  3379 00002D4C 8A0D[E1270000]      <1> 		mov cl, [charxy]
  3380 00002D52 FECD                <1> 		dec ch
  3381 00002D54 80FD00              <1> 		cmp ch, 0
  3382 00002D57 75E3                <1> 		jne int306b
  3383 00002D59 E807000000          <1> 		call termcopy
  3384 00002D5E C3                  <1> 		ret
  3385                              <1> 		
  3386 00002D5F 00000000            <1> 	termcursorpos dd 0
  3387 00002D63 0000                <1> 	removedvideo dw 0
  3388                              <1> termcopy:	
  3389 00002D65 60                  <1> 	pusha
  3390 00002D66 BF[8F1D0000]        <1> 	mov edi, videobuf
  3391 00002D6B 31DB                <1> 	xor ebx, ebx
  3392 00002D6D 668B1D[DD270000]    <1> 	mov bx, [videobufpos]
  3393 00002D74 01DF                <1> 	add edi, ebx
  3394 00002D76 893D[5F2D0000]      <1> 	mov [termcursorpos], edi
  3395 00002D7C E8AF000000          <1> 	call switchtermcursor
  3396 00002D81 C605[154F0000]00    <1> 	mov byte [mouseselecton], 0
  3397 00002D88 C605[F1270000]01    <1> 	mov byte [termcopyon], 1
  3398 00002D8F 803D[164F0000]00    <1> 	cmp byte [guion], 0
  3399 00002D96 0F8412000000        <1> 	je near nowincopy
  3400 00002D9C 803D[F0270000]01    <1> 	cmp byte [termguion], 1
  3401 00002DA3 0F84852D0000        <1> 	je near windowvideocopy
  3402 00002DA9 E97B000000          <1> 	jmp nocopytermatall
  3403                              <1> nowincopy:
  3404 00002DAE BE00000A00          <1> 	mov esi, 0xA0000
  3405 00002DB3 A1[29040000]        <1> 	mov eax, [basecache]
  3406 00002DB8 C1E004              <1> 	shl eax, 4
  3407 00002DBB 29C6                <1> 	sub esi, eax
  3408 00002DBD BF[8F1D0000]        <1> 	mov edi, videobuf
  3409 00002DC2 31C9                <1> 	xor ecx, ecx
  3410 00002DC4 668B0D[E1270000]    <1> 	mov cx, [charxy]
  3411                              <1> nowincopy2:
  3412 00002DCB BB[C6720000]        <1> 	mov ebx, fonts
  3413 00002DD0 31C0                <1> 	xor eax, eax
  3414 00002DD2 8A07                <1> 	mov al, [edi]
  3415 00002DD4 C1E004              <1> 	shl eax, 4
  3416 00002DD7 01C3                <1> 	add ebx, eax
  3417 00002DD9 47                  <1> 	inc edi
  3418 00002DDA 8A27                <1> 	mov ah, [edi]
  3419 00002DDC 31D2                <1> 	xor edx, edx
  3420 00002DDE 8A15[E1270000]      <1> 	mov dl, [charxy]
  3421 00002DE4 C1C110              <1> 	rol ecx, 16
  3422 00002DE7 B110                <1> 	mov cl, 16
  3423                              <1> nowinfont:
  3424 00002DE9 8A03                <1> 	mov al, [ebx]
  3425 00002DEB D0C8                <1> 	ror al, 1
  3426 00002DED 80FC07              <1> 	cmp ah, 7
  3427 00002DF0 7602                <1> 	jbe notnotfont
  3428 00002DF2 F6D0                <1> 	not al
  3429                              <1> notnotfont:
  3430 00002DF4 8806                <1> 	mov [esi], al
  3431 00002DF6 01D6                <1> 	add esi, edx
  3432 00002DF8 43                  <1> 	inc ebx
  3433 00002DF9 FEC9                <1> 	dec cl
  3434 00002DFB 80F900              <1> 	cmp cl, 0
  3435 00002DFE 75E9                <1> 	jne nowinfont
  3436 00002E00 C1E204              <1> 	shl edx, 4
  3437 00002E03 29D6                <1> 	sub esi, edx
  3438 00002E05 C1C110              <1> 	rol ecx, 16
  3439                              <1> nopresentwinfont:
  3440 00002E08 47                  <1> 	inc edi
  3441 00002E09 46                  <1> 	inc esi
  3442 00002E0A FEC9                <1> 	dec cl
  3443 00002E0C 80F900              <1> 	cmp cl, 0
  3444 00002E0F 75BA                <1> 	jne nowincopy2
  3445 00002E11 8A0D[E1270000]      <1> 	mov cl, [charxy]
  3446 00002E17 31D2                <1> 	xor edx, edx
  3447 00002E19 88CA                <1> 	mov dl, cl
  3448 00002E1B 29D6                <1> 	sub esi, edx
  3449 00002E1D C1E204              <1> 	shl edx, 4
  3450 00002E20 01D6                <1> 	add esi, edx
  3451 00002E22 FECD                <1> 	dec ch
  3452 00002E24 80FD00              <1> 	cmp ch, 0
  3453 00002E27 75A2                <1> 	jne nowincopy2
  3454                              <1> nocopytermatall:
  3455 00002E29 E802000000          <1> 	call switchtermcursor
  3456 00002E2E 61                  <1> 	popa
  3457 00002E2F C3                  <1> 	ret
  3458                              <1> 	
  3459                              <1> switchtermcursor:
  3460 00002E30 8B3D[5F2D0000]      <1> 	mov edi, [termcursorpos]
  3461 00002E36 8A4701              <1> 	mov al, [edi + 1]
  3462 00002E39 8A27                <1> 	mov ah, [edi]
  3463 00002E3B 3C07                <1> 	cmp al, 7
  3464 00002E3D 7607                <1> 	jbe movlargecursorterm
  3465 00002E3F B007                <1> 	mov al, 7
  3466 00002E41 E902000000          <1> 	jmp movedcursorterm
  3467                              <1> movlargecursorterm:
  3468 00002E46 B0F0                <1> 	mov al, 0xF0
  3469                              <1> movedcursorterm:
  3470 00002E48 884701              <1> 	mov [edi + 1], al
  3471 00002E4B 80FC00              <1> 	cmp ah, 0
  3472 00002E4E 7504                <1> 	jne fixednocursorterm
  3473 00002E50 B420                <1> 	mov ah, " "
  3474 00002E52 8827                <1> 	mov [edi], ah
  3475                              <1> fixednocursorterm:
  3476 00002E54 C3                  <1> 	ret
  3477                              <1> 	
  3478                                      %include 'source/dosints.asm'
  3479                              <1> int21h:
  3480 00002E55 80FC01              <1> 	cmp ah, 1
  3481 00002E58 0F8437000000        <1> 	je near dosgchar
  3482 00002E5E 80FC02              <1> 	cmp ah, 2
  3483 00002E61 0F8435000000        <1> 	je near doswchar
  3484 00002E67 80FC09              <1> 	cmp ah, 9
  3485 00002E6A 0F8433000000        <1> 	je near dosprintstr
  3486 00002E70 80FC0A              <1> 	cmp ah, 0xA
  3487 00002E73 0F8439000000        <1> 	je near dosgetstr
  3488 00002E79 80FC2B              <1> 	cmp ah, 0x2B
  3489 00002E7C 0F846E000000        <1> 	je near dosgetdate
  3490 00002E82 80FC2C              <1> 	cmp ah, 0x2C
  3491 00002E85 0F8484000000        <1> 	je near dosgettime
  3492 00002E8B 80FC4C              <1> 	cmp ah, 0x4C
  3493 00002E8E 0F8495000000        <1> 	je near dosexit
  3494 00002E94 C3                  <1> 	ret
  3495                              <1> 
  3496                              <1> dosgchar:
  3497 00002E95 B405                <1> 	mov ah, 5
  3498 00002E97 30C0                <1> 	xor al, al
  3499 00002E99 CD30                <1> 	int 30h
  3500 00002E9B C3                  <1> 	ret
  3501                              <1> 	
  3502                              <1> doswchar:
  3503 00002E9C B307                <1> 	mov bl, 7
  3504 00002E9E B406                <1> 	mov ah, 6
  3505 00002EA0 CD30                <1> 	int 30h
  3506 00002EA2 C3                  <1> 	ret
  3507                              <1> 	
  3508                              <1> dosprintstr:
  3509 00002EA3 8B3424              <1> 	mov esi, [esp]
  3510 00002EA6 6689D6              <1> 	mov si, dx
  3511 00002EA9 B024                <1> 	mov al, "$"
  3512 00002EAB B401                <1> 	mov ah, 1
  3513 00002EAD B307                <1> 	mov bl, 7
  3514 00002EAF CD30                <1> 	int 30h
  3515 00002EB1 C3                  <1> 	ret
  3516                              <1> 	
  3517                              <1> dosgetstr:
  3518 00002EB2 8B3424              <1> 	mov esi, [esp]
  3519 00002EB5 6689D6              <1> 	mov si, dx
  3520 00002EB8 B900000000          <1> 	mov ecx, 0
  3521 00002EBD 8A0E                <1> 	mov cl, [esi]
  3522 00002EBF 81C603000000        <1> 	add esi, 3
  3523 00002EC5 89F7                <1> 	mov edi, esi
  3524 00002EC7 8935[EC2E0000]      <1> 	mov [stringstart], esi
  3525 00002ECD 01CF                <1> 	add edi, ecx
  3526 00002ECF B00D                <1> 	mov al, 13
  3527 00002ED1 B404                <1> 	mov ah, 4
  3528 00002ED3 B307                <1> 	mov bl, 7
  3529 00002ED5 CD30                <1> 	int 30h
  3530 00002ED7 89F1                <1> 	mov ecx, esi
  3531 00002ED9 2B0D[EC2E0000]      <1> 	sub ecx, [stringstart]
  3532 00002EDF 8B35[EC2E0000]      <1> 	mov esi, [stringstart]
  3533 00002EE5 884EFF              <1> 	mov [esi - 1], cl
  3534 00002EE8 884EFE              <1> 	mov [esi - 2], cl
  3535 00002EEB C3                  <1> 	ret
  3536 00002EEC 00000000            <1> stringstart dd 0
  3537                              <1> 
  3538                              <1> dosgetdate:
  3539 00002EF0 E89B150000          <1> 	call time
  3540 00002EF5 8A0D[67460000]      <1> 	mov cl, [RTCtimeYear]
  3541 00002EFB B500                <1> 	mov ch, 0
  3542 00002EFD 6681C1D007          <1> 	add cx, 2000
  3543 00002F02 8A35[66460000]      <1> 	mov dh, [RTCtimeMonth]
  3544 00002F08 8A15[65460000]      <1> 	mov dl, [RTCtimeDay]
  3545 00002F0E C3                  <1> 	ret
  3546                              <1> 
  3547                              <1> dosgettime:
  3548 00002F0F E87C150000          <1> 	call time
  3549 00002F14 8A2D[64460000]      <1> 	mov ch, [RTCtimeHour]
  3550 00002F1A 8A0D[63460000]      <1> 	mov cl, [RTCtimeMinute]
  3551 00002F20 8A35[62460000]      <1> 	mov dh, [RTCtimeSecond]
  3552 00002F26 B200                <1> 	mov dl, 0
  3553 00002F28 C3                  <1> 	ret
  3554                              <1> 	
  3555                              <1> dosexit:
  3556 00002F29 6631C0              <1> 	xor ax, ax
  3557 00002F2C CD30                <1> 	int 30h
  3558                                      %include 'source/solleros.asm'
  3559                              <1> 	;SOLLEROS.ASM
  3560                              <1> os:
  3561 00002F2E E8E5FDFFFF          <1> 	call clear
  3562 00002F33 BE[7D720000]        <1> 	mov esi, userask
  3563 00002F38 E8BEFAFFFF          <1> 	call print
  3564                              <1> usercheck:
  3565 00002F3D BE[7A1B0000]        <1> 	mov esi, buftxt
  3566 00002F42 BF[7A1D0000]        <1> 	mov edi, buftxtend
  3567 00002F47 B00D                <1> 	mov al, 13
  3568 00002F49 E81BFBFFFF          <1> 	call int305
  3569 00002F4E 56                  <1> 	push esi
  3570 00002F4F BE[9D720000]        <1> 	mov esi, line
  3571 00002F54 E8A2FAFFFF          <1> 	call print
  3572 00002F59 BE[87720000]        <1> 	mov esi, pwdask
  3573 00002F5E E898FAFFFF          <1> 	call print
  3574 00002F63 5E                  <1> 	pop esi
  3575 00002F64 46                  <1> 	inc esi
  3576 00002F65 8935[1D300000]      <1> 	mov [esipass], esi
  3577                              <1> passcheck:
  3578 00002F6B 30C0                <1> 	xor al, al
  3579 00002F6D E837FAFFFF          <1> 	call int302
  3580 00002F72 3C0D                <1> 	cmp al, 13
  3581 00002F74 0F8436000000        <1> 	je near gotpass
  3582 00002F7A 3C08                <1> 	cmp al, 8
  3583 00002F7C 0F8410000000        <1> 	je near backpass
  3584 00002F82 8806                <1> 	mov [esi], al
  3585 00002F84 46                  <1> 	inc esi
  3586 00002F85 B02A                <1> 	mov al, '*'
  3587 00002F87 E859F8FFFF          <1> 	call int301
  3588 00002F8C EBDD                <1> 	jmp passcheck
  3589 00002F8E 08200800            <1> backcursor2 db 8," ",8,0
  3590                              <1> backpass:
  3591 00002F92 3B35[1D300000]      <1> 	cmp esi, [esipass]
  3592 00002F98 0F84CDFFFFFF        <1> 	je near passcheck
  3593 00002F9E 4E                  <1> 	dec esi
  3594 00002F9F C60600              <1> 	mov byte [esi], 0
  3595 00002FA2 56                  <1> 	push esi
  3596 00002FA3 BE[8E2F0000]        <1> 	mov esi, backcursor2
  3597 00002FA8 E84EFAFFFF          <1> 	call print
  3598 00002FAD 5E                  <1> 	pop esi
  3599 00002FAE EBBB                <1> 	jmp passcheck
  3600                              <1> gotpass:
  3601 00002FB0 B000                <1> 	mov al,0
  3602 00002FB2 8806                <1> 	mov [esi], al
  3603 00002FB4 BE[9D720000]        <1> 	mov esi, line
  3604 00002FB9 E83DFAFFFF          <1> 	call print
  3605 00002FBE BB[A3720000]        <1> 	mov ebx, userlst
  3606                              <1> userfind:
  3607 00002FC3 BE[7A1B0000]        <1> 	mov esi, buftxt
  3608 00002FC8 8A06                <1> 	mov al, [esi]
  3609 00002FCA 3C00                <1> 	cmp al, 0
  3610 00002FCC 0F845CFFFFFF        <1> 	je near os
  3611 00002FD2 891D[21300000]      <1> 	mov [usercache], ebx
  3612 00002FD8 E882020000          <1> 	call tester
  3613 00002FDD 3C01                <1> 	cmp al, 1
  3614 00002FDF 7415                <1> 	je pwdtest
  3615                              <1> nxtuser:
  3616 00002FE1 43                  <1> 	inc ebx
  3617 00002FE2 8A03                <1> 	mov al, [ebx]
  3618 00002FE4 3C00                <1> 	cmp al, 0
  3619 00002FE6 74DB                <1> 	je userfind
  3620 00002FE8 81FB[C6720000]      <1> 	cmp ebx, userlstend
  3621 00002FEE 0F833AFFFFFF        <1> 	jae near os
  3622 00002FF4 EBCD                <1> 	jmp userfind
  3623                              <1> pwdtest:
  3624 00002FF6 46                  <1> 	inc esi
  3625 00002FF7 43                  <1> 	inc ebx
  3626 00002FF8 E862020000          <1> 	call tester
  3627 00002FFD 3C01                <1> 	cmp al, 1
  3628 00002FFF 7402                <1> 	je pwdrgt
  3629 00003001 EBDE                <1> 	jmp nxtuser
  3630 00003003 E810FDFFFF          <1> pwdrgt:	call clear
  3631 00003008 66B90002            <1> 	mov cx, 200h
  3632 0000300C BE[7A1B0000]        <1> 	mov esi, buftxt
  3633 00003011 30C0                <1> 	xor al, al
  3634 00003013 8806                <1> bufclr:	mov [esi], al
  3635 00003015 46                  <1> 	inc esi
  3636 00003016 E2FB                <1> 	loop bufclr
  3637 00003018 E935000000          <1> 	jmp nwcmd
  3638                              <1> 
  3639 0000301D 00000000            <1> esipass dd 0
  3640 00003021 [A3720000]          <1> usercache dd userlst
  3641                              <1> 	
  3642                              <1> buftxtclear:
  3643 00003025 30C0                <1> 	xor al, al
  3644 00003027 BE[7A1B0000]        <1> 	mov esi, buftxt
  3645 0000302C 81FE[7A1D0000]      <1> clearbuftxt: cmp esi, buf2
  3646 00003032 730E                <1> 	jae retbufclr
  3647 00003034 8806                <1> 	mov [esi], al
  3648 00003036 46                  <1> 	inc esi
  3649 00003037 EBF3                <1> 	jmp clearbuftxt
  3650                              <1> 
  3651 00003039 39DE                <1> clearitbuf: cmp esi, ebx
  3652 0000303B 7305                <1> 	jae retbufclr
  3653 0000303D 8806                <1> 	mov [esi], al
  3654 0000303F 46                  <1> 	inc esi
  3655 00003040 EBF7                <1> 	jmp clearitbuf
  3656 00003042 C3                  <1> retbufclr: ret
  3657                              <1> 
  3658 00003043 E90A000000          <1> full:	jmp nwcmd
  3659                              <1> 
  3660                              <1> nwcmd2:
  3661 00003048 BE[9D720000]        <1> 	mov esi, line
  3662 0000304D E8A9F9FFFF          <1> 	call print
  3663                              <1> 
  3664                              <1> nwcmd:	
  3665 00003052 803D[6C6B0000]00    <1> 	cmp byte [threadson], 0
  3666 00003059 7408                <1> 	je noclinwcmd
  3667 0000305B FA                  <1> 	cli
  3668 0000305C C605[6C6B0000]00    <1> 	mov byte [threadson], 0
  3669                              <1> noclinwcmd:
  3670 00003063 B001                <1> 	mov al, 1
  3671 00003065 3805[69150000]      <1> 	cmp [BATCHISON], al
  3672 0000306B 7501                <1> 	jne cancel
  3673 0000306D C3                  <1> 	ret
  3674 0000306E 30C0                <1> cancel:	xor al, al
  3675 00003070 A2[00150000]        <1> 	mov [IFON], al
  3676 00003075 A2[69150000]        <1> 	mov [BATCHISON], al
  3677 0000307A B05B                <1> 	mov al, '['
  3678 0000307C B406                <1> 	mov ah, 6
  3679 0000307E 66BB0700            <1> 	mov bx, 7
  3680 00003082 E86BF7FFFF          <1> 	call int301prnt
  3681 00003087 8B35[21300000]      <1> 	mov esi, [usercache]
  3682 0000308D E869F9FFFF          <1> 	call print
  3683 00003092 BE[91720000]        <1> 	mov esi, location
  3684 00003097 E85FF9FFFF          <1> 	call print
  3685 0000309C E884FFFFFF          <1> 	call buftxtclear
  3686 000030A1 BE[7A1B0000]        <1> 	mov esi, buftxt
  3687 000030A6 C605[5C2A0000]01    <1> 	mov byte [commandedit], 1
  3688 000030AD B00D                <1> 	mov al, 13
  3689 000030AF 66BB0700            <1> 	mov bx, 7
  3690 000030B3 BF[7A1D0000]        <1> 	mov edi, buftxtend
  3691 000030B8 E8ACF9FFFF          <1> 	call int305
  3692 000030BD C605[5C2A0000]00    <1> 	mov byte [commandedit], 0
  3693 000030C4 803D[7A1B0000]00    <1> 	cmp byte [buftxt], 0
  3694 000030CB 0F8477FFFFFF        <1> 	je near nwcmd2
  3695 000030D1 8B35[5B6E0000]      <1> gotcmd:	mov esi, [currentcommandpos]
  3696 000030D7 8935[576E0000]      <1> 	mov [lastcommandpos], esi
  3697 000030DD BF[7A1B0000]        <1> 	mov edi, buftxt
  3698 000030E2 81C6[5F6E0000]      <1> 	add esi, commandbuf
  3699 000030E8 81FE[5F720000]      <1> 	cmp esi, commandbufend
  3700 000030EE 7605                <1> 	jbe copycommand
  3701 000030F0 BE[5F6E0000]        <1> 	mov esi, commandbuf
  3702                              <1> copycommand:
  3703 000030F5 8A07                <1> 	mov al, [edi]
  3704 000030F7 8806                <1> 	mov [esi], al
  3705 000030F9 47                  <1> 	inc edi
  3706 000030FA 46                  <1> 	inc esi
  3707 000030FB 3C00                <1> 	cmp al, 0
  3708 000030FD 740F                <1> 	je donecopy
  3709 000030FF 81FE[5F720000]      <1> 	cmp esi, commandbufend
  3710 00003105 76EE                <1> 	jbe copycommand
  3711 00003107 BE[5F6E0000]        <1> 	mov esi, commandbuf
  3712 0000310C EBE7                <1> 	jmp copycommand
  3713                              <1> donecopy:
  3714 0000310E 81EE[5F6E0000]      <1> 	sub esi, commandbuf
  3715 00003114 8935[5B6E0000]      <1> 	mov [currentcommandpos], esi
  3716 0000311A FB                  <1> 	sti
  3717 0000311B E990000000          <1> 	jmp run
  3718                              <1> 
  3719 00003120 E800FFFFFF          <1> input:	call buftxtclear
  3720 00003125 BE[7A1B0000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3721 0000312A BF[7A1D0000]        <1> 	mov edi, buftxtend
  3722 0000312F B00D                <1> stdin:	mov al, 13
  3723 00003131 B307                <1> 	mov bl, 7
  3724 00003133 B404                <1> 	mov ah, 4
  3725 00003135 CD30                <1> 	int 30h
  3726 00003137 C3                  <1> 	ret
  3727                              <1> 
  3728                              <1> replacevariable:
  3729 00003138 56                  <1> 	push esi
  3730 00003139 81EE[7A1B0000]      <1> 	sub esi, buftxt
  3731 0000313F 89F7                <1> 	mov edi, esi
  3732 00003141 81C6[7A1B0000]      <1> 	add esi, buftxt
  3733 00003147 47                  <1> 	inc edi
  3734 00003148 BB[6F150000]        <1> 	mov ebx, variables
  3735 0000314D E87D070000          <1> 	call nxtvrech
  3736 00003152 89F7                <1> 	mov edi, esi
  3737 00003154 31DB                <1> 	xor ebx, ebx
  3738 00003156 4E                  <1> 	dec esi
  3739                              <1> findvarname:
  3740 00003157 4E                  <1> 	dec esi
  3741 00003158 8A06                <1> 	mov al, [esi]
  3742 0000315A 43                  <1> 	inc ebx
  3743 0000315B 3C04                <1> 	cmp al, 4
  3744 0000315D 75F8                <1> 	jne findvarname
  3745 0000315F 5E                  <1> 	pop esi
  3746                              <1> replacevarloop:
  3747 00003160 8A07                <1> 	mov al, [edi]
  3748 00003162 81FB00000000        <1> 	cmp ebx, 0
  3749 00003168 0F841E000000        <1> 	je near expandbuftxt
  3750 0000316E 3C00                <1> 	cmp al, 0
  3751 00003170 0F8407000000        <1> 	je near compressbuftxt
  3752 00003176 8806                <1> 	mov [esi], al
  3753 00003178 4B                  <1> 	dec ebx
  3754 00003179 46                  <1> 	inc esi
  3755 0000317A 47                  <1> 	inc edi
  3756 0000317B EBE3                <1> 	jmp replacevarloop
  3757                              <1> compressbuftxt:	
  3758 0000317D 8A041E              <1> 	mov al, [esi + ebx]
  3759 00003180 8806                <1> 	mov [esi], al
  3760 00003182 46                  <1> 	inc esi
  3761 00003183 3C00                <1> 	cmp al, 0
  3762 00003185 75F6                <1> 	jne compressbuftxt
  3763 00003187 E933000000          <1> 	jmp fixvariables
  3764                              <1> expandbuftxt:
  3765 0000318C 89F1                <1> 	mov ecx, esi
  3766 0000318E 8A26                <1> 	mov ah, [esi]
  3767                              <1> expandbuftxtlp:
  3768 00003190 8A1E                <1> 	mov bl, [esi]
  3769 00003192 46                  <1> 	inc esi
  3770 00003193 8A3E                <1> 	mov bh, [esi]
  3771 00003195 8826                <1> 	mov [esi], ah
  3772 00003197 88FC                <1> 	mov ah, bh
  3773 00003199 80FB00              <1> 	cmp bl, 0
  3774 0000319C 75F2                <1> 	jne expandbuftxtlp
  3775 0000319E 89CE                <1> 	mov esi, ecx
  3776 000031A0 8806                <1> 	mov [esi], al
  3777 000031A2 47                  <1> 	inc edi
  3778 000031A3 8A07                <1> 	mov al, [edi]
  3779 000031A5 3C00                <1> 	cmp al, 0
  3780 000031A7 0F8412000000        <1> 	je near fixvariables
  3781 000031AD 46                  <1> 	inc esi
  3782 000031AE EBDC                <1> 	jmp expandbuftxt
  3783                              <1> 	
  3784                              <1> 	
  3785                              <1> run:	
  3786 000031B0 BE[9D720000]        <1> 	mov esi, line		;;I should add some sort of command line parsing before it is processed to replace variables with stuff-o I did!
  3787 000031B5 E841F8FFFF          <1> 	call print
  3788                              <1> progtest2:
  3789 000031BA BE[7A1B0000]        <1> 	mov esi, buftxt
  3790                              <1> fixvariables:
  3791 000031BF 46                  <1> 	inc esi
  3792 000031C0 8A06                <1> 	mov al, [esi]
  3793 000031C2 3C24                <1> 	cmp al, '$'
  3794 000031C4 0F846EFFFFFF        <1> 	je near replacevariable
  3795 000031CA 3C00                <1> 	cmp al, 0
  3796 000031CC 75F1                <1> 	jne fixvariables
  3797                              <1> 
  3798 000031CE 803D[C2370000]00    <1> 	cmp byte [indexdone], 0
  3799 000031D5 7505                <1> 	jne progtest
  3800 000031D7 E851050000          <1> 	call indexfiles
  3801                              <1> progtest:
  3802 000031DC BE[7A1B0000]        <1> 	mov esi, buftxt
  3803 000031E1 BB[00130000]        <1> 	mov ebx, fileindex
  3804 000031E6 668B03              <1> prgnxt:	mov ax, [ebx]
  3805 000031E9 B105                <1> 	mov cl, 5
  3806 000031EB B504                <1> 	mov ch, 4
  3807 000031ED 6639C8              <1> 	cmp ax, cx
  3808 000031F0 740B                <1> 	je fndprg
  3809 000031F2 43                  <1> 	inc ebx
  3810 000031F3 81FB[00150000]      <1> 	cmp ebx, fileindexend
  3811 000031F9 7338                <1> 	jae prgnf
  3812 000031FB EBE9                <1> 	jmp prgnxt
  3813 000031FD 81C302000000        <1> fndprg: add ebx, 2
  3814 00003203 BE[7A1B0000]        <1> 	mov esi, buftxt
  3815 00003208 6631C9              <1> 	xor cx, cx
  3816 0000320B E889000000          <1> 	call cndtest
  3817 00003210 3C01                <1> 	cmp al, 1
  3818 00003212 7302                <1> 	jae prggood
  3819 00003214 EBD0                <1> 	jmp prgnxt
  3820 00003216 81FB[00150000]      <1> prggood: cmp ebx, fileindexend
  3821 0000321C 733C                <1> 	jae prgdn
  3822 0000321E 81C303000000        <1> 	add ebx, 3
  3823 00003224 8B3B                <1> 	mov edi, [ebx]
  3824 00003226 C605[6C6B0000]02    <1> 	mov byte [threadson], 2
  3825 0000322D B020                <1> 	mov al, 0x20
  3826 0000322F E620                <1> 	out 0x20, al
  3827                              <1> 	;sti
  3828 00003231 FFE7                <1> 	jmp edi
  3829                              <1> prgnf:	
  3830 00003233 A0[7A1B0000]        <1> 	mov al, [buftxt]
  3831 00003238 3C00                <1> 	cmp al, 0
  3832 0000323A 741E                <1> 	je prgdn
  3833 0000323C BE[64720000]        <1> 	mov esi, notfound1
  3834 00003241 E8B5F7FFFF          <1> 	call print
  3835 00003246 BE[7A1B0000]        <1> 	mov esi, buftxt
  3836 0000324B E8ABF7FFFF          <1> 	call print
  3837 00003250 BE[6E720000]        <1> 	mov esi, notfound2
  3838 00003255 E8A1F7FFFF          <1> 	call print
  3839 0000325A E9F3FDFFFF          <1> prgdn:	jmp nwcmd
  3840                              <1> 
  3841                              <1> 
  3842                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3843 0000325F 30C0                <1> 	xor al, al
  3844 00003261 8A06                <1> retest:	mov al, [esi]
  3845 00003263 8A23                <1> 	mov ah, [ebx]
  3846 00003265 3C00                <1> 	cmp al, 0
  3847 00003267 7408                <1> 	je testtrue
  3848 00003269 38E0                <1> 	cmp al, ah
  3849 0000326B 750C                <1> 	jne testfalse
  3850 0000326D 43                  <1> 	inc ebx
  3851 0000326E 46                  <1> 	inc esi
  3852 0000326F EBF0                <1> 	jmp retest
  3853                              <1> testtrue:
  3854 00003271 80FC00              <1> 	cmp ah, 0
  3855 00003274 7503                <1> 	jne testfalse
  3856 00003276 B001                <1> 	mov al, 1
  3857 00003278 C3                  <1> 	ret
  3858                              <1> testfalse:
  3859 00003279 30C0                <1> 	xor al, al
  3860 0000327B C3                  <1> 	ret
  3861                              <1> 
  3862                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3863 0000327C 30C0                <1> 	xor al, al
  3864                              <1> opretest:
  3865 0000327E 8A06                <1> 	mov al, [esi]
  3866 00003280 8A23                <1> 	mov ah, [ebx]
  3867 00003282 38E0                <1> 	cmp al, ah
  3868 00003284 7510                <1> 	jne optestfalse
  3869 00003286 80FC00              <1> 	cmp ah, 0
  3870 00003289 7404                <1> 	je optesttrue
  3871 0000328B 43                  <1> 	inc ebx
  3872 0000328C 46                  <1> 	inc esi
  3873 0000328D EBEF                <1> 	jmp opretest
  3874                              <1> optesttrue:
  3875 0000328F 3C00                <1> 	cmp al, 0
  3876 00003291 7503                <1> 	jne optestfalse
  3877 00003293 B001                <1> 	mov al, 1
  3878 00003295 C3                  <1> 	ret
  3879                              <1> optestfalse:
  3880 00003296 30C0                <1> 	xor al, al
  3881 00003298 C3                  <1> 	ret
  3882                              <1> 
  3883                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3884 00003299 30C0                <1> 	xor al, al
  3885 0000329B 8A06                <1> cndretest:	mov al, [esi]
  3886 0000329D 8A23                <1> 	mov ah, [ebx]
  3887 0000329F 38CC                <1> 	cmp ah, cl
  3888 000032A1 7408                <1> 	je cndtesttrue
  3889 000032A3 38E0                <1> 	cmp al, ah
  3890 000032A5 750B                <1> 	jne cndtestfalse
  3891 000032A7 43                  <1> 	inc ebx
  3892 000032A8 46                  <1> 	inc esi
  3893 000032A9 EBF0                <1> 	jmp cndretest
  3894                              <1> cndtesttrue:
  3895 000032AB 38C8                <1> 	cmp al, cl
  3896 000032AD 7506                <1> 	jne cndtestalmost
  3897 000032AF B001                <1> 	mov al, 1
  3898 000032B1 C3                  <1> 	ret
  3899                              <1> cndtestfalse:
  3900 000032B2 30C0                <1> 	xor al, al
  3901 000032B4 C3                  <1> 	ret
  3902                              <1> cndtestalmost:
  3903 000032B5 B002                <1> 	mov al, 2
  3904 000032B7 C3                  <1> 	ret
  3905 000032B8 00                  <1> currentdir db 0
  3906 000032B9 BE[00130000]        <1> dir:	mov esi, fileindex
  3907 000032BE 8A06                <1> 	dirnxt:	mov al, [esi]
  3908 000032C0 30E4                <1> 		xor ah, ah
  3909 000032C2 3C05                <1> 		cmp al, 5
  3910 000032C4 744A                <1> 		je dirfnd
  3911 000032C6 3C07                <1> 		cmp al, 7
  3912 000032C8 743C                <1> 		je dirfnd3
  3913 000032CA 3C06                <1> 		cmp al, 6
  3914 000032CC 7438                <1> 		je dirfnd3
  3915 000032CE 46                  <1> 		inc esi
  3916 000032CF 81FE[00150000]      <1> 		cmp esi,  fileindexend
  3917 000032D5 737B                <1> 		jae dirdn
  3918 000032D7 EBE5                <1> 		jmp dirnxt
  3919 000032D9 060400626174636800- <1> 	typetable db 6,4,0,"batch",0,7,4,0,"document",0,10,4,0,"folder",0,5,4,0,"executable",0
  3920 000032E2 070400646F63756D65- <1>
  3921 000032EB 6E74000A0400666F6C- <1>
  3922 000032F4 646572000504006578- <1>
  3923 000032FD 6563757461626C6500  <1>
  3924                              <1> 	dirfnd3:
  3925 00003306 46                  <1> 		inc esi
  3926 00003307 81FE[00150000]      <1> 		cmp esi, fileindexend
  3927 0000330D 76AF                <1> 		jbe dirnxt
  3928 0000330F 4E                  <1> 		dec esi
  3929 00003310 46                  <1> 	dirfnd:	inc esi
  3930 00003311 8A06                <1> 		mov al, [esi]
  3931 00003313 30E4                <1> 		xor ah, ah
  3932 00003315 3C04                <1> 		cmp al, 4
  3933 00003317 740B                <1> 		je dirfnd2
  3934 00003319 46                  <1> 		inc esi
  3935 0000331A 81FE[00150000]      <1> 		cmp esi,  fileindexend
  3936 00003320 7330                <1> 		jae dirdn
  3937 00003322 EB9A                <1> 		jmp dirnxt
  3938 00003324 81C601000000        <1> 	dirfnd2: add esi, 1
  3939 0000332A E8CCF6FFFF          <1> 		call print
  3940 0000332F 8935[61330000]      <1> 		mov [esidir], esi
  3941 00003335 BE[A0720000]        <1> 		mov esi, dirtab
  3942 0000333A E8BCF6FFFF          <1> 		call print
  3943 0000333F 8B35[61330000]      <1> 		mov esi, [esidir]
  3944 00003345 81FE[00150000]      <1> 		cmp esi,  fileindexend
  3945 0000334B 7305                <1> 		jae dirdn
  3946 0000334D E96CFFFFFF          <1> 		jmp dirnxt
  3947 00003352 BE[9D720000]        <1> 	dirdn:	mov esi, line
  3948 00003357 E89FF6FFFF          <1> 			call print
  3949 0000335C E9F1FCFFFF          <1> 			jmp nwcmd
  3950 00003361 00000000            <1> esidir dd 0
  3951                              <1> 
  3952                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3953                              <1> 		                ;ends if array seperator is found backwards after 0
  3954                              <1> 	arnxt:	      
  3955 00003365 88E8                <1> 		mov al, ch
  3956 00003367 88CC                <1> 		mov ah, cl        
  3957 00003369 663906              <1> 		cmp [esi], ax
  3958 0000336C 744D                <1> 		je ardn
  3959 0000336E 66390E              <1> 		cmp [esi], cx
  3960 00003371 7407                <1> 		je arfnd
  3961 00003373 46                  <1> 		inc esi
  3962 00003374 39DE                <1> 		cmp esi, ebx
  3963 00003376 7343                <1> 		jae ardn
  3964 00003378 EBEB                <1> 		jmp arnxt
  3965 0000337A 81C602000000        <1> 	arfnd: add esi, 2
  3966 00003380 891D[BC330000]      <1> 		mov [arbx], ebx
  3967 00003386 890D[C0330000]      <1> 		mov [arcx], ecx
  3968 0000338C E86AF6FFFF          <1> 		call print
  3969 00003391 8935[C2330000]      <1> 		mov [arsi], esi
  3970 00003397 BE[9D720000]        <1> 		mov esi, line
  3971 0000339C E85AF6FFFF          <1> 		call print
  3972 000033A1 8B1D[BC330000]      <1> 		mov ebx, [arbx]
  3973 000033A7 668B0D[C0330000]    <1> 		mov cx, [arcx]
  3974 000033AE 8B35[C2330000]      <1> 		mov esi, [arsi]
  3975 000033B4 46                  <1> 		inc esi
  3976 000033B5 39DE                <1> 		cmp esi, ebx
  3977 000033B7 7302                <1> 		jae ardn
  3978 000033B9 EBAA                <1> 		jmp arnxt
  3979 000033BB C3                  <1> 	ardn:	ret
  3980 000033BC 00000000            <1> arbx:	dw 0,0
  3981 000033C0 0000                <1> arcx:	db 0,0
  3982 000033C2 00000000            <1> arsi:	dw 0,0
  3983                              <1> 
  3984                              <1> clearbuffer:
  3985 000033C6 BE[7A1D0000]        <1> 	mov esi, buf2
  3986 000033CB B030                <1> 	mov al, '0'
  3987 000033CD 81FE[8E1D0000]      <1> clearbuf: cmp esi, numbuf
  3988 000033D3 7305                <1> 	jae doneclearbuff
  3989 000033D5 8806                <1> 	mov [esi], al
  3990 000033D7 46                  <1> 	inc esi
  3991 000033D8 EBF3                <1> 	jmp clearbuf
  3992                              <1> doneclearbuff: 
  3993 000033DA C3                  <1> 		ret
  3994                              <1> 
  3995                              <1> convert:
  3996 000033DB 4E                  <1> 	dec esi
  3997 000033DC 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3998                              <1> cnvrt:
  3999 000033DE 89DE                <1> 	mov esi, ebx
  4000 000033E0 81EE09000000        <1> 	sub esi, 9
  4001 000033E6 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  4002 000033EC 720A                <1> 	jb ten8
  4003 000033EE 81E900CA9A3B        <1> 	sub ecx, 1000000000
  4004 000033F4 FE06                <1> 	inc byte [esi]
  4005 000033F6 EBE6                <1> 	jmp cnvrt
  4006 000033F8 46                  <1> ten8:	inc esi
  4007 000033F9 81F900E1F505        <1> 	cmp ecx, 100000000
  4008 000033FF 720A                <1> 	jb ten7
  4009 00003401 81E900E1F505        <1> 	sub ecx, 100000000
  4010 00003407 FE06                <1> 	inc byte [esi]
  4011 00003409 EBD3                <1> 	jmp cnvrt
  4012 0000340B 46                  <1> ten7:	inc esi
  4013 0000340C 81F980969800        <1> 	cmp ecx, 10000000
  4014 00003412 720A                <1> 	jb ten6
  4015 00003414 81E980969800        <1> 	sub ecx, 10000000
  4016 0000341A FE06                <1> 	inc byte [esi]
  4017 0000341C EBC0                <1> 	jmp cnvrt
  4018 0000341E 46                  <1> ten6:	inc esi
  4019 0000341F 81F940420F00        <1> 	cmp ecx, 1000000
  4020 00003425 720A                <1> 	jb ten5
  4021 00003427 81E940420F00        <1> 	sub ecx, 1000000
  4022 0000342D FE06                <1> 	inc byte [esi]
  4023 0000342F EBAD                <1> 	jmp cnvrt
  4024 00003431 46                  <1> ten5:	inc esi
  4025 00003432 81F9A0860100        <1> 	cmp ecx, 100000
  4026 00003438 720A                <1> 	jb ten4
  4027 0000343A 81E9A0860100        <1> 	sub ecx, 100000
  4028 00003440 FE06                <1> 	inc byte [esi]
  4029 00003442 EB9A                <1> 	jmp cnvrt
  4030 00003444 46                  <1> ten4:	inc esi
  4031 00003445 81F910270000        <1> 	cmp ecx, 10000
  4032 0000344B 720A                <1> 	jb ten3
  4033 0000344D 81E910270000        <1> 	sub ecx, 10000
  4034 00003453 FE06                <1> 	inc byte [esi]
  4035 00003455 EB87                <1> 	jmp cnvrt
  4036 00003457 46                  <1> ten3:	inc esi
  4037 00003458 81F9E8030000        <1> 	cmp ecx, 1000
  4038 0000345E 720D                <1> 	jb ten2
  4039 00003460 81E9E8030000        <1> 	sub ecx, 1000
  4040 00003466 FE06                <1> 	inc byte [esi]
  4041 00003468 E971FFFFFF          <1> 	jmp cnvrt
  4042 0000346D 46                  <1> ten2:	inc esi
  4043 0000346E 81F964000000        <1> 	cmp ecx, 100
  4044 00003474 720D                <1> 	jb ten1
  4045 00003476 81E964000000        <1> 	sub ecx, 100
  4046 0000347C FE06                <1> 	inc byte [esi]
  4047 0000347E E95BFFFFFF          <1> 	jmp cnvrt
  4048 00003483 46                  <1> ten1:	inc esi
  4049 00003484 81F90A000000        <1> 	cmp ecx, 10
  4050 0000348A 720D                <1> 	jb ten0
  4051 0000348C 81E90A000000        <1> 	sub ecx, 10
  4052 00003492 FE06                <1> 	inc byte [esi]
  4053 00003494 E945FFFFFF          <1> 	jmp cnvrt
  4054 00003499 46                  <1> ten0:	inc esi
  4055 0000349A 81F901000000        <1> 	cmp ecx, 1
  4056 000034A0 720D                <1> 	jb tendn
  4057 000034A2 81E901000000        <1> 	sub ecx, 1
  4058 000034A8 FE06                <1> 	inc byte [esi]
  4059 000034AA E92FFFFFFF          <1> 	jmp cnvrt
  4060                              <1> tendn:
  4061 000034AF C3                  <1> 	ret
  4062                              <1> 
  4063                              <1> 	
  4064                              <1> 
  4065 000034B0 00<rept>            <1> hexnumber times 8 db 0
  4066 000034B8 202000              <1> hexnumberend db "  ",0
  4067                              <1> 
  4068                              <1> 
  4069 000034BB 00000000            <1> sibuf dw 0,0
  4070 000034BF 00000000            <1> dibuf dw 0,0
  4071                              <1> 
  4072                              <1> converthex:
  4073                              <1> clearbufferhex:
  4074 000034C3 B030                <1> 	mov al, '0'
  4075 000034C5 8935[BB340000]      <1> 	mov [sibuf], esi
  4076 000034CB 893D[BF340000]      <1> 	mov [dibuf], edi
  4077 000034D1 39FE                <1> clearbufhex: cmp esi, edi
  4078 000034D3 7305                <1> 	jae doneclearbuffhex
  4079 000034D5 8806                <1> 	mov [esi], al
  4080 000034D7 46                  <1> 	inc esi
  4081 000034D8 EBF7                <1> 	jmp clearbufhex
  4082                              <1> doneclearbuffhex:
  4083 000034DA 8B35[BF340000]      <1> 	mov esi, [dibuf]
  4084 000034E0 89CA                <1> 	mov edx, ecx
  4085 000034E2 81FA00000000        <1> 	cmp edx, 0
  4086 000034E8 741F                <1> 	je donenxtephx
  4087                              <1> nxtexphx:	;0x10^x
  4088 000034EA 4E                  <1> 	dec esi
  4089 000034EB 89F7                <1> 	mov edi, esi		;;location of 0x10^x
  4090 000034ED 89D1                <1> 	mov ecx, edx
  4091 000034EF 81E10F000000        <1> 	and ecx, 0xF		;;just this digit
  4092 000034F5 E81C000000          <1> 	call cnvrtexphx		;;get this digit
  4093 000034FA 89FE                <1> 	mov esi, edi
  4094 000034FC C1EA04              <1> 	shr edx, 4		;;next digit
  4095 000034FF 81FA00000000        <1> 	cmp edx, 0
  4096 00003505 7402                <1> 	je donenxtephx
  4097 00003507 EBE1                <1> 	jmp nxtexphx
  4098                              <1> donenxtephx:
  4099 00003509 8B35[BB340000]      <1> 	mov esi, [sibuf]
  4100 0000350F 8B3D[BF340000]      <1> 	mov edi, [dibuf]
  4101 00003515 C3                  <1> 	ret
  4102                              <1> cnvrtexphx:			;;convert this number
  4103 00003516 89F3                <1> 	mov ebx, esi		;place to convert to must be in si, number to convert must be in cx
  4104 00003518 81F900000000        <1> 	cmp ecx, 0
  4105 0000351E 7429                <1> 	je zerohx
  4106 00003520 8A06                <1> cnvrthx:  mov al, [esi]
  4107 00003522 3C39                <1> 	cmp al, '9'
  4108 00003524 741B                <1> 	je lettershx
  4109 00003526 3C46                <1> lttrhxdn: cmp al, 'F'
  4110 00003528 741F                <1> 	je zerohx
  4111 0000352A 8A06                <1> 	mov al, [esi]
  4112 0000352C FEC0                <1> 	inc al
  4113 0000352E 8806                <1> 	mov [esi], al
  4114 00003530 89DE                <1> 	mov esi, ebx
  4115 00003532 81E901000000        <1> cnvrtlphx: sub ecx, 1
  4116 00003538 81F900000000        <1> 	cmp ecx, 0
  4117 0000353E 75E0                <1> 	jne cnvrthx
  4118 00003540 C3                  <1> 	ret
  4119                              <1> lettershx:
  4120 00003541 B041                <1> 	mov al, 'A'
  4121 00003543 2C01                <1> 	sub al, 1
  4122 00003545 8806                <1> 	mov [esi], al
  4123 00003547 EBDD                <1> 	jmp lttrhxdn
  4124 00003549 B030                <1> zerohx:	mov al, '0'
  4125 0000354B 8806                <1> 	mov [esi], al
  4126 0000354D 4E                  <1> 	dec esi
  4127 0000354E 8A06                <1> 	mov al, [esi]
  4128 00003550 3C46                <1> 	cmp al, 'F'
  4129 00003552 74F5                <1> 	je zerohx
  4130 00003554 41                  <1> 	inc ecx
  4131 00003555 EBDB                <1> 	jmp cnvrtlphx
  4132 00003557 00                  <1> smallhex db 0
  4133 00003558 01                  <1> firsthexshown db 1
  4134                              <1> showhexsmall:
  4135 00003559 C605[57350000]01    <1> 	mov byte [smallhex], 1
  4136 00003560 E808000000          <1> 	call showhex
  4137 00003565 C605[57350000]00    <1> 	mov byte [smallhex], 0
  4138 0000356C C3                  <1> 	ret
  4139                              <1> showhex:
  4140 0000356D 60                  <1> 	pusha
  4141 0000356E BE[B0340000]        <1> 	mov esi, hexnumber
  4142 00003573 BF[B8340000]        <1> 	mov edi, hexnumberend
  4143 00003578 E846FFFFFF          <1> 	call converthex
  4144 0000357D 803D[58350000]01    <1> 	cmp byte [firsthexshown], 1
  4145 00003584 7503                <1> 	jne showthathex
  4146 00003586 6631D2              <1> 	xor dx, dx
  4147                              <1> showthathex:
  4148 00003589 803D[58350000]03    <1> 	cmp byte [firsthexshown], 3
  4149 00003590 750A                <1> 	jne nonewhexline
  4150 00003592 BE[9D720000]        <1> 	mov esi, line
  4151 00003597 E85FF4FFFF          <1> 	call print
  4152                              <1> nonewhexline:
  4153 0000359C 803D[58350000]04    <1> 	cmp byte [firsthexshown], 4
  4154 000035A3 7527                <1> 	jne notabfixhex
  4155 000035A5 B1A0                <1> 	mov cl, 160
  4156 000035A7 28D1                <1> 	sub cl, dl
  4157 000035A9 C0E905              <1> 	shr cl, 5
  4158 000035AC C0E105              <1> 	shl cl, 5
  4159 000035AF 80F900              <1> 	cmp cl, 0
  4160 000035B2 750F                <1> 	jne nonewlinetabfixhex
  4161 000035B4 BE[9D720000]        <1> 	mov esi, line
  4162 000035B9 E83DF4FFFF          <1> 	call print
  4163 000035BE E909000000          <1> 	jmp notabfixhex
  4164                              <1> nonewlinetabfixhex:
  4165 000035C3 80C20F              <1> 	add dl, 15
  4166 000035C6 C0EA04              <1> 	shr dl, 4
  4167 000035C9 C0E204              <1> 	shl dl, 4
  4168                              <1> notabfixhex:
  4169 000035CC BE[B0340000]        <1> 	mov esi, hexnumber
  4170 000035D1 803D[57350000]01    <1> 	cmp byte [smallhex],1
  4171 000035D8 7506                <1> 	jne printnosmallhex
  4172 000035DA 81C606000000        <1> 	add esi, 6
  4173                              <1> printnosmallhex:
  4174 000035E0 E816F4FFFF          <1> 	call print
  4175 000035E5 803D[58350000]02    <1> 	cmp byte [firsthexshown], 2
  4176 000035EC 750A                <1> 	jne hexshown
  4177 000035EE BE[9D720000]        <1> 	mov esi, line
  4178 000035F3 E803F4FFFF          <1> 	call print
  4179                              <1> hexshown:
  4180 000035F8 C605[58350000]00    <1> 	mov byte [firsthexshown], 0
  4181 000035FF 61                  <1> 	popa
  4182 00003600 C3                  <1> 	ret
  4183                              <1> 
  4184                              <1> 
  4185 00003601 303030303030303030- <1> decnumber db "00000000000000"
  4186 0000360A 3030303030          <1>
  4187 0000360F 2000                <1> decnumberend: db " ",0
  4188                              <1> 
  4189                              <1> showdec: ;;same as showhex, just uses decimal conversion
  4190 00003611 60                  <1> 	pusha
  4191 00003612 BF[01360000]        <1> 	mov edi, decnumber
  4192 00003617 BE[0F360000]        <1> 	mov esi, decnumberend
  4193                              <1> cleardecbuf:
  4194 0000361C C60730              <1> 	mov byte [edi], '0'
  4195 0000361F 47                  <1> 	inc edi
  4196 00003620 39F7                <1> 	cmp edi, esi
  4197 00003622 72F8                <1> 	jb cleardecbuf
  4198 00003624 BF[01360000]        <1> 	mov edi, decnumber
  4199 00003629 E8ADFDFFFF          <1> 	call convert
  4200 0000362E 803D[58350000]01    <1> 	cmp byte [firsthexshown], 1
  4201 00003635 7503                <1> 	jne showthatdec
  4202 00003637 6631D2              <1> 	xor dx, dx
  4203                              <1> showthatdec:
  4204 0000363A 803D[58350000]03    <1> 	cmp byte [firsthexshown], 3
  4205 00003641 750A                <1> 	jne nonewdecline
  4206 00003643 BE[9D720000]        <1> 	mov esi, line
  4207 00003648 E8AEF3FFFF          <1> 	call print
  4208                              <1> nonewdecline:
  4209 0000364D 803D[58350000]04    <1> 	cmp byte [firsthexshown], 4
  4210 00003654 7527                <1> 	jne notabfixdec
  4211 00003656 B1A0                <1> 	mov cl, 160
  4212 00003658 28D1                <1> 	sub cl, dl
  4213 0000365A C0E905              <1> 	shr cl, 5
  4214 0000365D C0E105              <1> 	shl cl, 5
  4215 00003660 80F900              <1> 	cmp cl, 0
  4216 00003663 750F                <1> 	jne nonewlinetabfixdec
  4217 00003665 BE[9D720000]        <1> 	mov esi, line
  4218 0000366A E88CF3FFFF          <1> 	call print
  4219 0000366F E909000000          <1> 	jmp notabfixdec
  4220                              <1> nonewlinetabfixdec:
  4221 00003674 80C20F              <1> 	add dl, 15
  4222 00003677 C0EA04              <1> 	shr dl, 4
  4223 0000367A C0E204              <1> 	shl dl, 4
  4224                              <1> notabfixdec:
  4225 0000367D BE[01360000]        <1> 	mov esi, decnumber
  4226 00003682 4E                  <1> 	dec esi
  4227                              <1> sifind:
  4228 00003683 46                  <1> 	inc esi
  4229 00003684 803E30              <1> 	cmp byte [esi], '0'
  4230 00003687 74FA                <1> 	je sifind
  4231 00003689 E86DF3FFFF          <1> 	call print
  4232 0000368E 803D[58350000]02    <1> 	cmp byte [firsthexshown], 2
  4233 00003695 750A                <1> 	jne decshown
  4234 00003697 BE[9D720000]        <1> 	mov esi, line
  4235 0000369C E85AF3FFFF          <1> 	call print
  4236                              <1> decshown:
  4237 000036A1 C605[58350000]00    <1> 	mov byte [firsthexshown], 0
  4238 000036A8 61                  <1> 	popa
  4239 000036A9 C3                  <1> 	ret
  4240                              <1> 	
  4241                              <1> cnvrttxt: 
  4242 000036AA 31C9                <1> 	xor ecx, ecx
  4243 000036AC 31C0                <1> 	xor eax, eax
  4244 000036AE 31D2                <1> 	xor edx, edx
  4245 000036B0 31DB                <1> 	xor ebx, ebx
  4246 000036B2 4E                  <1> 	dec esi
  4247                              <1> cnvrtlptxt:
  4248 000036B3 46                  <1> 	inc esi
  4249 000036B4 8A06                <1> 	mov al, [esi]
  4250 000036B6 3C00                <1> 	cmp al, 0
  4251 000036B8 75F9                <1> 	jne cnvrtlptxt
  4252 000036BA 4E                  <1> 	dec esi
  4253 000036BB 8A06                <1> 	mov al, [esi]
  4254 000036BD 3C2E                <1> 	cmp al, '.'
  4255 000036BF 7503                <1> 	jne nocnvrtdot
  4256 000036C1 46                  <1> 	inc esi
  4257 000036C2 EBEF                <1> 	jmp cnvrtlptxt
  4258                              <1> nocnvrtdot:
  4259 000036C4 3C30                <1> 	cmp al, '0'
  4260 000036C6 7504                <1> 	jne txtlp
  4261 000036C8 39FE                <1> zerotest: cmp esi, edi
  4262 000036CA 7458                <1> 	je donecnvrt
  4263                              <1> txtlp:	
  4264 000036CC 31C0                <1> 	xor eax, eax
  4265 000036CE 8A06                <1> 	mov al, [esi]
  4266 000036D0 3C3D                <1> 	cmp al, '='
  4267 000036D2 7450                <1> 	je donecnvrt
  4268 000036D4 3C30                <1> 	cmp al, 48
  4269 000036D6 724C                <1> 	jb donecnvrt
  4270 000036D8 3C23                <1> 	cmp al, '#'
  4271 000036DA 7448                <1> 	je donecnvrt
  4272 000036DC 39FE                <1> 	cmp esi, edi
  4273 000036DE 7244                <1> 	jb donecnvrt
  4274 000036E0 81F900000000        <1> 	cmp ecx, 0
  4275 000036E6 7708                <1> 	ja exp
  4276 000036E8 2C30                <1> noexp:	sub al, 48
  4277 000036EA 01C2                <1> 	add edx, eax
  4278 000036EC 4E                  <1> 	dec esi
  4279 000036ED 41                  <1> 	inc ecx
  4280 000036EE EBDC                <1> 	jmp txtlp
  4281 000036F0 81F900000000        <1> exp:	cmp ecx, 0
  4282 000036F6 74F0                <1> 	je noexp
  4283 000036F8 2C30                <1> 	sub al, 48
  4284 000036FA 51                  <1> 	push ecx
  4285 000036FB 89C3                <1> expmul:	mov ebx, eax
  4286 000036FD 01D8                <1> 	add eax, ebx
  4287 000036FF 01D8                <1> 	add eax, ebx
  4288 00003701 01D8                <1> 	add eax, ebx
  4289 00003703 01D8                <1> 	add eax, ebx
  4290 00003705 01D8                <1> 	add eax, ebx
  4291 00003707 01D8                <1> 	add eax, ebx
  4292 00003709 01D8                <1> 	add eax, ebx
  4293 0000370B 01D8                <1> 	add eax, ebx
  4294 0000370D 01D8                <1> 	add eax, ebx
  4295 0000370F 81E901000000        <1> 	sub ecx, 1
  4296 00003715 81F900000000        <1> 	cmp ecx, 0
  4297 0000371B 77DE                <1> 	ja expmul
  4298 0000371D 01C2                <1> 	add edx, eax
  4299 0000371F 59                  <1> 	pop ecx
  4300 00003720 4E                  <1> 	dec esi
  4301 00003721 41                  <1> 	inc ecx
  4302 00003722 EBA8                <1> 	jmp txtlp
  4303 00003724 89D1                <1> donecnvrt: mov ecx, edx
  4304 00003726 C3                  <1> 	ret
  4305                                      %include 'source/builtinprogs.asm'
  4306 00003727 050406040704        <1> filetypes db 5,4,6,4,7,4
  4307                              <1> progstart:		;programs start here
  4308                              <1> ;db 5,4,"index",0
  4309                              <1> ;	call indexfiles
  4310                              <1> ;	jmp nwcmd
  4311                              <1> 
  4312                              <1> 
  4313                              <1> indexfiles:
  4314 0000372D BE[2D370000]        <1> 	mov esi, progstart
  4315 00003732 BB[00130000]        <1> 	mov ebx, fileindex
  4316 00003737 BF[2D370000]        <1> 	mov edi, progstart
  4317 0000373C 81EF02000000        <1> 	sub edi, 2
  4318                              <1> indexloop:
  4319 00003742 668B0E              <1> 	mov cx, [esi]
  4320                              <1> 	indexloop2:
  4321 00003745 663B0F              <1> 		cmp cx, [edi]
  4322 00003748 7424                <1> 		je indexloop2done
  4323 0000374A 81EF02000000        <1> 		sub edi, 2
  4324 00003750 81FF[27370000]      <1> 		cmp edi, filetypes
  4325 00003756 73ED                <1> 		jae indexloop2
  4326 00003758 BF[2D370000]        <1> 	mov edi, progstart
  4327 0000375D 81EF02000000        <1> 	sub edi, 2
  4328 00003763 46                  <1> 	inc esi
  4329 00003764 81FE[68470000]      <1> 	cmp esi, batchprogend
  4330 0000376A 734E                <1> 	jae indexloopdone
  4331 0000376C EBD4                <1> 	jmp indexloop
  4332                              <1> indexloop2done:
  4333 0000376E 66890B              <1> 	mov [ebx], cx
  4334 00003771 81C302000000        <1> 	add ebx, 2
  4335 00003777 81C602000000        <1> 	add esi, 2
  4336                              <1> 	nameindex:
  4337 0000377D 8A0E                <1> 		mov cl, [esi]
  4338 0000377F 80F900              <1> 		cmp cl, 0
  4339 00003782 7406                <1> 		je nameindexdone
  4340 00003784 880B                <1> 		mov [ebx], cl
  4341 00003786 46                  <1> 		inc esi
  4342 00003787 43                  <1> 		inc ebx
  4343 00003788 EBF3                <1> 		jmp nameindex
  4344                              <1> 	nameindexdone:
  4345 0000378A 43                  <1> 		inc ebx
  4346 0000378B 66C7030000          <1> 		mov word [ebx], 0
  4347 00003790 81C302000000        <1> 		add ebx, 2
  4348 00003796 46                  <1> 		inc esi
  4349 00003797 8933                <1> 		mov [ebx], esi
  4350 00003799 81C304000000        <1> 		add ebx, 4
  4351 0000379F 66C7030000          <1> 		mov word [ebx], 0
  4352 000037A4 81C302000000        <1> 		add ebx, 2
  4353 000037AA 81FB[00150000]      <1> 		cmp ebx, fileindexend
  4354 000037B0 7308                <1> 		jae indexloopdone
  4355 000037B2 81C601000000        <1> 		add esi, 1
  4356 000037B8 EB88                <1> 		jmp indexloop
  4357 000037BA C605[C2370000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4358 000037C1 C3                  <1> 		ret
  4359                              <1> 
  4360 000037C2 00                  <1> indexdone db 0
  4361                              <1> 
  4362                              <1> 
  4363                              <1> ;db 5,4,"showindex",0
  4364                              <1> ;	mov esi, fileindex
  4365                              <1> ;	mov ebx, fileindexend
  4366                              <1> ;	mov cl, 5
  4367                              <1> ;	mov ch, 4
  4368                              <1> ;	call array
  4369                              <1> ;	mov esi, fileindex
  4370                              <1> ;	mov ebx, fileindexend
  4371                              <1> ;	mov cl, 6
  4372                              <1> ;	mov ch, 4
  4373                              <1> ;	call array
  4374                              <1> ;	mov esi, fileindex
  4375                              <1> ;	mov ebx, fileindexend
  4376                              <1> ;	mov cl, 7
  4377                              <1> ;	mov ch, 4
  4378                              <1> ;	call array
  4379                              <1> ;	jmp nwcmd
  4380                              <1> 
  4381 000037C3 05046C7300          <1> db 5,4,"ls",0
  4382 000037C8 BE[2D370000]        <1> 	lscmd:	mov esi, progstart
  4383 000037CD BB[68470000]        <1> 		mov ebx, progend
  4384 000037D2 E9E2FAFFFF          <1> 		jmp dir
  4385                              <1> 		
  4386 000037D7 05046469736B00      <1> db 5,4,"disk",0
  4387 000037DE 31C9                <1> 		xor ecx, ecx
  4388 000037E0 8A0D[81010000]      <1> 		mov cl, [DriveNumber]
  4389 000037E6 C605[58350000]00    <1> 		mov byte [firsthexshown], 0
  4390 000037ED E87BFDFFFF          <1> 		call showhex
  4391 000037F2 BE[9D720000]        <1> 		mov esi, line
  4392 000037F7 E8FFF1FFFF          <1> 		call print
  4393 000037FC BE[8B710000]        <1> 		mov esi, diskfileindex
  4394                              <1> 	diskindexdir:
  4395 00003801 E8F5F1FFFF          <1> 		call print
  4396 00003806 56                  <1> 		push esi
  4397 00003807 BE[34380000]        <1> 		mov esi, disktab
  4398 0000380C E8EAF1FFFF          <1> 		call print
  4399 00003811 5E                  <1> 		pop esi
  4400 00003812 8B4E05              <1> 		mov ecx, [esi + 5]
  4401 00003815 C605[58350000]02    <1> 		mov byte [firsthexshown], 2
  4402 0000381C E8F0FDFFFF          <1> 		call showdec
  4403 00003821 81C609000000        <1> 		add esi, 9
  4404 00003827 81FE[5F720000]      <1> 		cmp esi, enddiskfileindex
  4405 0000382D 72D2                <1> 		jb diskindexdir
  4406 0000382F E91EF8FFFF          <1> 		jmp nwcmd
  4407                              <1> 		
  4408 00003834 0D09090900          <1> 		disktab db 13,9,9,9,0
  4409                              <1> 
  4410 00003839 0504636C65617200    <1> db 5,4,"clear",0
  4411 00003841 E8D2F4FFFF          <1> 	cls:	call clear
  4412 00003846 E907F8FFFF          <1> 		jmp nwcmd
  4413                              <1> 		
  4414 0000384B 05047761697400      <1> db 5,4,"wait",0
  4415 00003852 30C0                <1> 		xor al, al
  4416 00003854 E850F1FFFF          <1> 		call int302
  4417 00003859 E9F4F7FFFF          <1> 		jmp nwcmd
  4418                              <1> 
  4419 0000385E 05046563686F00      <1> db 5,4,"echo",0
  4420 00003865 BE[7A1B0000]        <1> 	echo:	mov esi, buftxt
  4421 0000386A 81C605000000        <1> 		add esi, 5
  4422 00003870 8A06                <1> 		mov al, [esi]
  4423                              <1> 		;cmp al, '$'
  4424                              <1> 		;je echovr		;;now unnecessary
  4425 00003872 E884F1FFFF          <1> 		call print
  4426 00003877 BE[9D720000]        <1> 		mov esi, line
  4427 0000387C E87AF1FFFF          <1> 		call print
  4428 00003881 E9CCF7FFFF          <1> 		jmp nwcmd
  4429 00003886 BB[6F150000]        <1> 	echovr:	mov ebx, variables
  4430 0000388B BF06000000          <1> 		mov edi, 6
  4431 00003890 E83A000000          <1> 		call nxtvrech
  4432 00003895 E952000000          <1> 		jmp prntvr2
  4433 0000389A B13D                <1> 	echvar:	mov cl, '='
  4434 0000389C 43                  <1> 		inc ebx
  4435 0000389D 8A03                <1> 		mov al, [ebx]
  4436 0000389F 3C00                <1> 		cmp al, 0
  4437 000038A1 742C                <1> 		je nxtvrech
  4438 000038A3 3C3D                <1> 		cmp al, '='
  4439 000038A5 7420                <1> 		je nxtvrechb1
  4440 000038A7 BE[7A1B0000]        <1> 		mov esi, buftxt
  4441 000038AC 01FE                <1> 		add esi, edi
  4442 000038AE E8E6F9FFFF          <1> 		call cndtest
  4443 000038B3 3C02                <1> 		cmp al, 2
  4444 000038B5 7431                <1> 		je prntvr
  4445 000038B7 3C01                <1> 		cmp al, 1
  4446 000038B9 742D                <1> 		je prntvr
  4447 000038BB BE[7A1B0000]        <1> 		mov esi, buftxt
  4448 000038C0 01FE                <1> 		add esi, edi
  4449 000038C2 E908000000          <1> 		jmp nxtvrech
  4450                              <1> 	nxtvrechb1:
  4451 000038C7 81EB02000000        <1> 		sub ebx, 2
  4452 000038CD EBCB                <1> 		jmp echvar
  4453 000038CF 8A03                <1> 	nxtvrech: mov al, [ebx]
  4454 000038D1 3C05                <1> 		cmp al, 5
  4455 000038D3 740A                <1> 		je nxtvrec2
  4456 000038D5 43                  <1> 		inc ebx
  4457 000038D6 81FB[6F1A0000]      <1> 		cmp ebx, varend
  4458 000038DC 72F1                <1> 		jb nxtvrech
  4459 000038DE C3                  <1> 		ret
  4460 000038DF 43                  <1> 	nxtvrec2: inc ebx
  4461 000038E0 8A03                <1> 		mov al, [ebx]
  4462 000038E2 3C04                <1> 		cmp al, 4
  4463 000038E4 74B4                <1> 		je echvar
  4464 000038E6 EBE7                <1> 		jmp nxtvrech
  4465 000038E8 43                  <1> 	prntvr: inc ebx
  4466 000038E9 89DE                <1> 		mov esi, ebx
  4467 000038EB C3                  <1> 		ret
  4468 000038EC E80AF1FFFF          <1> 	prntvr2: call print
  4469 000038F1 BE[9D720000]        <1> 		mov esi, line
  4470 000038F6 E800F1FFFF          <1> 		call print
  4471 000038FB E952F7FFFF          <1> 		jmp nwcmd
  4472                              <1> 		
  4473                              <1> 
  4474 00003900 05042300            <1> db 5,4,"#",0
  4475                              <1> 	num:	
  4476 00003904 E8BDFAFFFF          <1> 		call clearbuffer
  4477 00003909 C605[863B0000]00    <1> 		mov byte [decimal], 0
  4478 00003910 C605[873B0000]00    <1> 		mov byte [decimal2], 0
  4479 00003917 BE[7A1B0000]        <1> 		mov esi, buftxt
  4480 0000391C 31C0                <1> 		xor eax, eax
  4481 0000391E 31C9                <1> 		xor ecx, ecx
  4482 00003920 31DB                <1> 		xor ebx, ebx
  4483 00003922 8A06                <1> 	num2:	mov al, [esi]
  4484 00003924 3C2B                <1> 		cmp al, '+'
  4485 00003926 741B                <1> 		je operatorfound
  4486 00003928 3C2D                <1> 		cmp al, '-'
  4487 0000392A 7417                <1> 		je operatorfound
  4488 0000392C 3C2A                <1> 		cmp al, '*'
  4489 0000392E 7413                <1> 		je operatorfound
  4490 00003930 3C2F                <1> 		cmp al, '/'
  4491 00003932 740F                <1> 		je operatorfound
  4492 00003934 3C5E                <1> 		cmp al, '^'
  4493 00003936 740B                <1> 		je operatorfound
  4494 00003938 46                  <1> 		inc esi
  4495 00003939 3C00                <1> 		cmp al, 0
  4496 0000393B 0F8411F7FFFF        <1> 		je near nwcmd
  4497 00003941 EBDF                <1> 		jmp num2
  4498 00003943 50                  <1> 	operatorfound: push eax
  4499 00003944 30E4                <1> 		xor ah, ah
  4500 00003946 8826                <1> 		mov [esi], ah
  4501 00003948 89F7                <1> 		mov edi, esi
  4502 0000394A 46                  <1> 		inc esi
  4503 0000394B 8A06                <1> 		mov al, [esi]
  4504                              <1> 		;cmp al, '$'
  4505                              <1> 		;je near varnum1	;;unnecessary
  4506 0000394D 3C25                <1> 		cmp al, '%'
  4507 0000394F 0F8461000000        <1> 		je near resultnum1
  4508                              <1> 	varnum2: 
  4509 00003955 57                  <1> 		push edi
  4510 00003956 E8A3000000          <1> 		call checkdecimal
  4511 0000395B 5F                  <1> 		pop edi
  4512 0000395C E849FDFFFF          <1> 		call cnvrttxt
  4513                              <1> 	vrnm2:
  4514 00003961 89CB                <1> 		mov ebx, ecx
  4515 00003963 53                  <1> 		push ebx
  4516 00003964 E85DFAFFFF          <1> 		call clearbuffer
  4517 00003969 BE[7A1B0000]        <1> 		mov esi, buftxt
  4518 0000396E 89F7                <1> 		mov edi, esi
  4519 00003970 46                  <1> 		inc esi
  4520 00003971 8A06                <1> 		mov al, [esi]
  4521                              <1> 		;cmp al, '$'
  4522                              <1> 		;je near varnum3	;;unnecessary
  4523 00003973 3C25                <1> 		cmp al, '%'
  4524 00003975 0F844F000000        <1> 		je near resultnum2
  4525                              <1> 	varnum4: 
  4526 0000397B 57                  <1> 		push edi
  4527 0000397C E869000000          <1> 		call checkdecimal2
  4528 00003981 5F                  <1> 		pop edi
  4529 00003982 E823FDFFFF          <1> 		call cnvrttxt
  4530                              <1> 	vrnm4:
  4531 00003987 5B                  <1> 		pop ebx
  4532 00003988 58                  <1> 		pop eax
  4533 00003989 3C2B                <1> 		cmp al, '+'
  4534 0000398B 0F849B000000        <1> 		je near plusnum
  4535 00003991 3C2D                <1> 		cmp al, '-'
  4536 00003993 0F849F000000        <1> 		je near subnum
  4537 00003999 3C2A                <1> 		cmp al, '*'
  4538 0000399B 0F84A3000000        <1> 		je near mulnum
  4539 000039A1 3C2F                <1> 		cmp al, '/'
  4540 000039A3 0F84B1000000        <1> 		je near divnum
  4541 000039A9 3C5E                <1> 		cmp al, '^'
  4542 000039AB 0F84CC000000        <1> 		je near expnum
  4543 000039B1 E99CF6FFFF          <1> 		jmp nwcmd
  4544                              <1> 	resultnum1:
  4545 000039B6 8A0D[883B0000]      <1> 		mov cl, [decimalresult]
  4546 000039BC 880D[863B0000]      <1> 		mov [decimal], cl
  4547 000039C2 8B0D[893B0000]      <1> 		mov ecx, [result]
  4548 000039C8 EB97                <1> 		jmp vrnm2
  4549                              <1> 	resultnum2:
  4550 000039CA 8A0D[863B0000]      <1> 		mov cl, [decimal]
  4551 000039D0 880D[873B0000]      <1> 		mov [decimal2], cl
  4552 000039D6 8A0D[883B0000]      <1> 		mov cl, [decimalresult]
  4553 000039DC 880D[863B0000]      <1> 		mov [decimal], cl
  4554 000039E2 8B0D[893B0000]      <1> 		mov ecx, [result]
  4555 000039E8 EB9D                <1> 		jmp vrnm4
  4556                              <1> ;	varnum1: sub esi, buftxt
  4557                              <1> ;		mov edi, esi
  4558                              <1> ;		add esi, buftxt
  4559                              <1> ;		inc edi
  4560                              <1> ;		mov ebx, variables
  4561                              <1> ;		call nxtvrech
  4562                              <1> ;		mov edi, esi
  4563                              <1> ;		dec edi
  4564                              <1> ;		jmp varnum2
  4565                              <1> ;	varnum3: sub esi, buftxt
  4566                              <1> ;		mov edi, esi
  4567                              <1> ;		add esi, buftxt
  4568                              <1> ;		inc edi
  4569                              <1> ;		mov ebx, variables
  4570                              <1> ;		call nxtvrech
  4571                              <1> ;		mov edi, esi
  4572                              <1> ;		dec edi
  4573                              <1> ;		jmp varnum4
  4574                              <1> 	checkdecimal2:
  4575 000039EA 8A25[863B0000]      <1> 		mov ah, [decimal]
  4576 000039F0 8825[873B0000]      <1> 		mov [decimal2], ah
  4577 000039F6 30E4                <1> 		xor ah, ah
  4578 000039F8 8825[863B0000]      <1> 		mov [decimal], ah
  4579                              <1> 	checkdecimal:
  4580 000039FE 89F7                <1> 		mov edi, esi
  4581                              <1> 	chkdec1:
  4582 00003A00 8A07                <1> 		mov al, [edi]
  4583 00003A02 3C2E                <1> 		cmp al, '.'
  4584 00003A04 0F840B000000        <1> 		je near fnddec
  4585 00003A0A 3C00                <1> 		cmp al, 0
  4586 00003A0C 0F8419000000        <1> 		je near nodecimal
  4587 00003A12 47                  <1> 		inc edi
  4588 00003A13 EBEB                <1> 		jmp chkdec1
  4589                              <1> 	fnddec:
  4590 00003A15 8A4701              <1> 		mov al, [edi + 1]
  4591 00003A18 8807                <1> 		mov [edi], al
  4592 00003A1A 3C00                <1> 		cmp al, 0
  4593 00003A1C 0F8409000000        <1> 		je near nodecimal
  4594 00003A22 FE05[863B0000]      <1> 		inc byte [decimal]
  4595 00003A28 47                  <1> 		inc edi
  4596 00003A29 EBEA                <1> 		jmp fnddec
  4597                              <1> 	nodecimal:
  4598 00003A2B C3                  <1> 		ret
  4599                              <1> 	plusnum:
  4600 00003A2C E813010000          <1> 		call decaddfix
  4601 00003A31 01D9                <1> 		add ecx, ebx
  4602 00003A33 E988000000          <1> 		jmp retnum
  4603                              <1> 	subnum:
  4604 00003A38 E807010000          <1> 		call decaddfix
  4605 00003A3D 29D9                <1> 		sub ecx, ebx
  4606 00003A3F E97C000000          <1> 		jmp retnum
  4607                              <1> 	mulnum:
  4608 00003A44 A0[873B0000]        <1> 		mov al, [decimal2]
  4609 00003A49 0005[863B0000]      <1> 		add [decimal], al
  4610 00003A4F 89C8                <1> 		mov eax, ecx
  4611 00003A51 F7E3                <1> 		mul ebx
  4612 00003A53 89C1                <1> 		mov ecx, eax
  4613 00003A55 E966000000          <1> 		jmp retnum
  4614                              <1> 	divnum:
  4615 00003A5A E8E5000000          <1> 		call decaddfix
  4616 00003A5F 30C0                <1> 		xor al, al
  4617 00003A61 A2[863B0000]        <1> 		mov [decimal], al
  4618 00003A66 6689C8              <1> 		mov ax, cx
  4619 00003A69 80FB00              <1> 		cmp bl, 0
  4620 00003A6C 0F844E000000        <1> 		je near retnum
  4621 00003A72 F6F3                <1> 		div bl
  4622 00003A74 31C9                <1> 		xor ecx, ecx
  4623 00003A76 88C1                <1> 		mov cl, al
  4624 00003A78 E943000000          <1> 		jmp retnum
  4625                              <1> 	expnum:
  4626 00003A7D 8A15[863B0000]      <1> 		mov dl, [decimal]
  4627 00003A83 8815[873B0000]      <1> 		mov [decimal2], dl
  4628 00003A89 31D2                <1> 		xor edx, edx
  4629 00003A8B 89C8                <1> 		mov eax, ecx
  4630 00003A8D 89D9                <1> 		mov ecx, ebx
  4631 00003A8F 89C3                <1> 		mov ebx, eax
  4632 00003A91 81F900000000        <1> 		cmp ecx, 0
  4633 00003A97 7422                <1> 		je noexpnum
  4634 00003A99 49                  <1> 		dec ecx
  4635 00003A9A 81F900000000        <1> 		cmp ecx, 0
  4636 00003AA0 7412                <1> 		je noexpnumlp
  4637 00003AA2 F7E3                <1> 	expnumlp: mul ebx
  4638 00003AA4 8A15[873B0000]      <1> 		mov dl, [decimal2]
  4639 00003AAA 0015[863B0000]      <1> 		add [decimal], dl
  4640 00003AB0 31D2                <1> 		xor edx, edx
  4641 00003AB2 E2EE                <1> 		loop expnumlp
  4642                              <1> 	noexpnumlp:
  4643 00003AB4 89C1                <1> 		mov ecx, eax
  4644 00003AB6 E905000000          <1> 		jmp retnum
  4645                              <1> 	noexpnum:
  4646 00003ABB B901000000          <1> 		mov ecx, 1
  4647                              <1> 	retnum: 
  4648 00003AC0 BE[8E1D0000]        <1> 		mov esi, numbuf
  4649 00003AC5 890D[893B0000]      <1> 		mov [result], ecx
  4650 00003ACB E80BF9FFFF          <1> 		call convert
  4651 00003AD0 BE[8E1D0000]        <1> 		mov esi, numbuf
  4652 00003AD5 8A25[863B0000]      <1> 		mov ah, [decimal]
  4653 00003ADB 8825[883B0000]      <1> 		mov [decimalresult], ah
  4654 00003AE1 80FC00              <1> 		cmp ah, 0
  4655 00003AE4 0F8425000000        <1> 		je near noputdecimal
  4656                              <1> 	putdecimal:
  4657 00003AEA 4E                  <1> 		dec esi
  4658 00003AEB FECC                <1> 		dec ah
  4659 00003AED 80FC00              <1> 		cmp ah, 0
  4660 00003AF0 0F87F4FFFFFF        <1> 		ja near putdecimal
  4661 00003AF6 4E                  <1> 		dec esi
  4662 00003AF7 8A06                <1> 		mov al, [esi]
  4663 00003AF9 C6062E              <1> 		mov byte [esi], '.'
  4664                              <1> 	decputloop:
  4665 00003AFC 4E                  <1> 		dec esi
  4666 00003AFD 8A26                <1> 		mov ah, [esi]
  4667 00003AFF 8806                <1> 		mov [esi], al
  4668 00003B01 88E0                <1> 		mov al, ah
  4669 00003B03 81FE[7A1D0000]      <1> 		cmp esi, buf2
  4670 00003B09 0F87EDFFFFFF        <1> 		ja near decputloop
  4671                              <1> 	noputdecimal:
  4672 00003B0F BE[7A1D0000]        <1> 		mov esi, buf2
  4673 00003B14 E809000000          <1> 		call chkadd
  4674 00003B19 E934F5FFFF          <1> 		jmp nwcmd
  4675 00003B1E 00000000            <1> edxnumbuf dw 0,0
  4676 00003B22 8A06                <1> 	chkadd: mov al, [esi]
  4677 00003B24 3C30                <1> 		cmp al, '0'
  4678 00003B26 750C                <1> 		jne dnadd
  4679 00003B28 46                  <1> 		inc esi
  4680 00003B29 81FE[8E1D0000]      <1> 		cmp esi, numbuf
  4681 00003B2F 7402                <1> 		je dnaddm1
  4682 00003B31 EBEF                <1> 		jmp chkadd
  4683 00003B33 4E                  <1> 	dnaddm1: dec esi
  4684 00003B34 E8C2EEFFFF          <1> 	dnadd:	call print
  4685 00003B39 BE[9D720000]        <1> 		mov esi, line
  4686 00003B3E E8B8EEFFFF          <1> 		call print
  4687 00003B43 C3                  <1> 		ret
  4688                              <1> 		
  4689                              <1> 	decaddfix:
  4690 00003B44 A0[873B0000]        <1> 		mov al, [decimal2]
  4691 00003B49 8A25[863B0000]      <1> 		mov ah, [decimal]
  4692 00003B4F 38E0                <1> 		cmp al, ah
  4693 00003B51 7432                <1> 		je gooddecadd
  4694 00003B53 38E0                <1> 		cmp al, ah
  4695 00003B55 721A                <1> 		jb lowdecadd
  4696                              <1> 	highdecadd:
  4697 00003B57 FEC4                <1> 		inc ah
  4698 00003B59 89CA                <1> 		mov edx, ecx
  4699 00003B5B C1E103              <1> 		shl ecx, 3
  4700 00003B5E 01D1                <1> 		add ecx, edx
  4701 00003B60 01D1                <1> 		add ecx, edx
  4702 00003B62 38E0                <1> 		cmp al, ah
  4703 00003B64 77F1                <1> 		ja highdecadd
  4704 00003B66 8825[863B0000]      <1> 		mov [decimal], ah
  4705 00003B6C E914000000          <1> 		jmp gooddecadd
  4706                              <1> 	lowdecadd:
  4707 00003B71 FEC0                <1> 		inc al
  4708 00003B73 89DA                <1> 		mov edx, ebx
  4709 00003B75 C1E303              <1> 		shl ebx, 3
  4710 00003B78 01D3                <1> 		add ebx, edx
  4711 00003B7A 01D3                <1> 		add ebx, edx
  4712 00003B7C 38E0                <1> 		cmp al, ah
  4713 00003B7E 72F1                <1> 		jb lowdecadd
  4714 00003B80 A2[863B0000]        <1> 		mov [decimal], al
  4715                              <1> 	gooddecadd:
  4716 00003B85 C3                  <1> 		ret
  4717                              <1> 		
  4718 00003B86 00                  <1> decimal db 0
  4719 00003B87 00                  <1> decimal2 db 0
  4720 00003B88 00                  <1> decimalresult db 0
  4721 00003B89 00000000            <1> result db 0,0,0,0
  4722                              <1> 	
  4723 00003B8D 05042500            <1> db 5,4,"%",0
  4724 00003B91 E830F8FFFF          <1> 	ans:	call clearbuffer
  4725 00003B96 8B0D[893B0000]      <1> 		mov ecx, [result]
  4726 00003B9C BE[7A1D0000]        <1> 		mov esi, buf2
  4727 00003BA1 E835F8FFFF          <1> 		call convert
  4728 00003BA6 BE[7A1D0000]        <1> 		mov esi, buf2
  4729 00003BAB E872FFFFFF          <1> 		call chkadd
  4730 00003BB0 E99DF4FFFF          <1> 		jmp nwcmd
  4731                              <1> 
  4732 00003BB5 05042400            <1> db 5,4,"$",0
  4733 00003BB9 BE[7A1B0000]        <1> var: mov esi, buftxt
  4734 00003BBE BB[6F150000]        <1> 	mov ebx, variables
  4735 00003BC3 8A06                <1> lkeq:	mov al, [esi]
  4736 00003BC5 3C3D                <1> 	cmp al, '='
  4737 00003BC7 741F                <1> 	je eqfnd	;is there an '=' sign?
  4738 00003BC9 3C00                <1> 	cmp al, 0
  4739 00003BCB 7403                <1> 	je echovars
  4740 00003BCD 46                  <1> 	inc esi
  4741 00003BCE EBF3                <1> 	jmp lkeq
  4742 00003BD0 BE[6F150000]        <1> echovars: mov esi, variables
  4743 00003BD5 BB[6F1A0000]        <1> 	mov ebx, varend
  4744 00003BDA B105                <1> 	mov cl, 5
  4745 00003BDC B504                <1> 	mov ch, 4
  4746 00003BDE E882F7FFFF          <1> 	call array
  4747 00003BE3 E96AF4FFFF          <1> 	jmp nwcmd
  4748 00003BE8 46                  <1> eqfnd:	inc esi
  4749 00003BE9 8A06                <1> 	mov al, [esi]
  4750 00003BEB 3C00                <1> 	cmp al, 0
  4751 00003BED 740F                <1> 	je readvar
  4752 00003BEF BE[7A1B0000]        <1> 	mov esi, buftxt
  4753 00003BF4 BB[6F150000]        <1> 	mov ebx, variables
  4754 00003BF9 E923000000          <1> 	jmp seek
  4755                              <1> readvar:
  4756 00003BFE B00D                <1> 	mov al, 13
  4757 00003C00 66BB0700            <1> 	mov bx, 7
  4758 00003C04 C605[5C2A0000]00    <1> 	mov byte [commandedit], 0
  4759 00003C0B BF[7A1D0000]        <1> 	mov edi, buftxtend
  4760 00003C10 E854EEFFFF          <1> 	call int305
  4761 00003C15 BE[9D720000]        <1> 	mov esi, line
  4762 00003C1A E8DCEDFFFF          <1> 	call print
  4763 00003C1F EB98                <1> 	jmp var
  4764 00003C21 668B03              <1> seek:	mov ax, [ebx]
  4765 00003C24 B105                <1> 	mov cl, 5
  4766 00003C26 B504                <1> 	mov ch, 4
  4767 00003C28 663D0000            <1> 	cmp ax, 0
  4768 00003C2C 0F8459000000        <1> 	je near save
  4769 00003C32 6639C8              <1> 	cmp ax, cx
  4770 00003C35 7403                <1> 	je skfnd
  4771 00003C37 43                  <1> 	inc ebx
  4772 00003C38 EBE7                <1> 	jmp seek
  4773 00003C3A BE[7A1B0000]        <1> skfnd:	mov esi, buftxt
  4774 00003C3F 46                  <1> 	inc esi
  4775 00003C40 81C302000000        <1> 	add ebx, 2
  4776 00003C46 89DF                <1> 	mov edi, ebx
  4777 00003C48 B13D                <1> 	mov cl, '='
  4778 00003C4A E84AF6FFFF          <1> 	call cndtest
  4779 00003C4F 3C01                <1> 	cmp al, 1	
  4780 00003C51 7417                <1> 	je varfnd
  4781 00003C53 89FB                <1> 	mov ebx, edi
  4782 00003C55 BE[7A1B0000]        <1> 	mov esi, buftxt
  4783 00003C5A 668B03              <1> 	mov ax, [ebx]
  4784 00003C5D 663D0000            <1> 	cmp ax, 0
  4785 00003C61 0F8424000000        <1> 	je near save
  4786 00003C67 43                  <1> 	inc ebx
  4787 00003C68 EBB7                <1> 	jmp seek
  4788 00003C6A 8A03                <1> varfnd:	mov al, [ebx]
  4789 00003C6C 3C04                <1> 	cmp al, 4
  4790 00003C6E 7404                <1> 	je save2
  4791 00003C70 4B                  <1> 	dec ebx
  4792 00003C71 4E                  <1> 	dec esi
  4793 00003C72 EBF6                <1> 	jmp varfnd
  4794 00003C74 4B                  <1> save2:	dec ebx
  4795 00003C75 4E                  <1> 	dec esi
  4796 00003C76 8A03                <1> 	mov al, [ebx]
  4797 00003C78 3C05                <1> 	cmp al, 5
  4798 00003C7A 7402                <1> 	je remove
  4799 00003C7C EBEC                <1> 	jmp varfnd
  4800 00003C7E 8A03                <1> remove: mov al, [ebx]
  4801 00003C80 3C00                <1> 	cmp al, 0
  4802 00003C82 749D                <1> 	je seek
  4803 00003C84 30C0                <1> 	xor al, al
  4804 00003C86 8803                <1> 	mov [ebx], al
  4805 00003C88 43                  <1> 	inc ebx
  4806 00003C89 EBF3                <1> 	jmp remove	;do not need for now-need defragmentation
  4807 00003C8B BE[7A1B0000]        <1> save:	mov esi, buftxt
  4808 00003C90 43                  <1> 	inc ebx
  4809 00003C91 B005                <1> 	mov al, 5
  4810 00003C93 B404                <1> 	mov ah, 4
  4811 00003C95 668903              <1> 	mov [ebx], ax
  4812 00003C98 43                  <1> 	inc ebx
  4813 00003C99 43                  <1> svhere:	inc ebx
  4814 00003C9A 46                  <1> 	inc esi
  4815 00003C9B 8A06                <1> 	mov al, [esi]
  4816 00003C9D 3C00                <1> 	cmp al, 0
  4817 00003C9F 0F8442000000        <1> 	je near svdone
  4818 00003CA5 3C25                <1> 	cmp al, '%'
  4819 00003CA7 7404                <1> 	je ans2
  4820 00003CA9 8803                <1> 	mov [ebx], al	
  4821 00003CAB EBEC                <1> 	jmp svhere
  4822 00003CAD 56                  <1> ans2:	push esi
  4823 00003CAE BE[7A1D0000]        <1> 	mov esi, buf2
  4824 00003CB3 E823000000          <1> 	call ansfnd
  4825 00003CB8 E803000000          <1> 	call anscp
  4826 00003CBD 5E                  <1> 	pop esi
  4827 00003CBE EBD9                <1> 	jmp svhere
  4828 00003CC0 8A06                <1> anscp:	mov al, [esi]
  4829 00003CC2 8803                <1> 	mov [ebx], al
  4830 00003CC4 81FE[8E1D0000]      <1> 	cmp esi, numbuf
  4831 00003CCA 74CD                <1> 	je svhere
  4832 00003CCC 3C00                <1> 	cmp al, 0
  4833 00003CCE 74C9                <1> 	je svhere
  4834 00003CD0 43                  <1> 	inc ebx
  4835 00003CD1 46                  <1> 	inc esi
  4836 00003CD2 EBEC                <1> 	jmp anscp
  4837 00003CD4 5E                  <1> ansnf:	pop esi
  4838 00003CD5 8A06                <1> 	mov al, [esi]
  4839 00003CD7 8803                <1> 	mov [ebx], al
  4840 00003CD9 EBBE                <1> 	jmp svhere
  4841 00003CDB 46                  <1> ansfnd:	inc esi
  4842 00003CDC 8A06                <1> 	mov al, [esi]
  4843 00003CDE 3C00                <1> 	cmp al, 0
  4844 00003CE0 74F2                <1> 	je ansnf
  4845 00003CE2 3C30                <1> 	cmp al, '0'
  4846 00003CE4 74F5                <1> 	je ansfnd
  4847 00003CE6 C3                  <1> 	ret
  4848 00003CE7 30C0                <1> svdone:	xor al, al
  4849 00003CE9 8803                <1> 	mov [ebx], al
  4850 00003CEB E962F3FFFF          <1> 	jmp nwcmd
  4851                              <1> 	
  4852 00003CF0 05046C6F676F757400  <1> 	db 5,4,"logout",0
  4853                              <1> logout:
  4854 00003CF9 E930F2FFFF          <1> 	jmp os
  4855                              <1> 	
  4856 00003CFE 05047265626F6F7400  <1> 	db 5,4,"reboot",0
  4857                              <1> rebootcomp:
  4858 00003D07 E946C5FFFF          <1> 	jmp coldboot
  4859                              <1> 
  4860 00003D0C 050473687574646F77- <1> 	db 5,4,"shutdown",0
  4861 00003D15 6E00                <1>
  4862                              <1> shutdowncomp:
  4863 00003D17 E90CC5FFFF          <1> 	jmp shutdown
  4864                              <1> 	
  4865 00003D1C 05042E2F00          <1> 	db 5,4,"./",0
  4866                              <1> rundiskprog:
  4867 00003D21 BF[7A1B0000]        <1> 	mov edi, buftxt
  4868 00003D26 81C702000000        <1> 	add edi, 2
  4869 00003D2C BE00004000          <1> 	mov esi, 0x400000
  4870 00003D31 E8062C0000          <1> 	call loadfile
  4871 00003D36 81FA94010000        <1> 	cmp edx, 404
  4872 00003D3C 742E                <1> 	je noprogfound
  4873 00003D3E BB00004000          <1> 	mov ebx, 0x400000
  4874 00003D43 66813B4558          <1> 	cmp word [ebx], "EX"
  4875 00003D48 754B                <1> 	jne progbatchfound
  4876 00003D4A 81C302000000        <1> 	add ebx, 2
  4877 00003D50 BF[7A1B0000]        <1> 	mov edi, buftxt
  4878 00003D55 81C702000000        <1> 	add edi, 2
  4879                              <1> findspaceprog:
  4880 00003D5B 8A07                <1> 	mov al, [edi]
  4881 00003D5D 47                  <1> 	inc edi
  4882 00003D5E 3C20                <1> 	cmp al, " "
  4883 00003D60 75F9                <1> 	jne findspaceprog
  4884                              <1> findnonspaceprog:
  4885 00003D62 8A07                <1> 	mov al, [edi]
  4886 00003D64 47                  <1> 	inc edi
  4887 00003D65 3C20                <1> 	cmp al, " "
  4888 00003D67 74F9                <1> 	je findnonspaceprog
  4889 00003D69 4F                  <1> 	dec edi
  4890 00003D6A FFE3                <1> 	jmp ebx
  4891                              <1> noprogfound:
  4892 00003D6C BE[64720000]        <1> 	mov esi, notfound1
  4893 00003D71 E885ECFFFF          <1> 	call print
  4894 00003D76 BE[7A1B0000]        <1> 	mov esi, buftxt
  4895 00003D7B 81C602000000        <1> 	add esi, 2
  4896 00003D81 E875ECFFFF          <1> 	call print
  4897 00003D86 BE[6E720000]        <1> 	mov esi, notfound2
  4898 00003D8B E86BECFFFF          <1> 	call print
  4899 00003D90 E9BDF2FFFF          <1> 	jmp nwcmd
  4900                              <1> progbatchfound:
  4901 00003D95 BF00004000          <1> 		mov edi, 0x400000
  4902 00003D9A C605[69150000]01    <1> 		mov byte [BATCHISON], 1
  4903                              <1> 	batchrunloop:
  4904 00003DA1 E87FF2FFFF          <1> 		call buftxtclear
  4905 00003DA6 BE[7A1B0000]        <1> 		mov esi, buftxt
  4906                              <1> 	batchrunloop2:
  4907 00003DAB B10D                <1> 		mov cl, 13
  4908 00003DAD B50A                <1> 		mov ch, 10
  4909 00003DAF 66390F              <1> 		cmp [edi], cx
  4910 00003DB2 0F841E000000        <1> 		je near nxtbatchrunline
  4911 00003DB8 66C1C108            <1> 		rol cx, 8
  4912 00003DBC 66390F              <1> 		cmp [edi], cx
  4913 00003DBF 0F8411000000        <1> 		je near nxtbatchrunline
  4914 00003DC5 803F00              <1> 		cmp byte [edi], 0
  4915 00003DC8 0F8408000000        <1> 		je near nxtbatchrunline
  4916 00003DCE 8A07                <1> 		mov al, [edi]
  4917 00003DD0 8806                <1> 		mov [esi], al
  4918 00003DD2 46                  <1> 		inc esi
  4919 00003DD3 47                  <1> 		inc edi
  4920 00003DD4 EBD5                <1> 		jmp batchrunloop2
  4921                              <1> 	nxtbatchrunline:
  4922 00003DD6 81C702000000        <1> 		add edi, 2
  4923 00003DDC 893D[3E3E0000]      <1> 		mov [batchedi], edi
  4924 00003DE2 893D[65150000]      <1> 		mov [BATCHPOS], edi
  4925 00003DE8 C60600              <1> 		mov byte [esi], 0
  4926 00003DEB BE[7A1B0000]        <1> 		mov esi, buftxt
  4927 00003DF0 803E00              <1> 		cmp byte [esi], 0
  4928 00003DF3 0F8439000000        <1> 		je near nobatchfoundrun
  4929 00003DF9 31DB                <1> 		xor ebx, ebx
  4930 00003DFB 8A1D[00150000]      <1> 		mov bl, [IFON]
  4931 00003E01 80FB00              <1> 		cmp bl, 0
  4932 00003E04 0F8538000000        <1> 		jne near iftestbatch
  4933                              <1> 	doneiftest:
  4934 00003E0A 803D[263F0000]00    <1> 		cmp byte [runnextline], 0
  4935 00003E11 0F8405000000        <1> 		je near noruniftest
  4936 00003E17 E89EF3FFFF          <1> 		call progtest2
  4937                              <1> 	noruniftest:
  4938 00003E1C C605[263F0000]01    <1> 		mov byte [runnextline], 1
  4939 00003E23 8B3D[3E3E0000]      <1> 		mov edi, [batchedi]
  4940 00003E29 803F00              <1> 		cmp byte [edi], 0
  4941 00003E2C 0F856FFFFFFF        <1> 		jne near batchrunloop
  4942                              <1> 	nobatchfoundrun:
  4943 00003E32 C605[69150000]00    <1> 		mov byte [BATCHISON], 0
  4944 00003E39 E914F2FFFF          <1> 		jmp nwcmd
  4945                              <1> 	
  4946 00003E3E 00000000            <1> batchedi dd 0	
  4947                              <1> 	
  4948                              <1> 	iftestbatch:
  4949 00003E42 BE[01150000]        <1> 		mov esi, IFTRUE
  4950 00003E47 01DE                <1> 		add esi, ebx
  4951 00003E49 803E00              <1> 		cmp byte [esi], 0
  4952 00003E4C 0F85B8FFFFFF        <1> 		jne near doneiftest
  4953 00003E52 881D[273F0000]      <1> 		mov [iffalsebuf], bl
  4954 00003E58 803D[6A150000]01    <1> 		cmp byte [LOOPON], 1
  4955 00003E5F 0F8513000000        <1> 		jne near fifindbatch
  4956 00003E65 E937FFFFFF          <1> 		jmp batchrunloop
  4957                              <1> 	elsetestbatch:
  4958 00003E6A C60601              <1> 		mov byte [esi], 1
  4959 00003E6D 81C706000000        <1> 		add edi, 6
  4960 00003E73 E929FFFFFF          <1> 		jmp batchrunloop
  4961                              <1> 	fifindbatch:
  4962 00003E78 66B96966            <1> 		mov cx, "if"
  4963 00003E7C 66B86669            <1> 		mov ax, "fi"
  4964 00003E80 663907              <1> 		cmp [edi], ax
  4965 00003E83 0F8427000000        <1> 		je near fifoundbatch
  4966 00003E89 66390F              <1> 		cmp [edi], cx
  4967 00003E8C 0F8477000000        <1> 		je near iffoundbatch
  4968 00003E92 803F00              <1> 		cmp byte [edi], 0
  4969 00003E95 0F8415000000        <1> 		je near fifoundbatch
  4970 00003E9B B8656C7365          <1> 		mov eax, "else"
  4971 00003EA0 3907                <1> 		cmp [edi], eax
  4972 00003EA2 0F84C2FFFFFF        <1> 		je near elsetestbatch
  4973 00003EA8 81C702000000        <1> 		add edi, 2
  4974 00003EAE EBC8                <1> 		jmp fifindbatch
  4975                              <1> 	fifoundbatch:
  4976 00003EB0 81C702000000        <1> 		add edi, 2
  4977 00003EB6 B00D                <1> 		mov al, 13
  4978 00003EB8 B40A                <1> 		mov ah, 10
  4979 00003EBA 663907              <1> 		cmp [edi], ax
  4980 00003EBD 0F8418000000        <1> 		je near goodfibatch
  4981 00003EC3 66C1C008            <1> 		rol ax, 8
  4982 00003EC7 663907              <1> 		cmp [edi], ax
  4983 00003ECA 0F840B000000        <1> 		je near goodfibatch
  4984 00003ED0 803F00              <1> 		cmp byte [edi], 0
  4985 00003ED3 0F8459FFFFFF        <1> 		je near nobatchfoundrun
  4986 00003ED9 EB9D                <1> 		jmp fifindbatch
  4987                              <1> 	goodfibatch:
  4988 00003EDB B001                <1> 		mov al, 1
  4989 00003EDD 2805[00150000]      <1> 		sub [IFON], al 
  4990 00003EE3 A0[00150000]        <1> 		mov al, [IFON]
  4991 00003EE8 8A1D[273F0000]      <1> 		mov bl, [iffalsebuf]
  4992 00003EEE 38D8                <1> 		cmp al, bl
  4993 00003EF0 7786                <1> 		ja fifindbatch
  4994 00003EF2 BE[7A1B0000]        <1> 		mov esi, buftxt
  4995 00003EF7 81EF02000000        <1> 		sub edi, 2
  4996 00003EFD C605[263F0000]00    <1> 		mov byte [runnextline], 0
  4997 00003F04 E998FEFFFF          <1> 		jmp batchrunloop
  4998                              <1> 	iffoundbatch:
  4999 00003F09 B020                <1> 		mov al, ' '
  5000 00003F0B 81C702000000        <1> 		add edi, 2
  5001 00003F11 3807                <1> 		cmp [edi], al
  5002 00003F13 0F855FFFFFFF        <1> 		jne near fifindbatch
  5003 00003F19 B001                <1> 		mov al, 1
  5004 00003F1B 0005[00150000]      <1> 		add [IFON], al
  5005 00003F21 E952FFFFFF          <1> 		jmp fifindbatch
  5006                              <1> 		
  5007                              <1> 		
  5008 00003F26 01                  <1> runnextline db 1
  5009 00003F27 00                  <1> iffalsebuf db 0
  5010                              <1> 
  5011 00003F28 E925F1FFFF          <1> notbatch: jmp nwcmd
  5012                              <1> 
  5013 00003F2D 05047768696C6500    <1> 	db 5,4,"while",0
  5014 00003F35 30C0                <1> whilecmd:  xor al, al
  5015 00003F37 3805[69150000]      <1> 	cmp [BATCHISON], al
  5016 00003F3D 0F84E5FFFFFF        <1> 	je near notbatch
  5017 00003F43 8B35[65150000]      <1> 	mov esi, [BATCHPOS]
  5018 00003F49 81EE02000000        <1> 	sub esi, 2
  5019 00003F4F 4E                  <1> whilefnd: dec esi
  5020 00003F50 8A06                <1> 	mov al, [esi]
  5021 00003F52 3C0A                <1> 	cmp al, 10
  5022 00003F54 0F8412000000        <1> 	je near whilefnd2
  5023 00003F5A 3C0D                <1> 	cmp al, 13
  5024 00003F5C 0F840A000000        <1> 	je near whilefnd2
  5025 00003F62 3C00                <1> 	cmp al, 0
  5026 00003F64 0F8402000000        <1> 	je near whilefnd2
  5027 00003F6A EBE3                <1> 	jmp whilefnd
  5028                              <1> whilefnd2:
  5029 00003F6C 46                  <1> 	inc esi
  5030 00003F6D 8935[6B150000]      <1> 	mov [LOOPPOS], esi
  5031 00003F73 C605[6A150000]01    <1> 	mov BYTE [LOOPON], 1
  5032 00003F7A BE[7A1B0000]        <1> 	mov esi, buftxt
  5033 00003F7F BB[7A1B0000]        <1> 	mov ebx, buftxt
  5034 00003F84 81C306000000        <1> 	add ebx, 6
  5035 00003F8A E923000000          <1> 	jmp chkeqsn
  5036                              <1> 
  5037                              <1> 
  5038 00003F8F 0504696600          <1> 	db 5,4,"if",0
  5039 00003F94 30C0                <1> ifcmd:	xor al, al
  5040 00003F96 3805[69150000]      <1> 	cmp [BATCHISON], al
  5041 00003F9C 0F8486FFFFFF        <1> 	je near notbatch
  5042 00003FA2 BE[7A1B0000]        <1> 	mov esi, buftxt
  5043 00003FA7 BB[7A1B0000]        <1> 	mov ebx, buftxt
  5044 00003FAC 81C303000000        <1> 	add ebx, 3
  5045 00003FB2 8A06                <1> chkeqsn: mov al, [esi]
  5046 00003FB4 3C00                <1> 	cmp al, 0
  5047 00003FB6 0F846CFFFFFF        <1> 	je near notbatch
  5048 00003FBC 3C3D                <1> 	cmp al, '='
  5049 00003FBE 0F8403000000        <1> 	je near chkeqdn
  5050 00003FC4 46                  <1> 	inc esi
  5051 00003FC5 EBEB                <1> 	jmp chkeqsn
  5052 00003FC7 B000                <1> chkeqdn: mov al, 0 
  5053 00003FC9 8806                <1> 	mov [esi], al
  5054 00003FCB 46                  <1> 	inc esi
  5055 00003FCC 8A06                <1> 	mov al, [esi]
  5056 00003FCE 3C24                <1> 	cmp al, '$'
  5057 00003FD0 0F845C000000        <1> 	je near ifvar1
  5058 00003FD6 8A03                <1> ifvar2: mov al, [ebx]
  5059 00003FD8 3C24                <1> 	cmp al, '$'
  5060 00003FDA 0F8472000000        <1> 	je near ifvar3
  5061 00003FE0 E87AF2FFFF          <1> ifvar4:	call tester
  5062 00003FE5 3C01                <1> 	cmp al, 1
  5063 00003FE7 0F8405000000        <1> 	je near trueif
  5064 00003FED E920000000          <1> 	jmp falseif
  5065 00003FF2 31C0                <1> trueif:	xor eax, eax
  5066 00003FF4 A0[00150000]        <1> 	mov al, [IFON]
  5067 00003FF9 FEC0                <1> 	inc al
  5068 00003FFB A2[00150000]        <1> 	mov [IFON], al
  5069 00004000 30E4                <1> 	xor ah, ah
  5070 00004002 BE[01150000]        <1> 	mov esi, IFTRUE
  5071 00004007 01C6                <1> 	add esi, eax
  5072 00004009 B401                <1> 	mov ah, 1
  5073 0000400B 8826                <1> 	mov [esi], ah
  5074 0000400D E940F0FFFF          <1> 	jmp nwcmd
  5075 00004012 31C0                <1> falseif: xor eax, eax
  5076 00004014 A0[00150000]        <1> 	mov al, [IFON]
  5077 00004019 FEC0                <1> 	inc al
  5078 0000401B A2[00150000]        <1> 	mov [IFON], al
  5079 00004020 30E4                <1> 	xor ah, ah
  5080 00004022 BE[01150000]        <1> 	mov esi, IFTRUE
  5081 00004027 01C6                <1> 	add esi, eax
  5082 00004029 30E4                <1> 	xor ah, ah
  5083 0000402B 8826                <1> 	mov [esi], ah
  5084 0000402D E920F0FFFF          <1> 	jmp nwcmd
  5085 00004032 89F7                <1> ifvar1: mov edi, esi
  5086 00004034 81EF[7A1B0000]      <1> 	sub edi, buftxt
  5087 0000403A 47                  <1> 	inc edi
  5088 0000403B BB[6F150000]        <1> 	mov ebx, variables
  5089 00004040 E88AF8FFFF          <1> 	call nxtvrech
  5090 00004045 BB[7A1B0000]        <1> 	mov ebx, buftxt
  5091 0000404A 81C303000000        <1> 	add ebx, 3
  5092 00004050 EB84                <1> 	jmp ifvar2
  5093 00004052 8935[72400000]      <1> ifvar3: mov [esiif], esi
  5094 00004058 BF04000000          <1> 	mov edi, 4
  5095 0000405D BB[6F150000]        <1> 	mov ebx, variables
  5096 00004062 E868F8FFFF          <1> 	call nxtvrech
  5097 00004067 8B35[72400000]      <1> 	mov esi, [esiif]
  5098 0000406D E96EFFFFFF          <1> 	jmp ifvar4
  5099                              <1> 
  5100 00004072 00000000            <1> esiif dd 0
  5101                              <1> 	
  5102 00004076 0504656C736500      <1> 	db 5,4,"else",0
  5103 0000407D 31C0                <1> elsecmd:	xor eax, eax
  5104 0000407F A0[00150000]        <1> 	mov al, [IFON]
  5105 00004084 BE[01150000]        <1> 	mov esi, IFTRUE
  5106 00004089 01C6                <1> 	add esi, eax
  5107 0000408B 8A06                <1> 	mov al, [esi]
  5108 0000408D 3401                <1> 	xor al, 1
  5109 0000408F 8806                <1> 	mov [esi], al
  5110 00004091 E9BCEFFFFF          <1> 	jmp nwcmd
  5111                              <1> 
  5112 00004096 05046C6F6F7000      <1> 	db 5,4,"loop",0
  5113 0000409D 803D[6A150000]00    <1> 	cmp byte [LOOPON], 0
  5114 000040A4 0F8505000000        <1> 	jne near filoop
  5115 000040AA E9A3EFFFFF          <1> 	jmp nwcmd
  5116 000040AF 8B35[6B150000]      <1> filoop: mov esi, [LOOPPOS]
  5117 000040B5 FE0D[00150000]      <1> 	dec byte [IFON]
  5118 000040BB C605[6A150000]00    <1> 	mov byte [LOOPON], 0
  5119 000040C2 8935[65150000]      <1> 	mov [BATCHPOS], esi
  5120 000040C8 8935[3E3E0000]      <1> 	mov [batchedi], esi
  5121 000040CE E97FEFFFFF          <1> 	jmp nwcmd
  5122                              <1> 	
  5123                              <1> 
  5124 000040D3 0504666900          <1> 	db 5,4,"fi",0
  5125 000040D8 30C0                <1> 	xor al, al
  5126 000040DA 3805[69150000]      <1> 	cmp [BATCHISON], al
  5127 000040E0 0F8442FEFFFF        <1> 	je near notbatch
  5128 000040E6 B001                <1> fi:	mov al, 1
  5129 000040E8 2805[00150000]      <1> 	sub [IFON],al
  5130 000040EE E95FEFFFFF          <1> 	jmp nwcmd
  5131                              <1> 
  5132 000040F3 050473746F7000      <1> 	db 5,4,"stop",0
  5133 000040FA 30C0                <1> stop:	xor al, al
  5134 000040FC A2[69150000]        <1> 	mov [BATCHISON], al
  5135 00004101 A2[00150000]        <1> 	mov [IFON], al
  5136 00004106 A2[01150000]        <1> 	mov [IFTRUE], al
  5137 0000410B A2[6A150000]        <1> 	mov [LOOPON], al
  5138 00004110 E93DEFFFFF          <1> 	jmp nwcmd
  5139                                      %include 'source/programs.asm'
  5140                              <1> ;db 5,4,"internet",0
  5141                              <1> 	internettest: 			;;initialize network card, lets hope this is right
  5142                              <1> 							;;^^used to^^, now tests int 30h functions		
  5143 00004115 B403                <1> 		mov ah, 3
  5144 00004117 CD30                <1> 		int 30h
  5145 00004119 B401                <1> 		mov ah, 1
  5146                              <1> 		;mov esi, datmsg
  5147 0000411B 66BB0700            <1> 		mov bx, 7
  5148 0000411F 30C0                <1> 		xor al, al
  5149 00004121 CD30                <1> 		int 30h
  5150                              <1> 	    ;jmp packettest
  5151 00004123 E92AEFFFFF          <1> 		jmp nwcmd
  5152                              <1> ;datmsg: db "Internet has not been implemented yet.",10,13,0
  5153                              <1> 	
  5154 00004128 050474687265616473- <1> db 5,4,"threads",0
  5155 00004131 00                  <1>
  5156 00004132 E9EF290000          <1> 	jmp threadstarttest
  5157                              <1> 	
  5158 00004137 050472656700        <1> db 5,4,"reg",0
  5159 0000413D CD03                <1> 	int 3
  5160 0000413F E90EEFFFFF          <1> 	jmp nwcmd
  5161                              <1> 	
  5162 00004144 0504636861726D6170- <1> db 5,4,"charmap",0
  5163 0000414D 00                  <1>
  5164 0000414E 30C0                <1> 	xor al, al
  5165 00004150 66BB0700            <1> 	mov bx, 7
  5166                              <1> charmapcopy:
  5167 00004154 FEC0                <1> 	inc al
  5168 00004156 3C08                <1> 	cmp al, 8
  5169 00004158 7426                <1> 	je charmapnocopy
  5170 0000415A 3C09                <1> 	cmp al, 9
  5171 0000415C 7422                <1> 	je charmapnocopy
  5172 0000415E 3C0A                <1> 	cmp al, 10
  5173 00004160 741E                <1> 	je charmapnocopy
  5174 00004162 3C0D                <1> 	cmp al, 13
  5175 00004164 741A                <1> 	je charmapnocopy
  5176 00004166 3C00                <1> 	cmp al, 0
  5177 00004168 7407                <1> 	je nomorecharmap
  5178 0000416A E883E6FFFF          <1> 	call int301prnt
  5179 0000416F EBE3                <1> 	jmp charmapcopy
  5180                              <1> nomorecharmap:
  5181 00004171 BE[9D720000]        <1> 	mov esi, line
  5182 00004176 E880E8FFFF          <1> 	call print
  5183 0000417B E9D2EEFFFF          <1> 	jmp nwcmd
  5184                              <1> charmapnocopy:
  5185 00004180 6650                <1> 	push ax
  5186 00004182 B020                <1> 	mov al, " "
  5187 00004184 E869E6FFFF          <1> 	call int301prnt
  5188 00004189 6658                <1> 	pop ax
  5189 0000418B EBC7                <1> 	jmp charmapcopy
  5190                              <1> 	
  5191 0000418D 05046B6579636F6465- <1> db 5,4,"keycode",0
  5192 00004196 00                  <1>
  5193                              <1> keycode:
  5194 00004197 C605[A6290000]00    <1> 	mov byte [trans], 0
  5195 0000419E E868060000          <1> 	call guistartin
  5196 000041A3 31C0                <1> 	xor eax, eax
  5197 000041A5 31C9                <1> 	xor ecx, ecx
  5198 000041A7 8A0D[E6470000]      <1> 	mov cl, [specialkey]
  5199 000041AD 80F900              <1> 	cmp cl, 0
  5200 000041B0 0F8405000000        <1> 	je near nospecialkeycode
  5201 000041B6 E89EF3FFFF          <1> 	call showhexsmall
  5202                              <1> nospecialkeycode:
  5203 000041BB 66A1[A4290000]      <1> 	mov ax, [lastkey]
  5204 000041C1 88E1                <1> 	mov cl, ah
  5205 000041C3 E891F3FFFF          <1> 	call showhexsmall
  5206 000041C8 EBCD                <1> 	jmp keycode
  5207                              <1> 
  5208 000041CA 050470636900        <1> db 5,4,"pci",0
  5209                              <1> 	pcishow:
  5210 000041D0 E8CF250000          <1> 	call pcidump
  5211 000041D5 E978EEFFFF          <1> 	jmp nwcmd
  5212                              <1> 	
  5213 000041DA 050461727000        <1> db 5,4,"arp",0
  5214 000041E0 E8BA240000          <1> 	call arptest
  5215 000041E5 E968EEFFFF          <1> 	jmp nwcmd
  5216                              <1> 
  5217 000041EA 0504626174636800    <1> db 5,4,"batch",0
  5218                              <1> 	batchst: 
  5219 000041F2 BF[7A1B0000]        <1> 		mov edi, buftxt
  5220 000041F7 81C706000000        <1> 		add edi, 6
  5221 000041FD 803F00              <1> 		cmp byte [edi], 0
  5222 00004200 0F8473000000        <1> 		je near nonamefound
  5223 00004206 BE00004000          <1> 		mov esi, 0x400000
  5224 0000420B E82C270000          <1> 		call loadfile
  5225 00004210 89D0                <1> 		mov eax, edx
  5226 00004212 3D94010000          <1> 		cmp eax, 404
  5227 00004217 746F                <1> 		je goodbatchname
  5228 00004219 BE[28420000]        <1> 		mov esi, badbatchname
  5229 0000421E E8D8E7FFFF          <1> 		call print
  5230 00004223 E92AEEFFFF          <1> 		jmp nwcmd
  5231 00004228 546869732066696C65- <1> 		badbatchname db "This file already exists!",10,13,0
  5232 00004231 20616C726561647920- <1>
  5233 0000423A 657869737473210A0D- <1>
  5234 00004243 00                  <1>
  5235 00004244 596F75206861766520- <1> 		namenotfoundbatch db "You have to type a name after the command.",10,13,0
  5236 0000424D 746F20747970652061- <1>
  5237 00004256 206E616D6520616674- <1>
  5238 0000425F 65722074686520636F- <1>
  5239 00004268 6D6D616E642E0A0D00  <1>
  5240 00004271 00000000            <1> 		esicache3 dd 0
  5241 00004275 00000000            <1> 		esicache2 dd 0
  5242                              <1> 	nonamefound:
  5243 00004279 BE[44420000]        <1> 		mov esi, namenotfoundbatch
  5244 0000427E E878E7FFFF          <1> 		call print
  5245 00004283 E9CAEDFFFF          <1> 		jmp nwcmd
  5246                              <1> 	goodbatchname:
  5247 00004288 BE00004000          <1> 		mov esi, 0x400000
  5248                              <1> 	batchcreate:
  5249 0000428D 8935[71420000]      <1> 		mov [esicache3], esi
  5250 00004293 BF00008000          <1> 		mov edi, 0x800000
  5251 00004298 B00D                <1> 		mov al, 13
  5252 0000429A B307                <1> 		mov bl, 7
  5253 0000429C B404                <1> 		mov ah, 4
  5254 0000429E CD30                <1> 		int 30h
  5255 000042A0 8935[75420000]      <1> 		mov [esicache2], esi
  5256 000042A6 8A0E                <1> 		mov cl, [esi]
  5257 000042A8 8B35[71420000]      <1> 		mov esi, [esicache3]
  5258 000042AE BB[02430000]        <1> 		mov ebx, exitword
  5259 000042B3 E8E1EFFFFF          <1> 		call cndtest
  5260 000042B8 3C01                <1> 		cmp al, 1
  5261 000042BA 7423                <1> 		je endbatchcreate
  5262 000042BC 3C02                <1> 		cmp al, 2
  5263 000042BE 741F                <1> 		je endbatchcreate
  5264 000042C0 BE[9D720000]        <1> 		mov esi, line
  5265 000042C5 E831E7FFFF          <1> 		call print
  5266 000042CA 8B35[75420000]      <1> 		mov esi, [esicache2]
  5267 000042D0 B00D                <1> 		mov al, 13
  5268 000042D2 B40A                <1> 		mov ah, 10
  5269 000042D4 668906              <1> 		mov [esi], ax
  5270 000042D7 81C602000000        <1> 		add esi, 2
  5271 000042DD EBAE                <1> 		jmp batchcreate
  5272                              <1> 	endbatchcreate:
  5273 000042DF 8B35[71420000]      <1> 		mov esi, [esicache3]
  5274 000042E5 31C0                <1> 		xor eax, eax
  5275 000042E7 8806                <1> 		mov [esi], al
  5276 000042E9 BE[9D720000]        <1> 		mov esi, line
  5277 000042EE E808E7FFFF          <1> 		call print
  5278 000042F3 BE00004000          <1> 		mov esi, 0x400000
  5279 000042F8 E8FEE6FFFF          <1> 		call print
  5280 000042FD E950EDFFFF          <1> 		jmp nwcmd
  5281                              <1> 	
  5282 00004302 5C7800              <1> 	exitword db "\x",0
  5283 00004305 54797065205C782074- <1> 	wordmsg db "Type \x to exit.",10,13,0
  5284 0000430E 6F20657869742E0A0D- <1>
  5285 00004317 00                  <1>
  5286                              <1> 		
  5287 00004318 050473686F7700      <1> db 5,4,"show",0
  5288 0000431F BF[7A1B0000]        <1> 		mov edi, buftxt
  5289 00004324 81C705000000        <1> 		add edi, 5
  5290 0000432A BE00004000          <1> 		mov esi, 0x400000
  5291 0000432F E808260000          <1> 		call loadfile
  5292 00004334 BE00004000          <1> 		mov esi, 0x400000
  5293 00004339 66813E424D          <1> 		cmp word [esi], "BM"
  5294 0000433E 7414                <1> 		je bmpfound
  5295 00004340 E8B6E6FFFF          <1> 		call print
  5296 00004345 BE[9D720000]        <1> 		mov esi, line
  5297 0000434A E8ACE6FFFF          <1> 		call print
  5298 0000434F E9FEECFFFF          <1> 		jmp nwcmd
  5299                              <1> bmpfound:
  5300 00004354 803D[164F0000]00    <1> 		cmp byte [guion], 0
  5301 0000435B 0F8446000000        <1> 		je near noguibmp
  5302 00004361 BE00004000          <1> 		mov esi, 0x400000
  5303 00004366 31C9                <1> 		xor ecx, ecx
  5304 00004368 31D2                <1> 		xor edx, edx
  5305 0000436A 31C0                <1> 		xor eax, eax
  5306 0000436C 31DB                <1> 		xor ebx, ebx
  5307 0000436E E8431C0000          <1> 		call showbmp
  5308 00004373 30C0                <1> 		xor al, al
  5309 00004375 B405                <1> 		mov ah, 5
  5310 00004377 CD30                <1> 		int 30h
  5311 00004379 E8260A0000          <1> 		call guiclear
  5312 0000437E E8940B0000          <1> 		call clearmousecursor
  5313 00004383 E8FE110000          <1> 		call reloadallgraphics
  5314 00004388 BE[7A1B0000]        <1> 		mov esi, buftxt
  5315 0000438D 81C605000000        <1> 		add esi, 5
  5316 00004393 E863E6FFFF          <1> 		call print
  5317 00004398 BE[2A440000]        <1> 		mov esi, loadedbmpmsg
  5318 0000439D E859E6FFFF          <1> 		call print
  5319 000043A2 E9ABECFFFF          <1> 		jmp nwcmd
  5320                              <1> noguibmp:
  5321 000043A7 BE[B6430000]        <1> 		mov esi, warnguibmp
  5322 000043AC E84AE6FFFF          <1> 		call print
  5323 000043B1 E99CECFFFF          <1> 		jmp nwcmd
  5324 000043B6 546869732063616E20- <1> warnguibmp db "This can not be done without the gui.",10,13,0
  5325 000043BF 6E6F7420626520646F- <1>
  5326 000043C8 6E6520776974686F75- <1>
  5327 000043D1 742074686520677569- <1>
  5328 000043DA 2E0A0D00            <1>
  5329                              <1> 
  5330                              <1> 		
  5331                              <1> filenotfound:
  5332 000043DE BE[07440000]        <1> 		mov esi, filenf
  5333 000043E3 E813E6FFFF          <1> 		call print
  5334 000043E8 BE[7A1B0000]        <1> 		mov esi, buftxt
  5335 000043ED 81C608000000        <1> 		add esi, 8
  5336 000043F3 E803E6FFFF          <1> 		call print
  5337 000043F8 BE[12440000]        <1> 		mov esi, filenf2
  5338 000043FD E8F9E5FFFF          <1> 		call print
  5339 00004402 E94BECFFFF          <1> 		jmp nwcmd
  5340 00004407 5468652066696C6520- <1> filenf db "The file ",34,0
  5341 00004410 2200                <1>
  5342 00004412 2220636F756C64206E- <1> filenf2 db 34," could not be found.",13,10,0
  5343 0000441B 6F7420626520666F75- <1>
  5344 00004424 6E642E0D0A00        <1>
  5345                              <1> 		
  5346 0000442A 206C6F616465642E0D- <1> loadedbmpmsg db " loaded.",13,10,0
  5347 00004433 0A00                <1>
  5348                              <1> 
  5349 00004435 050464756D7000      <1> 	db 5,4,"dump",0
  5350 0000443C BE[7A1B0000]        <1> 	mov esi, buftxt
  5351 00004441 81C605000000        <1> 	add esi, 5
  5352 00004447 31C9                <1> 	xor ecx, ecx
  5353 00004449 E85CF2FFFF          <1> 	call cnvrttxt
  5354 0000444E 89CF                <1> 	mov edi, ecx
  5355 00004450 89FE                <1> 	mov esi, edi
  5356 00004452 81C680030000        <1> 	add esi, 896
  5357 00004458 C605[58350000]00    <1> 	mov byte [firsthexshown],0
  5358                              <1> dumphexloop:
  5359 0000445F 8B0F                <1> 	mov ecx, [edi]
  5360 00004461 E807F1FFFF          <1> 	call showhex
  5361 00004466 81C704000000        <1> 	add edi, 4
  5362 0000446C 39F7                <1> 	cmp edi, esi
  5363 0000446E 72EF                <1> 	jb dumphexloop
  5364 00004470 E9DDEBFFFF          <1> 	jmp nwcmd
  5365                              <1> 
  5366 00004475 050474696D6500      <1> db 5,4,"time",0
  5367 0000447C E80F000000          <1> 	call time
  5368 00004481 BE[6B460000]        <1> 	mov esi, timeshow
  5369 00004486 E870E5FFFF          <1> 	call print
  5370 0000448B E9C1000000          <1> 	jmp findday
  5371                              <1> time:
  5372 00004490 E85E010000          <1> 	call tstackput1
  5373 00004495 B00A                <1> 	mov al,10			;Get RTC register A
  5374 00004497 E888010000          <1> 	call tget1
  5375 0000449C A880                <1> 	test al,0x80			;Is update in progress?
  5376 0000449E 75F0                <1> 	jne time				; yes, wait
  5377                              <1> 
  5378 000044A0 B000                <1> 	mov al,0			;Get seconds (00 to 59)
  5379 000044A2 E87D010000          <1> 	call tget1
  5380 000044A7 A2[62460000]        <1> 	mov [RTCtimeSecond],al
  5381                              <1> 
  5382 000044AC B002                <1> 	mov al,0x02			;Get minutes (00 to 59)
  5383 000044AE E871010000          <1> 	call tget1
  5384 000044B3 A2[63460000]        <1> 	mov [RTCtimeMinute],al
  5385                              <1> 
  5386 000044B8 B004                <1> 	mov al,0x04			;Get hours (see notes)
  5387 000044BA E865010000          <1> 	call tget1
  5388 000044BF A2[64460000]        <1> 	mov [RTCtimeHour],al
  5389                              <1> 
  5390 000044C4 B007                <1> 	mov al,0x07			;Get day of month (01 to 31)
  5391 000044C6 E859010000          <1> 	call tget1
  5392                              <1> ;	mov ah, 0			;;fix day
  5393                              <1> ;	mov ah, al
  5394                              <1> ;	shr ah, 4
  5395                              <1> ;	shl al, 4
  5396                              <1> ;	shr al, 4
  5397                              <1> ;	cmp al, 0
  5398                              <1> ;	jne nodecahday
  5399                              <1> ;	mov al, 10
  5400                              <1> ;	dec ah
  5401                              <1> ;nodecahday:
  5402                              <1> ;	dec al
  5403                              <1> ;	shl ah, 4
  5404                              <1> ;	or al, ah
  5405 000044CB A2[65460000]        <1> 	mov [RTCtimeDay],al
  5406                              <1> 
  5407 000044D0 B008                <1> 	mov al,0x08			;Get month (01 to 12)
  5408 000044D2 E84D010000          <1> 	call tget1
  5409 000044D7 A2[66460000]        <1> 	mov [RTCtimeMonth],al
  5410                              <1> 
  5411 000044DC B009                <1> 	mov al,0x09			;Get year (00 to 99)
  5412 000044DE E841010000          <1> 	call tget1
  5413 000044E3 A2[67460000]        <1> 	mov [RTCtimeYear],al
  5414                              <1> 	
  5415 000044E8 BE[6B460000]        <1> 	mov esi, timeshow
  5416 000044ED 8A2D[64460000]      <1> 	mov ch, [RTCtimeHour]
  5417 000044F3 E837010000          <1> 	call tput1
  5418 000044F8 8A2D[63460000]      <1> 	mov ch, [RTCtimeMinute]
  5419 000044FE E82C010000          <1> 	call tput1
  5420 00004503 8A2D[62460000]      <1> 	mov ch, [RTCtimeSecond]
  5421 00004509 E821010000          <1> 	call tput1
  5422 0000450E BE[75460000]        <1> 	mov esi, dateshow
  5423 00004513 8A2D[66460000]      <1> 	mov ch, [RTCtimeMonth]
  5424 00004519 E811010000          <1> 	call tput1
  5425 0000451E 8A2D[65460000]      <1> 	mov ch, [RTCtimeDay]
  5426 00004524 E806010000          <1> 	call tput1
  5427 00004529 B520                <1> 	mov ch, 0x20
  5428 0000452B E8FF000000          <1> 	call tput1
  5429 00004530 4E                  <1> 	dec esi
  5430 00004531 8A2D[67460000]      <1> 	mov ch, [RTCtimeYear]
  5431 00004537 E8F3000000          <1> 	call tput1
  5432 0000453C E8CC000000          <1> 	call tstackget1
  5433 00004541 C3                  <1> 	ret
  5434 00004542 BE[6B460000]        <1> 	mov esi, timeshow
  5435 00004547 66BB0700            <1> 	mov bx, 7
  5436 0000454B B401                <1> 	mov ah, 1
  5437 0000454D 30C0                <1> 	xor al, al
  5438 0000454F CD30                <1> 	int 30h
  5439                              <1> ;;get day of week
  5440                              <1> ;;add these:
  5441                              <1> ;;century value
  5442                              <1> ;;last 2 digits of year
  5443                              <1> ;;last 2 digits of year right shifted twice
  5444                              <1> ;;month table value
  5445                              <1> ;;day of the month
  5446                              <1> ;;divide these by 7
  5447                              <1> ;;the remainder is the day
  5448                              <1> findday:
  5449 00004551 31C0                <1> 	xor eax, eax
  5450                              <1> ;;first convert the values from BCD to hex
  5451 00004553 A0[65460000]        <1> 	mov al, [RTCtimeDay]
  5452 00004558 E87D000000          <1> 	call converttohex
  5453 0000455D 8825[68460000]      <1> 	mov [dayhex], ah
  5454 00004563 A0[66460000]        <1> 	mov al, [RTCtimeMonth]
  5455 00004568 E86D000000          <1> 	call converttohex
  5456 0000456D 8825[69460000]      <1> 	mov [monthhex], ah
  5457 00004573 A0[67460000]        <1> 	mov al, [RTCtimeYear]
  5458 00004578 E85D000000          <1> 	call converttohex
  5459 0000457D 8825[6A460000]      <1> 	mov [yearhex], ah
  5460 00004583 31C0                <1> 	xor eax, eax
  5461 00004585 A0[6A460000]        <1> 	mov al, [yearhex]
  5462 0000458A C0E802              <1> 	shr al, 2
  5463 0000458D 0205[6A460000]      <1> 	add al, [yearhex]
  5464 00004593 0506000000          <1> 	add eax, 6
  5465 00004598 31DB                <1> 	xor ebx, ebx
  5466 0000459A 8A1D[69460000]      <1> 	mov bl, [monthhex]
  5467 000045A0 FECB                <1> 	dec bl
  5468 000045A2 81C3[8B460000]      <1> 	add ebx, month
  5469 000045A8 31C9                <1> 	xor ecx, ecx
  5470 000045AA 8A0B                <1> 	mov cl, [ebx]
  5471 000045AC 01C8                <1> 	add eax, ecx
  5472 000045AE 8A0D[68460000]      <1> 	mov cl, [dayhex]
  5473 000045B4 01C8                <1> 	add eax, ecx
  5474 000045B6 66BB0700            <1> 	mov bx, 7
  5475 000045BA 31D2                <1> 	xor edx, edx
  5476 000045BC 66F7F3              <1> 	div bx
  5477 000045BF C1E202              <1> 	shl edx, 2
  5478 000045C2 81C2[97460000]      <1> 	add edx, day
  5479 000045C8 8B32                <1> 	mov esi, [edx]
  5480 000045CA 66BB0700            <1> 	mov bx, 7
  5481 000045CE B401                <1> 	mov ah, 1
  5482 000045D0 30C0                <1> 	xor al, al
  5483 000045D2 CD30                <1> 	int 30h
  5484 000045D4 6631C0              <1> 	xor ax, ax
  5485 000045D7 CD30                <1> 	int 30h
  5486 000045D9 F4                  <1> 	hlt
  5487                              <1> 	
  5488                              <1> converttohex:
  5489 000045DA 88C4                <1> 	mov ah, al
  5490 000045DC C0E804              <1> 	shr al, 4
  5491 000045DF C0E404              <1> 	shl ah, 4
  5492 000045E2 C0EC04              <1> 	shr ah, 4
  5493 000045E5 3C00                <1> 	cmp al, 0
  5494 000045E7 7409                <1> 	je noconverttohex
  5495                              <1> converttohexlp:
  5496 000045E9 80C40A              <1> 	add ah, 10
  5497 000045EC FEC8                <1> 	dec al
  5498 000045EE 3C00                <1> 	cmp al, 0
  5499 000045F0 75F7                <1> 	jne converttohexlp
  5500                              <1> noconverttohex:
  5501 000045F2 C3                  <1> 	ret
  5502                              <1> 	
  5503                              <1> tstackput1:
  5504 000045F3 8935[5E460000]      <1> 	mov [tstack + 20], esi
  5505 000045F9 BE[4A460000]        <1> 	mov esi, tstack
  5506 000045FE 8906                <1> 	mov [esi], eax
  5507 00004600 895E04              <1> 	mov [esi + 4], ebx
  5508 00004603 894E08              <1> 	mov [esi + 8], ecx
  5509 00004606 89560C              <1> 	mov [esi + 12], edx
  5510 00004609 897E10              <1> 	mov [esi + 16], edi
  5511 0000460C C3                  <1> 	ret
  5512                              <1> 	
  5513                              <1> tstackget1:
  5514 0000460D BE[4A460000]        <1> 	mov esi, tstack
  5515 00004612 8B06                <1> 	mov eax, [esi]
  5516 00004614 8B5E04              <1> 	mov ebx, [esi + 4]
  5517 00004617 8B4E08              <1> 	mov ecx, [esi + 8]
  5518 0000461A 8B560C              <1> 	mov edx, [esi + 12]
  5519 0000461D 8B7E10              <1> 	mov edi, [esi + 16]
  5520 00004620 8B7614              <1> 	mov esi, [esi + 20]
  5521 00004623 C3                  <1> 	ret
  5522                              <1> 	
  5523                              <1> tget1:
  5524 00004624 66BA7000            <1> 	mov dx, 0x70
  5525 00004628 EE                  <1> 	out dx, al
  5526 00004629 6642                <1> 	inc dx
  5527 0000462B EC                  <1> 	in al, dx
  5528 0000462C 664A                <1> 	dec dx
  5529 0000462E C3                  <1> 	ret
  5530                              <1> 	
  5531                              <1> tput1:
  5532 0000462F 66C1E904            <1> 	shr cx, 4
  5533 00004633 B030                <1> 	mov al, 48
  5534 00004635 00E8                <1> 	add al, ch
  5535 00004637 8806                <1> 	mov [esi], al
  5536 00004639 46                  <1> 	inc esi
  5537 0000463A B030                <1> 	mov al, 48
  5538 0000463C C0E904              <1> 	shr cl, 4
  5539 0000463F 00C8                <1> 	add al, cl
  5540 00004641 8806                <1> 	mov [esi], al
  5541 00004643 81C602000000        <1> 	add esi, 2
  5542 00004649 C3                  <1> 	ret
  5543                              <1> 		
  5544 0000464A 000000000000000000- <1> 	tstack dd 0,0,0,0,0,0
  5545 00004653 000000000000000000- <1>
  5546 0000465C 000000000000        <1>
  5547 00004662 00                  <1> 	RTCtimeSecond db 0
  5548 00004663 00                  <1> 	RTCtimeMinute db 0
  5549 00004664 00                  <1> 	RTCtimeHour db 0
  5550 00004665 00                  <1> 	RTCtimeDay db 0
  5551 00004666 00                  <1> 	RTCtimeMonth db 0
  5552 00004667 00                  <1> 	RTCtimeYear db 0
  5553 00004668 00                  <1> 	dayhex db 0
  5554 00004669 00                  <1> 	monthhex db 0
  5555 0000466A 00                  <1> 	yearhex db 0
  5556 0000466B 30303A30303A30300D- <1> 	timeshow db "00:00:00",13,10
  5557 00004674 0A                  <1>
  5558 00004675 30302D30302D303030- <1> 	dateshow db "00-00-0000",13,10,0
  5559 0000467E 300D0A00            <1>
  5560                              <1> 	oldcentury:	;;from 1700 to 1900
  5561 00004682 040200              <1> 	db 4,2,0
  5562                              <1> 	century:	;;from 2000 to 2500
  5563 00004685 060402000604        <1> 	db 6,4,2,0,6,4
  5564                              <1> 	month:
  5565 0000468B 000303060104060205- <1> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5566 00004694 000305              <1>
  5567                              <1> 	day:
  5568 00004697 [B3460000]          <1> 	dd sunday
  5569 0000469B [BC460000]          <1> 	dd monday
  5570 0000469F [C5460000]          <1> 	dd tuesday
  5571 000046A3 [CF460000]          <1> 	dd wednesday
  5572 000046A7 [DB460000]          <1> 	dd thursday
  5573 000046AB [E6460000]          <1> 	dd friday
  5574 000046AF [EF460000]          <1> 	dd saturday
  5575                              <1> sunday:
  5576 000046B3 53756E6461790D0A00  <1> 	db "Sunday",13,10,0
  5577                              <1> monday:
  5578 000046BC 4D6F6E6461790D0A00  <1> 	db "Monday",13,10,0
  5579                              <1> tuesday:
  5580 000046C5 547565736461790D0A- <1> 	db "Tuesday",13,10,0
  5581 000046CE 00                  <1>
  5582                              <1> wednesday:
  5583 000046CF 5765646E6573646179- <1> 	db "Wednesday",13,10,0
  5584 000046D8 0D0A00              <1>
  5585                              <1> thursday:
  5586 000046DB 54687572736461790D- <1> 	db "Thursday",13,10,0
  5587 000046E4 0A00                <1>
  5588                              <1> friday:
  5589 000046E6 4672696461790D0A00  <1> 	db "Friday",13,10,0
  5590                              <1> saturday:
  5591 000046EF 53617475726461790D- <1> 	db "Saturday",13,10,0
  5592 000046F8 0A00                <1>
  5593                              <1> 
  5594 000046FA 0504637075696400    <1> db 5,4,"cpuid",0
  5595 00004702 31C0                <1> 	xor eax, eax
  5596 00004704 0FA2                <1> 	cpuid
  5597 00004706 891D[5B470000]      <1> 	mov [cpuidbuf], ebx
  5598 0000470C 8915[5F470000]      <1> 	mov [cpuidbuf + 4], edx
  5599 00004712 890D[63470000]      <1> 	mov [cpuidbuf + 8], ecx
  5600 00004718 BE[5B470000]        <1> 	mov esi, cpuidbuf
  5601 0000471D E8D9E2FFFF          <1> 	call print
  5602 00004722 BE[9D720000]        <1> 	mov esi, line
  5603 00004727 E8CFE2FFFF          <1> 	call print
  5604 0000472C B801000000          <1> 	mov eax, 1
  5605 00004731 0FA2                <1> 	cpuid
  5606 00004733 89C1                <1> 	mov ecx, eax
  5607 00004735 C605[58350000]02    <1> 	mov byte [firsthexshown], 2
  5608 0000473C E82CEEFFFF          <1> 	call showhex
  5609 00004741 B808000080          <1> 	mov eax, 0x80000008
  5610 00004746 0FA2                <1> 	cpuid
  5611 00004748 89C1                <1> 	mov ecx, eax
  5612 0000474A C605[58350000]02    <1> 	mov byte [firsthexshown], 2
  5613 00004751 E817EEFFFF          <1> 	call showhex
  5614 00004756 E9F7E8FFFF          <1> 	jmp nwcmd
  5615                              <1> 	
  5616 0000475B 00<rept>            <1> cpuidbuf times 13 db 0
  5617                              <1> cpuidvendorend:
  5618                              <1> progend:		;programs end here	
  5619                              <1> batchprogend:
  5620                                      %include 'source/input.asm'
  5621                              <1> PS2SET:
  5622 00004768 B0A8                <1>   mov  al, 0xa8		; enable mouse port
  5623 0000476A E664                <1>   out  0x64, al		; write to keyboardcontroller
  5624 0000476C E801000000          <1>   call CHKPRT		; check if command is progressed (demand!)
  5625 00004771 C3                  <1> ret
  5626                              <1> 
  5627                              <1> CHKPRT:
  5628 00004772 66B96400            <1>   mov  cx, 100
  5629                              <1>  .again:
  5630 00004776 E464                <1>   in   al, 0x64		; read from keyboardcontroller
  5631 00004778 A802                <1>   test al, 2		; Check if input buffer is empty
  5632 0000477A 7402                <1>   je .go
  5633 0000477C E2F8                <1>   loop .again
  5634                              <1>  .go:
  5635 0000477E C3                  <1> ret
  5636                              <1> 
  5637                              <1> WMOUS:
  5638 0000477F B0D4                <1>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  5639 00004781 E664                <1>   out  0x64, al		; write to keyboardcontroller
  5640 00004783 E8EAFFFFFF          <1>   call CHKPRT		; check if command is progressed (demand!)
  5641 00004788 C3                  <1> ret
  5642                              <1> 
  5643                              <1> MBUFFUL:
  5644 00004789 66B96400            <1>   mov cx, 100
  5645                              <1>  .mn:
  5646 0000478D E464                <1>   in   al, 0x64		; read from keyboardcontroller
  5647 0000478F A820                <1>   test al, 0x20		; check if mouse output buffer is full
  5648 00004791 7402                <1>   jz  .mnn
  5649 00004793 E2F8                <1>   loop .mn
  5650                              <1>  .mnn:
  5651 00004795 C3                  <1> ret
  5652                              <1> 
  5653                              <1> 
  5654                              <1> ACTMOUS:
  5655 00004796 E8E4FFFFFF          <1>   call WMOUS
  5656 0000479B B0F4                <1>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  5657 0000479D E660                <1>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  5658 0000479F E8CEFFFFFF          <1>   call CHKPRT		; check if command is progressed (demand!)
  5659 000047A4 E801000000          <1>   call CHKMOUS		; check if a byte is available
  5660 000047A9 C3                  <1> ret
  5661                              <1> 
  5662                              <1> CHKMOUS:
  5663 000047AA B300                <1>   mov  bl, 0
  5664 000047AC 66B96400            <1>   mov cx, 100
  5665                              <1>  .vrd:
  5666 000047B0 E464                <1>   in   al, 0x64		; read from keyboardcontroller
  5667 000047B2 A801                <1>   test al, 1		; check if controller buffer (60h) has data
  5668 000047B4 7504                <1>   jnz .yy
  5669 000047B6 E2F8                <1>   loop .vrd
  5670 000047B8 B301                <1>   mov  bl, 1
  5671                              <1>  .yy:
  5672 000047BA C3                  <1> ret
  5673                              <1> 
  5674                              <1> GETB:
  5675                              <1>  .cagain:
  5676 000047BB E8EAFFFFFF          <1>   call CHKMOUS		; check if a byte is available
  5677 000047C0 08DB                <1>   or bl, bl
  5678 000047C2 75F7                <1>   jnz .cagain
  5679 000047C4 B0AD                <1>   mov  al, 0xad		; Disable Keyboard
  5680 000047C6 E664                <1>   out  0x64, al		; write to keyboardcontroller
  5681 000047C8 E8A5FFFFFF          <1>   call CHKPRT		; check if command is progressed (demand!)
  5682 000047CD 6631C0              <1>   xor  ax, ax
  5683 000047D0 E460                <1>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  5684 000047D2 88C2                <1>   mov  dl, al
  5685 000047D4 B0AE                <1>   mov  al, 0xae		; Enable Keyboard
  5686 000047D6 E664                <1>   out  0x64, al		; write to keyboardcontroller
  5687 000047D8 E895FFFFFF          <1>   call CHKPRT		; check if command is progressed (demand!)
  5688 000047DD 88D0                <1>   mov  al, dl
  5689 000047DF C3                  <1> ret
  5690                              <1> 
  5691 000047E0 00                  <1> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  5692 000047E1 00                  <1> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  5693 000047E2 00                  <1> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  5694 000047E3 00                  <1> XCOORD  db 0x00	;	the moved distance  (horizontal)
  5695 000047E4 00                  <1> YCOORD  db 0x00	;	the moved distance  (vertical)
  5696 000047E5 00                  <1> mousedisabled db 0
  5697 000047E6 00                  <1> specialkey db 0
  5698                              <1> guistartin2:		;;this is basically the idle process
  5699                              <1> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  5700                              <1> 					;;this lets the cpu stay at close to 0% instead of 100%
  5701 000047E7 66B800A0            <1> 	mov ax, 0xA000	;;this is the divider for the PIT
  5702 000047EB E640                <1> 	out 0x40, al
  5703 000047ED 66C1C008            <1> 	rol ax, 8
  5704 000047F1 E640                <1> 	out 0x40, al
  5705 000047F3 A0[6C6B0000]        <1> 	mov al, [threadson]
  5706 000047F8 C605[6C6B0000]00    <1> 	mov byte [threadson], 0
  5707 000047FF FB                  <1> 	sti
  5708 00004800 F4                  <1> 	hlt
  5709 00004801 A2[6C6B0000]        <1> 	mov [threadson], al
  5710 00004806 3C02                <1> 	cmp al, 2
  5711 00004808 7401                <1> 	je guistartin
  5712 0000480A FA                  <1> 	cli
  5713                              <1> guistartin:
  5714 0000480B 31C0                <1> 		xor eax, eax
  5715 0000480D A2[E6470000]        <1> 		mov [specialkey], al
  5716 00004812 66A3[A4290000]      <1> 		mov [lastkey], ax
  5717 00004818 E464                <1> 		in al, 64h ; Status
  5718 0000481A A820                <1> 		test al, 20h ; PS2-Mouse?
  5719 0000481C 0F85EA010000        <1> 		jnz near maincall2
  5720 00004822 A801                <1> 		test al, 1 
  5721 00004824 74C1                <1> 		jz guistartin2 ; if output buffer full or no keypress, jump to idle process (only works when it is jz guistartin2, use jz guistartin to disable)
  5722                              <1> 	guigetkey:
  5723 00004826 E460                <1> 		in al, 60h
  5724 00004828 88C4                <1> 		mov ah, al
  5725 0000482A 30C0                <1> 		xor al, al
  5726 0000482C 8825[A5290000]      <1> 		mov [lastkey + 1], ah
  5727 00004832 88E0                <1> 		mov al, ah
  5728 00004834 BF[484C0000]        <1> 		mov edi, scancode
  5729                              <1> 	guisearchscan: 
  5730 00004839 3C3A                <1> 		cmp al, 3Ah
  5731 0000483B 731A                <1> 		jae guiscanother
  5732 0000483D 30E4                <1> 		xor ah, ah
  5733 0000483F C0E002              <1> 		shl al, 2
  5734 00004842 01C7                <1> 		add edi, eax
  5735 00004844 D0E8                <1> 		shr al, 1
  5736 00004846 01C7                <1> 		add edi, eax
  5737 00004848 D0E8                <1> 		shr al, 1
  5738 0000484A 8A27                <1> 		mov ah, [edi]
  5739 0000484C 80FC00              <1> 		cmp ah, 0
  5740 0000484F 7406                <1> 		je guiscanother
  5741 00004851 E9D7000000          <1> 		jmp guiscanfound
  5742 00004856 00                  <1> guiupper db 0
  5743                              <1> guiscanother:
  5744 00004857 88C4                <1> 		mov ah, al
  5745 00004859 30C0                <1> 		xor al, al
  5746 0000485B 66A3[A4290000]      <1> 		mov [lastkey], ax
  5747 00004861 80FCE0              <1> 		cmp ah, 0E0h
  5748 00004864 0F847D000000        <1> 		je near guigetkeyspecial
  5749 0000486A 803D[E6470000]E0    <1> 		cmp byte [specialkey], 0xE0
  5750 00004871 752B                <1> 		jne nospecialkey
  5751 00004873 80FC38              <1> 		cmp ah, 38h
  5752 00004876 0F84A0000000        <1> 		je near guialton
  5753 0000487C 80FCB8              <1> 		cmp ah, 0B8h
  5754 0000487F 0F849F000000        <1> 		je near guialtoff
  5755 00004885 80FC1D              <1> 		cmp ah, 1Dh
  5756 00004888 0F847E000000        <1> 		je near guictron
  5757 0000488E 80FC9D              <1> 		cmp ah, 9Dh
  5758 00004891 0F847D000000        <1> 		je near guictroff
  5759 00004897 66A3[A4290000]      <1> 		mov [lastkey], ax
  5760 0000489D C3                  <1> 		ret
  5761                              <1> nospecialkey:
  5762                              <1> 		;cmp ah, 4Dh
  5763                              <1> 		;je near nextimage
  5764 0000489E 80FC2A              <1> 		cmp ah, 2Ah
  5765 000048A1 0F8455000000        <1> 		je near guishifton
  5766 000048A7 80FC36              <1> 		cmp ah, 36h
  5767 000048AA 0F844C000000        <1> 		je near guishifton
  5768 000048B0 80FC1C              <1> 		cmp ah, 1Ch
  5769 000048B3 0F8473000000        <1> 		je near guientdown
  5770 000048B9 80FCAA              <1> 		cmp ah, 0AAh
  5771 000048BC 0F8442000000        <1> 		je near guishiftoff
  5772 000048C2 80FCB6              <1> 		cmp ah, 0B6h
  5773 000048C5 0F8439000000        <1> 		je near guishiftoff
  5774 000048CB 80FC3A              <1> 		cmp ah, 3Ah
  5775 000048CE 0F84A5000000        <1> 		je near guicaps
  5776 000048D4 80FC45              <1> 		cmp ah, 0x45
  5777 000048D7 0F84AD000000        <1> 		je near guinumlock
  5778 000048DD 80FC46              <1> 		cmp ah, 0x46
  5779 000048E0 0F84BC000000        <1> 		je near guiscrolllock
  5780 000048E6 C3                  <1> 		ret
  5781                              <1> 	guigetkeyspecial:
  5782 000048E7 C605[E6470000]E0    <1> 		mov byte [specialkey], 0xE0
  5783 000048EE E933FFFFFF          <1> 		jmp guigetkey
  5784                              <1> 	guishift:
  5785 000048F3 A0[56480000]        <1> 		mov al, [guiupper]
  5786 000048F8 3C01                <1> 		cmp al, 1
  5787 000048FA 7308                <1> 		jae guishiftoff
  5788                              <1> 	guishifton:
  5789 000048FC C605[56480000]01    <1> 		mov byte [guiupper], 1
  5790 00004903 C3                  <1> 		ret
  5791                              <1> 		;jmp guistartin
  5792                              <1> 	guishiftoff:
  5793 00004904 C605[56480000]00    <1> 		mov byte [guiupper], 0
  5794 0000490B C3                  <1> 		ret
  5795                              <1> 		;jmp guistartin
  5796                              <1> 	guictron:
  5797 0000490C C605[78490000]01    <1> 		mov byte [guictr], 1
  5798 00004913 C3                  <1> 		ret
  5799                              <1> 	guictroff:
  5800 00004914 C605[78490000]00    <1> 		mov byte [guictr], 0
  5801 0000491B C3                  <1> 		ret
  5802                              <1> 	guialton:
  5803 0000491C C605[77490000]01    <1> 		mov byte [guialt], 1
  5804 00004923 C3                  <1> 		ret
  5805                              <1> 		;jmp guistartin
  5806                              <1> 	guialtoff:
  5807 00004924 C605[77490000]00    <1> 		mov byte [guialt], 0
  5808 0000492B C3                  <1> 		ret
  5809                              <1> 		;jmp guistartin
  5810                              <1> 	guientdown:
  5811 0000492C C3                  <1> 		ret
  5812                              <1> 	guiscanfound:
  5813 0000492D 81C704000000        <1> 		add edi, 4
  5814 00004933 803D[78490000]01    <1> 		cmp byte [guictr], 1
  5815 0000493A 731B                <1> 		jae altguiin
  5816 0000493C 81EF04000000        <1> 		sub edi, 4
  5817 00004942 81C702000000        <1> 		add edi, 2
  5818 00004948 803D[77490000]01    <1> 		cmp byte [guialt], 1
  5819 0000494F 7306                <1> 		jae altguiin
  5820 00004951 81EF02000000        <1> 		sub edi, 2
  5821                              <1> altguiin:
  5822 00004957 81C701000000        <1> 		add edi, 1
  5823 0000495D 803D[56480000]01    <1> 		cmp byte [guiupper], 1
  5824 00004964 7306                <1> 		jae uppercasegui
  5825 00004966 81EF01000000        <1> 		sub edi, 1
  5826                              <1> uppercasegui:
  5827 0000496C 8A07                <1> 		mov al,[edi]
  5828 0000496E A2[A4290000]        <1> 		mov [lastkey], al
  5829 00004973 C3                  <1> 		ret
  5830                              <1> 		
  5831 00004974 00                  <1> keyboardstatus db 0
  5832 00004975 00                  <1> numlockstatus db 0
  5833 00004976 00                  <1> scrolllockstatus db 0
  5834 00004977 00                  <1> guialt db 0
  5835 00004978 00                  <1> guictr db 0
  5836                              <1> 	guicaps:
  5837 00004979 8035[74490000]04    <1> 		xor byte [keyboardstatus], 00000100b
  5838 00004980 E835000000          <1> 		call updatekblights
  5839 00004985 E969FFFFFF          <1> 		jmp guishift
  5840                              <1> 		
  5841                              <1> 	guinumlock:
  5842 0000498A 8035[74490000]02    <1> 		xor byte [keyboardstatus], 00000010b
  5843 00004991 8035[75490000]01    <1> 		xor byte [numlockstatus], 1
  5844 00004998 E81D000000          <1> 		call updatekblights
  5845 0000499D E969FEFFFF          <1> 		jmp guistartin
  5846                              <1> 	
  5847                              <1> 	guiscrolllock:
  5848 000049A2 8035[74490000]01    <1> 		xor byte [keyboardstatus], 00000001b
  5849 000049A9 8035[76490000]01    <1> 		xor byte [scrolllockstatus], 1
  5850 000049B0 E805000000          <1> 		call updatekblights
  5851 000049B5 E951FEFFFF          <1> 		jmp guistartin
  5852                              <1> 		
  5853                              <1> 	updatekblights:
  5854 000049BA B0ED                <1> 		mov al, 0xED
  5855 000049BC 66BA6000            <1> 		mov dx, 0x60
  5856 000049C0 EE                  <1> 		out dx, al
  5857                              <1> 	chkkbdack:
  5858 000049C1 EC                  <1> 		in al, dx
  5859 000049C2 3CFA                <1> 		cmp al, 0xFA
  5860 000049C4 75FB                <1> 		jne chkkbdack
  5861 000049C6 A0[74490000]        <1> 		mov al, [keyboardstatus]
  5862 000049CB EE                  <1> 		out dx, al
  5863 000049CC C3                  <1> 		ret
  5864                              <1> 	
  5865                              <1> 	cursorgui:
  5866 000049CD 803D[53600000]01    <1> 		cmp byte [mouseon], 1
  5867 000049D4 0F8432000000        <1> 		je near maincall2
  5868 000049DA 803D[164F0000]00    <1> 		cmp byte [guion], 0
  5869 000049E1 0F8445FFFFFF        <1> 		je guientdown
  5870                              <1> 	initmouse:
  5871 000049E7 803D[164F0000]00    <1> 		cmp byte [guion], 0
  5872 000049EE 7405                <1> 		je noswmsposinit
  5873 000049F0 E8DC050000          <1> 		call switchmousepos2
  5874                              <1> 	noswmsposinit:
  5875 000049F5 E86EFDFFFF          <1> 	  	call PS2SET
  5876 000049FA E897FDFFFF          <1> 		call ACTMOUS
  5877 000049FF C605[53600000]01    <1> 		mov byte [mouseon],1
  5878 00004A06 E8B0FDFFFF          <1> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  5879                              <1> 				;;If the bytes are mixed up,
  5880                              <1> 				;;remove this line or add another of this line.
  5881                              <1> 		;call GETB
  5882                              <1> 	nomouse:
  5883 00004A0B C3                  <1> 		ret
  5884                              <1> 	maincall2:
  5885 00004A0C 803D[E5470000]01    <1> 		cmp byte [mousedisabled], 1
  5886 00004A13 74F6                <1> 		je nomouse
  5887 00004A15 803D[53600000]01    <1> 		  cmp byte [mouseon], 1
  5888 00004A1C 75C9                <1> 		  jne initmouse
  5889 00004A1E E898FDFFFF          <1> 		  call GETB
  5890 00004A23 88C3                <1> 		  mov  bl, al
  5891 00004A25 80E301              <1> 		  and  bl, 1
  5892 00004A28 881D[E0470000]      <1> 		  mov  BYTE [LBUTTON], bl
  5893 00004A2E 88C3                <1> 		  mov  bl, al
  5894 00004A30 80E302              <1> 		  and  bl, 2
  5895 00004A33 D0EB                <1> 		  shr  bl, 1
  5896 00004A35 881D[E1470000]      <1> 		  mov  BYTE [RBUTTON], bl
  5897 00004A3B 88C3                <1> 		  mov  bl, al
  5898 00004A3D 80E304              <1> 		  and  bl, 4
  5899 00004A40 C0EB02              <1> 		  shr  bl, 2
  5900 00004A43 881D[E2470000]      <1> 		  mov  BYTE [MBUTTON], bl
  5901 00004A49 E86DFDFFFF          <1> 		  call GETB
  5902 00004A4E A2[E3470000]        <1> 		  mov  BYTE [XCOORD], al
  5903 00004A53 E863FDFFFF          <1> 		  call GETB
  5904 00004A58 A2[E4470000]        <1> 		  mov  BYTE [YCOORD], al
  5905                              <1> 
  5906                              <1> 	showpixelcursor:
  5907 00004A5D 668B15[AF4B0000]    <1> 		mov dx, [mousecursorposition]
  5908 00004A64 668B0D[B14B0000]    <1> 		mov cx, [mousecursorposition + 2]
  5909 00004A6B 668915[AB4B0000]    <1> 		mov [lastmouseposition], dx
  5910 00004A72 66890D[AD4B0000]    <1> 		mov [lastmouseposition + 2], cx
  5911 00004A79 A0[E3470000]        <1> 		mov al, [XCOORD]
  5912 00004A7E 3C80                <1> 		cmp al, 128
  5913 00004A80 730C                <1> 		jae subxcoord
  5914 00004A82 00C0                <1> 		add al, al
  5915 00004A84 30E4                <1> 		xor ah, ah
  5916 00004A86 6601C2              <1> 		add dx, ax
  5917 00004A89 E90B000000          <1> 		jmp subxcoorddn
  5918                              <1> 	subxcoord:
  5919 00004A8E 00C0                <1> 		add al, al
  5920 00004A90 30DB                <1> 		xor bl, bl
  5921 00004A92 28C3                <1> 		sub bl, al
  5922 00004A94 30FF                <1> 		xor bh, bh
  5923 00004A96 6629DA              <1> 		sub dx, bx
  5924                              <1> 	subxcoorddn:
  5925 00004A99 8A1D[E4470000]      <1> 		mov bl, [YCOORD]
  5926 00004A9F 30C0                <1> 		xor al, al
  5927 00004AA1 28D8                <1> 		sub al, bl
  5928 00004AA3 3C80                <1> 		cmp al, 128
  5929 00004AA5 730A                <1> 		jae subycoord
  5930 00004AA7 30E4                <1> 		xor ah, ah
  5931 00004AA9 6601C1              <1> 		add cx, ax
  5932 00004AAC E909000000          <1> 		jmp subycoorddn
  5933                              <1> 	subycoord:
  5934 00004AB1 30DB                <1> 		xor bl, bl
  5935 00004AB3 28C3                <1> 		sub bl, al
  5936 00004AB5 30FF                <1> 		xor bh, bh
  5937 00004AB7 6629D9              <1> 		sub cx, bx
  5938                              <1> 	subycoorddn:
  5939 00004ABA 6681FA204E          <1> 		cmp dx, 20000
  5940 00004ABF 7603                <1> 		jbe nooriginx2
  5941 00004AC1 6631D2              <1> 		xor dx, dx
  5942                              <1> 	nooriginx2:
  5943 00004AC4 6681F9204E          <1> 		cmp cx, 20000
  5944 00004AC9 7603                <1> 		jbe nooriginy2
  5945 00004ACB 6631C9              <1> 		xor cx, cx
  5946                              <1> 	nooriginy2:
  5947 00004ACE 6681FA0000          <1> 		cmp dx, 0
  5948 00004AD3 7415                <1> 		je nofixxcolumn2
  5949 00004AD5 663B15[995D0000]    <1> 		cmp dx, [resolutionx2]
  5950 00004ADC 720C                <1> 		jb nofixxcolumn2
  5951 00004ADE 668B15[995D0000]    <1> 		mov dx, [resolutionx2]
  5952 00004AE5 6681EA0200          <1> 		sub dx, 2
  5953                              <1> 	nofixxcolumn2:
  5954 00004AEA 6681F90000          <1> 		cmp cx, 0
  5955 00004AEF 7415                <1> 		je nofixyrow2
  5956 00004AF1 663B0D[955D0000]    <1> 		cmp cx, [resolutiony]
  5957 00004AF8 720C                <1> 		jb nofixyrow2
  5958 00004AFA 668B0D[955D0000]    <1> 		mov cx, [resolutiony]
  5959 00004B01 6681E90100          <1> 		sub cx, 1
  5960                              <1> 	nofixyrow2:
  5961 00004B06 668915[AF4B0000]    <1> 		mov [mousecursorposition], dx
  5962 00004B0D 66890D[B14B0000]    <1> 		mov [mousecursorposition + 2], cx
  5963 00004B14 803D[164F0000]00    <1> 		cmp byte [guion], 0
  5964 00004B1B 0F8492000000        <1> 		je near termmouse
  5965 00004B21 E84B040000          <1> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  5966 00004B26 803D[E0470000]01    <1> 		cmp byte [LBUTTON], 1
  5967 00004B2D 0F8412050000        <1> 		je near clickicon
  5968 00004B33 803D[E1470000]01    <1> 		cmp byte [RBUTTON], 1
  5969 00004B3A 0F8405050000        <1> 		je near clickicon
  5970 00004B40 A0[32500000]        <1> 		mov al, [pbutton]
  5971 00004B45 C705[35500000]0000- <1> 		mov dword [dragging], 0
  5972 00004B4D 0000                <1>
  5973 00004B4F 3C00                <1> 		cmp al, 0
  5974 00004B51 740F                <1> 		je nopreviousbutton
  5975 00004B53 E8BF030000          <1> 		call clearmousecursor
  5976 00004B58 E8290A0000          <1> 		call reloadallgraphics
  5977                              <1> 	windowtermcopyend:
  5978 00004B5D E86F040000          <1> 		call switchmousepos2
  5979                              <1> 	nopreviousbutton:
  5980 00004B62 30C0                <1> 		xor al, al
  5981 00004B64 A2[32500000]        <1> 		mov [pbutton], al
  5982 00004B69 A0[E0470000]        <1> 		mov al, [LBUTTON]
  5983 00004B6E A2[33500000]        <1> 		mov [pLBUTTON], al
  5984 00004B73 A0[E1470000]        <1> 		mov al, [RBUTTON]
  5985 00004B78 A2[34500000]        <1> 		mov [pRBUTTON], al
  5986 00004B7D 31C9                <1> 		xor ecx, ecx
  5987 00004B7F 31D2                <1> 		xor edx, edx
  5988 00004B81 668B15[AF4B0000]    <1> 		mov dx, [mousecursorposition]
  5989 00004B88 668B0D[B14B0000]    <1> 		mov cx, [mousecursorposition + 2]
  5990 00004B8F 66BB18C7            <1> 		mov bx, 1100011100011000b
  5991 00004B93 30E4                <1> 		xor ah, ah
  5992 00004B95 B0FE                <1> 		mov al, 254
  5993 00004B97 C605[134F0000]01    <1> 		mov byte [showcursorfonton], 1
  5994 00004B9E E806120000          <1> 		call showfontvesa
  5995 00004BA3 C605[134F0000]00    <1> 		mov byte [showcursorfonton], 0
  5996 00004BAA C3                  <1> 		ret
  5997                              <1> 
  5998 00004BAB 84008400            <1> lastmouseposition dw 132,132
  5999 00004BAF 84008400            <1> mousecursorposition dw 132,132	
  6000                              <1> 
  6001                              <1> termmouse:
  6002 00004BB3 BE[8F1D0000]        <1> 		mov esi, videobuf
  6003 00004BB8 31D2                <1> 		xor edx, edx
  6004 00004BBA 668B15[AB4B0000]    <1> 		mov dx, [lastmouseposition]
  6005 00004BC1 668B0D[AD4B0000]    <1> 		mov cx, [lastmouseposition + 2]
  6006 00004BC8 66A1[464C0000]      <1> 		mov ax, [cursorcache]
  6007 00004BCE 663D0000            <1> 		cmp ax, 0
  6008 00004BD2 7425                <1> 		je nocopycursorcache
  6009 00004BD4 66C1E104            <1> 		shl cx, 4
  6010 00004BD8 66C1E203            <1> 		shl dx, 3
  6011 00004BDC 01D6                <1> 		add esi, edx
  6012 00004BDE 6631D2              <1> 		xor dx, dx
  6013 00004BE1 8A15[E1270000]      <1> 		mov dl, [charxy]
  6014 00004BE7 6641                <1> 		inc cx
  6015                              <1> termmousecplp1:
  6016 00004BE9 01D6                <1> 		add esi, edx
  6017 00004BEB 6649                <1> 		dec cx
  6018 00004BED 6681F90000          <1> 		cmp cx, 0
  6019 00004BF2 75F5                <1> 		jne termmousecplp1
  6020 00004BF4 29D6                <1> 		sub esi, edx
  6021 00004BF6 668906              <1> 		mov [esi], ax
  6022                              <1> nocopycursorcache:
  6023 00004BF9 BE[8F1D0000]        <1> 		mov esi, videobuf
  6024 00004BFE 31D2                <1> 		xor edx, edx
  6025 00004C00 668B15[AF4B0000]    <1> 		mov dx, [mousecursorposition]
  6026 00004C07 668B0D[B14B0000]    <1> 		mov cx, [mousecursorposition + 2]
  6027 00004C0E 66C1E104            <1> 		shl cx, 4
  6028 00004C12 66C1E203            <1> 		shl dx, 3
  6029 00004C16 01D6                <1> 		add esi, edx
  6030 00004C18 6631D2              <1> 		xor dx, dx
  6031 00004C1B 8A15[E1270000]      <1> 		mov dl, [charxy]
  6032 00004C21 6641                <1> 		inc cx
  6033                              <1> termmousecplp2:
  6034 00004C23 01D6                <1> 		add esi, edx
  6035 00004C25 6649                <1> 		dec cx
  6036 00004C27 6681F90000          <1> 		cmp cx, 0
  6037 00004C2C 75F5                <1> 		jne termmousecplp2
  6038 00004C2E 29D6                <1> 		sub esi, edx
  6039 00004C30 668B06              <1> 		mov ax, [esi]
  6040 00004C33 66A3[464C0000]      <1> 		mov [cursorcache], ax
  6041 00004C39 B080                <1> 		mov al, 128
  6042 00004C3B B407                <1> 		mov ah, 7
  6043 00004C3D 668906              <1> 		mov [esi], ax
  6044 00004C40 E820E1FFFF          <1> 		call termcopy
  6045 00004C45 C3                  <1> 		ret
  6046 00004C46 0000                <1> cursorcache db 0,0
  6047                              <1> 	
  6048                              <1> scancode:
  6049 00004C48 000000000000        <1> 	db 0,0,0,0,0,0			;,0h
  6050 00004C4E 000000000000        <1> 	db 0,0,0,0,0,0			;,1h
  6051 00004C54 3121AD000000        <1> 	db '1','!',173,0,0,0	;,2h
  6052 00004C5A 3240FDFB0000        <1> 	db '2','@',253,251,0,0	;,3h
  6053 00004C60 332300000000        <1> 	db '3','#',0,0,0,0		;,4h
  6054 00004C66 34249B9C0000        <1> 	db '4','$',155,156,0,0	;,5h
  6055 00004C6C 3525EE000000        <1> 	db '5','%',238,0,0,0	;,6h
  6056 00004C72 365EAC000000        <1> 	db '6','^',172,0,0,0	;,7h
  6057 00004C78 3726AB000000        <1> 	db '7','&',171,0,0,0	;,8h
  6058 00004C7E 382A00000000        <1> 	db '8','*',0,0,0,0		;,9h
  6059 00004C84 392800000000        <1> 	db '9','(',0,0,0,0		;,0Ah
  6060 00004C8A 302900000000        <1> 	db '0',')',0,0,0,0		;,0Bh
  6061 00004C90 2D5F9DF10000        <1> 	db '-','_',157,241,0,0	;,0Ch
  6062 00004C96 3D2BF7F60000        <1> 	db '=','+',247,246,0,0	;,0Dh
  6063 00004C9C 080800000000        <1> 	db 8,8,0,0,0,0			;,0Eh
  6064 00004CA2 000000000000        <1> 	db 0,0,0,0,0,0			;,0Fh
  6065 00004CA8 7151848E0000        <1> 	db 'q','Q',132,142,0,0	;,10h
  6066 00004CAE 7757868F0000        <1> 	db 'w','W',134,143,0,0	;,11h
  6067 00004CB4 65458290EE45        <1> 	db 'e','E',130,144,238,'E'	;,12h
  6068 00004CBA 7252898A7050        <1> 	db 'r','R',137,138,'p','P'		;,13h
  6069 00004CC0 7454819AE754        <1> 	db 't','T',129,154,231,'T'		;,14h
  6070 00004CC6 795998007559        <1> 	db 'y','Y',152,0,'u','Y'	;,15h
  6071 00004CCC 7555A3970000        <1> 	db 'u','U',163,151,0,0	;,16h
  6072 00004CD2 6949A18D6949        <1> 	db 'i','I',161,141,'i','I'	;,17h
  6073 00004CD8 6F4FA29577EA        <1> 	db 'o','O',162,149,'w',234	;,18h
  6074 00004CDE 70509499E3EF        <1> 	db 'p','P',148,153,227,239	;,19h
  6075 00004CE4 5B7BF4000000        <1> 	db '[','{',244,0,0,0		;,1Ah
  6076 00004CEA 5D7DF5000000        <1> 	db ']','}',245,0,0,0		;,1Bh
  6077 00004CF0 000000000000        <1> 	db 0,0,0,0,0,0			;,1Ch
  6078 00004CF6 000000000000        <1> 	db 0,0,0,0,0,0			;,1Dh
  6079 00004CFC 6141A085E041        <1> 	db 'a','A',160,133,224,'A'	;,1Eh
  6080 00004D02 73531500E5E4        <1> 	db 's','S',21,0,229,228		;,1Fh
  6081 00004D08 6444F800EB7F        <1> 	db 'd','D',248,0,235,127	;,20h
  6082 00004D0E 66469F00EDE8        <1> 	db 'f','F',159,0,237,232	;,21h
  6083 00004D14 6747000079E2        <1> 	db 'g','G',0,0,'y',226		;,22h
  6084 00004D1A 684800006E48        <1> 	db 'h','H',0,0,'n','H'		;,23h
  6085 00004D20 6A4A00000000        <1> 	db 'j','J',0,0,0,0		;,24h
  6086 00004D26 6B4B00006B4B        <1> 	db 'k','K',0,0,'k','K'		;,25h
  6087 00004D2C 6C4C0000E9E9        <1> 	db 'l','L',0,0,233,233		;,26h
  6088 00004D32 3B3A14000000        <1> 	db ';',':',20,0,0,0		;,27h
  6089 00004D38 272200000000        <1> 	db 27h,22h,0,0,0,0		;,28h
  6090 00004D3E 607E00000000        <1> 	db '`','~',0,0,0,0		;,29h
  6091 00004D44 000000000000        <1> 	db 0,0,0,0,0,0			;,2Ah
  6092 00004D4A 5C7CAAB30000        <1> 	db '\','|',170,179,0,0	;,2Bh
  6093 00004D50 7A5A91927A5A        <1> 	db 'z','Z',145,146,'z','Z'	;,2Ch
  6094 00004D56 7858000000F0        <1> 	db 'x','X',0,0,0,240		;,2Dh
  6095 00004D5C 634387800000        <1> 	db 'c','C',135,128,0,0	;,2Eh
  6096 00004D62 765600000000        <1> 	db 'v','V',0,0,0,0		;,2Fh
  6097 00004D68 62420000E142        <1> 	db 'b','B',0,0,225,'B'	;,30h
  6098 00004D6E 6E4EA4A5764E        <1> 	db 'n','N',164,165,'v','N'	;,31h
  6099 00004D74 6D4D0000E64D        <1> 	db 'm','M',0,0,230,'M'		;,32h
  6100 00004D7A 2C3CF3AE0000        <1> 	db ',','<',243,174,0,0	;,33h
  6101 00004D80 2E3EF2AF0000        <1> 	db '.','>',242,175,0,0	;,34h
  6102 00004D86 2F3FA8000000        <1> 	db '/','?',168,0,0,0	;,35h
  6103 00004D8C 000000000000        <1> 	db 0,0,0,0,0,0			;,36h
  6104 00004D92 000000000000        <1> 	db 0,0,0,0,0,0			;,37h
  6105 00004D98 000000000000        <1> 	db 0,0,0,0,0,0			;,38h
  6106 00004D9E 202000000000        <1> 	db ' ',' ',0,0,0,0		;,39h
  6107                              <1> noscan:
  6108                                      %include 'source/gui.asm'
  6109                              <1> guiclear:
  6110 00004DA4 8B3D[FE840000]      <1> 	mov edi, [physbaseptr]
  6111 00004DAA 668B15[975D0000]    <1> 	mov dx, [resolutionx]
  6112 00004DB1 668B0D[955D0000]    <1> 	mov cx, [resolutiony]
  6113 00004DB8 66A1[E14D0000]      <1> 	mov ax, [background]
  6114                              <1> guiclearloop:
  6115 00004DBE 668907              <1> 	mov [edi], ax
  6116 00004DC1 81C702000000        <1> 	add edi, 2
  6117 00004DC7 664A                <1> 	dec dx
  6118 00004DC9 6681FA0000          <1> 	cmp dx, 0
  6119 00004DCE 77EE                <1> 	ja guiclearloop
  6120 00004DD0 6649                <1> 	dec cx
  6121 00004DD2 668B15[975D0000]    <1> 	mov dx, [resolutionx]
  6122 00004DD9 6681F90000          <1> 	cmp cx, 0
  6123 00004DDE 77DE                <1> 	ja guiclearloop
  6124 00004DE0 C3                  <1> 	ret
  6125                              <1> 
  6126 00004DE1 CF7B                <1> background dw 0111101111001111b
  6127                              <1> 
  6128                              <1> gui:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  6129 00004DE3 31C0                <1> 	xor eax, eax
  6130 00004DE5 31DB                <1> 	xor ebx, ebx
  6131 00004DE7 31C9                <1> 	xor ecx, ecx
  6132 00004DE9 31D2                <1> 	xor edx, edx
  6133 00004DEB 8B3D[FE840000]      <1> 	mov edi, [physbaseptr]
  6134 00004DF1 668B15[975D0000]    <1> 	mov dx, [resolutionx]
  6135 00004DF8 668B0D[955D0000]    <1> 	mov cx, [resolutiony]
  6136 00004DFF 668B1D[E14D0000]    <1> 	mov bx, [background]
  6137                              <1> guiclearloop2:
  6138 00004E06 66891F              <1> 	mov [edi], bx
  6139 00004E09 81C702000000        <1> 	add edi, 2
  6140 00004E0F 664A                <1> 	dec dx
  6141 00004E11 6681FA0000          <1> 	cmp dx, 0
  6142 00004E16 0F85EAFFFFFF        <1> 	jne near guiclearloop2
  6143 00004E1C 6649                <1> 	dec cx
  6144 00004E1E 668B15[975D0000]    <1> 	mov dx, [resolutionx]
  6145 00004E25 6681F90000          <1> 	cmp cx, 0
  6146 00004E2A 0F85D6FFFFFF        <1> 	jne near guiclearloop2
  6147 00004E30 C605[164F0000]01    <1> 	mov byte [guion], 1
  6148 00004E37 C605[154F0000]00    <1> 	mov byte [mouseselecton], 0
  6149 00004E3E 31C0                <1> 	xor eax, eax
  6150 00004E40 31DB                <1> 	xor ebx, ebx
  6151 00004E42 31C9                <1> 	xor ecx, ecx
  6152 00004E44 31D2                <1> 	xor edx, edx
  6153                              <1> 	
  6154 00004E46 BE[68600000]        <1> 	mov esi, pacmsg
  6155 00004E4B 6631C0              <1> 	xor ax, ax
  6156 00004E4E 31DB                <1> 	xor ebx, ebx
  6157 00004E50 66B99000            <1> 	mov cx, 144
  6158 00004E54 66BA0400            <1> 	mov dx, 4
  6159 00004E58 E86A0A0000          <1> 	call showstring
  6160                              <1> 	
  6161 00004E5D BE[D7610000]        <1> 	mov esi, interneticon
  6162 00004E62 6631C0              <1> 	xor ax, ax
  6163 00004E65 BB[D5600000]        <1> 	mov ebx, noie
  6164 00004E6A 66B91800            <1> 	mov cx, 24
  6165 00004E6E 66BA0400            <1> 	mov dx, 4
  6166 00004E72 E8520E0000          <1> 	call showicon
  6167                              <1> 	
  6168 00004E77 BE[59620000]        <1> 	mov esi, wordicon
  6169 00004E7C 6631C0              <1> 	xor ax, ax
  6170 00004E7F 31DB                <1> 	xor ebx, ebx
  6171 00004E81 66B91800            <1> 	mov cx, 24
  6172 00004E85 66BA3000            <1> 	mov dx, 48
  6173 00004E89 E83B0E0000          <1> 	call showicon
  6174                              <1> 	
  6175 00004E8E BE[DB620000]        <1> 	mov esi, pacmanpellet
  6176 00004E93 6631C0              <1> 	xor ax, ax
  6177 00004E96 31DB                <1> 	xor ebx, ebx
  6178 00004E98 66B94000            <1> 	mov cx, 64
  6179 00004E9C 66BA0400            <1> 	mov dx, 4
  6180 00004EA0 E8240E0000          <1> 	call showicon
  6181                              <1> 	
  6182 00004EA5 BE[DF630000]        <1> 	mov esi, pacman
  6183 00004EAA 6631C0              <1> 	xor ax, ax
  6184 00004EAD BB[BE600000]        <1> 	mov ebx, pacmannomnom
  6185 00004EB2 66B94000            <1> 	mov cx, 64
  6186 00004EB6 66BA3000            <1> 	mov dx, 48
  6187 00004EBA E80A0E0000          <1> 	call showicon
  6188                              <1> 	
  6189 00004EBF BE[5D630000]        <1> 	mov esi, ghostie
  6190 00004EC4 6631C0              <1> 	xor ax, ax
  6191 00004EC7 BB[A7600000]        <1> 	mov ebx, boo
  6192 00004ECC 66B96C00            <1> 	mov cx, 108
  6193 00004ED0 66BA0400            <1> 	mov dx, 4
  6194 00004ED4 E8F00D0000          <1> 	call showicon
  6195                              <1> 
  6196 00004ED9 BE[54600000]        <1> 	mov esi, start
  6197 00004EDE 668B0D[955D0000]    <1> 	mov cx, [resolutiony]
  6198 00004EE5 6681E91000          <1> 	sub cx, 16
  6199 00004EEA 66BA0200            <1> 	mov dx, 2
  6200 00004EEE 30E4                <1> 	xor ah, ah
  6201 00004EF0 B010                <1> 	mov al, 00010000b
  6202 00004EF2 BB[84610000]        <1> 	mov ebx, winblows
  6203 00004EF7 E8CB090000          <1> 	call showstring
  6204                              <1> 	
  6205 00004EFC E8CCFAFFFF          <1> 	call cursorgui
  6206                              <1> guistart:
  6207 00004F01 E805F9FFFF          <1> 	call guistartin
  6208 00004F06 C605[0F4F0000]00    <1> 	mov byte [copygui], 0
  6209 00004F0D EBF2                <1> 	jmp guistart
  6210                              <1> 	
  6211                              <1> ;guicopy:	;;for double buffering
  6212                              <1> ;	mov byte [copygui], 1
  6213                              <1> ;	mov edi, [offscreenmemoffset]
  6214                              <1> ;	xor edx, edx
  6215                              <1> ;	xor ecx, ecx
  6216                              <1> ;	mov dx, [mousecursorposition]
  6217                              <1> ;	mov cx, [mousecursorposition + 2]
  6218                              <1> ;	add edi, edx
  6219                              <1> ;	mov dx, [resolutionx2]
  6220                              <1> ;	inc cx
  6221                              <1> ;guicp2:
  6222                              <1> ;	add edi, edx
  6223                              <1> ;	dec cx
  6224                              <1> ;	cmp cx, 0
  6225                              <1> ;	jne guicp2
  6226                              <1> ;	sub edi, edx
  6227                              <1> ;	mov [cursorloc], edi
  6228                              <1> ;	mov ebx, cursorbmp
  6229                              <1> ;	mov cx, [resolutiony]
  6230                              <1> ;	rol ecx, 16
  6231                              <1> ;	mov cx, [resolutionx]
  6232                              <1> ;	mov esi, [physbaseptr]
  6233                              <1> ;	mov edi, [offscreenmemoffset]
  6234                              <1> ;guicp1:
  6235                              <1> ;	mov ax, [esi]
  6236                              <1> ;	mov [edi], ax
  6237                              <1> ;	add esi, 2
  6238                              <1> ;	add edi, 2
  6239                              <1> ;	cmp edi, [cursorloc]
  6240                              <1> ;	je copycursor
  6241                              <1> ;dncopycursor:
  6242                              <1> ;	dec cx
  6243                              <1> ;	cmp cx, 0
  6244                              <1> ;	jne guicp1
  6245                              <1> ;	mov cx, [resolutionx]
  6246                              <1> ;	rol ecx, 16
  6247                              <1> ;	dec cx
  6248                              <1> ;	cmp cx, 0
  6249                              <1> ;	rol ecx, 16
  6250                              <1> ;	jne guicp1
  6251                              <1> ;	mov byte [copygui], 0
  6252                              <1> ;	ret
  6253                              <1> ;copycursor:
  6254                              <1> ;	cmp ebx, cursorbmpend
  6255                              <1> ;	jae dncopycursor
  6256                              <1> ;	mov dx, [resolutionx2]
  6257                              <1> ;	add edi, edx
  6258                              <1> ;	mov [cursorloc], edi
  6259                              <1> ;	sub edi, edx
  6260                              <1> ;	dec ebx
  6261                              <1> ;	sub edi, 2
  6262                              <1> ;	sub esi, 2
  6263                              <1> ;	mov dx, 9
  6264                              <1> ;curscplp:
  6265                              <1> ;	inc ebx
  6266                              <1> ;	add esi, 2
  6267                              <1> ;	add edi, 2
  6268                              <1> ;	mov ax, [esi]
  6269                              <1> ;	mov [edi], ax
  6270                              <1> ;	mov al, [ebx]
  6271                              <1> ;	cmp al, 0
  6272                              <1> ;	je curscplp2
  6273                              <1> ;	mov word [edi], 1110011110011100b
  6274                              <1> ;curscplp2:
  6275                              <1> ;	dec cx
  6276                              <1> ;	cmp cx, 0
  6277                              <1> ;	je dncopycursor
  6278                              <1> ;	dec dx
  6279                              <1> ;	cmp dx, 0
  6280                              <1> ;	jne curscplp
  6281                              <1> ;	jmp dncopycursor
  6282                              <1> 	
  6283                              <1> 	
  6284                              <1> ;cursorloc: dd 0
  6285                              <1> 		
  6286                              <1> ;nextimage:	
  6287                              <1> ;	call guiclear
  6288                              <1> ;	mov esi, [bmpend]
  6289                              <1> ;	xor eax, eax
  6290                              <1> ;	xor ebx, ebx
  6291                              <1> ;	xor ecx, ecx
  6292                              <1> ;	xor edx, edx
  6293                              <1> ;	call showbmp
  6294                              <1> ;	jmp guistartin
  6295                              <1> 		
  6296 00004F0F 00                  <1> copygui db 0
  6297 00004F10 00                  <1> graphicsset db 0
  6298 00004F11 0000                <1> graphicspos db 0,0
  6299 00004F13 00                  <1> showcursorfonton db 0
  6300 00004F14 00                  <1> savefonton db 0
  6301 00004F15 00                  <1> mouseselecton db 0
  6302 00004F16 00                  <1> guion db 0
  6303                              <1> 
  6304                              <1> 		
  6305                              <1> clearmousecursor:
  6306 00004F17 BE[E14D0000]        <1> 		mov esi, background
  6307 00004F1C 8B3D[FE840000]      <1> 		mov edi, [physbaseptr]
  6308 00004F22 31D2                <1> 		xor edx, edx
  6309 00004F24 31C9                <1> 		xor ecx, ecx
  6310 00004F26 668B15[AB4B0000]    <1> 		mov dx, [lastmouseposition]
  6311 00004F2D 668B0D[AD4B0000]    <1> 		mov cx, [lastmouseposition + 2]
  6312 00004F34 01D7                <1> 		add edi, edx
  6313 00004F36 31D2                <1> 		xor edx, edx
  6314 00004F38 668B15[995D0000]    <1> 		mov dx, [resolutionx2]
  6315 00004F3F 6681F90000          <1> 		cmp cx, 0
  6316 00004F44 740B                <1> 		je noyclr
  6317 00004F46 01D7                <1> yclr:	add edi, edx
  6318 00004F48 6649                <1> 		dec cx
  6319 00004F4A 6681F90000          <1> 		cmp cx, 0
  6320 00004F4F 75F5                <1> 		jne yclr
  6321 00004F51 668B06              <1> noyclr:	mov ax, [esi]
  6322 00004F54 C1C010              <1> 		rol eax, 16
  6323 00004F57 668B06              <1> 		mov ax, [esi]
  6324 00004F5A 8907                <1> 		mov [edi], eax
  6325 00004F5C 894704              <1> 		mov [edi + 4], eax
  6326 00004F5F 894708              <1> 		mov [edi + 8], eax
  6327 00004F62 89470C              <1> 		mov [edi + 12], eax
  6328 00004F65 01D7                <1> 		add edi, edx
  6329 00004F67 6641                <1> 		inc cx
  6330 00004F69 6681F91000          <1> 		cmp cx, 16
  6331 00004F6E 72E1                <1> 		jb noyclr
  6332 00004F70 C3                  <1> 		ret
  6333                              <1> 
  6334                              <1> switchmousepos:		;;switch were the mouse is located
  6335 00004F71 BE[00120000]        <1> 		mov esi, mousecolorbuf
  6336 00004F76 8B3D[FE840000]      <1> 		mov edi, [physbaseptr]
  6337 00004F7C 31D2                <1> 		xor edx, edx
  6338 00004F7E 31C9                <1> 		xor ecx, ecx
  6339 00004F80 668B15[AB4B0000]    <1> 		mov dx, [lastmouseposition]
  6340 00004F87 668B0D[AD4B0000]    <1> 		mov cx, [lastmouseposition + 2]
  6341 00004F8E 01D7                <1> 		add edi, edx
  6342 00004F90 31D2                <1> 		xor edx, edx
  6343 00004F92 668B15[995D0000]    <1> 		mov dx, [resolutionx2]
  6344 00004F99 6681F90000          <1> 		cmp cx, 0
  6345 00004F9E 740B                <1> 		je noswmsy
  6346 00004FA0 01D7                <1> swmsy:		add edi, edx
  6347 00004FA2 6649                <1> 		dec cx
  6348 00004FA4 6681F90000          <1> 		cmp cx, 0
  6349 00004FA9 75F5                <1> 		jne swmsy
  6350 00004FAB 8B06                <1> noswmsy:	mov eax, [esi]
  6351 00004FAD 8B5E04              <1> 		mov ebx, [esi + 4]
  6352 00004FB0 8907                <1> 		mov [edi], eax
  6353 00004FB2 895F04              <1> 		mov [edi + 4], ebx
  6354 00004FB5 8B4608              <1> 		mov eax, [esi + 8]
  6355 00004FB8 8B5E0C              <1> 		mov ebx, [esi + 12]
  6356 00004FBB 894708              <1> 		mov [edi + 8], eax
  6357 00004FBE 895F0C              <1> 		mov [edi + 12], ebx
  6358 00004FC1 01D7                <1> 		add edi, edx
  6359 00004FC3 81C610000000        <1> 		add esi, 16
  6360 00004FC9 81FE[00130000]      <1> 		cmp esi, mcolorend
  6361 00004FCF 72DA                <1> 		jb noswmsy
  6362                              <1> 		
  6363                              <1> switchmousepos2:
  6364 00004FD1 BE[00120000]        <1> 		mov esi, mousecolorbuf
  6365 00004FD6 8B3D[FE840000]      <1> 		mov edi, [physbaseptr]
  6366 00004FDC 31D2                <1> 		xor edx, edx
  6367 00004FDE 31C9                <1> 		xor ecx, ecx
  6368 00004FE0 668B15[AF4B0000]    <1> 		mov dx, [mousecursorposition]
  6369 00004FE7 668B0D[B14B0000]    <1> 		mov cx, [mousecursorposition + 2]
  6370 00004FEE 01D7                <1> 		add edi, edx
  6371 00004FF0 31D2                <1> 		xor edx, edx
  6372 00004FF2 668B15[995D0000]    <1> 		mov dx, [resolutionx2]
  6373 00004FF9 6681F90000          <1> 		cmp cx, 0
  6374 00004FFE 740B                <1> 		je noswmsy2
  6375 00005000 01D7                <1> swmsy2:		add edi, edx
  6376 00005002 6649                <1> 		dec cx
  6377 00005004 6681F90000          <1> 		cmp cx, 0
  6378 00005009 75F5                <1> 		jne swmsy2
  6379 0000500B 8B07                <1> noswmsy2:	mov eax, [edi]
  6380 0000500D 8B5F04              <1> 		mov ebx, [edi + 4]
  6381 00005010 8906                <1> 		mov [esi], eax
  6382 00005012 895E04              <1> 		mov [esi + 4], ebx
  6383 00005015 8B4708              <1> 		mov eax, [edi + 8]
  6384 00005018 8B5F0C              <1> 		mov ebx, [edi + 12]
  6385 0000501B 894608              <1> 		mov [esi + 8], eax
  6386 0000501E 895E0C              <1> 		mov [esi + 12], ebx
  6387 00005021 01D7                <1> 		add edi, edx
  6388 00005023 81C610000000        <1> 		add esi, 16
  6389 00005029 81FE[00130000]      <1> 		cmp esi, mcolorend
  6390 0000502F 72DA                <1> 		jb noswmsy2
  6391 00005031 C3                  <1> 		ret
  6392                              <1> 
  6393 00005032 00                  <1> pbutton db 0
  6394 00005033 00                  <1> pLBUTTON db 0
  6395 00005034 00                  <1> pRBUTTON db 0
  6396 00005035 00000000            <1> dragging dw 0,0
  6397 00005039 0000000000000000    <1> lastpos dw 0,0,0,0
  6398 00005041 00000000            <1> colorbuf dw 0,0
  6399                              <1> 	
  6400                              <1> 	clickicon:
  6401 00005045 B001                <1> 		mov al, 1
  6402 00005047 A2[32500000]        <1> 		mov [pbutton], al
  6403 0000504C A0[33500000]        <1> 		mov al, [pLBUTTON]
  6404 00005051 2205[E0470000]      <1> 		and al, [LBUTTON]
  6405 00005057 8A25[34500000]      <1> 		mov ah, [pRBUTTON]
  6406 0000505D 2225[E1470000]      <1> 		and ah, [RBUTTON]
  6407 00005063 08E0                <1> 		or al, ah
  6408 00005065 3C00                <1> 		cmp al, 0
  6409 00005067 741B                <1> 		je nodragclick
  6410 00005069 813D[35500000]0100- <1> 		cmp dword [dragging], 1
  6411 00005071 0000                <1>
  6412 00005073 732D                <1> 		jae dragclick
  6413 00005075 C705[35500000]0100- <1> 		mov dword [dragging], 1
  6414 0000507D 0000                <1>
  6415 0000507F E91E000000          <1> 		jmp dragclick
  6416                              <1> 	nodragclick:
  6417 00005084 C705[35500000]0000- <1> 		mov dword [dragging], 0
  6418 0000508C 0000                <1>
  6419 0000508E A0[E0470000]        <1> 		mov al, [LBUTTON]
  6420 00005093 A2[33500000]        <1> 		mov [pLBUTTON], al
  6421 00005098 A0[E1470000]        <1> 		mov al, [RBUTTON]
  6422 0000509D A2[34500000]        <1> 		mov [pRBUTTON], al
  6423                              <1> 	dragclick:
  6424 000050A2 6631C0              <1> 		xor ax, ax
  6425 000050A5 BE[00100000]        <1> 		mov esi, graphicstable
  6426 000050AA C705[A2600000]0000- <1> 		mov dword [codepointer], 0
  6427 000050B2 0000                <1>
  6428                              <1> 	clicon2:
  6429 000050B4 31D2                <1> 		xor edx, edx
  6430 000050B6 31C9                <1> 		xor ecx, ecx
  6431 000050B8 66813E0100          <1> 		cmp word [esi], 1
  6432 000050BD 0F841B000000        <1> 		je near iconselect
  6433 000050C3 66813E0200          <1> 		cmp word [esi], 2
  6434 000050C8 0F8472010000        <1> 		je near textselected
  6435 000050CE 66813E0300          <1> 		cmp word [esi], 3
  6436 000050D3 0F84C7020000        <1> 		je near windowselect
  6437 000050D9 E90B040000          <1> 		jmp nexticonsel
  6438                              <1> 	iconselect:
  6439 000050DE 668B5606            <1> 		mov dx, [esi + 6]
  6440 000050E2 6689D0              <1> 		mov ax, dx
  6441 000050E5 668B4E08            <1> 		mov cx, [esi + 8]
  6442 000050E9 6689CB              <1> 		mov bx, cx
  6443 000050EC 6681C32000          <1> 		add bx, 32
  6444 000050F1 6601D0              <1> 		add ax, dx
  6445 000050F4 813D[35500000]0100- <1> 		cmp dword [dragging], 1
  6446 000050FC 0000                <1>
  6447 000050FE 746F                <1> 		je dragicon
  6448 00005100 813D[35500000]0000- <1> 		cmp dword [dragging], 0
  6449 00005108 0000                <1>
  6450 0000510A 7411                <1> 		je nodragiconcheck
  6451 0000510C 3935[35500000]      <1> 		cmp dword [dragging], esi
  6452 00005112 0F85D1030000        <1> 		jne near nexticonsel
  6453 00005118 E952000000          <1> 		jmp dragicon
  6454                              <1> 	nodragiconcheck:
  6455 0000511D 663905[AF4B0000]    <1> 		cmp [mousecursorposition], ax
  6456 00005124 0F82BF030000        <1> 		jb near nexticonsel
  6457 0000512A 66054000            <1> 		add ax, 64
  6458 0000512E 663905[AF4B0000]    <1> 		cmp [mousecursorposition], ax
  6459 00005135 0F87AE030000        <1> 		ja near nexticonsel
  6460 0000513B 6629D0              <1> 		sub ax, dx
  6461 0000513E 66390D[B14B0000]    <1> 		cmp [mousecursorposition + 2], cx
  6462 00005145 0F829E030000        <1> 		jb near nexticonsel
  6463 0000514B 66391D[B14B0000]    <1> 		cmp [mousecursorposition + 2], bx
  6464 00005152 0F8791030000        <1> 		ja near nexticonsel
  6465 00005158 668B460A            <1> 		mov ax, [esi + 10]
  6466 0000515C 66250100            <1> 		and ax, 1
  6467 00005160 663D0100            <1> 		cmp ax, 1
  6468 00005164 0F84B6000000        <1> 		je near unselecticon
  6469 0000516A E98D000000          <1> 		jmp nodragicon
  6470                              <1> 	dragicon:
  6471 0000516F 663905[AB4B0000]    <1> 		cmp [lastmouseposition], ax
  6472 00005176 0F826D030000        <1> 		jb near nexticonsel
  6473 0000517C 66054000            <1> 		add ax, 64
  6474 00005180 663905[AB4B0000]    <1> 		cmp [lastmouseposition], ax
  6475 00005187 0F875C030000        <1> 		ja near nexticonsel
  6476 0000518D 6629D0              <1> 		sub ax, dx
  6477 00005190 66390D[AD4B0000]    <1> 		cmp [lastmouseposition + 2], cx
  6478 00005197 0F824C030000        <1> 		jb near nexticonsel
  6479 0000519D 66391D[AD4B0000]    <1> 		cmp [lastmouseposition + 2], bx
  6480 000051A4 0F873F030000        <1> 		ja near nexticonsel
  6481 000051AA 668B460A            <1> 		mov ax, [esi + 10]
  6482 000051AE 2410                <1> 		and al, 00010000b
  6483 000051B0 3C10                <1> 		cmp al, 00010000b
  6484 000051B2 7448                <1> 		je nodragicon
  6485 000051B4 8935[35500000]      <1> 		mov [dragging], esi
  6486 000051BA 66D1E2              <1> 		shl dx, 1
  6487 000051BD 662B15[AB4B0000]    <1> 		sub dx, [lastmouseposition]
  6488 000051C4 660315[AF4B0000]    <1> 		add dx, [mousecursorposition]
  6489 000051CB 66D1EA              <1> 		shr dx, 1
  6490 000051CE 66030D[B14B0000]    <1> 		add cx, [mousecursorposition + 2]
  6491 000051D5 662B0D[AD4B0000]    <1> 		sub cx, [lastmouseposition + 2]
  6492 000051DC 663B15[995D0000]    <1> 		cmp dx, [resolutionx2]
  6493 000051E3 7607                <1> 		jbe chkyresdrgicn
  6494 000051E5 668B15[AF4B0000]    <1> 		mov dx, [mousecursorposition]
  6495                              <1> 	chkyresdrgicn:
  6496 000051EC 663B0D[955D0000]    <1> 		cmp cx, [resolutiony]
  6497 000051F3 7607                <1> 		jbe nodragicon
  6498 000051F5 668B0D[B14B0000]    <1> 		mov cx, [mousecursorposition + 2]
  6499                              <1> 	nodragicon:
  6500 000051FC 66814E0A0100        <1> 		or word [esi + 10], 1
  6501 00005202 8B5E0C              <1> 		mov ebx, [esi + 12]
  6502 00005205 668B460A            <1> 		mov ax, [esi + 10]
  6503 00005209 8B7602              <1> 		mov esi, [esi + 2]
  6504 0000520C C705[A2600000]0000- <1> 		mov dword [codepointer], 0
  6505 00005214 0000                <1>
  6506 00005216 E8AE0A0000          <1> 		call showicon
  6507 0000521B E9E2020000          <1> 		jmp doneiconsel
  6508                              <1> 	unselecticon:
  6509 00005220 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  6510 00005226 8B5E0C              <1> 		mov ebx, [esi + 12]
  6511 00005229 668B460A            <1> 		mov ax, [esi + 10]
  6512 0000522D 8B7602              <1> 		mov esi, [esi + 2]
  6513 00005230 891D[A2600000]      <1> 		mov [codepointer], ebx
  6514 00005236 E88E0A0000          <1> 		call showicon
  6515 0000523B E9C2020000          <1> 		jmp doneiconsel
  6516                              <1> 	textselected:
  6517 00005240 8B5E02              <1> 		mov ebx, [esi + 2]
  6518 00005243 668B5606            <1> 		mov dx, [esi + 6]
  6519 00005247 6689D0              <1> 		mov ax, dx
  6520 0000524A 668B4E08            <1> 		mov cx, [esi + 8]
  6521                              <1> 	lengthtesttext:
  6522 0000524E 803B00              <1> 		cmp byte [ebx], 0
  6523 00005251 7407                <1> 		je donetesttextlength
  6524 00005253 43                  <1> 		inc ebx
  6525 00005254 66051000            <1> 		add ax, 16
  6526 00005258 EBF4                <1> 		jmp lengthtesttext
  6527                              <1> 	donetesttextlength:
  6528 0000525A 6689CB              <1> 		mov bx, cx
  6529 0000525D 6681C30F00          <1> 		add bx, 15
  6530 00005262 813D[35500000]0100- <1> 		cmp dword [dragging], 1
  6531 0000526A 0000                <1>
  6532 0000526C 7468                <1> 		je dragtext
  6533 0000526E 813D[35500000]0000- <1> 		cmp dword [dragging], 0
  6534 00005276 0000                <1>
  6535 00005278 7411                <1> 		je nodragtextcheck
  6536 0000527A 3935[35500000]      <1> 		cmp dword [dragging], esi
  6537 00005280 0F8563020000        <1> 		jne near nexticonsel
  6538 00005286 E94B000000          <1> 		jmp dragtext
  6539                              <1> 	nodragtextcheck:
  6540 0000528B 663915[AF4B0000]    <1> 		cmp [mousecursorposition], dx
  6541 00005292 0F8251020000        <1> 		jb near nexticonsel
  6542 00005298 663905[AF4B0000]    <1> 		cmp [mousecursorposition], ax
  6543 0000529F 0F8744020000        <1> 		ja near nexticonsel
  6544 000052A5 66390D[B14B0000]    <1> 		cmp [mousecursorposition + 2], cx
  6545 000052AC 0F8237020000        <1> 		jb near nexticonsel
  6546 000052B2 66391D[B14B0000]    <1> 		cmp [mousecursorposition + 2], bx
  6547 000052B9 0F872A020000        <1> 		ja near nexticonsel
  6548 000052BF 668B460A            <1> 		mov ax, [esi + 10]
  6549 000052C3 66250100            <1> 		and ax, 1
  6550 000052C7 663D0100            <1> 		cmp ax, 1
  6551 000052CB 0F84AB000000        <1> 		je near unselecttext
  6552 000052D1 E986000000          <1> 		jmp nodragtext
  6553                              <1> 	dragtext:
  6554 000052D6 663915[AB4B0000]    <1> 		cmp [lastmouseposition], dx
  6555 000052DD 0F8206020000        <1> 		jb near nexticonsel
  6556 000052E3 663905[AB4B0000]    <1> 		cmp [lastmouseposition], ax
  6557 000052EA 0F87F9010000        <1> 		ja near nexticonsel
  6558 000052F0 66390D[AD4B0000]    <1> 		cmp [lastmouseposition + 2], cx
  6559 000052F7 0F82EC010000        <1> 		jb near nexticonsel
  6560 000052FD 66391D[AD4B0000]    <1> 		cmp [lastmouseposition + 2], bx
  6561 00005304 0F87DF010000        <1> 		ja near nexticonsel
  6562 0000530A 668B460A            <1> 		mov ax, [esi + 10]
  6563 0000530E 2410                <1> 		and al, 00010000b
  6564 00005310 663D1000            <1> 		cmp ax, 00010000b
  6565 00005314 0F8442000000        <1> 		je near nodragtext
  6566 0000531A 8935[35500000]      <1> 		mov [dragging], esi
  6567 00005320 662B15[AB4B0000]    <1> 		sub dx, [lastmouseposition]
  6568 00005327 660315[AF4B0000]    <1> 		add dx, [mousecursorposition]
  6569 0000532E 66030D[B14B0000]    <1> 		add cx, [mousecursorposition + 2]
  6570 00005335 662B0D[AD4B0000]    <1> 		sub cx, [lastmouseposition + 2]
  6571 0000533C 663B15[995D0000]    <1> 		cmp dx, [resolutionx2]
  6572 00005343 7607                <1> 		jbe chkyresdrgtxt
  6573 00005345 668B15[AF4B0000]    <1> 		mov dx, [mousecursorposition]
  6574                              <1> 	chkyresdrgtxt:
  6575 0000534C 663B0D[955D0000]    <1> 		cmp cx, [resolutiony]
  6576 00005353 7607                <1> 		jbe nodragtext
  6577 00005355 668B0D[B14B0000]    <1> 		mov cx, [mousecursorposition + 2]
  6578                              <1> 	nodragtext:
  6579 0000535C 66814E0A0100        <1> 		or word [esi + 10], 1
  6580 00005362 8B5E0C              <1> 		mov ebx, [esi + 12]
  6581 00005365 891D[A2600000]      <1> 		mov [codepointer], ebx
  6582 0000536B 668B460A            <1> 		mov ax, [esi + 10]
  6583 0000536F 8B7602              <1> 		mov esi, [esi + 2]
  6584 00005372 E850050000          <1> 		call showstring
  6585 00005377 E986010000          <1> 		jmp doneiconsel
  6586                              <1> 	unselecttext:
  6587 0000537C 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  6588 00005382 8B5E0C              <1> 		mov ebx, [esi + 12]
  6589 00005385 668B460A            <1> 		mov ax, [esi + 10]
  6590 00005389 8B7602              <1> 		mov esi, [esi + 2]
  6591 0000538C C705[A2600000]0000- <1> 		mov dword [codepointer], 0
  6592 00005394 0000                <1>
  6593 00005396 E82C050000          <1> 		call showstring
  6594 0000539B E962010000          <1> 		jmp doneiconsel
  6595                              <1> windowselect:
  6596 000053A0 8B7E02              <1> 		mov edi, [esi + 2]
  6597 000053A3 668B5606            <1> 		mov dx, [esi + 6]
  6598 000053A7 6689D0              <1> 		mov ax, dx
  6599 000053AA 668B4E08            <1> 		mov cx, [esi + 8]
  6600 000053AE 6689CB              <1> 		mov bx, cx
  6601 000053B1 6681C31000          <1> 		add bx, 16
  6602 000053B6 813D[35500000]0100- <1> 		cmp dword [dragging], 1
  6603 000053BE 0000                <1>
  6604 000053C0 746D                <1> 		je dragwin
  6605 000053C2 813D[35500000]0000- <1> 		cmp dword [dragging], 0
  6606 000053CA 0000                <1>
  6607 000053CC 7411                <1> 		je nodragwincheck
  6608 000053CE 3935[35500000]      <1> 		cmp dword [dragging], esi
  6609 000053D4 0F850F010000        <1> 		jne near nexticonsel
  6610 000053DA E950000000          <1> 		jmp dragwin
  6611                              <1> 	nodragwincheck:
  6612 000053DF 663905[AF4B0000]    <1> 		cmp [mousecursorposition], ax
  6613 000053E6 0F82FD000000        <1> 		jb near nexticonsel
  6614 000053EC 660307              <1> 		add ax, [edi]
  6615 000053EF 660307              <1> 		add ax, [edi]
  6616 000053F2 663905[AF4B0000]    <1> 		cmp [mousecursorposition], ax
  6617 000053F9 0F87EA000000        <1> 		ja near nexticonsel
  6618 000053FF 66390D[B14B0000]    <1> 		cmp [mousecursorposition + 2], cx
  6619 00005406 0F82DD000000        <1> 		jb near nexticonsel
  6620 0000540C 66391D[B14B0000]    <1> 		cmp [mousecursorposition + 2], bx
  6621 00005413 0F87D0000000        <1> 		ja near nexticonsel
  6622 00005419 662D1400            <1> 		sub ax, 20
  6623 0000541D 663905[AF4B0000]    <1> 		cmp [mousecursorposition], ax
  6624 00005424 0F8795000000        <1> 		ja near killwin
  6625 0000542A E97C000000          <1> 		jmp nodragwin
  6626                              <1> 	dragwin:
  6627 0000542F 663905[AB4B0000]    <1> 		cmp [lastmouseposition], ax
  6628 00005436 0F82AD000000        <1> 		jb near nexticonsel
  6629 0000543C 660307              <1> 		add ax, [edi]
  6630 0000543F 660307              <1> 		add ax, [edi]
  6631 00005442 663905[AB4B0000]    <1> 		cmp [lastmouseposition], ax
  6632 00005449 0F879A000000        <1> 		ja near nexticonsel
  6633 0000544F 66390D[AD4B0000]    <1> 		cmp [lastmouseposition + 2], cx
  6634 00005456 0F828D000000        <1> 		jb near nexticonsel
  6635 0000545C 66391D[AD4B0000]    <1> 		cmp [lastmouseposition + 2], bx
  6636 00005463 0F8780000000        <1> 		ja near nexticonsel
  6637 00005469 8935[35500000]      <1> 		mov [dragging], esi
  6638 0000546F 662B15[AB4B0000]    <1> 		sub dx, [lastmouseposition]
  6639 00005476 660315[AF4B0000]    <1> 		add dx, [mousecursorposition]
  6640 0000547D 66030D[B14B0000]    <1> 		add cx, [mousecursorposition + 2]
  6641 00005484 662B0D[AD4B0000]    <1> 		sub cx, [lastmouseposition + 2]
  6642 0000548B 663B15[995D0000]    <1> 		cmp dx, [resolutionx2]
  6643 00005492 7607                <1> 		jbe chkyresdrgwin
  6644 00005494 668B15[AF4B0000]    <1> 		mov dx, [mousecursorposition]
  6645                              <1> 	chkyresdrgwin:
  6646 0000549B 663B0D[955D0000]    <1> 		cmp cx, [resolutiony]
  6647 000054A2 7607                <1> 		jbe nodragwin
  6648 000054A4 668B0D[B14B0000]    <1> 		mov cx, [mousecursorposition + 2]
  6649                              <1> 	nodragwin:
  6650 000054AB 8B5E0C              <1> 		mov ebx, [esi + 12]
  6651 000054AE 668B460A            <1> 		mov ax, [esi + 10]
  6652 000054B2 8B7602              <1> 		mov esi, [esi + 2]
  6653 000054B5 E875040000          <1> 		call showwindow
  6654 000054BA E943000000          <1> 		jmp doneiconsel
  6655                              <1> 	killwin:
  6656 000054BF 66C7060000          <1> 		mov word [esi], 0
  6657 000054C4 C705[25040000]0000- <1> 		mov dword [user2codepoint], 0
  6658 000054CC 0000                <1>
  6659 000054CE C605[F0270000]00    <1> 		mov byte [termguion], 0
  6660 000054D5 E8CAF8FFFF          <1> 		call guiclear
  6661 000054DA E8A7000000          <1> 		call reloadallgraphics
  6662 000054DF E91DFAFFFF          <1> 		jmp guistart
  6663 000054E4 E93A000000          <1> 		jmp doneiconsel2
  6664                              <1> 	nexticonsel:
  6665 000054E9 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  6666 000054EF 81C610000000        <1> 		add esi, 16
  6667 000054F5 81FE[00120000]      <1> 		cmp esi, graphicstableend
  6668 000054FB 7305                <1> 		jae doneiconsel
  6669 000054FD E9B2FBFFFF          <1> 		jmp clicon2
  6670                              <1> 	doneiconsel:
  6671 00005502 813D[35500000]0100- <1> 		cmp dword [dragging], 1
  6672 0000550A 0000                <1>
  6673 0000550C 7315                <1> 		jae doneiconsel2
  6674 0000550E 813D[A2600000]0000- <1> 		cmp dword [codepointer], 0
  6675 00005516 0000                <1>
  6676 00005518 7409                <1> 		je doneiconsel2
  6677 0000551A 8B1D[A2600000]      <1> 		mov ebx, [codepointer]
  6678 00005520 FFD3                <1> 		call ebx 
  6679 00005522 C3                  <1> 		ret
  6680                              <1> 	doneiconsel2:
  6681 00005523 A0[E0470000]        <1> 		mov al, [LBUTTON]
  6682 00005528 A2[33500000]        <1> 		mov [pLBUTTON], al
  6683 0000552D A0[E1470000]        <1> 		mov al, [RBUTTON]
  6684 00005532 A2[34500000]        <1> 		mov [pRBUTTON], al
  6685 00005537 66813D[35500000]01- <1> 		cmp word [dragging], 1
  6686 0000553F 00                  <1>
  6687 00005540 0F860A000000        <1> 		jbe near noreloadgraphicsclick
  6688 00005546 E8CCF9FFFF          <1> call clearmousecursor
  6689 0000554B E836000000          <1> call reloadallgraphics
  6690                              <1> noreloadgraphicsclick:
  6691 00005550 31C9                <1> 		xor ecx, ecx
  6692 00005552 31D2                <1> 		xor edx, edx
  6693 00005554 30E4                <1> 		xor ah, ah
  6694 00005556 B0FE                <1> 		mov al, 254
  6695 00005558 668B15[AF4B0000]    <1> 		mov dx, [mousecursorposition]
  6696 0000555F 668B0D[B14B0000]    <1> 		mov cx, [mousecursorposition + 2]
  6697 00005566 66BBE738            <1> 		mov bx, 0011100011100111b
  6698 0000556A C605[134F0000]01    <1> 		mov byte [showcursorfonton], 1
  6699 00005571 E833080000          <1> 		call showfontvesa
  6700 00005576 C605[134F0000]00    <1> 		mov byte [showcursorfonton], 0
  6701 0000557D C3                  <1> 		ret
  6702 0000557E 00000000            <1> lastdrag dw 0,0
  6703 00005582 00000000            <1> grpctblpos dw 0,0
  6704                              <1> 
  6705                              <1> reloadallgraphics:
  6706 00005586 BF[00100000]        <1> 		mov edi, graphicstable
  6707                              <1> reloadgraphicsloop:
  6708 0000558B 8B7702              <1> 		mov esi, [edi + 2]
  6709 0000558E 668B5706            <1> 		mov dx, [edi + 6]
  6710 00005592 668B4F08            <1> 		mov cx, [edi + 8]
  6711 00005596 668B07              <1> 		mov ax, [edi]
  6712 00005599 668B5F0A            <1> 		mov bx, [edi + 10]
  6713 0000559D 893D[82550000]      <1> 		mov [grpctblpos], edi
  6714 000055A3 3B3D[35500000]      <1> 		cmp edi, [dragging]
  6715 000055A9 741E                <1> 		je loadedgraphic
  6716 000055AB 663D0100            <1> 		cmp ax, 1
  6717 000055AF 0F8431000000        <1> 		je near icongraphic
  6718 000055B5 663D0200            <1> 		cmp ax, 2
  6719 000055B9 0F8437000000        <1> 		je near stringgraphic
  6720 000055BF 663D0300            <1> 		cmp ax, 3
  6721 000055C3 0F8416000000        <1> 		je near windowgraphic
  6722 000055C9 8B3D[82550000]      <1> loadedgraphic:  mov edi, [grpctblpos]
  6723 000055CF 81C710000000        <1> 		add edi, 16
  6724 000055D5 81FF[00120000]      <1> 		cmp edi, graphicstableend
  6725 000055DB 7329                <1> 		jae donereloadgraphics
  6726 000055DD EBAC                <1> 		jmp reloadgraphicsloop
  6727 000055DF E8ED030000          <1> windowgraphic:	call showwindow2
  6728 000055E4 EBE3                <1> 		jmp loadedgraphic
  6729 000055E6 80E301              <1> icongraphic:	and bl, 1
  6730 000055E9 881D[A6600000]      <1> 		mov [iconselected], bl
  6731 000055EF E8E8060000          <1> 		call showicon2
  6732 000055F4 EBD3                <1> 		jmp loadedgraphic
  6733 000055F6 80E301              <1> stringgraphic:  and bl, 1
  6734 000055F9 881D[154F0000]      <1> 		mov [mouseselecton], bl
  6735 000055FF E8D6020000          <1> 		call showstring2
  6736 00005604 EBC3                <1> 		jmp loadedgraphic
  6737                              <1> donereloadgraphics:
  6738 00005606 8B3D[35500000]      <1> 		mov edi, [dragging]
  6739 0000560C 81FF[00100000]      <1> 		cmp edi, graphicstable
  6740 00005612 7226                <1> 		jb notcorrectdrag
  6741 00005614 668B07              <1> 		mov ax, [edi]
  6742 00005617 8B7702              <1> 		mov esi, [edi + 2]
  6743 0000561A 668B5706            <1> 		mov dx, [edi + 6]
  6744 0000561E 668B4F08            <1> 		mov cx, [edi + 8]
  6745 00005622 668B5F0A            <1> 		mov bx, [edi + 10]
  6746 00005626 663D0100            <1> 		cmp ax, 1
  6747 0000562A 750F                <1> 		jne noticondragging
  6748 0000562C 80E301              <1> 		and bl, 1
  6749 0000562F 881D[A6600000]      <1> 		mov [iconselected], bl
  6750 00005635 E8A2060000          <1> 		call showicon2
  6751                              <1> notcorrectdrag:
  6752 0000563A C3                  <1> 		ret
  6753                              <1> 
  6754                              <1> 	noticondragging:
  6755 0000563B 663D0200            <1> 		cmp ax, 2
  6756 0000563F 75F9                <1> 		jne notcorrectdrag
  6757 00005641 80E301              <1> 		and bl, 1
  6758 00005644 881D[154F0000]      <1> 		mov [mouseselecton], bl
  6759 0000564A E88B020000          <1> 		call showstring2
  6760 0000564F EBE9                <1> 		jmp notcorrectdrag
  6761                              <1> 
  6762 00005651 00<rept>            <1> grphbuf times 16 db 0
  6763                              <1> 	graphicsadd:
  6764 00005661 BF[00100000]        <1> 		mov edi, graphicstable
  6765                              <1> 	shwgrph1:
  6766 00005666 397702              <1> 		cmp dword [edi + 2], esi
  6767 00005669 7414                <1> 		je showgraphicsreplace2
  6768 0000566B 81C710000000        <1> 		add edi, 16
  6769 00005671 81FF[00120000]      <1> 		cmp edi, graphicstableend
  6770 00005677 0F832F020000        <1> 		jae near showgraphicsnew
  6771 0000567D EBE7                <1> 		jmp shwgrph1
  6772                              <1> 	showgraphicsreplace2:
  6773 0000567F 8935[53560000]      <1> 		mov [grphbuf + 2], esi
  6774 00005685 668915[57560000]    <1> 		mov [grphbuf + 6], dx
  6775 0000568C 66890D[59560000]    <1> 		mov [grphbuf + 8], cx
  6776 00005693 891D[5D560000]      <1> 		mov [grphbuf + 12], ebx
  6777 00005699 30FF                <1> 		xor bh, bh
  6778 0000569B 88E3                <1> 		mov bl, ah
  6779 0000569D 30E4                <1> 		xor ah, ah
  6780 0000569F 66A3[5B560000]      <1> 		mov [grphbuf + 10], ax	
  6781 000056A5 66891D[51560000]    <1> 		mov [grphbuf], bx
  6782 000056AC 66A1[51560000]      <1> 		mov ax, [grphbuf]
  6783 000056B2 663D0100            <1> 		cmp ax, 1
  6784 000056B6 0F8419000000        <1> 		je near replaceicon
  6785 000056BC 663D0200            <1> 		cmp ax, 2
  6786 000056C0 0F8493000000        <1> 		je near replacestring
  6787 000056C6 663D0300            <1> 		cmp ax, 3
  6788 000056CA 0F840F010000        <1> 		je near replacewindow
  6789 000056D0 E9B4010000          <1> 		jmp showgraphicsreplace
  6790                              <1> 	replaceicon:
  6791 000056D5 893D[39500000]      <1> 		mov [lastpos], edi
  6792 000056DB 8935[3D500000]      <1> 		mov [lastpos + 4], esi
  6793 000056E1 8B7702              <1> 		mov esi, [edi + 2]
  6794 000056E4 668B5F0C            <1> 		mov bx, [edi + 12]
  6795 000056E8 668B5706            <1> 		mov dx, [edi + 6]
  6796 000056EC 668B4F08            <1> 		mov cx, [edi + 8]
  6797 000056F0 668B06              <1> 		mov ax, [esi]
  6798 000056F3 66A3[41500000]      <1> 		mov [colorbuf], ax
  6799 000056F9 66A1[E14D0000]      <1> 		mov ax, [background]
  6800 000056FF 668906              <1> 		mov [esi], ax
  6801 00005702 8B5F0C              <1> 		mov ebx, [edi + 12]
  6802 00005705 668B470A            <1> 		mov ax, [edi + 10]
  6803 00005709 2401                <1> 		and al, 1
  6804 0000570B A2[A6600000]        <1> 		mov [iconselected], al
  6805 00005710 668B470A            <1> 		mov ax, [edi + 10]
  6806 00005714 E8C3050000          <1> 		call showicon2
  6807 00005719 8B3D[39500000]      <1> 		mov edi, [lastpos]
  6808 0000571F 8B7702              <1> 		mov esi, [edi + 2]
  6809 00005722 66A1[41500000]      <1> 		mov ax, [colorbuf]
  6810 00005728 668906              <1> 		mov [esi], ax
  6811 0000572B 8B35[3D500000]      <1> 		mov esi, [lastpos + 4]
  6812 00005731 668B15[57560000]    <1> 		mov dx, [grphbuf + 6]
  6813 00005738 668B0D[59560000]    <1> 		mov cx, [grphbuf + 8]
  6814 0000573F 668B1D[51560000]    <1> 		mov bx, [grphbuf]
  6815 00005746 66A1[5B560000]      <1> 		mov ax, [grphbuf + 10]
  6816 0000574C 88DC                <1> 		mov ah, bl
  6817 0000574E 8B1D[5D560000]      <1> 		mov ebx, [grphbuf + 12]
  6818 00005754 E930010000          <1> 		jmp showgraphicsreplace
  6819                              <1> 	replacestring:
  6820 00005759 893D[39500000]      <1> 		mov [lastpos], edi
  6821 0000575F 8935[3D500000]      <1> 		mov [lastpos + 4], esi
  6822 00005765 8B5F0C              <1> 		mov ebx, [edi + 12]
  6823 00005768 8B7702              <1> 		mov esi, [edi + 2]
  6824 0000576B 668B5706            <1> 		mov dx, [edi + 6]
  6825 0000576F 668B4F08            <1> 		mov cx, [edi + 8]
  6826 00005773 66A1[16590000]      <1> 		mov ax, [colorfont2]
  6827 00005779 66A3[41500000]      <1> 		mov [colorbuf], ax
  6828 0000577F 66A1[E14D0000]      <1> 		mov ax, [background]
  6829 00005785 66A3[16590000]      <1> 		mov [colorfont2], ax		
  6830 0000578B 8B5F0C              <1> 		mov ebx, [edi + 12]
  6831 0000578E 668B470A            <1> 		mov ax, [edi + 10]
  6832 00005792 2401                <1> 		and al, 1
  6833 00005794 A2[154F0000]        <1> 		mov [mouseselecton], al
  6834 00005799 668B470A            <1> 		mov ax, [edi + 10]
  6835 0000579D E838010000          <1> 		call showstring2
  6836 000057A2 66A1[41500000]      <1> 		mov ax, [colorbuf]
  6837 000057A8 66A3[16590000]      <1> 		mov [colorfont2], ax
  6838 000057AE 8B3D[39500000]      <1> 		mov edi, [lastpos]
  6839 000057B4 8B7702              <1> 		mov esi, [edi + 2]
  6840 000057B7 668B15[57560000]    <1> 		mov dx, [grphbuf + 6]
  6841 000057BE 668B0D[59560000]    <1> 		mov cx, [grphbuf + 8]
  6842 000057C5 668B1D[51560000]    <1> 		mov bx, [grphbuf]
  6843 000057CC 66A1[5B560000]      <1> 		mov ax, [grphbuf + 10]
  6844 000057D2 88DC                <1> 		mov ah, bl
  6845 000057D4 8B1D[5D560000]      <1> 		mov ebx, [grphbuf + 12]
  6846 000057DA E9AA000000          <1> 		jmp showgraphicsreplace
  6847                              <1> 	replacewindow:
  6848 000057DF 893D[39500000]      <1> 		mov [lastpos], edi
  6849 000057E5 8935[3D500000]      <1> 		mov [lastpos + 4], esi
  6850 000057EB 8B7702              <1> 		mov esi, [edi + 2]
  6851 000057EE 8B3D[25590000]      <1> 		mov edi, [windowbufloc]
  6852 000057F4 31D2                <1> 		xor edx, edx
  6853 000057F6 668B15[995D0000]    <1> 		mov dx, [resolutionx2]
  6854 000057FD C1E204              <1> 		shl edx, 4
  6855 00005800 29D7                <1> 		sub edi, edx
  6856 00005802 31D2                <1> 		xor edx, edx
  6857 00005804 668B16              <1> 		mov dx, [esi]
  6858 00005807 660316              <1> 		add dx, [esi]
  6859 0000580A 668B4E02            <1> 		mov cx, [esi + 2]
  6860 0000580E 6681C11000          <1> 		add cx, 16
  6861 00005813 66A1[E14D0000]      <1> 		mov ax, [background]
  6862                              <1> 	clearwindow:
  6863 00005819 668907              <1> 		mov [edi], ax
  6864 0000581C 81C702000000        <1> 		add edi, 2
  6865 00005822 81EA02000000        <1> 		sub edx, 2
  6866 00005828 81FA00000000        <1> 		cmp edx, 0
  6867 0000582E 75E9                <1> 		jne clearwindow
  6868 00005830 6649                <1> 		dec cx
  6869 00005832 668B15[995D0000]    <1> 		mov dx, [resolutionx2]
  6870 00005839 662B16              <1> 		sub dx, [esi]
  6871 0000583C 662B16              <1> 		sub dx, [esi]
  6872 0000583F 01D7                <1> 		add edi, edx
  6873 00005841 668B16              <1> 		mov dx, [esi]
  6874 00005844 660316              <1> 		add dx, [esi]
  6875 00005847 6681F90000          <1> 		cmp cx, 0
  6876 0000584C 75CB                <1> 		jne clearwindow
  6877 0000584E C605[F1270000]00    <1> 		mov byte [termcopyon], 0
  6878 00005855 8B3D[39500000]      <1> 		mov edi, [lastpos]
  6879 0000585B 8B35[53560000]      <1> 		mov esi, [grphbuf + 2]
  6880 00005861 668B15[57560000]    <1> 		mov dx, [grphbuf + 6]
  6881 00005868 668B0D[59560000]    <1> 		mov cx, [grphbuf + 8]
  6882 0000586F 668B1D[51560000]    <1> 		mov bx, [grphbuf]
  6883 00005876 66A1[5B560000]      <1> 		mov ax, [grphbuf + 10]
  6884 0000587C 88DC                <1> 		mov ah, bl
  6885 0000587E 8B1D[5D560000]      <1> 		mov ebx, [grphbuf + 12]
  6886 00005884 E900000000          <1> 		jmp showgraphicsreplace
  6887                              <1> 	showgraphicsreplace:
  6888 00005889 897702              <1> 		mov [edi + 2], esi
  6889 0000588C 66895706            <1> 		mov [edi + 6], dx
  6890 00005890 66894F08            <1> 		mov [edi + 8], cx
  6891 00005894 895F0C              <1> 		mov [edi + 12], ebx
  6892 00005897 30FF                <1> 		xor bh, bh
  6893 00005899 88E3                <1> 		mov bl, ah
  6894 0000589B 30E4                <1> 		xor ah, ah
  6895 0000589D 6689470A            <1> 		mov [edi + 10], ax
  6896 000058A1 66891F              <1> 		mov [edi], bx
  6897 000058A4 8B5F0C              <1> 		mov ebx, [edi + 12]
  6898 000058A7 668B470A            <1> 		mov ax, [edi + 10]
  6899 000058AB C3                  <1> 		ret
  6900                              <1> 	showgraphicsnew:
  6901 000058AC BF[00100000]        <1> 		mov edi, graphicstable
  6902                              <1> 	shwgrph2:
  6903 000058B1 66813F0000          <1> 		cmp word [edi], 0
  6904 000058B6 74D1                <1> 		je showgraphicsreplace
  6905 000058B8 81C710000000        <1> 		add edi, 16
  6906 000058BE 81FF[00120000]      <1> 		cmp edi, graphicstableend
  6907 000058C4 72EB                <1> 		jb shwgrph2
  6908                              <1> 	showgraphicsdone:
  6909 000058C6 C3                  <1> 		ret
  6910                              <1> 
  6911                              <1> 	showstring:
  6912 000058C7 A2[154F0000]        <1> 		mov [mouseselecton], al
  6913 000058CC 8025[154F0000]01    <1> 		and byte [mouseselecton], 1
  6914 000058D3 B402                <1> 		mov ah, 2
  6915 000058D5 E887FDFFFF          <1> 		call graphicsadd
  6916                              <1> 	showstring2:
  6917 000058DA 30E4                <1> 		xor ah, ah
  6918 000058DC 8A06                <1> 		mov al, [esi]
  6919 000058DE 3C00                <1> 		cmp al, 0
  6920 000058E0 742C                <1> 		je doneshowstring
  6921 000058E2 46                  <1> 		inc esi
  6922 000058E3 3CFF                <1> 		cmp al, 255
  6923 000058E5 74F3                <1> 		je showstring2
  6924 000058E7 8935[4F600000]      <1> 		mov [showstringesi], esi
  6925 000058ED 668B1D[16590000]    <1> 		mov bx, [colorfont2]
  6926 000058F4 E8B0040000          <1> 		call showfontvesa
  6927 000058F9 3C0D                <1> 		cmp al, 13
  6928 000058FB 7409                <1> 		je noproceedshst
  6929 000058FD 3C0A                <1> 		cmp al, 10
  6930 000058FF 7405                <1> 		je noproceedshst
  6931 00005901 6681C20800          <1> 		add dx, 8
  6932                              <1> 		noproceedshst
  6933 00005906 8B35[4F600000]      <1> 		mov esi, [showstringesi]
  6934 0000590C EBCC                <1> 		jmp showstring2
  6935                              <1> 	doneshowstring:
  6936 0000590E C605[154F0000]00    <1> 		mov byte [mouseselecton], 0
  6937 00005915 C3                  <1> 		ret
  6938                              <1> 
  6939 00005916 FFFF                <1> colorfont2 dw 0xFFFF
  6940 00005918 00                  <1> colorcache db 0
  6941 00005919 0000                <1> winvcopystx dw 0
  6942 0000591B 0000                <1> winvcopysty dw 0
  6943 0000591D 0000                <1> winvcopydx dw 0
  6944 0000591F 0000                <1> winvcopycx dw 0
  6945 00005921 FFFF0000            <1> windowcolor dw 0xFFFF,0x0
  6946 00005925 00000000            <1> windowbufloc: dw 0,0
  6947 00005929 0000                <1> termcol dw 0
  6948 0000592B 00000000            <1> wincopyendpos dd 0
  6949                              <1> 
  6950                              <1> 	showwindow:	;;windowstuff in si, position in (dx, cx), nothing in ax, code in bx
  6951 0000592F C605[F0270000]01    <1> 		mov byte [termguion], 1
  6952 00005936 6681C11000          <1> 		add cx, 16
  6953 0000593B 668915[19590000]    <1> 		mov [winvcopystx], dx
  6954 00005942 66890D[1B590000]    <1> 		mov [winvcopysty], cx
  6955 00005949 668B16              <1> 		mov dx, [esi]
  6956 0000594C 668B4E02            <1> 		mov cx, [esi + 2]
  6957 00005950 31C0                <1> 		xor eax, eax
  6958 00005952 31DB                <1> 		xor ebx, ebx
  6959 00005954 6689D0              <1> 		mov ax, dx
  6960 00005957 6689CB              <1> 		mov bx, cx
  6961 0000595A 66C1E803            <1> 		shr ax, 3
  6962 0000595E 66C1EB04            <1> 		shr bx, 4
  6963 00005962 66A3[29590000]      <1> 		mov [termcol], ax
  6964 00005968 A2[E1270000]        <1> 		mov [charxy], al
  6965 0000596D 881D[E2270000]      <1> 		mov [charxy + 1], bl
  6966 00005973 BF[8F1D0000]        <1> 		mov edi, videobuf
  6967 00005978 81FB00000000        <1> 		cmp ebx, 0
  6968 0000597E 0F8426030000        <1> 		je near donewincopynow	;AAAAAAAAA!!!!!
  6969                              <1> 	findendposwin:
  6970 00005984 01C7                <1> 		add edi, eax
  6971 00005986 01C7                <1> 		add edi, eax
  6972 00005988 4B                  <1> 		dec ebx
  6973 00005989 81FB00000000        <1> 		cmp ebx, 0
  6974 0000598F 77F3                <1> 		ja findendposwin
  6975 00005991 893D[2B590000]      <1> 		mov [wincopyendpos], edi
  6976 00005997 31FF                <1> 		xor edi, edi
  6977 00005999 6631C0              <1> 		xor ax, ax
  6978 0000599C 6631DB              <1> 		xor bx, bx
  6979 0000599F 6601D2              <1> 		add dx, dx
  6980 000059A2 668915[1D590000]    <1> 		mov [winvcopydx], dx
  6981 000059A9 66890D[1F590000]    <1> 		mov [winvcopycx], cx
  6982 000059B0 668B0D[1B590000]    <1> 		mov cx, [winvcopysty]
  6983 000059B7 6681E91000          <1> 		sub cx, 16
  6984 000059BC 668B15[19590000]    <1> 		mov dx, [winvcopystx]
  6985 000059C3 C605[F1270000]00    <1> 		mov byte [termcopyon], 0
  6986 000059CA B403                <1> 		mov ah, 3
  6987 000059CC E890FCFFFF          <1> 		call graphicsadd
  6988                              <1> 	showwindow2:
  6989 000059D1 6681C11000          <1> 		add cx, 16
  6990 000059D6 668915[19590000]    <1> 		mov [winvcopystx], dx
  6991 000059DD 66890D[1B590000]    <1> 		mov [winvcopysty], cx
  6992 000059E4 668B16              <1> 		mov dx, [esi]
  6993 000059E7 668B4E02            <1> 		mov cx, [esi + 2]
  6994 000059EB 6601D2              <1> 		add dx, dx
  6995 000059EE 668915[1D590000]    <1> 		mov [winvcopydx], dx
  6996 000059F5 66890D[1F590000]    <1> 		mov [winvcopycx], cx
  6997 000059FC 8B3D[25590000]      <1> 		mov edi, [windowbufloc]
  6998 00005A02 31D2                <1> 		xor edx, edx
  6999 00005A04 668B15[995D0000]    <1> 		mov dx, [resolutionx2]
  7000 00005A0B C1E204              <1> 		shl edx, 4
  7001 00005A0E 29D7                <1> 		sub edi, edx
  7002 00005A10 803D[F1270000]00    <1> 		cmp byte [termcopyon], 0
  7003 00005A17 7538                <1> 		jne nocleartitlebarpos
  7004 00005A19 8B3D[FE840000]      <1> 		mov edi, [physbaseptr]
  7005 00005A1F 31D2                <1> 		xor edx, edx
  7006 00005A21 668B15[19590000]    <1> 		mov dx, [winvcopystx]
  7007 00005A28 01D7                <1> 		add edi, edx
  7008 00005A2A 668B0D[1B590000]    <1> 		mov cx, [winvcopysty]
  7009 00005A31 6681E91000          <1> 		sub cx, 16
  7010 00005A36 6681F90000          <1> 		cmp cx, 0
  7011 00005A3B 7414                <1> 		je nocleartitlebarpos
  7012                              <1> 	cleartitlebarpos:
  7013 00005A3D 31D2                <1> 		xor edx, edx
  7014 00005A3F 668B15[995D0000]    <1> 		mov dx, [resolutionx2]
  7015 00005A46 01D7                <1> 		add edi, edx
  7016 00005A48 6649                <1> 		dec cx
  7017 00005A4A 6681F90000          <1> 		cmp cx, 0
  7018 00005A4F 75EC                <1> 		jne cleartitlebarpos
  7019                              <1> 	nocleartitlebarpos:
  7020 00005A51 66B91000            <1> 		mov cx, 16
  7021 00005A55 668B15[1D590000]    <1> 		mov dx, [winvcopydx]
  7022 00005A5C 6681F90000          <1> 		cmp cx, 0
  7023 00005A61 0F8448000000        <1> 		je near canceltitlebarput
  7024 00005A67 6681FA0000          <1> 		cmp dx, 0
  7025 00005A6C 0F843D000000        <1> 		je near canceltitlebarput
  7026                              <1> 	titlebarput:
  7027 00005A72 66A1[21590000]      <1> 		mov ax, [windowcolor]
  7028 00005A78 668907              <1> 		mov [edi], ax
  7029 00005A7B 6681EA0200          <1> 		sub dx, 2
  7030 00005A80 81C702000000        <1> 		add edi, 2
  7031 00005A86 6681FA0000          <1> 		cmp dx, 0
  7032 00005A8B 75E5                <1> 		jne titlebarput
  7033 00005A8D 31D2                <1> 		xor edx, edx
  7034 00005A8F 668B15[995D0000]    <1> 		mov dx, [resolutionx2]
  7035 00005A96 6649                <1> 		dec cx
  7036 00005A98 662B15[1D590000]    <1> 		sub dx, [winvcopydx]
  7037 00005A9F 01D7                <1> 		add edi, edx
  7038 00005AA1 668B15[1D590000]    <1> 		mov dx, [winvcopydx]
  7039 00005AA8 6681F90000          <1> 		cmp cx, 0
  7040 00005AAD 75C3                <1> 		jne titlebarput
  7041                              <1> 	canceltitlebarput:
  7042 00005AAF 893D[25590000]      <1> 		mov [windowbufloc], edi
  7043 00005AB5 803D[F1270000]02    <1> 		cmp byte [termcopyon], 2
  7044 00005ABC 0F8461000000        <1> 		je near winvcpst
  7045 00005AC2 6631C0              <1> 		xor ax, ax
  7046 00005AC5 81C604000000        <1> 		add esi, 4
  7047 00005ACB 668B15[19590000]    <1> 		mov dx, [winvcopystx]
  7048 00005AD2 668B0D[1B590000]    <1> 		mov cx, [winvcopysty]
  7049 00005AD9 6681E91000          <1> 		sub cx, 16
  7050 00005ADE 6631DB              <1> 		xor bx, bx
  7051 00005AE1 C605[154F0000]01    <1> 		mov byte [mouseselecton], 1
  7052 00005AE8 E8EDFDFFFF          <1> 		call showstring2
  7053 00005AED B058                <1> 		mov al, "X"
  7054 00005AEF 30E4                <1> 		xor ah, ah
  7055 00005AF1 668B1D[16590000]    <1> 		mov bx, [colorfont2]
  7056 00005AF8 668B15[19590000]    <1> 		mov dx, [winvcopystx]
  7057 00005AFF 668B0D[1B590000]    <1> 		mov cx, [winvcopysty]
  7058 00005B06 6681E91000          <1> 		sub cx, 16
  7059 00005B0B 6681EA1400          <1> 		sub dx, 20
  7060 00005B10 660315[1D590000]    <1> 		add dx, [winvcopydx]
  7061 00005B17 C605[154F0000]01    <1> 		mov byte [mouseselecton], 1
  7062 00005B1E E886020000          <1> 		call showfontvesa
  7063                              <1> 	winvcpst:
  7064 00005B23 8B3D[25590000]      <1> 		mov edi, [windowbufloc]
  7065 00005B29 E94E000000          <1> 		jmp windowvideocopyset
  7066                              <1> 
  7067                              <1> 	windowvideocopy:
  7068 00005B2E 8B3D[25590000]      <1> 		mov edi, [windowbufloc]
  7069 00005B34 3B3D[FE840000]      <1> 		cmp edi, [physbaseptr]
  7070 00005B3A 0F833C000000        <1> 		jae near windowvideocopyset
  7071 00005B40 31C9                <1> 		xor ecx, ecx
  7072 00005B42 31D2                <1> 		xor edx, edx
  7073 00005B44 668B15[19590000]    <1> 		mov dx, [winvcopystx]
  7074 00005B4B 668B0D[1B590000]    <1> 		mov cx, [winvcopysty]
  7075 00005B52 8B3D[FE840000]      <1> 		mov edi, [physbaseptr]
  7076 00005B58 01D7                <1> 		add edi, edx
  7077 00005B5A 81F900000000        <1> 		cmp ecx, 0
  7078 00005B60 741A                <1> 		je windowvideocopyset
  7079                              <1> 	yrescopylp:
  7080 00005B62 31D2                <1> 		xor edx, edx
  7081 00005B64 668B15[995D0000]    <1> 		mov dx, [resolutionx2]
  7082 00005B6B 01D7                <1> 		add edi, edx
  7083 00005B6D 6649                <1> 		dec cx
  7084 00005B6F 6681F90000          <1> 		cmp cx, 0
  7085 00005B74 75EC                <1> 		jne yrescopylp
  7086 00005B76 893D[25590000]      <1> 		mov [windowbufloc], edi
  7087                              <1> 	windowvideocopyset:
  7088 00005B7C 6631C9              <1> 		xor cx, cx
  7089 00005B7F 66890D[C15C0000]    <1> 		mov [charposline], cx
  7090 00005B86 BE[8F1D0000]        <1> 		mov esi, videobuf
  7091 00005B8B 8935[C35C0000]      <1> 		mov [charposvbuf], esi
  7092 00005B91 8A5E01              <1> 		mov bl, [esi + 1]
  7093 00005B94 881D[18590000]      <1> 		mov [colorcache], bl
  7094 00005B9A 8A1E                <1> 		mov bl, [esi]
  7095 00005B9C 30FF                <1> 		xor bh, bh
  7096 00005B9E 66C1E304            <1> 		shl bx, 4
  7097 00005BA2 678AB7[C672]        <1> 		mov dh, [fonts + bx]
  7098 00005BA7 D0CE                <1> 		ror dh, 1
  7099 00005BA9 89FE                <1> 		mov esi, edi
  7100                              <1> 	copywindow:
  7101 00005BAB B201                <1> 		mov dl, 1
  7102 00005BAD D0C6                <1> 		rol dh, 1
  7103 00005BAF 20F2                <1> 		and dl, dh
  7104 00005BB1 803D[18590000]10    <1> 		cmp byte [colorcache], 0x10
  7105 00005BB8 731C                <1> 		jae switchwincolors
  7106 00005BBA 66A1[23590000]      <1> 		mov ax, [windowcolor + 2]
  7107 00005BC0 668907              <1> 		mov [edi], ax
  7108 00005BC3 80FA00              <1> 		cmp dl, 0
  7109 00005BC6 7425                <1> 		je nowritewin
  7110 00005BC8 66A1[21590000]      <1> 		mov ax, [windowcolor]
  7111 00005BCE 668907              <1> 		mov [edi], ax
  7112 00005BD1 E917000000          <1> 		jmp nowritewin
  7113                              <1> 	switchwincolors:
  7114 00005BD6 66A1[21590000]      <1> 		mov ax, [windowcolor]
  7115 00005BDC 668907              <1> 		mov [edi], ax
  7116 00005BDF 80FA00              <1> 		cmp dl, 0
  7117 00005BE2 7409                <1> 		je nowritewin
  7118 00005BE4 66A1[23590000]      <1> 		mov ax, [windowcolor + 2]
  7119 00005BEA 668907              <1> 		mov [edi], ax
  7120                              <1> 	nowritewin:
  7121 00005BED 81C702000000        <1> 		add edi, 2
  7122 00005BF3 FEC1                <1> 		inc cl
  7123 00005BF5 80F908              <1> 		cmp cl, 8
  7124 00005BF8 75B1                <1> 		jne copywindow
  7125 00005BFA 6643                <1> 		inc bx
  7126 00005BFC 30C9                <1> 		xor cl, cl
  7127 00005BFE 31D2                <1> 		xor edx, edx
  7128 00005C00 668B15[995D0000]    <1> 		mov dx, [resolutionx2]
  7129 00005C07 01D6                <1> 		add esi, edx
  7130 00005C09 89F7                <1> 		mov edi, esi
  7131 00005C0B 678AB7[C672]        <1> 		mov dh, [fonts + bx]
  7132 00005C10 D0CE                <1> 		ror dh, 1
  7133 00005C12 FEC5                <1> 		inc ch
  7134 00005C14 80FD10              <1> 		cmp ch, 16
  7135 00005C17 7592                <1> 		jne copywindow
  7136 00005C19 6631C9              <1> 		xor cx, cx
  7137 00005C1C 8B3D[C35C0000]      <1> 		mov edi, [charposvbuf]
  7138 00005C22 81C702000000        <1> 		add edi, 2
  7139 00005C28 3B3D[2B590000]      <1> 		cmp edi, [wincopyendpos]
  7140 00005C2E 737A                <1> 		jae donewincopynow
  7141 00005C30 8A5F01              <1> 		mov bl, [edi + 1]
  7142 00005C33 881D[18590000]      <1> 		mov [colorcache], bl
  7143 00005C39 8A1F                <1> 		mov bl, [edi]
  7144 00005C3B 30FF                <1> 		xor bh, bh
  7145 00005C3D 66C1E304            <1> 		shl bx, 4
  7146 00005C41 893D[C35C0000]      <1> 		mov [charposvbuf], edi
  7147 00005C47 31D2                <1> 		xor edx, edx
  7148 00005C49 668B15[995D0000]    <1> 		mov dx, [resolutionx2]
  7149 00005C50 C1E204              <1> 		shl edx, 4
  7150 00005C53 29D6                <1> 		sub esi, edx
  7151 00005C55 81C610000000        <1> 		add esi, 16
  7152 00005C5B 89F7                <1> 		mov edi, esi
  7153 00005C5D 668B0D[C15C0000]    <1> 		mov cx, [charposline]
  7154 00005C64 6641                <1> 		inc cx
  7155 00005C66 663B0D[29590000]    <1> 		cmp cx, [termcol]
  7156 00005C6D 0F8316000000        <1> 		jae near fixwindowcopy
  7157 00005C73 66890D[C15C0000]    <1> 		mov [charposline], cx
  7158 00005C7A 6631C9              <1> 		xor cx, cx
  7159 00005C7D 678AB7[C672]        <1> 		mov dh, [fonts + bx]
  7160 00005C82 D0CE                <1> 		ror dh, 1
  7161 00005C84 E922FFFFFF          <1> 		jmp copywindow
  7162                              <1> fixwindowcopy:
  7163 00005C89 6631C9              <1> 		xor cx, cx
  7164 00005C8C 66890D[C15C0000]    <1> 		mov [charposline], cx
  7165 00005C93 662B15[1D590000]    <1> 		sub dx, [winvcopydx]
  7166 00005C9A 01D6                <1> 		add esi, edx
  7167 00005C9C 89F7                <1> 		mov edi, esi
  7168 00005C9E 678AB7[C672]        <1> 		mov dh, [fonts + bx]
  7169 00005CA3 D0CE                <1> 		ror dh, 1
  7170 00005CA5 E901FFFFFF          <1> 		jmp copywindow
  7171                              <1> donewincopynow:
  7172 00005CAA E881D1FFFF          <1> 		call switchtermcursor
  7173 00005CAF 803D[F1270000]01    <1> 		cmp byte [termcopyon], 1
  7174 00005CB6 7501                <1> 		jne forgetresetstuff
  7175 00005CB8 61                  <1> 		popa
  7176                              <1> forgetresetstuff:
  7177 00005CB9 C605[F1270000]00    <1> 		mov byte [termcopyon], 0
  7178 00005CC0 C3                  <1> 		ret
  7179                              <1> 
  7180 00005CC1 0000                <1> charposline dw 0
  7181 00005CC3 00000000            <1> charposvbuf dw 0,0
  7182 00005CC7 0000                <1> iconcolor dw 0
  7183                              <1> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  7184 00005CC9 A2[A6600000]        <1> 		mov [iconselected], al
  7185 00005CCE 8025[A6600000]01    <1> 		and byte [iconselected], 1
  7186 00005CD5 B401                <1> 		mov ah, 1
  7187 00005CD7 E885F9FFFF          <1> 		call graphicsadd
  7188                              <1> 	showicon2:
  7189 00005CDC 8B3D[FE840000]      <1> 		mov edi, [physbaseptr]
  7190 00005CE2 6601D2              <1> 		add dx, dx
  7191 00005CE5 663B15[995D0000]    <1> 		cmp dx, [resolutionx2]
  7192 00005CEC 720C                <1> 		jb screenxgood
  7193 00005CEE 668B15[995D0000]    <1> 		mov dx, [resolutionx2]
  7194 00005CF5 6681EA4000          <1> 		sub dx, 64
  7195                              <1> 	screenxgood:
  7196 00005CFA 6681F90000          <1> 		cmp cx, 0
  7197 00005CFF 7422                <1> 		je noscreenygoodchk
  7198 00005D01 663B0D[955D0000]    <1> 		cmp cx, [resolutiony]
  7199 00005D08 720C                <1> 		jb screenygood
  7200 00005D0A 668B0D[955D0000]    <1> 		mov cx, [resolutiony]
  7201 00005D11 6681E92000          <1> 		sub cx, 32
  7202                              <1> 	screenygood:
  7203 00005D16 31DB                <1> 		xor ebx, ebx
  7204 00005D18 668B1D[995D0000]    <1> 		mov bx, [resolutionx2]
  7205 00005D1F 01DF                <1> 		add edi, ebx
  7206 00005D21 E2F3                <1> 		loop screenygood
  7207                              <1> 	noscreenygoodchk:
  7208 00005D23 31DB                <1> 		xor ebx, ebx
  7209 00005D25 6689D3              <1> 		mov bx, dx
  7210 00005D28 01DF                <1> 		add edi, ebx
  7211 00005D2A 6631C9              <1> 		xor cx, cx
  7212 00005D2D 668B06              <1> 		mov ax, [esi]
  7213 00005D30 81C602000000        <1> 		add esi, 2
  7214 00005D36 66A3[C75C0000]      <1> 		mov [iconcolor], ax
  7215                              <1> 	writeicon:
  7216 00005D3C 8B06                <1> 		mov eax, [esi]
  7217 00005D3E D1C0                <1> 		rol eax, 1
  7218 00005D40 30C9                <1> 		xor cl, cl
  7219                              <1> 	writeiconline:
  7220 00005D42 B201                <1> 		mov dl, 1
  7221 00005D44 20C2                <1> 		and dl, al
  7222 00005D46 3215[A6600000]      <1> 		xor dl, [iconselected]
  7223 00005D4C 668B1D[E14D0000]    <1> 		mov bx, [background]
  7224 00005D53 66891F              <1> 		mov [edi], bx
  7225 00005D56 80FA00              <1> 		cmp dl, 0
  7226 00005D59 740A                <1> 		je noiconline
  7227 00005D5B 668B15[C75C0000]    <1> 		mov dx, [iconcolor]
  7228 00005D62 668917              <1> 		mov [edi], dx
  7229                              <1> 	noiconline:
  7230 00005D65 81C702000000        <1> 		add edi, 2
  7231 00005D6B D1C0                <1> 		rol eax, 1
  7232 00005D6D FEC1                <1> 		inc cl
  7233 00005D6F 80F920              <1> 		cmp cl, 32
  7234 00005D72 72CE                <1> 		jb writeiconline
  7235 00005D74 81C604000000        <1> 		add esi, 4
  7236 00005D7A FEC5                <1> 		inc ch
  7237 00005D7C 31D2                <1> 		xor edx, edx
  7238 00005D7E 668B15[995D0000]    <1> 		mov dx, [resolutionx2]
  7239 00005D85 01D7                <1> 		add edi, edx
  7240 00005D87 81EF40000000        <1> 		sub edi, 64
  7241 00005D8D 80FD20              <1> 		cmp ch, 32
  7242 00005D90 72AA                <1> 		jb writeicon
  7243 00005D92 31C0                <1> 		xor eax, eax
  7244 00005D94 C3                  <1> 		ret
  7245                              <1> 
  7246 00005D95 0000                <1> resolutiony dw 0
  7247 00005D97 0000                <1> resolutionx dw 0
  7248 00005D99 0000                <1> resolutionx2 dw 0
  7249 00005D9B 02                  <1> resolutionbytes db 2
  7250 00005D9C 0000                <1> posxvesa dw 0
  7251 00005D9E 0000                <1> posyvesa dw 0
  7252 00005DA0 FFFF                <1> colorfont dw 0xFFFF
  7253                              <1> savefontvesa:		;;same rules as showfontvesa
  7254 00005DA2 C605[144F0000]01    <1> 	mov byte [savefonton], 1
  7255                              <1> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  7256 00005DA9 3CFF                <1> 	cmp al, 255
  7257 00005DAB 7501                <1> 	jne nostopshowfont
  7258 00005DAD C3                  <1> 	ret
  7259                              <1> nostopshowfont:
  7260 00005DAE 66890D[9E5D0000]    <1> 	mov [posyvesa], cx
  7261 00005DB5 3C0A                <1> 	cmp al, 10
  7262 00005DB7 0F8431000000        <1> 	je near goodvesafontx
  7263 00005DBD 3C0D                <1> 	cmp al, 13
  7264 00005DBF 0F8429000000        <1> 	je near goodvesafontx
  7265 00005DC5 31C9                <1> 	xor ecx, ecx
  7266 00005DC7 668B0D[995D0000]    <1> 	mov cx, [resolutionx2]
  7267 00005DCE 6681E91000          <1> 	sub cx, 16
  7268 00005DD3 6639CA              <1> 	cmp dx, cx
  7269 00005DD6 7616                <1> 	jbe goodvesafontx
  7270 00005DD8 6631D2              <1> 	xor dx, dx
  7271 00005DDB 668B0D[9E5D0000]    <1> 	mov cx, [posyvesa]
  7272 00005DE2 6681C11000          <1> 	add cx, 16
  7273 00005DE7 66890D[9E5D0000]    <1> 	mov [posyvesa], cx
  7274                              <1> goodvesafontx:
  7275 00005DEE 668B0D[9E5D0000]    <1> 	mov cx, [posyvesa]
  7276 00005DF5 668915[9C5D0000]    <1> 	mov [posxvesa], dx
  7277 00005DFC 8B3D[FE840000]      <1> 	mov edi, [physbaseptr]
  7278 00005E02 66891D[A05D0000]    <1> 	mov [colorfont], bx
  7279 00005E09 31DB                <1> 	xor ebx, ebx
  7280 00005E0B 88C3                <1> 	mov bl, al
  7281 00005E0D 31C0                <1> 	xor eax, eax
  7282 00005E0F 88D8                <1> 	mov al, bl
  7283 00005E11 6689D3              <1> 	mov bx, dx
  7284 00005E14 89DA                <1> 	mov edx, ebx
  7285 00005E16 31DB                <1> 	xor ebx, ebx
  7286 00005E18 6681F90000          <1> 	cmp cx, 0
  7287 00005E1D 7415                <1> 	je vesaposloopdn
  7288 00005E1F 668B1D[995D0000]    <1> 	mov bx, [resolutionx2]
  7289                              <1> vesaposloop:
  7290 00005E26 01DA                <1> 	add edx, ebx
  7291 00005E28 6681E90100          <1> 	sub cx, 1
  7292 00005E2D 6681F90000          <1> 	cmp cx, 0
  7293 00005E32 75F2                <1> 	jne vesaposloop
  7294                              <1> vesaposloopdn:
  7295 00005E34 01D7                <1> 	add edi, edx
  7296 00005E36 BE[C6720000]        <1> 	mov esi, fonts
  7297                              <1> findfontvesa:
  7298 00005E3B 30E4                <1> 	xor ah, ah
  7299 00005E3D 3C0A                <1> 	cmp al, 10
  7300 00005E3F 0F8406010000        <1> 	je near nwlinevesa
  7301 00005E45 3C0D                <1> 	cmp al, 13
  7302 00005E47 0F8413010000        <1> 	je near cretvesa
  7303 00005E4D C1E004              <1> 	shl eax, 4
  7304 00005E50 01C6                <1> 	add esi, eax
  7305 00005E52 C1E804              <1> 	shr eax, 4
  7306 00005E55 81FE[C6820000]      <1> 	cmp esi, fontend
  7307 00005E5B 0F83B9000000        <1> 	jae near donefontvesa
  7308 00005E61 4E                  <1> 	dec esi
  7309                              <1> foundfontvesa:
  7310 00005E62 46                  <1> 	inc esi
  7311 00005E63 803D[144F0000]01    <1> 	cmp byte [savefonton], 1
  7312 00005E6A 0F8403010000        <1> 	je near vesafontsaver
  7313 00005E70 30C9                <1> 	xor cl, cl
  7314 00005E72 8A06                <1> 	mov al, [esi]
  7315 00005E74 668B15[995D0000]    <1> 	mov dx, [resolutionx2]
  7316 00005E7B 662B15[9C5D0000]    <1> 	sub dx, [posxvesa]
  7317 00005E82 6681FA1000          <1> 	cmp dx, 16
  7318 00005E87 7708                <1> 	ja paintfontvesa
  7319 00005E89 D0EA                <1> 	shr dl, 1
  7320 00005E8B 8815[4A5F0000]      <1> 	mov [charwidth], dl
  7321                              <1> paintfontvesa:
  7322 00005E91 B201                <1> 	mov dl, 1
  7323 00005E93 20C2                <1> 	and dl, al
  7324 00005E95 803D[134F0000]01    <1> 	cmp byte [showcursorfonton], 1
  7325 00005E9C 0F8435000000        <1> 	je near nodelpaintedfont
  7326 00005EA2 803D[134F0000]02    <1> 	cmp byte [showcursorfonton], 2
  7327 00005EA9 0F8518000000        <1> 	jne near noswitchcursorfonton
  7328 00005EAF 80FA00              <1> 	cmp dl, 0
  7329 00005EB2 0F842E000000        <1> 	je near nopixelset
  7330 00005EB8 668B1D[A05D0000]    <1> 	mov bx, [colorfont]
  7331 00005EBF 66891F              <1> 	mov [edi], bx
  7332 00005EC2 E91F000000          <1> 	jmp nopixelset
  7333                              <1> noswitchcursorfonton:
  7334 00005EC7 3215[154F0000]      <1> 	xor dl, [mouseselecton]
  7335 00005ECD 668B1D[E14D0000]    <1> 	mov bx, [background]
  7336 00005ED4 66891F              <1> 	mov [edi], bx
  7337                              <1> nodelpaintedfont:
  7338 00005ED7 80FA00              <1> 	cmp dl, 0
  7339 00005EDA 740A                <1> 	je nopixelset
  7340 00005EDC 668B15[A05D0000]    <1> 	mov dx, [colorfont]
  7341 00005EE3 668917              <1> 	mov [edi], dx
  7342                              <1> nopixelset:
  7343 00005EE6 81C702000000        <1> 	add edi, 2
  7344 00005EEC D0C0                <1> 	rol al, 1
  7345 00005EEE FEC1                <1> 	inc cl
  7346 00005EF0 3A0D[4A5F0000]      <1> 	cmp cl, [charwidth]
  7347 00005EF6 7299                <1> 	jb paintfontvesa
  7348 00005EF8 FEC5                <1> 	inc ch
  7349 00005EFA 31D2                <1> 	xor edx, edx
  7350 00005EFC 668B15[995D0000]    <1> 	mov dx, [resolutionx2]
  7351 00005F03 01D7                <1> 	add edi, edx
  7352 00005F05 31D2                <1> 	xor edx, edx
  7353 00005F07 8A15[4A5F0000]      <1> 	mov dl, [charwidth]
  7354 00005F0D 00D2                <1> 	add dl, dl
  7355 00005F0F 29D7                <1> 	sub edi, edx
  7356 00005F11 80FD10              <1> 	cmp ch, 16
  7357 00005F14 0F8248FFFFFF        <1> 	jb foundfontvesa
  7358                              <1> donefontvesa:
  7359 00005F1A B208                <1> 	mov dl, 8
  7360 00005F1C 8815[4A5F0000]      <1> 	mov [charwidth], dl
  7361 00005F22 668B15[9C5D0000]    <1> 	mov dx, [posxvesa]
  7362 00005F29 8A1D[4A5F0000]      <1> 	mov bl, [charwidth]
  7363 00005F2F 30FF                <1> 	xor bh, bh
  7364 00005F31 6601DA              <1> 	add dx, bx
  7365 00005F34 668B1D[A05D0000]    <1> 	mov bx, [colorfont]
  7366 00005F3B 668B0D[9E5D0000]    <1> 	mov cx, [posyvesa]
  7367 00005F42 C605[144F0000]00    <1> 	mov byte [savefonton], 0
  7368 00005F49 C3                  <1> 	ret
  7369 00005F4A 08                  <1> charwidth db 8
  7370                              <1> nwlinevesa:
  7371 00005F4B 668B0D[9E5D0000]    <1> 	mov cx, [posyvesa]
  7372 00005F52 6681C11000          <1> 	add cx, 16
  7373 00005F57 66890D[9E5D0000]    <1> 	mov [posyvesa], cx
  7374 00005F5E EBBA                <1> 	jmp donefontvesa
  7375                              <1> cretvesa:
  7376 00005F60 668B15[9C5D0000]    <1> 	mov dx, [posxvesa]
  7377 00005F67 6631D2              <1> 	xor dx, dx
  7378 00005F6A 668915[9C5D0000]    <1> 	mov [posxvesa], dx
  7379 00005F71 EBA7                <1> 	jmp donefontvesa
  7380                              <1> vesafontsaver:
  7381 00005F73 30C0                <1> 	xor al, al
  7382 00005F75 30C9                <1> 	xor cl, cl
  7383                              <1> vesafontsaver2:
  7384 00005F77 668B17              <1> 	mov dx, [edi]
  7385 00005F7A 663B15[A05D0000]    <1> 	cmp dx, [colorfont]
  7386 00005F81 742F                <1> 	je colorfontmatch
  7387                              <1> donecolormatch:
  7388 00005F83 81C702000000        <1> 	add edi, 2
  7389 00005F89 D0C0                <1> 	rol al, 1
  7390 00005F8B FEC1                <1> 	inc cl
  7391 00005F8D 80F908              <1> 	cmp cl, 8
  7392 00005F90 72E5                <1> 	jb vesafontsaver2
  7393 00005F92 8806                <1> 	mov [esi], al
  7394 00005F94 46                  <1> 	inc esi
  7395 00005F95 FEC5                <1> 	inc ch
  7396 00005F97 31D2                <1> 	xor edx, edx
  7397 00005F99 668B15[995D0000]    <1> 	mov dx, [resolutionx2]
  7398 00005FA0 01D7                <1> 	add edi, edx
  7399 00005FA2 81EF10000000        <1> 	sub edi, 16
  7400 00005FA8 80FD10              <1> 	cmp ch, 16
  7401 00005FAB 72C6                <1> 	jb vesafontsaver
  7402 00005FAD E968FFFFFF          <1> 	jmp donefontvesa
  7403                              <1> colorfontmatch:
  7404 00005FB2 0401                <1> 	add al, 1
  7405 00005FB4 EBCD                <1> 	jmp donecolormatch
  7406                              <1> 	
  7407                              <1> showbmp:
  7408 00005FB6 668B06              <1> 	mov ax, [esi]
  7409 00005FB9 663D424D            <1> 	cmp ax, "BM"
  7410 00005FBD 0F8582000000        <1> 	jne near endedbmp
  7411 00005FC3 8B3D[FE840000]      <1> 	mov edi, [physbaseptr]
  7412 00005FC9 6689D0              <1> 	mov ax, dx
  7413 00005FCC 6689CB              <1> 	mov bx, cx
  7414 00005FCF 31C9                <1> 	xor ecx, ecx
  7415 00005FD1 31D2                <1> 	xor edx, edx
  7416 00005FD3 6689D9              <1> 	mov cx, bx
  7417 00005FD6 6689C2              <1> 	mov dx, ax
  7418 00005FD9 01D7                <1> 	add edi, edx
  7419 00005FDB 01D7                <1> 	add edi, edx
  7420 00005FDD 31D2                <1> 	xor edx, edx
  7421 00005FDF 668B15[995D0000]    <1> 	mov dx, [resolutionx2]
  7422 00005FE6 41                  <1> 	inc ecx
  7423 00005FE7 034E16              <1> 	add ecx, [esi + 22]
  7424                              <1> bmplocloop:
  7425 00005FEA 01D7                <1> 	add edi, edx
  7426 00005FEC E2FC                <1> 	loop bmplocloop
  7427 00005FEE 29D7                <1> 	sub edi, edx
  7428 00005FF0 8B5612              <1> 	mov edx, [esi + 18]
  7429 00005FF3 8B4E16              <1> 	mov ecx, [esi + 22]
  7430 00005FF6 8B460A              <1> 	mov eax, [esi + 10]
  7431 00005FF9 8B5E02              <1> 	mov ebx, [esi + 2]
  7432 00005FFC 01F3                <1> 	add ebx, esi
  7433 00005FFE 891D[4B600000]      <1> 	mov [bmpend], ebx
  7434 00006004 89D3                <1> 	mov ebx, edx
  7435 00006006 01C6                <1> 	add esi, eax
  7436                              <1> ldxbmp:
  7437 00006008 668B06              <1> 	mov ax, [esi]
  7438 0000600B 668907              <1> 	mov [edi], ax
  7439 0000600E 81C702000000        <1> 	add edi, 2
  7440 00006014 81C602000000        <1> 	add esi, 2
  7441 0000601A 3B35[4B600000]      <1> 	cmp esi, [bmpend]
  7442 00006020 7723                <1> 	ja endedbmp
  7443 00006022 4A                  <1> 	dec edx
  7444 00006023 81FA00000000        <1> 	cmp edx, 0
  7445 00006029 77DD                <1> 	ja ldxbmp
  7446 0000602B 31D2                <1> 	xor edx, edx
  7447 0000602D 668B15[995D0000]    <1> 	mov dx, [resolutionx2]
  7448 00006034 29DF                <1> 	sub edi, ebx
  7449 00006036 29DF                <1> 	sub edi, ebx
  7450 00006038 29D7                <1> 	sub edi, edx
  7451 0000603A 49                  <1> 	dec ecx
  7452 0000603B 89DA                <1> 	mov edx, ebx
  7453 0000603D 81F900000000        <1> 	cmp ecx, 0
  7454 00006043 77C3                <1> 	ja ldxbmp
  7455                              <1> endedbmp:
  7456 00006045 E887EFFFFF          <1> 	call switchmousepos2
  7457 0000604A C3                  <1> 	ret
  7458                              <1> 	
  7459 0000604B 00000000            <1> 	bmpend dd 0
  7460                              <1> 
  7461                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Here are some vars;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  7462 0000604F 00000000            <1> 	showstringesi dw 0,0
  7463 00006053 00                  <1> 	mouseon db 0
  7464 00006054 737461727400        <1> 	start	db "start",0
  7465 0000605A 536F6C6C65724F5300  <1> 	gotomenu db "SollerOS",0
  7466 00006063 426F6F2100          <1> 	boomsg db "Boo!",0
  7467 00006068 5061636D616E207761- <1> 	pacmsg	db "Pacman was easy to draw.",0
  7468 00006071 73206561737920746F- <1>
  7469 0000607A 20647261772E00      <1>
  7470 00006081 4F6D206E6F6D206E6F- <1> 	pacnom  db "Om nom nom nom",0
  7471 0000608A 6D206E6F6D00        <1>
  7472 00006090 77696E646F77732073- <1> 	winmsg	db "windows sucks",0
  7473 00006099 75636B7300          <1>
  7474 0000609E 5800                <1> 	xmsg db "X",0
  7475 000060A0 0000                <1> 	icon dw 0	;pointer to icon
  7476 000060A2 00000000            <1> 	codepointer dw 0,0 ;pointer to code
  7477 000060A6 00                  <1> 	iconselected db 0
  7478                              <1> 	
  7479                              <1> 	boo:
  7480 000060A7 BE[63600000]        <1> 		mov esi, boomsg
  7481 000060AC 66BA6400            <1> 		mov dx, 100
  7482 000060B0 66B94001            <1> 		mov cx, 320
  7483 000060B4 31DB                <1> 		xor ebx, ebx
  7484 000060B6 6631C0              <1> 		xor ax, ax
  7485 000060B9 E909F8FFFF          <1> 		jmp showstring
  7486                              <1> 
  7487                              <1> 	pacmannomnom:
  7488 000060BE BE[81600000]        <1> 		mov esi, pacnom
  7489 000060C3 66BA8200            <1> 		mov dx, 130
  7490 000060C7 66B93C00            <1> 		mov cx, 60
  7491 000060CB 31DB                <1> 		xor ebx, ebx
  7492 000060CD 6631C0              <1> 		xor ax, ax
  7493 000060D0 E9F2F7FFFF          <1> 		jmp showstring	
  7494                              <1> 	
  7495                              <1> 	noie:
  7496 000060D5 31D2                <1> 		xor edx, edx
  7497 000060D7 31C9                <1> 		xor ecx, ecx
  7498 000060D9 668B15[975D0000]    <1> 		mov dx, [resolutionx]
  7499 000060E0 668B0D[955D0000]    <1> 		mov cx, [resolutiony]
  7500 000060E7 66C1EA03            <1> 		shr dx, 3
  7501 000060EB 66C1E904            <1> 		shr cx, 4
  7502 000060EF 6681EA0400          <1> 		sub dx, 4
  7503 000060F4 6681E90400          <1> 		sub cx, 4
  7504 000060F9 66C1E203            <1> 		shl dx, 3
  7505 000060FD 66C1E104            <1> 		shl cx, 4
  7506 00006101 668915[C5610000]    <1> 		mov [termwindow], dx
  7507 00006108 66890D[C7610000]    <1> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  7508 0000610F BE[C5610000]        <1> 		mov esi, termwindow
  7509 00006114 66BA1000            <1> 		mov dx, 16
  7510 00006118 66B91000            <1> 		mov cx, 16
  7511 0000611C BB[2E2F0000]        <1> 		mov ebx, os
  7512 00006121 891D[25040000]      <1> 		mov [user2codepoint], ebx
  7513 00006127 6631C0              <1> 		xor ax, ax
  7514 0000612A E800F8FFFF          <1> 		call showwindow
  7515 0000612F E9FACDFFFF          <1> 		jmp os
  7516                              <1> 
  7517                              <1> 	gotomenuboot:
  7518 00006134 31D2                <1> 		xor edx, edx
  7519 00006136 31C9                <1> 		xor ecx, ecx
  7520 00006138 668B15[975D0000]    <1> 		mov dx, [resolutionx]
  7521 0000613F 668B0D[955D0000]    <1> 		mov cx, [resolutiony]
  7522 00006146 66C1E904            <1> 		shr cx, 4
  7523 0000614A 6681E90100          <1> 		sub cx, 1
  7524 0000614F 66C1E104            <1> 		shl cx, 4
  7525 00006153 668915[C5610000]    <1> 		mov [termwindow], dx
  7526 0000615A 66890D[C7610000]    <1> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  7527 00006161 BE[C5610000]        <1> 		mov esi, termwindow
  7528 00006166 6631D2              <1> 		xor dx, dx
  7529 00006169 6631C9              <1> 		xor cx, cx
  7530 0000616C BB[2E2F0000]        <1> 		mov ebx, os
  7531 00006171 891D[25040000]      <1> 		mov [user2codepoint], ebx
  7532 00006177 6631C0              <1> 		xor ax, ax
  7533 0000617A E8B0F7FFFF          <1> 		call showwindow
  7534 0000617F E9AACDFFFF          <1> 		jmp os
  7535                              <1> 		;ret
  7536                              <1> 
  7537                              <1> 	winblows:
  7538 00006184 BE[90600000]        <1> 		mov esi, winmsg
  7539 00006189 6631D2              <1> 		xor dx, dx
  7540 0000618C 668B0D[955D0000]    <1> 		mov cx, [resolutiony]
  7541 00006193 6681E92000          <1> 		sub cx, 32
  7542 00006198 31DB                <1> 		xor ebx, ebx
  7543 0000619A 30E4                <1> 		xor ah, ah
  7544 0000619C B011                <1> 		mov al, 00010001b
  7545 0000619E E824F7FFFF          <1> 		call showstring
  7546 000061A3 BE[5A600000]        <1> 		mov esi, gotomenu
  7547 000061A8 668B0D[955D0000]    <1> 		mov cx, [resolutiony]
  7548 000061AF 6681E93000          <1> 		sub cx, 48
  7549 000061B4 6631D2              <1> 		xor dx, dx
  7550 000061B7 30E4                <1> 		xor ah, ah
  7551 000061B9 B010                <1> 		mov al, 00010000b
  7552 000061BB BB[34610000]        <1> 		mov ebx, gotomenuboot
  7553 000061C0 E902F7FFFF          <1> 		jmp showstring
  7554                              <1> 
  7555 000061C5 20035802            <1> 	termwindow:	dw 800,600	;;window size
  7556 000061C9 53757065725465726D- <1> 	termmsg:	db "SuperTerminal",0	;;window title
  7557 000061D2 696E616C00          <1>
  7558                              <1> 	
  7559 000061D2 <incbin>            <1> interneticon: 	incbin 'source/precompiled/interneticon.pak'
  7560 000061D2 <incbin>            <1> wordicon: 	incbin 'source/precompiled/wordicon.pak'
  7561 000061D2 <incbin>            <1> pacmanpellet: incbin 'source/precompiled/pacmanpellet.pak'
  7562 000061D2 <incbin>            <1> ghostie	incbin 'source/precompiled/ghostie.pak'
  7563 000061D2 <incbin>            <1> pacman	incbin 'source/precompiled/pacman.pak'
  7564                                      ;%include 'source/network.asm'
  7565                                  	%include 'source/rtl8139.asm'
  7566                              <1> ;;rtl8139.asm
  7567                              <1> initcard:	;;should find card, get mac, and initialize card
  7568 00006461 31C0                <1> 	xor eax, eax
  7569 00006463 A2[95670000]        <1> 	mov [pcifunction], al
  7570 00006468 A2[93670000]        <1> 	mov [pcibus], al
  7571 0000646D A2[94670000]        <1> 	mov [pcidevice], al
  7572 00006472 B002                <1> 	mov al, 0x02 ;;type code
  7573 00006474 A2[10680000]        <1> 	mov [pcitype], al
  7574 00006479 E81A030000          <1> 	call getpciport
  7575                              <1> initnic:		;;;;Here i tried the rtl8139 interface, fuck it
  7576 0000647E 8915[6A660000]      <1> 	mov [basenicaddr], edx
  7577 00006484 89D1                <1> 	mov ecx, edx
  7578 00006486 C605[58350000]03    <1> 	mov byte [firsthexshown], 3
  7579 0000648D E8DBD0FFFF          <1> 	call showhex	;;for debugging, please remove
  7580 00006492 BE[5F720000]        <1> 	mov esi, rbuffstart
  7581 00006497 B900200000          <1> 	mov ecx, 8192
  7582 0000649C 31C0                <1> 	xor eax, eax
  7583                              <1> clearrbuff:		;;clear receive buffer which starts at rbuffstart
  7584 0000649E 8806                <1> 	mov [esi], al
  7585 000064A0 46                  <1> 	inc esi
  7586 000064A1 6649                <1> 	dec cx
  7587 000064A3 6681F90000          <1> 	cmp cx, 0
  7588 000064A8 75F4                <1> 	jne clearrbuff
  7589                              <1> findmac:
  7590 000064AA 8B15[6A660000]      <1> 	mov edx, [basenicaddr]
  7591 000064B0 BF[72660000]        <1> 	mov edi, sysmac
  7592 000064B5 B906000000          <1> 	mov ecx, 6
  7593                              <1> macputloop:
  7594 000064BA EC                  <1> 	in al, dx
  7595 000064BB 8807                <1> 	mov [edi], al
  7596 000064BD 47                  <1> 	inc edi
  7597 000064BE 42                  <1> 	inc edx
  7598 000064BF 49                  <1> 	dec ecx
  7599 000064C0 75F8                <1> 	jnz macputloop
  7600 000064C2 B9[72660000]        <1> 	mov ecx, sysmac
  7601 000064C7 E837010000          <1> 	call showmac
  7602                              <1> resetnic:
  7603 000064CC 8B15[6A660000]      <1> 	mov edx, [basenicaddr]
  7604 000064D2 81C252000000        <1> 	add edx, 0x52
  7605 000064D8 30C0                <1> 	xor al, al
  7606 000064DA EE                  <1> 	out dx, al	;;WAKE UP!!!!
  7607 000064DB 8B15[6A660000]      <1> 	mov edx, [basenicaddr]
  7608 000064E1 81C237000000        <1> 	add edx, 0x37
  7609 000064E7 B010                <1> 	mov al, 0x10
  7610 000064E9 EE                  <1> 	out dx, al	;;Reset
  7611                              <1> resetnicwait:
  7612 000064EA 8B15[6A660000]      <1> 	mov edx, [basenicaddr]
  7613 000064F0 81C237000000        <1> 	add edx, 0x37
  7614 000064F6 EC                  <1> 	in al, dx
  7615 000064F7 2410                <1> 	and al, 0x10
  7616 000064F9 3C10                <1> 	cmp al, 0x10
  7617 000064FB 0F84E9FFFFFF        <1> 	je near resetnicwait
  7618 00006501 8B15[6A660000]      <1> 	mov edx, [basenicaddr]
  7619 00006507 81C230000000        <1> 	add edx, 0x30
  7620 0000650D B8[5F720000]        <1> 	mov eax, rbuffstart
  7621 00006512 EF                  <1> 	out dx, eax	;;give nic receive buffer location
  7622 00006513 8B15[6A660000]      <1> 	mov edx, [basenicaddr]
  7623 00006519 81C23C000000        <1> 	add edx, 0x3C
  7624 0000651F 66B80500            <1> 	mov ax, 0x0005
  7625 00006523 66EF                <1> 	out dx, ax	;;set TOK and ROK
  7626 00006525 8B15[6A660000]      <1> 	mov edx, [basenicaddr]
  7627 0000652B 81C244000000        <1> 	add edx, 0x44
  7628 00006531 B80F000000          <1> 	mov eax, 0xf
  7629 00006536 EF                  <1> 	out dx, eax	;;recieve packets from all matches
  7630 00006537 8B15[6A660000]      <1> 	mov edx, [basenicaddr]
  7631 0000653D 81C237000000        <1> 	add edx, 0x37
  7632 00006543 B00C                <1> 	mov al, 0x0C
  7633 00006545 EE                  <1> 	out dx, al	;;use transmit and receive
  7634 00006546 C605[53660000]01    <1> 	mov byte [nicconfig], 1
  7635 0000654D C3                  <1> 	ret
  7636                              <1> 	
  7637                              <1> sendframe:	;;padded frame with beginning in edi and end in esi
  7638 0000654E 56                  <1> 	push esi
  7639 0000654F 57                  <1> 	push edi
  7640                              <1> nic2:		;;here come the low level drivers :(
  7641                              <1> 			;;frame begins at esi, ends at edi 			;;0x0200 is the class code for ethernet cards
  7642 00006550 803D[53660000]01    <1> 	cmp byte [nicconfig], 1
  7643 00006557 7405                <1> 	je sendcachedata
  7644 00006559 E803FFFFFF          <1> 	call initcard
  7645                              <1> sendcachedata:
  7646 0000655E 8B15[6A660000]      <1> 	mov edx, [basenicaddr]
  7647 00006564 81C210000000        <1> 	add edx, 0x10
  7648 0000656A ED                  <1> 	in eax, dx
  7649 0000656B 89C1                <1> 	mov ecx, eax
  7650 0000656D E8FBCFFFFF          <1> 	call showhex
  7651 00006572 8B15[6A660000]      <1> 	mov edx, [basenicaddr]
  7652 00006578 81C213000000        <1> 	add edx, 0x13
  7653 0000657E ED                  <1> 	in eax, dx
  7654 0000657F 89C1                <1> 	mov ecx, eax
  7655 00006581 E8E7CFFFFF          <1> 	call showhex
  7656 00006586 8B15[6A660000]      <1> 	mov edx, [basenicaddr]
  7657 0000658C 81C223000000        <1> 	add edx, 0x23	;;23 or 20?
  7658 00006592 5F                  <1> 	pop edi
  7659 00006593 89F8                <1> 	mov eax, edi
  7660 00006595 EF                  <1> 	out dx, eax	;;here's Johnny!
  7661 00006596 5E                  <1> 	pop esi
  7662 00006597 29FE                <1> 	sub esi, edi
  7663 00006599 89F0                <1> 	mov eax, esi
  7664 0000659B 8B15[6A660000]      <1> 	mov edx, [basenicaddr]
  7665 000065A1 81C213000000        <1> 	add edx, 0x13	;;13 or 10?
  7666 000065A7 EF                  <1> 	out dx, eax
  7667                              <1> checknicstatus1:
  7668 000065A8 8B15[6A660000]      <1> 	mov edx, [basenicaddr]
  7669 000065AE 81C213000000        <1> 	add edx, 0x13	;;13 or 10?
  7670 000065B4 ED                  <1> 	in eax, dx
  7671 000065B5 2500200000          <1> 	and eax, 0x2000
  7672 000065BA 3D00200000          <1> 	cmp eax, 0x2000
  7673 000065BF 75E7                <1> 	jne checknicstatus1
  7674                              <1> checknicstatus:
  7675 000065C1 8B15[6A660000]      <1> 	mov edx, [basenicaddr]
  7676 000065C7 81C213000000        <1> 	add edx, 0x13	;;13 or 10?
  7677 000065CD ED                  <1> 	in eax, dx
  7678 000065CE 2500800000          <1> 	and eax, 0x8000
  7679 000065D3 3D00800000          <1> 	cmp eax, 0x8000
  7680 000065D8 75E7                <1> 	jne checknicstatus
  7681 000065DA 8B15[6A660000]      <1> 	mov edx, [basenicaddr]
  7682 000065E0 81C210000000        <1> 	add edx, 0x10
  7683 000065E6 ED                  <1> 	in eax, dx
  7684 000065E7 89C1                <1> 	mov ecx, eax
  7685 000065E9 E87FCFFFFF          <1> 	call showhex
  7686 000065EE 8B15[6A660000]      <1> 	mov edx, [basenicaddr]
  7687 000065F4 81C213000000        <1> 	add edx, 0x13
  7688 000065FA ED                  <1> 	in eax, dx
  7689 000065FB 89C1                <1> 	mov ecx, eax
  7690 000065FD E86BCFFFFF          <1> 	call showhex
  7691 00006602 C3                  <1> 	ret
  7692                              <1> 	
  7693                              <1> showmac:	;;mac begins in [ecx]
  7694 00006603 BE[3B660000]        <1> 	mov esi, macprint
  7695 00006608 89CF                <1> 	mov edi, ecx
  7696 0000660A 81C106000000        <1> 	add ecx, 6
  7697                              <1> showmacloop:
  7698 00006610 8A07                <1> 	mov al, [edi]
  7699 00006612 8A27                <1> 	mov ah, [edi]
  7700 00006614 C0E804              <1> 	shr al, 4
  7701 00006617 C0E404              <1> 	shl ah, 4
  7702 0000661A C0EC04              <1> 	shr ah, 4
  7703 0000661D 0430                <1> 	add al, 48
  7704 0000661F 80C430              <1> 	add ah, 48
  7705 00006622 668906              <1> 	mov [esi], ax
  7706 00006625 81C603000000        <1> 	add esi, 3
  7707 0000662B 47                  <1> 	inc edi
  7708 0000662C 39CF                <1> 	cmp edi, ecx
  7709 0000662E 72E0                <1> 	jb showmacloop
  7710 00006630 BE[3B660000]        <1> 	mov esi, macprint
  7711 00006635 E8C1C3FFFF          <1> 	call print
  7712 0000663A C3                  <1> 	ret
  7713                              <1> 	
  7714 0000663B 30302D30302D30302D- <1> macprint db "00-00-00-00-00-00  ",0
  7715 00006644 30302D30302D303020- <1>
  7716 0000664D 2000                <1>
  7717 0000664F 00000000            <1> ethernetend dw 0,0
  7718 00006653 00                  <1> nicconfig db 0
  7719 00006654 4E4F204E494300      <1> nonicfoundmsg db "NO NIC",0
  7720 0000665B 496E6974696174696E- <1> initnicmsg	db "Initiating NIC",0
  7721 00006664 67204E494300        <1>
  7722 0000666A 00000000            <1> basenicaddr	db 0,0,0,0
  7723 0000666E C0A80005            <1> sysip db 192,168,0,5
  7724 00006672 000000000000        <1> sysmac	db 0,0,0,0,0,0		;;my mac address
  7725                                  	%include 'source/arp.asm'
  7726                              <1> ;;let's try something else
  7727                              <1> ;;arp.asm
  7728                              <1> arpinit:
  7729 00006678 BE[2F670000]        <1> 	mov esi, arptable
  7730 0000667D BF[72660000]        <1> 	mov edi, sysmac
  7731 00006682 BB[6E660000]        <1> 	mov ebx, sysip
  7732 00006687 8B0F                <1> 	mov ecx, [edi]
  7733 00006689 890E                <1> 	mov [esi], ecx
  7734 0000668B 668B4F04            <1> 	mov cx, [edi + 4]
  7735 0000668F 894E04              <1> 	mov [esi + 4], ecx
  7736 00006692 8B0B                <1> 	mov ecx, [ebx]
  7737 00006694 894E06              <1> 	mov [esi + 6], ecx
  7738 00006697 C605[2E670000]01    <1> 	mov byte [arpconfig], 1
  7739 0000669E C3                  <1> 	ret
  7740                              <1> arptest:
  7741 0000669F 803D[2E670000]01    <1> 	cmp byte [arpconfig], 1
  7742 000066A6 7405                <1> 	je arptest2
  7743 000066A8 E8CBFFFFFF          <1> 	call arpinit
  7744                              <1> arptest2:	;;try to reach 192.168.0.1
  7745 000066AD 8B0D[72660000]      <1> 	mov ecx, [sysmac]
  7746 000066B3 668B1D[76660000]    <1> 	mov bx, [sysmac + 4]
  7747 000066BA 890D[F4660000]      <1> 	mov [sourcemac], ecx
  7748 000066C0 66891D[F8660000]    <1> 	mov [sourcemac + 4],bx
  7749 000066C7 890D[04670000]      <1> 	mov [arpsenderinfo], ecx
  7750 000066CD 66891D[08670000]    <1> 	mov [arpsenderinfo + 4], bx
  7751 000066D4 BF[EE660000]        <1> 	mov edi, frame
  7752 000066D9 BE[2E670000]        <1> 	mov esi, framend
  7753 000066DE E86BFEFFFF          <1> 	call sendframe
  7754 000066E3 BE[9D720000]        <1> 	mov esi, line
  7755 000066E8 E80EC3FFFF          <1> 	call print
  7756 000066ED C3                  <1> 	ret
  7757                              <1> 	
  7758                              <1> ;;example frame
  7759                              <1> frame:
  7760 000066EE FFFFFFFFFFFF        <1> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  7761 000066F4 000000000000        <1> sourcemac:		db 0,0,0,0,0,0
  7762 000066FA 0608                <1> ethertype:		dw 0x0806			;;arp
  7763                              <1> 	;;example packet
  7764 000066FC 0100                <1> 	arppacket: 		dw 1				;;ethernet is 1
  7765 000066FE 0008                <1> 	arpprotocol: 	dw 0x0800			;;ip is 0x800
  7766 00006700 0604                <1> 					db 6,4				;;length of mac, length of ip
  7767 00006702 0100                <1> 	arpoperation: 	dw 1				;;one for arp request
  7768 00006704 000000000000        <1> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;;mac
  7769 0000670A C0A80005            <1> 					db 192,168,0,5			;;ip
  7770 0000670E 000000000000        <1> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;;ignored in requests
  7771 00006714 C0A80001            <1> 					db 192,168,0,1			;;ip
  7772 00006718 00<rept>            <1> padding:		times (64-($-frame)) db 0
  7773                              <1> framend:
  7774                              <1> 
  7775 0000672E 00                  <1> arpconfig db 0
  7776                              <1> arptable:	;;mac,ip
  7777 0000672F 000000000000000000- <1> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  7778 00006738 00<rept>            <1>
  7779                              <1> arptableend:
  7780                                  	%include 'source/pci.asm'
  7781 00006793 00                  <1> pcibus		db 0
  7782 00006794 00                  <1> pcidevice	db 0
  7783 00006795 00                  <1> pcifunction	db 0
  7784 00006796 00                  <1> pciregister	db 0
  7785 00006797 00                  <1> pcireqtype db 0
  7786                              <1> 
  7787                              <1> getpciport:
  7788 00006798 B001                <1> 	mov al, 1
  7789 0000679A A2[97670000]        <1> 	mov [pcireqtype], al
  7790 0000679F E916000000          <1> 	jmp searchpci
  7791                              <1> pcidump:
  7792 000067A4 31C0                <1> 	xor eax, eax
  7793 000067A6 A2[95670000]        <1> 	mov [pcifunction], al
  7794 000067AB A2[93670000]        <1> 	mov [pcibus], al
  7795 000067B0 A2[94670000]        <1> 	mov [pcidevice], al
  7796 000067B5 A2[97670000]        <1> 	mov [pcireqtype], al
  7797                              <1> searchpci:		;;return in ebx, start X in pciX
  7798 000067BA 30C0                <1> 	xor al, al
  7799 000067BC A2[96670000]        <1> 	mov [pciregister], al
  7800 000067C1 E841010000          <1> 	call getpciaddr
  7801 000067C6 BAF80C0000          <1> 	mov edx, 0xCF8
  7802 000067CB EF                  <1> 	out dx, eax	;;request pci config
  7803 000067CC BAFC0C0000          <1> 	mov edx, 0xCFC
  7804 000067D1 ED                  <1> 	in eax, dx 	;;read in pci config
  7805 000067D2 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7806 000067D7 0F8237000000        <1> 	jb near checkpcidevice
  7807                              <1> searchpciret:
  7808                              <1> nextpcidevice:
  7809 000067DD 30C0                <1> 	xor al, al
  7810 000067DF A2[95670000]        <1> 	mov [pcifunction], al
  7811 000067E4 A0[94670000]        <1> 	mov al, [pcidevice]
  7812 000067E9 3C1F                <1> 	cmp al, 11111b
  7813 000067EB 0F83AD000000        <1> 	jae near nextpcibus
  7814 000067F1 FEC0                <1> 	inc al
  7815 000067F3 A2[94670000]        <1> 	mov [pcidevice], al
  7816 000067F8 EBC0                <1> 	jmp searchpci
  7817 000067FA A0[95670000]        <1> 	mov al, [pcifunction]
  7818 000067FF 3C07                <1> 	cmp al, 111b
  7819 00006801 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7820 00006807 FEC0                <1> 	inc al
  7821 00006809 A2[95670000]        <1> 	mov [pcifunction], al
  7822 0000680E EBAA                <1> 	jmp searchpci
  7823 00006810 00000000            <1> pcitype: db 0,0,0,0
  7824                              <1> checkpcidevice:
  7825 00006814 30C0                <1> 	xor al, al
  7826 00006816 3805[97670000]      <1> 	cmp [pcireqtype], al
  7827 0000681C 0F842B000000        <1> 	je near dumppcidevice
  7828 00006822 B008                <1> 	mov al, 0x08
  7829 00006824 A2[96670000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7830 00006829 E8D9000000          <1> 	call getpciaddr
  7831 0000682E BAF80C0000          <1> 	mov edx, 0xCF8
  7832 00006833 EF                  <1> 	out dx, eax
  7833 00006834 BAFC0C0000          <1> 	mov edx, 0xCFC
  7834 00006839 ED                  <1> 	in eax, dx
  7835 0000683A C1C008              <1> 	rol eax, 8
  7836 0000683D 8A1D[10680000]      <1> 	mov bl, [pcitype]
  7837 00006843 38D8                <1> 	cmp al, bl
  7838 00006845 0F8472000000        <1> 	je near foundpciaddr
  7839 0000684B EB90                <1> 	jmp searchpciret
  7840                              <1> dumppcidevice:
  7841 0000684D 30C0                <1> 	xor al, al
  7842 0000684F A2[96670000]        <1> 	mov [pciregister], al
  7843 00006854 E8AE000000          <1> 	call getpciaddr
  7844 00006859 89C1                <1> 	mov ecx, eax
  7845 0000685B E80DCDFFFF          <1> 	call showhex
  7846                              <1> dumppcidevicelp:
  7847 00006860 A2[96670000]        <1> 	mov [pciregister], al
  7848 00006865 E89D000000          <1> 	call getpciaddr
  7849 0000686A BAF80C0000          <1> 	mov edx, 0xCF8
  7850 0000686F EF                  <1> 	out dx, eax
  7851 00006870 BAFC0C0000          <1> 	mov edx, 0xCFC
  7852 00006875 ED                  <1> 	in eax, dx
  7853 00006876 89C1                <1> 	mov ecx, eax
  7854 00006878 A0[96670000]        <1> 	mov al, [pciregister]
  7855 0000687D 0404                <1> 	add al, 4
  7856 0000687F 3C1A                <1> 	cmp al, 0x1A
  7857 00006881 7307                <1> 	jae dumppcidn
  7858 00006883 E8E5CCFFFF          <1> 	call showhex
  7859 00006888 EBD6                <1> 	jmp dumppcidevicelp
  7860                              <1> dumppcidn:
  7861 0000688A E8DECCFFFF          <1> 	call showhex
  7862 0000688F BE[9D720000]        <1> 	mov esi, line
  7863 00006894 E862C1FFFF          <1> 	call print
  7864 00006899 E93FFFFFFF          <1> 	jmp searchpciret
  7865                              <1> nextpcibus:
  7866 0000689E 30C0                <1> 	xor al, al
  7867 000068A0 A2[94670000]        <1> 	mov [pcidevice], al
  7868 000068A5 A0[93670000]        <1> 	mov al, [pcibus]
  7869 000068AA 3C7F                <1> 	cmp al, 1111111b
  7870 000068AC 730C                <1> 	jae donesearchpci
  7871 000068AE FEC0                <1> 	inc al
  7872 000068B0 A2[93670000]        <1> 	mov [pcibus], al
  7873 000068B5 E900FFFFFF          <1> 	jmp searchpci
  7874                              <1> donesearchpci:
  7875 000068BA 31D2                <1> 	xor edx, edx
  7876 000068BC C3                  <1> 	ret
  7877                              <1> foundpciaddr:
  7878 000068BD B010                <1> 	mov al, 0x10
  7879 000068BF A2[96670000]        <1> 	mov [pciregister], al
  7880                              <1> findpciioaddr:
  7881 000068C4 E83E000000          <1> 	call getpciaddr
  7882 000068C9 BAF80C0000          <1> 	mov edx, 0xCF8
  7883 000068CE EF                  <1> 	out dx, eax
  7884 000068CF BAFC0C0000          <1> 	mov edx, 0xCFC
  7885 000068D4 ED                  <1> 	in eax, dx
  7886 000068D5 89C3                <1> 	mov ebx, eax
  7887 000068D7 81E301000000        <1> 	and ebx, 1
  7888 000068DD 81FB00000000        <1> 	cmp ebx, 0
  7889 000068E3 0F8408000000        <1> 	je near notpciioaddr
  7890 000068E9 2D01000000          <1> 	sub eax, 1
  7891 000068EE 89C2                <1> 	mov edx, eax
  7892 000068F0 C3                  <1> 	ret
  7893                              <1> notpciioaddr:
  7894 000068F1 A0[96670000]        <1> 	mov al, [pciregister]
  7895 000068F6 0404                <1> 	add al, 4
  7896 000068F8 3C28                <1> 	cmp al, 0x28
  7897 000068FA 0F87DDFEFFFF        <1> 	ja near searchpciret
  7898 00006900 A2[96670000]        <1> 	mov [pciregister], al
  7899 00006905 EBBD                <1> 	jmp findpciioaddr
  7900                              <1> getpciaddr:		;;puts it in eax and ebx
  7901 00006907 31C0                <1> 			xor eax, eax
  7902 00006909 BB00000080          <1> 			mov ebx, 0x80000000
  7903 0000690E A0[93670000]        <1> 			mov al, [pcibus]
  7904 00006913 C1E010              <1> 			shl eax, 16
  7905 00006916 01C3                <1> 			add ebx, eax
  7906 00006918 31C0                <1> 			xor eax, eax
  7907 0000691A A0[94670000]        <1> 			mov al, [pcidevice]
  7908 0000691F C1E00B              <1> 			shl eax, 11
  7909 00006922 01C3                <1> 			add ebx, eax
  7910 00006924 31C0                <1> 			xor eax, eax
  7911 00006926 A0[95670000]        <1> 			mov al, [pcifunction]
  7912 0000692B C1E008              <1> 			shl eax, 8
  7913 0000692E 01C3                <1> 			add ebx, eax
  7914 00006930 31C0                <1> 			xor eax, eax
  7915 00006932 A0[96670000]        <1> 			mov al, [pciregister]
  7916 00006937 01C3                <1> 			add ebx, eax
  7917 00006939 89D8                <1> 			mov eax, ebx
  7918 0000693B C3                  <1> 			ret
  7919                                  	;%include 'source/process.asm'
  7920                                      %include 'source/disk.asm'
  7921                              <1> ;;disk.asm - new - using lba
  7922                              <1> loadfile:	;;loads a file with the name buffer's location in edi into location in esi
  7923 0000693C 803F00              <1> 	cmp byte [edi], 0
  7924 0000693F 0F8444000000        <1> 	je near nofileload
  7925 00006945 89FA                <1> 	mov edx, edi
  7926 00006947 BB[8B710000]        <1> 	mov ebx, diskfileindex
  7927                              <1> nextnamechar:
  7928 0000694C 8A07                <1> 	mov al, [edi]
  7929 0000694E 8A23                <1> 	mov ah, [ebx]
  7930 00006950 47                  <1> 	inc edi
  7931 00006951 43                  <1> 	inc ebx
  7932 00006952 88C1                <1> 	mov cl, al
  7933 00006954 08E1                <1> 	or cl, ah
  7934 00006956 80F900              <1> 	cmp cl, 0
  7935 00006959 744E                <1> 	je equalfilenames
  7936 0000695B 80F920              <1> 	cmp cl, ' '
  7937 0000695E 7449                <1> 	je equalfilenames
  7938 00006960 3C2A                <1> 	cmp al, '*'
  7939 00006962 742B                <1> 	je equalfilenames2
  7940 00006964 80FC00              <1> 	cmp ah, 0
  7941 00006967 7410                <1> 	je nextfilename
  7942 00006969 3C00                <1> 	cmp al, 0
  7943 0000696B 740C                <1> 	je nextfilename
  7944 0000696D 38E0                <1> 	cmp al, ah
  7945 0000696F 74DB                <1> 	je nextnamechar
  7946                              <1> getebxzero:
  7947 00006971 8A23                <1> 	mov ah, [ebx]
  7948 00006973 43                  <1> 	inc ebx
  7949 00006974 80FC00              <1> 	cmp ah, 0
  7950 00006977 75F8                <1> 	jne getebxzero
  7951                              <1> nextfilename:
  7952 00006979 81C308000000        <1> 	add ebx, 8		;;next descriptor
  7953 0000697F 89D7                <1> 	mov edi, edx
  7954 00006981 81FB[5F720000]      <1> 	cmp ebx, enddiskfileindex
  7955 00006987 72C3                <1> 	jb nextnamechar
  7956                              <1> nofileload:
  7957 00006989 BA94010000          <1> 	mov edx, 404	;;indicate not found error
  7958 0000698E C3                  <1> 	ret
  7959                              <1> equalfilenames2:
  7960 0000698F 81EB02000000        <1> 	sub ebx, 2
  7961                              <1> eqfilefind:
  7962 00006995 43                  <1> 	inc ebx
  7963 00006996 81FB[5F720000]      <1> 	cmp ebx, enddiskfileindex
  7964 0000699C 0F83E7FFFFFF        <1> 	jae near nofileload
  7965 000069A2 8A03                <1> 	mov al, [ebx]
  7966 000069A4 3C00                <1> 	cmp al, 0
  7967 000069A6 75ED                <1> 	jne eqfilefind
  7968 000069A8 43                  <1> 	inc ebx
  7969                              <1> equalfilenames:
  7970 000069A9 8B4304              <1> 	mov eax, [ebx + 4] 	;;put file size in eax
  7971 000069AC 8B1B                <1> 	mov ebx, [ebx]		;;put file beginning in ebx
  7972 000069AE 031D[82010000]      <1> 	add ebx, [lbaad]	;;add offset to solleros
  7973 000069B4 31C9                <1> 	xor ecx, ecx
  7974 000069B6 88C1                <1> 	mov cl, al			;;get excess number of sectors
  7975 000069B8 D0E1                <1> 	shl cl, 1
  7976 000069BA D0E9                <1> 	shr cl, 1			;;cut off at 128
  7977 000069BC 29C8                <1> 	sub eax, ecx		;;get rid of excess sectors
  7978 000069BE B500                <1> 	mov ch, 0			;;drive 0
  7979 000069C0 C1E807              <1> 	shr eax, 7			;;get number of 128 sector tracks
  7980                              <1> loaddiskfile:		;;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  7981 000069C3 A3[016A0000]        <1> 	mov [filetracks], eax
  7982 000069C8 89F7                <1> 	mov edi, esi		;;just in case cl is 0
  7983 000069CA 89DA                <1> 	mov edx, ebx
  7984 000069CC 80F900              <1> 	cmp cl, 0
  7985 000069CF 7405                <1> 	je copytracksforfile
  7986 000069D1 E837000000          <1> 	call diskr		;;take care of excess sectors
  7987                              <1> copytracksforfile:
  7988 000069D6 A1[016A0000]        <1> 	mov eax, [filetracks]
  7989 000069DB 3D00000000          <1> 	cmp eax, 0
  7990 000069E0 7419                <1> 	je donecopyfile
  7991 000069E2 48                  <1> 	dec eax
  7992 000069E3 A3[016A0000]        <1> 	mov [filetracks], eax
  7993 000069E8 89D3                <1> 	mov ebx, edx	;;get end lba
  7994 000069EA B180                <1> 	mov cl, 0x80
  7995 000069EC 8A2D[81010000]      <1> 	mov ch, [DriveNumber]
  7996 000069F2 89FE                <1> 	mov esi, edi	;;reset buffer
  7997 000069F4 E814000000          <1> 	call diskr
  7998 000069F9 EBDB                <1> 	jmp copytracksforfile
  7999                              <1> donecopyfile:
  8000 000069FB BA00000000          <1> 	mov edx, 0	;;no error
  8001 00006A00 C3                  <1> 	ret
  8002                              <1> 	
  8003 00006A01 00000000            <1> filetracks dd 0
  8004 00006A05 00                  <1> lbad1 db 0
  8005 00006A06 00                  <1> lbad2 db 0
  8006 00006A07 00                  <1> lbad3 db 0
  8007 00006A08 00                  <1> lbad4 db 0
  8008 00006A09 00                  <1> lbad5 db 0
  8009 00006A0A 00                  <1> lbad6 db 0
  8010 00006A0B 6400                <1> segments dw 100
  8011                              <1> 
  8012                              <1> diskr:		;;sector count in cl, disk number in ch, 48 bit address with last 32 bits in ebx, buffer in esi, puts end buffer in edi and end lba in edx
  8013                              <1> 
  8014 00006A0D 8935[226B0000]      <1> 	mov [bufferstartesi], esi
  8015 00006A13 891D[1E6B0000]      <1> 	mov [lbaadstartebx], ebx
  8016 00006A19 31D2                <1> 	xor edx, edx
  8017 00006A1B 88CA                <1> 	mov dl, cl
  8018 00006A1D 01DA                <1> 	add edx, ebx
  8019 00006A1F 8915[1A6B0000]      <1> 	mov [lbaadend], edx
  8020 00006A25 881D[056A0000]      <1> 	mov [lbad1], bl
  8021 00006A2B 883D[066A0000]      <1> 	mov [lbad2], bh
  8022 00006A31 C1C310              <1> 	rol ebx, 16
  8023 00006A34 881D[076A0000]      <1> 	mov [lbad3], bl
  8024 00006A3A 883D[086A0000]      <1> 	mov [lbad4], bh
  8025 00006A40 C1CB10              <1> 	ror ebx, 16
  8026                              <1> 
  8027 00006A43 B840000000          <1> 	mov eax, 0x40
  8028 00006A48 66BAF601            <1> 	mov dx, 0x1F6
  8029 00006A4C EE                  <1> 	out dx, al	;;send magic bits-add drive indicator later
  8030                              <1> 	
  8031 00006A4D 30C0                <1> 	xor al, al
  8032 00006A4F 66BAF201            <1> 	mov dx, 0x1F2
  8033 00006A53 EE                  <1> 	out dx, al	;;16 bit sector count-last byte now 0
  8034                              <1> 	
  8035 00006A54 A0[086A0000]        <1> 	mov al, [lbad4]
  8036 00006A59 6642                <1> 	inc dx
  8037 00006A5B EE                  <1> 	out dx, al
  8038                              <1> 	
  8039 00006A5C A0[096A0000]        <1> 	mov al, [lbad5]
  8040 00006A61 6642                <1> 	inc dx
  8041 00006A63 EE                  <1> 	out dx, al
  8042                              <1> 	
  8043 00006A64 A0[0A6A0000]        <1> 	mov al, [lbad6]
  8044 00006A69 6642                <1> 	inc dx
  8045 00006A6B EE                  <1> 	out dx, al
  8046                              <1> 	
  8047 00006A6C 88C8                <1> 	mov al, cl
  8048 00006A6E 66BAF201            <1> 	mov dx, 0x1F2
  8049 00006A72 EE                  <1> 	out dx, al	;;low byte of 16 bit sector count
  8050                              <1> 	
  8051 00006A73 A0[056A0000]        <1> 	mov al, [lbad1]
  8052 00006A78 6642                <1> 	inc dx
  8053 00006A7A EE                  <1> 	out dx, al
  8054                              <1> 	
  8055 00006A7B A0[066A0000]        <1> 	mov al, [lbad2]
  8056 00006A80 6642                <1> 	inc dx
  8057 00006A82 EE                  <1> 	out dx, al
  8058                              <1> 	
  8059 00006A83 A0[076A0000]        <1> 	mov al, [lbad3]
  8060 00006A88 6642                <1> 	inc dx
  8061 00006A8A EE                  <1> 	out dx, al
  8062                              <1> 	
  8063 00006A8B B024                <1> 	mov al, 0x24
  8064 00006A8D 66BAF701            <1> 	mov dx, 0x1F7
  8065 00006A91 EE                  <1> 	out dx, al	;;READ!!!
  8066 00006A92 66BBFFFF            <1> 	mov bx, 0xFFFF		;;try 65536 times before forcing
  8067                              <1> diskrwait:
  8068 00006A96 66BAF701            <1> 	mov dx, 0x1F7
  8069 00006A9A EC                  <1> 	in al, dx
  8070 00006A9B 2408                <1> 	and al, 0x08
  8071 00006A9D 664B                <1> 	dec bx
  8072 00006A9F 6681FB0000          <1> 	cmp bx, 0
  8073 00006AA4 7404                <1> 	je nomorediskwait
  8074 00006AA6 3C08                <1> 	cmp al, 0x08
  8075 00006AA8 75EC                <1> 	jne diskrwait
  8076                              <1> nomorediskwait:
  8077 00006AAA 66BB0001            <1> 	mov bx, 256
  8078                              <1> diskdataread:
  8079 00006AAE 66BAF001            <1> 	mov dx, 0x1F0
  8080 00006AB2 66ED                <1> 	in ax, dx
  8081 00006AB4 668906              <1> 	mov [esi], ax
  8082 00006AB7 81C602000000        <1> 	add esi, 2
  8083 00006ABD 664B                <1> 	dec bx
  8084 00006ABF 6681FB0000          <1> 	cmp bx, 0
  8085 00006AC4 75E8                <1> 	jne diskdataread		;;read a sector
  8086 00006AC6 FEC9                <1> 	dec cl
  8087 00006AC8 80F900              <1> 	cmp cl, 0
  8088 00006ACB 75C9                <1> 	jne diskrwait
  8089 00006ACD 89F7                <1> 	mov edi, esi
  8090 00006ACF 8B15[1A6B0000]      <1> 	mov edx, [lbaadend]
  8091 00006AD5 8B35[226B0000]      <1> 	mov esi, [bufferstartesi]
  8092 00006ADB 8B1D[1E6B0000]      <1> 	mov ebx, [lbaadstartebx]
  8093 00006AE1 C3                  <1> 	ret
  8094                              <1> 	
  8095                              <1> 	
  8096                              <1> diskold: ;;28 bits
  8097 00006AE2 6631C0              <1> 	xor ax, ax
  8098 00006AE5 66BAF101            <1> 	mov dx, 0x1F1
  8099 00006AE9 EE                  <1> 	out dx, al	;;send null byte to port
  8100 00006AEA 6642                <1> 	inc dx	;;0x1F2
  8101 00006AEC 88C8                <1> 	mov al, cl	;;get sector count
  8102 00006AEE EE                  <1> 	out dx, al	;;send sector count
  8103 00006AEF 6642                <1> 	inc dx	;;0x1F3
  8104 00006AF1 88D8                <1> 	mov al, bl	;;get first 8 bits of address
  8105 00006AF3 EE                  <1> 	out dx, al	;;send them
  8106 00006AF4 6642                <1> 	inc dx	;;0x1F4
  8107 00006AF6 C1CB08              <1> 	ror ebx, 8	;;get next 8 bits
  8108 00006AF9 88D8                <1> 	mov al, bl
  8109 00006AFB EE                  <1> 	out dx, al
  8110 00006AFC 6642                <1> 	inc dx	;;0x1F5
  8111 00006AFE C1CB08              <1> 	ror ebx, 8	;;again
  8112 00006B01 88D8                <1> 	mov al, bl
  8113 00006B03 EE                  <1> 	out dx, al
  8114 00006B04 6642                <1> 	inc dx	;;0x1F6
  8115 00006B06 C1CB08              <1> 	ror ebx, 8
  8116 00006B09 88D8                <1> 	mov al, bl
  8117 00006B0B 240F                <1> 	and al, 00001111b	;;last 4 bits of address
  8118 00006B0D 0CE0                <1> 	or al, 0xE0			;;majic number
  8119 00006B0F C0E504              <1> 	shl ch, 4
  8120 00006B12 08E8                <1> 	or al, ch
  8121 00006B14 EE                  <1> 	out dx, al			;;send drive indicator, magic bits, and highest 4 bits of address
  8122 00006B15 6642                <1> 	inc dx	;;0x1F7
  8123 00006B17 B020                <1> 	mov al, 0x20
  8124 00006B19 EE                  <1> 	out dx, al			;;execute read command
  8125                              <1> 	
  8126 00006B1A 00000000            <1> lbaadend dd 0
  8127 00006B1E 00000000            <1> lbaadstartebx dd 0
  8128 00006B22 00000000            <1> bufferstartesi dd 0
  8129                                  	%include 'source/threads.asm'
  8130                              <1> ;;THIS IS MY FIRST ATTEMPT AT IMPLEMENTING THREADS
  8131                              <1> threadstarttest:
  8132 00006B26 E9DF040000          <1>     jmp startthreads
  8133                              <1> mainthread:
  8134 00006B2B F4                  <1> 	hlt		;;this does not work properly
  8135 00006B2C EBFD                <1> 	jmp mainthread
  8136                              <1> 	
  8137                              <1> nwcmdst:
  8138 00006B2E B0FD                <1> 	mov al, 11111101b
  8139 00006B30 E621                <1> 	out 0x21, al
  8140 00006B32 C605[6C6B0000]00    <1> 	mov byte [threadson], 0
  8141 00006B39 E914C5FFFF          <1> 	jmp nwcmd
  8142                              <1> 	
  8143                              <1> modelthread:
  8144 00006B3E 668B1D[89710000]    <1> 	mov bx, [currentthread]
  8145 00006B45 B001                <1> 	mov al, 1
  8146 00006B47 B409                <1> 	mov ah, 9
  8147 00006B49 31C9                <1> 	xor ecx, ecx
  8148 00006B4B 6689D9              <1> 	mov cx, bx
  8149 00006B4E CD30                <1> 	int 0x30
  8150                              <1> 	
  8151 00006B50 B90000DEC0          <1> 	mov ecx, 0xC0DE0000
  8152 00006B55 6689D9              <1> 	mov cx, bx
  8153 00006B58 CD30                <1> 	int 0x30
  8154                              <1> 	
  8155 00006B5A B90000ADDE          <1> 	mov ecx, 0xDEAD0000
  8156 00006B5F 6689D9              <1> 	mov cx, bx
  8157 00006B62 CD30                <1> 	int 0x30
  8158                              <1> 	
  8159 00006B64 CD40                <1> 	int 0x40	;;skip this thread three times to ensure that all threads run
  8160 00006B66 CD40                <1> 	int 0x40
  8161 00006B68 CD40                <1> 	int 0x40
  8162                              <1> 	
  8163 00006B6A EBC2                <1> 	jmp nwcmdst
  8164                              <1> 	
  8165                              <1> 	
  8166 00006B6C 00                  <1> threadson db 0
  8167 00006B6D 04000000            <1> lastthread dd 4
  8168                              <1> 
  8169                              <1> thrdtst:
  8170 00006B71 [3E6B0000]<rept>    <1> times 256 dd modelthread	;;could go up to 2048, but that takes too long
  8171                              <1> thrdtstend:
  8172                              <1> 
  8173 00006F71 00000000            <1> 	espold dd 0
  8174                              <1> 
  8175                              <1> threadfork:
  8176 00006F75 C605[6C6B0000]01    <1> 	mov byte [threadson], 1
  8177 00006F7C 60                  <1> 	pushad
  8178 00006F7D 66B80040            <1> 	mov ax, 0x4000	;;this is the divider for the PIT
  8179 00006F81 E640                <1> 	out 0x40, al
  8180 00006F83 66C1C008            <1> 	rol ax, 8
  8181 00006F87 E640                <1> 	out 0x40, al
  8182                              <1> 	
  8183 00006F89 8CC8                <1> 	mov eax, cs
  8184 00006F8B 89C2                <1> 	mov edx, eax
  8185 00006F8D 8B4C2428            <1> 	mov ecx, [esp + 40]
  8186 00006F91 81C900020000        <1> 	or ecx, 0x200
  8187 00006F97 89E3                <1> 	mov ebx, esp
  8188 00006F99 BC[67960000]        <1> 	mov esp, stackdummy
  8189 00006F9E 90                  <1> 	nop
  8190                              <1> 	
  8191 00006F9F 60                  <1> 	pushad
  8192 00006FA0 B8[2B6B0000]        <1> 	mov eax, mainthread
  8193 00006FA5 89442420            <1> 	mov [esp + 32], eax
  8194 00006FA9 89542424            <1> 	mov [esp + 36], edx
  8195 00006FAD 894C2428            <1> 	mov [esp + 40], ecx
  8196 00006FB1 8925[5F720000]      <1> 	mov [threadlist], esp
  8197                              <1> 	
  8198 00006FB7 891D[716F0000]      <1> 	mov [espold], ebx
  8199 00006FBD 89F0                <1> 	mov eax, esi
  8200 00006FBF BC[679A0000]        <1> 	mov esp, stack1
  8201 00006FC4 8B1D[6D6B0000]      <1> 	mov ebx, [lastthread]
  8202 00006FCA C1E30A              <1> 	shl ebx, 10
  8203 00006FCD 01DC                <1> 	add esp, ebx
  8204 00006FCF C1EB0A              <1> 	shr ebx, 10
  8205 00006FD2 90                  <1> 	nop
  8206 00006FD3 60                  <1> 	pushad
  8207 00006FD4 89442420            <1> 	mov [esp + 32], eax
  8208 00006FD8 89542424            <1> 	mov [esp + 36], edx
  8209 00006FDC 894C2428            <1> 	mov [esp + 40], ecx
  8210 00006FE0 89A3[5F720000]      <1> 	mov [threadlist + ebx], esp
  8211 00006FE6 8B25[716F0000]      <1> 	mov esp, [espold]
  8212 00006FEC 81C304000000        <1> 	add ebx, 4
  8213 00006FF2 89A3[5F720000]      <1> 	mov [threadlist + ebx], esp
  8214 00006FF8 81C304000000        <1> 	add ebx, 4
  8215 00006FFE 891D[6D6B0000]      <1> 	mov [lastthread], ebx
  8216 00007004 B020                <1> 	mov al, 0x20
  8217 00007006 E620                <1> 	out 0x20, al
  8218 00007008 61                  <1> 	popad
  8219 00007009 C3                  <1> 	ret
  8220                              <1> 
  8221                              <1> startthreads:
  8222 0000700A C605[6C6B0000]01    <1> 	mov byte [threadson], 1
  8223 00007011 60                  <1> 	pushad
  8224 00007012 66B800A0            <1> 	mov ax, 0xA000	;;this is the divider for the PIT
  8225 00007016 E640                <1> 	out 0x40, al
  8226 00007018 66C1C008            <1> 	rol ax, 8
  8227 0000701C E640                <1> 	out 0x40, al
  8228                              <1> 	
  8229 0000701E 8CC8                <1> 	mov eax, cs
  8230 00007020 89C2                <1> 	mov edx, eax
  8231 00007022 8B4C2428            <1> 	mov ecx, [esp + 40]
  8232 00007026 81C900020000        <1> 	or ecx, 0x200
  8233 0000702C 89E3                <1> 	mov ebx, esp
  8234 0000702E BC[67960000]        <1> 	mov esp, stackdummy
  8235 00007033 90                  <1> 	nop
  8236                              <1> 	
  8237 00007034 60                  <1> 	pushad
  8238 00007035 B8[2B6B0000]        <1> 	mov eax, mainthread
  8239 0000703A 89442420            <1> 	mov [esp + 32], eax
  8240 0000703E 89542424            <1> 	mov [esp + 36], edx
  8241 00007042 894C2428            <1> 	mov [esp + 40], ecx
  8242 00007046 8925[5F720000]      <1> 	mov [threadlist], esp
  8243                              <1> 
  8244                              <1> 			;;that above setup the dummy thread which for some reason does not run
  8245                              <1> 			;;this below will setup the threads found in thrdtst
  8246                              <1> 
  8247                              <1> testthreads:
  8248 0000704C BE[716B0000]        <1> 	mov esi, thrdtst
  8249 00007051 BC[679A0000]        <1> 	mov esp, stack1
  8250 00007056 BF[5F720000]        <1> 	mov edi, threadlist
  8251 0000705B 81C704000000        <1> 	add edi, 4
  8252                              <1> nxtthreadld:
  8253 00007061 60                  <1> 	pushad
  8254 00007062 8B06                <1> 	mov eax, [esi]
  8255 00007064 89442420            <1> 	mov [esp + 32], eax
  8256 00007068 89542424            <1> 	mov [esp + 36], edx
  8257 0000706C 894C2428            <1> 	mov [esp + 40], ecx
  8258 00007070 8927                <1> 	mov [edi], esp
  8259 00007072 81C400040000        <1> 	add esp, 1024
  8260 00007078 81C604000000        <1> 	add esi, 4
  8261 0000707E 81C704000000        <1> 	add edi, 4
  8262 00007084 81FF[67920000]      <1> 	cmp edi, threadlistend
  8263 0000708A 0F8322000000        <1> 	jae near nomorethreadspace
  8264 00007090 81FC[67A22000]      <1> 	cmp esp, bssend
  8265 00007096 0F8350000000        <1> 	jae near nomorestackspace
  8266 0000709C 81FE[716F0000]      <1> 	cmp esi, thrdtstend
  8267 000070A2 72BD                <1> 	jb nxtthreadld
  8268 000070A4 89DC                <1> 	mov esp, ebx	
  8269                              <1> 	;mov al, 0xFE
  8270                              <1> 	;out 0x21, al
  8271 000070A6 30C0                <1> 	xor al, al
  8272 000070A8 E621                <1> 	out 0x21, al
  8273 000070AA B020                <1> 	mov al, 0x20
  8274 000070AC E620                <1> 	out 0x20, al
  8275 000070AE 61                  <1> 	popad
  8276 000070AF FB                  <1> 	sti
  8277 000070B0 EBFE                <1> 	jmp $	;;wait for the irq to hook
  8278                              <1> 	
  8279                              <1> nomorethreadspace:
  8280 000070B2 BE[C8700000]        <1> 	mov esi, nmts
  8281 000070B7 E83FB9FFFF          <1> 	call print
  8282 000070BC C605[6C6B0000]00    <1> 	mov byte [threadson], 0
  8283 000070C3 E98ABFFFFF          <1> 	jmp nwcmd
  8284 000070C8 74656820636F6C6F6E- <1> nmts	db "teh colonel no can haz moar treds",13,10,0
  8285 000070D1 656C206E6F2063616E- <1>
  8286 000070DA 2068617A206D6F6172- <1>
  8287 000070E3 2074726564730D0A00  <1>
  8288                              <1> 
  8289                              <1> nomorestackspace:
  8290 000070EC BE[02710000]        <1> 	mov esi, nmss
  8291 000070F1 E805B9FFFF          <1> 	call print
  8292 000070F6 C605[6C6B0000]00    <1> 	mov byte [threadson], 0
  8293 000070FD E950BFFFFF          <1> 	jmp nwcmd
  8294 00007102 74656820636F6C6F6E- <1> nmss	db "teh colonel no can haz moar staqz",13,10,0
  8295 0000710B 656C206E6F2063616E- <1>
  8296 00007114 2068617A206D6F6172- <1>
  8297 0000711D 20737461717A0D0A00  <1>
  8298                              <1> 	
  8299                              <1> threadswitch:
  8300 00007126 FA                  <1> 	cli
  8301 00007127 60                  <1> 	pushad
  8302 00007128 BF[5F720000]        <1> 	mov edi, threadlist
  8303 0000712D 31C0                <1> 	xor eax, eax
  8304 0000712F 66A1[89710000]      <1> 	mov ax, [currentthread]
  8305 00007135 6640                <1> 	inc ax
  8306 00007137 66A3[89710000]      <1> 	mov [currentthread], ax
  8307 0000713D 6648                <1> 	dec ax
  8308 0000713F C1E002              <1> 	shl eax, 2
  8309 00007142 01C7                <1> 	add edi, eax
  8310 00007144 8927                <1> 	mov [edi], esp
  8311 00007146 81C704000000        <1> 	add edi, 4
  8312 0000714C 81FF[67920000]      <1> 	cmp edi, threadlistend
  8313 00007152 0F830D000000        <1> 	jae near nookespthread
  8314 00007158 8B07                <1> 	mov eax, [edi]
  8315 0000715A 3D00000000          <1> 	cmp eax, 0
  8316 0000715F 0F851B000000        <1> 	jne near okespthread
  8317                              <1> nookespthread:
  8318 00007165 BF[5F720000]        <1> 	mov edi, threadlist
  8319 0000716A 6631C0              <1> 	xor ax, ax
  8320 0000716D 66A3[89710000]      <1> 	mov [currentthread], ax
  8321 00007173 8B07                <1> 	mov eax, [edi]
  8322 00007175 3D00000000          <1> 	cmp eax, 0
  8323 0000717A 0F84AEF9FFFF        <1> 	je near nwcmdst
  8324                              <1> okespthread:
  8325 00007180 89C4                <1> 	mov esp, eax
  8326 00007182 B020                <1> 	mov al, 0x20
  8327 00007184 E620                <1> 	out 0x20, al
  8328 00007186 61                  <1> 	popad
  8329 00007187 FB                  <1> 	sti
  8330 00007188 CF                  <1> 	iretd
  8331                              <1> 	
  8332 00007189 0000                <1> currentthread dw 0
  8333                                      %include 'fileindex.asm'
  8334                              <1> diskfileindex:
  8335 0000718B 323038342E736800    <1> db "2084.sh",0
  8336 00007193 43000000            <1> dd (f0-$$)/512
  8337 00007197 01000000            <1> dd (f1-f0)/512
  8338 0000719B 646F7300            <1> db "dos",0
  8339 0000719F 44000000            <1> dd (f1-$$)/512
  8340 000071A3 01000000            <1> dd (f2-f1)/512
  8341 000071A7 65787000            <1> db "exp",0
  8342 000071AB 45000000            <1> dd (f2-$$)/512
  8343 000071AF 01000000            <1> dd (f3-f2)/512
  8344 000071B3 666F726B00          <1> db "fork",0
  8345 000071B8 46000000            <1> dd (f3-$$)/512
  8346 000071BC 01000000            <1> dd (f4-f3)/512
  8347 000071C0 66707500            <1> db "fpu",0
  8348 000071C4 47000000            <1> dd (f4-$$)/512
  8349 000071C8 01000000            <1> dd (f5-f4)/512
  8350 000071CC 6C696E757800        <1> db "linux",0
  8351 000071D2 48000000            <1> dd (f5-$$)/512
  8352 000071D6 01000000            <1> dd (f6-f5)/512
  8353 000071DA 736F6C6C65726F732E- <1> db "solleros.bmp",0
  8354 000071E3 626D7000            <1>
  8355 000071E7 49000000            <1> dd (f6-$$)/512
  8356 000071EB B0020000            <1> dd (f7-f6)/512
  8357 000071EF 736F6C6C65726F732E- <1> db "solleros.txt",0
  8358 000071F8 74787400            <1>
  8359 000071FC F9020000            <1> dd (f7-$$)/512
  8360 00007200 01000000            <1> dd (f8-f7)/512
  8361 00007204 736F756E6400        <1> db "sound",0
  8362 0000720A FA020000            <1> dd (f8-$$)/512
  8363 0000720E 01000000            <1> dd (f9-f8)/512
  8364 00007212 74656C7900          <1> db "tely",0
  8365 00007217 FB020000            <1> dd (f9-$$)/512
  8366 0000721B 01000000            <1> dd (f10-f9)/512
  8367 0000721F 74696D6500          <1> db "time",0
  8368 00007224 FC020000            <1> dd (f10-$$)/512
  8369 00007228 02000000            <1> dd (f11-f10)/512
  8370 0000722C 7475746F7269616C2E- <1> db "tutorial.bat",0
  8371 00007235 62617400            <1>
  8372 00007239 FE020000            <1> dd (f11-$$)/512
  8373 0000723D 03000000            <1> dd (f12-f11)/512
  8374 00007241 756E667300          <1> db "unfs",0
  8375 00007246 01030000            <1> dd (f12-$$)/512
  8376 0000724A B9020000            <1> dd (f13-f12)/512
  8377 0000724E 756E66737465737400  <1> db "unfstest",0
  8378 00007257 BA050000            <1> dd (f13-$$)/512
  8379 0000725B B9020000            <1> dd (f14-f13)/512
  8380                              <1> enddiskfileindex:
  8381                              <1> 
  8382                                  	%include 'source/msg.asm'
  8383 0000725F 6578697400          <1> 	exitmsg db	"exit",0
  8384 00007264 50726F6772616D2022- <1> 	notfound1 db "Program ",34,0
  8385 0000726D 00                  <1>
  8386 0000726E 22206E6F7420666F75- <1> 	notfound2 db  34," not found.",13,10,0
  8387 00007277 6E642E0D0A00        <1>
  8388 0000727D 757365726E616D653A- <1> 	userask db "username:",0
  8389 00007286 00                  <1>
  8390 00007287 70617373776F72643A- <1> 	pwdask	db	"password:",0
  8391 00007290 00                  <1>
  8392 00007291 40536F6C6C65724F53- <1> 	location	db	"@SollerOS]:",0
  8393 0000729A 5D3A00              <1>
  8394 0000729D 0D0A00              <1> 	line	db	13,10,0
  8395 000072A0 200900              <1> 	dirtab 	db " ",9,0
  8396                              <1> 	userlst:
  8397 000072A3 7573657200          <1> 			db "user",0
  8398 000072A8 70617373776F726400  <1> 			db "password",0
  8399 000072B1 726F6F7400          <1> 			db "root",0
  8400 000072B6 617765736F6D65706F- <1> 			db "awesomepower",0
  8401 000072BF 77657200            <1>
  8402 000072C3 6E00                <1> 			db "n",0	;;use for quick entry-a quick double n followed by a double enter will get you in
  8403 000072C5 00                  <1> 			db 0
  8404                              <1> 	userlstend:
  8405                              <1> 	
  8406 000072C5 <incbin>            <1> fonts:	incbin 'source/precompiled/fonts.pak'
  8407                              <1> fontend:
  8408                              <1> 
  8409                              <1> 
  8410                              <1> mcursor:
  8411 000082C6 01                  <1> 	db	00000001b
  8412 000082C7 81                  <1> 	db	10000001b
  8413 000082C8 C1                  <1> 	db	11000001b
  8414 000082C9 E1                  <1> 	db	11100001b
  8415 000082CA F1                  <1> 	db	11110001b
  8416 000082CB F9                  <1> 	db	11111001b
  8417 000082CC FD                  <1> 	db	11111101b
  8418 000082CD FF                  <1> 	db	11111111b
  8419 000082CE F9                  <1> 	db	11111001b
  8420 000082CF B9                  <1> 	db	10111001b
  8421 000082D0 39                  <1> 	db	00111001b
  8422 000082D1 1C                  <1> 	db	00011100b
  8423 000082D2 1C                  <1> 	db	00011100b
  8424 000082D3 0E                  <1> 	db	00001110b
  8425 000082D4 0E                  <1> 	db	00001110b
  8426 000082D5 0C                  <1> 	db	00001100b
  8427                              <1> 
  8428                              <1> ;cursorbmp:
  8429                              <1> ;	db	1,0,0,0,0,0,0,0
  8430                              <1> ;	db	1,1,0,0,0,0,0,0
  8431                              <1> ;	db	1,1,1,0,0,0,0,0
  8432                              <1> ;	db	1,1,1,1,0,0,0,0
  8433                              <1> ;	db	1,1,1,1,1,0,0,0
  8434                              <1> ;	db	1,1,1,1,1,1,0,0
  8435                              <1> ;	db	1,1,1,1,1,1,1,0
  8436                              <1> ;	db	1,1,1,1,1,1,1,1
  8437                              <1> ;	db	1,1,1,1,1,1,0,0
  8438                              <1> ;	db	1,1,0,1,1,1,0,0
  8439                              <1> ;	db	1,0,0,1,1,1,0,0
  8440                              <1> ;	db	0,0,0,0,1,1,1,0
  8441                              <1> ;	db	0,0,0,0,1,1,1,0
  8442                              <1> ;	db	0,0,0,0,0,1,1,1
  8443                              <1> ;	db	0,0,0,0,0,1,1,1
  8444                              <1> ;	db	0,0,0,0,0,1,1,0
  8445                              <1> ;cursorbmpend:
  8446                              <1> 
  8447                              <1> 
  8448                              <1> VBEMODEBLOCK:
  8449 000082D6 00<rept>            <1> vbesignature 		times 4 db 0	;VBE Signature
  8450 000082DA 00<rept>            <1> vbeversion  		times 2 db 0	;VBE Version
  8451 000082DC 00<rept>            <1> oemstringptr  		times 4 db 0	;Pointer to OEM String
  8452 000082E0 00<rept>            <1> capabilities 		times 4 db 0	;Capabilities of graphics cont.
  8453 000082E4 00<rept>            <1> videomodeptr 		times 4 db 0	;Pointer to Video Mode List
  8454 000082E8 00<rept>            <1> totalmemory   		times 2 db 0	;number of 64Kb memory blocks
  8455 000082EA 00<rept>            <1> oemsoftwarerev  	times 2 db 0	;VBE implementation Software revision
  8456 000082EC 00<rept>            <1> oemvendornameptr 	times 4 db 0	;Pointer to Vendor Name String
  8457 000082F0 00<rept>            <1> oemproductnameptr 	times 4 db 0	;Pointer to Product Name String
  8458 000082F4 00<rept>            <1> oemproductrevptr 	times 4 db 0	;Pointer to Product Revision String
  8459 000082F8 00<rept>            <1> reserved			times 222 db 0	;Reserved for VBE implementation scratch area
  8460 000083D6 00<rept>            <1> oemdata 			times 256 db 0	;Data Area for OEM Strings
  8461                              <1> 
  8462                              <1> 
  8463                              <1> VBEMODEINFOBLOCK:
  8464                              <1> ;Mandatory information for all VBE revision
  8465 000084D6 00<rept>            <1> modeattributes   	times 2 db 0	;Mode attributes
  8466 000084D8 00                  <1> winaattributes   	times 1 db 0	;Window A attributes
  8467 000084D9 00                  <1> winbattributes   	times 1 db 0	;Window B attributes
  8468 000084DA 00<rept>            <1> wingranularity   	times 2 db 0	;Window granularity
  8469 000084DC 00<rept>            <1> winsize          	times 2 db 0	;Window size
  8470 000084DE 00<rept>            <1> winasegment      	times 2 db 0	;Window A start segment
  8471 000084E0 00<rept>            <1> winbsegment      	times 2 db 0	;Window B start segment
  8472 000084E2 00<rept>            <1> winfuncptr       	times 4 db 0	;pointer to window function
  8473 000084E6 00<rept>            <1> bytesperscanline 	times 2 db 0	;Bytes per scan line
  8474                              <1> 
  8475                              <1> ;Mandatory information for VBE 1.2 and above
  8476 000084E8 00<rept>            <1> xresolution     	times 2 db 0	;Horizontal resolution in pixel or chars
  8477 000084EA 00<rept>            <1> yresolution	    	times 2 db 0	;Vertical resolution in pixel or chars
  8478 000084EC 00                  <1> xcharsize       	times 1 db 0	;Character cell width in pixel
  8479 000084ED 00                  <1> ycharsize       	times 1 db 0	;Character cell height in pixel
  8480 000084EE 00                  <1> numberofplanes  	times 1 db 0	;Number of memory planes
  8481 000084EF 00                  <1> bitsperpixel    	times 1 db 0	;Bits per pixel
  8482 000084F0 00                  <1> numberofbanks   	times 1 db 0	;Number of banks
  8483 000084F1 00                  <1> memorymodel     	times 1 db 0	;Memory model type
  8484 000084F2 00                  <1> banksize        	times 1 db 0	;Bank size in KB
  8485 000084F3 00                  <1> numberofimagepages	times 1 db 0	;Number of images
  8486 000084F4 00                  <1> reserved1       	times 1 db 0	;Reserved for page function
  8487                              <1> 
  8488                              <1> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  8489 000084F5 00                  <1> redmasksize			times 1 db 0	;Size of direct color red mask in bits
  8490 000084F6 00                  <1> redfieldposition	times 1 db 0	;Bit position of lsb of red bask
  8491 000084F7 00                  <1> greenmasksize   	times 1 db 0	;Size of direct color green mask in bits
  8492 000084F8 00                  <1> greenfieldposition	times 1 db 0	;Bit position of lsb of green bask
  8493 000084F9 00                  <1> bluemasksize		times 1 db 0	;Size of direct color blue mask in bits
  8494 000084FA 00                  <1> bluefieldposition	times 1 db 0	;Bit position of lsb of blue bask
  8495 000084FB 00                  <1> rsvdmasksize        times 1	db 0	;Size of direct color reserved mask in bits
  8496 000084FC 00                  <1> rsvdfieldposition	times 1	db 0	;Bit position of lsb of reserved bask
  8497 000084FD 00                  <1> directcolormodeinfo	times 1 db 0	;Direct color mode attributes
  8498                              <1> 
  8499                              <1> ;Mandatory information for VBE 2.0 and above
  8500 000084FE 00<rept>            <1> physbaseptr 		times 4 db 0	;Physical address for flat frame buffer
  8501 00008502 00<rept>            <1> offscreenmemoffset 	times 4 db 0	;Pointer to start of off screen memory
  8502 00008506 00<rept>            <1> offscreenmemsize 	times 2 db 0    ;Amount of off screen memory in 1Kb units
  8503 00008508 00<rept>            <1> reserved2 			times 206 db 0  ;Remainder of ModeInfoBlock
  8504                                  	;%include 'source/memory.asm'
  8505                                  	%include 'source/buf.asm'
  8506 000085D6 4255465354415254    <1> db "BUFSTART"
  8507                              <1> [section .bss]
  8508                              <1> bssstart:
  8509                              <1> stack:
  8510 00000000 <res 00001000>      <1> 	resb 4096
  8511                              <1> stackend:
  8512                              <1> graphicstable: ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
  8513 00001000 <res 00000200>      <1> 	resb 200h 
  8514                              <1> 	graphicstableend:
  8515                              <1> mousecolorbuf: ;where the gui under the mouse is stored
  8516 00001200 <res 00000100>      <1> 	resb 256
  8517                              <1> mcolorend:
  8518 00001300 <res 00000200>      <1> fileindex: resb 200h
  8519                              <1> fileindexend:
  8520 00001500 <res 00000001>      <1> IFON resb 1 
  8521 00001501 <res 00000064>      <1> IFTRUE resb 100 
  8522 00001565 <res 00000004>      <1> BATCHPOS resb 4 
  8523 00001569 <res 00000001>      <1> BATCHISON resb 1 
  8524 0000156A <res 00000001>      <1> LOOPON resb 1 
  8525 0000156B <res 00000004>      <1> LOOPPOS	resb 4 
  8526 0000156F <res 00000500>      <1> variables: 	resb 500h 
  8527 00001A6F <res 00000001>      <1> varend: resb 1
  8528 00001A70 <res 00000100>      <1> buftxt2: resb 100h
  8529 00001B70 <res 0000000A>      <1> resb 10
  8530 00001B7A <res 00000200>      <1> buftxt: resb 200h 
  8531                              <1> buftxtend:
  8532 00001D7A <res 00000014>      <1> buf2:	resb 20 
  8533 00001D8E <res 00000001>      <1> numbuf: resb 1 
  8534 00001D8F <res 00005000>      <1> videobuf 		resb (160*64*2)	;1280x1024pixels in characters
  8535 00006D8F <res 000000C8>      <1> videobufend		resb 200
  8536 00006E57 <res 00000004>      <1> lastcommandpos: resb 4
  8537 00006E5B <res 00000004>      <1> currentcommandpos: resb 4
  8538                              <1> commandbuf:
  8539 00006E5F <res 00000400>      <1> resb 1024
  8540                              <1> commandbufend:
  8541                              <1> rbuffstart: ;for use with networking
  8542                              <1> ;resb 8212
  8543                              <1> threadlist:	;;this buffer will hold the stack locations of all of the threads, up to 2048
  8544 0000725F <res 00002008>      <1> 	resb 2050*4
  8545                              <1> threadlistend:
  8546                              <1> stacks:		;;the stacks will go on forever until end of memory
  8547 00009267 <res 00000400>      <1> 	resb 1024
  8548                              <1> stackdummy:
  8549 00009667 <res 00000400>      <1> 	resb 1024
  8550                              <1> stack1:
  8551 00009A67 <res 00200800>      <1> 	resb 1024*2050	;;woah, thats a lot of space for stacks
  8552                              <1> bssend:		;;from here on, it is not kernel space so apps can be loaded here.
  8553                              <1> [section .text]
  8554                                      %include 'files.asm'
  8555 000085DE 00<rept>            <1> align 512,db 0
  8556                              <1> f0:
  8557 000085DE <incbin>            <1> incbin "included/2084.sh"
  8558 000087C5 00<rept>            <1> align 512,db 0
  8559                              <1> f1:
  8560 000087C5 <incbin>            <1> incbin "included/dos"
  8561 00008945 00<rept>            <1> align 512,db 0
  8562                              <1> f2:
  8563 00008945 <incbin>            <1> incbin "included/exp"
  8564 00008B27 00<rept>            <1> align 512,db 0
  8565                              <1> f3:
  8566 00008B27 <incbin>            <1> incbin "included/fork"
  8567 00008C67 00<rept>            <1> align 512,db 0
  8568                              <1> f4:
  8569 00008C67 <incbin>            <1> incbin "included/fpu"
  8570 00008E9F 00<rept>            <1> align 512,db 0
  8571                              <1> f5:
  8572 00008E9F <incbin>            <1> incbin "included/linux"
  8573 00009004 00<rept>            <1> align 512,db 0
  8574                              <1> f6:
  8575 00009004 <incbin>            <1> incbin "included/solleros.bmp"
  8576 0005F1E6 00<rept>            <1> align 512,db 0
  8577                              <1> f7:
  8578 0005F1E6 <incbin>            <1> incbin "included/solleros.txt"
  8579 0005F376 00<rept>            <1> align 512,db 0
  8580                              <1> f8:
  8581 0005F376 <incbin>            <1> incbin "included/sound"
  8582 0005F4F4 00<rept>            <1> align 512,db 0
  8583                              <1> f9:
  8584 0005F4F4 <incbin>            <1> incbin "included/tely"
  8585 0005F779 00<rept>            <1> align 512,db 0
  8586                              <1> f10:
  8587 0005F779 <incbin>            <1> incbin "included/time"
  8588 0005FA7B 00<rept>            <1> align 512,db 0
  8589                              <1> f11:
  8590 0005FA7B <incbin>            <1> incbin "included/tutorial.bat"
  8591 000600AA 00<rept>            <1> align 512,db 0
  8592                              <1> f12:
  8593 000600AA <incbin>            <1> incbin "included/unfs"
  8594                              <1> align 512,db 0
  8595                              <1> f13:
  8596 000600AA <incbin>            <1> incbin "included/unfstest"
  8597                              <1> align 512,db 0
  8598                              <1> f14:
