     1                                  [map symbols kernel.map]
     2                                  [BITS 16]
     3                                      %include 'source/boot.asm'
     4                              <1>     ; MENU.ASM
     5                              <1> %include 'source/signature.asm'
     6                              <2> signature:
     7 00000000 536F6C6C65724F53    <2> db "SollerOS" ;Operating system name
     8 00000008 20416C706861204275- <2> db " Alpha Build ",0	;Soller OS development level
     9 00000011 696C642000          <2>
    10 00000016 D0000000            <2> dd 208	;version number
    11                              <2> signatureend:
    12                              <1> menustart:	
    13 0000001A 8CC8                <1> 	mov ax, cs
    14 0000001C 8ED8                <1> 	mov ds, ax
    15 0000001E 8EC0                <1> 	mov es, ax
    16 00000020 8ED0                <1> 	mov ss, ax
    17 00000022 880E[9A01]          <1> 	mov [DriveNumber], cl
    18 00000026 668916[9B01]        <1> 	mov [lbaad], edx
    19 0000002B E84801              <1> 	call guiload2	;make users switch using a command-this leads to very fast boots
    20 0000002E 6631DB              <1> 	xor ebx, ebx
    21 00000031 6631C9              <1> 	xor ecx, ecx
    22 00000034 6631D2              <1> 	xor edx, edx
    23 00000037 6631F6              <1> 	xor esi, esi
    24 0000003A 6631FF              <1> 	xor edi, edi
    25 0000003D E98004              <1> 	jmp pmode
    26                              <1> guiswitch:
    27 00000040 81F90000            <1> 	cmp cx, 0
    28 00000044 750B                <1> 	jne guiswitchdefnum
    29 00000046 B81200              <1> 	mov ax, 12h
    30 00000049 31DB                <1> 	xor bx, bx
    31 0000004B CD10                <1> 	int 10h
    32 0000004D E85100              <1> 	call guiloadagain
    33                              <1> guiswitchnocando:
    34 00000050 C3                  <1> 	ret	;return without switching as mode number is bad
    35                              <1> guiswitchdefnum:	;switch to a defined mode number
    36 00000051 B8004F              <1> 	mov ax, 0x4F00
    37 00000054 BF[1B8A]            <1> 	mov di, VBEMODEBLOCK
    38 00000057 CD10                <1> 	int 10h
    39 00000059 BE[3D8A]            <1> 	mov si, reserved
    40 0000005C 81EE0200            <1> 	sub si, 2
    41                              <1> .loop:
    42 00000060 81C60200            <1> 	add si, 2
    43 00000064 81FE[1B8B]          <1> 	cmp si, oemdata
    44 00000068 74E6                <1> 	je guiswitchnocando
    45 0000006A 813CFFFF            <1> 	cmp word [si], 0xFFFF
    46 0000006E 74E0                <1> 	je guiswitchnocando
    47 00000070 390C                <1> 	cmp [si], cx
    48 00000072 75EC                <1> 	jne .loop
    49 00000074 8936[A101]          <1> 	mov [videomodecache], si
    50 00000078 81C90040            <1> 	or cx, 0x4000	;make sure linear frame buffer is selected
    51 0000007C B8014F              <1> 	mov ax, 0x4F01
    52 0000007F BF[1B8C]            <1> 	mov di, VBEMODEINFOBLOCK
    53 00000082 890E[9F01]          <1> 	mov [vesamode], cx
    54 00000086 CD10                <1> 	int 10h
    55 00000088 E9CB00              <1> 	jmp selectedvesa
    56                              <1> guiload:
    57 0000008B BE[A804]            <1> 	mov si, bootmsg
    58 0000008E E81201              <1> 	call printrm
    59 00000091 31C0                <1> 	xor ax, ax
    60 00000093 CD16                <1> 	int 16h
    61 00000095 3C79                <1> 	cmp al, "y"
    62 00000097 0F85DB00            <1> 	jne near guiload2
    63 0000009B BE[E579]            <1> 	mov si, crlf
    64 0000009E E80201              <1> 	call printrm
    65                              <1> guiloadagain:
    66 000000A1 B8004F              <1> 	mov ax, 04F00h
    67 000000A4 BF[1B8A]            <1> 	mov di, VBEMODEBLOCK
    68 000000A7 CD10                <1> 	int 10h
    69 000000A9 BE[3D8A]            <1> 	mov si, reserved
    70 000000AC 81EE0200            <1> 	sub si, 2
    71                              <1> findvideomodes:
    72 000000B0 81C60200            <1> 	add si, 2
    73 000000B4 8B0C                <1> 	mov cx, [si]
    74 000000B6 81F9FFFF            <1> 	cmp cx, 0xFFFF
    75 000000BA 0F840A00            <1> 	je near nextvmode
    76 000000BE 81FE[1B8B]          <1> 	cmp si, oemdata
    77 000000C2 0F83B000            <1> 	jae near guiload2	;;kill if no valid list is found
    78 000000C6 EBE8                <1> 	jmp findvideomodes 	
    79                              <1> ;;debug,shows vmodes available
    80                              <1> nextvmode:
    81 000000C8 81EE0200            <1> 	sub si, 2
    82 000000CC 81FE[3D8A]          <1> 	cmp si, reserved
    83 000000D0 0F82CDFF            <1> 	jb near guiloadagain
    84 000000D4 8B0C                <1> 	mov cx, [si]
    85 000000D6 81F9FFFF            <1> 	cmp cx, 0xFFFF
    86 000000DA 0F84EAFF            <1> 	je near nextvmode
    87 000000DE 81C90040            <1> 	or cx, 0x4000 		;;Linear Frame Buffer
    88 000000E2 B8014F              <1> 	mov ax, 04F01h
    89 000000E5 BF[1B8C]            <1> 	mov di, VBEMODEINFOBLOCK
    90 000000E8 890E[9F01]          <1> 	mov [vesamode], cx
    91 000000EC CD10                <1> 	int 10h
    92 000000EE A0[348C]            <1> 	mov al, [bitsperpixel]
    93 000000F1 3C10                <1> 	cmp al, 16
    94 000000F3 75D3                <1> 	jne nextvmode
    95 000000F5 8936[A101]          <1> 	mov [videomodecache], si
    96 000000F9 84E4                <1> 	test ah, ah
    97 000000FB 0F842200            <1> 	jz near setvesamode
    98 000000FF EBC7                <1> 	jmp nextvmode
    99 00000101 0A0D49732074686973- <1> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
   100 0000010A 20766964656F206D6F- <1>
   101 00000113 6465204F4B3F28792F- <1>
   102 0000011C 6E290D0A00          <1>
   103                              <1> setvesamode:
   104 00000121 8B0E[2D8C]          <1> 	mov cx, [resolutionx]
   105 00000125 E89300              <1> 	call decshow
   106 00000128 B078                <1> 	mov al, "x"
   107 0000012A E8FB00              <1> 	call char
   108 0000012D 8B0E[2F8C]          <1> 	mov cx, [resolutiony]
   109 00000131 E88700              <1> 	call decshow
   110 00000134 B040                <1> 	mov al, "@"
   111 00000136 E8EF00              <1> 	call char
   112 00000139 31C9                <1> 	xor cx, cx
   113 0000013B 8A0E[348C]          <1> 	mov cl, [bitsperpixel]
   114 0000013F E87900              <1> 	call decshow
   115 00000142 BE[0101]            <1> 	mov si, isthisvideook
   116 00000145 E85B00              <1> 	call printrm
   117 00000148 31C0                <1> 	xor ax, ax
   118 0000014A CD16                <1> 	int 16h
   119 0000014C 8B36[A101]          <1> 	mov si, [videomodecache]
   120 00000150 3C79                <1> 	cmp al, "y"
   121 00000152 0F8572FF            <1> 	jne near nextvmode
   122                              <1> selectedvesa:
   123 00000156 8B16[2D8C]          <1> 	mov dx, [resolutionx]
   124 0000015A 01D2                <1> 	add dx, dx
   125 0000015C 8916[1B8D]          <1> 	mov [resolutionx2], dx
   126 00000160 31D2                <1> 	xor dx, dx
   127 00000162 31C9                <1> 	xor cx, cx
   128 00000164 B8024F              <1> 	mov ax, 04F02h
   129 00000167 8B1E[9F01]          <1> 	mov bx, [vesamode]
   130 0000016B CD10                <1> 	int 10h		;;enter VESA mode
   131 0000016D C606[1D8D]01        <1> 	mov byte [guion], 1
   132 00000172 E8BB00              <1> 	call getmemorysize;get the memory map after the video is initialized
   133 00000175 C3                  <1> 	ret
   134                              <1> guiload2:
   135 00000176 B9E001              <1> 	mov cx, 480
   136 00000179 BA8002              <1> 	mov dx, 640
   137 0000017C 8916[2D8C]          <1> 	mov [resolutionx], dx
   138 00000180 01D2                <1> 	add dx, dx
   139 00000182 8916[1B8D]          <1> 	mov [resolutionx2], dx
   140 00000186 890E[2F8C]          <1> 	mov [resolutiony], cx
   141 0000018A B81200              <1> 	mov ax, 12h
   142 0000018D 31DB                <1> 	xor bx, bx
   143 0000018F CD10                <1> 	int 10h
   144 00000191 C606[1D8D]00        <1> 	mov byte [guion], 0
   145 00000196 E89700              <1> 	call getmemorysize;get the memory map after the video is initialized
   146 00000199 C3                  <1> 	ret
   147                              <1> 
   148 0000019A 00                  <1> DriveNumber db 0
   149 0000019B 00000000            <1> lbaad dd 0
   150                              <1> 	
   151 0000019F 0000                <1> vesamode dw 0
   152 000001A1 0000                <1> videomodecache dw 0
   153                              <1> 
   154                              <1>     printrm:			; 'si' comes in with string address
   155 000001A3 BB0700              <1> 	    mov bx,07		; write to display
   156 000001A6 B40E                <1> 	    mov ah,0Eh		; screen function
   157 000001A8 8A04                <1>     prs2:    mov al,[si]         ; get next character
   158 000001AA 3C00                <1> 	    cmp al,0		; look for terminator 
   159 000001AC 7405                <1>             je finpr2		; zero byte at end of string
   160 000001AE CD10                <1> 	    int 10h		; write character to screen.    
   161 000001B0 46                  <1>      	    inc si	     	; move to next character
   162 000001B1 EBF5                <1> 	    jmp prs2		; loop
   163 000001B3 C3                  <1>     finpr2: ret
   164                              <1> 
   165 000001B4 0000000000          <1> dcnm db 0,0,0,0,0
   166 000001B9 0000                <1> dcnmend db 0,0
   167                              <1> 
   168                              <1> 
   169                              <1> decshow:
   170 000001BB BE[B401]            <1> 	mov si, dcnm
   171                              <1> decclear:
   172 000001BE B030                <1> 	mov al, "0"
   173 000001C0 8804                <1> 	mov [si], al
   174 000001C2 46                  <1> 	inc si
   175 000001C3 81FE[B901]          <1> 	cmp si, dcnmend
   176 000001C7 76F5                <1> 	jbe decclear
   177 000001C9 4E                  <1> 	dec si
   178 000001CA E81500              <1> 	call convertrm
   179 000001CD BE[B401]            <1> 	mov si, dcnm
   180                              <1> dectst:
   181 000001D0 8A04                <1> 	mov al, [si]
   182 000001D2 46                  <1> 	inc si
   183 000001D3 81FE[B901]          <1> 	cmp si, dcnmend
   184 000001D7 7704                <1> 	ja dectstend
   185 000001D9 3C30                <1> 	cmp al, "0"
   186 000001DB 76F3                <1> 	jbe dectst
   187                              <1> dectstend:
   188 000001DD 4E                  <1> 	dec si
   189 000001DE E8C2FF              <1> 	call printrm
   190 000001E1 C3                  <1> 	ret
   191                              <1> 	
   192                              <1> 	
   193                              <1> convertrm:
   194 000001E2 4E                  <1> 	dec si
   195 000001E3 89F3                <1> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
   196                              <1> cnvrtrm:
   197 000001E5 89DE                <1> 	mov si, bx
   198 000001E7 81EE0300            <1> 	sub si, 3
   199 000001EB 46                  <1> ten3rm:	inc si
   200 000001EC 81F9E803            <1> 	cmp cx, 1000
   201 000001F0 7208                <1> 	jb ten2rm
   202 000001F2 81E9E803            <1> 	sub cx, 1000
   203 000001F6 FE04                <1> 	inc byte [si]
   204 000001F8 EBEB                <1> 	jmp cnvrtrm
   205 000001FA 46                  <1> ten2rm:	inc si
   206 000001FB 81F96400            <1> 	cmp cx, 100
   207 000001FF 7208                <1> 	jb ten1rm
   208 00000201 81E96400            <1> 	sub cx, 100
   209 00000205 FE04                <1> 	inc byte [si]
   210 00000207 EBDC                <1> 	jmp cnvrtrm
   211 00000209 46                  <1> ten1rm:	inc si
   212 0000020A 81F90A00            <1> 	cmp cx, 10
   213 0000020E 7208                <1> 	jb ten0rm
   214 00000210 81E90A00            <1> 	sub cx, 10
   215 00000214 FE04                <1> 	inc byte [si]
   216 00000216 EBCD                <1> 	jmp cnvrtrm
   217 00000218 46                  <1> ten0rm:	inc si
   218 00000219 81F90100            <1> 	cmp cx, 1
   219 0000021D 7208                <1> 	jb tendnrm
   220 0000021F 81E90100            <1> 	sub cx, 1
   221 00000223 FE04                <1> 	inc byte [si]
   222 00000225 EBBE                <1> 	jmp cnvrtrm
   223                              <1> tendnrm:
   224 00000227 C3                  <1> 	ret
   225                              <1> 
   226                              <1>     char: 		    ;char must be in al
   227 00000228 BB0700              <1>        mov bx, 07
   228 0000022B B40E                <1> 	   mov ah, 0Eh
   229 0000022D CD10                <1> 	   int 10h
   230 0000022F C3                  <1> 	   ret
   231                              <1> 
   232                              <1> 
   233                              <1> getmemorysize:
   234 00000230 BF[6602]            <1> 	mov di, memlistbuf
   235 00000233 6631DB              <1> 	xor ebx, ebx
   236                              <1> getmemsizeloop:
   237 00000236 66B820E80000        <1> 	mov eax, 0xE820
   238 0000023C 66BA50414D53        <1> 	mov edx, 0x0534D4150
   239 00000242 66B918000000        <1> 	mov ecx, 24
   240 00000248 CD15                <1> 	int 0x15
   241 0000024A 81C71800            <1> 	add di, 24
   242 0000024E 81FF[A604]          <1> 	cmp di, memlistend
   243 00000252 7309                <1> 	jae nomoregetmemsize
   244 00000254 6681FB00000000      <1> 	cmp ebx, 0
   245 0000025B 75D9                <1> 	jne getmemsizeloop
   246                              <1> nomoregetmemsize:
   247 0000025D 81EF[6602]          <1> 	sub di, memlistbuf
   248 00000261 893E[A604]          <1> 	mov [memlistend], di
   249 00000265 C3                  <1> 	ret
   250                              <1> 	
   251                              <1> 
   252                              <1> memlistbuf:
   253 00000266 00<rept>            <1> 	times 576 db 0
   254 000004A6 0000                <1> memlistend: dw 0
   255                              <1> 	
   256 000004A8 426F6F7420696E746F- <1> bootmsg:	db "Boot into the GUI?(y/n)",0
   257 000004B1 20746865204755493F- <1>
   258 000004BA 28792F6E2900        <1>
   259                                      %include 'source/pmode.asm'
   260                              <1> [BITS 16]
   261                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   262                              <1> ;	16-bit real mode
   263                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   264                              <1> 
   265                              <1> pmode:
   266 000004C0 BA9200              <1> 	mov dx, 0x92
   267 000004C3 EC                  <1> 	in al, dx	;;A20
   268 000004C4 0C02                <1> 	or al, 2
   269 000004C6 EE                  <1> 	out dx, al
   270 000004C7 6631DB              <1> 	xor ebx, ebx
   271 000004CA 8CCB                <1> 	mov bx,cs		; EBX=segment
   272 000004CC 66C1E304            <1> 	shl ebx,4		;	<< 4
   273 000004D0 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   274 000004D4 A3[DA07]            <1> 	mov [gdt2 + 2],ax
   275 000004D7 A3[E207]            <1> 	mov [gdt3 + 2],ax
   276 000004DA 66C1E810            <1> 	shr eax,16
   277 000004DE A2[DC07]            <1> 	mov [gdt2 + 4],al
   278 000004E1 A2[E407]            <1> 	mov [gdt3 + 4],al
   279 000004E4 8826[DF07]          <1> 	mov [gdt2 + 7],ah
   280 000004E8 8826[E707]          <1> 	mov [gdt3 + 7],ah
   281                              <1> 
   282 000004EC 66B8[938E0000]      <1> 	mov eax, initialstack
   283 000004F2 660306[6B06]        <1> 	add eax, [newcodecache]
   284 000004F7 A3[D207]            <1> 	mov [gdts + 2],ax
   285 000004FA 66C1E810            <1> 	shr eax, 16
   286 000004FE A2[D407]            <1> 	mov [gdts + 4],al
   287 00000501 8826[D707]          <1> 	mov [gdts + 7], ah
   288                              <1> 	
   289 00000505 66A1[6B06]          <1> 	mov eax, [newcodecache]
   290 00000509 A3[EA07]            <1> 	mov [gdt4 + 2],ax
   291 0000050C A3[F207]            <1> 	mov [gdt5 + 2],ax
   292 0000050F A3[FA07]            <1> 	mov [gdtv8086 + 2], ax
   293 00000512 A3[0208]            <1> 	mov [gdtv80862 + 2], ax
   294 00000515 66C1E810            <1> 	shr eax,16
   295 00000519 A2[EC07]            <1> 	mov [gdt4 + 4],al
   296 0000051C A2[F407]            <1> 	mov [gdt5 + 4],al
   297 0000051F A2[FC07]            <1> 	mov [gdtv8086 + 4],al
   298 00000522 A2[0408]            <1> 	mov [gdtv80862 + 4],al
   299 00000525 8826[EF07]          <1> 	mov [gdt4 + 7],ah
   300 00000529 8826[F707]          <1> 	mov [gdt5 + 7],ah
   301 0000052D 8826[FF07]          <1> 	mov [gdtv8086 + 7],ah
   302 00000531 8826[0708]          <1> 	mov [gdtv80862 + 7],ah
   303                              <1> 	
   304 00000535 66B800004000        <1> 	mov eax, dosprogloc
   305 0000053B 660306[6B06]        <1> 	add eax, [newcodecache]
   306 00000540 A3[0A08]            <1> 	mov [gdtdos + 2],ax
   307 00000543 A3[1208]            <1> 	mov [gdtdos2 + 2],ax
   308 00000546 66C1E810            <1> 	shr eax,16
   309 0000054A A2[0C08]            <1> 	mov [gdtdos + 4],al
   310 0000054D A2[1408]            <1> 	mov [gdtdos2 + 4],al
   311 00000550 8826[0F08]          <1> 	mov [gdtdos + 7],ah
   312 00000554 8826[1708]          <1> 	mov [gdtdos2 + 7],ah
   313                              <1> 	
   314                              <1> ; fix up gdt and idt
   315 00000558 67668D83[C0070000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   316 00000560 66A3[B607]          <1> 	mov [gdtr + 2],eax
   317 00000564 67668D83[18080000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   318 0000056C 66A3[BC07]          <1> 	mov [idtr + 2],eax
   319 00000570 FA                  <1> 	cli
   320 00000571 0F0116[B407]        <1> 	lgdt [gdtr]
   321 00000576 0F011E[BA07]        <1> 	lidt [idtr]
   322 0000057B 6631DB              <1> 	xor ebx, ebx
   323 0000057E 8CDB                <1> 	mov bx, ds
   324 00000580 66891E[6706]        <1> 	mov [basecache], ebx
   325 00000585 0F20C0              <1> 	mov eax,cr0
   326 00000588 0C01                <1> 	or al,1
   327 0000058A 0F22C0              <1> 	mov cr0,eax
   328 0000058D EA[9205]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   329                              <1> [BITS 32]
   330                              <1> do_pm:
   331 00000592 31C0                <1> 	xor eax, eax
   332 00000594 66B82000            <1> 	mov ax, SYS_DATA_SEL
   333 00000598 8ED8                <1> 	mov ds, ax
   334 0000059A 8EC0                <1> 	mov es, ax
   335 0000059C 8EE0                <1> 	mov fs, ax
   336 0000059E 66B83000            <1> 	mov ax, NEW_DATA_SEL
   337 000005A2 8EE8                <1> 	mov gs, ax
   338                              <1> 	
   339                              <1> copykernel:
   340 000005A4 648B06              <1> 	mov eax, [fs:esi]
   341 000005A7 658906              <1> 	mov [gs:esi], eax
   342 000005AA 81C604000000        <1> 	add esi, 4
   343 000005B0 81FE[938E0000]      <1> 	cmp esi, bssstart
   344 000005B6 72EC                <1> 	jb copykernel
   345 000005B8 EA[BF050000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   346                              <1> 	
   347                              <1> done_copy:
   348 000005BF 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   349 000005C3 8ED8                <1> 	mov ds, ax
   350 000005C5 8EC0                <1> 	mov es, ax
   351 000005C7 8EE0                <1> 	mov fs, ax
   352                              <1> 	;mov ax, STACK_SEL
   353 000005C9 8ED0                <1> 	mov ss, ax
   354 000005CB BC[93AE0000]        <1> 	mov esp, stackend
   355 000005D0 66B82000            <1> 	mov ax, SYS_DATA_SEL
   356 000005D4 8EE8                <1> 	mov gs, ax
   357                              <1> 	
   358 000005D6 E889510000          <1> 	call initialize	;initialize drivers
   359                              <1> 	
   360 000005DB A1[6B060000]        <1> 	mov eax, [newcodecache]
   361 000005E0 C1E804              <1> 	shr eax, 4
   362 000005E3 A3[67060000]        <1> 	mov [basecache], eax
   363                              <1> 	
   364 000005E8 89C3                <1> 	mov ebx, eax
   365 000005EA C1E304              <1> 	shl ebx, 4
   366 000005ED 8B3D[438C0000]      <1> 	mov edi, [physbaseptr]
   367 000005F3 29DF                <1> 	sub edi, ebx
   368 000005F5 893D[438C0000]      <1> 	mov [physbaseptr], edi
   369                              <1> 	
   370 000005FB BE[938E0000]        <1> 	mov esi, bssstart
   371 00000600 31C0                <1> 	xor eax, eax
   372                              <1> clearkernelbuffers:
   373 00000602 8906                <1> 	mov [esi], eax
   374 00000604 81C604000000        <1> 	add esi, 4
   375 0000060A 81FE[CAC81100]      <1> 	cmp esi, bssend
   376 00000610 72F0                <1> 	jb clearkernelbuffers
   377 00000612 FB                  <1> 	sti
   378                              <1> 
   379                              <1> getmemoryspace:
   380 00000613 BE[66020000]        <1> 	mov esi, memlistbuf
   381 00000618 31FF                <1> 	xor edi, edi
   382 0000061A 668B3D[A6040000]    <1> 	mov di, [memlistend]
   383 00000621 01F7                <1> 	add edi, esi
   384 00000623 31C0                <1> 	xor eax, eax
   385                              <1> memoryspaceaddition:
   386 00000625 39FE                <1> 	cmp esi, edi
   387 00000627 7322                <1> 	jae finishedmemspacecalc
   388 00000629 81C608000000        <1> 	add esi, 8
   389 0000062F 8B0E                <1> 	mov ecx, [esi]
   390 00000631 81C608000000        <1> 	add esi, 8
   391 00000637 8B1E                <1> 	mov ebx, [esi]
   392 00000639 81C608000000        <1> 	add esi, 8
   393 0000063F 81FB01000000        <1> 	cmp ebx, 1
   394 00000645 75DE                <1> 	jne memoryspaceaddition
   395 00000647 01C8                <1> 	add eax, ecx
   396 00000649 EBDA                <1> 	jmp memoryspaceaddition
   397                              <1> finishedmemspacecalc:
   398 0000064B A3[74060000]        <1> 	mov [memoryspace], eax
   399 00000650 803D[1D8D0000]00    <1> 	cmp byte [guion], 0
   400 00000657 0F8505000000        <1> 	jne near guistartup
   401 0000065D E972260000          <1> 	jmp os
   402                              <1> guistartup:	;this prevents weird issues
   403 00000662 E9BF510000          <1> 	jmp gui
   404                              <1> 	
   405 00000667 00000000            <1> basecache dd 0
   406 0000066B 00001000            <1> newcodecache dd 0x100000
   407                              <1> 
   408 0000066F 00                  <1> testingcpuspeed db 0
   409 00000670 00000000            <1> cpuspeedperint dd 0
   410 00000674 00000000            <1> memoryspace dd 0
   411 00000678 7D0A                <1> pitdiv dw 2685
   412 0000067A 00000000            <1> timeseconds dd 0
   413 0000067E 00000000            <1> timenanoseconds dd 0
   414 00000682 2E562200            <1> timeinterval dd 2250286;4500572
   415 00000686 00                  <1> soundon db 0
   416 00000687 0000                <1> soundrepititions dw 0
   417 00000689 00000000            <1> soundpos dd 0
   418 0000068D 00000000            <1> soundendpos dd 0
   419 00000691 0000                <1> WAVSamplingRate dw 0
   420 00000693 00000000            <1> WAVFileSize         dd 0
   421 00000697 00                  <1> EnableDigitized     db 0
   422                              <1> 
   423                              <1> cpuspeedend:
   424 00000698 C605[6F060000]00    <1> 	mov byte [testingcpuspeed], 0
   425 0000069F A3[70060000]        <1> 	mov [cpuspeedperint], eax
   426 000006A4 B8[F1470000]        <1> 	mov eax, cpuspeedloopend
   427 000006A9 890424              <1> 	mov [esp], eax
   428 000006AC E9FC000000          <1> 	jmp handled
   429                              <1> 
   430                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   431                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   432                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   433                              <1> 
   434                              <1> pitinterrupt: ;this controls threading
   435 000006B1 FA                  <1> 	cli
   436 000006B2 803D[6F060000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   437 000006B9 74DD                <1> 	je cpuspeedend
   438                              <1> 	
   439 000006BB 803D[97060000]01    <1> 	cmp byte [EnableDigitized], 1
   440 000006C2 0F84FA450000        <1> 	je near PCSpeakerPWM
   441                              <1> 	
   442 000006C8 E8B9000000          <1> 	call timekeeper ;this updates the internal time
   443                              <1> 	
   444 000006CD 803D[86060000]01    <1> 	cmp byte [soundon], 1
   445 000006D4 0F8401460000        <1> 	je near PCSpeakerRAW
   446                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   447 000006DA 803D[A8730000]01    <1> 	cmp byte [threadson], 1
   448 000006E1 0F8454720000        <1> 	je near threadswitch
   449                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   450 000006E7 803D[A8730000]00    <1> 	cmp byte [threadson], 0
   451 000006EE 0F84B9000000        <1> 	je near handled
   452 000006F4 FA                  <1> 	cli
   453 000006F5 60                  <1> 	pusha
   454 000006F6 E460                <1> 	in al, 60h
   455 000006F8 3C01                <1> 	cmp al, 1		;escape
   456 000006FA 7405                <1> 	je userint
   457 000006FC E9AA000000          <1> 	jmp handled2
   458                              <1> userint:
   459                              <1> 	;UNMASK ALL INTS
   460 00000701 30C0                <1> 	xor al, al
   461 00000703 E621                <1> 	out 0x21, al
   462 00000705 30C0                <1> 	xor al, al
   463 00000707 E6A1                <1> 	out 0xA1, al
   464 00000709 B020                <1> 	mov al, 0x20
   465 0000070B E6A0                <1> 	out 0xA0, al
   466 0000070D E620                <1> 	out 0x20, al
   467                              <1> 	;RESET PIT DIVISOR
   468 0000070F 66A1[78060000]      <1> 	mov ax, [pitdiv]
   469 00000715 E640                <1> 	out 0x40, al
   470 00000717 66C1C008            <1> 	rol ax, 8
   471 0000071B E640                <1> 	out 0x40, al
   472                              <1> 	;RESET PIC
   473 0000071D B020                <1> 	mov al, 0x20
   474 0000071F E620                <1> 	out 0x20, al
   475 00000721 61                  <1> 	popa
   476 00000722 FB                  <1> 	sti
   477 00000723 BC[93AE0000]        <1> 	mov esp, stackend ;reset stack
   478 00000728 E948270000          <1> 	jmp nwcmd
   479                              <1> 
   480                              <1> rtl8139.irq:
   481 0000072D FA                  <1> 	cli
   482 0000072E 60                  <1> 	pusha
   483 0000072F 8B15[1F510000]      <1> 	mov edx, [basenicaddr]
   484 00000735 81C23E000000        <1> 	add edx, rtl8139.ISR
   485 0000073B 31C0                <1> 	xor eax, eax
   486 0000073D 66ED                <1> 	in ax, dx
   487 0000073F 89C1                <1> 	mov ecx, eax
   488 00000741 E8002C0000          <1> 	call showhex
   489 00000746 BE[55070000]        <1> 	mov esi, rtl8139.irq.msg
   490 0000074B E8131C0000          <1> 	call print
   491 00000750 E956000000          <1> 	jmp handled2
   492 00000755 0A5A4F4D4720544548- <1> .msg db 10,"ZOMG TEH RTL8139 REZPONDED",10,0
   493 0000075E 2052544C3831333920- <1>
   494 00000767 52455A504F4E444544- <1>
   495 00000770 0A00                <1>
   496                              <1> sblaster.irq:
   497 00000772 FA                  <1> 	cli
   498 00000773 60                  <1> 	pusha
   499 00000774 803D[4E4F0000]01    <1> 	cmp byte [SoundBlaster], 1
   500 0000077B 0F844E460000        <1> 	je near sblastercont
   501 00000781 E925000000          <1> 	jmp handled2
   502                              <1> 	
   503                              <1> timekeeper:
   504 00000786 50                  <1> 	push eax
   505 00000787 A1[7E060000]        <1> 	mov eax, [timenanoseconds]
   506 0000078C 0305[82060000]      <1> 	add eax, [timeinterval]
   507 00000792 3D00CA9A3B          <1> 	cmp eax, 1000000000
   508 00000797 720B                <1> 	jb nonanosecondrollover
   509 00000799 FF05[7A060000]      <1> 	inc dword [timeseconds]
   510 0000079F 2D00CA9A3B          <1> 	sub eax, 1000000000
   511                              <1> nonanosecondrollover:
   512 000007A4 A3[7E060000]        <1> 	mov [timenanoseconds], eax
   513 000007A9 58                  <1> 	pop eax
   514 000007AA C3                  <1> 	ret
   515                              <1> 	
   516                              <1> handled2:
   517 000007AB 61                  <1> 	popa
   518                              <1> handled3:
   519 000007AC FB                  <1> 	sti
   520                              <1> handled:
   521 000007AD 50                  <1> 	push eax
   522 000007AE B020                <1> 	mov al, 0x20
   523 000007B0 E620                <1> 	out 0x20, al
   524 000007B2 58                  <1> 	pop eax
   525 000007B3 CF                  <1> 	iret
   526                              <1> [BITS 16]
   527                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   528                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   529                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   530 000007B4 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   531 000007B6 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   532                              <1> 
   533 000007BA FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   534 000007BC 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   535                              <1> 
   536                              <1> 
   537 000007C0 0000                <1> gdt:	dw 0			; limit 15:0
   538 000007C2 0000                <1> 	dw 0			; base 15:0
   539 000007C4 00                  <1> 	db 0			; base 23:16
   540 000007C5 00                  <1> 	db 0			; type
   541 000007C6 00                  <1> 	db 0			; limit 19:16, flags
   542 000007C7 00                  <1> 	db 0			; base 31:24
   543                              <1> ; linear data segment descriptor
   544                              <1> LINEAR_SEL	equ	$-gdt
   545 000007C8 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   546 000007CA 0000                <1> 	dw 0			; base for this one is always 0
   547 000007CC 00                  <1> 	db 0
   548 000007CD 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   549 000007CE CF                  <1> 	db 0xCF			; page-granular, 32-bit
   550 000007CF 00                  <1> 	db 0
   551                              <1> STACK_SEL	equ $-gdt
   552 000007D0 0200                <1> gdts:	dw 2;(stackend)/4096
   553 000007D2 0000                <1> 	dw 0
   554 000007D4 00                  <1> 	db 0
   555 000007D5 92                  <1> 	db 0x92
   556 000007D6 CF                  <1> 	db 0xCF
   557 000007D7 00                  <1> 	db 0
   558                              <1> ; code segment descriptor
   559                              <1> SYS_CODE_SEL	equ	$-gdt
   560 000007D8 FFFF                <1> gdt2:	dw 0xFFFF
   561 000007DA 0000                <1> 	dw 0			; (base gets set above)
   562 000007DC 00                  <1> 	db 0
   563 000007DD 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   564 000007DE CF                  <1> 	db 0xCF
   565 000007DF 00                  <1> 	db 0
   566                              <1> ; data segment descriptor
   567                              <1> SYS_DATA_SEL	equ	$-gdt
   568 000007E0 FFFF                <1> gdt3:	dw 0xFFFF
   569 000007E2 0000                <1> 	dw 0			; (base gets set above)
   570 000007E4 00                  <1> 	db 0
   571 000007E5 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   572 000007E6 CF                  <1> 	db 0xCF
   573 000007E7 00                  <1> 	db 0
   574                              <1> NEW_CODE_SEL	equ	$-gdt
   575 000007E8 FFFF                <1> gdt4:	dw 0xFFFF
   576 000007EA 0000                <1> 	dw 0			; (base gets set above)
   577 000007EC 00                  <1> 	db 0
   578 000007ED 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   579 000007EE CF                  <1> 	db 0xCF
   580 000007EF 00                  <1> 	db 0
   581                              <1> ; data segment descriptor
   582                              <1> NEW_DATA_SEL	equ	$-gdt
   583 000007F0 FFFF                <1> gdt5:	dw 0xFFFF
   584 000007F2 0000                <1> 	dw 0			; (base gets set above)
   585 000007F4 00                  <1> 	db 0
   586 000007F5 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   587 000007F6 CF                  <1> 	db 0xCF
   588 000007F7 00                  <1> 	db 0
   589                              <1> V8086_CODE_SEL	equ $-gdt
   590 000007F8 FFFF                <1> gdtv8086: dw 0xFFFF
   591 000007FA 0000                <1> 	dw 0
   592 000007FC 00                  <1> 	db 0
   593 000007FD 9A                  <1> 	db 0x9A
   594 000007FE 8F                  <1> 	db 0x8F
   595 000007FF 00                  <1> 	db 0
   596                              <1> V8086_DATA_SEL	equ $-gdt
   597 00000800 FFFF                <1> gdtv80862: dw 0xFFFF
   598 00000802 0000                <1> 	dw 0
   599 00000804 00                  <1> 	db 0
   600 00000805 92                  <1> 	db 0x92
   601 00000806 8F                  <1> 	db 0x8F
   602 00000807 00                  <1> 	db 0
   603                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   604 00000808 0001                <1> gdtdos:	dw 256	;give it 1 MB
   605 0000080A 0000                <1> 	dw 0
   606 0000080C 00                  <1> 	db 0
   607 0000080D 9A                  <1> 	db 0x9A
   608 0000080E 8F                  <1> 	db 0x8F ;16 bit
   609 0000080F 00                  <1> 	db 0
   610                              <1> DOS_DATA_SEL 	equ $-gdt
   611 00000810 0001                <1> gdtdos2:	dw 256
   612 00000812 0000                <1> 	dw 0
   613 00000814 00                  <1> 	db 0
   614 00000815 92                  <1> 	db 0x92
   615 00000816 8F                  <1> 	db 0x8F ;16 bit
   616 00000817 00                  <1> 	db 0
   617                              <1> gdt_end:
   618                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   619                              <1> ;	interrupt descriptor table (IDT)
   620                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   621                              <1> ; 32 reserved interrupts:
   622                              <1> idt:	
   623                              <1> %assign i 0
   624                              <1> %rep    32
   625                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   626                              <1> %assign i i+1
   627                              <1> %endrep
   628 00000818 [3911]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   629                              <2> %assign i i+1
   630 00000820 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   631                              <2> %assign i i+1
   632 00000828 [5311]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   633                              <2> %assign i i+1
   634 00000830 [6011]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   635                              <2> %assign i i+1
   636 00000838 [6D11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   637                              <2> %assign i i+1
   638 00000840 [7A11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   639                              <2> %assign i i+1
   640 00000848 [8711]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   641                              <2> %assign i i+1
   642 00000850 [9411]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   643                              <2> %assign i i+1
   644 00000858 [A111]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   645                              <2> %assign i i+1
   646 00000860 [AE11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   647                              <2> %assign i i+1
   648 00000868 [BB11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   649                              <2> %assign i i+1
   650 00000870 [C811]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   651                              <2> %assign i i+1
   652 00000878 [D511]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   653                              <2> %assign i i+1
   654 00000880 [E211]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   655                              <2> %assign i i+1
   656 00000888 [EF11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   657                              <2> %assign i i+1
   658 00000890 [FC11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   659                              <2> %assign i i+1
   660 00000898 [0912]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   661                              <2> %assign i i+1
   662 000008A0 [1612]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   663                              <2> %assign i i+1
   664 000008A8 [2312]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   665                              <2> %assign i i+1
   666 000008B0 [3012]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   667                              <2> %assign i i+1
   668 000008B8 [3D12]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   669                              <2> %assign i i+1
   670 000008C0 [4A12]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i i+1
   672 000008C8 [5712]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i i+1
   674 000008D0 [6412]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i i+1
   676 000008D8 [7112]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i i+1
   678 000008E0 [7E12]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i i+1
   680 000008E8 [8B12]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i i+1
   682 000008F0 [9812]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i i+1
   684 000008F8 [A512]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i i+1
   686 00000900 [B212]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i i+1
   688 00000908 [BF12]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i i+1
   690 00000910 [CC12]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i i+1
   692 00000918 [AC2B]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   693 00000920 [B02B]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   694                              <1> %assign i 0x22
   695                              <1> %rep 14
   696                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   697                              <1> %assign i +1
   698                              <1> %endrep
   699 00000928 [F312]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   700                              <2> %assign i +1
   701 00000930 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   702                              <2> %assign i +1
   703 00000938 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   704                              <2> %assign i +1
   705 00000940 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   706                              <2> %assign i +1
   707 00000948 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   708                              <2> %assign i +1
   709 00000950 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   710                              <2> %assign i +1
   711 00000958 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   712                              <2> %assign i +1
   713 00000960 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   714                              <2> %assign i +1
   715 00000968 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i +1
   717 00000970 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i +1
   719 00000978 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i +1
   721 00000980 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i +1
   723 00000988 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i +1
   725 00000990 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i +1
   727                              <1> ;INT 30h for os use and 3rd party use:
   728 00000998 [4122]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   729                              <1> %assign i 0x31
   730                              <1> %rep 15
   731                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   732                              <1> %assign i +1
   733                              <1> %endrep
   734 000009A0 [B613]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   735                              <2> %assign i +1
   736 000009A8 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   737                              <2> %assign i +1
   738 000009B0 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   739                              <2> %assign i +1
   740 000009B8 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   741                              <2> %assign i +1
   742 000009C0 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   743                              <2> %assign i +1
   744 000009C8 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   745                              <2> %assign i +1
   746 000009D0 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   747                              <2> %assign i +1
   748 000009D8 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   749                              <2> %assign i +1
   750 000009E0 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   751                              <2> %assign i +1
   752 000009E8 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   753                              <2> %assign i +1
   754 000009F0 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   755                              <2> %assign i +1
   756 000009F8 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   757                              <2> %assign i +1
   758 00000A00 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   759                              <2> %assign i +1
   760 00000A08 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   761                              <2> %assign i +1
   762 00000A10 [4611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   763                              <2> %assign i +1
   764                              <1> ;and here we are at 0x40
   765                              <1> ;here are all the irq's
   766 00000A18 [B106]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   767 00000A20 [AD07]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   768 00000A28 [AD07]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   769 00000A30 [AD07]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   770 00000A38 [AD07]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   771 00000A40 [7207]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   772 00000A48 [AD07]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   773 00000A50 [AD07]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   774 00000A58 [AD07]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   775 00000A60 [AD07]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 9
   776 00000A68 [AD07]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   777 00000A70 [2D07]2800008E0000  <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   778 00000A78 [AD07]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   779 00000A80 [AD07]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   780 00000A88 [AD07]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   781 00000A90 [AD07]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   782                              <1> ;This brings me up to 0x50
   783                              <1> %assign i 0x50
   784                              <1> %rep 176
   785                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   786                              <1> 		;dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   787                              <1> %assign i +1
   788                              <1> %endrep
   789 00000A98 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   790                              <2> 
   791                              <2> %assign i +1
   792 00000AA0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   793                              <2> 
   794                              <2> %assign i +1
   795 00000AA8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   796                              <2> 
   797                              <2> %assign i +1
   798 00000AB0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   799                              <2> 
   800                              <2> %assign i +1
   801 00000AB8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   802                              <2> 
   803                              <2> %assign i +1
   804 00000AC0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   805                              <2> 
   806                              <2> %assign i +1
   807 00000AC8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   808                              <2> 
   809                              <2> %assign i +1
   810 00000AD0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   811                              <2> 
   812                              <2> %assign i +1
   813 00000AD8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   814                              <2> 
   815                              <2> %assign i +1
   816 00000AE0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   817                              <2> 
   818                              <2> %assign i +1
   819 00000AE8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   820                              <2> 
   821                              <2> %assign i +1
   822 00000AF0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   823                              <2> 
   824                              <2> %assign i +1
   825 00000AF8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   826                              <2> 
   827                              <2> %assign i +1
   828 00000B00 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   829                              <2> 
   830                              <2> %assign i +1
   831 00000B08 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   832                              <2> 
   833                              <2> %assign i +1
   834 00000B10 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   835                              <2> 
   836                              <2> %assign i +1
   837 00000B18 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   838                              <2> 
   839                              <2> %assign i +1
   840 00000B20 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   841                              <2> 
   842                              <2> %assign i +1
   843 00000B28 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   844                              <2> 
   845                              <2> %assign i +1
   846 00000B30 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   847                              <2> 
   848                              <2> %assign i +1
   849 00000B38 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   850                              <2> 
   851                              <2> %assign i +1
   852 00000B40 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   853                              <2> 
   854                              <2> %assign i +1
   855 00000B48 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   856                              <2> 
   857                              <2> %assign i +1
   858 00000B50 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   859                              <2> 
   860                              <2> %assign i +1
   861 00000B58 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   862                              <2> 
   863                              <2> %assign i +1
   864 00000B60 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   865                              <2> 
   866                              <2> %assign i +1
   867 00000B68 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   868                              <2> 
   869                              <2> %assign i +1
   870 00000B70 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   871                              <2> 
   872                              <2> %assign i +1
   873 00000B78 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   874                              <2> 
   875                              <2> %assign i +1
   876 00000B80 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   877                              <2> 
   878                              <2> %assign i +1
   879 00000B88 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   880                              <2> 
   881                              <2> %assign i +1
   882 00000B90 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   883                              <2> 
   884                              <2> %assign i +1
   885 00000B98 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   886                              <2> 
   887                              <2> %assign i +1
   888 00000BA0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   889                              <2> 
   890                              <2> %assign i +1
   891 00000BA8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   892                              <2> 
   893                              <2> %assign i +1
   894 00000BB0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   895                              <2> 
   896                              <2> %assign i +1
   897 00000BB8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   898                              <2> 
   899                              <2> %assign i +1
   900 00000BC0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   901                              <2> 
   902                              <2> %assign i +1
   903 00000BC8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   904                              <2> 
   905                              <2> %assign i +1
   906 00000BD0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   907                              <2> 
   908                              <2> %assign i +1
   909 00000BD8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   910                              <2> 
   911                              <2> %assign i +1
   912 00000BE0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   913                              <2> 
   914                              <2> %assign i +1
   915 00000BE8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   916                              <2> 
   917                              <2> %assign i +1
   918 00000BF0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   919                              <2> 
   920                              <2> %assign i +1
   921 00000BF8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   922                              <2> 
   923                              <2> %assign i +1
   924 00000C00 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   925                              <2> 
   926                              <2> %assign i +1
   927 00000C08 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   928                              <2> 
   929                              <2> %assign i +1
   930 00000C10 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   931                              <2> 
   932                              <2> %assign i +1
   933 00000C18 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   934                              <2> 
   935                              <2> %assign i +1
   936 00000C20 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   937                              <2> 
   938                              <2> %assign i +1
   939 00000C28 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   940                              <2> 
   941                              <2> %assign i +1
   942 00000C30 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   943                              <2> 
   944                              <2> %assign i +1
   945 00000C38 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   946                              <2> 
   947                              <2> %assign i +1
   948 00000C40 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   949                              <2> 
   950                              <2> %assign i +1
   951 00000C48 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   952                              <2> 
   953                              <2> %assign i +1
   954 00000C50 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   955                              <2> 
   956                              <2> %assign i +1
   957 00000C58 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   958                              <2> 
   959                              <2> %assign i +1
   960 00000C60 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   961                              <2> 
   962                              <2> %assign i +1
   963 00000C68 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   964                              <2> 
   965                              <2> %assign i +1
   966 00000C70 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   967                              <2> 
   968                              <2> %assign i +1
   969 00000C78 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   970                              <2> 
   971                              <2> %assign i +1
   972 00000C80 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   973                              <2> 
   974                              <2> %assign i +1
   975 00000C88 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   976                              <2> 
   977                              <2> %assign i +1
   978 00000C90 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   979                              <2> 
   980                              <2> %assign i +1
   981 00000C98 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   982                              <2> 
   983                              <2> %assign i +1
   984 00000CA0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   985                              <2> 
   986                              <2> %assign i +1
   987 00000CA8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   988                              <2> 
   989                              <2> %assign i +1
   990 00000CB0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   991                              <2> 
   992                              <2> %assign i +1
   993 00000CB8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   994                              <2> 
   995                              <2> %assign i +1
   996 00000CC0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   997                              <2> 
   998                              <2> %assign i +1
   999 00000CC8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1000                              <2> 
  1001                              <2> %assign i +1
  1002 00000CD0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1003                              <2> 
  1004                              <2> %assign i +1
  1005 00000CD8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1006                              <2> 
  1007                              <2> %assign i +1
  1008 00000CE0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1009                              <2> 
  1010                              <2> %assign i +1
  1011 00000CE8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1012                              <2> 
  1013                              <2> %assign i +1
  1014 00000CF0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1015                              <2> 
  1016                              <2> %assign i +1
  1017 00000CF8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1018                              <2> 
  1019                              <2> %assign i +1
  1020 00000D00 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1021                              <2> 
  1022                              <2> %assign i +1
  1023 00000D08 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1024                              <2> 
  1025                              <2> %assign i +1
  1026 00000D10 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1027                              <2> 
  1028                              <2> %assign i +1
  1029 00000D18 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1030                              <2> 
  1031                              <2> %assign i +1
  1032 00000D20 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1033                              <2> 
  1034                              <2> %assign i +1
  1035 00000D28 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1036                              <2> 
  1037                              <2> %assign i +1
  1038 00000D30 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1039                              <2> 
  1040                              <2> %assign i +1
  1041 00000D38 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1042                              <2> 
  1043                              <2> %assign i +1
  1044 00000D40 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1045                              <2> 
  1046                              <2> %assign i +1
  1047 00000D48 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1048                              <2> 
  1049                              <2> %assign i +1
  1050 00000D50 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1051                              <2> 
  1052                              <2> %assign i +1
  1053 00000D58 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1054                              <2> 
  1055                              <2> %assign i +1
  1056 00000D60 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1057                              <2> 
  1058                              <2> %assign i +1
  1059 00000D68 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1060                              <2> 
  1061                              <2> %assign i +1
  1062 00000D70 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1063                              <2> 
  1064                              <2> %assign i +1
  1065 00000D78 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1066                              <2> 
  1067                              <2> %assign i +1
  1068 00000D80 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1069                              <2> 
  1070                              <2> %assign i +1
  1071 00000D88 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1072                              <2> 
  1073                              <2> %assign i +1
  1074 00000D90 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1075                              <2> 
  1076                              <2> %assign i +1
  1077 00000D98 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1078                              <2> 
  1079                              <2> %assign i +1
  1080 00000DA0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1081                              <2> 
  1082                              <2> %assign i +1
  1083 00000DA8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1084                              <2> 
  1085                              <2> %assign i +1
  1086 00000DB0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1087                              <2> 
  1088                              <2> %assign i +1
  1089 00000DB8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1090                              <2> 
  1091                              <2> %assign i +1
  1092 00000DC0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1093                              <2> 
  1094                              <2> %assign i +1
  1095 00000DC8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1096                              <2> 
  1097                              <2> %assign i +1
  1098 00000DD0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1099                              <2> 
  1100                              <2> %assign i +1
  1101 00000DD8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1102                              <2> 
  1103                              <2> %assign i +1
  1104 00000DE0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1105                              <2> 
  1106                              <2> %assign i +1
  1107 00000DE8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1108                              <2> 
  1109                              <2> %assign i +1
  1110 00000DF0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1111                              <2> 
  1112                              <2> %assign i +1
  1113 00000DF8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1114                              <2> 
  1115                              <2> %assign i +1
  1116 00000E00 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1117                              <2> 
  1118                              <2> %assign i +1
  1119 00000E08 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1120                              <2> 
  1121                              <2> %assign i +1
  1122 00000E10 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1123                              <2> 
  1124                              <2> %assign i +1
  1125 00000E18 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1126                              <2> 
  1127                              <2> %assign i +1
  1128 00000E20 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1129                              <2> 
  1130                              <2> %assign i +1
  1131 00000E28 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1132                              <2> 
  1133                              <2> %assign i +1
  1134 00000E30 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1135                              <2> 
  1136                              <2> %assign i +1
  1137 00000E38 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1138                              <2> 
  1139                              <2> %assign i +1
  1140 00000E40 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1141                              <2> 
  1142                              <2> %assign i +1
  1143 00000E48 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1144                              <2> 
  1145                              <2> %assign i +1
  1146 00000E50 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1147                              <2> 
  1148                              <2> %assign i +1
  1149 00000E58 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1150                              <2> 
  1151                              <2> %assign i +1
  1152 00000E60 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1153                              <2> 
  1154                              <2> %assign i +1
  1155 00000E68 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1156                              <2> 
  1157                              <2> %assign i +1
  1158 00000E70 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1159                              <2> 
  1160                              <2> %assign i +1
  1161 00000E78 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1162                              <2> 
  1163                              <2> %assign i +1
  1164 00000E80 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1165                              <2> 
  1166                              <2> %assign i +1
  1167 00000E88 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1168                              <2> 
  1169                              <2> %assign i +1
  1170 00000E90 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1171                              <2> 
  1172                              <2> %assign i +1
  1173 00000E98 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1174                              <2> 
  1175                              <2> %assign i +1
  1176 00000EA0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1177                              <2> 
  1178                              <2> %assign i +1
  1179 00000EA8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1180                              <2> 
  1181                              <2> %assign i +1
  1182 00000EB0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1183                              <2> 
  1184                              <2> %assign i +1
  1185 00000EB8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1186                              <2> 
  1187                              <2> %assign i +1
  1188 00000EC0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1189                              <2> 
  1190                              <2> %assign i +1
  1191 00000EC8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1192                              <2> 
  1193                              <2> %assign i +1
  1194 00000ED0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1195                              <2> 
  1196                              <2> %assign i +1
  1197 00000ED8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1198                              <2> 
  1199                              <2> %assign i +1
  1200 00000EE0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1201                              <2> 
  1202                              <2> %assign i +1
  1203 00000EE8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1204                              <2> 
  1205                              <2> %assign i +1
  1206 00000EF0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1207                              <2> 
  1208                              <2> %assign i +1
  1209 00000EF8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1210                              <2> 
  1211                              <2> %assign i +1
  1212 00000F00 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1213                              <2> 
  1214                              <2> %assign i +1
  1215 00000F08 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1216                              <2> 
  1217                              <2> %assign i +1
  1218 00000F10 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1219                              <2> 
  1220                              <2> %assign i +1
  1221 00000F18 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1222                              <2> 
  1223                              <2> %assign i +1
  1224 00000F20 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1225                              <2> 
  1226                              <2> %assign i +1
  1227 00000F28 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1228                              <2> 
  1229                              <2> %assign i +1
  1230 00000F30 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1231                              <2> 
  1232                              <2> %assign i +1
  1233 00000F38 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1234                              <2> 
  1235                              <2> %assign i +1
  1236 00000F40 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1237                              <2> 
  1238                              <2> %assign i +1
  1239 00000F48 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1240                              <2> 
  1241                              <2> %assign i +1
  1242 00000F50 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1243                              <2> 
  1244                              <2> %assign i +1
  1245 00000F58 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1246                              <2> 
  1247                              <2> %assign i +1
  1248 00000F60 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1249                              <2> 
  1250                              <2> %assign i +1
  1251 00000F68 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1252                              <2> 
  1253                              <2> %assign i +1
  1254 00000F70 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1255                              <2> 
  1256                              <2> %assign i +1
  1257 00000F78 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1258                              <2> 
  1259                              <2> %assign i +1
  1260 00000F80 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1261                              <2> 
  1262                              <2> %assign i +1
  1263 00000F88 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1264                              <2> 
  1265                              <2> %assign i +1
  1266 00000F90 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1267                              <2> 
  1268                              <2> %assign i +1
  1269 00000F98 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1270                              <2> 
  1271                              <2> %assign i +1
  1272 00000FA0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1273                              <2> 
  1274                              <2> %assign i +1
  1275 00000FA8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1276                              <2> 
  1277                              <2> %assign i +1
  1278 00000FB0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1279                              <2> 
  1280                              <2> %assign i +1
  1281 00000FB8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1282                              <2> 
  1283                              <2> %assign i +1
  1284 00000FC0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1285                              <2> 
  1286                              <2> %assign i +1
  1287 00000FC8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1288                              <2> 
  1289                              <2> %assign i +1
  1290 00000FD0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1291                              <2> 
  1292                              <2> %assign i +1
  1293 00000FD8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1294                              <2> 
  1295                              <2> %assign i +1
  1296 00000FE0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1297                              <2> 
  1298                              <2> %assign i +1
  1299 00000FE8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1300                              <2> 
  1301                              <2> %assign i +1
  1302 00000FF0 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1303                              <2> 
  1304                              <2> %assign i +1
  1305 00000FF8 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1306                              <2> 
  1307                              <2> %assign i +1
  1308 00001000 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1309                              <2> 
  1310                              <2> %assign i +1
  1311 00001008 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1312                              <2> 
  1313                              <2> %assign i +1
  1314 00001010 [AD07]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1315                              <2> 
  1316                              <2> %assign i +1
  1317                              <1> idt_end:
  1318                              <1> [BITS 32]
  1319                                  	%include 'source/realmode.asm'
  1320                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1321                              <1> 			;and the return address is in realmodereturn
  1322 00001018 FA                  <1> 	cli
  1323 00001019 A3[2B110000]        <1> 	mov [realmodeeax], eax
  1324 0000101E 891D[27110000]      <1> 	mov [realmodeebx], ebx
  1325 00001024 8925[19110000]      <1> 	mov [pmodeesp], esp
  1326                              <1> 
  1327 0000102A BB[23110000]        <1> 	mov ebx, cr0old
  1328                              <1> rmcopytofirstmbyte:
  1329 0000102F 8B03                <1> 	mov eax, [ebx]
  1330 00001031 658903              <1> 	mov [gs:ebx], eax
  1331 00001034 81C304000000        <1> 	add ebx, 4
  1332 0000103A 81FB[33110000]      <1> 	cmp ebx, realmodeptr
  1333 00001040 76ED                <1> 	jbe rmcopytofirstmbyte
  1334                              <1> 
  1335 00001042 EA[49100000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1336                              <1> 
  1337                              <1> [BITS 16]
  1338                              <1> protected16bit:
  1339 00001049 B84000              <1> 	mov ax, V8086_DATA_SEL
  1340 0000104C 8ED8                <1> 	mov ds, ax
  1341 0000104E 8EC0                <1> 	mov es, ax
  1342 00001050 8EE0                <1> 	mov fs, ax
  1343 00001052 8EE8                <1> 	mov gs, ax
  1344 00001054 8ED0                <1> 	mov ss, ax
  1345 00001056 66BC[93AE0000]      <1> 	mov esp, stackend
  1346 0000105C 0F20C0              <1> 	mov eax, cr0
  1347 0000105F 66A3[2311]          <1> 	mov [cr0old], eax
  1348 00001063 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1349 00001069 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1350 0000106C EA[7110]0010        <1> 	jmp 0x1000:inrealmode
  1351                              <1> 
  1352                              <1> inrealmode:
  1353 00001071 8CC8                <1> 	mov ax, cs
  1354 00001073 8ED8                <1> 	mov ds, ax
  1355 00001075 8EC0                <1> 	mov es, ax
  1356 00001077 8EE0                <1> 	mov fs, ax
  1357 00001079 8EE8                <1> 	mov gs, ax
  1358 0000107B 8ED0                <1> 	mov ss, ax
  1359 0000107D BC[93AE]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1360                              <1> 	
  1361 00001080 B011                <1> 	mov al, 0x11
  1362 00001082 E620                <1> 	out 0x20, al
  1363 00001084 E6A0                <1> 	out 0xA0, al
  1364 00001086 B008                <1> 	mov al, 0x8		;interrupt for master
  1365 00001088 E621                <1> 	out 0x21, al
  1366 0000108A B070                <1> 	mov al, 0x70	;interrupt for slave
  1367 0000108C E6A1                <1> 	out 0xA1, al
  1368 0000108E B004                <1> 	mov al, 4
  1369 00001090 E621                <1> 	out 0x21, al
  1370 00001092 B002                <1> 	mov al, 2
  1371 00001094 E6A1                <1> 	out 0xA1, al
  1372 00001096 B001                <1> 	mov al, 0x1
  1373 00001098 E621                <1> 	out 0x21, al
  1374 0000109A B001                <1> 	mov al, 0x1
  1375 0000109C E6A1                <1> 	out 0xA1, al
  1376                              <1> 	
  1377 0000109E 0F011E[1D11]        <1> 	lidt [idt_real]
  1378 000010A3 FB                  <1> 	sti
  1379                              <1> 
  1380 000010A4 66A1[2B11]          <1> 	mov eax, [realmodeeax]
  1381 000010A8 668B1E[2711]        <1> 	mov ebx, [realmodeebx]
  1382                              <1> 
  1383 000010AD FF16[3311]          <1> 	call word [realmodeptr] ;call the real mode program here
  1384                              <1> 
  1385 000010B1 66A3[2B11]          <1> 	mov [realmodeeax], eax
  1386 000010B5 66891E[2711]        <1> 	mov [realmodeebx], ebx
  1387                              <1> 
  1388 000010BA FA                  <1> 	cli
  1389 000010BB 0F0116[B407]        <1> 	lgdt [gdtr]
  1390 000010C0 0F011E[BA07]        <1> 	lidt [idtr]
  1391 000010C5 0F20C0              <1> 	mov eax, cr0
  1392 000010C8 0C01                <1> 	or al, 1
  1393 000010CA 0F22C0              <1> 	mov cr0,eax
  1394 000010CD EA[D210]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1395                              <1> 
  1396                              <1> [BITS 32]
  1397                              <1> returntopmode:
  1398 000010D2 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1399 000010D6 8ED8                <1> 	mov ds, ax
  1400 000010D8 8EC0                <1> 	mov es, ax
  1401 000010DA 8EE0                <1> 	mov fs, ax
  1402 000010DC 8ED0                <1> 	mov ss, ax
  1403 000010DE 8B25[19110000]      <1> 	mov esp, [pmodeesp]
  1404 000010E4 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1405 000010E8 8EE8                <1> 	mov gs, ax
  1406                              <1> 
  1407 000010EA BB[23110000]        <1> 	mov ebx, cr0old
  1408                              <1> rmcopyfromfirstmbyte:
  1409 000010EF 658B03              <1> 	mov eax, [gs:ebx]
  1410 000010F2 8903                <1> 	mov [ebx], eax
  1411 000010F4 81C304000000        <1> 	add ebx, 4
  1412 000010FA 81FB[33110000]      <1> 	cmp ebx, realmodeptr
  1413 00001100 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1414                              <1> 
  1415 00001102 E876460000          <1> 	call initialize.pic ;reset irq's and masks
  1416 00001107 FB                  <1> 	sti
  1417 00001108 A1[2B110000]        <1> 	mov eax, [realmodeeax]
  1418 0000110D 8B1D[27110000]      <1> 	mov ebx, [realmodeebx]
  1419 00001113 FF25[2F110000]      <1> 	jmp dword [realmodereturn]
  1420                              <1> 	
  1421 00001119 00000000            <1> pmodeesp dd 0
  1422                              <1> idt_real:
  1423 0000111D FF03                <1> 	dw 0x3FF
  1424 0000111F 00000000            <1> 	dd 0
  1425 00001123 00000000            <1> cr0old dd 0
  1426 00001127 00000000            <1> realmodeebx dd 0
  1427 0000112B 00000000            <1> realmodeeax dd 0
  1428 0000112F 00000000            <1> realmodereturn dd 0
  1429 00001133 0000                <1> realmodeptr dw 0
  1430 00001135 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1431                                  [BITS 32]
  1432                                      %include 'source/exception.asm'
  1433                              <1> unhand:	
  1434                              <1> 	%assign i 0
  1435                              <1> 	%rep 0x50
  1436                              <1> 	cli
  1437                              <1> 	mov byte [intprob], i
  1438                              <1> 	jmp unhand2
  1439                              <1> 	%assign i i+1
  1440                              <1> 	%endrep
  1441 00001139 FA                  <2>  cli
  1442 0000113A C605[42180000]00    <2>  mov byte [intprob], i
  1443 00001141 E903040000          <2>  jmp unhand2
  1444                              <2>  %assign i i+1
  1445 00001146 FA                  <2>  cli
  1446 00001147 C605[42180000]01    <2>  mov byte [intprob], i
  1447 0000114E E9F6030000          <2>  jmp unhand2
  1448                              <2>  %assign i i+1
  1449 00001153 FA                  <2>  cli
  1450 00001154 C605[42180000]02    <2>  mov byte [intprob], i
  1451 0000115B E9E9030000          <2>  jmp unhand2
  1452                              <2>  %assign i i+1
  1453 00001160 FA                  <2>  cli
  1454 00001161 C605[42180000]03    <2>  mov byte [intprob], i
  1455 00001168 E9DC030000          <2>  jmp unhand2
  1456                              <2>  %assign i i+1
  1457 0000116D FA                  <2>  cli
  1458 0000116E C605[42180000]04    <2>  mov byte [intprob], i
  1459 00001175 E9CF030000          <2>  jmp unhand2
  1460                              <2>  %assign i i+1
  1461 0000117A FA                  <2>  cli
  1462 0000117B C605[42180000]05    <2>  mov byte [intprob], i
  1463 00001182 E9C2030000          <2>  jmp unhand2
  1464                              <2>  %assign i i+1
  1465 00001187 FA                  <2>  cli
  1466 00001188 C605[42180000]06    <2>  mov byte [intprob], i
  1467 0000118F E9B5030000          <2>  jmp unhand2
  1468                              <2>  %assign i i+1
  1469 00001194 FA                  <2>  cli
  1470 00001195 C605[42180000]07    <2>  mov byte [intprob], i
  1471 0000119C E9A8030000          <2>  jmp unhand2
  1472                              <2>  %assign i i+1
  1473 000011A1 FA                  <2>  cli
  1474 000011A2 C605[42180000]08    <2>  mov byte [intprob], i
  1475 000011A9 E99B030000          <2>  jmp unhand2
  1476                              <2>  %assign i i+1
  1477 000011AE FA                  <2>  cli
  1478 000011AF C605[42180000]09    <2>  mov byte [intprob], i
  1479 000011B6 E98E030000          <2>  jmp unhand2
  1480                              <2>  %assign i i+1
  1481 000011BB FA                  <2>  cli
  1482 000011BC C605[42180000]0A    <2>  mov byte [intprob], i
  1483 000011C3 E981030000          <2>  jmp unhand2
  1484                              <2>  %assign i i+1
  1485 000011C8 FA                  <2>  cli
  1486 000011C9 C605[42180000]0B    <2>  mov byte [intprob], i
  1487 000011D0 E974030000          <2>  jmp unhand2
  1488                              <2>  %assign i i+1
  1489 000011D5 FA                  <2>  cli
  1490 000011D6 C605[42180000]0C    <2>  mov byte [intprob], i
  1491 000011DD E967030000          <2>  jmp unhand2
  1492                              <2>  %assign i i+1
  1493 000011E2 FA                  <2>  cli
  1494 000011E3 C605[42180000]0D    <2>  mov byte [intprob], i
  1495 000011EA E95A030000          <2>  jmp unhand2
  1496                              <2>  %assign i i+1
  1497 000011EF FA                  <2>  cli
  1498 000011F0 C605[42180000]0E    <2>  mov byte [intprob], i
  1499 000011F7 E94D030000          <2>  jmp unhand2
  1500                              <2>  %assign i i+1
  1501 000011FC FA                  <2>  cli
  1502 000011FD C605[42180000]0F    <2>  mov byte [intprob], i
  1503 00001204 E940030000          <2>  jmp unhand2
  1504                              <2>  %assign i i+1
  1505 00001209 FA                  <2>  cli
  1506 0000120A C605[42180000]10    <2>  mov byte [intprob], i
  1507 00001211 E933030000          <2>  jmp unhand2
  1508                              <2>  %assign i i+1
  1509 00001216 FA                  <2>  cli
  1510 00001217 C605[42180000]11    <2>  mov byte [intprob], i
  1511 0000121E E926030000          <2>  jmp unhand2
  1512                              <2>  %assign i i+1
  1513 00001223 FA                  <2>  cli
  1514 00001224 C605[42180000]12    <2>  mov byte [intprob], i
  1515 0000122B E919030000          <2>  jmp unhand2
  1516                              <2>  %assign i i+1
  1517 00001230 FA                  <2>  cli
  1518 00001231 C605[42180000]13    <2>  mov byte [intprob], i
  1519 00001238 E90C030000          <2>  jmp unhand2
  1520                              <2>  %assign i i+1
  1521 0000123D FA                  <2>  cli
  1522 0000123E C605[42180000]14    <2>  mov byte [intprob], i
  1523 00001245 E9FF020000          <2>  jmp unhand2
  1524                              <2>  %assign i i+1
  1525 0000124A FA                  <2>  cli
  1526 0000124B C605[42180000]15    <2>  mov byte [intprob], i
  1527 00001252 E9F2020000          <2>  jmp unhand2
  1528                              <2>  %assign i i+1
  1529 00001257 FA                  <2>  cli
  1530 00001258 C605[42180000]16    <2>  mov byte [intprob], i
  1531 0000125F E9E5020000          <2>  jmp unhand2
  1532                              <2>  %assign i i+1
  1533 00001264 FA                  <2>  cli
  1534 00001265 C605[42180000]17    <2>  mov byte [intprob], i
  1535 0000126C E9D8020000          <2>  jmp unhand2
  1536                              <2>  %assign i i+1
  1537 00001271 FA                  <2>  cli
  1538 00001272 C605[42180000]18    <2>  mov byte [intprob], i
  1539 00001279 E9CB020000          <2>  jmp unhand2
  1540                              <2>  %assign i i+1
  1541 0000127E FA                  <2>  cli
  1542 0000127F C605[42180000]19    <2>  mov byte [intprob], i
  1543 00001286 E9BE020000          <2>  jmp unhand2
  1544                              <2>  %assign i i+1
  1545 0000128B FA                  <2>  cli
  1546 0000128C C605[42180000]1A    <2>  mov byte [intprob], i
  1547 00001293 E9B1020000          <2>  jmp unhand2
  1548                              <2>  %assign i i+1
  1549 00001298 FA                  <2>  cli
  1550 00001299 C605[42180000]1B    <2>  mov byte [intprob], i
  1551 000012A0 E9A4020000          <2>  jmp unhand2
  1552                              <2>  %assign i i+1
  1553 000012A5 FA                  <2>  cli
  1554 000012A6 C605[42180000]1C    <2>  mov byte [intprob], i
  1555 000012AD E997020000          <2>  jmp unhand2
  1556                              <2>  %assign i i+1
  1557 000012B2 FA                  <2>  cli
  1558 000012B3 C605[42180000]1D    <2>  mov byte [intprob], i
  1559 000012BA E98A020000          <2>  jmp unhand2
  1560                              <2>  %assign i i+1
  1561 000012BF FA                  <2>  cli
  1562 000012C0 C605[42180000]1E    <2>  mov byte [intprob], i
  1563 000012C7 E97D020000          <2>  jmp unhand2
  1564                              <2>  %assign i i+1
  1565 000012CC FA                  <2>  cli
  1566 000012CD C605[42180000]1F    <2>  mov byte [intprob], i
  1567 000012D4 E970020000          <2>  jmp unhand2
  1568                              <2>  %assign i i+1
  1569 000012D9 FA                  <2>  cli
  1570 000012DA C605[42180000]20    <2>  mov byte [intprob], i
  1571 000012E1 E963020000          <2>  jmp unhand2
  1572                              <2>  %assign i i+1
  1573 000012E6 FA                  <2>  cli
  1574 000012E7 C605[42180000]21    <2>  mov byte [intprob], i
  1575 000012EE E956020000          <2>  jmp unhand2
  1576                              <2>  %assign i i+1
  1577 000012F3 FA                  <2>  cli
  1578 000012F4 C605[42180000]22    <2>  mov byte [intprob], i
  1579 000012FB E949020000          <2>  jmp unhand2
  1580                              <2>  %assign i i+1
  1581 00001300 FA                  <2>  cli
  1582 00001301 C605[42180000]23    <2>  mov byte [intprob], i
  1583 00001308 E93C020000          <2>  jmp unhand2
  1584                              <2>  %assign i i+1
  1585 0000130D FA                  <2>  cli
  1586 0000130E C605[42180000]24    <2>  mov byte [intprob], i
  1587 00001315 E92F020000          <2>  jmp unhand2
  1588                              <2>  %assign i i+1
  1589 0000131A FA                  <2>  cli
  1590 0000131B C605[42180000]25    <2>  mov byte [intprob], i
  1591 00001322 E922020000          <2>  jmp unhand2
  1592                              <2>  %assign i i+1
  1593 00001327 FA                  <2>  cli
  1594 00001328 C605[42180000]26    <2>  mov byte [intprob], i
  1595 0000132F E915020000          <2>  jmp unhand2
  1596                              <2>  %assign i i+1
  1597 00001334 FA                  <2>  cli
  1598 00001335 C605[42180000]27    <2>  mov byte [intprob], i
  1599 0000133C E908020000          <2>  jmp unhand2
  1600                              <2>  %assign i i+1
  1601 00001341 FA                  <2>  cli
  1602 00001342 C605[42180000]28    <2>  mov byte [intprob], i
  1603 00001349 E9FB010000          <2>  jmp unhand2
  1604                              <2>  %assign i i+1
  1605 0000134E FA                  <2>  cli
  1606 0000134F C605[42180000]29    <2>  mov byte [intprob], i
  1607 00001356 E9EE010000          <2>  jmp unhand2
  1608                              <2>  %assign i i+1
  1609 0000135B FA                  <2>  cli
  1610 0000135C C605[42180000]2A    <2>  mov byte [intprob], i
  1611 00001363 E9E1010000          <2>  jmp unhand2
  1612                              <2>  %assign i i+1
  1613 00001368 FA                  <2>  cli
  1614 00001369 C605[42180000]2B    <2>  mov byte [intprob], i
  1615 00001370 E9D4010000          <2>  jmp unhand2
  1616                              <2>  %assign i i+1
  1617 00001375 FA                  <2>  cli
  1618 00001376 C605[42180000]2C    <2>  mov byte [intprob], i
  1619 0000137D E9C7010000          <2>  jmp unhand2
  1620                              <2>  %assign i i+1
  1621 00001382 FA                  <2>  cli
  1622 00001383 C605[42180000]2D    <2>  mov byte [intprob], i
  1623 0000138A E9BA010000          <2>  jmp unhand2
  1624                              <2>  %assign i i+1
  1625 0000138F FA                  <2>  cli
  1626 00001390 C605[42180000]2E    <2>  mov byte [intprob], i
  1627 00001397 E9AD010000          <2>  jmp unhand2
  1628                              <2>  %assign i i+1
  1629 0000139C FA                  <2>  cli
  1630 0000139D C605[42180000]2F    <2>  mov byte [intprob], i
  1631 000013A4 E9A0010000          <2>  jmp unhand2
  1632                              <2>  %assign i i+1
  1633 000013A9 FA                  <2>  cli
  1634 000013AA C605[42180000]30    <2>  mov byte [intprob], i
  1635 000013B1 E993010000          <2>  jmp unhand2
  1636                              <2>  %assign i i+1
  1637 000013B6 FA                  <2>  cli
  1638 000013B7 C605[42180000]31    <2>  mov byte [intprob], i
  1639 000013BE E986010000          <2>  jmp unhand2
  1640                              <2>  %assign i i+1
  1641 000013C3 FA                  <2>  cli
  1642 000013C4 C605[42180000]32    <2>  mov byte [intprob], i
  1643 000013CB E979010000          <2>  jmp unhand2
  1644                              <2>  %assign i i+1
  1645 000013D0 FA                  <2>  cli
  1646 000013D1 C605[42180000]33    <2>  mov byte [intprob], i
  1647 000013D8 E96C010000          <2>  jmp unhand2
  1648                              <2>  %assign i i+1
  1649 000013DD FA                  <2>  cli
  1650 000013DE C605[42180000]34    <2>  mov byte [intprob], i
  1651 000013E5 E95F010000          <2>  jmp unhand2
  1652                              <2>  %assign i i+1
  1653 000013EA FA                  <2>  cli
  1654 000013EB C605[42180000]35    <2>  mov byte [intprob], i
  1655 000013F2 E952010000          <2>  jmp unhand2
  1656                              <2>  %assign i i+1
  1657 000013F7 FA                  <2>  cli
  1658 000013F8 C605[42180000]36    <2>  mov byte [intprob], i
  1659 000013FF E945010000          <2>  jmp unhand2
  1660                              <2>  %assign i i+1
  1661 00001404 FA                  <2>  cli
  1662 00001405 C605[42180000]37    <2>  mov byte [intprob], i
  1663 0000140C E938010000          <2>  jmp unhand2
  1664                              <2>  %assign i i+1
  1665 00001411 FA                  <2>  cli
  1666 00001412 C605[42180000]38    <2>  mov byte [intprob], i
  1667 00001419 E92B010000          <2>  jmp unhand2
  1668                              <2>  %assign i i+1
  1669 0000141E FA                  <2>  cli
  1670 0000141F C605[42180000]39    <2>  mov byte [intprob], i
  1671 00001426 E91E010000          <2>  jmp unhand2
  1672                              <2>  %assign i i+1
  1673 0000142B FA                  <2>  cli
  1674 0000142C C605[42180000]3A    <2>  mov byte [intprob], i
  1675 00001433 E911010000          <2>  jmp unhand2
  1676                              <2>  %assign i i+1
  1677 00001438 FA                  <2>  cli
  1678 00001439 C605[42180000]3B    <2>  mov byte [intprob], i
  1679 00001440 E904010000          <2>  jmp unhand2
  1680                              <2>  %assign i i+1
  1681 00001445 FA                  <2>  cli
  1682 00001446 C605[42180000]3C    <2>  mov byte [intprob], i
  1683 0000144D E9F7000000          <2>  jmp unhand2
  1684                              <2>  %assign i i+1
  1685 00001452 FA                  <2>  cli
  1686 00001453 C605[42180000]3D    <2>  mov byte [intprob], i
  1687 0000145A E9EA000000          <2>  jmp unhand2
  1688                              <2>  %assign i i+1
  1689 0000145F FA                  <2>  cli
  1690 00001460 C605[42180000]3E    <2>  mov byte [intprob], i
  1691 00001467 E9DD000000          <2>  jmp unhand2
  1692                              <2>  %assign i i+1
  1693 0000146C FA                  <2>  cli
  1694 0000146D C605[42180000]3F    <2>  mov byte [intprob], i
  1695 00001474 E9D0000000          <2>  jmp unhand2
  1696                              <2>  %assign i i+1
  1697 00001479 FA                  <2>  cli
  1698 0000147A C605[42180000]40    <2>  mov byte [intprob], i
  1699 00001481 E9C3000000          <2>  jmp unhand2
  1700                              <2>  %assign i i+1
  1701 00001486 FA                  <2>  cli
  1702 00001487 C605[42180000]41    <2>  mov byte [intprob], i
  1703 0000148E E9B6000000          <2>  jmp unhand2
  1704                              <2>  %assign i i+1
  1705 00001493 FA                  <2>  cli
  1706 00001494 C605[42180000]42    <2>  mov byte [intprob], i
  1707 0000149B E9A9000000          <2>  jmp unhand2
  1708                              <2>  %assign i i+1
  1709 000014A0 FA                  <2>  cli
  1710 000014A1 C605[42180000]43    <2>  mov byte [intprob], i
  1711 000014A8 E99C000000          <2>  jmp unhand2
  1712                              <2>  %assign i i+1
  1713 000014AD FA                  <2>  cli
  1714 000014AE C605[42180000]44    <2>  mov byte [intprob], i
  1715 000014B5 E98F000000          <2>  jmp unhand2
  1716                              <2>  %assign i i+1
  1717 000014BA FA                  <2>  cli
  1718 000014BB C605[42180000]45    <2>  mov byte [intprob], i
  1719 000014C2 E982000000          <2>  jmp unhand2
  1720                              <2>  %assign i i+1
  1721 000014C7 FA                  <2>  cli
  1722 000014C8 C605[42180000]46    <2>  mov byte [intprob], i
  1723 000014CF E975000000          <2>  jmp unhand2
  1724                              <2>  %assign i i+1
  1725 000014D4 FA                  <2>  cli
  1726 000014D5 C605[42180000]47    <2>  mov byte [intprob], i
  1727 000014DC E968000000          <2>  jmp unhand2
  1728                              <2>  %assign i i+1
  1729 000014E1 FA                  <2>  cli
  1730 000014E2 C605[42180000]48    <2>  mov byte [intprob], i
  1731 000014E9 E95B000000          <2>  jmp unhand2
  1732                              <2>  %assign i i+1
  1733 000014EE FA                  <2>  cli
  1734 000014EF C605[42180000]49    <2>  mov byte [intprob], i
  1735 000014F6 E94E000000          <2>  jmp unhand2
  1736                              <2>  %assign i i+1
  1737 000014FB FA                  <2>  cli
  1738 000014FC C605[42180000]4A    <2>  mov byte [intprob], i
  1739 00001503 E941000000          <2>  jmp unhand2
  1740                              <2>  %assign i i+1
  1741 00001508 FA                  <2>  cli
  1742 00001509 C605[42180000]4B    <2>  mov byte [intprob], i
  1743 00001510 E934000000          <2>  jmp unhand2
  1744                              <2>  %assign i i+1
  1745 00001515 FA                  <2>  cli
  1746 00001516 C605[42180000]4C    <2>  mov byte [intprob], i
  1747 0000151D E927000000          <2>  jmp unhand2
  1748                              <2>  %assign i i+1
  1749 00001522 FA                  <2>  cli
  1750 00001523 C605[42180000]4D    <2>  mov byte [intprob], i
  1751 0000152A E91A000000          <2>  jmp unhand2
  1752                              <2>  %assign i i+1
  1753 0000152F FA                  <2>  cli
  1754 00001530 C605[42180000]4E    <2>  mov byte [intprob], i
  1755 00001537 E90D000000          <2>  jmp unhand2
  1756                              <2>  %assign i i+1
  1757 0000153C FA                  <2>  cli
  1758 0000153D C605[42180000]4F    <2>  mov byte [intprob], i
  1759 00001544 E900000000          <2>  jmp unhand2
  1760                              <2>  %assign i i+1
  1761                              <1> unhand2:
  1762 00001549 FA                  <1> 	cli
  1763 0000154A 1E                  <1> 	push ds
  1764 0000154B 06                  <1> 	push es
  1765 0000154C 0FA0                <1> 	push fs
  1766 0000154E 0FA8                <1> 	push gs
  1767 00001550 16                  <1> 	push ss
  1768 00001551 60                  <1> 	pushad
  1769 00001552 803D[1D8D0000]00    <1> 	cmp byte [guion], 0
  1770 00001559 0F8432000000        <1> 	je near noguiunhandstuff
  1771 0000155F 66C705[3C180000]08- <1> 	mov word [locunhandy], 8
  1772 00001567 00                  <1>
  1773 00001568 66C705[3E180000]08- <1> 	mov word [locunhandx], 8
  1774 00001570 00                  <1>
  1775 00001571 668B1D[24580000]    <1> 	mov bx, [background]
  1776 00001578 66891D[40180000]    <1> 	mov [backgroundcache], bx
  1777 0000157F C605[2D510000]01    <1> 	mov byte [mousedisabled],1
  1778 00001586 66BB00F8            <1> 	mov bx, 1111100000000000b
  1779 0000158A 66891D[24580000]    <1> 	mov [background], bx
  1780                              <1> noguiunhandstuff:
  1781 00001591 89E6                <1> 	mov esi, esp
  1782 00001593 8935[30180000]      <1> 	mov [espfirst], esi
  1783 00001599 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1784 0000159F 8935[2C180000]      <1> 	mov [esploc], esi
  1785 000015A5 BE[4B180000]        <1> 	mov esi, unhandmsg
  1786 000015AA 8935[34180000]      <1> 	mov [esiloc], esi
  1787 000015B0 31C9                <1> 	xor ecx, ecx
  1788 000015B2 8A0D[42180000]      <1> 	mov cl, [intprob]
  1789 000015B8 BB[DE1B0000]        <1> 	mov ebx, errortypes
  1790 000015BD C1E102              <1> 	shl ecx, 2
  1791 000015C0 01CB                <1> 	add ebx, ecx
  1792 000015C2 81FB[1E1C0000]      <1> 	cmp ebx, errortypesend
  1793 000015C8 7205                <1> 	jb gooderrortype
  1794 000015CA BB[1E1C0000]        <1> 	mov ebx, errortypesend
  1795                              <1> gooderrortype:
  1796 000015CF 8B33                <1> 	mov esi, [ebx]
  1797 000015D1 803D[1D8D0000]00    <1> 	cmp byte [guion], 0
  1798 000015D8 0F842D000000        <1> 	je near errortext
  1799 000015DE 668B0D[3C180000]    <1> 	mov cx, [locunhandy]
  1800 000015E5 668B15[3E180000]    <1> 	mov dx, [locunhandx]
  1801 000015EC 66B80100            <1> 	mov ax, 1
  1802 000015F0 6631DB              <1> 	xor bx, bx
  1803 000015F3 E8274D0000          <1> 	call showstring2
  1804 000015F8 66890D[3C180000]    <1> 	mov [locunhandy], cx
  1805 000015FF 668915[3E180000]    <1> 	mov [locunhandx], dx
  1806 00001606 E905000000          <1> 	jmp errortextdone
  1807                              <1> errortext:
  1808 0000160B E8530D0000          <1> 	call print		;;get the error message and print it
  1809                              <1> errortextdone:
  1810 00001610 31C9                <1> 	xor ecx, ecx
  1811 00001612 8A0D[42180000]      <1> 	mov cl, [intprob]
  1812 00001618 E8A8010000          <1> 	call expdump
  1813                              <1> dumpstack:
  1814 0000161D 8B35[2C180000]      <1> 	mov esi, [esploc]
  1815 00001623 39E6                <1> 	cmp esi, esp
  1816 00001625 7216                <1> 	jb donedump
  1817 00001627 368B0E              <1> 	mov ecx, [ss:esi]
  1818 0000162A 81EE04000000        <1> 	sub esi, 4
  1819 00001630 8935[2C180000]      <1> 	mov [esploc], esi
  1820 00001636 E88A010000          <1> 	call expdump
  1821 0000163B EBE0                <1> 	jmp dumpstack
  1822                              <1> donedump:
  1823 0000163D 0F20C1              <1> 	mov ecx, cr0
  1824 00001640 E880010000          <1> 	call expdump
  1825 00001645 0F20D1              <1> 	mov ecx, cr2
  1826 00001648 E878010000          <1> 	call expdump
  1827 0000164D 0F20D9              <1> 	mov ecx, cr3
  1828 00001650 E870010000          <1> 	call expdump
  1829 00001655 0F20E1              <1> 	mov ecx, cr4
  1830 00001658 E868010000          <1> 	call expdump
  1831 0000165D 8B35[2C180000]      <1> 	mov esi, [esploc]
  1832 00001663 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1833 00001668 81C710000000        <1> 	add edi, 16
  1834 0000166E 893D[47180000]      <1> 	mov [codelocend], edi
  1835 00001674 81EF20000000        <1> 	sub edi, 32
  1836                              <1> dumpcodeloop:
  1837 0000167A 893D[43180000]      <1> 	mov [codeloc], edi
  1838 00001680 8B0F                <1> 	mov ecx, [edi]
  1839 00001682 E83E010000          <1> 	call expdump
  1840 00001687 8B3D[43180000]      <1> 	mov edi, [codeloc]
  1841 0000168D 81C704000000        <1> 	add edi, 4
  1842 00001693 3B3D[47180000]      <1> 	cmp edi, [codelocend]
  1843 00001699 72DF                <1> 	jb dumpcodeloop
  1844 0000169B BE[56170000]        <1> 	mov esi, backtoosmsg
  1845 000016A0 803D[1D8D0000]00    <1> 	cmp byte [guion], 0
  1846 000016A7 750A                <1> 	jne guibacktomsg
  1847 000016A9 E8B50C0000          <1> 	call print
  1848 000016AE E91A000000          <1> 	jmp backtomsgdone
  1849                              <1> guibacktomsg:
  1850 000016B3 668B15[3E180000]    <1> 	mov dx, [locunhandx]
  1851 000016BA 668B0D[3C180000]    <1> 	mov cx, [locunhandy]
  1852 000016C1 66B80100            <1> 	mov ax, 1
  1853 000016C5 6631DB              <1> 	xor bx, bx
  1854 000016C8 E8524C0000          <1> 	call showstring2
  1855                              <1> backtomsgdone:
  1856 000016CD 30C0                <1> 	xor al, al
  1857 000016CF E811110000          <1> 	call rdcharint
  1858 000016D4 803D[42180000]03    <1> 	cmp byte [intprob], 3
  1859 000016DB 753C                <1> 	jne nodebugint
  1860 000016DD 803D[1D8D0000]00    <1> 	cmp byte [guion], 0
  1861 000016E4 7422                <1> 	je nodebuggui
  1862 000016E6 668B1D[40180000]    <1> 	mov bx, [backgroundcache]
  1863 000016ED 66891D[24580000]    <1> 	mov [background], bx
  1864 000016F4 6631DB              <1> 	xor bx, bx
  1865 000016F7 C605[2D510000]00    <1> 	mov byte [mousedisabled], 0
  1866 000016FE E8E4400000          <1> 	call guiclear
  1867 00001703 E8BE480000          <1> 	call reloadallgraphics
  1868                              <1> nodebuggui:
  1869 00001708 8B35[30180000]      <1> 	mov esi, [espfirst]
  1870 0000170E 89F4                <1> 	mov esp, esi
  1871 00001710 61                  <1> 	popad
  1872 00001711 17                  <1> 	pop ss
  1873 00001712 0FA9                <1> 	pop gs
  1874 00001714 0FA1                <1> 	pop fs
  1875 00001716 07                  <1> 	pop es
  1876 00001717 1F                  <1> 	pop ds
  1877 00001718 CF                  <1> 	iret
  1878                              <1> nodebugint:
  1879 00001719 61                  <1> 	popad
  1880 0000171A 17                  <1> 	pop ss
  1881 0000171B 0FA9                <1> 	pop gs
  1882 0000171D 0FA1                <1> 	pop fs
  1883 0000171F 07                  <1> 	pop es
  1884 00001720 1F                  <1> 	pop ds
  1885 00001721 803D[1D8D0000]00    <1> 	cmp byte [guion], 0
  1886 00001728 7427                <1> 	je returnunhandgui
  1887 0000172A 668B1D[40180000]    <1> 	mov bx, [backgroundcache]
  1888 00001731 66891D[24580000]    <1> 	mov [background], bx
  1889 00001738 6631DB              <1> 	xor bx, bx
  1890 0000173B C605[2D510000]00    <1> 	mov byte [mousedisabled], 0
  1891 00001742 E8A0400000          <1> 	call guiclear
  1892 00001747 E87A480000          <1> 	call reloadallgraphics
  1893 0000174C E9D5400000          <1> 	jmp gui
  1894                              <1> returnunhandgui:
  1895 00001751 E91F170000          <1> 	jmp nwcmd
  1896 00001756 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1897 0000175F 737420616E79207072- <1>
  1898 00001768 6F626C656D7320696E- <1>
  1899 00001771 207468652049737375- <1>
  1900 0000177A 65732073656374696F- <1>
  1901 00001783 6E20617420736F6C6C- <1>
  1902 0000178C 65726F732E676F6F67- <1>
  1903 00001795 6C65636F64652E636F- <1>
  1904 0000179E 6D0A                <1>
  1905 000017A0 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1906 000017A9 206B657920746F2072- <1>
  1907 000017B2 657475726E20746F20- <1>
  1908 000017BB 536F6C6C65724F530A- <1>
  1909 000017C4 00                  <1>
  1910                              <1> expdump:
  1911 000017C5 8B35[34180000]      <1> 	mov esi, [esiloc]
  1912 000017CB 89F7                <1> 	mov edi, esi
  1913 000017CD 81C70F000000        <1> 	add edi, 15
  1914 000017D3 81C604000000        <1> 	add esi, 4
  1915 000017D9 893D[34180000]      <1> 	mov [esiloc], edi
  1916 000017DF 81EF03000000        <1> 	sub edi, 3
  1917 000017E5 E8E91A0000          <1> 	call converthex
  1918 000017EA 81EE04000000        <1> 	sub esi, 4
  1919 000017F0 803D[1D8D0000]00    <1> 	cmp byte [guion], 0
  1920 000017F7 0F8429000000        <1> 	je near expdumptext
  1921 000017FD 668B0D[3C180000]    <1> 	mov cx, [locunhandy]
  1922 00001804 668B15[3E180000]    <1> 	mov dx, [locunhandx]
  1923 0000180B 66B80100            <1> 	mov ax, 1
  1924 0000180F 6631DB              <1> 	xor bx, bx
  1925 00001812 E8084B0000          <1> 	call showstring2
  1926 00001817 66890D[3C180000]    <1> 	mov [locunhandy], cx
  1927 0000181E 668915[3E180000]    <1> 	mov [locunhandx], dx
  1928 00001825 C3                  <1> 	ret
  1929                              <1> expdumptext:
  1930 00001826 E8380B0000          <1> 	call print
  1931 0000182B C3                  <1> 	ret
  1932 0000182C 00000000            <1> esploc dd 0
  1933 00001830 00000000            <1> espfirst dd 0
  1934 00001834 00000000            <1> esiloc dd 0
  1935 00001838 00000000            <1> esiregbuf dd 0
  1936 0000183C 0100                <1> locunhandy dw 1
  1937 0000183E 0100                <1> locunhandx dw 1
  1938 00001840 0000                <1> backgroundcache dw 0
  1939 00001842 00                  <1> intprob db 0
  1940 00001843 00000000            <1> codeloc dd 0
  1941 00001847 00000000            <1> codelocend dd 0
  1942                              <1> 	unhandmsg:	
  1943 0000184B 494E543D3030303030- <1> 			db "INT=00000000 ",10,0
  1944 00001854 303030200A00        <1>
  1945                              <1> unhndrg:
  1946 0000185A FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1947 00001863 303030202000<rept>  <1>
  1948 000018C3 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1949 000018CC 303030200A00        <1>
  1950 000018D2 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1951 000018DB 303030202000<rept>  <1>
  1952 0000193B FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1953 00001944 303030200A00        <1>
  1954 0000194A FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1955 00001953 303030202000<rept>  <1>
  1956 000019B3 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1957 000019BC 303030200A00        <1>
  1958 000019C2 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1959 000019CB 303030202000<rept>  <1>
  1960 00001A2B FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1961 00001A34 303030200A00        <1>
  1962                              <1> unhandregs:
  1963 00001A3A 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1964 00001A43 303030202000        <1>
  1965 00001A49 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1966 00001A52 303030202000        <1>
  1967 00001A58 4549503D3030303030- <1> 			db "EIP=00000000 ",10,0
  1968 00001A61 303030200A00        <1>
  1969 00001A67 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1970 00001A70 303030202000        <1>
  1971 00001A76 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1972 00001A7F 303030202000        <1>
  1973 00001A85 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1974 00001A8E 303030202000        <1>
  1975 00001A94 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1976 00001A9D 303030202000        <1>
  1977 00001AA3 53533A3D3030303030- <1> 			db "SS:=00000000 ",10,0
  1978 00001AAC 303030200A00        <1>
  1979 00001AB2 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1980 00001ABB 303030202000        <1>
  1981 00001AC1 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1982 00001ACA 303030202000        <1>
  1983 00001AD0 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1984 00001AD9 303030202000        <1>
  1985 00001ADF 4542583D3030303030- <1> 			db "EBX=00000000 ",10,0
  1986 00001AE8 303030200A00        <1>
  1987 00001AEE 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1988 00001AF7 303030202000        <1>
  1989 00001AFD 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1990 00001B06 303030202000        <1>
  1991 00001B0C 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1992 00001B15 303030202000        <1>
  1993 00001B1B 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000 ",10,0
  1994 00001B24 303030200A00        <1>
  1995 00001B2A 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1996 00001B33 303030202000        <1>
  1997 00001B39 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1998 00001B42 303030202000        <1>
  1999 00001B48 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  2000 00001B51 303030202000        <1>
  2001 00001B57 4352343D3030303030- <1> 			db "CR4=00000000 ",10,0
  2002 00001B60 303030200A00        <1>
  2003 00001B66 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  2004 00001B6F 303030202000<rept>  <1>
  2005 00001B84 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  2006 00001B8D 30303020FF00        <1>
  2007 00001B93 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  2008 00001B9C 3030305D2000        <1>
  2009 00001BA2 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  2010 00001BAB 303030202000<rept>  <1>
  2011 00001BCF FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  2012 00001BD8 303030FF0A00        <1>
  2013                              <1> unhandmsgend:
  2014                              <1> 
  2015                              <1> errortypes:
  2016 00001BDE [221C0000]          <1> 			dd err0
  2017 00001BE2 [861C0000]          <1> 			dd err1
  2018 00001BE6 [E71C0000]          <1> 			dd err2
  2019 00001BEA [3C1D0000]          <1> 			dd err3
  2020 00001BEE [A01D0000]          <1> 			dd err4
  2021 00001BF2 [F21D0000]          <1> 			dd err5
  2022 00001BF6 [5C1E0000]          <1> 			dd err6
  2023 00001BFA [C41E0000]          <1> 			dd err7
  2024 00001BFE [0E1F0000]          <1> 			dd err8
  2025 00001C02 [6B1F0000]          <1> 			dd err9
  2026 00001C06 [C41F0000]          <1> 			dd err10
  2027 00001C0A [0F200000]          <1> 			dd err11
  2028 00001C0E [5F200000]          <1> 			dd err12
  2029 00001C12 [B8200000]          <1> 			dd err13
  2030 00001C16 [1B210000]          <1> 			dd err14
  2031 00001C1A [57210000]          <1> 			dd err15
  2032                              <1> errortypesend:
  2033 00001C1E [E2210000]          <1> 			dd unknownerror
  2034                              <1> 			
  2035 00001C22 4469766973696F6E20- <1> err0	db "Division by zero:",10
  2036 00001C2B 6279207A65726F3A0A  <1>
  2037 00001C34 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  2038 00001C3D 6C79206C696D2061F6- <1>
  2039 00001C46 78203D20EC20776865- <1>
  2040 00001C4F 6E206120697320616E- <1>
  2041 00001C58 79207265616C206E75- <1>
  2042 00001C61 6D6265722E20486170- <1>
  2043 00001C6A 707920456173746572- <1>
  2044 00001C73 210A                <1>
  2045 00001C75 202020202020202020- <1> 		db "            x",26,"0",10,0
  2046 00001C7E 202020781A300A00    <1>
  2047                              <1> 		
  2048 00001C86 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  2049 00001C8F 65702F427265616B70- <1>
  2050 00001C98 6F696E743A0A        <1>
  2051 00001C9E 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  2052 00001CA7 696E74206661756C74- <1>
  2053 00001CB0 2C20627265616B706F- <1>
  2054 00001CB9 696E7420747261702C- <1>
  2055 00001CC2 206F722073696E676C- <1>
  2056 00001CCB 652D73746570207472- <1>
  2057 00001CD4 617020776173207472- <1>
  2058 00001CDD 696767657265642E0A- <1>
  2059 00001CE6 00                  <1>
  2060                              <1> 		
  2061 00001CE7 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  2062 00001CF0 6C6520696E74657272- <1>
  2063 00001CF9 7570743A0A          <1>
  2064 00001CFE 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  2065 00001D07 6520696E7465727275- <1>
  2066 00001D10 707420776173207472- <1>
  2067 00001D19 696767657265642074- <1>
  2068 00001D22 68617420636F756C64- <1>
  2069 00001D2B 206E6F74206265206D- <1>
  2070 00001D34 61736B65642E0A00    <1>
  2071                              <1> 		
  2072 00001D3C 427265616B706F696E- <1> err3	db "Breakpoint:",10
  2073 00001D45 743A0A              <1>
  2074 00001D48 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  2075 00001D51 727275707420697320- <1>
  2076 00001D5A 7573656420696E2070- <1>
  2077 00001D63 726F6772616D732074- <1>
  2078 00001D6C 6F2073686F77207468- <1>
  2079 00001D75 6520737461636B2061- <1>
  2080 00001D7E 6E6420726567697374- <1>
  2081 00001D87 65727320616E642063- <1>
  2082 00001D90 616E2062650A        <1>
  2083 00001D96 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  2084 00001D9F 00                  <1>
  2085                              <1> 		
  2086 00001DA0 4F766572666C6F773A- <1> err4	db "Overflow:",10
  2087 00001DA9 0A                  <1>
  2088 00001DAA 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  2089 00001DB3 73736F722072616E20- <1>
  2090 00001DBC 696E746F20616E2049- <1>
  2091 00001DC5 4E544F20696E737472- <1>
  2092 00001DCE 756374696F6E207769- <1>
  2093 00001DD7 746820746865206F76- <1>
  2094 00001DE0 6572666C6F7720666C- <1>
  2095 00001DE9 6167207365742E0A00  <1>
  2096                              <1> 		
  2097 00001DF2 426F756E6473206368- <1> err5	db "Bounds check:",10
  2098 00001DFB 65636B3A0A          <1>
  2099 00001E00 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  2100 00001E09 73736F72207265626F- <1>
  2101 00001E12 756E6465642066726F- <1>
  2102 00001E1B 6D206120424F554E44- <1>
  2103 00001E24 20696E737472756374- <1>
  2104 00001E2D 696F6E2072756E206F- <1>
  2105 00001E36 6E20616E206F706572- <1>
  2106 00001E3F 616E64207468617420- <1>
  2107 00001E48 776173206F75740A    <1>
  2108 00001E50 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  2109 00001E59 2E0A00              <1>
  2110                              <1> 		
  2111 00001E5C 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  2112 00001E65 70636F64653A0A      <1>
  2113 00001E6C 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  2114 00001E75 73736F722068617320- <1>
  2115 00001E7E 6E6F20696465612077- <1>
  2116 00001E87 686174206974207761- <1>
  2117 00001E90 7320747279696E6720- <1>
  2118 00001E99 746F20657865637574- <1>
  2119 00001EA2 652E20446F6E277420- <1>
  2120 00001EAB 72756E205353453420- <1>
  2121 00001EB4 636F64650A          <1>
  2122 00001EB9 6F6E20343836277321- <1> 		db "on 486's!",10,0
  2123 00001EC2 0A00                <1>
  2124                              <1> 		
  2125 00001EC4 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  2126 00001ECD 6F72206E6F74206176- <1>
  2127 00001ED6 61696C61626C653A0A  <1>
  2128 00001EDF 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  2129 00001EE8 206B6E6F7720746865- <1>
  2130 00001EF1 7920646F6E2774206D- <1>
  2131 00001EFA 616B652074686F7365- <1>
  2132 00001F03 20616E796D6F726521- <1>
  2133 00001F0C 0A00                <1>
  2134                              <1> 		
  2135 00001F0E 446F75626C65206661- <1> err8	db "Double fault:",10
  2136 00001F17 756C743A0A          <1>
  2137 00001F1C 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  2138 00001F25 74696F6E2068616E64- <1>
  2139 00001F2E 6C657220636F756C64- <1>
  2140 00001F37 206E6F742068616E64- <1>
  2141 00001F40 6C6520746861742069- <1>
  2142 00001F49 7420636F756C64206E- <1>
  2143 00001F52 6F742068616E646C65- <1>
  2144 00001F5B 20616E206578636570- <1>
  2145 00001F64 74696F6E2E0A00      <1>
  2146                              <1> 		
  2147 00001F6B 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  2148 00001F74 6F72207365676D656E- <1>
  2149 00001F7D 74206F76657272756E- <1>
  2150 00001F86 3A0A00              <1>
  2151 00001F89 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  2152 00001F92 722068617070656E73- <1>
  2153 00001F9B 20696E206D6F646572- <1>
  2154 00001FA4 6E20636F6D70757465- <1>
  2155 00001FAD 72732C20616E64206E- <1>
  2156 00001FB6 657665722073686F75- <1>
  2157 00001FBF 6C642E0A00          <1>
  2158                              <1> 
  2159 00001FC4 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  2160 00001FCD 53533A0A            <1>
  2161 00001FD1 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  2162 00001FDA 686174207761732073- <1>
  2163 00001FE3 776974636865642074- <1>
  2164 00001FEC 6F20697320696E7661- <1>
  2165 00001FF5 6C69642E204E6F7468- <1>
  2166 00001FFE 696E672066756E6E79- <1>
  2167 00002007 20686572652E0A00    <1>
  2168                              <1> 		
  2169 0000200F 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2170 00002018 6F742070726573656E- <1>
  2171 00002021 743A0A              <1>
  2172 00002024 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2173 0000202D 6E7420626974206F66- <1>
  2174 00002036 20746865207365676D- <1>
  2175 0000203F 656E74206465736372- <1>
  2176 00002048 6970746F7220697320- <1>
  2177 00002051 73657420746F207A65- <1>
  2178 0000205A 726F2E0A00          <1>
  2179                              <1> 		
  2180 0000205F 537461636B20657863- <1> err12	db "Stack exception:",10
  2181 00002068 657074696F6E3A0A    <1>
  2182 00002070 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2183 00002079 7363726970746F7220- <1>
  2184 00002082 697320696E76616C69- <1>
  2185 0000208B 64206F72206E6F7420- <1>
  2186 00002094 70726573656E74206F- <1>
  2187 0000209D 7220697473206C696D- <1>
  2188 000020A6 697420697320746F6F- <1>
  2189 000020AF 20736D616C6C2E0A00  <1>
  2190                              <1> 		
  2191 000020B8 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2192 000020C1 726F74656374696F6E- <1>
  2193 000020CA 2076696F6C6174696F- <1>
  2194 000020D3 6E3A0A              <1>
  2195 000020D6 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2196 000020DF 746564207468652063- <1>
  2197 000020E8 6F6D70757465722E20- <1>
  2198 000020F1 537465702061776179- <1>
  2199 000020FA 20736C6F776C792E20- <1>
  2200 00002103 546865204642492069- <1>
  2201 0000210C 73206F6E2069747320- <1>
  2202 00002115 7761792E0A00        <1>
  2203                              <1> 		
  2204 0000211B 50616765206661756C- <1> err14	db "Page fault:",10
  2205 00002124 743A0A              <1>
  2206 00002127 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2207 00002130 746861742077617320- <1>
  2208 00002139 726571756573746564- <1>
  2209 00002142 20776173206E6F7420- <1>
  2210 0000214B 617661696C61626C65- <1>
  2211 00002154 2E0A00              <1>
  2212                              <1> 		
  2213 00002157 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2214 00002160 666F7220506C616E20- <1>
  2215 00002169 523A0A              <1>
  2216 0000216C 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2217 00002175 727275707420697320- <1>
  2218 0000217E 726573657276656420- <1>
  2219 00002187 666F72207573616765- <1>
  2220 00002190 206F6E6C7920627920- <1>
  2221 00002199 746865206D696C6974- <1>
  2222 000021A2 617279207768656E20- <1>
  2223 000021AB 6974206973206E6563- <1>
  2224 000021B4 6573736172790A      <1>
  2225 000021BB 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  2226 000021C4 746520612066756C6C- <1>
  2227 000021CD 2D7363616C6520636F- <1>
  2228 000021D6 757020642782746174- <1>
  2229 000021DF 2E0A00              <1>
  2230                              <1> 		
  2231 000021E2 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2232 000021EB 68656C6C206A757374- <1>
  2233 000021F4 2068617070656E6564- <1>
  2234 000021FD 3F2049732065766572- <1>
  2235 00002206 796F6E65206F6B6179- <1>
  2236 0000220F 3F2048617264206472- <1>
  2237 00002218 6976653F2056696465- <1>
  2238 00002221 6F20636172643F0A    <1>
  2239 00002229 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2240 00002232 726520796F75207468- <1>
  2241 0000223B 6572653F0A00        <1>
  2242                                      %include 'source/ints.asm'
  2243                              <1> newints:	;;for great justice
  2244 00002241 80FC00              <1> 	cmp ah, 0		;;originally 0
  2245 00002244 0F847F000000        <1> 	je near intx0   ;;0=kills app
  2246 0000224A 80FC01              <1> 	cmp ah, 1		;;originally 1
  2247 0000224D 0F84E8000000        <1> 	je near intx1   ;;3=print string
  2248 00002253 80FC02              <1> 	cmp ah, 2		;;originally 2
  2249 00002256 0F8446010000        <1> 	je near intx2	;;4=read string
  2250 0000225C 80FC03              <1> 	cmp ah, 3		;;originally 3
  2251 0000225F 0F8478010000        <1> 	je near intx3	;;6=clear screen
  2252 00002265 80FC04              <1> 	cmp ah, 4		;;originally 4
  2253 00002268 0F84EF010000        <1> 	je near intx4	;;5=read and print string
  2254 0000226E 80FC05              <1> 	cmp ah, 5		;;originally 5		
  2255 00002271 0F8462050000        <1> 	je near intx5	;;2=get char
  2256 00002277 80FC06              <1> 	cmp ah, 6		;;originally 6
  2257 0000227A 0F84AC050000        <1> 	je near intx6	;;1=print char
  2258 00002280 80FC07              <1> 	cmp ah, 7
  2259 00002283 0F8484070000        <1> 	je near intx7	;;read file
  2260                              <1> ;	cmp ah, 8		;;write file
  2261                              <1> ;	je near intx8
  2262 00002289 80FC09              <1> 	cmp ah, 9
  2263 0000228C 0F8485070000        <1> 	je near intx9	;;convert number to string
  2264 00002292 80FC0A              <1> 	cmp ah, 10
  2265 00002295 0F8494070000        <1> 	je near intx10	;;convert string to number
  2266 0000229B 80FC0B              <1> 	cmp ah, 11
  2267 0000229E 0F8491070000        <1> 	je near intx11	;;create thread
  2268 000022A4 80FC0C              <1> 	cmp ah, 12		;;get time
  2269 000022A7 0F848E070000        <1> 	je near intx12
  2270 000022AD 80FC0D              <1> 	cmp ah, 13		;;set time
  2271 000022B0 0F8496070000        <1> 	je near intx13
  2272 000022B6 80FC0E              <1> 	cmp ah, 14		;;run program
  2273 000022B9 0F8499070000        <1> 	je near intx14
  2274 000022BF 80FC0F              <1> 	cmp ah, 15		;;get program info-location of name/options/number of options/environmental vars
  2275 000022C2 0F84A2070000        <1> 	je near intx15
  2276 000022C8 C3                  <1> 	ret
  2277                              <1> 	
  2278                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  2279                              <1> intx0:
  2280                              <1> 	%include 'source/interrupts/0-exit.asm'
  2281                              <2> exitprog:
  2282 000022C9 BC[93AE0000]        <2> 	mov esp, stackend	;for now i need to use this
  2283 000022CE 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  2284 000022D2 8EDB                <2> 	mov ds, bx
  2285 000022D4 8EC3                <2> 	mov es, bx
  2286 000022D6 8EE3                <2> 	mov fs, bx
  2287 000022D8 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  2288 000022DC 8EEB                <2> 	mov gs, bx
  2289 000022DE 3C00                <2> 	cmp al, 0
  2290 000022E0 0F8505000000        <2> 	jne near warnexitstatus
  2291 000022E6 E98A0B0000          <2> 	jmp nwcmd
  2292                              <2> 	
  2293                              <2> warnexitstatus:
  2294 000022EB 88C1                <2> 	mov cl, al
  2295 000022ED B006                <2> 	mov al, 6
  2296 000022EF A2[31330000]        <2> 	mov [firsthexshown], al
  2297 000022F4 6651                <2> 	push cx
  2298 000022F6 BE[16230000]        <2> 	mov esi, exitstatus1msg
  2299 000022FB E845000000          <2> 	call printhighlight
  2300 00002300 6659                <2> 	pop cx
  2301 00002302 E82B100000          <2> 	call showhexsmall
  2302 00002307 BE[2B230000]        <2> 	mov esi, exitstatus2msg
  2303 0000230C E834000000          <2> 	call printhighlight
  2304 00002311 E95F0B0000          <2> 	jmp nwcmd
  2305                              <2> 	
  2306 00002316 416E20657869742073- <2> exitstatus1msg db "An exit status of 0x",0
  2307 0000231F 7461747573206F6620- <2>
  2308 00002328 307800              <2>
  2309 0000232B 087761732072657475- <2> exitstatus2msg db 8,"was returned.",10,0
  2310 00002334 726E65642E0A00      <2>
  2311                              <1> intx1:
  2312                              <1> 	%include 'source/interrupts/1-prntstr.asm'
  2313 0000233B E82A000000          <2> call printint
  2314 00002340 E995E3FFFF          <2> jmp timerinterrupt
  2315                              <2> 
  2316                              <2> 	printhighlight:
  2317 00002345 6631C0              <2> 		xor ax, ax
  2318 00002348 66BBF000            <2> 		mov bx, 0xF0
  2319 0000234C E919000000          <2> 		jmp printint
  2320                              <2> 	printquiet:
  2321 00002351 6631C0              <2> 		xor ax, ax
  2322 00002354 A2[9D230000]        <2> 		mov [endkeyprint], al
  2323 00002359 66BB0700            <2> 		mov bx, 7
  2324 0000235D E828000000          <2> 		call printintb
  2325 00002362 C3                  <2> 		ret
  2326                              <2>     print:
  2327 00002363 6631C0              <2> 		xor ax, ax
  2328 00002366 66BB0700            <2> 		mov bx, 7
  2329                              <2> 	printint:	;;print line, al=last key,bl=modifier, esi=buffer
  2330 0000236A 8935[9E230000]      <2> 		mov [startesiprint], esi
  2331 00002370 A2[9D230000]        <2> 		mov [endkeyprint], al
  2332 00002375 E810000000          <2> 		call printintb
  2333 0000237A 89F1                <2> 		mov ecx, esi
  2334 0000237C 2B0D[9E230000]      <2> 		sub ecx, [startesiprint]
  2335 00002382 51                  <2> 		push ecx
  2336 00002383 E818070000          <2> 		call termcopy
  2337 00002388 59                  <2> 		pop ecx
  2338 00002389 C3                  <2> 		ret
  2339                              <2> 	printintb:
  2340 0000238A 8A06                <2> 		mov al, [esi]
  2341 0000238C 3A05[9D230000]      <2> 		cmp al, [endkeyprint]
  2342 00002392 7408                <2> 		je doneprintint
  2343 00002394 E8AE040000          <2> 		call prcharq
  2344 00002399 46                  <2> 		inc esi
  2345 0000239A EBEE                <2> 		jmp printintb
  2346                              <2> 	doneprintint:
  2347 0000239C C3                  <2> 		ret
  2348                              <2> 
  2349 0000239D 00                  <2> endkeyprint db 0
  2350 0000239E 00000000            <2> startesiprint dd 0
  2351                              <1> intx2:
  2352                              <1> 	%include 'source/interrupts/2-readstr.asm'
  2353 000023A2 E805000000          <2> call readint
  2354 000023A7 E92EE3FFFF          <2> jmp timerinterrupt
  2355                              <2> 
  2356                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer
  2357 000023AC A2[D8230000]        <2> 		mov [endkeyread], al
  2358 000023B1 893D[D9230000]      <2> 		mov [endbufferread], edi
  2359                              <2> 	readintb:
  2360 000023B7 56                  <2> 		push esi
  2361 000023B8 30C0                <2> 		xor al, al
  2362 000023BA E826040000          <2> 		call rdcharint
  2363 000023BF 5E                  <2> 		pop esi
  2364 000023C0 8806                <2> 		mov [esi], al
  2365 000023C2 46                  <2> 		inc esi
  2366 000023C3 3B35[D9230000]      <2> 		cmp esi, [endbufferread]
  2367 000023C9 7308                <2> 		jae readdone
  2368 000023CB 3A05[D8230000]      <2> 		cmp al, [endkeyread]
  2369 000023D1 75E4                <2> 		jne readintb
  2370                              <2> 	readdone:
  2371 000023D3 4E                  <2> 		dec esi
  2372 000023D4 C60600              <2> 		mov byte [esi], 0
  2373 000023D7 C3                  <2> 	ret
  2374 000023D8 00                  <2> endkeyread db 0
  2375 000023D9 00000000            <2> endbufferread dd 0
  2376                              <1> intx3:
  2377                              <1> 	%include 'source/interrupts/3-clearscrn.asm'
  2378 000023DD E805000000          <2> call clear
  2379 000023E2 E9F3E2FFFF          <2> jmp timerinterrupt
  2380                              <2> clear:		
  2381 000023E7 668B0D[092A0000]    <2> 		mov cx, [charxy]
  2382 000023EE BF[26CE0000]        <2> 		mov edi, videobuf
  2383 000023F3 6631C0              <2> 		xor ax, ax
  2384 000023F6 66A3[032A0000]      <2> 		mov [linebeginpos], ax
  2385 000023FC 66A3[052A0000]      <2> 		mov [videobufpos], ax
  2386 00002402 6631D2              <2> 		xor dx, dx
  2387 00002405 66A3[072A0000]      <2> 		mov [charpos], ax
  2388 0000240B B407                <2> 		mov ah, 7
  2389                              <2> 	clearb:
  2390 0000240D 8807                <2> 		mov [edi], al
  2391 0000240F 886701              <2> 		mov [edi + 1], ah
  2392 00002412 81C702000000        <2> 		add edi, 2
  2393 00002418 FEC9                <2> 		dec cl
  2394 0000241A 80F900              <2> 		cmp cl, 0
  2395 0000241D 75EE                <2> 		jne clearb
  2396 0000241F 8A0D[092A0000]      <2> 		mov cl, [charxy]
  2397 00002425 FECD                <2> 		dec ch
  2398 00002427 80FD00              <2> 		cmp ch, 0
  2399 0000242A 75E1                <2> 		jne clearb
  2400                              <2> 	cleardouble:
  2401 0000242C BF[661F0100]        <2> 		mov edi, videobuf2
  2402 00002431 668B0D[092A0000]    <2> 		mov cx, [charxy]
  2403 00002438 31C0                <2> 		xor eax, eax
  2404                              <2> 	clearc:
  2405 0000243A 668907              <2> 		mov [edi], ax
  2406 0000243D 81C702000000        <2> 		add edi, 2
  2407 00002443 FEC9                <2> 		dec cl
  2408 00002445 80F900              <2> 		cmp cl, 0
  2409 00002448 75F0                <2> 		jne clearc
  2410 0000244A 8A0D[092A0000]      <2> 		mov cl, [charxy]
  2411 00002450 FECD                <2> 		dec ch
  2412 00002452 80FD00              <2> 		cmp ch, 0
  2413 00002455 75E3                <2> 		jne clearc
  2414 00002457 E844060000          <2> 		call termcopy
  2415 0000245C C3                  <2> 		ret
  2416                              <2> 		
  2417                              <1> intx4:
  2418                              <1> 	%include 'source/interrupts/4-prntreadstr.asm'
  2419 0000245D E809000000          <2> call rdprint
  2420 00002462 E973E2FFFF          <2> jmp timerinterrupt
  2421                              <2> 
  2422                              <2> readline:
  2423 00002467 B00A                <2>   mov al, 10
  2424 00002469 B307                <2>   mov bl, 7
  2425                              <2> 	rdprint:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  2426 0000246B 8935[CE270000]      <2> 		mov [buftxtloc], esi
  2427 00002471 A2[C6270000]        <2> 		mov [endkeyrdpr], al
  2428 00002476 881D[C7270000]      <2> 		mov [modkeyrdpr], bl
  2429 0000247C 8935[C8270000]      <2> 		mov [firstesirdpr], esi
  2430 00002482 893D[D2270000]      <2> 		mov [endbufferrdpr], edi
  2431                              <2> 	rdprintb:
  2432 00002488 56                  <2> 		push esi
  2433 00002489 B001                <2> 		mov al, 1
  2434 0000248B E855030000          <2> 		call rdcharint
  2435 00002490 5E                  <2> 		pop esi
  2436 00002491 803D[26540000]E0    <2> 		cmp byte [specialkey], 0xE0
  2437 00002498 751B                <2> 		jne notspecialrdprnt
  2438 0000249A 80FC53              <2> 		cmp ah, 0x53
  2439 0000249D 0F84E8020000        <2> 		je near rdprdel
  2440 000024A3 80FC47              <2> 		cmp ah, 0x47
  2441 000024A6 0F8407010000        <2> 		je near rdprhome
  2442 000024AC 80FC4F              <2> 		cmp ah, 0x4F
  2443 000024AF 0F841D010000        <2> 		je near rdprend
  2444                              <2> 	notspecialrdprnt:
  2445 000024B5 80FC48              <2> 		cmp ah, 0x48
  2446 000024B8 0F84D5010000        <2> 		je near rdprup
  2447 000024BE 80FC50              <2> 		cmp ah, 0x50
  2448 000024C1 0F84AF010000        <2> 		je near rdprdown
  2449 000024C7 80FC4D              <2> 		cmp ah, 0x4D
  2450 000024CA 0F845E010000        <2> 		je near rdprright
  2451 000024D0 80FC4B              <2> 		cmp ah, 0x4B
  2452 000024D3 0F8416010000        <2> 		je near rdprleft
  2453 000024D9 3C08                <2> 		cmp al, 8
  2454 000024DB 0F84C5020000        <2> 		je near rdprbscheck
  2455 000024E1 3C00                <2> 		cmp al, 0
  2456 000024E3 74A3                <2> 		je rdprintb
  2457 000024E5 80FC00              <2> 		cmp ah, 0
  2458 000024E8 749E                <2> 		je rdprintb
  2459 000024EA 8806                <2> 		mov [esi], al
  2460 000024EC 46                  <2> 		inc esi
  2461                              <2> 	bscheckequal:
  2462 000024ED 8A1D[C7270000]      <2> 		mov bl, [modkeyrdpr]
  2463 000024F3 8A3D[CD270000]      <2> 		mov bh, [txtmask]
  2464 000024F9 80FF00              <2> 		cmp bh, 0
  2465 000024FC 7404                <2> 		je nomasktxt
  2466 000024FE 88F8                <2> 		mov al, bh
  2467 00002500 30FF                <2> 		xor bh, bh
  2468                              <2> 	nomasktxt:
  2469 00002502 E82F030000          <2> 		call prcharint
  2470 00002507 56                  <2> 		push esi
  2471 00002508 66A3[C4270000]      <2> 		mov [axcache], ax
  2472 0000250E 8A25[C6270000]      <2> 		mov ah, [endkeyrdpr]
  2473 00002514 38E0                <2> 		cmp al, ah
  2474 00002516 7429                <2> 		je nobackprintbuftxt2
  2475 00002518 BE[07C60000]        <2> 		mov esi, buftxt2
  2476 0000251D E82FFEFFFF          <2> 		call printquiet
  2477 00002522 B020                <2> 		mov al, " "
  2478 00002524 E81E030000          <2> 		call prcharq
  2479 00002529 B008                <2> 		mov al, 8
  2480 0000252B 81FE[07C60000]      <2> 		cmp esi, buftxt2
  2481 00002531 740E                <2> 		je nobackprintbuftxt2
  2482                              <2> 	backprintbuftxt2:
  2483 00002533 E80F030000          <2> 		call prcharq
  2484 00002538 4E                  <2> 		dec esi
  2485 00002539 81FE[07C60000]      <2> 		cmp esi, buftxt2
  2486 0000253F 77F2                <2> 		ja backprintbuftxt2
  2487                              <2> 	nobackprintbuftxt2:
  2488 00002541 3C0A                <2> 		cmp al, 10
  2489 00002543 7405                <2> 		je nonobackprint
  2490 00002545 E8EC020000          <2> 		call prcharint
  2491                              <2> 	nonobackprint:
  2492 0000254A 5E                  <2> 		pop esi
  2493 0000254B 3B35[D2270000]      <2> 		cmp esi, [endbufferrdpr]
  2494 00002551 0F8319000000        <2> 		jae near donerdprinc
  2495 00002557 66A1[C4270000]      <2> 		mov ax, [axcache]
  2496 0000255D 8A25[C6270000]      <2> 		mov ah, [endkeyrdpr]
  2497 00002563 38E0                <2> 		cmp al, ah
  2498 00002565 0F851DFFFFFF        <2> 		jne rdprintb
  2499 0000256B E901000000          <2> 		jmp donerdprint
  2500                              <2> 	donerdprinc:
  2501 00002570 46                  <2> 		inc esi
  2502                              <2> 	donerdprint:
  2503 00002571 4E                  <2> 		dec esi
  2504 00002572 BF[07C60000]        <2> 		mov edi, buftxt2
  2505                              <2> 	copylaterstuff:
  2506 00002577 8A07                <2> 		mov al, [edi]
  2507 00002579 3C00                <2> 		cmp al, 0
  2508 0000257B 7406                <2> 		je nocopylaterstuff
  2509 0000257D 8806                <2> 		mov [esi], al
  2510 0000257F 47                  <2> 		inc edi
  2511 00002580 46                  <2> 		inc esi
  2512 00002581 EBF4                <2> 		jmp copylaterstuff
  2513                              <2> 	nocopylaterstuff:
  2514 00002583 C60600              <2> 		mov byte [esi], 0
  2515 00002586 E80B000000          <2> 		call clearbuftxt2
  2516 0000258B 89F1                <2> 		mov ecx, esi
  2517 0000258D 8B3D[C8270000]      <2> 		mov edi, [firstesirdpr]
  2518 00002593 29F9                <2> 		sub ecx, edi
  2519 00002595 C3                  <2> 		ret
  2520                              <2> 	
  2521                              <2> 	clearbuftxt2:
  2522 00002596 30C0                <2> 		xor al, al
  2523 00002598 BF[07C60000]        <2> 		mov edi, buftxt2
  2524                              <2> 	clearbuftxt2lp:
  2525 0000259D 8807                <2> 		mov [edi], al
  2526 0000259F 47                  <2> 		inc edi
  2527 000025A0 81FF[11CA0000]      <2> 		cmp edi, buftxt
  2528 000025A6 75F5                <2> 		jne clearbuftxt2lp
  2529 000025A8 C3                  <2> 		ret
  2530                              <2> 	
  2531                              <2> 	rdprintb2:
  2532 000025A9 E8F2040000          <2> 		call termcopy
  2533 000025AE E9D5FEFFFF          <2> 		jmp rdprintb
  2534                              <2> 		
  2535                              <2> 	rdprhome:
  2536 000025B3 3B35[CE270000]      <2> 		cmp esi, [buftxtloc]
  2537 000025B9 0F84EAFFFFFF        <2> 		je near rdprintb2
  2538 000025BF BF[07C60000]        <2> 		mov edi, buftxt2
  2539 000025C4 8A07                <2> 		mov al, [edi]
  2540 000025C6 E846000000          <2> 		call shiftbuftxt2
  2541 000025CB E877020000          <2> 		call prcharq
  2542 000025D0 EBE1                <2> 		jmp rdprhome
  2543                              <2> 		
  2544                              <2> 	rdprend:
  2545 000025D2 BF[07C60000]        <2> 		mov edi, buftxt2
  2546 000025D7 8A07                <2> 		mov al, [edi]
  2547 000025D9 3C00                <2> 		cmp al, 0
  2548 000025DB 0F84C8FFFFFF        <2> 		je near rdprintb2
  2549 000025E1 8806                <2> 		mov [esi], al
  2550 000025E3 E866000000          <2> 		call shiftbuftxt2lft
  2551 000025E8 E85A020000          <2> 		call prcharq
  2552 000025ED EBE3                <2> 		jmp rdprend
  2553                              <2> 	
  2554                              <2> 	rdprleft:
  2555 000025EF 3B35[CE270000]      <2> 		cmp esi, [buftxtloc]
  2556 000025F5 0F848DFEFFFF        <2> 		je near rdprintb
  2557 000025FB BF[07C60000]        <2> 		mov edi, buftxt2
  2558 00002600 8A07                <2> 		mov al, [edi]
  2559 00002602 E80A000000          <2> 		call shiftbuftxt2
  2560 00002607 E82A020000          <2> 		call prcharint
  2561 0000260C E977FEFFFF          <2> 		jmp rdprintb
  2562                              <2> 	shiftbuftxt2:
  2563 00002611 3C00                <2> 		cmp al, 0
  2564 00002613 7409                <2> 		je noshiftbuftxt2
  2565 00002615 47                  <2> 		inc edi
  2566 00002616 8A27                <2> 		mov ah, [edi]
  2567 00002618 8807                <2> 		mov [edi], al
  2568 0000261A 88E0                <2> 		mov al, ah
  2569 0000261C EBF3                <2> 		jmp shiftbuftxt2
  2570                              <2> 	noshiftbuftxt2:
  2571 0000261E BF[07C60000]        <2> 		mov edi, buftxt2
  2572 00002623 4E                  <2> 		dec esi
  2573 00002624 8A06                <2> 		mov al, [esi]
  2574 00002626 8807                <2> 		mov [edi], al
  2575 00002628 C60600              <2> 		mov byte [esi], 0
  2576 0000262B B008                <2> 		mov al, 8
  2577 0000262D C3                  <2> 		ret
  2578                              <2> 		
  2579                              <2> 	rdprright:
  2580 0000262E BF[07C60000]        <2> 		mov edi, buftxt2
  2581 00002633 8A07                <2> 		mov al, [edi]
  2582 00002635 3C00                <2> 		cmp al, 0
  2583 00002637 0F844BFEFFFF        <2> 		je near rdprintb
  2584 0000263D 8806                <2> 		mov [esi], al
  2585 0000263F E80A000000          <2> 		call shiftbuftxt2lft
  2586 00002644 E8ED010000          <2> 		call prcharint
  2587 00002649 E93AFEFFFF          <2> 		jmp rdprintb
  2588                              <2> 	shiftbuftxt2lft:
  2589 0000264E 3C00                <2> 		cmp al, 0
  2590 00002650 7408                <2> 		je noshiftbuftxt2lft
  2591 00002652 47                  <2> 		inc edi
  2592 00002653 8A07                <2> 		mov al, [edi]
  2593 00002655 8847FF              <2> 		mov [edi - 1], al
  2594 00002658 EBF4                <2> 		jmp shiftbuftxt2lft
  2595                              <2> 	noshiftbuftxt2lft:
  2596 0000265A 8A06                <2> 		mov al, [esi]
  2597 0000265C 46                  <2> 		inc esi
  2598 0000265D 8A1D[C7270000]      <2> 		mov bl, [modkeyrdpr]
  2599 00002663 C3                  <2> 		ret
  2600                              <2> 		
  2601                              <2> 	rdprdownbck:
  2602 00002664 FECC                <2> 		dec ah
  2603 00002666 8825[CC270000]      <2> 		mov [commandedit], ah
  2604 0000266C E83A000000          <2> 		call rdprbckspc
  2605 00002671 E912FEFFFF          <2> 		jmp rdprintb
  2606                              <2> 	
  2607                              <2> 	rdprdown:
  2608 00002676 8A25[CC270000]      <2> 		mov ah, [commandedit]
  2609 0000267C 80FC01              <2> 		cmp ah, 1
  2610 0000267F 0F8603FEFFFF        <2> 		jbe near rdprintb
  2611 00002685 80FC02              <2> 		cmp ah, 2
  2612 00002688 74DA                <2> 		je rdprdownbck
  2613 0000268A 80EC02              <2> 		sub ah, 2
  2614 0000268D 8825[CC270000]      <2> 		mov [commandedit], ah
  2615                              <2> 		
  2616                              <2> 	rdprup:
  2617 00002693 30C0                <2> 		xor al, al
  2618 00002695 3805[CC270000]      <2> 		cmp [commandedit], al
  2619 0000269B 0F84E7FDFFFF        <2> 		je near rdprintb
  2620 000026A1 E805000000          <2> 		call rdprbckspc
  2621 000026A6 E941000000          <2> 		jmp getcurrentcommandstr
  2622                              <2> 	rdprbckspc:
  2623 000026AB 3B35[CE270000]      <2> 		cmp esi, [buftxtloc]
  2624 000026B1 742B                <2> 		je nordprupbck
  2625                              <2> 	rdprupbckspclp:
  2626 000026B3 B008                <2> 		mov al, 8
  2627 000026B5 8A1D[C7270000]      <2> 		mov bl, [modkeyrdpr]
  2628 000026BB E887010000          <2> 		call prcharq
  2629 000026C0 B020                <2> 		mov al, " "
  2630 000026C2 E880010000          <2> 		call prcharq
  2631 000026C7 B008                <2> 		mov al, 8
  2632 000026C9 E879010000          <2> 		call prcharq
  2633 000026CE 4E                  <2> 		dec esi
  2634 000026CF 3B35[CE270000]      <2> 		cmp esi, [buftxtloc]
  2635 000026D5 7402                <2> 		je nordprupbck2
  2636 000026D7 EBDA                <2> 		jmp rdprupbckspclp
  2637                              <2> 	nordprupbck2:
  2638 000026D9 E8C2030000          <2> 		call termcopy
  2639                              <2> 	nordprupbck:
  2640 000026DE 8B3D[AA700100]      <2> 		mov edi, [currentcommandpos]
  2641 000026E4 81C7[AE700100]      <2> 		add edi, commandbuf
  2642 000026EA 4F                  <2> 		dec edi
  2643 000026EB C3                  <2> 		ret
  2644                              <2> 	getcurrentcommandstr:
  2645 000026EC 8A25[CC270000]      <2> 		mov ah, [commandedit]
  2646 000026F2 FE05[CC270000]      <2> 		inc byte [commandedit]
  2647                              <2> 	getccmdlp:
  2648 000026F8 4F                  <2> 		dec edi
  2649 000026F9 8A07                <2> 		mov al, [edi]
  2650 000026FB 81FF[AE700100]      <2> 		cmp edi, commandbuf
  2651 00002701 7231                <2> 		jb getcmdresetcommandbuf
  2652 00002703 81EF[AE700100]      <2> 		sub edi, commandbuf
  2653 00002709 3B3D[AA700100]      <2> 		cmp edi, [currentcommandpos]
  2654 0000270F 0F8473FDFFFF        <2> 		je near rdprintb
  2655 00002715 81C7[AE700100]      <2> 		add edi, commandbuf
  2656 0000271B 3C00                <2> 		cmp al, 0
  2657 0000271D 75D9                <2> 		jne getccmdlp
  2658 0000271F FECC                <2> 		dec ah
  2659 00002721 80FC00              <2> 		cmp ah, 0
  2660 00002724 77D2                <2> 		ja getccmdlp
  2661 00002726 47                  <2> 		inc edi
  2662 00002727 81FF[AE800100]      <2> 		cmp edi, commandbufend
  2663 0000272D 770D                <2> 		ja fixcmdbufb4morerdpr
  2664 0000272F E915000000          <2> 		jmp morerdprup
  2665                              <2> 	getcmdresetcommandbuf:
  2666 00002734 BF[AE800100]        <2> 		mov edi, commandbufend
  2667 00002739 47                  <2> 		inc edi
  2668 0000273A EBBC                <2> 		jmp getccmdlp
  2669                              <2> 	fixcmdbufb4morerdpr:
  2670 0000273C 4F                  <2> 		dec edi
  2671 0000273D 81EF[AE800100]      <2> 		sub edi, commandbufend
  2672 00002743 81C7[AE700100]      <2> 		add edi, commandbuf
  2673                              <2> 	morerdprup:
  2674 00002749 8A07                <2> 		mov al, [edi]
  2675 0000274B 47                  <2> 		inc edi
  2676 0000274C 81EF[AE700100]      <2> 		sub edi, commandbuf
  2677 00002752 3C00                <2> 		cmp al, 0
  2678 00002754 0F844FFEFFFF        <2> 		je near rdprintb2
  2679 0000275A 3B3D[AA700100]      <2> 		cmp edi, [currentcommandpos]
  2680 00002760 0F8343FEFFFF        <2> 		jae near rdprintb2
  2681 00002766 81C7[AE700100]      <2> 		add edi, commandbuf
  2682 0000276C 8806                <2> 		mov [esi], al
  2683 0000276E 46                  <2> 		inc esi
  2684 0000276F 57                  <2> 		push edi
  2685 00002770 8A1D[C7270000]      <2> 		mov bl, [modkeyrdpr]
  2686 00002776 E8CC000000          <2> 		call prcharq
  2687 0000277B 5F                  <2> 		pop edi
  2688 0000277C 81FF[AE800100]      <2> 		cmp edi, commandbufend
  2689 00002782 76C5                <2> 		jbe morerdprup
  2690 00002784 BF[AE700100]        <2> 		mov edi, commandbuf
  2691 00002789 EBBE                <2> 		jmp morerdprup
  2692                              <2> 		
  2693                              <2> 	rdprdel:
  2694 0000278B BF[07C60000]        <2> 		mov edi, buftxt2
  2695 00002790 8A07                <2> 		mov al, [edi]
  2696 00002792 3C00                <2> 		cmp al, 0
  2697 00002794 0F84EEFCFFFF        <2> 		je near rdprintb
  2698 0000279A 8806                <2> 		mov [esi], al
  2699 0000279C E8ADFEFFFF          <2> 		call shiftbuftxt2lft
  2700 000027A1 E8A1000000          <2> 		call prcharq
  2701                              <2> 	rdprbscheck:
  2702 000027A6 3B35[C8270000]      <2> 		cmp esi, [firstesirdpr]
  2703 000027AC 7705                <2> 		ja goodbscheck
  2704 000027AE E9D5FCFFFF          <2> 		jmp rdprintb
  2705                              <2> 	goodbscheck:
  2706 000027B3 4E                  <2> 		dec esi
  2707 000027B4 C60600              <2> 		mov byte [esi], 0
  2708 000027B7 8A1D[C7270000]      <2> 		mov bl, [modkeyrdpr]
  2709 000027BD B008                <2> 		mov al, 8
  2710 000027BF E929FDFFFF          <2> 		jmp bscheckequal
  2711                              <2> 		
  2712 000027C4 0000                <2> axcache dw 0
  2713 000027C6 00                  <2> endkeyrdpr db 0
  2714 000027C7 00                  <2> modkeyrdpr db 0
  2715 000027C8 00000000            <2> firstesirdpr dd 0
  2716 000027CC 00                  <2> commandedit db 0
  2717 000027CD 00                  <2> txtmask db 0
  2718 000027CE 00000000            <2> buftxtloc dd 0
  2719 000027D2 00000000            <2> endbufferrdpr dd 0
  2720 000027D6 082000              <2> backcursor db 8," ",0
  2721                              <1> intx5:
  2722                              <1> 	%include 'source/interrupts/5-readchar.asm'
  2723 000027D9 E807000000          <2> 	call rdcharint
  2724 000027DE E9F7DEFFFF          <2> 	jmp timerinterrupt
  2725                              <2> 	
  2726                              <2> getchar:
  2727 000027E3 30C0                <2> 	xor al, al
  2728                              <2> 	rdcharint:		;;get char, if al is 0, wait for key
  2729 000027E5 C605[2B280000]01    <2> 		mov byte [trans], 1
  2730 000027EC 3C00                <2> 		cmp al, 0
  2731 000027EE 7507                <2> 		jne transcheck
  2732 000027F0 C605[2B280000]00    <2> 		mov byte [trans], 0
  2733                              <2> 	transcheck:
  2734 000027F7 E84A2C0000          <2> 		call getkey
  2735 000027FC 8A3D[2B280000]      <2> 		mov bh, [trans]
  2736 00002802 66A1[29280000]      <2> 		mov ax, [lastkey]
  2737 00002808 80FC1C              <2> 		cmp ah, 1Ch
  2738 0000280B 7419                <2> 		je rdenter
  2739 0000280D 803D[26540000]E0    <2> 		cmp byte [specialkey], 0xE0
  2740 00002814 7504                <2> 		jne nospecialtrans
  2741 00002816 88C3                <2> 		mov bl, al
  2742 00002818 30C0                <2> 		xor al, al
  2743                              <2> 	nospecialtrans:
  2744 0000281A 08C7                <2> 		or bh, al
  2745 0000281C 80FF00              <2> 		cmp bh, 0
  2746 0000281F 74D6                <2> 		je transcheck
  2747 00002821 E902000000          <2> 		jmp rdend
  2748                              <2> 	rdenter:
  2749 00002826 B00A                <2> 		mov al, 10
  2750                              <2> 	rdend:
  2751 00002828 C3                  <2> 		ret
  2752                              <2> 		
  2753 00002829 0000                <2> lastkey db 0,0
  2754 0000282B 00                  <2> trans db 0
  2755                              <1> intx6:
  2756                              <1> 	%include 'source/interrupts/6-prntchar.asm'
  2757 0000282C E805000000          <2> call prcharint
  2758 00002831 E9A4DEFFFF          <2> jmp timerinterrupt
  2759                              <2> 	
  2760                              <2> prcharint:	;;print char, char in al, modifier in bl, if bh = bl then termcopy will not happen, will run videobufcopy if called as is
  2761 00002836 38FB                <2> 	cmp bl, bh
  2762 00002838 740D                <2> 	je prcharq
  2763 0000283A E808000000          <2> 	call prcharq
  2764 0000283F E85C020000          <2> 	call termcopy
  2765 00002844 C3                  <2> 	ret
  2766 00002845 00                  <2> termguion db 0
  2767 00002846 00                  <2> termcopyon db 0
  2768                              <2> prcharq:
  2769 00002847 88DC                <2> 	mov ah, bl
  2770 00002849 66A3[0B2A0000]      <2> 	mov [charbuf], ax
  2771 0000284F 31DB                <2> 	xor ebx, ebx
  2772 00002851 668B1D[052A0000]    <2> 	mov bx, [videobufpos]
  2773 00002858 BF[26CE0000]        <2> 	mov edi, videobuf
  2774 0000285D 01DF                <2> 	add edi, ebx
  2775 0000285F 66A1[9E2A0000]      <2> 	mov ax, [removedvideo]
  2776 00002865 668907              <2> 	mov [edi], ax
  2777 00002868 66A1[0B2A0000]      <2> 	mov ax, [charbuf]
  2778 0000286E 31D2                <2> 	xor edx, edx
  2779 00002870 668B15[072A0000]    <2> 	mov dx, [charpos]
  2780 00002877 31C9                <2> 	xor ecx, ecx
  2781 00002879 668B0D[092A0000]    <2> 	mov cx, [charxy]
  2782 00002880 3C09                <2> 	cmp al, 9
  2783 00002882 0F8463000000        <2> 	je near prtab
  2784 00002888 3C0D                <2> 	cmp al, 13		;I am phasing this out-it is used by windows but not unix based systems
  2785 0000288A 0F848B000000        <2> 	je near prcr
  2786 00002890 3C0A                <2> 	cmp al, 10
  2787 00002892 0F84B7000000        <2> 	je near prnlcr
  2788 00002898 3C08                <2> 	cmp al, 8
  2789 0000289A 0F848F000000        <2> 	je near prbs
  2790 000028A0 3CFF                <2> 	cmp al, 255		;;null character
  2791 000028A2 0F841B000000        <2> 	je near donescr
  2792 000028A8 668907              <2> 	mov [edi], ax
  2793 000028AB 81C702000000        <2> 	add edi, 2
  2794 000028B1 FEC2                <2> 	inc dl
  2795                              <2> donecrnl:
  2796 000028B3 38CA                <2> 	cmp dl, cl
  2797 000028B5 0F83B9000000        <2> 	jae near preol
  2798                              <2> doneeol:
  2799 000028BB 38EE                <2> 	cmp dh, ch
  2800 000028BD 0F83CF000000        <2> 	jae near prscr	
  2801                              <2> donescr:
  2802 000028C3 89FB                <2> 	mov ebx, edi
  2803 000028C5 668B07              <2> 	mov ax, [edi]
  2804 000028C8 66A3[9E2A0000]      <2> 	mov [removedvideo], ax
  2805 000028CE 81EB[26CE0000]      <2> 	sub ebx, videobuf
  2806 000028D4 66891D[052A0000]    <2> 	mov [videobufpos], bx
  2807 000028DB 668915[072A0000]    <2> 	mov [charpos], dx
  2808 000028E2 66A1[0B2A0000]      <2> 	mov ax, [charbuf]
  2809 000028E8 88E3                <2> 	mov bl, ah
  2810 000028EA C3                  <2> 	ret
  2811                              <2> 	
  2812                              <2> 	prtab:
  2813 000028EB 31DB                <2> 		xor ebx, ebx
  2814 000028ED 668B1D[032A0000]    <2> 		mov bx, [linebeginpos]
  2815 000028F4 81EF[26CE0000]      <2> 		sub edi, videobuf
  2816 000028FA 29DF                <2> 		sub edi, ebx
  2817 000028FC C1EF04              <2> 		shr edi, 4
  2818 000028FF C1E704              <2> 		shl edi, 4
  2819 00002902 81C710000000        <2> 		add edi, 16
  2820 00002908 C0EA03              <2> 		shr dl, 3
  2821 0000290B C0E203              <2> 		shl dl, 3
  2822 0000290E 80C208              <2> 		add dl, 8
  2823 00002911 81C7[26CE0000]      <2> 		add edi, videobuf
  2824 00002917 01DF                <2> 		add edi, ebx
  2825 00002919 EB98                <2> 		jmp donecrnl
  2826                              <2> 	
  2827                              <2> 	prcr:
  2828 0000291B 30D2                <2> 		xor dl, dl
  2829 0000291D 31DB                <2> 		xor ebx, ebx
  2830 0000291F BF[26CE0000]        <2> 		mov edi, videobuf
  2831 00002924 668B1D[032A0000]    <2> 		mov bx, [linebeginpos]
  2832 0000292B 01DF                <2> 		add edi, ebx
  2833 0000292D EB84                <2> 		jmp donecrnl
  2834                              <2> 			
  2835                              <2> 	prbs:
  2836 0000292F 80FA00              <2> 		cmp dl, 0
  2837 00002932 7410                <2> 		je prbackline
  2838                              <2> 	prnobmr:
  2839 00002934 FECA                <2> 		dec dl
  2840 00002936 6631C0              <2> 		xor ax, ax
  2841 00002939 81EF02000000        <2> 		sub edi, 2
  2842 0000293F E96FFFFFFF          <2> 		jmp donecrnl
  2843                              <2> 	prbackline:
  2844 00002944 88CA                <2> 		mov dl, cl
  2845 00002946 80FE00              <2> 		cmp dh, 0
  2846 00002949 74E9                <2> 		je prnobmr
  2847 0000294B FECE                <2> 		dec dh
  2848 0000294D EBE5                <2> 		jmp prnobmr
  2849                              <2> 		
  2850                              <2> 	prnlcr:
  2851 0000294F FEC6                <2> 		inc dh
  2852 00002951 31DB                <2> 		xor ebx, ebx
  2853 00002953 30D2                <2> 		xor dl, dl
  2854 00002955 88CB                <2> 		mov bl, cl
  2855 00002957 66D1E3              <2> 		shl bx, 1
  2856 0000295A BF[26CE0000]        <2> 		mov edi, videobuf
  2857 0000295F 66031D[032A0000]    <2> 		add bx, [linebeginpos]
  2858 00002966 66891D[032A0000]    <2> 		mov [linebeginpos], bx
  2859 0000296D 01DF                <2> 		add edi, ebx
  2860 0000296F E93FFFFFFF          <2> 		jmp donecrnl
  2861                              <2> 		
  2862                              <2> 	preol:
  2863 00002974 30D2                <2> 		xor dl, dl
  2864 00002976 FEC6                <2> 		inc dh
  2865 00002978 31DB                <2> 		xor ebx, ebx
  2866 0000297A 88CB                <2> 		mov bl, cl
  2867 0000297C 66D1E3              <2> 		shl bx, 1
  2868 0000297F 66031D[032A0000]    <2> 		add bx, [linebeginpos]
  2869 00002986 66891D[032A0000]    <2> 		mov [linebeginpos], bx
  2870 0000298D E929FFFFFF          <2> 		jmp doneeol
  2871                              <2> 	prscr:
  2872 00002992 FECE                <2> 		dec dh
  2873 00002994 BF[26CE0000]        <2> 		mov edi, videobuf
  2874 00002999 31DB                <2> 		xor ebx, ebx
  2875 0000299B 88CB                <2> 		mov bl, cl
  2876 0000299D 66D1E3              <2> 		shl bx, 1
  2877 000029A0 01FB                <2> 		add ebx, edi
  2878                              <2> 	intscrollloop:
  2879 000029A2 668B03              <2> 		mov ax, [ebx]
  2880 000029A5 668907              <2> 		mov [edi], ax
  2881 000029A8 81C702000000        <2> 		add edi, 2
  2882 000029AE 81C302000000        <2> 		add ebx, 2
  2883 000029B4 FEC9                <2> 		dec cl
  2884 000029B6 80F900              <2> 		cmp cl, 0
  2885 000029B9 75E7                <2> 		jne intscrollloop
  2886 000029BB 8A0D[092A0000]      <2> 		mov cl, [charxy]
  2887 000029C1 FECD                <2> 		dec ch
  2888 000029C3 80FD01              <2> 		cmp ch, 1
  2889 000029C6 77DA                <2> 		ja intscrollloop
  2890 000029C8 6631C0              <2> 		xor ax, ax
  2891 000029CB 81EF[26CE0000]      <2> 		sub edi, videobuf
  2892 000029D1 66893D[032A0000]    <2> 		mov [linebeginpos], di
  2893 000029D8 81C7[26CE0000]      <2> 		add edi, videobuf
  2894 000029DE 89FB                <2> 		mov ebx, edi
  2895                              <2> 	intloopclear:
  2896 000029E0 668903              <2> 		mov [ebx], ax
  2897 000029E3 81C302000000        <2> 		add ebx, 2
  2898 000029E9 FEC9                <2> 		dec cl
  2899 000029EB 80F900              <2> 		cmp cl, 0
  2900 000029EE 75F0                <2> 		jne intloopclear
  2901 000029F0 FECD                <2> 		dec ch
  2902 000029F2 80FD00              <2> 		cmp ch, 0
  2903 000029F5 75E9                <2> 		jne intloopclear
  2904 000029F7 668B0D[092A0000]    <2> 		mov cx, [charxy]
  2905 000029FE E9C0FEFFFF          <2> 		jmp donescr
  2906                              <2> 		
  2907 00002A03 0000                <2> linebeginpos dw 0
  2908 00002A05 0000                <2> videobufpos: dw 0
  2909 00002A07 0000                <2> charpos db 0,0
  2910 00002A09 501E                <2> charxy db 80,30
  2911 00002A0B 0000                <2> charbuf dw 0
  2912                              <1> intx7:
  2913                              <1> 	%include 'source/interrupts/7-openfile.asm'
  2914 00002A0D E884480000          <2> 	call loadfile
  2915 00002A12 E9C3DCFFFF          <2> 	jmp timerinterrupt
  2916                              <1> intx9:
  2917                              <1> 	%include 'source/interrupts/9-num2str.asm'
  2918 00002A17 3C00                <2> 	cmp al, 0
  2919 00002A19 750A                <2> 	jne num2strb
  2920 00002A1B E8F0090000          <2> 	call showdec
  2921 00002A20 E9B5DCFFFF          <2> 	jmp timerinterrupt
  2922                              <2> num2strb:
  2923 00002A25 E81C090000          <2> 	call showhex
  2924 00002A2A E9ABDCFFFF          <2> 	jmp timerinterrupt
  2925                              <1> intx10:
  2926                              <1> 	%include 'source/interrupts/10-str2num.asm'
  2927 00002A2F E8BE0A0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2928 00002A34 CF                  <2> 	iret
  2929                              <2> 	
  2930                              <1> intx11:
  2931                              <1> 	%include 'source/interrupts/11-forkthread.asm'
  2932 00002A35 E8774D0000          <2> 	call threadfork
  2933 00002A3A CF                  <2> 	iret
  2934                              <1> intx12:
  2935                              <1> 	%include 'source/interrupts/12-gettime.asm'
  2936 00002A3B A1[7A060000]        <2> 	mov eax, [timeseconds]
  2937 00002A40 8B1D[7E060000]      <2> 	mov ebx, [timenanoseconds]
  2938 00002A46 89D9                <2> 	mov ecx, ebx
  2939 00002A48 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2940 00002A4B CF                  <2> 	iret
  2941                              <2> 	
  2942                              <1> intx13:
  2943                              <1> 	%include 'source/interrupts/13-settime.asm'
  2944 00002A4C A3[7A060000]        <2> 	mov [timeseconds], eax
  2945 00002A51 891D[7E060000]      <2> 	mov [timenanoseconds], ebx
  2946 00002A57 CF                  <2> 	iret
  2947                              <2> 	
  2948                              <1> intx14:
  2949                              <1> 	%include 'source/interrupts/14-runcmd.asm'
  2950 00002A58 BF[11CA0000]        <2> 	mov edi, buftxt
  2951                              <2> cpccmd:
  2952 00002A5D 8A06                <2> 	mov al, [esi]
  2953 00002A5F 8807                <2> 	mov [edi], al
  2954 00002A61 46                  <2> 	inc esi
  2955 00002A62 47                  <2> 	inc edi
  2956 00002A63 E2F8                <2> 	loop cpccmd
  2957 00002A65 E9D7050000          <2> 	jmp run
  2958                              <1> intx15:
  2959                              <1> 	%include 'source/interrupts/15-proginfo.asm'
  2960 00002A6A BB[07B60000]        <2> 	mov ebx, variables
  2961 00002A6F 8B35[1F310000]      <2> 	mov esi, [currentcommandloc]
  2962 00002A75 89F7                <2> 	mov edi, esi
  2963 00002A77 31C9                <2> 	xor ecx, ecx
  2964                              <2> getcommandzeroes:
  2965 00002A79 8A07                <2> 	mov al, [edi]
  2966 00002A7B 47                  <2> 	inc edi
  2967 00002A7C 3C3B                <2> 	cmp al, ';'
  2968 00002A7E 740B                <2> 	je nomorezeroes
  2969 00002A80 3C00                <2> 	cmp al, 0
  2970 00002A82 7407                <2> 	je nomorezeroes
  2971 00002A84 3C20                <2> 	cmp al, ' '
  2972 00002A86 75F1                <2> 	jne getcommandzeroes
  2973 00002A88 41                  <2> 	inc ecx
  2974 00002A89 EBEE                <2> 	jmp getcommandzeroes
  2975                              <2> nomorezeroes:
  2976 00002A8B 41                  <2> 	inc ecx
  2977 00002A8C 4F                  <2> 	dec edi
  2978 00002A8D 8B1D[93B50000]      <2> 	mov ebx, [uid]
  2979 00002A93 8B15[97790000]      <2> 	mov edx, [currentthread]
  2980 00002A99 CF                  <2> 	iret
  2981                              <2> 	
  2982                              <1> 		
  2983 00002A9A 00000000            <1> 	termcursorpos dd 0
  2984 00002A9E 0000                <1> 	removedvideo dw 0
  2985                              <1> termcopy:	
  2986 00002AA0 60                  <1> 	pusha
  2987 00002AA1 BF[26CE0000]        <1> 	mov edi, videobuf
  2988 00002AA6 31DB                <1> 	xor ebx, ebx
  2989 00002AA8 668B1D[052A0000]    <1> 	mov bx, [videobufpos]
  2990 00002AAF 01DF                <1> 	add edi, ebx
  2991 00002AB1 893D[9A2A0000]      <1> 	mov [termcursorpos], edi
  2992 00002AB7 E8CB000000          <1> 	call switchtermcursor
  2993 00002ABC C605[60590000]00    <1> 	mov byte [mouseselecton], 0
  2994 00002AC3 C605[46280000]01    <1> 	mov byte [termcopyon], 1
  2995 00002ACA 803D[1D8D0000]00    <1> 	cmp byte [guion], 0
  2996 00002AD1 0F8412000000        <1> 	je near nowincopy
  2997 00002AD7 803D[45280000]01    <1> 	cmp byte [termguion], 1
  2998 00002ADE 0F84953A0000        <1> 	je near windowvideocopy
  2999 00002AE4 E997000000          <1> 	jmp nocopytermatall
  3000                              <1> nowincopy:
  3001 00002AE9 BE00000A00          <1> 	mov esi, 0xA0000
  3002 00002AEE A1[67060000]        <1> 	mov eax, [basecache]
  3003 00002AF3 C1E004              <1> 	shl eax, 4
  3004 00002AF6 29C6                <1> 	sub esi, eax
  3005 00002AF8 BF[26CE0000]        <1> 	mov edi, videobuf
  3006 00002AFD 31C9                <1> 	xor ecx, ecx
  3007 00002AFF 668B0D[092A0000]    <1> 	mov cx, [charxy]
  3008                              <1> nowincopy2:
  3009 00002B06 668B07              <1> 	mov ax, [edi]
  3010 00002B09 81C740510000        <1> 	add edi, (videobuf2 - videobuf)
  3011 00002B0F 668B1F              <1> 	mov bx, [edi]
  3012 00002B12 668907              <1> 	mov [edi], ax
  3013 00002B15 81EF40510000        <1> 	sub edi, (videobuf2 - videobuf)
  3014 00002B1B 47                  <1> 	inc edi
  3015 00002B1C 6639D8              <1> 	cmp ax, bx
  3016 00002B1F 743E                <1> 	je nopresentwinfont
  3017 00002B21 4F                  <1> 	dec edi
  3018 00002B22 BB[0B7A0000]        <1> 	mov ebx, fonts
  3019 00002B27 31C0                <1> 	xor eax, eax
  3020 00002B29 8A07                <1> 	mov al, [edi]
  3021 00002B2B C1E004              <1> 	shl eax, 4
  3022 00002B2E 01C3                <1> 	add ebx, eax
  3023 00002B30 47                  <1> 	inc edi
  3024 00002B31 8A27                <1> 	mov ah, [edi]
  3025 00002B33 31D2                <1> 	xor edx, edx
  3026 00002B35 8A15[092A0000]      <1> 	mov dl, [charxy]
  3027 00002B3B C1C110              <1> 	rol ecx, 16
  3028 00002B3E B110                <1> 	mov cl, 16
  3029                              <1> nowinfont:
  3030 00002B40 8A03                <1> 	mov al, [ebx]
  3031 00002B42 D0C8                <1> 	ror al, 1
  3032 00002B44 80FC07              <1> 	cmp ah, 7
  3033 00002B47 7602                <1> 	jbe notnotfont
  3034 00002B49 F6D0                <1> 	not al
  3035                              <1> notnotfont:
  3036 00002B4B 8806                <1> 	mov [esi], al
  3037 00002B4D 01D6                <1> 	add esi, edx
  3038 00002B4F 43                  <1> 	inc ebx
  3039 00002B50 FEC9                <1> 	dec cl
  3040 00002B52 80F900              <1> 	cmp cl, 0
  3041 00002B55 75E9                <1> 	jne nowinfont
  3042 00002B57 C1E204              <1> 	shl edx, 4
  3043 00002B5A 29D6                <1> 	sub esi, edx
  3044 00002B5C C1C110              <1> 	rol ecx, 16
  3045                              <1> nopresentwinfont:
  3046 00002B5F 47                  <1> 	inc edi
  3047 00002B60 46                  <1> 	inc esi
  3048 00002B61 FEC9                <1> 	dec cl
  3049 00002B63 80F900              <1> 	cmp cl, 0
  3050 00002B66 759E                <1> 	jne nowincopy2
  3051 00002B68 8A0D[092A0000]      <1> 	mov cl, [charxy]
  3052 00002B6E 31D2                <1> 	xor edx, edx
  3053 00002B70 88CA                <1> 	mov dl, cl
  3054 00002B72 29D6                <1> 	sub esi, edx
  3055 00002B74 C1E204              <1> 	shl edx, 4
  3056 00002B77 01D6                <1> 	add esi, edx
  3057 00002B79 FECD                <1> 	dec ch
  3058 00002B7B 80FD00              <1> 	cmp ch, 0
  3059 00002B7E 7586                <1> 	jne nowincopy2
  3060                              <1> nocopytermatall:
  3061 00002B80 E802000000          <1> 	call switchtermcursor
  3062 00002B85 61                  <1> 	popa
  3063 00002B86 C3                  <1> 	ret
  3064                              <1> 	
  3065                              <1> switchtermcursor:
  3066 00002B87 8B3D[9A2A0000]      <1> 	mov edi, [termcursorpos]
  3067 00002B8D 8A4701              <1> 	mov al, [edi + 1]
  3068 00002B90 8A27                <1> 	mov ah, [edi]
  3069 00002B92 3C07                <1> 	cmp al, 7
  3070 00002B94 7607                <1> 	jbe movlargecursorterm
  3071 00002B96 B007                <1> 	mov al, 7
  3072 00002B98 E902000000          <1> 	jmp movedcursorterm
  3073                              <1> movlargecursorterm:
  3074 00002B9D B0F0                <1> 	mov al, 0xF0
  3075                              <1> movedcursorterm:
  3076 00002B9F 884701              <1> 	mov [edi + 1], al
  3077 00002BA2 80FC00              <1> 	cmp ah, 0
  3078 00002BA5 7504                <1> 	jne fixednocursorterm
  3079 00002BA7 B420                <1> 	mov ah, " "
  3080 00002BA9 8827                <1> 	mov [edi], ah
  3081                              <1> fixednocursorterm:
  3082 00002BAB C3                  <1> 	ret
  3083                                      %include 'source/dosints.asm'
  3084                              <1> int20h:
  3085 00002BAC 66B8004C            <1> mov ax, 0x4C00
  3086                              <1> int21h:
  3087                              <1> dostosolleros:
  3088 00002BB0 6650                <1> 	push ax
  3089 00002BB2 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3090 00002BB6 8ED8                <1> 	mov ds, ax
  3091 00002BB8 8EC0                <1> 	mov es, ax
  3092 00002BBA 8EE0                <1> 	mov fs, ax
  3093 00002BBC 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3094 00002BC0 8EE8                <1> 	mov gs, ax
  3095 00002BC2 6658                <1> 	pop ax
  3096 00002BC4 9C                  <1> 	pushf
  3097 00002BC5 60                  <1> 	pusha
  3098 00002BC6 80FC01              <1> 	cmp ah, 1
  3099 00002BC9 0F8449000000        <1> 	je near dosgchar
  3100 00002BCF 80FC02              <1> 	cmp ah, 2
  3101 00002BD2 0F8447000000        <1> 	je near doswchar
  3102 00002BD8 80FC09              <1> 	cmp ah, 9
  3103 00002BDB 0F8449000000        <1> 	je near dosprintstr
  3104 00002BE1 80FC0A              <1> 	cmp ah, 0xA
  3105 00002BE4 0F8456000000        <1> 	je near dosgetstr
  3106 00002BEA 80FC2B              <1> 	cmp ah, 0x2B
  3107 00002BED 0F8492000000        <1> 	je near dosgetdate
  3108 00002BF3 80FC2C              <1> 	cmp ah, 0x2C
  3109 00002BF6 0F84AC000000        <1> 	je near dosgettime
  3110 00002BFC 80FC4C              <1> 	cmp ah, 0x4C
  3111 00002BFF 0F84C1000000        <1> 	je near dosexit
  3112                              <1> backtodos:
  3113 00002C05 61                  <1> 	popa
  3114 00002C06 9D                  <1> 	popf
  3115 00002C07 6650                <1> 	push ax
  3116 00002C09 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3117 00002C0D 8ED8                <1> 	mov ds, ax
  3118 00002C0F 8EC0                <1> 	mov es, ax
  3119 00002C11 8EE0                <1> 	mov fs, ax
  3120 00002C13 8EE8                <1> 	mov gs, ax
  3121 00002C15 6658                <1> 	pop ax
  3122 00002C17 CF                  <1> 	iret
  3123                              <1> 
  3124                              <1> dosgchar:
  3125 00002C18 E8C6FBFFFF          <1> 	call getchar
  3126 00002C1D EBE6                <1> 	jmp backtodos
  3127                              <1> 	
  3128                              <1> doswchar:
  3129 00002C1F 88D0                <1> 	mov al, dl
  3130 00002C21 B307                <1> 	mov bl, 7
  3131 00002C23 E80EFCFFFF          <1> 	call prcharint
  3132 00002C28 EBDB                <1> 	jmp backtodos
  3133                              <1> 	
  3134                              <1> dosprintstr:
  3135 00002C2A 31F6                <1> 	xor esi, esi
  3136 00002C2C 6689D6              <1> 	mov si, dx
  3137 00002C2F 81C600004000        <1> 	add esi, dosprogloc
  3138 00002C35 B024                <1> 	mov al, "$"
  3139 00002C37 B307                <1> 	mov bl, 7
  3140 00002C39 E82CF7FFFF          <1> 	call printint
  3141 00002C3E EBC5                <1> 	jmp backtodos
  3142                              <1> 	
  3143                              <1> dosgetstr:
  3144 00002C40 31F6                <1> 	xor esi, esi
  3145 00002C42 6689D6              <1> 	mov si, dx
  3146 00002C45 81C600004000        <1> 	add esi, dosprogloc
  3147 00002C4B B900000000          <1> 	mov ecx, 0
  3148 00002C50 8A0E                <1> 	mov cl, [esi]
  3149 00002C52 81C603000000        <1> 	add esi, 3
  3150 00002C58 89F7                <1> 	mov edi, esi
  3151 00002C5A 8935[812C0000]      <1> 	mov [stringstart], esi
  3152 00002C60 01CF                <1> 	add edi, ecx
  3153 00002C62 B00A                <1> 	mov al, 10
  3154 00002C64 B307                <1> 	mov bl, 7
  3155 00002C66 E800F8FFFF          <1> 	call rdprint
  3156 00002C6B 89F1                <1> 	mov ecx, esi
  3157 00002C6D 2B0D[812C0000]      <1> 	sub ecx, [stringstart]
  3158 00002C73 8B35[812C0000]      <1> 	mov esi, [stringstart]
  3159 00002C79 884EFF              <1> 	mov [esi - 1], cl
  3160 00002C7C 884EFE              <1> 	mov [esi - 2], cl
  3161 00002C7F EB84                <1> 	jmp backtodos
  3162 00002C81 00000000            <1> stringstart dd 0
  3163                              <1> 
  3164                              <1> dosgetdate:
  3165 00002C85 E82E1D0000          <1> 	call time
  3166 00002C8A 8A0D[804B0000]      <1> 	mov cl, [RTCtimeYear]
  3167 00002C90 B500                <1> 	mov ch, 0
  3168 00002C92 6681C1D007          <1> 	add cx, 2000
  3169 00002C97 8A35[7F4B0000]      <1> 	mov dh, [RTCtimeMonth]
  3170 00002C9D 8A15[7E4B0000]      <1> 	mov dl, [RTCtimeDay]
  3171 00002CA3 E95DFFFFFF          <1> 	jmp backtodos
  3172                              <1> 
  3173                              <1> dosgettime:
  3174 00002CA8 E80B1D0000          <1> 	call time
  3175 00002CAD 8A2D[7D4B0000]      <1> 	mov ch, [RTCtimeHour]
  3176 00002CB3 8A0D[7C4B0000]      <1> 	mov cl, [RTCtimeMinute]
  3177 00002CB9 8A35[7B4B0000]      <1> 	mov dh, [RTCtimeSecond]
  3178 00002CBF B200                <1> 	mov dl, 0
  3179 00002CC1 E93FFFFFFF          <1> 	jmp backtodos
  3180                              <1> 	
  3181                              <1> dosexit:
  3182 00002CC6 61                  <1> 	popa
  3183 00002CC7 3C00                <1> 	cmp al, 0
  3184 00002CC9 0F851CF6FFFF        <1> 	jne near warnexitstatus
  3185 00002CCF E9A1010000          <1> 	jmp nwcmd	;go back to the dos supervisor program
  3186                                      %include 'source/solleros.asm'
  3187                              <1> 	;SOLLEROS.ASM
  3188                              <1> os:
  3189                              <1> setdefenv:
  3190 00002CD4 E80EF7FFFF          <1> 	call clear
  3191                              <1> bootfilecheck:
  3192 00002CD9 803D[97B50000]01    <1> 	cmp byte [ranboot], 1
  3193 00002CE0 0F8427000000        <1> 	je near nobootfile
  3194 00002CE6 C605[97B50000]01    <1> 	mov byte [ranboot], 1
  3195 00002CED BF[A0790000]        <1> 	mov edi, bootfilename
  3196 00002CF2 BE00004000          <1> 	mov esi, 0x400000
  3197 00002CF7 E89A450000          <1> 	call loadfile
  3198 00002CFC 81FA94010000        <1> 	cmp edx, 404
  3199 00002D02 0F8405000000        <1> 	je near nobootfile
  3200 00002D08 E8790D0000          <1> 	call progbatchfound
  3201                              <1> nobootfile:	
  3202                              <1> 
  3203 00002D0D BE[00000000]        <1> 	mov esi, signature
  3204                              <1> .sigcopyloop:	;this prevents an odd error
  3205 00002D12 658A06              <1> 	mov al, [gs:esi]
  3206 00002D15 8806                <1> 	mov [esi], al
  3207 00002D17 46                  <1> 	inc esi
  3208 00002D18 81FE[1A000000]      <1> 	cmp esi, signatureend
  3209 00002D1E 72F2                <1> 	jb .sigcopyloop
  3210 00002D20 BE[00000000]        <1> 	mov esi, signature
  3211 00002D25 E839F6FFFF          <1> 	call print
  3212 00002D2A 8B0D[16000000]      <1> 	mov ecx, [signatureend - 4]
  3213 00002D30 E8DB060000          <1> 	call showdec
  3214 00002D35 BE[E6790000]        <1> 	mov esi, line
  3215 00002D3A E824F6FFFF          <1> 	call print
  3216 00002D3F BE[C0790000]        <1> 	mov esi, userask
  3217 00002D44 E81AF6FFFF          <1> 	call print
  3218                              <1> usercheck:
  3219 00002D49 BE[11CA0000]        <1> 	mov esi, buftxt
  3220 00002D4E BF[11CE0000]        <1> 	mov edi, buftxtend
  3221 00002D53 B00A                <1> 	mov al, 10
  3222 00002D55 E811F7FFFF          <1> 	call rdprint
  3223 00002D5A 56                  <1> 	push esi
  3224 00002D5B BE[CA790000]        <1> 	mov esi, pwdask
  3225 00002D60 E8FEF5FFFF          <1> 	call print
  3226 00002D65 5E                  <1> 	pop esi
  3227 00002D66 46                  <1> 	inc esi
  3228 00002D67 8935[4A2E0000]      <1> 	mov [esipass], esi
  3229                              <1> passcheck:
  3230 00002D6D E871FAFFFF          <1> 	call getchar
  3231 00002D72 3C0A                <1> 	cmp al, 10
  3232 00002D74 0F8436000000        <1> 	je near gotpass
  3233 00002D7A 3C08                <1> 	cmp al, 8
  3234 00002D7C 0F8410000000        <1> 	je near backpass
  3235 00002D82 8806                <1> 	mov [esi], al
  3236 00002D84 46                  <1> 	inc esi
  3237 00002D85 B02A                <1> 	mov al, '*'
  3238 00002D87 E8AAFAFFFF          <1> 	call prcharint
  3239 00002D8C EBDF                <1> 	jmp passcheck
  3240 00002D8E 08200800            <1> backcursor2 db 8," ",8,0
  3241                              <1> backpass:
  3242 00002D92 3B35[4A2E0000]      <1> 	cmp esi, [esipass]
  3243 00002D98 0F84CFFFFFFF        <1> 	je near passcheck
  3244 00002D9E 4E                  <1> 	dec esi
  3245 00002D9F C60600              <1> 	mov byte [esi], 0
  3246 00002DA2 56                  <1> 	push esi
  3247 00002DA3 BE[8E2D0000]        <1> 	mov esi, backcursor2
  3248 00002DA8 E8B6F5FFFF          <1> 	call print
  3249 00002DAD 5E                  <1> 	pop esi
  3250 00002DAE EBBD                <1> 	jmp passcheck
  3251                              <1> gotpass:
  3252 00002DB0 30C0                <1> 	xor al, al
  3253 00002DB2 31C9                <1> 	xor ecx, ecx
  3254 00002DB4 8806                <1> 	mov [esi], al
  3255 00002DB6 BB[E8790000]        <1> 	mov ebx, userlst
  3256                              <1> userfind:
  3257 00002DBB BE[11CA0000]        <1> 	mov esi, buftxt
  3258 00002DC0 8A06                <1> 	mov al, [esi]
  3259 00002DC2 3C00                <1> 	cmp al, 0
  3260 00002DC4 0F840AFFFFFF        <1> 	je near os
  3261 00002DCA 891D[4E2E0000]      <1> 	mov [usercache], ebx
  3262 00002DD0 E84E030000          <1> 	call tester
  3263 00002DD5 3C01                <1> 	cmp al, 1
  3264 00002DD7 7416                <1> 	je pwdtest
  3265 00002DD9 41                  <1> 	inc ecx
  3266                              <1> nxtuser:
  3267 00002DDA 8A03                <1> 	mov al, [ebx]
  3268 00002DDC 43                  <1> 	inc ebx
  3269 00002DDD 3C00                <1> 	cmp al, 0
  3270 00002DDF 75F9                <1> 	jne nxtuser
  3271 00002DE1 81FB[0B7A0000]      <1> 	cmp ebx, userlstend
  3272 00002DE7 0F83E7FEFFFF        <1> 	jae near os
  3273 00002DED EBCC                <1> 	jmp userfind
  3274                              <1> pwdtest:
  3275 00002DEF 46                  <1> 	inc esi
  3276 00002DF0 43                  <1> 	inc ebx
  3277 00002DF1 E82D030000          <1> 	call tester
  3278 00002DF6 3C01                <1> 	cmp al, 1
  3279 00002DF8 7402                <1> 	je pwdrgt
  3280 00002DFA EBDE                <1> 	jmp nxtuser
  3281                              <1> pwdrgt:
  3282 00002DFC D1E9                <1> 	shr ecx, 1
  3283 00002DFE 890D[93B50000]      <1> 	mov [uid], ecx
  3284 00002E04 E8DEF5FFFF          <1> 	call clear
  3285 00002E09 66B90002            <1> 	mov cx, 200h
  3286 00002E0D BE[11CA0000]        <1> 	mov esi, buftxt
  3287 00002E12 8935[1F310000]      <1> 	mov [currentcommandloc], esi
  3288 00002E18 E825000000          <1> 	call bufclr
  3289                              <1> clearolddata:
  3290 00002E1D 31C0                <1> 	xor eax, eax
  3291 00002E1F A2[98B50000]        <1> 	mov [IFON], al
  3292 00002E24 A2[99B50000]        <1> 	mov [IFTRUE], al
  3293 00002E29 A2[01B60000]        <1> 	mov [BATCHISON], al
  3294 00002E2E A3[FDB50000]        <1> 	mov [BATCHPOS], eax
  3295 00002E33 A2[02B60000]        <1> 	mov [LOOPON], al
  3296 00002E38 A3[03B60000]        <1> 	mov [LOOPPOS], eax
  3297 00002E3D E933000000          <1> 	jmp nwcmd
  3298                              <1> bufclr:	
  3299 00002E42 30C0                <1> 	xor al, al
  3300 00002E44 8806                <1> 	mov [esi], al
  3301 00002E46 46                  <1> 	inc esi
  3302 00002E47 E2F9                <1> 	loop bufclr
  3303 00002E49 C3                  <1> 	ret
  3304                              <1> 
  3305 00002E4A 00000000            <1> esipass dd 0
  3306 00002E4E [E8790000]          <1> usercache dd userlst
  3307                              <1> 	
  3308                              <1> buftxtclear:
  3309 00002E52 30C0                <1> 	xor al, al
  3310 00002E54 BE[11CA0000]        <1> 	mov esi, buftxt
  3311 00002E59 81FE[11CE0000]      <1> clearbuftxt: cmp esi, buf2
  3312 00002E5F 730E                <1> 	jae retbufclr
  3313 00002E61 8806                <1> 	mov [esi], al
  3314 00002E63 46                  <1> 	inc esi
  3315 00002E64 EBF3                <1> 	jmp clearbuftxt
  3316                              <1> 
  3317 00002E66 39DE                <1> clearitbuf: cmp esi, ebx
  3318 00002E68 7305                <1> 	jae retbufclr
  3319 00002E6A 8806                <1> 	mov [esi], al
  3320 00002E6C 46                  <1> 	inc esi
  3321 00002E6D EBF7                <1> 	jmp clearitbuf
  3322 00002E6F C3                  <1> retbufclr: ret
  3323                              <1> 
  3324 00002E70 E900000000          <1> full:	jmp nwcmd
  3325                              <1> 
  3326                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3327                              <1> nwcmd:
  3328 00002E75 FB                  <1> 	sti
  3329 00002E76 31C0                <1> 	xor eax, eax
  3330 00002E78 3905[39300000]      <1> 	cmp [nextcommandloc], eax
  3331 00002E7E 7411                <1> 	je nomultiplecommand
  3332 00002E80 8B35[39300000]      <1> 	mov esi, [nextcommandloc]
  3333 00002E86 8935[3D300000]      <1> 	mov [thiscommandloc], esi
  3334 00002E8C E9B5010000          <1> 	jmp fixvariables
  3335                              <1> nomultiplecommand:
  3336 00002E91 A3[3D300000]        <1> 	mov [thiscommandloc], eax
  3337 00002E96 3805[A8730000]      <1> 	cmp [threadson], al
  3338 00002E9C 7405                <1> 	je noclinwcmd
  3339 00002E9E A2[A8730000]        <1> 	mov [threadson], al
  3340                              <1> noclinwcmd:
  3341 00002EA3 B001                <1> 	mov al, 1
  3342 00002EA5 3805[01B60000]      <1> 	cmp [BATCHISON], al
  3343 00002EAB 7501                <1> 	jne cancel
  3344 00002EAD C3                  <1> 	ret
  3345 00002EAE 30C0                <1> cancel:	xor al, al
  3346 00002EB0 A2[98B50000]        <1> 	mov [IFON], al
  3347 00002EB5 A2[01B60000]        <1> 	mov [BATCHISON], al
  3348 00002EBA B05B                <1> 	mov al, '['
  3349 00002EBC B406                <1> 	mov ah, 6
  3350 00002EBE 66BB0700            <1> 	mov bx, 7
  3351 00002EC2 E880F9FFFF          <1> 	call prcharq
  3352 00002EC7 8B35[4E2E0000]      <1> 	mov esi, [usercache]
  3353 00002ECD E87FF4FFFF          <1> 	call printquiet
  3354 00002ED2 BE[D4790000]        <1> 	mov esi, computer
  3355 00002ED7 E875F4FFFF          <1> 	call printquiet
  3356 00002EDC BE[DE790000]        <1> 	mov esi, location
  3357 00002EE1 E86BF4FFFF          <1> 	call printquiet
  3358 00002EE6 BE[E1790000]        <1> 	mov esi, endprompt
  3359 00002EEB E873F4FFFF          <1> 	call print
  3360 00002EF0 E85DFFFFFF          <1> 	call buftxtclear
  3361 00002EF5 BE[11CA0000]        <1> 	mov esi, buftxt
  3362 00002EFA C605[CC270000]01    <1> 	mov byte [commandedit], 1
  3363 00002F01 B00A                <1> 	mov al, 10
  3364 00002F03 66BB0700            <1> 	mov bx, 7
  3365 00002F07 BF[11CE0000]        <1> 	mov edi, buftxtend
  3366 00002F0C E85AF5FFFF          <1> 	call rdprint
  3367 00002F11 C605[CC270000]00    <1> 	mov byte [commandedit], 0
  3368 00002F18 803D[11CA0000]00    <1> 	cmp byte [buftxt], 0
  3369 00002F1F 0F8450FFFFFF        <1> 	je near nwcmd
  3370 00002F25 8B35[AA700100]      <1> gotcmd:	mov esi, [currentcommandpos]
  3371 00002F2B 8935[A6700100]      <1> 	mov [lastcommandpos], esi
  3372 00002F31 BF[11CA0000]        <1> 	mov edi, buftxt
  3373 00002F36 81C6[AE700100]      <1> 	add esi, commandbuf
  3374 00002F3C 81FE[AE800100]      <1> 	cmp esi, commandbufend
  3375 00002F42 7605                <1> 	jbe copycommand
  3376 00002F44 BE[AE700100]        <1> 	mov esi, commandbuf
  3377                              <1> copycommand:
  3378 00002F49 8A07                <1> 	mov al, [edi]
  3379 00002F4B 8806                <1> 	mov [esi], al
  3380 00002F4D 47                  <1> 	inc edi
  3381 00002F4E 46                  <1> 	inc esi
  3382 00002F4F 3C00                <1> 	cmp al, 0
  3383 00002F51 740F                <1> 	je donecopy
  3384 00002F53 81FE[AE800100]      <1> 	cmp esi, commandbufend
  3385 00002F59 76EE                <1> 	jbe copycommand
  3386 00002F5B BE[AE700100]        <1> 	mov esi, commandbuf
  3387 00002F60 EBE7                <1> 	jmp copycommand
  3388                              <1> donecopy:
  3389 00002F62 81EE[AE700100]      <1> 	sub esi, commandbuf
  3390 00002F68 8935[AA700100]      <1> 	mov [currentcommandpos], esi
  3391 00002F6E E9CE000000          <1> 	jmp run
  3392                              <1> 
  3393 00002F73 E8DAFEFFFF          <1> input:	call buftxtclear
  3394 00002F78 BE[11CA0000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3395 00002F7D BF[11CE0000]        <1> 	mov edi, buftxtend
  3396 00002F82 B00A                <1> stdin:	mov al, 10
  3397 00002F84 B307                <1> 	mov bl, 7
  3398 00002F86 E8E0F4FFFF          <1> 	call rdprint
  3399 00002F8B C3                  <1> 	ret
  3400                              <1> 
  3401                              <1> replacevariable:
  3402 00002F8C 8A4601              <1> 	mov al, [esi + 1]
  3403 00002F8F C64601FF            <1> 	mov byte [esi + 1], 255
  3404 00002F93 3C24                <1> 	cmp al, "$"
  3405 00002F95 0F84AB000000        <1> 	je near fixvariables
  3406 00002F9B 884601              <1> 	mov [esi + 1], al
  3407 00002F9E 56                  <1> 	push esi
  3408 00002F9F 81EE[11CA0000]      <1> 	sub esi, buftxt
  3409 00002FA5 89F7                <1> 	mov edi, esi
  3410 00002FA7 81C6[11CA0000]      <1> 	add esi, buftxt
  3411 00002FAD 47                  <1> 	inc edi
  3412 00002FAE BB[07B60000]        <1> 	mov ebx, variables
  3413 00002FB3 E856100000          <1> 	call nxtvrech
  3414 00002FB8 89F7                <1> 	mov edi, esi
  3415 00002FBA 31DB                <1> 	xor ebx, ebx
  3416 00002FBC 4E                  <1> 	dec esi
  3417                              <1> findvarname:
  3418 00002FBD 4E                  <1> 	dec esi
  3419 00002FBE 8A06                <1> 	mov al, [esi]
  3420 00002FC0 43                  <1> 	inc ebx
  3421 00002FC1 3C04                <1> 	cmp al, 4
  3422 00002FC3 75F8                <1> 	jne findvarname
  3423 00002FC5 5E                  <1> 	pop esi
  3424                              <1> replacevarloop:
  3425 00002FC6 8A07                <1> 	mov al, [edi]
  3426 00002FC8 81FB00000000        <1> 	cmp ebx, 0
  3427 00002FCE 0F841E000000        <1> 	je near expandbuftxt
  3428 00002FD4 3C00                <1> 	cmp al, 0
  3429 00002FD6 0F8407000000        <1> 	je near compressbuftxt
  3430 00002FDC 8806                <1> 	mov [esi], al
  3431 00002FDE 4B                  <1> 	dec ebx
  3432 00002FDF 46                  <1> 	inc esi
  3433 00002FE0 47                  <1> 	inc edi
  3434 00002FE1 EBE3                <1> 	jmp replacevarloop
  3435                              <1> compressbuftxt:	
  3436 00002FE3 8A041E              <1> 	mov al, [esi + ebx]
  3437 00002FE6 8806                <1> 	mov [esi], al
  3438 00002FE8 46                  <1> 	inc esi
  3439 00002FE9 3C00                <1> 	cmp al, 0
  3440 00002FEB 75F6                <1> 	jne compressbuftxt
  3441 00002FED E954000000          <1> 	jmp fixvariables
  3442                              <1> expandbuftxt:
  3443 00002FF2 89F1                <1> 	mov ecx, esi
  3444 00002FF4 8A26                <1> 	mov ah, [esi]
  3445                              <1> expandbuftxtlp:
  3446 00002FF6 8A1E                <1> 	mov bl, [esi]
  3447 00002FF8 46                  <1> 	inc esi
  3448 00002FF9 8A3E                <1> 	mov bh, [esi]
  3449 00002FFB 8826                <1> 	mov [esi], ah
  3450 00002FFD 88FC                <1> 	mov ah, bh
  3451 00002FFF 80FB00              <1> 	cmp bl, 0
  3452 00003002 75F2                <1> 	jne expandbuftxtlp
  3453 00003004 89CE                <1> 	mov esi, ecx
  3454 00003006 8806                <1> 	mov [esi], al
  3455 00003008 47                  <1> 	inc edi
  3456 00003009 8A07                <1> 	mov al, [edi]
  3457 0000300B 3C00                <1> 	cmp al, 0
  3458 0000300D 0F8433000000        <1> 	je near fixvariables
  3459 00003013 46                  <1> 	inc esi
  3460 00003014 EBDC                <1> 	jmp expandbuftxt
  3461                              <1> multipleprogline:
  3462 00003016 30E4                <1> 	xor ah, ah
  3463 00003018 8826                <1> 	mov [esi], ah
  3464 0000301A 46                  <1> 	inc esi
  3465 0000301B 8935[39300000]      <1> 	mov [nextcommandloc], esi
  3466 00003021 E93E000000          <1> 	jmp donefixvariables
  3467                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3468 00003026 46                  <1> 	inc esi
  3469 00003027 8A06                <1> 	mov al, [esi]
  3470 00003029 C606FF              <1> 	mov byte [esi], 255
  3471 0000302C 3C23                <1> 	cmp al, '#'
  3472 0000302E 7416                <1> 	je fixvariables
  3473 00003030 4E                  <1> 	dec esi
  3474 00003031 C60600              <1> 	mov byte [esi], 0
  3475 00003034 E90D000000          <1> 	jmp fixvariables
  3476                              <1> 	
  3477 00003039 00000000            <1> nextcommandloc dd 0
  3478 0000303D 00000000            <1> thiscommandloc dd 0	
  3479                              <1> run:
  3480 00003041 BE[11CA0000]        <1> 	mov esi, buftxt
  3481                              <1> fixvariables:
  3482 00003046 46                  <1> 	inc esi
  3483 00003047 8A06                <1> 	mov al, [esi]
  3484 00003049 3C23                <1> 	cmp al, '#'	;inline comment
  3485 0000304B 74D9                <1> 	je inlinecomment
  3486 0000304D 3C24                <1> 	cmp al, '$' ;variable
  3487 0000304F 0F8437FFFFFF        <1> 	je near replacevariable
  3488 00003055 3C3B                <1> 	cmp al, ';' ;program list
  3489 00003057 74BD                <1> 	je multipleprogline
  3490 00003059 3C00                <1> 	cmp al, 0
  3491 0000305B 75E9                <1> 	jne fixvariables
  3492 0000305D 31C0                <1> 	xor eax, eax
  3493 0000305F A3[39300000]        <1> 	mov [nextcommandloc], eax
  3494                              <1> donefixvariables:
  3495 00003064 803D[0A360000]00    <1> 	cmp byte [indexdone], 0
  3496 0000306B 7505                <1> 	jne progtest
  3497 0000306D E803050000          <1> 	call indexfiles
  3498                              <1> progtest:
  3499 00003072 31C0                <1> 	xor eax, eax
  3500 00003074 BB[93B10000]        <1> 	mov ebx, fileindex
  3501 00003079 668B03              <1> prgnxt:	mov ax, [ebx]
  3502 0000307C B1FF                <1> 	mov cl, 255
  3503 0000307E B52C                <1> 	mov ch, 44
  3504 00003080 6639C8              <1> 	cmp ax, cx
  3505 00003083 740B                <1> 	je fndprg
  3506 00003085 43                  <1> 	inc ebx
  3507 00003086 81FB[93B50000]      <1> 	cmp ebx, fileindexend
  3508 0000308C 7361                <1> 	jae prgnf
  3509 0000308E EBE9                <1> 	jmp prgnxt
  3510 00003090 81C302000000        <1> fndprg: add ebx, 2
  3511 00003096 31C9                <1> 	xor ecx, ecx
  3512 00003098 BE[11CA0000]        <1> 	mov esi, buftxt
  3513 0000309D 390D[3D300000]      <1> 	cmp [thiscommandloc], ecx
  3514 000030A3 7406                <1> 	je noprgtstmultiple
  3515 000030A5 8B35[3D300000]      <1> 	mov esi, [thiscommandloc]
  3516                              <1> noprgtstmultiple:
  3517 000030AB E8AE000000          <1> 	call cndtest
  3518 000030B0 3C01                <1> 	cmp al, 1
  3519 000030B2 7302                <1> 	jae prggood
  3520 000030B4 EBC3                <1> 	jmp prgnxt
  3521 000030B6 81FB[93B50000]      <1> prggood: cmp ebx, fileindexend
  3522 000030BC 735C                <1> 	jae prgdn
  3523 000030BE 31C0                <1> 	xor eax, eax
  3524 000030C0 BE[11CA0000]        <1> 	mov esi, buftxt
  3525 000030C5 3905[3D300000]      <1> 	cmp [thiscommandloc], eax
  3526 000030CB 7406                <1> 	je noprggoodmul
  3527 000030CD 8B35[3D300000]      <1> 	mov esi, [thiscommandloc]
  3528                              <1> noprggoodmul:
  3529 000030D3 8935[1F310000]      <1> 	mov [currentcommandloc], esi
  3530 000030D9 81C303000000        <1> 	add ebx, 3
  3531 000030DF 8B3B                <1> 	mov edi, [ebx]
  3532 000030E1 C605[A8730000]02    <1> 	mov byte [threadson], 2
  3533 000030E8 FFD7                <1> 	call edi
  3534 000030EA E986FDFFFF          <1> 	jmp nwcmd
  3535                              <1> prgnf:	
  3536 000030EF 8B35[1F310000]      <1> 	mov esi, [currentcommandloc]
  3537 000030F5 8A06                <1> 	mov al, [esi]
  3538 000030F7 3C00                <1> 	cmp al, 0
  3539 000030F9 741F                <1> 	je prgdn
  3540 000030FB BE[A8790000]        <1> 	mov esi, notfound1
  3541 00003100 E85EF2FFFF          <1> 	call print
  3542 00003105 8B35[1F310000]      <1> 	mov esi, [currentcommandloc]
  3543 0000310B E853F2FFFF          <1> 	call print
  3544 00003110 BE[B2790000]        <1> 	mov esi, notfound2
  3545 00003115 E849F2FFFF          <1> 	call print
  3546 0000311A E956FDFFFF          <1> prgdn:	jmp nwcmd
  3547                              <1> 
  3548 0000311F 00000000            <1> currentcommandloc dd 0
  3549                              <1> 
  3550                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3551 00003123 6631C0              <1> 	xor ax, ax
  3552 00003126 8A06                <1> retest:	mov al, [esi]
  3553 00003128 8A23                <1> 	mov ah, [ebx]
  3554 0000312A 3C00                <1> 	cmp al, 0
  3555 0000312C 7408                <1> 	je testtrue
  3556 0000312E 38E0                <1> 	cmp al, ah
  3557 00003130 750C                <1> 	jne testfalse
  3558 00003132 43                  <1> 	inc ebx
  3559 00003133 46                  <1> 	inc esi
  3560 00003134 EBF0                <1> 	jmp retest
  3561                              <1> testtrue:
  3562 00003136 80FC00              <1> 	cmp ah, 0
  3563 00003139 7503                <1> 	jne testfalse
  3564 0000313B B001                <1> 	mov al, 1
  3565 0000313D C3                  <1> 	ret
  3566                              <1> testfalse:
  3567 0000313E 30C0                <1> 	xor al, al
  3568 00003140 C3                  <1> 	ret
  3569                              <1> 
  3570                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3571 00003141 30C0                <1> 	xor al, al
  3572                              <1> opretest:
  3573 00003143 8A06                <1> 	mov al, [esi]
  3574 00003145 8A23                <1> 	mov ah, [ebx]
  3575 00003147 38E0                <1> 	cmp al, ah
  3576 00003149 7510                <1> 	jne optestfalse
  3577 0000314B 80FC00              <1> 	cmp ah, 0
  3578 0000314E 7404                <1> 	je optesttrue
  3579 00003150 43                  <1> 	inc ebx
  3580 00003151 46                  <1> 	inc esi
  3581 00003152 EBEF                <1> 	jmp opretest
  3582                              <1> optesttrue:
  3583 00003154 3C00                <1> 	cmp al, 0
  3584 00003156 7503                <1> 	jne optestfalse
  3585 00003158 B001                <1> 	mov al, 1
  3586 0000315A C3                  <1> 	ret
  3587                              <1> optestfalse:
  3588 0000315B 30C0                <1> 	xor al, al
  3589 0000315D C3                  <1> 	ret
  3590                              <1> 
  3591                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3592 0000315E 30C0                <1> 	xor al, al
  3593 00003160 8A06                <1> cndretest:	mov al, [esi]
  3594 00003162 8A23                <1> 	mov ah, [ebx]
  3595 00003164 38CC                <1> 	cmp ah, cl
  3596 00003166 7408                <1> 	je cndtesttrue
  3597 00003168 38E0                <1> 	cmp al, ah
  3598 0000316A 750B                <1> 	jne cndtestfalse
  3599 0000316C 43                  <1> 	inc ebx
  3600 0000316D 46                  <1> 	inc esi
  3601 0000316E EBF0                <1> 	jmp cndretest
  3602                              <1> cndtesttrue:
  3603 00003170 38C8                <1> 	cmp al, cl
  3604 00003172 7506                <1> 	jne cndtestalmost
  3605 00003174 B001                <1> 	mov al, 1
  3606 00003176 C3                  <1> 	ret
  3607                              <1> cndtestfalse:
  3608 00003177 30C0                <1> 	xor al, al
  3609 00003179 C3                  <1> 	ret
  3610                              <1> cndtestalmost:
  3611 0000317A B002                <1> 	mov al, 2
  3612 0000317C C3                  <1> 	ret
  3613                              <1> 	
  3614                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3615                              <1> 		                ;ends if array seperator is found backwards after 0
  3616                              <1> 	arnxt:	      
  3617 0000317D 88E8                <1> 		mov al, ch
  3618 0000317F 88CC                <1> 		mov ah, cl        
  3619 00003181 663906              <1> 		cmp [esi], ax
  3620 00003184 744D                <1> 		je ardn
  3621 00003186 66390E              <1> 		cmp [esi], cx
  3622 00003189 7407                <1> 		je arfnd
  3623 0000318B 46                  <1> 		inc esi
  3624 0000318C 39DE                <1> 		cmp esi, ebx
  3625 0000318E 7343                <1> 		jae ardn
  3626 00003190 EBEB                <1> 		jmp arnxt
  3627 00003192 81C602000000        <1> 	arfnd: add esi, 2
  3628 00003198 891D[D4310000]      <1> 		mov [arbx], ebx
  3629 0000319E 890D[D8310000]      <1> 		mov [arcx], ecx
  3630 000031A4 E8BAF1FFFF          <1> 		call print
  3631 000031A9 8935[DA310000]      <1> 		mov [arsi], esi
  3632 000031AF BE[E6790000]        <1> 		mov esi, line
  3633 000031B4 E8AAF1FFFF          <1> 		call print
  3634 000031B9 8B1D[D4310000]      <1> 		mov ebx, [arbx]
  3635 000031BF 668B0D[D8310000]    <1> 		mov cx, [arcx]
  3636 000031C6 8B35[DA310000]      <1> 		mov esi, [arsi]
  3637 000031CC 46                  <1> 		inc esi
  3638 000031CD 39DE                <1> 		cmp esi, ebx
  3639 000031CF 7302                <1> 		jae ardn
  3640 000031D1 EBAA                <1> 		jmp arnxt
  3641 000031D3 C3                  <1> 	ardn:	ret
  3642 000031D4 00000000            <1> arbx:	dw 0,0
  3643 000031D8 0000                <1> arcx:	db 0,0
  3644 000031DA 00000000            <1> arsi:	dw 0,0
  3645                              <1> 
  3646                              <1> clearbuffer:
  3647 000031DE BE[11CE0000]        <1> 	mov esi, buf2
  3648 000031E3 B030                <1> 	mov al, '0'
  3649 000031E5 81FE[25CE0000]      <1> clearbuf: cmp esi, numbuf
  3650 000031EB 7305                <1> 	jae doneclearbuff
  3651 000031ED 8806                <1> 	mov [esi], al
  3652 000031EF 46                  <1> 	inc esi
  3653 000031F0 EBF3                <1> 	jmp clearbuf
  3654                              <1> doneclearbuff: 
  3655 000031F2 C3                  <1> 		ret
  3656                              <1> 
  3657                              <1> convert:
  3658 000031F3 4E                  <1> 	dec esi
  3659 000031F4 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3660                              <1> .lp:
  3661 000031F6 89DE                <1> 	mov esi, ebx
  3662 000031F8 81EE09000000        <1> 	sub esi, 9
  3663 000031FE 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3664 00003204 720A                <1> 	jb .8
  3665 00003206 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3666 0000320C FE06                <1> 	inc byte [esi]
  3667 0000320E EBE6                <1> 	jmp .lp
  3668 00003210 46                  <1> .8:	inc esi
  3669 00003211 81F900E1F505        <1> 	cmp ecx, 100000000
  3670 00003217 720A                <1> 	jb .7
  3671 00003219 81E900E1F505        <1> 	sub ecx, 100000000
  3672 0000321F FE06                <1> 	inc byte [esi]
  3673 00003221 EBD3                <1> 	jmp .lp
  3674 00003223 46                  <1> .7:	inc esi
  3675 00003224 81F980969800        <1> 	cmp ecx, 10000000
  3676 0000322A 720A                <1> 	jb .6
  3677 0000322C 81E980969800        <1> 	sub ecx, 10000000
  3678 00003232 FE06                <1> 	inc byte [esi]
  3679 00003234 EBC0                <1> 	jmp .lp
  3680 00003236 46                  <1> .6:	inc esi
  3681 00003237 81F940420F00        <1> 	cmp ecx, 1000000
  3682 0000323D 720A                <1> 	jb .5
  3683 0000323F 81E940420F00        <1> 	sub ecx, 1000000
  3684 00003245 FE06                <1> 	inc byte [esi]
  3685 00003247 EBAD                <1> 	jmp .lp
  3686 00003249 46                  <1> .5:	inc esi
  3687 0000324A 81F9A0860100        <1> 	cmp ecx, 100000
  3688 00003250 720A                <1> 	jb .4
  3689 00003252 81E9A0860100        <1> 	sub ecx, 100000
  3690 00003258 FE06                <1> 	inc byte [esi]
  3691 0000325A EB9A                <1> 	jmp .lp
  3692 0000325C 46                  <1> .4:	inc esi
  3693 0000325D 81F910270000        <1> 	cmp ecx, 10000
  3694 00003263 720A                <1> 	jb .3
  3695 00003265 81E910270000        <1> 	sub ecx, 10000
  3696 0000326B FE06                <1> 	inc byte [esi]
  3697 0000326D EB87                <1> 	jmp .lp
  3698 0000326F 46                  <1> .3:	inc esi
  3699 00003270 81F9E8030000        <1> 	cmp ecx, 1000
  3700 00003276 720D                <1> 	jb .2
  3701 00003278 81E9E8030000        <1> 	sub ecx, 1000
  3702 0000327E FE06                <1> 	inc byte [esi]
  3703 00003280 E971FFFFFF          <1> 	jmp .lp
  3704 00003285 46                  <1> .2:	inc esi
  3705 00003286 81F964000000        <1> 	cmp ecx, 100
  3706 0000328C 720D                <1> 	jb .1
  3707 0000328E 81E964000000        <1> 	sub ecx, 100
  3708 00003294 FE06                <1> 	inc byte [esi]
  3709 00003296 E95BFFFFFF          <1> 	jmp .lp
  3710 0000329B 46                  <1> .1:	inc esi
  3711 0000329C 81F90A000000        <1> 	cmp ecx, 10
  3712 000032A2 720D                <1> 	jb .0
  3713 000032A4 81E90A000000        <1> 	sub ecx, 10
  3714 000032AA FE06                <1> 	inc byte [esi]
  3715 000032AC E945FFFFFF          <1> 	jmp .lp
  3716 000032B1 46                  <1> .0:	inc esi
  3717 000032B2 81F901000000        <1> 	cmp ecx, 1
  3718 000032B8 720D                <1> 	jb .dn
  3719 000032BA 81E901000000        <1> 	sub ecx, 1
  3720 000032C0 FE06                <1> 	inc byte [esi]
  3721 000032C2 E92FFFFFFF          <1> 	jmp .lp
  3722                              <1> .dn:
  3723 000032C7 C3                  <1> 	ret
  3724                              <1> 
  3725                              <1> 	
  3726                              <1> 
  3727 000032C8 00<rept>            <1> hexnumber times 8 db 0
  3728 000032D0 202000              <1> hexnumberend db "  ",0
  3729                              <1> 
  3730                              <1> converthex:
  3731                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3732 000032D3 56                  <1> 	push esi
  3733 000032D4 B030                <1> 	mov al, "0"
  3734 000032D6 39FE                <1> .clearlp: cmp esi, edi
  3735 000032D8 7305                <1> 	jae .doneclear
  3736 000032DA 8806                <1> 	mov [esi], al
  3737 000032DC 46                  <1> 	inc esi
  3738 000032DD EBF7                <1> 	jmp .clearlp
  3739                              <1> .doneclear:
  3740 000032DF 81EE02000000        <1> 	sub esi, 2
  3741 000032E5 89C8                <1> 	mov eax, ecx
  3742                              <1> .loop:
  3743 000032E7 30FF                <1> 	xor bh, bh
  3744 000032E9 88C3                <1> 	mov bl, al
  3745 000032EB 66C1E304            <1> 	shl bx, 4
  3746 000032EF C0EB04              <1> 	shr bl, 4
  3747 000032F2 86DF                <1> 	xchg bl, bh ;they are backwards
  3748 000032F4 80C330              <1> 	add bl, 48
  3749 000032F7 80FB39              <1> 	cmp bl, "9"
  3750 000032FA 7609                <1> 	jbe .goodbl
  3751 000032FC 80EB30              <1> 	sub bl, 48
  3752 000032FF 80EB0A              <1> 	sub bl, 0xA
  3753 00003302 80C341              <1> 	add bl, "A"
  3754                              <1> .goodbl:
  3755 00003305 80C730              <1> 	add bh, 48
  3756 00003308 80FF39              <1> 	cmp bh, "9"
  3757 0000330B 7609                <1> 	jbe .goodbh
  3758 0000330D 80EF30              <1> 	sub bh, 48
  3759 00003310 80EF0A              <1> 	sub bh, 0xA
  3760 00003313 80C741              <1> 	add bh, "A"
  3761                              <1> .goodbh:
  3762 00003316 C1E808              <1> 	shr eax, 8
  3763 00003319 66891E              <1> 	mov [esi], bx
  3764 0000331C 81EE02000000        <1> 	sub esi, 2
  3765 00003322 3B3424              <1> 	cmp esi, [esp]
  3766 00003325 7207                <1> 	jb .done
  3767 00003327 3D00000000          <1> 	cmp eax, 0
  3768 0000332C 75B9                <1> 	jne .loop
  3769                              <1> .done:
  3770 0000332E 5E                  <1> 	pop esi
  3771 0000332F C3                  <1> 	ret
  3772                              <1> 	
  3773                              <1> 	
  3774 00003330 00                  <1> smallhex db 0
  3775 00003331 01                  <1> firsthexshown db 1
  3776                              <1> showhexsmall:
  3777 00003332 C605[30330000]01    <1> 	mov byte [smallhex], 1
  3778 00003339 E808000000          <1> 	call showhex
  3779 0000333E C605[30330000]00    <1> 	mov byte [smallhex], 0
  3780 00003345 C3                  <1> 	ret
  3781                              <1> showhex:
  3782 00003346 60                  <1> 	pusha
  3783 00003347 BE[C8320000]        <1> 	mov esi, hexnumber
  3784 0000334C BF[D0320000]        <1> 	mov edi, hexnumberend
  3785 00003351 E87DFFFFFF          <1> 	call converthex
  3786 00003356 803D[31330000]01    <1> 	cmp byte [firsthexshown], 1
  3787 0000335D 7503                <1> 	jne .show
  3788 0000335F 6631D2              <1> 	xor dx, dx
  3789                              <1> .show:
  3790 00003362 803D[31330000]03    <1> 	cmp byte [firsthexshown], 3
  3791 00003369 750A                <1> 	jne .nonewhexline
  3792 0000336B BE[E6790000]        <1> 	mov esi, line
  3793 00003370 E8EEEFFFFF          <1> 	call print
  3794                              <1> .nonewhexline:
  3795 00003375 803D[31330000]04    <1> 	cmp byte [firsthexshown], 4
  3796 0000337C 7527                <1> 	jne .notab
  3797 0000337E B1A0                <1> 	mov cl, 160
  3798 00003380 28D1                <1> 	sub cl, dl
  3799 00003382 C0E905              <1> 	shr cl, 5
  3800 00003385 C0E105              <1> 	shl cl, 5
  3801 00003388 80F900              <1> 	cmp cl, 0
  3802 0000338B 750F                <1> 	jne .nonewline
  3803 0000338D BE[E6790000]        <1> 	mov esi, line
  3804 00003392 E8CCEFFFFF          <1> 	call print
  3805 00003397 E909000000          <1> 	jmp .notab
  3806                              <1> .nonewline:
  3807 0000339C 80C20F              <1> 	add dl, 15
  3808 0000339F C0EA04              <1> 	shr dl, 4
  3809 000033A2 C0E204              <1> 	shl dl, 4
  3810                              <1> .notab:
  3811 000033A5 BE[C8320000]        <1> 	mov esi, hexnumber
  3812 000033AA 803D[30330000]01    <1> 	cmp byte [smallhex],1
  3813 000033B1 7506                <1> 	jne .nosmall
  3814 000033B3 81C606000000        <1> 	add esi, 6
  3815                              <1> .nosmall:
  3816 000033B9 803D[31330000]05    <1> 	cmp byte [firsthexshown], 5
  3817 000033C0 750A                <1> 	jne .noquiet
  3818 000033C2 E88AEFFFFF          <1> 	call printquiet
  3819 000033C7 E918000000          <1> 	jmp .donequiet
  3820                              <1> .noquiet:
  3821 000033CC 803D[31330000]06    <1> 	cmp byte [firsthexshown], 6
  3822 000033D3 750A                <1> 	jne .normal
  3823 000033D5 E86BEFFFFF          <1> 	call printhighlight
  3824 000033DA E905000000          <1> 	jmp .donequiet
  3825                              <1> .normal:
  3826 000033DF E87FEFFFFF          <1> 	call print
  3827                              <1> .donequiet:
  3828 000033E4 803D[31330000]02    <1> 	cmp byte [firsthexshown], 2
  3829 000033EB 750A                <1> 	jne .shown
  3830 000033ED BE[E6790000]        <1> 	mov esi, line
  3831 000033F2 E86CEFFFFF          <1> 	call print
  3832                              <1> .shown:
  3833 000033F7 C605[31330000]00    <1> 	mov byte [firsthexshown], 0
  3834 000033FE 61                  <1> 	popa
  3835 000033FF C3                  <1> 	ret
  3836                              <1> 
  3837                              <1> 
  3838 00003400 303030303030303030- <1> decnumber db "00000000000000"
  3839 00003409 3030303030          <1>
  3840 0000340E 2000                <1> decnumberend: db " ",0
  3841                              <1> 
  3842                              <1> showdec: ;;same as showhex, just uses decimal conversion
  3843 00003410 60                  <1> 	pusha
  3844 00003411 BF[00340000]        <1> 	mov edi, decnumber
  3845 00003416 BE[0E340000]        <1> 	mov esi, decnumberend
  3846                              <1> .clear:
  3847 0000341B C60730              <1> 	mov byte [edi], '0'
  3848 0000341E 47                  <1> 	inc edi
  3849 0000341F 39F7                <1> 	cmp edi, esi
  3850 00003421 72F8                <1> 	jb .clear
  3851 00003423 BF[00340000]        <1> 	mov edi, decnumber
  3852 00003428 E8C6FDFFFF          <1> 	call convert
  3853 0000342D 803D[31330000]01    <1> 	cmp byte [firsthexshown], 1
  3854 00003434 7503                <1> 	jne .show
  3855 00003436 6631D2              <1> 	xor dx, dx
  3856                              <1> .show:
  3857 00003439 803D[31330000]03    <1> 	cmp byte [firsthexshown], 3
  3858 00003440 750A                <1> 	jne .nonewdecline
  3859 00003442 BE[E6790000]        <1> 	mov esi, line
  3860 00003447 E817EFFFFF          <1> 	call print
  3861                              <1> .nonewdecline:
  3862 0000344C 803D[31330000]04    <1> 	cmp byte [firsthexshown], 4
  3863 00003453 7527                <1> 	jne .notab
  3864 00003455 B1A0                <1> 	mov cl, 160
  3865 00003457 28D1                <1> 	sub cl, dl
  3866 00003459 C0E905              <1> 	shr cl, 5
  3867 0000345C C0E105              <1> 	shl cl, 5
  3868 0000345F 80F900              <1> 	cmp cl, 0
  3869 00003462 750F                <1> 	jne .nonewline
  3870 00003464 BE[E6790000]        <1> 	mov esi, line
  3871 00003469 E8F5EEFFFF          <1> 	call print
  3872 0000346E E909000000          <1> 	jmp .notab
  3873                              <1> .nonewline:
  3874 00003473 80C20F              <1> 	add dl, 15
  3875 00003476 C0EA04              <1> 	shr dl, 4
  3876 00003479 C0E204              <1> 	shl dl, 4
  3877                              <1> .notab:
  3878 0000347C BE[00340000]        <1> 	mov esi, decnumber
  3879 00003481 4E                  <1> 	dec esi
  3880                              <1> .sifind:
  3881 00003482 46                  <1> 	inc esi
  3882 00003483 803E30              <1> 	cmp byte [esi], '0'
  3883 00003486 74FA                <1> 	je .sifind
  3884 00003488 E8D6EEFFFF          <1> 	call print
  3885 0000348D 803D[31330000]02    <1> 	cmp byte [firsthexshown], 2
  3886 00003494 750A                <1> 	jne .shown
  3887 00003496 BE[E6790000]        <1> 	mov esi, line
  3888 0000349B E8C3EEFFFF          <1> 	call print
  3889                              <1> .shown:
  3890 000034A0 C605[31330000]00    <1> 	mov byte [firsthexshown], 0
  3891 000034A7 61                  <1> 	popa
  3892 000034A8 C3                  <1> 	ret
  3893                              <1> 	
  3894                              <1> cnvrthextxt:
  3895 000034A9 31C9                <1> 	xor ecx, ecx
  3896 000034AB 31C0                <1> 	xor eax, eax
  3897 000034AD 31D2                <1> 	xor edx, edx
  3898 000034AF 31DB                <1> 	xor ebx, ebx
  3899 000034B1 4E                  <1> 	dec esi
  3900                              <1> .end:
  3901 000034B2 46                  <1> 	inc esi
  3902 000034B3 8A06                <1> 	mov al, [esi]
  3903 000034B5 3C00                <1> 	cmp al, 0
  3904 000034B7 75F9                <1> 	jne .end
  3905                              <1> .loop:
  3906 000034B9 4E                  <1> 	dec esi
  3907 000034BA 8A06                <1> 	mov al, [esi]
  3908 000034BC 3C41                <1> 	cmp al, "A"
  3909 000034BE 7328                <1> 	jae .char
  3910 000034C0 2C30                <1> 	sub al, 48
  3911 000034C2 3C10                <1> 	cmp al, 16
  3912 000034C4 7721                <1> 	ja .done
  3913                              <1> .donechar:
  3914 000034C6 81FA00000000        <1> 	cmp edx, 0
  3915 000034CC 740E                <1> 	je .noshl
  3916 000034CE 89D3                <1> 	mov ebx, edx
  3917                              <1> .shl:
  3918 000034D0 C1E004              <1> 	shl eax, 4
  3919 000034D3 4B                  <1> 	dec ebx
  3920 000034D4 81FB00000000        <1> 	cmp ebx, 0
  3921 000034DA 75F4                <1> 	jne .shl
  3922                              <1> .noshl:
  3923 000034DC 42                  <1> 	inc edx
  3924 000034DD 01C1                <1> 	add ecx, eax
  3925 000034DF 81FA08000000        <1> 	cmp edx, 8
  3926 000034E5 72D2                <1> 	jb .loop
  3927                              <1> .done:
  3928 000034E7 C3                  <1> 	ret
  3929                              <1> .char:
  3930 000034E8 3C46                <1> 	cmp al, "F"
  3931 000034EA 77FB                <1> 	ja .done
  3932 000034EC 2C41                <1> 	sub al, "A"
  3933 000034EE 040A                <1> 	add al, 0xA
  3934 000034F0 EBD4                <1> 	jmp .donechar
  3935                              <1> 	
  3936                              <1> 	
  3937                              <1> cnvrttxt: 
  3938 000034F2 31C9                <1> 	xor ecx, ecx
  3939 000034F4 31C0                <1> 	xor eax, eax
  3940 000034F6 31D2                <1> 	xor edx, edx
  3941 000034F8 31DB                <1> 	xor ebx, ebx
  3942 000034FA 4E                  <1> 	dec esi
  3943                              <1> .lp:
  3944 000034FB 46                  <1> 	inc esi
  3945 000034FC 8A06                <1> 	mov al, [esi]
  3946 000034FE 3C00                <1> 	cmp al, 0
  3947 00003500 75F9                <1> 	jne .lp
  3948 00003502 4E                  <1> 	dec esi
  3949 00003503 8A06                <1> 	mov al, [esi]
  3950 00003505 3C2E                <1> 	cmp al, '.'
  3951 00003507 7503                <1> 	jne .dot
  3952 00003509 46                  <1> 	inc esi
  3953 0000350A EBEF                <1> 	jmp .lp
  3954                              <1> .dot:
  3955 0000350C 3C20                <1> 	cmp al, ' '
  3956 0000350E 7404                <1> 	je .zero
  3957 00003510 3C30                <1> 	cmp al, '0'
  3958 00003512 7504                <1> 	jne .txtlp
  3959                              <1> .zero: 
  3960 00003514 39FE                <1> 		cmp esi, edi
  3961 00003516 7458                <1> 		je .done
  3962                              <1> .txtlp:
  3963 00003518 31C0                <1> 	xor eax, eax
  3964 0000351A 8A06                <1> 	mov al, [esi]
  3965 0000351C 3C3D                <1> 	cmp al, '='
  3966 0000351E 7450                <1> 	je .done
  3967 00003520 3C30                <1> 	cmp al, 48
  3968 00003522 724C                <1> 	jb .done
  3969 00003524 3C23                <1> 	cmp al, '#'
  3970 00003526 7448                <1> 	je .done
  3971 00003528 39FE                <1> 	cmp esi, edi
  3972 0000352A 7244                <1> 	jb .done
  3973 0000352C 81F900000000        <1> 	cmp ecx, 0
  3974 00003532 7708                <1> 	ja .exp
  3975 00003534 2C30                <1> .noexp:	sub al, 48
  3976 00003536 01C2                <1> 	add edx, eax
  3977 00003538 4E                  <1> 	dec esi
  3978 00003539 41                  <1> 	inc ecx
  3979 0000353A EBDC                <1> 	jmp .txtlp
  3980 0000353C 81F900000000        <1> .exp:	cmp ecx, 0
  3981 00003542 74F0                <1> 	je .noexp
  3982 00003544 2C30                <1> 	sub al, 48
  3983 00003546 51                  <1> 	push ecx
  3984 00003547 89C3                <1> .expmul:	mov ebx, eax
  3985 00003549 01D8                <1> 	add eax, ebx
  3986 0000354B 01D8                <1> 	add eax, ebx
  3987 0000354D 01D8                <1> 	add eax, ebx
  3988 0000354F 01D8                <1> 	add eax, ebx
  3989 00003551 01D8                <1> 	add eax, ebx
  3990 00003553 01D8                <1> 	add eax, ebx
  3991 00003555 01D8                <1> 	add eax, ebx
  3992 00003557 01D8                <1> 	add eax, ebx
  3993 00003559 01D8                <1> 	add eax, ebx
  3994 0000355B 81E901000000        <1> 	sub ecx, 1
  3995 00003561 81F900000000        <1> 	cmp ecx, 0
  3996 00003567 77DE                <1> 	ja .expmul
  3997 00003569 01C2                <1> 	add edx, eax
  3998 0000356B 59                  <1> 	pop ecx
  3999 0000356C 4E                  <1> 	dec esi
  4000 0000356D 41                  <1> 	inc ecx
  4001 0000356E EBA8                <1> 	jmp .txtlp
  4002 00003570 89D1                <1> .done: mov ecx, edx
  4003 00003572 C3                  <1> 	ret
  4004                                      %include 'source/programs.asm'
  4005 00003573 FF2C                <1> filetypes db 255,44
  4006                              <1> progstart:		;programs start here
  4007                              <1> indexfiles:
  4008 00003575 BE[75350000]        <1> 	mov esi, progstart
  4009 0000357A BB[93B10000]        <1> 	mov ebx, fileindex
  4010 0000357F BF[75350000]        <1> 	mov edi, progstart
  4011 00003584 81EF02000000        <1> 	sub edi, 2
  4012                              <1> indexloop:
  4013 0000358A 668B0E              <1> 	mov cx, [esi]
  4014                              <1> 	indexloop2:
  4015 0000358D 663B0F              <1> 		cmp cx, [edi]
  4016 00003590 7424                <1> 		je indexloop2done
  4017 00003592 81EF02000000        <1> 		sub edi, 2
  4018 00003598 81FF[73350000]      <1> 		cmp edi, filetypes
  4019 0000359E 73ED                <1> 		jae indexloop2
  4020 000035A0 BF[75350000]        <1> 	mov edi, progstart
  4021 000035A5 81EF02000000        <1> 	sub edi, 2
  4022 000035AB 46                  <1> 	inc esi
  4023 000035AC 81FE[C24C0000]      <1> 	cmp esi, batchprogend
  4024 000035B2 734E                <1> 	jae indexloopdone
  4025 000035B4 EBD4                <1> 	jmp indexloop
  4026                              <1> indexloop2done:
  4027 000035B6 66890B              <1> 	mov [ebx], cx
  4028 000035B9 81C302000000        <1> 	add ebx, 2
  4029 000035BF 81C602000000        <1> 	add esi, 2
  4030                              <1> 	nameindex:
  4031 000035C5 8A0E                <1> 		mov cl, [esi]
  4032 000035C7 80F900              <1> 		cmp cl, 0
  4033 000035CA 7406                <1> 		je nameindexdone
  4034 000035CC 880B                <1> 		mov [ebx], cl
  4035 000035CE 46                  <1> 		inc esi
  4036 000035CF 43                  <1> 		inc ebx
  4037 000035D0 EBF3                <1> 		jmp nameindex
  4038                              <1> 	nameindexdone:
  4039 000035D2 43                  <1> 		inc ebx
  4040 000035D3 66C7030000          <1> 		mov word [ebx], 0
  4041 000035D8 81C302000000        <1> 		add ebx, 2
  4042 000035DE 46                  <1> 		inc esi
  4043 000035DF 8933                <1> 		mov [ebx], esi
  4044 000035E1 81C304000000        <1> 		add ebx, 4
  4045 000035E7 66C7030000          <1> 		mov word [ebx], 0
  4046 000035EC 81C302000000        <1> 		add ebx, 2
  4047 000035F2 81FB[93B50000]      <1> 		cmp ebx, fileindexend
  4048 000035F8 7308                <1> 		jae indexloopdone
  4049 000035FA 81C601000000        <1> 		add esi, 1
  4050 00003600 EB88                <1> 		jmp indexloop
  4051 00003602 C605[0A360000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4052 00003609 C3                  <1> 		ret
  4053                              <1> 
  4054 0000360A 00                  <1> indexdone db 0
  4055                              <1> %include 'source/programs/_comment.asm' ;#
  4056 0000360B FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4057 0000360F C3                  <2> 	ret 
  4058                              <1> %include 'source/programs/_math.asm' ;!
  4059 00003610 FF2C2100            <2> db 255,44,"!",0
  4060                              <2> 	num:	
  4061 00003614 E8C5FBFFFF          <2> 		call clearbuffer
  4062 00003619 C605[9A380000]00    <2> 		mov byte [decimal], 0
  4063 00003620 C605[9B380000]00    <2> 		mov byte [decimal2], 0
  4064 00003627 8B35[1F310000]      <2> 		mov esi, [currentcommandloc]
  4065 0000362D 31C0                <2> 		xor eax, eax
  4066 0000362F 31C9                <2> 		xor ecx, ecx
  4067 00003631 31DB                <2> 		xor ebx, ebx
  4068 00003633 8A06                <2> 	num2:	mov al, [esi]
  4069 00003635 3C2B                <2> 		cmp al, '+'
  4070 00003637 741B                <2> 		je operatorfound
  4071 00003639 3C2D                <2> 		cmp al, '-'
  4072 0000363B 7417                <2> 		je operatorfound
  4073 0000363D 3C2A                <2> 		cmp al, '*'
  4074 0000363F 7413                <2> 		je operatorfound
  4075 00003641 3C2F                <2> 		cmp al, '/'
  4076 00003643 740F                <2> 		je operatorfound
  4077 00003645 3C5E                <2> 		cmp al, '^'
  4078 00003647 740B                <2> 		je operatorfound
  4079 00003649 46                  <2> 		inc esi
  4080 0000364A 3C00                <2> 		cmp al, 0
  4081 0000364C 0F8423F8FFFF        <2> 		je near nwcmd
  4082 00003652 EBDF                <2> 		jmp num2
  4083 00003654 50                  <2> 	operatorfound: push eax
  4084 00003655 30E4                <2> 		xor ah, ah
  4085 00003657 8826                <2> 		mov [esi], ah
  4086 00003659 89F7                <2> 		mov edi, esi
  4087 0000365B 46                  <2> 		inc esi
  4088 0000365C 8A06                <2> 		mov al, [esi]
  4089 0000365E 3C25                <2> 		cmp al, '%'
  4090 00003660 0F8462000000        <2> 		je near resultnum1
  4091                              <2> 	varnum2: 
  4092 00003666 57                  <2> 		push edi
  4093 00003667 E8A4000000          <2> 		call checkdecimal
  4094 0000366C 5F                  <2> 		pop edi
  4095 0000366D E880FEFFFF          <2> 		call cnvrttxt
  4096                              <2> 	vrnm2:
  4097 00003672 89CB                <2> 		mov ebx, ecx
  4098 00003674 53                  <2> 		push ebx
  4099 00003675 E864FBFFFF          <2> 		call clearbuffer
  4100 0000367A 8B35[1F310000]      <2> 		mov esi, [currentcommandloc]
  4101 00003680 89F7                <2> 		mov edi, esi
  4102 00003682 46                  <2> 		inc esi
  4103 00003683 8A06                <2> 		mov al, [esi]
  4104 00003685 3C25                <2> 		cmp al, '%'
  4105 00003687 0F844F000000        <2> 		je near resultnum2
  4106                              <2> 	varnum4: 
  4107 0000368D 57                  <2> 		push edi
  4108 0000368E E869000000          <2> 		call checkdecimal2
  4109 00003693 5F                  <2> 		pop edi
  4110 00003694 E859FEFFFF          <2> 		call cnvrttxt
  4111                              <2> 	vrnm4:
  4112 00003699 5B                  <2> 		pop ebx
  4113 0000369A 58                  <2> 		pop eax
  4114 0000369B 3C2B                <2> 		cmp al, '+'
  4115 0000369D 0F849B000000        <2> 		je near plusnum
  4116 000036A3 3C2D                <2> 		cmp al, '-'
  4117 000036A5 0F849F000000        <2> 		je near subnum
  4118 000036AB 3C2A                <2> 		cmp al, '*'
  4119 000036AD 0F84A3000000        <2> 		je near mulnum
  4120 000036B3 3C2F                <2> 		cmp al, '/'
  4121 000036B5 0F84B1000000        <2> 		je near divnum
  4122 000036BB 3C5E                <2> 		cmp al, '^'
  4123 000036BD 0F84CE000000        <2> 		je near expnum
  4124 000036C3 E9ADF7FFFF          <2> 		jmp nwcmd
  4125                              <2> 	resultnum1:
  4126 000036C8 8A0D[9C380000]      <2> 		mov cl, [decimalresult]
  4127 000036CE 880D[9A380000]      <2> 		mov [decimal], cl
  4128 000036D4 8B0D[9D380000]      <2> 		mov ecx, [result]
  4129 000036DA EB96                <2> 		jmp vrnm2
  4130                              <2> 	resultnum2:
  4131 000036DC 8A0D[9A380000]      <2> 		mov cl, [decimal]
  4132 000036E2 880D[9B380000]      <2> 		mov [decimal2], cl
  4133 000036E8 8A0D[9C380000]      <2> 		mov cl, [decimalresult]
  4134 000036EE 880D[9A380000]      <2> 		mov [decimal], cl
  4135 000036F4 8B0D[9D380000]      <2> 		mov ecx, [result]
  4136 000036FA EB9D                <2> 		jmp vrnm4
  4137                              <2> 	checkdecimal2:
  4138 000036FC 8A25[9A380000]      <2> 		mov ah, [decimal]
  4139 00003702 8825[9B380000]      <2> 		mov [decimal2], ah
  4140 00003708 30E4                <2> 		xor ah, ah
  4141 0000370A 8825[9A380000]      <2> 		mov [decimal], ah
  4142                              <2> 	checkdecimal:
  4143 00003710 89F7                <2> 		mov edi, esi
  4144                              <2> 	chkdec1:
  4145 00003712 8A07                <2> 		mov al, [edi]
  4146 00003714 3C2E                <2> 		cmp al, '.'
  4147 00003716 0F840B000000        <2> 		je near fnddec
  4148 0000371C 3C00                <2> 		cmp al, 0
  4149 0000371E 0F8419000000        <2> 		je near nodecimal
  4150 00003724 47                  <2> 		inc edi
  4151 00003725 EBEB                <2> 		jmp chkdec1
  4152                              <2> 	fnddec:
  4153 00003727 8A4701              <2> 		mov al, [edi + 1]
  4154 0000372A 8807                <2> 		mov [edi], al
  4155 0000372C 3C00                <2> 		cmp al, 0
  4156 0000372E 0F8409000000        <2> 		je near nodecimal
  4157 00003734 FE05[9A380000]      <2> 		inc byte [decimal]
  4158 0000373A 47                  <2> 		inc edi
  4159 0000373B EBEA                <2> 		jmp fnddec
  4160                              <2> 	nodecimal:
  4161 0000373D C3                  <2> 		ret
  4162                              <2> 	plusnum:
  4163 0000373E E815010000          <2> 		call decaddfix
  4164 00003743 01D9                <2> 		add ecx, ebx
  4165 00003745 E98A000000          <2> 		jmp retnum
  4166                              <2> 	subnum:
  4167 0000374A E809010000          <2> 		call decaddfix
  4168 0000374F 29D9                <2> 		sub ecx, ebx
  4169 00003751 E97E000000          <2> 		jmp retnum
  4170                              <2> 	mulnum:
  4171 00003756 A0[9B380000]        <2> 		mov al, [decimal2]
  4172 0000375B 0005[9A380000]      <2> 		add [decimal], al
  4173 00003761 89C8                <2> 		mov eax, ecx
  4174 00003763 F7E3                <2> 		mul ebx
  4175 00003765 89C1                <2> 		mov ecx, eax
  4176 00003767 E968000000          <2> 		jmp retnum
  4177                              <2> 	divnum:
  4178 0000376C E8E7000000          <2> 		call decaddfix
  4179 00003771 30C0                <2> 		xor al, al
  4180 00003773 A2[9A380000]        <2> 		mov [decimal], al
  4181 00003778 31D2                <2> 		xor edx, edx
  4182 0000377A 89C8                <2> 		mov eax, ecx
  4183 0000377C 81FB00000000        <2> 		cmp ebx, 0
  4184 00003782 0F844C000000        <2> 		je near retnum
  4185 00003788 F7F3                <2> 		div ebx
  4186 0000378A 89C1                <2> 		mov ecx, eax
  4187 0000378C E943000000          <2> 		jmp retnum
  4188                              <2> 	expnum:
  4189 00003791 8A15[9A380000]      <2> 		mov dl, [decimal]
  4190 00003797 8815[9B380000]      <2> 		mov [decimal2], dl
  4191 0000379D 31D2                <2> 		xor edx, edx
  4192 0000379F 89C8                <2> 		mov eax, ecx
  4193 000037A1 89D9                <2> 		mov ecx, ebx
  4194 000037A3 89C3                <2> 		mov ebx, eax
  4195 000037A5 81F900000000        <2> 		cmp ecx, 0
  4196 000037AB 7422                <2> 		je noexpnum
  4197 000037AD 49                  <2> 		dec ecx
  4198 000037AE 81F900000000        <2> 		cmp ecx, 0
  4199 000037B4 7412                <2> 		je noexpnumlp
  4200 000037B6 F7E3                <2> 	expnumlp: mul ebx
  4201 000037B8 8A15[9B380000]      <2> 		mov dl, [decimal2]
  4202 000037BE 0015[9A380000]      <2> 		add [decimal], dl
  4203 000037C4 31D2                <2> 		xor edx, edx
  4204 000037C6 E2EE                <2> 		loop expnumlp
  4205                              <2> 	noexpnumlp:
  4206 000037C8 89C1                <2> 		mov ecx, eax
  4207 000037CA E905000000          <2> 		jmp retnum
  4208                              <2> 	noexpnum:
  4209 000037CF B901000000          <2> 		mov ecx, 1
  4210                              <2> 	retnum: 
  4211 000037D4 BE[25CE0000]        <2> 		mov esi, numbuf
  4212 000037D9 890D[9D380000]      <2> 		mov [result], ecx
  4213 000037DF E80FFAFFFF          <2> 		call convert
  4214 000037E4 BE[25CE0000]        <2> 		mov esi, numbuf
  4215 000037E9 8A25[9A380000]      <2> 		mov ah, [decimal]
  4216 000037EF 8825[9C380000]      <2> 		mov [decimalresult], ah
  4217 000037F5 80FC00              <2> 		cmp ah, 0
  4218 000037F8 0F8425000000        <2> 		je near noputdecimal
  4219                              <2> 	putdecimal:
  4220 000037FE 4E                  <2> 		dec esi
  4221 000037FF FECC                <2> 		dec ah
  4222 00003801 80FC00              <2> 		cmp ah, 0
  4223 00003804 0F87F4FFFFFF        <2> 		ja near putdecimal
  4224 0000380A 4E                  <2> 		dec esi
  4225 0000380B 8A06                <2> 		mov al, [esi]
  4226 0000380D C6062E              <2> 		mov byte [esi], '.'
  4227                              <2> 	decputloop:
  4228 00003810 4E                  <2> 		dec esi
  4229 00003811 8A26                <2> 		mov ah, [esi]
  4230 00003813 8806                <2> 		mov [esi], al
  4231 00003815 88E0                <2> 		mov al, ah
  4232 00003817 81FE[11CE0000]      <2> 		cmp esi, buf2
  4233 0000381D 0F87EDFFFFFF        <2> 		ja near decputloop
  4234                              <2> 	noputdecimal:
  4235 00003823 BE[11CE0000]        <2> 		mov esi, buf2
  4236 00003828 E809000000          <2> 		call chkadd
  4237 0000382D E943F6FFFF          <2> 		jmp nwcmd
  4238 00003832 00000000            <2> edxnumbuf dw 0,0
  4239 00003836 8A06                <2> 	chkadd: mov al, [esi]
  4240 00003838 3C30                <2> 		cmp al, '0'
  4241 0000383A 750C                <2> 		jne dnadd
  4242 0000383C 46                  <2> 		inc esi
  4243 0000383D 81FE[25CE0000]      <2> 		cmp esi, numbuf
  4244 00003843 7402                <2> 		je dnaddm1
  4245 00003845 EBEF                <2> 		jmp chkadd
  4246 00003847 4E                  <2> 	dnaddm1: dec esi
  4247 00003848 E816EBFFFF          <2> 	dnadd:	call print
  4248 0000384D BE[E6790000]        <2> 		mov esi, line
  4249 00003852 E80CEBFFFF          <2> 		call print
  4250 00003857 C3                  <2> 		ret
  4251                              <2> 		
  4252                              <2> 	decaddfix:
  4253 00003858 A0[9B380000]        <2> 		mov al, [decimal2]
  4254 0000385D 8A25[9A380000]      <2> 		mov ah, [decimal]
  4255 00003863 38E0                <2> 		cmp al, ah
  4256 00003865 7432                <2> 		je gooddecadd
  4257 00003867 38E0                <2> 		cmp al, ah
  4258 00003869 721A                <2> 		jb lowdecadd
  4259                              <2> 	highdecadd:
  4260 0000386B FEC4                <2> 		inc ah
  4261 0000386D 89CA                <2> 		mov edx, ecx
  4262 0000386F C1E103              <2> 		shl ecx, 3
  4263 00003872 01D1                <2> 		add ecx, edx
  4264 00003874 01D1                <2> 		add ecx, edx
  4265 00003876 38E0                <2> 		cmp al, ah
  4266 00003878 77F1                <2> 		ja highdecadd
  4267 0000387A 8825[9A380000]      <2> 		mov [decimal], ah
  4268 00003880 E914000000          <2> 		jmp gooddecadd
  4269                              <2> 	lowdecadd:
  4270 00003885 FEC0                <2> 		inc al
  4271 00003887 89DA                <2> 		mov edx, ebx
  4272 00003889 C1E303              <2> 		shl ebx, 3
  4273 0000388C 01D3                <2> 		add ebx, edx
  4274 0000388E 01D3                <2> 		add ebx, edx
  4275 00003890 38E0                <2> 		cmp al, ah
  4276 00003892 72F1                <2> 		jb lowdecadd
  4277 00003894 A2[9A380000]        <2> 		mov [decimal], al
  4278                              <2> 	gooddecadd:
  4279 00003899 C3                  <2> 		ret
  4280                              <2> 		
  4281 0000389A 00                  <2> decimal db 0
  4282 0000389B 00                  <2> decimal2 db 0
  4283 0000389C 00                  <2> decimalresult db 0
  4284 0000389D 00000000            <2> result dd 0
  4285                              <1> %include 'source/programs/_variables.asm' ;% and $
  4286 000038A1 FF2C2500            <2> db 255,44,"%",0
  4287                              <2> 	ans:
  4288 000038A5 BE[11CE0000]        <2> 		mov esi, buf2
  4289 000038AA E887FFFFFF          <2> 		call chkadd
  4290 000038AF C3                  <2> 		ret
  4291                              <2> 		
  4292 000038B0 FF2C2400            <2> db 255,44,"$",0
  4293 000038B4 8B35[1F310000]      <2> var: mov esi, [currentcommandloc]
  4294 000038BA BB[07B60000]        <2> 	mov ebx, variables
  4295 000038BF 8A06                <2> lkeq:	mov al, [esi]
  4296 000038C1 3C3D                <2> 	cmp al, '='
  4297 000038C3 741B                <2> 	je eqfnd	;is there an '=' sign?
  4298 000038C5 3C00                <2> 	cmp al, 0
  4299 000038C7 7403                <2> 	je echovars
  4300 000038C9 46                  <2> 	inc esi
  4301 000038CA EBF3                <2> 	jmp lkeq
  4302 000038CC BE[07B60000]        <2> echovars: mov esi, variables
  4303 000038D1 BB[07C60000]        <2> 	mov ebx, varend
  4304 000038D6 B105                <2> 	mov cl, 5
  4305 000038D8 B504                <2> 	mov ch, 4
  4306 000038DA E89EF8FFFF          <2> 	call array
  4307 000038DF C3                  <2> 	ret
  4308 000038E0 46                  <2> eqfnd:	inc esi
  4309 000038E1 8A06                <2> 	mov al, [esi]
  4310 000038E3 3C00                <2> 	cmp al, 0
  4311 000038E5 7410                <2> 	je readvar
  4312 000038E7 8B35[1F310000]      <2> 	mov esi, [currentcommandloc]
  4313 000038ED BB[07B60000]        <2> 	mov ebx, variables
  4314 000038F2 E919000000          <2> 	jmp seek
  4315                              <2> readvar:
  4316 000038F7 B00A                <2> 	mov al, 10
  4317 000038F9 66BB0700            <2> 	mov bx, 7
  4318 000038FD C605[CC270000]00    <2> 	mov byte [commandedit], 0
  4319 00003904 BF[11CE0000]        <2> 	mov edi, buftxtend
  4320 00003909 E85DEBFFFF          <2> 	call rdprint
  4321 0000390E EBA4                <2> 	jmp var
  4322 00003910 668B03              <2> seek:	mov ax, [ebx]
  4323 00003913 B105                <2> 	mov cl, 5
  4324 00003915 B504                <2> 	mov ch, 4
  4325 00003917 663D0000            <2> 	cmp ax, 0
  4326 0000391B 0F845B000000        <2> 	je near save
  4327 00003921 6639C8              <2> 	cmp ax, cx
  4328 00003924 7403                <2> 	je skfnd
  4329 00003926 43                  <2> 	inc ebx
  4330 00003927 EBE7                <2> 	jmp seek
  4331 00003929 8B35[1F310000]      <2> skfnd:	mov esi, [currentcommandloc]
  4332 0000392F 46                  <2> 	inc esi
  4333 00003930 81C302000000        <2> 	add ebx, 2
  4334 00003936 89DF                <2> 	mov edi, ebx
  4335 00003938 B13D                <2> 	mov cl, '='
  4336 0000393A E81FF8FFFF          <2> 	call cndtest
  4337 0000393F 3C01                <2> 	cmp al, 1	
  4338 00003941 7418                <2> 	je varfnd
  4339 00003943 89FB                <2> 	mov ebx, edi
  4340 00003945 8B35[1F310000]      <2> 	mov esi, [currentcommandloc]
  4341 0000394B 668B03              <2> 	mov ax, [ebx]
  4342 0000394E 663D0000            <2> 	cmp ax, 0
  4343 00003952 0F8424000000        <2> 	je near save
  4344 00003958 43                  <2> 	inc ebx
  4345 00003959 EBB5                <2> 	jmp seek
  4346 0000395B 8A03                <2> varfnd:	mov al, [ebx]
  4347 0000395D 3C04                <2> 	cmp al, 4
  4348 0000395F 7404                <2> 	je save2
  4349 00003961 4B                  <2> 	dec ebx
  4350 00003962 4E                  <2> 	dec esi
  4351 00003963 EBF6                <2> 	jmp varfnd
  4352 00003965 4B                  <2> save2:	dec ebx
  4353 00003966 4E                  <2> 	dec esi
  4354 00003967 8A03                <2> 	mov al, [ebx]
  4355 00003969 3C05                <2> 	cmp al, 5
  4356 0000396B 7402                <2> 	je remove
  4357 0000396D EBEC                <2> 	jmp varfnd
  4358 0000396F 8A03                <2> remove: mov al, [ebx]
  4359 00003971 3C00                <2> 	cmp al, 0
  4360 00003973 749B                <2> 	je seek
  4361 00003975 30C0                <2> 	xor al, al
  4362 00003977 8803                <2> 	mov [ebx], al
  4363 00003979 43                  <2> 	inc ebx
  4364 0000397A EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4365 0000397C 8B35[1F310000]      <2> save:	mov esi, [currentcommandloc]
  4366 00003982 43                  <2> 	inc ebx
  4367 00003983 B005                <2> 	mov al, 5
  4368 00003985 B404                <2> 	mov ah, 4
  4369 00003987 668903              <2> 	mov [ebx], ax
  4370 0000398A 43                  <2> 	inc ebx
  4371 0000398B 43                  <2> svhere:	inc ebx
  4372 0000398C 46                  <2> 	inc esi
  4373 0000398D 8A06                <2> 	mov al, [esi]
  4374 0000398F 3C00                <2> 	cmp al, 0
  4375 00003991 0F844A000000        <2> 	je near svdone
  4376 00003997 3C25                <2> 	cmp al, '%'
  4377 00003999 7404                <2> 	je ans2
  4378 0000399B 8803                <2> 	mov [ebx], al	
  4379 0000399D EBEC                <2> 	jmp svhere
  4380 0000399F 56                  <2> ans2:	push esi
  4381 000039A0 BE[11CE0000]        <2> 	mov esi, buf2
  4382 000039A5 E823000000          <2> 	call ansfnd
  4383 000039AA E803000000          <2> 	call anscp
  4384 000039AF 5E                  <2> 	pop esi
  4385 000039B0 EBD9                <2> 	jmp svhere
  4386 000039B2 8A06                <2> anscp:	mov al, [esi]
  4387 000039B4 8803                <2> 	mov [ebx], al
  4388 000039B6 81FE[25CE0000]      <2> 	cmp esi, numbuf
  4389 000039BC 74CD                <2> 	je svhere
  4390 000039BE 3C00                <2> 	cmp al, 0
  4391 000039C0 74C9                <2> 	je svhere
  4392 000039C2 43                  <2> 	inc ebx
  4393 000039C3 46                  <2> 	inc esi
  4394 000039C4 EBEC                <2> 	jmp anscp
  4395 000039C6 5E                  <2> ansnf:	pop esi
  4396 000039C7 8A06                <2> 	mov al, [esi]
  4397 000039C9 8803                <2> 	mov [ebx], al
  4398 000039CB EBBE                <2> 	jmp svhere
  4399 000039CD 46                  <2> ansfnd:	inc esi
  4400 000039CE 81FE[24CE0000]      <2> 	cmp esi, numbuf - 1
  4401 000039D4 740A                <2> 	je fndans
  4402 000039D6 8A06                <2> 	mov al, [esi]
  4403 000039D8 3C00                <2> 	cmp al, 0
  4404 000039DA 74EA                <2> 	je ansnf
  4405 000039DC 3C30                <2> 	cmp al, '0'
  4406 000039DE 74ED                <2> 	je ansfnd
  4407                              <2> fndans:
  4408 000039E0 C3                  <2> 	ret
  4409 000039E1 30C0                <2> svdone:	xor al, al
  4410 000039E3 8803                <2> 	mov [ebx], al
  4411 000039E5 C3                  <2> 	ret
  4412                              <1> %include 'source/programs/_run.asm' ;./
  4413                              <2> 
  4414 000039E6 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4415 000039EA FF2C2E2F00          <2> 	db 255,44,"./",0
  4416                              <2> rundiskprog:
  4417 000039EF 8B3D[1F310000]      <2> 	mov edi, [currentcommandloc]
  4418 000039F5 81C702000000        <2> 	add edi, 2
  4419 000039FB BE00004000          <2> 	mov esi, 0x400000
  4420 00003A00 E891380000          <2> 	call loadfile
  4421 00003A05 81FA94010000        <2> 	cmp edx, 404
  4422 00003A0B 7453                <2> 	je noprogfound
  4423 00003A0D BB00004000          <2> 	mov ebx, 0x400000
  4424 00003A12 A1[E6390000]        <2> 	mov eax, [elfstart]
  4425 00003A17 3903                <2> 	cmp [ebx], eax
  4426 00003A19 0F842B000000        <2> 	je near runelf
  4427 00003A1F 66813B4558          <2> 	cmp word [ebx], "EX"
  4428 00003A24 7560                <2> 	jne progbatchfound
  4429 00003A26 81C302000000        <2> 	add ebx, 2
  4430 00003A2C 8B3D[1F310000]      <2> 	mov edi, [currentcommandloc]
  4431 00003A32 81C702000000        <2> 	add edi, 2
  4432                              <2> findspaceprog:
  4433 00003A38 8A07                <2> 	mov al, [edi]
  4434 00003A3A 47                  <2> 	inc edi
  4435 00003A3B 3C20                <2> 	cmp al, " "
  4436 00003A3D 75F9                <2> 	jne findspaceprog
  4437                              <2> findnonspaceprog:
  4438 00003A3F 8A07                <2> 	mov al, [edi]
  4439 00003A41 47                  <2> 	inc edi
  4440 00003A42 3C20                <2> 	cmp al, " "
  4441 00003A44 74F9                <2> 	je findnonspaceprog
  4442 00003A46 4F                  <2> 	dec edi
  4443 00003A47 FFD3                <2> 	call ebx
  4444 00003A49 C3                  <2> 	ret
  4445                              <2> runelf:
  4446 00003A4A 8B3D[1F310000]      <2> 	mov edi, [currentcommandloc]
  4447 00003A50 81C702000000        <2> 	add edi, 2
  4448 00003A56 81C380000000        <2> 	add ebx, 0x80
  4449 00003A5C 89E5                <2> 	mov ebp, esp
  4450 00003A5E FFE3                <2> 	jmp ebx
  4451                              <2> noprogfound:
  4452 00003A60 BE[A8790000]        <2> 	mov esi, notfound1
  4453 00003A65 E8F9E8FFFF          <2> 	call print
  4454 00003A6A 8B35[1F310000]      <2> 	mov esi, [currentcommandloc]
  4455 00003A70 81C602000000        <2> 	add esi, 2
  4456 00003A76 E8E8E8FFFF          <2> 	call print
  4457 00003A7B BE[B2790000]        <2> 	mov esi, notfound2
  4458 00003A80 E8DEE8FFFF          <2> 	call print
  4459 00003A85 C3                  <2> 	ret
  4460                              <2> progbatchfound:
  4461 00003A86 BF00004000          <2> 		mov edi, 0x400000
  4462 00003A8B C605[01B60000]01    <2> 		mov byte [BATCHISON], 1
  4463                              <2> 	batchrunloop:
  4464 00003A92 E8BBF3FFFF          <2> 		call buftxtclear
  4465 00003A97 BE[11CA0000]        <2> 		mov esi, buftxt
  4466 00003A9C 8935[1F310000]      <2> 		mov [currentcommandloc], esi
  4467                              <2> 	batchrunloop2:
  4468 00003AA2 B10A                <2> 		mov cl, 10
  4469 00003AA4 B50D                <2> 		mov ch, 13
  4470 00003AA6 380F                <2> 		cmp [edi], cl
  4471 00003AA8 0F8419000000        <2> 		je near nxtbatchrunline
  4472 00003AAE 382F                <2> 		cmp [edi], ch
  4473 00003AB0 0F8411000000        <2> 		je near nxtbatchrunline
  4474 00003AB6 803F00              <2> 		cmp byte [edi], 0
  4475 00003AB9 0F8408000000        <2> 		je near nxtbatchrunline
  4476 00003ABF 8A07                <2> 		mov al, [edi]
  4477 00003AC1 8806                <2> 		mov [esi], al
  4478 00003AC3 46                  <2> 		inc esi
  4479 00003AC4 47                  <2> 		inc edi
  4480 00003AC5 EBDB                <2> 		jmp batchrunloop2
  4481                              <2> 	nxtbatchrunline:
  4482 00003AC7 47                  <2> 		inc edi
  4483 00003AC8 380F                <2> 		cmp [edi], cl
  4484 00003ACA 74FB                <2> 		je nxtbatchrunline
  4485 00003ACC 382F                <2> 		cmp [edi], ch
  4486 00003ACE 74F7                <2> 		je nxtbatchrunline
  4487 00003AD0 893D[2E3B0000]      <2> 		mov [batchedi], edi
  4488 00003AD6 893D[FDB50000]      <2> 		mov [BATCHPOS], edi
  4489 00003ADC C60600              <2> 		mov byte [esi], 0
  4490 00003ADF BE[11CA0000]        <2> 		mov esi, buftxt
  4491 00003AE4 803E00              <2> 		cmp byte [esi], 0
  4492 00003AE7 0F8439000000        <2> 		je near nobatchfoundrun
  4493 00003AED 31DB                <2> 		xor ebx, ebx
  4494 00003AEF 8A1D[98B50000]      <2> 		mov bl, [IFON]
  4495 00003AF5 80FB00              <2> 		cmp bl, 0
  4496 00003AF8 0F8534000000        <2> 		jne near iftestbatch
  4497                              <2> 	doneiftest:
  4498 00003AFE 803D[043C0000]00    <2> 		cmp byte [runnextline], 0
  4499 00003B05 0F8405000000        <2> 		je near noruniftest
  4500 00003B0B E831F5FFFF          <2> 		call run
  4501                              <2> 	noruniftest:
  4502 00003B10 C605[043C0000]01    <2> 		mov byte [runnextline], 1
  4503 00003B17 8B3D[2E3B0000]      <2> 		mov edi, [batchedi]
  4504 00003B1D 803F00              <2> 		cmp byte [edi], 0
  4505 00003B20 0F856CFFFFFF        <2> 		jne near batchrunloop
  4506                              <2> 	nobatchfoundrun:
  4507 00003B26 C605[01B60000]00    <2> 		mov byte [BATCHISON], 0
  4508 00003B2D C3                  <2> 		ret
  4509                              <2> 	
  4510 00003B2E 00000000            <2> batchedi dd 0	
  4511                              <2> 	
  4512                              <2> 	iftestbatch:
  4513 00003B32 BE[99B50000]        <2> 		mov esi, IFTRUE
  4514 00003B37 01DE                <2> 		add esi, ebx
  4515 00003B39 803E00              <2> 		cmp byte [esi], 0
  4516 00003B3C 0F85BCFFFFFF        <2> 		jne near doneiftest
  4517 00003B42 881D[053C0000]      <2> 		mov [iffalsebuf], bl
  4518 00003B48 803D[02B60000]01    <2> 		cmp byte [LOOPON], 1
  4519 00003B4F 0F8513000000        <2> 		jne near fifindbatch
  4520 00003B55 E938FFFFFF          <2> 		jmp batchrunloop
  4521                              <2> 	elsetestbatch:
  4522 00003B5A C60601              <2> 		mov byte [esi], 1
  4523 00003B5D 81C705000000        <2> 		add edi, 5
  4524 00003B63 E92AFFFFFF          <2> 		jmp batchrunloop
  4525                              <2> 	fifindbatch:
  4526 00003B68 66B96966            <2> 		mov cx, "if"
  4527 00003B6C 66B86669            <2> 		mov ax, "fi"
  4528 00003B70 663907              <2> 		cmp [edi], ax
  4529 00003B73 0F8424000000        <2> 		je near fifoundbatch
  4530 00003B79 66390F              <2> 		cmp [edi], cx
  4531 00003B7C 0F8465000000        <2> 		je near iffoundbatch
  4532 00003B82 803F00              <2> 		cmp byte [edi], 0
  4533 00003B85 0F8412000000        <2> 		je near fifoundbatch
  4534 00003B8B B8656C7365          <2> 		mov eax, "else"
  4535 00003B90 3907                <2> 		cmp [edi], eax
  4536 00003B92 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4537 00003B98 E973FFFFFF          <2> 		jmp noruniftest
  4538                              <2> 	fifoundbatch:
  4539 00003B9D 81C702000000        <2> 		add edi, 2
  4540 00003BA3 B00A                <2> 		mov al, 10
  4541 00003BA5 3807                <2> 		cmp [edi], al
  4542 00003BA7 0F840B000000        <2> 		je near goodfibatch
  4543 00003BAD 803F00              <2> 		cmp byte [edi], 0
  4544 00003BB0 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4545 00003BB6 EBB0                <2> 		jmp fifindbatch
  4546                              <2> 	goodfibatch:
  4547 00003BB8 B001                <2> 		mov al, 1
  4548 00003BBA 2805[98B50000]      <2> 		sub [IFON], al 
  4549 00003BC0 A0[98B50000]        <2> 		mov al, [IFON]
  4550 00003BC5 8A1D[053C0000]      <2> 		mov bl, [iffalsebuf]
  4551 00003BCB 38D8                <2> 		cmp al, bl
  4552 00003BCD 7799                <2> 		ja fifindbatch
  4553 00003BCF 8B35[1F310000]      <2> 		mov esi, [currentcommandloc]
  4554 00003BD5 81EF02000000        <2> 		sub edi, 2
  4555 00003BDB C605[043C0000]00    <2> 		mov byte [runnextline], 0
  4556 00003BE2 E9ABFEFFFF          <2> 		jmp batchrunloop
  4557                              <2> 	iffoundbatch:
  4558 00003BE7 B020                <2> 		mov al, ' '
  4559 00003BE9 81C702000000        <2> 		add edi, 2
  4560 00003BEF 3807                <2> 		cmp [edi], al
  4561 00003BF1 0F8571FFFFFF        <2> 		jne near fifindbatch
  4562 00003BF7 B001                <2> 		mov al, 1
  4563 00003BF9 0005[98B50000]      <2> 		add [IFON], al
  4564 00003BFF E964FFFFFF          <2> 		jmp fifindbatch
  4565                              <2> 		
  4566                              <2> 		
  4567 00003C04 01                  <2> runnextline db 1
  4568 00003C05 00                  <2> iffalsebuf db 0
  4569                              <2> 
  4570 00003C06 C3                  <2> notbatch: ret 
  4571                              <1> 
  4572                              <1> %include 'source/programs/arp.asm'
  4573 00003C07 FF2C61727000        <2> db 255,44,"arp",0	;if only this worked
  4574 00003C0D E812330000          <2> 	call arptest
  4575 00003C12 C3                  <2> 	ret
  4576                              <2> 	
  4577                              <1> %include 'source/programs/batch.asm'
  4578 00003C13 FF2C626174636800    <2> db 255,44,"batch",0
  4579                              <2> 	batchst: 
  4580 00003C1B 8B3D[1F310000]      <2> 		mov edi, [currentcommandloc]
  4581 00003C21 81C706000000        <2> 		add edi, 6
  4582 00003C27 803F00              <2> 		cmp byte [edi], 0
  4583 00003C2A 0F846D000000        <2> 		je near nonamefound
  4584 00003C30 BE00004000          <2> 		mov esi, 0x400000
  4585 00003C35 E85C360000          <2> 		call loadfile
  4586 00003C3A 89D0                <2> 		mov eax, edx
  4587 00003C3C 3D94010000          <2> 		cmp eax, 404
  4588 00003C41 7465                <2> 		je goodbatchname
  4589 00003C43 BE[4E3C0000]        <2> 		mov esi, badbatchname
  4590 00003C48 E816E7FFFF          <2> 		call print
  4591 00003C4D C3                  <2> 		ret
  4592 00003C4E 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4593 00003C57 20616C726561647920- <2>
  4594 00003C60 657869737473210A00  <2>
  4595 00003C69 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4596 00003C72 746F20747970652061- <2>
  4597 00003C7B 206E616D6520616674- <2>
  4598 00003C84 65722074686520636F- <2>
  4599 00003C8D 6D6D616E642E0A00    <2>
  4600 00003C95 00000000            <2> 		esicache3 dd 0
  4601 00003C99 00000000            <2> 		esicache2 dd 0
  4602                              <2> 	nonamefound:
  4603 00003C9D BE[693C0000]        <2> 		mov esi, namenotfoundbatch
  4604 00003CA2 E8BCE6FFFF          <2> 		call print
  4605 00003CA7 C3                  <2> 		ret
  4606                              <2> 	goodbatchname:
  4607 00003CA8 BE00004000          <2> 		mov esi, 0x400000
  4608                              <2> 	batchcreate:
  4609 00003CAD 8935[953C0000]      <2> 		mov [esicache3], esi
  4610 00003CB3 BF00008000          <2> 		mov edi, 0x800000
  4611 00003CB8 B00A                <2> 		mov al, 10
  4612 00003CBA B307                <2> 		mov bl, 7
  4613 00003CBC B404                <2> 		mov ah, 4
  4614 00003CBE CD30                <2> 		int 30h
  4615 00003CC0 8935[993C0000]      <2> 		mov [esicache2], esi
  4616 00003CC6 8A0E                <2> 		mov cl, [esi]
  4617 00003CC8 8B35[953C0000]      <2> 		mov esi, [esicache3]
  4618 00003CCE BB[023D0000]        <2> 		mov ebx, exitword
  4619 00003CD3 E886F4FFFF          <2> 		call cndtest
  4620 00003CD8 3C01                <2> 		cmp al, 1
  4621 00003CDA 7411                <2> 		je endbatchcreate
  4622 00003CDC 3C02                <2> 		cmp al, 2
  4623 00003CDE 740D                <2> 		je endbatchcreate
  4624 00003CE0 8B35[993C0000]      <2> 		mov esi, [esicache2]
  4625 00003CE6 B00A                <2> 		mov al, 10
  4626 00003CE8 8806                <2> 		mov [esi], al
  4627 00003CEA 46                  <2> 		inc esi
  4628 00003CEB EBC0                <2> 		jmp batchcreate
  4629                              <2> 	endbatchcreate:
  4630 00003CED 8B35[953C0000]      <2> 		mov esi, [esicache3]
  4631 00003CF3 31C0                <2> 		xor eax, eax
  4632 00003CF5 8806                <2> 		mov [esi], al
  4633 00003CF7 BE00004000          <2> 		mov esi, 0x400000
  4634 00003CFC E862E6FFFF          <2> 		call print
  4635 00003D01 C3                  <2> 		ret
  4636                              <2> 	
  4637 00003D02 5C7800              <2> 	exitword db "\x",0
  4638 00003D05 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4639 00003D0E 6F20657869742E0A00  <2>
  4640                              <1> %include 'source/programs/beep.asm'
  4641 00003D17 FF2C6265657000      <2> 	db 255,44,"beep",0
  4642 00003D1E B8[433D0000]        <2> 	mov eax, beepstart
  4643 00003D23 A3[89060000]        <2> 	mov [soundpos], eax
  4644 00003D28 B8[473D0000]        <2> 	mov eax, beepend
  4645 00003D2D A3[8D060000]        <2> 	mov [soundendpos], eax
  4646 00003D32 C605[86060000]01    <2> 	mov byte [soundon], 1
  4647                              <2> waitforsoundendbeep:
  4648 00003D39 A0[86060000]        <2> 	mov al, [soundon]
  4649 00003D3E 3C00                <2> 	cmp al, 0
  4650 00003D40 75F7                <2> 	jne waitforsoundendbeep
  4651 00003D42 C3                  <2> 	ret
  4652                              <2> 	
  4653                              <2> beepstart:
  4654 00003D43 3200D111            <2> 	dw 50, 4561
  4655                              <2> beepend:
  4656                              <1> %include 'source/programs/charmap.asm'
  4657 00003D47 FF2C636861727300    <2> db 255,44,"chars",0
  4658 00003D4F 66BB0700            <2> 	mov bx, 7
  4659 00003D53 B020                <2> 	mov al, " "
  4660 00003D55 E8EDEAFFFF          <2> 	call prcharq
  4661 00003D5A E8E8EAFFFF          <2> 	call prcharq
  4662 00003D5F E8E3EAFFFF          <2> 	call prcharq
  4663 00003D64 E8DEEAFFFF          <2> 	call prcharq
  4664 00003D69 B030                <2> 	mov al, "0"
  4665                              <2> charmapnumprnt:
  4666 00003D6B E8D7EAFFFF          <2> 	call prcharq
  4667 00003D70 FEC0                <2> 	inc al
  4668 00003D72 6650                <2> 	push ax
  4669 00003D74 B020                <2> 	mov al, " "
  4670 00003D76 E8CCEAFFFF          <2> 	call prcharq
  4671 00003D7B 6658                <2> 	pop ax
  4672 00003D7D 3C39                <2> 	cmp al, "9"
  4673 00003D7F 76EA                <2> 	jbe charmapnumprnt
  4674 00003D81 B041                <2> 	mov al, "A"
  4675                              <2> charmapnumprnt2:
  4676 00003D83 E8BFEAFFFF          <2> 	call prcharq
  4677 00003D88 FEC0                <2> 	inc al
  4678 00003D8A 6650                <2> 	push ax
  4679 00003D8C B020                <2> 	mov al, " "
  4680 00003D8E E8B4EAFFFF          <2> 	call prcharq
  4681 00003D93 6658                <2> 	pop ax
  4682 00003D95 3C47                <2> 	cmp al, "G"
  4683 00003D97 72EA                <2> 	jb charmapnumprnt2
  4684                              <2> 	
  4685 00003D99 BE[E6790000]        <2> 	mov esi, line
  4686 00003D9E E8AEE5FFFF          <2> 	call printquiet
  4687 00003DA3 6631C0              <2> 	xor ax, ax
  4688 00003DA6 88C1                <2> 	mov cl, al
  4689 00003DA8 E885F5FFFF          <2> 	call showhexsmall
  4690 00003DAD E955000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  4691                              <2> charmapcopy:
  4692 00003DB2 FEC0                <2> 	inc al
  4693 00003DB4 6650                <2> 	push ax
  4694 00003DB6 3C08                <2> 	cmp al, 8
  4695 00003DB8 744D                <2> 	je charmapnocopy
  4696 00003DBA 3C09                <2> 	cmp al, 9
  4697 00003DBC 7449                <2> 	je charmapnocopy
  4698 00003DBE 3C0A                <2> 	cmp al, 10
  4699 00003DC0 7445                <2> 	je charmapnocopy
  4700 00003DC2 3C0D                <2> 	cmp al, 13
  4701 00003DC4 7441                <2> 	je charmapnocopy
  4702 00003DC6 3CFF                <2> 	cmp al, 255
  4703 00003DC8 743D                <2> 	je charmapnocopy
  4704 00003DCA 3C00                <2> 	cmp al, 0
  4705 00003DCC 7434                <2> 	je nomorecharmap
  4706 00003DCE E874EAFFFF          <2> 	call prcharq
  4707 00003DD3 B020                <2> 	mov al, " "
  4708 00003DD5 E86DEAFFFF          <2> 	call prcharq
  4709 00003DDA 6658                <2> 	pop ax
  4710                              <2> charmapcopycheck:
  4711 00003DDC FEC4                <2> 	inc ah
  4712 00003DDE 80FC10              <2> 	cmp ah, 16
  4713 00003DE1 72CF                <2> 	jb charmapcopy
  4714 00003DE3 6650                <2> 	push ax
  4715 00003DE5 BE[E6790000]        <2> 	mov esi, line
  4716 00003DEA E862E5FFFF          <2> 	call printquiet
  4717 00003DEF 6658                <2> 	pop ax
  4718 00003DF1 3CFF                <2> 	cmp al, 255
  4719 00003DF3 740D                <2> 	je nomorecharmap
  4720 00003DF5 88C1                <2> 	mov cl, al
  4721 00003DF7 FEC1                <2> 	inc cl
  4722 00003DF9 E834F5FFFF          <2> 	call showhexsmall
  4723 00003DFE 30E4                <2> 	xor ah, ah
  4724 00003E00 EBB0                <2> 	jmp charmapcopy
  4725                              <2> nomorecharmap:
  4726 00003E02 E96EF0FFFF          <2> 	jmp nwcmd
  4727                              <2> charmapnocopy:
  4728 00003E07 6650                <2> 	push ax
  4729 00003E09 B020                <2> 	mov al, " "
  4730 00003E0B E837EAFFFF          <2> 	call prcharq
  4731 00003E10 E832EAFFFF          <2> 	call prcharq
  4732 00003E15 6658                <2> 	pop ax
  4733 00003E17 EBC3                <2> 	jmp charmapcopycheck
  4734                              <1> %include 'source/programs/clear.asm'
  4735 00003E19 FF2C636C65617200    <2> db 255,44,"clear",0
  4736 00003E21 E8C1E5FFFF          <2> 		call clear
  4737 00003E26 C3                  <2> 		ret 
  4738                              <1> %include 'source/programs/cpuid.asm'
  4739 00003E27 FF2C637075696400    <2> db 255,44,"cpuid",0
  4740 00003E2F 31C0                <2> 	xor eax, eax
  4741 00003E31 0FA2                <2> 	cpuid
  4742 00003E33 891D[843E0000]      <2> 	mov [cpuidbuf], ebx
  4743 00003E39 8915[883E0000]      <2> 	mov [cpuidbuf + 4], edx
  4744 00003E3F 890D[8C3E0000]      <2> 	mov [cpuidbuf + 8], ecx
  4745 00003E45 BE[843E0000]        <2> 	mov esi, cpuidbuf
  4746 00003E4A E814E5FFFF          <2> 	call print
  4747 00003E4F BE[E6790000]        <2> 	mov esi, line
  4748 00003E54 E80AE5FFFF          <2> 	call print
  4749 00003E59 B801000000          <2> 	mov eax, 1
  4750 00003E5E 0FA2                <2> 	cpuid
  4751 00003E60 89C1                <2> 	mov ecx, eax
  4752 00003E62 C605[31330000]02    <2> 	mov byte [firsthexshown], 2
  4753 00003E69 E8D8F4FFFF          <2> 	call showhex
  4754 00003E6E B808000080          <2> 	mov eax, 0x80000008
  4755 00003E73 0FA2                <2> 	cpuid
  4756 00003E75 89C1                <2> 	mov ecx, eax
  4757 00003E77 C605[31330000]02    <2> 	mov byte [firsthexshown], 2
  4758 00003E7E E8C3F4FFFF          <2> 	call showhex
  4759 00003E83 C3                  <2> 	ret
  4760                              <2> 	
  4761 00003E84 00<rept>            <2> cpuidbuf times 13 db 0
  4762                              <2> cpuidvendorend:
  4763                              <1> %include 'source/programs/dos.asm'
  4764 00003E91 FF2C646F7300        <2> db 255,44,"dos",0
  4765                              <2> rundosprog:
  4766 00003E97 8B3D[1F310000]      <2> 	mov edi, [currentcommandloc]
  4767 00003E9D 81C704000000        <2> 	add edi, 4
  4768 00003EA3 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  4769 00003EA8 E8E9330000          <2> 	call loadfile
  4770 00003EAD 8B3D[1F310000]      <2> 	mov edi, [currentcommandloc]
  4771 00003EB3 81C704000000        <2> 	add edi, 4
  4772 00003EB9 81FA94010000        <2> 	cmp edx, 404
  4773 00003EBF 0F8453000000        <2> 	je near dosnoprogfound
  4774 00003EC5 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  4775 00003ECA 31C9                <2> 	xor ecx, ecx
  4776                              <2> finddosparams:
  4777 00003ECC 47                  <2> 	inc edi
  4778 00003ECD 8A07                <2> 	mov al, [edi]
  4779 00003ECF 3C20                <2> 	cmp al, " "
  4780 00003ED1 75F9                <2> 	jne finddosparams
  4781                              <2> copydosparams:
  4782 00003ED3 8A07                <2> 	mov al, [edi]
  4783 00003ED5 8803                <2> 	mov [ebx], al
  4784 00003ED7 43                  <2> 	inc ebx
  4785 00003ED8 47                  <2> 	inc edi
  4786 00003ED9 41                  <2> 	inc ecx
  4787 00003EDA 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  4788 00003EE0 7304                <2> 	jae nomoredosparams
  4789 00003EE2 3C00                <2> 	cmp al, 0
  4790 00003EE4 75ED                <2> 	jne copydosparams
  4791                              <2> nomoredosparams:
  4792 00003EE6 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  4793 00003EEC 66B85000            <2> 	mov ax, DOS_DATA_SEL
  4794 00003EF0 8ED8                <2> 	mov ds, ax
  4795 00003EF2 8EC0                <2> 	mov es, ax
  4796 00003EF4 8EE0                <2> 	mov fs, ax
  4797 00003EF6 8EE8                <2> 	mov gs, ax
  4798 00003EF8 31C0                <2> 	xor eax, eax
  4799 00003EFA 31DB                <2> 	xor ebx, ebx
  4800 00003EFC 31C9                <2> 	xor ecx, ecx
  4801 00003EFE 31D2                <2> 	xor edx, edx
  4802 00003F00 31FF                <2> 	xor edi, edi
  4803 00003F02 31F6                <2> 	xor esi, esi
  4804 00003F04 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  4805 00003F0B 3C00                <2> 	cmp al, 0
  4806 00003F0D 0F85D8E3FFFF        <2> 	jne near warnexitstatus
  4807 00003F13 E95DEFFFFF          <2> 	jmp nwcmd
  4808                              <2> dosnoprogfound:
  4809 00003F18 BE[A8790000]        <2> 	mov esi, notfound1
  4810 00003F1D E841E4FFFF          <2> 	call print
  4811 00003F22 8B35[1F310000]      <2> 	mov esi, [currentcommandloc]
  4812 00003F28 81C604000000        <2> 	add esi, 4
  4813 00003F2E E830E4FFFF          <2> 	call print
  4814 00003F33 BE[B2790000]        <2> 	mov esi, notfound2
  4815 00003F38 E826E4FFFF          <2> 	call print
  4816 00003F3D C3                  <2> 	ret
  4817                              <2> 	
  4818                              <1> %include 'source/programs/dump.asm'
  4819 00003F3E FF2C64756D7000      <2> db 255,44,"dump",0
  4820 00003F45 8B35[1F310000]      <2> 	mov esi, [currentcommandloc]
  4821 00003F4B 81C605000000        <2> 	add esi, 5
  4822 00003F51 31C9                <2> 	xor ecx, ecx
  4823 00003F53 66B83078            <2> 	mov ax, "0x"
  4824 00003F57 663906              <2> 	cmp [esi], ax
  4825 00003F5A 740A                <2> 	je dumphexin
  4826 00003F5C E891F5FFFF          <2> 	call cnvrttxt
  4827 00003F61 E910000000          <2> 	jmp dumphexnow
  4828                              <2> dumphexin:
  4829 00003F66 81C602000000        <2> 	add esi, 2
  4830 00003F6C E838F5FFFF          <2> 	call cnvrthextxt
  4831 00003F71 E900000000          <2> 	jmp dumphexnow
  4832                              <2> dumphexnow:
  4833 00003F76 89CF                <2> 	mov edi, ecx
  4834 00003F78 89FE                <2> 	mov esi, edi
  4835 00003F7A 81C680030000        <2> 	add esi, 896
  4836                              <2> dumphexloop:
  4837 00003F80 8B0F                <2> 	mov ecx, [edi]
  4838 00003F82 C605[31330000]05    <2> 	mov byte [firsthexshown],5
  4839 00003F89 E8B8F3FFFF          <2> 	call showhex
  4840 00003F8E 81C704000000        <2> 	add edi, 4
  4841 00003F94 39F7                <2> 	cmp edi, esi
  4842 00003F96 72E8                <2> 	jb dumphexloop
  4843 00003F98 E803EBFFFF          <2> 	call termcopy
  4844 00003F9D C3                  <2> 	ret 
  4845                              <1> %include 'source/programs/echo.asm'
  4846                              <2> 
  4847 00003F9E FF2C6563686F00      <2> db 255,44,"echo",0
  4848                              <2> 	echoprog:
  4849 00003FA5 8B35[1F310000]      <2> 		mov esi, [currentcommandloc]
  4850 00003FAB 81C605000000        <2> 		add esi, 5
  4851 00003FB1 8A06                <2> 		mov al, [esi]
  4852 00003FB3 E8ABE3FFFF          <2> 		call print
  4853 00003FB8 BE[E6790000]        <2> 		mov esi, line
  4854 00003FBD E8A1E3FFFF          <2> 		call print
  4855 00003FC2 C3                  <2> 		ret
  4856 00003FC3 BB[07B60000]        <2> 	echovr:	mov ebx, variables
  4857 00003FC8 BF06000000          <2> 		mov edi, 6
  4858 00003FCD E83C000000          <2> 		call nxtvrech
  4859 00003FD2 E954000000          <2> 		jmp prntvr2
  4860 00003FD7 B13D                <2> 	echvar:	mov cl, '='
  4861 00003FD9 43                  <2> 		inc ebx
  4862 00003FDA 8A03                <2> 		mov al, [ebx]
  4863 00003FDC 3C00                <2> 		cmp al, 0
  4864 00003FDE 742E                <2> 		je nxtvrech
  4865 00003FE0 3C3D                <2> 		cmp al, '='
  4866 00003FE2 7422                <2> 		je nxtvrechb1
  4867 00003FE4 8B35[1F310000]      <2> 		mov esi, [currentcommandloc]
  4868 00003FEA 01FE                <2> 		add esi, edi
  4869 00003FEC E86DF1FFFF          <2> 		call cndtest
  4870 00003FF1 3C02                <2> 		cmp al, 2
  4871 00003FF3 7432                <2> 		je prntvr
  4872 00003FF5 3C01                <2> 		cmp al, 1
  4873 00003FF7 742E                <2> 		je prntvr
  4874 00003FF9 8B35[1F310000]      <2> 		mov esi, [currentcommandloc]
  4875 00003FFF 01FE                <2> 		add esi, edi
  4876 00004001 E908000000          <2> 		jmp nxtvrech
  4877                              <2> 	nxtvrechb1:
  4878 00004006 81EB02000000        <2> 		sub ebx, 2
  4879 0000400C EBC9                <2> 		jmp echvar
  4880 0000400E 8A03                <2> 	nxtvrech: mov al, [ebx]
  4881 00004010 3C05                <2> 		cmp al, 5
  4882 00004012 740A                <2> 		je nxtvrec2
  4883 00004014 43                  <2> 		inc ebx
  4884 00004015 81FB[07C60000]      <2> 		cmp ebx, varend
  4885 0000401B 72F1                <2> 		jb nxtvrech
  4886 0000401D C3                  <2> 		ret
  4887 0000401E 43                  <2> 	nxtvrec2: inc ebx
  4888 0000401F 8A03                <2> 		mov al, [ebx]
  4889 00004021 3C04                <2> 		cmp al, 4
  4890 00004023 74B2                <2> 		je echvar
  4891 00004025 EBE7                <2> 		jmp nxtvrech
  4892 00004027 43                  <2> 	prntvr: inc ebx
  4893 00004028 89DE                <2> 		mov esi, ebx
  4894 0000402A C3                  <2> 		ret
  4895 0000402B E833E3FFFF          <2> 	prntvr2: call print
  4896 00004030 BE[E6790000]        <2> 		mov esi, line
  4897 00004035 E829E3FFFF          <2> 		call print
  4898 0000403A C3                  <2> 		ret 
  4899                              <1> %include 'source/programs/else.asm'
  4900 0000403B FF2C656C736500      <2> 	db 255,44,"else",0
  4901 00004042 31C0                <2> elsecmd:	xor eax, eax
  4902 00004044 3805[01B60000]      <2> 	cmp [BATCHISON], al
  4903 0000404A 0F84B6FBFFFF        <2> 	je near notbatch
  4904 00004050 A0[98B50000]        <2> 	mov al, [IFON]
  4905 00004055 BE[99B50000]        <2> 	mov esi, IFTRUE
  4906 0000405A 01C6                <2> 	add esi, eax
  4907 0000405C 8A06                <2> 	mov al, [esi]
  4908 0000405E 3401                <2> 	xor al, 1
  4909 00004060 8806                <2> 	mov [esi], al
  4910 00004062 C3                  <2> 	ret 
  4911                              <1> %include 'source/programs/fi.asm'
  4912 00004063 FF2C666900          <2> 	db 255,44,"fi",0
  4913 00004068 30C0                <2> 	xor al, al
  4914 0000406A 3805[01B60000]      <2> 	cmp [BATCHISON], al
  4915 00004070 0F8490FBFFFF        <2> 	je near notbatch
  4916 00004076 B001                <2> fi:	mov al, 1
  4917 00004078 2805[98B50000]      <2> 	sub [IFON],al
  4918 0000407E C3                  <2> 	ret 
  4919                              <1> %include 'source/programs/gui.asm'
  4920 0000407F FF2C67756900        <2> db 255,44,"gui",0
  4921                              <2> guiswitcher:
  4922 00004085 8B35[1F310000]      <2> 	mov esi, [currentcommandloc]
  4923 0000408B 81C604000000        <2> 	add esi, 4
  4924 00004091 31C9                <2> 	xor ecx, ecx
  4925 00004093 803E00              <2> 	cmp byte [esi], 0
  4926 00004096 740A                <2> 	je .nomodepref
  4927 00004098 E80CF4FFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  4928 0000409D E907000000          <2> 	jmp .modepref
  4929                              <2> .nomodepref:
  4930 000040A2 51                  <2> 	push ecx
  4931 000040A3 E83FE3FFFF          <2> 	call clear
  4932 000040A8 59                  <2> 	pop ecx
  4933                              <2> .modepref:
  4934 000040A9 66BB[4000]          <2> 	mov bx, guiswitch
  4935 000040AD 66891D[33110000]    <2> 	mov [realmodeptr], bx
  4936 000040B4 BB[C4400000]        <2> 	mov ebx, guiswitchret
  4937 000040B9 891D[2F110000]      <2> 	mov [realmodereturn], ebx
  4938 000040BF E954CFFFFF          <2> 	jmp realmode
  4939                              <2> guiswitchret:
  4940 000040C4 65803D[1D8D0000]01  <2> 	cmp byte [gs:guion], 1
  4941 000040CC 7401                <2> 	je .cont
  4942 000040CE C3                  <2> 	ret
  4943                              <2> .cont:
  4944 000040CF BF[1B8A0000]        <2> 	mov edi, VBEMODEBLOCK
  4945                              <2> .loop:
  4946 000040D4 658B07              <2> 	mov eax, [gs:edi]
  4947 000040D7 8907                <2> 	mov [edi], eax
  4948 000040D9 47                  <2> 	inc edi
  4949 000040DA 81FF[1E8D0000]      <2> 	cmp edi, VBEEND
  4950 000040E0 72F2                <2> 	jb .loop
  4951 000040E2 A1[438C0000]        <2> 	mov eax, [physbaseptr]
  4952 000040E7 2D00001000          <2> 	sub eax, 0x100000
  4953 000040EC A3[438C0000]        <2> 	mov [physbaseptr], eax
  4954 000040F1 C605[45280000]00    <2> 	mov byte [termguion], 0
  4955 000040F8 BE[93AE0000]        <2> 	mov esi, graphicstable
  4956 000040FD 30C0                <2> 	xor al, al
  4957                              <2> .clear:
  4958 000040FF 8806                <2> 	mov [esi], al
  4959 00004101 46                  <2> 	inc esi
  4960 00004102 81FE[93B00000]      <2> 	cmp esi, graphicstableend
  4961 00004108 72F5                <2> 	jb .clear
  4962 0000410A E839170000          <2> 	call guisetup
  4963 0000410F 66C705[616C0000]80- <2> 	mov word [termwindow], 640
  4964 00004117 02                  <2>
  4965 00004118 66C705[636C0000]E0- <2> 	mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  4966 00004120 01                  <2>
  4967 00004121 BE[616C0000]        <2> 	mov esi, termwindow
  4968 00004126 668B15[2D8C0000]    <2> 	mov dx, [resolutionx]
  4969 0000412D 668B0D[2F8C0000]    <2> 	mov cx, [resolutiony]
  4970 00004134 6681EA8002          <2> 	sub dx, 640
  4971 00004139 6681E9E001          <2> 	sub cx, 480
  4972 0000413E 66D1EA              <2> 	shr dx, 1 ;x location-this centers the window
  4973 00004141 66D1E9              <2> 	shr cx, 1 ;y location-this centers the window	
  4974 00004144 BB[752E0000]        <2> 	mov ebx, nwcmd
  4975 00004149 6631C0              <2> 	xor ax, ax
  4976 0000414C E823220000          <2> 	call showwindow
  4977 00004151 E8D80F0000          <2> 	call cursorgui
  4978 00004156 E88CE2FFFF          <2> 	call clear
  4979 0000415B C3                  <2> 	ret
  4980                              <2> 	
  4981                              <1> %include 'source/programs/help.asm'
  4982 0000415C FF2C68656C7000      <2> db 255,44,"help",0
  4983                              <2> lscmd:	
  4984 00004163 B00D                <2> 		mov al, 13
  4985 00004165 E8DDE6FFFF          <2> 		call prcharq
  4986 0000416A BE[75350000]        <2> 		mov esi, progstart
  4987 0000416F BB[C24C0000]        <2> 		mov ebx, progend
  4988 00004174 BE[93B10000]        <2> dir:	mov esi, fileindex
  4989 00004179 8A06                <2> 	dirnxt:	mov al, [esi]
  4990 0000417B 30E4                <2> 		xor ah, ah
  4991 0000417D 3CFF                <2> 		cmp al, 255
  4992 0000417F 7415                <2> 		je dirfnd
  4993 00004181 46                  <2> 		inc esi
  4994 00004182 81FE[93B50000]      <2> 		cmp esi,  fileindexend
  4995 00004188 7339                <2> 		jae dirdn
  4996 0000418A EBED                <2> 		jmp dirnxt
  4997                              <2> 	dirfnd3:
  4998 0000418C 46                  <2> 		inc esi
  4999 0000418D 81FE[93B50000]      <2> 		cmp esi, fileindexend
  5000 00004193 76E4                <2> 		jbe dirnxt
  5001 00004195 4E                  <2> 		dec esi
  5002 00004196 46                  <2> 	dirfnd:	inc esi
  5003 00004197 8A06                <2> 		mov al, [esi]
  5004 00004199 30E4                <2> 		xor ah, ah
  5005 0000419B 3C2C                <2> 		cmp al, 44
  5006 0000419D 740B                <2> 		je dirfnd2
  5007 0000419F 46                  <2> 		inc esi
  5008 000041A0 81FE[93B50000]      <2> 		cmp esi,  fileindexend
  5009 000041A6 731B                <2> 		jae dirdn
  5010 000041A8 EBCF                <2> 		jmp dirnxt
  5011 000041AA 46                  <2> 	dirfnd2: inc esi
  5012 000041AB E8A1E1FFFF          <2> 		call printquiet
  5013 000041B0 56                  <2> 		push esi
  5014 000041B1 B009                <2> 		mov al, 9
  5015 000041B3 E88FE6FFFF          <2> 		call prcharq
  5016 000041B8 5E                  <2> 		pop esi
  5017 000041B9 81FE[93B50000]      <2> 		cmp esi,  fileindexend
  5018 000041BF 7302                <2> 		jae dirdn
  5019 000041C1 EBB6                <2> 		jmp dirnxt
  5020 000041C3 BE[E6790000]        <2> 	dirdn:	mov esi, line
  5021 000041C8 E896E1FFFF          <2> 			call print
  5022 000041CD C3                  <2> 			ret
  5023 000041CE 00                  <2> currentdir db 0
  5024                              <1> %include 'source/programs/if.asm'
  5025 000041CF FF2C696600          <2> 	db 255,44,"if",0
  5026 000041D4 30C0                <2> ifcmd:	xor al, al
  5027 000041D6 3805[01B60000]      <2> 	cmp [BATCHISON], al
  5028 000041DC 0F8424FAFFFF        <2> 	je near notbatch
  5029 000041E2 8B1D[1F310000]      <2> 	mov ebx, [currentcommandloc]
  5030 000041E8 81C303000000        <2> 	add ebx, 3
  5031 000041EE 89DE                <2> 	mov esi, ebx
  5032 000041F0 8A06                <2> chkeqsn: mov al, [esi]
  5033 000041F2 3C00                <2> 	cmp al, 0
  5034 000041F4 0F840CFAFFFF        <2> 	je near notbatch
  5035 000041FA 3C3D                <2> 	cmp al, '='
  5036 000041FC 0F8403000000        <2> 	je near chkeqdn
  5037 00004202 46                  <2> 	inc esi
  5038 00004203 EBEB                <2> 	jmp chkeqsn
  5039 00004205 B000                <2> chkeqdn: mov al, 0 
  5040 00004207 8806                <2> 	mov [esi], al
  5041 00004209 46                  <2> 	inc esi
  5042 0000420A E814EFFFFF          <2> 	call tester
  5043 0000420F 3C01                <2> 	cmp al, 1
  5044 00004211 0F8405000000        <2> 	je near trueif
  5045 00004217 E91C000000          <2> 	jmp falseif
  5046 0000421C 31C0                <2> trueif:	xor eax, eax
  5047 0000421E A0[98B50000]        <2> 	mov al, [IFON]
  5048 00004223 FEC0                <2> 	inc al
  5049 00004225 A2[98B50000]        <2> 	mov [IFON], al
  5050 0000422A 30E4                <2> 	xor ah, ah
  5051 0000422C BE[99B50000]        <2> 	mov esi, IFTRUE
  5052 00004231 01C6                <2> 	add esi, eax
  5053 00004233 B401                <2> 	mov ah, 1
  5054 00004235 8826                <2> 	mov [esi], ah
  5055 00004237 C3                  <2> 	ret 
  5056 00004238 31C0                <2> falseif: xor eax, eax
  5057 0000423A A0[98B50000]        <2> 	mov al, [IFON]
  5058 0000423F FEC0                <2> 	inc al
  5059 00004241 A2[98B50000]        <2> 	mov [IFON], al
  5060 00004246 30E4                <2> 	xor ah, ah
  5061 00004248 BE[99B50000]        <2> 	mov esi, IFTRUE
  5062 0000424D 01C6                <2> 	add esi, eax
  5063 0000424F 30E4                <2> 	xor ah, ah
  5064 00004251 8826                <2> 	mov [esi], ah
  5065 00004253 C3                  <2> 	ret 
  5066                              <1> %include 'source/programs/keycode.asm'
  5067 00004254 FF2C6B65797300      <2> db 255,44,"keys",0
  5068                              <2> keycode:
  5069 0000425B C605[2B280000]00    <2> 	mov byte [trans], 0
  5070 00004262 C605[A8730000]00    <2> 	mov byte [threadson], 0
  5071 00004269 E8D8110000          <2> 	call getkey
  5072 0000426E 31C0                <2> 	xor eax, eax
  5073 00004270 31C9                <2> 	xor ecx, ecx
  5074 00004272 8A0D[26540000]      <2> 	mov cl, [specialkey]
  5075 00004278 80F900              <2> 	cmp cl, 0
  5076 0000427B 0F8405000000        <2> 	je near nospecialkeycode
  5077 00004281 E8ACF0FFFF          <2> 	call showhexsmall
  5078                              <2> nospecialkeycode:
  5079 00004286 66A1[29280000]      <2> 	mov ax, [lastkey]
  5080 0000428C 88E1                <2> 	mov cl, ah
  5081 0000428E E89FF0FFFF          <2> 	call showhexsmall
  5082 00004293 80FC01              <2> 	cmp ah, 1
  5083 00004296 75C3                <2> 	jne keycode
  5084 00004298 C3                  <2> 	ret 
  5085                              <1> %include 'source/programs/logout.asm'
  5086 00004299 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5087 000042A2 E92DEAFFFF          <2> 	jmp os
  5088                              <1> %include 'source/programs/loop.asm'
  5089 000042A7 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5090 000042AE 803D[02B60000]00    <2> 	cmp byte [LOOPON], 0
  5091 000042B5 0F8501000000        <2> 	jne near filoop
  5092 000042BB C3                  <2> 	ret
  5093 000042BC 8B35[03B60000]      <2> filoop: mov esi, [LOOPPOS]
  5094 000042C2 FE0D[98B50000]      <2> 	dec byte [IFON]
  5095 000042C8 C605[02B60000]00    <2> 	mov byte [LOOPON], 0
  5096 000042CF 8935[FDB50000]      <2> 	mov [BATCHPOS], esi
  5097 000042D5 8935[2E3B0000]      <2> 	mov [batchedi], esi
  5098 000042DB C3                  <2> 	ret 
  5099                              <1> %include 'source/programs/ls.asm'
  5100 000042DC FF2C6C7300          <2> db 255,44,"ls",0
  5101 000042E1 BE[1E8D0000]        <2> 		mov esi, diskfileindex
  5102                              <2> 	diskindexdir:
  5103 000042E6 803E5F              <2> 		cmp byte [esi], '_'
  5104 000042E9 7440                <2> 		je nextdiskindexdir
  5105 000042EB E861E0FFFF          <2> 		call printquiet
  5106 000042F0 56                  <2> 		push esi
  5107 000042F1 BE[4B430000]        <2> 		mov esi, disktab
  5108 000042F6 E856E0FFFF          <2> 		call printquiet
  5109 000042FB 5E                  <2> 		pop esi
  5110 000042FC 8B4E05              <2> 		mov ecx, [esi + 5]
  5111 000042FF C605[31330000]05    <2> 		mov byte [firsthexshown], 5
  5112 00004306 E805F1FFFF          <2> 		call showdec
  5113 0000430B 56                  <2> 		push esi
  5114 0000430C BE[E6790000]        <2> 		mov esi, line
  5115 00004311 E83BE0FFFF          <2> 		call printquiet
  5116 00004316 5E                  <2> 		pop esi
  5117 00004317 81C609000000        <2> 		add esi, 9
  5118 0000431D 81FE[938E0000]      <2> 		cmp esi, enddiskfileindex
  5119 00004323 72C1                <2> 		jb diskindexdir
  5120 00004325 E876E7FFFF          <2> 		call termcopy
  5121 0000432A C3                  <2> 		ret
  5122                              <2> 	nextdiskindexdir:
  5123 0000432B 46                  <2> 		inc esi
  5124 0000432C 803E00              <2> 		cmp byte [esi], 0
  5125 0000432F 75FA                <2> 		jne nextdiskindexdir
  5126 00004331 81C609000000        <2> 		add esi, 9
  5127 00004337 81FE[938E0000]      <2> 		cmp esi, enddiskfileindex
  5128 0000433D 72A7                <2> 		jb diskindexdir
  5129 0000433F E85CE7FFFF          <2> 		call termcopy
  5130 00004344 C3                  <2> 		ret
  5131                              <2> 		
  5132 00004345 4469736B2000        <2> 		diskmsg db "Disk ",0
  5133 0000434B 0D09090900          <2> 		disktab db 13,9,9,9,0
  5134                              <1> %include 'source/programs/memory.asm'
  5135 00004350 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  5136 00004359 BE[66020000]        <2> 	mov esi, memlistbuf
  5137 0000435E 31FF                <2> 	xor edi, edi
  5138 00004360 668B3D[A6040000]    <2> 	mov di, [memlistend]
  5139 00004367 01F7                <2> 	add edi, esi
  5140                              <2> printmemmap:
  5141 00004369 8B0E                <2> 	mov ecx, [esi]
  5142 0000436B E8D6EFFFFF          <2> 	call showhex
  5143 00004370 81C608000000        <2> 	add esi, 8
  5144 00004376 8B0E                <2> 	mov ecx, [esi]
  5145 00004378 E8C9EFFFFF          <2> 	call showhex
  5146 0000437D 81C608000000        <2> 	add esi, 8
  5147 00004383 8B0E                <2> 	mov ecx, [esi]
  5148 00004385 E8BCEFFFFF          <2> 	call showhex
  5149 0000438A 81C608000000        <2> 	add esi, 8
  5150 00004390 57                  <2> 	push edi
  5151 00004391 56                  <2> 	push esi
  5152 00004392 BE[E6790000]        <2> 	mov esi, line
  5153 00004397 E8C7DFFFFF          <2> 	call print
  5154 0000439C 5E                  <2> 	pop esi
  5155 0000439D 5F                  <2> 	pop edi
  5156 0000439E 39FE                <2> 	cmp esi, edi
  5157 000043A0 72C7                <2> 	jb printmemmap
  5158 000043A2 C3                  <2> 	ret
  5159                              <2> 	
  5160                              <1> %include 'source/programs/pci.asm'
  5161 000043A3 FF2C70636900        <2> db 255,44,"pci",0
  5162 000043A9 E87B2C0000          <2> 	call pcidump
  5163 000043AE C3                  <2> 	ret 
  5164                              <1> %include 'source/programs/play.asm'
  5165 000043AF FF2C706C617900      <2> db 255,44,"play",0
  5166 000043B6 E801000000          <2> 	call playsync
  5167 000043BB C3                  <2> 	ret
  5168                              <2> playsync:
  5169 000043BC 8B3D[1F310000]      <2> 	mov edi, [currentcommandloc]
  5170 000043C2 81C705000000        <2> 	add edi, 5
  5171 000043C8 BE00004000          <2> 	mov esi, 0x400000
  5172 000043CD E8C42E0000          <2> 	call loadfile
  5173 000043D2 81FA94010000        <2> 	cmp edx, 404
  5174 000043D8 7448                <2> 	je nosoundfound
  5175 000043DA BB00004000          <2> 	mov ebx, 0x400000
  5176 000043DF 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  5177 000043E6 0F84B8000000        <2> 	je near wave_player
  5178 000043EC 66813B534E          <2> 	cmp word [ebx], "SN"
  5179 000043F1 752F                <2> 	jne nosoundfound
  5180 000043F3 81C306000000        <2> 	add ebx, 6
  5181 000043F9 891D[89060000]      <2> 	mov [soundpos], ebx
  5182 000043FF 035BFC              <2> 	add ebx, [ebx - 4]
  5183 00004402 891D[8D060000]      <2> 	mov [soundendpos], ebx
  5184 00004408 66C705[87060000]00- <2> 	mov word [soundrepititions], 0
  5185 00004410 00                  <2>
  5186 00004411 C605[86060000]01    <2> 	mov byte [soundon], 1
  5187                              <2> waitforsoundendplay:
  5188 00004418 A0[86060000]        <2> 	mov al, [soundon]
  5189 0000441D 3C00                <2> 	cmp al, 0
  5190 0000441F 75F7                <2> 	jne waitforsoundendplay
  5191 00004421 C3                  <2> 	ret
  5192                              <2> nosoundfound:
  5193 00004422 BE[48440000]        <2> 	mov esi, notfoundsound
  5194 00004427 E837DFFFFF          <2> 	call print
  5195 0000442C 8B35[1F310000]      <2> 	mov esi, [currentcommandloc]
  5196 00004432 81C605000000        <2> 	add esi, 5
  5197 00004438 E826DFFFFF          <2> 	call print
  5198 0000443D BE[B2790000]        <2> 	mov esi, notfound2
  5199 00004442 E81CDFFFFF          <2> 	call print
  5200 00004447 C3                  <2> 	ret
  5201 00004448 536F756E64202200    <2> notfoundsound db "Sound ",34,0
  5202                              <2> 
  5203                              <2> sbplay:
  5204 00004450 BE00004000          <2> 		mov esi, 0x400000
  5205 00004455 89F3                <2> 		mov ebx, esi
  5206 00004457 81C62C000000        <2> 		add esi, 44
  5207 0000445D 29F7                <2> 		sub edi, esi
  5208 0000445F 66893D[3E4F0000]    <2> 		mov [Length1], di
  5209 00004466 C1EF10              <2> 		shr edi, 16
  5210 00004469 66893D[3C4F0000]    <2> 		mov [Length0], di
  5211 00004470 8B4B18              <2> 		mov ecx, [ebx + 24]
  5212 00004473 890D[494F0000]      <2> 		mov [Freq], ecx
  5213 00004479 31C0                <2> 		xor eax, eax
  5214 0000447B BA00004000          <2> 		mov	edx, 0x400000 ;location of sound
  5215 00004480 81C200080000        <2> 		add edx, 2048
  5216 00004486 01D0                <2> 		add	eax,edx
  5217 00004488 31DB                <2> 		xor ebx, ebx
  5218 0000448A 668B1D[3E4F0000]    <2> 		mov bx, [Length1]
  5219 00004491 01C3                <2> 		add ebx, eax
  5220 00004493 891D[404F0000]      <2> 		mov [NextMemLoc], ebx
  5221 00004499 A3[444F0000]        <2> 		mov	[MemLoc],eax
  5222 0000449E E873090000          <2> 		call DMAPlay
  5223 000044A3 C3                  <2> 		ret
  5224                              <2> 
  5225                              <2> wave_player:
  5226 000044A4 803D[4E4F0000]01    <2> 	cmp byte [SoundBlaster], 1
  5227 000044AB 0F849FFFFFFF        <2> 	je near sbplay
  5228 000044B1 BE00004000          <2> 	mov esi, 0x400000
  5229 000044B6 8B4E18              <2> 	mov ecx, [esi + 24]
  5230 000044B9 66890D[91060000]    <2> 	mov [WAVSamplingRate], cx
  5231 000044C0 29F7                <2> 	sub edi, esi
  5232 000044C2 81EF2C000000        <2> 	sub edi, 44
  5233 000044C8 893D[93060000]      <2> 	mov [WAVFileSize], edi
  5234                              <2> 	;MASK ALL INTS EXCEPT IRQ 0
  5235 000044CE B0FE                <2> 	mov al, 0xFE
  5236 000044D0 E621                <2> 	out 0x21, al
  5237 000044D2 FEC0                <2> 	inc al
  5238 000044D4 E6A1                <2> 	out 0xA1, al
  5239 000044D6 B020                <2> 	mov al, 0x20
  5240 000044D8 E6A0                <2> 	out 0xA0, al
  5241 000044DA E620                <2> 	out 0x20, al
  5242                              <2> 	;SET PIT DIVISOR
  5243 000044DC 31D2                <2> 	xor edx, edx
  5244 000044DE 8B4E18              <2> 	mov ecx, [esi + 24]
  5245 000044E1 B8DE341200          <2> 	mov eax, 1193182
  5246 000044E6 F7F1                <2> 	div ecx ;al should be the proper sample divisor
  5247 000044E8 E640                <2> 	out 0x40, al
  5248 000044EA 66C1C008            <2> 	rol ax, 8
  5249 000044EE E640                <2> 	out 0x40, al
  5250                              <2> 	;GET WAVEDIV
  5251 000044F0 668B1D[91060000]    <2> 	mov bx, [WAVSamplingRate]
  5252 000044F7 66B8DD34            <2> 	mov ax,0x34dd	; The sound lasts until NoSound is called
  5253 000044FB 66BA1200            <2> 	mov dx,0x0012             
  5254 000044FF 66F7F3              <2> 	div bx               
  5255 00004502 66A3[8B4D0000]      <2> 	mov [WAVEDIV],ax
  5256                              <2> 	;PLAY WAVE
  5257 00004508 81C62C000000        <2> 	add esi, 44
  5258 0000450E 0335[6B060000]      <2> 	add esi, [newcodecache]
  5259 00004514 E81D000000          <2> 	call PlayWAV
  5260                              <2> 	;UNMASK ALL INTS
  5261 00004519 30C0                <2> 	xor al, al
  5262 0000451B E621                <2> 	out 0x21, al
  5263 0000451D 30C0                <2> 	xor al, al
  5264 0000451F E6A1                <2> 	out 0xA1, al
  5265 00004521 B020                <2> 	mov al, 0x20
  5266 00004523 E6A0                <2> 	out 0xA0, al
  5267 00004525 E620                <2> 	out 0x20, al
  5268                              <2> 	;RESET PIT DIVISOR
  5269 00004527 66A1[78060000]      <2> 	mov ax, [pitdiv]
  5270 0000452D E640                <2> 	out 0x40, al
  5271 0000452F 66C1C008            <2> 	rol ax, 8
  5272 00004533 E640                <2> 	out 0x40, al
  5273 00004535 C3                  <2> 	ret
  5274                              <2> 	
  5275                              <2> PlayWAV:
  5276 00004536 8B0D[93060000]      <2>    mov ecx,[WAVFileSize]                         ;Sets the loop point
  5277 0000453C C605[97060000]01    <2>    mov byte [EnableDigitized],1	;Tells the irq0 handler to process the routines
  5278                              <2> Play_Repeat:
  5279 00004543 8A06                <2>    mov al, [esi]	;Loads a byte from ESI to AL
  5280 00004545 F4                  <2>    hlt	;Wait for IRQ to fire
  5281 00004546 E2FB                <2>    loop Play_Repeat	;and the whole procedure is looped ECX times
  5282 00004548 C605[97060000]00    <2>    mov byte [EnableDigitized],0	;Tells the irq0 handler to disable the digitized functions
  5283 0000454F E857080000          <2>    call Sound_Off	;Turn the speaker off just in case
  5284 00004554 C3                  <2>    ret
  5285                              <2>    
  5286                              <1> %include 'source/programs/reboot.asm'
  5287 00004555 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  5288 0000455E 0F011D[68450000]    <2> 		lidt [idtreboot]
  5289 00004565 CD00                <2> 		int 0
  5290 00004567 F4                  <2> 		hlt
  5291                              <2> 	
  5292 00004568 0000                <2> 	idtreboot dw 0
  5293 0000456A 00000000            <2> 			  dd 0
  5294                              <2> 
  5295                              <2> 	coldboot:
  5296 0000456E 66B84000            <2> 		MOV AX, 0040h
  5297 00004572 8EC0                <2> 		MOV ES, AX
  5298 00004574 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  5299 0000457D 00                  <2>
  5300 0000457E EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5301 00004585 CF                  <2> 		IRET
  5302                              <2> 
  5303                              <2> 	warmboot:
  5304 00004586 66B84000            <2> 		MOV AX, 0040h
  5305 0000458A 8EC0                <2> 		MOV ES, AX
  5306 0000458C 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  5307 00004595 12                  <2>
  5308 00004596 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5309 0000459D CF                  <2> 		IRET
  5310                              <2> 		
  5311                              <1> %include 'source/programs/reg.asm'
  5312 0000459E FF2C72656700        <2> db 255,44,"reg",0
  5313 000045A4 CD03                <2> 	int 3
  5314 000045A6 C3                  <2> 	ret 
  5315                              <1> %include 'source/programs/rmode.asm'
  5316 000045A7 FF2C726D6F646500    <2> db 255,44,"rmode",0
  5317 000045AF 66BB[CA45]          <2> 	mov bx, rmodetest
  5318 000045B3 66891D[33110000]    <2> 	mov [realmodeptr], bx
  5319 000045BA BB[624C0000]        <2> 	mov ebx, waitkey
  5320 000045BF 891D[2F110000]      <2> 	mov [realmodereturn], ebx
  5321 000045C5 E94ECAFFFF          <2> 	jmp realmode
  5322                              <2> [BITS 16]
  5323                              <2> rmodetest:
  5324 000045CA BE[DC45]            <2> 	mov si, rmodestr
  5325 000045CD 31DB                <2> 	xor bx, bx
  5326                              <2> rmodeprnt:
  5327 000045CF AC                  <2> 	lodsb
  5328 000045D0 08C0                <2> 	or al, al
  5329 000045D2 7407                <2> 	jz .done
  5330 000045D4 B40E                <2> 	mov ah, 0xE
  5331 000045D6 43                  <2> 	inc bx
  5332 000045D7 CD10                <2> 	int 0x10
  5333 000045D9 EBF4                <2> 	jmp rmodeprnt
  5334 000045DB C3                  <2> .done: ret
  5335                              <2> 
  5336 000045DC 48656C6C6F2066726F- <2> rmodestr db "Hello from real mode!",10,13,"Goodbye!",10,13,0
  5337 000045E5 6D207265616C206D6F- <2>
  5338 000045EE 6465210A0D476F6F64- <2>
  5339 000045F7 627965210A0D00      <2>
  5340                              <2> [BITS 32]
  5341                              <1> %include 'source/programs/show.asm'
  5342 000045FE FF2C73686F7700      <2> db 255,44,"show",0
  5343 00004605 8B3D[1F310000]      <2> 		mov edi, [currentcommandloc]
  5344 0000460B 81C705000000        <2> 		add edi, 5
  5345 00004611 BE00008000          <2> 		mov esi, 0x800000
  5346 00004616 E87B2C0000          <2> 		call loadfile
  5347 0000461B 81FA94010000        <2> 		cmp edx, 404
  5348 00004621 0F849E000000        <2> 		je near filenotfound
  5349 00004627 BE00008000          <2> 		mov esi, 0x800000
  5350 0000462C 66813E424D          <2> 		cmp word [esi], "BM"
  5351 00004631 7410                <2> 		je bmpfound
  5352 00004633 E82BDDFFFF          <2> 		call print
  5353 00004638 BE[E6790000]        <2> 		mov esi, line
  5354 0000463D E821DDFFFF          <2> 		call print
  5355 00004642 C3                  <2> 		ret
  5356                              <2> bmpfound:
  5357 00004643 803D[1D8D0000]00    <2> 		cmp byte [guion], 0
  5358 0000464A 0F8443000000        <2> 		je near noguibmp
  5359 00004650 BE00008000          <2> 		mov esi, 0x800000
  5360 00004655 31C9                <2> 		xor ecx, ecx
  5361 00004657 31D2                <2> 		xor edx, edx
  5362 00004659 31C0                <2> 		xor eax, eax
  5363 0000465B 31DB                <2> 		xor ebx, ebx
  5364 0000465D E824240000          <2> 		call showbmp
  5365 00004662 30C0                <2> 		xor al, al
  5366 00004664 B405                <2> 		mov ah, 5
  5367 00004666 CD30                <2> 		int 30h
  5368 00004668 E87A110000          <2> 		call guiclear
  5369 0000466D E8EF120000          <2> 		call clearmousecursor
  5370 00004672 E84F190000          <2> 		call reloadallgraphics
  5371 00004677 8B35[1F310000]      <2> 		mov esi, [currentcommandloc]
  5372 0000467D 81C605000000        <2> 		add esi, 5
  5373 00004683 E8DBDCFFFF          <2> 		call print
  5374 00004688 BE[1A470000]        <2> 		mov esi, loadedbmpmsg
  5375 0000468D E8D1DCFFFF          <2> 		call print
  5376 00004692 C3                  <2> 		ret
  5377                              <2> noguibmp:
  5378 00004693 BE[9E460000]        <2> 		mov esi, warnguibmp
  5379 00004698 E8C6DCFFFF          <2> 		call print
  5380 0000469D C3                  <2> 		ret
  5381 0000469E 546869732063616E20- <2> warnguibmp db "This can not be done without the gui.",10,0
  5382 000046A7 6E6F7420626520646F- <2>
  5383 000046B0 6E6520776974686F75- <2>
  5384 000046B9 742074686520677569- <2>
  5385 000046C2 2E0A00              <2>
  5386                              <2> 
  5387                              <2> filenotfound:
  5388 000046C5 BE[F8460000]        <2> 		mov esi, filenf
  5389 000046CA E894DCFFFF          <2> 		call print
  5390 000046CF 8B35[1F310000]      <2> 		mov esi, [currentcommandloc]
  5391                              <2> findfilenotfoundzero:
  5392 000046D5 8A06                <2> 		mov al, [esi]
  5393 000046D7 46                  <2> 		inc esi
  5394 000046D8 3C00                <2> 		cmp al, 0
  5395 000046DA 7411                <2> 		je nofilenamenotfound
  5396 000046DC 81FE[11CE0000]      <2> 		cmp esi, buftxtend
  5397 000046E2 7309                <2> 		jae nofilenamenotfound
  5398 000046E4 3C20                <2> 		cmp al, " "
  5399 000046E6 75ED                <2> 		jne findfilenotfoundzero
  5400 000046E8 E876DCFFFF          <2> 		call print
  5401                              <2> nofilenamenotfound:
  5402 000046ED BE[03470000]        <2> 		mov esi, filenf2
  5403 000046F2 E86CDCFFFF          <2> 		call print
  5404 000046F7 C3                  <2> 		ret
  5405 000046F8 5468652066696C6520- <2> filenf db "The file ",34,0
  5406 00004701 2200                <2>
  5407 00004703 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  5408 0000470C 6F7420626520666F75- <2>
  5409 00004715 6E642E0A00          <2>
  5410                              <2> 		
  5411 0000471A 206C6F616465642E0A- <2> loadedbmpmsg db " loaded.",10,0
  5412 00004723 00                  <2>
  5413                              <1> %include 'source/programs/shush.asm'
  5414 00004724 FF2C736875736800    <2> db 255,44,"shush",0
  5415 0000472C BE[37470000]        <2> 	mov esi, shushmsg
  5416 00004731 E82DDCFFFF          <2> 	call print
  5417 00004736 C3                  <2> 	ret
  5418 00004737 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  5419 00004740 6F2074686520536F6C- <2>
  5420 00004749 6C65724F5320486172- <2>
  5421 00004752 646C7920556E69782D- <2>
  5422 0000475B 436F6D70617469626C- <2>
  5423 00004764 65205368656C6C210A- <2>
  5424 0000476D 00                  <2>
  5425                              <1> %include 'source/programs/stop.asm'
  5426 0000476E FF2C73746F7000      <2> 	db 255,44,"stop",0
  5427 00004775 30C0                <2> stop:	xor al, al
  5428 00004777 A2[01B60000]        <2> 	mov [BATCHISON], al
  5429 0000477C A2[98B50000]        <2> 	mov [IFON], al
  5430 00004781 A2[99B50000]        <2> 	mov [IFTRUE], al
  5431 00004786 A2[02B60000]        <2> 	mov [LOOPON], al
  5432 0000478B C3                  <2> 	ret 
  5433                              <1> %include 'source/programs/system.asm'
  5434 0000478C FF2C73797374656D00  <2> 	db 255,44,"system",0
  5435 00004795 BE[4F480000]        <2> 	mov esi, systeminfomsg
  5436 0000479A E8B2DBFFFF          <2> 	call printquiet
  5437 0000479F B9[1E8D0000]        <2> 	mov ecx, osend
  5438 000047A4 C1E90A              <2> 	shr ecx, 10
  5439 000047A7 E864ECFFFF          <2> 	call showdec
  5440 000047AC BE[64480000]        <2> 	mov esi, diskbytemsg
  5441 000047B1 E89BDBFFFF          <2> 	call printquiet
  5442 000047B6 B9[1E8D0000]        <2> 	mov ecx, osend
  5443 000047BB 81C1[AE800100]      <2> 	add ecx, commandbufend
  5444 000047C1 81E9[938E0000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  5445 000047C7 C1E90A              <2> 	shr ecx, 10
  5446 000047CA E841ECFFFF          <2> 	call showdec
  5447 000047CF BE[78480000]        <2> 	mov esi, membytemsg
  5448 000047D4 E878DBFFFF          <2> 	call printquiet
  5449                              <2> getcpuspeed:
  5450 000047D9 B8FE000000          <2> 	mov eax, 0xFE
  5451 000047DE E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  5452 000047E0 B020                <2> 	mov al, 0x20
  5453 000047E2 E620                <2> 	out 0x20, al
  5454 000047E4 31C0                <2> 	xor eax, eax
  5455 000047E6 F4                  <2> 	hlt
  5456 000047E7 C605[6F060000]01    <2> 	mov byte [testingcpuspeed], 1
  5457                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  5458 000047EE 40                  <2> 	inc eax
  5459 000047EF EBFD                <2> 	jmp cpuspeedloop
  5460                              <2> cpuspeedloopend:
  5461 000047F1 31C0                <2> 	xor eax, eax
  5462 000047F3 E621                <2> 	out 0x21, al
  5463 000047F5 B020                <2> 	mov al, 0x20
  5464 000047F7 E620                <2> 	out 0x20, al
  5465 000047F9 31D2                <2> 	xor edx, edx
  5466 000047FB 31C0                <2> 	xor eax, eax
  5467 000047FD A1[70060000]        <2> 	mov eax, [cpuspeedperint]
  5468 00004802 8B1D[82060000]      <2> 	mov ebx, [timeinterval]
  5469 00004808 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  5470 0000480B F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  5471 0000480D 89C1                <2> 	mov ecx, eax
  5472 0000480F E8FCEBFFFF          <2> 	call showdec
  5473 00004814 BE[BA480000]        <2> 	mov esi, cpuspeedmsg
  5474 00004819 E833DBFFFF          <2> 	call printquiet
  5475 0000481E 8B0D[74060000]      <2> 	mov ecx, [memoryspace]
  5476 00004824 C1E914              <2> 	shr ecx, 20
  5477 00004827 41                  <2> 	inc ecx	;the reading is one MB behind
  5478 00004828 E8E3EBFFFF          <2> 	call showdec
  5479 0000482D BE[C0480000]        <2> 	mov esi, memoryspacemsg
  5480 00004832 E82CDBFFFF          <2> 	call print
  5481 00004837 803D[4E4F0000]00    <2> 	cmp byte [SoundBlaster], 0
  5482 0000483E 0F8431E6FFFF        <2> 	je near nwcmd
  5483 00004844 BE[A2480000]        <2> 	mov esi, soundblastermsg
  5484 00004849 E815DBFFFF          <2> 	call print
  5485 0000484E C3                  <2> 	ret
  5486                              <2> 
  5487 0000484F 4B65726E656C20496E- <2> systeminfomsg db "Kernel Information:",10,0
  5488 00004858 666F726D6174696F6E- <2>
  5489 00004861 3A0A00              <2>
  5490 00004864 4B42204469736B2053- <2> diskbytemsg db "KB Disk Space Used",10,0
  5491 0000486D 706163652055736564- <2>
  5492 00004876 0A00                <2>
  5493 00004878 4B42204D656D6F7279- <2> membytemsg db "KB Memory Space Used",10,"System Information:",10,0
  5494 00004881 205370616365205573- <2>
  5495 0000488A 65640A53797374656D- <2>
  5496 00004893 20496E666F726D6174- <2>
  5497 0000489C 696F6E3A0A00        <2>
  5498 000048A2 536F756E64626C6173- <2> soundblastermsg db "Soundblaster Detected.",10,0
  5499 000048AB 746572204465746563- <2>
  5500 000048B4 7465642E0A00        <2>
  5501 000048BA 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  5502 000048C0 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space Free",10,0
  5503 000048C9 205370616365204672- <2>
  5504 000048D2 65650A00            <2>
  5505                              <1> %include 'source/programs/thread.asm'
  5506 000048D6 FF2C74687265616400  <2> db 255,44,"thread",0
  5507 000048DF E9912A0000          <2> 	jmp threadstarttest
  5508                              <1> %include 'source/programs/time.asm'
  5509 000048E4 082E30303030303030- <2> timenscache db 8,".000000000"
  5510 000048ED 3030                <2>
  5511 000048EF 200A00              <2> timenscacheend: db " ",10,0
  5512 000048F2 00                  <2> istimeset db 0
  5513 000048F3 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5514 000048FC 2063757272656E7420- <2>
  5515 00004905 554E49582074696D65- <2>
  5516 0000490E 3A0A00              <2>
  5517 00004911 00<rept>            <2> timeinputbuffer times 12 db 0
  5518 0000491D 00                  <2> timeinputbend: db 0
  5519                              <2> 
  5520 0000491E FF2C74696D6500      <2> db 255,44,"time",0
  5521 00004925 803D[F2480000]00    <2> 	cmp byte [istimeset], 0
  5522 0000492C 753A                <2> 	jne timeisset
  5523 0000492E BE[F3480000]        <2> 	mov esi, settimemsg
  5524 00004933 E82BDAFFFF          <2> 	call print
  5525 00004938 BE[11490000]        <2> 	mov esi, timeinputbuffer
  5526 0000493D BF[1D490000]        <2> 	mov edi, timeinputbend
  5527 00004942 E820DBFFFF          <2> 	call readline
  5528 00004947 BE[11490000]        <2> 	mov esi, timeinputbuffer
  5529 0000494C 31FF                <2> 	xor edi, edi
  5530 0000494E E89FEBFFFF          <2> 	call cnvrttxt
  5531 00004953 890D[7A060000]      <2> 	mov [timeseconds], ecx
  5532 00004959 31C9                <2> 	xor ecx, ecx
  5533 0000495B 890D[7E060000]      <2> 	mov [timenanoseconds], ecx
  5534 00004961 C605[F2480000]01    <2> 	mov byte [istimeset], 1
  5535                              <2> timeisset:
  5536 00004968 8B0D[7A060000]      <2> 	mov ecx, [timeseconds]
  5537 0000496E E89DEAFFFF          <2> 	call showdec
  5538                              <2> 	
  5539 00004973 8B0D[7E060000]      <2> 	mov ecx, [timenanoseconds]
  5540 00004979 BE[E4480000]        <2> 	mov esi, timenscache
  5541 0000497E C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5542 00004985 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5543 0000498C C6460A30            <2> 	mov byte [esi + 10], "0"
  5544 00004990 BE[EF480000]        <2> 	mov esi, timenscacheend
  5545 00004995 E859E8FFFF          <2> 	call convert
  5546 0000499A BE[E4480000]        <2> 	mov esi, timenscache
  5547 0000499F E8BFD9FFFF          <2> 	call print
  5548                              <2> 	
  5549 000049A4 E80F000000          <2> 	call time
  5550 000049A9 BE[844B0000]        <2> 	mov esi, timeshow
  5551 000049AE E8B0D9FFFF          <2> 	call print
  5552 000049B3 E9BC000000          <2> 	jmp findday
  5553                              <2> time:
  5554 000049B8 E84F010000          <2> 	call tstackput1
  5555 000049BD B00A                <2> 	mov al,10			;Get RTC register A
  5556 000049BF E879010000          <2> 	call tget1
  5557 000049C4 A880                <2> 	test al,0x80			;Is update in progress?
  5558 000049C6 75F0                <2> 	jne time				; yes, wait
  5559                              <2> 
  5560 000049C8 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5561 000049CA E86E010000          <2> 	call tget1
  5562 000049CF A2[7B4B0000]        <2> 	mov [RTCtimeSecond],al
  5563                              <2> 
  5564 000049D4 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5565 000049D6 E862010000          <2> 	call tget1
  5566 000049DB A2[7C4B0000]        <2> 	mov [RTCtimeMinute],al
  5567                              <2> 
  5568 000049E0 B004                <2> 	mov al,0x04			;Get hours (see notes)
  5569 000049E2 E856010000          <2> 	call tget1
  5570 000049E7 A2[7D4B0000]        <2> 	mov [RTCtimeHour],al
  5571                              <2> 
  5572 000049EC B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5573 000049EE E84A010000          <2> 	call tget1
  5574 000049F3 A2[7E4B0000]        <2> 	mov [RTCtimeDay],al
  5575                              <2> 
  5576 000049F8 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5577 000049FA E83E010000          <2> 	call tget1
  5578 000049FF A2[7F4B0000]        <2> 	mov [RTCtimeMonth],al
  5579                              <2> 
  5580 00004A04 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5581 00004A06 E832010000          <2> 	call tget1
  5582 00004A0B A2[804B0000]        <2> 	mov [RTCtimeYear],al
  5583                              <2> 	
  5584 00004A10 BE[844B0000]        <2> 	mov esi, timeshow
  5585 00004A15 8A2D[7D4B0000]      <2> 	mov ch, [RTCtimeHour]
  5586 00004A1B E828010000          <2> 	call tput1
  5587 00004A20 8A2D[7C4B0000]      <2> 	mov ch, [RTCtimeMinute]
  5588 00004A26 E81D010000          <2> 	call tput1
  5589 00004A2B 8A2D[7B4B0000]      <2> 	mov ch, [RTCtimeSecond]
  5590 00004A31 E812010000          <2> 	call tput1
  5591 00004A36 BE[8D4B0000]        <2> 	mov esi, dateshow
  5592 00004A3B 8A2D[7F4B0000]      <2> 	mov ch, [RTCtimeMonth]
  5593 00004A41 E802010000          <2> 	call tput1
  5594 00004A46 8A2D[7E4B0000]      <2> 	mov ch, [RTCtimeDay]
  5595 00004A4C E8F7000000          <2> 	call tput1
  5596 00004A51 B520                <2> 	mov ch, 0x20
  5597 00004A53 E8F0000000          <2> 	call tput1
  5598 00004A58 4E                  <2> 	dec esi
  5599 00004A59 8A2D[804B0000]      <2> 	mov ch, [RTCtimeYear]
  5600 00004A5F E8E4000000          <2> 	call tput1
  5601 00004A64 E8BD000000          <2> 	call tstackget1
  5602 00004A69 C3                  <2> 	ret
  5603 00004A6A BE[844B0000]        <2> 	mov esi, timeshow
  5604 00004A6F E8EFD8FFFF          <2> 	call print
  5605                              <2> ;;get day of week
  5606                              <2> ;;add these:
  5607                              <2> ;;century value
  5608                              <2> ;;last 2 digits of year
  5609                              <2> ;;last 2 digits of year right shifted twice
  5610                              <2> ;;month table value
  5611                              <2> ;;day of the month
  5612                              <2> ;;divide these by 7
  5613                              <2> ;;the remainder is the day
  5614                              <2> findday:
  5615 00004A74 31C0                <2> 	xor eax, eax
  5616                              <2> ;;first convert the values from BCD to hex
  5617 00004A76 A0[7E4B0000]        <2> 	mov al, [RTCtimeDay]
  5618 00004A7B E873000000          <2> 	call converttohex
  5619 00004A80 8825[814B0000]      <2> 	mov [dayhex], ah
  5620 00004A86 A0[7F4B0000]        <2> 	mov al, [RTCtimeMonth]
  5621 00004A8B E863000000          <2> 	call converttohex
  5622 00004A90 8825[824B0000]      <2> 	mov [monthhex], ah
  5623 00004A96 A0[804B0000]        <2> 	mov al, [RTCtimeYear]
  5624 00004A9B E853000000          <2> 	call converttohex
  5625 00004AA0 8825[834B0000]      <2> 	mov [yearhex], ah
  5626 00004AA6 31C0                <2> 	xor eax, eax
  5627 00004AA8 A0[834B0000]        <2> 	mov al, [yearhex]
  5628 00004AAD C0E802              <2> 	shr al, 2
  5629 00004AB0 0205[834B0000]      <2> 	add al, [yearhex]
  5630 00004AB6 0506000000          <2> 	add eax, 6
  5631 00004ABB 31DB                <2> 	xor ebx, ebx
  5632 00004ABD 8A1D[824B0000]      <2> 	mov bl, [monthhex]
  5633 00004AC3 FECB                <2> 	dec bl
  5634 00004AC5 81C3[A24B0000]      <2> 	add ebx, month
  5635 00004ACB 31C9                <2> 	xor ecx, ecx
  5636 00004ACD 8A0B                <2> 	mov cl, [ebx]
  5637 00004ACF 01C8                <2> 	add eax, ecx
  5638 00004AD1 8A0D[814B0000]      <2> 	mov cl, [dayhex]
  5639 00004AD7 01C8                <2> 	add eax, ecx
  5640 00004AD9 66BB0700            <2> 	mov bx, 7
  5641 00004ADD 31D2                <2> 	xor edx, edx
  5642 00004ADF 66F7F3              <2> 	div bx
  5643 00004AE2 C1E202              <2> 	shl edx, 2
  5644 00004AE5 81C2[AE4B0000]      <2> 	add edx, day
  5645 00004AEB 8B32                <2> 	mov esi, [edx]
  5646 00004AED E871D8FFFF          <2> 	call print
  5647 00004AF2 C3                  <2> 	ret
  5648                              <2> 	
  5649                              <2> converttohex:
  5650 00004AF3 88C4                <2> 	mov ah, al
  5651 00004AF5 C0E804              <2> 	shr al, 4
  5652 00004AF8 C0E404              <2> 	shl ah, 4
  5653 00004AFB C0EC04              <2> 	shr ah, 4
  5654 00004AFE 3C00                <2> 	cmp al, 0
  5655 00004B00 7409                <2> 	je noconverttohex
  5656                              <2> converttohexlp:
  5657 00004B02 80C40A              <2> 	add ah, 10
  5658 00004B05 FEC8                <2> 	dec al
  5659 00004B07 3C00                <2> 	cmp al, 0
  5660 00004B09 75F7                <2> 	jne converttohexlp
  5661                              <2> noconverttohex:
  5662 00004B0B C3                  <2> 	ret
  5663                              <2> 	
  5664                              <2> tstackput1:
  5665 00004B0C 8935[774B0000]      <2> 	mov [tstack + 20], esi
  5666 00004B12 BE[634B0000]        <2> 	mov esi, tstack
  5667 00004B17 8906                <2> 	mov [esi], eax
  5668 00004B19 895E04              <2> 	mov [esi + 4], ebx
  5669 00004B1C 894E08              <2> 	mov [esi + 8], ecx
  5670 00004B1F 89560C              <2> 	mov [esi + 12], edx
  5671 00004B22 897E10              <2> 	mov [esi + 16], edi
  5672 00004B25 C3                  <2> 	ret
  5673                              <2> 	
  5674                              <2> tstackget1:
  5675 00004B26 BE[634B0000]        <2> 	mov esi, tstack
  5676 00004B2B 8B06                <2> 	mov eax, [esi]
  5677 00004B2D 8B5E04              <2> 	mov ebx, [esi + 4]
  5678 00004B30 8B4E08              <2> 	mov ecx, [esi + 8]
  5679 00004B33 8B560C              <2> 	mov edx, [esi + 12]
  5680 00004B36 8B7E10              <2> 	mov edi, [esi + 16]
  5681 00004B39 8B7614              <2> 	mov esi, [esi + 20]
  5682 00004B3C C3                  <2> 	ret
  5683                              <2> 	
  5684                              <2> tget1:
  5685 00004B3D 66BA7000            <2> 	mov dx, 0x70
  5686 00004B41 EE                  <2> 	out dx, al
  5687 00004B42 6642                <2> 	inc dx
  5688 00004B44 EC                  <2> 	in al, dx
  5689 00004B45 664A                <2> 	dec dx
  5690 00004B47 C3                  <2> 	ret
  5691                              <2> 	
  5692                              <2> tput1:
  5693 00004B48 66C1E904            <2> 	shr cx, 4
  5694 00004B4C B030                <2> 	mov al, 48
  5695 00004B4E 00E8                <2> 	add al, ch
  5696 00004B50 8806                <2> 	mov [esi], al
  5697 00004B52 46                  <2> 	inc esi
  5698 00004B53 B030                <2> 	mov al, 48
  5699 00004B55 C0E904              <2> 	shr cl, 4
  5700 00004B58 00C8                <2> 	add al, cl
  5701 00004B5A 8806                <2> 	mov [esi], al
  5702 00004B5C 81C602000000        <2> 	add esi, 2
  5703 00004B62 C3                  <2> 	ret
  5704                              <2> 		
  5705 00004B63 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5706 00004B6C 000000000000000000- <2>
  5707 00004B75 000000000000        <2>
  5708 00004B7B 00                  <2> 	RTCtimeSecond db 0
  5709 00004B7C 00                  <2> 	RTCtimeMinute db 0
  5710 00004B7D 00                  <2> 	RTCtimeHour db 0
  5711 00004B7E 00                  <2> 	RTCtimeDay db 0
  5712 00004B7F 00                  <2> 	RTCtimeMonth db 0
  5713 00004B80 00                  <2> 	RTCtimeYear db 0
  5714 00004B81 00                  <2> 	dayhex db 0
  5715 00004B82 00                  <2> 	monthhex db 0
  5716 00004B83 00                  <2> 	yearhex db 0
  5717 00004B84 30303A30303A30300A  <2> 	timeshow db "00:00:00",10
  5718 00004B8D 30302D30302D303030- <2> 	dateshow db "00-00-0000",10,0
  5719 00004B96 300A00              <2>
  5720                              <2> 	oldcentury:	;;from 1700 to 1900
  5721 00004B99 040200              <2> 	db 4,2,0
  5722                              <2> 	century:	;;from 2000 to 2500
  5723 00004B9C 060402000604        <2> 	db 6,4,2,0,6,4
  5724                              <2> 	month:
  5725 00004BA2 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5726 00004BAB 000305              <2>
  5727                              <2> 	day:
  5728 00004BAE [CA4B0000]          <2> 	dd sunday
  5729 00004BB2 [D24B0000]          <2> 	dd monday
  5730 00004BB6 [DA4B0000]          <2> 	dd tuesday
  5731 00004BBA [E34B0000]          <2> 	dd wednesday
  5732 00004BBE [EE4B0000]          <2> 	dd thursday
  5733 00004BC2 [F84B0000]          <2> 	dd friday
  5734 00004BC6 [004C0000]          <2> 	dd saturday
  5735                              <2> sunday:
  5736 00004BCA 53756E6461790A00    <2> 	db "Sunday",10,0
  5737                              <2> monday:
  5738 00004BD2 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5739                              <2> tuesday:
  5740 00004BDA 547565736461790A00  <2> 	db "Tuesday",10,0
  5741                              <2> wednesday:
  5742 00004BE3 5765646E6573646179- <2> 	db "Wednesday",10,0
  5743 00004BEC 0A00                <2>
  5744                              <2> thursday:
  5745 00004BEE 54687572736461790A- <2> 	db "Thursday",10,0
  5746 00004BF7 00                  <2>
  5747                              <2> friday:
  5748 00004BF8 4672696461790A00    <2> 	db "Friday",10,0
  5749                              <2> saturday:
  5750 00004C00 53617475726461790A- <2> 	db "Saturday",10,0
  5751 00004C09 00                  <2>
  5752                              <1> %include 'source/programs/turnoff.asm'
  5753 00004C0A FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  5754 00004C13 00                  <2>
  5755 00004C14 66BB[2F4C]          <2> 			mov bx, shutdown
  5756 00004C18 66891D[33110000]    <2> 			mov [realmodeptr], bx
  5757 00004C1F BB[594C0000]        <2> 			mov ebx, halt
  5758 00004C24 891D[2F110000]      <2> 			mov [realmodereturn], ebx
  5759 00004C2A E9E9C3FFFF          <2> 			jmp realmode
  5760                              <2> 
  5761                              <2> [BITS 16]
  5762                              <2> 		shutdown:
  5763 00004C2F B453                <2> 			mov ah, 0x53
  5764 00004C31 B004                <2> 			mov al, 4
  5765 00004C33 31DB                <2> 			xor bx, bx
  5766 00004C35 CD15                <2> 			int 0x15
  5767                              <2> 			
  5768 00004C37 B453                <2> 			mov ah, 0x53
  5769 00004C39 B001                <2> 			mov al, 1
  5770 00004C3B 31DB                <2> 			xor bx, bx
  5771 00004C3D CD15                <2> 			int 0x15
  5772                              <2> 			
  5773 00004C3F B453                <2> 			mov ah, 0x53
  5774 00004C41 B008                <2> 			mov al, 8
  5775 00004C43 BB0100              <2> 			mov bx, 1
  5776 00004C46 B90100              <2> 			mov cx, 1
  5777 00004C49 CD15                <2> 			int 0x15
  5778                              <2> 			
  5779 00004C4B B453                <2> 			mov ah, 0x53
  5780 00004C4D B007                <2> 			mov al, 7
  5781 00004C4F BB0100              <2> 			mov bx, 1
  5782 00004C52 B90300              <2> 			mov cx, 3
  5783 00004C55 CD15                <2> 			int 0x15
  5784 00004C57 EBFE                <2> 			jmp $
  5785                              <2> 			[BITS 32]
  5786 00004C59 EBFE                <2> halt: jmp $
  5787                              <1> %include 'source/programs/wait.asm'
  5788 00004C5B FF2C7761697400      <2> db 255,44,"wait",0
  5789                              <2> waitkey:
  5790 00004C62 E87CDBFFFF          <2> 		call getchar
  5791 00004C67 C3                  <2> 		ret
  5792                              <1> %include 'source/programs/while.asm'
  5793 00004C68 FF2C7768696C6500    <2> db 255,44,"while",0
  5794 00004C70 30C0                <2> whilecmd:  xor al, al
  5795 00004C72 3805[01B60000]      <2> 	cmp [BATCHISON], al
  5796 00004C78 0F8488EFFFFF        <2> 	je near notbatch
  5797 00004C7E 8B35[FDB50000]      <2> 	mov esi, [BATCHPOS]
  5798 00004C84 81EE02000000        <2> 	sub esi, 2
  5799 00004C8A 4E                  <2> whilefnd: dec esi
  5800 00004C8B 8A06                <2> 	mov al, [esi]
  5801 00004C8D 3C0A                <2> 	cmp al, 10
  5802 00004C8F 0F840A000000        <2> 	je near whilefnd2
  5803 00004C95 3C00                <2> 	cmp al, 0
  5804 00004C97 0F8402000000        <2> 	je near whilefnd2
  5805 00004C9D EBEB                <2> 	jmp whilefnd
  5806                              <2> whilefnd2:
  5807 00004C9F 46                  <2> 	inc esi
  5808 00004CA0 8935[03B60000]      <2> 	mov [LOOPPOS], esi
  5809 00004CA6 C605[02B60000]01    <2> 	mov BYTE [LOOPON], 1
  5810 00004CAD BE[11CA0000]        <2> 	mov esi, buftxt
  5811 00004CB2 BB[11CA0000]        <2> 	mov ebx, buftxt
  5812 00004CB7 81C306000000        <2> 	add ebx, 6
  5813 00004CBD E92EF5FFFF          <2> 	jmp chkeqsn
  5814                              <1> progend:		;programs end here	
  5815                              <1> batchprogend:
  5816                                  	%include 'source/hardware.asm'
  5817                              <1> %include "source/drivers/sound/pcspkr.asm"
  5818                              <2> ;PC Speaker Drivers
  5819                              <2> PCSpeakerPWM:
  5820 00004CC2 3C90                <2> 	cmp al,0x90	;If the byte taken from the memory is less than 80h,
  5821                              <2> 				;turn off the speaker to prevent "unwanted" sounds,
  5822 00004CC4 720A                <2> 	jb TurnOffBeeper	;like: ASCII strings (e.g. "WAVEfmt" signature etc).
  5823 00004CC6 E8C2000000          <2> 	call Sound_On
  5824 00004CCB E905000000          <2> 	jmp Sound_Done
  5825                              <2> TurnOffBeeper:
  5826 00004CD0 E8D6000000          <2> 	call Sound_Off
  5827                              <2> Sound_Done:
  5828 00004CD5 46                  <2> 	inc esi	;Increment ESI to load the next byte
  5829 00004CD6 E90CBAFFFF          <2> 	jmp keyinterrupt
  5830                              <2> 
  5831                              <2> PCSpeakerRAW:
  5832 00004CDB 60                  <2> 	pusha
  5833                              <2> nosoundrep:
  5834 00004CDC 8B35[89060000]      <2> 	mov esi, [soundpos]
  5835 00004CE2 31C9                <2> 	xor ecx, ecx
  5836 00004CE4 668B0D[87060000]    <2> 	mov cx, [soundrepititions]
  5837 00004CEB 6681F90000          <2> 	cmp cx, 0
  5838 00004CF0 0F8548000000        <2> 	jne near donesetpitch
  5839 00004CF6 668B0E              <2> 	mov cx, [esi]
  5840 00004CF9 668B5E02            <2> 	mov bx, [esi + 2]
  5841 00004CFD 66890D[87060000]    <2> 	mov [soundrepititions], cx
  5842 00004D04 81C604000000        <2> 	add esi, 4
  5843 00004D0A 8935[89060000]      <2> 	mov [soundpos], esi
  5844 00004D10 3B35[8D060000]      <2> 	cmp esi, [soundendpos]
  5845 00004D16 7735                <2> 	ja stopsound
  5846 00004D18 66813D[87060000]00- <2> 	cmp word [soundrepititions], 0
  5847 00004D20 00                  <2>
  5848 00004D21 74B9                <2> 	je nosoundrep
  5849 00004D23 6681FB0000          <2> 	cmp bx, 0
  5850 00004D28 740F                <2> 	je nosoundplay
  5851 00004D2A E840000000          <2> 	call setpitch
  5852 00004D2F E849000000          <2> 	call startsound
  5853 00004D34 E905000000          <2> 	jmp donesetpitch
  5854                              <2> nosoundplay:
  5855 00004D39 E846000000          <2> 	call killsound
  5856                              <2> donesetpitch:
  5857 00004D3E 6649                <2> 	dec cx
  5858 00004D40 66890D[87060000]    <2> 	mov [soundrepititions], cx
  5859 00004D47 61                  <2> 	popa
  5860 00004D48 E98DB9FFFF          <2> 	jmp timerinterrupt
  5861                              <2> stopsound:
  5862 00004D4D 31C0                <2> 	xor eax, eax
  5863 00004D4F 66A3[87060000]      <2> 	mov [soundrepititions], ax
  5864 00004D55 A2[86060000]        <2> 	mov [soundon], al
  5865 00004D5A A3[89060000]        <2> 	mov [soundpos], eax
  5866 00004D5F A3[8D060000]        <2> 	mov [soundendpos], eax
  5867 00004D64 E81B000000          <2> 	call killsound
  5868 00004D69 61                  <2> 	popa
  5869 00004D6A E96BB9FFFF          <2> 	jmp timerinterrupt
  5870                              <2> 
  5871                              <2> 
  5872                              <2> setpitch:
  5873 00004D6F B0B6                <2> 	mov al, 0xB6
  5874 00004D71 E643                <2> 	out 0x43, al
  5875 00004D73 6689D8              <2> 	mov ax, bx
  5876 00004D76 E642                <2> 	out 0x42, al
  5877 00004D78 88E0                <2> 	mov al, ah
  5878 00004D7A E642                <2> 	out 0x42, al
  5879 00004D7C C3                  <2> 	ret
  5880                              <2> startsound:
  5881 00004D7D E461                <2> 	in al, 0x61
  5882 00004D7F 0C03                <2> 	or al, 3
  5883 00004D81 E661                <2> 	out 0x61, al
  5884 00004D83 C3                  <2> 	ret
  5885                              <2> killsound:
  5886 00004D84 E461                <2> 	in al, 0x61
  5887 00004D86 24FC                <2> 	and al, 0xFC
  5888 00004D88 E661                <2> 	out 0x61, al
  5889 00004D8A C3                  <2> 	ret
  5890                              <2> 	
  5891                              <2> ;this is code that I got from
  5892                              <2> ;http://forum.osdev.org/viewtopic.php?f=13&t=17293
  5893                              <2> ;that plays wave files
  5894 00004D8B 0000                <2> WAVEDIV dw 0
  5895                              <2> 
  5896                              <2> Sound_On:	; A routine to make sounds with BX = frequency in Hz
  5897 00004D8D 668B1D[8B4D0000]    <2>    mov bx, [WAVEDIV]
  5898 00004D94 E461                <2>    in al,0x61
  5899 00004D96 A803                <2>    test al,3
  5900 00004D98 7508                <2>    jnz A99               
  5901 00004D9A 0C03                <2>    or al,3	;Turn on the speaker itself
  5902 00004D9C E661                <2>    out 0x61,al               
  5903 00004D9E B0B6                <2>    mov al,0xb6
  5904 00004DA0 E643                <2>    out 0x43,al
  5905                              <2> A99:   
  5906 00004DA2 88D8                <2>    mov al,bl
  5907 00004DA4 E642                <2>    out 0x42,al             
  5908 00004DA6 88F8                <2>    mov al,bh
  5909 00004DA8 E642                <2>    out 0x42,al
  5910                              <2> Done1:
  5911 00004DAA C3                  <2>    ret
  5912                              <2> 
  5913                              <2> Sound_Off:
  5914 00004DAB E461                <2>    in al,0x61                 
  5915 00004DAD 24FC                <2>    and al,11111100b                               ;Turn off the speaker
  5916 00004DAF E661                <2>    out 0x61,al
  5917 00004DB1 C3                  <2>    ret
  5918                              <1> %include "source/drivers/sound/sblaster.asm"
  5919                              <2> ;Sound Blaster Drivers
  5920                              <2> sblaster:
  5921                              <2> .init:
  5922 00004DB2 E842010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  5923 00004DB7 A2[4E4F0000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  5924 00004DBC 3C00                <2> 		cmp al, 0
  5925 00004DBE 740E                <2> 		je .noinit
  5926 00004DC0 B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  5927 00004DC2 E866010000          <2> 		call WriteDSP
  5928 00004DC7 B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  5929 00004DC9 E81C010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  5930                              <2> .noinit:
  5931 00004DCE C3                  <2> 		ret
  5932                              <2> sblastercont: ;this function goes to the next available portion of a sound, if necessary
  5933 00004DCF 66813D[3C4F0000]00- <2> 	cmp word [Length0], 0
  5934 00004DD7 00                  <2>
  5935 00004DD8 0F84CDB9FFFF        <2> 	je near handled2
  5936 00004DDE 668B3D[3C4F0000]    <2> 	mov di, [Length0]
  5937 00004DE5 664F                <2> 	dec di
  5938 00004DE7 66893D[3C4F0000]    <2> 	mov [Length0], di
  5939 00004DEE A1[404F0000]        <2> 	mov eax, [NextMemLoc]
  5940 00004DF3 A3[444F0000]        <2> 	mov [MemLoc], eax
  5941 00004DF8 31C9                <2> 	xor ecx, ecx
  5942 00004DFA 66B9FFFF            <2> 	mov cx, 0xFFFF
  5943 00004DFE 66890D[3E4F0000]    <2> 	mov [Length1], cx
  5944 00004E05 01C8                <2> 	add eax, ecx
  5945 00004E07 A3[404F0000]        <2> 	mov [NextMemLoc], eax
  5946 00004E0C E805000000          <2> 	call DMAPlay
  5947 00004E11 E995B9FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  5948                              <2> 
  5949                              <2> DMAPlay:    ;uses eax ebx edx
  5950 00004E16 66FF0D[3E4F0000]    <2> 		dec	word [Length1]
  5951 00004E1D C605[484F0000]00    <2> 		mov	byte [Page1],00h
  5952                              <2> 
  5953 00004E24 B005                <2> 		mov	al,(Channel+4)
  5954 00004E26 66BA0A00            <2> 		mov	dx,0Ah
  5955 00004E2A EE                  <2> 		out	dx,al
  5956 00004E2B 30C0                <2> 		xor	al,al
  5957 00004E2D 66BA0C00            <2> 		mov	dx,0Ch
  5958 00004E31 EE                  <2> 		out	dx,al
  5959 00004E32 B049                <2> 		mov	al,ModeReg
  5960 00004E34 66BA0B00            <2> 		mov	dx,0Bh
  5961 00004E38 EE                  <2> 		out	dx,al
  5962 00004E39 A1[444F0000]        <2> 		mov	eax,[MemLoc]
  5963 00004E3E 66BA0200            <2> 		mov	dx,AddPort
  5964 00004E42 EE                  <2> 		out	dx,al
  5965 00004E43 86C4                <2> 		xchg al,ah
  5966 00004E45 EE                  <2> 		out	dx,al
  5967 00004E46 A1[444F0000]        <2> 		mov	eax,[MemLoc]
  5968 00004E4B 89C2                <2> 		mov	edx,eax
  5969 00004E4D 2500000100          <2> 		and	eax,65536
  5970 00004E52 7406                <2> 		jz	MemLocN1
  5971 00004E54 FE05[484F0000]      <2> 		inc	byte [Page1]
  5972                              <2> MemLocN1:
  5973 00004E5A 89D0                <2> 		mov	eax,edx
  5974 00004E5C 2500000200          <2> 		and	eax,131072
  5975 00004E61 7407                <2> 		jz	MemLocN2
  5976 00004E63 8005[484F0000]02    <2> 		add	byte [Page1],02
  5977                              <2> MemLocN2:
  5978 00004E6A 89D0                <2> 		mov	eax,edx
  5979 00004E6C 2500000400          <2> 		and	eax,262144
  5980 00004E71 7407                <2> 		jz	MemLocN3
  5981 00004E73 8005[484F0000]04    <2> 		add	byte [Page1],04
  5982                              <2> MemLocN3:
  5983 00004E7A 89D0                <2> 		mov	eax,edx
  5984 00004E7C 2500000800          <2> 		and	eax,524288
  5985 00004E81 7407                <2> 		jz	MemLocN4
  5986 00004E83 8005[484F0000]08    <2> 		add	byte [Page1],08
  5987                              <2> MemLocN4:
  5988 00004E8A 66BA8300            <2> 		mov	dx,PgPort
  5989 00004E8E A0[484F0000]        <2> 		mov	al,[Page1]
  5990 00004E93 EE                  <2> 		out	dx,al
  5991 00004E94 66BA0300            <2> 		mov	dx,LenPort
  5992 00004E98 66A1[3E4F0000]      <2> 		mov	ax,[Length1]
  5993 00004E9E EE                  <2> 		out	dx,al
  5994 00004E9F 86C4                <2> 		xchg al,ah
  5995 00004EA1 EE                  <2> 		out	dx,al
  5996 00004EA2 66BA0A00            <2> 		mov	dx,0Ah
  5997 00004EA6 B001                <2> 		mov	al,Channel
  5998 00004EA8 EE                  <2> 		out	dx,al
  5999                              <2> 		
  6000 00004EA9 B040                <2> 		mov	al,40h
  6001 00004EAB E87D000000          <2> 		call WriteDSP
  6002 00004EB0 31D2                <2> 		xor	edx,edx
  6003 00004EB2 B840420F00          <2> 		mov	eax,1000000
  6004 00004EB7 8B1D[494F0000]      <2> 		mov	ebx,[Freq]
  6005 00004EBD F7F3                <2> 		div	ebx
  6006 00004EBF 89C3                <2> 		mov	ebx,eax
  6007 00004EC1 B800010000          <2> 		mov	eax,256
  6008 00004EC6 29D8                <2> 		sub	eax,ebx
  6009 00004EC8 E860000000          <2> 		call WriteDSP
  6010 00004ECD A0[4D4F0000]        <2> 		mov	al,[WAVEMode]	;write the mode
  6011 00004ED2 E856000000          <2> 		call WriteDSP
  6012 00004ED7 66A1[3E4F0000]      <2> 		mov	ax,[Length1]
  6013 00004EDD E84B000000          <2> 		call WriteDSP
  6014 00004EE2 86C4                <2> 		xchg al,ah
  6015 00004EE4 E844000000          <2> 		call WriteDSP
  6016 00004EE9 C3                  <2> 		ret
  6017                              <2> 
  6018                              <2> MstrVol:    ;uses ax dx
  6019 00004EEA 6650                <2> 	   push ax
  6020 00004EEC 66BA2402            <2> 	   mov	dx,(BasePort+4)
  6021 00004EF0 B022                <2> 	   mov	al,22h
  6022 00004EF2 EE                  <2> 	   out	dx,al
  6023 00004EF3 6658                <2> 	   pop	ax
  6024 00004EF5 6642                <2> 	   inc	dx
  6025 00004EF7 EE                  <2> 	   out	dx,al
  6026 00004EF8 C3                  <2> 	   ret
  6027                              <2> 	   
  6028                              <2> ResetDSP:   ; uses cx dx
  6029 00004EF9 66BA2602            <2> 			mov	dx,(BasePort+6)
  6030 00004EFD B001                <2> 			mov	al,01
  6031 00004EFF EE                  <2> 			out	dx,al
  6032 00004F00 66B93200            <2> 			mov	cx,50
  6033 00004F04 EC                  <2> WaitIt1:	in	al,dx
  6034 00004F05 E2FD                <2> 			loop WaitIt1
  6035 00004F07 30C0                <2> 			xor	al,al
  6036 00004F09 EE                  <2> 			out	dx,al
  6037 00004F0A 66B93200            <2> 			mov	cx,50
  6038 00004F0E EC                  <2> WaitIt2:	in	al,dx
  6039 00004F0F E2FD                <2> 			loop WaitIt2
  6040 00004F11 B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  6041 00004F13 66BA2E02            <2> 			mov	dx,(BasePort+14)
  6042 00004F17 EC                  <2> 			in	al,dx
  6043 00004F18 2480                <2> 			and	al,80h
  6044 00004F1A 3C80                <2> 			cmp	al,80h
  6045 00004F1C 750C                <2> 			jne	ResetErr
  6046 00004F1E 66BA2A02            <2> 			mov	dx,(BasePort+10)
  6047 00004F22 EC                  <2> 			in	al,dx
  6048 00004F23 3CAA                <2> 			cmp	al,0AAh
  6049 00004F25 7503                <2> 			jne	ResetErr
  6050 00004F27 B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  6051 00004F29 C3                  <2> 			ret
  6052 00004F2A 30C0                <2> ResetErr:	xor al, al
  6053 00004F2C C3                  <2> 			ret
  6054                              <2> 
  6055                              <2> WriteDSP:   ;uses ax dx
  6056 00004F2D 6650                <2> 		push ax
  6057 00004F2F 66BA2C02            <2> 		mov	dx,(BasePort+12)
  6058 00004F33 EC                  <2> WaitIt:	in	al,dx
  6059 00004F34 2480                <2> 		and	al,80h
  6060 00004F36 75FB                <2> 		jnz	WaitIt
  6061 00004F38 6658                <2> 		pop	ax
  6062 00004F3A EE                  <2> 		out	dx,al
  6063 00004F3B C3                  <2> 		ret
  6064                              <2> 
  6065 00004F3C 0000                <2> Length0 dw	0
  6066 00004F3E 0000                <2> Length1	dw  0
  6067 00004F40 00000000            <2> NextMemLoc dd 0
  6068 00004F44 00000000            <2> MemLoc	dd  0
  6069 00004F48 00                  <2> Page1	db  0
  6070 00004F49 00000000            <2> Freq	dd	0
  6071 00004F4D 14                  <2> WAVEMode db 14h
  6072                              <2> 
  6073                              <2> PgPort	equ 83h
  6074                              <2> AddPort	equ 02h
  6075                              <2> LenPort	equ 03h
  6076                              <2> ModeReg	equ 49h
  6077                              <2> Channel	equ 01h
  6078                              <2> BasePort	equ 220h
  6079 00004F4E 00                  <2> SoundBlaster	db 0
  6080                              <1> %include "source/drivers/network/rtl8139.asm"
  6081                              <2> ;RTL8139 NIC DRIVER
  6082                              <2> rtl8139:
  6083                              <2> .RBSTART equ 0x30
  6084                              <2> .IMR equ 0x3C
  6085                              <2> .ISR equ 0x3E
  6086                              <2> .CMD equ 0x37
  6087                              <2> .RCR equ 0x44
  6088                              <2> .CONFIG1 equ 0x52
  6089                              <2> .TSD0 equ 0x10
  6090                              <2> .TSAD0 equ 0x20
  6091                              <2> .initcard:	;should find card, get mac, and initialize card
  6092 00004F4F 31C0                <2> 	xor eax, eax
  6093 00004F51 A2[1A700000]        <2> 	mov [pcifunction], al
  6094 00004F56 A2[18700000]        <2> 	mov [pcibus], al
  6095 00004F5B A2[19700000]        <2> 	mov [pcidevice], al
  6096 00004F60 B002                <2> 	mov al, 0x02 ;;type code
  6097 00004F62 A2[95700000]        <2> 	mov [pcitype], al
  6098 00004F67 E8B1200000          <2> 	call getpciport
  6099                              <2> .initnic:	;Here i tried the rtl8139 interface, fuck it
  6100 00004F6C 8915[1F510000]      <2> 	mov [basenicaddr], edx
  6101 00004F72 89D1                <2> 	mov ecx, edx
  6102 00004F74 E8CDE3FFFF          <2> 	call showhex	;for debugging, please remove
  6103 00004F79 BE[AE800100]        <2> 	mov esi, rbuffstart
  6104 00004F7E B900200000          <2> 	mov ecx, 8192
  6105 00004F83 31C0                <2> 	xor eax, eax
  6106                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
  6107 00004F85 8806                <2> 	mov [esi], al
  6108 00004F87 46                  <2> 	inc esi
  6109 00004F88 6649                <2> 	dec cx
  6110 00004F8A 6681F90000          <2> 	cmp cx, 0
  6111 00004F8F 75F4                <2> 	jne .clearrbuff
  6112                              <2> .findmac:
  6113 00004F91 8B15[1F510000]      <2> 	mov edx, [basenicaddr]
  6114 00004F97 BF[27510000]        <2> 	mov edi, sysmac
  6115 00004F9C B906000000          <2> 	mov ecx, 6
  6116                              <2> .macputloop:
  6117 00004FA1 EC                  <2> 	in al, dx
  6118 00004FA2 8807                <2> 	mov [edi], al
  6119 00004FA4 47                  <2> 	inc edi
  6120 00004FA5 42                  <2> 	inc edx
  6121 00004FA6 49                  <2> 	dec ecx
  6122 00004FA7 75F8                <2> 	jnz .macputloop
  6123 00004FA9 B9[27510000]        <2> 	mov ecx, sysmac
  6124 00004FAE E803010000          <2> 	call showmac
  6125                              <2> .resetnic:
  6126 00004FB3 8B15[1F510000]      <2> 	mov edx, [basenicaddr]
  6127 00004FB9 81C252000000        <2> 	add edx, .CONFIG1
  6128 00004FBF 30C0                <2> 	xor al, al
  6129 00004FC1 EE                  <2> 	out dx, al	;WAKE UP!!!!
  6130 00004FC2 8B15[1F510000]      <2> 	mov edx, [basenicaddr]
  6131 00004FC8 81C237000000        <2> 	add edx, .CMD
  6132 00004FCE B010                <2> 	mov al, 0x10
  6133 00004FD0 EE                  <2> 	out dx, al	;Reset
  6134                              <2> .resetnicwait:
  6135 00004FD1 8B15[1F510000]      <2> 	mov edx, [basenicaddr]
  6136 00004FD7 81C237000000        <2> 	add edx, .CMD
  6137 00004FDD EC                  <2> 	in al, dx
  6138 00004FDE 2410                <2> 	and al, 0x10
  6139 00004FE0 3C10                <2> 	cmp al, 0x10
  6140 00004FE2 0F84E9FFFFFF        <2> 	je near .resetnicwait
  6141 00004FE8 8B15[1F510000]      <2> 	mov edx, [basenicaddr]
  6142 00004FEE 81C230000000        <2> 	add edx, .RBSTART
  6143 00004FF4 B8[AE800100]        <2> 	mov eax, rbuffstart
  6144 00004FF9 0500001000          <2> 	add eax, 0x100000 ;change virtual to physical address
  6145 00004FFE EF                  <2> 	out dx, eax	;give nic receive buffer location
  6146 00004FFF 8B15[1F510000]      <2> 	mov edx, [basenicaddr]
  6147 00005005 81C23C000000        <2> 	add edx, .IMR
  6148 0000500B 66ED                <2> 	in ax, dx
  6149 0000500D 660D7FE0            <2> 	or ax, 0xE07F ;set all possible interrupts to enabled
  6150 00005011 66EF                <2> 	out dx, ax	;set TOK and ROK
  6151 00005013 8B15[1F510000]      <2> 	mov edx, [basenicaddr]
  6152 00005019 81C244000000        <2> 	add edx, .RCR
  6153 0000501F B80F000000          <2> 	mov eax, 0xf
  6154 00005024 0580000000          <2> 	add eax, 128 ;enable wrap option
  6155 00005029 EF                  <2> 	out dx, eax	;recieve packets from all matches
  6156 0000502A 8B15[1F510000]      <2> 	mov edx, [basenicaddr]
  6157 00005030 81C237000000        <2> 	add edx, .CMD
  6158 00005036 B00C                <2> 	mov al, 0x0C
  6159 00005038 EE                  <2> 	out dx, al	;use transmit and receive
  6160 00005039 C605[1E510000]01    <2> 	mov byte [nicconfig], 1
  6161 00005040 C3                  <2> 	ret
  6162                              <2> 	
  6163                              <2> .sendpacket:	;packet with beginning in edi and end in esi
  6164 00005041 56                  <2> 	push esi
  6165 00005042 57                  <2> 	push edi
  6166                              <2> .nic2:		;here come the low level drivers :(
  6167                              <2> 			;frame begins at esi, ends at edi
  6168                              <2>  			;0x0200 is the class code for ethernet cards
  6169 00005043 803D[1E510000]01    <2> 	cmp byte [nicconfig], 1
  6170 0000504A 7405                <2> 	je .sendcachedata
  6171 0000504C E8FEFEFFFF          <2> 	call .initcard
  6172                              <2> .sendcachedata:
  6173 00005051 8B15[1F510000]      <2> 	mov edx, [basenicaddr]
  6174 00005057 81C220000000        <2> 	add edx, .TSAD0
  6175 0000505D 5F                  <2> 	pop edi
  6176 0000505E 89F8                <2> 	mov eax, edi
  6177 00005060 0500001000          <2> 	add eax, 0x100000 ;base address
  6178 00005065 EF                  <2> 	out dx, eax	;here's Johnny!
  6179 00005066 5E                  <2> 	pop esi
  6180 00005067 29FE                <2> 	sub esi, edi
  6181 00005069 8B15[1F510000]      <2> 	mov edx, [basenicaddr]
  6182 0000506F 81C210000000        <2> 	add edx, .TSD0
  6183 00005075 ED                  <2> 	in eax, dx ;get tsd
  6184 00005076 2500E0FFFF          <2> 	and eax, 0xFFFFE000 ;clear off thirteen bits
  6185 0000507B 01F0                <2> 	add eax, esi ;add length to tsd
  6186 0000507D 25FFDFFFFF          <2> 	and eax, 0xFFFFDFFF ;clear own bit
  6187 00005082 EF                  <2> 	out dx, eax
  6188                              <2> .checknicownbit:
  6189 00005083 8B15[1F510000]      <2> 	mov edx, [basenicaddr]
  6190 00005089 81C210000000        <2> 	add edx, .TSD0
  6191 0000508F ED                  <2> 	in eax, dx
  6192 00005090 2500200000          <2> 	and eax, 0x2000 ;check own bit
  6193 00005095 3D00200000          <2> 	cmp eax, 0x2000
  6194 0000509A 75E7                <2> 	jne .checknicownbit
  6195                              <2> .checknictokbit:
  6196 0000509C 8B15[1F510000]      <2> 	mov edx, [basenicaddr]
  6197 000050A2 81C210000000        <2> 	add edx, .TSD0
  6198 000050A8 ED                  <2> 	in eax, dx
  6199 000050A9 2500800000          <2> 	and eax, 0x8000	;check tok bit
  6200 000050AE 3D00800000          <2> 	cmp eax, 0x8000
  6201 000050B3 75E7                <2> 	jne .checknictokbit
  6202 000050B5 C3                  <2> 	ret
  6203                              <2> 	
  6204                              <2> showmac:	;mac begins in [ecx]
  6205 000050B6 BE[06510000]        <2> 	mov esi, macprint
  6206 000050BB 89CF                <2> 	mov edi, ecx
  6207 000050BD 81C106000000        <2> 	add ecx, 6
  6208                              <2> showmacloop:
  6209 000050C3 8A07                <2> 	mov al, [edi]
  6210 000050C5 8A27                <2> 	mov ah, [edi]
  6211 000050C7 C0E804              <2> 	shr al, 4
  6212 000050CA C0E404              <2> 	shl ah, 4
  6213 000050CD C0EC04              <2> 	shr ah, 4
  6214 000050D0 0430                <2> 	add al, 48
  6215 000050D2 3C39                <2> 	cmp al, "9"
  6216 000050D4 7606                <2> 	jbe .goodal
  6217 000050D6 2C30                <2> 	sub al, 48
  6218 000050D8 2C0A                <2> 	sub al, 0xA
  6219 000050DA 0441                <2> 	add al, "A"
  6220                              <2> .goodal:
  6221 000050DC 80C430              <2> 	add ah, 48
  6222 000050DF 80FC39              <2> 	cmp ah, "9"
  6223 000050E2 7609                <2> 	jbe .goodah
  6224 000050E4 80EC30              <2> 	sub ah, 48
  6225 000050E7 80EC0A              <2> 	sub ah, 0xA
  6226 000050EA 80C441              <2> 	add ah, "A"
  6227                              <2> .goodah:
  6228 000050ED 668906              <2> 	mov [esi], ax
  6229 000050F0 81C603000000        <2> 	add esi, 3
  6230 000050F6 47                  <2> 	inc edi
  6231 000050F7 39CF                <2> 	cmp edi, ecx
  6232 000050F9 72C8                <2> 	jb showmacloop
  6233 000050FB BE[06510000]        <2> 	mov esi, macprint
  6234 00005100 E85ED2FFFF          <2> 	call print
  6235 00005105 C3                  <2> 	ret
  6236                              <2> 	
  6237 00005106 30303A30303A30303A- <2> macprint db "00:00:00:00:00:00  ",0
  6238 0000510F 30303A30303A303020- <2>
  6239 00005118 2000                <2>
  6240 0000511A 00000000            <2> ethernetend dw 0,0
  6241 0000511E 00                  <2> nicconfig db 0
  6242 0000511F 00000000            <2> basenicaddr	db 0,0,0,0
  6243 00005123 C0A80005            <2> sysip db 192,168,0,5
  6244 00005127 000000000000        <2> sysmac	db 0,0,0,0,0,0		;my mac address
  6245                              <1> %include "source/drivers/input/mouse.asm"
  6246 0000512D 00                  <2> mousedisabled db 0
  6247                              <2> 	
  6248                              <2> 	cursorgui:
  6249 0000512E 803D[236B0000]01    <2> 		cmp byte [mouseon], 1
  6250 00005135 0F8432000000        <2> 		je near moused
  6251 0000513B 803D[1D8D0000]00    <2> 		cmp byte [guion], 0
  6252 00005142 0F841F040000        <2> 		je near entdown
  6253                              <2> 	initmouse:
  6254 00005148 803D[1D8D0000]00    <2> 		cmp byte [guion], 0
  6255 0000514F 7405                <2> 		je noswmsposinit
  6256 00005151 E8C5080000          <2> 		call switchmousepos2
  6257                              <2> 	noswmsposinit:
  6258 00005156 E84E020000          <2> 	  	call PS2SET
  6259 0000515B E877020000          <2> 		call ACTMOUS
  6260 00005160 C605[236B0000]01    <2> 		mov byte [mouseon],1
  6261 00005167 E890020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  6262                              <2> 				;;If the bytes are mixed up,
  6263                              <2> 				;;remove this line or add another of this line.
  6264                              <2> 	nomouse:
  6265 0000516C C3                  <2> 		ret
  6266                              <2> 	moused:
  6267 0000516D 803D[2D510000]01    <2> 		cmp byte [mousedisabled], 1
  6268 00005174 74F6                <2> 		je nomouse
  6269 00005176 803D[236B0000]01    <2> 		  cmp byte [mouseon], 1
  6270 0000517D 75C9                <2> 		  jne initmouse
  6271 0000517F E878020000          <2> 		  call GETB
  6272 00005184 88C3                <2> 		  mov  bl, al
  6273 00005186 80E301              <2> 		  and  bl, 1
  6274 00005189 881D[21540000]      <2> 		  mov  BYTE [LBUTTON], bl
  6275 0000518F 88C3                <2> 		  mov  bl, al
  6276 00005191 80E302              <2> 		  and  bl, 2
  6277 00005194 D0EB                <2> 		  shr  bl, 1
  6278 00005196 881D[22540000]      <2> 		  mov  BYTE [RBUTTON], bl
  6279 0000519C 88C3                <2> 		  mov  bl, al
  6280 0000519E 80E304              <2> 		  and  bl, 4
  6281 000051A1 C0EB02              <2> 		  shr  bl, 2
  6282 000051A4 881D[23540000]      <2> 		  mov  BYTE [MBUTTON], bl
  6283 000051AA E84D020000          <2> 		  call GETB
  6284 000051AF A2[24540000]        <2> 		  mov  BYTE [XCOORD], al
  6285 000051B4 E843020000          <2> 		  call GETB
  6286 000051B9 A2[25540000]        <2> 		  mov  BYTE [YCOORD], al
  6287                              <2> 
  6288                              <2> 	showpixelcursor:
  6289 000051BE 668B15[10530000]    <2> 		mov dx, [mousecursorposition]
  6290 000051C5 668B0D[12530000]    <2> 		mov cx, [mousecursorposition + 2]
  6291 000051CC 668915[0C530000]    <2> 		mov [lastmouseposition], dx
  6292 000051D3 66890D[0E530000]    <2> 		mov [lastmouseposition + 2], cx
  6293 000051DA A0[24540000]        <2> 		mov al, [XCOORD]
  6294 000051DF 3C80                <2> 		cmp al, 128
  6295 000051E1 730C                <2> 		jae subxcoord
  6296 000051E3 00C0                <2> 		add al, al
  6297 000051E5 30E4                <2> 		xor ah, ah
  6298 000051E7 6601C2              <2> 		add dx, ax
  6299 000051EA E90B000000          <2> 		jmp subxcoorddn
  6300                              <2> 	subxcoord:
  6301 000051EF 00C0                <2> 		add al, al
  6302 000051F1 30DB                <2> 		xor bl, bl
  6303 000051F3 28C3                <2> 		sub bl, al
  6304 000051F5 30FF                <2> 		xor bh, bh
  6305 000051F7 6629DA              <2> 		sub dx, bx
  6306                              <2> 	subxcoorddn:
  6307 000051FA 8A1D[25540000]      <2> 		mov bl, [YCOORD]
  6308 00005200 30C0                <2> 		xor al, al
  6309 00005202 28D8                <2> 		sub al, bl
  6310 00005204 3C80                <2> 		cmp al, 128
  6311 00005206 730A                <2> 		jae subycoord
  6312 00005208 30E4                <2> 		xor ah, ah
  6313 0000520A 6601C1              <2> 		add cx, ax
  6314 0000520D E909000000          <2> 		jmp subycoorddn
  6315                              <2> 	subycoord:
  6316 00005212 30DB                <2> 		xor bl, bl
  6317 00005214 28C3                <2> 		sub bl, al
  6318 00005216 30FF                <2> 		xor bh, bh
  6319 00005218 6629D9              <2> 		sub cx, bx
  6320                              <2> 	subycoorddn:
  6321 0000521B 6681FA204E          <2> 		cmp dx, 20000
  6322 00005220 7603                <2> 		jbe nooriginx2
  6323 00005222 6631D2              <2> 		xor dx, dx
  6324                              <2> 	nooriginx2:
  6325 00005225 6681F9204E          <2> 		cmp cx, 20000
  6326 0000522A 7603                <2> 		jbe nooriginy2
  6327 0000522C 6631C9              <2> 		xor cx, cx
  6328                              <2> 	nooriginy2:
  6329 0000522F 6681FA0000          <2> 		cmp dx, 0
  6330 00005234 7415                <2> 		je nofixxcolumn2
  6331 00005236 663B15[1B8D0000]    <2> 		cmp dx, [resolutionx2]
  6332 0000523D 720C                <2> 		jb nofixxcolumn2
  6333 0000523F 668B15[1B8D0000]    <2> 		mov dx, [resolutionx2]
  6334 00005246 6681EA0200          <2> 		sub dx, 2
  6335                              <2> 	nofixxcolumn2:
  6336 0000524B 6681F90000          <2> 		cmp cx, 0
  6337 00005250 7415                <2> 		je nofixyrow2
  6338 00005252 663B0D[2F8C0000]    <2> 		cmp cx, [resolutiony]
  6339 00005259 720C                <2> 		jb nofixyrow2
  6340 0000525B 668B0D[2F8C0000]    <2> 		mov cx, [resolutiony]
  6341 00005262 6681E90100          <2> 		sub cx, 1
  6342                              <2> 	nofixyrow2:
  6343 00005267 668915[10530000]    <2> 		mov [mousecursorposition], dx
  6344 0000526E 66890D[12530000]    <2> 		mov [mousecursorposition + 2], cx
  6345 00005275 803D[1D8D0000]00    <2> 		cmp byte [guion], 0
  6346 0000527C 0F8492000000        <2> 		je near termmouse
  6347 00005282 E834070000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  6348 00005287 803D[21540000]01    <2> 		cmp byte [LBUTTON], 1
  6349 0000528E 0F84FB070000        <2> 		je near clickicon
  6350 00005294 803D[22540000]01    <2> 		cmp byte [RBUTTON], 1
  6351 0000529B 0F84EE070000        <2> 		je near clickicon
  6352 000052A1 A0[7C5A0000]        <2> 		mov al, [pbutton]
  6353 000052A6 C705[7F5A0000]0000- <2> 		mov dword [dragging], 0
  6354 000052AE 0000                <2>
  6355 000052B0 3C00                <2> 		cmp al, 0
  6356 000052B2 740F                <2> 		je nopreviousbutton
  6357 000052B4 E8A8060000          <2> 		call clearmousecursor
  6358 000052B9 E8080D0000          <2> 		call reloadallgraphics
  6359                              <2> 	windowtermcopyend:
  6360 000052BE E858070000          <2> 		call switchmousepos2
  6361                              <2> 	nopreviousbutton:
  6362 000052C3 30C0                <2> 		xor al, al
  6363 000052C5 A2[7C5A0000]        <2> 		mov [pbutton], al
  6364 000052CA A0[21540000]        <2> 		mov al, [LBUTTON]
  6365 000052CF A2[7D5A0000]        <2> 		mov [pLBUTTON], al
  6366 000052D4 A0[22540000]        <2> 		mov al, [RBUTTON]
  6367 000052D9 A2[7E5A0000]        <2> 		mov [pRBUTTON], al
  6368 000052DE 31C9                <2> 		xor ecx, ecx
  6369 000052E0 31D2                <2> 		xor edx, edx
  6370 000052E2 668B15[10530000]    <2> 		mov dx, [mousecursorposition]
  6371 000052E9 668B0D[12530000]    <2> 		mov cx, [mousecursorposition + 2]
  6372 000052F0 66BB18C7            <2> 		mov bx, 1100011100011000b
  6373 000052F4 30E4                <2> 		xor ah, ah
  6374 000052F6 B0FE                <2> 		mov al, 254
  6375 000052F8 C605[5E590000]01    <2> 		mov byte [showcursorfonton], 1
  6376 000052FF E88C150000          <2> 		call showfontvesa
  6377 00005304 C605[5E590000]00    <2> 		mov byte [showcursorfonton], 0
  6378 0000530B C3                  <2> 		ret
  6379                              <2> 
  6380 0000530C 84008400            <2> lastmouseposition dw 132,132
  6381 00005310 84008400            <2> mousecursorposition dw 132,132	
  6382                              <2> 
  6383                              <2> termmouse:
  6384 00005314 BE[26CE0000]        <2> 		mov esi, videobuf
  6385 00005319 31D2                <2> 		xor edx, edx
  6386 0000531B 668B15[0C530000]    <2> 		mov dx, [lastmouseposition]
  6387 00005322 668B0D[0E530000]    <2> 		mov cx, [lastmouseposition + 2]
  6388 00005329 66A1[A7530000]      <2> 		mov ax, [cursorcache]
  6389 0000532F 663D0000            <2> 		cmp ax, 0
  6390 00005333 7425                <2> 		je nocopycursorcache
  6391 00005335 66C1E104            <2> 		shl cx, 4
  6392 00005339 66C1E203            <2> 		shl dx, 3
  6393 0000533D 01D6                <2> 		add esi, edx
  6394 0000533F 6631D2              <2> 		xor dx, dx
  6395 00005342 8A15[092A0000]      <2> 		mov dl, [charxy]
  6396 00005348 6641                <2> 		inc cx
  6397                              <2> termmousecplp1:
  6398 0000534A 01D6                <2> 		add esi, edx
  6399 0000534C 6649                <2> 		dec cx
  6400 0000534E 6681F90000          <2> 		cmp cx, 0
  6401 00005353 75F5                <2> 		jne termmousecplp1
  6402 00005355 29D6                <2> 		sub esi, edx
  6403 00005357 668906              <2> 		mov [esi], ax
  6404                              <2> nocopycursorcache:
  6405 0000535A BE[26CE0000]        <2> 		mov esi, videobuf
  6406 0000535F 31D2                <2> 		xor edx, edx
  6407 00005361 668B15[10530000]    <2> 		mov dx, [mousecursorposition]
  6408 00005368 668B0D[12530000]    <2> 		mov cx, [mousecursorposition + 2]
  6409 0000536F 66C1E104            <2> 		shl cx, 4
  6410 00005373 66C1E203            <2> 		shl dx, 3
  6411 00005377 01D6                <2> 		add esi, edx
  6412 00005379 6631D2              <2> 		xor dx, dx
  6413 0000537C 8A15[092A0000]      <2> 		mov dl, [charxy]
  6414 00005382 6641                <2> 		inc cx
  6415                              <2> termmousecplp2:
  6416 00005384 01D6                <2> 		add esi, edx
  6417 00005386 6649                <2> 		dec cx
  6418 00005388 6681F90000          <2> 		cmp cx, 0
  6419 0000538D 75F5                <2> 		jne termmousecplp2
  6420 0000538F 29D6                <2> 		sub esi, edx
  6421 00005391 668B06              <2> 		mov ax, [esi]
  6422 00005394 66A3[A7530000]      <2> 		mov [cursorcache], ax
  6423 0000539A B080                <2> 		mov al, 128
  6424 0000539C B407                <2> 		mov ah, 7
  6425 0000539E 668906              <2> 		mov [esi], ax
  6426 000053A1 E8FAD6FFFF          <2> 		call termcopy
  6427 000053A6 C3                  <2> 		ret
  6428 000053A7 0000                <2> cursorcache db 0,0
  6429                              <2> 
  6430                              <2> PS2SET:
  6431 000053A9 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  6432 000053AB E664                <2>   out  0x64, al		; write to keyboardcontroller
  6433 000053AD E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  6434 000053B2 C3                  <2> ret
  6435                              <2> 
  6436                              <2> CHKPRT:
  6437 000053B3 66B96400            <2>   mov  cx, 100
  6438                              <2>  .again:
  6439 000053B7 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6440 000053B9 A802                <2>   test al, 2		; Check if input buffer is empty
  6441 000053BB 7402                <2>   je .go
  6442 000053BD E2F8                <2>   loop .again
  6443                              <2>  .go:
  6444 000053BF C3                  <2> ret
  6445                              <2> 
  6446                              <2> WMOUS:
  6447 000053C0 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  6448 000053C2 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6449 000053C4 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6450 000053C9 C3                  <2> ret
  6451                              <2> 
  6452                              <2> MBUFFUL:
  6453 000053CA 66B96400            <2>   mov cx, 100
  6454                              <2>  .mn:
  6455 000053CE E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6456 000053D0 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  6457 000053D2 7402                <2>   jz  .mnn
  6458 000053D4 E2F8                <2>   loop .mn
  6459                              <2>  .mnn:
  6460 000053D6 C3                  <2> ret
  6461                              <2> 
  6462                              <2> 
  6463                              <2> ACTMOUS:
  6464 000053D7 E8E4FFFFFF          <2>   call WMOUS
  6465 000053DC B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  6466 000053DE E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  6467 000053E0 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6468 000053E5 E801000000          <2>   call CHKMOUS		; check if a byte is available
  6469 000053EA C3                  <2> ret
  6470                              <2> 
  6471                              <2> CHKMOUS:
  6472 000053EB B300                <2>   mov  bl, 0
  6473 000053ED 66B96400            <2>   mov cx, 100
  6474                              <2>  .vrd:
  6475 000053F1 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6476 000053F3 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  6477 000053F5 7504                <2>   jnz .yy
  6478 000053F7 E2F8                <2>   loop .vrd
  6479 000053F9 B301                <2>   mov  bl, 1
  6480                              <2>  .yy:
  6481 000053FB C3                  <2> ret
  6482                              <2> 
  6483                              <2> GETB:
  6484                              <2>  .cagain:
  6485 000053FC E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  6486 00005401 08DB                <2>   or bl, bl
  6487 00005403 75F7                <2>   jnz .cagain
  6488 00005405 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  6489 00005407 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6490 00005409 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6491 0000540E 6631C0              <2>   xor  ax, ax
  6492 00005411 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  6493 00005413 88C2                <2>   mov  dl, al
  6494 00005415 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  6495 00005417 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6496 00005419 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6497 0000541E 88D0                <2>   mov  al, dl
  6498 00005420 C3                  <2> ret
  6499                              <2> 
  6500 00005421 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  6501 00005422 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  6502 00005423 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  6503 00005424 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  6504 00005425 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  6505                              <1> %include "source/drivers/input/keyboard.asm"
  6506 00005426 00                  <2> specialkey db 0
  6507 00005427 00                  <2> charregion db 0
  6508                              <2> waitforinput:		;;this is basically the idle process
  6509                              <2> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  6510                              <2> 					;;this lets the cpu stay at close to 0% instead of 100%
  6511 00005428 6631C0              <2> 	xor ax, ax
  6512 0000542B A0[A8730000]        <2> 	mov al, [threadson]
  6513 00005430 8825[A8730000]      <2> 	mov [threadson], ah
  6514 00005436 FB                  <2> 	sti
  6515 00005437 F4                  <2> 	hlt
  6516 00005438 A2[A8730000]        <2> 	mov [threadson], al
  6517 0000543D 3A25[2B280000]      <2> 	cmp ah, [trans]
  6518 00005443 7401                <2> 	je getkey
  6519 00005445 C3                  <2> 	ret
  6520                              <2> getkey:
  6521 00005446 31C0                <2> 		xor eax, eax
  6522 00005448 A2[26540000]        <2> 		mov [specialkey], al
  6523 0000544D 66A3[29280000]      <2> 		mov [lastkey], ax
  6524 00005453 E464                <2> 		in al, 64h ; Status
  6525 00005455 A820                <2> 		test al, 20h ; PS2-Mouse?
  6526 00005457 0F8510FDFFFF        <2> 		jnz near moused
  6527 0000545D A801                <2> 		test al, 1 
  6528 0000545F 74C7                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process (only works when it is jz guistartin2, use jz guistartin to disable)
  6529                              <2> 	calckey:
  6530 00005461 E460                <2> 		in al, 60h
  6531 00005463 88C4                <2> 		mov ah, al
  6532 00005465 30C0                <2> 		xor al, al
  6533 00005467 8825[2A280000]      <2> 		mov [lastkey + 1], ah
  6534 0000546D 88E0                <2> 		mov al, ah
  6535 0000546F BF[08560000]        <2> 		mov edi, scancode
  6536                              <2> 	searchscan: 
  6537 00005474 3C3A                <2> 		cmp al, 3Ah
  6538 00005476 731A                <2> 		jae scanother
  6539 00005478 30E4                <2> 		xor ah, ah
  6540 0000547A C0E002              <2> 		shl al, 2
  6541 0000547D 01C7                <2> 		add edi, eax
  6542 0000547F D0E8                <2> 		shr al, 1
  6543 00005481 01C7                <2> 		add edi, eax
  6544 00005483 D0E8                <2> 		shr al, 1
  6545 00005485 8A27                <2> 		mov ah, [edi]
  6546 00005487 80FC00              <2> 		cmp ah, 0
  6547 0000548A 7406                <2> 		je scanother
  6548 0000548C E9D7000000          <2> 		jmp scanfound
  6549 00005491 00                  <2> uppercase db 0
  6550                              <2> scanother:
  6551 00005492 88C4                <2> 		mov ah, al
  6552 00005494 30C0                <2> 		xor al, al
  6553 00005496 66A3[29280000]      <2> 		mov [lastkey], ax
  6554 0000549C 80FCE0              <2> 		cmp ah, 0E0h
  6555 0000549F 0F847D000000        <2> 		je near getkeyspecial
  6556 000054A5 803D[26540000]E0    <2> 		cmp byte [specialkey], 0xE0
  6557 000054AC 752B                <2> 		jne nospecialkey
  6558 000054AE 80FC38              <2> 		cmp ah, 38h
  6559 000054B1 0F84A0000000        <2> 		je near alton
  6560 000054B7 80FCB8              <2> 		cmp ah, 0B8h
  6561 000054BA 0F849F000000        <2> 		je near altoff
  6562 000054C0 80FC1D              <2> 		cmp ah, 1Dh
  6563 000054C3 0F847E000000        <2> 		je near ctron
  6564 000054C9 80FC9D              <2> 		cmp ah, 9Dh
  6565 000054CC 0F847D000000        <2> 		je near ctroff
  6566 000054D2 66A3[29280000]      <2> 		mov [lastkey], ax
  6567 000054D8 C3                  <2> 		ret
  6568                              <2> nospecialkey:
  6569 000054D9 80FC2A              <2> 		cmp ah, 2Ah
  6570 000054DC 0F8455000000        <2> 		je near shifton
  6571 000054E2 80FC36              <2> 		cmp ah, 36h
  6572 000054E5 0F844C000000        <2> 		je near shifton
  6573 000054EB 80FC1C              <2> 		cmp ah, 1Ch
  6574 000054EE 0F8473000000        <2> 		je near entdown
  6575 000054F4 80FCAA              <2> 		cmp ah, 0AAh
  6576 000054F7 0F8442000000        <2> 		je near shiftoff
  6577 000054FD 80FCB6              <2> 		cmp ah, 0B6h
  6578 00005500 0F8439000000        <2> 		je near shiftoff
  6579 00005506 80FC3A              <2> 		cmp ah, 3Ah
  6580 00005509 0F84A5000000        <2> 		je near capslock
  6581 0000550F 80FC45              <2> 		cmp ah, 0x45
  6582 00005512 0F84AD000000        <2> 		je near numlock
  6583 00005518 80FC46              <2> 		cmp ah, 0x46
  6584 0000551B 0F84BC000000        <2> 		je near scrolllock
  6585 00005521 C3                  <2> 		ret
  6586                              <2> 	getkeyspecial:
  6587 00005522 C605[26540000]E0    <2> 		mov byte [specialkey], 0xE0
  6588 00005529 E933FFFFFF          <2> 		jmp calckey
  6589                              <2> 	shift:
  6590 0000552E A0[91540000]        <2> 		mov al, [uppercase]
  6591 00005533 3C01                <2> 		cmp al, 1
  6592 00005535 7308                <2> 		jae shiftoff
  6593                              <2> 	shifton:
  6594 00005537 C605[91540000]01    <2> 		mov byte [uppercase], 1
  6595 0000553E C3                  <2> 		ret
  6596                              <2> 	shiftoff:
  6597 0000553F C605[91540000]00    <2> 		mov byte [uppercase], 0
  6598 00005546 C3                  <2> 		ret
  6599                              <2> 	ctron:
  6600 00005547 C605[B3550000]01    <2> 		mov byte [ctrkey], 1
  6601 0000554E C3                  <2> 		ret
  6602                              <2> 	ctroff:
  6603 0000554F C605[B3550000]00    <2> 		mov byte [ctrkey], 0
  6604 00005556 C3                  <2> 		ret
  6605                              <2> 	alton:
  6606 00005557 C605[B2550000]01    <2> 		mov byte [altkey], 1
  6607 0000555E C3                  <2> 		ret
  6608                              <2> 	altoff:
  6609 0000555F C605[B2550000]00    <2> 		mov byte [altkey], 0
  6610 00005566 C3                  <2> 		ret
  6611                              <2> 	entdown:
  6612 00005567 C3                  <2> 		ret
  6613                              <2> 	scanfound:
  6614 00005568 81C704000000        <2> 		add edi, 4
  6615 0000556E 803D[B3550000]01    <2> 		cmp byte [ctrkey], 1
  6616 00005575 731B                <2> 		jae altin
  6617 00005577 81EF04000000        <2> 		sub edi, 4
  6618 0000557D 81C702000000        <2> 		add edi, 2
  6619 00005583 803D[B2550000]01    <2> 		cmp byte [altkey], 1
  6620 0000558A 7306                <2> 		jae altin
  6621 0000558C 81EF02000000        <2> 		sub edi, 2
  6622                              <2> altin:
  6623 00005592 81C701000000        <2> 		add edi, 1
  6624 00005598 803D[91540000]01    <2> 		cmp byte [uppercase], 1
  6625 0000559F 7306                <2> 		jae uppercaseon
  6626 000055A1 81EF01000000        <2> 		sub edi, 1
  6627                              <2> uppercaseon:
  6628 000055A7 8A07                <2> 		mov al,[edi]
  6629 000055A9 A2[29280000]        <2> 		mov [lastkey], al
  6630 000055AE C3                  <2> 		ret
  6631                              <2> 		
  6632 000055AF 00                  <2> keyboardstatus db 0
  6633 000055B0 00                  <2> numlockstatus db 0
  6634 000055B1 00                  <2> scrolllockstatus db 0
  6635 000055B2 00                  <2> altkey db 0
  6636 000055B3 00                  <2> ctrkey db 0
  6637                              <2> 	capslock:
  6638 000055B4 8035[AF550000]04    <2> 		xor byte [keyboardstatus], 00000100b
  6639 000055BB E835000000          <2> 		call updatekblights
  6640 000055C0 E969FFFFFF          <2> 		jmp shift
  6641                              <2> 		
  6642                              <2> 	numlock:
  6643 000055C5 8035[AF550000]02    <2> 		xor byte [keyboardstatus], 00000010b
  6644 000055CC 8035[B0550000]01    <2> 		xor byte [numlockstatus], 1
  6645 000055D3 E81D000000          <2> 		call updatekblights
  6646 000055D8 E969FEFFFF          <2> 		jmp getkey
  6647                              <2> 	
  6648                              <2> 	scrolllock:
  6649 000055DD 8035[AF550000]01    <2> 		xor byte [keyboardstatus], 00000001b
  6650 000055E4 8035[B1550000]01    <2> 		xor byte [scrolllockstatus], 1
  6651 000055EB E805000000          <2> 		call updatekblights
  6652 000055F0 E951FEFFFF          <2> 		jmp getkey
  6653                              <2> 		
  6654                              <2> 	updatekblights:
  6655 000055F5 B0ED                <2> 		mov al, 0xED
  6656 000055F7 66BA6000            <2> 		mov dx, 0x60
  6657 000055FB EE                  <2> 		out dx, al
  6658                              <2> 	chkkbdack:
  6659 000055FC EC                  <2> 		in al, dx
  6660 000055FD 3CFA                <2> 		cmp al, 0xFA
  6661 000055FF 75FB                <2> 		jne chkkbdack
  6662 00005601 A0[AF550000]        <2> 		mov al, [keyboardstatus]
  6663 00005606 EE                  <2> 		out dx, al
  6664 00005607 C3                  <2> 		ret
  6665                              <2> 		
  6666                              <2> scancode:
  6667 00005608 000000000000        <2> 	db 0,0,0,0,0,0				;0h
  6668 0000560E 000000000000        <2> 	db 0,0,0,0,0,0				;1h
  6669 00005614 3121AD000000        <2> 	db '1','!',0xAD,0,0,0		;2h
  6670 0000561A 3240FDFB0000        <2> 	db '2','@',0xFD,0xFB,0,0	;3h
  6671 00005620 332300000000        <2> 	db '3','#',0,0,0,0			;4h
  6672 00005626 34249B9C0000        <2> 	db '4','$',0x9B,0x9C,0,0	;5h
  6673 0000562C 3525EE000000        <2> 	db '5','%',0xEE,0,0,0		;6h
  6674 00005632 365EAC000000        <2> 	db '6','^',0xAC,0,0,0		;7h
  6675 00005638 3726AB000000        <2> 	db '7','&',0xAB,0,0,0		;8h
  6676 0000563E 382AEC000000        <2> 	db '8','*',0xEC,0,0,0		;9h
  6677 00005644 392800000000        <2> 	db '9','(',0,0,0,0			;0Ah
  6678 0000564A 302900000000        <2> 	db '0',')',0,0,0,0			;0Bh
  6679 00005650 2D5F9DF10000        <2> 	db '-','_',0x9D,0xF1,0,0	;0Ch
  6680 00005656 3D2BF7F60000        <2> 	db '=','+',0xF7,0xF6,0,0	;0Dh
  6681 0000565C 080800000000        <2> 	db 8,8,0,0,0,0				;0Eh
  6682 00005662 000000000000        <2> 	db 0,0,0,0,0,0				;0Fh
  6683 00005668 7151848E0000        <2> 	db 'q','Q',0x84,0x8E,0,0	;10h
  6684 0000566E 7757868F0000        <2> 	db 'w','W',0x86,0x8F,0,0	;11h
  6685 00005674 65458290EE45        <2> 	db 'e','E',0x82,0x90,0xEE,'E'	;12h
  6686 0000567A 7252898A7050        <2> 	db 'r','R',0x89,0x8A,'p','P'	;13h
  6687 00005680 7454819AE754        <2> 	db 't','T',0x81,0x9A,0xE7,'T'	;14h
  6688 00005686 795998007559        <2> 	db 'y','Y',0x98,0,'u','Y'	;15h
  6689 0000568C 7555A3970000        <2> 	db 'u','U',0xA3,0x97,0,0		;16h
  6690 00005692 6949A18D6949        <2> 	db 'i','I',0xA1,0x8D,'i','I'	;17h
  6691 00005698 6F4FA29577EA        <2> 	db 'o','O',0xA2,0x95,'w',0xEA	;18h
  6692 0000569E 70509499E3EF        <2> 	db 'p','P',0x94,0x99,0xE3,0xEF	;19h
  6693 000056A4 5B7BF4000000        <2> 	db '[','{',0xF4,0,0,0		;1Ah
  6694 000056AA 5D7DF5000000        <2> 	db ']','}',0xF5,0,0,0		;1Bh
  6695 000056B0 000000000000        <2> 	db 0,0,0,0,0,0				;1Ch
  6696 000056B6 000000000000        <2> 	db 0,0,0,0,0,0				;1Dh
  6697 000056BC 6141A085E041        <2> 	db 'a','A',0xA0,133,224,'A'	;1Eh
  6698 000056C2 73531500E5E4        <2> 	db 's','S',21,0,229,228		;1Fh
  6699 000056C8 6444F800EB7F        <2> 	db 'd','D',0xF8,0,235,127	;20h
  6700 000056CE 66469F00EDE8        <2> 	db 'f','F',159,0,237,232	;21h
  6701 000056D4 6747000079E2        <2> 	db 'g','G',0,0,'y',226		;22h
  6702 000056DA 684800006E48        <2> 	db 'h','H',0,0,'n','H'		;23h
  6703 000056E0 6A4A00000000        <2> 	db 'j','J',0,0,0,0			;24h
  6704 000056E6 6B4B00006B4B        <2> 	db 'k','K',0,0,'k','K'		;25h
  6705 000056EC 6C4C0000E9E9        <2> 	db 'l','L',0,0,233,233		;26h
  6706 000056F2 3B3A14000000        <2> 	db ';',':',20,0,0,0			;27h
  6707 000056F8 272200000000        <2> 	db 27h,22h,0,0,0,0			;28h
  6708 000056FE 607E00000000        <2> 	db '`','~',0,0,0,0			;29h
  6709 00005704 000000000000        <2> 	db 0,0,0,0,0,0				;2Ah
  6710 0000570A 5C7CAAB30000        <2> 	db 92,'|',170,179,0,0		;2Bh
  6711 00005710 7A5A91927A5A        <2> 	db 'z','Z',145,146,'z','Z'	;2Ch
  6712 00005716 7858000000F0        <2> 	db 'x','X',0,0,0,240		;2Dh
  6713 0000571C 634387800000        <2> 	db 'c','C',135,128,0,0		;2Eh
  6714 00005722 765600000000        <2> 	db 'v','V',0,0,0,0			;2Fh
  6715 00005728 62420000E142        <2> 	db 'b','B',0,0,225,'B'		;30h
  6716 0000572E 6E4EA4A5764E        <2> 	db 'n','N',0xA4,0xA5,'v','N'	;31h
  6717 00005734 6D4D0000E64D        <2> 	db 'm','M',0,0,230,'M'		;32h
  6718 0000573A 2C3CF3AE0000        <2> 	db ',','<',0xF3,174,0,0		;33h
  6719 00005740 2E3EF2AF0000        <2> 	db '.','>',0xF2,175,0,0		;34h
  6720 00005746 2F3FA8000000        <2> 	db '/','?',0xA8,0,0,0		;35h
  6721 0000574C 000000000000        <2> 	db 0,0,0,0,0,0				;36h
  6722 00005752 000000000000        <2> 	db 0,0,0,0,0,0				;37h
  6723 00005758 000000000000        <2> 	db 0,0,0,0,0,0				;38h
  6724 0000575E 202000000000        <2> 	db ' ',' ',0,0,0,0			;39h
  6725                              <2> noscan:
  6726                              <2> 
  6727                              <1> ;drivers will soon be handled intelligently
  6728                              <1> ;every driver's source will be scanned for a .init function
  6729                              <1> ;that will be called and if it returns 0
  6730                              <1> ;the hardware was found and the driver initialized properly
  6731                              <1> initialize:
  6732                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  6733 00005764 E814000000          <1> 	call .pic
  6734 00005769 E83C000000          <1> 	call .pit
  6735 0000576E E85E000000          <1> 	call .fpu
  6736 00005773 31C0                <1> 	xor eax, eax
  6737 00005775 31C9                <1> 	xor ecx, ecx
  6738 00005777 E836F6FFFF          <1> 	call sblaster.init
  6739 0000577C C3                  <1> 	ret
  6740                              <1> 	
  6741                              <1> .pic:
  6742 0000577D B011                <1> 	mov al, 0x11
  6743 0000577F E620                <1> 	out 0x20, al
  6744 00005781 E6A0                <1> 	out 0xA0, al
  6745 00005783 B040                <1> 	mov al, 0x40	;interrupt for master
  6746 00005785 E621                <1> 	out 0x21, al
  6747 00005787 B048                <1> 	mov al, 0x48	;interrupt for slave
  6748 00005789 E6A1                <1> 	out 0xA1, al
  6749 0000578B B004                <1> 	mov al, 4
  6750 0000578D E621                <1> 	out 0x21, al
  6751 0000578F B002                <1> 	mov al, 2
  6752 00005791 E6A1                <1> 	out 0xA1, al
  6753 00005793 B001                <1> 	mov al, 0x1
  6754 00005795 E621                <1> 	out 0x21, al
  6755 00005797 B001                <1> 	mov al, 0x1
  6756 00005799 E6A1                <1> 	out 0xA1, al
  6757                              <1> 	;masks are set to zero so as not to mask
  6758 0000579B 30C0                <1> 	xor al, al
  6759 0000579D E621                <1> 	out 0x21, al
  6760 0000579F 30C0                <1> 	xor al, al
  6761 000057A1 E6A1                <1> 	out 0xA1, al
  6762 000057A3 B020                <1> 	mov al, 0x20
  6763 000057A5 E6A0                <1> 	out 0xA0, al
  6764 000057A7 E620                <1> 	out 0x20, al
  6765 000057A9 C3                  <1> 	ret
  6766                              <1> .pit:
  6767                              <1> 	;initialize the PIT
  6768 000057AA 66A1[78060000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  6769 000057B0 E640                <1> 	out 0x40, al
  6770 000057B2 66C1C008            <1> 	rol ax, 8
  6771 000057B6 E640                <1> 	out 0x40, al
  6772                              <1> 	;enable rtc interrupt
  6773 000057B8 B00B                <1> 	mov al, 0xB
  6774 000057BA E670                <1> 	out 0x70, al
  6775 000057BC 66C1C008            <1> 	rol ax, 8
  6776 000057C0 E471                <1> 	in al, 0x71
  6777 000057C2 66C1C008            <1> 	rol ax, 8
  6778 000057C6 E670                <1> 	out 0x70, al
  6779 000057C8 66C1C008            <1> 	rol ax, 8
  6780 000057CC 0C40                <1> 	or al, 0x40
  6781 000057CE E671                <1> 	out 0x71, al
  6782 000057D0 C3                  <1> 	ret
  6783                              <1> .fpu:
  6784                              <1> 	;And now to initialize the fpu
  6785 000057D1 0F20E0              <1> 	mov eax, cr4
  6786 000057D4 0D00020000          <1> 	or eax, 0x200
  6787 000057D9 0F22E0              <1> 	mov cr4, eax
  6788 000057DC B87F0B0000          <1> 	mov eax, 0xB7F
  6789 000057E1 50                  <1> 	push eax
  6790 000057E2 D92C24              <1> 	fldcw [esp]
  6791 000057E5 58                  <1> 	pop eax
  6792 000057E6 C3                  <1> 	ret
  6793                              <1> 	
  6794                                      %include 'source/gui.asm'
  6795                              <1> guiclear:
  6796 000057E7 8B3D[438C0000]      <1> 	mov edi, [physbaseptr]
  6797 000057ED 668B15[2D8C0000]    <1> 	mov dx, [resolutionx]
  6798 000057F4 668B0D[2F8C0000]    <1> 	mov cx, [resolutiony]
  6799 000057FB 66A1[24580000]      <1> 	mov ax, [background]
  6800                              <1> guiclearloop:
  6801 00005801 668907              <1> 	mov [edi], ax
  6802 00005804 81C702000000        <1> 	add edi, 2
  6803 0000580A 664A                <1> 	dec dx
  6804 0000580C 6681FA0000          <1> 	cmp dx, 0
  6805 00005811 77EE                <1> 	ja guiclearloop
  6806 00005813 6649                <1> 	dec cx
  6807 00005815 668B15[2D8C0000]    <1> 	mov dx, [resolutionx]
  6808 0000581C 6681F90000          <1> 	cmp cx, 0
  6809 00005821 77DE                <1> 	ja guiclearloop
  6810 00005823 C3                  <1> 	ret
  6811                              <1> 
  6812 00005824 CF7B                <1> background dw 0111101111001111b
  6813                              <1> 
  6814                              <1> gui:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  6815 00005826 31C0                <1> 	xor eax, eax
  6816 00005828 31DB                <1> 	xor ebx, ebx
  6817 0000582A 31C9                <1> 	xor ecx, ecx
  6818 0000582C 31D2                <1> 	xor edx, edx
  6819 0000582E E815000000          <1> 	call guisetup
  6820                              <1> guiloop:
  6821 00005833 E8F6F8FFFF          <1> 	call cursorgui
  6822                              <1> guistart:
  6823 00005838 E809FCFFFF          <1> 	call getkey
  6824 0000583D C605[5A590000]00    <1> 	mov byte [copygui], 0
  6825 00005844 EBF2                <1> 	jmp guistart
  6826 00005846 EBF0                <1> 	jmp guistart
  6827                              <1> guisetup:
  6828 00005848 8B3D[438C0000]      <1> 	mov edi, [physbaseptr]
  6829 0000584E 668B15[2D8C0000]    <1> 	mov dx, [resolutionx]
  6830 00005855 668B0D[2F8C0000]    <1> 	mov cx, [resolutiony]
  6831 0000585C 668B1D[24580000]    <1> 	mov bx, [background]
  6832                              <1> guiclearloop2:
  6833 00005863 66891F              <1> 	mov [edi], bx
  6834 00005866 81C702000000        <1> 	add edi, 2
  6835 0000586C 664A                <1> 	dec dx
  6836 0000586E 6681FA0000          <1> 	cmp dx, 0
  6837 00005873 0F85EAFFFFFF        <1> 	jne near guiclearloop2
  6838 00005879 6649                <1> 	dec cx
  6839 0000587B 668B15[2D8C0000]    <1> 	mov dx, [resolutionx]
  6840 00005882 6681F90000          <1> 	cmp cx, 0
  6841 00005887 0F85D6FFFFFF        <1> 	jne near guiclearloop2
  6842 0000588D C605[1D8D0000]01    <1> 	mov byte [guion], 1
  6843 00005894 C605[60590000]00    <1> 	mov byte [mouseselecton], 0
  6844 0000589B 31C0                <1> 	xor eax, eax
  6845 0000589D 31DB                <1> 	xor ebx, ebx
  6846 0000589F 31C9                <1> 	xor ecx, ecx
  6847 000058A1 31D2                <1> 	xor edx, edx
  6848                              <1> 	
  6849 000058A3 BE[386B0000]        <1> 	mov esi, pacmsg
  6850 000058A8 6631C0              <1> 	xor ax, ax
  6851 000058AB 31DB                <1> 	xor ebx, ebx
  6852 000058AD 66B99000            <1> 	mov cx, 144
  6853 000058B1 66BA0400            <1> 	mov dx, 4
  6854 000058B5 E8520A0000          <1> 	call showstring
  6855                              <1> 	
  6856 000058BA BE[736C0000]        <1> 	mov esi, interneticon
  6857 000058BF 6631C0              <1> 	xor ax, ax
  6858 000058C2 BB[A56B0000]        <1> 	mov ebx, noie
  6859 000058C7 66B91800            <1> 	mov cx, 24
  6860 000058CB 66BA0400            <1> 	mov dx, 4
  6861 000058CF E8E20E0000          <1> 	call showicon
  6862                              <1> 	
  6863 000058D4 BE[F56C0000]        <1> 	mov esi, wordicon
  6864 000058D9 6631C0              <1> 	xor ax, ax
  6865 000058DC 31DB                <1> 	xor ebx, ebx
  6866 000058DE 66B91800            <1> 	mov cx, 24
  6867 000058E2 66BA3000            <1> 	mov dx, 48
  6868 000058E6 E8CB0E0000          <1> 	call showicon
  6869                              <1> 	
  6870 000058EB BE[776D0000]        <1> 	mov esi, pacmanpellet
  6871 000058F0 6631C0              <1> 	xor ax, ax
  6872 000058F3 31DB                <1> 	xor ebx, ebx
  6873 000058F5 66B94000            <1> 	mov cx, 64
  6874 000058F9 66BA0400            <1> 	mov dx, 4
  6875 000058FD E8B40E0000          <1> 	call showicon
  6876                              <1> 	
  6877 00005902 BE[7B6E0000]        <1> 	mov esi, pacman
  6878 00005907 6631C0              <1> 	xor ax, ax
  6879 0000590A BB[8E6B0000]        <1> 	mov ebx, pacmannomnom
  6880 0000590F 66B94000            <1> 	mov cx, 64
  6881 00005913 66BA3000            <1> 	mov dx, 48
  6882 00005917 E89A0E0000          <1> 	call showicon
  6883                              <1> 	
  6884 0000591C BE[F96D0000]        <1> 	mov esi, ghostie
  6885 00005921 6631C0              <1> 	xor ax, ax
  6886 00005924 BB[776B0000]        <1> 	mov ebx, boo
  6887 00005929 66B96C00            <1> 	mov cx, 108
  6888 0000592D 66BA0400            <1> 	mov dx, 4
  6889 00005931 E8800E0000          <1> 	call showicon
  6890                              <1> 
  6891 00005936 BE[246B0000]        <1> 	mov esi, start
  6892 0000593B 668B0D[2F8C0000]    <1> 	mov cx, [resolutiony]
  6893 00005942 6681E91000          <1> 	sub cx, 16
  6894 00005947 66BA0200            <1> 	mov dx, 2
  6895 0000594B 30E4                <1> 	xor ah, ah
  6896 0000594D B010                <1> 	mov al, 00010000b
  6897 0000594F BB[206C0000]        <1> 	mov ebx, winblows
  6898 00005954 E8B3090000          <1> 	call showstring
  6899 00005959 C3                  <1> 	ret
  6900                              <1> 	
  6901                              <1> ;guicopy:	;;for double buffering
  6902                              <1> ;	mov byte [copygui], 1
  6903                              <1> ;	mov edi, [offscreenmemoffset]
  6904                              <1> ;	xor edx, edx
  6905                              <1> ;	xor ecx, ecx
  6906                              <1> ;	mov dx, [mousecursorposition]
  6907                              <1> ;	mov cx, [mousecursorposition + 2]
  6908                              <1> ;	add edi, edx
  6909                              <1> ;	mov dx, [resolutionx2]
  6910                              <1> ;	inc cx
  6911                              <1> ;guicp2:
  6912                              <1> ;	add edi, edx
  6913                              <1> ;	dec cx
  6914                              <1> ;	cmp cx, 0
  6915                              <1> ;	jne guicp2
  6916                              <1> ;	sub edi, edx
  6917                              <1> ;	mov [cursorloc], edi
  6918                              <1> ;	mov ebx, cursorbmp
  6919                              <1> ;	mov cx, [resolutiony]
  6920                              <1> ;	rol ecx, 16
  6921                              <1> ;	mov cx, [resolutionx]
  6922                              <1> ;	mov esi, [physbaseptr]
  6923                              <1> ;	mov edi, [offscreenmemoffset]
  6924                              <1> ;guicp1:
  6925                              <1> ;	mov ax, [esi]
  6926                              <1> ;	mov [edi], ax
  6927                              <1> ;	add esi, 2
  6928                              <1> ;	add edi, 2
  6929                              <1> ;	cmp edi, [cursorloc]
  6930                              <1> ;	je copycursor
  6931                              <1> ;dncopycursor:
  6932                              <1> ;	dec cx
  6933                              <1> ;	cmp cx, 0
  6934                              <1> ;	jne guicp1
  6935                              <1> ;	mov cx, [resolutionx]
  6936                              <1> ;	rol ecx, 16
  6937                              <1> ;	dec cx
  6938                              <1> ;	cmp cx, 0
  6939                              <1> ;	rol ecx, 16
  6940                              <1> ;	jne guicp1
  6941                              <1> ;	mov byte [copygui], 0
  6942                              <1> ;	ret
  6943                              <1> ;copycursor:
  6944                              <1> ;	cmp ebx, cursorbmpend
  6945                              <1> ;	jae dncopycursor
  6946                              <1> ;	mov dx, [resolutionx2]
  6947                              <1> ;	add edi, edx
  6948                              <1> ;	mov [cursorloc], edi
  6949                              <1> ;	sub edi, edx
  6950                              <1> ;	dec ebx
  6951                              <1> ;	sub edi, 2
  6952                              <1> ;	sub esi, 2
  6953                              <1> ;	mov dx, 9
  6954                              <1> ;curscplp:
  6955                              <1> ;	inc ebx
  6956                              <1> ;	add esi, 2
  6957                              <1> ;	add edi, 2
  6958                              <1> ;	mov ax, [esi]
  6959                              <1> ;	mov [edi], ax
  6960                              <1> ;	mov al, [ebx]
  6961                              <1> ;	cmp al, 0
  6962                              <1> ;	je curscplp2
  6963                              <1> ;	mov word [edi], 1110011110011100b
  6964                              <1> ;curscplp2:
  6965                              <1> ;	dec cx
  6966                              <1> ;	cmp cx, 0
  6967                              <1> ;	je dncopycursor
  6968                              <1> ;	dec dx
  6969                              <1> ;	cmp dx, 0
  6970                              <1> ;	jne curscplp
  6971                              <1> ;	jmp dncopycursor
  6972                              <1> 	
  6973                              <1> 	
  6974                              <1> ;cursorloc: dd 0
  6975                              <1> 				
  6976 0000595A 00                  <1> copygui db 0
  6977 0000595B 00                  <1> graphicsset db 0
  6978 0000595C 0000                <1> graphicspos db 0,0
  6979 0000595E 00                  <1> showcursorfonton db 0
  6980 0000595F 00                  <1> savefonton db 0
  6981 00005960 00                  <1> mouseselecton db 0
  6982                              <1> 
  6983                              <1> 		
  6984                              <1> clearmousecursor:
  6985 00005961 BE[24580000]        <1> 		mov esi, background
  6986 00005966 8B3D[438C0000]      <1> 		mov edi, [physbaseptr]
  6987 0000596C 31D2                <1> 		xor edx, edx
  6988 0000596E 31C9                <1> 		xor ecx, ecx
  6989 00005970 668B15[0C530000]    <1> 		mov dx, [lastmouseposition]
  6990 00005977 668B0D[0E530000]    <1> 		mov cx, [lastmouseposition + 2]
  6991 0000597E 01D7                <1> 		add edi, edx
  6992 00005980 31D2                <1> 		xor edx, edx
  6993 00005982 668B15[1B8D0000]    <1> 		mov dx, [resolutionx2]
  6994 00005989 6681F90000          <1> 		cmp cx, 0
  6995 0000598E 740B                <1> 		je noyclr
  6996 00005990 01D7                <1> yclr:	add edi, edx
  6997 00005992 6649                <1> 		dec cx
  6998 00005994 6681F90000          <1> 		cmp cx, 0
  6999 00005999 75F5                <1> 		jne yclr
  7000 0000599B 668B06              <1> noyclr:	mov ax, [esi]
  7001 0000599E C1C010              <1> 		rol eax, 16
  7002 000059A1 668B06              <1> 		mov ax, [esi]
  7003 000059A4 8907                <1> 		mov [edi], eax
  7004 000059A6 894704              <1> 		mov [edi + 4], eax
  7005 000059A9 894708              <1> 		mov [edi + 8], eax
  7006 000059AC 89470C              <1> 		mov [edi + 12], eax
  7007 000059AF 01D7                <1> 		add edi, edx
  7008 000059B1 6641                <1> 		inc cx
  7009 000059B3 6681F91000          <1> 		cmp cx, 16
  7010 000059B8 72E1                <1> 		jb noyclr
  7011 000059BA C3                  <1> 		ret
  7012                              <1> 
  7013                              <1> switchmousepos:		;;switch were the mouse is located
  7014 000059BB BE[93B00000]        <1> 		mov esi, mousecolorbuf
  7015 000059C0 8B3D[438C0000]      <1> 		mov edi, [physbaseptr]
  7016 000059C6 31D2                <1> 		xor edx, edx
  7017 000059C8 31C9                <1> 		xor ecx, ecx
  7018 000059CA 668B15[0C530000]    <1> 		mov dx, [lastmouseposition]
  7019 000059D1 668B0D[0E530000]    <1> 		mov cx, [lastmouseposition + 2]
  7020 000059D8 01D7                <1> 		add edi, edx
  7021 000059DA 31D2                <1> 		xor edx, edx
  7022 000059DC 668B15[1B8D0000]    <1> 		mov dx, [resolutionx2]
  7023 000059E3 6681F90000          <1> 		cmp cx, 0
  7024 000059E8 740B                <1> 		je noswmsy
  7025 000059EA 01D7                <1> swmsy:		add edi, edx
  7026 000059EC 6649                <1> 		dec cx
  7027 000059EE 6681F90000          <1> 		cmp cx, 0
  7028 000059F3 75F5                <1> 		jne swmsy
  7029 000059F5 8B06                <1> noswmsy:	mov eax, [esi]
  7030 000059F7 8B5E04              <1> 		mov ebx, [esi + 4]
  7031 000059FA 8907                <1> 		mov [edi], eax
  7032 000059FC 895F04              <1> 		mov [edi + 4], ebx
  7033 000059FF 8B4608              <1> 		mov eax, [esi + 8]
  7034 00005A02 8B5E0C              <1> 		mov ebx, [esi + 12]
  7035 00005A05 894708              <1> 		mov [edi + 8], eax
  7036 00005A08 895F0C              <1> 		mov [edi + 12], ebx
  7037 00005A0B 01D7                <1> 		add edi, edx
  7038 00005A0D 81C610000000        <1> 		add esi, 16
  7039 00005A13 81FE[93B10000]      <1> 		cmp esi, mcolorend
  7040 00005A19 72DA                <1> 		jb noswmsy
  7041                              <1> 		
  7042                              <1> switchmousepos2:
  7043 00005A1B BE[93B00000]        <1> 		mov esi, mousecolorbuf
  7044 00005A20 8B3D[438C0000]      <1> 		mov edi, [physbaseptr]
  7045 00005A26 31D2                <1> 		xor edx, edx
  7046 00005A28 31C9                <1> 		xor ecx, ecx
  7047 00005A2A 668B15[10530000]    <1> 		mov dx, [mousecursorposition]
  7048 00005A31 668B0D[12530000]    <1> 		mov cx, [mousecursorposition + 2]
  7049 00005A38 01D7                <1> 		add edi, edx
  7050 00005A3A 31D2                <1> 		xor edx, edx
  7051 00005A3C 668B15[1B8D0000]    <1> 		mov dx, [resolutionx2]
  7052 00005A43 6681F90000          <1> 		cmp cx, 0
  7053 00005A48 740B                <1> 		je noswmsy2
  7054 00005A4A 01D7                <1> swmsy2:		add edi, edx
  7055 00005A4C 6649                <1> 		dec cx
  7056 00005A4E 6681F90000          <1> 		cmp cx, 0
  7057 00005A53 75F5                <1> 		jne swmsy2
  7058 00005A55 8B07                <1> noswmsy2:	mov eax, [edi]
  7059 00005A57 8B5F04              <1> 		mov ebx, [edi + 4]
  7060 00005A5A 8906                <1> 		mov [esi], eax
  7061 00005A5C 895E04              <1> 		mov [esi + 4], ebx
  7062 00005A5F 8B4708              <1> 		mov eax, [edi + 8]
  7063 00005A62 8B5F0C              <1> 		mov ebx, [edi + 12]
  7064 00005A65 894608              <1> 		mov [esi + 8], eax
  7065 00005A68 895E0C              <1> 		mov [esi + 12], ebx
  7066 00005A6B 01D7                <1> 		add edi, edx
  7067 00005A6D 81C610000000        <1> 		add esi, 16
  7068 00005A73 81FE[93B10000]      <1> 		cmp esi, mcolorend
  7069 00005A79 72DA                <1> 		jb noswmsy2
  7070 00005A7B C3                  <1> 		ret
  7071                              <1> 
  7072 00005A7C 00                  <1> pbutton db 0
  7073 00005A7D 00                  <1> pLBUTTON db 0
  7074 00005A7E 00                  <1> pRBUTTON db 0
  7075 00005A7F 00000000            <1> dragging dw 0,0
  7076 00005A83 0000000000000000    <1> lastpos dw 0,0,0,0
  7077 00005A8B 00000000            <1> colorbuf dw 0,0
  7078                              <1> 	
  7079                              <1> 	clickicon:
  7080 00005A8F B001                <1> 		mov al, 1
  7081 00005A91 A2[7C5A0000]        <1> 		mov [pbutton], al
  7082 00005A96 A0[7D5A0000]        <1> 		mov al, [pLBUTTON]
  7083 00005A9B 2205[21540000]      <1> 		and al, [LBUTTON]
  7084 00005AA1 8A25[7E5A0000]      <1> 		mov ah, [pRBUTTON]
  7085 00005AA7 2225[22540000]      <1> 		and ah, [RBUTTON]
  7086 00005AAD 08E0                <1> 		or al, ah
  7087 00005AAF 3C00                <1> 		cmp al, 0
  7088 00005AB1 741B                <1> 		je nodragclick
  7089 00005AB3 813D[7F5A0000]0100- <1> 		cmp dword [dragging], 1
  7090 00005ABB 0000                <1>
  7091 00005ABD 732D                <1> 		jae dragclick
  7092 00005ABF C705[7F5A0000]0100- <1> 		mov dword [dragging], 1
  7093 00005AC7 0000                <1>
  7094 00005AC9 E91E000000          <1> 		jmp dragclick
  7095                              <1> 	nodragclick:
  7096 00005ACE C705[7F5A0000]0000- <1> 		mov dword [dragging], 0
  7097 00005AD6 0000                <1>
  7098 00005AD8 A0[21540000]        <1> 		mov al, [LBUTTON]
  7099 00005ADD A2[7D5A0000]        <1> 		mov [pLBUTTON], al
  7100 00005AE2 A0[22540000]        <1> 		mov al, [RBUTTON]
  7101 00005AE7 A2[7E5A0000]        <1> 		mov [pRBUTTON], al
  7102                              <1> 	dragclick:
  7103 00005AEC 6631C0              <1> 		xor ax, ax
  7104 00005AEF BE[93AE0000]        <1> 		mov esi, graphicstable
  7105 00005AF4 C705[726B0000]0000- <1> 		mov dword [codepointer], 0
  7106 00005AFC 0000                <1>
  7107                              <1> 	clicon2:
  7108 00005AFE 31D2                <1> 		xor edx, edx
  7109 00005B00 31C9                <1> 		xor ecx, ecx
  7110 00005B02 66813E0100          <1> 		cmp word [esi], 1
  7111 00005B07 0F841B000000        <1> 		je near iconselect
  7112 00005B0D 66813E0200          <1> 		cmp word [esi], 2
  7113 00005B12 0F8472010000        <1> 		je near textselected
  7114 00005B18 66813E0300          <1> 		cmp word [esi], 3
  7115 00005B1D 0F84C7020000        <1> 		je near windowselect
  7116 00005B23 E901040000          <1> 		jmp nexticonsel
  7117                              <1> 	iconselect:
  7118 00005B28 668B5606            <1> 		mov dx, [esi + 6]
  7119 00005B2C 6689D0              <1> 		mov ax, dx
  7120 00005B2F 668B4E08            <1> 		mov cx, [esi + 8]
  7121 00005B33 6689CB              <1> 		mov bx, cx
  7122 00005B36 6681C32000          <1> 		add bx, 32
  7123 00005B3B 6601D0              <1> 		add ax, dx
  7124 00005B3E 813D[7F5A0000]0100- <1> 		cmp dword [dragging], 1
  7125 00005B46 0000                <1>
  7126 00005B48 746F                <1> 		je dragicon
  7127 00005B4A 813D[7F5A0000]0000- <1> 		cmp dword [dragging], 0
  7128 00005B52 0000                <1>
  7129 00005B54 7411                <1> 		je nodragiconcheck
  7130 00005B56 3935[7F5A0000]      <1> 		cmp dword [dragging], esi
  7131 00005B5C 0F85C7030000        <1> 		jne near nexticonsel
  7132 00005B62 E952000000          <1> 		jmp dragicon
  7133                              <1> 	nodragiconcheck:
  7134 00005B67 663905[10530000]    <1> 		cmp [mousecursorposition], ax
  7135 00005B6E 0F82B5030000        <1> 		jb near nexticonsel
  7136 00005B74 66054000            <1> 		add ax, 64
  7137 00005B78 663905[10530000]    <1> 		cmp [mousecursorposition], ax
  7138 00005B7F 0F87A4030000        <1> 		ja near nexticonsel
  7139 00005B85 6629D0              <1> 		sub ax, dx
  7140 00005B88 66390D[12530000]    <1> 		cmp [mousecursorposition + 2], cx
  7141 00005B8F 0F8294030000        <1> 		jb near nexticonsel
  7142 00005B95 66391D[12530000]    <1> 		cmp [mousecursorposition + 2], bx
  7143 00005B9C 0F8787030000        <1> 		ja near nexticonsel
  7144 00005BA2 668B460A            <1> 		mov ax, [esi + 10]
  7145 00005BA6 66250100            <1> 		and ax, 1
  7146 00005BAA 663D0100            <1> 		cmp ax, 1
  7147 00005BAE 0F84B6000000        <1> 		je near unselecticon
  7148 00005BB4 E98D000000          <1> 		jmp nodragicon
  7149                              <1> 	dragicon:
  7150 00005BB9 663905[0C530000]    <1> 		cmp [lastmouseposition], ax
  7151 00005BC0 0F8263030000        <1> 		jb near nexticonsel
  7152 00005BC6 66054000            <1> 		add ax, 64
  7153 00005BCA 663905[0C530000]    <1> 		cmp [lastmouseposition], ax
  7154 00005BD1 0F8752030000        <1> 		ja near nexticonsel
  7155 00005BD7 6629D0              <1> 		sub ax, dx
  7156 00005BDA 66390D[0E530000]    <1> 		cmp [lastmouseposition + 2], cx
  7157 00005BE1 0F8242030000        <1> 		jb near nexticonsel
  7158 00005BE7 66391D[0E530000]    <1> 		cmp [lastmouseposition + 2], bx
  7159 00005BEE 0F8735030000        <1> 		ja near nexticonsel
  7160 00005BF4 668B460A            <1> 		mov ax, [esi + 10]
  7161 00005BF8 2410                <1> 		and al, 00010000b
  7162 00005BFA 3C10                <1> 		cmp al, 00010000b
  7163 00005BFC 7448                <1> 		je nodragicon
  7164 00005BFE 8935[7F5A0000]      <1> 		mov [dragging], esi
  7165 00005C04 66D1E2              <1> 		shl dx, 1
  7166 00005C07 662B15[0C530000]    <1> 		sub dx, [lastmouseposition]
  7167 00005C0E 660315[10530000]    <1> 		add dx, [mousecursorposition]
  7168 00005C15 66D1EA              <1> 		shr dx, 1
  7169 00005C18 66030D[12530000]    <1> 		add cx, [mousecursorposition + 2]
  7170 00005C1F 662B0D[0E530000]    <1> 		sub cx, [lastmouseposition + 2]
  7171 00005C26 663B15[1B8D0000]    <1> 		cmp dx, [resolutionx2]
  7172 00005C2D 7607                <1> 		jbe chkyresdrgicn
  7173 00005C2F 668B15[10530000]    <1> 		mov dx, [mousecursorposition]
  7174                              <1> 	chkyresdrgicn:
  7175 00005C36 663B0D[2F8C0000]    <1> 		cmp cx, [resolutiony]
  7176 00005C3D 7607                <1> 		jbe nodragicon
  7177 00005C3F 668B0D[12530000]    <1> 		mov cx, [mousecursorposition + 2]
  7178                              <1> 	nodragicon:
  7179 00005C46 66814E0A0100        <1> 		or word [esi + 10], 1
  7180 00005C4C 8B5E0C              <1> 		mov ebx, [esi + 12]
  7181 00005C4F 668B460A            <1> 		mov ax, [esi + 10]
  7182 00005C53 8B7602              <1> 		mov esi, [esi + 2]
  7183 00005C56 C705[726B0000]0000- <1> 		mov dword [codepointer], 0
  7184 00005C5E 0000                <1>
  7185 00005C60 E8510B0000          <1> 		call showicon
  7186 00005C65 E9D8020000          <1> 		jmp doneiconsel
  7187                              <1> 	unselecticon:
  7188 00005C6A 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  7189 00005C70 8B5E0C              <1> 		mov ebx, [esi + 12]
  7190 00005C73 668B460A            <1> 		mov ax, [esi + 10]
  7191 00005C77 8B7602              <1> 		mov esi, [esi + 2]
  7192 00005C7A 891D[726B0000]      <1> 		mov [codepointer], ebx
  7193 00005C80 E8310B0000          <1> 		call showicon
  7194 00005C85 E9B8020000          <1> 		jmp doneiconsel
  7195                              <1> 	textselected:
  7196 00005C8A 8B5E02              <1> 		mov ebx, [esi + 2]
  7197 00005C8D 668B5606            <1> 		mov dx, [esi + 6]
  7198 00005C91 6689D0              <1> 		mov ax, dx
  7199 00005C94 668B4E08            <1> 		mov cx, [esi + 8]
  7200                              <1> 	lengthtesttext:
  7201 00005C98 803B00              <1> 		cmp byte [ebx], 0
  7202 00005C9B 7407                <1> 		je donetesttextlength
  7203 00005C9D 43                  <1> 		inc ebx
  7204 00005C9E 66051000            <1> 		add ax, 16
  7205 00005CA2 EBF4                <1> 		jmp lengthtesttext
  7206                              <1> 	donetesttextlength:
  7207 00005CA4 6689CB              <1> 		mov bx, cx
  7208 00005CA7 6681C30F00          <1> 		add bx, 15
  7209 00005CAC 813D[7F5A0000]0100- <1> 		cmp dword [dragging], 1
  7210 00005CB4 0000                <1>
  7211 00005CB6 7468                <1> 		je dragtext
  7212 00005CB8 813D[7F5A0000]0000- <1> 		cmp dword [dragging], 0
  7213 00005CC0 0000                <1>
  7214 00005CC2 7411                <1> 		je nodragtextcheck
  7215 00005CC4 3935[7F5A0000]      <1> 		cmp dword [dragging], esi
  7216 00005CCA 0F8559020000        <1> 		jne near nexticonsel
  7217 00005CD0 E94B000000          <1> 		jmp dragtext
  7218                              <1> 	nodragtextcheck:
  7219 00005CD5 663915[10530000]    <1> 		cmp [mousecursorposition], dx
  7220 00005CDC 0F8247020000        <1> 		jb near nexticonsel
  7221 00005CE2 663905[10530000]    <1> 		cmp [mousecursorposition], ax
  7222 00005CE9 0F873A020000        <1> 		ja near nexticonsel
  7223 00005CEF 66390D[12530000]    <1> 		cmp [mousecursorposition + 2], cx
  7224 00005CF6 0F822D020000        <1> 		jb near nexticonsel
  7225 00005CFC 66391D[12530000]    <1> 		cmp [mousecursorposition + 2], bx
  7226 00005D03 0F8720020000        <1> 		ja near nexticonsel
  7227 00005D09 668B460A            <1> 		mov ax, [esi + 10]
  7228 00005D0D 66250100            <1> 		and ax, 1
  7229 00005D11 663D0100            <1> 		cmp ax, 1
  7230 00005D15 0F84AB000000        <1> 		je near unselecttext
  7231 00005D1B E986000000          <1> 		jmp nodragtext
  7232                              <1> 	dragtext:
  7233 00005D20 663915[0C530000]    <1> 		cmp [lastmouseposition], dx
  7234 00005D27 0F82FC010000        <1> 		jb near nexticonsel
  7235 00005D2D 663905[0C530000]    <1> 		cmp [lastmouseposition], ax
  7236 00005D34 0F87EF010000        <1> 		ja near nexticonsel
  7237 00005D3A 66390D[0E530000]    <1> 		cmp [lastmouseposition + 2], cx
  7238 00005D41 0F82E2010000        <1> 		jb near nexticonsel
  7239 00005D47 66391D[0E530000]    <1> 		cmp [lastmouseposition + 2], bx
  7240 00005D4E 0F87D5010000        <1> 		ja near nexticonsel
  7241 00005D54 668B460A            <1> 		mov ax, [esi + 10]
  7242 00005D58 2410                <1> 		and al, 00010000b
  7243 00005D5A 663D1000            <1> 		cmp ax, 00010000b
  7244 00005D5E 0F8442000000        <1> 		je near nodragtext
  7245 00005D64 8935[7F5A0000]      <1> 		mov [dragging], esi
  7246 00005D6A 662B15[0C530000]    <1> 		sub dx, [lastmouseposition]
  7247 00005D71 660315[10530000]    <1> 		add dx, [mousecursorposition]
  7248 00005D78 66030D[12530000]    <1> 		add cx, [mousecursorposition + 2]
  7249 00005D7F 662B0D[0E530000]    <1> 		sub cx, [lastmouseposition + 2]
  7250 00005D86 663B15[1B8D0000]    <1> 		cmp dx, [resolutionx2]
  7251 00005D8D 7607                <1> 		jbe chkyresdrgtxt
  7252 00005D8F 668B15[10530000]    <1> 		mov dx, [mousecursorposition]
  7253                              <1> 	chkyresdrgtxt:
  7254 00005D96 663B0D[2F8C0000]    <1> 		cmp cx, [resolutiony]
  7255 00005D9D 7607                <1> 		jbe nodragtext
  7256 00005D9F 668B0D[12530000]    <1> 		mov cx, [mousecursorposition + 2]
  7257                              <1> 	nodragtext:
  7258 00005DA6 66814E0A0100        <1> 		or word [esi + 10], 1
  7259 00005DAC 8B5E0C              <1> 		mov ebx, [esi + 12]
  7260 00005DAF 891D[726B0000]      <1> 		mov [codepointer], ebx
  7261 00005DB5 668B460A            <1> 		mov ax, [esi + 10]
  7262 00005DB9 8B7602              <1> 		mov esi, [esi + 2]
  7263 00005DBC E84B050000          <1> 		call showstring
  7264 00005DC1 E97C010000          <1> 		jmp doneiconsel
  7265                              <1> 	unselecttext:
  7266 00005DC6 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  7267 00005DCC 8B5E0C              <1> 		mov ebx, [esi + 12]
  7268 00005DCF 668B460A            <1> 		mov ax, [esi + 10]
  7269 00005DD3 8B7602              <1> 		mov esi, [esi + 2]
  7270 00005DD6 C705[726B0000]0000- <1> 		mov dword [codepointer], 0
  7271 00005DDE 0000                <1>
  7272 00005DE0 E827050000          <1> 		call showstring
  7273 00005DE5 E958010000          <1> 		jmp doneiconsel
  7274                              <1> windowselect:
  7275 00005DEA 8B7E02              <1> 		mov edi, [esi + 2]
  7276 00005DED 668B5606            <1> 		mov dx, [esi + 6]
  7277 00005DF1 6689D0              <1> 		mov ax, dx
  7278 00005DF4 668B4E08            <1> 		mov cx, [esi + 8]
  7279 00005DF8 6689CB              <1> 		mov bx, cx
  7280 00005DFB 6681C31000          <1> 		add bx, 16
  7281 00005E00 813D[7F5A0000]0100- <1> 		cmp dword [dragging], 1
  7282 00005E08 0000                <1>
  7283 00005E0A 746D                <1> 		je dragwin
  7284 00005E0C 813D[7F5A0000]0000- <1> 		cmp dword [dragging], 0
  7285 00005E14 0000                <1>
  7286 00005E16 7411                <1> 		je nodragwincheck
  7287 00005E18 3935[7F5A0000]      <1> 		cmp dword [dragging], esi
  7288 00005E1E 0F8505010000        <1> 		jne near nexticonsel
  7289 00005E24 E950000000          <1> 		jmp dragwin
  7290                              <1> 	nodragwincheck:
  7291 00005E29 663905[10530000]    <1> 		cmp [mousecursorposition], ax
  7292 00005E30 0F82F3000000        <1> 		jb near nexticonsel
  7293 00005E36 660307              <1> 		add ax, [edi]
  7294 00005E39 660307              <1> 		add ax, [edi]
  7295 00005E3C 663905[10530000]    <1> 		cmp [mousecursorposition], ax
  7296 00005E43 0F87E0000000        <1> 		ja near nexticonsel
  7297 00005E49 66390D[12530000]    <1> 		cmp [mousecursorposition + 2], cx
  7298 00005E50 0F82D3000000        <1> 		jb near nexticonsel
  7299 00005E56 66391D[12530000]    <1> 		cmp [mousecursorposition + 2], bx
  7300 00005E5D 0F87C6000000        <1> 		ja near nexticonsel
  7301 00005E63 662D1400            <1> 		sub ax, 20
  7302 00005E67 663905[10530000]    <1> 		cmp [mousecursorposition], ax
  7303 00005E6E 0F8795000000        <1> 		ja near killwin
  7304 00005E74 E97C000000          <1> 		jmp nodragwin
  7305                              <1> 	dragwin:
  7306 00005E79 663905[0C530000]    <1> 		cmp [lastmouseposition], ax
  7307 00005E80 0F82A3000000        <1> 		jb near nexticonsel
  7308 00005E86 660307              <1> 		add ax, [edi]
  7309 00005E89 660307              <1> 		add ax, [edi]
  7310 00005E8C 663905[0C530000]    <1> 		cmp [lastmouseposition], ax
  7311 00005E93 0F8790000000        <1> 		ja near nexticonsel
  7312 00005E99 66390D[0E530000]    <1> 		cmp [lastmouseposition + 2], cx
  7313 00005EA0 0F8283000000        <1> 		jb near nexticonsel
  7314 00005EA6 66391D[0E530000]    <1> 		cmp [lastmouseposition + 2], bx
  7315 00005EAD 0F8776000000        <1> 		ja near nexticonsel
  7316 00005EB3 8935[7F5A0000]      <1> 		mov [dragging], esi
  7317 00005EB9 662B15[0C530000]    <1> 		sub dx, [lastmouseposition]
  7318 00005EC0 660315[10530000]    <1> 		add dx, [mousecursorposition]
  7319 00005EC7 66030D[12530000]    <1> 		add cx, [mousecursorposition + 2]
  7320 00005ECE 662B0D[0E530000]    <1> 		sub cx, [lastmouseposition + 2]
  7321 00005ED5 663B15[1B8D0000]    <1> 		cmp dx, [resolutionx2]
  7322 00005EDC 7607                <1> 		jbe chkyresdrgwin
  7323 00005EDE 668B15[10530000]    <1> 		mov dx, [mousecursorposition]
  7324                              <1> 	chkyresdrgwin:
  7325 00005EE5 663B0D[2F8C0000]    <1> 		cmp cx, [resolutiony]
  7326 00005EEC 7607                <1> 		jbe nodragwin
  7327 00005EEE 668B0D[12530000]    <1> 		mov cx, [mousecursorposition + 2]
  7328                              <1> 	nodragwin:
  7329 00005EF5 8B5E0C              <1> 		mov ebx, [esi + 12]
  7330 00005EF8 668B460A            <1> 		mov ax, [esi + 10]
  7331 00005EFC 8B7602              <1> 		mov esi, [esi + 2]
  7332 00005EFF E870040000          <1> 		call showwindow
  7333 00005F04 E939000000          <1> 		jmp doneiconsel
  7334                              <1> 	killwin:
  7335 00005F09 66C7060000          <1> 		mov word [esi], 0
  7336 00005F0E C605[45280000]00    <1> 		mov byte [termguion], 0
  7337 00005F15 E8CDF8FFFF          <1> 		call guiclear
  7338 00005F1A E8A7000000          <1> 		call reloadallgraphics
  7339 00005F1F E914F9FFFF          <1> 		jmp guistart
  7340 00005F24 E93A000000          <1> 		jmp doneiconsel2
  7341                              <1> 	nexticonsel:
  7342 00005F29 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  7343 00005F2F 81C610000000        <1> 		add esi, 16
  7344 00005F35 81FE[93B00000]      <1> 		cmp esi, graphicstableend
  7345 00005F3B 7305                <1> 		jae doneiconsel
  7346 00005F3D E9BCFBFFFF          <1> 		jmp clicon2
  7347                              <1> 	doneiconsel:
  7348 00005F42 813D[7F5A0000]0100- <1> 		cmp dword [dragging], 1
  7349 00005F4A 0000                <1>
  7350 00005F4C 7315                <1> 		jae doneiconsel2
  7351 00005F4E 813D[726B0000]0000- <1> 		cmp dword [codepointer], 0
  7352 00005F56 0000                <1>
  7353 00005F58 7409                <1> 		je doneiconsel2
  7354 00005F5A 8B1D[726B0000]      <1> 		mov ebx, [codepointer]
  7355 00005F60 FFD3                <1> 		call ebx 
  7356 00005F62 C3                  <1> 		ret
  7357                              <1> 	doneiconsel2:
  7358 00005F63 A0[21540000]        <1> 		mov al, [LBUTTON]
  7359 00005F68 A2[7D5A0000]        <1> 		mov [pLBUTTON], al
  7360 00005F6D A0[22540000]        <1> 		mov al, [RBUTTON]
  7361 00005F72 A2[7E5A0000]        <1> 		mov [pRBUTTON], al
  7362 00005F77 66813D[7F5A0000]01- <1> 		cmp word [dragging], 1
  7363 00005F7F 00                  <1>
  7364 00005F80 0F860A000000        <1> 		jbe near noreloadgraphicsclick
  7365 00005F86 E8D6F9FFFF          <1> call clearmousecursor
  7366 00005F8B E836000000          <1> call reloadallgraphics
  7367                              <1> noreloadgraphicsclick:
  7368 00005F90 31C9                <1> 		xor ecx, ecx
  7369 00005F92 31D2                <1> 		xor edx, edx
  7370 00005F94 30E4                <1> 		xor ah, ah
  7371 00005F96 B0FE                <1> 		mov al, 254
  7372 00005F98 668B15[10530000]    <1> 		mov dx, [mousecursorposition]
  7373 00005F9F 668B0D[12530000]    <1> 		mov cx, [mousecursorposition + 2]
  7374 00005FA6 66BBE738            <1> 		mov bx, 0011100011100111b
  7375 00005FAA C605[5E590000]01    <1> 		mov byte [showcursorfonton], 1
  7376 00005FB1 E8DA080000          <1> 		call showfontvesa
  7377 00005FB6 C605[5E590000]00    <1> 		mov byte [showcursorfonton], 0
  7378 00005FBD C3                  <1> 		ret
  7379 00005FBE 00000000            <1> lastdrag dw 0,0
  7380 00005FC2 00000000            <1> grpctblpos dw 0,0
  7381                              <1> 
  7382                              <1> reloadallgraphics:
  7383 00005FC6 BF[93AE0000]        <1> 		mov edi, graphicstable
  7384                              <1> reloadgraphicsloop:
  7385 00005FCB 8B7702              <1> 		mov esi, [edi + 2]
  7386 00005FCE 668B5706            <1> 		mov dx, [edi + 6]
  7387 00005FD2 668B4F08            <1> 		mov cx, [edi + 8]
  7388 00005FD6 668B07              <1> 		mov ax, [edi]
  7389 00005FD9 668B5F0A            <1> 		mov bx, [edi + 10]
  7390 00005FDD 893D[C25F0000]      <1> 		mov [grpctblpos], edi
  7391 00005FE3 3B3D[7F5A0000]      <1> 		cmp edi, [dragging]
  7392 00005FE9 741E                <1> 		je loadedgraphic
  7393 00005FEB 663D0100            <1> 		cmp ax, 1
  7394 00005FEF 0F8436000000        <1> 		je near icongraphic
  7395 00005FF5 663D0200            <1> 		cmp ax, 2
  7396 00005FF9 0F843C000000        <1> 		je near stringgraphic
  7397 00005FFF 663D0300            <1> 		cmp ax, 3
  7398 00006003 0F8416000000        <1> 		je near windowgraphic
  7399 00006009 8B3D[C25F0000]      <1> loadedgraphic:  mov edi, [grpctblpos]
  7400 0000600F 81C710000000        <1> 		add edi, 16
  7401 00006015 81FF[93B00000]      <1> 		cmp edi, graphicstableend
  7402 0000601B 732E                <1> 		jae donereloadgraphics
  7403 0000601D EBAC                <1> 		jmp reloadgraphicsloop
  7404 0000601F E8F8030000          <1> windowgraphic:	call showwindow2
  7405 00006024 E803C4FFFF          <1> 		call cleardouble
  7406 00006029 EBDE                <1> 		jmp loadedgraphic
  7407 0000602B 80E301              <1> icongraphic:	and bl, 1
  7408 0000602E 881D[766B0000]      <1> 		mov [iconselected], bl
  7409 00006034 E890070000          <1> 		call showicon2
  7410 00006039 EBCE                <1> 		jmp loadedgraphic
  7411 0000603B 80E301              <1> stringgraphic:  and bl, 1
  7412 0000603E 881D[60590000]      <1> 		mov [mouseselecton], bl
  7413 00006044 E8D6020000          <1> 		call showstring2
  7414 00006049 EBBE                <1> 		jmp loadedgraphic
  7415                              <1> donereloadgraphics:
  7416 0000604B 8B3D[7F5A0000]      <1> 		mov edi, [dragging]
  7417 00006051 81FF[93AE0000]      <1> 		cmp edi, graphicstable
  7418 00006057 7226                <1> 		jb notcorrectdrag
  7419 00006059 668B07              <1> 		mov ax, [edi]
  7420 0000605C 8B7702              <1> 		mov esi, [edi + 2]
  7421 0000605F 668B5706            <1> 		mov dx, [edi + 6]
  7422 00006063 668B4F08            <1> 		mov cx, [edi + 8]
  7423 00006067 668B5F0A            <1> 		mov bx, [edi + 10]
  7424 0000606B 663D0100            <1> 		cmp ax, 1
  7425 0000606F 750F                <1> 		jne noticondragging
  7426 00006071 80E301              <1> 		and bl, 1
  7427 00006074 881D[766B0000]      <1> 		mov [iconselected], bl
  7428 0000607A E84A070000          <1> 		call showicon2
  7429                              <1> notcorrectdrag:
  7430 0000607F C3                  <1> 		ret
  7431                              <1> 
  7432                              <1> 	noticondragging:
  7433 00006080 663D0200            <1> 		cmp ax, 2
  7434 00006084 75F9                <1> 		jne notcorrectdrag
  7435 00006086 80E301              <1> 		and bl, 1
  7436 00006089 881D[60590000]      <1> 		mov [mouseselecton], bl
  7437 0000608F E88B020000          <1> 		call showstring2
  7438 00006094 EBE9                <1> 		jmp notcorrectdrag
  7439                              <1> 
  7440 00006096 00<rept>            <1> grphbuf times 16 db 0
  7441                              <1> 	graphicsadd:
  7442 000060A6 BF[93AE0000]        <1> 		mov edi, graphicstable
  7443                              <1> 	shwgrph1:
  7444 000060AB 397702              <1> 		cmp dword [edi + 2], esi
  7445 000060AE 7414                <1> 		je showgraphicsreplace2
  7446 000060B0 81C710000000        <1> 		add edi, 16
  7447 000060B6 81FF[93B00000]      <1> 		cmp edi, graphicstableend
  7448 000060BC 0F832F020000        <1> 		jae near showgraphicsnew
  7449 000060C2 EBE7                <1> 		jmp shwgrph1
  7450                              <1> 	showgraphicsreplace2:
  7451 000060C4 8935[98600000]      <1> 		mov [grphbuf + 2], esi
  7452 000060CA 668915[9C600000]    <1> 		mov [grphbuf + 6], dx
  7453 000060D1 66890D[9E600000]    <1> 		mov [grphbuf + 8], cx
  7454 000060D8 891D[A2600000]      <1> 		mov [grphbuf + 12], ebx
  7455 000060DE 30FF                <1> 		xor bh, bh
  7456 000060E0 88E3                <1> 		mov bl, ah
  7457 000060E2 30E4                <1> 		xor ah, ah
  7458 000060E4 66A3[A0600000]      <1> 		mov [grphbuf + 10], ax	
  7459 000060EA 66891D[96600000]    <1> 		mov [grphbuf], bx
  7460 000060F1 66A1[96600000]      <1> 		mov ax, [grphbuf]
  7461 000060F7 663D0100            <1> 		cmp ax, 1
  7462 000060FB 0F8419000000        <1> 		je near replaceicon
  7463 00006101 663D0200            <1> 		cmp ax, 2
  7464 00006105 0F8493000000        <1> 		je near replacestring
  7465 0000610B 663D0300            <1> 		cmp ax, 3
  7466 0000610F 0F840F010000        <1> 		je near replacewindow
  7467 00006115 E9B4010000          <1> 		jmp showgraphicsreplace
  7468                              <1> 	replaceicon:
  7469 0000611A 893D[835A0000]      <1> 		mov [lastpos], edi
  7470 00006120 8935[875A0000]      <1> 		mov [lastpos + 4], esi
  7471 00006126 8B7702              <1> 		mov esi, [edi + 2]
  7472 00006129 668B5F0C            <1> 		mov bx, [edi + 12]
  7473 0000612D 668B5706            <1> 		mov dx, [edi + 6]
  7474 00006131 668B4F08            <1> 		mov cx, [edi + 8]
  7475 00006135 668B06              <1> 		mov ax, [esi]
  7476 00006138 66A3[8B5A0000]      <1> 		mov [colorbuf], ax
  7477 0000613E 66A1[24580000]      <1> 		mov ax, [background]
  7478 00006144 668906              <1> 		mov [esi], ax
  7479 00006147 8B5F0C              <1> 		mov ebx, [edi + 12]
  7480 0000614A 668B470A            <1> 		mov ax, [edi + 10]
  7481 0000614E 2401                <1> 		and al, 1
  7482 00006150 A2[766B0000]        <1> 		mov [iconselected], al
  7483 00006155 668B470A            <1> 		mov ax, [edi + 10]
  7484 00006159 E86B060000          <1> 		call showicon2
  7485 0000615E 8B3D[835A0000]      <1> 		mov edi, [lastpos]
  7486 00006164 8B7702              <1> 		mov esi, [edi + 2]
  7487 00006167 66A1[8B5A0000]      <1> 		mov ax, [colorbuf]
  7488 0000616D 668906              <1> 		mov [esi], ax
  7489 00006170 8B35[875A0000]      <1> 		mov esi, [lastpos + 4]
  7490 00006176 668B15[9C600000]    <1> 		mov dx, [grphbuf + 6]
  7491 0000617D 668B0D[9E600000]    <1> 		mov cx, [grphbuf + 8]
  7492 00006184 668B1D[96600000]    <1> 		mov bx, [grphbuf]
  7493 0000618B 66A1[A0600000]      <1> 		mov ax, [grphbuf + 10]
  7494 00006191 88DC                <1> 		mov ah, bl
  7495 00006193 8B1D[A2600000]      <1> 		mov ebx, [grphbuf + 12]
  7496 00006199 E930010000          <1> 		jmp showgraphicsreplace
  7497                              <1> 	replacestring:
  7498 0000619E 893D[835A0000]      <1> 		mov [lastpos], edi
  7499 000061A4 8935[875A0000]      <1> 		mov [lastpos + 4], esi
  7500 000061AA 8B5F0C              <1> 		mov ebx, [edi + 12]
  7501 000061AD 8B7702              <1> 		mov esi, [edi + 2]
  7502 000061B0 668B5706            <1> 		mov dx, [edi + 6]
  7503 000061B4 668B4F08            <1> 		mov cx, [edi + 8]
  7504 000061B8 66A1[57630000]      <1> 		mov ax, [colorfont2]
  7505 000061BE 66A3[8B5A0000]      <1> 		mov [colorbuf], ax
  7506 000061C4 66A1[24580000]      <1> 		mov ax, [background]
  7507 000061CA 66A3[57630000]      <1> 		mov [colorfont2], ax		
  7508 000061D0 8B5F0C              <1> 		mov ebx, [edi + 12]
  7509 000061D3 668B470A            <1> 		mov ax, [edi + 10]
  7510 000061D7 2401                <1> 		and al, 1
  7511 000061D9 A2[60590000]        <1> 		mov [mouseselecton], al
  7512 000061DE 668B470A            <1> 		mov ax, [edi + 10]
  7513 000061E2 E838010000          <1> 		call showstring2
  7514 000061E7 66A1[8B5A0000]      <1> 		mov ax, [colorbuf]
  7515 000061ED 66A3[57630000]      <1> 		mov [colorfont2], ax
  7516 000061F3 8B3D[835A0000]      <1> 		mov edi, [lastpos]
  7517 000061F9 8B7702              <1> 		mov esi, [edi + 2]
  7518 000061FC 668B15[9C600000]    <1> 		mov dx, [grphbuf + 6]
  7519 00006203 668B0D[9E600000]    <1> 		mov cx, [grphbuf + 8]
  7520 0000620A 668B1D[96600000]    <1> 		mov bx, [grphbuf]
  7521 00006211 66A1[A0600000]      <1> 		mov ax, [grphbuf + 10]
  7522 00006217 88DC                <1> 		mov ah, bl
  7523 00006219 8B1D[A2600000]      <1> 		mov ebx, [grphbuf + 12]
  7524 0000621F E9AA000000          <1> 		jmp showgraphicsreplace
  7525                              <1> 	replacewindow:
  7526 00006224 893D[835A0000]      <1> 		mov [lastpos], edi
  7527 0000622A 8935[875A0000]      <1> 		mov [lastpos + 4], esi
  7528 00006230 8B7702              <1> 		mov esi, [edi + 2]
  7529 00006233 8B3D[66630000]      <1> 		mov edi, [windowbufloc]
  7530 00006239 31D2                <1> 		xor edx, edx
  7531 0000623B 668B15[1B8D0000]    <1> 		mov dx, [resolutionx2]
  7532 00006242 C1E204              <1> 		shl edx, 4
  7533 00006245 29D7                <1> 		sub edi, edx
  7534 00006247 31D2                <1> 		xor edx, edx
  7535 00006249 668B16              <1> 		mov dx, [esi]
  7536 0000624C 660316              <1> 		add dx, [esi]
  7537 0000624F 668B4E02            <1> 		mov cx, [esi + 2]
  7538 00006253 6681C11000          <1> 		add cx, 16
  7539 00006258 66A1[24580000]      <1> 		mov ax, [background]
  7540                              <1> 	clearwindow:
  7541 0000625E 668907              <1> 		mov [edi], ax
  7542 00006261 81C702000000        <1> 		add edi, 2
  7543 00006267 81EA02000000        <1> 		sub edx, 2
  7544 0000626D 81FA00000000        <1> 		cmp edx, 0
  7545 00006273 75E9                <1> 		jne clearwindow
  7546 00006275 6649                <1> 		dec cx
  7547 00006277 668B15[1B8D0000]    <1> 		mov dx, [resolutionx2]
  7548 0000627E 662B16              <1> 		sub dx, [esi]
  7549 00006281 662B16              <1> 		sub dx, [esi]
  7550 00006284 01D7                <1> 		add edi, edx
  7551 00006286 668B16              <1> 		mov dx, [esi]
  7552 00006289 660316              <1> 		add dx, [esi]
  7553 0000628C 6681F90000          <1> 		cmp cx, 0
  7554 00006291 75CB                <1> 		jne clearwindow
  7555 00006293 C605[46280000]00    <1> 		mov byte [termcopyon], 0
  7556 0000629A 8B3D[835A0000]      <1> 		mov edi, [lastpos]
  7557 000062A0 8B35[98600000]      <1> 		mov esi, [grphbuf + 2]
  7558 000062A6 668B15[9C600000]    <1> 		mov dx, [grphbuf + 6]
  7559 000062AD 668B0D[9E600000]    <1> 		mov cx, [grphbuf + 8]
  7560 000062B4 668B1D[96600000]    <1> 		mov bx, [grphbuf]
  7561 000062BB 66A1[A0600000]      <1> 		mov ax, [grphbuf + 10]
  7562 000062C1 88DC                <1> 		mov ah, bl
  7563 000062C3 8B1D[A2600000]      <1> 		mov ebx, [grphbuf + 12]
  7564 000062C9 E900000000          <1> 		jmp showgraphicsreplace
  7565                              <1> 	showgraphicsreplace:
  7566 000062CE 897702              <1> 		mov [edi + 2], esi
  7567 000062D1 66895706            <1> 		mov [edi + 6], dx
  7568 000062D5 66894F08            <1> 		mov [edi + 8], cx
  7569 000062D9 895F0C              <1> 		mov [edi + 12], ebx
  7570 000062DC 30FF                <1> 		xor bh, bh
  7571 000062DE 88E3                <1> 		mov bl, ah
  7572 000062E0 30E4                <1> 		xor ah, ah
  7573 000062E2 6689470A            <1> 		mov [edi + 10], ax
  7574 000062E6 66891F              <1> 		mov [edi], bx
  7575 000062E9 8B5F0C              <1> 		mov ebx, [edi + 12]
  7576 000062EC 668B470A            <1> 		mov ax, [edi + 10]
  7577 000062F0 C3                  <1> 		ret
  7578                              <1> 	showgraphicsnew:
  7579 000062F1 BF[93AE0000]        <1> 		mov edi, graphicstable
  7580                              <1> 	shwgrph2:
  7581 000062F6 66813F0000          <1> 		cmp word [edi], 0
  7582 000062FB 74D1                <1> 		je showgraphicsreplace
  7583 000062FD 81C710000000        <1> 		add edi, 16
  7584 00006303 81FF[93B00000]      <1> 		cmp edi, graphicstableend
  7585 00006309 72EB                <1> 		jb shwgrph2
  7586                              <1> 	showgraphicsdone:
  7587 0000630B C3                  <1> 		ret
  7588                              <1> 
  7589                              <1> 	showstring:
  7590 0000630C A2[60590000]        <1> 		mov [mouseselecton], al
  7591 00006311 8025[60590000]01    <1> 		and byte [mouseselecton], 1
  7592 00006318 B402                <1> 		mov ah, 2
  7593 0000631A E887FDFFFF          <1> 		call graphicsadd
  7594                              <1> 	showstring2:
  7595 0000631F 30E4                <1> 		xor ah, ah
  7596 00006321 8A06                <1> 		mov al, [esi]
  7597 00006323 3C00                <1> 		cmp al, 0
  7598 00006325 7428                <1> 		je doneshowstring
  7599 00006327 46                  <1> 		inc esi
  7600 00006328 3CFF                <1> 		cmp al, 255
  7601 0000632A 74F3                <1> 		je showstring2
  7602 0000632C 8935[1F6B0000]      <1> 		mov [showstringesi], esi
  7603 00006332 668B1D[57630000]    <1> 		mov bx, [colorfont2]
  7604 00006339 E852050000          <1> 		call showfontvesa
  7605 0000633E 3C0A                <1> 		cmp al, 10
  7606 00006340 7405                <1> 		je noproceedshst
  7607 00006342 6681C20800          <1> 		add dx, 8
  7608                              <1> 	noproceedshst:
  7609 00006347 8B35[1F6B0000]      <1> 		mov esi, [showstringesi]
  7610 0000634D EBD0                <1> 		jmp showstring2
  7611                              <1> 	doneshowstring:
  7612 0000634F C605[60590000]00    <1> 		mov byte [mouseselecton], 0
  7613 00006356 C3                  <1> 		ret
  7614                              <1> 
  7615 00006357 FFFF                <1> colorfont2 dw 0xFFFF
  7616 00006359 00                  <1> colorcache db 0
  7617 0000635A 0000                <1> winvcopystx dw 0
  7618 0000635C 0000                <1> winvcopysty dw 0
  7619 0000635E 0000                <1> winvcopydx dw 0
  7620 00006360 0000                <1> winvcopycx dw 0
  7621 00006362 FFFF0000            <1> windowcolor dw 0xFFFF,0x0
  7622 00006366 00000000            <1> windowbufloc: dw 0,0
  7623 0000636A 00000000            <1> windowinfobuf dd 0
  7624 0000636E 0000                <1> termcol dw 0
  7625 00006370 00000000            <1> wincopyendpos dd 0
  7626                              <1> 
  7627                              <1> 	showwindow:	;;windowstuff in si, position in (dx, cx), nothing in ax, code in bx
  7628 00006374 C605[45280000]01    <1> 		mov byte [termguion], 1
  7629 0000637B 6681C11000          <1> 		add cx, 16
  7630 00006380 668915[5A630000]    <1> 		mov [winvcopystx], dx
  7631 00006387 66890D[5C630000]    <1> 		mov [winvcopysty], cx
  7632 0000638E 8935[6A630000]      <1> 		mov [windowinfobuf], esi
  7633 00006394 668B16              <1> 		mov dx, [esi]
  7634 00006397 668B4E02            <1> 		mov cx, [esi + 2]
  7635 0000639B 31C0                <1> 		xor eax, eax
  7636 0000639D 31DB                <1> 		xor ebx, ebx
  7637 0000639F 6689D0              <1> 		mov ax, dx
  7638 000063A2 6689CB              <1> 		mov bx, cx
  7639 000063A5 66C1E803            <1> 		shr ax, 3
  7640 000063A9 66C1EB04            <1> 		shr bx, 4
  7641 000063AD 66A3[6E630000]      <1> 		mov [termcol], ax
  7642 000063B3 A2[092A0000]        <1> 		mov [charxy], al
  7643 000063B8 881D[0A2A0000]      <1> 		mov [charxy + 1], bl
  7644 000063BE BF[26CE0000]        <1> 		mov edi, videobuf
  7645 000063C3 81FB00000000        <1> 		cmp ebx, 0
  7646 000063C9 0F84CD030000        <1> 		je near donewincopynow	;AAAAAAAAA!!!!!
  7647                              <1> 	findendposwin:
  7648 000063CF 01C7                <1> 		add edi, eax
  7649 000063D1 01C7                <1> 		add edi, eax
  7650 000063D3 4B                  <1> 		dec ebx
  7651 000063D4 81FB00000000        <1> 		cmp ebx, 0
  7652 000063DA 77F3                <1> 		ja findendposwin
  7653 000063DC 893D[70630000]      <1> 		mov [wincopyendpos], edi
  7654 000063E2 31FF                <1> 		xor edi, edi
  7655 000063E4 6631C0              <1> 		xor ax, ax
  7656 000063E7 6631DB              <1> 		xor bx, bx
  7657 000063EA 6601D2              <1> 		add dx, dx
  7658 000063ED 668915[5E630000]    <1> 		mov [winvcopydx], dx
  7659 000063F4 66890D[60630000]    <1> 		mov [winvcopycx], cx
  7660 000063FB 668B0D[5C630000]    <1> 		mov cx, [winvcopysty]
  7661 00006402 6681E91000          <1> 		sub cx, 16
  7662 00006407 668B15[5A630000]    <1> 		mov dx, [winvcopystx]
  7663 0000640E C605[46280000]00    <1> 		mov byte [termcopyon], 0
  7664 00006415 B403                <1> 		mov ah, 3
  7665 00006417 E88AFCFFFF          <1> 		call graphicsadd
  7666                              <1> 	showwindow2:
  7667 0000641C 6681C11000          <1> 		add cx, 16
  7668 00006421 668915[5A630000]    <1> 		mov [winvcopystx], dx
  7669 00006428 66890D[5C630000]    <1> 		mov [winvcopysty], cx
  7670 0000642F 668B16              <1> 		mov dx, [esi]
  7671 00006432 668B4E02            <1> 		mov cx, [esi + 2]
  7672 00006436 6601D2              <1> 		add dx, dx
  7673 00006439 668915[5E630000]    <1> 		mov [winvcopydx], dx
  7674 00006440 66890D[60630000]    <1> 		mov [winvcopycx], cx
  7675 00006447 8B3D[66630000]      <1> 		mov edi, [windowbufloc]
  7676 0000644D 31D2                <1> 		xor edx, edx
  7677 0000644F 668B15[1B8D0000]    <1> 		mov dx, [resolutionx2]
  7678 00006456 C1E204              <1> 		shl edx, 4
  7679 00006459 29D7                <1> 		sub edi, edx
  7680 0000645B 803D[46280000]00    <1> 		cmp byte [termcopyon], 0
  7681 00006462 7538                <1> 		jne nocleartitlebarpos
  7682 00006464 8B3D[438C0000]      <1> 		mov edi, [physbaseptr]
  7683 0000646A 31D2                <1> 		xor edx, edx
  7684 0000646C 668B15[5A630000]    <1> 		mov dx, [winvcopystx]
  7685 00006473 01D7                <1> 		add edi, edx
  7686 00006475 668B0D[5C630000]    <1> 		mov cx, [winvcopysty]
  7687 0000647C 6681E91000          <1> 		sub cx, 16
  7688 00006481 6681F90000          <1> 		cmp cx, 0
  7689 00006486 7414                <1> 		je nocleartitlebarpos
  7690                              <1> 	cleartitlebarpos:
  7691 00006488 31D2                <1> 		xor edx, edx
  7692 0000648A 668B15[1B8D0000]    <1> 		mov dx, [resolutionx2]
  7693 00006491 01D7                <1> 		add edi, edx
  7694 00006493 6649                <1> 		dec cx
  7695 00006495 6681F90000          <1> 		cmp cx, 0
  7696 0000649A 75EC                <1> 		jne cleartitlebarpos
  7697                              <1> 	nocleartitlebarpos:
  7698 0000649C 66B91000            <1> 		mov cx, 16
  7699 000064A0 668B15[5E630000]    <1> 		mov dx, [winvcopydx]
  7700 000064A7 6681F90000          <1> 		cmp cx, 0
  7701 000064AC 0F8448000000        <1> 		je near canceltitlebarput
  7702 000064B2 6681FA0000          <1> 		cmp dx, 0
  7703 000064B7 0F843D000000        <1> 		je near canceltitlebarput
  7704                              <1> 	titlebarput:
  7705 000064BD 66A1[62630000]      <1> 		mov ax, [windowcolor]
  7706 000064C3 668907              <1> 		mov [edi], ax
  7707 000064C6 6681EA0200          <1> 		sub dx, 2
  7708 000064CB 81C702000000        <1> 		add edi, 2
  7709 000064D1 6681FA0000          <1> 		cmp dx, 0
  7710 000064D6 75E5                <1> 		jne titlebarput
  7711 000064D8 31D2                <1> 		xor edx, edx
  7712 000064DA 668B15[1B8D0000]    <1> 		mov dx, [resolutionx2]
  7713 000064E1 6649                <1> 		dec cx
  7714 000064E3 662B15[5E630000]    <1> 		sub dx, [winvcopydx]
  7715 000064EA 01D7                <1> 		add edi, edx
  7716 000064EC 668B15[5E630000]    <1> 		mov dx, [winvcopydx]
  7717 000064F3 6681F90000          <1> 		cmp cx, 0
  7718 000064F8 75C3                <1> 		jne titlebarput
  7719                              <1> 	canceltitlebarput:
  7720 000064FA 893D[66630000]      <1> 		mov [windowbufloc], edi
  7721 00006500 803D[46280000]02    <1> 		cmp byte [termcopyon], 2
  7722 00006507 0F8461000000        <1> 		je near winvcpst
  7723 0000650D 6631C0              <1> 		xor ax, ax
  7724 00006510 81C604000000        <1> 		add esi, 4
  7725 00006516 668B15[5A630000]    <1> 		mov dx, [winvcopystx]
  7726 0000651D 668B0D[5C630000]    <1> 		mov cx, [winvcopysty]
  7727 00006524 6681E91000          <1> 		sub cx, 16
  7728 00006529 6631DB              <1> 		xor bx, bx
  7729 0000652C C605[60590000]01    <1> 		mov byte [mouseselecton], 1
  7730 00006533 E8E7FDFFFF          <1> 		call showstring2
  7731 00006538 B058                <1> 		mov al, "X"
  7732 0000653A 30E4                <1> 		xor ah, ah
  7733 0000653C 668B1D[57630000]    <1> 		mov bx, [colorfont2]
  7734 00006543 668B15[5A630000]    <1> 		mov dx, [winvcopystx]
  7735 0000654A 668B0D[5C630000]    <1> 		mov cx, [winvcopysty]
  7736 00006551 6681E91000          <1> 		sub cx, 16
  7737 00006556 6681EA1400          <1> 		sub dx, 20
  7738 0000655B 660315[5E630000]    <1> 		add dx, [winvcopydx]
  7739 00006562 C605[60590000]01    <1> 		mov byte [mouseselecton], 1
  7740 00006569 E822030000          <1> 		call showfontvesa
  7741                              <1> 	winvcpst:
  7742 0000656E 8B3D[66630000]      <1> 		mov edi, [windowbufloc]
  7743 00006574 E97E000000          <1> 		jmp windowvideocopyset
  7744                              <1> 
  7745                              <1> 	windowvideocopy:
  7746 00006579 8B35[6A630000]      <1> 		mov esi, [windowinfobuf]
  7747 0000657F 668B16              <1> 		mov dx, [esi]
  7748 00006582 668B4E02            <1> 		mov cx, [esi + 2]
  7749 00006586 31C0                <1> 		xor eax, eax
  7750 00006588 31DB                <1> 		xor ebx, ebx
  7751 0000658A 6689D0              <1> 		mov ax, dx
  7752 0000658D 6689CB              <1> 		mov bx, cx
  7753 00006590 66C1E803            <1> 		shr ax, 3
  7754 00006594 66C1EB04            <1> 		shr bx, 4
  7755 00006598 66A3[6E630000]      <1> 		mov [termcol], ax
  7756 0000659E A2[092A0000]        <1> 		mov [charxy], al
  7757 000065A3 881D[0A2A0000]      <1> 		mov [charxy + 1], bl
  7758 000065A9 8B3D[66630000]      <1> 		mov edi, [windowbufloc]
  7759 000065AF 3B3D[438C0000]      <1> 		cmp edi, [physbaseptr]
  7760 000065B5 0F833C000000        <1> 		jae near windowvideocopyset
  7761 000065BB 31C9                <1> 		xor ecx, ecx
  7762 000065BD 31D2                <1> 		xor edx, edx
  7763 000065BF 668B15[5A630000]    <1> 		mov dx, [winvcopystx]
  7764 000065C6 668B0D[5C630000]    <1> 		mov cx, [winvcopysty]
  7765 000065CD 8B3D[438C0000]      <1> 		mov edi, [physbaseptr]
  7766 000065D3 01D7                <1> 		add edi, edx
  7767 000065D5 81F900000000        <1> 		cmp ecx, 0
  7768 000065DB 741A                <1> 		je windowvideocopyset
  7769                              <1> 	yrescopylp:
  7770 000065DD 31D2                <1> 		xor edx, edx
  7771 000065DF 668B15[1B8D0000]    <1> 		mov dx, [resolutionx2]
  7772 000065E6 01D7                <1> 		add edi, edx
  7773 000065E8 6649                <1> 		dec cx
  7774 000065EA 6681F90000          <1> 		cmp cx, 0
  7775 000065EF 75EC                <1> 		jne yrescopylp
  7776 000065F1 893D[66630000]      <1> 		mov [windowbufloc], edi
  7777                              <1> 	windowvideocopyset:
  7778 000065F7 6631C9              <1> 		xor cx, cx
  7779 000065FA 6649                <1> 		dec cx
  7780 000065FC 66890D[AE670000]    <1> 		mov [charposline], cx
  7781 00006603 89FE                <1> 		mov esi, edi
  7782 00006605 81EE10000000        <1> 		sub esi, 16
  7783 0000660B 31D2                <1> 		xor edx, edx
  7784 0000660D 668B15[1B8D0000]    <1> 		mov dx, [resolutionx2]
  7785 00006614 C1E204              <1> 		shl edx, 4
  7786 00006617 01D6                <1> 		add esi, edx
  7787 00006619 BF[26CE0000]        <1> 		mov edi, videobuf
  7788 0000661E 81EF02000000        <1> 		sub edi, 2
  7789 00006624 893D[B0670000]      <1> 		mov [charposvbuf], edi
  7790 0000662A E96E000000          <1> 		jmp nextcharwin
  7791                              <1> 	copywindow:
  7792 0000662F B201                <1> 		mov dl, 1
  7793 00006631 D0C6                <1> 		rol dh, 1
  7794 00006633 20F2                <1> 		and dl, dh
  7795 00006635 803D[59630000]10    <1> 		cmp byte [colorcache], 0x10
  7796 0000663C 731C                <1> 		jae switchwincolors
  7797 0000663E 66A1[64630000]      <1> 		mov ax, [windowcolor + 2]
  7798 00006644 668907              <1> 		mov [edi], ax
  7799 00006647 80FA00              <1> 		cmp dl, 0
  7800 0000664A 7425                <1> 		je nowritewin
  7801 0000664C 66A1[62630000]      <1> 		mov ax, [windowcolor]
  7802 00006652 668907              <1> 		mov [edi], ax
  7803 00006655 E917000000          <1> 		jmp nowritewin
  7804                              <1> 	switchwincolors:
  7805 0000665A 66A1[62630000]      <1> 		mov ax, [windowcolor]
  7806 00006660 668907              <1> 		mov [edi], ax
  7807 00006663 80FA00              <1> 		cmp dl, 0
  7808 00006666 7409                <1> 		je nowritewin
  7809 00006668 66A1[64630000]      <1> 		mov ax, [windowcolor + 2]
  7810 0000666E 668907              <1> 		mov [edi], ax
  7811                              <1> 	nowritewin:
  7812 00006671 81C702000000        <1> 		add edi, 2
  7813 00006677 FEC1                <1> 		inc cl
  7814 00006679 80F908              <1> 		cmp cl, 8
  7815 0000667C 75B1                <1> 		jne copywindow
  7816 0000667E 6643                <1> 		inc bx
  7817 00006680 30C9                <1> 		xor cl, cl
  7818 00006682 31D2                <1> 		xor edx, edx
  7819 00006684 668B15[1B8D0000]    <1> 		mov dx, [resolutionx2]
  7820 0000668B 01D6                <1> 		add esi, edx
  7821 0000668D 89F7                <1> 		mov edi, esi
  7822 0000668F 678AB7[0B7A]        <1> 		mov dh, [fonts + bx]
  7823 00006694 D0CE                <1> 		ror dh, 1
  7824 00006696 FEC5                <1> 		inc ch
  7825 00006698 80FD10              <1> 		cmp ch, 16
  7826 0000669B 7592                <1> 		jne copywindow
  7827                              <1> 	nextcharwin:
  7828 0000669D 6631C9              <1> 		xor cx, cx
  7829 000066A0 8B3D[B0670000]      <1> 		mov edi, [charposvbuf]
  7830 000066A6 81C702000000        <1> 		add edi, 2
  7831 000066AC 3B3D[70630000]      <1> 		cmp edi, [wincopyendpos]
  7832 000066B2 0F83E4000000        <1> 		jae near donewincopynow
  7833 000066B8 8A7F01              <1> 		mov bh, [edi + 1]
  7834 000066BB 80FF00              <1> 		cmp bh, 0
  7835 000066BE 7505                <1> 		jne nofixcolorwin
  7836 000066C0 B707                <1> 		mov bh, 7
  7837 000066C2 887F01              <1> 		mov [edi + 1], bh
  7838                              <1> 	nofixcolorwin:
  7839 000066C5 883D[59630000]      <1> 		mov [colorcache], bh
  7840 000066CB 8A1F                <1> 		mov bl, [edi]
  7841 000066CD 893D[B0670000]      <1> 		mov [charposvbuf], edi
  7842 000066D3 81EF[26CE0000]      <1> 		sub edi, videobuf
  7843 000066D9 81C7[661F0100]      <1> 		add edi, videobuf2
  7844 000066DF 8A6701              <1> 		mov ah, [edi + 1]
  7845 000066E2 8A07                <1> 		mov al, [edi]
  7846 000066E4 6639D8              <1> 		cmp ax, bx
  7847 000066E7 7543                <1> 		jne noskipcharcopy
  7848                              <1> 	skipcharcopy:
  7849 000066E9 81C610000000        <1> 		add esi, 16
  7850 000066EF 668B0D[AE670000]    <1> 		mov cx, [charposline]
  7851 000066F6 6641                <1> 		inc cx
  7852 000066F8 66890D[AE670000]    <1> 		mov [charposline], cx
  7853 000066FF 663B0D[6E630000]    <1> 		cmp cx, [termcol]
  7854 00006706 7295                <1> 		jb nextcharwin
  7855 00006708 6631C9              <1> 		xor cx, cx
  7856 0000670B 66890D[AE670000]    <1> 		mov [charposline], cx
  7857 00006712 31D2                <1> 		xor edx, edx
  7858 00006714 668B15[1B8D0000]    <1> 		mov dx, [resolutionx2]
  7859 0000671B C1E204              <1> 		shl edx, 4
  7860 0000671E 662B15[5E630000]    <1> 		sub dx, [winvcopydx]
  7861 00006725 01D6                <1> 		add esi, edx
  7862 00006727 E971FFFFFF          <1> 		jmp nextcharwin
  7863                              <1> 	noskipcharcopy:
  7864 0000672C 881F                <1> 		mov [edi], bl
  7865 0000672E 887F01              <1> 		mov [edi + 1], bh
  7866 00006731 8B3D[B0670000]      <1> 		mov edi, [charposvbuf]
  7867 00006737 30FF                <1> 		xor bh, bh
  7868 00006739 66C1E304            <1> 		shl bx, 4
  7869 0000673D 31D2                <1> 		xor edx, edx
  7870 0000673F 668B15[1B8D0000]    <1> 		mov dx, [resolutionx2]
  7871 00006746 C1E204              <1> 		shl edx, 4
  7872 00006749 29D6                <1> 		sub esi, edx
  7873 0000674B 81C610000000        <1> 		add esi, 16
  7874 00006751 89F7                <1> 		mov edi, esi
  7875 00006753 668B0D[AE670000]    <1> 		mov cx, [charposline]
  7876 0000675A 6641                <1> 		inc cx
  7877 0000675C 663B0D[6E630000]    <1> 		cmp cx, [termcol]
  7878 00006763 7316                <1> 		jae fixwindowcopy
  7879 00006765 66890D[AE670000]    <1> 		mov [charposline], cx
  7880 0000676C 6631C9              <1> 		xor cx, cx
  7881 0000676F 678AB7[0B7A]        <1> 		mov dh, [fonts + bx]
  7882 00006774 D0CE                <1> 		ror dh, 1
  7883 00006776 E9B4FEFFFF          <1> 		jmp copywindow
  7884                              <1> fixwindowcopy:
  7885 0000677B 6631C9              <1> 		xor cx, cx
  7886 0000677E 66890D[AE670000]    <1> 		mov [charposline], cx
  7887 00006785 662B15[5E630000]    <1> 		sub dx, [winvcopydx]
  7888 0000678C 01D6                <1> 		add esi, edx
  7889 0000678E 89F7                <1> 		mov edi, esi
  7890 00006790 678AB7[0B7A]        <1> 		mov dh, [fonts + bx]
  7891 00006795 D0CE                <1> 		ror dh, 1
  7892 00006797 E993FEFFFF          <1> 		jmp copywindow
  7893                              <1> donewincopynow:
  7894 0000679C 803D[46280000]01    <1> 		cmp byte [termcopyon], 1
  7895 000067A3 7501                <1> 		jne forgetresetstuff
  7896 000067A5 61                  <1> 		popa
  7897                              <1> forgetresetstuff:
  7898 000067A6 C605[46280000]00    <1> 		mov byte [termcopyon], 0
  7899 000067AD C3                  <1> 		ret
  7900                              <1> 		
  7901 000067AE 0000                <1> charposline dw 0
  7902 000067B0 00000000            <1> charposvbuf dw 0,0
  7903 000067B4 0000                <1> iconcolor dw 0
  7904                              <1> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  7905 000067B6 A2[766B0000]        <1> 		mov [iconselected], al
  7906 000067BB 8025[766B0000]01    <1> 		and byte [iconselected], 1
  7907 000067C2 B401                <1> 		mov ah, 1
  7908 000067C4 E8DDF8FFFF          <1> 		call graphicsadd
  7909                              <1> 	showicon2:
  7910 000067C9 8B3D[438C0000]      <1> 		mov edi, [physbaseptr]
  7911 000067CF 6601D2              <1> 		add dx, dx
  7912 000067D2 663B15[1B8D0000]    <1> 		cmp dx, [resolutionx2]
  7913 000067D9 720C                <1> 		jb screenxgood
  7914 000067DB 668B15[1B8D0000]    <1> 		mov dx, [resolutionx2]
  7915 000067E2 6681EA4000          <1> 		sub dx, 64
  7916                              <1> 	screenxgood:
  7917 000067E7 6681F90000          <1> 		cmp cx, 0
  7918 000067EC 7422                <1> 		je noscreenygoodchk
  7919 000067EE 663B0D[2F8C0000]    <1> 		cmp cx, [resolutiony]
  7920 000067F5 720C                <1> 		jb screenygood
  7921 000067F7 668B0D[2F8C0000]    <1> 		mov cx, [resolutiony]
  7922 000067FE 6681E92000          <1> 		sub cx, 32
  7923                              <1> 	screenygood:
  7924 00006803 31DB                <1> 		xor ebx, ebx
  7925 00006805 668B1D[1B8D0000]    <1> 		mov bx, [resolutionx2]
  7926 0000680C 01DF                <1> 		add edi, ebx
  7927 0000680E E2F3                <1> 		loop screenygood
  7928                              <1> 	noscreenygoodchk:
  7929 00006810 31DB                <1> 		xor ebx, ebx
  7930 00006812 6689D3              <1> 		mov bx, dx
  7931 00006815 01DF                <1> 		add edi, ebx
  7932 00006817 6631C9              <1> 		xor cx, cx
  7933 0000681A 668B06              <1> 		mov ax, [esi]
  7934 0000681D 81C602000000        <1> 		add esi, 2
  7935 00006823 66A3[B4670000]      <1> 		mov [iconcolor], ax
  7936                              <1> 	writeicon:
  7937 00006829 8B06                <1> 		mov eax, [esi]
  7938 0000682B D1C0                <1> 		rol eax, 1
  7939 0000682D 30C9                <1> 		xor cl, cl
  7940                              <1> 	writeiconline:
  7941 0000682F B201                <1> 		mov dl, 1
  7942 00006831 20C2                <1> 		and dl, al
  7943 00006833 3215[766B0000]      <1> 		xor dl, [iconselected]
  7944 00006839 668B1D[24580000]    <1> 		mov bx, [background]
  7945 00006840 66891F              <1> 		mov [edi], bx
  7946 00006843 80FA00              <1> 		cmp dl, 0
  7947 00006846 740A                <1> 		je noiconline
  7948 00006848 668B15[B4670000]    <1> 		mov dx, [iconcolor]
  7949 0000684F 668917              <1> 		mov [edi], dx
  7950                              <1> 	noiconline:
  7951 00006852 81C702000000        <1> 		add edi, 2
  7952 00006858 D1C0                <1> 		rol eax, 1
  7953 0000685A FEC1                <1> 		inc cl
  7954 0000685C 80F920              <1> 		cmp cl, 32
  7955 0000685F 72CE                <1> 		jb writeiconline
  7956 00006861 81C604000000        <1> 		add esi, 4
  7957 00006867 FEC5                <1> 		inc ch
  7958 00006869 31D2                <1> 		xor edx, edx
  7959 0000686B 668B15[1B8D0000]    <1> 		mov dx, [resolutionx2]
  7960 00006872 01D7                <1> 		add edi, edx
  7961 00006874 81EF40000000        <1> 		sub edi, 64
  7962 0000687A 80FD20              <1> 		cmp ch, 32
  7963 0000687D 72AA                <1> 		jb writeicon
  7964 0000687F 31C0                <1> 		xor eax, eax
  7965 00006881 C3                  <1> 		ret
  7966                              <1> 
  7967 00006882 02                  <1> resolutionbytes db 2
  7968 00006883 0000                <1> posxvesa dw 0
  7969 00006885 0000                <1> posyvesa dw 0
  7970 00006887 FFFF                <1> colorfont dw 0xFFFF
  7971                              <1> savefontvesa:		;;same rules as showfontvesa
  7972 00006889 C605[5F590000]01    <1> 	mov byte [savefonton], 1
  7973                              <1> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  7974 00006890 3CFF                <1> 	cmp al, 255
  7975 00006892 7501                <1> 	jne nostopshowfont
  7976 00006894 C3                  <1> 	ret
  7977                              <1> nostopshowfont:
  7978 00006895 66890D[85680000]    <1> 	mov [posyvesa], cx
  7979 0000689C 3C0A                <1> 	cmp al, 10
  7980 0000689E 0F8424000000        <1> 	je near goodvesafontx
  7981 000068A4 31C9                <1> 	xor ecx, ecx
  7982 000068A6 668B0D[1B8D0000]    <1> 	mov cx, [resolutionx2]
  7983 000068AD 6639CA              <1> 	cmp dx, cx
  7984 000068B0 7616                <1> 	jbe goodvesafontx
  7985 000068B2 6631D2              <1> 	xor dx, dx
  7986 000068B5 668B0D[85680000]    <1> 	mov cx, [posyvesa]
  7987 000068BC 6681C11000          <1> 	add cx, 16
  7988 000068C1 66890D[85680000]    <1> 	mov [posyvesa], cx
  7989                              <1> goodvesafontx:
  7990 000068C8 668B0D[85680000]    <1> 	mov cx, [posyvesa]
  7991 000068CF 668915[83680000]    <1> 	mov [posxvesa], dx
  7992 000068D6 8B3D[438C0000]      <1> 	mov edi, [physbaseptr]
  7993 000068DC 66891D[87680000]    <1> 	mov [colorfont], bx
  7994 000068E3 31DB                <1> 	xor ebx, ebx
  7995 000068E5 88C3                <1> 	mov bl, al
  7996 000068E7 31C0                <1> 	xor eax, eax
  7997 000068E9 88D8                <1> 	mov al, bl
  7998 000068EB 6689D3              <1> 	mov bx, dx
  7999 000068EE 89DA                <1> 	mov edx, ebx
  8000 000068F0 31DB                <1> 	xor ebx, ebx
  8001 000068F2 6681F90000          <1> 	cmp cx, 0
  8002 000068F7 7415                <1> 	je vesaposloopdn
  8003 000068F9 668B1D[1B8D0000]    <1> 	mov bx, [resolutionx2]
  8004                              <1> vesaposloop:
  8005 00006900 01DA                <1> 	add edx, ebx
  8006 00006902 6681E90100          <1> 	sub cx, 1
  8007 00006907 6681F90000          <1> 	cmp cx, 0
  8008 0000690C 75F2                <1> 	jne vesaposloop
  8009                              <1> vesaposloopdn:
  8010 0000690E 01D7                <1> 	add edi, edx
  8011 00006910 BE[0B7A0000]        <1> 	mov esi, fonts
  8012                              <1> findfontvesa:
  8013 00006915 30E4                <1> 	xor ah, ah
  8014 00006917 3C0A                <1> 	cmp al, 10
  8015 00006919 0F84FE000000        <1> 	je near nwlinevesa
  8016 0000691F C1E004              <1> 	shl eax, 4
  8017 00006922 01C6                <1> 	add esi, eax
  8018 00006924 C1E804              <1> 	shr eax, 4
  8019 00006927 81FE[0B8A0000]      <1> 	cmp esi, fontend
  8020 0000692D 0F83B9000000        <1> 	jae near donefontvesa
  8021 00006933 4E                  <1> 	dec esi
  8022                              <1> foundfontvesa:
  8023 00006934 46                  <1> 	inc esi
  8024 00006935 803D[5F590000]01    <1> 	cmp byte [savefonton], 1
  8025 0000693C 0F8401010000        <1> 	je near vesafontsaver
  8026 00006942 30C9                <1> 	xor cl, cl
  8027 00006944 8A06                <1> 	mov al, [esi]
  8028 00006946 668B15[1B8D0000]    <1> 	mov dx, [resolutionx2]
  8029 0000694D 662B15[83680000]    <1> 	sub dx, [posxvesa]
  8030 00006954 6681FA1000          <1> 	cmp dx, 16
  8031 00006959 7708                <1> 	ja paintfontvesa
  8032 0000695B D0EA                <1> 	shr dl, 1
  8033 0000695D 8815[1C6A0000]      <1> 	mov [charwidth], dl
  8034                              <1> paintfontvesa:
  8035 00006963 B201                <1> 	mov dl, 1
  8036 00006965 20C2                <1> 	and dl, al
  8037 00006967 803D[5E590000]01    <1> 	cmp byte [showcursorfonton], 1
  8038 0000696E 0F8435000000        <1> 	je near nodelpaintedfont
  8039 00006974 803D[5E590000]02    <1> 	cmp byte [showcursorfonton], 2
  8040 0000697B 0F8518000000        <1> 	jne near noswitchcursorfonton
  8041 00006981 80FA00              <1> 	cmp dl, 0
  8042 00006984 0F842E000000        <1> 	je near nopixelset
  8043 0000698A 668B1D[87680000]    <1> 	mov bx, [colorfont]
  8044 00006991 66891F              <1> 	mov [edi], bx
  8045 00006994 E91F000000          <1> 	jmp nopixelset
  8046                              <1> noswitchcursorfonton:
  8047 00006999 3215[60590000]      <1> 	xor dl, [mouseselecton]
  8048 0000699F 668B1D[24580000]    <1> 	mov bx, [background]
  8049 000069A6 66891F              <1> 	mov [edi], bx
  8050                              <1> nodelpaintedfont:
  8051 000069A9 80FA00              <1> 	cmp dl, 0
  8052 000069AC 740A                <1> 	je nopixelset
  8053 000069AE 668B15[87680000]    <1> 	mov dx, [colorfont]
  8054 000069B5 668917              <1> 	mov [edi], dx
  8055                              <1> nopixelset:
  8056 000069B8 81C702000000        <1> 	add edi, 2
  8057 000069BE D0C0                <1> 	rol al, 1
  8058 000069C0 FEC1                <1> 	inc cl
  8059 000069C2 3A0D[1C6A0000]      <1> 	cmp cl, [charwidth]
  8060 000069C8 7299                <1> 	jb paintfontvesa
  8061 000069CA FEC5                <1> 	inc ch
  8062 000069CC 31D2                <1> 	xor edx, edx
  8063 000069CE 668B15[1B8D0000]    <1> 	mov dx, [resolutionx2]
  8064 000069D5 01D7                <1> 	add edi, edx
  8065 000069D7 31D2                <1> 	xor edx, edx
  8066 000069D9 8A15[1C6A0000]      <1> 	mov dl, [charwidth]
  8067 000069DF 00D2                <1> 	add dl, dl
  8068 000069E1 29D7                <1> 	sub edi, edx
  8069 000069E3 80FD10              <1> 	cmp ch, 16
  8070 000069E6 0F8248FFFFFF        <1> 	jb foundfontvesa
  8071                              <1> donefontvesa:
  8072 000069EC B208                <1> 	mov dl, 8
  8073 000069EE 8815[1C6A0000]      <1> 	mov [charwidth], dl
  8074 000069F4 668B15[83680000]    <1> 	mov dx, [posxvesa]
  8075 000069FB 8A1D[1C6A0000]      <1> 	mov bl, [charwidth]
  8076 00006A01 30FF                <1> 	xor bh, bh
  8077 00006A03 6601DA              <1> 	add dx, bx
  8078 00006A06 668B1D[87680000]    <1> 	mov bx, [colorfont]
  8079 00006A0D 668B0D[85680000]    <1> 	mov cx, [posyvesa]
  8080 00006A14 C605[5F590000]00    <1> 	mov byte [savefonton], 0
  8081 00006A1B C3                  <1> 	ret
  8082 00006A1C 08                  <1> charwidth db 8
  8083                              <1> nwlinevesa:
  8084 00006A1D 668B15[83680000]    <1> 	mov dx, [posxvesa]
  8085 00006A24 6631D2              <1> 	xor dx, dx
  8086 00006A27 668915[83680000]    <1> 	mov [posxvesa], dx
  8087 00006A2E 668B0D[85680000]    <1> 	mov cx, [posyvesa]
  8088 00006A35 6681C11000          <1> 	add cx, 16
  8089 00006A3A 66890D[85680000]    <1> 	mov [posyvesa], cx
  8090 00006A41 EBA9                <1> 	jmp donefontvesa
  8091                              <1> vesafontsaver:
  8092 00006A43 30C0                <1> 	xor al, al
  8093 00006A45 30C9                <1> 	xor cl, cl
  8094                              <1> vesafontsaver2:
  8095 00006A47 668B17              <1> 	mov dx, [edi]
  8096 00006A4A 663B15[87680000]    <1> 	cmp dx, [colorfont]
  8097 00006A51 742F                <1> 	je colorfontmatch
  8098                              <1> donecolormatch:
  8099 00006A53 81C702000000        <1> 	add edi, 2
  8100 00006A59 D0C0                <1> 	rol al, 1
  8101 00006A5B FEC1                <1> 	inc cl
  8102 00006A5D 80F908              <1> 	cmp cl, 8
  8103 00006A60 72E5                <1> 	jb vesafontsaver2
  8104 00006A62 8806                <1> 	mov [esi], al
  8105 00006A64 46                  <1> 	inc esi
  8106 00006A65 FEC5                <1> 	inc ch
  8107 00006A67 31D2                <1> 	xor edx, edx
  8108 00006A69 668B15[1B8D0000]    <1> 	mov dx, [resolutionx2]
  8109 00006A70 01D7                <1> 	add edi, edx
  8110 00006A72 81EF10000000        <1> 	sub edi, 16
  8111 00006A78 80FD10              <1> 	cmp ch, 16
  8112 00006A7B 72C6                <1> 	jb vesafontsaver
  8113 00006A7D E96AFFFFFF          <1> 	jmp donefontvesa
  8114                              <1> colorfontmatch:
  8115 00006A82 0401                <1> 	add al, 1
  8116 00006A84 EBCD                <1> 	jmp donecolormatch
  8117                              <1> 	
  8118                              <1> showbmp:
  8119 00006A86 668B06              <1> 	mov ax, [esi]
  8120 00006A89 663D424D            <1> 	cmp ax, "BM"
  8121 00006A8D 0F8582000000        <1> 	jne near endedbmp
  8122 00006A93 8B3D[438C0000]      <1> 	mov edi, [physbaseptr]
  8123 00006A99 6689D0              <1> 	mov ax, dx
  8124 00006A9C 6689CB              <1> 	mov bx, cx
  8125 00006A9F 31C9                <1> 	xor ecx, ecx
  8126 00006AA1 31D2                <1> 	xor edx, edx
  8127 00006AA3 6689D9              <1> 	mov cx, bx
  8128 00006AA6 6689C2              <1> 	mov dx, ax
  8129 00006AA9 01D7                <1> 	add edi, edx
  8130 00006AAB 01D7                <1> 	add edi, edx
  8131 00006AAD 31D2                <1> 	xor edx, edx
  8132 00006AAF 668B15[1B8D0000]    <1> 	mov dx, [resolutionx2]
  8133 00006AB6 41                  <1> 	inc ecx
  8134 00006AB7 034E16              <1> 	add ecx, [esi + 22]
  8135                              <1> bmplocloop:
  8136 00006ABA 01D7                <1> 	add edi, edx
  8137 00006ABC E2FC                <1> 	loop bmplocloop
  8138 00006ABE 29D7                <1> 	sub edi, edx
  8139 00006AC0 8B5612              <1> 	mov edx, [esi + 18]
  8140 00006AC3 8B4E16              <1> 	mov ecx, [esi + 22]
  8141 00006AC6 8B460A              <1> 	mov eax, [esi + 10]
  8142 00006AC9 8B5E02              <1> 	mov ebx, [esi + 2]
  8143 00006ACC 01F3                <1> 	add ebx, esi
  8144 00006ACE 891D[1B6B0000]      <1> 	mov [bmpend], ebx
  8145 00006AD4 89D3                <1> 	mov ebx, edx
  8146 00006AD6 01C6                <1> 	add esi, eax
  8147                              <1> ldxbmp:
  8148 00006AD8 668B06              <1> 	mov ax, [esi]
  8149 00006ADB 668907              <1> 	mov [edi], ax
  8150 00006ADE 81C702000000        <1> 	add edi, 2
  8151 00006AE4 81C602000000        <1> 	add esi, 2
  8152 00006AEA 3B35[1B6B0000]      <1> 	cmp esi, [bmpend]
  8153 00006AF0 7723                <1> 	ja endedbmp
  8154 00006AF2 4A                  <1> 	dec edx
  8155 00006AF3 81FA00000000        <1> 	cmp edx, 0
  8156 00006AF9 77DD                <1> 	ja ldxbmp
  8157 00006AFB 31D2                <1> 	xor edx, edx
  8158 00006AFD 668B15[1B8D0000]    <1> 	mov dx, [resolutionx2]
  8159 00006B04 29DF                <1> 	sub edi, ebx
  8160 00006B06 29DF                <1> 	sub edi, ebx
  8161 00006B08 29D7                <1> 	sub edi, edx
  8162 00006B0A 49                  <1> 	dec ecx
  8163 00006B0B 89DA                <1> 	mov edx, ebx
  8164 00006B0D 81F900000000        <1> 	cmp ecx, 0
  8165 00006B13 77C3                <1> 	ja ldxbmp
  8166                              <1> endedbmp:
  8167 00006B15 E801EFFFFF          <1> 	call switchmousepos2
  8168 00006B1A C3                  <1> 	ret
  8169                              <1> 	
  8170 00006B1B 00000000            <1> 	bmpend dd 0
  8171                              <1> 
  8172                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Here are some vars;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  8173 00006B1F 00000000            <1> 	showstringesi dw 0,0
  8174 00006B23 00                  <1> 	mouseon db 0
  8175 00006B24 737461727400        <1> 	start	db "start",0
  8176 00006B2A 536F6C6C65724F5300  <1> 	gotomenu db "SollerOS",0
  8177 00006B33 426F6F2100          <1> 	boomsg db "Boo!",0
  8178 00006B38 5061636D616E207761- <1> 	pacmsg	db "Pacman was easy to draw.",0
  8179 00006B41 73206561737920746F- <1>
  8180 00006B4A 20647261772E00      <1>
  8181 00006B51 4F6D206E6F6D206E6F- <1> 	pacnom  db "Om nom nom nom",0
  8182 00006B5A 6D206E6F6D00        <1>
  8183 00006B60 77696E646F77732073- <1> 	winmsg	db "windows sucks",0
  8184 00006B69 75636B7300          <1>
  8185 00006B6E 5800                <1> 	xmsg db "X",0
  8186 00006B70 0000                <1> 	icon dw 0	;pointer to icon
  8187 00006B72 00000000            <1> 	codepointer dw 0,0 ;pointer to code
  8188 00006B76 00                  <1> 	iconselected db 0
  8189                              <1> 	
  8190                              <1> 	boo:
  8191 00006B77 BE[336B0000]        <1> 		mov esi, boomsg
  8192 00006B7C 66BA6400            <1> 		mov dx, 100
  8193 00006B80 66B94001            <1> 		mov cx, 320
  8194 00006B84 31DB                <1> 		xor ebx, ebx
  8195 00006B86 6631C0              <1> 		xor ax, ax
  8196 00006B89 E97EF7FFFF          <1> 		jmp showstring
  8197                              <1> 
  8198                              <1> 	pacmannomnom:
  8199 00006B8E BE[516B0000]        <1> 		mov esi, pacnom
  8200 00006B93 66BA8200            <1> 		mov dx, 130
  8201 00006B97 66B93C00            <1> 		mov cx, 60
  8202 00006B9B 31DB                <1> 		xor ebx, ebx
  8203 00006B9D 6631C0              <1> 		xor ax, ax
  8204 00006BA0 E967F7FFFF          <1> 		jmp showstring	
  8205                              <1> 	
  8206                              <1> 	noie:
  8207 00006BA5 66C705[616C0000]80- <1> 		mov word [termwindow], 640
  8208 00006BAD 02                  <1>
  8209 00006BAE 66C705[636C0000]E0- <1> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  8210 00006BB6 01                  <1>
  8211 00006BB7 BE[616C0000]        <1> 		mov esi, termwindow
  8212 00006BBC 66BA1000            <1> 		mov dx, 16
  8213 00006BC0 66B91000            <1> 		mov cx, 16
  8214 00006BC4 BB[D42C0000]        <1> 		mov ebx, os
  8215 00006BC9 6631C0              <1> 		xor ax, ax
  8216 00006BCC E8A3F7FFFF          <1> 		call showwindow
  8217 00006BD1 E9FEC0FFFF          <1> 		jmp os
  8218                              <1> 
  8219                              <1> 	gotomenuboot:
  8220 00006BD6 31D2                <1> 		xor edx, edx
  8221 00006BD8 31C9                <1> 		xor ecx, ecx
  8222 00006BDA 668B15[2D8C0000]    <1> 		mov dx, [resolutionx]
  8223 00006BE1 668B0D[2F8C0000]    <1> 		mov cx, [resolutiony]
  8224 00006BE8 66C1E904            <1> 		shr cx, 4
  8225 00006BEC 6681E90100          <1> 		sub cx, 1
  8226 00006BF1 66C1E104            <1> 		shl cx, 4
  8227 00006BF5 668915[616C0000]    <1> 		mov [termwindow], dx
  8228 00006BFC 66890D[636C0000]    <1> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  8229 00006C03 BE[616C0000]        <1> 		mov esi, termwindow
  8230 00006C08 6631D2              <1> 		xor dx, dx
  8231 00006C0B 6631C9              <1> 		xor cx, cx
  8232 00006C0E BB[D42C0000]        <1> 		mov ebx, os
  8233 00006C13 6631C0              <1> 		xor ax, ax
  8234 00006C16 E859F7FFFF          <1> 		call showwindow
  8235 00006C1B E9B4C0FFFF          <1> 		jmp os
  8236                              <1> 		;ret
  8237                              <1> 
  8238                              <1> 	winblows:
  8239 00006C20 BE[606B0000]        <1> 		mov esi, winmsg
  8240 00006C25 6631D2              <1> 		xor dx, dx
  8241 00006C28 668B0D[2F8C0000]    <1> 		mov cx, [resolutiony]
  8242 00006C2F 6681E92000          <1> 		sub cx, 32
  8243 00006C34 31DB                <1> 		xor ebx, ebx
  8244 00006C36 30E4                <1> 		xor ah, ah
  8245 00006C38 B011                <1> 		mov al, 00010001b
  8246 00006C3A E8CDF6FFFF          <1> 		call showstring
  8247 00006C3F BE[2A6B0000]        <1> 		mov esi, gotomenu
  8248 00006C44 668B0D[2F8C0000]    <1> 		mov cx, [resolutiony]
  8249 00006C4B 6681E93000          <1> 		sub cx, 48
  8250 00006C50 6631D2              <1> 		xor dx, dx
  8251 00006C53 30E4                <1> 		xor ah, ah
  8252 00006C55 B010                <1> 		mov al, 00010000b
  8253 00006C57 BB[D66B0000]        <1> 		mov ebx, gotomenuboot
  8254 00006C5C E9ABF6FFFF          <1> 		jmp showstring
  8255                              <1> 
  8256 00006C61 20035802            <1> 	termwindow:	dw 800,600	;;window size
  8257 00006C65 53757065725465726D- <1> 	termmsg:	db "SuperTerminal",0	;;window title
  8258 00006C6E 696E616C00          <1>
  8259                              <1> 	
  8260 00006C6E <incbin>            <1> interneticon: 	incbin 'source/precompiled/interneticon.pak'
  8261 00006C6E <incbin>            <1> wordicon: 	incbin 'source/precompiled/wordicon.pak'
  8262 00006C6E <incbin>            <1> pacmanpellet: incbin 'source/precompiled/pacmanpellet.pak'
  8263 00006C6E <incbin>            <1> ghostie	incbin 'source/precompiled/ghostie.pak'
  8264 00006C6E <incbin>            <1> pacman	incbin 'source/precompiled/pacman.pak'
  8265                                      %include 'source/arp.asm'
  8266                              <1> ;ARP TESTING
  8267                              <1> arpinit:
  8268 00006EFD BE[B46F0000]        <1> 	mov esi, arptable
  8269 00006F02 BF[27510000]        <1> 	mov edi, sysmac
  8270 00006F07 BB[23510000]        <1> 	mov ebx, sysip
  8271 00006F0C 8B0F                <1> 	mov ecx, [edi]
  8272 00006F0E 890E                <1> 	mov [esi], ecx
  8273 00006F10 668B4F04            <1> 	mov cx, [edi + 4]
  8274 00006F14 894E04              <1> 	mov [esi + 4], ecx
  8275 00006F17 8B0B                <1> 	mov ecx, [ebx]
  8276 00006F19 894E06              <1> 	mov [esi + 6], ecx
  8277 00006F1C C605[B36F0000]01    <1> 	mov byte [arpconfig], 1
  8278 00006F23 C3                  <1> 	ret
  8279                              <1> arptest:
  8280 00006F24 803D[B36F0000]01    <1> 	cmp byte [arpconfig], 1
  8281 00006F2B 7405                <1> 	je arptest2
  8282 00006F2D E8CBFFFFFF          <1> 	call arpinit
  8283                              <1> arptest2:	;try to reach 192.168.0.1
  8284 00006F32 8B0D[27510000]      <1> 	mov ecx, [sysmac]
  8285 00006F38 668B1D[2B510000]    <1> 	mov bx, [sysmac + 4]
  8286 00006F3F 890D[796F0000]      <1> 	mov [sourcemac], ecx
  8287 00006F45 66891D[7D6F0000]    <1> 	mov [sourcemac + 4],bx
  8288 00006F4C 890D[896F0000]      <1> 	mov [arpsenderinfo], ecx
  8289 00006F52 66891D[8D6F0000]    <1> 	mov [arpsenderinfo + 4], bx
  8290 00006F59 BF[736F0000]        <1> 	mov edi, frame
  8291 00006F5E BE[B36F0000]        <1> 	mov esi, framend
  8292 00006F63 E8D9E0FFFF          <1> 	call rtl8139.sendpacket
  8293 00006F68 BE[E6790000]        <1> 	mov esi, line
  8294 00006F6D E8F1B3FFFF          <1> 	call print
  8295 00006F72 C3                  <1> 	ret
  8296                              <1> 	
  8297                              <1> ;example frame
  8298                              <1> frame:
  8299 00006F73 FFFFFFFFFFFF        <1> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  8300 00006F79 000000000000        <1> sourcemac:		db 0,0,0,0,0,0
  8301 00006F7F 0608                <1> ethertype:		dw 0x0806			;;arp
  8302                              <1> 	;;example packet
  8303 00006F81 0100                <1> 	arppacket: 		dw 1				;;ethernet is 1
  8304 00006F83 0008                <1> 	arpprotocol: 	dw 0x0800			;;ip is 0x800
  8305 00006F85 0604                <1> 					db 6,4				;;length of mac, length of ip
  8306 00006F87 0100                <1> 	arpoperation: 	dw 1				;;one for arp request
  8307 00006F89 000000000000        <1> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;;mac
  8308 00006F8F C0A80005            <1> 					db 192,168,0,5			;;ip
  8309 00006F93 000000000000        <1> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;;ignored in requests
  8310 00006F99 C0A80001            <1> 					db 192,168,0,1			;;ip
  8311 00006F9D 00<rept>            <1> padding:		times (64-($-frame)) db 0
  8312                              <1> framend:
  8313                              <1> 
  8314 00006FB3 00                  <1> arpconfig db 0
  8315                              <1> arptable:	;;mac,ip
  8316 00006FB4 000000000000000000- <1> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  8317 00006FBD 00<rept>            <1>
  8318                              <1> arptableend:
  8319                                      %include 'source/pci.asm'
  8320 00007018 00                  <1> pcibus		db 0
  8321 00007019 00                  <1> pcidevice	db 0
  8322 0000701A 00                  <1> pcifunction	db 0
  8323 0000701B 00                  <1> pciregister	db 0
  8324 0000701C 00                  <1> pcireqtype db 0
  8325                              <1> 
  8326                              <1> getpciport:
  8327 0000701D B001                <1> 	mov al, 1
  8328 0000701F A2[1C700000]        <1> 	mov [pcireqtype], al
  8329 00007024 E916000000          <1> 	jmp searchpci
  8330                              <1> pcidump:
  8331 00007029 31C0                <1> 	xor eax, eax
  8332 0000702B A2[1A700000]        <1> 	mov [pcifunction], al
  8333 00007030 A2[18700000]        <1> 	mov [pcibus], al
  8334 00007035 A2[19700000]        <1> 	mov [pcidevice], al
  8335 0000703A A2[1C700000]        <1> 	mov [pcireqtype], al
  8336                              <1> searchpci:		;;return in ebx, start X in pciX
  8337 0000703F 30C0                <1> 	xor al, al
  8338 00007041 A2[1B700000]        <1> 	mov [pciregister], al
  8339 00007046 E855010000          <1> 	call getpciaddr
  8340 0000704B BAF80C0000          <1> 	mov edx, 0xCF8
  8341 00007050 EF                  <1> 	out dx, eax	;;request pci config
  8342 00007051 BAFC0C0000          <1> 	mov edx, 0xCFC
  8343 00007056 ED                  <1> 	in eax, dx 	;;read in pci config
  8344 00007057 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  8345 0000705C 0F8237000000        <1> 	jb near checkpcidevice
  8346                              <1> searchpciret:
  8347                              <1> nextpcidevice:
  8348 00007062 30C0                <1> 	xor al, al
  8349 00007064 A2[1A700000]        <1> 	mov [pcifunction], al
  8350 00007069 A0[19700000]        <1> 	mov al, [pcidevice]
  8351 0000706E 3C1F                <1> 	cmp al, 11111b
  8352 00007070 0F83C1000000        <1> 	jae near nextpcibus
  8353 00007076 FEC0                <1> 	inc al
  8354 00007078 A2[19700000]        <1> 	mov [pcidevice], al
  8355 0000707D EBC0                <1> 	jmp searchpci
  8356 0000707F A0[1A700000]        <1> 	mov al, [pcifunction]
  8357 00007084 3C07                <1> 	cmp al, 111b
  8358 00007086 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  8359 0000708C FEC0                <1> 	inc al
  8360 0000708E A2[1A700000]        <1> 	mov [pcifunction], al
  8361 00007093 EBAA                <1> 	jmp searchpci
  8362 00007095 00000000            <1> pcitype: db 0,0,0,0
  8363                              <1> checkpcidevice:
  8364 00007099 30C0                <1> 	xor al, al
  8365 0000709B 3805[1C700000]      <1> 	cmp [pcireqtype], al
  8366 000070A1 0F842B000000        <1> 	je near dumppcidevice
  8367 000070A7 B008                <1> 	mov al, 0x08
  8368 000070A9 A2[1B700000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  8369 000070AE E8ED000000          <1> 	call getpciaddr
  8370 000070B3 BAF80C0000          <1> 	mov edx, 0xCF8
  8371 000070B8 EF                  <1> 	out dx, eax
  8372 000070B9 BAFC0C0000          <1> 	mov edx, 0xCFC
  8373 000070BE ED                  <1> 	in eax, dx
  8374 000070BF C1C008              <1> 	rol eax, 8
  8375 000070C2 8A1D[95700000]      <1> 	mov bl, [pcitype]
  8376 000070C8 38D8                <1> 	cmp al, bl
  8377 000070CA 0F8486000000        <1> 	je near foundpciaddr
  8378 000070D0 EB90                <1> 	jmp searchpciret
  8379                              <1> dumppcidevice:
  8380 000070D2 30C0                <1> 	xor al, al
  8381 000070D4 A2[1B700000]        <1> 	mov [pciregister], al
  8382 000070D9 E8C2000000          <1> 	call getpciaddr
  8383 000070DE 89C1                <1> 	mov ecx, eax
  8384 000070E0 C605[31330000]05    <1> 	mov byte [firsthexshown], 5
  8385 000070E7 E85AC2FFFF          <1> 	call showhex
  8386                              <1> dumppcidevicelp:
  8387 000070EC A2[1B700000]        <1> 	mov [pciregister], al
  8388 000070F1 E8AA000000          <1> 	call getpciaddr
  8389 000070F6 BAF80C0000          <1> 	mov edx, 0xCF8
  8390 000070FB EF                  <1> 	out dx, eax
  8391 000070FC BAFC0C0000          <1> 	mov edx, 0xCFC
  8392 00007101 ED                  <1> 	in eax, dx
  8393 00007102 89C1                <1> 	mov ecx, eax
  8394 00007104 A0[1B700000]        <1> 	mov al, [pciregister]
  8395 00007109 0404                <1> 	add al, 4
  8396 0000710B C605[31330000]05    <1> 	mov byte [firsthexshown], 5
  8397 00007112 E82FC2FFFF          <1> 	call showhex
  8398 00007117 3C3C                <1> 	cmp al, 0x3C
  8399 00007119 72D1                <1> 	jb dumppcidevicelp
  8400                              <1> dumppcidn:
  8401 0000711B 803D[072A0000]00    <1> 	cmp byte [charpos], 0
  8402 00007122 0F843AFFFFFF        <1> 	je near searchpciret
  8403 00007128 BE[E6790000]        <1> 	mov esi, line
  8404 0000712D E831B2FFFF          <1> 	call print
  8405 00007132 E92BFFFFFF          <1> 	jmp searchpciret
  8406                              <1> nextpcibus:
  8407 00007137 30C0                <1> 	xor al, al
  8408 00007139 A2[19700000]        <1> 	mov [pcidevice], al
  8409 0000713E A0[18700000]        <1> 	mov al, [pcibus]
  8410 00007143 3C7F                <1> 	cmp al, 1111111b
  8411 00007145 730C                <1> 	jae donesearchpci
  8412 00007147 FEC0                <1> 	inc al
  8413 00007149 A2[18700000]        <1> 	mov [pcibus], al
  8414 0000714E E9ECFEFFFF          <1> 	jmp searchpci
  8415                              <1> donesearchpci:
  8416 00007153 31D2                <1> 	xor edx, edx
  8417 00007155 C3                  <1> 	ret
  8418                              <1> foundpciaddr:
  8419 00007156 B010                <1> 	mov al, 0x10
  8420 00007158 A2[1B700000]        <1> 	mov [pciregister], al
  8421                              <1> findpciioaddr:
  8422 0000715D E83E000000          <1> 	call getpciaddr
  8423 00007162 BAF80C0000          <1> 	mov edx, 0xCF8
  8424 00007167 EF                  <1> 	out dx, eax
  8425 00007168 BAFC0C0000          <1> 	mov edx, 0xCFC
  8426 0000716D ED                  <1> 	in eax, dx
  8427 0000716E 89C3                <1> 	mov ebx, eax
  8428 00007170 81E301000000        <1> 	and ebx, 1
  8429 00007176 81FB00000000        <1> 	cmp ebx, 0
  8430 0000717C 0F8408000000        <1> 	je near notpciioaddr
  8431 00007182 2D01000000          <1> 	sub eax, 1
  8432 00007187 89C2                <1> 	mov edx, eax
  8433 00007189 C3                  <1> 	ret
  8434                              <1> notpciioaddr:
  8435 0000718A A0[1B700000]        <1> 	mov al, [pciregister]
  8436 0000718F 0404                <1> 	add al, 4
  8437 00007191 3C28                <1> 	cmp al, 0x28
  8438 00007193 0F87C9FEFFFF        <1> 	ja near searchpciret
  8439 00007199 A2[1B700000]        <1> 	mov [pciregister], al
  8440 0000719E EBBD                <1> 	jmp findpciioaddr
  8441                              <1> getpciaddr:		;;puts it in eax and ebx
  8442 000071A0 31C0                <1> 			xor eax, eax
  8443 000071A2 BB00000080          <1> 			mov ebx, 0x80000000
  8444 000071A7 A0[18700000]        <1> 			mov al, [pcibus]
  8445 000071AC C1E010              <1> 			shl eax, 16
  8446 000071AF 01C3                <1> 			add ebx, eax
  8447 000071B1 31C0                <1> 			xor eax, eax
  8448 000071B3 A0[19700000]        <1> 			mov al, [pcidevice]
  8449 000071B8 C1E00B              <1> 			shl eax, 11
  8450 000071BB 01C3                <1> 			add ebx, eax
  8451 000071BD 31C0                <1> 			xor eax, eax
  8452 000071BF A0[1A700000]        <1> 			mov al, [pcifunction]
  8453 000071C4 C1E008              <1> 			shl eax, 8
  8454 000071C7 01C3                <1> 			add ebx, eax
  8455 000071C9 31C0                <1> 			xor eax, eax
  8456 000071CB A0[1B700000]        <1> 			mov al, [pciregister]
  8457 000071D0 01C3                <1> 			add ebx, eax
  8458 000071D2 89D8                <1> 			mov eax, ebx
  8459 000071D4 C3                  <1> 			ret
  8460                                      %include 'source/disk.asm'
  8461                              <1> ;This loads files using the methods in the loaded driver
  8462                              <1> %include "source/drivers/disk/realmode.asm"
  8463                              <2> diskrreal:
  8464                              <2> 			;read from disk using real mode-it does not work with large files
  8465                              <2> 			;sector count in cl
  8466                              <2> 			;disk number in ch
  8467                              <2> 			;48 bit address with last 32 bits in ebx
  8468                              <2> 			;buffer in esi
  8469                              <2> 			;puts end of buffer in edi and end lba address in edx
  8470 000071D5 880D[02720000]      <2> 	mov [sdlength], cl
  8471 000071DB 891D[03720000]      <2> 	mov [sdaddress], ebx
  8472 000071E1 8935[61730000]      <2> 	mov [oldesireal], esi
  8473 000071E7 66BE[0772]          <2> 	mov si, readdiskreal
  8474 000071EB 668935[33110000]    <2> 	mov [realmodeptr], si
  8475 000071F2 BE[43720000]        <2> 	mov esi, backfromrealread
  8476 000071F7 8935[2F110000]      <2> 	mov [realmodereturn], esi
  8477 000071FD E9169EFFFF          <2> 	jmp realmode
  8478 00007202 00                  <2> sdlength db 0
  8479 00007203 00000000            <2> sdaddress dd 0
  8480                              <2> 
  8481                              <2> [BITS 16]
  8482                              <2> readdiskreal:
  8483 00007207 C706[3372]1000      <2> 	mov word [dlen], 0x10
  8484 0000720D C706[3772]0000      <2> 	mov word [daddress], 0
  8485 00007213 C706[3972]0001      <2> 	mov word [dsegm], 0x100
  8486 00007219 66891E[3B72]        <2> 	mov [dlbaad], ebx
  8487 0000721E 880E[3572]          <2> 	mov [dreadlen], cl
  8488                              <2> ReadHardDisk:
  8489 00007222 BE[3372]            <2> 	mov si, diskaddresspacket
  8490 00007225 31C0                <2> 	xor ax, ax
  8491 00007227 B442                <2> 	mov ah, 0x42
  8492 00007229 8A16[3272]          <2> 	mov dl, [dnumber]
  8493 0000722D CD13                <2> 	int 0x13
  8494 0000722F 72F1                <2> 	jc ReadHardDisk
  8495 00007231 C3                  <2> 	ret
  8496                              <2> 
  8497 00007232 80                  <2> dnumber db 0x80
  8498                              <2> diskaddresspacket:
  8499 00007233 10                  <2> dlen:	db 0x10 ;size of packet
  8500 00007234 00                  <2> 		db 0
  8501 00007235 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8502 00007237 0000                <2> daddress:	dw 0x0	;address 0
  8503 00007239 0001                <2> dsegm:		dw 0x100	;segment
  8504                              <2> 		;start with known value for hd
  8505                              <2> dlbaad:
  8506 0000723B 00000000            <2> 	dd 0	;lba address
  8507 0000723F 00000000            <2> 	dd 0
  8508                              <2> [BITS 32]
  8509                              <2> backfromrealread:
  8510 00007243 8B35[61730000]      <2> 	mov esi, [oldesireal]
  8511 00007249 8B1D[03720000]      <2> 	mov ebx, [sdaddress]
  8512 0000724F 31C9                <2> 	xor ecx, ecx
  8513 00007251 8A0D[02720000]      <2> 	mov cl, [sdlength]
  8514 00007257 01CB                <2> 	add ebx, ecx
  8515 00007259 66B80800            <2> 	mov ax, LINEAR_SEL
  8516 0000725D 8EE0                <2> 	mov fs, ax
  8517 0000725F BF00100000          <2> 	mov edi, 0x1000
  8518 00007264 B200                <2> 	mov dl, 0
  8519 00007266 D0E1                <2> 	shl cl, 1
  8520                              <2> copyfromrmodedisk:
  8521 00007268 648A07              <2> 	mov al, [fs:edi]
  8522 0000726B 8806                <2> 	mov [esi], al
  8523 0000726D 47                  <2> 	inc edi
  8524 0000726E 46                  <2> 	inc esi
  8525 0000726F FECA                <2> 	dec dl
  8526 00007271 80FA00              <2> 	cmp dl, 0
  8527 00007274 75F2                <2> 	jne copyfromrmodedisk
  8528 00007276 FEC9                <2> 	dec cl
  8529 00007278 B200                <2> 	mov dl, 0
  8530 0000727A 80F900              <2> 	cmp cl, 0
  8531 0000727D 75E9                <2> 	jne copyfromrmodedisk
  8532 0000727F 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8533 00007283 8EE0                <2> 	mov fs, ax
  8534 00007285 89F7                <2> 	mov edi, esi
  8535 00007287 8B35[61730000]      <2> 	mov esi, [oldesireal]
  8536 0000728D 89DA                <2> 	mov edx, ebx
  8537 0000728F 8B1D[03720000]      <2> 	mov ebx, [sdaddress]
  8538 00007295 C3                  <2> 	ret
  8539                              <2> 	
  8540                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8541                              <1> 			;returns with err code in edx and file end in edi
  8542 00007296 803F00              <1> 	cmp byte [edi], 0
  8543 00007299 0F8448000000        <1> 	je near nofileload
  8544 0000729F 89FA                <1> 	mov edx, edi
  8545 000072A1 BB[1E8D0000]        <1> 	mov ebx, diskfileindex
  8546                              <1> nextnamechar:
  8547 000072A6 8A07                <1> 	mov al, [edi]
  8548 000072A8 3C26                <1> 	cmp al, '&'
  8549 000072AA 7440                <1> 	je nullfile
  8550 000072AC 8A23                <1> 	mov ah, [ebx]
  8551 000072AE 47                  <1> 	inc edi
  8552 000072AF 43                  <1> 	inc ebx
  8553 000072B0 88C1                <1> 	mov cl, al
  8554 000072B2 08E1                <1> 	or cl, ah
  8555 000072B4 80F900              <1> 	cmp cl, 0
  8556 000072B7 744E                <1> 	je equalfilenames
  8557 000072B9 80F920              <1> 	cmp cl, ' '
  8558 000072BC 7449                <1> 	je equalfilenames
  8559 000072BE 3C2A                <1> 	cmp al, '*'
  8560 000072C0 742B                <1> 	je equalfilenames2
  8561 000072C2 80FC00              <1> 	cmp ah, 0
  8562 000072C5 7410                <1> 	je nextfilename
  8563 000072C7 3C00                <1> 	cmp al, 0
  8564 000072C9 7404                <1> 	je getebxzero
  8565 000072CB 38E0                <1> 	cmp al, ah
  8566 000072CD 74D7                <1> 	je nextnamechar
  8567                              <1> getebxzero:
  8568 000072CF 8A23                <1> 	mov ah, [ebx]
  8569 000072D1 43                  <1> 	inc ebx
  8570 000072D2 80FC00              <1> 	cmp ah, 0
  8571 000072D5 75F8                <1> 	jne getebxzero
  8572                              <1> nextfilename:
  8573 000072D7 81C308000000        <1> 	add ebx, 8		;next descriptor
  8574 000072DD 89D7                <1> 	mov edi, edx
  8575 000072DF 81FB[938E0000]      <1> 	cmp ebx, enddiskfileindex
  8576 000072E5 72BF                <1> 	jb nextnamechar
  8577                              <1> nofileload:
  8578 000072E7 BA94010000          <1> 	mov edx, 404	;indicate not found error
  8579                              <1> nullfile:
  8580 000072EC C3                  <1> 	ret
  8581                              <1> equalfilenames2:
  8582 000072ED 81EB02000000        <1> 	sub ebx, 2
  8583                              <1> eqfilefind:
  8584 000072F3 43                  <1> 	inc ebx
  8585 000072F4 81FB[938E0000]      <1> 	cmp ebx, enddiskfileindex
  8586 000072FA 0F83E7FFFFFF        <1> 	jae near nofileload
  8587 00007300 8A03                <1> 	mov al, [ebx]
  8588 00007302 3C00                <1> 	cmp al, 0
  8589 00007304 75ED                <1> 	jne eqfilefind
  8590 00007306 43                  <1> 	inc ebx
  8591                              <1> equalfilenames:
  8592 00007307 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8593 0000730A 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8594 0000730C 031D[9B010000]      <1> 	add ebx, [lbaad]	;add offset to solleros
  8595 00007312 31C9                <1> 	xor ecx, ecx
  8596 00007314 88C1                <1> 	mov cl, al			;get excess number of sectors
  8597 00007316 C0E102              <1> 	shl cl, 2
  8598 00007319 C0E902              <1> 	shr cl, 2			;cut off at 64
  8599 0000731C 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8600 0000731E B500                <1> 	mov ch, 0			;drive 0
  8601 00007320 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8602                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8603 00007323 A3[65730000]        <1> 	mov [filetracks], eax
  8604 00007328 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8605 0000732A 89DA                <1> 	mov edx, ebx
  8606 0000732C 80F900              <1> 	cmp cl, 0
  8607 0000732F 7405                <1> 	je copytracksforfile
  8608 00007331 E89FFEFFFF          <1> 	call diskrreal	;take care of excess sectors
  8609                              <1> copytracksforfile:
  8610 00007336 A1[65730000]        <1> 	mov eax, [filetracks]
  8611 0000733B 3D00000000          <1> 	cmp eax, 0
  8612 00007340 7419                <1> 	je donecopyfile
  8613 00007342 48                  <1> 	dec eax
  8614 00007343 A3[65730000]        <1> 	mov [filetracks], eax
  8615 00007348 89D3                <1> 	mov ebx, edx	;get end lba
  8616 0000734A B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8617 0000734C 8A2D[9A010000]      <1> 	mov ch, [DriveNumber]
  8618 00007352 89FE                <1> 	mov esi, edi	;reset buffer
  8619 00007354 E87CFEFFFF          <1> 	call diskrreal
  8620 00007359 EBDB                <1> 	jmp copytracksforfile
  8621                              <1> donecopyfile:
  8622 0000735B BA00000000          <1> 	mov edx, 0	;no error
  8623 00007360 C3                  <1> 	ret
  8624                              <1> 
  8625 00007361 00000000            <1> oldesireal dd 0
  8626 00007365 00000000            <1> filetracks dd 0
  8627 00007369 00                  <1> lbad1 db 0
  8628 0000736A 00                  <1> lbad2 db 0
  8629 0000736B 00                  <1> lbad3 db 0
  8630 0000736C 00                  <1> lbad4 db 0
  8631 0000736D 00                  <1> lbad5 db 0
  8632 0000736E 00                  <1> lbad6 db 0
  8633 0000736F 6400                <1> segments dw 100
  8634                              <1> 
  8635                              <1> 
  8636                              <1> 	
  8637                                      %include 'source/threads.asm'
  8638                              <1> ;;THIS IS MY FIRST ATTEMPT AT IMPLEMENTING THREADS
  8639 00007371 00000000            <1> espstart dd 0
  8640                              <1> threadstarttest:
  8641 00007375 8925[71730000]      <1>     mov [espstart], esp
  8642 0000737B E9B8040000          <1>     jmp startthreads
  8643                              <1> mainthread:
  8644 00007380 F4                  <1> 	hlt		;;this does not work properly
  8645 00007381 EBFD                <1> 	jmp mainthread
  8646                              <1> 	
  8647                              <1> nwcmdst:
  8648 00007383 8B25[71730000]      <1> 	mov esp, [espstart]
  8649                              <1> 	;mov ax, STACK_SEL
  8650                              <1> 	;mov ss, ax
  8651 00007389 C605[A8730000]00    <1> 	mov byte [threadson], 0
  8652 00007390 E9E0BAFFFF          <1> 	jmp nwcmd
  8653                              <1> 	
  8654                              <1> modelthread:
  8655 00007395 B001                <1> 	mov al, 1
  8656 00007397 B409                <1> 	mov ah, 9
  8657 00007399 8B0D[97790000]      <1> 	mov ecx, [currentthread]
  8658 0000739F CD30                <1> 	int 0x30
  8659 000073A1 E83493FFFF          <1> 	call timerinterrupt	;this emulates an interrupt call
  8660 000073A6 EBDB                <1> 	jmp nwcmdst
  8661                              <1> 	
  8662                              <1> 	
  8663 000073A8 00                  <1> threadson db 0
  8664 000073A9 04000000            <1> lastthread dd 4
  8665                              <1> 
  8666                              <1> thrdtst:
  8667 000073AD [95730000]<rept>    <1> times 256 dd modelthread	;;could go up to 2048, but that takes too long
  8668                              <1> thrdtstend:
  8669                              <1> 
  8670 000077AD 00000000            <1> 	espold dd 0
  8671                              <1> 
  8672                              <1> threadfork:
  8673 000077B1 C605[A8730000]01    <1> 	mov byte [threadson], 1
  8674 000077B8 60                  <1> 	pushad
  8675                              <1> 	
  8676 000077B9 8CC8                <1> 	mov eax, cs
  8677 000077BB 89C2                <1> 	mov edx, eax
  8678 000077BD 8B4C2428            <1> 	mov ecx, [esp + 40]
  8679 000077C1 81C900020000        <1> 	or ecx, 0x200
  8680 000077C7 89E3                <1> 	mov ebx, esp
  8681 000077C9 BC[CAC40100]        <1> 	mov esp, stackdummy
  8682                              <1> 	
  8683 000077CE 60                  <1> 	pushad
  8684 000077CF B8[80730000]        <1> 	mov eax, mainthread
  8685 000077D4 89442420            <1> 	mov [esp + 32], eax
  8686 000077D8 89542424            <1> 	mov [esp + 36], edx
  8687 000077DC 894C2428            <1> 	mov [esp + 40], ecx
  8688 000077E0 8925[C2A00100]      <1> 	mov [threadlist], esp
  8689                              <1> 	
  8690 000077E6 891D[AD770000]      <1> 	mov [espold], ebx
  8691 000077EC 89F0                <1> 	mov eax, esi
  8692 000077EE BC[CAC80100]        <1> 	mov esp, stack1
  8693 000077F3 8B1D[A9730000]      <1> 	mov ebx, [lastthread]
  8694 000077F9 C1E30A              <1> 	shl ebx, 10
  8695 000077FC 01DC                <1> 	add esp, ebx
  8696 000077FE C1EB0A              <1> 	shr ebx, 10
  8697 00007801 60                  <1> 	pushad
  8698 00007802 89442420            <1> 	mov [esp + 32], eax
  8699 00007806 89542424            <1> 	mov [esp + 36], edx
  8700 0000780A 894C2428            <1> 	mov [esp + 40], ecx
  8701 0000780E 89A3[C2A00100]      <1> 	mov [threadlist + ebx], esp
  8702 00007814 8B25[AD770000]      <1> 	mov esp, [espold]
  8703 0000781A 81C304000000        <1> 	add ebx, 4
  8704 00007820 89A3[C2A00100]      <1> 	mov [threadlist + ebx], esp
  8705 00007826 81C304000000        <1> 	add ebx, 4
  8706 0000782C 891D[A9730000]      <1> 	mov [lastthread], ebx
  8707 00007832 B020                <1> 	mov al, 0x20
  8708 00007834 E620                <1> 	out 0x20, al
  8709 00007836 61                  <1> 	popad
  8710 00007837 C3                  <1> 	ret
  8711                              <1> 
  8712                              <1> startthreads:
  8713 00007838 C605[A8730000]01    <1> 	mov byte [threadson], 1
  8714                              <1> 
  8715 0000783F 8CC8                <1> 	mov eax, cs
  8716 00007841 89C2                <1> 	mov edx, eax
  8717 00007843 8B4C2428            <1> 	mov ecx, [esp + 40]
  8718 00007847 81C900020000        <1> 	or ecx, 0x200
  8719 0000784D 89E3                <1> 	mov ebx, esp
  8720 0000784F BC[CAC40100]        <1> 	mov esp, stackdummy
  8721 00007854 66B83000            <1> 	mov ax, NEW_DATA_SEL
  8722 00007858 8ED0                <1> 	mov ss, ax
  8723                              <1> 	
  8724 0000785A 60                  <1> 	pushad
  8725 0000785B B8[80730000]        <1> 	mov eax, mainthread
  8726 00007860 89442420            <1> 	mov [esp + 32], eax	;used to be 32
  8727 00007864 89542424            <1> 	mov [esp + 36], edx ;used to be 36
  8728 00007868 894C2428            <1> 	mov [esp + 40], ecx
  8729 0000786C 8925[C2A00100]      <1> 	mov [threadlist], esp
  8730                              <1> 
  8731                              <1> 			;;that above setup the dummy thread which for some reason does not run
  8732                              <1> 			;;this below will setup the threads found in thrdtst
  8733                              <1> 
  8734                              <1> testthreads:
  8735 00007872 BE[AD730000]        <1> 	mov esi, thrdtst
  8736 00007877 BC[CAC80100]        <1> 	mov esp, stack1
  8737 0000787C BF[C2A00100]        <1> 	mov edi, threadlist
  8738 00007881 81C704000000        <1> 	add edi, 4
  8739                              <1> nxtthreadld:
  8740 00007887 60                  <1> 	pushad
  8741 00007888 8B06                <1> 	mov eax, [esi]
  8742 0000788A 89442420            <1> 	mov [esp + 32], eax
  8743 0000788E 89542424            <1> 	mov [esp + 36], edx
  8744 00007892 894C2428            <1> 	mov [esp + 40], ecx
  8745 00007896 8927                <1> 	mov [edi], esp
  8746 00007898 81C400040000        <1> 	add esp, 1024
  8747 0000789E 81C604000000        <1> 	add esi, 4
  8748 000078A4 81C704000000        <1> 	add edi, 4
  8749 000078AA 81FF[CAC00100]      <1> 	cmp edi, threadlistend
  8750 000078B0 0F831A000000        <1> 	jae near nomorethreadspace
  8751 000078B6 81FC[CAC81100]      <1> 	cmp esp, bssend
  8752 000078BC 0F8347000000        <1> 	jae near nomorestackspace
  8753 000078C2 81FE[AD770000]      <1> 	cmp esi, thrdtstend
  8754 000078C8 72BD                <1> 	jb nxtthreadld
  8755 000078CA 89DC                <1> 	mov esp, ebx
  8756 000078CC 61                  <1> 	popad
  8757 000078CD FB                  <1> 	sti
  8758 000078CE EBFE                <1> 	jmp $	;;wait for the irq to hook
  8759                              <1> 	
  8760                              <1> nomorethreadspace:
  8761 000078D0 BE[E6780000]        <1> 	mov esi, nmts
  8762 000078D5 E889AAFFFF          <1> 	call print
  8763 000078DA C605[A8730000]00    <1> 	mov byte [threadson], 0
  8764 000078E1 E98FB5FFFF          <1> 	jmp nwcmd
  8765 000078E6 74656820636F6C6F6E- <1> nmts	db "teh colonel no can haz moar treds",10,0
  8766 000078EF 656C206E6F2063616E- <1>
  8767 000078F8 2068617A206D6F6172- <1>
  8768 00007901 2074726564730A00    <1>
  8769                              <1> 
  8770                              <1> nomorestackspace:
  8771 00007909 BE[18790000]        <1> 	mov esi, nmss
  8772 0000790E E850AAFFFF          <1> 	call print
  8773 00007913 E96BFAFFFF          <1> 	jmp nwcmdst
  8774 00007918 74656820636F6C6F6E- <1> nmss	db "teh colonel no can haz moar staqz",10,0
  8775 00007921 656C206E6F2063616E- <1>
  8776 0000792A 2068617A206D6F6172- <1>
  8777 00007933 20737461717A0A00    <1>
  8778                              <1> 	
  8779                              <1> threadswitch:
  8780 0000793B FA                  <1> 	cli
  8781 0000793C 60                  <1> 	pushad
  8782 0000793D BF[C2A00100]        <1> 	mov edi, threadlist
  8783 00007942 A1[97790000]        <1> 	mov eax, [currentthread]
  8784 00007947 40                  <1> 	inc eax
  8785 00007948 A3[97790000]        <1> 	mov [currentthread], eax
  8786 0000794D 6648                <1> 	dec ax
  8787 0000794F C1E002              <1> 	shl eax, 2
  8788 00007952 01C7                <1> 	add edi, eax
  8789 00007954 8927                <1> 	mov [edi], esp
  8790 00007956 81C704000000        <1> 	add edi, 4
  8791 0000795C 81FF[CAC00100]      <1> 	cmp edi, threadlistend
  8792 00007962 0F830D000000        <1> 	jae near nookespthread
  8793 00007968 8B07                <1> 	mov eax, [edi]
  8794 0000796A 3D00000000          <1> 	cmp eax, 0
  8795 0000796F 0F8519000000        <1> 	jne near okespthread
  8796                              <1> nookespthread:
  8797 00007975 BF[C2A00100]        <1> 	mov edi, threadlist
  8798 0000797A 31C0                <1> 	xor eax, eax
  8799 0000797C A3[97790000]        <1> 	mov [currentthread], eax
  8800 00007981 8B07                <1> 	mov eax, [edi]
  8801 00007983 3D00000000          <1> 	cmp eax, 0
  8802 00007988 0F84F5F9FFFF        <1> 	je near nwcmdst
  8803                              <1> okespthread:
  8804 0000798E 89C4                <1> 	mov esp, eax
  8805 00007990 B020                <1> 	mov al, 0x20
  8806 00007992 E620                <1> 	out 0x20, al
  8807 00007994 61                  <1> 	popad
  8808 00007995 FB                  <1> 	sti
  8809 00007996 C3                  <1> 	ret
  8810                              <1> 	
  8811 00007997 00000000            <1> currentthread dd 0
  8812                                      %include 'source/data.asm'
  8813 0000799B 6578697400          <1> 	exitmsg db	"exit",0
  8814 000079A0 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
  8815 000079A8 50726F6772616D2022- <1> 	notfound1 db "Program ",34,0
  8816 000079B1 00                  <1>
  8817 000079B2 22206E6F7420666F75- <1> 	notfound2 db  34," not found.",10,0
  8818 000079BB 6E642E0A00          <1>
  8819 000079C0 757365726E616D653A- <1> 	userask db "username:",0
  8820 000079C9 00                  <1>
  8821 000079CA 70617373776F72643A- <1> 	pwdask	db	"password:",0
  8822 000079D3 00                  <1>
  8823 000079D4 40                  <1> 	computer db "@"
  8824 000079D5 536F6C6C65724F5300  <1> 	computername	db	"SollerOS",0
  8825 000079DE 20                  <1> 	location db " "
  8826 000079DF 2F00                <1> 	locationname db "/",0
  8827 000079E1 5D242000            <1> 	endprompt db "]$ ",0
  8828 000079E5 0D                  <1> 	crlf 	db  13
  8829 000079E6 0A00                <1> 	line	db	10,0
  8830                              <1> 	userlst:
  8831 000079E8 726F6F7400          <1> 			db "root",0
  8832 000079ED 617765736F6D65706F- <1> 			db "awesomepower",0
  8833 000079F6 77657200            <1>
  8834 000079FA 7573657200          <1> 			db "user",0
  8835 000079FF 70617373776F726400  <1> 			db "password",0
  8836 00007A08 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
  8837 00007A0A 00                  <1> 			db 0
  8838                              <1> 	userlstend:
  8839                              <1> 	
  8840 00007A0A <incbin>            <1> fonts:	incbin 'source/precompiled/fonts.pak'
  8841                              <1> fontend:
  8842                              <1> 
  8843                              <1> mcursor:
  8844 00008A0B 01                  <1> 	db	00000001b
  8845 00008A0C 81                  <1> 	db	10000001b
  8846 00008A0D C1                  <1> 	db	11000001b
  8847 00008A0E E1                  <1> 	db	11100001b
  8848 00008A0F F1                  <1> 	db	11110001b
  8849 00008A10 F9                  <1> 	db	11111001b
  8850 00008A11 FD                  <1> 	db	11111101b
  8851 00008A12 FF                  <1> 	db	11111111b
  8852 00008A13 F9                  <1> 	db	11111001b
  8853 00008A14 B9                  <1> 	db	10111001b
  8854 00008A15 39                  <1> 	db	00111001b
  8855 00008A16 1C                  <1> 	db	00011100b
  8856 00008A17 1C                  <1> 	db	00011100b
  8857 00008A18 0E                  <1> 	db	00001110b
  8858 00008A19 0E                  <1> 	db	00001110b
  8859 00008A1A 0C                  <1> 	db	00001100b
  8860                              <1> 	
  8861                              <1> VBEMODEBLOCK:
  8862 00008A1B 00<rept>            <1> vbesignature 		times  4 db 0 	;VBE Signature
  8863 00008A1F 00<rept>            <1> vbeversion  		times  2 db 0	;VBE Version
  8864 00008A21 00<rept>            <1> oemstringptr  		times  4 db 0	;Pointer to OEM String
  8865 00008A25 00<rept>            <1> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  8866 00008A29 00<rept>            <1> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  8867 00008A2D 00<rept>            <1> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  8868 00008A2F 00<rept>            <1> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  8869 00008A31 00<rept>            <1> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  8870 00008A35 00<rept>            <1> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  8871 00008A39 00<rept>            <1> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  8872 00008A3D 00<rept>            <1> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  8873 00008B1B 00<rept>            <1> oemdata 			times  256 db 0	;Data Area for OEM Strings
  8874                              <1> 
  8875                              <1> VBEMODEINFOBLOCK:
  8876                              <1> ;Mandatory information for all VBE revision
  8877 00008C1B 00<rept>            <1> modeattributes   	times  2 db 0	;Mode attributes
  8878 00008C1D 00                  <1> winaattributes   	times  1 db 0	;Window A attributes
  8879 00008C1E 00                  <1> winbattributes   	times  1 db 0	;Window B attributes
  8880 00008C1F 00<rept>            <1> wingranularity   	times  2 db 0	;Window granularity
  8881 00008C21 00<rept>            <1> winsize          	times  2 db 0	;Window size
  8882 00008C23 00<rept>            <1> winasegment      	times  2 db 0	;Window A start segment
  8883 00008C25 00<rept>            <1> winbsegment      	times  2 db 0	;Window B start segment
  8884 00008C27 00<rept>            <1> winfuncptr       	times  4 db 0	;pointer to window function
  8885 00008C2B 00<rept>            <1> bytesperscanline 	times  2 db 0	;Bytes per scan line
  8886                              <1> 
  8887                              <1> ;Mandatory information for VBE 1.2 and above
  8888 00008C2D 00<rept>            <1> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  8889 00008C2F 00<rept>            <1> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  8890 00008C31 00                  <1> xcharsize       	times  1 db 0	;Character cell width in pixel
  8891 00008C32 00                  <1> ycharsize       	times  1 db 0	;Character cell height in pixel
  8892 00008C33 00                  <1> numberofplanes  	times  1 db 0	;Number of memory planes
  8893 00008C34 00                  <1> bitsperpixel    	times  1 db 0	;Bits per pixel
  8894 00008C35 00                  <1> numberofbanks   	times  1 db 0	;Number of banks
  8895 00008C36 00                  <1> memorymodel     	times  1 db 0	;Memory model type
  8896 00008C37 00                  <1> banksize        	times  1 db 0	;Bank size in KB
  8897 00008C38 00                  <1> numberofimagepages	times  1 db 0	;Number of images
  8898 00008C39 00                  <1> reserved1       	times  1 db 0	;Reserved for page function
  8899                              <1> 
  8900                              <1> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  8901 00008C3A 00                  <1> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  8902 00008C3B 00                  <1> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  8903 00008C3C 00                  <1> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  8904 00008C3D 00                  <1> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  8905 00008C3E 00                  <1> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  8906 00008C3F 00                  <1> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  8907 00008C40 00                  <1> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  8908 00008C41 00                  <1> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  8909 00008C42 00                  <1> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  8910                              <1> 
  8911                              <1> ;Mandatory information for VBE 2.0 and above
  8912 00008C43 00<rept>            <1> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  8913 00008C47 00<rept>            <1> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  8914 00008C4B 00<rept>            <1> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  8915 00008C4D 00<rept>            <1> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  8916                              <1> 
  8917 00008D1B 0000                <1> resolutionx2 dw 0	;this is not part of the VBE but is necessary GUI info
  8918 00008D1D 00                  <1> guion db 0
  8919                              <1> VBEEND:
  8920                              <1> osend:	;this is the end of the operating system's space on disk
  8921                                      %include 'fileindex.asm'
  8922                              <1> diskfileindex:
  8923 00008D1E 617267746573742E65- <1> db "argtest.elf",0
  8924 00008D27 6C6600              <1>
  8925 00008D2A 48000000            <1> dd (f0-$$)/512
  8926 00008D2E 06010000            <1> dd (f1-f0)/512
  8927 00008D32 626300              <1> db "bc",0
  8928 00008D35 4E010000            <1> dd (f1-$$)/512
  8929 00008D39 D4020000            <1> dd (f2-f1)/512
  8930 00008D3D 626F6F7400          <1> db "boot",0
  8931 00008D42 22040000            <1> dd (f2-$$)/512
  8932 00008D46 01000000            <1> dd (f3-f2)/512
  8933 00008D4A 63686172746573742E- <1> db "chartest.elf",0
  8934 00008D53 656C6600            <1>
  8935 00008D57 23040000            <1> dd (f3-$$)/512
  8936 00008D5B 26010000            <1> dd (f4-f3)/512
  8937 00008D5F 646F73746573742E63- <1> db "dostest.com",0
  8938 00008D68 6F6D00              <1>
  8939 00008D6B 49050000            <1> dd (f4-$$)/512
  8940 00008D6F 01000000            <1> dd (f5-f4)/512
  8941 00008D73 66696E616C636F756E- <1> db "finalcount.snd",0
  8942 00008D7C 742E736E6400        <1>
  8943 00008D82 4A050000            <1> dd (f5-$$)/512
  8944 00008D86 01000000            <1> dd (f6-f5)/512
  8945 00008D8A 68656C6C6F776F726C- <1> db "helloworld.elf",0
  8946 00008D93 642E656C6600        <1>
  8947 00008D99 4B050000            <1> dd (f6-$$)/512
  8948 00008D9D D6010000            <1> dd (f7-f6)/512
  8949 00008DA1 696E7400            <1> db "int",0
  8950 00008DA5 21070000            <1> dd (f7-$$)/512
  8951 00008DA9 01000000            <1> dd (f8-f7)/512
  8952 00008DAD 6C6F7374776F6F6473- <1> db "lostwoods.snd",0
  8953 00008DB6 2E736E6400          <1>
  8954 00008DBB 22070000            <1> dd (f8-$$)/512
  8955 00008DBF 01000000            <1> dd (f9-f8)/512
  8956 00008DC3 6D6172696F2E736E64- <1> db "mario.snd",0
  8957 00008DCC 00                  <1>
  8958 00008DCD 23070000            <1> dd (f9-$$)/512
  8959 00008DD1 01000000            <1> dd (f10-f9)/512
  8960 00008DD5 736F6C6C65726F732E- <1> db "solleros.bmp",0
  8961 00008DDE 626D7000            <1>
  8962 00008DE2 24070000            <1> dd (f10-$$)/512
  8963 00008DE6 B0020000            <1> dd (f11-f10)/512
  8964 00008DEA 736F6C6C65726F732E- <1> db "solleros.txt",0
  8965 00008DF3 74787400            <1>
  8966 00008DF7 D4090000            <1> dd (f11-$$)/512
  8967 00008DFB 01000000            <1> dd (f12-f11)/512
  8968 00008DFF 736F6E676F74696D65- <1> db "songotime.snd",0
  8969 00008E08 2E736E6400          <1>
  8970 00008E0D D5090000            <1> dd (f12-$$)/512
  8971 00008E11 01000000            <1> dd (f13-f12)/512
  8972 00008E15 737464696F74657374- <1> db "stdiotest.elf",0
  8973 00008E1E 2E656C6600          <1>
  8974 00008E23 D6090000            <1> dd (f13-$$)/512
  8975 00008E27 27010000            <1> dd (f14-f13)/512
  8976 00008E2B 74656C7900          <1> db "tely",0
  8977 00008E30 FD0A0000            <1> dd (f14-$$)/512
  8978 00008E34 01000000            <1> dd (f15-f14)/512
  8979 00008E38 74696D65746573742E- <1> db "timetest.elf",0
  8980 00008E41 656C6600            <1>
  8981 00008E45 FE0A0000            <1> dd (f15-$$)/512
  8982 00008E49 06010000            <1> dd (f16-f15)/512
  8983 00008E4D 7475746F7269616C2E- <1> db "tutorial.sh",0
  8984 00008E56 736800              <1>
  8985 00008E59 040C0000            <1> dd (f16-$$)/512
  8986 00008E5D 03000000            <1> dd (f17-f16)/512
  8987 00008E61 756E667300          <1> db "unfs",0
  8988 00008E66 070C0000            <1> dd (f17-$$)/512
  8989 00008E6A 02000000            <1> dd (f18-f17)/512
  8990 00008E6E 766963746F72792E77- <1> db "victory.wav",0
  8991 00008E77 617600              <1>
  8992 00008E7A 090C0000            <1> dd (f18-$$)/512
  8993 00008E7E 16000000            <1> dd (f19-f18)/512
  8994 00008E82 5F696D672E62696E00  <1> db "_img.bin",0
  8995 00008E8B 1F0C0000            <1> dd (f19-$$)/512
  8996 00008E8F D7020000            <1> dd (f20-f19)/512
  8997                              <1> enddiskfileindex:
  8998                              <1> 
  8999                                      %include 'source/bss.asm'
  9000                              <1> bssstart: equ $
  9001                              <1> initialstack equ bssstart
  9002                              <1> stackend equ initialstack + 8192
  9003                              <1> graphicstable equ stackend;add some room for stack underflows
  9004                              <1> 	;w type, dw datalocation, w locationx, w locationy, w selected, dw code
  9005                              <1> 	graphicstableend equ graphicstable + 200h
  9006                              <1> mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
  9007                              <1> mcolorend equ mousecolorbuf + 256
  9008                              <1> fileindex: equ mcolorend
  9009                              <1> fileindexend: equ fileindex + 1024
  9010                              <1> uid equ fileindexend
  9011                              <1> ranboot equ uid + 4
  9012                              <1> IFON equ ranboot + 1
  9013                              <1> IFTRUE equ IFON + 1
  9014                              <1> BATCHPOS equ IFTRUE + 100
  9015                              <1> BATCHISON equ BATCHPOS + 4
  9016                              <1> LOOPON equ BATCHISON + 1
  9017                              <1> LOOPPOS	equ LOOPON + 1
  9018                              <1> variables: equ LOOPPOS + 4
  9019                              <1> varend: equ variables + 4096
  9020                              <1> buftxt2: equ varend
  9021                              <1> buftxt: equ buftxt2 + 1024 + 10
  9022                              <1> buftxtend: equ buftxt + 1024
  9023                              <1> buf2: equ buftxtend
  9024                              <1> numbuf: equ buf2 + 20
  9025                              <1> videobuf equ numbuf + 1	;1280x1024pixels in characters
  9026                              <1> videobufend	equ videobuf + 160*64*2
  9027                              <1> videobuf2 equ videobufend + 160*2
  9028                              <1> videobuf2end equ videobuf2 + 160*64*2
  9029                              <1> lastcommandpos: equ videobuf2end + 160*2
  9030                              <1> currentcommandpos: equ lastcommandpos + 4
  9031                              <1> commandbuf: equ currentcommandpos + 4
  9032                              <1> commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
  9033                              <1> rbuffstart: equ commandbufend ;for use with networking
  9034                              <1> threadlist: equ rbuffstart + 8212 ;this buffer will hold the stack locations of all of the threads, up to 2048
  9035                              <1> threadlistend: equ threadlist + 2050*4
  9036                              <1> stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
  9037                              <1> stackdummy: equ stacks + 1024
  9038                              <1> stack1: equ stackdummy + 1024  ;woah, thats a lot of space for stacks
  9039                              <1> bssend equ stack1 + 1024*1024
  9040                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
  9041                                      %include 'files.asm'
  9042 00008E93 00<rept>            <1> align 512,db 0
  9043                              <1> f0:
  9044 00008E93 <incbin>            <1> incbin "included/argtest.elf"
  9045 00029AF3 00<rept>            <1> align 512,db 0
  9046                              <1> f1:
  9047 00029AF3 <incbin>            <1> incbin "included/bc"
  9048 000843E9 00<rept>            <1> align 512,db 0
  9049                              <1> f2:
  9050 000843E9 <incbin>            <1> incbin "included/boot"
  9051 00084407 00<rept>            <1> align 512,db 0
  9052                              <1> f3:
  9053 00084407 <incbin>            <1> incbin "included/chartest.elf"
  9054 000A90E0 00<rept>            <1> align 512,db 0
  9055                              <1> f4:
  9056 000A90E0 <incbin>            <1> incbin "included/dostest.com"
  9057 000A932B 00<rept>            <1> align 512,db 0
  9058                              <1> f5:
  9059 000A932B <incbin>            <1> incbin "included/finalcount.snd"
  9060 000A9502 00<rept>            <1> align 512,db 0
  9061                              <1> f6:
  9062 000A9502 <incbin>            <1> incbin "included/helloworld.elf"
  9063 000E41E4 00<rept>            <1> align 512,db 0
  9064                              <1> f7:
  9065 000E41E4 <incbin>            <1> incbin "included/int"
  9066 000E437C 00<rept>            <1> align 512,db 0
  9067                              <1> f8:
  9068 000E437C <incbin>            <1> incbin "included/lostwoods.snd"
  9069 000E4456 00<rept>            <1> align 512,db 0
  9070                              <1> f9:
  9071 000E4456 <incbin>            <1> incbin "included/mario.snd"
  9072 000E463A 00<rept>            <1> align 512,db 0
  9073                              <1> f10:
  9074 000E463A <incbin>            <1> incbin "included/solleros.bmp"
  9075 0013A7E6 00<rept>            <1> align 512,db 0
  9076                              <1> f11:
  9077 0013A7E6 <incbin>            <1> incbin "included/solleros.txt"
  9078 0013A976 00<rept>            <1> align 512,db 0
  9079                              <1> f12:
  9080 0013A976 <incbin>            <1> incbin "included/songotime.snd"
  9081 0013AA4A 00<rept>            <1> align 512,db 0
  9082                              <1> f13:
  9083 0013AA4A <incbin>            <1> incbin "included/stdiotest.elf"
  9084 0015F844 00<rept>            <1> align 512,db 0
  9085                              <1> f14:
  9086 0015F844 <incbin>            <1> incbin "included/tely"
  9087 0015FB9F 00<rept>            <1> align 512,db 0
  9088                              <1> f15:
  9089 0015FB9F <incbin>            <1> incbin "included/timetest.elf"
  9090 0018070A 00<rept>            <1> align 512,db 0
  9091                              <1> f16:
  9092 0018070A <incbin>            <1> incbin "included/tutorial.sh"
  9093 00180D45 00<rept>            <1> align 512,db 0
  9094                              <1> f17:
  9095 00180D45 <incbin>            <1> incbin "included/unfs"
  9096                              <1> align 512,db 0
  9097                              <1> f18:
  9098 00180D45 <incbin>            <1> incbin "included/victory.wav"
  9099 00183D48 00<rept>            <1> align 512,db 0
  9100                              <1> f19:
  9101 00183D48 <incbin>            <1> incbin "included/_img.bin"
  9102                              <1> align 512,db 0
  9103                              <1> f20:
