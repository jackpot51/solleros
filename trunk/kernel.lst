     1                                  [BITS 16]
     2                                      %include 'source/menu.asm'
     3                              <1>     ; MENU.ASM
     4                              <1> %include 'source/signature.asm'
     5                              <2> signature:	;used by bootloader to find SollerOS, is totally awesome
     6 00000000 EDA55ED1            <2> dd 0xD15EA5ED	;diseased
     7 00000004 15D000B1            <2> dd 0xB100D015	;blood is
     8 00000008 EDFED2BA            <2> dd 0xBAD2FEED	;bad to feed
     9 0000000C 95D0112A            <2> dd 0x2A11D095	;to all dogs
    10 00000010 52A71CA1            <2> dd 0xA11CA752	;all cats too.
    11 00000014 0F751015            <2> dd 0x1510750F   ;is lots of
    12 00000018 75CAADDE            <2> dd 0xDEADCA75   ;dead cats
    13 0000001C 95D0ADDE            <2> dd 0xDEADD095   ;dead dogs
    14 00000020 18000000            <2> dd 24			;version
    15 00000024 534F4C4C45524F53    <2> db "SOLLEROS"
    16                              <2> signatureend:
    17                              <1> menustart:	
    18 0000002C 8CC8                <1> 	mov ax, cs
    19 0000002E 8ED8                <1> 	mov ds, ax
    20 00000030 8EC0                <1> 	mov es, ax
    21 00000032 8ED0                <1> 	mov ss, ax
    22 00000034 880E[8101]          <1> 	mov [DriveNumber], cl
    23 00000038 668916[8201]        <1> 	mov [lbaad], edx
    24 0000003D B800A0              <1> 	mov ax, 0xA000
    25 00000040 8EE8                <1> 	mov gs, ax
    26 00000042 B81200              <1> 	mov ax, 12h
    27 00000045 31DB                <1> 	xor bx, bx
    28 00000047 CD10                <1> 	int 10h
    29                              <1> guiload:
    30 00000049 BE[8F02]            <1> 	mov si, bootmsg
    31 0000004C E84C01              <1> 	call printrm
    32 0000004F 31C0                <1> 	xor ax, ax
    33 00000051 CD16                <1> 	int 16h
    34 00000053 3C79                <1> 	cmp al, "y"
    35 00000055 0F85F600            <1> 	jne near guiload2
    36                              <1> guiloadagain:
    37 00000059 B8004F              <1> 	mov ax, 04F00h
    38 0000005C BF[9882]            <1> 	mov di, VBEMODEBLOCK
    39 0000005F CD10                <1> 	int 10h
    40 00000061 BE[BA82]            <1> 	mov si, reserved
    41 00000064 81EE0200            <1> 	sub si, 2
    42                              <1> findvideomodes:
    43 00000068 81C60200            <1> 	add si, 2
    44 0000006C 8B0C                <1> 	mov cx, [si]
    45 0000006E 81F9FFFF            <1> 	cmp cx, 0xFFFF
    46 00000072 0F840A00            <1> 	je near nextvmode
    47 00000076 81FE[9883]          <1> 	cmp si, oemdata
    48 0000007A 0F83D100            <1> 	jae near guiload2	;;kill if no valid list is found
    49 0000007E EBE8                <1> 	jmp findvideomodes 	
    50                              <1> ;;debug,shows vmodes available
    51                              <1> nextvmode:
    52 00000080 81EE0200            <1> 	sub si, 2
    53 00000084 81FE[BA82]          <1> 	cmp si, reserved
    54 00000088 0F82CDFF            <1> 	jb near guiloadagain
    55 0000008C 8B0C                <1> 	mov cx, [si]
    56 0000008E 81F9FFFF            <1> 	cmp cx, 0xFFFF
    57 00000092 0F84EAFF            <1> 	je near nextvmode
    58 00000096 81C10040            <1> 	add cx, 0x4000 		;;Linear Frame Buffer
    59 0000009A B8014F              <1> 	mov ax, 04F01h
    60 0000009D BF[9884]            <1> 	mov di, VBEMODEINFOBLOCK
    61 000000A0 890E[8601]          <1> 	mov [vesamode], cx
    62 000000A4 CD10                <1> 	int 10h
    63 000000A6 A0[B184]            <1> 	mov al, [bitsperpixel]
    64 000000A9 3C10                <1> 	cmp al, 16
    65 000000AB 75D3                <1> 	jne nextvmode
    66 000000AD 8936[8801]          <1> 	mov [videomodecache], si
    67 000000B1 80FC00              <1> 	cmp ah, 0
    68 000000B4 0F842200            <1> 	je near setvesamode
    69 000000B8 EBC6                <1> 	jmp nextvmode
    70 000000BA 0A0D49732074686973- <1> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
    71 000000C3 20766964656F206D6F- <1>
    72 000000CC 6465204F4B3F28792F- <1>
    73 000000D5 6E290D0A00          <1>
    74                              <1> setvesamode:
    75 000000DA 8B0E[AA84]          <1> 	mov cx, [xresolution]
    76 000000DE E8D200              <1> 	call decshow
    77 000000E1 B078                <1> 	mov al, "x"
    78 000000E3 E83A01              <1> 	call char
    79 000000E6 8B0E[AC84]          <1> 	mov cx, [yresolution]
    80 000000EA E8C600              <1> 	call decshow
    81 000000ED B040                <1> 	mov al, "@"
    82 000000EF E82E01              <1> 	call char
    83 000000F2 8A0E[B184]          <1> 	mov cl, [bitsperpixel]
    84 000000F6 E8BA00              <1> 	call decshow
    85 000000F9 BE[BA00]            <1> 	mov si, isthisvideook
    86 000000FC E89C00              <1> 	call printrm
    87 000000FF 31C0                <1> 	xor ax, ax
    88 00000101 CD16                <1> 	int 16h
    89 00000103 8B36[8801]          <1> 	mov si, [videomodecache]
    90 00000107 3C79                <1> 	cmp al, "y"
    91 00000109 0F8573FF            <1> 	jne near nextvmode
    92 0000010D 8B16[AA84]          <1> 	mov dx, [xresolution]
    93 00000111 8B0E[AC84]          <1> 	mov cx, [yresolution]
    94 00000115 8916[625D]          <1> 	mov [resolutionx], dx
    95 00000119 890E[605D]          <1> 	mov [resolutiony], cx
    96 0000011D 01D2                <1> 	add dx, dx
    97 0000011F 8916[645D]          <1> 	mov [resolutionx2], dx
    98 00000123 31D2                <1> 	xor dx, dx
    99 00000125 31C9                <1> 	xor cx, cx
   100 00000127 B8024F              <1> 	mov ax, 04F02h
   101 0000012A 8B1E[8601]          <1> 	mov bx, [vesamode]
   102 0000012E CD10                <1> 	int 10h		;;enter VESA mode
   103 00000130 C606[8A01]00        <1> 	mov byte [guinodo], 0
   104 00000135 C606[E14E]01        <1> 	mov byte [guion], 1
   105 0000013A 6631C0              <1> 	xor eax, eax
   106 0000013D 6631DB              <1> 	xor ebx, ebx
   107 00000140 6631C9              <1> 	xor ecx, ecx
   108 00000143 6631D2              <1> 	xor edx, edx
   109 00000146 6631F6              <1> 	xor esi, esi
   110 00000149 6631FF              <1> 	xor edi, edi	;;reset registers
   111 0000014C E95A01              <1> 	jmp pmode
   112                              <1> guiload2:
   113 0000014F B9E001              <1> 	mov cx, 480
   114 00000152 BA8002              <1> 	mov dx, 640
   115 00000155 8916[625D]          <1> 	mov [resolutionx], dx
   116 00000159 01D2                <1> 	add dx, dx
   117 0000015B 8916[645D]          <1> 	mov [resolutionx2], dx
   118 0000015F 890E[605D]          <1> 	mov [resolutiony], cx
   119 00000163 B81200              <1> 	mov ax, 12h
   120 00000166 31DB                <1> 	xor bx, bx
   121 00000168 CD10                <1> 	int 10h
   122 0000016A C606[8A01]01        <1> 	mov byte [guinodo], 1
   123 0000016F 6631DB              <1> 	xor ebx, ebx
   124 00000172 6631C9              <1> 	xor ecx, ecx
   125 00000175 6631D2              <1> 	xor edx, edx
   126 00000178 6631F6              <1> 	xor esi, esi
   127 0000017B 6631FF              <1> 	xor edi, edi
   128 0000017E E92801              <1> 	jmp pmode
   129                              <1> 
   130 00000181 00                  <1> DriveNumber db 0
   131 00000182 00000000            <1> lbaad dd 0
   132                              <1> 	
   133 00000186 0000                <1> vesamode dw 0
   134 00000188 0000                <1> videomodecache dw 0
   135                              <1> 
   136 0000018A 00                  <1> guinodo db 0
   137                              <1> tests:
   138 0000018B BB0700              <1> 	mov bx, 7
   139 0000018E B40E                <1> 	mov ah, 0Eh
   140 00000190 FEC0                <1> 	inc al
   141 00000192 3C02                <1> 	cmp al, 2
   142 00000194 7501                <1> 	jne cnttest
   143 00000196 C3                  <1> 	ret
   144                              <1> cnttest:
   145 00000197 CD10                <1> 	int 10h
   146 00000199 EBF0                <1> 	jmp tests
   147                              <1> 
   148                              <1>     printrm:			; 'si' comes in with string address
   149 0000019B BB0700              <1> 	    mov bx,07		; write to display
   150 0000019E B40E                <1> 	    mov ah,0Eh		; screen function
   151 000001A0 8A04                <1>     prs2:    mov al,[si]         ; get next character
   152 000001A2 3C00                <1> 	    cmp al,0		; look for terminator 
   153 000001A4 7405                <1>             je finpr2		; zero byte at end of string
   154 000001A6 CD10                <1> 	    int 10h		; write character to screen.    
   155 000001A8 46                  <1>      	    inc si	     	; move to next character
   156 000001A9 EBF5                <1> 	    jmp prs2		; loop
   157 000001AB C3                  <1>     finpr2: ret
   158                              <1> 
   159 000001AC 0000000000          <1> dcnm db 0,0,0,0,0
   160 000001B1 0000                <1> dcnmend db 0,0
   161                              <1> 
   162                              <1> 
   163                              <1> decshow:
   164 000001B3 BE[AC01]            <1> 	mov si, dcnm
   165                              <1> decclear:
   166 000001B6 B030                <1> 	mov al, "0"
   167 000001B8 8804                <1> 	mov [si], al
   168 000001BA 46                  <1> 	inc si
   169 000001BB 81FE[B101]          <1> 	cmp si, dcnmend
   170 000001BF 76F5                <1> 	jbe decclear
   171 000001C1 4E                  <1> 	dec si
   172 000001C2 E81500              <1> 	call convertrm
   173 000001C5 BE[AC01]            <1> 	mov si, dcnm
   174                              <1> dectst:
   175 000001C8 8A04                <1> 	mov al, [si]
   176 000001CA 46                  <1> 	inc si
   177 000001CB 81FE[B101]          <1> 	cmp si, dcnmend
   178 000001CF 7704                <1> 	ja dectstend
   179 000001D1 3C30                <1> 	cmp al, "0"
   180 000001D3 76F3                <1> 	jbe dectst
   181                              <1> dectstend:
   182 000001D5 4E                  <1> 	dec si
   183 000001D6 E8C2FF              <1> 	call printrm
   184 000001D9 C3                  <1> 	ret
   185                              <1> 	
   186                              <1> 	
   187                              <1> convertrm:
   188 000001DA 4E                  <1> 	dec si
   189 000001DB 89F3                <1> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
   190                              <1> cnvrtrm:
   191 000001DD 89DE                <1> 	mov si, bx
   192 000001DF 81EE0300            <1> 	sub si, 3
   193 000001E3 46                  <1> ten3rm:	inc si
   194 000001E4 81F9E803            <1> 	cmp cx, 1000
   195 000001E8 7208                <1> 	jb ten2rm
   196 000001EA 81E9E803            <1> 	sub cx, 1000
   197 000001EE FE04                <1> 	inc byte [si]
   198 000001F0 EBEB                <1> 	jmp cnvrtrm
   199 000001F2 46                  <1> ten2rm:	inc si
   200 000001F3 81F96400            <1> 	cmp cx, 100
   201 000001F7 7208                <1> 	jb ten1rm
   202 000001F9 81E96400            <1> 	sub cx, 100
   203 000001FD FE04                <1> 	inc byte [si]
   204 000001FF EBDC                <1> 	jmp cnvrtrm
   205 00000201 46                  <1> ten1rm:	inc si
   206 00000202 81F90A00            <1> 	cmp cx, 10
   207 00000206 7208                <1> 	jb ten0rm
   208 00000208 81E90A00            <1> 	sub cx, 10
   209 0000020C FE04                <1> 	inc byte [si]
   210 0000020E EBCD                <1> 	jmp cnvrtrm
   211 00000210 46                  <1> ten0rm:	inc si
   212 00000211 81F90100            <1> 	cmp cx, 1
   213 00000215 7208                <1> 	jb tendnrm
   214 00000217 81E90100            <1> 	sub cx, 1
   215 0000021B FE04                <1> 	inc byte [si]
   216 0000021D EBBE                <1> 	jmp cnvrtrm
   217                              <1> tendnrm:
   218 0000021F C3                  <1> 	ret
   219                              <1> 
   220                              <1> 
   221                              <1> 
   222                              <1> 
   223                              <1>     char: 		    ;char must be in al
   224 00000220 BB0700              <1>        mov bx, 07
   225 00000223 B40E                <1> 	   mov ah, 0Eh
   226 00000225 CD10                <1> 	   int 10h
   227 00000227 C3                  <1> 	   ret
   228                              <1> 
   229                              <1> 		shutdown:
   230 00000228 0F20C0              <1> 				mov eax, cr0
   231 0000022B 24FE                <1> 				and al,0xFE     ; back to realmode
   232 0000022D 0F22C0              <1> 				mov  cr0, eax   ; by toggling bit again
   233 00000230 FB                  <1> 				sti
   234 00000231 B80053              <1> 			MOV AX, 5300h	; Shuts down APM-Machines.
   235 00000234 31DB                <1> 			XOR BX, BX	; Newer machines automatically
   236 00000236 CD15                <1> 			INT 15h		; shut down
   237 00000238 B80453              <1> 			MOV AX, 5304h
   238 0000023B 31DB                <1> 			XOR BX, BX
   239 0000023D CD15                <1> 			INT 15h		; Interrupt 15h originally was
   240 0000023F B80153              <1> 			MOV AX, 5301h	; used for Cartridges (cassettes)
   241 00000242 31DB                <1> 			XOR BX, BX	; but is still in use for
   242 00000244 CD15                <1> 			INT 15h		; diverse things
   243 00000246 B80753              <1> 			MOV AX, 5307h
   244 00000249 BB0100              <1> 			MOV BX, 1
   245 0000024C B90300              <1> 			MOV CX, 3
   246 0000024F CD15                <1> 			INT 15h
   247 00000251 CF                  <1> 			IRET
   248                              <1> 
   249                              <1> 	coldboot:
   250 00000252 0F20C0              <1> 			   mov eax, cr0
   251 00000255 24FE                <1> 			   and al,0xFE     ; back to realmode
   252 00000257 0F22C0              <1> 			   mov  cr0, eax   ; by toggling bit again
   253 0000025A FB                  <1> 			   sti
   254 0000025B B84000              <1> 			MOV AX, 0040h
   255 0000025E 8EC0                <1> 			MOV ES, AX
   256 00000260 26C70672000000      <1> 			MOV WORD [ES:00072h], 0h
   257 00000267 EA0000FFFF          <1> 			JMP 0FFFFh:0000h
   258 0000026C CF                  <1> 			IRET
   259                              <1> 
   260                              <1> 		warmboot:
   261 0000026D E81200              <1> 			call realmode
   262 00000270 B84000              <1> 			MOV AX, 0040h
   263 00000273 8EC0                <1> 			MOV ES, AX
   264 00000275 26C70672003412      <1> 			MOV WORD [ES:00072h], 01234h
   265 0000027C EA0000FFFF          <1> 			JMP 0FFFFh:0000h
   266 00000281 CF                  <1> 			IRET
   267                              <1> 
   268                              <1> 
   269                              <1> realmode:
   270 00000282 0F20C0              <1>    mov eax, cr0
   271 00000285 24FE                <1>    and al,0xFE     ; back to realmode
   272 00000287 0F22C0              <1>    mov  cr0, eax   ; by toggling bit again
   273 0000028A FB                  <1>    sti
   274 0000028B 6631C0              <1>    xor eax, eax
   275 0000028E C3                  <1>    ret
   276                              <1>    
   277 0000028F 426F6F7420696E746F- <1> bootmsg:	db "Boot into the GUI?(y/n)",10,13,0
   278 00000298 20746865204755493F- <1>
   279 000002A1 28792F6E290A0D00    <1>
   280                                      %include 'source/pmode.asm'
   281                              <1> [BITS 16]
   282                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   283                              <1> ;	16-bit real mode
   284                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   285                              <1> 
   286                              <1> pmode:
   287 000002A9 BA9200              <1> 	mov dx, 0x92
   288 000002AC EC                  <1> 	in al, dx	;;A20
   289 000002AD 0C02                <1> 	or al, 2
   290 000002AF EE                  <1> 	out dx, al
   291 000002B0 6631DB              <1> 	xor ebx, ebx
   292 000002B3 8CCB                <1> 	mov bx,cs		; EBX=segment
   293 000002B5 66C1E304            <1> 	shl ebx,4		;	<< 4
   294 000002B9 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   295 000002BD A3[BE04]            <1> 	mov [gdt2 + 2],ax
   296 000002C0 A3[C604]            <1> 	mov [gdt3 + 2],ax
   297 000002C3 66C1E810            <1> 	shr eax,16
   298 000002C7 A2[C004]            <1> 	mov [gdt2 + 4],al
   299 000002CA A2[C804]            <1> 	mov [gdt3 + 4],al
   300 000002CD 8826[C304]          <1> 	mov [gdt2 + 7],ah
   301 000002D1 8826[CB04]          <1> 	mov [gdt3 + 7],ah
   302                              <1> 	
   303 000002D5 66B8[00000000]      <1> 	mov eax, stack
   304 000002DB A3[CE04]            <1> 	mov [gdts + 2],ax
   305 000002DE 66C1E810            <1> 	shr eax,16
   306 000002E2 A2[D004]            <1> 	mov [gdts + 4],al
   307 000002E5 8826[D304]          <1> 	mov [gdts + 7],ah
   308 000002E9 66A1[2D04]          <1> 	mov eax, [newcodecache]
   309 000002ED A3[D604]            <1> 	mov [gdt4 + 2],ax
   310 000002F0 A3[DE04]            <1> 	mov [gdt5 + 2],ax
   311 000002F3 66C1E810            <1> 	shr eax,16
   312 000002F7 A2[D804]            <1> 	mov [gdt4 + 4],al
   313 000002FA A2[E004]            <1> 	mov [gdt5 + 4],al
   314 000002FD 8826[DB04]          <1> 	mov [gdt4 + 7],ah
   315 00000301 8826[E304]          <1> 	mov [gdt5 + 7],ah
   316                              <1> 	
   317                              <1> ; fix up gdt and idt
   318 00000305 67668D83[AC040000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   319 0000030D 66A3[A204]          <1> 	mov [gdtr + 2],eax
   320 00000311 67668D83[E4040000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   321 00000319 66A3[A804]          <1> 	mov [idtr + 2],eax
   322 0000031D FA                  <1> 	cli
   323 0000031E 0F0116[A004]        <1> 	lgdt [gdtr]
   324 00000323 0F011E[A604]        <1> 	lidt [idtr]
   325 00000328 6631DB              <1> 	xor ebx, ebx
   326 0000032B 8CDB                <1> 	mov bx, ds
   327 0000032D 66891E[2904]        <1> 	mov [basecache], ebx
   328 00000332 0F20C0              <1> 	mov eax,cr0
   329 00000335 0C01                <1> 	or al,1
   330 00000337 0F22C0              <1> 	mov cr0,eax
   331 0000033A EA[4303]1000        <1> 	jmp SYS_CODE_SEL:do_pm
   332                              <1> [BITS 32]
   333 0000033F 90                  <1> 	nop
   334 00000340 90                  <1> 	nop
   335 00000341 90                  <1> 	nop
   336 00000342 90                  <1> 	nop
   337                              <1> do_pm:
   338 00000343 31C0                <1> 	xor eax, eax
   339 00000345 66B81800            <1> 	mov ax, SYS_DATA_SEL
   340 00000349 8ED8                <1> 	mov ds,ax
   341 0000034B 8ED0                <1> 	mov ss,ax	;;can switch back to STACK_SEL later
   342 0000034D BC[00100000]        <1> 	mov esp, stackend	;;can switch back to 4096 later
   343 00000352 90                  <1> 	nop
   344 00000353 90                  <1> 	nop
   345 00000354 8EC0                <1> 	mov es, ax
   346 00000356 8EE0                <1> 	mov fs, ax
   347 00000358 66B83000            <1> 	mov ax, NEW_DATA_SEL
   348 0000035C 8EE8                <1> 	mov gs, ax
   349                              <1> 	
   350                              <1> copykernel:
   351 0000035E 648B06              <1> 	mov eax, [fs:esi]
   352 00000361 658906              <1> 	mov [gs:esi], eax
   353 00000364 81C604000000        <1> 	add esi, 4
   354 0000036A 81FE[00000000]      <1> 	cmp esi, bssstart
   355 00000370 72EC                <1> 	jb copykernel
   356 00000372 EA[79030000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   357                              <1> 	
   358                              <1> done_copy:
   359 00000379 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   360 0000037D 8ED8                <1> 	mov ds, ax
   361 0000037F 8ED0                <1> 	mov ss, ax
   362 00000381 BC[00100000]        <1> 	mov esp, stackend
   363 00000386 90                  <1> 	nop
   364 00000387 90                  <1> 	nop
   365 00000388 66B83000            <1> 	mov ax, NEW_DATA_SEL
   366 0000038C 8EC0                <1> 	mov es, ax
   367 0000038E 8EE0                <1> 	mov fs, ax
   368 00000390 66B81800            <1> 	mov ax, SYS_DATA_SEL
   369 00000394 8EE8                <1> 	mov gs, ax
   370                              <1> 	
   371                              <1> ;Now I will initialise the interrupt controllers and remap irq's
   372 00000396 B011                <1> 	mov al, 0x11
   373 00000398 E620                <1> 	out 0x20, al
   374 0000039A E6A0                <1> 	out 0xA0, al
   375 0000039C B040                <1> 	mov al, 0x40	;interrupt for master
   376 0000039E E621                <1> 	out 0x21, al
   377 000003A0 B048                <1> 	mov al, 0x48	;interrupt for slave
   378 000003A2 E6A1                <1> 	out 0xA1, al
   379 000003A4 B004                <1> 	mov al, 4
   380 000003A6 E621                <1> 	out 0x21, al
   381 000003A8 B002                <1> 	mov al, 2
   382 000003AA E6A1                <1> 	out 0xA1, al
   383 000003AC B001                <1> 	mov al, 0x1
   384 000003AE E621                <1> 	out 0x21, al
   385 000003B0 B001                <1> 	mov al, 0x1
   386 000003B2 E6A1                <1> 	out 0xA1, al
   387                              <1> 	;masks are set to zero so as not to mask
   388 000003B4 30C0                <1> 	xor al, al
   389 000003B6 E621                <1> 	out 0x21, al
   390 000003B8 30C0                <1> 	xor al, al
   391 000003BA E6A1                <1> 	out 0xA1, al
   392 000003BC B020                <1> 	mov al, 0x20
   393 000003BE E6A0                <1> 	out 0xA0, al
   394 000003C0 E620                <1> 	out 0x20, al
   395                              <1> 	;And now to initialize the fpu
   396 000003C2 0F20E0              <1> 	mov eax, cr4
   397 000003C5 0D00020000          <1> 	or eax, 0x200
   398 000003CA 0F22E0              <1> 	mov cr4, eax
   399 000003CD B87F0B0000          <1> 	mov eax, 0xB7F
   400 000003D2 50                  <1> 	push eax
   401 000003D3 D92C24              <1> 	fldcw [esp]
   402 000003D6 58                  <1> 	pop eax
   403 000003D7 31C0                <1> 	xor eax, eax
   404 000003D9 31C9                <1> 	xor ecx, ecx
   405                              <1> 
   406 000003DB A1[2D040000]        <1> 	mov eax, [newcodecache]
   407 000003E0 C1E804              <1> 	shr eax, 4
   408 000003E3 A3[29040000]        <1> 	mov [basecache], eax
   409                              <1> 	
   410 000003E8 89C3                <1> 	mov ebx, eax
   411 000003EA C1E304              <1> 	shl ebx, 4
   412 000003ED 8B3D[C0840000]      <1> 	mov edi, [physbaseptr]
   413 000003F3 29DF                <1> 	sub edi, ebx
   414 000003F5 893D[C0840000]      <1> 	mov [physbaseptr], edi
   415                              <1> 	
   416 000003FB BE[00000000]        <1> 	mov esi, bssstart
   417 00000400 31C0                <1> 	xor eax, eax
   418                              <1> clearkernelbuffers:
   419 00000402 8906                <1> 	mov [esi], eax
   420 00000404 81C604000000        <1> 	add esi, 4
   421 0000040A 81FE[67A22000]      <1> 	cmp esi, bssend
   422 00000410 72F0                <1> 	jb clearkernelbuffers
   423 00000412 803D[8A010000]01    <1> 	cmp byte [guinodo], 1
   424 00000419 7405                <1> 	je guidonot
   425 0000041B E98E490000          <1> 	jmp gui
   426                              <1> guidonot:
   427 00000420 E9052B0000          <1> 	jmp os
   428                              <1> 	
   429 00000425 00000000            <1> user2codepoint dw 0,0
   430 00000429 00000000            <1> basecache dd 0
   431 0000042D 00001000            <1> newcodecache dd 0x100000
   432                              <1> 
   433 00000431 0A0D4B696C6C207468- <1> surekillmsg db 10,13,"Kill this application?",10,13,0
   434 0000043A 6973206170706C6963- <1>
   435 00000443 6174696F6E3F0A0D00  <1>
   436                              <1> 
   437                              <1> timerinterrupt:
   438 0000044C 803D[376B0000]01    <1> 	cmp byte [threadson], 1
   439 00000453 7505                <1> 	jne userinterrupt
   440 00000455 E9976C0000          <1> 	jmp threadswitch
   441                              <1> userinterrupt:		;checks for escape, if pressed, it quits the program currently running
   442 0000045A FA                  <1> 	cli
   443 0000045B 803D[376B0000]00    <1> 	cmp byte [threadson], 0
   444 00000462 0F842E000000        <1> 	je near handled3
   445 00000468 50                  <1> 	push eax
   446 00000469 E460                <1> 	in al, 60h
   447 0000046B 3C01                <1> 	cmp al, 1		;escape
   448 0000046D 7405                <1> 	je userint
   449 0000046F E921000000          <1> 	jmp handled2
   450                              <1> userint:
   451 00000474 56                  <1> 	push esi
   452 00000475 BE[31040000]        <1> 	mov esi, surekillmsg
   453 0000047A E878250000          <1> 	call print
   454 0000047F 5E                  <1> 	pop esi
   455 00000480 FB                  <1> 	sti
   456 00000481 E81D250000          <1> 	call getkey
   457 00000486 3C79                <1> 	cmp al, 'y'
   458 00000488 750B                <1> 	jne handled2
   459 0000048A B020                <1> 	mov al, 0x20
   460 0000048C E620                <1> 	out 0x20, al
   461 0000048E 58                  <1> 	pop eax
   462 0000048F FB                  <1> 	sti
   463 00000490 E9B92B0000          <1> 	jmp nwcmd
   464                              <1> handled2:
   465 00000495 58                  <1> 	pop eax
   466                              <1> handled3:
   467 00000496 FB                  <1> 	sti
   468                              <1> handled:
   469 00000497 50                  <1> 	push eax
   470 00000498 B020                <1> 	mov al, 0x20
   471 0000049A E620                <1> 	out 0x20, al
   472 0000049C 58                  <1> 	pop eax
   473 0000049D CF                  <1> 	iret
   474 0000049E EBFE                <1> 	jmp $
   475                              <1> [BITS 16]
   476                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   477                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   478                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   479 000004A0 3700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   480 000004A2 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   481                              <1> 
   482 000004A6 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   483 000004A8 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   484                              <1> 
   485                              <1> 
   486 000004AC 0000                <1> gdt:	dw 0			; limit 15:0
   487 000004AE 0000                <1> 	dw 0			; base 15:0
   488 000004B0 00                  <1> 	db 0			; base 23:16
   489 000004B1 00                  <1> 	db 0			; type
   490 000004B2 00                  <1> 	db 0			; limit 19:16, flags
   491 000004B3 00                  <1> 	db 0			; base 31:24
   492                              <1> ; linear data segment descriptor
   493                              <1> LINEAR_SEL	equ	$-gdt
   494 000004B4 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   495 000004B6 0000                <1> 	dw 0			; base for this one is always 0
   496 000004B8 00                  <1> 	db 0
   497 000004B9 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   498 000004BA CF                  <1> 	db 0xCF			; page-granular, 32-bit
   499 000004BB 00                  <1> 	db 0
   500                              <1> ; code segment descriptor
   501                              <1> SYS_CODE_SEL	equ	$-gdt
   502 000004BC FFFF                <1> gdt2:	dw 0xFFFF
   503 000004BE 0000                <1> 	dw 0			; (base gets set above)
   504 000004C0 00                  <1> 	db 0
   505 000004C1 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   506 000004C2 CF                  <1> 	db 0xCF
   507 000004C3 00                  <1> 	db 0
   508                              <1> ; data segment descriptor
   509                              <1> SYS_DATA_SEL	equ	$-gdt
   510 000004C4 FFFF                <1> gdt3:	dw 0xFFFF
   511 000004C6 0000                <1> 	dw 0			; (base gets set above)
   512 000004C8 00                  <1> 	db 0
   513 000004C9 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   514 000004CA CF                  <1> 	db 0xCF
   515 000004CB 00                  <1> 	db 0
   516                              <1> STACK_SEL	equ	$-gdt	;;this is no longer used for various reasons
   517 000004CC 0100                <1> gdts:	dw 1
   518 000004CE 0000                <1> 	dw 0			; (base gets set above)
   519 000004D0 00                  <1> 	db 0
   520 000004D1 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   521 000004D2 C0                  <1> 	db 0xC0
   522 000004D3 00                  <1> 	db 0
   523                              <1> NEW_CODE_SEL	equ	$-gdt
   524 000004D4 FFFF                <1> gdt4:	dw 0xFFFF
   525 000004D6 0000                <1> 	dw 0			; (base gets set above)
   526 000004D8 00                  <1> 	db 0
   527 000004D9 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   528 000004DA CF                  <1> 	db 0xCF
   529 000004DB 00                  <1> 	db 0
   530                              <1> ; data segment descriptor
   531                              <1> NEW_DATA_SEL	equ	$-gdt
   532 000004DC FFFF                <1> gdt5:	dw 0xFFFF
   533 000004DE 0000                <1> 	dw 0			; (base gets set above)
   534 000004E0 00                  <1> 	db 0
   535 000004E1 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   536 000004E2 CF                  <1> 	db 0xCF
   537 000004E3 00                  <1> 	db 0
   538                              <1> gdt_end:
   539                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   540                              <1> ;	interrupt descriptor table (IDT)
   541                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   542                              <1> ; 32 reserved interrupts:
   543                              <1> idt:	
   544                              <1> %assign i 0
   545                              <1> %rep    33
   546                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   547                              <1> %assign i i+1
   548                              <1> %endrep
   549 000004E4 [E40C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   550                              <2> %assign i i+1
   551 000004EC [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   552                              <2> %assign i i+1
   553 000004F4 [FE0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   554                              <2> %assign i i+1
   555 000004FC [0B0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   556                              <2> %assign i i+1
   557 00000504 [180D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   558                              <2> %assign i i+1
   559 0000050C [250D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   560                              <2> %assign i i+1
   561 00000514 [320D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   562                              <2> %assign i i+1
   563 0000051C [3F0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   564                              <2> %assign i i+1
   565 00000524 [4C0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   566                              <2> %assign i i+1
   567 0000052C [590D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   568                              <2> %assign i i+1
   569 00000534 [660D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   570                              <2> %assign i i+1
   571 0000053C [730D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   572                              <2> %assign i i+1
   573 00000544 [800D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   574                              <2> %assign i i+1
   575 0000054C [8D0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   576                              <2> %assign i i+1
   577 00000554 [9A0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   578                              <2> %assign i i+1
   579 0000055C [A70D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   580                              <2> %assign i i+1
   581 00000564 [B40D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   582                              <2> %assign i i+1
   583 0000056C [C10D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   584                              <2> %assign i i+1
   585 00000574 [CE0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   586                              <2> %assign i i+1
   587 0000057C [DB0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   588                              <2> %assign i i+1
   589 00000584 [E80D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   590                              <2> %assign i i+1
   591 0000058C [F50D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   592                              <2> %assign i i+1
   593 00000594 [020E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   594                              <2> %assign i i+1
   595 0000059C [0F0E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   596                              <2> %assign i i+1
   597 000005A4 [1C0E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   598                              <2> %assign i i+1
   599 000005AC [290E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   600                              <2> %assign i i+1
   601 000005B4 [360E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   602                              <2> %assign i i+1
   603 000005BC [430E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   604                              <2> %assign i i+1
   605 000005C4 [500E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   606                              <2> %assign i i+1
   607 000005CC [5D0E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   608                              <2> %assign i i+1
   609 000005D4 [6A0E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   610                              <2> %assign i i+1
   611 000005DC [770E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   612                              <2> %assign i i+1
   613 000005E4 [840E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   614                              <2> %assign i i+1
   615                              <1> 		;dw handled,NEW_CODE_SEL,0x8E00,0
   616 000005EC [512E]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   617                              <1> %assign i 0x22
   618                              <1> %rep 14
   619                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   620                              <1> 		;dw handled,NEW_CODE_SEL,0x8E00,0
   621                              <1> %assign i +1
   622                              <1> %endrep
   623 000005F4 [9E0E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   624                              <2> 
   625                              <2> %assign i +1
   626 000005FC [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   627                              <2> 
   628                              <2> %assign i +1
   629 00000604 [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   630                              <2> 
   631                              <2> %assign i +1
   632 0000060C [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   633                              <2> 
   634                              <2> %assign i +1
   635 00000614 [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   636                              <2> 
   637                              <2> %assign i +1
   638 0000061C [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   639                              <2> 
   640                              <2> %assign i +1
   641 00000624 [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   642                              <2> 
   643                              <2> %assign i +1
   644 0000062C [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   645                              <2> 
   646                              <2> %assign i +1
   647 00000634 [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   648                              <2> 
   649                              <2> %assign i +1
   650 0000063C [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   651                              <2> 
   652                              <2> %assign i +1
   653 00000644 [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   654                              <2> 
   655                              <2> %assign i +1
   656 0000064C [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   657                              <2> 
   658                              <2> %assign i +1
   659 00000654 [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   660                              <2> 
   661                              <2> %assign i +1
   662 0000065C [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   663                              <2> 
   664                              <2> %assign i +1
   665                              <1> ;INT 30h for os use and 3rd party use:
   666 00000664 [0427]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   667                              <1> ;here are all the irq's
   668                              <1> %assign i 0x31
   669                              <1> %rep 15
   670                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   671                              <1> 		;dw handled,NEW_CODE_SEL,0x8E00,0
   672                              <1> %assign i +1
   673                              <1> %endrep
   674 0000066C [610F]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   675                              <2> 
   676                              <2> %assign i +1
   677 00000674 [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   678                              <2> 
   679                              <2> %assign i +1
   680 0000067C [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   681                              <2> 
   682                              <2> %assign i +1
   683 00000684 [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   684                              <2> 
   685                              <2> %assign i +1
   686 0000068C [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   687                              <2> 
   688                              <2> %assign i +1
   689 00000694 [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   690                              <2> 
   691                              <2> %assign i +1
   692 0000069C [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   693                              <2> 
   694                              <2> %assign i +1
   695 000006A4 [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   696                              <2> 
   697                              <2> %assign i +1
   698 000006AC [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   699                              <2> 
   700                              <2> %assign i +1
   701 000006B4 [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   702                              <2> 
   703                              <2> %assign i +1
   704 000006BC [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   705                              <2> 
   706                              <2> %assign i +1
   707 000006C4 [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   708                              <2> 
   709                              <2> %assign i +1
   710 000006CC [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   711                              <2> 
   712                              <2> %assign i +1
   713 000006D4 [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   714                              <2> 
   715                              <2> %assign i +1
   716 000006DC [F10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   717                              <2> 
   718                              <2> %assign i +1
   719 000006E4 [4C04]2800008E0000  <1> 		dw timerinterrupt,NEW_CODE_SEL,0x8E00,0
   720 000006EC [5A04]2800008E0000  <1> 		dw userinterrupt,NEW_CODE_SEL,0x8E00,0
   721                              <1> ;%assign i 0x42
   722                              <1> %rep 14
   723                              <1> 		;dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   724                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   725                              <1> ;%assign i +1
   726                              <1> %endrep
   727                              <2> 
   728 000006F4 [9704]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   729                              <2> 
   730                              <2> 
   731 000006FC [9704]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   732                              <2> 
   733                              <2> 
   734 00000704 [9704]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   735                              <2> 
   736                              <2> 
   737 0000070C [9704]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   738                              <2> 
   739                              <2> 
   740 00000714 [9704]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   741                              <2> 
   742                              <2> 
   743 0000071C [9704]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   744                              <2> 
   745                              <2> 
   746 00000724 [9704]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   747                              <2> 
   748                              <2> 
   749 0000072C [9704]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   750                              <2> 
   751                              <2> 
   752 00000734 [9704]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   753                              <2> 
   754                              <2> 
   755 0000073C [9704]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   756                              <2> 
   757                              <2> 
   758 00000744 [9704]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   759                              <2> 
   760                              <2> 
   761 0000074C [9704]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   762                              <2> 
   763                              <2> 
   764 00000754 [9704]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   765                              <2> 
   766                              <2> 
   767 0000075C [9704]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   768                              <2> 
   769                              <1> ;This brings me up to something
   770                              <1> %assign i 0x50
   771                              <1> %rep 176
   772                              <1> 		dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   773                              <1> 		;dw handled,NEW_CODE_SEL,0x8E00,0
   774                              <1> %assign i +1
   775                              <1> %endrep
   776 00000764 [F410]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   777                              <2> 
   778                              <2> %assign i +1
   779 0000076C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   780                              <2> 
   781                              <2> %assign i +1
   782 00000774 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   783                              <2> 
   784                              <2> %assign i +1
   785 0000077C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   786                              <2> 
   787                              <2> %assign i +1
   788 00000784 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   789                              <2> 
   790                              <2> %assign i +1
   791 0000078C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   792                              <2> 
   793                              <2> %assign i +1
   794 00000794 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   795                              <2> 
   796                              <2> %assign i +1
   797 0000079C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   798                              <2> 
   799                              <2> %assign i +1
   800 000007A4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   801                              <2> 
   802                              <2> %assign i +1
   803 000007AC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   804                              <2> 
   805                              <2> %assign i +1
   806 000007B4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   807                              <2> 
   808                              <2> %assign i +1
   809 000007BC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   810                              <2> 
   811                              <2> %assign i +1
   812 000007C4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   813                              <2> 
   814                              <2> %assign i +1
   815 000007CC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   816                              <2> 
   817                              <2> %assign i +1
   818 000007D4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   819                              <2> 
   820                              <2> %assign i +1
   821 000007DC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   822                              <2> 
   823                              <2> %assign i +1
   824 000007E4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   825                              <2> 
   826                              <2> %assign i +1
   827 000007EC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   828                              <2> 
   829                              <2> %assign i +1
   830 000007F4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   831                              <2> 
   832                              <2> %assign i +1
   833 000007FC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   834                              <2> 
   835                              <2> %assign i +1
   836 00000804 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   837                              <2> 
   838                              <2> %assign i +1
   839 0000080C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   840                              <2> 
   841                              <2> %assign i +1
   842 00000814 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   843                              <2> 
   844                              <2> %assign i +1
   845 0000081C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   846                              <2> 
   847                              <2> %assign i +1
   848 00000824 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   849                              <2> 
   850                              <2> %assign i +1
   851 0000082C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   852                              <2> 
   853                              <2> %assign i +1
   854 00000834 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   855                              <2> 
   856                              <2> %assign i +1
   857 0000083C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   858                              <2> 
   859                              <2> %assign i +1
   860 00000844 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   861                              <2> 
   862                              <2> %assign i +1
   863 0000084C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   864                              <2> 
   865                              <2> %assign i +1
   866 00000854 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 0000085C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 00000864 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 0000086C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 00000874 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 0000087C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 00000884 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 0000088C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 00000894 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 0000089C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 000008A4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 000008AC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 000008B4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 000008BC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 000008C4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 000008CC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 000008D4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 000008DC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 000008E4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 000008EC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 000008F4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 000008FC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 00000904 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 0000090C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 00000914 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 0000091C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 00000924 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 0000092C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 00000934 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 0000093C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 00000944 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 0000094C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 00000954 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 0000095C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 00000964 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 0000096C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 00000974 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 0000097C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 00000984 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 0000098C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 00000994 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 0000099C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 000009A4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 000009AC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 000009B4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 000009BC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 000009C4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 000009CC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 000009D4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 000009DC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 000009E4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 000009EC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 000009F4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 000009FC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000A04 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 00000A0C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 00000A14 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 00000A1C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 00000A24 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 00000A2C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 00000A34 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 00000A3C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 00000A44 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 00000A4C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 00000A54 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 00000A5C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 00000A64 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 00000A6C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 00000A74 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 00000A7C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 00000A84 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 00000A8C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 00000A94 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 00000A9C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 00000AA4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 00000AAC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 00000AB4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 00000ABC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 00000AC4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 00000ACC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 00000AD4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 00000ADC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000AE4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 00000AEC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 00000AF4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 00000AFC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000B04 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 00000B0C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 00000B14 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 00000B1C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 00000B24 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 00000B2C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 00000B34 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 00000B3C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 00000B44 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 00000B4C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 00000B54 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 00000B5C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 00000B64 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 00000B6C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 00000B74 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 00000B7C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 00000B84 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 00000B8C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 00000B94 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 00000B9C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 00000BA4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 00000BAC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 00000BB4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 00000BBC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 00000BC4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 00000BCC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 00000BD4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 00000BDC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000BE4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000BEC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000BF4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000BFC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000C04 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000C0C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000C14 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000C1C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000C24 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000C2C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000C34 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000C3C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000C44 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000C4C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000C54 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000C5C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000C64 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000C6C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000C74 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000C7C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000C84 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000C8C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000C94 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000C9C [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000CA4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000CAC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286 00000CB4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1287                              <2> 
  1288                              <2> %assign i +1
  1289 00000CBC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1290                              <2> 
  1291                              <2> %assign i +1
  1292 00000CC4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1293                              <2> 
  1294                              <2> %assign i +1
  1295 00000CCC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1296                              <2> 
  1297                              <2> %assign i +1
  1298 00000CD4 [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1299                              <2> 
  1300                              <2> %assign i +1
  1301 00000CDC [F10C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1302                              <2> 
  1303                              <2> %assign i +1
  1304                              <1> idt_end:
  1305                              <1> [BITS 32]
  1306                                  [BITS 32]
  1307                                  	%include 'source/exception.asm'
  1308                              <1> 
  1309                              <1> unhand:	
  1310                              <1> 	%assign i 0
  1311                              <1> 	%rep 256
  1312                              <1> 	cli
  1313                              <1> 	mov byte [intprob], i
  1314                              <1> 	jmp unhand2
  1315                              <1> 	%assign i i+1
  1316                              <1> 	%endrep
  1317 00000CE4 FA                  <2>  cli
  1318 00000CE5 C605[DF1C0000]00    <2>  mov byte [intprob], i
  1319 00000CEC E9F30C0000          <2>  jmp unhand2
  1320                              <2>  %assign i i+1
  1321 00000CF1 FA                  <2>  cli
  1322 00000CF2 C605[DF1C0000]01    <2>  mov byte [intprob], i
  1323 00000CF9 E9E60C0000          <2>  jmp unhand2
  1324                              <2>  %assign i i+1
  1325 00000CFE FA                  <2>  cli
  1326 00000CFF C605[DF1C0000]02    <2>  mov byte [intprob], i
  1327 00000D06 E9D90C0000          <2>  jmp unhand2
  1328                              <2>  %assign i i+1
  1329 00000D0B FA                  <2>  cli
  1330 00000D0C C605[DF1C0000]03    <2>  mov byte [intprob], i
  1331 00000D13 E9CC0C0000          <2>  jmp unhand2
  1332                              <2>  %assign i i+1
  1333 00000D18 FA                  <2>  cli
  1334 00000D19 C605[DF1C0000]04    <2>  mov byte [intprob], i
  1335 00000D20 E9BF0C0000          <2>  jmp unhand2
  1336                              <2>  %assign i i+1
  1337 00000D25 FA                  <2>  cli
  1338 00000D26 C605[DF1C0000]05    <2>  mov byte [intprob], i
  1339 00000D2D E9B20C0000          <2>  jmp unhand2
  1340                              <2>  %assign i i+1
  1341 00000D32 FA                  <2>  cli
  1342 00000D33 C605[DF1C0000]06    <2>  mov byte [intprob], i
  1343 00000D3A E9A50C0000          <2>  jmp unhand2
  1344                              <2>  %assign i i+1
  1345 00000D3F FA                  <2>  cli
  1346 00000D40 C605[DF1C0000]07    <2>  mov byte [intprob], i
  1347 00000D47 E9980C0000          <2>  jmp unhand2
  1348                              <2>  %assign i i+1
  1349 00000D4C FA                  <2>  cli
  1350 00000D4D C605[DF1C0000]08    <2>  mov byte [intprob], i
  1351 00000D54 E98B0C0000          <2>  jmp unhand2
  1352                              <2>  %assign i i+1
  1353 00000D59 FA                  <2>  cli
  1354 00000D5A C605[DF1C0000]09    <2>  mov byte [intprob], i
  1355 00000D61 E97E0C0000          <2>  jmp unhand2
  1356                              <2>  %assign i i+1
  1357 00000D66 FA                  <2>  cli
  1358 00000D67 C605[DF1C0000]0A    <2>  mov byte [intprob], i
  1359 00000D6E E9710C0000          <2>  jmp unhand2
  1360                              <2>  %assign i i+1
  1361 00000D73 FA                  <2>  cli
  1362 00000D74 C605[DF1C0000]0B    <2>  mov byte [intprob], i
  1363 00000D7B E9640C0000          <2>  jmp unhand2
  1364                              <2>  %assign i i+1
  1365 00000D80 FA                  <2>  cli
  1366 00000D81 C605[DF1C0000]0C    <2>  mov byte [intprob], i
  1367 00000D88 E9570C0000          <2>  jmp unhand2
  1368                              <2>  %assign i i+1
  1369 00000D8D FA                  <2>  cli
  1370 00000D8E C605[DF1C0000]0D    <2>  mov byte [intprob], i
  1371 00000D95 E94A0C0000          <2>  jmp unhand2
  1372                              <2>  %assign i i+1
  1373 00000D9A FA                  <2>  cli
  1374 00000D9B C605[DF1C0000]0E    <2>  mov byte [intprob], i
  1375 00000DA2 E93D0C0000          <2>  jmp unhand2
  1376                              <2>  %assign i i+1
  1377 00000DA7 FA                  <2>  cli
  1378 00000DA8 C605[DF1C0000]0F    <2>  mov byte [intprob], i
  1379 00000DAF E9300C0000          <2>  jmp unhand2
  1380                              <2>  %assign i i+1
  1381 00000DB4 FA                  <2>  cli
  1382 00000DB5 C605[DF1C0000]10    <2>  mov byte [intprob], i
  1383 00000DBC E9230C0000          <2>  jmp unhand2
  1384                              <2>  %assign i i+1
  1385 00000DC1 FA                  <2>  cli
  1386 00000DC2 C605[DF1C0000]11    <2>  mov byte [intprob], i
  1387 00000DC9 E9160C0000          <2>  jmp unhand2
  1388                              <2>  %assign i i+1
  1389 00000DCE FA                  <2>  cli
  1390 00000DCF C605[DF1C0000]12    <2>  mov byte [intprob], i
  1391 00000DD6 E9090C0000          <2>  jmp unhand2
  1392                              <2>  %assign i i+1
  1393 00000DDB FA                  <2>  cli
  1394 00000DDC C605[DF1C0000]13    <2>  mov byte [intprob], i
  1395 00000DE3 E9FC0B0000          <2>  jmp unhand2
  1396                              <2>  %assign i i+1
  1397 00000DE8 FA                  <2>  cli
  1398 00000DE9 C605[DF1C0000]14    <2>  mov byte [intprob], i
  1399 00000DF0 E9EF0B0000          <2>  jmp unhand2
  1400                              <2>  %assign i i+1
  1401 00000DF5 FA                  <2>  cli
  1402 00000DF6 C605[DF1C0000]15    <2>  mov byte [intprob], i
  1403 00000DFD E9E20B0000          <2>  jmp unhand2
  1404                              <2>  %assign i i+1
  1405 00000E02 FA                  <2>  cli
  1406 00000E03 C605[DF1C0000]16    <2>  mov byte [intprob], i
  1407 00000E0A E9D50B0000          <2>  jmp unhand2
  1408                              <2>  %assign i i+1
  1409 00000E0F FA                  <2>  cli
  1410 00000E10 C605[DF1C0000]17    <2>  mov byte [intprob], i
  1411 00000E17 E9C80B0000          <2>  jmp unhand2
  1412                              <2>  %assign i i+1
  1413 00000E1C FA                  <2>  cli
  1414 00000E1D C605[DF1C0000]18    <2>  mov byte [intprob], i
  1415 00000E24 E9BB0B0000          <2>  jmp unhand2
  1416                              <2>  %assign i i+1
  1417 00000E29 FA                  <2>  cli
  1418 00000E2A C605[DF1C0000]19    <2>  mov byte [intprob], i
  1419 00000E31 E9AE0B0000          <2>  jmp unhand2
  1420                              <2>  %assign i i+1
  1421 00000E36 FA                  <2>  cli
  1422 00000E37 C605[DF1C0000]1A    <2>  mov byte [intprob], i
  1423 00000E3E E9A10B0000          <2>  jmp unhand2
  1424                              <2>  %assign i i+1
  1425 00000E43 FA                  <2>  cli
  1426 00000E44 C605[DF1C0000]1B    <2>  mov byte [intprob], i
  1427 00000E4B E9940B0000          <2>  jmp unhand2
  1428                              <2>  %assign i i+1
  1429 00000E50 FA                  <2>  cli
  1430 00000E51 C605[DF1C0000]1C    <2>  mov byte [intprob], i
  1431 00000E58 E9870B0000          <2>  jmp unhand2
  1432                              <2>  %assign i i+1
  1433 00000E5D FA                  <2>  cli
  1434 00000E5E C605[DF1C0000]1D    <2>  mov byte [intprob], i
  1435 00000E65 E97A0B0000          <2>  jmp unhand2
  1436                              <2>  %assign i i+1
  1437 00000E6A FA                  <2>  cli
  1438 00000E6B C605[DF1C0000]1E    <2>  mov byte [intprob], i
  1439 00000E72 E96D0B0000          <2>  jmp unhand2
  1440                              <2>  %assign i i+1
  1441 00000E77 FA                  <2>  cli
  1442 00000E78 C605[DF1C0000]1F    <2>  mov byte [intprob], i
  1443 00000E7F E9600B0000          <2>  jmp unhand2
  1444                              <2>  %assign i i+1
  1445 00000E84 FA                  <2>  cli
  1446 00000E85 C605[DF1C0000]20    <2>  mov byte [intprob], i
  1447 00000E8C E9530B0000          <2>  jmp unhand2
  1448                              <2>  %assign i i+1
  1449 00000E91 FA                  <2>  cli
  1450 00000E92 C605[DF1C0000]21    <2>  mov byte [intprob], i
  1451 00000E99 E9460B0000          <2>  jmp unhand2
  1452                              <2>  %assign i i+1
  1453 00000E9E FA                  <2>  cli
  1454 00000E9F C605[DF1C0000]22    <2>  mov byte [intprob], i
  1455 00000EA6 E9390B0000          <2>  jmp unhand2
  1456                              <2>  %assign i i+1
  1457 00000EAB FA                  <2>  cli
  1458 00000EAC C605[DF1C0000]23    <2>  mov byte [intprob], i
  1459 00000EB3 E92C0B0000          <2>  jmp unhand2
  1460                              <2>  %assign i i+1
  1461 00000EB8 FA                  <2>  cli
  1462 00000EB9 C605[DF1C0000]24    <2>  mov byte [intprob], i
  1463 00000EC0 E91F0B0000          <2>  jmp unhand2
  1464                              <2>  %assign i i+1
  1465 00000EC5 FA                  <2>  cli
  1466 00000EC6 C605[DF1C0000]25    <2>  mov byte [intprob], i
  1467 00000ECD E9120B0000          <2>  jmp unhand2
  1468                              <2>  %assign i i+1
  1469 00000ED2 FA                  <2>  cli
  1470 00000ED3 C605[DF1C0000]26    <2>  mov byte [intprob], i
  1471 00000EDA E9050B0000          <2>  jmp unhand2
  1472                              <2>  %assign i i+1
  1473 00000EDF FA                  <2>  cli
  1474 00000EE0 C605[DF1C0000]27    <2>  mov byte [intprob], i
  1475 00000EE7 E9F80A0000          <2>  jmp unhand2
  1476                              <2>  %assign i i+1
  1477 00000EEC FA                  <2>  cli
  1478 00000EED C605[DF1C0000]28    <2>  mov byte [intprob], i
  1479 00000EF4 E9EB0A0000          <2>  jmp unhand2
  1480                              <2>  %assign i i+1
  1481 00000EF9 FA                  <2>  cli
  1482 00000EFA C605[DF1C0000]29    <2>  mov byte [intprob], i
  1483 00000F01 E9DE0A0000          <2>  jmp unhand2
  1484                              <2>  %assign i i+1
  1485 00000F06 FA                  <2>  cli
  1486 00000F07 C605[DF1C0000]2A    <2>  mov byte [intprob], i
  1487 00000F0E E9D10A0000          <2>  jmp unhand2
  1488                              <2>  %assign i i+1
  1489 00000F13 FA                  <2>  cli
  1490 00000F14 C605[DF1C0000]2B    <2>  mov byte [intprob], i
  1491 00000F1B E9C40A0000          <2>  jmp unhand2
  1492                              <2>  %assign i i+1
  1493 00000F20 FA                  <2>  cli
  1494 00000F21 C605[DF1C0000]2C    <2>  mov byte [intprob], i
  1495 00000F28 E9B70A0000          <2>  jmp unhand2
  1496                              <2>  %assign i i+1
  1497 00000F2D FA                  <2>  cli
  1498 00000F2E C605[DF1C0000]2D    <2>  mov byte [intprob], i
  1499 00000F35 E9AA0A0000          <2>  jmp unhand2
  1500                              <2>  %assign i i+1
  1501 00000F3A FA                  <2>  cli
  1502 00000F3B C605[DF1C0000]2E    <2>  mov byte [intprob], i
  1503 00000F42 E99D0A0000          <2>  jmp unhand2
  1504                              <2>  %assign i i+1
  1505 00000F47 FA                  <2>  cli
  1506 00000F48 C605[DF1C0000]2F    <2>  mov byte [intprob], i
  1507 00000F4F E9900A0000          <2>  jmp unhand2
  1508                              <2>  %assign i i+1
  1509 00000F54 FA                  <2>  cli
  1510 00000F55 C605[DF1C0000]30    <2>  mov byte [intprob], i
  1511 00000F5C E9830A0000          <2>  jmp unhand2
  1512                              <2>  %assign i i+1
  1513 00000F61 FA                  <2>  cli
  1514 00000F62 C605[DF1C0000]31    <2>  mov byte [intprob], i
  1515 00000F69 E9760A0000          <2>  jmp unhand2
  1516                              <2>  %assign i i+1
  1517 00000F6E FA                  <2>  cli
  1518 00000F6F C605[DF1C0000]32    <2>  mov byte [intprob], i
  1519 00000F76 E9690A0000          <2>  jmp unhand2
  1520                              <2>  %assign i i+1
  1521 00000F7B FA                  <2>  cli
  1522 00000F7C C605[DF1C0000]33    <2>  mov byte [intprob], i
  1523 00000F83 E95C0A0000          <2>  jmp unhand2
  1524                              <2>  %assign i i+1
  1525 00000F88 FA                  <2>  cli
  1526 00000F89 C605[DF1C0000]34    <2>  mov byte [intprob], i
  1527 00000F90 E94F0A0000          <2>  jmp unhand2
  1528                              <2>  %assign i i+1
  1529 00000F95 FA                  <2>  cli
  1530 00000F96 C605[DF1C0000]35    <2>  mov byte [intprob], i
  1531 00000F9D E9420A0000          <2>  jmp unhand2
  1532                              <2>  %assign i i+1
  1533 00000FA2 FA                  <2>  cli
  1534 00000FA3 C605[DF1C0000]36    <2>  mov byte [intprob], i
  1535 00000FAA E9350A0000          <2>  jmp unhand2
  1536                              <2>  %assign i i+1
  1537 00000FAF FA                  <2>  cli
  1538 00000FB0 C605[DF1C0000]37    <2>  mov byte [intprob], i
  1539 00000FB7 E9280A0000          <2>  jmp unhand2
  1540                              <2>  %assign i i+1
  1541 00000FBC FA                  <2>  cli
  1542 00000FBD C605[DF1C0000]38    <2>  mov byte [intprob], i
  1543 00000FC4 E91B0A0000          <2>  jmp unhand2
  1544                              <2>  %assign i i+1
  1545 00000FC9 FA                  <2>  cli
  1546 00000FCA C605[DF1C0000]39    <2>  mov byte [intprob], i
  1547 00000FD1 E90E0A0000          <2>  jmp unhand2
  1548                              <2>  %assign i i+1
  1549 00000FD6 FA                  <2>  cli
  1550 00000FD7 C605[DF1C0000]3A    <2>  mov byte [intprob], i
  1551 00000FDE E9010A0000          <2>  jmp unhand2
  1552                              <2>  %assign i i+1
  1553 00000FE3 FA                  <2>  cli
  1554 00000FE4 C605[DF1C0000]3B    <2>  mov byte [intprob], i
  1555 00000FEB E9F4090000          <2>  jmp unhand2
  1556                              <2>  %assign i i+1
  1557 00000FF0 FA                  <2>  cli
  1558 00000FF1 C605[DF1C0000]3C    <2>  mov byte [intprob], i
  1559 00000FF8 E9E7090000          <2>  jmp unhand2
  1560                              <2>  %assign i i+1
  1561 00000FFD FA                  <2>  cli
  1562 00000FFE C605[DF1C0000]3D    <2>  mov byte [intprob], i
  1563 00001005 E9DA090000          <2>  jmp unhand2
  1564                              <2>  %assign i i+1
  1565 0000100A FA                  <2>  cli
  1566 0000100B C605[DF1C0000]3E    <2>  mov byte [intprob], i
  1567 00001012 E9CD090000          <2>  jmp unhand2
  1568                              <2>  %assign i i+1
  1569 00001017 FA                  <2>  cli
  1570 00001018 C605[DF1C0000]3F    <2>  mov byte [intprob], i
  1571 0000101F E9C0090000          <2>  jmp unhand2
  1572                              <2>  %assign i i+1
  1573 00001024 FA                  <2>  cli
  1574 00001025 C605[DF1C0000]40    <2>  mov byte [intprob], i
  1575 0000102C E9B3090000          <2>  jmp unhand2
  1576                              <2>  %assign i i+1
  1577 00001031 FA                  <2>  cli
  1578 00001032 C605[DF1C0000]41    <2>  mov byte [intprob], i
  1579 00001039 E9A6090000          <2>  jmp unhand2
  1580                              <2>  %assign i i+1
  1581 0000103E FA                  <2>  cli
  1582 0000103F C605[DF1C0000]42    <2>  mov byte [intprob], i
  1583 00001046 E999090000          <2>  jmp unhand2
  1584                              <2>  %assign i i+1
  1585 0000104B FA                  <2>  cli
  1586 0000104C C605[DF1C0000]43    <2>  mov byte [intprob], i
  1587 00001053 E98C090000          <2>  jmp unhand2
  1588                              <2>  %assign i i+1
  1589 00001058 FA                  <2>  cli
  1590 00001059 C605[DF1C0000]44    <2>  mov byte [intprob], i
  1591 00001060 E97F090000          <2>  jmp unhand2
  1592                              <2>  %assign i i+1
  1593 00001065 FA                  <2>  cli
  1594 00001066 C605[DF1C0000]45    <2>  mov byte [intprob], i
  1595 0000106D E972090000          <2>  jmp unhand2
  1596                              <2>  %assign i i+1
  1597 00001072 FA                  <2>  cli
  1598 00001073 C605[DF1C0000]46    <2>  mov byte [intprob], i
  1599 0000107A E965090000          <2>  jmp unhand2
  1600                              <2>  %assign i i+1
  1601 0000107F FA                  <2>  cli
  1602 00001080 C605[DF1C0000]47    <2>  mov byte [intprob], i
  1603 00001087 E958090000          <2>  jmp unhand2
  1604                              <2>  %assign i i+1
  1605 0000108C FA                  <2>  cli
  1606 0000108D C605[DF1C0000]48    <2>  mov byte [intprob], i
  1607 00001094 E94B090000          <2>  jmp unhand2
  1608                              <2>  %assign i i+1
  1609 00001099 FA                  <2>  cli
  1610 0000109A C605[DF1C0000]49    <2>  mov byte [intprob], i
  1611 000010A1 E93E090000          <2>  jmp unhand2
  1612                              <2>  %assign i i+1
  1613 000010A6 FA                  <2>  cli
  1614 000010A7 C605[DF1C0000]4A    <2>  mov byte [intprob], i
  1615 000010AE E931090000          <2>  jmp unhand2
  1616                              <2>  %assign i i+1
  1617 000010B3 FA                  <2>  cli
  1618 000010B4 C605[DF1C0000]4B    <2>  mov byte [intprob], i
  1619 000010BB E924090000          <2>  jmp unhand2
  1620                              <2>  %assign i i+1
  1621 000010C0 FA                  <2>  cli
  1622 000010C1 C605[DF1C0000]4C    <2>  mov byte [intprob], i
  1623 000010C8 E917090000          <2>  jmp unhand2
  1624                              <2>  %assign i i+1
  1625 000010CD FA                  <2>  cli
  1626 000010CE C605[DF1C0000]4D    <2>  mov byte [intprob], i
  1627 000010D5 E90A090000          <2>  jmp unhand2
  1628                              <2>  %assign i i+1
  1629 000010DA FA                  <2>  cli
  1630 000010DB C605[DF1C0000]4E    <2>  mov byte [intprob], i
  1631 000010E2 E9FD080000          <2>  jmp unhand2
  1632                              <2>  %assign i i+1
  1633 000010E7 FA                  <2>  cli
  1634 000010E8 C605[DF1C0000]4F    <2>  mov byte [intprob], i
  1635 000010EF E9F0080000          <2>  jmp unhand2
  1636                              <2>  %assign i i+1
  1637 000010F4 FA                  <2>  cli
  1638 000010F5 C605[DF1C0000]50    <2>  mov byte [intprob], i
  1639 000010FC E9E3080000          <2>  jmp unhand2
  1640                              <2>  %assign i i+1
  1641 00001101 FA                  <2>  cli
  1642 00001102 C605[DF1C0000]51    <2>  mov byte [intprob], i
  1643 00001109 E9D6080000          <2>  jmp unhand2
  1644                              <2>  %assign i i+1
  1645 0000110E FA                  <2>  cli
  1646 0000110F C605[DF1C0000]52    <2>  mov byte [intprob], i
  1647 00001116 E9C9080000          <2>  jmp unhand2
  1648                              <2>  %assign i i+1
  1649 0000111B FA                  <2>  cli
  1650 0000111C C605[DF1C0000]53    <2>  mov byte [intprob], i
  1651 00001123 E9BC080000          <2>  jmp unhand2
  1652                              <2>  %assign i i+1
  1653 00001128 FA                  <2>  cli
  1654 00001129 C605[DF1C0000]54    <2>  mov byte [intprob], i
  1655 00001130 E9AF080000          <2>  jmp unhand2
  1656                              <2>  %assign i i+1
  1657 00001135 FA                  <2>  cli
  1658 00001136 C605[DF1C0000]55    <2>  mov byte [intprob], i
  1659 0000113D E9A2080000          <2>  jmp unhand2
  1660                              <2>  %assign i i+1
  1661 00001142 FA                  <2>  cli
  1662 00001143 C605[DF1C0000]56    <2>  mov byte [intprob], i
  1663 0000114A E995080000          <2>  jmp unhand2
  1664                              <2>  %assign i i+1
  1665 0000114F FA                  <2>  cli
  1666 00001150 C605[DF1C0000]57    <2>  mov byte [intprob], i
  1667 00001157 E988080000          <2>  jmp unhand2
  1668                              <2>  %assign i i+1
  1669 0000115C FA                  <2>  cli
  1670 0000115D C605[DF1C0000]58    <2>  mov byte [intprob], i
  1671 00001164 E97B080000          <2>  jmp unhand2
  1672                              <2>  %assign i i+1
  1673 00001169 FA                  <2>  cli
  1674 0000116A C605[DF1C0000]59    <2>  mov byte [intprob], i
  1675 00001171 E96E080000          <2>  jmp unhand2
  1676                              <2>  %assign i i+1
  1677 00001176 FA                  <2>  cli
  1678 00001177 C605[DF1C0000]5A    <2>  mov byte [intprob], i
  1679 0000117E E961080000          <2>  jmp unhand2
  1680                              <2>  %assign i i+1
  1681 00001183 FA                  <2>  cli
  1682 00001184 C605[DF1C0000]5B    <2>  mov byte [intprob], i
  1683 0000118B E954080000          <2>  jmp unhand2
  1684                              <2>  %assign i i+1
  1685 00001190 FA                  <2>  cli
  1686 00001191 C605[DF1C0000]5C    <2>  mov byte [intprob], i
  1687 00001198 E947080000          <2>  jmp unhand2
  1688                              <2>  %assign i i+1
  1689 0000119D FA                  <2>  cli
  1690 0000119E C605[DF1C0000]5D    <2>  mov byte [intprob], i
  1691 000011A5 E93A080000          <2>  jmp unhand2
  1692                              <2>  %assign i i+1
  1693 000011AA FA                  <2>  cli
  1694 000011AB C605[DF1C0000]5E    <2>  mov byte [intprob], i
  1695 000011B2 E92D080000          <2>  jmp unhand2
  1696                              <2>  %assign i i+1
  1697 000011B7 FA                  <2>  cli
  1698 000011B8 C605[DF1C0000]5F    <2>  mov byte [intprob], i
  1699 000011BF E920080000          <2>  jmp unhand2
  1700                              <2>  %assign i i+1
  1701 000011C4 FA                  <2>  cli
  1702 000011C5 C605[DF1C0000]60    <2>  mov byte [intprob], i
  1703 000011CC E913080000          <2>  jmp unhand2
  1704                              <2>  %assign i i+1
  1705 000011D1 FA                  <2>  cli
  1706 000011D2 C605[DF1C0000]61    <2>  mov byte [intprob], i
  1707 000011D9 E906080000          <2>  jmp unhand2
  1708                              <2>  %assign i i+1
  1709 000011DE FA                  <2>  cli
  1710 000011DF C605[DF1C0000]62    <2>  mov byte [intprob], i
  1711 000011E6 E9F9070000          <2>  jmp unhand2
  1712                              <2>  %assign i i+1
  1713 000011EB FA                  <2>  cli
  1714 000011EC C605[DF1C0000]63    <2>  mov byte [intprob], i
  1715 000011F3 E9EC070000          <2>  jmp unhand2
  1716                              <2>  %assign i i+1
  1717 000011F8 FA                  <2>  cli
  1718 000011F9 C605[DF1C0000]64    <2>  mov byte [intprob], i
  1719 00001200 E9DF070000          <2>  jmp unhand2
  1720                              <2>  %assign i i+1
  1721 00001205 FA                  <2>  cli
  1722 00001206 C605[DF1C0000]65    <2>  mov byte [intprob], i
  1723 0000120D E9D2070000          <2>  jmp unhand2
  1724                              <2>  %assign i i+1
  1725 00001212 FA                  <2>  cli
  1726 00001213 C605[DF1C0000]66    <2>  mov byte [intprob], i
  1727 0000121A E9C5070000          <2>  jmp unhand2
  1728                              <2>  %assign i i+1
  1729 0000121F FA                  <2>  cli
  1730 00001220 C605[DF1C0000]67    <2>  mov byte [intprob], i
  1731 00001227 E9B8070000          <2>  jmp unhand2
  1732                              <2>  %assign i i+1
  1733 0000122C FA                  <2>  cli
  1734 0000122D C605[DF1C0000]68    <2>  mov byte [intprob], i
  1735 00001234 E9AB070000          <2>  jmp unhand2
  1736                              <2>  %assign i i+1
  1737 00001239 FA                  <2>  cli
  1738 0000123A C605[DF1C0000]69    <2>  mov byte [intprob], i
  1739 00001241 E99E070000          <2>  jmp unhand2
  1740                              <2>  %assign i i+1
  1741 00001246 FA                  <2>  cli
  1742 00001247 C605[DF1C0000]6A    <2>  mov byte [intprob], i
  1743 0000124E E991070000          <2>  jmp unhand2
  1744                              <2>  %assign i i+1
  1745 00001253 FA                  <2>  cli
  1746 00001254 C605[DF1C0000]6B    <2>  mov byte [intprob], i
  1747 0000125B E984070000          <2>  jmp unhand2
  1748                              <2>  %assign i i+1
  1749 00001260 FA                  <2>  cli
  1750 00001261 C605[DF1C0000]6C    <2>  mov byte [intprob], i
  1751 00001268 E977070000          <2>  jmp unhand2
  1752                              <2>  %assign i i+1
  1753 0000126D FA                  <2>  cli
  1754 0000126E C605[DF1C0000]6D    <2>  mov byte [intprob], i
  1755 00001275 E96A070000          <2>  jmp unhand2
  1756                              <2>  %assign i i+1
  1757 0000127A FA                  <2>  cli
  1758 0000127B C605[DF1C0000]6E    <2>  mov byte [intprob], i
  1759 00001282 E95D070000          <2>  jmp unhand2
  1760                              <2>  %assign i i+1
  1761 00001287 FA                  <2>  cli
  1762 00001288 C605[DF1C0000]6F    <2>  mov byte [intprob], i
  1763 0000128F E950070000          <2>  jmp unhand2
  1764                              <2>  %assign i i+1
  1765 00001294 FA                  <2>  cli
  1766 00001295 C605[DF1C0000]70    <2>  mov byte [intprob], i
  1767 0000129C E943070000          <2>  jmp unhand2
  1768                              <2>  %assign i i+1
  1769 000012A1 FA                  <2>  cli
  1770 000012A2 C605[DF1C0000]71    <2>  mov byte [intprob], i
  1771 000012A9 E936070000          <2>  jmp unhand2
  1772                              <2>  %assign i i+1
  1773 000012AE FA                  <2>  cli
  1774 000012AF C605[DF1C0000]72    <2>  mov byte [intprob], i
  1775 000012B6 E929070000          <2>  jmp unhand2
  1776                              <2>  %assign i i+1
  1777 000012BB FA                  <2>  cli
  1778 000012BC C605[DF1C0000]73    <2>  mov byte [intprob], i
  1779 000012C3 E91C070000          <2>  jmp unhand2
  1780                              <2>  %assign i i+1
  1781 000012C8 FA                  <2>  cli
  1782 000012C9 C605[DF1C0000]74    <2>  mov byte [intprob], i
  1783 000012D0 E90F070000          <2>  jmp unhand2
  1784                              <2>  %assign i i+1
  1785 000012D5 FA                  <2>  cli
  1786 000012D6 C605[DF1C0000]75    <2>  mov byte [intprob], i
  1787 000012DD E902070000          <2>  jmp unhand2
  1788                              <2>  %assign i i+1
  1789 000012E2 FA                  <2>  cli
  1790 000012E3 C605[DF1C0000]76    <2>  mov byte [intprob], i
  1791 000012EA E9F5060000          <2>  jmp unhand2
  1792                              <2>  %assign i i+1
  1793 000012EF FA                  <2>  cli
  1794 000012F0 C605[DF1C0000]77    <2>  mov byte [intprob], i
  1795 000012F7 E9E8060000          <2>  jmp unhand2
  1796                              <2>  %assign i i+1
  1797 000012FC FA                  <2>  cli
  1798 000012FD C605[DF1C0000]78    <2>  mov byte [intprob], i
  1799 00001304 E9DB060000          <2>  jmp unhand2
  1800                              <2>  %assign i i+1
  1801 00001309 FA                  <2>  cli
  1802 0000130A C605[DF1C0000]79    <2>  mov byte [intprob], i
  1803 00001311 E9CE060000          <2>  jmp unhand2
  1804                              <2>  %assign i i+1
  1805 00001316 FA                  <2>  cli
  1806 00001317 C605[DF1C0000]7A    <2>  mov byte [intprob], i
  1807 0000131E E9C1060000          <2>  jmp unhand2
  1808                              <2>  %assign i i+1
  1809 00001323 FA                  <2>  cli
  1810 00001324 C605[DF1C0000]7B    <2>  mov byte [intprob], i
  1811 0000132B E9B4060000          <2>  jmp unhand2
  1812                              <2>  %assign i i+1
  1813 00001330 FA                  <2>  cli
  1814 00001331 C605[DF1C0000]7C    <2>  mov byte [intprob], i
  1815 00001338 E9A7060000          <2>  jmp unhand2
  1816                              <2>  %assign i i+1
  1817 0000133D FA                  <2>  cli
  1818 0000133E C605[DF1C0000]7D    <2>  mov byte [intprob], i
  1819 00001345 E99A060000          <2>  jmp unhand2
  1820                              <2>  %assign i i+1
  1821 0000134A FA                  <2>  cli
  1822 0000134B C605[DF1C0000]7E    <2>  mov byte [intprob], i
  1823 00001352 E98D060000          <2>  jmp unhand2
  1824                              <2>  %assign i i+1
  1825 00001357 FA                  <2>  cli
  1826 00001358 C605[DF1C0000]7F    <2>  mov byte [intprob], i
  1827 0000135F E980060000          <2>  jmp unhand2
  1828                              <2>  %assign i i+1
  1829 00001364 FA                  <2>  cli
  1830 00001365 C605[DF1C0000]80    <2>  mov byte [intprob], i
  1831 0000136C E973060000          <2>  jmp unhand2
  1832                              <2>  %assign i i+1
  1833 00001371 FA                  <2>  cli
  1834 00001372 C605[DF1C0000]81    <2>  mov byte [intprob], i
  1835 00001379 E966060000          <2>  jmp unhand2
  1836                              <2>  %assign i i+1
  1837 0000137E FA                  <2>  cli
  1838 0000137F C605[DF1C0000]82    <2>  mov byte [intprob], i
  1839 00001386 E959060000          <2>  jmp unhand2
  1840                              <2>  %assign i i+1
  1841 0000138B FA                  <2>  cli
  1842 0000138C C605[DF1C0000]83    <2>  mov byte [intprob], i
  1843 00001393 E94C060000          <2>  jmp unhand2
  1844                              <2>  %assign i i+1
  1845 00001398 FA                  <2>  cli
  1846 00001399 C605[DF1C0000]84    <2>  mov byte [intprob], i
  1847 000013A0 E93F060000          <2>  jmp unhand2
  1848                              <2>  %assign i i+1
  1849 000013A5 FA                  <2>  cli
  1850 000013A6 C605[DF1C0000]85    <2>  mov byte [intprob], i
  1851 000013AD E932060000          <2>  jmp unhand2
  1852                              <2>  %assign i i+1
  1853 000013B2 FA                  <2>  cli
  1854 000013B3 C605[DF1C0000]86    <2>  mov byte [intprob], i
  1855 000013BA E925060000          <2>  jmp unhand2
  1856                              <2>  %assign i i+1
  1857 000013BF FA                  <2>  cli
  1858 000013C0 C605[DF1C0000]87    <2>  mov byte [intprob], i
  1859 000013C7 E918060000          <2>  jmp unhand2
  1860                              <2>  %assign i i+1
  1861 000013CC FA                  <2>  cli
  1862 000013CD C605[DF1C0000]88    <2>  mov byte [intprob], i
  1863 000013D4 E90B060000          <2>  jmp unhand2
  1864                              <2>  %assign i i+1
  1865 000013D9 FA                  <2>  cli
  1866 000013DA C605[DF1C0000]89    <2>  mov byte [intprob], i
  1867 000013E1 E9FE050000          <2>  jmp unhand2
  1868                              <2>  %assign i i+1
  1869 000013E6 FA                  <2>  cli
  1870 000013E7 C605[DF1C0000]8A    <2>  mov byte [intprob], i
  1871 000013EE E9F1050000          <2>  jmp unhand2
  1872                              <2>  %assign i i+1
  1873 000013F3 FA                  <2>  cli
  1874 000013F4 C605[DF1C0000]8B    <2>  mov byte [intprob], i
  1875 000013FB E9E4050000          <2>  jmp unhand2
  1876                              <2>  %assign i i+1
  1877 00001400 FA                  <2>  cli
  1878 00001401 C605[DF1C0000]8C    <2>  mov byte [intprob], i
  1879 00001408 E9D7050000          <2>  jmp unhand2
  1880                              <2>  %assign i i+1
  1881 0000140D FA                  <2>  cli
  1882 0000140E C605[DF1C0000]8D    <2>  mov byte [intprob], i
  1883 00001415 E9CA050000          <2>  jmp unhand2
  1884                              <2>  %assign i i+1
  1885 0000141A FA                  <2>  cli
  1886 0000141B C605[DF1C0000]8E    <2>  mov byte [intprob], i
  1887 00001422 E9BD050000          <2>  jmp unhand2
  1888                              <2>  %assign i i+1
  1889 00001427 FA                  <2>  cli
  1890 00001428 C605[DF1C0000]8F    <2>  mov byte [intprob], i
  1891 0000142F E9B0050000          <2>  jmp unhand2
  1892                              <2>  %assign i i+1
  1893 00001434 FA                  <2>  cli
  1894 00001435 C605[DF1C0000]90    <2>  mov byte [intprob], i
  1895 0000143C E9A3050000          <2>  jmp unhand2
  1896                              <2>  %assign i i+1
  1897 00001441 FA                  <2>  cli
  1898 00001442 C605[DF1C0000]91    <2>  mov byte [intprob], i
  1899 00001449 E996050000          <2>  jmp unhand2
  1900                              <2>  %assign i i+1
  1901 0000144E FA                  <2>  cli
  1902 0000144F C605[DF1C0000]92    <2>  mov byte [intprob], i
  1903 00001456 E989050000          <2>  jmp unhand2
  1904                              <2>  %assign i i+1
  1905 0000145B FA                  <2>  cli
  1906 0000145C C605[DF1C0000]93    <2>  mov byte [intprob], i
  1907 00001463 E97C050000          <2>  jmp unhand2
  1908                              <2>  %assign i i+1
  1909 00001468 FA                  <2>  cli
  1910 00001469 C605[DF1C0000]94    <2>  mov byte [intprob], i
  1911 00001470 E96F050000          <2>  jmp unhand2
  1912                              <2>  %assign i i+1
  1913 00001475 FA                  <2>  cli
  1914 00001476 C605[DF1C0000]95    <2>  mov byte [intprob], i
  1915 0000147D E962050000          <2>  jmp unhand2
  1916                              <2>  %assign i i+1
  1917 00001482 FA                  <2>  cli
  1918 00001483 C605[DF1C0000]96    <2>  mov byte [intprob], i
  1919 0000148A E955050000          <2>  jmp unhand2
  1920                              <2>  %assign i i+1
  1921 0000148F FA                  <2>  cli
  1922 00001490 C605[DF1C0000]97    <2>  mov byte [intprob], i
  1923 00001497 E948050000          <2>  jmp unhand2
  1924                              <2>  %assign i i+1
  1925 0000149C FA                  <2>  cli
  1926 0000149D C605[DF1C0000]98    <2>  mov byte [intprob], i
  1927 000014A4 E93B050000          <2>  jmp unhand2
  1928                              <2>  %assign i i+1
  1929 000014A9 FA                  <2>  cli
  1930 000014AA C605[DF1C0000]99    <2>  mov byte [intprob], i
  1931 000014B1 E92E050000          <2>  jmp unhand2
  1932                              <2>  %assign i i+1
  1933 000014B6 FA                  <2>  cli
  1934 000014B7 C605[DF1C0000]9A    <2>  mov byte [intprob], i
  1935 000014BE E921050000          <2>  jmp unhand2
  1936                              <2>  %assign i i+1
  1937 000014C3 FA                  <2>  cli
  1938 000014C4 C605[DF1C0000]9B    <2>  mov byte [intprob], i
  1939 000014CB E914050000          <2>  jmp unhand2
  1940                              <2>  %assign i i+1
  1941 000014D0 FA                  <2>  cli
  1942 000014D1 C605[DF1C0000]9C    <2>  mov byte [intprob], i
  1943 000014D8 E907050000          <2>  jmp unhand2
  1944                              <2>  %assign i i+1
  1945 000014DD FA                  <2>  cli
  1946 000014DE C605[DF1C0000]9D    <2>  mov byte [intprob], i
  1947 000014E5 E9FA040000          <2>  jmp unhand2
  1948                              <2>  %assign i i+1
  1949 000014EA FA                  <2>  cli
  1950 000014EB C605[DF1C0000]9E    <2>  mov byte [intprob], i
  1951 000014F2 E9ED040000          <2>  jmp unhand2
  1952                              <2>  %assign i i+1
  1953 000014F7 FA                  <2>  cli
  1954 000014F8 C605[DF1C0000]9F    <2>  mov byte [intprob], i
  1955 000014FF E9E0040000          <2>  jmp unhand2
  1956                              <2>  %assign i i+1
  1957 00001504 FA                  <2>  cli
  1958 00001505 C605[DF1C0000]A0    <2>  mov byte [intprob], i
  1959 0000150C E9D3040000          <2>  jmp unhand2
  1960                              <2>  %assign i i+1
  1961 00001511 FA                  <2>  cli
  1962 00001512 C605[DF1C0000]A1    <2>  mov byte [intprob], i
  1963 00001519 E9C6040000          <2>  jmp unhand2
  1964                              <2>  %assign i i+1
  1965 0000151E FA                  <2>  cli
  1966 0000151F C605[DF1C0000]A2    <2>  mov byte [intprob], i
  1967 00001526 E9B9040000          <2>  jmp unhand2
  1968                              <2>  %assign i i+1
  1969 0000152B FA                  <2>  cli
  1970 0000152C C605[DF1C0000]A3    <2>  mov byte [intprob], i
  1971 00001533 E9AC040000          <2>  jmp unhand2
  1972                              <2>  %assign i i+1
  1973 00001538 FA                  <2>  cli
  1974 00001539 C605[DF1C0000]A4    <2>  mov byte [intprob], i
  1975 00001540 E99F040000          <2>  jmp unhand2
  1976                              <2>  %assign i i+1
  1977 00001545 FA                  <2>  cli
  1978 00001546 C605[DF1C0000]A5    <2>  mov byte [intprob], i
  1979 0000154D E992040000          <2>  jmp unhand2
  1980                              <2>  %assign i i+1
  1981 00001552 FA                  <2>  cli
  1982 00001553 C605[DF1C0000]A6    <2>  mov byte [intprob], i
  1983 0000155A E985040000          <2>  jmp unhand2
  1984                              <2>  %assign i i+1
  1985 0000155F FA                  <2>  cli
  1986 00001560 C605[DF1C0000]A7    <2>  mov byte [intprob], i
  1987 00001567 E978040000          <2>  jmp unhand2
  1988                              <2>  %assign i i+1
  1989 0000156C FA                  <2>  cli
  1990 0000156D C605[DF1C0000]A8    <2>  mov byte [intprob], i
  1991 00001574 E96B040000          <2>  jmp unhand2
  1992                              <2>  %assign i i+1
  1993 00001579 FA                  <2>  cli
  1994 0000157A C605[DF1C0000]A9    <2>  mov byte [intprob], i
  1995 00001581 E95E040000          <2>  jmp unhand2
  1996                              <2>  %assign i i+1
  1997 00001586 FA                  <2>  cli
  1998 00001587 C605[DF1C0000]AA    <2>  mov byte [intprob], i
  1999 0000158E E951040000          <2>  jmp unhand2
  2000                              <2>  %assign i i+1
  2001 00001593 FA                  <2>  cli
  2002 00001594 C605[DF1C0000]AB    <2>  mov byte [intprob], i
  2003 0000159B E944040000          <2>  jmp unhand2
  2004                              <2>  %assign i i+1
  2005 000015A0 FA                  <2>  cli
  2006 000015A1 C605[DF1C0000]AC    <2>  mov byte [intprob], i
  2007 000015A8 E937040000          <2>  jmp unhand2
  2008                              <2>  %assign i i+1
  2009 000015AD FA                  <2>  cli
  2010 000015AE C605[DF1C0000]AD    <2>  mov byte [intprob], i
  2011 000015B5 E92A040000          <2>  jmp unhand2
  2012                              <2>  %assign i i+1
  2013 000015BA FA                  <2>  cli
  2014 000015BB C605[DF1C0000]AE    <2>  mov byte [intprob], i
  2015 000015C2 E91D040000          <2>  jmp unhand2
  2016                              <2>  %assign i i+1
  2017 000015C7 FA                  <2>  cli
  2018 000015C8 C605[DF1C0000]AF    <2>  mov byte [intprob], i
  2019 000015CF E910040000          <2>  jmp unhand2
  2020                              <2>  %assign i i+1
  2021 000015D4 FA                  <2>  cli
  2022 000015D5 C605[DF1C0000]B0    <2>  mov byte [intprob], i
  2023 000015DC E903040000          <2>  jmp unhand2
  2024                              <2>  %assign i i+1
  2025 000015E1 FA                  <2>  cli
  2026 000015E2 C605[DF1C0000]B1    <2>  mov byte [intprob], i
  2027 000015E9 E9F6030000          <2>  jmp unhand2
  2028                              <2>  %assign i i+1
  2029 000015EE FA                  <2>  cli
  2030 000015EF C605[DF1C0000]B2    <2>  mov byte [intprob], i
  2031 000015F6 E9E9030000          <2>  jmp unhand2
  2032                              <2>  %assign i i+1
  2033 000015FB FA                  <2>  cli
  2034 000015FC C605[DF1C0000]B3    <2>  mov byte [intprob], i
  2035 00001603 E9DC030000          <2>  jmp unhand2
  2036                              <2>  %assign i i+1
  2037 00001608 FA                  <2>  cli
  2038 00001609 C605[DF1C0000]B4    <2>  mov byte [intprob], i
  2039 00001610 E9CF030000          <2>  jmp unhand2
  2040                              <2>  %assign i i+1
  2041 00001615 FA                  <2>  cli
  2042 00001616 C605[DF1C0000]B5    <2>  mov byte [intprob], i
  2043 0000161D E9C2030000          <2>  jmp unhand2
  2044                              <2>  %assign i i+1
  2045 00001622 FA                  <2>  cli
  2046 00001623 C605[DF1C0000]B6    <2>  mov byte [intprob], i
  2047 0000162A E9B5030000          <2>  jmp unhand2
  2048                              <2>  %assign i i+1
  2049 0000162F FA                  <2>  cli
  2050 00001630 C605[DF1C0000]B7    <2>  mov byte [intprob], i
  2051 00001637 E9A8030000          <2>  jmp unhand2
  2052                              <2>  %assign i i+1
  2053 0000163C FA                  <2>  cli
  2054 0000163D C605[DF1C0000]B8    <2>  mov byte [intprob], i
  2055 00001644 E99B030000          <2>  jmp unhand2
  2056                              <2>  %assign i i+1
  2057 00001649 FA                  <2>  cli
  2058 0000164A C605[DF1C0000]B9    <2>  mov byte [intprob], i
  2059 00001651 E98E030000          <2>  jmp unhand2
  2060                              <2>  %assign i i+1
  2061 00001656 FA                  <2>  cli
  2062 00001657 C605[DF1C0000]BA    <2>  mov byte [intprob], i
  2063 0000165E E981030000          <2>  jmp unhand2
  2064                              <2>  %assign i i+1
  2065 00001663 FA                  <2>  cli
  2066 00001664 C605[DF1C0000]BB    <2>  mov byte [intprob], i
  2067 0000166B E974030000          <2>  jmp unhand2
  2068                              <2>  %assign i i+1
  2069 00001670 FA                  <2>  cli
  2070 00001671 C605[DF1C0000]BC    <2>  mov byte [intprob], i
  2071 00001678 E967030000          <2>  jmp unhand2
  2072                              <2>  %assign i i+1
  2073 0000167D FA                  <2>  cli
  2074 0000167E C605[DF1C0000]BD    <2>  mov byte [intprob], i
  2075 00001685 E95A030000          <2>  jmp unhand2
  2076                              <2>  %assign i i+1
  2077 0000168A FA                  <2>  cli
  2078 0000168B C605[DF1C0000]BE    <2>  mov byte [intprob], i
  2079 00001692 E94D030000          <2>  jmp unhand2
  2080                              <2>  %assign i i+1
  2081 00001697 FA                  <2>  cli
  2082 00001698 C605[DF1C0000]BF    <2>  mov byte [intprob], i
  2083 0000169F E940030000          <2>  jmp unhand2
  2084                              <2>  %assign i i+1
  2085 000016A4 FA                  <2>  cli
  2086 000016A5 C605[DF1C0000]C0    <2>  mov byte [intprob], i
  2087 000016AC E933030000          <2>  jmp unhand2
  2088                              <2>  %assign i i+1
  2089 000016B1 FA                  <2>  cli
  2090 000016B2 C605[DF1C0000]C1    <2>  mov byte [intprob], i
  2091 000016B9 E926030000          <2>  jmp unhand2
  2092                              <2>  %assign i i+1
  2093 000016BE FA                  <2>  cli
  2094 000016BF C605[DF1C0000]C2    <2>  mov byte [intprob], i
  2095 000016C6 E919030000          <2>  jmp unhand2
  2096                              <2>  %assign i i+1
  2097 000016CB FA                  <2>  cli
  2098 000016CC C605[DF1C0000]C3    <2>  mov byte [intprob], i
  2099 000016D3 E90C030000          <2>  jmp unhand2
  2100                              <2>  %assign i i+1
  2101 000016D8 FA                  <2>  cli
  2102 000016D9 C605[DF1C0000]C4    <2>  mov byte [intprob], i
  2103 000016E0 E9FF020000          <2>  jmp unhand2
  2104                              <2>  %assign i i+1
  2105 000016E5 FA                  <2>  cli
  2106 000016E6 C605[DF1C0000]C5    <2>  mov byte [intprob], i
  2107 000016ED E9F2020000          <2>  jmp unhand2
  2108                              <2>  %assign i i+1
  2109 000016F2 FA                  <2>  cli
  2110 000016F3 C605[DF1C0000]C6    <2>  mov byte [intprob], i
  2111 000016FA E9E5020000          <2>  jmp unhand2
  2112                              <2>  %assign i i+1
  2113 000016FF FA                  <2>  cli
  2114 00001700 C605[DF1C0000]C7    <2>  mov byte [intprob], i
  2115 00001707 E9D8020000          <2>  jmp unhand2
  2116                              <2>  %assign i i+1
  2117 0000170C FA                  <2>  cli
  2118 0000170D C605[DF1C0000]C8    <2>  mov byte [intprob], i
  2119 00001714 E9CB020000          <2>  jmp unhand2
  2120                              <2>  %assign i i+1
  2121 00001719 FA                  <2>  cli
  2122 0000171A C605[DF1C0000]C9    <2>  mov byte [intprob], i
  2123 00001721 E9BE020000          <2>  jmp unhand2
  2124                              <2>  %assign i i+1
  2125 00001726 FA                  <2>  cli
  2126 00001727 C605[DF1C0000]CA    <2>  mov byte [intprob], i
  2127 0000172E E9B1020000          <2>  jmp unhand2
  2128                              <2>  %assign i i+1
  2129 00001733 FA                  <2>  cli
  2130 00001734 C605[DF1C0000]CB    <2>  mov byte [intprob], i
  2131 0000173B E9A4020000          <2>  jmp unhand2
  2132                              <2>  %assign i i+1
  2133 00001740 FA                  <2>  cli
  2134 00001741 C605[DF1C0000]CC    <2>  mov byte [intprob], i
  2135 00001748 E997020000          <2>  jmp unhand2
  2136                              <2>  %assign i i+1
  2137 0000174D FA                  <2>  cli
  2138 0000174E C605[DF1C0000]CD    <2>  mov byte [intprob], i
  2139 00001755 E98A020000          <2>  jmp unhand2
  2140                              <2>  %assign i i+1
  2141 0000175A FA                  <2>  cli
  2142 0000175B C605[DF1C0000]CE    <2>  mov byte [intprob], i
  2143 00001762 E97D020000          <2>  jmp unhand2
  2144                              <2>  %assign i i+1
  2145 00001767 FA                  <2>  cli
  2146 00001768 C605[DF1C0000]CF    <2>  mov byte [intprob], i
  2147 0000176F E970020000          <2>  jmp unhand2
  2148                              <2>  %assign i i+1
  2149 00001774 FA                  <2>  cli
  2150 00001775 C605[DF1C0000]D0    <2>  mov byte [intprob], i
  2151 0000177C E963020000          <2>  jmp unhand2
  2152                              <2>  %assign i i+1
  2153 00001781 FA                  <2>  cli
  2154 00001782 C605[DF1C0000]D1    <2>  mov byte [intprob], i
  2155 00001789 E956020000          <2>  jmp unhand2
  2156                              <2>  %assign i i+1
  2157 0000178E FA                  <2>  cli
  2158 0000178F C605[DF1C0000]D2    <2>  mov byte [intprob], i
  2159 00001796 E949020000          <2>  jmp unhand2
  2160                              <2>  %assign i i+1
  2161 0000179B FA                  <2>  cli
  2162 0000179C C605[DF1C0000]D3    <2>  mov byte [intprob], i
  2163 000017A3 E93C020000          <2>  jmp unhand2
  2164                              <2>  %assign i i+1
  2165 000017A8 FA                  <2>  cli
  2166 000017A9 C605[DF1C0000]D4    <2>  mov byte [intprob], i
  2167 000017B0 E92F020000          <2>  jmp unhand2
  2168                              <2>  %assign i i+1
  2169 000017B5 FA                  <2>  cli
  2170 000017B6 C605[DF1C0000]D5    <2>  mov byte [intprob], i
  2171 000017BD E922020000          <2>  jmp unhand2
  2172                              <2>  %assign i i+1
  2173 000017C2 FA                  <2>  cli
  2174 000017C3 C605[DF1C0000]D6    <2>  mov byte [intprob], i
  2175 000017CA E915020000          <2>  jmp unhand2
  2176                              <2>  %assign i i+1
  2177 000017CF FA                  <2>  cli
  2178 000017D0 C605[DF1C0000]D7    <2>  mov byte [intprob], i
  2179 000017D7 E908020000          <2>  jmp unhand2
  2180                              <2>  %assign i i+1
  2181 000017DC FA                  <2>  cli
  2182 000017DD C605[DF1C0000]D8    <2>  mov byte [intprob], i
  2183 000017E4 E9FB010000          <2>  jmp unhand2
  2184                              <2>  %assign i i+1
  2185 000017E9 FA                  <2>  cli
  2186 000017EA C605[DF1C0000]D9    <2>  mov byte [intprob], i
  2187 000017F1 E9EE010000          <2>  jmp unhand2
  2188                              <2>  %assign i i+1
  2189 000017F6 FA                  <2>  cli
  2190 000017F7 C605[DF1C0000]DA    <2>  mov byte [intprob], i
  2191 000017FE E9E1010000          <2>  jmp unhand2
  2192                              <2>  %assign i i+1
  2193 00001803 FA                  <2>  cli
  2194 00001804 C605[DF1C0000]DB    <2>  mov byte [intprob], i
  2195 0000180B E9D4010000          <2>  jmp unhand2
  2196                              <2>  %assign i i+1
  2197 00001810 FA                  <2>  cli
  2198 00001811 C605[DF1C0000]DC    <2>  mov byte [intprob], i
  2199 00001818 E9C7010000          <2>  jmp unhand2
  2200                              <2>  %assign i i+1
  2201 0000181D FA                  <2>  cli
  2202 0000181E C605[DF1C0000]DD    <2>  mov byte [intprob], i
  2203 00001825 E9BA010000          <2>  jmp unhand2
  2204                              <2>  %assign i i+1
  2205 0000182A FA                  <2>  cli
  2206 0000182B C605[DF1C0000]DE    <2>  mov byte [intprob], i
  2207 00001832 E9AD010000          <2>  jmp unhand2
  2208                              <2>  %assign i i+1
  2209 00001837 FA                  <2>  cli
  2210 00001838 C605[DF1C0000]DF    <2>  mov byte [intprob], i
  2211 0000183F E9A0010000          <2>  jmp unhand2
  2212                              <2>  %assign i i+1
  2213 00001844 FA                  <2>  cli
  2214 00001845 C605[DF1C0000]E0    <2>  mov byte [intprob], i
  2215 0000184C E993010000          <2>  jmp unhand2
  2216                              <2>  %assign i i+1
  2217 00001851 FA                  <2>  cli
  2218 00001852 C605[DF1C0000]E1    <2>  mov byte [intprob], i
  2219 00001859 E986010000          <2>  jmp unhand2
  2220                              <2>  %assign i i+1
  2221 0000185E FA                  <2>  cli
  2222 0000185F C605[DF1C0000]E2    <2>  mov byte [intprob], i
  2223 00001866 E979010000          <2>  jmp unhand2
  2224                              <2>  %assign i i+1
  2225 0000186B FA                  <2>  cli
  2226 0000186C C605[DF1C0000]E3    <2>  mov byte [intprob], i
  2227 00001873 E96C010000          <2>  jmp unhand2
  2228                              <2>  %assign i i+1
  2229 00001878 FA                  <2>  cli
  2230 00001879 C605[DF1C0000]E4    <2>  mov byte [intprob], i
  2231 00001880 E95F010000          <2>  jmp unhand2
  2232                              <2>  %assign i i+1
  2233 00001885 FA                  <2>  cli
  2234 00001886 C605[DF1C0000]E5    <2>  mov byte [intprob], i
  2235 0000188D E952010000          <2>  jmp unhand2
  2236                              <2>  %assign i i+1
  2237 00001892 FA                  <2>  cli
  2238 00001893 C605[DF1C0000]E6    <2>  mov byte [intprob], i
  2239 0000189A E945010000          <2>  jmp unhand2
  2240                              <2>  %assign i i+1
  2241 0000189F FA                  <2>  cli
  2242 000018A0 C605[DF1C0000]E7    <2>  mov byte [intprob], i
  2243 000018A7 E938010000          <2>  jmp unhand2
  2244                              <2>  %assign i i+1
  2245 000018AC FA                  <2>  cli
  2246 000018AD C605[DF1C0000]E8    <2>  mov byte [intprob], i
  2247 000018B4 E92B010000          <2>  jmp unhand2
  2248                              <2>  %assign i i+1
  2249 000018B9 FA                  <2>  cli
  2250 000018BA C605[DF1C0000]E9    <2>  mov byte [intprob], i
  2251 000018C1 E91E010000          <2>  jmp unhand2
  2252                              <2>  %assign i i+1
  2253 000018C6 FA                  <2>  cli
  2254 000018C7 C605[DF1C0000]EA    <2>  mov byte [intprob], i
  2255 000018CE E911010000          <2>  jmp unhand2
  2256                              <2>  %assign i i+1
  2257 000018D3 FA                  <2>  cli
  2258 000018D4 C605[DF1C0000]EB    <2>  mov byte [intprob], i
  2259 000018DB E904010000          <2>  jmp unhand2
  2260                              <2>  %assign i i+1
  2261 000018E0 FA                  <2>  cli
  2262 000018E1 C605[DF1C0000]EC    <2>  mov byte [intprob], i
  2263 000018E8 E9F7000000          <2>  jmp unhand2
  2264                              <2>  %assign i i+1
  2265 000018ED FA                  <2>  cli
  2266 000018EE C605[DF1C0000]ED    <2>  mov byte [intprob], i
  2267 000018F5 E9EA000000          <2>  jmp unhand2
  2268                              <2>  %assign i i+1
  2269 000018FA FA                  <2>  cli
  2270 000018FB C605[DF1C0000]EE    <2>  mov byte [intprob], i
  2271 00001902 E9DD000000          <2>  jmp unhand2
  2272                              <2>  %assign i i+1
  2273 00001907 FA                  <2>  cli
  2274 00001908 C605[DF1C0000]EF    <2>  mov byte [intprob], i
  2275 0000190F E9D0000000          <2>  jmp unhand2
  2276                              <2>  %assign i i+1
  2277 00001914 FA                  <2>  cli
  2278 00001915 C605[DF1C0000]F0    <2>  mov byte [intprob], i
  2279 0000191C E9C3000000          <2>  jmp unhand2
  2280                              <2>  %assign i i+1
  2281 00001921 FA                  <2>  cli
  2282 00001922 C605[DF1C0000]F1    <2>  mov byte [intprob], i
  2283 00001929 E9B6000000          <2>  jmp unhand2
  2284                              <2>  %assign i i+1
  2285 0000192E FA                  <2>  cli
  2286 0000192F C605[DF1C0000]F2    <2>  mov byte [intprob], i
  2287 00001936 E9A9000000          <2>  jmp unhand2
  2288                              <2>  %assign i i+1
  2289 0000193B FA                  <2>  cli
  2290 0000193C C605[DF1C0000]F3    <2>  mov byte [intprob], i
  2291 00001943 E99C000000          <2>  jmp unhand2
  2292                              <2>  %assign i i+1
  2293 00001948 FA                  <2>  cli
  2294 00001949 C605[DF1C0000]F4    <2>  mov byte [intprob], i
  2295 00001950 E98F000000          <2>  jmp unhand2
  2296                              <2>  %assign i i+1
  2297 00001955 FA                  <2>  cli
  2298 00001956 C605[DF1C0000]F5    <2>  mov byte [intprob], i
  2299 0000195D E982000000          <2>  jmp unhand2
  2300                              <2>  %assign i i+1
  2301 00001962 FA                  <2>  cli
  2302 00001963 C605[DF1C0000]F6    <2>  mov byte [intprob], i
  2303 0000196A E975000000          <2>  jmp unhand2
  2304                              <2>  %assign i i+1
  2305 0000196F FA                  <2>  cli
  2306 00001970 C605[DF1C0000]F7    <2>  mov byte [intprob], i
  2307 00001977 E968000000          <2>  jmp unhand2
  2308                              <2>  %assign i i+1
  2309 0000197C FA                  <2>  cli
  2310 0000197D C605[DF1C0000]F8    <2>  mov byte [intprob], i
  2311 00001984 E95B000000          <2>  jmp unhand2
  2312                              <2>  %assign i i+1
  2313 00001989 FA                  <2>  cli
  2314 0000198A C605[DF1C0000]F9    <2>  mov byte [intprob], i
  2315 00001991 E94E000000          <2>  jmp unhand2
  2316                              <2>  %assign i i+1
  2317 00001996 FA                  <2>  cli
  2318 00001997 C605[DF1C0000]FA    <2>  mov byte [intprob], i
  2319 0000199E E941000000          <2>  jmp unhand2
  2320                              <2>  %assign i i+1
  2321 000019A3 FA                  <2>  cli
  2322 000019A4 C605[DF1C0000]FB    <2>  mov byte [intprob], i
  2323 000019AB E934000000          <2>  jmp unhand2
  2324                              <2>  %assign i i+1
  2325 000019B0 FA                  <2>  cli
  2326 000019B1 C605[DF1C0000]FC    <2>  mov byte [intprob], i
  2327 000019B8 E927000000          <2>  jmp unhand2
  2328                              <2>  %assign i i+1
  2329 000019BD FA                  <2>  cli
  2330 000019BE C605[DF1C0000]FD    <2>  mov byte [intprob], i
  2331 000019C5 E91A000000          <2>  jmp unhand2
  2332                              <2>  %assign i i+1
  2333 000019CA FA                  <2>  cli
  2334 000019CB C605[DF1C0000]FE    <2>  mov byte [intprob], i
  2335 000019D2 E90D000000          <2>  jmp unhand2
  2336                              <2>  %assign i i+1
  2337 000019D7 FA                  <2>  cli
  2338 000019D8 C605[DF1C0000]FF    <2>  mov byte [intprob], i
  2339 000019DF E900000000          <2>  jmp unhand2
  2340                              <2>  %assign i i+1
  2341                              <1> unhand2:
  2342 000019E4 FA                  <1> 	cli
  2343 000019E5 1E                  <1> 	push ds
  2344 000019E6 06                  <1> 	push es
  2345 000019E7 0FA0                <1> 	push fs
  2346 000019E9 0FA8                <1> 	push gs
  2347 000019EB 16                  <1> 	push ss
  2348 000019EC 60                  <1> 	pushad
  2349 000019ED 803D[E14E0000]00    <1> 	cmp byte [guion], 0
  2350 000019F4 0F8432000000        <1> 	je near noguiunhandstuff
  2351 000019FA 66C705[D91C0000]08- <1> 	mov word [locunhandy], 8
  2352 00001A02 00                  <1>
  2353 00001A03 66C705[DB1C0000]08- <1> 	mov word [locunhandx], 8
  2354 00001A0B 00                  <1>
  2355 00001A0C 668B1D[AC4D0000]    <1> 	mov bx, [background]
  2356 00001A13 66891D[DD1C0000]    <1> 	mov [backgroundcache], bx
  2357 00001A1A C605[B0470000]01    <1> 	mov byte [mousedisabled],1
  2358 00001A21 66BB00F8            <1> 	mov bx, 1111100000000000b
  2359 00001A25 66891D[AC4D0000]    <1> 	mov [background], bx
  2360                              <1> noguiunhandstuff:
  2361 00001A2C 89E6                <1> 	mov esi, esp
  2362 00001A2E 8935[CD1C0000]      <1> 	mov [espfirst], esi
  2363 00001A34 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  2364 00001A3A 8935[C91C0000]      <1> 	mov [esploc], esi
  2365 00001A40 BE[E81C0000]        <1> 	mov esi, unhandmsg
  2366 00001A45 8935[D11C0000]      <1> 	mov [esiloc], esi
  2367 00001A4B 31C9                <1> 	xor ecx, ecx
  2368 00001A4D 8A0D[DF1C0000]      <1> 	mov cl, [intprob]
  2369 00001A53 BB[7B200000]        <1> 	mov ebx, errortypes
  2370 00001A58 C1E102              <1> 	shl ecx, 2
  2371 00001A5B 01CB                <1> 	add ebx, ecx
  2372 00001A5D 81FB[BB200000]      <1> 	cmp ebx, errortypesend
  2373 00001A63 7205                <1> 	jb gooderrortype
  2374 00001A65 BB[BB200000]        <1> 	mov ebx, errortypesend
  2375                              <1> gooderrortype:
  2376 00001A6A 8B33                <1> 	mov esi, [ebx]
  2377 00001A6C 803D[E14E0000]00    <1> 	cmp byte [guion], 0
  2378 00001A73 0F842D000000        <1> 	je near errortext
  2379 00001A79 668B0D[D91C0000]    <1> 	mov cx, [locunhandy]
  2380 00001A80 668B15[DB1C0000]    <1> 	mov dx, [locunhandx]
  2381 00001A87 66B80100            <1> 	mov ax, 1
  2382 00001A8B 6631DB              <1> 	xor bx, bx
  2383 00001A8E E8123E0000          <1> 	call showstring2
  2384 00001A93 66890D[D91C0000]    <1> 	mov [locunhandy], cx
  2385 00001A9A 668915[DB1C0000]    <1> 	mov [locunhandx], dx
  2386 00001AA1 E905000000          <1> 	jmp errortextdone
  2387                              <1> errortext:
  2388 00001AA6 E84C0F0000          <1> 	call print		;;get the error message and print it
  2389                              <1> errortextdone:
  2390 00001AAB 31C9                <1> 	xor ecx, ecx
  2391 00001AAD 8A0D[DF1C0000]      <1> 	mov cl, [intprob]
  2392 00001AB3 E8AA010000          <1> 	call expdump
  2393                              <1> dumpstack:
  2394 00001AB8 8B35[C91C0000]      <1> 	mov esi, [esploc]
  2395 00001ABE 39E6                <1> 	cmp esi, esp
  2396 00001AC0 7216                <1> 	jb donedump
  2397 00001AC2 368B0E              <1> 	mov ecx, [ss:esi]
  2398 00001AC5 81EE04000000        <1> 	sub esi, 4
  2399 00001ACB 8935[C91C0000]      <1> 	mov [esploc], esi
  2400 00001AD1 E88C010000          <1> 	call expdump
  2401 00001AD6 EBE0                <1> 	jmp dumpstack
  2402                              <1> donedump:
  2403 00001AD8 0F20C1              <1> 	mov ecx, cr0
  2404 00001ADB E882010000          <1> 	call expdump
  2405 00001AE0 0F20D1              <1> 	mov ecx, cr2
  2406 00001AE3 E87A010000          <1> 	call expdump
  2407 00001AE8 0F20D9              <1> 	mov ecx, cr3
  2408 00001AEB E872010000          <1> 	call expdump
  2409 00001AF0 0F20E1              <1> 	mov ecx, cr4
  2410 00001AF3 E86A010000          <1> 	call expdump
  2411 00001AF8 8B35[C91C0000]      <1> 	mov esi, [esploc]
  2412 00001AFE 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  2413 00001B03 81C710000000        <1> 	add edi, 16
  2414 00001B09 893D[E41C0000]      <1> 	mov [codelocend], edi
  2415 00001B0F 81EF20000000        <1> 	sub edi, 32
  2416                              <1> dumpcodeloop:
  2417 00001B15 893D[E01C0000]      <1> 	mov [codeloc], edi
  2418 00001B1B 8B0F                <1> 	mov ecx, [edi]
  2419 00001B1D E840010000          <1> 	call expdump
  2420 00001B22 8B3D[E01C0000]      <1> 	mov edi, [codeloc]
  2421 00001B28 81C704000000        <1> 	add edi, 4
  2422 00001B2E 3B3D[E41C0000]      <1> 	cmp edi, [codelocend]
  2423 00001B34 72DF                <1> 	jb dumpcodeloop
  2424 00001B36 BE[F11B0000]        <1> 	mov esi, backtoosmsg
  2425 00001B3B 803D[E14E0000]00    <1> 	cmp byte [guion], 0
  2426 00001B42 750A                <1> 	jne guibacktomsg
  2427 00001B44 E8AE0E0000          <1> 	call print
  2428 00001B49 E91A000000          <1> 	jmp backtomsgdone
  2429                              <1> guibacktomsg:
  2430 00001B4E 668B15[DB1C0000]    <1> 	mov dx, [locunhandx]
  2431 00001B55 668B0D[D91C0000]    <1> 	mov cx, [locunhandy]
  2432 00001B5C 66B80100            <1> 	mov ax, 1
  2433 00001B60 6631DB              <1> 	xor bx, bx
  2434 00001B63 E83D3D0000          <1> 	call showstring2
  2435                              <1> backtomsgdone:
  2436 00001B68 30C0                <1> 	xor al, al
  2437 00001B6A E8360E0000          <1> 	call int302
  2438 00001B6F 803D[DF1C0000]03    <1> 	cmp byte [intprob], 3
  2439 00001B76 753C                <1> 	jne nodebugint
  2440 00001B78 803D[E14E0000]00    <1> 	cmp byte [guion], 0
  2441 00001B7F 7422                <1> 	je nodebuggui
  2442 00001B81 668B1D[DD1C0000]    <1> 	mov bx, [backgroundcache]
  2443 00001B88 66891D[AC4D0000]    <1> 	mov [background], bx
  2444 00001B8F 6631DB              <1> 	xor bx, bx
  2445 00001B92 C605[B0470000]00    <1> 	mov byte [mousedisabled], 0
  2446 00001B99 E8D1310000          <1> 	call guiclear
  2447 00001B9E E8AE390000          <1> 	call reloadallgraphics
  2448                              <1> nodebuggui:
  2449 00001BA3 8B35[CD1C0000]      <1> 	mov esi, [espfirst]
  2450 00001BA9 89F4                <1> 	mov esp, esi
  2451 00001BAB 61                  <1> 	popad
  2452 00001BAC 17                  <1> 	pop ss
  2453 00001BAD 0FA9                <1> 	pop gs
  2454 00001BAF 0FA1                <1> 	pop fs
  2455 00001BB1 07                  <1> 	pop es
  2456 00001BB2 1F                  <1> 	pop ds
  2457 00001BB3 CF                  <1> 	iret
  2458                              <1> nodebugint:
  2459 00001BB4 61                  <1> 	popad
  2460 00001BB5 17                  <1> 	pop ss
  2461 00001BB6 0FA9                <1> 	pop gs
  2462 00001BB8 0FA1                <1> 	pop fs
  2463 00001BBA 07                  <1> 	pop es
  2464 00001BBB 1F                  <1> 	pop ds
  2465 00001BBC 803D[E14E0000]00    <1> 	cmp byte [guion], 0
  2466 00001BC3 7427                <1> 	je returnunhandgui
  2467 00001BC5 668B1D[DD1C0000]    <1> 	mov bx, [backgroundcache]
  2468 00001BCC 66891D[AC4D0000]    <1> 	mov [background], bx
  2469 00001BD3 6631DB              <1> 	xor bx, bx
  2470 00001BD6 C605[B0470000]00    <1> 	mov byte [mousedisabled], 0
  2471 00001BDD E88D310000          <1> 	call guiclear
  2472 00001BE2 E86A390000          <1> 	call reloadallgraphics
  2473 00001BE7 E9C2310000          <1> 	jmp gui
  2474                              <1> returnunhandgui:
  2475 00001BEC E95D140000          <1> 	jmp nwcmd
  2476 00001BF1 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10,13
  2477 00001BFA 737420616E79207072- <1>
  2478 00001C03 6F626C656D7320696E- <1>
  2479 00001C0C 207468652049737375- <1>
  2480 00001C15 65732073656374696F- <1>
  2481 00001C1E 6E20617420736F6C6C- <1>
  2482 00001C27 65726F732E676F6F67- <1>
  2483 00001C30 6C65636F64652E636F- <1>
  2484 00001C39 6D0A0D              <1>
  2485 00001C3C 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,13,0
  2486 00001C45 206B657920746F2072- <1>
  2487 00001C4E 657475726E20746F20- <1>
  2488 00001C57 536F6C6C65724F530A- <1>
  2489 00001C60 0D00                <1>
  2490                              <1> expdump:
  2491 00001C62 8B35[D11C0000]      <1> 	mov esi, [esiloc]
  2492 00001C68 89F7                <1> 	mov edi, esi
  2493 00001C6A 81C70F000000        <1> 	add edi, 15
  2494 00001C70 81C604000000        <1> 	add esi, 4
  2495 00001C76 893D[D11C0000]      <1> 	mov [esiloc], edi
  2496 00001C7C 81EF03000000        <1> 	sub edi, 3
  2497 00001C82 E82D180000          <1> 	call converthex
  2498 00001C87 81EE04000000        <1> 	sub esi, 4
  2499 00001C8D 803D[E14E0000]00    <1> 	cmp byte [guion], 0
  2500 00001C94 0F8429000000        <1> 	je near expdumptext
  2501 00001C9A 668B0D[D91C0000]    <1> 	mov cx, [locunhandy]
  2502 00001CA1 668B15[DB1C0000]    <1> 	mov dx, [locunhandx]
  2503 00001CA8 66B80100            <1> 	mov ax, 1
  2504 00001CAC 6631DB              <1> 	xor bx, bx
  2505 00001CAF E8F13B0000          <1> 	call showstring2
  2506 00001CB4 66890D[D91C0000]    <1> 	mov [locunhandy], cx
  2507 00001CBB 668915[DB1C0000]    <1> 	mov [locunhandx], dx
  2508 00001CC2 C3                  <1> 	ret
  2509                              <1> expdumptext:
  2510 00001CC3 E82F0D0000          <1> 	call print
  2511 00001CC8 C3                  <1> 	ret
  2512 00001CC9 00000000            <1> esploc dd 0
  2513 00001CCD 00000000            <1> espfirst dd 0
  2514 00001CD1 00000000            <1> esiloc dd 0
  2515 00001CD5 00000000            <1> esiregbuf dd 0
  2516 00001CD9 0100                <1> locunhandy dw 1
  2517 00001CDB 0100                <1> locunhandx dw 1
  2518 00001CDD 0000                <1> backgroundcache dw 0
  2519 00001CDF 00                  <1> intprob db 0
  2520 00001CE0 00000000            <1> codeloc dd 0
  2521 00001CE4 00000000            <1> codelocend dd 0
  2522                              <1> 	unhandmsg:	
  2523 00001CE8 494E543D3030303030- <1> 			db "INT=00000000",10,13,0
  2524 00001CF1 3030300A0D00        <1>
  2525                              <1> unhndrg:
  2526 00001CF7 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  2527 00001D00 303030202000<rept>  <1>
  2528 00001D60 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2529 00001D69 3030300A0D00        <1>
  2530 00001D6F FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  2531 00001D78 303030202000<rept>  <1>
  2532 00001DD8 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2533 00001DE1 3030300A0D00        <1>
  2534 00001DE7 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  2535 00001DF0 303030202000<rept>  <1>
  2536 00001E50 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2537 00001E59 3030300A0D00        <1>
  2538 00001E5F FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  2539 00001E68 303030202000<rept>  <1>
  2540 00001EC8 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2541 00001ED1 3030300A0D00        <1>
  2542                              <1> unhandregs:
  2543 00001ED7 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  2544 00001EE0 303030202000        <1>
  2545 00001EE6 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  2546 00001EEF 303030202000        <1>
  2547 00001EF5 4549503D3030303030- <1> 			db "EIP=00000000",10,13,0
  2548 00001EFE 3030300A0D00        <1>
  2549 00001F04 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  2550 00001F0D 303030202000        <1>
  2551 00001F13 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  2552 00001F1C 303030202000        <1>
  2553 00001F22 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  2554 00001F2B 303030202000        <1>
  2555 00001F31 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  2556 00001F3A 303030202000        <1>
  2557 00001F40 53533A3D3030303030- <1> 			db "SS:=00000000",10,13,0
  2558 00001F49 3030300A0D00        <1>
  2559 00001F4F 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  2560 00001F58 303030202000        <1>
  2561 00001F5E 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  2562 00001F67 303030202000        <1>
  2563 00001F6D 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  2564 00001F76 303030202000        <1>
  2565 00001F7C 4542583D3030303030- <1> 			db "EBX=00000000",10,13,0
  2566 00001F85 3030300A0D00        <1>
  2567 00001F8B 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  2568 00001F94 303030202000        <1>
  2569 00001F9A 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  2570 00001FA3 303030202000        <1>
  2571 00001FA9 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  2572 00001FB2 303030202000        <1>
  2573 00001FB8 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",10,13,0
  2574 00001FC1 3030300A0D00        <1>
  2575 00001FC7 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  2576 00001FD0 303030202000        <1>
  2577 00001FD6 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  2578 00001FDF 303030202000        <1>
  2579 00001FE5 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  2580 00001FEE 303030202000        <1>
  2581 00001FF4 4352343D3030303030- <1> 			db "CR4=00000000",10,13,0
  2582 00001FFD 3030300A0D00        <1>
  2583 00002003 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  2584 0000200C 303030202000<rept>  <1>
  2585 00002021 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  2586 0000202A 30303020FF00        <1>
  2587 00002030 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  2588 00002039 3030305D2000        <1>
  2589 0000203F FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  2590 00002048 303030202000<rept>  <1>
  2591 0000206C FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2592 00002075 3030300A0D00        <1>
  2593                              <1> unhandmsgend:
  2594                              <1> 
  2595                              <1> errortypes:
  2596 0000207B [BF200000]          <1> 			dd err0
  2597 0000207F [26210000]          <1> 			dd err1
  2598 00002083 [89210000]          <1> 			dd err2
  2599 00002087 [DF210000]          <1> 			dd err3
  2600 0000208B [46220000]          <1> 			dd err4
  2601 0000208F [9A220000]          <1> 			dd err5
  2602 00002093 [07230000]          <1> 			dd err6
  2603 00002097 [72230000]          <1> 			dd err7
  2604 0000209B [BE230000]          <1> 			dd err8
  2605 0000209F [1D240000]          <1> 			dd err9
  2606 000020A3 [78240000]          <1> 			dd err10
  2607 000020A7 [C5240000]          <1> 			dd err11
  2608 000020AB [17250000]          <1> 			dd err12
  2609 000020AF [72250000]          <1> 			dd err13
  2610 000020B3 [D7250000]          <1> 			dd err14
  2611 000020B7 [15260000]          <1> 			dd err15
  2612                              <1> errortypesend:
  2613 000020BB [A3260000]          <1> 			dd unknownerror
  2614                              <1> 			
  2615 000020BF 4469766973696F6E20- <1> err0	db "Division by zero:",10,13
  2616 000020C8 6279207A65726F3A0A- <1>
  2617 000020D1 0D                  <1>
  2618 000020D2 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10,13
  2619 000020DB 6C79206C696D2061F6- <1>
  2620 000020E4 78203D20EC20776865- <1>
  2621 000020ED 6E206120697320616E- <1>
  2622 000020F6 79207265616C206E75- <1>
  2623 000020FF 6D6265722E20486170- <1>
  2624 00002108 707920456173746572- <1>
  2625 00002111 210A0D              <1>
  2626 00002114 202020202020202020- <1> 		db "            x",26,"0",10,13,0
  2627 0000211D 202020781A300A0D00  <1>
  2628                              <1> 		
  2629 00002126 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10,13
  2630 0000212F 65702F427265616B70- <1>
  2631 00002138 6F696E743A0A0D      <1>
  2632 0000213F 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,13,0
  2633 00002148 696E74206661756C74- <1>
  2634 00002151 2C20627265616B706F- <1>
  2635 0000215A 696E7420747261702C- <1>
  2636 00002163 206F722073696E676C- <1>
  2637 0000216C 652D73746570207472- <1>
  2638 00002175 617020776173207472- <1>
  2639 0000217E 696767657265642E0A- <1>
  2640 00002187 0D00                <1>
  2641                              <1> 		
  2642 00002189 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10,13
  2643 00002192 6C6520696E74657272- <1>
  2644 0000219B 7570743A0A0D        <1>
  2645 000021A1 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked",10,13,0
  2646 000021AA 6520696E7465727275- <1>
  2647 000021B3 707420776173207472- <1>
  2648 000021BC 696767657265642074- <1>
  2649 000021C5 68617420636F756C64- <1>
  2650 000021CE 206E6F74206265206D- <1>
  2651 000021D7 61736B65640A0D00    <1>
  2652                              <1> 		
  2653 000021DF 427265616B706F696E- <1> err3	db "Breakpoint:",10,13
  2654 000021E8 743A0A0D            <1>
  2655 000021EC 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10,13
  2656 000021F5 727275707420697320- <1>
  2657 000021FE 7573656420696E2070- <1>
  2658 00002207 726F6772616D732074- <1>
  2659 00002210 6F2073686F77207468- <1>
  2660 00002219 6520737461636B2061- <1>
  2661 00002222 6E6420726567697374- <1>
  2662 0000222B 65727320616E642063- <1>
  2663 00002234 616E2062650A0D      <1>
  2664 0000223B 69676E6F7265642E0A- <1> 		db "ignored.",10,13,0
  2665 00002244 0D00                <1>
  2666                              <1> 		
  2667 00002246 4F766572666C6F773A- <1> err4	db "Overflow:",10,13
  2668 0000224F 0A0D                <1>
  2669 00002251 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,13,0
  2670 0000225A 73736F722072616E20- <1>
  2671 00002263 696E746F20616E2049- <1>
  2672 0000226C 4E544F20696E737472- <1>
  2673 00002275 756374696F6E207769- <1>
  2674 0000227E 746820746865206F76- <1>
  2675 00002287 6572666C6F7720666C- <1>
  2676 00002290 6167207365742E0A0D- <1>
  2677 00002299 00                  <1>
  2678                              <1> 		
  2679 0000229A 426F756E6473206368- <1> err5	db "Bounds check:",10,13
  2680 000022A3 65636B3A0A0D        <1>
  2681 000022A9 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10,13
  2682 000022B2 73736F72207265626F- <1>
  2683 000022BB 756E6465642066726F- <1>
  2684 000022C4 6D206120424F554E44- <1>
  2685 000022CD 20696E737472756374- <1>
  2686 000022D6 696F6E2072756E206F- <1>
  2687 000022DF 6E20616E206F706572- <1>
  2688 000022E8 616E64207468617420- <1>
  2689 000022F1 776173206F75740A0D  <1>
  2690 000022FA 6F6620626F756E6473- <1> 		db "of bounds.",10,13,0
  2691 00002303 2E0A0D00            <1>
  2692                              <1> 		
  2693 00002307 496E76616C6964206F- <1> err6	db "Invalid opcode:",10,13
  2694 00002310 70636F64653A0A0D    <1>
  2695 00002318 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10,13
  2696 00002321 73736F722068617320- <1>
  2697 0000232A 6E6F20696465612077- <1>
  2698 00002333 686174206974207761- <1>
  2699 0000233C 7320747279696E6720- <1>
  2700 00002345 746F20657865637574- <1>
  2701 0000234E 652E20446F6E277420- <1>
  2702 00002357 72756E205353453420- <1>
  2703 00002360 636F64650A0D        <1>
  2704 00002366 6F6E20343836277321- <1> 		db "on 486's!",10,13,0
  2705 0000236F 0A0D00              <1>
  2706                              <1> 		
  2707 00002372 436F70726F63657373- <1> err7	db "Coprocessor not available:",10,13
  2708 0000237B 6F72206E6F74206176- <1>
  2709 00002384 61696C61626C653A0A- <1>
  2710 0000238D 0D                  <1>
  2711 0000238E 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,13,0
  2712 00002397 206B6E6F7720746865- <1>
  2713 000023A0 7920646F6E2774206D- <1>
  2714 000023A9 616B652074686F7365- <1>
  2715 000023B2 20616E796D6F726521- <1>
  2716 000023BB 0A0D00              <1>
  2717                              <1> 		
  2718 000023BE 446F75626C65206661- <1> err8	db "Double fault:",10,13
  2719 000023C7 756C743A0A0D        <1>
  2720 000023CD 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,13,0
  2721 000023D6 74696F6E2068616E64- <1>
  2722 000023DF 6C657220636F756C64- <1>
  2723 000023E8 206E6F742068616E64- <1>
  2724 000023F1 6C6520746861742069- <1>
  2725 000023FA 7420636F756C64206E- <1>
  2726 00002403 6F742068616E646C65- <1>
  2727 0000240C 20616E206578636570- <1>
  2728 00002415 74696F6E2E0A0D00    <1>
  2729                              <1> 		
  2730 0000241D 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,13,0
  2731 00002426 6F72207365676D656E- <1>
  2732 0000242F 74206F76657272756E- <1>
  2733 00002438 3A0A0D00            <1>
  2734 0000243C 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,13,0
  2735 00002445 722068617070656E73- <1>
  2736 0000244E 20696E206D6F646572- <1>
  2737 00002457 6E20636F6D70757465- <1>
  2738 00002460 72732C20616E64206E- <1>
  2739 00002469 657665722073686F75- <1>
  2740 00002472 6C642E0A0D00        <1>
  2741                              <1> 
  2742 00002478 496E76616C69642054- <1> err10	db "Invalid TSS:",10,13
  2743 00002481 53533A0A0D          <1>
  2744 00002486 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,13,0
  2745 0000248F 686174207761732073- <1>
  2746 00002498 776974636865642074- <1>
  2747 000024A1 6F20697320696E7661- <1>
  2748 000024AA 6C69642E204E6F7468- <1>
  2749 000024B3 696E672066756E6E79- <1>
  2750 000024BC 20686572652E0A0D00  <1>
  2751                              <1> 		
  2752 000024C5 5365676D656E74206E- <1> err11	db "Segment not present:",10,13
  2753 000024CE 6F742070726573656E- <1>
  2754 000024D7 743A0A0D            <1>
  2755 000024DB 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,13,0
  2756 000024E4 6E7420626974206F66- <1>
  2757 000024ED 20746865207365676D- <1>
  2758 000024F6 656E74206465736372- <1>
  2759 000024FF 6970746F7220697320- <1>
  2760 00002508 73657420746F207A65- <1>
  2761 00002511 726F2E0A0D00        <1>
  2762                              <1> 		
  2763 00002517 537461636B20657863- <1> err12	db "Stack exception:",10,13
  2764 00002520 657074696F6E3A0A0D  <1>
  2765 00002529 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,13,0
  2766 00002532 7363726970746F7220- <1>
  2767 0000253B 697320696E76616C69- <1>
  2768 00002544 64206F72206E6F7420- <1>
  2769 0000254D 70726573656E74206F- <1>
  2770 00002556 7220697473206C696D- <1>
  2771 0000255F 697420697320746F6F- <1>
  2772 00002568 20736D616C6C2E0A0D- <1>
  2773 00002571 00                  <1>
  2774                              <1> 		
  2775 00002572 47656E6572616C2070- <1> err13	db "General protection violation:",10,13
  2776 0000257B 726F74656374696F6E- <1>
  2777 00002584 2076696F6C6174696F- <1>
  2778 0000258D 6E3A0A0D            <1>
  2779 00002591 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,13,0
  2780 0000259A 746564207468652063- <1>
  2781 000025A3 6F6D70757465722E20- <1>
  2782 000025AC 537465702061776179- <1>
  2783 000025B5 20736C6F776C792E20- <1>
  2784 000025BE 546865204642492069- <1>
  2785 000025C7 73206F6E2069747320- <1>
  2786 000025D0 7761792E0A0D00      <1>
  2787                              <1> 		
  2788 000025D7 50616765206661756C- <1> err14	db "Page fault:",10,13
  2789 000025E0 743A0A0D            <1>
  2790 000025E4 546865207061676520- <1> 		db "The page that was requested was not available.",10,13,0
  2791 000025ED 746861742077617320- <1>
  2792 000025F6 726571756573746564- <1>
  2793 000025FF 20776173206E6F7420- <1>
  2794 00002608 617661696C61626C65- <1>
  2795 00002611 2E0A0D00            <1>
  2796                              <1> 		
  2797 00002615 526573657276656420- <1> err15	db "Reserved for Plan R:",10,13
  2798 0000261E 666F7220506C616E20- <1>
  2799 00002627 523A0A0D            <1>
  2800 0000262B 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10,13
  2801 00002634 727275707420697320- <1>
  2802 0000263D 726573657276656420- <1>
  2803 00002646 666F72207573616765- <1>
  2804 0000264F 206F6E6C7920627920- <1>
  2805 00002658 746865206D696C6974- <1>
  2806 00002661 617279207768656E20- <1>
  2807 0000266A 6974206973206E6563- <1>
  2808 00002673 6573736172790A0D    <1>
  2809 0000267B 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,13,0
  2810 00002684 746520612066756C6C- <1>
  2811 0000268D 2D7363616C6520636F- <1>
  2812 00002696 757020642782746174- <1>
  2813 0000269F 2E0A0D00            <1>
  2814                              <1> 		
  2815 000026A3 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10,13
  2816 000026AC 68656C6C206A757374- <1>
  2817 000026B5 2068617070656E6564- <1>
  2818 000026BE 3F2049732065766572- <1>
  2819 000026C7 796F6E65206F6B6179- <1>
  2820 000026D0 3F2048617264206472- <1>
  2821 000026D9 6976653F2056696465- <1>
  2822 000026E2 6F20636172643F0A0D  <1>
  2823 000026EB 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,13,0
  2824 000026F4 726520796F75207468- <1>
  2825 000026FD 6572653F0A0D00      <1>
  2826                                      %include 'source/ints.asm'
  2827                              <1> newints:	;;for great justice
  2828 00002704 80FC00              <1> 	cmp ah, 0		;;originally 0
  2829 00002707 0F845B000000        <1> 	je near intx0   ;;0=kills app
  2830 0000270D 80FC01              <1> 	cmp ah, 1		;;originally 1
  2831 00002710 0F8457000000        <1> 	je near intx1   ;;3=print string
  2832 00002716 80FC02              <1> 	cmp ah, 2		;;originally 2
  2833 00002719 0F8458000000        <1> 	je near intx2	;;4=read string
  2834 0000271F 80FC03              <1> 	cmp ah, 3		;;originally 3
  2835 00002722 0F8459000000        <1> 	je near intx3	;;6=clear screen
  2836 00002728 80FC04              <1> 	cmp ah, 4		;;originally 4
  2837 0000272B 0F845A000000        <1> 	je near intx4	;;5=read and print string
  2838 00002731 80FC05              <1> 	cmp ah, 5		;;originally 5		
  2839 00002734 0F845B000000        <1> 	je near intx5	;;2=get char
  2840 0000273A 80FC06              <1> 	cmp ah, 6		;;originally 6
  2841 0000273D 0F845C000000        <1> 	je near intx6	;;1=print char
  2842 00002743 80FC07              <1> 	cmp ah, 7
  2843 00002746 0F845D000000        <1> 	je near intx7	;;read file
  2844 0000274C 80FC09              <1> 	cmp ah, 9
  2845 0000274F 0F845E000000        <1> 	je near intx9	;;convert number to string
  2846 00002755 80FC0A              <1> 	cmp ah, 10
  2847 00002758 0F846D000000        <1> 	je near intx10	;;convert string to number
  2848 0000275E 80FC0B              <1> 	cmp ah, 11
  2849 00002761 0F846A000000        <1> 	je near intx11	;;create thread
  2850 00002767 C3                  <1> 	ret
  2851                              <1> 	
  2852                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  2853                              <1> 	
  2854                              <1> intx0:
  2855 00002768 E9E1080000          <1> 	jmp nwcmd
  2856                              <1> intx1:
  2857 0000276D E88C020000          <1> 	call int303
  2858 00002772 E9D5DCFFFF          <1> 	jmp timerinterrupt
  2859                              <1> intx2:
  2860 00002777 E8AA020000          <1> 	call int304
  2861 0000277C E9CBDCFFFF          <1> 	jmp timerinterrupt
  2862                              <1> intx3:
  2863 00002781 E88E050000          <1> 	call int306
  2864 00002786 E9C1DCFFFF          <1> 	jmp timerinterrupt
  2865                              <1> intx4:
  2866 0000278B E8D5020000          <1> 	call int305
  2867 00002790 E9B7DCFFFF          <1> 	jmp timerinterrupt
  2868                              <1> intx5:
  2869 00002795 E80B020000          <1> 	call int302
  2870 0000279A E9ADDCFFFF          <1> 	jmp timerinterrupt
  2871                              <1> intx6:
  2872 0000279F E83D000000          <1> 	call int301
  2873 000027A4 E9A3DCFFFF          <1> 	jmp timerinterrupt
  2874                              <1> intx7:
  2875 000027A9 E859410000          <1> 	call loadfile
  2876 000027AE E999DCFFFF          <1> 	jmp timerinterrupt
  2877                              <1> intx9:
  2878 000027B3 3C00                <1> 	cmp al, 0
  2879 000027B5 750A                <1> 	jne intx9B
  2880 000027B7 E8460E0000          <1> 	call showdec
  2881 000027BC E98BDCFFFF          <1> 	jmp timerinterrupt
  2882                              <1> intx9B:
  2883 000027C1 E8980D0000          <1> 	call showhex
  2884 000027C6 E981DCFFFF          <1> 	jmp timerinterrupt
  2885                              <1> intx10:
  2886 000027CB E8CB0E0000          <1> 	call cnvrttxt	;the string goes into esi, number into ecx
  2887 000027D0 CF                  <1> 	iret
  2888                              <1> intx11:
  2889 000027D1 E86A470000          <1> 	call threadfork
  2890 000027D6 CF                  <1> 	iret
  2891                              <1> 	
  2892 000027D7 0000                <1> linebeginpos dw 0
  2893 000027D9 0000                <1> videobufpos: dw 0
  2894 000027DB 0000                <1> charpos db 0,0
  2895 000027DD 501E                <1> charxy db 80,30
  2896 000027DF 0000                <1> charbuf dw 0
  2897                              <1> 	
  2898                              <1> int301:	;;print char, char in al, modifier in bl, will run videobufcopy if called as is
  2899 000027E1 E808000000          <1> 	call int301prnt
  2900 000027E6 E876050000          <1> 	call termcopy
  2901 000027EB C3                  <1> 	ret
  2902 000027EC 00                  <1> termguion db 0
  2903 000027ED 00                  <1> termcopyon db 0
  2904                              <1> int301prnt:
  2905 000027EE 88DC                <1> 	mov ah, bl
  2906 000027F0 66A3[DF270000]      <1> 	mov [charbuf], ax
  2907 000027F6 31DB                <1> 	xor ebx, ebx
  2908 000027F8 668B1D[D9270000]    <1> 	mov bx, [videobufpos]
  2909 000027FF BF[8F1D0000]        <1> 	mov edi, videobuf
  2910 00002804 01DF                <1> 	add edi, ebx
  2911 00002806 66A1[5F2D0000]      <1> 	mov ax, [removedvideo]
  2912 0000280C 668907              <1> 	mov [edi], ax
  2913 0000280F 66A1[DF270000]      <1> 	mov ax, [charbuf]
  2914 00002815 31D2                <1> 	xor edx, edx
  2915 00002817 668B15[DB270000]    <1> 	mov dx, [charpos]
  2916 0000281E 31C9                <1> 	xor ecx, ecx
  2917 00002820 668B0D[DD270000]    <1> 	mov cx, [charxy]
  2918 00002827 3C09                <1> 	cmp al, 9
  2919 00002829 0F8463000000        <1> 	je near int301tab
  2920 0000282F 3C0D                <1> 	cmp al, 13
  2921 00002831 0F8478000000        <1> 	je near int301cr
  2922 00002837 3C0A                <1> 	cmp al, 10
  2923 00002839 0F84A1000000        <1> 	je near int301nl
  2924 0000283F 3C08                <1> 	cmp al, 8
  2925 00002841 0F847C000000        <1> 	je near int301bs
  2926 00002847 3CFF                <1> 	cmp al, 255		;;null character
  2927 00002849 0F841B000000        <1> 	je near donescr
  2928 0000284F 668907              <1> 	mov [edi], ax
  2929 00002852 81C702000000        <1> 	add edi, 2
  2930 00002858 FEC2                <1> 	inc dl
  2931                              <1> donecrnl:
  2932 0000285A 38CA                <1> 	cmp dl, cl
  2933 0000285C 0F83AF000000        <1> 	jae near int301eol
  2934                              <1> doneeol:
  2935 00002862 38EE                <1> 	cmp dh, ch
  2936 00002864 0F83C5000000        <1> 	jae near int301scr	
  2937                              <1> donescr:
  2938 0000286A 89FB                <1> 	mov ebx, edi
  2939 0000286C 668B07              <1> 	mov ax, [edi]
  2940 0000286F 66A3[5F2D0000]      <1> 	mov [removedvideo], ax
  2941 00002875 81EB[8F1D0000]      <1> 	sub ebx, videobuf
  2942 0000287B 66891D[D9270000]    <1> 	mov [videobufpos], bx
  2943 00002882 668915[DB270000]    <1> 	mov [charpos], dx
  2944 00002889 66A1[DF270000]      <1> 	mov ax, [charbuf]
  2945 0000288F 88E3                <1> 	mov bl, ah
  2946 00002891 C3                  <1> 	ret
  2947                              <1> 	
  2948                              <1> 	int301tab:
  2949 00002892 47                  <1> 		inc edi
  2950 00002893 FEC2                <1> 		inc dl	;make sure it works
  2951 00002895 C1EF04              <1> 		shr edi, 4
  2952 00002898 C1E704              <1> 		shl edi, 4
  2953 0000289B 81C710000000        <1> 		add edi, 16
  2954 000028A1 C0EA03              <1> 		shr dl, 3
  2955 000028A4 C0E203              <1> 		shl dl, 3
  2956 000028A7 80C208              <1> 		add dl, 8
  2957 000028AA 4F                  <1> 		dec edi
  2958 000028AB FECA                <1> 		dec dl
  2959 000028AD EBAB                <1> 		jmp donecrnl
  2960                              <1> 	
  2961                              <1> 	int301cr:
  2962 000028AF 30D2                <1> 		xor dl, dl
  2963 000028B1 31DB                <1> 		xor ebx, ebx
  2964 000028B3 BF[8F1D0000]        <1> 		mov edi, videobuf
  2965 000028B8 668B1D[D7270000]    <1> 		mov bx, [linebeginpos]
  2966 000028BF 01DF                <1> 		add edi, ebx
  2967 000028C1 EB97                <1> 		jmp donecrnl
  2968                              <1> 			
  2969                              <1> 	int301bs:
  2970 000028C3 80FA00              <1> 		cmp dl, 0
  2971 000028C6 740D                <1> 		je int301backline
  2972                              <1> 	int301nobmr:
  2973 000028C8 FECA                <1> 		dec dl
  2974 000028CA 6631C0              <1> 		xor ax, ax
  2975 000028CD 81EF02000000        <1> 		sub edi, 2
  2976 000028D3 EB85                <1> 		jmp donecrnl
  2977                              <1> 	int301backline:
  2978 000028D5 88CA                <1> 		mov dl, cl
  2979 000028D7 80FE00              <1> 		cmp dh, 0
  2980 000028DA 74EC                <1> 		je int301nobmr
  2981 000028DC FECE                <1> 		dec dh
  2982 000028DE EBE8                <1> 		jmp int301nobmr
  2983                              <1> 		
  2984                              <1> 	int301nl:
  2985 000028E0 FEC6                <1> 		inc dh
  2986 000028E2 31DB                <1> 		xor ebx, ebx
  2987 000028E4 88CB                <1> 		mov bl, cl
  2988 000028E6 66D1E3              <1> 		shl bx, 1
  2989 000028E9 BF[8F1D0000]        <1> 		mov edi, videobuf
  2990 000028EE 66031D[D9270000]    <1> 		add bx, [videobufpos]
  2991 000028F5 01DF                <1> 		add edi, ebx
  2992 000028F7 31DB                <1> 		xor ebx, ebx
  2993 000028F9 88CB                <1> 		mov bl, cl
  2994 000028FB 66D1E3              <1> 		shl bx, 1
  2995 000028FE 66031D[D7270000]    <1> 		add bx, [linebeginpos]
  2996 00002905 66891D[D7270000]    <1> 		mov [linebeginpos], bx
  2997 0000290C E949FFFFFF          <1> 		jmp donecrnl
  2998                              <1> 		
  2999                              <1> 	int301eol:
  3000 00002911 30D2                <1> 		xor dl, dl
  3001 00002913 FEC6                <1> 		inc dh
  3002 00002915 31DB                <1> 		xor ebx, ebx
  3003 00002917 88CB                <1> 		mov bl, cl
  3004 00002919 66D1E3              <1> 		shl bx, 1
  3005 0000291C 66031D[D7270000]    <1> 		add bx, [linebeginpos]
  3006 00002923 66891D[D7270000]    <1> 		mov [linebeginpos], bx
  3007 0000292A E933FFFFFF          <1> 		jmp doneeol
  3008                              <1> 	int301scr:
  3009 0000292F FECE                <1> 		dec dh
  3010 00002931 BF[8F1D0000]        <1> 		mov edi, videobuf
  3011 00002936 31DB                <1> 		xor ebx, ebx
  3012 00002938 88CB                <1> 		mov bl, cl
  3013 0000293A 66D1E3              <1> 		shl bx, 1
  3014 0000293D 01FB                <1> 		add ebx, edi
  3015                              <1> 	intscrollloop:
  3016 0000293F 668B03              <1> 		mov ax, [ebx]
  3017 00002942 668907              <1> 		mov [edi], ax
  3018 00002945 81C702000000        <1> 		add edi, 2
  3019 0000294B 81C302000000        <1> 		add ebx, 2
  3020 00002951 FEC9                <1> 		dec cl
  3021 00002953 80F900              <1> 		cmp cl, 0
  3022 00002956 75E7                <1> 		jne intscrollloop
  3023 00002958 8A0D[DD270000]      <1> 		mov cl, [charxy]
  3024 0000295E FECD                <1> 		dec ch
  3025 00002960 80FD01              <1> 		cmp ch, 1
  3026 00002963 77DA                <1> 		ja intscrollloop
  3027 00002965 6631C0              <1> 		xor ax, ax
  3028 00002968 81EF[8F1D0000]      <1> 		sub edi, videobuf
  3029 0000296E 66893D[D7270000]    <1> 		mov [linebeginpos], di
  3030 00002975 81C7[8F1D0000]      <1> 		add edi, videobuf
  3031 0000297B 89FB                <1> 		mov ebx, edi
  3032                              <1> 	intloopclear:
  3033 0000297D 668903              <1> 		mov [ebx], ax
  3034 00002980 81C302000000        <1> 		add ebx, 2
  3035 00002986 FEC9                <1> 		dec cl
  3036 00002988 80F900              <1> 		cmp cl, 0
  3037 0000298B 75F0                <1> 		jne intloopclear
  3038 0000298D FECD                <1> 		dec ch
  3039 0000298F 80FD00              <1> 		cmp ch, 0
  3040 00002992 75E9                <1> 		jne intloopclear
  3041 00002994 668B0D[DD270000]    <1> 		mov cx, [charxy]
  3042 0000299B E9CAFEFFFF          <1> 		jmp donescr
  3043                              <1> 		
  3044                              <1> 		
  3045 000029A0 0000                <1> lastkey db 0,0
  3046 000029A2 00                  <1> trans db 0
  3047                              <1> getkey:
  3048 000029A3 30C0                <1> 	xor al, al
  3049                              <1> 	int302:		;;get char, if al is 0, wait for key
  3050 000029A5 C605[A2290000]01    <1> 		mov byte [trans], 1
  3051 000029AC 3C01                <1> 		cmp al, 1
  3052 000029AE 7307                <1> 		jae transcheck
  3053 000029B0 C605[A2290000]00    <1> 		mov byte [trans], 0
  3054                              <1> 	transcheck:
  3055 000029B7 E81A1E0000          <1> 		call guistartin
  3056 000029BC 8A3D[A2290000]      <1> 		mov bh, [trans]
  3057 000029C2 66A1[A0290000]      <1> 		mov ax, [lastkey]
  3058 000029C8 80FC1C              <1> 		cmp ah, 1Ch
  3059 000029CB 7419                <1> 		je int302enter
  3060 000029CD 803D[B1470000]E0    <1> 		cmp byte [specialkey], 0xE0
  3061 000029D4 7504                <1> 		jne nospecialtrans
  3062 000029D6 88C3                <1> 		mov bl, al
  3063 000029D8 30C0                <1> 		xor al, al
  3064                              <1> 	nospecialtrans:
  3065 000029DA 08C7                <1> 		or bh, al
  3066 000029DC 80FF00              <1> 		cmp bh, 0
  3067 000029DF 74D6                <1> 		je transcheck
  3068 000029E1 E902000000          <1> 		jmp int302end
  3069                              <1> 	int302enter:
  3070 000029E6 B00D                <1> 		mov al, 13
  3071                              <1> 	int302end:
  3072 000029E8 C3                  <1> 		ret
  3073                              <1> 	
  3074 000029E9 00                  <1> endkey303 db 0
  3075                              <1> 	printquiet:
  3076 000029EA 6631C0              <1> 		xor ax, ax
  3077 000029ED 66BB0700            <1> 		mov bx, 7
  3078 000029F1 E818000000          <1> 		call int303b
  3079 000029F6 C3                  <1> 		ret
  3080                              <1>     print:
  3081 000029F7 6631C0              <1> 		xor ax, ax
  3082 000029FA 66BB0700            <1> 		mov bx, 7
  3083                              <1> 	int303:	;;print line, al=last key,bl=modifier, esi=buffer
  3084 000029FE A2[E9290000]        <1> 		mov [endkey303], al
  3085 00002A03 E806000000          <1> 		call int303b
  3086 00002A08 E854030000          <1> 		call termcopy
  3087 00002A0D C3                  <1> 		ret
  3088                              <1> 	int303b:
  3089 00002A0E 8A06                <1> 		mov al, [esi]
  3090 00002A10 3A05[E9290000]      <1> 		cmp al, [endkey303]
  3091 00002A16 7408                <1> 		je doneint303
  3092 00002A18 E8D1FDFFFF          <1> 		call int301prnt
  3093 00002A1D 46                  <1> 		inc esi
  3094 00002A1E EBEE                <1> 		jmp int303b
  3095                              <1> 	doneint303:
  3096 00002A20 C3                  <1> 		ret
  3097                              <1> 		
  3098 00002A21 00                  <1> endkey304 db 0
  3099 00002A22 00000000            <1> endbuffer304 dd 0
  3100                              <1> 	int304:	;;get line, al=last key, esi = buffer, edi = endbuffer
  3101 00002A26 A2[212A0000]        <1> 		mov [endkey304], al
  3102 00002A2B 893D[222A0000]      <1> 		mov [endbuffer304], edi
  3103                              <1> 	int304b:
  3104 00002A31 56                  <1> 		push esi
  3105 00002A32 30C0                <1> 		xor al, al
  3106 00002A34 E86CFFFFFF          <1> 		call int302
  3107 00002A39 5E                  <1> 		pop esi
  3108 00002A3A 8806                <1> 		mov [esi], al
  3109 00002A3C 46                  <1> 		inc esi
  3110 00002A3D 3B35[222A0000]      <1> 		cmp esi, [endbuffer304]
  3111 00002A43 7308                <1> 		jae int304done
  3112 00002A45 3A05[212A0000]      <1> 		cmp al, [endkey304]
  3113 00002A4B 75E4                <1> 		jne int304b
  3114                              <1> 	int304done:
  3115 00002A4D 4E                  <1> 		dec esi
  3116 00002A4E C60600              <1> 		mov byte [esi], 0
  3117 00002A51 C3                  <1> 	ret
  3118                              <1> 	
  3119 00002A52 00                  <1> endkey305 db 0
  3120 00002A53 00                  <1> modkey305 db 0
  3121 00002A54 00000000            <1> firstesi305 dd 0
  3122 00002A58 00                  <1> commandedit db 0
  3123 00002A59 00                  <1> txtmask db 0
  3124 00002A5A 00000000            <1> buftxtloc dd 0
  3125 00002A5E 00000000            <1> endbuffer305 dd 0
  3126 00002A62 082000              <1> backcursor db 8," ",0
  3127                              <1> 	int305:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  3128 00002A65 8935[5A2A0000]      <1> 		mov [buftxtloc], esi
  3129 00002A6B A2[522A0000]        <1> 		mov [endkey305], al
  3130 00002A70 881D[532A0000]      <1> 		mov [modkey305], bl
  3131 00002A76 8935[542A0000]      <1> 		mov [firstesi305], esi
  3132 00002A7C 893D[5E2A0000]      <1> 		mov [endbuffer305], edi
  3133                              <1> 	int305b:
  3134 00002A82 56                  <1> 		push esi
  3135 00002A83 B001                <1> 		mov al, 1
  3136 00002A85 E81BFFFFFF          <1> 		call int302	;then get it
  3137 00002A8A 5E                  <1> 		pop esi
  3138 00002A8B 80FC48              <1> 		cmp ah, 0x48
  3139 00002A8E 0F846F010000        <1> 		je near int305up
  3140 00002A94 80FC50              <1> 		cmp ah, 0x50
  3141 00002A97 0F8449010000        <1> 		je near int305down
  3142 00002A9D 80FC4D              <1> 		cmp ah, 0x4D
  3143 00002AA0 0F84FE000000        <1> 		je near int305right
  3144 00002AA6 80FC4B              <1> 		cmp ah, 0x4B
  3145 00002AA9 0F84BC000000        <1> 		je near int305left
  3146 00002AAF 3C08                <1> 		cmp al, 8
  3147 00002AB1 0F843F020000        <1> 		je near int305bscheck
  3148 00002AB7 3C00                <1> 		cmp al, 0
  3149 00002AB9 74C7                <1> 		je int305b
  3150 00002ABB 80FC00              <1> 		cmp ah, 0
  3151 00002ABE 74C2                <1> 		je int305b
  3152 00002AC0 8806                <1> 		mov [esi], al
  3153 00002AC2 46                  <1> 		inc esi
  3154                              <1> 	bscheckequal:
  3155 00002AC3 8A1D[532A0000]      <1> 		mov bl, [modkey305]
  3156 00002AC9 8A3D[592A0000]      <1> 		mov bh, [txtmask]
  3157 00002ACF 80FF00              <1> 		cmp bh, 0
  3158 00002AD2 7402                <1> 		je nomasktxt
  3159 00002AD4 88F8                <1> 		mov al, bh
  3160                              <1> 	nomasktxt:
  3161 00002AD6 E806FDFFFF          <1> 		call int301
  3162 00002ADB 56                  <1> 		push esi
  3163 00002ADC 66A3[692B0000]      <1> 		mov [int305axcache], ax
  3164 00002AE2 8A25[522A0000]      <1> 		mov ah, [endkey305]
  3165 00002AE8 38E0                <1> 		cmp al, ah
  3166 00002AEA 7429                <1> 		je nobackprintbuftxt2
  3167 00002AEC BE[701A0000]        <1> 		mov esi, buftxt2
  3168 00002AF1 E8F4FEFFFF          <1> 		call printquiet
  3169 00002AF6 B020                <1> 		mov al, " "
  3170 00002AF8 E8F1FCFFFF          <1> 		call int301prnt
  3171 00002AFD B008                <1> 		mov al, 8
  3172 00002AFF 81FE[701A0000]      <1> 		cmp esi, buftxt2
  3173 00002B05 740E                <1> 		je nobackprintbuftxt2
  3174                              <1> 	backprintbuftxt2:
  3175 00002B07 E8E2FCFFFF          <1> 		call int301prnt
  3176 00002B0C 4E                  <1> 		dec esi
  3177 00002B0D 81FE[701A0000]      <1> 		cmp esi, buftxt2
  3178 00002B13 77F2                <1> 		ja backprintbuftxt2
  3179                              <1> 	nobackprintbuftxt2:
  3180 00002B15 E8C7FCFFFF          <1> 		call int301
  3181 00002B1A 5E                  <1> 		pop esi
  3182 00002B1B 3B35[5E2A0000]      <1> 		cmp esi, [endbuffer305]
  3183 00002B21 0F8314000000        <1> 		jae near doneint305
  3184 00002B27 66A1[692B0000]      <1> 		mov ax, [int305axcache]
  3185 00002B2D 8A25[522A0000]      <1> 		mov ah, [endkey305]
  3186 00002B33 38E0                <1> 		cmp al, ah
  3187 00002B35 0F8547FFFFFF        <1> 		jne int305b
  3188                              <1> 	doneint305:
  3189 00002B3B 4E                  <1> 		dec esi
  3190 00002B3C BF[701A0000]        <1> 		mov edi, buftxt2
  3191                              <1> 	copylaterstuff:
  3192 00002B41 8A07                <1> 		mov al, [edi]
  3193 00002B43 3C00                <1> 		cmp al, 0
  3194 00002B45 7406                <1> 		je nocopylaterstuff
  3195 00002B47 8806                <1> 		mov [esi], al
  3196 00002B49 47                  <1> 		inc edi
  3197 00002B4A 46                  <1> 		inc esi
  3198 00002B4B EBF4                <1> 		jmp copylaterstuff
  3199                              <1> 	nocopylaterstuff:
  3200 00002B4D C60600              <1> 		mov byte [esi], 0
  3201 00002B50 E801000000          <1> 		call clearbuftxt2
  3202 00002B55 C3                  <1> 		ret
  3203                              <1> 	
  3204                              <1> 	clearbuftxt2:
  3205 00002B56 30C0                <1> 		xor al, al
  3206 00002B58 BF[701A0000]        <1> 		mov edi, buftxt2
  3207                              <1> 	clearbuftxt2lp:
  3208 00002B5D 8807                <1> 		mov [edi], al
  3209 00002B5F 47                  <1> 		inc edi
  3210 00002B60 81FF[7A1B0000]      <1> 		cmp edi, buftxt
  3211 00002B66 75F5                <1> 		jne clearbuftxt2lp
  3212 00002B68 C3                  <1> 		ret
  3213                              <1> 		
  3214 00002B69 0000                <1> 	int305axcache dw 0
  3215                              <1> 		
  3216                              <1> 	int305left:
  3217 00002B6B 3B35[5A2A0000]      <1> 		cmp esi, [buftxtloc]
  3218 00002B71 0F840BFFFFFF        <1> 		je near int305b
  3219 00002B77 BF[701A0000]        <1> 		mov edi, buftxt2
  3220 00002B7C 8A07                <1> 		mov al, [edi]
  3221                              <1> 	shiftbuftxt2:
  3222 00002B7E 3C00                <1> 		cmp al, 0
  3223 00002B80 7409                <1> 		je noshiftbuftxt2
  3224 00002B82 47                  <1> 		inc edi
  3225 00002B83 8A27                <1> 		mov ah, [edi]
  3226 00002B85 8807                <1> 		mov [edi], al
  3227 00002B87 88E0                <1> 		mov al, ah
  3228 00002B89 EBF3                <1> 		jmp shiftbuftxt2
  3229                              <1> 	noshiftbuftxt2:
  3230 00002B8B BF[701A0000]        <1> 		mov edi, buftxt2
  3231 00002B90 4E                  <1> 		dec esi
  3232 00002B91 8A06                <1> 		mov al, [esi]
  3233 00002B93 8807                <1> 		mov [edi], al
  3234 00002B95 C60600              <1> 		mov byte [esi], 0
  3235 00002B98 B008                <1> 		mov al, 8
  3236 00002B9A E842FCFFFF          <1> 		call int301
  3237 00002B9F E9DEFEFFFF          <1> 		jmp int305b
  3238                              <1> 		
  3239                              <1> 	int305right:
  3240 00002BA4 BF[701A0000]        <1> 		mov edi, buftxt2
  3241 00002BA9 8A07                <1> 		mov al, [edi]
  3242 00002BAB 3C00                <1> 		cmp al, 0
  3243 00002BAD 0F84CFFEFFFF        <1> 		je near int305b
  3244 00002BB3 8806                <1> 		mov [esi], al
  3245                              <1> 	shiftbuftxt2lft:
  3246 00002BB5 3C00                <1> 		cmp al, 0
  3247 00002BB7 7408                <1> 		je noshiftbuftxt2lft
  3248 00002BB9 47                  <1> 		inc edi
  3249 00002BBA 8A07                <1> 		mov al, [edi]
  3250 00002BBC 8847FF              <1> 		mov [edi - 1], al
  3251 00002BBF EBF4                <1> 		jmp shiftbuftxt2lft
  3252                              <1> 	noshiftbuftxt2lft:
  3253 00002BC1 8A06                <1> 		mov al, [esi]
  3254 00002BC3 46                  <1> 		inc esi
  3255 00002BC4 8A1D[532A0000]      <1> 		mov bl, [modkey305]
  3256 00002BCA E812FCFFFF          <1> 		call int301
  3257 00002BCF E9AEFEFFFF          <1> 		jmp int305b
  3258                              <1> 		
  3259                              <1> 	int305downbck:
  3260 00002BD4 FECC                <1> 		dec ah
  3261 00002BD6 8825[582A0000]      <1> 		mov [commandedit], ah
  3262 00002BDC E83A000000          <1> 		call int305bckspc
  3263 00002BE1 E99CFEFFFF          <1> 		jmp int305b
  3264                              <1> 	
  3265                              <1> 	int305down:
  3266 00002BE6 8A25[582A0000]      <1> 		mov ah, [commandedit]
  3267 00002BEC 80FC01              <1> 		cmp ah, 1
  3268 00002BEF 0F868DFEFFFF        <1> 		jbe near int305b
  3269 00002BF5 80FC02              <1> 		cmp ah, 2
  3270 00002BF8 74DA                <1> 		je int305downbck
  3271 00002BFA 80EC02              <1> 		sub ah, 2
  3272 00002BFD 8825[582A0000]      <1> 		mov [commandedit], ah
  3273                              <1> 		
  3274                              <1> 	int305up:
  3275                              <1> 		;cmp bl, 0xE0
  3276                              <1> 		;jne int305b
  3277 00002C03 30C0                <1> 		xor al, al
  3278 00002C05 3805[582A0000]      <1> 		cmp [commandedit], al
  3279 00002C0B 0F8471FEFFFF        <1> 		je near int305b
  3280 00002C11 E805000000          <1> 		call int305bckspc
  3281 00002C16 E93C000000          <1> 		jmp getcurrentcommandstr
  3282                              <1> 	int305bckspc:
  3283 00002C1B 3B35[5A2A0000]      <1> 		cmp esi, [buftxtloc]
  3284 00002C21 7426                <1> 		je noint305upbck
  3285                              <1> 	int305upbckspclp:
  3286 00002C23 B008                <1> 		mov al, 8
  3287 00002C25 8A1D[532A0000]      <1> 		mov bl, [modkey305]
  3288 00002C2B E8BEFBFFFF          <1> 		call int301prnt
  3289 00002C30 B020                <1> 		mov al, " "
  3290 00002C32 E8B7FBFFFF          <1> 		call int301prnt
  3291 00002C37 B008                <1> 		mov al, 8
  3292 00002C39 E8A3FBFFFF          <1> 		call int301
  3293 00002C3E 4E                  <1> 		dec esi
  3294 00002C3F 3B35[5A2A0000]      <1> 		cmp esi, [buftxtloc]
  3295 00002C45 7402                <1> 		je noint305upbck
  3296 00002C47 EBDA                <1> 		jmp int305upbckspclp
  3297                              <1> 	noint305upbck:
  3298 00002C49 8B3D[5B6E0000]      <1> 		mov edi, [currentcommandpos]
  3299 00002C4F 81C7[5F6E0000]      <1> 		add edi, commandbuf
  3300 00002C55 4F                  <1> 		dec edi
  3301 00002C56 C3                  <1> 		ret
  3302                              <1> 	getcurrentcommandstr:
  3303 00002C57 8A25[582A0000]      <1> 		mov ah, [commandedit]
  3304 00002C5D FE05[582A0000]      <1> 		inc byte [commandedit]
  3305                              <1> 	getccmdlp:
  3306 00002C63 4F                  <1> 		dec edi
  3307 00002C64 8A07                <1> 		mov al, [edi]
  3308 00002C66 81FF[5F6E0000]      <1> 		cmp edi, commandbuf
  3309 00002C6C 7231                <1> 		jb getcmdresetcommandbuf
  3310 00002C6E 81EF[5F6E0000]      <1> 		sub edi, commandbuf
  3311 00002C74 3B3D[5B6E0000]      <1> 		cmp edi, [currentcommandpos]
  3312 00002C7A 0F8402FEFFFF        <1> 		je near int305b
  3313 00002C80 81C7[5F6E0000]      <1> 		add edi, commandbuf
  3314 00002C86 3C00                <1> 		cmp al, 0
  3315 00002C88 75D9                <1> 		jne getccmdlp
  3316 00002C8A FECC                <1> 		dec ah
  3317 00002C8C 80FC00              <1> 		cmp ah, 0
  3318 00002C8F 77D2                <1> 		ja getccmdlp
  3319 00002C91 47                  <1> 		inc edi
  3320 00002C92 81FF[5F720000]      <1> 		cmp edi, commandbufend
  3321 00002C98 770D                <1> 		ja fixcmdbufb4moreint305
  3322 00002C9A E915000000          <1> 		jmp moreint305up
  3323                              <1> 	getcmdresetcommandbuf:
  3324 00002C9F BF[5F720000]        <1> 		mov edi, commandbufend
  3325 00002CA4 47                  <1> 		inc edi
  3326 00002CA5 EBBC                <1> 		jmp getccmdlp
  3327                              <1> 	fixcmdbufb4moreint305:
  3328 00002CA7 4F                  <1> 		dec edi
  3329 00002CA8 81EF[5F720000]      <1> 		sub edi, commandbufend
  3330 00002CAE 81C7[5F6E0000]      <1> 		add edi, commandbuf
  3331                              <1> 	moreint305up:
  3332 00002CB4 8A07                <1> 		mov al, [edi]
  3333 00002CB6 47                  <1> 		inc edi
  3334 00002CB7 81EF[5F6E0000]      <1> 		sub edi, commandbuf
  3335 00002CBD 3C00                <1> 		cmp al, 0
  3336 00002CBF 0F84BDFDFFFF        <1> 		je near int305b
  3337 00002CC5 3B3D[5B6E0000]      <1> 		cmp edi, [currentcommandpos]
  3338 00002CCB 0F83B1FDFFFF        <1> 		jae near int305b
  3339 00002CD1 81C7[5F6E0000]      <1> 		add edi, commandbuf
  3340 00002CD7 8806                <1> 		mov [esi], al
  3341 00002CD9 46                  <1> 		inc esi
  3342 00002CDA 57                  <1> 		push edi
  3343 00002CDB 8A1D[532A0000]      <1> 		mov bl, [modkey305]
  3344 00002CE1 E8FBFAFFFF          <1> 		call int301
  3345 00002CE6 5F                  <1> 		pop edi
  3346 00002CE7 81FF[5F720000]      <1> 		cmp edi, commandbufend
  3347 00002CED 76C5                <1> 		jbe moreint305up
  3348 00002CEF BF[5F6E0000]        <1> 		mov edi, commandbuf
  3349 00002CF4 EBBE                <1> 		jmp moreint305up
  3350                              <1> 	int305bscheck:
  3351 00002CF6 3B35[542A0000]      <1> 		cmp esi, [firstesi305]
  3352 00002CFC 7705                <1> 		ja goodbscheck
  3353 00002CFE E97FFDFFFF          <1> 		jmp int305b
  3354                              <1> 	goodbscheck:
  3355 00002D03 4E                  <1> 		dec esi
  3356 00002D04 C60600              <1> 		mov byte [esi], 0
  3357 00002D07 8A1D[532A0000]      <1> 		mov bl, [modkey305]
  3358 00002D0D B008                <1> 		mov al, 8
  3359 00002D0F E9AFFDFFFF          <1> 		jmp bscheckequal
  3360                              <1> 	
  3361                              <1> 		
  3362                              <1> 	clear:		
  3363                              <1> 	
  3364                              <1> 	int306:	;;clear screen
  3365 00002D14 668B0D[DD270000]    <1> 		mov cx, [charxy]
  3366 00002D1B BF[8F1D0000]        <1> 		mov edi, videobuf
  3367 00002D20 6631C0              <1> 		xor ax, ax
  3368 00002D23 66A3[D7270000]      <1> 		mov [linebeginpos], ax
  3369 00002D29 66A3[D9270000]      <1> 		mov [videobufpos], ax
  3370 00002D2F 6631D2              <1> 		xor dx, dx
  3371 00002D32 66A3[DB270000]      <1> 		mov [charpos], ax
  3372                              <1> 	int306b:
  3373 00002D38 668907              <1> 		mov [edi], ax
  3374 00002D3B 81C702000000        <1> 		add edi, 2
  3375 00002D41 FEC9                <1> 		dec cl
  3376 00002D43 80F900              <1> 		cmp cl, 0
  3377 00002D46 75F0                <1> 		jne int306b
  3378 00002D48 8A0D[DD270000]      <1> 		mov cl, [charxy]
  3379 00002D4E FECD                <1> 		dec ch
  3380 00002D50 80FD00              <1> 		cmp ch, 0
  3381 00002D53 75E3                <1> 		jne int306b
  3382 00002D55 E807000000          <1> 		call termcopy
  3383 00002D5A C3                  <1> 		ret
  3384                              <1> 		
  3385 00002D5B 00000000            <1> 	termcursorpos dd 0
  3386 00002D5F 0000                <1> 	removedvideo dw 0
  3387                              <1> termcopy:	
  3388 00002D61 60                  <1> 	pusha
  3389 00002D62 BF[8F1D0000]        <1> 	mov edi, videobuf
  3390 00002D67 31DB                <1> 	xor ebx, ebx
  3391 00002D69 668B1D[D9270000]    <1> 	mov bx, [videobufpos]
  3392 00002D70 01DF                <1> 	add edi, ebx
  3393 00002D72 893D[5B2D0000]      <1> 	mov [termcursorpos], edi
  3394 00002D78 E8AF000000          <1> 	call switchtermcursor
  3395 00002D7D C605[E04E0000]00    <1> 	mov byte [mouseselecton], 0
  3396 00002D84 C605[ED270000]01    <1> 	mov byte [termcopyon], 1
  3397 00002D8B 803D[E14E0000]00    <1> 	cmp byte [guion], 0
  3398 00002D92 0F8412000000        <1> 	je near nowincopy
  3399 00002D98 803D[EC270000]01    <1> 	cmp byte [termguion], 1
  3400 00002D9F 0F84542D0000        <1> 	je near windowvideocopy
  3401 00002DA5 E97B000000          <1> 	jmp nocopytermatall
  3402                              <1> nowincopy:
  3403 00002DAA BE00000A00          <1> 	mov esi, 0xA0000
  3404 00002DAF A1[29040000]        <1> 	mov eax, [basecache]
  3405 00002DB4 C1E004              <1> 	shl eax, 4
  3406 00002DB7 29C6                <1> 	sub esi, eax
  3407 00002DB9 BF[8F1D0000]        <1> 	mov edi, videobuf
  3408 00002DBE 31C9                <1> 	xor ecx, ecx
  3409 00002DC0 668B0D[DD270000]    <1> 	mov cx, [charxy]
  3410                              <1> nowincopy2:
  3411 00002DC7 BB[88720000]        <1> 	mov ebx, fonts
  3412 00002DCC 31C0                <1> 	xor eax, eax
  3413 00002DCE 8A07                <1> 	mov al, [edi]
  3414 00002DD0 C1E004              <1> 	shl eax, 4
  3415 00002DD3 01C3                <1> 	add ebx, eax
  3416 00002DD5 47                  <1> 	inc edi
  3417 00002DD6 8A27                <1> 	mov ah, [edi]
  3418 00002DD8 31D2                <1> 	xor edx, edx
  3419 00002DDA 8A15[DD270000]      <1> 	mov dl, [charxy]
  3420 00002DE0 C1C110              <1> 	rol ecx, 16
  3421 00002DE3 B110                <1> 	mov cl, 16
  3422                              <1> nowinfont:
  3423 00002DE5 8A03                <1> 	mov al, [ebx]
  3424 00002DE7 D0C8                <1> 	ror al, 1
  3425 00002DE9 80FC07              <1> 	cmp ah, 7
  3426 00002DEC 7602                <1> 	jbe notnotfont
  3427 00002DEE F6D0                <1> 	not al
  3428                              <1> notnotfont:
  3429 00002DF0 8806                <1> 	mov [esi], al
  3430 00002DF2 01D6                <1> 	add esi, edx
  3431 00002DF4 43                  <1> 	inc ebx
  3432 00002DF5 FEC9                <1> 	dec cl
  3433 00002DF7 80F900              <1> 	cmp cl, 0
  3434 00002DFA 75E9                <1> 	jne nowinfont
  3435 00002DFC C1E204              <1> 	shl edx, 4
  3436 00002DFF 29D6                <1> 	sub esi, edx
  3437 00002E01 C1C110              <1> 	rol ecx, 16
  3438                              <1> nopresentwinfont:
  3439 00002E04 47                  <1> 	inc edi
  3440 00002E05 46                  <1> 	inc esi
  3441 00002E06 FEC9                <1> 	dec cl
  3442 00002E08 80F900              <1> 	cmp cl, 0
  3443 00002E0B 75BA                <1> 	jne nowincopy2
  3444 00002E0D 8A0D[DD270000]      <1> 	mov cl, [charxy]
  3445 00002E13 31D2                <1> 	xor edx, edx
  3446 00002E15 88CA                <1> 	mov dl, cl
  3447 00002E17 29D6                <1> 	sub esi, edx
  3448 00002E19 C1E204              <1> 	shl edx, 4
  3449 00002E1C 01D6                <1> 	add esi, edx
  3450 00002E1E FECD                <1> 	dec ch
  3451 00002E20 80FD00              <1> 	cmp ch, 0
  3452 00002E23 75A2                <1> 	jne nowincopy2
  3453                              <1> nocopytermatall:
  3454 00002E25 E802000000          <1> 	call switchtermcursor
  3455 00002E2A 61                  <1> 	popa
  3456 00002E2B C3                  <1> 	ret
  3457                              <1> 	
  3458                              <1> switchtermcursor:
  3459 00002E2C 8B3D[5B2D0000]      <1> 	mov edi, [termcursorpos]
  3460 00002E32 8A4701              <1> 	mov al, [edi + 1]
  3461 00002E35 8A27                <1> 	mov ah, [edi]
  3462 00002E37 3C07                <1> 	cmp al, 7
  3463 00002E39 7607                <1> 	jbe movlargecursorterm
  3464 00002E3B B007                <1> 	mov al, 7
  3465 00002E3D E902000000          <1> 	jmp movedcursorterm
  3466                              <1> movlargecursorterm:
  3467 00002E42 B0F0                <1> 	mov al, 0xF0
  3468                              <1> movedcursorterm:
  3469 00002E44 884701              <1> 	mov [edi + 1], al
  3470 00002E47 80FC00              <1> 	cmp ah, 0
  3471 00002E4A 7504                <1> 	jne fixednocursorterm
  3472 00002E4C B420                <1> 	mov ah, " "
  3473 00002E4E 8827                <1> 	mov [edi], ah
  3474                              <1> fixednocursorterm:
  3475 00002E50 C3                  <1> 	ret
  3476                              <1> 	
  3477                                      %include 'source/dosints.asm'
  3478                              <1> int21h:
  3479 00002E51 80FC01              <1> 	cmp ah, 1
  3480 00002E54 0F8437000000        <1> 	je near dosgchar
  3481 00002E5A 80FC02              <1> 	cmp ah, 2
  3482 00002E5D 0F8435000000        <1> 	je near doswchar
  3483 00002E63 80FC09              <1> 	cmp ah, 9
  3484 00002E66 0F8433000000        <1> 	je near dosprintstr
  3485 00002E6C 80FC0A              <1> 	cmp ah, 0xA
  3486 00002E6F 0F8439000000        <1> 	je near dosgetstr
  3487 00002E75 80FC2B              <1> 	cmp ah, 0x2B
  3488 00002E78 0F846E000000        <1> 	je near dosgetdate
  3489 00002E7E 80FC2C              <1> 	cmp ah, 0x2C
  3490 00002E81 0F8484000000        <1> 	je near dosgettime
  3491 00002E87 80FC4C              <1> 	cmp ah, 0x4C
  3492 00002E8A 0F8495000000        <1> 	je near dosexit
  3493 00002E90 C3                  <1> 	ret
  3494                              <1> 
  3495                              <1> dosgchar:
  3496 00002E91 B405                <1> 	mov ah, 5
  3497 00002E93 30C0                <1> 	xor al, al
  3498 00002E95 CD30                <1> 	int 30h
  3499 00002E97 C3                  <1> 	ret
  3500                              <1> 	
  3501                              <1> doswchar:
  3502 00002E98 B307                <1> 	mov bl, 7
  3503 00002E9A B406                <1> 	mov ah, 6
  3504 00002E9C CD30                <1> 	int 30h
  3505 00002E9E C3                  <1> 	ret
  3506                              <1> 	
  3507                              <1> dosprintstr:
  3508 00002E9F 8B3424              <1> 	mov esi, [esp]
  3509 00002EA2 6689D6              <1> 	mov si, dx
  3510 00002EA5 B024                <1> 	mov al, "$"
  3511 00002EA7 B401                <1> 	mov ah, 1
  3512 00002EA9 B307                <1> 	mov bl, 7
  3513 00002EAB CD30                <1> 	int 30h
  3514 00002EAD C3                  <1> 	ret
  3515                              <1> 	
  3516                              <1> dosgetstr:
  3517 00002EAE 8B3424              <1> 	mov esi, [esp]
  3518 00002EB1 6689D6              <1> 	mov si, dx
  3519 00002EB4 B900000000          <1> 	mov ecx, 0
  3520 00002EB9 8A0E                <1> 	mov cl, [esi]
  3521 00002EBB 81C603000000        <1> 	add esi, 3
  3522 00002EC1 89F7                <1> 	mov edi, esi
  3523 00002EC3 8935[E82E0000]      <1> 	mov [stringstart], esi
  3524 00002EC9 01CF                <1> 	add edi, ecx
  3525 00002ECB B00D                <1> 	mov al, 13
  3526 00002ECD B404                <1> 	mov ah, 4
  3527 00002ECF B307                <1> 	mov bl, 7
  3528 00002ED1 CD30                <1> 	int 30h
  3529 00002ED3 89F1                <1> 	mov ecx, esi
  3530 00002ED5 2B0D[E82E0000]      <1> 	sub ecx, [stringstart]
  3531 00002EDB 8B35[E82E0000]      <1> 	mov esi, [stringstart]
  3532 00002EE1 884EFF              <1> 	mov [esi - 1], cl
  3533 00002EE4 884EFE              <1> 	mov [esi - 2], cl
  3534 00002EE7 C3                  <1> 	ret
  3535 00002EE8 00000000            <1> stringstart dd 0
  3536                              <1> 
  3537                              <1> dosgetdate:
  3538 00002EEC E86A150000          <1> 	call time
  3539 00002EF1 8A0D[32460000]      <1> 	mov cl, [RTCtimeYear]
  3540 00002EF7 B500                <1> 	mov ch, 0
  3541 00002EF9 6681C1D007          <1> 	add cx, 2000
  3542 00002EFE 8A35[31460000]      <1> 	mov dh, [RTCtimeMonth]
  3543 00002F04 8A15[30460000]      <1> 	mov dl, [RTCtimeDay]
  3544 00002F0A C3                  <1> 	ret
  3545                              <1> 
  3546                              <1> dosgettime:
  3547 00002F0B E84B150000          <1> 	call time
  3548 00002F10 8A2D[2F460000]      <1> 	mov ch, [RTCtimeHour]
  3549 00002F16 8A0D[2E460000]      <1> 	mov cl, [RTCtimeMinute]
  3550 00002F1C 8A35[2D460000]      <1> 	mov dh, [RTCtimeSecond]
  3551 00002F22 B200                <1> 	mov dl, 0
  3552 00002F24 C3                  <1> 	ret
  3553                              <1> 	
  3554                              <1> dosexit:
  3555 00002F25 6631C0              <1> 	xor ax, ax
  3556 00002F28 CD30                <1> 	int 30h
  3557                                      %include 'source/solleros.asm'
  3558                              <1> 	;SOLLEROS.ASM
  3559                              <1> os:
  3560 00002F2A E8E5FDFFFF          <1> 	call clear
  3561 00002F2F BE[3F720000]        <1> 	mov esi, userask
  3562 00002F34 E8BEFAFFFF          <1> 	call print
  3563                              <1> usercheck:
  3564 00002F39 BE[7A1B0000]        <1> 	mov esi, buftxt
  3565 00002F3E BF[7A1D0000]        <1> 	mov edi, buftxtend
  3566 00002F43 B00D                <1> 	mov al, 13
  3567 00002F45 E81BFBFFFF          <1> 	call int305
  3568 00002F4A 56                  <1> 	push esi
  3569 00002F4B BE[5F720000]        <1> 	mov esi, line
  3570 00002F50 E8A2FAFFFF          <1> 	call print
  3571 00002F55 BE[49720000]        <1> 	mov esi, pwdask
  3572 00002F5A E898FAFFFF          <1> 	call print
  3573 00002F5F 5E                  <1> 	pop esi
  3574 00002F60 46                  <1> 	inc esi
  3575 00002F61 8935[19300000]      <1> 	mov [esipass], esi
  3576                              <1> passcheck:
  3577 00002F67 30C0                <1> 	xor al, al
  3578 00002F69 E837FAFFFF          <1> 	call int302
  3579 00002F6E 3C0D                <1> 	cmp al, 13
  3580 00002F70 0F8436000000        <1> 	je near gotpass
  3581 00002F76 3C08                <1> 	cmp al, 8
  3582 00002F78 0F8410000000        <1> 	je near backpass
  3583 00002F7E 8806                <1> 	mov [esi], al
  3584 00002F80 46                  <1> 	inc esi
  3585 00002F81 B02A                <1> 	mov al, '*'
  3586 00002F83 E859F8FFFF          <1> 	call int301
  3587 00002F88 EBDD                <1> 	jmp passcheck
  3588 00002F8A 08200800            <1> backcursor2 db 8," ",8,0
  3589                              <1> backpass:
  3590 00002F8E 3B35[19300000]      <1> 	cmp esi, [esipass]
  3591 00002F94 0F84CDFFFFFF        <1> 	je near passcheck
  3592 00002F9A 4E                  <1> 	dec esi
  3593 00002F9B C60600              <1> 	mov byte [esi], 0
  3594 00002F9E 56                  <1> 	push esi
  3595 00002F9F BE[8A2F0000]        <1> 	mov esi, backcursor2
  3596 00002FA4 E84EFAFFFF          <1> 	call print
  3597 00002FA9 5E                  <1> 	pop esi
  3598 00002FAA EBBB                <1> 	jmp passcheck
  3599                              <1> gotpass:
  3600 00002FAC B000                <1> 	mov al,0
  3601 00002FAE 8806                <1> 	mov [esi], al
  3602 00002FB0 BE[5F720000]        <1> 	mov esi, line
  3603 00002FB5 E83DFAFFFF          <1> 	call print
  3604 00002FBA BB[65720000]        <1> 	mov ebx, userlst
  3605                              <1> userfind:
  3606 00002FBF BE[7A1B0000]        <1> 	mov esi, buftxt
  3607 00002FC4 8A06                <1> 	mov al, [esi]
  3608 00002FC6 3C00                <1> 	cmp al, 0
  3609 00002FC8 0F845CFFFFFF        <1> 	je near os
  3610 00002FCE 891D[1D300000]      <1> 	mov [usercache], ebx
  3611 00002FD4 E877020000          <1> 	call tester
  3612 00002FD9 3C01                <1> 	cmp al, 1
  3613 00002FDB 7415                <1> 	je pwdtest
  3614                              <1> nxtuser:
  3615 00002FDD 43                  <1> 	inc ebx
  3616 00002FDE 8A03                <1> 	mov al, [ebx]
  3617 00002FE0 3C00                <1> 	cmp al, 0
  3618 00002FE2 74DB                <1> 	je userfind
  3619 00002FE4 81FB[88720000]      <1> 	cmp ebx, userlstend
  3620 00002FEA 0F833AFFFFFF        <1> 	jae near os
  3621 00002FF0 EBCD                <1> 	jmp userfind
  3622                              <1> pwdtest:
  3623 00002FF2 46                  <1> 	inc esi
  3624 00002FF3 43                  <1> 	inc ebx
  3625 00002FF4 E857020000          <1> 	call tester
  3626 00002FF9 3C01                <1> 	cmp al, 1
  3627 00002FFB 7402                <1> 	je pwdrgt
  3628 00002FFD EBDE                <1> 	jmp nxtuser
  3629 00002FFF E810FDFFFF          <1> pwdrgt:	call clear
  3630 00003004 66B90002            <1> 	mov cx, 200h
  3631 00003008 BE[7A1B0000]        <1> 	mov esi, buftxt
  3632 0000300D 30C0                <1> 	xor al, al
  3633 0000300F 8806                <1> bufclr:	mov [esi], al
  3634 00003011 46                  <1> 	inc esi
  3635 00003012 E2FB                <1> 	loop bufclr
  3636                              <1> ;;;;;;;;;;;;;;;;
  3637 00003014 E935000000          <1> 	jmp nwcmd
  3638                              <1> 
  3639 00003019 00000000            <1> esipass dd 0
  3640 0000301D [65720000]          <1> usercache dd userlst
  3641                              <1> 	
  3642                              <1> buftxtclear:
  3643 00003021 30C0                <1> 	xor al, al
  3644 00003023 BE[7A1B0000]        <1> 	mov esi, buftxt
  3645 00003028 81FE[7A1D0000]      <1> clearbuftxt: cmp esi, buf2
  3646 0000302E 730E                <1> 	jae retbufclr
  3647 00003030 8806                <1> 	mov [esi], al
  3648 00003032 46                  <1> 	inc esi
  3649 00003033 EBF3                <1> 	jmp clearbuftxt
  3650                              <1> 
  3651 00003035 39DE                <1> clearitbuf: cmp esi, ebx
  3652 00003037 7305                <1> 	jae retbufclr
  3653 00003039 8806                <1> 	mov [esi], al
  3654 0000303B 46                  <1> 	inc esi
  3655 0000303C EBF7                <1> 	jmp clearitbuf
  3656 0000303E C3                  <1> retbufclr: ret
  3657                              <1> 
  3658 0000303F E90A000000          <1> full:	jmp nwcmd
  3659                              <1> 
  3660                              <1> nwcmd2:
  3661 00003044 BE[5F720000]        <1> 	mov esi, line
  3662 00003049 E8A9F9FFFF          <1> 	call print
  3663                              <1> 
  3664                              <1> nwcmd:	
  3665 0000304E 803D[376B0000]00    <1> 	cmp byte [threadson], 0
  3666 00003055 7408                <1> 	je noclinwcmd
  3667 00003057 FA                  <1> 	cli
  3668 00003058 C605[376B0000]00    <1> 	mov byte [threadson], 0
  3669                              <1> noclinwcmd:
  3670 0000305F B001                <1> 	mov al, 1
  3671 00003061 3805[69150000]      <1> 	cmp [BATCHISON], al
  3672 00003067 0F83B2000000        <1> 	jae near batchran
  3673 0000306D 30C0                <1> cancel:	xor al, al
  3674 0000306F A2[00150000]        <1> 	mov [IFON], al
  3675 00003074 A2[69150000]        <1> 	mov [BATCHISON], al
  3676 00003079 B05B                <1> 	mov al, '['
  3677 0000307B B406                <1> 	mov ah, 6
  3678 0000307D 66BB0700            <1> 	mov bx, 7
  3679 00003081 E868F7FFFF          <1> 	call int301prnt
  3680 00003086 8B35[1D300000]      <1> 	mov esi, [usercache]
  3681 0000308C E866F9FFFF          <1> 	call print
  3682 00003091 BE[53720000]        <1> 	mov esi, location
  3683 00003096 E85CF9FFFF          <1> 	call print
  3684 0000309B E881FFFFFF          <1> 	call buftxtclear
  3685 000030A0 BE[7A1B0000]        <1> 	mov esi, buftxt
  3686 000030A5 C605[582A0000]01    <1> 	mov byte [commandedit], 1
  3687 000030AC B00D                <1> 	mov al, 13
  3688 000030AE 66BB0700            <1> 	mov bx, 7
  3689 000030B2 BF[7A1D0000]        <1> 	mov edi, buftxtend
  3690 000030B7 E8A9F9FFFF          <1> 	call int305
  3691 000030BC C605[582A0000]00    <1> 	mov byte [commandedit], 0
  3692 000030C3 803D[7A1B0000]00    <1> 	cmp byte [buftxt], 0
  3693 000030CA 0F8474FFFFFF        <1> 	je near nwcmd2
  3694 000030D0 8B35[5B6E0000]      <1> gotcmd:	mov esi, [currentcommandpos]
  3695 000030D6 8935[576E0000]      <1> 	mov [lastcommandpos], esi
  3696 000030DC BF[7A1B0000]        <1> 	mov edi, buftxt
  3697 000030E1 81C6[5F6E0000]      <1> 	add esi, commandbuf
  3698 000030E7 81FE[5F720000]      <1> 	cmp esi, commandbufend
  3699 000030ED 7605                <1> 	jbe copycommand
  3700 000030EF BE[5F6E0000]        <1> 	mov esi, commandbuf
  3701                              <1> copycommand:
  3702 000030F4 8A07                <1> 	mov al, [edi]
  3703 000030F6 8806                <1> 	mov [esi], al
  3704 000030F8 47                  <1> 	inc edi
  3705 000030F9 46                  <1> 	inc esi
  3706 000030FA 3C00                <1> 	cmp al, 0
  3707 000030FC 740F                <1> 	je donecopy
  3708 000030FE 81FE[5F720000]      <1> 	cmp esi, commandbufend
  3709 00003104 76EE                <1> 	jbe copycommand
  3710 00003106 BE[5F6E0000]        <1> 	mov esi, commandbuf
  3711 0000310B EBE7                <1> 	jmp copycommand
  3712                              <1> donecopy:
  3713 0000310D 81EE[5F6E0000]      <1> 	sub esi, commandbuf
  3714 00003113 8935[5B6E0000]      <1> 	mov [currentcommandpos], esi
  3715 00003119 FB                  <1> 	sti
  3716 0000311A E982000000          <1> 	jmp run
  3717                              <1> 	
  3718                              <1> batchran:
  3719 0000311F C3                  <1> 	ret
  3720                              <1> 
  3721 00003120 E8FCFEFFFF          <1> input:	call buftxtclear
  3722 00003125 BE[7A1B0000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3723 0000312A BF[7A1D0000]        <1> 	mov edi, buftxtend
  3724 0000312F B00D                <1> stdin:	mov al, 13
  3725 00003131 B307                <1> 	mov bl, 7
  3726 00003133 B404                <1> 	mov ah, 4
  3727 00003135 CD30                <1> 	int 30h
  3728 00003137 C3                  <1> 	ret
  3729                              <1> 
  3730                              <1> replacevariable:
  3731 00003138 56                  <1> 	push esi
  3732 00003139 81EE[7A1B0000]      <1> 	sub esi, buftxt
  3733 0000313F 89F7                <1> 	mov edi, esi
  3734 00003141 81C6[7A1B0000]      <1> 	add esi, buftxt
  3735 00003147 47                  <1> 	inc edi
  3736 00003148 BB[6F150000]        <1> 	mov ebx, variables
  3737 0000314D E86E070000          <1> 	call nxtvrech
  3738 00003152 89F7                <1> 	mov edi, esi
  3739 00003154 31DB                <1> 	xor ebx, ebx
  3740 00003156 4E                  <1> 	dec esi
  3741                              <1> findvarname:
  3742 00003157 4E                  <1> 	dec esi
  3743 00003158 8A06                <1> 	mov al, [esi]
  3744 0000315A 43                  <1> 	inc ebx
  3745 0000315B 3C04                <1> 	cmp al, 4
  3746 0000315D 75F8                <1> 	jne findvarname
  3747 0000315F 5E                  <1> 	pop esi
  3748                              <1> replacevarloop:
  3749 00003160 8A07                <1> 	mov al, [edi]
  3750 00003162 3C00                <1> 	cmp al, 0
  3751 00003164 0F8446000000        <1> 	je near fixvariables
  3752 0000316A 81FB00000000        <1> 	cmp ebx, 0
  3753 00003170 0F8407000000        <1> 	je near expandbuftxt
  3754 00003176 8806                <1> 	mov [esi], al
  3755 00003178 4B                  <1> 	dec ebx
  3756 00003179 46                  <1> 	inc esi
  3757 0000317A 47                  <1> 	inc edi
  3758 0000317B EBE3                <1> 	jmp replacevarloop
  3759                              <1> expandbuftxt:
  3760 0000317D 89F1                <1> 	mov ecx, esi
  3761 0000317F 8A26                <1> 	mov ah, [esi]
  3762                              <1> expandbuftxtlp:
  3763 00003181 8A1E                <1> 	mov bl, [esi]
  3764 00003183 46                  <1> 	inc esi
  3765 00003184 8A3E                <1> 	mov bh, [esi]
  3766 00003186 8826                <1> 	mov [esi], ah
  3767 00003188 88FC                <1> 	mov ah, bh
  3768 0000318A 80FB00              <1> 	cmp bl, 0
  3769 0000318D 75F2                <1> 	jne expandbuftxtlp
  3770 0000318F 89CE                <1> 	mov esi, ecx
  3771 00003191 8806                <1> 	mov [esi], al
  3772 00003193 47                  <1> 	inc edi
  3773 00003194 8A07                <1> 	mov al, [edi]
  3774 00003196 3C00                <1> 	cmp al, 0
  3775 00003198 0F8412000000        <1> 	je near fixvariables
  3776 0000319E 46                  <1> 	inc esi
  3777 0000319F EBDC                <1> 	jmp expandbuftxt
  3778                              <1> 	
  3779                              <1> 	
  3780                              <1> run:	
  3781 000031A1 BE[5F720000]        <1> 	mov esi, line		;;I should add some sort of command line parsing before it is processed to replace variables with stuff
  3782 000031A6 E84CF8FFFF          <1> 	call print
  3783 000031AB BE[7A1B0000]        <1> 	mov esi, buftxt
  3784                              <1> fixvariables:
  3785 000031B0 46                  <1> 	inc esi
  3786 000031B1 8A06                <1> 	mov al, [esi]
  3787 000031B3 3C24                <1> 	cmp al, '$'
  3788 000031B5 0F847DFFFFFF        <1> 	je near replacevariable
  3789 000031BB 3C00                <1> 	cmp al, 0
  3790 000031BD 75F1                <1> 	jne fixvariables
  3791                              <1> 
  3792 000031BF 803D[B3370000]00    <1> 	cmp byte [indexdone], 0
  3793 000031C6 7505                <1> 	jne progtest
  3794 000031C8 E851050000          <1> 	call indexfiles
  3795                              <1> progtest:
  3796 000031CD BE[7A1B0000]        <1> 	mov esi, buftxt
  3797 000031D2 BB[00130000]        <1> 	mov ebx, fileindex
  3798 000031D7 668B03              <1> prgnxt:	mov ax, [ebx]
  3799 000031DA B105                <1> 	mov cl, 5
  3800 000031DC B504                <1> 	mov ch, 4
  3801 000031DE 6639C8              <1> 	cmp ax, cx
  3802 000031E1 740B                <1> 	je fndprg
  3803 000031E3 43                  <1> 	inc ebx
  3804 000031E4 81FB[00150000]      <1> 	cmp ebx, fileindexend
  3805 000031EA 7338                <1> 	jae prgnf
  3806 000031EC EBE9                <1> 	jmp prgnxt
  3807 000031EE 81C302000000        <1> fndprg: add ebx, 2
  3808 000031F4 BE[7A1B0000]        <1> 	mov esi, buftxt
  3809 000031F9 6631C9              <1> 	xor cx, cx
  3810 000031FC E889000000          <1> 	call cndtest
  3811 00003201 3C01                <1> 	cmp al, 1
  3812 00003203 7302                <1> 	jae prggood
  3813 00003205 EBD0                <1> 	jmp prgnxt
  3814 00003207 81FB[00150000]      <1> prggood: cmp ebx, fileindexend
  3815 0000320D 733C                <1> 	jae prgdn
  3816 0000320F 81C303000000        <1> 	add ebx, 3
  3817 00003215 8B3B                <1> 	mov edi, [ebx]
  3818 00003217 C605[376B0000]02    <1> 	mov byte [threadson], 2
  3819 0000321E B020                <1> 	mov al, 0x20
  3820 00003220 E620                <1> 	out 0x20, al
  3821                              <1> 	;sti
  3822 00003222 FFE7                <1> 	jmp edi
  3823                              <1> prgnf:	
  3824 00003224 A0[7A1B0000]        <1> 	mov al, [buftxt]
  3825 00003229 3C00                <1> 	cmp al, 0
  3826 0000322B 741E                <1> 	je prgdn
  3827 0000322D BE[26720000]        <1> 	mov esi, notfound1
  3828 00003232 E8C0F7FFFF          <1> 	call print
  3829 00003237 BE[7A1B0000]        <1> 	mov esi, buftxt
  3830 0000323C E8B6F7FFFF          <1> 	call print
  3831 00003241 BE[30720000]        <1> 	mov esi, notfound2
  3832 00003246 E8ACF7FFFF          <1> 	call print
  3833 0000324B E9FEFDFFFF          <1> prgdn:	jmp nwcmd
  3834                              <1> 
  3835                              <1> 
  3836                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3837 00003250 30C0                <1> 	xor al, al
  3838 00003252 8A06                <1> retest:	mov al, [esi]
  3839 00003254 8A23                <1> 	mov ah, [ebx]
  3840 00003256 3C00                <1> 	cmp al, 0
  3841 00003258 7408                <1> 	je testtrue
  3842 0000325A 38E0                <1> 	cmp al, ah
  3843 0000325C 750C                <1> 	jne testfalse
  3844 0000325E 43                  <1> 	inc ebx
  3845 0000325F 46                  <1> 	inc esi
  3846 00003260 EBF0                <1> 	jmp retest
  3847                              <1> testtrue:
  3848 00003262 80FC00              <1> 	cmp ah, 0
  3849 00003265 7503                <1> 	jne testfalse
  3850 00003267 B001                <1> 	mov al, 1
  3851 00003269 C3                  <1> 	ret
  3852                              <1> testfalse:
  3853 0000326A 30C0                <1> 	xor al, al
  3854 0000326C C3                  <1> 	ret
  3855                              <1> 
  3856                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3857 0000326D 30C0                <1> 	xor al, al
  3858                              <1> opretest:
  3859 0000326F 8A06                <1> 	mov al, [esi]
  3860 00003271 8A23                <1> 	mov ah, [ebx]
  3861 00003273 38E0                <1> 	cmp al, ah
  3862 00003275 7510                <1> 	jne optestfalse
  3863 00003277 80FC00              <1> 	cmp ah, 0
  3864 0000327A 7404                <1> 	je optesttrue
  3865 0000327C 43                  <1> 	inc ebx
  3866 0000327D 46                  <1> 	inc esi
  3867 0000327E EBEF                <1> 	jmp opretest
  3868                              <1> optesttrue:
  3869 00003280 3C00                <1> 	cmp al, 0
  3870 00003282 7503                <1> 	jne optestfalse
  3871 00003284 B001                <1> 	mov al, 1
  3872 00003286 C3                  <1> 	ret
  3873                              <1> optestfalse:
  3874 00003287 30C0                <1> 	xor al, al
  3875 00003289 C3                  <1> 	ret
  3876                              <1> 
  3877                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3878 0000328A 30C0                <1> 	xor al, al
  3879 0000328C 8A06                <1> cndretest:	mov al, [esi]
  3880 0000328E 8A23                <1> 	mov ah, [ebx]
  3881 00003290 38CC                <1> 	cmp ah, cl
  3882 00003292 7408                <1> 	je cndtesttrue
  3883 00003294 38E0                <1> 	cmp al, ah
  3884 00003296 750B                <1> 	jne cndtestfalse
  3885 00003298 43                  <1> 	inc ebx
  3886 00003299 46                  <1> 	inc esi
  3887 0000329A EBF0                <1> 	jmp cndretest
  3888                              <1> cndtesttrue:
  3889 0000329C 38C8                <1> 	cmp al, cl
  3890 0000329E 7506                <1> 	jne cndtestalmost
  3891 000032A0 B001                <1> 	mov al, 1
  3892 000032A2 C3                  <1> 	ret
  3893                              <1> cndtestfalse:
  3894 000032A3 30C0                <1> 	xor al, al
  3895 000032A5 C3                  <1> 	ret
  3896                              <1> cndtestalmost:
  3897 000032A6 B002                <1> 	mov al, 2
  3898 000032A8 C3                  <1> 	ret
  3899 000032A9 00                  <1> currentdir db 0
  3900 000032AA BE[00130000]        <1> dir:	mov esi, fileindex
  3901 000032AF 8A06                <1> 	dirnxt:	mov al, [esi]
  3902 000032B1 30E4                <1> 		xor ah, ah
  3903 000032B3 3C05                <1> 		cmp al, 5
  3904 000032B5 744A                <1> 		je dirfnd
  3905 000032B7 3C07                <1> 		cmp al, 7
  3906 000032B9 743C                <1> 		je dirfnd3
  3907 000032BB 3C06                <1> 		cmp al, 6
  3908 000032BD 7438                <1> 		je dirfnd3
  3909 000032BF 46                  <1> 		inc esi
  3910 000032C0 81FE[00150000]      <1> 		cmp esi,  fileindexend
  3911 000032C6 737B                <1> 		jae dirdn
  3912 000032C8 EBE5                <1> 		jmp dirnxt
  3913 000032CA 060400626174636800- <1> 	typetable db 6,4,0,"batch",0,7,4,0,"document",0,10,4,0,"folder",0,5,4,0,"executable",0
  3914 000032D3 070400646F63756D65- <1>
  3915 000032DC 6E74000A0400666F6C- <1>
  3916 000032E5 646572000504006578- <1>
  3917 000032EE 6563757461626C6500  <1>
  3918                              <1> 	dirfnd3:
  3919 000032F7 46                  <1> 		inc esi
  3920 000032F8 81FE[00150000]      <1> 		cmp esi, fileindexend
  3921 000032FE 76AF                <1> 		jbe dirnxt
  3922 00003300 4E                  <1> 		dec esi
  3923 00003301 46                  <1> 	dirfnd:	inc esi
  3924 00003302 8A06                <1> 		mov al, [esi]
  3925 00003304 30E4                <1> 		xor ah, ah
  3926 00003306 3C04                <1> 		cmp al, 4
  3927 00003308 740B                <1> 		je dirfnd2
  3928 0000330A 46                  <1> 		inc esi
  3929 0000330B 81FE[00150000]      <1> 		cmp esi,  fileindexend
  3930 00003311 7330                <1> 		jae dirdn
  3931 00003313 EB9A                <1> 		jmp dirnxt
  3932 00003315 81C601000000        <1> 	dirfnd2: add esi, 1
  3933 0000331B E8D7F6FFFF          <1> 		call print
  3934 00003320 8935[52330000]      <1> 		mov [esidir], esi
  3935 00003326 BE[62720000]        <1> 		mov esi, dirtab
  3936 0000332B E8C7F6FFFF          <1> 		call print
  3937 00003330 8B35[52330000]      <1> 		mov esi, [esidir]
  3938 00003336 81FE[00150000]      <1> 		cmp esi,  fileindexend
  3939 0000333C 7305                <1> 		jae dirdn
  3940 0000333E E96CFFFFFF          <1> 		jmp dirnxt
  3941 00003343 BE[5F720000]        <1> 	dirdn:	mov esi, line
  3942 00003348 E8AAF6FFFF          <1> 			call print
  3943 0000334D E9FCFCFFFF          <1> 			jmp nwcmd
  3944 00003352 00000000            <1> esidir dd 0
  3945                              <1> 
  3946                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3947                              <1> 		                ;ends if array seperator is found backwards after 0
  3948                              <1> 	arnxt:	      
  3949 00003356 88E8                <1> 		mov al, ch
  3950 00003358 88CC                <1> 		mov ah, cl        
  3951 0000335A 663906              <1> 		cmp [esi], ax
  3952 0000335D 744D                <1> 		je ardn
  3953 0000335F 66390E              <1> 		cmp [esi], cx
  3954 00003362 7407                <1> 		je arfnd
  3955 00003364 46                  <1> 		inc esi
  3956 00003365 39DE                <1> 		cmp esi, ebx
  3957 00003367 7343                <1> 		jae ardn
  3958 00003369 EBEB                <1> 		jmp arnxt
  3959 0000336B 81C602000000        <1> 	arfnd: add esi, 2
  3960 00003371 891D[AD330000]      <1> 		mov [arbx], ebx
  3961 00003377 890D[B1330000]      <1> 		mov [arcx], ecx
  3962 0000337D E875F6FFFF          <1> 		call print
  3963 00003382 8935[B3330000]      <1> 		mov [arsi], esi
  3964 00003388 BE[5F720000]        <1> 		mov esi, line
  3965 0000338D E865F6FFFF          <1> 		call print
  3966 00003392 8B1D[AD330000]      <1> 		mov ebx, [arbx]
  3967 00003398 668B0D[B1330000]    <1> 		mov cx, [arcx]
  3968 0000339F 8B35[B3330000]      <1> 		mov esi, [arsi]
  3969 000033A5 46                  <1> 		inc esi
  3970 000033A6 39DE                <1> 		cmp esi, ebx
  3971 000033A8 7302                <1> 		jae ardn
  3972 000033AA EBAA                <1> 		jmp arnxt
  3973 000033AC C3                  <1> 	ardn:	ret
  3974 000033AD 00000000            <1> arbx:	dw 0,0
  3975 000033B1 0000                <1> arcx:	db 0,0
  3976 000033B3 00000000            <1> arsi:	dw 0,0
  3977                              <1> 
  3978                              <1> clearbuffer:
  3979 000033B7 BE[7A1D0000]        <1> 	mov esi, buf2
  3980 000033BC B030                <1> 	mov al, '0'
  3981 000033BE 81FE[8E1D0000]      <1> clearbuf: cmp esi, numbuf
  3982 000033C4 7305                <1> 	jae doneclearbuff
  3983 000033C6 8806                <1> 	mov [esi], al
  3984 000033C8 46                  <1> 	inc esi
  3985 000033C9 EBF3                <1> 	jmp clearbuf
  3986                              <1> doneclearbuff: 
  3987 000033CB C3                  <1> 		ret
  3988                              <1> 
  3989                              <1> convert:
  3990 000033CC 4E                  <1> 	dec esi
  3991 000033CD 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3992                              <1> cnvrt:
  3993 000033CF 89DE                <1> 	mov esi, ebx
  3994 000033D1 81EE09000000        <1> 	sub esi, 9
  3995 000033D7 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3996 000033DD 720A                <1> 	jb ten8
  3997 000033DF 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3998 000033E5 FE06                <1> 	inc byte [esi]
  3999 000033E7 EBE6                <1> 	jmp cnvrt
  4000 000033E9 46                  <1> ten8:	inc esi
  4001 000033EA 81F900E1F505        <1> 	cmp ecx, 100000000
  4002 000033F0 720A                <1> 	jb ten7
  4003 000033F2 81E900E1F505        <1> 	sub ecx, 100000000
  4004 000033F8 FE06                <1> 	inc byte [esi]
  4005 000033FA EBD3                <1> 	jmp cnvrt
  4006 000033FC 46                  <1> ten7:	inc esi
  4007 000033FD 81F980969800        <1> 	cmp ecx, 10000000
  4008 00003403 720A                <1> 	jb ten6
  4009 00003405 81E980969800        <1> 	sub ecx, 10000000
  4010 0000340B FE06                <1> 	inc byte [esi]
  4011 0000340D EBC0                <1> 	jmp cnvrt
  4012 0000340F 46                  <1> ten6:	inc esi
  4013 00003410 81F940420F00        <1> 	cmp ecx, 1000000
  4014 00003416 720A                <1> 	jb ten5
  4015 00003418 81E940420F00        <1> 	sub ecx, 1000000
  4016 0000341E FE06                <1> 	inc byte [esi]
  4017 00003420 EBAD                <1> 	jmp cnvrt
  4018 00003422 46                  <1> ten5:	inc esi
  4019 00003423 81F9A0860100        <1> 	cmp ecx, 100000
  4020 00003429 720A                <1> 	jb ten4
  4021 0000342B 81E9A0860100        <1> 	sub ecx, 100000
  4022 00003431 FE06                <1> 	inc byte [esi]
  4023 00003433 EB9A                <1> 	jmp cnvrt
  4024 00003435 46                  <1> ten4:	inc esi
  4025 00003436 81F910270000        <1> 	cmp ecx, 10000
  4026 0000343C 720A                <1> 	jb ten3
  4027 0000343E 81E910270000        <1> 	sub ecx, 10000
  4028 00003444 FE06                <1> 	inc byte [esi]
  4029 00003446 EB87                <1> 	jmp cnvrt
  4030 00003448 46                  <1> ten3:	inc esi
  4031 00003449 81F9E8030000        <1> 	cmp ecx, 1000
  4032 0000344F 720D                <1> 	jb ten2
  4033 00003451 81E9E8030000        <1> 	sub ecx, 1000
  4034 00003457 FE06                <1> 	inc byte [esi]
  4035 00003459 E971FFFFFF          <1> 	jmp cnvrt
  4036 0000345E 46                  <1> ten2:	inc esi
  4037 0000345F 81F964000000        <1> 	cmp ecx, 100
  4038 00003465 720D                <1> 	jb ten1
  4039 00003467 81E964000000        <1> 	sub ecx, 100
  4040 0000346D FE06                <1> 	inc byte [esi]
  4041 0000346F E95BFFFFFF          <1> 	jmp cnvrt
  4042 00003474 46                  <1> ten1:	inc esi
  4043 00003475 81F90A000000        <1> 	cmp ecx, 10
  4044 0000347B 720D                <1> 	jb ten0
  4045 0000347D 81E90A000000        <1> 	sub ecx, 10
  4046 00003483 FE06                <1> 	inc byte [esi]
  4047 00003485 E945FFFFFF          <1> 	jmp cnvrt
  4048 0000348A 46                  <1> ten0:	inc esi
  4049 0000348B 81F901000000        <1> 	cmp ecx, 1
  4050 00003491 720D                <1> 	jb tendn
  4051 00003493 81E901000000        <1> 	sub ecx, 1
  4052 00003499 FE06                <1> 	inc byte [esi]
  4053 0000349B E92FFFFFFF          <1> 	jmp cnvrt
  4054                              <1> tendn:
  4055 000034A0 C3                  <1> 	ret
  4056                              <1> 
  4057                              <1> 	
  4058                              <1> 
  4059 000034A1 00<rept>            <1> hexnumber times 8 db 0
  4060 000034A9 202000              <1> hexnumberend db "  ",0
  4061                              <1> 
  4062                              <1> 
  4063 000034AC 00000000            <1> sibuf dw 0,0
  4064 000034B0 00000000            <1> dibuf dw 0,0
  4065                              <1> 
  4066                              <1> converthex:
  4067                              <1> clearbufferhex:
  4068 000034B4 B030                <1> 	mov al, '0'
  4069 000034B6 8935[AC340000]      <1> 	mov [sibuf], esi
  4070 000034BC 893D[B0340000]      <1> 	mov [dibuf], edi
  4071 000034C2 39FE                <1> clearbufhex: cmp esi, edi
  4072 000034C4 7305                <1> 	jae doneclearbuffhex
  4073 000034C6 8806                <1> 	mov [esi], al
  4074 000034C8 46                  <1> 	inc esi
  4075 000034C9 EBF7                <1> 	jmp clearbufhex
  4076                              <1> doneclearbuffhex:
  4077 000034CB 8B35[B0340000]      <1> 	mov esi, [dibuf]
  4078 000034D1 89CA                <1> 	mov edx, ecx
  4079 000034D3 81FA00000000        <1> 	cmp edx, 0
  4080 000034D9 741F                <1> 	je donenxtephx
  4081                              <1> nxtexphx:	;0x10^x
  4082 000034DB 4E                  <1> 	dec esi
  4083 000034DC 89F7                <1> 	mov edi, esi		;;location of 0x10^x
  4084 000034DE 89D1                <1> 	mov ecx, edx
  4085 000034E0 81E10F000000        <1> 	and ecx, 0xF		;;just this digit
  4086 000034E6 E81C000000          <1> 	call cnvrtexphx		;;get this digit
  4087 000034EB 89FE                <1> 	mov esi, edi
  4088 000034ED C1EA04              <1> 	shr edx, 4		;;next digit
  4089 000034F0 81FA00000000        <1> 	cmp edx, 0
  4090 000034F6 7402                <1> 	je donenxtephx
  4091 000034F8 EBE1                <1> 	jmp nxtexphx
  4092                              <1> donenxtephx:
  4093 000034FA 8B35[AC340000]      <1> 	mov esi, [sibuf]
  4094 00003500 8B3D[B0340000]      <1> 	mov edi, [dibuf]
  4095 00003506 C3                  <1> 	ret
  4096                              <1> cnvrtexphx:			;;convert this number
  4097 00003507 89F3                <1> 	mov ebx, esi		;place to convert to must be in si, number to convert must be in cx
  4098 00003509 81F900000000        <1> 	cmp ecx, 0
  4099 0000350F 7429                <1> 	je zerohx
  4100 00003511 8A06                <1> cnvrthx:  mov al, [esi]
  4101 00003513 3C39                <1> 	cmp al, '9'
  4102 00003515 741B                <1> 	je lettershx
  4103 00003517 3C46                <1> lttrhxdn: cmp al, 'F'
  4104 00003519 741F                <1> 	je zerohx
  4105 0000351B 8A06                <1> 	mov al, [esi]
  4106 0000351D FEC0                <1> 	inc al
  4107 0000351F 8806                <1> 	mov [esi], al
  4108 00003521 89DE                <1> 	mov esi, ebx
  4109 00003523 81E901000000        <1> cnvrtlphx: sub ecx, 1
  4110 00003529 81F900000000        <1> 	cmp ecx, 0
  4111 0000352F 75E0                <1> 	jne cnvrthx
  4112 00003531 C3                  <1> 	ret
  4113                              <1> lettershx:
  4114 00003532 B041                <1> 	mov al, 'A'
  4115 00003534 2C01                <1> 	sub al, 1
  4116 00003536 8806                <1> 	mov [esi], al
  4117 00003538 EBDD                <1> 	jmp lttrhxdn
  4118 0000353A B030                <1> zerohx:	mov al, '0'
  4119 0000353C 8806                <1> 	mov [esi], al
  4120 0000353E 4E                  <1> 	dec esi
  4121 0000353F 8A06                <1> 	mov al, [esi]
  4122 00003541 3C46                <1> 	cmp al, 'F'
  4123 00003543 74F5                <1> 	je zerohx
  4124 00003545 41                  <1> 	inc ecx
  4125 00003546 EBDB                <1> 	jmp cnvrtlphx
  4126 00003548 00                  <1> smallhex db 0
  4127 00003549 01                  <1> firsthexshown db 1
  4128                              <1> showhexsmall:
  4129 0000354A C605[48350000]01    <1> 	mov byte [smallhex], 1
  4130 00003551 E808000000          <1> 	call showhex
  4131 00003556 C605[48350000]00    <1> 	mov byte [smallhex], 0
  4132 0000355D C3                  <1> 	ret
  4133                              <1> showhex:
  4134 0000355E 60                  <1> 	pusha
  4135 0000355F BE[A1340000]        <1> 	mov esi, hexnumber
  4136 00003564 BF[A9340000]        <1> 	mov edi, hexnumberend
  4137 00003569 E846FFFFFF          <1> 	call converthex
  4138 0000356E 803D[49350000]01    <1> 	cmp byte [firsthexshown], 1
  4139 00003575 7503                <1> 	jne showthathex
  4140 00003577 6631D2              <1> 	xor dx, dx
  4141                              <1> showthathex:
  4142 0000357A 803D[49350000]03    <1> 	cmp byte [firsthexshown], 3
  4143 00003581 750A                <1> 	jne nonewhexline
  4144 00003583 BE[5F720000]        <1> 	mov esi, line
  4145 00003588 E86AF4FFFF          <1> 	call print
  4146                              <1> nonewhexline:
  4147 0000358D 803D[49350000]04    <1> 	cmp byte [firsthexshown], 4
  4148 00003594 7527                <1> 	jne notabfixhex
  4149 00003596 B1A0                <1> 	mov cl, 160
  4150 00003598 28D1                <1> 	sub cl, dl
  4151 0000359A C0E905              <1> 	shr cl, 5
  4152 0000359D C0E105              <1> 	shl cl, 5
  4153 000035A0 80F900              <1> 	cmp cl, 0
  4154 000035A3 750F                <1> 	jne nonewlinetabfixhex
  4155 000035A5 BE[5F720000]        <1> 	mov esi, line
  4156 000035AA E848F4FFFF          <1> 	call print
  4157 000035AF E909000000          <1> 	jmp notabfixhex
  4158                              <1> nonewlinetabfixhex:
  4159 000035B4 80C20F              <1> 	add dl, 15
  4160 000035B7 C0EA04              <1> 	shr dl, 4
  4161 000035BA C0E204              <1> 	shl dl, 4
  4162                              <1> notabfixhex:
  4163 000035BD BE[A1340000]        <1> 	mov esi, hexnumber
  4164 000035C2 803D[48350000]01    <1> 	cmp byte [smallhex],1
  4165 000035C9 7506                <1> 	jne printnosmallhex
  4166 000035CB 81C606000000        <1> 	add esi, 6
  4167                              <1> printnosmallhex:
  4168 000035D1 E821F4FFFF          <1> 	call print
  4169 000035D6 803D[49350000]02    <1> 	cmp byte [firsthexshown], 2
  4170 000035DD 750A                <1> 	jne hexshown
  4171 000035DF BE[5F720000]        <1> 	mov esi, line
  4172 000035E4 E80EF4FFFF          <1> 	call print
  4173                              <1> hexshown:
  4174 000035E9 C605[49350000]00    <1> 	mov byte [firsthexshown], 0
  4175 000035F0 61                  <1> 	popa
  4176 000035F1 C3                  <1> 	ret
  4177                              <1> 
  4178                              <1> 
  4179 000035F2 303030303030303030- <1> decnumber db "00000000000000"
  4180 000035FB 3030303030          <1>
  4181 00003600 2000                <1> decnumberend: db " ",0
  4182                              <1> 
  4183                              <1> showdec: ;;same as showhex, just uses decimal conversion
  4184 00003602 60                  <1> 	pusha
  4185 00003603 BF[F2350000]        <1> 	mov edi, decnumber
  4186 00003608 BE[00360000]        <1> 	mov esi, decnumberend
  4187                              <1> cleardecbuf:
  4188 0000360D C60730              <1> 	mov byte [edi], '0'
  4189 00003610 47                  <1> 	inc edi
  4190 00003611 39F7                <1> 	cmp edi, esi
  4191 00003613 72F8                <1> 	jb cleardecbuf
  4192 00003615 BF[F2350000]        <1> 	mov edi, decnumber
  4193 0000361A E8ADFDFFFF          <1> 	call convert
  4194 0000361F 803D[49350000]01    <1> 	cmp byte [firsthexshown], 1
  4195 00003626 7503                <1> 	jne showthatdec
  4196 00003628 6631D2              <1> 	xor dx, dx
  4197                              <1> showthatdec:
  4198 0000362B 803D[49350000]03    <1> 	cmp byte [firsthexshown], 3
  4199 00003632 750A                <1> 	jne nonewdecline
  4200 00003634 BE[5F720000]        <1> 	mov esi, line
  4201 00003639 E8B9F3FFFF          <1> 	call print
  4202                              <1> nonewdecline:
  4203 0000363E 803D[49350000]04    <1> 	cmp byte [firsthexshown], 4
  4204 00003645 7527                <1> 	jne notabfixdec
  4205 00003647 B1A0                <1> 	mov cl, 160
  4206 00003649 28D1                <1> 	sub cl, dl
  4207 0000364B C0E905              <1> 	shr cl, 5
  4208 0000364E C0E105              <1> 	shl cl, 5
  4209 00003651 80F900              <1> 	cmp cl, 0
  4210 00003654 750F                <1> 	jne nonewlinetabfixdec
  4211 00003656 BE[5F720000]        <1> 	mov esi, line
  4212 0000365B E897F3FFFF          <1> 	call print
  4213 00003660 E909000000          <1> 	jmp notabfixdec
  4214                              <1> nonewlinetabfixdec:
  4215 00003665 80C20F              <1> 	add dl, 15
  4216 00003668 C0EA04              <1> 	shr dl, 4
  4217 0000366B C0E204              <1> 	shl dl, 4
  4218                              <1> notabfixdec:
  4219 0000366E BE[F2350000]        <1> 	mov esi, decnumber
  4220 00003673 4E                  <1> 	dec esi
  4221                              <1> sifind:
  4222 00003674 46                  <1> 	inc esi
  4223 00003675 803E30              <1> 	cmp byte [esi], '0'
  4224 00003678 74FA                <1> 	je sifind
  4225 0000367A E878F3FFFF          <1> 	call print
  4226 0000367F 803D[49350000]02    <1> 	cmp byte [firsthexshown], 2
  4227 00003686 750A                <1> 	jne decshown
  4228 00003688 BE[5F720000]        <1> 	mov esi, line
  4229 0000368D E865F3FFFF          <1> 	call print
  4230                              <1> decshown:
  4231 00003692 C605[49350000]00    <1> 	mov byte [firsthexshown], 0
  4232 00003699 61                  <1> 	popa
  4233 0000369A C3                  <1> 	ret
  4234                              <1> 	
  4235                              <1> cnvrttxt: 
  4236 0000369B 31C9                <1> 	xor ecx, ecx
  4237 0000369D 31C0                <1> 	xor eax, eax
  4238 0000369F 31D2                <1> 	xor edx, edx
  4239 000036A1 31DB                <1> 	xor ebx, ebx
  4240 000036A3 4E                  <1> 	dec esi
  4241                              <1> cnvrtlptxt:
  4242 000036A4 46                  <1> 	inc esi
  4243 000036A5 8A06                <1> 	mov al, [esi]
  4244 000036A7 3C00                <1> 	cmp al, 0
  4245 000036A9 75F9                <1> 	jne cnvrtlptxt
  4246 000036AB 4E                  <1> 	dec esi
  4247 000036AC 8A06                <1> 	mov al, [esi]
  4248 000036AE 3C2E                <1> 	cmp al, '.'
  4249 000036B0 7503                <1> 	jne nocnvrtdot
  4250 000036B2 46                  <1> 	inc esi
  4251 000036B3 EBEF                <1> 	jmp cnvrtlptxt
  4252                              <1> nocnvrtdot:
  4253 000036B5 3C30                <1> 	cmp al, '0'
  4254 000036B7 7504                <1> 	jne txtlp
  4255 000036B9 39FE                <1> zerotest: cmp esi, edi
  4256 000036BB 7458                <1> 	je donecnvrt
  4257                              <1> txtlp:	
  4258 000036BD 31C0                <1> 	xor eax, eax
  4259 000036BF 8A06                <1> 	mov al, [esi]
  4260 000036C1 3C3D                <1> 	cmp al, '='
  4261 000036C3 7450                <1> 	je donecnvrt
  4262 000036C5 3C30                <1> 	cmp al, 48
  4263 000036C7 724C                <1> 	jb donecnvrt
  4264 000036C9 3C23                <1> 	cmp al, '#'
  4265 000036CB 7448                <1> 	je donecnvrt
  4266 000036CD 39FE                <1> 	cmp esi, edi
  4267 000036CF 7244                <1> 	jb donecnvrt
  4268 000036D1 81F900000000        <1> 	cmp ecx, 0
  4269 000036D7 7708                <1> 	ja exp
  4270 000036D9 2C30                <1> noexp:	sub al, 48
  4271 000036DB 01C2                <1> 	add edx, eax
  4272 000036DD 4E                  <1> 	dec esi
  4273 000036DE 41                  <1> 	inc ecx
  4274 000036DF EBDC                <1> 	jmp txtlp
  4275 000036E1 81F900000000        <1> exp:	cmp ecx, 0
  4276 000036E7 74F0                <1> 	je noexp
  4277 000036E9 2C30                <1> 	sub al, 48
  4278 000036EB 51                  <1> 	push ecx
  4279 000036EC 89C3                <1> expmul:	mov ebx, eax
  4280 000036EE 01D8                <1> 	add eax, ebx
  4281 000036F0 01D8                <1> 	add eax, ebx
  4282 000036F2 01D8                <1> 	add eax, ebx
  4283 000036F4 01D8                <1> 	add eax, ebx
  4284 000036F6 01D8                <1> 	add eax, ebx
  4285 000036F8 01D8                <1> 	add eax, ebx
  4286 000036FA 01D8                <1> 	add eax, ebx
  4287 000036FC 01D8                <1> 	add eax, ebx
  4288 000036FE 01D8                <1> 	add eax, ebx
  4289 00003700 81E901000000        <1> 	sub ecx, 1
  4290 00003706 81F900000000        <1> 	cmp ecx, 0
  4291 0000370C 77DE                <1> 	ja expmul
  4292 0000370E 01C2                <1> 	add edx, eax
  4293 00003710 59                  <1> 	pop ecx
  4294 00003711 4E                  <1> 	dec esi
  4295 00003712 41                  <1> 	inc ecx
  4296 00003713 EBA8                <1> 	jmp txtlp
  4297 00003715 89D1                <1> donecnvrt: mov ecx, edx
  4298 00003717 C3                  <1> 	ret
  4299                                      %include 'source/builtinprogs.asm'
  4300 00003718 050406040704        <1> filetypes db 5,4,6,4,7,4
  4301                              <1> progstart:		;programs start here
  4302                              <1> ;db 5,4,"index",0
  4303                              <1> ;	call indexfiles
  4304                              <1> ;	jmp nwcmd
  4305                              <1> 
  4306                              <1> 
  4307                              <1> indexfiles:
  4308 0000371E BE[1E370000]        <1> 	mov esi, progstart
  4309 00003723 BB[00130000]        <1> 	mov ebx, fileindex
  4310 00003728 BF[1E370000]        <1> 	mov edi, progstart
  4311 0000372D 81EF02000000        <1> 	sub edi, 2
  4312                              <1> indexloop:
  4313 00003733 668B0E              <1> 	mov cx, [esi]
  4314                              <1> 	indexloop2:
  4315 00003736 663B0F              <1> 		cmp cx, [edi]
  4316 00003739 7424                <1> 		je indexloop2done
  4317 0000373B 81EF02000000        <1> 		sub edi, 2
  4318 00003741 81FF[18370000]      <1> 		cmp edi, filetypes
  4319 00003747 73ED                <1> 		jae indexloop2
  4320 00003749 BF[1E370000]        <1> 	mov edi, progstart
  4321 0000374E 81EF02000000        <1> 	sub edi, 2
  4322 00003754 46                  <1> 	inc esi
  4323 00003755 81FE[33470000]      <1> 	cmp esi, batchprogend
  4324 0000375B 734E                <1> 	jae indexloopdone
  4325 0000375D EBD4                <1> 	jmp indexloop
  4326                              <1> indexloop2done:
  4327 0000375F 66890B              <1> 	mov [ebx], cx
  4328 00003762 81C302000000        <1> 	add ebx, 2
  4329 00003768 81C602000000        <1> 	add esi, 2
  4330                              <1> 	nameindex:
  4331 0000376E 8A0E                <1> 		mov cl, [esi]
  4332 00003770 80F900              <1> 		cmp cl, 0
  4333 00003773 7406                <1> 		je nameindexdone
  4334 00003775 880B                <1> 		mov [ebx], cl
  4335 00003777 46                  <1> 		inc esi
  4336 00003778 43                  <1> 		inc ebx
  4337 00003779 EBF3                <1> 		jmp nameindex
  4338                              <1> 	nameindexdone:
  4339 0000377B 43                  <1> 		inc ebx
  4340 0000377C 66C7030000          <1> 		mov word [ebx], 0
  4341 00003781 81C302000000        <1> 		add ebx, 2
  4342 00003787 46                  <1> 		inc esi
  4343 00003788 8933                <1> 		mov [ebx], esi
  4344 0000378A 81C304000000        <1> 		add ebx, 4
  4345 00003790 66C7030000          <1> 		mov word [ebx], 0
  4346 00003795 81C302000000        <1> 		add ebx, 2
  4347 0000379B 81FB[00150000]      <1> 		cmp ebx, fileindexend
  4348 000037A1 7308                <1> 		jae indexloopdone
  4349 000037A3 81C601000000        <1> 		add esi, 1
  4350 000037A9 EB88                <1> 		jmp indexloop
  4351 000037AB C605[B3370000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4352 000037B2 C3                  <1> 		ret
  4353                              <1> 
  4354 000037B3 00                  <1> indexdone db 0
  4355                              <1> 
  4356                              <1> 
  4357                              <1> ;db 5,4,"showindex",0
  4358                              <1> ;	mov esi, fileindex
  4359                              <1> ;	mov ebx, fileindexend
  4360                              <1> ;	mov cl, 5
  4361                              <1> ;	mov ch, 4
  4362                              <1> ;	call array
  4363                              <1> ;	mov esi, fileindex
  4364                              <1> ;	mov ebx, fileindexend
  4365                              <1> ;	mov cl, 6
  4366                              <1> ;	mov ch, 4
  4367                              <1> ;	call array
  4368                              <1> ;	mov esi, fileindex
  4369                              <1> ;	mov ebx, fileindexend
  4370                              <1> ;	mov cl, 7
  4371                              <1> ;	mov ch, 4
  4372                              <1> ;	call array
  4373                              <1> ;	jmp nwcmd
  4374                              <1> 
  4375 000037B4 05046C7300          <1> db 5,4,"ls",0
  4376 000037B9 BE[1E370000]        <1> 	lscmd:	mov esi, progstart
  4377 000037BE BB[33470000]        <1> 		mov ebx, progend
  4378 000037C3 E9E2FAFFFF          <1> 		jmp dir
  4379                              <1> 		
  4380 000037C8 05046469736B00      <1> db 5,4,"disk",0
  4381 000037CF 31C9                <1> 		xor ecx, ecx
  4382 000037D1 8A0D[81010000]      <1> 		mov cl, [DriveNumber]
  4383 000037D7 C605[49350000]00    <1> 		mov byte [firsthexshown], 0
  4384 000037DE E87BFDFFFF          <1> 		call showhex
  4385 000037E3 BE[5F720000]        <1> 		mov esi, line
  4386 000037E8 E80AF2FFFF          <1> 		call print
  4387 000037ED BE[56710000]        <1> 		mov esi, diskfileindex
  4388                              <1> 	diskindexdir:
  4389 000037F2 E800F2FFFF          <1> 		call print
  4390 000037F7 56                  <1> 		push esi
  4391 000037F8 BE[25380000]        <1> 		mov esi, disktab
  4392 000037FD E8F5F1FFFF          <1> 		call print
  4393 00003802 5E                  <1> 		pop esi
  4394 00003803 8B4E05              <1> 		mov ecx, [esi + 5]
  4395 00003806 C605[49350000]02    <1> 		mov byte [firsthexshown], 2
  4396 0000380D E8F0FDFFFF          <1> 		call showdec
  4397 00003812 81C609000000        <1> 		add esi, 9
  4398 00003818 81FE[21720000]      <1> 		cmp esi, enddiskfileindex
  4399 0000381E 72D2                <1> 		jb diskindexdir
  4400 00003820 E929F8FFFF          <1> 		jmp nwcmd
  4401                              <1> 		
  4402 00003825 0D09090900          <1> 		disktab db 13,9,9,9,0
  4403                              <1> 
  4404 0000382A 0504636C65617200    <1> db 5,4,"clear",0
  4405 00003832 E8DDF4FFFF          <1> 	cls:	call clear
  4406 00003837 E912F8FFFF          <1> 		jmp nwcmd
  4407                              <1> 		
  4408 0000383C 05047761697400      <1> db 5,4,"wait",0
  4409 00003843 30C0                <1> 		xor al, al
  4410 00003845 E85BF1FFFF          <1> 		call int302
  4411 0000384A E9FFF7FFFF          <1> 		jmp nwcmd
  4412                              <1> 
  4413 0000384F 05046563686F00      <1> db 5,4,"echo",0
  4414 00003856 BE[7A1B0000]        <1> 	echo:	mov esi, buftxt
  4415 0000385B 81C605000000        <1> 		add esi, 5
  4416 00003861 8A06                <1> 		mov al, [esi]
  4417                              <1> 		;cmp al, '$'
  4418                              <1> 		;je echovr		;;now unnecessary
  4419 00003863 E88FF1FFFF          <1> 		call print
  4420 00003868 BE[5F720000]        <1> 		mov esi, line
  4421 0000386D E885F1FFFF          <1> 		call print
  4422 00003872 E9D7F7FFFF          <1> 		jmp nwcmd
  4423 00003877 BB[6F150000]        <1> 	echovr:	mov ebx, variables
  4424 0000387C BF06000000          <1> 		mov edi, 6
  4425 00003881 E83A000000          <1> 		call nxtvrech
  4426 00003886 E952000000          <1> 		jmp prntvr2
  4427 0000388B B13D                <1> 	echvar:	mov cl, '='
  4428 0000388D 43                  <1> 		inc ebx
  4429 0000388E 8A03                <1> 		mov al, [ebx]
  4430 00003890 3C00                <1> 		cmp al, 0
  4431 00003892 742C                <1> 		je nxtvrech
  4432 00003894 3C3D                <1> 		cmp al, '='
  4433 00003896 7420                <1> 		je nxtvrechb1
  4434 00003898 BE[7A1B0000]        <1> 		mov esi, buftxt
  4435 0000389D 01FE                <1> 		add esi, edi
  4436 0000389F E8E6F9FFFF          <1> 		call cndtest
  4437 000038A4 3C02                <1> 		cmp al, 2
  4438 000038A6 7431                <1> 		je prntvr
  4439 000038A8 3C01                <1> 		cmp al, 1
  4440 000038AA 742D                <1> 		je prntvr
  4441 000038AC BE[7A1B0000]        <1> 		mov esi, buftxt
  4442 000038B1 01FE                <1> 		add esi, edi
  4443 000038B3 E908000000          <1> 		jmp nxtvrech
  4444                              <1> 	nxtvrechb1:
  4445 000038B8 81EB02000000        <1> 		sub ebx, 2
  4446 000038BE EBCB                <1> 		jmp echvar
  4447 000038C0 8A03                <1> 	nxtvrech: mov al, [ebx]
  4448 000038C2 3C05                <1> 		cmp al, 5
  4449 000038C4 740A                <1> 		je nxtvrec2
  4450 000038C6 43                  <1> 		inc ebx
  4451 000038C7 81FB[6F1A0000]      <1> 		cmp ebx, varend
  4452 000038CD 72F1                <1> 		jb nxtvrech
  4453 000038CF C3                  <1> 		ret
  4454 000038D0 43                  <1> 	nxtvrec2: inc ebx
  4455 000038D1 8A03                <1> 		mov al, [ebx]
  4456 000038D3 3C04                <1> 		cmp al, 4
  4457 000038D5 74B4                <1> 		je echvar
  4458 000038D7 EBE7                <1> 		jmp nxtvrech
  4459 000038D9 43                  <1> 	prntvr: inc ebx
  4460 000038DA 89DE                <1> 		mov esi, ebx
  4461 000038DC C3                  <1> 		ret
  4462 000038DD E815F1FFFF          <1> 	prntvr2: call print
  4463 000038E2 BE[5F720000]        <1> 		mov esi, line
  4464 000038E7 E80BF1FFFF          <1> 		call print
  4465 000038EC E95DF7FFFF          <1> 		jmp nwcmd
  4466                              <1> 		
  4467                              <1> 
  4468 000038F1 05042300            <1> db 5,4,"#",0
  4469                              <1> 	num:	
  4470 000038F5 E8BDFAFFFF          <1> 		call clearbuffer
  4471 000038FA C605[773B0000]00    <1> 		mov byte [decimal], 0
  4472 00003901 C605[783B0000]00    <1> 		mov byte [decimal2], 0
  4473 00003908 BE[7A1B0000]        <1> 		mov esi, buftxt
  4474 0000390D 31C0                <1> 		xor eax, eax
  4475 0000390F 31C9                <1> 		xor ecx, ecx
  4476 00003911 31DB                <1> 		xor ebx, ebx
  4477 00003913 8A06                <1> 	num2:	mov al, [esi]
  4478 00003915 3C2B                <1> 		cmp al, '+'
  4479 00003917 741B                <1> 		je operatorfound
  4480 00003919 3C2D                <1> 		cmp al, '-'
  4481 0000391B 7417                <1> 		je operatorfound
  4482 0000391D 3C2A                <1> 		cmp al, '*'
  4483 0000391F 7413                <1> 		je operatorfound
  4484 00003921 3C2F                <1> 		cmp al, '/'
  4485 00003923 740F                <1> 		je operatorfound
  4486 00003925 3C5E                <1> 		cmp al, '^'
  4487 00003927 740B                <1> 		je operatorfound
  4488 00003929 46                  <1> 		inc esi
  4489 0000392A 3C00                <1> 		cmp al, 0
  4490 0000392C 0F841CF7FFFF        <1> 		je near nwcmd
  4491 00003932 EBDF                <1> 		jmp num2
  4492 00003934 50                  <1> 	operatorfound: push eax
  4493 00003935 30E4                <1> 		xor ah, ah
  4494 00003937 8826                <1> 		mov [esi], ah
  4495 00003939 89F7                <1> 		mov edi, esi
  4496 0000393B 46                  <1> 		inc esi
  4497 0000393C 8A06                <1> 		mov al, [esi]
  4498                              <1> 		;cmp al, '$'
  4499                              <1> 		;je near varnum1	;;unnecessary
  4500 0000393E 3C25                <1> 		cmp al, '%'
  4501 00003940 0F8461000000        <1> 		je near resultnum1
  4502                              <1> 	varnum2: 
  4503 00003946 57                  <1> 		push edi
  4504 00003947 E8A3000000          <1> 		call checkdecimal
  4505 0000394C 5F                  <1> 		pop edi
  4506 0000394D E849FDFFFF          <1> 		call cnvrttxt
  4507                              <1> 	vrnm2:
  4508 00003952 89CB                <1> 		mov ebx, ecx
  4509 00003954 53                  <1> 		push ebx
  4510 00003955 E85DFAFFFF          <1> 		call clearbuffer
  4511 0000395A BE[7A1B0000]        <1> 		mov esi, buftxt
  4512 0000395F 89F7                <1> 		mov edi, esi
  4513 00003961 46                  <1> 		inc esi
  4514 00003962 8A06                <1> 		mov al, [esi]
  4515                              <1> 		;cmp al, '$'
  4516                              <1> 		;je near varnum3	;;unnecessary
  4517 00003964 3C25                <1> 		cmp al, '%'
  4518 00003966 0F844F000000        <1> 		je near resultnum2
  4519                              <1> 	varnum4: 
  4520 0000396C 57                  <1> 		push edi
  4521 0000396D E869000000          <1> 		call checkdecimal2
  4522 00003972 5F                  <1> 		pop edi
  4523 00003973 E823FDFFFF          <1> 		call cnvrttxt
  4524                              <1> 	vrnm4:
  4525 00003978 5B                  <1> 		pop ebx
  4526 00003979 58                  <1> 		pop eax
  4527 0000397A 3C2B                <1> 		cmp al, '+'
  4528 0000397C 0F849B000000        <1> 		je near plusnum
  4529 00003982 3C2D                <1> 		cmp al, '-'
  4530 00003984 0F849F000000        <1> 		je near subnum
  4531 0000398A 3C2A                <1> 		cmp al, '*'
  4532 0000398C 0F84A3000000        <1> 		je near mulnum
  4533 00003992 3C2F                <1> 		cmp al, '/'
  4534 00003994 0F84B1000000        <1> 		je near divnum
  4535 0000399A 3C5E                <1> 		cmp al, '^'
  4536 0000399C 0F84CC000000        <1> 		je near expnum
  4537 000039A2 E9A7F6FFFF          <1> 		jmp nwcmd
  4538                              <1> 	resultnum1:
  4539 000039A7 8A0D[793B0000]      <1> 		mov cl, [decimalresult]
  4540 000039AD 880D[773B0000]      <1> 		mov [decimal], cl
  4541 000039B3 8B0D[7A3B0000]      <1> 		mov ecx, [result]
  4542 000039B9 EB97                <1> 		jmp vrnm2
  4543                              <1> 	resultnum2:
  4544 000039BB 8A0D[773B0000]      <1> 		mov cl, [decimal]
  4545 000039C1 880D[783B0000]      <1> 		mov [decimal2], cl
  4546 000039C7 8A0D[793B0000]      <1> 		mov cl, [decimalresult]
  4547 000039CD 880D[773B0000]      <1> 		mov [decimal], cl
  4548 000039D3 8B0D[7A3B0000]      <1> 		mov ecx, [result]
  4549 000039D9 EB9D                <1> 		jmp vrnm4
  4550                              <1> ;	varnum1: sub esi, buftxt
  4551                              <1> ;		mov edi, esi
  4552                              <1> ;		add esi, buftxt
  4553                              <1> ;		inc edi
  4554                              <1> ;		mov ebx, variables
  4555                              <1> ;		call nxtvrech
  4556                              <1> ;		mov edi, esi
  4557                              <1> ;		dec edi
  4558                              <1> ;		jmp varnum2
  4559                              <1> ;	varnum3: sub esi, buftxt
  4560                              <1> ;		mov edi, esi
  4561                              <1> ;		add esi, buftxt
  4562                              <1> ;		inc edi
  4563                              <1> ;		mov ebx, variables
  4564                              <1> ;		call nxtvrech
  4565                              <1> ;		mov edi, esi
  4566                              <1> ;		dec edi
  4567                              <1> ;		jmp varnum4
  4568                              <1> 	checkdecimal2:
  4569 000039DB 8A25[773B0000]      <1> 		mov ah, [decimal]
  4570 000039E1 8825[783B0000]      <1> 		mov [decimal2], ah
  4571 000039E7 30E4                <1> 		xor ah, ah
  4572 000039E9 8825[773B0000]      <1> 		mov [decimal], ah
  4573                              <1> 	checkdecimal:
  4574 000039EF 89F7                <1> 		mov edi, esi
  4575                              <1> 	chkdec1:
  4576 000039F1 8A07                <1> 		mov al, [edi]
  4577 000039F3 3C2E                <1> 		cmp al, '.'
  4578 000039F5 0F840B000000        <1> 		je near fnddec
  4579 000039FB 3C00                <1> 		cmp al, 0
  4580 000039FD 0F8419000000        <1> 		je near nodecimal
  4581 00003A03 47                  <1> 		inc edi
  4582 00003A04 EBEB                <1> 		jmp chkdec1
  4583                              <1> 	fnddec:
  4584 00003A06 8A4701              <1> 		mov al, [edi + 1]
  4585 00003A09 8807                <1> 		mov [edi], al
  4586 00003A0B 3C00                <1> 		cmp al, 0
  4587 00003A0D 0F8409000000        <1> 		je near nodecimal
  4588 00003A13 FE05[773B0000]      <1> 		inc byte [decimal]
  4589 00003A19 47                  <1> 		inc edi
  4590 00003A1A EBEA                <1> 		jmp fnddec
  4591                              <1> 	nodecimal:
  4592 00003A1C C3                  <1> 		ret
  4593                              <1> 	plusnum:
  4594 00003A1D E813010000          <1> 		call decaddfix
  4595 00003A22 01D9                <1> 		add ecx, ebx
  4596 00003A24 E988000000          <1> 		jmp retnum
  4597                              <1> 	subnum:
  4598 00003A29 E807010000          <1> 		call decaddfix
  4599 00003A2E 29D9                <1> 		sub ecx, ebx
  4600 00003A30 E97C000000          <1> 		jmp retnum
  4601                              <1> 	mulnum:
  4602 00003A35 A0[783B0000]        <1> 		mov al, [decimal2]
  4603 00003A3A 0005[773B0000]      <1> 		add [decimal], al
  4604 00003A40 89C8                <1> 		mov eax, ecx
  4605 00003A42 F7E3                <1> 		mul ebx
  4606 00003A44 89C1                <1> 		mov ecx, eax
  4607 00003A46 E966000000          <1> 		jmp retnum
  4608                              <1> 	divnum:
  4609 00003A4B E8E5000000          <1> 		call decaddfix
  4610 00003A50 30C0                <1> 		xor al, al
  4611 00003A52 A2[773B0000]        <1> 		mov [decimal], al
  4612 00003A57 6689C8              <1> 		mov ax, cx
  4613 00003A5A 80FB00              <1> 		cmp bl, 0
  4614 00003A5D 0F844E000000        <1> 		je near retnum
  4615 00003A63 F6F3                <1> 		div bl
  4616 00003A65 31C9                <1> 		xor ecx, ecx
  4617 00003A67 88C1                <1> 		mov cl, al
  4618 00003A69 E943000000          <1> 		jmp retnum
  4619                              <1> 	expnum:
  4620 00003A6E 8A15[773B0000]      <1> 		mov dl, [decimal]
  4621 00003A74 8815[783B0000]      <1> 		mov [decimal2], dl
  4622 00003A7A 31D2                <1> 		xor edx, edx
  4623 00003A7C 89C8                <1> 		mov eax, ecx
  4624 00003A7E 89D9                <1> 		mov ecx, ebx
  4625 00003A80 89C3                <1> 		mov ebx, eax
  4626 00003A82 81F900000000        <1> 		cmp ecx, 0
  4627 00003A88 7422                <1> 		je noexpnum
  4628 00003A8A 49                  <1> 		dec ecx
  4629 00003A8B 81F900000000        <1> 		cmp ecx, 0
  4630 00003A91 7412                <1> 		je noexpnumlp
  4631 00003A93 F7E3                <1> 	expnumlp: mul ebx
  4632 00003A95 8A15[783B0000]      <1> 		mov dl, [decimal2]
  4633 00003A9B 0015[773B0000]      <1> 		add [decimal], dl
  4634 00003AA1 31D2                <1> 		xor edx, edx
  4635 00003AA3 E2EE                <1> 		loop expnumlp
  4636                              <1> 	noexpnumlp:
  4637 00003AA5 89C1                <1> 		mov ecx, eax
  4638 00003AA7 E905000000          <1> 		jmp retnum
  4639                              <1> 	noexpnum:
  4640 00003AAC B901000000          <1> 		mov ecx, 1
  4641                              <1> 	retnum: 
  4642 00003AB1 BE[8E1D0000]        <1> 		mov esi, numbuf
  4643 00003AB6 890D[7A3B0000]      <1> 		mov [result], ecx
  4644 00003ABC E80BF9FFFF          <1> 		call convert
  4645 00003AC1 BE[8E1D0000]        <1> 		mov esi, numbuf
  4646 00003AC6 8A25[773B0000]      <1> 		mov ah, [decimal]
  4647 00003ACC 8825[793B0000]      <1> 		mov [decimalresult], ah
  4648 00003AD2 80FC00              <1> 		cmp ah, 0
  4649 00003AD5 0F8425000000        <1> 		je near noputdecimal
  4650                              <1> 	putdecimal:
  4651 00003ADB 4E                  <1> 		dec esi
  4652 00003ADC FECC                <1> 		dec ah
  4653 00003ADE 80FC00              <1> 		cmp ah, 0
  4654 00003AE1 0F87F4FFFFFF        <1> 		ja near putdecimal
  4655 00003AE7 4E                  <1> 		dec esi
  4656 00003AE8 8A06                <1> 		mov al, [esi]
  4657 00003AEA C6062E              <1> 		mov byte [esi], '.'
  4658                              <1> 	decputloop:
  4659 00003AED 4E                  <1> 		dec esi
  4660 00003AEE 8A26                <1> 		mov ah, [esi]
  4661 00003AF0 8806                <1> 		mov [esi], al
  4662 00003AF2 88E0                <1> 		mov al, ah
  4663 00003AF4 81FE[7A1D0000]      <1> 		cmp esi, buf2
  4664 00003AFA 0F87EDFFFFFF        <1> 		ja near decputloop
  4665                              <1> 	noputdecimal:
  4666 00003B00 BE[7A1D0000]        <1> 		mov esi, buf2
  4667 00003B05 E809000000          <1> 		call chkadd
  4668 00003B0A E93FF5FFFF          <1> 		jmp nwcmd
  4669 00003B0F 00000000            <1> edxnumbuf dw 0,0
  4670 00003B13 8A06                <1> 	chkadd: mov al, [esi]
  4671 00003B15 3C30                <1> 		cmp al, '0'
  4672 00003B17 750C                <1> 		jne dnadd
  4673 00003B19 46                  <1> 		inc esi
  4674 00003B1A 81FE[8E1D0000]      <1> 		cmp esi, numbuf
  4675 00003B20 7402                <1> 		je dnaddm1
  4676 00003B22 EBEF                <1> 		jmp chkadd
  4677 00003B24 4E                  <1> 	dnaddm1: dec esi
  4678 00003B25 E8CDEEFFFF          <1> 	dnadd:	call print
  4679 00003B2A BE[5F720000]        <1> 		mov esi, line
  4680 00003B2F E8C3EEFFFF          <1> 		call print
  4681 00003B34 C3                  <1> 		ret
  4682                              <1> 		
  4683                              <1> 	decaddfix:
  4684 00003B35 A0[783B0000]        <1> 		mov al, [decimal2]
  4685 00003B3A 8A25[773B0000]      <1> 		mov ah, [decimal]
  4686 00003B40 38E0                <1> 		cmp al, ah
  4687 00003B42 7432                <1> 		je gooddecadd
  4688 00003B44 38E0                <1> 		cmp al, ah
  4689 00003B46 721A                <1> 		jb lowdecadd
  4690                              <1> 	highdecadd:
  4691 00003B48 FEC4                <1> 		inc ah
  4692 00003B4A 89CA                <1> 		mov edx, ecx
  4693 00003B4C C1E103              <1> 		shl ecx, 3
  4694 00003B4F 01D1                <1> 		add ecx, edx
  4695 00003B51 01D1                <1> 		add ecx, edx
  4696 00003B53 38E0                <1> 		cmp al, ah
  4697 00003B55 77F1                <1> 		ja highdecadd
  4698 00003B57 8825[773B0000]      <1> 		mov [decimal], ah
  4699 00003B5D E914000000          <1> 		jmp gooddecadd
  4700                              <1> 	lowdecadd:
  4701 00003B62 FEC0                <1> 		inc al
  4702 00003B64 89DA                <1> 		mov edx, ebx
  4703 00003B66 C1E303              <1> 		shl ebx, 3
  4704 00003B69 01D3                <1> 		add ebx, edx
  4705 00003B6B 01D3                <1> 		add ebx, edx
  4706 00003B6D 38E0                <1> 		cmp al, ah
  4707 00003B6F 72F1                <1> 		jb lowdecadd
  4708 00003B71 A2[773B0000]        <1> 		mov [decimal], al
  4709                              <1> 	gooddecadd:
  4710 00003B76 C3                  <1> 		ret
  4711                              <1> 		
  4712 00003B77 00                  <1> decimal db 0
  4713 00003B78 00                  <1> decimal2 db 0
  4714 00003B79 00                  <1> decimalresult db 0
  4715 00003B7A 00000000            <1> result db 0,0,0,0
  4716                              <1> 	
  4717 00003B7E 05042500            <1> db 5,4,"%",0
  4718 00003B82 E830F8FFFF          <1> 	ans:	call clearbuffer
  4719 00003B87 8B0D[7A3B0000]      <1> 		mov ecx, [result]
  4720 00003B8D BE[7A1D0000]        <1> 		mov esi, buf2
  4721 00003B92 E835F8FFFF          <1> 		call convert
  4722 00003B97 BE[7A1D0000]        <1> 		mov esi, buf2
  4723 00003B9C E872FFFFFF          <1> 		call chkadd
  4724 00003BA1 E9A8F4FFFF          <1> 		jmp nwcmd
  4725                              <1> 
  4726 00003BA6 05042400            <1> db 5,4,"$",0
  4727 00003BAA BE[7A1B0000]        <1> var: mov esi, buftxt
  4728 00003BAF BB[6F150000]        <1> 	mov ebx, variables
  4729 00003BB4 8A06                <1> lkeq:	mov al, [esi]
  4730 00003BB6 3C3D                <1> 	cmp al, '='
  4731 00003BB8 741F                <1> 	je eqfnd	;is there an '=' sign?
  4732 00003BBA 3C00                <1> 	cmp al, 0
  4733 00003BBC 7403                <1> 	je echovars
  4734 00003BBE 46                  <1> 	inc esi
  4735 00003BBF EBF3                <1> 	jmp lkeq
  4736 00003BC1 BE[6F150000]        <1> echovars: mov esi, variables
  4737 00003BC6 BB[6F1A0000]        <1> 	mov ebx, varend
  4738 00003BCB B105                <1> 	mov cl, 5
  4739 00003BCD B504                <1> 	mov ch, 4
  4740 00003BCF E882F7FFFF          <1> 	call array
  4741 00003BD4 E975F4FFFF          <1> 	jmp nwcmd
  4742 00003BD9 46                  <1> eqfnd:	inc esi
  4743 00003BDA 8A06                <1> 	mov al, [esi]
  4744 00003BDC 3C00                <1> 	cmp al, 0
  4745 00003BDE 740F                <1> 	je readvar
  4746 00003BE0 BE[7A1B0000]        <1> 	mov esi, buftxt
  4747 00003BE5 BB[6F150000]        <1> 	mov ebx, variables
  4748 00003BEA E923000000          <1> 	jmp seek
  4749                              <1> readvar:
  4750 00003BEF B00D                <1> 	mov al, 13
  4751 00003BF1 66BB0700            <1> 	mov bx, 7
  4752 00003BF5 C605[582A0000]00    <1> 	mov byte [commandedit], 0
  4753 00003BFC BF[7A1D0000]        <1> 	mov edi, buftxtend
  4754 00003C01 E85FEEFFFF          <1> 	call int305
  4755 00003C06 BE[5F720000]        <1> 	mov esi, line
  4756 00003C0B E8E7EDFFFF          <1> 	call print
  4757 00003C10 EB98                <1> 	jmp var
  4758 00003C12 668B03              <1> seek:	mov ax, [ebx]
  4759 00003C15 B105                <1> 	mov cl, 5
  4760 00003C17 B504                <1> 	mov ch, 4
  4761 00003C19 663D0000            <1> 	cmp ax, 0
  4762 00003C1D 0F8459000000        <1> 	je near save
  4763 00003C23 6639C8              <1> 	cmp ax, cx
  4764 00003C26 7403                <1> 	je skfnd
  4765 00003C28 43                  <1> 	inc ebx
  4766 00003C29 EBE7                <1> 	jmp seek
  4767 00003C2B BE[7A1B0000]        <1> skfnd:	mov esi, buftxt
  4768 00003C30 46                  <1> 	inc esi
  4769 00003C31 81C302000000        <1> 	add ebx, 2
  4770 00003C37 89DF                <1> 	mov edi, ebx
  4771 00003C39 B13D                <1> 	mov cl, '='
  4772 00003C3B E84AF6FFFF          <1> 	call cndtest
  4773 00003C40 3C01                <1> 	cmp al, 1	
  4774 00003C42 7417                <1> 	je varfnd
  4775 00003C44 89FB                <1> 	mov ebx, edi
  4776 00003C46 BE[7A1B0000]        <1> 	mov esi, buftxt
  4777 00003C4B 668B03              <1> 	mov ax, [ebx]
  4778 00003C4E 663D0000            <1> 	cmp ax, 0
  4779 00003C52 0F8424000000        <1> 	je near save
  4780 00003C58 43                  <1> 	inc ebx
  4781 00003C59 EBB7                <1> 	jmp seek
  4782 00003C5B 8A03                <1> varfnd:	mov al, [ebx]
  4783 00003C5D 3C04                <1> 	cmp al, 4
  4784 00003C5F 7404                <1> 	je save2
  4785 00003C61 4B                  <1> 	dec ebx
  4786 00003C62 4E                  <1> 	dec esi
  4787 00003C63 EBF6                <1> 	jmp varfnd
  4788 00003C65 4B                  <1> save2:	dec ebx
  4789 00003C66 4E                  <1> 	dec esi
  4790 00003C67 8A03                <1> 	mov al, [ebx]
  4791 00003C69 3C05                <1> 	cmp al, 5
  4792 00003C6B 7402                <1> 	je remove
  4793 00003C6D EBEC                <1> 	jmp varfnd
  4794 00003C6F 8A03                <1> remove: mov al, [ebx]
  4795 00003C71 3C00                <1> 	cmp al, 0
  4796 00003C73 749D                <1> 	je seek
  4797 00003C75 30C0                <1> 	xor al, al
  4798 00003C77 8803                <1> 	mov [ebx], al
  4799 00003C79 43                  <1> 	inc ebx
  4800 00003C7A EBF3                <1> 	jmp remove	;do not need for now-need defragmentation
  4801 00003C7C BE[7A1B0000]        <1> save:	mov esi, buftxt
  4802 00003C81 43                  <1> 	inc ebx
  4803 00003C82 B005                <1> 	mov al, 5
  4804 00003C84 B404                <1> 	mov ah, 4
  4805 00003C86 668903              <1> 	mov [ebx], ax
  4806 00003C89 43                  <1> 	inc ebx
  4807 00003C8A 43                  <1> svhere:	inc ebx
  4808 00003C8B 46                  <1> 	inc esi
  4809 00003C8C 8A06                <1> 	mov al, [esi]
  4810 00003C8E 3C00                <1> 	cmp al, 0
  4811 00003C90 0F8442000000        <1> 	je near svdone
  4812 00003C96 3C25                <1> 	cmp al, '%'
  4813 00003C98 7404                <1> 	je ans2
  4814 00003C9A 8803                <1> 	mov [ebx], al	
  4815 00003C9C EBEC                <1> 	jmp svhere
  4816 00003C9E 56                  <1> ans2:	push esi
  4817 00003C9F BE[7A1D0000]        <1> 	mov esi, buf2
  4818 00003CA4 E823000000          <1> 	call ansfnd
  4819 00003CA9 E803000000          <1> 	call anscp
  4820 00003CAE 5E                  <1> 	pop esi
  4821 00003CAF EBD9                <1> 	jmp svhere
  4822 00003CB1 8A06                <1> anscp:	mov al, [esi]
  4823 00003CB3 8803                <1> 	mov [ebx], al
  4824 00003CB5 81FE[8E1D0000]      <1> 	cmp esi, numbuf
  4825 00003CBB 74CD                <1> 	je svhere
  4826 00003CBD 3C00                <1> 	cmp al, 0
  4827 00003CBF 74C9                <1> 	je svhere
  4828 00003CC1 43                  <1> 	inc ebx
  4829 00003CC2 46                  <1> 	inc esi
  4830 00003CC3 EBEC                <1> 	jmp anscp
  4831 00003CC5 5E                  <1> ansnf:	pop esi
  4832 00003CC6 8A06                <1> 	mov al, [esi]
  4833 00003CC8 8803                <1> 	mov [ebx], al
  4834 00003CCA EBBE                <1> 	jmp svhere
  4835 00003CCC 46                  <1> ansfnd:	inc esi
  4836 00003CCD 8A06                <1> 	mov al, [esi]
  4837 00003CCF 3C00                <1> 	cmp al, 0
  4838 00003CD1 74F2                <1> 	je ansnf
  4839 00003CD3 3C30                <1> 	cmp al, '0'
  4840 00003CD5 74F5                <1> 	je ansfnd
  4841 00003CD7 C3                  <1> 	ret
  4842 00003CD8 30C0                <1> svdone:	xor al, al
  4843 00003CDA 8803                <1> 	mov [ebx], al
  4844 00003CDC E96DF3FFFF          <1> 	jmp nwcmd
  4845                              <1> 	
  4846 00003CE1 05046C6F676F757400  <1> 	db 5,4,"logout",0
  4847                              <1> logout:
  4848 00003CEA E93BF2FFFF          <1> 	jmp os
  4849                              <1> 	
  4850 00003CEF 05047265626F6F7400  <1> 	db 5,4,"reboot",0
  4851                              <1> rebootcomp:
  4852 00003CF8 E955C5FFFF          <1> 	jmp coldboot
  4853                              <1> 
  4854 00003CFD 050473687574646F77- <1> 	db 5,4,"shutdown",0
  4855 00003D06 6E00                <1>
  4856                              <1> shutdowncomp:
  4857 00003D08 E91BC5FFFF          <1> 	jmp shutdown
  4858                              <1> 	
  4859 00003D0D 05042E2F00          <1> 	db 5,4,"./",0
  4860                              <1> rundiskprog:
  4861 00003D12 BF[7A1B0000]        <1> 	mov edi, buftxt
  4862 00003D17 81C702000000        <1> 	add edi, 2
  4863 00003D1D BE00004000          <1> 	mov esi, 0x400000
  4864 00003D22 E8E02B0000          <1> 	call loadfile
  4865 00003D27 81FA94010000        <1> 	cmp edx, 404
  4866 00003D2D 742E                <1> 	je noprogfound
  4867 00003D2F BB00004000          <1> 	mov ebx, 0x400000
  4868 00003D34 66813B4558          <1> 	cmp word [ebx], "EX"
  4869 00003D39 754B                <1> 	jne progbatchfound
  4870 00003D3B 81C302000000        <1> 	add ebx, 2
  4871 00003D41 BF[7A1B0000]        <1> 	mov edi, buftxt
  4872 00003D46 81C702000000        <1> 	add edi, 2
  4873                              <1> findspaceprog:
  4874 00003D4C 8A07                <1> 	mov al, [edi]
  4875 00003D4E 47                  <1> 	inc edi
  4876 00003D4F 3C20                <1> 	cmp al, " "
  4877 00003D51 75F9                <1> 	jne findspaceprog
  4878                              <1> findnonspaceprog:
  4879 00003D53 8A07                <1> 	mov al, [edi]
  4880 00003D55 47                  <1> 	inc edi
  4881 00003D56 3C20                <1> 	cmp al, " "
  4882 00003D58 74F9                <1> 	je findnonspaceprog
  4883 00003D5A 4F                  <1> 	dec edi
  4884 00003D5B FFE3                <1> 	jmp ebx
  4885                              <1> noprogfound:
  4886 00003D5D BE[26720000]        <1> 	mov esi, notfound1
  4887 00003D62 E890ECFFFF          <1> 	call print
  4888 00003D67 BE[7A1B0000]        <1> 	mov esi, buftxt
  4889 00003D6C 81C602000000        <1> 	add esi, 2
  4890 00003D72 E880ECFFFF          <1> 	call print
  4891 00003D77 BE[30720000]        <1> 	mov esi, notfound2
  4892 00003D7C E876ECFFFF          <1> 	call print
  4893 00003D81 E9C8F2FFFF          <1> 	jmp nwcmd
  4894                              <1> progbatchfound:
  4895 00003D86 BF00004000          <1> 		mov edi, 0x400000
  4896 00003D8B C605[69150000]01    <1> 		mov byte [BATCHISON], 1
  4897                              <1> 	batchrunloop:
  4898 00003D92 E88AF2FFFF          <1> 		call buftxtclear
  4899 00003D97 BE[7A1B0000]        <1> 		mov esi, buftxt
  4900                              <1> 	batchrunloop2:
  4901 00003D9C B10D                <1> 		mov cl, 13
  4902 00003D9E B50A                <1> 		mov ch, 10
  4903 00003DA0 66390F              <1> 		cmp [edi], cx
  4904 00003DA3 0F841E000000        <1> 		je near nxtbatchrunline
  4905 00003DA9 66C1C108            <1> 		rol cx, 8
  4906 00003DAD 66390F              <1> 		cmp [edi], cx
  4907 00003DB0 0F8411000000        <1> 		je near nxtbatchrunline
  4908 00003DB6 803F00              <1> 		cmp byte [edi], 0
  4909 00003DB9 0F8408000000        <1> 		je near nxtbatchrunline
  4910 00003DBF 8A07                <1> 		mov al, [edi]
  4911 00003DC1 8806                <1> 		mov [esi], al
  4912 00003DC3 46                  <1> 		inc esi
  4913 00003DC4 47                  <1> 		inc edi
  4914 00003DC5 EBD5                <1> 		jmp batchrunloop2
  4915                              <1> 	nxtbatchrunline:
  4916 00003DC7 81C702000000        <1> 		add edi, 2
  4917 00003DCD 893D[293E0000]      <1> 		mov [batchedi], edi
  4918 00003DD3 C60600              <1> 		mov byte [esi], 0
  4919 00003DD6 BE[7A1B0000]        <1> 		mov esi, buftxt
  4920 00003DDB 803E00              <1> 		cmp byte [esi], 0
  4921 00003DDE 0F8439000000        <1> 		je near nobatchfoundrun
  4922 00003DE4 31DB                <1> 		xor ebx, ebx
  4923 00003DE6 8A1D[00150000]      <1> 		mov bl, [IFON]
  4924 00003DEC 80FB01              <1> 		cmp bl, 1
  4925 00003DEF 0F8338000000        <1> 		jae near iftestbatch
  4926                              <1> 	doneiftest:
  4927 00003DF5 803D[F03E0000]00    <1> 		cmp byte [runnextline], 0
  4928 00003DFC 0F8405000000        <1> 		je near noruniftest
  4929 00003E02 E8C6F3FFFF          <1> 		call progtest
  4930                              <1> 	noruniftest:
  4931 00003E07 C605[F03E0000]01    <1> 		mov byte [runnextline], 1
  4932 00003E0E 8B3D[293E0000]      <1> 		mov edi, [batchedi]
  4933 00003E14 803F00              <1> 		cmp byte [edi], 0
  4934 00003E17 0F8575FFFFFF        <1> 		jne near batchrunloop
  4935                              <1> 	nobatchfoundrun:
  4936 00003E1D C605[69150000]00    <1> 		mov byte [BATCHISON], 0
  4937 00003E24 E925F2FFFF          <1> 		jmp nwcmd
  4938                              <1> 	
  4939 00003E29 00000000            <1> batchedi dd 0	
  4940                              <1> 	
  4941                              <1> 	iftestbatch:
  4942 00003E2D BE[01150000]        <1> 		mov esi, IFTRUE
  4943 00003E32 01DE                <1> 		add esi, ebx
  4944 00003E34 803E00              <1> 		cmp byte [esi], 0
  4945 00003E37 0F85B8FFFFFF        <1> 		jne near doneiftest
  4946 00003E3D 881D[F13E0000]      <1> 		mov [iffalsebuf], bl
  4947 00003E43 803D[6A150000]01    <1> 		cmp byte [LOOPON], 1
  4948 00003E4A 750B                <1> 		jne fifindbatch
  4949 00003E4C 8B3D[6B150000]      <1> 		mov edi, [LOOPPOS]
  4950 00003E52 E93BFFFFFF          <1> 		jmp batchrunloop
  4951                              <1> 	fifindbatch:
  4952 00003E57 66B96966            <1> 		mov cx, "if"
  4953 00003E5B 66B86669            <1> 		mov ax, "fi"
  4954 00003E5F 663907              <1> 		cmp [edi], ax
  4955 00003E62 0F841A000000        <1> 		je near fifoundbatch
  4956 00003E68 66390F              <1> 		cmp [edi], cx
  4957 00003E6B 0F8462000000        <1> 		je near iffoundbatch
  4958 00003E71 803F00              <1> 		cmp byte [edi], 0
  4959 00003E74 0F8408000000        <1> 		je near fifoundbatch
  4960 00003E7A 81C702000000        <1> 		add edi, 2
  4961 00003E80 EBD5                <1> 		jmp fifindbatch
  4962                              <1> 	fifoundbatch:
  4963 00003E82 81C702000000        <1> 		add edi, 2
  4964 00003E88 B00D                <1> 		mov al, 13
  4965 00003E8A B40A                <1> 		mov ah, 10
  4966 00003E8C 663907              <1> 		cmp [edi], ax
  4967 00003E8F 7414                <1> 		je goodfibatch
  4968 00003E91 66C1C008            <1> 		rol ax, 8
  4969 00003E95 663907              <1> 		cmp [edi], ax
  4970 00003E98 740B                <1> 		je goodfibatch
  4971 00003E9A 803F00              <1> 		cmp byte [edi], 0
  4972 00003E9D 0F847AFFFFFF        <1> 		je near nobatchfoundrun
  4973 00003EA3 EBB2                <1> 		jmp fifindbatch
  4974                              <1> 	goodfibatch:
  4975 00003EA5 B001                <1> 		mov al, 1
  4976 00003EA7 2805[00150000]      <1> 		sub [IFON], al 
  4977 00003EAD A0[00150000]        <1> 		mov al, [IFON]
  4978 00003EB2 8A1D[F13E0000]      <1> 		mov bl, [iffalsebuf]
  4979 00003EB8 38D8                <1> 		cmp al, bl
  4980 00003EBA 779B                <1> 		ja fifindbatch
  4981 00003EBC BE[7A1B0000]        <1> 		mov esi, buftxt
  4982 00003EC1 81EF02000000        <1> 		sub edi, 2
  4983 00003EC7 C605[F03E0000]00    <1> 		mov byte [runnextline], 0
  4984 00003ECE E9BFFEFFFF          <1> 		jmp batchrunloop
  4985                              <1> 	iffoundbatch:
  4986 00003ED3 B020                <1> 		mov al, ' '
  4987 00003ED5 81C702000000        <1> 		add edi, 2
  4988 00003EDB 3807                <1> 		cmp [edi], al
  4989 00003EDD 0F8574FFFFFF        <1> 		jne near fifindbatch
  4990 00003EE3 B001                <1> 		mov al, 1
  4991 00003EE5 0005[00150000]      <1> 		add [IFON], al
  4992 00003EEB E967FFFFFF          <1> 		jmp fifindbatch
  4993                              <1> 		
  4994                              <1> 		
  4995 00003EF0 01                  <1> runnextline db 1
  4996 00003EF1 00                  <1> iffalsebuf db 0
  4997                              <1> 
  4998 00003EF2 E957F1FFFF          <1> notbatch: jmp nwcmd
  4999                              <1> 
  5000 00003EF7 05047768696C6500    <1> 	db 5,4,"while",0
  5001 00003EFF 30C0                <1> whilecmd:  xor al, al
  5002 00003F01 3805[69150000]      <1> 	cmp [BATCHISON], al
  5003 00003F07 0F84E5FFFFFF        <1> 	je near notbatch
  5004 00003F0D 8B35[65150000]      <1> 	MOV esi, [BATCHPOS]
  5005 00003F13 4E                  <1> whilefnd: dec esi
  5006 00003F14 8A06                <1> 	mov al, [esi]
  5007 00003F16 3C0A                <1> 	cmp al, 10
  5008 00003F18 0F8412000000        <1> 	je near whilefnd2
  5009 00003F1E 3C0D                <1> 	cmp al, 13
  5010 00003F20 0F840A000000        <1> 	je near whilefnd2
  5011 00003F26 3C00                <1> 	cmp al, 0
  5012 00003F28 0F8402000000        <1> 	je near whilefnd2
  5013 00003F2E EBE3                <1> 	jmp whilefnd
  5014                              <1> whilefnd2:
  5015 00003F30 8935[6B150000]      <1> 	mov [LOOPPOS], esi
  5016 00003F36 C605[6A150000]01    <1> 	mov BYTE [LOOPON], 1
  5017 00003F3D 0005[00150000]      <1> 	add [IFON], al
  5018 00003F43 BE[7A1B0000]        <1> 	mov esi, buftxt
  5019 00003F48 BB[7A1B0000]        <1> 	mov ebx, buftxt
  5020 00003F4D 81C306000000        <1> 	add ebx, 6
  5021 00003F53 E923000000          <1> 	jmp chkeqsn
  5022                              <1> 
  5023                              <1> 
  5024 00003F58 0504696600          <1> 	db 5,4,"if",0
  5025 00003F5D 30C0                <1> ifcmd:	xor al, al
  5026 00003F5F 3805[69150000]      <1> 	cmp [BATCHISON], al
  5027 00003F65 0F8487FFFFFF        <1> 	je near notbatch
  5028 00003F6B BE[7A1B0000]        <1> 	mov esi, buftxt
  5029 00003F70 BB[7A1B0000]        <1> 	mov ebx, buftxt
  5030 00003F75 81C303000000        <1> 	add ebx, 3
  5031 00003F7B 8A06                <1> chkeqsn: mov al, [esi]
  5032 00003F7D 3C00                <1> 	cmp al, 0
  5033 00003F7F 0F846DFFFFFF        <1> 	je near notbatch
  5034 00003F85 3C3D                <1> 	cmp al, '='
  5035 00003F87 0F8403000000        <1> 	je near chkeqdn
  5036 00003F8D 46                  <1> 	inc esi
  5037 00003F8E EBEB                <1> 	jmp chkeqsn
  5038 00003F90 B000                <1> chkeqdn: mov al, 0 
  5039 00003F92 8806                <1> 	mov [esi], al
  5040 00003F94 46                  <1> 	inc esi
  5041 00003F95 8A06                <1> 	mov al, [esi]
  5042 00003F97 3C24                <1> 	cmp al, '$'
  5043 00003F99 0F845C000000        <1> 	je near ifvar1
  5044 00003F9F 8A03                <1> ifvar2: mov al, [ebx]
  5045 00003FA1 3C24                <1> 	cmp al, '$'
  5046 00003FA3 0F8472000000        <1> 	je near ifvar3
  5047 00003FA9 E8A2F2FFFF          <1> ifvar4:	call tester
  5048 00003FAE 3C01                <1> 	cmp al, 1
  5049 00003FB0 0F8405000000        <1> 	je near trueif
  5050 00003FB6 E920000000          <1> 	jmp falseif
  5051 00003FBB 31C0                <1> trueif:	xor eax, eax
  5052 00003FBD A0[00150000]        <1> 	mov al, [IFON]
  5053 00003FC2 FEC0                <1> 	inc al
  5054 00003FC4 A2[00150000]        <1> 	mov [IFON], al
  5055 00003FC9 30E4                <1> 	xor ah, ah
  5056 00003FCB BE[01150000]        <1> 	mov esi, IFTRUE
  5057 00003FD0 01C6                <1> 	add esi, eax
  5058 00003FD2 B401                <1> 	mov ah, 1
  5059 00003FD4 8826                <1> 	mov [esi], ah
  5060 00003FD6 E973F0FFFF          <1> 	jmp nwcmd
  5061 00003FDB 31C0                <1> falseif: xor eax, eax
  5062 00003FDD A0[00150000]        <1> 	mov al, [IFON]
  5063 00003FE2 FEC0                <1> 	inc al
  5064 00003FE4 A2[00150000]        <1> 	mov [IFON], al
  5065 00003FE9 30E4                <1> 	xor ah, ah
  5066 00003FEB BE[01150000]        <1> 	mov esi, IFTRUE
  5067 00003FF0 01C6                <1> 	add esi, eax
  5068 00003FF2 30E4                <1> 	xor ah, ah
  5069 00003FF4 8826                <1> 	mov [esi], ah
  5070 00003FF6 E953F0FFFF          <1> 	jmp nwcmd
  5071 00003FFB 89F7                <1> ifvar1: mov edi, esi
  5072 00003FFD 81EF[7A1B0000]      <1> 	sub edi, buftxt
  5073 00004003 47                  <1> 	inc edi
  5074 00004004 BB[6F150000]        <1> 	mov ebx, variables
  5075 00004009 E8B2F8FFFF          <1> 	call nxtvrech
  5076 0000400E BB[7A1B0000]        <1> 	mov ebx, buftxt
  5077 00004013 81C303000000        <1> 	add ebx, 3
  5078 00004019 EB84                <1> 	jmp ifvar2
  5079 0000401B 8935[3B400000]      <1> ifvar3: mov [esiif], esi
  5080 00004021 BF04000000          <1> 	mov edi, 4
  5081 00004026 BB[6F150000]        <1> 	mov ebx, variables
  5082 0000402B E890F8FFFF          <1> 	call nxtvrech
  5083 00004030 8B35[3B400000]      <1> 	mov esi, [esiif]
  5084 00004036 E96EFFFFFF          <1> 	jmp ifvar4
  5085                              <1> 
  5086 0000403B 00000000            <1> esiif dd 0
  5087                              <1> 	
  5088 0000403F 0504656C736500      <1> 	db 5,4,"else",0
  5089 00004046 31C0                <1> elsecmd:	xor eax, eax
  5090 00004048 A0[00150000]        <1> 	mov al, [IFON]
  5091 0000404D BE[01150000]        <1> 	mov esi, IFTRUE
  5092 00004052 01C6                <1> 	add esi, eax
  5093 00004054 8A06                <1> 	mov al, [esi]
  5094 00004056 3C00                <1> 	cmp al, 0		
  5095 00004058 7409                <1> 	je else1
  5096 0000405A 3C01                <1> 	cmp al, 1
  5097 0000405C 740E                <1> 	je else2
  5098 0000405E E9EBEFFFFF          <1> 	jmp nwcmd
  5099 00004063 B001                <1> else1:  mov al, 1
  5100 00004065 8806                <1> 	mov [esi], al
  5101 00004067 E9E2EFFFFF          <1> 	jmp nwcmd
  5102 0000406C 30C0                <1> else2:	xor al, al
  5103 0000406E 8806                <1> 	mov [esi], al
  5104 00004070 E9D9EFFFFF          <1> 	jmp nwcmd
  5105                              <1> 
  5106 00004075 05046C6F6F7000      <1> 	db 5,4,"loop",0
  5107 0000407C 3805[6A150000]      <1> 	cmp [LOOPON], al
  5108 00004082 0F8405000000        <1> 	je near filoop
  5109 00004088 E9C1EFFFFF          <1> 	jmp nwcmd
  5110 0000408D 8B35[6B150000]      <1> filoop: mov esi, [LOOPPOS]
  5111 00004093 8935[65150000]      <1> 	mov [BATCHPOS], esi
  5112 00004099 E9B0EFFFFF          <1> 	jmp nwcmd
  5113                              <1> 	
  5114                              <1> 
  5115 0000409E 0504666900          <1> 	db 5,4,"fi",0
  5116 000040A3 30C0                <1> 	xor al, al
  5117 000040A5 3805[69150000]      <1> 	cmp [BATCHISON], al
  5118 000040AB 0F8441FEFFFF        <1> 	je near notbatch
  5119 000040B1 B001                <1> fi:	mov al, 1
  5120 000040B3 2805[00150000]      <1> 	sub [IFON],al
  5121 000040B9 E990EFFFFF          <1> 	jmp nwcmd
  5122                              <1> 
  5123 000040BE 050473746F7000      <1> 	db 5,4,"stop",0
  5124 000040C5 30C0                <1> stop:	xor al, al
  5125 000040C7 A2[69150000]        <1> 	mov [BATCHISON], al
  5126 000040CC A2[00150000]        <1> 	mov [IFON], al
  5127 000040D1 A2[01150000]        <1> 	mov [IFTRUE], al
  5128 000040D6 A2[6A150000]        <1> 	mov [LOOPON], al
  5129 000040DB E96EEFFFFF          <1> 	jmp nwcmd
  5130                                      %include 'source/programs.asm'
  5131                              <1> ;db 5,4,"internet",0
  5132                              <1> 	internettest: 			;;initialize network card, lets hope this is right
  5133                              <1> 							;;^^used to^^, now tests int 30h functions		
  5134 000040E0 B403                <1> 		mov ah, 3
  5135 000040E2 CD30                <1> 		int 30h
  5136 000040E4 B401                <1> 		mov ah, 1
  5137                              <1> 		;mov esi, datmsg
  5138 000040E6 66BB0700            <1> 		mov bx, 7
  5139 000040EA 30C0                <1> 		xor al, al
  5140 000040EC CD30                <1> 		int 30h
  5141                              <1> 	    ;jmp packettest
  5142 000040EE E95BEFFFFF          <1> 		jmp nwcmd
  5143                              <1> ;datmsg: db "Internet has not been implemented yet.",10,13,0
  5144                              <1> 	
  5145 000040F3 050474687265616473- <1> db 5,4,"threads",0
  5146 000040FC 00                  <1>
  5147 000040FD E9EF290000          <1> 	jmp threadstarttest
  5148                              <1> 	
  5149 00004102 050472656700        <1> db 5,4,"reg",0
  5150 00004108 CD03                <1> 	int 3
  5151 0000410A E93FEFFFFF          <1> 	jmp nwcmd
  5152                              <1> 	
  5153 0000410F 0504636861726D6170- <1> db 5,4,"charmap",0
  5154 00004118 00                  <1>
  5155 00004119 30C0                <1> 	xor al, al
  5156 0000411B 66BB0700            <1> 	mov bx, 7
  5157                              <1> charmapcopy:
  5158 0000411F FEC0                <1> 	inc al
  5159 00004121 3C08                <1> 	cmp al, 8
  5160 00004123 7426                <1> 	je charmapnocopy
  5161 00004125 3C09                <1> 	cmp al, 9
  5162 00004127 7422                <1> 	je charmapnocopy
  5163 00004129 3C0A                <1> 	cmp al, 10
  5164 0000412B 741E                <1> 	je charmapnocopy
  5165 0000412D 3C0D                <1> 	cmp al, 13
  5166 0000412F 741A                <1> 	je charmapnocopy
  5167 00004131 3C00                <1> 	cmp al, 0
  5168 00004133 7407                <1> 	je nomorecharmap
  5169 00004135 E8B4E6FFFF          <1> 	call int301prnt
  5170 0000413A EBE3                <1> 	jmp charmapcopy
  5171                              <1> nomorecharmap:
  5172 0000413C BE[5F720000]        <1> 	mov esi, line
  5173 00004141 E8B1E8FFFF          <1> 	call print
  5174 00004146 E903EFFFFF          <1> 	jmp nwcmd
  5175                              <1> charmapnocopy:
  5176 0000414B 6650                <1> 	push ax
  5177 0000414D B020                <1> 	mov al, " "
  5178 0000414F E89AE6FFFF          <1> 	call int301prnt
  5179 00004154 6658                <1> 	pop ax
  5180 00004156 EBC7                <1> 	jmp charmapcopy
  5181                              <1> 	
  5182 00004158 05046B6579636F6465- <1> db 5,4,"keycode",0
  5183 00004161 00                  <1>
  5184                              <1> keycode:
  5185 00004162 C605[A2290000]00    <1> 	mov byte [trans], 0
  5186 00004169 E868060000          <1> 	call guistartin
  5187 0000416E 31C0                <1> 	xor eax, eax
  5188 00004170 31C9                <1> 	xor ecx, ecx
  5189 00004172 8A0D[B1470000]      <1> 	mov cl, [specialkey]
  5190 00004178 80F900              <1> 	cmp cl, 0
  5191 0000417B 0F8405000000        <1> 	je near nospecialkeycode
  5192 00004181 E8C4F3FFFF          <1> 	call showhexsmall
  5193                              <1> nospecialkeycode:
  5194 00004186 66A1[A0290000]      <1> 	mov ax, [lastkey]
  5195 0000418C 88E1                <1> 	mov cl, ah
  5196 0000418E E8B7F3FFFF          <1> 	call showhexsmall
  5197 00004193 EBCD                <1> 	jmp keycode
  5198                              <1> 
  5199 00004195 050470636900        <1> db 5,4,"pci",0
  5200                              <1> 	pcishow:
  5201 0000419B E8CF250000          <1> 	call pcidump
  5202 000041A0 E9A9EEFFFF          <1> 	jmp nwcmd
  5203                              <1> 	
  5204 000041A5 050461727000        <1> db 5,4,"arp",0
  5205 000041AB E8BA240000          <1> 	call arptest
  5206 000041B0 E999EEFFFF          <1> 	jmp nwcmd
  5207                              <1> 
  5208 000041B5 0504626174636800    <1> db 5,4,"batch",0
  5209                              <1> 	batchst: 
  5210 000041BD BF[7A1B0000]        <1> 		mov edi, buftxt
  5211 000041C2 81C706000000        <1> 		add edi, 6
  5212 000041C8 803F00              <1> 		cmp byte [edi], 0
  5213 000041CB 0F8473000000        <1> 		je near nonamefound
  5214 000041D1 BE00004000          <1> 		mov esi, 0x400000
  5215 000041D6 E82C270000          <1> 		call loadfile
  5216 000041DB 89D0                <1> 		mov eax, edx
  5217 000041DD 3D94010000          <1> 		cmp eax, 404
  5218 000041E2 746F                <1> 		je goodbatchname
  5219 000041E4 BE[F3410000]        <1> 		mov esi, badbatchname
  5220 000041E9 E809E8FFFF          <1> 		call print
  5221 000041EE E95BEEFFFF          <1> 		jmp nwcmd
  5222 000041F3 546869732066696C65- <1> 		badbatchname db "This file already exists!",10,13,0
  5223 000041FC 20616C726561647920- <1>
  5224 00004205 657869737473210A0D- <1>
  5225 0000420E 00                  <1>
  5226 0000420F 596F75206861766520- <1> 		namenotfoundbatch db "You have to type a name after the command.",10,13,0
  5227 00004218 746F20747970652061- <1>
  5228 00004221 206E616D6520616674- <1>
  5229 0000422A 65722074686520636F- <1>
  5230 00004233 6D6D616E642E0A0D00  <1>
  5231 0000423C 00000000            <1> 		esicache3 dd 0
  5232 00004240 00000000            <1> 		esicache2 dd 0
  5233                              <1> 	nonamefound:
  5234 00004244 BE[0F420000]        <1> 		mov esi, namenotfoundbatch
  5235 00004249 E8A9E7FFFF          <1> 		call print
  5236 0000424E E9FBEDFFFF          <1> 		jmp nwcmd
  5237                              <1> 	goodbatchname:
  5238 00004253 BE00004000          <1> 		mov esi, 0x400000
  5239                              <1> 	batchcreate:
  5240 00004258 8935[3C420000]      <1> 		mov [esicache3], esi
  5241 0000425E BF00008000          <1> 		mov edi, 0x800000
  5242 00004263 B00D                <1> 		mov al, 13
  5243 00004265 B307                <1> 		mov bl, 7
  5244 00004267 B404                <1> 		mov ah, 4
  5245 00004269 CD30                <1> 		int 30h
  5246 0000426B 8935[40420000]      <1> 		mov [esicache2], esi
  5247 00004271 8A0E                <1> 		mov cl, [esi]
  5248 00004273 8B35[3C420000]      <1> 		mov esi, [esicache3]
  5249 00004279 BB[CD420000]        <1> 		mov ebx, exitword
  5250 0000427E E807F0FFFF          <1> 		call cndtest
  5251 00004283 3C01                <1> 		cmp al, 1
  5252 00004285 7423                <1> 		je endbatchcreate
  5253 00004287 3C02                <1> 		cmp al, 2
  5254 00004289 741F                <1> 		je endbatchcreate
  5255 0000428B BE[5F720000]        <1> 		mov esi, line
  5256 00004290 E862E7FFFF          <1> 		call print
  5257 00004295 8B35[40420000]      <1> 		mov esi, [esicache2]
  5258 0000429B B00D                <1> 		mov al, 13
  5259 0000429D B40A                <1> 		mov ah, 10
  5260 0000429F 668906              <1> 		mov [esi], ax
  5261 000042A2 81C602000000        <1> 		add esi, 2
  5262 000042A8 EBAE                <1> 		jmp batchcreate
  5263                              <1> 	endbatchcreate:
  5264 000042AA 8B35[3C420000]      <1> 		mov esi, [esicache3]
  5265 000042B0 31C0                <1> 		xor eax, eax
  5266 000042B2 8806                <1> 		mov [esi], al
  5267 000042B4 BE[5F720000]        <1> 		mov esi, line
  5268 000042B9 E839E7FFFF          <1> 		call print
  5269 000042BE BE00004000          <1> 		mov esi, 0x400000
  5270 000042C3 E82FE7FFFF          <1> 		call print
  5271 000042C8 E981EDFFFF          <1> 		jmp nwcmd
  5272                              <1> 	
  5273 000042CD 5C7800              <1> 	exitword db "\x",0
  5274 000042D0 54797065205C782074- <1> 	wordmsg db "Type \x to exit.",10,13,0
  5275 000042D9 6F20657869742E0A0D- <1>
  5276 000042E2 00                  <1>
  5277                              <1> 		
  5278 000042E3 050473686F7700      <1> db 5,4,"show",0
  5279 000042EA BF[7A1B0000]        <1> 		mov edi, buftxt
  5280 000042EF 81C705000000        <1> 		add edi, 5
  5281 000042F5 BE00004000          <1> 		mov esi, 0x400000
  5282 000042FA E808260000          <1> 		call loadfile
  5283 000042FF BE00004000          <1> 		mov esi, 0x400000
  5284 00004304 66813E424D          <1> 		cmp word [esi], "BM"
  5285 00004309 7414                <1> 		je bmpfound
  5286 0000430B E8E7E6FFFF          <1> 		call print
  5287 00004310 BE[5F720000]        <1> 		mov esi, line
  5288 00004315 E8DDE6FFFF          <1> 		call print
  5289 0000431A E92FEDFFFF          <1> 		jmp nwcmd
  5290                              <1> bmpfound:
  5291 0000431F 803D[E14E0000]00    <1> 		cmp byte [guion], 0
  5292 00004326 0F8446000000        <1> 		je near noguibmp
  5293 0000432C BE00004000          <1> 		mov esi, 0x400000
  5294 00004331 31C9                <1> 		xor ecx, ecx
  5295 00004333 31D2                <1> 		xor edx, edx
  5296 00004335 31C0                <1> 		xor eax, eax
  5297 00004337 31DB                <1> 		xor ebx, ebx
  5298 00004339 E8431C0000          <1> 		call showbmp
  5299 0000433E 30C0                <1> 		xor al, al
  5300 00004340 B405                <1> 		mov ah, 5
  5301 00004342 CD30                <1> 		int 30h
  5302 00004344 E8260A0000          <1> 		call guiclear
  5303 00004349 E8940B0000          <1> 		call clearmousecursor
  5304 0000434E E8FE110000          <1> 		call reloadallgraphics
  5305 00004353 BE[7A1B0000]        <1> 		mov esi, buftxt
  5306 00004358 81C605000000        <1> 		add esi, 5
  5307 0000435E E894E6FFFF          <1> 		call print
  5308 00004363 BE[F5430000]        <1> 		mov esi, loadedbmpmsg
  5309 00004368 E88AE6FFFF          <1> 		call print
  5310 0000436D E9DCECFFFF          <1> 		jmp nwcmd
  5311                              <1> noguibmp:
  5312 00004372 BE[81430000]        <1> 		mov esi, warnguibmp
  5313 00004377 E87BE6FFFF          <1> 		call print
  5314 0000437C E9CDECFFFF          <1> 		jmp nwcmd
  5315 00004381 546869732063616E20- <1> warnguibmp db "This can not be done without the gui.",10,13,0
  5316 0000438A 6E6F7420626520646F- <1>
  5317 00004393 6E6520776974686F75- <1>
  5318 0000439C 742074686520677569- <1>
  5319 000043A5 2E0A0D00            <1>
  5320                              <1> 
  5321                              <1> 		
  5322                              <1> filenotfound:
  5323 000043A9 BE[D2430000]        <1> 		mov esi, filenf
  5324 000043AE E844E6FFFF          <1> 		call print
  5325 000043B3 BE[7A1B0000]        <1> 		mov esi, buftxt
  5326 000043B8 81C608000000        <1> 		add esi, 8
  5327 000043BE E834E6FFFF          <1> 		call print
  5328 000043C3 BE[DD430000]        <1> 		mov esi, filenf2
  5329 000043C8 E82AE6FFFF          <1> 		call print
  5330 000043CD E97CECFFFF          <1> 		jmp nwcmd
  5331 000043D2 5468652066696C6520- <1> filenf db "The file ",34,0
  5332 000043DB 2200                <1>
  5333 000043DD 2220636F756C64206E- <1> filenf2 db 34," could not be found.",13,10,0
  5334 000043E6 6F7420626520666F75- <1>
  5335 000043EF 6E642E0D0A00        <1>
  5336                              <1> 		
  5337 000043F5 206C6F616465642E0D- <1> loadedbmpmsg db " loaded.",13,10,0
  5338 000043FE 0A00                <1>
  5339                              <1> 
  5340 00004400 050464756D7000      <1> 	db 5,4,"dump",0
  5341 00004407 BE[7A1B0000]        <1> 	mov esi, buftxt
  5342 0000440C 81C605000000        <1> 	add esi, 5
  5343 00004412 31C9                <1> 	xor ecx, ecx
  5344 00004414 E882F2FFFF          <1> 	call cnvrttxt
  5345 00004419 89CF                <1> 	mov edi, ecx
  5346 0000441B 89FE                <1> 	mov esi, edi
  5347 0000441D 81C680030000        <1> 	add esi, 896
  5348 00004423 C605[49350000]00    <1> 	mov byte [firsthexshown],0
  5349                              <1> dumphexloop:
  5350 0000442A 8B0F                <1> 	mov ecx, [edi]
  5351 0000442C E82DF1FFFF          <1> 	call showhex
  5352 00004431 81C704000000        <1> 	add edi, 4
  5353 00004437 39F7                <1> 	cmp edi, esi
  5354 00004439 72EF                <1> 	jb dumphexloop
  5355 0000443B E90EECFFFF          <1> 	jmp nwcmd
  5356                              <1> 
  5357 00004440 050474696D6500      <1> db 5,4,"time",0
  5358 00004447 E80F000000          <1> 	call time
  5359 0000444C BE[36460000]        <1> 	mov esi, timeshow
  5360 00004451 E8A1E5FFFF          <1> 	call print
  5361 00004456 E9C1000000          <1> 	jmp findday
  5362                              <1> time:
  5363 0000445B E85E010000          <1> 	call tstackput1
  5364 00004460 B00A                <1> 	mov al,10			;Get RTC register A
  5365 00004462 E888010000          <1> 	call tget1
  5366 00004467 A880                <1> 	test al,0x80			;Is update in progress?
  5367 00004469 75F0                <1> 	jne time				; yes, wait
  5368                              <1> 
  5369 0000446B B000                <1> 	mov al,0			;Get seconds (00 to 59)
  5370 0000446D E87D010000          <1> 	call tget1
  5371 00004472 A2[2D460000]        <1> 	mov [RTCtimeSecond],al
  5372                              <1> 
  5373 00004477 B002                <1> 	mov al,0x02			;Get minutes (00 to 59)
  5374 00004479 E871010000          <1> 	call tget1
  5375 0000447E A2[2E460000]        <1> 	mov [RTCtimeMinute],al
  5376                              <1> 
  5377 00004483 B004                <1> 	mov al,0x04			;Get hours (see notes)
  5378 00004485 E865010000          <1> 	call tget1
  5379 0000448A A2[2F460000]        <1> 	mov [RTCtimeHour],al
  5380                              <1> 
  5381 0000448F B007                <1> 	mov al,0x07			;Get day of month (01 to 31)
  5382 00004491 E859010000          <1> 	call tget1
  5383                              <1> ;	mov ah, 0			;;fix day
  5384                              <1> ;	mov ah, al
  5385                              <1> ;	shr ah, 4
  5386                              <1> ;	shl al, 4
  5387                              <1> ;	shr al, 4
  5388                              <1> ;	cmp al, 0
  5389                              <1> ;	jne nodecahday
  5390                              <1> ;	mov al, 10
  5391                              <1> ;	dec ah
  5392                              <1> ;nodecahday:
  5393                              <1> ;	dec al
  5394                              <1> ;	shl ah, 4
  5395                              <1> ;	or al, ah
  5396 00004496 A2[30460000]        <1> 	mov [RTCtimeDay],al
  5397                              <1> 
  5398 0000449B B008                <1> 	mov al,0x08			;Get month (01 to 12)
  5399 0000449D E84D010000          <1> 	call tget1
  5400 000044A2 A2[31460000]        <1> 	mov [RTCtimeMonth],al
  5401                              <1> 
  5402 000044A7 B009                <1> 	mov al,0x09			;Get year (00 to 99)
  5403 000044A9 E841010000          <1> 	call tget1
  5404 000044AE A2[32460000]        <1> 	mov [RTCtimeYear],al
  5405                              <1> 	
  5406 000044B3 BE[36460000]        <1> 	mov esi, timeshow
  5407 000044B8 8A2D[2F460000]      <1> 	mov ch, [RTCtimeHour]
  5408 000044BE E837010000          <1> 	call tput1
  5409 000044C3 8A2D[2E460000]      <1> 	mov ch, [RTCtimeMinute]
  5410 000044C9 E82C010000          <1> 	call tput1
  5411 000044CE 8A2D[2D460000]      <1> 	mov ch, [RTCtimeSecond]
  5412 000044D4 E821010000          <1> 	call tput1
  5413 000044D9 BE[40460000]        <1> 	mov esi, dateshow
  5414 000044DE 8A2D[31460000]      <1> 	mov ch, [RTCtimeMonth]
  5415 000044E4 E811010000          <1> 	call tput1
  5416 000044E9 8A2D[30460000]      <1> 	mov ch, [RTCtimeDay]
  5417 000044EF E806010000          <1> 	call tput1
  5418 000044F4 B520                <1> 	mov ch, 0x20
  5419 000044F6 E8FF000000          <1> 	call tput1
  5420 000044FB 4E                  <1> 	dec esi
  5421 000044FC 8A2D[32460000]      <1> 	mov ch, [RTCtimeYear]
  5422 00004502 E8F3000000          <1> 	call tput1
  5423 00004507 E8CC000000          <1> 	call tstackget1
  5424 0000450C C3                  <1> 	ret
  5425 0000450D BE[36460000]        <1> 	mov esi, timeshow
  5426 00004512 66BB0700            <1> 	mov bx, 7
  5427 00004516 B401                <1> 	mov ah, 1
  5428 00004518 30C0                <1> 	xor al, al
  5429 0000451A CD30                <1> 	int 30h
  5430                              <1> ;;get day of week
  5431                              <1> ;;add these:
  5432                              <1> ;;century value
  5433                              <1> ;;last 2 digits of year
  5434                              <1> ;;last 2 digits of year right shifted twice
  5435                              <1> ;;month table value
  5436                              <1> ;;day of the month
  5437                              <1> ;;divide these by 7
  5438                              <1> ;;the remainder is the day
  5439                              <1> findday:
  5440 0000451C 31C0                <1> 	xor eax, eax
  5441                              <1> ;;first convert the values from BCD to hex
  5442 0000451E A0[30460000]        <1> 	mov al, [RTCtimeDay]
  5443 00004523 E87D000000          <1> 	call converttohex
  5444 00004528 8825[33460000]      <1> 	mov [dayhex], ah
  5445 0000452E A0[31460000]        <1> 	mov al, [RTCtimeMonth]
  5446 00004533 E86D000000          <1> 	call converttohex
  5447 00004538 8825[34460000]      <1> 	mov [monthhex], ah
  5448 0000453E A0[32460000]        <1> 	mov al, [RTCtimeYear]
  5449 00004543 E85D000000          <1> 	call converttohex
  5450 00004548 8825[35460000]      <1> 	mov [yearhex], ah
  5451 0000454E 31C0                <1> 	xor eax, eax
  5452 00004550 A0[35460000]        <1> 	mov al, [yearhex]
  5453 00004555 C0E802              <1> 	shr al, 2
  5454 00004558 0205[35460000]      <1> 	add al, [yearhex]
  5455 0000455E 0506000000          <1> 	add eax, 6
  5456 00004563 31DB                <1> 	xor ebx, ebx
  5457 00004565 8A1D[34460000]      <1> 	mov bl, [monthhex]
  5458 0000456B FECB                <1> 	dec bl
  5459 0000456D 81C3[56460000]      <1> 	add ebx, month
  5460 00004573 31C9                <1> 	xor ecx, ecx
  5461 00004575 8A0B                <1> 	mov cl, [ebx]
  5462 00004577 01C8                <1> 	add eax, ecx
  5463 00004579 8A0D[33460000]      <1> 	mov cl, [dayhex]
  5464 0000457F 01C8                <1> 	add eax, ecx
  5465 00004581 66BB0700            <1> 	mov bx, 7
  5466 00004585 31D2                <1> 	xor edx, edx
  5467 00004587 66F7F3              <1> 	div bx
  5468 0000458A C1E202              <1> 	shl edx, 2
  5469 0000458D 81C2[62460000]      <1> 	add edx, day
  5470 00004593 8B32                <1> 	mov esi, [edx]
  5471 00004595 66BB0700            <1> 	mov bx, 7
  5472 00004599 B401                <1> 	mov ah, 1
  5473 0000459B 30C0                <1> 	xor al, al
  5474 0000459D CD30                <1> 	int 30h
  5475 0000459F 6631C0              <1> 	xor ax, ax
  5476 000045A2 CD30                <1> 	int 30h
  5477 000045A4 F4                  <1> 	hlt
  5478                              <1> 	
  5479                              <1> converttohex:
  5480 000045A5 88C4                <1> 	mov ah, al
  5481 000045A7 C0E804              <1> 	shr al, 4
  5482 000045AA C0E404              <1> 	shl ah, 4
  5483 000045AD C0EC04              <1> 	shr ah, 4
  5484 000045B0 3C00                <1> 	cmp al, 0
  5485 000045B2 7409                <1> 	je noconverttohex
  5486                              <1> converttohexlp:
  5487 000045B4 80C40A              <1> 	add ah, 10
  5488 000045B7 FEC8                <1> 	dec al
  5489 000045B9 3C00                <1> 	cmp al, 0
  5490 000045BB 75F7                <1> 	jne converttohexlp
  5491                              <1> noconverttohex:
  5492 000045BD C3                  <1> 	ret
  5493                              <1> 	
  5494                              <1> tstackput1:
  5495 000045BE 8935[29460000]      <1> 	mov [tstack + 20], esi
  5496 000045C4 BE[15460000]        <1> 	mov esi, tstack
  5497 000045C9 8906                <1> 	mov [esi], eax
  5498 000045CB 895E04              <1> 	mov [esi + 4], ebx
  5499 000045CE 894E08              <1> 	mov [esi + 8], ecx
  5500 000045D1 89560C              <1> 	mov [esi + 12], edx
  5501 000045D4 897E10              <1> 	mov [esi + 16], edi
  5502 000045D7 C3                  <1> 	ret
  5503                              <1> 	
  5504                              <1> tstackget1:
  5505 000045D8 BE[15460000]        <1> 	mov esi, tstack
  5506 000045DD 8B06                <1> 	mov eax, [esi]
  5507 000045DF 8B5E04              <1> 	mov ebx, [esi + 4]
  5508 000045E2 8B4E08              <1> 	mov ecx, [esi + 8]
  5509 000045E5 8B560C              <1> 	mov edx, [esi + 12]
  5510 000045E8 8B7E10              <1> 	mov edi, [esi + 16]
  5511 000045EB 8B7614              <1> 	mov esi, [esi + 20]
  5512 000045EE C3                  <1> 	ret
  5513                              <1> 	
  5514                              <1> tget1:
  5515 000045EF 66BA7000            <1> 	mov dx, 0x70
  5516 000045F3 EE                  <1> 	out dx, al
  5517 000045F4 6642                <1> 	inc dx
  5518 000045F6 EC                  <1> 	in al, dx
  5519 000045F7 664A                <1> 	dec dx
  5520 000045F9 C3                  <1> 	ret
  5521                              <1> 	
  5522                              <1> tput1:
  5523 000045FA 66C1E904            <1> 	shr cx, 4
  5524 000045FE B030                <1> 	mov al, 48
  5525 00004600 00E8                <1> 	add al, ch
  5526 00004602 8806                <1> 	mov [esi], al
  5527 00004604 46                  <1> 	inc esi
  5528 00004605 B030                <1> 	mov al, 48
  5529 00004607 C0E904              <1> 	shr cl, 4
  5530 0000460A 00C8                <1> 	add al, cl
  5531 0000460C 8806                <1> 	mov [esi], al
  5532 0000460E 81C602000000        <1> 	add esi, 2
  5533 00004614 C3                  <1> 	ret
  5534                              <1> 		
  5535 00004615 000000000000000000- <1> 	tstack dd 0,0,0,0,0,0
  5536 0000461E 000000000000000000- <1>
  5537 00004627 000000000000        <1>
  5538 0000462D 00                  <1> 	RTCtimeSecond db 0
  5539 0000462E 00                  <1> 	RTCtimeMinute db 0
  5540 0000462F 00                  <1> 	RTCtimeHour db 0
  5541 00004630 00                  <1> 	RTCtimeDay db 0
  5542 00004631 00                  <1> 	RTCtimeMonth db 0
  5543 00004632 00                  <1> 	RTCtimeYear db 0
  5544 00004633 00                  <1> 	dayhex db 0
  5545 00004634 00                  <1> 	monthhex db 0
  5546 00004635 00                  <1> 	yearhex db 0
  5547 00004636 30303A30303A30300D- <1> 	timeshow db "00:00:00",13,10
  5548 0000463F 0A                  <1>
  5549 00004640 30302D30302D303030- <1> 	dateshow db "00-00-0000",13,10,0
  5550 00004649 300D0A00            <1>
  5551                              <1> 	oldcentury:	;;from 1700 to 1900
  5552 0000464D 040200              <1> 	db 4,2,0
  5553                              <1> 	century:	;;from 2000 to 2500
  5554 00004650 060402000604        <1> 	db 6,4,2,0,6,4
  5555                              <1> 	month:
  5556 00004656 000303060104060205- <1> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5557 0000465F 000305              <1>
  5558                              <1> 	day:
  5559 00004662 [7E460000]          <1> 	dd sunday
  5560 00004666 [87460000]          <1> 	dd monday
  5561 0000466A [90460000]          <1> 	dd tuesday
  5562 0000466E [9A460000]          <1> 	dd wednesday
  5563 00004672 [A6460000]          <1> 	dd thursday
  5564 00004676 [B1460000]          <1> 	dd friday
  5565 0000467A [BA460000]          <1> 	dd saturday
  5566                              <1> sunday:
  5567 0000467E 53756E6461790D0A00  <1> 	db "Sunday",13,10,0
  5568                              <1> monday:
  5569 00004687 4D6F6E6461790D0A00  <1> 	db "Monday",13,10,0
  5570                              <1> tuesday:
  5571 00004690 547565736461790D0A- <1> 	db "Tuesday",13,10,0
  5572 00004699 00                  <1>
  5573                              <1> wednesday:
  5574 0000469A 5765646E6573646179- <1> 	db "Wednesday",13,10,0
  5575 000046A3 0D0A00              <1>
  5576                              <1> thursday:
  5577 000046A6 54687572736461790D- <1> 	db "Thursday",13,10,0
  5578 000046AF 0A00                <1>
  5579                              <1> friday:
  5580 000046B1 4672696461790D0A00  <1> 	db "Friday",13,10,0
  5581                              <1> saturday:
  5582 000046BA 53617475726461790D- <1> 	db "Saturday",13,10,0
  5583 000046C3 0A00                <1>
  5584                              <1> 
  5585 000046C5 0504637075696400    <1> db 5,4,"cpuid",0
  5586 000046CD 31C0                <1> 	xor eax, eax
  5587 000046CF 0FA2                <1> 	cpuid
  5588 000046D1 891D[26470000]      <1> 	mov [cpuidbuf], ebx
  5589 000046D7 8915[2A470000]      <1> 	mov [cpuidbuf + 4], edx
  5590 000046DD 890D[2E470000]      <1> 	mov [cpuidbuf + 8], ecx
  5591 000046E3 BE[26470000]        <1> 	mov esi, cpuidbuf
  5592 000046E8 E80AE3FFFF          <1> 	call print
  5593 000046ED BE[5F720000]        <1> 	mov esi, line
  5594 000046F2 E800E3FFFF          <1> 	call print
  5595 000046F7 B801000000          <1> 	mov eax, 1
  5596 000046FC 0FA2                <1> 	cpuid
  5597 000046FE 89C1                <1> 	mov ecx, eax
  5598 00004700 C605[49350000]02    <1> 	mov byte [firsthexshown], 2
  5599 00004707 E852EEFFFF          <1> 	call showhex
  5600 0000470C B808000080          <1> 	mov eax, 0x80000008
  5601 00004711 0FA2                <1> 	cpuid
  5602 00004713 89C1                <1> 	mov ecx, eax
  5603 00004715 C605[49350000]02    <1> 	mov byte [firsthexshown], 2
  5604 0000471C E83DEEFFFF          <1> 	call showhex
  5605 00004721 E928E9FFFF          <1> 	jmp nwcmd
  5606                              <1> 	
  5607 00004726 00<rept>            <1> cpuidbuf times 13 db 0
  5608                              <1> cpuidvendorend:
  5609                              <1> progend:		;programs end here	
  5610                              <1> batchprogend:
  5611                                      %include 'source/input.asm'
  5612                              <1> PS2SET:
  5613 00004733 B0A8                <1>   mov  al, 0xa8		; enable mouse port
  5614 00004735 E664                <1>   out  0x64, al		; write to keyboardcontroller
  5615 00004737 E801000000          <1>   call CHKPRT		; check if command is progressed (demand!)
  5616 0000473C C3                  <1> ret
  5617                              <1> 
  5618                              <1> CHKPRT:
  5619 0000473D 66B96400            <1>   mov  cx, 100
  5620                              <1>  .again:
  5621 00004741 E464                <1>   in   al, 0x64		; read from keyboardcontroller
  5622 00004743 A802                <1>   test al, 2		; Check if input buffer is empty
  5623 00004745 7402                <1>   je .go
  5624 00004747 E2F8                <1>   loop .again
  5625                              <1>  .go:
  5626 00004749 C3                  <1> ret
  5627                              <1> 
  5628                              <1> WMOUS:
  5629 0000474A B0D4                <1>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  5630 0000474C E664                <1>   out  0x64, al		; write to keyboardcontroller
  5631 0000474E E8EAFFFFFF          <1>   call CHKPRT		; check if command is progressed (demand!)
  5632 00004753 C3                  <1> ret
  5633                              <1> 
  5634                              <1> MBUFFUL:
  5635 00004754 66B96400            <1>   mov cx, 100
  5636                              <1>  .mn:
  5637 00004758 E464                <1>   in   al, 0x64		; read from keyboardcontroller
  5638 0000475A A820                <1>   test al, 0x20		; check if mouse output buffer is full
  5639 0000475C 7402                <1>   jz  .mnn
  5640 0000475E E2F8                <1>   loop .mn
  5641                              <1>  .mnn:
  5642 00004760 C3                  <1> ret
  5643                              <1> 
  5644                              <1> 
  5645                              <1> ACTMOUS:
  5646 00004761 E8E4FFFFFF          <1>   call WMOUS
  5647 00004766 B0F4                <1>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  5648 00004768 E660                <1>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  5649 0000476A E8CEFFFFFF          <1>   call CHKPRT		; check if command is progressed (demand!)
  5650 0000476F E801000000          <1>   call CHKMOUS		; check if a byte is available
  5651 00004774 C3                  <1> ret
  5652                              <1> 
  5653                              <1> CHKMOUS:
  5654 00004775 B300                <1>   mov  bl, 0
  5655 00004777 66B96400            <1>   mov cx, 100
  5656                              <1>  .vrd:
  5657 0000477B E464                <1>   in   al, 0x64		; read from keyboardcontroller
  5658 0000477D A801                <1>   test al, 1		; check if controller buffer (60h) has data
  5659 0000477F 7504                <1>   jnz .yy
  5660 00004781 E2F8                <1>   loop .vrd
  5661 00004783 B301                <1>   mov  bl, 1
  5662                              <1>  .yy:
  5663 00004785 C3                  <1> ret
  5664                              <1> 
  5665                              <1> GETB:
  5666                              <1>  .cagain:
  5667 00004786 E8EAFFFFFF          <1>   call CHKMOUS		; check if a byte is available
  5668 0000478B 08DB                <1>   or bl, bl
  5669 0000478D 75F7                <1>   jnz .cagain
  5670 0000478F B0AD                <1>   mov  al, 0xad		; Disable Keyboard
  5671 00004791 E664                <1>   out  0x64, al		; write to keyboardcontroller
  5672 00004793 E8A5FFFFFF          <1>   call CHKPRT		; check if command is progressed (demand!)
  5673 00004798 6631C0              <1>   xor  ax, ax
  5674 0000479B E460                <1>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  5675 0000479D 88C2                <1>   mov  dl, al
  5676 0000479F B0AE                <1>   mov  al, 0xae		; Enable Keyboard
  5677 000047A1 E664                <1>   out  0x64, al		; write to keyboardcontroller
  5678 000047A3 E895FFFFFF          <1>   call CHKPRT		; check if command is progressed (demand!)
  5679 000047A8 88D0                <1>   mov  al, dl
  5680 000047AA C3                  <1> ret
  5681                              <1> 
  5682 000047AB 00                  <1> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  5683 000047AC 00                  <1> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  5684 000047AD 00                  <1> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  5685 000047AE 00                  <1> XCOORD  db 0x00	;	the moved distance  (horizontal)
  5686 000047AF 00                  <1> YCOORD  db 0x00	;	the moved distance  (vertical)
  5687 000047B0 00                  <1> mousedisabled db 0
  5688 000047B1 00                  <1> specialkey db 0
  5689                              <1> guistartin2:		;;this is basically the idle process
  5690                              <1> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  5691                              <1> 					;;this lets the cpu stay at close to 0% instead of 100%
  5692 000047B2 66B800A0            <1> 	mov ax, 0xA000	;;this is the divider for the PIT
  5693 000047B6 E640                <1> 	out 0x40, al
  5694 000047B8 66C1C008            <1> 	rol ax, 8
  5695 000047BC E640                <1> 	out 0x40, al
  5696 000047BE A0[376B0000]        <1> 	mov al, [threadson]
  5697 000047C3 C605[376B0000]00    <1> 	mov byte [threadson], 0
  5698 000047CA FB                  <1> 	sti
  5699 000047CB F4                  <1> 	hlt
  5700 000047CC A2[376B0000]        <1> 	mov [threadson], al
  5701 000047D1 3C02                <1> 	cmp al, 2
  5702 000047D3 7401                <1> 	je guistartin
  5703 000047D5 FA                  <1> 	cli
  5704                              <1> guistartin:
  5705 000047D6 31C0                <1> 		xor eax, eax
  5706 000047D8 A2[B1470000]        <1> 		mov [specialkey], al
  5707 000047DD 66A3[A0290000]      <1> 		mov [lastkey], ax
  5708 000047E3 E464                <1> 		in al, 64h ; Status
  5709 000047E5 A820                <1> 		test al, 20h ; PS2-Mouse?
  5710 000047E7 0F85EA010000        <1> 		jnz near maincall2
  5711 000047ED A801                <1> 		test al, 1 
  5712 000047EF 74C1                <1> 		jz guistartin2 ; if output buffer full or no keypress, jump to idle process (only works when it is jz guistartin2, use jz guistartin to disable)
  5713                              <1> 	guigetkey:
  5714 000047F1 E460                <1> 		in al, 60h
  5715 000047F3 88C4                <1> 		mov ah, al
  5716 000047F5 30C0                <1> 		xor al, al
  5717 000047F7 8825[A1290000]      <1> 		mov [lastkey + 1], ah
  5718 000047FD 88E0                <1> 		mov al, ah
  5719 000047FF BF[134C0000]        <1> 		mov edi, scancode
  5720                              <1> 	guisearchscan: 
  5721 00004804 3C3A                <1> 		cmp al, 3Ah
  5722 00004806 731A                <1> 		jae guiscanother
  5723 00004808 30E4                <1> 		xor ah, ah
  5724 0000480A C0E002              <1> 		shl al, 2
  5725 0000480D 01C7                <1> 		add edi, eax
  5726 0000480F D0E8                <1> 		shr al, 1
  5727 00004811 01C7                <1> 		add edi, eax
  5728 00004813 D0E8                <1> 		shr al, 1
  5729 00004815 8A27                <1> 		mov ah, [edi]
  5730 00004817 80FC00              <1> 		cmp ah, 0
  5731 0000481A 7406                <1> 		je guiscanother
  5732 0000481C E9D7000000          <1> 		jmp guiscanfound
  5733 00004821 00                  <1> guiupper db 0
  5734                              <1> guiscanother:
  5735 00004822 88C4                <1> 		mov ah, al
  5736 00004824 30C0                <1> 		xor al, al
  5737 00004826 66A3[A0290000]      <1> 		mov [lastkey], ax
  5738 0000482C 80FCE0              <1> 		cmp ah, 0E0h
  5739 0000482F 0F847D000000        <1> 		je near guigetkeyspecial
  5740 00004835 803D[B1470000]E0    <1> 		cmp byte [specialkey], 0xE0
  5741 0000483C 752B                <1> 		jne nospecialkey
  5742 0000483E 80FC38              <1> 		cmp ah, 38h
  5743 00004841 0F84A0000000        <1> 		je near guialton
  5744 00004847 80FCB8              <1> 		cmp ah, 0B8h
  5745 0000484A 0F849F000000        <1> 		je near guialtoff
  5746 00004850 80FC1D              <1> 		cmp ah, 1Dh
  5747 00004853 0F847E000000        <1> 		je near guictron
  5748 00004859 80FC9D              <1> 		cmp ah, 9Dh
  5749 0000485C 0F847D000000        <1> 		je near guictroff
  5750 00004862 66A3[A0290000]      <1> 		mov [lastkey], ax
  5751 00004868 C3                  <1> 		ret
  5752                              <1> nospecialkey:
  5753                              <1> 		;cmp ah, 4Dh
  5754                              <1> 		;je near nextimage
  5755 00004869 80FC2A              <1> 		cmp ah, 2Ah
  5756 0000486C 0F8455000000        <1> 		je near guishifton
  5757 00004872 80FC36              <1> 		cmp ah, 36h
  5758 00004875 0F844C000000        <1> 		je near guishifton
  5759 0000487B 80FC1C              <1> 		cmp ah, 1Ch
  5760 0000487E 0F8473000000        <1> 		je near guientdown
  5761 00004884 80FCAA              <1> 		cmp ah, 0AAh
  5762 00004887 0F8442000000        <1> 		je near guishiftoff
  5763 0000488D 80FCB6              <1> 		cmp ah, 0B6h
  5764 00004890 0F8439000000        <1> 		je near guishiftoff
  5765 00004896 80FC3A              <1> 		cmp ah, 3Ah
  5766 00004899 0F84A5000000        <1> 		je near guicaps
  5767 0000489F 80FC45              <1> 		cmp ah, 0x45
  5768 000048A2 0F84AD000000        <1> 		je near guinumlock
  5769 000048A8 80FC46              <1> 		cmp ah, 0x46
  5770 000048AB 0F84BC000000        <1> 		je near guiscrolllock
  5771 000048B1 C3                  <1> 		ret
  5772                              <1> 	guigetkeyspecial:
  5773 000048B2 C605[B1470000]E0    <1> 		mov byte [specialkey], 0xE0
  5774 000048B9 E933FFFFFF          <1> 		jmp guigetkey
  5775                              <1> 	guishift:
  5776 000048BE A0[21480000]        <1> 		mov al, [guiupper]
  5777 000048C3 3C01                <1> 		cmp al, 1
  5778 000048C5 7308                <1> 		jae guishiftoff
  5779                              <1> 	guishifton:
  5780 000048C7 C605[21480000]01    <1> 		mov byte [guiupper], 1
  5781 000048CE C3                  <1> 		ret
  5782                              <1> 		;jmp guistartin
  5783                              <1> 	guishiftoff:
  5784 000048CF C605[21480000]00    <1> 		mov byte [guiupper], 0
  5785 000048D6 C3                  <1> 		ret
  5786                              <1> 		;jmp guistartin
  5787                              <1> 	guictron:
  5788 000048D7 C605[43490000]01    <1> 		mov byte [guictr], 1
  5789 000048DE C3                  <1> 		ret
  5790                              <1> 	guictroff:
  5791 000048DF C605[43490000]00    <1> 		mov byte [guictr], 0
  5792 000048E6 C3                  <1> 		ret
  5793                              <1> 	guialton:
  5794 000048E7 C605[42490000]01    <1> 		mov byte [guialt], 1
  5795 000048EE C3                  <1> 		ret
  5796                              <1> 		;jmp guistartin
  5797                              <1> 	guialtoff:
  5798 000048EF C605[42490000]00    <1> 		mov byte [guialt], 0
  5799 000048F6 C3                  <1> 		ret
  5800                              <1> 		;jmp guistartin
  5801                              <1> 	guientdown:
  5802 000048F7 C3                  <1> 		ret
  5803                              <1> 	guiscanfound:
  5804 000048F8 81C704000000        <1> 		add edi, 4
  5805 000048FE 803D[43490000]01    <1> 		cmp byte [guictr], 1
  5806 00004905 731B                <1> 		jae altguiin
  5807 00004907 81EF04000000        <1> 		sub edi, 4
  5808 0000490D 81C702000000        <1> 		add edi, 2
  5809 00004913 803D[42490000]01    <1> 		cmp byte [guialt], 1
  5810 0000491A 7306                <1> 		jae altguiin
  5811 0000491C 81EF02000000        <1> 		sub edi, 2
  5812                              <1> altguiin:
  5813 00004922 81C701000000        <1> 		add edi, 1
  5814 00004928 803D[21480000]01    <1> 		cmp byte [guiupper], 1
  5815 0000492F 7306                <1> 		jae uppercasegui
  5816 00004931 81EF01000000        <1> 		sub edi, 1
  5817                              <1> uppercasegui:
  5818 00004937 8A07                <1> 		mov al,[edi]
  5819 00004939 A2[A0290000]        <1> 		mov [lastkey], al
  5820 0000493E C3                  <1> 		ret
  5821                              <1> 		
  5822 0000493F 00                  <1> keyboardstatus db 0
  5823 00004940 00                  <1> numlockstatus db 0
  5824 00004941 00                  <1> scrolllockstatus db 0
  5825 00004942 00                  <1> guialt db 0
  5826 00004943 00                  <1> guictr db 0
  5827                              <1> 	guicaps:
  5828 00004944 8035[3F490000]04    <1> 		xor byte [keyboardstatus], 00000100b
  5829 0000494B E835000000          <1> 		call updatekblights
  5830 00004950 E969FFFFFF          <1> 		jmp guishift
  5831                              <1> 		
  5832                              <1> 	guinumlock:
  5833 00004955 8035[3F490000]02    <1> 		xor byte [keyboardstatus], 00000010b
  5834 0000495C 8035[40490000]01    <1> 		xor byte [numlockstatus], 1
  5835 00004963 E81D000000          <1> 		call updatekblights
  5836 00004968 E969FEFFFF          <1> 		jmp guistartin
  5837                              <1> 	
  5838                              <1> 	guiscrolllock:
  5839 0000496D 8035[3F490000]01    <1> 		xor byte [keyboardstatus], 00000001b
  5840 00004974 8035[41490000]01    <1> 		xor byte [scrolllockstatus], 1
  5841 0000497B E805000000          <1> 		call updatekblights
  5842 00004980 E951FEFFFF          <1> 		jmp guistartin
  5843                              <1> 		
  5844                              <1> 	updatekblights:
  5845 00004985 B0ED                <1> 		mov al, 0xED
  5846 00004987 66BA6000            <1> 		mov dx, 0x60
  5847 0000498B EE                  <1> 		out dx, al
  5848                              <1> 	chkkbdack:
  5849 0000498C EC                  <1> 		in al, dx
  5850 0000498D 3CFA                <1> 		cmp al, 0xFA
  5851 0000498F 75FB                <1> 		jne chkkbdack
  5852 00004991 A0[3F490000]        <1> 		mov al, [keyboardstatus]
  5853 00004996 EE                  <1> 		out dx, al
  5854 00004997 C3                  <1> 		ret
  5855                              <1> 	
  5856                              <1> 	cursorgui:
  5857 00004998 803D[1E600000]01    <1> 		cmp byte [mouseon], 1
  5858 0000499F 0F8432000000        <1> 		je near maincall2
  5859 000049A5 803D[E14E0000]00    <1> 		cmp byte [guion], 0
  5860 000049AC 0F8445FFFFFF        <1> 		je guientdown
  5861                              <1> 	initmouse:
  5862 000049B2 803D[E14E0000]00    <1> 		cmp byte [guion], 0
  5863 000049B9 7405                <1> 		je noswmsposinit
  5864 000049BB E8DC050000          <1> 		call switchmousepos2
  5865                              <1> 	noswmsposinit:
  5866 000049C0 E86EFDFFFF          <1> 	  	call PS2SET
  5867 000049C5 E897FDFFFF          <1> 		call ACTMOUS
  5868 000049CA C605[1E600000]01    <1> 		mov byte [mouseon],1
  5869 000049D1 E8B0FDFFFF          <1> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  5870                              <1> 				;;If the bytes are mixed up,
  5871                              <1> 				;;remove this line or add another of this line.
  5872                              <1> 		;call GETB
  5873                              <1> 	nomouse:
  5874 000049D6 C3                  <1> 		ret
  5875                              <1> 	maincall2:
  5876 000049D7 803D[B0470000]01    <1> 		cmp byte [mousedisabled], 1
  5877 000049DE 74F6                <1> 		je nomouse
  5878 000049E0 803D[1E600000]01    <1> 		  cmp byte [mouseon], 1
  5879 000049E7 75C9                <1> 		  jne initmouse
  5880 000049E9 E898FDFFFF          <1> 		  call GETB
  5881 000049EE 88C3                <1> 		  mov  bl, al
  5882 000049F0 80E301              <1> 		  and  bl, 1
  5883 000049F3 881D[AB470000]      <1> 		  mov  BYTE [LBUTTON], bl
  5884 000049F9 88C3                <1> 		  mov  bl, al
  5885 000049FB 80E302              <1> 		  and  bl, 2
  5886 000049FE D0EB                <1> 		  shr  bl, 1
  5887 00004A00 881D[AC470000]      <1> 		  mov  BYTE [RBUTTON], bl
  5888 00004A06 88C3                <1> 		  mov  bl, al
  5889 00004A08 80E304              <1> 		  and  bl, 4
  5890 00004A0B C0EB02              <1> 		  shr  bl, 2
  5891 00004A0E 881D[AD470000]      <1> 		  mov  BYTE [MBUTTON], bl
  5892 00004A14 E86DFDFFFF          <1> 		  call GETB
  5893 00004A19 A2[AE470000]        <1> 		  mov  BYTE [XCOORD], al
  5894 00004A1E E863FDFFFF          <1> 		  call GETB
  5895 00004A23 A2[AF470000]        <1> 		  mov  BYTE [YCOORD], al
  5896                              <1> 
  5897                              <1> 	showpixelcursor:
  5898 00004A28 668B15[7A4B0000]    <1> 		mov dx, [mousecursorposition]
  5899 00004A2F 668B0D[7C4B0000]    <1> 		mov cx, [mousecursorposition + 2]
  5900 00004A36 668915[764B0000]    <1> 		mov [lastmouseposition], dx
  5901 00004A3D 66890D[784B0000]    <1> 		mov [lastmouseposition + 2], cx
  5902 00004A44 A0[AE470000]        <1> 		mov al, [XCOORD]
  5903 00004A49 3C80                <1> 		cmp al, 128
  5904 00004A4B 730C                <1> 		jae subxcoord
  5905 00004A4D 00C0                <1> 		add al, al
  5906 00004A4F 30E4                <1> 		xor ah, ah
  5907 00004A51 6601C2              <1> 		add dx, ax
  5908 00004A54 E90B000000          <1> 		jmp subxcoorddn
  5909                              <1> 	subxcoord:
  5910 00004A59 00C0                <1> 		add al, al
  5911 00004A5B 30DB                <1> 		xor bl, bl
  5912 00004A5D 28C3                <1> 		sub bl, al
  5913 00004A5F 30FF                <1> 		xor bh, bh
  5914 00004A61 6629DA              <1> 		sub dx, bx
  5915                              <1> 	subxcoorddn:
  5916 00004A64 8A1D[AF470000]      <1> 		mov bl, [YCOORD]
  5917 00004A6A 30C0                <1> 		xor al, al
  5918 00004A6C 28D8                <1> 		sub al, bl
  5919 00004A6E 3C80                <1> 		cmp al, 128
  5920 00004A70 730A                <1> 		jae subycoord
  5921 00004A72 30E4                <1> 		xor ah, ah
  5922 00004A74 6601C1              <1> 		add cx, ax
  5923 00004A77 E909000000          <1> 		jmp subycoorddn
  5924                              <1> 	subycoord:
  5925 00004A7C 30DB                <1> 		xor bl, bl
  5926 00004A7E 28C3                <1> 		sub bl, al
  5927 00004A80 30FF                <1> 		xor bh, bh
  5928 00004A82 6629D9              <1> 		sub cx, bx
  5929                              <1> 	subycoorddn:
  5930 00004A85 6681FA204E          <1> 		cmp dx, 20000
  5931 00004A8A 7603                <1> 		jbe nooriginx2
  5932 00004A8C 6631D2              <1> 		xor dx, dx
  5933                              <1> 	nooriginx2:
  5934 00004A8F 6681F9204E          <1> 		cmp cx, 20000
  5935 00004A94 7603                <1> 		jbe nooriginy2
  5936 00004A96 6631C9              <1> 		xor cx, cx
  5937                              <1> 	nooriginy2:
  5938 00004A99 6681FA0000          <1> 		cmp dx, 0
  5939 00004A9E 7415                <1> 		je nofixxcolumn2
  5940 00004AA0 663B15[645D0000]    <1> 		cmp dx, [resolutionx2]
  5941 00004AA7 720C                <1> 		jb nofixxcolumn2
  5942 00004AA9 668B15[645D0000]    <1> 		mov dx, [resolutionx2]
  5943 00004AB0 6681EA0200          <1> 		sub dx, 2
  5944                              <1> 	nofixxcolumn2:
  5945 00004AB5 6681F90000          <1> 		cmp cx, 0
  5946 00004ABA 7415                <1> 		je nofixyrow2
  5947 00004ABC 663B0D[605D0000]    <1> 		cmp cx, [resolutiony]
  5948 00004AC3 720C                <1> 		jb nofixyrow2
  5949 00004AC5 668B0D[605D0000]    <1> 		mov cx, [resolutiony]
  5950 00004ACC 6681E90100          <1> 		sub cx, 1
  5951                              <1> 	nofixyrow2:
  5952 00004AD1 668915[7A4B0000]    <1> 		mov [mousecursorposition], dx
  5953 00004AD8 66890D[7C4B0000]    <1> 		mov [mousecursorposition + 2], cx
  5954 00004ADF 803D[E14E0000]00    <1> 		cmp byte [guion], 0
  5955 00004AE6 0F8492000000        <1> 		je near termmouse
  5956 00004AEC E84B040000          <1> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  5957 00004AF1 803D[AB470000]01    <1> 		cmp byte [LBUTTON], 1
  5958 00004AF8 0F8412050000        <1> 		je near clickicon
  5959 00004AFE 803D[AC470000]01    <1> 		cmp byte [RBUTTON], 1
  5960 00004B05 0F8405050000        <1> 		je near clickicon
  5961 00004B0B A0[FD4F0000]        <1> 		mov al, [pbutton]
  5962 00004B10 C705[00500000]0000- <1> 		mov dword [dragging], 0
  5963 00004B18 0000                <1>
  5964 00004B1A 3C00                <1> 		cmp al, 0
  5965 00004B1C 740F                <1> 		je nopreviousbutton
  5966 00004B1E E8BF030000          <1> 		call clearmousecursor
  5967 00004B23 E8290A0000          <1> 		call reloadallgraphics
  5968                              <1> 	windowtermcopyend:
  5969 00004B28 E86F040000          <1> 		call switchmousepos2
  5970                              <1> 	nopreviousbutton:
  5971 00004B2D 30C0                <1> 		xor al, al
  5972 00004B2F A2[FD4F0000]        <1> 		mov [pbutton], al
  5973 00004B34 A0[AB470000]        <1> 		mov al, [LBUTTON]
  5974 00004B39 A2[FE4F0000]        <1> 		mov [pLBUTTON], al
  5975 00004B3E A0[AC470000]        <1> 		mov al, [RBUTTON]
  5976 00004B43 A2[FF4F0000]        <1> 		mov [pRBUTTON], al
  5977 00004B48 31C9                <1> 		xor ecx, ecx
  5978 00004B4A 31D2                <1> 		xor edx, edx
  5979 00004B4C 668B15[7A4B0000]    <1> 		mov dx, [mousecursorposition]
  5980 00004B53 668B0D[7C4B0000]    <1> 		mov cx, [mousecursorposition + 2]
  5981 00004B5A 66BB18C7            <1> 		mov bx, 1100011100011000b
  5982 00004B5E 30E4                <1> 		xor ah, ah
  5983 00004B60 B0FE                <1> 		mov al, 254
  5984 00004B62 C605[DE4E0000]01    <1> 		mov byte [showcursorfonton], 1
  5985 00004B69 E806120000          <1> 		call showfontvesa
  5986 00004B6E C605[DE4E0000]00    <1> 		mov byte [showcursorfonton], 0
  5987 00004B75 C3                  <1> 		ret
  5988                              <1> 
  5989 00004B76 84008400            <1> lastmouseposition dw 132,132
  5990 00004B7A 84008400            <1> mousecursorposition dw 132,132	
  5991                              <1> 
  5992                              <1> termmouse:
  5993 00004B7E BE[8F1D0000]        <1> 		mov esi, videobuf
  5994 00004B83 31D2                <1> 		xor edx, edx
  5995 00004B85 668B15[764B0000]    <1> 		mov dx, [lastmouseposition]
  5996 00004B8C 668B0D[784B0000]    <1> 		mov cx, [lastmouseposition + 2]
  5997 00004B93 66A1[114C0000]      <1> 		mov ax, [cursorcache]
  5998 00004B99 663D0000            <1> 		cmp ax, 0
  5999 00004B9D 7425                <1> 		je nocopycursorcache
  6000 00004B9F 66C1E104            <1> 		shl cx, 4
  6001 00004BA3 66C1E203            <1> 		shl dx, 3
  6002 00004BA7 01D6                <1> 		add esi, edx
  6003 00004BA9 6631D2              <1> 		xor dx, dx
  6004 00004BAC 8A15[DD270000]      <1> 		mov dl, [charxy]
  6005 00004BB2 6641                <1> 		inc cx
  6006                              <1> termmousecplp1:
  6007 00004BB4 01D6                <1> 		add esi, edx
  6008 00004BB6 6649                <1> 		dec cx
  6009 00004BB8 6681F90000          <1> 		cmp cx, 0
  6010 00004BBD 75F5                <1> 		jne termmousecplp1
  6011 00004BBF 29D6                <1> 		sub esi, edx
  6012 00004BC1 668906              <1> 		mov [esi], ax
  6013                              <1> nocopycursorcache:
  6014 00004BC4 BE[8F1D0000]        <1> 		mov esi, videobuf
  6015 00004BC9 31D2                <1> 		xor edx, edx
  6016 00004BCB 668B15[7A4B0000]    <1> 		mov dx, [mousecursorposition]
  6017 00004BD2 668B0D[7C4B0000]    <1> 		mov cx, [mousecursorposition + 2]
  6018 00004BD9 66C1E104            <1> 		shl cx, 4
  6019 00004BDD 66C1E203            <1> 		shl dx, 3
  6020 00004BE1 01D6                <1> 		add esi, edx
  6021 00004BE3 6631D2              <1> 		xor dx, dx
  6022 00004BE6 8A15[DD270000]      <1> 		mov dl, [charxy]
  6023 00004BEC 6641                <1> 		inc cx
  6024                              <1> termmousecplp2:
  6025 00004BEE 01D6                <1> 		add esi, edx
  6026 00004BF0 6649                <1> 		dec cx
  6027 00004BF2 6681F90000          <1> 		cmp cx, 0
  6028 00004BF7 75F5                <1> 		jne termmousecplp2
  6029 00004BF9 29D6                <1> 		sub esi, edx
  6030 00004BFB 668B06              <1> 		mov ax, [esi]
  6031 00004BFE 66A3[114C0000]      <1> 		mov [cursorcache], ax
  6032 00004C04 B080                <1> 		mov al, 128
  6033 00004C06 B407                <1> 		mov ah, 7
  6034 00004C08 668906              <1> 		mov [esi], ax
  6035 00004C0B E851E1FFFF          <1> 		call termcopy
  6036 00004C10 C3                  <1> 		ret
  6037 00004C11 0000                <1> cursorcache db 0,0
  6038                              <1> 	
  6039                              <1> scancode:
  6040 00004C13 000000000000        <1> 	db 0,0,0,0,0,0			;,0h
  6041 00004C19 000000000000        <1> 	db 0,0,0,0,0,0			;,1h
  6042 00004C1F 3121AD000000        <1> 	db '1','!',173,0,0,0	;,2h
  6043 00004C25 3240FDFB0000        <1> 	db '2','@',253,251,0,0	;,3h
  6044 00004C2B 332300000000        <1> 	db '3','#',0,0,0,0		;,4h
  6045 00004C31 34249B9C0000        <1> 	db '4','$',155,156,0,0	;,5h
  6046 00004C37 3525EE000000        <1> 	db '5','%',238,0,0,0	;,6h
  6047 00004C3D 365EAC000000        <1> 	db '6','^',172,0,0,0	;,7h
  6048 00004C43 3726AB000000        <1> 	db '7','&',171,0,0,0	;,8h
  6049 00004C49 382A00000000        <1> 	db '8','*',0,0,0,0		;,9h
  6050 00004C4F 392800000000        <1> 	db '9','(',0,0,0,0		;,0Ah
  6051 00004C55 302900000000        <1> 	db '0',')',0,0,0,0		;,0Bh
  6052 00004C5B 2D5F9DF10000        <1> 	db '-','_',157,241,0,0	;,0Ch
  6053 00004C61 3D2BF7F60000        <1> 	db '=','+',247,246,0,0	;,0Dh
  6054 00004C67 080800000000        <1> 	db 8,8,0,0,0,0			;,0Eh
  6055 00004C6D 000000000000        <1> 	db 0,0,0,0,0,0			;,0Fh
  6056 00004C73 7151848E0000        <1> 	db 'q','Q',132,142,0,0	;,10h
  6057 00004C79 7757868F0000        <1> 	db 'w','W',134,143,0,0	;,11h
  6058 00004C7F 65458290EE45        <1> 	db 'e','E',130,144,238,'E'	;,12h
  6059 00004C85 7252898A7050        <1> 	db 'r','R',137,138,'p','P'		;,13h
  6060 00004C8B 7454819AE754        <1> 	db 't','T',129,154,231,'T'		;,14h
  6061 00004C91 795998007559        <1> 	db 'y','Y',152,0,'u','Y'	;,15h
  6062 00004C97 7555A3970000        <1> 	db 'u','U',163,151,0,0	;,16h
  6063 00004C9D 6949A18D6949        <1> 	db 'i','I',161,141,'i','I'	;,17h
  6064 00004CA3 6F4FA29577EA        <1> 	db 'o','O',162,149,'w',234	;,18h
  6065 00004CA9 70509499E3EF        <1> 	db 'p','P',148,153,227,239	;,19h
  6066 00004CAF 5B7BF4000000        <1> 	db '[','{',244,0,0,0		;,1Ah
  6067 00004CB5 5D7DF5000000        <1> 	db ']','}',245,0,0,0		;,1Bh
  6068 00004CBB 000000000000        <1> 	db 0,0,0,0,0,0			;,1Ch
  6069 00004CC1 000000000000        <1> 	db 0,0,0,0,0,0			;,1Dh
  6070 00004CC7 6141A085E041        <1> 	db 'a','A',160,133,224,'A'	;,1Eh
  6071 00004CCD 73531500E5E4        <1> 	db 's','S',21,0,229,228		;,1Fh
  6072 00004CD3 6444F800EB7F        <1> 	db 'd','D',248,0,235,127	;,20h
  6073 00004CD9 66469F00EDE8        <1> 	db 'f','F',159,0,237,232	;,21h
  6074 00004CDF 6747000079E2        <1> 	db 'g','G',0,0,'y',226		;,22h
  6075 00004CE5 684800006E48        <1> 	db 'h','H',0,0,'n','H'		;,23h
  6076 00004CEB 6A4A00000000        <1> 	db 'j','J',0,0,0,0		;,24h
  6077 00004CF1 6B4B00006B4B        <1> 	db 'k','K',0,0,'k','K'		;,25h
  6078 00004CF7 6C4C0000E9E9        <1> 	db 'l','L',0,0,233,233		;,26h
  6079 00004CFD 3B3A14000000        <1> 	db ';',':',20,0,0,0		;,27h
  6080 00004D03 272200000000        <1> 	db 27h,22h,0,0,0,0		;,28h
  6081 00004D09 607E00000000        <1> 	db '`','~',0,0,0,0		;,29h
  6082 00004D0F 000000000000        <1> 	db 0,0,0,0,0,0			;,2Ah
  6083 00004D15 5C7CAAB30000        <1> 	db '\','|',170,179,0,0	;,2Bh
  6084 00004D1B 7A5A91927A5A        <1> 	db 'z','Z',145,146,'z','Z'	;,2Ch
  6085 00004D21 7858000000F0        <1> 	db 'x','X',0,0,0,240		;,2Dh
  6086 00004D27 634387800000        <1> 	db 'c','C',135,128,0,0	;,2Eh
  6087 00004D2D 765600000000        <1> 	db 'v','V',0,0,0,0		;,2Fh
  6088 00004D33 62420000E142        <1> 	db 'b','B',0,0,225,'B'	;,30h
  6089 00004D39 6E4EA4A5764E        <1> 	db 'n','N',164,165,'v','N'	;,31h
  6090 00004D3F 6D4D0000E64D        <1> 	db 'm','M',0,0,230,'M'		;,32h
  6091 00004D45 2C3CF3AE0000        <1> 	db ',','<',243,174,0,0	;,33h
  6092 00004D4B 2E3EF2AF0000        <1> 	db '.','>',242,175,0,0	;,34h
  6093 00004D51 2F3FA8000000        <1> 	db '/','?',168,0,0,0	;,35h
  6094 00004D57 000000000000        <1> 	db 0,0,0,0,0,0			;,36h
  6095 00004D5D 000000000000        <1> 	db 0,0,0,0,0,0			;,37h
  6096 00004D63 000000000000        <1> 	db 0,0,0,0,0,0			;,38h
  6097 00004D69 202000000000        <1> 	db ' ',' ',0,0,0,0		;,39h
  6098                              <1> noscan:
  6099                                      %include 'source/gui.asm'
  6100                              <1> guiclear:
  6101 00004D6F 8B3D[C0840000]      <1> 	mov edi, [physbaseptr]
  6102 00004D75 668B15[625D0000]    <1> 	mov dx, [resolutionx]
  6103 00004D7C 668B0D[605D0000]    <1> 	mov cx, [resolutiony]
  6104 00004D83 66A1[AC4D0000]      <1> 	mov ax, [background]
  6105                              <1> guiclearloop:
  6106 00004D89 668907              <1> 	mov [edi], ax
  6107 00004D8C 81C702000000        <1> 	add edi, 2
  6108 00004D92 664A                <1> 	dec dx
  6109 00004D94 6681FA0000          <1> 	cmp dx, 0
  6110 00004D99 77EE                <1> 	ja guiclearloop
  6111 00004D9B 6649                <1> 	dec cx
  6112 00004D9D 668B15[625D0000]    <1> 	mov dx, [resolutionx]
  6113 00004DA4 6681F90000          <1> 	cmp cx, 0
  6114 00004DA9 77DE                <1> 	ja guiclearloop
  6115 00004DAB C3                  <1> 	ret
  6116                              <1> 
  6117 00004DAC CF7B                <1> background dw 0111101111001111b
  6118                              <1> 
  6119                              <1> gui:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  6120 00004DAE 31C0                <1> 	xor eax, eax
  6121 00004DB0 31DB                <1> 	xor ebx, ebx
  6122 00004DB2 31C9                <1> 	xor ecx, ecx
  6123 00004DB4 31D2                <1> 	xor edx, edx
  6124 00004DB6 8B3D[C0840000]      <1> 	mov edi, [physbaseptr]
  6125 00004DBC 668B15[625D0000]    <1> 	mov dx, [resolutionx]
  6126 00004DC3 668B0D[605D0000]    <1> 	mov cx, [resolutiony]
  6127 00004DCA 668B1D[AC4D0000]    <1> 	mov bx, [background]
  6128                              <1> guiclearloop2:
  6129 00004DD1 66891F              <1> 	mov [edi], bx
  6130 00004DD4 81C702000000        <1> 	add edi, 2
  6131 00004DDA 664A                <1> 	dec dx
  6132 00004DDC 6681FA0000          <1> 	cmp dx, 0
  6133 00004DE1 0F85EAFFFFFF        <1> 	jne near guiclearloop2
  6134 00004DE7 6649                <1> 	dec cx
  6135 00004DE9 668B15[625D0000]    <1> 	mov dx, [resolutionx]
  6136 00004DF0 6681F90000          <1> 	cmp cx, 0
  6137 00004DF5 0F85D6FFFFFF        <1> 	jne near guiclearloop2
  6138 00004DFB C605[E14E0000]01    <1> 	mov byte [guion], 1
  6139 00004E02 C605[E04E0000]00    <1> 	mov byte [mouseselecton], 0
  6140 00004E09 31C0                <1> 	xor eax, eax
  6141 00004E0B 31DB                <1> 	xor ebx, ebx
  6142 00004E0D 31C9                <1> 	xor ecx, ecx
  6143 00004E0F 31D2                <1> 	xor edx, edx
  6144                              <1> 	
  6145 00004E11 BE[33600000]        <1> 	mov esi, pacmsg
  6146 00004E16 6631C0              <1> 	xor ax, ax
  6147 00004E19 31DB                <1> 	xor ebx, ebx
  6148 00004E1B 66B99000            <1> 	mov cx, 144
  6149 00004E1F 66BA0400            <1> 	mov dx, 4
  6150 00004E23 E86A0A0000          <1> 	call showstring
  6151                              <1> 	
  6152 00004E28 BE[A2610000]        <1> 	mov esi, interneticon
  6153 00004E2D 6631C0              <1> 	xor ax, ax
  6154 00004E30 BB[A0600000]        <1> 	mov ebx, noie
  6155 00004E35 66B91800            <1> 	mov cx, 24
  6156 00004E39 66BA0400            <1> 	mov dx, 4
  6157 00004E3D E8520E0000          <1> 	call showicon
  6158                              <1> 	
  6159 00004E42 BE[24620000]        <1> 	mov esi, wordicon
  6160 00004E47 6631C0              <1> 	xor ax, ax
  6161 00004E4A 31DB                <1> 	xor ebx, ebx
  6162 00004E4C 66B91800            <1> 	mov cx, 24
  6163 00004E50 66BA3000            <1> 	mov dx, 48
  6164 00004E54 E83B0E0000          <1> 	call showicon
  6165                              <1> 	
  6166 00004E59 BE[A6620000]        <1> 	mov esi, pacmanpellet
  6167 00004E5E 6631C0              <1> 	xor ax, ax
  6168 00004E61 31DB                <1> 	xor ebx, ebx
  6169 00004E63 66B94000            <1> 	mov cx, 64
  6170 00004E67 66BA0400            <1> 	mov dx, 4
  6171 00004E6B E8240E0000          <1> 	call showicon
  6172                              <1> 	
  6173 00004E70 BE[AA630000]        <1> 	mov esi, pacman
  6174 00004E75 6631C0              <1> 	xor ax, ax
  6175 00004E78 BB[89600000]        <1> 	mov ebx, pacmannomnom
  6176 00004E7D 66B94000            <1> 	mov cx, 64
  6177 00004E81 66BA3000            <1> 	mov dx, 48
  6178 00004E85 E80A0E0000          <1> 	call showicon
  6179                              <1> 	
  6180 00004E8A BE[28630000]        <1> 	mov esi, ghostie
  6181 00004E8F 6631C0              <1> 	xor ax, ax
  6182 00004E92 BB[72600000]        <1> 	mov ebx, boo
  6183 00004E97 66B96C00            <1> 	mov cx, 108
  6184 00004E9B 66BA0400            <1> 	mov dx, 4
  6185 00004E9F E8F00D0000          <1> 	call showicon
  6186                              <1> 
  6187 00004EA4 BE[1F600000]        <1> 	mov esi, start
  6188 00004EA9 668B0D[605D0000]    <1> 	mov cx, [resolutiony]
  6189 00004EB0 6681E91000          <1> 	sub cx, 16
  6190 00004EB5 66BA0200            <1> 	mov dx, 2
  6191 00004EB9 30E4                <1> 	xor ah, ah
  6192 00004EBB B010                <1> 	mov al, 00010000b
  6193 00004EBD BB[4F610000]        <1> 	mov ebx, winblows
  6194 00004EC2 E8CB090000          <1> 	call showstring
  6195                              <1> 	
  6196 00004EC7 E8CCFAFFFF          <1> 	call cursorgui
  6197                              <1> guistart:
  6198 00004ECC E805F9FFFF          <1> 	call guistartin
  6199 00004ED1 C605[DA4E0000]00    <1> 	mov byte [copygui], 0
  6200 00004ED8 EBF2                <1> 	jmp guistart
  6201                              <1> 	
  6202                              <1> ;guicopy:	;;for double buffering
  6203                              <1> ;	mov byte [copygui], 1
  6204                              <1> ;	mov edi, [offscreenmemoffset]
  6205                              <1> ;	xor edx, edx
  6206                              <1> ;	xor ecx, ecx
  6207                              <1> ;	mov dx, [mousecursorposition]
  6208                              <1> ;	mov cx, [mousecursorposition + 2]
  6209                              <1> ;	add edi, edx
  6210                              <1> ;	mov dx, [resolutionx2]
  6211                              <1> ;	inc cx
  6212                              <1> ;guicp2:
  6213                              <1> ;	add edi, edx
  6214                              <1> ;	dec cx
  6215                              <1> ;	cmp cx, 0
  6216                              <1> ;	jne guicp2
  6217                              <1> ;	sub edi, edx
  6218                              <1> ;	mov [cursorloc], edi
  6219                              <1> ;	mov ebx, cursorbmp
  6220                              <1> ;	mov cx, [resolutiony]
  6221                              <1> ;	rol ecx, 16
  6222                              <1> ;	mov cx, [resolutionx]
  6223                              <1> ;	mov esi, [physbaseptr]
  6224                              <1> ;	mov edi, [offscreenmemoffset]
  6225                              <1> ;guicp1:
  6226                              <1> ;	mov ax, [esi]
  6227                              <1> ;	mov [edi], ax
  6228                              <1> ;	add esi, 2
  6229                              <1> ;	add edi, 2
  6230                              <1> ;	cmp edi, [cursorloc]
  6231                              <1> ;	je copycursor
  6232                              <1> ;dncopycursor:
  6233                              <1> ;	dec cx
  6234                              <1> ;	cmp cx, 0
  6235                              <1> ;	jne guicp1
  6236                              <1> ;	mov cx, [resolutionx]
  6237                              <1> ;	rol ecx, 16
  6238                              <1> ;	dec cx
  6239                              <1> ;	cmp cx, 0
  6240                              <1> ;	rol ecx, 16
  6241                              <1> ;	jne guicp1
  6242                              <1> ;	mov byte [copygui], 0
  6243                              <1> ;	ret
  6244                              <1> ;copycursor:
  6245                              <1> ;	cmp ebx, cursorbmpend
  6246                              <1> ;	jae dncopycursor
  6247                              <1> ;	mov dx, [resolutionx2]
  6248                              <1> ;	add edi, edx
  6249                              <1> ;	mov [cursorloc], edi
  6250                              <1> ;	sub edi, edx
  6251                              <1> ;	dec ebx
  6252                              <1> ;	sub edi, 2
  6253                              <1> ;	sub esi, 2
  6254                              <1> ;	mov dx, 9
  6255                              <1> ;curscplp:
  6256                              <1> ;	inc ebx
  6257                              <1> ;	add esi, 2
  6258                              <1> ;	add edi, 2
  6259                              <1> ;	mov ax, [esi]
  6260                              <1> ;	mov [edi], ax
  6261                              <1> ;	mov al, [ebx]
  6262                              <1> ;	cmp al, 0
  6263                              <1> ;	je curscplp2
  6264                              <1> ;	mov word [edi], 1110011110011100b
  6265                              <1> ;curscplp2:
  6266                              <1> ;	dec cx
  6267                              <1> ;	cmp cx, 0
  6268                              <1> ;	je dncopycursor
  6269                              <1> ;	dec dx
  6270                              <1> ;	cmp dx, 0
  6271                              <1> ;	jne curscplp
  6272                              <1> ;	jmp dncopycursor
  6273                              <1> 	
  6274                              <1> 	
  6275                              <1> ;cursorloc: dd 0
  6276                              <1> 		
  6277                              <1> ;nextimage:	
  6278                              <1> ;	call guiclear
  6279                              <1> ;	mov esi, [bmpend]
  6280                              <1> ;	xor eax, eax
  6281                              <1> ;	xor ebx, ebx
  6282                              <1> ;	xor ecx, ecx
  6283                              <1> ;	xor edx, edx
  6284                              <1> ;	call showbmp
  6285                              <1> ;	jmp guistartin
  6286                              <1> 		
  6287 00004EDA 00                  <1> copygui db 0
  6288 00004EDB 00                  <1> graphicsset db 0
  6289 00004EDC 0000                <1> graphicspos db 0,0
  6290 00004EDE 00                  <1> showcursorfonton db 0
  6291 00004EDF 00                  <1> savefonton db 0
  6292 00004EE0 00                  <1> mouseselecton db 0
  6293 00004EE1 00                  <1> guion db 0
  6294                              <1> 
  6295                              <1> 		
  6296                              <1> clearmousecursor:
  6297 00004EE2 BE[AC4D0000]        <1> 		mov esi, background
  6298 00004EE7 8B3D[C0840000]      <1> 		mov edi, [physbaseptr]
  6299 00004EED 31D2                <1> 		xor edx, edx
  6300 00004EEF 31C9                <1> 		xor ecx, ecx
  6301 00004EF1 668B15[764B0000]    <1> 		mov dx, [lastmouseposition]
  6302 00004EF8 668B0D[784B0000]    <1> 		mov cx, [lastmouseposition + 2]
  6303 00004EFF 01D7                <1> 		add edi, edx
  6304 00004F01 31D2                <1> 		xor edx, edx
  6305 00004F03 668B15[645D0000]    <1> 		mov dx, [resolutionx2]
  6306 00004F0A 6681F90000          <1> 		cmp cx, 0
  6307 00004F0F 740B                <1> 		je noyclr
  6308 00004F11 01D7                <1> yclr:	add edi, edx
  6309 00004F13 6649                <1> 		dec cx
  6310 00004F15 6681F90000          <1> 		cmp cx, 0
  6311 00004F1A 75F5                <1> 		jne yclr
  6312 00004F1C 668B06              <1> noyclr:	mov ax, [esi]
  6313 00004F1F C1C010              <1> 		rol eax, 16
  6314 00004F22 668B06              <1> 		mov ax, [esi]
  6315 00004F25 8907                <1> 		mov [edi], eax
  6316 00004F27 894704              <1> 		mov [edi + 4], eax
  6317 00004F2A 894708              <1> 		mov [edi + 8], eax
  6318 00004F2D 89470C              <1> 		mov [edi + 12], eax
  6319 00004F30 01D7                <1> 		add edi, edx
  6320 00004F32 6641                <1> 		inc cx
  6321 00004F34 6681F91000          <1> 		cmp cx, 16
  6322 00004F39 72E1                <1> 		jb noyclr
  6323 00004F3B C3                  <1> 		ret
  6324                              <1> 
  6325                              <1> switchmousepos:		;;switch were the mouse is located
  6326 00004F3C BE[00120000]        <1> 		mov esi, mousecolorbuf
  6327 00004F41 8B3D[C0840000]      <1> 		mov edi, [physbaseptr]
  6328 00004F47 31D2                <1> 		xor edx, edx
  6329 00004F49 31C9                <1> 		xor ecx, ecx
  6330 00004F4B 668B15[764B0000]    <1> 		mov dx, [lastmouseposition]
  6331 00004F52 668B0D[784B0000]    <1> 		mov cx, [lastmouseposition + 2]
  6332 00004F59 01D7                <1> 		add edi, edx
  6333 00004F5B 31D2                <1> 		xor edx, edx
  6334 00004F5D 668B15[645D0000]    <1> 		mov dx, [resolutionx2]
  6335 00004F64 6681F90000          <1> 		cmp cx, 0
  6336 00004F69 740B                <1> 		je noswmsy
  6337 00004F6B 01D7                <1> swmsy:		add edi, edx
  6338 00004F6D 6649                <1> 		dec cx
  6339 00004F6F 6681F90000          <1> 		cmp cx, 0
  6340 00004F74 75F5                <1> 		jne swmsy
  6341 00004F76 8B06                <1> noswmsy:	mov eax, [esi]
  6342 00004F78 8B5E04              <1> 		mov ebx, [esi + 4]
  6343 00004F7B 8907                <1> 		mov [edi], eax
  6344 00004F7D 895F04              <1> 		mov [edi + 4], ebx
  6345 00004F80 8B4608              <1> 		mov eax, [esi + 8]
  6346 00004F83 8B5E0C              <1> 		mov ebx, [esi + 12]
  6347 00004F86 894708              <1> 		mov [edi + 8], eax
  6348 00004F89 895F0C              <1> 		mov [edi + 12], ebx
  6349 00004F8C 01D7                <1> 		add edi, edx
  6350 00004F8E 81C610000000        <1> 		add esi, 16
  6351 00004F94 81FE[00130000]      <1> 		cmp esi, mcolorend
  6352 00004F9A 72DA                <1> 		jb noswmsy
  6353                              <1> 		
  6354                              <1> switchmousepos2:
  6355 00004F9C BE[00120000]        <1> 		mov esi, mousecolorbuf
  6356 00004FA1 8B3D[C0840000]      <1> 		mov edi, [physbaseptr]
  6357 00004FA7 31D2                <1> 		xor edx, edx
  6358 00004FA9 31C9                <1> 		xor ecx, ecx
  6359 00004FAB 668B15[7A4B0000]    <1> 		mov dx, [mousecursorposition]
  6360 00004FB2 668B0D[7C4B0000]    <1> 		mov cx, [mousecursorposition + 2]
  6361 00004FB9 01D7                <1> 		add edi, edx
  6362 00004FBB 31D2                <1> 		xor edx, edx
  6363 00004FBD 668B15[645D0000]    <1> 		mov dx, [resolutionx2]
  6364 00004FC4 6681F90000          <1> 		cmp cx, 0
  6365 00004FC9 740B                <1> 		je noswmsy2
  6366 00004FCB 01D7                <1> swmsy2:		add edi, edx
  6367 00004FCD 6649                <1> 		dec cx
  6368 00004FCF 6681F90000          <1> 		cmp cx, 0
  6369 00004FD4 75F5                <1> 		jne swmsy2
  6370 00004FD6 8B07                <1> noswmsy2:	mov eax, [edi]
  6371 00004FD8 8B5F04              <1> 		mov ebx, [edi + 4]
  6372 00004FDB 8906                <1> 		mov [esi], eax
  6373 00004FDD 895E04              <1> 		mov [esi + 4], ebx
  6374 00004FE0 8B4708              <1> 		mov eax, [edi + 8]
  6375 00004FE3 8B5F0C              <1> 		mov ebx, [edi + 12]
  6376 00004FE6 894608              <1> 		mov [esi + 8], eax
  6377 00004FE9 895E0C              <1> 		mov [esi + 12], ebx
  6378 00004FEC 01D7                <1> 		add edi, edx
  6379 00004FEE 81C610000000        <1> 		add esi, 16
  6380 00004FF4 81FE[00130000]      <1> 		cmp esi, mcolorend
  6381 00004FFA 72DA                <1> 		jb noswmsy2
  6382 00004FFC C3                  <1> 		ret
  6383                              <1> 
  6384 00004FFD 00                  <1> pbutton db 0
  6385 00004FFE 00                  <1> pLBUTTON db 0
  6386 00004FFF 00                  <1> pRBUTTON db 0
  6387 00005000 00000000            <1> dragging dw 0,0
  6388 00005004 0000000000000000    <1> lastpos dw 0,0,0,0
  6389 0000500C 00000000            <1> colorbuf dw 0,0
  6390                              <1> 	
  6391                              <1> 	clickicon:
  6392 00005010 B001                <1> 		mov al, 1
  6393 00005012 A2[FD4F0000]        <1> 		mov [pbutton], al
  6394 00005017 A0[FE4F0000]        <1> 		mov al, [pLBUTTON]
  6395 0000501C 2205[AB470000]      <1> 		and al, [LBUTTON]
  6396 00005022 8A25[FF4F0000]      <1> 		mov ah, [pRBUTTON]
  6397 00005028 2225[AC470000]      <1> 		and ah, [RBUTTON]
  6398 0000502E 08E0                <1> 		or al, ah
  6399 00005030 3C00                <1> 		cmp al, 0
  6400 00005032 741B                <1> 		je nodragclick
  6401 00005034 813D[00500000]0100- <1> 		cmp dword [dragging], 1
  6402 0000503C 0000                <1>
  6403 0000503E 732D                <1> 		jae dragclick
  6404 00005040 C705[00500000]0100- <1> 		mov dword [dragging], 1
  6405 00005048 0000                <1>
  6406 0000504A E91E000000          <1> 		jmp dragclick
  6407                              <1> 	nodragclick:
  6408 0000504F C705[00500000]0000- <1> 		mov dword [dragging], 0
  6409 00005057 0000                <1>
  6410 00005059 A0[AB470000]        <1> 		mov al, [LBUTTON]
  6411 0000505E A2[FE4F0000]        <1> 		mov [pLBUTTON], al
  6412 00005063 A0[AC470000]        <1> 		mov al, [RBUTTON]
  6413 00005068 A2[FF4F0000]        <1> 		mov [pRBUTTON], al
  6414                              <1> 	dragclick:
  6415 0000506D 6631C0              <1> 		xor ax, ax
  6416 00005070 BE[00100000]        <1> 		mov esi, graphicstable
  6417 00005075 C705[6D600000]0000- <1> 		mov dword [codepointer], 0
  6418 0000507D 0000                <1>
  6419                              <1> 	clicon2:
  6420 0000507F 31D2                <1> 		xor edx, edx
  6421 00005081 31C9                <1> 		xor ecx, ecx
  6422 00005083 66813E0100          <1> 		cmp word [esi], 1
  6423 00005088 0F841B000000        <1> 		je near iconselect
  6424 0000508E 66813E0200          <1> 		cmp word [esi], 2
  6425 00005093 0F8472010000        <1> 		je near textselected
  6426 00005099 66813E0300          <1> 		cmp word [esi], 3
  6427 0000509E 0F84C7020000        <1> 		je near windowselect
  6428 000050A4 E90B040000          <1> 		jmp nexticonsel
  6429                              <1> 	iconselect:
  6430 000050A9 668B5606            <1> 		mov dx, [esi + 6]
  6431 000050AD 6689D0              <1> 		mov ax, dx
  6432 000050B0 668B4E08            <1> 		mov cx, [esi + 8]
  6433 000050B4 6689CB              <1> 		mov bx, cx
  6434 000050B7 6681C32000          <1> 		add bx, 32
  6435 000050BC 6601D0              <1> 		add ax, dx
  6436 000050BF 813D[00500000]0100- <1> 		cmp dword [dragging], 1
  6437 000050C7 0000                <1>
  6438 000050C9 746F                <1> 		je dragicon
  6439 000050CB 813D[00500000]0000- <1> 		cmp dword [dragging], 0
  6440 000050D3 0000                <1>
  6441 000050D5 7411                <1> 		je nodragiconcheck
  6442 000050D7 3935[00500000]      <1> 		cmp dword [dragging], esi
  6443 000050DD 0F85D1030000        <1> 		jne near nexticonsel
  6444 000050E3 E952000000          <1> 		jmp dragicon
  6445                              <1> 	nodragiconcheck:
  6446 000050E8 663905[7A4B0000]    <1> 		cmp [mousecursorposition], ax
  6447 000050EF 0F82BF030000        <1> 		jb near nexticonsel
  6448 000050F5 66054000            <1> 		add ax, 64
  6449 000050F9 663905[7A4B0000]    <1> 		cmp [mousecursorposition], ax
  6450 00005100 0F87AE030000        <1> 		ja near nexticonsel
  6451 00005106 6629D0              <1> 		sub ax, dx
  6452 00005109 66390D[7C4B0000]    <1> 		cmp [mousecursorposition + 2], cx
  6453 00005110 0F829E030000        <1> 		jb near nexticonsel
  6454 00005116 66391D[7C4B0000]    <1> 		cmp [mousecursorposition + 2], bx
  6455 0000511D 0F8791030000        <1> 		ja near nexticonsel
  6456 00005123 668B460A            <1> 		mov ax, [esi + 10]
  6457 00005127 66250100            <1> 		and ax, 1
  6458 0000512B 663D0100            <1> 		cmp ax, 1
  6459 0000512F 0F84B6000000        <1> 		je near unselecticon
  6460 00005135 E98D000000          <1> 		jmp nodragicon
  6461                              <1> 	dragicon:
  6462 0000513A 663905[764B0000]    <1> 		cmp [lastmouseposition], ax
  6463 00005141 0F826D030000        <1> 		jb near nexticonsel
  6464 00005147 66054000            <1> 		add ax, 64
  6465 0000514B 663905[764B0000]    <1> 		cmp [lastmouseposition], ax
  6466 00005152 0F875C030000        <1> 		ja near nexticonsel
  6467 00005158 6629D0              <1> 		sub ax, dx
  6468 0000515B 66390D[784B0000]    <1> 		cmp [lastmouseposition + 2], cx
  6469 00005162 0F824C030000        <1> 		jb near nexticonsel
  6470 00005168 66391D[784B0000]    <1> 		cmp [lastmouseposition + 2], bx
  6471 0000516F 0F873F030000        <1> 		ja near nexticonsel
  6472 00005175 668B460A            <1> 		mov ax, [esi + 10]
  6473 00005179 2410                <1> 		and al, 00010000b
  6474 0000517B 3C10                <1> 		cmp al, 00010000b
  6475 0000517D 7448                <1> 		je nodragicon
  6476 0000517F 8935[00500000]      <1> 		mov [dragging], esi
  6477 00005185 66D1E2              <1> 		shl dx, 1
  6478 00005188 662B15[764B0000]    <1> 		sub dx, [lastmouseposition]
  6479 0000518F 660315[7A4B0000]    <1> 		add dx, [mousecursorposition]
  6480 00005196 66D1EA              <1> 		shr dx, 1
  6481 00005199 66030D[7C4B0000]    <1> 		add cx, [mousecursorposition + 2]
  6482 000051A0 662B0D[784B0000]    <1> 		sub cx, [lastmouseposition + 2]
  6483 000051A7 663B15[645D0000]    <1> 		cmp dx, [resolutionx2]
  6484 000051AE 7607                <1> 		jbe chkyresdrgicn
  6485 000051B0 668B15[7A4B0000]    <1> 		mov dx, [mousecursorposition]
  6486                              <1> 	chkyresdrgicn:
  6487 000051B7 663B0D[605D0000]    <1> 		cmp cx, [resolutiony]
  6488 000051BE 7607                <1> 		jbe nodragicon
  6489 000051C0 668B0D[7C4B0000]    <1> 		mov cx, [mousecursorposition + 2]
  6490                              <1> 	nodragicon:
  6491 000051C7 66814E0A0100        <1> 		or word [esi + 10], 1
  6492 000051CD 8B5E0C              <1> 		mov ebx, [esi + 12]
  6493 000051D0 668B460A            <1> 		mov ax, [esi + 10]
  6494 000051D4 8B7602              <1> 		mov esi, [esi + 2]
  6495 000051D7 C705[6D600000]0000- <1> 		mov dword [codepointer], 0
  6496 000051DF 0000                <1>
  6497 000051E1 E8AE0A0000          <1> 		call showicon
  6498 000051E6 E9E2020000          <1> 		jmp doneiconsel
  6499                              <1> 	unselecticon:
  6500 000051EB 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  6501 000051F1 8B5E0C              <1> 		mov ebx, [esi + 12]
  6502 000051F4 668B460A            <1> 		mov ax, [esi + 10]
  6503 000051F8 8B7602              <1> 		mov esi, [esi + 2]
  6504 000051FB 891D[6D600000]      <1> 		mov [codepointer], ebx
  6505 00005201 E88E0A0000          <1> 		call showicon
  6506 00005206 E9C2020000          <1> 		jmp doneiconsel
  6507                              <1> 	textselected:
  6508 0000520B 8B5E02              <1> 		mov ebx, [esi + 2]
  6509 0000520E 668B5606            <1> 		mov dx, [esi + 6]
  6510 00005212 6689D0              <1> 		mov ax, dx
  6511 00005215 668B4E08            <1> 		mov cx, [esi + 8]
  6512                              <1> 	lengthtesttext:
  6513 00005219 803B00              <1> 		cmp byte [ebx], 0
  6514 0000521C 7407                <1> 		je donetesttextlength
  6515 0000521E 43                  <1> 		inc ebx
  6516 0000521F 66051000            <1> 		add ax, 16
  6517 00005223 EBF4                <1> 		jmp lengthtesttext
  6518                              <1> 	donetesttextlength:
  6519 00005225 6689CB              <1> 		mov bx, cx
  6520 00005228 6681C30F00          <1> 		add bx, 15
  6521 0000522D 813D[00500000]0100- <1> 		cmp dword [dragging], 1
  6522 00005235 0000                <1>
  6523 00005237 7468                <1> 		je dragtext
  6524 00005239 813D[00500000]0000- <1> 		cmp dword [dragging], 0
  6525 00005241 0000                <1>
  6526 00005243 7411                <1> 		je nodragtextcheck
  6527 00005245 3935[00500000]      <1> 		cmp dword [dragging], esi
  6528 0000524B 0F8563020000        <1> 		jne near nexticonsel
  6529 00005251 E94B000000          <1> 		jmp dragtext
  6530                              <1> 	nodragtextcheck:
  6531 00005256 663915[7A4B0000]    <1> 		cmp [mousecursorposition], dx
  6532 0000525D 0F8251020000        <1> 		jb near nexticonsel
  6533 00005263 663905[7A4B0000]    <1> 		cmp [mousecursorposition], ax
  6534 0000526A 0F8744020000        <1> 		ja near nexticonsel
  6535 00005270 66390D[7C4B0000]    <1> 		cmp [mousecursorposition + 2], cx
  6536 00005277 0F8237020000        <1> 		jb near nexticonsel
  6537 0000527D 66391D[7C4B0000]    <1> 		cmp [mousecursorposition + 2], bx
  6538 00005284 0F872A020000        <1> 		ja near nexticonsel
  6539 0000528A 668B460A            <1> 		mov ax, [esi + 10]
  6540 0000528E 66250100            <1> 		and ax, 1
  6541 00005292 663D0100            <1> 		cmp ax, 1
  6542 00005296 0F84AB000000        <1> 		je near unselecttext
  6543 0000529C E986000000          <1> 		jmp nodragtext
  6544                              <1> 	dragtext:
  6545 000052A1 663915[764B0000]    <1> 		cmp [lastmouseposition], dx
  6546 000052A8 0F8206020000        <1> 		jb near nexticonsel
  6547 000052AE 663905[764B0000]    <1> 		cmp [lastmouseposition], ax
  6548 000052B5 0F87F9010000        <1> 		ja near nexticonsel
  6549 000052BB 66390D[784B0000]    <1> 		cmp [lastmouseposition + 2], cx
  6550 000052C2 0F82EC010000        <1> 		jb near nexticonsel
  6551 000052C8 66391D[784B0000]    <1> 		cmp [lastmouseposition + 2], bx
  6552 000052CF 0F87DF010000        <1> 		ja near nexticonsel
  6553 000052D5 668B460A            <1> 		mov ax, [esi + 10]
  6554 000052D9 2410                <1> 		and al, 00010000b
  6555 000052DB 663D1000            <1> 		cmp ax, 00010000b
  6556 000052DF 0F8442000000        <1> 		je near nodragtext
  6557 000052E5 8935[00500000]      <1> 		mov [dragging], esi
  6558 000052EB 662B15[764B0000]    <1> 		sub dx, [lastmouseposition]
  6559 000052F2 660315[7A4B0000]    <1> 		add dx, [mousecursorposition]
  6560 000052F9 66030D[7C4B0000]    <1> 		add cx, [mousecursorposition + 2]
  6561 00005300 662B0D[784B0000]    <1> 		sub cx, [lastmouseposition + 2]
  6562 00005307 663B15[645D0000]    <1> 		cmp dx, [resolutionx2]
  6563 0000530E 7607                <1> 		jbe chkyresdrgtxt
  6564 00005310 668B15[7A4B0000]    <1> 		mov dx, [mousecursorposition]
  6565                              <1> 	chkyresdrgtxt:
  6566 00005317 663B0D[605D0000]    <1> 		cmp cx, [resolutiony]
  6567 0000531E 7607                <1> 		jbe nodragtext
  6568 00005320 668B0D[7C4B0000]    <1> 		mov cx, [mousecursorposition + 2]
  6569                              <1> 	nodragtext:
  6570 00005327 66814E0A0100        <1> 		or word [esi + 10], 1
  6571 0000532D 8B5E0C              <1> 		mov ebx, [esi + 12]
  6572 00005330 891D[6D600000]      <1> 		mov [codepointer], ebx
  6573 00005336 668B460A            <1> 		mov ax, [esi + 10]
  6574 0000533A 8B7602              <1> 		mov esi, [esi + 2]
  6575 0000533D E850050000          <1> 		call showstring
  6576 00005342 E986010000          <1> 		jmp doneiconsel
  6577                              <1> 	unselecttext:
  6578 00005347 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  6579 0000534D 8B5E0C              <1> 		mov ebx, [esi + 12]
  6580 00005350 668B460A            <1> 		mov ax, [esi + 10]
  6581 00005354 8B7602              <1> 		mov esi, [esi + 2]
  6582 00005357 C705[6D600000]0000- <1> 		mov dword [codepointer], 0
  6583 0000535F 0000                <1>
  6584 00005361 E82C050000          <1> 		call showstring
  6585 00005366 E962010000          <1> 		jmp doneiconsel
  6586                              <1> windowselect:
  6587 0000536B 8B7E02              <1> 		mov edi, [esi + 2]
  6588 0000536E 668B5606            <1> 		mov dx, [esi + 6]
  6589 00005372 6689D0              <1> 		mov ax, dx
  6590 00005375 668B4E08            <1> 		mov cx, [esi + 8]
  6591 00005379 6689CB              <1> 		mov bx, cx
  6592 0000537C 6681C31000          <1> 		add bx, 16
  6593 00005381 813D[00500000]0100- <1> 		cmp dword [dragging], 1
  6594 00005389 0000                <1>
  6595 0000538B 746D                <1> 		je dragwin
  6596 0000538D 813D[00500000]0000- <1> 		cmp dword [dragging], 0
  6597 00005395 0000                <1>
  6598 00005397 7411                <1> 		je nodragwincheck
  6599 00005399 3935[00500000]      <1> 		cmp dword [dragging], esi
  6600 0000539F 0F850F010000        <1> 		jne near nexticonsel
  6601 000053A5 E950000000          <1> 		jmp dragwin
  6602                              <1> 	nodragwincheck:
  6603 000053AA 663905[7A4B0000]    <1> 		cmp [mousecursorposition], ax
  6604 000053B1 0F82FD000000        <1> 		jb near nexticonsel
  6605 000053B7 660307              <1> 		add ax, [edi]
  6606 000053BA 660307              <1> 		add ax, [edi]
  6607 000053BD 663905[7A4B0000]    <1> 		cmp [mousecursorposition], ax
  6608 000053C4 0F87EA000000        <1> 		ja near nexticonsel
  6609 000053CA 66390D[7C4B0000]    <1> 		cmp [mousecursorposition + 2], cx
  6610 000053D1 0F82DD000000        <1> 		jb near nexticonsel
  6611 000053D7 66391D[7C4B0000]    <1> 		cmp [mousecursorposition + 2], bx
  6612 000053DE 0F87D0000000        <1> 		ja near nexticonsel
  6613 000053E4 662D1400            <1> 		sub ax, 20
  6614 000053E8 663905[7A4B0000]    <1> 		cmp [mousecursorposition], ax
  6615 000053EF 0F8795000000        <1> 		ja near killwin
  6616 000053F5 E97C000000          <1> 		jmp nodragwin
  6617                              <1> 	dragwin:
  6618 000053FA 663905[764B0000]    <1> 		cmp [lastmouseposition], ax
  6619 00005401 0F82AD000000        <1> 		jb near nexticonsel
  6620 00005407 660307              <1> 		add ax, [edi]
  6621 0000540A 660307              <1> 		add ax, [edi]
  6622 0000540D 663905[764B0000]    <1> 		cmp [lastmouseposition], ax
  6623 00005414 0F879A000000        <1> 		ja near nexticonsel
  6624 0000541A 66390D[784B0000]    <1> 		cmp [lastmouseposition + 2], cx
  6625 00005421 0F828D000000        <1> 		jb near nexticonsel
  6626 00005427 66391D[784B0000]    <1> 		cmp [lastmouseposition + 2], bx
  6627 0000542E 0F8780000000        <1> 		ja near nexticonsel
  6628 00005434 8935[00500000]      <1> 		mov [dragging], esi
  6629 0000543A 662B15[764B0000]    <1> 		sub dx, [lastmouseposition]
  6630 00005441 660315[7A4B0000]    <1> 		add dx, [mousecursorposition]
  6631 00005448 66030D[7C4B0000]    <1> 		add cx, [mousecursorposition + 2]
  6632 0000544F 662B0D[784B0000]    <1> 		sub cx, [lastmouseposition + 2]
  6633 00005456 663B15[645D0000]    <1> 		cmp dx, [resolutionx2]
  6634 0000545D 7607                <1> 		jbe chkyresdrgwin
  6635 0000545F 668B15[7A4B0000]    <1> 		mov dx, [mousecursorposition]
  6636                              <1> 	chkyresdrgwin:
  6637 00005466 663B0D[605D0000]    <1> 		cmp cx, [resolutiony]
  6638 0000546D 7607                <1> 		jbe nodragwin
  6639 0000546F 668B0D[7C4B0000]    <1> 		mov cx, [mousecursorposition + 2]
  6640                              <1> 	nodragwin:
  6641 00005476 8B5E0C              <1> 		mov ebx, [esi + 12]
  6642 00005479 668B460A            <1> 		mov ax, [esi + 10]
  6643 0000547D 8B7602              <1> 		mov esi, [esi + 2]
  6644 00005480 E875040000          <1> 		call showwindow
  6645 00005485 E943000000          <1> 		jmp doneiconsel
  6646                              <1> 	killwin:
  6647 0000548A 66C7060000          <1> 		mov word [esi], 0
  6648 0000548F C705[25040000]0000- <1> 		mov dword [user2codepoint], 0
  6649 00005497 0000                <1>
  6650 00005499 C605[EC270000]00    <1> 		mov byte [termguion], 0
  6651 000054A0 E8CAF8FFFF          <1> 		call guiclear
  6652 000054A5 E8A7000000          <1> 		call reloadallgraphics
  6653 000054AA E91DFAFFFF          <1> 		jmp guistart
  6654 000054AF E93A000000          <1> 		jmp doneiconsel2
  6655                              <1> 	nexticonsel:
  6656 000054B4 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  6657 000054BA 81C610000000        <1> 		add esi, 16
  6658 000054C0 81FE[00120000]      <1> 		cmp esi, graphicstableend
  6659 000054C6 7305                <1> 		jae doneiconsel
  6660 000054C8 E9B2FBFFFF          <1> 		jmp clicon2
  6661                              <1> 	doneiconsel:
  6662 000054CD 813D[00500000]0100- <1> 		cmp dword [dragging], 1
  6663 000054D5 0000                <1>
  6664 000054D7 7315                <1> 		jae doneiconsel2
  6665 000054D9 813D[6D600000]0000- <1> 		cmp dword [codepointer], 0
  6666 000054E1 0000                <1>
  6667 000054E3 7409                <1> 		je doneiconsel2
  6668 000054E5 8B1D[6D600000]      <1> 		mov ebx, [codepointer]
  6669 000054EB FFD3                <1> 		call ebx 
  6670 000054ED C3                  <1> 		ret
  6671                              <1> 	doneiconsel2:
  6672 000054EE A0[AB470000]        <1> 		mov al, [LBUTTON]
  6673 000054F3 A2[FE4F0000]        <1> 		mov [pLBUTTON], al
  6674 000054F8 A0[AC470000]        <1> 		mov al, [RBUTTON]
  6675 000054FD A2[FF4F0000]        <1> 		mov [pRBUTTON], al
  6676 00005502 66813D[00500000]01- <1> 		cmp word [dragging], 1
  6677 0000550A 00                  <1>
  6678 0000550B 0F860A000000        <1> 		jbe near noreloadgraphicsclick
  6679 00005511 E8CCF9FFFF          <1> call clearmousecursor
  6680 00005516 E836000000          <1> call reloadallgraphics
  6681                              <1> noreloadgraphicsclick:
  6682 0000551B 31C9                <1> 		xor ecx, ecx
  6683 0000551D 31D2                <1> 		xor edx, edx
  6684 0000551F 30E4                <1> 		xor ah, ah
  6685 00005521 B0FE                <1> 		mov al, 254
  6686 00005523 668B15[7A4B0000]    <1> 		mov dx, [mousecursorposition]
  6687 0000552A 668B0D[7C4B0000]    <1> 		mov cx, [mousecursorposition + 2]
  6688 00005531 66BBE738            <1> 		mov bx, 0011100011100111b
  6689 00005535 C605[DE4E0000]01    <1> 		mov byte [showcursorfonton], 1
  6690 0000553C E833080000          <1> 		call showfontvesa
  6691 00005541 C605[DE4E0000]00    <1> 		mov byte [showcursorfonton], 0
  6692 00005548 C3                  <1> 		ret
  6693 00005549 00000000            <1> lastdrag dw 0,0
  6694 0000554D 00000000            <1> grpctblpos dw 0,0
  6695                              <1> 
  6696                              <1> reloadallgraphics:
  6697 00005551 BF[00100000]        <1> 		mov edi, graphicstable
  6698                              <1> reloadgraphicsloop:
  6699 00005556 8B7702              <1> 		mov esi, [edi + 2]
  6700 00005559 668B5706            <1> 		mov dx, [edi + 6]
  6701 0000555D 668B4F08            <1> 		mov cx, [edi + 8]
  6702 00005561 668B07              <1> 		mov ax, [edi]
  6703 00005564 668B5F0A            <1> 		mov bx, [edi + 10]
  6704 00005568 893D[4D550000]      <1> 		mov [grpctblpos], edi
  6705 0000556E 3B3D[00500000]      <1> 		cmp edi, [dragging]
  6706 00005574 741E                <1> 		je loadedgraphic
  6707 00005576 663D0100            <1> 		cmp ax, 1
  6708 0000557A 0F8431000000        <1> 		je near icongraphic
  6709 00005580 663D0200            <1> 		cmp ax, 2
  6710 00005584 0F8437000000        <1> 		je near stringgraphic
  6711 0000558A 663D0300            <1> 		cmp ax, 3
  6712 0000558E 0F8416000000        <1> 		je near windowgraphic
  6713 00005594 8B3D[4D550000]      <1> loadedgraphic:  mov edi, [grpctblpos]
  6714 0000559A 81C710000000        <1> 		add edi, 16
  6715 000055A0 81FF[00120000]      <1> 		cmp edi, graphicstableend
  6716 000055A6 7329                <1> 		jae donereloadgraphics
  6717 000055A8 EBAC                <1> 		jmp reloadgraphicsloop
  6718 000055AA E8ED030000          <1> windowgraphic:	call showwindow2
  6719 000055AF EBE3                <1> 		jmp loadedgraphic
  6720 000055B1 80E301              <1> icongraphic:	and bl, 1
  6721 000055B4 881D[71600000]      <1> 		mov [iconselected], bl
  6722 000055BA E8E8060000          <1> 		call showicon2
  6723 000055BF EBD3                <1> 		jmp loadedgraphic
  6724 000055C1 80E301              <1> stringgraphic:  and bl, 1
  6725 000055C4 881D[E04E0000]      <1> 		mov [mouseselecton], bl
  6726 000055CA E8D6020000          <1> 		call showstring2
  6727 000055CF EBC3                <1> 		jmp loadedgraphic
  6728                              <1> donereloadgraphics:
  6729 000055D1 8B3D[00500000]      <1> 		mov edi, [dragging]
  6730 000055D7 81FF[00100000]      <1> 		cmp edi, graphicstable
  6731 000055DD 7226                <1> 		jb notcorrectdrag
  6732 000055DF 668B07              <1> 		mov ax, [edi]
  6733 000055E2 8B7702              <1> 		mov esi, [edi + 2]
  6734 000055E5 668B5706            <1> 		mov dx, [edi + 6]
  6735 000055E9 668B4F08            <1> 		mov cx, [edi + 8]
  6736 000055ED 668B5F0A            <1> 		mov bx, [edi + 10]
  6737 000055F1 663D0100            <1> 		cmp ax, 1
  6738 000055F5 750F                <1> 		jne noticondragging
  6739 000055F7 80E301              <1> 		and bl, 1
  6740 000055FA 881D[71600000]      <1> 		mov [iconselected], bl
  6741 00005600 E8A2060000          <1> 		call showicon2
  6742                              <1> notcorrectdrag:
  6743 00005605 C3                  <1> 		ret
  6744                              <1> 
  6745                              <1> 	noticondragging:
  6746 00005606 663D0200            <1> 		cmp ax, 2
  6747 0000560A 75F9                <1> 		jne notcorrectdrag
  6748 0000560C 80E301              <1> 		and bl, 1
  6749 0000560F 881D[E04E0000]      <1> 		mov [mouseselecton], bl
  6750 00005615 E88B020000          <1> 		call showstring2
  6751 0000561A EBE9                <1> 		jmp notcorrectdrag
  6752                              <1> 
  6753 0000561C 00<rept>            <1> grphbuf times 16 db 0
  6754                              <1> 	graphicsadd:
  6755 0000562C BF[00100000]        <1> 		mov edi, graphicstable
  6756                              <1> 	shwgrph1:
  6757 00005631 397702              <1> 		cmp dword [edi + 2], esi
  6758 00005634 7414                <1> 		je showgraphicsreplace2
  6759 00005636 81C710000000        <1> 		add edi, 16
  6760 0000563C 81FF[00120000]      <1> 		cmp edi, graphicstableend
  6761 00005642 0F832F020000        <1> 		jae near showgraphicsnew
  6762 00005648 EBE7                <1> 		jmp shwgrph1
  6763                              <1> 	showgraphicsreplace2:
  6764 0000564A 8935[1E560000]      <1> 		mov [grphbuf + 2], esi
  6765 00005650 668915[22560000]    <1> 		mov [grphbuf + 6], dx
  6766 00005657 66890D[24560000]    <1> 		mov [grphbuf + 8], cx
  6767 0000565E 891D[28560000]      <1> 		mov [grphbuf + 12], ebx
  6768 00005664 30FF                <1> 		xor bh, bh
  6769 00005666 88E3                <1> 		mov bl, ah
  6770 00005668 30E4                <1> 		xor ah, ah
  6771 0000566A 66A3[26560000]      <1> 		mov [grphbuf + 10], ax	
  6772 00005670 66891D[1C560000]    <1> 		mov [grphbuf], bx
  6773 00005677 66A1[1C560000]      <1> 		mov ax, [grphbuf]
  6774 0000567D 663D0100            <1> 		cmp ax, 1
  6775 00005681 0F8419000000        <1> 		je near replaceicon
  6776 00005687 663D0200            <1> 		cmp ax, 2
  6777 0000568B 0F8493000000        <1> 		je near replacestring
  6778 00005691 663D0300            <1> 		cmp ax, 3
  6779 00005695 0F840F010000        <1> 		je near replacewindow
  6780 0000569B E9B4010000          <1> 		jmp showgraphicsreplace
  6781                              <1> 	replaceicon:
  6782 000056A0 893D[04500000]      <1> 		mov [lastpos], edi
  6783 000056A6 8935[08500000]      <1> 		mov [lastpos + 4], esi
  6784 000056AC 8B7702              <1> 		mov esi, [edi + 2]
  6785 000056AF 668B5F0C            <1> 		mov bx, [edi + 12]
  6786 000056B3 668B5706            <1> 		mov dx, [edi + 6]
  6787 000056B7 668B4F08            <1> 		mov cx, [edi + 8]
  6788 000056BB 668B06              <1> 		mov ax, [esi]
  6789 000056BE 66A3[0C500000]      <1> 		mov [colorbuf], ax
  6790 000056C4 66A1[AC4D0000]      <1> 		mov ax, [background]
  6791 000056CA 668906              <1> 		mov [esi], ax
  6792 000056CD 8B5F0C              <1> 		mov ebx, [edi + 12]
  6793 000056D0 668B470A            <1> 		mov ax, [edi + 10]
  6794 000056D4 2401                <1> 		and al, 1
  6795 000056D6 A2[71600000]        <1> 		mov [iconselected], al
  6796 000056DB 668B470A            <1> 		mov ax, [edi + 10]
  6797 000056DF E8C3050000          <1> 		call showicon2
  6798 000056E4 8B3D[04500000]      <1> 		mov edi, [lastpos]
  6799 000056EA 8B7702              <1> 		mov esi, [edi + 2]
  6800 000056ED 66A1[0C500000]      <1> 		mov ax, [colorbuf]
  6801 000056F3 668906              <1> 		mov [esi], ax
  6802 000056F6 8B35[08500000]      <1> 		mov esi, [lastpos + 4]
  6803 000056FC 668B15[22560000]    <1> 		mov dx, [grphbuf + 6]
  6804 00005703 668B0D[24560000]    <1> 		mov cx, [grphbuf + 8]
  6805 0000570A 668B1D[1C560000]    <1> 		mov bx, [grphbuf]
  6806 00005711 66A1[26560000]      <1> 		mov ax, [grphbuf + 10]
  6807 00005717 88DC                <1> 		mov ah, bl
  6808 00005719 8B1D[28560000]      <1> 		mov ebx, [grphbuf + 12]
  6809 0000571F E930010000          <1> 		jmp showgraphicsreplace
  6810                              <1> 	replacestring:
  6811 00005724 893D[04500000]      <1> 		mov [lastpos], edi
  6812 0000572A 8935[08500000]      <1> 		mov [lastpos + 4], esi
  6813 00005730 8B5F0C              <1> 		mov ebx, [edi + 12]
  6814 00005733 8B7702              <1> 		mov esi, [edi + 2]
  6815 00005736 668B5706            <1> 		mov dx, [edi + 6]
  6816 0000573A 668B4F08            <1> 		mov cx, [edi + 8]
  6817 0000573E 66A1[E1580000]      <1> 		mov ax, [colorfont2]
  6818 00005744 66A3[0C500000]      <1> 		mov [colorbuf], ax
  6819 0000574A 66A1[AC4D0000]      <1> 		mov ax, [background]
  6820 00005750 66A3[E1580000]      <1> 		mov [colorfont2], ax		
  6821 00005756 8B5F0C              <1> 		mov ebx, [edi + 12]
  6822 00005759 668B470A            <1> 		mov ax, [edi + 10]
  6823 0000575D 2401                <1> 		and al, 1
  6824 0000575F A2[E04E0000]        <1> 		mov [mouseselecton], al
  6825 00005764 668B470A            <1> 		mov ax, [edi + 10]
  6826 00005768 E838010000          <1> 		call showstring2
  6827 0000576D 66A1[0C500000]      <1> 		mov ax, [colorbuf]
  6828 00005773 66A3[E1580000]      <1> 		mov [colorfont2], ax
  6829 00005779 8B3D[04500000]      <1> 		mov edi, [lastpos]
  6830 0000577F 8B7702              <1> 		mov esi, [edi + 2]
  6831 00005782 668B15[22560000]    <1> 		mov dx, [grphbuf + 6]
  6832 00005789 668B0D[24560000]    <1> 		mov cx, [grphbuf + 8]
  6833 00005790 668B1D[1C560000]    <1> 		mov bx, [grphbuf]
  6834 00005797 66A1[26560000]      <1> 		mov ax, [grphbuf + 10]
  6835 0000579D 88DC                <1> 		mov ah, bl
  6836 0000579F 8B1D[28560000]      <1> 		mov ebx, [grphbuf + 12]
  6837 000057A5 E9AA000000          <1> 		jmp showgraphicsreplace
  6838                              <1> 	replacewindow:
  6839 000057AA 893D[04500000]      <1> 		mov [lastpos], edi
  6840 000057B0 8935[08500000]      <1> 		mov [lastpos + 4], esi
  6841 000057B6 8B7702              <1> 		mov esi, [edi + 2]
  6842 000057B9 8B3D[F0580000]      <1> 		mov edi, [windowbufloc]
  6843 000057BF 31D2                <1> 		xor edx, edx
  6844 000057C1 668B15[645D0000]    <1> 		mov dx, [resolutionx2]
  6845 000057C8 C1E204              <1> 		shl edx, 4
  6846 000057CB 29D7                <1> 		sub edi, edx
  6847 000057CD 31D2                <1> 		xor edx, edx
  6848 000057CF 668B16              <1> 		mov dx, [esi]
  6849 000057D2 660316              <1> 		add dx, [esi]
  6850 000057D5 668B4E02            <1> 		mov cx, [esi + 2]
  6851 000057D9 6681C11000          <1> 		add cx, 16
  6852 000057DE 66A1[AC4D0000]      <1> 		mov ax, [background]
  6853                              <1> 	clearwindow:
  6854 000057E4 668907              <1> 		mov [edi], ax
  6855 000057E7 81C702000000        <1> 		add edi, 2
  6856 000057ED 81EA02000000        <1> 		sub edx, 2
  6857 000057F3 81FA00000000        <1> 		cmp edx, 0
  6858 000057F9 75E9                <1> 		jne clearwindow
  6859 000057FB 6649                <1> 		dec cx
  6860 000057FD 668B15[645D0000]    <1> 		mov dx, [resolutionx2]
  6861 00005804 662B16              <1> 		sub dx, [esi]
  6862 00005807 662B16              <1> 		sub dx, [esi]
  6863 0000580A 01D7                <1> 		add edi, edx
  6864 0000580C 668B16              <1> 		mov dx, [esi]
  6865 0000580F 660316              <1> 		add dx, [esi]
  6866 00005812 6681F90000          <1> 		cmp cx, 0
  6867 00005817 75CB                <1> 		jne clearwindow
  6868 00005819 C605[ED270000]00    <1> 		mov byte [termcopyon], 0
  6869 00005820 8B3D[04500000]      <1> 		mov edi, [lastpos]
  6870 00005826 8B35[1E560000]      <1> 		mov esi, [grphbuf + 2]
  6871 0000582C 668B15[22560000]    <1> 		mov dx, [grphbuf + 6]
  6872 00005833 668B0D[24560000]    <1> 		mov cx, [grphbuf + 8]
  6873 0000583A 668B1D[1C560000]    <1> 		mov bx, [grphbuf]
  6874 00005841 66A1[26560000]      <1> 		mov ax, [grphbuf + 10]
  6875 00005847 88DC                <1> 		mov ah, bl
  6876 00005849 8B1D[28560000]      <1> 		mov ebx, [grphbuf + 12]
  6877 0000584F E900000000          <1> 		jmp showgraphicsreplace
  6878                              <1> 	showgraphicsreplace:
  6879 00005854 897702              <1> 		mov [edi + 2], esi
  6880 00005857 66895706            <1> 		mov [edi + 6], dx
  6881 0000585B 66894F08            <1> 		mov [edi + 8], cx
  6882 0000585F 895F0C              <1> 		mov [edi + 12], ebx
  6883 00005862 30FF                <1> 		xor bh, bh
  6884 00005864 88E3                <1> 		mov bl, ah
  6885 00005866 30E4                <1> 		xor ah, ah
  6886 00005868 6689470A            <1> 		mov [edi + 10], ax
  6887 0000586C 66891F              <1> 		mov [edi], bx
  6888 0000586F 8B5F0C              <1> 		mov ebx, [edi + 12]
  6889 00005872 668B470A            <1> 		mov ax, [edi + 10]
  6890 00005876 C3                  <1> 		ret
  6891                              <1> 	showgraphicsnew:
  6892 00005877 BF[00100000]        <1> 		mov edi, graphicstable
  6893                              <1> 	shwgrph2:
  6894 0000587C 66813F0000          <1> 		cmp word [edi], 0
  6895 00005881 74D1                <1> 		je showgraphicsreplace
  6896 00005883 81C710000000        <1> 		add edi, 16
  6897 00005889 81FF[00120000]      <1> 		cmp edi, graphicstableend
  6898 0000588F 72EB                <1> 		jb shwgrph2
  6899                              <1> 	showgraphicsdone:
  6900 00005891 C3                  <1> 		ret
  6901                              <1> 
  6902                              <1> 	showstring:
  6903 00005892 A2[E04E0000]        <1> 		mov [mouseselecton], al
  6904 00005897 8025[E04E0000]01    <1> 		and byte [mouseselecton], 1
  6905 0000589E B402                <1> 		mov ah, 2
  6906 000058A0 E887FDFFFF          <1> 		call graphicsadd
  6907                              <1> 	showstring2:
  6908 000058A5 30E4                <1> 		xor ah, ah
  6909 000058A7 8A06                <1> 		mov al, [esi]
  6910 000058A9 3C00                <1> 		cmp al, 0
  6911 000058AB 742C                <1> 		je doneshowstring
  6912 000058AD 46                  <1> 		inc esi
  6913 000058AE 3CFF                <1> 		cmp al, 255
  6914 000058B0 74F3                <1> 		je showstring2
  6915 000058B2 8935[1A600000]      <1> 		mov [showstringesi], esi
  6916 000058B8 668B1D[E1580000]    <1> 		mov bx, [colorfont2]
  6917 000058BF E8B0040000          <1> 		call showfontvesa
  6918 000058C4 3C0D                <1> 		cmp al, 13
  6919 000058C6 7409                <1> 		je noproceedshst
  6920 000058C8 3C0A                <1> 		cmp al, 10
  6921 000058CA 7405                <1> 		je noproceedshst
  6922 000058CC 6681C20800          <1> 		add dx, 8
  6923                              <1> 		noproceedshst
  6924 000058D1 8B35[1A600000]      <1> 		mov esi, [showstringesi]
  6925 000058D7 EBCC                <1> 		jmp showstring2
  6926                              <1> 	doneshowstring:
  6927 000058D9 C605[E04E0000]00    <1> 		mov byte [mouseselecton], 0
  6928 000058E0 C3                  <1> 		ret
  6929                              <1> 
  6930 000058E1 FFFF                <1> colorfont2 dw 0xFFFF
  6931 000058E3 00                  <1> colorcache db 0
  6932 000058E4 0000                <1> winvcopystx dw 0
  6933 000058E6 0000                <1> winvcopysty dw 0
  6934 000058E8 0000                <1> winvcopydx dw 0
  6935 000058EA 0000                <1> winvcopycx dw 0
  6936 000058EC FFFF0000            <1> windowcolor dw 0xFFFF,0x0
  6937 000058F0 00000000            <1> windowbufloc: dw 0,0
  6938 000058F4 0000                <1> termcol dw 0
  6939 000058F6 00000000            <1> wincopyendpos dd 0
  6940                              <1> 
  6941                              <1> 	showwindow:	;;windowstuff in si, position in (dx, cx), nothing in ax, code in bx
  6942 000058FA C605[EC270000]01    <1> 		mov byte [termguion], 1
  6943 00005901 6681C11000          <1> 		add cx, 16
  6944 00005906 668915[E4580000]    <1> 		mov [winvcopystx], dx
  6945 0000590D 66890D[E6580000]    <1> 		mov [winvcopysty], cx
  6946 00005914 668B16              <1> 		mov dx, [esi]
  6947 00005917 668B4E02            <1> 		mov cx, [esi + 2]
  6948 0000591B 31C0                <1> 		xor eax, eax
  6949 0000591D 31DB                <1> 		xor ebx, ebx
  6950 0000591F 6689D0              <1> 		mov ax, dx
  6951 00005922 6689CB              <1> 		mov bx, cx
  6952 00005925 66C1E803            <1> 		shr ax, 3
  6953 00005929 66C1EB04            <1> 		shr bx, 4
  6954 0000592D 66A3[F4580000]      <1> 		mov [termcol], ax
  6955 00005933 A2[DD270000]        <1> 		mov [charxy], al
  6956 00005938 881D[DE270000]      <1> 		mov [charxy + 1], bl
  6957 0000593E BF[8F1D0000]        <1> 		mov edi, videobuf
  6958 00005943 81FB00000000        <1> 		cmp ebx, 0
  6959 00005949 0F8426030000        <1> 		je near donewincopynow	;AAAAAAAAA!!!!!
  6960                              <1> 	findendposwin:
  6961 0000594F 01C7                <1> 		add edi, eax
  6962 00005951 01C7                <1> 		add edi, eax
  6963 00005953 4B                  <1> 		dec ebx
  6964 00005954 81FB00000000        <1> 		cmp ebx, 0
  6965 0000595A 77F3                <1> 		ja findendposwin
  6966 0000595C 893D[F6580000]      <1> 		mov [wincopyendpos], edi
  6967 00005962 31FF                <1> 		xor edi, edi
  6968 00005964 6631C0              <1> 		xor ax, ax
  6969 00005967 6631DB              <1> 		xor bx, bx
  6970 0000596A 6601D2              <1> 		add dx, dx
  6971 0000596D 668915[E8580000]    <1> 		mov [winvcopydx], dx
  6972 00005974 66890D[EA580000]    <1> 		mov [winvcopycx], cx
  6973 0000597B 668B0D[E6580000]    <1> 		mov cx, [winvcopysty]
  6974 00005982 6681E91000          <1> 		sub cx, 16
  6975 00005987 668B15[E4580000]    <1> 		mov dx, [winvcopystx]
  6976 0000598E C605[ED270000]00    <1> 		mov byte [termcopyon], 0
  6977 00005995 B403                <1> 		mov ah, 3
  6978 00005997 E890FCFFFF          <1> 		call graphicsadd
  6979                              <1> 	showwindow2:
  6980 0000599C 6681C11000          <1> 		add cx, 16
  6981 000059A1 668915[E4580000]    <1> 		mov [winvcopystx], dx
  6982 000059A8 66890D[E6580000]    <1> 		mov [winvcopysty], cx
  6983 000059AF 668B16              <1> 		mov dx, [esi]
  6984 000059B2 668B4E02            <1> 		mov cx, [esi + 2]
  6985 000059B6 6601D2              <1> 		add dx, dx
  6986 000059B9 668915[E8580000]    <1> 		mov [winvcopydx], dx
  6987 000059C0 66890D[EA580000]    <1> 		mov [winvcopycx], cx
  6988 000059C7 8B3D[F0580000]      <1> 		mov edi, [windowbufloc]
  6989 000059CD 31D2                <1> 		xor edx, edx
  6990 000059CF 668B15[645D0000]    <1> 		mov dx, [resolutionx2]
  6991 000059D6 C1E204              <1> 		shl edx, 4
  6992 000059D9 29D7                <1> 		sub edi, edx
  6993 000059DB 803D[ED270000]00    <1> 		cmp byte [termcopyon], 0
  6994 000059E2 7538                <1> 		jne nocleartitlebarpos
  6995 000059E4 8B3D[C0840000]      <1> 		mov edi, [physbaseptr]
  6996 000059EA 31D2                <1> 		xor edx, edx
  6997 000059EC 668B15[E4580000]    <1> 		mov dx, [winvcopystx]
  6998 000059F3 01D7                <1> 		add edi, edx
  6999 000059F5 668B0D[E6580000]    <1> 		mov cx, [winvcopysty]
  7000 000059FC 6681E91000          <1> 		sub cx, 16
  7001 00005A01 6681F90000          <1> 		cmp cx, 0
  7002 00005A06 7414                <1> 		je nocleartitlebarpos
  7003                              <1> 	cleartitlebarpos:
  7004 00005A08 31D2                <1> 		xor edx, edx
  7005 00005A0A 668B15[645D0000]    <1> 		mov dx, [resolutionx2]
  7006 00005A11 01D7                <1> 		add edi, edx
  7007 00005A13 6649                <1> 		dec cx
  7008 00005A15 6681F90000          <1> 		cmp cx, 0
  7009 00005A1A 75EC                <1> 		jne cleartitlebarpos
  7010                              <1> 	nocleartitlebarpos:
  7011 00005A1C 66B91000            <1> 		mov cx, 16
  7012 00005A20 668B15[E8580000]    <1> 		mov dx, [winvcopydx]
  7013 00005A27 6681F90000          <1> 		cmp cx, 0
  7014 00005A2C 0F8448000000        <1> 		je near canceltitlebarput
  7015 00005A32 6681FA0000          <1> 		cmp dx, 0
  7016 00005A37 0F843D000000        <1> 		je near canceltitlebarput
  7017                              <1> 	titlebarput:
  7018 00005A3D 66A1[EC580000]      <1> 		mov ax, [windowcolor]
  7019 00005A43 668907              <1> 		mov [edi], ax
  7020 00005A46 6681EA0200          <1> 		sub dx, 2
  7021 00005A4B 81C702000000        <1> 		add edi, 2
  7022 00005A51 6681FA0000          <1> 		cmp dx, 0
  7023 00005A56 75E5                <1> 		jne titlebarput
  7024 00005A58 31D2                <1> 		xor edx, edx
  7025 00005A5A 668B15[645D0000]    <1> 		mov dx, [resolutionx2]
  7026 00005A61 6649                <1> 		dec cx
  7027 00005A63 662B15[E8580000]    <1> 		sub dx, [winvcopydx]
  7028 00005A6A 01D7                <1> 		add edi, edx
  7029 00005A6C 668B15[E8580000]    <1> 		mov dx, [winvcopydx]
  7030 00005A73 6681F90000          <1> 		cmp cx, 0
  7031 00005A78 75C3                <1> 		jne titlebarput
  7032                              <1> 	canceltitlebarput:
  7033 00005A7A 893D[F0580000]      <1> 		mov [windowbufloc], edi
  7034 00005A80 803D[ED270000]02    <1> 		cmp byte [termcopyon], 2
  7035 00005A87 0F8461000000        <1> 		je near winvcpst
  7036 00005A8D 6631C0              <1> 		xor ax, ax
  7037 00005A90 81C604000000        <1> 		add esi, 4
  7038 00005A96 668B15[E4580000]    <1> 		mov dx, [winvcopystx]
  7039 00005A9D 668B0D[E6580000]    <1> 		mov cx, [winvcopysty]
  7040 00005AA4 6681E91000          <1> 		sub cx, 16
  7041 00005AA9 6631DB              <1> 		xor bx, bx
  7042 00005AAC C605[E04E0000]01    <1> 		mov byte [mouseselecton], 1
  7043 00005AB3 E8EDFDFFFF          <1> 		call showstring2
  7044 00005AB8 B058                <1> 		mov al, "X"
  7045 00005ABA 30E4                <1> 		xor ah, ah
  7046 00005ABC 668B1D[E1580000]    <1> 		mov bx, [colorfont2]
  7047 00005AC3 668B15[E4580000]    <1> 		mov dx, [winvcopystx]
  7048 00005ACA 668B0D[E6580000]    <1> 		mov cx, [winvcopysty]
  7049 00005AD1 6681E91000          <1> 		sub cx, 16
  7050 00005AD6 6681EA1400          <1> 		sub dx, 20
  7051 00005ADB 660315[E8580000]    <1> 		add dx, [winvcopydx]
  7052 00005AE2 C605[E04E0000]01    <1> 		mov byte [mouseselecton], 1
  7053 00005AE9 E886020000          <1> 		call showfontvesa
  7054                              <1> 	winvcpst:
  7055 00005AEE 8B3D[F0580000]      <1> 		mov edi, [windowbufloc]
  7056 00005AF4 E94E000000          <1> 		jmp windowvideocopyset
  7057                              <1> 
  7058                              <1> 	windowvideocopy:
  7059 00005AF9 8B3D[F0580000]      <1> 		mov edi, [windowbufloc]
  7060 00005AFF 3B3D[C0840000]      <1> 		cmp edi, [physbaseptr]
  7061 00005B05 0F833C000000        <1> 		jae near windowvideocopyset
  7062 00005B0B 31C9                <1> 		xor ecx, ecx
  7063 00005B0D 31D2                <1> 		xor edx, edx
  7064 00005B0F 668B15[E4580000]    <1> 		mov dx, [winvcopystx]
  7065 00005B16 668B0D[E6580000]    <1> 		mov cx, [winvcopysty]
  7066 00005B1D 8B3D[C0840000]      <1> 		mov edi, [physbaseptr]
  7067 00005B23 01D7                <1> 		add edi, edx
  7068 00005B25 81F900000000        <1> 		cmp ecx, 0
  7069 00005B2B 741A                <1> 		je windowvideocopyset
  7070                              <1> 	yrescopylp:
  7071 00005B2D 31D2                <1> 		xor edx, edx
  7072 00005B2F 668B15[645D0000]    <1> 		mov dx, [resolutionx2]
  7073 00005B36 01D7                <1> 		add edi, edx
  7074 00005B38 6649                <1> 		dec cx
  7075 00005B3A 6681F90000          <1> 		cmp cx, 0
  7076 00005B3F 75EC                <1> 		jne yrescopylp
  7077 00005B41 893D[F0580000]      <1> 		mov [windowbufloc], edi
  7078                              <1> 	windowvideocopyset:
  7079 00005B47 6631C9              <1> 		xor cx, cx
  7080 00005B4A 66890D[8C5C0000]    <1> 		mov [charposline], cx
  7081 00005B51 BE[8F1D0000]        <1> 		mov esi, videobuf
  7082 00005B56 8935[8E5C0000]      <1> 		mov [charposvbuf], esi
  7083 00005B5C 8A5E01              <1> 		mov bl, [esi + 1]
  7084 00005B5F 881D[E3580000]      <1> 		mov [colorcache], bl
  7085 00005B65 8A1E                <1> 		mov bl, [esi]
  7086 00005B67 30FF                <1> 		xor bh, bh
  7087 00005B69 66C1E304            <1> 		shl bx, 4
  7088 00005B6D 678AB7[8872]        <1> 		mov dh, [fonts + bx]
  7089 00005B72 D0CE                <1> 		ror dh, 1
  7090 00005B74 89FE                <1> 		mov esi, edi
  7091                              <1> 	copywindow:
  7092 00005B76 B201                <1> 		mov dl, 1
  7093 00005B78 D0C6                <1> 		rol dh, 1
  7094 00005B7A 20F2                <1> 		and dl, dh
  7095 00005B7C 803D[E3580000]10    <1> 		cmp byte [colorcache], 0x10
  7096 00005B83 731C                <1> 		jae switchwincolors
  7097 00005B85 66A1[EE580000]      <1> 		mov ax, [windowcolor + 2]
  7098 00005B8B 668907              <1> 		mov [edi], ax
  7099 00005B8E 80FA00              <1> 		cmp dl, 0
  7100 00005B91 7425                <1> 		je nowritewin
  7101 00005B93 66A1[EC580000]      <1> 		mov ax, [windowcolor]
  7102 00005B99 668907              <1> 		mov [edi], ax
  7103 00005B9C E917000000          <1> 		jmp nowritewin
  7104                              <1> 	switchwincolors:
  7105 00005BA1 66A1[EC580000]      <1> 		mov ax, [windowcolor]
  7106 00005BA7 668907              <1> 		mov [edi], ax
  7107 00005BAA 80FA00              <1> 		cmp dl, 0
  7108 00005BAD 7409                <1> 		je nowritewin
  7109 00005BAF 66A1[EE580000]      <1> 		mov ax, [windowcolor + 2]
  7110 00005BB5 668907              <1> 		mov [edi], ax
  7111                              <1> 	nowritewin:
  7112 00005BB8 81C702000000        <1> 		add edi, 2
  7113 00005BBE FEC1                <1> 		inc cl
  7114 00005BC0 80F908              <1> 		cmp cl, 8
  7115 00005BC3 75B1                <1> 		jne copywindow
  7116 00005BC5 6643                <1> 		inc bx
  7117 00005BC7 30C9                <1> 		xor cl, cl
  7118 00005BC9 31D2                <1> 		xor edx, edx
  7119 00005BCB 668B15[645D0000]    <1> 		mov dx, [resolutionx2]
  7120 00005BD2 01D6                <1> 		add esi, edx
  7121 00005BD4 89F7                <1> 		mov edi, esi
  7122 00005BD6 678AB7[8872]        <1> 		mov dh, [fonts + bx]
  7123 00005BDB D0CE                <1> 		ror dh, 1
  7124 00005BDD FEC5                <1> 		inc ch
  7125 00005BDF 80FD10              <1> 		cmp ch, 16
  7126 00005BE2 7592                <1> 		jne copywindow
  7127 00005BE4 6631C9              <1> 		xor cx, cx
  7128 00005BE7 8B3D[8E5C0000]      <1> 		mov edi, [charposvbuf]
  7129 00005BED 81C702000000        <1> 		add edi, 2
  7130 00005BF3 3B3D[F6580000]      <1> 		cmp edi, [wincopyendpos]
  7131 00005BF9 737A                <1> 		jae donewincopynow
  7132 00005BFB 8A5F01              <1> 		mov bl, [edi + 1]
  7133 00005BFE 881D[E3580000]      <1> 		mov [colorcache], bl
  7134 00005C04 8A1F                <1> 		mov bl, [edi]
  7135 00005C06 30FF                <1> 		xor bh, bh
  7136 00005C08 66C1E304            <1> 		shl bx, 4
  7137 00005C0C 893D[8E5C0000]      <1> 		mov [charposvbuf], edi
  7138 00005C12 31D2                <1> 		xor edx, edx
  7139 00005C14 668B15[645D0000]    <1> 		mov dx, [resolutionx2]
  7140 00005C1B C1E204              <1> 		shl edx, 4
  7141 00005C1E 29D6                <1> 		sub esi, edx
  7142 00005C20 81C610000000        <1> 		add esi, 16
  7143 00005C26 89F7                <1> 		mov edi, esi
  7144 00005C28 668B0D[8C5C0000]    <1> 		mov cx, [charposline]
  7145 00005C2F 6641                <1> 		inc cx
  7146 00005C31 663B0D[F4580000]    <1> 		cmp cx, [termcol]
  7147 00005C38 0F8316000000        <1> 		jae near fixwindowcopy
  7148 00005C3E 66890D[8C5C0000]    <1> 		mov [charposline], cx
  7149 00005C45 6631C9              <1> 		xor cx, cx
  7150 00005C48 678AB7[8872]        <1> 		mov dh, [fonts + bx]
  7151 00005C4D D0CE                <1> 		ror dh, 1
  7152 00005C4F E922FFFFFF          <1> 		jmp copywindow
  7153                              <1> fixwindowcopy:
  7154 00005C54 6631C9              <1> 		xor cx, cx
  7155 00005C57 66890D[8C5C0000]    <1> 		mov [charposline], cx
  7156 00005C5E 662B15[E8580000]    <1> 		sub dx, [winvcopydx]
  7157 00005C65 01D6                <1> 		add esi, edx
  7158 00005C67 89F7                <1> 		mov edi, esi
  7159 00005C69 678AB7[8872]        <1> 		mov dh, [fonts + bx]
  7160 00005C6E D0CE                <1> 		ror dh, 1
  7161 00005C70 E901FFFFFF          <1> 		jmp copywindow
  7162                              <1> donewincopynow:
  7163 00005C75 E8B2D1FFFF          <1> 		call switchtermcursor
  7164 00005C7A 803D[ED270000]01    <1> 		cmp byte [termcopyon], 1
  7165 00005C81 7501                <1> 		jne forgetresetstuff
  7166 00005C83 61                  <1> 		popa
  7167                              <1> forgetresetstuff:
  7168 00005C84 C605[ED270000]00    <1> 		mov byte [termcopyon], 0
  7169 00005C8B C3                  <1> 		ret
  7170                              <1> 
  7171 00005C8C 0000                <1> charposline dw 0
  7172 00005C8E 00000000            <1> charposvbuf dw 0,0
  7173 00005C92 0000                <1> iconcolor dw 0
  7174                              <1> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  7175 00005C94 A2[71600000]        <1> 		mov [iconselected], al
  7176 00005C99 8025[71600000]01    <1> 		and byte [iconselected], 1
  7177 00005CA0 B401                <1> 		mov ah, 1
  7178 00005CA2 E885F9FFFF          <1> 		call graphicsadd
  7179                              <1> 	showicon2:
  7180 00005CA7 8B3D[C0840000]      <1> 		mov edi, [physbaseptr]
  7181 00005CAD 6601D2              <1> 		add dx, dx
  7182 00005CB0 663B15[645D0000]    <1> 		cmp dx, [resolutionx2]
  7183 00005CB7 720C                <1> 		jb screenxgood
  7184 00005CB9 668B15[645D0000]    <1> 		mov dx, [resolutionx2]
  7185 00005CC0 6681EA4000          <1> 		sub dx, 64
  7186                              <1> 	screenxgood:
  7187 00005CC5 6681F90000          <1> 		cmp cx, 0
  7188 00005CCA 7422                <1> 		je noscreenygoodchk
  7189 00005CCC 663B0D[605D0000]    <1> 		cmp cx, [resolutiony]
  7190 00005CD3 720C                <1> 		jb screenygood
  7191 00005CD5 668B0D[605D0000]    <1> 		mov cx, [resolutiony]
  7192 00005CDC 6681E92000          <1> 		sub cx, 32
  7193                              <1> 	screenygood:
  7194 00005CE1 31DB                <1> 		xor ebx, ebx
  7195 00005CE3 668B1D[645D0000]    <1> 		mov bx, [resolutionx2]
  7196 00005CEA 01DF                <1> 		add edi, ebx
  7197 00005CEC E2F3                <1> 		loop screenygood
  7198                              <1> 	noscreenygoodchk:
  7199 00005CEE 31DB                <1> 		xor ebx, ebx
  7200 00005CF0 6689D3              <1> 		mov bx, dx
  7201 00005CF3 01DF                <1> 		add edi, ebx
  7202 00005CF5 6631C9              <1> 		xor cx, cx
  7203 00005CF8 668B06              <1> 		mov ax, [esi]
  7204 00005CFB 81C602000000        <1> 		add esi, 2
  7205 00005D01 66A3[925C0000]      <1> 		mov [iconcolor], ax
  7206                              <1> 	writeicon:
  7207 00005D07 8B06                <1> 		mov eax, [esi]
  7208 00005D09 D1C0                <1> 		rol eax, 1
  7209 00005D0B 30C9                <1> 		xor cl, cl
  7210                              <1> 	writeiconline:
  7211 00005D0D B201                <1> 		mov dl, 1
  7212 00005D0F 20C2                <1> 		and dl, al
  7213 00005D11 3215[71600000]      <1> 		xor dl, [iconselected]
  7214 00005D17 668B1D[AC4D0000]    <1> 		mov bx, [background]
  7215 00005D1E 66891F              <1> 		mov [edi], bx
  7216 00005D21 80FA00              <1> 		cmp dl, 0
  7217 00005D24 740A                <1> 		je noiconline
  7218 00005D26 668B15[925C0000]    <1> 		mov dx, [iconcolor]
  7219 00005D2D 668917              <1> 		mov [edi], dx
  7220                              <1> 	noiconline:
  7221 00005D30 81C702000000        <1> 		add edi, 2
  7222 00005D36 D1C0                <1> 		rol eax, 1
  7223 00005D38 FEC1                <1> 		inc cl
  7224 00005D3A 80F920              <1> 		cmp cl, 32
  7225 00005D3D 72CE                <1> 		jb writeiconline
  7226 00005D3F 81C604000000        <1> 		add esi, 4
  7227 00005D45 FEC5                <1> 		inc ch
  7228 00005D47 31D2                <1> 		xor edx, edx
  7229 00005D49 668B15[645D0000]    <1> 		mov dx, [resolutionx2]
  7230 00005D50 01D7                <1> 		add edi, edx
  7231 00005D52 81EF40000000        <1> 		sub edi, 64
  7232 00005D58 80FD20              <1> 		cmp ch, 32
  7233 00005D5B 72AA                <1> 		jb writeicon
  7234 00005D5D 31C0                <1> 		xor eax, eax
  7235 00005D5F C3                  <1> 		ret
  7236                              <1> 
  7237 00005D60 0000                <1> resolutiony dw 0
  7238 00005D62 0000                <1> resolutionx dw 0
  7239 00005D64 0000                <1> resolutionx2 dw 0
  7240 00005D66 02                  <1> resolutionbytes db 2
  7241 00005D67 0000                <1> posxvesa dw 0
  7242 00005D69 0000                <1> posyvesa dw 0
  7243 00005D6B FFFF                <1> colorfont dw 0xFFFF
  7244                              <1> savefontvesa:		;;same rules as showfontvesa
  7245 00005D6D C605[DF4E0000]01    <1> 	mov byte [savefonton], 1
  7246                              <1> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  7247 00005D74 3CFF                <1> 	cmp al, 255
  7248 00005D76 7501                <1> 	jne nostopshowfont
  7249 00005D78 C3                  <1> 	ret
  7250                              <1> nostopshowfont:
  7251 00005D79 66890D[695D0000]    <1> 	mov [posyvesa], cx
  7252 00005D80 3C0A                <1> 	cmp al, 10
  7253 00005D82 0F8431000000        <1> 	je near goodvesafontx
  7254 00005D88 3C0D                <1> 	cmp al, 13
  7255 00005D8A 0F8429000000        <1> 	je near goodvesafontx
  7256 00005D90 31C9                <1> 	xor ecx, ecx
  7257 00005D92 668B0D[645D0000]    <1> 	mov cx, [resolutionx2]
  7258 00005D99 6681E91000          <1> 	sub cx, 16
  7259 00005D9E 6639CA              <1> 	cmp dx, cx
  7260 00005DA1 7616                <1> 	jbe goodvesafontx
  7261 00005DA3 6631D2              <1> 	xor dx, dx
  7262 00005DA6 668B0D[695D0000]    <1> 	mov cx, [posyvesa]
  7263 00005DAD 6681C11000          <1> 	add cx, 16
  7264 00005DB2 66890D[695D0000]    <1> 	mov [posyvesa], cx
  7265                              <1> goodvesafontx:
  7266 00005DB9 668B0D[695D0000]    <1> 	mov cx, [posyvesa]
  7267 00005DC0 668915[675D0000]    <1> 	mov [posxvesa], dx
  7268 00005DC7 8B3D[C0840000]      <1> 	mov edi, [physbaseptr]
  7269 00005DCD 66891D[6B5D0000]    <1> 	mov [colorfont], bx
  7270 00005DD4 31DB                <1> 	xor ebx, ebx
  7271 00005DD6 88C3                <1> 	mov bl, al
  7272 00005DD8 31C0                <1> 	xor eax, eax
  7273 00005DDA 88D8                <1> 	mov al, bl
  7274 00005DDC 6689D3              <1> 	mov bx, dx
  7275 00005DDF 89DA                <1> 	mov edx, ebx
  7276 00005DE1 31DB                <1> 	xor ebx, ebx
  7277 00005DE3 6681F90000          <1> 	cmp cx, 0
  7278 00005DE8 7415                <1> 	je vesaposloopdn
  7279 00005DEA 668B1D[645D0000]    <1> 	mov bx, [resolutionx2]
  7280                              <1> vesaposloop:
  7281 00005DF1 01DA                <1> 	add edx, ebx
  7282 00005DF3 6681E90100          <1> 	sub cx, 1
  7283 00005DF8 6681F90000          <1> 	cmp cx, 0
  7284 00005DFD 75F2                <1> 	jne vesaposloop
  7285                              <1> vesaposloopdn:
  7286 00005DFF 01D7                <1> 	add edi, edx
  7287 00005E01 BE[88720000]        <1> 	mov esi, fonts
  7288                              <1> findfontvesa:
  7289 00005E06 30E4                <1> 	xor ah, ah
  7290 00005E08 3C0A                <1> 	cmp al, 10
  7291 00005E0A 0F8406010000        <1> 	je near nwlinevesa
  7292 00005E10 3C0D                <1> 	cmp al, 13
  7293 00005E12 0F8413010000        <1> 	je near cretvesa
  7294 00005E18 C1E004              <1> 	shl eax, 4
  7295 00005E1B 01C6                <1> 	add esi, eax
  7296 00005E1D C1E804              <1> 	shr eax, 4
  7297 00005E20 81FE[88820000]      <1> 	cmp esi, fontend
  7298 00005E26 0F83B9000000        <1> 	jae near donefontvesa
  7299 00005E2C 4E                  <1> 	dec esi
  7300                              <1> foundfontvesa:
  7301 00005E2D 46                  <1> 	inc esi
  7302 00005E2E 803D[DF4E0000]01    <1> 	cmp byte [savefonton], 1
  7303 00005E35 0F8403010000        <1> 	je near vesafontsaver
  7304 00005E3B 30C9                <1> 	xor cl, cl
  7305 00005E3D 8A06                <1> 	mov al, [esi]
  7306 00005E3F 668B15[645D0000]    <1> 	mov dx, [resolutionx2]
  7307 00005E46 662B15[675D0000]    <1> 	sub dx, [posxvesa]
  7308 00005E4D 6681FA1000          <1> 	cmp dx, 16
  7309 00005E52 7708                <1> 	ja paintfontvesa
  7310 00005E54 D0EA                <1> 	shr dl, 1
  7311 00005E56 8815[155F0000]      <1> 	mov [charwidth], dl
  7312                              <1> paintfontvesa:
  7313 00005E5C B201                <1> 	mov dl, 1
  7314 00005E5E 20C2                <1> 	and dl, al
  7315 00005E60 803D[DE4E0000]01    <1> 	cmp byte [showcursorfonton], 1
  7316 00005E67 0F8435000000        <1> 	je near nodelpaintedfont
  7317 00005E6D 803D[DE4E0000]02    <1> 	cmp byte [showcursorfonton], 2
  7318 00005E74 0F8518000000        <1> 	jne near noswitchcursorfonton
  7319 00005E7A 80FA00              <1> 	cmp dl, 0
  7320 00005E7D 0F842E000000        <1> 	je near nopixelset
  7321 00005E83 668B1D[6B5D0000]    <1> 	mov bx, [colorfont]
  7322 00005E8A 66891F              <1> 	mov [edi], bx
  7323 00005E8D E91F000000          <1> 	jmp nopixelset
  7324                              <1> noswitchcursorfonton:
  7325 00005E92 3215[E04E0000]      <1> 	xor dl, [mouseselecton]
  7326 00005E98 668B1D[AC4D0000]    <1> 	mov bx, [background]
  7327 00005E9F 66891F              <1> 	mov [edi], bx
  7328                              <1> nodelpaintedfont:
  7329 00005EA2 80FA00              <1> 	cmp dl, 0
  7330 00005EA5 740A                <1> 	je nopixelset
  7331 00005EA7 668B15[6B5D0000]    <1> 	mov dx, [colorfont]
  7332 00005EAE 668917              <1> 	mov [edi], dx
  7333                              <1> nopixelset:
  7334 00005EB1 81C702000000        <1> 	add edi, 2
  7335 00005EB7 D0C0                <1> 	rol al, 1
  7336 00005EB9 FEC1                <1> 	inc cl
  7337 00005EBB 3A0D[155F0000]      <1> 	cmp cl, [charwidth]
  7338 00005EC1 7299                <1> 	jb paintfontvesa
  7339 00005EC3 FEC5                <1> 	inc ch
  7340 00005EC5 31D2                <1> 	xor edx, edx
  7341 00005EC7 668B15[645D0000]    <1> 	mov dx, [resolutionx2]
  7342 00005ECE 01D7                <1> 	add edi, edx
  7343 00005ED0 31D2                <1> 	xor edx, edx
  7344 00005ED2 8A15[155F0000]      <1> 	mov dl, [charwidth]
  7345 00005ED8 00D2                <1> 	add dl, dl
  7346 00005EDA 29D7                <1> 	sub edi, edx
  7347 00005EDC 80FD10              <1> 	cmp ch, 16
  7348 00005EDF 0F8248FFFFFF        <1> 	jb foundfontvesa
  7349                              <1> donefontvesa:
  7350 00005EE5 B208                <1> 	mov dl, 8
  7351 00005EE7 8815[155F0000]      <1> 	mov [charwidth], dl
  7352 00005EED 668B15[675D0000]    <1> 	mov dx, [posxvesa]
  7353 00005EF4 8A1D[155F0000]      <1> 	mov bl, [charwidth]
  7354 00005EFA 30FF                <1> 	xor bh, bh
  7355 00005EFC 6601DA              <1> 	add dx, bx
  7356 00005EFF 668B1D[6B5D0000]    <1> 	mov bx, [colorfont]
  7357 00005F06 668B0D[695D0000]    <1> 	mov cx, [posyvesa]
  7358 00005F0D C605[DF4E0000]00    <1> 	mov byte [savefonton], 0
  7359 00005F14 C3                  <1> 	ret
  7360 00005F15 08                  <1> charwidth db 8
  7361                              <1> nwlinevesa:
  7362 00005F16 668B0D[695D0000]    <1> 	mov cx, [posyvesa]
  7363 00005F1D 6681C11000          <1> 	add cx, 16
  7364 00005F22 66890D[695D0000]    <1> 	mov [posyvesa], cx
  7365 00005F29 EBBA                <1> 	jmp donefontvesa
  7366                              <1> cretvesa:
  7367 00005F2B 668B15[675D0000]    <1> 	mov dx, [posxvesa]
  7368 00005F32 6631D2              <1> 	xor dx, dx
  7369 00005F35 668915[675D0000]    <1> 	mov [posxvesa], dx
  7370 00005F3C EBA7                <1> 	jmp donefontvesa
  7371                              <1> vesafontsaver:
  7372 00005F3E 30C0                <1> 	xor al, al
  7373 00005F40 30C9                <1> 	xor cl, cl
  7374                              <1> vesafontsaver2:
  7375 00005F42 668B17              <1> 	mov dx, [edi]
  7376 00005F45 663B15[6B5D0000]    <1> 	cmp dx, [colorfont]
  7377 00005F4C 742F                <1> 	je colorfontmatch
  7378                              <1> donecolormatch:
  7379 00005F4E 81C702000000        <1> 	add edi, 2
  7380 00005F54 D0C0                <1> 	rol al, 1
  7381 00005F56 FEC1                <1> 	inc cl
  7382 00005F58 80F908              <1> 	cmp cl, 8
  7383 00005F5B 72E5                <1> 	jb vesafontsaver2
  7384 00005F5D 8806                <1> 	mov [esi], al
  7385 00005F5F 46                  <1> 	inc esi
  7386 00005F60 FEC5                <1> 	inc ch
  7387 00005F62 31D2                <1> 	xor edx, edx
  7388 00005F64 668B15[645D0000]    <1> 	mov dx, [resolutionx2]
  7389 00005F6B 01D7                <1> 	add edi, edx
  7390 00005F6D 81EF10000000        <1> 	sub edi, 16
  7391 00005F73 80FD10              <1> 	cmp ch, 16
  7392 00005F76 72C6                <1> 	jb vesafontsaver
  7393 00005F78 E968FFFFFF          <1> 	jmp donefontvesa
  7394                              <1> colorfontmatch:
  7395 00005F7D 0401                <1> 	add al, 1
  7396 00005F7F EBCD                <1> 	jmp donecolormatch
  7397                              <1> 	
  7398                              <1> showbmp:
  7399 00005F81 668B06              <1> 	mov ax, [esi]
  7400 00005F84 663D424D            <1> 	cmp ax, "BM"
  7401 00005F88 0F8582000000        <1> 	jne near endedbmp
  7402 00005F8E 8B3D[C0840000]      <1> 	mov edi, [physbaseptr]
  7403 00005F94 6689D0              <1> 	mov ax, dx
  7404 00005F97 6689CB              <1> 	mov bx, cx
  7405 00005F9A 31C9                <1> 	xor ecx, ecx
  7406 00005F9C 31D2                <1> 	xor edx, edx
  7407 00005F9E 6689D9              <1> 	mov cx, bx
  7408 00005FA1 6689C2              <1> 	mov dx, ax
  7409 00005FA4 01D7                <1> 	add edi, edx
  7410 00005FA6 01D7                <1> 	add edi, edx
  7411 00005FA8 31D2                <1> 	xor edx, edx
  7412 00005FAA 668B15[645D0000]    <1> 	mov dx, [resolutionx2]
  7413 00005FB1 41                  <1> 	inc ecx
  7414 00005FB2 034E16              <1> 	add ecx, [esi + 22]
  7415                              <1> bmplocloop:
  7416 00005FB5 01D7                <1> 	add edi, edx
  7417 00005FB7 E2FC                <1> 	loop bmplocloop
  7418 00005FB9 29D7                <1> 	sub edi, edx
  7419 00005FBB 8B5612              <1> 	mov edx, [esi + 18]
  7420 00005FBE 8B4E16              <1> 	mov ecx, [esi + 22]
  7421 00005FC1 8B460A              <1> 	mov eax, [esi + 10]
  7422 00005FC4 8B5E02              <1> 	mov ebx, [esi + 2]
  7423 00005FC7 01F3                <1> 	add ebx, esi
  7424 00005FC9 891D[16600000]      <1> 	mov [bmpend], ebx
  7425 00005FCF 89D3                <1> 	mov ebx, edx
  7426 00005FD1 01C6                <1> 	add esi, eax
  7427                              <1> ldxbmp:
  7428 00005FD3 668B06              <1> 	mov ax, [esi]
  7429 00005FD6 668907              <1> 	mov [edi], ax
  7430 00005FD9 81C702000000        <1> 	add edi, 2
  7431 00005FDF 81C602000000        <1> 	add esi, 2
  7432 00005FE5 3B35[16600000]      <1> 	cmp esi, [bmpend]
  7433 00005FEB 7723                <1> 	ja endedbmp
  7434 00005FED 4A                  <1> 	dec edx
  7435 00005FEE 81FA00000000        <1> 	cmp edx, 0
  7436 00005FF4 77DD                <1> 	ja ldxbmp
  7437 00005FF6 31D2                <1> 	xor edx, edx
  7438 00005FF8 668B15[645D0000]    <1> 	mov dx, [resolutionx2]
  7439 00005FFF 29DF                <1> 	sub edi, ebx
  7440 00006001 29DF                <1> 	sub edi, ebx
  7441 00006003 29D7                <1> 	sub edi, edx
  7442 00006005 49                  <1> 	dec ecx
  7443 00006006 89DA                <1> 	mov edx, ebx
  7444 00006008 81F900000000        <1> 	cmp ecx, 0
  7445 0000600E 77C3                <1> 	ja ldxbmp
  7446                              <1> endedbmp:
  7447 00006010 E887EFFFFF          <1> 	call switchmousepos2
  7448 00006015 C3                  <1> 	ret
  7449                              <1> 	
  7450 00006016 00000000            <1> 	bmpend dd 0
  7451                              <1> 
  7452                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Here are some vars;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  7453 0000601A 00000000            <1> 	showstringesi dw 0,0
  7454 0000601E 00                  <1> 	mouseon db 0
  7455 0000601F 737461727400        <1> 	start	db "start",0
  7456 00006025 536F6C6C65724F5300  <1> 	gotomenu db "SollerOS",0
  7457 0000602E 426F6F2100          <1> 	boomsg db "Boo!",0
  7458 00006033 5061636D616E207761- <1> 	pacmsg	db "Pacman was easy to draw.",0
  7459 0000603C 73206561737920746F- <1>
  7460 00006045 20647261772E00      <1>
  7461 0000604C 4F6D206E6F6D206E6F- <1> 	pacnom  db "Om nom nom nom",0
  7462 00006055 6D206E6F6D00        <1>
  7463 0000605B 77696E646F77732073- <1> 	winmsg	db "windows sucks",0
  7464 00006064 75636B7300          <1>
  7465 00006069 5800                <1> 	xmsg db "X",0
  7466 0000606B 0000                <1> 	icon dw 0	;pointer to icon
  7467 0000606D 00000000            <1> 	codepointer dw 0,0 ;pointer to code
  7468 00006071 00                  <1> 	iconselected db 0
  7469                              <1> 	
  7470                              <1> 	boo:
  7471 00006072 BE[2E600000]        <1> 		mov esi, boomsg
  7472 00006077 66BA6400            <1> 		mov dx, 100
  7473 0000607B 66B94001            <1> 		mov cx, 320
  7474 0000607F 31DB                <1> 		xor ebx, ebx
  7475 00006081 6631C0              <1> 		xor ax, ax
  7476 00006084 E909F8FFFF          <1> 		jmp showstring
  7477                              <1> 
  7478                              <1> 	pacmannomnom:
  7479 00006089 BE[4C600000]        <1> 		mov esi, pacnom
  7480 0000608E 66BA8200            <1> 		mov dx, 130
  7481 00006092 66B93C00            <1> 		mov cx, 60
  7482 00006096 31DB                <1> 		xor ebx, ebx
  7483 00006098 6631C0              <1> 		xor ax, ax
  7484 0000609B E9F2F7FFFF          <1> 		jmp showstring	
  7485                              <1> 	
  7486                              <1> 	noie:
  7487 000060A0 31D2                <1> 		xor edx, edx
  7488 000060A2 31C9                <1> 		xor ecx, ecx
  7489 000060A4 668B15[625D0000]    <1> 		mov dx, [resolutionx]
  7490 000060AB 668B0D[605D0000]    <1> 		mov cx, [resolutiony]
  7491 000060B2 66C1EA03            <1> 		shr dx, 3
  7492 000060B6 66C1E904            <1> 		shr cx, 4
  7493 000060BA 6681EA0400          <1> 		sub dx, 4
  7494 000060BF 6681E90400          <1> 		sub cx, 4
  7495 000060C4 66C1E203            <1> 		shl dx, 3
  7496 000060C8 66C1E104            <1> 		shl cx, 4
  7497 000060CC 668915[90610000]    <1> 		mov [termwindow], dx
  7498 000060D3 66890D[92610000]    <1> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  7499 000060DA BE[90610000]        <1> 		mov esi, termwindow
  7500 000060DF 66BA1000            <1> 		mov dx, 16
  7501 000060E3 66B91000            <1> 		mov cx, 16
  7502 000060E7 BB[2A2F0000]        <1> 		mov ebx, os
  7503 000060EC 891D[25040000]      <1> 		mov [user2codepoint], ebx
  7504 000060F2 6631C0              <1> 		xor ax, ax
  7505 000060F5 E800F8FFFF          <1> 		call showwindow
  7506 000060FA E92BCEFFFF          <1> 		jmp os
  7507                              <1> 
  7508                              <1> 	gotomenuboot:
  7509 000060FF 31D2                <1> 		xor edx, edx
  7510 00006101 31C9                <1> 		xor ecx, ecx
  7511 00006103 668B15[625D0000]    <1> 		mov dx, [resolutionx]
  7512 0000610A 668B0D[605D0000]    <1> 		mov cx, [resolutiony]
  7513 00006111 66C1E904            <1> 		shr cx, 4
  7514 00006115 6681E90100          <1> 		sub cx, 1
  7515 0000611A 66C1E104            <1> 		shl cx, 4
  7516 0000611E 668915[90610000]    <1> 		mov [termwindow], dx
  7517 00006125 66890D[92610000]    <1> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  7518 0000612C BE[90610000]        <1> 		mov esi, termwindow
  7519 00006131 6631D2              <1> 		xor dx, dx
  7520 00006134 6631C9              <1> 		xor cx, cx
  7521 00006137 BB[2A2F0000]        <1> 		mov ebx, os
  7522 0000613C 891D[25040000]      <1> 		mov [user2codepoint], ebx
  7523 00006142 6631C0              <1> 		xor ax, ax
  7524 00006145 E8B0F7FFFF          <1> 		call showwindow
  7525 0000614A E9DBCDFFFF          <1> 		jmp os
  7526                              <1> 		;ret
  7527                              <1> 
  7528                              <1> 	winblows:
  7529 0000614F BE[5B600000]        <1> 		mov esi, winmsg
  7530 00006154 6631D2              <1> 		xor dx, dx
  7531 00006157 668B0D[605D0000]    <1> 		mov cx, [resolutiony]
  7532 0000615E 6681E92000          <1> 		sub cx, 32
  7533 00006163 31DB                <1> 		xor ebx, ebx
  7534 00006165 30E4                <1> 		xor ah, ah
  7535 00006167 B011                <1> 		mov al, 00010001b
  7536 00006169 E824F7FFFF          <1> 		call showstring
  7537 0000616E BE[25600000]        <1> 		mov esi, gotomenu
  7538 00006173 668B0D[605D0000]    <1> 		mov cx, [resolutiony]
  7539 0000617A 6681E93000          <1> 		sub cx, 48
  7540 0000617F 6631D2              <1> 		xor dx, dx
  7541 00006182 30E4                <1> 		xor ah, ah
  7542 00006184 B010                <1> 		mov al, 00010000b
  7543 00006186 BB[FF600000]        <1> 		mov ebx, gotomenuboot
  7544 0000618B E902F7FFFF          <1> 		jmp showstring
  7545                              <1> 
  7546 00006190 20035802            <1> 	termwindow:	dw 800,600	;;window size
  7547 00006194 53757065725465726D- <1> 	termmsg:	db "SuperTerminal",0	;;window title
  7548 0000619D 696E616C00          <1>
  7549                              <1> 	
  7550 0000619D <incbin>            <1> interneticon: 	incbin 'source/precompiled/interneticon.pak'
  7551 0000619D <incbin>            <1> wordicon: 	incbin 'source/precompiled/wordicon.pak'
  7552 0000619D <incbin>            <1> pacmanpellet: incbin 'source/precompiled/pacmanpellet.pak'
  7553 0000619D <incbin>            <1> ghostie	incbin 'source/precompiled/ghostie.pak'
  7554 0000619D <incbin>            <1> pacman	incbin 'source/precompiled/pacman.pak'
  7555                                      ;%include 'source/network.asm'
  7556                                  	%include 'source/rtl8139.asm'
  7557                              <1> ;;rtl8139.asm
  7558                              <1> initcard:	;;should find card, get mac, and initialize card
  7559 0000642C 31C0                <1> 	xor eax, eax
  7560 0000642E A2[60670000]        <1> 	mov [pcifunction], al
  7561 00006433 A2[5E670000]        <1> 	mov [pcibus], al
  7562 00006438 A2[5F670000]        <1> 	mov [pcidevice], al
  7563 0000643D B002                <1> 	mov al, 0x02 ;;type code
  7564 0000643F A2[DB670000]        <1> 	mov [pcitype], al
  7565 00006444 E81A030000          <1> 	call getpciport
  7566                              <1> initnic:		;;;;Here i tried the rtl8139 interface, fuck it
  7567 00006449 8915[35660000]      <1> 	mov [basenicaddr], edx
  7568 0000644F 89D1                <1> 	mov ecx, edx
  7569 00006451 C605[49350000]03    <1> 	mov byte [firsthexshown], 3
  7570 00006458 E801D1FFFF          <1> 	call showhex	;;for debugging, please remove
  7571 0000645D BE[5F720000]        <1> 	mov esi, rbuffstart
  7572 00006462 B900200000          <1> 	mov ecx, 8192
  7573 00006467 31C0                <1> 	xor eax, eax
  7574                              <1> clearrbuff:		;;clear receive buffer which starts at rbuffstart
  7575 00006469 8806                <1> 	mov [esi], al
  7576 0000646B 46                  <1> 	inc esi
  7577 0000646C 6649                <1> 	dec cx
  7578 0000646E 6681F90000          <1> 	cmp cx, 0
  7579 00006473 75F4                <1> 	jne clearrbuff
  7580                              <1> findmac:
  7581 00006475 8B15[35660000]      <1> 	mov edx, [basenicaddr]
  7582 0000647B BF[3D660000]        <1> 	mov edi, sysmac
  7583 00006480 B906000000          <1> 	mov ecx, 6
  7584                              <1> macputloop:
  7585 00006485 EC                  <1> 	in al, dx
  7586 00006486 8807                <1> 	mov [edi], al
  7587 00006488 47                  <1> 	inc edi
  7588 00006489 42                  <1> 	inc edx
  7589 0000648A 49                  <1> 	dec ecx
  7590 0000648B 75F8                <1> 	jnz macputloop
  7591 0000648D B9[3D660000]        <1> 	mov ecx, sysmac
  7592 00006492 E837010000          <1> 	call showmac
  7593                              <1> resetnic:
  7594 00006497 8B15[35660000]      <1> 	mov edx, [basenicaddr]
  7595 0000649D 81C252000000        <1> 	add edx, 0x52
  7596 000064A3 30C0                <1> 	xor al, al
  7597 000064A5 EE                  <1> 	out dx, al	;;WAKE UP!!!!
  7598 000064A6 8B15[35660000]      <1> 	mov edx, [basenicaddr]
  7599 000064AC 81C237000000        <1> 	add edx, 0x37
  7600 000064B2 B010                <1> 	mov al, 0x10
  7601 000064B4 EE                  <1> 	out dx, al	;;Reset
  7602                              <1> resetnicwait:
  7603 000064B5 8B15[35660000]      <1> 	mov edx, [basenicaddr]
  7604 000064BB 81C237000000        <1> 	add edx, 0x37
  7605 000064C1 EC                  <1> 	in al, dx
  7606 000064C2 2410                <1> 	and al, 0x10
  7607 000064C4 3C10                <1> 	cmp al, 0x10
  7608 000064C6 0F84E9FFFFFF        <1> 	je near resetnicwait
  7609 000064CC 8B15[35660000]      <1> 	mov edx, [basenicaddr]
  7610 000064D2 81C230000000        <1> 	add edx, 0x30
  7611 000064D8 B8[5F720000]        <1> 	mov eax, rbuffstart
  7612 000064DD EF                  <1> 	out dx, eax	;;give nic receive buffer location
  7613 000064DE 8B15[35660000]      <1> 	mov edx, [basenicaddr]
  7614 000064E4 81C23C000000        <1> 	add edx, 0x3C
  7615 000064EA 66B80500            <1> 	mov ax, 0x0005
  7616 000064EE 66EF                <1> 	out dx, ax	;;set TOK and ROK
  7617 000064F0 8B15[35660000]      <1> 	mov edx, [basenicaddr]
  7618 000064F6 81C244000000        <1> 	add edx, 0x44
  7619 000064FC B80F000000          <1> 	mov eax, 0xf
  7620 00006501 EF                  <1> 	out dx, eax	;;recieve packets from all matches
  7621 00006502 8B15[35660000]      <1> 	mov edx, [basenicaddr]
  7622 00006508 81C237000000        <1> 	add edx, 0x37
  7623 0000650E B00C                <1> 	mov al, 0x0C
  7624 00006510 EE                  <1> 	out dx, al	;;use transmit and receive
  7625 00006511 C605[1E660000]01    <1> 	mov byte [nicconfig], 1
  7626 00006518 C3                  <1> 	ret
  7627                              <1> 	
  7628                              <1> sendframe:	;;padded frame with beginning in edi and end in esi
  7629 00006519 56                  <1> 	push esi
  7630 0000651A 57                  <1> 	push edi
  7631                              <1> nic2:		;;here come the low level drivers :(
  7632                              <1> 			;;frame begins at esi, ends at edi 			;;0x0200 is the class code for ethernet cards
  7633 0000651B 803D[1E660000]01    <1> 	cmp byte [nicconfig], 1
  7634 00006522 7405                <1> 	je sendcachedata
  7635 00006524 E803FFFFFF          <1> 	call initcard
  7636                              <1> sendcachedata:
  7637 00006529 8B15[35660000]      <1> 	mov edx, [basenicaddr]
  7638 0000652F 81C210000000        <1> 	add edx, 0x10
  7639 00006535 ED                  <1> 	in eax, dx
  7640 00006536 89C1                <1> 	mov ecx, eax
  7641 00006538 E821D0FFFF          <1> 	call showhex
  7642 0000653D 8B15[35660000]      <1> 	mov edx, [basenicaddr]
  7643 00006543 81C213000000        <1> 	add edx, 0x13
  7644 00006549 ED                  <1> 	in eax, dx
  7645 0000654A 89C1                <1> 	mov ecx, eax
  7646 0000654C E80DD0FFFF          <1> 	call showhex
  7647 00006551 8B15[35660000]      <1> 	mov edx, [basenicaddr]
  7648 00006557 81C223000000        <1> 	add edx, 0x23	;;23 or 20?
  7649 0000655D 5F                  <1> 	pop edi
  7650 0000655E 89F8                <1> 	mov eax, edi
  7651 00006560 EF                  <1> 	out dx, eax	;;here's Johnny!
  7652 00006561 5E                  <1> 	pop esi
  7653 00006562 29FE                <1> 	sub esi, edi
  7654 00006564 89F0                <1> 	mov eax, esi
  7655 00006566 8B15[35660000]      <1> 	mov edx, [basenicaddr]
  7656 0000656C 81C213000000        <1> 	add edx, 0x13	;;13 or 10?
  7657 00006572 EF                  <1> 	out dx, eax
  7658                              <1> checknicstatus1:
  7659 00006573 8B15[35660000]      <1> 	mov edx, [basenicaddr]
  7660 00006579 81C213000000        <1> 	add edx, 0x13	;;13 or 10?
  7661 0000657F ED                  <1> 	in eax, dx
  7662 00006580 2500200000          <1> 	and eax, 0x2000
  7663 00006585 3D00200000          <1> 	cmp eax, 0x2000
  7664 0000658A 75E7                <1> 	jne checknicstatus1
  7665                              <1> checknicstatus:
  7666 0000658C 8B15[35660000]      <1> 	mov edx, [basenicaddr]
  7667 00006592 81C213000000        <1> 	add edx, 0x13	;;13 or 10?
  7668 00006598 ED                  <1> 	in eax, dx
  7669 00006599 2500800000          <1> 	and eax, 0x8000
  7670 0000659E 3D00800000          <1> 	cmp eax, 0x8000
  7671 000065A3 75E7                <1> 	jne checknicstatus
  7672 000065A5 8B15[35660000]      <1> 	mov edx, [basenicaddr]
  7673 000065AB 81C210000000        <1> 	add edx, 0x10
  7674 000065B1 ED                  <1> 	in eax, dx
  7675 000065B2 89C1                <1> 	mov ecx, eax
  7676 000065B4 E8A5CFFFFF          <1> 	call showhex
  7677 000065B9 8B15[35660000]      <1> 	mov edx, [basenicaddr]
  7678 000065BF 81C213000000        <1> 	add edx, 0x13
  7679 000065C5 ED                  <1> 	in eax, dx
  7680 000065C6 89C1                <1> 	mov ecx, eax
  7681 000065C8 E891CFFFFF          <1> 	call showhex
  7682 000065CD C3                  <1> 	ret
  7683                              <1> 	
  7684                              <1> showmac:	;;mac begins in [ecx]
  7685 000065CE BE[06660000]        <1> 	mov esi, macprint
  7686 000065D3 89CF                <1> 	mov edi, ecx
  7687 000065D5 81C106000000        <1> 	add ecx, 6
  7688                              <1> showmacloop:
  7689 000065DB 8A07                <1> 	mov al, [edi]
  7690 000065DD 8A27                <1> 	mov ah, [edi]
  7691 000065DF C0E804              <1> 	shr al, 4
  7692 000065E2 C0E404              <1> 	shl ah, 4
  7693 000065E5 C0EC04              <1> 	shr ah, 4
  7694 000065E8 0430                <1> 	add al, 48
  7695 000065EA 80C430              <1> 	add ah, 48
  7696 000065ED 668906              <1> 	mov [esi], ax
  7697 000065F0 81C603000000        <1> 	add esi, 3
  7698 000065F6 47                  <1> 	inc edi
  7699 000065F7 39CF                <1> 	cmp edi, ecx
  7700 000065F9 72E0                <1> 	jb showmacloop
  7701 000065FB BE[06660000]        <1> 	mov esi, macprint
  7702 00006600 E8F2C3FFFF          <1> 	call print
  7703 00006605 C3                  <1> 	ret
  7704                              <1> 	
  7705 00006606 30302D30302D30302D- <1> macprint db "00-00-00-00-00-00  ",0
  7706 0000660F 30302D30302D303020- <1>
  7707 00006618 2000                <1>
  7708 0000661A 00000000            <1> ethernetend dw 0,0
  7709 0000661E 00                  <1> nicconfig db 0
  7710 0000661F 4E4F204E494300      <1> nonicfoundmsg db "NO NIC",0
  7711 00006626 496E6974696174696E- <1> initnicmsg	db "Initiating NIC",0
  7712 0000662F 67204E494300        <1>
  7713 00006635 00000000            <1> basenicaddr	db 0,0,0,0
  7714 00006639 C0A80005            <1> sysip db 192,168,0,5
  7715 0000663D 000000000000        <1> sysmac	db 0,0,0,0,0,0		;;my mac address
  7716                                  	%include 'source/arp.asm'
  7717                              <1> ;;let's try something else
  7718                              <1> ;;arp.asm
  7719                              <1> arpinit:
  7720 00006643 BE[FA660000]        <1> 	mov esi, arptable
  7721 00006648 BF[3D660000]        <1> 	mov edi, sysmac
  7722 0000664D BB[39660000]        <1> 	mov ebx, sysip
  7723 00006652 8B0F                <1> 	mov ecx, [edi]
  7724 00006654 890E                <1> 	mov [esi], ecx
  7725 00006656 668B4F04            <1> 	mov cx, [edi + 4]
  7726 0000665A 894E04              <1> 	mov [esi + 4], ecx
  7727 0000665D 8B0B                <1> 	mov ecx, [ebx]
  7728 0000665F 894E06              <1> 	mov [esi + 6], ecx
  7729 00006662 C605[F9660000]01    <1> 	mov byte [arpconfig], 1
  7730 00006669 C3                  <1> 	ret
  7731                              <1> arptest:
  7732 0000666A 803D[F9660000]01    <1> 	cmp byte [arpconfig], 1
  7733 00006671 7405                <1> 	je arptest2
  7734 00006673 E8CBFFFFFF          <1> 	call arpinit
  7735                              <1> arptest2:	;;try to reach 192.168.0.1
  7736 00006678 8B0D[3D660000]      <1> 	mov ecx, [sysmac]
  7737 0000667E 668B1D[41660000]    <1> 	mov bx, [sysmac + 4]
  7738 00006685 890D[BF660000]      <1> 	mov [sourcemac], ecx
  7739 0000668B 66891D[C3660000]    <1> 	mov [sourcemac + 4],bx
  7740 00006692 890D[CF660000]      <1> 	mov [arpsenderinfo], ecx
  7741 00006698 66891D[D3660000]    <1> 	mov [arpsenderinfo + 4], bx
  7742 0000669F BF[B9660000]        <1> 	mov edi, frame
  7743 000066A4 BE[F9660000]        <1> 	mov esi, framend
  7744 000066A9 E86BFEFFFF          <1> 	call sendframe
  7745 000066AE BE[5F720000]        <1> 	mov esi, line
  7746 000066B3 E83FC3FFFF          <1> 	call print
  7747 000066B8 C3                  <1> 	ret
  7748                              <1> 	
  7749                              <1> ;;example frame
  7750                              <1> frame:
  7751 000066B9 FFFFFFFFFFFF        <1> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  7752 000066BF 000000000000        <1> sourcemac:		db 0,0,0,0,0,0
  7753 000066C5 0608                <1> ethertype:		dw 0x0806			;;arp
  7754                              <1> 	;;example packet
  7755 000066C7 0100                <1> 	arppacket: 		dw 1				;;ethernet is 1
  7756 000066C9 0008                <1> 	arpprotocol: 	dw 0x0800			;;ip is 0x800
  7757 000066CB 0604                <1> 					db 6,4				;;length of mac, length of ip
  7758 000066CD 0100                <1> 	arpoperation: 	dw 1				;;one for arp request
  7759 000066CF 000000000000        <1> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;;mac
  7760 000066D5 C0A80005            <1> 					db 192,168,0,5			;;ip
  7761 000066D9 000000000000        <1> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;;ignored in requests
  7762 000066DF C0A80001            <1> 					db 192,168,0,1			;;ip
  7763 000066E3 00<rept>            <1> padding:		times (64-($-frame)) db 0
  7764                              <1> framend:
  7765                              <1> 
  7766 000066F9 00                  <1> arpconfig db 0
  7767                              <1> arptable:	;;mac,ip
  7768 000066FA 000000000000000000- <1> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  7769 00006703 00<rept>            <1>
  7770                              <1> arptableend:
  7771                                  	%include 'source/pci.asm'
  7772 0000675E 00                  <1> pcibus		db 0
  7773 0000675F 00                  <1> pcidevice	db 0
  7774 00006760 00                  <1> pcifunction	db 0
  7775 00006761 00                  <1> pciregister	db 0
  7776 00006762 00                  <1> pcireqtype db 0
  7777                              <1> 
  7778                              <1> getpciport:
  7779 00006763 B001                <1> 	mov al, 1
  7780 00006765 A2[62670000]        <1> 	mov [pcireqtype], al
  7781 0000676A E916000000          <1> 	jmp searchpci
  7782                              <1> pcidump:
  7783 0000676F 31C0                <1> 	xor eax, eax
  7784 00006771 A2[60670000]        <1> 	mov [pcifunction], al
  7785 00006776 A2[5E670000]        <1> 	mov [pcibus], al
  7786 0000677B A2[5F670000]        <1> 	mov [pcidevice], al
  7787 00006780 A2[62670000]        <1> 	mov [pcireqtype], al
  7788                              <1> searchpci:		;;return in ebx, start X in pciX
  7789 00006785 30C0                <1> 	xor al, al
  7790 00006787 A2[61670000]        <1> 	mov [pciregister], al
  7791 0000678C E841010000          <1> 	call getpciaddr
  7792 00006791 BAF80C0000          <1> 	mov edx, 0xCF8
  7793 00006796 EF                  <1> 	out dx, eax	;;request pci config
  7794 00006797 BAFC0C0000          <1> 	mov edx, 0xCFC
  7795 0000679C ED                  <1> 	in eax, dx 	;;read in pci config
  7796 0000679D 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7797 000067A2 0F8237000000        <1> 	jb near checkpcidevice
  7798                              <1> searchpciret:
  7799                              <1> nextpcidevice:
  7800 000067A8 30C0                <1> 	xor al, al
  7801 000067AA A2[60670000]        <1> 	mov [pcifunction], al
  7802 000067AF A0[5F670000]        <1> 	mov al, [pcidevice]
  7803 000067B4 3C1F                <1> 	cmp al, 11111b
  7804 000067B6 0F83AD000000        <1> 	jae near nextpcibus
  7805 000067BC FEC0                <1> 	inc al
  7806 000067BE A2[5F670000]        <1> 	mov [pcidevice], al
  7807 000067C3 EBC0                <1> 	jmp searchpci
  7808 000067C5 A0[60670000]        <1> 	mov al, [pcifunction]
  7809 000067CA 3C07                <1> 	cmp al, 111b
  7810 000067CC 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7811 000067D2 FEC0                <1> 	inc al
  7812 000067D4 A2[60670000]        <1> 	mov [pcifunction], al
  7813 000067D9 EBAA                <1> 	jmp searchpci
  7814 000067DB 00000000            <1> pcitype: db 0,0,0,0
  7815                              <1> checkpcidevice:
  7816 000067DF 30C0                <1> 	xor al, al
  7817 000067E1 3805[62670000]      <1> 	cmp [pcireqtype], al
  7818 000067E7 0F842B000000        <1> 	je near dumppcidevice
  7819 000067ED B008                <1> 	mov al, 0x08
  7820 000067EF A2[61670000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7821 000067F4 E8D9000000          <1> 	call getpciaddr
  7822 000067F9 BAF80C0000          <1> 	mov edx, 0xCF8
  7823 000067FE EF                  <1> 	out dx, eax
  7824 000067FF BAFC0C0000          <1> 	mov edx, 0xCFC
  7825 00006804 ED                  <1> 	in eax, dx
  7826 00006805 C1C008              <1> 	rol eax, 8
  7827 00006808 8A1D[DB670000]      <1> 	mov bl, [pcitype]
  7828 0000680E 38D8                <1> 	cmp al, bl
  7829 00006810 0F8472000000        <1> 	je near foundpciaddr
  7830 00006816 EB90                <1> 	jmp searchpciret
  7831                              <1> dumppcidevice:
  7832 00006818 30C0                <1> 	xor al, al
  7833 0000681A A2[61670000]        <1> 	mov [pciregister], al
  7834 0000681F E8AE000000          <1> 	call getpciaddr
  7835 00006824 89C1                <1> 	mov ecx, eax
  7836 00006826 E833CDFFFF          <1> 	call showhex
  7837                              <1> dumppcidevicelp:
  7838 0000682B A2[61670000]        <1> 	mov [pciregister], al
  7839 00006830 E89D000000          <1> 	call getpciaddr
  7840 00006835 BAF80C0000          <1> 	mov edx, 0xCF8
  7841 0000683A EF                  <1> 	out dx, eax
  7842 0000683B BAFC0C0000          <1> 	mov edx, 0xCFC
  7843 00006840 ED                  <1> 	in eax, dx
  7844 00006841 89C1                <1> 	mov ecx, eax
  7845 00006843 A0[61670000]        <1> 	mov al, [pciregister]
  7846 00006848 0404                <1> 	add al, 4
  7847 0000684A 3C1A                <1> 	cmp al, 0x1A
  7848 0000684C 7307                <1> 	jae dumppcidn
  7849 0000684E E80BCDFFFF          <1> 	call showhex
  7850 00006853 EBD6                <1> 	jmp dumppcidevicelp
  7851                              <1> dumppcidn:
  7852 00006855 E804CDFFFF          <1> 	call showhex
  7853 0000685A BE[5F720000]        <1> 	mov esi, line
  7854 0000685F E893C1FFFF          <1> 	call print
  7855 00006864 E93FFFFFFF          <1> 	jmp searchpciret
  7856                              <1> nextpcibus:
  7857 00006869 30C0                <1> 	xor al, al
  7858 0000686B A2[5F670000]        <1> 	mov [pcidevice], al
  7859 00006870 A0[5E670000]        <1> 	mov al, [pcibus]
  7860 00006875 3C7F                <1> 	cmp al, 1111111b
  7861 00006877 730C                <1> 	jae donesearchpci
  7862 00006879 FEC0                <1> 	inc al
  7863 0000687B A2[5E670000]        <1> 	mov [pcibus], al
  7864 00006880 E900FFFFFF          <1> 	jmp searchpci
  7865                              <1> donesearchpci:
  7866 00006885 31D2                <1> 	xor edx, edx
  7867 00006887 C3                  <1> 	ret
  7868                              <1> foundpciaddr:
  7869 00006888 B010                <1> 	mov al, 0x10
  7870 0000688A A2[61670000]        <1> 	mov [pciregister], al
  7871                              <1> findpciioaddr:
  7872 0000688F E83E000000          <1> 	call getpciaddr
  7873 00006894 BAF80C0000          <1> 	mov edx, 0xCF8
  7874 00006899 EF                  <1> 	out dx, eax
  7875 0000689A BAFC0C0000          <1> 	mov edx, 0xCFC
  7876 0000689F ED                  <1> 	in eax, dx
  7877 000068A0 89C3                <1> 	mov ebx, eax
  7878 000068A2 81E301000000        <1> 	and ebx, 1
  7879 000068A8 81FB00000000        <1> 	cmp ebx, 0
  7880 000068AE 0F8408000000        <1> 	je near notpciioaddr
  7881 000068B4 2D01000000          <1> 	sub eax, 1
  7882 000068B9 89C2                <1> 	mov edx, eax
  7883 000068BB C3                  <1> 	ret
  7884                              <1> notpciioaddr:
  7885 000068BC A0[61670000]        <1> 	mov al, [pciregister]
  7886 000068C1 0404                <1> 	add al, 4
  7887 000068C3 3C28                <1> 	cmp al, 0x28
  7888 000068C5 0F87DDFEFFFF        <1> 	ja near searchpciret
  7889 000068CB A2[61670000]        <1> 	mov [pciregister], al
  7890 000068D0 EBBD                <1> 	jmp findpciioaddr
  7891                              <1> getpciaddr:		;;puts it in eax and ebx
  7892 000068D2 31C0                <1> 			xor eax, eax
  7893 000068D4 BB00000080          <1> 			mov ebx, 0x80000000
  7894 000068D9 A0[5E670000]        <1> 			mov al, [pcibus]
  7895 000068DE C1E010              <1> 			shl eax, 16
  7896 000068E1 01C3                <1> 			add ebx, eax
  7897 000068E3 31C0                <1> 			xor eax, eax
  7898 000068E5 A0[5F670000]        <1> 			mov al, [pcidevice]
  7899 000068EA C1E00B              <1> 			shl eax, 11
  7900 000068ED 01C3                <1> 			add ebx, eax
  7901 000068EF 31C0                <1> 			xor eax, eax
  7902 000068F1 A0[60670000]        <1> 			mov al, [pcifunction]
  7903 000068F6 C1E008              <1> 			shl eax, 8
  7904 000068F9 01C3                <1> 			add ebx, eax
  7905 000068FB 31C0                <1> 			xor eax, eax
  7906 000068FD A0[61670000]        <1> 			mov al, [pciregister]
  7907 00006902 01C3                <1> 			add ebx, eax
  7908 00006904 89D8                <1> 			mov eax, ebx
  7909 00006906 C3                  <1> 			ret
  7910                                  	;%include 'source/process.asm'
  7911                                      %include 'source/disk.asm'
  7912                              <1> ;;disk.asm - new - using lba
  7913                              <1> loadfile:	;;loads a file with the name buffer's location in edi into location in esi
  7914 00006907 803F00              <1> 	cmp byte [edi], 0
  7915 0000690A 0F8444000000        <1> 	je near nofileload
  7916 00006910 89FA                <1> 	mov edx, edi
  7917 00006912 BB[56710000]        <1> 	mov ebx, diskfileindex
  7918                              <1> nextnamechar:
  7919 00006917 8A07                <1> 	mov al, [edi]
  7920 00006919 8A23                <1> 	mov ah, [ebx]
  7921 0000691B 47                  <1> 	inc edi
  7922 0000691C 43                  <1> 	inc ebx
  7923 0000691D 88C1                <1> 	mov cl, al
  7924 0000691F 08E1                <1> 	or cl, ah
  7925 00006921 80F900              <1> 	cmp cl, 0
  7926 00006924 744E                <1> 	je equalfilenames
  7927 00006926 80F920              <1> 	cmp cl, ' '
  7928 00006929 7449                <1> 	je equalfilenames
  7929 0000692B 3C2A                <1> 	cmp al, '*'
  7930 0000692D 742B                <1> 	je equalfilenames2
  7931 0000692F 80FC00              <1> 	cmp ah, 0
  7932 00006932 7410                <1> 	je nextfilename
  7933 00006934 3C00                <1> 	cmp al, 0
  7934 00006936 740C                <1> 	je nextfilename
  7935 00006938 38E0                <1> 	cmp al, ah
  7936 0000693A 74DB                <1> 	je nextnamechar
  7937                              <1> getebxzero:
  7938 0000693C 8A23                <1> 	mov ah, [ebx]
  7939 0000693E 43                  <1> 	inc ebx
  7940 0000693F 80FC00              <1> 	cmp ah, 0
  7941 00006942 75F8                <1> 	jne getebxzero
  7942                              <1> nextfilename:
  7943 00006944 81C308000000        <1> 	add ebx, 8		;;next descriptor
  7944 0000694A 89D7                <1> 	mov edi, edx
  7945 0000694C 81FB[21720000]      <1> 	cmp ebx, enddiskfileindex
  7946 00006952 72C3                <1> 	jb nextnamechar
  7947                              <1> nofileload:
  7948 00006954 BA94010000          <1> 	mov edx, 404	;;indicate not found error
  7949 00006959 C3                  <1> 	ret
  7950                              <1> equalfilenames2:
  7951 0000695A 81EB02000000        <1> 	sub ebx, 2
  7952                              <1> eqfilefind:
  7953 00006960 43                  <1> 	inc ebx
  7954 00006961 81FB[21720000]      <1> 	cmp ebx, enddiskfileindex
  7955 00006967 0F83E7FFFFFF        <1> 	jae near nofileload
  7956 0000696D 8A03                <1> 	mov al, [ebx]
  7957 0000696F 3C00                <1> 	cmp al, 0
  7958 00006971 75ED                <1> 	jne eqfilefind
  7959 00006973 43                  <1> 	inc ebx
  7960                              <1> equalfilenames:
  7961 00006974 8B4304              <1> 	mov eax, [ebx + 4] 	;;put file size in eax
  7962 00006977 8B1B                <1> 	mov ebx, [ebx]		;;put file beginning in ebx
  7963 00006979 031D[82010000]      <1> 	add ebx, [lbaad]	;;add offset to solleros
  7964 0000697F 31C9                <1> 	xor ecx, ecx
  7965 00006981 88C1                <1> 	mov cl, al			;;get excess number of sectors
  7966 00006983 D0E1                <1> 	shl cl, 1
  7967 00006985 D0E9                <1> 	shr cl, 1			;;cut off at 128
  7968 00006987 29C8                <1> 	sub eax, ecx		;;get rid of excess sectors
  7969 00006989 B500                <1> 	mov ch, 0			;;drive 0
  7970 0000698B C1E807              <1> 	shr eax, 7			;;get number of 128 sector tracks
  7971                              <1> loaddiskfile:		;;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  7972 0000698E A3[CC690000]        <1> 	mov [filetracks], eax
  7973 00006993 89F7                <1> 	mov edi, esi		;;just in case cl is 0
  7974 00006995 89DA                <1> 	mov edx, ebx
  7975 00006997 80F900              <1> 	cmp cl, 0
  7976 0000699A 7405                <1> 	je copytracksforfile
  7977 0000699C E837000000          <1> 	call diskr		;;take care of excess sectors
  7978                              <1> copytracksforfile:
  7979 000069A1 A1[CC690000]        <1> 	mov eax, [filetracks]
  7980 000069A6 3D00000000          <1> 	cmp eax, 0
  7981 000069AB 7419                <1> 	je donecopyfile
  7982 000069AD 48                  <1> 	dec eax
  7983 000069AE A3[CC690000]        <1> 	mov [filetracks], eax
  7984 000069B3 89D3                <1> 	mov ebx, edx	;;get end lba
  7985 000069B5 B180                <1> 	mov cl, 0x80
  7986 000069B7 8A2D[81010000]      <1> 	mov ch, [DriveNumber]
  7987 000069BD 89FE                <1> 	mov esi, edi	;;reset buffer
  7988 000069BF E814000000          <1> 	call diskr
  7989 000069C4 EBDB                <1> 	jmp copytracksforfile
  7990                              <1> donecopyfile:
  7991 000069C6 BA00000000          <1> 	mov edx, 0	;;no error
  7992 000069CB C3                  <1> 	ret
  7993                              <1> 	
  7994 000069CC 00000000            <1> filetracks dd 0
  7995 000069D0 00                  <1> lbad1 db 0
  7996 000069D1 00                  <1> lbad2 db 0
  7997 000069D2 00                  <1> lbad3 db 0
  7998 000069D3 00                  <1> lbad4 db 0
  7999 000069D4 00                  <1> lbad5 db 0
  8000 000069D5 00                  <1> lbad6 db 0
  8001 000069D6 6400                <1> segments dw 100
  8002                              <1> 
  8003                              <1> diskr:		;;sector count in cl, disk number in ch, 48 bit address with last 32 bits in ebx, buffer in esi, puts end buffer in edi and end lba in edx
  8004                              <1> 
  8005 000069D8 8935[ED6A0000]      <1> 	mov [bufferstartesi], esi
  8006 000069DE 891D[E96A0000]      <1> 	mov [lbaadstartebx], ebx
  8007 000069E4 31D2                <1> 	xor edx, edx
  8008 000069E6 88CA                <1> 	mov dl, cl
  8009 000069E8 01DA                <1> 	add edx, ebx
  8010 000069EA 8915[E56A0000]      <1> 	mov [lbaadend], edx
  8011 000069F0 881D[D0690000]      <1> 	mov [lbad1], bl
  8012 000069F6 883D[D1690000]      <1> 	mov [lbad2], bh
  8013 000069FC C1C310              <1> 	rol ebx, 16
  8014 000069FF 881D[D2690000]      <1> 	mov [lbad3], bl
  8015 00006A05 883D[D3690000]      <1> 	mov [lbad4], bh
  8016 00006A0B C1CB10              <1> 	ror ebx, 16
  8017                              <1> 
  8018 00006A0E B840000000          <1> 	mov eax, 0x40
  8019 00006A13 66BAF601            <1> 	mov dx, 0x1F6
  8020 00006A17 EE                  <1> 	out dx, al	;;send magic bits-add drive indicator later
  8021                              <1> 	
  8022 00006A18 30C0                <1> 	xor al, al
  8023 00006A1A 66BAF201            <1> 	mov dx, 0x1F2
  8024 00006A1E EE                  <1> 	out dx, al	;;16 bit sector count-last byte now 0
  8025                              <1> 	
  8026 00006A1F A0[D3690000]        <1> 	mov al, [lbad4]
  8027 00006A24 6642                <1> 	inc dx
  8028 00006A26 EE                  <1> 	out dx, al
  8029                              <1> 	
  8030 00006A27 A0[D4690000]        <1> 	mov al, [lbad5]
  8031 00006A2C 6642                <1> 	inc dx
  8032 00006A2E EE                  <1> 	out dx, al
  8033                              <1> 	
  8034 00006A2F A0[D5690000]        <1> 	mov al, [lbad6]
  8035 00006A34 6642                <1> 	inc dx
  8036 00006A36 EE                  <1> 	out dx, al
  8037                              <1> 	
  8038 00006A37 88C8                <1> 	mov al, cl
  8039 00006A39 66BAF201            <1> 	mov dx, 0x1F2
  8040 00006A3D EE                  <1> 	out dx, al	;;low byte of 16 bit sector count
  8041                              <1> 	
  8042 00006A3E A0[D0690000]        <1> 	mov al, [lbad1]
  8043 00006A43 6642                <1> 	inc dx
  8044 00006A45 EE                  <1> 	out dx, al
  8045                              <1> 	
  8046 00006A46 A0[D1690000]        <1> 	mov al, [lbad2]
  8047 00006A4B 6642                <1> 	inc dx
  8048 00006A4D EE                  <1> 	out dx, al
  8049                              <1> 	
  8050 00006A4E A0[D2690000]        <1> 	mov al, [lbad3]
  8051 00006A53 6642                <1> 	inc dx
  8052 00006A55 EE                  <1> 	out dx, al
  8053                              <1> 	
  8054 00006A56 B024                <1> 	mov al, 0x24
  8055 00006A58 66BAF701            <1> 	mov dx, 0x1F7
  8056 00006A5C EE                  <1> 	out dx, al	;;READ!!!
  8057 00006A5D 66BBFFFF            <1> 	mov bx, 0xFFFF		;;try 65536 times before forcing
  8058                              <1> diskrwait:
  8059 00006A61 66BAF701            <1> 	mov dx, 0x1F7
  8060 00006A65 EC                  <1> 	in al, dx
  8061 00006A66 2408                <1> 	and al, 0x08
  8062 00006A68 664B                <1> 	dec bx
  8063 00006A6A 6681FB0000          <1> 	cmp bx, 0
  8064 00006A6F 7404                <1> 	je nomorediskwait
  8065 00006A71 3C08                <1> 	cmp al, 0x08
  8066 00006A73 75EC                <1> 	jne diskrwait
  8067                              <1> nomorediskwait:
  8068 00006A75 66BB0001            <1> 	mov bx, 256
  8069                              <1> diskdataread:
  8070 00006A79 66BAF001            <1> 	mov dx, 0x1F0
  8071 00006A7D 66ED                <1> 	in ax, dx
  8072 00006A7F 668906              <1> 	mov [esi], ax
  8073 00006A82 81C602000000        <1> 	add esi, 2
  8074 00006A88 664B                <1> 	dec bx
  8075 00006A8A 6681FB0000          <1> 	cmp bx, 0
  8076 00006A8F 75E8                <1> 	jne diskdataread		;;read a sector
  8077 00006A91 FEC9                <1> 	dec cl
  8078 00006A93 80F900              <1> 	cmp cl, 0
  8079 00006A96 75C9                <1> 	jne diskrwait
  8080 00006A98 89F7                <1> 	mov edi, esi
  8081 00006A9A 8B15[E56A0000]      <1> 	mov edx, [lbaadend]
  8082 00006AA0 8B35[ED6A0000]      <1> 	mov esi, [bufferstartesi]
  8083 00006AA6 8B1D[E96A0000]      <1> 	mov ebx, [lbaadstartebx]
  8084 00006AAC C3                  <1> 	ret
  8085                              <1> 	
  8086                              <1> 	
  8087                              <1> diskold: ;;28 bits
  8088 00006AAD 6631C0              <1> 	xor ax, ax
  8089 00006AB0 66BAF101            <1> 	mov dx, 0x1F1
  8090 00006AB4 EE                  <1> 	out dx, al	;;send null byte to port
  8091 00006AB5 6642                <1> 	inc dx	;;0x1F2
  8092 00006AB7 88C8                <1> 	mov al, cl	;;get sector count
  8093 00006AB9 EE                  <1> 	out dx, al	;;send sector count
  8094 00006ABA 6642                <1> 	inc dx	;;0x1F3
  8095 00006ABC 88D8                <1> 	mov al, bl	;;get first 8 bits of address
  8096 00006ABE EE                  <1> 	out dx, al	;;send them
  8097 00006ABF 6642                <1> 	inc dx	;;0x1F4
  8098 00006AC1 C1CB08              <1> 	ror ebx, 8	;;get next 8 bits
  8099 00006AC4 88D8                <1> 	mov al, bl
  8100 00006AC6 EE                  <1> 	out dx, al
  8101 00006AC7 6642                <1> 	inc dx	;;0x1F5
  8102 00006AC9 C1CB08              <1> 	ror ebx, 8	;;again
  8103 00006ACC 88D8                <1> 	mov al, bl
  8104 00006ACE EE                  <1> 	out dx, al
  8105 00006ACF 6642                <1> 	inc dx	;;0x1F6
  8106 00006AD1 C1CB08              <1> 	ror ebx, 8
  8107 00006AD4 88D8                <1> 	mov al, bl
  8108 00006AD6 240F                <1> 	and al, 00001111b	;;last 4 bits of address
  8109 00006AD8 0CE0                <1> 	or al, 0xE0			;;majic number
  8110 00006ADA C0E504              <1> 	shl ch, 4
  8111 00006ADD 08E8                <1> 	or al, ch
  8112 00006ADF EE                  <1> 	out dx, al			;;send drive indicator, magic bits, and highest 4 bits of address
  8113 00006AE0 6642                <1> 	inc dx	;;0x1F7
  8114 00006AE2 B020                <1> 	mov al, 0x20
  8115 00006AE4 EE                  <1> 	out dx, al			;;execute read command
  8116                              <1> 	
  8117 00006AE5 00000000            <1> lbaadend dd 0
  8118 00006AE9 00000000            <1> lbaadstartebx dd 0
  8119 00006AED 00000000            <1> bufferstartesi dd 0
  8120                                  	%include 'source/threads.asm'
  8121                              <1> ;;THIS IS MY FIRST ATTEMPT AT IMPLEMENTING THREADS
  8122                              <1> threadstarttest:
  8123 00006AF1 E9DF040000          <1>     jmp startthreads
  8124                              <1> mainthread:
  8125 00006AF6 F4                  <1> 	hlt		;;this does not work properly
  8126 00006AF7 EBFD                <1> 	jmp mainthread
  8127                              <1> 	
  8128                              <1> nwcmdst:
  8129 00006AF9 B0FD                <1> 	mov al, 11111101b
  8130 00006AFB E621                <1> 	out 0x21, al
  8131 00006AFD C605[376B0000]00    <1> 	mov byte [threadson], 0
  8132 00006B04 E945C5FFFF          <1> 	jmp nwcmd
  8133                              <1> 	
  8134                              <1> modelthread:
  8135 00006B09 668B1D[54710000]    <1> 	mov bx, [currentthread]
  8136 00006B10 B001                <1> 	mov al, 1
  8137 00006B12 B409                <1> 	mov ah, 9
  8138 00006B14 31C9                <1> 	xor ecx, ecx
  8139 00006B16 6689D9              <1> 	mov cx, bx
  8140 00006B19 CD30                <1> 	int 0x30
  8141                              <1> 	
  8142 00006B1B B90000DEC0          <1> 	mov ecx, 0xC0DE0000
  8143 00006B20 6689D9              <1> 	mov cx, bx
  8144 00006B23 CD30                <1> 	int 0x30
  8145                              <1> 	
  8146 00006B25 B90000ADDE          <1> 	mov ecx, 0xDEAD0000
  8147 00006B2A 6689D9              <1> 	mov cx, bx
  8148 00006B2D CD30                <1> 	int 0x30
  8149                              <1> 	
  8150 00006B2F CD40                <1> 	int 0x40	;;skip this thread three times to ensure that all threads run
  8151 00006B31 CD40                <1> 	int 0x40
  8152 00006B33 CD40                <1> 	int 0x40
  8153                              <1> 	
  8154 00006B35 EBC2                <1> 	jmp nwcmdst
  8155                              <1> 	
  8156                              <1> 	
  8157 00006B37 00                  <1> threadson db 0
  8158 00006B38 04000000            <1> lastthread dd 4
  8159                              <1> 
  8160                              <1> thrdtst:
  8161 00006B3C [096B0000]<rept>    <1> times 256 dd modelthread	;;could go up to 2048, but that takes too long
  8162                              <1> thrdtstend:
  8163                              <1> 
  8164 00006F3C 00000000            <1> 	espold dd 0
  8165                              <1> 
  8166                              <1> threadfork:
  8167 00006F40 C605[376B0000]01    <1> 	mov byte [threadson], 1
  8168 00006F47 60                  <1> 	pushad
  8169 00006F48 66B80040            <1> 	mov ax, 0x4000	;;this is the divider for the PIT
  8170 00006F4C E640                <1> 	out 0x40, al
  8171 00006F4E 66C1C008            <1> 	rol ax, 8
  8172 00006F52 E640                <1> 	out 0x40, al
  8173                              <1> 	
  8174 00006F54 8CC8                <1> 	mov eax, cs
  8175 00006F56 89C2                <1> 	mov edx, eax
  8176 00006F58 8B4C2428            <1> 	mov ecx, [esp + 40]
  8177 00006F5C 81C900020000        <1> 	or ecx, 0x200
  8178 00006F62 89E3                <1> 	mov ebx, esp
  8179 00006F64 BC[67960000]        <1> 	mov esp, stackdummy
  8180 00006F69 90                  <1> 	nop
  8181                              <1> 	
  8182 00006F6A 60                  <1> 	pushad
  8183 00006F6B B8[F66A0000]        <1> 	mov eax, mainthread
  8184 00006F70 89442420            <1> 	mov [esp + 32], eax
  8185 00006F74 89542424            <1> 	mov [esp + 36], edx
  8186 00006F78 894C2428            <1> 	mov [esp + 40], ecx
  8187 00006F7C 8925[5F720000]      <1> 	mov [threadlist], esp
  8188                              <1> 	
  8189 00006F82 891D[3C6F0000]      <1> 	mov [espold], ebx
  8190 00006F88 89F0                <1> 	mov eax, esi
  8191 00006F8A BC[679A0000]        <1> 	mov esp, stack1
  8192 00006F8F 8B1D[386B0000]      <1> 	mov ebx, [lastthread]
  8193 00006F95 C1E30A              <1> 	shl ebx, 10
  8194 00006F98 01DC                <1> 	add esp, ebx
  8195 00006F9A C1EB0A              <1> 	shr ebx, 10
  8196 00006F9D 90                  <1> 	nop
  8197 00006F9E 60                  <1> 	pushad
  8198 00006F9F 89442420            <1> 	mov [esp + 32], eax
  8199 00006FA3 89542424            <1> 	mov [esp + 36], edx
  8200 00006FA7 894C2428            <1> 	mov [esp + 40], ecx
  8201 00006FAB 89A3[5F720000]      <1> 	mov [threadlist + ebx], esp
  8202 00006FB1 8B25[3C6F0000]      <1> 	mov esp, [espold]
  8203 00006FB7 81C304000000        <1> 	add ebx, 4
  8204 00006FBD 89A3[5F720000]      <1> 	mov [threadlist + ebx], esp
  8205 00006FC3 81C304000000        <1> 	add ebx, 4
  8206 00006FC9 891D[386B0000]      <1> 	mov [lastthread], ebx
  8207 00006FCF B020                <1> 	mov al, 0x20
  8208 00006FD1 E620                <1> 	out 0x20, al
  8209 00006FD3 61                  <1> 	popad
  8210 00006FD4 C3                  <1> 	ret
  8211                              <1> 
  8212                              <1> startthreads:
  8213 00006FD5 C605[376B0000]01    <1> 	mov byte [threadson], 1
  8214 00006FDC 60                  <1> 	pushad
  8215 00006FDD 66B800A0            <1> 	mov ax, 0xA000	;;this is the divider for the PIT
  8216 00006FE1 E640                <1> 	out 0x40, al
  8217 00006FE3 66C1C008            <1> 	rol ax, 8
  8218 00006FE7 E640                <1> 	out 0x40, al
  8219                              <1> 	
  8220 00006FE9 8CC8                <1> 	mov eax, cs
  8221 00006FEB 89C2                <1> 	mov edx, eax
  8222 00006FED 8B4C2428            <1> 	mov ecx, [esp + 40]
  8223 00006FF1 81C900020000        <1> 	or ecx, 0x200
  8224 00006FF7 89E3                <1> 	mov ebx, esp
  8225 00006FF9 BC[67960000]        <1> 	mov esp, stackdummy
  8226 00006FFE 90                  <1> 	nop
  8227                              <1> 	
  8228 00006FFF 60                  <1> 	pushad
  8229 00007000 B8[F66A0000]        <1> 	mov eax, mainthread
  8230 00007005 89442420            <1> 	mov [esp + 32], eax
  8231 00007009 89542424            <1> 	mov [esp + 36], edx
  8232 0000700D 894C2428            <1> 	mov [esp + 40], ecx
  8233 00007011 8925[5F720000]      <1> 	mov [threadlist], esp
  8234                              <1> 
  8235                              <1> 			;;that above setup the dummy thread which for some reason does not run
  8236                              <1> 			;;this below will setup the threads found in thrdtst
  8237                              <1> 
  8238                              <1> testthreads:
  8239 00007017 BE[3C6B0000]        <1> 	mov esi, thrdtst
  8240 0000701C BC[679A0000]        <1> 	mov esp, stack1
  8241 00007021 BF[5F720000]        <1> 	mov edi, threadlist
  8242 00007026 81C704000000        <1> 	add edi, 4
  8243                              <1> nxtthreadld:
  8244 0000702C 60                  <1> 	pushad
  8245 0000702D 8B06                <1> 	mov eax, [esi]
  8246 0000702F 89442420            <1> 	mov [esp + 32], eax
  8247 00007033 89542424            <1> 	mov [esp + 36], edx
  8248 00007037 894C2428            <1> 	mov [esp + 40], ecx
  8249 0000703B 8927                <1> 	mov [edi], esp
  8250 0000703D 81C400040000        <1> 	add esp, 1024
  8251 00007043 81C604000000        <1> 	add esi, 4
  8252 00007049 81C704000000        <1> 	add edi, 4
  8253 0000704F 81FF[67920000]      <1> 	cmp edi, threadlistend
  8254 00007055 0F8322000000        <1> 	jae near nomorethreadspace
  8255 0000705B 81FC[67A22000]      <1> 	cmp esp, bssend
  8256 00007061 0F8350000000        <1> 	jae near nomorestackspace
  8257 00007067 81FE[3C6F0000]      <1> 	cmp esi, thrdtstend
  8258 0000706D 72BD                <1> 	jb nxtthreadld
  8259 0000706F 89DC                <1> 	mov esp, ebx	
  8260                              <1> 	;mov al, 0xFE
  8261                              <1> 	;out 0x21, al
  8262 00007071 30C0                <1> 	xor al, al
  8263 00007073 E621                <1> 	out 0x21, al
  8264 00007075 B020                <1> 	mov al, 0x20
  8265 00007077 E620                <1> 	out 0x20, al
  8266 00007079 61                  <1> 	popad
  8267 0000707A FB                  <1> 	sti
  8268 0000707B EBFE                <1> 	jmp $	;;wait for the irq to hook
  8269                              <1> 	
  8270                              <1> nomorethreadspace:
  8271 0000707D BE[93700000]        <1> 	mov esi, nmts
  8272 00007082 E870B9FFFF          <1> 	call print
  8273 00007087 C605[376B0000]00    <1> 	mov byte [threadson], 0
  8274 0000708E E9BBBFFFFF          <1> 	jmp nwcmd
  8275 00007093 74656820636F6C6F6E- <1> nmts	db "teh colonel no can haz moar treds",13,10,0
  8276 0000709C 656C206E6F2063616E- <1>
  8277 000070A5 2068617A206D6F6172- <1>
  8278 000070AE 2074726564730D0A00  <1>
  8279                              <1> 
  8280                              <1> nomorestackspace:
  8281 000070B7 BE[CD700000]        <1> 	mov esi, nmss
  8282 000070BC E836B9FFFF          <1> 	call print
  8283 000070C1 C605[376B0000]00    <1> 	mov byte [threadson], 0
  8284 000070C8 E981BFFFFF          <1> 	jmp nwcmd
  8285 000070CD 74656820636F6C6F6E- <1> nmss	db "teh colonel no can haz moar staqz",13,10,0
  8286 000070D6 656C206E6F2063616E- <1>
  8287 000070DF 2068617A206D6F6172- <1>
  8288 000070E8 20737461717A0D0A00  <1>
  8289                              <1> 	
  8290                              <1> threadswitch:
  8291 000070F1 FA                  <1> 	cli
  8292 000070F2 60                  <1> 	pushad
  8293 000070F3 BF[5F720000]        <1> 	mov edi, threadlist
  8294 000070F8 31C0                <1> 	xor eax, eax
  8295 000070FA 66A1[54710000]      <1> 	mov ax, [currentthread]
  8296 00007100 6640                <1> 	inc ax
  8297 00007102 66A3[54710000]      <1> 	mov [currentthread], ax
  8298 00007108 6648                <1> 	dec ax
  8299 0000710A C1E002              <1> 	shl eax, 2
  8300 0000710D 01C7                <1> 	add edi, eax
  8301 0000710F 8927                <1> 	mov [edi], esp
  8302 00007111 81C704000000        <1> 	add edi, 4
  8303 00007117 81FF[67920000]      <1> 	cmp edi, threadlistend
  8304 0000711D 0F830D000000        <1> 	jae near nookespthread
  8305 00007123 8B07                <1> 	mov eax, [edi]
  8306 00007125 3D00000000          <1> 	cmp eax, 0
  8307 0000712A 0F851B000000        <1> 	jne near okespthread
  8308                              <1> nookespthread:
  8309 00007130 BF[5F720000]        <1> 	mov edi, threadlist
  8310 00007135 6631C0              <1> 	xor ax, ax
  8311 00007138 66A3[54710000]      <1> 	mov [currentthread], ax
  8312 0000713E 8B07                <1> 	mov eax, [edi]
  8313 00007140 3D00000000          <1> 	cmp eax, 0
  8314 00007145 0F84AEF9FFFF        <1> 	je near nwcmdst
  8315                              <1> okespthread:
  8316 0000714B 89C4                <1> 	mov esp, eax
  8317 0000714D B020                <1> 	mov al, 0x20
  8318 0000714F E620                <1> 	out 0x20, al
  8319 00007151 61                  <1> 	popad
  8320 00007152 FB                  <1> 	sti
  8321 00007153 CF                  <1> 	iretd
  8322                              <1> 	
  8323 00007154 0000                <1> currentthread dw 0
  8324                                      %include 'fileindex.asm'
  8325                              <1> diskfileindex:
  8326 00007156 646F7300            <1> db "dos",0
  8327 0000715A 43000000            <1> dd (f0-$$)/512
  8328 0000715E 01000000            <1> dd (f1-f0)/512
  8329 00007162 646F737465737400    <1> db "dostest",0
  8330 0000716A 44000000            <1> dd (f1-$$)/512
  8331 0000716E 01000000            <1> dd (f2-f1)/512
  8332 00007172 65787000            <1> db "exp",0
  8333 00007176 45000000            <1> dd (f2-$$)/512
  8334 0000717A 01000000            <1> dd (f3-f2)/512
  8335 0000717E 666F726B00          <1> db "fork",0
  8336 00007183 46000000            <1> dd (f3-$$)/512
  8337 00007187 01000000            <1> dd (f4-f3)/512
  8338 0000718B 6670757465737400    <1> db "fputest",0
  8339 00007193 47000000            <1> dd (f4-$$)/512
  8340 00007197 01000000            <1> dd (f5-f4)/512
  8341 0000719B 6C696E757800        <1> db "linux",0
  8342 000071A1 48000000            <1> dd (f5-$$)/512
  8343 000071A5 01000000            <1> dd (f6-f5)/512
  8344 000071A9 736F6C6C65726F732E- <1> db "solleros.bmp",0
  8345 000071B2 626D7000            <1>
  8346 000071B6 49000000            <1> dd (f6-$$)/512
  8347 000071BA B0020000            <1> dd (f7-f6)/512
  8348 000071BE 736F6C6C65726F732E- <1> db "solleros.txt",0
  8349 000071C7 74787400            <1>
  8350 000071CB F9020000            <1> dd (f7-$$)/512
  8351 000071CF 01000000            <1> dd (f8-f7)/512
  8352 000071D3 736F756E6400        <1> db "sound",0
  8353 000071D9 FA020000            <1> dd (f8-$$)/512
  8354 000071DD 01000000            <1> dd (f9-f8)/512
  8355 000071E1 74656C7900          <1> db "tely",0
  8356 000071E6 FB020000            <1> dd (f9-$$)/512
  8357 000071EA 01000000            <1> dd (f10-f9)/512
  8358 000071EE 74696D6500          <1> db "time",0
  8359 000071F3 FC020000            <1> dd (f10-$$)/512
  8360 000071F7 02000000            <1> dd (f11-f10)/512
  8361 000071FB 7475746F7269616C2E- <1> db "tutorial.bat",0
  8362 00007204 62617400            <1>
  8363 00007208 FE020000            <1> dd (f11-$$)/512
  8364 0000720C 03000000            <1> dd (f12-f11)/512
  8365 00007210 756E66737465737400  <1> db "unfstest",0
  8366 00007219 01030000            <1> dd (f12-$$)/512
  8367 0000721D B9020000            <1> dd (f13-f12)/512
  8368                              <1> enddiskfileindex:
  8369                              <1> 
  8370                                  	%include 'source/msg.asm'
  8371 00007221 6578697400          <1> 	exitmsg db	"exit",0
  8372 00007226 50726F6772616D2022- <1> 	notfound1 db "Program ",34,0
  8373 0000722F 00                  <1>
  8374 00007230 22206E6F7420666F75- <1> 	notfound2 db  34," not found.",13,10,0
  8375 00007239 6E642E0D0A00        <1>
  8376 0000723F 757365726E616D653A- <1> 	userask db "username:",0
  8377 00007248 00                  <1>
  8378 00007249 70617373776F72643A- <1> 	pwdask	db	"password:",0
  8379 00007252 00                  <1>
  8380 00007253 40536F6C6C65724F53- <1> 	location	db	"@SollerOS]:",0
  8381 0000725C 5D3A00              <1>
  8382 0000725F 0D0A00              <1> 	line	db	13,10,0
  8383 00007262 200900              <1> 	dirtab 	db " ",9,0
  8384                              <1> 	userlst:
  8385 00007265 7573657200          <1> 			db "user",0
  8386 0000726A 70617373776F726400  <1> 			db "password",0
  8387 00007273 726F6F7400          <1> 			db "root",0
  8388 00007278 617765736F6D65706F- <1> 			db "awesomepower",0
  8389 00007281 77657200            <1>
  8390 00007285 6E00                <1> 			db "n",0	;;use for quick entry-a quick double n followed by a double enter will get you in
  8391 00007287 00                  <1> 			db 0
  8392                              <1> 	userlstend:
  8393                              <1> 	
  8394 00007287 <incbin>            <1> fonts:	incbin 'source/precompiled/fonts.pak'
  8395                              <1> fontend:
  8396                              <1> 
  8397                              <1> 
  8398                              <1> mcursor:
  8399 00008288 01                  <1> 	db	00000001b
  8400 00008289 81                  <1> 	db	10000001b
  8401 0000828A C1                  <1> 	db	11000001b
  8402 0000828B E1                  <1> 	db	11100001b
  8403 0000828C F1                  <1> 	db	11110001b
  8404 0000828D F9                  <1> 	db	11111001b
  8405 0000828E FD                  <1> 	db	11111101b
  8406 0000828F FF                  <1> 	db	11111111b
  8407 00008290 F9                  <1> 	db	11111001b
  8408 00008291 B9                  <1> 	db	10111001b
  8409 00008292 39                  <1> 	db	00111001b
  8410 00008293 1C                  <1> 	db	00011100b
  8411 00008294 1C                  <1> 	db	00011100b
  8412 00008295 0E                  <1> 	db	00001110b
  8413 00008296 0E                  <1> 	db	00001110b
  8414 00008297 0C                  <1> 	db	00001100b
  8415                              <1> 
  8416                              <1> ;cursorbmp:
  8417                              <1> ;	db	1,0,0,0,0,0,0,0
  8418                              <1> ;	db	1,1,0,0,0,0,0,0
  8419                              <1> ;	db	1,1,1,0,0,0,0,0
  8420                              <1> ;	db	1,1,1,1,0,0,0,0
  8421                              <1> ;	db	1,1,1,1,1,0,0,0
  8422                              <1> ;	db	1,1,1,1,1,1,0,0
  8423                              <1> ;	db	1,1,1,1,1,1,1,0
  8424                              <1> ;	db	1,1,1,1,1,1,1,1
  8425                              <1> ;	db	1,1,1,1,1,1,0,0
  8426                              <1> ;	db	1,1,0,1,1,1,0,0
  8427                              <1> ;	db	1,0,0,1,1,1,0,0
  8428                              <1> ;	db	0,0,0,0,1,1,1,0
  8429                              <1> ;	db	0,0,0,0,1,1,1,0
  8430                              <1> ;	db	0,0,0,0,0,1,1,1
  8431                              <1> ;	db	0,0,0,0,0,1,1,1
  8432                              <1> ;	db	0,0,0,0,0,1,1,0
  8433                              <1> ;cursorbmpend:
  8434                              <1> 
  8435                              <1> 
  8436                              <1> VBEMODEBLOCK:
  8437 00008298 00<rept>            <1> vbesignature 		times 4 db 0	;VBE Signature
  8438 0000829C 00<rept>            <1> vbeversion  		times 2 db 0	;VBE Version
  8439 0000829E 00<rept>            <1> oemstringptr  		times 4 db 0	;Pointer to OEM String
  8440 000082A2 00<rept>            <1> capabilities 		times 4 db 0	;Capabilities of graphics cont.
  8441 000082A6 00<rept>            <1> videomodeptr 		times 4 db 0	;Pointer to Video Mode List
  8442 000082AA 00<rept>            <1> totalmemory   		times 2 db 0	;number of 64Kb memory blocks
  8443 000082AC 00<rept>            <1> oemsoftwarerev  	times 2 db 0	;VBE implementation Software revision
  8444 000082AE 00<rept>            <1> oemvendornameptr 	times 4 db 0	;Pointer to Vendor Name String
  8445 000082B2 00<rept>            <1> oemproductnameptr 	times 4 db 0	;Pointer to Product Name String
  8446 000082B6 00<rept>            <1> oemproductrevptr 	times 4 db 0	;Pointer to Product Revision String
  8447 000082BA 00<rept>            <1> reserved			times 222 db 0	;Reserved for VBE implementation scratch area
  8448 00008398 00<rept>            <1> oemdata 			times 256 db 0	;Data Area for OEM Strings
  8449                              <1> 
  8450                              <1> 
  8451                              <1> VBEMODEINFOBLOCK:
  8452                              <1> ;Mandatory information for all VBE revision
  8453 00008498 00<rept>            <1> modeattributes   	times 2 db 0	;Mode attributes
  8454 0000849A 00                  <1> winaattributes   	times 1 db 0	;Window A attributes
  8455 0000849B 00                  <1> winbattributes   	times 1 db 0	;Window B attributes
  8456 0000849C 00<rept>            <1> wingranularity   	times 2 db 0	;Window granularity
  8457 0000849E 00<rept>            <1> winsize          	times 2 db 0	;Window size
  8458 000084A0 00<rept>            <1> winasegment      	times 2 db 0	;Window A start segment
  8459 000084A2 00<rept>            <1> winbsegment      	times 2 db 0	;Window B start segment
  8460 000084A4 00<rept>            <1> winfuncptr       	times 4 db 0	;pointer to window function
  8461 000084A8 00<rept>            <1> bytesperscanline 	times 2 db 0	;Bytes per scan line
  8462                              <1> 
  8463                              <1> ;Mandatory information for VBE 1.2 and above
  8464 000084AA 00<rept>            <1> xresolution     	times 2 db 0	;Horizontal resolution in pixel or chars
  8465 000084AC 00<rept>            <1> yresolution	    	times 2 db 0	;Vertical resolution in pixel or chars
  8466 000084AE 00                  <1> xcharsize       	times 1 db 0	;Character cell width in pixel
  8467 000084AF 00                  <1> ycharsize       	times 1 db 0	;Character cell height in pixel
  8468 000084B0 00                  <1> numberofplanes  	times 1 db 0	;Number of memory planes
  8469 000084B1 00                  <1> bitsperpixel    	times 1 db 0	;Bits per pixel
  8470 000084B2 00                  <1> numberofbanks   	times 1 db 0	;Number of banks
  8471 000084B3 00                  <1> memorymodel     	times 1 db 0	;Memory model type
  8472 000084B4 00                  <1> banksize        	times 1 db 0	;Bank size in KB
  8473 000084B5 00                  <1> numberofimagepages	times 1 db 0	;Number of images
  8474 000084B6 00                  <1> reserved1       	times 1 db 0	;Reserved for page function
  8475                              <1> 
  8476                              <1> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  8477 000084B7 00                  <1> redmasksize			times 1 db 0	;Size of direct color red mask in bits
  8478 000084B8 00                  <1> redfieldposition	times 1 db 0	;Bit position of lsb of red bask
  8479 000084B9 00                  <1> greenmasksize   	times 1 db 0	;Size of direct color green mask in bits
  8480 000084BA 00                  <1> greenfieldposition	times 1 db 0	;Bit position of lsb of green bask
  8481 000084BB 00                  <1> bluemasksize		times 1 db 0	;Size of direct color blue mask in bits
  8482 000084BC 00                  <1> bluefieldposition	times 1 db 0	;Bit position of lsb of blue bask
  8483 000084BD 00                  <1> rsvdmasksize        times 1	db 0	;Size of direct color reserved mask in bits
  8484 000084BE 00                  <1> rsvdfieldposition	times 1	db 0	;Bit position of lsb of reserved bask
  8485 000084BF 00                  <1> directcolormodeinfo	times 1 db 0	;Direct color mode attributes
  8486                              <1> 
  8487                              <1> ;Mandatory information for VBE 2.0 and above
  8488 000084C0 00<rept>            <1> physbaseptr 		times 4 db 0	;Physical address for flat frame buffer
  8489 000084C4 00<rept>            <1> offscreenmemoffset 	times 4 db 0	;Pointer to start of off screen memory
  8490 000084C8 00<rept>            <1> offscreenmemsize 	times 2 db 0    ;Amount of off screen memory in 1Kb units
  8491 000084CA 00<rept>            <1> reserved2 			times 206 db 0  ;Remainder of ModeInfoBlock
  8492                                  	;%include 'source/memory.asm'
  8493                                  	%include 'source/buf.asm'
  8494 00008598 4255465354415254    <1> db "BUFSTART"
  8495                              <1> [section .bss]
  8496                              <1> bssstart:
  8497                              <1> stack:
  8498 00000000 <res 00001000>      <1> 	resb 4096
  8499                              <1> stackend:
  8500                              <1> graphicstable: ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
  8501 00001000 <res 00000200>      <1> 	resb 200h 
  8502                              <1> 	graphicstableend:
  8503                              <1> mousecolorbuf: ;where the gui under the mouse is stored
  8504 00001200 <res 00000100>      <1> 	resb 256
  8505                              <1> mcolorend:
  8506 00001300 <res 00000200>      <1> fileindex: resb 200h
  8507                              <1> fileindexend:
  8508 00001500 <res 00000001>      <1> IFON resb 1 
  8509 00001501 <res 00000064>      <1> IFTRUE resb 100 
  8510 00001565 <res 00000004>      <1> BATCHPOS resb 4 
  8511 00001569 <res 00000001>      <1> BATCHISON resb 1 
  8512 0000156A <res 00000001>      <1> LOOPON resb 1 
  8513 0000156B <res 00000004>      <1> LOOPPOS	resb 4 
  8514 0000156F <res 00000500>      <1> variables: 	resb 500h 
  8515 00001A6F <res 00000001>      <1> varend: resb 1
  8516 00001A70 <res 00000100>      <1> buftxt2: resb 100h
  8517 00001B70 <res 0000000A>      <1> resb 10
  8518 00001B7A <res 00000200>      <1> buftxt: resb 200h 
  8519                              <1> buftxtend:
  8520 00001D7A <res 00000014>      <1> buf2:	resb 20 
  8521 00001D8E <res 00000001>      <1> numbuf: resb 1 
  8522 00001D8F <res 00005000>      <1> videobuf 		resb (160*64*2)	;1280x1024pixels in characters
  8523 00006D8F <res 000000C8>      <1> videobufend		resb 200
  8524 00006E57 <res 00000004>      <1> lastcommandpos: resb 4
  8525 00006E5B <res 00000004>      <1> currentcommandpos: resb 4
  8526                              <1> commandbuf:
  8527 00006E5F <res 00000400>      <1> resb 1024
  8528                              <1> commandbufend:
  8529                              <1> rbuffstart: ;for use with networking
  8530                              <1> ;resb 8212
  8531                              <1> threadlist:	;;this buffer will hold the stack locations of all of the threads, up to 2048
  8532 0000725F <res 00002008>      <1> 	resb 2050*4
  8533                              <1> threadlistend:
  8534                              <1> stacks:		;;the stacks will go on forever until end of memory
  8535 00009267 <res 00000400>      <1> 	resb 1024
  8536                              <1> stackdummy:
  8537 00009667 <res 00000400>      <1> 	resb 1024
  8538                              <1> stack1:
  8539 00009A67 <res 00200800>      <1> 	resb 1024*2050	;;woah, thats a lot of space for stacks
  8540                              <1> bssend:		;;from here on, it is not kernel space so apps can be loaded here.
  8541                              <1> [section .text]
  8542                                      %include 'files.asm'
  8543 000085A0 00<rept>            <1> align 512,db 0
  8544                              <1> f0:
  8545 000085A0 <incbin>            <1> incbin "included/dos"
  8546 00008745 00<rept>            <1> align 512,db 0
  8547                              <1> f1:
  8548 00008745 <incbin>            <1> incbin "included/dostest"
  8549 00008945 00<rept>            <1> align 512,db 0
  8550                              <1> f2:
  8551 00008945 <incbin>            <1> incbin "included/exp"
  8552 00008B27 00<rept>            <1> align 512,db 0
  8553                              <1> f3:
  8554 00008B27 <incbin>            <1> incbin "included/fork"
  8555 00008C67 00<rept>            <1> align 512,db 0
  8556                              <1> f4:
  8557 00008C67 <incbin>            <1> incbin "included/fputest"
  8558 00008E9F 00<rept>            <1> align 512,db 0
  8559                              <1> f5:
  8560 00008E9F <incbin>            <1> incbin "included/linux"
  8561 00009004 00<rept>            <1> align 512,db 0
  8562                              <1> f6:
  8563 00009004 <incbin>            <1> incbin "included/solleros.bmp"
  8564 0005F1E6 00<rept>            <1> align 512,db 0
  8565                              <1> f7:
  8566 0005F1E6 <incbin>            <1> incbin "included/solleros.txt"
  8567 0005F376 00<rept>            <1> align 512,db 0
  8568                              <1> f8:
  8569 0005F376 <incbin>            <1> incbin "included/sound"
  8570 0005F4F4 00<rept>            <1> align 512,db 0
  8571                              <1> f9:
  8572 0005F4F4 <incbin>            <1> incbin "included/tely"
  8573 0005F779 00<rept>            <1> align 512,db 0
  8574                              <1> f10:
  8575 0005F779 <incbin>            <1> incbin "included/time"
  8576 0005FA7B 00<rept>            <1> align 512,db 0
  8577                              <1> f11:
  8578 0005FA7B <incbin>            <1> incbin "included/tutorial.bat"
  8579 000600AA 00<rept>            <1> align 512,db 0
  8580                              <1> f12:
  8581 000600AA <incbin>            <1> incbin "included/unfstest"
  8582                              <1> align 512,db 0
  8583                              <1> f13:
