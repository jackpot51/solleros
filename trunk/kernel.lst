     1                                  [BITS 16]
     2                                      %include 'source/menu.asm'
     3                              <1>     ; MENU.ASM
     4                              <1> %include 'source/signature.asm'
     5                              <2> signature:	;used by bootloader to find SollerOS, is totally awesome
     6 00000000 EDA55ED1            <2> dd 0xD15EA5ED	;diseased
     7 00000004 15D000B1            <2> dd 0xB100D015	;blood is
     8 00000008 EDFED2BA            <2> dd 0xBAD2FEED	;bad to feed
     9 0000000C 95D0112A            <2> dd 0x2A11D095	;to all dogs
    10 00000010 52A71CA1            <2> dd 0xA11CA752	;all cats too.
    11 00000014 0F751015            <2> dd 0x1510750F   ;is lots of
    12 00000018 75CAADDE            <2> dd 0xDEADCA75   ;dead cats
    13 0000001C 95D0ADDE            <2> dd 0xDEADD095   ;dead dogs
    14 00000020 86000000            <2> dd 134			;version
    15 00000024 534F4C4C45524F53    <2> db "SOLLEROS"
    16                              <2> signatureend:
    17                              <1> menustart:	
    18 0000002C 8CC8                <1> 	mov ax, cs
    19 0000002E 8ED8                <1> 	mov ds, ax
    20 00000030 8EC0                <1> 	mov es, ax
    21 00000032 8ED0                <1> 	mov ss, ax
    22 00000034 880E[8101]          <1> 	mov [DriveNumber], cl
    23 00000038 668916[8201]        <1> 	mov [lbaad], edx
    24 0000003D B800A0              <1> 	mov ax, 0xA000
    25 00000040 8EE8                <1> 	mov gs, ax
    26 00000042 B81200              <1> 	mov ax, 12h
    27 00000045 31DB                <1> 	xor bx, bx
    28 00000047 CD10                <1> 	int 10h
    29                              <1> guiload:
    30 00000049 BE[8F02]            <1> 	mov si, bootmsg
    31 0000004C E84C01              <1> 	call printrm
    32 0000004F 31C0                <1> 	xor ax, ax
    33 00000051 CD16                <1> 	int 16h
    34 00000053 3C79                <1> 	cmp al, "y"
    35 00000055 0F85F600            <1> 	jne near guiload2
    36                              <1> guiloadagain:
    37 00000059 B8004F              <1> 	mov ax, 04F00h
    38 0000005C BF[7983]            <1> 	mov di, VBEMODEBLOCK
    39 0000005F CD10                <1> 	int 10h
    40 00000061 BE[9B83]            <1> 	mov si, reserved
    41 00000064 81EE0200            <1> 	sub si, 2
    42                              <1> findvideomodes:
    43 00000068 81C60200            <1> 	add si, 2
    44 0000006C 8B0C                <1> 	mov cx, [si]
    45 0000006E 81F9FFFF            <1> 	cmp cx, 0xFFFF
    46 00000072 0F840A00            <1> 	je near nextvmode
    47 00000076 81FE[7984]          <1> 	cmp si, oemdata
    48 0000007A 0F83D100            <1> 	jae near guiload2	;;kill if no valid list is found
    49 0000007E EBE8                <1> 	jmp findvideomodes 	
    50                              <1> ;;debug,shows vmodes available
    51                              <1> nextvmode:
    52 00000080 81EE0200            <1> 	sub si, 2
    53 00000084 81FE[9B83]          <1> 	cmp si, reserved
    54 00000088 0F82CDFF            <1> 	jb near guiloadagain
    55 0000008C 8B0C                <1> 	mov cx, [si]
    56 0000008E 81F9FFFF            <1> 	cmp cx, 0xFFFF
    57 00000092 0F84EAFF            <1> 	je near nextvmode
    58 00000096 81C10040            <1> 	add cx, 0x4000 		;;Linear Frame Buffer
    59 0000009A B8014F              <1> 	mov ax, 04F01h
    60 0000009D BF[7985]            <1> 	mov di, VBEMODEINFOBLOCK
    61 000000A0 890E[8601]          <1> 	mov [vesamode], cx
    62 000000A4 CD10                <1> 	int 10h
    63 000000A6 A0[9285]            <1> 	mov al, [bitsperpixel]
    64 000000A9 3C10                <1> 	cmp al, 16
    65 000000AB 75D3                <1> 	jne nextvmode
    66 000000AD 8936[8801]          <1> 	mov [videomodecache], si
    67 000000B1 80FC00              <1> 	cmp ah, 0
    68 000000B4 0F842200            <1> 	je near setvesamode
    69 000000B8 EBC6                <1> 	jmp nextvmode
    70 000000BA 0A0D49732074686973- <1> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
    71 000000C3 20766964656F206D6F- <1>
    72 000000CC 6465204F4B3F28792F- <1>
    73 000000D5 6E290D0A00          <1>
    74                              <1> setvesamode:
    75 000000DA 8B0E[8B85]          <1> 	mov cx, [xresolution]
    76 000000DE E8D200              <1> 	call decshow
    77 000000E1 B078                <1> 	mov al, "x"
    78 000000E3 E83A01              <1> 	call char
    79 000000E6 8B0E[8D85]          <1> 	mov cx, [yresolution]
    80 000000EA E8C600              <1> 	call decshow
    81 000000ED B040                <1> 	mov al, "@"
    82 000000EF E82E01              <1> 	call char
    83 000000F2 8A0E[9285]          <1> 	mov cl, [bitsperpixel]
    84 000000F6 E8BA00              <1> 	call decshow
    85 000000F9 BE[BA00]            <1> 	mov si, isthisvideook
    86 000000FC E89C00              <1> 	call printrm
    87 000000FF 31C0                <1> 	xor ax, ax
    88 00000101 CD16                <1> 	int 16h
    89 00000103 8B36[8801]          <1> 	mov si, [videomodecache]
    90 00000107 3C79                <1> 	cmp al, "y"
    91 00000109 0F8573FF            <1> 	jne near nextvmode
    92 0000010D 8B16[8B85]          <1> 	mov dx, [xresolution]
    93 00000111 8B0E[8D85]          <1> 	mov cx, [yresolution]
    94 00000115 8916[195E]          <1> 	mov [resolutionx], dx
    95 00000119 890E[175E]          <1> 	mov [resolutiony], cx
    96 0000011D 01D2                <1> 	add dx, dx
    97 0000011F 8916[1B5E]          <1> 	mov [resolutionx2], dx
    98 00000123 31D2                <1> 	xor dx, dx
    99 00000125 31C9                <1> 	xor cx, cx
   100 00000127 B8024F              <1> 	mov ax, 04F02h
   101 0000012A 8B1E[8601]          <1> 	mov bx, [vesamode]
   102 0000012E CD10                <1> 	int 10h		;;enter VESA mode
   103 00000130 C606[8A01]00        <1> 	mov byte [guinodo], 0
   104 00000135 C606[5E4F]01        <1> 	mov byte [guion], 1
   105 0000013A 6631C0              <1> 	xor eax, eax
   106 0000013D 6631DB              <1> 	xor ebx, ebx
   107 00000140 6631C9              <1> 	xor ecx, ecx
   108 00000143 6631D2              <1> 	xor edx, edx
   109 00000146 6631F6              <1> 	xor esi, esi
   110 00000149 6631FF              <1> 	xor edi, edi	;;reset registers
   111 0000014C E95A01              <1> 	jmp pmode
   112                              <1> guiload2:
   113 0000014F B9E001              <1> 	mov cx, 480
   114 00000152 BA8002              <1> 	mov dx, 640
   115 00000155 8916[195E]          <1> 	mov [resolutionx], dx
   116 00000159 01D2                <1> 	add dx, dx
   117 0000015B 8916[1B5E]          <1> 	mov [resolutionx2], dx
   118 0000015F 890E[175E]          <1> 	mov [resolutiony], cx
   119 00000163 B81200              <1> 	mov ax, 12h
   120 00000166 31DB                <1> 	xor bx, bx
   121 00000168 CD10                <1> 	int 10h
   122 0000016A C606[8A01]01        <1> 	mov byte [guinodo], 1
   123 0000016F 6631DB              <1> 	xor ebx, ebx
   124 00000172 6631C9              <1> 	xor ecx, ecx
   125 00000175 6631D2              <1> 	xor edx, edx
   126 00000178 6631F6              <1> 	xor esi, esi
   127 0000017B 6631FF              <1> 	xor edi, edi
   128 0000017E E92801              <1> 	jmp pmode
   129                              <1> 
   130 00000181 00                  <1> DriveNumber db 0
   131 00000182 00000000            <1> lbaad dd 0
   132                              <1> 	
   133 00000186 0000                <1> vesamode dw 0
   134 00000188 0000                <1> videomodecache dw 0
   135                              <1> 
   136 0000018A 00                  <1> guinodo db 0
   137                              <1> tests:
   138 0000018B BB0700              <1> 	mov bx, 7
   139 0000018E B40E                <1> 	mov ah, 0Eh
   140 00000190 FEC0                <1> 	inc al
   141 00000192 3C02                <1> 	cmp al, 2
   142 00000194 7501                <1> 	jne cnttest
   143 00000196 C3                  <1> 	ret
   144                              <1> cnttest:
   145 00000197 CD10                <1> 	int 10h
   146 00000199 EBF0                <1> 	jmp tests
   147                              <1> 
   148                              <1>     printrm:			; 'si' comes in with string address
   149 0000019B BB0700              <1> 	    mov bx,07		; write to display
   150 0000019E B40E                <1> 	    mov ah,0Eh		; screen function
   151 000001A0 8A04                <1>     prs2:    mov al,[si]         ; get next character
   152 000001A2 3C00                <1> 	    cmp al,0		; look for terminator 
   153 000001A4 7405                <1>             je finpr2		; zero byte at end of string
   154 000001A6 CD10                <1> 	    int 10h		; write character to screen.    
   155 000001A8 46                  <1>      	    inc si	     	; move to next character
   156 000001A9 EBF5                <1> 	    jmp prs2		; loop
   157 000001AB C3                  <1>     finpr2: ret
   158                              <1> 
   159 000001AC 0000000000          <1> dcnm db 0,0,0,0,0
   160 000001B1 0000                <1> dcnmend db 0,0
   161                              <1> 
   162                              <1> 
   163                              <1> decshow:
   164 000001B3 BE[AC01]            <1> 	mov si, dcnm
   165                              <1> decclear:
   166 000001B6 B030                <1> 	mov al, "0"
   167 000001B8 8804                <1> 	mov [si], al
   168 000001BA 46                  <1> 	inc si
   169 000001BB 81FE[B101]          <1> 	cmp si, dcnmend
   170 000001BF 76F5                <1> 	jbe decclear
   171 000001C1 4E                  <1> 	dec si
   172 000001C2 E81500              <1> 	call convertrm
   173 000001C5 BE[AC01]            <1> 	mov si, dcnm
   174                              <1> dectst:
   175 000001C8 8A04                <1> 	mov al, [si]
   176 000001CA 46                  <1> 	inc si
   177 000001CB 81FE[B101]          <1> 	cmp si, dcnmend
   178 000001CF 7704                <1> 	ja dectstend
   179 000001D1 3C30                <1> 	cmp al, "0"
   180 000001D3 76F3                <1> 	jbe dectst
   181                              <1> dectstend:
   182 000001D5 4E                  <1> 	dec si
   183 000001D6 E8C2FF              <1> 	call printrm
   184 000001D9 C3                  <1> 	ret
   185                              <1> 	
   186                              <1> 	
   187                              <1> convertrm:
   188 000001DA 4E                  <1> 	dec si
   189 000001DB 89F3                <1> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
   190                              <1> cnvrtrm:
   191 000001DD 89DE                <1> 	mov si, bx
   192 000001DF 81EE0300            <1> 	sub si, 3
   193 000001E3 46                  <1> ten3rm:	inc si
   194 000001E4 81F9E803            <1> 	cmp cx, 1000
   195 000001E8 7208                <1> 	jb ten2rm
   196 000001EA 81E9E803            <1> 	sub cx, 1000
   197 000001EE FE04                <1> 	inc byte [si]
   198 000001F0 EBEB                <1> 	jmp cnvrtrm
   199 000001F2 46                  <1> ten2rm:	inc si
   200 000001F3 81F96400            <1> 	cmp cx, 100
   201 000001F7 7208                <1> 	jb ten1rm
   202 000001F9 81E96400            <1> 	sub cx, 100
   203 000001FD FE04                <1> 	inc byte [si]
   204 000001FF EBDC                <1> 	jmp cnvrtrm
   205 00000201 46                  <1> ten1rm:	inc si
   206 00000202 81F90A00            <1> 	cmp cx, 10
   207 00000206 7208                <1> 	jb ten0rm
   208 00000208 81E90A00            <1> 	sub cx, 10
   209 0000020C FE04                <1> 	inc byte [si]
   210 0000020E EBCD                <1> 	jmp cnvrtrm
   211 00000210 46                  <1> ten0rm:	inc si
   212 00000211 81F90100            <1> 	cmp cx, 1
   213 00000215 7208                <1> 	jb tendnrm
   214 00000217 81E90100            <1> 	sub cx, 1
   215 0000021B FE04                <1> 	inc byte [si]
   216 0000021D EBBE                <1> 	jmp cnvrtrm
   217                              <1> tendnrm:
   218 0000021F C3                  <1> 	ret
   219                              <1> 
   220                              <1> 
   221                              <1> 
   222                              <1> 
   223                              <1>     char: 		    ;char must be in al
   224 00000220 BB0700              <1>        mov bx, 07
   225 00000223 B40E                <1> 	   mov ah, 0Eh
   226 00000225 CD10                <1> 	   int 10h
   227 00000227 C3                  <1> 	   ret
   228                              <1> 
   229                              <1> 		shutdown:
   230 00000228 0F20C0              <1> 				mov eax, cr0
   231 0000022B 24FE                <1> 				and al,0xFE     ; back to realmode
   232 0000022D 0F22C0              <1> 				mov  cr0, eax   ; by toggling bit again
   233 00000230 FB                  <1> 				sti
   234 00000231 B80053              <1> 			MOV AX, 5300h	; Shuts down APM-Machines.
   235 00000234 31DB                <1> 			XOR BX, BX	; Newer machines automatically
   236 00000236 CD15                <1> 			INT 15h		; shut down
   237 00000238 B80453              <1> 			MOV AX, 5304h
   238 0000023B 31DB                <1> 			XOR BX, BX
   239 0000023D CD15                <1> 			INT 15h		; Interrupt 15h originally was
   240 0000023F B80153              <1> 			MOV AX, 5301h	; used for Cartridges (cassettes)
   241 00000242 31DB                <1> 			XOR BX, BX	; but is still in use for
   242 00000244 CD15                <1> 			INT 15h		; diverse things
   243 00000246 B80753              <1> 			MOV AX, 5307h
   244 00000249 BB0100              <1> 			MOV BX, 1
   245 0000024C B90300              <1> 			MOV CX, 3
   246 0000024F CD15                <1> 			INT 15h
   247 00000251 CF                  <1> 			IRET
   248                              <1> 
   249                              <1> 	coldboot:
   250 00000252 0F20C0              <1> 			   mov eax, cr0
   251 00000255 24FE                <1> 			   and al,0xFE     ; back to realmode
   252 00000257 0F22C0              <1> 			   mov  cr0, eax   ; by toggling bit again
   253 0000025A FB                  <1> 			   sti
   254 0000025B B84000              <1> 			MOV AX, 0040h
   255 0000025E 8EC0                <1> 			MOV ES, AX
   256 00000260 26C70672000000      <1> 			MOV WORD [ES:00072h], 0h
   257 00000267 EA0000FFFF          <1> 			JMP 0FFFFh:0000h
   258 0000026C CF                  <1> 			IRET
   259                              <1> 
   260                              <1> 		warmboot:
   261 0000026D E81200              <1> 			call realmode
   262 00000270 B84000              <1> 			MOV AX, 0040h
   263 00000273 8EC0                <1> 			MOV ES, AX
   264 00000275 26C70672003412      <1> 			MOV WORD [ES:00072h], 01234h
   265 0000027C EA0000FFFF          <1> 			JMP 0FFFFh:0000h
   266 00000281 CF                  <1> 			IRET
   267                              <1> 
   268                              <1> 
   269                              <1> realmode:
   270 00000282 0F20C0              <1>    mov eax, cr0
   271 00000285 24FE                <1>    and al,0xFE     ; back to realmode
   272 00000287 0F22C0              <1>    mov  cr0, eax   ; by toggling bit again
   273 0000028A FB                  <1>    sti
   274 0000028B 6631C0              <1>    xor eax, eax
   275 0000028E C3                  <1>    ret
   276                              <1>    
   277 0000028F 426F6F7420696E746F- <1> bootmsg:	db "Boot into the GUI?(y/n)",10,13,0
   278 00000298 20746865204755493F- <1>
   279 000002A1 28792F6E290A0D00    <1>
   280                                      %include 'source/pmode.asm'
   281                              <1> [BITS 16]
   282                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   283                              <1> ;	16-bit real mode
   284                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   285                              <1> 
   286                              <1> pmode:
   287 000002A9 BA9200              <1> 	mov dx, 0x92
   288 000002AC EC                  <1> 	in al, dx	;;A20
   289 000002AD 0C02                <1> 	or al, 2
   290 000002AF EE                  <1> 	out dx, al
   291 000002B0 6631DB              <1> 	xor ebx, ebx
   292 000002B3 8CCB                <1> 	mov bx,cs		; EBX=segment
   293 000002B5 66C1E304            <1> 	shl ebx,4		;	<< 4
   294 000002B9 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   295 000002BD A3[8D04]            <1> 	mov [gdt2 + 2],ax
   296 000002C0 A3[9504]            <1> 	mov [gdt3 + 2],ax
   297 000002C3 66C1E810            <1> 	shr eax,16
   298 000002C7 A2[8F04]            <1> 	mov [gdt2 + 4],al
   299 000002CA A2[9704]            <1> 	mov [gdt3 + 4],al
   300 000002CD 8826[9204]          <1> 	mov [gdt2 + 7],ah
   301 000002D1 8826[9A04]          <1> 	mov [gdt3 + 7],ah
   302                              <1> 	
   303 000002D5 66B8[00000000]      <1> 	mov eax, stack
   304 000002DB A3[9D04]            <1> 	mov [gdts + 2],ax
   305 000002DE 66C1E810            <1> 	shr eax,16
   306 000002E2 A2[9F04]            <1> 	mov [gdts + 4],al
   307 000002E5 8826[A204]          <1> 	mov [gdts + 7],ah
   308 000002E9 66A1[2D04]          <1> 	mov eax, [newcodecache]
   309 000002ED A3[A504]            <1> 	mov [gdt4 + 2],ax
   310 000002F0 A3[AD04]            <1> 	mov [gdt5 + 2],ax
   311 000002F3 66C1E810            <1> 	shr eax,16
   312 000002F7 A2[A704]            <1> 	mov [gdt4 + 4],al
   313 000002FA A2[AF04]            <1> 	mov [gdt5 + 4],al
   314 000002FD 8826[AA04]          <1> 	mov [gdt4 + 7],ah
   315 00000301 8826[B204]          <1> 	mov [gdt5 + 7],ah
   316                              <1> 	
   317                              <1> ; fix up gdt and idt
   318 00000305 67668D83[7B040000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   319 0000030D 66A3[7104]          <1> 	mov [gdtr + 2],eax
   320 00000311 67668D83[B3040000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   321 00000319 66A3[7704]          <1> 	mov [idtr + 2],eax
   322 0000031D FA                  <1> 	cli
   323 0000031E 0F0116[6F04]        <1> 	lgdt [gdtr]
   324 00000323 0F011E[7504]        <1> 	lidt [idtr]
   325 00000328 6631DB              <1> 	xor ebx, ebx
   326 0000032B 8CDB                <1> 	mov bx, ds
   327 0000032D 66891E[2904]        <1> 	mov [basecache], ebx
   328 00000332 0F20C0              <1> 	mov eax,cr0
   329 00000335 0C01                <1> 	or al,1
   330 00000337 0F22C0              <1> 	mov cr0,eax
   331 0000033A EA[4303]1000        <1> 	jmp SYS_CODE_SEL:do_pm
   332                              <1> [BITS 32]
   333 0000033F 90                  <1> 	nop
   334 00000340 90                  <1> 	nop
   335 00000341 90                  <1> 	nop
   336 00000342 90                  <1> 	nop
   337                              <1> do_pm:
   338 00000343 31C0                <1> 	xor eax, eax
   339 00000345 66B81800            <1> 	mov ax, SYS_DATA_SEL
   340 00000349 8ED8                <1> 	mov ds,ax
   341 0000034B 8ED0                <1> 	mov ss,ax	;;can switch back to STACK_SEL later
   342 0000034D BC[00100000]        <1> 	mov esp, stackend	;;can switch back to 4096 later
   343 00000352 90                  <1> 	nop
   344 00000353 90                  <1> 	nop
   345 00000354 8EC0                <1> 	mov es, ax
   346 00000356 8EE0                <1> 	mov fs, ax
   347 00000358 66B83000            <1> 	mov ax, NEW_DATA_SEL
   348 0000035C 8EE8                <1> 	mov gs, ax
   349                              <1> 	
   350                              <1> copykernel:
   351 0000035E 648B06              <1> 	mov eax, [fs:esi]
   352 00000361 658906              <1> 	mov [gs:esi], eax
   353 00000364 81C604000000        <1> 	add esi, 4
   354 0000036A 81FE[00000000]      <1> 	cmp esi, bssstart
   355 00000370 72EC                <1> 	jb copykernel
   356 00000372 EA[79030000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   357                              <1> 	
   358                              <1> done_copy:
   359 00000379 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   360 0000037D 8ED8                <1> 	mov ds, ax
   361 0000037F 8ED0                <1> 	mov ss, ax
   362 00000381 BC[00100000]        <1> 	mov esp, stackend
   363 00000386 90                  <1> 	nop
   364 00000387 90                  <1> 	nop
   365 00000388 66B83000            <1> 	mov ax, NEW_DATA_SEL
   366 0000038C 8EC0                <1> 	mov es, ax
   367 0000038E 8EE0                <1> 	mov fs, ax
   368 00000390 66B81800            <1> 	mov ax, SYS_DATA_SEL
   369 00000394 8EE8                <1> 	mov gs, ax
   370                              <1> 	
   371                              <1> ;Now I will initialise the interrupt controllers and remap irq's
   372 00000396 B011                <1> 	mov al, 0x11
   373 00000398 E620                <1> 	out 0x20, al
   374 0000039A E6A0                <1> 	out 0xA0, al
   375 0000039C B040                <1> 	mov al, 0x40	;interrupt for master
   376 0000039E E621                <1> 	out 0x21, al
   377 000003A0 B048                <1> 	mov al, 0x48	;interrupt for slave
   378 000003A2 E6A1                <1> 	out 0xA1, al
   379 000003A4 B004                <1> 	mov al, 4
   380 000003A6 E621                <1> 	out 0x21, al
   381 000003A8 B002                <1> 	mov al, 2
   382 000003AA E6A1                <1> 	out 0xA1, al
   383 000003AC B001                <1> 	mov al, 0x1
   384 000003AE E621                <1> 	out 0x21, al
   385 000003B0 B001                <1> 	mov al, 0x1
   386 000003B2 E6A1                <1> 	out 0xA1, al
   387                              <1> 	;masks are set to zero so as not to mask
   388 000003B4 30C0                <1> 	xor al, al
   389 000003B6 E621                <1> 	out 0x21, al
   390 000003B8 30C0                <1> 	xor al, al
   391 000003BA E6A1                <1> 	out 0xA1, al
   392 000003BC B020                <1> 	mov al, 0x20
   393 000003BE E6A0                <1> 	out 0xA0, al
   394 000003C0 E620                <1> 	out 0x20, al
   395                              <1> 	;And now to initialize the fpu
   396 000003C2 0F20E0              <1> 	mov eax, cr4
   397 000003C5 0D00020000          <1> 	or eax, 0x200
   398 000003CA 0F22E0              <1> 	mov cr4, eax
   399 000003CD B87F0B0000          <1> 	mov eax, 0xB7F
   400 000003D2 50                  <1> 	push eax
   401 000003D3 D92C24              <1> 	fldcw [esp]
   402 000003D6 58                  <1> 	pop eax
   403 000003D7 31C0                <1> 	xor eax, eax
   404 000003D9 31C9                <1> 	xor ecx, ecx
   405                              <1> 
   406 000003DB A1[2D040000]        <1> 	mov eax, [newcodecache]
   407 000003E0 C1E804              <1> 	shr eax, 4
   408 000003E3 A3[29040000]        <1> 	mov [basecache], eax
   409                              <1> 	
   410 000003E8 89C3                <1> 	mov ebx, eax
   411 000003EA C1E304              <1> 	shl ebx, 4
   412 000003ED 8B3D[A1850000]      <1> 	mov edi, [physbaseptr]
   413 000003F3 29DF                <1> 	sub edi, ebx
   414 000003F5 893D[A1850000]      <1> 	mov [physbaseptr], edi
   415                              <1> 	
   416 000003FB BE[00000000]        <1> 	mov esi, bssstart
   417 00000400 31C0                <1> 	xor eax, eax
   418                              <1> clearkernelbuffers:
   419 00000402 8906                <1> 	mov [esi], eax
   420 00000404 81C604000000        <1> 	add esi, 4
   421 0000040A 81FE[67A22000]      <1> 	cmp esi, bssend
   422 00000410 72F0                <1> 	jb clearkernelbuffers
   423 00000412 803D[8A010000]01    <1> 	cmp byte [guinodo], 1
   424 00000419 7405                <1> 	je guidonot
   425 0000041B E90B4A0000          <1> 	jmp gui
   426                              <1> guidonot:
   427 00000420 E9D42A0000          <1> 	jmp os
   428                              <1> 	
   429 00000425 00000000            <1> user2codepoint dw 0,0
   430 00000429 00000000            <1> basecache dd 0
   431 0000042D 00001000            <1> newcodecache dd 0x100000
   432                              <1> 
   433                              <1> ;surekillmsg db 10,13,"Kill this application?",10,13,0
   434                              <1> 
   435                              <1> timerinterrupt:
   436 00000431 803D[F46B0000]01    <1> 	cmp byte [threadson], 1
   437 00000438 7505                <1> 	jne userinterrupt
   438 0000043A E96F6D0000          <1> 	jmp threadswitch
   439                              <1> userinterrupt:		;checks for escape, if pressed, it quits the program currently running
   440 0000043F FA                  <1> 	cli
   441 00000440 803D[F46B0000]00    <1> 	cmp byte [threadson], 0
   442 00000447 0F8418000000        <1> 	je near handled3
   443 0000044D 60                  <1> 	pusha
   444 0000044E E460                <1> 	in al, 60h
   445 00000450 3C01                <1> 	cmp al, 1		;escape
   446 00000452 7405                <1> 	je userint
   447 00000454 E90B000000          <1> 	jmp handled2
   448                              <1> userint:
   449 00000459 B020                <1> 	mov al, 0x20
   450 0000045B E620                <1> 	out 0x20, al
   451 0000045D 61                  <1> 	popa
   452 0000045E FB                  <1> 	sti
   453 0000045F E9B92B0000          <1> 	jmp nwcmd
   454                              <1> handled2:
   455 00000464 61                  <1> 	popa
   456                              <1> handled3:
   457 00000465 FB                  <1> 	sti
   458                              <1> handled:
   459 00000466 50                  <1> 	push eax
   460 00000467 B020                <1> 	mov al, 0x20
   461 00000469 E620                <1> 	out 0x20, al
   462 0000046B 58                  <1> 	pop eax
   463 0000046C CF                  <1> 	iret
   464 0000046D EBFE                <1> 	jmp $
   465                              <1> [BITS 16]
   466                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   467                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   468                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   469 0000046F 3700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   470 00000471 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   471                              <1> 
   472 00000475 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   473 00000477 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   474                              <1> 
   475                              <1> 
   476 0000047B 0000                <1> gdt:	dw 0			; limit 15:0
   477 0000047D 0000                <1> 	dw 0			; base 15:0
   478 0000047F 00                  <1> 	db 0			; base 23:16
   479 00000480 00                  <1> 	db 0			; type
   480 00000481 00                  <1> 	db 0			; limit 19:16, flags
   481 00000482 00                  <1> 	db 0			; base 31:24
   482                              <1> ; linear data segment descriptor
   483                              <1> LINEAR_SEL	equ	$-gdt
   484 00000483 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   485 00000485 0000                <1> 	dw 0			; base for this one is always 0
   486 00000487 00                  <1> 	db 0
   487 00000488 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   488 00000489 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   489 0000048A 00                  <1> 	db 0
   490                              <1> ; code segment descriptor
   491                              <1> SYS_CODE_SEL	equ	$-gdt
   492 0000048B FFFF                <1> gdt2:	dw 0xFFFF
   493 0000048D 0000                <1> 	dw 0			; (base gets set above)
   494 0000048F 00                  <1> 	db 0
   495 00000490 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   496 00000491 CF                  <1> 	db 0xCF
   497 00000492 00                  <1> 	db 0
   498                              <1> ; data segment descriptor
   499                              <1> SYS_DATA_SEL	equ	$-gdt
   500 00000493 FFFF                <1> gdt3:	dw 0xFFFF
   501 00000495 0000                <1> 	dw 0			; (base gets set above)
   502 00000497 00                  <1> 	db 0
   503 00000498 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   504 00000499 CF                  <1> 	db 0xCF
   505 0000049A 00                  <1> 	db 0
   506                              <1> STACK_SEL	equ	$-gdt	;;this is no longer used for various reasons
   507 0000049B 0100                <1> gdts:	dw 1
   508 0000049D 0000                <1> 	dw 0			; (base gets set above)
   509 0000049F 00                  <1> 	db 0
   510 000004A0 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   511 000004A1 C0                  <1> 	db 0xC0
   512 000004A2 00                  <1> 	db 0
   513                              <1> NEW_CODE_SEL	equ	$-gdt
   514 000004A3 FFFF                <1> gdt4:	dw 0xFFFF
   515 000004A5 0000                <1> 	dw 0			; (base gets set above)
   516 000004A7 00                  <1> 	db 0
   517 000004A8 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   518 000004A9 CF                  <1> 	db 0xCF
   519 000004AA 00                  <1> 	db 0
   520                              <1> ; data segment descriptor
   521                              <1> NEW_DATA_SEL	equ	$-gdt
   522 000004AB FFFF                <1> gdt5:	dw 0xFFFF
   523 000004AD 0000                <1> 	dw 0			; (base gets set above)
   524 000004AF 00                  <1> 	db 0
   525 000004B0 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   526 000004B1 CF                  <1> 	db 0xCF
   527 000004B2 00                  <1> 	db 0
   528                              <1> gdt_end:
   529                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   530                              <1> ;	interrupt descriptor table (IDT)
   531                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   532                              <1> ; 32 reserved interrupts:
   533                              <1> idt:	
   534                              <1> %assign i 0
   535                              <1> %rep    33
   536                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   537                              <1> %assign i i+1
   538                              <1> %endrep
   539 000004B3 [B30C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   540                              <2> %assign i i+1
   541 000004BB [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   542                              <2> %assign i i+1
   543 000004C3 [CD0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   544                              <2> %assign i i+1
   545 000004CB [DA0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   546                              <2> %assign i i+1
   547 000004D3 [E70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   548                              <2> %assign i i+1
   549 000004DB [F40C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   550                              <2> %assign i i+1
   551 000004E3 [010D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   552                              <2> %assign i i+1
   553 000004EB [0E0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   554                              <2> %assign i i+1
   555 000004F3 [1B0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   556                              <2> %assign i i+1
   557 000004FB [280D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   558                              <2> %assign i i+1
   559 00000503 [350D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   560                              <2> %assign i i+1
   561 0000050B [420D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   562                              <2> %assign i i+1
   563 00000513 [4F0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   564                              <2> %assign i i+1
   565 0000051B [5C0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   566                              <2> %assign i i+1
   567 00000523 [690D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   568                              <2> %assign i i+1
   569 0000052B [760D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   570                              <2> %assign i i+1
   571 00000533 [830D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   572                              <2> %assign i i+1
   573 0000053B [900D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   574                              <2> %assign i i+1
   575 00000543 [9D0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   576                              <2> %assign i i+1
   577 0000054B [AA0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   578                              <2> %assign i i+1
   579 00000553 [B70D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   580                              <2> %assign i i+1
   581 0000055B [C40D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   582                              <2> %assign i i+1
   583 00000563 [D10D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   584                              <2> %assign i i+1
   585 0000056B [DE0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   586                              <2> %assign i i+1
   587 00000573 [EB0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   588                              <2> %assign i i+1
   589 0000057B [F80D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   590                              <2> %assign i i+1
   591 00000583 [050E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   592                              <2> %assign i i+1
   593 0000058B [120E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   594                              <2> %assign i i+1
   595 00000593 [1F0E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   596                              <2> %assign i i+1
   597 0000059B [2C0E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   598                              <2> %assign i i+1
   599 000005A3 [390E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   600                              <2> %assign i i+1
   601 000005AB [460E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   602                              <2> %assign i i+1
   603 000005B3 [530E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   604                              <2> %assign i i+1
   605                              <1> 		;dw handled,NEW_CODE_SEL,0x8E00,0
   606 000005BB [202E]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   607                              <1> %assign i 0x22
   608                              <1> %rep 14
   609                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   610                              <1> 		;dw handled,NEW_CODE_SEL,0x8E00,0
   611                              <1> %assign i +1
   612                              <1> %endrep
   613 000005C3 [6D0E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   614                              <2> 
   615                              <2> %assign i +1
   616 000005CB [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   617                              <2> 
   618                              <2> %assign i +1
   619 000005D3 [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   620                              <2> 
   621                              <2> %assign i +1
   622 000005DB [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   623                              <2> 
   624                              <2> %assign i +1
   625 000005E3 [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   626                              <2> 
   627                              <2> %assign i +1
   628 000005EB [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   629                              <2> 
   630                              <2> %assign i +1
   631 000005F3 [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   632                              <2> 
   633                              <2> %assign i +1
   634 000005FB [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   635                              <2> 
   636                              <2> %assign i +1
   637 00000603 [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   638                              <2> 
   639                              <2> %assign i +1
   640 0000060B [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   641                              <2> 
   642                              <2> %assign i +1
   643 00000613 [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   644                              <2> 
   645                              <2> %assign i +1
   646 0000061B [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   647                              <2> 
   648                              <2> %assign i +1
   649 00000623 [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   650                              <2> 
   651                              <2> %assign i +1
   652 0000062B [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   653                              <2> 
   654                              <2> %assign i +1
   655                              <1> ;INT 30h for os use and 3rd party use:
   656 00000633 [D326]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   657                              <1> ;here are all the irq's
   658                              <1> %assign i 0x31
   659                              <1> %rep 15
   660                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   661                              <1> 		;dw handled,NEW_CODE_SEL,0x8E00,0
   662                              <1> %assign i +1
   663                              <1> %endrep
   664 0000063B [300F]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   665                              <2> 
   666                              <2> %assign i +1
   667 00000643 [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   668                              <2> 
   669                              <2> %assign i +1
   670 0000064B [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   671                              <2> 
   672                              <2> %assign i +1
   673 00000653 [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   674                              <2> 
   675                              <2> %assign i +1
   676 0000065B [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   677                              <2> 
   678                              <2> %assign i +1
   679 00000663 [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   680                              <2> 
   681                              <2> %assign i +1
   682 0000066B [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   683                              <2> 
   684                              <2> %assign i +1
   685 00000673 [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   686                              <2> 
   687                              <2> %assign i +1
   688 0000067B [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   689                              <2> 
   690                              <2> %assign i +1
   691 00000683 [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   692                              <2> 
   693                              <2> %assign i +1
   694 0000068B [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   695                              <2> 
   696                              <2> %assign i +1
   697 00000693 [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   698                              <2> 
   699                              <2> %assign i +1
   700 0000069B [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   701                              <2> 
   702                              <2> %assign i +1
   703 000006A3 [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   704                              <2> 
   705                              <2> %assign i +1
   706 000006AB [C00C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   707                              <2> 
   708                              <2> %assign i +1
   709 000006B3 [3104]2800008E0000  <1> 		dw timerinterrupt,NEW_CODE_SEL,0x8E00,0
   710 000006BB [3F04]2800008E0000  <1> 		dw userinterrupt,NEW_CODE_SEL,0x8E00,0
   711                              <1> ;%assign i 0x42
   712                              <1> %rep 14
   713                              <1> 		;dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   714                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   715                              <1> ;%assign i +1
   716                              <1> %endrep
   717                              <2> 
   718 000006C3 [6604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   719                              <2> 
   720                              <2> 
   721 000006CB [6604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   722                              <2> 
   723                              <2> 
   724 000006D3 [6604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   725                              <2> 
   726                              <2> 
   727 000006DB [6604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   728                              <2> 
   729                              <2> 
   730 000006E3 [6604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   731                              <2> 
   732                              <2> 
   733 000006EB [6604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   734                              <2> 
   735                              <2> 
   736 000006F3 [6604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   737                              <2> 
   738                              <2> 
   739 000006FB [6604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   740                              <2> 
   741                              <2> 
   742 00000703 [6604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   743                              <2> 
   744                              <2> 
   745 0000070B [6604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   746                              <2> 
   747                              <2> 
   748 00000713 [6604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   749                              <2> 
   750                              <2> 
   751 0000071B [6604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   752                              <2> 
   753                              <2> 
   754 00000723 [6604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   755                              <2> 
   756                              <2> 
   757 0000072B [6604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   758                              <2> 
   759                              <1> ;This brings me up to something
   760                              <1> %assign i 0x50
   761                              <1> %rep 176
   762                              <1> 		dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   763                              <1> 		;dw handled,NEW_CODE_SEL,0x8E00,0
   764                              <1> %assign i +1
   765                              <1> %endrep
   766 00000733 [C310]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   767                              <2> 
   768                              <2> %assign i +1
   769 0000073B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   770                              <2> 
   771                              <2> %assign i +1
   772 00000743 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   773                              <2> 
   774                              <2> %assign i +1
   775 0000074B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   776                              <2> 
   777                              <2> %assign i +1
   778 00000753 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   779                              <2> 
   780                              <2> %assign i +1
   781 0000075B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   782                              <2> 
   783                              <2> %assign i +1
   784 00000763 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   785                              <2> 
   786                              <2> %assign i +1
   787 0000076B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   788                              <2> 
   789                              <2> %assign i +1
   790 00000773 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   791                              <2> 
   792                              <2> %assign i +1
   793 0000077B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   794                              <2> 
   795                              <2> %assign i +1
   796 00000783 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   797                              <2> 
   798                              <2> %assign i +1
   799 0000078B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   800                              <2> 
   801                              <2> %assign i +1
   802 00000793 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   803                              <2> 
   804                              <2> %assign i +1
   805 0000079B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   806                              <2> 
   807                              <2> %assign i +1
   808 000007A3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   809                              <2> 
   810                              <2> %assign i +1
   811 000007AB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   812                              <2> 
   813                              <2> %assign i +1
   814 000007B3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   815                              <2> 
   816                              <2> %assign i +1
   817 000007BB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   818                              <2> 
   819                              <2> %assign i +1
   820 000007C3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   821                              <2> 
   822                              <2> %assign i +1
   823 000007CB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   824                              <2> 
   825                              <2> %assign i +1
   826 000007D3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   827                              <2> 
   828                              <2> %assign i +1
   829 000007DB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   830                              <2> 
   831                              <2> %assign i +1
   832 000007E3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   833                              <2> 
   834                              <2> %assign i +1
   835 000007EB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   836                              <2> 
   837                              <2> %assign i +1
   838 000007F3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   839                              <2> 
   840                              <2> %assign i +1
   841 000007FB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   842                              <2> 
   843                              <2> %assign i +1
   844 00000803 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   845                              <2> 
   846                              <2> %assign i +1
   847 0000080B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   848                              <2> 
   849                              <2> %assign i +1
   850 00000813 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   851                              <2> 
   852                              <2> %assign i +1
   853 0000081B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   854                              <2> 
   855                              <2> %assign i +1
   856 00000823 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   857                              <2> 
   858                              <2> %assign i +1
   859 0000082B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   860                              <2> 
   861                              <2> %assign i +1
   862 00000833 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   863                              <2> 
   864                              <2> %assign i +1
   865 0000083B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   866                              <2> 
   867                              <2> %assign i +1
   868 00000843 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   869                              <2> 
   870                              <2> %assign i +1
   871 0000084B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   872                              <2> 
   873                              <2> %assign i +1
   874 00000853 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   875                              <2> 
   876                              <2> %assign i +1
   877 0000085B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   878                              <2> 
   879                              <2> %assign i +1
   880 00000863 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   881                              <2> 
   882                              <2> %assign i +1
   883 0000086B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   884                              <2> 
   885                              <2> %assign i +1
   886 00000873 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   887                              <2> 
   888                              <2> %assign i +1
   889 0000087B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   890                              <2> 
   891                              <2> %assign i +1
   892 00000883 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   893                              <2> 
   894                              <2> %assign i +1
   895 0000088B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   896                              <2> 
   897                              <2> %assign i +1
   898 00000893 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   899                              <2> 
   900                              <2> %assign i +1
   901 0000089B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   902                              <2> 
   903                              <2> %assign i +1
   904 000008A3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   905                              <2> 
   906                              <2> %assign i +1
   907 000008AB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   908                              <2> 
   909                              <2> %assign i +1
   910 000008B3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   911                              <2> 
   912                              <2> %assign i +1
   913 000008BB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   914                              <2> 
   915                              <2> %assign i +1
   916 000008C3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   917                              <2> 
   918                              <2> %assign i +1
   919 000008CB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   920                              <2> 
   921                              <2> %assign i +1
   922 000008D3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   923                              <2> 
   924                              <2> %assign i +1
   925 000008DB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   926                              <2> 
   927                              <2> %assign i +1
   928 000008E3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   929                              <2> 
   930                              <2> %assign i +1
   931 000008EB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   932                              <2> 
   933                              <2> %assign i +1
   934 000008F3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   935                              <2> 
   936                              <2> %assign i +1
   937 000008FB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   938                              <2> 
   939                              <2> %assign i +1
   940 00000903 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   941                              <2> 
   942                              <2> %assign i +1
   943 0000090B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   944                              <2> 
   945                              <2> %assign i +1
   946 00000913 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   947                              <2> 
   948                              <2> %assign i +1
   949 0000091B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   950                              <2> 
   951                              <2> %assign i +1
   952 00000923 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   953                              <2> 
   954                              <2> %assign i +1
   955 0000092B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   956                              <2> 
   957                              <2> %assign i +1
   958 00000933 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   959                              <2> 
   960                              <2> %assign i +1
   961 0000093B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   962                              <2> 
   963                              <2> %assign i +1
   964 00000943 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   965                              <2> 
   966                              <2> %assign i +1
   967 0000094B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   968                              <2> 
   969                              <2> %assign i +1
   970 00000953 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   971                              <2> 
   972                              <2> %assign i +1
   973 0000095B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   974                              <2> 
   975                              <2> %assign i +1
   976 00000963 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   977                              <2> 
   978                              <2> %assign i +1
   979 0000096B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   980                              <2> 
   981                              <2> %assign i +1
   982 00000973 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   983                              <2> 
   984                              <2> %assign i +1
   985 0000097B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   986                              <2> 
   987                              <2> %assign i +1
   988 00000983 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   989                              <2> 
   990                              <2> %assign i +1
   991 0000098B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   992                              <2> 
   993                              <2> %assign i +1
   994 00000993 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   995                              <2> 
   996                              <2> %assign i +1
   997 0000099B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   998                              <2> 
   999                              <2> %assign i +1
  1000 000009A3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1001                              <2> 
  1002                              <2> %assign i +1
  1003 000009AB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1004                              <2> 
  1005                              <2> %assign i +1
  1006 000009B3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1007                              <2> 
  1008                              <2> %assign i +1
  1009 000009BB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1010                              <2> 
  1011                              <2> %assign i +1
  1012 000009C3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1013                              <2> 
  1014                              <2> %assign i +1
  1015 000009CB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1016                              <2> 
  1017                              <2> %assign i +1
  1018 000009D3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1019                              <2> 
  1020                              <2> %assign i +1
  1021 000009DB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1022                              <2> 
  1023                              <2> %assign i +1
  1024 000009E3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1025                              <2> 
  1026                              <2> %assign i +1
  1027 000009EB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1028                              <2> 
  1029                              <2> %assign i +1
  1030 000009F3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1031                              <2> 
  1032                              <2> %assign i +1
  1033 000009FB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1034                              <2> 
  1035                              <2> %assign i +1
  1036 00000A03 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1037                              <2> 
  1038                              <2> %assign i +1
  1039 00000A0B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1040                              <2> 
  1041                              <2> %assign i +1
  1042 00000A13 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1043                              <2> 
  1044                              <2> %assign i +1
  1045 00000A1B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1046                              <2> 
  1047                              <2> %assign i +1
  1048 00000A23 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1049                              <2> 
  1050                              <2> %assign i +1
  1051 00000A2B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1052                              <2> 
  1053                              <2> %assign i +1
  1054 00000A33 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1055                              <2> 
  1056                              <2> %assign i +1
  1057 00000A3B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1058                              <2> 
  1059                              <2> %assign i +1
  1060 00000A43 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1061                              <2> 
  1062                              <2> %assign i +1
  1063 00000A4B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1064                              <2> 
  1065                              <2> %assign i +1
  1066 00000A53 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1067                              <2> 
  1068                              <2> %assign i +1
  1069 00000A5B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1070                              <2> 
  1071                              <2> %assign i +1
  1072 00000A63 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1073                              <2> 
  1074                              <2> %assign i +1
  1075 00000A6B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1076                              <2> 
  1077                              <2> %assign i +1
  1078 00000A73 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1079                              <2> 
  1080                              <2> %assign i +1
  1081 00000A7B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1082                              <2> 
  1083                              <2> %assign i +1
  1084 00000A83 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1085                              <2> 
  1086                              <2> %assign i +1
  1087 00000A8B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1088                              <2> 
  1089                              <2> %assign i +1
  1090 00000A93 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1091                              <2> 
  1092                              <2> %assign i +1
  1093 00000A9B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1094                              <2> 
  1095                              <2> %assign i +1
  1096 00000AA3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1097                              <2> 
  1098                              <2> %assign i +1
  1099 00000AAB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1100                              <2> 
  1101                              <2> %assign i +1
  1102 00000AB3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1103                              <2> 
  1104                              <2> %assign i +1
  1105 00000ABB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1106                              <2> 
  1107                              <2> %assign i +1
  1108 00000AC3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1109                              <2> 
  1110                              <2> %assign i +1
  1111 00000ACB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1112                              <2> 
  1113                              <2> %assign i +1
  1114 00000AD3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1115                              <2> 
  1116                              <2> %assign i +1
  1117 00000ADB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1118                              <2> 
  1119                              <2> %assign i +1
  1120 00000AE3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1121                              <2> 
  1122                              <2> %assign i +1
  1123 00000AEB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1124                              <2> 
  1125                              <2> %assign i +1
  1126 00000AF3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1127                              <2> 
  1128                              <2> %assign i +1
  1129 00000AFB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1130                              <2> 
  1131                              <2> %assign i +1
  1132 00000B03 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1133                              <2> 
  1134                              <2> %assign i +1
  1135 00000B0B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1136                              <2> 
  1137                              <2> %assign i +1
  1138 00000B13 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1139                              <2> 
  1140                              <2> %assign i +1
  1141 00000B1B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1142                              <2> 
  1143                              <2> %assign i +1
  1144 00000B23 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1145                              <2> 
  1146                              <2> %assign i +1
  1147 00000B2B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1148                              <2> 
  1149                              <2> %assign i +1
  1150 00000B33 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1151                              <2> 
  1152                              <2> %assign i +1
  1153 00000B3B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1154                              <2> 
  1155                              <2> %assign i +1
  1156 00000B43 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1157                              <2> 
  1158                              <2> %assign i +1
  1159 00000B4B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1160                              <2> 
  1161                              <2> %assign i +1
  1162 00000B53 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1163                              <2> 
  1164                              <2> %assign i +1
  1165 00000B5B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1166                              <2> 
  1167                              <2> %assign i +1
  1168 00000B63 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1169                              <2> 
  1170                              <2> %assign i +1
  1171 00000B6B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1172                              <2> 
  1173                              <2> %assign i +1
  1174 00000B73 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1175                              <2> 
  1176                              <2> %assign i +1
  1177 00000B7B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1178                              <2> 
  1179                              <2> %assign i +1
  1180 00000B83 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1181                              <2> 
  1182                              <2> %assign i +1
  1183 00000B8B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1184                              <2> 
  1185                              <2> %assign i +1
  1186 00000B93 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1187                              <2> 
  1188                              <2> %assign i +1
  1189 00000B9B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1190                              <2> 
  1191                              <2> %assign i +1
  1192 00000BA3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1193                              <2> 
  1194                              <2> %assign i +1
  1195 00000BAB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1196                              <2> 
  1197                              <2> %assign i +1
  1198 00000BB3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1199                              <2> 
  1200                              <2> %assign i +1
  1201 00000BBB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1202                              <2> 
  1203                              <2> %assign i +1
  1204 00000BC3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1205                              <2> 
  1206                              <2> %assign i +1
  1207 00000BCB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1208                              <2> 
  1209                              <2> %assign i +1
  1210 00000BD3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1211                              <2> 
  1212                              <2> %assign i +1
  1213 00000BDB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1214                              <2> 
  1215                              <2> %assign i +1
  1216 00000BE3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1217                              <2> 
  1218                              <2> %assign i +1
  1219 00000BEB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1220                              <2> 
  1221                              <2> %assign i +1
  1222 00000BF3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1223                              <2> 
  1224                              <2> %assign i +1
  1225 00000BFB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1226                              <2> 
  1227                              <2> %assign i +1
  1228 00000C03 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1229                              <2> 
  1230                              <2> %assign i +1
  1231 00000C0B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1232                              <2> 
  1233                              <2> %assign i +1
  1234 00000C13 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1235                              <2> 
  1236                              <2> %assign i +1
  1237 00000C1B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1238                              <2> 
  1239                              <2> %assign i +1
  1240 00000C23 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1241                              <2> 
  1242                              <2> %assign i +1
  1243 00000C2B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1244                              <2> 
  1245                              <2> %assign i +1
  1246 00000C33 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1247                              <2> 
  1248                              <2> %assign i +1
  1249 00000C3B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1250                              <2> 
  1251                              <2> %assign i +1
  1252 00000C43 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1253                              <2> 
  1254                              <2> %assign i +1
  1255 00000C4B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1256                              <2> 
  1257                              <2> %assign i +1
  1258 00000C53 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1259                              <2> 
  1260                              <2> %assign i +1
  1261 00000C5B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1262                              <2> 
  1263                              <2> %assign i +1
  1264 00000C63 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1265                              <2> 
  1266                              <2> %assign i +1
  1267 00000C6B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1268                              <2> 
  1269                              <2> %assign i +1
  1270 00000C73 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1271                              <2> 
  1272                              <2> %assign i +1
  1273 00000C7B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1274                              <2> 
  1275                              <2> %assign i +1
  1276 00000C83 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1277                              <2> 
  1278                              <2> %assign i +1
  1279 00000C8B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1280                              <2> 
  1281                              <2> %assign i +1
  1282 00000C93 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1283                              <2> 
  1284                              <2> %assign i +1
  1285 00000C9B [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1286                              <2> 
  1287                              <2> %assign i +1
  1288 00000CA3 [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1289                              <2> 
  1290                              <2> %assign i +1
  1291 00000CAB [C00C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1292                              <2> 
  1293                              <2> %assign i +1
  1294                              <1> idt_end:
  1295                              <1> [BITS 32]
  1296                                  [BITS 32]
  1297                                  	%include 'source/exception.asm'
  1298                              <1> 
  1299                              <1> unhand:	
  1300                              <1> 	%assign i 0
  1301                              <1> 	%rep 256
  1302                              <1> 	cli
  1303                              <1> 	mov byte [intprob], i
  1304                              <1> 	jmp unhand2
  1305                              <1> 	%assign i i+1
  1306                              <1> 	%endrep
  1307 00000CB3 FA                  <2>  cli
  1308 00000CB4 C605[AE1C0000]00    <2>  mov byte [intprob], i
  1309 00000CBB E9F30C0000          <2>  jmp unhand2
  1310                              <2>  %assign i i+1
  1311 00000CC0 FA                  <2>  cli
  1312 00000CC1 C605[AE1C0000]01    <2>  mov byte [intprob], i
  1313 00000CC8 E9E60C0000          <2>  jmp unhand2
  1314                              <2>  %assign i i+1
  1315 00000CCD FA                  <2>  cli
  1316 00000CCE C605[AE1C0000]02    <2>  mov byte [intprob], i
  1317 00000CD5 E9D90C0000          <2>  jmp unhand2
  1318                              <2>  %assign i i+1
  1319 00000CDA FA                  <2>  cli
  1320 00000CDB C605[AE1C0000]03    <2>  mov byte [intprob], i
  1321 00000CE2 E9CC0C0000          <2>  jmp unhand2
  1322                              <2>  %assign i i+1
  1323 00000CE7 FA                  <2>  cli
  1324 00000CE8 C605[AE1C0000]04    <2>  mov byte [intprob], i
  1325 00000CEF E9BF0C0000          <2>  jmp unhand2
  1326                              <2>  %assign i i+1
  1327 00000CF4 FA                  <2>  cli
  1328 00000CF5 C605[AE1C0000]05    <2>  mov byte [intprob], i
  1329 00000CFC E9B20C0000          <2>  jmp unhand2
  1330                              <2>  %assign i i+1
  1331 00000D01 FA                  <2>  cli
  1332 00000D02 C605[AE1C0000]06    <2>  mov byte [intprob], i
  1333 00000D09 E9A50C0000          <2>  jmp unhand2
  1334                              <2>  %assign i i+1
  1335 00000D0E FA                  <2>  cli
  1336 00000D0F C605[AE1C0000]07    <2>  mov byte [intprob], i
  1337 00000D16 E9980C0000          <2>  jmp unhand2
  1338                              <2>  %assign i i+1
  1339 00000D1B FA                  <2>  cli
  1340 00000D1C C605[AE1C0000]08    <2>  mov byte [intprob], i
  1341 00000D23 E98B0C0000          <2>  jmp unhand2
  1342                              <2>  %assign i i+1
  1343 00000D28 FA                  <2>  cli
  1344 00000D29 C605[AE1C0000]09    <2>  mov byte [intprob], i
  1345 00000D30 E97E0C0000          <2>  jmp unhand2
  1346                              <2>  %assign i i+1
  1347 00000D35 FA                  <2>  cli
  1348 00000D36 C605[AE1C0000]0A    <2>  mov byte [intprob], i
  1349 00000D3D E9710C0000          <2>  jmp unhand2
  1350                              <2>  %assign i i+1
  1351 00000D42 FA                  <2>  cli
  1352 00000D43 C605[AE1C0000]0B    <2>  mov byte [intprob], i
  1353 00000D4A E9640C0000          <2>  jmp unhand2
  1354                              <2>  %assign i i+1
  1355 00000D4F FA                  <2>  cli
  1356 00000D50 C605[AE1C0000]0C    <2>  mov byte [intprob], i
  1357 00000D57 E9570C0000          <2>  jmp unhand2
  1358                              <2>  %assign i i+1
  1359 00000D5C FA                  <2>  cli
  1360 00000D5D C605[AE1C0000]0D    <2>  mov byte [intprob], i
  1361 00000D64 E94A0C0000          <2>  jmp unhand2
  1362                              <2>  %assign i i+1
  1363 00000D69 FA                  <2>  cli
  1364 00000D6A C605[AE1C0000]0E    <2>  mov byte [intprob], i
  1365 00000D71 E93D0C0000          <2>  jmp unhand2
  1366                              <2>  %assign i i+1
  1367 00000D76 FA                  <2>  cli
  1368 00000D77 C605[AE1C0000]0F    <2>  mov byte [intprob], i
  1369 00000D7E E9300C0000          <2>  jmp unhand2
  1370                              <2>  %assign i i+1
  1371 00000D83 FA                  <2>  cli
  1372 00000D84 C605[AE1C0000]10    <2>  mov byte [intprob], i
  1373 00000D8B E9230C0000          <2>  jmp unhand2
  1374                              <2>  %assign i i+1
  1375 00000D90 FA                  <2>  cli
  1376 00000D91 C605[AE1C0000]11    <2>  mov byte [intprob], i
  1377 00000D98 E9160C0000          <2>  jmp unhand2
  1378                              <2>  %assign i i+1
  1379 00000D9D FA                  <2>  cli
  1380 00000D9E C605[AE1C0000]12    <2>  mov byte [intprob], i
  1381 00000DA5 E9090C0000          <2>  jmp unhand2
  1382                              <2>  %assign i i+1
  1383 00000DAA FA                  <2>  cli
  1384 00000DAB C605[AE1C0000]13    <2>  mov byte [intprob], i
  1385 00000DB2 E9FC0B0000          <2>  jmp unhand2
  1386                              <2>  %assign i i+1
  1387 00000DB7 FA                  <2>  cli
  1388 00000DB8 C605[AE1C0000]14    <2>  mov byte [intprob], i
  1389 00000DBF E9EF0B0000          <2>  jmp unhand2
  1390                              <2>  %assign i i+1
  1391 00000DC4 FA                  <2>  cli
  1392 00000DC5 C605[AE1C0000]15    <2>  mov byte [intprob], i
  1393 00000DCC E9E20B0000          <2>  jmp unhand2
  1394                              <2>  %assign i i+1
  1395 00000DD1 FA                  <2>  cli
  1396 00000DD2 C605[AE1C0000]16    <2>  mov byte [intprob], i
  1397 00000DD9 E9D50B0000          <2>  jmp unhand2
  1398                              <2>  %assign i i+1
  1399 00000DDE FA                  <2>  cli
  1400 00000DDF C605[AE1C0000]17    <2>  mov byte [intprob], i
  1401 00000DE6 E9C80B0000          <2>  jmp unhand2
  1402                              <2>  %assign i i+1
  1403 00000DEB FA                  <2>  cli
  1404 00000DEC C605[AE1C0000]18    <2>  mov byte [intprob], i
  1405 00000DF3 E9BB0B0000          <2>  jmp unhand2
  1406                              <2>  %assign i i+1
  1407 00000DF8 FA                  <2>  cli
  1408 00000DF9 C605[AE1C0000]19    <2>  mov byte [intprob], i
  1409 00000E00 E9AE0B0000          <2>  jmp unhand2
  1410                              <2>  %assign i i+1
  1411 00000E05 FA                  <2>  cli
  1412 00000E06 C605[AE1C0000]1A    <2>  mov byte [intprob], i
  1413 00000E0D E9A10B0000          <2>  jmp unhand2
  1414                              <2>  %assign i i+1
  1415 00000E12 FA                  <2>  cli
  1416 00000E13 C605[AE1C0000]1B    <2>  mov byte [intprob], i
  1417 00000E1A E9940B0000          <2>  jmp unhand2
  1418                              <2>  %assign i i+1
  1419 00000E1F FA                  <2>  cli
  1420 00000E20 C605[AE1C0000]1C    <2>  mov byte [intprob], i
  1421 00000E27 E9870B0000          <2>  jmp unhand2
  1422                              <2>  %assign i i+1
  1423 00000E2C FA                  <2>  cli
  1424 00000E2D C605[AE1C0000]1D    <2>  mov byte [intprob], i
  1425 00000E34 E97A0B0000          <2>  jmp unhand2
  1426                              <2>  %assign i i+1
  1427 00000E39 FA                  <2>  cli
  1428 00000E3A C605[AE1C0000]1E    <2>  mov byte [intprob], i
  1429 00000E41 E96D0B0000          <2>  jmp unhand2
  1430                              <2>  %assign i i+1
  1431 00000E46 FA                  <2>  cli
  1432 00000E47 C605[AE1C0000]1F    <2>  mov byte [intprob], i
  1433 00000E4E E9600B0000          <2>  jmp unhand2
  1434                              <2>  %assign i i+1
  1435 00000E53 FA                  <2>  cli
  1436 00000E54 C605[AE1C0000]20    <2>  mov byte [intprob], i
  1437 00000E5B E9530B0000          <2>  jmp unhand2
  1438                              <2>  %assign i i+1
  1439 00000E60 FA                  <2>  cli
  1440 00000E61 C605[AE1C0000]21    <2>  mov byte [intprob], i
  1441 00000E68 E9460B0000          <2>  jmp unhand2
  1442                              <2>  %assign i i+1
  1443 00000E6D FA                  <2>  cli
  1444 00000E6E C605[AE1C0000]22    <2>  mov byte [intprob], i
  1445 00000E75 E9390B0000          <2>  jmp unhand2
  1446                              <2>  %assign i i+1
  1447 00000E7A FA                  <2>  cli
  1448 00000E7B C605[AE1C0000]23    <2>  mov byte [intprob], i
  1449 00000E82 E92C0B0000          <2>  jmp unhand2
  1450                              <2>  %assign i i+1
  1451 00000E87 FA                  <2>  cli
  1452 00000E88 C605[AE1C0000]24    <2>  mov byte [intprob], i
  1453 00000E8F E91F0B0000          <2>  jmp unhand2
  1454                              <2>  %assign i i+1
  1455 00000E94 FA                  <2>  cli
  1456 00000E95 C605[AE1C0000]25    <2>  mov byte [intprob], i
  1457 00000E9C E9120B0000          <2>  jmp unhand2
  1458                              <2>  %assign i i+1
  1459 00000EA1 FA                  <2>  cli
  1460 00000EA2 C605[AE1C0000]26    <2>  mov byte [intprob], i
  1461 00000EA9 E9050B0000          <2>  jmp unhand2
  1462                              <2>  %assign i i+1
  1463 00000EAE FA                  <2>  cli
  1464 00000EAF C605[AE1C0000]27    <2>  mov byte [intprob], i
  1465 00000EB6 E9F80A0000          <2>  jmp unhand2
  1466                              <2>  %assign i i+1
  1467 00000EBB FA                  <2>  cli
  1468 00000EBC C605[AE1C0000]28    <2>  mov byte [intprob], i
  1469 00000EC3 E9EB0A0000          <2>  jmp unhand2
  1470                              <2>  %assign i i+1
  1471 00000EC8 FA                  <2>  cli
  1472 00000EC9 C605[AE1C0000]29    <2>  mov byte [intprob], i
  1473 00000ED0 E9DE0A0000          <2>  jmp unhand2
  1474                              <2>  %assign i i+1
  1475 00000ED5 FA                  <2>  cli
  1476 00000ED6 C605[AE1C0000]2A    <2>  mov byte [intprob], i
  1477 00000EDD E9D10A0000          <2>  jmp unhand2
  1478                              <2>  %assign i i+1
  1479 00000EE2 FA                  <2>  cli
  1480 00000EE3 C605[AE1C0000]2B    <2>  mov byte [intprob], i
  1481 00000EEA E9C40A0000          <2>  jmp unhand2
  1482                              <2>  %assign i i+1
  1483 00000EEF FA                  <2>  cli
  1484 00000EF0 C605[AE1C0000]2C    <2>  mov byte [intprob], i
  1485 00000EF7 E9B70A0000          <2>  jmp unhand2
  1486                              <2>  %assign i i+1
  1487 00000EFC FA                  <2>  cli
  1488 00000EFD C605[AE1C0000]2D    <2>  mov byte [intprob], i
  1489 00000F04 E9AA0A0000          <2>  jmp unhand2
  1490                              <2>  %assign i i+1
  1491 00000F09 FA                  <2>  cli
  1492 00000F0A C605[AE1C0000]2E    <2>  mov byte [intprob], i
  1493 00000F11 E99D0A0000          <2>  jmp unhand2
  1494                              <2>  %assign i i+1
  1495 00000F16 FA                  <2>  cli
  1496 00000F17 C605[AE1C0000]2F    <2>  mov byte [intprob], i
  1497 00000F1E E9900A0000          <2>  jmp unhand2
  1498                              <2>  %assign i i+1
  1499 00000F23 FA                  <2>  cli
  1500 00000F24 C605[AE1C0000]30    <2>  mov byte [intprob], i
  1501 00000F2B E9830A0000          <2>  jmp unhand2
  1502                              <2>  %assign i i+1
  1503 00000F30 FA                  <2>  cli
  1504 00000F31 C605[AE1C0000]31    <2>  mov byte [intprob], i
  1505 00000F38 E9760A0000          <2>  jmp unhand2
  1506                              <2>  %assign i i+1
  1507 00000F3D FA                  <2>  cli
  1508 00000F3E C605[AE1C0000]32    <2>  mov byte [intprob], i
  1509 00000F45 E9690A0000          <2>  jmp unhand2
  1510                              <2>  %assign i i+1
  1511 00000F4A FA                  <2>  cli
  1512 00000F4B C605[AE1C0000]33    <2>  mov byte [intprob], i
  1513 00000F52 E95C0A0000          <2>  jmp unhand2
  1514                              <2>  %assign i i+1
  1515 00000F57 FA                  <2>  cli
  1516 00000F58 C605[AE1C0000]34    <2>  mov byte [intprob], i
  1517 00000F5F E94F0A0000          <2>  jmp unhand2
  1518                              <2>  %assign i i+1
  1519 00000F64 FA                  <2>  cli
  1520 00000F65 C605[AE1C0000]35    <2>  mov byte [intprob], i
  1521 00000F6C E9420A0000          <2>  jmp unhand2
  1522                              <2>  %assign i i+1
  1523 00000F71 FA                  <2>  cli
  1524 00000F72 C605[AE1C0000]36    <2>  mov byte [intprob], i
  1525 00000F79 E9350A0000          <2>  jmp unhand2
  1526                              <2>  %assign i i+1
  1527 00000F7E FA                  <2>  cli
  1528 00000F7F C605[AE1C0000]37    <2>  mov byte [intprob], i
  1529 00000F86 E9280A0000          <2>  jmp unhand2
  1530                              <2>  %assign i i+1
  1531 00000F8B FA                  <2>  cli
  1532 00000F8C C605[AE1C0000]38    <2>  mov byte [intprob], i
  1533 00000F93 E91B0A0000          <2>  jmp unhand2
  1534                              <2>  %assign i i+1
  1535 00000F98 FA                  <2>  cli
  1536 00000F99 C605[AE1C0000]39    <2>  mov byte [intprob], i
  1537 00000FA0 E90E0A0000          <2>  jmp unhand2
  1538                              <2>  %assign i i+1
  1539 00000FA5 FA                  <2>  cli
  1540 00000FA6 C605[AE1C0000]3A    <2>  mov byte [intprob], i
  1541 00000FAD E9010A0000          <2>  jmp unhand2
  1542                              <2>  %assign i i+1
  1543 00000FB2 FA                  <2>  cli
  1544 00000FB3 C605[AE1C0000]3B    <2>  mov byte [intprob], i
  1545 00000FBA E9F4090000          <2>  jmp unhand2
  1546                              <2>  %assign i i+1
  1547 00000FBF FA                  <2>  cli
  1548 00000FC0 C605[AE1C0000]3C    <2>  mov byte [intprob], i
  1549 00000FC7 E9E7090000          <2>  jmp unhand2
  1550                              <2>  %assign i i+1
  1551 00000FCC FA                  <2>  cli
  1552 00000FCD C605[AE1C0000]3D    <2>  mov byte [intprob], i
  1553 00000FD4 E9DA090000          <2>  jmp unhand2
  1554                              <2>  %assign i i+1
  1555 00000FD9 FA                  <2>  cli
  1556 00000FDA C605[AE1C0000]3E    <2>  mov byte [intprob], i
  1557 00000FE1 E9CD090000          <2>  jmp unhand2
  1558                              <2>  %assign i i+1
  1559 00000FE6 FA                  <2>  cli
  1560 00000FE7 C605[AE1C0000]3F    <2>  mov byte [intprob], i
  1561 00000FEE E9C0090000          <2>  jmp unhand2
  1562                              <2>  %assign i i+1
  1563 00000FF3 FA                  <2>  cli
  1564 00000FF4 C605[AE1C0000]40    <2>  mov byte [intprob], i
  1565 00000FFB E9B3090000          <2>  jmp unhand2
  1566                              <2>  %assign i i+1
  1567 00001000 FA                  <2>  cli
  1568 00001001 C605[AE1C0000]41    <2>  mov byte [intprob], i
  1569 00001008 E9A6090000          <2>  jmp unhand2
  1570                              <2>  %assign i i+1
  1571 0000100D FA                  <2>  cli
  1572 0000100E C605[AE1C0000]42    <2>  mov byte [intprob], i
  1573 00001015 E999090000          <2>  jmp unhand2
  1574                              <2>  %assign i i+1
  1575 0000101A FA                  <2>  cli
  1576 0000101B C605[AE1C0000]43    <2>  mov byte [intprob], i
  1577 00001022 E98C090000          <2>  jmp unhand2
  1578                              <2>  %assign i i+1
  1579 00001027 FA                  <2>  cli
  1580 00001028 C605[AE1C0000]44    <2>  mov byte [intprob], i
  1581 0000102F E97F090000          <2>  jmp unhand2
  1582                              <2>  %assign i i+1
  1583 00001034 FA                  <2>  cli
  1584 00001035 C605[AE1C0000]45    <2>  mov byte [intprob], i
  1585 0000103C E972090000          <2>  jmp unhand2
  1586                              <2>  %assign i i+1
  1587 00001041 FA                  <2>  cli
  1588 00001042 C605[AE1C0000]46    <2>  mov byte [intprob], i
  1589 00001049 E965090000          <2>  jmp unhand2
  1590                              <2>  %assign i i+1
  1591 0000104E FA                  <2>  cli
  1592 0000104F C605[AE1C0000]47    <2>  mov byte [intprob], i
  1593 00001056 E958090000          <2>  jmp unhand2
  1594                              <2>  %assign i i+1
  1595 0000105B FA                  <2>  cli
  1596 0000105C C605[AE1C0000]48    <2>  mov byte [intprob], i
  1597 00001063 E94B090000          <2>  jmp unhand2
  1598                              <2>  %assign i i+1
  1599 00001068 FA                  <2>  cli
  1600 00001069 C605[AE1C0000]49    <2>  mov byte [intprob], i
  1601 00001070 E93E090000          <2>  jmp unhand2
  1602                              <2>  %assign i i+1
  1603 00001075 FA                  <2>  cli
  1604 00001076 C605[AE1C0000]4A    <2>  mov byte [intprob], i
  1605 0000107D E931090000          <2>  jmp unhand2
  1606                              <2>  %assign i i+1
  1607 00001082 FA                  <2>  cli
  1608 00001083 C605[AE1C0000]4B    <2>  mov byte [intprob], i
  1609 0000108A E924090000          <2>  jmp unhand2
  1610                              <2>  %assign i i+1
  1611 0000108F FA                  <2>  cli
  1612 00001090 C605[AE1C0000]4C    <2>  mov byte [intprob], i
  1613 00001097 E917090000          <2>  jmp unhand2
  1614                              <2>  %assign i i+1
  1615 0000109C FA                  <2>  cli
  1616 0000109D C605[AE1C0000]4D    <2>  mov byte [intprob], i
  1617 000010A4 E90A090000          <2>  jmp unhand2
  1618                              <2>  %assign i i+1
  1619 000010A9 FA                  <2>  cli
  1620 000010AA C605[AE1C0000]4E    <2>  mov byte [intprob], i
  1621 000010B1 E9FD080000          <2>  jmp unhand2
  1622                              <2>  %assign i i+1
  1623 000010B6 FA                  <2>  cli
  1624 000010B7 C605[AE1C0000]4F    <2>  mov byte [intprob], i
  1625 000010BE E9F0080000          <2>  jmp unhand2
  1626                              <2>  %assign i i+1
  1627 000010C3 FA                  <2>  cli
  1628 000010C4 C605[AE1C0000]50    <2>  mov byte [intprob], i
  1629 000010CB E9E3080000          <2>  jmp unhand2
  1630                              <2>  %assign i i+1
  1631 000010D0 FA                  <2>  cli
  1632 000010D1 C605[AE1C0000]51    <2>  mov byte [intprob], i
  1633 000010D8 E9D6080000          <2>  jmp unhand2
  1634                              <2>  %assign i i+1
  1635 000010DD FA                  <2>  cli
  1636 000010DE C605[AE1C0000]52    <2>  mov byte [intprob], i
  1637 000010E5 E9C9080000          <2>  jmp unhand2
  1638                              <2>  %assign i i+1
  1639 000010EA FA                  <2>  cli
  1640 000010EB C605[AE1C0000]53    <2>  mov byte [intprob], i
  1641 000010F2 E9BC080000          <2>  jmp unhand2
  1642                              <2>  %assign i i+1
  1643 000010F7 FA                  <2>  cli
  1644 000010F8 C605[AE1C0000]54    <2>  mov byte [intprob], i
  1645 000010FF E9AF080000          <2>  jmp unhand2
  1646                              <2>  %assign i i+1
  1647 00001104 FA                  <2>  cli
  1648 00001105 C605[AE1C0000]55    <2>  mov byte [intprob], i
  1649 0000110C E9A2080000          <2>  jmp unhand2
  1650                              <2>  %assign i i+1
  1651 00001111 FA                  <2>  cli
  1652 00001112 C605[AE1C0000]56    <2>  mov byte [intprob], i
  1653 00001119 E995080000          <2>  jmp unhand2
  1654                              <2>  %assign i i+1
  1655 0000111E FA                  <2>  cli
  1656 0000111F C605[AE1C0000]57    <2>  mov byte [intprob], i
  1657 00001126 E988080000          <2>  jmp unhand2
  1658                              <2>  %assign i i+1
  1659 0000112B FA                  <2>  cli
  1660 0000112C C605[AE1C0000]58    <2>  mov byte [intprob], i
  1661 00001133 E97B080000          <2>  jmp unhand2
  1662                              <2>  %assign i i+1
  1663 00001138 FA                  <2>  cli
  1664 00001139 C605[AE1C0000]59    <2>  mov byte [intprob], i
  1665 00001140 E96E080000          <2>  jmp unhand2
  1666                              <2>  %assign i i+1
  1667 00001145 FA                  <2>  cli
  1668 00001146 C605[AE1C0000]5A    <2>  mov byte [intprob], i
  1669 0000114D E961080000          <2>  jmp unhand2
  1670                              <2>  %assign i i+1
  1671 00001152 FA                  <2>  cli
  1672 00001153 C605[AE1C0000]5B    <2>  mov byte [intprob], i
  1673 0000115A E954080000          <2>  jmp unhand2
  1674                              <2>  %assign i i+1
  1675 0000115F FA                  <2>  cli
  1676 00001160 C605[AE1C0000]5C    <2>  mov byte [intprob], i
  1677 00001167 E947080000          <2>  jmp unhand2
  1678                              <2>  %assign i i+1
  1679 0000116C FA                  <2>  cli
  1680 0000116D C605[AE1C0000]5D    <2>  mov byte [intprob], i
  1681 00001174 E93A080000          <2>  jmp unhand2
  1682                              <2>  %assign i i+1
  1683 00001179 FA                  <2>  cli
  1684 0000117A C605[AE1C0000]5E    <2>  mov byte [intprob], i
  1685 00001181 E92D080000          <2>  jmp unhand2
  1686                              <2>  %assign i i+1
  1687 00001186 FA                  <2>  cli
  1688 00001187 C605[AE1C0000]5F    <2>  mov byte [intprob], i
  1689 0000118E E920080000          <2>  jmp unhand2
  1690                              <2>  %assign i i+1
  1691 00001193 FA                  <2>  cli
  1692 00001194 C605[AE1C0000]60    <2>  mov byte [intprob], i
  1693 0000119B E913080000          <2>  jmp unhand2
  1694                              <2>  %assign i i+1
  1695 000011A0 FA                  <2>  cli
  1696 000011A1 C605[AE1C0000]61    <2>  mov byte [intprob], i
  1697 000011A8 E906080000          <2>  jmp unhand2
  1698                              <2>  %assign i i+1
  1699 000011AD FA                  <2>  cli
  1700 000011AE C605[AE1C0000]62    <2>  mov byte [intprob], i
  1701 000011B5 E9F9070000          <2>  jmp unhand2
  1702                              <2>  %assign i i+1
  1703 000011BA FA                  <2>  cli
  1704 000011BB C605[AE1C0000]63    <2>  mov byte [intprob], i
  1705 000011C2 E9EC070000          <2>  jmp unhand2
  1706                              <2>  %assign i i+1
  1707 000011C7 FA                  <2>  cli
  1708 000011C8 C605[AE1C0000]64    <2>  mov byte [intprob], i
  1709 000011CF E9DF070000          <2>  jmp unhand2
  1710                              <2>  %assign i i+1
  1711 000011D4 FA                  <2>  cli
  1712 000011D5 C605[AE1C0000]65    <2>  mov byte [intprob], i
  1713 000011DC E9D2070000          <2>  jmp unhand2
  1714                              <2>  %assign i i+1
  1715 000011E1 FA                  <2>  cli
  1716 000011E2 C605[AE1C0000]66    <2>  mov byte [intprob], i
  1717 000011E9 E9C5070000          <2>  jmp unhand2
  1718                              <2>  %assign i i+1
  1719 000011EE FA                  <2>  cli
  1720 000011EF C605[AE1C0000]67    <2>  mov byte [intprob], i
  1721 000011F6 E9B8070000          <2>  jmp unhand2
  1722                              <2>  %assign i i+1
  1723 000011FB FA                  <2>  cli
  1724 000011FC C605[AE1C0000]68    <2>  mov byte [intprob], i
  1725 00001203 E9AB070000          <2>  jmp unhand2
  1726                              <2>  %assign i i+1
  1727 00001208 FA                  <2>  cli
  1728 00001209 C605[AE1C0000]69    <2>  mov byte [intprob], i
  1729 00001210 E99E070000          <2>  jmp unhand2
  1730                              <2>  %assign i i+1
  1731 00001215 FA                  <2>  cli
  1732 00001216 C605[AE1C0000]6A    <2>  mov byte [intprob], i
  1733 0000121D E991070000          <2>  jmp unhand2
  1734                              <2>  %assign i i+1
  1735 00001222 FA                  <2>  cli
  1736 00001223 C605[AE1C0000]6B    <2>  mov byte [intprob], i
  1737 0000122A E984070000          <2>  jmp unhand2
  1738                              <2>  %assign i i+1
  1739 0000122F FA                  <2>  cli
  1740 00001230 C605[AE1C0000]6C    <2>  mov byte [intprob], i
  1741 00001237 E977070000          <2>  jmp unhand2
  1742                              <2>  %assign i i+1
  1743 0000123C FA                  <2>  cli
  1744 0000123D C605[AE1C0000]6D    <2>  mov byte [intprob], i
  1745 00001244 E96A070000          <2>  jmp unhand2
  1746                              <2>  %assign i i+1
  1747 00001249 FA                  <2>  cli
  1748 0000124A C605[AE1C0000]6E    <2>  mov byte [intprob], i
  1749 00001251 E95D070000          <2>  jmp unhand2
  1750                              <2>  %assign i i+1
  1751 00001256 FA                  <2>  cli
  1752 00001257 C605[AE1C0000]6F    <2>  mov byte [intprob], i
  1753 0000125E E950070000          <2>  jmp unhand2
  1754                              <2>  %assign i i+1
  1755 00001263 FA                  <2>  cli
  1756 00001264 C605[AE1C0000]70    <2>  mov byte [intprob], i
  1757 0000126B E943070000          <2>  jmp unhand2
  1758                              <2>  %assign i i+1
  1759 00001270 FA                  <2>  cli
  1760 00001271 C605[AE1C0000]71    <2>  mov byte [intprob], i
  1761 00001278 E936070000          <2>  jmp unhand2
  1762                              <2>  %assign i i+1
  1763 0000127D FA                  <2>  cli
  1764 0000127E C605[AE1C0000]72    <2>  mov byte [intprob], i
  1765 00001285 E929070000          <2>  jmp unhand2
  1766                              <2>  %assign i i+1
  1767 0000128A FA                  <2>  cli
  1768 0000128B C605[AE1C0000]73    <2>  mov byte [intprob], i
  1769 00001292 E91C070000          <2>  jmp unhand2
  1770                              <2>  %assign i i+1
  1771 00001297 FA                  <2>  cli
  1772 00001298 C605[AE1C0000]74    <2>  mov byte [intprob], i
  1773 0000129F E90F070000          <2>  jmp unhand2
  1774                              <2>  %assign i i+1
  1775 000012A4 FA                  <2>  cli
  1776 000012A5 C605[AE1C0000]75    <2>  mov byte [intprob], i
  1777 000012AC E902070000          <2>  jmp unhand2
  1778                              <2>  %assign i i+1
  1779 000012B1 FA                  <2>  cli
  1780 000012B2 C605[AE1C0000]76    <2>  mov byte [intprob], i
  1781 000012B9 E9F5060000          <2>  jmp unhand2
  1782                              <2>  %assign i i+1
  1783 000012BE FA                  <2>  cli
  1784 000012BF C605[AE1C0000]77    <2>  mov byte [intprob], i
  1785 000012C6 E9E8060000          <2>  jmp unhand2
  1786                              <2>  %assign i i+1
  1787 000012CB FA                  <2>  cli
  1788 000012CC C605[AE1C0000]78    <2>  mov byte [intprob], i
  1789 000012D3 E9DB060000          <2>  jmp unhand2
  1790                              <2>  %assign i i+1
  1791 000012D8 FA                  <2>  cli
  1792 000012D9 C605[AE1C0000]79    <2>  mov byte [intprob], i
  1793 000012E0 E9CE060000          <2>  jmp unhand2
  1794                              <2>  %assign i i+1
  1795 000012E5 FA                  <2>  cli
  1796 000012E6 C605[AE1C0000]7A    <2>  mov byte [intprob], i
  1797 000012ED E9C1060000          <2>  jmp unhand2
  1798                              <2>  %assign i i+1
  1799 000012F2 FA                  <2>  cli
  1800 000012F3 C605[AE1C0000]7B    <2>  mov byte [intprob], i
  1801 000012FA E9B4060000          <2>  jmp unhand2
  1802                              <2>  %assign i i+1
  1803 000012FF FA                  <2>  cli
  1804 00001300 C605[AE1C0000]7C    <2>  mov byte [intprob], i
  1805 00001307 E9A7060000          <2>  jmp unhand2
  1806                              <2>  %assign i i+1
  1807 0000130C FA                  <2>  cli
  1808 0000130D C605[AE1C0000]7D    <2>  mov byte [intprob], i
  1809 00001314 E99A060000          <2>  jmp unhand2
  1810                              <2>  %assign i i+1
  1811 00001319 FA                  <2>  cli
  1812 0000131A C605[AE1C0000]7E    <2>  mov byte [intprob], i
  1813 00001321 E98D060000          <2>  jmp unhand2
  1814                              <2>  %assign i i+1
  1815 00001326 FA                  <2>  cli
  1816 00001327 C605[AE1C0000]7F    <2>  mov byte [intprob], i
  1817 0000132E E980060000          <2>  jmp unhand2
  1818                              <2>  %assign i i+1
  1819 00001333 FA                  <2>  cli
  1820 00001334 C605[AE1C0000]80    <2>  mov byte [intprob], i
  1821 0000133B E973060000          <2>  jmp unhand2
  1822                              <2>  %assign i i+1
  1823 00001340 FA                  <2>  cli
  1824 00001341 C605[AE1C0000]81    <2>  mov byte [intprob], i
  1825 00001348 E966060000          <2>  jmp unhand2
  1826                              <2>  %assign i i+1
  1827 0000134D FA                  <2>  cli
  1828 0000134E C605[AE1C0000]82    <2>  mov byte [intprob], i
  1829 00001355 E959060000          <2>  jmp unhand2
  1830                              <2>  %assign i i+1
  1831 0000135A FA                  <2>  cli
  1832 0000135B C605[AE1C0000]83    <2>  mov byte [intprob], i
  1833 00001362 E94C060000          <2>  jmp unhand2
  1834                              <2>  %assign i i+1
  1835 00001367 FA                  <2>  cli
  1836 00001368 C605[AE1C0000]84    <2>  mov byte [intprob], i
  1837 0000136F E93F060000          <2>  jmp unhand2
  1838                              <2>  %assign i i+1
  1839 00001374 FA                  <2>  cli
  1840 00001375 C605[AE1C0000]85    <2>  mov byte [intprob], i
  1841 0000137C E932060000          <2>  jmp unhand2
  1842                              <2>  %assign i i+1
  1843 00001381 FA                  <2>  cli
  1844 00001382 C605[AE1C0000]86    <2>  mov byte [intprob], i
  1845 00001389 E925060000          <2>  jmp unhand2
  1846                              <2>  %assign i i+1
  1847 0000138E FA                  <2>  cli
  1848 0000138F C605[AE1C0000]87    <2>  mov byte [intprob], i
  1849 00001396 E918060000          <2>  jmp unhand2
  1850                              <2>  %assign i i+1
  1851 0000139B FA                  <2>  cli
  1852 0000139C C605[AE1C0000]88    <2>  mov byte [intprob], i
  1853 000013A3 E90B060000          <2>  jmp unhand2
  1854                              <2>  %assign i i+1
  1855 000013A8 FA                  <2>  cli
  1856 000013A9 C605[AE1C0000]89    <2>  mov byte [intprob], i
  1857 000013B0 E9FE050000          <2>  jmp unhand2
  1858                              <2>  %assign i i+1
  1859 000013B5 FA                  <2>  cli
  1860 000013B6 C605[AE1C0000]8A    <2>  mov byte [intprob], i
  1861 000013BD E9F1050000          <2>  jmp unhand2
  1862                              <2>  %assign i i+1
  1863 000013C2 FA                  <2>  cli
  1864 000013C3 C605[AE1C0000]8B    <2>  mov byte [intprob], i
  1865 000013CA E9E4050000          <2>  jmp unhand2
  1866                              <2>  %assign i i+1
  1867 000013CF FA                  <2>  cli
  1868 000013D0 C605[AE1C0000]8C    <2>  mov byte [intprob], i
  1869 000013D7 E9D7050000          <2>  jmp unhand2
  1870                              <2>  %assign i i+1
  1871 000013DC FA                  <2>  cli
  1872 000013DD C605[AE1C0000]8D    <2>  mov byte [intprob], i
  1873 000013E4 E9CA050000          <2>  jmp unhand2
  1874                              <2>  %assign i i+1
  1875 000013E9 FA                  <2>  cli
  1876 000013EA C605[AE1C0000]8E    <2>  mov byte [intprob], i
  1877 000013F1 E9BD050000          <2>  jmp unhand2
  1878                              <2>  %assign i i+1
  1879 000013F6 FA                  <2>  cli
  1880 000013F7 C605[AE1C0000]8F    <2>  mov byte [intprob], i
  1881 000013FE E9B0050000          <2>  jmp unhand2
  1882                              <2>  %assign i i+1
  1883 00001403 FA                  <2>  cli
  1884 00001404 C605[AE1C0000]90    <2>  mov byte [intprob], i
  1885 0000140B E9A3050000          <2>  jmp unhand2
  1886                              <2>  %assign i i+1
  1887 00001410 FA                  <2>  cli
  1888 00001411 C605[AE1C0000]91    <2>  mov byte [intprob], i
  1889 00001418 E996050000          <2>  jmp unhand2
  1890                              <2>  %assign i i+1
  1891 0000141D FA                  <2>  cli
  1892 0000141E C605[AE1C0000]92    <2>  mov byte [intprob], i
  1893 00001425 E989050000          <2>  jmp unhand2
  1894                              <2>  %assign i i+1
  1895 0000142A FA                  <2>  cli
  1896 0000142B C605[AE1C0000]93    <2>  mov byte [intprob], i
  1897 00001432 E97C050000          <2>  jmp unhand2
  1898                              <2>  %assign i i+1
  1899 00001437 FA                  <2>  cli
  1900 00001438 C605[AE1C0000]94    <2>  mov byte [intprob], i
  1901 0000143F E96F050000          <2>  jmp unhand2
  1902                              <2>  %assign i i+1
  1903 00001444 FA                  <2>  cli
  1904 00001445 C605[AE1C0000]95    <2>  mov byte [intprob], i
  1905 0000144C E962050000          <2>  jmp unhand2
  1906                              <2>  %assign i i+1
  1907 00001451 FA                  <2>  cli
  1908 00001452 C605[AE1C0000]96    <2>  mov byte [intprob], i
  1909 00001459 E955050000          <2>  jmp unhand2
  1910                              <2>  %assign i i+1
  1911 0000145E FA                  <2>  cli
  1912 0000145F C605[AE1C0000]97    <2>  mov byte [intprob], i
  1913 00001466 E948050000          <2>  jmp unhand2
  1914                              <2>  %assign i i+1
  1915 0000146B FA                  <2>  cli
  1916 0000146C C605[AE1C0000]98    <2>  mov byte [intprob], i
  1917 00001473 E93B050000          <2>  jmp unhand2
  1918                              <2>  %assign i i+1
  1919 00001478 FA                  <2>  cli
  1920 00001479 C605[AE1C0000]99    <2>  mov byte [intprob], i
  1921 00001480 E92E050000          <2>  jmp unhand2
  1922                              <2>  %assign i i+1
  1923 00001485 FA                  <2>  cli
  1924 00001486 C605[AE1C0000]9A    <2>  mov byte [intprob], i
  1925 0000148D E921050000          <2>  jmp unhand2
  1926                              <2>  %assign i i+1
  1927 00001492 FA                  <2>  cli
  1928 00001493 C605[AE1C0000]9B    <2>  mov byte [intprob], i
  1929 0000149A E914050000          <2>  jmp unhand2
  1930                              <2>  %assign i i+1
  1931 0000149F FA                  <2>  cli
  1932 000014A0 C605[AE1C0000]9C    <2>  mov byte [intprob], i
  1933 000014A7 E907050000          <2>  jmp unhand2
  1934                              <2>  %assign i i+1
  1935 000014AC FA                  <2>  cli
  1936 000014AD C605[AE1C0000]9D    <2>  mov byte [intprob], i
  1937 000014B4 E9FA040000          <2>  jmp unhand2
  1938                              <2>  %assign i i+1
  1939 000014B9 FA                  <2>  cli
  1940 000014BA C605[AE1C0000]9E    <2>  mov byte [intprob], i
  1941 000014C1 E9ED040000          <2>  jmp unhand2
  1942                              <2>  %assign i i+1
  1943 000014C6 FA                  <2>  cli
  1944 000014C7 C605[AE1C0000]9F    <2>  mov byte [intprob], i
  1945 000014CE E9E0040000          <2>  jmp unhand2
  1946                              <2>  %assign i i+1
  1947 000014D3 FA                  <2>  cli
  1948 000014D4 C605[AE1C0000]A0    <2>  mov byte [intprob], i
  1949 000014DB E9D3040000          <2>  jmp unhand2
  1950                              <2>  %assign i i+1
  1951 000014E0 FA                  <2>  cli
  1952 000014E1 C605[AE1C0000]A1    <2>  mov byte [intprob], i
  1953 000014E8 E9C6040000          <2>  jmp unhand2
  1954                              <2>  %assign i i+1
  1955 000014ED FA                  <2>  cli
  1956 000014EE C605[AE1C0000]A2    <2>  mov byte [intprob], i
  1957 000014F5 E9B9040000          <2>  jmp unhand2
  1958                              <2>  %assign i i+1
  1959 000014FA FA                  <2>  cli
  1960 000014FB C605[AE1C0000]A3    <2>  mov byte [intprob], i
  1961 00001502 E9AC040000          <2>  jmp unhand2
  1962                              <2>  %assign i i+1
  1963 00001507 FA                  <2>  cli
  1964 00001508 C605[AE1C0000]A4    <2>  mov byte [intprob], i
  1965 0000150F E99F040000          <2>  jmp unhand2
  1966                              <2>  %assign i i+1
  1967 00001514 FA                  <2>  cli
  1968 00001515 C605[AE1C0000]A5    <2>  mov byte [intprob], i
  1969 0000151C E992040000          <2>  jmp unhand2
  1970                              <2>  %assign i i+1
  1971 00001521 FA                  <2>  cli
  1972 00001522 C605[AE1C0000]A6    <2>  mov byte [intprob], i
  1973 00001529 E985040000          <2>  jmp unhand2
  1974                              <2>  %assign i i+1
  1975 0000152E FA                  <2>  cli
  1976 0000152F C605[AE1C0000]A7    <2>  mov byte [intprob], i
  1977 00001536 E978040000          <2>  jmp unhand2
  1978                              <2>  %assign i i+1
  1979 0000153B FA                  <2>  cli
  1980 0000153C C605[AE1C0000]A8    <2>  mov byte [intprob], i
  1981 00001543 E96B040000          <2>  jmp unhand2
  1982                              <2>  %assign i i+1
  1983 00001548 FA                  <2>  cli
  1984 00001549 C605[AE1C0000]A9    <2>  mov byte [intprob], i
  1985 00001550 E95E040000          <2>  jmp unhand2
  1986                              <2>  %assign i i+1
  1987 00001555 FA                  <2>  cli
  1988 00001556 C605[AE1C0000]AA    <2>  mov byte [intprob], i
  1989 0000155D E951040000          <2>  jmp unhand2
  1990                              <2>  %assign i i+1
  1991 00001562 FA                  <2>  cli
  1992 00001563 C605[AE1C0000]AB    <2>  mov byte [intprob], i
  1993 0000156A E944040000          <2>  jmp unhand2
  1994                              <2>  %assign i i+1
  1995 0000156F FA                  <2>  cli
  1996 00001570 C605[AE1C0000]AC    <2>  mov byte [intprob], i
  1997 00001577 E937040000          <2>  jmp unhand2
  1998                              <2>  %assign i i+1
  1999 0000157C FA                  <2>  cli
  2000 0000157D C605[AE1C0000]AD    <2>  mov byte [intprob], i
  2001 00001584 E92A040000          <2>  jmp unhand2
  2002                              <2>  %assign i i+1
  2003 00001589 FA                  <2>  cli
  2004 0000158A C605[AE1C0000]AE    <2>  mov byte [intprob], i
  2005 00001591 E91D040000          <2>  jmp unhand2
  2006                              <2>  %assign i i+1
  2007 00001596 FA                  <2>  cli
  2008 00001597 C605[AE1C0000]AF    <2>  mov byte [intprob], i
  2009 0000159E E910040000          <2>  jmp unhand2
  2010                              <2>  %assign i i+1
  2011 000015A3 FA                  <2>  cli
  2012 000015A4 C605[AE1C0000]B0    <2>  mov byte [intprob], i
  2013 000015AB E903040000          <2>  jmp unhand2
  2014                              <2>  %assign i i+1
  2015 000015B0 FA                  <2>  cli
  2016 000015B1 C605[AE1C0000]B1    <2>  mov byte [intprob], i
  2017 000015B8 E9F6030000          <2>  jmp unhand2
  2018                              <2>  %assign i i+1
  2019 000015BD FA                  <2>  cli
  2020 000015BE C605[AE1C0000]B2    <2>  mov byte [intprob], i
  2021 000015C5 E9E9030000          <2>  jmp unhand2
  2022                              <2>  %assign i i+1
  2023 000015CA FA                  <2>  cli
  2024 000015CB C605[AE1C0000]B3    <2>  mov byte [intprob], i
  2025 000015D2 E9DC030000          <2>  jmp unhand2
  2026                              <2>  %assign i i+1
  2027 000015D7 FA                  <2>  cli
  2028 000015D8 C605[AE1C0000]B4    <2>  mov byte [intprob], i
  2029 000015DF E9CF030000          <2>  jmp unhand2
  2030                              <2>  %assign i i+1
  2031 000015E4 FA                  <2>  cli
  2032 000015E5 C605[AE1C0000]B5    <2>  mov byte [intprob], i
  2033 000015EC E9C2030000          <2>  jmp unhand2
  2034                              <2>  %assign i i+1
  2035 000015F1 FA                  <2>  cli
  2036 000015F2 C605[AE1C0000]B6    <2>  mov byte [intprob], i
  2037 000015F9 E9B5030000          <2>  jmp unhand2
  2038                              <2>  %assign i i+1
  2039 000015FE FA                  <2>  cli
  2040 000015FF C605[AE1C0000]B7    <2>  mov byte [intprob], i
  2041 00001606 E9A8030000          <2>  jmp unhand2
  2042                              <2>  %assign i i+1
  2043 0000160B FA                  <2>  cli
  2044 0000160C C605[AE1C0000]B8    <2>  mov byte [intprob], i
  2045 00001613 E99B030000          <2>  jmp unhand2
  2046                              <2>  %assign i i+1
  2047 00001618 FA                  <2>  cli
  2048 00001619 C605[AE1C0000]B9    <2>  mov byte [intprob], i
  2049 00001620 E98E030000          <2>  jmp unhand2
  2050                              <2>  %assign i i+1
  2051 00001625 FA                  <2>  cli
  2052 00001626 C605[AE1C0000]BA    <2>  mov byte [intprob], i
  2053 0000162D E981030000          <2>  jmp unhand2
  2054                              <2>  %assign i i+1
  2055 00001632 FA                  <2>  cli
  2056 00001633 C605[AE1C0000]BB    <2>  mov byte [intprob], i
  2057 0000163A E974030000          <2>  jmp unhand2
  2058                              <2>  %assign i i+1
  2059 0000163F FA                  <2>  cli
  2060 00001640 C605[AE1C0000]BC    <2>  mov byte [intprob], i
  2061 00001647 E967030000          <2>  jmp unhand2
  2062                              <2>  %assign i i+1
  2063 0000164C FA                  <2>  cli
  2064 0000164D C605[AE1C0000]BD    <2>  mov byte [intprob], i
  2065 00001654 E95A030000          <2>  jmp unhand2
  2066                              <2>  %assign i i+1
  2067 00001659 FA                  <2>  cli
  2068 0000165A C605[AE1C0000]BE    <2>  mov byte [intprob], i
  2069 00001661 E94D030000          <2>  jmp unhand2
  2070                              <2>  %assign i i+1
  2071 00001666 FA                  <2>  cli
  2072 00001667 C605[AE1C0000]BF    <2>  mov byte [intprob], i
  2073 0000166E E940030000          <2>  jmp unhand2
  2074                              <2>  %assign i i+1
  2075 00001673 FA                  <2>  cli
  2076 00001674 C605[AE1C0000]C0    <2>  mov byte [intprob], i
  2077 0000167B E933030000          <2>  jmp unhand2
  2078                              <2>  %assign i i+1
  2079 00001680 FA                  <2>  cli
  2080 00001681 C605[AE1C0000]C1    <2>  mov byte [intprob], i
  2081 00001688 E926030000          <2>  jmp unhand2
  2082                              <2>  %assign i i+1
  2083 0000168D FA                  <2>  cli
  2084 0000168E C605[AE1C0000]C2    <2>  mov byte [intprob], i
  2085 00001695 E919030000          <2>  jmp unhand2
  2086                              <2>  %assign i i+1
  2087 0000169A FA                  <2>  cli
  2088 0000169B C605[AE1C0000]C3    <2>  mov byte [intprob], i
  2089 000016A2 E90C030000          <2>  jmp unhand2
  2090                              <2>  %assign i i+1
  2091 000016A7 FA                  <2>  cli
  2092 000016A8 C605[AE1C0000]C4    <2>  mov byte [intprob], i
  2093 000016AF E9FF020000          <2>  jmp unhand2
  2094                              <2>  %assign i i+1
  2095 000016B4 FA                  <2>  cli
  2096 000016B5 C605[AE1C0000]C5    <2>  mov byte [intprob], i
  2097 000016BC E9F2020000          <2>  jmp unhand2
  2098                              <2>  %assign i i+1
  2099 000016C1 FA                  <2>  cli
  2100 000016C2 C605[AE1C0000]C6    <2>  mov byte [intprob], i
  2101 000016C9 E9E5020000          <2>  jmp unhand2
  2102                              <2>  %assign i i+1
  2103 000016CE FA                  <2>  cli
  2104 000016CF C605[AE1C0000]C7    <2>  mov byte [intprob], i
  2105 000016D6 E9D8020000          <2>  jmp unhand2
  2106                              <2>  %assign i i+1
  2107 000016DB FA                  <2>  cli
  2108 000016DC C605[AE1C0000]C8    <2>  mov byte [intprob], i
  2109 000016E3 E9CB020000          <2>  jmp unhand2
  2110                              <2>  %assign i i+1
  2111 000016E8 FA                  <2>  cli
  2112 000016E9 C605[AE1C0000]C9    <2>  mov byte [intprob], i
  2113 000016F0 E9BE020000          <2>  jmp unhand2
  2114                              <2>  %assign i i+1
  2115 000016F5 FA                  <2>  cli
  2116 000016F6 C605[AE1C0000]CA    <2>  mov byte [intprob], i
  2117 000016FD E9B1020000          <2>  jmp unhand2
  2118                              <2>  %assign i i+1
  2119 00001702 FA                  <2>  cli
  2120 00001703 C605[AE1C0000]CB    <2>  mov byte [intprob], i
  2121 0000170A E9A4020000          <2>  jmp unhand2
  2122                              <2>  %assign i i+1
  2123 0000170F FA                  <2>  cli
  2124 00001710 C605[AE1C0000]CC    <2>  mov byte [intprob], i
  2125 00001717 E997020000          <2>  jmp unhand2
  2126                              <2>  %assign i i+1
  2127 0000171C FA                  <2>  cli
  2128 0000171D C605[AE1C0000]CD    <2>  mov byte [intprob], i
  2129 00001724 E98A020000          <2>  jmp unhand2
  2130                              <2>  %assign i i+1
  2131 00001729 FA                  <2>  cli
  2132 0000172A C605[AE1C0000]CE    <2>  mov byte [intprob], i
  2133 00001731 E97D020000          <2>  jmp unhand2
  2134                              <2>  %assign i i+1
  2135 00001736 FA                  <2>  cli
  2136 00001737 C605[AE1C0000]CF    <2>  mov byte [intprob], i
  2137 0000173E E970020000          <2>  jmp unhand2
  2138                              <2>  %assign i i+1
  2139 00001743 FA                  <2>  cli
  2140 00001744 C605[AE1C0000]D0    <2>  mov byte [intprob], i
  2141 0000174B E963020000          <2>  jmp unhand2
  2142                              <2>  %assign i i+1
  2143 00001750 FA                  <2>  cli
  2144 00001751 C605[AE1C0000]D1    <2>  mov byte [intprob], i
  2145 00001758 E956020000          <2>  jmp unhand2
  2146                              <2>  %assign i i+1
  2147 0000175D FA                  <2>  cli
  2148 0000175E C605[AE1C0000]D2    <2>  mov byte [intprob], i
  2149 00001765 E949020000          <2>  jmp unhand2
  2150                              <2>  %assign i i+1
  2151 0000176A FA                  <2>  cli
  2152 0000176B C605[AE1C0000]D3    <2>  mov byte [intprob], i
  2153 00001772 E93C020000          <2>  jmp unhand2
  2154                              <2>  %assign i i+1
  2155 00001777 FA                  <2>  cli
  2156 00001778 C605[AE1C0000]D4    <2>  mov byte [intprob], i
  2157 0000177F E92F020000          <2>  jmp unhand2
  2158                              <2>  %assign i i+1
  2159 00001784 FA                  <2>  cli
  2160 00001785 C605[AE1C0000]D5    <2>  mov byte [intprob], i
  2161 0000178C E922020000          <2>  jmp unhand2
  2162                              <2>  %assign i i+1
  2163 00001791 FA                  <2>  cli
  2164 00001792 C605[AE1C0000]D6    <2>  mov byte [intprob], i
  2165 00001799 E915020000          <2>  jmp unhand2
  2166                              <2>  %assign i i+1
  2167 0000179E FA                  <2>  cli
  2168 0000179F C605[AE1C0000]D7    <2>  mov byte [intprob], i
  2169 000017A6 E908020000          <2>  jmp unhand2
  2170                              <2>  %assign i i+1
  2171 000017AB FA                  <2>  cli
  2172 000017AC C605[AE1C0000]D8    <2>  mov byte [intprob], i
  2173 000017B3 E9FB010000          <2>  jmp unhand2
  2174                              <2>  %assign i i+1
  2175 000017B8 FA                  <2>  cli
  2176 000017B9 C605[AE1C0000]D9    <2>  mov byte [intprob], i
  2177 000017C0 E9EE010000          <2>  jmp unhand2
  2178                              <2>  %assign i i+1
  2179 000017C5 FA                  <2>  cli
  2180 000017C6 C605[AE1C0000]DA    <2>  mov byte [intprob], i
  2181 000017CD E9E1010000          <2>  jmp unhand2
  2182                              <2>  %assign i i+1
  2183 000017D2 FA                  <2>  cli
  2184 000017D3 C605[AE1C0000]DB    <2>  mov byte [intprob], i
  2185 000017DA E9D4010000          <2>  jmp unhand2
  2186                              <2>  %assign i i+1
  2187 000017DF FA                  <2>  cli
  2188 000017E0 C605[AE1C0000]DC    <2>  mov byte [intprob], i
  2189 000017E7 E9C7010000          <2>  jmp unhand2
  2190                              <2>  %assign i i+1
  2191 000017EC FA                  <2>  cli
  2192 000017ED C605[AE1C0000]DD    <2>  mov byte [intprob], i
  2193 000017F4 E9BA010000          <2>  jmp unhand2
  2194                              <2>  %assign i i+1
  2195 000017F9 FA                  <2>  cli
  2196 000017FA C605[AE1C0000]DE    <2>  mov byte [intprob], i
  2197 00001801 E9AD010000          <2>  jmp unhand2
  2198                              <2>  %assign i i+1
  2199 00001806 FA                  <2>  cli
  2200 00001807 C605[AE1C0000]DF    <2>  mov byte [intprob], i
  2201 0000180E E9A0010000          <2>  jmp unhand2
  2202                              <2>  %assign i i+1
  2203 00001813 FA                  <2>  cli
  2204 00001814 C605[AE1C0000]E0    <2>  mov byte [intprob], i
  2205 0000181B E993010000          <2>  jmp unhand2
  2206                              <2>  %assign i i+1
  2207 00001820 FA                  <2>  cli
  2208 00001821 C605[AE1C0000]E1    <2>  mov byte [intprob], i
  2209 00001828 E986010000          <2>  jmp unhand2
  2210                              <2>  %assign i i+1
  2211 0000182D FA                  <2>  cli
  2212 0000182E C605[AE1C0000]E2    <2>  mov byte [intprob], i
  2213 00001835 E979010000          <2>  jmp unhand2
  2214                              <2>  %assign i i+1
  2215 0000183A FA                  <2>  cli
  2216 0000183B C605[AE1C0000]E3    <2>  mov byte [intprob], i
  2217 00001842 E96C010000          <2>  jmp unhand2
  2218                              <2>  %assign i i+1
  2219 00001847 FA                  <2>  cli
  2220 00001848 C605[AE1C0000]E4    <2>  mov byte [intprob], i
  2221 0000184F E95F010000          <2>  jmp unhand2
  2222                              <2>  %assign i i+1
  2223 00001854 FA                  <2>  cli
  2224 00001855 C605[AE1C0000]E5    <2>  mov byte [intprob], i
  2225 0000185C E952010000          <2>  jmp unhand2
  2226                              <2>  %assign i i+1
  2227 00001861 FA                  <2>  cli
  2228 00001862 C605[AE1C0000]E6    <2>  mov byte [intprob], i
  2229 00001869 E945010000          <2>  jmp unhand2
  2230                              <2>  %assign i i+1
  2231 0000186E FA                  <2>  cli
  2232 0000186F C605[AE1C0000]E7    <2>  mov byte [intprob], i
  2233 00001876 E938010000          <2>  jmp unhand2
  2234                              <2>  %assign i i+1
  2235 0000187B FA                  <2>  cli
  2236 0000187C C605[AE1C0000]E8    <2>  mov byte [intprob], i
  2237 00001883 E92B010000          <2>  jmp unhand2
  2238                              <2>  %assign i i+1
  2239 00001888 FA                  <2>  cli
  2240 00001889 C605[AE1C0000]E9    <2>  mov byte [intprob], i
  2241 00001890 E91E010000          <2>  jmp unhand2
  2242                              <2>  %assign i i+1
  2243 00001895 FA                  <2>  cli
  2244 00001896 C605[AE1C0000]EA    <2>  mov byte [intprob], i
  2245 0000189D E911010000          <2>  jmp unhand2
  2246                              <2>  %assign i i+1
  2247 000018A2 FA                  <2>  cli
  2248 000018A3 C605[AE1C0000]EB    <2>  mov byte [intprob], i
  2249 000018AA E904010000          <2>  jmp unhand2
  2250                              <2>  %assign i i+1
  2251 000018AF FA                  <2>  cli
  2252 000018B0 C605[AE1C0000]EC    <2>  mov byte [intprob], i
  2253 000018B7 E9F7000000          <2>  jmp unhand2
  2254                              <2>  %assign i i+1
  2255 000018BC FA                  <2>  cli
  2256 000018BD C605[AE1C0000]ED    <2>  mov byte [intprob], i
  2257 000018C4 E9EA000000          <2>  jmp unhand2
  2258                              <2>  %assign i i+1
  2259 000018C9 FA                  <2>  cli
  2260 000018CA C605[AE1C0000]EE    <2>  mov byte [intprob], i
  2261 000018D1 E9DD000000          <2>  jmp unhand2
  2262                              <2>  %assign i i+1
  2263 000018D6 FA                  <2>  cli
  2264 000018D7 C605[AE1C0000]EF    <2>  mov byte [intprob], i
  2265 000018DE E9D0000000          <2>  jmp unhand2
  2266                              <2>  %assign i i+1
  2267 000018E3 FA                  <2>  cli
  2268 000018E4 C605[AE1C0000]F0    <2>  mov byte [intprob], i
  2269 000018EB E9C3000000          <2>  jmp unhand2
  2270                              <2>  %assign i i+1
  2271 000018F0 FA                  <2>  cli
  2272 000018F1 C605[AE1C0000]F1    <2>  mov byte [intprob], i
  2273 000018F8 E9B6000000          <2>  jmp unhand2
  2274                              <2>  %assign i i+1
  2275 000018FD FA                  <2>  cli
  2276 000018FE C605[AE1C0000]F2    <2>  mov byte [intprob], i
  2277 00001905 E9A9000000          <2>  jmp unhand2
  2278                              <2>  %assign i i+1
  2279 0000190A FA                  <2>  cli
  2280 0000190B C605[AE1C0000]F3    <2>  mov byte [intprob], i
  2281 00001912 E99C000000          <2>  jmp unhand2
  2282                              <2>  %assign i i+1
  2283 00001917 FA                  <2>  cli
  2284 00001918 C605[AE1C0000]F4    <2>  mov byte [intprob], i
  2285 0000191F E98F000000          <2>  jmp unhand2
  2286                              <2>  %assign i i+1
  2287 00001924 FA                  <2>  cli
  2288 00001925 C605[AE1C0000]F5    <2>  mov byte [intprob], i
  2289 0000192C E982000000          <2>  jmp unhand2
  2290                              <2>  %assign i i+1
  2291 00001931 FA                  <2>  cli
  2292 00001932 C605[AE1C0000]F6    <2>  mov byte [intprob], i
  2293 00001939 E975000000          <2>  jmp unhand2
  2294                              <2>  %assign i i+1
  2295 0000193E FA                  <2>  cli
  2296 0000193F C605[AE1C0000]F7    <2>  mov byte [intprob], i
  2297 00001946 E968000000          <2>  jmp unhand2
  2298                              <2>  %assign i i+1
  2299 0000194B FA                  <2>  cli
  2300 0000194C C605[AE1C0000]F8    <2>  mov byte [intprob], i
  2301 00001953 E95B000000          <2>  jmp unhand2
  2302                              <2>  %assign i i+1
  2303 00001958 FA                  <2>  cli
  2304 00001959 C605[AE1C0000]F9    <2>  mov byte [intprob], i
  2305 00001960 E94E000000          <2>  jmp unhand2
  2306                              <2>  %assign i i+1
  2307 00001965 FA                  <2>  cli
  2308 00001966 C605[AE1C0000]FA    <2>  mov byte [intprob], i
  2309 0000196D E941000000          <2>  jmp unhand2
  2310                              <2>  %assign i i+1
  2311 00001972 FA                  <2>  cli
  2312 00001973 C605[AE1C0000]FB    <2>  mov byte [intprob], i
  2313 0000197A E934000000          <2>  jmp unhand2
  2314                              <2>  %assign i i+1
  2315 0000197F FA                  <2>  cli
  2316 00001980 C605[AE1C0000]FC    <2>  mov byte [intprob], i
  2317 00001987 E927000000          <2>  jmp unhand2
  2318                              <2>  %assign i i+1
  2319 0000198C FA                  <2>  cli
  2320 0000198D C605[AE1C0000]FD    <2>  mov byte [intprob], i
  2321 00001994 E91A000000          <2>  jmp unhand2
  2322                              <2>  %assign i i+1
  2323 00001999 FA                  <2>  cli
  2324 0000199A C605[AE1C0000]FE    <2>  mov byte [intprob], i
  2325 000019A1 E90D000000          <2>  jmp unhand2
  2326                              <2>  %assign i i+1
  2327 000019A6 FA                  <2>  cli
  2328 000019A7 C605[AE1C0000]FF    <2>  mov byte [intprob], i
  2329 000019AE E900000000          <2>  jmp unhand2
  2330                              <2>  %assign i i+1
  2331                              <1> unhand2:
  2332 000019B3 FA                  <1> 	cli
  2333 000019B4 1E                  <1> 	push ds
  2334 000019B5 06                  <1> 	push es
  2335 000019B6 0FA0                <1> 	push fs
  2336 000019B8 0FA8                <1> 	push gs
  2337 000019BA 16                  <1> 	push ss
  2338 000019BB 60                  <1> 	pushad
  2339 000019BC 803D[5E4F0000]00    <1> 	cmp byte [guion], 0
  2340 000019C3 0F8432000000        <1> 	je near noguiunhandstuff
  2341 000019C9 66C705[A81C0000]08- <1> 	mov word [locunhandy], 8
  2342 000019D1 00                  <1>
  2343 000019D2 66C705[AA1C0000]08- <1> 	mov word [locunhandx], 8
  2344 000019DA 00                  <1>
  2345 000019DB 668B1D[294E0000]    <1> 	mov bx, [background]
  2346 000019E2 66891D[AC1C0000]    <1> 	mov [backgroundcache], bx
  2347 000019E9 C605[2D480000]01    <1> 	mov byte [mousedisabled],1
  2348 000019F0 66BB00F8            <1> 	mov bx, 1111100000000000b
  2349 000019F4 66891D[294E0000]    <1> 	mov [background], bx
  2350                              <1> noguiunhandstuff:
  2351 000019FB 89E6                <1> 	mov esi, esp
  2352 000019FD 8935[9C1C0000]      <1> 	mov [espfirst], esi
  2353 00001A03 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  2354 00001A09 8935[981C0000]      <1> 	mov [esploc], esi
  2355 00001A0F BE[B71C0000]        <1> 	mov esi, unhandmsg
  2356 00001A14 8935[A01C0000]      <1> 	mov [esiloc], esi
  2357 00001A1A 31C9                <1> 	xor ecx, ecx
  2358 00001A1C 8A0D[AE1C0000]      <1> 	mov cl, [intprob]
  2359 00001A22 BB[4A200000]        <1> 	mov ebx, errortypes
  2360 00001A27 C1E102              <1> 	shl ecx, 2
  2361 00001A2A 01CB                <1> 	add ebx, ecx
  2362 00001A2C 81FB[8A200000]      <1> 	cmp ebx, errortypesend
  2363 00001A32 7205                <1> 	jb gooderrortype
  2364 00001A34 BB[8A200000]        <1> 	mov ebx, errortypesend
  2365                              <1> gooderrortype:
  2366 00001A39 8B33                <1> 	mov esi, [ebx]
  2367 00001A3B 803D[5E4F0000]00    <1> 	cmp byte [guion], 0
  2368 00001A42 0F842D000000        <1> 	je near errortext
  2369 00001A48 668B0D[A81C0000]    <1> 	mov cx, [locunhandy]
  2370 00001A4F 668B15[AA1C0000]    <1> 	mov dx, [locunhandx]
  2371 00001A56 66B80100            <1> 	mov ax, 1
  2372 00001A5A 6631DB              <1> 	xor bx, bx
  2373 00001A5D E8C03E0000          <1> 	call showstring2
  2374 00001A62 66890D[A81C0000]    <1> 	mov [locunhandy], cx
  2375 00001A69 668915[AA1C0000]    <1> 	mov [locunhandx], dx
  2376 00001A70 E905000000          <1> 	jmp errortextdone
  2377                              <1> errortext:
  2378 00001A75 E84C0F0000          <1> 	call print		;;get the error message and print it
  2379                              <1> errortextdone:
  2380 00001A7A 31C9                <1> 	xor ecx, ecx
  2381 00001A7C 8A0D[AE1C0000]      <1> 	mov cl, [intprob]
  2382 00001A82 E8AA010000          <1> 	call expdump
  2383                              <1> dumpstack:
  2384 00001A87 8B35[981C0000]      <1> 	mov esi, [esploc]
  2385 00001A8D 39E6                <1> 	cmp esi, esp
  2386 00001A8F 7216                <1> 	jb donedump
  2387 00001A91 368B0E              <1> 	mov ecx, [ss:esi]
  2388 00001A94 81EE04000000        <1> 	sub esi, 4
  2389 00001A9A 8935[981C0000]      <1> 	mov [esploc], esi
  2390 00001AA0 E88C010000          <1> 	call expdump
  2391 00001AA5 EBE0                <1> 	jmp dumpstack
  2392                              <1> donedump:
  2393 00001AA7 0F20C1              <1> 	mov ecx, cr0
  2394 00001AAA E882010000          <1> 	call expdump
  2395 00001AAF 0F20D1              <1> 	mov ecx, cr2
  2396 00001AB2 E87A010000          <1> 	call expdump
  2397 00001AB7 0F20D9              <1> 	mov ecx, cr3
  2398 00001ABA E872010000          <1> 	call expdump
  2399 00001ABF 0F20E1              <1> 	mov ecx, cr4
  2400 00001AC2 E86A010000          <1> 	call expdump
  2401 00001AC7 8B35[981C0000]      <1> 	mov esi, [esploc]
  2402 00001ACD 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  2403 00001AD2 81C710000000        <1> 	add edi, 16
  2404 00001AD8 893D[B31C0000]      <1> 	mov [codelocend], edi
  2405 00001ADE 81EF20000000        <1> 	sub edi, 32
  2406                              <1> dumpcodeloop:
  2407 00001AE4 893D[AF1C0000]      <1> 	mov [codeloc], edi
  2408 00001AEA 8B0F                <1> 	mov ecx, [edi]
  2409 00001AEC E840010000          <1> 	call expdump
  2410 00001AF1 8B3D[AF1C0000]      <1> 	mov edi, [codeloc]
  2411 00001AF7 81C704000000        <1> 	add edi, 4
  2412 00001AFD 3B3D[B31C0000]      <1> 	cmp edi, [codelocend]
  2413 00001B03 72DF                <1> 	jb dumpcodeloop
  2414 00001B05 BE[C01B0000]        <1> 	mov esi, backtoosmsg
  2415 00001B0A 803D[5E4F0000]00    <1> 	cmp byte [guion], 0
  2416 00001B11 750A                <1> 	jne guibacktomsg
  2417 00001B13 E8AE0E0000          <1> 	call print
  2418 00001B18 E91A000000          <1> 	jmp backtomsgdone
  2419                              <1> guibacktomsg:
  2420 00001B1D 668B15[AA1C0000]    <1> 	mov dx, [locunhandx]
  2421 00001B24 668B0D[A81C0000]    <1> 	mov cx, [locunhandy]
  2422 00001B2B 66B80100            <1> 	mov ax, 1
  2423 00001B2F 6631DB              <1> 	xor bx, bx
  2424 00001B32 E8EB3D0000          <1> 	call showstring2
  2425                              <1> backtomsgdone:
  2426 00001B37 30C0                <1> 	xor al, al
  2427 00001B39 E8360E0000          <1> 	call int302
  2428 00001B3E 803D[AE1C0000]03    <1> 	cmp byte [intprob], 3
  2429 00001B45 753C                <1> 	jne nodebugint
  2430 00001B47 803D[5E4F0000]00    <1> 	cmp byte [guion], 0
  2431 00001B4E 7422                <1> 	je nodebuggui
  2432 00001B50 668B1D[AC1C0000]    <1> 	mov bx, [backgroundcache]
  2433 00001B57 66891D[294E0000]    <1> 	mov [background], bx
  2434 00001B5E 6631DB              <1> 	xor bx, bx
  2435 00001B61 C605[2D480000]00    <1> 	mov byte [mousedisabled], 0
  2436 00001B68 E87F320000          <1> 	call guiclear
  2437 00001B6D E85C3A0000          <1> 	call reloadallgraphics
  2438                              <1> nodebuggui:
  2439 00001B72 8B35[9C1C0000]      <1> 	mov esi, [espfirst]
  2440 00001B78 89F4                <1> 	mov esp, esi
  2441 00001B7A 61                  <1> 	popad
  2442 00001B7B 17                  <1> 	pop ss
  2443 00001B7C 0FA9                <1> 	pop gs
  2444 00001B7E 0FA1                <1> 	pop fs
  2445 00001B80 07                  <1> 	pop es
  2446 00001B81 1F                  <1> 	pop ds
  2447 00001B82 CF                  <1> 	iret
  2448                              <1> nodebugint:
  2449 00001B83 61                  <1> 	popad
  2450 00001B84 17                  <1> 	pop ss
  2451 00001B85 0FA9                <1> 	pop gs
  2452 00001B87 0FA1                <1> 	pop fs
  2453 00001B89 07                  <1> 	pop es
  2454 00001B8A 1F                  <1> 	pop ds
  2455 00001B8B 803D[5E4F0000]00    <1> 	cmp byte [guion], 0
  2456 00001B92 7427                <1> 	je returnunhandgui
  2457 00001B94 668B1D[AC1C0000]    <1> 	mov bx, [backgroundcache]
  2458 00001B9B 66891D[294E0000]    <1> 	mov [background], bx
  2459 00001BA2 6631DB              <1> 	xor bx, bx
  2460 00001BA5 C605[2D480000]00    <1> 	mov byte [mousedisabled], 0
  2461 00001BAC E83B320000          <1> 	call guiclear
  2462 00001BB1 E8183A0000          <1> 	call reloadallgraphics
  2463 00001BB6 E970320000          <1> 	jmp gui
  2464                              <1> returnunhandgui:
  2465 00001BBB E95D140000          <1> 	jmp nwcmd
  2466 00001BC0 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10,13
  2467 00001BC9 737420616E79207072- <1>
  2468 00001BD2 6F626C656D7320696E- <1>
  2469 00001BDB 207468652049737375- <1>
  2470 00001BE4 65732073656374696F- <1>
  2471 00001BED 6E20617420736F6C6C- <1>
  2472 00001BF6 65726F732E676F6F67- <1>
  2473 00001BFF 6C65636F64652E636F- <1>
  2474 00001C08 6D0A0D              <1>
  2475 00001C0B 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,13,0
  2476 00001C14 206B657920746F2072- <1>
  2477 00001C1D 657475726E20746F20- <1>
  2478 00001C26 536F6C6C65724F530A- <1>
  2479 00001C2F 0D00                <1>
  2480                              <1> expdump:
  2481 00001C31 8B35[A01C0000]      <1> 	mov esi, [esiloc]
  2482 00001C37 89F7                <1> 	mov edi, esi
  2483 00001C39 81C70F000000        <1> 	add edi, 15
  2484 00001C3F 81C604000000        <1> 	add esi, 4
  2485 00001C45 893D[A01C0000]      <1> 	mov [esiloc], edi
  2486 00001C4B 81EF03000000        <1> 	sub edi, 3
  2487 00001C51 E838180000          <1> 	call converthex
  2488 00001C56 81EE04000000        <1> 	sub esi, 4
  2489 00001C5C 803D[5E4F0000]00    <1> 	cmp byte [guion], 0
  2490 00001C63 0F8429000000        <1> 	je near expdumptext
  2491 00001C69 668B0D[A81C0000]    <1> 	mov cx, [locunhandy]
  2492 00001C70 668B15[AA1C0000]    <1> 	mov dx, [locunhandx]
  2493 00001C77 66B80100            <1> 	mov ax, 1
  2494 00001C7B 6631DB              <1> 	xor bx, bx
  2495 00001C7E E89F3C0000          <1> 	call showstring2
  2496 00001C83 66890D[A81C0000]    <1> 	mov [locunhandy], cx
  2497 00001C8A 668915[AA1C0000]    <1> 	mov [locunhandx], dx
  2498 00001C91 C3                  <1> 	ret
  2499                              <1> expdumptext:
  2500 00001C92 E82F0D0000          <1> 	call print
  2501 00001C97 C3                  <1> 	ret
  2502 00001C98 00000000            <1> esploc dd 0
  2503 00001C9C 00000000            <1> espfirst dd 0
  2504 00001CA0 00000000            <1> esiloc dd 0
  2505 00001CA4 00000000            <1> esiregbuf dd 0
  2506 00001CA8 0100                <1> locunhandy dw 1
  2507 00001CAA 0100                <1> locunhandx dw 1
  2508 00001CAC 0000                <1> backgroundcache dw 0
  2509 00001CAE 00                  <1> intprob db 0
  2510 00001CAF 00000000            <1> codeloc dd 0
  2511 00001CB3 00000000            <1> codelocend dd 0
  2512                              <1> 	unhandmsg:	
  2513 00001CB7 494E543D3030303030- <1> 			db "INT=00000000",10,13,0
  2514 00001CC0 3030300A0D00        <1>
  2515                              <1> unhndrg:
  2516 00001CC6 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  2517 00001CCF 303030202000<rept>  <1>
  2518 00001D2F FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2519 00001D38 3030300A0D00        <1>
  2520 00001D3E FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  2521 00001D47 303030202000<rept>  <1>
  2522 00001DA7 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2523 00001DB0 3030300A0D00        <1>
  2524 00001DB6 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  2525 00001DBF 303030202000<rept>  <1>
  2526 00001E1F FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2527 00001E28 3030300A0D00        <1>
  2528 00001E2E FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  2529 00001E37 303030202000<rept>  <1>
  2530 00001E97 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2531 00001EA0 3030300A0D00        <1>
  2532                              <1> unhandregs:
  2533 00001EA6 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  2534 00001EAF 303030202000        <1>
  2535 00001EB5 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  2536 00001EBE 303030202000        <1>
  2537 00001EC4 4549503D3030303030- <1> 			db "EIP=00000000",10,13,0
  2538 00001ECD 3030300A0D00        <1>
  2539 00001ED3 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  2540 00001EDC 303030202000        <1>
  2541 00001EE2 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  2542 00001EEB 303030202000        <1>
  2543 00001EF1 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  2544 00001EFA 303030202000        <1>
  2545 00001F00 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  2546 00001F09 303030202000        <1>
  2547 00001F0F 53533A3D3030303030- <1> 			db "SS:=00000000",10,13,0
  2548 00001F18 3030300A0D00        <1>
  2549 00001F1E 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  2550 00001F27 303030202000        <1>
  2551 00001F2D 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  2552 00001F36 303030202000        <1>
  2553 00001F3C 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  2554 00001F45 303030202000        <1>
  2555 00001F4B 4542583D3030303030- <1> 			db "EBX=00000000",10,13,0
  2556 00001F54 3030300A0D00        <1>
  2557 00001F5A 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  2558 00001F63 303030202000        <1>
  2559 00001F69 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  2560 00001F72 303030202000        <1>
  2561 00001F78 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  2562 00001F81 303030202000        <1>
  2563 00001F87 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",10,13,0
  2564 00001F90 3030300A0D00        <1>
  2565 00001F96 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  2566 00001F9F 303030202000        <1>
  2567 00001FA5 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  2568 00001FAE 303030202000        <1>
  2569 00001FB4 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  2570 00001FBD 303030202000        <1>
  2571 00001FC3 4352343D3030303030- <1> 			db "CR4=00000000",10,13,0
  2572 00001FCC 3030300A0D00        <1>
  2573 00001FD2 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  2574 00001FDB 303030202000<rept>  <1>
  2575 00001FF0 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  2576 00001FF9 30303020FF00        <1>
  2577 00001FFF FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  2578 00002008 3030305D2000        <1>
  2579 0000200E FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  2580 00002017 303030202000<rept>  <1>
  2581 0000203B FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2582 00002044 3030300A0D00        <1>
  2583                              <1> unhandmsgend:
  2584                              <1> 
  2585                              <1> errortypes:
  2586 0000204A [8E200000]          <1> 			dd err0
  2587 0000204E [F5200000]          <1> 			dd err1
  2588 00002052 [58210000]          <1> 			dd err2
  2589 00002056 [AE210000]          <1> 			dd err3
  2590 0000205A [15220000]          <1> 			dd err4
  2591 0000205E [69220000]          <1> 			dd err5
  2592 00002062 [D6220000]          <1> 			dd err6
  2593 00002066 [41230000]          <1> 			dd err7
  2594 0000206A [8D230000]          <1> 			dd err8
  2595 0000206E [EC230000]          <1> 			dd err9
  2596 00002072 [47240000]          <1> 			dd err10
  2597 00002076 [94240000]          <1> 			dd err11
  2598 0000207A [E6240000]          <1> 			dd err12
  2599 0000207E [41250000]          <1> 			dd err13
  2600 00002082 [A6250000]          <1> 			dd err14
  2601 00002086 [E4250000]          <1> 			dd err15
  2602                              <1> errortypesend:
  2603 0000208A [72260000]          <1> 			dd unknownerror
  2604                              <1> 			
  2605 0000208E 4469766973696F6E20- <1> err0	db "Division by zero:",10,13
  2606 00002097 6279207A65726F3A0A- <1>
  2607 000020A0 0D                  <1>
  2608 000020A1 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10,13
  2609 000020AA 6C79206C696D2061F6- <1>
  2610 000020B3 78203D20EC20776865- <1>
  2611 000020BC 6E206120697320616E- <1>
  2612 000020C5 79207265616C206E75- <1>
  2613 000020CE 6D6265722E20486170- <1>
  2614 000020D7 707920456173746572- <1>
  2615 000020E0 210A0D              <1>
  2616 000020E3 202020202020202020- <1> 		db "            x",26,"0",10,13,0
  2617 000020EC 202020781A300A0D00  <1>
  2618                              <1> 		
  2619 000020F5 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10,13
  2620 000020FE 65702F427265616B70- <1>
  2621 00002107 6F696E743A0A0D      <1>
  2622 0000210E 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,13,0
  2623 00002117 696E74206661756C74- <1>
  2624 00002120 2C20627265616B706F- <1>
  2625 00002129 696E7420747261702C- <1>
  2626 00002132 206F722073696E676C- <1>
  2627 0000213B 652D73746570207472- <1>
  2628 00002144 617020776173207472- <1>
  2629 0000214D 696767657265642E0A- <1>
  2630 00002156 0D00                <1>
  2631                              <1> 		
  2632 00002158 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10,13
  2633 00002161 6C6520696E74657272- <1>
  2634 0000216A 7570743A0A0D        <1>
  2635 00002170 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked",10,13,0
  2636 00002179 6520696E7465727275- <1>
  2637 00002182 707420776173207472- <1>
  2638 0000218B 696767657265642074- <1>
  2639 00002194 68617420636F756C64- <1>
  2640 0000219D 206E6F74206265206D- <1>
  2641 000021A6 61736B65640A0D00    <1>
  2642                              <1> 		
  2643 000021AE 427265616B706F696E- <1> err3	db "Breakpoint:",10,13
  2644 000021B7 743A0A0D            <1>
  2645 000021BB 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10,13
  2646 000021C4 727275707420697320- <1>
  2647 000021CD 7573656420696E2070- <1>
  2648 000021D6 726F6772616D732074- <1>
  2649 000021DF 6F2073686F77207468- <1>
  2650 000021E8 6520737461636B2061- <1>
  2651 000021F1 6E6420726567697374- <1>
  2652 000021FA 65727320616E642063- <1>
  2653 00002203 616E2062650A0D      <1>
  2654 0000220A 69676E6F7265642E0A- <1> 		db "ignored.",10,13,0
  2655 00002213 0D00                <1>
  2656                              <1> 		
  2657 00002215 4F766572666C6F773A- <1> err4	db "Overflow:",10,13
  2658 0000221E 0A0D                <1>
  2659 00002220 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,13,0
  2660 00002229 73736F722072616E20- <1>
  2661 00002232 696E746F20616E2049- <1>
  2662 0000223B 4E544F20696E737472- <1>
  2663 00002244 756374696F6E207769- <1>
  2664 0000224D 746820746865206F76- <1>
  2665 00002256 6572666C6F7720666C- <1>
  2666 0000225F 6167207365742E0A0D- <1>
  2667 00002268 00                  <1>
  2668                              <1> 		
  2669 00002269 426F756E6473206368- <1> err5	db "Bounds check:",10,13
  2670 00002272 65636B3A0A0D        <1>
  2671 00002278 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10,13
  2672 00002281 73736F72207265626F- <1>
  2673 0000228A 756E6465642066726F- <1>
  2674 00002293 6D206120424F554E44- <1>
  2675 0000229C 20696E737472756374- <1>
  2676 000022A5 696F6E2072756E206F- <1>
  2677 000022AE 6E20616E206F706572- <1>
  2678 000022B7 616E64207468617420- <1>
  2679 000022C0 776173206F75740A0D  <1>
  2680 000022C9 6F6620626F756E6473- <1> 		db "of bounds.",10,13,0
  2681 000022D2 2E0A0D00            <1>
  2682                              <1> 		
  2683 000022D6 496E76616C6964206F- <1> err6	db "Invalid opcode:",10,13
  2684 000022DF 70636F64653A0A0D    <1>
  2685 000022E7 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10,13
  2686 000022F0 73736F722068617320- <1>
  2687 000022F9 6E6F20696465612077- <1>
  2688 00002302 686174206974207761- <1>
  2689 0000230B 7320747279696E6720- <1>
  2690 00002314 746F20657865637574- <1>
  2691 0000231D 652E20446F6E277420- <1>
  2692 00002326 72756E205353453420- <1>
  2693 0000232F 636F64650A0D        <1>
  2694 00002335 6F6E20343836277321- <1> 		db "on 486's!",10,13,0
  2695 0000233E 0A0D00              <1>
  2696                              <1> 		
  2697 00002341 436F70726F63657373- <1> err7	db "Coprocessor not available:",10,13
  2698 0000234A 6F72206E6F74206176- <1>
  2699 00002353 61696C61626C653A0A- <1>
  2700 0000235C 0D                  <1>
  2701 0000235D 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,13,0
  2702 00002366 206B6E6F7720746865- <1>
  2703 0000236F 7920646F6E2774206D- <1>
  2704 00002378 616B652074686F7365- <1>
  2705 00002381 20616E796D6F726521- <1>
  2706 0000238A 0A0D00              <1>
  2707                              <1> 		
  2708 0000238D 446F75626C65206661- <1> err8	db "Double fault:",10,13
  2709 00002396 756C743A0A0D        <1>
  2710 0000239C 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,13,0
  2711 000023A5 74696F6E2068616E64- <1>
  2712 000023AE 6C657220636F756C64- <1>
  2713 000023B7 206E6F742068616E64- <1>
  2714 000023C0 6C6520746861742069- <1>
  2715 000023C9 7420636F756C64206E- <1>
  2716 000023D2 6F742068616E646C65- <1>
  2717 000023DB 20616E206578636570- <1>
  2718 000023E4 74696F6E2E0A0D00    <1>
  2719                              <1> 		
  2720 000023EC 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,13,0
  2721 000023F5 6F72207365676D656E- <1>
  2722 000023FE 74206F76657272756E- <1>
  2723 00002407 3A0A0D00            <1>
  2724 0000240B 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,13,0
  2725 00002414 722068617070656E73- <1>
  2726 0000241D 20696E206D6F646572- <1>
  2727 00002426 6E20636F6D70757465- <1>
  2728 0000242F 72732C20616E64206E- <1>
  2729 00002438 657665722073686F75- <1>
  2730 00002441 6C642E0A0D00        <1>
  2731                              <1> 
  2732 00002447 496E76616C69642054- <1> err10	db "Invalid TSS:",10,13
  2733 00002450 53533A0A0D          <1>
  2734 00002455 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,13,0
  2735 0000245E 686174207761732073- <1>
  2736 00002467 776974636865642074- <1>
  2737 00002470 6F20697320696E7661- <1>
  2738 00002479 6C69642E204E6F7468- <1>
  2739 00002482 696E672066756E6E79- <1>
  2740 0000248B 20686572652E0A0D00  <1>
  2741                              <1> 		
  2742 00002494 5365676D656E74206E- <1> err11	db "Segment not present:",10,13
  2743 0000249D 6F742070726573656E- <1>
  2744 000024A6 743A0A0D            <1>
  2745 000024AA 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,13,0
  2746 000024B3 6E7420626974206F66- <1>
  2747 000024BC 20746865207365676D- <1>
  2748 000024C5 656E74206465736372- <1>
  2749 000024CE 6970746F7220697320- <1>
  2750 000024D7 73657420746F207A65- <1>
  2751 000024E0 726F2E0A0D00        <1>
  2752                              <1> 		
  2753 000024E6 537461636B20657863- <1> err12	db "Stack exception:",10,13
  2754 000024EF 657074696F6E3A0A0D  <1>
  2755 000024F8 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,13,0
  2756 00002501 7363726970746F7220- <1>
  2757 0000250A 697320696E76616C69- <1>
  2758 00002513 64206F72206E6F7420- <1>
  2759 0000251C 70726573656E74206F- <1>
  2760 00002525 7220697473206C696D- <1>
  2761 0000252E 697420697320746F6F- <1>
  2762 00002537 20736D616C6C2E0A0D- <1>
  2763 00002540 00                  <1>
  2764                              <1> 		
  2765 00002541 47656E6572616C2070- <1> err13	db "General protection violation:",10,13
  2766 0000254A 726F74656374696F6E- <1>
  2767 00002553 2076696F6C6174696F- <1>
  2768 0000255C 6E3A0A0D            <1>
  2769 00002560 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,13,0
  2770 00002569 746564207468652063- <1>
  2771 00002572 6F6D70757465722E20- <1>
  2772 0000257B 537465702061776179- <1>
  2773 00002584 20736C6F776C792E20- <1>
  2774 0000258D 546865204642492069- <1>
  2775 00002596 73206F6E2069747320- <1>
  2776 0000259F 7761792E0A0D00      <1>
  2777                              <1> 		
  2778 000025A6 50616765206661756C- <1> err14	db "Page fault:",10,13
  2779 000025AF 743A0A0D            <1>
  2780 000025B3 546865207061676520- <1> 		db "The page that was requested was not available.",10,13,0
  2781 000025BC 746861742077617320- <1>
  2782 000025C5 726571756573746564- <1>
  2783 000025CE 20776173206E6F7420- <1>
  2784 000025D7 617661696C61626C65- <1>
  2785 000025E0 2E0A0D00            <1>
  2786                              <1> 		
  2787 000025E4 526573657276656420- <1> err15	db "Reserved for Plan R:",10,13
  2788 000025ED 666F7220506C616E20- <1>
  2789 000025F6 523A0A0D            <1>
  2790 000025FA 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10,13
  2791 00002603 727275707420697320- <1>
  2792 0000260C 726573657276656420- <1>
  2793 00002615 666F72207573616765- <1>
  2794 0000261E 206F6E6C7920627920- <1>
  2795 00002627 746865206D696C6974- <1>
  2796 00002630 617279207768656E20- <1>
  2797 00002639 6974206973206E6563- <1>
  2798 00002642 6573736172790A0D    <1>
  2799 0000264A 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,13,0
  2800 00002653 746520612066756C6C- <1>
  2801 0000265C 2D7363616C6520636F- <1>
  2802 00002665 757020642782746174- <1>
  2803 0000266E 2E0A0D00            <1>
  2804                              <1> 		
  2805 00002672 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10,13
  2806 0000267B 68656C6C206A757374- <1>
  2807 00002684 2068617070656E6564- <1>
  2808 0000268D 3F2049732065766572- <1>
  2809 00002696 796F6E65206F6B6179- <1>
  2810 0000269F 3F2048617264206472- <1>
  2811 000026A8 6976653F2056696465- <1>
  2812 000026B1 6F20636172643F0A0D  <1>
  2813 000026BA 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,13,0
  2814 000026C3 726520796F75207468- <1>
  2815 000026CC 6572653F0A0D00      <1>
  2816                                      %include 'source/ints.asm'
  2817                              <1> newints:	;;for great justice
  2818 000026D3 80FC00              <1> 	cmp ah, 0		;;originally 0
  2819 000026D6 0F845B000000        <1> 	je near intx0   ;;0=kills app
  2820 000026DC 80FC01              <1> 	cmp ah, 1		;;originally 1
  2821 000026DF 0F8457000000        <1> 	je near intx1   ;;3=print string
  2822 000026E5 80FC02              <1> 	cmp ah, 2		;;originally 2
  2823 000026E8 0F8458000000        <1> 	je near intx2	;;4=read string
  2824 000026EE 80FC03              <1> 	cmp ah, 3		;;originally 3
  2825 000026F1 0F8459000000        <1> 	je near intx3	;;6=clear screen
  2826 000026F7 80FC04              <1> 	cmp ah, 4		;;originally 4
  2827 000026FA 0F845A000000        <1> 	je near intx4	;;5=read and print string
  2828 00002700 80FC05              <1> 	cmp ah, 5		;;originally 5		
  2829 00002703 0F845B000000        <1> 	je near intx5	;;2=get char
  2830 00002709 80FC06              <1> 	cmp ah, 6		;;originally 6
  2831 0000270C 0F845C000000        <1> 	je near intx6	;;1=print char
  2832 00002712 80FC07              <1> 	cmp ah, 7
  2833 00002715 0F845D000000        <1> 	je near intx7	;;read file
  2834 0000271B 80FC09              <1> 	cmp ah, 9
  2835 0000271E 0F845E000000        <1> 	je near intx9	;;convert number to string
  2836 00002724 80FC0A              <1> 	cmp ah, 10
  2837 00002727 0F846D000000        <1> 	je near intx10	;;convert string to number
  2838 0000272D 80FC0B              <1> 	cmp ah, 11
  2839 00002730 0F846A000000        <1> 	je near intx11	;;create thread
  2840 00002736 C3                  <1> 	ret
  2841                              <1> 	
  2842                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  2843                              <1> 	
  2844                              <1> intx0:
  2845 00002737 E9E1080000          <1> 	jmp nwcmd
  2846                              <1> intx1:
  2847 0000273C E88C020000          <1> 	call int303
  2848 00002741 E9EBDCFFFF          <1> 	jmp timerinterrupt
  2849                              <1> intx2:
  2850 00002746 E8AA020000          <1> 	call int304
  2851 0000274B E9E1DCFFFF          <1> 	jmp timerinterrupt
  2852                              <1> intx3:
  2853 00002750 E88E050000          <1> 	call int306
  2854 00002755 E9D7DCFFFF          <1> 	jmp timerinterrupt
  2855                              <1> intx4:
  2856 0000275A E8D5020000          <1> 	call int305
  2857 0000275F E9CDDCFFFF          <1> 	jmp timerinterrupt
  2858                              <1> intx5:
  2859 00002764 E80B020000          <1> 	call int302
  2860 00002769 E9C3DCFFFF          <1> 	jmp timerinterrupt
  2861                              <1> intx6:
  2862 0000276E E83D000000          <1> 	call int301
  2863 00002773 E9B9DCFFFF          <1> 	jmp timerinterrupt
  2864                              <1> intx7:
  2865 00002778 E847420000          <1> 	call loadfile
  2866 0000277D E9AFDCFFFF          <1> 	jmp timerinterrupt
  2867                              <1> intx9:
  2868 00002782 3C00                <1> 	cmp al, 0
  2869 00002784 750A                <1> 	jne intx9B
  2870 00002786 E8510E0000          <1> 	call showdec
  2871 0000278B E9A1DCFFFF          <1> 	jmp timerinterrupt
  2872                              <1> intx9B:
  2873 00002790 E8A30D0000          <1> 	call showhex
  2874 00002795 E997DCFFFF          <1> 	jmp timerinterrupt
  2875                              <1> intx10:
  2876 0000279A E8D60E0000          <1> 	call cnvrttxt	;the string goes into esi, number into ecx
  2877 0000279F CF                  <1> 	iret
  2878                              <1> intx11:
  2879 000027A0 E858480000          <1> 	call threadfork
  2880 000027A5 CF                  <1> 	iret
  2881                              <1> 	
  2882 000027A6 0000                <1> linebeginpos dw 0
  2883 000027A8 0000                <1> videobufpos: dw 0
  2884 000027AA 0000                <1> charpos db 0,0
  2885 000027AC 501E                <1> charxy db 80,30
  2886 000027AE 0000                <1> charbuf dw 0
  2887                              <1> 	
  2888                              <1> int301:	;;print char, char in al, modifier in bl, will run videobufcopy if called as is
  2889 000027B0 E808000000          <1> 	call int301prnt
  2890 000027B5 E876050000          <1> 	call termcopy
  2891 000027BA C3                  <1> 	ret
  2892 000027BB 00                  <1> termguion db 0
  2893 000027BC 00                  <1> termcopyon db 0
  2894                              <1> int301prnt:
  2895 000027BD 88DC                <1> 	mov ah, bl
  2896 000027BF 66A3[AE270000]      <1> 	mov [charbuf], ax
  2897 000027C5 31DB                <1> 	xor ebx, ebx
  2898 000027C7 668B1D[A8270000]    <1> 	mov bx, [videobufpos]
  2899 000027CE BF[8F1D0000]        <1> 	mov edi, videobuf
  2900 000027D3 01DF                <1> 	add edi, ebx
  2901 000027D5 66A1[2E2D0000]      <1> 	mov ax, [removedvideo]
  2902 000027DB 668907              <1> 	mov [edi], ax
  2903 000027DE 66A1[AE270000]      <1> 	mov ax, [charbuf]
  2904 000027E4 31D2                <1> 	xor edx, edx
  2905 000027E6 668B15[AA270000]    <1> 	mov dx, [charpos]
  2906 000027ED 31C9                <1> 	xor ecx, ecx
  2907 000027EF 668B0D[AC270000]    <1> 	mov cx, [charxy]
  2908 000027F6 3C09                <1> 	cmp al, 9
  2909 000027F8 0F8463000000        <1> 	je near int301tab
  2910 000027FE 3C0D                <1> 	cmp al, 13
  2911 00002800 0F8478000000        <1> 	je near int301cr
  2912 00002806 3C0A                <1> 	cmp al, 10
  2913 00002808 0F84A1000000        <1> 	je near int301nl
  2914 0000280E 3C08                <1> 	cmp al, 8
  2915 00002810 0F847C000000        <1> 	je near int301bs
  2916 00002816 3CFF                <1> 	cmp al, 255		;;null character
  2917 00002818 0F841B000000        <1> 	je near donescr
  2918 0000281E 668907              <1> 	mov [edi], ax
  2919 00002821 81C702000000        <1> 	add edi, 2
  2920 00002827 FEC2                <1> 	inc dl
  2921                              <1> donecrnl:
  2922 00002829 38CA                <1> 	cmp dl, cl
  2923 0000282B 0F83AF000000        <1> 	jae near int301eol
  2924                              <1> doneeol:
  2925 00002831 38EE                <1> 	cmp dh, ch
  2926 00002833 0F83C5000000        <1> 	jae near int301scr	
  2927                              <1> donescr:
  2928 00002839 89FB                <1> 	mov ebx, edi
  2929 0000283B 668B07              <1> 	mov ax, [edi]
  2930 0000283E 66A3[2E2D0000]      <1> 	mov [removedvideo], ax
  2931 00002844 81EB[8F1D0000]      <1> 	sub ebx, videobuf
  2932 0000284A 66891D[A8270000]    <1> 	mov [videobufpos], bx
  2933 00002851 668915[AA270000]    <1> 	mov [charpos], dx
  2934 00002858 66A1[AE270000]      <1> 	mov ax, [charbuf]
  2935 0000285E 88E3                <1> 	mov bl, ah
  2936 00002860 C3                  <1> 	ret
  2937                              <1> 	
  2938                              <1> 	int301tab:
  2939 00002861 47                  <1> 		inc edi
  2940 00002862 FEC2                <1> 		inc dl	;make sure it works
  2941 00002864 C1EF04              <1> 		shr edi, 4
  2942 00002867 C1E704              <1> 		shl edi, 4
  2943 0000286A 81C710000000        <1> 		add edi, 16
  2944 00002870 C0EA03              <1> 		shr dl, 3
  2945 00002873 C0E203              <1> 		shl dl, 3
  2946 00002876 80C208              <1> 		add dl, 8
  2947 00002879 4F                  <1> 		dec edi
  2948 0000287A FECA                <1> 		dec dl
  2949 0000287C EBAB                <1> 		jmp donecrnl
  2950                              <1> 	
  2951                              <1> 	int301cr:
  2952 0000287E 30D2                <1> 		xor dl, dl
  2953 00002880 31DB                <1> 		xor ebx, ebx
  2954 00002882 BF[8F1D0000]        <1> 		mov edi, videobuf
  2955 00002887 668B1D[A6270000]    <1> 		mov bx, [linebeginpos]
  2956 0000288E 01DF                <1> 		add edi, ebx
  2957 00002890 EB97                <1> 		jmp donecrnl
  2958                              <1> 			
  2959                              <1> 	int301bs:
  2960 00002892 80FA00              <1> 		cmp dl, 0
  2961 00002895 740D                <1> 		je int301backline
  2962                              <1> 	int301nobmr:
  2963 00002897 FECA                <1> 		dec dl
  2964 00002899 6631C0              <1> 		xor ax, ax
  2965 0000289C 81EF02000000        <1> 		sub edi, 2
  2966 000028A2 EB85                <1> 		jmp donecrnl
  2967                              <1> 	int301backline:
  2968 000028A4 88CA                <1> 		mov dl, cl
  2969 000028A6 80FE00              <1> 		cmp dh, 0
  2970 000028A9 74EC                <1> 		je int301nobmr
  2971 000028AB FECE                <1> 		dec dh
  2972 000028AD EBE8                <1> 		jmp int301nobmr
  2973                              <1> 		
  2974                              <1> 	int301nl:
  2975 000028AF FEC6                <1> 		inc dh
  2976 000028B1 31DB                <1> 		xor ebx, ebx
  2977 000028B3 88CB                <1> 		mov bl, cl
  2978 000028B5 66D1E3              <1> 		shl bx, 1
  2979 000028B8 BF[8F1D0000]        <1> 		mov edi, videobuf
  2980 000028BD 66031D[A8270000]    <1> 		add bx, [videobufpos]
  2981 000028C4 01DF                <1> 		add edi, ebx
  2982 000028C6 31DB                <1> 		xor ebx, ebx
  2983 000028C8 88CB                <1> 		mov bl, cl
  2984 000028CA 66D1E3              <1> 		shl bx, 1
  2985 000028CD 66031D[A6270000]    <1> 		add bx, [linebeginpos]
  2986 000028D4 66891D[A6270000]    <1> 		mov [linebeginpos], bx
  2987 000028DB E949FFFFFF          <1> 		jmp donecrnl
  2988                              <1> 		
  2989                              <1> 	int301eol:
  2990 000028E0 30D2                <1> 		xor dl, dl
  2991 000028E2 FEC6                <1> 		inc dh
  2992 000028E4 31DB                <1> 		xor ebx, ebx
  2993 000028E6 88CB                <1> 		mov bl, cl
  2994 000028E8 66D1E3              <1> 		shl bx, 1
  2995 000028EB 66031D[A6270000]    <1> 		add bx, [linebeginpos]
  2996 000028F2 66891D[A6270000]    <1> 		mov [linebeginpos], bx
  2997 000028F9 E933FFFFFF          <1> 		jmp doneeol
  2998                              <1> 	int301scr:
  2999 000028FE FECE                <1> 		dec dh
  3000 00002900 BF[8F1D0000]        <1> 		mov edi, videobuf
  3001 00002905 31DB                <1> 		xor ebx, ebx
  3002 00002907 88CB                <1> 		mov bl, cl
  3003 00002909 66D1E3              <1> 		shl bx, 1
  3004 0000290C 01FB                <1> 		add ebx, edi
  3005                              <1> 	intscrollloop:
  3006 0000290E 668B03              <1> 		mov ax, [ebx]
  3007 00002911 668907              <1> 		mov [edi], ax
  3008 00002914 81C702000000        <1> 		add edi, 2
  3009 0000291A 81C302000000        <1> 		add ebx, 2
  3010 00002920 FEC9                <1> 		dec cl
  3011 00002922 80F900              <1> 		cmp cl, 0
  3012 00002925 75E7                <1> 		jne intscrollloop
  3013 00002927 8A0D[AC270000]      <1> 		mov cl, [charxy]
  3014 0000292D FECD                <1> 		dec ch
  3015 0000292F 80FD01              <1> 		cmp ch, 1
  3016 00002932 77DA                <1> 		ja intscrollloop
  3017 00002934 6631C0              <1> 		xor ax, ax
  3018 00002937 81EF[8F1D0000]      <1> 		sub edi, videobuf
  3019 0000293D 66893D[A6270000]    <1> 		mov [linebeginpos], di
  3020 00002944 81C7[8F1D0000]      <1> 		add edi, videobuf
  3021 0000294A 89FB                <1> 		mov ebx, edi
  3022                              <1> 	intloopclear:
  3023 0000294C 668903              <1> 		mov [ebx], ax
  3024 0000294F 81C302000000        <1> 		add ebx, 2
  3025 00002955 FEC9                <1> 		dec cl
  3026 00002957 80F900              <1> 		cmp cl, 0
  3027 0000295A 75F0                <1> 		jne intloopclear
  3028 0000295C FECD                <1> 		dec ch
  3029 0000295E 80FD00              <1> 		cmp ch, 0
  3030 00002961 75E9                <1> 		jne intloopclear
  3031 00002963 668B0D[AC270000]    <1> 		mov cx, [charxy]
  3032 0000296A E9CAFEFFFF          <1> 		jmp donescr
  3033                              <1> 		
  3034                              <1> 		
  3035 0000296F 0000                <1> lastkey db 0,0
  3036 00002971 00                  <1> trans db 0
  3037                              <1> getkey:
  3038 00002972 30C0                <1> 	xor al, al
  3039                              <1> 	int302:		;;get char, if al is 0, wait for key
  3040 00002974 C605[71290000]01    <1> 		mov byte [trans], 1
  3041 0000297B 3C01                <1> 		cmp al, 1
  3042 0000297D 7307                <1> 		jae transcheck
  3043 0000297F C605[71290000]00    <1> 		mov byte [trans], 0
  3044                              <1> 	transcheck:
  3045 00002986 E8C81E0000          <1> 		call guistartin
  3046 0000298B 8A3D[71290000]      <1> 		mov bh, [trans]
  3047 00002991 66A1[6F290000]      <1> 		mov ax, [lastkey]
  3048 00002997 80FC1C              <1> 		cmp ah, 1Ch
  3049 0000299A 7419                <1> 		je int302enter
  3050 0000299C 803D[2E480000]E0    <1> 		cmp byte [specialkey], 0xE0
  3051 000029A3 7504                <1> 		jne nospecialtrans
  3052 000029A5 88C3                <1> 		mov bl, al
  3053 000029A7 30C0                <1> 		xor al, al
  3054                              <1> 	nospecialtrans:
  3055 000029A9 08C7                <1> 		or bh, al
  3056 000029AB 80FF00              <1> 		cmp bh, 0
  3057 000029AE 74D6                <1> 		je transcheck
  3058 000029B0 E902000000          <1> 		jmp int302end
  3059                              <1> 	int302enter:
  3060 000029B5 B00D                <1> 		mov al, 13
  3061                              <1> 	int302end:
  3062 000029B7 C3                  <1> 		ret
  3063                              <1> 	
  3064 000029B8 00                  <1> endkey303 db 0
  3065                              <1> 	printquiet:
  3066 000029B9 6631C0              <1> 		xor ax, ax
  3067 000029BC 66BB0700            <1> 		mov bx, 7
  3068 000029C0 E818000000          <1> 		call int303b
  3069 000029C5 C3                  <1> 		ret
  3070                              <1>     print:
  3071 000029C6 6631C0              <1> 		xor ax, ax
  3072 000029C9 66BB0700            <1> 		mov bx, 7
  3073                              <1> 	int303:	;;print line, al=last key,bl=modifier, esi=buffer
  3074 000029CD A2[B8290000]        <1> 		mov [endkey303], al
  3075 000029D2 E806000000          <1> 		call int303b
  3076 000029D7 E854030000          <1> 		call termcopy
  3077 000029DC C3                  <1> 		ret
  3078                              <1> 	int303b:
  3079 000029DD 8A06                <1> 		mov al, [esi]
  3080 000029DF 3A05[B8290000]      <1> 		cmp al, [endkey303]
  3081 000029E5 7408                <1> 		je doneint303
  3082 000029E7 E8D1FDFFFF          <1> 		call int301prnt
  3083 000029EC 46                  <1> 		inc esi
  3084 000029ED EBEE                <1> 		jmp int303b
  3085                              <1> 	doneint303:
  3086 000029EF C3                  <1> 		ret
  3087                              <1> 		
  3088 000029F0 00                  <1> endkey304 db 0
  3089 000029F1 00000000            <1> endbuffer304 dd 0
  3090                              <1> 	int304:	;;get line, al=last key, esi = buffer, edi = endbuffer
  3091 000029F5 A2[F0290000]        <1> 		mov [endkey304], al
  3092 000029FA 893D[F1290000]      <1> 		mov [endbuffer304], edi
  3093                              <1> 	int304b:
  3094 00002A00 56                  <1> 		push esi
  3095 00002A01 30C0                <1> 		xor al, al
  3096 00002A03 E86CFFFFFF          <1> 		call int302
  3097 00002A08 5E                  <1> 		pop esi
  3098 00002A09 8806                <1> 		mov [esi], al
  3099 00002A0B 46                  <1> 		inc esi
  3100 00002A0C 3B35[F1290000]      <1> 		cmp esi, [endbuffer304]
  3101 00002A12 7308                <1> 		jae int304done
  3102 00002A14 3A05[F0290000]      <1> 		cmp al, [endkey304]
  3103 00002A1A 75E4                <1> 		jne int304b
  3104                              <1> 	int304done:
  3105 00002A1C 4E                  <1> 		dec esi
  3106 00002A1D C60600              <1> 		mov byte [esi], 0
  3107 00002A20 C3                  <1> 	ret
  3108                              <1> 	
  3109 00002A21 00                  <1> endkey305 db 0
  3110 00002A22 00                  <1> modkey305 db 0
  3111 00002A23 00000000            <1> firstesi305 dd 0
  3112 00002A27 00                  <1> commandedit db 0
  3113 00002A28 00                  <1> txtmask db 0
  3114 00002A29 00000000            <1> buftxtloc dd 0
  3115 00002A2D 00000000            <1> endbuffer305 dd 0
  3116 00002A31 082000              <1> backcursor db 8," ",0
  3117                              <1> 	int305:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  3118 00002A34 8935[292A0000]      <1> 		mov [buftxtloc], esi
  3119 00002A3A A2[212A0000]        <1> 		mov [endkey305], al
  3120 00002A3F 881D[222A0000]      <1> 		mov [modkey305], bl
  3121 00002A45 8935[232A0000]      <1> 		mov [firstesi305], esi
  3122 00002A4B 893D[2D2A0000]      <1> 		mov [endbuffer305], edi
  3123                              <1> 	int305b:
  3124 00002A51 56                  <1> 		push esi
  3125 00002A52 B001                <1> 		mov al, 1
  3126 00002A54 E81BFFFFFF          <1> 		call int302	;then get it
  3127 00002A59 5E                  <1> 		pop esi
  3128 00002A5A 80FC48              <1> 		cmp ah, 0x48
  3129 00002A5D 0F846F010000        <1> 		je near int305up
  3130 00002A63 80FC50              <1> 		cmp ah, 0x50
  3131 00002A66 0F8449010000        <1> 		je near int305down
  3132 00002A6C 80FC4D              <1> 		cmp ah, 0x4D
  3133 00002A6F 0F84FE000000        <1> 		je near int305right
  3134 00002A75 80FC4B              <1> 		cmp ah, 0x4B
  3135 00002A78 0F84BC000000        <1> 		je near int305left
  3136 00002A7E 3C08                <1> 		cmp al, 8
  3137 00002A80 0F843F020000        <1> 		je near int305bscheck
  3138 00002A86 3C00                <1> 		cmp al, 0
  3139 00002A88 74C7                <1> 		je int305b
  3140 00002A8A 80FC00              <1> 		cmp ah, 0
  3141 00002A8D 74C2                <1> 		je int305b
  3142 00002A8F 8806                <1> 		mov [esi], al
  3143 00002A91 46                  <1> 		inc esi
  3144                              <1> 	bscheckequal:
  3145 00002A92 8A1D[222A0000]      <1> 		mov bl, [modkey305]
  3146 00002A98 8A3D[282A0000]      <1> 		mov bh, [txtmask]
  3147 00002A9E 80FF00              <1> 		cmp bh, 0
  3148 00002AA1 7402                <1> 		je nomasktxt
  3149 00002AA3 88F8                <1> 		mov al, bh
  3150                              <1> 	nomasktxt:
  3151 00002AA5 E806FDFFFF          <1> 		call int301
  3152 00002AAA 56                  <1> 		push esi
  3153 00002AAB 66A3[382B0000]      <1> 		mov [int305axcache], ax
  3154 00002AB1 8A25[212A0000]      <1> 		mov ah, [endkey305]
  3155 00002AB7 38E0                <1> 		cmp al, ah
  3156 00002AB9 7429                <1> 		je nobackprintbuftxt2
  3157 00002ABB BE[701A0000]        <1> 		mov esi, buftxt2
  3158 00002AC0 E8F4FEFFFF          <1> 		call printquiet
  3159 00002AC5 B020                <1> 		mov al, " "
  3160 00002AC7 E8F1FCFFFF          <1> 		call int301prnt
  3161 00002ACC B008                <1> 		mov al, 8
  3162 00002ACE 81FE[701A0000]      <1> 		cmp esi, buftxt2
  3163 00002AD4 740E                <1> 		je nobackprintbuftxt2
  3164                              <1> 	backprintbuftxt2:
  3165 00002AD6 E8E2FCFFFF          <1> 		call int301prnt
  3166 00002ADB 4E                  <1> 		dec esi
  3167 00002ADC 81FE[701A0000]      <1> 		cmp esi, buftxt2
  3168 00002AE2 77F2                <1> 		ja backprintbuftxt2
  3169                              <1> 	nobackprintbuftxt2:
  3170 00002AE4 E8C7FCFFFF          <1> 		call int301
  3171 00002AE9 5E                  <1> 		pop esi
  3172 00002AEA 3B35[2D2A0000]      <1> 		cmp esi, [endbuffer305]
  3173 00002AF0 0F8314000000        <1> 		jae near doneint305
  3174 00002AF6 66A1[382B0000]      <1> 		mov ax, [int305axcache]
  3175 00002AFC 8A25[212A0000]      <1> 		mov ah, [endkey305]
  3176 00002B02 38E0                <1> 		cmp al, ah
  3177 00002B04 0F8547FFFFFF        <1> 		jne int305b
  3178                              <1> 	doneint305:
  3179 00002B0A 4E                  <1> 		dec esi
  3180 00002B0B BF[701A0000]        <1> 		mov edi, buftxt2
  3181                              <1> 	copylaterstuff:
  3182 00002B10 8A07                <1> 		mov al, [edi]
  3183 00002B12 3C00                <1> 		cmp al, 0
  3184 00002B14 7406                <1> 		je nocopylaterstuff
  3185 00002B16 8806                <1> 		mov [esi], al
  3186 00002B18 47                  <1> 		inc edi
  3187 00002B19 46                  <1> 		inc esi
  3188 00002B1A EBF4                <1> 		jmp copylaterstuff
  3189                              <1> 	nocopylaterstuff:
  3190 00002B1C C60600              <1> 		mov byte [esi], 0
  3191 00002B1F E801000000          <1> 		call clearbuftxt2
  3192 00002B24 C3                  <1> 		ret
  3193                              <1> 	
  3194                              <1> 	clearbuftxt2:
  3195 00002B25 30C0                <1> 		xor al, al
  3196 00002B27 BF[701A0000]        <1> 		mov edi, buftxt2
  3197                              <1> 	clearbuftxt2lp:
  3198 00002B2C 8807                <1> 		mov [edi], al
  3199 00002B2E 47                  <1> 		inc edi
  3200 00002B2F 81FF[7A1B0000]      <1> 		cmp edi, buftxt
  3201 00002B35 75F5                <1> 		jne clearbuftxt2lp
  3202 00002B37 C3                  <1> 		ret
  3203                              <1> 		
  3204 00002B38 0000                <1> 	int305axcache dw 0
  3205                              <1> 		
  3206                              <1> 	int305left:
  3207 00002B3A 3B35[292A0000]      <1> 		cmp esi, [buftxtloc]
  3208 00002B40 0F840BFFFFFF        <1> 		je near int305b
  3209 00002B46 BF[701A0000]        <1> 		mov edi, buftxt2
  3210 00002B4B 8A07                <1> 		mov al, [edi]
  3211                              <1> 	shiftbuftxt2:
  3212 00002B4D 3C00                <1> 		cmp al, 0
  3213 00002B4F 7409                <1> 		je noshiftbuftxt2
  3214 00002B51 47                  <1> 		inc edi
  3215 00002B52 8A27                <1> 		mov ah, [edi]
  3216 00002B54 8807                <1> 		mov [edi], al
  3217 00002B56 88E0                <1> 		mov al, ah
  3218 00002B58 EBF3                <1> 		jmp shiftbuftxt2
  3219                              <1> 	noshiftbuftxt2:
  3220 00002B5A BF[701A0000]        <1> 		mov edi, buftxt2
  3221 00002B5F 4E                  <1> 		dec esi
  3222 00002B60 8A06                <1> 		mov al, [esi]
  3223 00002B62 8807                <1> 		mov [edi], al
  3224 00002B64 C60600              <1> 		mov byte [esi], 0
  3225 00002B67 B008                <1> 		mov al, 8
  3226 00002B69 E842FCFFFF          <1> 		call int301
  3227 00002B6E E9DEFEFFFF          <1> 		jmp int305b
  3228                              <1> 		
  3229                              <1> 	int305right:
  3230 00002B73 BF[701A0000]        <1> 		mov edi, buftxt2
  3231 00002B78 8A07                <1> 		mov al, [edi]
  3232 00002B7A 3C00                <1> 		cmp al, 0
  3233 00002B7C 0F84CFFEFFFF        <1> 		je near int305b
  3234 00002B82 8806                <1> 		mov [esi], al
  3235                              <1> 	shiftbuftxt2lft:
  3236 00002B84 3C00                <1> 		cmp al, 0
  3237 00002B86 7408                <1> 		je noshiftbuftxt2lft
  3238 00002B88 47                  <1> 		inc edi
  3239 00002B89 8A07                <1> 		mov al, [edi]
  3240 00002B8B 8847FF              <1> 		mov [edi - 1], al
  3241 00002B8E EBF4                <1> 		jmp shiftbuftxt2lft
  3242                              <1> 	noshiftbuftxt2lft:
  3243 00002B90 8A06                <1> 		mov al, [esi]
  3244 00002B92 46                  <1> 		inc esi
  3245 00002B93 8A1D[222A0000]      <1> 		mov bl, [modkey305]
  3246 00002B99 E812FCFFFF          <1> 		call int301
  3247 00002B9E E9AEFEFFFF          <1> 		jmp int305b
  3248                              <1> 		
  3249                              <1> 	int305downbck:
  3250 00002BA3 FECC                <1> 		dec ah
  3251 00002BA5 8825[272A0000]      <1> 		mov [commandedit], ah
  3252 00002BAB E83A000000          <1> 		call int305bckspc
  3253 00002BB0 E99CFEFFFF          <1> 		jmp int305b
  3254                              <1> 	
  3255                              <1> 	int305down:
  3256 00002BB5 8A25[272A0000]      <1> 		mov ah, [commandedit]
  3257 00002BBB 80FC01              <1> 		cmp ah, 1
  3258 00002BBE 0F868DFEFFFF        <1> 		jbe near int305b
  3259 00002BC4 80FC02              <1> 		cmp ah, 2
  3260 00002BC7 74DA                <1> 		je int305downbck
  3261 00002BC9 80EC02              <1> 		sub ah, 2
  3262 00002BCC 8825[272A0000]      <1> 		mov [commandedit], ah
  3263                              <1> 		
  3264                              <1> 	int305up:
  3265                              <1> 		;cmp bl, 0xE0
  3266                              <1> 		;jne int305b
  3267 00002BD2 30C0                <1> 		xor al, al
  3268 00002BD4 3805[272A0000]      <1> 		cmp [commandedit], al
  3269 00002BDA 0F8471FEFFFF        <1> 		je near int305b
  3270 00002BE0 E805000000          <1> 		call int305bckspc
  3271 00002BE5 E93C000000          <1> 		jmp getcurrentcommandstr
  3272                              <1> 	int305bckspc:
  3273 00002BEA 3B35[292A0000]      <1> 		cmp esi, [buftxtloc]
  3274 00002BF0 7426                <1> 		je noint305upbck
  3275                              <1> 	int305upbckspclp:
  3276 00002BF2 B008                <1> 		mov al, 8
  3277 00002BF4 8A1D[222A0000]      <1> 		mov bl, [modkey305]
  3278 00002BFA E8BEFBFFFF          <1> 		call int301prnt
  3279 00002BFF B020                <1> 		mov al, " "
  3280 00002C01 E8B7FBFFFF          <1> 		call int301prnt
  3281 00002C06 B008                <1> 		mov al, 8
  3282 00002C08 E8A3FBFFFF          <1> 		call int301
  3283 00002C0D 4E                  <1> 		dec esi
  3284 00002C0E 3B35[292A0000]      <1> 		cmp esi, [buftxtloc]
  3285 00002C14 7402                <1> 		je noint305upbck
  3286 00002C16 EBDA                <1> 		jmp int305upbckspclp
  3287                              <1> 	noint305upbck:
  3288 00002C18 8B3D[5B6E0000]      <1> 		mov edi, [currentcommandpos]
  3289 00002C1E 81C7[5F6E0000]      <1> 		add edi, commandbuf
  3290 00002C24 4F                  <1> 		dec edi
  3291 00002C25 C3                  <1> 		ret
  3292                              <1> 	getcurrentcommandstr:
  3293 00002C26 8A25[272A0000]      <1> 		mov ah, [commandedit]
  3294 00002C2C FE05[272A0000]      <1> 		inc byte [commandedit]
  3295                              <1> 	getccmdlp:
  3296 00002C32 4F                  <1> 		dec edi
  3297 00002C33 8A07                <1> 		mov al, [edi]
  3298 00002C35 81FF[5F6E0000]      <1> 		cmp edi, commandbuf
  3299 00002C3B 7231                <1> 		jb getcmdresetcommandbuf
  3300 00002C3D 81EF[5F6E0000]      <1> 		sub edi, commandbuf
  3301 00002C43 3B3D[5B6E0000]      <1> 		cmp edi, [currentcommandpos]
  3302 00002C49 0F8402FEFFFF        <1> 		je near int305b
  3303 00002C4F 81C7[5F6E0000]      <1> 		add edi, commandbuf
  3304 00002C55 3C00                <1> 		cmp al, 0
  3305 00002C57 75D9                <1> 		jne getccmdlp
  3306 00002C59 FECC                <1> 		dec ah
  3307 00002C5B 80FC00              <1> 		cmp ah, 0
  3308 00002C5E 77D2                <1> 		ja getccmdlp
  3309 00002C60 47                  <1> 		inc edi
  3310 00002C61 81FF[5F720000]      <1> 		cmp edi, commandbufend
  3311 00002C67 770D                <1> 		ja fixcmdbufb4moreint305
  3312 00002C69 E915000000          <1> 		jmp moreint305up
  3313                              <1> 	getcmdresetcommandbuf:
  3314 00002C6E BF[5F720000]        <1> 		mov edi, commandbufend
  3315 00002C73 47                  <1> 		inc edi
  3316 00002C74 EBBC                <1> 		jmp getccmdlp
  3317                              <1> 	fixcmdbufb4moreint305:
  3318 00002C76 4F                  <1> 		dec edi
  3319 00002C77 81EF[5F720000]      <1> 		sub edi, commandbufend
  3320 00002C7D 81C7[5F6E0000]      <1> 		add edi, commandbuf
  3321                              <1> 	moreint305up:
  3322 00002C83 8A07                <1> 		mov al, [edi]
  3323 00002C85 47                  <1> 		inc edi
  3324 00002C86 81EF[5F6E0000]      <1> 		sub edi, commandbuf
  3325 00002C8C 3C00                <1> 		cmp al, 0
  3326 00002C8E 0F84BDFDFFFF        <1> 		je near int305b
  3327 00002C94 3B3D[5B6E0000]      <1> 		cmp edi, [currentcommandpos]
  3328 00002C9A 0F83B1FDFFFF        <1> 		jae near int305b
  3329 00002CA0 81C7[5F6E0000]      <1> 		add edi, commandbuf
  3330 00002CA6 8806                <1> 		mov [esi], al
  3331 00002CA8 46                  <1> 		inc esi
  3332 00002CA9 57                  <1> 		push edi
  3333 00002CAA 8A1D[222A0000]      <1> 		mov bl, [modkey305]
  3334 00002CB0 E8FBFAFFFF          <1> 		call int301
  3335 00002CB5 5F                  <1> 		pop edi
  3336 00002CB6 81FF[5F720000]      <1> 		cmp edi, commandbufend
  3337 00002CBC 76C5                <1> 		jbe moreint305up
  3338 00002CBE BF[5F6E0000]        <1> 		mov edi, commandbuf
  3339 00002CC3 EBBE                <1> 		jmp moreint305up
  3340                              <1> 	int305bscheck:
  3341 00002CC5 3B35[232A0000]      <1> 		cmp esi, [firstesi305]
  3342 00002CCB 7705                <1> 		ja goodbscheck
  3343 00002CCD E97FFDFFFF          <1> 		jmp int305b
  3344                              <1> 	goodbscheck:
  3345 00002CD2 4E                  <1> 		dec esi
  3346 00002CD3 C60600              <1> 		mov byte [esi], 0
  3347 00002CD6 8A1D[222A0000]      <1> 		mov bl, [modkey305]
  3348 00002CDC B008                <1> 		mov al, 8
  3349 00002CDE E9AFFDFFFF          <1> 		jmp bscheckequal
  3350                              <1> 	
  3351                              <1> 		
  3352                              <1> 	clear:		
  3353                              <1> 	
  3354                              <1> 	int306:	;;clear screen
  3355 00002CE3 668B0D[AC270000]    <1> 		mov cx, [charxy]
  3356 00002CEA BF[8F1D0000]        <1> 		mov edi, videobuf
  3357 00002CEF 6631C0              <1> 		xor ax, ax
  3358 00002CF2 66A3[A6270000]      <1> 		mov [linebeginpos], ax
  3359 00002CF8 66A3[A8270000]      <1> 		mov [videobufpos], ax
  3360 00002CFE 6631D2              <1> 		xor dx, dx
  3361 00002D01 66A3[AA270000]      <1> 		mov [charpos], ax
  3362                              <1> 	int306b:
  3363 00002D07 668907              <1> 		mov [edi], ax
  3364 00002D0A 81C702000000        <1> 		add edi, 2
  3365 00002D10 FEC9                <1> 		dec cl
  3366 00002D12 80F900              <1> 		cmp cl, 0
  3367 00002D15 75F0                <1> 		jne int306b
  3368 00002D17 8A0D[AC270000]      <1> 		mov cl, [charxy]
  3369 00002D1D FECD                <1> 		dec ch
  3370 00002D1F 80FD00              <1> 		cmp ch, 0
  3371 00002D22 75E3                <1> 		jne int306b
  3372 00002D24 E807000000          <1> 		call termcopy
  3373 00002D29 C3                  <1> 		ret
  3374                              <1> 		
  3375 00002D2A 00000000            <1> 	termcursorpos dd 0
  3376 00002D2E 0000                <1> 	removedvideo dw 0
  3377                              <1> termcopy:	
  3378 00002D30 60                  <1> 	pusha
  3379 00002D31 BF[8F1D0000]        <1> 	mov edi, videobuf
  3380 00002D36 31DB                <1> 	xor ebx, ebx
  3381 00002D38 668B1D[A8270000]    <1> 	mov bx, [videobufpos]
  3382 00002D3F 01DF                <1> 	add edi, ebx
  3383 00002D41 893D[2A2D0000]      <1> 	mov [termcursorpos], edi
  3384 00002D47 E8AF000000          <1> 	call switchtermcursor
  3385 00002D4C C605[5D4F0000]00    <1> 	mov byte [mouseselecton], 0
  3386 00002D53 C605[BC270000]01    <1> 	mov byte [termcopyon], 1
  3387 00002D5A 803D[5E4F0000]00    <1> 	cmp byte [guion], 0
  3388 00002D61 0F8412000000        <1> 	je near nowincopy
  3389 00002D67 803D[BB270000]01    <1> 	cmp byte [termguion], 1
  3390 00002D6E 0F840C2E0000        <1> 	je near windowvideocopy
  3391 00002D74 E97B000000          <1> 	jmp nocopytermatall
  3392                              <1> nowincopy:
  3393 00002D79 BE00000A00          <1> 	mov esi, 0xA0000
  3394 00002D7E A1[29040000]        <1> 	mov eax, [basecache]
  3395 00002D83 C1E004              <1> 	shl eax, 4
  3396 00002D86 29C6                <1> 	sub esi, eax
  3397 00002D88 BF[8F1D0000]        <1> 	mov edi, videobuf
  3398 00002D8D 31C9                <1> 	xor ecx, ecx
  3399 00002D8F 668B0D[AC270000]    <1> 	mov cx, [charxy]
  3400                              <1> nowincopy2:
  3401 00002D96 BB[69730000]        <1> 	mov ebx, fonts
  3402 00002D9B 31C0                <1> 	xor eax, eax
  3403 00002D9D 8A07                <1> 	mov al, [edi]
  3404 00002D9F C1E004              <1> 	shl eax, 4
  3405 00002DA2 01C3                <1> 	add ebx, eax
  3406 00002DA4 47                  <1> 	inc edi
  3407 00002DA5 8A27                <1> 	mov ah, [edi]
  3408 00002DA7 31D2                <1> 	xor edx, edx
  3409 00002DA9 8A15[AC270000]      <1> 	mov dl, [charxy]
  3410 00002DAF C1C110              <1> 	rol ecx, 16
  3411 00002DB2 B110                <1> 	mov cl, 16
  3412                              <1> nowinfont:
  3413 00002DB4 8A03                <1> 	mov al, [ebx]
  3414 00002DB6 D0C8                <1> 	ror al, 1
  3415 00002DB8 80FC07              <1> 	cmp ah, 7
  3416 00002DBB 7602                <1> 	jbe notnotfont
  3417 00002DBD F6D0                <1> 	not al
  3418                              <1> notnotfont:
  3419 00002DBF 8806                <1> 	mov [esi], al
  3420 00002DC1 01D6                <1> 	add esi, edx
  3421 00002DC3 43                  <1> 	inc ebx
  3422 00002DC4 FEC9                <1> 	dec cl
  3423 00002DC6 80F900              <1> 	cmp cl, 0
  3424 00002DC9 75E9                <1> 	jne nowinfont
  3425 00002DCB C1E204              <1> 	shl edx, 4
  3426 00002DCE 29D6                <1> 	sub esi, edx
  3427 00002DD0 C1C110              <1> 	rol ecx, 16
  3428                              <1> nopresentwinfont:
  3429 00002DD3 47                  <1> 	inc edi
  3430 00002DD4 46                  <1> 	inc esi
  3431 00002DD5 FEC9                <1> 	dec cl
  3432 00002DD7 80F900              <1> 	cmp cl, 0
  3433 00002DDA 75BA                <1> 	jne nowincopy2
  3434 00002DDC 8A0D[AC270000]      <1> 	mov cl, [charxy]
  3435 00002DE2 31D2                <1> 	xor edx, edx
  3436 00002DE4 88CA                <1> 	mov dl, cl
  3437 00002DE6 29D6                <1> 	sub esi, edx
  3438 00002DE8 C1E204              <1> 	shl edx, 4
  3439 00002DEB 01D6                <1> 	add esi, edx
  3440 00002DED FECD                <1> 	dec ch
  3441 00002DEF 80FD00              <1> 	cmp ch, 0
  3442 00002DF2 75A2                <1> 	jne nowincopy2
  3443                              <1> nocopytermatall:
  3444 00002DF4 E802000000          <1> 	call switchtermcursor
  3445 00002DF9 61                  <1> 	popa
  3446 00002DFA C3                  <1> 	ret
  3447                              <1> 	
  3448                              <1> switchtermcursor:
  3449 00002DFB 8B3D[2A2D0000]      <1> 	mov edi, [termcursorpos]
  3450 00002E01 8A4701              <1> 	mov al, [edi + 1]
  3451 00002E04 8A27                <1> 	mov ah, [edi]
  3452 00002E06 3C07                <1> 	cmp al, 7
  3453 00002E08 7607                <1> 	jbe movlargecursorterm
  3454 00002E0A B007                <1> 	mov al, 7
  3455 00002E0C E902000000          <1> 	jmp movedcursorterm
  3456                              <1> movlargecursorterm:
  3457 00002E11 B0F0                <1> 	mov al, 0xF0
  3458                              <1> movedcursorterm:
  3459 00002E13 884701              <1> 	mov [edi + 1], al
  3460 00002E16 80FC00              <1> 	cmp ah, 0
  3461 00002E19 7504                <1> 	jne fixednocursorterm
  3462 00002E1B B420                <1> 	mov ah, " "
  3463 00002E1D 8827                <1> 	mov [edi], ah
  3464                              <1> fixednocursorterm:
  3465 00002E1F C3                  <1> 	ret
  3466                              <1> 	
  3467                                      %include 'source/dosints.asm'
  3468                              <1> int21h:
  3469 00002E20 80FC01              <1> 	cmp ah, 1
  3470 00002E23 0F8437000000        <1> 	je near dosgchar
  3471 00002E29 80FC02              <1> 	cmp ah, 2
  3472 00002E2C 0F8435000000        <1> 	je near doswchar
  3473 00002E32 80FC09              <1> 	cmp ah, 9
  3474 00002E35 0F8433000000        <1> 	je near dosprintstr
  3475 00002E3B 80FC0A              <1> 	cmp ah, 0xA
  3476 00002E3E 0F8439000000        <1> 	je near dosgetstr
  3477 00002E44 80FC2B              <1> 	cmp ah, 0x2B
  3478 00002E47 0F846E000000        <1> 	je near dosgetdate
  3479 00002E4D 80FC2C              <1> 	cmp ah, 0x2C
  3480 00002E50 0F8484000000        <1> 	je near dosgettime
  3481 00002E56 80FC4C              <1> 	cmp ah, 0x4C
  3482 00002E59 0F8495000000        <1> 	je near dosexit
  3483 00002E5F C3                  <1> 	ret
  3484                              <1> 
  3485                              <1> dosgchar:
  3486 00002E60 B405                <1> 	mov ah, 5
  3487 00002E62 30C0                <1> 	xor al, al
  3488 00002E64 CD30                <1> 	int 30h
  3489 00002E66 C3                  <1> 	ret
  3490                              <1> 	
  3491                              <1> doswchar:
  3492 00002E67 B307                <1> 	mov bl, 7
  3493 00002E69 B406                <1> 	mov ah, 6
  3494 00002E6B CD30                <1> 	int 30h
  3495 00002E6D C3                  <1> 	ret
  3496                              <1> 	
  3497                              <1> dosprintstr:
  3498 00002E6E 8B3424              <1> 	mov esi, [esp]
  3499 00002E71 6689D6              <1> 	mov si, dx
  3500 00002E74 B024                <1> 	mov al, "$"
  3501 00002E76 B401                <1> 	mov ah, 1
  3502 00002E78 B307                <1> 	mov bl, 7
  3503 00002E7A CD30                <1> 	int 30h
  3504 00002E7C C3                  <1> 	ret
  3505                              <1> 	
  3506                              <1> dosgetstr:
  3507 00002E7D 8B3424              <1> 	mov esi, [esp]
  3508 00002E80 6689D6              <1> 	mov si, dx
  3509 00002E83 B900000000          <1> 	mov ecx, 0
  3510 00002E88 8A0E                <1> 	mov cl, [esi]
  3511 00002E8A 81C603000000        <1> 	add esi, 3
  3512 00002E90 89F7                <1> 	mov edi, esi
  3513 00002E92 8935[B72E0000]      <1> 	mov [stringstart], esi
  3514 00002E98 01CF                <1> 	add edi, ecx
  3515 00002E9A B00D                <1> 	mov al, 13
  3516 00002E9C B404                <1> 	mov ah, 4
  3517 00002E9E B307                <1> 	mov bl, 7
  3518 00002EA0 CD30                <1> 	int 30h
  3519 00002EA2 89F1                <1> 	mov ecx, esi
  3520 00002EA4 2B0D[B72E0000]      <1> 	sub ecx, [stringstart]
  3521 00002EAA 8B35[B72E0000]      <1> 	mov esi, [stringstart]
  3522 00002EB0 884EFF              <1> 	mov [esi - 1], cl
  3523 00002EB3 884EFE              <1> 	mov [esi - 2], cl
  3524 00002EB6 C3                  <1> 	ret
  3525 00002EB7 00000000            <1> stringstart dd 0
  3526                              <1> 
  3527                              <1> dosgetdate:
  3528 00002EBB E818160000          <1> 	call time
  3529 00002EC0 8A0D[AF460000]      <1> 	mov cl, [RTCtimeYear]
  3530 00002EC6 B500                <1> 	mov ch, 0
  3531 00002EC8 6681C1D007          <1> 	add cx, 2000
  3532 00002ECD 8A35[AE460000]      <1> 	mov dh, [RTCtimeMonth]
  3533 00002ED3 8A15[AD460000]      <1> 	mov dl, [RTCtimeDay]
  3534 00002ED9 C3                  <1> 	ret
  3535                              <1> 
  3536                              <1> dosgettime:
  3537 00002EDA E8F9150000          <1> 	call time
  3538 00002EDF 8A2D[AC460000]      <1> 	mov ch, [RTCtimeHour]
  3539 00002EE5 8A0D[AB460000]      <1> 	mov cl, [RTCtimeMinute]
  3540 00002EEB 8A35[AA460000]      <1> 	mov dh, [RTCtimeSecond]
  3541 00002EF1 B200                <1> 	mov dl, 0
  3542 00002EF3 C3                  <1> 	ret
  3543                              <1> 	
  3544                              <1> dosexit:
  3545 00002EF4 6631C0              <1> 	xor ax, ax
  3546 00002EF7 CD30                <1> 	int 30h
  3547                                      %include 'source/solleros.asm'
  3548                              <1> 	;SOLLEROS.ASM
  3549                              <1> os:
  3550 00002EF9 E8E5FDFFFF          <1> 	call clear
  3551 00002EFE BE[20730000]        <1> 	mov esi, userask
  3552 00002F03 E8BEFAFFFF          <1> 	call print
  3553                              <1> usercheck:
  3554 00002F08 BE[7A1B0000]        <1> 	mov esi, buftxt
  3555 00002F0D BF[7A1D0000]        <1> 	mov edi, buftxtend
  3556 00002F12 B00D                <1> 	mov al, 13
  3557 00002F14 E81BFBFFFF          <1> 	call int305
  3558 00002F19 56                  <1> 	push esi
  3559 00002F1A BE[40730000]        <1> 	mov esi, line
  3560 00002F1F E8A2FAFFFF          <1> 	call print
  3561 00002F24 BE[2A730000]        <1> 	mov esi, pwdask
  3562 00002F29 E898FAFFFF          <1> 	call print
  3563 00002F2E 5E                  <1> 	pop esi
  3564 00002F2F 46                  <1> 	inc esi
  3565 00002F30 8935[E82F0000]      <1> 	mov [esipass], esi
  3566                              <1> passcheck:
  3567 00002F36 30C0                <1> 	xor al, al
  3568 00002F38 E837FAFFFF          <1> 	call int302
  3569 00002F3D 3C0D                <1> 	cmp al, 13
  3570 00002F3F 0F8436000000        <1> 	je near gotpass
  3571 00002F45 3C08                <1> 	cmp al, 8
  3572 00002F47 0F8410000000        <1> 	je near backpass
  3573 00002F4D 8806                <1> 	mov [esi], al
  3574 00002F4F 46                  <1> 	inc esi
  3575 00002F50 B02A                <1> 	mov al, '*'
  3576 00002F52 E859F8FFFF          <1> 	call int301
  3577 00002F57 EBDD                <1> 	jmp passcheck
  3578 00002F59 08200800            <1> backcursor2 db 8," ",8,0
  3579                              <1> backpass:
  3580 00002F5D 3B35[E82F0000]      <1> 	cmp esi, [esipass]
  3581 00002F63 0F84CDFFFFFF        <1> 	je near passcheck
  3582 00002F69 4E                  <1> 	dec esi
  3583 00002F6A C60600              <1> 	mov byte [esi], 0
  3584 00002F6D 56                  <1> 	push esi
  3585 00002F6E BE[592F0000]        <1> 	mov esi, backcursor2
  3586 00002F73 E84EFAFFFF          <1> 	call print
  3587 00002F78 5E                  <1> 	pop esi
  3588 00002F79 EBBB                <1> 	jmp passcheck
  3589                              <1> gotpass:
  3590 00002F7B B000                <1> 	mov al,0
  3591 00002F7D 8806                <1> 	mov [esi], al
  3592 00002F7F BE[40730000]        <1> 	mov esi, line
  3593 00002F84 E83DFAFFFF          <1> 	call print
  3594 00002F89 BB[46730000]        <1> 	mov ebx, userlst
  3595                              <1> userfind:
  3596 00002F8E BE[7A1B0000]        <1> 	mov esi, buftxt
  3597 00002F93 8A06                <1> 	mov al, [esi]
  3598 00002F95 3C00                <1> 	cmp al, 0
  3599 00002F97 0F845CFFFFFF        <1> 	je near os
  3600 00002F9D 891D[EC2F0000]      <1> 	mov [usercache], ebx
  3601 00002FA3 E882020000          <1> 	call tester
  3602 00002FA8 3C01                <1> 	cmp al, 1
  3603 00002FAA 7415                <1> 	je pwdtest
  3604                              <1> nxtuser:
  3605 00002FAC 43                  <1> 	inc ebx
  3606 00002FAD 8A03                <1> 	mov al, [ebx]
  3607 00002FAF 3C00                <1> 	cmp al, 0
  3608 00002FB1 74DB                <1> 	je userfind
  3609 00002FB3 81FB[69730000]      <1> 	cmp ebx, userlstend
  3610 00002FB9 0F833AFFFFFF        <1> 	jae near os
  3611 00002FBF EBCD                <1> 	jmp userfind
  3612                              <1> pwdtest:
  3613 00002FC1 46                  <1> 	inc esi
  3614 00002FC2 43                  <1> 	inc ebx
  3615 00002FC3 E862020000          <1> 	call tester
  3616 00002FC8 3C01                <1> 	cmp al, 1
  3617 00002FCA 7402                <1> 	je pwdrgt
  3618 00002FCC EBDE                <1> 	jmp nxtuser
  3619 00002FCE E810FDFFFF          <1> pwdrgt:	call clear
  3620 00002FD3 66B90002            <1> 	mov cx, 200h
  3621 00002FD7 BE[7A1B0000]        <1> 	mov esi, buftxt
  3622 00002FDC 30C0                <1> 	xor al, al
  3623 00002FDE 8806                <1> bufclr:	mov [esi], al
  3624 00002FE0 46                  <1> 	inc esi
  3625 00002FE1 E2FB                <1> 	loop bufclr
  3626 00002FE3 E935000000          <1> 	jmp nwcmd
  3627                              <1> 
  3628 00002FE8 00000000            <1> esipass dd 0
  3629 00002FEC [46730000]          <1> usercache dd userlst
  3630                              <1> 	
  3631                              <1> buftxtclear:
  3632 00002FF0 30C0                <1> 	xor al, al
  3633 00002FF2 BE[7A1B0000]        <1> 	mov esi, buftxt
  3634 00002FF7 81FE[7A1D0000]      <1> clearbuftxt: cmp esi, buf2
  3635 00002FFD 730E                <1> 	jae retbufclr
  3636 00002FFF 8806                <1> 	mov [esi], al
  3637 00003001 46                  <1> 	inc esi
  3638 00003002 EBF3                <1> 	jmp clearbuftxt
  3639                              <1> 
  3640 00003004 39DE                <1> clearitbuf: cmp esi, ebx
  3641 00003006 7305                <1> 	jae retbufclr
  3642 00003008 8806                <1> 	mov [esi], al
  3643 0000300A 46                  <1> 	inc esi
  3644 0000300B EBF7                <1> 	jmp clearitbuf
  3645 0000300D C3                  <1> retbufclr: ret
  3646                              <1> 
  3647 0000300E E90A000000          <1> full:	jmp nwcmd
  3648                              <1> 
  3649                              <1> nwcmd2:
  3650 00003013 BE[40730000]        <1> 	mov esi, line
  3651 00003018 E8A9F9FFFF          <1> 	call print
  3652                              <1> 
  3653                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3654                              <1> nwcmd:	
  3655 0000301D 803D[F46B0000]00    <1> 	cmp byte [threadson], 0
  3656 00003024 7408                <1> 	je noclinwcmd
  3657 00003026 FA                  <1> 	cli
  3658 00003027 C605[F46B0000]00    <1> 	mov byte [threadson], 0
  3659                              <1> noclinwcmd:
  3660 0000302E B001                <1> 	mov al, 1
  3661 00003030 3805[69150000]      <1> 	cmp [BATCHISON], al
  3662 00003036 7501                <1> 	jne cancel
  3663 00003038 C3                  <1> 	ret
  3664 00003039 30C0                <1> cancel:	xor al, al
  3665 0000303B A2[00150000]        <1> 	mov [IFON], al
  3666 00003040 A2[69150000]        <1> 	mov [BATCHISON], al
  3667 00003045 B05B                <1> 	mov al, '['
  3668 00003047 B406                <1> 	mov ah, 6
  3669 00003049 66BB0700            <1> 	mov bx, 7
  3670 0000304D E86BF7FFFF          <1> 	call int301prnt
  3671 00003052 8B35[EC2F0000]      <1> 	mov esi, [usercache]
  3672 00003058 E869F9FFFF          <1> 	call print
  3673 0000305D BE[34730000]        <1> 	mov esi, location
  3674 00003062 E85FF9FFFF          <1> 	call print
  3675 00003067 E884FFFFFF          <1> 	call buftxtclear
  3676 0000306C BE[7A1B0000]        <1> 	mov esi, buftxt
  3677 00003071 C605[272A0000]01    <1> 	mov byte [commandedit], 1
  3678 00003078 B00D                <1> 	mov al, 13
  3679 0000307A 66BB0700            <1> 	mov bx, 7
  3680 0000307E BF[7A1D0000]        <1> 	mov edi, buftxtend
  3681 00003083 E8ACF9FFFF          <1> 	call int305
  3682 00003088 C605[272A0000]00    <1> 	mov byte [commandedit], 0
  3683 0000308F 803D[7A1B0000]00    <1> 	cmp byte [buftxt], 0
  3684 00003096 0F8477FFFFFF        <1> 	je near nwcmd2
  3685 0000309C 8B35[5B6E0000]      <1> gotcmd:	mov esi, [currentcommandpos]
  3686 000030A2 8935[576E0000]      <1> 	mov [lastcommandpos], esi
  3687 000030A8 BF[7A1B0000]        <1> 	mov edi, buftxt
  3688 000030AD 81C6[5F6E0000]      <1> 	add esi, commandbuf
  3689 000030B3 81FE[5F720000]      <1> 	cmp esi, commandbufend
  3690 000030B9 7605                <1> 	jbe copycommand
  3691 000030BB BE[5F6E0000]        <1> 	mov esi, commandbuf
  3692                              <1> copycommand:
  3693 000030C0 8A07                <1> 	mov al, [edi]
  3694 000030C2 8806                <1> 	mov [esi], al
  3695 000030C4 47                  <1> 	inc edi
  3696 000030C5 46                  <1> 	inc esi
  3697 000030C6 3C00                <1> 	cmp al, 0
  3698 000030C8 740F                <1> 	je donecopy
  3699 000030CA 81FE[5F720000]      <1> 	cmp esi, commandbufend
  3700 000030D0 76EE                <1> 	jbe copycommand
  3701 000030D2 BE[5F6E0000]        <1> 	mov esi, commandbuf
  3702 000030D7 EBE7                <1> 	jmp copycommand
  3703                              <1> donecopy:
  3704 000030D9 81EE[5F6E0000]      <1> 	sub esi, commandbuf
  3705 000030DF 8935[5B6E0000]      <1> 	mov [currentcommandpos], esi
  3706 000030E5 FB                  <1> 	sti
  3707 000030E6 E990000000          <1> 	jmp run
  3708                              <1> 
  3709 000030EB E800FFFFFF          <1> input:	call buftxtclear
  3710 000030F0 BE[7A1B0000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3711 000030F5 BF[7A1D0000]        <1> 	mov edi, buftxtend
  3712 000030FA B00D                <1> stdin:	mov al, 13
  3713 000030FC B307                <1> 	mov bl, 7
  3714 000030FE B404                <1> 	mov ah, 4
  3715 00003100 CD30                <1> 	int 30h
  3716 00003102 C3                  <1> 	ret
  3717                              <1> 
  3718                              <1> replacevariable:
  3719 00003103 56                  <1> 	push esi
  3720 00003104 81EE[7A1B0000]      <1> 	sub esi, buftxt
  3721 0000310A 89F7                <1> 	mov edi, esi
  3722 0000310C 81C6[7A1B0000]      <1> 	add esi, buftxt
  3723 00003112 47                  <1> 	inc edi
  3724 00003113 BB[6F150000]        <1> 	mov ebx, variables
  3725 00003118 E898070000          <1> 	call nxtvrech
  3726 0000311D 89F7                <1> 	mov edi, esi
  3727 0000311F 31DB                <1> 	xor ebx, ebx
  3728 00003121 4E                  <1> 	dec esi
  3729                              <1> findvarname:
  3730 00003122 4E                  <1> 	dec esi
  3731 00003123 8A06                <1> 	mov al, [esi]
  3732 00003125 43                  <1> 	inc ebx
  3733 00003126 3C04                <1> 	cmp al, 4
  3734 00003128 75F8                <1> 	jne findvarname
  3735 0000312A 5E                  <1> 	pop esi
  3736                              <1> replacevarloop:
  3737 0000312B 8A07                <1> 	mov al, [edi]
  3738 0000312D 81FB00000000        <1> 	cmp ebx, 0
  3739 00003133 0F841E000000        <1> 	je near expandbuftxt
  3740 00003139 3C00                <1> 	cmp al, 0
  3741 0000313B 0F8407000000        <1> 	je near compressbuftxt
  3742 00003141 8806                <1> 	mov [esi], al
  3743 00003143 4B                  <1> 	dec ebx
  3744 00003144 46                  <1> 	inc esi
  3745 00003145 47                  <1> 	inc edi
  3746 00003146 EBE3                <1> 	jmp replacevarloop
  3747                              <1> compressbuftxt:	
  3748 00003148 8A041E              <1> 	mov al, [esi + ebx]
  3749 0000314B 8806                <1> 	mov [esi], al
  3750 0000314D 46                  <1> 	inc esi
  3751 0000314E 3C00                <1> 	cmp al, 0
  3752 00003150 75F6                <1> 	jne compressbuftxt
  3753 00003152 E933000000          <1> 	jmp fixvariables
  3754                              <1> expandbuftxt:
  3755 00003157 89F1                <1> 	mov ecx, esi
  3756 00003159 8A26                <1> 	mov ah, [esi]
  3757                              <1> expandbuftxtlp:
  3758 0000315B 8A1E                <1> 	mov bl, [esi]
  3759 0000315D 46                  <1> 	inc esi
  3760 0000315E 8A3E                <1> 	mov bh, [esi]
  3761 00003160 8826                <1> 	mov [esi], ah
  3762 00003162 88FC                <1> 	mov ah, bh
  3763 00003164 80FB00              <1> 	cmp bl, 0
  3764 00003167 75F2                <1> 	jne expandbuftxtlp
  3765 00003169 89CE                <1> 	mov esi, ecx
  3766 0000316B 8806                <1> 	mov [esi], al
  3767 0000316D 47                  <1> 	inc edi
  3768 0000316E 8A07                <1> 	mov al, [edi]
  3769 00003170 3C00                <1> 	cmp al, 0
  3770 00003172 0F8412000000        <1> 	je near fixvariables
  3771 00003178 46                  <1> 	inc esi
  3772 00003179 EBDC                <1> 	jmp expandbuftxt
  3773                              <1> 	
  3774                              <1> 	
  3775                              <1> run:	
  3776 0000317B BE[40730000]        <1> 	mov esi, line		;;I should add some sort of command line parsing before it is processed to replace variables with stuff-o I did!
  3777 00003180 E841F8FFFF          <1> 	call print
  3778                              <1> progtest2:
  3779 00003185 BE[7A1B0000]        <1> 	mov esi, buftxt
  3780                              <1> fixvariables:
  3781 0000318A 46                  <1> 	inc esi
  3782 0000318B 8A06                <1> 	mov al, [esi]
  3783 0000318D 3C24                <1> 	cmp al, '$'
  3784 0000318F 0F846EFFFFFF        <1> 	je near replacevariable
  3785 00003195 3C00                <1> 	cmp al, 0
  3786 00003197 75F1                <1> 	jne fixvariables
  3787                              <1> 
  3788 00003199 803D[91370000]00    <1> 	cmp byte [indexdone], 0
  3789 000031A0 7505                <1> 	jne progtest
  3790 000031A2 E855050000          <1> 	call indexfiles
  3791                              <1> progtest:
  3792 000031A7 BE[7A1B0000]        <1> 	mov esi, buftxt
  3793 000031AC BB[00130000]        <1> 	mov ebx, fileindex
  3794 000031B1 668B03              <1> prgnxt:	mov ax, [ebx]
  3795 000031B4 B105                <1> 	mov cl, 5
  3796 000031B6 B504                <1> 	mov ch, 4
  3797 000031B8 6639C8              <1> 	cmp ax, cx
  3798 000031BB 740B                <1> 	je fndprg
  3799 000031BD 43                  <1> 	inc ebx
  3800 000031BE 81FB[00150000]      <1> 	cmp ebx, fileindexend
  3801 000031C4 7338                <1> 	jae prgnf
  3802 000031C6 EBE9                <1> 	jmp prgnxt
  3803 000031C8 81C302000000        <1> fndprg: add ebx, 2
  3804 000031CE BE[7A1B0000]        <1> 	mov esi, buftxt
  3805 000031D3 6631C9              <1> 	xor cx, cx
  3806 000031D6 E889000000          <1> 	call cndtest
  3807 000031DB 3C01                <1> 	cmp al, 1
  3808 000031DD 7302                <1> 	jae prggood
  3809 000031DF EBD0                <1> 	jmp prgnxt
  3810 000031E1 81FB[00150000]      <1> prggood: cmp ebx, fileindexend
  3811 000031E7 733C                <1> 	jae prgdn
  3812 000031E9 81C303000000        <1> 	add ebx, 3
  3813 000031EF 8B3B                <1> 	mov edi, [ebx]
  3814 000031F1 C605[F46B0000]02    <1> 	mov byte [threadson], 2
  3815 000031F8 B020                <1> 	mov al, 0x20
  3816 000031FA E620                <1> 	out 0x20, al
  3817                              <1> 	;sti
  3818 000031FC FFE7                <1> 	jmp edi
  3819                              <1> prgnf:	
  3820 000031FE A0[7A1B0000]        <1> 	mov al, [buftxt]
  3821 00003203 3C00                <1> 	cmp al, 0
  3822 00003205 741E                <1> 	je prgdn
  3823 00003207 BE[07730000]        <1> 	mov esi, notfound1
  3824 0000320C E8B5F7FFFF          <1> 	call print
  3825 00003211 BE[7A1B0000]        <1> 	mov esi, buftxt
  3826 00003216 E8ABF7FFFF          <1> 	call print
  3827 0000321B BE[11730000]        <1> 	mov esi, notfound2
  3828 00003220 E8A1F7FFFF          <1> 	call print
  3829 00003225 E9F3FDFFFF          <1> prgdn:	jmp nwcmd
  3830                              <1> 
  3831                              <1> 
  3832                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3833 0000322A 30C0                <1> 	xor al, al
  3834 0000322C 8A06                <1> retest:	mov al, [esi]
  3835 0000322E 8A23                <1> 	mov ah, [ebx]
  3836 00003230 3C00                <1> 	cmp al, 0
  3837 00003232 7408                <1> 	je testtrue
  3838 00003234 38E0                <1> 	cmp al, ah
  3839 00003236 750C                <1> 	jne testfalse
  3840 00003238 43                  <1> 	inc ebx
  3841 00003239 46                  <1> 	inc esi
  3842 0000323A EBF0                <1> 	jmp retest
  3843                              <1> testtrue:
  3844 0000323C 80FC00              <1> 	cmp ah, 0
  3845 0000323F 7503                <1> 	jne testfalse
  3846 00003241 B001                <1> 	mov al, 1
  3847 00003243 C3                  <1> 	ret
  3848                              <1> testfalse:
  3849 00003244 30C0                <1> 	xor al, al
  3850 00003246 C3                  <1> 	ret
  3851                              <1> 
  3852                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3853 00003247 30C0                <1> 	xor al, al
  3854                              <1> opretest:
  3855 00003249 8A06                <1> 	mov al, [esi]
  3856 0000324B 8A23                <1> 	mov ah, [ebx]
  3857 0000324D 38E0                <1> 	cmp al, ah
  3858 0000324F 7510                <1> 	jne optestfalse
  3859 00003251 80FC00              <1> 	cmp ah, 0
  3860 00003254 7404                <1> 	je optesttrue
  3861 00003256 43                  <1> 	inc ebx
  3862 00003257 46                  <1> 	inc esi
  3863 00003258 EBEF                <1> 	jmp opretest
  3864                              <1> optesttrue:
  3865 0000325A 3C00                <1> 	cmp al, 0
  3866 0000325C 7503                <1> 	jne optestfalse
  3867 0000325E B001                <1> 	mov al, 1
  3868 00003260 C3                  <1> 	ret
  3869                              <1> optestfalse:
  3870 00003261 30C0                <1> 	xor al, al
  3871 00003263 C3                  <1> 	ret
  3872                              <1> 
  3873                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3874 00003264 30C0                <1> 	xor al, al
  3875 00003266 8A06                <1> cndretest:	mov al, [esi]
  3876 00003268 8A23                <1> 	mov ah, [ebx]
  3877 0000326A 38CC                <1> 	cmp ah, cl
  3878 0000326C 7408                <1> 	je cndtesttrue
  3879 0000326E 38E0                <1> 	cmp al, ah
  3880 00003270 750B                <1> 	jne cndtestfalse
  3881 00003272 43                  <1> 	inc ebx
  3882 00003273 46                  <1> 	inc esi
  3883 00003274 EBF0                <1> 	jmp cndretest
  3884                              <1> cndtesttrue:
  3885 00003276 38C8                <1> 	cmp al, cl
  3886 00003278 7506                <1> 	jne cndtestalmost
  3887 0000327A B001                <1> 	mov al, 1
  3888 0000327C C3                  <1> 	ret
  3889                              <1> cndtestfalse:
  3890 0000327D 30C0                <1> 	xor al, al
  3891 0000327F C3                  <1> 	ret
  3892                              <1> cndtestalmost:
  3893 00003280 B002                <1> 	mov al, 2
  3894 00003282 C3                  <1> 	ret
  3895 00003283 00                  <1> currentdir db 0
  3896 00003284 BE[00130000]        <1> dir:	mov esi, fileindex
  3897 00003289 8A06                <1> 	dirnxt:	mov al, [esi]
  3898 0000328B 30E4                <1> 		xor ah, ah
  3899 0000328D 3C05                <1> 		cmp al, 5
  3900 0000328F 744A                <1> 		je dirfnd
  3901 00003291 3C07                <1> 		cmp al, 7
  3902 00003293 743C                <1> 		je dirfnd3
  3903 00003295 3C06                <1> 		cmp al, 6
  3904 00003297 7438                <1> 		je dirfnd3
  3905 00003299 46                  <1> 		inc esi
  3906 0000329A 81FE[00150000]      <1> 		cmp esi,  fileindexend
  3907 000032A0 737B                <1> 		jae dirdn
  3908 000032A2 EBE5                <1> 		jmp dirnxt
  3909 000032A4 060400626174636800- <1> 	typetable db 6,4,0,"batch",0,7,4,0,"document",0,10,4,0,"folder",0,5,4,0,"executable",0
  3910 000032AD 070400646F63756D65- <1>
  3911 000032B6 6E74000A0400666F6C- <1>
  3912 000032BF 646572000504006578- <1>
  3913 000032C8 6563757461626C6500  <1>
  3914                              <1> 	dirfnd3:
  3915 000032D1 46                  <1> 		inc esi
  3916 000032D2 81FE[00150000]      <1> 		cmp esi, fileindexend
  3917 000032D8 76AF                <1> 		jbe dirnxt
  3918 000032DA 4E                  <1> 		dec esi
  3919 000032DB 46                  <1> 	dirfnd:	inc esi
  3920 000032DC 8A06                <1> 		mov al, [esi]
  3921 000032DE 30E4                <1> 		xor ah, ah
  3922 000032E0 3C04                <1> 		cmp al, 4
  3923 000032E2 740B                <1> 		je dirfnd2
  3924 000032E4 46                  <1> 		inc esi
  3925 000032E5 81FE[00150000]      <1> 		cmp esi,  fileindexend
  3926 000032EB 7330                <1> 		jae dirdn
  3927 000032ED EB9A                <1> 		jmp dirnxt
  3928 000032EF 81C601000000        <1> 	dirfnd2: add esi, 1
  3929 000032F5 E8CCF6FFFF          <1> 		call print
  3930 000032FA 8935[2C330000]      <1> 		mov [esidir], esi
  3931 00003300 BE[43730000]        <1> 		mov esi, dirtab
  3932 00003305 E8BCF6FFFF          <1> 		call print
  3933 0000330A 8B35[2C330000]      <1> 		mov esi, [esidir]
  3934 00003310 81FE[00150000]      <1> 		cmp esi,  fileindexend
  3935 00003316 7305                <1> 		jae dirdn
  3936 00003318 E96CFFFFFF          <1> 		jmp dirnxt
  3937 0000331D BE[40730000]        <1> 	dirdn:	mov esi, line
  3938 00003322 E89FF6FFFF          <1> 			call print
  3939 00003327 E9F1FCFFFF          <1> 			jmp nwcmd
  3940 0000332C 00000000            <1> esidir dd 0
  3941                              <1> 
  3942                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3943                              <1> 		                ;ends if array seperator is found backwards after 0
  3944                              <1> 	arnxt:	      
  3945 00003330 88E8                <1> 		mov al, ch
  3946 00003332 88CC                <1> 		mov ah, cl        
  3947 00003334 663906              <1> 		cmp [esi], ax
  3948 00003337 744D                <1> 		je ardn
  3949 00003339 66390E              <1> 		cmp [esi], cx
  3950 0000333C 7407                <1> 		je arfnd
  3951 0000333E 46                  <1> 		inc esi
  3952 0000333F 39DE                <1> 		cmp esi, ebx
  3953 00003341 7343                <1> 		jae ardn
  3954 00003343 EBEB                <1> 		jmp arnxt
  3955 00003345 81C602000000        <1> 	arfnd: add esi, 2
  3956 0000334B 891D[87330000]      <1> 		mov [arbx], ebx
  3957 00003351 890D[8B330000]      <1> 		mov [arcx], ecx
  3958 00003357 E86AF6FFFF          <1> 		call print
  3959 0000335C 8935[8D330000]      <1> 		mov [arsi], esi
  3960 00003362 BE[40730000]        <1> 		mov esi, line
  3961 00003367 E85AF6FFFF          <1> 		call print
  3962 0000336C 8B1D[87330000]      <1> 		mov ebx, [arbx]
  3963 00003372 668B0D[8B330000]    <1> 		mov cx, [arcx]
  3964 00003379 8B35[8D330000]      <1> 		mov esi, [arsi]
  3965 0000337F 46                  <1> 		inc esi
  3966 00003380 39DE                <1> 		cmp esi, ebx
  3967 00003382 7302                <1> 		jae ardn
  3968 00003384 EBAA                <1> 		jmp arnxt
  3969 00003386 C3                  <1> 	ardn:	ret
  3970 00003387 00000000            <1> arbx:	dw 0,0
  3971 0000338B 0000                <1> arcx:	db 0,0
  3972 0000338D 00000000            <1> arsi:	dw 0,0
  3973                              <1> 
  3974                              <1> clearbuffer:
  3975 00003391 BE[7A1D0000]        <1> 	mov esi, buf2
  3976 00003396 B030                <1> 	mov al, '0'
  3977 00003398 81FE[8E1D0000]      <1> clearbuf: cmp esi, numbuf
  3978 0000339E 7305                <1> 	jae doneclearbuff
  3979 000033A0 8806                <1> 	mov [esi], al
  3980 000033A2 46                  <1> 	inc esi
  3981 000033A3 EBF3                <1> 	jmp clearbuf
  3982                              <1> doneclearbuff: 
  3983 000033A5 C3                  <1> 		ret
  3984                              <1> 
  3985                              <1> convert:
  3986 000033A6 4E                  <1> 	dec esi
  3987 000033A7 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3988                              <1> cnvrt:
  3989 000033A9 89DE                <1> 	mov esi, ebx
  3990 000033AB 81EE09000000        <1> 	sub esi, 9
  3991 000033B1 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3992 000033B7 720A                <1> 	jb ten8
  3993 000033B9 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3994 000033BF FE06                <1> 	inc byte [esi]
  3995 000033C1 EBE6                <1> 	jmp cnvrt
  3996 000033C3 46                  <1> ten8:	inc esi
  3997 000033C4 81F900E1F505        <1> 	cmp ecx, 100000000
  3998 000033CA 720A                <1> 	jb ten7
  3999 000033CC 81E900E1F505        <1> 	sub ecx, 100000000
  4000 000033D2 FE06                <1> 	inc byte [esi]
  4001 000033D4 EBD3                <1> 	jmp cnvrt
  4002 000033D6 46                  <1> ten7:	inc esi
  4003 000033D7 81F980969800        <1> 	cmp ecx, 10000000
  4004 000033DD 720A                <1> 	jb ten6
  4005 000033DF 81E980969800        <1> 	sub ecx, 10000000
  4006 000033E5 FE06                <1> 	inc byte [esi]
  4007 000033E7 EBC0                <1> 	jmp cnvrt
  4008 000033E9 46                  <1> ten6:	inc esi
  4009 000033EA 81F940420F00        <1> 	cmp ecx, 1000000
  4010 000033F0 720A                <1> 	jb ten5
  4011 000033F2 81E940420F00        <1> 	sub ecx, 1000000
  4012 000033F8 FE06                <1> 	inc byte [esi]
  4013 000033FA EBAD                <1> 	jmp cnvrt
  4014 000033FC 46                  <1> ten5:	inc esi
  4015 000033FD 81F9A0860100        <1> 	cmp ecx, 100000
  4016 00003403 720A                <1> 	jb ten4
  4017 00003405 81E9A0860100        <1> 	sub ecx, 100000
  4018 0000340B FE06                <1> 	inc byte [esi]
  4019 0000340D EB9A                <1> 	jmp cnvrt
  4020 0000340F 46                  <1> ten4:	inc esi
  4021 00003410 81F910270000        <1> 	cmp ecx, 10000
  4022 00003416 720A                <1> 	jb ten3
  4023 00003418 81E910270000        <1> 	sub ecx, 10000
  4024 0000341E FE06                <1> 	inc byte [esi]
  4025 00003420 EB87                <1> 	jmp cnvrt
  4026 00003422 46                  <1> ten3:	inc esi
  4027 00003423 81F9E8030000        <1> 	cmp ecx, 1000
  4028 00003429 720D                <1> 	jb ten2
  4029 0000342B 81E9E8030000        <1> 	sub ecx, 1000
  4030 00003431 FE06                <1> 	inc byte [esi]
  4031 00003433 E971FFFFFF          <1> 	jmp cnvrt
  4032 00003438 46                  <1> ten2:	inc esi
  4033 00003439 81F964000000        <1> 	cmp ecx, 100
  4034 0000343F 720D                <1> 	jb ten1
  4035 00003441 81E964000000        <1> 	sub ecx, 100
  4036 00003447 FE06                <1> 	inc byte [esi]
  4037 00003449 E95BFFFFFF          <1> 	jmp cnvrt
  4038 0000344E 46                  <1> ten1:	inc esi
  4039 0000344F 81F90A000000        <1> 	cmp ecx, 10
  4040 00003455 720D                <1> 	jb ten0
  4041 00003457 81E90A000000        <1> 	sub ecx, 10
  4042 0000345D FE06                <1> 	inc byte [esi]
  4043 0000345F E945FFFFFF          <1> 	jmp cnvrt
  4044 00003464 46                  <1> ten0:	inc esi
  4045 00003465 81F901000000        <1> 	cmp ecx, 1
  4046 0000346B 720D                <1> 	jb tendn
  4047 0000346D 81E901000000        <1> 	sub ecx, 1
  4048 00003473 FE06                <1> 	inc byte [esi]
  4049 00003475 E92FFFFFFF          <1> 	jmp cnvrt
  4050                              <1> tendn:
  4051 0000347A C3                  <1> 	ret
  4052                              <1> 
  4053                              <1> 	
  4054                              <1> 
  4055 0000347B 00<rept>            <1> hexnumber times 8 db 0
  4056 00003483 202000              <1> hexnumberend db "  ",0
  4057                              <1> 
  4058                              <1> 
  4059 00003486 00000000            <1> sibuf dw 0,0
  4060 0000348A 00000000            <1> dibuf dw 0,0
  4061                              <1> 
  4062                              <1> converthex:
  4063                              <1> clearbufferhex:
  4064 0000348E B030                <1> 	mov al, '0'
  4065 00003490 8935[86340000]      <1> 	mov [sibuf], esi
  4066 00003496 893D[8A340000]      <1> 	mov [dibuf], edi
  4067 0000349C 39FE                <1> clearbufhex: cmp esi, edi
  4068 0000349E 7305                <1> 	jae doneclearbuffhex
  4069 000034A0 8806                <1> 	mov [esi], al
  4070 000034A2 46                  <1> 	inc esi
  4071 000034A3 EBF7                <1> 	jmp clearbufhex
  4072                              <1> doneclearbuffhex:
  4073 000034A5 8B35[8A340000]      <1> 	mov esi, [dibuf]
  4074 000034AB 89CA                <1> 	mov edx, ecx
  4075 000034AD 81FA00000000        <1> 	cmp edx, 0
  4076 000034B3 741F                <1> 	je donenxtephx
  4077                              <1> nxtexphx:	;0x10^x
  4078 000034B5 4E                  <1> 	dec esi
  4079 000034B6 89F7                <1> 	mov edi, esi		;;location of 0x10^x
  4080 000034B8 89D1                <1> 	mov ecx, edx
  4081 000034BA 81E10F000000        <1> 	and ecx, 0xF		;;just this digit
  4082 000034C0 E81C000000          <1> 	call cnvrtexphx		;;get this digit
  4083 000034C5 89FE                <1> 	mov esi, edi
  4084 000034C7 C1EA04              <1> 	shr edx, 4		;;next digit
  4085 000034CA 81FA00000000        <1> 	cmp edx, 0
  4086 000034D0 7402                <1> 	je donenxtephx
  4087 000034D2 EBE1                <1> 	jmp nxtexphx
  4088                              <1> donenxtephx:
  4089 000034D4 8B35[86340000]      <1> 	mov esi, [sibuf]
  4090 000034DA 8B3D[8A340000]      <1> 	mov edi, [dibuf]
  4091 000034E0 C3                  <1> 	ret
  4092                              <1> cnvrtexphx:			;;convert this number
  4093 000034E1 89F3                <1> 	mov ebx, esi		;place to convert to must be in si, number to convert must be in cx
  4094 000034E3 81F900000000        <1> 	cmp ecx, 0
  4095 000034E9 7429                <1> 	je zerohx
  4096 000034EB 8A06                <1> cnvrthx:  mov al, [esi]
  4097 000034ED 3C39                <1> 	cmp al, '9'
  4098 000034EF 741B                <1> 	je lettershx
  4099 000034F1 3C46                <1> lttrhxdn: cmp al, 'F'
  4100 000034F3 741F                <1> 	je zerohx
  4101 000034F5 8A06                <1> 	mov al, [esi]
  4102 000034F7 FEC0                <1> 	inc al
  4103 000034F9 8806                <1> 	mov [esi], al
  4104 000034FB 89DE                <1> 	mov esi, ebx
  4105 000034FD 81E901000000        <1> cnvrtlphx: sub ecx, 1
  4106 00003503 81F900000000        <1> 	cmp ecx, 0
  4107 00003509 75E0                <1> 	jne cnvrthx
  4108 0000350B C3                  <1> 	ret
  4109                              <1> lettershx:
  4110 0000350C B041                <1> 	mov al, 'A'
  4111 0000350E 2C01                <1> 	sub al, 1
  4112 00003510 8806                <1> 	mov [esi], al
  4113 00003512 EBDD                <1> 	jmp lttrhxdn
  4114 00003514 B030                <1> zerohx:	mov al, '0'
  4115 00003516 8806                <1> 	mov [esi], al
  4116 00003518 4E                  <1> 	dec esi
  4117 00003519 8A06                <1> 	mov al, [esi]
  4118 0000351B 3C46                <1> 	cmp al, 'F'
  4119 0000351D 74F5                <1> 	je zerohx
  4120 0000351F 41                  <1> 	inc ecx
  4121 00003520 EBDB                <1> 	jmp cnvrtlphx
  4122 00003522 00                  <1> smallhex db 0
  4123 00003523 01                  <1> firsthexshown db 1
  4124                              <1> showhexsmall:
  4125 00003524 C605[22350000]01    <1> 	mov byte [smallhex], 1
  4126 0000352B E808000000          <1> 	call showhex
  4127 00003530 C605[22350000]00    <1> 	mov byte [smallhex], 0
  4128 00003537 C3                  <1> 	ret
  4129                              <1> showhex:
  4130 00003538 60                  <1> 	pusha
  4131 00003539 BE[7B340000]        <1> 	mov esi, hexnumber
  4132 0000353E BF[83340000]        <1> 	mov edi, hexnumberend
  4133 00003543 E846FFFFFF          <1> 	call converthex
  4134 00003548 803D[23350000]01    <1> 	cmp byte [firsthexshown], 1
  4135 0000354F 7503                <1> 	jne showthathex
  4136 00003551 6631D2              <1> 	xor dx, dx
  4137                              <1> showthathex:
  4138 00003554 803D[23350000]03    <1> 	cmp byte [firsthexshown], 3
  4139 0000355B 750A                <1> 	jne nonewhexline
  4140 0000355D BE[40730000]        <1> 	mov esi, line
  4141 00003562 E85FF4FFFF          <1> 	call print
  4142                              <1> nonewhexline:
  4143 00003567 803D[23350000]04    <1> 	cmp byte [firsthexshown], 4
  4144 0000356E 7527                <1> 	jne notabfixhex
  4145 00003570 B1A0                <1> 	mov cl, 160
  4146 00003572 28D1                <1> 	sub cl, dl
  4147 00003574 C0E905              <1> 	shr cl, 5
  4148 00003577 C0E105              <1> 	shl cl, 5
  4149 0000357A 80F900              <1> 	cmp cl, 0
  4150 0000357D 750F                <1> 	jne nonewlinetabfixhex
  4151 0000357F BE[40730000]        <1> 	mov esi, line
  4152 00003584 E83DF4FFFF          <1> 	call print
  4153 00003589 E909000000          <1> 	jmp notabfixhex
  4154                              <1> nonewlinetabfixhex:
  4155 0000358E 80C20F              <1> 	add dl, 15
  4156 00003591 C0EA04              <1> 	shr dl, 4
  4157 00003594 C0E204              <1> 	shl dl, 4
  4158                              <1> notabfixhex:
  4159 00003597 BE[7B340000]        <1> 	mov esi, hexnumber
  4160 0000359C 803D[22350000]01    <1> 	cmp byte [smallhex],1
  4161 000035A3 7506                <1> 	jne printnosmallhex
  4162 000035A5 81C606000000        <1> 	add esi, 6
  4163                              <1> printnosmallhex:
  4164 000035AB E816F4FFFF          <1> 	call print
  4165 000035B0 803D[23350000]02    <1> 	cmp byte [firsthexshown], 2
  4166 000035B7 750A                <1> 	jne hexshown
  4167 000035B9 BE[40730000]        <1> 	mov esi, line
  4168 000035BE E803F4FFFF          <1> 	call print
  4169                              <1> hexshown:
  4170 000035C3 C605[23350000]00    <1> 	mov byte [firsthexshown], 0
  4171 000035CA 61                  <1> 	popa
  4172 000035CB C3                  <1> 	ret
  4173                              <1> 
  4174                              <1> 
  4175 000035CC 303030303030303030- <1> decnumber db "00000000000000"
  4176 000035D5 3030303030          <1>
  4177 000035DA 2000                <1> decnumberend: db " ",0
  4178                              <1> 
  4179                              <1> showdec: ;;same as showhex, just uses decimal conversion
  4180 000035DC 60                  <1> 	pusha
  4181 000035DD BF[CC350000]        <1> 	mov edi, decnumber
  4182 000035E2 BE[DA350000]        <1> 	mov esi, decnumberend
  4183                              <1> cleardecbuf:
  4184 000035E7 C60730              <1> 	mov byte [edi], '0'
  4185 000035EA 47                  <1> 	inc edi
  4186 000035EB 39F7                <1> 	cmp edi, esi
  4187 000035ED 72F8                <1> 	jb cleardecbuf
  4188 000035EF BF[CC350000]        <1> 	mov edi, decnumber
  4189 000035F4 E8ADFDFFFF          <1> 	call convert
  4190 000035F9 803D[23350000]01    <1> 	cmp byte [firsthexshown], 1
  4191 00003600 7503                <1> 	jne showthatdec
  4192 00003602 6631D2              <1> 	xor dx, dx
  4193                              <1> showthatdec:
  4194 00003605 803D[23350000]03    <1> 	cmp byte [firsthexshown], 3
  4195 0000360C 750A                <1> 	jne nonewdecline
  4196 0000360E BE[40730000]        <1> 	mov esi, line
  4197 00003613 E8AEF3FFFF          <1> 	call print
  4198                              <1> nonewdecline:
  4199 00003618 803D[23350000]04    <1> 	cmp byte [firsthexshown], 4
  4200 0000361F 7527                <1> 	jne notabfixdec
  4201 00003621 B1A0                <1> 	mov cl, 160
  4202 00003623 28D1                <1> 	sub cl, dl
  4203 00003625 C0E905              <1> 	shr cl, 5
  4204 00003628 C0E105              <1> 	shl cl, 5
  4205 0000362B 80F900              <1> 	cmp cl, 0
  4206 0000362E 750F                <1> 	jne nonewlinetabfixdec
  4207 00003630 BE[40730000]        <1> 	mov esi, line
  4208 00003635 E88CF3FFFF          <1> 	call print
  4209 0000363A E909000000          <1> 	jmp notabfixdec
  4210                              <1> nonewlinetabfixdec:
  4211 0000363F 80C20F              <1> 	add dl, 15
  4212 00003642 C0EA04              <1> 	shr dl, 4
  4213 00003645 C0E204              <1> 	shl dl, 4
  4214                              <1> notabfixdec:
  4215 00003648 BE[CC350000]        <1> 	mov esi, decnumber
  4216 0000364D 4E                  <1> 	dec esi
  4217                              <1> sifind:
  4218 0000364E 46                  <1> 	inc esi
  4219 0000364F 803E30              <1> 	cmp byte [esi], '0'
  4220 00003652 74FA                <1> 	je sifind
  4221 00003654 E86DF3FFFF          <1> 	call print
  4222 00003659 803D[23350000]02    <1> 	cmp byte [firsthexshown], 2
  4223 00003660 750A                <1> 	jne decshown
  4224 00003662 BE[40730000]        <1> 	mov esi, line
  4225 00003667 E85AF3FFFF          <1> 	call print
  4226                              <1> decshown:
  4227 0000366C C605[23350000]00    <1> 	mov byte [firsthexshown], 0
  4228 00003673 61                  <1> 	popa
  4229 00003674 C3                  <1> 	ret
  4230                              <1> 	
  4231                              <1> cnvrttxt: 
  4232 00003675 31C9                <1> 	xor ecx, ecx
  4233 00003677 31C0                <1> 	xor eax, eax
  4234 00003679 31D2                <1> 	xor edx, edx
  4235 0000367B 31DB                <1> 	xor ebx, ebx
  4236 0000367D 4E                  <1> 	dec esi
  4237                              <1> cnvrtlptxt:
  4238 0000367E 46                  <1> 	inc esi
  4239 0000367F 8A06                <1> 	mov al, [esi]
  4240 00003681 3C00                <1> 	cmp al, 0
  4241 00003683 75F9                <1> 	jne cnvrtlptxt
  4242 00003685 4E                  <1> 	dec esi
  4243 00003686 8A06                <1> 	mov al, [esi]
  4244 00003688 3C2E                <1> 	cmp al, '.'
  4245 0000368A 7503                <1> 	jne nocnvrtdot
  4246 0000368C 46                  <1> 	inc esi
  4247 0000368D EBEF                <1> 	jmp cnvrtlptxt
  4248                              <1> nocnvrtdot:
  4249 0000368F 3C20                <1> 	cmp al, ' '
  4250 00003691 7404                <1> 	je zerotest
  4251 00003693 3C30                <1> 	cmp al, '0'
  4252 00003695 7504                <1> 	jne txtlp
  4253                              <1> zerotest: 
  4254 00003697 39FE                <1> 		cmp esi, edi
  4255 00003699 7458                <1> 		je donecnvrt
  4256                              <1> txtlp:	
  4257 0000369B 31C0                <1> 	xor eax, eax
  4258 0000369D 8A06                <1> 	mov al, [esi]
  4259 0000369F 3C3D                <1> 	cmp al, '='
  4260 000036A1 7450                <1> 	je donecnvrt
  4261 000036A3 3C30                <1> 	cmp al, 48
  4262 000036A5 724C                <1> 	jb donecnvrt
  4263 000036A7 3C23                <1> 	cmp al, '#'
  4264 000036A9 7448                <1> 	je donecnvrt
  4265 000036AB 39FE                <1> 	cmp esi, edi
  4266 000036AD 7244                <1> 	jb donecnvrt
  4267 000036AF 81F900000000        <1> 	cmp ecx, 0
  4268 000036B5 7708                <1> 	ja exp
  4269 000036B7 2C30                <1> noexp:	sub al, 48
  4270 000036B9 01C2                <1> 	add edx, eax
  4271 000036BB 4E                  <1> 	dec esi
  4272 000036BC 41                  <1> 	inc ecx
  4273 000036BD EBDC                <1> 	jmp txtlp
  4274 000036BF 81F900000000        <1> exp:	cmp ecx, 0
  4275 000036C5 74F0                <1> 	je noexp
  4276 000036C7 2C30                <1> 	sub al, 48
  4277 000036C9 51                  <1> 	push ecx
  4278 000036CA 89C3                <1> expmul:	mov ebx, eax
  4279 000036CC 01D8                <1> 	add eax, ebx
  4280 000036CE 01D8                <1> 	add eax, ebx
  4281 000036D0 01D8                <1> 	add eax, ebx
  4282 000036D2 01D8                <1> 	add eax, ebx
  4283 000036D4 01D8                <1> 	add eax, ebx
  4284 000036D6 01D8                <1> 	add eax, ebx
  4285 000036D8 01D8                <1> 	add eax, ebx
  4286 000036DA 01D8                <1> 	add eax, ebx
  4287 000036DC 01D8                <1> 	add eax, ebx
  4288 000036DE 81E901000000        <1> 	sub ecx, 1
  4289 000036E4 81F900000000        <1> 	cmp ecx, 0
  4290 000036EA 77DE                <1> 	ja expmul
  4291 000036EC 01C2                <1> 	add edx, eax
  4292 000036EE 59                  <1> 	pop ecx
  4293 000036EF 4E                  <1> 	dec esi
  4294 000036F0 41                  <1> 	inc ecx
  4295 000036F1 EBA8                <1> 	jmp txtlp
  4296 000036F3 89D1                <1> donecnvrt: mov ecx, edx
  4297 000036F5 C3                  <1> 	ret
  4298                                      %include 'source/builtinprogs.asm'
  4299 000036F6 050406040704        <1> filetypes db 5,4,6,4,7,4
  4300                              <1> progstart:		;programs start here
  4301                              <1> ;db 5,4,"index",0
  4302                              <1> ;	call indexfiles
  4303                              <1> ;	jmp nwcmd
  4304                              <1> 
  4305                              <1> 
  4306                              <1> indexfiles:
  4307 000036FC BE[FC360000]        <1> 	mov esi, progstart
  4308 00003701 BB[00130000]        <1> 	mov ebx, fileindex
  4309 00003706 BF[FC360000]        <1> 	mov edi, progstart
  4310 0000370B 81EF02000000        <1> 	sub edi, 2
  4311                              <1> indexloop:
  4312 00003711 668B0E              <1> 	mov cx, [esi]
  4313                              <1> 	indexloop2:
  4314 00003714 663B0F              <1> 		cmp cx, [edi]
  4315 00003717 7424                <1> 		je indexloop2done
  4316 00003719 81EF02000000        <1> 		sub edi, 2
  4317 0000371F 81FF[F6360000]      <1> 		cmp edi, filetypes
  4318 00003725 73ED                <1> 		jae indexloop2
  4319 00003727 BF[FC360000]        <1> 	mov edi, progstart
  4320 0000372C 81EF02000000        <1> 	sub edi, 2
  4321 00003732 46                  <1> 	inc esi
  4322 00003733 81FE[B0470000]      <1> 	cmp esi, batchprogend
  4323 00003739 734E                <1> 	jae indexloopdone
  4324 0000373B EBD4                <1> 	jmp indexloop
  4325                              <1> indexloop2done:
  4326 0000373D 66890B              <1> 	mov [ebx], cx
  4327 00003740 81C302000000        <1> 	add ebx, 2
  4328 00003746 81C602000000        <1> 	add esi, 2
  4329                              <1> 	nameindex:
  4330 0000374C 8A0E                <1> 		mov cl, [esi]
  4331 0000374E 80F900              <1> 		cmp cl, 0
  4332 00003751 7406                <1> 		je nameindexdone
  4333 00003753 880B                <1> 		mov [ebx], cl
  4334 00003755 46                  <1> 		inc esi
  4335 00003756 43                  <1> 		inc ebx
  4336 00003757 EBF3                <1> 		jmp nameindex
  4337                              <1> 	nameindexdone:
  4338 00003759 43                  <1> 		inc ebx
  4339 0000375A 66C7030000          <1> 		mov word [ebx], 0
  4340 0000375F 81C302000000        <1> 		add ebx, 2
  4341 00003765 46                  <1> 		inc esi
  4342 00003766 8933                <1> 		mov [ebx], esi
  4343 00003768 81C304000000        <1> 		add ebx, 4
  4344 0000376E 66C7030000          <1> 		mov word [ebx], 0
  4345 00003773 81C302000000        <1> 		add ebx, 2
  4346 00003779 81FB[00150000]      <1> 		cmp ebx, fileindexend
  4347 0000377F 7308                <1> 		jae indexloopdone
  4348 00003781 81C601000000        <1> 		add esi, 1
  4349 00003787 EB88                <1> 		jmp indexloop
  4350 00003789 C605[91370000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4351 00003790 C3                  <1> 		ret
  4352                              <1> 
  4353 00003791 00                  <1> indexdone db 0
  4354                              <1> 
  4355                              <1> 
  4356                              <1> ;db 5,4,"showindex",0
  4357                              <1> ;	mov esi, fileindex
  4358                              <1> ;	mov ebx, fileindexend
  4359                              <1> ;	mov cl, 5
  4360                              <1> ;	mov ch, 4
  4361                              <1> ;	call array
  4362                              <1> ;	mov esi, fileindex
  4363                              <1> ;	mov ebx, fileindexend
  4364                              <1> ;	mov cl, 6
  4365                              <1> ;	mov ch, 4
  4366                              <1> ;	call array
  4367                              <1> ;	mov esi, fileindex
  4368                              <1> ;	mov ebx, fileindexend
  4369                              <1> ;	mov cl, 7
  4370                              <1> ;	mov ch, 4
  4371                              <1> ;	call array
  4372                              <1> ;	jmp nwcmd
  4373                              <1> 
  4374 00003792 0504736875736800    <1> db 5,4,"shush",0
  4375 0000379A BE[CA720000]        <1> 	mov esi, shushmsg
  4376 0000379F E822F2FFFF          <1> 	call print
  4377 000037A4 E974F8FFFF          <1> 	jmp shush
  4378                              <1> 
  4379 000037A9 05046C7300          <1> db 5,4,"ls",0
  4380 000037AE BE[FC360000]        <1> 	lscmd:	mov esi, progstart
  4381 000037B3 BB[B0470000]        <1> 		mov ebx, progend
  4382 000037B8 E9C7FAFFFF          <1> 		jmp dir
  4383                              <1> 		
  4384 000037BD 05046469736B00      <1> db 5,4,"disk",0
  4385 000037C4 31C9                <1> 		xor ecx, ecx
  4386 000037C6 8A0D[81010000]      <1> 		mov cl, [DriveNumber]
  4387 000037CC C605[23350000]00    <1> 		mov byte [firsthexshown], 0
  4388 000037D3 E860FDFFFF          <1> 		call showhex
  4389 000037D8 BE[40730000]        <1> 		mov esi, line
  4390 000037DD E8E4F1FFFF          <1> 		call print
  4391 000037E2 BE[13720000]        <1> 		mov esi, diskfileindex
  4392                              <1> 	diskindexdir:
  4393 000037E7 E8DAF1FFFF          <1> 		call print
  4394 000037EC 56                  <1> 		push esi
  4395 000037ED BE[1A380000]        <1> 		mov esi, disktab
  4396 000037F2 E8CFF1FFFF          <1> 		call print
  4397 000037F7 5E                  <1> 		pop esi
  4398 000037F8 8B4E05              <1> 		mov ecx, [esi + 5]
  4399 000037FB C605[23350000]02    <1> 		mov byte [firsthexshown], 2
  4400 00003802 E8D5FDFFFF          <1> 		call showdec
  4401 00003807 81C609000000        <1> 		add esi, 9
  4402 0000380D 81FE[CA720000]      <1> 		cmp esi, enddiskfileindex
  4403 00003813 72D2                <1> 		jb diskindexdir
  4404 00003815 E903F8FFFF          <1> 		jmp nwcmd
  4405                              <1> 		
  4406 0000381A 0D09090900          <1> 		disktab db 13,9,9,9,0
  4407                              <1> 
  4408 0000381F 0504636C65617200    <1> db 5,4,"clear",0
  4409 00003827 E8B7F4FFFF          <1> 	cls:	call clear
  4410 0000382C E9ECF7FFFF          <1> 		jmp nwcmd
  4411                              <1> 		
  4412 00003831 05047761697400      <1> db 5,4,"wait",0
  4413 00003838 30C0                <1> 		xor al, al
  4414 0000383A E835F1FFFF          <1> 		call int302
  4415 0000383F E9D9F7FFFF          <1> 		jmp nwcmd
  4416                              <1> 
  4417 00003844 05046563686F00      <1> db 5,4,"echo",0
  4418 0000384B BE[7A1B0000]        <1> 	echo:	mov esi, buftxt
  4419 00003850 81C605000000        <1> 		add esi, 5
  4420 00003856 8A06                <1> 		mov al, [esi]
  4421                              <1> 		;cmp al, '$'
  4422                              <1> 		;je echovr		;;now unnecessary
  4423 00003858 E869F1FFFF          <1> 		call print
  4424 0000385D BE[40730000]        <1> 		mov esi, line
  4425 00003862 E85FF1FFFF          <1> 		call print
  4426 00003867 E9B1F7FFFF          <1> 		jmp nwcmd
  4427 0000386C BB[6F150000]        <1> 	echovr:	mov ebx, variables
  4428 00003871 BF06000000          <1> 		mov edi, 6
  4429 00003876 E83A000000          <1> 		call nxtvrech
  4430 0000387B E952000000          <1> 		jmp prntvr2
  4431 00003880 B13D                <1> 	echvar:	mov cl, '='
  4432 00003882 43                  <1> 		inc ebx
  4433 00003883 8A03                <1> 		mov al, [ebx]
  4434 00003885 3C00                <1> 		cmp al, 0
  4435 00003887 742C                <1> 		je nxtvrech
  4436 00003889 3C3D                <1> 		cmp al, '='
  4437 0000388B 7420                <1> 		je nxtvrechb1
  4438 0000388D BE[7A1B0000]        <1> 		mov esi, buftxt
  4439 00003892 01FE                <1> 		add esi, edi
  4440 00003894 E8CBF9FFFF          <1> 		call cndtest
  4441 00003899 3C02                <1> 		cmp al, 2
  4442 0000389B 7431                <1> 		je prntvr
  4443 0000389D 3C01                <1> 		cmp al, 1
  4444 0000389F 742D                <1> 		je prntvr
  4445 000038A1 BE[7A1B0000]        <1> 		mov esi, buftxt
  4446 000038A6 01FE                <1> 		add esi, edi
  4447 000038A8 E908000000          <1> 		jmp nxtvrech
  4448                              <1> 	nxtvrechb1:
  4449 000038AD 81EB02000000        <1> 		sub ebx, 2
  4450 000038B3 EBCB                <1> 		jmp echvar
  4451 000038B5 8A03                <1> 	nxtvrech: mov al, [ebx]
  4452 000038B7 3C05                <1> 		cmp al, 5
  4453 000038B9 740A                <1> 		je nxtvrec2
  4454 000038BB 43                  <1> 		inc ebx
  4455 000038BC 81FB[6F1A0000]      <1> 		cmp ebx, varend
  4456 000038C2 72F1                <1> 		jb nxtvrech
  4457 000038C4 C3                  <1> 		ret
  4458 000038C5 43                  <1> 	nxtvrec2: inc ebx
  4459 000038C6 8A03                <1> 		mov al, [ebx]
  4460 000038C8 3C04                <1> 		cmp al, 4
  4461 000038CA 74B4                <1> 		je echvar
  4462 000038CC EBE7                <1> 		jmp nxtvrech
  4463 000038CE 43                  <1> 	prntvr: inc ebx
  4464 000038CF 89DE                <1> 		mov esi, ebx
  4465 000038D1 C3                  <1> 		ret
  4466 000038D2 E8EFF0FFFF          <1> 	prntvr2: call print
  4467 000038D7 BE[40730000]        <1> 		mov esi, line
  4468 000038DC E8E5F0FFFF          <1> 		call print
  4469 000038E1 E937F7FFFF          <1> 		jmp nwcmd
  4470                              <1> 		
  4471                              <1> 
  4472 000038E6 05042300            <1> db 5,4,"#",0
  4473                              <1> 	num:	
  4474 000038EA E8A2FAFFFF          <1> 		call clearbuffer
  4475 000038EF C605[6C3B0000]00    <1> 		mov byte [decimal], 0
  4476 000038F6 C605[6D3B0000]00    <1> 		mov byte [decimal2], 0
  4477 000038FD BE[7A1B0000]        <1> 		mov esi, buftxt
  4478 00003902 31C0                <1> 		xor eax, eax
  4479 00003904 31C9                <1> 		xor ecx, ecx
  4480 00003906 31DB                <1> 		xor ebx, ebx
  4481 00003908 8A06                <1> 	num2:	mov al, [esi]
  4482 0000390A 3C2B                <1> 		cmp al, '+'
  4483 0000390C 741B                <1> 		je operatorfound
  4484 0000390E 3C2D                <1> 		cmp al, '-'
  4485 00003910 7417                <1> 		je operatorfound
  4486 00003912 3C2A                <1> 		cmp al, '*'
  4487 00003914 7413                <1> 		je operatorfound
  4488 00003916 3C2F                <1> 		cmp al, '/'
  4489 00003918 740F                <1> 		je operatorfound
  4490 0000391A 3C5E                <1> 		cmp al, '^'
  4491 0000391C 740B                <1> 		je operatorfound
  4492 0000391E 46                  <1> 		inc esi
  4493 0000391F 3C00                <1> 		cmp al, 0
  4494 00003921 0F84F6F6FFFF        <1> 		je near nwcmd
  4495 00003927 EBDF                <1> 		jmp num2
  4496 00003929 50                  <1> 	operatorfound: push eax
  4497 0000392A 30E4                <1> 		xor ah, ah
  4498 0000392C 8826                <1> 		mov [esi], ah
  4499 0000392E 89F7                <1> 		mov edi, esi
  4500 00003930 46                  <1> 		inc esi
  4501 00003931 8A06                <1> 		mov al, [esi]
  4502                              <1> 		;cmp al, '$'
  4503                              <1> 		;je near varnum1	;;unnecessary
  4504 00003933 3C25                <1> 		cmp al, '%'
  4505 00003935 0F8461000000        <1> 		je near resultnum1
  4506                              <1> 	varnum2: 
  4507 0000393B 57                  <1> 		push edi
  4508 0000393C E8A3000000          <1> 		call checkdecimal
  4509 00003941 5F                  <1> 		pop edi
  4510 00003942 E82EFDFFFF          <1> 		call cnvrttxt
  4511                              <1> 	vrnm2:
  4512 00003947 89CB                <1> 		mov ebx, ecx
  4513 00003949 53                  <1> 		push ebx
  4514 0000394A E842FAFFFF          <1> 		call clearbuffer
  4515 0000394F BE[7A1B0000]        <1> 		mov esi, buftxt
  4516 00003954 89F7                <1> 		mov edi, esi
  4517 00003956 46                  <1> 		inc esi
  4518 00003957 8A06                <1> 		mov al, [esi]
  4519                              <1> 		;cmp al, '$'
  4520                              <1> 		;je near varnum3	;;unnecessary
  4521 00003959 3C25                <1> 		cmp al, '%'
  4522 0000395B 0F844F000000        <1> 		je near resultnum2
  4523                              <1> 	varnum4: 
  4524 00003961 57                  <1> 		push edi
  4525 00003962 E869000000          <1> 		call checkdecimal2
  4526 00003967 5F                  <1> 		pop edi
  4527 00003968 E808FDFFFF          <1> 		call cnvrttxt
  4528                              <1> 	vrnm4:
  4529 0000396D 5B                  <1> 		pop ebx
  4530 0000396E 58                  <1> 		pop eax
  4531 0000396F 3C2B                <1> 		cmp al, '+'
  4532 00003971 0F849B000000        <1> 		je near plusnum
  4533 00003977 3C2D                <1> 		cmp al, '-'
  4534 00003979 0F849F000000        <1> 		je near subnum
  4535 0000397F 3C2A                <1> 		cmp al, '*'
  4536 00003981 0F84A3000000        <1> 		je near mulnum
  4537 00003987 3C2F                <1> 		cmp al, '/'
  4538 00003989 0F84B1000000        <1> 		je near divnum
  4539 0000398F 3C5E                <1> 		cmp al, '^'
  4540 00003991 0F84CC000000        <1> 		je near expnum
  4541 00003997 E981F6FFFF          <1> 		jmp nwcmd
  4542                              <1> 	resultnum1:
  4543 0000399C 8A0D[6E3B0000]      <1> 		mov cl, [decimalresult]
  4544 000039A2 880D[6C3B0000]      <1> 		mov [decimal], cl
  4545 000039A8 8B0D[6F3B0000]      <1> 		mov ecx, [result]
  4546 000039AE EB97                <1> 		jmp vrnm2
  4547                              <1> 	resultnum2:
  4548 000039B0 8A0D[6C3B0000]      <1> 		mov cl, [decimal]
  4549 000039B6 880D[6D3B0000]      <1> 		mov [decimal2], cl
  4550 000039BC 8A0D[6E3B0000]      <1> 		mov cl, [decimalresult]
  4551 000039C2 880D[6C3B0000]      <1> 		mov [decimal], cl
  4552 000039C8 8B0D[6F3B0000]      <1> 		mov ecx, [result]
  4553 000039CE EB9D                <1> 		jmp vrnm4
  4554                              <1> ;	varnum1: sub esi, buftxt
  4555                              <1> ;		mov edi, esi
  4556                              <1> ;		add esi, buftxt
  4557                              <1> ;		inc edi
  4558                              <1> ;		mov ebx, variables
  4559                              <1> ;		call nxtvrech
  4560                              <1> ;		mov edi, esi
  4561                              <1> ;		dec edi
  4562                              <1> ;		jmp varnum2
  4563                              <1> ;	varnum3: sub esi, buftxt
  4564                              <1> ;		mov edi, esi
  4565                              <1> ;		add esi, buftxt
  4566                              <1> ;		inc edi
  4567                              <1> ;		mov ebx, variables
  4568                              <1> ;		call nxtvrech
  4569                              <1> ;		mov edi, esi
  4570                              <1> ;		dec edi
  4571                              <1> ;		jmp varnum4
  4572                              <1> 	checkdecimal2:
  4573 000039D0 8A25[6C3B0000]      <1> 		mov ah, [decimal]
  4574 000039D6 8825[6D3B0000]      <1> 		mov [decimal2], ah
  4575 000039DC 30E4                <1> 		xor ah, ah
  4576 000039DE 8825[6C3B0000]      <1> 		mov [decimal], ah
  4577                              <1> 	checkdecimal:
  4578 000039E4 89F7                <1> 		mov edi, esi
  4579                              <1> 	chkdec1:
  4580 000039E6 8A07                <1> 		mov al, [edi]
  4581 000039E8 3C2E                <1> 		cmp al, '.'
  4582 000039EA 0F840B000000        <1> 		je near fnddec
  4583 000039F0 3C00                <1> 		cmp al, 0
  4584 000039F2 0F8419000000        <1> 		je near nodecimal
  4585 000039F8 47                  <1> 		inc edi
  4586 000039F9 EBEB                <1> 		jmp chkdec1
  4587                              <1> 	fnddec:
  4588 000039FB 8A4701              <1> 		mov al, [edi + 1]
  4589 000039FE 8807                <1> 		mov [edi], al
  4590 00003A00 3C00                <1> 		cmp al, 0
  4591 00003A02 0F8409000000        <1> 		je near nodecimal
  4592 00003A08 FE05[6C3B0000]      <1> 		inc byte [decimal]
  4593 00003A0E 47                  <1> 		inc edi
  4594 00003A0F EBEA                <1> 		jmp fnddec
  4595                              <1> 	nodecimal:
  4596 00003A11 C3                  <1> 		ret
  4597                              <1> 	plusnum:
  4598 00003A12 E813010000          <1> 		call decaddfix
  4599 00003A17 01D9                <1> 		add ecx, ebx
  4600 00003A19 E988000000          <1> 		jmp retnum
  4601                              <1> 	subnum:
  4602 00003A1E E807010000          <1> 		call decaddfix
  4603 00003A23 29D9                <1> 		sub ecx, ebx
  4604 00003A25 E97C000000          <1> 		jmp retnum
  4605                              <1> 	mulnum:
  4606 00003A2A A0[6D3B0000]        <1> 		mov al, [decimal2]
  4607 00003A2F 0005[6C3B0000]      <1> 		add [decimal], al
  4608 00003A35 89C8                <1> 		mov eax, ecx
  4609 00003A37 F7E3                <1> 		mul ebx
  4610 00003A39 89C1                <1> 		mov ecx, eax
  4611 00003A3B E966000000          <1> 		jmp retnum
  4612                              <1> 	divnum:
  4613 00003A40 E8E5000000          <1> 		call decaddfix
  4614 00003A45 30C0                <1> 		xor al, al
  4615 00003A47 A2[6C3B0000]        <1> 		mov [decimal], al
  4616 00003A4C 6689C8              <1> 		mov ax, cx
  4617 00003A4F 80FB00              <1> 		cmp bl, 0
  4618 00003A52 0F844E000000        <1> 		je near retnum
  4619 00003A58 F6F3                <1> 		div bl
  4620 00003A5A 31C9                <1> 		xor ecx, ecx
  4621 00003A5C 88C1                <1> 		mov cl, al
  4622 00003A5E E943000000          <1> 		jmp retnum
  4623                              <1> 	expnum:
  4624 00003A63 8A15[6C3B0000]      <1> 		mov dl, [decimal]
  4625 00003A69 8815[6D3B0000]      <1> 		mov [decimal2], dl
  4626 00003A6F 31D2                <1> 		xor edx, edx
  4627 00003A71 89C8                <1> 		mov eax, ecx
  4628 00003A73 89D9                <1> 		mov ecx, ebx
  4629 00003A75 89C3                <1> 		mov ebx, eax
  4630 00003A77 81F900000000        <1> 		cmp ecx, 0
  4631 00003A7D 7422                <1> 		je noexpnum
  4632 00003A7F 49                  <1> 		dec ecx
  4633 00003A80 81F900000000        <1> 		cmp ecx, 0
  4634 00003A86 7412                <1> 		je noexpnumlp
  4635 00003A88 F7E3                <1> 	expnumlp: mul ebx
  4636 00003A8A 8A15[6D3B0000]      <1> 		mov dl, [decimal2]
  4637 00003A90 0015[6C3B0000]      <1> 		add [decimal], dl
  4638 00003A96 31D2                <1> 		xor edx, edx
  4639 00003A98 E2EE                <1> 		loop expnumlp
  4640                              <1> 	noexpnumlp:
  4641 00003A9A 89C1                <1> 		mov ecx, eax
  4642 00003A9C E905000000          <1> 		jmp retnum
  4643                              <1> 	noexpnum:
  4644 00003AA1 B901000000          <1> 		mov ecx, 1
  4645                              <1> 	retnum: 
  4646 00003AA6 BE[8E1D0000]        <1> 		mov esi, numbuf
  4647 00003AAB 890D[6F3B0000]      <1> 		mov [result], ecx
  4648 00003AB1 E8F0F8FFFF          <1> 		call convert
  4649 00003AB6 BE[8E1D0000]        <1> 		mov esi, numbuf
  4650 00003ABB 8A25[6C3B0000]      <1> 		mov ah, [decimal]
  4651 00003AC1 8825[6E3B0000]      <1> 		mov [decimalresult], ah
  4652 00003AC7 80FC00              <1> 		cmp ah, 0
  4653 00003ACA 0F8425000000        <1> 		je near noputdecimal
  4654                              <1> 	putdecimal:
  4655 00003AD0 4E                  <1> 		dec esi
  4656 00003AD1 FECC                <1> 		dec ah
  4657 00003AD3 80FC00              <1> 		cmp ah, 0
  4658 00003AD6 0F87F4FFFFFF        <1> 		ja near putdecimal
  4659 00003ADC 4E                  <1> 		dec esi
  4660 00003ADD 8A06                <1> 		mov al, [esi]
  4661 00003ADF C6062E              <1> 		mov byte [esi], '.'
  4662                              <1> 	decputloop:
  4663 00003AE2 4E                  <1> 		dec esi
  4664 00003AE3 8A26                <1> 		mov ah, [esi]
  4665 00003AE5 8806                <1> 		mov [esi], al
  4666 00003AE7 88E0                <1> 		mov al, ah
  4667 00003AE9 81FE[7A1D0000]      <1> 		cmp esi, buf2
  4668 00003AEF 0F87EDFFFFFF        <1> 		ja near decputloop
  4669                              <1> 	noputdecimal:
  4670 00003AF5 BE[7A1D0000]        <1> 		mov esi, buf2
  4671 00003AFA E809000000          <1> 		call chkadd
  4672 00003AFF E919F5FFFF          <1> 		jmp nwcmd
  4673 00003B04 00000000            <1> edxnumbuf dw 0,0
  4674 00003B08 8A06                <1> 	chkadd: mov al, [esi]
  4675 00003B0A 3C30                <1> 		cmp al, '0'
  4676 00003B0C 750C                <1> 		jne dnadd
  4677 00003B0E 46                  <1> 		inc esi
  4678 00003B0F 81FE[8E1D0000]      <1> 		cmp esi, numbuf
  4679 00003B15 7402                <1> 		je dnaddm1
  4680 00003B17 EBEF                <1> 		jmp chkadd
  4681 00003B19 4E                  <1> 	dnaddm1: dec esi
  4682 00003B1A E8A7EEFFFF          <1> 	dnadd:	call print
  4683 00003B1F BE[40730000]        <1> 		mov esi, line
  4684 00003B24 E89DEEFFFF          <1> 		call print
  4685 00003B29 C3                  <1> 		ret
  4686                              <1> 		
  4687                              <1> 	decaddfix:
  4688 00003B2A A0[6D3B0000]        <1> 		mov al, [decimal2]
  4689 00003B2F 8A25[6C3B0000]      <1> 		mov ah, [decimal]
  4690 00003B35 38E0                <1> 		cmp al, ah
  4691 00003B37 7432                <1> 		je gooddecadd
  4692 00003B39 38E0                <1> 		cmp al, ah
  4693 00003B3B 721A                <1> 		jb lowdecadd
  4694                              <1> 	highdecadd:
  4695 00003B3D FEC4                <1> 		inc ah
  4696 00003B3F 89CA                <1> 		mov edx, ecx
  4697 00003B41 C1E103              <1> 		shl ecx, 3
  4698 00003B44 01D1                <1> 		add ecx, edx
  4699 00003B46 01D1                <1> 		add ecx, edx
  4700 00003B48 38E0                <1> 		cmp al, ah
  4701 00003B4A 77F1                <1> 		ja highdecadd
  4702 00003B4C 8825[6C3B0000]      <1> 		mov [decimal], ah
  4703 00003B52 E914000000          <1> 		jmp gooddecadd
  4704                              <1> 	lowdecadd:
  4705 00003B57 FEC0                <1> 		inc al
  4706 00003B59 89DA                <1> 		mov edx, ebx
  4707 00003B5B C1E303              <1> 		shl ebx, 3
  4708 00003B5E 01D3                <1> 		add ebx, edx
  4709 00003B60 01D3                <1> 		add ebx, edx
  4710 00003B62 38E0                <1> 		cmp al, ah
  4711 00003B64 72F1                <1> 		jb lowdecadd
  4712 00003B66 A2[6C3B0000]        <1> 		mov [decimal], al
  4713                              <1> 	gooddecadd:
  4714 00003B6B C3                  <1> 		ret
  4715                              <1> 		
  4716 00003B6C 00                  <1> decimal db 0
  4717 00003B6D 00                  <1> decimal2 db 0
  4718 00003B6E 00                  <1> decimalresult db 0
  4719 00003B6F 00000000            <1> result db 0,0,0,0
  4720                              <1> 	
  4721 00003B73 05042500            <1> db 5,4,"%",0
  4722 00003B77 E815F8FFFF          <1> 	ans:	call clearbuffer
  4723 00003B7C 8B0D[6F3B0000]      <1> 		mov ecx, [result]
  4724 00003B82 BE[7A1D0000]        <1> 		mov esi, buf2
  4725 00003B87 E81AF8FFFF          <1> 		call convert
  4726 00003B8C BE[7A1D0000]        <1> 		mov esi, buf2
  4727 00003B91 E872FFFFFF          <1> 		call chkadd
  4728 00003B96 E982F4FFFF          <1> 		jmp nwcmd
  4729                              <1> 
  4730 00003B9B 05042400            <1> db 5,4,"$",0
  4731 00003B9F BE[7A1B0000]        <1> var: mov esi, buftxt
  4732 00003BA4 BB[6F150000]        <1> 	mov ebx, variables
  4733 00003BA9 8A06                <1> lkeq:	mov al, [esi]
  4734 00003BAB 3C3D                <1> 	cmp al, '='
  4735 00003BAD 741F                <1> 	je eqfnd	;is there an '=' sign?
  4736 00003BAF 3C00                <1> 	cmp al, 0
  4737 00003BB1 7403                <1> 	je echovars
  4738 00003BB3 46                  <1> 	inc esi
  4739 00003BB4 EBF3                <1> 	jmp lkeq
  4740 00003BB6 BE[6F150000]        <1> echovars: mov esi, variables
  4741 00003BBB BB[6F1A0000]        <1> 	mov ebx, varend
  4742 00003BC0 B105                <1> 	mov cl, 5
  4743 00003BC2 B504                <1> 	mov ch, 4
  4744 00003BC4 E867F7FFFF          <1> 	call array
  4745 00003BC9 E94FF4FFFF          <1> 	jmp nwcmd
  4746 00003BCE 46                  <1> eqfnd:	inc esi
  4747 00003BCF 8A06                <1> 	mov al, [esi]
  4748 00003BD1 3C00                <1> 	cmp al, 0
  4749 00003BD3 740F                <1> 	je readvar
  4750 00003BD5 BE[7A1B0000]        <1> 	mov esi, buftxt
  4751 00003BDA BB[6F150000]        <1> 	mov ebx, variables
  4752 00003BDF E923000000          <1> 	jmp seek
  4753                              <1> readvar:
  4754 00003BE4 B00D                <1> 	mov al, 13
  4755 00003BE6 66BB0700            <1> 	mov bx, 7
  4756 00003BEA C605[272A0000]00    <1> 	mov byte [commandedit], 0
  4757 00003BF1 BF[7A1D0000]        <1> 	mov edi, buftxtend
  4758 00003BF6 E839EEFFFF          <1> 	call int305
  4759 00003BFB BE[40730000]        <1> 	mov esi, line
  4760 00003C00 E8C1EDFFFF          <1> 	call print
  4761 00003C05 EB98                <1> 	jmp var
  4762 00003C07 668B03              <1> seek:	mov ax, [ebx]
  4763 00003C0A B105                <1> 	mov cl, 5
  4764 00003C0C B504                <1> 	mov ch, 4
  4765 00003C0E 663D0000            <1> 	cmp ax, 0
  4766 00003C12 0F8459000000        <1> 	je near save
  4767 00003C18 6639C8              <1> 	cmp ax, cx
  4768 00003C1B 7403                <1> 	je skfnd
  4769 00003C1D 43                  <1> 	inc ebx
  4770 00003C1E EBE7                <1> 	jmp seek
  4771 00003C20 BE[7A1B0000]        <1> skfnd:	mov esi, buftxt
  4772 00003C25 46                  <1> 	inc esi
  4773 00003C26 81C302000000        <1> 	add ebx, 2
  4774 00003C2C 89DF                <1> 	mov edi, ebx
  4775 00003C2E B13D                <1> 	mov cl, '='
  4776 00003C30 E82FF6FFFF          <1> 	call cndtest
  4777 00003C35 3C01                <1> 	cmp al, 1	
  4778 00003C37 7417                <1> 	je varfnd
  4779 00003C39 89FB                <1> 	mov ebx, edi
  4780 00003C3B BE[7A1B0000]        <1> 	mov esi, buftxt
  4781 00003C40 668B03              <1> 	mov ax, [ebx]
  4782 00003C43 663D0000            <1> 	cmp ax, 0
  4783 00003C47 0F8424000000        <1> 	je near save
  4784 00003C4D 43                  <1> 	inc ebx
  4785 00003C4E EBB7                <1> 	jmp seek
  4786 00003C50 8A03                <1> varfnd:	mov al, [ebx]
  4787 00003C52 3C04                <1> 	cmp al, 4
  4788 00003C54 7404                <1> 	je save2
  4789 00003C56 4B                  <1> 	dec ebx
  4790 00003C57 4E                  <1> 	dec esi
  4791 00003C58 EBF6                <1> 	jmp varfnd
  4792 00003C5A 4B                  <1> save2:	dec ebx
  4793 00003C5B 4E                  <1> 	dec esi
  4794 00003C5C 8A03                <1> 	mov al, [ebx]
  4795 00003C5E 3C05                <1> 	cmp al, 5
  4796 00003C60 7402                <1> 	je remove
  4797 00003C62 EBEC                <1> 	jmp varfnd
  4798 00003C64 8A03                <1> remove: mov al, [ebx]
  4799 00003C66 3C00                <1> 	cmp al, 0
  4800 00003C68 749D                <1> 	je seek
  4801 00003C6A 30C0                <1> 	xor al, al
  4802 00003C6C 8803                <1> 	mov [ebx], al
  4803 00003C6E 43                  <1> 	inc ebx
  4804 00003C6F EBF3                <1> 	jmp remove	;do not need for now-need defragmentation
  4805 00003C71 BE[7A1B0000]        <1> save:	mov esi, buftxt
  4806 00003C76 43                  <1> 	inc ebx
  4807 00003C77 B005                <1> 	mov al, 5
  4808 00003C79 B404                <1> 	mov ah, 4
  4809 00003C7B 668903              <1> 	mov [ebx], ax
  4810 00003C7E 43                  <1> 	inc ebx
  4811 00003C7F 43                  <1> svhere:	inc ebx
  4812 00003C80 46                  <1> 	inc esi
  4813 00003C81 8A06                <1> 	mov al, [esi]
  4814 00003C83 3C00                <1> 	cmp al, 0
  4815 00003C85 0F8442000000        <1> 	je near svdone
  4816 00003C8B 3C25                <1> 	cmp al, '%'
  4817 00003C8D 7404                <1> 	je ans2
  4818 00003C8F 8803                <1> 	mov [ebx], al	
  4819 00003C91 EBEC                <1> 	jmp svhere
  4820 00003C93 56                  <1> ans2:	push esi
  4821 00003C94 BE[7A1D0000]        <1> 	mov esi, buf2
  4822 00003C99 E823000000          <1> 	call ansfnd
  4823 00003C9E E803000000          <1> 	call anscp
  4824 00003CA3 5E                  <1> 	pop esi
  4825 00003CA4 EBD9                <1> 	jmp svhere
  4826 00003CA6 8A06                <1> anscp:	mov al, [esi]
  4827 00003CA8 8803                <1> 	mov [ebx], al
  4828 00003CAA 81FE[8E1D0000]      <1> 	cmp esi, numbuf
  4829 00003CB0 74CD                <1> 	je svhere
  4830 00003CB2 3C00                <1> 	cmp al, 0
  4831 00003CB4 74C9                <1> 	je svhere
  4832 00003CB6 43                  <1> 	inc ebx
  4833 00003CB7 46                  <1> 	inc esi
  4834 00003CB8 EBEC                <1> 	jmp anscp
  4835 00003CBA 5E                  <1> ansnf:	pop esi
  4836 00003CBB 8A06                <1> 	mov al, [esi]
  4837 00003CBD 8803                <1> 	mov [ebx], al
  4838 00003CBF EBBE                <1> 	jmp svhere
  4839 00003CC1 46                  <1> ansfnd:	inc esi
  4840 00003CC2 8A06                <1> 	mov al, [esi]
  4841 00003CC4 3C00                <1> 	cmp al, 0
  4842 00003CC6 74F2                <1> 	je ansnf
  4843 00003CC8 3C30                <1> 	cmp al, '0'
  4844 00003CCA 74F5                <1> 	je ansfnd
  4845 00003CCC C3                  <1> 	ret
  4846 00003CCD 30C0                <1> svdone:	xor al, al
  4847 00003CCF 8803                <1> 	mov [ebx], al
  4848 00003CD1 E947F3FFFF          <1> 	jmp nwcmd
  4849                              <1> 	
  4850 00003CD6 05046C6F676F757400  <1> 	db 5,4,"logout",0
  4851                              <1> logout:
  4852 00003CDF E915F2FFFF          <1> 	jmp os
  4853                              <1> 	
  4854 00003CE4 05047265626F6F7400  <1> 	db 5,4,"reboot",0
  4855                              <1> rebootcomp:
  4856 00003CED E960C5FFFF          <1> 	jmp coldboot
  4857                              <1> 
  4858 00003CF2 050473687574646F77- <1> 	db 5,4,"shutdown",0
  4859 00003CFB 6E00                <1>
  4860                              <1> shutdowncomp:
  4861 00003CFD E926C5FFFF          <1> 	jmp shutdown
  4862                              <1> 
  4863 00003D02 0504646F7300        <1> 	db 5,4,"dos",0
  4864                              <1> rundosprog:
  4865 00003D08 BF[7A1B0000]        <1> 	mov edi, buftxt
  4866 00003D0D 81C704000000        <1> 	add edi, 4
  4867 00003D13 BE00010000          <1> 	mov esi, 0x100
  4868 00003D18 E8A72C0000          <1> 	call loadfile
  4869 00003D1D 81FA94010000        <1> 	cmp edx, 404
  4870 00003D23 0F8480000000        <1> 	je near noprogfound
  4871 00003D29 BB80000000          <1> 	mov ebx, 0x80
  4872 00003D2E BF[7A1B0000]        <1> 	mov edi, buftxt
  4873 00003D33 81C704000000        <1> 	add edi, 4
  4874                              <1> finddosparams:
  4875 00003D39 8A07                <1> 	mov al, [edi]
  4876 00003D3B 47                  <1> 	inc edi
  4877 00003D3C 3C20                <1> 	cmp al, " "
  4878 00003D3E 75F9                <1> 	jne finddosparams
  4879                              <1> copydosparams:
  4880 00003D40 8A07                <1> 	mov al, [edi]
  4881 00003D42 8803                <1> 	mov [ebx], al
  4882 00003D44 43                  <1> 	inc ebx
  4883 00003D45 47                  <1> 	inc edi
  4884 00003D46 81FB00010000        <1> 	cmp ebx, 0x100
  4885 00003D4C 7304                <1> 	jae nomoredosparams
  4886 00003D4E 3C00                <1> 	cmp al, 0
  4887 00003D50 75EE                <1> 	jne copydosparams
  4888                              <1> nomoredosparams:
  4889 00003D52 BB00010000          <1> 	mov ebx, 0x100
  4890 00003D57 FFE3                <1> 	jmp ebx
  4891                              <1> 	
  4892 00003D59 05042E2F00          <1> 	db 5,4,"./",0
  4893                              <1> rundiskprog:
  4894 00003D5E BF[7A1B0000]        <1> 	mov edi, buftxt
  4895 00003D63 81C702000000        <1> 	add edi, 2
  4896 00003D69 BE00004000          <1> 	mov esi, 0x400000
  4897 00003D6E E8512C0000          <1> 	call loadfile
  4898 00003D73 81FA94010000        <1> 	cmp edx, 404
  4899 00003D79 742E                <1> 	je noprogfound
  4900 00003D7B BB00004000          <1> 	mov ebx, 0x400000
  4901 00003D80 66813B4558          <1> 	cmp word [ebx], "EX"
  4902 00003D85 754B                <1> 	jne progbatchfound
  4903 00003D87 81C302000000        <1> 	add ebx, 2
  4904 00003D8D BF[7A1B0000]        <1> 	mov edi, buftxt
  4905 00003D92 81C702000000        <1> 	add edi, 2
  4906                              <1> findspaceprog:
  4907 00003D98 8A07                <1> 	mov al, [edi]
  4908 00003D9A 47                  <1> 	inc edi
  4909 00003D9B 3C20                <1> 	cmp al, " "
  4910 00003D9D 75F9                <1> 	jne findspaceprog
  4911                              <1> findnonspaceprog:
  4912 00003D9F 8A07                <1> 	mov al, [edi]
  4913 00003DA1 47                  <1> 	inc edi
  4914 00003DA2 3C20                <1> 	cmp al, " "
  4915 00003DA4 74F9                <1> 	je findnonspaceprog
  4916 00003DA6 4F                  <1> 	dec edi
  4917 00003DA7 FFE3                <1> 	jmp ebx
  4918                              <1> noprogfound:
  4919 00003DA9 BE[07730000]        <1> 	mov esi, notfound1
  4920 00003DAE E813ECFFFF          <1> 	call print
  4921 00003DB3 BE[7A1B0000]        <1> 	mov esi, buftxt
  4922 00003DB8 81C602000000        <1> 	add esi, 2
  4923 00003DBE E803ECFFFF          <1> 	call print
  4924 00003DC3 BE[11730000]        <1> 	mov esi, notfound2
  4925 00003DC8 E8F9EBFFFF          <1> 	call print
  4926 00003DCD E94BF2FFFF          <1> 	jmp nwcmd
  4927                              <1> progbatchfound:
  4928 00003DD2 BF00004000          <1> 		mov edi, 0x400000
  4929 00003DD7 C605[69150000]01    <1> 		mov byte [BATCHISON], 1
  4930                              <1> 	batchrunloop:
  4931 00003DDE E80DF2FFFF          <1> 		call buftxtclear
  4932 00003DE3 BE[7A1B0000]        <1> 		mov esi, buftxt
  4933                              <1> 	batchrunloop2:
  4934 00003DE8 B10D                <1> 		mov cl, 13
  4935 00003DEA B50A                <1> 		mov ch, 10
  4936 00003DEC 66390F              <1> 		cmp [edi], cx
  4937 00003DEF 0F841E000000        <1> 		je near nxtbatchrunline
  4938 00003DF5 66C1C108            <1> 		rol cx, 8
  4939 00003DF9 66390F              <1> 		cmp [edi], cx
  4940 00003DFC 0F8411000000        <1> 		je near nxtbatchrunline
  4941 00003E02 803F00              <1> 		cmp byte [edi], 0
  4942 00003E05 0F8408000000        <1> 		je near nxtbatchrunline
  4943 00003E0B 8A07                <1> 		mov al, [edi]
  4944 00003E0D 8806                <1> 		mov [esi], al
  4945 00003E0F 46                  <1> 		inc esi
  4946 00003E10 47                  <1> 		inc edi
  4947 00003E11 EBD5                <1> 		jmp batchrunloop2
  4948                              <1> 	nxtbatchrunline:
  4949 00003E13 81C702000000        <1> 		add edi, 2
  4950 00003E19 893D[7B3E0000]      <1> 		mov [batchedi], edi
  4951 00003E1F 893D[65150000]      <1> 		mov [BATCHPOS], edi
  4952 00003E25 C60600              <1> 		mov byte [esi], 0
  4953 00003E28 BE[7A1B0000]        <1> 		mov esi, buftxt
  4954 00003E2D 803E00              <1> 		cmp byte [esi], 0
  4955 00003E30 0F8439000000        <1> 		je near nobatchfoundrun
  4956 00003E36 31DB                <1> 		xor ebx, ebx
  4957 00003E38 8A1D[00150000]      <1> 		mov bl, [IFON]
  4958 00003E3E 80FB00              <1> 		cmp bl, 0
  4959 00003E41 0F8538000000        <1> 		jne near iftestbatch
  4960                              <1> 	doneiftest:
  4961 00003E47 803D[633F0000]00    <1> 		cmp byte [runnextline], 0
  4962 00003E4E 0F8405000000        <1> 		je near noruniftest
  4963 00003E54 E82CF3FFFF          <1> 		call progtest2
  4964                              <1> 	noruniftest:
  4965 00003E59 C605[633F0000]01    <1> 		mov byte [runnextline], 1
  4966 00003E60 8B3D[7B3E0000]      <1> 		mov edi, [batchedi]
  4967 00003E66 803F00              <1> 		cmp byte [edi], 0
  4968 00003E69 0F856FFFFFFF        <1> 		jne near batchrunloop
  4969                              <1> 	nobatchfoundrun:
  4970 00003E6F C605[69150000]00    <1> 		mov byte [BATCHISON], 0
  4971 00003E76 E9A2F1FFFF          <1> 		jmp nwcmd
  4972                              <1> 	
  4973 00003E7B 00000000            <1> batchedi dd 0	
  4974                              <1> 	
  4975                              <1> 	iftestbatch:
  4976 00003E7F BE[01150000]        <1> 		mov esi, IFTRUE
  4977 00003E84 01DE                <1> 		add esi, ebx
  4978 00003E86 803E00              <1> 		cmp byte [esi], 0
  4979 00003E89 0F85B8FFFFFF        <1> 		jne near doneiftest
  4980 00003E8F 881D[643F0000]      <1> 		mov [iffalsebuf], bl
  4981 00003E95 803D[6A150000]01    <1> 		cmp byte [LOOPON], 1
  4982 00003E9C 0F8513000000        <1> 		jne near fifindbatch
  4983 00003EA2 E937FFFFFF          <1> 		jmp batchrunloop
  4984                              <1> 	elsetestbatch:
  4985 00003EA7 C60601              <1> 		mov byte [esi], 1
  4986 00003EAA 81C706000000        <1> 		add edi, 6
  4987 00003EB0 E929FFFFFF          <1> 		jmp batchrunloop
  4988                              <1> 	fifindbatch:
  4989 00003EB5 66B96966            <1> 		mov cx, "if"
  4990 00003EB9 66B86669            <1> 		mov ax, "fi"
  4991 00003EBD 663907              <1> 		cmp [edi], ax
  4992 00003EC0 0F8427000000        <1> 		je near fifoundbatch
  4993 00003EC6 66390F              <1> 		cmp [edi], cx
  4994 00003EC9 0F8477000000        <1> 		je near iffoundbatch
  4995 00003ECF 803F00              <1> 		cmp byte [edi], 0
  4996 00003ED2 0F8415000000        <1> 		je near fifoundbatch
  4997 00003ED8 B8656C7365          <1> 		mov eax, "else"
  4998 00003EDD 3907                <1> 		cmp [edi], eax
  4999 00003EDF 0F84C2FFFFFF        <1> 		je near elsetestbatch
  5000 00003EE5 81C702000000        <1> 		add edi, 2
  5001 00003EEB EBC8                <1> 		jmp fifindbatch
  5002                              <1> 	fifoundbatch:
  5003 00003EED 81C702000000        <1> 		add edi, 2
  5004 00003EF3 B00D                <1> 		mov al, 13
  5005 00003EF5 B40A                <1> 		mov ah, 10
  5006 00003EF7 663907              <1> 		cmp [edi], ax
  5007 00003EFA 0F8418000000        <1> 		je near goodfibatch
  5008 00003F00 66C1C008            <1> 		rol ax, 8
  5009 00003F04 663907              <1> 		cmp [edi], ax
  5010 00003F07 0F840B000000        <1> 		je near goodfibatch
  5011 00003F0D 803F00              <1> 		cmp byte [edi], 0
  5012 00003F10 0F8459FFFFFF        <1> 		je near nobatchfoundrun
  5013 00003F16 EB9D                <1> 		jmp fifindbatch
  5014                              <1> 	goodfibatch:
  5015 00003F18 B001                <1> 		mov al, 1
  5016 00003F1A 2805[00150000]      <1> 		sub [IFON], al 
  5017 00003F20 A0[00150000]        <1> 		mov al, [IFON]
  5018 00003F25 8A1D[643F0000]      <1> 		mov bl, [iffalsebuf]
  5019 00003F2B 38D8                <1> 		cmp al, bl
  5020 00003F2D 7786                <1> 		ja fifindbatch
  5021 00003F2F BE[7A1B0000]        <1> 		mov esi, buftxt
  5022 00003F34 81EF02000000        <1> 		sub edi, 2
  5023 00003F3A C605[633F0000]00    <1> 		mov byte [runnextline], 0
  5024 00003F41 E998FEFFFF          <1> 		jmp batchrunloop
  5025                              <1> 	iffoundbatch:
  5026 00003F46 B020                <1> 		mov al, ' '
  5027 00003F48 81C702000000        <1> 		add edi, 2
  5028 00003F4E 3807                <1> 		cmp [edi], al
  5029 00003F50 0F855FFFFFFF        <1> 		jne near fifindbatch
  5030 00003F56 B001                <1> 		mov al, 1
  5031 00003F58 0005[00150000]      <1> 		add [IFON], al
  5032 00003F5E E952FFFFFF          <1> 		jmp fifindbatch
  5033                              <1> 		
  5034                              <1> 		
  5035 00003F63 01                  <1> runnextline db 1
  5036 00003F64 00                  <1> iffalsebuf db 0
  5037                              <1> 
  5038 00003F65 E9B3F0FFFF          <1> notbatch: jmp nwcmd
  5039                              <1> 
  5040 00003F6A 050472656D00        <1> 	db 5,4,"rem",0	;this lets you rem stuff
  5041 00003F70 E9A8F0FFFF          <1> 	jmp nwcmd
  5042                              <1> 
  5043 00003F75 05047768696C6500    <1> 	db 5,4,"while",0
  5044 00003F7D 30C0                <1> whilecmd:  xor al, al
  5045 00003F7F 3805[69150000]      <1> 	cmp [BATCHISON], al
  5046 00003F85 0F84DAFFFFFF        <1> 	je near notbatch
  5047 00003F8B 8B35[65150000]      <1> 	mov esi, [BATCHPOS]
  5048 00003F91 81EE02000000        <1> 	sub esi, 2
  5049 00003F97 4E                  <1> whilefnd: dec esi
  5050 00003F98 8A06                <1> 	mov al, [esi]
  5051 00003F9A 3C0A                <1> 	cmp al, 10
  5052 00003F9C 0F8412000000        <1> 	je near whilefnd2
  5053 00003FA2 3C0D                <1> 	cmp al, 13
  5054 00003FA4 0F840A000000        <1> 	je near whilefnd2
  5055 00003FAA 3C00                <1> 	cmp al, 0
  5056 00003FAC 0F8402000000        <1> 	je near whilefnd2
  5057 00003FB2 EBE3                <1> 	jmp whilefnd
  5058                              <1> whilefnd2:
  5059 00003FB4 46                  <1> 	inc esi
  5060 00003FB5 8935[6B150000]      <1> 	mov [LOOPPOS], esi
  5061 00003FBB C605[6A150000]01    <1> 	mov BYTE [LOOPON], 1
  5062 00003FC2 BE[7A1B0000]        <1> 	mov esi, buftxt
  5063 00003FC7 BB[7A1B0000]        <1> 	mov ebx, buftxt
  5064 00003FCC 81C306000000        <1> 	add ebx, 6
  5065 00003FD2 E923000000          <1> 	jmp chkeqsn
  5066                              <1> 
  5067                              <1> 
  5068 00003FD7 0504696600          <1> 	db 5,4,"if",0
  5069 00003FDC 30C0                <1> ifcmd:	xor al, al
  5070 00003FDE 3805[69150000]      <1> 	cmp [BATCHISON], al
  5071 00003FE4 0F847BFFFFFF        <1> 	je near notbatch
  5072 00003FEA BE[7A1B0000]        <1> 	mov esi, buftxt
  5073 00003FEF BB[7A1B0000]        <1> 	mov ebx, buftxt
  5074 00003FF4 81C303000000        <1> 	add ebx, 3
  5075 00003FFA 8A06                <1> chkeqsn: mov al, [esi]
  5076 00003FFC 3C00                <1> 	cmp al, 0
  5077 00003FFE 0F8461FFFFFF        <1> 	je near notbatch
  5078 00004004 3C3D                <1> 	cmp al, '='
  5079 00004006 0F8403000000        <1> 	je near chkeqdn
  5080 0000400C 46                  <1> 	inc esi
  5081 0000400D EBEB                <1> 	jmp chkeqsn
  5082 0000400F B000                <1> chkeqdn: mov al, 0 
  5083 00004011 8806                <1> 	mov [esi], al
  5084 00004013 46                  <1> 	inc esi
  5085 00004014 8A06                <1> 	mov al, [esi]
  5086 00004016 3C24                <1> 	cmp al, '$'
  5087 00004018 0F845C000000        <1> 	je near ifvar1
  5088 0000401E 8A03                <1> ifvar2: mov al, [ebx]
  5089 00004020 3C24                <1> 	cmp al, '$'
  5090 00004022 0F8472000000        <1> 	je near ifvar3
  5091 00004028 E8FDF1FFFF          <1> ifvar4:	call tester
  5092 0000402D 3C01                <1> 	cmp al, 1
  5093 0000402F 0F8405000000        <1> 	je near trueif
  5094 00004035 E920000000          <1> 	jmp falseif
  5095 0000403A 31C0                <1> trueif:	xor eax, eax
  5096 0000403C A0[00150000]        <1> 	mov al, [IFON]
  5097 00004041 FEC0                <1> 	inc al
  5098 00004043 A2[00150000]        <1> 	mov [IFON], al
  5099 00004048 30E4                <1> 	xor ah, ah
  5100 0000404A BE[01150000]        <1> 	mov esi, IFTRUE
  5101 0000404F 01C6                <1> 	add esi, eax
  5102 00004051 B401                <1> 	mov ah, 1
  5103 00004053 8826                <1> 	mov [esi], ah
  5104 00004055 E9C3EFFFFF          <1> 	jmp nwcmd
  5105 0000405A 31C0                <1> falseif: xor eax, eax
  5106 0000405C A0[00150000]        <1> 	mov al, [IFON]
  5107 00004061 FEC0                <1> 	inc al
  5108 00004063 A2[00150000]        <1> 	mov [IFON], al
  5109 00004068 30E4                <1> 	xor ah, ah
  5110 0000406A BE[01150000]        <1> 	mov esi, IFTRUE
  5111 0000406F 01C6                <1> 	add esi, eax
  5112 00004071 30E4                <1> 	xor ah, ah
  5113 00004073 8826                <1> 	mov [esi], ah
  5114 00004075 E9A3EFFFFF          <1> 	jmp nwcmd
  5115 0000407A 89F7                <1> ifvar1: mov edi, esi
  5116 0000407C 81EF[7A1B0000]      <1> 	sub edi, buftxt
  5117 00004082 47                  <1> 	inc edi
  5118 00004083 BB[6F150000]        <1> 	mov ebx, variables
  5119 00004088 E828F8FFFF          <1> 	call nxtvrech
  5120 0000408D BB[7A1B0000]        <1> 	mov ebx, buftxt
  5121 00004092 81C303000000        <1> 	add ebx, 3
  5122 00004098 EB84                <1> 	jmp ifvar2
  5123 0000409A 8935[BA400000]      <1> ifvar3: mov [esiif], esi
  5124 000040A0 BF04000000          <1> 	mov edi, 4
  5125 000040A5 BB[6F150000]        <1> 	mov ebx, variables
  5126 000040AA E806F8FFFF          <1> 	call nxtvrech
  5127 000040AF 8B35[BA400000]      <1> 	mov esi, [esiif]
  5128 000040B5 E96EFFFFFF          <1> 	jmp ifvar4
  5129                              <1> 
  5130 000040BA 00000000            <1> esiif dd 0
  5131                              <1> 	
  5132 000040BE 0504656C736500      <1> 	db 5,4,"else",0
  5133 000040C5 31C0                <1> elsecmd:	xor eax, eax
  5134 000040C7 A0[00150000]        <1> 	mov al, [IFON]
  5135 000040CC BE[01150000]        <1> 	mov esi, IFTRUE
  5136 000040D1 01C6                <1> 	add esi, eax
  5137 000040D3 8A06                <1> 	mov al, [esi]
  5138 000040D5 3401                <1> 	xor al, 1
  5139 000040D7 8806                <1> 	mov [esi], al
  5140 000040D9 E93FEFFFFF          <1> 	jmp nwcmd
  5141                              <1> 
  5142 000040DE 05046C6F6F7000      <1> 	db 5,4,"loop",0
  5143 000040E5 803D[6A150000]00    <1> 	cmp byte [LOOPON], 0
  5144 000040EC 0F8505000000        <1> 	jne near filoop
  5145 000040F2 E926EFFFFF          <1> 	jmp nwcmd
  5146 000040F7 8B35[6B150000]      <1> filoop: mov esi, [LOOPPOS]
  5147 000040FD FE0D[00150000]      <1> 	dec byte [IFON]
  5148 00004103 C605[6A150000]00    <1> 	mov byte [LOOPON], 0
  5149 0000410A 8935[65150000]      <1> 	mov [BATCHPOS], esi
  5150 00004110 8935[7B3E0000]      <1> 	mov [batchedi], esi
  5151 00004116 E902EFFFFF          <1> 	jmp nwcmd
  5152                              <1> 	
  5153                              <1> 
  5154 0000411B 0504666900          <1> 	db 5,4,"fi",0
  5155 00004120 30C0                <1> 	xor al, al
  5156 00004122 3805[69150000]      <1> 	cmp [BATCHISON], al
  5157 00004128 0F8437FEFFFF        <1> 	je near notbatch
  5158 0000412E B001                <1> fi:	mov al, 1
  5159 00004130 2805[00150000]      <1> 	sub [IFON],al
  5160 00004136 E9E2EEFFFF          <1> 	jmp nwcmd
  5161                              <1> 
  5162 0000413B 050473746F7000      <1> 	db 5,4,"stop",0
  5163 00004142 30C0                <1> stop:	xor al, al
  5164 00004144 A2[69150000]        <1> 	mov [BATCHISON], al
  5165 00004149 A2[00150000]        <1> 	mov [IFON], al
  5166 0000414E A2[01150000]        <1> 	mov [IFTRUE], al
  5167 00004153 A2[6A150000]        <1> 	mov [LOOPON], al
  5168 00004158 E9C0EEFFFF          <1> 	jmp nwcmd
  5169                                      %include 'source/programs.asm'
  5170                              <1> ;db 5,4,"internet",0
  5171                              <1> 	internettest: 			;;initialize network card, lets hope this is right
  5172                              <1> 							;;^^used to^^, now tests int 30h functions		
  5173 0000415D B403                <1> 		mov ah, 3
  5174 0000415F CD30                <1> 		int 30h
  5175 00004161 B401                <1> 		mov ah, 1
  5176                              <1> 		;mov esi, datmsg
  5177 00004163 66BB0700            <1> 		mov bx, 7
  5178 00004167 30C0                <1> 		xor al, al
  5179 00004169 CD30                <1> 		int 30h
  5180                              <1> 	    ;jmp packettest
  5181 0000416B E9ADEEFFFF          <1> 		jmp nwcmd
  5182                              <1> ;datmsg: db "Internet has not been implemented yet.",10,13,0
  5183                              <1> 	
  5184 00004170 050474687265616473- <1> db 5,4,"threads",0
  5185 00004179 00                  <1>
  5186 0000417A E92F2A0000          <1> 	jmp threadstarttest
  5187                              <1> 	
  5188 0000417F 050472656700        <1> db 5,4,"reg",0
  5189 00004185 CD03                <1> 	int 3
  5190 00004187 E991EEFFFF          <1> 	jmp nwcmd
  5191                              <1> 	
  5192 0000418C 0504636861726D6170- <1> db 5,4,"charmap",0
  5193 00004195 00                  <1>
  5194 00004196 30C0                <1> 	xor al, al
  5195 00004198 66BB0700            <1> 	mov bx, 7
  5196                              <1> charmapcopy:
  5197 0000419C FEC0                <1> 	inc al
  5198 0000419E 3C08                <1> 	cmp al, 8
  5199 000041A0 7426                <1> 	je charmapnocopy
  5200 000041A2 3C09                <1> 	cmp al, 9
  5201 000041A4 7422                <1> 	je charmapnocopy
  5202 000041A6 3C0A                <1> 	cmp al, 10
  5203 000041A8 741E                <1> 	je charmapnocopy
  5204 000041AA 3C0D                <1> 	cmp al, 13
  5205 000041AC 741A                <1> 	je charmapnocopy
  5206 000041AE 3C00                <1> 	cmp al, 0
  5207 000041B0 7407                <1> 	je nomorecharmap
  5208 000041B2 E806E6FFFF          <1> 	call int301prnt
  5209 000041B7 EBE3                <1> 	jmp charmapcopy
  5210                              <1> nomorecharmap:
  5211 000041B9 BE[40730000]        <1> 	mov esi, line
  5212 000041BE E803E8FFFF          <1> 	call print
  5213 000041C3 E955EEFFFF          <1> 	jmp nwcmd
  5214                              <1> charmapnocopy:
  5215 000041C8 6650                <1> 	push ax
  5216 000041CA B020                <1> 	mov al, " "
  5217 000041CC E8ECE5FFFF          <1> 	call int301prnt
  5218 000041D1 6658                <1> 	pop ax
  5219 000041D3 EBC7                <1> 	jmp charmapcopy
  5220                              <1> 	
  5221 000041D5 05046B6579636F6465- <1> db 5,4,"keycode",0
  5222 000041DE 00                  <1>
  5223                              <1> keycode:
  5224 000041DF C605[71290000]00    <1> 	mov byte [trans], 0
  5225 000041E6 E868060000          <1> 	call guistartin
  5226 000041EB 31C0                <1> 	xor eax, eax
  5227 000041ED 31C9                <1> 	xor ecx, ecx
  5228 000041EF 8A0D[2E480000]      <1> 	mov cl, [specialkey]
  5229 000041F5 80F900              <1> 	cmp cl, 0
  5230 000041F8 0F8405000000        <1> 	je near nospecialkeycode
  5231 000041FE E821F3FFFF          <1> 	call showhexsmall
  5232                              <1> nospecialkeycode:
  5233 00004203 66A1[6F290000]      <1> 	mov ax, [lastkey]
  5234 00004209 88E1                <1> 	mov cl, ah
  5235 0000420B E814F3FFFF          <1> 	call showhexsmall
  5236 00004210 EBCD                <1> 	jmp keycode
  5237                              <1> 
  5238 00004212 050470636900        <1> db 5,4,"pci",0
  5239                              <1> 	pcishow:
  5240 00004218 E809260000          <1> 	call pcidump
  5241 0000421D E9FBEDFFFF          <1> 	jmp nwcmd
  5242                              <1> 	
  5243 00004222 050461727000        <1> db 5,4,"arp",0
  5244 00004228 E8F4240000          <1> 	call arptest
  5245 0000422D E9EBEDFFFF          <1> 	jmp nwcmd
  5246                              <1> 
  5247 00004232 0504626174636800    <1> db 5,4,"batch",0
  5248                              <1> 	batchst: 
  5249 0000423A BF[7A1B0000]        <1> 		mov edi, buftxt
  5250 0000423F 81C706000000        <1> 		add edi, 6
  5251 00004245 803F00              <1> 		cmp byte [edi], 0
  5252 00004248 0F8473000000        <1> 		je near nonamefound
  5253 0000424E BE00004000          <1> 		mov esi, 0x400000
  5254 00004253 E86C270000          <1> 		call loadfile
  5255 00004258 89D0                <1> 		mov eax, edx
  5256 0000425A 3D94010000          <1> 		cmp eax, 404
  5257 0000425F 746F                <1> 		je goodbatchname
  5258 00004261 BE[70420000]        <1> 		mov esi, badbatchname
  5259 00004266 E85BE7FFFF          <1> 		call print
  5260 0000426B E9ADEDFFFF          <1> 		jmp nwcmd
  5261 00004270 546869732066696C65- <1> 		badbatchname db "This file already exists!",10,13,0
  5262 00004279 20616C726561647920- <1>
  5263 00004282 657869737473210A0D- <1>
  5264 0000428B 00                  <1>
  5265 0000428C 596F75206861766520- <1> 		namenotfoundbatch db "You have to type a name after the command.",10,13,0
  5266 00004295 746F20747970652061- <1>
  5267 0000429E 206E616D6520616674- <1>
  5268 000042A7 65722074686520636F- <1>
  5269 000042B0 6D6D616E642E0A0D00  <1>
  5270 000042B9 00000000            <1> 		esicache3 dd 0
  5271 000042BD 00000000            <1> 		esicache2 dd 0
  5272                              <1> 	nonamefound:
  5273 000042C1 BE[8C420000]        <1> 		mov esi, namenotfoundbatch
  5274 000042C6 E8FBE6FFFF          <1> 		call print
  5275 000042CB E94DEDFFFF          <1> 		jmp nwcmd
  5276                              <1> 	goodbatchname:
  5277 000042D0 BE00004000          <1> 		mov esi, 0x400000
  5278                              <1> 	batchcreate:
  5279 000042D5 8935[B9420000]      <1> 		mov [esicache3], esi
  5280 000042DB BF00008000          <1> 		mov edi, 0x800000
  5281 000042E0 B00D                <1> 		mov al, 13
  5282 000042E2 B307                <1> 		mov bl, 7
  5283 000042E4 B404                <1> 		mov ah, 4
  5284 000042E6 CD30                <1> 		int 30h
  5285 000042E8 8935[BD420000]      <1> 		mov [esicache2], esi
  5286 000042EE 8A0E                <1> 		mov cl, [esi]
  5287 000042F0 8B35[B9420000]      <1> 		mov esi, [esicache3]
  5288 000042F6 BB[4A430000]        <1> 		mov ebx, exitword
  5289 000042FB E864EFFFFF          <1> 		call cndtest
  5290 00004300 3C01                <1> 		cmp al, 1
  5291 00004302 7423                <1> 		je endbatchcreate
  5292 00004304 3C02                <1> 		cmp al, 2
  5293 00004306 741F                <1> 		je endbatchcreate
  5294 00004308 BE[40730000]        <1> 		mov esi, line
  5295 0000430D E8B4E6FFFF          <1> 		call print
  5296 00004312 8B35[BD420000]      <1> 		mov esi, [esicache2]
  5297 00004318 B00D                <1> 		mov al, 13
  5298 0000431A B40A                <1> 		mov ah, 10
  5299 0000431C 668906              <1> 		mov [esi], ax
  5300 0000431F 81C602000000        <1> 		add esi, 2
  5301 00004325 EBAE                <1> 		jmp batchcreate
  5302                              <1> 	endbatchcreate:
  5303 00004327 8B35[B9420000]      <1> 		mov esi, [esicache3]
  5304 0000432D 31C0                <1> 		xor eax, eax
  5305 0000432F 8806                <1> 		mov [esi], al
  5306 00004331 BE[40730000]        <1> 		mov esi, line
  5307 00004336 E88BE6FFFF          <1> 		call print
  5308 0000433B BE00004000          <1> 		mov esi, 0x400000
  5309 00004340 E881E6FFFF          <1> 		call print
  5310 00004345 E9D3ECFFFF          <1> 		jmp nwcmd
  5311                              <1> 	
  5312 0000434A 5C7800              <1> 	exitword db "\x",0
  5313 0000434D 54797065205C782074- <1> 	wordmsg db "Type \x to exit.",10,13,0
  5314 00004356 6F20657869742E0A0D- <1>
  5315 0000435F 00                  <1>
  5316                              <1> 		
  5317 00004360 050473686F7700      <1> db 5,4,"show",0
  5318 00004367 BF[7A1B0000]        <1> 		mov edi, buftxt
  5319 0000436C 81C705000000        <1> 		add edi, 5
  5320 00004372 BE00004000          <1> 		mov esi, 0x400000
  5321 00004377 E848260000          <1> 		call loadfile
  5322 0000437C BE00004000          <1> 		mov esi, 0x400000
  5323 00004381 66813E424D          <1> 		cmp word [esi], "BM"
  5324 00004386 7414                <1> 		je bmpfound
  5325 00004388 E839E6FFFF          <1> 		call print
  5326 0000438D BE[40730000]        <1> 		mov esi, line
  5327 00004392 E82FE6FFFF          <1> 		call print
  5328 00004397 E981ECFFFF          <1> 		jmp nwcmd
  5329                              <1> bmpfound:
  5330 0000439C 803D[5E4F0000]00    <1> 		cmp byte [guion], 0
  5331 000043A3 0F8446000000        <1> 		je near noguibmp
  5332 000043A9 BE00004000          <1> 		mov esi, 0x400000
  5333 000043AE 31C9                <1> 		xor ecx, ecx
  5334 000043B0 31D2                <1> 		xor edx, edx
  5335 000043B2 31C0                <1> 		xor eax, eax
  5336 000043B4 31DB                <1> 		xor ebx, ebx
  5337 000043B6 E87D1C0000          <1> 		call showbmp
  5338 000043BB 30C0                <1> 		xor al, al
  5339 000043BD B405                <1> 		mov ah, 5
  5340 000043BF CD30                <1> 		int 30h
  5341 000043C1 E8260A0000          <1> 		call guiclear
  5342 000043C6 E8940B0000          <1> 		call clearmousecursor
  5343 000043CB E8FE110000          <1> 		call reloadallgraphics
  5344 000043D0 BE[7A1B0000]        <1> 		mov esi, buftxt
  5345 000043D5 81C605000000        <1> 		add esi, 5
  5346 000043DB E8E6E5FFFF          <1> 		call print
  5347 000043E0 BE[72440000]        <1> 		mov esi, loadedbmpmsg
  5348 000043E5 E8DCE5FFFF          <1> 		call print
  5349 000043EA E92EECFFFF          <1> 		jmp nwcmd
  5350                              <1> noguibmp:
  5351 000043EF BE[FE430000]        <1> 		mov esi, warnguibmp
  5352 000043F4 E8CDE5FFFF          <1> 		call print
  5353 000043F9 E91FECFFFF          <1> 		jmp nwcmd
  5354 000043FE 546869732063616E20- <1> warnguibmp db "This can not be done without the gui.",10,13,0
  5355 00004407 6E6F7420626520646F- <1>
  5356 00004410 6E6520776974686F75- <1>
  5357 00004419 742074686520677569- <1>
  5358 00004422 2E0A0D00            <1>
  5359                              <1> 
  5360                              <1> 		
  5361                              <1> filenotfound:
  5362 00004426 BE[4F440000]        <1> 		mov esi, filenf
  5363 0000442B E896E5FFFF          <1> 		call print
  5364 00004430 BE[7A1B0000]        <1> 		mov esi, buftxt
  5365 00004435 81C608000000        <1> 		add esi, 8
  5366 0000443B E886E5FFFF          <1> 		call print
  5367 00004440 BE[5A440000]        <1> 		mov esi, filenf2
  5368 00004445 E87CE5FFFF          <1> 		call print
  5369 0000444A E9CEEBFFFF          <1> 		jmp nwcmd
  5370 0000444F 5468652066696C6520- <1> filenf db "The file ",34,0
  5371 00004458 2200                <1>
  5372 0000445A 2220636F756C64206E- <1> filenf2 db 34," could not be found.",13,10,0
  5373 00004463 6F7420626520666F75- <1>
  5374 0000446C 6E642E0D0A00        <1>
  5375                              <1> 		
  5376 00004472 206C6F616465642E0D- <1> loadedbmpmsg db " loaded.",13,10,0
  5377 0000447B 0A00                <1>
  5378                              <1> 
  5379 0000447D 050464756D7000      <1> 	db 5,4,"dump",0
  5380 00004484 BE[7A1B0000]        <1> 	mov esi, buftxt
  5381 00004489 81C605000000        <1> 	add esi, 5
  5382 0000448F 31C9                <1> 	xor ecx, ecx
  5383 00004491 E8DFF1FFFF          <1> 	call cnvrttxt
  5384 00004496 89CF                <1> 	mov edi, ecx
  5385 00004498 89FE                <1> 	mov esi, edi
  5386 0000449A 81C680030000        <1> 	add esi, 896
  5387 000044A0 C605[23350000]00    <1> 	mov byte [firsthexshown],0
  5388                              <1> dumphexloop:
  5389 000044A7 8B0F                <1> 	mov ecx, [edi]
  5390 000044A9 E88AF0FFFF          <1> 	call showhex
  5391 000044AE 81C704000000        <1> 	add edi, 4
  5392 000044B4 39F7                <1> 	cmp edi, esi
  5393 000044B6 72EF                <1> 	jb dumphexloop
  5394 000044B8 E960EBFFFF          <1> 	jmp nwcmd
  5395                              <1> 
  5396 000044BD 050474696D6500      <1> db 5,4,"time",0
  5397 000044C4 E80F000000          <1> 	call time
  5398 000044C9 BE[B3460000]        <1> 	mov esi, timeshow
  5399 000044CE E8F3E4FFFF          <1> 	call print
  5400 000044D3 E9C1000000          <1> 	jmp findday
  5401                              <1> time:
  5402 000044D8 E85E010000          <1> 	call tstackput1
  5403 000044DD B00A                <1> 	mov al,10			;Get RTC register A
  5404 000044DF E888010000          <1> 	call tget1
  5405 000044E4 A880                <1> 	test al,0x80			;Is update in progress?
  5406 000044E6 75F0                <1> 	jne time				; yes, wait
  5407                              <1> 
  5408 000044E8 B000                <1> 	mov al,0			;Get seconds (00 to 59)
  5409 000044EA E87D010000          <1> 	call tget1
  5410 000044EF A2[AA460000]        <1> 	mov [RTCtimeSecond],al
  5411                              <1> 
  5412 000044F4 B002                <1> 	mov al,0x02			;Get minutes (00 to 59)
  5413 000044F6 E871010000          <1> 	call tget1
  5414 000044FB A2[AB460000]        <1> 	mov [RTCtimeMinute],al
  5415                              <1> 
  5416 00004500 B004                <1> 	mov al,0x04			;Get hours (see notes)
  5417 00004502 E865010000          <1> 	call tget1
  5418 00004507 A2[AC460000]        <1> 	mov [RTCtimeHour],al
  5419                              <1> 
  5420 0000450C B007                <1> 	mov al,0x07			;Get day of month (01 to 31)
  5421 0000450E E859010000          <1> 	call tget1
  5422                              <1> ;	mov ah, 0			;;fix day
  5423                              <1> ;	mov ah, al
  5424                              <1> ;	shr ah, 4
  5425                              <1> ;	shl al, 4
  5426                              <1> ;	shr al, 4
  5427                              <1> ;	cmp al, 0
  5428                              <1> ;	jne nodecahday
  5429                              <1> ;	mov al, 10
  5430                              <1> ;	dec ah
  5431                              <1> ;nodecahday:
  5432                              <1> ;	dec al
  5433                              <1> ;	shl ah, 4
  5434                              <1> ;	or al, ah
  5435 00004513 A2[AD460000]        <1> 	mov [RTCtimeDay],al
  5436                              <1> 
  5437 00004518 B008                <1> 	mov al,0x08			;Get month (01 to 12)
  5438 0000451A E84D010000          <1> 	call tget1
  5439 0000451F A2[AE460000]        <1> 	mov [RTCtimeMonth],al
  5440                              <1> 
  5441 00004524 B009                <1> 	mov al,0x09			;Get year (00 to 99)
  5442 00004526 E841010000          <1> 	call tget1
  5443 0000452B A2[AF460000]        <1> 	mov [RTCtimeYear],al
  5444                              <1> 	
  5445 00004530 BE[B3460000]        <1> 	mov esi, timeshow
  5446 00004535 8A2D[AC460000]      <1> 	mov ch, [RTCtimeHour]
  5447 0000453B E837010000          <1> 	call tput1
  5448 00004540 8A2D[AB460000]      <1> 	mov ch, [RTCtimeMinute]
  5449 00004546 E82C010000          <1> 	call tput1
  5450 0000454B 8A2D[AA460000]      <1> 	mov ch, [RTCtimeSecond]
  5451 00004551 E821010000          <1> 	call tput1
  5452 00004556 BE[BD460000]        <1> 	mov esi, dateshow
  5453 0000455B 8A2D[AE460000]      <1> 	mov ch, [RTCtimeMonth]
  5454 00004561 E811010000          <1> 	call tput1
  5455 00004566 8A2D[AD460000]      <1> 	mov ch, [RTCtimeDay]
  5456 0000456C E806010000          <1> 	call tput1
  5457 00004571 B520                <1> 	mov ch, 0x20
  5458 00004573 E8FF000000          <1> 	call tput1
  5459 00004578 4E                  <1> 	dec esi
  5460 00004579 8A2D[AF460000]      <1> 	mov ch, [RTCtimeYear]
  5461 0000457F E8F3000000          <1> 	call tput1
  5462 00004584 E8CC000000          <1> 	call tstackget1
  5463 00004589 C3                  <1> 	ret
  5464 0000458A BE[B3460000]        <1> 	mov esi, timeshow
  5465 0000458F 66BB0700            <1> 	mov bx, 7
  5466 00004593 B401                <1> 	mov ah, 1
  5467 00004595 30C0                <1> 	xor al, al
  5468 00004597 CD30                <1> 	int 30h
  5469                              <1> ;;get day of week
  5470                              <1> ;;add these:
  5471                              <1> ;;century value
  5472                              <1> ;;last 2 digits of year
  5473                              <1> ;;last 2 digits of year right shifted twice
  5474                              <1> ;;month table value
  5475                              <1> ;;day of the month
  5476                              <1> ;;divide these by 7
  5477                              <1> ;;the remainder is the day
  5478                              <1> findday:
  5479 00004599 31C0                <1> 	xor eax, eax
  5480                              <1> ;;first convert the values from BCD to hex
  5481 0000459B A0[AD460000]        <1> 	mov al, [RTCtimeDay]
  5482 000045A0 E87D000000          <1> 	call converttohex
  5483 000045A5 8825[B0460000]      <1> 	mov [dayhex], ah
  5484 000045AB A0[AE460000]        <1> 	mov al, [RTCtimeMonth]
  5485 000045B0 E86D000000          <1> 	call converttohex
  5486 000045B5 8825[B1460000]      <1> 	mov [monthhex], ah
  5487 000045BB A0[AF460000]        <1> 	mov al, [RTCtimeYear]
  5488 000045C0 E85D000000          <1> 	call converttohex
  5489 000045C5 8825[B2460000]      <1> 	mov [yearhex], ah
  5490 000045CB 31C0                <1> 	xor eax, eax
  5491 000045CD A0[B2460000]        <1> 	mov al, [yearhex]
  5492 000045D2 C0E802              <1> 	shr al, 2
  5493 000045D5 0205[B2460000]      <1> 	add al, [yearhex]
  5494 000045DB 0506000000          <1> 	add eax, 6
  5495 000045E0 31DB                <1> 	xor ebx, ebx
  5496 000045E2 8A1D[B1460000]      <1> 	mov bl, [monthhex]
  5497 000045E8 FECB                <1> 	dec bl
  5498 000045EA 81C3[D3460000]      <1> 	add ebx, month
  5499 000045F0 31C9                <1> 	xor ecx, ecx
  5500 000045F2 8A0B                <1> 	mov cl, [ebx]
  5501 000045F4 01C8                <1> 	add eax, ecx
  5502 000045F6 8A0D[B0460000]      <1> 	mov cl, [dayhex]
  5503 000045FC 01C8                <1> 	add eax, ecx
  5504 000045FE 66BB0700            <1> 	mov bx, 7
  5505 00004602 31D2                <1> 	xor edx, edx
  5506 00004604 66F7F3              <1> 	div bx
  5507 00004607 C1E202              <1> 	shl edx, 2
  5508 0000460A 81C2[DF460000]      <1> 	add edx, day
  5509 00004610 8B32                <1> 	mov esi, [edx]
  5510 00004612 66BB0700            <1> 	mov bx, 7
  5511 00004616 B401                <1> 	mov ah, 1
  5512 00004618 30C0                <1> 	xor al, al
  5513 0000461A CD30                <1> 	int 30h
  5514 0000461C 6631C0              <1> 	xor ax, ax
  5515 0000461F CD30                <1> 	int 30h
  5516 00004621 F4                  <1> 	hlt
  5517                              <1> 	
  5518                              <1> converttohex:
  5519 00004622 88C4                <1> 	mov ah, al
  5520 00004624 C0E804              <1> 	shr al, 4
  5521 00004627 C0E404              <1> 	shl ah, 4
  5522 0000462A C0EC04              <1> 	shr ah, 4
  5523 0000462D 3C00                <1> 	cmp al, 0
  5524 0000462F 7409                <1> 	je noconverttohex
  5525                              <1> converttohexlp:
  5526 00004631 80C40A              <1> 	add ah, 10
  5527 00004634 FEC8                <1> 	dec al
  5528 00004636 3C00                <1> 	cmp al, 0
  5529 00004638 75F7                <1> 	jne converttohexlp
  5530                              <1> noconverttohex:
  5531 0000463A C3                  <1> 	ret
  5532                              <1> 	
  5533                              <1> tstackput1:
  5534 0000463B 8935[A6460000]      <1> 	mov [tstack + 20], esi
  5535 00004641 BE[92460000]        <1> 	mov esi, tstack
  5536 00004646 8906                <1> 	mov [esi], eax
  5537 00004648 895E04              <1> 	mov [esi + 4], ebx
  5538 0000464B 894E08              <1> 	mov [esi + 8], ecx
  5539 0000464E 89560C              <1> 	mov [esi + 12], edx
  5540 00004651 897E10              <1> 	mov [esi + 16], edi
  5541 00004654 C3                  <1> 	ret
  5542                              <1> 	
  5543                              <1> tstackget1:
  5544 00004655 BE[92460000]        <1> 	mov esi, tstack
  5545 0000465A 8B06                <1> 	mov eax, [esi]
  5546 0000465C 8B5E04              <1> 	mov ebx, [esi + 4]
  5547 0000465F 8B4E08              <1> 	mov ecx, [esi + 8]
  5548 00004662 8B560C              <1> 	mov edx, [esi + 12]
  5549 00004665 8B7E10              <1> 	mov edi, [esi + 16]
  5550 00004668 8B7614              <1> 	mov esi, [esi + 20]
  5551 0000466B C3                  <1> 	ret
  5552                              <1> 	
  5553                              <1> tget1:
  5554 0000466C 66BA7000            <1> 	mov dx, 0x70
  5555 00004670 EE                  <1> 	out dx, al
  5556 00004671 6642                <1> 	inc dx
  5557 00004673 EC                  <1> 	in al, dx
  5558 00004674 664A                <1> 	dec dx
  5559 00004676 C3                  <1> 	ret
  5560                              <1> 	
  5561                              <1> tput1:
  5562 00004677 66C1E904            <1> 	shr cx, 4
  5563 0000467B B030                <1> 	mov al, 48
  5564 0000467D 00E8                <1> 	add al, ch
  5565 0000467F 8806                <1> 	mov [esi], al
  5566 00004681 46                  <1> 	inc esi
  5567 00004682 B030                <1> 	mov al, 48
  5568 00004684 C0E904              <1> 	shr cl, 4
  5569 00004687 00C8                <1> 	add al, cl
  5570 00004689 8806                <1> 	mov [esi], al
  5571 0000468B 81C602000000        <1> 	add esi, 2
  5572 00004691 C3                  <1> 	ret
  5573                              <1> 		
  5574 00004692 000000000000000000- <1> 	tstack dd 0,0,0,0,0,0
  5575 0000469B 000000000000000000- <1>
  5576 000046A4 000000000000        <1>
  5577 000046AA 00                  <1> 	RTCtimeSecond db 0
  5578 000046AB 00                  <1> 	RTCtimeMinute db 0
  5579 000046AC 00                  <1> 	RTCtimeHour db 0
  5580 000046AD 00                  <1> 	RTCtimeDay db 0
  5581 000046AE 00                  <1> 	RTCtimeMonth db 0
  5582 000046AF 00                  <1> 	RTCtimeYear db 0
  5583 000046B0 00                  <1> 	dayhex db 0
  5584 000046B1 00                  <1> 	monthhex db 0
  5585 000046B2 00                  <1> 	yearhex db 0
  5586 000046B3 30303A30303A30300D- <1> 	timeshow db "00:00:00",13,10
  5587 000046BC 0A                  <1>
  5588 000046BD 30302D30302D303030- <1> 	dateshow db "00-00-0000",13,10,0
  5589 000046C6 300D0A00            <1>
  5590                              <1> 	oldcentury:	;;from 1700 to 1900
  5591 000046CA 040200              <1> 	db 4,2,0
  5592                              <1> 	century:	;;from 2000 to 2500
  5593 000046CD 060402000604        <1> 	db 6,4,2,0,6,4
  5594                              <1> 	month:
  5595 000046D3 000303060104060205- <1> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5596 000046DC 000305              <1>
  5597                              <1> 	day:
  5598 000046DF [FB460000]          <1> 	dd sunday
  5599 000046E3 [04470000]          <1> 	dd monday
  5600 000046E7 [0D470000]          <1> 	dd tuesday
  5601 000046EB [17470000]          <1> 	dd wednesday
  5602 000046EF [23470000]          <1> 	dd thursday
  5603 000046F3 [2E470000]          <1> 	dd friday
  5604 000046F7 [37470000]          <1> 	dd saturday
  5605                              <1> sunday:
  5606 000046FB 53756E6461790D0A00  <1> 	db "Sunday",13,10,0
  5607                              <1> monday:
  5608 00004704 4D6F6E6461790D0A00  <1> 	db "Monday",13,10,0
  5609                              <1> tuesday:
  5610 0000470D 547565736461790D0A- <1> 	db "Tuesday",13,10,0
  5611 00004716 00                  <1>
  5612                              <1> wednesday:
  5613 00004717 5765646E6573646179- <1> 	db "Wednesday",13,10,0
  5614 00004720 0D0A00              <1>
  5615                              <1> thursday:
  5616 00004723 54687572736461790D- <1> 	db "Thursday",13,10,0
  5617 0000472C 0A00                <1>
  5618                              <1> friday:
  5619 0000472E 4672696461790D0A00  <1> 	db "Friday",13,10,0
  5620                              <1> saturday:
  5621 00004737 53617475726461790D- <1> 	db "Saturday",13,10,0
  5622 00004740 0A00                <1>
  5623                              <1> 
  5624 00004742 0504637075696400    <1> db 5,4,"cpuid",0
  5625 0000474A 31C0                <1> 	xor eax, eax
  5626 0000474C 0FA2                <1> 	cpuid
  5627 0000474E 891D[A3470000]      <1> 	mov [cpuidbuf], ebx
  5628 00004754 8915[A7470000]      <1> 	mov [cpuidbuf + 4], edx
  5629 0000475A 890D[AB470000]      <1> 	mov [cpuidbuf + 8], ecx
  5630 00004760 BE[A3470000]        <1> 	mov esi, cpuidbuf
  5631 00004765 E85CE2FFFF          <1> 	call print
  5632 0000476A BE[40730000]        <1> 	mov esi, line
  5633 0000476F E852E2FFFF          <1> 	call print
  5634 00004774 B801000000          <1> 	mov eax, 1
  5635 00004779 0FA2                <1> 	cpuid
  5636 0000477B 89C1                <1> 	mov ecx, eax
  5637 0000477D C605[23350000]02    <1> 	mov byte [firsthexshown], 2
  5638 00004784 E8AFEDFFFF          <1> 	call showhex
  5639 00004789 B808000080          <1> 	mov eax, 0x80000008
  5640 0000478E 0FA2                <1> 	cpuid
  5641 00004790 89C1                <1> 	mov ecx, eax
  5642 00004792 C605[23350000]02    <1> 	mov byte [firsthexshown], 2
  5643 00004799 E89AEDFFFF          <1> 	call showhex
  5644 0000479E E97AE8FFFF          <1> 	jmp nwcmd
  5645                              <1> 	
  5646 000047A3 00<rept>            <1> cpuidbuf times 13 db 0
  5647                              <1> cpuidvendorend:
  5648                              <1> 	
  5649                              <1> progend:		;programs end here	
  5650                              <1> batchprogend:
  5651                                      %include 'source/input.asm'
  5652                              <1> PS2SET:
  5653 000047B0 B0A8                <1>   mov  al, 0xa8		; enable mouse port
  5654 000047B2 E664                <1>   out  0x64, al		; write to keyboardcontroller
  5655 000047B4 E801000000          <1>   call CHKPRT		; check if command is progressed (demand!)
  5656 000047B9 C3                  <1> ret
  5657                              <1> 
  5658                              <1> CHKPRT:
  5659 000047BA 66B96400            <1>   mov  cx, 100
  5660                              <1>  .again:
  5661 000047BE E464                <1>   in   al, 0x64		; read from keyboardcontroller
  5662 000047C0 A802                <1>   test al, 2		; Check if input buffer is empty
  5663 000047C2 7402                <1>   je .go
  5664 000047C4 E2F8                <1>   loop .again
  5665                              <1>  .go:
  5666 000047C6 C3                  <1> ret
  5667                              <1> 
  5668                              <1> WMOUS:
  5669 000047C7 B0D4                <1>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  5670 000047C9 E664                <1>   out  0x64, al		; write to keyboardcontroller
  5671 000047CB E8EAFFFFFF          <1>   call CHKPRT		; check if command is progressed (demand!)
  5672 000047D0 C3                  <1> ret
  5673                              <1> 
  5674                              <1> MBUFFUL:
  5675 000047D1 66B96400            <1>   mov cx, 100
  5676                              <1>  .mn:
  5677 000047D5 E464                <1>   in   al, 0x64		; read from keyboardcontroller
  5678 000047D7 A820                <1>   test al, 0x20		; check if mouse output buffer is full
  5679 000047D9 7402                <1>   jz  .mnn
  5680 000047DB E2F8                <1>   loop .mn
  5681                              <1>  .mnn:
  5682 000047DD C3                  <1> ret
  5683                              <1> 
  5684                              <1> 
  5685                              <1> ACTMOUS:
  5686 000047DE E8E4FFFFFF          <1>   call WMOUS
  5687 000047E3 B0F4                <1>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  5688 000047E5 E660                <1>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  5689 000047E7 E8CEFFFFFF          <1>   call CHKPRT		; check if command is progressed (demand!)
  5690 000047EC E801000000          <1>   call CHKMOUS		; check if a byte is available
  5691 000047F1 C3                  <1> ret
  5692                              <1> 
  5693                              <1> CHKMOUS:
  5694 000047F2 B300                <1>   mov  bl, 0
  5695 000047F4 66B96400            <1>   mov cx, 100
  5696                              <1>  .vrd:
  5697 000047F8 E464                <1>   in   al, 0x64		; read from keyboardcontroller
  5698 000047FA A801                <1>   test al, 1		; check if controller buffer (60h) has data
  5699 000047FC 7504                <1>   jnz .yy
  5700 000047FE E2F8                <1>   loop .vrd
  5701 00004800 B301                <1>   mov  bl, 1
  5702                              <1>  .yy:
  5703 00004802 C3                  <1> ret
  5704                              <1> 
  5705                              <1> GETB:
  5706                              <1>  .cagain:
  5707 00004803 E8EAFFFFFF          <1>   call CHKMOUS		; check if a byte is available
  5708 00004808 08DB                <1>   or bl, bl
  5709 0000480A 75F7                <1>   jnz .cagain
  5710 0000480C B0AD                <1>   mov  al, 0xad		; Disable Keyboard
  5711 0000480E E664                <1>   out  0x64, al		; write to keyboardcontroller
  5712 00004810 E8A5FFFFFF          <1>   call CHKPRT		; check if command is progressed (demand!)
  5713 00004815 6631C0              <1>   xor  ax, ax
  5714 00004818 E460                <1>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  5715 0000481A 88C2                <1>   mov  dl, al
  5716 0000481C B0AE                <1>   mov  al, 0xae		; Enable Keyboard
  5717 0000481E E664                <1>   out  0x64, al		; write to keyboardcontroller
  5718 00004820 E895FFFFFF          <1>   call CHKPRT		; check if command is progressed (demand!)
  5719 00004825 88D0                <1>   mov  al, dl
  5720 00004827 C3                  <1> ret
  5721                              <1> 
  5722 00004828 00                  <1> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  5723 00004829 00                  <1> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  5724 0000482A 00                  <1> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  5725 0000482B 00                  <1> XCOORD  db 0x00	;	the moved distance  (horizontal)
  5726 0000482C 00                  <1> YCOORD  db 0x00	;	the moved distance  (vertical)
  5727 0000482D 00                  <1> mousedisabled db 0
  5728 0000482E 00                  <1> specialkey db 0
  5729                              <1> guistartin2:		;;this is basically the idle process
  5730                              <1> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  5731                              <1> 					;;this lets the cpu stay at close to 0% instead of 100%
  5732 0000482F 66B800A0            <1> 	mov ax, 0xA000	;;this is the divider for the PIT
  5733 00004833 E640                <1> 	out 0x40, al
  5734 00004835 66C1C008            <1> 	rol ax, 8
  5735 00004839 E640                <1> 	out 0x40, al
  5736 0000483B A0[F46B0000]        <1> 	mov al, [threadson]
  5737 00004840 C605[F46B0000]00    <1> 	mov byte [threadson], 0
  5738 00004847 FB                  <1> 	sti
  5739 00004848 F4                  <1> 	hlt
  5740 00004849 A2[F46B0000]        <1> 	mov [threadson], al
  5741 0000484E 3C02                <1> 	cmp al, 2
  5742 00004850 7401                <1> 	je guistartin
  5743 00004852 FA                  <1> 	cli
  5744                              <1> guistartin:
  5745 00004853 31C0                <1> 		xor eax, eax
  5746 00004855 A2[2E480000]        <1> 		mov [specialkey], al
  5747 0000485A 66A3[6F290000]      <1> 		mov [lastkey], ax
  5748 00004860 E464                <1> 		in al, 64h ; Status
  5749 00004862 A820                <1> 		test al, 20h ; PS2-Mouse?
  5750 00004864 0F85EA010000        <1> 		jnz near maincall2
  5751 0000486A A801                <1> 		test al, 1 
  5752 0000486C 74C1                <1> 		jz guistartin2 ; if output buffer full or no keypress, jump to idle process (only works when it is jz guistartin2, use jz guistartin to disable)
  5753                              <1> 	guigetkey:
  5754 0000486E E460                <1> 		in al, 60h
  5755 00004870 88C4                <1> 		mov ah, al
  5756 00004872 30C0                <1> 		xor al, al
  5757 00004874 8825[70290000]      <1> 		mov [lastkey + 1], ah
  5758 0000487A 88E0                <1> 		mov al, ah
  5759 0000487C BF[904C0000]        <1> 		mov edi, scancode
  5760                              <1> 	guisearchscan: 
  5761 00004881 3C3A                <1> 		cmp al, 3Ah
  5762 00004883 731A                <1> 		jae guiscanother
  5763 00004885 30E4                <1> 		xor ah, ah
  5764 00004887 C0E002              <1> 		shl al, 2
  5765 0000488A 01C7                <1> 		add edi, eax
  5766 0000488C D0E8                <1> 		shr al, 1
  5767 0000488E 01C7                <1> 		add edi, eax
  5768 00004890 D0E8                <1> 		shr al, 1
  5769 00004892 8A27                <1> 		mov ah, [edi]
  5770 00004894 80FC00              <1> 		cmp ah, 0
  5771 00004897 7406                <1> 		je guiscanother
  5772 00004899 E9D7000000          <1> 		jmp guiscanfound
  5773 0000489E 00                  <1> guiupper db 0
  5774                              <1> guiscanother:
  5775 0000489F 88C4                <1> 		mov ah, al
  5776 000048A1 30C0                <1> 		xor al, al
  5777 000048A3 66A3[6F290000]      <1> 		mov [lastkey], ax
  5778 000048A9 80FCE0              <1> 		cmp ah, 0E0h
  5779 000048AC 0F847D000000        <1> 		je near guigetkeyspecial
  5780 000048B2 803D[2E480000]E0    <1> 		cmp byte [specialkey], 0xE0
  5781 000048B9 752B                <1> 		jne nospecialkey
  5782 000048BB 80FC38              <1> 		cmp ah, 38h
  5783 000048BE 0F84A0000000        <1> 		je near guialton
  5784 000048C4 80FCB8              <1> 		cmp ah, 0B8h
  5785 000048C7 0F849F000000        <1> 		je near guialtoff
  5786 000048CD 80FC1D              <1> 		cmp ah, 1Dh
  5787 000048D0 0F847E000000        <1> 		je near guictron
  5788 000048D6 80FC9D              <1> 		cmp ah, 9Dh
  5789 000048D9 0F847D000000        <1> 		je near guictroff
  5790 000048DF 66A3[6F290000]      <1> 		mov [lastkey], ax
  5791 000048E5 C3                  <1> 		ret
  5792                              <1> nospecialkey:
  5793                              <1> 		;cmp ah, 4Dh
  5794                              <1> 		;je near nextimage
  5795 000048E6 80FC2A              <1> 		cmp ah, 2Ah
  5796 000048E9 0F8455000000        <1> 		je near guishifton
  5797 000048EF 80FC36              <1> 		cmp ah, 36h
  5798 000048F2 0F844C000000        <1> 		je near guishifton
  5799 000048F8 80FC1C              <1> 		cmp ah, 1Ch
  5800 000048FB 0F8473000000        <1> 		je near guientdown
  5801 00004901 80FCAA              <1> 		cmp ah, 0AAh
  5802 00004904 0F8442000000        <1> 		je near guishiftoff
  5803 0000490A 80FCB6              <1> 		cmp ah, 0B6h
  5804 0000490D 0F8439000000        <1> 		je near guishiftoff
  5805 00004913 80FC3A              <1> 		cmp ah, 3Ah
  5806 00004916 0F84A5000000        <1> 		je near guicaps
  5807 0000491C 80FC45              <1> 		cmp ah, 0x45
  5808 0000491F 0F84AD000000        <1> 		je near guinumlock
  5809 00004925 80FC46              <1> 		cmp ah, 0x46
  5810 00004928 0F84BC000000        <1> 		je near guiscrolllock
  5811 0000492E C3                  <1> 		ret
  5812                              <1> 	guigetkeyspecial:
  5813 0000492F C605[2E480000]E0    <1> 		mov byte [specialkey], 0xE0
  5814 00004936 E933FFFFFF          <1> 		jmp guigetkey
  5815                              <1> 	guishift:
  5816 0000493B A0[9E480000]        <1> 		mov al, [guiupper]
  5817 00004940 3C01                <1> 		cmp al, 1
  5818 00004942 7308                <1> 		jae guishiftoff
  5819                              <1> 	guishifton:
  5820 00004944 C605[9E480000]01    <1> 		mov byte [guiupper], 1
  5821 0000494B C3                  <1> 		ret
  5822                              <1> 		;jmp guistartin
  5823                              <1> 	guishiftoff:
  5824 0000494C C605[9E480000]00    <1> 		mov byte [guiupper], 0
  5825 00004953 C3                  <1> 		ret
  5826                              <1> 		;jmp guistartin
  5827                              <1> 	guictron:
  5828 00004954 C605[C0490000]01    <1> 		mov byte [guictr], 1
  5829 0000495B C3                  <1> 		ret
  5830                              <1> 	guictroff:
  5831 0000495C C605[C0490000]00    <1> 		mov byte [guictr], 0
  5832 00004963 C3                  <1> 		ret
  5833                              <1> 	guialton:
  5834 00004964 C605[BF490000]01    <1> 		mov byte [guialt], 1
  5835 0000496B C3                  <1> 		ret
  5836                              <1> 		;jmp guistartin
  5837                              <1> 	guialtoff:
  5838 0000496C C605[BF490000]00    <1> 		mov byte [guialt], 0
  5839 00004973 C3                  <1> 		ret
  5840                              <1> 		;jmp guistartin
  5841                              <1> 	guientdown:
  5842 00004974 C3                  <1> 		ret
  5843                              <1> 	guiscanfound:
  5844 00004975 81C704000000        <1> 		add edi, 4
  5845 0000497B 803D[C0490000]01    <1> 		cmp byte [guictr], 1
  5846 00004982 731B                <1> 		jae altguiin
  5847 00004984 81EF04000000        <1> 		sub edi, 4
  5848 0000498A 81C702000000        <1> 		add edi, 2
  5849 00004990 803D[BF490000]01    <1> 		cmp byte [guialt], 1
  5850 00004997 7306                <1> 		jae altguiin
  5851 00004999 81EF02000000        <1> 		sub edi, 2
  5852                              <1> altguiin:
  5853 0000499F 81C701000000        <1> 		add edi, 1
  5854 000049A5 803D[9E480000]01    <1> 		cmp byte [guiupper], 1
  5855 000049AC 7306                <1> 		jae uppercasegui
  5856 000049AE 81EF01000000        <1> 		sub edi, 1
  5857                              <1> uppercasegui:
  5858 000049B4 8A07                <1> 		mov al,[edi]
  5859 000049B6 A2[6F290000]        <1> 		mov [lastkey], al
  5860 000049BB C3                  <1> 		ret
  5861                              <1> 		
  5862 000049BC 00                  <1> keyboardstatus db 0
  5863 000049BD 00                  <1> numlockstatus db 0
  5864 000049BE 00                  <1> scrolllockstatus db 0
  5865 000049BF 00                  <1> guialt db 0
  5866 000049C0 00                  <1> guictr db 0
  5867                              <1> 	guicaps:
  5868 000049C1 8035[BC490000]04    <1> 		xor byte [keyboardstatus], 00000100b
  5869 000049C8 E835000000          <1> 		call updatekblights
  5870 000049CD E969FFFFFF          <1> 		jmp guishift
  5871                              <1> 		
  5872                              <1> 	guinumlock:
  5873 000049D2 8035[BC490000]02    <1> 		xor byte [keyboardstatus], 00000010b
  5874 000049D9 8035[BD490000]01    <1> 		xor byte [numlockstatus], 1
  5875 000049E0 E81D000000          <1> 		call updatekblights
  5876 000049E5 E969FEFFFF          <1> 		jmp guistartin
  5877                              <1> 	
  5878                              <1> 	guiscrolllock:
  5879 000049EA 8035[BC490000]01    <1> 		xor byte [keyboardstatus], 00000001b
  5880 000049F1 8035[BE490000]01    <1> 		xor byte [scrolllockstatus], 1
  5881 000049F8 E805000000          <1> 		call updatekblights
  5882 000049FD E951FEFFFF          <1> 		jmp guistartin
  5883                              <1> 		
  5884                              <1> 	updatekblights:
  5885 00004A02 B0ED                <1> 		mov al, 0xED
  5886 00004A04 66BA6000            <1> 		mov dx, 0x60
  5887 00004A08 EE                  <1> 		out dx, al
  5888                              <1> 	chkkbdack:
  5889 00004A09 EC                  <1> 		in al, dx
  5890 00004A0A 3CFA                <1> 		cmp al, 0xFA
  5891 00004A0C 75FB                <1> 		jne chkkbdack
  5892 00004A0E A0[BC490000]        <1> 		mov al, [keyboardstatus]
  5893 00004A13 EE                  <1> 		out dx, al
  5894 00004A14 C3                  <1> 		ret
  5895                              <1> 	
  5896                              <1> 	cursorgui:
  5897 00004A15 803D[D5600000]01    <1> 		cmp byte [mouseon], 1
  5898 00004A1C 0F8432000000        <1> 		je near maincall2
  5899 00004A22 803D[5E4F0000]00    <1> 		cmp byte [guion], 0
  5900 00004A29 0F8445FFFFFF        <1> 		je guientdown
  5901                              <1> 	initmouse:
  5902 00004A2F 803D[5E4F0000]00    <1> 		cmp byte [guion], 0
  5903 00004A36 7405                <1> 		je noswmsposinit
  5904 00004A38 E8DC050000          <1> 		call switchmousepos2
  5905                              <1> 	noswmsposinit:
  5906 00004A3D E86EFDFFFF          <1> 	  	call PS2SET
  5907 00004A42 E897FDFFFF          <1> 		call ACTMOUS
  5908 00004A47 C605[D5600000]01    <1> 		mov byte [mouseon],1
  5909 00004A4E E8B0FDFFFF          <1> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  5910                              <1> 				;;If the bytes are mixed up,
  5911                              <1> 				;;remove this line or add another of this line.
  5912                              <1> 		;call GETB
  5913                              <1> 	nomouse:
  5914 00004A53 C3                  <1> 		ret
  5915                              <1> 	maincall2:
  5916 00004A54 803D[2D480000]01    <1> 		cmp byte [mousedisabled], 1
  5917 00004A5B 74F6                <1> 		je nomouse
  5918 00004A5D 803D[D5600000]01    <1> 		  cmp byte [mouseon], 1
  5919 00004A64 75C9                <1> 		  jne initmouse
  5920 00004A66 E898FDFFFF          <1> 		  call GETB
  5921 00004A6B 88C3                <1> 		  mov  bl, al
  5922 00004A6D 80E301              <1> 		  and  bl, 1
  5923 00004A70 881D[28480000]      <1> 		  mov  BYTE [LBUTTON], bl
  5924 00004A76 88C3                <1> 		  mov  bl, al
  5925 00004A78 80E302              <1> 		  and  bl, 2
  5926 00004A7B D0EB                <1> 		  shr  bl, 1
  5927 00004A7D 881D[29480000]      <1> 		  mov  BYTE [RBUTTON], bl
  5928 00004A83 88C3                <1> 		  mov  bl, al
  5929 00004A85 80E304              <1> 		  and  bl, 4
  5930 00004A88 C0EB02              <1> 		  shr  bl, 2
  5931 00004A8B 881D[2A480000]      <1> 		  mov  BYTE [MBUTTON], bl
  5932 00004A91 E86DFDFFFF          <1> 		  call GETB
  5933 00004A96 A2[2B480000]        <1> 		  mov  BYTE [XCOORD], al
  5934 00004A9B E863FDFFFF          <1> 		  call GETB
  5935 00004AA0 A2[2C480000]        <1> 		  mov  BYTE [YCOORD], al
  5936                              <1> 
  5937                              <1> 	showpixelcursor:
  5938 00004AA5 668B15[F74B0000]    <1> 		mov dx, [mousecursorposition]
  5939 00004AAC 668B0D[F94B0000]    <1> 		mov cx, [mousecursorposition + 2]
  5940 00004AB3 668915[F34B0000]    <1> 		mov [lastmouseposition], dx
  5941 00004ABA 66890D[F54B0000]    <1> 		mov [lastmouseposition + 2], cx
  5942 00004AC1 A0[2B480000]        <1> 		mov al, [XCOORD]
  5943 00004AC6 3C80                <1> 		cmp al, 128
  5944 00004AC8 730C                <1> 		jae subxcoord
  5945 00004ACA 00C0                <1> 		add al, al
  5946 00004ACC 30E4                <1> 		xor ah, ah
  5947 00004ACE 6601C2              <1> 		add dx, ax
  5948 00004AD1 E90B000000          <1> 		jmp subxcoorddn
  5949                              <1> 	subxcoord:
  5950 00004AD6 00C0                <1> 		add al, al
  5951 00004AD8 30DB                <1> 		xor bl, bl
  5952 00004ADA 28C3                <1> 		sub bl, al
  5953 00004ADC 30FF                <1> 		xor bh, bh
  5954 00004ADE 6629DA              <1> 		sub dx, bx
  5955                              <1> 	subxcoorddn:
  5956 00004AE1 8A1D[2C480000]      <1> 		mov bl, [YCOORD]
  5957 00004AE7 30C0                <1> 		xor al, al
  5958 00004AE9 28D8                <1> 		sub al, bl
  5959 00004AEB 3C80                <1> 		cmp al, 128
  5960 00004AED 730A                <1> 		jae subycoord
  5961 00004AEF 30E4                <1> 		xor ah, ah
  5962 00004AF1 6601C1              <1> 		add cx, ax
  5963 00004AF4 E909000000          <1> 		jmp subycoorddn
  5964                              <1> 	subycoord:
  5965 00004AF9 30DB                <1> 		xor bl, bl
  5966 00004AFB 28C3                <1> 		sub bl, al
  5967 00004AFD 30FF                <1> 		xor bh, bh
  5968 00004AFF 6629D9              <1> 		sub cx, bx
  5969                              <1> 	subycoorddn:
  5970 00004B02 6681FA204E          <1> 		cmp dx, 20000
  5971 00004B07 7603                <1> 		jbe nooriginx2
  5972 00004B09 6631D2              <1> 		xor dx, dx
  5973                              <1> 	nooriginx2:
  5974 00004B0C 6681F9204E          <1> 		cmp cx, 20000
  5975 00004B11 7603                <1> 		jbe nooriginy2
  5976 00004B13 6631C9              <1> 		xor cx, cx
  5977                              <1> 	nooriginy2:
  5978 00004B16 6681FA0000          <1> 		cmp dx, 0
  5979 00004B1B 7415                <1> 		je nofixxcolumn2
  5980 00004B1D 663B15[1B5E0000]    <1> 		cmp dx, [resolutionx2]
  5981 00004B24 720C                <1> 		jb nofixxcolumn2
  5982 00004B26 668B15[1B5E0000]    <1> 		mov dx, [resolutionx2]
  5983 00004B2D 6681EA0200          <1> 		sub dx, 2
  5984                              <1> 	nofixxcolumn2:
  5985 00004B32 6681F90000          <1> 		cmp cx, 0
  5986 00004B37 7415                <1> 		je nofixyrow2
  5987 00004B39 663B0D[175E0000]    <1> 		cmp cx, [resolutiony]
  5988 00004B40 720C                <1> 		jb nofixyrow2
  5989 00004B42 668B0D[175E0000]    <1> 		mov cx, [resolutiony]
  5990 00004B49 6681E90100          <1> 		sub cx, 1
  5991                              <1> 	nofixyrow2:
  5992 00004B4E 668915[F74B0000]    <1> 		mov [mousecursorposition], dx
  5993 00004B55 66890D[F94B0000]    <1> 		mov [mousecursorposition + 2], cx
  5994 00004B5C 803D[5E4F0000]00    <1> 		cmp byte [guion], 0
  5995 00004B63 0F8492000000        <1> 		je near termmouse
  5996 00004B69 E84B040000          <1> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  5997 00004B6E 803D[28480000]01    <1> 		cmp byte [LBUTTON], 1
  5998 00004B75 0F8412050000        <1> 		je near clickicon
  5999 00004B7B 803D[29480000]01    <1> 		cmp byte [RBUTTON], 1
  6000 00004B82 0F8405050000        <1> 		je near clickicon
  6001 00004B88 A0[7A500000]        <1> 		mov al, [pbutton]
  6002 00004B8D C705[7D500000]0000- <1> 		mov dword [dragging], 0
  6003 00004B95 0000                <1>
  6004 00004B97 3C00                <1> 		cmp al, 0
  6005 00004B99 740F                <1> 		je nopreviousbutton
  6006 00004B9B E8BF030000          <1> 		call clearmousecursor
  6007 00004BA0 E8290A0000          <1> 		call reloadallgraphics
  6008                              <1> 	windowtermcopyend:
  6009 00004BA5 E86F040000          <1> 		call switchmousepos2
  6010                              <1> 	nopreviousbutton:
  6011 00004BAA 30C0                <1> 		xor al, al
  6012 00004BAC A2[7A500000]        <1> 		mov [pbutton], al
  6013 00004BB1 A0[28480000]        <1> 		mov al, [LBUTTON]
  6014 00004BB6 A2[7B500000]        <1> 		mov [pLBUTTON], al
  6015 00004BBB A0[29480000]        <1> 		mov al, [RBUTTON]
  6016 00004BC0 A2[7C500000]        <1> 		mov [pRBUTTON], al
  6017 00004BC5 31C9                <1> 		xor ecx, ecx
  6018 00004BC7 31D2                <1> 		xor edx, edx
  6019 00004BC9 668B15[F74B0000]    <1> 		mov dx, [mousecursorposition]
  6020 00004BD0 668B0D[F94B0000]    <1> 		mov cx, [mousecursorposition + 2]
  6021 00004BD7 66BB18C7            <1> 		mov bx, 1100011100011000b
  6022 00004BDB 30E4                <1> 		xor ah, ah
  6023 00004BDD B0FE                <1> 		mov al, 254
  6024 00004BDF C605[5B4F0000]01    <1> 		mov byte [showcursorfonton], 1
  6025 00004BE6 E840120000          <1> 		call showfontvesa
  6026 00004BEB C605[5B4F0000]00    <1> 		mov byte [showcursorfonton], 0
  6027 00004BF2 C3                  <1> 		ret
  6028                              <1> 
  6029 00004BF3 84008400            <1> lastmouseposition dw 132,132
  6030 00004BF7 84008400            <1> mousecursorposition dw 132,132	
  6031                              <1> 
  6032                              <1> termmouse:
  6033 00004BFB BE[8F1D0000]        <1> 		mov esi, videobuf
  6034 00004C00 31D2                <1> 		xor edx, edx
  6035 00004C02 668B15[F34B0000]    <1> 		mov dx, [lastmouseposition]
  6036 00004C09 668B0D[F54B0000]    <1> 		mov cx, [lastmouseposition + 2]
  6037 00004C10 66A1[8E4C0000]      <1> 		mov ax, [cursorcache]
  6038 00004C16 663D0000            <1> 		cmp ax, 0
  6039 00004C1A 7425                <1> 		je nocopycursorcache
  6040 00004C1C 66C1E104            <1> 		shl cx, 4
  6041 00004C20 66C1E203            <1> 		shl dx, 3
  6042 00004C24 01D6                <1> 		add esi, edx
  6043 00004C26 6631D2              <1> 		xor dx, dx
  6044 00004C29 8A15[AC270000]      <1> 		mov dl, [charxy]
  6045 00004C2F 6641                <1> 		inc cx
  6046                              <1> termmousecplp1:
  6047 00004C31 01D6                <1> 		add esi, edx
  6048 00004C33 6649                <1> 		dec cx
  6049 00004C35 6681F90000          <1> 		cmp cx, 0
  6050 00004C3A 75F5                <1> 		jne termmousecplp1
  6051 00004C3C 29D6                <1> 		sub esi, edx
  6052 00004C3E 668906              <1> 		mov [esi], ax
  6053                              <1> nocopycursorcache:
  6054 00004C41 BE[8F1D0000]        <1> 		mov esi, videobuf
  6055 00004C46 31D2                <1> 		xor edx, edx
  6056 00004C48 668B15[F74B0000]    <1> 		mov dx, [mousecursorposition]
  6057 00004C4F 668B0D[F94B0000]    <1> 		mov cx, [mousecursorposition + 2]
  6058 00004C56 66C1E104            <1> 		shl cx, 4
  6059 00004C5A 66C1E203            <1> 		shl dx, 3
  6060 00004C5E 01D6                <1> 		add esi, edx
  6061 00004C60 6631D2              <1> 		xor dx, dx
  6062 00004C63 8A15[AC270000]      <1> 		mov dl, [charxy]
  6063 00004C69 6641                <1> 		inc cx
  6064                              <1> termmousecplp2:
  6065 00004C6B 01D6                <1> 		add esi, edx
  6066 00004C6D 6649                <1> 		dec cx
  6067 00004C6F 6681F90000          <1> 		cmp cx, 0
  6068 00004C74 75F5                <1> 		jne termmousecplp2
  6069 00004C76 29D6                <1> 		sub esi, edx
  6070 00004C78 668B06              <1> 		mov ax, [esi]
  6071 00004C7B 66A3[8E4C0000]      <1> 		mov [cursorcache], ax
  6072 00004C81 B080                <1> 		mov al, 128
  6073 00004C83 B407                <1> 		mov ah, 7
  6074 00004C85 668906              <1> 		mov [esi], ax
  6075 00004C88 E8A3E0FFFF          <1> 		call termcopy
  6076 00004C8D C3                  <1> 		ret
  6077 00004C8E 0000                <1> cursorcache db 0,0
  6078                              <1> 	
  6079                              <1> scancode:
  6080 00004C90 000000000000        <1> 	db 0,0,0,0,0,0			;,0h
  6081 00004C96 000000000000        <1> 	db 0,0,0,0,0,0			;,1h
  6082 00004C9C 3121AD000000        <1> 	db '1','!',173,0,0,0	;,2h
  6083 00004CA2 3240FDFB0000        <1> 	db '2','@',253,251,0,0	;,3h
  6084 00004CA8 332300000000        <1> 	db '3','#',0,0,0,0		;,4h
  6085 00004CAE 34249B9C0000        <1> 	db '4','$',155,156,0,0	;,5h
  6086 00004CB4 3525EE000000        <1> 	db '5','%',238,0,0,0	;,6h
  6087 00004CBA 365EAC000000        <1> 	db '6','^',172,0,0,0	;,7h
  6088 00004CC0 3726AB000000        <1> 	db '7','&',171,0,0,0	;,8h
  6089 00004CC6 382A00000000        <1> 	db '8','*',0,0,0,0		;,9h
  6090 00004CCC 392800000000        <1> 	db '9','(',0,0,0,0		;,0Ah
  6091 00004CD2 302900000000        <1> 	db '0',')',0,0,0,0		;,0Bh
  6092 00004CD8 2D5F9DF10000        <1> 	db '-','_',157,241,0,0	;,0Ch
  6093 00004CDE 3D2BF7F60000        <1> 	db '=','+',247,246,0,0	;,0Dh
  6094 00004CE4 080800000000        <1> 	db 8,8,0,0,0,0			;,0Eh
  6095 00004CEA 000000000000        <1> 	db 0,0,0,0,0,0			;,0Fh
  6096 00004CF0 7151848E0000        <1> 	db 'q','Q',132,142,0,0	;,10h
  6097 00004CF6 7757868F0000        <1> 	db 'w','W',134,143,0,0	;,11h
  6098 00004CFC 65458290EE45        <1> 	db 'e','E',130,144,238,'E'	;,12h
  6099 00004D02 7252898A7050        <1> 	db 'r','R',137,138,'p','P'		;,13h
  6100 00004D08 7454819AE754        <1> 	db 't','T',129,154,231,'T'		;,14h
  6101 00004D0E 795998007559        <1> 	db 'y','Y',152,0,'u','Y'	;,15h
  6102 00004D14 7555A3970000        <1> 	db 'u','U',163,151,0,0	;,16h
  6103 00004D1A 6949A18D6949        <1> 	db 'i','I',161,141,'i','I'	;,17h
  6104 00004D20 6F4FA29577EA        <1> 	db 'o','O',162,149,'w',234	;,18h
  6105 00004D26 70509499E3EF        <1> 	db 'p','P',148,153,227,239	;,19h
  6106 00004D2C 5B7BF4000000        <1> 	db '[','{',244,0,0,0		;,1Ah
  6107 00004D32 5D7DF5000000        <1> 	db ']','}',245,0,0,0		;,1Bh
  6108 00004D38 000000000000        <1> 	db 0,0,0,0,0,0			;,1Ch
  6109 00004D3E 000000000000        <1> 	db 0,0,0,0,0,0			;,1Dh
  6110 00004D44 6141A085E041        <1> 	db 'a','A',160,133,224,'A'	;,1Eh
  6111 00004D4A 73531500E5E4        <1> 	db 's','S',21,0,229,228		;,1Fh
  6112 00004D50 6444F800EB7F        <1> 	db 'd','D',248,0,235,127	;,20h
  6113 00004D56 66469F00EDE8        <1> 	db 'f','F',159,0,237,232	;,21h
  6114 00004D5C 6747000079E2        <1> 	db 'g','G',0,0,'y',226		;,22h
  6115 00004D62 684800006E48        <1> 	db 'h','H',0,0,'n','H'		;,23h
  6116 00004D68 6A4A00000000        <1> 	db 'j','J',0,0,0,0		;,24h
  6117 00004D6E 6B4B00006B4B        <1> 	db 'k','K',0,0,'k','K'		;,25h
  6118 00004D74 6C4C0000E9E9        <1> 	db 'l','L',0,0,233,233		;,26h
  6119 00004D7A 3B3A14000000        <1> 	db ';',':',20,0,0,0		;,27h
  6120 00004D80 272200000000        <1> 	db 27h,22h,0,0,0,0		;,28h
  6121 00004D86 607E00000000        <1> 	db '`','~',0,0,0,0		;,29h
  6122 00004D8C 000000000000        <1> 	db 0,0,0,0,0,0			;,2Ah
  6123 00004D92 5C7CAAB30000        <1> 	db '\','|',170,179,0,0	;,2Bh
  6124 00004D98 7A5A91927A5A        <1> 	db 'z','Z',145,146,'z','Z'	;,2Ch
  6125 00004D9E 7858000000F0        <1> 	db 'x','X',0,0,0,240		;,2Dh
  6126 00004DA4 634387800000        <1> 	db 'c','C',135,128,0,0	;,2Eh
  6127 00004DAA 765600000000        <1> 	db 'v','V',0,0,0,0		;,2Fh
  6128 00004DB0 62420000E142        <1> 	db 'b','B',0,0,225,'B'	;,30h
  6129 00004DB6 6E4EA4A5764E        <1> 	db 'n','N',164,165,'v','N'	;,31h
  6130 00004DBC 6D4D0000E64D        <1> 	db 'm','M',0,0,230,'M'		;,32h
  6131 00004DC2 2C3CF3AE0000        <1> 	db ',','<',243,174,0,0	;,33h
  6132 00004DC8 2E3EF2AF0000        <1> 	db '.','>',242,175,0,0	;,34h
  6133 00004DCE 2F3FA8000000        <1> 	db '/','?',168,0,0,0	;,35h
  6134 00004DD4 000000000000        <1> 	db 0,0,0,0,0,0			;,36h
  6135 00004DDA 000000000000        <1> 	db 0,0,0,0,0,0			;,37h
  6136 00004DE0 000000000000        <1> 	db 0,0,0,0,0,0			;,38h
  6137 00004DE6 202000000000        <1> 	db ' ',' ',0,0,0,0		;,39h
  6138                              <1> noscan:
  6139                                      %include 'source/gui.asm'
  6140                              <1> guiclear:
  6141 00004DEC 8B3D[A1850000]      <1> 	mov edi, [physbaseptr]
  6142 00004DF2 668B15[195E0000]    <1> 	mov dx, [resolutionx]
  6143 00004DF9 668B0D[175E0000]    <1> 	mov cx, [resolutiony]
  6144 00004E00 66A1[294E0000]      <1> 	mov ax, [background]
  6145                              <1> guiclearloop:
  6146 00004E06 668907              <1> 	mov [edi], ax
  6147 00004E09 81C702000000        <1> 	add edi, 2
  6148 00004E0F 664A                <1> 	dec dx
  6149 00004E11 6681FA0000          <1> 	cmp dx, 0
  6150 00004E16 77EE                <1> 	ja guiclearloop
  6151 00004E18 6649                <1> 	dec cx
  6152 00004E1A 668B15[195E0000]    <1> 	mov dx, [resolutionx]
  6153 00004E21 6681F90000          <1> 	cmp cx, 0
  6154 00004E26 77DE                <1> 	ja guiclearloop
  6155 00004E28 C3                  <1> 	ret
  6156                              <1> 
  6157 00004E29 CF7B                <1> background dw 0111101111001111b
  6158                              <1> 
  6159                              <1> gui:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  6160 00004E2B 31C0                <1> 	xor eax, eax
  6161 00004E2D 31DB                <1> 	xor ebx, ebx
  6162 00004E2F 31C9                <1> 	xor ecx, ecx
  6163 00004E31 31D2                <1> 	xor edx, edx
  6164 00004E33 8B3D[A1850000]      <1> 	mov edi, [physbaseptr]
  6165 00004E39 668B15[195E0000]    <1> 	mov dx, [resolutionx]
  6166 00004E40 668B0D[175E0000]    <1> 	mov cx, [resolutiony]
  6167 00004E47 668B1D[294E0000]    <1> 	mov bx, [background]
  6168                              <1> guiclearloop2:
  6169 00004E4E 66891F              <1> 	mov [edi], bx
  6170 00004E51 81C702000000        <1> 	add edi, 2
  6171 00004E57 664A                <1> 	dec dx
  6172 00004E59 6681FA0000          <1> 	cmp dx, 0
  6173 00004E5E 0F85EAFFFFFF        <1> 	jne near guiclearloop2
  6174 00004E64 6649                <1> 	dec cx
  6175 00004E66 668B15[195E0000]    <1> 	mov dx, [resolutionx]
  6176 00004E6D 6681F90000          <1> 	cmp cx, 0
  6177 00004E72 0F85D6FFFFFF        <1> 	jne near guiclearloop2
  6178 00004E78 C605[5E4F0000]01    <1> 	mov byte [guion], 1
  6179 00004E7F C605[5D4F0000]00    <1> 	mov byte [mouseselecton], 0
  6180 00004E86 31C0                <1> 	xor eax, eax
  6181 00004E88 31DB                <1> 	xor ebx, ebx
  6182 00004E8A 31C9                <1> 	xor ecx, ecx
  6183 00004E8C 31D2                <1> 	xor edx, edx
  6184                              <1> 	
  6185 00004E8E BE[EA600000]        <1> 	mov esi, pacmsg
  6186 00004E93 6631C0              <1> 	xor ax, ax
  6187 00004E96 31DB                <1> 	xor ebx, ebx
  6188 00004E98 66B99000            <1> 	mov cx, 144
  6189 00004E9C 66BA0400            <1> 	mov dx, 4
  6190 00004EA0 E86A0A0000          <1> 	call showstring
  6191                              <1> 	
  6192 00004EA5 BE[59620000]        <1> 	mov esi, interneticon
  6193 00004EAA 6631C0              <1> 	xor ax, ax
  6194 00004EAD BB[57610000]        <1> 	mov ebx, noie
  6195 00004EB2 66B91800            <1> 	mov cx, 24
  6196 00004EB6 66BA0400            <1> 	mov dx, 4
  6197 00004EBA E88C0E0000          <1> 	call showicon
  6198                              <1> 	
  6199 00004EBF BE[DB620000]        <1> 	mov esi, wordicon
  6200 00004EC4 6631C0              <1> 	xor ax, ax
  6201 00004EC7 31DB                <1> 	xor ebx, ebx
  6202 00004EC9 66B91800            <1> 	mov cx, 24
  6203 00004ECD 66BA3000            <1> 	mov dx, 48
  6204 00004ED1 E8750E0000          <1> 	call showicon
  6205                              <1> 	
  6206 00004ED6 BE[5D630000]        <1> 	mov esi, pacmanpellet
  6207 00004EDB 6631C0              <1> 	xor ax, ax
  6208 00004EDE 31DB                <1> 	xor ebx, ebx
  6209 00004EE0 66B94000            <1> 	mov cx, 64
  6210 00004EE4 66BA0400            <1> 	mov dx, 4
  6211 00004EE8 E85E0E0000          <1> 	call showicon
  6212                              <1> 	
  6213 00004EED BE[61640000]        <1> 	mov esi, pacman
  6214 00004EF2 6631C0              <1> 	xor ax, ax
  6215 00004EF5 BB[40610000]        <1> 	mov ebx, pacmannomnom
  6216 00004EFA 66B94000            <1> 	mov cx, 64
  6217 00004EFE 66BA3000            <1> 	mov dx, 48
  6218 00004F02 E8440E0000          <1> 	call showicon
  6219                              <1> 	
  6220 00004F07 BE[DF630000]        <1> 	mov esi, ghostie
  6221 00004F0C 6631C0              <1> 	xor ax, ax
  6222 00004F0F BB[29610000]        <1> 	mov ebx, boo
  6223 00004F14 66B96C00            <1> 	mov cx, 108
  6224 00004F18 66BA0400            <1> 	mov dx, 4
  6225 00004F1C E82A0E0000          <1> 	call showicon
  6226                              <1> 
  6227 00004F21 BE[D6600000]        <1> 	mov esi, start
  6228 00004F26 668B0D[175E0000]    <1> 	mov cx, [resolutiony]
  6229 00004F2D 6681E91000          <1> 	sub cx, 16
  6230 00004F32 66BA0200            <1> 	mov dx, 2
  6231 00004F36 30E4                <1> 	xor ah, ah
  6232 00004F38 B010                <1> 	mov al, 00010000b
  6233 00004F3A BB[06620000]        <1> 	mov ebx, winblows
  6234 00004F3F E8CB090000          <1> 	call showstring
  6235                              <1> 	
  6236 00004F44 E8CCFAFFFF          <1> 	call cursorgui
  6237                              <1> guistart:
  6238 00004F49 E805F9FFFF          <1> 	call guistartin
  6239 00004F4E C605[574F0000]00    <1> 	mov byte [copygui], 0
  6240 00004F55 EBF2                <1> 	jmp guistart
  6241                              <1> 	
  6242                              <1> ;guicopy:	;;for double buffering
  6243                              <1> ;	mov byte [copygui], 1
  6244                              <1> ;	mov edi, [offscreenmemoffset]
  6245                              <1> ;	xor edx, edx
  6246                              <1> ;	xor ecx, ecx
  6247                              <1> ;	mov dx, [mousecursorposition]
  6248                              <1> ;	mov cx, [mousecursorposition + 2]
  6249                              <1> ;	add edi, edx
  6250                              <1> ;	mov dx, [resolutionx2]
  6251                              <1> ;	inc cx
  6252                              <1> ;guicp2:
  6253                              <1> ;	add edi, edx
  6254                              <1> ;	dec cx
  6255                              <1> ;	cmp cx, 0
  6256                              <1> ;	jne guicp2
  6257                              <1> ;	sub edi, edx
  6258                              <1> ;	mov [cursorloc], edi
  6259                              <1> ;	mov ebx, cursorbmp
  6260                              <1> ;	mov cx, [resolutiony]
  6261                              <1> ;	rol ecx, 16
  6262                              <1> ;	mov cx, [resolutionx]
  6263                              <1> ;	mov esi, [physbaseptr]
  6264                              <1> ;	mov edi, [offscreenmemoffset]
  6265                              <1> ;guicp1:
  6266                              <1> ;	mov ax, [esi]
  6267                              <1> ;	mov [edi], ax
  6268                              <1> ;	add esi, 2
  6269                              <1> ;	add edi, 2
  6270                              <1> ;	cmp edi, [cursorloc]
  6271                              <1> ;	je copycursor
  6272                              <1> ;dncopycursor:
  6273                              <1> ;	dec cx
  6274                              <1> ;	cmp cx, 0
  6275                              <1> ;	jne guicp1
  6276                              <1> ;	mov cx, [resolutionx]
  6277                              <1> ;	rol ecx, 16
  6278                              <1> ;	dec cx
  6279                              <1> ;	cmp cx, 0
  6280                              <1> ;	rol ecx, 16
  6281                              <1> ;	jne guicp1
  6282                              <1> ;	mov byte [copygui], 0
  6283                              <1> ;	ret
  6284                              <1> ;copycursor:
  6285                              <1> ;	cmp ebx, cursorbmpend
  6286                              <1> ;	jae dncopycursor
  6287                              <1> ;	mov dx, [resolutionx2]
  6288                              <1> ;	add edi, edx
  6289                              <1> ;	mov [cursorloc], edi
  6290                              <1> ;	sub edi, edx
  6291                              <1> ;	dec ebx
  6292                              <1> ;	sub edi, 2
  6293                              <1> ;	sub esi, 2
  6294                              <1> ;	mov dx, 9
  6295                              <1> ;curscplp:
  6296                              <1> ;	inc ebx
  6297                              <1> ;	add esi, 2
  6298                              <1> ;	add edi, 2
  6299                              <1> ;	mov ax, [esi]
  6300                              <1> ;	mov [edi], ax
  6301                              <1> ;	mov al, [ebx]
  6302                              <1> ;	cmp al, 0
  6303                              <1> ;	je curscplp2
  6304                              <1> ;	mov word [edi], 1110011110011100b
  6305                              <1> ;curscplp2:
  6306                              <1> ;	dec cx
  6307                              <1> ;	cmp cx, 0
  6308                              <1> ;	je dncopycursor
  6309                              <1> ;	dec dx
  6310                              <1> ;	cmp dx, 0
  6311                              <1> ;	jne curscplp
  6312                              <1> ;	jmp dncopycursor
  6313                              <1> 	
  6314                              <1> 	
  6315                              <1> ;cursorloc: dd 0
  6316                              <1> 		
  6317                              <1> ;nextimage:	
  6318                              <1> ;	call guiclear
  6319                              <1> ;	mov esi, [bmpend]
  6320                              <1> ;	xor eax, eax
  6321                              <1> ;	xor ebx, ebx
  6322                              <1> ;	xor ecx, ecx
  6323                              <1> ;	xor edx, edx
  6324                              <1> ;	call showbmp
  6325                              <1> ;	jmp guistartin
  6326                              <1> 		
  6327 00004F57 00                  <1> copygui db 0
  6328 00004F58 00                  <1> graphicsset db 0
  6329 00004F59 0000                <1> graphicspos db 0,0
  6330 00004F5B 00                  <1> showcursorfonton db 0
  6331 00004F5C 00                  <1> savefonton db 0
  6332 00004F5D 00                  <1> mouseselecton db 0
  6333 00004F5E 00                  <1> guion db 0
  6334                              <1> 
  6335                              <1> 		
  6336                              <1> clearmousecursor:
  6337 00004F5F BE[294E0000]        <1> 		mov esi, background
  6338 00004F64 8B3D[A1850000]      <1> 		mov edi, [physbaseptr]
  6339 00004F6A 31D2                <1> 		xor edx, edx
  6340 00004F6C 31C9                <1> 		xor ecx, ecx
  6341 00004F6E 668B15[F34B0000]    <1> 		mov dx, [lastmouseposition]
  6342 00004F75 668B0D[F54B0000]    <1> 		mov cx, [lastmouseposition + 2]
  6343 00004F7C 01D7                <1> 		add edi, edx
  6344 00004F7E 31D2                <1> 		xor edx, edx
  6345 00004F80 668B15[1B5E0000]    <1> 		mov dx, [resolutionx2]
  6346 00004F87 6681F90000          <1> 		cmp cx, 0
  6347 00004F8C 740B                <1> 		je noyclr
  6348 00004F8E 01D7                <1> yclr:	add edi, edx
  6349 00004F90 6649                <1> 		dec cx
  6350 00004F92 6681F90000          <1> 		cmp cx, 0
  6351 00004F97 75F5                <1> 		jne yclr
  6352 00004F99 668B06              <1> noyclr:	mov ax, [esi]
  6353 00004F9C C1C010              <1> 		rol eax, 16
  6354 00004F9F 668B06              <1> 		mov ax, [esi]
  6355 00004FA2 8907                <1> 		mov [edi], eax
  6356 00004FA4 894704              <1> 		mov [edi + 4], eax
  6357 00004FA7 894708              <1> 		mov [edi + 8], eax
  6358 00004FAA 89470C              <1> 		mov [edi + 12], eax
  6359 00004FAD 01D7                <1> 		add edi, edx
  6360 00004FAF 6641                <1> 		inc cx
  6361 00004FB1 6681F91000          <1> 		cmp cx, 16
  6362 00004FB6 72E1                <1> 		jb noyclr
  6363 00004FB8 C3                  <1> 		ret
  6364                              <1> 
  6365                              <1> switchmousepos:		;;switch were the mouse is located
  6366 00004FB9 BE[00120000]        <1> 		mov esi, mousecolorbuf
  6367 00004FBE 8B3D[A1850000]      <1> 		mov edi, [physbaseptr]
  6368 00004FC4 31D2                <1> 		xor edx, edx
  6369 00004FC6 31C9                <1> 		xor ecx, ecx
  6370 00004FC8 668B15[F34B0000]    <1> 		mov dx, [lastmouseposition]
  6371 00004FCF 668B0D[F54B0000]    <1> 		mov cx, [lastmouseposition + 2]
  6372 00004FD6 01D7                <1> 		add edi, edx
  6373 00004FD8 31D2                <1> 		xor edx, edx
  6374 00004FDA 668B15[1B5E0000]    <1> 		mov dx, [resolutionx2]
  6375 00004FE1 6681F90000          <1> 		cmp cx, 0
  6376 00004FE6 740B                <1> 		je noswmsy
  6377 00004FE8 01D7                <1> swmsy:		add edi, edx
  6378 00004FEA 6649                <1> 		dec cx
  6379 00004FEC 6681F90000          <1> 		cmp cx, 0
  6380 00004FF1 75F5                <1> 		jne swmsy
  6381 00004FF3 8B06                <1> noswmsy:	mov eax, [esi]
  6382 00004FF5 8B5E04              <1> 		mov ebx, [esi + 4]
  6383 00004FF8 8907                <1> 		mov [edi], eax
  6384 00004FFA 895F04              <1> 		mov [edi + 4], ebx
  6385 00004FFD 8B4608              <1> 		mov eax, [esi + 8]
  6386 00005000 8B5E0C              <1> 		mov ebx, [esi + 12]
  6387 00005003 894708              <1> 		mov [edi + 8], eax
  6388 00005006 895F0C              <1> 		mov [edi + 12], ebx
  6389 00005009 01D7                <1> 		add edi, edx
  6390 0000500B 81C610000000        <1> 		add esi, 16
  6391 00005011 81FE[00130000]      <1> 		cmp esi, mcolorend
  6392 00005017 72DA                <1> 		jb noswmsy
  6393                              <1> 		
  6394                              <1> switchmousepos2:
  6395 00005019 BE[00120000]        <1> 		mov esi, mousecolorbuf
  6396 0000501E 8B3D[A1850000]      <1> 		mov edi, [physbaseptr]
  6397 00005024 31D2                <1> 		xor edx, edx
  6398 00005026 31C9                <1> 		xor ecx, ecx
  6399 00005028 668B15[F74B0000]    <1> 		mov dx, [mousecursorposition]
  6400 0000502F 668B0D[F94B0000]    <1> 		mov cx, [mousecursorposition + 2]
  6401 00005036 01D7                <1> 		add edi, edx
  6402 00005038 31D2                <1> 		xor edx, edx
  6403 0000503A 668B15[1B5E0000]    <1> 		mov dx, [resolutionx2]
  6404 00005041 6681F90000          <1> 		cmp cx, 0
  6405 00005046 740B                <1> 		je noswmsy2
  6406 00005048 01D7                <1> swmsy2:		add edi, edx
  6407 0000504A 6649                <1> 		dec cx
  6408 0000504C 6681F90000          <1> 		cmp cx, 0
  6409 00005051 75F5                <1> 		jne swmsy2
  6410 00005053 8B07                <1> noswmsy2:	mov eax, [edi]
  6411 00005055 8B5F04              <1> 		mov ebx, [edi + 4]
  6412 00005058 8906                <1> 		mov [esi], eax
  6413 0000505A 895E04              <1> 		mov [esi + 4], ebx
  6414 0000505D 8B4708              <1> 		mov eax, [edi + 8]
  6415 00005060 8B5F0C              <1> 		mov ebx, [edi + 12]
  6416 00005063 894608              <1> 		mov [esi + 8], eax
  6417 00005066 895E0C              <1> 		mov [esi + 12], ebx
  6418 00005069 01D7                <1> 		add edi, edx
  6419 0000506B 81C610000000        <1> 		add esi, 16
  6420 00005071 81FE[00130000]      <1> 		cmp esi, mcolorend
  6421 00005077 72DA                <1> 		jb noswmsy2
  6422 00005079 C3                  <1> 		ret
  6423                              <1> 
  6424 0000507A 00                  <1> pbutton db 0
  6425 0000507B 00                  <1> pLBUTTON db 0
  6426 0000507C 00                  <1> pRBUTTON db 0
  6427 0000507D 00000000            <1> dragging dw 0,0
  6428 00005081 0000000000000000    <1> lastpos dw 0,0,0,0
  6429 00005089 00000000            <1> colorbuf dw 0,0
  6430                              <1> 	
  6431                              <1> 	clickicon:
  6432 0000508D B001                <1> 		mov al, 1
  6433 0000508F A2[7A500000]        <1> 		mov [pbutton], al
  6434 00005094 A0[7B500000]        <1> 		mov al, [pLBUTTON]
  6435 00005099 2205[28480000]      <1> 		and al, [LBUTTON]
  6436 0000509F 8A25[7C500000]      <1> 		mov ah, [pRBUTTON]
  6437 000050A5 2225[29480000]      <1> 		and ah, [RBUTTON]
  6438 000050AB 08E0                <1> 		or al, ah
  6439 000050AD 3C00                <1> 		cmp al, 0
  6440 000050AF 741B                <1> 		je nodragclick
  6441 000050B1 813D[7D500000]0100- <1> 		cmp dword [dragging], 1
  6442 000050B9 0000                <1>
  6443 000050BB 732D                <1> 		jae dragclick
  6444 000050BD C705[7D500000]0100- <1> 		mov dword [dragging], 1
  6445 000050C5 0000                <1>
  6446 000050C7 E91E000000          <1> 		jmp dragclick
  6447                              <1> 	nodragclick:
  6448 000050CC C705[7D500000]0000- <1> 		mov dword [dragging], 0
  6449 000050D4 0000                <1>
  6450 000050D6 A0[28480000]        <1> 		mov al, [LBUTTON]
  6451 000050DB A2[7B500000]        <1> 		mov [pLBUTTON], al
  6452 000050E0 A0[29480000]        <1> 		mov al, [RBUTTON]
  6453 000050E5 A2[7C500000]        <1> 		mov [pRBUTTON], al
  6454                              <1> 	dragclick:
  6455 000050EA 6631C0              <1> 		xor ax, ax
  6456 000050ED BE[00100000]        <1> 		mov esi, graphicstable
  6457 000050F2 C705[24610000]0000- <1> 		mov dword [codepointer], 0
  6458 000050FA 0000                <1>
  6459                              <1> 	clicon2:
  6460 000050FC 31D2                <1> 		xor edx, edx
  6461 000050FE 31C9                <1> 		xor ecx, ecx
  6462 00005100 66813E0100          <1> 		cmp word [esi], 1
  6463 00005105 0F841B000000        <1> 		je near iconselect
  6464 0000510B 66813E0200          <1> 		cmp word [esi], 2
  6465 00005110 0F8472010000        <1> 		je near textselected
  6466 00005116 66813E0300          <1> 		cmp word [esi], 3
  6467 0000511B 0F84C7020000        <1> 		je near windowselect
  6468 00005121 E90B040000          <1> 		jmp nexticonsel
  6469                              <1> 	iconselect:
  6470 00005126 668B5606            <1> 		mov dx, [esi + 6]
  6471 0000512A 6689D0              <1> 		mov ax, dx
  6472 0000512D 668B4E08            <1> 		mov cx, [esi + 8]
  6473 00005131 6689CB              <1> 		mov bx, cx
  6474 00005134 6681C32000          <1> 		add bx, 32
  6475 00005139 6601D0              <1> 		add ax, dx
  6476 0000513C 813D[7D500000]0100- <1> 		cmp dword [dragging], 1
  6477 00005144 0000                <1>
  6478 00005146 746F                <1> 		je dragicon
  6479 00005148 813D[7D500000]0000- <1> 		cmp dword [dragging], 0
  6480 00005150 0000                <1>
  6481 00005152 7411                <1> 		je nodragiconcheck
  6482 00005154 3935[7D500000]      <1> 		cmp dword [dragging], esi
  6483 0000515A 0F85D1030000        <1> 		jne near nexticonsel
  6484 00005160 E952000000          <1> 		jmp dragicon
  6485                              <1> 	nodragiconcheck:
  6486 00005165 663905[F74B0000]    <1> 		cmp [mousecursorposition], ax
  6487 0000516C 0F82BF030000        <1> 		jb near nexticonsel
  6488 00005172 66054000            <1> 		add ax, 64
  6489 00005176 663905[F74B0000]    <1> 		cmp [mousecursorposition], ax
  6490 0000517D 0F87AE030000        <1> 		ja near nexticonsel
  6491 00005183 6629D0              <1> 		sub ax, dx
  6492 00005186 66390D[F94B0000]    <1> 		cmp [mousecursorposition + 2], cx
  6493 0000518D 0F829E030000        <1> 		jb near nexticonsel
  6494 00005193 66391D[F94B0000]    <1> 		cmp [mousecursorposition + 2], bx
  6495 0000519A 0F8791030000        <1> 		ja near nexticonsel
  6496 000051A0 668B460A            <1> 		mov ax, [esi + 10]
  6497 000051A4 66250100            <1> 		and ax, 1
  6498 000051A8 663D0100            <1> 		cmp ax, 1
  6499 000051AC 0F84B6000000        <1> 		je near unselecticon
  6500 000051B2 E98D000000          <1> 		jmp nodragicon
  6501                              <1> 	dragicon:
  6502 000051B7 663905[F34B0000]    <1> 		cmp [lastmouseposition], ax
  6503 000051BE 0F826D030000        <1> 		jb near nexticonsel
  6504 000051C4 66054000            <1> 		add ax, 64
  6505 000051C8 663905[F34B0000]    <1> 		cmp [lastmouseposition], ax
  6506 000051CF 0F875C030000        <1> 		ja near nexticonsel
  6507 000051D5 6629D0              <1> 		sub ax, dx
  6508 000051D8 66390D[F54B0000]    <1> 		cmp [lastmouseposition + 2], cx
  6509 000051DF 0F824C030000        <1> 		jb near nexticonsel
  6510 000051E5 66391D[F54B0000]    <1> 		cmp [lastmouseposition + 2], bx
  6511 000051EC 0F873F030000        <1> 		ja near nexticonsel
  6512 000051F2 668B460A            <1> 		mov ax, [esi + 10]
  6513 000051F6 2410                <1> 		and al, 00010000b
  6514 000051F8 3C10                <1> 		cmp al, 00010000b
  6515 000051FA 7448                <1> 		je nodragicon
  6516 000051FC 8935[7D500000]      <1> 		mov [dragging], esi
  6517 00005202 66D1E2              <1> 		shl dx, 1
  6518 00005205 662B15[F34B0000]    <1> 		sub dx, [lastmouseposition]
  6519 0000520C 660315[F74B0000]    <1> 		add dx, [mousecursorposition]
  6520 00005213 66D1EA              <1> 		shr dx, 1
  6521 00005216 66030D[F94B0000]    <1> 		add cx, [mousecursorposition + 2]
  6522 0000521D 662B0D[F54B0000]    <1> 		sub cx, [lastmouseposition + 2]
  6523 00005224 663B15[1B5E0000]    <1> 		cmp dx, [resolutionx2]
  6524 0000522B 7607                <1> 		jbe chkyresdrgicn
  6525 0000522D 668B15[F74B0000]    <1> 		mov dx, [mousecursorposition]
  6526                              <1> 	chkyresdrgicn:
  6527 00005234 663B0D[175E0000]    <1> 		cmp cx, [resolutiony]
  6528 0000523B 7607                <1> 		jbe nodragicon
  6529 0000523D 668B0D[F94B0000]    <1> 		mov cx, [mousecursorposition + 2]
  6530                              <1> 	nodragicon:
  6531 00005244 66814E0A0100        <1> 		or word [esi + 10], 1
  6532 0000524A 8B5E0C              <1> 		mov ebx, [esi + 12]
  6533 0000524D 668B460A            <1> 		mov ax, [esi + 10]
  6534 00005251 8B7602              <1> 		mov esi, [esi + 2]
  6535 00005254 C705[24610000]0000- <1> 		mov dword [codepointer], 0
  6536 0000525C 0000                <1>
  6537 0000525E E8E80A0000          <1> 		call showicon
  6538 00005263 E9E2020000          <1> 		jmp doneiconsel
  6539                              <1> 	unselecticon:
  6540 00005268 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  6541 0000526E 8B5E0C              <1> 		mov ebx, [esi + 12]
  6542 00005271 668B460A            <1> 		mov ax, [esi + 10]
  6543 00005275 8B7602              <1> 		mov esi, [esi + 2]
  6544 00005278 891D[24610000]      <1> 		mov [codepointer], ebx
  6545 0000527E E8C80A0000          <1> 		call showicon
  6546 00005283 E9C2020000          <1> 		jmp doneiconsel
  6547                              <1> 	textselected:
  6548 00005288 8B5E02              <1> 		mov ebx, [esi + 2]
  6549 0000528B 668B5606            <1> 		mov dx, [esi + 6]
  6550 0000528F 6689D0              <1> 		mov ax, dx
  6551 00005292 668B4E08            <1> 		mov cx, [esi + 8]
  6552                              <1> 	lengthtesttext:
  6553 00005296 803B00              <1> 		cmp byte [ebx], 0
  6554 00005299 7407                <1> 		je donetesttextlength
  6555 0000529B 43                  <1> 		inc ebx
  6556 0000529C 66051000            <1> 		add ax, 16
  6557 000052A0 EBF4                <1> 		jmp lengthtesttext
  6558                              <1> 	donetesttextlength:
  6559 000052A2 6689CB              <1> 		mov bx, cx
  6560 000052A5 6681C30F00          <1> 		add bx, 15
  6561 000052AA 813D[7D500000]0100- <1> 		cmp dword [dragging], 1
  6562 000052B2 0000                <1>
  6563 000052B4 7468                <1> 		je dragtext
  6564 000052B6 813D[7D500000]0000- <1> 		cmp dword [dragging], 0
  6565 000052BE 0000                <1>
  6566 000052C0 7411                <1> 		je nodragtextcheck
  6567 000052C2 3935[7D500000]      <1> 		cmp dword [dragging], esi
  6568 000052C8 0F8563020000        <1> 		jne near nexticonsel
  6569 000052CE E94B000000          <1> 		jmp dragtext
  6570                              <1> 	nodragtextcheck:
  6571 000052D3 663915[F74B0000]    <1> 		cmp [mousecursorposition], dx
  6572 000052DA 0F8251020000        <1> 		jb near nexticonsel
  6573 000052E0 663905[F74B0000]    <1> 		cmp [mousecursorposition], ax
  6574 000052E7 0F8744020000        <1> 		ja near nexticonsel
  6575 000052ED 66390D[F94B0000]    <1> 		cmp [mousecursorposition + 2], cx
  6576 000052F4 0F8237020000        <1> 		jb near nexticonsel
  6577 000052FA 66391D[F94B0000]    <1> 		cmp [mousecursorposition + 2], bx
  6578 00005301 0F872A020000        <1> 		ja near nexticonsel
  6579 00005307 668B460A            <1> 		mov ax, [esi + 10]
  6580 0000530B 66250100            <1> 		and ax, 1
  6581 0000530F 663D0100            <1> 		cmp ax, 1
  6582 00005313 0F84AB000000        <1> 		je near unselecttext
  6583 00005319 E986000000          <1> 		jmp nodragtext
  6584                              <1> 	dragtext:
  6585 0000531E 663915[F34B0000]    <1> 		cmp [lastmouseposition], dx
  6586 00005325 0F8206020000        <1> 		jb near nexticonsel
  6587 0000532B 663905[F34B0000]    <1> 		cmp [lastmouseposition], ax
  6588 00005332 0F87F9010000        <1> 		ja near nexticonsel
  6589 00005338 66390D[F54B0000]    <1> 		cmp [lastmouseposition + 2], cx
  6590 0000533F 0F82EC010000        <1> 		jb near nexticonsel
  6591 00005345 66391D[F54B0000]    <1> 		cmp [lastmouseposition + 2], bx
  6592 0000534C 0F87DF010000        <1> 		ja near nexticonsel
  6593 00005352 668B460A            <1> 		mov ax, [esi + 10]
  6594 00005356 2410                <1> 		and al, 00010000b
  6595 00005358 663D1000            <1> 		cmp ax, 00010000b
  6596 0000535C 0F8442000000        <1> 		je near nodragtext
  6597 00005362 8935[7D500000]      <1> 		mov [dragging], esi
  6598 00005368 662B15[F34B0000]    <1> 		sub dx, [lastmouseposition]
  6599 0000536F 660315[F74B0000]    <1> 		add dx, [mousecursorposition]
  6600 00005376 66030D[F94B0000]    <1> 		add cx, [mousecursorposition + 2]
  6601 0000537D 662B0D[F54B0000]    <1> 		sub cx, [lastmouseposition + 2]
  6602 00005384 663B15[1B5E0000]    <1> 		cmp dx, [resolutionx2]
  6603 0000538B 7607                <1> 		jbe chkyresdrgtxt
  6604 0000538D 668B15[F74B0000]    <1> 		mov dx, [mousecursorposition]
  6605                              <1> 	chkyresdrgtxt:
  6606 00005394 663B0D[175E0000]    <1> 		cmp cx, [resolutiony]
  6607 0000539B 7607                <1> 		jbe nodragtext
  6608 0000539D 668B0D[F94B0000]    <1> 		mov cx, [mousecursorposition + 2]
  6609                              <1> 	nodragtext:
  6610 000053A4 66814E0A0100        <1> 		or word [esi + 10], 1
  6611 000053AA 8B5E0C              <1> 		mov ebx, [esi + 12]
  6612 000053AD 891D[24610000]      <1> 		mov [codepointer], ebx
  6613 000053B3 668B460A            <1> 		mov ax, [esi + 10]
  6614 000053B7 8B7602              <1> 		mov esi, [esi + 2]
  6615 000053BA E850050000          <1> 		call showstring
  6616 000053BF E986010000          <1> 		jmp doneiconsel
  6617                              <1> 	unselecttext:
  6618 000053C4 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  6619 000053CA 8B5E0C              <1> 		mov ebx, [esi + 12]
  6620 000053CD 668B460A            <1> 		mov ax, [esi + 10]
  6621 000053D1 8B7602              <1> 		mov esi, [esi + 2]
  6622 000053D4 C705[24610000]0000- <1> 		mov dword [codepointer], 0
  6623 000053DC 0000                <1>
  6624 000053DE E82C050000          <1> 		call showstring
  6625 000053E3 E962010000          <1> 		jmp doneiconsel
  6626                              <1> windowselect:
  6627 000053E8 8B7E02              <1> 		mov edi, [esi + 2]
  6628 000053EB 668B5606            <1> 		mov dx, [esi + 6]
  6629 000053EF 6689D0              <1> 		mov ax, dx
  6630 000053F2 668B4E08            <1> 		mov cx, [esi + 8]
  6631 000053F6 6689CB              <1> 		mov bx, cx
  6632 000053F9 6681C31000          <1> 		add bx, 16
  6633 000053FE 813D[7D500000]0100- <1> 		cmp dword [dragging], 1
  6634 00005406 0000                <1>
  6635 00005408 746D                <1> 		je dragwin
  6636 0000540A 813D[7D500000]0000- <1> 		cmp dword [dragging], 0
  6637 00005412 0000                <1>
  6638 00005414 7411                <1> 		je nodragwincheck
  6639 00005416 3935[7D500000]      <1> 		cmp dword [dragging], esi
  6640 0000541C 0F850F010000        <1> 		jne near nexticonsel
  6641 00005422 E950000000          <1> 		jmp dragwin
  6642                              <1> 	nodragwincheck:
  6643 00005427 663905[F74B0000]    <1> 		cmp [mousecursorposition], ax
  6644 0000542E 0F82FD000000        <1> 		jb near nexticonsel
  6645 00005434 660307              <1> 		add ax, [edi]
  6646 00005437 660307              <1> 		add ax, [edi]
  6647 0000543A 663905[F74B0000]    <1> 		cmp [mousecursorposition], ax
  6648 00005441 0F87EA000000        <1> 		ja near nexticonsel
  6649 00005447 66390D[F94B0000]    <1> 		cmp [mousecursorposition + 2], cx
  6650 0000544E 0F82DD000000        <1> 		jb near nexticonsel
  6651 00005454 66391D[F94B0000]    <1> 		cmp [mousecursorposition + 2], bx
  6652 0000545B 0F87D0000000        <1> 		ja near nexticonsel
  6653 00005461 662D1400            <1> 		sub ax, 20
  6654 00005465 663905[F74B0000]    <1> 		cmp [mousecursorposition], ax
  6655 0000546C 0F8795000000        <1> 		ja near killwin
  6656 00005472 E97C000000          <1> 		jmp nodragwin
  6657                              <1> 	dragwin:
  6658 00005477 663905[F34B0000]    <1> 		cmp [lastmouseposition], ax
  6659 0000547E 0F82AD000000        <1> 		jb near nexticonsel
  6660 00005484 660307              <1> 		add ax, [edi]
  6661 00005487 660307              <1> 		add ax, [edi]
  6662 0000548A 663905[F34B0000]    <1> 		cmp [lastmouseposition], ax
  6663 00005491 0F879A000000        <1> 		ja near nexticonsel
  6664 00005497 66390D[F54B0000]    <1> 		cmp [lastmouseposition + 2], cx
  6665 0000549E 0F828D000000        <1> 		jb near nexticonsel
  6666 000054A4 66391D[F54B0000]    <1> 		cmp [lastmouseposition + 2], bx
  6667 000054AB 0F8780000000        <1> 		ja near nexticonsel
  6668 000054B1 8935[7D500000]      <1> 		mov [dragging], esi
  6669 000054B7 662B15[F34B0000]    <1> 		sub dx, [lastmouseposition]
  6670 000054BE 660315[F74B0000]    <1> 		add dx, [mousecursorposition]
  6671 000054C5 66030D[F94B0000]    <1> 		add cx, [mousecursorposition + 2]
  6672 000054CC 662B0D[F54B0000]    <1> 		sub cx, [lastmouseposition + 2]
  6673 000054D3 663B15[1B5E0000]    <1> 		cmp dx, [resolutionx2]
  6674 000054DA 7607                <1> 		jbe chkyresdrgwin
  6675 000054DC 668B15[F74B0000]    <1> 		mov dx, [mousecursorposition]
  6676                              <1> 	chkyresdrgwin:
  6677 000054E3 663B0D[175E0000]    <1> 		cmp cx, [resolutiony]
  6678 000054EA 7607                <1> 		jbe nodragwin
  6679 000054EC 668B0D[F94B0000]    <1> 		mov cx, [mousecursorposition + 2]
  6680                              <1> 	nodragwin:
  6681 000054F3 8B5E0C              <1> 		mov ebx, [esi + 12]
  6682 000054F6 668B460A            <1> 		mov ax, [esi + 10]
  6683 000054FA 8B7602              <1> 		mov esi, [esi + 2]
  6684 000054FD E879040000          <1> 		call showwindow
  6685 00005502 E943000000          <1> 		jmp doneiconsel
  6686                              <1> 	killwin:
  6687 00005507 66C7060000          <1> 		mov word [esi], 0
  6688 0000550C C705[25040000]0000- <1> 		mov dword [user2codepoint], 0
  6689 00005514 0000                <1>
  6690 00005516 C605[BB270000]00    <1> 		mov byte [termguion], 0
  6691 0000551D E8CAF8FFFF          <1> 		call guiclear
  6692 00005522 E8A7000000          <1> 		call reloadallgraphics
  6693 00005527 E91DFAFFFF          <1> 		jmp guistart
  6694 0000552C E93A000000          <1> 		jmp doneiconsel2
  6695                              <1> 	nexticonsel:
  6696 00005531 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  6697 00005537 81C610000000        <1> 		add esi, 16
  6698 0000553D 81FE[00120000]      <1> 		cmp esi, graphicstableend
  6699 00005543 7305                <1> 		jae doneiconsel
  6700 00005545 E9B2FBFFFF          <1> 		jmp clicon2
  6701                              <1> 	doneiconsel:
  6702 0000554A 813D[7D500000]0100- <1> 		cmp dword [dragging], 1
  6703 00005552 0000                <1>
  6704 00005554 7315                <1> 		jae doneiconsel2
  6705 00005556 813D[24610000]0000- <1> 		cmp dword [codepointer], 0
  6706 0000555E 0000                <1>
  6707 00005560 7409                <1> 		je doneiconsel2
  6708 00005562 8B1D[24610000]      <1> 		mov ebx, [codepointer]
  6709 00005568 FFD3                <1> 		call ebx 
  6710 0000556A C3                  <1> 		ret
  6711                              <1> 	doneiconsel2:
  6712 0000556B A0[28480000]        <1> 		mov al, [LBUTTON]
  6713 00005570 A2[7B500000]        <1> 		mov [pLBUTTON], al
  6714 00005575 A0[29480000]        <1> 		mov al, [RBUTTON]
  6715 0000557A A2[7C500000]        <1> 		mov [pRBUTTON], al
  6716 0000557F 66813D[7D500000]01- <1> 		cmp word [dragging], 1
  6717 00005587 00                  <1>
  6718 00005588 0F860A000000        <1> 		jbe near noreloadgraphicsclick
  6719 0000558E E8CCF9FFFF          <1> call clearmousecursor
  6720 00005593 E836000000          <1> call reloadallgraphics
  6721                              <1> noreloadgraphicsclick:
  6722 00005598 31C9                <1> 		xor ecx, ecx
  6723 0000559A 31D2                <1> 		xor edx, edx
  6724 0000559C 30E4                <1> 		xor ah, ah
  6725 0000559E B0FE                <1> 		mov al, 254
  6726 000055A0 668B15[F74B0000]    <1> 		mov dx, [mousecursorposition]
  6727 000055A7 668B0D[F94B0000]    <1> 		mov cx, [mousecursorposition + 2]
  6728 000055AE 66BBE738            <1> 		mov bx, 0011100011100111b
  6729 000055B2 C605[5B4F0000]01    <1> 		mov byte [showcursorfonton], 1
  6730 000055B9 E86D080000          <1> 		call showfontvesa
  6731 000055BE C605[5B4F0000]00    <1> 		mov byte [showcursorfonton], 0
  6732 000055C5 C3                  <1> 		ret
  6733 000055C6 00000000            <1> lastdrag dw 0,0
  6734 000055CA 00000000            <1> grpctblpos dw 0,0
  6735                              <1> 
  6736                              <1> reloadallgraphics:
  6737 000055CE BF[00100000]        <1> 		mov edi, graphicstable
  6738                              <1> reloadgraphicsloop:
  6739 000055D3 8B7702              <1> 		mov esi, [edi + 2]
  6740 000055D6 668B5706            <1> 		mov dx, [edi + 6]
  6741 000055DA 668B4F08            <1> 		mov cx, [edi + 8]
  6742 000055DE 668B07              <1> 		mov ax, [edi]
  6743 000055E1 668B5F0A            <1> 		mov bx, [edi + 10]
  6744 000055E5 893D[CA550000]      <1> 		mov [grpctblpos], edi
  6745 000055EB 3B3D[7D500000]      <1> 		cmp edi, [dragging]
  6746 000055F1 741E                <1> 		je loadedgraphic
  6747 000055F3 663D0100            <1> 		cmp ax, 1
  6748 000055F7 0F8431000000        <1> 		je near icongraphic
  6749 000055FD 663D0200            <1> 		cmp ax, 2
  6750 00005601 0F8437000000        <1> 		je near stringgraphic
  6751 00005607 663D0300            <1> 		cmp ax, 3
  6752 0000560B 0F8416000000        <1> 		je near windowgraphic
  6753 00005611 8B3D[CA550000]      <1> loadedgraphic:  mov edi, [grpctblpos]
  6754 00005617 81C710000000        <1> 		add edi, 16
  6755 0000561D 81FF[00120000]      <1> 		cmp edi, graphicstableend
  6756 00005623 7329                <1> 		jae donereloadgraphics
  6757 00005625 EBAC                <1> 		jmp reloadgraphicsloop
  6758 00005627 E8F7030000          <1> windowgraphic:	call showwindow2
  6759 0000562C EBE3                <1> 		jmp loadedgraphic
  6760 0000562E 80E301              <1> icongraphic:	and bl, 1
  6761 00005631 881D[28610000]      <1> 		mov [iconselected], bl
  6762 00005637 E822070000          <1> 		call showicon2
  6763 0000563C EBD3                <1> 		jmp loadedgraphic
  6764 0000563E 80E301              <1> stringgraphic:  and bl, 1
  6765 00005641 881D[5D4F0000]      <1> 		mov [mouseselecton], bl
  6766 00005647 E8D6020000          <1> 		call showstring2
  6767 0000564C EBC3                <1> 		jmp loadedgraphic
  6768                              <1> donereloadgraphics:
  6769 0000564E 8B3D[7D500000]      <1> 		mov edi, [dragging]
  6770 00005654 81FF[00100000]      <1> 		cmp edi, graphicstable
  6771 0000565A 7226                <1> 		jb notcorrectdrag
  6772 0000565C 668B07              <1> 		mov ax, [edi]
  6773 0000565F 8B7702              <1> 		mov esi, [edi + 2]
  6774 00005662 668B5706            <1> 		mov dx, [edi + 6]
  6775 00005666 668B4F08            <1> 		mov cx, [edi + 8]
  6776 0000566A 668B5F0A            <1> 		mov bx, [edi + 10]
  6777 0000566E 663D0100            <1> 		cmp ax, 1
  6778 00005672 750F                <1> 		jne noticondragging
  6779 00005674 80E301              <1> 		and bl, 1
  6780 00005677 881D[28610000]      <1> 		mov [iconselected], bl
  6781 0000567D E8DC060000          <1> 		call showicon2
  6782                              <1> notcorrectdrag:
  6783 00005682 C3                  <1> 		ret
  6784                              <1> 
  6785                              <1> 	noticondragging:
  6786 00005683 663D0200            <1> 		cmp ax, 2
  6787 00005687 75F9                <1> 		jne notcorrectdrag
  6788 00005689 80E301              <1> 		and bl, 1
  6789 0000568C 881D[5D4F0000]      <1> 		mov [mouseselecton], bl
  6790 00005692 E88B020000          <1> 		call showstring2
  6791 00005697 EBE9                <1> 		jmp notcorrectdrag
  6792                              <1> 
  6793 00005699 00<rept>            <1> grphbuf times 16 db 0
  6794                              <1> 	graphicsadd:
  6795 000056A9 BF[00100000]        <1> 		mov edi, graphicstable
  6796                              <1> 	shwgrph1:
  6797 000056AE 397702              <1> 		cmp dword [edi + 2], esi
  6798 000056B1 7414                <1> 		je showgraphicsreplace2
  6799 000056B3 81C710000000        <1> 		add edi, 16
  6800 000056B9 81FF[00120000]      <1> 		cmp edi, graphicstableend
  6801 000056BF 0F832F020000        <1> 		jae near showgraphicsnew
  6802 000056C5 EBE7                <1> 		jmp shwgrph1
  6803                              <1> 	showgraphicsreplace2:
  6804 000056C7 8935[9B560000]      <1> 		mov [grphbuf + 2], esi
  6805 000056CD 668915[9F560000]    <1> 		mov [grphbuf + 6], dx
  6806 000056D4 66890D[A1560000]    <1> 		mov [grphbuf + 8], cx
  6807 000056DB 891D[A5560000]      <1> 		mov [grphbuf + 12], ebx
  6808 000056E1 30FF                <1> 		xor bh, bh
  6809 000056E3 88E3                <1> 		mov bl, ah
  6810 000056E5 30E4                <1> 		xor ah, ah
  6811 000056E7 66A3[A3560000]      <1> 		mov [grphbuf + 10], ax	
  6812 000056ED 66891D[99560000]    <1> 		mov [grphbuf], bx
  6813 000056F4 66A1[99560000]      <1> 		mov ax, [grphbuf]
  6814 000056FA 663D0100            <1> 		cmp ax, 1
  6815 000056FE 0F8419000000        <1> 		je near replaceicon
  6816 00005704 663D0200            <1> 		cmp ax, 2
  6817 00005708 0F8493000000        <1> 		je near replacestring
  6818 0000570E 663D0300            <1> 		cmp ax, 3
  6819 00005712 0F840F010000        <1> 		je near replacewindow
  6820 00005718 E9B4010000          <1> 		jmp showgraphicsreplace
  6821                              <1> 	replaceicon:
  6822 0000571D 893D[81500000]      <1> 		mov [lastpos], edi
  6823 00005723 8935[85500000]      <1> 		mov [lastpos + 4], esi
  6824 00005729 8B7702              <1> 		mov esi, [edi + 2]
  6825 0000572C 668B5F0C            <1> 		mov bx, [edi + 12]
  6826 00005730 668B5706            <1> 		mov dx, [edi + 6]
  6827 00005734 668B4F08            <1> 		mov cx, [edi + 8]
  6828 00005738 668B06              <1> 		mov ax, [esi]
  6829 0000573B 66A3[89500000]      <1> 		mov [colorbuf], ax
  6830 00005741 66A1[294E0000]      <1> 		mov ax, [background]
  6831 00005747 668906              <1> 		mov [esi], ax
  6832 0000574A 8B5F0C              <1> 		mov ebx, [edi + 12]
  6833 0000574D 668B470A            <1> 		mov ax, [edi + 10]
  6834 00005751 2401                <1> 		and al, 1
  6835 00005753 A2[28610000]        <1> 		mov [iconselected], al
  6836 00005758 668B470A            <1> 		mov ax, [edi + 10]
  6837 0000575C E8FD050000          <1> 		call showicon2
  6838 00005761 8B3D[81500000]      <1> 		mov edi, [lastpos]
  6839 00005767 8B7702              <1> 		mov esi, [edi + 2]
  6840 0000576A 66A1[89500000]      <1> 		mov ax, [colorbuf]
  6841 00005770 668906              <1> 		mov [esi], ax
  6842 00005773 8B35[85500000]      <1> 		mov esi, [lastpos + 4]
  6843 00005779 668B15[9F560000]    <1> 		mov dx, [grphbuf + 6]
  6844 00005780 668B0D[A1560000]    <1> 		mov cx, [grphbuf + 8]
  6845 00005787 668B1D[99560000]    <1> 		mov bx, [grphbuf]
  6846 0000578E 66A1[A3560000]      <1> 		mov ax, [grphbuf + 10]
  6847 00005794 88DC                <1> 		mov ah, bl
  6848 00005796 8B1D[A5560000]      <1> 		mov ebx, [grphbuf + 12]
  6849 0000579C E930010000          <1> 		jmp showgraphicsreplace
  6850                              <1> 	replacestring:
  6851 000057A1 893D[81500000]      <1> 		mov [lastpos], edi
  6852 000057A7 8935[85500000]      <1> 		mov [lastpos + 4], esi
  6853 000057AD 8B5F0C              <1> 		mov ebx, [edi + 12]
  6854 000057B0 8B7702              <1> 		mov esi, [edi + 2]
  6855 000057B3 668B5706            <1> 		mov dx, [edi + 6]
  6856 000057B7 668B4F08            <1> 		mov cx, [edi + 8]
  6857 000057BB 66A1[5E590000]      <1> 		mov ax, [colorfont2]
  6858 000057C1 66A3[89500000]      <1> 		mov [colorbuf], ax
  6859 000057C7 66A1[294E0000]      <1> 		mov ax, [background]
  6860 000057CD 66A3[5E590000]      <1> 		mov [colorfont2], ax		
  6861 000057D3 8B5F0C              <1> 		mov ebx, [edi + 12]
  6862 000057D6 668B470A            <1> 		mov ax, [edi + 10]
  6863 000057DA 2401                <1> 		and al, 1
  6864 000057DC A2[5D4F0000]        <1> 		mov [mouseselecton], al
  6865 000057E1 668B470A            <1> 		mov ax, [edi + 10]
  6866 000057E5 E838010000          <1> 		call showstring2
  6867 000057EA 66A1[89500000]      <1> 		mov ax, [colorbuf]
  6868 000057F0 66A3[5E590000]      <1> 		mov [colorfont2], ax
  6869 000057F6 8B3D[81500000]      <1> 		mov edi, [lastpos]
  6870 000057FC 8B7702              <1> 		mov esi, [edi + 2]
  6871 000057FF 668B15[9F560000]    <1> 		mov dx, [grphbuf + 6]
  6872 00005806 668B0D[A1560000]    <1> 		mov cx, [grphbuf + 8]
  6873 0000580D 668B1D[99560000]    <1> 		mov bx, [grphbuf]
  6874 00005814 66A1[A3560000]      <1> 		mov ax, [grphbuf + 10]
  6875 0000581A 88DC                <1> 		mov ah, bl
  6876 0000581C 8B1D[A5560000]      <1> 		mov ebx, [grphbuf + 12]
  6877 00005822 E9AA000000          <1> 		jmp showgraphicsreplace
  6878                              <1> 	replacewindow:
  6879 00005827 893D[81500000]      <1> 		mov [lastpos], edi
  6880 0000582D 8935[85500000]      <1> 		mov [lastpos + 4], esi
  6881 00005833 8B7702              <1> 		mov esi, [edi + 2]
  6882 00005836 8B3D[6D590000]      <1> 		mov edi, [windowbufloc]
  6883 0000583C 31D2                <1> 		xor edx, edx
  6884 0000583E 668B15[1B5E0000]    <1> 		mov dx, [resolutionx2]
  6885 00005845 C1E204              <1> 		shl edx, 4
  6886 00005848 29D7                <1> 		sub edi, edx
  6887 0000584A 31D2                <1> 		xor edx, edx
  6888 0000584C 668B16              <1> 		mov dx, [esi]
  6889 0000584F 660316              <1> 		add dx, [esi]
  6890 00005852 668B4E02            <1> 		mov cx, [esi + 2]
  6891 00005856 6681C11000          <1> 		add cx, 16
  6892 0000585B 66A1[294E0000]      <1> 		mov ax, [background]
  6893                              <1> 	clearwindow:
  6894 00005861 668907              <1> 		mov [edi], ax
  6895 00005864 81C702000000        <1> 		add edi, 2
  6896 0000586A 81EA02000000        <1> 		sub edx, 2
  6897 00005870 81FA00000000        <1> 		cmp edx, 0
  6898 00005876 75E9                <1> 		jne clearwindow
  6899 00005878 6649                <1> 		dec cx
  6900 0000587A 668B15[1B5E0000]    <1> 		mov dx, [resolutionx2]
  6901 00005881 662B16              <1> 		sub dx, [esi]
  6902 00005884 662B16              <1> 		sub dx, [esi]
  6903 00005887 01D7                <1> 		add edi, edx
  6904 00005889 668B16              <1> 		mov dx, [esi]
  6905 0000588C 660316              <1> 		add dx, [esi]
  6906 0000588F 6681F90000          <1> 		cmp cx, 0
  6907 00005894 75CB                <1> 		jne clearwindow
  6908 00005896 C605[BC270000]00    <1> 		mov byte [termcopyon], 0
  6909 0000589D 8B3D[81500000]      <1> 		mov edi, [lastpos]
  6910 000058A3 8B35[9B560000]      <1> 		mov esi, [grphbuf + 2]
  6911 000058A9 668B15[9F560000]    <1> 		mov dx, [grphbuf + 6]
  6912 000058B0 668B0D[A1560000]    <1> 		mov cx, [grphbuf + 8]
  6913 000058B7 668B1D[99560000]    <1> 		mov bx, [grphbuf]
  6914 000058BE 66A1[A3560000]      <1> 		mov ax, [grphbuf + 10]
  6915 000058C4 88DC                <1> 		mov ah, bl
  6916 000058C6 8B1D[A5560000]      <1> 		mov ebx, [grphbuf + 12]
  6917 000058CC E900000000          <1> 		jmp showgraphicsreplace
  6918                              <1> 	showgraphicsreplace:
  6919 000058D1 897702              <1> 		mov [edi + 2], esi
  6920 000058D4 66895706            <1> 		mov [edi + 6], dx
  6921 000058D8 66894F08            <1> 		mov [edi + 8], cx
  6922 000058DC 895F0C              <1> 		mov [edi + 12], ebx
  6923 000058DF 30FF                <1> 		xor bh, bh
  6924 000058E1 88E3                <1> 		mov bl, ah
  6925 000058E3 30E4                <1> 		xor ah, ah
  6926 000058E5 6689470A            <1> 		mov [edi + 10], ax
  6927 000058E9 66891F              <1> 		mov [edi], bx
  6928 000058EC 8B5F0C              <1> 		mov ebx, [edi + 12]
  6929 000058EF 668B470A            <1> 		mov ax, [edi + 10]
  6930 000058F3 C3                  <1> 		ret
  6931                              <1> 	showgraphicsnew:
  6932 000058F4 BF[00100000]        <1> 		mov edi, graphicstable
  6933                              <1> 	shwgrph2:
  6934 000058F9 66813F0000          <1> 		cmp word [edi], 0
  6935 000058FE 74D1                <1> 		je showgraphicsreplace
  6936 00005900 81C710000000        <1> 		add edi, 16
  6937 00005906 81FF[00120000]      <1> 		cmp edi, graphicstableend
  6938 0000590C 72EB                <1> 		jb shwgrph2
  6939                              <1> 	showgraphicsdone:
  6940 0000590E C3                  <1> 		ret
  6941                              <1> 
  6942                              <1> 	showstring:
  6943 0000590F A2[5D4F0000]        <1> 		mov [mouseselecton], al
  6944 00005914 8025[5D4F0000]01    <1> 		and byte [mouseselecton], 1
  6945 0000591B B402                <1> 		mov ah, 2
  6946 0000591D E887FDFFFF          <1> 		call graphicsadd
  6947                              <1> 	showstring2:
  6948 00005922 30E4                <1> 		xor ah, ah
  6949 00005924 8A06                <1> 		mov al, [esi]
  6950 00005926 3C00                <1> 		cmp al, 0
  6951 00005928 742C                <1> 		je doneshowstring
  6952 0000592A 46                  <1> 		inc esi
  6953 0000592B 3CFF                <1> 		cmp al, 255
  6954 0000592D 74F3                <1> 		je showstring2
  6955 0000592F 8935[D1600000]      <1> 		mov [showstringesi], esi
  6956 00005935 668B1D[5E590000]    <1> 		mov bx, [colorfont2]
  6957 0000593C E8EA040000          <1> 		call showfontvesa
  6958 00005941 3C0D                <1> 		cmp al, 13
  6959 00005943 7409                <1> 		je noproceedshst
  6960 00005945 3C0A                <1> 		cmp al, 10
  6961 00005947 7405                <1> 		je noproceedshst
  6962 00005949 6681C20800          <1> 		add dx, 8
  6963                              <1> 		noproceedshst
  6964 0000594E 8B35[D1600000]      <1> 		mov esi, [showstringesi]
  6965 00005954 EBCC                <1> 		jmp showstring2
  6966                              <1> 	doneshowstring:
  6967 00005956 C605[5D4F0000]00    <1> 		mov byte [mouseselecton], 0
  6968 0000595D C3                  <1> 		ret
  6969                              <1> 
  6970 0000595E FFFF                <1> colorfont2 dw 0xFFFF
  6971 00005960 00                  <1> colorcache db 0
  6972 00005961 0000                <1> winvcopystx dw 0
  6973 00005963 0000                <1> winvcopysty dw 0
  6974 00005965 0000                <1> winvcopydx dw 0
  6975 00005967 0000                <1> winvcopycx dw 0
  6976 00005969 FFFF0000            <1> windowcolor dw 0xFFFF,0x0
  6977 0000596D 00000000            <1> windowbufloc: dw 0,0
  6978 00005971 00000000            <1> windowinfobuf dd 0
  6979 00005975 0000                <1> termcol dw 0
  6980 00005977 00000000            <1> wincopyendpos dd 0
  6981                              <1> 
  6982                              <1> 	showwindow:	;;windowstuff in si, position in (dx, cx), nothing in ax, code in bx
  6983 0000597B C605[BB270000]01    <1> 		mov byte [termguion], 1
  6984 00005982 6681C11000          <1> 		add cx, 16
  6985 00005987 668915[61590000]    <1> 		mov [winvcopystx], dx
  6986 0000598E 66890D[63590000]    <1> 		mov [winvcopysty], cx
  6987 00005995 8935[71590000]      <1> 		mov [windowinfobuf], esi
  6988 0000599B 668B16              <1> 		mov dx, [esi]
  6989 0000599E 668B4E02            <1> 		mov cx, [esi + 2]
  6990 000059A2 31C0                <1> 		xor eax, eax
  6991 000059A4 31DB                <1> 		xor ebx, ebx
  6992 000059A6 6689D0              <1> 		mov ax, dx
  6993 000059A9 6689CB              <1> 		mov bx, cx
  6994 000059AC 66C1E803            <1> 		shr ax, 3
  6995 000059B0 66C1EB04            <1> 		shr bx, 4
  6996 000059B4 66A3[75590000]      <1> 		mov [termcol], ax
  6997 000059BA A2[AC270000]        <1> 		mov [charxy], al
  6998 000059BF 881D[AD270000]      <1> 		mov [charxy + 1], bl
  6999 000059C5 BF[8F1D0000]        <1> 		mov edi, videobuf
  7000 000059CA 81FB00000000        <1> 		cmp ebx, 0
  7001 000059D0 0F8456030000        <1> 		je near donewincopynow	;AAAAAAAAA!!!!!
  7002                              <1> 	findendposwin:
  7003 000059D6 01C7                <1> 		add edi, eax
  7004 000059D8 01C7                <1> 		add edi, eax
  7005 000059DA 4B                  <1> 		dec ebx
  7006 000059DB 81FB00000000        <1> 		cmp ebx, 0
  7007 000059E1 77F3                <1> 		ja findendposwin
  7008 000059E3 893D[77590000]      <1> 		mov [wincopyendpos], edi
  7009 000059E9 31FF                <1> 		xor edi, edi
  7010 000059EB 6631C0              <1> 		xor ax, ax
  7011 000059EE 6631DB              <1> 		xor bx, bx
  7012 000059F1 6601D2              <1> 		add dx, dx
  7013 000059F4 668915[65590000]    <1> 		mov [winvcopydx], dx
  7014 000059FB 66890D[67590000]    <1> 		mov [winvcopycx], cx
  7015 00005A02 668B0D[63590000]    <1> 		mov cx, [winvcopysty]
  7016 00005A09 6681E91000          <1> 		sub cx, 16
  7017 00005A0E 668B15[61590000]    <1> 		mov dx, [winvcopystx]
  7018 00005A15 C605[BC270000]00    <1> 		mov byte [termcopyon], 0
  7019 00005A1C B403                <1> 		mov ah, 3
  7020 00005A1E E886FCFFFF          <1> 		call graphicsadd
  7021                              <1> 	showwindow2:
  7022 00005A23 6681C11000          <1> 		add cx, 16
  7023 00005A28 668915[61590000]    <1> 		mov [winvcopystx], dx
  7024 00005A2F 66890D[63590000]    <1> 		mov [winvcopysty], cx
  7025 00005A36 668B16              <1> 		mov dx, [esi]
  7026 00005A39 668B4E02            <1> 		mov cx, [esi + 2]
  7027 00005A3D 6601D2              <1> 		add dx, dx
  7028 00005A40 668915[65590000]    <1> 		mov [winvcopydx], dx
  7029 00005A47 66890D[67590000]    <1> 		mov [winvcopycx], cx
  7030 00005A4E 8B3D[6D590000]      <1> 		mov edi, [windowbufloc]
  7031 00005A54 31D2                <1> 		xor edx, edx
  7032 00005A56 668B15[1B5E0000]    <1> 		mov dx, [resolutionx2]
  7033 00005A5D C1E204              <1> 		shl edx, 4
  7034 00005A60 29D7                <1> 		sub edi, edx
  7035 00005A62 803D[BC270000]00    <1> 		cmp byte [termcopyon], 0
  7036 00005A69 7538                <1> 		jne nocleartitlebarpos
  7037 00005A6B 8B3D[A1850000]      <1> 		mov edi, [physbaseptr]
  7038 00005A71 31D2                <1> 		xor edx, edx
  7039 00005A73 668B15[61590000]    <1> 		mov dx, [winvcopystx]
  7040 00005A7A 01D7                <1> 		add edi, edx
  7041 00005A7C 668B0D[63590000]    <1> 		mov cx, [winvcopysty]
  7042 00005A83 6681E91000          <1> 		sub cx, 16
  7043 00005A88 6681F90000          <1> 		cmp cx, 0
  7044 00005A8D 7414                <1> 		je nocleartitlebarpos
  7045                              <1> 	cleartitlebarpos:
  7046 00005A8F 31D2                <1> 		xor edx, edx
  7047 00005A91 668B15[1B5E0000]    <1> 		mov dx, [resolutionx2]
  7048 00005A98 01D7                <1> 		add edi, edx
  7049 00005A9A 6649                <1> 		dec cx
  7050 00005A9C 6681F90000          <1> 		cmp cx, 0
  7051 00005AA1 75EC                <1> 		jne cleartitlebarpos
  7052                              <1> 	nocleartitlebarpos:
  7053 00005AA3 66B91000            <1> 		mov cx, 16
  7054 00005AA7 668B15[65590000]    <1> 		mov dx, [winvcopydx]
  7055 00005AAE 6681F90000          <1> 		cmp cx, 0
  7056 00005AB3 0F8448000000        <1> 		je near canceltitlebarput
  7057 00005AB9 6681FA0000          <1> 		cmp dx, 0
  7058 00005ABE 0F843D000000        <1> 		je near canceltitlebarput
  7059                              <1> 	titlebarput:
  7060 00005AC4 66A1[69590000]      <1> 		mov ax, [windowcolor]
  7061 00005ACA 668907              <1> 		mov [edi], ax
  7062 00005ACD 6681EA0200          <1> 		sub dx, 2
  7063 00005AD2 81C702000000        <1> 		add edi, 2
  7064 00005AD8 6681FA0000          <1> 		cmp dx, 0
  7065 00005ADD 75E5                <1> 		jne titlebarput
  7066 00005ADF 31D2                <1> 		xor edx, edx
  7067 00005AE1 668B15[1B5E0000]    <1> 		mov dx, [resolutionx2]
  7068 00005AE8 6649                <1> 		dec cx
  7069 00005AEA 662B15[65590000]    <1> 		sub dx, [winvcopydx]
  7070 00005AF1 01D7                <1> 		add edi, edx
  7071 00005AF3 668B15[65590000]    <1> 		mov dx, [winvcopydx]
  7072 00005AFA 6681F90000          <1> 		cmp cx, 0
  7073 00005AFF 75C3                <1> 		jne titlebarput
  7074                              <1> 	canceltitlebarput:
  7075 00005B01 893D[6D590000]      <1> 		mov [windowbufloc], edi
  7076 00005B07 803D[BC270000]02    <1> 		cmp byte [termcopyon], 2
  7077 00005B0E 0F8461000000        <1> 		je near winvcpst
  7078 00005B14 6631C0              <1> 		xor ax, ax
  7079 00005B17 81C604000000        <1> 		add esi, 4
  7080 00005B1D 668B15[61590000]    <1> 		mov dx, [winvcopystx]
  7081 00005B24 668B0D[63590000]    <1> 		mov cx, [winvcopysty]
  7082 00005B2B 6681E91000          <1> 		sub cx, 16
  7083 00005B30 6631DB              <1> 		xor bx, bx
  7084 00005B33 C605[5D4F0000]01    <1> 		mov byte [mouseselecton], 1
  7085 00005B3A E8E3FDFFFF          <1> 		call showstring2
  7086 00005B3F B058                <1> 		mov al, "X"
  7087 00005B41 30E4                <1> 		xor ah, ah
  7088 00005B43 668B1D[5E590000]    <1> 		mov bx, [colorfont2]
  7089 00005B4A 668B15[61590000]    <1> 		mov dx, [winvcopystx]
  7090 00005B51 668B0D[63590000]    <1> 		mov cx, [winvcopysty]
  7091 00005B58 6681E91000          <1> 		sub cx, 16
  7092 00005B5D 6681EA1400          <1> 		sub dx, 20
  7093 00005B62 660315[65590000]    <1> 		add dx, [winvcopydx]
  7094 00005B69 C605[5D4F0000]01    <1> 		mov byte [mouseselecton], 1
  7095 00005B70 E8B6020000          <1> 		call showfontvesa
  7096                              <1> 	winvcpst:
  7097 00005B75 8B3D[6D590000]      <1> 		mov edi, [windowbufloc]
  7098 00005B7B E97E000000          <1> 		jmp windowvideocopyset
  7099                              <1> 
  7100                              <1> 	windowvideocopy:
  7101 00005B80 8B35[71590000]      <1> 		mov esi, [windowinfobuf]
  7102 00005B86 668B16              <1> 		mov dx, [esi]
  7103 00005B89 668B4E02            <1> 		mov cx, [esi + 2]
  7104 00005B8D 31C0                <1> 		xor eax, eax
  7105 00005B8F 31DB                <1> 		xor ebx, ebx
  7106 00005B91 6689D0              <1> 		mov ax, dx
  7107 00005B94 6689CB              <1> 		mov bx, cx
  7108 00005B97 66C1E803            <1> 		shr ax, 3
  7109 00005B9B 66C1EB04            <1> 		shr bx, 4
  7110 00005B9F 66A3[75590000]      <1> 		mov [termcol], ax
  7111 00005BA5 A2[AC270000]        <1> 		mov [charxy], al
  7112 00005BAA 881D[AD270000]      <1> 		mov [charxy + 1], bl
  7113 00005BB0 8B3D[6D590000]      <1> 		mov edi, [windowbufloc]
  7114 00005BB6 3B3D[A1850000]      <1> 		cmp edi, [physbaseptr]
  7115 00005BBC 0F833C000000        <1> 		jae near windowvideocopyset
  7116 00005BC2 31C9                <1> 		xor ecx, ecx
  7117 00005BC4 31D2                <1> 		xor edx, edx
  7118 00005BC6 668B15[61590000]    <1> 		mov dx, [winvcopystx]
  7119 00005BCD 668B0D[63590000]    <1> 		mov cx, [winvcopysty]
  7120 00005BD4 8B3D[A1850000]      <1> 		mov edi, [physbaseptr]
  7121 00005BDA 01D7                <1> 		add edi, edx
  7122 00005BDC 81F900000000        <1> 		cmp ecx, 0
  7123 00005BE2 741A                <1> 		je windowvideocopyset
  7124                              <1> 	yrescopylp:
  7125 00005BE4 31D2                <1> 		xor edx, edx
  7126 00005BE6 668B15[1B5E0000]    <1> 		mov dx, [resolutionx2]
  7127 00005BED 01D7                <1> 		add edi, edx
  7128 00005BEF 6649                <1> 		dec cx
  7129 00005BF1 6681F90000          <1> 		cmp cx, 0
  7130 00005BF6 75EC                <1> 		jne yrescopylp
  7131 00005BF8 893D[6D590000]      <1> 		mov [windowbufloc], edi
  7132                              <1> 	windowvideocopyset:
  7133 00005BFE 6631C9              <1> 		xor cx, cx
  7134 00005C01 66890D[435D0000]    <1> 		mov [charposline], cx
  7135 00005C08 BE[8F1D0000]        <1> 		mov esi, videobuf
  7136 00005C0D 8935[455D0000]      <1> 		mov [charposvbuf], esi
  7137 00005C13 8A5E01              <1> 		mov bl, [esi + 1]
  7138 00005C16 881D[60590000]      <1> 		mov [colorcache], bl
  7139 00005C1C 8A1E                <1> 		mov bl, [esi]
  7140 00005C1E 30FF                <1> 		xor bh, bh
  7141 00005C20 66C1E304            <1> 		shl bx, 4
  7142 00005C24 678AB7[6973]        <1> 		mov dh, [fonts + bx]
  7143 00005C29 D0CE                <1> 		ror dh, 1
  7144 00005C2B 89FE                <1> 		mov esi, edi
  7145                              <1> 	copywindow:
  7146 00005C2D B201                <1> 		mov dl, 1
  7147 00005C2F D0C6                <1> 		rol dh, 1
  7148 00005C31 20F2                <1> 		and dl, dh
  7149 00005C33 803D[60590000]10    <1> 		cmp byte [colorcache], 0x10
  7150 00005C3A 731C                <1> 		jae switchwincolors
  7151 00005C3C 66A1[6B590000]      <1> 		mov ax, [windowcolor + 2]
  7152 00005C42 668907              <1> 		mov [edi], ax
  7153 00005C45 80FA00              <1> 		cmp dl, 0
  7154 00005C48 7425                <1> 		je nowritewin
  7155 00005C4A 66A1[69590000]      <1> 		mov ax, [windowcolor]
  7156 00005C50 668907              <1> 		mov [edi], ax
  7157 00005C53 E917000000          <1> 		jmp nowritewin
  7158                              <1> 	switchwincolors:
  7159 00005C58 66A1[69590000]      <1> 		mov ax, [windowcolor]
  7160 00005C5E 668907              <1> 		mov [edi], ax
  7161 00005C61 80FA00              <1> 		cmp dl, 0
  7162 00005C64 7409                <1> 		je nowritewin
  7163 00005C66 66A1[6B590000]      <1> 		mov ax, [windowcolor + 2]
  7164 00005C6C 668907              <1> 		mov [edi], ax
  7165                              <1> 	nowritewin:
  7166 00005C6F 81C702000000        <1> 		add edi, 2
  7167 00005C75 FEC1                <1> 		inc cl
  7168 00005C77 80F908              <1> 		cmp cl, 8
  7169 00005C7A 75B1                <1> 		jne copywindow
  7170 00005C7C 6643                <1> 		inc bx
  7171 00005C7E 30C9                <1> 		xor cl, cl
  7172 00005C80 31D2                <1> 		xor edx, edx
  7173 00005C82 668B15[1B5E0000]    <1> 		mov dx, [resolutionx2]
  7174 00005C89 01D6                <1> 		add esi, edx
  7175 00005C8B 89F7                <1> 		mov edi, esi
  7176 00005C8D 678AB7[6973]        <1> 		mov dh, [fonts + bx]
  7177 00005C92 D0CE                <1> 		ror dh, 1
  7178 00005C94 FEC5                <1> 		inc ch
  7179 00005C96 80FD10              <1> 		cmp ch, 16
  7180 00005C99 7592                <1> 		jne copywindow
  7181 00005C9B 6631C9              <1> 		xor cx, cx
  7182 00005C9E 8B3D[455D0000]      <1> 		mov edi, [charposvbuf]
  7183 00005CA4 81C702000000        <1> 		add edi, 2
  7184 00005CAA 3B3D[77590000]      <1> 		cmp edi, [wincopyendpos]
  7185 00005CB0 737A                <1> 		jae donewincopynow
  7186 00005CB2 8A5F01              <1> 		mov bl, [edi + 1]
  7187 00005CB5 881D[60590000]      <1> 		mov [colorcache], bl
  7188 00005CBB 8A1F                <1> 		mov bl, [edi]
  7189 00005CBD 30FF                <1> 		xor bh, bh
  7190 00005CBF 66C1E304            <1> 		shl bx, 4
  7191 00005CC3 893D[455D0000]      <1> 		mov [charposvbuf], edi
  7192 00005CC9 31D2                <1> 		xor edx, edx
  7193 00005CCB 668B15[1B5E0000]    <1> 		mov dx, [resolutionx2]
  7194 00005CD2 C1E204              <1> 		shl edx, 4
  7195 00005CD5 29D6                <1> 		sub esi, edx
  7196 00005CD7 81C610000000        <1> 		add esi, 16
  7197 00005CDD 89F7                <1> 		mov edi, esi
  7198 00005CDF 668B0D[435D0000]    <1> 		mov cx, [charposline]
  7199 00005CE6 6641                <1> 		inc cx
  7200 00005CE8 663B0D[75590000]    <1> 		cmp cx, [termcol]
  7201 00005CEF 0F8316000000        <1> 		jae near fixwindowcopy
  7202 00005CF5 66890D[435D0000]    <1> 		mov [charposline], cx
  7203 00005CFC 6631C9              <1> 		xor cx, cx
  7204 00005CFF 678AB7[6973]        <1> 		mov dh, [fonts + bx]
  7205 00005D04 D0CE                <1> 		ror dh, 1
  7206 00005D06 E922FFFFFF          <1> 		jmp copywindow
  7207                              <1> fixwindowcopy:
  7208 00005D0B 6631C9              <1> 		xor cx, cx
  7209 00005D0E 66890D[435D0000]    <1> 		mov [charposline], cx
  7210 00005D15 662B15[65590000]    <1> 		sub dx, [winvcopydx]
  7211 00005D1C 01D6                <1> 		add esi, edx
  7212 00005D1E 89F7                <1> 		mov edi, esi
  7213 00005D20 678AB7[6973]        <1> 		mov dh, [fonts + bx]
  7214 00005D25 D0CE                <1> 		ror dh, 1
  7215 00005D27 E901FFFFFF          <1> 		jmp copywindow
  7216                              <1> donewincopynow:
  7217 00005D2C E8CAD0FFFF          <1> 		call switchtermcursor
  7218 00005D31 803D[BC270000]01    <1> 		cmp byte [termcopyon], 1
  7219 00005D38 7501                <1> 		jne forgetresetstuff
  7220 00005D3A 61                  <1> 		popa
  7221                              <1> forgetresetstuff:
  7222 00005D3B C605[BC270000]00    <1> 		mov byte [termcopyon], 0
  7223 00005D42 C3                  <1> 		ret
  7224                              <1> 
  7225 00005D43 0000                <1> charposline dw 0
  7226 00005D45 00000000            <1> charposvbuf dw 0,0
  7227 00005D49 0000                <1> iconcolor dw 0
  7228                              <1> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  7229 00005D4B A2[28610000]        <1> 		mov [iconselected], al
  7230 00005D50 8025[28610000]01    <1> 		and byte [iconselected], 1
  7231 00005D57 B401                <1> 		mov ah, 1
  7232 00005D59 E84BF9FFFF          <1> 		call graphicsadd
  7233                              <1> 	showicon2:
  7234 00005D5E 8B3D[A1850000]      <1> 		mov edi, [physbaseptr]
  7235 00005D64 6601D2              <1> 		add dx, dx
  7236 00005D67 663B15[1B5E0000]    <1> 		cmp dx, [resolutionx2]
  7237 00005D6E 720C                <1> 		jb screenxgood
  7238 00005D70 668B15[1B5E0000]    <1> 		mov dx, [resolutionx2]
  7239 00005D77 6681EA4000          <1> 		sub dx, 64
  7240                              <1> 	screenxgood:
  7241 00005D7C 6681F90000          <1> 		cmp cx, 0
  7242 00005D81 7422                <1> 		je noscreenygoodchk
  7243 00005D83 663B0D[175E0000]    <1> 		cmp cx, [resolutiony]
  7244 00005D8A 720C                <1> 		jb screenygood
  7245 00005D8C 668B0D[175E0000]    <1> 		mov cx, [resolutiony]
  7246 00005D93 6681E92000          <1> 		sub cx, 32
  7247                              <1> 	screenygood:
  7248 00005D98 31DB                <1> 		xor ebx, ebx
  7249 00005D9A 668B1D[1B5E0000]    <1> 		mov bx, [resolutionx2]
  7250 00005DA1 01DF                <1> 		add edi, ebx
  7251 00005DA3 E2F3                <1> 		loop screenygood
  7252                              <1> 	noscreenygoodchk:
  7253 00005DA5 31DB                <1> 		xor ebx, ebx
  7254 00005DA7 6689D3              <1> 		mov bx, dx
  7255 00005DAA 01DF                <1> 		add edi, ebx
  7256 00005DAC 6631C9              <1> 		xor cx, cx
  7257 00005DAF 668B06              <1> 		mov ax, [esi]
  7258 00005DB2 81C602000000        <1> 		add esi, 2
  7259 00005DB8 66A3[495D0000]      <1> 		mov [iconcolor], ax
  7260                              <1> 	writeicon:
  7261 00005DBE 8B06                <1> 		mov eax, [esi]
  7262 00005DC0 D1C0                <1> 		rol eax, 1
  7263 00005DC2 30C9                <1> 		xor cl, cl
  7264                              <1> 	writeiconline:
  7265 00005DC4 B201                <1> 		mov dl, 1
  7266 00005DC6 20C2                <1> 		and dl, al
  7267 00005DC8 3215[28610000]      <1> 		xor dl, [iconselected]
  7268 00005DCE 668B1D[294E0000]    <1> 		mov bx, [background]
  7269 00005DD5 66891F              <1> 		mov [edi], bx
  7270 00005DD8 80FA00              <1> 		cmp dl, 0
  7271 00005DDB 740A                <1> 		je noiconline
  7272 00005DDD 668B15[495D0000]    <1> 		mov dx, [iconcolor]
  7273 00005DE4 668917              <1> 		mov [edi], dx
  7274                              <1> 	noiconline:
  7275 00005DE7 81C702000000        <1> 		add edi, 2
  7276 00005DED D1C0                <1> 		rol eax, 1
  7277 00005DEF FEC1                <1> 		inc cl
  7278 00005DF1 80F920              <1> 		cmp cl, 32
  7279 00005DF4 72CE                <1> 		jb writeiconline
  7280 00005DF6 81C604000000        <1> 		add esi, 4
  7281 00005DFC FEC5                <1> 		inc ch
  7282 00005DFE 31D2                <1> 		xor edx, edx
  7283 00005E00 668B15[1B5E0000]    <1> 		mov dx, [resolutionx2]
  7284 00005E07 01D7                <1> 		add edi, edx
  7285 00005E09 81EF40000000        <1> 		sub edi, 64
  7286 00005E0F 80FD20              <1> 		cmp ch, 32
  7287 00005E12 72AA                <1> 		jb writeicon
  7288 00005E14 31C0                <1> 		xor eax, eax
  7289 00005E16 C3                  <1> 		ret
  7290                              <1> 
  7291 00005E17 0000                <1> resolutiony dw 0
  7292 00005E19 0000                <1> resolutionx dw 0
  7293 00005E1B 0000                <1> resolutionx2 dw 0
  7294 00005E1D 02                  <1> resolutionbytes db 2
  7295 00005E1E 0000                <1> posxvesa dw 0
  7296 00005E20 0000                <1> posyvesa dw 0
  7297 00005E22 FFFF                <1> colorfont dw 0xFFFF
  7298                              <1> savefontvesa:		;;same rules as showfontvesa
  7299 00005E24 C605[5C4F0000]01    <1> 	mov byte [savefonton], 1
  7300                              <1> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  7301 00005E2B 3CFF                <1> 	cmp al, 255
  7302 00005E2D 7501                <1> 	jne nostopshowfont
  7303 00005E2F C3                  <1> 	ret
  7304                              <1> nostopshowfont:
  7305 00005E30 66890D[205E0000]    <1> 	mov [posyvesa], cx
  7306 00005E37 3C0A                <1> 	cmp al, 10
  7307 00005E39 0F8431000000        <1> 	je near goodvesafontx
  7308 00005E3F 3C0D                <1> 	cmp al, 13
  7309 00005E41 0F8429000000        <1> 	je near goodvesafontx
  7310 00005E47 31C9                <1> 	xor ecx, ecx
  7311 00005E49 668B0D[1B5E0000]    <1> 	mov cx, [resolutionx2]
  7312 00005E50 6681E91000          <1> 	sub cx, 16
  7313 00005E55 6639CA              <1> 	cmp dx, cx
  7314 00005E58 7616                <1> 	jbe goodvesafontx
  7315 00005E5A 6631D2              <1> 	xor dx, dx
  7316 00005E5D 668B0D[205E0000]    <1> 	mov cx, [posyvesa]
  7317 00005E64 6681C11000          <1> 	add cx, 16
  7318 00005E69 66890D[205E0000]    <1> 	mov [posyvesa], cx
  7319                              <1> goodvesafontx:
  7320 00005E70 668B0D[205E0000]    <1> 	mov cx, [posyvesa]
  7321 00005E77 668915[1E5E0000]    <1> 	mov [posxvesa], dx
  7322 00005E7E 8B3D[A1850000]      <1> 	mov edi, [physbaseptr]
  7323 00005E84 66891D[225E0000]    <1> 	mov [colorfont], bx
  7324 00005E8B 31DB                <1> 	xor ebx, ebx
  7325 00005E8D 88C3                <1> 	mov bl, al
  7326 00005E8F 31C0                <1> 	xor eax, eax
  7327 00005E91 88D8                <1> 	mov al, bl
  7328 00005E93 6689D3              <1> 	mov bx, dx
  7329 00005E96 89DA                <1> 	mov edx, ebx
  7330 00005E98 31DB                <1> 	xor ebx, ebx
  7331 00005E9A 6681F90000          <1> 	cmp cx, 0
  7332 00005E9F 7415                <1> 	je vesaposloopdn
  7333 00005EA1 668B1D[1B5E0000]    <1> 	mov bx, [resolutionx2]
  7334                              <1> vesaposloop:
  7335 00005EA8 01DA                <1> 	add edx, ebx
  7336 00005EAA 6681E90100          <1> 	sub cx, 1
  7337 00005EAF 6681F90000          <1> 	cmp cx, 0
  7338 00005EB4 75F2                <1> 	jne vesaposloop
  7339                              <1> vesaposloopdn:
  7340 00005EB6 01D7                <1> 	add edi, edx
  7341 00005EB8 BE[69730000]        <1> 	mov esi, fonts
  7342                              <1> findfontvesa:
  7343 00005EBD 30E4                <1> 	xor ah, ah
  7344 00005EBF 3C0A                <1> 	cmp al, 10
  7345 00005EC1 0F8406010000        <1> 	je near nwlinevesa
  7346 00005EC7 3C0D                <1> 	cmp al, 13
  7347 00005EC9 0F8413010000        <1> 	je near cretvesa
  7348 00005ECF C1E004              <1> 	shl eax, 4
  7349 00005ED2 01C6                <1> 	add esi, eax
  7350 00005ED4 C1E804              <1> 	shr eax, 4
  7351 00005ED7 81FE[69830000]      <1> 	cmp esi, fontend
  7352 00005EDD 0F83B9000000        <1> 	jae near donefontvesa
  7353 00005EE3 4E                  <1> 	dec esi
  7354                              <1> foundfontvesa:
  7355 00005EE4 46                  <1> 	inc esi
  7356 00005EE5 803D[5C4F0000]01    <1> 	cmp byte [savefonton], 1
  7357 00005EEC 0F8403010000        <1> 	je near vesafontsaver
  7358 00005EF2 30C9                <1> 	xor cl, cl
  7359 00005EF4 8A06                <1> 	mov al, [esi]
  7360 00005EF6 668B15[1B5E0000]    <1> 	mov dx, [resolutionx2]
  7361 00005EFD 662B15[1E5E0000]    <1> 	sub dx, [posxvesa]
  7362 00005F04 6681FA1000          <1> 	cmp dx, 16
  7363 00005F09 7708                <1> 	ja paintfontvesa
  7364 00005F0B D0EA                <1> 	shr dl, 1
  7365 00005F0D 8815[CC5F0000]      <1> 	mov [charwidth], dl
  7366                              <1> paintfontvesa:
  7367 00005F13 B201                <1> 	mov dl, 1
  7368 00005F15 20C2                <1> 	and dl, al
  7369 00005F17 803D[5B4F0000]01    <1> 	cmp byte [showcursorfonton], 1
  7370 00005F1E 0F8435000000        <1> 	je near nodelpaintedfont
  7371 00005F24 803D[5B4F0000]02    <1> 	cmp byte [showcursorfonton], 2
  7372 00005F2B 0F8518000000        <1> 	jne near noswitchcursorfonton
  7373 00005F31 80FA00              <1> 	cmp dl, 0
  7374 00005F34 0F842E000000        <1> 	je near nopixelset
  7375 00005F3A 668B1D[225E0000]    <1> 	mov bx, [colorfont]
  7376 00005F41 66891F              <1> 	mov [edi], bx
  7377 00005F44 E91F000000          <1> 	jmp nopixelset
  7378                              <1> noswitchcursorfonton:
  7379 00005F49 3215[5D4F0000]      <1> 	xor dl, [mouseselecton]
  7380 00005F4F 668B1D[294E0000]    <1> 	mov bx, [background]
  7381 00005F56 66891F              <1> 	mov [edi], bx
  7382                              <1> nodelpaintedfont:
  7383 00005F59 80FA00              <1> 	cmp dl, 0
  7384 00005F5C 740A                <1> 	je nopixelset
  7385 00005F5E 668B15[225E0000]    <1> 	mov dx, [colorfont]
  7386 00005F65 668917              <1> 	mov [edi], dx
  7387                              <1> nopixelset:
  7388 00005F68 81C702000000        <1> 	add edi, 2
  7389 00005F6E D0C0                <1> 	rol al, 1
  7390 00005F70 FEC1                <1> 	inc cl
  7391 00005F72 3A0D[CC5F0000]      <1> 	cmp cl, [charwidth]
  7392 00005F78 7299                <1> 	jb paintfontvesa
  7393 00005F7A FEC5                <1> 	inc ch
  7394 00005F7C 31D2                <1> 	xor edx, edx
  7395 00005F7E 668B15[1B5E0000]    <1> 	mov dx, [resolutionx2]
  7396 00005F85 01D7                <1> 	add edi, edx
  7397 00005F87 31D2                <1> 	xor edx, edx
  7398 00005F89 8A15[CC5F0000]      <1> 	mov dl, [charwidth]
  7399 00005F8F 00D2                <1> 	add dl, dl
  7400 00005F91 29D7                <1> 	sub edi, edx
  7401 00005F93 80FD10              <1> 	cmp ch, 16
  7402 00005F96 0F8248FFFFFF        <1> 	jb foundfontvesa
  7403                              <1> donefontvesa:
  7404 00005F9C B208                <1> 	mov dl, 8
  7405 00005F9E 8815[CC5F0000]      <1> 	mov [charwidth], dl
  7406 00005FA4 668B15[1E5E0000]    <1> 	mov dx, [posxvesa]
  7407 00005FAB 8A1D[CC5F0000]      <1> 	mov bl, [charwidth]
  7408 00005FB1 30FF                <1> 	xor bh, bh
  7409 00005FB3 6601DA              <1> 	add dx, bx
  7410 00005FB6 668B1D[225E0000]    <1> 	mov bx, [colorfont]
  7411 00005FBD 668B0D[205E0000]    <1> 	mov cx, [posyvesa]
  7412 00005FC4 C605[5C4F0000]00    <1> 	mov byte [savefonton], 0
  7413 00005FCB C3                  <1> 	ret
  7414 00005FCC 08                  <1> charwidth db 8
  7415                              <1> nwlinevesa:
  7416 00005FCD 668B0D[205E0000]    <1> 	mov cx, [posyvesa]
  7417 00005FD4 6681C11000          <1> 	add cx, 16
  7418 00005FD9 66890D[205E0000]    <1> 	mov [posyvesa], cx
  7419 00005FE0 EBBA                <1> 	jmp donefontvesa
  7420                              <1> cretvesa:
  7421 00005FE2 668B15[1E5E0000]    <1> 	mov dx, [posxvesa]
  7422 00005FE9 6631D2              <1> 	xor dx, dx
  7423 00005FEC 668915[1E5E0000]    <1> 	mov [posxvesa], dx
  7424 00005FF3 EBA7                <1> 	jmp donefontvesa
  7425                              <1> vesafontsaver:
  7426 00005FF5 30C0                <1> 	xor al, al
  7427 00005FF7 30C9                <1> 	xor cl, cl
  7428                              <1> vesafontsaver2:
  7429 00005FF9 668B17              <1> 	mov dx, [edi]
  7430 00005FFC 663B15[225E0000]    <1> 	cmp dx, [colorfont]
  7431 00006003 742F                <1> 	je colorfontmatch
  7432                              <1> donecolormatch:
  7433 00006005 81C702000000        <1> 	add edi, 2
  7434 0000600B D0C0                <1> 	rol al, 1
  7435 0000600D FEC1                <1> 	inc cl
  7436 0000600F 80F908              <1> 	cmp cl, 8
  7437 00006012 72E5                <1> 	jb vesafontsaver2
  7438 00006014 8806                <1> 	mov [esi], al
  7439 00006016 46                  <1> 	inc esi
  7440 00006017 FEC5                <1> 	inc ch
  7441 00006019 31D2                <1> 	xor edx, edx
  7442 0000601B 668B15[1B5E0000]    <1> 	mov dx, [resolutionx2]
  7443 00006022 01D7                <1> 	add edi, edx
  7444 00006024 81EF10000000        <1> 	sub edi, 16
  7445 0000602A 80FD10              <1> 	cmp ch, 16
  7446 0000602D 72C6                <1> 	jb vesafontsaver
  7447 0000602F E968FFFFFF          <1> 	jmp donefontvesa
  7448                              <1> colorfontmatch:
  7449 00006034 0401                <1> 	add al, 1
  7450 00006036 EBCD                <1> 	jmp donecolormatch
  7451                              <1> 	
  7452                              <1> showbmp:
  7453 00006038 668B06              <1> 	mov ax, [esi]
  7454 0000603B 663D424D            <1> 	cmp ax, "BM"
  7455 0000603F 0F8582000000        <1> 	jne near endedbmp
  7456 00006045 8B3D[A1850000]      <1> 	mov edi, [physbaseptr]
  7457 0000604B 6689D0              <1> 	mov ax, dx
  7458 0000604E 6689CB              <1> 	mov bx, cx
  7459 00006051 31C9                <1> 	xor ecx, ecx
  7460 00006053 31D2                <1> 	xor edx, edx
  7461 00006055 6689D9              <1> 	mov cx, bx
  7462 00006058 6689C2              <1> 	mov dx, ax
  7463 0000605B 01D7                <1> 	add edi, edx
  7464 0000605D 01D7                <1> 	add edi, edx
  7465 0000605F 31D2                <1> 	xor edx, edx
  7466 00006061 668B15[1B5E0000]    <1> 	mov dx, [resolutionx2]
  7467 00006068 41                  <1> 	inc ecx
  7468 00006069 034E16              <1> 	add ecx, [esi + 22]
  7469                              <1> bmplocloop:
  7470 0000606C 01D7                <1> 	add edi, edx
  7471 0000606E E2FC                <1> 	loop bmplocloop
  7472 00006070 29D7                <1> 	sub edi, edx
  7473 00006072 8B5612              <1> 	mov edx, [esi + 18]
  7474 00006075 8B4E16              <1> 	mov ecx, [esi + 22]
  7475 00006078 8B460A              <1> 	mov eax, [esi + 10]
  7476 0000607B 8B5E02              <1> 	mov ebx, [esi + 2]
  7477 0000607E 01F3                <1> 	add ebx, esi
  7478 00006080 891D[CD600000]      <1> 	mov [bmpend], ebx
  7479 00006086 89D3                <1> 	mov ebx, edx
  7480 00006088 01C6                <1> 	add esi, eax
  7481                              <1> ldxbmp:
  7482 0000608A 668B06              <1> 	mov ax, [esi]
  7483 0000608D 668907              <1> 	mov [edi], ax
  7484 00006090 81C702000000        <1> 	add edi, 2
  7485 00006096 81C602000000        <1> 	add esi, 2
  7486 0000609C 3B35[CD600000]      <1> 	cmp esi, [bmpend]
  7487 000060A2 7723                <1> 	ja endedbmp
  7488 000060A4 4A                  <1> 	dec edx
  7489 000060A5 81FA00000000        <1> 	cmp edx, 0
  7490 000060AB 77DD                <1> 	ja ldxbmp
  7491 000060AD 31D2                <1> 	xor edx, edx
  7492 000060AF 668B15[1B5E0000]    <1> 	mov dx, [resolutionx2]
  7493 000060B6 29DF                <1> 	sub edi, ebx
  7494 000060B8 29DF                <1> 	sub edi, ebx
  7495 000060BA 29D7                <1> 	sub edi, edx
  7496 000060BC 49                  <1> 	dec ecx
  7497 000060BD 89DA                <1> 	mov edx, ebx
  7498 000060BF 81F900000000        <1> 	cmp ecx, 0
  7499 000060C5 77C3                <1> 	ja ldxbmp
  7500                              <1> endedbmp:
  7501 000060C7 E84DEFFFFF          <1> 	call switchmousepos2
  7502 000060CC C3                  <1> 	ret
  7503                              <1> 	
  7504 000060CD 00000000            <1> 	bmpend dd 0
  7505                              <1> 
  7506                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Here are some vars;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  7507 000060D1 00000000            <1> 	showstringesi dw 0,0
  7508 000060D5 00                  <1> 	mouseon db 0
  7509 000060D6 737461727400        <1> 	start	db "start",0
  7510 000060DC 536F6C6C65724F5300  <1> 	gotomenu db "SollerOS",0
  7511 000060E5 426F6F2100          <1> 	boomsg db "Boo!",0
  7512 000060EA 5061636D616E207761- <1> 	pacmsg	db "Pacman was easy to draw.",0
  7513 000060F3 73206561737920746F- <1>
  7514 000060FC 20647261772E00      <1>
  7515 00006103 4F6D206E6F6D206E6F- <1> 	pacnom  db "Om nom nom nom",0
  7516 0000610C 6D206E6F6D00        <1>
  7517 00006112 77696E646F77732073- <1> 	winmsg	db "windows sucks",0
  7518 0000611B 75636B7300          <1>
  7519 00006120 5800                <1> 	xmsg db "X",0
  7520 00006122 0000                <1> 	icon dw 0	;pointer to icon
  7521 00006124 00000000            <1> 	codepointer dw 0,0 ;pointer to code
  7522 00006128 00                  <1> 	iconselected db 0
  7523                              <1> 	
  7524                              <1> 	boo:
  7525 00006129 BE[E5600000]        <1> 		mov esi, boomsg
  7526 0000612E 66BA6400            <1> 		mov dx, 100
  7527 00006132 66B94001            <1> 		mov cx, 320
  7528 00006136 31DB                <1> 		xor ebx, ebx
  7529 00006138 6631C0              <1> 		xor ax, ax
  7530 0000613B E9CFF7FFFF          <1> 		jmp showstring
  7531                              <1> 
  7532                              <1> 	pacmannomnom:
  7533 00006140 BE[03610000]        <1> 		mov esi, pacnom
  7534 00006145 66BA8200            <1> 		mov dx, 130
  7535 00006149 66B93C00            <1> 		mov cx, 60
  7536 0000614D 31DB                <1> 		xor ebx, ebx
  7537 0000614F 6631C0              <1> 		xor ax, ax
  7538 00006152 E9B8F7FFFF          <1> 		jmp showstring	
  7539                              <1> 	
  7540                              <1> 	noie:
  7541 00006157 31D2                <1> 		xor edx, edx
  7542 00006159 31C9                <1> 		xor ecx, ecx
  7543 0000615B 668B15[195E0000]    <1> 		mov dx, [resolutionx]
  7544 00006162 668B0D[175E0000]    <1> 		mov cx, [resolutiony]
  7545 00006169 66C1EA03            <1> 		shr dx, 3
  7546 0000616D 66C1E904            <1> 		shr cx, 4
  7547 00006171 6681EA0400          <1> 		sub dx, 4
  7548 00006176 6681E90400          <1> 		sub cx, 4
  7549 0000617B 66C1E203            <1> 		shl dx, 3
  7550 0000617F 66C1E104            <1> 		shl cx, 4
  7551 00006183 668915[47620000]    <1> 		mov [termwindow], dx
  7552 0000618A 66890D[49620000]    <1> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  7553 00006191 BE[47620000]        <1> 		mov esi, termwindow
  7554 00006196 66BA1000            <1> 		mov dx, 16
  7555 0000619A 66B91000            <1> 		mov cx, 16
  7556 0000619E BB[F92E0000]        <1> 		mov ebx, os
  7557 000061A3 891D[25040000]      <1> 		mov [user2codepoint], ebx
  7558 000061A9 6631C0              <1> 		xor ax, ax
  7559 000061AC E8CAF7FFFF          <1> 		call showwindow
  7560 000061B1 E943CDFFFF          <1> 		jmp os
  7561                              <1> 
  7562                              <1> 	gotomenuboot:
  7563 000061B6 31D2                <1> 		xor edx, edx
  7564 000061B8 31C9                <1> 		xor ecx, ecx
  7565 000061BA 668B15[195E0000]    <1> 		mov dx, [resolutionx]
  7566 000061C1 668B0D[175E0000]    <1> 		mov cx, [resolutiony]
  7567 000061C8 66C1E904            <1> 		shr cx, 4
  7568 000061CC 6681E90100          <1> 		sub cx, 1
  7569 000061D1 66C1E104            <1> 		shl cx, 4
  7570 000061D5 668915[47620000]    <1> 		mov [termwindow], dx
  7571 000061DC 66890D[49620000]    <1> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  7572 000061E3 BE[47620000]        <1> 		mov esi, termwindow
  7573 000061E8 6631D2              <1> 		xor dx, dx
  7574 000061EB 6631C9              <1> 		xor cx, cx
  7575 000061EE BB[F92E0000]        <1> 		mov ebx, os
  7576 000061F3 891D[25040000]      <1> 		mov [user2codepoint], ebx
  7577 000061F9 6631C0              <1> 		xor ax, ax
  7578 000061FC E87AF7FFFF          <1> 		call showwindow
  7579 00006201 E9F3CCFFFF          <1> 		jmp os
  7580                              <1> 		;ret
  7581                              <1> 
  7582                              <1> 	winblows:
  7583 00006206 BE[12610000]        <1> 		mov esi, winmsg
  7584 0000620B 6631D2              <1> 		xor dx, dx
  7585 0000620E 668B0D[175E0000]    <1> 		mov cx, [resolutiony]
  7586 00006215 6681E92000          <1> 		sub cx, 32
  7587 0000621A 31DB                <1> 		xor ebx, ebx
  7588 0000621C 30E4                <1> 		xor ah, ah
  7589 0000621E B011                <1> 		mov al, 00010001b
  7590 00006220 E8EAF6FFFF          <1> 		call showstring
  7591 00006225 BE[DC600000]        <1> 		mov esi, gotomenu
  7592 0000622A 668B0D[175E0000]    <1> 		mov cx, [resolutiony]
  7593 00006231 6681E93000          <1> 		sub cx, 48
  7594 00006236 6631D2              <1> 		xor dx, dx
  7595 00006239 30E4                <1> 		xor ah, ah
  7596 0000623B B010                <1> 		mov al, 00010000b
  7597 0000623D BB[B6610000]        <1> 		mov ebx, gotomenuboot
  7598 00006242 E9C8F6FFFF          <1> 		jmp showstring
  7599                              <1> 
  7600 00006247 20035802            <1> 	termwindow:	dw 800,600	;;window size
  7601 0000624B 53757065725465726D- <1> 	termmsg:	db "SuperTerminal",0	;;window title
  7602 00006254 696E616C00          <1>
  7603                              <1> 	
  7604 00006254 <incbin>            <1> interneticon: 	incbin 'source/precompiled/interneticon.pak'
  7605 00006254 <incbin>            <1> wordicon: 	incbin 'source/precompiled/wordicon.pak'
  7606 00006254 <incbin>            <1> pacmanpellet: incbin 'source/precompiled/pacmanpellet.pak'
  7607 00006254 <incbin>            <1> ghostie	incbin 'source/precompiled/ghostie.pak'
  7608 00006254 <incbin>            <1> pacman	incbin 'source/precompiled/pacman.pak'
  7609                                      ;%include 'source/network.asm'
  7610                                  	%include 'source/rtl8139.asm'
  7611                              <1> ;;rtl8139.asm
  7612                              <1> initcard:	;;should find card, get mac, and initialize card
  7613 000064E3 31C0                <1> 	xor eax, eax
  7614 000064E5 A2[17680000]        <1> 	mov [pcifunction], al
  7615 000064EA A2[15680000]        <1> 	mov [pcibus], al
  7616 000064EF A2[16680000]        <1> 	mov [pcidevice], al
  7617 000064F4 B002                <1> 	mov al, 0x02 ;;type code
  7618 000064F6 A2[92680000]        <1> 	mov [pcitype], al
  7619 000064FB E81A030000          <1> 	call getpciport
  7620                              <1> initnic:		;;;;Here i tried the rtl8139 interface, fuck it
  7621 00006500 8915[EC660000]      <1> 	mov [basenicaddr], edx
  7622 00006506 89D1                <1> 	mov ecx, edx
  7623 00006508 C605[23350000]03    <1> 	mov byte [firsthexshown], 3
  7624 0000650F E824D0FFFF          <1> 	call showhex	;;for debugging, please remove
  7625 00006514 BE[5F720000]        <1> 	mov esi, rbuffstart
  7626 00006519 B900200000          <1> 	mov ecx, 8192
  7627 0000651E 31C0                <1> 	xor eax, eax
  7628                              <1> clearrbuff:		;;clear receive buffer which starts at rbuffstart
  7629 00006520 8806                <1> 	mov [esi], al
  7630 00006522 46                  <1> 	inc esi
  7631 00006523 6649                <1> 	dec cx
  7632 00006525 6681F90000          <1> 	cmp cx, 0
  7633 0000652A 75F4                <1> 	jne clearrbuff
  7634                              <1> findmac:
  7635 0000652C 8B15[EC660000]      <1> 	mov edx, [basenicaddr]
  7636 00006532 BF[F4660000]        <1> 	mov edi, sysmac
  7637 00006537 B906000000          <1> 	mov ecx, 6
  7638                              <1> macputloop:
  7639 0000653C EC                  <1> 	in al, dx
  7640 0000653D 8807                <1> 	mov [edi], al
  7641 0000653F 47                  <1> 	inc edi
  7642 00006540 42                  <1> 	inc edx
  7643 00006541 49                  <1> 	dec ecx
  7644 00006542 75F8                <1> 	jnz macputloop
  7645 00006544 B9[F4660000]        <1> 	mov ecx, sysmac
  7646 00006549 E837010000          <1> 	call showmac
  7647                              <1> resetnic:
  7648 0000654E 8B15[EC660000]      <1> 	mov edx, [basenicaddr]
  7649 00006554 81C252000000        <1> 	add edx, 0x52
  7650 0000655A 30C0                <1> 	xor al, al
  7651 0000655C EE                  <1> 	out dx, al	;;WAKE UP!!!!
  7652 0000655D 8B15[EC660000]      <1> 	mov edx, [basenicaddr]
  7653 00006563 81C237000000        <1> 	add edx, 0x37
  7654 00006569 B010                <1> 	mov al, 0x10
  7655 0000656B EE                  <1> 	out dx, al	;;Reset
  7656                              <1> resetnicwait:
  7657 0000656C 8B15[EC660000]      <1> 	mov edx, [basenicaddr]
  7658 00006572 81C237000000        <1> 	add edx, 0x37
  7659 00006578 EC                  <1> 	in al, dx
  7660 00006579 2410                <1> 	and al, 0x10
  7661 0000657B 3C10                <1> 	cmp al, 0x10
  7662 0000657D 0F84E9FFFFFF        <1> 	je near resetnicwait
  7663 00006583 8B15[EC660000]      <1> 	mov edx, [basenicaddr]
  7664 00006589 81C230000000        <1> 	add edx, 0x30
  7665 0000658F B8[5F720000]        <1> 	mov eax, rbuffstart
  7666 00006594 EF                  <1> 	out dx, eax	;;give nic receive buffer location
  7667 00006595 8B15[EC660000]      <1> 	mov edx, [basenicaddr]
  7668 0000659B 81C23C000000        <1> 	add edx, 0x3C
  7669 000065A1 66B80500            <1> 	mov ax, 0x0005
  7670 000065A5 66EF                <1> 	out dx, ax	;;set TOK and ROK
  7671 000065A7 8B15[EC660000]      <1> 	mov edx, [basenicaddr]
  7672 000065AD 81C244000000        <1> 	add edx, 0x44
  7673 000065B3 B80F000000          <1> 	mov eax, 0xf
  7674 000065B8 EF                  <1> 	out dx, eax	;;recieve packets from all matches
  7675 000065B9 8B15[EC660000]      <1> 	mov edx, [basenicaddr]
  7676 000065BF 81C237000000        <1> 	add edx, 0x37
  7677 000065C5 B00C                <1> 	mov al, 0x0C
  7678 000065C7 EE                  <1> 	out dx, al	;;use transmit and receive
  7679 000065C8 C605[D5660000]01    <1> 	mov byte [nicconfig], 1
  7680 000065CF C3                  <1> 	ret
  7681                              <1> 	
  7682                              <1> sendframe:	;;padded frame with beginning in edi and end in esi
  7683 000065D0 56                  <1> 	push esi
  7684 000065D1 57                  <1> 	push edi
  7685                              <1> nic2:		;;here come the low level drivers :(
  7686                              <1> 			;;frame begins at esi, ends at edi 			;;0x0200 is the class code for ethernet cards
  7687 000065D2 803D[D5660000]01    <1> 	cmp byte [nicconfig], 1
  7688 000065D9 7405                <1> 	je sendcachedata
  7689 000065DB E803FFFFFF          <1> 	call initcard
  7690                              <1> sendcachedata:
  7691 000065E0 8B15[EC660000]      <1> 	mov edx, [basenicaddr]
  7692 000065E6 81C210000000        <1> 	add edx, 0x10
  7693 000065EC ED                  <1> 	in eax, dx
  7694 000065ED 89C1                <1> 	mov ecx, eax
  7695 000065EF E844CFFFFF          <1> 	call showhex
  7696 000065F4 8B15[EC660000]      <1> 	mov edx, [basenicaddr]
  7697 000065FA 81C213000000        <1> 	add edx, 0x13
  7698 00006600 ED                  <1> 	in eax, dx
  7699 00006601 89C1                <1> 	mov ecx, eax
  7700 00006603 E830CFFFFF          <1> 	call showhex
  7701 00006608 8B15[EC660000]      <1> 	mov edx, [basenicaddr]
  7702 0000660E 81C223000000        <1> 	add edx, 0x23	;;23 or 20?
  7703 00006614 5F                  <1> 	pop edi
  7704 00006615 89F8                <1> 	mov eax, edi
  7705 00006617 EF                  <1> 	out dx, eax	;;here's Johnny!
  7706 00006618 5E                  <1> 	pop esi
  7707 00006619 29FE                <1> 	sub esi, edi
  7708 0000661B 89F0                <1> 	mov eax, esi
  7709 0000661D 8B15[EC660000]      <1> 	mov edx, [basenicaddr]
  7710 00006623 81C213000000        <1> 	add edx, 0x13	;;13 or 10?
  7711 00006629 EF                  <1> 	out dx, eax
  7712                              <1> checknicstatus1:
  7713 0000662A 8B15[EC660000]      <1> 	mov edx, [basenicaddr]
  7714 00006630 81C213000000        <1> 	add edx, 0x13	;;13 or 10?
  7715 00006636 ED                  <1> 	in eax, dx
  7716 00006637 2500200000          <1> 	and eax, 0x2000
  7717 0000663C 3D00200000          <1> 	cmp eax, 0x2000
  7718 00006641 75E7                <1> 	jne checknicstatus1
  7719                              <1> checknicstatus:
  7720 00006643 8B15[EC660000]      <1> 	mov edx, [basenicaddr]
  7721 00006649 81C213000000        <1> 	add edx, 0x13	;;13 or 10?
  7722 0000664F ED                  <1> 	in eax, dx
  7723 00006650 2500800000          <1> 	and eax, 0x8000
  7724 00006655 3D00800000          <1> 	cmp eax, 0x8000
  7725 0000665A 75E7                <1> 	jne checknicstatus
  7726 0000665C 8B15[EC660000]      <1> 	mov edx, [basenicaddr]
  7727 00006662 81C210000000        <1> 	add edx, 0x10
  7728 00006668 ED                  <1> 	in eax, dx
  7729 00006669 89C1                <1> 	mov ecx, eax
  7730 0000666B E8C8CEFFFF          <1> 	call showhex
  7731 00006670 8B15[EC660000]      <1> 	mov edx, [basenicaddr]
  7732 00006676 81C213000000        <1> 	add edx, 0x13
  7733 0000667C ED                  <1> 	in eax, dx
  7734 0000667D 89C1                <1> 	mov ecx, eax
  7735 0000667F E8B4CEFFFF          <1> 	call showhex
  7736 00006684 C3                  <1> 	ret
  7737                              <1> 	
  7738                              <1> showmac:	;;mac begins in [ecx]
  7739 00006685 BE[BD660000]        <1> 	mov esi, macprint
  7740 0000668A 89CF                <1> 	mov edi, ecx
  7741 0000668C 81C106000000        <1> 	add ecx, 6
  7742                              <1> showmacloop:
  7743 00006692 8A07                <1> 	mov al, [edi]
  7744 00006694 8A27                <1> 	mov ah, [edi]
  7745 00006696 C0E804              <1> 	shr al, 4
  7746 00006699 C0E404              <1> 	shl ah, 4
  7747 0000669C C0EC04              <1> 	shr ah, 4
  7748 0000669F 0430                <1> 	add al, 48
  7749 000066A1 80C430              <1> 	add ah, 48
  7750 000066A4 668906              <1> 	mov [esi], ax
  7751 000066A7 81C603000000        <1> 	add esi, 3
  7752 000066AD 47                  <1> 	inc edi
  7753 000066AE 39CF                <1> 	cmp edi, ecx
  7754 000066B0 72E0                <1> 	jb showmacloop
  7755 000066B2 BE[BD660000]        <1> 	mov esi, macprint
  7756 000066B7 E80AC3FFFF          <1> 	call print
  7757 000066BC C3                  <1> 	ret
  7758                              <1> 	
  7759 000066BD 30302D30302D30302D- <1> macprint db "00-00-00-00-00-00  ",0
  7760 000066C6 30302D30302D303020- <1>
  7761 000066CF 2000                <1>
  7762 000066D1 00000000            <1> ethernetend dw 0,0
  7763 000066D5 00                  <1> nicconfig db 0
  7764 000066D6 4E4F204E494300      <1> nonicfoundmsg db "NO NIC",0
  7765 000066DD 496E6974696174696E- <1> initnicmsg	db "Initiating NIC",0
  7766 000066E6 67204E494300        <1>
  7767 000066EC 00000000            <1> basenicaddr	db 0,0,0,0
  7768 000066F0 C0A80005            <1> sysip db 192,168,0,5
  7769 000066F4 000000000000        <1> sysmac	db 0,0,0,0,0,0		;;my mac address
  7770                                  	%include 'source/arp.asm'
  7771                              <1> ;;let's try something else
  7772                              <1> ;;arp.asm
  7773                              <1> arpinit:
  7774 000066FA BE[B1670000]        <1> 	mov esi, arptable
  7775 000066FF BF[F4660000]        <1> 	mov edi, sysmac
  7776 00006704 BB[F0660000]        <1> 	mov ebx, sysip
  7777 00006709 8B0F                <1> 	mov ecx, [edi]
  7778 0000670B 890E                <1> 	mov [esi], ecx
  7779 0000670D 668B4F04            <1> 	mov cx, [edi + 4]
  7780 00006711 894E04              <1> 	mov [esi + 4], ecx
  7781 00006714 8B0B                <1> 	mov ecx, [ebx]
  7782 00006716 894E06              <1> 	mov [esi + 6], ecx
  7783 00006719 C605[B0670000]01    <1> 	mov byte [arpconfig], 1
  7784 00006720 C3                  <1> 	ret
  7785                              <1> arptest:
  7786 00006721 803D[B0670000]01    <1> 	cmp byte [arpconfig], 1
  7787 00006728 7405                <1> 	je arptest2
  7788 0000672A E8CBFFFFFF          <1> 	call arpinit
  7789                              <1> arptest2:	;;try to reach 192.168.0.1
  7790 0000672F 8B0D[F4660000]      <1> 	mov ecx, [sysmac]
  7791 00006735 668B1D[F8660000]    <1> 	mov bx, [sysmac + 4]
  7792 0000673C 890D[76670000]      <1> 	mov [sourcemac], ecx
  7793 00006742 66891D[7A670000]    <1> 	mov [sourcemac + 4],bx
  7794 00006749 890D[86670000]      <1> 	mov [arpsenderinfo], ecx
  7795 0000674F 66891D[8A670000]    <1> 	mov [arpsenderinfo + 4], bx
  7796 00006756 BF[70670000]        <1> 	mov edi, frame
  7797 0000675B BE[B0670000]        <1> 	mov esi, framend
  7798 00006760 E86BFEFFFF          <1> 	call sendframe
  7799 00006765 BE[40730000]        <1> 	mov esi, line
  7800 0000676A E857C2FFFF          <1> 	call print
  7801 0000676F C3                  <1> 	ret
  7802                              <1> 	
  7803                              <1> ;;example frame
  7804                              <1> frame:
  7805 00006770 FFFFFFFFFFFF        <1> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  7806 00006776 000000000000        <1> sourcemac:		db 0,0,0,0,0,0
  7807 0000677C 0608                <1> ethertype:		dw 0x0806			;;arp
  7808                              <1> 	;;example packet
  7809 0000677E 0100                <1> 	arppacket: 		dw 1				;;ethernet is 1
  7810 00006780 0008                <1> 	arpprotocol: 	dw 0x0800			;;ip is 0x800
  7811 00006782 0604                <1> 					db 6,4				;;length of mac, length of ip
  7812 00006784 0100                <1> 	arpoperation: 	dw 1				;;one for arp request
  7813 00006786 000000000000        <1> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;;mac
  7814 0000678C C0A80005            <1> 					db 192,168,0,5			;;ip
  7815 00006790 000000000000        <1> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;;ignored in requests
  7816 00006796 C0A80001            <1> 					db 192,168,0,1			;;ip
  7817 0000679A 00<rept>            <1> padding:		times (64-($-frame)) db 0
  7818                              <1> framend:
  7819                              <1> 
  7820 000067B0 00                  <1> arpconfig db 0
  7821                              <1> arptable:	;;mac,ip
  7822 000067B1 000000000000000000- <1> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  7823 000067BA 00<rept>            <1>
  7824                              <1> arptableend:
  7825                                  	%include 'source/pci.asm'
  7826 00006815 00                  <1> pcibus		db 0
  7827 00006816 00                  <1> pcidevice	db 0
  7828 00006817 00                  <1> pcifunction	db 0
  7829 00006818 00                  <1> pciregister	db 0
  7830 00006819 00                  <1> pcireqtype db 0
  7831                              <1> 
  7832                              <1> getpciport:
  7833 0000681A B001                <1> 	mov al, 1
  7834 0000681C A2[19680000]        <1> 	mov [pcireqtype], al
  7835 00006821 E916000000          <1> 	jmp searchpci
  7836                              <1> pcidump:
  7837 00006826 31C0                <1> 	xor eax, eax
  7838 00006828 A2[17680000]        <1> 	mov [pcifunction], al
  7839 0000682D A2[15680000]        <1> 	mov [pcibus], al
  7840 00006832 A2[16680000]        <1> 	mov [pcidevice], al
  7841 00006837 A2[19680000]        <1> 	mov [pcireqtype], al
  7842                              <1> searchpci:		;;return in ebx, start X in pciX
  7843 0000683C 30C0                <1> 	xor al, al
  7844 0000683E A2[18680000]        <1> 	mov [pciregister], al
  7845 00006843 E847010000          <1> 	call getpciaddr
  7846 00006848 BAF80C0000          <1> 	mov edx, 0xCF8
  7847 0000684D EF                  <1> 	out dx, eax	;;request pci config
  7848 0000684E BAFC0C0000          <1> 	mov edx, 0xCFC
  7849 00006853 ED                  <1> 	in eax, dx 	;;read in pci config
  7850 00006854 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7851 00006859 0F8237000000        <1> 	jb near checkpcidevice
  7852                              <1> searchpciret:
  7853                              <1> nextpcidevice:
  7854 0000685F 30C0                <1> 	xor al, al
  7855 00006861 A2[17680000]        <1> 	mov [pcifunction], al
  7856 00006866 A0[16680000]        <1> 	mov al, [pcidevice]
  7857 0000686B 3C1F                <1> 	cmp al, 11111b
  7858 0000686D 0F83B3000000        <1> 	jae near nextpcibus
  7859 00006873 FEC0                <1> 	inc al
  7860 00006875 A2[16680000]        <1> 	mov [pcidevice], al
  7861 0000687A EBC0                <1> 	jmp searchpci
  7862 0000687C A0[17680000]        <1> 	mov al, [pcifunction]
  7863 00006881 3C07                <1> 	cmp al, 111b
  7864 00006883 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7865 00006889 FEC0                <1> 	inc al
  7866 0000688B A2[17680000]        <1> 	mov [pcifunction], al
  7867 00006890 EBAA                <1> 	jmp searchpci
  7868 00006892 00000000            <1> pcitype: db 0,0,0,0
  7869                              <1> checkpcidevice:
  7870 00006896 30C0                <1> 	xor al, al
  7871 00006898 3805[19680000]      <1> 	cmp [pcireqtype], al
  7872 0000689E 0F842B000000        <1> 	je near dumppcidevice
  7873 000068A4 B008                <1> 	mov al, 0x08
  7874 000068A6 A2[18680000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7875 000068AB E8DF000000          <1> 	call getpciaddr
  7876 000068B0 BAF80C0000          <1> 	mov edx, 0xCF8
  7877 000068B5 EF                  <1> 	out dx, eax
  7878 000068B6 BAFC0C0000          <1> 	mov edx, 0xCFC
  7879 000068BB ED                  <1> 	in eax, dx
  7880 000068BC C1C008              <1> 	rol eax, 8
  7881 000068BF 8A1D[92680000]      <1> 	mov bl, [pcitype]
  7882 000068C5 38D8                <1> 	cmp al, bl
  7883 000068C7 0F8478000000        <1> 	je near foundpciaddr
  7884 000068CD EB90                <1> 	jmp searchpciret
  7885                              <1> dumppcidevice:
  7886 000068CF 30C0                <1> 	xor al, al
  7887 000068D1 A2[18680000]        <1> 	mov [pciregister], al
  7888 000068D6 E8B4000000          <1> 	call getpciaddr
  7889 000068DB 89C1                <1> 	mov ecx, eax
  7890 000068DD E856CCFFFF          <1> 	call showhex
  7891                              <1> dumppcidevicelp:
  7892 000068E2 A2[18680000]        <1> 	mov [pciregister], al
  7893 000068E7 E8A3000000          <1> 	call getpciaddr
  7894 000068EC BAF80C0000          <1> 	mov edx, 0xCF8
  7895 000068F1 EF                  <1> 	out dx, eax
  7896 000068F2 BAFC0C0000          <1> 	mov edx, 0xCFC
  7897 000068F7 ED                  <1> 	in eax, dx
  7898 000068F8 89C1                <1> 	mov ecx, eax
  7899 000068FA A0[18680000]        <1> 	mov al, [pciregister]
  7900 000068FF 0404                <1> 	add al, 4
  7901 00006901 E832CCFFFF          <1> 	call showhex
  7902 00006906 3C3C                <1> 	cmp al, 0x3C
  7903 00006908 72D8                <1> 	jb dumppcidevicelp
  7904                              <1> dumppcidn:
  7905 0000690A 803D[AA270000]00    <1> 	cmp byte [charpos], 0
  7906 00006911 0F8448FFFFFF        <1> 	je near searchpciret
  7907 00006917 BE[40730000]        <1> 	mov esi, line
  7908 0000691C E8A5C0FFFF          <1> 	call print
  7909 00006921 E939FFFFFF          <1> 	jmp searchpciret
  7910                              <1> nextpcibus:
  7911 00006926 30C0                <1> 	xor al, al
  7912 00006928 A2[16680000]        <1> 	mov [pcidevice], al
  7913 0000692D A0[15680000]        <1> 	mov al, [pcibus]
  7914 00006932 3C7F                <1> 	cmp al, 1111111b
  7915 00006934 730C                <1> 	jae donesearchpci
  7916 00006936 FEC0                <1> 	inc al
  7917 00006938 A2[15680000]        <1> 	mov [pcibus], al
  7918 0000693D E9FAFEFFFF          <1> 	jmp searchpci
  7919                              <1> donesearchpci:
  7920 00006942 31D2                <1> 	xor edx, edx
  7921 00006944 C3                  <1> 	ret
  7922                              <1> foundpciaddr:
  7923 00006945 B010                <1> 	mov al, 0x10
  7924 00006947 A2[18680000]        <1> 	mov [pciregister], al
  7925                              <1> findpciioaddr:
  7926 0000694C E83E000000          <1> 	call getpciaddr
  7927 00006951 BAF80C0000          <1> 	mov edx, 0xCF8
  7928 00006956 EF                  <1> 	out dx, eax
  7929 00006957 BAFC0C0000          <1> 	mov edx, 0xCFC
  7930 0000695C ED                  <1> 	in eax, dx
  7931 0000695D 89C3                <1> 	mov ebx, eax
  7932 0000695F 81E301000000        <1> 	and ebx, 1
  7933 00006965 81FB00000000        <1> 	cmp ebx, 0
  7934 0000696B 0F8408000000        <1> 	je near notpciioaddr
  7935 00006971 2D01000000          <1> 	sub eax, 1
  7936 00006976 89C2                <1> 	mov edx, eax
  7937 00006978 C3                  <1> 	ret
  7938                              <1> notpciioaddr:
  7939 00006979 A0[18680000]        <1> 	mov al, [pciregister]
  7940 0000697E 0404                <1> 	add al, 4
  7941 00006980 3C28                <1> 	cmp al, 0x28
  7942 00006982 0F87D7FEFFFF        <1> 	ja near searchpciret
  7943 00006988 A2[18680000]        <1> 	mov [pciregister], al
  7944 0000698D EBBD                <1> 	jmp findpciioaddr
  7945                              <1> getpciaddr:		;;puts it in eax and ebx
  7946 0000698F 31C0                <1> 			xor eax, eax
  7947 00006991 BB00000080          <1> 			mov ebx, 0x80000000
  7948 00006996 A0[15680000]        <1> 			mov al, [pcibus]
  7949 0000699B C1E010              <1> 			shl eax, 16
  7950 0000699E 01C3                <1> 			add ebx, eax
  7951 000069A0 31C0                <1> 			xor eax, eax
  7952 000069A2 A0[16680000]        <1> 			mov al, [pcidevice]
  7953 000069A7 C1E00B              <1> 			shl eax, 11
  7954 000069AA 01C3                <1> 			add ebx, eax
  7955 000069AC 31C0                <1> 			xor eax, eax
  7956 000069AE A0[17680000]        <1> 			mov al, [pcifunction]
  7957 000069B3 C1E008              <1> 			shl eax, 8
  7958 000069B6 01C3                <1> 			add ebx, eax
  7959 000069B8 31C0                <1> 			xor eax, eax
  7960 000069BA A0[18680000]        <1> 			mov al, [pciregister]
  7961 000069BF 01C3                <1> 			add ebx, eax
  7962 000069C1 89D8                <1> 			mov eax, ebx
  7963 000069C3 C3                  <1> 			ret
  7964                                  	;%include 'source/process.asm'
  7965                                      %include 'source/disk.asm'
  7966                              <1> ;;disk.asm - new - using lba
  7967                              <1> loadfile:	;;loads a file with the name buffer's location in edi into location in esi
  7968 000069C4 803F00              <1> 	cmp byte [edi], 0
  7969 000069C7 0F8444000000        <1> 	je near nofileload
  7970 000069CD 89FA                <1> 	mov edx, edi
  7971 000069CF BB[13720000]        <1> 	mov ebx, diskfileindex
  7972                              <1> nextnamechar:
  7973 000069D4 8A07                <1> 	mov al, [edi]
  7974 000069D6 8A23                <1> 	mov ah, [ebx]
  7975 000069D8 47                  <1> 	inc edi
  7976 000069D9 43                  <1> 	inc ebx
  7977 000069DA 88C1                <1> 	mov cl, al
  7978 000069DC 08E1                <1> 	or cl, ah
  7979 000069DE 80F900              <1> 	cmp cl, 0
  7980 000069E1 744E                <1> 	je equalfilenames
  7981 000069E3 80F920              <1> 	cmp cl, ' '
  7982 000069E6 7449                <1> 	je equalfilenames
  7983 000069E8 3C2A                <1> 	cmp al, '*'
  7984 000069EA 742B                <1> 	je equalfilenames2
  7985 000069EC 80FC00              <1> 	cmp ah, 0
  7986 000069EF 7410                <1> 	je nextfilename
  7987 000069F1 3C00                <1> 	cmp al, 0
  7988 000069F3 740C                <1> 	je nextfilename
  7989 000069F5 38E0                <1> 	cmp al, ah
  7990 000069F7 74DB                <1> 	je nextnamechar
  7991                              <1> getebxzero:
  7992 000069F9 8A23                <1> 	mov ah, [ebx]
  7993 000069FB 43                  <1> 	inc ebx
  7994 000069FC 80FC00              <1> 	cmp ah, 0
  7995 000069FF 75F8                <1> 	jne getebxzero
  7996                              <1> nextfilename:
  7997 00006A01 81C308000000        <1> 	add ebx, 8		;;next descriptor
  7998 00006A07 89D7                <1> 	mov edi, edx
  7999 00006A09 81FB[CA720000]      <1> 	cmp ebx, enddiskfileindex
  8000 00006A0F 72C3                <1> 	jb nextnamechar
  8001                              <1> nofileload:
  8002 00006A11 BA94010000          <1> 	mov edx, 404	;;indicate not found error
  8003 00006A16 C3                  <1> 	ret
  8004                              <1> equalfilenames2:
  8005 00006A17 81EB02000000        <1> 	sub ebx, 2
  8006                              <1> eqfilefind:
  8007 00006A1D 43                  <1> 	inc ebx
  8008 00006A1E 81FB[CA720000]      <1> 	cmp ebx, enddiskfileindex
  8009 00006A24 0F83E7FFFFFF        <1> 	jae near nofileload
  8010 00006A2A 8A03                <1> 	mov al, [ebx]
  8011 00006A2C 3C00                <1> 	cmp al, 0
  8012 00006A2E 75ED                <1> 	jne eqfilefind
  8013 00006A30 43                  <1> 	inc ebx
  8014                              <1> equalfilenames:
  8015 00006A31 8B4304              <1> 	mov eax, [ebx + 4] 	;;put file size in eax
  8016 00006A34 8B1B                <1> 	mov ebx, [ebx]		;;put file beginning in ebx
  8017 00006A36 031D[82010000]      <1> 	add ebx, [lbaad]	;;add offset to solleros
  8018 00006A3C 31C9                <1> 	xor ecx, ecx
  8019 00006A3E 88C1                <1> 	mov cl, al			;;get excess number of sectors
  8020 00006A40 D0E1                <1> 	shl cl, 1
  8021 00006A42 D0E9                <1> 	shr cl, 1			;;cut off at 128
  8022 00006A44 29C8                <1> 	sub eax, ecx		;;get rid of excess sectors
  8023 00006A46 B500                <1> 	mov ch, 0			;;drive 0
  8024 00006A48 C1E807              <1> 	shr eax, 7			;;get number of 128 sector tracks
  8025                              <1> loaddiskfile:		;;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8026 00006A4B A3[896A0000]        <1> 	mov [filetracks], eax
  8027 00006A50 89F7                <1> 	mov edi, esi		;;just in case cl is 0
  8028 00006A52 89DA                <1> 	mov edx, ebx
  8029 00006A54 80F900              <1> 	cmp cl, 0
  8030 00006A57 7405                <1> 	je copytracksforfile
  8031 00006A59 E837000000          <1> 	call diskr		;;take care of excess sectors
  8032                              <1> copytracksforfile:
  8033 00006A5E A1[896A0000]        <1> 	mov eax, [filetracks]
  8034 00006A63 3D00000000          <1> 	cmp eax, 0
  8035 00006A68 7419                <1> 	je donecopyfile
  8036 00006A6A 48                  <1> 	dec eax
  8037 00006A6B A3[896A0000]        <1> 	mov [filetracks], eax
  8038 00006A70 89D3                <1> 	mov ebx, edx	;;get end lba
  8039 00006A72 B180                <1> 	mov cl, 0x80
  8040 00006A74 8A2D[81010000]      <1> 	mov ch, [DriveNumber]
  8041 00006A7A 89FE                <1> 	mov esi, edi	;;reset buffer
  8042 00006A7C E814000000          <1> 	call diskr
  8043 00006A81 EBDB                <1> 	jmp copytracksforfile
  8044                              <1> donecopyfile:
  8045 00006A83 BA00000000          <1> 	mov edx, 0	;;no error
  8046 00006A88 C3                  <1> 	ret
  8047                              <1> 	
  8048 00006A89 00000000            <1> filetracks dd 0
  8049 00006A8D 00                  <1> lbad1 db 0
  8050 00006A8E 00                  <1> lbad2 db 0
  8051 00006A8F 00                  <1> lbad3 db 0
  8052 00006A90 00                  <1> lbad4 db 0
  8053 00006A91 00                  <1> lbad5 db 0
  8054 00006A92 00                  <1> lbad6 db 0
  8055 00006A93 6400                <1> segments dw 100
  8056                              <1> 
  8057                              <1> diskr:		;;sector count in cl, disk number in ch, 48 bit address with last 32 bits in ebx, buffer in esi, puts end buffer in edi and end lba in edx
  8058                              <1> 
  8059 00006A95 8935[AA6B0000]      <1> 	mov [bufferstartesi], esi
  8060 00006A9B 891D[A66B0000]      <1> 	mov [lbaadstartebx], ebx
  8061 00006AA1 31D2                <1> 	xor edx, edx
  8062 00006AA3 88CA                <1> 	mov dl, cl
  8063 00006AA5 01DA                <1> 	add edx, ebx
  8064 00006AA7 8915[A26B0000]      <1> 	mov [lbaadend], edx
  8065 00006AAD 881D[8D6A0000]      <1> 	mov [lbad1], bl
  8066 00006AB3 883D[8E6A0000]      <1> 	mov [lbad2], bh
  8067 00006AB9 C1C310              <1> 	rol ebx, 16
  8068 00006ABC 881D[8F6A0000]      <1> 	mov [lbad3], bl
  8069 00006AC2 883D[906A0000]      <1> 	mov [lbad4], bh
  8070 00006AC8 C1CB10              <1> 	ror ebx, 16
  8071                              <1> 
  8072 00006ACB B840000000          <1> 	mov eax, 0x40
  8073 00006AD0 66BAF601            <1> 	mov dx, 0x1F6
  8074 00006AD4 EE                  <1> 	out dx, al	;;send magic bits-add drive indicator later
  8075                              <1> 	
  8076 00006AD5 30C0                <1> 	xor al, al
  8077 00006AD7 66BAF201            <1> 	mov dx, 0x1F2
  8078 00006ADB EE                  <1> 	out dx, al	;;16 bit sector count-last byte now 0
  8079                              <1> 	
  8080 00006ADC A0[906A0000]        <1> 	mov al, [lbad4]
  8081 00006AE1 6642                <1> 	inc dx
  8082 00006AE3 EE                  <1> 	out dx, al
  8083                              <1> 	
  8084 00006AE4 A0[916A0000]        <1> 	mov al, [lbad5]
  8085 00006AE9 6642                <1> 	inc dx
  8086 00006AEB EE                  <1> 	out dx, al
  8087                              <1> 	
  8088 00006AEC A0[926A0000]        <1> 	mov al, [lbad6]
  8089 00006AF1 6642                <1> 	inc dx
  8090 00006AF3 EE                  <1> 	out dx, al
  8091                              <1> 	
  8092 00006AF4 88C8                <1> 	mov al, cl
  8093 00006AF6 66BAF201            <1> 	mov dx, 0x1F2
  8094 00006AFA EE                  <1> 	out dx, al	;;low byte of 16 bit sector count
  8095                              <1> 	
  8096 00006AFB A0[8D6A0000]        <1> 	mov al, [lbad1]
  8097 00006B00 6642                <1> 	inc dx
  8098 00006B02 EE                  <1> 	out dx, al
  8099                              <1> 	
  8100 00006B03 A0[8E6A0000]        <1> 	mov al, [lbad2]
  8101 00006B08 6642                <1> 	inc dx
  8102 00006B0A EE                  <1> 	out dx, al
  8103                              <1> 	
  8104 00006B0B A0[8F6A0000]        <1> 	mov al, [lbad3]
  8105 00006B10 6642                <1> 	inc dx
  8106 00006B12 EE                  <1> 	out dx, al
  8107                              <1> 	
  8108 00006B13 B024                <1> 	mov al, 0x24
  8109 00006B15 66BAF701            <1> 	mov dx, 0x1F7
  8110 00006B19 EE                  <1> 	out dx, al	;;READ!!!
  8111 00006B1A 66BBFFFF            <1> 	mov bx, 0xFFFF		;;try 65536 times before forcing
  8112                              <1> diskrwait:
  8113 00006B1E 66BAF701            <1> 	mov dx, 0x1F7
  8114 00006B22 EC                  <1> 	in al, dx
  8115 00006B23 2408                <1> 	and al, 0x08
  8116 00006B25 664B                <1> 	dec bx
  8117 00006B27 6681FB0000          <1> 	cmp bx, 0
  8118 00006B2C 7404                <1> 	je nomorediskwait
  8119 00006B2E 3C08                <1> 	cmp al, 0x08
  8120 00006B30 75EC                <1> 	jne diskrwait
  8121                              <1> nomorediskwait:
  8122 00006B32 66BB0001            <1> 	mov bx, 256
  8123                              <1> diskdataread:
  8124 00006B36 66BAF001            <1> 	mov dx, 0x1F0
  8125 00006B3A 66ED                <1> 	in ax, dx
  8126 00006B3C 668906              <1> 	mov [esi], ax
  8127 00006B3F 81C602000000        <1> 	add esi, 2
  8128 00006B45 664B                <1> 	dec bx
  8129 00006B47 6681FB0000          <1> 	cmp bx, 0
  8130 00006B4C 75E8                <1> 	jne diskdataread		;;read a sector
  8131 00006B4E FEC9                <1> 	dec cl
  8132 00006B50 80F900              <1> 	cmp cl, 0
  8133 00006B53 75C9                <1> 	jne diskrwait
  8134 00006B55 89F7                <1> 	mov edi, esi
  8135 00006B57 8B15[A26B0000]      <1> 	mov edx, [lbaadend]
  8136 00006B5D 8B35[AA6B0000]      <1> 	mov esi, [bufferstartesi]
  8137 00006B63 8B1D[A66B0000]      <1> 	mov ebx, [lbaadstartebx]
  8138 00006B69 C3                  <1> 	ret
  8139                              <1> 	
  8140                              <1> 	
  8141                              <1> diskold: ;;28 bits
  8142 00006B6A 6631C0              <1> 	xor ax, ax
  8143 00006B6D 66BAF101            <1> 	mov dx, 0x1F1
  8144 00006B71 EE                  <1> 	out dx, al	;;send null byte to port
  8145 00006B72 6642                <1> 	inc dx	;;0x1F2
  8146 00006B74 88C8                <1> 	mov al, cl	;;get sector count
  8147 00006B76 EE                  <1> 	out dx, al	;;send sector count
  8148 00006B77 6642                <1> 	inc dx	;;0x1F3
  8149 00006B79 88D8                <1> 	mov al, bl	;;get first 8 bits of address
  8150 00006B7B EE                  <1> 	out dx, al	;;send them
  8151 00006B7C 6642                <1> 	inc dx	;;0x1F4
  8152 00006B7E C1CB08              <1> 	ror ebx, 8	;;get next 8 bits
  8153 00006B81 88D8                <1> 	mov al, bl
  8154 00006B83 EE                  <1> 	out dx, al
  8155 00006B84 6642                <1> 	inc dx	;;0x1F5
  8156 00006B86 C1CB08              <1> 	ror ebx, 8	;;again
  8157 00006B89 88D8                <1> 	mov al, bl
  8158 00006B8B EE                  <1> 	out dx, al
  8159 00006B8C 6642                <1> 	inc dx	;;0x1F6
  8160 00006B8E C1CB08              <1> 	ror ebx, 8
  8161 00006B91 88D8                <1> 	mov al, bl
  8162 00006B93 240F                <1> 	and al, 00001111b	;;last 4 bits of address
  8163 00006B95 0CE0                <1> 	or al, 0xE0			;;majic number
  8164 00006B97 C0E504              <1> 	shl ch, 4
  8165 00006B9A 08E8                <1> 	or al, ch
  8166 00006B9C EE                  <1> 	out dx, al			;;send drive indicator, magic bits, and highest 4 bits of address
  8167 00006B9D 6642                <1> 	inc dx	;;0x1F7
  8168 00006B9F B020                <1> 	mov al, 0x20
  8169 00006BA1 EE                  <1> 	out dx, al			;;execute read command
  8170                              <1> 	
  8171 00006BA2 00000000            <1> lbaadend dd 0
  8172 00006BA6 00000000            <1> lbaadstartebx dd 0
  8173 00006BAA 00000000            <1> bufferstartesi dd 0
  8174                                  	%include 'source/threads.asm'
  8175                              <1> ;;THIS IS MY FIRST ATTEMPT AT IMPLEMENTING THREADS
  8176                              <1> threadstarttest:
  8177 00006BAE E9DF040000          <1>     jmp startthreads
  8178                              <1> mainthread:
  8179 00006BB3 F4                  <1> 	hlt		;;this does not work properly
  8180 00006BB4 EBFD                <1> 	jmp mainthread
  8181                              <1> 	
  8182                              <1> nwcmdst:
  8183 00006BB6 B0FD                <1> 	mov al, 11111101b
  8184 00006BB8 E621                <1> 	out 0x21, al
  8185 00006BBA C605[F46B0000]00    <1> 	mov byte [threadson], 0
  8186 00006BC1 E957C4FFFF          <1> 	jmp nwcmd
  8187                              <1> 	
  8188                              <1> modelthread:
  8189 00006BC6 668B1D[11720000]    <1> 	mov bx, [currentthread]
  8190 00006BCD B001                <1> 	mov al, 1
  8191 00006BCF B409                <1> 	mov ah, 9
  8192 00006BD1 31C9                <1> 	xor ecx, ecx
  8193 00006BD3 6689D9              <1> 	mov cx, bx
  8194 00006BD6 CD30                <1> 	int 0x30
  8195                              <1> 	
  8196 00006BD8 B90000DEC0          <1> 	mov ecx, 0xC0DE0000
  8197 00006BDD 6689D9              <1> 	mov cx, bx
  8198 00006BE0 CD30                <1> 	int 0x30
  8199                              <1> 	
  8200 00006BE2 B90000ADDE          <1> 	mov ecx, 0xDEAD0000
  8201 00006BE7 6689D9              <1> 	mov cx, bx
  8202 00006BEA CD30                <1> 	int 0x30
  8203                              <1> 	
  8204 00006BEC CD40                <1> 	int 0x40	;;skip this thread three times to ensure that all threads run
  8205 00006BEE CD40                <1> 	int 0x40
  8206 00006BF0 CD40                <1> 	int 0x40
  8207                              <1> 	
  8208 00006BF2 EBC2                <1> 	jmp nwcmdst
  8209                              <1> 	
  8210                              <1> 	
  8211 00006BF4 00                  <1> threadson db 0
  8212 00006BF5 04000000            <1> lastthread dd 4
  8213                              <1> 
  8214                              <1> thrdtst:
  8215 00006BF9 [C66B0000]<rept>    <1> times 256 dd modelthread	;;could go up to 2048, but that takes too long
  8216                              <1> thrdtstend:
  8217                              <1> 
  8218 00006FF9 00000000            <1> 	espold dd 0
  8219                              <1> 
  8220                              <1> threadfork:
  8221 00006FFD C605[F46B0000]01    <1> 	mov byte [threadson], 1
  8222 00007004 60                  <1> 	pushad
  8223 00007005 66B80040            <1> 	mov ax, 0x4000	;;this is the divider for the PIT
  8224 00007009 E640                <1> 	out 0x40, al
  8225 0000700B 66C1C008            <1> 	rol ax, 8
  8226 0000700F E640                <1> 	out 0x40, al
  8227                              <1> 	
  8228 00007011 8CC8                <1> 	mov eax, cs
  8229 00007013 89C2                <1> 	mov edx, eax
  8230 00007015 8B4C2428            <1> 	mov ecx, [esp + 40]
  8231 00007019 81C900020000        <1> 	or ecx, 0x200
  8232 0000701F 89E3                <1> 	mov ebx, esp
  8233 00007021 BC[67960000]        <1> 	mov esp, stackdummy
  8234 00007026 90                  <1> 	nop
  8235                              <1> 	
  8236 00007027 60                  <1> 	pushad
  8237 00007028 B8[B36B0000]        <1> 	mov eax, mainthread
  8238 0000702D 89442420            <1> 	mov [esp + 32], eax
  8239 00007031 89542424            <1> 	mov [esp + 36], edx
  8240 00007035 894C2428            <1> 	mov [esp + 40], ecx
  8241 00007039 8925[5F720000]      <1> 	mov [threadlist], esp
  8242                              <1> 	
  8243 0000703F 891D[F96F0000]      <1> 	mov [espold], ebx
  8244 00007045 89F0                <1> 	mov eax, esi
  8245 00007047 BC[679A0000]        <1> 	mov esp, stack1
  8246 0000704C 8B1D[F56B0000]      <1> 	mov ebx, [lastthread]
  8247 00007052 C1E30A              <1> 	shl ebx, 10
  8248 00007055 01DC                <1> 	add esp, ebx
  8249 00007057 C1EB0A              <1> 	shr ebx, 10
  8250 0000705A 90                  <1> 	nop
  8251 0000705B 60                  <1> 	pushad
  8252 0000705C 89442420            <1> 	mov [esp + 32], eax
  8253 00007060 89542424            <1> 	mov [esp + 36], edx
  8254 00007064 894C2428            <1> 	mov [esp + 40], ecx
  8255 00007068 89A3[5F720000]      <1> 	mov [threadlist + ebx], esp
  8256 0000706E 8B25[F96F0000]      <1> 	mov esp, [espold]
  8257 00007074 81C304000000        <1> 	add ebx, 4
  8258 0000707A 89A3[5F720000]      <1> 	mov [threadlist + ebx], esp
  8259 00007080 81C304000000        <1> 	add ebx, 4
  8260 00007086 891D[F56B0000]      <1> 	mov [lastthread], ebx
  8261 0000708C B020                <1> 	mov al, 0x20
  8262 0000708E E620                <1> 	out 0x20, al
  8263 00007090 61                  <1> 	popad
  8264 00007091 C3                  <1> 	ret
  8265                              <1> 
  8266                              <1> startthreads:
  8267 00007092 C605[F46B0000]01    <1> 	mov byte [threadson], 1
  8268 00007099 60                  <1> 	pushad
  8269 0000709A 66B800A0            <1> 	mov ax, 0xA000	;;this is the divider for the PIT
  8270 0000709E E640                <1> 	out 0x40, al
  8271 000070A0 66C1C008            <1> 	rol ax, 8
  8272 000070A4 E640                <1> 	out 0x40, al
  8273                              <1> 	
  8274 000070A6 8CC8                <1> 	mov eax, cs
  8275 000070A8 89C2                <1> 	mov edx, eax
  8276 000070AA 8B4C2428            <1> 	mov ecx, [esp + 40]
  8277 000070AE 81C900020000        <1> 	or ecx, 0x200
  8278 000070B4 89E3                <1> 	mov ebx, esp
  8279 000070B6 BC[67960000]        <1> 	mov esp, stackdummy
  8280 000070BB 90                  <1> 	nop
  8281                              <1> 	
  8282 000070BC 60                  <1> 	pushad
  8283 000070BD B8[B36B0000]        <1> 	mov eax, mainthread
  8284 000070C2 89442420            <1> 	mov [esp + 32], eax
  8285 000070C6 89542424            <1> 	mov [esp + 36], edx
  8286 000070CA 894C2428            <1> 	mov [esp + 40], ecx
  8287 000070CE 8925[5F720000]      <1> 	mov [threadlist], esp
  8288                              <1> 
  8289                              <1> 			;;that above setup the dummy thread which for some reason does not run
  8290                              <1> 			;;this below will setup the threads found in thrdtst
  8291                              <1> 
  8292                              <1> testthreads:
  8293 000070D4 BE[F96B0000]        <1> 	mov esi, thrdtst
  8294 000070D9 BC[679A0000]        <1> 	mov esp, stack1
  8295 000070DE BF[5F720000]        <1> 	mov edi, threadlist
  8296 000070E3 81C704000000        <1> 	add edi, 4
  8297                              <1> nxtthreadld:
  8298 000070E9 60                  <1> 	pushad
  8299 000070EA 8B06                <1> 	mov eax, [esi]
  8300 000070EC 89442420            <1> 	mov [esp + 32], eax
  8301 000070F0 89542424            <1> 	mov [esp + 36], edx
  8302 000070F4 894C2428            <1> 	mov [esp + 40], ecx
  8303 000070F8 8927                <1> 	mov [edi], esp
  8304 000070FA 81C400040000        <1> 	add esp, 1024
  8305 00007100 81C604000000        <1> 	add esi, 4
  8306 00007106 81C704000000        <1> 	add edi, 4
  8307 0000710C 81FF[67920000]      <1> 	cmp edi, threadlistend
  8308 00007112 0F8322000000        <1> 	jae near nomorethreadspace
  8309 00007118 81FC[67A22000]      <1> 	cmp esp, bssend
  8310 0000711E 0F8350000000        <1> 	jae near nomorestackspace
  8311 00007124 81FE[F96F0000]      <1> 	cmp esi, thrdtstend
  8312 0000712A 72BD                <1> 	jb nxtthreadld
  8313 0000712C 89DC                <1> 	mov esp, ebx	
  8314                              <1> 	;mov al, 0xFE
  8315                              <1> 	;out 0x21, al
  8316 0000712E 30C0                <1> 	xor al, al
  8317 00007130 E621                <1> 	out 0x21, al
  8318 00007132 B020                <1> 	mov al, 0x20
  8319 00007134 E620                <1> 	out 0x20, al
  8320 00007136 61                  <1> 	popad
  8321 00007137 FB                  <1> 	sti
  8322 00007138 EBFE                <1> 	jmp $	;;wait for the irq to hook
  8323                              <1> 	
  8324                              <1> nomorethreadspace:
  8325 0000713A BE[50710000]        <1> 	mov esi, nmts
  8326 0000713F E882B8FFFF          <1> 	call print
  8327 00007144 C605[F46B0000]00    <1> 	mov byte [threadson], 0
  8328 0000714B E9CDBEFFFF          <1> 	jmp nwcmd
  8329 00007150 74656820636F6C6F6E- <1> nmts	db "teh colonel no can haz moar treds",13,10,0
  8330 00007159 656C206E6F2063616E- <1>
  8331 00007162 2068617A206D6F6172- <1>
  8332 0000716B 2074726564730D0A00  <1>
  8333                              <1> 
  8334                              <1> nomorestackspace:
  8335 00007174 BE[8A710000]        <1> 	mov esi, nmss
  8336 00007179 E848B8FFFF          <1> 	call print
  8337 0000717E C605[F46B0000]00    <1> 	mov byte [threadson], 0
  8338 00007185 E993BEFFFF          <1> 	jmp nwcmd
  8339 0000718A 74656820636F6C6F6E- <1> nmss	db "teh colonel no can haz moar staqz",13,10,0
  8340 00007193 656C206E6F2063616E- <1>
  8341 0000719C 2068617A206D6F6172- <1>
  8342 000071A5 20737461717A0D0A00  <1>
  8343                              <1> 	
  8344                              <1> threadswitch:
  8345 000071AE FA                  <1> 	cli
  8346 000071AF 60                  <1> 	pushad
  8347 000071B0 BF[5F720000]        <1> 	mov edi, threadlist
  8348 000071B5 31C0                <1> 	xor eax, eax
  8349 000071B7 66A1[11720000]      <1> 	mov ax, [currentthread]
  8350 000071BD 6640                <1> 	inc ax
  8351 000071BF 66A3[11720000]      <1> 	mov [currentthread], ax
  8352 000071C5 6648                <1> 	dec ax
  8353 000071C7 C1E002              <1> 	shl eax, 2
  8354 000071CA 01C7                <1> 	add edi, eax
  8355 000071CC 8927                <1> 	mov [edi], esp
  8356 000071CE 81C704000000        <1> 	add edi, 4
  8357 000071D4 81FF[67920000]      <1> 	cmp edi, threadlistend
  8358 000071DA 0F830D000000        <1> 	jae near nookespthread
  8359 000071E0 8B07                <1> 	mov eax, [edi]
  8360 000071E2 3D00000000          <1> 	cmp eax, 0
  8361 000071E7 0F851B000000        <1> 	jne near okespthread
  8362                              <1> nookespthread:
  8363 000071ED BF[5F720000]        <1> 	mov edi, threadlist
  8364 000071F2 6631C0              <1> 	xor ax, ax
  8365 000071F5 66A3[11720000]      <1> 	mov [currentthread], ax
  8366 000071FB 8B07                <1> 	mov eax, [edi]
  8367 000071FD 3D00000000          <1> 	cmp eax, 0
  8368 00007202 0F84AEF9FFFF        <1> 	je near nwcmdst
  8369                              <1> okespthread:
  8370 00007208 89C4                <1> 	mov esp, eax
  8371 0000720A B020                <1> 	mov al, 0x20
  8372 0000720C E620                <1> 	out 0x20, al
  8373 0000720E 61                  <1> 	popad
  8374 0000720F FB                  <1> 	sti
  8375 00007210 CF                  <1> 	iretd
  8376                              <1> 	
  8377 00007211 0000                <1> currentthread dw 0
  8378                                      %include 'fileindex.asm'
  8379                              <1> diskfileindex:
  8380 00007213 646F7370726F6700    <1> db "dosprog",0
  8381 0000721B 44000000            <1> dd (f0-$$)/512
  8382 0000721F 01000000            <1> dd (f1-f0)/512
  8383 00007223 65787000            <1> db "exp",0
  8384 00007227 45000000            <1> dd (f1-$$)/512
  8385 0000722B 01000000            <1> dd (f2-f1)/512
  8386 0000722F 666F726B00          <1> db "fork",0
  8387 00007234 46000000            <1> dd (f2-$$)/512
  8388 00007238 01000000            <1> dd (f3-f2)/512
  8389 0000723C 66707500            <1> db "fpu",0
  8390 00007240 47000000            <1> dd (f3-$$)/512
  8391 00007244 01000000            <1> dd (f4-f3)/512
  8392 00007248 6C696E757800        <1> db "linux",0
  8393 0000724E 48000000            <1> dd (f4-$$)/512
  8394 00007252 01000000            <1> dd (f5-f4)/512
  8395 00007256 736F6C6C65726F732E- <1> db "solleros.bmp",0
  8396 0000725F 626D7000            <1>
  8397 00007263 49000000            <1> dd (f5-$$)/512
  8398 00007267 B0020000            <1> dd (f6-f5)/512
  8399 0000726B 736F6C6C65726F732E- <1> db "solleros.txt",0
  8400 00007274 74787400            <1>
  8401 00007278 F9020000            <1> dd (f6-$$)/512
  8402 0000727C 01000000            <1> dd (f7-f6)/512
  8403 00007280 736F756E6400        <1> db "sound",0
  8404 00007286 FA020000            <1> dd (f7-$$)/512
  8405 0000728A 01000000            <1> dd (f8-f7)/512
  8406 0000728E 74656C7900          <1> db "tely",0
  8407 00007293 FB020000            <1> dd (f8-$$)/512
  8408 00007297 01000000            <1> dd (f9-f8)/512
  8409 0000729B 74696D6500          <1> db "time",0
  8410 000072A0 FC020000            <1> dd (f9-$$)/512
  8411 000072A4 02000000            <1> dd (f10-f9)/512
  8412 000072A8 7475746F7269616C2E- <1> db "tutorial.bat",0
  8413 000072B1 62617400            <1>
  8414 000072B5 FE020000            <1> dd (f10-$$)/512
  8415 000072B9 03000000            <1> dd (f11-f10)/512
  8416 000072BD 756E667300          <1> db "unfs",0
  8417 000072C2 01030000            <1> dd (f11-$$)/512
  8418 000072C6 B9020000            <1> dd (f12-f11)/512
  8419                              <1> enddiskfileindex:
  8420                              <1> 
  8421                                  	%include 'source/msg.asm'
  8422 000072CA 57656C636F6D652074- <1> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,13,0
  8423 000072D3 6F2074686520536F6C- <1>
  8424 000072DC 6C65724F5320486172- <1>
  8425 000072E5 646C7920556E69782D- <1>
  8426 000072EE 436F6D70617469626C- <1>
  8427 000072F7 65205368656C6C210A- <1>
  8428 00007300 0D00                <1>
  8429 00007302 6578697400          <1> 	exitmsg db	"exit",0
  8430 00007307 50726F6772616D2022- <1> 	notfound1 db "Program ",34,0
  8431 00007310 00                  <1>
  8432 00007311 22206E6F7420666F75- <1> 	notfound2 db  34," not found.",13,10,0
  8433 0000731A 6E642E0D0A00        <1>
  8434 00007320 757365726E616D653A- <1> 	userask db "username:",0
  8435 00007329 00                  <1>
  8436 0000732A 70617373776F72643A- <1> 	pwdask	db	"password:",0
  8437 00007333 00                  <1>
  8438 00007334 40536F6C6C65724F53- <1> 	location	db	"@SollerOS]:",0
  8439 0000733D 5D3A00              <1>
  8440 00007340 0D0A00              <1> 	line	db	13,10,0
  8441 00007343 200900              <1> 	dirtab 	db " ",9,0
  8442                              <1> 	userlst:
  8443 00007346 7573657200          <1> 			db "user",0
  8444 0000734B 70617373776F726400  <1> 			db "password",0
  8445 00007354 726F6F7400          <1> 			db "root",0
  8446 00007359 617765736F6D65706F- <1> 			db "awesomepower",0
  8447 00007362 77657200            <1>
  8448 00007366 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
  8449 00007368 00                  <1> 			db 0
  8450                              <1> 	userlstend:
  8451                              <1> 	
  8452 00007368 <incbin>            <1> fonts:	incbin 'source/precompiled/fonts.pak'
  8453                              <1> fontend:
  8454                              <1> 
  8455                              <1> 
  8456                              <1> mcursor:
  8457 00008369 01                  <1> 	db	00000001b
  8458 0000836A 81                  <1> 	db	10000001b
  8459 0000836B C1                  <1> 	db	11000001b
  8460 0000836C E1                  <1> 	db	11100001b
  8461 0000836D F1                  <1> 	db	11110001b
  8462 0000836E F9                  <1> 	db	11111001b
  8463 0000836F FD                  <1> 	db	11111101b
  8464 00008370 FF                  <1> 	db	11111111b
  8465 00008371 F9                  <1> 	db	11111001b
  8466 00008372 B9                  <1> 	db	10111001b
  8467 00008373 39                  <1> 	db	00111001b
  8468 00008374 1C                  <1> 	db	00011100b
  8469 00008375 1C                  <1> 	db	00011100b
  8470 00008376 0E                  <1> 	db	00001110b
  8471 00008377 0E                  <1> 	db	00001110b
  8472 00008378 0C                  <1> 	db	00001100b
  8473                              <1> 
  8474                              <1> VBEMODEBLOCK:
  8475 00008379 00<rept>            <1> vbesignature 		times 4 db 0	;VBE Signature
  8476 0000837D 00<rept>            <1> vbeversion  		times 2 db 0	;VBE Version
  8477 0000837F 00<rept>            <1> oemstringptr  		times 4 db 0	;Pointer to OEM String
  8478 00008383 00<rept>            <1> capabilities 		times 4 db 0	;Capabilities of graphics cont.
  8479 00008387 00<rept>            <1> videomodeptr 		times 4 db 0	;Pointer to Video Mode List
  8480 0000838B 00<rept>            <1> totalmemory   		times 2 db 0	;number of 64Kb memory blocks
  8481 0000838D 00<rept>            <1> oemsoftwarerev  	times 2 db 0	;VBE implementation Software revision
  8482 0000838F 00<rept>            <1> oemvendornameptr 	times 4 db 0	;Pointer to Vendor Name String
  8483 00008393 00<rept>            <1> oemproductnameptr 	times 4 db 0	;Pointer to Product Name String
  8484 00008397 00<rept>            <1> oemproductrevptr 	times 4 db 0	;Pointer to Product Revision String
  8485 0000839B 00<rept>            <1> reserved			times 222 db 0	;Reserved for VBE implementation scratch area
  8486 00008479 00<rept>            <1> oemdata 			times 256 db 0	;Data Area for OEM Strings
  8487                              <1> 
  8488                              <1> 
  8489                              <1> VBEMODEINFOBLOCK:
  8490                              <1> ;Mandatory information for all VBE revision
  8491 00008579 00<rept>            <1> modeattributes   	times 2 db 0	;Mode attributes
  8492 0000857B 00                  <1> winaattributes   	times 1 db 0	;Window A attributes
  8493 0000857C 00                  <1> winbattributes   	times 1 db 0	;Window B attributes
  8494 0000857D 00<rept>            <1> wingranularity   	times 2 db 0	;Window granularity
  8495 0000857F 00<rept>            <1> winsize          	times 2 db 0	;Window size
  8496 00008581 00<rept>            <1> winasegment      	times 2 db 0	;Window A start segment
  8497 00008583 00<rept>            <1> winbsegment      	times 2 db 0	;Window B start segment
  8498 00008585 00<rept>            <1> winfuncptr       	times 4 db 0	;pointer to window function
  8499 00008589 00<rept>            <1> bytesperscanline 	times 2 db 0	;Bytes per scan line
  8500                              <1> 
  8501                              <1> ;Mandatory information for VBE 1.2 and above
  8502 0000858B 00<rept>            <1> xresolution     	times 2 db 0	;Horizontal resolution in pixel or chars
  8503 0000858D 00<rept>            <1> yresolution	    	times 2 db 0	;Vertical resolution in pixel or chars
  8504 0000858F 00                  <1> xcharsize       	times 1 db 0	;Character cell width in pixel
  8505 00008590 00                  <1> ycharsize       	times 1 db 0	;Character cell height in pixel
  8506 00008591 00                  <1> numberofplanes  	times 1 db 0	;Number of memory planes
  8507 00008592 00                  <1> bitsperpixel    	times 1 db 0	;Bits per pixel
  8508 00008593 00                  <1> numberofbanks   	times 1 db 0	;Number of banks
  8509 00008594 00                  <1> memorymodel     	times 1 db 0	;Memory model type
  8510 00008595 00                  <1> banksize        	times 1 db 0	;Bank size in KB
  8511 00008596 00                  <1> numberofimagepages	times 1 db 0	;Number of images
  8512 00008597 00                  <1> reserved1       	times 1 db 0	;Reserved for page function
  8513                              <1> 
  8514                              <1> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  8515 00008598 00                  <1> redmasksize			times 1 db 0	;Size of direct color red mask in bits
  8516 00008599 00                  <1> redfieldposition	times 1 db 0	;Bit position of lsb of red bask
  8517 0000859A 00                  <1> greenmasksize   	times 1 db 0	;Size of direct color green mask in bits
  8518 0000859B 00                  <1> greenfieldposition	times 1 db 0	;Bit position of lsb of green bask
  8519 0000859C 00                  <1> bluemasksize		times 1 db 0	;Size of direct color blue mask in bits
  8520 0000859D 00                  <1> bluefieldposition	times 1 db 0	;Bit position of lsb of blue bask
  8521 0000859E 00                  <1> rsvdmasksize        times 1	db 0	;Size of direct color reserved mask in bits
  8522 0000859F 00                  <1> rsvdfieldposition	times 1	db 0	;Bit position of lsb of reserved bask
  8523 000085A0 00                  <1> directcolormodeinfo	times 1 db 0	;Direct color mode attributes
  8524                              <1> 
  8525                              <1> ;Mandatory information for VBE 2.0 and above
  8526 000085A1 00<rept>            <1> physbaseptr 		times 4 db 0	;Physical address for flat frame buffer
  8527 000085A5 00<rept>            <1> offscreenmemoffset 	times 4 db 0	;Pointer to start of off screen memory
  8528 000085A9 00<rept>            <1> offscreenmemsize 	times 2 db 0    ;Amount of off screen memory in 1Kb units
  8529 000085AB 00<rept>            <1> reserved2 			times 206 db 0  ;Remainder of ModeInfoBlock
  8530                                  	;%include 'source/memory.asm'
  8531                                  	%include 'source/buf.asm'
  8532 00008679 4255465354415254    <1> db "BUFSTART"
  8533                              <1> [section .bss]
  8534                              <1> bssstart:
  8535                              <1> stack:
  8536 00000000 <res 00001000>      <1> 	resb 4096
  8537                              <1> stackend:
  8538                              <1> graphicstable: ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
  8539 00001000 <res 00000200>      <1> 	resb 200h 
  8540                              <1> 	graphicstableend:
  8541                              <1> mousecolorbuf: ;where the gui under the mouse is stored
  8542 00001200 <res 00000100>      <1> 	resb 256
  8543                              <1> mcolorend:
  8544 00001300 <res 00000200>      <1> fileindex: resb 200h
  8545                              <1> fileindexend:
  8546 00001500 <res 00000001>      <1> IFON resb 1 
  8547 00001501 <res 00000064>      <1> IFTRUE resb 100 
  8548 00001565 <res 00000004>      <1> BATCHPOS resb 4 
  8549 00001569 <res 00000001>      <1> BATCHISON resb 1 
  8550 0000156A <res 00000001>      <1> LOOPON resb 1 
  8551 0000156B <res 00000004>      <1> LOOPPOS	resb 4 
  8552 0000156F <res 00000500>      <1> variables: 	resb 500h 
  8553 00001A6F <res 00000001>      <1> varend: resb 1
  8554 00001A70 <res 00000100>      <1> buftxt2: resb 100h
  8555 00001B70 <res 0000000A>      <1> resb 10
  8556 00001B7A <res 00000200>      <1> buftxt: resb 200h 
  8557                              <1> buftxtend:
  8558 00001D7A <res 00000014>      <1> buf2:	resb 20 
  8559 00001D8E <res 00000001>      <1> numbuf: resb 1 
  8560 00001D8F <res 00005000>      <1> videobuf 		resb (160*64*2)	;1280x1024pixels in characters
  8561 00006D8F <res 000000C8>      <1> videobufend		resb 200
  8562 00006E57 <res 00000004>      <1> lastcommandpos: resb 4
  8563 00006E5B <res 00000004>      <1> currentcommandpos: resb 4
  8564                              <1> commandbuf:
  8565 00006E5F <res 00000400>      <1> resb 1024
  8566                              <1> commandbufend:
  8567                              <1> rbuffstart: ;for use with networking
  8568                              <1> ;resb 8212
  8569                              <1> threadlist:	;;this buffer will hold the stack locations of all of the threads, up to 2048
  8570 0000725F <res 00002008>      <1> 	resb 2050*4
  8571                              <1> threadlistend:
  8572                              <1> stacks:		;;the stacks will go on forever until end of memory
  8573 00009267 <res 00000400>      <1> 	resb 1024
  8574                              <1> stackdummy:
  8575 00009667 <res 00000400>      <1> 	resb 1024
  8576                              <1> stack1:
  8577 00009A67 <res 00200800>      <1> 	resb 1024*2050	;;woah, thats a lot of space for stacks
  8578                              <1> bssend:		;;from here on, it is not kernel space so apps can be loaded here.
  8579                              <1> [section .text]
  8580                                      %include 'files.asm'
  8581 00008681 00<rept>            <1> align 512,db 0
  8582                              <1> f0:
  8583 00008681 <incbin>            <1> incbin "included/dosprog"
  8584 0000894B 00<rept>            <1> align 512,db 0
  8585                              <1> f1:
  8586 0000894B <incbin>            <1> incbin "included/exp"
  8587 00008B27 00<rept>            <1> align 512,db 0
  8588                              <1> f2:
  8589 00008B27 <incbin>            <1> incbin "included/fork"
  8590 00008C67 00<rept>            <1> align 512,db 0
  8591                              <1> f3:
  8592 00008C67 <incbin>            <1> incbin "included/fpu"
  8593 00008E9F 00<rept>            <1> align 512,db 0
  8594                              <1> f4:
  8595 00008E9F <incbin>            <1> incbin "included/linux"
  8596 00009004 00<rept>            <1> align 512,db 0
  8597                              <1> f5:
  8598 00009004 <incbin>            <1> incbin "included/solleros.bmp"
  8599 0005F1E6 00<rept>            <1> align 512,db 0
  8600                              <1> f6:
  8601 0005F1E6 <incbin>            <1> incbin "included/solleros.txt"
  8602 0005F376 00<rept>            <1> align 512,db 0
  8603                              <1> f7:
  8604 0005F376 <incbin>            <1> incbin "included/sound"
  8605 0005F4F4 00<rept>            <1> align 512,db 0
  8606                              <1> f8:
  8607 0005F4F4 <incbin>            <1> incbin "included/tely"
  8608 0005F779 00<rept>            <1> align 512,db 0
  8609                              <1> f9:
  8610 0005F779 <incbin>            <1> incbin "included/time"
  8611 0005FA7B 00<rept>            <1> align 512,db 0
  8612                              <1> f10:
  8613 0005FA7B <incbin>            <1> incbin "included/tutorial.bat"
  8614 000600AA 00<rept>            <1> align 512,db 0
  8615                              <1> f11:
  8616 000600AA <incbin>            <1> incbin "included/unfs"
  8617                              <1> align 512,db 0
  8618                              <1> f12:
